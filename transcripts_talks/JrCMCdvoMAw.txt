Hi, welcome to Conf42, open source showcase. I'm Tom Payne, I'm a open source developer living in Zurich. Today I'm going to talk about a shame while in 10 minutes. What is shame while? It's a dot file manager. Firstly, what's a dot file? A dot file is a generic term for your personal configuration files, where you configure in tune your tools, like Git, your editor, your share and so on. They're generally very personal and if you invested time in configuring these tools, then you generally want to use your configurations of as many machines as possible. For example, you want to share config between your home laptop, home server, your work laptop, your work server. What makes shame while particularly interesting? Well, it's extremely flexible. It runs everywhere. Linux, MacOS, in Windows, Windows services for Linux, Termux, and name it. It's a shame while I'm running this. It supports all the variations you might want from a machine to machine in a very easy to use way. It's very secure. It has great support for maintaining secrets on different machines and making sure secrets do not get checked out in machines where they don't need to be. This is great, for example. It means that your home secrets don't get checked out on your work machine and your work secrets don't get checked out on your home machine. It's very cross-platforms. I mentioned very easy to install. Why should you use a dot file manager at all? Well, if you've invested the time in your creating your dot files, then you definitely want to use those configurations as widely as possible. It's great backup if you lose access to your machine for whatever is in our display or if you want your setting up new machine and you want to get your configuration up and running as quickly as possible in a new machine. You can all the advantages of version control, checking stuff into a Git repo, history, rollbacks, you'll search many of that and find the careful management of secrets. So enough intro, let's go straight into a little demo. This is a Mac mini. I've just installed this completely empty, apart from installing home brew, no shooting is urgent. Shema is very easy to install. It's in home brew. There are packages for every major load distribution, devs and rkms, the pre-built binaries. There are, as I said, on my shell script install. It's very quick to get into machine. Now I've already got it. I have an example, a dot file repo here, which I'll now check out on to this new machine. Here you go. This will ask you for email, which I'll be doing right now. It's configurable, I'll explain that later. Shema has checked out the Git repo. We can actually see what it's shown. It's here in this DicLexxelm folder, just a couple of dot files and a web directory. We can now apply those changes. We can see the changes that Shema would make. First, it's going to be created, the Git config and dot netrc. Shema apply, actually causes Shema to write those files. It does so in a very robust fashion. We'll see that there's no changes. Indeed, the dot files exist. That's an optical interesting. Let's show Shema. file to multiple machines. Here is a little Linux box using the same dot file Git repo. Let's say I'm going to add a Tmax config. I want to get Shema to add it. This has added it to the Git repo, but not pushed it. Shema can automatically create commits and push them for you. This shows what's happening here. We can add a dot file to our repo. It's very commit. Let's push it. There, it's off on GitHub. Back to my Mac now. I can pull these changes in with Shema update. Let's see what. I'm showing Shema as pull the changes and apply them. It makes it very easy to share dot files with multiple machines. That one is so, it's not particularly interesting. Let's look at more interesting example. The dot file repo contains a once-win mapping between dot files in your home directory and files in a repo. There's no extra configuration file there. It's just you all of the attributes of the file, for example, with a private, a template, etc. are stored in the file name. The Git config is interesting. The final file is Git config. I can look at it. But we look at a source file. It's actually a template that is indicated by the template suffix. These curly brackets indicate this is a template variable. We can switch based on those template variables. Email was prompted to me when I first in it. But you can use whatever variables you want. You can define your own. Shema provides a whole load of variables you can use to switch behavior from machine to machine, including architecture, operating system, etc. etc. For secret management, that's a basic template. Another example is a secret management. An example file might have a secret is dot netrc. This contains a password. It needs to have private missions and use a command. The list is represented with this private prefix in the source here, which means that Shema creates the permissions correctly. It's a template as well. What's interesting is we want a password present on this. But we don't want the password in our dot files repo because everyone read that. If we look at the actual source, it's also a template. But here I'm using a magic function secret, which in this case decoms the secret. This magic function can also integrate with all different password managers. The last password is one pass keychain, go pass whatever you want. This way, the secrets are either encrypted or sort of your password manager and Shema transparently retrieves them when needed and when you get to create the dot file list. This is a quick example of sharing code through machines, co-pubed differences from machine to machine, personal configuration variables and secret management, running on better Linux and macOS. Shema has loads more to it. It's a very nice document. I show you what dot IO with a full quick start, how to reference guide, etc. etc. Why do I think you should use Shema not to clear not any other dot file manager? Well, it's very widely used now. It's got over 2.6000 stars on GitHub. It's easy to install. It runs everywhere. It creates real regular files on your home directory, not linked into a central location like new snow. That means it's very easy to move from machine to machine. Shema is not to use Shema in the future. It's very easy to migrate away from it. Shema mentioned a single source of truth. That single file is often template, but it handles those machines very well. It has great secret management and loads extra functionality, which you can read in our documentation. Shema under the hood is a single binary, saturday linked to encrusted platform. This means there are no external dependencies when you come to install it and contrast with other dot file managers that might be written in a scripting language, Python or Ruby. You'll need to install the language runtime. First, before you can use dot file manager, Shema, single binary, no depth runs everywhere. It'd be great, very well with third party tools. If I default, you can use Git. You use Git for your repo, but it can be whatever you want. It's GPG for encrypting files and the password manager's command line interfaces for me. It does atomic updates of files. It never writes a partial file. You can use it as a shortcut, but it's a shortcut. You can use it as a shortcut. You can use it as a shortcut. You can use it as a shortcut, but it's a shortcut. You can use it as a shortcut. You can use it as a shortcut. You can use it as a shortcut, but it's a shortcut. You can use it as a shortcut. You can use it as a shortcut. You can use it as a shortcut, but it's a shortcut. You can use it as a shortcut. You can use it as a shortcut. The main website itself is Shema.io. Shema was written to a scratcher personage. It's been useful for me. I hope you can be useful to you too. Thank you.