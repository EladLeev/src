Featured,Track,Name1,JobTitle1,Company1,Name2,JobTitle2,Company2,Title,Abstract,LinkedIn1,Twitter1,LinkedIn2,Twitter2,Slides,Picture,YouTube,Keywords,Duration
No,main,Dmitriy Kovalenko,Lead Software Engineer,Lightsource,,,,The art of programmatic videos with rust,"This is going to be a release of https://fframes.studio. I've spend mostly 2 years to actually built it and dived into the video programming a lot. Videos are actually a sequence of images properly encoded. But how you can make your own video from scratch with only the code?

Here is a list of things you will know after attending this talk: 

1. How videos works under the hood? What are codecs and how they work?  
2. How to make a video with a code? 
3. Why using rust?
   3.1 Interop with libav aka ffmpeg 
   3.2 Memory efficient frame rendering
   3.3 GPU support 
4. Rendering frames problem. Browser vs Rust in svg rendering 
5. Audio creation remixing and blending
6. GPU for video rendering

And also you will have everything to start making videos programatically with Rust. Gonna be ðŸ”¥
",https://www.linkedin.com/in/dmtrkovalenko/,@dmtrKovalenko,,,,rust_dmitriy_kovalenko.png,,"programmatic,videos",
No,main,Tim McNamara,Senior Software Engineer,AWS,,,,Get maximum benefit from zero-cost abstractions,"This talk provides dozens of tips for improving your Rust code base. Rather than using slides, it is structured by providing ""before and after"" views of code examples that demonstrate a particular point.

Tips will be presented in themes:

### Use idiomatic Rust

Using idioms improves maintenance by allowing everyone in the project (including people who will arrive at the project in 2 years' time) to communicate using a shared vocabulary.

Examples drawn from:

- naming conventions
- API guidelines
- clippy lints

### Trust the abstractions

When coming from other languages, it's tempting to try to improve performance by remove abstractions. In Rust, that's usually the wrong approach. Iteration using higher-order functions results in typically results in generated code that's more memory efficient than what you would .

### Reducing cognitive load

Rust offers you lots of control. This has the downside of forcing you to make make choices when you would rather be writing your application. Some of the things that might affect learners:

- Should you avoid `.clone()` in your code base? 
- What's the difference between the `Default` trait and using a `::new()` static method
- How to choose between two similarly-named types, e.g. `HashMap` vs `BTreeMap`
- ...

### Size matters

When you can fit more within your CPU's memory caches, your program will run faster. 

### Smart pointers

What is a smart pointer? Which smart pointer should you choose? 

### Polymorphism patterns (aka enums are more powerful than they look)

There are a few ways to polymorphism in Rust. Generics and trait objects are well-known, but did you know that you can often get quite far with enums and the `match` keyword? 
",https://www.linkedin.com/in/timmcnamaranz/,@timClicks,,,,rust_tim_mcnamara.png,,"maximum,benefit,zero-cost,abstractions",
No,main,Brian Sam-Bodden,Developer Advocate,Redis,,,,Extending Redis with Rust,"In this session, we'll live-code a Redis Module in Rust that implements a Finite State Machine (FSM), we'll roughly follow these steps:
* Intro to Redis ~ 3 minutes
* Intro to Redis Modules ~ 2 minutes
* Bootstrap our project ~ 3-5 minutes
* Deploy skeleton module to Redis on Docker ~ 3-5 minutes
* TDD loop `till completion - Rest of the time!
  * Creating a new data structure/data type in Redis
  * Adding commands to manage our FST - one at a time",https://www.linkedin.com/in/sambodden/,@bsbodden,,,,rust_brian_sam-bodden.png,,"extending,redis",
No,main,Andrei Marinica,Core Team Software Developer,Elrond,,,,Pushing Rust to the limit in a Blockchain Environment,Rust's greatest strength is arguably its support for zero-overhead abstractions. This was crucial when creating a blazing fast smart contract framework on whose shoulders people entrust millions of dollars worth of assets. We almost broke Rust in the process. Almost.,https://www.linkedin.com/in/andrei-m-marinica-0b8a79b8/,@andreimmarinica,,,,rust_andrei_marinica.png,,"blockchain,environment",
No,main,Luca Bianchi,CTO,Neosperience,,,,Blazing fast serverless with Rust,"In this talk a brief introduction to Rust language will be provided, with a focus on its parallel processing capabilities, then a sample machine learning inference project is presented which pulls records from AWS Kinesis Serverless to perform customer churn prediction, then save the result back in a queue. Rust capabilities in parallel data processing and fast runtime execution are compared to standard Javascript and Python approaches solving the same problem. Some details are provided also about how to use AWS SAM to set up and deploy serverless lambda in Rust.",https://www.linkedin.com/in/lucabianchipavia/,@bianchiluca,,,,rust_luca_bianchi.png,,"blazing,fast,serverless",
No,main,Dmitry Kudryavtsev,Senior Software Engineer,Forter,,,,ðŸš€ Supercharge your Node.JS with Rust,"Node took the world by storm. It's probably one of the most popular Backend frameworks today, and for a good reason - it's easy to develop, it's very performant, easy to scale and has a huge community around it.

But let me ask you a simply question: How would you generate a PDF report using Node.js? Think about it for a moment and write down your answer. If you've answered puppeteer, pdfjs or spinning an AWS Lambda function - you are probably over complicating things.

JavaScript is not great at heavy computations, and the nature of Node.js being an event-loop driven framework, requires you to think carefully before executing a task that can potentially lock the event-loop.

But there are two solutions to introduce high performance into JavaScript and Node.js: Native Modules and WebAssembly. And what better language than the 2-year-in-a-row-most-loved-language-by-stackoverflow than Rust we can use for that? Join me on an exciting journey into high performance Node.js using Rust Native Modules and WebAssembly, and learn when it better to choose each of them.",https://www.linkedin.com/in/kudmitry/,@skwee357,,,,rust_dmitry_kudryavtsev.png,,"supercharge,nodejs",
No,main,Jayanta Kshirsagar,Application Developer,Thoughtworks,Sapana Kale,Software Developer,Thoughtworks,EpiRust - Building ultra large-scale epidemic simulator using Rust,"EpiRust is an open-source, large-scale, distributed agent-based epidemic simulation framework. It follows a minimalist approach for modeling an epidemic in a virtual society. An agent in the simulation is an individual person with certain characteristics and behaviours attached to it. These agents interact with the environment and among themselves giving rise to various different emergent phenomena. In this talk, we would be sharing our journey about, how we started from serial implementation representing one city with 5 million agents to distributed setup which can simulate more than 100+ million agents depicting multiple cities and even larger geographical areas. More about EpiRust can be found [here](https://github.com/thoughtworks/epirust).",https://www.linkedin.com/in/jayantakshirsagar/,,https://www.linkedin.com/in/sapana-kale/,,,rust_jayanta_kshirsagar_sapana_kale.png,,"epirust,ultra,large-scale,epidemic,simulator",
No,main,Xe Iaso,Archmage of Infrastructure,Tailscale,,,,My Blog is Hilariously Overengineered to the Point People Think it's a Static Site,"Blog engines are a fantastic opportunity for self-expression and overengineering things. This is the story of my blog engine through the years as I have made it faster and faster. I currently serve pages so fast that timing how long it took ended up taking longer than serving the pages in the first place.  In this talk, I will go over how and why my blog engine in Rust is so fast and what you can learn from it to make your web applications even faster.",,@theprincessxena,,,,rust_xe_iaso.png,,"blog,hilariously,overengineered",