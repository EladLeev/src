Featured,Track,Name1,JobTitle1,Company1,Name2,JobTitle2,Company2,Title,Abstract,LinkedIn1,Twitter1,LinkedIn2,Twitter2,Slides,Picture,YouTube,Keywords,Teaser
Yes,,Jesus Espino,Full Stack Engineer,Mattermost,,,,"Struct Embedding, Instrumentation and Code Generation","#### Reviewing how struct embedding and other techniques can be used to improve code design, performance, and usability in your Go applications.",https://www.linkedin.com/in/jesus-espino/,@jespinog,,,Conf42 Golang 2021 Slides - Jesus Espino.pdf,golang_jesus.png,https://youtu.be/Y-URSLmIPIg,"struct embedding,instrumentation,code generation",
No,getting started,Miriah Peterson,Data Engineer,Weave,,,,Go from Zero to Hero: Learning Go when you don't know how to code,"Go as a language is infamously not friendly to new developers. This is funny to me because I consider it my ""first"" language. This talk explores how to use go to teach first time developers basic programing topics, how to set up a dev environment, how to write a program and basic coding practices.

# Intro
I believe the simplicity and cleanliness of the Go programming Language makes it suitable as a language for first time programmers. However, things like a GoPath, Dependencies, binaries, CLIs, IDEs, and Git make it hard for someone who has never coded before to just pick up go in their free time. This [tutorial](https://soypete.github.io/Golang_tutorial_zero_to_hero/) is written for people who have less that one year programming experience or even no experience whatsoever. It is to help them learn go and master their tools as well. I do not have experience in education theory, but from personal experience this course is curated in an order to help them learn go as well as all the scary stuff. In this talk we will go over the sections and tools used to help first time devs Master go.

# Open Source Learning
As experience devs we can learn most things online and for free. Blog posts, tutorials, demos, meetups, etc. these all contribute to our learning via `Open Source`. But what about first time devs? we require them to take university courses or bootcamps? They have to pay thousands of dollars just to start off using tools and tech that are not top of the line? 

The idea behind this tutorial it to replicate the opensource blog posts and tutorials, but to make it for beginners. And to make it truely opensource anyone can contribute to it, I am just waiting for someone to make a pr and finish it for me *cough cough* (that is only half a joke). Hopefully it becomes something that can get people off the ground and ready to tackle projects either on their own or in a workplace setting. 

# Tutorial outline

## [Part-1 Intro to Programming]

These are the basics we learn in our first programming class. Devs learn them in boot camps. We have to explain the why to first time devs. How they are tools on your tool belt that will allow you to start solving harder problems. 

### [1.1 Hello World]

### [1.2 Types]

### [1.3 Functions]

### [1.4 Conditionals]

### [1.5 Loops]

## [Part-2 Using the Command Line]

The hardest this for me what figuring out what a Dev env was. Here we walk through it step my step. by the end we should be ready to build a go program.

### [2.1 Bash]

### [2.2 Git]

### [2.3 Install Go]

### [2.4 Pick Your IDE]

## [Part-3 Write a Go server]

We deal with servers and apis everyday. Is it part of Web dev. Seems like a good place to start.

### [3.1 What is an API?]

### [3.2 Chat server Example project]


## [Part-4 Dependencies]

This may be common place for Java devs, but for new developers it using other libraries and tools ins a new concept

### [4.1 Using Go Modules]

### [4.2 Using Opensource Libriares]


## [Part-5 Checking your Code]

Now we need to prepare them for industry best practices. 

### [5.1 Linters]

### [5.2 Unit Tests]

### [5.3 Test Coverage]


### [5.4 Web Crawler Example]


## [Part-6 Deploying a Service]

I haven't worked anywhere that doesn't use docker so this seems like an invaluable skill

### [6.1 Docker]

# Tools 
- https://goplay.space/
- vscode
I am sure I will have more once the tutorial is more fleshed out.

# Additional Resources
Other places to go learn pulled from the doc


",https://www.linkedin.com/in/miriah-peterson-35649b5b/,@captainnobody1,,,,golang_miriah.png,https://youtu.be/4cRqm8sSUjs,"from zero to hero,learning go",
No,getting started,Huseyin Babal,Software Development Team Lead,Hazelcast,,,,Ultimate Guide to Golang Development for Beginners,"A talk about easy start with Golang development with production grade examples and tools

In this talk I will try to show how to start Golang Development with production grade best practices. You will learn the answers of ""How to do environmental/project setup?"", ""How to test your projects"", ""What kind of tools you need to use to ship your application?"", etc.... 

On each section, there will be a mapping from other languages to have better insight.",https://www.linkedin.com/in/huseyinbabal/,@huseyinbabal,,,Conf42 Golang 2021 Slides - Huseyin Babal.pdf,golang_huseyin.png,https://youtu.be/I2tVnH_JuHI,development for beginners,
No,getting started,Jayaganesh Kalyanasundaram,SRE,Google,,,,Concurrency for beginners," As a beginner myself (not so long ago) trying to learn this language, it always seemed like C++/Python like language. Golang is much more than just functions and execution, its probably the easiest to write code which exploits concurrency at its best and in an intuitive and readable manner. 

This talk, I'll discuss ""channels"" and ""go-routines"" with an example of MergeSort to demonstrate the power of this language for beginners.",https://www.linkedin.com/in/jayaganesh-kalyanasundaram-7a5b7720/,,,,Conf42 Golang 2021 Slides - Jayaganesh Kalyanasundaram.pdf,golang_jayaganesh.png,https://youtu.be/SBifB5-9naA,concurrency for beginners,
No,getting started,Sylvain Combraque,Software Developer,Les-Tilleuls.coop,,,,Go learning by project: Souin (rex),"I'm Træfik user since v1.4 but there was no caching system. I scrolled over the internet to know if any solution exists but nothing appear then I decided to write my own Træfik cache system. This talk it will be a feedback on Golang learning, issues, tips and tricks to start on this awesome language

I discovered Go language but didn't have any time to follow multiples tutorials to learn it. But one day I discovered Træfik reverse-proxy project when I wanted to switch my infrastructure into fully dockerized one. I'm Træfik user since v1.4 but after many months using it I encountered an issue : there were no caching system in this reverse-proxy. I scrolled over the internet to know if any solution exists but nothing appears.

Then I decided to write my own Træfik cache system, but the main question was ""Which language?""  
 - PHP ? Nah.  
 - Nodejs ? What a joke !  
 - C++ ? I didn't learn this language at school and it's really insane to learn.

Then I was on Træfik github repository when I decided to write it in Go. Another good point: that's compatible with docker integration.

So I started the project and called it [Souin](https://github.com/darkweak/Souin)  
This talk will be a feedback on Go learning, issues, tips and tricks to start on this awesome language.",https://www.linkedin.com/in/sylvain-combraque/,@darkweak_dev,,,,golang_sylvain.png,https://youtu.be/r3VUCq0gwkM,"Souin,feedback",
No,getting started,Matan Cohen,Software Development Team Lead,Wix,,,,Go development on local k8s with Skaffold,"How difficult is it to develop on your local machine?? How long is taking you to mock the production process? 
No more! With skaffold and other great new tools, it became very easy. 
Join me to learn about new golang development experience on local k8s cluster!

Talk agenda:
- local development with go (+demo)
- Skaffold (+demo)
- real use case - Golang + skaffold + helm + Bazel",https://www.linkedin.com/in/matan-cohen-b8253311a/,@co_matan,,,Conf42 Golang 2021 Slides - Matan Cohen.pdf,golang_matan.png,https://youtu.be/PAiK53ucusk,skaffold helm kubernetes local development,
No,getting started,Oliver Fuerst,Lead Developer,Restorepoint,,,,DevOps automation with Go,"In his talk, Oliver will show the many ways his team is using Go to automate every aspect of their development workflow from race condition reporting, deploying releases, bridging Freshdesk and Gitlab, versioning internal libraries and many more.",https://www.linkedin.com/in/oliverfuerst/,,,,Conf42 Golang 2021 Slides - Oliver Fuerst.pdf,golang_oliver.png,https://youtu.be/KaIbgrYIPQk,"devops,automation",
No,security,Mathilde Raynal,Lead Developer,Kudelski Security,,,,Quantum-Resistant Native Go Programs: Taking the (Quantum) Leap,"The arrival of Quantum computers threatens the security of cryptography  as we know it. To take a step ahead, NIST launched a competition in 2016  to find the best quantum-resistant algorithms. Out of the 105 initial  candidate schemes, only 15 were selected as finalists in 2020. The  research community has done extensive work on assessing their security  and weaknesses, and we are now at a point where we can start using them  in practice. Unlike the competition that designated AES as the standard  for symmetric encryption, it is expected for multiple schemes to be  standardized at the end of this one. Indeed, the wide range of approaches  taken by the finalists all come with different advantages and  disadvantages that might not be suited for all use-cases.

This presentation motivates the need for post-quantum cryptography,  offers an introduction to the various techniques used to build quantum resistant protocols and gives an insight on what to expect in the coming  years. 

Among the remaining candidates, we selected Kyber and Dilithium - two  schemes offering respectively a Key Encapsulation Mechanism and a  Signature algorithm- and ported the reference implementations to Go. We  deviate from a straightforward code translation in order to preserve the  security of the implementation, especially against Side-Channel attacks,  and to benefit from Go’s special features to obtain a fast and reliable  library. We are open-sourcing the library we developed, and it will be  available on Github at the time of the talk. We will go through its API and  the way one might use it in their own codebase to obtain quantum  resistant protocols. 
",https://www.linkedin.com/in/mathilde-raynal/,,,,Conf42 Golang 2021 Slides - Mathilde Raynal.pdf,golang_mathilde.png,https://youtu.be/UvnBJr4-xX4,"quantum-resistant,native go programs",
No,security,Mohammad Shahbaz Alam,Developer Advocate,Magic,,,,Secure your Go APIs with Decentralised Identity Tokens,"After so many breaches and passwords leaks, developers must reunite and reinvigorate APIs to protect their Applications, making the internet a secure global public resource, open and accessible to all. In this talk, I will cover how to secure your Go APIs using Decentralised Identity Tokens.

The APIs keeps changing, and the programming languages like Go are shifting the paradigm of API consumption. We often dedicate a lot of time to craft powerful APIs but overlook proper security measures. Setting up an authentication layer is, without a doubt, one of the most challenging yet necessary tasks within any web application.

In this talk, we’ll look at proper ways to secure our Go APIs with Decentralised Identity Tokens. We’ll go from learning what Decentralised Identity standards are, how the users’ identities are self-sovereign by leveraging blockchain public-private key pairs, why they’re the future of API security, and to put theory into practice we will build a real-world implementation using Go where I’ll show common best practices.",https://www.linkedin.com/in/mdsbzalam/,@mdsbzalam,,,Conf42 Golang 2021 Slides - Mohammad Shahbaz Alam.pdf,golang_mohammad.png,https://youtu.be/6JtctR2C0Ww,"API,authorization",
No,security,Gordon Rudd,CEO,Stone Creek Coaching,,,,Every CISO’s First 90 Days on the Job,"This session will give you the tools and techniques to be a world class CISO. We’ll Explore the programs, processes, procedures, and technical skills needed to be a survive in your role as CISO.  We will also explore the tools to help you do your job better, cheaper, and faster than the competition.

 - Learn to use the MAP (measure, asses, plan) process to:
 - Assess your organization
 - Assess an information security department, the people in it, and the organization it serves. 
 - Plan the work and work the plan
 - Demonstrate why your programs, processes, and projects will keep the organization as secure as possible in the world we live in today.",https://linkedin.com/in/gordonrudd,@glrudd,,,,golang_gordon.png,https://youtu.be/jQOxsvdyx04,"30-60-90dayplan,careerdevelopment,ciso career mapping,ciocareermapping,cybersecreuityoperations,itoperations",
No,frameworks,Marco Nicola,Software Developer,EXOP,,,,Deserializing Python objects in Go with GoPickle,"The Python Standard Library provides the ""pickle"" module for serializing and de-serializing object structures. Almost every Pythonista makes use of it, since it can easily and efficiently serialize even very complex objects... but what if you are a Gohper and want to read those objects back into Go?

In this talk I will illustrate the main peculiarities of pickle serialization and how data can be deserialized in Go with GoPickle, a lightweight and customizable library (https://github.com/nlpodyssey/gopickle). 

I'll also show you some examples of pickle serialization in the wild, and a practical usage of GoPickle with spaGO machine learning library.",https://www.linkedin.com/in/nicola-marco,@marconicoladev,,,Conf42 Golang 2021 Slides - Marco Nicola.pdf,golang_marco.png,https://youtu.be/dm8cyB2k32g,deserializing python objects with GoPickle,
No,frameworks,Preslav Rachev,Founder,PSV,,,,Between Order and Chaos: Creating Immersive Generative Art With Go,"Generative art is a unique form of artistic expression, building bridges between computer programming, randomness, and visual aesthetics. It has kept my imagination for over a decade. While I have never been particularly skilled at drawing, I have always been amazed by what one could achieve with a couple of lines of code. At the beginning of this year, I wrote and and self-published a book about the use of Go as a language for graphics and generative art programming.

Unlike popular choices such as Processing, NodeBox, openFrameworks, etc., I picked Go for two simple reasons:

Go’s syntax is easy enough that virtually anyone can learn it quickly. The language is far more versatile than what most programmers use it for.

I am hoping that my talk will give the audience a new perspective about their favorite language, and the chance to discover an artistic side they did not know thy possessed.",https://www.linkedin.com/in/preslavrachev/,@preslavrachev,,,,golang_preslav.png,https://youtu.be/Z9mRyM6eihI,"order and chaos,create immersive generative art",
No,frameworks,Moritz Eckert,Chief Architect,Edgeless Systems,,,,Confidential computing with Go,"#### Confidential computing (CC) is a new and much-discussed security paradigm. It enables the always encrypted and verifiable processing of data on potentially untrusted computers, e.g., your cloud provider’s systems or maybe even your local cluster. CC enables many exciting new applications like super-secure bitcoin wallets or end-to-end encrypted and verifiable AI pipelines. 
In this talk, we’ll give a brief intro to CC and the corresponding hardware technologies. We'll talk about how the technology is particularly relevant for the cloud-native space and why Go and CC make for a great fit. We'll sketch the status quo of Go tooling for CC and given an intro to our open-source EGo framework. Finally, we give some hands-on examples of Go CC apps and discuss use cases.  
We argue that EGo is the simplest way to leverage CC - in particular for Go programmers :-) We'd love to get feedback from the Go community for our approach.
---

### Structure of the talk (30min)

* Intro (3min) 
* What is Confidential Computing? (5min) 
* Why Go and Confidential Computing are a perfect match (3min) 
* The architecture of EGo (5min) 
* How to build your first confidential microservice (7min) 
* Use cases (5 min) 
* Conclusion (2min) 

### About Confidential Computing 

Confidential computing is an emerging security paradigm. With it, data and code are protected inside secure enclaves at runtime. Enclaves protect against potentially compromised OSes, hypervisors, or even malicious cloud admins with hardware access. 
 
Enclaves are created and enforced by the CPU. An enclave’s contents remain always encrypted in memory at runtime. Yes, correct, data and code remain always encrypted! This is one of the key features that make confidential computing so exciting for many, e.g., for Forbes. 
 
Besides, enclaves have access to unique cryptographic keys, which can be used to store secrets on untrusted storage (“sealing”). it is possible to verify the integrity of an enclave and set up secure channels to it (“remote attestation”). 
In one sentence: secure enclaves enable the always encrypted and verifiable execution of workloads in the cloud and elsewhere. 
 
The most prominent enclave implementation to date is Intel SGX. SGX is available on many recent Intel-based systems. Several cloud vendors already have corresponding offerings. 
 
Apart from unprecedented security, confidential computing enables new types of data-driven applications. The verification aspect is key here: users can verify precisely how data is processed, who provides the inputs, and who gets access to the results. For instance, this enables zero-trust data sharing, super-secure crypto wallets, and many other exciting things. 
 
However, previously, developing confidential apps used to require arcane knowledge, significant code changes, and cumbersome build steps. With EGo, this changes! 
 
### About EGo 

EGo is used via a simple CLI. In a nutshell, EGo consists of a modified Go compiler, an in-enclave Go runtime and a Go library that makes CC-specific functionality available to in-enclave code and external consumers. Most notably, the library facilitates the process of remote attestation.  
 
With EGo, you can build and debug your Go code as you are used to. Apps built with EGo run on all systems that normal Go apps run on — even if those systems are not SGX-enabled. Thus, EGo can be nicely integrated with existing development and build processes. The following commands build and run a helloworld app: 
 
```go 
ego-go build myapp.go 
ego sign myapp 
ego run myapp 
``` 
 
If you tell `ego sign` that you want a debuggable enclave, you can debug your app inside the enclave using `ego-dbg` and GDB-compatible IDEs like Visual Studio Code.  
 
In contrast to enclave SDKs for programming languages like C++ (e.g., Open Enclave) or Rust, EGo does not require programmers to split your app between enclave and non-enclave code. It simply keeps all of your data and code inside the enclave. We believe that this is the most intuitive and practical approach. 
 
Most Go apps run out of the box on EGo. This includes the popular key management app HashiCorp Vault, which is a good example of an app that benefits greatly from CC.",https://www.linkedin.com/in/moritz-eckert-15a7b91a0/,@m1ghtymo,,,Conf42 Golang 2021 Slides - Moritz Eckert.pdf,golang_moritz.png,https://youtu.be/hCVLZ8-7_Yg,"confidential computing,Intel SGX,security,cloud native",
No,frameworks,Dmitry Vinnik,Developer Advocate,Facebook,,,,Ent: Making Data Easy in Go,"What do most applications do these days? They interact with data in one way or another. As your app's scale increases, it becomes more challenging to manage databases, schemas, queries, and constraints. These challenges are why a technique called Object-Relational Mapping, or ORM, was created. 
At Facebook, we tend to think about data modeling in graph concepts and as we were working with Go, it led us to create a new open source project, Ent.

Ent is an entity framework built for Go programming language. This framework provides developers with a Graph-based, Object Relational Mapping. 
In this talk, we will learn how to use Ent when dealing with data schemas, including types, relations and constraints. It’s a hands-on talk, so get ready to follow along!
",https://www.linkedin.com/in/dmitry-vinnik/,@DmitryVinnik,,,Conf42 Golang 2021 Slides - Dmitry Vinnik.pdf,golang_dmitry.png,https://youtu.be/dOE_UEwzgMw,"ent,making data easy",
No,deep dive,Lorna Mitchell,Developer Advocate,Aiven.io,,,,Go Big with Apache Kafka,"When your data needs outgrow the traditional setup, spend some time getting to know Apache Kafka, an open-source, distributed event streaming platform. With high performance and epic scalability, Apache Kafka can get the data flowing between your applications, components, and other systems with the minimum of fuss. 

This session will show you around the basics of Kafka, explain the problems it is best suited to solve, and  introduce some of the tools that make dealing with it so delightful. 

We'll also show how you can use Kafka from your Go applications, and showcase the integrations such as Kafka Connect that can really take your systems to the next level. This session is recommended for engineers, data specialists and tech leaders alike.",https://www.linkedin.com/in/lornajane/,@lornajane,,,Conf42 Golang 2021 Slides - Lorna Mitchell.pdf,golang_lorna.png,https://youtu.be/hl98ShsDQ4k,"go big,apache kafka,open source",
No,deep dive,Ishuah Kariuki,Principal Backend Engineer,Hover Developer Services,,,,Terminal Emulator Basics in Golang,"Dive into the inner workings of the Unix TTY subsystem and understand how terminal emulators work.

Have you ever wondered what happens when you type something on your terminal? Why signal interrupts such as Ctrl-Z exist? Why are they called terminals in the first place?

This talk aims to improve your understanding of what happens in the background when you use terminal emulators. We'll cover the basics of the TTY subsystem and build a simple terminal emulator in Go. 

Talk outline:
 1. Introduction: A brief background of the current state of the TTY subsystem.
 2. Why PTY?: This section explains how Linux PTY works.
 3. 10-minute Codelab: Build and run a simple terminal emulator in Golang.
 4. Conclusion/Q&A",https://www.linkedin.com/in/ishuah/,@ishuah_,,,Conf42 Golang 2021 Slides - Ishuah Kariuki.pdf,golang_ishuah.png,https://youtu.be/A90IyuRkrPs,"tty,linux,terminal emulator basics",
No,deep dive,Luis Cardoza Bird,Founder,DEVotion,,,,Building Blockchains on the Go,"We will learn about how to create your own blockchain distribution with GO, learn about the differences between a Database and a Decentralized Database, also explain when, why and how to implement a blockchain using a Microservices architecture with GRPC, and have fun creating or own genesis cube and streaming services.",https://www.linkedin.com/in/luis-cardoza-bird-82a1aa95/,@Crdzbird_,,,Conf42 Golang 2021 Slides - Luis Cardoza Bird.pdf,golang_luis.png,https://youtu.be/HARyWxc6TZg,"building,blockchains",
No,deep dive,Ilya Kaznacheev,Technical Lead,MTS Cloud,,,,DDD and FSM: tackling complexity with state machines,"The talk will describe how you can simplify the implementation of complex domain models, using FSM as a basis for building logic and interactions between elements. At the same time, the topic contains a minimum of theory and a maximum of practical advice and examples from the author's experience. 

The participant will learn:
- how FSM is applied to a domain model;
- how to manage the state of complex data models with many independently changing entities;
- how to implement interaction of different domains depending on their states;
- how to make error handling in complex processes fault-tolerant;
- how to use this technique in distributed systems with synchronous, asynchronous, and event-driven communication.",https://www.linkedin.com/in/ilyakaznacheev/,@ilya_kaznacheev,,,,golang_ilya.png,https://youtu.be/KJV6vspieSM,"ddd,fsm,state machine",
No,deep dive,Francisco Daines,Senior Software Developer,Walmart,,,,Using Arch-Go to continuously test the quality of our architecture,"In every product, we start by defining architectural guidelines and code conventions, but the hard part is to check if the code adheres to these definitions over the time. Arch-Go is a testing tool that can be included as part of the CI pipeline to continuously verify our architectural guidelines.

Most authors defines software architecture as a set of important decisions which are hard to change. If we are working in a software artifact, then these decisions are represented as architectural guideline, because of that it’s very common to talk about some unwritten rules like “Don’t call repository components from components in the presentation packages”, or “prefer the use of structs over too many parameters or return values in functions/methods”. We can check this kind of rules as part of a code review process, but as this is manual, is errors-prone, then is possible to pass this quality-gate and push code into our master branch that breaks our guidelines, so we need a way to automatically check if our code adheres to these rules.

This talk is about Arch-Go, a testing tool which provides a simple way to document the architectural guidelines and checks if our Go code complies with those rules as part of a continuous integration pipeline. We will review why we need to check architecture quality and how Arch-Go can help us to automate it.",https://www.linkedin.com/in/fdaines/,@fdaines,,,Conf42 Golang 2021 Slides - Francisco Daines.pdf,golang_francisco.png,https://youtu.be/LAWdzqBtxL8,"arch-go,architecture,tooling,test,guidelines,automation",
No,deep dive,Mahendra Bagul,Software Engineer,InfraCloud Technologies,,,,"Play with KinD, nGinx Ingress Controller and Secured gRPC server","Would you like to know how I verified mTLS gRPC Client-Server setup on KinD based Kubernetes clusters?

I want to share that experience in this session. The gRPC server is configured with server-side certificates and running behind nginx based ingress on KinD Kubernetes cluster.

The gRPC Client with client certificates can talk to this gRPC server, thus creating mTLS communication.
I will cover all configurations and code changes in the talk. Excited?

Setting up mTLS for Client-Server powered with gRPC (Golang and NodeJs)

Golang gRPC Server (Runs with server-certificates)

NodeJs gRPC Client (possesses its own client-certificates)",https://www.linkedin.com/in/bagulmahendra,@bagulm123,,,Conf42 Golang 2021 Slides - Mahendra Bagul.pdf,golang_mahendra.png,https://youtu.be/1Jbmtdjxhjs,"KinD,nGinx Ingress Controller,Secured gRPC server",
No,deep dive,Sean Dubois,Developer,Apple,,,,WebRTC: The secret power you didn't know Go has,"Robots, Virtual Reality, Multiplayer NES Games and Censorship Circumvention. These are just some of the things being built with Go and WebRTC. This talk will teach you about the technology that is powering the cutting edge and why Go is the language to do it.


If you know WebRTC you know Pion WebRTC. With 7k stars on Github and the 23rd most popular channel on Slack it is growing fast. The company formant.io recently announced a demo that allowed you to control a spot robot right from your browser using it. Piepackr allows you to play multiplayer NES games with friends. Tor is using it to bring uncensored internet to those that can’t even download binaries.

In this talk you won’t learn just how to build things with WebRTC, but get a whirlwind tour of concepts that you can apply to other projects. Learn high level topics like NAT Mapping, Congestion Control and Error Correction. These are things that we take for granted, but don’t have the luxury in high performance networking. Learning these topics will make you stronger going back to other problems.

Then see a quick demo of the Pion WebRTC API. How can you express these RTC topics using a simple Go API? Last we will finish with the most popular projects build with WebRTC in Go. This will inspire you to go build your project that will change the world.",https://www.linkedin.com/in/sean-dubois/,,,,,golang_sean.png,https://youtu.be/4kdU9_a-gII,"WebRTC,secret power",
No,deep dive,Vincent Lesierse,Solutions Architect,AWS,,,,Building applications in the Cloud using Go and the AWS CDK,"CDK stands for Cloud Development Kit and it allows developers to define their infrastructure using the code they know and love. 

The AWS CDK is now available in preview for Go developers.  In this talk we will explore what the AWS CDK is and how it can help you define your Cloud infrastructure. 

We will show practical examples of how this CDK can help you build your Go applications in AWS.",https://www.linkedin.com/in/vlesierse/,@vlesierse,,,Conf42 Golang 2021 Slides - Vincent Lesierse.pdf,golang_vincent.png,https://youtu.be/Y8EbPFNdwxU,"building applications,cloud,AWS CDK",
No,lessons learned,Dana Scheider,Senior Software Engineer,Envato,,,,Choose Your Own (QA) Adventure,"Every organisation needs quality processes in place to ensure the software it produces is maintainable and satisfies customer needs. But what to do when your organisation doesn't have, or can't have, a dedicated QA team? You're in luck. This talk covers everything you'll need to know to not only adopt quality processes within your development teams, but to create an organisational culture conducive to releasing reliable, maintainable, and consistently high quality software.",https://www.linkedin.com/in/danascheider/,@DanaScheider,,,,golang_dana.png,,"testing,qa,quality,process",
No,lessons learned,Mofizur Rahman,Developer Advocate,IBM,,,,How we accidentally created a Cloud on our Cloud,"In an effort to automate tasks for our users we ended up creating a cloud (kind of). In this talk we will describe our journey towards automation, and how we accidentally created a Cloud on our Cloud and why we chose go to do it all.

Part of the job of a Developer Advocate is the ability to demo or show off portions of your technology stack to possible users. At IBM we run many workshops and tech demos every week for our clients and conferences. We need to create, monitor, maintain and clean these assets. In this talk we will describe our automation journey from bash scripts run and maintained by individual developers to automating the creations and deletion on automatic schedule with a UI. We will discuss situation, our iterations on what we tried and the painful portions of them, and how we accidentally created a Cloud interface on top of the IBM Cloud, or easier said, we created a Cloud on our Cloud. 

Ideally, we’ll show our journey and the lessons we learned along the way, and as an audience member, you’ll come away with nuggets of useful tooling to make your cloud usage more streamlined, and hopefully, you’ll see the pitfalls we fell in and you can avoid them yourself. We’ll show off some bad code, some good code, and some robust code; all open source and in Go and available to allow you to leverage it too.",https://www.linkedin.com/in/moficodes/,@moficodes,,,Conf42 Golang 2021 Slides - Mofizur Rahman.pdf,golang_mofizur.png,https://youtu.be/vlggcXV2lcc,"cloud,cloud native",
No,lessons learned,Piyush Verma,CTO,last9.io,,,,Concurrency primitives of Golang - how to use and how not to,"Every marginally, sophisticated Golang code that I write needs refactoring to solve race and deadlocks. The concurrency primitives like atomic, sync, channels, and waitGroups have their uses and fail. The lack of understanding ends up with a lot of rewrites. This talk aims to solve that.

I have seen more Go code shipped as glue programs and binaries than actual web servers, usually intended to do the heavy-lifting of data transfers shortly and reliably. With such clinical needs comes a need to handle concurrency and parallelism. And each time more than one worker is doing a job, there will be contention and starvation.
A lack of useful design principle guides ends up in Engineers writing non-performant, race-condition prone codes or ending up refactoring. 

To provide an example, some of the things I wish I had known:
- the *real* difference of when to use a Channel, a waitGroup, an atomic, or a mutex
- one shouldn't be using a wg.Add() inside a goroutine. 
- How does one solve the problem of multiple listeners waiting on an event?
- How atomic Int operations can synchronize multiple workers signaling completion of work.

The talk is not limited to the above scenarios. It intends to cover a few of these constructs to reduce the refactoring that Golang engineers have to go through while also building a better understanding of distributed systems' design patterns.",https://www.linkedin.com/in/meson10/,@realmeson10,,,,golang_piyush.png,https://youtu.be/BeFLnQF78ik,concurrency primitives,