Featured,Track,Name1,JobTitle1,Company1,Name2,JobTitle2,Company2,Title,Abstract,LinkedIn1,Twitter1,LinkedIn2,Twitter2,Slides,Picture,YouTube,Keywords,Duration
Yes,,Adelina Simion,Tech Evangelist,Form3,Andy Kuszyk,Head of International Engineering,Form3,Load testing with F1,"Due to a lack of functionality in existing solutions, we wrote our own open source load testing tool at Form3 to test our asynchronous system in. This talk focuses and on the importance of load testing and showcases our solution, named F1. It allows us to write our tests in Go - leveraging the powerful mechanisms of goroutines and channels in our tests!
The key points of discussion in our talk are:
- Load testing fundamentals: What is load testing and why should we care about it? What existing tools are there out there already and what are their limitations?
- Introduction F1: What is F1 and how is it different from existing solutions?
- Live demo: let’s see F1 in action on a Go demo app!
- Join us to learn how we load test our services in Go using our open source tool, F1, and let’s make testing cool again!",https://www.linkedin.com/in/adelina-simion,@classic_addetz,https://www.linkedin.com/in/andy-kuszyk,,,golang_adelina_andy.png,,load testing f1,30
No,getting started,Kazuki Higashiguchi,Software Engineer,Autify,,,,HTTP Server on random available port in Go,"Imagine you want to start an HTTP server without specifying the port. For example, a temporary server for testing. How do you do that?

The answer is straightforward. Specify the port number to 0 like:

```
l, err := net.Listen(""""tcp"""", """":0"""")
```

It's an easy rule provided by the net package, but do you understand how Go binds a random port allocation.
I'll give you a clear understanding of what Go does inside the net package.

The presentation contains the following topics.

- net, net/http packages
- File descriptor
- TCP, UDP
- System calls

I think this presentation will give audiences not only a knowledge of Go, but also one of system calls.",https://www.linkedin.com/in/kazuki-higashiguchi-156a66217,@hgsgtk,,,,golang_kazuki.png,,http server on random available port,30
No,getting started,Tamimi,"Developer Advocate, Office of the CTO",Solace,,,,Gopher in an Event-Driven playground,"Picture this: Gopher enters a multilingual playground and wants to communicate with other applications and ""things"" but is perplexed with the plethora of messaging protocols and APIs! Attend this talk to see how one can adopt a protocol and language agnostic event-driven architecture using GoLang.

In this talk, I will be covering a high level overview of what an Event-Driven Architecture (EDA) is and its relevance to real-world use-cases. Then I will be delving into how asynchronous ""operational use-cases"" behaviours are handled in GoLang such as a stream of events that requires real-time processing, for examples: stock price ticker, traffic data, aviation data, inventory management...etc. Through this, I will highlight the benefits and drawbacks to using Go for such use-cases and how a native go messaging API could resolve the common issues. 

Attendees will leave this session with an understanding of: 
- Asynchronous Event APIs vs Synchronous REST APIs
- The challenges with using EDA when it comes to different messaging protocols and open standard messaging APIs
- Using messaging APIs in GoLang to integrate Go microservices in EDA

If you are in a space that requires real-time processing of data and want to use Go as the choice of programming language to develop your application, then this talk is definitely for you!",https://www.linkedin.com/in/atamimi1,@TweetTamimi,,,,golang_tamimi.png,,event-driven playground,
No,getting started,Liam Hampton,Cloud Advocate,Microsoft,,,,Go to the Edge,"####Are you interested in IoT devices but you're unsure how or where to start when coding them? 

With IoT devices now forming a fundamental part of this world and fuelling the move forward in the technology evolution I will break down how I have become an IoT hobbyist using the language I am most fond of, Go. However, this is not the regular form of Go we are all used to, but rather an abstracted version called TinyGo. By using this, we can break down barriers and begin to unlock the potential of embedded systems and web assembly, join me and i'll show you how!",https://www.linkedin.com/in/liam-conroy-hampton,@liamchampton,,,,golang_liam.png,,to the edge,30
No,getting started,Joe Karlsson,Senior Developer Advocate,SingleStore,,,,A Gentle Introduction to Building Data-Intensive Applications in Go,"Let's face it, learning how to build scalable applications can be hard. Join me as we learn the fundamentals of data-intensive architectures as we build a data-intensive application from start to finish using SingleStore and Redpanda in Golang. In this talk, we will:

* discuss best practices of scaling up your data workloads on your applications. 
* consume a streaming dataset from Redpanda using SingleStore Pipelines, process some of the data using Stored Procedures, and query the data from a Grafana dashboard.

You will leave this talk a clear understanding of what makes an application “data-intensive” and see that by leveraging modern data infrastructure, you can scale seamlessly as user numbers grow.",https://www.linkedin.com/in/joekarlsson,@joekarlsson1,,,,golang_joe.png,,data-intensive applications,
No,getting started,Francisco Daines,Senior Software Developer,Walmart,,,,Testing in Go: 101,"Nowadays ensuring the quality of our artifacts is a must to support the continuous deployment process. This talk is about testing in Go, describing best practices and different approaches through practical examples.

Today is very common to heard about Test Driven Development (TDD), unit testing, integration testing and so on, but these practices still implies an effort to development teams.

The focus of this talk is to present some way to testing our apps in Go, describing best practices and different approaches so the audience can start testing their apps in a proper way. 

This talk includes topics like: Why testing is important, where we should create our tests, how to mock dependencies, how to stub behaviors, use of standard testing libraries and checking for code coverage.
The final part works as an introduction for Behavior Driven Development, checking for some modules that help us to implement acceptance tests in an idiomatic way (for example, ginkgo+gomega).",https://www.linkedin.com/in/fdaines,@fdaines,,,,golang_francisco.png,,testing 101,
No,deep dive,Akilan Selvacoumar,Core Developer ,Peernet,,,,Peernet - an open p2p network standard/implementation,"#### The Peernet protocol aims on creating a standard and implementation based on effective techniques for running a p2p network that just works out of the box.

We are also building a browser based on our protocol for anyone to share content they believe to the public in Peernet fashion(i.e p2p and taking advantage of the bandwidth available).  

#### Major features of Peernet
- Decentralized search.
- Using UDP hole-punching to ensure any node behind NAT can share files with each other. 
- Using a reliable version of UDP to ensure custom control of dispersing packets at an application layer. 
- The entire implementation is in pure Go, hence the possibility to execute across multiple operating systems and architectures.  
- Custom peer discovery mechanism. 

More information on the project:
- [Github](https://github.com/PeernetOfficial)
- [Whitepaper](https://peernet.org/dl/Peernet%20Whitepaper.pdf)
- [Website](https://peernet.org)",https://www.linkedin.com/in/akilan-selvacoumar,@RealAkilan,,,,golang_akilan.png,,peernet open p2p,
No,deep dive,Savas Ziplies,Managing Director & Founder,elipZis,,,,Go Serverless!,"With the advent of Serverless offers such as AWS Lambda or GCP Cloud Functions Golang has become usable and popular in small, functional cases. But the paradigm shift locked to certain providers does not provide a high incentive to transition.
Especially Golang has a wide range of high-performance web frameworks fuelling many application and micro-services. So why switch? Because now you can!

Bringing top-notch frameworks such as Fiber to AWS Serverless and leveraging multi-service deployments from one codebase without the need to bend to new structures and think in small single-file functions but use proven paradigms and development schemes makes the use of """"the best of both worlds"""" easy.

In this talk I will show you 
* how to leverage existing Golang frameworks and bring them to AWS Lambda, 
* structure your codebase to support multi-service deployments,
* configure staged deployments of multiple API and Event-driven services and
* add additionals such as Chromium to your deployment to use as Web-Scraper in your code

Scale endlessly? No problem! Need additional libraries? Dockerize it! 
Everything is possible, without caring about scaling on a Cloud level, while being able to develop locally the way we used to.",https://www.linkedin.com/in/savas-ziplies,@insanitydesign,,,,golang_savas.png,,serverless,
No,deep dive,Jesus Espino,Staff Engineer,Mattermost,,,,"Dissecting Slices, Maps and Channels in Go","Slices, Maps and Channels in go, are first class citizens of the language, they are used widely in our day to day work, but... do you know how they works under the hood? 

Do you know the implications of adding elements to an slice, or new keys to a map? Do you know why you can't relay in maps order? 

Do you know how channels handle the buffer or the blocked goroutines? 

If you don't know about that, this is your talk. I going to access the go runtime memory state of the maps, slices and channels, and show you how they evolve over time while we change them.",https://www.linkedin.com/in/jesus-espino,@jespinog,,,,golang_jesus.png,,dissecting slices maps channels,
No,lessons learned,Herve Ah-Leung,Senior Software Engineer,Smartnumbers,,,,Successful Go for microservices architecture,"Microservices architecture is a formidable pattern and Go is an incredible language. How do these two perform when combined? 

The microservices architecture consists of a breakdown of your software into multiple tiny services: flexible, independent, easy to scale up, domain-specific, more granularity, etc... But comes with some issues: complexity of communication between services, E2E tests difficult to write, daunting for new joiners, etc.
Having all the services written in Go does not solve all those problems but makes the software development more enjoyable and eases some of the pain points.

The goal of this talk is not to sell the microservices architecture neither Go, but is more about the story/timeline on how we transitioned an existing microservices piece of software into Go.

What will be shared:
- which features of Go allow us to build a successful microservices system?
- which blockers did we face?
- what are the next steps for us?",https://www.linkedin.com/in/herv%C3%A9-ah-leung-40401b90,@hervitoDelaVega,,,,golang_herve.png,,successful microservices architecture,30
No,lessons learned,Ranjan Mohan,Senior Software Engineer,Menlo Security,,,,Go - Best practices,"We would like to share the best development practices that has helped us reduce the amount of time/effort spent in maintaining the application.
Even Golang beginners can attend and a GitHub repository containing the sample code/notes used in this presentation for future reference will be provided.",https://www.linkedin.com/in/ranjanmj,,,,,golang_ranjan.png,,best practices,