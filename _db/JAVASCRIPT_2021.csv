Featured,Track,Name1,JobTitle1,Company1,Name2,JobTitle2,Company2,Title,Abstract,LinkedIn1,Twitter1,LinkedIn2,Twitter2,Slides,Picture,YouTube,Keywords,Duration
Yes,,Lauren Hayward Schaefer,Developer Advocate,MongoDB,,,,How to Raise Your Profile as a Developer (And Why You Should Bother!),"We as a developer community like to think the tech industry is a meritocracy: if you put your head down and do your work well, you will be recognized. Unfortunately, this is not typically the case.

In order to advance your career in tech, you will likely need to raise your profile internally at your company and/or externally in the broader developer community. During this session, Lauren will share personal stories of how she has worked to overcome the discomfort of raising her profile and the steps she has taken to do so. You'll leave this session with practical steps you can take in the coming weeks and months to raise your profile at your workplace and in the broader developer community.

The worksheet is available [here](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet)",https://www.linkedin.com/in/laurenjanece/,@Lauren_Schaefer,,,,js_lauren.png,,Raise Your Profile,
Yes,,Jay McCarthy,CTO,Reach Platform,,,,Breaking Into Blockchain Development with JavaScript,"Blockchain development is unreasonably complex, expensive, divided and exclusive. We are introducing a way for JavaScript developers to build decentralized apps on any blockchain using familiar syntax. It's faster, cheaper and more secure than how it's done today with Solidity and TEA. It's compatible with frontend languages like React, Vue & Go. Long are the days where you have to get investment, hire a PhD mathematician, hire rare blockchain developers, learn Solidity, request an audit and deploy a unique build for each environment. Best part? No need to learn a new language. 

We've built the Reach library with JavaScript syntax so it's a linear move. You can build DApps as a 1-(wo)man show. We've had developers rebuild the Balancer Exchange (thousands of line of code) with 100 lines of our code. ",https://www.linkedin.com/in/jay-mccarthy-34a6b95/,@reachlang,,,,js_jay.png,,Blockchain Development,
No,architecture,Mihaela-Roxana Ghidersa,Technical Lead,Strongbytes,,,,The (too) Many Faces Of Architecture,"Too often we encounter the idea that software architecture is an esoteric concept, of which only the chosen ones, and at the right time, are allowed to discuss. Well, how about a little change of perspective?

With software development and users' needs evolving so fast, we don’t afford the luxury of rewriting systems from scratch just because teams fail to understand what they are building. Today’s software developers are tomorrow's architects. We must challenge them to step away from the IDE and understand how the architecture evolves in order to create a common and stable ground in terms of quality, performance, reliability, and scalability. At the same time, software architects need to step away from the abstractions and stay updated to the project development reality.

This session revolves around finding the right ways of intertwining up-front architecture, API design & coding while maintaining a continuous focus on architecture evolution.",https://www.linkedin.com/in/ghidersam/,@mihaelag12,,,,js_mihaela-roxana.png,,"many faces,architecture",
No,architecture,Luca Mezzalira,Principal Solutions Architect,AWS,,,,Embracing Hexagonal Architecture with Serverless,"The hexagonal architecture, or ports and adapters architecture, is an architectural pattern used for creating loosely coupled application components that can be easily connected to their software environment. This makes components exchangeable at any level and facilitates test automation.

AWS Lambda provided the perfect environment to work with this architecture, moreover using hexagonal architecture, allows great flexibility to change computational layer in case of porting across cloud services",https://www.linkedin.com/in/lucamezzalira/,@lucamezzalira,,,,js_luca.png,,"hexagonal architecture,serverless",
No,security,Catherine De Mesa,Research Intern,Google,,,,Red is the New Blue: Does true security exist?,"In today's world, it is nearly impossible to go on websites and be completely private or to fully trust organizations with our data. Even with laws prohibiting data collection or cookie tracking - such as the privacy laws in Europe - it is still pretty difficult to circumvent this continuing issue. There /are/ some ways to protect ourselves digitally, but these methods are used far and few between and are being phased out as time goes on. In this talk, we will explore the methods on which data is collected and see if we can protect ourselves at ALL through various mediums.",https://www.linkedin.com/in/catiedee/,@CatieSai,,,,js_catherine.png,,true security,
No,security,Amir Shaked,Senior VP R&D,PerimeterX,,,," CSP is broken, let’s fix it","The CSP standard was supposed to improve the security of websites. But, like any standard, it needs to evolve to stay relevant, both in the assumptions on how sites are working and what is the reality in the implementation. In this talk, we will discuss those gaps. First, we will demonstrate how the standard can be abused and is abused when facing real-world uses. Second, we will cover multiple implementation gaps causing it to misbehave in browsers and expose information to attackers. Third, we will review and analyze bad implementations by website owners who place poor configuration, misunderstandings of the directives and outdated configurations. These three gaps between the standard and real-world uses will be the basis to discuss the improvements and considerations DevSecOps need to consider using CSP while discussing ideas on how to improve the standard.

The talk will cover the following points:
1.  A brief overview of the history behind CSP (3 minutes)
2.  The timeline of main changes, early versions to current (5 minutes)
3.  Where it went wrong - abusing the safelist concept to inject code and extract information (15 minutes)
4.  Examples of poor implementation by browsers - not covering all angles, CVEs and other gaps (10 minutes)
5.  Poor usage examples by webmasters (5 minutes)
6.  Thoughts on how CSP 3 (or 4) can remediate that to make a more secure internet (5 minutes)

Attendee takeaways include:

1.  CSP Isn’t a silver bullet
2.  Skimmers are a new breed of APT
3. Checklist for your own site
",https://www.linkedin.com/in/amirshaked/,@amirshaked,,,,js_amir.png,," CSP,broken",
No,deep dive,Daniel Danielecki,Software Engineer,Capgemini,,,,TypeScript's Strict Compiler Options,"Technologies: Angular, React, Svelte, Vue.js (comparison of TypeScript --strict in those), TypeScript, and CLI's mentioned frameworks.

Problem: Many of us don't really understand what's the strict mode all about and why there are several different options. In addition, TypeScript strict rules are off by default; only Angular CLI asks us if we'd like to enable those during a project generation. Sometimes we're even scared to enable those in less .ts- friendly environments.

Solution: We can enable them manually (only Angular CLI helps to do so automatically), but to understand why those are sometimes frustrating, a little explanation during the talk might be helpful based on pure TypeScript real examples

Audience takeaway: strict options are here to help us write better code, but without stricter linter options and/or understanding it, many issues have still doors open",https://www.linkedin.com/in/danieldanielecki/,@ddanielecki,,,,js_daniel_danielecki.png,,TypeScript's Strict Compiler,
No,deep dive,Francesco Leardini,Senior consultant & Angular Trainer,Trivadis,,,,Wait...can my browser do that?,"We have new powerful instruments to leverage current web apps and provide a richer experience to our users. With the aim of modern web APIs, it is possible to design completely new functionalities and explore unique technological combinations, changing the way we develop and interact with web apps. 

We can directly use hardware devices and just through our browser! Let's explore some of the most exciting APIs and see how we can combine them to unlock new scenarios and give superpowers to our web apps",https://www.linkedin.com/in/leardini81/,@paco_ITA,,,,js_francesco.png,,"browser,web APIs",
No,deep dive,Michael Haberman,CTO,Aspecto,,,,Distributed tracing for Node.js using OpenTelemetry,"Tracing and observability are becoming very popular as microservices are getting more and more complex. The idea behind it is the fact that microservices are distributed and in order to better understand our architecture and to be able to troubleshoot production issues faster, we need to track how requests are populated throughout the system. By monitoring the interactions between the different services we are able to overcome some of the native complexity of microservices.

In this talk, we will review the concept of tracing by examining the opensource project OpenTelemetry and specifically its node.js version. We will also cover how to utilize opensource solutions, along with commercial products, to get the most out of tracing data OpenTelemetry collects.
",https://www.linkedin.com/in/michael-haberman/,@hab_mic,,,,js_michael.png,,"distributed tracing,OpenTelemetry",
No,micro frontends,Tomasz Krajewski,Tech Lead,Frontend House,,,,Micro Frontends - foundations,"Let's talk about Micro Frontends. Why is the topic useful? It gives a different approach to how to deal with the modularisation in our apps, so it's worth knowing how to deal with it in different ways.

First I will speak about software architecture and present two approaches - the monolith and the distributed one. I will tell what it is all about and show their pros and cons. Then I’m going to speak about micro frontends (what exactly they are, popular micro frontend frameworks), and discuss why we might use them (issues: independent development teams, technology migration, reusable micro apps, unified design system across platform). I will also present some big brands that are using micro frontends. At the end I will summarize everything and I hope you will enjoy the whole show.",https://www.linkedin.com/in/tomasz-krajewski-87317910b/,@TommyK73223600,,,,js_tomasz.png,,"Micro Frontends,foundations",
No,micro frontends,Azizi Yazit,GUI Architect,Trovicor Intelligence,,,,Design System For Micro-Frontends,"I will start talking about design system and the benefits of it. And I will talk about micro-frontend and when it is make sense to be adapted. The simple design system can't support for Architecture like micro-frontend as the applications might be build by using different technologies and frameworks. 

The solution is to develop your design system using Provider-Consumer approach and uses the flexible component patterns like Headless UI and Compound Component.",https://www.linkedin.com/in/aziziyazit/,@aziziyazit,,,,js_azizi.png,,"System,Micro-Frontends",
No,micro frontends,Trishul Goel,Principal Engineer,Westwing,,,,Destructuring frontend monoliths with Microfrontends,"In the modern app architecture, the frontend contributes a major chunk of the setup, most of the business logic is housed in the Frontend. Over time the frontend app becomes a huge monolith, harder to maintain, tricker to add new features, etc. With Microfrontends we break this monolith into smaller independent apps. These apps are developed independently but stitched as a SPA on the fly with all the goodies of client-side javascript. This has been done traditionally with several approaches, but with webpack 5 we now have module federation, which opens the door for seamless Microfrontend integrations.

In this talk, we will discuss the complete Microfrontends architecture pattern, how to destructure an existing monolith into Microfrontends with help of module federation from webpack 5. By the end of this talk, the attendees will be having a new vision of how they architect their frontends.",https://www.linkedin.com/in/trishul/,@trishulgoel,,,,js_trishul.png,,"monolith,Micro-frontends",
No,performance,Assaf Krintza,Co-Founder,Livecycle,,,,React is Killing your Performance and it's Your Fault,"React is a great tool for writing dynamic single page applications in a declarative way. But, in order to enjoy the benefits of the declarative programming style of React, under the hood a tree comparison algorithm known as the Reconciliation Algorithm runs on each state or prop update.

While the algorithm is very performant and effective, it does have performance impact, and sometimes stepping out of the reconciliation loop is the better choice.

When writing code in React there is sometimes a tendency to try and solve every problem in the application using React's APIs, usually by searching for a specific library written with React. For example, you want to implement drag and drop? No problem - just DuckDuckGo """"React Drag and Drop Library"""" and pick one of the many libraries out there.

But sometimes, using React's state and prop updates is not the best choice to handle things. React's reconciliation algorithm triggering comes with a cost and in order to create fast and responsive web applications we should take that into account.

In this talk we will learn all about the reconciliation algorithm. What triggers it, and more importantly when and how to avoid it.",https://www.linkedin.com/in/assaf-krintza/,@krinssaf,,,,js_assaf.png,,"React,Performance",
No,performance,Atila Fassina,Lead Frontend Engineer,SAP,,,,Multi-Thread demystified,"JavaScript is not single-threaded anymore. And there is much we can learn from it has been a while. But we are still leaving all the processing in the same thread that we render things. 

Let's have a look on how we can do it better. By leveraging multi-threads we can ensure the User Experience will not ever be jeopardized by any computing and processing we perform, since as blocking as each task could be: they will still be contained within their own thread. Therefore, rendering performance will never drop  below the idea rate.",https://www.linkedin.com/in/atilafassina/,@AtilaFassina,,,,js_atila.png,,Multi-Thread demystified,
No,performance,Tamas Piros,Senior Developer Experience Engineer,Cloudinary,,,,Supercharge your JavaScript with Web Assembly,"Browser and Web APIs along with JavaScript have seen an incredible amount of development and enhancement over the past decade, however they still have certain limitations. With the rise of Web Assembly we can very easily enhance JavaScript and give our application(s) access to low-level processing and potentially transform web experiences. 

By the end of the talk attendees will have a throughout understanding of Web Assembly, and why it's such a great option for extending the capabilities of the browser and JavaScript via two real life examples where one project was brought from C++ to JavaScript and the other was a brand new project simple leveraging the capabilities of Go within a JavaScript context - both to work with images on the web.",https://www.linkedin.com/in/tpiros/,@tpiros,,,,js_tamas.png,,"Supercharge,Web Assembly",
No,testing,Dmitry Vinnik,Developer Advocate,Facebook,,,,Modern Web Testing: Going Beyond Selenium,"It is safe to say that Selenium WebDriver is the number one testing tool for many software engineers across the globe. However, as the tech world has been growing rapidly, so has the testing industry. More and more UI testing frameworks besides Selenium are gaining popularity. 

These new test frameworks are especially appealing to its users because of the promise to solve speed, maintenance, development and other concerns of WebDriver implementations. These new, non-Selenium frameworks emphasize Rapid Test Development practices, and it has been resonating with the development community. 

In this talk, we dive into test solutions evolved from Selenium like Protractor, and talk about non-Selenium frameworks like TestCafe and Cypress.io. We discuss why these new tools are gaining popularity and continue to disrupt the traditional testing standards of Selenium WebDriver. More importantly, we address how to get started and what mistakes to avoid when first implementing TestCafe or Cypress.io in your team.

",https://www.linkedin.com/in/dmitry-vinnik/,@DmitryVinnik,,,,js_dmitry_vinnik.png,,"Web Testing,Selenium",
No,testing,Nahuel Garbezza,Software Craftsman,10Pines,,,,Testy: a minimal testing tool designed for teaching,"Testy is a testing tool that emerged in the ""Object-Oriented Programming 2"" course at Universidad Católica Argentina, where I am the teacher and we learn OOP in dynamic languages like JavaScript.

Testy has 2 main purposes:
* Offer a smooth learning experience for students, focused on detailed feedback
* Serve as an example of simple, well designed OO open-source codebase, a nice place for first-time contributors

In the presentation, I'll give an overview of the tool, and a little demonstration of it.",https://www.linkedin.com/in/nahuelgarbezza/,@ngarbezza,,,,js_nahuel.png,,"Testy,testing tool,teaching",
No,testing,Shai Almog,Developer Advocate,Lightrun,,,,Debug NodeJS Applications in Production with Lightrun,"When a production problem happens all bets are off. We'll do anything to ""save"" production and get us back on track. But by then it's too late. If the logs don't have this information already then we need to add new logs. That means running the full test cycle again, updating servers and hoping that this time we'll see the issue. 

This is bad. Production bugs cost us money. Both in engineer time and in lost revenue for some cases. These are often critical bugs that we need to fix right away. They are also the nastiest bugs... The ones that got through unit testing, integration testing, QA and staging. They are the most ""deadly"" form of bug and our only defense against them is ""logs""???

Newer tools let us skip this hellish cycle. We can debug in production without the risks of crashing the servers. We can work in a highly clustered/distributed environment without a problem. We can inject new logs dynamically, get breakpoint stacks and much more using such tools.",https://www.linkedin.com/in/shai-almog-81a42/,@debugagent,,,,js_shai.png,,"Debug NodeJS,Lightrun",
No,testing,Tal Doron,Principal Software Engineer,NICE,,,,"I've finished, it's working... only tests left..!?","I remember saying it over and over again, and always feeling like something is just not right.
""I've finished, it's working.. only tests left"". Why do I write tests if the task is finished and works as intended? And why is it considered to be a pain to many developers?

In this session I'll be showing the solution to the conflict above, which requires a shift of mindset towards TDD.
I'll be live coding the famous Bowling Kata while letting the tests(use cases) drive my design and implementation so that once the code is written and working, the task is actually done.",https://www.linkedin.com/in/tal-doron-6264786b/,@taldo17,,,,js_tal.png,,only tests left?,
No,testing,Bill Coloe,Front End Optimization Engineer,Lovevery,,,,The Art & Science of AB Test Development,"Over 90% of your website visitors do not buy. Because of this, conversion rate optimization has become a core practice for almost every organization. But out-of-the-box solutions will inevitably fail to achieve significant results without the critical expertise of a front end developer. Learn how to optimize your user experience with AB testing from a developer point of view and how to champion your company's experimentation program with smart practices, process, and coding strategy.

In this talk, I'll chat about:

**Intro**
 - Introduction to AB Testing
 - Popular platforms used for testing
 - Team members and expertise needed for an experimentation program

**Setup**
 - Platform installation
 - Forming a hypothesis
 - Creating a test plan

**Experiment Walkthrough**
 - Using Optimizely as example
 - Targeting, Variations, Audiences, Metrics, Traffic allocation
 - Previewing experiments
 - Brief experiment code exploration

**Dev Strategy**
 - In house vs 3rd party development
 - Setting up experiments, launching, and what results look like
 - AB test coding tips and advice
 - How to code for SPA websites
 - Debugging",https://www.linkedin.com/in/williamcoloe/,@JS_Bits_Bill,,,,js_bill.png,,"Art,Science,AB Test Development",
No,tools,Milecia McGregor,Developer Advocate,Iterative,,,,Using Storybook to Maintain Components in Redwood,"There are times when you need to see what your components will look like outside of the complete UI because they will be reused throughout a project or across multiple projects. This can be a task in itself if it isn't a consideration from the beginning of a project.
	
In this talk, attendees will learn how the Redwood framework includes Storybook to do component-driven development from the start. You will learn how to implement components in Storybook and how that helps you with the long-term maintenance of a project. The techniques we'll cover in this talk can also be applied to other frameworks or existing projects.",https://www.linkedin.com/in/milecia/,@FlippedCoding,,,,js_milecia.png,,"Storybook,Redwood",
No,tools,Facundo Giuliani,Developer Relations Engineer,Storyblok,,,,Incremental Static Regeneration: Static sites on steroids,"Static sites are great. They are fast, cheap, secure, and easy to maintain. But generating static assets is a process that takes more and more time while our site gets bigger. We will talk about Incremental Static Regeneration (ISR), a feature that Next.js framework offers us to generate static pages at runtime. With it, we get the benefit of static, but supporting dynamic data and page re-rendering on demand.

We will talk about static web pages, static site generation and, in particular, Next.js. We will present Next.js Incremental Static Regeneration (ISR). We'll see how it works and code a little example.",https://www.linkedin.com/in/facundogiuliani/,@facundozurdo,,,,js_facundo.png,,Incremental Static Regeneration,
No,tools,Joe Wingard,"Associate Director, Engineering",CMI/Compas,,,,"Service Engine: Auto-provisioned REST, GraphQL & gRPC Services","### Overview

[Service-Engine](https://github.com/sudowing/service-engine-template) is an containerized application that auto-provisions REST, GraphQL & gRPC services -- supporting CRUD operations (with full validation) to tables, views and materialized views of several popular databases (postgres/postgis, mysql, sqlite, mssql, redshift).

#### Primary Features
The [README on GitHub](https://github.com/sudowing/service-engine) has  extensive documentation, but below is a list of the primary features:
* [Quick Start](https://youtu.be/zwpPLM5LPgo)
* [Insomnia Import](https://youtu.be/PzV19iHs-IU)
* [Key REST Endpoints](https://youtu.be/sfmAO4pWC14)
* [Permissions](https://youtu.be/4ptSSnaqvqw)
* [API Response Metadata](https://youtu.be/fjuTBT08ELE)
* [Query Context](https://youtu.be/wITo_oHjSvM)
* [SQL Operators](https://youtu.be/698lXrclFIs)
* [CRUD Operations](https://youtu.be/KUDqqlxb26M)
* [Debug Mode](https://youtu.be/LjRpv6JZxhI)
* [Complex Resources (subqueries & aggregate queries)](https://youtu.be/rzhQlPAoVeI)
* [Middleware & Redactions](https://youtu.be/AopYx2XM3yc)
* [GraphQL Playground and Geoqueries](https://youtu.be/8y5BMjHVRUA)
* [gRPC Service (CRUD & Geoqueries)](https://youtu.be/HFzwwLIqrfQ)
* [DB Schema Migrations](https://youtu.be/84D8_--K5cs)

#### Relevant Links:
* [Video  Overviews](https://www.youtube.com/playlist?list=PLxiODQNSQfKOVmNZ1ZPXbPh6LeVDWtDRc)
* [Forkable Docker  Implementation](https://github.com/sudowing/service-engine-template)
* [GitHub  Source](https://github.com/sudowing/service-engine)
* [NPM  Package](https://www.npmjs.com/package/service-engine)",https://www.linkedin.com/in/joewingard/,,,,,js_joe_wingard.png,,"Auto-provisioned REST,GraphQL,gRPC",
No,tools,Maxim Salnikov,Developer Engagement Lead,Microsoft,,,,Azure cloud for the web frontend developers,"In my technical session & demo, let's go through the full development flow: we scaffold a web front-end app, push it to the GitHub, set up Azure Static Web App service, enjoy the fully automatic build, and deploy to global high-availability hosting - all in a few minutes!",https://www.linkedin.com/in/webmax/,@webmaxru,,,,js_maxim.png,,"Azure cloud,web frontend",
No,tools,Abdelrahman Awad,Senior Frontend Engineer,Octopods,,,,Vue.js form validation with vee-validate v4,"The Talk will showcase the different ways frontend developers do form validations and how vee-validate v4 makes it much easier to accommodate for these needs and use-cases.

We will cover:

* JS form validation
* ""Classic"" HTML form validation with backend framework
* ""Modern"" AJAX form validation
* Multistep forms
* JSON schema generated forms
* Composing the validation logic into custom components with Vue.js composition API",https://www.linkedin.com/in/aaawad/,@logaretm,,,,js_abdelrahman.png,,"Vue.js,form validation,vee-validate v4",
No,tools,Andrew Desmarais,Principal Software Engineer,Meltwater,,,,Build your next app with web components!,"### Build your next app with web components!

Web components have matured significantly over the last several year and are definitely ready for prime time. Writing a full blown web application with web components is now a wonderful experience. 

#### What about my framework features?
* CSS style isolation out of the box with Shadow DOM
* Component based architecture
* Supports ESM
* Bundled (if you want)
* Minified (if you want)
* Documentation - Best on the web! (Thanks [MDN]!)
* Supported by all major browsers (And IE11 with some polyfills)
* Data binding - a little help from lit-html will go a long way!

[MDN](https://developer.mozilla.org/en-US/docs/Web/Web_Components)",https://www.linkedin.com/in/terodox/,@terodox,,,,js_andrew.png,,"app,web components",
No,tools,Denis Artyuhovich,Senior Software Engineer,DAZN,,,,Infrastructure As Code for JS applications on AWS with TypeScript,"We consider what IaC is and why we should invest our time/money into it. During the talk, we will use Terraform for automation of infrastructure creation and environment rollout. Don’t worry if you don’t have any experience with terraform yet - there will be an introduction. You’ll learn what CDK for Terraform is and how we can synthesize TypeScript to Terraform configuration. We will do everything steps by step and as the result, we will have complete infrastructure as code for JS application on AWS written in TypeScript.
We will use these AWS services (so you can expect a small intro about each of them): 
* S3
* CloudFront
* AWS Certificate Manager 
* Route53",https://www.linkedin.com/in/denisby/,@artyuhovich,,,,js_denis.png,,"IAC,AWS,TypeScript",
No,tools,Kilian Valkhof,Author,Polypane,,,,Make Your Electron App Feel at Home Everywhere,"Electron gives you the power to write a single application for Windows, MacOS and Linux. But Electron apps can easily feel out of place among other applications, exactly because you have so much freedom in designing your UI. This feeling of something being ""off"" often comes down to the details, not your overall UI. 

Kilian takes you through the process of making your app feel at home on all three platforms, making you aware of the pitfalls and how to avoid them.",https://www.linkedin.com/in/kilianvalkhof/,@kilianvalkhof,,,,js_kilian.png,,Electron App,
No,tools,Martin Alvarez-Espinar,Web Standards Manager,Huawei Technologies,,,,"Quick Apps: easy coding, frictionless UX","[Quick App](https://quick-app-initiative.ow2.io/page/whitepaper/#what-is-a-quick-app) is a framework that implements the [W3C MiniApp specifications](https://w3c.github.io/miniapp/white-paper/), a new concept of hybrid light applications that do not require installation and offer native user interfaces. This talk presents Quick Apps as a platform for mobile application development, based on the widely known front-end web technologies (i.e., HTML, JS, CSS) and an MVVM architecture. It enables developers to __create ""light"" applications__ more efficiently, using built-in components and advanced access to a host devices' native resources like the calendar or running the app in the background. Quick apps help deliver products and services with an accelerated time-to-market process and tools for product lifecycle management, including promotion, user acquisition, monetization, and user retention… All packaged in __less than 1MB__.
",https://www.linkedin.com/in/espinr/,@espinr,,,,js_martin.png,,"Quick Apps,frictionless UX",
No,tools,Rishi Raj Jain,Solutions Engineer,Layer0 by Limelight Networks,,,,Generate pages on demand: Incremental Static Generation (ISG) With Layer0 and Nuxt.js,"With the introduction of Core Web Vitals into Google Search Ranking, it is high time for developers to focus on performance. To get the static-like performance in dynamic applications, developers of Next.js introduced Incremental Static Regeneration (ISR) as “updating static content after you have already built your site”. But the benefits only applied to Next.js apps, and that’s where Layer0 comes in with their platform to provide benefits of ISG to any framework. 

In this talk, I want to explore what is Incremental Static Generation (ISG), the benefits, the drawbacks, how ISG can be implemented with Nuxt.js and Layer0, extend that idea to different frameworks and finally showcase an awesome example with Nuxt.js.",https://www.linkedin.com/in/rishi-raj-jain/,@rishi_raj_jain_,,,,js_rishi.png,,"Incremental Static (Re)generation (ISG and ISR),Layer0,Nuxt.js",
No,tools,Sergii Zhuravel,Lead Software Engineer,Absio,,,,"Ducks, Re-ducks, Redux-tools - modular approaches for structuring React/Redux apps","Redux is a king of the state management in the React world, even though more and  more competitors appear. But Redux always had some problems and developers coplained about. We will review what problems developers have with Redux and how the community tried to resolve them in the last several years. We will see evolution of the Redux apps sctructuring - from ducks to the Redux Toolkit.
Plan:
1. Redux in 2021?
2. Why good structure for Redux apps is very important
3. What is wrong with the common approaches in Redux apps
4. Ducks in details
5. Re-ducks and how it differs with Ducks
6. What problems Redux Toolkit resolves and how to start to use it.
7. Testing of the duckses",https://www.linkedin.com/in/sergii-zhuravel/,@SZhuravel,,,,js_sergii.png,,"Redux-tools,React/Redux apps",
No,tools,Ron Lyle Dagdag,Lead Software Engineer,Spacee,,,,Developing Spidey Senses: Anomaly detection for Javascript apps,"Anomaly detection is the process of identifying unexpected items or events in data sets. It’s about detecting the deviation from expected pattern of a dataset. It’s like having “spidey senses” for your apps that can detect when there’s danger or something is not right. Attend this session and learn about using anomaly detection in javascript and Cognitive Services API, become a superhero and save the day.",https://www.linkedin.com/in/rondagdag/,@rondagdag,,,,js_ron.png,,"Spidey Senses,Anomaly detection",
No,tools,Jordane Grenat,"Software Engineer, Web",Viseo,,,,"Highway to Elm, a safer and funnier front-end world!","Thanks to non-handled *null* and *undefined*, the dependencies hell of npm and the hazardous refactoring power of Javascript, it is really hard to trustfully release Javascript code into production! 

But this is a necessary evil, given the fact that this is the only language compatible with every browsers, isn't it? **NO!**

Together we will discover another way of coding your front-end with Elm, a language with a simple promise: **no more runtime error!**

Let's see how this wonderful language – specifically designed to build web applications – can make us happier when doing front-end code and more importantly more confident about our releases!",https://www.linkedin.com/in/%F0%9F%A7%A9-jordane-grenat-00041298/,@JoGrenat,,,,js_jordane.png,,"Elm,front-end",
No,tools,Colby Fayock,Developer Advocate,Applitools,,,,Scaling WordPress with Next.js,"When it comes to Content Management Systems (CMS), WordPress is still king. But it’s not the most scalable of solutions and it can be tough working on custom solutions with it as a developer.

WordPress however is still a compelling solution. It has a familiar publishing experience for technical and non-technical people alike with a long history of developers supporting the ecosystem with plugins and development support.

How does WordPress fit in with a world full of modern CMS solutions and how can we still leverage it to build scalable websites with Next.js?

We’ll walk through how we can take advantage of Next.js, utilizing its APIs, to develop a fully static WordPress website. We’ll walk through a Next.js concept Starter and how I was able to bring some of the best parts of WordPress to the static web.",https://www.linkedin.com/in/colbyfayock/,@colbyfayock,,,,js_colby.png,,"Scaling,WordPress,Next.js",
No,tools,Joshua Arvin Lat,CTO,NuWorks Interactive Labs,,,,"Pragmatic State Management in React, Angular, and Vue.js Applications","It is not an easy task to manage state in evolving web applications. We will talk about the different solutions when dealing with state management in **React**, **Angular**, and **Vue.js** apps. These frameworks and libraries have their own ways of managing state. We will talk about the similarities of these options but we will discuss in detail the major differences as well.

Careful planning is needed to help manage risks, especially when suddenly introducing **state management** solutions to an existing project. In most cases, this will impact the complexity level of the project which may then affect the timelines significantly. As we go through several examples using these **JavaScript** frameworks and libraries, we will bridge the gap between reality and expectations on what really works in real projects.

Here, we will bridge the gap between reality and expectations especially on what really works in real-life projects.",https://www.linkedin.com/in/joshualat/,@mrjoshualat,,,,js_joshua.png,,"State Management,React, Angular,Vue.js",
No,culture,Riaz Virani,"Curious Coder, Freelancer & Web Developer",,,,,Five Tips for Success: How To Thrive At Your First Dev Job,"During this talk, we'll go through 5 tips that are crucial for getting through those first six months at your first dev job. They may sound fluffy or even obvious, but they are absolutely essential to keep in mind when your feet are on fire and you don't know what to do

* Ask and You Shall Receive
* Write Now, Worry Later
* Go Deep, Not Wide
* Don't Put Your Teammates on a Pedestal
* Pseudocode is Your Friend
",https://www.linkedin.com/in/riaz-virani-72538a7/,@ViraniRiaz,,,,js_riaz.png,,Five Tips for Success,
No,culture,Karan Balkar,Software Engineer,LTI,,,,Clean code is no longer a myth,"This talk describes how software developers can use open source frameworks to ensure good quality code. It will also highlight the importance of writing clean code, what are the current challenges that exists and what is the possible solutions to overcome the same.",,,,,,js_karan.png,,Clean code,
No,lessons learned,Austin Gil,Senior Full Stack Developer,Reveal Biosciences,,,,Building Super Powered HTML Forms with JavaScript,"I spent a year writing a series of articles that explored best practices for building HTML forms in terms of semantics, accessibility, styling, user experience, and security. I want to show you how to leverage those lessons with JavaScript to give your forms super powers without bloating your client-side bundles.",https://www.linkedin.com/in/austingil/,@Stegosource,,,,js_austin.png,,Super Powered HTML Forms,
No,lessons learned,Alexandre Omeyer,CEO,Stepsize,,,,How to deal with technical debt: lessons learned from 300+ engineering teams,"Technical debt is one of the primary causes of productivity loss for Engineering teams. I have spoken to 300 top engineering teams, such as teams at Airbnb, Intercom, and Snyk, to learn how they manage technical debt. Not only do these teams ship quality software fast but also keep their engineers happy.

In my talk, I will share my learnings: tactics, processes, and tools to use when dealing with small, medium, and large pieces of tech debt. You can apply this practical approach regardless of your company's stage, size, business priorities, and culture.

Talk outline:

* What is tech debt?
* Why is tech debt a thing?
* What we learned from Martin Fowler's Technical Debt Quadrant.
* Tech debt myths to debunk.
* Why should companies bother managing technical debt properly?
* How to create your tech debt management strategy.
* The one cultural characteristic for a healthy codebase.
* How to create & think about your tech debt budget
* How to deal with 'small' debt.
* How to deal with 'medium-sized' debt.
* How to deal with 'large' debt.
* High-level takeaways",https://www.linkedin.com/in/alexandre-omeyer-060a0175/,@AlexOmeyer,,,,js_alexandre.png,,"technical deb,300+ engineering teams",
No,lessons learned,Rob Richardson,Developer Advocate,Cyral,,,,JavaScript the Grumpy Parts,"We love JavaScript, but we must admit: it's weird. Why does `this` behave as it does? How does variable scope work? Why do we have such comical behavior when comparing mixed types? Let's pull back the covers of these scenarios, and learn how it truly works. You may find a new reason to fall in love with JavaScript.",https://www.linkedin.com/in/erobrich/,@rob_rich,,,,js_rob.png,,Grumpy Parts,