1
00:00:25,570 --> 00:00:28,760
You. Last year,

2
00:00:29,130 --> 00:00:33,250
the average cost of a data breach was a staggering

3
00:00:33,330 --> 00:00:37,490
$4.35 million. As exorbitant

4
00:00:37,570 --> 00:00:41,858
as this number is, it represents a 2.6% increase

5
00:00:41,954 --> 00:00:45,970
from the previous year. These findings are from IBM's

6
00:00:46,050 --> 00:00:49,682
cost of data breach report. The serve as a reminder

7
00:00:49,746 --> 00:00:53,406
on the importance of secure architecture welcome to

8
00:00:53,428 --> 00:00:57,294
Conf 42 platform Engineering conference and

9
00:00:57,332 --> 00:01:01,226
thank you for attending this session. I'm Arthur Siddiki,

10
00:01:01,338 --> 00:01:04,942
senior principal software engineer at Silicon Valley bank,

11
00:01:05,086 --> 00:01:08,290
division of First Citizens bank.

12
00:01:08,790 --> 00:01:11,646
This talk will be split over three sections,

13
00:01:11,838 --> 00:01:15,306
starting off with zero Trust and why it requires

14
00:01:15,358 --> 00:01:19,334
our attention. The next topic will

15
00:01:19,372 --> 00:01:23,334
be network segmentation and how AWS transit Gateway is

16
00:01:23,372 --> 00:01:26,994
a key enabler. The third and the last session

17
00:01:27,042 --> 00:01:30,298
will do a walkthrough on the cloud design coupled with

18
00:01:30,384 --> 00:01:33,898
traffic inspection. The term Zero trust

19
00:01:33,984 --> 00:01:37,226
dates all the way back to 1994.

20
00:01:37,408 --> 00:01:40,694
Yep, it is that old. 1994 Stephen

21
00:01:40,742 --> 00:01:44,526
Paul Marsh, a computer science professor, was studying trust as

22
00:01:44,548 --> 00:01:47,998
part of his doctoral thesis. As part of his research,

23
00:01:48,084 --> 00:01:50,938
he was quantifying trust as a finite entity,

24
00:01:51,034 --> 00:01:54,514
that cloud be described mathematically. It is in this

25
00:01:54,552 --> 00:01:57,634
thesis that he's first credited with using

26
00:01:57,672 --> 00:02:01,714
the term zero trust. Fast forward to 2010.

27
00:02:01,912 --> 00:02:06,490
The term zero trust model was coined by John Kinderbag.

28
00:02:06,670 --> 00:02:10,722
He wrote a paper for Forrester research titled

29
00:02:10,866 --> 00:02:13,554
Build Security into your network's dna.

30
00:02:13,682 --> 00:02:17,706
The Zero Trust Network architecture it is safe to

31
00:02:17,728 --> 00:02:21,770
say that the emergence of zero trust model has been gradual.

32
00:02:22,190 --> 00:02:25,494
While there are other data points indicating the industry

33
00:02:25,542 --> 00:02:29,794
acceptance, in my view the impactful endorsement

34
00:02:29,942 --> 00:02:34,122
came in August 2020. That was a time when National

35
00:02:34,186 --> 00:02:37,870
Institute of Standards and Technology, commonly known as NIST,

36
00:02:38,530 --> 00:02:42,270
published a document titled Zero Trust Architecture.

37
00:02:42,950 --> 00:02:46,850
Zero Trust at its core rejects the trust

38
00:02:46,920 --> 00:02:51,010
but verify approach and proposes the motto never

39
00:02:51,080 --> 00:02:55,130
trust, always verify principle include

40
00:02:55,230 --> 00:02:59,142
explicit verification, least privileged access and

41
00:02:59,196 --> 00:03:03,458
minimizing blast radius. The focus of this presentation

42
00:03:03,554 --> 00:03:07,766
will be on segmentation known

43
00:03:07,798 --> 00:03:11,638
by multiple names, isolation partition or segmentation.

44
00:03:11,814 --> 00:03:15,562
This network architecture approach divides the network into

45
00:03:15,616 --> 00:03:19,254
smaller networks. This is especially an effective

46
00:03:19,302 --> 00:03:22,814
approach in organizations that traditionally have

47
00:03:22,852 --> 00:03:25,882
had flat networks. It reduces

48
00:03:25,946 --> 00:03:29,210
the attack plane because lateral movement in the network

49
00:03:29,290 --> 00:03:32,682
is being restricted in AWS cloud,

50
00:03:32,836 --> 00:03:36,734
transit gateway can be used to create sophisticated network

51
00:03:36,782 --> 00:03:39,906
architectures. Security posture can be

52
00:03:39,928 --> 00:03:43,650
further elevated by introducing traffic inspection appliances.

53
00:03:44,070 --> 00:03:48,070
Transit Gateway was announced during reinvent of 2018

54
00:03:48,570 --> 00:03:52,326
as a software defined cloud router. It employs a

55
00:03:52,348 --> 00:03:56,114
hub and spoke model. A popular

56
00:03:56,162 --> 00:03:59,354
deployment model is to provision transit gateway in an

57
00:03:59,392 --> 00:04:03,100
account designated as a foundational network account.

58
00:04:03,550 --> 00:04:07,062
Transit gateway can then be shared via resource access manager

59
00:04:07,126 --> 00:04:09,130
to all other spoke accounts.

60
00:04:10,850 --> 00:04:14,334
To better understand how transit gateway works,

61
00:04:14,452 --> 00:04:17,866
let's understand some of the fundamentals transit

62
00:04:17,898 --> 00:04:22,042
gateway attachment is what allows resources example a VPC

63
00:04:22,186 --> 00:04:26,206
or direct connect gateway to connect to transit

64
00:04:26,238 --> 00:04:30,082
gateway, therefore, in every spoke account,

65
00:04:30,216 --> 00:04:33,886
attachment needs to be provisioned. An attachment

66
00:04:33,998 --> 00:04:38,310
manifests itself as an elastic network interface, or Eni,

67
00:04:38,730 --> 00:04:42,102
while a single Eni can be created for

68
00:04:42,156 --> 00:04:45,670
resilience. Multiple subnets should be specified

69
00:04:46,170 --> 00:04:50,470
which will correspond to enis across multiple availability

70
00:04:50,550 --> 00:04:54,042
zones. It should be mentioned there are other types of

71
00:04:54,096 --> 00:04:57,174
transit gateway attachments, VPN pairing,

72
00:04:57,222 --> 00:05:00,542
connection and connect. However,

73
00:05:00,676 --> 00:05:04,394
this session will concentrate only on the VPC attachment

74
00:05:04,442 --> 00:05:08,302
type. When a transit gateway is created, it also

75
00:05:08,356 --> 00:05:12,670
provisions a default transit gateway route table.

76
00:05:13,350 --> 00:05:16,434
As required, this default table can be

77
00:05:16,472 --> 00:05:20,130
purged and new ones created to isolate the attachments.

78
00:05:20,630 --> 00:05:24,654
All routing decisions done by transit gateway rely

79
00:05:24,702 --> 00:05:28,166
on transit gateway route tables. Coupling of

80
00:05:28,188 --> 00:05:31,426
a transit gateway attachment to a transit gateway route table

81
00:05:31,458 --> 00:05:35,298
is what's called an association. A given attachment

82
00:05:35,394 --> 00:05:38,614
can only be associated with one transit gateway

83
00:05:38,662 --> 00:05:42,566
route table. Propagation is what allows transit gateway

84
00:05:42,598 --> 00:05:46,410
to learn routes dynamically from its attachments.

85
00:05:46,910 --> 00:05:50,830
For example, in this picture, since propagation is enabled

86
00:05:51,170 --> 00:05:54,686
on the next slide, there's an automatic entry under

87
00:05:54,788 --> 00:05:58,922
routes. Aside from propagated

88
00:05:59,066 --> 00:06:03,650
routes, static routes can also be created.

89
00:06:03,990 --> 00:06:07,794
In terms of route evaluation order, static routes have

90
00:06:07,832 --> 00:06:10,690
higher precedents than propagated routes.

91
00:06:11,110 --> 00:06:14,722
Additionally, the more specific a route, the higher

92
00:06:14,776 --> 00:06:18,818
is its priority. Having done a quick walkthrough on the fundamentals,

93
00:06:18,914 --> 00:06:22,502
how do we distill these learnings into the design while keeping in view

94
00:06:22,556 --> 00:06:26,774
of these considerations an

95
00:06:26,812 --> 00:06:31,014
AWS ecosystem that uses AWS organizations

96
00:06:31,062 --> 00:06:33,930
to implement multi account strategy.

97
00:06:34,510 --> 00:06:38,122
One of the best practices is to have separate accounts for each

98
00:06:38,176 --> 00:06:41,786
environment to limit the blast radius. Therefore,

99
00:06:41,898 --> 00:06:44,410
if an application has four environments,

100
00:06:44,570 --> 00:06:47,562
dev, QA, UAT, and Prod,

101
00:06:47,626 --> 00:06:51,646
there will be four AWS accounts. Cross account routing will

102
00:06:51,668 --> 00:06:55,134
be managed by a combination of VPC and transit gateway route

103
00:06:55,182 --> 00:06:59,086
tables. In regard to transit gateway route tables,

104
00:06:59,198 --> 00:07:01,730
there will be two tables configured,

105
00:07:02,070 --> 00:07:06,146
spoke and inspection. The last consideration

106
00:07:06,258 --> 00:07:10,600
is identifying the traffic flow that is of interest to us

107
00:07:10,970 --> 00:07:14,994
on prem is the traffic from AWS ecosystem

108
00:07:15,042 --> 00:07:18,150
to on prem data centers, and vice versa.

109
00:07:18,670 --> 00:07:21,766
Inline is espresso traffic traversing

110
00:07:21,798 --> 00:07:24,380
from one AWS account to another.

111
00:07:24,910 --> 00:07:28,550
Egress is outbound connectivity to the Internet.

112
00:07:28,710 --> 00:07:32,506
For example, an application workload hosted an AWS

113
00:07:32,538 --> 00:07:36,234
account that needs access to the Internet. Traffic inspection

114
00:07:36,282 --> 00:07:40,426
relies on a centralized deployment model. As shown in the diagram,

115
00:07:40,618 --> 00:07:44,530
there are three sets of firewalls deployed in separate vpcs.

116
00:07:44,950 --> 00:07:48,382
These firewall appliances reside in the same foundational

117
00:07:48,446 --> 00:07:51,410
account where transit gateway is provisioned.

118
00:07:51,830 --> 00:07:55,702
The strict control that is being enforced is that

119
00:07:55,756 --> 00:07:59,830
all traffic crossing a VPC boundary must be inspected.

120
00:08:00,490 --> 00:08:03,910
In fact, even in a multi VPC account,

121
00:08:04,060 --> 00:08:07,410
traffic from one VPC to another VPC in the same account

122
00:08:07,500 --> 00:08:10,986
must still go through a firewall. I realized there's a

123
00:08:11,008 --> 00:08:14,646
conspicuous absence of ingress, which is traffic

124
00:08:14,678 --> 00:08:18,406
coming into an AWS account from the Internet. I chose

125
00:08:18,438 --> 00:08:22,014
to descope it as it requires additional controls that can

126
00:08:22,052 --> 00:08:25,310
end up being a topic on its own. Similarly,

127
00:08:25,650 --> 00:08:28,894
implementation details for on prem connectivity have

128
00:08:28,932 --> 00:08:32,670
also not been discussed.

129
00:08:33,090 --> 00:08:36,558
Again, the depth of topic to include direct connect

130
00:08:36,644 --> 00:08:40,254
VPN or SD WAN overlay with transit gateway

131
00:08:40,302 --> 00:08:43,700
Connect are topic on its own.

132
00:08:44,230 --> 00:08:48,706
The design being presented here references two application accounts

133
00:08:48,818 --> 00:08:52,120
with highly creative names, app one and app two.

134
00:08:52,490 --> 00:08:56,678
App one has a VPC cider of ten 124

135
00:08:56,764 --> 00:09:00,090
00:23 while app two

136
00:09:00,240 --> 00:09:05,740
has a VPC cider of ten 128 00:23

137
00:09:06,190 --> 00:09:10,034
the second picture depicts corresponding ciders

138
00:09:10,182 --> 00:09:13,230
for vpcs in which the firewalls have been provisioned.

139
00:09:13,810 --> 00:09:17,326
Default transit Gateway route table has been pursed and two

140
00:09:17,348 --> 00:09:20,506
new ones created to isolate the attachments.

141
00:09:20,698 --> 00:09:24,146
Spoke and inspection on

142
00:09:24,168 --> 00:09:27,774
the spoke route table is where the spoke

143
00:09:27,822 --> 00:09:29,970
vpcs are connected. Therefore,

144
00:09:30,790 --> 00:09:34,206
under associations are listed the transit gateway

145
00:09:34,238 --> 00:09:38,230
attachments of app one and app two within

146
00:09:38,300 --> 00:09:42,002
this spoke route table under routes static

147
00:09:42,066 --> 00:09:46,246
routes have been configured. The design assumes that

148
00:09:46,348 --> 00:09:49,798
ten

149
00:09:49,894 --> 00:09:52,970
is a super block for AWS ecosystem.

150
00:09:53,550 --> 00:09:56,934
Therefore, if target IP is from the 16

151
00:09:56,982 --> 00:10:00,538
super block, the third route is in play as it

152
00:10:00,544 --> 00:10:03,550
is the most specific route. In this case,

153
00:10:03,620 --> 00:10:07,310
the next hop is the attachment for inline firewall UPC.

154
00:10:07,650 --> 00:10:11,342
If the target IP is not from 16 super block but

155
00:10:11,396 --> 00:10:15,330
still from the 100 zero eight

156
00:10:15,400 --> 00:10:19,154
range, it is treated as on prem traffic. In this

157
00:10:19,192 --> 00:10:23,262
case, the second route is in play and next hop

158
00:10:23,406 --> 00:10:26,610
is the attachment for on prem firewall VPC.

159
00:10:27,110 --> 00:10:30,902
Finally, if cardio IP is not part of the ten eight

160
00:10:30,956 --> 00:10:34,520
range, then the least specific route comes into play.

161
00:10:35,130 --> 00:10:38,982
This is treated as egress traffic and next

162
00:10:39,036 --> 00:10:42,586
hop becomes the attachment for egress firewall VPC as per

163
00:10:42,608 --> 00:10:46,566
the first route, moving on to the second transit

164
00:10:46,598 --> 00:10:50,538
gateway route. Table name inspection this is where the firewall vpcs

165
00:10:50,554 --> 00:10:53,642
are connected. Therefore, under associations

166
00:10:53,786 --> 00:10:57,354
are listed the attachments for egress inline and on prem

167
00:10:57,402 --> 00:11:01,226
firewall vpcs. After application traffic

168
00:11:01,258 --> 00:11:04,594
has been inspected, final hop of the network path has

169
00:11:04,632 --> 00:11:08,180
to be determined. Let's say app one

170
00:11:08,630 --> 00:11:11,886
was talking to app two, which means that the destination

171
00:11:11,918 --> 00:11:15,998
IP will be within ten 128

172
00:11:16,104 --> 00:11:20,386
00:23 range. That is because this is the VBG

173
00:11:20,418 --> 00:11:24,114
cider of app two. Therefore, the last route

174
00:11:24,162 --> 00:11:27,674
is in play and corresponds to the transit gateway attachment of app

175
00:11:27,712 --> 00:11:30,810
two for completeness. If app

176
00:11:30,880 --> 00:11:35,014
two was talking to app one. Then the destination IP

177
00:11:35,062 --> 00:11:39,306
will be within ten 124 00:23

178
00:11:39,328 --> 00:11:42,400
range, because that is the VPC cider of App one.

179
00:11:42,770 --> 00:11:46,174
In this case, the second last route is in play and

180
00:11:46,212 --> 00:11:50,160
corresponds to the transit gateway attachment of app one

181
00:11:50,690 --> 00:11:54,782
down the line. As new application accounts are onboarded,

182
00:11:54,926 --> 00:11:58,322
specific routes will be appended here for app two, three, four,

183
00:11:58,376 --> 00:12:02,814
et cetera. Let's briefly talk about VPC routes

184
00:12:02,942 --> 00:12:06,086
to understand how routing decisions happen at

185
00:12:06,108 --> 00:12:09,590
the origination point. This diagram shows

186
00:12:09,740 --> 00:12:12,440
VPC route table for app one,

187
00:12:12,890 --> 00:12:16,706
the first route has been inserted, which states that for any non

188
00:12:16,738 --> 00:12:20,486
local route, destination is specified as a transit

189
00:12:20,518 --> 00:12:24,650
gateway, which then gets full control of transit routing

190
00:12:25,230 --> 00:12:28,906
circling back the goal of this presentation has been

191
00:12:28,928 --> 00:12:32,654
to look at network architecture approach under

192
00:12:32,692 --> 00:12:35,774
the purview of zero trust. What if we wanted

193
00:12:35,812 --> 00:12:39,440
to take this a step further? What if a Dev account

194
00:12:40,130 --> 00:12:44,050
shouldn't talk to UAT? What if dev environment

195
00:12:44,710 --> 00:12:48,354
shouldn't even have a network path to UAT? What if

196
00:12:48,392 --> 00:12:51,954
QA cannot talk to production? What if the

197
00:12:51,992 --> 00:12:56,302
control state that environments cannot mix? Dev environments

198
00:12:56,366 --> 00:12:59,362
are only allowed to have a network path to other dev environments,

199
00:12:59,506 --> 00:13:02,930
QA environments are only allowed to have a path to other QA environments,

200
00:13:03,010 --> 00:13:06,882
and so forth to cater to this additional requirement.

201
00:13:07,026 --> 00:13:10,810
This is how the design can be enhanced. Instead of a single

202
00:13:10,880 --> 00:13:14,570
spoke route table, design will extend to

203
00:13:14,720 --> 00:13:17,158
four transit gateway route tables,

204
00:13:17,334 --> 00:13:20,890
Devspoke QA spoke, UAT spoke,

205
00:13:20,970 --> 00:13:24,090
and prod spoke. With this approach,

206
00:13:24,250 --> 00:13:27,978
transit gateway attachments of Dev vpcs will be attached

207
00:13:27,994 --> 00:13:32,830
to Devspoke transit gateway attachments of QA

208
00:13:33,190 --> 00:13:36,370
will be attached to QA spoke table, and so forth.

209
00:13:36,950 --> 00:13:41,406
By raising the number of transit gateway route tables, higher granularity

210
00:13:41,438 --> 00:13:45,314
of routing control is permitted. In addition to existing

211
00:13:45,362 --> 00:13:48,658
routes that force traffic to firewalls,

212
00:13:48,754 --> 00:13:52,150
a fourth route can be inserted of type

213
00:13:52,220 --> 00:13:56,386
black hole. Therefore, on a despoke route table

214
00:13:56,498 --> 00:14:00,086
if the destination IP is from a sided range

215
00:14:00,118 --> 00:14:03,770
of QA, UAT or production vpcs,

216
00:14:04,270 --> 00:14:07,866
it will be directed to a black hole. This will

217
00:14:07,888 --> 00:14:11,982
ensure there's no network path from a dev account to

218
00:14:12,036 --> 00:14:14,400
any other non dev account.

219
00:14:15,090 --> 00:14:19,194
Similarly, black hole routes can be inserted on the QA spoke, UAT spoke

220
00:14:19,242 --> 00:14:23,154
and prod spoke route tables. I will leave with one

221
00:14:23,192 --> 00:14:26,820
final food for thought. What if there is a new

222
00:14:27,350 --> 00:14:30,814
incremental requirement to have separate inspection

223
00:14:30,862 --> 00:14:34,514
appliances production firewalls being separate from

224
00:14:34,632 --> 00:14:37,906
nonproduction firewall appliances? The design remains

225
00:14:37,938 --> 00:14:40,950
extensible for this requirement.

226
00:14:41,530 --> 00:14:45,442
A new set of firewalls egress inline and on prem

227
00:14:45,506 --> 00:14:49,414
will have to be deployed in their own vpcs and

228
00:14:49,452 --> 00:14:52,838
a second inspection transit gateway route table will need to

229
00:14:52,844 --> 00:14:53,830
be introduced.

230
00:14:55,850 --> 00:14:59,634
There is a rising cost of data breach that we started off the discussion

231
00:14:59,682 --> 00:15:03,886
with. Even more impactful is the hit to

232
00:15:03,908 --> 00:15:07,262
the brand reputation and a loss of customer confidence when

233
00:15:07,316 --> 00:15:11,242
data breach occurs. Importance of security architecture

234
00:15:11,386 --> 00:15:15,354
cannot be overstated. Zero Trust provides

235
00:15:15,402 --> 00:15:19,354
an excellent reference architecture that allows organizations

236
00:15:19,402 --> 00:15:22,750
to incrementally improve their enterprise architectures.

237
00:15:23,890 --> 00:15:24,460
Thank you all.

