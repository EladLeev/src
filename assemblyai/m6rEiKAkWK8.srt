1
00:00:23,210 --> 00:00:26,914
Hi and welcome to my talk entitled Use Falco

2
00:00:26,962 --> 00:00:30,166
and EBPF to protect your applications. First, who am

3
00:00:30,188 --> 00:00:33,634
I? I'm Tomana Bowsias. I'm currently OSS and ecosystem

4
00:00:33,682 --> 00:00:37,394
advocate at Sysdig, the original creator of Falco.

5
00:00:37,522 --> 00:00:41,526
I was SrE for over eight years, so I know what it is to

6
00:00:41,548 --> 00:00:45,094
run stuff in production. I'm also contributor to

7
00:00:45,132 --> 00:00:48,834
Falco and the creator of Falcopsychic and Falco psychic ride to measure

8
00:00:48,882 --> 00:00:52,206
components of the Falco ecosystem and you can

9
00:00:52,228 --> 00:00:54,974
reach me on these social networks if you want.

10
00:00:55,092 --> 00:00:59,120
First we need to define what is runtime security. What it means

11
00:00:59,730 --> 00:01:03,534
runtime security are all the tools and procedures

12
00:01:03,662 --> 00:01:07,186
you can put in place to secured an application in a

13
00:01:07,208 --> 00:01:10,930
corner or not during its lifetime in production.

14
00:01:11,270 --> 00:01:14,594
It's different of what we currently do in

15
00:01:14,632 --> 00:01:18,114
our CI pipelines with an image scanning.

16
00:01:18,242 --> 00:01:22,594
It's also different from what we can do with Kubernetes or gatekeepers

17
00:01:22,722 --> 00:01:26,402
to create policies to enforce good practices

18
00:01:26,466 --> 00:01:30,682
in our clusters. It's totally focused on what

19
00:01:30,736 --> 00:01:34,122
happens when your application is disturbing real

20
00:01:34,176 --> 00:01:38,038
customers, is using real traffic.

21
00:01:38,214 --> 00:01:42,506
For that of alcove we rely on Ciscos.

22
00:01:42,698 --> 00:01:46,494
Cisco's or system calls are basically the way you

23
00:01:46,532 --> 00:01:49,982
program have to ask the kernel some

24
00:01:50,036 --> 00:01:53,060
accesses to those resources. For example,

25
00:01:54,230 --> 00:01:58,674
if your application needs to create a process access

26
00:01:58,872 --> 00:02:02,562
to the network, read or write into

27
00:02:02,616 --> 00:02:06,242
a file, your application needs to ask the kernel

28
00:02:06,306 --> 00:02:10,050
the access and to ask these accesses

29
00:02:10,210 --> 00:02:14,134
you use system calls. Basically you can see

30
00:02:14,172 --> 00:02:17,614
the system calls as the kernel API.

31
00:02:17,762 --> 00:02:21,366
If you are familiar enough with the Linux ecosystem,

32
00:02:21,558 --> 00:02:25,610
you already know about Glipsy or muscle for IPM.

33
00:02:26,190 --> 00:02:29,546
Basically Glipsy is the

34
00:02:29,568 --> 00:02:33,120
library used by your applications to

35
00:02:34,050 --> 00:02:37,498
call the system calls. You can see the step calls

36
00:02:37,514 --> 00:02:41,642
as an API and glipsy as an SDK.

37
00:02:41,786 --> 00:02:45,374
So for Falco, Falco is a CNCF

38
00:02:45,422 --> 00:02:49,074
incubation level project. It's a cloud

39
00:02:49,112 --> 00:02:53,074
native project in the CNCF landscape for

40
00:02:53,112 --> 00:02:56,802
securing running applications. Right now it's the most advanced

41
00:02:56,866 --> 00:03:01,634
threat detection engine you can run inside Kubernetes EBPF

42
00:03:01,762 --> 00:03:04,898
EBPF for extended packet filter.

43
00:03:05,074 --> 00:03:08,662
It's the Linux kernel feature which allows

44
00:03:08,726 --> 00:03:12,058
you to run a program in the kernel without

45
00:03:12,144 --> 00:03:15,738
any change of the code or without kernel or

46
00:03:15,824 --> 00:03:19,100
any load of a module like we did before.

47
00:03:21,970 --> 00:03:24,960
It enforces the stability and the security.

48
00:03:25,490 --> 00:03:28,442
It's really useful for security, for monitoring,

49
00:03:28,506 --> 00:03:31,966
troubleshooting. You also have to know right now the

50
00:03:31,988 --> 00:03:35,506
core maintenance of Falco are developing a new

51
00:03:35,608 --> 00:03:39,694
Falco EBPF probe. Basically the features

52
00:03:39,742 --> 00:03:42,706
will be exactly the same as the current ones,

53
00:03:42,888 --> 00:03:46,894
but it will also use the core reparation compile

54
00:03:46,942 --> 00:03:50,722
ones run everywhere. Right now you would need to

55
00:03:50,856 --> 00:03:54,206
build the EBPF

56
00:03:54,238 --> 00:03:58,246
rod for the exact version of your kernel. In the future, since the

57
00:03:58,268 --> 00:03:59,800
version five eight,

58
00:04:01,610 --> 00:04:05,118
you will use the same role for any kernel.

59
00:04:05,314 --> 00:04:08,714
You just have to download it or build it only once and it will

60
00:04:08,752 --> 00:04:13,726
run everywhere. For the EBPF OE does

61
00:04:13,908 --> 00:04:17,294
the collections of events. Basically in

62
00:04:17,332 --> 00:04:21,546
EBPF world you have hooks. Hooks are endpoints.

63
00:04:21,578 --> 00:04:25,806
For example, you can hook

64
00:04:25,918 --> 00:04:29,778
basically your probe and collect events. These events can

65
00:04:29,784 --> 00:04:33,374
be syscolls. They can be related to file system, they can be related

66
00:04:33,422 --> 00:04:37,238
to network, almost anything. If a hook is not

67
00:04:37,324 --> 00:04:41,640
already there by default, you can create your own.

68
00:04:42,490 --> 00:04:45,858
It's really convenient and really to ensure

69
00:04:46,034 --> 00:04:49,702
the stability and the security. All the code

70
00:04:49,756 --> 00:04:54,330
you write for your EBPF probe will be verified

71
00:04:54,750 --> 00:04:58,634
by the Linux kernel. So you code your

72
00:04:58,672 --> 00:05:01,934
probe with everything to the

73
00:05:01,972 --> 00:05:06,250
hook you want to use, the data enrichment,

74
00:05:06,330 --> 00:05:09,886
everything. It will be checked by the

75
00:05:09,908 --> 00:05:13,780
kernel. If the code is approved, it will be

76
00:05:14,470 --> 00:05:18,478
compiled into bytecode and injected to the kernel

77
00:05:18,574 --> 00:05:21,390
and it will be run inside the sandbox.

78
00:05:21,550 --> 00:05:24,958
The verification is there to ensure you

79
00:05:25,064 --> 00:05:28,898
don't have any security flows. You don't create infinite loops,

80
00:05:28,994 --> 00:05:32,406
you don't create overhead and

81
00:05:32,508 --> 00:05:35,974
bad performances in your system. Everything is

82
00:05:36,012 --> 00:05:40,026
there by default by design to ensure stability and

83
00:05:40,048 --> 00:05:43,350
security. For Falco itself, the architecture

84
00:05:43,430 --> 00:05:47,366
is there. You have the kernel and the EBPF

85
00:05:47,398 --> 00:05:50,910
probes is to collect the SyS course from the kernel.

86
00:05:51,250 --> 00:05:54,798
And then Falco, thanks to rule set,

87
00:05:54,964 --> 00:05:58,874
will trigger lets. If one event from the kernel

88
00:05:58,922 --> 00:06:02,430
from the SYs course matches with a rule,

89
00:06:03,490 --> 00:06:06,298
Falco will output an alert.

90
00:06:06,394 --> 00:06:10,574
This alert can be in standard, but a file program syslog

91
00:06:10,622 --> 00:06:14,530
HTTP sent to an HTTP endpoint or GrPC.

92
00:06:19,690 --> 00:06:24,066
If we take a deeper look at the FICO architecture.

93
00:06:24,258 --> 00:06:27,262
FICO is composed of three key elements.

94
00:06:27,426 --> 00:06:30,586
Lipscap two libraries Lipscap Elysiums hello regime so

95
00:06:30,608 --> 00:06:33,814
regime is basic and Lipscap is in charge

96
00:06:33,862 --> 00:06:37,846
to the inverter collections, elysium to the data enrichment and the extractions

97
00:06:37,878 --> 00:06:41,962
of field. You can see we have the ab prep code

98
00:06:42,016 --> 00:06:45,806
in the kernel space and Falco itself in user space.

99
00:06:45,908 --> 00:06:49,118
It's really important for us to as FICO is

100
00:06:49,124 --> 00:06:52,666
a security component to be as secure as

101
00:06:52,708 --> 00:06:56,286
possible. This is why FICO itself is running at the user

102
00:06:56,318 --> 00:06:59,010
space, so with less privileges.

103
00:06:59,750 --> 00:07:03,038
But the EBPF

104
00:07:03,054 --> 00:07:06,438
probe is running in candle space, but thanks to EBPF is

105
00:07:06,524 --> 00:07:09,974
secured and stable by default. So we

106
00:07:10,012 --> 00:07:13,394
have the first library, Lipscap, aka library

107
00:07:13,442 --> 00:07:17,442
for system captures. Lipscap is in a user space

108
00:07:17,516 --> 00:07:21,606
library. It communicates with the drivers. Basically it reads the syscol's

109
00:07:21,638 --> 00:07:25,238
events from a rig buffer if exposed

110
00:07:25,334 --> 00:07:28,822
by the driver and then these events are forwarded

111
00:07:28,886 --> 00:07:32,886
to listimp. Listinf aka library for system inspections

112
00:07:32,998 --> 00:07:37,214
is in charge to receive the events from cap and to

113
00:07:37,252 --> 00:07:40,766
enrich these events with machine state. Basically, if your

114
00:07:40,788 --> 00:07:44,442
application is running inside a containers, this containers

115
00:07:44,506 --> 00:07:48,194
is part of a pod. In the Kubernetes cluster you

116
00:07:48,232 --> 00:07:52,622
will have for your rules and for the lets,

117
00:07:52,766 --> 00:07:56,562
the containers id containers name, the pod name, the pod

118
00:07:56,626 --> 00:08:00,162
namespace, the pod levels. All these elements

119
00:08:00,226 --> 00:08:03,826
will be there to create nice rules

120
00:08:03,938 --> 00:08:07,446
and to be able to know what is

121
00:08:07,468 --> 00:08:10,874
the context of the audit. It will also perform some

122
00:08:10,912 --> 00:08:14,166
event filtering and extract fields from busy events.

123
00:08:14,278 --> 00:08:17,386
These fields are then used by the rule. So if

124
00:08:17,408 --> 00:08:21,286
we take a look at our first rule, for example, this one terminal

125
00:08:21,318 --> 00:08:24,922
shell in a constant, we have the name of the rule,

126
00:08:25,066 --> 00:08:28,606
the description for us human beings. It will

127
00:08:28,628 --> 00:08:32,254
not be used by any system and it will not be the

128
00:08:32,292 --> 00:08:35,998
final output we have, the condition we'll

129
00:08:36,014 --> 00:08:39,554
see later, and an output. The output is the exact message we

130
00:08:39,592 --> 00:08:43,154
will get. At the end you can see some

131
00:08:43,192 --> 00:08:46,420
fields starting by percent person.

132
00:08:47,210 --> 00:08:50,850
This field will be automatically replaced by Falco in the output.

133
00:08:50,930 --> 00:08:54,678
It means at the end, in the alert, you will get a real username and

134
00:08:54,684 --> 00:08:56,390
not this token.

135
00:08:57,470 --> 00:09:00,906
Each rule comes with a priority. In this case,

136
00:09:01,008 --> 00:09:05,334
running these priorities are useful for you to filter

137
00:09:05,462 --> 00:09:09,034
which rule you want to receive. And we

138
00:09:09,072 --> 00:09:12,814
also have tags. The tags are useful to understand the

139
00:09:12,852 --> 00:09:15,738
context of the rule, what is supposed to detect,

140
00:09:15,914 --> 00:09:19,742
and you can also set Falco to

141
00:09:19,796 --> 00:09:23,162
just enable a subset of rules. For example, you can enable

142
00:09:23,226 --> 00:09:26,686
only the rules which concern the

143
00:09:26,868 --> 00:09:29,394
contract or network or else.

144
00:09:29,592 --> 00:09:33,438
So for the rules you can use lets

145
00:09:33,534 --> 00:09:36,114
and macros. Lets are pretty obvious.

146
00:09:36,232 --> 00:09:39,466
It's just an array of AI

147
00:09:39,518 --> 00:09:43,474
items. In that situation is a list of possible files

148
00:09:43,522 --> 00:09:47,486
you can use in your system. Remember, Falco rules

149
00:09:47,538 --> 00:09:50,970
are yaml files, basically so you can

150
00:09:51,120 --> 00:09:55,398
override anything. And you can also append items

151
00:09:55,494 --> 00:09:58,666
or append rules or macros. It's really convenient and

152
00:09:58,688 --> 00:10:02,586
it will allow you to reuse

153
00:10:02,618 --> 00:10:05,950
macros over your rules and not copy past or duplicate

154
00:10:06,450 --> 00:10:10,170
codes. We also have this macro,

155
00:10:10,250 --> 00:10:14,400
shellproc, and you see macro name. Macro name is

156
00:10:14,850 --> 00:10:18,178
a built in field from Falco you

157
00:10:18,184 --> 00:10:21,486
can use in your roles. Even if you are not really familiar with Falco,

158
00:10:21,518 --> 00:10:25,058
if you're not familiar with Linux, Cisco sort of stuff,

159
00:10:25,224 --> 00:10:28,854
it's quite easy to understand that plug name means the

160
00:10:28,892 --> 00:10:32,166
name of the process. You also have proc id for

161
00:10:32,188 --> 00:10:35,414
the id of the process. Or plug pid for the

162
00:10:35,452 --> 00:10:39,354
id of the parent of the process. It's really convenient and easy

163
00:10:39,392 --> 00:10:42,954
to read even if you are not a specialist. We also

164
00:10:42,992 --> 00:10:46,826
have this macro containers if containers id already a

165
00:10:46,848 --> 00:10:50,334
built in field is different from host, just means

166
00:10:50,372 --> 00:10:52,750
if we have something different from a hash,

167
00:10:53,810 --> 00:10:57,502
it means the applications or the events happened

168
00:10:57,636 --> 00:11:01,806
inside the governor pitch abuse and we have spawn process

169
00:11:01,988 --> 00:11:06,334
with a tip typo and we also have event type of

170
00:11:06,372 --> 00:11:10,340
use and easy v art are real

171
00:11:11,350 --> 00:11:15,058
system calls. You can see these exact names inside

172
00:11:15,144 --> 00:11:18,690
the kernel code base if you want and we have event deer.

173
00:11:18,770 --> 00:11:22,546
It's just to specify if we want a question to the kernel or response

174
00:11:22,578 --> 00:11:25,718
from the kernel. Even if the rules are

175
00:11:25,884 --> 00:11:29,226
convenient and easy to read, we know it

176
00:11:29,328 --> 00:11:34,358
would be complicated to create new rules.

177
00:11:34,454 --> 00:11:38,282
This is why Falco comes with default rule set.

178
00:11:38,336 --> 00:11:41,618
Right now he has almost 70 step rules

179
00:11:41,734 --> 00:11:45,610
and they cover most of the techniques

180
00:11:45,690 --> 00:11:49,022
practices used by the attackers to do

181
00:11:49,076 --> 00:11:53,142
privilege escalation, to read or write sensitive files or directory

182
00:11:53,306 --> 00:11:56,610
to spawn a shell,

183
00:11:57,110 --> 00:12:01,358
exfiltrate data, start ransomware,

184
00:12:01,534 --> 00:12:05,170
that kind of patterns. For example,

185
00:12:05,320 --> 00:12:09,380
right now we have all these rules 79

186
00:12:10,630 --> 00:12:13,954
so we can see some of them are disabled by default.

187
00:12:14,002 --> 00:12:17,554
It's just because they can be noisy if you don't happen

188
00:12:17,692 --> 00:12:22,278
the exception list with your own context.

189
00:12:22,454 --> 00:12:25,994
So we prefer to disable them, but they are there and

190
00:12:26,112 --> 00:12:28,890
you can use them. We also have tags,

191
00:12:29,890 --> 00:12:32,590
so if we take a look at the full switches,

192
00:12:40,820 --> 00:12:44,736
the condition is a little bit different because my slide is quite old

193
00:12:44,838 --> 00:12:48,668
now, but basically the idea is the same. We have macros,

194
00:12:48,844 --> 00:12:52,396
spawn process macros is there governor, governor,

195
00:12:52,508 --> 00:12:56,112
shellprocess, et cetera, et cetera. And the output with the token

196
00:12:56,176 --> 00:12:59,444
to replace everything is there. You Falco have

197
00:12:59,562 --> 00:13:03,400
tags and if you are familiar with the meter framework we are trying to

198
00:13:03,470 --> 00:13:06,680
cover as much techniques as possible and

199
00:13:06,830 --> 00:13:10,664
you can find which rules is related to which technique with

200
00:13:10,702 --> 00:13:14,252
the tags, meter, underscore and t number

201
00:13:14,306 --> 00:13:22,204
after having

202
00:13:22,322 --> 00:13:24,992
lets is nice,

203
00:13:25,126 --> 00:13:29,600
but we need to use them, we need to exploit these alerts.

204
00:13:29,940 --> 00:13:33,330
Here comes Falco psychic basically

205
00:13:37,220 --> 00:13:41,168
forwards the alerts from your Falco instances

206
00:13:41,264 --> 00:13:44,676
to your ecosystem so you

207
00:13:44,698 --> 00:13:48,256
can forward the lets

208
00:13:48,288 --> 00:13:52,100
to a chat system, logs system like elasticsearch

209
00:13:52,180 --> 00:13:56,084
loki or a queue system or streaming like kafka

210
00:13:56,132 --> 00:13:59,720
nats pub sub. You can also forward

211
00:13:59,790 --> 00:14:03,480
lets to a function as a service serverless

212
00:14:04,860 --> 00:14:08,488
pycopsychic also exposes Prometheus endpoint.

213
00:14:08,664 --> 00:14:12,476
It's useful if you want to create and do some statistics about the number of

214
00:14:12,498 --> 00:14:15,836
alias and so and for the SRE or

215
00:14:15,858 --> 00:14:18,700
devsecops or health of setups.

216
00:14:19,120 --> 00:14:22,900
You can also trigger your own call system with Falco

217
00:14:23,000 --> 00:14:26,348
right now with Falco psychic right now we have pager duty,

218
00:14:26,444 --> 00:14:30,116
opsigenny and Grafana on call and you

219
00:14:30,138 --> 00:14:33,190
can also do call storage in s three or s.

220
00:14:34,040 --> 00:14:37,648
Basically we have one Falco instance per node

221
00:14:37,744 --> 00:14:40,936
because it relies on the kernel and the kernels are

222
00:14:40,958 --> 00:14:44,964
not distributed. So we have one Falco

223
00:14:45,012 --> 00:14:48,484
instance per node. They can forward all their events

224
00:14:48,532 --> 00:14:53,512
to single

225
00:14:53,566 --> 00:14:57,148
deployment of Falco. You can pull Falco to

226
00:14:57,154 --> 00:15:01,304
get metrics and you can send all the events to elasticsearch

227
00:15:01,352 --> 00:15:05,200
for data analysis for long term storage, but only

228
00:15:05,350 --> 00:15:08,832
alerts with priority above critical to your on call system.

229
00:15:08,966 --> 00:15:12,624
You can also add static speeds or else really

230
00:15:12,662 --> 00:15:17,164
convenient. So with Falco we have the detection.

231
00:15:17,292 --> 00:15:20,340
With Falco Psychic we have the notification.

232
00:15:20,920 --> 00:15:24,516
If you forward this event to

233
00:15:24,538 --> 00:15:28,688
serverless or to a function as a service system, you can react

234
00:15:28,864 --> 00:15:32,120
as long as you are able to write your own

235
00:15:32,270 --> 00:15:35,464
reaction. You can do whatever you need with

236
00:15:35,502 --> 00:15:38,628
lambda, openfast, knative, argo,

237
00:15:38,644 --> 00:15:41,224
workflow, Google function,

238
00:15:41,342 --> 00:15:44,780
everything. For example, you can terminate a port.

239
00:15:44,850 --> 00:15:48,316
You can create a network policy to isolate a port.

240
00:15:48,418 --> 00:15:51,896
You can also scale in or scale out an autoscaling

241
00:15:51,928 --> 00:15:55,616
group, whatever you need, as long you are able to write your

242
00:15:55,638 --> 00:15:56,370
own function.

243
00:15:58,980 --> 00:16:02,556
Falco psychic comes with a specific output called Falco

244
00:16:02,588 --> 00:16:06,636
psychic Ui. And basically it's

245
00:16:06,828 --> 00:16:10,176
a basic interface with statistics, with pie charts.

246
00:16:10,208 --> 00:16:13,428
And so to have in few minutes

247
00:16:13,594 --> 00:16:17,236
an overview of what

248
00:16:17,258 --> 00:16:20,820
has been detected by Farco in your environment, it's pretty convenient.

249
00:16:20,900 --> 00:16:24,424
It's not used for long

250
00:16:24,462 --> 00:16:28,564
term storage or else, but at least you have a quick overview.

251
00:16:28,692 --> 00:16:30,490
It's pretty convenient to use.

252
00:16:32,620 --> 00:16:39,164
At the beginning Falco was only for

253
00:16:39,202 --> 00:16:43,196
system calls. Then we introduced a web server to collect the

254
00:16:43,218 --> 00:16:46,540
Kubernetes audit codes, but it came with

255
00:16:46,610 --> 00:16:50,512
a lot of drawbacks. So in the last year we also

256
00:16:50,566 --> 00:16:54,256
introduced a plugin framework. Right now we

257
00:16:54,278 --> 00:16:57,728
are able to collect cisco thanks to EBPF.

258
00:16:57,824 --> 00:17:01,056
But Falco is also able to collect

259
00:17:01,168 --> 00:17:04,644
any kind of events you may have. So by

260
00:17:04,762 --> 00:17:07,590
events we often think about logs for example.

261
00:17:08,360 --> 00:17:11,616
So plugins are shared

262
00:17:11,648 --> 00:17:15,732
libraries used by Falco to collect insight from three more events.

263
00:17:15,796 --> 00:17:19,684
Right now we have plugins to collect Amazon,

264
00:17:19,732 --> 00:17:22,184
EKS, ODi cloud, to collect GitHub,

265
00:17:22,232 --> 00:17:26,840
webhooks, docker events, and even nomad

266
00:17:26,920 --> 00:17:30,232
events. We developed these plugins with Ashico.

267
00:17:30,376 --> 00:17:33,772
So with EBPF you

268
00:17:33,826 --> 00:17:37,536
collect the Cisco. So with EPPF and Falco you protect your

269
00:17:37,558 --> 00:17:41,392
applications. With the plugins you can for example the

270
00:17:41,446 --> 00:17:44,624
Kubernetes or deploy plugins. You are able Falco to protect

271
00:17:44,742 --> 00:17:48,184
your kubernetes clusters. With the Amazon cloud trial

272
00:17:48,252 --> 00:17:52,048
you are able to protect and detect suspicious behaviors

273
00:17:52,224 --> 00:17:55,636
at your account level. And with the GitHub plugin you are

274
00:17:55,658 --> 00:17:59,972
able to detect strange

275
00:18:00,036 --> 00:18:04,052
situations in your CI or in your pipelines

276
00:18:04,116 --> 00:18:07,828
or in your repositories. It means right now with Falco

277
00:18:07,924 --> 00:18:12,088
you can protect all stages from the

278
00:18:12,174 --> 00:18:13,960
development to the production.

279
00:18:17,020 --> 00:18:20,588
So the situation now with Falco is

280
00:18:20,674 --> 00:18:24,008
we have the EBPF probes for these discord collections, we have

281
00:18:24,034 --> 00:18:26,668
the plugins for the events collections,

282
00:18:26,844 --> 00:18:30,320
Falco and its rule engine, and to manage

283
00:18:30,390 --> 00:18:34,256
the plugins and the lifecycles of the plugins and of

284
00:18:34,278 --> 00:18:37,888
the rules we introduced a few months ago,

285
00:18:38,054 --> 00:18:40,960
a tool called Falco CTl, Falco Kotle.

286
00:18:41,400 --> 00:18:45,076
Basically it will install plugins and rules and it

287
00:18:45,098 --> 00:18:48,592
will also track new versions of the rules to automatically

288
00:18:48,656 --> 00:18:53,188
download them and reload Falco. So your cluster, your Falco

289
00:18:53,284 --> 00:18:56,490
fleet will always be up to date.

290
00:18:58,780 --> 00:19:02,216
So another few of the architectures basically

291
00:19:02,318 --> 00:19:06,156
same idea, that behind it. And once again the plugins are

292
00:19:06,178 --> 00:19:09,436
running in user space, so without any

293
00:19:09,538 --> 00:19:12,940
big privileges, once again for security purpose,

294
00:19:14,180 --> 00:19:15,490
time for a demo.

295
00:19:17,860 --> 00:19:21,376
So in this demo cluster I have

296
00:19:21,398 --> 00:19:25,184
two nodes and like I said, falco relies on

297
00:19:25,222 --> 00:19:28,752
kernel. So two nodes means two Falco

298
00:19:28,816 --> 00:19:29,620
pods.

299
00:19:32,760 --> 00:19:35,972
Basically they are deployed as a demon set to have one

300
00:19:36,026 --> 00:19:38,390
Falco planet. It's quite obvious.

301
00:19:39,660 --> 00:19:43,256
I also install Falco psychic, Falco psychic drive the

302
00:19:43,278 --> 00:19:46,516
front end and Falco psychic drive the storage

303
00:19:46,548 --> 00:19:49,812
backend is a radius and another deployment

304
00:19:49,956 --> 00:19:52,856
of Falco with the Eks plugin.

305
00:19:52,968 --> 00:19:56,444
So imagine you

306
00:19:56,482 --> 00:19:59,704
have this pod is your critical

307
00:19:59,752 --> 00:20:01,740
application. It can be WordPress,

308
00:20:03,280 --> 00:20:06,732
Drupal, anything you can run and

309
00:20:06,786 --> 00:20:10,956
exposed to Internet. So an attacker gain

310
00:20:10,988 --> 00:20:14,370
access to this docker, to this customer.

311
00:20:25,880 --> 00:20:29,584
As you can see, when I created

312
00:20:29,632 --> 00:20:33,584
my shell, it has been detected immediately. So we have the priority,

313
00:20:33,712 --> 00:20:37,636
we have the exact output message with the

314
00:20:37,658 --> 00:20:41,520
user root, the namespace default,

315
00:20:41,680 --> 00:20:45,352
the pod name, even the containers id and

316
00:20:45,406 --> 00:20:48,792
what shell has been used and what command line has been used

317
00:20:48,846 --> 00:20:52,844
to start the shell. All these elements are there also as

318
00:20:52,882 --> 00:20:56,408
output fields. They are used by Falco, Falco psychic

319
00:20:56,424 --> 00:20:59,904
for routine. So now I will

320
00:20:59,942 --> 00:21:04,224
add curl can

321
00:21:04,262 --> 00:21:07,984
see it's automatically detected in

322
00:21:08,022 --> 00:21:11,228
real time once again thanks to EBPF. So right now it's

323
00:21:11,244 --> 00:21:14,328
an error with packet management process launched

324
00:21:14,364 --> 00:21:18,176
the containers and once again the user the exact command

325
00:21:18,208 --> 00:21:24,004
that has been run and

326
00:21:24,042 --> 00:21:27,604
the containers name is there, the images,

327
00:21:27,652 --> 00:21:31,370
everything. So we'll try to reach

328
00:21:32,140 --> 00:21:47,522
the Kubernetes API. Now thankfully

329
00:21:47,586 --> 00:21:50,434
in that situation the API is protected,

330
00:21:50,482 --> 00:21:52,838
but at least we have detected it.

331
00:21:53,004 --> 00:21:56,914
Unexpected connection to Kubernetes API server from a containers

332
00:21:57,042 --> 00:22:00,986
we have the exact command once

333
00:22:01,008 --> 00:22:03,500
again the namespace as a pond name.

334
00:22:07,630 --> 00:22:11,446
Imagine overriding a critical

335
00:22:11,638 --> 00:22:12,490
file.

336
00:22:19,570 --> 00:22:24,226
Five below OTC has been opened for writing and

337
00:22:24,408 --> 00:22:27,794
we have once again all elements got

338
00:22:27,832 --> 00:22:30,830
the name, image, the pod,

339
00:22:30,910 --> 00:22:33,960
et cetera. And if we take a look,

340
00:22:34,410 --> 00:22:35,990
Sci-Fi cosychic.

341
00:22:44,650 --> 00:22:48,058
So we have all

342
00:22:48,144 --> 00:22:50,860
things that happened in the last five minutes,

343
00:22:51,710 --> 00:22:55,258
15 minutes. We have the

344
00:22:55,344 --> 00:22:58,662
pie charts, statistics, but the policies, the tags,

345
00:22:58,726 --> 00:23:01,870
the source. We can filter on the source,

346
00:23:04,290 --> 00:23:07,726
we see what I did and if we want more

347
00:23:07,748 --> 00:23:10,320
details there.

348
00:23:10,850 --> 00:23:14,446
Right now we also have terminal shell in

349
00:23:14,468 --> 00:23:18,402
a containers. It's exactly what we saw in the logs, but in a more

350
00:23:18,456 --> 00:23:22,226
formatted and nicer way. With the tags we

351
00:23:22,248 --> 00:23:26,150
can filter for example other namespace.

352
00:23:29,130 --> 00:23:33,142
Then we have the installation of girl, the attempt to reach

353
00:23:33,196 --> 00:23:37,174
Kubernetes API and the override

354
00:23:37,222 --> 00:23:41,018
of the file. Everything is there. And we also have text to the

355
00:23:41,104 --> 00:23:42,620
communities audit log.

356
00:23:48,700 --> 00:23:54,228
We have the details about someone attached

357
00:23:54,244 --> 00:23:57,808
to attack or executing

358
00:23:57,844 --> 00:24:01,980
something into a pod. We have all these details.

359
00:24:02,720 --> 00:24:05,988
In a real world it will be a web shell

360
00:24:06,024 --> 00:24:10,240
or else. But in my example, like I did an exec,

361
00:24:10,660 --> 00:24:15,056
we can detect it. And once again we have the

362
00:24:15,078 --> 00:24:18,530
target name, the pod name, the data, the namespace. And so

363
00:24:23,510 --> 00:24:27,394
if you want to start with Falco, the easiest way

364
00:24:27,432 --> 00:24:30,658
to install and start with Falco is to use the official

365
00:24:30,754 --> 00:24:34,710
m chart. By setting these

366
00:24:34,860 --> 00:24:39,074
values you will install Falco Falco

367
00:24:39,122 --> 00:24:43,074
psychic Falco psychic UI and use EBPF

368
00:24:43,122 --> 00:24:46,086
prop in namespace called Falco.

369
00:24:46,198 --> 00:24:49,994
In less than two minutes everything will be set on

370
00:24:50,032 --> 00:24:53,546
and running and you will be able to access to

371
00:24:53,568 --> 00:24:56,694
the web UI with a powerwall.

372
00:24:56,822 --> 00:25:00,182
If you want to contribute or know more about Falco,

373
00:25:00,326 --> 00:25:03,526
you can join us in our Falco Slack

374
00:25:03,558 --> 00:25:07,620
channel. You can take a look at our new website.

375
00:25:08,150 --> 00:25:12,100
A total revamp has been made in the last month, so we hope

376
00:25:12,550 --> 00:25:16,322
it's better for everybody and we also on

377
00:25:16,376 --> 00:25:20,178
GitHub. Thank you and

378
00:25:20,264 --> 00:25:20,880
have a good day.

