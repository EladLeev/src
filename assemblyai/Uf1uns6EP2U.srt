1
00:01:28,290 --> 00:01:31,478
Hey everyone, I'm Roy, team leader at Firefly. And today I'm going to talk to

2
00:01:31,484 --> 00:01:35,106
you about the AWS CDK and what does it mean for the world of infrastructure

3
00:01:35,138 --> 00:01:39,202
as code? So as I said, as a team leader in Firefly,

4
00:01:39,266 --> 00:01:43,482
what we do is basically look at your entire cloud footprint, or kubernetes

5
00:01:43,546 --> 00:01:46,846
clusters. We fetch them into our console and we

6
00:01:46,868 --> 00:01:50,586
show you on the other end your entire infrastructure as code footprint, whether it's

7
00:01:50,618 --> 00:01:53,694
terraform, Pulumi, cloudformation, CDK of course,

8
00:01:53,732 --> 00:01:57,626
and even helm. In the world of kubernetes, we track them

9
00:01:57,668 --> 00:02:01,406
both together and we show your entire cloud footprint in the means of your infrastructure

10
00:02:01,438 --> 00:02:04,894
as code. We can detect drift in real time and we can help you codify

11
00:02:04,942 --> 00:02:08,580
them back to infrastructure as code in any language you can think of.

12
00:02:08,950 --> 00:02:12,498
AWS part of me working at Firefly. As you can see, I'm very enthusiastic

13
00:02:12,514 --> 00:02:15,938
about Yak. And when I was in the last reinvent,

14
00:02:16,034 --> 00:02:19,846
I saw a huge hype about the CDk tool of AWS and

15
00:02:19,868 --> 00:02:23,862
got into it a bit. So basically at reinvent,

16
00:02:24,006 --> 00:02:28,230
all of the guys coming into our boot estate about the AWS CDK

17
00:02:28,310 --> 00:02:31,942
and how can they use it and how do they start even using CDK

18
00:02:32,006 --> 00:02:35,646
instead of cloudformation or even any other infrastructure AWS code you can

19
00:02:35,668 --> 00:02:39,134
think of. I started searching about it and

20
00:02:39,172 --> 00:02:42,730
saw that CDK is basically a very cool tool that AWS

21
00:02:42,810 --> 00:02:46,562
brought us, and we can migrate our cloudformation very

22
00:02:46,616 --> 00:02:50,286
quickly into CDK and even start new projects in CDK

23
00:02:50,398 --> 00:02:53,634
in a heartbeat. So as you can

24
00:02:53,672 --> 00:02:57,430
see, CDK is basically more of a concept than an AWS tool.

25
00:02:57,500 --> 00:03:01,446
It means cloud development kit and this means that each

26
00:03:01,548 --> 00:03:04,326
infrastructure code tool that is written in code,

27
00:03:04,428 --> 00:03:06,898
whether it's Python,

28
00:03:06,994 --> 00:03:10,530
go typescript and even node JS,

29
00:03:10,690 --> 00:03:14,246
and not written in configuration language such as Yaml's,

30
00:03:14,278 --> 00:03:17,430
JSON and etc, is a cloud development kit.

31
00:03:17,510 --> 00:03:21,366
The AWS CDK is an implementation of AWS to

32
00:03:21,408 --> 00:03:25,066
this concept and is going to be the successor of cloud formation

33
00:03:25,258 --> 00:03:28,954
in AWS. They created it originally and native

34
00:03:29,002 --> 00:03:32,586
to the AWS experience. So using the AWS CDK is

35
00:03:32,628 --> 00:03:36,850
a very comfortable experience when you're deployments into AWS resources.

36
00:03:37,590 --> 00:03:42,100
Also, you can use any

37
00:03:42,630 --> 00:03:46,834
coding language you can think of, whether it's typescript, which is originally created

38
00:03:46,882 --> 00:03:50,674
in, or Golden Python node JS and moro

39
00:03:50,722 --> 00:03:54,374
tools are on the way. So how

40
00:03:54,412 --> 00:03:58,294
does AWS CDK works and what is it different from the cloud formation?

41
00:03:58,422 --> 00:04:02,694
So as you can see, CDK is basically written

42
00:04:02,742 --> 00:04:06,230
over the cloud formation and it uses the cloudformation stacks

43
00:04:06,310 --> 00:04:10,326
to deploy your code into the AWS resources.

44
00:04:10,518 --> 00:04:14,046
Basically, you can use any language you can think of, as we already said,

45
00:04:14,148 --> 00:04:18,046
and then you create constructs, you create your AWS resources in code.

46
00:04:18,148 --> 00:04:22,046
You can create any resource of

47
00:04:22,068 --> 00:04:25,354
AWS that you were able to create with cloudformation

48
00:04:25,482 --> 00:04:28,962
through the CDK code. And after creating the

49
00:04:29,016 --> 00:04:32,894
CDK project, let's call it, you can just create CDK,

50
00:04:32,942 --> 00:04:36,482
synth and deploy. And you create your resources

51
00:04:36,546 --> 00:04:39,958
on your AWS cloud through

52
00:04:40,044 --> 00:04:43,382
cloud formation stacks, as you can see in the map over here.

53
00:04:43,436 --> 00:04:47,314
So first of all, you do the CDk sync command.

54
00:04:47,362 --> 00:04:50,520
It's basically planning your code into

55
00:04:51,550 --> 00:04:55,002
state file that is going to be created on your cloud.

56
00:04:55,056 --> 00:04:58,474
And after running the command CDk deploy the

57
00:04:58,512 --> 00:05:01,630
command, will create the resources on your cloud,

58
00:05:01,780 --> 00:05:05,582
will save the state file on s three bucket on your cloud,

59
00:05:05,716 --> 00:05:09,146
and also create the cloudformation stacks that was deploying

60
00:05:09,178 --> 00:05:10,880
your resources on the cloud.

61
00:05:14,630 --> 00:05:17,922
If that's the case, then who should use CDK and when?

62
00:05:18,056 --> 00:05:22,382
So basically, first of all, all cloudformation users should use CDK.

63
00:05:22,526 --> 00:05:25,934
Why? Because it's super easy to migrate into CDK.

64
00:05:26,062 --> 00:05:29,906
It's natively AWS such as cloudformation, and it's

65
00:05:29,938 --> 00:05:33,714
also super comfortable to work in. If you're even working with Stackset

66
00:05:33,762 --> 00:05:37,478
or deploying into multi regions, Cloudformation won't be able to

67
00:05:37,484 --> 00:05:41,478
do it. And you'll need to use Stackset, which is like patch over cloudformation,

68
00:05:41,574 --> 00:05:45,142
to create stacks in multiple regions. In CDK,

69
00:05:45,206 --> 00:05:49,162
it's natively written because it's just code, and you can create models to

70
00:05:49,216 --> 00:05:52,666
deploy in each region out of the stack that you already created

71
00:05:52,698 --> 00:05:56,426
in CDK. Even more than that, AWS oriented

72
00:05:56,458 --> 00:06:00,346
DevOps and SRE teams will be much like to use the CDK,

73
00:06:00,458 --> 00:06:03,934
even if they're not using cloudformation at the moment. Doing it with

74
00:06:03,972 --> 00:06:07,838
any other languages such as terraform or even Pulumi.

75
00:06:07,934 --> 00:06:11,454
Moving to CDK is going to be a native experience for AWS

76
00:06:11,502 --> 00:06:14,418
users, so it's also a good idea to work with.

77
00:06:14,584 --> 00:06:18,286
And lastly, any other enthusiast

78
00:06:18,318 --> 00:06:21,926
of infrastructure AWS code can start working with CDK, create some projects and

79
00:06:21,948 --> 00:06:25,558
see if it's fun to play with. I guarantee a very good experience

80
00:06:25,644 --> 00:06:29,074
out of it when. So if you're

81
00:06:29,122 --> 00:06:32,742
already using any cloudformation projects,

82
00:06:32,806 --> 00:06:37,030
then you should use CDK right away. As I said, super easy migration

83
00:06:37,110 --> 00:06:40,474
and you can just start playing with CDK. Do it much easier than

84
00:06:40,512 --> 00:06:43,954
creating the messy yamls or JSons of Cloudformation,

85
00:06:44,102 --> 00:06:46,720
and you'll see the difference right away.

86
00:06:48,050 --> 00:06:51,550
Another time to start is if you start a

87
00:06:51,620 --> 00:06:55,486
new infrastructure called Project and you think about the

88
00:06:55,508 --> 00:06:59,026
tool to work with, if it's going to be on AWS, then it's sure to

89
00:06:59,048 --> 00:07:02,194
have with CDK. So let's talk

90
00:07:02,232 --> 00:07:05,686
a bit about the pros and cons of AWS CDK. So as

91
00:07:05,708 --> 00:07:09,698
I said, the pros are pretty much straightforward. It supports

92
00:07:09,714 --> 00:07:13,686
multiple languages if it's typescript that it's originally created in

93
00:07:13,788 --> 00:07:16,950
JavaScript, Python, Java Net and even

94
00:07:17,020 --> 00:07:20,714
Golang. Also, it doesn't require any

95
00:07:20,752 --> 00:07:24,086
DSL or config such as JSon or YAMls.

96
00:07:24,198 --> 00:07:27,114
You can create complex yak projects with it. As you know,

97
00:07:27,152 --> 00:07:30,746
cloud formation is super messy code to write, and if

98
00:07:30,768 --> 00:07:34,706
you're going to create a big project, it's going to be a hell. The dependencies

99
00:07:34,758 --> 00:07:37,882
are going to be huge, and if you're creating links between assets,

100
00:07:37,946 --> 00:07:40,510
it's not going to work or it's going to be a hell for you to

101
00:07:40,580 --> 00:07:44,506
maintain and develop. Also, as I said, the multi region operations,

102
00:07:44,618 --> 00:07:47,966
you don't need to use taxit, you can just create any models you wish

103
00:07:47,998 --> 00:07:51,886
and you'll do it on any region you want. And also lastly,

104
00:07:51,918 --> 00:07:55,218
it's AWS oriented. So basically it's going

105
00:07:55,224 --> 00:07:58,646
to be the best experience on AWS cloud if you're going to do infrastructure as

106
00:07:58,668 --> 00:08:02,450
code at all. Also, if you're using any other CDK,

107
00:08:02,530 --> 00:08:06,226
as I said, if the concept is not AWS invention such as CDK

108
00:08:06,258 --> 00:08:09,994
for terraform or CDK for kubernetes, then other

109
00:08:10,032 --> 00:08:13,420
CDK is going to match better for you and not the AWS one.

110
00:08:14,270 --> 00:08:17,914
So let's see some code. As you can see here,

111
00:08:18,032 --> 00:08:21,622
I have two files. One defines a

112
00:08:21,696 --> 00:08:25,194
CDK stack, creates an S three bucket

113
00:08:25,242 --> 00:08:29,134
and an SQS queue out of a new resources that you can see

114
00:08:29,172 --> 00:08:32,458
on your code. And the last resource

115
00:08:32,554 --> 00:08:35,938
is a cloud formation import. I basically already have a

116
00:08:35,944 --> 00:08:39,214
cloud formation as you can see on the others window that defines

117
00:08:39,262 --> 00:08:42,754
an EC two instance. And by migrating all

118
00:08:42,792 --> 00:08:46,302
the AML of the cloud formation into this stack, I will basically

119
00:08:46,376 --> 00:08:50,066
have the CDK in this CDK stack.

120
00:08:50,178 --> 00:08:54,102
And in heartbeat I just imported the entire cloudformation into

121
00:08:54,156 --> 00:08:57,746
CDK and it's just easy as that. You can take huge examples

122
00:08:57,778 --> 00:09:01,834
of yamls or JSON's cloudformation, you can just import them into CDK and

123
00:09:01,872 --> 00:09:05,322
in heartbeat you will be migrated and you can just keep on working

124
00:09:05,376 --> 00:09:08,700
with CDK instead of cloudformation, which is basically amazing.

125
00:09:10,130 --> 00:09:13,594
Also, as you can see here, after clicking

126
00:09:13,642 --> 00:09:17,034
synth and deploy, I deployed my CDK

127
00:09:17,082 --> 00:09:20,682
stack into AWS through a cloud formation stack.

128
00:09:20,826 --> 00:09:24,242
I also have my state files in an S three bucket and these

129
00:09:24,296 --> 00:09:27,614
two stacks were created out of the deploy. The first one, the CDK

130
00:09:27,662 --> 00:09:31,234
toolkit, is code stack that

131
00:09:31,272 --> 00:09:35,134
is creating the necessary resources on your AWS,

132
00:09:35,182 --> 00:09:38,486
such as the bucket the state file is going to be saved in. And the

133
00:09:38,508 --> 00:09:42,242
other stack here is my CDK deploy

134
00:09:42,386 --> 00:09:45,718
that I ran and as you can see, I created a

135
00:09:45,804 --> 00:09:49,874
bucket, an SQS, and also the migrated cloud

136
00:09:49,932 --> 00:09:53,510
formation which is now supported in my new CDK stack

137
00:09:53,590 --> 00:09:57,434
and AWS. You can see it's defining an EC two instance straight out of

138
00:09:57,472 --> 00:10:01,562
my CDK call, even though it was created on Cloudformation,

139
00:10:01,626 --> 00:10:02,480
which is amazing.

140
00:10:04,930 --> 00:10:08,798
So this was my lecture, and now I want to talk to you about two

141
00:10:08,884 --> 00:10:12,254
important key takeaways that I wish to pass on.

142
00:10:12,372 --> 00:10:15,554
So the first one, CDK, is a rising technology.

143
00:10:15,672 --> 00:10:18,686
It's still in its few first steps,

144
00:10:18,718 --> 00:10:21,922
and it's probably going to get much bigger in the next few months.

145
00:10:22,056 --> 00:10:25,694
I absolutely recommend you to use the CDK now

146
00:10:25,752 --> 00:10:29,526
instead of later on. Migrate your project and make your

147
00:10:29,548 --> 00:10:33,366
life much better when using AWS, CDK and the

148
00:10:33,388 --> 00:10:37,560
other one. If you're a cloudformation user, then you're even more

149
00:10:38,890 --> 00:10:42,182
recommended to go into CDK and start working with it

150
00:10:42,236 --> 00:10:45,846
and you'll see the magic happens in few

151
00:10:46,028 --> 00:10:49,774
minor steps. Thank you everyone

152
00:10:49,932 --> 00:10:53,214
with Roy. I'd like to keep in touch for any

153
00:10:53,252 --> 00:10:56,366
questions you have. You can see my mail here. So thank you so much and

154
00:10:56,388 --> 00:10:57,438
have an amazing day.

