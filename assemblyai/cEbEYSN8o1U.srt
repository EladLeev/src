1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:10,618
time feedback into the behavior of your distributed systems and observing

3
00:00:10,714 --> 00:00:14,538
changes exceptions errors in real time allows

4
00:00:14,554 --> 00:00:18,858
you to not only experiment with confidence, but respond instantly

5
00:00:18,954 --> 00:00:20,480
to get things working again.

6
00:00:24,610 --> 00:00:47,254
Close hey

7
00:00:47,292 --> 00:00:50,762
everybody, it's Travis Waithmair, and today I'm going to be giving you an intro

8
00:00:50,816 --> 00:00:54,240
to SolidJs for react developers or anyone else.

9
00:00:54,770 --> 00:00:58,030
Now quickly, a little bit about me. I'm Travis Waithmair.

10
00:00:59,330 --> 00:01:02,702
I'm at Twitter travis waithmair in camel case

11
00:01:02,756 --> 00:01:05,600
and I have a blog at nontraditional dev.

12
00:01:06,290 --> 00:01:09,394
I work for plaques and I also

13
00:01:09,432 --> 00:01:13,970
am the creator of the bedrock Layout primitive library that is

14
00:01:14,120 --> 00:01:17,586
originally written in react, but also has a port over in

15
00:01:17,608 --> 00:01:18,690
solid JS.

16
00:01:21,450 --> 00:01:25,458
Now Solid JS has a very familiar

17
00:01:25,554 --> 00:01:29,714
API to react. In fact, anyone who's written a react app,

18
00:01:29,852 --> 00:01:33,242
just looking at this code with no explanation probably

19
00:01:33,296 --> 00:01:36,986
can figure out what's going on. It's pretty easy. And that's because of

20
00:01:37,008 --> 00:01:40,750
that very familiar API that it has from reactjs.

21
00:01:41,730 --> 00:01:45,562
Because for one thing, SolidJs uses JSX,

22
00:01:45,706 --> 00:01:48,926
it uses components and it uses props. And all

23
00:01:48,948 --> 00:01:52,254
of it is very similar to the way react does. In fact,

24
00:01:52,292 --> 00:01:56,210
if you look at this very simple component, very contrived component,

25
00:01:57,190 --> 00:02:00,626
you wouldn't know if this is a solid component or a

26
00:02:00,648 --> 00:02:03,540
react component because it works either way.

27
00:02:06,570 --> 00:02:10,642
These also has solid

28
00:02:10,706 --> 00:02:14,850
also has an API that's very familiar to hooks.

29
00:02:15,010 --> 00:02:18,678
So it has a bunch of these reactive primitives.

30
00:02:18,774 --> 00:02:22,746
And if we look here, this create signal looks very

31
00:02:22,768 --> 00:02:26,602
much like a use state. Create effect feels very much like use

32
00:02:26,656 --> 00:02:29,846
state. And so that very familiar

33
00:02:29,878 --> 00:02:33,790
API that you have in react translates very well over into solidjs.

34
00:02:34,850 --> 00:02:38,254
Now before we go on, I do want to emphasize that solid is not

35
00:02:38,292 --> 00:02:41,600
a drop in replacement for react. You cannot just

36
00:02:41,970 --> 00:02:46,082
import from solid instead of react like

37
00:02:46,216 --> 00:02:49,954
other frameworks, for example preact. But you

38
00:02:49,992 --> 00:02:53,454
can take a lot of that familiarity and intuition

39
00:02:53,502 --> 00:02:57,430
that you've learned from react and hit the ground running in solid.

40
00:02:59,130 --> 00:03:02,454
What makes SolidJs different than

41
00:03:02,492 --> 00:03:06,054
react is how it's built under the hood. And the

42
00:03:06,092 --> 00:03:09,866
biggest thing is it's built on reactivity instead of the

43
00:03:09,888 --> 00:03:11,050
virtual dom.

44
00:03:12,990 --> 00:03:17,050
See, the reactjs virtual Dom, if you're not already aware,

45
00:03:17,630 --> 00:03:21,338
works something like this. This is a very simplified version, but it

46
00:03:21,424 --> 00:03:24,538
effectively works like this. You have components,

47
00:03:24,714 --> 00:03:28,426
something changes state in any of those components, it gets flagged

48
00:03:28,458 --> 00:03:32,762
by the virtual dom that it needs to change, and then eventually it rerenders

49
00:03:32,906 --> 00:03:37,170
the whole time. All that happens. The browser dom is only impacted

50
00:03:37,510 --> 00:03:40,782
at the actual rendering stage. This is where react tries

51
00:03:40,926 --> 00:03:44,754
to be efficient, because it can do more and

52
00:03:44,792 --> 00:03:48,386
do more quickly in memory with a virtual dom,

53
00:03:48,498 --> 00:03:52,022
and then only change the actual dom when it actually needs

54
00:03:52,076 --> 00:03:52,680
to.

55
00:03:54,730 --> 00:03:58,418
SolidJs, on the other hand, doesn't have

56
00:03:58,444 --> 00:04:02,534
a virtual dom. It instead will surgically update

57
00:04:02,582 --> 00:04:05,990
only those parts of the apps that are dependent on the reactive values.

58
00:04:06,070 --> 00:04:09,938
And when those reactive values change, it will surgically

59
00:04:10,054 --> 00:04:13,086
go in and update that. Well,

60
00:04:13,108 --> 00:04:15,934
how does it do that? What's the magic? Well,

61
00:04:15,972 --> 00:04:19,934
SolidJs is a compiled framework which,

62
00:04:20,052 --> 00:04:23,342
let's be honest, everything is a compiled framework. Nowadays,

63
00:04:23,406 --> 00:04:27,214
even react. You're not actually technically writing JSX,

64
00:04:27,342 --> 00:04:31,086
you're compiling that to react,

65
00:04:31,278 --> 00:04:34,834
create element calls. But it's in that

66
00:04:34,872 --> 00:04:38,770
transpolation that with their fine grained

67
00:04:39,110 --> 00:04:42,546
reactive primitives, that solid js will do all that wiring

68
00:04:42,578 --> 00:04:45,734
up for you. So you just write the code how you

69
00:04:45,772 --> 00:04:49,942
want. That feels very pragmatic, very intuitive,

70
00:04:50,086 --> 00:04:53,546
and solidjs under the hood when it gets transpiled, will do

71
00:04:53,568 --> 00:04:55,260
all that wiring up for you.

72
00:04:57,390 --> 00:05:00,990
See, in solidjs it's all about the primitives.

73
00:05:01,410 --> 00:05:04,894
There are components in solid, but they're not the foundation like

74
00:05:04,932 --> 00:05:08,350
they are in other frameworks. In fact,

75
00:05:08,500 --> 00:05:12,678
with solid the component actually disappears.

76
00:05:12,794 --> 00:05:16,900
Your component only renders once and then it never renders again.

77
00:05:18,070 --> 00:05:21,214
It's the finegrained reactive primitives that solidjs

78
00:05:21,262 --> 00:05:24,180
is built on that make everything happen.

79
00:05:24,550 --> 00:05:28,454
And in fact, everything in solidjs can be broken down into

80
00:05:28,652 --> 00:05:32,482
one of three primitives. It's either a signal, a memo,

81
00:05:32,546 --> 00:05:36,230
or an effect. A signal

82
00:05:36,730 --> 00:05:40,058
is simply but and easy to

83
00:05:40,144 --> 00:05:43,260
think about is a function that returns a value.

84
00:05:44,510 --> 00:05:47,706
So when we use create signal, we get a

85
00:05:47,728 --> 00:05:51,820
signal and a setter for that signal, and then

86
00:05:53,090 --> 00:05:57,246
we get the value just by calling the function. And these,

87
00:05:57,348 --> 00:06:00,494
if we want to set it, we would call the set count function. In this

88
00:06:00,532 --> 00:06:04,046
example, effects,

89
00:06:04,078 --> 00:06:08,146
on the other hand, allow us to do effects based on

90
00:06:08,168 --> 00:06:11,746
those signals and when they update. And so in here

91
00:06:11,768 --> 00:06:15,782
we're updating the document title to whatever the current count

92
00:06:15,836 --> 00:06:19,042
is, and now you'll notice coming from react,

93
00:06:19,106 --> 00:06:22,502
you're going where is that dependency array? Well, there's none needed,

94
00:06:22,636 --> 00:06:27,346
because that create effect already knows to rerun only

95
00:06:27,468 --> 00:06:30,490
if the count signal is updated.

96
00:06:32,350 --> 00:06:35,882
And then memos are kind of an amalgam of both

97
00:06:35,936 --> 00:06:39,420
an effect and a signal. See,

98
00:06:39,790 --> 00:06:43,306
it will only rerun if any of those signals

99
00:06:43,498 --> 00:06:46,430
that it depends on actually update.

100
00:06:47,490 --> 00:06:51,198
And then it returns a signal itself that you have to call

101
00:06:51,364 --> 00:06:55,010
to get the value. So obviously these

102
00:06:55,080 --> 00:06:58,334
memos by its name work best for expensive calculation.

103
00:06:58,462 --> 00:07:01,698
And you'll notice, just like the create effect,

104
00:07:01,864 --> 00:07:03,810
no dependency array.

105
00:07:05,910 --> 00:07:09,478
So let's just go through these simple counter function. We have a

106
00:07:09,484 --> 00:07:13,110
create signal at the beginning we have count, set count.

107
00:07:13,260 --> 00:07:16,806
We have an effect that will update the

108
00:07:16,828 --> 00:07:21,290
document title whenever the count is updated. And then we have some JSX.

109
00:07:21,630 --> 00:07:25,034
One is a paragraph that will tell us what the current

110
00:07:25,072 --> 00:07:28,154
count is, and a button that when we click it

111
00:07:28,272 --> 00:07:31,882
will increment. The counter once again

112
00:07:31,936 --> 00:07:34,990
feels very familiar to the way we built things with react.

113
00:07:35,650 --> 00:07:39,502
The cool thing though is that every time we hit that set

114
00:07:39,556 --> 00:07:43,682
count, we don't rerun this entire counter function.

115
00:07:43,816 --> 00:07:47,554
The only thing that gets updated is that effect reruns, and then

116
00:07:47,592 --> 00:07:50,958
that paragraph JSX reupdates

117
00:07:51,134 --> 00:07:54,642
and that's it. Nothing else is even

118
00:07:54,696 --> 00:07:55,490
touched.

119
00:07:59,450 --> 00:08:02,966
Primitives don't follow the rules of

120
00:08:02,988 --> 00:08:07,014
react because components are

121
00:08:07,052 --> 00:08:10,394
only ever run once and never run again. There's nothing to

122
00:08:10,432 --> 00:08:14,410
say that we can't conditionally call an effect.

123
00:08:14,560 --> 00:08:20,650
We can't conditionally call a primitive

124
00:08:20,990 --> 00:08:24,206
in a hook to do any of these stuff that I'm doing here. In this

125
00:08:24,228 --> 00:08:28,110
example, if we were doing this in react, these would break your app,

126
00:08:28,260 --> 00:08:31,566
but with solid these is

127
00:08:31,588 --> 00:08:35,102
totally fine. And in fact, you notice that the signal

128
00:08:35,166 --> 00:08:38,514
we pulled out of the component and

129
00:08:38,552 --> 00:08:42,194
brought it into a more global area of

130
00:08:42,232 --> 00:08:47,350
the module. This is a very common way to create a

131
00:08:47,500 --> 00:08:51,122
global state. You just pull the signal out of the component

132
00:08:51,266 --> 00:08:55,366
and now it's available to be imported into

133
00:08:55,468 --> 00:08:59,226
any component, and those components will both be

134
00:08:59,328 --> 00:09:03,050
kept in sync because they're dependent on the same signal.

135
00:09:04,830 --> 00:09:08,554
Now it's important to note that

136
00:09:08,592 --> 00:09:12,654
even though this is a common way to update state to have global state,

137
00:09:12,772 --> 00:09:16,650
there are more complicated ones that handle more sophisticated

138
00:09:16,810 --> 00:09:20,794
use cases. And all of that's available in the API,

139
00:09:20,842 --> 00:09:22,510
in the docs at solidjs.

140
00:09:25,030 --> 00:09:28,786
Now there are gotchas if

141
00:09:28,808 --> 00:09:32,946
you're coming from react if you're a react developers. And I

142
00:09:32,968 --> 00:09:36,466
like to use this example when explaining that as an english

143
00:09:36,498 --> 00:09:39,350
speaker, Spanish has a lot of false friends.

144
00:09:39,500 --> 00:09:43,430
For example, the word university in Spanish is universidad.

145
00:09:43,930 --> 00:09:48,150
In English we have the word president, and in Spanish it's presidente.

146
00:09:48,670 --> 00:09:51,370
And in English we have the word embarrassed.

147
00:09:52,270 --> 00:09:55,786
So we might think the word for embarrassed in

148
00:09:55,808 --> 00:09:59,642
Spanish is embeddesada. But any of my spanish speaking friends

149
00:09:59,696 --> 00:10:03,210
who are listening to this would know embedasada means pregnant,

150
00:10:03,370 --> 00:10:07,390
not embarrassed. So sometimes familiarity

151
00:10:07,810 --> 00:10:11,066
will create us a false sense of confidence

152
00:10:11,098 --> 00:10:14,866
and will break things if we're not aware. So just in

153
00:10:14,888 --> 00:10:19,090
the same way, solid has its false friends for react developers.

154
00:10:19,510 --> 00:10:22,340
So let's look at one of the most common ones.

155
00:10:24,550 --> 00:10:27,694
Don't return early in solidjs components.

156
00:10:27,822 --> 00:10:31,734
Remember, Solidjs has only runs these components once,

157
00:10:31,852 --> 00:10:33,560
and if you return early,

158
00:10:35,210 --> 00:10:38,314
the rest of that component is

159
00:10:38,352 --> 00:10:42,074
never run. And hence the reactivity and all that

160
00:10:42,112 --> 00:10:45,210
stuff that happens under hood never happens. And therefore,

161
00:10:45,950 --> 00:10:49,318
even though that prompts that data gets updated,

162
00:10:49,494 --> 00:10:53,006
we never actually get that reactivity and go on

163
00:10:53,028 --> 00:10:56,350
to the rest of the component, because the component never reruns.

164
00:10:57,330 --> 00:11:00,346
So what you want to use instead are control flow components.

165
00:11:00,378 --> 00:11:04,242
SolidJs has several control flow components to help us

166
00:11:04,376 --> 00:11:09,522
do the things that we normally would have done otherwise in react without

167
00:11:09,576 --> 00:11:13,038
breaking reactivity. In this example we're using show that when props

168
00:11:13,134 --> 00:11:16,614
data exists, it will show

169
00:11:16,652 --> 00:11:20,310
its children and then it has a fallback in case it doesn't.

170
00:11:21,130 --> 00:11:25,014
And there are control flow components like switch for air boundaries and

171
00:11:25,052 --> 00:11:28,774
suspense. Now another thing

172
00:11:28,812 --> 00:11:33,010
you don't want to do inside a solidjs component is do logic

173
00:11:33,090 --> 00:11:36,230
outside of the reactive primitives or outside

174
00:11:36,380 --> 00:11:39,998
of JSX. You can always do

175
00:11:40,044 --> 00:11:43,390
do logic inside of an effect,

176
00:11:43,460 --> 00:11:47,534
a memo or any other primitives or JSX and

177
00:11:47,572 --> 00:11:51,374
it works great. But as soon as you do it outside of

178
00:11:51,412 --> 00:11:55,762
that such, in this example, we're deriving a double count value from

179
00:11:55,816 --> 00:11:59,854
our count signal. That value gets lost

180
00:11:59,982 --> 00:12:03,102
in the scheme of things, that wiring up of reactivity

181
00:12:03,166 --> 00:12:06,798
never happens. So what we want to do, we can

182
00:12:06,824 --> 00:12:10,040
drive the value, for example in a function, if we put it in a function,

183
00:12:10,490 --> 00:12:11,720
these the function,

184
00:12:13,690 --> 00:12:17,694
since it's ultimately called in the JSX, in this example, that reactivity

185
00:12:17,762 --> 00:12:19,500
still gets wired up just fine.

186
00:12:22,190 --> 00:12:25,418
Or better yet, if you can, if it makes sense,

187
00:12:25,504 --> 00:12:27,850
just put it right into the JSX.

188
00:12:29,230 --> 00:12:30,880
And that also works.

189
00:12:32,450 --> 00:12:36,062
Now this is a big one that happens pretty much to every new

190
00:12:36,116 --> 00:12:39,146
react developer when they come into solidjs.

191
00:12:39,258 --> 00:12:43,166
And that's because it is common in react to destructure,

192
00:12:43,198 --> 00:12:47,102
your props either directly in the component signature

193
00:12:47,246 --> 00:12:50,546
or immediately react right after.

194
00:12:50,728 --> 00:12:54,162
And both of these are no no's and you might go,

195
00:12:54,216 --> 00:12:57,090
why does that break reactivity?

196
00:12:57,910 --> 00:13:01,254
Well, if you think about it, prop values could be

197
00:13:01,292 --> 00:13:04,422
reactive. And I'm going to give you a little peek under the hood of what

198
00:13:04,476 --> 00:13:08,374
happens when your prompts do

199
00:13:08,412 --> 00:13:11,914
have a reactive value under the hood. Solidjs will see

200
00:13:11,952 --> 00:13:15,418
that. And instead of doing a regular property

201
00:13:15,504 --> 00:13:19,194
value like the salutation that says hello, it will actually do

202
00:13:19,232 --> 00:13:22,670
a getter that will return the value that is called.

203
00:13:22,740 --> 00:13:25,934
So whenever that prop value name gets

204
00:13:25,972 --> 00:13:29,630
called, it's actually calling the signal username under the hood.

205
00:13:31,170 --> 00:13:34,546
So essentially every prop value needs

206
00:13:34,568 --> 00:13:38,690
to be treated as if it was a signal.

207
00:13:39,110 --> 00:13:42,340
So instead of destructuring them

208
00:13:43,830 --> 00:13:48,166
either in these signature or directly from the prop value,

209
00:13:48,348 --> 00:13:52,242
the props just go ahead and put your props directly

210
00:13:52,306 --> 00:13:55,974
in the JSX. Now sometimes we do need

211
00:13:56,012 --> 00:13:59,830
to manipulate the props and we need to split values or merge values.

212
00:13:59,990 --> 00:14:03,686
And in that case there are utility functions called split props and merge

213
00:14:03,718 --> 00:14:06,986
props that allow you to safely split or

214
00:14:07,008 --> 00:14:09,930
merge those props without breaking that reactivity.

215
00:14:13,570 --> 00:14:17,566
And one that I think is very great

216
00:14:17,668 --> 00:14:21,280
because there is no don't do in this case,

217
00:14:21,810 --> 00:14:25,714
but in solidjs because your components only ever

218
00:14:25,752 --> 00:14:29,362
run once. You don't need to have useref or use

219
00:14:29,416 --> 00:14:33,220
callback. You can just assign your refs to

220
00:14:34,230 --> 00:14:40,806
a value or you can pass

221
00:14:40,908 --> 00:14:45,526
functions directly into your

222
00:14:45,628 --> 00:14:49,558
components and you don't have to worry about having callback. Doing use callback

223
00:14:49,654 --> 00:14:52,922
because you don't have to worry about your component rerunning and having

224
00:14:52,976 --> 00:14:57,210
to make sure you get the same exact ref or the same exact callback

225
00:14:58,750 --> 00:15:02,074
function. So don't go looking around

226
00:15:02,112 --> 00:15:05,562
for used ref or used callback or an equivalent because they don't exist,

227
00:15:05,626 --> 00:15:07,040
because they're not needed.

228
00:15:08,850 --> 00:15:12,046
Now after giving you all those gotchas, you might be like, well,

229
00:15:12,148 --> 00:15:14,674
it's not worth it. That's too much to remember.

230
00:15:14,872 --> 00:15:17,886
Just like react has linter

231
00:15:17,918 --> 00:15:21,950
for reactJs hookdools, Solidjs has its own linter

232
00:15:22,030 --> 00:15:25,330
to help you make sure you don't break reactivity.

233
00:15:27,370 --> 00:15:31,174
Now one might go, well, why bother? ReactJs is at

234
00:15:31,212 --> 00:15:34,534
the top, there's the highest market share. SolidJs is these

235
00:15:34,572 --> 00:15:38,434
just new up and coming thing. Why even bother

236
00:15:38,482 --> 00:15:42,314
learning it? Well, SolidJs has

237
00:15:42,352 --> 00:15:45,754
the highest satisfaction rating according to the state

238
00:15:45,792 --> 00:15:49,434
of JS in the 2021 results. And this is because

239
00:15:49,472 --> 00:15:52,702
it was the very first year that it was actually on the list.

240
00:15:52,836 --> 00:15:56,126
It beat. But every other framework in

241
00:15:56,148 --> 00:15:57,280
its first year,

242
00:15:59,170 --> 00:16:03,870
it's also very performant by default. Ryan Carniato,

243
00:16:04,690 --> 00:16:06,350
the creator of SolidJs,

244
00:16:06,950 --> 00:16:10,206
loves being performant, but not at the expense

245
00:16:10,238 --> 00:16:13,934
of developers experience. And because of that he's built this fantastic

246
00:16:13,982 --> 00:16:17,298
API that you don't have to worry about performance,

247
00:16:17,394 --> 00:16:18,760
it does it for you.

248
00:16:20,890 --> 00:16:23,874
There's already a robust ecosystem.

249
00:16:24,002 --> 00:16:27,346
If you go to solidjs.com slash ecosystem, you can see

250
00:16:27,468 --> 00:16:31,850
there's already multiple routers, UI components, tooling starters.

251
00:16:33,150 --> 00:16:36,902
A lot of the things that already exist in other frameworks already exist

252
00:16:36,966 --> 00:16:40,214
in solid JS as well. So you can build a full

253
00:16:40,272 --> 00:16:44,270
on app without having to worry about whether there's

254
00:16:45,490 --> 00:16:48,606
a plugin or an ecosystem that is going to

255
00:16:48,628 --> 00:16:52,094
support your app. By the way, here's a shameless plugin for

256
00:16:52,132 --> 00:16:55,426
solid bedrock layout, which is my port of my

257
00:16:55,448 --> 00:16:58,994
react library. Over to Solidjs and

258
00:16:59,032 --> 00:17:02,386
there's also in the works, it's in beta right

259
00:17:02,408 --> 00:17:06,254
now, but there's a meta framework just like remix

260
00:17:06,382 --> 00:17:09,942
or next. And it is built

261
00:17:09,996 --> 00:17:13,510
on solid. It's called solid start and you can go check that out at these

262
00:17:13,580 --> 00:17:16,646
link. So where do I go from here?

263
00:17:16,668 --> 00:17:19,610
You're like, I'm sold. I want to learn all about Solidjs.

264
00:17:20,030 --> 00:17:23,766
Well, great place is solidjs.com. That's the doc

265
00:17:23,798 --> 00:17:27,180
site. Specifically, I would like to

266
00:17:27,710 --> 00:17:31,258
recommend that you go to the tutorial. It'll go through all the basics and

267
00:17:31,264 --> 00:17:35,086
you can really get into it as well as there's a playground where

268
00:17:35,108 --> 00:17:38,606
you can learn and just play around with Solidjs and mess with

269
00:17:38,628 --> 00:17:40,480
the reactivity and see how it works.

270
00:17:41,490 --> 00:17:44,746
And then of course there is a discord for Solidjs.

271
00:17:44,858 --> 00:17:48,494
Highly recommend. It's a fantastic community of developers who

272
00:17:48,532 --> 00:17:51,934
support each other and that's it.

273
00:17:51,972 --> 00:17:54,998
Thank you. I'd like to thank you for the time here and hope you enjoy

274
00:17:55,124 --> 00:17:58,530
the other talks at the conference. Once again, my name is Travis Waithmair

275
00:17:58,610 --> 00:18:02,280
at traviswithmare on Twitter and I blog at nontraditional dev.

276
00:18:02,650 --> 00:18:03,620
Hope you have a great one.

