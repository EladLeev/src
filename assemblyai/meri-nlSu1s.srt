1
00:00:00,250 --> 00:00:01,630
Are youll an SRe?

2
00:00:03,570 --> 00:00:07,358
A developer, a quality

3
00:00:07,444 --> 00:00:11,162
engineer who wants to tackle the challenge of improving reliability

4
00:00:11,226 --> 00:00:14,970
in your DevOps? You can enable your DevOps for reliability

5
00:00:15,050 --> 00:00:18,286
with chaos native. Create your free account

6
00:00:18,388 --> 00:01:17,298
at Chaos native Litmus cloud folks,

7
00:01:17,394 --> 00:01:20,098
my name is Arthur with Dasha AI.

8
00:01:20,274 --> 00:01:23,634
Today's session is on how you can use conversational voice

9
00:01:23,682 --> 00:01:26,950
AI to handle incidents in

10
00:01:27,020 --> 00:01:30,426
the site reliability engineering line

11
00:01:30,528 --> 00:01:33,766
of work. So these two concepts,

12
00:01:33,878 --> 00:01:37,334
voice AI incident handling, might seem like they exist

13
00:01:37,382 --> 00:01:40,890
in different worlds, which they may,

14
00:01:41,040 --> 00:01:44,158
but the fact of the matter is at least one of

15
00:01:44,164 --> 00:01:48,222
them, and that's incident handling, can gain a lot of benefit from the other.

16
00:01:48,276 --> 00:01:52,350
And that's voice AI. Here's what you should expect from today's session.

17
00:01:52,710 --> 00:01:55,570
We're going to start off with some definitions,

18
00:01:56,150 --> 00:01:59,566
so basically terminology,

19
00:01:59,758 --> 00:02:02,994
and we'll talk about why you might want to use why you might

20
00:02:03,032 --> 00:02:07,014
want to add conversational voice AI technologies to your set

21
00:02:07,052 --> 00:02:10,642
of tools in your line of work. I'll do a live demonstration

22
00:02:10,706 --> 00:02:14,134
of a Dasha AI conversational AI application

23
00:02:14,252 --> 00:02:17,862
which I built and integrated with better uptime, which handles

24
00:02:17,926 --> 00:02:22,026
incidents, closes them completely,

25
00:02:22,208 --> 00:02:25,514
resolves them if needed, acknowledgement them,

26
00:02:25,712 --> 00:02:29,306
notifies me about them and which gives me updates of

27
00:02:29,328 --> 00:02:32,830
the status of the Kubernetes cluster, et cetera.

28
00:02:33,890 --> 00:02:37,454
Then we'll talk about how it works and I

29
00:02:37,492 --> 00:02:40,766
will finally give you a rundown of

30
00:02:40,788 --> 00:02:44,802
the Dasha studio, the tool set that I use to build this

31
00:02:44,856 --> 00:02:47,970
conversational app and which you can use as well

32
00:02:48,120 --> 00:02:51,810
to add conversational AI to your set

33
00:02:51,880 --> 00:02:55,910
of site reliability engineering tools.

34
00:02:56,410 --> 00:03:00,114
Let's start with the definitions. Conversational voice

35
00:03:00,162 --> 00:03:04,050
AI is a set of technologies that lets

36
00:03:04,130 --> 00:03:07,778
youll create automated conversations powered by

37
00:03:07,964 --> 00:03:11,340
machine learning and artificial intelligence services.

38
00:03:12,190 --> 00:03:16,182
At Dasha AI, we call these automated conversations apps

39
00:03:16,246 --> 00:03:19,434
Dasha apps, and we'll go into a bit more

40
00:03:19,472 --> 00:03:22,782
detail as to how they are run and how

41
00:03:22,836 --> 00:03:26,654
they work a little bit later after these demo. In the

42
00:03:26,692 --> 00:03:28,510
how it works section,

43
00:03:30,290 --> 00:03:34,062
why you might want to use conversational voice AI in

44
00:03:34,116 --> 00:03:37,742
site reliability engineering there are a few use cases.

45
00:03:37,806 --> 00:03:41,474
So one is notifying you about incidents. Another is

46
00:03:41,592 --> 00:03:44,434
resolving these incidents over these phone.

47
00:03:44,552 --> 00:03:48,126
The third is handling incidents on the go. So essentially,

48
00:03:48,238 --> 00:03:51,602
if you're away from your machine, you get notified about an incident.

49
00:03:51,746 --> 00:03:55,666
Maybe youll can check some of the statuses online and acknowledge

50
00:03:55,698 --> 00:03:58,838
the incident and then resolve it when you get back to your computer.

51
00:03:58,924 --> 00:04:03,174
For example, you can handle incidents quicker while at your desk

52
00:04:03,302 --> 00:04:06,342
because you don't have to switch back and forth.

53
00:04:06,406 --> 00:04:09,914
You can ask the AI app what the status of your

54
00:04:10,032 --> 00:04:13,806
vital technologies are, for example, what's the

55
00:04:13,828 --> 00:04:18,510
status of your TLS certificates, what's the status of the Kubernetes clusters?

56
00:04:19,010 --> 00:04:22,298
And you can tell it to acknowledge the incident, to resolve

57
00:04:22,314 --> 00:04:25,998
the incident, et cetera, all online with your voice

58
00:04:26,094 --> 00:04:29,458
over, say, speakerphone. You don't have to tap around

59
00:04:29,544 --> 00:04:31,300
on your computer to do this.

60
00:04:32,790 --> 00:04:35,954
And actually that's one of the big benefits.

61
00:04:36,072 --> 00:04:39,622
Another is that you can tell the AI to quickly notify your

62
00:04:39,676 --> 00:04:43,014
colleagues, all of your colleagues or specific ones if you

63
00:04:43,052 --> 00:04:46,646
feel that there is a need. Get updates on

64
00:04:46,668 --> 00:04:49,670
the status of vital services. We already talked about that.

65
00:04:49,820 --> 00:04:53,146
You can take detailed notes of every incident. What I

66
00:04:53,168 --> 00:04:56,426
mean is, as youll are reporting the incident, you can

67
00:04:56,448 --> 00:04:59,914
dictate notes to the AI app and you can get those

68
00:04:59,952 --> 00:05:03,626
notes sent to your email address, or you can push

69
00:05:03,658 --> 00:05:07,262
them wherever you keep this information about

70
00:05:07,316 --> 00:05:10,714
incidents in the demo I show you today, we'll just send it via

71
00:05:10,762 --> 00:05:14,306
email. And finally you

72
00:05:14,328 --> 00:05:16,130
can resolve incidents quicker.

73
00:05:21,190 --> 00:05:25,134
So moving into the demo, you're seeing visual studio

74
00:05:25,182 --> 00:05:29,320
code and you're seeing better uptime side by side

75
00:05:29,770 --> 00:05:32,914
visual studio code. Why I'm using it? Dasha Studio

76
00:05:32,962 --> 00:05:36,054
is an extension to VS code. If you're familiar with vs code,

77
00:05:36,092 --> 00:05:38,230
you'll feel right at home with Dasha studio.

78
00:05:39,210 --> 00:05:42,586
I'll go over all the different components and how you use them

79
00:05:42,608 --> 00:05:46,106
to build these Dasha app a little bit later. Right now I'll just run

80
00:05:46,128 --> 00:05:49,622
a live demo for you. So what we've got here is two servers

81
00:05:49,686 --> 00:05:53,866
running. One is just a simple hello world server. It's being monitored

82
00:05:53,898 --> 00:05:58,640
by betteruptime. The other is a server which

83
00:06:00,450 --> 00:06:04,750
takes inbound webhooks from betteruptime

84
00:06:04,910 --> 00:06:09,666
and activates these Dasha application from

85
00:06:09,688 --> 00:06:13,886
the node JS code which then calls

86
00:06:13,918 --> 00:06:17,254
me, talks to me, helps me to resolve these issues

87
00:06:17,372 --> 00:06:21,062
in real time. So you might

88
00:06:21,116 --> 00:06:24,754
ask, why do this with betteruptime? Since betteruptime

89
00:06:24,802 --> 00:06:28,282
already does voice notifications. It does do that

90
00:06:28,336 --> 00:06:31,878
indeed. But those are just, hey, you've got an incident.

91
00:06:31,974 --> 00:06:36,006
Hey, incident was resolved by types of notifications.

92
00:06:36,118 --> 00:06:40,302
What I'll show you today is significantly more advanced. So I

93
00:06:40,356 --> 00:06:44,222
just killed the server that we're monitoring. And any

94
00:06:44,276 --> 00:06:49,034
second we're going to get a webhook

95
00:06:49,082 --> 00:06:52,962
coming into our server here and

96
00:06:53,016 --> 00:06:55,300
activating the Dasha application.

97
00:06:59,510 --> 00:07:00,660
There it goes.

98
00:07:17,150 --> 00:07:21,062
This is Arthur. Hello. Hello Arthur.

99
00:07:21,126 --> 00:07:24,838
This is Dasha calling you regarding your website. There has been an incident. You can

100
00:07:24,864 --> 00:07:28,526
acknowledge or resolve the incident right on the call with me. Please note I

101
00:07:28,548 --> 00:07:31,694
will listen and take notes until you mention that you are ready to resolve or

102
00:07:31,732 --> 00:07:35,540
acknowledge. Okay, let me take a look here.

103
00:07:36,870 --> 00:07:38,260
Okay, I'll wait.

104
00:07:41,190 --> 00:07:44,290
What's the status of the kubernetes cluster?

105
00:07:45,850 --> 00:07:49,906
Kubernetes is up and running. And what's

106
00:07:49,938 --> 00:07:53,000
the status of TLS certificate and health check?

107
00:07:54,570 --> 00:07:58,710
TlS certificate is active site health checks are not responding.

108
00:08:00,110 --> 00:08:03,850
Okay, I can acknowledgement the incident.

109
00:08:04,830 --> 00:08:08,006
Can you please confirm that you want me to acknowledge the incident?

110
00:08:08,118 --> 00:08:11,290
Yes, I can. Got it.

111
00:08:11,360 --> 00:08:14,178
I have set the status and better uptime of acknowledgement.

112
00:08:14,294 --> 00:08:17,694
The next step is to resolve the incident. Would you like me to notify other

113
00:08:17,732 --> 00:08:21,182
team members that there is an incident which may affect them? Yes,

114
00:08:21,236 --> 00:08:24,958
please. Okay, team members notified.

115
00:08:25,054 --> 00:08:27,890
I will wait for you to let me know when incident is resolved.

116
00:08:29,670 --> 00:08:31,570
Okay. Oh crap.

117
00:08:32,950 --> 00:08:36,066
What happened, Arthur? Did youll use the wrong terminal again?

118
00:08:36,248 --> 00:08:39,880
Yeah, something like that. Hold on.

119
00:08:42,810 --> 00:08:45,510
Okay, incident resolved.

120
00:08:46,650 --> 00:08:49,930
Can you please confirm that you want me to acknowledge the incident?

121
00:08:50,590 --> 00:08:54,406
Incident resolved. Can you please confirm

122
00:08:54,438 --> 00:08:57,500
that you want me to resolve the incident? Yes, I can.

123
00:08:58,990 --> 00:09:02,858
Well done, Arthur. I have set these status and better uptime is resolved.

124
00:09:02,954 --> 00:09:05,950
Thank you and take care. Goodbye. Bye.

125
00:09:09,010 --> 00:09:12,414
Right, well, there youll have

126
00:09:12,452 --> 00:09:14,340
it. So,

127
00:09:16,390 --> 00:09:20,690
as I mentioned earlier, we're also taking

128
00:09:20,760 --> 00:09:24,034
down the transcription of the conversation. And I

129
00:09:24,072 --> 00:09:27,894
should have just received an email with

130
00:09:27,932 --> 00:09:31,862
the transcript. There it is. So this is the

131
00:09:31,916 --> 00:09:36,440
transcript of the conversation that we have just had.

132
00:09:42,760 --> 00:09:46,632
It. Obviously, as you saw, these incident was

133
00:09:46,686 --> 00:09:50,472
resolved in real time. Acknowledged and

134
00:09:50,526 --> 00:09:54,636
resolved. And we are able to youll data

135
00:09:54,738 --> 00:09:58,392
from external functions regarding the kubernetes status

136
00:09:58,456 --> 00:10:01,932
and et cetera, et cetera. Pretty much anything that you

137
00:10:02,066 --> 00:10:05,452
might need at your fingertips or ear tips,

138
00:10:05,516 --> 00:10:09,292
whatever you can get with Dasha,

139
00:10:09,356 --> 00:10:13,040
because you can run all the HTTPs

140
00:10:14,180 --> 00:10:17,536
requests. Whatever, anything that you can do with

141
00:10:17,558 --> 00:10:20,580
node JS code you can do with Dasha.

142
00:10:21,160 --> 00:10:25,380
So I'm going to switch back over to the deck and just

143
00:10:25,450 --> 00:10:29,136
kind of give you a quick overview of the architecture. And then we'll

144
00:10:29,168 --> 00:10:33,176
come back to visual studio code where I will take you through

145
00:10:33,358 --> 00:10:37,304
the actual code which makes this

146
00:10:37,422 --> 00:10:38,680
app tick,

147
00:10:41,420 --> 00:10:45,532
and to take you through the architecture of the

148
00:10:45,586 --> 00:10:48,824
Dasha apps. So there are three parts.

149
00:10:48,872 --> 00:10:51,580
The first is the Dasha studio.

150
00:10:52,400 --> 00:10:56,064
That's what you have just seen me

151
00:10:56,182 --> 00:10:59,836
use to run the application, and it provides

152
00:10:59,868 --> 00:11:03,516
you such tools as analytics, debugger, visual editor, code editor.

153
00:11:03,548 --> 00:11:07,410
Essentially, the studio is where you write out the

154
00:11:07,720 --> 00:11:11,076
conversation flow using Dashascript, which is a

155
00:11:11,098 --> 00:11:14,992
domain specific language specifically

156
00:11:15,056 --> 00:11:18,452
designed as a Turing machine with nodes and

157
00:11:18,506 --> 00:11:22,408
states, and each node is responsible for something happening in

158
00:11:22,414 --> 00:11:25,976
the conversation. Youll might have nodes that don't show up in

159
00:11:25,998 --> 00:11:29,124
the conversation, but that youll use to do calculations, et cetera,

160
00:11:29,172 --> 00:11:33,304
or to call up external functions. You call up external

161
00:11:33,352 --> 00:11:36,940
functions in your index JS file,

162
00:11:37,360 --> 00:11:40,988
and from index JS you can call upon any external services,

163
00:11:41,074 --> 00:11:44,932
et cetera, et cetera. The second part is the Dasha

164
00:11:45,016 --> 00:11:48,688
SDK. So that's essentially used what you import

165
00:11:48,774 --> 00:11:52,896
into your node JS file, and it lets you integrate with

166
00:11:52,918 --> 00:11:56,732
APIs, lets you handle your telephony, et cetera,

167
00:11:56,796 --> 00:12:00,550
et cetera. And the third is the Dasha cloud.

168
00:12:01,000 --> 00:12:04,980
So this is the part of the whole

169
00:12:05,050 --> 00:12:08,740
system which gives you the AI as a service component.

170
00:12:09,660 --> 00:12:12,228
Alerts your conversations, have digressions,

171
00:12:12,404 --> 00:12:15,560
alerts you customize intents, entities.

172
00:12:16,140 --> 00:12:19,720
Slot filling provides an out of the box

173
00:12:19,790 --> 00:12:23,676
natural language generation, natural language understanding. Text to

174
00:12:23,698 --> 00:12:26,204
speech, speech to text calls, best in class,

175
00:12:26,322 --> 00:12:28,908
all proprietary technology.

176
00:12:29,074 --> 00:12:32,220
We're actually rolling out what's already in live

177
00:12:32,290 --> 00:12:35,980
testing. We'll be pushing into production emotionally

178
00:12:36,060 --> 00:12:40,076
charged speech synthesis so you can define what types

179
00:12:40,108 --> 00:12:44,210
of emotions you want to give the

180
00:12:44,900 --> 00:12:48,550
talker, if that's the type of thing that you're into.

181
00:12:49,080 --> 00:12:52,516
And by the talker, I mean the AI. And this

182
00:12:52,538 --> 00:12:56,208
is how the entire thing works at an overview.

183
00:12:56,304 --> 00:12:59,460
So you write the killer app in the studio,

184
00:12:59,900 --> 00:13:03,240
it's loaded into the Dasha cloud platform through

185
00:13:03,390 --> 00:13:06,728
these SDK, and then the conversation happens

186
00:13:06,814 --> 00:13:10,280
through a telephony provider with the user.

187
00:13:11,740 --> 00:13:15,324
So we've gone over the architecture. Let's now look at

188
00:13:15,362 --> 00:13:19,112
the actual code that makes these conversational AI

189
00:13:19,176 --> 00:13:22,952
applications work and interface

190
00:13:23,016 --> 00:13:26,704
with all of the services that you use, in this case with

191
00:13:26,742 --> 00:13:30,224
better uptime. So as I

192
00:13:30,262 --> 00:13:31,250
have mentioned,

193
00:13:33,300 --> 00:13:36,832
we've got a few main parts that we'll be looking

194
00:13:36,886 --> 00:13:39,696
at. The first is main DSL.

195
00:13:39,888 --> 00:13:42,688
DSL is Dasha scripting language.

196
00:13:42,864 --> 00:13:47,232
It's a domain specific language which specifically

197
00:13:47,296 --> 00:13:52,612
is used to create, to construct conversations.

198
00:13:52,756 --> 00:13:56,280
It denotes the structure of a conversation.

199
00:13:56,620 --> 00:14:00,600
The second file that we'll be looking at is data JSon.

200
00:14:00,940 --> 00:14:05,004
And this is the set of data which is used to train the

201
00:14:05,042 --> 00:14:09,176
Dasha AI neural networks in the Dasha cloud to recognize

202
00:14:09,288 --> 00:14:12,588
specific intent or to recognize specific

203
00:14:12,674 --> 00:14:16,356
named entities that the user requests.

204
00:14:16,488 --> 00:14:18,530
We'll look over that as well.

205
00:14:20,580 --> 00:14:24,412
The third, we'll barely look at it, is phrasemap JSon.

206
00:14:24,476 --> 00:14:28,036
I'll show you a couple of things in it and tell you what it's all

207
00:14:28,058 --> 00:14:31,716
about. And finally, index JS is sort of

208
00:14:31,738 --> 00:14:35,908
the file that puts this all together. And this is where we will actually

209
00:14:36,074 --> 00:14:38,470
start today. So,

210
00:14:38,840 --> 00:14:42,004
as I have mentioned, when I went into the demo, I had two

211
00:14:42,042 --> 00:14:45,428
applications running. One is the,

212
00:14:45,594 --> 00:14:49,000
this is, I guess, another file. One is hello world js, which is

213
00:14:49,070 --> 00:14:52,584
like about as simple of a server on node JS as

214
00:14:52,622 --> 00:14:54,330
you can set up,

215
00:14:55,580 --> 00:14:59,192
and the other is index js.

216
00:14:59,256 --> 00:15:02,572
So I didn't mention this at the demo, but obviously these are all

217
00:15:02,626 --> 00:15:06,464
running on my local machine. So I used Ngrok to

218
00:15:06,502 --> 00:15:11,520
give them a web address so that better

219
00:15:11,590 --> 00:15:15,888
uptime can actually monitoring one and send

220
00:15:15,974 --> 00:15:18,948
and interface with the other. Monitor this one,

221
00:15:19,034 --> 00:15:23,700
interface with this one. So index JS

222
00:15:26,280 --> 00:15:30,500
starts off by importing the Dasha AI SDK

223
00:15:31,020 --> 00:15:34,456
and obviously we're importing express to

224
00:15:34,478 --> 00:15:37,688
run the server here. We're using a few other things.

225
00:15:37,774 --> 00:15:41,288
So here is where the

226
00:15:41,374 --> 00:15:44,652
webhook listener app begins. So this is where

227
00:15:44,706 --> 00:15:47,100
our server actually starts.

228
00:15:50,160 --> 00:15:54,030
It gets data via webhook from

229
00:15:54,800 --> 00:15:58,512
better uptime. The most important piece of data for us

230
00:15:58,566 --> 00:16:02,752
is the incident id, but we also want to know whether the

231
00:16:02,886 --> 00:16:06,752
incident is acknowledged or resolved. The thing is

232
00:16:06,806 --> 00:16:10,804
that better uptime passes, sends webhooks no

233
00:16:10,842 --> 00:16:14,464
matter what happens. But we only want to get a call from Dasha

234
00:16:14,592 --> 00:16:18,180
if the webhook is initiated,

235
00:16:18,840 --> 00:16:22,084
if the incident is created, not resolved

236
00:16:22,132 --> 00:16:26,152
or acknowledged. So once we get that type of

237
00:16:26,286 --> 00:16:29,780
webhook for an incident that's been created, we launch

238
00:16:29,860 --> 00:16:33,736
the Dasha application and these Dasha

239
00:16:33,768 --> 00:16:37,192
application calls me and the conversation

240
00:16:37,336 --> 00:16:40,844
begins. So let's look at the body of the

241
00:16:40,882 --> 00:16:44,664
conversation here. We start off with two

242
00:16:44,802 --> 00:16:47,968
input variables, phone and name.

243
00:16:48,134 --> 00:16:51,164
You could look at index js

244
00:16:51,292 --> 00:16:56,736
and see right here in

245
00:16:56,758 --> 00:17:00,260
the Dasha app where

246
00:17:00,330 --> 00:17:04,660
we've got these input variables.

247
00:17:07,400 --> 00:17:10,696
There they are. So I'm storing these

248
00:17:10,798 --> 00:17:15,384
in the env file along with all these other things

249
00:17:15,502 --> 00:17:18,650
that I don't want to store directly in my code.

250
00:17:20,540 --> 00:17:24,312
We also declare external functions here. As mentioned earlier,

251
00:17:24,376 --> 00:17:28,508
external functions are a way for you to call up code

252
00:17:28,594 --> 00:17:32,712
within index js from the body of your AI

253
00:17:32,776 --> 00:17:36,444
conversation, which can then go on to do any manner

254
00:17:36,492 --> 00:17:40,364
of external service. Call any external

255
00:17:40,412 --> 00:17:44,556
services. So conversation starts with the node root.

256
00:17:44,668 --> 00:17:47,904
We wait to connect to the phone, and the application

257
00:17:48,022 --> 00:17:51,412
waits until the user says something. Then it

258
00:17:51,466 --> 00:17:54,644
greets the user and in this

259
00:17:54,682 --> 00:17:58,324
case tells them that. You can let me know when you're ready

260
00:17:58,362 --> 00:18:01,736
to resolve or acknowledge the incident. You've had an incident by the

261
00:18:01,758 --> 00:18:05,400
way. So then we can

262
00:18:05,550 --> 00:18:09,284
really take the conversation in a few directions. This is a pretty simple script

263
00:18:09,332 --> 00:18:12,288
as far as AI conversations are concerned.

264
00:18:12,484 --> 00:18:15,336
Essentially we can either acknowledge,

265
00:18:15,448 --> 00:18:18,716
resolve, or ignore the event.

266
00:18:18,898 --> 00:18:22,872
We can also ask the application about the status

267
00:18:22,936 --> 00:18:28,108
of some vital services, specifically TLS

268
00:18:28,204 --> 00:18:32,592
certificates, kubernetes cluster and site

269
00:18:32,646 --> 00:18:36,016
health check. So you could ask it to

270
00:18:36,038 --> 00:18:39,556
wait to repeat the last question and a bit of an

271
00:18:39,578 --> 00:18:42,836
Easter egg. Did you use

272
00:18:42,858 --> 00:18:48,964
the wrong terminal again calls.

273
00:18:49,002 --> 00:18:51,832
Right. So this is what I want to draw your attention to.

274
00:18:51,886 --> 00:18:55,880
The resolve, the acknowledgement and

275
00:18:55,950 --> 00:18:59,524
the ignore nodes are all labeled not as a node,

276
00:18:59,572 --> 00:19:03,080
but as a digression. What is a digression

277
00:19:03,160 --> 00:19:06,972
in the context of dasha? It's a node that can be called

278
00:19:07,026 --> 00:19:10,060
up at absolutely any point in the conversation.

279
00:19:11,040 --> 00:19:14,584
And we've really developed this for two reasons.

280
00:19:14,632 --> 00:19:17,696
One is it's a great way to navigate if

281
00:19:17,718 --> 00:19:21,696
you've got a huge giant menu, and two is it's a

282
00:19:21,718 --> 00:19:25,040
way to give the dachshare apps that human

283
00:19:25,110 --> 00:19:28,916
like feel. So when you're talking to a person, and if

284
00:19:29,018 --> 00:19:32,468
you're talking about whatever, you're talking about

285
00:19:32,634 --> 00:19:36,132
site reliability engineering, and suddenly your friend

286
00:19:36,186 --> 00:19:40,196
says, hey, by the way, what's the

287
00:19:40,218 --> 00:19:45,590
weather like where you are? You're able to reply to that and

288
00:19:45,900 --> 00:19:49,844
to kind of pass the sort of using test to give the user a feeling

289
00:19:49,892 --> 00:19:53,516
like they're talking to a human. We want the AI applications to be able to

290
00:19:53,538 --> 00:19:57,292
do the same thing. So these digressions do

291
00:19:57,346 --> 00:20:01,208
really well with that. And the digressions

292
00:20:01,304 --> 00:20:04,972
are activated by intents. So you can see here,

293
00:20:05,106 --> 00:20:08,192
conditions on message has intent ignore such, and such

294
00:20:08,246 --> 00:20:11,410
digression is activated. So in this case,

295
00:20:12,340 --> 00:20:16,204
we're looking for the intent of ignore.

296
00:20:16,332 --> 00:20:20,384
So when these phrases or any number of phrases

297
00:20:20,432 --> 00:20:22,790
utilizing these phrases show up,

298
00:20:23,560 --> 00:20:26,784
the digression is activated.

299
00:20:26,912 --> 00:20:30,328
Data json is a way for you to feed data

300
00:20:30,414 --> 00:20:34,056
easily into the dasha AI as a

301
00:20:34,078 --> 00:20:37,450
service, neural networks, which then

302
00:20:38,140 --> 00:20:42,036
are trained, and in ongoing conversations, they're trained

303
00:20:42,068 --> 00:20:45,848
over and over and recognize

304
00:20:46,024 --> 00:20:49,324
a variety of phrases which may include these words,

305
00:20:49,442 --> 00:20:52,732
or which may not even sound exactly like these words,

306
00:20:52,866 --> 00:20:56,140
but which have been identified to carry

307
00:20:56,220 --> 00:21:00,272
the same weight of meaning as these words

308
00:21:00,406 --> 00:21:03,840
do. So once

309
00:21:03,910 --> 00:21:06,960
the digression is activated in this case,

310
00:21:07,030 --> 00:21:10,580
we ask to confirm the action, and then

311
00:21:10,650 --> 00:21:14,192
the user can either choose to continue to confirm

312
00:21:14,256 --> 00:21:17,808
with the intent of yes, that they want to indeed,

313
00:21:17,904 --> 00:21:21,752
in this case ignore the incident, or to say no,

314
00:21:21,886 --> 00:21:25,700
in which case they will be moved over to node waiting,

315
00:21:25,860 --> 00:21:29,780
where Dasha says that she will wait for additional instructions

316
00:21:29,860 --> 00:21:31,560
from the user.

317
00:21:34,000 --> 00:21:37,596
Finally, what I want to show you is

318
00:21:37,698 --> 00:21:41,032
how we are identifying named

319
00:21:41,096 --> 00:21:46,152
entities when we're checking for status from external

320
00:21:46,216 --> 00:21:48,350
services. So these,

321
00:21:48,980 --> 00:21:52,412
this digression status is activated on two conditions.

322
00:21:52,476 --> 00:21:55,932
One is that the message has to have intent status,

323
00:21:56,076 --> 00:21:59,476
and the other that the message has to carry some data,

324
00:21:59,578 --> 00:22:03,060
specifically status entity. What is

325
00:22:03,130 --> 00:22:06,672
status entity? It's a named entity

326
00:22:06,816 --> 00:22:09,700
where it has a number of values.

327
00:22:10,140 --> 00:22:13,236
It's not an open set of data it's

328
00:22:13,268 --> 00:22:16,600
a closed set, which means that only these

329
00:22:16,670 --> 00:22:19,944
values will be identified. For example, if this

330
00:22:19,982 --> 00:22:23,832
was an open set, then dasha might substitute

331
00:22:23,896 --> 00:22:28,332
any number of words which

332
00:22:28,466 --> 00:22:31,912
are placed in the proper position by the user.

333
00:22:31,976 --> 00:22:35,408
But in this case we're looking to identify some very specific

334
00:22:35,494 --> 00:22:39,488
services. So Kubernetes, TLS and

335
00:22:39,574 --> 00:22:43,564
health check and here are the instructions

336
00:22:43,692 --> 00:22:47,924
provided to the neural network when

337
00:22:48,042 --> 00:22:51,780
the message has intent status and data

338
00:22:51,850 --> 00:22:55,504
status entity. These are the types of phrases that the user

339
00:22:55,552 --> 00:22:58,880
might say. What is the status of kubernetes cluster?

340
00:22:59,040 --> 00:23:03,224
What's the status of Kubernetes and TLS? Tell me

341
00:23:03,262 --> 00:23:06,488
about the status, or give me an update on the status of

342
00:23:06,574 --> 00:23:10,136
this or such and the other in the

343
00:23:10,158 --> 00:23:13,580
course of the conversation. This is how

344
00:23:13,650 --> 00:23:17,950
we got to basically

345
00:23:20,160 --> 00:23:23,704
check the status of these things. We call up an external

346
00:23:23,752 --> 00:23:27,276
service and the service returns

347
00:23:27,308 --> 00:23:31,520
the status to us. In the case of going

348
00:23:31,590 --> 00:23:35,436
back to we looked at the digression for ignore, but let's

349
00:23:35,468 --> 00:23:39,076
look at the digression for resolve. For example

350
00:23:39,258 --> 00:23:43,012
the same workflow. If the digression gets

351
00:23:43,146 --> 00:23:44,150
called up,

352
00:23:45,640 --> 00:23:49,444
the Dasha app asks to confirm that

353
00:23:49,482 --> 00:23:52,984
the incident is ready to be resolved, and if it

354
00:23:53,022 --> 00:23:57,560
is confirmed, it calls up the external function resolve.

355
00:23:57,900 --> 00:24:01,688
Here it is in our

356
00:24:01,774 --> 00:24:05,260
code resolve.

357
00:24:06,240 --> 00:24:10,364
It checks whether the incident id is null, and if

358
00:24:10,402 --> 00:24:14,728
it's not, it authorizes

359
00:24:14,904 --> 00:24:20,204
with the bearer API

360
00:24:20,252 --> 00:24:24,480
token and it sends

361
00:24:24,980 --> 00:24:28,756
an HTTPs post request with the

362
00:24:28,778 --> 00:24:32,640
incident id instructing better uptime to resolve

363
00:24:32,720 --> 00:24:37,604
the incident, after which the

364
00:24:37,722 --> 00:24:41,060
Dasha tells the user that the incident

365
00:24:41,140 --> 00:24:44,760
has been resolved. Take care and goodbye.

366
00:24:45,260 --> 00:24:49,530
By the same token, you could literally do

367
00:24:50,300 --> 00:24:54,252
any type of activities that you

368
00:24:54,306 --> 00:24:58,056
right now do manually with a Dasha app that's

369
00:24:58,088 --> 00:25:00,604
tailored to your specific needs.

370
00:25:00,722 --> 00:25:04,076
So to put into perspective how

371
00:25:04,178 --> 00:25:08,608
easy it is to build with. Took me probably

372
00:25:08,694 --> 00:25:11,840
around five or 6

373
00:25:11,910 --> 00:25:15,424
hours to build this entire thing and

374
00:25:15,542 --> 00:25:20,020
I'm not a very experienced software engineer,

375
00:25:25,000 --> 00:25:28,564
and I hate to be the person who

376
00:25:28,602 --> 00:25:32,008
says it's that easy, but it's really that

377
00:25:32,094 --> 00:25:35,432
easy to build your own

378
00:25:35,486 --> 00:25:38,712
apps to make your site

379
00:25:38,766 --> 00:25:42,280
reliability engineering workflow even more efficient.

380
00:25:44,720 --> 00:25:49,196
The source code to this application will be attached below

381
00:25:49,378 --> 00:25:53,116
to the YouTube description and if

382
00:25:53,138 --> 00:25:56,896
you go to the GitHub you will find in the readme a bit of a

383
00:25:56,918 --> 00:26:01,120
tutorial on how to actually put all these into action,

384
00:26:01,620 --> 00:26:05,424
and it will also be up on the

385
00:26:05,462 --> 00:26:08,864
Conf 42 website for you to review,

386
00:26:09,062 --> 00:26:12,592
to download, to use, and to build out

387
00:26:12,646 --> 00:26:16,450
your own applications running on top of it.

388
00:26:16,820 --> 00:26:20,536
I hope this was exciting for you, as exciting for you

389
00:26:20,558 --> 00:26:24,170
to watch as it was for me to create and

390
00:26:25,500 --> 00:26:28,916
good luck making your site reliability workflows

391
00:26:28,948 --> 00:26:31,130
ever more efficient. Thanks, everybody.

