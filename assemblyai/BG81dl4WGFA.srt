1
00:00:25,410 --> 00:00:27,814
You welcome.

2
00:00:28,012 --> 00:00:31,922
Today I'm coming to be talking about observability versus performance

3
00:00:31,986 --> 00:00:35,302
monitoring, the difference between these two ideas and

4
00:00:35,356 --> 00:00:38,902
why you should care about them. So before we get started, just a quick

5
00:00:39,036 --> 00:00:41,960
overview of what we'll be having about today.

6
00:00:42,730 --> 00:00:44,920
First off, why do we care?

7
00:00:45,610 --> 00:00:48,630
Going to look a little bit into the history of monitoring.

8
00:00:49,050 --> 00:00:53,502
Going to think about why

9
00:00:53,556 --> 00:00:56,160
monitoring has had to evolve over time.

10
00:00:56,690 --> 00:00:59,870
We'll look at a high level overview of observability

11
00:01:01,650 --> 00:01:05,410
and where whats term came from and what it means.

12
00:01:05,560 --> 00:01:08,914
How you can benefit from observability. Talk a little bit about

13
00:01:08,952 --> 00:01:12,834
the three pillars. We'll do a recap. We'll talk

14
00:01:12,872 --> 00:01:16,606
a little bit about open telemetry as a path to observability,

15
00:01:16,718 --> 00:01:19,160
and then we'll wrap it up and you can be on your way.

16
00:01:21,130 --> 00:01:24,534
So first off, why do we care? We really care about

17
00:01:24,572 --> 00:01:27,414
this because we want to work on the good stuff. We don't want to spend

18
00:01:27,452 --> 00:01:30,780
our time debugging, troubleshooting, doing support.

19
00:01:32,510 --> 00:01:35,898
Our companies also don't want us to spend our time doing this. It can

20
00:01:35,904 --> 00:01:40,170
be very expensive for an organization to have an entire engineering team

21
00:01:40,320 --> 00:01:44,350
doing troubleshooting, support and not working on future

22
00:01:44,420 --> 00:01:48,014
looking features. Additionally, just for our quality of life,

23
00:01:48,052 --> 00:01:51,006
we don't want to spend our time, our free time doing this.

24
00:01:51,108 --> 00:01:54,866
You rarely take a job with the hopes that we'll wake you

25
00:01:54,888 --> 00:01:58,366
up in the middle of the night to try to keep the lights

26
00:01:58,398 --> 00:02:02,002
on for an organization. So the better and more

27
00:02:02,056 --> 00:02:05,702
stable your environments can be, the better off everybody

28
00:02:05,756 --> 00:02:07,640
in the organization really is.

29
00:02:10,170 --> 00:02:11,750
So starting at the beginning,

30
00:02:13,770 --> 00:02:17,062
in the good old days, back when I was actually doing

31
00:02:17,116 --> 00:02:20,726
development, we were working with typically a single code base.

32
00:02:20,828 --> 00:02:24,330
So it was something that could be run locally. So if I

33
00:02:24,400 --> 00:02:27,626
needed to step through, something on my computer could

34
00:02:27,648 --> 00:02:30,806
bring the code down, run it in a debugger with some breakpoints,

35
00:02:30,998 --> 00:02:34,670
and really be able to understand what was happening from start to finish.

36
00:02:34,820 --> 00:02:38,126
So this is monolithic architecture, and it's great at what

37
00:02:38,148 --> 00:02:41,774
it's good for. So I'm not here to talk

38
00:02:41,812 --> 00:02:45,214
about the differences between microservices and monolithic architecture

39
00:02:45,262 --> 00:02:48,606
or why one is better than the other. I would say there's

40
00:02:48,638 --> 00:02:53,086
appropriate uses for the appropriate case. But monolithic

41
00:02:53,118 --> 00:02:55,830
architecture is kind of where monitoring evolved.

42
00:02:57,770 --> 00:03:01,238
So performance monitoring, this really came out of

43
00:03:01,244 --> 00:03:04,630
the data center. So your applications were running on

44
00:03:04,780 --> 00:03:08,358
hardware that you could have some insight into.

45
00:03:08,524 --> 00:03:11,994
You knew what you needed to be able to keep an eye on to

46
00:03:12,032 --> 00:03:15,226
make sure that everything was up and healthy. We'd be able to kind

47
00:03:15,248 --> 00:03:19,386
of take a look and see what are the trends, what's happening here?

48
00:03:19,568 --> 00:03:22,690
Are we headed in a bad direction? Are things pretty stable?

49
00:03:22,870 --> 00:03:26,462
And then this is where alerting really came into play.

50
00:03:26,596 --> 00:03:30,106
When do I need to stop what I'm doing and pay attention to something that's

51
00:03:30,138 --> 00:03:33,040
happening within my infrastructure or application?

52
00:03:33,810 --> 00:03:36,866
So this pager is a picture of

53
00:03:36,888 --> 00:03:40,194
the exact same kind of pager that I carried back in the day.

54
00:03:40,312 --> 00:03:44,226
I would say that a lot of people who have been

55
00:03:44,248 --> 00:03:47,734
on call are familiar with this sort of thing. And the idea is

56
00:03:47,772 --> 00:03:51,720
whats you want this to beep at you as little as possible.

57
00:03:55,530 --> 00:03:58,742
So sounds like monitoring pretty much has it covered. It tells us

58
00:03:58,796 --> 00:04:02,378
alerting can tell us when we need to drop everything and

59
00:04:02,464 --> 00:04:06,214
fix some stuff. We know the health of our servers and our applications,

60
00:04:06,262 --> 00:04:08,860
so why would we need to know anything else?

61
00:04:09,630 --> 00:04:13,022
The distributed systems are why we need to know more than

62
00:04:13,076 --> 00:04:14,990
just the high level aggregate.

63
00:04:17,010 --> 00:04:20,574
This architecture brings with it a lot of benefits

64
00:04:20,692 --> 00:04:24,698
like improved scalability. It can be more efficient to work in,

65
00:04:24,884 --> 00:04:27,730
it's easier to do kind of rapid deployments.

66
00:04:28,070 --> 00:04:31,778
It's also easier as people join to be able to understand a

67
00:04:31,784 --> 00:04:35,138
smaller piece of the overall system and ramp up quickly and

68
00:04:35,144 --> 00:04:39,426
be able to contribute quickly. But what it does introduce is more complexity,

69
00:04:39,458 --> 00:04:43,238
which makes it more difficult to monitoring. While you can monitor a

70
00:04:43,244 --> 00:04:46,566
lot of differences, parts of the system effectively, it's hard to

71
00:04:46,588 --> 00:04:49,802
get a really good understanding of what's happening from start to finish.

72
00:04:49,856 --> 00:04:53,658
So when there's issues, it's a lot more challenging to know where those issues

73
00:04:53,744 --> 00:04:54,380
are.

74
00:04:56,990 --> 00:05:00,506
Another aspect of kind of some of the

75
00:05:00,528 --> 00:05:03,754
new technology that's emerged is ephemeral resources.

76
00:05:03,882 --> 00:05:07,274
So it's a lot harder to monitor something if you don't

77
00:05:07,322 --> 00:05:10,970
know when it's going to be there and when it's going to disappear.

78
00:05:11,050 --> 00:05:14,446
So you can't set a monitor for something that you can't

79
00:05:14,478 --> 00:05:19,330
see. So you really need this sort of thing to kind of automatically

80
00:05:19,910 --> 00:05:23,666
pick up. And when it disappears, you no

81
00:05:23,688 --> 00:05:26,434
longer want to be alerted about it because it's supposed to work like that.

82
00:05:26,472 --> 00:05:29,822
It's not a negative that something has

83
00:05:29,896 --> 00:05:32,966
shut down, it's doing that to save your resources, but you don't want to get

84
00:05:32,988 --> 00:05:36,802
pinged about it every single time it happens. So this is another challenge

85
00:05:36,866 --> 00:05:38,380
of monitoring today.

86
00:05:41,230 --> 00:05:44,474
So makes sense things are more complex, we need to step

87
00:05:44,512 --> 00:05:46,780
up our game, how are we going to do that?

88
00:05:48,030 --> 00:05:51,850
So that's where observability comes into play. So the answer

89
00:05:51,920 --> 00:05:55,134
to the ultimate question of life, the universe and everything is

90
00:05:55,172 --> 00:05:58,270
observability. It will give you all the answers you need to all of the questions

91
00:05:58,340 --> 00:06:00,830
you could possibly ask in theory.

92
00:06:03,620 --> 00:06:07,600
So observability is really the ability to understand the state

93
00:06:07,750 --> 00:06:11,260
of internal systems by observing the output.

94
00:06:11,340 --> 00:06:15,440
So the idea is that you can collect information

95
00:06:15,510 --> 00:06:18,724
that will tell you what's happening within your system and

96
00:06:18,762 --> 00:06:21,510
sounds just like monitoring. And that's because it is.

97
00:06:21,960 --> 00:06:25,536
Monitoring is an aspect of observability.

98
00:06:25,648 --> 00:06:28,884
And if it is everything that you need to be able

99
00:06:28,922 --> 00:06:32,032
to answer the questions about your system,

100
00:06:32,186 --> 00:06:35,000
then you have an observable system.

101
00:06:35,150 --> 00:06:39,050
So terms get a little bit muddled and we'll dig into some of that.

102
00:06:41,260 --> 00:06:44,388
So the things that I want everybody to remember is

103
00:06:44,414 --> 00:06:47,756
that the outcomes are more important than the labels. So whether or not you call

104
00:06:47,778 --> 00:06:51,484
it observability or monitoring really doesn't matter. You just need

105
00:06:51,522 --> 00:06:56,688
to know that you can support your

106
00:06:56,774 --> 00:07:00,720
applications the best way possible. It's also

107
00:07:00,790 --> 00:07:05,084
something that's never done. So just like software evolves and advances,

108
00:07:05,132 --> 00:07:08,396
you need to update your monitoring or observability.

109
00:07:08,588 --> 00:07:11,584
It's not a checkbox where you can just say, all right, now we're observable,

110
00:07:11,632 --> 00:07:15,172
and set it and forget it. It doesn't have to be all or nothing.

111
00:07:15,226 --> 00:07:19,136
So I think a lot of people shy away from exploring new methods

112
00:07:19,168 --> 00:07:22,756
of introducing observability into their environments because it

113
00:07:22,778 --> 00:07:26,344
sounds overwhelming. But I would say you can just kind of start

114
00:07:26,382 --> 00:07:29,976
small, get familiar with what you need and what you might like to use and

115
00:07:29,998 --> 00:07:33,416
kind of take it from there. Additionally, like I said, it's not

116
00:07:33,438 --> 00:07:37,176
a set it and forget it, it's a spectrum. So your systems

117
00:07:37,208 --> 00:07:40,508
can be very observable or very opaque, and what you want

118
00:07:40,514 --> 00:07:43,900
to do is kind of get to the level that you need to be successful.

119
00:07:48,240 --> 00:07:51,616
So again, it really doesn't matter what you call it. What matters is

120
00:07:51,638 --> 00:07:55,088
that you can answer any question, whats you might need to ask of your system.

121
00:07:55,174 --> 00:07:58,630
But I'm going to keep talking about observability because that's the name of this talk.

122
00:08:00,440 --> 00:08:04,016
So the origin of the term observability, it's a measure

123
00:08:04,048 --> 00:08:07,716
of how well the internal states of the system can be inferred from knowledge of

124
00:08:07,738 --> 00:08:12,064
its external outputs. So this came from the general theory

125
00:08:12,112 --> 00:08:15,944
of control systems from the 1960s. So even though we've just

126
00:08:15,982 --> 00:08:19,224
started to hear about this in the past couple of years, it's not a

127
00:08:19,262 --> 00:08:22,892
new concept and it's not a new buzzy term. This is

128
00:08:22,946 --> 00:08:26,172
an idea that's been around for a long time, can be applied to

129
00:08:26,226 --> 00:08:30,236
basically any kind of system, but obviously now we're talking about

130
00:08:30,418 --> 00:08:33,260
distributed systems and software architecture.

131
00:08:35,280 --> 00:08:39,072
So it sounds like all I need to have

132
00:08:39,126 --> 00:08:43,024
to be able to answer any question that I could ask. My system is all

133
00:08:43,062 --> 00:08:46,288
of the data. If I have all of the information, I'll be

134
00:08:46,294 --> 00:08:49,936
able to answer all the questions, right? So one approach

135
00:08:49,968 --> 00:08:53,190
to that would just be logging everything. If we have every little

136
00:08:53,960 --> 00:08:57,056
aspect of everything that's happened, then we'll be in good shape,

137
00:08:57,088 --> 00:09:00,776
right? Not really, because you're kind of building

138
00:09:00,878 --> 00:09:04,920
this dumpster of data that is hard to navigate.

139
00:09:05,420 --> 00:09:09,012
You don't want to spend all of your time diagnosing through logs

140
00:09:09,076 --> 00:09:12,268
that can be just as ineffective as throwing hypotheses on a

141
00:09:12,274 --> 00:09:14,540
wall and trying to fix something in production.

142
00:09:14,880 --> 00:09:18,664
So you really want a better, more thoughtful

143
00:09:18,712 --> 00:09:22,920
approach to how you want to kind of achieve observability

144
00:09:23,000 --> 00:09:26,736
in your system. So the

145
00:09:26,758 --> 00:09:31,388
big question here is going to be, do you know the unknowns? So monitoring

146
00:09:31,484 --> 00:09:35,004
lets you answer a specific known question like what's a response

147
00:09:35,052 --> 00:09:38,544
time? What's my average response time? Observability really takes

148
00:09:38,582 --> 00:09:42,036
it a step beyond that and will let you say something like,

149
00:09:42,218 --> 00:09:45,748
oh, one of my customers is having a problem,

150
00:09:45,834 --> 00:09:49,012
but only one of them. So what's unique to them that's causing issues.

151
00:09:49,066 --> 00:09:52,584
So that's where observability really comes into play. It lets you work

152
00:09:52,622 --> 00:09:56,024
with higher cardinality data to really be able to

153
00:09:56,062 --> 00:09:59,876
kind of slice and dice information that you're gathering from your systems

154
00:09:59,908 --> 00:10:03,640
to be able to get to root cause analysis very effectively.

155
00:10:06,830 --> 00:10:10,794
So you might ask yourself, can I just buy something to do this? So you

156
00:10:10,832 --> 00:10:14,118
can. There's a lot of tools out there that are labeled as observability

157
00:10:14,214 --> 00:10:17,882
tools, but it's going to take some sweat equity to make it valuable.

158
00:10:17,946 --> 00:10:22,506
So just because you have purchased an observability

159
00:10:22,618 --> 00:10:25,710
platform or tool doesn't mean that your system is observable.

160
00:10:26,050 --> 00:10:29,314
So you really want to be sure that you're picking the tools that are right

161
00:10:29,352 --> 00:10:32,754
for your environment. So the thing whats is right for

162
00:10:32,952 --> 00:10:36,754
a six person startup is not necessarily coming to be the right

163
00:10:36,872 --> 00:10:40,370
tool for an enterprise

164
00:10:40,710 --> 00:10:44,134
company with thousands of people. So you really just want to be

165
00:10:44,172 --> 00:10:48,038
thoughtful about your approach to this and not just jump on the new kind

166
00:10:48,044 --> 00:10:51,346
of buzziest thing that whats your inbox

167
00:10:51,538 --> 00:10:52,870
from a vendor.

168
00:10:56,110 --> 00:10:59,514
So how does any of this help me?

169
00:10:59,712 --> 00:11:03,226
Can observable system will really help you fix problems that

170
00:11:03,248 --> 00:11:07,974
you didn't anticipate and be able to navigate

171
00:11:08,102 --> 00:11:11,966
requests across your system in a way that you weren't able to do before.

172
00:11:12,068 --> 00:11:15,322
So what I always kind of like to highlight

173
00:11:15,386 --> 00:11:19,070
here is that at a company that I worked at, we had an engineer,

174
00:11:19,570 --> 00:11:22,882
we'll call him Bob, and he knew everything about

175
00:11:22,936 --> 00:11:26,098
one legacy part of our platform.

176
00:11:26,264 --> 00:11:29,246
He whats the only one that knew it. He was the only one that supported

177
00:11:29,278 --> 00:11:33,054
it, unfortunately for him. And I think that's a common scenario

178
00:11:33,102 --> 00:11:36,914
that happens. And the risk that you run when you kind of silo knowledge

179
00:11:36,962 --> 00:11:41,480
that way and you don't make an effort to kind of make that

180
00:11:42,090 --> 00:11:45,842
part of your architecture more observable, is that if Bob

181
00:11:45,906 --> 00:11:49,260
quits or something tragic happens,

182
00:11:49,710 --> 00:11:52,666
you no longer have any insight into that and it leaves you in a really

183
00:11:52,688 --> 00:11:55,994
bad place. Bob gets hit by a bus and suddenly you're trying to

184
00:11:56,112 --> 00:11:59,494
reverse engineer something that nobody has any familiarity

185
00:11:59,542 --> 00:12:02,446
with. So it'd be a lot better if you were getting some useful outputs of

186
00:12:02,468 --> 00:12:05,598
it. So it's kind of the idea if you need to

187
00:12:05,684 --> 00:12:08,954
slow down to speed up, it's better to put a little bit of effort

188
00:12:09,002 --> 00:12:12,146
into this before you need it, so that you're not caught on your heels when

189
00:12:12,168 --> 00:12:12,900
you do.

190
00:12:15,870 --> 00:12:18,620
And just to kind of paint that picture again.

191
00:12:19,150 --> 00:12:22,140
So you've been paged, so what's going to happen now?

192
00:12:24,510 --> 00:12:27,878
A lot of us would try switching it off and

193
00:12:27,904 --> 00:12:31,038
then switching it on again. So when it's the middle of the

194
00:12:31,044 --> 00:12:34,606
night and you're getting paged and you don't have all the information you need to

195
00:12:34,628 --> 00:12:38,014
really know what's going on, but somewhere in a runbook it says just

196
00:12:38,052 --> 00:12:41,938
restart the service. If this particular state

197
00:12:42,104 --> 00:12:45,154
gets reported, then that's probably what you're going to do. You're not going to spend

198
00:12:45,192 --> 00:12:48,594
a lot of time trying to figure out the root cause, and you may be

199
00:12:48,632 --> 00:12:52,280
off call tomorrow and this is going to be somebody else's problem.

200
00:12:53,850 --> 00:12:57,494
But really what you want to be able to do is make your systems better.

201
00:12:57,612 --> 00:13:00,886
So to do that, you need to be able to answer some questions about the

202
00:13:00,908 --> 00:13:04,714
sort of incident you want to know who's being impacted. And if you're just working

203
00:13:04,752 --> 00:13:08,634
with aggregate data, you may not be able to understand that. So if I

204
00:13:08,672 --> 00:13:12,826
know who's being impacted, I might have a better sense of urgency. So if

205
00:13:12,848 --> 00:13:16,086
it's something like a canary in production triggered,

206
00:13:16,198 --> 00:13:19,934
can alert, I might be able to ignore it until tomorrow. But if

207
00:13:19,972 --> 00:13:23,198
it's potentially like our biggest customer and they just onboarded a

208
00:13:23,204 --> 00:13:26,906
bunch of users, it really may be an all hands on deck scenario. But having

209
00:13:26,948 --> 00:13:30,914
that information lets me really evaluate and assess the

210
00:13:30,952 --> 00:13:34,594
priority of the incident. Do I have

211
00:13:34,632 --> 00:13:38,034
what I need to resolve it? So do I have enough information available to me

212
00:13:38,072 --> 00:13:41,702
to either resolve the issue or kind of hand it off to somebody who

213
00:13:41,756 --> 00:13:45,174
has the information that they need to without just sort

214
00:13:45,212 --> 00:13:48,760
of flying blindly into an issue.

215
00:13:49,210 --> 00:13:52,690
I want to know where the problem is. So I don't want

216
00:13:52,700 --> 00:13:56,266
to just start kind of at what

217
00:13:56,288 --> 00:13:59,514
I consider the beginning or the end. I'd like to have some information about

218
00:13:59,552 --> 00:14:03,462
where this is happening. If it's something that is caused

219
00:14:03,526 --> 00:14:06,506
upstream and I'm just feeling the pain of it here at the end where the

220
00:14:06,528 --> 00:14:09,166
customer sits, I want to know whats. I don't want to have to kind of

221
00:14:09,188 --> 00:14:12,766
guess. I also want to know when the issue started. So we

222
00:14:12,788 --> 00:14:16,026
want to be aware of whether or not this is something that we've

223
00:14:16,058 --> 00:14:19,650
been trending towards over time, or is this very sudden.

224
00:14:20,230 --> 00:14:22,738
And we also want to know how we ended up in the state so that

225
00:14:22,744 --> 00:14:25,140
we can prevent it from happening again, obviously.

226
00:14:28,350 --> 00:14:31,750
So that brings us to the three pillars of observability.

227
00:14:31,830 --> 00:14:35,520
So we've talked a little bit about some of the kind of more

228
00:14:37,810 --> 00:14:41,326
conceptual ideas around observability, and we're going to get into some of the

229
00:14:41,348 --> 00:14:44,970
more kind of nitty gritty of the nuts and bolts of what people

230
00:14:45,060 --> 00:14:47,860
consider traditional observability today.

231
00:14:49,670 --> 00:14:53,058
So metrics is a good starting point. Metrics are

232
00:14:53,064 --> 00:14:56,462
intended to provide statistical information aggregate.

233
00:14:56,526 --> 00:14:59,478
So this is what we're all kind of familiar with. It can give you a

234
00:14:59,484 --> 00:15:02,470
really good indication of the current state of things,

235
00:15:02,620 --> 00:15:06,246
and it's a great place to set your alerting. And this is more

236
00:15:06,268 --> 00:15:09,834
like that traditional monitoring where it's kind of at a high

237
00:15:09,872 --> 00:15:13,078
level. It's a really good vehicle

238
00:15:13,174 --> 00:15:16,522
for storing information about your systems, but it's not

239
00:15:16,576 --> 00:15:20,042
great for doing diagnostics because you've lost all of that

240
00:15:20,096 --> 00:15:23,646
good kind of connective tissue data that the

241
00:15:23,668 --> 00:15:27,418
metric is made up of. So once you have an incident, you can't

242
00:15:27,434 --> 00:15:31,466
drill in any further to understand what happened. So if you see a spike,

243
00:15:31,658 --> 00:15:35,074
you kind of have to do your own correlation. When you start to dig into

244
00:15:35,112 --> 00:15:38,546
your logs based on timestamps or other information that you have built, it's not

245
00:15:38,568 --> 00:15:39,700
done for you.

246
00:15:42,710 --> 00:15:46,342
Distributed traces are the shiny new things

247
00:15:46,396 --> 00:15:50,178
that we've gotten with application observability. That's really exciting.

248
00:15:50,274 --> 00:15:54,006
So traditionally, a trace traces something within a particular

249
00:15:54,108 --> 00:15:58,482
location. So I always think of like a traditional database,

250
00:15:58,546 --> 00:16:02,058
you can run a query, you can trace that query and understand

251
00:16:02,144 --> 00:16:05,578
everything that's happening along the way. But a distributed trace will let

252
00:16:05,584 --> 00:16:09,910
you do a similar kind of following

253
00:16:09,990 --> 00:16:13,106
of a request, but it can hop across different resources,

254
00:16:13,158 --> 00:16:16,574
which is what makes it really kind of magical when you're thinking about

255
00:16:16,692 --> 00:16:19,966
trying to understand maybe a customer experience. So you

256
00:16:19,988 --> 00:16:23,882
know that they started by trying to make a particular request,

257
00:16:23,946 --> 00:16:27,246
say they're like trying to check out, you're selling something and they're

258
00:16:27,278 --> 00:16:31,122
trying to check out. So it starts there and it may hit

259
00:16:31,176 --> 00:16:34,610
a whole bunch of different back end services. So you may be looking at customer

260
00:16:34,680 --> 00:16:38,294
ids, you may be looking up skus, you might be

261
00:16:38,412 --> 00:16:41,666
checking inventory and whats sort of thing. And those may all be different systems.

262
00:16:41,698 --> 00:16:45,206
So with distributed tracing, you'll be able to trace that the

263
00:16:45,228 --> 00:16:46,040
whole way.

264
00:16:50,460 --> 00:16:54,350
So this is just a look at what a distributed trace might look like.

265
00:16:54,880 --> 00:16:58,268
And what you can see is that the trace itself

266
00:16:58,354 --> 00:17:01,436
is comprised of spans which are little units of work.

267
00:17:01,618 --> 00:17:05,410
And this is demo data. This is up until midterry demo data,

268
00:17:06,020 --> 00:17:09,920
but it shows you that we're coming across different

269
00:17:10,070 --> 00:17:13,312
resources and languages. So it really

270
00:17:13,366 --> 00:17:17,252
kind of gives you a good visualization of that start to finish sort of

271
00:17:17,386 --> 00:17:21,444
understanding you can get of something that is requested of

272
00:17:21,482 --> 00:17:22,310
your application.

273
00:17:27,990 --> 00:17:31,322
And this is just a look at one of the spans expanded.

274
00:17:31,406 --> 00:17:34,774
So you can see that we've got some

275
00:17:34,812 --> 00:17:38,438
kind of custom resource information here, and we have detailed down

276
00:17:38,524 --> 00:17:41,830
to the level of the actual product name.

277
00:17:41,900 --> 00:17:46,074
So that National Park Foundation Explorer scope is an actual product

278
00:17:46,272 --> 00:17:49,994
that we've looked up. So just kind of highlighting just how

279
00:17:50,032 --> 00:17:53,414
granular you can get with your span and your trace

280
00:17:53,462 --> 00:17:54,460
data here.

281
00:17:58,470 --> 00:18:02,338
And then logs are another really important part of observability.

282
00:18:02,434 --> 00:18:06,086
So earlier I said you don't want to just dump everything

283
00:18:06,188 --> 00:18:09,910
into your logs and assume that that's the best foray into

284
00:18:10,060 --> 00:18:13,522
being able to resolve issues. But logs really do

285
00:18:13,596 --> 00:18:17,206
hold a whole lot of really great information that can help you troubleshoot

286
00:18:17,238 --> 00:18:21,030
things, and they're more powerful when you can correlate them to other signals,

287
00:18:21,190 --> 00:18:24,766
like a distributed trace or a span. So the great thing

288
00:18:24,788 --> 00:18:28,974
about logs is that they can have

289
00:18:29,012 --> 00:18:32,350
really high cardinality, which means that you've got more

290
00:18:32,500 --> 00:18:36,094
independent pieces of data that you can kind of pivot on. So something like

291
00:18:36,132 --> 00:18:39,682
a user id, an organization id, some of your custom

292
00:18:39,736 --> 00:18:43,218
resources from your services, that can really help you understand

293
00:18:43,304 --> 00:18:47,246
things at a very precise level, as opposed to a more aggregate

294
00:18:47,278 --> 00:18:50,486
level where you're looking at things maybe over just like rolled up by

295
00:18:50,508 --> 00:18:53,990
a time by a service name or something

296
00:18:54,060 --> 00:18:54,920
like that.

297
00:19:00,850 --> 00:19:04,814
So to quickly review so far, just want to reiterate

298
00:19:04,862 --> 00:19:08,190
that collecting data does not make a system observable.

299
00:19:08,270 --> 00:19:12,350
You do have to collect data to achieve observability but collecting data alone

300
00:19:12,430 --> 00:19:14,420
will not accomplish that for you.

301
00:19:17,140 --> 00:19:20,288
The value really lies in the ability to answer questions.

302
00:19:20,374 --> 00:19:23,636
So again, when we talk about outcomes instead of outputs, this is

303
00:19:23,658 --> 00:19:26,724
the outcome that we want. We want to be able to answer questions that we

304
00:19:26,762 --> 00:19:30,260
need to ask of our systems, to have healthy

305
00:19:30,340 --> 00:19:34,840
and have systems that we really understand thoroughly.

306
00:19:38,540 --> 00:19:42,200
So one of the downsides of just amassing a lot of data,

307
00:19:42,350 --> 00:19:45,892
storing it for later in case you ever need it, is that it's very expensive

308
00:19:46,036 --> 00:19:49,784
and it's hard to navigate and it's just wasting space and resources

309
00:19:49,832 --> 00:19:53,212
for you. So just kind of hammering home the point that

310
00:19:53,266 --> 00:19:56,590
just collecting data is not the answer that we're looking for here.

311
00:19:59,950 --> 00:20:03,674
And when you kind of start on your

312
00:20:03,712 --> 00:20:07,626
journey to observability, there's a lot of solutions out there.

313
00:20:07,728 --> 00:20:12,606
So you may find yourself really kind

314
00:20:12,628 --> 00:20:15,854
of experiencing fatigue with the different tools that

315
00:20:15,892 --> 00:20:19,466
you're attempting to implement, the number of sales calls

316
00:20:19,498 --> 00:20:23,780
you're getting about different sorts of observability tools, and really just kind of

317
00:20:24,390 --> 00:20:27,618
the concept of observability as this kind of huge

318
00:20:27,704 --> 00:20:31,554
army of different tools and services you need to implement within

319
00:20:31,752 --> 00:20:35,022
your environment. And that's not necessarily,

320
00:20:35,086 --> 00:20:38,642
it can be simpler than things, but it can be kind of overwhelming

321
00:20:38,706 --> 00:20:42,614
when you're trying to figure out the best approach for your

322
00:20:42,652 --> 00:20:46,694
needs. And again, your needs and your team

323
00:20:46,732 --> 00:20:50,018
will really dictate the solution needed. So you

324
00:20:50,044 --> 00:20:53,660
can start very simply and small if that's what your team needs.

325
00:20:54,590 --> 00:20:58,122
So you don't need to go all in and buy the most

326
00:20:58,176 --> 00:21:01,706
expensive, shiniest thing. It's not necessarily better for what you're trying to

327
00:21:01,728 --> 00:21:04,794
accomplish. So you really need to evaluate and choose the right

328
00:21:04,832 --> 00:21:08,526
solution for you, be that something that a vendor provides or

329
00:21:08,548 --> 00:21:12,094
something that you can kind of build and maintain in house. It really

330
00:21:12,132 --> 00:21:16,066
depends on your specific situation. There's not

331
00:21:16,088 --> 00:21:18,740
just like a one size fits all approach for this.

332
00:21:20,950 --> 00:21:24,514
And that brings us to open telemetry. So before we jump into

333
00:21:24,552 --> 00:21:27,526
this, I do want to just say open telemetry is not the only way to

334
00:21:27,548 --> 00:21:31,254
achieve observability. It's something that we

335
00:21:31,292 --> 00:21:35,510
really like at telemetry hub because it's introducing a standard for observability.

336
00:21:36,010 --> 00:21:40,186
And that standard lets that correlation of

337
00:21:40,368 --> 00:21:41,770
the different signals.

338
00:21:44,030 --> 00:21:48,214
It's managed very effectively by the open telemetry instrumentation

339
00:21:48,262 --> 00:21:50,846
so that you don't have to do it yourself. So it takes a lot of

340
00:21:50,868 --> 00:21:54,750
the effort out of achieving a really observable system

341
00:21:54,900 --> 00:21:58,960
and does it for you through a really amazing project.

342
00:22:00,690 --> 00:22:03,934
So open telemetry is an open source

343
00:22:03,982 --> 00:22:08,210
project. It's the second most active CNCF project after Kubernetes.

344
00:22:08,870 --> 00:22:12,530
All of the big players have kind of bought in and

345
00:22:12,600 --> 00:22:16,502
started to provide support for it. It's integrated directly into

346
00:22:16,556 --> 00:22:20,450
a lot of cloud native stacks, which is great and it's

347
00:22:20,610 --> 00:22:23,958
fairly simple to use and there's a

348
00:22:23,964 --> 00:22:27,286
lot of customization so that you can

349
00:22:27,388 --> 00:22:31,046
really instrument something that's specific to the details of your application

350
00:22:31,148 --> 00:22:34,506
so you can really understand what you need to know. But it's a

351
00:22:34,528 --> 00:22:38,186
great project to be able to sort of start simply. There's some great documentation on

352
00:22:38,208 --> 00:22:41,398
the website about how you can get up and running some really great tools,

353
00:22:41,414 --> 00:22:44,986
whats you can users. And again, when we talk about it's not

354
00:22:45,008 --> 00:22:47,934
all or nothing, you can kind of start playing around with this, get an idea

355
00:22:47,972 --> 00:22:50,986
of what it can do for you, and if it's something you want to explore

356
00:22:51,098 --> 00:22:55,220
without having to go all in and spend tons and tons of cycles on it.

357
00:22:57,590 --> 00:23:01,186
This really introduces a shared standard, so it provides a

358
00:23:01,208 --> 00:23:04,882
shared concept of those metrics, traces and logs that we were talking

359
00:23:04,936 --> 00:23:08,930
about, and a shared protocol for sending and receiving those signals.

360
00:23:10,150 --> 00:23:13,814
It comes with the sdks in a lot of popular languages and things

361
00:23:13,852 --> 00:23:17,206
sort of in varying degrees of maturity, and all of that

362
00:23:17,228 --> 00:23:21,206
is available on the website. So if you

363
00:23:21,228 --> 00:23:24,474
can understand where all of those lie and the great things about it being open

364
00:23:24,512 --> 00:23:28,346
source, whats if your preferred language isn't as mature as you would like

365
00:23:28,368 --> 00:23:31,440
it to be, you can contribute to it.

366
00:23:34,460 --> 00:23:38,840
So the components of the project are really the cross language specification

367
00:23:39,180 --> 00:23:42,104
tools to collect, transform and export the data,

368
00:23:42,302 --> 00:23:45,704
the sdks and the auto

369
00:23:45,752 --> 00:23:47,740
instrumenting and contribute packages.

370
00:23:52,250 --> 00:23:55,126
So you might be saying, I thought that open source meant you have to do

371
00:23:55,148 --> 00:23:58,822
it yourself. Sometimes that's the case, and you can make this

372
00:23:58,876 --> 00:24:02,346
a very complex implementation if you want to, and that's where your

373
00:24:02,368 --> 00:24:05,974
journey takes you. But it doesn't have to be. There's some really good auto instrumentation

374
00:24:06,022 --> 00:24:09,722
that you get with a very simple implementation of open

375
00:24:09,776 --> 00:24:13,318
telemetry. So it doesn't have to be hard.

376
00:24:13,424 --> 00:24:16,666
So this is just a quick screen grab from the telemetry hub

377
00:24:16,698 --> 00:24:21,022
documentation, but this is basically what you would need to kind of get started

378
00:24:21,156 --> 00:24:25,438
instrumenting a Python application. Pretty straightforward and

379
00:24:25,524 --> 00:24:28,654
again like great place to start, and then you can add complexity

380
00:24:28,702 --> 00:24:31,986
as you go and as you know what you really want to be able to

381
00:24:32,008 --> 00:24:34,020
get out of your system.

382
00:24:37,450 --> 00:24:41,186
Another really cool thing you get from open telemetry

383
00:24:41,218 --> 00:24:45,334
is open telemetry collector, so it can receive,

384
00:24:45,382 --> 00:24:48,934
process and export your signal data, but it's a lot more powerful

385
00:24:48,982 --> 00:24:52,266
than just that. It's also, just to

386
00:24:52,288 --> 00:24:55,566
clarify, you don't have to run the open symmetry collector to be

387
00:24:55,588 --> 00:24:59,434
able to get your signal data out of your application. Once you've instrumented,

388
00:24:59,482 --> 00:25:03,294
you can actually send that data directly to a backend, but the otel collector

389
00:25:03,342 --> 00:25:06,626
gives you some really good control with that processing step so

390
00:25:06,648 --> 00:25:09,666
that you can be very particular about what you're sending to

391
00:25:09,688 --> 00:25:10,660
your back end,

392
00:25:14,070 --> 00:25:17,826
you know, sounds good. I can instrument open telemetry in my

393
00:25:17,848 --> 00:25:21,542
application and in my infrastructure, and that'll give me all the information I need

394
00:25:21,596 --> 00:25:24,854
to achieve observability. What do I do with it?

395
00:25:25,052 --> 00:25:28,566
So this is the great thing about open telemetry, is that it

396
00:25:28,588 --> 00:25:32,118
gives you a really vendor agnostic approach to generating

397
00:25:32,214 --> 00:25:35,674
and sending your telemetry data. So you can send

398
00:25:35,712 --> 00:25:39,226
it to us at telemetry hub. You can send it to one

399
00:25:39,248 --> 00:25:42,874
of the big monitoring vendors like Datadog. You can keep it in

400
00:25:42,912 --> 00:25:46,826
house and build your own tools around it. You can use other open source solutions.

401
00:25:46,938 --> 00:25:50,046
It really leaves you in a good position to sort of try things out

402
00:25:50,068 --> 00:25:53,850
and see what works for you and also to let your observability

403
00:25:53,930 --> 00:25:57,294
implementations kind of evolve over time. So if you outgrow

404
00:25:57,342 --> 00:26:01,010
a solution, you don't have to rip out proprietary agents and install

405
00:26:01,160 --> 00:26:05,058
something new. You can just point your signal data somewhere else. That gives you a

406
00:26:05,064 --> 00:26:07,560
better visualization for what you want to use.

407
00:26:09,610 --> 00:26:13,206
One of the other things about the open symmetry collector that helps to support this

408
00:26:13,228 --> 00:26:17,286
is that you can send data to multiple places. So if

409
00:26:17,308 --> 00:26:20,266
you want to keep your log files in house, as well as sending them to

410
00:26:20,288 --> 00:26:23,210
a log exploration tool, you can do that using the collector.

411
00:26:28,090 --> 00:26:31,526
All right, so one quick analogy to

412
00:26:31,548 --> 00:26:34,886
kind of bring this into the physical world conceptually,

413
00:26:35,078 --> 00:26:38,714
and we are all set. So I

414
00:26:38,752 --> 00:26:42,234
stole this from our engineering lead,

415
00:26:42,352 --> 00:26:46,438
Lance here at telemetry hub, and I really like this kind of illustration

416
00:26:46,534 --> 00:26:50,302
of observability. So if you think of home

417
00:26:50,356 --> 00:26:53,230
cooking, so it's you by yourself in your kitchen,

418
00:26:53,970 --> 00:26:58,094
you're the one that's touching everything, so you know exactly what's happening. So when you

419
00:26:58,132 --> 00:27:01,474
create your scrambled eggs for breakfast, you know,

420
00:27:01,672 --> 00:27:05,026
when you took the eggs out of the fridge, you could theoretically know

421
00:27:05,048 --> 00:27:08,594
how cold the fridge was, you know, whether you

422
00:27:08,632 --> 00:27:11,782
put in milk or butter, and you

423
00:27:11,836 --> 00:27:15,446
kind of have all the information you need to be able to understand why

424
00:27:15,468 --> 00:27:17,480
that meal turned out the way it did.

425
00:27:20,490 --> 00:27:23,878
But once you move into a restaurant, everything kind of

426
00:27:24,044 --> 00:27:27,138
turns on its head. So if you've ever worked in food service, you know this,

427
00:27:27,164 --> 00:27:30,086
but there's many stations, and the bigger the restaurant,

428
00:27:30,198 --> 00:27:33,274
the more complex it is and the more things that can go wrong along the

429
00:27:33,312 --> 00:27:36,830
way, because an order can pass through many different stations.

430
00:27:37,170 --> 00:27:40,938
So it starts with a services at a table,

431
00:27:41,034 --> 00:27:44,654
taking an order, she may pin that somewhere for

432
00:27:44,772 --> 00:27:48,174
the person that's executing to start the

433
00:27:48,212 --> 00:27:52,018
order. And it can already have fallen apart right there. And you're not

434
00:27:52,024 --> 00:27:55,058
going to know as easily as you would if it was just you by yourself.

435
00:27:55,144 --> 00:27:57,460
So she takes an order,

436
00:27:58,950 --> 00:28:02,366
the chefs work on it. It goes down the line through all the sous chefs

437
00:28:02,398 --> 00:28:05,966
who are adding salt and adding sides and all this, and it

438
00:28:06,008 --> 00:28:09,122
ends up back on the table. And the soup is too salty.

439
00:28:09,186 --> 00:28:12,178
But we don't know who did that or where it happened or how to prevent

440
00:28:12,194 --> 00:28:15,570
it from happening again because we don't have all the information we need to be

441
00:28:15,580 --> 00:28:18,938
able to really understand our entire restaurant system.

442
00:28:19,024 --> 00:28:22,202
So the system being all the different things we're using and the people

443
00:28:22,256 --> 00:28:25,722
involved. So just a good way to kind of think about

444
00:28:25,776 --> 00:28:29,010
observability. And when you need more or less. So if it's

445
00:28:29,030 --> 00:28:32,874
just you in the kitchen by yourself, then maybe the thermometer

446
00:28:32,922 --> 00:28:36,078
on your oven is all you need to be fully observable. And you don't need

447
00:28:36,084 --> 00:28:39,694
to invest in anything more complex or more expensive than

448
00:28:39,732 --> 00:28:43,166
that. But in a restaurant scenario, you may need a lot more monitoring to

449
00:28:43,188 --> 00:28:46,634
be able to really understand what's happening. And that can be applied

450
00:28:46,682 --> 00:28:48,640
to your system.

451
00:28:49,890 --> 00:28:53,158
And so that is it for me today.

452
00:28:53,324 --> 00:28:56,454
Love to talk about this stuff, so feel free to email me.

453
00:28:56,572 --> 00:28:59,650
Sarah@telemetryhub.com and thanks for listening.

