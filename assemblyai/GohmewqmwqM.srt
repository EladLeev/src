1
00:00:27,810 --> 00:00:31,026
My name is Robert Ross, but people like to call me Bobby

2
00:00:31,058 --> 00:00:34,546
tables. I am the CEO and co founder of Fire Hydrant.

3
00:00:34,578 --> 00:00:38,674
We are an incident management platform. Previously, I am a cyber liability engineer

4
00:00:38,722 --> 00:00:42,742
at namely, I also worked at Digitalocean in the pretty earlier days.

5
00:00:42,796 --> 00:00:46,006
I've been on call for several years, still on call. Even as

6
00:00:46,028 --> 00:00:49,966
CEO. I've put out fires. A lot of the time they were my own

7
00:00:50,108 --> 00:00:53,162
that I had to put out. And then I am a cocktail enthusiast,

8
00:00:53,226 --> 00:00:56,830
as you can kind of tell behind me. I'm also a live coder.

9
00:00:57,410 --> 00:01:00,858
What I've been doing every Thursday has been building a terraform provider,

10
00:01:00,954 --> 00:01:04,926
live, writing a bunch of go having a bunch of fun. And that's 05:00 p.m.

11
00:01:05,028 --> 00:01:08,218
On Eastern on Thursdays. But so really quickly,

12
00:01:08,324 --> 00:01:11,186
we're going to go over what we're talking about. So we are going to talk

13
00:01:11,208 --> 00:01:14,754
about just some of the basics of chaos engineering and kind of how to

14
00:01:14,792 --> 00:01:18,178
run a chaos experiment, but for incident response. And that's

15
00:01:18,194 --> 00:01:21,702
going to be the core of this entire presentation, really.

16
00:01:21,756 --> 00:01:25,186
We're also going to talk about how to add process that doesn't weigh

17
00:01:25,218 --> 00:01:29,046
down teams. That's a really hard thing to do. So a

18
00:01:29,068 --> 00:01:32,362
quick overview of chaos engineering. We're going to start off with a quote. This comes

19
00:01:32,416 --> 00:01:36,806
directly from principlesofchaos.org, but it says, chaos engineering

20
00:01:36,838 --> 00:01:40,902
is the discipline of experiences on a system in order to build confidence

21
00:01:40,966 --> 00:01:44,890
in the system's capability to withstand turbulent conditions in production.

22
00:01:44,970 --> 00:01:48,414
Another way that this is commonly said, and I think the

23
00:01:48,452 --> 00:01:51,754
Gremlin team has popularized this, is you can think of it like a flu shot,

24
00:01:51,802 --> 00:01:55,250
right? You're injecting in a failure to create

25
00:01:55,320 --> 00:01:58,606
immunity. Another way you can maybe think about it is maybe a controlled

26
00:01:58,638 --> 00:02:02,046
burn. You're helping burn down the forest

27
00:02:02,078 --> 00:02:05,794
so it doesn't burn down the entire forest. At certain points,

28
00:02:05,912 --> 00:02:09,106
you're trying to make things fail. Sometimes they

29
00:02:09,128 --> 00:02:11,878
may not. And what it does is it allows you to kind of find the

30
00:02:11,884 --> 00:02:15,394
weak spots and ultimately reinforce them. So a few examples of chaos

31
00:02:15,442 --> 00:02:19,090
experiments that you may run, and these are technical chaos experiments,

32
00:02:19,170 --> 00:02:22,522
would be adding latency to a postgres instance. Really simple

33
00:02:22,576 --> 00:02:26,486
one. And a possible outcome of that is maybe now your requests

34
00:02:26,518 --> 00:02:29,994
to your app servers start queuing and the whole site topples over.

35
00:02:30,032 --> 00:02:33,342
I've experienced that a couple of times in my career. Maybe you black

36
00:02:33,396 --> 00:02:36,746
hole traffic intentionally to redis and caching breaks,

37
00:02:36,778 --> 00:02:40,526
but the site continues to operate. Maybe just a little bit more slow and then

38
00:02:40,548 --> 00:02:44,302
killing processes randomly. Requests are half fulfilled, leaving data

39
00:02:44,356 --> 00:02:47,122
in an inconsistent state, never a fun situation.

40
00:02:47,256 --> 00:02:50,450
So all these examples, super simple, but hopefully the idea

41
00:02:50,520 --> 00:02:54,034
kind of comes across. Now, process experiences can be

42
00:02:54,072 --> 00:02:58,014
run in a very similar fashion. So chaos engineering obviously focuses

43
00:02:58,062 --> 00:03:02,134
on kind of the computers and how they interact with each other when thrown into

44
00:03:02,172 --> 00:03:05,654
a certain state. But with a process experiences, there are

45
00:03:05,772 --> 00:03:09,750
so many other outcomes that could possibly happen. And the reason I like

46
00:03:09,820 --> 00:03:13,850
process experiments is that people are going to solve problems different ways.

47
00:03:14,000 --> 00:03:17,834
Myself, I'm going to look for logs and find what I need to find with

48
00:03:17,872 --> 00:03:22,106
a different route than maybe my colleague would. And if

49
00:03:22,128 --> 00:03:25,002
you have a seven one outage and you ask someone to update the status page,

50
00:03:25,056 --> 00:03:27,550
there could be a bunch of ways that they go about and do that.

51
00:03:27,620 --> 00:03:31,866
Rolling back a deploy, maybe I revert a merge, but somebody else uses spinnaker

52
00:03:31,898 --> 00:03:35,874
to roll back a deploy. There's so many different ways that we can

53
00:03:35,912 --> 00:03:39,822
actually change our systems with only our keyboards.

54
00:03:39,886 --> 00:03:43,042
So how do you run? Can experiment on process?

55
00:03:43,176 --> 00:03:46,306
That's an interesting question. And one of the ways you can

56
00:03:46,328 --> 00:03:50,182
do it is you can have a surprise meeting. So this is something that we

57
00:03:50,236 --> 00:03:54,034
actually did last year is I put my co founder Dylan

58
00:03:54,162 --> 00:03:57,734
in a room and I actually asked him to

59
00:03:57,772 --> 00:04:00,906
update our status page. I did not tell him I was going to do

60
00:04:00,928 --> 00:04:04,346
this like you to do. Pretend there is a seven

61
00:04:04,448 --> 00:04:08,810
incident for fire hydrant and update our status page.

62
00:04:08,960 --> 00:04:13,390
Okay, great. So I'm going to go to status page IO

63
00:04:15,730 --> 00:04:18,874
and I'm not logged in because only Bobby

64
00:04:18,922 --> 00:04:21,760
has credentials for status page.

65
00:04:23,250 --> 00:04:26,020
And now I'm stuck and don't know what to do.

66
00:04:27,430 --> 00:04:31,250
So about 30 seconds is all it took to really find

67
00:04:31,320 --> 00:04:34,594
that an on call engineer could not update our

68
00:04:34,632 --> 00:04:38,226
status page. That's all it took. And it immediately revealed that

69
00:04:38,248 --> 00:04:41,702
Dylan had no access. And we have our own status page product

70
00:04:41,756 --> 00:04:44,914
now. But that was very quickly researched.

71
00:04:44,962 --> 00:04:48,418
He would have had no way to publicly disclose incidents to customers. And that's

72
00:04:48,434 --> 00:04:51,754
part of our SLA to our customers is saying, we will

73
00:04:51,792 --> 00:04:55,578
tell you when we have incidents as fast as possible. You can do this for

74
00:04:55,664 --> 00:04:58,794
any common operation you do during an incident, any of them.

75
00:04:58,832 --> 00:05:02,438
And there are a ton of different operations that if

76
00:05:02,464 --> 00:05:05,982
you really take a microscope to how you operate using

77
00:05:06,036 --> 00:05:09,322
an incident, you probably have had to roll back a bad deploy,

78
00:05:09,466 --> 00:05:12,718
update a replica, config, purge a cache, find a log,

79
00:05:12,804 --> 00:05:16,418
skip a test suite just so something can go to production faster. There are

80
00:05:16,504 --> 00:05:20,190
so many things that we do when we respond to incidents

81
00:05:20,270 --> 00:05:23,934
and when you start to think of them as individual techniques

82
00:05:24,062 --> 00:05:27,374
and create boxes that you can then practice

83
00:05:27,502 --> 00:05:30,966
that's what we're talking about when it says, how do you master the

84
00:05:30,988 --> 00:05:34,006
techniques that then become a part of your process? Because the

85
00:05:34,028 --> 00:05:37,218
reality is that people mitigate incidents,

86
00:05:37,314 --> 00:05:40,866
not process. Process, in a lot of ways can hamper

87
00:05:40,978 --> 00:05:44,586
mitigation of incidents. If a process is too heavy and

88
00:05:44,608 --> 00:05:47,338
like, oh, you have to update the status page and create a Jira ticket and

89
00:05:47,344 --> 00:05:50,410
create a slack room and all these things manually.

90
00:05:51,630 --> 00:05:55,246
That's not helping you solve the problem and all

91
00:05:55,268 --> 00:05:58,926
of that, that's what fire hydrogen is really for, is helping institutionalize and

92
00:05:58,948 --> 00:06:02,254
automate that process. But that's not why we're here. And the other thing that

93
00:06:02,292 --> 00:06:06,414
processes get wrong a lot of the time is they're

94
00:06:06,462 --> 00:06:10,642
prescribing how to do something. This is the only way that

95
00:06:10,696 --> 00:06:13,918
you can add storage to the database,

96
00:06:14,014 --> 00:06:17,922
right? Like, oh, if we're getting out of storage errors, here's the runbook to add

97
00:06:17,976 --> 00:06:21,362
storage. But what if it was a red herring? What if it wasn't

98
00:06:21,426 --> 00:06:24,534
actually storage being out, right? Maybe an error was

99
00:06:24,572 --> 00:06:28,002
just mislabeled. There's a lot of reasons why you don't want to prescribe

100
00:06:28,066 --> 00:06:32,010
processes. You just want to teach the techniques and test those.

101
00:06:32,160 --> 00:06:36,006
So think of each technique as an individual lego brick.

102
00:06:36,198 --> 00:06:39,558
The fun little plastic pieces that we maybe all played

103
00:06:39,574 --> 00:06:43,446
with as kids, I still play with as an adult. And what's interesting about Lego

104
00:06:43,478 --> 00:06:47,146
bricks is that when you have a lot of them, you can create shapes

105
00:06:47,258 --> 00:06:50,862
and you can break it down and build a different shape with the same

106
00:06:50,916 --> 00:06:54,682
bricks. And that's really important because when someone

107
00:06:54,756 --> 00:06:58,094
knows how to use a single break in multiple situations,

108
00:06:58,142 --> 00:07:01,490
in a break, in this analogy as a technique, they can mitigate different

109
00:07:01,560 --> 00:07:05,586
incidents more effectively. Now, if someone only knows how to

110
00:07:05,608 --> 00:07:09,586
make an entire set, they only know how to make the one spaceship,

111
00:07:09,618 --> 00:07:12,786
the one building, whatever it is, just front to back. That's the only thing they've

112
00:07:12,818 --> 00:07:16,870
ever learned. That's not very helpful when it comes to a different

113
00:07:16,940 --> 00:07:20,346
type of incident that comes along. So you should teach how to

114
00:07:20,368 --> 00:07:23,814
use the mitigation techniques individually and then practice

115
00:07:23,862 --> 00:07:27,606
using those within scenarios. Now, all of these are technique

116
00:07:27,638 --> 00:07:30,710
bricks is what Im calling them. I'm deeming them technique bricks.

117
00:07:30,790 --> 00:07:34,110
And if you look at the bottom half here, we have finding logs,

118
00:07:34,450 --> 00:07:38,046
maybe we have an incident, and im like, I got to find the logs and

119
00:07:38,068 --> 00:07:41,162
it says, oh, it looks like caches are maybe stale.

120
00:07:41,226 --> 00:07:45,026
So I ssh into a box, I purge a cache, and then I

121
00:07:45,048 --> 00:07:49,038
roll back a bad deploy that was causing stale caches.

122
00:07:49,134 --> 00:07:52,514
Each of those individual things were not

123
00:07:52,632 --> 00:07:56,530
created specifically for an incident that has stale cache problems.

124
00:07:56,680 --> 00:08:00,146
But because we have individual lego bricks, we can resolve

125
00:08:00,178 --> 00:08:04,482
this incident because we've practices those different things. And now we can get creative

126
00:08:04,546 --> 00:08:08,050
and get really fast at putting together a set

127
00:08:08,140 --> 00:08:11,930
to solve an incident very quickly. Now the bricks are

128
00:08:12,000 --> 00:08:15,574
boring. They're so boring. It's why we don't do them. You don't

129
00:08:15,622 --> 00:08:19,382
practice. Hey, go practice finding logs.

130
00:08:19,446 --> 00:08:23,030
Go practice rolling back a deploy. Go practice doing this.

131
00:08:23,120 --> 00:08:26,458
That's not a thing that we do. It's not something we do in our industry.

132
00:08:26,554 --> 00:08:29,662
And that's not really how any other part

133
00:08:29,716 --> 00:08:33,818
of high performing works. So I'm

134
00:08:33,834 --> 00:08:37,170
going to warn you, I did a lot of marching band. I did

135
00:08:37,240 --> 00:08:39,826
Drumcore International, my co founder did as well.

136
00:08:39,928 --> 00:08:43,394
And we did things in marching band that

137
00:08:43,432 --> 00:08:47,000
were really boring. And this is one of them.

138
00:08:49,130 --> 00:08:53,474
What we did is this. We just marched

139
00:08:53,522 --> 00:08:56,662
forward, put our horns up, march forward,

140
00:08:56,716 --> 00:09:01,130
eight steps, put them down. And that was the entire 3

141
00:09:01,200 --> 00:09:04,234
hours. Sometimes this is all we would do. Now,

142
00:09:04,272 --> 00:09:08,038
that's important. Marching in step with the right technique,

143
00:09:08,134 --> 00:09:11,386
holding your horn correctly. Those were individual techniques that

144
00:09:11,408 --> 00:09:15,390
we were required to master. And the only reason that we did that

145
00:09:15,460 --> 00:09:19,534
was so that once we had mastered that, we could take the field and

146
00:09:19,572 --> 00:09:22,814
do things like this. Now,

147
00:09:22,852 --> 00:09:26,590
if you look at each individual on the screen, they are marching.

148
00:09:26,750 --> 00:09:30,322
They're running marching in steps. They're using the same

149
00:09:30,376 --> 00:09:33,570
techniques that they practice for hours on end.

150
00:09:33,640 --> 00:09:36,798
And then they're basically able to create different shapes and

151
00:09:36,824 --> 00:09:40,406
do it faster, do it slower to create shows. And you need

152
00:09:40,428 --> 00:09:43,926
to identify which techniques lack understanding first.

153
00:09:44,028 --> 00:09:47,346
That's really important. So how can you practice the techniques,

154
00:09:47,378 --> 00:09:51,158
then break it on purpose? Right? That's what the purpose of this is,

155
00:09:51,244 --> 00:09:54,522
is chaos. You want to break something on purpose, but this

156
00:09:54,576 --> 00:09:57,962
time you're going to watch a teammate try to fix it.

157
00:09:58,016 --> 00:10:01,770
Now, this is something we did at, namely, we would actually find someone

158
00:10:01,920 --> 00:10:05,406
that was going to be basically a secret agent, and they

159
00:10:05,428 --> 00:10:09,166
were going to break staging. And it was decided amongst a

160
00:10:09,188 --> 00:10:13,086
few small group of people that all knew what was going on, and they would

161
00:10:13,108 --> 00:10:16,414
decide how they were going to break it and when. And then what we did

162
00:10:16,452 --> 00:10:20,046
is we scheduled time on the calendar for when we were using to break the

163
00:10:20,068 --> 00:10:22,910
environment. And we had a team that they knew this was going to happen.

164
00:10:22,980 --> 00:10:25,766
We just told them, hey, don't have a meeting at this time. Be at your

165
00:10:25,788 --> 00:10:28,758
computer. We're going to break staging, and we're not going to tell you how,

166
00:10:28,844 --> 00:10:32,582
we're not going to tell you any hints. We're just going to see what happens.

167
00:10:32,716 --> 00:10:36,454
And then what we did is we've watched the team and we've watched them

168
00:10:36,492 --> 00:10:39,974
how they identified the problem and mitigated it along the way.

169
00:10:40,092 --> 00:10:43,258
You're going to hit walls. People are going to run into walls. They're going to

170
00:10:43,264 --> 00:10:46,742
break their noses. Inevitably they're going to hit some bottleneck.

171
00:10:46,806 --> 00:10:50,026
It might be that they have to take an alleyway to get to where

172
00:10:50,048 --> 00:10:53,206
they need to go and it just slows them down. Or they just outright can't

173
00:10:53,238 --> 00:10:57,082
do something. They don't have permissions to do it. They don't know how. A runbook

174
00:10:57,146 --> 00:11:00,346
doesn't exist. The capability doesn't exist in the system. Maybe we can't

175
00:11:00,378 --> 00:11:04,174
roll something back. There are a lot of things that you will identify when you

176
00:11:04,212 --> 00:11:07,522
create these scenarios. What you're breaking is your process.

177
00:11:07,656 --> 00:11:10,946
You're trying to break your process. So what you can do

178
00:11:10,968 --> 00:11:14,050
is going back to that list of Lego bricks, is you need to

179
00:11:14,120 --> 00:11:17,938
kind of create your own. You need to find all of the different individual bricks.

180
00:11:17,954 --> 00:11:21,506
And you can do this by going through your retrospectives or post mortems,

181
00:11:21,538 --> 00:11:25,570
depending on your nomenclature, and find the individual techniques

182
00:11:25,650 --> 00:11:29,494
that people used to help resolve the incident and break

183
00:11:29,532 --> 00:11:32,634
those down, make them molecular. And, oh,

184
00:11:32,672 --> 00:11:36,458
we rolled back a bad deploy. That's a technique we used. We found a log

185
00:11:36,544 --> 00:11:39,994
on this system. That's a technique we used. Right. And now

186
00:11:40,032 --> 00:11:43,518
what you can do is you can find your newest teammates and ask them to

187
00:11:43,524 --> 00:11:47,482
do it. So roll out a benign change to an environment. Do it on production,

188
00:11:47,546 --> 00:11:51,098
because production is rarely always the same as staging

189
00:11:51,114 --> 00:11:54,682
or QA. Get on a Zoom call with that teammate

190
00:11:54,826 --> 00:11:58,466
and set it to record, and then ask the teammate to share their screen and

191
00:11:58,488 --> 00:12:02,194
then tell them to roll back the change. That's it. And then just watch what

192
00:12:02,232 --> 00:12:06,270
happens. And this is really interesting, because going back to what I was saying earlier,

193
00:12:06,350 --> 00:12:10,158
people are going to have different ways of rolling back things. There might

194
00:12:10,184 --> 00:12:13,650
be one person that just pushes a new image to a docker registry,

195
00:12:13,730 --> 00:12:17,106
or another person that reverts a commit on GitHub, and another person that knows

196
00:12:17,138 --> 00:12:20,214
how to roll it back using our CI tool. There are a bunch of different

197
00:12:20,252 --> 00:12:23,354
ways to do this. Now, you might actually find someone that

198
00:12:23,392 --> 00:12:26,794
has an extremely efficient way to do this,

199
00:12:26,912 --> 00:12:30,218
and you didn't know how to do that, you didn't know how to do it

200
00:12:30,224 --> 00:12:33,514
that way. And now all of a sudden you've revealed, oh, there's another way

201
00:12:33,552 --> 00:12:36,734
to do this that's even better. And you can kind of put that out into

202
00:12:36,772 --> 00:12:40,160
the team. And now that's the technique that we use.

203
00:12:40,530 --> 00:12:43,966
You can break it down. You find finding logs, right? Do the

204
00:12:43,988 --> 00:12:47,346
same thing with zoom record and share screen. And ask a

205
00:12:47,368 --> 00:12:51,266
teammate to find all the logs for 500 status code requests. Because the

206
00:12:51,288 --> 00:12:54,594
last thing that someone needs to be learning during can incident is

207
00:12:54,632 --> 00:12:57,966
lucine syntax. Are we doing status underscore

208
00:12:57,998 --> 00:13:01,286
code or status uppercase c code or like what is

209
00:13:01,308 --> 00:13:05,014
the index name? There are a lot of things that slow you down during

210
00:13:05,052 --> 00:13:09,098
incident response, and those are the minute details. And the shavings of

211
00:13:09,104 --> 00:13:13,226
those make a pile of time that can really hamper your

212
00:13:13,248 --> 00:13:16,326
process. It's important to practice the techniques.

213
00:13:16,438 --> 00:13:20,282
So with that, you need to identify the core techniques people use

214
00:13:20,336 --> 00:13:24,266
during incidents. And you can do this through chaos engineering principles,

215
00:13:24,298 --> 00:13:27,630
right? Break your system and watch people fix it.

216
00:13:27,700 --> 00:13:31,246
It's not typical chaos engineering we think of as we break the

217
00:13:31,268 --> 00:13:34,846
system and then what happens is that we just try to

218
00:13:34,868 --> 00:13:38,126
see the adverse effects of the system breaking. But we rarely

219
00:13:38,158 --> 00:13:42,286
use the same technique to test process. So once you find those techniques

220
00:13:42,398 --> 00:13:45,874
that people are using during these intentional incidents,

221
00:13:46,002 --> 00:13:49,362
write them down, get them on paper, put them in notion

222
00:13:49,506 --> 00:13:53,874
confluence, whatever you're using to really institutionalize

223
00:13:53,922 --> 00:13:57,186
that knowledge and then practice them regularly, your logging

224
00:13:57,218 --> 00:14:00,486
system is going to change. Inevitably, something is going to change. The way you find

225
00:14:00,508 --> 00:14:03,706
metrics, the way that metrics are labeled. You need to practice the individual

226
00:14:03,808 --> 00:14:07,558
techniques all the time. The same way that we did in marching

227
00:14:07,574 --> 00:14:11,210
band where we would do very boring things every

228
00:14:11,280 --> 00:14:14,766
single day before we did anything that mattered to our

229
00:14:14,788 --> 00:14:18,174
audience at least. So what did we cover? We got through this pretty

230
00:14:18,212 --> 00:14:21,370
quickly. We learned that techniques matter in incident response.

231
00:14:21,450 --> 00:14:25,634
I really strongly emphasize this. It's important that you really

232
00:14:25,752 --> 00:14:29,234
boil down to how you are doing things and practice those

233
00:14:29,272 --> 00:14:33,086
individual things. I highly encourage breaking something and just observing

234
00:14:33,118 --> 00:14:36,418
how a team fixes it. You will reveal a lot

235
00:14:36,504 --> 00:14:40,374
through this. You'll find that someone doesn't have access to something. You'll find that

236
00:14:40,412 --> 00:14:44,134
someone has a different way of doing something that's better just by.

237
00:14:44,252 --> 00:14:47,526
This will take you an hour to do with a small team.

238
00:14:47,628 --> 00:14:51,106
So thank you. My name is Robert Ross. People call me Bobby

239
00:14:51,138 --> 00:14:54,754
tables. Im on Twitter at Bobby Tables GitHub Bobby tables.

240
00:14:54,802 --> 00:14:58,754
Feel free to email me. I'm Robert@firehydrant.com and as always, if you're

241
00:14:58,802 --> 00:15:02,158
looking for an incident can management tool that can help you automate a lot of

242
00:15:02,164 --> 00:15:04,170
the process around incident response,

243
00:15:04,250 --> 00:15:06,730
firehydrant.com is a great place and resource.

