1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer,

3
00:00:06,610 --> 00:00:10,474
a quality engineer who wants to tackle the challenge of improving

4
00:00:10,522 --> 00:00:14,026
reliability in your DevOps? You can enable your DevOps

5
00:00:14,058 --> 00:00:16,510
for reliability with chaos native.

6
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native. Litmus Cloud

7
00:01:16,570 --> 00:01:20,278
hey there, I'm Tim Davis, DevOps advocate with Mzero, and today we are going to

8
00:01:20,284 --> 00:01:23,734
be talking about the pitfalls infrastructure as code code and

9
00:01:23,772 --> 00:01:28,038
how to avoid them. But first I want to thank the sponsors and

10
00:01:28,124 --> 00:01:31,946
the conference folks and everybody for putting on the event,

11
00:01:32,048 --> 00:01:35,146
for accepting me to talk, and hopefully this is helpful for

12
00:01:35,168 --> 00:01:39,020
you. And all of the other speakers that have been speaking today are great.

13
00:01:39,470 --> 00:01:42,666
So it's a pleasure just to be involved a little bit.

14
00:01:42,688 --> 00:01:46,394
About me I did mention I'm currently the DevOps advocate with Mzero. We're an infrastructure

15
00:01:46,442 --> 00:01:50,186
as code automation startup. Previous to that I was with VMware

16
00:01:50,298 --> 00:01:52,958
and I was part of a small group of people that created the cloud and

17
00:01:52,964 --> 00:01:57,170
developer advocacy team there. Before that I was in the networking and security business

18
00:01:57,240 --> 00:02:00,834
unit. Previous to that I just had a string of things of

19
00:02:00,872 --> 00:02:04,974
enterprise architecture, virtualization, engineer, systems administrator,

20
00:02:05,022 --> 00:02:08,126
infrastructure operations. Long story short,

21
00:02:08,248 --> 00:02:10,630
my background is in infrastructure,

22
00:02:10,970 --> 00:02:14,226
but really I've always known that there's no point in delivering

23
00:02:14,258 --> 00:02:17,654
infrastructure just for the sake of delivering it. You're delivering it for the sake of

24
00:02:17,692 --> 00:02:21,178
running the application that runs the business. So I

25
00:02:21,184 --> 00:02:25,034
have always been focused on the application specifically and not

26
00:02:25,072 --> 00:02:28,666
just throwing a bunch of servers and whatnot out there for no reason.

27
00:02:28,848 --> 00:02:31,760
So what infrastructure as code code?

28
00:02:33,170 --> 00:02:37,706
It sounds pretty self explanatory. I mean, it is delivering

29
00:02:37,738 --> 00:02:40,782
and deploying infrastructure using code, but how did we get

30
00:02:40,836 --> 00:02:44,514
there? Folks like myself for years have just

31
00:02:44,552 --> 00:02:48,254
been building physical servers, installing operating systems,

32
00:02:48,302 --> 00:02:51,490
configuring applications. With the advent of public cloud

33
00:02:51,560 --> 00:02:55,182
and automation tools, it kind of changed from physically building stuff

34
00:02:55,256 --> 00:02:59,270
to going into a UI, clicking around and building stuff.

35
00:02:59,420 --> 00:03:03,058
Well, with DevOps and all sorts

36
00:03:03,074 --> 00:03:06,534
of things that are going on these days with application development and

37
00:03:06,572 --> 00:03:10,538
releases, with small startups, smaller companies and even

38
00:03:10,704 --> 00:03:13,894
some bigger companies, developers are actually deploying

39
00:03:13,942 --> 00:03:17,642
more and more infrastructure themselves, some of which is done

40
00:03:17,696 --> 00:03:21,354
through portals that the infrastructure teams have set

41
00:03:21,392 --> 00:03:24,794
up. Some of them are through systems like

42
00:03:24,832 --> 00:03:27,838
OpenStack back in the day, where you could package an API call and throw it

43
00:03:27,844 --> 00:03:30,046
out to figure out what you wanted to do.

44
00:03:30,228 --> 00:03:33,722
Developers though, they don't want to jump into a UI

45
00:03:33,786 --> 00:03:37,042
and click around to get what they want. They want to write

46
00:03:37,096 --> 00:03:40,594
code and do exactly what they do for their normal job. And that's really what

47
00:03:40,632 --> 00:03:44,020
brought around the infrastructure as code model,

48
00:03:44,870 --> 00:03:48,518
and that's just kind of morphed into what we know today

49
00:03:48,684 --> 00:03:52,646
with infrastructure as code and Gitops workflows and all of

50
00:03:52,668 --> 00:03:56,294
these complex tasks. It just kind of came about from

51
00:03:56,332 --> 00:04:00,058
developers wanting to do what developers do, and that's write code.

52
00:04:00,224 --> 00:04:04,122
So what types of pitfalls can come up with

53
00:04:04,176 --> 00:04:07,402
infrastructure as code? I've got good news

54
00:04:07,456 --> 00:04:11,034
and I've got bad news for you. The bad news is it's a lot.

55
00:04:11,072 --> 00:04:14,542
It's both. It's most of the pitfalls that you can think of coming around

56
00:04:14,596 --> 00:04:17,854
with infrastructure, and it's most of the pitfalls that come along with

57
00:04:17,892 --> 00:04:21,902
writing and designing and deploying code. There's a lot going

58
00:04:21,956 --> 00:04:25,826
on here, but really, the way to mitigate that and

59
00:04:25,848 --> 00:04:29,394
to help solve a lot of the issues that come along with infrastructure as

60
00:04:29,432 --> 00:04:33,010
code can simply be solved by bringing together

61
00:04:33,160 --> 00:04:36,718
the development team and the infrastructure, or the questions team. I mean,

62
00:04:36,744 --> 00:04:39,590
it's development and it's Ops. It's DevOps.

63
00:04:40,090 --> 00:04:43,862
So really it's one of those things where a lot of people

64
00:04:43,916 --> 00:04:47,698
think that DevOps is just throwing tools like CI CD, pipelining tools

65
00:04:47,714 --> 00:04:51,146
and stuff like that at a problem. And that's really not it. The tooling is

66
00:04:51,168 --> 00:04:54,010
only a small part of it, DevOps and being successful.

67
00:04:54,750 --> 00:04:58,554
A lot of that is people and process. So if

68
00:04:58,592 --> 00:05:01,754
you do have the communication, kind of break down those old

69
00:05:01,792 --> 00:05:05,278
silos, you will have a lot better time. And one of

70
00:05:05,284 --> 00:05:08,394
the reasons for this is because infrastructure folks have the background,

71
00:05:08,442 --> 00:05:11,854
they have the knowledge. They know exactly what kinds of issues may

72
00:05:11,892 --> 00:05:15,546
come up, how to solve it, what things you may need to think of.

73
00:05:15,668 --> 00:05:19,694
Development folks have been writing code, they've been storing code, they've been deploying

74
00:05:19,742 --> 00:05:23,154
code, editing it. They know exactly what kind of goes into

75
00:05:23,192 --> 00:05:27,438
that process, all the different methodologies. So why not utilize

76
00:05:27,534 --> 00:05:31,062
everybody's experience across the board in this new

77
00:05:31,116 --> 00:05:34,242
venture that brings everybody together to be successful?

78
00:05:34,386 --> 00:05:37,266
So let's kind of break this down a little bit. We'll start with some infrastructure

79
00:05:37,298 --> 00:05:40,646
pitfalls, then we'll move into some code pitfalls,

80
00:05:40,838 --> 00:05:44,554
and we'll just kind of give you a lot of questions to

81
00:05:44,592 --> 00:05:48,490
ask and hopefully set you up for success along the way.

82
00:05:48,640 --> 00:05:52,958
One of the biggest things when it comes to infrastructure as code is

83
00:05:53,124 --> 00:05:56,046
what kind of framework are you coding to use?

84
00:05:56,148 --> 00:06:00,270
Now, this could technically also be a code pitfall,

85
00:06:00,690 --> 00:06:04,000
because there are languages that you may need to learn.

86
00:06:06,210 --> 00:06:09,186
Some of them don't use regular languages. Some of them use their own, like,

87
00:06:09,208 --> 00:06:13,074
for instance, terraform uses HCL. Pulumi, though, will allow you to use

88
00:06:13,112 --> 00:06:16,558
the languages that you're already writing in. So if you're using go or node

89
00:06:16,574 --> 00:06:20,214
JS, you can write your infrastructure as code files with that. But from an

90
00:06:20,252 --> 00:06:24,070
infrastructure perspective, you need to make some choices.

91
00:06:24,730 --> 00:06:28,006
Know, what is your cloud going to look like in the

92
00:06:28,028 --> 00:06:31,526
future? Now, for some folks, you may be in AWS right

93
00:06:31,548 --> 00:06:34,106
now, you may be in Azure, you may be in VMware, you may be in

94
00:06:34,128 --> 00:06:37,434
whatever, and as far as you're concerned, you're never going to move.

95
00:06:37,632 --> 00:06:40,810
You're all in on that. You're always going to be in AWS.

96
00:06:40,890 --> 00:06:44,782
So cloudformation is definitely the right choice for you.

97
00:06:44,916 --> 00:06:48,942
Well, that's great, but what happens if something happens

98
00:06:48,996 --> 00:06:53,178
and your company is acquired twelve months from now and they're

99
00:06:53,194 --> 00:06:56,802
100% azure shop or they use IBM cloud,

100
00:06:56,936 --> 00:07:00,434
you're not going to be able to take those AWS cloudformation scripts with you.

101
00:07:00,472 --> 00:07:04,062
You're going to need to rewrite it or convert them somehow.

102
00:07:04,206 --> 00:07:07,906
There are frameworks though, that allow you to work a little

103
00:07:07,928 --> 00:07:12,370
more easily between clouds. Your terraforms, your pulumis, your terragrunts,

104
00:07:12,450 --> 00:07:16,454
these are more of not a cloud specific framework, but a cloud agnostic or

105
00:07:16,492 --> 00:07:18,840
a multi cloud framework, if you will.

106
00:07:19,290 --> 00:07:22,882
And not only do these give you the ability to kind of move around clouds.

107
00:07:22,946 --> 00:07:26,674
Now, of course it's not as easy as just say, taking your AWS terraform

108
00:07:26,722 --> 00:07:29,786
and deploying it in azure. You're going to have to change the provider, you're going

109
00:07:29,788 --> 00:07:31,886
to have change up a lot of stuff, but it gives you a little bit

110
00:07:31,908 --> 00:07:35,114
better starting point so that you already know the language,

111
00:07:35,162 --> 00:07:38,714
you already know the structure, you already know your deployment methodologies,

112
00:07:38,762 --> 00:07:41,358
all of this kind of stuff, and you don't really have to change that up,

113
00:07:41,444 --> 00:07:45,298
so it gives you a little bit better. Also with terraform, it's not just

114
00:07:45,464 --> 00:07:48,850
the big three public clouds. There's terraform

115
00:07:49,270 --> 00:07:53,390
providers for every major public cloud, a lot of minor

116
00:07:53,470 --> 00:07:57,394
public clouds, some private cloud software, some SaaS

117
00:07:57,442 --> 00:08:01,222
tooling. And at this point, I believe f five has

118
00:08:01,276 --> 00:08:05,090
a terraform provider that will allow you to interact with hardware

119
00:08:05,170 --> 00:08:08,934
that they have. So really there's a lot of different things you can

120
00:08:08,972 --> 00:08:12,394
do with terraform or Pulumi or terragrunt that

121
00:08:12,432 --> 00:08:16,086
allow you to kind of stay a little bit agnostic

122
00:08:16,118 --> 00:08:19,354
and give you a little more freedom down the road just in

123
00:08:19,392 --> 00:08:23,222
case something happens. Also, if you choose a bigger, more popular

124
00:08:23,286 --> 00:08:27,950
framework, which at this point in time, terraform is the industry standard for

125
00:08:28,020 --> 00:08:31,518
infrastructure as code, you're seeing a lot more Pulumi and things like that these days.

126
00:08:31,604 --> 00:08:35,726
But you're also going to get a lot more providers, a lot more community support.

127
00:08:35,908 --> 00:08:39,362
It's open source. So if you feel that you need to change something

128
00:08:39,416 --> 00:08:42,610
or you want to suggest can update, or you want to open up an issue,

129
00:08:42,680 --> 00:08:46,382
you can always just jump into GitHub and do that. Now of course, cloud formation

130
00:08:46,446 --> 00:08:49,986
has AWS support and stuff like that, but it just kind of closes you

131
00:08:50,008 --> 00:08:53,414
in a little bit. Now of course, if you are going to be 100%

132
00:08:53,452 --> 00:08:56,358
in AWS and you know that and you want to take that risk and you

133
00:08:56,364 --> 00:09:00,306
want to go for it, great. Cloud formation is a great infrastructure as code framework.

134
00:09:00,418 --> 00:09:03,834
There is a ton of different tools built into AWS to

135
00:09:03,872 --> 00:09:07,398
help you with that. Same with arm templates inside of Azure.

136
00:09:07,494 --> 00:09:11,066
So there's lots of different things you can do, there's lots of different variables that

137
00:09:11,088 --> 00:09:14,362
kind of go into it. But really the very first question

138
00:09:14,416 --> 00:09:17,646
you need to start asking yourself when you're looking infrastructure as code, code is

139
00:09:17,668 --> 00:09:20,574
what framework are we going to use, what direction are we going to go off

140
00:09:20,612 --> 00:09:24,640
in security things is something really big.

141
00:09:25,250 --> 00:09:29,090
It shouldn't be an afterthought, and in the past it always has been.

142
00:09:29,240 --> 00:09:32,546
In my experience, I worked in so many shops where developers just had

143
00:09:32,568 --> 00:09:35,826
their sandbox. They did their own thing throughout the day. All of

144
00:09:35,848 --> 00:09:39,234
their development processes and everything got pushed through and

145
00:09:39,272 --> 00:09:42,854
then security wasn't really brought in until it was time to

146
00:09:42,892 --> 00:09:46,514
push this new thing out to production. Then it's here's a bunch of firewall requests,

147
00:09:46,562 --> 00:09:49,702
here's all the stuff we need to push things into

148
00:09:49,756 --> 00:09:53,366
production when it comes infrastructure as

149
00:09:53,398 --> 00:09:56,826
code. Code and speeding up the developer lifecycle and all this kind

150
00:09:56,848 --> 00:10:00,346
of thing, you're going to have a lot better time.

151
00:10:00,448 --> 00:10:03,918
If you bring security closer in and you make it

152
00:10:04,004 --> 00:10:07,662
more a part of that lifecycle. A little bit of like we talked about with

153
00:10:07,716 --> 00:10:11,258
bringing developers and infrastructure together to help be successful.

154
00:10:11,354 --> 00:10:15,054
If you bring all the stakeholders in, your security folks, your networking folks and

155
00:10:15,092 --> 00:10:17,978
everybody into this design and deploy process,

156
00:10:18,164 --> 00:10:21,506
you're going to have a lot better time. Now there's a term you may or

157
00:10:21,528 --> 00:10:25,074
may not have heard before called shift left. And if you're not familiar with this,

158
00:10:25,112 --> 00:10:28,910
if you think of the development and deployment lifecycle as kind of a timeline,

159
00:10:28,990 --> 00:10:32,294
you're building code, you're testing code, you're deploying code as

160
00:10:32,332 --> 00:10:35,926
just a giant line. Well, if you take security and you're just kind

161
00:10:35,948 --> 00:10:39,398
of doing the firewall request, you're making your IAC policy and stuff like

162
00:10:39,404 --> 00:10:42,826
that, right? When you're pushing it out there at the end. Well, if you have

163
00:10:42,848 --> 00:10:46,426
a problem with that, you may have to go and take five steps back in

164
00:10:46,448 --> 00:10:50,314
order to fix that. Well, if you shift security left

165
00:10:50,512 --> 00:10:54,186
and every single time you build and test your code, you're building and

166
00:10:54,208 --> 00:10:57,406
testing your security policy as well. If you ever have a problem with

167
00:10:57,428 --> 00:11:01,006
that, you just take one little step back. Or you can even take it a

168
00:11:01,028 --> 00:11:05,006
step further. With tools like Terra scan by accuracy or checkoff by bridge crew,

169
00:11:05,118 --> 00:11:08,994
you can actually set it up in your automation where you

170
00:11:09,032 --> 00:11:12,946
can't deploy. If you have something insecure, say you're deploying an s

171
00:11:12,968 --> 00:11:16,158
three bucket out to AWS and you may have some

172
00:11:16,184 --> 00:11:19,666
sensitive data in there. Well, you don't want to deploy it with a default

173
00:11:19,698 --> 00:11:22,886
open policy or anybody can read.

174
00:11:23,068 --> 00:11:26,902
If you set up security as code during

175
00:11:26,956 --> 00:11:30,770
that build, test or deployment process, if you see an issue like this, you can

176
00:11:30,780 --> 00:11:34,074
just cancel that deployment, make the quick fix, and then actually go

177
00:11:34,112 --> 00:11:37,722
through and finalize the deployment. So there's lots of different tools out there

178
00:11:37,856 --> 00:11:41,786
that will help you to design this security policy and

179
00:11:41,808 --> 00:11:45,214
to help push that out. So we talked a little bit about choosing the right

180
00:11:45,252 --> 00:11:48,478
framework, bringing infrastructure and developers together,

181
00:11:48,564 --> 00:11:52,830
having those conversations, making sure everybody's kind of involved so you can be successful.

182
00:11:53,970 --> 00:11:57,266
A lot of that kind of focuses around the infrastructure side. But what about the

183
00:11:57,288 --> 00:12:00,738
code side? What are some issues that you may run into and some

184
00:12:00,744 --> 00:12:04,494
of the mitigations that you may have for that default values

185
00:12:04,542 --> 00:12:07,954
is a big one for any infrastructure person out there, you know,

186
00:12:08,072 --> 00:12:11,186
or even some developer. If you've used AWS and you've

187
00:12:11,218 --> 00:12:14,466
jumped into the UI and you said need to deploy an EC

188
00:12:14,498 --> 00:12:17,398
two instance, well, it's going to open up a little wizard. It's going to have

189
00:12:17,404 --> 00:12:20,006
a bunch of little boxes. And every time you click next, there's a bunch more

190
00:12:20,028 --> 00:12:23,066
boxes that you need to fill out or answer questions or do it so that

191
00:12:23,088 --> 00:12:26,806
you can configure that instance to be deployed. When you're using infrastructure

192
00:12:26,838 --> 00:12:30,390
as code and you're deploying an EC two instance,

193
00:12:30,550 --> 00:12:34,126
you don't necessarily have to account for every single one of

194
00:12:34,148 --> 00:12:37,626
those little boxes. Some of them, if you leave them blank

195
00:12:37,658 --> 00:12:41,162
and you don't specify, well, it may fail the deployment.

196
00:12:41,306 --> 00:12:44,766
Others it may have a default. So if you

197
00:12:44,788 --> 00:12:47,682
don't specify something, it may just pick for you. Well,

198
00:12:47,736 --> 00:12:51,538
what happens if it's the IAC policy or something like that for security

199
00:12:51,624 --> 00:12:54,786
where it chooses a default policy, but that may not be as secure as

200
00:12:54,808 --> 00:12:58,486
you need for that resource? Or if you design your code and you try

201
00:12:58,508 --> 00:13:02,166
to deploy it and it fails because it needs something, making sure

202
00:13:02,188 --> 00:13:06,134
that you know exactly which resources need.

203
00:13:06,252 --> 00:13:09,946
What kind of specifications do you have that set up as a

204
00:13:09,968 --> 00:13:13,226
variable? Are you hard coding that value? You just need to

205
00:13:13,248 --> 00:13:16,474
make sure that you are answering that question so

206
00:13:16,512 --> 00:13:20,166
that you don't accidentally deploy something that's insecure

207
00:13:20,278 --> 00:13:23,898
or incorrect and that you have all those questions answered so

208
00:13:23,904 --> 00:13:26,862
that you just don't have a bunch of failures and have to try and start

209
00:13:26,916 --> 00:13:30,158
over. So how do we mitigate that? Open policy

210
00:13:30,244 --> 00:13:34,046
agent is great. This can help you out. You saw this on the security

211
00:13:34,148 --> 00:13:37,010
slide a little bit back and you absolutely can use it for some security,

212
00:13:37,160 --> 00:13:40,626
but also for some compliance, making sure that the

213
00:13:40,648 --> 00:13:44,062
deployments that you have going out stay within a guardrail

214
00:13:44,126 --> 00:13:47,214
of hey, this can only be within a certain region,

215
00:13:47,262 --> 00:13:51,046
or I can only use a certain type of instance, or I can only

216
00:13:51,068 --> 00:13:53,670
have a certain amount of instances. Also,

217
00:13:53,820 --> 00:13:57,590
hey, I cannot deploy an S three bucket that has

218
00:13:57,660 --> 00:14:00,546
an open policy to the Internet.

219
00:14:00,658 --> 00:14:04,266
There's so many different things and it's totally customizable and

220
00:14:04,288 --> 00:14:07,926
it's another one of those blank as code type things. We have infrastructure

221
00:14:07,958 --> 00:14:11,546
as code. We've talked about security as code and now we have policy as

222
00:14:11,568 --> 00:14:14,926
code with open policy agent. So you can actually go through

223
00:14:15,028 --> 00:14:18,366
work with your security team, work with your compliance team, work with your

224
00:14:18,388 --> 00:14:21,806
infrastructure and developers to build a policy of what

225
00:14:21,828 --> 00:14:25,214
your deployments should look like, or maybe the other way

226
00:14:25,252 --> 00:14:28,786
of are there just specific things that you will not allow and everything else

227
00:14:28,808 --> 00:14:32,306
is okay? Open policy agent allows you to write that

228
00:14:32,408 --> 00:14:36,120
and then enforce that policy during the deployment time.

229
00:14:36,490 --> 00:14:39,798
Don't repeat yourself. Don't repeat yourself.

230
00:14:39,964 --> 00:14:43,526
This is a developer methodology that

231
00:14:43,628 --> 00:14:47,090
aims at simplifying writing

232
00:14:47,170 --> 00:14:51,286
code. For instance, if you are using infrastructure

233
00:14:51,318 --> 00:14:55,530
as code and you say pick terraform and you want to deploy out to AWS,

234
00:14:56,270 --> 00:15:00,106
but you also have a few different environments. You have a

235
00:15:00,208 --> 00:15:03,946
testing environment, you have a development sandbox, you have production.

236
00:15:04,058 --> 00:15:07,422
And all of these use similar versions of the same app.

237
00:15:07,556 --> 00:15:11,354
They just may have different values for things like IP addresses,

238
00:15:11,402 --> 00:15:15,474
which vpcs they're connected to, and et cetera. Does it make more

239
00:15:15,512 --> 00:15:18,722
sense to have all of these different versions of the same

240
00:15:18,776 --> 00:15:22,322
code or write your code in such a way

241
00:15:22,456 --> 00:15:26,066
that you maybe only have to have one piece of code that

242
00:15:26,088 --> 00:15:29,770
you change things whenever you deploy it for a different purpose?

243
00:15:29,950 --> 00:15:32,774
How do we mitigate this? There's lots of different ways we can do this.

244
00:15:32,812 --> 00:15:36,242
You could just take regular code and make everything a variable,

245
00:15:36,306 --> 00:15:40,086
and then during the deployment process, with whatever automation you choose just inject

246
00:15:40,118 --> 00:15:43,814
the variables that you need, but there are also things that have been purpose

247
00:15:43,862 --> 00:15:48,102
built to work and help you make drier, more manageable

248
00:15:48,166 --> 00:15:50,902
code. Things like terraform modules.

249
00:15:50,966 --> 00:15:54,206
If you have at least a VPC or an

250
00:15:54,228 --> 00:15:58,522
RDS instance, or some EC two in all of your different environments,

251
00:15:58,666 --> 00:16:02,366
why not just write that code one time, make it a

252
00:16:02,388 --> 00:16:05,674
reusable module, and then just call and customize

253
00:16:05,722 --> 00:16:09,378
that module every time you want to deploy it. Or if you say, have the

254
00:16:09,384 --> 00:16:12,494
same set of code that you utilize for production

255
00:16:12,542 --> 00:16:16,066
and staging and development and everything like this, but you

256
00:16:16,088 --> 00:16:19,542
just want to make a little bit of configuration changes each time.

257
00:16:19,596 --> 00:16:23,186
That may be something that a terragrunt works for you so that you can deploy

258
00:16:23,218 --> 00:16:27,254
all this stuff. That way you only have to update one set of code,

259
00:16:27,372 --> 00:16:31,014
but then it can go through and redeploy to all of your different environments.

260
00:16:31,142 --> 00:16:34,810
It just allows you to not have to manage so

261
00:16:34,880 --> 00:16:38,490
much of the same code and just write a little bit less

262
00:16:38,560 --> 00:16:42,110
code that's a little more manageable and a little more reusable.

263
00:16:42,690 --> 00:16:45,710
Designing for state size, this is a good one.

264
00:16:45,860 --> 00:16:48,974
When you deploy things with infrastructure as code,

265
00:16:49,092 --> 00:16:53,214
you end up with a state file and that is simply just a

266
00:16:53,252 --> 00:16:56,526
text snapshot of the current state of the deployment.

267
00:16:56,638 --> 00:17:00,274
So if you have terraform that's deployed out to the cloud and you

268
00:17:00,312 --> 00:17:03,938
have three EC two instances, you have an

269
00:17:04,024 --> 00:17:07,486
elastic load balancer. Those are connected to a VPC that you've

270
00:17:07,518 --> 00:17:11,286
got an RDS instance tagged to as well. All of that stuff, you need

271
00:17:11,308 --> 00:17:15,030
to kind of know what's out there at any given time.

272
00:17:15,180 --> 00:17:18,578
Now one of the reasons that it does this is because a lot of infrastructure

273
00:17:18,594 --> 00:17:22,090
as code frameworks have the smarts to be able to say,

274
00:17:22,240 --> 00:17:25,846
well, I've already deployed three instances

275
00:17:25,878 --> 00:17:29,002
out, they changed the code to say that I need four,

276
00:17:29,136 --> 00:17:32,474
well, I'm not going to go through and deploy four more on top

277
00:17:32,512 --> 00:17:35,886
of that three, or I'm not going to delete those three and deploy four.

278
00:17:35,988 --> 00:17:38,778
It just says I already have three, I'm going to add one and then I've

279
00:17:38,794 --> 00:17:42,954
got four. That's one of the cool things about declarative infrastructure

280
00:17:43,002 --> 00:17:46,050
is you just tell it what you want it to look like at the end

281
00:17:46,120 --> 00:17:48,900
and it will decide for you how it does that.

282
00:17:49,910 --> 00:17:53,406
Now if you have all of your different resources,

283
00:17:53,438 --> 00:17:57,006
like your vpcs, your vnets or your instances,

284
00:17:57,118 --> 00:18:00,966
your databases, and all of this kind of stuff mashed into one

285
00:18:01,148 --> 00:18:05,302
infrastructure as code file, you're going to end up with one giant state

286
00:18:05,356 --> 00:18:09,122
file. Now this is all fine and good if it's a very static environment,

287
00:18:09,266 --> 00:18:12,746
but if it's a very dynamic environment and it's always changing and

288
00:18:12,768 --> 00:18:16,346
it's always updating every single time you need to

289
00:18:16,368 --> 00:18:19,546
make an update to that infrastructure, the framework is

290
00:18:19,568 --> 00:18:22,458
going to have to go through and check that entire state file. It's going to

291
00:18:22,464 --> 00:18:25,742
have to make sure and kind of sanity check what does my state

292
00:18:25,796 --> 00:18:29,502
file say I have and what's actually out there so that it

293
00:18:29,556 --> 00:18:32,638
makes sure that it's deploying what it needs to do and that everything looks the

294
00:18:32,644 --> 00:18:36,514
way it should in the end? Well, that can sometimes take

295
00:18:36,552 --> 00:18:40,226
a really long time. I've had customers that come and say that

296
00:18:40,248 --> 00:18:44,498
their deployment times are upwards of one to 2 hours because

297
00:18:44,664 --> 00:18:48,594
they have giant terraform workspaces with one giant

298
00:18:48,642 --> 00:18:52,390
state file that takes forever to run against every single time.

299
00:18:52,540 --> 00:18:56,040
So how do we mitigate state size issues?

300
00:18:56,410 --> 00:18:59,820
The good news is we just learned that and talked about it.

301
00:19:00,590 --> 00:19:03,994
Don't repeat yourself. This methodology that we talked about

302
00:19:04,112 --> 00:19:07,990
of designing smaller, more repeatable

303
00:19:08,070 --> 00:19:11,642
code can help you design a state file,

304
00:19:11,786 --> 00:19:15,358
thus improving your deployment performance down the road.

305
00:19:15,524 --> 00:19:18,734
So if you are designing your code utilizing things

306
00:19:18,772 --> 00:19:22,142
like terraform modules or terragrunt code,

307
00:19:22,276 --> 00:19:25,566
it's going to be broken up into much more manageable pieces.

308
00:19:25,598 --> 00:19:28,894
So you have your VPC module, you have your EC two module,

309
00:19:28,942 --> 00:19:32,754
you have your RDS module, and every time you need to make

310
00:19:32,792 --> 00:19:36,146
an update to that, your deployment process is

311
00:19:36,168 --> 00:19:39,106
going to run against that module and it's going to say oh great, here's my

312
00:19:39,128 --> 00:19:41,398
VPC, I know what I have. I'm going to deploy this out and im going

313
00:19:41,404 --> 00:19:45,126
to be done. It doesn't have to go through and check all of the

314
00:19:45,148 --> 00:19:48,486
EC, two instances, all of the load balancers, all of

315
00:19:48,508 --> 00:19:52,454
the databases. It's only checking against that specific module.

316
00:19:52,582 --> 00:19:56,010
Now writing your code in a module doesn't just fix that problem.

317
00:19:56,080 --> 00:19:59,900
You have to make sure that your automation allows you to do this as well.

318
00:20:00,270 --> 00:20:03,850
But really starting with the dry methodology

319
00:20:03,930 --> 00:20:07,834
when you're designing this code and making sure that it is smaller, more repeatable

320
00:20:07,882 --> 00:20:11,594
chunks will absolutely help you mitigate any state file

321
00:20:11,642 --> 00:20:14,160
performance issues down the line.

322
00:20:14,930 --> 00:20:18,334
If you want to learn more, there are so many awesome resources

323
00:20:18,382 --> 00:20:21,586
out there. Infrastructure as code code today at this

324
00:20:21,608 --> 00:20:24,766
conference I'm surrounded by so many awesome other speakers that hopefully

325
00:20:24,798 --> 00:20:28,082
you've learned a bunch from as well. If you have questions for me,

326
00:20:28,136 --> 00:20:31,046
always please feel free to reach out on Twitter. That is by far the best

327
00:20:31,068 --> 00:20:34,742
place to get me. I put out videos and stuff.

328
00:20:34,796 --> 00:20:38,226
Infrastructure as code code tools once a week on Mondays

329
00:20:38,258 --> 00:20:42,200
at 08:00 central time, so feel free to check those out as well.

330
00:20:42,650 --> 00:20:46,194
Thank you so much for checking out my session. Hopefully this was helpful

331
00:20:46,242 --> 00:20:49,766
for you and have a great rest of your day. Hopefully next time we'll see

332
00:20:49,788 --> 00:20:50,460
each other in person.

