1
00:00:27,330 --> 00:00:30,946
Well, hello there. My name is JJ Asghar and I'm a developer advocate

2
00:00:30,978 --> 00:00:34,390
for the IBM cloud. You're here to see a simple

3
00:00:34,540 --> 00:00:38,470
python application deployed to Openshift or kubernetes,

4
00:00:38,970 --> 00:00:41,880
and I'm going to walk you through it during this talk.

5
00:00:42,730 --> 00:00:45,846
I'm going to start with some slides first, just to kind of make sure that

6
00:00:45,868 --> 00:00:49,318
we all have the same language and vernacular. And then from there I'm going

7
00:00:49,324 --> 00:00:53,022
to go into the it as quickly as possible and hopefully you'll see

8
00:00:53,076 --> 00:00:56,160
how easy it is to be able to just get a very simple application,

9
00:00:56,530 --> 00:00:59,882
simple python application deployed to OpenShift,

10
00:00:59,946 --> 00:01:03,406
specifically. All this stuff you can take and run with it

11
00:01:03,428 --> 00:01:07,058
yourself. And hopefully you'll see how easy it is. And let's see if we

12
00:01:07,064 --> 00:01:10,210
can do this under 20 minutes from

13
00:01:10,280 --> 00:01:13,540
soup to nuts. This will be fun. Come on.

14
00:01:15,350 --> 00:01:18,598
All right, hopefully you can see Openshift and

15
00:01:18,604 --> 00:01:22,450
kubernetes in way too short of a time. Again, hi JJ,

16
00:01:22,610 --> 00:01:27,126
developer advocate. And I really do have the email address of awesome@ibm.com

17
00:01:27,228 --> 00:01:30,838
you can find me on Twitter at jjasgar. If you

18
00:01:30,844 --> 00:01:33,946
ever have any questions or if I can help in any way, never hesitate to

19
00:01:33,968 --> 00:01:37,306
reach out. My job is to be a personable nerd, to be

20
00:01:37,328 --> 00:01:39,500
able to help you get the information you need.

21
00:01:41,230 --> 00:01:44,810
So let's start with some building blocks. First, we need to start somewhere.

22
00:01:44,890 --> 00:01:48,858
So in order for us to understand the advantage of using containerization,

23
00:01:49,034 --> 00:01:51,600
or kubernetes, or Openshift for that matter,

24
00:01:52,610 --> 00:01:56,114
we need to build something we build up from a foundation. So let's start

25
00:01:56,152 --> 00:01:59,566
there. Everything that's inside the container

26
00:01:59,598 --> 00:02:03,234
ecosystem is built off of something called a container, hence their

27
00:02:03,272 --> 00:02:06,546
term. There's two major different players in the space right now.

28
00:02:06,568 --> 00:02:10,466
One called Podman from Red Hat, and the other one called Docker.

29
00:02:10,658 --> 00:02:14,514
Unfortunately, my marketing people informed me I'm not allowed to use the Docker logo

30
00:02:14,562 --> 00:02:18,200
due to branding rules. So of course it's an old man yelling at the cloud.

31
00:02:18,570 --> 00:02:22,098
There's multiple offerings, Docker build,

32
00:02:22,274 --> 00:02:25,766
Podman, there's Canaco. There are different ways of doing it. They all adhere

33
00:02:25,798 --> 00:02:29,574
to something called the OCI spec. They all need a registry of someplace

34
00:02:29,622 --> 00:02:34,110
to be able to actually put the container and

35
00:02:34,180 --> 00:02:37,850
hold it. And everything's built from something called a docker file,

36
00:02:37,930 --> 00:02:41,950
which is souped up bash script in all finishedness.

37
00:02:42,610 --> 00:02:45,806
And then finally, if as long as it

38
00:02:45,908 --> 00:02:49,742
adheres to the OCI spec, you can package it and run it anywhere

39
00:02:49,806 --> 00:02:53,026
with the container runtime. So that whole promise of a

40
00:02:53,048 --> 00:02:56,582
developer saying, hey, it worked on my laptop. If they containerize it

41
00:02:56,636 --> 00:03:00,226
and send it off to QA or production,

42
00:03:00,338 --> 00:03:03,366
as long as they start adhering to the container spec,

43
00:03:03,468 --> 00:03:07,094
OCI spec, everything will work. As you start

44
00:03:07,132 --> 00:03:10,394
getting more advanced into the container system,

45
00:03:10,432 --> 00:03:13,146
you need some way to orchestrate all of them. If you actually look at what

46
00:03:13,168 --> 00:03:16,614
Kubernetes is, it is a very stripped

47
00:03:16,662 --> 00:03:20,222
down way to specifically just run

48
00:03:20,276 --> 00:03:23,070
a container or orchestrate running containers.

49
00:03:23,890 --> 00:03:27,518
There are obviously companies like IBM that

50
00:03:27,604 --> 00:03:31,166
will allow you to run Kubernetes on our systems. We have

51
00:03:31,188 --> 00:03:34,100
an offering called IKS or IBM Kubernetes service,

52
00:03:34,790 --> 00:03:38,594
but it is actually just community supported. So the

53
00:03:38,632 --> 00:03:41,966
actual underlying system of Kubernetes is open source,

54
00:03:42,078 --> 00:03:45,186
is run by the community, and there is no

55
00:03:45,208 --> 00:03:48,434
company behind it, it is just

56
00:03:48,472 --> 00:03:52,338
a project. The framework is so small that it's designed

57
00:03:52,354 --> 00:03:55,798
and scoped specifically to run containers and orchestrate them across a

58
00:03:55,804 --> 00:03:59,526
bunch of different stuff. And we'll get into that in a minute. The platform or

59
00:03:59,548 --> 00:04:02,886
the user is responsible to integrate more than just the core. So if

60
00:04:02,908 --> 00:04:06,698
you need security on top of it, you need other different systems. You actually have

61
00:04:06,704 --> 00:04:09,674
to do the work to be able to make that happen. That's the reason why

62
00:04:09,712 --> 00:04:13,246
you see things like hey, three s out there, or other different systems that

63
00:04:13,268 --> 00:04:17,306
have built in bits and pieces. And that brings us to the actual enterprise offering

64
00:04:17,338 --> 00:04:21,370
of Openshift. What Openshift is, is a containerization

65
00:04:21,450 --> 00:04:26,466
built on top of Kubernetes with the production grade actual

66
00:04:26,568 --> 00:04:29,380
enterprise ready Kubernetes for your system.

67
00:04:30,950 --> 00:04:34,526
That's actually a lie. It's actually four eight now there's

68
00:04:34,558 --> 00:04:37,846
actual enterprise support behind it, which is one of the coolest parts about

69
00:04:37,868 --> 00:04:41,318
it. So you actually do get the red hat ten year support.

70
00:04:41,484 --> 00:04:44,834
With Openshift there is the best of breed

71
00:04:44,882 --> 00:04:49,074
of chance where it is an opinionated groupings of systems

72
00:04:49,122 --> 00:04:52,666
around Kubernetes. But the beauty of it is you

73
00:04:52,688 --> 00:04:56,202
actually get the support to run your business on it. There are some strong

74
00:04:56,256 --> 00:04:59,866
opinions inside of it, but if you go whole hog into the

75
00:04:59,888 --> 00:05:04,000
openshift ecosystem, your developers will, which you will see here in a moment.

76
00:05:04,610 --> 00:05:08,526
Your developers will be able to have the environment that they need to run the

77
00:05:08,548 --> 00:05:12,458
containerized applications. This is really important because it's

78
00:05:12,474 --> 00:05:15,646
no longer you have to build it, you get to just

79
00:05:15,668 --> 00:05:19,202
in essence buy it and be able to get your business out the door instead

80
00:05:19,256 --> 00:05:22,420
of you spending the time and effort to being able to.

81
00:05:24,070 --> 00:05:27,720
It's a good word for it. Build what you need.

82
00:05:28,410 --> 00:05:31,682
It's very much a conversation that you need to have with your teams

83
00:05:31,746 --> 00:05:35,922
and your understanding that if you are going into this ecosystem, the advantage

84
00:05:35,986 --> 00:05:39,834
of leveraging something where it's already supported and everybody knows about

85
00:05:39,872 --> 00:05:43,146
it, instead of you building up bits and pieces of what you need,

86
00:05:43,248 --> 00:05:47,002
if that makes sense. So I actually

87
00:05:47,056 --> 00:05:48,780
lied at the very beginning of this,

88
00:05:49,870 --> 00:05:53,546
inside of the Kubernetes ecosystem. And by the way, I'll use Kubernetes and Openshift

89
00:05:53,578 --> 00:05:57,342
interchangeably. I'll mention specifically when it's can openshift difference.

90
00:05:57,476 --> 00:06:00,650
But if I say Kubernetes, it works on Openshift.

91
00:06:00,730 --> 00:06:04,574
And then I'll specifically say Openshift when it works on just

92
00:06:04,612 --> 00:06:07,650
Openshift or the layer of Openshift.

93
00:06:07,990 --> 00:06:10,260
But I actually lied at the very beginning of this.

94
00:06:10,870 --> 00:06:14,754
So most people, when I said everything's built off of something container, that's not actually

95
00:06:14,792 --> 00:06:18,498
100% true when it comes to Kubernetes, as you see here, Kubernetes and Openshift

96
00:06:18,514 --> 00:06:21,926
at the bottom, the actual smallest thing it knows about is something called

97
00:06:21,948 --> 00:06:26,054
a deployment. And as you can see here, there's three

98
00:06:26,092 --> 00:06:29,962
different deployments going on where you have a deployment replica of two,

99
00:06:30,016 --> 00:06:33,238
where it will make sure that those two pods,

100
00:06:33,414 --> 00:06:37,190
which is a grouping of n, number of containers,

101
00:06:37,270 --> 00:06:40,794
is always running. And then the deployments in pod b and e

102
00:06:40,832 --> 00:06:44,982
will always be running somewhere in the cluster two. So you tell Kubernetes,

103
00:06:45,046 --> 00:06:48,878
hey, I need deployment replica of two pod a. It will find a place

104
00:06:48,964 --> 00:06:52,446
and go to hell and back for you to make sure that it is

105
00:06:52,468 --> 00:06:55,726
running, which is important to know. So the smallest thing that

106
00:06:55,748 --> 00:06:59,250
Kubernetes about is actually a pod, it's not a container.

107
00:07:01,350 --> 00:07:04,546
Another important thing to mention is nodes code are actually

108
00:07:04,568 --> 00:07:08,454
the compute of Kubernetes or Openshift. And when

109
00:07:08,492 --> 00:07:12,562
you talk to it, you talk to the API and Kubernetes

110
00:07:12,626 --> 00:07:16,246
figures out where to run the thing. So even though we have three code here

111
00:07:16,348 --> 00:07:19,334
to us as the downstream user,

112
00:07:19,462 --> 00:07:23,162
Kubernetes and OpenShift is just one big blob that's important

113
00:07:23,216 --> 00:07:27,846
to know and a good thing to kind of anchor

114
00:07:27,878 --> 00:07:31,242
your thought around Kubernetes or OpenShift is all it is,

115
00:07:31,296 --> 00:07:34,814
is just an API to compute. If you anchor your

116
00:07:34,852 --> 00:07:39,002
thoughts and kind of build up your knowledge around that simple concept

117
00:07:39,066 --> 00:07:42,506
where all Kubernetes is, is an API to compute,

118
00:07:42,618 --> 00:07:44,960
everything else kind of just falls into place.

119
00:07:45,430 --> 00:07:48,146
I've trained Kubernetes to quite a few people now.

120
00:07:48,248 --> 00:07:52,050
And after discovering that after speaking to some people about it,

121
00:07:52,120 --> 00:07:56,050
it really does make sense because that's what you do. You give it

122
00:07:56,200 --> 00:07:59,366
a declaration of how many containers inside of a pod you want

123
00:07:59,388 --> 00:08:02,520
to run, and it will do the job to make sure that it happens.

124
00:08:03,850 --> 00:08:07,014
The storage and all that stuff is all around it.

125
00:08:07,052 --> 00:08:10,454
But the core aspect of Kubernetes is it's can API

126
00:08:10,502 --> 00:08:14,246
to compute. So again, you can actually have affinity rules and anti

127
00:08:14,278 --> 00:08:17,942
affinity rules for specific nodes. Say for instance you're doing some ML

128
00:08:18,086 --> 00:08:22,326
or graphics work. You can make sure that the nodes have specifically

129
00:08:22,358 --> 00:08:26,410
graphics, cardinal or whatever. But that's a little bit out of scope for this conversation.

130
00:08:26,570 --> 00:08:30,494
For what we are trying to understand is that we have this app that takes

131
00:08:30,532 --> 00:08:34,158
a container and just runs and I apologize, I keep looking off over to the

132
00:08:34,164 --> 00:08:37,422
side here. My screen is a little bit weird,

133
00:08:37,486 --> 00:08:40,386
so I'm trying to share at the same time. So I'm looking, but hopefully it

134
00:08:40,408 --> 00:08:43,934
makes sense. I am more than aware

135
00:08:43,982 --> 00:08:47,870
of sometimes my views here. Anyway,

136
00:08:47,960 --> 00:08:52,290
let's keep going. So let's talk about some internal concepts

137
00:08:52,450 --> 00:08:55,766
of Kubernetes and Openshift to kind of make sure that when I

138
00:08:55,788 --> 00:08:59,626
start deploying around with it live here in a second you kind

139
00:08:59,648 --> 00:09:01,660
of get the references, the reference points,

140
00:09:03,870 --> 00:09:07,786
of course, because you have no idea what's actually inside the system

141
00:09:07,888 --> 00:09:11,194
or what the names of the pods are. You need some way to name them.

142
00:09:11,232 --> 00:09:14,142
And of course, what do all engineers go for in the web?

143
00:09:14,276 --> 00:09:17,882
DNS, of course we have our own DNS inside of Kubernetes.

144
00:09:17,946 --> 00:09:21,630
It's called Kubedns and it does service discovery for you.

145
00:09:21,780 --> 00:09:25,874
So you can service a name called foo web and

146
00:09:25,912 --> 00:09:29,970
map it to machine or pods.

147
00:09:30,310 --> 00:09:34,082
For instance, this pod c here and label it to make sure that

148
00:09:34,216 --> 00:09:37,458
whenever pod a internally inside the

149
00:09:37,464 --> 00:09:40,694
cluster is looking for foo web, it knows where to go.

150
00:09:40,812 --> 00:09:44,806
Now that's not 100% true. Now you have ways to be able to extend the

151
00:09:44,828 --> 00:09:48,774
services outside the cluster into other offerings like route

152
00:09:48,822 --> 00:09:53,142
53 or different external DNS providers.

153
00:09:53,286 --> 00:09:56,874
But for our conversation, CubeDNS is just

154
00:09:56,912 --> 00:10:00,346
internal and it's a way for the inter pods to talk to one

155
00:10:00,368 --> 00:10:03,930
another so they don't have to know about each one. And if something,

156
00:10:04,000 --> 00:10:07,454
a pod dies or whatever, it knows to go to the labeled way

157
00:10:07,492 --> 00:10:10,346
and the desired state actually gets it to the machine.

158
00:10:10,538 --> 00:10:14,014
It's much more complex than that, but for our understanding, that's more or less

159
00:10:14,052 --> 00:10:17,138
what we need to know. The next thing you need

160
00:10:17,144 --> 00:10:20,962
to know about is something called namespaces. Namespaces are extremely powerful inside

161
00:10:21,016 --> 00:10:24,414
of kubernetes, and as you notice here we have two namespaces.

162
00:10:24,462 --> 00:10:28,166
My application and your application. They're exactly the same.

163
00:10:28,348 --> 00:10:31,766
They have a service and two pods, and they just talk

164
00:10:31,788 --> 00:10:35,378
to each other or talk internally inside the namespace.

165
00:10:35,474 --> 00:10:38,530
This is very important to know. This is the way

166
00:10:38,620 --> 00:10:42,090
you can slice and dice your Kubernetes cluster up into

167
00:10:42,240 --> 00:10:45,450
your application, my application, or for that matter,

168
00:10:45,600 --> 00:10:49,354
dev, QA and prod. So you can actually run Dev,

169
00:10:49,392 --> 00:10:52,846
QA and prod all in the same cluster, and they cannot talk to

170
00:10:52,868 --> 00:10:56,574
one another. Okay, now that's a little bit of a lie. There are

171
00:10:56,612 --> 00:11:00,362
ways to cross namespaces, but out of the scope of the purity

172
00:11:00,426 --> 00:11:04,080
of this talk, that's not possible.

173
00:11:04,610 --> 00:11:08,210
It's a way to be able to slice and dice your Kubernetes cluster. So then

174
00:11:08,280 --> 00:11:12,290
now all of a Sudden, you don't have to worry about Jane Doe's

175
00:11:12,630 --> 00:11:16,114
computer underneath her desk to run uat. Now you can actually

176
00:11:16,152 --> 00:11:19,814
run it on the actual hardware that your Kubernetes cluster is running.

177
00:11:19,932 --> 00:11:23,798
This allows you to do real performance testing, and there's actually

178
00:11:23,884 --> 00:11:27,426
huge benefits around it. So it's well worth spending your time looking into

179
00:11:27,468 --> 00:11:28,060
this.

180
00:11:32,910 --> 00:11:36,806
Okay, so now with namespaces, the next thing, and this is specifically

181
00:11:36,838 --> 00:11:40,506
to OpenShift, something called projects. Projects extend

182
00:11:40,538 --> 00:11:44,480
the namespace ecosystem into some really interesting

183
00:11:45,810 --> 00:11:49,374
isolated layers on top of it. It adds real

184
00:11:49,412 --> 00:11:53,274
rbac to it. So if you have, for instance, active directory,

185
00:11:53,402 --> 00:11:57,266
you can actually tie your specific

186
00:11:57,368 --> 00:12:01,074
projects to different

187
00:12:01,272 --> 00:12:04,562
ad groups. So your devs can only get into payment

188
00:12:04,616 --> 00:12:07,974
dev for instance, or your payment prod can only get to your

189
00:12:08,012 --> 00:12:11,554
DevOps people or whatever, and they are complete isolated

190
00:12:11,602 --> 00:12:15,666
on top of it. Projects really are insanely powerful.

191
00:12:15,858 --> 00:12:19,782
Also with the workflow of OpenShift

192
00:12:19,846 --> 00:12:23,786
specifically, and this is an Openshift specific thing, you can

193
00:12:23,808 --> 00:12:27,642
actually leverage projects to be just like feature branches. We're using

194
00:12:27,696 --> 00:12:30,822
git. So if you use git git with feature branches,

195
00:12:30,886 --> 00:12:33,962
you can create a project as easy as you do as a

196
00:12:34,016 --> 00:12:37,198
git branch, push your code inside of it, have it

197
00:12:37,204 --> 00:12:40,746
be able to reach the things it need to see that it works. Then merge

198
00:12:40,778 --> 00:12:45,070
that back into your main branch and delete that project basically ephemerally,

199
00:12:45,890 --> 00:12:49,362
which allows for specifically developers to be able to really use

200
00:12:49,416 --> 00:12:53,426
the same kind of tooling and understanding that they do for their job on

201
00:12:53,448 --> 00:12:55,974
an interface. That makes it sense, makes sense.

202
00:12:56,172 --> 00:12:59,974
Projects really are something that really do just

203
00:13:00,012 --> 00:13:04,230
ramp up the Openshift ecosystem to help developers be successful.

204
00:13:07,290 --> 00:13:10,966
So we've talked about kind of like internally what's going

205
00:13:10,988 --> 00:13:14,234
on inside of the cluster. Now we need to talk about how to actually get

206
00:13:14,272 --> 00:13:17,754
into it. And that's where there's a couple of different ways of doing

207
00:13:17,792 --> 00:13:21,238
it. The first one by default,

208
00:13:21,414 --> 00:13:24,634
actually not by default, but the one that people mainly go to

209
00:13:24,752 --> 00:13:27,966
for Kubernetes is something called a load balancer. It's just like an f

210
00:13:27,988 --> 00:13:31,534
five load balancer. You can actually rip out the load balancer and put in other

211
00:13:31,572 --> 00:13:34,794
load balancers. Now it takes input

212
00:13:34,842 --> 00:13:38,126
from an external ip and level sets around the pods

213
00:13:38,158 --> 00:13:41,886
that are required. You can actually have a whole talk just on load

214
00:13:41,918 --> 00:13:45,620
balancing alone. If you're a networking nerd like I used to be,

215
00:13:46,310 --> 00:13:49,686
you can go down that rabbit hole for a very long time. But there's all

216
00:13:49,708 --> 00:13:52,934
these knobs and dials you can flip around to play

217
00:13:52,972 --> 00:13:56,086
with. I would strongly suggest doing your own homework to

218
00:13:56,108 --> 00:13:57,640
see how it fits for your application.

219
00:14:00,190 --> 00:14:03,626
The hardest thing in Kubernetes is something to understand about something

220
00:14:03,648 --> 00:14:07,500
called an ingress. Ingress. This is actually the way you

221
00:14:07,950 --> 00:14:11,306
in kubernetes map all your pods to the

222
00:14:11,328 --> 00:14:15,454
different services and how things come in. Now it

223
00:14:15,492 --> 00:14:18,720
becomes a really massive Yaml file, as you see here in the example

224
00:14:19,250 --> 00:14:23,038
on the far left under ingress there. And that's a very simple example

225
00:14:23,124 --> 00:14:27,186
where it maps the external path to

226
00:14:27,208 --> 00:14:30,606
foo web. And then if it needs to ever hit data, it finds

227
00:14:30,638 --> 00:14:34,578
a service for data and then goes to port 3000

228
00:14:34,664 --> 00:14:38,294
on those pods. That's it.

229
00:14:38,492 --> 00:14:42,546
And that's pretty nice. So it's a way to really map out how your microservice

230
00:14:42,578 --> 00:14:45,878
based architecture fits inside of kubernetes. But the

231
00:14:45,884 --> 00:14:49,794
problem is it's very static. So anytime you need to add new pod or

232
00:14:49,932 --> 00:14:53,254
anytime you need to move something, you have to edit the ingress and it becomes

233
00:14:53,302 --> 00:14:57,420
very tedious. And imagine you have 30, 40 different services.

234
00:14:58,190 --> 00:15:04,522
This YAMl file gets massive and it's really unruly

235
00:15:04,586 --> 00:15:07,966
to deal with. So you have to really pay attention to this. And that's one

236
00:15:07,988 --> 00:15:11,306
reason why inside of openshift they have something called routes.

237
00:15:11,498 --> 00:15:15,326
Routes actually extend the ingress so you don't have to worry

238
00:15:15,358 --> 00:15:19,438
about it. And it is really just simply two commands

239
00:15:19,534 --> 00:15:22,578
that you run and it deals with that Yaml file for you.

240
00:15:22,664 --> 00:15:26,222
It takes the challenge of ingress

241
00:15:26,286 --> 00:15:29,478
and having to deal with it manually and turn it into an interface that you

242
00:15:29,484 --> 00:15:33,254
can just flip things on, flip things off very easily so you can

243
00:15:33,292 --> 00:15:37,158
play around and get the things you need done quickly.

244
00:15:37,324 --> 00:15:40,486
We're going to play with a router too during my demo,

245
00:15:40,588 --> 00:15:43,098
just to kind of show you the advantage of it. And then we'll kind of

246
00:15:43,104 --> 00:15:46,698
go from there. So IBM going to

247
00:15:46,704 --> 00:15:49,546
talk about some things in the ecosystem just to make sure that if you do

248
00:15:49,568 --> 00:15:52,734
see these pop up as you do go down this journey, you at least

249
00:15:52,772 --> 00:15:55,658
have some form of reference. And it's not just gobbledygook,

250
00:15:55,754 --> 00:15:59,054
gobbledygook. I can't say words. And then

251
00:15:59,092 --> 00:16:02,766
you can be able to kind of work from there. The first

252
00:16:02,788 --> 00:16:06,098
thing you need to talk about is helm. You'll see Helm all over the place.

253
00:16:06,184 --> 00:16:09,566
Helm has become the de facto way to install applications

254
00:16:09,598 --> 00:16:13,086
to openshift and Kubernetes, even though the Openshift ecosystem

255
00:16:13,118 --> 00:16:16,958
has moved to something called operators. And that's a much larger conversation.

256
00:16:17,054 --> 00:16:20,694
But when you see Helm, think of helm as just a package manager, a way

257
00:16:20,732 --> 00:16:24,086
to programmatically install a bunch of things inside of Kubernetes or

258
00:16:24,108 --> 00:16:26,646
Openshift and just kind of get them on there.

259
00:16:26,828 --> 00:16:30,114
GitLab is a perfect example of it. If you want your own GitLab instance,

260
00:16:30,162 --> 00:16:33,546
there's a helm chart to install, and helm takes care of the

261
00:16:33,568 --> 00:16:36,378
lion's share of the work for you. So you have to worry about databases and

262
00:16:36,384 --> 00:16:40,670
things like that. So it's very powerful and

263
00:16:40,820 --> 00:16:44,350
it's a very interesting project. So take some time and do some research

264
00:16:44,420 --> 00:16:47,806
there. Next we

265
00:16:47,828 --> 00:16:52,446
have istio. Istio is in essence the

266
00:16:52,628 --> 00:16:56,306
service mesh. Service mesh can be its own conference, I'm not

267
00:16:56,328 --> 00:16:59,662
going to go into that, but this is a way to be able to intelligently

268
00:16:59,806 --> 00:17:06,054
talk to and work around the

269
00:17:06,252 --> 00:17:09,554
containers inside of your Kubernetes cluster, or Openshift cluster.

270
00:17:09,682 --> 00:17:13,586
It allows you to have secure communication. You can actually trace

271
00:17:13,698 --> 00:17:17,174
communication between the containers, which is

272
00:17:17,212 --> 00:17:20,966
really neat. There are two major players, istio, and the other one is called Linker

273
00:17:20,998 --> 00:17:25,334
D. I think it's Linker D, two now. And Istio

274
00:17:25,382 --> 00:17:28,998
is kind of like everything in Kintric,

275
00:17:29,174 --> 00:17:32,474
where Linkerd is just what you need to run

276
00:17:32,512 --> 00:17:36,374
the service mesh. Two very different worlds. IBM has

277
00:17:36,432 --> 00:17:39,886
leaned very heavily into istio, and we have a lot of

278
00:17:39,908 --> 00:17:42,606
really smart people working on istio all the time.

279
00:17:42,708 --> 00:17:46,802
So hence the reason why that I'm showing this one off again.

280
00:17:46,856 --> 00:17:50,302
It's one of those things that you'll eventually get to inside of the Kubernetes

281
00:17:50,366 --> 00:17:53,954
ecosystem. I strongly suggest waiting until you're much

282
00:17:53,992 --> 00:17:57,766
more comfortable in the ecosystem before going there. But that is what

283
00:17:57,788 --> 00:18:01,302
this is. And if you didn't know istio is

284
00:18:01,356 --> 00:18:04,920
greek for sale, I learned that recently myself.

285
00:18:07,130 --> 00:18:10,246
And finally, the next thing we're going to talk about is knative.

286
00:18:10,358 --> 00:18:14,362
Knative is in essence the

287
00:18:14,496 --> 00:18:17,302
serverless platform on top of Kubernetes.

288
00:18:17,446 --> 00:18:21,002
So you might have heard of lambda or code engine from

289
00:18:21,056 --> 00:18:24,366
IBM. And knative is a way to

290
00:18:24,388 --> 00:18:28,414
run those types of scale down to zero infrastructures on top

291
00:18:28,452 --> 00:18:32,266
of your Kubernetes cluster. So if you are hosting your own Kubernetes cluster,

292
00:18:32,298 --> 00:18:35,906
for whatever reason, you can layer knative on top of it and get the

293
00:18:35,928 --> 00:18:39,586
power of scale down to zero, which saves you a lot of

294
00:18:39,608 --> 00:18:43,394
resources into your cluster. There's a lot more there,

295
00:18:43,432 --> 00:18:46,530
but it's good to know knative is serverless.

296
00:18:47,510 --> 00:18:50,598
Okay, so now we've talked about that ecosystem, and we've kind of

297
00:18:50,604 --> 00:18:54,882
talked about all the different things. Let's actually get something deployed to Openshift.

298
00:18:55,026 --> 00:18:59,274
So I'm going to go ahead and turn this off and

299
00:18:59,312 --> 00:19:02,860
I'm going to shrink that.

300
00:19:03,710 --> 00:19:07,980
So first thing first is here is my amazing application.

301
00:19:09,630 --> 00:19:12,800
I'm trying to make this bigger, and I don't know why it's not.

302
00:19:13,650 --> 00:19:14,400
View.

303
00:19:17,330 --> 00:19:18,560
Zoom in.

304
00:19:25,060 --> 00:19:28,816
All right, there we go. That's probably too big. There we go. This is

305
00:19:28,838 --> 00:19:32,160
actually on GitHub JJ Asghar cloud native

306
00:19:32,240 --> 00:19:36,340
Python example app. And I have this amazing application app,

307
00:19:36,410 --> 00:19:40,564
Py. And as Python people, you know that this

308
00:19:40,602 --> 00:19:44,104
is pretty much the most simple thing you can ever do.

309
00:19:44,302 --> 00:19:47,768
I actually did this at Pyjamas, and that's the reason why it's there.

310
00:19:47,854 --> 00:19:50,776
But as you can see here, I have a simple flask app, and this is

311
00:19:50,798 --> 00:19:54,108
the worst amazing app ever. Speaking in pyjamas, that's all it does.

312
00:19:54,194 --> 00:19:58,172
It's a simple python application running in flask that

313
00:19:58,306 --> 00:20:01,884
rodozos. Okay, cool. But the most

314
00:20:01,922 --> 00:20:05,004
important part is being able to get this to

315
00:20:05,042 --> 00:20:08,816
talk to or deploying this to Openshift. So here we go.

316
00:20:08,918 --> 00:20:11,490
Here is Openshift right here.

317
00:20:13,380 --> 00:20:17,216
And I'm logged in as my user here. I'm as

318
00:20:17,238 --> 00:20:21,140
an administrator right now. I'm going to go ahead and flip over to developer.

319
00:20:21,560 --> 00:20:24,964
And as I was talking earlier about projects, as you can see

320
00:20:25,002 --> 00:20:28,116
here are a bunch of projects inside of our application. IBM going to go ahead

321
00:20:28,138 --> 00:20:31,832
and create a project, and we're going to call this conf 42

322
00:20:31,966 --> 00:20:35,624
42, and then IBM going to hit create.

323
00:20:35,822 --> 00:20:39,924
And while that's being created, Ibm going to make this just a little bit bigger.

324
00:20:40,052 --> 00:20:43,320
And as you can see here, now I am in project 42

325
00:20:43,390 --> 00:20:46,764
applications. I have a bunch of neat stuff here. This is me

326
00:20:46,802 --> 00:20:50,236
as a developer. So I am just using this as what hopefully you would

327
00:20:50,258 --> 00:20:53,548
be doing this as a downstream user. As you can see here,

328
00:20:53,634 --> 00:20:57,308
it's like, hey, you need to add something to your project.

329
00:20:57,474 --> 00:21:00,176
Well, one of the best things about it is you can just pull directly from

330
00:21:00,198 --> 00:21:03,100
git so I'm going to go ahead and click on this from git repository.

331
00:21:03,260 --> 00:21:08,932
I'm going to go ahead and go back real quick to this URL and

332
00:21:08,986 --> 00:21:12,740
IBm going to go ahead and grab this from HTTP

333
00:21:15,560 --> 00:21:18,900
over here. I'm going to go ahead and paste this URL directly in here.

334
00:21:18,970 --> 00:21:22,596
It validates it already and looks and reads it and it's like, hey, check it

335
00:21:22,618 --> 00:21:26,264
out. It already figured out that it's a python application. So without me even

336
00:21:26,302 --> 00:21:29,236
doing anything, I just said, hey, look at this repo out on the Internet.

337
00:21:29,348 --> 00:21:33,348
Go ahead and pull and see what's going on. And it grabs it and pulls

338
00:21:33,364 --> 00:21:36,856
down the python. It defaults to something called a Ubi,

339
00:21:36,968 --> 00:21:40,088
which is a universal base image which is basically, if you've

340
00:21:40,104 --> 00:21:43,836
ever heard of Alpine, it's the red hat version of Alpine. So everything's stripped

341
00:21:43,868 --> 00:21:46,450
out to be as small as it possibly can be.

342
00:21:47,140 --> 00:21:50,736
And it's like, hey, let's call this something. I'm going to

343
00:21:50,758 --> 00:21:54,450
go ahead and change this to comp conf

344
00:21:55,720 --> 00:21:59,460
42. Then we'll go down

345
00:21:59,530 --> 00:22:03,236
over here to conf

346
00:22:03,418 --> 00:22:06,964
42 and then

347
00:22:07,002 --> 00:22:09,476
we're going to create a deployment just like as we were saying earlier, that's what

348
00:22:09,498 --> 00:22:12,756
it needs to know about. And then it actually has this little checkbox where

349
00:22:12,778 --> 00:22:16,356
it's like, hey, do you need to expose this to the real world? And that's

350
00:22:16,388 --> 00:22:19,850
what I want to, I want to expose this public URL. Go ahead and create.

351
00:22:21,180 --> 00:22:24,236
So this kicks off, this takes a couple of minutes, but we can actually watch

352
00:22:24,258 --> 00:22:27,228
this more or less in real time. So as you see here,

353
00:22:27,394 --> 00:22:31,144
it's waiting for the build. Oh, it's pending.

354
00:22:31,192 --> 00:22:34,776
So it's doing this just now. And it even created

355
00:22:34,808 --> 00:22:38,460
a service for us out of the gate

356
00:22:38,540 --> 00:22:41,856
and it even opens up the URL for us too. But we need

357
00:22:41,878 --> 00:22:44,816
a way for that build to happen. While that's happening.

358
00:22:44,918 --> 00:22:47,492
I'm going to go back over here and I'm going to show you what actually

359
00:22:47,546 --> 00:22:51,270
finally convinced me that Openshift was the way of the future

360
00:22:51,640 --> 00:22:55,824
and that is the built in ways of webhooks

361
00:22:55,872 --> 00:22:59,672
with, I was supposed to delete that

362
00:22:59,726 --> 00:23:03,210
before doing this demo and I apologize for that.

363
00:23:03,740 --> 00:23:07,336
Here we go. So we all use webhooks to

364
00:23:07,358 --> 00:23:10,744
talk to applications, whether it be back and forth or whatever,

365
00:23:10,782 --> 00:23:14,212
but you can actually have webhooks on GitHub. As you can see here,

366
00:23:14,286 --> 00:23:18,044
whenever any event happens, it sends a post request with

367
00:23:18,082 --> 00:23:20,844
that. So I'm going to go ahead and create a webhook here.

368
00:23:20,962 --> 00:23:24,172
I'm going to go back to our system and it should be building.

369
00:23:24,226 --> 00:23:26,370
There we go. It's building, which is good.

370
00:23:27,140 --> 00:23:29,650
Ibm going to go back to our build config here.

371
00:23:30,020 --> 00:23:33,504
And if you see here inside of Openshift, they have

372
00:23:33,542 --> 00:23:36,928
built in webhooks for each build config. So what

373
00:23:36,934 --> 00:23:41,156
Ibm going to do is I'm going to copy this URL here and

374
00:23:41,178 --> 00:23:44,756
ibm going to paste it inside of here and

375
00:23:44,778 --> 00:23:48,928
I'm going to change this to Json and then I'm

376
00:23:48,944 --> 00:23:52,968
going to create a webhook. So now whenever I make a

377
00:23:52,974 --> 00:23:56,568
change to this repository, it will kick off a build on my

378
00:23:56,574 --> 00:24:00,010
openshift cluster. So if I go here to make sure it's there.

379
00:24:00,700 --> 00:24:04,280
Recent deliveries, we got a big old grid cream checkmark.

380
00:24:04,440 --> 00:24:07,676
So that's good to know. So now we know for a fact, whenever we make

381
00:24:07,698 --> 00:24:11,288
a change to this repository,

382
00:24:11,384 --> 00:24:14,636
it'll send a post to our Openshift cluster, which allows us,

383
00:24:14,658 --> 00:24:17,856
in essence, to have continuous delivery. So anytime I

384
00:24:17,878 --> 00:24:21,356
merge into main in this thing, it will kick

385
00:24:21,388 --> 00:24:24,688
off a build, which is pretty cool. But we're not going

386
00:24:24,694 --> 00:24:28,128
to quite see that yet because we're going to go back to topology and we

387
00:24:28,134 --> 00:24:31,396
got to actually see our system work first. So as this

388
00:24:31,418 --> 00:24:35,312
is building, it's taking about two minutes. There we go. It just finished,

389
00:24:35,456 --> 00:24:37,590
it's pushing out the pod for us.

390
00:24:40,440 --> 00:24:44,484
It's thinking about it. And there's a built in registry inside of Openshift,

391
00:24:44,532 --> 00:24:46,456
which is one of the neat parts, too, so you don't have to worry about

392
00:24:46,478 --> 00:24:50,480
like Docker hub or quay or whatever. It's all self contained

393
00:24:50,580 --> 00:24:54,540
inside of it. So your source code stays inside of your openshift cluster

394
00:24:55,520 --> 00:24:59,070
and it's creating that container. Give it a second.

395
00:25:05,720 --> 00:25:09,764
Put on some jeopardy music. Patiently wait.

396
00:25:09,962 --> 00:25:13,240
There we go. Running. As you can see, a nice little blue circle here.

397
00:25:13,390 --> 00:25:15,930
And I'm going to go ahead and click on this link right here.

398
00:25:16,540 --> 00:25:20,392
And there we go. This is the worst app ever.

399
00:25:20,526 --> 00:25:24,684
Speaking at pyjamas. We are not speaking there. Are we not? So we are speaking

400
00:25:24,722 --> 00:25:28,716
at comp 42. So IBM going to do here is

401
00:25:28,738 --> 00:25:32,204
I'm going to come back over to our application and I'm going to be

402
00:25:32,242 --> 00:25:35,776
bad. Never do this in the real world. I'm going to go

403
00:25:35,798 --> 00:25:37,650
ahead and edit this one right here.

404
00:25:38,580 --> 00:25:42,512
And we're speaking at comp 42.

405
00:25:42,646 --> 00:25:45,824
42. I keep putting three down and

406
00:25:45,862 --> 00:25:49,120
of course I'm going to go ahead and commit to the master branch.

407
00:25:49,200 --> 00:25:53,092
Don't do this in the real world. And there we go, we update that.

408
00:25:53,146 --> 00:25:56,532
So if we go back over here now and look

409
00:25:56,586 --> 00:26:00,232
at our. Oh, there it is. It already had the post, it's already building

410
00:26:00,286 --> 00:26:03,960
it again. And if I've got my timing right,

411
00:26:04,110 --> 00:26:07,656
it should only take a second. We should see the pod do

412
00:26:07,678 --> 00:26:11,492
an intelligent restart so it actually spins up another pod,

413
00:26:11,636 --> 00:26:15,864
kicks it over and then kills the other one. You can have liveliness

414
00:26:15,912 --> 00:26:19,150
checks inside of it, so if you have applications that take a while to start,

415
00:26:19,920 --> 00:26:23,228
you can do intelligent rollouts so it makes sure it comes up in a

416
00:26:23,234 --> 00:26:27,088
good state before taking out the old one, which is important too. So you

417
00:26:27,094 --> 00:26:30,130
don't have any real outages for your application either.

418
00:26:30,660 --> 00:26:33,890
So there we go. Still running,

419
00:26:34,340 --> 00:26:37,350
still running. Come on,

420
00:26:38,440 --> 00:26:41,748
come on, don't make a liar out of

421
00:26:41,754 --> 00:26:42,310
me.

422
00:26:45,510 --> 00:26:48,834
How about now we can actually click

423
00:26:48,872 --> 00:26:52,806
into the view here and actually look at the logs. There we

424
00:26:52,828 --> 00:26:55,510
go. We are installing some packages.

425
00:26:58,490 --> 00:27:00,440
Why are you taking so long?

426
00:27:04,610 --> 00:27:07,826
Come on. There we go. All right,

427
00:27:07,848 --> 00:27:11,218
we're on step ten of, I think, twelve. Oh, there we

428
00:27:11,224 --> 00:27:14,690
go. No, it's only ten steps. It's copying the blobs into the

429
00:27:14,840 --> 00:27:19,590
registry, pushing it and then storing.

430
00:27:20,330 --> 00:27:23,718
There's the actual version. There we go.

431
00:27:23,724 --> 00:27:27,560
Now it's pushing into the registry. I'm sorry, it's another thing ahead of time.

432
00:27:29,310 --> 00:27:32,140
And so if we go back to our topology here,

433
00:27:33,630 --> 00:27:37,226
click on this. There we go. We see, we are creating that

434
00:27:37,248 --> 00:27:40,662
new container and we will kill this

435
00:27:40,736 --> 00:27:42,000
pod in a moment.

436
00:27:44,890 --> 00:27:48,646
Health checks, of course, are super powerful here for your

437
00:27:48,668 --> 00:27:51,800
application so your downstream users never have problems.

438
00:27:53,850 --> 00:27:54,940
And then.

439
00:27:57,870 --> 00:28:01,020
How about now? Now,

440
00:28:04,110 --> 00:28:05,420
come on, computer,

441
00:28:09,260 --> 00:28:12,188
there we go. See, it's ran. Now it's kicked it over. So I'll go back

442
00:28:12,194 --> 00:28:15,976
to that URL here and I will refresh. And there's

443
00:28:16,008 --> 00:28:18,220
comp 42. Wonderful.

444
00:28:18,640 --> 00:28:22,304
And that's it in essence, you saw how quickly I did this.

445
00:28:22,342 --> 00:28:25,824
This is under 30 minutes and what have I done?

446
00:28:25,942 --> 00:28:30,370
I went ahead and told you everything you need to know and

447
00:28:31,860 --> 00:28:35,730
wired it up together. So to make sure you see how beautiful and how awesome

448
00:28:36,260 --> 00:28:40,336
openshift is for your downstream. And I just did it through the GUI. Obviously there's

449
00:28:40,368 --> 00:28:44,164
CLI commands and there's other ways to extend it to do

450
00:28:44,282 --> 00:28:48,544
testing in front of it before releasing

451
00:28:48,672 --> 00:28:52,230
to the production environment. There's just wonderful, wonderful things,

452
00:28:53,160 --> 00:28:56,896
but that's just the bare minimum to understand the power of deploying

453
00:28:56,928 --> 00:29:00,332
to openshift and under the other side.

454
00:29:00,466 --> 00:29:03,980
So thanks so much, never hesitate.

455
00:29:04,480 --> 00:29:05,420
Oops,

456
00:29:09,280 --> 00:29:13,384
there we go, that one. That's how to find me at jjasgar

457
00:29:13,432 --> 00:29:16,776
on Twitter or awesome@ibm.com. And thanks y'all

458
00:29:16,808 --> 00:29:18,250
for having me. Take it easy.

