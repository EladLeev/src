1
00:00:17,290 --> 00:00:19,120
I'm only dreaming, right?

2
00:00:19,890 --> 00:00:23,626
Hello and welcome to this Talk today. My name is Nicola Zaghini.

3
00:00:23,658 --> 00:00:27,398
I am a professional mobile engineer with probably 13 years experience.

4
00:00:27,484 --> 00:00:30,370
Now I played many roles as you can see on the slide,

5
00:00:30,450 --> 00:00:33,526
engineer, architect, engineering manager, tech lead, all these kind

6
00:00:33,548 --> 00:00:37,442
of roles. I spent most of my career in native

7
00:00:37,506 --> 00:00:40,934
development and was, you can see there I got a couple of emoticons.

8
00:00:40,982 --> 00:00:44,346
The first one is over an airplane because I spent most of my career in

9
00:00:44,368 --> 00:00:48,666
the airline industry. So if you have flown in

10
00:00:48,688 --> 00:00:52,442
Europe, in America, in Asia,

11
00:00:52,586 --> 00:00:56,154
and you've checked in with your mobile phone or booked

12
00:00:56,282 --> 00:00:59,886
manage your flight, most likely you played with an

13
00:00:59,908 --> 00:01:03,694
app that I actually built or I was architect for

14
00:01:03,892 --> 00:01:07,454
only recently I moved into cross platforms development and

15
00:01:07,492 --> 00:01:10,818
this know four years ago. So it's not so know a bit of

16
00:01:10,824 --> 00:01:14,354
experience in there. And this is with the other modicons that I got in there

17
00:01:14,392 --> 00:01:17,590
which is a lady taking can aircut because today I work

18
00:01:17,740 --> 00:01:21,158
for Forest which is a silent software company

19
00:01:21,244 --> 00:01:25,014
for air beauty barber and spa owners which

20
00:01:25,052 --> 00:01:28,520
provide tools to manage, market and grow their business.

21
00:01:30,170 --> 00:01:33,626
So why I'm here today to tell you about cross platform because as

22
00:01:33,648 --> 00:01:37,590
a professional engineer that spent a lot of years into native development,

23
00:01:37,670 --> 00:01:41,386
I found after a bit of time I found

24
00:01:41,408 --> 00:01:45,390
myself much more productive and effective as an engineer into

25
00:01:45,460 --> 00:01:48,926
the cross platform domain. So if

26
00:01:48,948 --> 00:01:53,022
this is the reason that brings me here, what I would

27
00:01:53,076 --> 00:01:56,418
like to basically achieve with this talk is really

28
00:01:56,504 --> 00:01:59,874
to stimulate your curiosity and break a little bit of

29
00:01:59,912 --> 00:02:03,794
skepticism on cross platform development. In a way this

30
00:02:03,832 --> 00:02:07,142
is the talk that I really wanted to hear four years

31
00:02:07,196 --> 00:02:10,694
ago. Okay, how are we going to

32
00:02:10,732 --> 00:02:13,990
do this talk? Through a small story which is

33
00:02:14,060 --> 00:02:17,458
a real story. The story that how I approach it

34
00:02:17,644 --> 00:02:20,620
cross platform. So let's start with it.

35
00:02:21,230 --> 00:02:25,082
Let's start with a story. The story is divided in four quick

36
00:02:25,216 --> 00:02:28,522
chapters. The first one talks about

37
00:02:28,576 --> 00:02:32,126
quality, the second one talks about developer experience,

38
00:02:32,308 --> 00:02:35,486
the other one is the CTO pitch. And finally,

39
00:02:35,588 --> 00:02:38,720
how to build a team. Why it's a story.

40
00:02:39,250 --> 00:02:42,726
So it's a story of a product line that Forest

41
00:02:42,778 --> 00:02:46,654
had a b to c. So for customers doomed

42
00:02:46,702 --> 00:02:50,558
to be retired. And the reason is with unscalable,

43
00:02:50,654 --> 00:02:54,066
completely unscalable because Forest today has more than

44
00:02:54,088 --> 00:02:57,702
8000 customer. Each one of them is eligible for having

45
00:02:57,756 --> 00:03:01,478
its own mobile application native. We're talking about

46
00:03:01,564 --> 00:03:04,870
white label apps. Clearly otherwise would have been totally impossible,

47
00:03:05,290 --> 00:03:08,786
but clearly at that stage four years ago was kind of smaller,

48
00:03:08,818 --> 00:03:12,346
the size of a company, but still too many apps into the stores to

49
00:03:12,368 --> 00:03:16,300
be able to manage in a decent way.

50
00:03:16,750 --> 00:03:20,134
Just think about a single bug fix. How can you fix

51
00:03:20,192 --> 00:03:24,046
and deploy thousands of apps in there with the technology that

52
00:03:24,068 --> 00:03:27,754
we know the native domain providers,

53
00:03:27,802 --> 00:03:30,720
right? So this is where it all started,

54
00:03:31,810 --> 00:03:35,442
and with me pitching react native to the

55
00:03:35,496 --> 00:03:38,994
CTO of the company in order to save the product line.

56
00:03:39,032 --> 00:03:43,154
So you may wonder now why a cross platform technology may

57
00:03:43,192 --> 00:03:45,570
save a problem which is of scalability.

58
00:03:46,310 --> 00:03:49,478
The reason is that when you go into a technology,

59
00:03:49,564 --> 00:03:53,046
then you bring along a lot of tool and instrumentation that you may not expect.

60
00:03:53,148 --> 00:03:55,686
So again,

61
00:03:55,868 --> 00:03:59,954
probably in here, the real killer feature was not code reuse,

62
00:04:00,002 --> 00:04:03,114
which is something that you think about all the time. You think about cross platform,

63
00:04:03,232 --> 00:04:07,162
but it was another thing, and I'm going to talk you through

64
00:04:07,216 --> 00:04:10,380
that. But before we dive into it,

65
00:04:10,690 --> 00:04:13,934
the real important thing that, oops, we all want to

66
00:04:13,972 --> 00:04:17,422
talk about when we say cross platform is

67
00:04:17,476 --> 00:04:21,358
quality. And I had to convince CTO of the company that

68
00:04:21,444 --> 00:04:24,980
with a technology called react native, I could have

69
00:04:25,670 --> 00:04:29,634
provided a quality solution to their customers which

70
00:04:29,672 --> 00:04:33,490
would have not let them regret the native stuff.

71
00:04:33,640 --> 00:04:37,218
So how is that even possible with react native?

72
00:04:37,394 --> 00:04:40,946
Your customers touch and feel the native

73
00:04:41,058 --> 00:04:44,598
graphic user interface component you're used to.

74
00:04:44,764 --> 00:04:48,674
They are used to. Sorry. So the UI

75
00:04:48,722 --> 00:04:52,474
scroll view has the same bounciness of the original UI scroll view

76
00:04:52,512 --> 00:04:55,654
because it is the original native UI scroll

77
00:04:55,702 --> 00:04:59,114
view. The label on the screen is a UI label. The button on the screen

78
00:04:59,152 --> 00:05:01,920
is a UI button. So there's no real,

79
00:05:02,370 --> 00:05:05,674
let's say nested browser or embedded

80
00:05:05,722 --> 00:05:09,150
browser. So your user is actually interacting with the web page.

81
00:05:09,300 --> 00:05:12,818
There is no real custom widget rendered in a

82
00:05:12,824 --> 00:05:16,894
graphqL, in an OpenGL

83
00:05:16,942 --> 00:05:20,340
engine, for example, or openGL canvas. That's the right word. Sorry.

84
00:05:22,150 --> 00:05:25,586
That may feel extremely fast, but even too fast for

85
00:05:25,608 --> 00:05:29,506
the platforms. I'm not used to it. As a user

86
00:05:29,538 --> 00:05:32,662
of an iPhone or an Android application, I really want

87
00:05:32,716 --> 00:05:37,250
something that looks like exactly the other app in terms of performance,

88
00:05:37,330 --> 00:05:40,582
in terms of responsiveness. Right. We don't want anything more or anything

89
00:05:40,636 --> 00:05:43,786
less. So react native can give you that. That's why

90
00:05:43,808 --> 00:05:47,242
I think the quality is there. So how is that even possible?

91
00:05:47,376 --> 00:05:50,618
You really need to understand a little bit of react native. This is not a

92
00:05:50,624 --> 00:05:54,446
course on react native. Let me just give you a little

93
00:05:54,468 --> 00:05:57,870
bit of, let's say a hint on how it works.

94
00:05:58,020 --> 00:06:01,790
So this picture is of a couple of puppets, right?

95
00:06:01,860 --> 00:06:05,870
They're there, and there is a puppeteer somewhere

96
00:06:05,950 --> 00:06:08,834
which we don't see, and there are some wires, right?

97
00:06:08,952 --> 00:06:12,418
So the puppeteer is moving the puppets. The puppets are

98
00:06:12,504 --> 00:06:16,262
our UI kit components. If you like the puppets are the

99
00:06:16,316 --> 00:06:20,274
real native graphical user interface component that the user

100
00:06:20,322 --> 00:06:23,654
sees and touch the puppeteers you don't see,

101
00:06:23,772 --> 00:06:27,490
which is the JavaScript engine in this case, right, JavaScript brain.

102
00:06:27,570 --> 00:06:30,886
In react native, it could be native code, or could be not native. Nobody cares,

103
00:06:30,918 --> 00:06:34,166
because unless you sit and you don't

104
00:06:34,198 --> 00:06:37,654
as a customer, you're not interested. And then you have the wires,

105
00:06:37,702 --> 00:06:41,646
which are the conjunction between the

106
00:06:41,668 --> 00:06:45,294
two worlds, right? So this is the app that we

107
00:06:45,332 --> 00:06:49,440
eventually built. As you can see, it looks like a very normal mobile application,

108
00:06:51,170 --> 00:06:54,558
and if we x ray this app for a second,

109
00:06:54,724 --> 00:06:57,858
what we're going to see is that exactly what I explained, but probably in a

110
00:06:57,864 --> 00:07:01,422
bit more technical terms. So the blue boxes are the native

111
00:07:01,486 --> 00:07:04,834
native code base, which has for example the react native SDK into

112
00:07:04,872 --> 00:07:09,014
it, and then you have the yellow box, which is the JavaScript engine,

113
00:07:09,212 --> 00:07:13,222
which basically makes react native code run,

114
00:07:13,356 --> 00:07:17,682
let's say in the middle there is this bridge that connects

115
00:07:17,746 --> 00:07:21,034
the two worlds. Let's maybe use

116
00:07:21,072 --> 00:07:24,970
a picture, which is even a bit more technical. I've stole this from a paper

117
00:07:25,040 --> 00:07:29,046
detecting proximity with Bluetooth low energy beacons for cultural

118
00:07:29,078 --> 00:07:33,610
heritage by Paolo Barsoki and Michael Girolami,

119
00:07:33,690 --> 00:07:37,422
because I think that gives a very, very good

120
00:07:37,476 --> 00:07:40,634
explanation again, of how react native

121
00:07:40,682 --> 00:07:43,274
works at a very high level. You don't have to get into the details,

122
00:07:43,322 --> 00:07:47,342
but on the left you've got this app which renders the react component

123
00:07:47,406 --> 00:07:50,594
tree, because react native uses react. Right, it's all

124
00:07:50,632 --> 00:07:53,906
JavaScript. He lives in his own shred. In the middle there

125
00:07:53,928 --> 00:07:57,590
is a bridge that bridges the two world

126
00:07:57,660 --> 00:08:01,762
exactly as the name implies. And on the right you have the platform OS

127
00:08:01,826 --> 00:08:05,506
with everything that you as an experienced native developer,

128
00:08:05,618 --> 00:08:09,466
know and love. Okay? So this should give you

129
00:08:09,648 --> 00:08:13,290
the idea of why react native can do

130
00:08:13,360 --> 00:08:16,058
the things that I've just explained to you, right?

131
00:08:16,224 --> 00:08:20,154
So I really know that I've said already Javascript too

132
00:08:20,192 --> 00:08:23,726
many times to annoy you because that was something that annoyed me

133
00:08:23,748 --> 00:08:27,440
at that time, right? And in fact, I also found this beautiful

134
00:08:27,810 --> 00:08:31,342
sort of a joke on the Internet, which it's really spot on,

135
00:08:31,396 --> 00:08:35,134
right? So I think I'm the blue guy in this case, and tell hey look,

136
00:08:35,172 --> 00:08:38,450
this is my favorite language, JavaScript. It's not true, because I'm going to tell you

137
00:08:38,520 --> 00:08:42,226
that is another one, my favorite language in a second. And you are there as

138
00:08:42,248 --> 00:08:46,334
can is developer looking behind my shoulder while I sweat? Because Javascript

139
00:08:46,382 --> 00:08:49,686
is completely drunk, as you can see over there. So I think

140
00:08:49,708 --> 00:08:53,400
this is one of the first thing we have to demystify for sure,

141
00:08:53,770 --> 00:08:57,126
but yeah, let's go through the story and we will talk about that as

142
00:08:57,148 --> 00:09:00,540
well. It was just very funny and very timely, if you like.

143
00:09:00,990 --> 00:09:05,340
So next slide. So again, just two, give you

144
00:09:06,030 --> 00:09:09,978
a couple of numbers there to explain that. When I say quality,

145
00:09:10,144 --> 00:09:13,406
I'm not talking about proof of concept of

146
00:09:13,428 --> 00:09:17,118
these application. We have more than 4000 live in the store at the

147
00:09:17,124 --> 00:09:20,270
moment. They all change based on the branding.

148
00:09:21,010 --> 00:09:24,438
We have roughly 12,000 daily active user

149
00:09:24,474 --> 00:09:28,018
and those app they do process roughly 2000

150
00:09:28,104 --> 00:09:31,890
daily appointment taking money was well and everything.

151
00:09:31,960 --> 00:09:35,346
So we're not talking about a proof of concept, we're talking about something which is

152
00:09:35,368 --> 00:09:38,358
really serious in a way. Again,

153
00:09:38,444 --> 00:09:42,034
quality. This is how they look like when you switch the theme

154
00:09:42,082 --> 00:09:45,718
because we have a luxury of having multiple teams. So again,

155
00:09:45,884 --> 00:09:50,074
it doesn't really feel like something that is not of

156
00:09:50,192 --> 00:09:54,058
high quality, if you like. Just to close

157
00:09:54,144 --> 00:09:57,418
the quality chapter, I really want to quote here,

158
00:09:57,504 --> 00:10:01,420
probably the person which is most interested on providing quality

159
00:10:01,870 --> 00:10:05,606
solutions to their customers, which is Ronan

160
00:10:05,638 --> 00:10:08,634
Parcel, the CEO of Forest, which stated,

161
00:10:08,682 --> 00:10:12,222
all in all, this is one of the most impressive things the company

162
00:10:12,276 --> 00:10:15,426
has ever done, was a testament of the quality that you

163
00:10:15,448 --> 00:10:19,566
can produce with cross platform developer

164
00:10:19,598 --> 00:10:22,850
experience. This is another chapter that I had to go through

165
00:10:22,920 --> 00:10:27,622
because clearly the company already had native code

166
00:10:27,676 --> 00:10:30,706
base, native developer a little bit. And anyway, it's truly,

167
00:10:30,738 --> 00:10:33,938
truly important even that I communicate to you, my audience,

168
00:10:34,034 --> 00:10:37,186
developers, what is the developer experience for cross

169
00:10:37,218 --> 00:10:40,326
platform? We need to please our customer, but we also need to please ourselves in

170
00:10:40,348 --> 00:10:43,962
a way, because we live with this every day for a lot of hours.

171
00:10:44,016 --> 00:10:47,226
Right. So let's jump in there. And the first thing I need to tell

172
00:10:47,248 --> 00:10:50,774
you is that we're not going to use javascript, we're going to use typescript,

173
00:10:50,822 --> 00:10:54,030
which is a completely different language. Typescript,

174
00:10:54,370 --> 00:10:57,530
as the name implies, is very, very much typed.

175
00:10:57,610 --> 00:11:01,386
It's a very modern language. You won't regret swift or kotlin,

176
00:11:01,418 --> 00:11:05,502
because they are very similar one to each other. It's a very alive

177
00:11:05,566 --> 00:11:08,802
language. It's not something that is old

178
00:11:08,856 --> 00:11:11,634
or that it's not used. It's really,

179
00:11:11,672 --> 00:11:15,266
really a beautiful language to play with. And you can

180
00:11:15,288 --> 00:11:19,222
even write javascript within typescript if you really want to. But in general, I think

181
00:11:19,276 --> 00:11:23,046
typescript is a very beautiful language. Two, work with the

182
00:11:23,068 --> 00:11:26,386
IDE is another very important topic, because personally

183
00:11:26,418 --> 00:11:30,106
I was extremely skeptical about the possibility of

184
00:11:30,128 --> 00:11:33,562
debugging, for example, the possibility to have autocompletion of the code,

185
00:11:33,616 --> 00:11:37,766
the possibility of refactoring. And I can tell you it's

186
00:11:37,798 --> 00:11:41,626
just much, much better than I used to play with Xcode.

187
00:11:41,738 --> 00:11:45,502
In reality, I used Xcode and upcode in my previous life,

188
00:11:45,556 --> 00:11:50,190
let's say, because upcode was a much better refactoring tooling.

189
00:11:50,530 --> 00:11:54,530
Now the ide for typescript eventually are

190
00:11:54,600 --> 00:11:58,610
extremely powerful. You can go from the free vs code to intellij

191
00:11:58,950 --> 00:12:01,934
powered, let's say ids.

192
00:12:02,062 --> 00:12:06,102
And the experience over there is just a pair, if not better than

193
00:12:06,236 --> 00:12:11,846
definitely better. Actually. Sorry of what it used to be with

194
00:12:11,868 --> 00:12:15,334
Xcode, sorry to say. But that's the reality of things,

195
00:12:15,452 --> 00:12:19,282
especially on the refractory side of things. Fast refresh.

196
00:12:19,346 --> 00:12:22,698
It's another thing that adds dramatically to the developer experience.

197
00:12:22,784 --> 00:12:26,522
The possibility, as we have seen, puppeteers and puppets to change

198
00:12:26,576 --> 00:12:29,738
the puppeteer at every command save. If you change the

199
00:12:29,744 --> 00:12:33,162
puppeteer at every command save, it means that your app behaves

200
00:12:33,226 --> 00:12:36,810
instantaneously different. So you don't have to stop, recompile,

201
00:12:36,890 --> 00:12:40,558
wait for this. And that you just hit command save and your app

202
00:12:40,644 --> 00:12:44,654
changes the behavior right away. It may seem like,

203
00:12:44,772 --> 00:12:48,546
or at least to my years at the very beginning was like, oh, it's a

204
00:12:48,648 --> 00:12:52,114
nice thing, but I'm used to compiling things.

205
00:12:52,232 --> 00:12:55,750
True, it's true. After you live with that for a while,

206
00:12:55,900 --> 00:12:58,760
you will get very annoyed about compiling things.

207
00:12:59,610 --> 00:13:03,334
React I spent my previous life

208
00:13:03,372 --> 00:13:06,594
a lot of time preparing talks

209
00:13:06,642 --> 00:13:10,730
and doing talks in relation to architecture for is development

210
00:13:11,470 --> 00:13:15,050
what sort of architecture we're going to do, blah blah blah, react.

211
00:13:15,870 --> 00:13:19,066
When I've seen react, I realized that it was a beautiful,

212
00:13:19,168 --> 00:13:22,378
beautiful, not even a framework because react is a library. It doesn't even have two

213
00:13:22,384 --> 00:13:25,646
stand a framework, but a beautiful tool.

214
00:13:25,748 --> 00:13:29,214
Or to build mobile application.

215
00:13:29,412 --> 00:13:32,438
It's even more so now that react support hooks

216
00:13:32,554 --> 00:13:36,146
compared to previous react, which was bit

217
00:13:36,168 --> 00:13:39,554
of an adaptation to the events that happen on mobile right

218
00:13:39,592 --> 00:13:42,194
now, is such a spot on thing.

219
00:13:42,312 --> 00:13:46,086
Declarative, fully declarative in that requires a little bit of

220
00:13:46,188 --> 00:13:49,346
mind switch compared to how we used to build mobile

221
00:13:49,378 --> 00:13:52,680
application. Because being declarative means you state,

222
00:13:53,050 --> 00:13:57,414
sorry, probably I need to choose better words, but you

223
00:13:57,452 --> 00:14:01,014
say what is the state of your application and

224
00:14:01,052 --> 00:14:04,934
your application behave and change in relation to the state versus

225
00:14:05,062 --> 00:14:08,326
checking how is your application and modifying

226
00:14:08,358 --> 00:14:11,790
that. So it's declarative, it's much, much more powerful,

227
00:14:13,170 --> 00:14:16,174
and the time you start playing with it,

228
00:14:16,212 --> 00:14:19,534
you will realize how much better is or

229
00:14:19,572 --> 00:14:23,294
much easier is to build a mobile application this way with

230
00:14:23,332 --> 00:14:26,514
react community another really important

231
00:14:26,712 --> 00:14:29,842
thing when you evaluate developer experience is the community.

232
00:14:29,896 --> 00:14:32,050
Because no matter what, you're going to have trouble.

233
00:14:33,510 --> 00:14:35,954
Whatever it is, you're going to have trouble. And if you don't have a community,

234
00:14:36,072 --> 00:14:40,242
if you don't have people, there's no stack overflow answers, there is no even conferences

235
00:14:40,386 --> 00:14:44,280
is very very difficult to handle. Right? So the community

236
00:14:45,050 --> 00:14:48,154
you can check for yourself and do a bit of Google is very very big

237
00:14:48,192 --> 00:14:51,594
around react native now. And last but not least is

238
00:14:51,632 --> 00:14:56,122
this possibility that adds up to the developer experience given as

239
00:14:56,256 --> 00:14:59,446
a mobile engineer. Usually we're

240
00:14:59,478 --> 00:15:02,746
DevOps, we distribute our own apps, we maintain the

241
00:15:02,768 --> 00:15:05,502
relationship with the App Store, app reviews and all these kind of things.

242
00:15:05,556 --> 00:15:09,418
It's stuff that we do and we know. So the over the air updates,

243
00:15:09,514 --> 00:15:13,854
the possibility to send a bug fix over

244
00:15:13,892 --> 00:15:17,826
the air. Two, all the installed application you have,

245
00:15:18,008 --> 00:15:21,742
that's a real game change. That's absolutely a game changer.

246
00:15:21,806 --> 00:15:25,106
And in reality, if you think about my use case and the story that

247
00:15:25,128 --> 00:15:28,494
I started with, with an application which has thousands,

248
00:15:28,542 --> 00:15:31,766
thousands of installation that you really need to update all of them

249
00:15:31,788 --> 00:15:35,222
if there is a bug fix. This was the killer feature I was looking

250
00:15:35,276 --> 00:15:38,806
at. But in order to get there, I really needed to have

251
00:15:38,908 --> 00:15:42,294
react native with me and the cross platform power.

252
00:15:42,492 --> 00:15:45,914
Right. So this is a quote of myself. I know it probably is not great,

253
00:15:45,952 --> 00:15:49,254
but I quoted myself, no money can convince me back to the previous

254
00:15:49,302 --> 00:15:53,150
way of working. In fairness, as a developments that's 100%

255
00:15:53,220 --> 00:15:56,462
I really hope. I try to give you a bit of a glimpse in here.

256
00:15:56,596 --> 00:16:00,366
But absolutely developer experiences is amazing

257
00:16:00,468 --> 00:16:03,246
in fairness. Let's go.

258
00:16:03,348 --> 00:16:06,994
Oh, sorry, I forgot that I put here those videos. This is

259
00:16:07,032 --> 00:16:09,906
what an over the air update looks like. So as you can see the app

260
00:16:09,928 --> 00:16:14,802
boots, we've created a panel that explains to our

261
00:16:14,856 --> 00:16:18,146
user that there is a

262
00:16:18,168 --> 00:16:21,686
better code base that can improve their experience. It's very very quick was

263
00:16:21,708 --> 00:16:25,126
you can see the apps reboots quickly and after that the

264
00:16:25,148 --> 00:16:28,326
new source code is there. Those are two applications that we

265
00:16:28,348 --> 00:16:31,642
have on the store. But I really wanted to show you that because

266
00:16:31,696 --> 00:16:35,974
it's something that maybe could be cryptic otherwise. So now the CTO

267
00:16:36,022 --> 00:16:39,594
pitch, let's go and have a look at some metrics and numbers that I asked

268
00:16:39,632 --> 00:16:42,938
to convince that react native was something good to play with.

269
00:16:43,024 --> 00:16:46,522
Okay. I put at the top quality because without quality we don't really go anywhere.

270
00:16:46,586 --> 00:16:50,320
Right. We said it already, it's really really important that we have quality there.

271
00:16:50,770 --> 00:16:54,510
And then we can talk about the first thing that everybody

272
00:16:54,580 --> 00:16:58,978
thinks when you say cross platforms, code reuse. So I can state very

273
00:16:59,064 --> 00:17:02,786
safely that if you build an app that there's nothing strange with

274
00:17:02,808 --> 00:17:06,498
that you have 90% code reuse. Because it's very, very rare that you have to

275
00:17:06,504 --> 00:17:10,278
say if is iOS do this, if is Andre do that, it happens.

276
00:17:10,364 --> 00:17:13,974
But 2% of your source code and source codes can become very

277
00:17:14,012 --> 00:17:17,686
large, right? So it's not really a big number. But to

278
00:17:17,708 --> 00:17:21,366
me, the coder asked was never the killer feature of cross

279
00:17:21,398 --> 00:17:24,682
platform. Was never, never hit. Fine, great,

280
00:17:24,736 --> 00:17:27,754
amazing. But that's not the killer feature of cross platform,

281
00:17:27,952 --> 00:17:31,590
it's what it implies. What does it imply?

282
00:17:31,750 --> 00:17:34,954
It implies 50% cost reduction.

283
00:17:35,082 --> 00:17:38,800
Why is 50% cost reduction? It's 50% cost reduction because

284
00:17:39,490 --> 00:17:43,150
most likely you have an iOS and an Android app and you build a single

285
00:17:43,220 --> 00:17:46,846
time. If you build a single time, you have already caught enough your costs

286
00:17:46,878 --> 00:17:49,890
because you can have a single engineer. But most likely,

287
00:17:51,030 --> 00:17:54,466
let's say I find it

288
00:17:54,488 --> 00:17:58,118
difficult to explain this to you because otherwise you're not going to trust me.

289
00:17:58,204 --> 00:18:01,894
But the 50% cost reduction could be pushed even

290
00:18:01,932 --> 00:18:05,266
more. And the reason is, again, react. I've witnessed

291
00:18:05,298 --> 00:18:09,654
that with myself, with the product owner,

292
00:18:09,782 --> 00:18:13,302
which I worked with when we started this endeavor

293
00:18:13,366 --> 00:18:16,906
into cross platform with the designer, which we

294
00:18:16,928 --> 00:18:20,450
were all kind of people coming from the native world, and we were all shocked

295
00:18:20,470 --> 00:18:24,206
by the speed we could put together a single app, let's say the

296
00:18:24,228 --> 00:18:27,566
is app, without even realizing that by

297
00:18:27,588 --> 00:18:31,006
just installing that into the Android phone,

298
00:18:31,188 --> 00:18:35,522
we already had that app as well. So 50% cost

299
00:18:35,576 --> 00:18:37,300
reduction to me,

300
00:18:39,430 --> 00:18:42,706
you can push it much further because react is a

301
00:18:42,728 --> 00:18:46,180
very fast library to build application.

302
00:18:47,430 --> 00:18:49,958
So yeah, I really wanted to give you that. I don't want to push it

303
00:18:49,964 --> 00:18:52,760
more than 50, otherwise you won't believe me. But it's more.

304
00:18:54,490 --> 00:18:58,150
What does this imply? It also implies that you have a faster

305
00:18:58,570 --> 00:19:02,054
time, two market, at least 50% more, because you must have had

306
00:19:02,092 --> 00:19:04,998
one iOS and 100. Those two developers,

307
00:19:05,174 --> 00:19:09,082
those two guys are now insisting on the same code base. So unless you plan

308
00:19:09,136 --> 00:19:12,554
it very poorly, so they step on each other boxes, if they

309
00:19:12,592 --> 00:19:16,474
don't, then you have 50% type to market reduction

310
00:19:16,522 --> 00:19:19,930
for sure. Clearly there are other implications.

311
00:19:20,010 --> 00:19:24,110
Resource utilization. You will never be into the situation whereby,

312
00:19:24,530 --> 00:19:27,666
for example, there's a bug on iOS and

313
00:19:27,688 --> 00:19:31,310
a bug on Android, because the bugs are going to be common and every engineer

314
00:19:31,390 --> 00:19:34,514
can basically contribute to the same product, to the same

315
00:19:34,552 --> 00:19:37,326
app, rather than, oh, I'm an iOS, I'm can Android, that's not my thing,

316
00:19:37,368 --> 00:19:41,318
and so on. Plus another very, very important thing,

317
00:19:41,404 --> 00:19:44,262
I had a lot of trouble with that in the past, in my previous past,

318
00:19:44,396 --> 00:19:48,162
in relation to uniformity and feature parity,

319
00:19:48,306 --> 00:19:51,446
because it's very difficult, was you may have witnessed it.

320
00:19:51,628 --> 00:19:55,526
If you have a product which is both in both platform, having uniformity

321
00:19:55,558 --> 00:19:58,746
and feature parity is very difficult. If there are two different source boxes, even if

322
00:19:58,768 --> 00:20:01,974
you sit and I'm under engineer very close to each other, the feature

323
00:20:02,022 --> 00:20:06,030
parity is very hard to achieve in here. It's by design clearly because

324
00:20:06,100 --> 00:20:10,974
there is a code reuse. Again, as you can see, it's beautiful to have 98%

325
00:20:11,012 --> 00:20:14,686
of code reuse, but in reality is everything else which matters

326
00:20:14,718 --> 00:20:18,098
for real. 50% code reduction, 50% time to

327
00:20:18,104 --> 00:20:21,742
market reduction, full resource utilization and uniformity.

328
00:20:21,886 --> 00:20:26,114
Over the air updates are really a key differentiator

329
00:20:26,162 --> 00:20:29,506
here. This is a killer feature to me for react native

330
00:20:29,618 --> 00:20:33,650
for what it implies. Again, it does imply rocket

331
00:20:33,730 --> 00:20:36,440
time, faster lead time,

332
00:20:37,130 --> 00:20:40,774
rocket time, faster release frequency.

333
00:20:40,902 --> 00:20:44,726
They both add up two software delivery performance,

334
00:20:44,758 --> 00:20:48,858
two great software delivery performance. So let me explain a little bit.

335
00:20:48,944 --> 00:20:52,474
What is a lead time? A lead time is the time that you measure

336
00:20:52,602 --> 00:20:56,494
at the moment that you check in something into your source control to the

337
00:20:56,532 --> 00:21:00,320
moment that it's production available for your customer.

338
00:21:00,930 --> 00:21:04,606
This is a lead time. It's really, really important to have it as short as

339
00:21:04,628 --> 00:21:08,466
possible, especially if you have critical bugs and stuff like that you really want

340
00:21:08,488 --> 00:21:12,258
to release, right? Say that for some reason you can't take payment

341
00:21:12,344 --> 00:21:16,050
and all your customers stuck with that. You really would want

342
00:21:16,200 --> 00:21:20,066
to put that fix out as soon as it hits git

343
00:21:20,178 --> 00:21:24,610
and basically your QA says it's fine, right? With native

344
00:21:24,690 --> 00:21:28,086
development we know that it's going to take at least a couple of days of

345
00:21:28,108 --> 00:21:31,546
review time. There's no chance. We are all used to

346
00:21:31,568 --> 00:21:34,458
send email to Apple to ask for expedite review,

347
00:21:34,624 --> 00:21:38,186
but it is still a lot of time with the over

348
00:21:38,208 --> 00:21:41,718
the year updates. I personally send those kind of

349
00:21:41,824 --> 00:21:45,438
critical bug fixes, mission critical bug fixes in a matter of

350
00:21:45,524 --> 00:21:48,638
30 minutes, find a code, write a test,

351
00:21:48,724 --> 00:21:53,374
fix the code, send it to QA out. It is the

352
00:21:53,412 --> 00:21:57,158
release frequency. It's yet again another extremely

353
00:21:57,194 --> 00:22:00,674
important metric because you could technically release five times a day,

354
00:22:00,712 --> 00:22:03,746
ten times a day, it doesn't really matter. You can release as fast as you

355
00:22:03,768 --> 00:22:07,558
want. This is a luxury that changes quite

356
00:22:07,644 --> 00:22:11,170
a lot the game of mobile development.

357
00:22:11,330 --> 00:22:14,902
It's all perfectly in terms and condition of both

358
00:22:14,956 --> 00:22:18,054
Apple and Google Play Store. The real

359
00:22:18,092 --> 00:22:21,626
important bit is that you don't add big features without

360
00:22:21,728 --> 00:22:24,954
going through the App Store, but you can add tweaks to

361
00:22:24,992 --> 00:22:28,218
the current existing features that are declared into your description and

362
00:22:28,224 --> 00:22:31,886
so on. And clearly you can fix bugs which

363
00:22:31,988 --> 00:22:36,320
will give your customers a much, much better experience,

364
00:22:36,690 --> 00:22:40,266
right? So those two things again are extremely,

365
00:22:40,298 --> 00:22:43,666
extremely important. Let's go on and talk about the

366
00:22:43,688 --> 00:22:47,380
team. And here is probably the most difficult conversation part.

367
00:22:48,630 --> 00:22:51,700
What about the current code base? Right?

368
00:22:52,310 --> 00:22:55,842
You have really two options here. You either

369
00:22:55,976 --> 00:22:58,882
extend what you have in a sort of a hybrid approach,

370
00:22:58,946 --> 00:23:02,114
sometimes called brown bag approach in react Native,

371
00:23:02,242 --> 00:23:06,274
which means your apps is alf native and alph react native, it can coexist.

372
00:23:06,402 --> 00:23:10,282
I've done this. It's definitely something

373
00:23:10,336 --> 00:23:13,658
that I would advise if your app is very big and you can't do a

374
00:23:13,664 --> 00:23:17,722
big bang rewrite. But my personal

375
00:23:17,776 --> 00:23:21,518
advice is don't plan this to be your future

376
00:23:21,684 --> 00:23:25,674
for too long. Plan this as removing

377
00:23:25,802 --> 00:23:29,354
chunks of your application, changing them from being native

378
00:23:29,402 --> 00:23:32,846
native to react native one at a time. So you are never going

379
00:23:32,948 --> 00:23:36,834
dark, let's say, with your app. But at the same time, you don't plan

380
00:23:36,952 --> 00:23:41,310
to have a native native code base and a react native code base coexisting

381
00:23:41,470 --> 00:23:44,450
together forever. That would be a mistake.

382
00:23:45,030 --> 00:23:47,878
The other option is to rewrite why you do this.

383
00:23:47,964 --> 00:23:51,314
You do this when your app is probably a bit dated

384
00:23:51,362 --> 00:23:54,854
anyway. You want two have a revamping in

385
00:23:54,892 --> 00:23:58,582
how it looks like, right feels, maybe features. But always

386
00:23:58,636 --> 00:24:02,066
remember you work at twice the normal speed you used to.

387
00:24:02,108 --> 00:24:05,242
So maybe you can evaluate that,

388
00:24:05,296 --> 00:24:08,634
you can go dark a little bit, rewrite the app, and then have a big

389
00:24:08,672 --> 00:24:11,934
bang once it's done. We have witnessed both

390
00:24:12,052 --> 00:24:15,582
in forest. You can go and find

391
00:24:15,636 --> 00:24:19,662
a lot of examples out there in the wild on Google of companies doing

392
00:24:19,716 --> 00:24:23,186
both approaches. I think they're both valid. Just my

393
00:24:23,208 --> 00:24:26,626
personal advice is don't try to pretend you

394
00:24:26,648 --> 00:24:30,190
want to live with the hybrid approach forever. That's not scalable.

395
00:24:30,270 --> 00:24:33,890
Okay, what about your current employees?

396
00:24:34,790 --> 00:24:38,178
Okay, one of the most important thing on employee is that you need

397
00:24:38,184 --> 00:24:41,362
to buy in from them. You need two buy in. You need to have employee

398
00:24:41,426 --> 00:24:45,618
happy for what they do. If they're not, be prepared for leavers,

399
00:24:45,794 --> 00:24:49,174
but also be prepared for new lovers. Believe me,

400
00:24:49,212 --> 00:24:52,666
that is going to happen. And I also have a story for that because

401
00:24:52,768 --> 00:24:56,582
before joining Forrest, I ran

402
00:24:56,646 --> 00:25:00,134
an r and D in my previous company to exactly spike react native.

403
00:25:00,182 --> 00:25:03,886
Understand if that was something of quality, could deliver quality,

404
00:25:04,068 --> 00:25:07,822
blah, blah, blah, all these kind of things. And I brought together with me

405
00:25:07,956 --> 00:25:11,946
a few iOS engineers, few Android engineers on iOS.

406
00:25:12,058 --> 00:25:15,422
It's my past, so I could move myself very easily on Android.

407
00:25:15,486 --> 00:25:19,138
It's not my thing. So basically, probably I got the best engineer in

408
00:25:19,144 --> 00:25:23,460
the company that day on that endeavor, let's say. And what happened

409
00:25:24,310 --> 00:25:27,506
under Christmas? I got this slack message from the

410
00:25:27,528 --> 00:25:31,538
engineer which told me, look, this thing you're asking me to do can

411
00:25:31,554 --> 00:25:34,838
be done probably. We were bridging quite a lot at that stage. We're trying to

412
00:25:34,844 --> 00:25:38,134
be in the hybrid world. I see how the hybrid works.

413
00:25:38,252 --> 00:25:41,286
That's impossible. Can do it. Just blah, blah, blah,

414
00:25:41,318 --> 00:25:44,780
blah. And I said, look, you are the most important

415
00:25:45,390 --> 00:25:48,582
person for Android in the company. So if you think you're

416
00:25:48,646 --> 00:25:51,450
most skilled, if you think that that's not doable,

417
00:25:52,110 --> 00:25:55,486
don't stress. I trust your word. I go back to the

418
00:25:55,508 --> 00:25:58,558
chief architect that was architect at this stage, and I'm telling them, look, it's not

419
00:25:58,564 --> 00:26:02,174
doable that way. That way it's not doable. So once

420
00:26:02,212 --> 00:26:05,822
you put someone into this sort of a pattern, mental pattern, the answer

421
00:26:05,876 --> 00:26:08,690
was, okay, give me another three days. Give me another three days.

422
00:26:08,840 --> 00:26:12,014
But I'm quite sure that's impossible. Blah, blah, blah.

423
00:26:12,142 --> 00:26:15,778
Came back after three days. The work was done. I don't remember exactly the specific,

424
00:26:15,864 --> 00:26:19,622
but I do remember, yeah, I did it. I did it. It's working perfect.

425
00:26:19,676 --> 00:26:23,414
It's also even clean. I'm very, very happy. You know what?

426
00:26:23,532 --> 00:26:28,198
He was a lover, but he also was a lever because basically

427
00:26:28,284 --> 00:26:30,930
for us was just an R and D. The R and D finished.

428
00:26:31,090 --> 00:26:34,634
And this person, this engineer, was so happy for

429
00:26:34,672 --> 00:26:37,866
what they'd learned. They figured out what they had that they said that

430
00:26:37,888 --> 00:26:41,434
they moved to a company that was doing react native already. It was

431
00:26:41,472 --> 00:26:43,866
a bit of a shock for us because we lost a very good engineer,

432
00:26:43,898 --> 00:26:47,502
but at the same time was a good witness of what when you break

433
00:26:47,556 --> 00:26:51,486
this initial barrier of, I want

434
00:26:51,508 --> 00:26:55,726
to work with this, I don't care. But we

435
00:26:55,748 --> 00:26:58,994
forced this guy a little bit. And after we forced and

436
00:26:59,032 --> 00:27:01,570
put this guy outside of his comfort zone,

437
00:27:01,990 --> 00:27:04,962
he didn't want at the beginning, but then it was like, I'm not going back.

438
00:27:05,016 --> 00:27:08,550
Not going back. In a way, it's the same feedback that I gave you

439
00:27:08,620 --> 00:27:11,400
two slides ago. I'm not going back. Anyway,

440
00:27:12,970 --> 00:27:16,406
let me give you the golden rule for building the team, which I

441
00:27:16,428 --> 00:27:19,846
already stated, but I'll restate. Oh, no, this is really

442
00:27:19,868 --> 00:27:23,606
important. I didn't tell you before. Experienced mobile native developer

443
00:27:23,638 --> 00:27:27,014
in the team. Don't pretend that if you do cross platform, you don't need native

444
00:27:27,062 --> 00:27:31,222
developers. You really, really need native developers in there. Because react native

445
00:27:31,286 --> 00:27:34,474
has that react part and the native part, and you need to tame

446
00:27:34,522 --> 00:27:38,158
both of them. So if you have a team, you really have to have at

447
00:27:38,164 --> 00:27:41,726
least one. I was Engineer 100, engineer experienced, able two

448
00:27:41,748 --> 00:27:44,894
build mobile in the past. So they know what it means to build mobile,

449
00:27:44,942 --> 00:27:48,770
then you can build on top of that. But that's really important

450
00:27:48,840 --> 00:27:52,402
that you have those figures, otherwise you will find yourself

451
00:27:52,536 --> 00:27:55,950
into trouble. There is other tools like Expo,

452
00:27:56,110 --> 00:27:59,290
but in general, please have an eye.

453
00:27:59,310 --> 00:28:03,350
As an under engineer, they will speed you up dramatically.

454
00:28:03,930 --> 00:28:06,534
Engineers that buy in and want to learn.

455
00:28:06,652 --> 00:28:10,042
Okay? Because if you can't hire for react native specific person,

456
00:28:10,096 --> 00:28:13,706
you will want to try to train them. Or anyway you want people that are

457
00:28:13,728 --> 00:28:16,982
very, very interested. And in fact, let's jump

458
00:28:17,046 --> 00:28:21,354
into the how to hire again,

459
00:28:21,472 --> 00:28:24,558
strong native background experience iOS and Android, you need to

460
00:28:24,564 --> 00:28:28,126
know what does it mean to build an app. It's really, really important, even for

461
00:28:28,148 --> 00:28:31,518
the old DevOps part. And again,

462
00:28:31,604 --> 00:28:35,130
the learning attitude and the willing to get out of their comfort zone.

463
00:28:35,210 --> 00:28:38,818
If you're up into like we do, mostly to get people that are

464
00:28:38,904 --> 00:28:42,754
pretty much only iOS or Android engineers, but they really want to challenge themselves.

465
00:28:42,952 --> 00:28:46,118
If you find this attitude, if they have the experiences,

466
00:28:46,284 --> 00:28:50,146
you won't regret to hire them, because basically it's

467
00:28:50,178 --> 00:28:54,680
a perfect mixture to make a team able

468
00:28:55,770 --> 00:28:59,702
to be successful in reality. So to recap

469
00:28:59,766 --> 00:29:02,922
very quickly, we talked about good quality, how react native works

470
00:29:02,976 --> 00:29:05,660
more or less probably you get now an idea,

471
00:29:07,310 --> 00:29:10,746
the user touches the break thing. Developer experience is

472
00:29:10,768 --> 00:29:14,714
just great. I can't state it any differently. The CTO pitch,

473
00:29:14,762 --> 00:29:18,666
the metrics, the numbers you've seen over there, a very, very important number. The speed,

474
00:29:18,778 --> 00:29:23,486
the cost reduction, time to market, and overall the

475
00:29:23,508 --> 00:29:26,750
delivery experience, which changes very, very dramatically.

476
00:29:27,330 --> 00:29:30,942
And build a team, what sort of person

477
00:29:30,996 --> 00:29:33,518
you should look at or what sort of team you should have in order to

478
00:29:33,524 --> 00:29:36,966
be successful. That's everything for

479
00:29:36,988 --> 00:29:40,182
today. Thank you very much. If you want talk with me,

480
00:29:40,236 --> 00:29:42,840
just get in touch. Here is the Twitter handle and the email.

481
00:29:43,370 --> 00:29:45,110
Thanks a lot. Till next time.

