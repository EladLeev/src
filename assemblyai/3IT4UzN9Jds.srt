1
00:01:54,570 --> 00:01:57,950
Everybody, my name is ran Isenberg and I want to talk to you today

2
00:01:58,020 --> 00:02:01,146
about how you can level up your CCD pipeline

3
00:02:01,178 --> 00:02:03,790
with AWS smart feature flags.

4
00:02:04,130 --> 00:02:07,474
So let's start it. So let's say that you've

5
00:02:07,522 --> 00:02:11,314
just deployed your new service, your new feature to your AWS

6
00:02:11,362 --> 00:02:14,534
account, your production account, and everything seems fine

7
00:02:14,572 --> 00:02:18,034
at the beginning. However, as time goes by, you realize

8
00:02:18,082 --> 00:02:21,626
that you have a problem, something is not working. You need to

9
00:02:21,648 --> 00:02:24,620
revert the feature and you need to do it as soon as possible.

10
00:02:25,150 --> 00:02:28,506
What you're trying to do essentially is to change the behavior of your

11
00:02:28,528 --> 00:02:32,238
service. And this capability is a very important one,

12
00:02:32,324 --> 00:02:36,094
changing the behavior of your service. And I can think of

13
00:02:36,132 --> 00:02:39,854
another two cases where this is very useful. One case

14
00:02:39,892 --> 00:02:43,230
is canary deployments, gradually deploying

15
00:02:43,570 --> 00:02:47,406
a new feature and changing the behavior of your service gradually.

16
00:02:47,518 --> 00:02:51,538
Let's say at the beginning for 10% of the customers, then 20% of

17
00:02:51,544 --> 00:02:55,522
the customers, all the way to 100. And during that time

18
00:02:55,656 --> 00:02:59,382
if there's an error, you basically want to revert the

19
00:02:59,436 --> 00:03:01,960
behavior change automatically and quickly.

20
00:03:02,490 --> 00:03:05,762
And lastly, another use case is a b testing.

21
00:03:05,906 --> 00:03:10,182
And in a b testing, what you want to do is basically enable

22
00:03:10,246 --> 00:03:13,398
a feature change the behavior of your service for a subset

23
00:03:13,414 --> 00:03:17,034
of customers. So let's say you have a premium set of

24
00:03:17,072 --> 00:03:20,554
customers that you want to enable them, a premium set

25
00:03:20,592 --> 00:03:23,834
of features, right? So this is how you can do it with

26
00:03:23,872 --> 00:03:26,800
a b testing. So now comes the question,

27
00:03:27,170 --> 00:03:30,670
how do you do that? How do you do all these free capabilities?

28
00:03:31,250 --> 00:03:34,794
Three capabilities? Well, the answer is obviously feature

29
00:03:34,842 --> 00:03:38,354
flags. And this is the main topic of my talk

30
00:03:38,392 --> 00:03:41,726
today, and I'm going to show you how you can do it on your edibus

31
00:03:41,758 --> 00:03:45,794
account. And we're going to use edibus app config and

32
00:03:45,832 --> 00:03:49,362
an SDK that I wrote and contributed to Edibus Lambda

33
00:03:49,426 --> 00:03:53,046
power tools. So, a little bit about myself my name

34
00:03:53,068 --> 00:03:56,434
is ran Isenberg. I'm a principal software architect

35
00:03:56,482 --> 00:03:59,894
at Cyberark. I'm an edibles community builder

36
00:04:00,022 --> 00:04:03,702
and I maintain and write at my serverless

37
00:04:03,766 --> 00:04:07,450
blog website, runthebuilder Cloud, where I share my

38
00:04:07,520 --> 00:04:11,326
serverless knowledge and experience. So what

39
00:04:11,348 --> 00:04:15,086
are we going to talk today? What we're going to talk about today?

40
00:04:15,268 --> 00:04:18,942
We're going to talk about what are the requirements for these

41
00:04:18,996 --> 00:04:22,286
capabilities. We're going

42
00:04:22,308 --> 00:04:25,854
to discuss the functional and non functional requirements for a

43
00:04:25,892 --> 00:04:29,390
solution. And since feature flags are configuration,

44
00:04:29,470 --> 00:04:33,438
we're going to discuss the configuration types, how we're going to implement

45
00:04:33,534 --> 00:04:36,978
the feature flags. We have dynamic and static configurations.

46
00:04:37,154 --> 00:04:41,014
I'm going to show you in deep dive, the AWS app

47
00:04:41,052 --> 00:04:44,326
config and Lambda Powertools solution. We're going to talk

48
00:04:44,348 --> 00:04:48,246
about smart feature flags and what's smart about them. And lastly,

49
00:04:48,278 --> 00:04:52,358
we're going to discuss the best practices for using feature flags

50
00:04:52,534 --> 00:04:56,490
from development to testing to production.

51
00:04:57,550 --> 00:04:59,610
So let's start with the requirements.

52
00:05:01,330 --> 00:05:05,758
So if I recall, I said that you

53
00:05:05,764 --> 00:05:09,230
want to have the ability to quickly roll back any feature

54
00:05:11,090 --> 00:05:14,478
to change the behavior as soon as possible. We want to have

55
00:05:14,484 --> 00:05:18,066
the gradual deployment of features and an automatic rollback in

56
00:05:18,088 --> 00:05:21,730
case of an issue, and we want to have a b testing.

57
00:05:22,230 --> 00:05:25,806
In addition, since this is an AWS solution only, we wanted to

58
00:05:25,848 --> 00:05:29,270
support both lambda functions and containers. And another

59
00:05:29,340 --> 00:05:32,646
requirement that was important to my company, but I think it should

60
00:05:32,668 --> 00:05:36,150
be also important to you is fendrop high certification.

61
00:05:37,050 --> 00:05:40,330
And lastly, there's a non functional requirement.

62
00:05:40,990 --> 00:05:44,854
Any solution should be really easy to use and integrate

63
00:05:44,902 --> 00:05:48,506
into my service and my CACD pipeline, and I want it to

64
00:05:48,528 --> 00:05:51,902
be self managed and resilient. I don't want to worry about

65
00:05:51,956 --> 00:05:56,110
backups or high availability of the feature flags solution.

66
00:05:57,890 --> 00:06:01,258
So feature flags are a type of configuration,

67
00:06:01,434 --> 00:06:04,674
and a configuration is essentially a collection of

68
00:06:04,712 --> 00:06:08,020
settings that influence and change the behavior of your service.

69
00:06:08,710 --> 00:06:12,766
And in this example, you can see a naive feature flags

70
00:06:12,798 --> 00:06:15,982
implementation that I wrote. I have a simple

71
00:06:16,056 --> 00:06:19,734
function, I evaluate, I have a magic function

72
00:06:19,772 --> 00:06:23,766
that does evaluate feature flags for me. We're going

73
00:06:23,788 --> 00:06:27,126
to discuss what it does later on and it returns me

74
00:06:27,148 --> 00:06:30,774
a boolean, and then I have a simple if else if the feature

75
00:06:30,822 --> 00:06:33,990
flag is enabled, I'm going to handle the new feature logic.

76
00:06:34,070 --> 00:06:38,038
Otherwise I'm going to do the same old service logic

77
00:06:38,134 --> 00:06:42,186
and it will not change my behavior. So this is a very naive implementation,

78
00:06:42,298 --> 00:06:46,314
but it works. So let's

79
00:06:46,362 --> 00:06:49,966
discuss the configuration types. We have dynamic and

80
00:06:49,988 --> 00:06:53,070
static configurations that we can use for feature flags.

81
00:06:54,690 --> 00:06:58,530
What is a static configuration? So a static configuration,

82
00:06:59,830 --> 00:07:03,262
in this case I'm going to use the example of lambda functions

83
00:07:03,326 --> 00:07:06,914
because this is what I use, but it can also be containers.

84
00:07:07,042 --> 00:07:11,270
So in this case, when I upload my

85
00:07:11,340 --> 00:07:14,582
lambda function, when my CI CD pipeline, my service

86
00:07:14,636 --> 00:07:18,540
CI CD pipeline uploads a lambda function to the cloud, to my account,

87
00:07:19,390 --> 00:07:23,014
it bundles my handler code with environment

88
00:07:23,062 --> 00:07:27,594
valve. It defines the environment variables, and also it

89
00:07:27,632 --> 00:07:31,326
can bundle in the zip study configuration files could be

90
00:07:31,348 --> 00:07:35,054
just JSON files. So they're part of the zip files that

91
00:07:35,092 --> 00:07:38,446
goes to AWS and it's deployed. And if I

92
00:07:38,468 --> 00:07:42,526
want to make a change to

93
00:07:42,548 --> 00:07:46,178
the static configuration, I just need to run the CICD pipeline again

94
00:07:46,264 --> 00:07:49,170
and go through all the gates and the tests, et cetera,

95
00:07:49,910 --> 00:07:53,380
to build the zip file and deploy it to my production account.

96
00:07:54,310 --> 00:07:58,150
Dynamic, on the other hand, are a bit different. So I still have my

97
00:07:58,220 --> 00:08:01,670
service CI CD pipeline and I still create my lambda files,

98
00:08:02,010 --> 00:08:05,270
my lambda zip file, and I deploy it to AWS.

99
00:08:05,850 --> 00:08:09,530
However, the lambda does not have the

100
00:08:09,600 --> 00:08:12,822
configuration statically in its zip file.

101
00:08:12,966 --> 00:08:16,890
It uses an API call to fetch the configuration from

102
00:08:16,960 --> 00:08:21,014
an external resource, some configuration resource that is deployed

103
00:08:21,062 --> 00:08:24,906
by another CI CD pipeline, a dedicated CI CD pipeline,

104
00:08:25,018 --> 00:08:27,742
just for the configuration. Okay,

105
00:08:27,876 --> 00:08:31,946
so in this case, if I want to make a change to the lambda behavior,

106
00:08:32,058 --> 00:08:35,546
all I need to do is deploy the configuration CI CD

107
00:08:35,578 --> 00:08:38,994
pipeline, which is much quicker, it has less tests and

108
00:08:39,032 --> 00:08:42,626
less resources to deploy and it's much quicker. And then when

109
00:08:42,648 --> 00:08:46,566
the lambda checks for the new configuration, it's going to get the new values and

110
00:08:46,588 --> 00:08:48,950
it's going to change the behavior accordingly.

111
00:08:50,330 --> 00:08:54,306
So let's sum it up, static versus dynamic.

112
00:08:54,338 --> 00:08:58,194
So static again, we're reading the configuration from the bundled

113
00:08:58,242 --> 00:09:02,326
resources, the JSON files in the zip or environment variables.

114
00:09:02,358 --> 00:09:05,754
In dynamic, we're using an API call in

115
00:09:05,792 --> 00:09:09,986
static, if you want to make a change, you need to rerun the service CICD

116
00:09:10,038 --> 00:09:13,502
pipeline. And in the dynamic we need to run

117
00:09:13,556 --> 00:09:16,750
the configuration CI CD pipeline, which is quicker.

118
00:09:17,090 --> 00:09:20,782
We do have the complexity in dynamic of

119
00:09:20,836 --> 00:09:24,658
another pipeline to manage, but since it allows for

120
00:09:24,744 --> 00:09:28,414
really quick changes in service behavior, this is a winner.

121
00:09:28,462 --> 00:09:32,414
We're going to use dynamic configuration for our feature

122
00:09:32,462 --> 00:09:33,890
flags implementation.

123
00:09:35,910 --> 00:09:39,218
So now that we understand how to do the feature flags,

124
00:09:39,394 --> 00:09:43,510
how to implement them, let's go other the solution

125
00:09:44,250 --> 00:09:47,398
we're going to use a JSON configuration file as part of

126
00:09:47,404 --> 00:09:51,354
the development stage. We're going to deploy it to AWS app config with its

127
00:09:51,392 --> 00:09:56,182
own CICD pipeline. Like we said, it's a dynamics configuration

128
00:09:56,246 --> 00:10:00,682
file configuration. And then we're going to use the SDK

129
00:10:00,746 --> 00:10:04,858
in lambda power tools for feature flags to evaluate in runtime

130
00:10:04,954 --> 00:10:08,350
and get the feature flags from ADLs app config.

131
00:10:09,890 --> 00:10:13,214
So this is a sample JSON file with just a premium

132
00:10:13,262 --> 00:10:16,558
features where default value is false. The feature is disabled

133
00:10:16,574 --> 00:10:18,100
by default in this case.

134
00:10:21,190 --> 00:10:24,770
Now we're going to show again

135
00:10:24,840 --> 00:10:28,434
bring up the dynamic diagram from

136
00:10:28,472 --> 00:10:32,578
before, and here we can see that now we're deploying a JSON file

137
00:10:32,674 --> 00:10:36,370
that is translated into an AWS app config configuration

138
00:10:36,450 --> 00:10:39,546
resource. And my lambda is going to check new

139
00:10:39,568 --> 00:10:43,626
configuration from app config and fetch the

140
00:10:43,648 --> 00:10:46,140
values in runtime with an API call.

141
00:10:47,470 --> 00:10:50,410
So why did I choose AWS app config?

142
00:10:50,990 --> 00:10:54,574
What's so great about it. Okay, so first of all,

143
00:10:54,612 --> 00:10:58,718
it's an AWS integrated service. I don't need to add another

144
00:10:58,884 --> 00:11:02,506
third party service outside of AWS account. I don't need

145
00:11:02,548 --> 00:11:05,874
to have any traffic going outside my account, so it's more

146
00:11:05,912 --> 00:11:09,874
secured. I don't need to using into go into

147
00:11:09,912 --> 00:11:13,540
the process of security evaluations and

148
00:11:13,990 --> 00:11:18,834
all those corporate processes

149
00:11:18,882 --> 00:11:22,130
that go into when you're adding third party integrations.

150
00:11:22,210 --> 00:11:26,182
It's part of AWS and I can just use it. It's one of the few

151
00:11:26,236 --> 00:11:30,502
solutions, if not the only one I believe, that has fedrump

152
00:11:30,566 --> 00:11:34,182
high certification for feature flags. It's fully managed,

153
00:11:34,246 --> 00:11:38,086
so I don't need to care about backups and high availability.

154
00:11:38,278 --> 00:11:41,966
It's always there, it's always working. It has

155
00:11:41,988 --> 00:11:46,154
a great feature for validating JSON schemas, so I can define

156
00:11:46,282 --> 00:11:50,238
a schema for my configuration. So if somebody

157
00:11:50,404 --> 00:11:54,174
tries to upload a malformed or some problematic

158
00:11:54,302 --> 00:11:58,850
schema, it will just fail the deployment and

159
00:11:59,000 --> 00:12:01,860
my environment will be just fine.

160
00:12:02,230 --> 00:12:06,622
And it has deployment strategies. So when you deploy configuration,

161
00:12:06,766 --> 00:12:09,874
you can choose canary deployments, which if you recall,

162
00:12:09,922 --> 00:12:13,398
is one of our functional requirements. So it has it out of

163
00:12:13,404 --> 00:12:16,930
the box. So it's great. I can do canary deployments

164
00:12:17,090 --> 00:12:20,834
and define AWS Cloudwatch

165
00:12:20,882 --> 00:12:24,542
alarms that if they trigger during the canary deployments,

166
00:12:24,626 --> 00:12:27,702
I'm going to have the automatic rollback and go back to the previous

167
00:12:27,766 --> 00:12:32,062
version of my configuration. So all in all, it has great

168
00:12:32,116 --> 00:12:34,910
features that answer many of my requirements.

169
00:12:39,470 --> 00:12:42,934
So this is how the console looks like in app config.

170
00:12:42,982 --> 00:12:46,638
You need to define an application. An application can

171
00:12:46,644 --> 00:12:50,574
be just your microservice or service. In this case, it's called

172
00:12:50,612 --> 00:12:54,494
a test service. And each application has

173
00:12:54,532 --> 00:12:58,234
an environment, and environment

174
00:12:58,282 --> 00:13:00,850
can be dev test, production, et cetera.

175
00:13:01,510 --> 00:13:05,106
And each environment has the configuration, which on

176
00:13:05,128 --> 00:13:08,386
the bottom right, you can see it has a version, it has a name on

177
00:13:08,408 --> 00:13:12,002
the left, and it has a deployment status if you chose canary

178
00:13:12,066 --> 00:13:15,526
deployments. So now that we

179
00:13:15,548 --> 00:13:19,522
know how to deploy the configuration, we're going to use app config

180
00:13:19,666 --> 00:13:22,986
dynamic pipeline. Let's talk about the

181
00:13:23,008 --> 00:13:26,970
evaluation of the function of the feature flags in runtime.

182
00:13:27,790 --> 00:13:30,970
We're using to use AWS Lambda power tools,

183
00:13:32,510 --> 00:13:36,174
we're going to use Python, which is what I

184
00:13:36,212 --> 00:13:39,546
developed. But it's a very simple solution,

185
00:13:39,658 --> 00:13:43,294
so you can really write it in your own language of

186
00:13:43,332 --> 00:13:47,590
choice. We're using here edibles, APIs, and some Python

187
00:13:47,770 --> 00:13:51,614
code. So the examples are going to be Python, since the solution is Python

188
00:13:51,662 --> 00:13:55,326
based. So for those who don't know edibles

189
00:13:55,358 --> 00:13:59,134
Lambda Powertools is an amazing repository. It basically defines

190
00:13:59,182 --> 00:14:02,722
all the best practices for AWS lambda logging,

191
00:14:02,786 --> 00:14:06,018
tracing, input validation, and feature flags

192
00:14:06,194 --> 00:14:09,366
are defined and you can use their utilities to do

193
00:14:09,388 --> 00:14:14,806
that. It has over 1 million downloads per month, so it's

194
00:14:14,838 --> 00:14:18,294
very popular. And we're going to use the feature

195
00:14:18,342 --> 00:14:21,574
flags utility, which I designed and contributed to edible

196
00:14:21,622 --> 00:14:25,414
Aslam powertools. And what it essentially does, it fetches

197
00:14:25,462 --> 00:14:28,940
configurations from app config. It stores it

198
00:14:29,390 --> 00:14:32,666
in an in memory cache, it evaluates the feature

199
00:14:32,698 --> 00:14:36,526
flags value for you, and it has something very interesting. It has

200
00:14:36,548 --> 00:14:39,966
a support for regular and smart feature flags. And I'm

201
00:14:39,998 --> 00:14:44,146
going to discuss smart feature flag later on. And just

202
00:14:44,168 --> 00:14:48,114
to clarify, it's not just for a lambda function, even though

203
00:14:48,232 --> 00:14:52,070
the name says lambda, you can use it also in containers.

204
00:14:54,250 --> 00:14:58,038
So let's go back to the simple use case.

205
00:14:58,204 --> 00:15:00,230
We have a regular feature flag,

206
00:15:02,650 --> 00:15:05,946
a 10% of campaign, and the default value is going

207
00:15:05,968 --> 00:15:09,450
to be, let's say the feature is enabled by default.

208
00:15:11,230 --> 00:15:14,830
And this is how you're going to use the code. In line three,

209
00:15:14,900 --> 00:15:17,962
we're going to define the app config configuration, the environment,

210
00:15:18,026 --> 00:15:21,422
the application, and the configuration name. In line nine,

211
00:15:21,476 --> 00:15:24,974
we're going to define the instance of

212
00:15:25,012 --> 00:15:28,842
our SDK with the in memory cache. We're going to initialize

213
00:15:28,906 --> 00:15:32,494
it. And then in line twelve we're going to evaluate, right, this is the magic

214
00:15:32,542 --> 00:15:35,182
function. We're going to evaluate the feature flags,

215
00:15:35,246 --> 00:15:39,006
10% off, and we're going to get a boolean value back,

216
00:15:39,128 --> 00:15:42,374
apply discount, and then you can see the navy implementation again

217
00:15:42,412 --> 00:15:46,002
in line 15. If apply discount, change the behavior,

218
00:15:46,066 --> 00:15:49,206
do something new. Otherwise do the

219
00:15:49,228 --> 00:15:52,570
old behavior. And something

220
00:15:52,640 --> 00:15:56,250
important to note that in line 13 I'm using the default value

221
00:15:56,320 --> 00:15:58,954
equals false. Why is that?

222
00:15:59,152 --> 00:16:03,446
Well, what if somebody deployed

223
00:16:03,478 --> 00:16:06,734
a new configuration and just removed the feature 10%

224
00:16:06,772 --> 00:16:10,734
of campaign from the configuration? I don't want my

225
00:16:10,772 --> 00:16:13,610
code, my lambda function to crash,

226
00:16:13,770 --> 00:16:17,234
so I'm going to have a fallback, a default value. So in case it

227
00:16:17,272 --> 00:16:20,786
doesn't find the feature flag in the

228
00:16:20,808 --> 00:16:22,980
configuration, it's going to have a default value.

229
00:16:24,950 --> 00:16:28,334
So now I'm going to show you smart feature flags,

230
00:16:28,382 --> 00:16:31,718
which are very cool. First of

231
00:16:31,724 --> 00:16:36,034
all, they enable you a b testing, which is the final requirement

232
00:16:36,082 --> 00:16:39,766
that we didn't answer yet. So how does

233
00:16:39,788 --> 00:16:43,346
it do that? Basically, the feature flags will

234
00:16:43,388 --> 00:16:47,414
change value according to your input. You have a context input

235
00:16:47,462 --> 00:16:51,734
that you provide, and it has a rule engine that checks

236
00:16:51,782 --> 00:16:55,486
if the rule matches. And if they do, they return the value that the

237
00:16:55,508 --> 00:16:59,374
rule defines. So you can have for one input the

238
00:16:59,412 --> 00:17:03,306
value can be the feature flex value can be false.

239
00:17:03,418 --> 00:17:07,086
But if you provide a different value input, it can

240
00:17:07,108 --> 00:17:10,514
be true. So one configuration and different behavior and

241
00:17:10,552 --> 00:17:13,282
it allows you to do a b testing and I'm using to show you how

242
00:17:13,336 --> 00:17:14,260
in a second.

243
00:17:16,790 --> 00:17:20,594
So let's take a look at this sample configuration. Let's assume

244
00:17:20,642 --> 00:17:24,354
that we have on the left our input event to our lambda,

245
00:17:24,482 --> 00:17:28,214
we have usernames and each user has a tier. In this

246
00:17:28,252 --> 00:17:31,954
case the tier

247
00:17:32,002 --> 00:17:34,440
is premium, but it can also be standard.

248
00:17:34,970 --> 00:17:38,602
And on the right we can see the configuration that we have.

249
00:17:38,736 --> 00:17:42,394
In line 17 we have the regular feature flags. And in line two

250
00:17:42,432 --> 00:17:46,350
we have the smart feature flag. So again it has a default value of

251
00:17:46,420 --> 00:17:50,154
false in line three, but then it have the smart

252
00:17:50,282 --> 00:17:54,014
rule engines. It has the rules in line four defined. It has one

253
00:17:54,052 --> 00:17:58,450
rule, it says customer tier equals premium.

254
00:17:59,750 --> 00:18:03,326
And if the customer tier is premium,

255
00:18:03,438 --> 00:18:06,754
then line six says then the feature flag is going to be

256
00:18:06,792 --> 00:18:10,706
true. Right? And in order for the rule to match,

257
00:18:10,808 --> 00:18:13,826
all the conditions need to apply need to match,

258
00:18:13,928 --> 00:18:17,714
need to value it true. So here we have a set of conditions,

259
00:18:17,762 --> 00:18:21,400
just one. And it means that the

260
00:18:21,770 --> 00:18:25,114
tier, which is the key in the input needs to have

261
00:18:25,152 --> 00:18:29,014
a value of premium. And the key tier

262
00:18:29,062 --> 00:18:32,554
needs to equal to the value premium, right?

263
00:18:32,592 --> 00:18:36,894
Because the action is equal. So tier and

264
00:18:36,932 --> 00:18:38,910
the value need to be equal.

265
00:18:41,410 --> 00:18:44,878
So let's see it here in this example.

266
00:18:45,044 --> 00:18:48,942
So the same code applies here. It's the same thing

267
00:18:48,996 --> 00:18:52,446
as we had before, but we have the context in line 13

268
00:18:52,638 --> 00:18:56,050
where we were building the input context. So we have the key

269
00:18:56,120 --> 00:18:59,710
tier and then we have the value. It can be standard or premium.

270
00:18:59,790 --> 00:19:03,446
So if you recall, if tier, the key is

271
00:19:03,468 --> 00:19:06,646
going to be standard, then the feature flag is going to be the rule does

272
00:19:06,668 --> 00:19:10,838
not match, it's going to be default, false. If tier has a value

273
00:19:10,924 --> 00:19:14,158
of premium equals premium,

274
00:19:14,354 --> 00:19:18,406
then the rule is going to match. And the has premium features

275
00:19:18,438 --> 00:19:21,562
in line 17 is going to be true. So in line

276
00:19:21,616 --> 00:19:25,166
17 we just call the same evaluate function, but we provide

277
00:19:25,268 --> 00:19:29,680
the optional context. Okay, so then

278
00:19:32,930 --> 00:19:36,494
if it's premium tier, line 19 is going to trigger and

279
00:19:36,532 --> 00:19:40,834
we're going to enable the premium features. Otherwise for

280
00:19:40,872 --> 00:19:44,126
another user we're going to have different behavior.

281
00:19:44,238 --> 00:19:47,406
So that way you can do a b testing between different users

282
00:19:47,438 --> 00:19:49,650
with the same configuration.

283
00:19:50,810 --> 00:19:54,760
And there are over ten actions that you can use.

284
00:19:55,610 --> 00:19:59,126
You can see more in the website. You have start with

285
00:19:59,228 --> 00:20:03,050
keen value, et cetera, over ten actions.

286
00:20:04,430 --> 00:20:08,086
And also you have non boolean feature flags.

287
00:20:08,198 --> 00:20:11,802
You can use any

288
00:20:11,856 --> 00:20:15,854
valid JSON value can be a list of strings, integers, et cetera. In this

289
00:20:15,892 --> 00:20:19,566
case I'm using a list of strings where I

290
00:20:19,588 --> 00:20:23,374
want the premium tier to have special actions that I

291
00:20:23,412 --> 00:20:26,298
do on their account, like remove limits and remove ads.

292
00:20:26,394 --> 00:20:29,426
But the default for the non premium users is going to

293
00:20:29,448 --> 00:20:32,610
be no special action is going to be applied.

294
00:20:34,470 --> 00:20:38,382
So you can use this for all sorts of sample rules. You can enable

295
00:20:38,446 --> 00:20:42,214
it for a specific customer, maybe an admin of a customer,

296
00:20:42,412 --> 00:20:46,114
apply discount for specific types of products, offer free shipping

297
00:20:46,162 --> 00:20:49,414
if the cost is higher than some number. You can

298
00:20:49,452 --> 00:20:53,510
have so many possibilities here, and it's very flexible.

299
00:20:55,210 --> 00:20:58,550
So like I said, we're going to use it for a b testing,

300
00:20:58,630 --> 00:21:02,234
and you can have different user experiences for different users with

301
00:21:02,272 --> 00:21:05,500
just one single configuration which does not change.

302
00:21:06,990 --> 00:21:10,366
So if I recall, I've mentioned that there is an

303
00:21:10,388 --> 00:21:13,646
in memory cache. Why is that important?

304
00:21:13,748 --> 00:21:17,370
Because each call to AWS app config to fetch configuration

305
00:21:17,450 --> 00:21:20,750
costs money and we want to save some money.

306
00:21:20,900 --> 00:21:24,338
So the in memory cache says that if the cache does

307
00:21:24,344 --> 00:21:27,826
not expire, we do not fetch the new configuration and

308
00:21:27,848 --> 00:21:31,654
we save money. And you can define what number of seconds you want to

309
00:21:31,692 --> 00:21:35,666
have. And it's important to remember that it's

310
00:21:35,698 --> 00:21:39,080
a balance between cost saving

311
00:21:40,090 --> 00:21:44,022
and having the service change its behavior

312
00:21:44,086 --> 00:21:47,254
as soon as possible. Because if the cache doesn't expire,

313
00:21:47,382 --> 00:21:50,090
the service will not fetch a new configuration.

314
00:21:53,230 --> 00:21:56,686
And by the way, I'm adding very soon,

315
00:21:56,868 --> 00:22:00,794
hopefully this month I'm adding time best rules where you can enable

316
00:22:00,842 --> 00:22:04,766
rules and feature flags at specific times,

317
00:22:04,948 --> 00:22:08,190
enable features for a specific duration,

318
00:22:08,270 --> 00:22:11,140
or enable them during specific days.

319
00:22:12,950 --> 00:22:16,654
And now lastly, we're going to discuss the feature flags

320
00:22:16,702 --> 00:22:19,878
best practices that we're going

321
00:22:19,884 --> 00:22:23,094
to use across all the stages of our pipeline of our

322
00:22:23,132 --> 00:22:26,390
development, from the build to

323
00:22:26,460 --> 00:22:28,950
the testing to deployment and production.

324
00:22:30,250 --> 00:22:34,362
So in my eyes, the development team needs to own the process from

325
00:22:34,416 --> 00:22:38,346
start to end. They need to write the

326
00:22:38,368 --> 00:22:42,300
configuration JSON files, they need to write the code that

327
00:22:43,390 --> 00:22:46,350
evaluates it and behaves accordingly.

328
00:22:46,930 --> 00:22:50,682
And they need to start where the features are enabled

329
00:22:50,746 --> 00:22:54,430
in best and dev accounts, but disabled in production.

330
00:22:55,810 --> 00:22:58,974
And when it comes to best, well, we're going to use mocks,

331
00:22:59,022 --> 00:23:02,626
we're going to mock the configuration in our tests so we have better

332
00:23:02,728 --> 00:23:06,718
control on the outcome. And obviously we're

333
00:23:06,734 --> 00:23:10,218
going to mock the feature when it's enabled and tested.

334
00:23:10,254 --> 00:23:14,294
All the side effects and everything is working just fine. But it's very important to

335
00:23:14,332 --> 00:23:18,440
mock the feature as also disabled, because sometimes

336
00:23:19,130 --> 00:23:22,794
you don't have a simple if statement, if feature is

337
00:23:22,832 --> 00:23:26,602
enabled, do something sometimes it's more complicated and it's really important

338
00:23:26,736 --> 00:23:29,878
that that part of logic is tested.

339
00:23:29,974 --> 00:23:32,970
We want to assert that the logic,

340
00:23:33,310 --> 00:23:37,146
the function that handles the feature flag when it is enabled,

341
00:23:37,258 --> 00:23:40,670
does not run when the feature is actually disabled.

342
00:23:41,010 --> 00:23:44,366
We actually had a bug where our feature was marked as

343
00:23:44,468 --> 00:23:48,386
false, but due to a bug in the if statement, it was

344
00:23:48,408 --> 00:23:51,522
a complicated one. The feature actually ran and we had

345
00:23:51,576 --> 00:23:55,140
some problem in production. So it's very important to test that.

346
00:23:56,950 --> 00:24:00,706
Then once you decide that the feature is stable in the non production

347
00:24:00,738 --> 00:24:04,226
environments, you can go ahead and run a deployment strategy

348
00:24:04,258 --> 00:24:07,042
to production and use canary deployments.

349
00:24:07,106 --> 00:24:10,486
Epcofing has you covered for

350
00:24:10,508 --> 00:24:14,922
that. And you should define cloud watch alarms on

351
00:24:14,976 --> 00:24:18,810
errors for your service so you can auto revert

352
00:24:20,510 --> 00:24:24,378
sorry, you can auto revert your configuration if there's

353
00:24:24,394 --> 00:24:25,310
an error.

354
00:24:29,580 --> 00:24:33,032
Now, what happens if for some reason at some

355
00:24:33,086 --> 00:24:36,680
later time you do have some errors in your feature,

356
00:24:37,900 --> 00:24:41,276
things that you didn't find in the tests? Well, you should disable the

357
00:24:41,298 --> 00:24:45,048
feature as soon as possible and run the configuration CI

358
00:24:45,064 --> 00:24:49,036
CD pipeline again. You should update the tests and

359
00:24:49,058 --> 00:24:52,828
add the missing use cases and just do the

360
00:24:52,834 --> 00:24:56,416
whole thing again. Just deploy and re rulebased again. And I suggest that

361
00:24:56,438 --> 00:25:00,690
you also do a retro meeting where you identify why,

362
00:25:01,460 --> 00:25:05,188
how come you missed those use cases in the test, how come you had this

363
00:25:05,274 --> 00:25:09,264
bug in production and eventually

364
00:25:09,312 --> 00:25:12,756
you need to retire the feature flags. And why you should do that? Well,

365
00:25:12,778 --> 00:25:16,928
because feature flags, they add code complexity, you have more best

366
00:25:17,024 --> 00:25:20,804
around it, you have more mocks, you have more if statement and branching

367
00:25:20,852 --> 00:25:24,504
in your code. It's more complicated. So at

368
00:25:24,542 --> 00:25:28,376
some point we want to retire the features and remove the code. How do we

369
00:25:28,398 --> 00:25:31,950
do that? How do we do that? We're meeting once a month

370
00:25:32,480 --> 00:25:36,504
and then we can discuss and select candidates for removal

371
00:25:36,552 --> 00:25:40,216
for feature flags to remove. And then all we need to do is just run

372
00:25:40,258 --> 00:25:43,740
the configuration CI CD pipeline again and monitor

373
00:25:43,820 --> 00:25:47,184
that everything is okay. How do we

374
00:25:47,222 --> 00:25:50,976
select candidates for removal? Well, if the

375
00:25:50,998 --> 00:25:54,672
feature has been enabled to all the customers for several weeks and it's been

376
00:25:54,726 --> 00:25:58,336
stable, there are no bugs around it, the feedback

377
00:25:58,368 --> 00:26:01,492
of the customers has been very positive and you don't have any open

378
00:26:01,546 --> 00:26:05,156
issues. And if you don't expect any changes in

379
00:26:05,178 --> 00:26:09,048
the code around that area, then you should totally just retire the

380
00:26:09,054 --> 00:26:11,320
feature and make your code simpler.

381
00:26:13,020 --> 00:26:16,260
So let's sum it all up. We created feature flags,

382
00:26:16,340 --> 00:26:20,036
smart and regular. We deployed app config. We used lambda

383
00:26:20,068 --> 00:26:23,944
power tools to fetch and evaluate the configuration feature flags.

384
00:26:24,072 --> 00:26:27,496
We had canary deployments. We learned how to do a b testing,

385
00:26:27,608 --> 00:26:30,776
and we learned how to do what are the feature flags?

386
00:26:30,808 --> 00:26:34,520
Best practices in the development stages

387
00:26:34,600 --> 00:26:37,836
all the way to production. So thank you

388
00:26:37,858 --> 00:26:41,292
very much. That's been my talk. And you can follow me

389
00:26:41,346 --> 00:26:45,156
on my twitter and my, my LinkedIn and check out my website,

390
00:26:45,258 --> 00:26:48,900
runthebuilder cloud, where I talk about all things serverless.

391
00:26:49,400 --> 00:26:51,890
Thank you very much and have a good day.

