1
00:00:34,850 --> 00:00:37,430
Hi everyone, welcome. My talk.

2
00:00:37,500 --> 00:00:41,554
Right, so before I'm drilling down to statistics,

3
00:00:41,682 --> 00:00:46,006
I want to show you what does it mean to

4
00:00:46,028 --> 00:00:49,850
have security in kubernetes at all? Because what weve

5
00:00:49,970 --> 00:00:53,438
end is in the matter of security perspective and not just in general,

6
00:00:53,524 --> 00:00:57,546
of course. So kubernetes is now de facto

7
00:00:57,738 --> 00:01:01,950
what is called the new cloud native

8
00:01:02,470 --> 00:01:06,306
operating system. And that makes it

9
00:01:06,408 --> 00:01:11,582
a lot of companies. We see that 96 of the organizations

10
00:01:11,726 --> 00:01:15,534
are using Kubernetes and we see it's growing

11
00:01:15,582 --> 00:01:19,318
over the years and like in this year, mainly a

12
00:01:19,324 --> 00:01:22,886
lot of adoption of kubernetes. Mainly this is because

13
00:01:22,988 --> 00:01:26,546
it's, I would say, the only orchestrator

14
00:01:26,738 --> 00:01:30,794
available today that

15
00:01:30,832 --> 00:01:34,650
is managed and everyone is fully aware of.

16
00:01:34,800 --> 00:01:38,540
So having said that, the Kubernetes is

17
00:01:39,230 --> 00:01:42,686
the operating system. What do we need to do? We need to secure our

18
00:01:42,708 --> 00:01:46,622
operating system because attackers don't no longer see it

19
00:01:46,676 --> 00:01:50,126
off the radar. They do try to

20
00:01:50,148 --> 00:01:54,258
bridge in the Kubernetes. We haven't seen any major

21
00:01:54,344 --> 00:01:57,470
bridge, but we do see a lot of tries

22
00:01:57,550 --> 00:02:00,660
and we see a lot of documentation on that.

23
00:02:01,030 --> 00:02:04,914
But still it hasn't happened yet. Hopefully it won't happen

24
00:02:04,952 --> 00:02:08,040
at all. But we need to secure SF in that case.

25
00:02:08,410 --> 00:02:12,022
So what we also see in that matter is

26
00:02:12,076 --> 00:02:15,286
that everyone is approaching to

27
00:02:15,308 --> 00:02:17,830
the security Persona in the organization,

28
00:02:18,270 --> 00:02:21,306
to the CSO or security manager. But what

29
00:02:21,328 --> 00:02:25,606
we do see is that he is not responsible anymore

30
00:02:25,798 --> 00:02:29,370
for security when it comes to

31
00:02:29,520 --> 00:02:33,790
Kubernetes. So we do see that

32
00:02:33,940 --> 00:02:37,246
the person who is responsible for security when

33
00:02:37,268 --> 00:02:40,622
it comes to secure your cluster is the DevOps. Right.

34
00:02:40,676 --> 00:02:44,462
We can see it right here. The. Right. So the DevOps is responsible

35
00:02:44,526 --> 00:02:47,630
for the security. DevOps, devsecops,

36
00:02:47,790 --> 00:02:51,250
any Ops Persona is responsible.

37
00:02:51,590 --> 00:02:55,478
And we do see it comes in often

38
00:02:55,564 --> 00:02:59,590
cycles like releasing weekly releases.

39
00:02:59,930 --> 00:03:04,114
And they are using Kubernetes specifically to improve

40
00:03:04,162 --> 00:03:07,946
the scalability. We're using restraiser because we need

41
00:03:07,968 --> 00:03:11,434
to improve the scalability and

42
00:03:11,472 --> 00:03:15,078
also we want to decrease

43
00:03:15,254 --> 00:03:18,650
the development time. So those are the major point

44
00:03:18,720 --> 00:03:21,854
of why even using Kubernetes and who

45
00:03:21,892 --> 00:03:25,534
is basically the Kubernetes security role in your

46
00:03:25,572 --> 00:03:29,786
organization or in any organization. So Gartner

47
00:03:29,898 --> 00:03:33,266
checked that and said, why do

48
00:03:33,288 --> 00:03:36,818
we even need any Kubernetes security at all? Right,

49
00:03:36,904 --> 00:03:39,938
because I'm often hearing that,

50
00:03:40,024 --> 00:03:43,438
okay, oh, I'm on kubernetes then all good, I'm secure.

51
00:03:43,534 --> 00:03:47,686
Great, that's wrong. We do see that

52
00:03:47,788 --> 00:03:51,490
DevOps are telling us that, or telling Gartner

53
00:03:51,570 --> 00:03:54,760
that the security incidents and issues

54
00:03:55,290 --> 00:03:58,982
into their kubernetes cluster are mainly

55
00:03:59,046 --> 00:04:02,950
into detected misconfiguration like they misconfigured

56
00:04:03,110 --> 00:04:06,634
or the YAML are default values sort

57
00:04:06,672 --> 00:04:09,740
of things. And on the other hand,

58
00:04:11,010 --> 00:04:14,762
what they're worried most is cves

59
00:04:14,906 --> 00:04:19,258
in images like vulnerabilities and again misconfiguration

60
00:04:19,354 --> 00:04:23,278
that can expose to let's say outer network

61
00:04:23,454 --> 00:04:25,170
and so on and so forth.

62
00:04:26,790 --> 00:04:30,782
So having said that, we have like two paradigms

63
00:04:30,846 --> 00:04:34,974
of how to protect Kubernetes. So the first one is what weve calling

64
00:04:35,032 --> 00:04:38,294
kubernetes, posture management. The second one is

65
00:04:38,332 --> 00:04:43,014
the runtime protection. So the posture management is

66
00:04:43,052 --> 00:04:47,218
to find known vulnerabilities and mixed configuration. It's something that

67
00:04:47,404 --> 00:04:50,870
we know in advance, but the runtime protection

68
00:04:51,030 --> 00:04:54,774
is like anomaly behavioral analysis and network segmentation.

69
00:04:54,822 --> 00:04:58,778
We don't know it ahead of time. So what do we

70
00:04:58,864 --> 00:05:02,714
focus in on is in one hand like tricking

71
00:05:02,762 --> 00:05:06,606
the attack surface, and we can detect the

72
00:05:06,628 --> 00:05:10,314
posture management early in the CI CD pipeline.

73
00:05:10,442 --> 00:05:14,882
And when coming to runtime protection then

74
00:05:15,016 --> 00:05:19,380
we want to assure and actually

75
00:05:19,830 --> 00:05:22,990
take an action upon detecting in runtime

76
00:05:23,070 --> 00:05:24,820
if attack has happened.

77
00:05:26,250 --> 00:05:30,306
So in order to drill

78
00:05:30,338 --> 00:05:34,242
to the numbers and statistics that we calculate

79
00:05:34,386 --> 00:05:38,342
and got, then we needed Kubescape,

80
00:05:38,406 --> 00:05:42,662
which is armo's open source for Kubernetes

81
00:05:42,726 --> 00:05:45,866
security. The architecture is

82
00:05:45,888 --> 00:05:49,434
pretty simple. Kubescape as a whole

83
00:05:49,472 --> 00:05:52,030
is an open source solution.

84
00:05:52,930 --> 00:05:56,814
It gets from the cluster, the vulnerabilities and

85
00:05:56,852 --> 00:06:00,334
the configuration issues also from

86
00:06:00,372 --> 00:06:03,650
the git repository and container registries. But we won't focus

87
00:06:03,720 --> 00:06:07,794
on that, that time. And eventually it sends all the data to

88
00:06:07,832 --> 00:06:11,602
arm platform. Arm platform is where I can

89
00:06:11,656 --> 00:06:15,560
see all this data in a very

90
00:06:16,090 --> 00:06:20,262
nice way, I mean UI visualizing way,

91
00:06:20,396 --> 00:06:23,846
but also that's where I'm storing the data and I

92
00:06:23,868 --> 00:06:27,602
can analyze that. So I will

93
00:06:27,676 --> 00:06:31,754
talk a bit about Kubescape because that's the tool that

94
00:06:31,952 --> 00:06:35,686
got us all this information and what we've learned

95
00:06:35,718 --> 00:06:39,922
from scanning with Kubescape. So Kubescape

96
00:06:40,086 --> 00:06:43,594
really became like the majority of tools,

97
00:06:43,642 --> 00:06:47,486
most popular tools in security, open source security

98
00:06:47,588 --> 00:06:51,294
tool for Kubernetes. And it

99
00:06:51,332 --> 00:06:54,050
got really high lately.

100
00:06:54,470 --> 00:06:57,490
And what we see here is,

101
00:06:57,640 --> 00:07:01,266
remember saying that we need the posture management and we see

102
00:07:01,288 --> 00:07:04,674
the runtime management. So here is part

103
00:07:04,712 --> 00:07:07,714
of that. We can see the risk analysis and compliance,

104
00:07:07,842 --> 00:07:11,206
we can see the RBAC visualizer, like what are the roles and

105
00:07:11,228 --> 00:07:15,462
responsibility, a visualized graph of

106
00:07:15,516 --> 00:07:19,286
your RBAC in the cluster, and of course the vulnerabilities

107
00:07:19,398 --> 00:07:22,730
coming along the way in your images.

108
00:07:23,470 --> 00:07:26,934
So we're talking mainly about the CI CD pipeline.

109
00:07:27,062 --> 00:07:30,186
So we need to check everything at the early stage of the

110
00:07:30,208 --> 00:07:33,966
CI CD because we don't want to get into the cluster and

111
00:07:34,068 --> 00:07:37,882
realize that we are having some misconfigurations, right? So let's

112
00:07:37,946 --> 00:07:41,614
check things ahead of time in your repositories, in your

113
00:07:41,652 --> 00:07:45,458
registries, across the pipe, before getting into

114
00:07:45,544 --> 00:07:48,690
the cluster. But when weve in the cluster,

115
00:07:49,110 --> 00:07:52,434
we need to verify that we don't have any

116
00:07:52,472 --> 00:07:55,942
misconfigurations there, of course. But we would like to take

117
00:07:55,996 --> 00:07:59,160
the other step of runtime zeros trust.

118
00:08:02,170 --> 00:08:06,230
So it's super easy to install, it's just a help chart.

119
00:08:06,650 --> 00:08:10,250
Just run the command and you can see it all in the GitHub,

120
00:08:11,230 --> 00:08:15,462
very easy. And of course CNCF sandboxing

121
00:08:15,606 --> 00:08:18,794
recently, so you can see it right

122
00:08:18,832 --> 00:08:22,430
away. So after having this

123
00:08:22,580 --> 00:08:26,570
understanding of what we gathered

124
00:08:26,730 --> 00:08:30,030
and how we gathered this data, so now what we're learning

125
00:08:30,100 --> 00:08:33,842
from that. So, as said before,

126
00:08:33,976 --> 00:08:37,620
what is the user title of those people

127
00:08:38,470 --> 00:08:41,714
in the cluster? Like, I think

128
00:08:41,832 --> 00:08:46,120
around 60%, even more like 60,

129
00:08:47,370 --> 00:08:50,466
let's say a bit more, are DevOps.

130
00:08:50,578 --> 00:08:54,258
So DevOps is the security Persona

131
00:08:54,354 --> 00:08:57,946
that we defined in the data we collected from

132
00:08:57,968 --> 00:09:01,866
the clusters. And the region is like

133
00:09:01,968 --> 00:09:06,138
around North America is half, Europe is around third,

134
00:09:06,224 --> 00:09:10,290
and all the rest. And let's

135
00:09:10,310 --> 00:09:14,254
see another overview of what data do we have. The number of

136
00:09:14,292 --> 00:09:18,030
clusters. Most of the users has one clusters,

137
00:09:18,370 --> 00:09:22,334
33% has like between two and four. And the

138
00:09:22,372 --> 00:09:26,930
cluster size, I mean, how many nodes are in this clusters?

139
00:09:28,070 --> 00:09:31,538
34% are less than five and 33%

140
00:09:31,624 --> 00:09:35,380
are between six and ten. There are of course some

141
00:09:35,850 --> 00:09:40,178
beyond 50, but of course it really depends on the environment

142
00:09:40,274 --> 00:09:44,630
they are scanning. So what have we learned

143
00:09:45,370 --> 00:09:48,698
in Kubescape? We are scanning by framework. We're scanning the

144
00:09:48,704 --> 00:09:52,106
NSA framework, the Mitre framework, the armor best, and the

145
00:09:52,128 --> 00:09:55,802
DevOps best framework. And the average score per

146
00:09:55,856 --> 00:10:00,342
framework is around 30%.

147
00:10:00,496 --> 00:10:05,166
And the score that is lower than 30

148
00:10:05,348 --> 00:10:08,894
is an okay score. Okay, beware. You can

149
00:10:09,012 --> 00:10:13,906
check your own score with kubescape and see in

150
00:10:13,928 --> 00:10:16,980
which compliant framework is the score available.

151
00:10:19,190 --> 00:10:22,290
So the top five misconfigurations

152
00:10:23,110 --> 00:10:26,818
are run privileged container, cluster admin bindings,

153
00:10:26,914 --> 00:10:30,114
missing resource policies, immutable container,

154
00:10:30,162 --> 00:10:33,154
fast system, and ingress and egress blocked.

155
00:10:33,282 --> 00:10:37,080
So what we do see here is 100%

156
00:10:37,390 --> 00:10:41,178
had at least one misconfiguration and

157
00:10:41,264 --> 00:10:44,986
65% had at

158
00:10:45,008 --> 00:10:49,254
least one high severity misconfiguration.

159
00:10:49,382 --> 00:10:52,990
And 50 of the cluster has more than 14

160
00:10:53,330 --> 00:10:57,402
failed controls. Controls are the substitute

161
00:10:57,466 --> 00:11:00,830
of the framework I talked before, and those are the

162
00:11:00,900 --> 00:11:04,850
misconfigurations that we are testing and finding.

163
00:11:06,070 --> 00:11:09,634
So let's drill down a bit to what

164
00:11:09,672 --> 00:11:13,454
we see. So, running privilege container

165
00:11:13,502 --> 00:11:17,910
is a big no no. And we can see the basic

166
00:11:18,410 --> 00:11:21,560
of what users are running.

167
00:11:22,490 --> 00:11:26,118
And if you are

168
00:11:26,284 --> 00:11:29,354
putting some data into the

169
00:11:29,392 --> 00:11:32,534
pot spec, then we see it's not privileged,

170
00:11:32,582 --> 00:11:36,380
right? We can see that in the security context if you

171
00:11:36,750 --> 00:11:40,022
run its user that is greater than nine nine nine.

172
00:11:40,096 --> 00:11:43,630
And the runners group also will be greater than

173
00:11:43,700 --> 00:11:47,694
nine nine nine, you're pretty much safe. But you also need to have the

174
00:11:47,732 --> 00:11:51,678
allow privilege escalation as

175
00:11:51,764 --> 00:11:55,182
false. So privilege container will

176
00:11:55,236 --> 00:11:58,734
run in your pod. Okay, that's big bridge

177
00:11:58,782 --> 00:12:02,514
into your cluster. You can check that out

178
00:12:02,712 --> 00:12:06,078
also in a blog that Banda C

179
00:12:06,184 --> 00:12:09,686
armo just wrote. So the

180
00:12:09,708 --> 00:12:13,030
next thing is we talked about 63%

181
00:12:13,100 --> 00:12:16,646
of clusters that have some workloads that are

182
00:12:16,668 --> 00:12:20,342
exposed outside the cluster without any ingress block.

183
00:12:20,406 --> 00:12:24,490
So of course we do need to check those data,

184
00:12:24,560 --> 00:12:28,026
you need to check the ingress. And in

185
00:12:28,048 --> 00:12:32,154
Kubescape we do check that. But look how many cluster

186
00:12:32,202 --> 00:12:35,630
and look at this percentage. That means that

187
00:12:35,700 --> 00:12:38,240
the tunnel out is clear.

188
00:12:41,650 --> 00:12:45,714
And also the 63 again

189
00:12:45,912 --> 00:12:49,294
percentage of the cluster had workloads without proper resource

190
00:12:49,342 --> 00:12:53,282
limitation. So if you don't have resource limitation then each

191
00:12:53,336 --> 00:12:57,238
container can take as much resources as he wants,

192
00:12:57,324 --> 00:13:00,674
right? He can take the entire clusters resources

193
00:13:00,722 --> 00:13:04,358
if he needs. And that is not just

194
00:13:04,524 --> 00:13:08,054
a developing problem but also it's

195
00:13:08,102 --> 00:13:11,962
a security breach. And 37

196
00:13:12,016 --> 00:13:15,494
of the cluster has like application with credential and configuration

197
00:13:15,542 --> 00:13:19,034
file. So it's so easy to say that. But we

198
00:13:19,072 --> 00:13:22,278
do see that going and repeating

199
00:13:22,374 --> 00:13:26,166
all over. We're checking for password word, we are

200
00:13:26,208 --> 00:13:29,598
checking for JW two, we are checking for

201
00:13:29,764 --> 00:13:33,762
private key. All those kinds of phrases are still

202
00:13:33,816 --> 00:13:36,930
available in the configuration files

203
00:13:38,070 --> 00:13:42,034
and 23% of the cluster had like

204
00:13:42,072 --> 00:13:45,562
application running with dangerous Linux capabilities.

205
00:13:45,726 --> 00:13:49,458
And that's like basic because also if weve running on vms

206
00:13:49,554 --> 00:13:53,990
then we need to harden our application. So again

207
00:13:54,060 --> 00:13:57,454
it's not just related to Kubernetes, it's just manual

208
00:13:57,522 --> 00:14:01,354
thinking. Also previously when talking about passwords and all

209
00:14:01,392 --> 00:14:06,010
those other phrases then it's super easy

210
00:14:06,080 --> 00:14:10,354
to check and also to solve.

211
00:14:10,502 --> 00:14:14,426
So 35% of the cluster had workloads

212
00:14:14,458 --> 00:14:18,174
running with insecure capabilities. So we're checking both of those

213
00:14:18,212 --> 00:14:22,238
things and together we see like

214
00:14:22,404 --> 00:14:25,150
it's majority of clusters.

215
00:14:25,310 --> 00:14:28,594
So if we will take a look

216
00:14:28,632 --> 00:14:32,146
now onto the vulnerability part of

217
00:14:32,168 --> 00:14:34,690
the cluster and we checked for vulnerabilities.

218
00:14:37,690 --> 00:14:41,158
It's a good thing to say that has

219
00:14:41,244 --> 00:14:45,174
zero critical vulnerabilities but they do have one or

220
00:14:45,212 --> 00:14:49,094
217 percent critical

221
00:14:49,142 --> 00:14:51,130
vulnerabilities, et cetera.

222
00:14:51,790 --> 00:14:55,094
Again that's a breach. So if you have any critical

223
00:14:55,142 --> 00:14:58,700
vulnerability is mandatory to fix,

224
00:14:59,390 --> 00:15:02,478
especially if it's a remote code execution one,

225
00:15:02,564 --> 00:15:06,094
it's super important one. And the vulnerability by

226
00:15:06,132 --> 00:15:09,326
severity again is just another view of

227
00:15:09,428 --> 00:15:12,880
the critical and high end, medium and low.

228
00:15:14,790 --> 00:15:18,766
So the top five vulnerabilities we found I've

229
00:15:18,798 --> 00:15:23,682
seen here and what is interesting, that 63%

230
00:15:23,736 --> 00:15:27,894
of the container had one or more vulnerabilities across

231
00:15:28,092 --> 00:15:32,626
and 46 of container had one or more critical vulnerabilities

232
00:15:32,818 --> 00:15:36,230
specifically. And we talked about

233
00:15:36,300 --> 00:15:40,220
RCE remote code execution that we see 53%

234
00:15:40,670 --> 00:15:43,882
that container had like one or more

235
00:15:44,016 --> 00:15:47,734
RCE vulnerabilities. All that we learn from scanning

236
00:15:47,782 --> 00:15:50,650
just this ten K clusters.

237
00:15:51,490 --> 00:15:55,150
This is the information about the critical vulnerability.

238
00:15:55,570 --> 00:15:59,230
Glipc of course, and Lib Cre.

239
00:16:01,090 --> 00:16:03,730
There are very well known cves,

240
00:16:04,550 --> 00:16:08,338
you can read about it also in this blog. It's super

241
00:16:08,424 --> 00:16:12,126
detailed about the container scapula and its impact

242
00:16:12,158 --> 00:16:15,862
on Kubernetes. I must say that we will

243
00:16:15,916 --> 00:16:20,054
get into it in next talk. But when

244
00:16:20,092 --> 00:16:24,002
I'm thinking about what we really learn and what are the conclusions

245
00:16:24,066 --> 00:16:27,320
that I'm taking from that talk is that

246
00:16:27,930 --> 00:16:31,766
most of companies already run like Kubernetes clusters

247
00:16:31,958 --> 00:16:34,986
and security is a big pain,

248
00:16:35,088 --> 00:16:38,346
but no one really wants to deal or handle it.

249
00:16:38,448 --> 00:16:41,754
And if you're taking it to the security Persona, he says no go

250
00:16:41,792 --> 00:16:44,366
to the DevOps. And if you're taking it to the DevOps then he said no

251
00:16:44,388 --> 00:16:47,934
go to the security Persona. That's something that we should

252
00:16:47,972 --> 00:16:51,134
combine together and therefore we see a lot of

253
00:16:51,172 --> 00:16:55,060
devsec ops operation now.

254
00:16:55,590 --> 00:16:59,490
And as I said, DevOps are the new security personas.

255
00:17:00,230 --> 00:17:04,286
So Devsecops is the new phrase.

256
00:17:04,478 --> 00:17:08,274
And we are overwhelmed with misconfiguration

257
00:17:08,322 --> 00:17:12,230
and vulnerabilities. We do see

258
00:17:12,300 --> 00:17:15,542
it's a big problem. And here in Armand we are trying

259
00:17:15,596 --> 00:17:19,190
to figure that out with relevant

260
00:17:19,530 --> 00:17:22,962
vulnerabilities specific for the cluster. Whatever runs

261
00:17:23,106 --> 00:17:26,562
in runtime and not just detected in previous

262
00:17:26,626 --> 00:17:29,800
sets, whatever is really, you know,

263
00:17:30,370 --> 00:17:33,470
onto the, onto the memory at a time.

264
00:17:33,620 --> 00:17:37,040
And this will be continued and we will show it

265
00:17:37,650 --> 00:17:41,614
next talk. So thank you very

266
00:17:41,652 --> 00:17:45,722
much for being with me here today. It was a pleasure

267
00:17:45,866 --> 00:17:48,560
and thank you.

