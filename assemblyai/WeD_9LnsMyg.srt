1
00:00:27,010 --> 00:00:30,294
Hi there. My name is Atila Fassina and now it's time for us

2
00:00:30,332 --> 00:00:33,750
to start demystifying multi threading in JavaScript.

3
00:00:34,650 --> 00:00:38,054
I'm a lead web developer at SAP. I'm based in

4
00:00:38,092 --> 00:00:41,842
Berlin and my website is achilla

5
00:00:41,906 --> 00:00:45,506
IO. Feel free to mention me as well on Twitter as Atila Fassina.

6
00:00:45,618 --> 00:00:48,914
I'm always keen to connect, and without further ado,

7
00:00:49,042 --> 00:00:52,890
let me get started it by differentiating

8
00:00:53,050 --> 00:00:55,310
multithreading and parallelism.

9
00:00:56,930 --> 00:01:01,306
They are not synonyms in the sense that we can have concurrent

10
00:01:01,418 --> 00:01:04,402
multiple threads, and we can have,

11
00:01:04,536 --> 00:01:06,930
of course, parallel multiple threads.

12
00:01:08,470 --> 00:01:12,194
What we need to decide first is that if

13
00:01:12,232 --> 00:01:15,522
we need a second or a third and

14
00:01:15,576 --> 00:01:18,962
so on thread, or we can work on a single thread,

15
00:01:19,026 --> 00:01:23,030
and once we realize that, okay, we might need multiple threads,

16
00:01:24,090 --> 00:01:28,010
then we need to define if those threads can be

17
00:01:28,080 --> 00:01:31,130
concurrent or they need to be parallel.

18
00:01:33,630 --> 00:01:36,860
And to exemplify what concurrent threads mean,

19
00:01:37,390 --> 00:01:41,350
the best example I could come up with was chat threads.

20
00:01:41,510 --> 00:01:45,120
You cannot reply to more than one thread at the same time,

21
00:01:45,570 --> 00:01:49,022
the same way you cannot read more than one thread at the same time.

22
00:01:49,156 --> 00:01:52,598
If you're really great at switching contexts,

23
00:01:52,794 --> 00:01:56,340
you may be fast enough that whoever is speaking with you

24
00:01:56,710 --> 00:02:00,210
won't notice that you are switching in and out of a thread.

25
00:02:01,830 --> 00:02:05,506
But the threads themselves are still concurring. They are

26
00:02:05,528 --> 00:02:09,094
competing for your attention. You cannot read one

27
00:02:09,132 --> 00:02:12,626
thread while you reply to another one. You cannot reply to multiple

28
00:02:12,658 --> 00:02:16,194
threads at the same time. You can jump from study group to games,

29
00:02:16,242 --> 00:02:19,958
for example, but the moment you are there, you don't know what's

30
00:02:19,974 --> 00:02:23,126
happening and cooking, for example. And that's

31
00:02:23,158 --> 00:02:27,546
what mean concurrent threads in

32
00:02:27,568 --> 00:02:30,810
this case our attention, or we are the engine

33
00:02:30,880 --> 00:02:34,862
that is executing the tasks from the threads, and we just

34
00:02:34,916 --> 00:02:38,702
jump from one to the other. We don't completely finish the thread before moving

35
00:02:38,756 --> 00:02:42,442
to another one, and that's what multiple threads would actually

36
00:02:42,516 --> 00:02:46,034
mean. And then we do micro tasks in each one of

37
00:02:46,072 --> 00:02:50,078
them and giving the impression

38
00:02:50,174 --> 00:02:53,060
of them being executed at the same time.

39
00:02:54,150 --> 00:02:57,510
While if we are performing as a one person

40
00:02:57,580 --> 00:03:01,366
band, for example, we can have multiple things happening at the

41
00:03:01,388 --> 00:03:05,026
same time. In this example here, the accordion

42
00:03:05,058 --> 00:03:08,962
is being played at the same time, has the keyboard as the trumpet,

43
00:03:09,026 --> 00:03:12,934
and whatever else this guy that is playing. The resources

44
00:03:12,982 --> 00:03:16,454
are actually shared, and one thread does not occupy

45
00:03:16,502 --> 00:03:21,150
the same processing as another thread, they're happening simultaneously.

46
00:03:23,010 --> 00:03:26,558
And that's also stressed the fact that parallelism is

47
00:03:26,644 --> 00:03:29,470
just a special kind of asynchronous.

48
00:03:31,890 --> 00:03:35,838
But what does that actually mean for JavaScript?

49
00:03:36,014 --> 00:03:39,538
This conceptual talk is really great to get the gist of what

50
00:03:39,704 --> 00:03:43,374
multithreading actually means. But we need real code examples,

51
00:03:43,422 --> 00:03:46,310
right? So let's have a look at our APIs.

52
00:03:47,050 --> 00:03:50,018
We have a bunch of asynchronous APIs,

53
00:03:50,114 --> 00:03:53,560
and these ones mentioned here

54
00:03:55,370 --> 00:03:59,206
in this slide are all concurrent. For example, the time

55
00:03:59,228 --> 00:04:02,506
period and a set timeout cannot be reliable in

56
00:04:02,528 --> 00:04:05,994
the sense that if there is a long task being executed, the callback will take

57
00:04:06,032 --> 00:04:09,610
longer than the time you established as a functional parameter,

58
00:04:10,270 --> 00:04:13,726
while the set interval can be reliable, but at the

59
00:04:13,748 --> 00:04:17,454
expense of whatever else is happening on the main thread. So it's just going

60
00:04:17,492 --> 00:04:21,294
to come in blocking and executing the callback once

61
00:04:21,332 --> 00:04:24,530
the timeout is done. So it can be

62
00:04:24,600 --> 00:04:26,690
very destructive to the UI.

63
00:04:28,550 --> 00:04:31,954
While promises will happen in

64
00:04:31,992 --> 00:04:35,394
a better way, in a more efficient

65
00:04:35,442 --> 00:04:39,174
way than set timeout actually does, but in

66
00:04:39,212 --> 00:04:43,014
nature the behavior is similar. So they're going

67
00:04:43,052 --> 00:04:46,294
to execute the micro tasks and jump between the

68
00:04:46,332 --> 00:04:48,730
different threads, but they're still concurrent.

69
00:04:49,470 --> 00:04:51,210
So what about parallel?

70
00:04:53,550 --> 00:04:56,874
For parallel multiple threads? We have web

71
00:04:56,912 --> 00:05:00,746
workers in JavaScript. They're not the only way of having multiple

72
00:05:00,778 --> 00:05:04,478
threads in JavaScript, but they are one of

73
00:05:04,564 --> 00:05:06,800
the main ways to do it.

74
00:05:07,570 --> 00:05:11,178
And following from the example that we had with set timeout,

75
00:05:11,274 --> 00:05:13,330
set interval. More specifically,

76
00:05:14,470 --> 00:05:18,402
Ux love web workers in the sense that things

77
00:05:18,456 --> 00:05:23,582
that are happening in a worker thread do not interfere

78
00:05:23,646 --> 00:05:27,302
with the UI. The tasks are ran, and even

79
00:05:27,436 --> 00:05:31,410
as big as they come, they will not block

80
00:05:31,570 --> 00:05:35,126
the interaction with the UI. So the

81
00:05:35,148 --> 00:05:39,254
UI is still going to be as interactive and responsive

82
00:05:39,382 --> 00:05:42,410
as if your page is idle.

83
00:05:43,950 --> 00:05:46,806
And to start going deeper with web workers,

84
00:05:46,918 --> 00:05:50,498
there are two kinds of them. There are the dedicated worker,

85
00:05:50,694 --> 00:05:54,270
which are dedicated to a main script. They are executed

86
00:05:55,010 --> 00:05:58,126
on a very specific context window, and there

87
00:05:58,148 --> 00:06:01,514
are the shared workers that can be executed by multiple

88
00:06:01,562 --> 00:06:04,980
windows and main scripts, even iframes, for example.

89
00:06:06,230 --> 00:06:10,642
And though that's the difference that name them, they're more once

90
00:06:10,696 --> 00:06:13,922
we start working with worker threads, it's important

91
00:06:13,976 --> 00:06:17,880
to remember that the global scope is different, it's a different object,

92
00:06:18,330 --> 00:06:22,006
whereas in the main thread we have the global object being the

93
00:06:22,028 --> 00:06:25,494
window object, which we're very familiar with in web

94
00:06:25,532 --> 00:06:29,254
workers. They have their own specific scope, dedicated worker,

95
00:06:29,302 --> 00:06:32,646
global scope for a dedicated worker and shared

96
00:06:32,678 --> 00:06:35,370
worker, global scope for a shared worker.

97
00:06:36,590 --> 00:06:40,186
So that means that once we execute code in

98
00:06:40,208 --> 00:06:43,946
a worker thread, we need to be aware of the scope we're

99
00:06:43,978 --> 00:06:47,498
in if we need to interact

100
00:06:47,594 --> 00:06:50,670
with the global scope, and we'll see that we

101
00:06:50,740 --> 00:06:53,986
need to interact with it to send messages to the

102
00:06:54,008 --> 00:06:57,474
main thread. So how

103
00:06:57,512 --> 00:07:02,306
can we write isomorphic code as in code that can be run whatever

104
00:07:02,488 --> 00:07:06,694
place we do. So we need first to

105
00:07:06,892 --> 00:07:10,422
the only thing we actually need is to account for the differences between

106
00:07:10,556 --> 00:07:13,974
each of those objects. So by

107
00:07:14,012 --> 00:07:17,634
checking what properties they have, and we can then

108
00:07:17,692 --> 00:07:20,890
access all of them using the self keyword.

109
00:07:23,150 --> 00:07:27,174
But there's another fundamental difference between dedicated workers

110
00:07:27,222 --> 00:07:31,230
and shared workers. When we talk about the web workers API, which is

111
00:07:31,300 --> 00:07:34,910
shared workers, to the best of my knowledge,

112
00:07:35,330 --> 00:07:39,342
has been removed from webkit and does not

113
00:07:39,396 --> 00:07:43,154
have any plan to be added back. So it's not possible to use

114
00:07:43,192 --> 00:07:46,850
shared workers in a Webkit browser context.

115
00:07:49,510 --> 00:07:53,826
Besides those little differences between background threads in the main one,

116
00:07:54,008 --> 00:07:57,286
there are important things to account for. And just to

117
00:07:57,308 --> 00:08:01,090
be clear, from now on I'm talking about the web worker API,

118
00:08:01,250 --> 00:08:05,286
which with a

119
00:08:05,308 --> 00:08:08,982
few syntax differences in the sense that shared workers,

120
00:08:09,046 --> 00:08:12,890
we need to specify the port we're connecting to and

121
00:08:12,960 --> 00:08:16,410
other implementation details. Those things

122
00:08:16,480 --> 00:08:20,098
apply to both the dedicated worker and to shared workers.

123
00:08:20,134 --> 00:08:22,990
So from now on I'm just going to mention them as web workers.

124
00:08:24,850 --> 00:08:28,494
Web workers deal with data transfers and

125
00:08:28,532 --> 00:08:32,014
don't take this word lightly. This means that data

126
00:08:32,132 --> 00:08:36,334
does not exist on both runtimes simultaneously, so don't exist

127
00:08:36,382 --> 00:08:40,034
in the main thread and in the worker thread at the same time,

128
00:08:40,232 --> 00:08:44,290
it is copied and not shared.

129
00:08:44,630 --> 00:08:47,766
Once you send to your worker thread, it's best to

130
00:08:47,788 --> 00:08:51,670
wait until the data come back before you mutate or consider it at all.

131
00:08:51,820 --> 00:08:55,158
The whole unidirectional data changes takes a whole

132
00:08:55,244 --> 00:08:58,594
new level of importance when coming to multithreading.

133
00:08:58,722 --> 00:09:02,730
Because we're not able to mutate the data when it's coming back and forth

134
00:09:03,390 --> 00:09:07,210
from the threads, they do not share the same instance, the same object

135
00:09:07,280 --> 00:09:08,540
instance, for example.

136
00:09:10,270 --> 00:09:13,834
And that's because workers interact with the main threads through posting

137
00:09:13,882 --> 00:09:17,706
messages. Data is copied through the structured

138
00:09:17,818 --> 00:09:21,246
clone algorithm, and objects sent and received do

139
00:09:21,268 --> 00:09:24,980
not share the same instance. They're perfect copies of each other

140
00:09:25,350 --> 00:09:29,278
instead. So to transfer objects

141
00:09:29,374 --> 00:09:32,642
with things algorithm, it's important that they are serialized before

142
00:09:32,696 --> 00:09:36,866
they sent and deserialized upon arrival. And that's

143
00:09:36,898 --> 00:09:40,934
how we use the post message method for

144
00:09:40,972 --> 00:09:44,134
it. We pass it through the post message and we listen

145
00:09:44,252 --> 00:09:47,894
to the event message. And talking about

146
00:09:47,932 --> 00:09:51,766
listening to events, we need to deal with errors on the worker

147
00:09:51,798 --> 00:09:55,798
thread. So runtime errors on the background threads

148
00:09:55,894 --> 00:09:59,562
don't block the main thread because they have a completely different

149
00:09:59,616 --> 00:10:04,926
runtime. So you

150
00:10:04,948 --> 00:10:08,490
do need to listen to the error events

151
00:10:08,650 --> 00:10:12,078
so you can communicate it to your user and provide a good user experience.

152
00:10:12,164 --> 00:10:15,666
Otherwise, if there is a runtime error on your background thread on

153
00:10:15,688 --> 00:10:18,798
your worker thread, it's just going to fail silently if you're

154
00:10:18,814 --> 00:10:20,260
not listening to that event.

155
00:10:23,510 --> 00:10:27,138
Also, we need to be careful with thread safety.

156
00:10:27,314 --> 00:10:31,094
It's only possible to interact with document APIs that

157
00:10:31,132 --> 00:10:34,630
don't risk exposure of the data from the thread.

158
00:10:35,530 --> 00:10:39,366
As I mentioned before, all objects being sent need

159
00:10:39,388 --> 00:10:40,710
to be serialized,

160
00:10:42,810 --> 00:10:46,486
and that, together with a transferring clone algorithm,

161
00:10:46,598 --> 00:10:50,490
imposes important restrictions in regards to the data that's being transferred.

162
00:10:51,170 --> 00:10:55,418
Plus the fact that background threads have their own execution context

163
00:10:55,514 --> 00:10:58,686
imposes a very important issue that developers need to be

164
00:10:58,708 --> 00:11:02,990
aware in the vast majority of cases

165
00:11:04,070 --> 00:11:07,634
that we are going to use a web worker, it is important to set

166
00:11:07,672 --> 00:11:11,102
the content security policy on the request

167
00:11:11,166 --> 00:11:14,530
header with the appropriate directives there,

168
00:11:14,600 --> 00:11:18,294
because it will not inherit the policy from the main

169
00:11:18,332 --> 00:11:21,906
page. If we don't set the CSP

170
00:11:21,938 --> 00:11:23,510
headers to the request,

171
00:11:26,090 --> 00:11:29,354
it's going to be completely vulnerable, as if we had nothing there.

172
00:11:29,472 --> 00:11:33,254
It's not inheriting, and I'm saying 99% of the cases

173
00:11:33,302 --> 00:11:37,162
because there is tiny percentage of

174
00:11:37,216 --> 00:11:41,774
use cases where they will actually inherited the

175
00:11:41,812 --> 00:11:45,690
CSp headers from the main page, which one of the examples

176
00:11:45,850 --> 00:11:50,282
is if the origin of the request URL

177
00:11:50,346 --> 00:11:53,070
is a universally unique identifier.

178
00:11:54,150 --> 00:11:58,114
The other possible case is if the web worker is actually an

179
00:11:58,152 --> 00:12:01,186
embedded worker as an inline script in

180
00:12:01,208 --> 00:12:05,750
our main thread in our main page script.

181
00:12:08,090 --> 00:12:11,334
And now let's review what we talked about. We have a different

182
00:12:11,372 --> 00:12:15,154
runtime in the background thread. We only deal with serialized

183
00:12:15,202 --> 00:12:18,854
objects and only thread safe DOM

184
00:12:18,902 --> 00:12:22,634
components are available. So these sets of

185
00:12:22,672 --> 00:12:26,502
precautions impose that we are unable to make DOM manipulations

186
00:12:26,566 --> 00:12:30,414
from the worker thread. This is actually

187
00:12:30,452 --> 00:12:34,318
kind of nice because the

188
00:12:34,484 --> 00:12:38,202
worker thread is not meant for that. The UI thread is the main thread,

189
00:12:38,266 --> 00:12:41,710
so UI interactions should be handled there exclusively.

190
00:12:42,390 --> 00:12:46,226
For a detailed list of available APIs on

191
00:12:46,248 --> 00:12:49,650
the worker, there's a link in the slides

192
00:12:49,990 --> 00:12:54,226
listed in the description, and you can check that for

193
00:12:54,248 --> 00:12:55,640
a better detail.

194
00:12:59,210 --> 00:13:03,560
Okay, we've done our due diligence. We talked about concepts, we talked about security,

195
00:13:03,930 --> 00:13:06,838
we talked about all the things that make this engine turn.

196
00:13:07,004 --> 00:13:10,780
Now it's time for some practical examples and for a demo.

197
00:13:13,550 --> 00:13:16,906
So the stopwatch there is just for you

198
00:13:16,928 --> 00:13:20,278
to see that there aren't any cuts on this example.

199
00:13:20,464 --> 00:13:24,814
But note that once

200
00:13:24,852 --> 00:13:28,286
the button is clicked, the UI is frozen. Like I can

201
00:13:28,308 --> 00:13:31,982
click the boop as many times has I need as I want to,

202
00:13:32,116 --> 00:13:36,002
and nothing actually happens until my big

203
00:13:36,056 --> 00:13:39,810
task is finished. Run with the computation and then everything

204
00:13:39,880 --> 00:13:43,774
unblocks and all my clicks just come in crashing

205
00:13:43,822 --> 00:13:44,420
down.

206
00:13:46,970 --> 00:13:51,154
But you're all thinking okay, that's totally fair. It's a synchronous

207
00:13:51,202 --> 00:13:54,870
method, so that's it. So let's have a look at

208
00:13:54,940 --> 00:13:58,150
how it behaves. If we run in a promise.

209
00:13:59,930 --> 00:14:03,926
Now we're doing just the very same, but inside the multithread. But it's

210
00:14:03,958 --> 00:14:07,658
concurrent. So in theory it would perform a task and jump to

211
00:14:07,664 --> 00:14:11,990
the other thread. But this thing is so gigantic

212
00:14:12,070 --> 00:14:15,822
that it just holds everything. It freezes the state for a while until

213
00:14:15,876 --> 00:14:19,166
it finishes the task and then it comes back and I

214
00:14:19,188 --> 00:14:23,134
get all my interactions at the same time.

215
00:14:23,332 --> 00:14:26,740
Kind of still annoying, right? So let's have a look

216
00:14:27,350 --> 00:14:30,706
with a web worker, and there are two web workers there,

217
00:14:30,728 --> 00:14:33,714
but don't pay attention to that. We're going to get to that a little bit

218
00:14:33,752 --> 00:14:37,314
later. So now the UI is extremely

219
00:14:37,362 --> 00:14:41,238
responsive while everything's running. You see the loading state there

220
00:14:41,404 --> 00:14:44,646
and it's just seamless to the user. The user can just continue to

221
00:14:44,668 --> 00:14:47,990
interact with our app while everything is running,

222
00:14:48,060 --> 00:14:51,638
while everything's happening, the thread's computing

223
00:14:51,654 --> 00:14:55,590
in the background and the user is none the wiser.

224
00:14:55,750 --> 00:14:59,494
They're still doing their thing and the data comes back and we can resume

225
00:14:59,542 --> 00:15:03,040
activity. This demo is available

226
00:15:03,730 --> 00:15:07,950
if you just look at Achilla IO demo

227
00:15:08,020 --> 00:15:11,806
42 and the code is in GitHub. The link

228
00:15:11,828 --> 00:15:13,120
is over there as well.

229
00:15:15,030 --> 00:15:18,914
So let's take a look at the code then. I already

230
00:15:18,952 --> 00:15:22,654
said it's available on GitHub, but let's

231
00:15:22,702 --> 00:15:26,358
walk through and just see how we can make things better.

232
00:15:26,444 --> 00:15:29,430
Maybe so. First, our worker.

233
00:15:29,770 --> 00:15:33,638
At this moment we're just listening to the message event

234
00:15:33,724 --> 00:15:36,886
here. And now a callback will run my huge task and send

235
00:15:36,908 --> 00:15:40,554
the returning value down the wire check.

236
00:15:40,592 --> 00:15:43,994
The self keyword is using

237
00:15:44,032 --> 00:15:47,914
the global scope on lines one and four. And now let's see how

238
00:15:47,952 --> 00:15:51,390
we are going to trigger this execution in the main thread.

239
00:15:54,610 --> 00:15:58,526
So now is our react component. First of

240
00:15:58,548 --> 00:16:02,106
all, we instantiate a worker passing

241
00:16:02,138 --> 00:16:05,906
the URL to the constructor of the

242
00:16:05,928 --> 00:16:09,122
URL. And this is something

243
00:16:09,176 --> 00:16:12,690
for our compiler. In this case I'm using parcel two,

244
00:16:12,840 --> 00:16:16,498
but that will be the same for parcel one for webpack

245
00:16:16,594 --> 00:16:19,480
or any other compiler as far as I'm aware of.

246
00:16:20,650 --> 00:16:24,086
Later on we're going to send the result

247
00:16:24,268 --> 00:16:28,426
of our message. We're actually going to send the

248
00:16:28,448 --> 00:16:32,234
parameter for our worker with

249
00:16:32,272 --> 00:16:35,690
a message to trigger the task.

250
00:16:36,670 --> 00:16:39,830
In this case I'm just saying how big I want a task to be.

251
00:16:39,920 --> 00:16:42,240
It's just a parameter that my method takes.

252
00:16:43,010 --> 00:16:46,686
And finally we're going to have the

253
00:16:46,708 --> 00:16:50,154
event listener to the message event and this callback

254
00:16:50,202 --> 00:16:53,902
will trigger whenever

255
00:16:54,046 --> 00:16:57,380
the message comes back, and it's going to send the data

256
00:16:57,910 --> 00:17:01,330
to trigger a state change in my react UI.

257
00:17:02,310 --> 00:17:05,782
And those approximate ten lines of code is how you get

258
00:17:05,836 --> 00:17:09,762
background threads to work in a react app without any additional dependencies,

259
00:17:09,906 --> 00:17:12,630
just a platform and a compiler.

260
00:17:13,610 --> 00:17:15,880
But look at line 13 again.

261
00:17:17,210 --> 00:17:20,502
Post message is a platform method. It will accept

262
00:17:20,566 --> 00:17:24,378
any parameter you pass to it. And I grew too

263
00:17:24,384 --> 00:17:28,620
much accustomed to typescript to feel safe with this kind of thing.

264
00:17:30,190 --> 00:17:33,566
So let's see if we put some x ray spices in our code to get

265
00:17:33,588 --> 00:17:35,120
a better developer experience.

266
00:17:37,090 --> 00:17:39,710
There's this library called comlink.

267
00:17:43,110 --> 00:17:47,140
It's going to leverage the proxy API and

268
00:17:48,230 --> 00:17:51,374
just a disclaimer, it's only I eleven plus. I hope you're

269
00:17:51,422 --> 00:17:54,366
not stuck with I eleven anymore.

270
00:17:54,558 --> 00:17:58,040
And it's going to create a remote procedure call.

271
00:18:00,090 --> 00:18:03,862
So long story short, we can send stuff to our background task without

272
00:18:03,916 --> 00:18:07,526
feeling we left the main thread at all. Let's have a look.

273
00:18:07,548 --> 00:18:12,166
How to implement a bare bones worker with comlink so

274
00:18:12,188 --> 00:18:15,754
first we're going to create an object literal and put

275
00:18:15,792 --> 00:18:18,730
our task there. It's now a promise though.

276
00:18:18,880 --> 00:18:21,526
But internally nothing really changed.

277
00:18:21,718 --> 00:18:25,726
Besides that. We are going to create a type for that object and

278
00:18:25,748 --> 00:18:28,926
we are going to export it. It's going to come in

279
00:18:28,948 --> 00:18:32,686
handy in a moment. Just hold on. And finally we import the

280
00:18:32,708 --> 00:18:36,994
expose method from comlink and we ask it to do its magic on

281
00:18:37,032 --> 00:18:40,754
line twelve over there. And finally we

282
00:18:40,792 --> 00:18:44,114
import this exposed method from comlink and we ask it to do its

283
00:18:44,152 --> 00:18:45,960
magic on line twelve.

284
00:18:48,250 --> 00:18:51,746
Now back to our react app. We are going to instantiate

285
00:18:51,778 --> 00:18:53,960
our worker just like before.

286
00:18:55,050 --> 00:18:59,218
Then we are going to use the wrap method from comlink

287
00:18:59,314 --> 00:19:02,826
on it. And it is a typescript generic. Remember that

288
00:19:02,848 --> 00:19:06,246
type that we created on the other file? That's how we're

289
00:19:06,278 --> 00:19:09,610
going to pass now the type of our Comlink worker.

290
00:19:09,950 --> 00:19:13,146
We get a promise back, and that's the result from our worker

291
00:19:13,178 --> 00:19:16,554
thread. So that's going to be strongly

292
00:19:16,602 --> 00:19:20,094
typed in our ide and for our compiler to

293
00:19:20,132 --> 00:19:22,350
check if we're passing the proper parameters.

294
00:19:23,570 --> 00:19:27,554
But keep in mind that the main difference is that our click

295
00:19:27,592 --> 00:19:31,406
handler is now asynchronous, so we need to provide it with the async

296
00:19:31,438 --> 00:19:34,930
keyword, and we need to await for the return of our worker.

297
00:19:36,090 --> 00:19:39,270
And that's about it. How we get a web worker to work

298
00:19:39,340 --> 00:19:43,030
with either type safety or zero dependencies.

299
00:19:43,770 --> 00:19:48,006
If you need to use comlink with legacy browser

300
00:19:48,038 --> 00:19:52,170
like I eleven, you might need a polyfuel for the proxy API

301
00:19:52,830 --> 00:19:56,490
but I hope you're not anymore.

302
00:19:58,030 --> 00:20:01,246
And that's just the tip of the iceberg when it

303
00:20:01,268 --> 00:20:04,926
comes to talk. But web workers, so there are

304
00:20:04,948 --> 00:20:08,474
more features to it. For example, import scripts

305
00:20:08,522 --> 00:20:11,870
is a global function to import the scripts.

306
00:20:13,350 --> 00:20:16,974
It's going to bring out third party scripts to be executed

307
00:20:17,022 --> 00:20:21,202
with your worker thread. There's one caveat though.

308
00:20:21,336 --> 00:20:24,046
Make sure that the resource is accessible.

309
00:20:24,238 --> 00:20:27,282
Otherwise, be sure to handle the network error.

310
00:20:27,346 --> 00:20:31,478
That will happen, because that network error will actually

311
00:20:31,564 --> 00:20:34,866
bubble up as a runtime error on your background thread, and it's

312
00:20:34,898 --> 00:20:38,620
going to just stop everything. So either

313
00:20:39,150 --> 00:20:42,310
your thread is ready to mitigate that during runtime,

314
00:20:42,470 --> 00:20:46,074
or you are aware that this resource is going to always

315
00:20:46,112 --> 00:20:49,786
be available. And second thing, it's a

316
00:20:49,808 --> 00:20:53,198
very powerful feature. I didn't mention it explicitly in

317
00:20:53,204 --> 00:20:57,114
things talk, but there's nothing preventing a worker to spawn another worker.

318
00:20:57,242 --> 00:21:01,054
So those are called subworkers in theory, but they behave just

319
00:21:01,092 --> 00:21:03,150
the same as their parent workers.

320
00:21:05,010 --> 00:21:08,498
And I mentioned right before this task that in the

321
00:21:08,504 --> 00:21:12,654
beginning of the talk that web workers were not the only way of achieving parallel

322
00:21:12,702 --> 00:21:15,990
multiple threads in javascript. So there are actually

323
00:21:16,060 --> 00:21:19,190
other kinds of workers, like service workers,

324
00:21:19,770 --> 00:21:23,234
the very same ones that you use to create progressive web apps

325
00:21:23,282 --> 00:21:28,366
and to make offline caching and proxy

326
00:21:28,418 --> 00:21:32,086
API calls. And there's also like audio

327
00:21:32,198 --> 00:21:35,498
worklets, which aren't really workers, but they are

328
00:21:35,584 --> 00:21:39,462
very close to it, and they behave in a parallel separated

329
00:21:39,526 --> 00:21:42,080
thread as well.

330
00:21:43,570 --> 00:21:46,960
So if you're leveraging things talk,

331
00:21:48,850 --> 00:21:52,866
you're still unsure about what the takeaway of things. I just want to

332
00:21:52,888 --> 00:21:56,210
make it very clear that getting

333
00:21:56,280 --> 00:21:59,810
out of the main thread is very doable and cheap,

334
00:22:00,150 --> 00:22:03,746
and I hope this demo that has showed you

335
00:22:03,768 --> 00:22:07,250
that there's nothing outworldly about using multiple threads

336
00:22:07,330 --> 00:22:11,014
in a react app, for example, and that you

337
00:22:11,052 --> 00:22:15,206
consider this as part of your toolbox whenever you

338
00:22:15,308 --> 00:22:18,982
stumble on a situation, that rendering performance

339
00:22:19,046 --> 00:22:23,050
can be affected by some heavy computation and

340
00:22:23,120 --> 00:22:26,726
you need some help to provide a snappy user

341
00:22:26,758 --> 00:22:30,054
experience. There are few to none

342
00:22:30,102 --> 00:22:34,126
bottlenecks associated with using a web worker, and I

343
00:22:34,148 --> 00:22:37,886
think that's the main thing that I want to stress out here. I'm not

344
00:22:37,908 --> 00:22:41,546
saying that you should use heavy

345
00:22:41,578 --> 00:22:45,694
computations on the client side. I'm saying that there is a specific use

346
00:22:45,732 --> 00:22:49,006
case where you might need to, and then you could

347
00:22:49,028 --> 00:22:53,466
use a web worker, and that's

348
00:22:53,498 --> 00:22:56,886
about it. Thank you very much for having me. These slides are going to be

349
00:22:56,908 --> 00:23:00,840
available. Check it out on Twitter or on my website

350
00:23:01,290 --> 00:23:03,640
and see you next time.

