1
00:00:25,570 --> 00:00:41,266
Sash

2
00:00:41,298 --> 00:00:45,010
for joining this session at the Conf 42 DevOps

3
00:00:45,090 --> 00:00:48,760
2024. Hope you're having a great time.

4
00:00:49,130 --> 00:00:53,246
Thanks a ton to the organizers for putting this event together

5
00:00:53,428 --> 00:00:56,942
and allowing us to share what we are learning with everybody else

6
00:00:56,996 --> 00:01:00,782
in the ecosystem. What a great time to be building

7
00:01:00,836 --> 00:01:04,562
software. Not only every organization across the world

8
00:01:04,616 --> 00:01:08,322
is now a technology company and more precisely a

9
00:01:08,376 --> 00:01:11,742
software technology company, but the pace of innovation

10
00:01:11,806 --> 00:01:15,318
is also just amazing, thanks in large

11
00:01:15,404 --> 00:01:18,198
to the open source community. In my view,

12
00:01:18,364 --> 00:01:22,678
that makes it all possible in the first place with

13
00:01:22,844 --> 00:01:26,450
radical advances in AI infrastructure

14
00:01:26,610 --> 00:01:30,394
and software development methodology. As such, we are

15
00:01:30,432 --> 00:01:34,860
reaching the tipping point of creating a level playing field

16
00:01:35,230 --> 00:01:39,274
to turn your ideas into successful ventures, no matter where

17
00:01:39,312 --> 00:01:43,434
you are, who you are, or your socioeconomic

18
00:01:43,482 --> 00:01:47,166
background or identity looks like. I believe

19
00:01:47,268 --> 00:01:50,366
that one important factor that will make

20
00:01:50,388 --> 00:01:53,842
it or break it is our ability to

21
00:01:53,896 --> 00:01:56,660
learn, experiment and adopt quickly.

22
00:01:57,190 --> 00:02:00,594
In this context, I would like to share our journey at

23
00:02:00,632 --> 00:02:04,114
Softrams and a few strategies to

24
00:02:04,152 --> 00:02:07,858
help your teams and organizations to create that culture

25
00:02:08,034 --> 00:02:11,890
and the supporting systems to take ideas to ventures

26
00:02:11,970 --> 00:02:15,240
and create incredible value rather quickly.

27
00:02:18,570 --> 00:02:22,614
Just a little bit about me before we start, my name is Murali Mallina

28
00:02:22,742 --> 00:02:26,166
and about seven years ago I joined Softrams

29
00:02:26,358 --> 00:02:29,738
and since then we have been helping our teams to

30
00:02:29,824 --> 00:02:33,162
build and operate a few mission critical software

31
00:02:33,226 --> 00:02:36,622
systems for our federal agency customers. I'm also

32
00:02:36,676 --> 00:02:40,126
the founder and CEO at Teaching for Good, which is

33
00:02:40,148 --> 00:02:44,094
an ad tech nonprofit with a twist. We build ad

34
00:02:44,132 --> 00:02:47,858
tech and support systems to help anybody in the

35
00:02:47,864 --> 00:02:51,086
world to teams, train, mentor or coach,

36
00:02:51,278 --> 00:02:55,166
and use that passion for education as the vehicle

37
00:02:55,358 --> 00:02:59,494
to raise money for a nonprofit of your own choice and

38
00:02:59,532 --> 00:03:02,600
the platform itself is 100% free to use.

39
00:03:03,370 --> 00:03:07,298
I am kind of just shy of celebrating 25 years

40
00:03:07,484 --> 00:03:10,842
of professional software development and I have been very

41
00:03:10,896 --> 00:03:14,102
fortunate to work with and build teams

42
00:03:14,246 --> 00:03:16,790
across the world from Germany,

43
00:03:16,870 --> 00:03:20,462
China, France, India, UK, Russia, and of course

44
00:03:20,596 --> 00:03:24,554
in the United States itself. I have started my career

45
00:03:24,682 --> 00:03:28,062
in telecom switching software and then

46
00:03:28,116 --> 00:03:31,450
went on to work on edtech, supply chain,

47
00:03:31,530 --> 00:03:34,686
healthcare and civic services. If you

48
00:03:34,708 --> 00:03:38,270
want to reach out anytime, please hit me up on LinkedIn.

49
00:03:38,430 --> 00:03:41,810
I do have a Twitter account, but I don't tweet that much,

50
00:03:41,880 --> 00:03:45,410
so please use LinkedIn for all practical purposes.

51
00:03:47,370 --> 00:03:51,254
As part of my presentation, I would like to use these

52
00:03:51,372 --> 00:03:54,834
five personos to illustrate various

53
00:03:54,882 --> 00:03:58,810
aspects and kind of tell you the story from different angles.

54
00:03:59,310 --> 00:04:03,094
Avery is our new full stack developer that's just joined

55
00:04:03,142 --> 00:04:05,610
our team and eager to contribute.

56
00:04:06,350 --> 00:04:10,482
Layla is our senior DevOps engineer that loves

57
00:04:10,646 --> 00:04:14,494
and often fights for Emacs as the best ide ever

58
00:04:14,692 --> 00:04:17,854
the Lucy and the staff engineer that is

59
00:04:17,892 --> 00:04:21,754
responsible for the governance, security and various

60
00:04:21,802 --> 00:04:26,078
other aspects related to compliance. Meet Sneha,

61
00:04:26,174 --> 00:04:30,130
our full stack developer that is incredibly talented end to end.

62
00:04:30,280 --> 00:04:33,682
And finally Emma, our product manager that

63
00:04:33,736 --> 00:04:37,494
always advocates for the customer and end users to

64
00:04:37,532 --> 00:04:40,760
build great experiences across the products and services.

65
00:04:41,450 --> 00:04:44,966
Of course, all these names are fictitious and I

66
00:04:44,988 --> 00:04:48,266
have a vested interest in picking up all female personnel for

67
00:04:48,288 --> 00:04:51,462
this presentation. It is totally intentional.

68
00:04:51,606 --> 00:04:55,366
I want to take a moment to acknowledge the diversity

69
00:04:55,558 --> 00:04:59,962
I meant lag thereof in the tech industry and

70
00:05:00,096 --> 00:05:03,680
I believe that each of us must support to make a difference.

71
00:05:04,850 --> 00:05:08,302
Let me start with an example. I'm pretty

72
00:05:08,356 --> 00:05:11,566
sure you can easily see and relate to some of

73
00:05:11,588 --> 00:05:15,998
these in your organizations as well. Emma is our product manager

74
00:05:16,094 --> 00:05:20,130
and she got a great new idea for a new service while

75
00:05:20,200 --> 00:05:24,226
talking to the customers and she believes that

76
00:05:24,328 --> 00:05:27,734
it could make huge difference to our customers. So she

77
00:05:27,772 --> 00:05:30,950
quickly jotted down the idea, ran it by

78
00:05:31,020 --> 00:05:34,626
a few friendly customers, and added few more details

79
00:05:34,738 --> 00:05:38,940
so that the entire team can now visualize exactly what this means.

80
00:05:40,030 --> 00:05:43,194
I would like to ask each of you to think just for

81
00:05:43,232 --> 00:05:46,710
a minute in the context of your work, your organization

82
00:05:46,790 --> 00:05:49,740
and your teams, what will happen next.

83
00:05:50,370 --> 00:05:53,390
Assume for the sake of simplicity that

84
00:05:53,540 --> 00:05:57,390
every stakeholder agrees that there is a value in this idea.

85
00:05:57,540 --> 00:06:01,166
What does it take from here to build

86
00:06:01,348 --> 00:06:04,910
and deploy that specific feature

87
00:06:04,990 --> 00:06:08,798
that Emma has been talking about CTO, a sandbox

88
00:06:08,894 --> 00:06:12,674
or to your lower level environments to be able to

89
00:06:12,712 --> 00:06:16,558
do a demo to your customers and

90
00:06:16,744 --> 00:06:20,642
let us take it to the next step. What does it take to push

91
00:06:20,706 --> 00:06:24,086
this version all the way to production and

92
00:06:24,108 --> 00:06:28,118
make it available to your customers? Just take a pause

93
00:06:28,214 --> 00:06:29,660
and think about this.

94
00:06:36,590 --> 00:06:40,002
Next we will take a look at the full stack. Developer Sneha

95
00:06:40,166 --> 00:06:43,662
Sneha has been keeping up herself with

96
00:06:43,716 --> 00:06:47,662
what's going on in the ecosystem and she has been learning about lots of different

97
00:06:47,716 --> 00:06:50,880
things. Charge GPT LLMs for example.

98
00:06:51,650 --> 00:06:55,570
With her extensive experience on the product itself and

99
00:06:55,720 --> 00:06:59,378
relationships with customers, she identified a

100
00:06:59,384 --> 00:07:02,686
few opportunities to bring charge GPT

101
00:07:02,878 --> 00:07:06,638
to change the way customers experience the product and

102
00:07:06,664 --> 00:07:10,246
there is definitely lots of potential CTO bring additional revenue as

103
00:07:10,268 --> 00:07:13,894
well if everything works out. Given that some

104
00:07:13,932 --> 00:07:17,238
of these new services are not fully vetted in

105
00:07:17,244 --> 00:07:20,554
the organization, Sneha may probably need a

106
00:07:20,592 --> 00:07:24,506
sandbox environment readily available that could access

107
00:07:24,608 --> 00:07:27,754
some of the deidentified data. To be able to build

108
00:07:27,792 --> 00:07:31,626
this PoC and show value to your internal teams

109
00:07:31,658 --> 00:07:34,160
first and as well as to the customers,

110
00:07:35,090 --> 00:07:38,654
think for a minute. This is nothing unusual about the

111
00:07:38,692 --> 00:07:41,630
use case or need for such an environment.

112
00:07:42,290 --> 00:07:45,314
What does it take in your organization to

113
00:07:45,352 --> 00:07:48,450
be able to help Sneha to provide an environment,

114
00:07:49,110 --> 00:07:52,658
access to some of the data, as well as, if needed,

115
00:07:52,744 --> 00:07:56,302
integrations with other systems in a safe and secure manner

116
00:07:56,446 --> 00:07:59,942
to be able to build this PoC? And if

117
00:08:00,076 --> 00:08:03,574
POC works out great with minimal to low changes,

118
00:08:03,692 --> 00:08:07,094
we should be able to productize the idea and integrate into other

119
00:08:07,132 --> 00:08:10,794
systems and go for a launch as well. So take

120
00:08:10,832 --> 00:08:14,970
a minute to think about what does it take in your current organization

121
00:08:15,630 --> 00:08:20,170
for Sneha to be able to get all the access environment

122
00:08:20,590 --> 00:08:24,126
kind of CI CD pipelines to be able to build and demo the

123
00:08:24,148 --> 00:08:27,998
PoC to internal teams and possibly to some

124
00:08:28,084 --> 00:08:29,120
friendly customers?

125
00:08:33,730 --> 00:08:37,602
Next, let us take a look at a slightly different use case.

126
00:08:37,736 --> 00:08:41,138
This may look isolated, but it's totally important

127
00:08:41,224 --> 00:08:44,594
piece of the puzzle and it's very impactful factor for

128
00:08:44,632 --> 00:08:47,960
teams in many organizations across the board.

129
00:08:48,490 --> 00:08:52,214
Avery is our newly joined developer and

130
00:08:52,252 --> 00:08:55,510
we need to onboard her to the team and

131
00:08:55,660 --> 00:08:59,046
would love to have her contribute to an important product release

132
00:08:59,078 --> 00:09:02,666
that is coming up past. This requires Avery to

133
00:09:02,688 --> 00:09:06,490
understand the system, know where everything is,

134
00:09:06,640 --> 00:09:10,966
code integrations, development processes, delivery mechanisms,

135
00:09:10,998 --> 00:09:14,686
just to name a I want to request one more time to

136
00:09:14,708 --> 00:09:18,254
pause just for a minute and think what do you do today to

137
00:09:18,292 --> 00:09:21,834
onboard? And what does it take for Avery

138
00:09:21,882 --> 00:09:24,740
to contribute her first pr to the product?

139
00:09:26,310 --> 00:09:29,554
Again, please take a minute to think about all these

140
00:09:29,592 --> 00:09:32,946
three scenarios. These are pretty common in

141
00:09:32,968 --> 00:09:36,930
many organizations. Everybody have lots of ideas.

142
00:09:37,090 --> 00:09:40,694
Developers are always learning and always wanted to try out new

143
00:09:40,732 --> 00:09:44,610
things so that they can bring that innovation and concepts

144
00:09:44,690 --> 00:09:48,758
into whatever they're working on. And we are always hiring people.

145
00:09:48,844 --> 00:09:52,634
You always have new team members joining your team, and I'm pretty

146
00:09:52,672 --> 00:09:56,166
sure some of you are personally responsible to onboard

147
00:09:56,198 --> 00:10:00,650
new members as well. So in each of these scenarios,

148
00:10:01,010 --> 00:10:04,798
it used to take really long time in order of months,

149
00:10:04,884 --> 00:10:08,298
for example. And in many places,

150
00:10:08,474 --> 00:10:11,870
while that number may be shrinking and getting

151
00:10:11,940 --> 00:10:15,954
faster and faster and getting better, it is still

152
00:10:15,992 --> 00:10:19,060
a few months to a few weeks per most,

153
00:10:19,590 --> 00:10:23,314
and only a small fraction of organizations. Based on my

154
00:10:23,352 --> 00:10:26,386
experience, you can do this in

155
00:10:26,408 --> 00:10:29,574
a matter of weeks, CTO days. Of course,

156
00:10:29,612 --> 00:10:33,302
there are lots of factors that will influence this

157
00:10:33,356 --> 00:10:36,962
aspect. And while I'm

158
00:10:37,106 --> 00:10:40,634
truly acknowledging what each of you will go

159
00:10:40,672 --> 00:10:43,370
through to make anything happen in your organization,

160
00:10:44,190 --> 00:10:48,166
it is possible to build these systems, supporting systems,

161
00:10:48,278 --> 00:10:51,894
and create a culture where we could definitely bring

162
00:10:51,952 --> 00:10:54,734
these numbers down to a week, two days,

163
00:10:54,932 --> 00:10:58,830
and I would like to share our journey of bringing that down

164
00:10:58,900 --> 00:11:02,414
all the way to a day, to a few hours to

165
00:11:02,452 --> 00:11:05,682
get things moving. Let me take you back.

166
00:11:05,736 --> 00:11:09,666
CTO 2018 we

167
00:11:09,688 --> 00:11:13,026
have been discussing about certain things that we wanted to do as

168
00:11:13,048 --> 00:11:16,754
a team at the time and evaluating a few alternatives,

169
00:11:16,802 --> 00:11:20,614
and we have started working on some of these as well.

170
00:11:20,732 --> 00:11:24,502
And I have sent this message that morning to bring

171
00:11:24,556 --> 00:11:28,486
everything together and requesting for an

172
00:11:28,508 --> 00:11:31,260
end CTO end demo to be able to show that value.

173
00:11:31,630 --> 00:11:34,906
And there are lots of things going on in this message.

174
00:11:35,008 --> 00:11:38,794
So let me break it up and we will go step by step.

175
00:11:38,992 --> 00:11:42,558
I just zoomed it in so that we can actually see and read this message

176
00:11:42,644 --> 00:11:46,640
that's in the slack message and let us go step by step.

177
00:11:47,570 --> 00:11:51,130
All I'm asking is that I should be able to request

178
00:11:51,210 --> 00:11:54,180
a new project to be created for my idea.

179
00:11:54,950 --> 00:11:58,514
I will specify a name and the

180
00:11:58,552 --> 00:12:02,354
system of the tools of the platform. Whatever you call it should

181
00:12:02,392 --> 00:12:06,038
be able to go ahead and create a repository for me.

182
00:12:06,204 --> 00:12:09,234
And this is not just a blank repository.

183
00:12:09,362 --> 00:12:12,742
I'm asking for a specific service. In this case,

184
00:12:12,876 --> 00:12:16,566
I wanted to build a rust API microservice, and there

185
00:12:16,588 --> 00:12:20,346
are varieties of boilerplates available, and I'm going to choose

186
00:12:20,528 --> 00:12:23,866
one of the boilerplates that matches what I'm looking at

187
00:12:23,888 --> 00:12:27,766
to build and so it should copy

188
00:12:27,798 --> 00:12:31,726
that boilerplate. Creates a branch at the

189
00:12:31,748 --> 00:12:35,742
time, Dev is our main branch. We use

190
00:12:35,876 --> 00:12:39,226
trunk based development and dev is our main branch.

191
00:12:39,418 --> 00:12:42,766
And create that branch for me and

192
00:12:42,868 --> 00:12:46,066
set up all the hooks needed for that repo to be able

193
00:12:46,088 --> 00:12:49,794
to do CI as well as CD continuous integration and

194
00:12:49,832 --> 00:12:53,602
continuous deployment and as

195
00:12:53,656 --> 00:12:57,080
part of the CI should be able to build it.

196
00:12:57,770 --> 00:13:01,720
And I push the code up as part of the PR

197
00:13:02,410 --> 00:13:05,814
run teams. And once all the tests are

198
00:13:05,852 --> 00:13:09,770
passed, go ahead and deploy it to an environment

199
00:13:10,590 --> 00:13:13,914
and to make it available for

200
00:13:14,032 --> 00:13:17,722
all the internal teams to start with, to be able to use this and

201
00:13:17,776 --> 00:13:21,446
test it and do the demos. For example, we also

202
00:13:21,488 --> 00:13:25,118
want to configure a cname for that sample service that

203
00:13:25,124 --> 00:13:29,150
is just being deployed and of course provide

204
00:13:29,220 --> 00:13:32,654
that URL with the team so that now at least we can start

205
00:13:32,692 --> 00:13:36,366
with the health check. And now that this all setup

206
00:13:36,398 --> 00:13:39,698
is available for me to go and start building

207
00:13:39,784 --> 00:13:43,362
and iterating on my idea, everything is all set up.

208
00:13:43,416 --> 00:13:46,898
Every iteration can quickly go to deployment and everybody in

209
00:13:46,904 --> 00:13:50,280
the team should be able to access that really quickly.

210
00:13:51,210 --> 00:13:53,958
There are lots of things going on here.

211
00:13:54,124 --> 00:13:57,366
So to understand a little bit better, I would like

212
00:13:57,388 --> 00:14:00,986
to go ahead and group these as capabilities that

213
00:14:01,008 --> 00:14:04,506
we can build into a system or a platform,

214
00:14:04,608 --> 00:14:08,422
whatever you call it. I extracted some of those capabilities

215
00:14:08,486 --> 00:14:12,366
and grouped them into four different segments, starting with the

216
00:14:12,388 --> 00:14:16,474
first quadrant labeled as knowledge. This brings

217
00:14:16,522 --> 00:14:20,266
together the domain knowledge of the organization

218
00:14:20,378 --> 00:14:23,826
into a commonplace one single place where everybody can

219
00:14:23,848 --> 00:14:26,802
go and get it collects all kinds of services,

220
00:14:26,936 --> 00:14:29,854
applications, libraries, components, design, systems,

221
00:14:29,902 --> 00:14:33,858
starter templates, et cetera. And in

222
00:14:33,944 --> 00:14:37,282
some organizations, one team doesn't

223
00:14:37,346 --> 00:14:40,150
know exactly what the other team is working on.

224
00:14:40,300 --> 00:14:44,354
And this part of the puzzle is instrumental

225
00:14:44,402 --> 00:14:48,166
for product teams like SNeha, the full stack developer, or Emma,

226
00:14:48,278 --> 00:14:51,946
the product manager, to know the lay of the land, to be able

227
00:14:51,968 --> 00:14:55,820
to understand the whole system, what is currently available.

228
00:14:56,670 --> 00:14:59,914
This allows them to think about maybe

229
00:15:00,032 --> 00:15:03,834
they could take this new idea. They don't need to build it from scratch.

230
00:15:03,962 --> 00:15:07,760
They could probably be composed from existing services,

231
00:15:08,290 --> 00:15:11,454
or use one of these services and build on top

232
00:15:11,492 --> 00:15:15,170
of them, for example. And the next segment going

233
00:15:15,240 --> 00:15:18,946
clockwise is infrastructure, beginning with

234
00:15:18,968 --> 00:15:22,590
the code repositories, creating those sandbox environments,

235
00:15:22,670 --> 00:15:25,982
as well as the lower end production environments

236
00:15:26,046 --> 00:15:29,010
that require to host these applications,

237
00:15:29,430 --> 00:15:33,206
as well as the physical and virtual environments in the cloud, for example,

238
00:15:33,388 --> 00:15:37,910
where these can be deployed, developed, build, hosted and deployed.

239
00:15:38,430 --> 00:15:41,530
Typically in many organizations,

240
00:15:42,110 --> 00:15:45,658
a DevOps team will handle a large portion of

241
00:15:45,664 --> 00:15:49,770
this responsibility to be able to build and operate these systems.

242
00:15:50,530 --> 00:15:54,522
Going to the third segment, it's about the workflow,

243
00:15:54,666 --> 00:15:57,914
the eventual delivery itself, CI CD pipelines,

244
00:15:57,962 --> 00:16:01,038
like I mentioned, configuration for each environment to be

245
00:16:01,044 --> 00:16:04,834
able to go to production. And another critical aspect of

246
00:16:04,872 --> 00:16:08,478
operations of a production system is the observability. All kinds

247
00:16:08,494 --> 00:16:10,590
of metrics, logs,

248
00:16:10,750 --> 00:16:14,306
ISO, infrastructure itself to be able to

249
00:16:14,328 --> 00:16:17,622
scale and perform reliably. The last

250
00:16:17,676 --> 00:16:21,094
one, but one of the most trickiest segments of all is the

251
00:16:21,132 --> 00:16:25,314
governance segment. All kinds of safeguards, cost controls,

252
00:16:25,362 --> 00:16:29,660
access controls, the new isle of our era, the data

253
00:16:30,510 --> 00:16:33,978
and variety of processes and workflows with

254
00:16:34,064 --> 00:16:37,942
guardrails built in. While this diagram

255
00:16:38,006 --> 00:16:42,094
illustrates all the key segments, it doesn't fully cover the

256
00:16:42,132 --> 00:16:45,518
list of capabilities we need to support the entire

257
00:16:45,604 --> 00:16:48,320
lifecycle of any product or any idea.

258
00:16:48,850 --> 00:16:51,966
So I put together this diagram and

259
00:16:51,988 --> 00:16:55,202
you can see I have added two more sections to it,

260
00:16:55,256 --> 00:16:59,060
if you will, research and design as well.

261
00:16:59,750 --> 00:17:03,326
Typically many products and discussions in the ecosystem,

262
00:17:03,358 --> 00:17:07,746
and they talk about software factory or platform engineering or internal

263
00:17:07,778 --> 00:17:11,462
developer portals. They do not sufficiently cover this

264
00:17:11,516 --> 00:17:15,046
aspect of it, the research and design. But I believe this

265
00:17:15,068 --> 00:17:18,790
is really important to include the full lifecycle.

266
00:17:19,310 --> 00:17:22,620
And you can see here in the research area,

267
00:17:23,230 --> 00:17:26,810
it's very important for the product teams to have access to data

268
00:17:26,960 --> 00:17:30,220
analytics as well as any of the existing research.

269
00:17:30,830 --> 00:17:34,442
All the information is cataloged as well as all

270
00:17:34,496 --> 00:17:38,094
the organization level policies that are available to be able

271
00:17:38,132 --> 00:17:41,520
to iterate on the idea quickly as part of the research.

272
00:17:41,970 --> 00:17:45,810
And when it comes to design, to be able to build

273
00:17:45,880 --> 00:17:50,174
products with consistent user experience, you need appropriate

274
00:17:50,222 --> 00:17:53,570
organizational branding or product branding. Design system

275
00:17:53,640 --> 00:17:57,574
itself, assets compose, UA, libraries and

276
00:17:57,692 --> 00:18:01,334
the guardrails that I'm talking about. So these two are in

277
00:18:01,372 --> 00:18:05,938
addition to the build deploy operate that we looked at as four different segments,

278
00:18:06,114 --> 00:18:09,062
starting with the starters, generators, libraries,

279
00:18:09,206 --> 00:18:11,290
services that are already existing,

280
00:18:11,710 --> 00:18:14,026
repository for source code,

281
00:18:14,208 --> 00:18:17,978
infrastructure, environment, CI, CD and whole nine yards that we

282
00:18:17,984 --> 00:18:21,438
just mentioned about. So a good

283
00:18:21,524 --> 00:18:25,134
ideal state of the system must include both

284
00:18:25,172 --> 00:18:29,514
research and design as well, so that we can support the product teams

285
00:18:29,642 --> 00:18:33,234
to take an idea and go all the day

286
00:18:33,272 --> 00:18:36,930
down. CTO deploy it into the environments where customer can access

287
00:18:37,000 --> 00:18:37,620
it.

288
00:18:41,030 --> 00:18:46,070
And this brings us to the next step and putting

289
00:18:46,140 --> 00:18:49,846
all these things together, and we want to give it

290
00:18:49,868 --> 00:18:53,266
a name. And there are multiple different aspects

291
00:18:53,298 --> 00:18:56,406
and multiple concepts. People refer to these in

292
00:18:56,428 --> 00:19:00,026
the ecosystem. And in my view, this is

293
00:19:00,048 --> 00:19:05,530
what we call a software factory is specifically

294
00:19:05,950 --> 00:19:08,742
there are three different important aspects,

295
00:19:08,806 --> 00:19:12,080
tools, processes and the content itself.

296
00:19:12,530 --> 00:19:16,542
And of course we want to build on

297
00:19:16,596 --> 00:19:20,062
top of the existing knowledge instead of reinventing the wheel every single

298
00:19:20,116 --> 00:19:22,438
time. So we are going to adapt,

299
00:19:22,634 --> 00:19:25,774
assemble and configure these tools,

300
00:19:25,822 --> 00:19:31,140
processes and content. CTO make everything work and

301
00:19:31,670 --> 00:19:35,378
I would like to move away from that theoretical definition and

302
00:19:35,464 --> 00:19:38,854
bring a little bit of extra focus to some of these

303
00:19:38,892 --> 00:19:42,646
aspects and talk about how we can evolve as

304
00:19:42,668 --> 00:19:46,658
a team. And these are arranged as concentric circles

305
00:19:46,674 --> 00:19:50,090
for a reason, based on what we learned. Again,

306
00:19:50,160 --> 00:19:53,674
totally opinionated and biased based on our context and

307
00:19:53,712 --> 00:19:57,210
what we are building. Our suggestion is to start by

308
00:19:57,280 --> 00:20:01,550
pulling together the catalog at first and

309
00:20:01,620 --> 00:20:05,294
go outward and build each capability or system

310
00:20:05,492 --> 00:20:08,910
as part of that evolution or maturity in your implementation.

311
00:20:09,330 --> 00:20:12,638
And treat this whole exercise like you're building a product.

312
00:20:12,804 --> 00:20:16,162
And do this in an iterative fashion, focusing on the most

313
00:20:16,216 --> 00:20:19,774
important use case first, and then keep extending

314
00:20:19,822 --> 00:20:23,134
it, starting with the catalog. Make sure it is fully

315
00:20:23,182 --> 00:20:27,030
self service. Approval based mechanisms

316
00:20:27,770 --> 00:20:32,018
are okay, but make sure that they do not introduce

317
00:20:32,034 --> 00:20:34,920
an extra friction or delay the whole process.

318
00:20:35,370 --> 00:20:39,174
And if you focus on self service systems

319
00:20:39,302 --> 00:20:43,210
with guardrails built in, you get the best of both worlds.

320
00:20:43,630 --> 00:20:47,510
Next layer is of course building the overall infrastructure that is required

321
00:20:47,590 --> 00:20:51,274
to support the entire lifecycle, starting with the sandbox

322
00:20:51,322 --> 00:20:54,858
environment all the way to the production environment with observability

323
00:20:54,954 --> 00:20:58,574
built in. But it is super important to automate this

324
00:20:58,612 --> 00:21:01,834
part as well. This not only brings

325
00:21:01,882 --> 00:21:05,838
speed to your workflows, but also bring that consistency

326
00:21:05,934 --> 00:21:09,682
that is required at organizational level. And of course

327
00:21:09,736 --> 00:21:13,826
you can scale it once you automate it. And last but the

328
00:21:13,848 --> 00:21:17,782
most important aspect is the governance. We must

329
00:21:17,836 --> 00:21:22,210
tread this really carefully. We must include guardrails

330
00:21:22,290 --> 00:21:25,670
and kind of set up some thresholds to make sure that

331
00:21:25,740 --> 00:21:30,278
every aspect of the software is build and delivered according

332
00:21:30,294 --> 00:21:33,994
to your organizational security and policies, but make

333
00:21:34,032 --> 00:21:37,542
sure that they do not come in the way of accelerating innovation

334
00:21:37,606 --> 00:21:40,910
itself. That's the key. And while here

335
00:21:40,980 --> 00:21:45,150
I also want to bring up two other common concepts in this context,

336
00:21:45,490 --> 00:21:48,874
platform engineering and internal developer portals

337
00:21:48,922 --> 00:21:52,462
or internal development portals. Based on who you speak

338
00:21:52,516 --> 00:21:56,734
to and variety of products that you're looking at, these concepts

339
00:21:56,782 --> 00:21:59,380
are used interchangeably. However,

340
00:22:00,790 --> 00:22:04,210
we do see these things slightly differently. That's why

341
00:22:04,280 --> 00:22:07,762
I referred to this presentation itself as software

342
00:22:07,826 --> 00:22:11,266
factories instead of just calling it as a platform engineering

343
00:22:11,298 --> 00:22:15,366
or IDP. And there is no wrong or right answer here. This is

344
00:22:15,388 --> 00:22:18,906
how we are interpreting it. So I would like

345
00:22:18,928 --> 00:22:22,906
to go to a Wadley map and

346
00:22:22,928 --> 00:22:26,730
then show some of these practices to illustrate the

347
00:22:26,880 --> 00:22:30,666
evaluation, evolution and the concept

348
00:22:30,698 --> 00:22:34,334
of these software factories. To be able to put all these

349
00:22:34,372 --> 00:22:38,202
concepts in the context many organizations

350
00:22:38,266 --> 00:22:42,174
have CI CD at the minimum and then bring the

351
00:22:42,212 --> 00:22:45,330
culture of workflows as well as processes around

352
00:22:45,400 --> 00:22:49,278
it. Along with the team automation, the tools

353
00:22:49,454 --> 00:22:52,994
you will be able to build a devsecops culture and both

354
00:22:53,032 --> 00:22:56,706
of these are very well matured and most organizations

355
00:22:56,738 --> 00:23:00,326
are very familiar with these as well. Platform engineering is

356
00:23:00,348 --> 00:23:04,630
referred to as the capability to build common

357
00:23:04,700 --> 00:23:08,780
infrastructure, workflows, delivery mechanisms and

358
00:23:09,550 --> 00:23:12,346
distinctly maintained by a separate team,

359
00:23:12,448 --> 00:23:16,246
typically called as a platform engineering team and offered

360
00:23:16,278 --> 00:23:20,366
as a service or product to the rest of the organization. Based on

361
00:23:20,388 --> 00:23:24,586
our understanding, platform engineering is focused

362
00:23:24,698 --> 00:23:28,794
as discussed in the ecosystem is more around the devsecops

363
00:23:28,842 --> 00:23:32,198
area as well as building these delivery mechanisms.

364
00:23:32,394 --> 00:23:36,306
But take this idea to the next level and look

365
00:23:36,328 --> 00:23:40,050
at internal developer portals or internal development platforms

366
00:23:40,550 --> 00:23:44,254
to bring together that knowledge, the self service aspect

367
00:23:44,302 --> 00:23:47,890
of the portals as well as bring this observability

368
00:23:47,970 --> 00:23:51,814
pane of glass so that product teams have access in

369
00:23:51,852 --> 00:23:54,550
single point not only the knowledge,

370
00:23:55,130 --> 00:23:58,406
a catalog, but also for all the deployed

371
00:23:58,438 --> 00:24:01,834
services, visibility or observability and analytics that

372
00:24:01,872 --> 00:24:05,354
they can use to come up with next iterations of

373
00:24:05,392 --> 00:24:09,622
those ideas and products. In our internal implementation

374
00:24:09,686 --> 00:24:13,550
we call codename Eagle. We bring both

375
00:24:13,620 --> 00:24:17,166
platform engineering as well as IDP as one product or

376
00:24:17,188 --> 00:24:20,682
service because both are equally

377
00:24:20,746 --> 00:24:24,386
important for this innovation platform to

378
00:24:24,408 --> 00:24:26,690
be successful in your organization.

379
00:24:27,750 --> 00:24:31,634
So next, let us look at how we can build a

380
00:24:31,672 --> 00:24:35,170
software factory for your own team and organization.

381
00:24:35,610 --> 00:24:39,154
And before we go further in building that software

382
00:24:39,202 --> 00:24:43,222
factory, I would like to remind that if your

383
00:24:43,276 --> 00:24:46,642
teams currently use low code or no code platforms,

384
00:24:46,786 --> 00:24:50,058
you may already have a great working version of a

385
00:24:50,064 --> 00:24:53,846
software factory. However, many organizations

386
00:24:53,958 --> 00:24:57,786
these local no code platforms only cover a fraction of the

387
00:24:57,808 --> 00:25:01,054
workloads and applications. So we will go

388
00:25:01,092 --> 00:25:05,274
ahead and look at other aspects of software factory

389
00:25:05,322 --> 00:25:08,400
that you can build. As explained before,

390
00:25:08,770 --> 00:25:12,320
please do start with the catalog first,

391
00:25:12,870 --> 00:25:16,418
and this is probably the easiest part to get everything

392
00:25:16,504 --> 00:25:20,018
together, but it's also the most important and

393
00:25:20,184 --> 00:25:23,746
impactful part and you don't need a

394
00:25:23,768 --> 00:25:27,234
fancy tool to be able to do it. Just start collecting

395
00:25:27,282 --> 00:25:30,114
all kinds of scripts, tools, generators,

396
00:25:30,242 --> 00:25:33,234
starters, as well as your wiki pages,

397
00:25:33,282 --> 00:25:37,670
conference pages and altogether along with some appropriate documentation,

398
00:25:38,270 --> 00:25:41,834
that itself will give you a good chunk of what

399
00:25:41,872 --> 00:25:45,226
you are expecting in a software factory. In the

400
00:25:45,248 --> 00:25:48,954
next few iterations you will look at other

401
00:25:48,992 --> 00:25:51,534
use cases and other needs.

402
00:25:51,732 --> 00:25:55,850
Then you can look for more scalable approaches and bring a little bit of automation,

403
00:25:55,930 --> 00:25:59,774
for example, put a workflow around it if

404
00:25:59,812 --> 00:26:03,762
you want. And if your organization build

405
00:26:03,896 --> 00:26:07,620
infrastructure currently in a single cloud like us,

406
00:26:07,990 --> 00:26:11,374
or rely on serverless workloads like our teams

407
00:26:11,422 --> 00:26:14,910
do, you're already better off

408
00:26:15,080 --> 00:26:18,646
leaning on a platform approach that is already available in

409
00:26:18,668 --> 00:26:22,882
the cloud itself. For example, we use AWS

410
00:26:22,946 --> 00:26:26,898
really heavily and AWS service catalog

411
00:26:27,074 --> 00:26:31,038
actually takes care of almost every capability that you're

412
00:26:31,074 --> 00:26:34,790
expecting in your platform or a software factory.

413
00:26:34,950 --> 00:26:38,538
So before you start looking at a completely

414
00:26:38,624 --> 00:26:42,142
new platform or a new product you want to bring

415
00:26:42,196 --> 00:26:45,950
in to build your software factory, take a look at the service

416
00:26:46,020 --> 00:26:49,822
catalog as a starting point as well. And of course,

417
00:26:49,876 --> 00:26:54,098
if you're looking at a multicloud environments or

418
00:26:54,264 --> 00:26:57,566
you require lot more flexible control on various aspects

419
00:26:57,598 --> 00:27:01,074
of the platform, you will be evaluating some of

420
00:27:01,112 --> 00:27:04,970
these other products and starting from cloud foundry

421
00:27:05,150 --> 00:27:08,918
that is well known and well matured for a long time before

422
00:27:09,004 --> 00:27:12,758
even we started talking about software factories and platform

423
00:27:12,844 --> 00:27:16,674
engineering and the most modern

424
00:27:16,722 --> 00:27:20,138
products like Humanitech for example, Ops level, these are

425
00:27:20,224 --> 00:27:23,274
some of the new platforms that we have seen

426
00:27:23,312 --> 00:27:26,810
in the ecosystem coming up, so please

427
00:27:26,880 --> 00:27:31,120
evaluate some of these before you go and build your own.

428
00:27:31,730 --> 00:27:36,106
When we started in 2018, some of these modern platforms

429
00:27:36,218 --> 00:27:40,320
didn't exist and also based on our needs and

430
00:27:41,170 --> 00:27:44,882
more focused serverless workloads, we went ahead

431
00:27:44,936 --> 00:27:47,700
and started working on building on our own.

432
00:27:48,070 --> 00:27:51,714
Starting with we started with AWS, amplify, for example,

433
00:27:51,832 --> 00:27:55,546
Terrafi modules, terraform modules,

434
00:27:55,678 --> 00:27:59,782
and some experimentation with a tool called Terrafi that we wanted

435
00:27:59,836 --> 00:28:03,746
to build it internally. Then we ventured into AWS,

436
00:28:03,778 --> 00:28:07,866
CDK for example, and finally put together our platform, which we

437
00:28:07,888 --> 00:28:11,130
call it as Eagle on top of Kubernetes,

438
00:28:11,550 --> 00:28:15,446
I'm going to quickly bring up another worldly map

439
00:28:15,558 --> 00:28:18,714
showing the evolution as well as availability of

440
00:28:18,752 --> 00:28:21,630
various aspects in the ecosystem.

441
00:28:21,970 --> 00:28:25,262
And the reason

442
00:28:25,316 --> 00:28:29,454
I wanted to bring this up is that the more you

443
00:28:29,492 --> 00:28:32,838
use matured products or managed

444
00:28:32,874 --> 00:28:36,706
products in this ecosystem, you will be the better off as well

445
00:28:36,728 --> 00:28:41,294
as you will be able to bring and build your software

446
00:28:41,342 --> 00:28:45,460
factory rather quickly. You may have seen

447
00:28:46,090 --> 00:28:50,150
variety of services available, variety of CNCF products,

448
00:28:50,220 --> 00:28:52,790
for example, all the projects in CNCF,

449
00:28:53,210 --> 00:28:56,294
you have that flexibility to be able to use it.

450
00:28:56,412 --> 00:29:00,534
But my suggestion is to first look for managed

451
00:29:00,582 --> 00:29:04,006
services within your cloud before you venture into bringing

452
00:29:04,038 --> 00:29:08,070
them onto your own surface. And essentially

453
00:29:08,150 --> 00:29:12,014
no code, low code if you can. And most

454
00:29:12,052 --> 00:29:15,502
of you already know that there are

455
00:29:15,556 --> 00:29:19,614
a range as well as a variety of services available in

456
00:29:19,652 --> 00:29:23,234
the CNCF landscape that covers pretty much

457
00:29:23,272 --> 00:29:26,994
all use cases that you may be looking at to support your

458
00:29:27,032 --> 00:29:30,946
workloads. However, every single service that

459
00:29:30,968 --> 00:29:34,210
you bring you are just increasing your total

460
00:29:34,280 --> 00:29:36,710
cost of ownership exponentially.

461
00:29:37,370 --> 00:29:40,422
This requires setting them up, configuring them,

462
00:29:40,476 --> 00:29:43,218
running them, operating them, taking backups,

463
00:29:43,394 --> 00:29:46,994
and all the adaptive maintenance that goes with each of these software

464
00:29:47,042 --> 00:29:50,022
units, managing their versions, migrations,

465
00:29:50,086 --> 00:29:54,300
security this is really, really expensive to

466
00:29:55,230 --> 00:29:58,794
risk, expensive risk to bring all

467
00:29:58,832 --> 00:30:01,600
these services and manage by yourself.

468
00:30:02,290 --> 00:30:06,254
We definitely want to suggest that do

469
00:30:06,292 --> 00:30:10,190
not attempt unless it is definitely your core business

470
00:30:10,340 --> 00:30:13,950
or if you must do this as the last resort,

471
00:30:14,110 --> 00:30:17,726
not as the first idea itself, to be able to build your software

472
00:30:17,758 --> 00:30:21,380
factory using this app. So of course

473
00:30:22,950 --> 00:30:26,920
we also use a fair amount of AWS services

474
00:30:27,930 --> 00:30:31,682
beyond some of the things that can be run inside a container,

475
00:30:31,826 --> 00:30:35,560
since we use Kubernetes as our core platform

476
00:30:36,250 --> 00:30:39,542
where anything that is containerized can run on Kubernetes.

477
00:30:39,606 --> 00:30:43,386
But what will happen to other services like we

478
00:30:43,408 --> 00:30:46,890
use a lot of serverless workloads as well as managed services

479
00:30:46,960 --> 00:30:50,798
like S three. So we ran into

480
00:30:50,964 --> 00:30:54,858
this product called Crossplane. This is a great framework

481
00:30:54,954 --> 00:30:58,506
to bring cloud specific and all these manager

482
00:30:58,538 --> 00:31:02,254
services into the same umbrella so that you can provide this

483
00:31:02,292 --> 00:31:06,100
uniform workflow to manage all your resources and all your services

484
00:31:06,550 --> 00:31:10,114
like one system. And also in

485
00:31:10,152 --> 00:31:13,714
our system we used backstage as the

486
00:31:13,752 --> 00:31:17,354
portal and the knowledge base and tecton

487
00:31:17,422 --> 00:31:21,362
for most of our CI series workflows. And I'm not here to suggest

488
00:31:21,426 --> 00:31:24,774
that any of these products are the

489
00:31:24,812 --> 00:31:28,506
only products available. There are a range of these

490
00:31:28,528 --> 00:31:32,646
products available, so choose based on what fits

491
00:31:32,758 --> 00:31:36,474
in your context, in your organization and the experience of

492
00:31:36,512 --> 00:31:40,574
your teams. So I'm going to leave the discussion on the

493
00:31:40,612 --> 00:31:43,870
exact stack that you would like to look at.

494
00:31:44,020 --> 00:31:47,214
However, I believe now that we

495
00:31:47,252 --> 00:31:51,038
have an idea about these capabilities and

496
00:31:51,204 --> 00:31:55,074
why we want to bring all these capabilities together. Whatever you

497
00:31:55,112 --> 00:31:58,766
want to call it, platform engineering, IDP, or a software

498
00:31:58,798 --> 00:32:02,482
factory like we call it, what we want to do

499
00:32:02,536 --> 00:32:05,814
now in the next couple of minutes is to share

500
00:32:06,012 --> 00:32:08,998
what works based on our experience.

501
00:32:09,164 --> 00:32:11,830
As we conclude this presentation,

502
00:32:12,970 --> 00:32:16,760
the most important part I would like to start with is

503
00:32:17,210 --> 00:32:19,900
do not try to build your own cloud.

504
00:32:20,990 --> 00:32:24,650
Want to use the public cloud

505
00:32:24,720 --> 00:32:28,394
or private cloud? Make sure that you use as many

506
00:32:28,432 --> 00:32:32,000
serverless services as possible as well as fully managed services

507
00:32:32,370 --> 00:32:36,126
rather than creating your own cloud, even though there

508
00:32:36,148 --> 00:32:40,622
are great CNCF projects available for you to bring and

509
00:32:40,756 --> 00:32:44,370
run on your own. Kubernetes clusters, but that

510
00:32:44,440 --> 00:32:47,858
control and flexibility they provide

511
00:32:48,024 --> 00:32:52,578
are also exponentially expensive to build, operate and

512
00:32:52,664 --> 00:32:56,406
own those systems to be able to continuously manage. So I

513
00:32:56,428 --> 00:33:00,310
would say focus on the value rather than that control and flexibility

514
00:33:00,970 --> 00:33:04,310
and start with the most important golden path.

515
00:33:04,970 --> 00:33:08,966
Start with researching your current ecosystem with a journey

516
00:33:08,998 --> 00:33:12,774
map for example, or a value stream map or a service blueprint

517
00:33:12,822 --> 00:33:15,814
if you will first document the journey.

518
00:33:15,942 --> 00:33:19,610
What does it take in your teams, in your organizations

519
00:33:20,270 --> 00:33:23,594
to take that idea and go all these three steps

520
00:33:23,722 --> 00:33:27,182
to be able to deployable your system and then

521
00:33:27,316 --> 00:33:30,526
look at the most expensive steps in the process in

522
00:33:30,548 --> 00:33:33,902
terms of time and effort, then automate them.

523
00:33:34,036 --> 00:33:37,874
And of course you do it in an iterative fashion to

524
00:33:37,912 --> 00:33:41,298
learn more about the use cases, what is working? What is not working?

525
00:33:41,464 --> 00:33:44,770
Then go ahead and optimize, rinse and repeat.

526
00:33:45,290 --> 00:33:49,522
And since a software factory brings

527
00:33:49,586 --> 00:33:53,266
a huge change across the board, I would like to conclude

528
00:33:53,298 --> 00:33:56,742
my presentation with this quote. You never change things

529
00:33:56,796 --> 00:33:59,980
by fighting the existing reality to change something.

530
00:34:00,430 --> 00:34:04,198
Build a new model that makes the existing model obsolete.

531
00:34:04,374 --> 00:34:07,866
So when you introduce you may expect a ton of resistance or

532
00:34:07,888 --> 00:34:11,534
skepticism. So make sure to be able

533
00:34:11,572 --> 00:34:14,794
to move forward instead of directly

534
00:34:14,842 --> 00:34:18,414
going and making a pitch for the entire product. Build that

535
00:34:18,452 --> 00:34:21,886
initial MVP version and show the difference and

536
00:34:21,988 --> 00:34:25,470
you will get the buy in. I hope this helps.

537
00:34:25,810 --> 00:34:28,570
Thank you very much for joining this presentation.

538
00:34:28,730 --> 00:34:32,334
Appreciate if you take a minute to share your thoughts and questions.

539
00:34:32,532 --> 00:34:35,380
Have a great time at Conf 42. Thank you very much.

