1
00:00:27,330 --> 00:00:31,154
Hi, today we will talk about a two hot topic

2
00:00:31,202 --> 00:00:35,298
in the software industry today, especially on the web GUI,

3
00:00:35,474 --> 00:00:37,800
the microfrontend and the design system.

4
00:00:40,010 --> 00:00:43,266
Before we dive through on the main focus of today's

5
00:00:43,298 --> 00:00:46,530
talks design system for the microfrontend ends,

6
00:00:46,690 --> 00:00:50,782
it is important for us to have the common understand think

7
00:00:50,836 --> 00:00:55,246
about what micro front end and design system are the

8
00:00:55,268 --> 00:00:59,214
micro front end are independently deployable front end application that

9
00:00:59,252 --> 00:01:02,930
is modeled around business domain. It is

10
00:01:03,000 --> 00:01:07,906
an effective way to use the domain for

11
00:01:07,928 --> 00:01:11,506
the software boundaries and some other technique is by

12
00:01:11,528 --> 00:01:15,810
using the features to divide front end applications.

13
00:01:16,550 --> 00:01:20,818
Microfrontend ends is a technique for decomposing

14
00:01:20,994 --> 00:01:24,534
the front end application into smaller and simpler chunks that can

15
00:01:24,572 --> 00:01:27,990
be developed, tested and deployed independently.

16
00:01:28,590 --> 00:01:32,300
In other words, we'll be able to change portion of the application

17
00:01:33,150 --> 00:01:36,698
front end applications without having to change anything

18
00:01:36,784 --> 00:01:40,590
else that's been micro front end give

19
00:01:40,660 --> 00:01:44,702
an ability for the incremental change

20
00:01:44,756 --> 00:01:48,750
and upgrades independent deployments and

21
00:01:48,820 --> 00:01:53,566
opportunities forming an autonomous team the

22
00:01:53,588 --> 00:02:00,426
SAF organizings and independent team the

23
00:02:00,468 --> 00:02:03,982
design system is collection of the reusable components guided

24
00:02:04,046 --> 00:02:07,654
by the clear standards that can be assembled together to build any

25
00:02:07,692 --> 00:02:10,854
number of applications. Imagine that we

26
00:02:10,892 --> 00:02:15,266
have new teams that consists of the designers and developer.

27
00:02:15,458 --> 00:02:19,006
When we do have a design system already the developer

28
00:02:19,058 --> 00:02:22,954
be able to develop the page, the new page or the

29
00:02:22,992 --> 00:02:27,494
new model. In fact the prototype faster

30
00:02:27,542 --> 00:02:31,390
than having to build from the scratch

31
00:02:32,210 --> 00:02:35,934
and the designer have the base for them to

32
00:02:35,972 --> 00:02:39,642
do. The designs design system enable

33
00:02:39,706 --> 00:02:43,330
teams to build a better product faster by encourage

34
00:02:44,070 --> 00:02:49,022
teams to develop a component in abstract

35
00:02:49,086 --> 00:02:52,814
way because that makes the component

36
00:02:52,942 --> 00:02:56,550
become more reusable and the reasonability

37
00:02:58,170 --> 00:03:02,050
makes the skill possible. A design system unites

38
00:03:02,130 --> 00:03:05,046
the consumer of the design system,

39
00:03:05,228 --> 00:03:09,074
applications and the product around the common visual

40
00:03:09,202 --> 00:03:12,298
language. It bridging the

41
00:03:12,304 --> 00:03:15,210
gap between the design and the developments.

42
00:03:18,830 --> 00:03:22,826
A design system provide documentations component

43
00:03:22,938 --> 00:03:26,382
that been published into the living styguide and

44
00:03:26,436 --> 00:03:30,590
usually we use the tools like the storyboard js that

45
00:03:30,660 --> 00:03:33,874
have an options to

46
00:03:33,912 --> 00:03:37,442
review how the component been implemented and also

47
00:03:37,496 --> 00:03:41,490
the living styguide like the storybook provide a playground

48
00:03:42,790 --> 00:03:45,730
for the developer to play around with the components.

49
00:03:46,710 --> 00:03:49,906
For example, if we have the buttons in the living styguide,

50
00:03:49,938 --> 00:03:53,814
then developer will be able to click the button, hover the button and

51
00:03:53,852 --> 00:03:58,142
to see what is the outcome. By interaction with the components

52
00:03:58,306 --> 00:04:01,846
and the living styguide provide a framework for development.

53
00:04:02,038 --> 00:04:05,478
It is isolated from application implementations,

54
00:04:05,574 --> 00:04:10,074
then the codes will be much simpler and the

55
00:04:10,112 --> 00:04:13,950
storybook gives an option for the buffer to copy

56
00:04:14,610 --> 00:04:17,806
the implementation code from the

57
00:04:17,828 --> 00:04:19,920
styguide and use in the application.

58
00:04:21,650 --> 00:04:25,090
By having the living styguide documented.

59
00:04:26,950 --> 00:04:30,590
It makes the living styguide

60
00:04:30,750 --> 00:04:34,050
the single source of truth for the design and the components.

61
00:04:36,170 --> 00:04:39,590
Let's go through on the first design system called

62
00:04:39,660 --> 00:04:43,186
centralized design system. We will analyze,

63
00:04:43,218 --> 00:04:46,694
we will discuss is it that this centralized design system is

64
00:04:46,732 --> 00:04:48,950
suitable for the microfrontends.

65
00:04:49,550 --> 00:04:52,666
A centralized design system having a

66
00:04:52,688 --> 00:04:56,822
central design system where it consists of a core component

67
00:04:56,886 --> 00:05:00,374
developer which is the maintainer,

68
00:05:00,502 --> 00:05:04,526
the developer of the component that be reused by the

69
00:05:04,548 --> 00:05:08,414
application across organizations. The way

70
00:05:08,452 --> 00:05:11,982
that they use the component design system component is

71
00:05:12,036 --> 00:05:16,002
by using them by

72
00:05:16,136 --> 00:05:19,522
toggling the version in the package JSON because

73
00:05:19,576 --> 00:05:23,586
the design system will be published, design system component will be published into

74
00:05:23,768 --> 00:05:26,974
the package manager control like the NPM

75
00:05:27,102 --> 00:05:30,870
or internal package manager like the Vedasio or Nexus.

76
00:05:33,290 --> 00:05:37,138
The change that we made by the teams require

77
00:05:37,234 --> 00:05:40,554
for the consumer of the design system to

78
00:05:40,672 --> 00:05:44,442
recompile the code base and redeploy their

79
00:05:44,496 --> 00:05:47,562
applications or their portion of the front

80
00:05:47,616 --> 00:05:51,326
end applications and

81
00:05:51,428 --> 00:05:55,470
for the teams to make a change

82
00:05:55,540 --> 00:05:59,246
into the design system component require for them to make a

83
00:05:59,268 --> 00:06:03,730
pr or the pull request as a contributor.

84
00:06:04,310 --> 00:06:07,742
Their quotes will be reviewed by the core component

85
00:06:07,806 --> 00:06:08,690
developer,

86
00:06:13,670 --> 00:06:17,910
the core component developer will make a feedback and

87
00:06:17,980 --> 00:06:21,222
if everything is on the green

88
00:06:21,276 --> 00:06:24,822
light then the change will be merged into the design

89
00:06:24,876 --> 00:06:26,230
system components,

90
00:06:28,730 --> 00:06:32,578
right? So that is that this centralized

91
00:06:32,674 --> 00:06:36,426
system is suitable for the microfrontend. And I

92
00:06:36,448 --> 00:06:39,958
would say no because we not be

93
00:06:39,984 --> 00:06:44,782
able to do independent deployment because change

94
00:06:44,836 --> 00:06:48,670
in the design system component required for recompile and redeploy

95
00:06:49,090 --> 00:06:52,506
of their consumer, the applications and the

96
00:06:52,548 --> 00:06:56,258
team is decoupled because they need communication to make a change

97
00:06:56,344 --> 00:06:59,950
between the contributor and the reviewer and somehow

98
00:07:00,030 --> 00:07:03,186
they also needs to communicate about the

99
00:07:03,208 --> 00:07:06,694
change across the team so they be able to have

100
00:07:06,812 --> 00:07:10,582
an options to either stick with the old version or

101
00:07:10,636 --> 00:07:15,030
upgrade to the new versions. But the benefits of this

102
00:07:15,180 --> 00:07:18,726
centralized design system is of course it's

103
00:07:18,758 --> 00:07:22,726
easy to make incremental change because consumer

104
00:07:22,758 --> 00:07:26,234
of the design system be able to toggle the versions of

105
00:07:26,272 --> 00:07:28,090
the design system components.

106
00:07:29,710 --> 00:07:32,942
The second one approach of pattern is called

107
00:07:32,996 --> 00:07:36,302
independent design system. Independent design

108
00:07:36,356 --> 00:07:40,254
system usually use the modifierations that

109
00:07:40,292 --> 00:07:44,210
been provided by the webpack Phi and by using the

110
00:07:44,280 --> 00:07:47,746
modal federation we'll be able to make the design system as same as the

111
00:07:47,768 --> 00:07:51,890
application because they can be independently deployed into

112
00:07:51,960 --> 00:07:55,554
the productions. Once it's been deployed, the consumer

113
00:07:55,602 --> 00:07:59,394
of the design system which is setting

114
00:07:59,442 --> 00:08:02,870
up or been configured to fetching or

115
00:08:02,940 --> 00:08:06,950
gets the design system component through the networks.

116
00:08:08,030 --> 00:08:12,026
The chains will be reflected into the

117
00:08:12,048 --> 00:08:16,182
consumer of the design system without the needs or recompile

118
00:08:16,246 --> 00:08:21,230
or redeployment of them however

119
00:08:21,300 --> 00:08:24,746
that they always have a possibility or risk

120
00:08:24,858 --> 00:08:28,270
for the teams to accidentally

121
00:08:28,770 --> 00:08:32,062
push or commit the change that

122
00:08:32,116 --> 00:08:35,874
have a breaking change and if they

123
00:08:35,912 --> 00:08:39,266
did that then it will affecting all of the

124
00:08:39,288 --> 00:08:43,186
consumer of this design system because they only have a

125
00:08:43,208 --> 00:08:46,150
single version of the design system component.

126
00:08:47,930 --> 00:08:52,114
In order for the teams to avoid the breaking

127
00:08:52,162 --> 00:08:56,038
change that reflected into the consumer of the design system

128
00:08:56,124 --> 00:09:00,422
then the owner of the consumer of the design system required

129
00:09:00,486 --> 00:09:04,294
to make a coordinated release. They need to communicate

130
00:09:04,342 --> 00:09:08,220
with all the rest of the team to give

131
00:09:10,370 --> 00:09:14,990
the awareness about the preparations

132
00:09:15,890 --> 00:09:19,520
that they need to do in order to avoid the breaking change.

133
00:09:21,570 --> 00:09:25,966
And on my opinions, the independent

134
00:09:25,998 --> 00:09:30,020
design system also not suitable for the micro front end because

135
00:09:31,270 --> 00:09:35,310
it has decoupled between the teams to do the

136
00:09:35,480 --> 00:09:39,318
coordinated communication between them in order to

137
00:09:39,324 --> 00:09:40,760
avoid the breaking change.

138
00:09:43,690 --> 00:09:47,938
It's not convenient to make incremental change

139
00:09:48,124 --> 00:09:54,458
because of because

140
00:09:54,544 --> 00:09:57,834
of it is a possibility for the team

141
00:09:57,952 --> 00:10:01,226
to make breaking change and it

142
00:10:01,248 --> 00:10:04,874
require for a lot of effort for the testing team

143
00:10:04,992 --> 00:10:08,926
to test to make a test of all of the

144
00:10:08,948 --> 00:10:12,110
applications and it require a lot of the efforts.

145
00:10:14,150 --> 00:10:17,730
Then my recommendation is to use a design

146
00:10:17,800 --> 00:10:21,282
system called provider consumer design system.

147
00:10:21,416 --> 00:10:24,782
The provider consumer design system is separated

148
00:10:24,846 --> 00:10:28,582
or divided into first the provider design system

149
00:10:28,636 --> 00:10:32,150
and the second one is the consumer design system. The provider design

150
00:10:32,220 --> 00:10:35,590
system have things like the color system

151
00:10:35,740 --> 00:10:39,594
that have all the colors, standards, colors using uses by

152
00:10:39,632 --> 00:10:42,746
the rest of the consumer design system.

153
00:10:42,848 --> 00:10:46,570
The spacing system, there needs to be standards, the icons,

154
00:10:46,910 --> 00:10:50,678
typography and the fonts and they

155
00:10:50,704 --> 00:10:54,670
also have the atomic component which is the small UI build

156
00:10:54,740 --> 00:10:57,966
blocks that will be used and be customized by

157
00:10:57,988 --> 00:11:01,950
the consumer design system. And they also have

158
00:11:02,020 --> 00:11:05,614
the complex component in the form of the composite

159
00:11:05,662 --> 00:11:09,442
components. By using the two patterns called

160
00:11:09,496 --> 00:11:13,134
the headless UI and the compound component. The headless UI is the patterns

161
00:11:13,182 --> 00:11:16,406
to provide you the functionality which is the

162
00:11:16,428 --> 00:11:21,234
UI logics and the UI

163
00:11:21,282 --> 00:11:25,270
interaction handling handler and

164
00:11:25,340 --> 00:11:28,982
it gives the maximum flexibility for the consumer design

165
00:11:29,036 --> 00:11:32,086
system to decide on the UI user

166
00:11:32,118 --> 00:11:35,930
interface look and feel while the compound component,

167
00:11:36,990 --> 00:11:40,442
the way that they provide the component in division

168
00:11:40,506 --> 00:11:43,694
of the component. For example if

169
00:11:43,732 --> 00:11:47,822
they provide the academic component, they will provide set

170
00:11:47,876 --> 00:11:51,770
of ecudent header, academ body, academ title,

171
00:11:51,850 --> 00:11:55,426
et cetera, et cetera. The consumer of the

172
00:11:55,448 --> 00:11:59,246
design system we use the sorry. The consumer

173
00:11:59,278 --> 00:12:03,502
of the design system we consist of the customized atomic component

174
00:12:03,646 --> 00:12:06,790
and implemented composite components.

175
00:12:08,410 --> 00:12:12,402
The headless UI make a separation

176
00:12:12,466 --> 00:12:16,342
between the extraction and implementation where the provider is the one

177
00:12:16,396 --> 00:12:19,562
who provide the extraction in the form

178
00:12:19,616 --> 00:12:22,870
of UI logics and UI logics and the interaction

179
00:12:22,950 --> 00:12:26,794
handling to the consumer of the design system and

180
00:12:26,832 --> 00:12:30,670
they will implement the extractions and they will

181
00:12:30,820 --> 00:12:33,360
work on the look and feel.

182
00:12:35,090 --> 00:12:38,526
This is an example the headless UI in the

183
00:12:38,548 --> 00:12:42,414
react JS as you can see in the red circle, those is

184
00:12:42,452 --> 00:12:46,734
the UI logics and UI interaction

185
00:12:46,782 --> 00:12:50,306
handling methods and properties and

186
00:12:50,408 --> 00:12:54,386
we will use those things to develop the

187
00:12:54,408 --> 00:12:58,242
combo bots. And this is an example in the angular

188
00:12:58,306 --> 00:13:02,070
way, the headless UI in the angular way where

189
00:13:02,140 --> 00:13:06,274
the same things on the top, they have the UI logics and UI

190
00:13:06,322 --> 00:13:09,878
interaction handling in form of the properties

191
00:13:09,974 --> 00:13:13,162
and methods. The last one is

192
00:13:13,216 --> 00:13:17,066
the VJs example of the

193
00:13:17,088 --> 00:13:18,170
headless UI.

194
00:13:20,930 --> 00:13:24,080
So by using the provider consumer design system,

195
00:13:26,290 --> 00:13:30,122
it will give an faster

196
00:13:30,266 --> 00:13:34,162
and convenient way for the teams to make change

197
00:13:34,296 --> 00:13:38,100
upgrades and of course do

198
00:13:39,830 --> 00:13:43,134
faster deployment. Because the deployment

199
00:13:43,182 --> 00:13:45,800
will be independent based on the team,

200
00:13:47,610 --> 00:13:51,320
the other team will not blocking the other teams. They will be

201
00:13:52,410 --> 00:13:56,386
free from breaking chains across breaking

202
00:13:56,418 --> 00:13:59,526
chains that will ripple or cascade into the other

203
00:13:59,628 --> 00:14:03,318
teams. And each of the team

204
00:14:03,404 --> 00:14:07,482
we provide their own implementation of the provider design system

205
00:14:07,536 --> 00:14:11,518
which is the consumer design system. And the provider design system

206
00:14:11,604 --> 00:14:15,146
will be used by all of the consumer

207
00:14:15,178 --> 00:14:19,214
design system, which is the applications. By maintaining use of

208
00:14:19,412 --> 00:14:22,786
the package manager control like the

209
00:14:22,808 --> 00:14:26,526
NPM, Pedacio or Nexus. Because it's

210
00:14:26,558 --> 00:14:30,898
not frequent for the provider design system to

211
00:14:30,904 --> 00:14:34,450
be changed, then it's all right

212
00:14:34,520 --> 00:14:38,294
to retain the use of the

213
00:14:38,332 --> 00:14:42,246
version control. And if they have the change

214
00:14:42,348 --> 00:14:45,686
in provider design system, they need to recompile and

215
00:14:45,708 --> 00:14:49,350
redeploy. So in the summary,

216
00:14:50,810 --> 00:14:54,230
by using the provider design provider consumer design system,

217
00:14:54,300 --> 00:14:57,510
we'd be able to have an independent deployment,

218
00:14:58,730 --> 00:15:02,318
forming an autonomous teams that is couple

219
00:15:02,404 --> 00:15:05,806
and scalable organizations, and to

220
00:15:05,828 --> 00:15:09,646
make an incremental change, it will be component and

221
00:15:09,668 --> 00:15:13,294
easier for the team. That's all for my talk.

222
00:15:13,412 --> 00:15:15,226
Stay tuned and stay safe.

