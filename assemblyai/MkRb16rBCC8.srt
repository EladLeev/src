1
00:00:34,690 --> 00:00:39,110
Hi and welcome to the OASP top ten for serverless applications.

2
00:00:39,450 --> 00:00:42,914
Securing your application could be a hard task to do if you don't

3
00:00:42,962 --> 00:00:46,262
know how. Luckily, we have organizations like

4
00:00:46,316 --> 00:00:50,334
OASP to point out the common threats and the right

5
00:00:50,372 --> 00:00:53,726
tools, open source tools you could utilize in

6
00:00:53,748 --> 00:00:57,070
order to make your application much more secure.

7
00:00:58,210 --> 00:01:01,786
Hi, my name is Shlomi. I'm a system architect at JIT,

8
00:01:01,898 --> 00:01:05,966
an engineer, an A 200 veteran, and a cloud enthusiast.

9
00:01:06,158 --> 00:01:09,906
Let's get started. So what do

10
00:01:09,928 --> 00:01:13,554
you do if you suddenly realize that your application is

11
00:01:13,672 --> 00:01:17,654
home alone? You need to first map the

12
00:01:17,692 --> 00:01:20,770
common threats, the parameter threats,

13
00:01:20,930 --> 00:01:24,166
and then understand how top utilize the

14
00:01:24,188 --> 00:01:27,758
right tools in order to secure your application. So let's

15
00:01:27,794 --> 00:01:31,580
take a look at a common structure of a modern application

16
00:01:32,190 --> 00:01:35,526
and first let's take care of the parameter.

17
00:01:35,718 --> 00:01:39,546
So let's take a look at different areas that

18
00:01:39,568 --> 00:01:43,326
could be problematic. First, you have the CI CD pipeline. When everything

19
00:01:43,428 --> 00:01:47,678
flows into your cloud, you have users that access

20
00:01:47,844 --> 00:01:51,326
your application. It could be internal users like developers or

21
00:01:51,348 --> 00:01:55,154
administrators or your clients themselves. You could

22
00:01:55,192 --> 00:01:59,086
use public resources like ips and buckets.

23
00:01:59,198 --> 00:02:03,534
You need to make sure they are secure. And if you are using third party

24
00:02:03,582 --> 00:02:07,700
services, well of course you need to make sure you do it right.

25
00:02:08,950 --> 00:02:12,518
How can you do it? You have different controls you could set in place in

26
00:02:12,524 --> 00:02:15,654
order to make sure it's much more secure. You could

27
00:02:15,692 --> 00:02:19,738
make sure you have least privileged access, don't give more than you need.

28
00:02:19,904 --> 00:02:23,754
You could use multifactor authentication to make sure

29
00:02:23,872 --> 00:02:27,498
that credentials are not stolen and then

30
00:02:27,584 --> 00:02:31,038
taken advantage of. And of course you need to

31
00:02:31,044 --> 00:02:34,702
make sure you don't have different cloud misconfigurations in order

32
00:02:34,756 --> 00:02:37,934
to make sure you don't have attack surfaces that

33
00:02:37,972 --> 00:02:40,000
could be used against you.

34
00:02:41,730 --> 00:02:45,710
So you have different controls that you could use

35
00:02:45,860 --> 00:02:49,666
in different areas, like the traffic secrets that you

36
00:02:49,688 --> 00:02:53,602
use inside your application and cloud access top

37
00:02:53,656 --> 00:02:57,442
services. When something happened, you probably want to investigate

38
00:02:57,506 --> 00:03:01,042
it. You are using third party libraries,

39
00:03:01,106 --> 00:03:04,726
packages and third party services. And of

40
00:03:04,748 --> 00:03:08,074
course you need to make sure that if something happens,

41
00:03:08,192 --> 00:03:10,650
you have a game plan in order to recover.

42
00:03:11,710 --> 00:03:14,922
So let's take a look at a common

43
00:03:15,056 --> 00:03:18,086
modern app and its structure.

44
00:03:18,278 --> 00:03:21,886
And let's try to understand first what is

45
00:03:21,908 --> 00:03:25,870
the difference between a common app, a common modern app,

46
00:03:26,020 --> 00:03:30,634
and a classic app. So for instance, in these applications,

47
00:03:30,762 --> 00:03:34,718
in this application, you have users, you have gateways

48
00:03:34,814 --> 00:03:38,820
that lead the user inside your application.

49
00:03:40,230 --> 00:03:43,534
You may have different public resources

50
00:03:43,662 --> 00:03:47,650
like s three buckets in order to serve assets

51
00:03:47,730 --> 00:03:51,094
and resources faster. And of course you have

52
00:03:51,132 --> 00:03:54,642
your logic running inside the lambda functions.

53
00:03:54,786 --> 00:03:58,826
Then you have different databases that you could utilize in order to store the

54
00:03:58,848 --> 00:04:03,034
data. So what are the differences between a

55
00:04:03,072 --> 00:04:06,742
common app, a common classic app, and a common serverless

56
00:04:06,806 --> 00:04:11,034
app? So you have different shared responsibilities.

57
00:04:11,162 --> 00:04:12,800
As we will see in a second,

58
00:04:13,970 --> 00:04:17,514
serverless functions are mostly ephemeral,

59
00:04:17,562 --> 00:04:21,022
which means that it has memory, it has

60
00:04:21,076 --> 00:04:24,610
resources, but once it completes its execution,

61
00:04:25,030 --> 00:04:28,482
everything is disappeared. Nothing is permanent, nothing is

62
00:04:28,536 --> 00:04:32,034
stored mostly. Right. And you

63
00:04:32,072 --> 00:04:35,894
have maybe an increased attack surface because as we

64
00:04:35,932 --> 00:04:39,654
saw in the parameters slide, you have a lot of

65
00:04:39,692 --> 00:04:42,600
different things that you use inside your application,

66
00:04:43,210 --> 00:04:46,582
and you also have the ability to have much

67
00:04:46,636 --> 00:04:50,762
more fine grained control of the application and

68
00:04:50,816 --> 00:04:54,710
resources. So this is the shared responsibility

69
00:04:54,790 --> 00:04:58,870
model for a classic application. If you run on AWS,

70
00:04:59,030 --> 00:05:02,782
you can see that you need to take care of where the application

71
00:05:02,916 --> 00:05:07,258
is located, the hardware, the global hardware,

72
00:05:07,434 --> 00:05:11,114
your compute, storage, database and networking.

73
00:05:11,162 --> 00:05:14,722
Everything is taken care by AWS. But from that

74
00:05:14,776 --> 00:05:18,242
point on, the customer, which is you, you need to take

75
00:05:18,296 --> 00:05:21,554
care of it yourself, right. You need to make sure

76
00:05:21,592 --> 00:05:25,362
the data is encrypted and also the traffic and

77
00:05:25,416 --> 00:05:28,694
addressed as well. You need to make sure that

78
00:05:28,732 --> 00:05:33,042
the operating system, the network, the firewall are properly configured

79
00:05:33,106 --> 00:05:37,790
and updated. The platform, the application users

80
00:05:37,890 --> 00:05:41,626
and identity, you need to take care of them yourself.

81
00:05:41,808 --> 00:05:45,850
And of course the data that you store in the databases

82
00:05:47,390 --> 00:05:50,806
in a serverless application, well, the model looks

83
00:05:50,848 --> 00:05:54,206
a bit different because AWS, if you run on

84
00:05:54,228 --> 00:05:57,680
AWS, but it's the same probably for every cloud.

85
00:05:58,530 --> 00:06:01,582
The cloud provider takes care of a lot more

86
00:06:01,636 --> 00:06:05,666
things for you, right? Which makes you

87
00:06:05,768 --> 00:06:10,100
responsible mostly for the logic of the application,

88
00:06:10,870 --> 00:06:14,386
and that's a great difference. So let's take a look at

89
00:06:14,408 --> 00:06:18,374
a security plan. Translation, what should we do? For instance, if you

90
00:06:18,412 --> 00:06:21,830
have a threat that does injection,

91
00:06:24,010 --> 00:06:27,522
the solution will be to validate the

92
00:06:27,596 --> 00:06:31,354
input to the application and you are going to use a tool like

93
00:06:31,392 --> 00:06:35,050
OSAP in order to test the different

94
00:06:35,120 --> 00:06:38,762
inputs to your application, find those issues

95
00:06:38,896 --> 00:06:42,686
and solve them. So who are

96
00:06:42,868 --> 00:06:46,766
the Ospay foundation? What is it? So as we

97
00:06:46,788 --> 00:06:50,110
can see, it's an open web application security project.

98
00:06:50,260 --> 00:06:53,838
It's an open source, it's nonprofit foundation

99
00:06:54,014 --> 00:06:57,874
in order to improve the security of software in

100
00:06:57,912 --> 00:07:01,474
the Internet. Right. So they are

101
00:07:01,512 --> 00:07:05,446
here to help us in order to make sure our application

102
00:07:05,548 --> 00:07:08,070
and services are much more secure.

103
00:07:08,490 --> 00:07:12,214
They have a list of the top

104
00:07:12,252 --> 00:07:16,194
ten risks for basically different areas,

105
00:07:16,242 --> 00:07:19,462
right? And we are going to focus on the serverless

106
00:07:19,526 --> 00:07:23,034
top ten risks. We can see the list right here.

107
00:07:23,072 --> 00:07:26,282
We are going to go in depth in

108
00:07:26,336 --> 00:07:29,274
most of these in just a second.

109
00:07:29,472 --> 00:07:33,006
But these are the ten top risks for

110
00:07:33,028 --> 00:07:36,826
the OASP serverless. So let's start by mapping

111
00:07:36,858 --> 00:07:40,142
them out. So this is the

112
00:07:40,196 --> 00:07:44,210
same list, but mapped in categories.

113
00:07:44,550 --> 00:07:48,018
So you can see that you have five different

114
00:07:48,104 --> 00:07:51,826
threats in your come area. Identity and access.

115
00:07:51,928 --> 00:07:55,542
You have two data and then you have log

116
00:07:55,596 --> 00:07:58,680
and monitoring. Let's take a look at a few of them.

117
00:07:59,770 --> 00:08:03,538
All right, so injection, what is the risk

118
00:08:03,714 --> 00:08:07,238
if you don't validate your input? It cloud lead to

119
00:08:07,404 --> 00:08:09,930
exploits like SQL injection.

120
00:08:10,510 --> 00:08:13,926
How can you secure yourself from something like that? You could validate

121
00:08:13,958 --> 00:08:17,514
the data input. You could make sure you don't have too

122
00:08:17,552 --> 00:08:21,086
much privilege. If something happens, then the

123
00:08:21,108 --> 00:08:24,330
resources, they cannot access other resources.

124
00:08:24,490 --> 00:08:27,742
And you need to make sure you monitor and

125
00:08:27,796 --> 00:08:31,294
log your resources at runtime to make sure that if

126
00:08:31,332 --> 00:08:33,680
something happens, you know about it.

127
00:08:34,690 --> 00:08:38,010
So you have different controls that you could use and utilize.

128
00:08:38,510 --> 00:08:41,922
We'll see some of them soon. And in order to make sure that

129
00:08:41,976 --> 00:08:44,900
you could achieve what we just talked about here.

130
00:08:46,410 --> 00:08:49,702
All right, so you are using next one.

131
00:08:49,756 --> 00:08:53,490
You're using third party or open source

132
00:08:53,570 --> 00:08:57,486
code, right? We all do. We love open source.

133
00:08:57,618 --> 00:09:01,414
It makes our job much easier and faster.

134
00:09:01,542 --> 00:09:05,690
But the thing is that if you're using an outdated

135
00:09:06,190 --> 00:09:09,610
resource, JIt could have known vulnerabilities.

136
00:09:10,690 --> 00:09:14,906
But the thing is, because it's open source, it's scanned

137
00:09:14,938 --> 00:09:19,162
all the time. And common threats are common. They are known.

138
00:09:19,306 --> 00:09:22,754
So if you make sure that your

139
00:09:22,792 --> 00:09:26,670
dependencies are updated by scanning

140
00:09:26,750 --> 00:09:29,870
the different version of your dependencies

141
00:09:29,950 --> 00:09:33,566
and find the common vulnerabilities, you could update

142
00:09:33,598 --> 00:09:37,062
them and make sure that all known issues

143
00:09:37,196 --> 00:09:40,566
are taken care of. Next, let's talk

144
00:09:40,588 --> 00:09:43,480
about authentication and identity access.

145
00:09:44,810 --> 00:09:48,262
The risk if, for instance, a credential

146
00:09:48,326 --> 00:09:52,010
is stolen, data could be stolen as well,

147
00:09:52,160 --> 00:09:55,210
right? And the flow of execution could be broken.

148
00:09:55,630 --> 00:09:59,820
So in order to make sure that you are not

149
00:10:00,610 --> 00:10:04,206
allowing threats through authentication, you need

150
00:10:04,228 --> 00:10:08,042
to make sure you don't have unauthorized endpoints,

151
00:10:08,106 --> 00:10:12,582
right. Don't have public endpoints without authentication and authorization

152
00:10:12,746 --> 00:10:16,354
that could access data and make

153
00:10:16,392 --> 00:10:20,530
sure that you're managing your users correctly.

154
00:10:21,510 --> 00:10:25,314
Make sure you use your infra in a central

155
00:10:25,362 --> 00:10:28,598
authentication method for interservices. So inside the

156
00:10:28,604 --> 00:10:32,662
services as well. If something happens, you need to make sure that

157
00:10:32,796 --> 00:10:35,720
the data flow is secure as well.

158
00:10:36,730 --> 00:10:39,978
Make sure that all compute services and

159
00:10:40,064 --> 00:10:43,466
lambdas, they require authentication in

160
00:10:43,488 --> 00:10:46,762
order to make sure you prevent these things as well and

161
00:10:46,816 --> 00:10:50,010
verify you don't have any unmanaged resources

162
00:10:50,530 --> 00:10:54,254
like s three buckets or IP addresses to make sure

163
00:10:54,292 --> 00:10:57,326
that nothing could be penetrated from

164
00:10:57,348 --> 00:11:00,846
the outside world. So you could use

165
00:11:01,028 --> 00:11:04,802
tools that actually scan your cloud after

166
00:11:04,856 --> 00:11:08,770
deployment the real cloud to try to test and

167
00:11:08,840 --> 00:11:11,650
find these issues misconfigurations.

168
00:11:12,870 --> 00:11:16,722
All right, so access control. If it's broken, data leakage

169
00:11:16,786 --> 00:11:20,726
from the cloud, cloud happen, and you

170
00:11:20,748 --> 00:11:24,610
need to make sure you protect yourself from that. So ensure

171
00:11:24,690 --> 00:11:28,662
you have list privilege for all resources, for your functions,

172
00:11:28,726 --> 00:11:32,138
for your databases, and make sure that

173
00:11:32,304 --> 00:11:36,060
you don't have too wide privilege. So if something happens,

174
00:11:36,670 --> 00:11:40,958
the result is not top bad. You could check your

175
00:11:41,124 --> 00:11:45,086
rules of the IM rules and roles with

176
00:11:45,188 --> 00:11:46,670
open source tools.

177
00:11:48,290 --> 00:11:51,070
All right, so sensitive data exposure.

178
00:11:51,490 --> 00:11:54,302
The risk of course is data leakage.

179
00:11:54,446 --> 00:11:58,290
So make sure your data is not accessible through public

180
00:11:58,360 --> 00:12:02,290
endpoints. Make sure it's encrypted at rest because if

181
00:12:02,360 --> 00:12:06,626
for some reason the disk is compromised, if it's

182
00:12:06,658 --> 00:12:10,134
encrypted, you're probably good. And make sure the

183
00:12:10,172 --> 00:12:13,910
transition of data is encrypted as well. Right? Always use SSL

184
00:12:15,530 --> 00:12:18,682
so you could have controls that make sure

185
00:12:18,736 --> 00:12:21,658
you don't have unencrypted data.

186
00:12:21,824 --> 00:12:25,482
Scan the cloud, scan your code, find secrets and

187
00:12:25,536 --> 00:12:28,540
check the transit of your data as well.

188
00:12:29,150 --> 00:12:32,590
Security misconfiguration well,

189
00:12:32,740 --> 00:12:36,014
you need to make sure you have the proper logging and

190
00:12:36,052 --> 00:12:39,914
monitoring because information could leak and attackers

191
00:12:39,962 --> 00:12:43,266
could happen. You need to make sure that if something is

192
00:12:43,288 --> 00:12:46,898
not configured properly, you need to make sure that you know about it.

193
00:12:46,984 --> 00:12:51,426
And you could also check that everything is configured in

194
00:12:51,448 --> 00:12:53,940
your cloud properly by scanning it.

195
00:12:55,210 --> 00:12:58,678
Cool. So now let's start by talking about

196
00:12:58,764 --> 00:13:02,822
some of the available tools that we have we could

197
00:13:02,876 --> 00:13:07,314
utilize. The first one we are going to talk about is OASP

198
00:13:07,362 --> 00:13:10,058
zap. It's a web security tool.

199
00:13:10,224 --> 00:13:14,202
It could can your web app and

200
00:13:14,256 --> 00:13:18,374
your API in order to find misconfiguration

201
00:13:18,502 --> 00:13:21,918
and vulnerabilities. It cloud find

202
00:13:22,004 --> 00:13:25,886
different things like SQL injection. It works with URL and

203
00:13:25,908 --> 00:13:29,726
API endpoints using open API. You could provide it

204
00:13:29,748 --> 00:13:33,934
a swagger and it will test your API and

205
00:13:34,052 --> 00:13:37,266
it will only work for your API endpoints. So if you

206
00:13:37,288 --> 00:13:40,834
have async flows, it will not be tested with this

207
00:13:40,872 --> 00:13:44,594
tool. We could test it with other tools. The next

208
00:13:44,712 --> 00:13:48,470
tool we are going to talk about, it's something that will scan your code

209
00:13:48,620 --> 00:13:51,894
and will check the dependencies that you

210
00:13:51,932 --> 00:13:56,230
use by scanning known vulnerabilities. In libraries.

211
00:13:56,890 --> 00:14:01,158
There are known databases like NVD

212
00:14:01,254 --> 00:14:04,506
that you could utilize to make sure that the version of the

213
00:14:04,528 --> 00:14:08,646
packages that you use are updated and don't have known

214
00:14:08,678 --> 00:14:12,266
vulnerabilities. Secrets let's

215
00:14:12,298 --> 00:14:15,882
talk about this tool. It's called Gitlix

216
00:14:15,946 --> 00:14:19,790
and it scans for secrets in

217
00:14:19,860 --> 00:14:23,706
git, right? So if by a mistake

218
00:14:23,898 --> 00:14:26,850
like us, we are developers, we write code.

219
00:14:26,920 --> 00:14:30,942
Sometimes we need to debug something and we put maybe a password

220
00:14:31,006 --> 00:14:34,286
in order to connect to a service or a database.

221
00:14:34,478 --> 00:14:38,050
Oops, maybe we forget it and it's in the code

222
00:14:38,200 --> 00:14:41,602
and it goes to Jit GitHub for instance.

223
00:14:41,666 --> 00:14:44,498
And once it's there, it's there forever.

224
00:14:44,674 --> 00:14:48,310
So first off, you want to make sure you don't have

225
00:14:48,380 --> 00:14:51,930
already secrets inside. Of course, if it's an open source project

226
00:14:52,000 --> 00:14:55,114
that it's even riskier. You need to make

227
00:14:55,152 --> 00:14:58,506
sure that there are no secrets in the

228
00:14:58,528 --> 00:15:02,714
code. If you find them, you need to make sure you mitigate it properly,

229
00:15:02,842 --> 00:15:06,654
replace the secrets, invalidate them, and make sure and try

230
00:15:06,692 --> 00:15:10,110
to understand if something was compromised. And if you

231
00:15:10,180 --> 00:15:14,534
want to make it even more secure, you could even use precommit

232
00:15:14,602 --> 00:15:18,894
hooks in order to, in the developer's computer, utilize tools

233
00:15:18,942 --> 00:15:22,350
like this in order to make sure you don't even push secrets.

234
00:15:22,430 --> 00:15:25,846
Top git next we are going to talk

235
00:15:25,868 --> 00:15:30,866
about Prowler. Prowler is a runtime infrastructure misconfiguration

236
00:15:30,978 --> 00:15:34,438
tool. This is a very strong

237
00:15:34,524 --> 00:15:37,906
tool that actually complements the OASP

238
00:15:37,938 --> 00:15:42,026
zap we talked about just a second ago. Because if

239
00:15:42,208 --> 00:15:45,930
OSAP scans your parameter, your web app,

240
00:15:46,000 --> 00:15:49,210
and your APIs, prowling could

241
00:15:49,360 --> 00:15:52,526
can your entire cloud.

242
00:15:52,708 --> 00:15:56,490
JIt works with Azure and AWS,

243
00:15:56,650 --> 00:15:59,934
and it could find misconfigurations in your cloud.

244
00:16:00,052 --> 00:16:03,970
You could see that it has roughly 200 checks,

245
00:16:04,630 --> 00:16:08,142
probably more by now, multiple output formats,

246
00:16:08,286 --> 00:16:11,886
and it also supports AWS organizations.

247
00:16:12,078 --> 00:16:16,246
And for instance, if you have async flows without

248
00:16:16,348 --> 00:16:20,246
API gateway, Jit will scan those as well, along with a

249
00:16:20,268 --> 00:16:23,190
lot of different resources it supports.

250
00:16:23,930 --> 00:16:27,554
Next, we are going to talk about Airim by bridge

251
00:16:27,602 --> 00:16:30,554
crew. It's a list privilege access tool.

252
00:16:30,672 --> 00:16:33,830
JIT scans, IAM rules, roles,

253
00:16:33,990 --> 00:16:37,274
policies to make sure you don't have more than you need.

254
00:16:37,312 --> 00:16:41,418
It's easy to test that. Think about it. If you have a role with

255
00:16:41,504 --> 00:16:45,002
a certain policy, it could check the logs, the cloud

256
00:16:45,056 --> 00:16:49,162
rail logs, what was actually accessed, and if it doesn't

257
00:16:49,226 --> 00:16:52,754
match it, cloud find issues in your

258
00:16:52,792 --> 00:16:56,562
IM rules, right? All right,

259
00:16:56,616 --> 00:17:00,498
so after we talked about different threats and

260
00:17:00,584 --> 00:17:04,082
different tools, let's try to see how they match together.

261
00:17:04,216 --> 00:17:08,034
And let's talk about the different threats

262
00:17:08,082 --> 00:17:11,462
that we saw and see which tools could help

263
00:17:11,516 --> 00:17:14,374
us out. All right,

264
00:17:14,412 --> 00:17:18,454
so injection. What was the risk?

265
00:17:18,582 --> 00:17:21,642
If you don't have input validation, it could lead to

266
00:17:21,696 --> 00:17:23,850
exploits and data leakage.

267
00:17:24,190 --> 00:17:27,530
So the tools that we could use here,

268
00:17:27,600 --> 00:17:31,334
we have two tools, one to make sure we do have input

269
00:17:31,382 --> 00:17:34,838
validation. If we don't OSAP is going to find that

270
00:17:34,864 --> 00:17:38,590
out by trying to attack the API.

271
00:17:39,090 --> 00:17:42,882
The other tool we could use is to make sure that if something like that

272
00:17:42,936 --> 00:17:46,226
happens, we don't have too wide privilege access.

273
00:17:46,408 --> 00:17:49,874
So we could scan using RIM and try

274
00:17:49,912 --> 00:17:53,454
top have least privilege access control everywhere

275
00:17:53,502 --> 00:17:56,402
in the system. Next,

276
00:17:56,536 --> 00:17:59,906
we didn't talk about this threat, but you

277
00:17:59,928 --> 00:18:03,874
could use XSe text leveraging old XML processors.

278
00:18:03,922 --> 00:18:07,574
So this is something a little older, but you could do the same

279
00:18:07,612 --> 00:18:11,626
thing using OSF. Find these issues and make sure you

280
00:18:11,648 --> 00:18:15,334
don't use these old versions

281
00:18:15,462 --> 00:18:19,274
by make sure your dependencies are updated. Same goes

282
00:18:19,312 --> 00:18:22,634
for XSS. So basically you could

283
00:18:22,672 --> 00:18:26,094
use OSAP, you could use OszAP in order to

284
00:18:26,132 --> 00:18:30,014
find anything that is related to your API or

285
00:18:30,052 --> 00:18:33,762
to your web application. It's going to use

286
00:18:33,816 --> 00:18:37,042
a wide variety of tests and inputs in order

287
00:18:37,096 --> 00:18:40,306
to try to break the application to

288
00:18:40,328 --> 00:18:44,082
find these vulnerabilities. All right,

289
00:18:44,136 --> 00:18:48,130
so if we are not using secure serialization

290
00:18:48,210 --> 00:18:51,640
or deserialization, we could actually

291
00:18:52,250 --> 00:18:56,614
have the same risk, the same type of risk and you

292
00:18:56,652 --> 00:19:00,106
could use the same tools again, right? We cloud see that the

293
00:19:00,128 --> 00:19:04,170
same set of tools give us a wide variety

294
00:19:04,590 --> 00:19:07,478
of protection in different aspects.

295
00:19:07,574 --> 00:19:11,374
So again, zap will find these issues and the dependency check

296
00:19:11,412 --> 00:19:15,102
will make sure that if there are known issues like this,

297
00:19:15,236 --> 00:19:19,230
we are going to be protected just by updating to the right version.

298
00:19:20,370 --> 00:19:24,146
All right, so this is a

299
00:19:24,168 --> 00:19:27,906
bit easier one to understand. We talked about this as well.

300
00:19:28,008 --> 00:19:31,090
If you are using libraries and packages of

301
00:19:31,160 --> 00:19:34,210
open source tools and packages,

302
00:19:34,550 --> 00:19:38,578
they could have known vulnerabilities. We have databases

303
00:19:38,674 --> 00:19:42,162
for these known vulnerabilities and tools that utilize

304
00:19:42,226 --> 00:19:45,842
these databases in order to find be versions,

305
00:19:45,986 --> 00:19:49,994
all versions that you use in your come. So by

306
00:19:50,192 --> 00:19:53,802
scheduling a daily scan, a weekly can of

307
00:19:53,856 --> 00:19:57,098
your dependencies, you could make sure that you are always

308
00:19:57,184 --> 00:20:01,146
protected and you always use the right version,

309
00:20:01,178 --> 00:20:04,880
the protected version of the packages that you use.

310
00:20:05,490 --> 00:20:07,230
All right, so authentication,

311
00:20:08,290 --> 00:20:12,154
especially in the serverless world when you have a lot of endpoints,

312
00:20:12,202 --> 00:20:15,762
right? Everything is microservices, everything is

313
00:20:15,896 --> 00:20:19,554
distributed. It could happen that you have points that are

314
00:20:19,592 --> 00:20:23,534
not protected. So we have two cloud tools

315
00:20:23,582 --> 00:20:27,730
that complement each other in order to find these misconfigurations.

316
00:20:27,890 --> 00:20:31,074
You could scan the parameter using OWASP,

317
00:20:31,122 --> 00:20:34,934
zap and you cloud use prowling in order to find

318
00:20:35,052 --> 00:20:38,358
internal things, or maybe async flows

319
00:20:38,534 --> 00:20:42,218
in your applications in order to find these

320
00:20:42,304 --> 00:20:46,342
issues. So great tools. And by creating

321
00:20:46,486 --> 00:20:49,594
scheduled scans you can find a lot of

322
00:20:49,632 --> 00:20:53,454
issues in your application. All right, so if

323
00:20:53,492 --> 00:20:57,262
you don't have the least

324
00:20:57,316 --> 00:21:00,734
privileged access rules, roles policies for

325
00:21:00,772 --> 00:21:04,066
the users or the resources that you use,

326
00:21:04,248 --> 00:21:07,940
it could be problematic. And we talked about this

327
00:21:08,470 --> 00:21:12,050
a few slides ago. RIm is a great tool in order

328
00:21:12,120 --> 00:21:15,446
to help you do that. All right,

329
00:21:15,468 --> 00:21:19,478
so that was a run through a lot of different

330
00:21:19,564 --> 00:21:23,266
risks, a lot of different tools. Maybe it's

331
00:21:23,298 --> 00:21:27,080
a bit too much. Let's try to summarize those

332
00:21:27,390 --> 00:21:31,190
by looking at the different areas

333
00:21:31,350 --> 00:21:35,562
of the application and trying to put tools where

334
00:21:35,616 --> 00:21:39,498
it should be protected. So first off,

335
00:21:39,584 --> 00:21:42,846
your come when you are writing code,

336
00:21:42,868 --> 00:21:46,874
this is the easiest part to understand. When you secure

337
00:21:46,922 --> 00:21:50,750
your code, when you write your code, you want to make sure it's secured.

338
00:21:51,490 --> 00:21:55,054
You want to make sure you don't have secrets, because maybe you're a developer,

339
00:21:55,102 --> 00:21:58,638
you're debugging something, you don't want to push it to jit.

340
00:21:58,734 --> 00:22:01,902
You could use git leaks to make sure you don't have secrets

341
00:22:01,966 --> 00:22:06,390
in the code. Secrets, environment variables, just passwords,

342
00:22:07,370 --> 00:22:10,840
keys and certificates. It will find everything.

343
00:22:11,850 --> 00:22:15,570
Then, because we all use open source libraries,

344
00:22:15,650 --> 00:22:19,850
we want to make sure they don't have known vulnerabilities.

345
00:22:20,190 --> 00:22:24,330
So we could scan dependency checks of these

346
00:22:24,400 --> 00:22:27,180
packages using OAS depth check.

347
00:22:28,270 --> 00:22:32,174
And of course we could use OASP zap in order to

348
00:22:32,212 --> 00:22:36,858
make sure that we don't have broken endpoints.

349
00:22:36,954 --> 00:22:40,462
And if we do find that, for instance, if you do not have

350
00:22:40,596 --> 00:22:44,034
input validation in your code, you can

351
00:22:44,072 --> 00:22:47,778
find it by using this tool. And then you could

352
00:22:47,864 --> 00:22:51,410
modify your code in order to make sure that you protect

353
00:22:51,480 --> 00:22:53,220
yourself from these issues.

354
00:22:54,470 --> 00:22:57,766
Next, when we talk about the cloud,

355
00:22:57,948 --> 00:23:01,400
we want to manage identity and access,

356
00:23:01,770 --> 00:23:05,314
right? So you want to make sure that you have least privileged

357
00:23:05,362 --> 00:23:09,100
access to all the resources in your application.

358
00:23:09,470 --> 00:23:12,938
You could use these three tools in order to do that.

359
00:23:13,024 --> 00:23:17,260
We talked about OS DESA, which is a tool that could actually

360
00:23:17,950 --> 00:23:21,294
scan your parameter, also the web

361
00:23:21,332 --> 00:23:25,022
application and also your API to try to find out

362
00:23:25,156 --> 00:23:28,510
issues, misconfigurations and vulnerabilities.

363
00:23:29,090 --> 00:23:32,334
We then talked about Prowler, which could

364
00:23:32,372 --> 00:23:36,334
scan the internal of the cloud, not just a parameter,

365
00:23:36,462 --> 00:23:40,610
and find different misconfiguration

366
00:23:41,350 --> 00:23:44,420
issues and help you mitigate them.

367
00:23:44,870 --> 00:23:48,614
And last but not least, we have rim that will check that

368
00:23:48,652 --> 00:23:52,422
you have the least privilege policies that you

369
00:23:52,476 --> 00:23:56,566
need in order to make sure that your application is

370
00:23:56,668 --> 00:24:00,346
securely tight and secure, to make sure you

371
00:24:00,368 --> 00:24:02,650
don't have too wide permissions.

372
00:24:03,790 --> 00:24:07,146
Next, we are going to talk about the data, right? Because we

373
00:24:07,168 --> 00:24:11,210
need to make sure our data, the customer's data is protected.

374
00:24:11,550 --> 00:24:14,954
We could use OSAP in order to scan the parameter

375
00:24:15,002 --> 00:24:19,040
and find out if there are data leakages from the application.

376
00:24:19,490 --> 00:24:23,154
And we could use tools like prowling in order to make sure that the

377
00:24:23,192 --> 00:24:26,382
data is stored securely. For instance,

378
00:24:26,446 --> 00:24:29,698
if it's not encrypted at rest, we are going to find

379
00:24:29,784 --> 00:24:33,842
things like that using prowler. And the last

380
00:24:33,896 --> 00:24:37,718
part, we need to make sure that we know what happens

381
00:24:37,804 --> 00:24:42,230
in our application. So if something does

382
00:24:42,300 --> 00:24:44,680
happen, we need to know about it.

383
00:24:45,690 --> 00:24:49,482
So we need to monitor and we need to log in order to find

384
00:24:49,536 --> 00:24:53,082
these issues when they happen and in order

385
00:24:53,136 --> 00:24:56,682
to help us first mitigate them, learn from

386
00:24:56,736 --> 00:24:59,898
them, do the right research and close

387
00:24:59,984 --> 00:25:03,486
them when we find them. So this is an important

388
00:25:03,588 --> 00:25:07,166
part as well. And for instance, Paolo could find out if you

389
00:25:07,188 --> 00:25:10,478
don't have cloud trader logs in your system in order to know

390
00:25:10,564 --> 00:25:13,650
which resource. Access which resource.

391
00:25:14,390 --> 00:25:17,810
All right, so let's talk a little Jit about

392
00:25:17,880 --> 00:25:22,158
what we do at JIT. We try to leverage

393
00:25:22,254 --> 00:25:26,486
all these tools and help you configure it

394
00:25:26,588 --> 00:25:29,880
painlessly. So we took it to the next level.

395
00:25:32,330 --> 00:25:35,974
We are recommending a

396
00:25:36,012 --> 00:25:39,866
plan, a security plan for you based on your needs,

397
00:25:40,048 --> 00:25:43,482
based on your applications, and based

398
00:25:43,536 --> 00:25:47,082
on the right tools for each of these threats. And we

399
00:25:47,136 --> 00:25:50,910
help you configure them and do it

400
00:25:51,060 --> 00:25:54,750
for you with smooth and serverless

401
00:25:56,050 --> 00:26:00,714
experience in order to make sure you have your application secured

402
00:26:00,842 --> 00:26:04,258
without the hassle and need to configure everything

403
00:26:04,344 --> 00:26:08,386
to understand what it does and how

404
00:26:08,408 --> 00:26:11,986
to do it yourself. Right? So we

405
00:26:12,008 --> 00:26:15,826
do it as code, which basically means that

406
00:26:15,928 --> 00:26:19,830
you could configure it in any way you want.

407
00:26:19,900 --> 00:26:23,734
You could say, I want to secure this, this and that,

408
00:26:23,852 --> 00:26:27,720
and we are going to do it for you. You could automate it.

409
00:26:28,430 --> 00:26:31,930
If you have different environments like dev

410
00:26:32,000 --> 00:26:35,862
staging and production, you could modify

411
00:26:35,926 --> 00:26:40,134
it as code, security as code for

412
00:26:40,192 --> 00:26:43,934
your needs. And you could scan based on

413
00:26:43,972 --> 00:26:47,534
events or schedules, and then you could get the

414
00:26:47,572 --> 00:26:51,134
issues, and then we could help you actually understand what

415
00:26:51,252 --> 00:26:54,986
these findings say and how to resolve

416
00:26:55,018 --> 00:26:58,334
them. Right? It's not just scanning and finding

417
00:26:58,382 --> 00:27:02,050
an issue, it's also what do I do when I do find

418
00:27:02,120 --> 00:27:05,894
it? How do I mitigate it? How do I make my application

419
00:27:06,012 --> 00:27:10,950
much more secure? All right, so now

420
00:27:11,020 --> 00:27:14,978
our home alone is much more secure using the OASP

421
00:27:14,994 --> 00:27:17,970
top ten for serverless, the open source tools,

422
00:27:18,050 --> 00:27:21,814
and we feel much better. So thank you

423
00:27:21,852 --> 00:27:24,982
very much for listening and these

424
00:27:25,036 --> 00:27:28,566
are my details. You could find me right here. You can

425
00:27:28,588 --> 00:27:31,758
scan the barcode and try the application out,

426
00:27:31,844 --> 00:27:34,990
see if it works for you as well.

427
00:27:35,140 --> 00:27:37,740
Thank you so much and have a nice day.

