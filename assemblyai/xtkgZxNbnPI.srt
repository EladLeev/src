1
00:00:23,930 --> 00:00:27,634
Everyone, my my name is Adnan and I'm from trace

2
00:00:27,682 --> 00:00:31,714
test. Today I'll be talking about observabilitydriven, more specifically

3
00:00:31,762 --> 00:00:34,882
observability driven development with open telemetry.

4
00:00:35,026 --> 00:00:39,302
Super happy to be here at Conf 42. Observability and yeah,

5
00:00:39,356 --> 00:00:42,678
let's just jump right in. We can start with the

6
00:00:42,684 --> 00:00:46,214
slide deck right away. And as you can see, the title pretty

7
00:00:46,252 --> 00:00:49,830
obvious. Observability driven development with open telemetry.

8
00:00:50,210 --> 00:00:53,706
Yeah, let's jump right in. My name is Adnan.

9
00:00:53,738 --> 00:00:56,874
As I already said, I'm currently doing all things Devrel

10
00:00:56,922 --> 00:01:00,394
at Trace test, which is a project, an open source

11
00:01:00,442 --> 00:01:04,366
product coming out of the Cube shop accelerator. And to

12
00:01:04,388 --> 00:01:07,246
tell you a bit about myself so that you think that I know what I'm

13
00:01:07,278 --> 00:01:11,006
talking about and to stay around. First and foremost,

14
00:01:11,118 --> 00:01:14,786
I am a failed startup founder and an X free codecamp leader. And that

15
00:01:14,808 --> 00:01:18,502
was basically how I transitioned into

16
00:01:18,556 --> 00:01:22,306
being a developer relations engineer from being a software

17
00:01:22,338 --> 00:01:25,782
engineer. So in the last five or so years I've been building

18
00:01:25,836 --> 00:01:28,874
open source dev tools and I absolutely love it.

19
00:01:28,912 --> 00:01:32,700
So it's a natural transition for me to go into education.

20
00:01:33,550 --> 00:01:35,930
Yeah, super exciting.

21
00:01:37,870 --> 00:01:41,786
Let me just give you a quick rundown of the agenda for today. For the

22
00:01:41,808 --> 00:01:45,470
next 20 minutes or so I will talk about four main things.

23
00:01:45,540 --> 00:01:48,558
So the four main things you need to remember throughout this talk will be,

24
00:01:48,644 --> 00:01:52,970
first, the pain of testing microservices. It's absolutely horrible.

25
00:01:53,130 --> 00:01:56,526
I want to show you a way of doing it in a much, much simpler

26
00:01:56,558 --> 00:02:00,286
way. And also number two will be integration testing.

27
00:02:00,318 --> 00:02:04,178
And TDD is hard. We all know that integration testing is hard.

28
00:02:04,264 --> 00:02:07,446
There's a lot of mocking, a lot of setup, and I want to show you

29
00:02:07,468 --> 00:02:11,010
a solution to that. Then three will be how observability

30
00:02:11,090 --> 00:02:14,646
driven development can help, how implementing odD can

31
00:02:14,668 --> 00:02:18,342
help your TDD process. That's a very important thing that I want to explain

32
00:02:18,396 --> 00:02:21,894
as well. And then finally we will go into an in practice session.

33
00:02:21,942 --> 00:02:25,894
So I want to show you hands on how observability driven

34
00:02:25,942 --> 00:02:29,206
development works in practice. Now let's

35
00:02:29,238 --> 00:02:33,066
jump in right away into the pain of testing microservices.

36
00:02:33,258 --> 00:02:36,270
Now here's a problem that you keep facing,

37
00:02:36,850 --> 00:02:40,606
at least for me. It's a big problem where I don't have

38
00:02:40,628 --> 00:02:43,954
a way of knowing precisely at which point of my

39
00:02:43,992 --> 00:02:47,822
complex network of microservice to microservices

40
00:02:47,886 --> 00:02:52,114
connections and communications transactions, where an

41
00:02:52,312 --> 00:02:56,086
HTTP transaction goes wrong. So I don't know where

42
00:02:56,188 --> 00:02:59,350
a transaction fails. I can't track these

43
00:02:59,420 --> 00:03:03,190
communications in between the microservices and one

44
00:03:03,260 --> 00:03:06,406
more thing that's horrible is that it's really hard to

45
00:03:06,428 --> 00:03:10,210
mock different microservices when they're communicating.

46
00:03:10,370 --> 00:03:13,690
The only real way I can do that is with tracing.

47
00:03:14,190 --> 00:03:17,354
It's because I can store a tons of trace data and I'm actually

48
00:03:17,392 --> 00:03:19,740
getting value from that and I can see what's happening.

49
00:03:20,830 --> 00:03:24,270
But how do we use that? How do we solve that problem

50
00:03:24,340 --> 00:03:27,994
with tracing? Well, we use something called observability driven development

51
00:03:28,042 --> 00:03:31,294
and it's often called odd for

52
00:03:31,332 --> 00:03:35,390
short. And it emphasizes using this tracing instrumentation

53
00:03:35,470 --> 00:03:38,850
in your back end code as assertions for tests.

54
00:03:39,270 --> 00:03:42,354
We now have this culture of trace based testing as well,

55
00:03:42,392 --> 00:03:45,822
where we can use these distributed traces

56
00:03:45,966 --> 00:03:49,174
as the assertions themselves. And it's really really

57
00:03:49,212 --> 00:03:52,482
cool because it enforces not just quality in your traces,

58
00:03:52,546 --> 00:03:56,054
but also an easier way to run integration tests. You get much more

59
00:03:56,092 --> 00:03:59,290
velocity for your dev teams and it's much safer

60
00:03:59,630 --> 00:04:03,626
for your platform teams because you know exactly what your production system is

61
00:04:03,648 --> 00:04:07,530
doing when you're running tests. So to

62
00:04:07,600 --> 00:04:10,954
get a quick intro into distributed tracing, first and foremost,

63
00:04:11,082 --> 00:04:14,734
distributed tracing refers to methods of observing requests as

64
00:04:14,772 --> 00:04:18,734
they propagate through distributed systems. So this is a really

65
00:04:18,852 --> 00:04:22,174
nice definition by lightstep, and I agree with

66
00:04:22,212 --> 00:04:25,902
this 100%. Now a visual

67
00:04:25,966 --> 00:04:29,890
representation of this, I think this is a better way of explaining it, is that

68
00:04:30,040 --> 00:04:33,554
a distributed trace, it records the

69
00:04:33,592 --> 00:04:37,142
paths an HTTP request takes as it goes

70
00:04:37,196 --> 00:04:40,354
through your system, so as it propagates through APIs,

71
00:04:40,402 --> 00:04:44,102
microservices, et cetera, et cetera. And each step of this

72
00:04:44,156 --> 00:04:47,666
transaction is actually called a span. So each step

73
00:04:47,708 --> 00:04:51,626
of a distributed trace is a span and every span contains information

74
00:04:51,728 --> 00:04:55,494
about the executed operation. So if it's an HTTP request,

75
00:04:55,542 --> 00:04:58,886
the codes, the timestamps, different timings,

76
00:04:59,078 --> 00:05:02,934
database statements as well. So all of these things are contained within

77
00:05:02,992 --> 00:05:06,942
the spans of the distributed trace. So here's a system

78
00:05:06,996 --> 00:05:10,302
that I'm going to be showing throughout this talk. It's a very simple system.

79
00:05:10,356 --> 00:05:13,514
It has one database, it has one service for fetching books,

80
00:05:13,562 --> 00:05:16,690
and it has a service where you see the availability of

81
00:05:16,760 --> 00:05:19,938
said books. Super, super simple. It's just a simulation of what you

82
00:05:19,944 --> 00:05:23,202
would see in production. Now what's happening

83
00:05:23,256 --> 00:05:26,614
here is that this is a code example of how the

84
00:05:26,652 --> 00:05:30,440
availability API fetches if a book is available.

85
00:05:30,890 --> 00:05:34,098
And as you can see here, I've added in these spans,

86
00:05:34,194 --> 00:05:37,766
basically showing you what a distributed trace span would

87
00:05:37,788 --> 00:05:41,782
look like. I'm initializing the span, I'm setting an attribute

88
00:05:41,846 --> 00:05:45,610
which is a real value of the book id, and I'm making sure to check

89
00:05:45,680 --> 00:05:49,546
if that book is available, and then I can use this data

90
00:05:49,648 --> 00:05:53,230
further down and validate against it

91
00:05:53,380 --> 00:05:56,606
within this distributed trace in the

92
00:05:56,628 --> 00:06:00,046
UI, it would look something like this, where I can actually see,

93
00:06:00,148 --> 00:06:04,066
yes, this attribute that is available I can validate if

94
00:06:04,088 --> 00:06:07,634
that's true or not. And this is where we move

95
00:06:07,672 --> 00:06:11,230
into whether integration testing and TDD

96
00:06:11,310 --> 00:06:15,186
actually need help. And I'm 100% sure that

97
00:06:15,368 --> 00:06:19,006
they do, because when you look at the TDD green red feedback

98
00:06:19,038 --> 00:06:22,758
loop, you create a test case before writing any code. You run a

99
00:06:22,764 --> 00:06:26,006
test, you see that they fail, you write code to pass a test, and then

100
00:06:26,028 --> 00:06:28,582
you run the test again and see that it's passing. So it's a very,

101
00:06:28,636 --> 00:06:32,186
very nice feedback loop. It's a nice process that

102
00:06:32,208 --> 00:06:35,626
we're all used to, that we like, but here are the

103
00:06:35,648 --> 00:06:39,494
pain points that we have to work on. First and foremost, integration tests

104
00:06:39,542 --> 00:06:42,922
require access to your services and your infrastructure.

105
00:06:42,986 --> 00:06:46,654
So running back end integration tests, it requires you to have

106
00:06:46,692 --> 00:06:50,414
an insight into your entire infrastructure. Unlike front end tests where

107
00:06:50,452 --> 00:06:54,222
you're only operating within the browser, when running

108
00:06:54,276 --> 00:06:57,486
an integration test on the back end, you need to design the trigger, you need

109
00:06:57,508 --> 00:07:00,654
to figure out how to access the database, you need to have authentication,

110
00:07:00,702 --> 00:07:03,970
you need to write that in as well. If you have a message bus,

111
00:07:04,120 --> 00:07:07,430
how do you test a message bus? It's very complicated, it's very hard to mock,

112
00:07:07,850 --> 00:07:12,214
and then you also need to configure the

113
00:07:12,252 --> 00:07:15,894
monitoring as well. So how to gather the logs from

114
00:07:15,932 --> 00:07:19,030
these services, and it's just a headache.

115
00:07:19,530 --> 00:07:22,842
So this is also a problem because you can't really track

116
00:07:22,896 --> 00:07:26,442
which part of a microservice chain failed. So let's say you have

117
00:07:26,496 --> 00:07:30,494
serverless functions or API gateways, or even different

118
00:07:30,612 --> 00:07:33,230
types of ephemeral infrastructure.

119
00:07:34,130 --> 00:07:35,440
How do you test that?

120
00:07:37,010 --> 00:07:40,814
It's a headache. So I like

121
00:07:40,852 --> 00:07:44,862
saying that just to start integration testing, it's 90%.

122
00:07:44,996 --> 00:07:49,060
Writing the code to actually makes the test work, and then 10% is actually

123
00:07:49,990 --> 00:07:53,666
the testing itself. So writing the assertions and all that,

124
00:07:53,688 --> 00:07:58,218
that's the simple part. The problem is all of the piping

125
00:07:58,254 --> 00:08:00,790
you have to write to actually get to the assertions.

126
00:08:02,010 --> 00:08:05,558
So here, let me show you what I mean. A traditional integration test,

127
00:08:05,644 --> 00:08:09,786
if you look at it, you have a

128
00:08:09,808 --> 00:08:12,906
ton of different modules and

129
00:08:13,088 --> 00:08:17,002
imports you have to add into your code, and then from

130
00:08:17,056 --> 00:08:20,554
there you can first need to write the mock, and then you have to figure

131
00:08:20,592 --> 00:08:22,966
out what you need to mock, and then you need to figure out the structure

132
00:08:22,998 --> 00:08:26,446
of it. And if the structure changes, you have to rewrite that. And then you

133
00:08:26,468 --> 00:08:29,694
have to figure out how to trigger a request and then whether

134
00:08:29,732 --> 00:08:32,858
that request needs authentication, et cetera,

135
00:08:32,874 --> 00:08:36,446
et cetera. And then you have this tiny little speck of

136
00:08:36,468 --> 00:08:39,614
code where you say the result, actually the response

137
00:08:39,662 --> 00:08:42,882
should have a status of 200. And then again

138
00:08:42,936 --> 00:08:46,226
you're expecting the body to be equal to what you're mocking. So you

139
00:08:46,248 --> 00:08:49,046
have two lines of code and you have a ton of piping you need to

140
00:08:49,068 --> 00:08:52,710
figure out. You're also tied down to the programming language.

141
00:08:53,370 --> 00:08:56,486
You have to basically know the programming language in

142
00:08:56,508 --> 00:08:59,500
and out, and you need to know how to write the tests themselves.

143
00:08:59,870 --> 00:09:03,114
So it's a lot of complicated things happening at

144
00:09:03,152 --> 00:09:06,330
once versus when you're running a trace based test,

145
00:09:06,480 --> 00:09:09,946
you're basically only pointing to

146
00:09:09,968 --> 00:09:13,742
the API you want to actually the URL you want to trigger the test

147
00:09:13,796 --> 00:09:18,062
against, and then you select the assertions based

148
00:09:18,116 --> 00:09:21,070
on the trace spans. So here we can see,

149
00:09:21,220 --> 00:09:24,554
yes, I'm in my distributed trace.

150
00:09:24,602 --> 00:09:27,326
I want to hit the books API. I want to make sure that the status

151
00:09:27,358 --> 00:09:31,086
code is 200 and I want to make sure that the list of books

152
00:09:31,118 --> 00:09:34,302
is three. And I'm done. There's no mocking.

153
00:09:34,366 --> 00:09:37,894
This is actually what's happening in my system. And it's really

154
00:09:37,932 --> 00:09:41,954
beautiful how simplistic it is. Also language agnostic.

155
00:09:42,002 --> 00:09:45,334
So I don't need to know what the programming language of

156
00:09:45,372 --> 00:09:49,046
the actual microservice I'm testing is. I don't need to do any specifics.

157
00:09:49,078 --> 00:09:52,522
I don't need to learn the modules like Chi or whatever

158
00:09:52,576 --> 00:09:55,900
that I'm using for my node JS tests. I'm running this

159
00:09:56,830 --> 00:10:00,018
very totally agnostic from the programming language

160
00:10:00,054 --> 00:10:03,694
itself. And from here I like to

161
00:10:03,812 --> 00:10:07,374
transition into how observability driven development can help

162
00:10:07,412 --> 00:10:11,098
in this process. And first I need to define

163
00:10:11,114 --> 00:10:14,034
what it is so you understand exactly what it is.

164
00:10:14,152 --> 00:10:18,210
First and foremost. This is when you're writing code and observability

165
00:10:19,190 --> 00:10:22,834
in parallel. So you're instrumenting your code with open

166
00:10:22,872 --> 00:10:26,514
telemetry and you're writing the code in parallel. So you're not really

167
00:10:26,552 --> 00:10:30,518
testing the mocks, you don't have any artificial tests. It's all

168
00:10:30,604 --> 00:10:34,198
real data that your system is generating, which is we

169
00:10:34,204 --> 00:10:37,714
all know how long it takes to write mocks. If we cut that out,

170
00:10:37,852 --> 00:10:39,580
you see how much time we're saving.

171
00:10:41,550 --> 00:10:44,826
So from there let's move into

172
00:10:44,928 --> 00:10:48,746
the important part, and which is that you're actually testing data

173
00:10:48,848 --> 00:10:51,050
from traces in real environments.

174
00:10:52,290 --> 00:10:56,382
And what I think is important here is that it works with

175
00:10:56,436 --> 00:11:00,366
any existing open telemetry based distributed tracing. So if you have

176
00:11:00,388 --> 00:11:03,780
distributed tracing enabled in your system. If you have

177
00:11:04,470 --> 00:11:07,700
the Otel SDK installed, this will just work.

178
00:11:09,510 --> 00:11:13,006
From here. I'd like to segue into something that's called trace based testing,

179
00:11:13,038 --> 00:11:17,014
which is a very similar concept. Often they're like

180
00:11:17,052 --> 00:11:19,240
a Venn diagram, they overlap each other.

181
00:11:19,690 --> 00:11:22,886
But to explain what trace based testing is, is that

182
00:11:22,908 --> 00:11:26,854
it's adding assertions against span values. So against the

183
00:11:26,892 --> 00:11:30,406
spans, the individual spans of a distributed trace, you're adding

184
00:11:30,438 --> 00:11:33,514
assertions against that. So based

185
00:11:33,552 --> 00:11:37,130
on those values you can determine if a test has passed or failed.

186
00:11:37,550 --> 00:11:41,002
And unlike traditional API tools, trace based

187
00:11:41,056 --> 00:11:44,746
testing asserts against the system response and the

188
00:11:44,768 --> 00:11:49,002
trace result. So you're getting a more complete response

189
00:11:49,066 --> 00:11:52,526
from your system, so you know exactly what's happening in

190
00:11:52,548 --> 00:11:56,162
your system, not just from the response. You can get a response back that's 200.

191
00:11:56,216 --> 00:12:00,850
But something is failing asynchronously after the initial response.

192
00:12:02,870 --> 00:12:06,150
Let me now show you what this would look like in practice.

193
00:12:08,170 --> 00:12:11,474
Obviously one way of doing it is with trace

194
00:12:11,522 --> 00:12:15,378
test. It's an open source tool. It's in the CNCF landscape.

195
00:12:15,474 --> 00:12:18,918
It uses open telemetry trace bands as assertions. So basically

196
00:12:19,004 --> 00:12:22,938
all of the things about observability driven development I was explaining you

197
00:12:22,944 --> 00:12:26,474
can do that with trace test. Now. Why?

198
00:12:26,672 --> 00:12:29,962
It's a very simple answer, because it works with all of the open

199
00:12:30,016 --> 00:12:33,310
telemetry tracing solutions that you have

200
00:12:33,380 --> 00:12:35,840
right now. So all of the tools that you're already using,

201
00:12:36,210 --> 00:12:39,386
from open telemetry collector to Jaeger, Lightstep, new Relic,

202
00:12:39,498 --> 00:12:42,942
elastic, Opensearch tempo, all of the tools that you're already

203
00:12:42,996 --> 00:12:46,474
using, it just works and integrates seamlessly.

204
00:12:46,602 --> 00:12:49,986
You can also run tests via the web UI or the CLI. So it's very

205
00:12:50,008 --> 00:12:53,166
simple that way as well. But what I think is important here is that you're

206
00:12:53,198 --> 00:12:56,980
not creating artificial tests, you're testing against real data.

207
00:12:57,350 --> 00:13:00,598
You're using transactions for chaining tests into test suites. So you

208
00:13:00,604 --> 00:13:03,654
can have multiple tests that have inputs and outputs between the

209
00:13:03,692 --> 00:13:07,414
tests, and you can save these into environments where you can generate test

210
00:13:07,452 --> 00:13:11,370
suites that way as well. So it's very

211
00:13:11,440 --> 00:13:15,114
flexible. Now I like saying no

212
00:13:15,152 --> 00:13:18,780
mocks a lot because I don't like mocking at all.

213
00:13:19,390 --> 00:13:23,014
So whenever I have the opportunity to not write any mocks,

214
00:13:23,062 --> 00:13:26,206
I want to take that opportunity. Another thing

215
00:13:26,228 --> 00:13:29,834
that's very powerful is that if I have an async message queue like RabbitMQ

216
00:13:29,882 --> 00:13:33,326
or Kafka or something like that, how do I know that the values

217
00:13:33,358 --> 00:13:36,260
that get pulled off of Kafka are actually correct?

218
00:13:38,230 --> 00:13:41,538
That's a big headache. And with trace test. That's something you

219
00:13:41,544 --> 00:13:45,710
can do because of getting access to the actual trace ban

220
00:13:45,790 --> 00:13:49,094
that says yep, the value that I pulled off of Kafka is

221
00:13:49,212 --> 00:13:53,734
this one. You can also obviously do assertions based on timing. You can do

222
00:13:53,932 --> 00:13:57,334
wildcard assertions for common things like maybe you want to see

223
00:13:57,372 --> 00:14:00,634
that all of the database requests are less than 100

224
00:14:00,672 --> 00:14:04,186
milliseconds. You can do that as well. So the diagram is

225
00:14:04,208 --> 00:14:08,394
the perfect way to explain this.

226
00:14:08,432 --> 00:14:11,982
And this is what I like showing. So you get the test

227
00:14:12,036 --> 00:14:15,770
executor which is just an API request or GRPC request.

228
00:14:15,930 --> 00:14:19,450
You trigger your system, your system will generate traces.

229
00:14:19,610 --> 00:14:23,066
Trace test is going to pick up those traces and display

230
00:14:23,098 --> 00:14:26,926
that in the assertion engine where you can run your test specs

231
00:14:26,958 --> 00:14:30,580
and your assertions and then you get the test result back from there.

232
00:14:32,390 --> 00:14:35,714
Now from this I want to jump into some hands on code

233
00:14:35,752 --> 00:14:39,026
so we can see how that works. So yeah,

234
00:14:39,048 --> 00:14:43,270
so first and foremost you need to select the API you want to test and

235
00:14:43,340 --> 00:14:47,074
here you see just the app, 80, 80 books. So I just want to ping

236
00:14:47,122 --> 00:14:50,778
the books API that I had. I want to make sure that

237
00:14:50,864 --> 00:14:54,314
I'm specifying that I'm getting the status code

238
00:14:54,352 --> 00:14:57,946
200 back and that my books count is equal to three. So this

239
00:14:57,968 --> 00:15:01,814
is standard TDD. I'm writing my test and then I need to implement

240
00:15:01,862 --> 00:15:05,566
this in my books handler though I'm getting the books back

241
00:15:05,588 --> 00:15:08,734
and this is just a placeholder for the books I have in the bottom.

242
00:15:08,932 --> 00:15:12,734
I haven't defined any spans for my traces though,

243
00:15:12,852 --> 00:15:15,990
so if I do run the test itself I'm

244
00:15:16,010 --> 00:15:18,882
going to get an error. So I'm going to see yes,

245
00:15:18,936 --> 00:15:22,002
the status code is 200, that's fine, but I'm not seeing

246
00:15:22,056 --> 00:15:25,298
any traces for my books list count. I don't

247
00:15:25,304 --> 00:15:29,494
have any span that correlates with that. So this test will

248
00:15:29,532 --> 00:15:32,520
fail. So we're still keeping the TDD process.

249
00:15:32,970 --> 00:15:36,978
However, if I do jump back into the code, I initialize my tracer

250
00:15:37,154 --> 00:15:40,426
and then I say yes, my books list count is equal to the books that

251
00:15:40,448 --> 00:15:44,090
I'm getting and I want to add that to my trace.

252
00:15:45,230 --> 00:15:48,650
And then from there if I run the test again, it's going to pass just

253
00:15:48,720 --> 00:15:52,202
fine. Where this is the red green process I was talking

254
00:15:52,256 --> 00:15:56,378
about. But one more thing that I think is immensely powerful

255
00:15:56,474 --> 00:15:59,406
is that if you were doing some performance testing and you want to assert on

256
00:15:59,428 --> 00:16:02,734
timing, so let's say you have, as you can see here, you have the

257
00:16:02,772 --> 00:16:06,322
span duration and you want the duration of the span to be less than

258
00:16:06,376 --> 00:16:10,318
500 milliseconds so let's say you want your initial HTTP request

259
00:16:10,414 --> 00:16:14,466
to return in less than 500 milliseconds and

260
00:16:14,488 --> 00:16:17,958
you can do that as well. If I run this test and if it's taking

261
00:16:18,124 --> 00:16:22,294
more than 1 second, this is going to obviously fail. But if

262
00:16:22,332 --> 00:16:26,374
I go ahead and obviously

263
00:16:26,572 --> 00:16:29,786
change the test and makes sure that actually change the code to make sure that

264
00:16:29,808 --> 00:16:33,686
my test is executing, my API request is executing faster,

265
00:16:33,798 --> 00:16:38,166
I can check, as you can see in the UI here, the same response,

266
00:16:38,278 --> 00:16:42,000
and I'm getting that the test is passing in less than

267
00:16:42,370 --> 00:16:44,800
500 milliseconds, as you can see here.

268
00:16:47,250 --> 00:16:51,274
Now these are all very powerful things that you can do, but the most powerful

269
00:16:51,322 --> 00:16:55,106
thing that I think trace based testing allows you to do is asserting on

270
00:16:55,128 --> 00:16:58,722
every part of an HTTP transaction. Now here's a

271
00:16:58,776 --> 00:17:02,434
perfect way of explaining that we have these two services

272
00:17:02,552 --> 00:17:06,162
that are communicating with each other via one API call.

273
00:17:06,216 --> 00:17:09,910
So my one API call is triggering the books list. So I want to

274
00:17:09,980 --> 00:17:14,422
get back the books, a list of the books obviously. But my

275
00:17:14,476 --> 00:17:18,406
books, I need to make sure that they're available. So right here I'm

276
00:17:18,438 --> 00:17:22,634
actually triggering another API to another service

277
00:17:22,752 --> 00:17:26,074
that's called the availability service. And from

278
00:17:26,112 --> 00:17:29,274
this availability service I'm actually checking if the book is available.

279
00:17:29,392 --> 00:17:32,638
So I have one API call. The first service is

280
00:17:32,644 --> 00:17:35,934
going to trigger an external service and then do some validation there.

281
00:17:36,052 --> 00:17:41,374
Now if we check the other service, you can see here that this

282
00:17:41,412 --> 00:17:44,766
is actually what's going on. I'm triggering an endpoint and

283
00:17:44,788 --> 00:17:48,434
I'm passing in the book id and I'm checking if it's available

284
00:17:48,552 --> 00:17:52,034
or not. So this is the external API and in

285
00:17:52,072 --> 00:17:55,318
traditional testing I really don't know what's happening here. There's no real way

286
00:17:55,404 --> 00:17:59,560
figuring out if this entire transaction is correct or not.

287
00:18:01,450 --> 00:18:05,874
And then obviously inside of the availability I'm adding

288
00:18:05,922 --> 00:18:09,226
in my tracer, I'm adding in my spans and I'm checking here.

289
00:18:09,328 --> 00:18:12,762
Yes, I want to makes sure that the book that's available

290
00:18:12,896 --> 00:18:16,774
is added to my span of this distributed

291
00:18:16,822 --> 00:18:20,794
trace. And now I'm going to know exactly what's happening in the external

292
00:18:20,842 --> 00:18:24,538
service that I'm actually not triggering myself, it's getting triggered

293
00:18:24,554 --> 00:18:27,600
from inside of the books service itself.

294
00:18:29,490 --> 00:18:32,834
Now the way the is book available works, I'm just getting

295
00:18:32,872 --> 00:18:37,186
some stock, and based on the stock, if it's zero

296
00:18:37,368 --> 00:18:43,106
then it's going to fail the

297
00:18:43,128 --> 00:18:46,482
test itself. So the assertions itself is going to look like this.

298
00:18:46,536 --> 00:18:50,306
So I have my assertions from the previous example. I have

299
00:18:50,328 --> 00:18:53,574
my span duration, I have my books list count, but I also have this

300
00:18:53,612 --> 00:18:57,014
at the bottom where I'm checking the availability and I want to make sure all

301
00:18:57,052 --> 00:19:00,326
of these checks, so this is going to be three checks because I have three

302
00:19:00,348 --> 00:19:03,626
books, all of these checks need to be equal to true. So if one of

303
00:19:03,648 --> 00:19:06,490
my books is not in stock, I want the test to fail.

304
00:19:07,470 --> 00:19:10,826
And the key point here is at the bottom where you see the attribute is

305
00:19:10,848 --> 00:19:14,266
available equal to true. If I run this test it

306
00:19:14,288 --> 00:19:17,514
is going to fail because you saw one of the books wasn't in stock,

307
00:19:17,562 --> 00:19:21,610
it was equal to zero. So obviously this test will fail. So here I'm validating

308
00:19:21,690 --> 00:19:25,170
the entire transaction of an HTTP request,

309
00:19:25,510 --> 00:19:29,362
even though this test in a traditional test would have returned 200

310
00:19:29,416 --> 00:19:32,878
and that would be fine. And in the UI

311
00:19:32,974 --> 00:19:37,126
visually you'll see that as well. Yeah, you can see that it's passing all

312
00:19:37,148 --> 00:19:40,578
fine by checking the availability API. So it's

313
00:19:40,594 --> 00:19:44,326
triggering the availability API just fine. But if

314
00:19:44,348 --> 00:19:48,360
it's checking the book itself inside of the span inside of this service,

315
00:19:48,730 --> 00:19:52,182
it's going to say nope, the value it got back was false,

316
00:19:52,326 --> 00:19:55,882
this particular span is returning false, meaning this particular book

317
00:19:55,936 --> 00:19:59,306
is not in stock. It's a very very powerful thing where

318
00:19:59,328 --> 00:20:01,950
you can test every single part of the transaction.

319
00:20:03,810 --> 00:20:07,246
And what's cool here is that this works with any distributed system as

320
00:20:07,268 --> 00:20:10,720
long as you have open telemetry instrumentation in your services.

321
00:20:11,970 --> 00:20:15,194
Now this is what the traditional setup

322
00:20:15,242 --> 00:20:18,878
would look like where you have your app with your open telemetry instrumentation.

323
00:20:18,974 --> 00:20:22,926
It's sending traces to your open telemetry collector from the collector you're

324
00:20:22,958 --> 00:20:26,306
sending to the trace data store, which is Yeager open search tempo,

325
00:20:26,338 --> 00:20:29,142
or whatever trace data store you're using.

326
00:20:29,276 --> 00:20:33,400
Now the way it functions with trace test is

327
00:20:33,770 --> 00:20:37,430
pretty similar. It hooks into your data store

328
00:20:37,500 --> 00:20:41,066
and it triggers your app with HTTP or

329
00:20:41,088 --> 00:20:44,298
GrPC requests. So it just triggers the API, fetches the

330
00:20:44,304 --> 00:20:47,914
response, gets the trace data, and then runs assertions based on that

331
00:20:47,952 --> 00:20:51,518
trace data. So it's just another service

332
00:20:51,684 --> 00:20:55,658
alongside your existing open telemetry and observability

333
00:20:55,754 --> 00:20:58,926
setup. To install it you can use

334
00:20:58,948 --> 00:21:02,898
a CLI and then from there you install the server. That's just a container that

335
00:21:02,904 --> 00:21:05,010
runs inside of your infrastructure.

336
00:21:06,230 --> 00:21:09,922
Super, super simple one line command, install one line

337
00:21:09,976 --> 00:21:14,526
to install the server and get set up running supported

338
00:21:14,558 --> 00:21:18,038
out of the box for docker compose and kubernetes. And then

339
00:21:18,124 --> 00:21:21,560
what I think is incredibly cool is that the way you connect data store,

340
00:21:22,810 --> 00:21:26,914
you can either connect directly through open telemetry,

341
00:21:26,962 --> 00:21:30,954
so funnel all of the traces you get from open telemetry collector into

342
00:21:31,072 --> 00:21:35,370
trace test. Or you can use a trace data store like Yeager.

343
00:21:36,350 --> 00:21:39,818
Now to wrap everything up, let's just run through

344
00:21:39,904 --> 00:21:42,810
what we learned. First and foremost,

345
00:21:43,150 --> 00:21:45,600
observability driven development is awesome.

346
00:21:47,410 --> 00:21:51,166
Why? It's awesome because you don't have any mocking. You can test against real data

347
00:21:51,268 --> 00:21:54,826
and you have no more black boxes. You know exactly what's happening in your tests,

348
00:21:54,858 --> 00:21:57,906
you know exactly what your system looks like. You don't have to ask anybody in

349
00:21:57,928 --> 00:22:01,982
your team. So what was happening with that one service? You have the entire layout

350
00:22:02,046 --> 00:22:06,420
and you can run tests from that. You know exactly what's happening

351
00:22:06,890 --> 00:22:10,306
and that's a big, big deal. So from there, because you know what's

352
00:22:10,338 --> 00:22:13,030
happening, you can assert every step of that transaction.

353
00:22:14,650 --> 00:22:18,382
Cool. Let's just do a quick recap. First and foremost,

354
00:22:18,466 --> 00:22:22,220
these three things I really want you to take away.

355
00:22:23,150 --> 00:22:26,554
First and foremost, testing on the back end is hard. It is

356
00:22:26,592 --> 00:22:30,230
very hard. Testing distributed systems is even harder.

357
00:22:30,390 --> 00:22:34,078
And that's why I think the way to do it in the best way possible

358
00:22:34,164 --> 00:22:38,270
is to elevate your TDD with distributed tracing and then use

359
00:22:38,340 --> 00:22:41,866
odd as well. And that's

360
00:22:41,898 --> 00:22:45,426
it. Thank you for listening. If you have any questions,

361
00:22:45,528 --> 00:22:49,166
you can reach me at pretty much anywhere on Twitter or LinkedIn.

362
00:22:49,278 --> 00:22:52,420
Or if you want to check it out, what we're doing,

363
00:22:53,030 --> 00:22:56,500
jump over to GitHub, leave a star if you like it. If not,

364
00:22:57,430 --> 00:23:00,518
I'm not going to force you. If you want to try it out, go to

365
00:23:00,524 --> 00:23:04,054
the download page. Or if you want to read the entire blog post

366
00:23:04,092 --> 00:23:07,446
that I wrote as a tutorial for this talk, you can check

367
00:23:07,468 --> 00:23:11,478
that out as well. I'm just going to leave this short

368
00:23:11,644 --> 00:23:15,720
slide for you to join our community. If you want to join our community.

369
00:23:16,330 --> 00:23:19,586
And yeah, find me at Twitter or GitHub. That's my handle.

370
00:23:19,618 --> 00:23:22,490
You can send an email as well if you want to reach out directly.

371
00:23:22,650 --> 00:23:26,078
And that's it. Super happy to be

372
00:23:26,164 --> 00:23:29,546
to have been with you today at Conf 42 observability

373
00:23:29,658 --> 00:23:31,758
and yeah, see you next time.

