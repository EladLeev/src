1
00:01:54,490 --> 00:01:58,702
There. I'm John Peck. I've been a software developer for about 25

2
00:01:58,756 --> 00:02:02,346
years and now work in enterprise advocacy at GitHub.

3
00:02:02,458 --> 00:02:06,054
And that means that I get to spend a decent amount of each week speaking

4
00:02:06,092 --> 00:02:09,222
to some of the largest companies in the world about

5
00:02:09,276 --> 00:02:12,470
all their software development problems. And security,

6
00:02:12,620 --> 00:02:16,178
as you can imagine, is one of their biggest concerns.

7
00:02:16,274 --> 00:02:19,638
But before I get into some of their troubles,

8
00:02:19,734 --> 00:02:21,820
you might find yourself asking,

9
00:02:23,150 --> 00:02:25,660
what does GitHub know about security?

10
00:02:26,110 --> 00:02:30,118
Well, as the largest developer platform on the planet,

11
00:02:30,214 --> 00:02:33,338
we house millions of public projects,

12
00:02:33,434 --> 00:02:37,246
but also an immense number of private ones as

13
00:02:37,268 --> 00:02:40,654
well. In fact, 90% of the Fortune 100 trust

14
00:02:40,692 --> 00:02:43,954
us to manage and secure their code for them.

15
00:02:44,072 --> 00:02:47,566
So as we've expanded GitHub to include all parts

16
00:02:47,598 --> 00:02:51,006
of the development pipeline, from project planning to developer

17
00:02:51,038 --> 00:02:54,126
collaboration, to cloud ides and AI

18
00:02:54,158 --> 00:02:57,878
pair programming, we've also woven application security

19
00:02:57,964 --> 00:03:01,366
right into that framework. This helps everyone from individual

20
00:03:01,468 --> 00:03:04,802
open source developers to the largest enterprises,

21
00:03:04,946 --> 00:03:08,374
know that their projects are secure from the day they are first

22
00:03:08,412 --> 00:03:12,170
streamed up all the way to when they go out into production.

23
00:03:12,990 --> 00:03:16,710
So why is it so important to securing

24
00:03:16,790 --> 00:03:20,266
our code from day one? First, let's take a

25
00:03:20,288 --> 00:03:23,694
look at the state of application security today, and where

26
00:03:23,732 --> 00:03:27,614
the industry has been headed. If we look back over the last four

27
00:03:27,652 --> 00:03:31,726
to six years of application development, even today we see

28
00:03:31,828 --> 00:03:36,050
a disturbing trend. The number of vulnerabilities continues to

29
00:03:36,120 --> 00:03:40,034
increase linearly with the number of lines of code in

30
00:03:40,072 --> 00:03:42,722
any given project. In other words,

31
00:03:42,856 --> 00:03:46,754
every line of code written today still has the same risk

32
00:03:46,802 --> 00:03:50,630
of introducing a vulnerability as it did in 2016.

33
00:03:51,210 --> 00:03:54,438
More code, more problems. And by

34
00:03:54,444 --> 00:03:58,026
the way, flaws in applications are consistently the

35
00:03:58,048 --> 00:04:01,882
number one attack vector for breaches. So yes,

36
00:04:02,016 --> 00:04:05,622
we need to keep doing all the other securing stuff, network protection,

37
00:04:05,686 --> 00:04:08,982
identity verification, all of that. But the biggest

38
00:04:09,046 --> 00:04:13,034
risk is the code itself. And that's

39
00:04:13,082 --> 00:04:16,574
tough, because in most projects, 80% of the

40
00:04:16,612 --> 00:04:20,606
code comes from outside of your own development team, outside of

41
00:04:20,628 --> 00:04:24,146
the company. Open source is great because it means we

42
00:04:24,248 --> 00:04:27,582
are not wasting time consistently rewriting

43
00:04:27,646 --> 00:04:31,362
the wheel. Most projects wouldn't be possible

44
00:04:31,496 --> 00:04:34,946
without open source, but at the same time, you can't control

45
00:04:35,048 --> 00:04:38,050
how these open source dependencies were created.

46
00:04:38,210 --> 00:04:41,574
You can't define their security standards or directly manage their

47
00:04:41,612 --> 00:04:44,902
policies, so you're going to have to figure out how to secure them

48
00:04:44,956 --> 00:04:48,714
at the point of ingestion, when they're incorporated into

49
00:04:48,752 --> 00:04:52,314
your own projects. And what about those developers that are

50
00:04:52,352 --> 00:04:56,166
on your team now? They're probably awesome, but chances

51
00:04:56,198 --> 00:04:59,626
are they also haven't had sufficient, if any,

52
00:04:59,728 --> 00:05:03,562
security training. Nearly half of developers haven't so

53
00:05:03,616 --> 00:05:07,162
they're going to need some help ensuring that each line they write isn't

54
00:05:07,226 --> 00:05:10,318
introducing new vulnerabilities. And we want to do that in a

55
00:05:10,324 --> 00:05:13,646
way which does not slow them down. Which brings me

56
00:05:13,668 --> 00:05:17,646
to my third point here. As companies introduces security tools,

57
00:05:17,758 --> 00:05:21,614
they often do so in a way which slows down application development

58
00:05:21,662 --> 00:05:25,266
and doesn't really do that much to improve security.

59
00:05:25,448 --> 00:05:28,706
The vast majority of companies just bolt on additional tools

60
00:05:28,738 --> 00:05:32,486
which introduce additional noise and friction into the

61
00:05:32,508 --> 00:05:36,230
development process. And this creates a war between the security team

62
00:05:36,300 --> 00:05:40,038
and the developers. Consider this common scenario. As a

63
00:05:40,044 --> 00:05:43,866
developer, I've just completed all my feature points and I've sent

64
00:05:43,888 --> 00:05:47,114
my code off to production. So I'm at the end of my

65
00:05:47,152 --> 00:05:50,298
two week sprint. I'm ready to refocus on the next set of awesome features I'm

66
00:05:50,304 --> 00:05:53,902
going to be adding to the product. But then security comes along.

67
00:05:54,036 --> 00:05:58,314
They push back with a huge code review and a ton of potential vulnerabilities

68
00:05:58,362 --> 00:06:02,154
I need to patch up. And my next sprint is just trashed.

69
00:06:02,282 --> 00:06:05,666
I won't be building those new features. Instead I'm going to be

70
00:06:05,688 --> 00:06:09,330
wasting all of that time unraveling code that I wrote two weeks ago,

71
00:06:09,480 --> 00:06:12,498
patching it up, reintegrating it all along with all

72
00:06:12,504 --> 00:06:16,166
my other teams changes, and then disappointing my

73
00:06:16,188 --> 00:06:18,840
project manager. Not so good.

74
00:06:20,650 --> 00:06:23,318
So this happens all too often,

75
00:06:23,484 --> 00:06:27,030
and it's the reason so many teams push back on security

76
00:06:27,100 --> 00:06:31,386
policies. And it's why so many companies end up releasing vulnerabilities code.

77
00:06:31,488 --> 00:06:35,302
Because in fact, when they hit that decision point, either release

78
00:06:35,366 --> 00:06:38,742
a product with potential vulnerabilities or halt

79
00:06:38,806 --> 00:06:42,606
the presses and patch it up instead. Half of companies

80
00:06:42,708 --> 00:06:45,710
choose more or less to go ahead and release.

81
00:06:46,050 --> 00:06:49,418
There's customers waiting on those new features and it's just not worth disappointing

82
00:06:49,434 --> 00:06:52,110
them. That's a logical business decision,

83
00:06:52,450 --> 00:06:55,874
but it's risky and it's a potentially very expensive one,

84
00:06:55,912 --> 00:06:59,826
because the longer you wait to secure a vulnerability, the more painful it

85
00:06:59,848 --> 00:07:03,106
is. If you can identify and patch a vulnerability as

86
00:07:03,128 --> 00:07:06,498
it's being coded, that's quite cheap. It's basically the developer's time to

87
00:07:06,504 --> 00:07:10,482
get the notification, change a few lines of code, but it costs

88
00:07:10,546 --> 00:07:13,730
ten times as much if that vulnerabilities gets as far as QA,

89
00:07:13,810 --> 00:07:17,926
100 times as much as if it goes out into production. Because now

90
00:07:17,948 --> 00:07:22,470
you're rolling back old versions of the product, you're notifying customers, you're integrating

91
00:07:22,630 --> 00:07:26,170
months old code with new patches. And if somebody

92
00:07:26,240 --> 00:07:29,546
discovers and exploits that vulnerability that made it to

93
00:07:29,568 --> 00:07:32,894
production, well, that's the sort of thing that brings down

94
00:07:32,932 --> 00:07:36,958
entire companies, it bankrupts them or destroys customer trust

95
00:07:37,044 --> 00:07:40,734
for decades to come. So how

96
00:07:40,772 --> 00:07:44,866
can we go about shifting left? How can we avoid this pain and

97
00:07:44,888 --> 00:07:48,590
costs and delays, and ensure vulnerabilities never progress

98
00:07:48,670 --> 00:07:51,250
beyond that development stage?

99
00:07:52,950 --> 00:07:56,680
Put that way, the answer seems pretty obvious. We need to build

100
00:07:57,130 --> 00:08:01,046
the power to identify and fix security flaws right

101
00:08:01,068 --> 00:08:04,854
into the hands of the developer. We call this developer first

102
00:08:04,972 --> 00:08:09,260
security. And to do it properly, you need a couple of key things.

103
00:08:09,950 --> 00:08:13,130
First, you need to be able to see,

104
00:08:13,200 --> 00:08:16,582
to observe a big number of projects, to deeply

105
00:08:16,646 --> 00:08:19,818
understand not just their security state,

106
00:08:19,984 --> 00:08:24,218
but also how developers interact with these projects,

107
00:08:24,394 --> 00:08:28,474
where it's effective for them to receive an action on securing related

108
00:08:28,522 --> 00:08:32,014
information, what kind of nudges they need, what level of detail they

109
00:08:32,052 --> 00:08:35,842
need. Second, you need to already be

110
00:08:35,976 --> 00:08:39,346
the key tool that most developers work with day in and

111
00:08:39,368 --> 00:08:43,070
day out as they build their projects, so that you fit naturally

112
00:08:43,150 --> 00:08:46,814
into their daily workflow, instead of being yet another bolt

113
00:08:46,862 --> 00:08:50,694
on tool that they have to figure out how to work with, or more often,

114
00:08:50,812 --> 00:08:54,610
how to ignore. So we as GitHub,

115
00:08:54,690 --> 00:08:58,454
we saw not just an opportunity, but really a responsibility to

116
00:08:58,492 --> 00:09:02,598
help developers find out about and fix security flaws

117
00:09:02,694 --> 00:09:06,122
right as they were being created. When developers start

118
00:09:06,176 --> 00:09:09,914
building a new set of features, see, they create a new branch of the code

119
00:09:09,952 --> 00:09:13,294
base, a variation that isn't part of the final product yet.

120
00:09:13,332 --> 00:09:17,086
Right, but it soon will be. It's our responsibility to

121
00:09:17,108 --> 00:09:21,486
make sure that before that branch ever gets merged back into the main code,

122
00:09:21,668 --> 00:09:25,714
it's vulnerability free. We do that in

123
00:09:25,752 --> 00:09:29,886
three key ways. First, we scan

124
00:09:29,998 --> 00:09:33,374
every single change to the list of dependencies

125
00:09:33,422 --> 00:09:36,834
they're bringing in, pretty much regardless of what language

126
00:09:36,882 --> 00:09:40,886
they're working in. So whether a developer adds a risky node module to

127
00:09:40,908 --> 00:09:44,706
the manifest or uses an insecure version of PHP in their docker

128
00:09:44,738 --> 00:09:48,454
file, we immediately notice and we prompt

129
00:09:48,502 --> 00:09:52,582
them to fix it. This is impressively effective.

130
00:09:52,646 --> 00:09:56,874
We found that dependency based vulnerabilities are fixed four

131
00:09:56,912 --> 00:10:00,206
and a half times faster than average when

132
00:10:00,228 --> 00:10:03,150
you use this approach. Now,

133
00:10:03,220 --> 00:10:06,654
dependency scanning isn't magic, so what makes that

134
00:10:06,772 --> 00:10:10,240
improvement so strong? Three key things.

135
00:10:10,690 --> 00:10:14,526
One, the dependency update notifications come

136
00:10:14,548 --> 00:10:17,714
from a tool that they already know and trust, and they're used to

137
00:10:17,752 --> 00:10:20,978
responding to their DevOps tool itself, in this case

138
00:10:21,064 --> 00:10:24,526
GitHub. Two, the notifications

139
00:10:24,558 --> 00:10:28,214
are immediately actionable. They're not just telling the

140
00:10:28,252 --> 00:10:32,098
developer what's wrong, they're actually surfacing as a pull request,

141
00:10:32,194 --> 00:10:35,814
which means the developer only has to click a single button

142
00:10:35,932 --> 00:10:39,718
to fix the vulnerability. And then

143
00:10:39,804 --> 00:10:43,194
three, even then, some developers we know

144
00:10:43,232 --> 00:10:46,810
may be hesitant to click that button to merge the fix because

145
00:10:46,880 --> 00:10:51,062
they're wondering how much cleanup they're going to have to do. Does this update

146
00:10:51,206 --> 00:10:55,402
change function signatures or change the behavior of the package

147
00:10:55,466 --> 00:10:59,402
that we're upgrading? Am I going to have to spend a few hours updating

148
00:10:59,466 --> 00:11:02,142
my code to accommodate that change?

149
00:11:02,276 --> 00:11:05,454
So to address that, we don't just give them the minimum

150
00:11:05,502 --> 00:11:08,914
possible change in order to get them securing. We do that, of course,

151
00:11:09,032 --> 00:11:12,674
but we also provide a compatibility score which

152
00:11:12,712 --> 00:11:16,020
lets them know how likely this is to just work

153
00:11:16,390 --> 00:11:20,786
with no further changes. This is something that GitHub is really uniquely positioned

154
00:11:20,818 --> 00:11:24,498
to do because we've got over 200 million projects

155
00:11:24,514 --> 00:11:27,834
out there on GitHub.com, and many of them have given us

156
00:11:27,872 --> 00:11:31,098
permission to see as they make changes

157
00:11:31,184 --> 00:11:35,050
in security updates, how many of their unit tests keep on

158
00:11:35,120 --> 00:11:39,622
passing. We can use that information to calculate

159
00:11:39,686 --> 00:11:43,134
a compatibility score and then put

160
00:11:43,172 --> 00:11:47,246
that right into the update notification when a

161
00:11:47,268 --> 00:11:49,998
security patch is required on your own project,

162
00:11:50,164 --> 00:11:53,566
that gives developers the confidence when that compatibility score

163
00:11:53,598 --> 00:11:57,474
is high to just go ahead and merge that security update right

164
00:11:57,512 --> 00:12:01,074
away. That greatly increases compliance and helps keep

165
00:12:01,112 --> 00:12:02,690
your projects secure.

166
00:12:04,150 --> 00:12:08,134
All right, now let's move on to another type of check.

167
00:12:08,332 --> 00:12:12,406
GitHub scans every single push for security

168
00:12:12,508 --> 00:12:16,118
tokens. Now, I know, I know, when I say security tokens, you're going to say,

169
00:12:16,204 --> 00:12:20,166
well, my company already has key managers and secret stores,

170
00:12:20,278 --> 00:12:23,306
so no piece of raw code ever should have a

171
00:12:23,328 --> 00:12:27,286
security token embedded directly into it, right? But we're

172
00:12:27,318 --> 00:12:30,970
all human, we've all done it. At some point,

173
00:12:31,040 --> 00:12:34,282
using the secret manager was just too slow or too annoying,

174
00:12:34,346 --> 00:12:37,694
and we directly pasted a security token right into our code

175
00:12:37,732 --> 00:12:41,454
that we're working on thinking, okay, I'm coding to remove it

176
00:12:41,492 --> 00:12:45,326
before I commit. But then we forget this

177
00:12:45,348 --> 00:12:49,246
is a common mistake that almost all developers make, and GitHub

178
00:12:49,278 --> 00:12:52,594
doesn't ever want those tokens to get compiled into an end

179
00:12:52,632 --> 00:12:55,698
product where they could be leaked out into the world.

180
00:12:55,864 --> 00:12:59,654
So it prevents this by blocking these tokens from

181
00:12:59,692 --> 00:13:02,726
ever getting off of the individual developer's box.

182
00:13:02,908 --> 00:13:06,534
If a token is dropped into code and then the developer attempts to

183
00:13:06,572 --> 00:13:10,418
push that code up to GitHub, we immediately block it.

184
00:13:10,524 --> 00:13:14,534
And then we let the developer know that they've either got to remove

185
00:13:14,582 --> 00:13:17,926
that token from their code or they need to get it added

186
00:13:17,958 --> 00:13:22,362
to an allow list before we will allow that code to be submitted.

187
00:13:22,506 --> 00:13:26,014
And of course we also scan all the historic code as

188
00:13:26,052 --> 00:13:26,640
well.

189
00:13:30,370 --> 00:13:34,194
So in secret scanning, one of the biggest problems is

190
00:13:34,232 --> 00:13:38,002
that the false positives can get really high, right if you

191
00:13:38,056 --> 00:13:41,234
misidentify strings which aren't secrets, like,

192
00:13:41,352 --> 00:13:45,294
for example, blocking a developer from putting a grid

193
00:13:45,422 --> 00:13:48,886
or a hash seed or some other random character string into your

194
00:13:48,908 --> 00:13:52,726
code. Right. When this happens and we block those, even though

195
00:13:52,748 --> 00:13:56,230
they're not really secrets, developers just can't do their work.

196
00:13:56,300 --> 00:13:59,398
So adding end up turning off secret scanning entirely,

197
00:13:59,494 --> 00:14:02,902
it's pointless, right? So what we chose

198
00:14:02,966 --> 00:14:06,022
as GitHub was not to just look for eccentricity,

199
00:14:06,086 --> 00:14:08,986
randomness in those character strings. Instead,

200
00:14:09,168 --> 00:14:12,446
we actually worked directly with dozens of

201
00:14:12,468 --> 00:14:15,802
different secret providers and build extremely precise

202
00:14:15,866 --> 00:14:19,342
pattern matches for each of their individual types of

203
00:14:19,396 --> 00:14:23,374
tokens. What does that do? It brings that false positive rate

204
00:14:23,492 --> 00:14:26,754
way down, and it brings the effectiveness way up

205
00:14:26,792 --> 00:14:30,226
because our scanning is trustworthy. Oh, and by the way, if you

206
00:14:30,248 --> 00:14:33,842
want to scan for your own custom secret patterns, you can test and add

207
00:14:33,896 --> 00:14:37,460
these right inside of the tool as well.

208
00:14:38,330 --> 00:14:41,654
All right, now, there's one last type of check

209
00:14:41,772 --> 00:14:45,862
that we think is critical. But before I go into detail on that,

210
00:14:45,996 --> 00:14:49,674
I want to tell you a little story. You see,

211
00:14:49,792 --> 00:14:53,734
in 2011, NASA began one of its early Mars

212
00:14:53,782 --> 00:14:57,146
exploration programs, Curiosity. This was a two

213
00:14:57,168 --> 00:15:00,754
and a half billion dollar project and promised gigantic

214
00:15:00,822 --> 00:15:04,510
advances for science. But after the mission had already

215
00:15:04,580 --> 00:15:07,822
launched, they kept running a manual code

216
00:15:07,876 --> 00:15:11,242
review at NASA, and they discovered that their developers

217
00:15:11,306 --> 00:15:15,262
had made a critical error which could prevent the rover's

218
00:15:15,326 --> 00:15:17,502
parachutes from deploying,

219
00:15:17,646 --> 00:15:20,130
literally crashing the program.

220
00:15:20,280 --> 00:15:24,162
Right. Now, fortunately, they found this bug while

221
00:15:24,216 --> 00:15:28,118
the rocket was still in flight. And I didn't know

222
00:15:28,284 --> 00:15:31,574
they heres able to do this until I heard about this.

223
00:15:31,772 --> 00:15:35,270
They actually were able to send a patch

224
00:15:35,610 --> 00:15:39,114
over the air, well over space to the

225
00:15:39,152 --> 00:15:42,662
rocket and have it update the code on that rover

226
00:15:42,726 --> 00:15:46,678
before it ever reached Mars. This saved the mission,

227
00:15:46,774 --> 00:15:49,020
saved a two and a half billion dollar project,

228
00:15:49,390 --> 00:15:52,894
and security tools that they used to do

229
00:15:52,932 --> 00:15:57,166
that, the ones that are now part of GitHub, those security

230
00:15:57,268 --> 00:16:01,690
tools they used, automatically found and fixed 30 different variations

231
00:16:01,770 --> 00:16:05,218
of that same flaw that they hadn't found in the

232
00:16:05,224 --> 00:16:08,754
manual review, and also patched those with the over

233
00:16:08,792 --> 00:16:10,290
the air update.

234
00:16:12,230 --> 00:16:16,882
What, you might ask, is this magic tool? It's something called codeqL.

235
00:16:17,026 --> 00:16:20,726
It's a language which lets GitHub look not just at

236
00:16:20,748 --> 00:16:24,422
the actual text, the actual structure of the code, but at the

237
00:16:24,476 --> 00:16:28,214
meaning of the code. It examines new code your

238
00:16:28,252 --> 00:16:32,342
developers just wrote, compiles it into something that could be executed

239
00:16:32,406 --> 00:16:36,282
but isn't, and as well as all the components they've added in.

240
00:16:36,336 --> 00:16:40,022
And it lets us say things like, does there exist

241
00:16:40,086 --> 00:16:43,418
anywhere in this code base a circular object reference

242
00:16:43,594 --> 00:16:47,482
or a place where text comes in through an API

243
00:16:47,546 --> 00:16:50,926
or a form or some other entry point, which then goes through some

244
00:16:50,948 --> 00:16:55,150
execution path and eventually hits a database without being sanitized.

245
00:16:55,230 --> 00:16:58,622
Which of course would allow an attacker to penetrate the database.

246
00:16:58,686 --> 00:17:02,814
Right? There's over 2000 different code

247
00:17:02,862 --> 00:17:06,322
queries like this which ship with GitHub

248
00:17:06,386 --> 00:17:10,662
code scanning, and they cover the whole OASP top ten and

249
00:17:10,716 --> 00:17:14,680
beyond. When you

250
00:17:15,450 --> 00:17:19,238
put your code in, GitHub code scanning

251
00:17:19,414 --> 00:17:23,114
compiles that code and runs these tests at every pull

252
00:17:23,152 --> 00:17:26,486
request, tracing through the actual execution paths

253
00:17:26,518 --> 00:17:30,574
of your program and analyzing them for bad patterns and then

254
00:17:30,612 --> 00:17:35,150
alerting the developer and if needed, blocking that pull request.

255
00:17:35,730 --> 00:17:39,406
So with all of these in place,

256
00:17:39,588 --> 00:17:42,974
your secret scanning your dependency, scanning your code,

257
00:17:43,012 --> 00:17:46,834
QL code scanning, developers know that the code they

258
00:17:46,872 --> 00:17:50,862
bring in, as well as the code they've just written, all of these are secure

259
00:17:51,006 --> 00:17:54,542
long before it approaches production. They don't have to fear

260
00:17:54,606 --> 00:17:58,054
facing some mile long vulnerability list two weeks

261
00:17:58,092 --> 00:18:01,906
after they've finished coding. By the time they've finished developing

262
00:18:01,938 --> 00:18:05,634
the particular feature they're working on, the code is already secured

263
00:18:05,762 --> 00:18:07,240
and ready to go.

264
00:18:09,550 --> 00:18:13,178
That it does wonders for your development pipeline. It means that

265
00:18:13,184 --> 00:18:16,406
you spend less time stopping production,

266
00:18:16,518 --> 00:18:20,674
more time building features. Ultimately, it means that you ship features

267
00:18:20,742 --> 00:18:24,638
thousands of times faster out to your customers, all the

268
00:18:24,644 --> 00:18:28,046
while remaining secure. So what I encourage you to

269
00:18:28,068 --> 00:18:31,438
think about is how right now you are going about

270
00:18:31,524 --> 00:18:34,898
implementing a developer first approach to your security,

271
00:18:35,064 --> 00:18:38,194
and how you can guarantee that your

272
00:18:38,232 --> 00:18:41,842
code is vulnerabilities free before it ever reaches that main

273
00:18:41,896 --> 00:18:45,382
branch of code, so that your developers don't have to be at

274
00:18:45,436 --> 00:18:47,720
odds with the security team.

275
00:18:50,570 --> 00:18:54,498
And of course, if you want to learn more about GitHub's

276
00:18:54,514 --> 00:18:57,800
general approach to security, just head on over to

277
00:18:58,730 --> 00:19:02,626
slash security. There you can read and go into depth about everything I've

278
00:19:02,658 --> 00:19:06,674
mentioned here, plus a whole ton of other features, things like enterprise

279
00:19:06,722 --> 00:19:10,426
level security overview dashboards, or immutable audit logs,

280
00:19:10,458 --> 00:19:13,966
or our security research lab. Thank you so much for

281
00:19:13,988 --> 00:19:17,358
spending this time with me today, and I hope you enjoy the rest of the

282
00:19:17,364 --> 00:19:18,186
conference.

