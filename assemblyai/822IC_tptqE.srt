1
00:00:30,850 --> 00:00:34,694
Hello everyone. Welcome to the session on SRE enablement through

2
00:00:34,732 --> 00:00:39,414
Chaos Engineering Conf. 42 SRE 2023.

3
00:00:39,612 --> 00:00:43,234
I am Chandra Dikshit. I am Sre architect

4
00:00:43,282 --> 00:00:46,566
at HCL, HCL, HCL, HCL Cloud Native Labs,

5
00:00:46,588 --> 00:00:50,202
London. In this session, I'll be breaking you through our journey

6
00:00:50,306 --> 00:00:53,422
of chaos Engineering through which we

7
00:00:53,476 --> 00:00:56,990
have enabled SRE upskilling and

8
00:00:57,060 --> 00:01:00,554
SRE practice enablement into various

9
00:01:00,602 --> 00:01:03,986
delivery teams and clients here at HCL Tech. So first

10
00:01:04,008 --> 00:01:07,314
of all, let me take you through what we

11
00:01:07,352 --> 00:01:10,706
do here. HCL cloud native labs labs so

12
00:01:10,808 --> 00:01:14,642
we are cloud native labs thought

13
00:01:14,696 --> 00:01:18,982
leaders of cloud native programs and strategies along

14
00:01:19,036 --> 00:01:21,720
with cloud native Engineering here at HCL Tech.

15
00:01:22,410 --> 00:01:25,094
We are located in three locations in US,

16
00:01:25,212 --> 00:01:28,442
UK and in India. We work

17
00:01:28,496 --> 00:01:31,866
across four key areas as you can see

18
00:01:31,888 --> 00:01:35,546
on the screen, strategy and direction, art of

19
00:01:35,568 --> 00:01:40,170
the possible adoption and enablement and cultural transformation.

20
00:01:40,930 --> 00:01:44,720
You can see that the range of

21
00:01:45,490 --> 00:01:49,758
areas, range of practices that we work across

22
00:01:49,924 --> 00:01:53,502
is complete spectrum of cloud native

23
00:01:53,566 --> 00:01:57,010
engineering. We start from a strategy

24
00:01:57,510 --> 00:02:01,262
over to building the state of mind workforce

25
00:02:01,326 --> 00:02:05,042
upskilling modernization to the

26
00:02:05,096 --> 00:02:08,566
showcase of what new is coming up in

27
00:02:08,588 --> 00:02:12,386
the ecosystem, what new is coming up in the industry from hyperscalers

28
00:02:12,418 --> 00:02:15,990
and how that can be adapted to our clients

29
00:02:17,390 --> 00:02:21,770
ecosystem, our clients specific scenarios.

30
00:02:23,150 --> 00:02:27,862
We are very skilled team of engineers,

31
00:02:28,006 --> 00:02:30,402
architects, strategists,

32
00:02:30,486 --> 00:02:35,646
technologists and as

33
00:02:35,668 --> 00:02:38,846
I said, we work across the board for anything which is

34
00:02:38,868 --> 00:02:42,430
cloud native and therefore we interact with a lot of clients.

35
00:02:43,350 --> 00:02:46,766
One area where I am specifically inclined

36
00:02:46,798 --> 00:02:50,926
towards is the cultural transformation part workforce

37
00:02:50,958 --> 00:02:54,434
modernization, cloud native state of mind part,

38
00:02:54,632 --> 00:02:59,042
and specifically within there the DevOps and SRE culture

39
00:02:59,106 --> 00:03:03,346
building. I'm part of a unit where we upskill

40
00:03:03,378 --> 00:03:07,918
our colleagues into SRE practices, DevOps practices,

41
00:03:08,114 --> 00:03:12,154
and a part of that. Very key part of that has

42
00:03:12,192 --> 00:03:16,090
been chaos engineering. And we'll expand on that in a bit.

43
00:03:16,240 --> 00:03:19,626
So first, what services we provide out

44
00:03:19,648 --> 00:03:23,518
of cloud native labs, what SRE services, particularly we provide

45
00:03:23,604 --> 00:03:27,566
out of cloud native labs. So our SRE services

46
00:03:27,748 --> 00:03:31,322
fall under three categories. SRE enablement

47
00:03:31,386 --> 00:03:35,310
services under which we do skill assessment

48
00:03:35,390 --> 00:03:39,810
of a team of a client, of a business unit.

49
00:03:40,870 --> 00:03:44,450
Then we do enablement. So we design programs,

50
00:03:44,890 --> 00:03:49,430
we design custom learning journeys, we run certification programs

51
00:03:49,850 --> 00:03:53,462
all through providing end to end management from

52
00:03:53,596 --> 00:03:57,494
the labs. We also do SRE consulting services quite

53
00:03:57,532 --> 00:04:01,622
a bit to our clients, wherein we go into their environments,

54
00:04:01,686 --> 00:04:05,686
we assess their environment, we assess their tool sets, we assess

55
00:04:05,718 --> 00:04:09,574
their maturity at which they are running into their operations, their development

56
00:04:09,622 --> 00:04:13,274
areas, and how SRE inclined, how mature

57
00:04:13,322 --> 00:04:16,670
their processes are in terms of SRE maturity

58
00:04:17,090 --> 00:04:21,134
scale or index. And then we work with them to design programs to

59
00:04:21,172 --> 00:04:25,294
enable practices of SRE, like chaos engineering, like SLI

60
00:04:25,342 --> 00:04:29,202
slos, like observability enhancements, et cetera. And third,

61
00:04:29,256 --> 00:04:32,754
if there's maturity assessment services that

62
00:04:32,792 --> 00:04:36,034
we also do, which is purely

63
00:04:36,082 --> 00:04:39,400
basically consulting service, going in,

64
00:04:40,010 --> 00:04:42,840
looking at the state,

65
00:04:43,450 --> 00:04:47,826
probably doing third party assessment

66
00:04:47,938 --> 00:04:51,158
of architecture automation setups, SRE setups,

67
00:04:51,174 --> 00:04:54,220
et cetera, and then maybe doing some coaching as well,

68
00:04:54,910 --> 00:04:58,298
just to guide them onto the right path. In doing so,

69
00:04:58,384 --> 00:05:01,690
we do work with a lot of customers. So far,

70
00:05:01,760 --> 00:05:05,278
I think since we started, we have interacted with 100 plus customers,

71
00:05:05,444 --> 00:05:09,102
particularly in the SRE space and from the lab.

72
00:05:09,156 --> 00:05:12,834
Since we started this program, I think two years back, now we have

73
00:05:12,872 --> 00:05:16,718
enablement more than 1000 SRE who are certified

74
00:05:16,814 --> 00:05:19,922
from the certified certification program that we run here

75
00:05:19,976 --> 00:05:23,358
at labs. So it's done quite at an extensive

76
00:05:23,454 --> 00:05:27,234
level, and it has become now the de facto

77
00:05:27,282 --> 00:05:31,254
standard of SRE enablement across

78
00:05:31,452 --> 00:05:35,794
our organisation. So coming to chaos engineering,

79
00:05:35,842 --> 00:05:40,006
then, what has been our journey with chaos engineering?

80
00:05:40,118 --> 00:05:43,306
Chaos Engineering has been a niche, up and

81
00:05:43,328 --> 00:05:46,726
coming kind of practice.

82
00:05:46,918 --> 00:05:51,034
It started, I think, quite a while back now at Netflix when

83
00:05:51,072 --> 00:05:54,654
I think they came up around 2016 17 and

84
00:05:54,692 --> 00:05:58,506
explained what they do with the tools like chaos monkey.

85
00:05:58,698 --> 00:06:02,438
And since then, it has been developed into more methodical,

86
00:06:02,554 --> 00:06:06,110
more customized kind of a practice.

87
00:06:06,270 --> 00:06:10,674
So we started with the practice around August 21.

88
00:06:10,712 --> 00:06:14,986
So we started exploring products, we started looking at practice,

89
00:06:15,038 --> 00:06:18,466
the different concepts and aspects,

90
00:06:18,658 --> 00:06:22,406
the value that it brings, and basically what

91
00:06:22,428 --> 00:06:26,146
SRE, the art of the possibilities around chaos practice,

92
00:06:26,258 --> 00:06:29,820
how we can benefit, what value we can bring to our customers.

93
00:06:31,150 --> 00:06:35,066
We started from there, we started utilizing a

94
00:06:35,088 --> 00:06:38,854
few tools in a smaller capacity, doing basic

95
00:06:38,902 --> 00:06:42,382
kind of experiments. And I think

96
00:06:42,516 --> 00:06:46,160
by end of 2021,

97
00:06:47,010 --> 00:06:50,926
we were doing experiments which were like, which can be called

98
00:06:51,028 --> 00:06:54,270
simple chaos experiments, like pod delete, node shutdown.

99
00:06:54,430 --> 00:06:59,074
But we also started doing them in a more as

100
00:06:59,112 --> 00:07:02,270
code kind of scenario. We started integrating

101
00:07:02,350 --> 00:07:06,238
them with our CI CD pipelines, et cetera.

102
00:07:06,334 --> 00:07:09,606
So we were also doing chaos engineering, but at

103
00:07:09,628 --> 00:07:12,934
the same time, we were also looking to kind

104
00:07:12,972 --> 00:07:16,898
of automate the execution on them so that they can be attached

105
00:07:16,994 --> 00:07:19,158
to an already existing flow.

106
00:07:19,334 --> 00:07:23,286
Furthermore, startup 2022 late

107
00:07:23,318 --> 00:07:26,902
in 2021, around Christmas

108
00:07:26,966 --> 00:07:30,902
particularly, we started playing around with the

109
00:07:30,976 --> 00:07:35,210
workflow kind of scenarios where you can combine multiple experiments,

110
00:07:35,290 --> 00:07:38,910
and the intention there was that we can create something very

111
00:07:38,980 --> 00:07:43,022
close to what an actual fault in a production scenario

112
00:07:43,086 --> 00:07:47,570
can be, how close you can get to that scenario,

113
00:07:48,870 --> 00:07:52,402
and basically test your services,

114
00:07:52,536 --> 00:07:55,220
their resiliency, and then work on them.

115
00:07:57,050 --> 00:08:00,838
Finally, I think around Feb March 2022,

116
00:08:01,004 --> 00:08:04,694
we sort of included this as a standard part of

117
00:08:04,732 --> 00:08:08,598
offering that we demonstrate to our clients

118
00:08:08,694 --> 00:08:12,614
that we include into our SRE cohorts,

119
00:08:12,662 --> 00:08:15,450
our SRE enablement trainings.

120
00:08:15,870 --> 00:08:19,926
And since then we have been maturing this

121
00:08:20,048 --> 00:08:23,658
along implementing

122
00:08:23,754 --> 00:08:27,482
and exploring these in hyperscalers. Tools like Azure Chaos

123
00:08:27,546 --> 00:08:30,990
Studio, AWS fault injection.

124
00:08:31,650 --> 00:08:35,026
We've been explains obviously the

125
00:08:35,048 --> 00:08:39,342
cloud native tools, chaos Mesh, litmus chaos standalone

126
00:08:39,406 --> 00:08:42,674
tools like Gremlin. Now harness also has come

127
00:08:42,712 --> 00:08:46,258
up. So we've been exploring these tools quite a bit.

128
00:08:46,424 --> 00:08:49,766
We've been using them, building them into our client demos as

129
00:08:49,788 --> 00:08:53,190
well, and they have been received quite well.

130
00:08:53,340 --> 00:08:56,726
This is a new practice, so we had to kind of explain

131
00:08:56,828 --> 00:09:00,534
this, build some material around it to explain the

132
00:09:00,572 --> 00:09:04,054
value of these to a prospective

133
00:09:04,102 --> 00:09:07,926
client or to colleagues. But it has been well received

134
00:09:08,038 --> 00:09:12,160
and you can see from the numbers here, we've been running

135
00:09:12,690 --> 00:09:16,222
around 20 plus cohorts since then. We have done around 100 plus

136
00:09:16,276 --> 00:09:19,280
client showcases, so it has been a major part of that.

137
00:09:19,730 --> 00:09:23,130
Then how have we progressed?

138
00:09:23,210 --> 00:09:27,294
So as I was explaining a little bit in the previous slide

139
00:09:27,342 --> 00:09:31,022
as well is that we started with simple experiment.

140
00:09:31,086 --> 00:09:34,466
We wanted to try have a taste of how do

141
00:09:34,488 --> 00:09:38,918
you inject faults. We started in

142
00:09:39,004 --> 00:09:42,482
VM based scenarios, something replicating chaos

143
00:09:42,546 --> 00:09:45,862
monkey, maybe taking down certain part

144
00:09:45,916 --> 00:09:49,450
of VM based stack or data center based tag.

145
00:09:49,950 --> 00:09:54,170
Then from there we went on to kubernetes based stacks,

146
00:09:54,590 --> 00:09:57,370
cloud native stacks, taking down pods,

147
00:09:58,350 --> 00:10:00,800
blacking out particular services,

148
00:10:01,250 --> 00:10:04,622
dropping DNS, et cetera. So there was simple

149
00:10:04,676 --> 00:10:07,390
experiment and they were being manually driven.

150
00:10:08,130 --> 00:10:11,566
From there on we went into workflow based experiments which

151
00:10:11,588 --> 00:10:15,314
were more logical, like if we start

152
00:10:15,352 --> 00:10:19,186
from here and if there is like taking an

153
00:10:19,208 --> 00:10:23,122
application, if there sre five microservices dropping their

154
00:10:23,176 --> 00:10:26,934
services one by one, or deleting pods one

155
00:10:26,972 --> 00:10:31,046
by one, and seeing cyclically what is the impact and

156
00:10:31,148 --> 00:10:33,922
how well those microservices recover.

157
00:10:34,066 --> 00:10:37,518
We started thinking in teams of CI

158
00:10:37,554 --> 00:10:41,542
CD integrations, argo CD

159
00:10:41,686 --> 00:10:45,980
integrations, GitHub integrations, and basically making it more

160
00:10:46,670 --> 00:10:50,354
automated workflows, something that we can attach

161
00:10:50,422 --> 00:10:53,914
to an end of existing delivery

162
00:10:53,962 --> 00:10:57,374
workflow or deployment workflow. So that every time there

163
00:10:57,412 --> 00:11:00,826
is, from developer's point of view, from developer

164
00:11:00,858 --> 00:11:04,640
velocity point of view, that every time there is a

165
00:11:05,190 --> 00:11:08,974
deployment of a new version of a microservice or version

166
00:11:09,022 --> 00:11:10,740
of a Java kind of service,

167
00:11:13,110 --> 00:11:16,002
the flows that are designed for chaos,

168
00:11:16,066 --> 00:11:19,986
they run in production after the service has been deployed.

169
00:11:20,178 --> 00:11:22,950
And that is the resiliency of the service.

170
00:11:23,020 --> 00:11:26,280
And if that goes through,

171
00:11:27,470 --> 00:11:31,114
we just go ahead with the deployment, right. The kind

172
00:11:31,152 --> 00:11:37,334
of concepts that we have taken care while designing

173
00:11:37,382 --> 00:11:40,526
these experiments have been things like design a

174
00:11:40,548 --> 00:11:43,674
hypothesis, select a blast radius,

175
00:11:43,802 --> 00:11:47,066
then test and observe. And based on the insights,

176
00:11:47,098 --> 00:11:50,494
you basically improve your service all over again. We have

177
00:11:50,532 --> 00:11:54,318
also expanded to hyperscalers. So the kind of technical domains

178
00:11:54,334 --> 00:11:57,918
that we have covered have been hyperscalers.

179
00:11:58,094 --> 00:12:01,582
Azure aws, particularly kubernetes

180
00:12:01,646 --> 00:12:05,382
based environment, have been a big hit. There are quite a few tool

181
00:12:05,436 --> 00:12:09,266
sets which cater to cloud native stacks,

182
00:12:09,298 --> 00:12:13,954
cloud native environments. And we have also developed

183
00:12:14,002 --> 00:12:17,834
some solutions for private and on prem private cloud or on

184
00:12:17,872 --> 00:12:21,386
prem based chaos experimentation, because quite a

185
00:12:21,408 --> 00:12:24,666
few of the clientele, quite a few of the

186
00:12:24,688 --> 00:12:27,834
environments that we work along with will

187
00:12:27,872 --> 00:12:31,806
be on prem or private cloud. Next, I have an

188
00:12:31,828 --> 00:12:35,770
example of how chaos

189
00:12:35,850 --> 00:12:39,774
workflow works in a

190
00:12:39,812 --> 00:12:43,282
cloud native kind of environment, and how we

191
00:12:43,336 --> 00:12:46,980
demonstrate these kind of values, these kind of

192
00:12:47,830 --> 00:12:50,050
chaos engineering impact.

193
00:12:50,950 --> 00:12:54,954
How do we basically explain or emphasize

194
00:12:55,022 --> 00:12:58,070
that from two sres, particularly,

195
00:12:58,410 --> 00:13:02,150
that this is how chaos engineering can make your service

196
00:13:02,220 --> 00:13:05,494
more reliable? Right. In this example over here,

197
00:13:05,612 --> 00:13:09,494
what we're showing is how we can run a chaos

198
00:13:09,622 --> 00:13:13,846
workflow, which can contain multiple experiments

199
00:13:14,038 --> 00:13:17,494
and then drive value, make decisions on the basis

200
00:13:17,542 --> 00:13:22,014
of that. Right? So this example was

201
00:13:22,132 --> 00:13:24,590
done with tool sets,

202
00:13:25,250 --> 00:13:28,990
mainly chaos tool set, which was litmus chaos,

203
00:13:29,810 --> 00:13:33,230
and then GitHub actions, Argo CD,

204
00:13:33,390 --> 00:13:35,860
which is basically part of litmus chaos actually,

205
00:13:37,270 --> 00:13:41,086
and Grafana for observability, Grafana and Prometheus

206
00:13:41,118 --> 00:13:44,786
for observability, actually. And then the application that we

207
00:13:44,808 --> 00:13:48,120
have used is the block shop microservice application.

208
00:13:48,490 --> 00:13:52,246
So how the workflow works is that you

209
00:13:52,268 --> 00:13:56,310
can design your experiment, you can design a complex workflow

210
00:13:56,970 --> 00:14:00,698
of experiments, like take down one service,

211
00:14:00,784 --> 00:14:04,314
first see the impact on other services, then take down

212
00:14:04,352 --> 00:14:08,122
another service, then see the impact and keep

213
00:14:08,176 --> 00:14:11,454
on going like that. It can be written in

214
00:14:11,492 --> 00:14:15,466
form of a YAML workflow file, and then the developer

215
00:14:15,498 --> 00:14:18,622
can simply check it in. Right? And once that checks in,

216
00:14:18,676 --> 00:14:22,650
the GitHub action is triggered. And then

217
00:14:22,740 --> 00:14:27,570
the GitHub action basically triggers the

218
00:14:27,640 --> 00:14:31,022
submission of that workflow to argo workflow server,

219
00:14:31,166 --> 00:14:35,554
and then Argo workflow is basically started. Argo workflow

220
00:14:35,602 --> 00:14:39,778
is the one that executes this complex

221
00:14:39,874 --> 00:14:43,174
set of experiments. So how it does that is

222
00:14:43,212 --> 00:14:46,802
that it creates custom resources prescribed

223
00:14:46,866 --> 00:14:49,530
or provided by litmus.

224
00:14:50,190 --> 00:14:53,974
Those are like chaos experiments,

225
00:14:54,102 --> 00:14:57,738
which are definitions of the actual experiment that you want to run.

226
00:14:57,904 --> 00:15:02,574
Then it creates the chaos engine, which is basically the

227
00:15:02,612 --> 00:15:06,350
running instance of the workflow. And then finally

228
00:15:06,420 --> 00:15:09,626
it generates something called chaos results,

229
00:15:09,818 --> 00:15:13,474
which sre basically the outcome that

230
00:15:13,512 --> 00:15:17,394
tells you how those experiments and that those workflows have

231
00:15:17,432 --> 00:15:20,958
fared. So argo triggers

232
00:15:20,974 --> 00:15:23,570
the workflow, generates those crds,

233
00:15:24,970 --> 00:15:28,502
and then once those crds are generated, they run

234
00:15:28,556 --> 00:15:32,946
themselves to create the kubernetes, native objects

235
00:15:32,978 --> 00:15:35,858
like jobs and running pods,

236
00:15:35,954 --> 00:15:40,410
which will then execute your experiments.

237
00:15:41,150 --> 00:15:44,700
Once that happens, that obviously impacts the application

238
00:15:45,230 --> 00:15:49,254
and the impact can then be captured

239
00:15:49,382 --> 00:15:52,942
by capturing the golden signals which

240
00:15:52,996 --> 00:15:56,302
can be observed on your observability dashboard, in this case

241
00:15:56,356 --> 00:15:59,598
Grafana. One thing which we can also

242
00:15:59,684 --> 00:16:04,446
include, and we have done that, is that we can put in a

243
00:16:04,468 --> 00:16:08,174
bot kind of scenarios that, okay, if your blast

244
00:16:08,222 --> 00:16:11,566
radius is getting too big, or if the impact on your golden

245
00:16:11,598 --> 00:16:15,282
signals like latency is becoming too big and the service

246
00:16:15,336 --> 00:16:19,174
is starting to go down, the crds can be

247
00:16:19,212 --> 00:16:22,402
aborted, the chaos engine can be stopped,

248
00:16:22,466 --> 00:16:26,470
those kind of things can also be incorporated. And this is just one example

249
00:16:26,620 --> 00:16:30,282
with litwuse chaos, but the same kind of things can be done with other tool

250
00:16:30,336 --> 00:16:33,786
sets as well. And I'll talk about those tool sets in

251
00:16:33,808 --> 00:16:36,922
the next slide. So talking

252
00:16:36,976 --> 00:16:40,374
about tool sets and there is a rich selection

253
00:16:40,422 --> 00:16:44,138
of tools, chaos engineering tools now available. And thus that's

254
00:16:44,154 --> 00:16:47,562
a very good thing to practice chaos

255
00:16:47,626 --> 00:16:50,858
engineering in the current setup,

256
00:16:50,954 --> 00:16:54,434
current ecosystems, whether it's CNCF ecosystems or

257
00:16:54,472 --> 00:16:58,062
hyperscalers, or even individual enterprise players

258
00:16:58,126 --> 00:17:01,890
like Gremlin and harness. So it's really good time to

259
00:17:01,960 --> 00:17:06,066
practice chaos engineering, I'd say what

260
00:17:06,088 --> 00:17:10,034
are the points that we like in this practice

261
00:17:10,082 --> 00:17:13,446
with the tools that are available right now is that

262
00:17:13,548 --> 00:17:16,726
quite a few of these are open source, so you

263
00:17:16,748 --> 00:17:21,130
are free to experiment with them. And once

264
00:17:21,200 --> 00:17:24,506
you kind of happy with the product, that's the

265
00:17:24,528 --> 00:17:28,598
product you want to sort of roll out into your environments or your clients environment.

266
00:17:28,694 --> 00:17:32,400
There are enterprise versions available for multiple of them.

267
00:17:33,650 --> 00:17:37,390
These are quite cloud native, all of these tools,

268
00:17:37,970 --> 00:17:42,830
so they are compatible with almost all the versions of kubernetes.

269
00:17:43,410 --> 00:17:47,310
Lightweight Kubernetes managed kubernetes as well as

270
00:17:47,460 --> 00:17:52,354
your on prem and cloud platforms. So the range is

271
00:17:52,392 --> 00:17:56,246
quite huge. And then there is

272
00:17:56,428 --> 00:18:00,182
detailed API support, right? So if you want to do these things

273
00:18:00,236 --> 00:18:03,714
programmatically, like I was explaining, through workflows,

274
00:18:03,762 --> 00:18:07,390
Yaml based files checked in into your GitHub repositories,

275
00:18:07,490 --> 00:18:09,846
triggering your CI CD pipelines,

276
00:18:10,038 --> 00:18:13,750
or in terms of kubernetes, custom resource

277
00:18:13,830 --> 00:18:17,254
support so that you can control these through operators,

278
00:18:17,302 --> 00:18:20,060
et cetera. It's quite good.

279
00:18:20,590 --> 00:18:25,122
There are best practices support like GitHubs

280
00:18:25,286 --> 00:18:29,498
observ Githubs through argo

281
00:18:29,594 --> 00:18:32,806
observability through Prometheus, GitHub action supports

282
00:18:32,938 --> 00:18:35,940
and other CI CD tools SRE compatible as well.

283
00:18:36,790 --> 00:18:40,514
Not the least great documentation, which is quite key.

284
00:18:40,632 --> 00:18:43,842
Many a times you see open source products not

285
00:18:43,896 --> 00:18:47,174
having such good documentation. So these

286
00:18:47,212 --> 00:18:50,866
tools, I think are quite good with that especially helps

287
00:18:50,898 --> 00:18:54,822
when you're exploring, when you are looking to adapt them to your

288
00:18:54,956 --> 00:18:57,750
particular scenarios, your use cases.

289
00:18:58,430 --> 00:19:02,150
And then finally, the enterprise versions

290
00:19:02,230 --> 00:19:06,474
of many of these tools are now available. So once

291
00:19:06,512 --> 00:19:10,618
you come to a stage where you want to go to production

292
00:19:10,714 --> 00:19:13,610
with these practices, or you want to adapt to these practices,

293
00:19:13,770 --> 00:19:18,670
introduce them, roll them out to your organizations,

294
00:19:19,810 --> 00:19:23,326
you don't really have to worry about being open source

295
00:19:23,358 --> 00:19:27,540
and not being able to find enough specific support.

296
00:19:29,750 --> 00:19:33,598
There are enterprise versions available. The hyperscalers

297
00:19:33,614 --> 00:19:37,366
are also coming up their tool sets now, which is

298
00:19:37,388 --> 00:19:40,934
another thing, because these tool sets like Azure Chaos Studio is

299
00:19:40,972 --> 00:19:44,790
quite native to Azure services. They are

300
00:19:44,860 --> 00:19:48,314
built and they are native, and if you want to run

301
00:19:48,352 --> 00:19:52,134
experiments into your Azure environments and Azure chaos

302
00:19:52,182 --> 00:19:56,458
studio bots really well. So basically

303
00:19:56,544 --> 00:19:59,946
what we wanted to showcase through this presentation is

304
00:19:59,968 --> 00:20:03,882
that how chaos engineering, how has our journey been with chaos

305
00:20:03,946 --> 00:20:07,626
engineering, particularly how this has helped

306
00:20:07,658 --> 00:20:10,270
us rolling out chaos engineering,

307
00:20:11,730 --> 00:20:15,374
enhancing the understanding of our sres and

308
00:20:15,412 --> 00:20:19,102
our clients in their journey of SRE adoption and

309
00:20:19,156 --> 00:20:23,242
chaos engineering tools. The chaos engineering practice

310
00:20:23,386 --> 00:20:25,960
has been a wonderful, ah,

311
00:20:26,410 --> 00:20:29,878
enabler in that journey. So with that,

312
00:20:29,964 --> 00:20:32,520
I would say thank you very much.

313
00:20:33,930 --> 00:20:37,350
If you want to reach out to us, you can reach out to us

314
00:20:37,500 --> 00:20:41,846
at SRE, underscore cnl@etscl.com thank

315
00:20:41,868 --> 00:20:42,340
you very much.

