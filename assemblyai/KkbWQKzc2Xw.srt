1
00:00:37,970 --> 00:00:41,286
Mondo and I'm super excited to talk about security as code

2
00:00:41,388 --> 00:00:44,520
at Conf 42 cloud native 2023.

3
00:00:44,890 --> 00:00:48,834
I started my career at Deutsche telecom parental team mobile,

4
00:00:48,882 --> 00:00:52,298
and one of the biggest challenges we had was really securing

5
00:00:52,394 --> 00:00:55,630
a large of critical infrastructure

6
00:00:56,050 --> 00:00:58,830
across whole Europe.

7
00:01:01,650 --> 00:01:05,506
One way to do this was really going with full automation. So we

8
00:01:05,528 --> 00:01:10,066
had an internal project going on where we

9
00:01:10,168 --> 00:01:13,518
tried to figure out how we can automate

10
00:01:13,614 --> 00:01:16,994
all those different security requirements in a way that

11
00:01:17,032 --> 00:01:20,546
can be applied really easy. A lot of

12
00:01:20,728 --> 00:01:23,558
people try and they said, no,

13
00:01:23,724 --> 00:01:26,774
this is not going to work, don't try it, it's a waste of time.

14
00:01:26,892 --> 00:01:30,410
And we said, challenge accepted, let's just try.

15
00:01:30,560 --> 00:01:34,234
How can we implement security in a way so that it

16
00:01:34,272 --> 00:01:37,606
can be used for production environments on a daily

17
00:01:37,638 --> 00:01:40,682
basis? And the trick was to make it,

18
00:01:40,736 --> 00:01:44,494
we call it practical security. We made it so that everything was

19
00:01:44,532 --> 00:01:48,046
tweakable. It has a good amount of default, so you could work out

20
00:01:48,068 --> 00:01:52,074
of the box with this. But it was focused on production,

21
00:01:52,122 --> 00:01:55,534
so it had definitely most of the security features

22
00:01:55,582 --> 00:01:59,714
enabled, and that was really, really successful. What was missing was

23
00:01:59,752 --> 00:02:03,586
the insight of how good am I doing across my fleet? What's the

24
00:02:03,608 --> 00:02:07,682
next thing that I should start? Where are the servers that are not fully automated?

25
00:02:07,746 --> 00:02:11,650
And getting those visibility capabilities

26
00:02:11,730 --> 00:02:16,150
into the overall infrastructure is actually quite complicated.

27
00:02:16,570 --> 00:02:19,690
So what we started then was the first policy

28
00:02:19,760 --> 00:02:23,034
as code engine called Inspec. And we started this

29
00:02:23,072 --> 00:02:26,460
project in 2014 15,

30
00:02:27,070 --> 00:02:30,614
where we really helped companies to automate

31
00:02:30,662 --> 00:02:34,842
all those like pdf long boring requirements

32
00:02:34,986 --> 00:02:38,362
in an automated way so that they could quickly assess

33
00:02:38,426 --> 00:02:41,582
a huge amount of infrastructure in a very structured way.

34
00:02:41,716 --> 00:02:44,622
That company was quickly acquired by chef Software,

35
00:02:44,766 --> 00:02:48,402
and I was leading the engineering team

36
00:02:48,456 --> 00:02:52,146
for compliance and made it really

37
00:02:52,248 --> 00:02:55,750
big so that chef

38
00:02:56,090 --> 00:02:59,640
sold Inspect to Fortune 500 companies,

39
00:03:00,010 --> 00:03:03,686
the Department of Defense, and so on. So I have a

40
00:03:03,708 --> 00:03:07,254
strong background in policy as code, and we definitely look

41
00:03:07,292 --> 00:03:11,578
into how policy is. Code can help us with security

42
00:03:11,664 --> 00:03:15,066
as code going forward. So when

43
00:03:15,088 --> 00:03:18,666
we think about security as code, what is it?

44
00:03:18,688 --> 00:03:22,606
And security as code is really the practice of integrating security

45
00:03:22,708 --> 00:03:26,174
controls and tools, essentially into the

46
00:03:26,212 --> 00:03:30,654
software development process. And we

47
00:03:30,692 --> 00:03:34,114
will see how we do it. And the first question before is,

48
00:03:34,152 --> 00:03:36,740
really, why is that important?

49
00:03:37,750 --> 00:03:41,390
Why should I care about security as code? Covid? It's more effort.

50
00:03:41,470 --> 00:03:46,034
I need to do something in my pipeline. I have already my production

51
00:03:46,082 --> 00:03:47,350
environment secured.

52
00:03:49,850 --> 00:03:53,240
Doesn't make sense, right? So also,

53
00:03:53,690 --> 00:03:57,586
hackers are cool, they're going to help us. So that's

54
00:03:57,618 --> 00:04:01,340
how it used to look like. But nowadays it's more like this.

55
00:04:01,710 --> 00:04:05,130
We have ransomware everywhere and that's not

56
00:04:05,200 --> 00:04:08,586
individual hackers. Those are ransomware gangs. They try to do it

57
00:04:08,608 --> 00:04:12,058
everywhere and it behaves like a company. They have sales

58
00:04:12,144 --> 00:04:15,854
pullers, they have sales playbooks, they have customer support,

59
00:04:15,972 --> 00:04:22,906
and they have affiliate programs. So essentially it's

60
00:04:22,938 --> 00:04:26,274
an illegal business making a lot of money. And that

61
00:04:26,312 --> 00:04:29,614
is just easy for them because we have so much vulnerable

62
00:04:29,662 --> 00:04:33,570
infrastructure out there. Okay, so now

63
00:04:33,720 --> 00:04:37,094
we have a huge amount of hackers, a huge amount of crimeal gangs trying

64
00:04:37,132 --> 00:04:40,920
to attack everything that is connected to the Internet. And then

65
00:04:41,530 --> 00:04:46,962
if we combine this with the amount of yearly

66
00:04:47,026 --> 00:04:50,886
published cves, a CVE is a vulnerability that is being published

67
00:04:50,918 --> 00:04:54,170
publicly, and we see a 20% increase over

68
00:04:54,240 --> 00:04:58,234
time, year over year. Just in the last year, we had

69
00:04:58,272 --> 00:05:01,978
over 25,000 vulnerabilities that are known

70
00:05:02,074 --> 00:05:05,646
there. We assume this is just the tip of the

71
00:05:05,668 --> 00:05:08,400
iceberg and it could be really a lot more.

72
00:05:08,770 --> 00:05:12,602
And that, just in combination with a lot of

73
00:05:12,676 --> 00:05:16,354
ransomware stuff, is essentially something

74
00:05:16,392 --> 00:05:20,146
that should concern us. Once a

75
00:05:20,248 --> 00:05:22,290
vulnerability is being detected,

76
00:05:23,750 --> 00:05:27,174
hopefully by a person that reports it properly to

77
00:05:27,212 --> 00:05:30,758
the vendor, they report a CVE, they get a

78
00:05:30,764 --> 00:05:34,610
CVE number, then a CVE get assigned.

79
00:05:34,770 --> 00:05:38,294
The vendor hopefully creates a patch very

80
00:05:38,412 --> 00:05:41,574
quickly, and once the patch is being out, the CVE

81
00:05:41,622 --> 00:05:44,380
is being published with more details, what went on,

82
00:05:45,310 --> 00:05:48,506
so that we can learn from it before the patch is out.

83
00:05:48,528 --> 00:05:51,998
Like we call it zero day exploit. And after the patch, we call it

84
00:05:52,084 --> 00:05:56,046
just exploits. The interesting fact to

85
00:05:56,068 --> 00:05:59,198
see here is that 25%

86
00:05:59,284 --> 00:06:02,510
of all the cves have known vulnerabilities.

87
00:06:03,190 --> 00:06:07,780
That's a huge amount of those 25%,

88
00:06:08,870 --> 00:06:12,514
90% are available within months

89
00:06:12,632 --> 00:06:16,690
after the vulnerability has been published. So essentially

90
00:06:18,710 --> 00:06:22,110
a lot of attacks are exploitable within

91
00:06:22,280 --> 00:06:25,506
30 days. This is in contrast

92
00:06:25,538 --> 00:06:29,494
to how we roll out fixes. And we roll out fixes very, very slowly

93
00:06:29,542 --> 00:06:34,042
across the industry. And it's not because

94
00:06:34,176 --> 00:06:37,514
we don't want to, it's because it's very, very complicated. Like first,

95
00:06:37,552 --> 00:06:40,606
the identify step. Just imagine in your

96
00:06:40,628 --> 00:06:44,398
infrastructure, how quickly can you identify where a specific

97
00:06:44,484 --> 00:06:48,346
package or misconfiguration is being applied in your infrastructure?

98
00:06:48,458 --> 00:06:52,014
Really, really complicated. And once we have done this,

99
00:06:52,052 --> 00:06:55,266
we essentially help. Like, we generate a report,

100
00:06:55,448 --> 00:06:59,550
a lot of reds, and out of those reds we generate tickets.

101
00:06:59,710 --> 00:07:03,970
Those tickets will then be worked on, hopefully being fixed soon,

102
00:07:04,040 --> 00:07:07,430
and then after a while, it trickles down into

103
00:07:07,500 --> 00:07:11,218
production. It needs to be tested and works in combination.

104
00:07:11,314 --> 00:07:14,370
And then, so the rollout essentially is slow.

105
00:07:14,530 --> 00:07:18,546
According to studies, we see

106
00:07:18,588 --> 00:07:23,274
that this process takes very long. So it takes 246

107
00:07:23,312 --> 00:07:26,874
days to just get a vulnerability that

108
00:07:26,912 --> 00:07:30,446
has been fixed, rolled out in our infrastructure. And that is on

109
00:07:30,468 --> 00:07:34,570
average, so we have 30 days versus

110
00:07:34,730 --> 00:07:38,190
246 days. It's a huge gap.

111
00:07:40,130 --> 00:07:43,614
So if we see this in combination,

112
00:07:43,742 --> 00:07:46,706
all those issues outpace the fix,

113
00:07:46,808 --> 00:07:50,510
right? So we have a yearly increase in vulnerabilities.

114
00:07:50,590 --> 00:07:54,546
Hackers go full on automation like they

115
00:07:54,568 --> 00:07:58,386
can scan the Internet in three minutes and the rollouts are slow.

116
00:07:58,418 --> 00:08:02,040
And that in combination is giving the

117
00:08:02,650 --> 00:08:06,774
ransomware gangs just a really easy pattern to

118
00:08:06,812 --> 00:08:10,138
attack a lot of companies. And we see this in the numbers.

119
00:08:10,224 --> 00:08:13,242
Like if you ask a little bit over 1000

120
00:08:13,296 --> 00:08:16,780
it and security professionals, 80% of them

121
00:08:17,230 --> 00:08:20,558
have been victims of ransomware and more than 60%

122
00:08:20,644 --> 00:08:23,920
paid ransom. And that's a huge number.

123
00:08:24,370 --> 00:08:28,894
And that's just caused by the

124
00:08:28,932 --> 00:08:32,154
amount of vulnerabilities and the slow response

125
00:08:32,202 --> 00:08:35,170
that we have to fix that.

126
00:08:35,320 --> 00:08:40,100
The main problems we identified here is that first

127
00:08:40,790 --> 00:08:44,226
stuff that is updated has not been patched, it's not even

128
00:08:44,328 --> 00:08:49,170
unknown, it's just it hasn't been applied. And then known misconfigurations

129
00:08:49,330 --> 00:08:52,662
have not been avoided in production. So it's really those two

130
00:08:52,796 --> 00:08:56,710
that make more than 90 or 80% of the attacks

131
00:08:57,450 --> 00:09:01,114
possible, and that's totally avoidable. And if we

132
00:09:01,152 --> 00:09:04,474
just reduce it from 100%

133
00:09:04,592 --> 00:09:08,518
to 20%, the attack vector for those ransomware gangs

134
00:09:08,534 --> 00:09:11,806
is much, much smaller. They need to do a lot more work. And then

135
00:09:11,988 --> 00:09:15,934
this essentially made the business may not be more viable and

136
00:09:15,972 --> 00:09:19,406
we just need to make it way more complicated so

137
00:09:19,428 --> 00:09:23,458
that the amount of VTex also are going to

138
00:09:23,624 --> 00:09:28,754
be reduced. And the

139
00:09:28,792 --> 00:09:32,434
challenging fact here is it's not just that

140
00:09:32,472 --> 00:09:36,402
we don't want to ship fixes very quick,

141
00:09:36,456 --> 00:09:40,274
it's just how the tooling that we use on a day to day basis

142
00:09:40,402 --> 00:09:44,006
helps individual teams. If we look at how the

143
00:09:44,028 --> 00:09:47,990
software delivery works in general, like we have the platform engineers, they work from local

144
00:09:48,060 --> 00:09:51,462
development, go to source code, put it into git,

145
00:09:51,526 --> 00:09:54,794
then it takes GitHub actions, then it goes into pre

146
00:09:54,832 --> 00:09:58,934
production and then prod, hopefully with terraform. And so we see a pipeline

147
00:09:58,982 --> 00:10:02,714
trickling through. The development team mostly

148
00:10:02,762 --> 00:10:06,490
spends time with the source code, local development

149
00:10:06,570 --> 00:10:10,638
and git, while the security team

150
00:10:10,724 --> 00:10:14,506
really focus complete on the other side, they focus on the production

151
00:10:14,538 --> 00:10:17,714
environment and. Right, so the attack vector is really

152
00:10:17,752 --> 00:10:22,050
on the production side and so they need to secure the production environment.

153
00:10:22,710 --> 00:10:26,166
But you see like the focus is on a completely different end of the

154
00:10:26,188 --> 00:10:29,160
whole spectrum and that leads to issues.

155
00:10:29,770 --> 00:10:34,262
And we can illustrate that on just one simple part.

156
00:10:34,396 --> 00:10:37,878
Let's look at cloud storage buckets and we don't

157
00:10:37,894 --> 00:10:41,962
want to have them public in most cases so the

158
00:10:42,096 --> 00:10:47,270
security teams naturally is going to AWS,

159
00:10:47,350 --> 00:10:51,102
Google Cloud Azure and just says, okay, is that thing

160
00:10:51,156 --> 00:10:54,958
configured properly? And if it's not, they say, hey team,

161
00:10:55,044 --> 00:10:57,680
I need fixes here, please roll this out.

162
00:10:58,530 --> 00:11:02,254
While the engineering team, they think in terraform they

163
00:11:02,292 --> 00:11:05,746
automate things. So the language of

164
00:11:05,768 --> 00:11:09,666
how we communicate, it's different. So the testing tools that

165
00:11:09,688 --> 00:11:14,626
work for cloud don't help developers and that's why the

166
00:11:14,648 --> 00:11:17,838
feedback process is

167
00:11:17,944 --> 00:11:22,274
really slow. We essentially need to deploy to pre production production

168
00:11:22,402 --> 00:11:25,766
before the tooling starts that security is

169
00:11:25,788 --> 00:11:29,286
using, so that then they see things in local development,

170
00:11:29,398 --> 00:11:32,838
which means we have to deploy a vulnerable software

171
00:11:32,934 --> 00:11:36,550
in order to detect the vulnerable software so that we can essentially

172
00:11:36,630 --> 00:11:39,834
fix the vulnerable software, which is not

173
00:11:39,872 --> 00:11:43,726
making any sense, we expose ourselves to the

174
00:11:43,748 --> 00:11:46,830
other world without any need just because

175
00:11:46,900 --> 00:11:50,586
the security tooling is not up to that task and avoids teams

176
00:11:50,618 --> 00:11:53,970
to get feedback early. Wouldn't it be nice if the team

177
00:11:54,040 --> 00:11:57,970
already sees in their local terraform configuration that

178
00:11:58,040 --> 00:12:01,490
hey, this is not right, you should really do this different.

179
00:12:01,640 --> 00:12:05,178
Hey, in pipeline it blocks the pipeline.

180
00:12:05,214 --> 00:12:08,786
If your terraform HDL is wrong, it DevOps the pipeline.

181
00:12:08,818 --> 00:12:11,670
If kubernetes manifests are not configured properly.

182
00:12:14,170 --> 00:12:17,826
So we have those individual tools, but it's really not helping

183
00:12:17,858 --> 00:12:21,118
with the communication because as a company you agree to a rule

184
00:12:21,154 --> 00:12:24,474
set. So even the bucket like you've seen, like the language is different.

185
00:12:24,512 --> 00:12:27,814
We can check that individually, but what if we need to make an exception?

186
00:12:27,942 --> 00:12:32,218
Then that triggers where it needs to align,

187
00:12:32,314 --> 00:12:36,126
right? So otherwise you can have tooling here,

188
00:12:36,148 --> 00:12:40,314
you can have tooling there. But in order to implement security as code properly,

189
00:12:40,442 --> 00:12:43,806
you need something that helps you smoothen the

190
00:12:43,828 --> 00:12:47,022
process going from left to right and essentially align

191
00:12:47,086 --> 00:12:50,814
you on one common knowledge. And that is what terraform

192
00:12:50,862 --> 00:12:54,690
has done for infrastructure. You have this really going from, you develop

193
00:12:54,760 --> 00:12:58,006
it locally, you have this state file, a plan file, and they push it

194
00:12:58,028 --> 00:13:01,382
in production. You can use multiple environments and it makes it really

195
00:13:01,436 --> 00:13:04,934
easy for platform teams to

196
00:13:04,972 --> 00:13:08,230
go from local to prod.

197
00:13:08,810 --> 00:13:12,746
We don't see this right now in the industry for security and so

198
00:13:12,768 --> 00:13:16,730
it's really difficult for them and it leads to massive amount of frustration.

199
00:13:17,710 --> 00:13:20,620
As I said, the platform team says, hey,

200
00:13:21,310 --> 00:13:24,670
wow, you should tell me how I should do it in terraform.

201
00:13:25,010 --> 00:13:28,814
It doesn't help me if you say you need to configure this in the

202
00:13:28,852 --> 00:13:31,950
dashboard this way, because I automate my software,

203
00:13:32,370 --> 00:13:35,746
the security teams really go the other way. They say,

204
00:13:35,848 --> 00:13:39,714
hey, what's wrong? I tell you all this stuff all the time again,

205
00:13:39,832 --> 00:13:43,298
so they don't see any progress? It's super driving people crazy.

206
00:13:43,464 --> 00:13:46,838
And I just want to

207
00:13:47,004 --> 00:13:50,854
say, this is not as humans, we don't want to work together, this is

208
00:13:50,892 --> 00:13:54,246
the tooling drives, drives the complexity so

209
00:13:54,268 --> 00:13:58,310
that we cannot work together very effectively.

210
00:13:58,970 --> 00:14:01,962
And in the end we just say, go to management and say,

211
00:14:02,016 --> 00:14:05,690
hey, those security is blocking my pipeline. Or security says,

212
00:14:05,760 --> 00:14:09,290
oh, engineering has done it again like super

213
00:14:09,360 --> 00:14:13,198
wrong, so we can't deploy it. So there's always this fight

214
00:14:13,284 --> 00:14:16,906
between the different teams just because the tooling

215
00:14:16,938 --> 00:14:20,302
doesn't fit together. And it's something that we need to figure out.

216
00:14:20,436 --> 00:14:25,226
So let's think about the solution, right? And if

217
00:14:25,268 --> 00:14:28,386
we think holistically, we first of

218
00:14:28,408 --> 00:14:32,178
all need to think about the whole tech stack. When we as a security person

219
00:14:32,344 --> 00:14:35,790
look at our tech, we have to secure the whole thing, we need

220
00:14:35,800 --> 00:14:39,394
to secure the cloud environment, we need to secure our kubernetes cluster,

221
00:14:39,522 --> 00:14:43,570
then the cluster configuration, everything that runs inside of the cluster,

222
00:14:43,730 --> 00:14:47,426
going from workloads to application containers and

223
00:14:47,468 --> 00:14:50,954
having that unified view helps you to prioritize the

224
00:14:50,992 --> 00:14:56,806
risk and helps you to really focusing on the right thing. But that's

225
00:14:56,838 --> 00:15:00,314
not enough. We also need to look

226
00:15:00,352 --> 00:15:03,806
into the pipeline because from security perspective we have

227
00:15:03,828 --> 00:15:07,374
seen many, many supply chain attacks. And you need to move the

228
00:15:07,412 --> 00:15:10,814
security into the left side. So security starts with

229
00:15:10,852 --> 00:15:14,030
local development, is applied in source code,

230
00:15:14,100 --> 00:15:17,774
CI CD, and then that's where we see all those anchors

231
00:15:17,902 --> 00:15:21,886
for security as code. You essentially need to go, it starts

232
00:15:21,918 --> 00:15:25,646
on local development, it goes into git,

233
00:15:25,838 --> 00:15:29,382
checks into GitHub actions, everything is secure there

234
00:15:29,436 --> 00:15:32,726
and then it deploys into production. It's very important that you do

235
00:15:32,748 --> 00:15:36,342
this on every individual step. Even if I have a local

236
00:15:36,396 --> 00:15:39,934
development, everything being checked, let's assume I do a supply chain

237
00:15:40,082 --> 00:15:44,170
attack. I can manipulate all the things that have been checked then before

238
00:15:44,240 --> 00:15:47,546
they run into production. So that means even if it

239
00:15:47,568 --> 00:15:51,290
looks good in git, it's being deployed, manipulated and then

240
00:15:51,360 --> 00:15:54,746
applied completely different in production. I think it's great in git.

241
00:15:54,778 --> 00:15:58,286
It's correct, but it's still wrong in production. So no matter where

242
00:15:58,308 --> 00:16:01,390
you are, you can always start manipulating it.

243
00:16:01,460 --> 00:16:04,682
And we need to really focusing on securing

244
00:16:04,746 --> 00:16:06,690
every layer and every phase.

245
00:16:09,430 --> 00:16:13,106
We already touched a few things. What we need for security as

246
00:16:13,128 --> 00:16:16,630
code in order to apply this really structural,

247
00:16:18,650 --> 00:16:21,586
you start with static and dynamic testing.

248
00:16:21,618 --> 00:16:24,838
You really want to check terraform Kubernetes manifest in

249
00:16:24,844 --> 00:16:28,726
the local development phase. You want to check that also in CI CD to

250
00:16:28,748 --> 00:16:32,278
always make sure the way we define our infrastructure

251
00:16:32,374 --> 00:16:35,430
is up to the task. It's really meeting the best practices.

252
00:16:35,510 --> 00:16:39,146
And that's amazing. The next part that

253
00:16:39,168 --> 00:16:42,334
we are looking at is package vulnerabilities from

254
00:16:42,372 --> 00:16:46,714
container perspective, but also from runtime

255
00:16:46,762 --> 00:16:49,710
perspective. Every VM that we are running,

256
00:16:49,780 --> 00:16:53,978
every laptop that we are running, they all need to be updated and

257
00:16:54,004 --> 00:16:57,490
be up to the task. And as we

258
00:16:57,560 --> 00:17:00,814
talked about, all the runtime infrastructure that needs to be checked

259
00:17:00,862 --> 00:17:04,066
very continuously. Even if I check the container in

260
00:17:04,088 --> 00:17:07,206
my pipeline, you end up in the situation

261
00:17:07,388 --> 00:17:11,830
that once deployed in production, if you don't update it very regularly,

262
00:17:12,810 --> 00:17:16,630
new vulnerabilities come up and then boom,

263
00:17:17,470 --> 00:17:20,806
one week after you deployed it already a new vulnerability popped

264
00:17:20,838 --> 00:17:25,290
up. So you always need this view across individual

265
00:17:25,440 --> 00:17:29,798
fire s's of the CI CD pipeline. So the

266
00:17:29,984 --> 00:17:33,934
CI CD pipeline is essentially the

267
00:17:33,972 --> 00:17:38,490
foundation to implement security as code very effectively.

268
00:17:38,650 --> 00:17:42,522
If you're not having a full automation, it's really difficult

269
00:17:42,596 --> 00:17:44,820
to implement security as code on top.

270
00:17:46,550 --> 00:17:50,180
The other part of the practice is really

271
00:17:51,910 --> 00:17:55,902
talking about how can we as engineers establish

272
00:17:55,966 --> 00:17:59,010
secure coding practices in our review processes,

273
00:17:59,090 --> 00:18:02,758
make sure we don't have like we have input validation, we have proper review

274
00:18:02,844 --> 00:18:06,854
of source code, and that helps us getting better beyond just the

275
00:18:06,892 --> 00:18:10,946
static testing. And we can only, those things in combination

276
00:18:11,058 --> 00:18:18,314
really, really drive the security upwards back

277
00:18:18,352 --> 00:18:21,850
to our problem. Where we talked about individuals,

278
00:18:22,510 --> 00:18:25,790
where security wants to check the cloud and platform

279
00:18:25,860 --> 00:18:28,990
engineers want to check the terraform part, we really want to focus

280
00:18:29,060 --> 00:18:32,898
on the problem, right? So the problem as a company is

281
00:18:32,984 --> 00:18:37,054
we don't want any bucket being exposed

282
00:18:37,182 --> 00:18:40,526
publicly, no matter if it's defined in AWS,

283
00:18:40,558 --> 00:18:43,986
Azure, GCP or terraform. There's really the

284
00:18:44,088 --> 00:18:48,258
foundational focusing on what is our goal

285
00:18:48,434 --> 00:18:54,214
and how to achieve that. And in

286
00:18:54,252 --> 00:18:59,094
manifestation, that essentially means we really need to see how security

287
00:18:59,212 --> 00:19:02,280
can be part of all individual process.

288
00:19:02,970 --> 00:19:06,522
We have seen this now, and I argued many times that we

289
00:19:06,656 --> 00:19:10,074
really need security in all aspects of that, and not

290
00:19:10,112 --> 00:19:13,862
just individually, but also consistently. So just plugging in

291
00:19:14,016 --> 00:19:17,834
individual parts is not the solution. You really need a unified

292
00:19:17,882 --> 00:19:21,246
view that helps teams to collaborate across

293
00:19:21,348 --> 00:19:25,022
those tooling. Otherwise you end up really, in this situation that local

294
00:19:25,076 --> 00:19:28,894
development has a checking tool. But then the rule for production

295
00:19:28,942 --> 00:19:32,274
is really different, and then you still have the clash, you still

296
00:19:32,312 --> 00:19:35,326
have data not aligned, you have agreements not aligned,

297
00:19:35,358 --> 00:19:39,046
and that makes the world not better. You have more

298
00:19:39,068 --> 00:19:42,934
information, more distraction. So the challenging part is really

299
00:19:42,972 --> 00:19:46,674
combining the individual controls, the team collaboration

300
00:19:46,722 --> 00:19:50,506
with effective tooling that helps you to build this

301
00:19:50,608 --> 00:19:54,074
very fast. So if we

302
00:19:54,112 --> 00:19:57,562
look at what infrastructure as code has done, we really

303
00:19:57,616 --> 00:20:01,726
want something that allows us to do the same thing for security

304
00:20:01,828 --> 00:20:05,406
as code. And one way to do that is having the

305
00:20:05,428 --> 00:20:09,342
flexibility as in terraform or in the Kubernetes manifest for

306
00:20:09,396 --> 00:20:13,362
security. And the way to do that is

307
00:20:13,416 --> 00:20:17,490
using policy as code. You define the security practices

308
00:20:17,910 --> 00:20:21,954
in a code that you can reuse and that should the

309
00:20:21,992 --> 00:20:25,818
important part, it really needs to be as flexible as infrastructure,

310
00:20:25,854 --> 00:20:30,034
as code. You really want to tie terraform HCL

311
00:20:30,082 --> 00:20:33,958
with policy as code. You want to tie ansible with policy

312
00:20:34,044 --> 00:20:37,558
as code. So you need something that really aligns completely

313
00:20:37,644 --> 00:20:41,546
on that level so that we can see things in

314
00:20:41,568 --> 00:20:45,018
our local development but also in our pipeline, and then see it

315
00:20:45,024 --> 00:20:48,746
in production as a result. So that sounds

316
00:20:48,848 --> 00:20:51,966
too good to be true, but let's see how we can implement that in a

317
00:20:51,988 --> 00:20:55,470
second. We have

318
00:20:55,540 --> 00:20:59,278
seen a few things that are super

319
00:20:59,364 --> 00:21:03,058
key as an organization if you want to apply security

320
00:21:03,144 --> 00:21:06,590
as code successfully in your organization.

321
00:21:06,750 --> 00:21:09,598
The first one is all the vulnerability.

322
00:21:09,694 --> 00:21:13,074
Misconfiguration information needs to be available

323
00:21:13,272 --> 00:21:16,846
to all different parties involved. Platform engineers,

324
00:21:16,878 --> 00:21:20,342
security engineers. They all need to have the consistent view

325
00:21:20,396 --> 00:21:24,354
and access to the tooling so that you don't have long cycles ranging

326
00:21:24,402 --> 00:21:27,960
from you need to deploy it to production just to get the report.

327
00:21:28,590 --> 00:21:32,394
The other one is coverage. The security tooling needs

328
00:21:32,432 --> 00:21:35,510
to support built in runtime. Otherwise it's not helpful.

329
00:21:35,670 --> 00:21:39,354
If it's not including both, it's leading to two

330
00:21:39,392 --> 00:21:43,162
silos. Still, the rules are different and it's

331
00:21:43,226 --> 00:21:47,118
not helpful. That still drives all the craziness that

332
00:21:47,124 --> 00:21:50,990
we had before. The next part is automation,

333
00:21:52,050 --> 00:21:56,350
building security as code. The primary goal here is to build automation

334
00:21:56,430 --> 00:22:00,402
security into the automation process. So the security tooling needs

335
00:22:00,456 --> 00:22:04,206
to adapt to the process you have already. You need to integrate

336
00:22:04,238 --> 00:22:07,906
that into the pipeline so that you can easily do this everywhere.

337
00:22:08,018 --> 00:22:09,974
And then of course, as I said,

338
00:22:10,172 --> 00:22:13,910
extensibility. And this can be achieved through

339
00:22:13,980 --> 00:22:17,410
policy as code where you really define individual

340
00:22:17,580 --> 00:22:21,606
roles on your own. Hopefully the tooling provides

341
00:22:21,638 --> 00:22:25,514
also out of the box policies, which makes

342
00:22:25,552 --> 00:22:28,380
the kickstart when you're trying to implement that.

343
00:22:29,870 --> 00:22:33,690
I'm going to showcase how we do this with our open source projects

344
00:22:33,770 --> 00:22:37,630
to help companies to be more secure. One part of the

345
00:22:37,780 --> 00:22:41,706
CVE discovery, what I brought up early on, is identifying

346
00:22:41,738 --> 00:22:45,662
where things are. For that we have a graph based asset inventory

347
00:22:45,726 --> 00:22:49,262
where you can use GraphQl to query the whole infrastructure,

348
00:22:49,326 --> 00:22:52,558
ranging from Windows, Linux, AWS, Kubernetes,

349
00:22:52,734 --> 00:22:55,450
and even terraform and Kubernetes manifests.

350
00:22:55,470 --> 00:22:59,110
So that gives you an easy way to quickly question

351
00:22:59,260 --> 00:23:02,406
where is what. We will focus right

352
00:23:02,428 --> 00:23:06,722
now on CN spec, which is essentially securing

353
00:23:06,786 --> 00:23:10,826
everything from development to production and to

354
00:23:10,848 --> 00:23:14,374
see it in action. Based on the use case we had earlier,

355
00:23:14,502 --> 00:23:18,422
how do we make sure a bucket is not being exposed

356
00:23:18,566 --> 00:23:21,694
in this case for terraform, we really want to make

357
00:23:21,732 --> 00:23:26,142
sure the block public acls is enabled as

358
00:23:26,196 --> 00:23:29,694
well as block public policy. And we want to enforce this

359
00:23:29,732 --> 00:23:32,030
across all the buckets.

360
00:23:33,250 --> 00:23:36,866
This is good for runtime, but we also said we want to have this

361
00:23:36,888 --> 00:23:40,126
in terraform. So in the same graphql based language

362
00:23:40,158 --> 00:23:43,506
I can query all the terraform resources, can check for

363
00:23:43,608 --> 00:23:47,458
public access blocks and can check are those arguments

364
00:23:47,554 --> 00:23:50,902
being set properly and set to true? If not,

365
00:23:51,036 --> 00:23:54,902
we already see this in our development part, like on the local

366
00:23:54,956 --> 00:23:58,438
IDE, that things are not configured well.

367
00:23:58,524 --> 00:24:01,914
So if we now deploy the automation with Terraform, it would

368
00:24:01,952 --> 00:24:05,594
lead to a public bucket and

369
00:24:05,632 --> 00:24:09,654
that is something that we want to avoid. So doing that early essentially also helps

370
00:24:09,702 --> 00:24:12,190
security teams not to worry.

371
00:24:12,610 --> 00:24:16,142
And one of the things to make this

372
00:24:16,196 --> 00:24:20,014
work in combination is we want to define a

373
00:24:20,052 --> 00:24:24,510
policy that is totally consistent across all those different teams

374
00:24:24,590 --> 00:24:28,594
and it's focusing on the implementation check. So the

375
00:24:28,632 --> 00:24:32,980
bucket should not be public. And based on the technology,

376
00:24:33,430 --> 00:24:37,574
the same check has multiple variants. It essentially says,

377
00:24:37,692 --> 00:24:41,106
hey, if I'm checking terraform,

378
00:24:41,218 --> 00:24:44,710
apply the terraform check. If you apply it against

379
00:24:44,860 --> 00:24:48,846
AWS, check the AWS rule.

380
00:24:48,898 --> 00:24:52,714
And that makes it super, super easy as a team to

381
00:24:52,752 --> 00:24:56,666
define the rule set that you want to have to make your

382
00:24:56,688 --> 00:25:00,306
infrastructure secure. Now you can combine essentially

383
00:25:00,438 --> 00:25:04,346
going from left to right and to kickstart

384
00:25:04,378 --> 00:25:07,838
it. You really don't want to start building everything yourself.

385
00:25:07,924 --> 00:25:11,450
But instead we publish a huge amount of policies.

386
00:25:11,610 --> 00:25:15,250
We have over hundreds of policies available with

387
00:25:15,320 --> 00:25:19,442
more than thousands of checks that help you to start

388
00:25:19,576 --> 00:25:22,878
being secure. Now check out the mondoo registry.

389
00:25:22,974 --> 00:25:26,098
We have open source policies and query packs available

390
00:25:26,264 --> 00:25:30,146
that really like you can apply it. Today it's open source,

391
00:25:30,258 --> 00:25:32,790
don't wait. Secure your infrastructure.

392
00:25:33,850 --> 00:25:37,362
And that really helps us as teams

393
00:25:37,426 --> 00:25:40,922
to be more secure. I just

394
00:25:40,976 --> 00:25:44,698
illustrated very quickly that you can now apply check

395
00:25:44,784 --> 00:25:48,218
in local development. You can check your terraform in your iDe,

396
00:25:48,384 --> 00:25:52,378
you can check it into git, you can check it in a GitHub action,

397
00:25:52,474 --> 00:25:56,286
you can run it in production against an AWS account and then

398
00:25:56,388 --> 00:25:59,680
do it also in production. So now not just,

399
00:26:00,050 --> 00:26:03,566
well, the platform engineers use Terraform to

400
00:26:03,588 --> 00:26:07,422
do all the things. The security team can now work with the platform engineers

401
00:26:07,486 --> 00:26:11,070
to assign policies for the whole pipeline

402
00:26:11,150 --> 00:26:14,974
and really make it work so that you as the

403
00:26:15,032 --> 00:26:17,750
whole team are being more secure.

404
00:26:20,010 --> 00:26:23,666
So we are working for a company that makes security posture

405
00:26:23,698 --> 00:26:27,254
management and that helps you to be

406
00:26:27,292 --> 00:26:30,694
more secure. We built a platform that we are using. We are

407
00:26:30,732 --> 00:26:34,598
using all automation, kubernetes, terraform and we use the product

408
00:26:34,684 --> 00:26:38,102
on a day to day basis to secure us. But we work also

409
00:26:38,156 --> 00:26:42,778
with a huge amount of large enterprises in healthcare,

410
00:26:42,954 --> 00:26:46,590
financial and manufacturing to secure their infrastructure

411
00:26:47,730 --> 00:26:51,598
and have a learning there. So thank you very much for

412
00:26:51,764 --> 00:26:55,326
listening to me. Hopefully this was helpful. In case

413
00:26:55,348 --> 00:26:58,830
you have any question how to apply security as code in your environment,

414
00:26:59,170 --> 00:27:02,798
feel free to reach out and let me know. Happy to help.

415
00:27:02,884 --> 00:27:03,500
Thank you very much.

