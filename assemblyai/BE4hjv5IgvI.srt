1
00:00:20,410 --> 00:00:23,774
Hi, I'll be handling the topic unleashing the power of

2
00:00:23,812 --> 00:00:27,634
rusts building safe, fast, and reliable

3
00:00:27,682 --> 00:00:31,334
software for the future. The rusts is

4
00:00:31,372 --> 00:00:35,026
a modern system programming language that is quickly gaining

5
00:00:35,058 --> 00:00:38,378
popularity due to its ability to build

6
00:00:38,464 --> 00:00:41,990
safe, fast, and reliable software,

7
00:00:42,150 --> 00:00:45,500
and it achieves this by

8
00:00:45,870 --> 00:00:49,226
different methods. And one of them, which is what we'll basically be

9
00:00:49,248 --> 00:00:52,926
talking about in this presentation, is the ownership and

10
00:00:52,948 --> 00:00:56,910
borrowing system. I'll also talk about few

11
00:00:56,980 --> 00:01:01,230
optimization techniques that rusts has put in place that makes

12
00:01:01,300 --> 00:01:04,382
its system and its language so fast.

13
00:01:04,516 --> 00:01:09,310
I will also discuss some of the applications of rusts

14
00:01:09,470 --> 00:01:12,670
so, memory managed mastery so, in memory

15
00:01:12,750 --> 00:01:17,014
management, every single program that we write needs

16
00:01:17,212 --> 00:01:20,678
a form of memory management because

17
00:01:20,764 --> 00:01:24,482
we always tend to allocate memory and dealcate memory

18
00:01:24,626 --> 00:01:28,854
as the program progress. And if we do not handle

19
00:01:28,982 --> 00:01:32,730
this memory well, we tend to cause things like

20
00:01:32,800 --> 00:01:36,342
memory leaks. Now, a memory leak in a program occurs

21
00:01:36,406 --> 00:01:40,346
when the program unintentionally allocates memory, usually on the

22
00:01:40,368 --> 00:01:43,754
heap during its execution, but fails to

23
00:01:43,792 --> 00:01:47,182
release the de allocated, or de allocate that

24
00:01:47,236 --> 00:01:51,294
memory properly before the program terminates. And this can

25
00:01:51,332 --> 00:01:54,878
cause the allocated memory to stay reserved

26
00:01:54,974 --> 00:01:58,830
and unavailable to other parts of the program or other processes.

27
00:01:58,990 --> 00:02:02,110
And this would gradually increase

28
00:02:02,270 --> 00:02:05,830
and cause memory usage to increase over time.

29
00:02:05,900 --> 00:02:09,222
So let's take this example, a c plus plus

30
00:02:09,276 --> 00:02:12,418
example. So what happens here is we allocate

31
00:02:12,514 --> 00:02:16,614
memory into the helps here. And what happens

32
00:02:16,732 --> 00:02:20,666
when the program ends? Nothing happens to

33
00:02:20,768 --> 00:02:24,746
data and this memory allocated is reserved and other

34
00:02:24,848 --> 00:02:28,154
part of the program, other resources cannot use

35
00:02:28,192 --> 00:02:32,042
this memory. I imagine that we actually wrap

36
00:02:32,186 --> 00:02:35,598
line five with something like a wild true,

37
00:02:35,764 --> 00:02:39,018
so it will continue to allocate memory until the program crashes.

38
00:02:39,114 --> 00:02:42,994
So a simple solution would be to just

39
00:02:43,032 --> 00:02:47,474
be a system to basically de allocate data before

40
00:02:47,672 --> 00:02:51,058
the program terminates, which is what we

41
00:02:51,064 --> 00:02:55,074
introduce here on line six. Delete data about what happens when you

42
00:02:55,112 --> 00:02:59,046
unintentionally do not de allocate memory. Or the program has

43
00:02:59,068 --> 00:03:03,014
been so complex, has been designed to be so complex that

44
00:03:03,132 --> 00:03:06,646
it's hard to keep track of allocated memory and de

45
00:03:06,668 --> 00:03:10,490
allocating them becomes an issue. So what

46
00:03:10,560 --> 00:03:14,182
happens when memory leaks happens? So these are the consequences.

47
00:03:14,246 --> 00:03:18,822
You have reduced available memory. You have slow execution of programs

48
00:03:18,966 --> 00:03:22,814
on your laptop or on your system, rather then you

49
00:03:22,852 --> 00:03:26,800
have possible program crashes. Resource saturation and

50
00:03:27,250 --> 00:03:31,214
maintenance challenge in order to address

51
00:03:31,412 --> 00:03:35,470
this issue of memory leak, the garbage collector

52
00:03:35,630 --> 00:03:39,458
comes to the rescue. The garbage collector basically

53
00:03:39,544 --> 00:03:43,262
does the dirty work of memory management.

54
00:03:43,406 --> 00:03:47,074
The garbage collector is a component of many programming

55
00:03:47,122 --> 00:03:50,470
languages and runtime environment that automates the process

56
00:03:50,540 --> 00:03:54,280
of memory management. It basically

57
00:03:54,810 --> 00:03:58,026
goes through the program automatically to

58
00:03:58,048 --> 00:04:01,820
deallocate objects that are no longer using used.

59
00:04:02,990 --> 00:04:06,154
But the garbage collector has its own

60
00:04:06,272 --> 00:04:09,574
drawbacks. It has a performance overhead, for instance,

61
00:04:09,622 --> 00:04:13,530
because you actually need a runtime to be able to continually

62
00:04:13,610 --> 00:04:17,594
run the garbage collector, and this causes a performance

63
00:04:17,642 --> 00:04:21,582
overhead. And also, we don't know when the

64
00:04:21,636 --> 00:04:24,994
garbage collector is going to run. It means it is not

65
00:04:25,112 --> 00:04:28,658
so, so predictable. At any point in time,

66
00:04:28,744 --> 00:04:32,766
the garbage collector can run and is going to put a strain on the resources

67
00:04:32,878 --> 00:04:36,946
of the program itself and is going to take

68
00:04:37,048 --> 00:04:40,610
more resources than required at that point, and basically halting

69
00:04:40,690 --> 00:04:44,054
the program for a few microseconds. So,

70
00:04:44,092 --> 00:04:47,506
which means using a language that has a

71
00:04:47,548 --> 00:04:51,466
garbage collector is not ideal for

72
00:04:51,648 --> 00:04:55,158
use cases where we need a very low latency

73
00:04:55,334 --> 00:04:58,842
in the program execution itself, because we don't know exactly

74
00:04:58,896 --> 00:05:02,446
when it will happen. And if it happens when we need the

75
00:05:02,468 --> 00:05:06,442
response, it can cause the metric

76
00:05:06,506 --> 00:05:10,926
of the program itself to fail. So in

77
00:05:10,948 --> 00:05:14,254
those set of situations like game development,

78
00:05:14,302 --> 00:05:17,922
for instance, we basically want to use languages like C Plus plus

79
00:05:17,976 --> 00:05:22,194
that we can handle the memory ourselves and

80
00:05:22,232 --> 00:05:25,940
de allocate them. But because of the drawbacks of

81
00:05:27,590 --> 00:05:31,246
both manually handling memory and using the garbage

82
00:05:31,278 --> 00:05:35,010
collectible, the ROS came in with its own unique

83
00:05:35,090 --> 00:05:37,918
approach to memory management.

84
00:05:38,114 --> 00:05:42,182
And it does this without using the garbage collector. And you don't

85
00:05:42,246 --> 00:05:45,718
have to manually deallocate memory,

86
00:05:45,814 --> 00:05:49,050
although it gives you the chance to be able to beat

87
00:05:49,470 --> 00:05:52,782
yourself if you want to. Okay, so it now begs the question,

88
00:05:52,836 --> 00:05:56,126
how does rusts handle memory management? Since these are the

89
00:05:56,148 --> 00:05:59,546
two basic ways that we know to efficiently

90
00:05:59,738 --> 00:06:03,298
manage memory. So it does this through a system

91
00:06:03,384 --> 00:06:06,658
of ownership and borrowing and

92
00:06:06,824 --> 00:06:10,530
lifetimes, and ownership transfers and moves. So we'll basically

93
00:06:10,600 --> 00:06:13,780
be talking about this system

94
00:06:15,130 --> 00:06:18,200
in this presentation. So take this example.

95
00:06:19,050 --> 00:06:22,562
We'll use a few examples to demonstrate

96
00:06:22,626 --> 00:06:26,818
exactly how roast handles its memory.

97
00:06:26,914 --> 00:06:30,406
So if you take this example, it's a program that's

98
00:06:30,438 --> 00:06:33,882
supposed to run, but then this is what happens if we take

99
00:06:33,936 --> 00:06:37,546
a function, take ownership for instance, that has an

100
00:06:37,568 --> 00:06:41,310
argument s what take ownership wants to do is

101
00:06:41,460 --> 00:06:45,114
it wants to containerize its memory.

102
00:06:45,242 --> 00:06:48,814
And basically when it's going out of scope, it will

103
00:06:48,852 --> 00:06:53,050
say, okay, I have a few objects

104
00:06:53,210 --> 00:06:56,626
that I own, and since I know they will not be used in

105
00:06:56,648 --> 00:07:00,254
any other place, they allocate them. So the compiler

106
00:07:00,302 --> 00:07:04,066
will include something like drop, like a function at

107
00:07:04,088 --> 00:07:07,800
the end of the program, or calls drop on the

108
00:07:08,410 --> 00:07:11,574
own variables, basically. So by the time

109
00:07:11,612 --> 00:07:15,254
you finish running the ownership, we are very sure that

110
00:07:15,292 --> 00:07:18,790
on line ten s is dropped, it is the allocated.

111
00:07:18,950 --> 00:07:24,310
But what happens if you try to access that memory

112
00:07:24,390 --> 00:07:28,122
after them, after line three. So on line three you call

113
00:07:28,256 --> 00:07:31,274
deconship. And anything you

114
00:07:31,312 --> 00:07:34,586
pass into this function, deconnership is dropped

115
00:07:34,698 --> 00:07:37,550
here because it is basically moved,

116
00:07:38,130 --> 00:07:41,710
this string is basically moved into this place. And it means that

117
00:07:41,860 --> 00:07:45,650
if we allow this program to run, we have a no pointer

118
00:07:45,990 --> 00:07:49,426
issue in this

119
00:07:49,448 --> 00:07:52,974
particular place. So this is one of the ways that roast handles

120
00:07:53,022 --> 00:07:56,454
it. So to recap, again, it's a

121
00:07:56,572 --> 00:07:59,506
simple philosophy.

122
00:07:59,698 --> 00:08:03,046
Any data I own, the moment I'm going out

123
00:08:03,068 --> 00:08:06,566
of scope, I'm going to destroy them basically

124
00:08:06,668 --> 00:08:10,262
and deallocate the memory.

125
00:08:10,326 --> 00:08:14,074
So that's basically it. So the compiler really

126
00:08:14,272 --> 00:08:18,086
helps to enforce these rules

127
00:08:18,118 --> 00:08:21,286
and make sure we don't have things like no pointer exception

128
00:08:21,318 --> 00:08:24,606
which we would have had here. And this is the errors that

129
00:08:24,628 --> 00:08:28,190
would have gotten from this programming if we had tried to run it. We have,

130
00:08:28,260 --> 00:08:31,374
this move occurs because string has a type

131
00:08:31,412 --> 00:08:35,474
string which does not implements copy traits. And the value is

132
00:08:35,512 --> 00:08:38,622
basically moved into this empty konashi and it doesn't

133
00:08:38,686 --> 00:08:42,722
exist in the scope of does not leave enough to reach line

134
00:08:42,776 --> 00:08:46,742
four, basically. Okay, so what

135
00:08:46,796 --> 00:08:51,080
if we want to use the value returned from

136
00:08:52,170 --> 00:08:55,814
the ownership? So we can basically assign that value

137
00:08:56,012 --> 00:08:59,478
to another variable which lives long enough to

138
00:08:59,564 --> 00:09:02,698
reach it. But it begs the question, okay, what if we still want to

139
00:09:02,704 --> 00:09:06,614
use string after we run take ownership?

140
00:09:06,662 --> 00:09:10,586
So what we do, instead of

141
00:09:10,608 --> 00:09:14,030
moving string into take ownership, what we'll do is that we'll say,

142
00:09:14,180 --> 00:09:18,202
okay, since you would go out of scope

143
00:09:18,346 --> 00:09:21,518
and you are going to destroy that, the main function will

144
00:09:21,524 --> 00:09:24,974
basically tell people ownership, that since take

145
00:09:25,012 --> 00:09:27,986
ownership you are going to go out of scope, and when you do go out

146
00:09:28,008 --> 00:09:31,538
of code, you are going to drop anything I give on to

147
00:09:31,544 --> 00:09:35,742
you. Anything I give you. Why not I lend you a reference

148
00:09:35,806 --> 00:09:39,074
instead and take ownership, can borrow

149
00:09:39,122 --> 00:09:43,126
a reference and it knows that, okay, it doesn't own the reference and

150
00:09:43,148 --> 00:09:47,058
it doesn't destroy it by the end of its own cycle.

151
00:09:47,234 --> 00:09:51,334
So let's take an example which is using this

152
00:09:51,372 --> 00:09:55,418
calculate means. So this is the example,

153
00:09:55,504 --> 00:09:59,798
which is basically like the previous one. And we still have this issue

154
00:09:59,984 --> 00:10:03,278
of string not living long enough to reach

155
00:10:03,364 --> 00:10:07,374
line five. Okay, so the philosophy is line

156
00:10:07,492 --> 00:10:11,534
two, we create strings. Line three, we move

157
00:10:11,732 --> 00:10:15,374
strings into calculate length. When calculated length

158
00:10:15,422 --> 00:10:18,706
reaches line eleven, it goes out of scope and it

159
00:10:18,728 --> 00:10:22,094
calls drop on s. So since you've moved

160
00:10:22,142 --> 00:10:25,938
string into this place, it owns s and

161
00:10:26,024 --> 00:10:29,218
it drops it and basically de allocates the memory.

162
00:10:29,314 --> 00:10:32,422
So we don't have string. Again, it does not leave

163
00:10:32,556 --> 00:10:36,406
to see line four. So by then get to line five and you're trying

164
00:10:36,428 --> 00:10:39,674
to access it, the compiler is going to complain and

165
00:10:39,712 --> 00:10:43,498
tell you the value has already been moved. So basically

166
00:10:43,584 --> 00:10:50,874
to fix this, we can say okay, calculate length instead

167
00:10:50,912 --> 00:10:54,302
of me, calculate length owning any value given

168
00:10:54,356 --> 00:10:57,774
to me, why not I borrow the

169
00:10:57,812 --> 00:11:01,390
value or the reference to that value

170
00:11:01,460 --> 00:11:05,266
instead? So what happens here is calculate length to say,

171
00:11:05,288 --> 00:11:11,598
okay, I just want something borrowed and I'm

172
00:11:11,614 --> 00:11:15,426
going to use it. And when

173
00:11:15,528 --> 00:11:18,914
I'm done I'm not going to dealocate it. So basically by line

174
00:11:18,952 --> 00:11:22,626
twelve, when calculate means runs by line twelve, it checks

175
00:11:22,658 --> 00:11:26,214
for everything it owns. It does not own s, it is a borrowed value,

176
00:11:26,252 --> 00:11:30,106
so it does not diallocate it. And we know in the main function

177
00:11:30,208 --> 00:11:33,686
if that is the philosophy, and if that is how calculate length

178
00:11:33,718 --> 00:11:37,514
is declared, it means that after line four,

179
00:11:37,712 --> 00:11:40,974
after line three, we can still be

180
00:11:41,012 --> 00:11:44,266
sure that this string that is declared

181
00:11:44,298 --> 00:11:48,126
on line two is not the allocated. So basically

182
00:11:48,308 --> 00:11:52,346
it creates a reference and passes it to calculate length. And calculate

183
00:11:52,378 --> 00:11:56,506
length doesn't own it, so it does not de allocate

184
00:11:56,538 --> 00:11:59,794
it, which means that this string itself

185
00:11:59,912 --> 00:12:03,746
can still be used in line five. It still lives long enough to

186
00:12:03,768 --> 00:12:07,830
be able to get to line five. So it's a very simple principle

187
00:12:10,490 --> 00:12:14,230
which allows the rusts system

188
00:12:14,300 --> 00:12:18,730
to be able to manage the memory in a tight knit manner and not

189
00:12:18,800 --> 00:12:22,614
allow any memory to leak. What if want to handle

190
00:12:22,742 --> 00:12:26,678
a scenario that is multitraded, for instance?

191
00:12:26,854 --> 00:12:29,690
Okay, but before we get to that,

192
00:12:29,760 --> 00:12:33,974
let's first talk about different ways

193
00:12:34,032 --> 00:12:37,738
we can handle this. For instance, if you actually want to modify in some cases,

194
00:12:37,834 --> 00:12:41,662
and in some other cases if don't modify. Okay, so this

195
00:12:41,716 --> 00:12:45,426
is a typescript file. It basically

196
00:12:45,528 --> 00:12:49,538
has a class of user that has a first name,

197
00:12:49,624 --> 00:12:53,314
last name and an age, and also a constructor that

198
00:12:53,352 --> 00:12:57,142
takes in these arguments, and a function which

199
00:12:57,196 --> 00:13:00,950
is set h and the set, it just changes the value of each,

200
00:13:01,020 --> 00:13:04,214
that's all. So in our main function we

201
00:13:04,252 --> 00:13:08,290
create a variable online 18 named user,

202
00:13:08,450 --> 00:13:12,074
and we have a function that is

203
00:13:12,112 --> 00:13:15,526
called cannot modify user. So we want this cannot modify user

204
00:13:15,558 --> 00:13:19,158
to work in such a way that it just uses the value from user,

205
00:13:19,174 --> 00:13:22,798
but it does not modify the user object itself.

206
00:13:22,964 --> 00:13:26,960
Okay, I want a way to be able to enforce this

207
00:13:29,010 --> 00:13:33,182
and not be able to change the value of user by mistake.

208
00:13:33,326 --> 00:13:36,642
But what if I do? User set

209
00:13:36,696 --> 00:13:40,786
h in cannot modify user. It changes the value

210
00:13:40,968 --> 00:13:44,642
of the user object itself. It changes value,

211
00:13:44,696 --> 00:13:48,520
and that is not what we want. So to fix this issue in

212
00:13:48,890 --> 00:13:53,378
typescript, we can basically do something like object freeze

213
00:13:53,474 --> 00:13:57,334
and it freezes the values of a user and you

214
00:13:57,372 --> 00:14:00,794
cannot change it after this point. And this fixes the issue

215
00:14:00,832 --> 00:14:04,458
because when we try to run

216
00:14:04,544 --> 00:14:07,242
this program, when it gets to line 27,

217
00:14:07,376 --> 00:14:10,934
it throws an error, which is what we want, that we cannot

218
00:14:10,982 --> 00:14:14,254
assign a value to the

219
00:14:14,292 --> 00:14:19,374
read property. But then we are changing the

220
00:14:19,412 --> 00:14:22,954
behavior of user because we want a function not to modify

221
00:14:23,002 --> 00:14:26,846
it. What if we want another function to modify it? So let's explore

222
00:14:26,958 --> 00:14:30,338
that direction. So if we have another function which

223
00:14:30,344 --> 00:14:33,586
is can modify user now, for instance, and we now

224
00:14:33,608 --> 00:14:36,934
call user set h 44, this function does

225
00:14:36,972 --> 00:14:40,230
not work because we are using object

226
00:14:40,300 --> 00:14:43,766
of freeze. They mix it red only.

227
00:14:43,948 --> 00:14:47,334
And this behavior is something that we should be able to write out

228
00:14:47,372 --> 00:14:51,398
in the language and not do it unintentionally.

229
00:14:51,494 --> 00:14:55,158
Because if we remove this object of freeze, we can mistakenly

230
00:14:55,334 --> 00:14:59,046
modify user inside the cannot modify

231
00:14:59,158 --> 00:15:02,394
user function, which is not what we want. So this is

232
00:15:02,432 --> 00:15:06,430
Ross's approach to this. So we have basically

233
00:15:06,500 --> 00:15:09,934
the same code. We have struct user, which has the first name,

234
00:15:09,972 --> 00:15:14,258
last name and age. And it has a

235
00:15:14,344 --> 00:15:17,682
method which is set age.

236
00:15:17,816 --> 00:15:22,066
So on line 15, we create a function

237
00:15:22,168 --> 00:15:26,098
user and it is made mutable because

238
00:15:26,184 --> 00:15:30,040
on line 22, we can modify it. So when we create

239
00:15:31,850 --> 00:15:36,198
a function cannot modify from line 27 to 29

240
00:15:36,364 --> 00:15:40,506
that takes in a reference to user. So basically it

241
00:15:40,528 --> 00:15:43,802
just borrows user. And anything it does, it does not

242
00:15:43,856 --> 00:15:47,994
modify user. Okay, this function,

243
00:15:48,192 --> 00:15:51,882
and if we try to modify user inside this function,

244
00:15:51,936 --> 00:15:55,338
the program does not compile. The compiler would complain

245
00:15:55,434 --> 00:15:58,990
and basically scream at us. So if we try to do that

246
00:15:59,140 --> 00:16:02,474
inside this cannot modify function and we do user set

247
00:16:02,532 --> 00:16:06,626
h, it does not allow us to modify it because

248
00:16:06,808 --> 00:16:10,814
we are passing a non mutable function, a reference

249
00:16:10,942 --> 00:16:14,786
to cannot modify, which is the bbl we want. And yes,

250
00:16:14,968 --> 00:16:18,100
it's acting exactly do you want and

251
00:16:18,790 --> 00:16:22,326
the same way in this can modify user, we can

252
00:16:22,348 --> 00:16:25,526
use this and mute user. And we

253
00:16:25,548 --> 00:16:30,022
can basically specify that this can modify function

254
00:16:30,156 --> 00:16:33,434
is telling the main function that, okay, if you are passing me

255
00:16:33,472 --> 00:16:37,494
a value, I am going to be able to modify

256
00:16:37,542 --> 00:16:41,002
it. So that's basically what is happening. And we're able to modify

257
00:16:41,066 --> 00:16:44,782
so we can have this implementation and also

258
00:16:44,916 --> 00:16:48,398
be able to efficiently predict how

259
00:16:48,564 --> 00:16:52,618
the behavior is going to, the behavior of the

260
00:16:52,644 --> 00:16:55,934
program is going to be without seeing the implementation

261
00:16:55,982 --> 00:16:59,922
of cannot modify and can modify. So if we have this type

262
00:16:59,976 --> 00:17:03,842
definition, imagine we don't know what's happening

263
00:17:03,896 --> 00:17:07,470
inside it. We can be very sure that when we

264
00:17:07,480 --> 00:17:10,786
call cannot modify, the user object is not modified,

265
00:17:10,978 --> 00:17:14,710
is not modified. And when you call can modify because he's saying,

266
00:17:14,780 --> 00:17:18,434
okay, I would be able to mute it by borrowing immutable

267
00:17:18,482 --> 00:17:22,566
reference. He's saying that, okay, it will be able to modify,

268
00:17:22,758 --> 00:17:27,510
which is very different from the typescript version,

269
00:17:27,670 --> 00:17:31,360
which would not allow us to do that, and the program is

270
00:17:31,730 --> 00:17:35,546
more unpredictable. Okay, so another scenario

271
00:17:35,578 --> 00:17:37,600
where we typically want to use,

272
00:17:38,850 --> 00:17:42,490
another scenario where you would want to

273
00:17:42,580 --> 00:17:46,606
imagine how memory is being passed is in multitraded

274
00:17:46,718 --> 00:17:50,830
programs, and many programs are multitraded.

275
00:17:50,910 --> 00:17:54,594
So if we take this example,

276
00:17:54,792 --> 00:17:58,566
for instance, we basically have the same thing for the strokes and

277
00:17:58,588 --> 00:18:02,354
the animator. So on line 17

278
00:18:02,402 --> 00:18:06,246
we are creating a new user, and on line 23 we are basically creating a

279
00:18:06,268 --> 00:18:09,754
new trade, spawning a new trade and making sure it

280
00:18:09,792 --> 00:18:13,446
runs on line 27. Another thing to notice in rusts,

281
00:18:13,558 --> 00:18:17,338
trades are lazy. So until you pull them,

282
00:18:17,504 --> 00:18:21,326
they are not going to run. So the trade actually starts running on line

283
00:18:21,428 --> 00:18:25,040
27. So what happens is

284
00:18:27,810 --> 00:18:31,742
this user variable is moved into this

285
00:18:31,796 --> 00:18:35,774
scope and we can tell the compiler to

286
00:18:35,812 --> 00:18:39,634
move this variable into this code by specifying this

287
00:18:39,672 --> 00:18:43,058
move keyword. Basically this program

288
00:18:43,144 --> 00:18:46,706
would run as we want it to run. So fine. So when it

289
00:18:46,728 --> 00:18:50,086
gets to line ten, seven to run this and it basically move user. And when

290
00:18:50,108 --> 00:18:52,918
it's done with this, when it gets to line 25,

291
00:18:53,004 --> 00:18:56,470
it dealocates user. Perfect. But what happens

292
00:18:56,540 --> 00:19:00,214
if we have more than one trade?

293
00:19:00,342 --> 00:19:03,370
So we have trade one, trade two.

294
00:19:03,440 --> 00:19:06,682
So let's just move trade. Okay, online. 31,

295
00:19:06,736 --> 00:19:09,734
we are saying, okay, run the first trade.

296
00:19:09,862 --> 00:19:13,358
So we'll come to this trade and we say

297
00:19:13,524 --> 00:19:17,680
we move user into this trade. When we get to line 25,

298
00:19:18,530 --> 00:19:22,174
the trade sees user as evaluated its own,

299
00:19:22,212 --> 00:19:26,034
so it deallocates it. So by the time we come back to line 32

300
00:19:26,072 --> 00:19:29,970
to run this second trade, the user

301
00:19:31,110 --> 00:19:34,354
variable does not exist anymore because it has

302
00:19:34,392 --> 00:19:37,794
already been reallocated by handle by

303
00:19:37,912 --> 00:19:41,506
the first trade, which is not what we want. But the compiler also complains

304
00:19:41,538 --> 00:19:44,040
and tells us we need to.

305
00:19:45,290 --> 00:19:48,902
The value has already been moved into this

306
00:19:48,956 --> 00:19:52,874
first trade scope, so we need a

307
00:19:52,912 --> 00:19:56,586
different way to handle this. So one of

308
00:19:56,608 --> 00:20:00,234
the easiest way to handle this is using an

309
00:20:00,272 --> 00:20:05,078
arc, which is an atomically referenced counting

310
00:20:05,254 --> 00:20:08,522
structure. Basically it's wrapped around the user

311
00:20:08,666 --> 00:20:12,382
and you can create different clones of that which you can now move

312
00:20:12,436 --> 00:20:15,714
into different contexts. So the arc allows you to be able to

313
00:20:15,752 --> 00:20:19,380
create multiple ownership of a particular

314
00:20:19,990 --> 00:20:23,678
object. So if I wrap an arc over this user,

315
00:20:23,694 --> 00:20:27,366
I can clone it, then move the clone value into the

316
00:20:27,388 --> 00:20:30,742
first trade, then clone the second one, then move the second value

317
00:20:30,796 --> 00:20:34,646
into the second trace, basically, and the

318
00:20:34,668 --> 00:20:38,070
program runs as we expect. Okay,

319
00:20:38,140 --> 00:20:42,546
so let's check some optimization techniques

320
00:20:42,658 --> 00:20:46,506
by rusts by the ROS system. So rusts is a program language that

321
00:20:46,528 --> 00:20:50,266
emphasizes safety and safety, performance and

322
00:20:50,288 --> 00:20:54,022
concurrency. It provides a variety of optimization techniques

323
00:20:54,086 --> 00:20:57,310
to help developers write efficient code without

324
00:20:57,380 --> 00:21:01,726
sacrificing safety. And one thing you should notice many

325
00:21:01,828 --> 00:21:05,282
of these optimization you do not need to write

326
00:21:05,336 --> 00:21:09,010
yourself. So let's take the first one, which is the zero cost

327
00:21:09,080 --> 00:21:12,654
abstraction. So the zero cost abstraction in ROS

328
00:21:12,702 --> 00:21:17,026
that when ROS gives us a high level abstraction,

329
00:21:17,218 --> 00:21:20,822
they do it in such a way that it does not incur any

330
00:21:20,956 --> 00:21:23,590
runtime overhead. For instance,

331
00:21:24,810 --> 00:21:28,746
the ownership and borrowing system in

332
00:21:28,768 --> 00:21:32,170
ROS, the ownership and borrowing system in rusts does not

333
00:21:32,240 --> 00:21:36,250
require us to be able to drop

334
00:21:37,070 --> 00:21:39,930
free a particular memory by ourselves,

335
00:21:40,290 --> 00:21:43,994
but it basically abstracts

336
00:21:44,122 --> 00:21:48,378
the manual memory management

337
00:21:48,554 --> 00:21:51,822
by itself. And it does it in such a way that

338
00:21:51,876 --> 00:21:55,262
does not incur any runtime overhead by using

339
00:21:55,316 --> 00:21:58,402
a garbage collector, for instance. Okay,

340
00:21:58,456 --> 00:22:02,674
so another example of zero

341
00:22:02,712 --> 00:22:06,242
cost abstraction is when you are using iterators.

342
00:22:06,306 --> 00:22:10,342
Iterators in roast have

343
00:22:10,396 --> 00:22:13,926
zero cost abstraction. If you compare it in

344
00:22:13,948 --> 00:22:18,374
roast to something like iterators in C sharp or iterators

345
00:22:18,422 --> 00:22:21,946
in Java, the iterators in C sharp and

346
00:22:21,968 --> 00:22:25,866
Java, they are typically slower than you writing out the

347
00:22:25,888 --> 00:22:29,866
iterator yourself. So for instance, if you have an array and

348
00:22:29,968 --> 00:22:33,550
you use an iterator to map the array into something else,

349
00:22:33,700 --> 00:22:37,694
the execution speed in both C sharp and Java is

350
00:22:37,812 --> 00:22:41,834
much lesser than if you actually write out your loop manually

351
00:22:41,962 --> 00:22:45,250
and do your mapping yourself. But in roast,

352
00:22:46,310 --> 00:22:49,678
using the iterator would be faster

353
00:22:49,774 --> 00:22:53,730
than writing it out yourself. Basically, roast features

354
00:22:54,150 --> 00:22:57,686
that every abstraction, every high level abstraction that

355
00:22:57,708 --> 00:23:01,890
is being given to the programmer is optimized

356
00:23:01,970 --> 00:23:05,874
in such a way that if the programmer handwrites

357
00:23:05,922 --> 00:23:09,882
the logic, it will not be as fast or as optimized as

358
00:23:10,016 --> 00:23:14,170
the abstraction that they are giving. So another

359
00:23:14,240 --> 00:23:17,798
way to suggest to the compiler for an optimization

360
00:23:17,894 --> 00:23:21,986
is inline function. So an inline attribute in rust

361
00:23:22,118 --> 00:23:26,190
is a compile directive that tells the compile to inline the function

362
00:23:26,340 --> 00:23:29,914
at the call site. This means that the compiler will copy

363
00:23:29,962 --> 00:23:34,014
the body of the function into the caller's encode

364
00:23:34,142 --> 00:23:37,954
instead of calling the function as a separate entity. This can

365
00:23:37,992 --> 00:23:41,678
improve performance by eliminating the overhead

366
00:23:41,854 --> 00:23:45,534
of the function calls such as stack frame

367
00:23:45,582 --> 00:23:49,238
setup and theorem. The compiler will not

368
00:23:49,324 --> 00:23:52,582
always inline a function that is marked with

369
00:23:52,716 --> 00:23:56,214
the inline attribute. The compiler will make a decision based on the number

370
00:23:56,252 --> 00:23:59,514
of factors such as the size of the function,

371
00:23:59,712 --> 00:24:03,318
the optimization level, and the target architecture.

372
00:24:03,494 --> 00:24:06,886
So this is how to use the inline attributes

373
00:24:07,078 --> 00:24:10,254
in declarative in rusts. So you just

374
00:24:10,292 --> 00:24:13,678
put the inline like is done online one here,

375
00:24:13,844 --> 00:24:17,626
and the compiler knows what to do. It basically copies

376
00:24:17,738 --> 00:24:21,854
the implementation and

377
00:24:22,052 --> 00:24:25,682
paste them here itself. So doing

378
00:24:25,736 --> 00:24:29,220
that would remove the overhead of calling

379
00:24:29,750 --> 00:24:33,300
the function itself. Basically,

380
00:24:34,230 --> 00:24:37,926
using the inline directive is the

381
00:24:37,948 --> 00:24:41,366
best places to use them is when you have the id case would be when

382
00:24:41,388 --> 00:24:45,554
you have smaller functions, that smaller

383
00:24:45,602 --> 00:24:48,954
functions are called multiple times or they are

384
00:24:48,992 --> 00:24:52,346
called frequently in your program. So you can use

385
00:24:52,368 --> 00:24:55,830
the inline declaration attributes

386
00:24:55,910 --> 00:25:00,338
on your function. Okay, so another optimization

387
00:25:00,534 --> 00:25:04,250
technique is using the constant propagation.

388
00:25:04,330 --> 00:25:07,726
So the constant propagation in ROS is basically the

389
00:25:07,748 --> 00:25:12,080
compiler replacing expression. It's basically

390
00:25:12,950 --> 00:25:18,082
evaluates an expression that would

391
00:25:18,136 --> 00:25:22,354
always evaluate into a constant and replacing it with

392
00:25:22,472 --> 00:25:25,640
the value, the evaluated value

393
00:25:27,130 --> 00:25:31,094
at the point of evaluation. So what it basically does

394
00:25:31,132 --> 00:25:35,094
is it would improve performance by eliminating the need to

395
00:25:35,132 --> 00:25:37,790
evaluate the expression at runtime.

396
00:25:37,970 --> 00:25:41,686
So the ROS

397
00:25:41,718 --> 00:25:45,114
compile can propagate constant expression in a number

398
00:25:45,152 --> 00:25:49,014
of ways. For example, if an expression contains a variable

399
00:25:49,142 --> 00:25:52,746
that has been assigned a constant value, the compiler

400
00:25:52,778 --> 00:25:55,886
can replace the variable with its value.

401
00:25:56,068 --> 00:25:59,674
The compiler can also propagate through arithmetic

402
00:25:59,722 --> 00:26:04,046
operations such as addition and multiplication.

403
00:26:04,238 --> 00:26:08,146
For instance, using in this program,

404
00:26:08,328 --> 00:26:12,034
if you uses a const file, you are telling the

405
00:26:12,232 --> 00:26:15,846
compiler that, okay, this is a constant value and it will basically

406
00:26:15,948 --> 00:26:19,634
propagate this value into this place. So the compiler

407
00:26:19,682 --> 00:26:23,494
is also smart enough to see that, okay, radius has not

408
00:26:23,532 --> 00:26:27,094
been reassigned, the value

409
00:26:27,132 --> 00:26:30,826
of radius has not changed. So the compiler would do two

410
00:26:30,928 --> 00:26:34,714
times, five times the value of PI and replace this expression with that

411
00:26:34,752 --> 00:26:38,534
value at compile time. And what that does is it should eliminate

412
00:26:38,582 --> 00:26:42,310
the need for evaluating this at runtime.

413
00:26:42,470 --> 00:26:46,222
Okay, so using the static variable using static variable is very similar

414
00:26:46,276 --> 00:26:49,886
to using the const. But the major difference, or one of

415
00:26:49,908 --> 00:26:54,462
the biggest difference, is that when you are using the static variable,

416
00:26:54,606 --> 00:26:58,402
it basically creates a value on the heap and gives

417
00:26:58,456 --> 00:27:02,260
it a lifetime of static, which means it lives

418
00:27:02,710 --> 00:27:06,374
as long as the program lives. It reallocates this

419
00:27:06,412 --> 00:27:09,394
memory when the program terminates,

420
00:27:09,442 --> 00:27:13,302
basically. And the compiler can also use this value

421
00:27:13,356 --> 00:27:16,694
for constant propagation. As we've discussed in the

422
00:27:16,732 --> 00:27:20,322
previous slide, by utilizing

423
00:27:20,386 --> 00:27:24,422
constant and static variable rusts compiler can perform various

424
00:27:24,486 --> 00:27:28,006
optimization, including constant propagation,

425
00:27:28,118 --> 00:27:31,614
which can lead to more efficient generated code. This optimization can

426
00:27:31,652 --> 00:27:35,534
eliminate unnecessary runtime calculations and improve the

427
00:27:35,572 --> 00:27:39,562
overall performance of Rusts programs. Okay, some usage

428
00:27:39,626 --> 00:27:43,502
of roast we see the usage of roast in operating

429
00:27:43,566 --> 00:27:46,260
system. And yes,

430
00:27:47,110 --> 00:27:50,862
it's not a surprising usage because one of the biggest

431
00:27:51,006 --> 00:27:53,758
issues with operating system is memory leaks.

432
00:27:53,934 --> 00:27:57,970
And there are some notable projects that are already

433
00:27:58,040 --> 00:28:01,618
using roast for the operating system, something like Redux OS

434
00:28:01,794 --> 00:28:06,082
and OS and even Microsoft is also writing the core Windows

435
00:28:06,146 --> 00:28:09,782
libraries in rusts and we have

436
00:28:09,836 --> 00:28:13,580
web servers developers so

437
00:28:15,550 --> 00:28:19,958
because of the advantages that roast brings to the table we

438
00:28:19,984 --> 00:28:23,054
can also use it on savers and we already have

439
00:28:23,092 --> 00:28:26,970
projects like Arctics and Rocket that provides framework

440
00:28:27,050 --> 00:28:31,082
that leverages roast and concurrency model and memory

441
00:28:31,146 --> 00:28:34,260
safety to develop robust web application.

442
00:28:34,710 --> 00:28:38,242
Then we have other applications of rusts something

443
00:28:38,296 --> 00:28:41,620
like in databases, game development, embedded system

444
00:28:41,990 --> 00:28:45,586
blockchain and cryptocurrency so

445
00:28:45,608 --> 00:28:49,602
we also have in networking you can

446
00:28:49,656 --> 00:28:53,526
use roast. So basically for a recap is

447
00:28:53,548 --> 00:28:57,014
that most of the optimization I want to do in rusts has

448
00:28:57,052 --> 00:29:00,280
already been done by the developers of rusts themselves

449
00:29:00,650 --> 00:29:04,358
although there are some instances that we can optimize our code

450
00:29:04,524 --> 00:29:08,040
and to also run

451
00:29:08,650 --> 00:29:11,722
very fast or to improve the performance.

452
00:29:11,866 --> 00:29:15,610
But then rusts has also done a lot of optimization

453
00:29:15,770 --> 00:29:19,578
and we've never even talked about things like unwrapping of loops

454
00:29:19,674 --> 00:29:23,550
and some other optimization technique that rusts used.

455
00:29:23,700 --> 00:29:26,958
So thank you for listening and tuning into this talk.

456
00:29:27,044 --> 00:29:31,470
And also remember with great power comes great responsibility.

457
00:29:31,890 --> 00:29:32,380
Thank you.

