1
00:01:44,670 --> 00:01:49,342
Hello, let us talk about Metric collector and analyzer.

2
00:01:49,486 --> 00:01:53,070
My name is Timo Pagl. I'm a Devsecops trainer

3
00:01:53,150 --> 00:01:57,426
and strategist. I'm an open source fan and an

4
00:01:57,528 --> 00:02:00,686
open knowledge fan boy and I'm

5
00:02:00,718 --> 00:02:04,162
a university lecturer. In this talk I will provide

6
00:02:04,216 --> 00:02:07,754
you now with an introduction. Afterwards we will

7
00:02:07,792 --> 00:02:11,114
take a look at the architecture of Metrica and then we will

8
00:02:11,152 --> 00:02:12,890
come to an outlook.

9
00:02:16,110 --> 00:02:19,142
I am also the leader of the devsector Ops maturity

10
00:02:19,206 --> 00:02:22,590
model and the question first

11
00:02:22,660 --> 00:02:26,282
is I say why do you need security maturity

12
00:02:26,346 --> 00:02:29,866
models when you want to enhance

13
00:02:29,898 --> 00:02:33,374
the security in your area of influence? Then you ask

14
00:02:33,412 --> 00:02:37,090
yourself how to enhance the security and there are so many

15
00:02:37,160 --> 00:02:41,330
options you have that you need to think about how to prioritize

16
00:02:42,070 --> 00:02:45,458
to understand the options. I like to categorize

17
00:02:45,554 --> 00:02:48,966
in DevOps strategies. So how do

18
00:02:48,988 --> 00:02:52,482
you harden your DevOps processes

19
00:02:52,626 --> 00:02:55,894
and technologies? And then the

20
00:02:55,932 --> 00:02:59,754
question is how can you enhance your security through

21
00:02:59,872 --> 00:03:03,546
DevOps strategies? So how can you utilize the strategies which

22
00:03:03,568 --> 00:03:07,254
are already there? For example, you can utilize a build process to integrate

23
00:03:07,302 --> 00:03:11,434
security testing there or you're having information gathering

24
00:03:11,562 --> 00:03:15,050
maybe with a stack like Prometheus

25
00:03:15,210 --> 00:03:19,018
and Grafana which collection the different metrics.

26
00:03:19,114 --> 00:03:23,090
So there you just need to adjust the metrics that you're getting

27
00:03:23,160 --> 00:03:25,970
alerted when there is security incidents.

28
00:03:26,790 --> 00:03:31,362
I regularly perform assessments and

29
00:03:31,496 --> 00:03:35,290
these assessments are performed quarterly,

30
00:03:35,470 --> 00:03:38,854
yearly or bi yearly. But as

31
00:03:38,892 --> 00:03:42,710
a product team I want fast feedback for my

32
00:03:42,780 --> 00:03:46,642
performed security activities to stay motivated.

33
00:03:46,786 --> 00:03:50,970
So as a product team I want

34
00:03:51,120 --> 00:03:54,554
to implement an activity and then get

35
00:03:54,592 --> 00:03:57,930
feedback. An example in the area of security

36
00:03:58,000 --> 00:04:01,822
testing is the meantime to

37
00:04:01,876 --> 00:04:04,510
respond to vulnerabilities.

38
00:04:06,770 --> 00:04:10,586
I might have performed

39
00:04:10,618 --> 00:04:14,146
very well. Then I want to see it reflected in the

40
00:04:14,168 --> 00:04:17,538
feedback. And in case I haven't performed very well, I also want to

41
00:04:17,544 --> 00:04:21,966
get notified. Hey, it's currently not going as planned

42
00:04:22,158 --> 00:04:26,310
and there are things which we can automate.

43
00:04:26,650 --> 00:04:30,530
So the question is how do we automate

44
00:04:30,610 --> 00:04:32,310
devsecops assessments?

45
00:04:34,490 --> 00:04:38,006
And the solution is Metrica. In Metricca

46
00:04:38,038 --> 00:04:42,186
we have manual assessments which we perform in

47
00:04:42,208 --> 00:04:45,974
a YAmL structure and automatic

48
00:04:46,102 --> 00:04:50,334
assessments where we pull the

49
00:04:50,452 --> 00:04:54,302
information from various sources like

50
00:04:54,356 --> 00:04:58,830
Jira, other security tools like

51
00:04:58,900 --> 00:05:00,080
dependency track,

52
00:05:02,470 --> 00:05:07,794
confluence, maybe even from

53
00:05:07,832 --> 00:05:11,454
Azure active directory.

54
00:05:11,582 --> 00:05:15,560
So there are various tools where we can get information from

55
00:05:19,130 --> 00:05:22,310
the metric collector and analyzer.

56
00:05:22,810 --> 00:05:26,246
Here you see an overview for it. So on the

57
00:05:26,268 --> 00:05:30,438
bottom you have two different or three different YAML files.

58
00:05:30,534 --> 00:05:34,778
You have activities per team and per application.

59
00:05:34,944 --> 00:05:38,522
So some activities are per

60
00:05:38,576 --> 00:05:42,238
application and some activities per team. So when you have for example a security

61
00:05:42,324 --> 00:05:46,080
champion per team then this is team based

62
00:05:46,930 --> 00:05:51,086
and the activity status is inherited to

63
00:05:51,188 --> 00:05:54,786
the applications of that team. You have a one to n relationship

64
00:05:54,888 --> 00:05:58,158
here and then you have maturity model definitions.

65
00:05:58,254 --> 00:06:01,650
So on which level is a specific

66
00:06:01,800 --> 00:06:05,358
activity? What is the threshold for that activity that

67
00:06:05,384 --> 00:06:08,834
you say it is performed for an application or it's not performed,

68
00:06:08,882 --> 00:06:12,550
that are the information we store in a configuration yaml.

69
00:06:13,770 --> 00:06:17,094
But manual assessments have a lag. So for

70
00:06:17,132 --> 00:06:20,842
example, when you do thread modeling, you document the thread modeling in

71
00:06:20,896 --> 00:06:24,534
your tool, for example in confluence.

72
00:06:24,662 --> 00:06:28,246
And afterwards you need to document it again in YAML,

73
00:06:28,278 --> 00:06:32,074
or the product owner or the product team needs to document

74
00:06:32,122 --> 00:06:35,034
it in the YAML.

75
00:06:35,082 --> 00:06:38,334
In addition, there the collector comes into

76
00:06:38,372 --> 00:06:42,878
place. The collector automatically collection from various different sources

77
00:06:42,974 --> 00:06:46,574
like confluence, in case you document your threat modeling in confluence.

78
00:06:46,702 --> 00:06:50,914
And then you maybe have a label on that page

79
00:06:51,112 --> 00:06:54,434
called threat modeling. And on

80
00:06:54,472 --> 00:06:58,262
the top you have information when

81
00:06:58,316 --> 00:07:02,790
did it happen and who the participants

82
00:07:03,770 --> 00:07:07,874
and very important, the application id. And then we fetch that information automatically

83
00:07:07,922 --> 00:07:11,110
with the collector and afterwards both

84
00:07:11,260 --> 00:07:14,282
sources. So with a collector source and

85
00:07:14,416 --> 00:07:18,630
the different YAML files are getting analyzed by the analyzer.

86
00:07:18,790 --> 00:07:23,082
And then we push that information to

87
00:07:23,216 --> 00:07:26,794
Grafana security dashboard. And in Grafana

88
00:07:26,842 --> 00:07:30,906
you might be able also to configure alerts, automatically alerts.

89
00:07:31,018 --> 00:07:33,550
For example when a threat modeling is missing,

90
00:07:34,770 --> 00:07:38,466
you might say I want to perform a threat modeling every quarter and a

91
00:07:38,488 --> 00:07:41,762
team hasn't performed it within the last three months.

92
00:07:41,816 --> 00:07:45,638
And you can send out a warning, hey, you should very soon

93
00:07:45,724 --> 00:07:49,254
perform a quick split modeling so that

94
00:07:49,292 --> 00:07:53,142
this process is also automated. Here you

95
00:07:53,196 --> 00:07:56,280
see an overview of how

96
00:07:57,390 --> 00:08:01,290
product owners or the team can handle the yamls

97
00:08:03,950 --> 00:08:08,602
in the repository. So you have a repository and

98
00:08:08,656 --> 00:08:12,026
the product owner maybe pulls the repository

99
00:08:12,138 --> 00:08:15,934
or uses a web UI to perform changes.

100
00:08:16,052 --> 00:08:19,806
So for example, hey, I read all the

101
00:08:19,828 --> 00:08:23,710
needed security policies and I confirm it in the YaML file.

102
00:08:23,870 --> 00:08:27,554
Then the product owner pushes it.

103
00:08:27,672 --> 00:08:31,646
These changes to the repository create the pull request

104
00:08:31,758 --> 00:08:35,010
and then a security architect could review these

105
00:08:35,080 --> 00:08:38,802
changes, approves or denies it, and then

106
00:08:38,936 --> 00:08:42,214
see changes are reflected in case the

107
00:08:42,252 --> 00:08:44,150
pull request is accepted.

108
00:08:46,250 --> 00:08:50,330
Here we see how the flow is for the thresholds.

109
00:08:51,390 --> 00:08:55,110
So there is a trigger, for example the pull request.

110
00:08:55,270 --> 00:08:58,826
Then we transfer the meter model information

111
00:08:58,928 --> 00:09:02,220
to Java objects. We combine the

112
00:09:02,590 --> 00:09:07,760
Yaml files and the collector information.

113
00:09:08,690 --> 00:09:12,282
Then we check the threshold for that team in that

114
00:09:12,356 --> 00:09:16,162
particular level, for example the mean time

115
00:09:16,216 --> 00:09:19,666
to patch. Then we generate dashboards out

116
00:09:19,688 --> 00:09:23,634
of it. The dashboards will be

117
00:09:23,672 --> 00:09:27,238
already half thresholds which we

118
00:09:27,404 --> 00:09:31,160
generate from the Java application.

119
00:09:32,890 --> 00:09:39,434
So we want to stay independent from

120
00:09:39,472 --> 00:09:43,500
the grafana. We want to be able to put any other

121
00:09:43,870 --> 00:09:47,290
option there as well, any other data source,

122
00:09:47,790 --> 00:09:49,930
for example the maturity,

123
00:09:51,390 --> 00:09:55,274
the devsec option, maturity model itself, or even other sources.

124
00:09:55,402 --> 00:09:58,794
This is a very big overview of the architecture.

125
00:09:58,922 --> 00:10:02,898
So in GitHub we are building the whole application

126
00:10:03,064 --> 00:10:07,780
so that you can utilize it in your organization and

127
00:10:08,710 --> 00:10:12,622
with your data. We are also planning

128
00:10:12,766 --> 00:10:17,154
to make the architecture

129
00:10:17,282 --> 00:10:21,298
very flexible so that you can define,

130
00:10:21,394 --> 00:10:24,418
so that you can have your own activity

131
00:10:24,514 --> 00:10:28,140
definition. That's why we came up with

132
00:10:28,750 --> 00:10:31,900
this class diagram where

133
00:10:32,270 --> 00:10:36,380
we have the spring component, the date component and

134
00:10:37,310 --> 00:10:40,586
the integer component with an interface.

135
00:10:40,698 --> 00:10:44,062
And then the activity has all these

136
00:10:44,116 --> 00:10:47,614
different types, so you can

137
00:10:47,732 --> 00:10:50,320
combine these types as you like.

138
00:10:52,070 --> 00:10:55,922
And in this case, the main developer here is

139
00:10:56,056 --> 00:10:59,474
Rafael Vespi, who came

140
00:10:59,512 --> 00:11:06,674
up with this diagram and is implementing be

141
00:11:06,712 --> 00:11:10,054
very the YAML file should be very generic so

142
00:11:10,092 --> 00:11:14,198
that you can have your own activity definitions per

143
00:11:14,284 --> 00:11:18,042
application or team. You have the activities YAML and the

144
00:11:18,096 --> 00:11:22,250
team YAML and you have the very

145
00:11:22,320 --> 00:11:25,740
generic configuration Yaml, which is there only once,

146
00:11:26,110 --> 00:11:29,846
in which you define what activities are there and what are the thresholds

147
00:11:29,878 --> 00:11:34,622
and what are the levels for these different

148
00:11:34,756 --> 00:11:38,074
activities. In the configuration

149
00:11:38,122 --> 00:11:41,760
yaml, you have the application id, you have

150
00:11:42,710 --> 00:11:46,290
the target level, and then for the activities, the level,

151
00:11:46,360 --> 00:11:50,370
in case you have implemented the activity on which level

152
00:11:50,520 --> 00:11:53,582
this activity should be performed.

153
00:11:53,646 --> 00:11:57,800
And we're currently not having a structure for the threshold, but that will come.

154
00:11:59,370 --> 00:12:03,206
Here is an example for the activities YAml. You have again an application id

155
00:12:03,308 --> 00:12:07,334
and the different activities. We also want

156
00:12:07,372 --> 00:12:11,010
to generate a schema so that when the pull request

157
00:12:11,090 --> 00:12:14,906
happens you can, or the product owner can receive there

158
00:12:14,928 --> 00:12:18,326
is a mistake in the provided YaML

159
00:12:18,358 --> 00:12:21,786
file. I have to say it's

160
00:12:21,818 --> 00:12:25,662
not a silver bullet. You always

161
00:12:25,716 --> 00:12:29,054
have people and processes. You need to say as

162
00:12:29,092 --> 00:12:33,200
a team you still need to perform these activities. You need to put it

163
00:12:33,570 --> 00:12:37,106
into the YAML files. So that's all something where you need

164
00:12:37,128 --> 00:12:38,980
to do a lot of cultural work.

165
00:12:39,830 --> 00:12:43,422
And I recommend to use the collector

166
00:12:43,486 --> 00:12:47,222
in the future rather than the YAML. So the yamls are there

167
00:12:47,276 --> 00:12:50,950
for static things which you cannot automate easily, but everything

168
00:12:51,020 --> 00:12:55,350
you can automate, you should automate with the collection.

169
00:12:55,930 --> 00:12:59,946
As you have already mentioned, currently we are

170
00:13:00,048 --> 00:13:03,846
in a draft status or the implementation phase.

171
00:13:04,038 --> 00:13:08,134
Currently we can perform changes very easily. So in case you have any ideas

172
00:13:08,182 --> 00:13:12,522
how to enhance this, please talk with me.

173
00:13:12,656 --> 00:13:16,074
Come to the overslack channel,

174
00:13:16,272 --> 00:13:19,338
to the DSM channel,

175
00:13:19,504 --> 00:13:25,362
or if you like, you can also send

176
00:13:25,416 --> 00:13:29,460
an email. Here are my information.

177
00:13:31,270 --> 00:13:34,594
The access Switzerland is sponsoring this project and

178
00:13:34,632 --> 00:13:38,110
we currently estimate that it will be implemented

179
00:13:38,190 --> 00:13:41,940
by the end of 2023.

180
00:13:42,790 --> 00:13:45,266
Thank you and see you soon.

