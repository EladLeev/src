1
00:00:24,010 --> 00:00:27,462
Everyone, my name is Matt Williams and I'm an evangelist at

2
00:00:27,516 --> 00:00:31,382
Infra. I'm super excited to have you joining me for my session here at comp

3
00:00:31,436 --> 00:00:34,966
42. It's my home lab. Why would I want SSO? Now that's a

4
00:00:34,988 --> 00:00:38,006
nice and short title for the schedule, but really that

5
00:00:38,028 --> 00:00:41,206
title should be, it's my home lab. Why would

6
00:00:41,228 --> 00:00:45,254
I want single sign on or roles or users? And this whole talk

7
00:00:45,372 --> 00:00:48,422
is specific to Kubernetes. I mentioned that

8
00:00:48,476 --> 00:00:52,522
I'm an evangelist at Infra and we'll learn more about what Infra

9
00:00:52,586 --> 00:00:56,554
does later in this session. So let's get started with some definitions.

10
00:00:56,682 --> 00:00:59,674
What is this homelab thing in the title?

11
00:00:59,802 --> 00:01:03,226
Well, a homelab is whatever you want it to be. Traditionally,

12
00:01:03,258 --> 00:01:06,514
it's a place to practice. Maybe at work you're using

13
00:01:06,552 --> 00:01:09,698
different tools and technologies like kubernetes or something else,

14
00:01:09,784 --> 00:01:13,202
and you want to practice with it. You would like to try out different

15
00:01:13,256 --> 00:01:16,642
uses that your boss might not approve of

16
00:01:16,776 --> 00:01:20,134
until you prove that it's really worth trying. All of these things are

17
00:01:20,172 --> 00:01:23,762
great uses for a homelab. It's also a great place for tools

18
00:01:23,826 --> 00:01:26,982
for your home. Maybe you and your family have

19
00:01:27,036 --> 00:01:30,050
a shared calendar and you don't want to host it with one of the clouds.

20
00:01:30,130 --> 00:01:33,866
Or maybe it's collaboration tools such as having your own file server that you

21
00:01:33,888 --> 00:01:37,066
share with your significant other and with your kids. All of

22
00:01:37,088 --> 00:01:40,778
that is a good use for a homelab. Okay, so what does a

23
00:01:40,784 --> 00:01:44,254
homelab look like? What goes into it? Well, there are no

24
00:01:44,292 --> 00:01:47,534
rules, so it's whatever you got. Yeah, you're probably

25
00:01:47,572 --> 00:01:51,214
going to see plenty of people on YouTube or Instagram with

26
00:01:51,332 --> 00:01:54,158
big professional racks that look really,

27
00:01:54,244 --> 00:01:58,046
really cool. And they have all sorts of fancy networking

28
00:01:58,078 --> 00:02:01,698
equipment and rack mounted servers. You don't need to have that.

29
00:02:01,784 --> 00:02:04,674
A rack isn't required if you can afford it.

30
00:02:04,712 --> 00:02:08,210
Well, users what you got? Maybe you have an extra laptop or

31
00:02:08,280 --> 00:02:11,766
even your current laptop. They have some extra cycles on. Maybe you have

32
00:02:11,788 --> 00:02:15,286
a raspberry PI or some other box that you've acquired along the way.

33
00:02:15,388 --> 00:02:18,566
All of those things can be used in your home lab. Maybe you

34
00:02:18,588 --> 00:02:21,866
actually do have a rack that you got from eBay that a company was no

35
00:02:21,888 --> 00:02:25,466
longer using and so you got it really, really cheap. And maybe you got some

36
00:02:25,488 --> 00:02:29,066
of those older Dell servers. They work perfectly well in

37
00:02:29,088 --> 00:02:32,702
a homelab. So really the limit is defined by your

38
00:02:32,756 --> 00:02:36,314
budget, maybe even the approval levels of your significant

39
00:02:36,362 --> 00:02:39,694
other. So here's what was in my first home lab,

40
00:02:39,812 --> 00:02:43,066
I was working for a company called Capteris and then it was bought

41
00:02:43,098 --> 00:02:46,974
out by Opentext. I needed to get up to speed on faxer of IP,

42
00:02:47,022 --> 00:02:50,862
so I bought a used Cisco 2600 with some analog

43
00:02:50,926 --> 00:02:54,334
phone cards and then I hooked it up to the Opentext fax

44
00:02:54,382 --> 00:02:58,034
gateway, got some simple routers, and used some virtual networking

45
00:02:58,082 --> 00:03:02,242
tools. Now this was great for me at the time, but these would totally

46
00:03:02,306 --> 00:03:05,874
not go over well today. That Cisco box sounded

47
00:03:05,922 --> 00:03:10,054
like a jet engine, and remember what I said about getting approval

48
00:03:10,102 --> 00:03:13,210
from a significant other that would definitely never

49
00:03:13,280 --> 00:03:16,666
fly today. I'm a lot further along in my career, but my

50
00:03:16,688 --> 00:03:20,362
homelab doesn't look any more professional. My servers are

51
00:03:20,416 --> 00:03:23,946
just computers that don't get any love anymore. The workhorse is

52
00:03:23,968 --> 00:03:27,422
a 2011 Mac Mini, but here you can also see

53
00:03:27,476 --> 00:03:31,738
that there's a pie by the utility sink next to a fly swatter. And here's

54
00:03:31,754 --> 00:03:35,186
a stack of pies in some other box I collected as I was

55
00:03:35,208 --> 00:03:39,186
bringing them together in one spot in the house. Most of the software running

56
00:03:39,288 --> 00:03:42,914
sits on Proxmox, a virtualization platform, but I'm also

57
00:03:42,952 --> 00:03:46,658
using truenas to try out its virtualization tools.

58
00:03:46,754 --> 00:03:50,694
I have portainer as a front end to Docker and kubernetes and running

59
00:03:50,732 --> 00:03:54,582
as vms and containers. I have a few kubernetes clusters using

60
00:03:54,636 --> 00:03:58,134
minikube and kind micro kubernetes and k three

61
00:03:58,172 --> 00:04:01,994
s and more. Why? Because I want to practice and play to

62
00:04:02,032 --> 00:04:05,434
see what's interesting with each of them, what makes them

63
00:04:05,472 --> 00:04:08,870
unique and special. I also run various software

64
00:04:08,950 --> 00:04:12,154
experiments now. Being married with

65
00:04:12,192 --> 00:04:15,422
a three year old means the weekends spent unwashed and

66
00:04:15,476 --> 00:04:18,974
eating takeout junk food, learning a new language are

67
00:04:19,012 --> 00:04:22,154
long since gone, but I still experiment with next js

68
00:04:22,202 --> 00:04:25,426
or Svelkit in the evening after reading Sophie mouse to

69
00:04:25,448 --> 00:04:29,086
Stella, and I want a place to host those experiments.

70
00:04:29,198 --> 00:04:32,626
That tends to be one of the Kubernetes clusters. One of

71
00:04:32,648 --> 00:04:35,998
the other key bits of software running is home assistant.

72
00:04:36,094 --> 00:04:39,634
I've automated the lights and other systems based on sensors

73
00:04:39,682 --> 00:04:43,058
all around the house. Remember what I said about hosting a calendar?

74
00:04:43,154 --> 00:04:47,030
We have one that shows what the trash trucks will be taking this week.

75
00:04:47,180 --> 00:04:51,230
Are they also taking compost or recycling that day? And that's displayed

76
00:04:51,250 --> 00:04:55,062
on an old iPad on one of the walls. And of course, Homelab doesn't

77
00:04:55,126 --> 00:04:58,794
just have to be machines that are located inside my home,

78
00:04:58,912 --> 00:05:01,878
it can also be stuff up in the cloud. So I have a bunch of

79
00:05:01,904 --> 00:05:06,074
accounts from AWS and Azure, Google Cloud, even oracle

80
00:05:06,122 --> 00:05:09,646
cloud, and I use all the free for life or free for

81
00:05:09,668 --> 00:05:13,326
trial periods. I use all those types of services on all the

82
00:05:13,348 --> 00:05:17,086
different clouds. And that way I can kind of spread

83
00:05:17,118 --> 00:05:20,622
around the free stuff and get to play around with lots of tools

84
00:05:20,686 --> 00:05:23,922
without paying a whole lot. I think my AWS bill

85
00:05:23,976 --> 00:05:27,618
each month is about $0.53. So that's

86
00:05:27,634 --> 00:05:31,462
what my home lab looks like today. So why

87
00:05:31,516 --> 00:05:35,126
Kubernetes in the home lab? Well, I talked about that

88
00:05:35,228 --> 00:05:38,994
a little bit a few slides ago. It's really a chance for me to practice.

89
00:05:39,122 --> 00:05:42,826
I use kubernetes at work and want to understand how it works, so I

90
00:05:42,848 --> 00:05:46,266
play around with it at home. And going back a few decades when

91
00:05:46,288 --> 00:05:49,994
we had clusters, they had to be identical hardware. I remember running

92
00:05:50,032 --> 00:05:53,934
a novell netware active passive cluster and they had to be absolutely

93
00:05:54,132 --> 00:05:57,406
identical. But these days with kubernetes, you can

94
00:05:57,428 --> 00:06:01,146
have a hodgepodge of machines, like whatever these things are in this picture.

95
00:06:01,258 --> 00:06:04,846
And as far as computers, that's precisely what I've got,

96
00:06:04,948 --> 00:06:08,782
a hodgepodge of machines. Well, maybe some of those raspberry pis

97
00:06:08,846 --> 00:06:13,006
look exactly the same. But now I can have a cluster that spreads across multiple

98
00:06:13,038 --> 00:06:17,006
types of machines, which is awesome. And that allows

99
00:06:17,038 --> 00:06:20,486
me to create more consistent deployment practices even in my own

100
00:06:20,508 --> 00:06:24,326
home. Remember I told you about those software experiments? I have one way to

101
00:06:24,348 --> 00:06:27,750
deploy all those software experiments rather than having to think about it.

102
00:06:27,820 --> 00:06:30,470
If I want to push it to docker, I'm going to do it this way.

103
00:06:30,540 --> 00:06:34,042
If I want to do it to proxbox containers, then there's another way.

104
00:06:34,176 --> 00:06:37,690
If I do want it to go to kubernetes, then it's this other way.

105
00:06:37,840 --> 00:06:41,830
Now I have one way to deploy all these software experiments

106
00:06:41,910 --> 00:06:45,418
or other tools that I find on the Internet. So if I'm using lots

107
00:06:45,434 --> 00:06:49,134
of different tools that I find online, and one of them gets compromised while

108
00:06:49,172 --> 00:06:52,730
running as admin, it now has access to the secrets and data

109
00:06:52,820 --> 00:06:56,130
of all these other services. And that's bad.

110
00:06:56,280 --> 00:06:59,790
So by implementing users and roles and least privilege,

111
00:06:59,870 --> 00:07:03,666
I can go a long way toward avoiding those problems.

112
00:07:03,848 --> 00:07:07,426
Okay, sso, let's talk about users. Well, they don't

113
00:07:07,458 --> 00:07:10,694
exist. Everything in Kubernetes is a resource, and there's no

114
00:07:10,732 --> 00:07:14,674
resource for users. Actually, users are just certificates.

115
00:07:14,802 --> 00:07:18,134
So to create a users, we need to create certificates and then

116
00:07:18,172 --> 00:07:21,786
put those certs into a kubeconfig file. So here's what that

117
00:07:21,808 --> 00:07:25,706
file looks like. Minutes. Some of the actual super long strings that are the

118
00:07:25,728 --> 00:07:29,914
certs. Up at the top we have the cluster and how to access it.

119
00:07:30,032 --> 00:07:33,726
Down at the bottom is the user and the cert associated with it.

120
00:07:33,828 --> 00:07:36,990
In the middle is the context that links user to cert

121
00:07:37,140 --> 00:07:40,986
and we can have many of each type defined in a single file.

122
00:07:41,098 --> 00:07:44,814
Okay, so what is a role? Well, a role just defines a level

123
00:07:44,852 --> 00:07:47,986
of access that a user has to the cluster. And that level of

124
00:07:48,008 --> 00:07:51,538
access is defined with a resource and a verb. Now here's an example

125
00:07:51,624 --> 00:07:55,154
of a role. This role is called marketing dev and

126
00:07:55,192 --> 00:07:59,302
it says that for the pod resource, the user can get, watch and

127
00:07:59,356 --> 00:08:02,914
list. Normally there'd be a lot of steps of resources

128
00:08:02,962 --> 00:08:06,786
and verbs, but I wanted to keep it simple for this session. But that's

129
00:08:06,818 --> 00:08:11,130
how we create a role. Just define it in a yaml file, then apply that

130
00:08:11,200 --> 00:08:14,614
to the cluster. So let's create a user with the tools

131
00:08:14,662 --> 00:08:17,994
built into kubernetes and the OS. It's not hard,

132
00:08:18,192 --> 00:08:21,642
but is a bit tedious. It's all about creating the key,

133
00:08:21,776 --> 00:08:25,486
signing it, then adding it to your kubeconfig file. Easy right?

134
00:08:25,588 --> 00:08:29,514
So you create the key and then a certificate signing request.

135
00:08:29,642 --> 00:08:33,086
That request goes to the server, then use the Kubectl command to

136
00:08:33,108 --> 00:08:36,274
approve it. Next you download the signed request and

137
00:08:36,312 --> 00:08:40,174
build the kubeconfig file. Finally you distribute the file.

138
00:08:40,302 --> 00:08:43,906
The commands I showed were fragments of the real command, but you can

139
00:08:43,928 --> 00:08:47,426
find these full commands with explanations on this blog post.

140
00:08:47,608 --> 00:08:51,078
Now possession of this cert means you have access to the

141
00:08:51,084 --> 00:08:54,886
cluster. So it's important to verify the user still has access.

142
00:08:55,068 --> 00:08:58,358
That can be dont by regenerating the certs and redistributing the

143
00:08:58,364 --> 00:09:01,866
config file every five to 30 minutes. And of

144
00:09:01,888 --> 00:09:05,450
course that sounds painful. So you might come back to the idea of just giving

145
00:09:05,520 --> 00:09:09,114
everyone admin access. Well remember, Kubernetes is

146
00:09:09,152 --> 00:09:12,462
just remote execution as a service. And if everything

147
00:09:12,516 --> 00:09:15,726
shares the same credentials and one job or user is compromised these,

148
00:09:15,748 --> 00:09:19,114
the entire environment is compromised. Maybe your users isn't

149
00:09:19,162 --> 00:09:22,234
compromised, but is fired. One disgruntled

150
00:09:22,282 --> 00:09:26,402
user with admin can do a lot of damage. So if

151
00:09:26,456 --> 00:09:29,826
admin for all isn't a great solution, surely there must

152
00:09:29,848 --> 00:09:33,618
be a way to automate it. I'll give you two solutions here.

153
00:09:33,784 --> 00:09:38,562
First is this script from Brendan Burns. Now today Brendan

154
00:09:38,626 --> 00:09:41,750
is a corporate vice president at Microsoft,

155
00:09:42,250 --> 00:09:46,338
but eight years ago Joe Beta, Craig McClucky, and Brendan

156
00:09:46,434 --> 00:09:50,598
created a little open source project you might have heard of called Kubernetes.

157
00:09:50,774 --> 00:09:54,250
And this script basically goes through the same steps I did

158
00:09:54,320 --> 00:09:58,218
just now, built it skips what is probably

159
00:09:58,304 --> 00:10:02,086
the hardest part distribution of that config file.

160
00:10:02,278 --> 00:10:06,254
So how about something easier and more self contained? Well that's where

161
00:10:06,292 --> 00:10:09,994
Infra comes in. Infra is a 100% open source solution

162
00:10:10,042 --> 00:10:13,054
to this problem. It's 100% free to use.

163
00:10:13,252 --> 00:10:16,766
We've been working on it for a couple of years now. And the original founder

164
00:10:16,798 --> 00:10:20,610
has also created another open source tool called kitematic.

165
00:10:21,510 --> 00:10:24,994
There are two ways you can use it. You can use it, you can

166
00:10:25,032 --> 00:10:28,546
host it yourself, or you can use infracloud. When we fully release

167
00:10:28,578 --> 00:10:32,002
it though if you're interested, we can get you in on the beta.

168
00:10:32,146 --> 00:10:35,880
So let's do a demo now to see how easy it is.

169
00:10:37,290 --> 00:10:41,638
Okay, so here we are at the command line. I'm going to install infra,

170
00:10:41,734 --> 00:10:45,242
the server to my Kubernetes cluster. I'm using

171
00:10:45,296 --> 00:10:49,078
Docker desktop for my Kubernetes cluster and I'm

172
00:10:49,094 --> 00:10:52,510
going to use a values file. So I'm just going to show you this demo

173
00:10:52,580 --> 00:10:57,070
values. It's really simple and

174
00:10:57,140 --> 00:11:02,142
it just shows that I'm defining a users. That user is called Matt@example.com

175
00:11:02,196 --> 00:11:05,700
it's got a password of password. Now normally I wouldn't be doing

176
00:11:06,470 --> 00:11:10,370
a password as password because it's not very secure,

177
00:11:11,590 --> 00:11:15,614
but normally I would create a secret in kubernetes

178
00:11:15,662 --> 00:11:18,390
and then refer to that secret within this file.

179
00:11:19,210 --> 00:11:22,166
But it's a demo, excuse me.

180
00:11:22,348 --> 00:11:25,846
And then I've got a grant. And that grant just says that

181
00:11:25,868 --> 00:11:29,834
matt@example.com that you just defined is

182
00:11:29,872 --> 00:11:33,302
an admin within the resource of infra.

183
00:11:33,446 --> 00:11:37,386
Okay, cool. So now we

184
00:11:37,408 --> 00:11:41,390
can run helm upgrade

185
00:11:43,490 --> 00:11:47,118
install infrahq infra and I'm going

186
00:11:47,124 --> 00:11:51,950
to specify the values file of demovalues

187
00:11:52,390 --> 00:11:53,410
yaml.

188
00:11:55,670 --> 00:11:58,130
And that's it. We're installed.

189
00:12:01,590 --> 00:12:05,006
One of the things it tells me is if I run this

190
00:12:05,048 --> 00:12:08,854
command, it'll get me the endpoint where my

191
00:12:08,892 --> 00:12:12,114
server is. And there it's

192
00:12:12,162 --> 00:12:15,638
localhost. So let's go ahead and open up

193
00:12:15,724 --> 00:12:19,690
the browser and go to localhost.

194
00:12:23,550 --> 00:12:26,982
And when it first starts, it can take a few seconds

195
00:12:27,046 --> 00:12:31,630
for it to boot up. But if I refresh,

196
00:12:39,330 --> 00:12:42,474
there we go and my login screen

197
00:12:42,532 --> 00:12:48,530
shows up. So I created a user called matt@example.com

198
00:12:48,680 --> 00:12:51,250
and the password is password.

199
00:12:52,550 --> 00:12:56,390
Okay, so now I'm in. First step

200
00:12:56,460 --> 00:13:00,582
I want to do other than Zoom in a bunch is

201
00:13:00,636 --> 00:13:03,958
to connect a cluster. So I'm going

202
00:13:03,964 --> 00:13:14,026
to call this the Docker desktop and

203
00:13:14,048 --> 00:13:17,180
it gives me a command to run.

204
00:13:17,790 --> 00:13:20,826
So I'll copy this and go back to

205
00:13:20,928 --> 00:13:24,446
here, I'll paste that in. Now you might be

206
00:13:24,468 --> 00:13:28,400
thinking, wait, you just installed infra and you have to do another install.

207
00:13:29,170 --> 00:13:32,814
Well, this is a self hosted instance of infra and

208
00:13:32,852 --> 00:13:35,810
there's two pieces to it. There's the infra server,

209
00:13:36,150 --> 00:13:40,158
which is what you're going to log into and has the kind of authoritative source

210
00:13:40,254 --> 00:13:44,030
for user information. But then there's the connector.

211
00:13:44,110 --> 00:13:47,474
And so you might have one, well you will have one server

212
00:13:47,602 --> 00:13:51,206
and then lots of connectors, one for each of the

213
00:13:51,308 --> 00:13:54,360
clusters that you want to manage.

214
00:13:55,690 --> 00:13:58,438
Now there's one other thing that I want to add to this. Well, let's take

215
00:13:58,444 --> 00:14:02,378
a look at this command. It's helm upgrade install and

216
00:14:02,384 --> 00:14:05,914
these I'm installing the infra connector. Well that's what I'm going to call it.

217
00:14:06,032 --> 00:14:09,226
And it's at the same repo that

218
00:14:09,248 --> 00:14:11,120
we used before, I think.

219
00:14:12,530 --> 00:14:17,070
And then I'm setting a server host of localhost

220
00:14:18,690 --> 00:14:22,282
and then I want to call this docker desktop when I use the UI,

221
00:14:22,346 --> 00:14:25,966
I want to call this particular cluster docker desktop. And then I'm

222
00:14:25,998 --> 00:14:29,358
setting an access key. That access key, it just lets

223
00:14:29,374 --> 00:14:33,266
these connector gives the connector something to

224
00:14:33,288 --> 00:14:36,914
give to the server to say yeah, hey, I'm the connector

225
00:14:36,962 --> 00:14:40,566
that you just generated that command for.

226
00:14:40,748 --> 00:14:44,902
Now there's one more thing because I'm using Docker desktop and

227
00:14:44,956 --> 00:14:48,270
I'm using self signed certificates and I'm

228
00:14:48,290 --> 00:14:51,974
not using let's encrypt or some other solution for certificates.

229
00:14:52,102 --> 00:14:54,986
I need to tell it to, well I need to tell it something.

230
00:14:55,168 --> 00:14:58,362
So what was it?

231
00:14:58,416 --> 00:15:00,910
It was this command.

232
00:15:09,170 --> 00:15:12,810
So here I'm saying set connector config

233
00:15:12,970 --> 00:15:16,766
skip tools verify is true. That just lets

234
00:15:16,798 --> 00:15:20,046
me skip any sort of problems with my self signed

235
00:15:20,078 --> 00:15:23,714
certificates. Normally in the real world with real

236
00:15:23,752 --> 00:15:27,062
clusters you would never do this. It's just because

237
00:15:27,116 --> 00:15:30,658
it's on Docker desktop and I'm using self signed certificates

238
00:15:30,754 --> 00:15:34,790
so I can press enter and

239
00:15:34,860 --> 00:15:39,814
now I'm done. So now if I go back to the browser,

240
00:15:39,862 --> 00:15:43,660
you can see my cluster has been connected SSo I can click on finish.

241
00:15:47,630 --> 00:15:51,294
So now it knows about my docker desktop. In fact, if I click on this,

242
00:15:51,412 --> 00:15:54,478
I'll see I can grant access to individual

243
00:15:54,564 --> 00:15:58,446
users to the whole cluster as well

244
00:15:58,468 --> 00:16:02,090
as individual namespaces. I only have one user,

245
00:16:02,170 --> 00:16:06,206
so let's go ahead and create a new user. I'll add user

246
00:16:06,398 --> 00:16:14,420
and I'll call them user one@example.com

247
00:16:16,890 --> 00:16:21,334
and it generates a temporary password. I'm going to copy that

248
00:16:21,532 --> 00:16:23,720
and save it.

249
00:16:26,890 --> 00:16:30,266
Okay, so that defines a new user. I can

250
00:16:30,288 --> 00:16:34,394
also define groups. So if I have a dozen hundred

251
00:16:34,512 --> 00:16:37,930
users and some are dev,

252
00:16:38,000 --> 00:16:41,278
some are QA, some are marketing, some are whatever

253
00:16:41,364 --> 00:16:44,842
other groups inside a dev, I can create groups

254
00:16:44,986 --> 00:16:48,654
that have each of those users. So add a group, I'll call it

255
00:16:48,692 --> 00:16:52,126
dev. And now for dev,

256
00:16:52,228 --> 00:16:56,674
I want to add both Matt and

257
00:16:56,872 --> 00:16:58,020
user one.

258
00:16:59,750 --> 00:17:03,154
Cool. Now if

259
00:17:03,192 --> 00:17:06,530
you have hundreds of users like I suggested, you probably

260
00:17:06,600 --> 00:17:09,766
wouldn't want to enter them manually here. You could also use the

261
00:17:09,788 --> 00:17:13,686
command line and you can add a whole bunch of users right

262
00:17:13,708 --> 00:17:16,486
there on the command line. But you're probably not even going to want to do

263
00:17:16,508 --> 00:17:19,690
that. Instead you probably have something

264
00:17:19,760 --> 00:17:23,926
like Okta or Google OIDC

265
00:17:24,038 --> 00:17:27,334
or Azure ad or another OIDC

266
00:17:27,382 --> 00:17:31,614
provider. And so with providers you can just connect to those and

267
00:17:31,652 --> 00:17:34,320
we'll get all the users and groups from there.

268
00:17:35,010 --> 00:17:38,398
But my users and groups are my test. Users and

269
00:17:38,404 --> 00:17:42,320
groups are set. So now I want to grant access,

270
00:17:43,590 --> 00:17:47,458
let's see for the entire thing

271
00:17:47,544 --> 00:17:49,620
I want to grant my dev group,

272
00:17:50,950 --> 00:17:54,420
let's say view access and add that.

273
00:17:55,290 --> 00:17:59,014
And then for, let's go

274
00:17:59,052 --> 00:18:02,338
to the default namespace and I'll

275
00:18:02,354 --> 00:18:06,150
add Matt as an admin

276
00:18:07,470 --> 00:18:09,420
and I'll add user one.

277
00:18:10,990 --> 00:18:15,402
Let's give him exec and

278
00:18:15,456 --> 00:18:16,300
add that.

279
00:18:22,350 --> 00:18:26,030
Okay, so now I'm set. Now I can go back to my terminal

280
00:18:26,450 --> 00:18:29,786
and one thing I'm going to do is what directory

281
00:18:29,818 --> 00:18:33,380
am I in? I'm Matt downloads. So I'll go to

282
00:18:36,870 --> 00:18:40,450
Kube. And when I run

283
00:18:40,520 --> 00:18:44,702
Kubeconfig or when I run Kubectl

284
00:18:44,846 --> 00:18:48,200
or any Kubernetes command, it's getting my

285
00:18:49,130 --> 00:18:52,438
configuration information from this config file. So I'm just going

286
00:18:52,444 --> 00:18:57,000
to move the config file, move config to

287
00:18:58,510 --> 00:19:01,180
config conf 42.

288
00:19:02,350 --> 00:19:06,374
And so now if I run Kctx which is the context

289
00:19:06,422 --> 00:19:11,854
plugin for crew, for Kubectl, it says there

290
00:19:11,892 --> 00:19:14,862
are no kubernetes clusters. So I'm going to cancel that.

291
00:19:14,996 --> 00:19:17,440
And now I can run infra install.

292
00:19:18,050 --> 00:19:19,594
And what was my first user,

293
00:19:19,642 --> 00:19:29,220
matt@example.com not

294
00:19:29,290 --> 00:19:33,460
install, it's infra login.

295
00:19:42,620 --> 00:19:48,680
It's not that login

296
00:19:48,760 --> 00:19:52,316
localhost because that's where

297
00:19:52,338 --> 00:19:55,164
I want to log into. I don't want to log in to the user,

298
00:19:55,212 --> 00:19:59,708
I want to log into my cluster. I want to trust this certificate.

299
00:19:59,884 --> 00:20:04,988
And now my username is matt@example.com

300
00:20:05,174 --> 00:20:08,420
and the password is my super secure password.

301
00:20:09,160 --> 00:20:12,340
Okay, so now which directory I'm in, I'm still in

302
00:20:12,410 --> 00:20:17,700
cube. So now let's take a look at config.

303
00:20:18,940 --> 00:20:22,490
And we see right away there's a bunch of things in here.

304
00:20:26,220 --> 00:20:29,556
So I can see I've got a cluster that's

305
00:20:29,588 --> 00:20:33,484
been defined and the name of that is

306
00:20:33,522 --> 00:20:37,484
infra docker desktop. I've got another cluster defined which

307
00:20:37,522 --> 00:20:41,192
is docker desktop default. I've got a context,

308
00:20:41,256 --> 00:20:45,068
I've got a couple of contexts and then I've got a users

309
00:20:45,164 --> 00:20:48,240
matt@example.com that's pretty cool.

310
00:20:48,310 --> 00:20:51,868
And so now I can just run Kctx

311
00:20:52,044 --> 00:20:55,944
and I see both of those contexts that exist.

312
00:20:56,092 --> 00:20:59,764
And if I go into any one of them, let's say that one and

313
00:20:59,802 --> 00:21:02,500
you do get pods,

314
00:21:03,400 --> 00:21:06,964
I see everything. Cool. But if I were to go

315
00:21:07,002 --> 00:21:11,144
in as, let's say infra login localhost and

316
00:21:11,182 --> 00:21:16,730
my user is user one@example.com

317
00:21:17,500 --> 00:21:21,116
password. Oh wait, no, that password was at new

318
00:21:21,138 --> 00:21:25,272
password I was given and I have to update it because it's

319
00:21:25,336 --> 00:21:28,750
a temporary password. I'll set it to

320
00:21:29,120 --> 00:21:31,580
password password.

321
00:21:32,660 --> 00:21:35,410
And now if I do,

322
00:21:38,260 --> 00:21:40,400
let's do bat config.

323
00:21:42,900 --> 00:21:46,980
I see the same things, except down at the bottom my user

324
00:21:47,560 --> 00:21:52,390
is user one@example.com

325
00:21:53,320 --> 00:21:56,996
so the users for oh, actually my

326
00:21:57,098 --> 00:22:00,808
older mat@example.com is still there.

327
00:22:00,894 --> 00:22:04,484
If I had run infra login or infra

328
00:22:04,532 --> 00:22:09,716
logout before logging in as user one, then the mat@example.com

329
00:22:09,838 --> 00:22:14,844
user information would have been purged from

330
00:22:14,882 --> 00:22:18,636
my config file. But if

331
00:22:18,658 --> 00:22:22,200
I want to take a look at Infralist, this just shows me okay,

332
00:22:22,370 --> 00:22:26,032
I have view access to the whole cluster, but I also have

333
00:22:26,086 --> 00:22:29,600
exec access just to the default namespace.

334
00:22:33,460 --> 00:22:37,188
So what we've done here is create

335
00:22:37,274 --> 00:22:40,608
two users and assign them different roles.

336
00:22:40,704 --> 00:22:43,924
View and exec. View is one of the

337
00:22:43,962 --> 00:22:47,876
default roles that comes with Kubernetes. Exec is

338
00:22:47,978 --> 00:22:51,992
one of three roles that we add as

339
00:22:52,046 --> 00:22:55,604
part of the, when we install the connector. So we add exec,

340
00:22:55,732 --> 00:22:58,740
we add port forward, we add logs.

341
00:22:58,900 --> 00:23:03,050
I think that's it. And then you can also add your own

342
00:23:03,420 --> 00:23:07,084
roles. Any role that you've created in your Kubernetes cluster, just add

343
00:23:07,122 --> 00:23:10,284
one annotation, one label to it and we'll be able to see

344
00:23:10,322 --> 00:23:13,788
that and then be able to sign those roles within the UI.

345
00:23:13,884 --> 00:23:20,784
Or actually you can do everything from

346
00:23:20,822 --> 00:23:24,476
the command line as well. You don't just have to use the UI. So that's

347
00:23:24,508 --> 00:23:27,700
the quick demo. Let's run back to the presentation.

348
00:23:31,960 --> 00:23:35,620
In summary, you've seen that labs let you practice with whatever

349
00:23:35,690 --> 00:23:38,980
tools and technologies you want to practice with things at work

350
00:23:39,050 --> 00:23:41,430
or things you wish you were doing at work.

351
00:23:42,520 --> 00:23:45,956
If you're using kubernetes either at work or at home, you should be

352
00:23:45,978 --> 00:23:49,900
using users and roles and single sign on. Unfortunately, users and

353
00:23:49,930 --> 00:23:53,176
kubernetes are hard but tools like Infra and that script

354
00:23:53,208 --> 00:23:57,100
from Brendan Burns helped make it easier. I hope you enjoyed this,

355
00:23:57,170 --> 00:24:00,364
and if you have any questions, you can reach out to me on Twitter or

356
00:24:00,402 --> 00:24:04,236
at all be in these

357
00:24:04,418 --> 00:24:07,960
discord. Thanks so much and goodbye.

