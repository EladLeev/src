1
00:01:28,450 --> 00:01:31,714
Hi everyone, I'm Lernak McJolo. I'm a senior solutions architect

2
00:01:31,762 --> 00:01:35,766
with AWS. I have 18 years background in technology and financial services

3
00:01:35,868 --> 00:01:39,570
industry. I started with centralized web infrastructure

4
00:01:39,650 --> 00:01:43,770
such as authentication systems, single sign on federated authentication.

5
00:01:43,930 --> 00:01:47,726
I also work with high performance distributed caching as well

6
00:01:47,748 --> 00:01:51,466
as multilegion cloud native deployments using infrastructure,

7
00:01:51,498 --> 00:01:54,850
AWS code and pipelines to name a few.

8
00:01:55,000 --> 00:01:58,146
And in those specific talk I'm using to go over

9
00:01:58,328 --> 00:02:01,982
why and how to move from monolithic applications

10
00:02:02,046 --> 00:02:05,618
towards microservices in a practical example with a

11
00:02:05,624 --> 00:02:09,494
demo, and we are going to be chipping away at the monolith using

12
00:02:09,532 --> 00:02:12,360
the strangler fig pattern. So let's jump in.

13
00:02:13,690 --> 00:02:16,840
So first of all, why would we want to do this?

14
00:02:17,850 --> 00:02:21,366
So if you think about monolithic applications, what we are referring

15
00:02:21,398 --> 00:02:24,902
to is an application that needs to be deployed in its entirety

16
00:02:24,966 --> 00:02:27,130
together with all of its components.

17
00:02:27,790 --> 00:02:30,958
And we have multiple layers inside such an application,

18
00:02:31,124 --> 00:02:34,478
such as presentation, application logic, data access

19
00:02:34,564 --> 00:02:37,854
layer, and the application has one

20
00:02:37,892 --> 00:02:40,080
database for the entire app.

21
00:02:41,250 --> 00:02:44,362
You have one technology stack for the entire app,

22
00:02:44,516 --> 00:02:47,140
and also it may be running as a single process.

23
00:02:48,150 --> 00:02:51,986
You may have many developers that are all pushing changes through a

24
00:02:52,008 --> 00:02:55,934
shared release pipeline, and that may cause frictions at different

25
00:02:55,992 --> 00:02:58,470
points in software development lifecycle.

26
00:02:59,050 --> 00:03:02,774
For example, if you were to want to upgrade a shared library to take

27
00:03:02,812 --> 00:03:05,970
advantage of a new feature, you need to convince

28
00:03:06,050 --> 00:03:09,820
everybody else such that they upgrade at the same time.

29
00:03:10,190 --> 00:03:14,234
And if you were to quickly push an important fix for

30
00:03:14,272 --> 00:03:17,814
a feature, you still need to merge everybody else's

31
00:03:17,862 --> 00:03:19,690
changes alongside yours.

32
00:03:21,410 --> 00:03:25,070
So over time, what you may see is

33
00:03:25,140 --> 00:03:28,650
the challenges of an overgrown monolith. So what are those challenges?

34
00:03:28,730 --> 00:03:30,240
Let's take a look at that.

35
00:03:33,010 --> 00:03:36,626
So one of the challenges is a list of feature requests that we

36
00:03:36,648 --> 00:03:40,450
are not able to deliver in a timely manner to our users.

37
00:03:40,790 --> 00:03:44,130
So we have long lead time to delivering features.

38
00:03:44,630 --> 00:03:48,950
Another challenge is frequency of releases where we have releases

39
00:03:49,530 --> 00:03:53,346
maybe a couple of times in a year, and because we're

40
00:03:53,538 --> 00:03:56,930
not deploying as frequently to production, each release contain

41
00:03:57,010 --> 00:03:59,580
a lot of changes for the entire application.

42
00:04:01,470 --> 00:04:05,482
That then creates a high risk deployment. We have

43
00:04:05,616 --> 00:04:09,878
many changes bundled together. We're not really exercising

44
00:04:09,894 --> 00:04:12,974
our muscle to deploy to production because we're not releasing to

45
00:04:13,012 --> 00:04:16,410
production enough. So we have high risk deployments,

46
00:04:16,490 --> 00:04:20,110
but also if we run into any issues during the release,

47
00:04:20,610 --> 00:04:23,302
we also have high risk rollbacks.

48
00:04:23,466 --> 00:04:27,410
So you may typically see in this scenario teams prefer to fix

49
00:04:27,480 --> 00:04:30,782
forward, which is pretty high risk as well, but it's

50
00:04:30,846 --> 00:04:34,546
easier. So I've been in a situation

51
00:04:34,728 --> 00:04:38,498
worked in a team where I faced each one of these challenges.

52
00:04:38,594 --> 00:04:42,402
So I know of the pain of each one of these challenges

53
00:04:42,546 --> 00:04:46,502
from personal experience. So you may now ask,

54
00:04:46,556 --> 00:04:50,026
how about microservices? So let's take a look at

55
00:04:50,048 --> 00:04:51,980
the microservices. What are they?

56
00:04:53,710 --> 00:04:57,402
So microservices are minimal function services

57
00:04:57,536 --> 00:05:01,150
and they're each organized around business capabilities.

58
00:05:02,210 --> 00:05:06,094
You can deploy each one independently and

59
00:05:06,132 --> 00:05:08,960
each can scale independently as well.

60
00:05:09,890 --> 00:05:13,810
Each has its own independent technology stack

61
00:05:14,870 --> 00:05:17,220
and its own data store.

62
00:05:18,710 --> 00:05:22,754
They can talk to each other over APIs and

63
00:05:22,792 --> 00:05:26,662
you can have different teams aligned to each microservice such

64
00:05:26,716 --> 00:05:30,406
that the teams independently architect, design, develop,

65
00:05:30,508 --> 00:05:33,590
deploy, maintain each of these microservices.

66
00:05:34,570 --> 00:05:38,534
So all of that is good, but how does all of these things tie

67
00:05:38,582 --> 00:05:42,166
in together? So we need to evolve

68
00:05:42,198 --> 00:05:45,820
this monolith. It has the challenges that we just talked about.

69
00:05:47,470 --> 00:05:51,470
Now, when we talk about evolving the

70
00:05:51,540 --> 00:05:54,922
overgrown monolith, we are not thinking about a big bang approach

71
00:05:54,986 --> 00:05:58,686
because that just is not realistic. Instead, what we

72
00:05:58,708 --> 00:06:01,870
need to do is an iterative incremental approach.

73
00:06:03,270 --> 00:06:06,754
We can explore different new technologies and

74
00:06:06,792 --> 00:06:10,910
refactor components from this monolith

75
00:06:11,070 --> 00:06:14,686
where we are looking to gain some speed, to gain some agility,

76
00:06:14,798 --> 00:06:18,710
or we're looking to be able to independently scale

77
00:06:19,370 --> 00:06:22,920
specifically to meet the demands of the business.

78
00:06:23,530 --> 00:06:27,886
So we are iterating modernizing incrementally

79
00:06:28,018 --> 00:06:31,066
for a business purpose. So this is where we are

80
00:06:31,088 --> 00:06:32,060
going to start.

81
00:06:33,950 --> 00:06:37,674
Now, why should we refactor the service for

82
00:06:37,712 --> 00:06:38,780
business value?

83
00:06:40,450 --> 00:06:44,960
Independent deployment is the heart of microservices and

84
00:06:45,490 --> 00:06:48,846
with that we are going to gain reduction of the

85
00:06:48,868 --> 00:06:50,910
blessed radius for deployments.

86
00:06:52,550 --> 00:06:56,386
Each microservice is focused on a specific business

87
00:06:56,488 --> 00:07:01,154
function with a single responsibility and

88
00:07:01,192 --> 00:07:04,594
the teams aligned to a microservice can decide their

89
00:07:04,632 --> 00:07:08,722
own architecture and their own tech stack. This brings

90
00:07:08,786 --> 00:07:10,310
functional autonomy.

91
00:07:12,250 --> 00:07:15,842
With that we have minimized the dependencies

92
00:07:15,906 --> 00:07:19,094
across and that will maximize the development

93
00:07:19,142 --> 00:07:23,050
velocity for the teams working on the microservice.

94
00:07:23,870 --> 00:07:27,398
Now with each service focused on a single responsibility,

95
00:07:27,574 --> 00:07:31,694
we have the opportunity to focus scaling the

96
00:07:31,732 --> 00:07:36,314
high demand functions as opposed to scaling

97
00:07:36,442 --> 00:07:40,110
the whole app in its entirety, including the lesser used

98
00:07:40,180 --> 00:07:43,322
parts, lesser used functions alongside

99
00:07:43,386 --> 00:07:46,954
it. So let's take a look at our sample

100
00:07:47,002 --> 00:07:50,786
bonnet. We have an ecommerce shop.

101
00:07:50,968 --> 00:07:54,446
It's called the Unicorn shop. This is where we are selling

102
00:07:54,478 --> 00:07:58,086
unicorn related items such as a

103
00:07:58,108 --> 00:08:01,974
unicorn pencil, unicorn notebook and

104
00:08:02,012 --> 00:08:05,480
the application is a spring boot Java application.

105
00:08:05,930 --> 00:08:09,434
It has a MySQL database and

106
00:08:09,472 --> 00:08:12,170
on the front end it is using bootstrap.

107
00:08:13,470 --> 00:08:17,174
The application is deployed on EC two within a dedicated

108
00:08:17,222 --> 00:08:20,326
VPC in a public subnet for the purposes

109
00:08:20,358 --> 00:08:23,710
of this sample demo. And this is basically

110
00:08:23,780 --> 00:08:28,160
the tech stack for the entire monolithic ecommerce shop application.

111
00:08:31,090 --> 00:08:35,362
So our monolithic application has a number of controllers on

112
00:08:35,416 --> 00:08:38,462
top. So you see the inventory

113
00:08:38,526 --> 00:08:41,570
management in the unicorn controller. You see the

114
00:08:41,640 --> 00:08:45,666
shopping cart or the basket management in the basket controller,

115
00:08:45,778 --> 00:08:49,558
and the user controller that deals with user management with

116
00:08:49,644 --> 00:08:52,998
registrations and logins. We also have a health

117
00:08:53,084 --> 00:08:57,170
controller that performs basic health checks that I didn't include.

118
00:08:57,250 --> 00:09:01,062
Over there at the bottom, we have the database tables.

119
00:09:01,126 --> 00:09:05,270
We have each one focused on a specific domain.

120
00:09:05,430 --> 00:09:09,146
So we have three tables. We have

121
00:09:09,168 --> 00:09:12,874
the unicorns table. That is our unicorn teams

122
00:09:12,922 --> 00:09:16,766
inventory all the way on the right. We have the users table. Those are

123
00:09:16,788 --> 00:09:20,318
the users in our system. And in those middle, we have

124
00:09:20,324 --> 00:09:23,742
an association table that associates the users

125
00:09:23,886 --> 00:09:27,970
and their selections of unicorn items in their basket.

126
00:09:30,710 --> 00:09:33,810
So how do we go about evolving this monolith?

127
00:09:35,850 --> 00:09:39,186
We will use the Strangler fig pattern that's named by Martin

128
00:09:39,218 --> 00:09:43,218
Fowler from Thoughtworks and alongside him Sam Newman,

129
00:09:43,314 --> 00:09:46,950
previous thoughtworker. Both have really useful content on the topic.

130
00:09:47,710 --> 00:09:50,998
The idea is that our new services, the microservices,

131
00:09:51,094 --> 00:09:55,002
are similar to the strangler fig that's slowly growing around

132
00:09:55,056 --> 00:09:59,260
the trunk of the old tree, the system, the monolithic application.

133
00:10:00,590 --> 00:10:03,706
Now, if we go back to the sample in our ecommerce

134
00:10:03,738 --> 00:10:07,886
application, those basket functionality is critical and

135
00:10:07,908 --> 00:10:11,662
it needs to be highly available, durable and scalable to meet

136
00:10:11,716 --> 00:10:15,170
the ongoing sales demand, as well as spiky

137
00:10:15,670 --> 00:10:19,650
demand for sales such as Black Friday surges.

138
00:10:20,870 --> 00:10:24,226
So one good first step to evolve the ecommerce app is

139
00:10:24,248 --> 00:10:27,686
to move the basket functionality that's critical to the

140
00:10:27,708 --> 00:10:31,042
business out of the monolith and allow it to scale

141
00:10:31,106 --> 00:10:32,150
independently.

142
00:10:34,490 --> 00:10:38,050
So when thinking about breaking a monolith, we need to consider a

143
00:10:38,060 --> 00:10:42,122
few points. What is the best technology stack that

144
00:10:42,176 --> 00:10:45,370
is going to help us to implement the new microservice?

145
00:10:45,710 --> 00:10:49,482
And what would scale best based on the usage of

146
00:10:49,536 --> 00:10:53,040
this, in this case, shopping cart service, the basket service.

147
00:10:54,130 --> 00:10:57,834
There is existing data in the tables in the MySQL

148
00:10:57,882 --> 00:11:01,706
database. So how do we move the data from the database

149
00:11:01,738 --> 00:11:05,170
of the monolith to the database of the new microservice?

150
00:11:06,150 --> 00:11:09,506
There will be internal data exchange between monolith, microservices, AWS,

151
00:11:09,528 --> 00:11:13,534
the monolith. So when we are breaking those monolith to smaller

152
00:11:13,582 --> 00:11:16,726
chunks, we are introducing those chatter to the network. So we need

153
00:11:16,748 --> 00:11:20,294
to be thinking about the performance impact of

154
00:11:20,332 --> 00:11:20,920
that.

155
00:11:23,290 --> 00:11:26,950
How do we enable seamless switchover between

156
00:11:27,020 --> 00:11:30,554
the monolith and microservices? How do we make sure

157
00:11:30,592 --> 00:11:34,326
that the current customers, current consumers of our APIs

158
00:11:34,438 --> 00:11:35,500
won't break.

159
00:11:38,990 --> 00:11:43,070
So let's focus on this. How can we seamlessly chip away

160
00:11:43,140 --> 00:11:46,814
at the monolith? First of all, there is an

161
00:11:46,852 --> 00:11:50,814
existing service contract. That's a REstful API that is exposed by

162
00:11:50,852 --> 00:11:53,986
our monolithic application, and we need to abide by

163
00:11:54,008 --> 00:11:58,126
this contract such that we're not breaking any of our existing

164
00:11:58,238 --> 00:12:02,082
application consumers existing clients. So how do we

165
00:12:02,136 --> 00:12:05,626
achieve that? First of all, what's in this restful

166
00:12:05,678 --> 00:12:09,090
API? For example, if you want to create a user,

167
00:12:09,170 --> 00:12:13,026
you'll be showing an HTTP post to user

168
00:12:13,058 --> 00:12:16,870
Uripad. If you wanted to log in, that's a post

169
00:12:17,020 --> 00:12:20,746
HTTP post to user login Uripad to

170
00:12:20,768 --> 00:12:24,426
get all of the inventory, all of the unicorns, such that we

171
00:12:24,448 --> 00:12:28,134
can show it in the homepage. It's a get HTTP,

172
00:12:28,182 --> 00:12:31,020
get on unicorns and so on.

173
00:12:31,630 --> 00:12:35,614
So we are interested in replacing the monolith's implementation of the

174
00:12:35,652 --> 00:12:39,182
shopping cart functionality with the new microservice and

175
00:12:39,236 --> 00:12:42,486
all of the shopping cart. The based related API

176
00:12:42,538 --> 00:12:46,414
actions like adding, removing items from the basket,

177
00:12:46,542 --> 00:12:50,018
getting the contents of the basket, they're all at a specific

178
00:12:50,104 --> 00:12:54,414
URI pad, so they're hanging off of the base URL,

179
00:12:54,542 --> 00:12:57,970
unicorns and basket. So that's those URI pad.

180
00:13:00,570 --> 00:13:04,406
So we will first introduce a reverse proxy in between the

181
00:13:04,428 --> 00:13:08,634
apps consumers and the monolith. And for

182
00:13:08,672 --> 00:13:12,006
now, the reverse proxy is taking the requests

183
00:13:12,038 --> 00:13:15,514
from the consumers, the application consumers, and routing them

184
00:13:15,552 --> 00:13:16,970
all to the monolith.

185
00:13:19,070 --> 00:13:22,746
We can then introduce the refactored microservice behind the reverse

186
00:13:22,778 --> 00:13:26,122
proxy, and we will configure it to route the requests

187
00:13:26,186 --> 00:13:29,280
mapping to the unicorn's basket URI Pat

188
00:13:29,730 --> 00:13:33,458
such that it all goes. Those requests go to

189
00:13:33,464 --> 00:13:37,506
the refactored shopping cart microservice. So one

190
00:13:37,528 --> 00:13:40,946
way to achieve this already today, like on AWS, is to use

191
00:13:40,968 --> 00:13:45,098
AWS API gateway. API Gateway allows you to define resources

192
00:13:45,134 --> 00:13:48,294
and methods. So first you would create all of the

193
00:13:48,412 --> 00:13:52,166
unicorn resources, and then you

194
00:13:52,188 --> 00:13:56,466
would add methods on top of that. You would configure,

195
00:13:56,578 --> 00:13:59,900
create and configure HTTP methods on top of those.

196
00:14:02,110 --> 00:14:05,770
But is there a faster and less manual approach?

197
00:14:06,270 --> 00:14:10,054
We can leverage AWS migration hub refactor spaces to

198
00:14:10,112 --> 00:14:13,566
accelerate the evolution of our monolith. It is going

199
00:14:13,588 --> 00:14:17,342
to help us with managing the iterative refactoring process

200
00:14:17,476 --> 00:14:20,906
while operating in production using the strangler

201
00:14:20,938 --> 00:14:25,074
fig pattern. This way we can focus on developing the applications

202
00:14:25,192 --> 00:14:28,574
for the new microservices and not lose time and effort

203
00:14:28,622 --> 00:14:31,794
in creating and managing those underlying infrastructure that

204
00:14:31,832 --> 00:14:35,302
makes refactoring possible. So let's dive into how

205
00:14:35,356 --> 00:14:38,390
refactoring the monolith looks like using those approach.

206
00:14:43,370 --> 00:14:46,854
So let's walk through the steps for also going to be

207
00:14:46,892 --> 00:14:49,686
used for our demo of refactor spaces.

208
00:14:49,878 --> 00:14:53,702
First you are going to create the refactor spaces

209
00:14:53,766 --> 00:14:57,430
environment in an account that becomes the environment

210
00:14:57,510 --> 00:15:01,038
owner. This account is special because it

211
00:15:01,044 --> 00:15:05,018
is going to get cross account visibility into the other accounts

212
00:15:05,114 --> 00:15:09,534
that are hosting the other services, such as the monolithic application

213
00:15:09,732 --> 00:15:12,702
and the shopping cart service. Now,

214
00:15:12,756 --> 00:15:16,290
refactor spaces configures transit gateway in this account

215
00:15:16,360 --> 00:15:20,402
on our behalf when we create the environment, and because

216
00:15:20,456 --> 00:15:23,586
the transit gateway is in our own account, we can

217
00:15:23,608 --> 00:15:27,254
customize it as needed. Next we are

218
00:15:27,292 --> 00:15:31,030
going to add the other accounts to be used for refactoring

219
00:15:31,690 --> 00:15:35,206
to the environment. So in this example

220
00:15:35,308 --> 00:15:39,462
we have two accounts. One is the existing monolith

221
00:15:39,526 --> 00:15:43,066
account that's already available and

222
00:15:43,088 --> 00:15:45,542
then the other is for the new microservice.

223
00:15:45,686 --> 00:15:49,174
So in real world you likely have the monolith

224
00:15:49,222 --> 00:15:53,086
app first. So you would be adding that account first and eventually when

225
00:15:53,108 --> 00:15:56,714
you create the shopping cart service or the second microservice

226
00:15:56,762 --> 00:15:59,920
for example, then you would add that later.

227
00:16:00,930 --> 00:16:04,274
Now in our demo we are actually using one account for both of these,

228
00:16:04,312 --> 00:16:08,450
but as a best practice in terms of following the multi account strategy,

229
00:16:09,190 --> 00:16:13,250
the recommendation is to use an account

230
00:16:13,400 --> 00:16:17,622
per app for isolation of resources, which I'll dive into

231
00:16:17,756 --> 00:16:21,366
in a little bit. Next we are going

232
00:16:21,388 --> 00:16:25,346
to create an application proxy in the environment owner

233
00:16:25,378 --> 00:16:29,754
account. Remember that reverse proxy? So that's what we are doing here.

234
00:16:29,952 --> 00:16:33,946
And AWS part of this refactor spaces on

235
00:16:33,968 --> 00:16:37,610
our behalf is configuring the API gateway VPC link

236
00:16:37,680 --> 00:16:41,274
and network load balancer such that it can allow external

237
00:16:41,322 --> 00:16:44,654
HTTP access to the services in our

238
00:16:44,692 --> 00:16:48,094
refactor spaces environment. So the monolithic application

239
00:16:48,292 --> 00:16:52,240
and also the shopping cart service in those example.

240
00:16:55,830 --> 00:17:00,130
Next we are going to add a service with its VPC

241
00:17:00,550 --> 00:17:04,370
or you can also create this service from the specific service

242
00:17:04,440 --> 00:17:08,614
account. For example from the shopping cart account you could create the service

243
00:17:08,812 --> 00:17:12,326
and refactor spaces configures the transit gateway to

244
00:17:12,348 --> 00:17:16,450
bridge the vpcs. So traffic is now permitted

245
00:17:16,530 --> 00:17:20,278
between the service vpcs in each of the accounts. So the monolith

246
00:17:20,374 --> 00:17:24,006
application VPC and the shopping Cart VPC

247
00:17:24,118 --> 00:17:27,894
now have cross account network

248
00:17:27,942 --> 00:17:31,966
bridge and now

249
00:17:32,068 --> 00:17:35,566
we are ready to add a route for the external access to

250
00:17:35,588 --> 00:17:39,598
our application. So we will likely first add

251
00:17:39,764 --> 00:17:43,426
the default route to send all of the application traffic to

252
00:17:43,448 --> 00:17:47,374
the monolith. And all traffic

253
00:17:47,422 --> 00:17:51,054
initially is using to services by the monolith and API

254
00:17:51,102 --> 00:17:55,300
gateway is just acting as our front door to the application right now.

255
00:17:56,090 --> 00:17:59,480
And then once the monolith microservices AWS ready, it's available,

256
00:18:00,010 --> 00:18:04,290
we will route a specific set of the URI

257
00:18:04,370 --> 00:18:07,706
pads to the monolith microservices AWS

258
00:18:07,728 --> 00:18:11,994
external app users don't know that traffic is now being handled by

259
00:18:12,032 --> 00:18:15,526
the new shopping cart microservice for the shopping cart

260
00:18:15,558 --> 00:18:19,606
requires so also want to deep dive

261
00:18:19,638 --> 00:18:23,470
into the architecture here. One of the major benefits of moving towards

262
00:18:23,540 --> 00:18:27,658
microservices architecture is that we can develop each microservice

263
00:18:27,754 --> 00:18:31,502
using different technology stacks that is most suitable for the use case.

264
00:18:31,636 --> 00:18:35,406
So here we decided to use lambda as the compute and Dynamodb

265
00:18:35,438 --> 00:18:39,170
as a database for the shopping cart functionality given

266
00:18:39,240 --> 00:18:42,994
their ability to run and scale based on usage with high

267
00:18:43,032 --> 00:18:46,626
availability. Think about Black Friday

268
00:18:46,658 --> 00:18:50,422
or Cyber Monday. So our unicorn shop is not going to have any

269
00:18:50,476 --> 00:18:54,598
issues with scaling for those spiky sales days

270
00:18:54,764 --> 00:18:58,346
in this architecture. And Lambda and DynamoDB are

271
00:18:58,368 --> 00:19:01,740
serverless. That means that we don't need to worry about

272
00:19:02,510 --> 00:19:06,266
provisioning and managing servers. We can focus on

273
00:19:06,288 --> 00:19:10,198
application development for this shopping cart application and also we

274
00:19:10,224 --> 00:19:14,894
will only pay for what we use now

275
00:19:14,932 --> 00:19:18,894
another thing that I had mentioned is that refactor spaces is enabling us

276
00:19:18,932 --> 00:19:23,050
to follow best practices in having account level isolation

277
00:19:23,130 --> 00:19:26,526
for these services. So we're following the

278
00:19:26,548 --> 00:19:30,434
multi account strategy for each application here,

279
00:19:30,472 --> 00:19:34,562
monolith app and the shopping cart app we have a separate account and

280
00:19:34,616 --> 00:19:37,766
this is helping us in multiple ways. We are

281
00:19:37,788 --> 00:19:40,898
going to minimize the blessed radius with this approach.

282
00:19:40,994 --> 00:19:44,518
If there is an issue in one of these accounts with one of

283
00:19:44,524 --> 00:19:48,534
these apps that is scoped

284
00:19:48,582 --> 00:19:51,180
to the account in which the application is,

285
00:19:52,270 --> 00:19:55,500
we are isolating resources that belong together

286
00:19:55,950 --> 00:20:00,338
based on perhaps their security profile or data profile.

287
00:20:00,534 --> 00:20:03,966
For example, different business units, different environments will

288
00:20:03,988 --> 00:20:07,882
have different security profiles, different data access profiles

289
00:20:07,946 --> 00:20:11,614
and we are able to isolate those resources if

290
00:20:11,652 --> 00:20:14,030
we use separate accounts.

291
00:20:15,090 --> 00:20:18,942
We are also ensuring that each workload gets a well defined

292
00:20:19,006 --> 00:20:22,354
individual quota for its resource limits because we

293
00:20:22,392 --> 00:20:24,020
are using a separate account.

294
00:20:26,550 --> 00:20:30,546
So here we're using refactor spaces. It is orchestrating the networking and traffic

295
00:20:30,578 --> 00:20:34,198
routing requirements for us. It's creating that network fabric that

296
00:20:34,204 --> 00:20:36,870
we talked about earlier with the reverse proxy.

297
00:20:37,290 --> 00:20:40,934
And this way the monolith and the new microservice

298
00:20:40,982 --> 00:20:45,002
are able to communicate directly across different AWS accounts and our

299
00:20:45,056 --> 00:20:49,366
users are not impacted of any changes that are happening as we are refactoring

300
00:20:49,398 --> 00:20:51,550
with chip innovate this monolith.

301
00:20:57,330 --> 00:21:00,842
So let's dive into our app modernizing workshop.

302
00:21:00,906 --> 00:21:04,466
So here is the workshop link. If you'd like to follow along

303
00:21:04,568 --> 00:21:07,582
in your own account, in your free accounts.

304
00:21:07,726 --> 00:21:11,106
And of course, after you're done with the workshop, make sure to clean up your

305
00:21:11,128 --> 00:21:12,050
resources.

306
00:21:15,270 --> 00:21:19,154
So, brief overview of the steps we just already discussed.

307
00:21:19,202 --> 00:21:23,426
So it's the same steps. We will be creating refactor spaces environments.

308
00:21:23,618 --> 00:21:27,654
We will be adding the accounts. In our case, we only have one

309
00:21:27,692 --> 00:21:31,334
account, but best practice is to have multiple

310
00:21:31,382 --> 00:21:34,470
accounts, one account per application per environment.

311
00:21:34,550 --> 00:21:38,454
Ideally we will create the app proxy

312
00:21:38,582 --> 00:21:42,906
in refactor spaces. We are not creating these resources individually.

313
00:21:43,018 --> 00:21:46,666
Refactor spaces is taking care of the creation of the API

314
00:21:46,698 --> 00:21:50,474
gateway Transit gateway VPC link network load balancer.

315
00:21:50,522 --> 00:21:54,202
Underneath the covers we'll be creating

316
00:21:54,266 --> 00:21:57,666
defining those services, the monolithic application

317
00:21:57,848 --> 00:22:01,794
and the shopping cart service. In reality, in real world,

318
00:22:01,832 --> 00:22:05,154
you would likely first have the monolith and then you would add the new

319
00:22:05,192 --> 00:22:09,126
microservices as you create them. And then we'll be adding the

320
00:22:09,148 --> 00:22:12,770
routes such that we can route the appropriate requests

321
00:22:12,850 --> 00:22:16,774
based on the URI pads to the appropriate service that is

322
00:22:16,812 --> 00:22:20,838
in changes of those requests. So in this case, Unicorn's basket

323
00:22:20,934 --> 00:22:24,694
URi pad is going to be routed to the shopping cart microservice,

324
00:22:24,742 --> 00:22:28,794
the new one and everything else. The default route for

325
00:22:28,832 --> 00:22:32,906
all those other requests will be routed to the monolithic app.

326
00:22:33,088 --> 00:22:36,746
So let's jump into our demo. So as

327
00:22:36,768 --> 00:22:39,818
a first step, we create those refactor spaces environments.

328
00:22:39,914 --> 00:22:43,134
Here at the bottom you see a brand new one that was

329
00:22:43,172 --> 00:22:46,834
created and when we do this, what happens is that

330
00:22:46,872 --> 00:22:50,494
transit gateway is also created on our behalf by refactor

331
00:22:50,542 --> 00:22:54,418
spaces. After this step, if we have

332
00:22:54,504 --> 00:22:58,206
our monolithic application in a different account, then we can share this

333
00:22:58,248 --> 00:23:01,894
refactor spaces environment to that account. We can also

334
00:23:01,932 --> 00:23:05,394
do that once we chip away at the monolith.

335
00:23:05,442 --> 00:23:08,966
If we have our new microservice in a different account, we can do

336
00:23:08,988 --> 00:23:12,362
the same. We can share those refactor spaces environment to the

337
00:23:12,416 --> 00:23:16,134
microservice account. For the purposes of the workshop.

338
00:23:16,182 --> 00:23:20,220
We have a simple use case, so we have all of the

339
00:23:20,670 --> 00:23:24,154
services in the same account. But as a best practice,

340
00:23:24,202 --> 00:23:27,434
you already know that in real world you'll be following

341
00:23:27,482 --> 00:23:31,002
multi account strategy. After you create the environment,

342
00:23:31,066 --> 00:23:33,520
the next step is to create the application.

343
00:23:34,390 --> 00:23:38,786
And when you create the application, it will also create

344
00:23:38,888 --> 00:23:42,386
all of the application proxy resources. Remember that's the

345
00:23:42,408 --> 00:23:46,370
API gateway, the VPC link, the network load balancer,

346
00:23:47,930 --> 00:23:52,018
and this way you are going to have a proxy endpoint URL

347
00:23:52,114 --> 00:23:55,782
that is going to be used by the front

348
00:23:55,836 --> 00:23:59,290
end, in this case for the unicorn shop, the front

349
00:23:59,360 --> 00:24:02,534
end that is bootstrap JS deployed

350
00:24:02,582 --> 00:24:06,170
in public facing s. Those bucket is going to be

351
00:24:06,240 --> 00:24:10,502
using that proxy endpoint URL as its destination

352
00:24:10,646 --> 00:24:14,782
as soon as we put the monolith behind that

353
00:24:14,916 --> 00:24:18,686
proxy endpoint URL. So here you're seeing the

354
00:24:18,708 --> 00:24:21,982
front end, the application that

355
00:24:22,036 --> 00:24:26,962
we'll be creating in refactor spaces. And first

356
00:24:27,016 --> 00:24:30,514
we are going to configure the

357
00:24:30,552 --> 00:24:33,746
service, the monolith service behind it. We are going to

358
00:24:33,768 --> 00:24:37,506
route all of those requests by default to the

359
00:24:37,528 --> 00:24:41,366
monolith. So that's what you would typically do as well in the real world.

360
00:24:41,468 --> 00:24:45,206
And then AWS, you apply the strangler fig pattern to

361
00:24:45,308 --> 00:24:49,302
chip away at the monolith. In the next stage, you would

362
00:24:49,356 --> 00:24:53,002
add another service and you would define all of the routes to that

363
00:24:53,056 --> 00:24:57,130
service. In our case, that's a shopping cart. So I'll be going

364
00:24:57,200 --> 00:25:01,206
over those routes and how

365
00:25:01,248 --> 00:25:05,230
we would configure that as well in a minute.

366
00:25:08,130 --> 00:25:11,626
So as you can see, as part of creation

367
00:25:11,658 --> 00:25:15,666
of the application, we are telling it where to put the

368
00:25:15,688 --> 00:25:19,454
proxy VPC and where to deploy those resources,

369
00:25:19,582 --> 00:25:23,406
which is the API gateway reST API, the VPC links

370
00:25:23,438 --> 00:25:27,266
network load balancer and the resource policies resources.

371
00:25:27,458 --> 00:25:31,640
So here I already have an application inside this

372
00:25:32,410 --> 00:25:36,440
environment, refactor spaces environment. That's the unistore app

373
00:25:36,890 --> 00:25:41,438
that already has the API gateway endpoint.

374
00:25:41,634 --> 00:25:45,066
It has the network load balancer that it created on its

375
00:25:45,088 --> 00:25:48,934
own. I didn't have to create those on my own. So that is what refactor

376
00:25:48,982 --> 00:25:50,540
spaces is giving me.

377
00:25:52,670 --> 00:25:55,834
I don't need to focus on creating

378
00:25:55,882 --> 00:25:59,946
all the network layer resources that are required

379
00:26:00,058 --> 00:26:03,760
to make refactoring easy.

380
00:26:05,270 --> 00:26:08,514
And after I'm done creating the application, then I came

381
00:26:08,552 --> 00:26:11,826
here and I created those services. First I

382
00:26:11,848 --> 00:26:16,034
added the monolith. I named it Monolith and

383
00:26:16,072 --> 00:26:19,318
I gave it the endpoint, which is this is the

384
00:26:19,404 --> 00:26:22,934
EC two URL endpoint from

385
00:26:22,972 --> 00:26:27,990
inside those VPC. And after

386
00:26:28,060 --> 00:26:31,690
that, once I chipped away at the monolith and I

387
00:26:31,760 --> 00:26:36,970
created three lambdas, using the workshop to add

388
00:26:37,120 --> 00:26:40,726
teams to the shopping cart, to remove items from the shopping

389
00:26:40,758 --> 00:26:44,078
cart, and to get teams from the shopping cart. Each one of

390
00:26:44,084 --> 00:26:47,626
these is a separate lambda. Remember with the DynamoDB

391
00:26:47,658 --> 00:26:51,182
database for

392
00:26:51,236 --> 00:26:52,320
those services.

393
00:26:54,150 --> 00:26:58,020
Here is how I'm doing the routing. So first of all,

394
00:26:59,830 --> 00:27:04,414
it is Pat based URI pattern

395
00:27:04,462 --> 00:27:08,246
match. So unicorns basket. That's the pattern match on

396
00:27:08,268 --> 00:27:12,114
the Uri pad. And also it's coupled with HTTP

397
00:27:12,162 --> 00:27:16,134
verbs because this is a restful API to

398
00:27:16,172 --> 00:27:19,590
get the items from the cart we're using HTTP get.

399
00:27:19,660 --> 00:27:23,894
So that is mapping to the get cart service lambda to delete teams

400
00:27:23,942 --> 00:27:28,054
from the cart we are using HTTP delete

401
00:27:28,182 --> 00:27:32,470
and that is mapping to the remove cart service lambda.

402
00:27:32,550 --> 00:27:36,366
So any requires that come in as HTTP deletes on

403
00:27:36,388 --> 00:27:40,782
those unicorns basket is going to be routed to this lambda and

404
00:27:40,836 --> 00:27:44,986
also addition of items to the cart using

405
00:27:45,028 --> 00:27:47,998
to get routed to the add to cart service lambda.

406
00:27:48,174 --> 00:27:53,234
So it's as easy as that. I'm able to come

407
00:27:53,272 --> 00:27:58,178
here in the future if I want to add another microservice.

408
00:27:58,274 --> 00:28:02,022
If I decided that over time that

409
00:28:02,076 --> 00:28:05,830
there's a need to chip away further to this monolith,

410
00:28:06,170 --> 00:28:09,980
I create that microservice in a different account,

411
00:28:10,590 --> 00:28:15,034
I'll share my refactor spaces environment to that account and

412
00:28:15,072 --> 00:28:19,018
I'll define the service inside this application, the uni store

413
00:28:19,184 --> 00:28:22,302
unicorn shop application inside this

414
00:28:22,356 --> 00:28:26,442
environment. And then I will also define the routes,

415
00:28:26,506 --> 00:28:29,646
those Uri pads coupled with the

416
00:28:29,668 --> 00:28:33,546
HTTP verbs that I'm

417
00:28:33,578 --> 00:28:37,250
going to use to route to this new microservice.

418
00:28:37,750 --> 00:28:40,366
And over time you can iteratively,

419
00:28:40,558 --> 00:28:45,054
incrementally chip away at that monolith using refactor spaces

420
00:28:45,182 --> 00:28:48,274
without having to worry boot the network load balancer,

421
00:28:48,322 --> 00:28:51,862
API, gateway, VPC link Transit gateway, all that

422
00:28:51,916 --> 00:28:55,234
configuration because it is all taken care on your behalf.

423
00:28:55,282 --> 00:28:59,082
So here is how that unicorn shop looks

424
00:28:59,136 --> 00:29:03,302
like this is using the monolith

425
00:29:03,446 --> 00:29:07,046
for everything but the shopping cart. So if I'm

426
00:29:07,078 --> 00:29:10,198
doing actions inside the shopping cart,

427
00:29:10,374 --> 00:29:14,702
then those actions are going to my

428
00:29:14,836 --> 00:29:18,622
lambda. But if I am actually doing other

429
00:29:18,676 --> 00:29:21,738
things here, if I am browsing,

430
00:29:21,914 --> 00:29:25,054
clicking on other things, if I'm logging in, et cetera,

431
00:29:25,182 --> 00:29:29,006
then those are going to the monolithic

432
00:29:29,038 --> 00:29:33,006
app. So with that concludes

433
00:29:33,038 --> 00:29:36,754
those demo. So here are our key takeaways

434
00:29:36,802 --> 00:29:40,360
from this talk refactor. When it provides business value,

435
00:29:41,530 --> 00:29:44,920
iterate incrementally. If it still provides business value,

436
00:29:46,010 --> 00:29:49,366
use an app proxy such that you honor the service contract to

437
00:29:49,388 --> 00:29:53,334
the users so that all of these changes are happening seamlessly to

438
00:29:53,372 --> 00:29:56,594
them and follow multi account strategy.

439
00:29:56,722 --> 00:29:59,766
For any new microservices that you're chipping away from

440
00:29:59,788 --> 00:30:02,926
that monolith min minimize that blessed radius and

441
00:30:02,948 --> 00:30:06,270
all the good things that come with multi account

442
00:30:06,340 --> 00:30:09,660
strategy benefit from them. Thank you.

