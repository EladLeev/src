1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:13,374
observing changes exceptions errors in

4
00:00:13,412 --> 00:00:16,746
real time allows you to not only experiment with confidence

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,514
Code hello

7
00:00:47,632 --> 00:00:51,514
everybody, my name is Anton Kalik, I'm software

8
00:00:51,562 --> 00:00:55,118
engineer from amenitiz.com and

9
00:00:55,204 --> 00:00:58,880
today I'd like to present my topic about

10
00:01:00,370 --> 00:01:03,810
translator words application on JavaScript.

11
00:01:06,630 --> 00:01:11,726
Literally it's a story of creating

12
00:01:11,758 --> 00:01:16,310
from scratch startup till the workable end solution.

13
00:01:17,050 --> 00:01:21,426
We're going to talk about what kind of tools it's

14
00:01:21,458 --> 00:01:25,240
necessary to have in order to bring up

15
00:01:26,010 --> 00:01:29,718
the startup with a potential scalability

16
00:01:29,814 --> 00:01:33,894
for the future. We check the corner

17
00:01:33,942 --> 00:01:38,874
cases and what

18
00:01:38,912 --> 00:01:42,522
kind of tool better to use in scope of JavaScript

19
00:01:42,586 --> 00:01:46,766
for sure. And we going to check the

20
00:01:46,948 --> 00:01:50,478
details of the schemas, how to connect,

21
00:01:50,564 --> 00:01:54,174
communicate and make alive

22
00:01:54,222 --> 00:01:57,986
your startup idea and example of

23
00:01:58,008 --> 00:02:01,940
that. I choose that project

24
00:02:06,470 --> 00:02:11,014
which has been created actually by my brother and

25
00:02:11,212 --> 00:02:14,694
I was involved with to set

26
00:02:14,732 --> 00:02:18,146
up the service for that and client

27
00:02:18,178 --> 00:02:22,600
side for desktop. And here

28
00:02:23,230 --> 00:02:27,260
mostly a story of creation of that project

29
00:02:28,590 --> 00:02:32,160
where we were started, where are we right now?

30
00:02:32,770 --> 00:02:36,190
And all of that development details

31
00:02:36,610 --> 00:02:44,594
which could be interesting for you. So first

32
00:02:44,632 --> 00:02:48,210
of all, let's take a look on what is the project. Is that so?

33
00:02:48,280 --> 00:02:52,174
My brother created that word deposit iOS

34
00:02:52,222 --> 00:02:56,198
application and I was thinking

35
00:02:56,364 --> 00:03:00,614
with him just to improve the project itself to bring

36
00:03:00,812 --> 00:03:03,654
this more scalable for the future,

37
00:03:03,852 --> 00:03:07,442
which database to use, which service we're going to use

38
00:03:07,516 --> 00:03:11,354
and how we're going to use the clients in our case and so

39
00:03:11,392 --> 00:03:14,762
on. Yeah,

40
00:03:14,816 --> 00:03:18,010
so server and client,

41
00:03:19,310 --> 00:03:23,358
this is the crucial communication between that and what I decided to

42
00:03:23,364 --> 00:03:27,246
choose. I decided to choose node on the server side and react on

43
00:03:27,268 --> 00:03:30,858
the client side. Definitely my tool is Javascript

44
00:03:31,034 --> 00:03:34,740
and that's why I decided to go in that way and

45
00:03:36,070 --> 00:03:39,794
where to start. So this is actually very important question

46
00:03:39,912 --> 00:03:43,906
because firstly I

47
00:03:43,928 --> 00:03:48,934
was thinking, okay, I need to create something like a

48
00:03:48,972 --> 00:03:52,326
logic algorithm to check it

49
00:03:52,348 --> 00:03:56,614
up, like how it could work, and up

50
00:03:56,652 --> 00:04:00,694
front of that algorithm to build the project. So what

51
00:04:00,732 --> 00:04:04,486
I mean by the logical algorithm, it means like the basic

52
00:04:04,518 --> 00:04:08,394
basic solution of the problem solving and

53
00:04:08,432 --> 00:04:12,058
then according that simple small

54
00:04:12,144 --> 00:04:15,718
problem solving solution to have a scalability

55
00:04:15,814 --> 00:04:19,482
architecture. Okay, so from the small one solution

56
00:04:19,546 --> 00:04:23,454
to the scalable architecture and let's go to the very basic

57
00:04:23,502 --> 00:04:27,794
one schema, how I was thinking how

58
00:04:27,832 --> 00:04:31,906
we can spread out the project. And I

59
00:04:31,928 --> 00:04:34,850
was thinking like okay, we have to create a database,

60
00:04:36,570 --> 00:04:40,600
whatever it is, postgres Mongo or something else.

61
00:04:41,690 --> 00:04:45,730
We communicate with database through the server

62
00:04:45,890 --> 00:04:49,206
and brings the data right to the client

63
00:04:49,238 --> 00:04:52,700
desktop and glide mobile well

64
00:04:53,870 --> 00:04:57,430
eventually the tools for database

65
00:04:57,590 --> 00:05:00,922
was MongoDB server created

66
00:05:00,986 --> 00:05:04,586
by node JS together with GraphQL

67
00:05:04,618 --> 00:05:08,298
which will show more expanded simulatedly.

68
00:05:08,394 --> 00:05:12,214
But the most important instruments over here mongo node

69
00:05:12,362 --> 00:05:16,126
react and some of the clients could be on react

70
00:05:16,158 --> 00:05:21,300
native or iOS or whatever it is how

71
00:05:21,750 --> 00:05:25,214
to store and serve that service.

72
00:05:25,352 --> 00:05:29,846
Because all of this could have

73
00:05:29,868 --> 00:05:31,960
to communicate between each other.

74
00:05:33,770 --> 00:05:37,170
I choose Amazon Web services instances.

75
00:05:37,250 --> 00:05:41,046
I split three instances between client server

76
00:05:41,238 --> 00:05:46,300
and database and

77
00:05:46,910 --> 00:05:50,394
this is the communication. So for the react

78
00:05:50,442 --> 00:05:55,150
native or for any other phone

79
00:05:55,220 --> 00:05:58,874
applications it could be Apple or Android

80
00:05:58,922 --> 00:06:02,320
development platform which is fine.

81
00:06:02,630 --> 00:06:06,100
But today we're going to talk mostly about

82
00:06:06,550 --> 00:06:10,174
the database server and client

83
00:06:10,222 --> 00:06:14,194
on react and all of them was

84
00:06:14,232 --> 00:06:18,642
an instance Amazon web services and communication

85
00:06:18,706 --> 00:06:23,142
between them through the routine 53 inside

86
00:06:23,196 --> 00:06:26,838
the Amazon there is a couple of rules between

87
00:06:26,924 --> 00:06:31,740
connections, the security part and

88
00:06:36,350 --> 00:06:39,718
engine setups that I will show you lightly.

89
00:06:39,894 --> 00:06:43,498
So for now let's take a look on the

90
00:06:43,504 --> 00:06:47,214
code JS server. What we have over here, as I

91
00:06:47,252 --> 00:06:51,680
said, we have a database MongoDB and

92
00:06:53,250 --> 00:06:57,342
MongoDB ODM. Actually communication with database

93
00:06:57,406 --> 00:07:02,260
through the models and models app

94
00:07:03,030 --> 00:07:06,582
and Apollo server applies as models and

95
00:07:06,716 --> 00:07:10,822
communication with the models through the resolvers and

96
00:07:10,876 --> 00:07:14,806
resolvers could be mutations, queries, in some cases it

97
00:07:14,828 --> 00:07:19,398
could be subscriptions. And it's

98
00:07:19,414 --> 00:07:23,418
like a structure of communication and manipulation with

99
00:07:23,584 --> 00:07:27,606
your database. So Apollo server applied

100
00:07:27,638 --> 00:07:31,514
that resolvers which is mutations and queries

101
00:07:31,562 --> 00:07:35,630
and comes right to the Apollo and there is the flow of communication

102
00:07:35,970 --> 00:07:39,022
and all of structured data which is

103
00:07:39,076 --> 00:07:42,786
going to

104
00:07:42,808 --> 00:07:45,854
the clients has to be alignable

105
00:07:45,902 --> 00:07:50,114
for the graphQL schema and everything

106
00:07:50,232 --> 00:07:53,326
spinning around from the code server.

107
00:07:53,438 --> 00:07:57,426
So launch it on the code server and that's

108
00:07:57,458 --> 00:08:01,270
how we are providing our data for the clients

109
00:08:02,090 --> 00:08:05,480
docker for sure. Locally you can use

110
00:08:06,810 --> 00:08:10,374
Mongo, you can use for the Docker just to use the

111
00:08:10,412 --> 00:08:14,870
Docker compose app to build Mongo and connect to the database.

112
00:08:14,950 --> 00:08:18,810
Let's take a look on the initial setup of the CoA server.

113
00:08:19,310 --> 00:08:23,966
I choose CoA. For the node server you

114
00:08:23,988 --> 00:08:26,782
can choose express and whatever you want.

115
00:08:26,836 --> 00:08:30,560
But in this case we consider that

116
00:08:33,090 --> 00:08:36,566
framework code. So from Cora

117
00:08:36,618 --> 00:08:40,958
I creating the application itself instance of database

118
00:08:41,054 --> 00:08:45,122
and connected to database couple

119
00:08:45,176 --> 00:08:49,202
of middlewares. For example one of the interesting graphql upload

120
00:08:49,266 --> 00:08:53,110
code which is handling the uploading of files

121
00:08:54,730 --> 00:08:59,974
listeners and open the port for

122
00:09:00,012 --> 00:09:03,974
our server. But it's not, that's it actually

123
00:09:04,012 --> 00:09:08,774
we have to set up Apollo server and

124
00:09:08,892 --> 00:09:12,958
in the same and the same way we're just starting

125
00:09:13,044 --> 00:09:16,750
our Apollo server with applied middleware

126
00:09:17,730 --> 00:09:21,498
for specific path we're going to listening app

127
00:09:21,594 --> 00:09:25,442
v one graphql in order to have our

128
00:09:25,496 --> 00:09:29,090
request against server.

129
00:09:31,350 --> 00:09:35,334
Yes. So what

130
00:09:35,372 --> 00:09:40,774
is the Apollo server startups over here. So this

131
00:09:40,812 --> 00:09:44,678
is pretty the same like it's prescribed in documents and so on.

132
00:09:44,764 --> 00:09:48,554
I just bring for

133
00:09:48,672 --> 00:09:52,138
this session the whole amount of work,

134
00:09:52,304 --> 00:09:56,426
what has been done in order to have a

135
00:09:56,448 --> 00:10:00,380
skeleton of building your

136
00:10:01,010 --> 00:10:04,798
startup solutions where

137
00:10:04,884 --> 00:10:08,106
we included GraphQL and Apollo server.

138
00:10:08,218 --> 00:10:11,934
So here you can see that we using

139
00:10:11,972 --> 00:10:15,638
the maker executable schema, which is getting the type devs,

140
00:10:15,674 --> 00:10:19,566
which is schema, graphql itself resolvers.

141
00:10:19,678 --> 00:10:23,102
As I show it in the schema, back to the schema,

142
00:10:23,166 --> 00:10:28,360
you can see that Apollo communication with resolvers and

143
00:10:29,530 --> 00:10:32,706
we're catching the years and formatting

144
00:10:32,738 --> 00:10:36,354
the years and also the context.

145
00:10:36,482 --> 00:10:40,374
So context creating the token

146
00:10:40,502 --> 00:10:45,050
from the context arrived right from the cora.

147
00:10:45,470 --> 00:10:49,910
We are getting that token from

148
00:10:50,000 --> 00:10:54,414
authorization header, validate that token by

149
00:10:54,452 --> 00:10:57,614
validation we will understand is

150
00:10:57,652 --> 00:11:00,842
there a session or not. So if they have session,

151
00:11:00,906 --> 00:11:04,466
we provide that session passing through

152
00:11:04,488 --> 00:11:08,626
the context or session could be a null if there

153
00:11:08,728 --> 00:11:11,730
is no validation has been failed.

154
00:11:12,550 --> 00:11:17,030
Where to go that context write to our resolvers where we can

155
00:11:17,180 --> 00:11:20,406
reuse our session and asking data from the

156
00:11:20,428 --> 00:11:23,080
sessions like email, id, whatever it is.

157
00:11:25,610 --> 00:11:28,886
So let's back a little bit to

158
00:11:28,908 --> 00:11:32,374
the database layer and let's

159
00:11:32,422 --> 00:11:35,946
just take a look how we communicate with database. So we

160
00:11:35,968 --> 00:11:40,638
have for sure some of models, in my case the

161
00:11:40,804 --> 00:11:44,350
models of words stacks,

162
00:11:44,850 --> 00:11:48,862
collections related to

163
00:11:48,916 --> 00:11:52,426
an end of cost user. So just a couple of models

164
00:11:52,458 --> 00:11:55,390
over here that for example words fema,

165
00:11:56,390 --> 00:11:59,826
which have a unique id

166
00:12:00,008 --> 00:12:03,730
creation date for sure, and translation,

167
00:12:05,370 --> 00:12:09,314
which has to be from tools like language

168
00:12:09,442 --> 00:12:12,998
is a cult of the language and value of

169
00:12:13,164 --> 00:12:17,010
the word itself. As I said that a multilanguages

170
00:12:17,170 --> 00:12:21,660
that means it could be different languages and

171
00:12:23,630 --> 00:12:27,866
words has to belong to the specific stack where we're training

172
00:12:27,968 --> 00:12:31,674
our words, which has been created by the user and for

173
00:12:31,712 --> 00:12:35,262
sure author who was creating that stack and that

174
00:12:35,316 --> 00:12:38,634
word. So how looks like the stack schema,

175
00:12:38,682 --> 00:12:42,778
it's build of course title, possibly subtitle,

176
00:12:42,954 --> 00:12:46,786
date creation and stack can consist some

177
00:12:46,888 --> 00:12:52,482
bunch of words. And of course that

178
00:12:52,536 --> 00:12:56,066
model belongs to the outro, that user

179
00:12:56,098 --> 00:13:01,218
who created that stack. So resolvers,

180
00:13:01,394 --> 00:13:05,202
as I say, those models comes right to the resolvers

181
00:13:05,266 --> 00:13:08,882
where we can reuse those

182
00:13:08,956 --> 00:13:12,010
models and communicate with database.

183
00:13:14,590 --> 00:13:18,220
In this case, for example, we are taking the model

184
00:13:18,670 --> 00:13:22,286
of words, trying to find by specific parameters, the specific

185
00:13:22,388 --> 00:13:26,046
word, specific words,

186
00:13:26,228 --> 00:13:29,614
count them, trying to find

187
00:13:29,652 --> 00:13:33,006
the real items, sorting them and passing

188
00:13:33,038 --> 00:13:36,962
to the specific function. And just to

189
00:13:37,016 --> 00:13:41,300
let you know that resolvers always returning some information,

190
00:13:41,750 --> 00:13:46,274
always the queries and mutation according

191
00:13:46,322 --> 00:13:50,246
schema what you describe it in

192
00:13:50,268 --> 00:13:54,854
your graphql schema. So cursor output will

193
00:13:54,972 --> 00:13:58,518
bring the object

194
00:13:58,684 --> 00:14:02,114
structured exactly how it's described in graphQl

195
00:14:02,162 --> 00:14:05,918
schema. This is the pagination part cursor

196
00:14:05,954 --> 00:14:09,722
output. So this is what we're expecting in the end

197
00:14:09,776 --> 00:14:14,154
from that get words by stack id notation

198
00:14:14,202 --> 00:14:18,062
is the same thing we are asking just

199
00:14:18,116 --> 00:14:21,914
a context, where are we expecting

200
00:14:21,962 --> 00:14:25,026
to get model? Because remember we're passing to

201
00:14:25,048 --> 00:14:28,402
the context all of our models. If we just back here, you can see

202
00:14:28,456 --> 00:14:32,066
models always returning from

203
00:14:32,088 --> 00:14:35,570
the context. So that's why we get that model over here.

204
00:14:35,640 --> 00:14:41,110
And access to the session user

205
00:14:41,450 --> 00:14:44,886
has been find for example here from the session id because we can find that

206
00:14:44,908 --> 00:14:51,026
user by session id if it exists there and user makes

207
00:14:51,068 --> 00:14:55,270
some update because it's mutation. Mutations is something what we updating,

208
00:14:55,430 --> 00:14:59,046
what we posting

209
00:14:59,078 --> 00:15:02,362
to our database queries actually

210
00:15:02,416 --> 00:15:06,206
what we're getting from our database. And for sure in the end of

211
00:15:06,228 --> 00:15:09,946
the process of mutation we are returning some get statistic

212
00:15:09,978 --> 00:15:13,502
stuff over here. You can see that we using

213
00:15:13,556 --> 00:15:17,074
get statistic really literally right

214
00:15:17,112 --> 00:15:20,814
from the query. Because if we go to the get statistic,

215
00:15:20,862 --> 00:15:24,242
we're going to see that a bunch of additional queries where we

216
00:15:24,296 --> 00:15:28,086
in the end from the promise returning some

217
00:15:28,268 --> 00:15:32,434
structured data. Exactly for GraphQl

218
00:15:32,482 --> 00:15:35,574
schema. How looks

219
00:15:35,612 --> 00:15:39,462
like the GraphQL schema. I think for most of you it's pretty

220
00:15:39,516 --> 00:15:42,818
familiar. It's just types

221
00:15:42,994 --> 00:15:46,602
where we describe our queries mutations. As I said before,

222
00:15:46,736 --> 00:15:50,554
subscriptions could be possible as well. And types

223
00:15:50,602 --> 00:15:54,942
of what we're expecting from

224
00:15:54,996 --> 00:15:58,506
our queries or mutations. Let's say like we have a gas stacks,

225
00:15:58,538 --> 00:16:02,494
we're protecting stacks type

226
00:16:02,692 --> 00:16:06,842
or let's say when we are update user

227
00:16:06,906 --> 00:16:10,542
on a mutation, we're expecting to receive

228
00:16:10,606 --> 00:16:14,900
user updated user with updated information

229
00:16:17,530 --> 00:16:21,714
and type user describe all of the fields what we are need the explanation

230
00:16:21,762 --> 00:16:25,782
mark here the administratory fields we should receive always that

231
00:16:25,836 --> 00:16:28,760
type from that field.

232
00:16:29,290 --> 00:16:32,370
So execute schema with resolvers.

233
00:16:32,530 --> 00:16:36,650
Actually that what I told before that makes us possible just

234
00:16:36,720 --> 00:16:40,542
to communicate with GraphQl from the client side

235
00:16:40,676 --> 00:16:44,160
and to use queries mutation on the client side.

236
00:16:45,650 --> 00:16:49,470
And we are using this graphql schema

237
00:16:50,290 --> 00:16:53,778
mutations or queries and we're using on

238
00:16:53,784 --> 00:16:57,730
the client side. So time I think to go to the client

239
00:16:58,310 --> 00:17:03,006
and as I said before locally

240
00:17:03,118 --> 00:17:07,370
for now we just using to use that local host the API Vivan

241
00:17:07,390 --> 00:17:10,854
Graphql what I told before when the

242
00:17:10,972 --> 00:17:15,094
initial entry point to the server where

243
00:17:15,132 --> 00:17:18,966
we started our Apollo server, we put the path API

244
00:17:18,998 --> 00:17:23,946
v one graphql. So v

245
00:17:23,968 --> 00:17:27,466
one GraphQL could be not from under local host. It could be

246
00:17:27,488 --> 00:17:31,166
a different Amazon web services. Through the router you can provide everything you

247
00:17:31,188 --> 00:17:34,606
want especially with a specific authorization part and security

248
00:17:34,788 --> 00:17:39,230
layer. So now we're just talking

249
00:17:39,300 --> 00:17:43,360
about locally connection and

250
00:17:44,530 --> 00:17:48,414
let's take on the react client now as

251
00:17:48,452 --> 00:17:51,650
I say technology a server provide to us through the local

252
00:17:51,720 --> 00:17:56,206
host through the road app v one GraphQl

253
00:17:56,398 --> 00:18:00,882
the possible of the connection to

254
00:18:00,936 --> 00:18:05,250
the data through the GraphQL react client

255
00:18:05,410 --> 00:18:09,538
making those requests to the GS server and exposing

256
00:18:09,634 --> 00:18:13,194
to the browser locally it's a local host 3000 but

257
00:18:13,232 --> 00:18:17,482
you're going to build your files and going to use

258
00:18:17,536 --> 00:18:21,994
your build files on other services through

259
00:18:22,032 --> 00:18:25,838
engines part in my case, as I

260
00:18:25,924 --> 00:18:29,242
told before, it's Amazon instance.

261
00:18:29,386 --> 00:18:33,890
So let's dive into the react client

262
00:18:35,110 --> 00:18:40,254
for sure it's bear

263
00:18:40,302 --> 00:18:43,314
schema where what

264
00:18:43,352 --> 00:18:46,978
I'm using the application mostly if I'm

265
00:18:46,994 --> 00:18:49,000
creating another application,

266
00:18:50,330 --> 00:18:53,538
another service on the client side mostly I'm

267
00:18:53,554 --> 00:18:59,270
using the same structure application applies

268
00:18:59,350 --> 00:19:02,010
the Apollo provider which is Apollo client.

269
00:19:04,190 --> 00:19:08,422
What we passing to the Apollo provider queries,

270
00:19:08,486 --> 00:19:12,410
mutations and fragments fragments spread using

271
00:19:12,480 --> 00:19:15,786
by mutations and queries and Apollo

272
00:19:15,978 --> 00:19:19,866
using the Apollo client and the providers

273
00:19:19,978 --> 00:19:23,602
comes right to the application also state

274
00:19:23,656 --> 00:19:26,814
management which can be created by redux

275
00:19:26,862 --> 00:19:30,354
or whatever you want. But I using context with read

276
00:19:30,392 --> 00:19:33,954
user with actions dispatchers and I have

277
00:19:33,992 --> 00:19:38,134
an initial store just

278
00:19:38,172 --> 00:19:42,006
to have everything in box. But of

279
00:19:42,028 --> 00:19:46,194
course you can say that we can reuse power of Apollo

280
00:19:46,242 --> 00:19:50,326
client because there could be some kind

281
00:19:50,348 --> 00:19:54,262
of Apollo state or we can reuse some other approaches

282
00:19:54,406 --> 00:19:57,846
to have global state management.

283
00:19:57,958 --> 00:20:01,366
In my case I'm usually trying to split

284
00:20:01,398 --> 00:20:05,262
it up between in the entities like

285
00:20:05,396 --> 00:20:09,674
context with the state management, Apollo with queries,

286
00:20:09,722 --> 00:20:12,830
mutations, style it components.

287
00:20:18,150 --> 00:20:21,822
It's just a feature for the styling

288
00:20:21,886 --> 00:20:25,700
of your components and views and other things.

289
00:20:26,390 --> 00:20:30,500
For example global styling of course

290
00:20:31,210 --> 00:20:33,510
components itself and views.

291
00:20:34,250 --> 00:20:37,366
Okay, so everything, all of

292
00:20:37,388 --> 00:20:41,066
these parts, all of application in

293
00:20:41,088 --> 00:20:43,500
the end goes right to the DoM system.

294
00:20:45,630 --> 00:20:50,454
Okay, so how looks like the providers

295
00:20:50,502 --> 00:20:55,742
itself. So I'm struck the application first

296
00:20:55,796 --> 00:20:59,854
I provide the Apollo provider to the

297
00:20:59,892 --> 00:21:03,154
Apollo client how it looks like Apollo client. I will show you

298
00:21:03,192 --> 00:21:07,090
later. But then I just go into the context provider

299
00:21:09,030 --> 00:21:13,006
which is a state manager and then theme

300
00:21:13,038 --> 00:21:16,918
provider if we have something like a dark theme or

301
00:21:17,084 --> 00:21:20,566
day theme, whatever it is and global styles for

302
00:21:20,588 --> 00:21:24,146
sure. So some generic styles team provider

303
00:21:24,258 --> 00:21:27,630
global styles comes from the styled component

304
00:21:27,810 --> 00:21:31,654
context provider. We are using the powerful

305
00:21:31,702 --> 00:21:35,142
of react itself and Apollo provider

306
00:21:35,286 --> 00:21:37,450
comes from the Apollo client.

307
00:21:38,350 --> 00:21:41,934
Well Apollo client is

308
00:21:41,972 --> 00:21:46,014
that how we are connecting to

309
00:21:46,132 --> 00:21:49,386
our server through the creating HTTP

310
00:21:49,418 --> 00:21:53,466
link we just put there that exactly that

311
00:21:53,508 --> 00:21:57,438
path. What I told before on the server side that we open that API

312
00:21:57,534 --> 00:22:01,298
graphql. That's how we are connecting to the

313
00:22:01,464 --> 00:22:05,446
HTTP link for sure you have to have a proxy for

314
00:22:05,468 --> 00:22:13,446
that with the specific for

315
00:22:13,468 --> 00:22:16,440
the local host and for the production one.

316
00:22:18,030 --> 00:22:21,846
So Apollo, before creating the Apollo

317
00:22:21,958 --> 00:22:26,090
client you have to bind different

318
00:22:26,160 --> 00:22:29,482
links. The first link you can see HTTP link

319
00:22:29,536 --> 00:22:32,922
which is collections one year link which is handling

320
00:22:32,986 --> 00:22:36,640
the errors and exposing some specific error from

321
00:22:37,250 --> 00:22:41,498
graphql years or some other errors forwarding

322
00:22:41,514 --> 00:22:47,234
the apparition itself. Then we are creating outlink which is using

323
00:22:47,432 --> 00:22:51,250
headers in order to provide a token to the headers

324
00:22:52,070 --> 00:22:55,960
which is authorization and

325
00:22:56,970 --> 00:23:00,520
cache. In the end we are caching our

326
00:23:00,890 --> 00:23:04,338
pagination part. In my case I just using the fields

327
00:23:04,514 --> 00:23:07,160
get stacks or get our words.

328
00:23:07,850 --> 00:23:11,402
When you're scrolling you can fetch more data

329
00:23:11,536 --> 00:23:15,898
like list of the data. In my case it was in translation application

330
00:23:15,984 --> 00:23:20,098
it was list of words and you can scroll and you can get the pagination

331
00:23:20,294 --> 00:23:24,122
that relay style pagination provides

332
00:23:24,186 --> 00:23:28,446
right from Apollo client and once again

333
00:23:28,548 --> 00:23:32,000
all of tools what I describe it here,

334
00:23:32,630 --> 00:23:36,446
it's like no more, no less. Exactly that amount of tools

335
00:23:36,558 --> 00:23:39,906
that functions, that features. I'm using exactly in

336
00:23:39,928 --> 00:23:41,330
scope of that tools.

337
00:23:43,190 --> 00:23:46,190
And in the end Apollo client with all of the links,

338
00:23:46,270 --> 00:23:49,526
yarrow Link, alt HTTP link and cache itself.

339
00:23:49,628 --> 00:23:52,790
That's how we are creating Apollo client and we providing

340
00:23:53,850 --> 00:23:57,538
before showing you right to the Apollo provider

341
00:23:57,554 --> 00:24:01,814
in Apollo client over here. Well context

342
00:24:01,862 --> 00:24:05,734
provider as I said before the context manager

343
00:24:05,862 --> 00:24:11,918
here also there is no any specific good

344
00:24:12,004 --> 00:24:16,046
approach like good practice or something. This is just a

345
00:24:16,228 --> 00:24:20,880
bare minimum to have your

346
00:24:21,410 --> 00:24:25,266
project up. And here for example

347
00:24:25,448 --> 00:24:29,086
this is the state management where we are creating

348
00:24:29,118 --> 00:24:32,514
the context provider. I just getting the child provide to the child that

349
00:24:32,552 --> 00:24:36,246
provider with the store and dispatch for

350
00:24:36,268 --> 00:24:41,510
the actions and creating the reducer

351
00:24:41,930 --> 00:24:46,022
with the initial state for sure. And across my application

352
00:24:46,156 --> 00:24:49,862
I have access to global state management.

353
00:24:49,926 --> 00:24:53,450
Whatever I have to save there. I have the next dog

354
00:24:53,520 --> 00:24:57,546
there to

355
00:24:57,568 --> 00:25:01,914
have a scalability and to not have everything in disorder.

356
00:25:02,042 --> 00:25:05,834
Nice to struct all of your components views

357
00:25:05,962 --> 00:25:09,230
in the same structure. Like to have a rule.

358
00:25:10,370 --> 00:25:13,794
I want to show my own personal rule how

359
00:25:13,832 --> 00:25:19,410
to struct independent components,

360
00:25:20,550 --> 00:25:24,466
atomic components which you can use across the all application on the

361
00:25:24,488 --> 00:25:27,998
react applications. For example let's say we have button.

362
00:25:28,184 --> 00:25:31,686
So always the folder button from the

363
00:25:31,708 --> 00:25:35,714
capital letter consists index js file

364
00:25:35,762 --> 00:25:40,042
with the implementation itself in the code button

365
00:25:40,176 --> 00:25:43,466
test where we are having our unit test for the

366
00:25:43,488 --> 00:25:46,890
button and styles which is styled component

367
00:25:49,890 --> 00:25:54,074
and you can see that views and components

368
00:25:54,202 --> 00:25:58,510
they are different, like they're different folders. In the source folder

369
00:25:59,010 --> 00:26:03,442
where we have the full of list of our components with

370
00:26:03,576 --> 00:26:07,150
all the time, the same structure index,

371
00:26:07,310 --> 00:26:11,342
the component name itself, test stylus,

372
00:26:11,486 --> 00:26:15,518
all of them have the same structure

373
00:26:15,694 --> 00:26:18,918
and the views the same, literally views the

374
00:26:18,924 --> 00:26:21,990
same component, but logically views it's

375
00:26:22,330 --> 00:26:28,586
related what we are showing in the router how

376
00:26:28,608 --> 00:26:33,194
it looks like inside the component. In implementation it's just like

377
00:26:33,232 --> 00:26:39,702
an input with styled

378
00:26:39,766 --> 00:26:44,410
containers, stylet elements

379
00:26:45,550 --> 00:26:48,506
with passing props and we are reacting on that props.

380
00:26:48,618 --> 00:26:52,254
So there is no any

381
00:26:52,292 --> 00:26:55,778
tricks. We're just using the component and style of

382
00:26:55,784 --> 00:27:00,306
that component and for sure in

383
00:27:00,328 --> 00:27:02,820
the same folder has to be a unit test.

384
00:27:04,230 --> 00:27:07,854
Okay, let's back to the graphql to the Apollo client site

385
00:27:07,912 --> 00:27:10,934
and we can see that user fragment here.

386
00:27:11,052 --> 00:27:16,178
It's just the same list of fields

387
00:27:16,274 --> 00:27:21,286
what we have seen in the graphql

388
00:27:21,318 --> 00:27:24,662
schema. So here the necessary

389
00:27:24,726 --> 00:27:28,234
fields to us on the client side which we can be used

390
00:27:28,272 --> 00:27:31,546
as a fragment across all of our mutations

391
00:27:31,738 --> 00:27:34,986
and queries in Apollo

392
00:27:35,018 --> 00:27:38,894
client. And for example, as you know, Apollo client has

393
00:27:38,932 --> 00:27:42,640
the specific hook for the query use query. We have to provide that

394
00:27:43,170 --> 00:27:46,526
query. For example over here it's a get session where we're

395
00:27:46,558 --> 00:27:50,254
using our fragment, that fragment has been created

396
00:27:50,302 --> 00:27:54,420
over here we're just reusing over here that fragment and that's how we

397
00:27:54,890 --> 00:27:58,882
can reuse that fragment across the other requests,

398
00:27:58,946 --> 00:28:02,902
other queries or when we don't need

399
00:28:02,956 --> 00:28:06,760
at all any fragments, we just can use

400
00:28:08,330 --> 00:28:12,442
the plain fields. In this case we have a

401
00:28:12,576 --> 00:28:15,882
mutation for sign up user and

402
00:28:15,936 --> 00:28:19,450
we are expecting just to return the token which we're going to use lately for

403
00:28:19,600 --> 00:28:23,120
the header and uid of course.

404
00:28:23,650 --> 00:28:27,598
Well also about the

405
00:28:27,684 --> 00:28:31,210
fragments, you can fragments

406
00:28:31,290 --> 00:28:34,734
creating exactly from the type. So we have type user,

407
00:28:34,782 --> 00:28:38,274
we can create the fragment of that type,

408
00:28:38,472 --> 00:28:40,900
we have type of word,

409
00:28:41,590 --> 00:28:45,746
we can create the fragment of the word and reuse from the sum fields.

410
00:28:45,858 --> 00:28:50,054
So in

411
00:28:50,092 --> 00:28:53,320
general, what to take to the application?

412
00:28:55,130 --> 00:28:59,814
This is actually a very controversial

413
00:28:59,862 --> 00:29:04,650
question on the beginning when you want to bring up very fast your startup,

414
00:29:05,310 --> 00:29:09,222
which tools to use. I suggest

415
00:29:09,286 --> 00:29:13,914
in this case in terms of JavaScript, who are using JavaScript

416
00:29:14,042 --> 00:29:17,262
to use the tools, which is really

417
00:29:17,316 --> 00:29:21,722
familiar and very famous

418
00:29:21,786 --> 00:29:25,374
and successful tools for now like graphQL style components

419
00:29:25,422 --> 00:29:28,786
are using everybody Amazon web services for

420
00:29:28,808 --> 00:29:34,718
sure now is a really big benefit to serving your data services

421
00:29:34,904 --> 00:29:38,806
databases, database, for example MongoDB because it's just

422
00:29:38,988 --> 00:29:43,014
very easy and very fast to

423
00:29:43,052 --> 00:29:45,320
build up your application over there.

424
00:29:46,570 --> 00:29:49,394
Also, as I told before,

425
00:29:49,532 --> 00:29:52,634
very important to keep good structure in your

426
00:29:52,672 --> 00:29:56,906
applications, in the folders of

427
00:29:56,928 --> 00:30:00,314
your components views or in

428
00:30:00,352 --> 00:30:04,954
your resolvers on the server side to

429
00:30:04,992 --> 00:30:09,258
split up like between this is mutations, this is resolvers

430
00:30:09,434 --> 00:30:12,914
and where's utilities and so on. So to keep

431
00:30:12,952 --> 00:30:16,786
everything in order and as I

432
00:30:16,808 --> 00:30:20,034
say, what to take and where

433
00:30:20,072 --> 00:30:23,714
to start and how to keep it in order, that's the

434
00:30:23,752 --> 00:30:27,926
approach like to have good folder structure in your

435
00:30:28,028 --> 00:30:31,640
applications. And in the end

436
00:30:33,290 --> 00:30:37,206
this is the full of the tools what

437
00:30:37,228 --> 00:30:40,598
I'm using for

438
00:30:40,684 --> 00:30:45,862
the service, it's a jot docking Graphql

439
00:30:45,926 --> 00:30:49,242
Apollo server which works

440
00:30:49,296 --> 00:30:52,906
to us for the communication with GraphQL client which is communication

441
00:30:52,938 --> 00:30:54,990
with the graphQL through the server.

442
00:30:58,290 --> 00:31:04,226
All of these tools actually this

443
00:31:04,248 --> 00:31:08,180
is enough to create the

444
00:31:08,710 --> 00:31:12,382
application till the end workable

445
00:31:12,446 --> 00:31:16,786
solution. On the production side it

446
00:31:16,808 --> 00:31:20,166
doesn't matter what you're going to choose. For example, you can choose the Amazon Web

447
00:31:20,188 --> 00:31:23,640
services instance or it's going to be another service,

448
00:31:24,490 --> 00:31:27,866
heroku for example, maybe you're going to use the

449
00:31:27,888 --> 00:31:31,866
postgres, but like postgres you have to use some kind

450
00:31:31,888 --> 00:31:36,890
of orem system in order to communicate with postgres.

451
00:31:37,950 --> 00:31:41,278
Almost the same, like more or less the same. It's going to be just another

452
00:31:41,364 --> 00:31:45,374
database. Couple of tools what I'm using

453
00:31:45,412 --> 00:31:49,630
here for example, why I'm using core because it's

454
00:31:50,530 --> 00:31:55,070
my opinion just a bit easier and much faster than exprs

455
00:31:56,470 --> 00:31:59,714
and consequences of middleware stays are really

456
00:31:59,752 --> 00:32:04,180
straightforward for me hosting it's just up to you.

457
00:32:05,370 --> 00:32:09,266
Not mailer for example I'm using for the handling

458
00:32:09,458 --> 00:32:12,614
emails to send some emails from my

459
00:32:12,652 --> 00:32:16,120
server, for example forgot password or whatever it is,

460
00:32:16,490 --> 00:32:20,154
just send email for

461
00:32:20,192 --> 00:32:24,300
sure. In the future you can increase and reuse some of

462
00:32:24,830 --> 00:32:28,810
services for the emails. It's just a

463
00:32:28,960 --> 00:32:33,310
bare beginning of the application for the startup

464
00:32:33,810 --> 00:32:37,600
PM two for example, that's just a tool when you have

465
00:32:39,090 --> 00:32:43,310
keep running your server instance

466
00:32:44,290 --> 00:32:47,460
on a production without stop.

467
00:32:47,990 --> 00:32:51,646
So circle CI for deployment process jest for unit

468
00:32:51,678 --> 00:32:55,286
tests for sure. Passively together with jest you need to

469
00:32:55,308 --> 00:32:59,746
have additional tools for the react for example testing

470
00:32:59,778 --> 00:33:02,310
library or enzyme.

471
00:33:03,370 --> 00:33:07,394
So that's up to you. But mostly it's everything it's unit tested,

472
00:33:07,442 --> 00:33:11,094
just tests very important

473
00:33:11,292 --> 00:33:13,080
in the beginning as well.

474
00:33:13,930 --> 00:33:17,990
So for the validation of fields,

475
00:33:19,290 --> 00:33:23,150
yes. And, and the price is actually

476
00:33:23,220 --> 00:33:27,920
for the starting around 65

477
00:33:28,770 --> 00:33:35,826
$70 per month I

478
00:33:35,848 --> 00:33:40,334
think for the beginning of the application. When you create some workable solution

479
00:33:40,462 --> 00:33:44,782
it's not a big deal, but it's more or less that price

480
00:33:44,936 --> 00:33:48,614
for the month. So I would like to say thank

481
00:33:48,652 --> 00:33:52,454
you so much for the listening. I hope that

482
00:33:52,492 --> 00:33:56,520
information will help and inspire you to bring

483
00:33:57,370 --> 00:34:00,934
your ideas alive. I could say that

484
00:34:01,052 --> 00:34:05,000
my solution for the service and

485
00:34:05,530 --> 00:34:08,774
client side took around three months.

486
00:34:08,972 --> 00:34:11,040
So thank you so much.

487
00:34:12,530 --> 00:34:15,210
Have you seen that? In another session.

