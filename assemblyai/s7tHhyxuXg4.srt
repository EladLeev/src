1
00:00:20,170 --> 00:00:23,726
Hello everyone. Yeah, so it's my turn to

2
00:00:23,748 --> 00:00:27,254
talk about this topic. It's actually around the

3
00:00:27,292 --> 00:00:31,142
data security because you can see this title here,

4
00:00:31,276 --> 00:00:35,414
all the key phrases, the dynamic data masking or

5
00:00:35,452 --> 00:00:38,842
data encryption that's all around these data

6
00:00:38,896 --> 00:00:42,330
security, especially for your database.

7
00:00:43,550 --> 00:00:46,934
Yeah. So I'm Trista pan the Sophia.

8
00:00:46,982 --> 00:00:49,478
Yes. Cofounder CTO the CTO.

9
00:00:49,654 --> 00:00:53,390
Today we will actually talk about the data security,

10
00:00:53,540 --> 00:00:56,830
all of the good technologies to help us to

11
00:00:56,900 --> 00:01:00,394
deal with the data security. So today's

12
00:01:00,442 --> 00:01:04,820
content speak of the data's content. We will

13
00:01:05,430 --> 00:01:09,054
go through the following items.

14
00:01:09,102 --> 00:01:12,334
These first one I will give a little introduction

15
00:01:12,382 --> 00:01:15,730
about the data lifecycle management.

16
00:01:15,890 --> 00:01:19,586
And these, it's like the background why we'll

17
00:01:19,618 --> 00:01:24,134
consider about the data security. And there

18
00:01:24,172 --> 00:01:28,422
are many what's the popular technologies

19
00:01:28,486 --> 00:01:31,578
to help us to deal with the data security?

20
00:01:31,744 --> 00:01:35,830
And then we will delve into such good technologies

21
00:01:35,910 --> 00:01:39,082
and use them to make

22
00:01:39,136 --> 00:01:42,654
our solutions to do such these

23
00:01:42,692 --> 00:01:46,606
stuff. And if we have time, I will

24
00:01:46,788 --> 00:01:50,158
introduce the hands on practice or the demo

25
00:01:50,244 --> 00:01:55,730
show from the hands

26
00:01:55,800 --> 00:01:59,662
on the side hub practice

27
00:01:59,726 --> 00:02:02,814
to learn more about today's solution.

28
00:02:02,942 --> 00:02:06,850
But if we have no enough time, you can just refer to this slice

29
00:02:06,930 --> 00:02:10,402
and to do it by yourself. I will give more introduction

30
00:02:10,466 --> 00:02:14,642
about these technologies, about the solutions,

31
00:02:14,706 --> 00:02:18,474
about the architectures and how to use the open source project to

32
00:02:18,512 --> 00:02:20,060
help us do such stuff.

33
00:02:21,950 --> 00:02:25,526
Yeah, so that's something about myself. I'm the Sophia

34
00:02:25,558 --> 00:02:29,402
yet co founder and CTO and because I

35
00:02:29,456 --> 00:02:32,910
really love the open source and the coding part.

36
00:02:32,980 --> 00:02:36,426
So I spend a lot of time in Apache

37
00:02:36,458 --> 00:02:39,690
software foundation to give some tips

38
00:02:39,770 --> 00:02:43,262
to other open source incubator

39
00:02:43,326 --> 00:02:46,594
protected to help these to run these open

40
00:02:46,632 --> 00:02:50,626
source project especially around the database because

41
00:02:50,808 --> 00:02:54,654
my professional area it's about the distributed database

42
00:02:54,702 --> 00:02:58,082
system and cloud. So if you're

43
00:02:58,146 --> 00:03:01,286
interested in today's topic or later on topic of

44
00:03:01,308 --> 00:03:04,902
futures, for example the open source post or

45
00:03:04,956 --> 00:03:08,854
the open source business post or the database posts,

46
00:03:08,902 --> 00:03:12,394
you can just give a look at my linking and GitHub or

47
00:03:12,432 --> 00:03:16,282
Twitter. Yeah. So let's get started with the first part,

48
00:03:16,336 --> 00:03:19,738
the data security. It's a

49
00:03:19,744 --> 00:03:23,102
big topic these days because when you Google and you

50
00:03:23,156 --> 00:03:26,382
found in this world there are many

51
00:03:26,436 --> 00:03:30,270
places that are happening such events or the bad news

52
00:03:30,340 --> 00:03:34,554
that our company or other companies suffered

53
00:03:34,602 --> 00:03:39,666
some data breaches or we need to do

54
00:03:39,848 --> 00:03:43,214
the law or policy compliance

55
00:03:43,342 --> 00:03:46,566
or we need to protect our data, all these stuff.

56
00:03:46,748 --> 00:03:50,566
So no matter which issues

57
00:03:50,668 --> 00:03:54,054
you want to solve, you will consider about data security.

58
00:03:54,252 --> 00:03:59,206
These last part we will consider that what's

59
00:03:59,238 --> 00:04:03,034
the popular or common technologies can

60
00:04:03,072 --> 00:04:06,570
help us to do the data I mean the

61
00:04:06,640 --> 00:04:10,006
security or data protection. So we

62
00:04:10,048 --> 00:04:14,074
need to first know that the whole lifecycle

63
00:04:14,202 --> 00:04:19,098
of the data management, because your technologies

64
00:04:19,194 --> 00:04:22,560
or good common techniques need to

65
00:04:22,930 --> 00:04:26,786
apply for the different phase of the whole

66
00:04:26,888 --> 00:04:30,338
data life cycle. So when

67
00:04:30,424 --> 00:04:33,762
speak of the data lifecycle management, there are

68
00:04:33,816 --> 00:04:37,478
some important phases here. The first

69
00:04:37,564 --> 00:04:41,542
one we need to generate it or connect data

70
00:04:41,596 --> 00:04:45,078
from the different places or different

71
00:04:45,164 --> 00:04:49,014
data sources. These second one we need to store all the

72
00:04:49,052 --> 00:04:52,602
data, we need to manage them and the last one

73
00:04:52,736 --> 00:04:56,250
we need to share them, share to different department to allow

74
00:04:56,320 --> 00:05:00,198
them to use all of these data to create the value forward

75
00:05:00,304 --> 00:05:04,030
industry. Forward companies. And the last

76
00:05:04,180 --> 00:05:07,950
phase for the management is that we found

77
00:05:08,020 --> 00:05:12,502
that some data is unnecessary for the production

78
00:05:12,586 --> 00:05:16,782
environment. So we need to archive them or delete

79
00:05:16,846 --> 00:05:20,626
them during the whole management or the

80
00:05:20,648 --> 00:05:24,226
whole lifecycle. We found that if

81
00:05:24,328 --> 00:05:28,158
we want to do the data security or protection

82
00:05:28,334 --> 00:05:31,598
stuff, we need to apply

83
00:05:31,704 --> 00:05:35,378
different policies or standards to different phases.

84
00:05:35,554 --> 00:05:38,794
For example, at the first stage when we

85
00:05:38,832 --> 00:05:42,406
want to get generated or collected

86
00:05:42,438 --> 00:05:46,650
data from different places or data sources,

87
00:05:47,150 --> 00:05:50,846
we need to manage our data source, right? We need to

88
00:05:50,868 --> 00:05:54,862
allow the trusted data

89
00:05:54,916 --> 00:05:58,800
source, trusted data come to our system.

90
00:05:59,170 --> 00:06:02,914
And so we have some policies or

91
00:06:02,952 --> 00:06:06,830
strategies or have some specter

92
00:06:06,910 --> 00:06:10,738
or detector tools to help us

93
00:06:10,824 --> 00:06:14,242
manage the data sources or the data.

94
00:06:14,376 --> 00:06:18,082
I mean the generation precise or connection

95
00:06:18,146 --> 00:06:21,350
precise. That's just the policy.

96
00:06:21,500 --> 00:06:26,262
I believe these are many such tools or

97
00:06:26,316 --> 00:06:30,042
business tool or open source tool can help us do that part.

98
00:06:30,176 --> 00:06:34,602
But at least I want you know that if you want to do

99
00:06:34,656 --> 00:06:38,294
the data life management, especially about per death

100
00:06:38,342 --> 00:06:42,126
or data, you need to put some attention to that part.

101
00:06:42,228 --> 00:06:45,998
A second one about these store data or manual data,

102
00:06:46,164 --> 00:06:50,206
the data encryption, it's necessary one and it's the

103
00:06:50,228 --> 00:06:53,778
common one, it's the popular one. When we speak of the data

104
00:06:53,864 --> 00:06:57,954
encryption, you need to consider the precise of the

105
00:06:57,992 --> 00:07:01,762
data because you need to first move your data

106
00:07:01,816 --> 00:07:05,510
or transit your data from one place to another and

107
00:07:05,580 --> 00:07:09,030
manage it. So the data encryption will happen

108
00:07:09,100 --> 00:07:11,720
in traffic and at rest.

109
00:07:12,250 --> 00:07:16,022
So data encryption is the key

110
00:07:16,076 --> 00:07:19,542
technology. So what's the data encryption?

111
00:07:19,606 --> 00:07:24,090
Data encryption actually is just like the name changes.

112
00:07:24,590 --> 00:07:28,026
In order to protect our data, we need to use

113
00:07:28,128 --> 00:07:31,546
the data encryption algorithm or mechanism

114
00:07:31,658 --> 00:07:35,662
and the encryption key to help us to convert our

115
00:07:35,716 --> 00:07:39,534
plain text or data into the cipher text.

116
00:07:39,732 --> 00:07:43,642
So therefore if someone want to visit

117
00:07:43,706 --> 00:07:48,702
data, want to gather plain text, they have to use some encryption

118
00:07:48,766 --> 00:07:52,402
algorithm or encryption key to help them to

119
00:07:52,456 --> 00:07:55,606
know what's the exact data of

120
00:07:55,708 --> 00:07:59,750
such encrypted data. That's a precise called

121
00:07:59,900 --> 00:08:03,142
decryption, right? But if you have

122
00:08:03,196 --> 00:08:06,566
know the correct key or you are not allowed to

123
00:08:06,588 --> 00:08:12,090
gather data. For example when we suffer from the cipher

124
00:08:12,670 --> 00:08:16,842
issues or the attacks. Then even

125
00:08:16,896 --> 00:08:20,682
though you gather data from your database because you have know

126
00:08:20,736 --> 00:08:24,334
the encryption algorithm or encryption key,

127
00:08:24,452 --> 00:08:28,554
then you can just get the cipher tag. So you don't know what's the meaning

128
00:08:28,602 --> 00:08:33,230
of each column or each row. Yeah, so that's the data encryption.

129
00:08:33,650 --> 00:08:37,534
There are some, not the best. And the popular encryption

130
00:08:37,582 --> 00:08:41,470
algorithm for them, the AES or the DS

131
00:08:41,550 --> 00:08:45,586
or the RSA for our users

132
00:08:45,618 --> 00:08:49,394
or for you to want to use such a technologies,

133
00:08:49,442 --> 00:08:53,458
these users, you can just use them because they are so mature

134
00:08:53,634 --> 00:08:56,790
and I mean they're popular.

135
00:08:57,790 --> 00:09:01,402
Yes, but I know that if you can just create your

136
00:09:01,456 --> 00:09:05,098
own encryption algorithm, it's fine, it's okay. It's just a

137
00:09:05,104 --> 00:09:09,098
bit. Your scenarios. These next one, it's about the data

138
00:09:09,184 --> 00:09:11,710
masking. The data masking.

139
00:09:13,410 --> 00:09:17,278
It's one to solve the issue about the data

140
00:09:17,364 --> 00:09:20,974
usage and sharing. Because we need to further share our

141
00:09:21,012 --> 00:09:24,418
data, allow people to visit our data and

142
00:09:24,504 --> 00:09:27,986
allow people to use it. So sometimes,

143
00:09:28,168 --> 00:09:31,778
for example, we need to use some the

144
00:09:31,944 --> 00:09:36,338
production or online data for the analytics

145
00:09:36,434 --> 00:09:40,242
or for the testing or for the training. These we cannot

146
00:09:40,306 --> 00:09:44,326
just allow our privacy data or message

147
00:09:44,428 --> 00:09:47,470
to be used in the testing

148
00:09:47,650 --> 00:09:50,906
environment, right? So therefore we need to

149
00:09:50,928 --> 00:09:54,426
do the data masking, to scrap your data

150
00:09:54,528 --> 00:09:58,150
and to create static

151
00:09:58,230 --> 00:10:01,934
data to allow others to use such these data to

152
00:10:01,972 --> 00:10:05,770
create the value, to do the test, to do the analytics.

153
00:10:05,850 --> 00:10:09,550
All the stuff there is the image here.

154
00:10:09,700 --> 00:10:13,278
It clearly tell us for example

155
00:10:13,364 --> 00:10:18,094
this column SSN maybe before

156
00:10:18,212 --> 00:10:21,714
it, just like here, one, two, three of the

157
00:10:21,832 --> 00:10:25,634
plain text, you can know it's meaning. But later on we

158
00:10:25,672 --> 00:10:29,202
will scrabble the data and to use

159
00:10:29,256 --> 00:10:32,630
some these simplest to replace them to become

160
00:10:32,700 --> 00:10:36,440
another type of the data. But actually they share

161
00:10:37,290 --> 00:10:40,810
the basic structures of the data. Therefore people

162
00:10:40,880 --> 00:10:44,170
can leverage the part

163
00:10:44,240 --> 00:10:47,786
of the image of such type of the data,

164
00:10:47,888 --> 00:10:51,374
right? So that's the data masking. They are

165
00:10:51,412 --> 00:10:54,910
so common when we speak of the data

166
00:10:54,980 --> 00:10:59,486
security. Oh, by the way, about the data

167
00:10:59,588 --> 00:11:03,922
encryption in transit. Actually these also have

168
00:11:03,976 --> 00:11:06,946
some mature technologies for us to consider.

169
00:11:07,048 --> 00:11:10,702
For example the SSL secure

170
00:11:10,766 --> 00:11:14,578
sockets layer. It's practical. I mean for example

171
00:11:14,664 --> 00:11:17,938
most of the data source or databases, they implement

172
00:11:18,034 --> 00:11:21,526
such the layer or such the interface. So you

173
00:11:21,548 --> 00:11:28,140
can just do the configuration to allow

174
00:11:28,830 --> 00:11:32,282
your system or other databases to encrypt your

175
00:11:32,336 --> 00:11:35,850
data in transit, in transition, right?

176
00:11:35,920 --> 00:11:38,780
So therefore if some of the people, I mean,

177
00:11:41,010 --> 00:11:44,314
get our data from the transition, they don't

178
00:11:44,362 --> 00:11:47,440
know because we use the SSL or

179
00:11:48,050 --> 00:11:51,562
TLS, TLS is advanced SSL

180
00:11:51,706 --> 00:11:55,840
to protect our data when transit all of them

181
00:11:57,190 --> 00:12:00,210
and about the archive and destroy.

182
00:12:00,710 --> 00:12:04,482
I mean first we need to consider that such data is

183
00:12:04,536 --> 00:12:08,582
necessary or not. And then we can use this

184
00:12:08,716 --> 00:12:12,806
time to leave to magnet them to allow our system

185
00:12:12,908 --> 00:12:16,290
to automatically to archive or expire

186
00:12:16,370 --> 00:12:19,754
our table rows. Yeah, because we can

187
00:12:19,792 --> 00:12:23,306
not just create data, we need also to delete our data,

188
00:12:23,408 --> 00:12:27,194
right? So that's all the popular technologies to do

189
00:12:27,232 --> 00:12:31,054
the data lifecycle management, especially around these

190
00:12:31,092 --> 00:12:35,520
data security. But today we will just use two

191
00:12:36,850 --> 00:12:40,942
important or popular ways to

192
00:12:40,996 --> 00:12:44,350
finish the data to protect our data. The first

193
00:12:44,420 --> 00:12:47,970
it's these data encryption in transit and at rest.

194
00:12:48,120 --> 00:12:51,378
At rest. And second one we will use the

195
00:12:51,464 --> 00:12:55,170
dynamic data masking. These features function

196
00:12:55,240 --> 00:12:57,320
to help us to protect our data.

197
00:12:58,250 --> 00:13:02,034
But no worry because later on I will introduce

198
00:13:02,082 --> 00:13:05,654
some these open source project, you can just use it to do such

199
00:13:05,692 --> 00:13:09,674
the good features. But here I had

200
00:13:09,712 --> 00:13:13,194
to introduce the

201
00:13:13,232 --> 00:13:16,746
deployment architecture because

202
00:13:16,928 --> 00:13:20,570
even though we want to do the data encryption or data masking,

203
00:13:20,650 --> 00:13:25,002
there are so many tools

204
00:13:25,066 --> 00:13:28,346
or projects can help us to do such features.

205
00:13:28,538 --> 00:13:32,286
These have their own props and cons. So I want

206
00:13:32,308 --> 00:13:35,074
to give some introduction around them.

207
00:13:35,272 --> 00:13:39,602
Therefore, even though today you don't want to use the open

208
00:13:39,656 --> 00:13:43,682
source project, I recommend you can just consider other ways.

209
00:13:43,816 --> 00:13:47,222
But at least you will know the basic props and cons

210
00:13:47,276 --> 00:13:50,374
of each solutions. The first one,

211
00:13:50,492 --> 00:13:54,274
you can just do the data encryption

212
00:13:54,322 --> 00:13:58,074
at the application level. That means you

213
00:13:58,112 --> 00:14:01,180
have the small cases and you don't want to

214
00:14:01,710 --> 00:14:05,690
just do a lot of work around this

215
00:14:05,840 --> 00:14:09,242
data security area. Then you can just let

216
00:14:09,296 --> 00:14:12,880
your programmers or developers based on your current

217
00:14:13,250 --> 00:14:16,542
cases to do some these code changes

218
00:14:16,676 --> 00:14:20,282
or developings. For example just using these AES

219
00:14:20,426 --> 00:14:24,190
or other these encryption algorithm to finish

220
00:14:24,260 --> 00:14:27,918
it. It's so simple, right? That means you add the

221
00:14:28,004 --> 00:14:31,966
application liable to do the data encryption. These second one it's

222
00:14:31,998 --> 00:14:35,474
around the proxy livo to do the encryption

223
00:14:35,522 --> 00:14:39,478
because you know some the data proxy and the

224
00:14:39,564 --> 00:14:43,494
firewall or gateway, they can

225
00:14:43,532 --> 00:14:46,834
help you to do the data, the encryption

226
00:14:46,882 --> 00:14:50,810
or data masking. And today I will introduce such

227
00:14:50,880 --> 00:14:54,666
solution because first it can help you

228
00:14:54,848 --> 00:14:58,186
because you don't do the code changes at your

229
00:14:58,288 --> 00:15:02,058
application level. Especially for a lot of these. You have

230
00:15:02,144 --> 00:15:04,846
thousand for microservice service,

231
00:15:04,948 --> 00:15:09,114
right? You cannot encrypt each of these Microsoft's

232
00:15:09,162 --> 00:15:14,660
one by one. That's a terrible workload. So data

233
00:15:15,430 --> 00:15:19,666
encryption at proxy level can help you do

234
00:15:19,688 --> 00:15:22,260
not do all of the tedious work.

235
00:15:23,350 --> 00:15:27,094
And the last one about the database encryption, because such

236
00:15:27,132 --> 00:15:32,310
the database, they have the basic encryption capabilities.

237
00:15:32,730 --> 00:15:36,882
But that's just up to the database

238
00:15:36,946 --> 00:15:40,314
because you know some database support that some not.

239
00:15:40,432 --> 00:15:44,154
And some databases have a good support, some not.

240
00:15:44,352 --> 00:15:49,580
So you need to do some research about your databases and

241
00:15:50,050 --> 00:15:54,122
some of the database, they can just encrypt

242
00:15:54,186 --> 00:15:57,470
or decrypt your data in a hole.

243
00:15:58,050 --> 00:16:02,302
The whole data needed to be decrypted or

244
00:16:02,356 --> 00:16:06,990
encrypted automatically. So it's not so flexible.

245
00:16:07,330 --> 00:16:10,766
The same case will happen or more serious at

246
00:16:10,788 --> 00:16:14,202
the file or disk liable description.

247
00:16:14,266 --> 00:16:18,194
Because your file or your disk,

248
00:16:18,242 --> 00:16:21,714
they don't know the meaning of each query

249
00:16:21,842 --> 00:16:26,098
or each column, each table or each row.

250
00:16:26,194 --> 00:16:30,220
So they just regard them at

251
00:16:31,070 --> 00:16:34,890
the whole data or the same, right, the same.

252
00:16:34,960 --> 00:16:38,682
So they just decrypt or encrypt the whole

253
00:16:38,736 --> 00:16:42,366
data. Even though you just want, for example, in some

254
00:16:42,388 --> 00:16:46,650
of the cases you just want the user privacy

255
00:16:46,730 --> 00:16:50,602
information are automatically decrypted and encrypted.

256
00:16:50,666 --> 00:16:54,402
You don't want to search the other data or do the same

257
00:16:54,456 --> 00:16:58,194
stuff because you know that

258
00:16:58,232 --> 00:17:01,970
will make the performance become lower,

259
00:17:02,120 --> 00:17:06,200
right? Because you need to do the encryption computing work.

260
00:17:06,570 --> 00:17:09,654
But for some of the database or for

261
00:17:09,692 --> 00:17:14,486
your files, for your disk, they don't know which

262
00:17:14,588 --> 00:17:18,506
data, it's the user data or private data.

263
00:17:18,608 --> 00:17:22,154
They just decrypt all the stuff together

264
00:17:22,352 --> 00:17:26,262
one time, right? So that make the performance

265
00:17:26,326 --> 00:17:30,118
become lower. These need to do more extra work around all the

266
00:17:30,144 --> 00:17:33,360
stuff. Yeah,

267
00:17:35,010 --> 00:17:38,750
a lot of different solution to reach the goal, the data

268
00:17:38,820 --> 00:17:42,590
encryption or to nap data masking. So you can just

269
00:17:42,740 --> 00:17:46,334
pick up one of them. But today I will introduce the

270
00:17:46,372 --> 00:17:49,598
proxy liable encryption because I introduced

271
00:17:49,774 --> 00:17:53,106
first one that there is no code changes.

272
00:17:53,208 --> 00:17:57,430
The second one because some of the proxies they know

273
00:17:57,580 --> 00:18:02,310
they can allow your user to do the customized

274
00:18:02,650 --> 00:18:05,666
encryption strategy or policies.

275
00:18:05,858 --> 00:18:09,050
So you can just partially do the data

276
00:18:09,120 --> 00:18:11,574
encryption for your scenarios,

277
00:18:11,702 --> 00:18:15,674
right. And in order to finish that one, we need

278
00:18:15,712 --> 00:18:19,450
to use this open source project that's these sharding Sophia.

279
00:18:20,370 --> 00:18:24,720
Actually it's the distributed SQL engine

280
00:18:25,810 --> 00:18:29,390
to do the data sharding, data scaling and data

281
00:18:29,460 --> 00:18:33,038
encryption. So data encryption is just

282
00:18:33,124 --> 00:18:36,194
one of the key features of this project.

283
00:18:36,392 --> 00:18:39,794
It also can help you do the data sharding or

284
00:18:39,832 --> 00:18:43,410
these data skilling. But today we will just focus on the data

285
00:18:43,480 --> 00:18:47,302
encryption. This feature how to use this project to help us

286
00:18:47,356 --> 00:18:51,510
automatically do the data encryption and dynamic data masking.

287
00:18:52,170 --> 00:18:55,814
Actually this project has been open source for more

288
00:18:55,852 --> 00:18:59,846
than 60 years. So it has the bigger community you

289
00:18:59,868 --> 00:19:05,002
can see here, or id released for more

290
00:19:05,056 --> 00:19:08,314
than 50 times and have more

291
00:19:08,352 --> 00:19:12,474
than 1500 contributors. And it

292
00:19:12,512 --> 00:19:16,320
has a lot of documents and user cases for you to

293
00:19:16,930 --> 00:19:19,838
learn more. So you don't worry about that.

294
00:19:20,004 --> 00:19:24,014
It's brand new. So you worry about unit inward

295
00:19:24,062 --> 00:19:28,180
production because you can see here, it's really

296
00:19:28,950 --> 00:19:32,610
a mature project. It's an Apache top

297
00:19:32,680 --> 00:19:36,054
level project. Yes. So the

298
00:19:36,092 --> 00:19:39,990
nice part about this project actually

299
00:19:40,060 --> 00:19:43,814
provide two clients for you to choose. The first one,

300
00:19:43,932 --> 00:19:47,782
it's for the Java application because this

301
00:19:47,916 --> 00:19:50,490
sharding Sophia GDBC client,

302
00:19:51,630 --> 00:19:56,470
it's lightweight Java framework.

303
00:19:56,630 --> 00:20:00,298
So you can just use the maven to use the sharding

304
00:20:00,314 --> 00:20:04,142
Sophia GDBC to do the data encryption and data

305
00:20:04,196 --> 00:20:07,854
masking. Another client of

306
00:20:07,892 --> 00:20:11,502
this project is the sharding Sophia proxy. Like I said

307
00:20:11,556 --> 00:20:14,894
before, it's a database proxy. So the

308
00:20:14,932 --> 00:20:18,402
database proxy works or act

309
00:20:18,456 --> 00:20:22,434
as a database server. It will pretend itself as

310
00:20:22,472 --> 00:20:25,602
the PostgreSQL server or MySQL

311
00:20:25,666 --> 00:20:29,574
server. So let your application just use the

312
00:20:29,612 --> 00:20:33,880
traditional approach to

313
00:20:35,130 --> 00:20:39,670
visit sharding Sophia proxy. As if you are postgres

314
00:20:39,750 --> 00:20:43,930
server or MySQL server. Right. And this proxy

315
00:20:44,910 --> 00:20:48,794
can understand the meaning of your acquiring and can

316
00:20:48,832 --> 00:20:52,810
help you automatically do the data encryption and dynamic

317
00:20:52,890 --> 00:20:56,526
data masking. So you can see here,

318
00:20:56,708 --> 00:21:00,414
this proxy actually like I said before,

319
00:21:00,612 --> 00:21:04,530
because it deployed between your application

320
00:21:04,680 --> 00:21:08,482
and your database. And it

321
00:21:08,536 --> 00:21:12,466
can pass your sql. So it can help you do the

322
00:21:12,488 --> 00:21:15,418
data sharding, data encryption, data masking,

323
00:21:15,614 --> 00:21:19,574
rewrite, splitting and distribute transaction. All the

324
00:21:19,612 --> 00:21:23,286
good features when you use a database. But today we

325
00:21:23,308 --> 00:21:26,838
will just use the two important feature of this project.

326
00:21:26,924 --> 00:21:30,886
That is data masking and data encryption. We'll use the sharding

327
00:21:30,918 --> 00:21:35,002
Sophia proxy to do the demo show. But if your application

328
00:21:35,136 --> 00:21:38,486
is developed by Java, you can consider sharding Sophia

329
00:21:38,518 --> 00:21:42,502
GDBC because it's just so lightweight.

330
00:21:42,566 --> 00:21:45,600
You can just use mean. Yes.

331
00:21:46,290 --> 00:21:49,118
So for the proxy part,

332
00:21:49,284 --> 00:21:53,722
this project also provides some helm charts or operators

333
00:21:53,786 --> 00:21:57,874
can help you by one click to deploy the

334
00:21:57,912 --> 00:22:01,234
sharding Sophia proxy. And then it's so

335
00:22:01,272 --> 00:22:04,786
simple, even though your application now it's living in

336
00:22:04,808 --> 00:22:08,520
the Kubernetes cluster. Yeah. So basically

337
00:22:09,210 --> 00:22:12,662
how to use it to do the data encryption and

338
00:22:12,716 --> 00:22:16,390
the data masking. You can just first

339
00:22:16,460 --> 00:22:23,898
deploy. Sorry. You can just first

340
00:22:23,984 --> 00:22:27,994
deploy these sharding Sophia proxy. And each

341
00:22:28,032 --> 00:22:31,722
of your query will first visit sharding Sophia

342
00:22:31,786 --> 00:22:35,694
proxy and it will pass your SQL know

343
00:22:35,732 --> 00:22:39,310
what's your meaning, get your data and to

344
00:22:39,460 --> 00:22:43,250
decrypt or encrypt your data automatically and send

345
00:22:43,320 --> 00:22:46,750
the encrypted data into your database.

346
00:22:46,910 --> 00:22:50,354
So even though some people do

347
00:22:50,392 --> 00:22:53,794
these cipher attacks to your

348
00:22:53,832 --> 00:22:56,598
database, it gets your data.

349
00:22:56,764 --> 00:23:00,194
All the data are already encrypted.

350
00:23:00,322 --> 00:23:04,566
Right. And so here you can see for

351
00:23:04,588 --> 00:23:07,714
example that's your application, it's your postgres.

352
00:23:07,762 --> 00:23:11,426
Well instance. That's these unit. First deploy issuance feed

353
00:23:11,458 --> 00:23:15,430
a proxy and you create a table. The table

354
00:23:15,510 --> 00:23:19,574
will contain all of your user information, has a user

355
00:23:19,622 --> 00:23:23,642
id, user name, user telephone and user address,

356
00:23:23,776 --> 00:23:27,694
right? So here we will

357
00:23:27,732 --> 00:23:31,966
use user telephone to do the data masking. That means

358
00:23:32,148 --> 00:23:35,570
you tell the shirting Sophia proxy. Hey, if you found

359
00:23:35,640 --> 00:23:39,570
that I want to insert a row that into

360
00:23:39,720 --> 00:23:43,506
user these table. Please help me to do

361
00:23:43,528 --> 00:23:46,386
the data masking on user telephone.

362
00:23:46,498 --> 00:23:50,790
Therefore, when you get the data from your database,

363
00:23:51,770 --> 00:23:56,406
from your application interface, you found the

364
00:23:56,588 --> 00:24:00,806
user telephone, it's already data masked,

365
00:24:00,918 --> 00:24:04,902
right? And the same here. We can let the user

366
00:24:04,966 --> 00:24:08,950
address is automatically encrypted

367
00:24:09,110 --> 00:24:12,942
into your database. And when your

368
00:24:12,996 --> 00:24:16,286
application want to get the plain text of

369
00:24:16,308 --> 00:24:19,742
the user address, then the sharding Sophia prospect will

370
00:24:19,796 --> 00:24:23,706
first get the cipher text from your database

371
00:24:23,818 --> 00:24:27,882
and automatically to decrypt that the user

372
00:24:27,946 --> 00:24:31,042
address row and make it become

373
00:24:31,096 --> 00:24:35,106
the plain text and return the plain text to your application.

374
00:24:35,288 --> 00:24:38,562
Therefore for your application everything is

375
00:24:38,616 --> 00:24:42,662
transparent. But you have found your older data

376
00:24:42,716 --> 00:24:46,950
in your database are already encrypted. So in order

377
00:24:47,020 --> 00:24:50,630
to tell Sharding Sophia to do such actions,

378
00:24:50,710 --> 00:24:54,282
because it's a sharding Sophia, right. It's not a

379
00:24:54,336 --> 00:24:58,598
single common or standard postgreSQL databases.

380
00:24:58,774 --> 00:25:02,782
Therefore we need to use another SQL. That means

381
00:25:02,836 --> 00:25:06,154
the distributed SQL, the distributed SQL.

382
00:25:06,202 --> 00:25:09,146
It's the SQL dialect of sharding Sophia.

383
00:25:09,258 --> 00:25:13,290
So you use this SQL language to tell Sharding Sophia

384
00:25:13,370 --> 00:25:16,626
to do the data encryption. To do the data masking, to do

385
00:25:16,648 --> 00:25:20,354
the data sharding. It's very easy for

386
00:25:20,392 --> 00:25:23,540
us to use it because you can see here this case,

387
00:25:24,070 --> 00:25:27,698
it's similar to your standard SQL.

388
00:25:27,874 --> 00:25:31,586
For example, if you want to create a regular,

389
00:25:31,698 --> 00:25:35,686
I mean a normal table, you can run the create a

390
00:25:35,708 --> 00:25:38,938
table, right? But if you want to

391
00:25:39,104 --> 00:25:43,226
tell these postgreSql or Sharding Sophia that please

392
00:25:43,328 --> 00:25:46,518
help me do the data masking or data encryption.

393
00:25:46,614 --> 00:25:50,418
Then you could just create an encrypted table.

394
00:25:50,534 --> 00:25:54,094
Here you can see we want the

395
00:25:54,292 --> 00:25:57,902
user id, I mean use

396
00:25:57,956 --> 00:26:01,534
the AES encryption algorithm to

397
00:26:01,572 --> 00:26:04,610
do the data encryption, right? So it's just

398
00:26:04,680 --> 00:26:08,942
another distributed language to communicate

399
00:26:09,006 --> 00:26:12,782
with Shirley Sophia proxy to help us do such advanced

400
00:26:12,846 --> 00:26:16,578
feature. So here this demo show

401
00:26:16,664 --> 00:26:20,906
will actually teach us how finished

402
00:26:20,958 --> 00:26:24,742
all of the work. I have no time to give the more

403
00:26:24,876 --> 00:26:27,994
introduction, but you can refer to do it by

404
00:26:28,032 --> 00:26:31,594
yourself. You can see here, for example, we can

405
00:26:31,632 --> 00:26:36,118
create the mask rule for this user table

406
00:26:36,294 --> 00:26:39,500
and we can create the.

407
00:26:40,290 --> 00:26:44,266
Sorry. We can create the encrypted

408
00:26:44,298 --> 00:26:48,080
rule for this table. Therefore, when you

409
00:26:49,010 --> 00:26:53,226
get the data through sharding Sophia proxy,

410
00:26:53,338 --> 00:26:57,086
you can have the following information.

411
00:26:57,268 --> 00:27:01,010
Your address is automatically decrypted and

412
00:27:01,080 --> 00:27:04,594
encrypted. But here because you get data from the

413
00:27:04,632 --> 00:27:08,802
proxy, so proxy already decrypt

414
00:27:08,866 --> 00:27:12,246
all the data from your databases. So you

415
00:27:12,268 --> 00:27:15,810
can see all the plain text through your command,

416
00:27:15,890 --> 00:27:20,042
right? And because we use data masking for

417
00:27:20,096 --> 00:27:23,786
user telephone, this column. So from your

418
00:27:23,888 --> 00:27:28,058
application view you will see

419
00:27:28,224 --> 00:27:31,854
all the part of these user telephone is

420
00:27:31,892 --> 00:27:35,342
data masked, right? But if

421
00:27:35,396 --> 00:27:38,890
you visit your postgresql

422
00:27:38,970 --> 00:27:42,862
database, you can see here everything about the

423
00:27:42,916 --> 00:27:46,442
user addresses. It's all the cipher

424
00:27:46,506 --> 00:27:50,298
text here, right? And everything about these URL

425
00:27:50,314 --> 00:27:53,674
telephone. That's all these plain text. It's original

426
00:27:53,722 --> 00:27:57,190
content. There is no data masking in your

427
00:27:57,340 --> 00:28:00,806
postgresql database. So that's the demo show.

428
00:28:00,908 --> 00:28:04,886
All right, that's all about today's talk. I mean

429
00:28:04,908 --> 00:28:08,594
if you have any questions you can just twitter

430
00:28:08,642 --> 00:28:11,400
me or at my linking to talk with me.

431
00:28:12,330 --> 00:28:16,006
I hope it's really helpful for you and see

432
00:28:16,028 --> 00:28:16,580
you next time.

