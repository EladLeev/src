1
00:00:27,810 --> 00:00:31,366
Hello everybody, I am Catalin Tudose. Welcome to my talk.

2
00:00:31,468 --> 00:00:35,266
First, a few things about myself. I am currently acting

3
00:00:35,378 --> 00:00:38,882
as a Java and web technologies expert at Luxo

4
00:00:38,946 --> 00:00:42,498
Mania and I am also an author at Pluralsight

5
00:00:42,594 --> 00:00:46,306
and Manning. I have recently published the Junit

6
00:00:46,338 --> 00:00:49,590
in Action third edition book. This talk is also

7
00:00:49,660 --> 00:00:53,054
related to automated testing in Java. The name

8
00:00:53,092 --> 00:00:57,194
of this talk is developing Java applications with cucumber.

9
00:00:57,322 --> 00:01:00,542
You are going to find out how to use

10
00:01:00,596 --> 00:01:04,142
cucumber, a behavior driven development framework,

11
00:01:04,286 --> 00:01:07,614
in order to make your applications

12
00:01:07,742 --> 00:01:11,666
better respond to the business needs. Otherwise said, you are

13
00:01:11,688 --> 00:01:14,974
going to address the needs of the users and

14
00:01:15,032 --> 00:01:18,198
you are going to do the right thing. First,

15
00:01:18,284 --> 00:01:22,402
probably you are accustomed with working TDD

16
00:01:22,466 --> 00:01:26,306
or test driven development. TDD is a well known

17
00:01:26,338 --> 00:01:30,218
technique. It has been introduced many years ago and

18
00:01:30,304 --> 00:01:34,074
it starts with a simple idea. First you are

19
00:01:34,112 --> 00:01:38,250
writing a test in order to verify some

20
00:01:38,320 --> 00:01:41,706
feature and as the feature is not yet implemented you

21
00:01:41,728 --> 00:01:45,566
are expecting this test to fail. Then you are writing the

22
00:01:45,588 --> 00:01:49,134
code to address that test. You would like to write the

23
00:01:49,172 --> 00:01:53,006
shortest piece of code in order to make that test pass.

24
00:01:53,188 --> 00:01:56,514
So first you write the test, then you write the code. You are

25
00:01:56,552 --> 00:02:00,114
driven by the test and after that you make the

26
00:02:00,152 --> 00:02:03,698
test pass. Eventually you refactor the code

27
00:02:03,784 --> 00:02:07,426
so you improve its internal structure while keeping

28
00:02:07,458 --> 00:02:11,142
its external behavior. And this is a simple

29
00:02:11,276 --> 00:02:15,014
but efficient technique and it has been applied for

30
00:02:15,052 --> 00:02:18,966
many years. However, it comes with some shortcomings.

31
00:02:19,078 --> 00:02:22,118
First, tests are tightly coupled to the implementation,

32
00:02:22,214 --> 00:02:25,434
so you have to understand and know some

33
00:02:25,472 --> 00:02:28,794
details of the implementation in order to

34
00:02:28,832 --> 00:02:32,430
write good tests. Tests are focused on the method or class

35
00:02:32,500 --> 00:02:35,934
that they are testing and you have to have

36
00:02:35,972 --> 00:02:39,742
a good knowledge about what they are doing. We can say that

37
00:02:39,796 --> 00:02:43,362
you are doing the things right, following things test

38
00:02:43,416 --> 00:02:47,170
driven development, you make sure that your code is

39
00:02:47,320 --> 00:02:51,166
working fine, but at the same time the business goals

40
00:02:51,198 --> 00:02:54,690
are neglected. In most cases, you don't follow

41
00:02:54,760 --> 00:02:58,722
the business needs and you don't have a good understanding

42
00:02:58,786 --> 00:03:02,722
of how the application must react to the user's

43
00:03:02,786 --> 00:03:06,294
input and to the user's need. We come to the

44
00:03:06,332 --> 00:03:10,454
next step, behavior driven development, which is a developing

45
00:03:10,502 --> 00:03:13,754
technique that is based on BDD. It is

46
00:03:13,792 --> 00:03:17,814
a methodology of developing it solutions that directly

47
00:03:17,862 --> 00:03:21,642
satisfy business requirements. So you have the business requirements

48
00:03:21,706 --> 00:03:25,422
in mind and you would like to directly satisfy them.

49
00:03:25,556 --> 00:03:28,702
You would like to address what the user needs.

50
00:03:28,836 --> 00:03:32,174
You keep on adding business value to the application

51
00:03:32,292 --> 00:03:35,822
and this is your main focus. Behavior driven development

52
00:03:35,886 --> 00:03:39,982
is a developing technique that also facilitates the communication

53
00:03:40,046 --> 00:03:43,554
between the business analyst and the developer. So you have

54
00:03:43,592 --> 00:03:47,494
a vehicle that will facilitate the communication and the

55
00:03:47,532 --> 00:03:50,822
interaction between these key people inside the project.

56
00:03:50,956 --> 00:03:54,246
And if TDD is making sure that you are

57
00:03:54,268 --> 00:03:57,786
doing the things right, BDD is making sure that

58
00:03:57,808 --> 00:04:01,558
you are doing the right thing, meaning that you directly satisfy

59
00:04:01,654 --> 00:04:05,446
the user's needs. Our vehicle for this demonstration

60
00:04:05,558 --> 00:04:09,722
will be a flight management application. We are

61
00:04:09,776 --> 00:04:13,342
presenting a company that is serving passengers and

62
00:04:13,396 --> 00:04:17,358
is providing flights for these passengers. And this

63
00:04:17,444 --> 00:04:21,486
company is following a few policies in

64
00:04:21,508 --> 00:04:25,470
order to allow passengers to apply for their flights.

65
00:04:25,550 --> 00:04:29,218
We have two types of flights, economy and business.

66
00:04:29,384 --> 00:04:33,486
And we have two types of passengers, regular passengers

67
00:04:33,518 --> 00:04:37,090
and vip passengers. And the company has defined

68
00:04:37,170 --> 00:04:40,742
its own policy for adding and for

69
00:04:40,796 --> 00:04:44,262
removing passengers to the flight. We are going

70
00:04:44,316 --> 00:04:48,246
to present some scenario here about adding the passenger to

71
00:04:48,268 --> 00:04:51,914
a flight. We say here that if the flight is economy, we are going

72
00:04:51,952 --> 00:04:55,686
to approve the request so everyone can join the economy flight.

73
00:04:55,798 --> 00:04:59,882
Otherwise, if it is not an economy flight and

74
00:04:59,936 --> 00:05:03,294
this means it is a business flight, then we have to look at the

75
00:05:03,332 --> 00:05:06,814
fact that the passenger is a vip or not and we

76
00:05:06,852 --> 00:05:10,810
can allow the passenger to join a flight

77
00:05:10,970 --> 00:05:14,146
only if it is a vip. If the flight is business,

78
00:05:14,248 --> 00:05:17,906
otherwise we are going to reject the request. So if

79
00:05:17,928 --> 00:05:21,790
we have a regular passenger, he or she cannot join

80
00:05:21,870 --> 00:05:26,150
the business flight and this is part of our business

81
00:05:26,220 --> 00:05:30,946
logic. Of course, the company is maintaining

82
00:05:30,978 --> 00:05:34,466
some policy for removing a passenger from a flight

83
00:05:34,578 --> 00:05:37,946
and I am going to show how this looks like in

84
00:05:37,968 --> 00:05:41,494
the code. We are starting to introduce

85
00:05:41,542 --> 00:05:45,254
this idea of behavior driven development by showing

86
00:05:45,302 --> 00:05:48,698
how the application looks like and showing how

87
00:05:48,864 --> 00:05:52,862
some junit five tests are running. I will start by

88
00:05:52,996 --> 00:05:56,654
running these junit five tests and introduce cucumber a little

89
00:05:56,692 --> 00:06:00,814
later. Just to understand how you make the step between using

90
00:06:00,932 --> 00:06:04,690
a general framework like Junit five and using a

91
00:06:04,760 --> 00:06:08,434
specialized BDD framework like cucumber, let's have a quick

92
00:06:08,472 --> 00:06:11,250
look together at these classes.

93
00:06:11,750 --> 00:06:15,178
We have this abstract class flight

94
00:06:15,374 --> 00:06:19,750
which is defined by the id and by the list of the passengers.

95
00:06:20,250 --> 00:06:22,950
It is extended by the business flight.

96
00:06:24,090 --> 00:06:27,878
And here we have the policies to BDD

97
00:06:27,964 --> 00:06:30,250
and to remove a passenger.

98
00:06:30,830 --> 00:06:34,202
As we are presenting. We can add a passenger to a business

99
00:06:34,256 --> 00:06:37,862
flight only if the passenger is a vip. Otherwise,

100
00:06:37,926 --> 00:06:41,834
we are going to reject that request and we

101
00:06:41,872 --> 00:06:45,338
cannot remove that passenger from the business flight

102
00:06:45,434 --> 00:06:47,790
once he or she has been added.

103
00:06:49,730 --> 00:06:53,346
For the economy flight, we also have some

104
00:06:53,528 --> 00:06:57,970
policies both for adding passenger and removing passenger.

105
00:06:59,750 --> 00:07:02,580
If you want to add a passenger, okay,

106
00:07:02,950 --> 00:07:06,310
he or she is accepted. If we want to remove

107
00:07:06,730 --> 00:07:09,814
the passenger from the flight, we can

108
00:07:09,852 --> 00:07:12,470
remove it only if he is not a vip.

109
00:07:14,170 --> 00:07:17,702
If he's a vip, we are returning false. Meaning that if

110
00:07:17,756 --> 00:07:21,126
the passenger has been added to an economy flight

111
00:07:21,158 --> 00:07:24,602
and he or she is a vip, we cannot remove him

112
00:07:24,656 --> 00:07:28,554
or her any longer. And the passenger is

113
00:07:28,592 --> 00:07:32,094
defined by the name and

114
00:07:32,132 --> 00:07:35,070
by the facts if he or she is a vip.

115
00:07:36,690 --> 00:07:39,838
Let's have a look at what we are using

116
00:07:39,924 --> 00:07:42,946
in our project here.

117
00:07:43,048 --> 00:07:47,060
We're saying that first we are trying to use only

118
00:07:48,950 --> 00:07:52,386
junit five. Pure junit five. And here I

119
00:07:52,408 --> 00:07:55,846
have added the dependencies for junit five.

120
00:07:55,948 --> 00:07:59,714
Junit Jupyter is one of the components of Junit

121
00:07:59,762 --> 00:08:03,506
five. In fact, it is the API for writing tests.

122
00:08:03,698 --> 00:08:07,538
And this is the test that I

123
00:08:07,564 --> 00:08:11,194
have written here in

124
00:08:11,232 --> 00:08:16,374
order to demonstrate how the policy for adding

125
00:08:16,422 --> 00:08:21,486
and for removing a passenger to a

126
00:08:21,508 --> 00:08:24,720
business flight or to an economy flight works.

127
00:08:25,490 --> 00:08:29,594
And I have already used the facilities of junit

128
00:08:29,642 --> 00:08:33,666
five. And I have written some nested tests in

129
00:08:33,688 --> 00:08:37,220
order to group how they are working together.

130
00:08:38,630 --> 00:08:42,660
You see here that we are having some economy flight and

131
00:08:43,670 --> 00:08:47,782
Mike and James are passengers and

132
00:08:47,836 --> 00:08:51,478
they belong to this nested class. That is

133
00:08:51,564 --> 00:08:55,554
economy flight test. It belongs to a larger

134
00:08:55,602 --> 00:08:58,140
class here. Airport test.

135
00:08:58,750 --> 00:09:02,854
It means here that when we are executing

136
00:09:02,902 --> 00:09:06,570
this airport test, we are going to execute the

137
00:09:06,640 --> 00:09:10,022
nested tests. We see here

138
00:09:10,096 --> 00:09:14,074
that we have airport test, having nested test, economy flight

139
00:09:14,122 --> 00:09:17,630
test and another nested test,

140
00:09:17,780 --> 00:09:19,280
business flight test.

141
00:09:21,010 --> 00:09:25,704
And here I

142
00:09:25,742 --> 00:09:29,668
also have a nested class regular passenger

143
00:09:29,844 --> 00:09:33,530
inside economy flight test.

144
00:09:34,220 --> 00:09:37,960
I can say here that we have two levels of nesting.

145
00:09:38,040 --> 00:09:42,136
Airport test contains economy flight test, while economy

146
00:09:42,168 --> 00:09:45,240
flight test contains regular passenger.

147
00:09:45,400 --> 00:09:50,000
And here vip passenger.

148
00:09:51,460 --> 00:09:56,106
So I

149
00:09:56,128 --> 00:09:59,738
use here the facilities of junit five,

150
00:09:59,824 --> 00:10:03,646
including here the display name annotation that

151
00:10:03,748 --> 00:10:07,434
will make the execution of the test easier

152
00:10:07,482 --> 00:10:11,454
to follow. For each test, we have here

153
00:10:11,572 --> 00:10:15,274
a setup. Economy flight, which is the flight

154
00:10:15,322 --> 00:10:18,514
and the two passengers also

155
00:10:18,712 --> 00:10:22,850
for other tests, have here other

156
00:10:22,920 --> 00:10:23,730
setup.

157
00:10:26,230 --> 00:10:30,040
Let's have a closer look at what the tests are doing

158
00:10:30,810 --> 00:10:34,726
before each we are initializing the

159
00:10:34,748 --> 00:10:38,114
flight and the two passengers. For the regular

160
00:10:38,162 --> 00:10:42,410
passenger, we check everything here

161
00:10:42,560 --> 00:10:46,134
that is working correctly.

162
00:10:46,262 --> 00:10:50,950
The id of the flight, the fact that the passenger has been added,

163
00:10:51,110 --> 00:10:55,386
the size of the passenger set, the fact that Mike

164
00:10:55,498 --> 00:10:59,354
is among the passengers. When we try to remove

165
00:10:59,482 --> 00:11:04,094
Mike, which by the way is

166
00:11:04,132 --> 00:11:07,554
a regular passenger, we succeed here.

167
00:11:07,672 --> 00:11:11,998
And after removing the mic passenger,

168
00:11:12,174 --> 00:11:15,220
the size of the passenger set is zero.

169
00:11:18,410 --> 00:11:22,082
What I use here is assert all method.

170
00:11:22,146 --> 00:11:24,550
Together with this assert equals.

171
00:11:25,690 --> 00:11:29,890
What's the benefit of using this assert

172
00:11:29,970 --> 00:11:33,580
all method that has been introduced by junit five?

173
00:11:34,750 --> 00:11:38,054
If I was writing only assert equals after assert

174
00:11:38,102 --> 00:11:41,962
equals after assert equals, then if some

175
00:11:42,016 --> 00:11:45,310
execution was failing, let's say here at the third,

176
00:11:45,380 --> 00:11:49,386
assert these assertions were not checked

177
00:11:49,418 --> 00:11:52,910
any longer with this approach. If I write here

178
00:11:52,980 --> 00:11:56,242
assert all, then I make sure

179
00:11:56,296 --> 00:11:59,940
that all assertions are verified. Even if

180
00:12:01,190 --> 00:12:04,820
we fail here at assert equals number three,

181
00:12:05,750 --> 00:12:09,190
the next assertions will be executed

182
00:12:09,850 --> 00:12:13,590
and I have here more testing.

183
00:12:15,290 --> 00:12:19,394
What I have made sure is that I used the junit

184
00:12:19,442 --> 00:12:22,460
five facilities, the display name,

185
00:12:22,990 --> 00:12:26,682
and we are going to see together how they look like

186
00:12:26,736 --> 00:12:30,330
and which is the benefit for using them in practice.

187
00:12:31,630 --> 00:12:35,642
And this assert all method that is using multiple

188
00:12:35,706 --> 00:12:36,800
asserts here.

189
00:12:40,120 --> 00:12:43,652
Let's run this test just like any

190
00:12:43,786 --> 00:12:46,470
other usual junit test.

191
00:12:55,740 --> 00:12:59,752
Okay, what's the big

192
00:12:59,806 --> 00:13:03,512
benefit here of using Junit five

193
00:13:03,566 --> 00:13:07,930
and the facility of display name? You see that

194
00:13:09,100 --> 00:13:13,240
it is possible to read these nested tests

195
00:13:13,400 --> 00:13:17,996
just like natural language and

196
00:13:18,178 --> 00:13:22,076
we can read here together. Given there is a premium flight,

197
00:13:22,188 --> 00:13:25,984
when we have a vip passenger, then you can add and

198
00:13:26,022 --> 00:13:28,640
remove him from a premium flight.

199
00:13:29,220 --> 00:13:33,148
Given there is a premium flight, when we have a vip passenger,

200
00:13:33,244 --> 00:13:37,476
then you cannot add him to

201
00:13:37,498 --> 00:13:42,420
a premium flight more than once. And you can keep

202
00:13:42,490 --> 00:13:49,688
on reading here also

203
00:13:49,774 --> 00:13:52,836
here you can read given there is an economy flight,

204
00:13:52,948 --> 00:13:56,504
when we have a vip passenger, then you can add him but

205
00:13:56,542 --> 00:13:59,000
cannot remove him from an economy flight.

206
00:14:00,320 --> 00:14:04,190
This is how BDD looks like

207
00:14:05,040 --> 00:14:08,924
BDD starts with a concept of given

208
00:14:09,042 --> 00:14:13,040
when. Then these are the keywords

209
00:14:13,540 --> 00:14:16,850
that are used in the

210
00:14:19,140 --> 00:14:23,056
BDD approach. Given something,

211
00:14:23,238 --> 00:14:26,176
we have a starting condition.

212
00:14:26,288 --> 00:14:30,084
When we do some action then we

213
00:14:30,122 --> 00:14:32,660
are expecting some results.

214
00:14:34,840 --> 00:14:38,344
And here you may have a

215
00:14:38,382 --> 00:14:43,770
first taste of how BDD acts because

216
00:14:44,140 --> 00:14:47,844
junit five is providing these nice facilities of nested

217
00:14:47,892 --> 00:14:52,412
tests and of display name so

218
00:14:52,466 --> 00:14:56,412
that you can follow easily how

219
00:14:56,466 --> 00:14:58,990
this execution looks like.

220
00:15:00,320 --> 00:15:03,852
Let's have here how such a passenger

221
00:15:03,916 --> 00:15:08,060
policy may look like in terms of BDD

222
00:15:08,140 --> 00:15:12,432
keywords. We implement here a feature called passengers policy

223
00:15:12,566 --> 00:15:16,404
and we say that the company follows a policy of adding and

224
00:15:16,442 --> 00:15:19,924
removing passengers depending on the passenger type and

225
00:15:19,962 --> 00:15:23,520
on the flight type. For each feature I can implement

226
00:15:23,680 --> 00:15:27,464
one or more scenarios. And the scenario from here is

227
00:15:27,502 --> 00:15:30,548
the scenario with economy flight regular passenger.

228
00:15:30,644 --> 00:15:34,340
If I follow the given when, then keywords,

229
00:15:34,420 --> 00:15:37,588
I can read it in plain English. This scenario

230
00:15:37,684 --> 00:15:41,024
given there is an economy flight when we have a regular

231
00:15:41,092 --> 00:15:44,204
passenger, then you can add and remove him

232
00:15:44,242 --> 00:15:48,076
from an economy flight. You cannot add a regular passenger to an

233
00:15:48,098 --> 00:15:51,640
economy flight more than once. So we have a given

234
00:15:51,730 --> 00:15:55,248
condition when represents some action we are

235
00:15:55,334 --> 00:15:59,184
pushing on something on the side of the application that is

236
00:15:59,222 --> 00:16:02,464
constructed and some consequences are

237
00:16:02,502 --> 00:16:06,532
expected. Then something else. Things is some

238
00:16:06,586 --> 00:16:11,072
core concept of behavior driven development. You have some precondition,

239
00:16:11,216 --> 00:16:15,472
something that is given you do some action. When is the keyword

240
00:16:15,536 --> 00:16:19,380
here and some consequences are expected.

241
00:16:19,540 --> 00:16:23,544
Then coming back here to the code, I run again

242
00:16:23,742 --> 00:16:28,084
this airport test just to emphasize

243
00:16:28,132 --> 00:16:31,240
these ideas of behavior driven development.

244
00:16:31,400 --> 00:16:35,036
And I see here again that I can read all

245
00:16:35,058 --> 00:16:38,620
the scenarios in plain English with

246
00:16:38,690 --> 00:16:42,652
the given when and then keywords given.

247
00:16:42,706 --> 00:16:46,012
There is an economy flight. When we have a vip passenger,

248
00:16:46,156 --> 00:16:50,332
then you can add him but cannot remove him from an economy flight.

249
00:16:50,476 --> 00:16:54,484
Things is fine, but we can do better. It is

250
00:16:54,522 --> 00:16:58,064
time to introduce cucumber as behavior driven

251
00:16:58,112 --> 00:17:02,080
development framework. This is the first cucumber

252
00:17:02,160 --> 00:17:06,512
project that we introduce. Now just to emphasize that

253
00:17:06,666 --> 00:17:10,104
the structure of the classes here is absolutely the same

254
00:17:10,222 --> 00:17:14,232
as previously presented, but we move

255
00:17:14,286 --> 00:17:17,770
our attention on something else on the test.

256
00:17:18,220 --> 00:17:21,692
I have just presented the way how

257
00:17:21,746 --> 00:17:24,968
a feature is written and how a scenario is written.

258
00:17:25,144 --> 00:17:29,208
And what I used there was the Gerkin

259
00:17:29,304 --> 00:17:33,100
syntax. What is Gerkin? Gerkin is the language

260
00:17:33,180 --> 00:17:36,572
that is used by the cucumber framework

261
00:17:36,716 --> 00:17:40,444
in order to describe the features

262
00:17:40,492 --> 00:17:44,616
and the scenarios. And all these scenarios

263
00:17:44,748 --> 00:17:49,136
and the features are written here in a specialized

264
00:17:49,328 --> 00:17:51,700
file called a feature file.

265
00:17:52,920 --> 00:17:56,784
Everyone can read it in plain English. Junit the

266
00:17:56,842 --> 00:18:00,730
way we were previously doing

267
00:18:01,500 --> 00:18:05,336
I can immediately read it just the way I was

268
00:18:05,518 --> 00:18:09,172
doing a little earlier. What's particular

269
00:18:09,326 --> 00:18:13,052
about cucumber and what do I need in order

270
00:18:13,106 --> 00:18:15,070
to start using it?

271
00:18:16,160 --> 00:18:19,992
First I look here in the palm XML

272
00:18:20,056 --> 00:18:24,764
dependencies and I see here that business

273
00:18:24,892 --> 00:18:28,880
the previously introduced junit five dependencies.

274
00:18:30,020 --> 00:18:33,964
I introduced these cucumber

275
00:18:34,012 --> 00:18:37,348
dependencies. They will be needed

276
00:18:37,514 --> 00:18:41,172
in order to execute the tests first,

277
00:18:41,226 --> 00:18:44,550
to annotate the method and to execute them.

278
00:18:46,700 --> 00:18:49,784
Okay, this is a feature file. I can read

279
00:18:49,822 --> 00:18:53,384
it in plain English, but how can I transpose it

280
00:18:53,422 --> 00:18:56,936
in code? If I have a

281
00:18:56,958 --> 00:19:01,388
look here, there is a

282
00:19:01,554 --> 00:19:04,844
passenger policy test that

283
00:19:04,882 --> 00:19:08,716
is already written. Let's have

284
00:19:08,738 --> 00:19:12,110
a closer look at how it looks like.

285
00:19:12,500 --> 00:19:16,064
And you see here that there are plenty of methods that

286
00:19:16,102 --> 00:19:18,912
are annotated with given when.

287
00:19:19,046 --> 00:19:21,712
Then this is something new.

288
00:19:21,846 --> 00:19:25,412
These are some new annotations. Where do they come

289
00:19:25,466 --> 00:19:29,124
from? If I look here at the

290
00:19:29,162 --> 00:19:33,184
import, of course they are coming from the cucumber

291
00:19:33,232 --> 00:19:36,736
packages. And if I have a look

292
00:19:36,778 --> 00:19:40,680
here, given there is an economy flight

293
00:19:41,740 --> 00:19:47,384
and if I have a look here into

294
00:19:47,422 --> 00:19:51,224
the feature file, I see that there is a correspondence between this step

295
00:19:51,422 --> 00:19:54,632
from the scenario end of this feature

296
00:19:54,696 --> 00:19:57,710
file to this step here.

297
00:19:58,480 --> 00:20:01,908
So whenever we'll

298
00:20:01,944 --> 00:20:05,170
execute this step from the scenario, in fact

299
00:20:05,940 --> 00:20:09,664
things method will be executed. Then if

300
00:20:09,702 --> 00:20:13,884
I have a look here, when we have a regular passenger,

301
00:20:14,012 --> 00:20:17,424
there is a corresponding step here. The method

302
00:20:17,472 --> 00:20:21,156
annotated with the when annotation and we

303
00:20:21,178 --> 00:20:24,884
have a regular passenger and this

304
00:20:24,922 --> 00:20:29,192
is what is going to be executed at

305
00:20:29,246 --> 00:20:33,064
this step. Then you can add and remove him

306
00:20:33,102 --> 00:20:34,680
from an economy flight.

307
00:20:38,370 --> 00:20:42,322
Then you can add and remove him from an economy flight. It is

308
00:20:42,456 --> 00:20:46,082
the corresponding step from here. This end step

309
00:20:46,136 --> 00:20:50,130
here is in fact another consequence, another then

310
00:20:50,280 --> 00:20:53,914
and it has been annotated

311
00:20:53,982 --> 00:20:57,894
here. The method with this then

312
00:20:58,092 --> 00:21:01,974
annotation as well and

313
00:21:02,092 --> 00:21:05,654
what was previously written with nested test and

314
00:21:05,692 --> 00:21:09,690
using only junit five facilities.

315
00:21:10,670 --> 00:21:14,954
It is written here using cucumber and

316
00:21:14,992 --> 00:21:18,674
the cucumber annotation. The cucumber annotations

317
00:21:18,822 --> 00:21:22,814
we see here that there are no more

318
00:21:22,932 --> 00:21:26,238
nested tests. Let's have a look back

319
00:21:26,404 --> 00:21:29,690
to our previously

320
00:21:29,850 --> 00:21:32,850
demonstrated junit five tests.

321
00:21:33,750 --> 00:21:38,254
We see here that we are having airport test having economy

322
00:21:38,302 --> 00:21:42,100
flight test included nested and

323
00:21:44,410 --> 00:21:50,850
economy flight test has regular passenger and vip

324
00:21:50,930 --> 00:21:53,670
passenger as nested tests.

325
00:21:54,170 --> 00:21:58,346
While here we

326
00:21:58,368 --> 00:22:02,730
are having a linear structure.

327
00:22:03,310 --> 00:22:06,698
All methods, all test methods are at the

328
00:22:06,784 --> 00:22:08,140
same level.

329
00:22:12,220 --> 00:22:15,690
How can I execute such a test?

330
00:22:17,420 --> 00:22:19,130
In order to do this,

331
00:22:21,100 --> 00:22:24,844
I needed to add this cucumber test.

332
00:22:25,042 --> 00:22:29,164
This is a special file. It may have any name.

333
00:22:29,282 --> 00:22:33,100
Just I chose cucumber test for convenience

334
00:22:33,520 --> 00:22:37,408
and what I need to say here, I need to

335
00:22:37,494 --> 00:22:40,896
run this test with

336
00:22:40,918 --> 00:22:44,464
the cucumber runner and I

337
00:22:44,502 --> 00:22:47,330
provided here some cucumber options.

338
00:22:48,120 --> 00:22:51,744
Pretty will mean the way the tests

339
00:22:51,792 --> 00:22:55,524
will be displayed. We are going to see this really quickly

340
00:22:55,722 --> 00:22:59,200
and where to look for the feature

341
00:22:59,280 --> 00:23:02,968
files and we say here look on the class pass

342
00:23:03,134 --> 00:23:06,440
and you are going to find out

343
00:23:06,590 --> 00:23:09,992
this features folder more

344
00:23:10,046 --> 00:23:13,372
exactly this one. And there

345
00:23:13,426 --> 00:23:17,384
you are going to find the feature file

346
00:23:17,512 --> 00:23:20,972
or the feature files and you are going to make some

347
00:23:21,026 --> 00:23:26,572
correspondence between the steps that are defined

348
00:23:26,636 --> 00:23:30,016
here and the steps that are defined in

349
00:23:30,038 --> 00:23:33,356
the Java

350
00:23:33,388 --> 00:23:33,970
code.

351
00:23:36,980 --> 00:23:39,750
Okay, let me run this youtuber test.

352
00:23:53,400 --> 00:23:56,580
Okay. What I see here is that I still have

353
00:23:56,650 --> 00:23:58,340
some scenarios,

354
00:24:01,400 --> 00:24:05,320
but it is easier to read

355
00:24:05,390 --> 00:24:08,532
them of course in plain English.

356
00:24:08,596 --> 00:24:12,564
Just the way we are doing previously with junit

357
00:24:12,612 --> 00:24:15,240
five and the junit five capabilities.

358
00:24:16,240 --> 00:24:20,376
Given there is an economy flight, when we have a regular passenger,

359
00:24:20,568 --> 00:24:24,216
then you can add and remove him from an economy flight

360
00:24:24,408 --> 00:24:27,676
and you cannot add a regular passenger to an economy

361
00:24:27,708 --> 00:24:29,890
flight more than once.

362
00:24:31,140 --> 00:24:35,776
Let's compare this with

363
00:24:35,878 --> 00:24:39,552
the previously executed test

364
00:24:39,606 --> 00:24:40,870
from junit five.

365
00:24:44,440 --> 00:24:47,668
You see that they are looking pretty similar,

366
00:24:47,754 --> 00:24:51,510
but the cucumber ones are

367
00:24:52,860 --> 00:24:56,840
easier to read. You don't have to go into some depth.

368
00:24:57,340 --> 00:25:00,984
They are linear here and you

369
00:25:01,022 --> 00:25:05,020
can eventually immediately read the whole

370
00:25:05,090 --> 00:25:08,876
scenarios here into the

371
00:25:08,898 --> 00:25:12,908
feature file. If we want to do some

372
00:25:12,994 --> 00:25:16,444
more comparison, let's look at the

373
00:25:16,482 --> 00:25:20,544
length of the code here for the

374
00:25:20,582 --> 00:25:24,240
cucumber version, the code

375
00:25:24,310 --> 00:25:29,452
written for the test is about 157

376
00:25:29,526 --> 00:25:38,804
lines, while here it

377
00:25:38,842 --> 00:25:42,372
is 207 lines. So we also

378
00:25:42,426 --> 00:25:44,710
have some gain here.

379
00:25:46,060 --> 00:25:50,084
At the level of the code we have a shorter

380
00:25:50,132 --> 00:25:54,360
code and the shorter code is easier to understand, to follow, to maintain.

381
00:25:55,100 --> 00:25:59,230
Just because cucumber as

382
00:25:59,760 --> 00:26:03,864
any behavior driven development framework in general, is providing

383
00:26:03,912 --> 00:26:07,790
us some facilities to write linear test and to

384
00:26:08,640 --> 00:26:12,524
write each step that is repeated to define

385
00:26:12,572 --> 00:26:15,952
only once a method for it. What I do mean here

386
00:26:16,006 --> 00:26:19,788
is here, if I have the given there is an economy

387
00:26:19,804 --> 00:26:23,696
flight step and I have again given there is economy

388
00:26:23,728 --> 00:26:27,204
flight step, there will be only one

389
00:26:27,322 --> 00:26:31,216
method annotated with given there is an economy

390
00:26:31,248 --> 00:26:36,344
flight here. So you have a

391
00:26:36,382 --> 00:26:40,760
shortage of code. And of course things comes as an advantage.

392
00:26:43,740 --> 00:26:47,824
What do I need in order to easily

393
00:26:47,972 --> 00:26:50,940
use cucumber in my projects?

394
00:26:52,800 --> 00:26:56,364
I was saying of course first of all, remember I need

395
00:26:56,402 --> 00:26:59,150
to add these dependencies. Great.

396
00:27:00,480 --> 00:27:05,040
What else, what else is needed or at least recommended

397
00:27:10,100 --> 00:27:13,570
working with the cucumber plugin for

398
00:27:16,520 --> 00:27:20,036
intellij here brings to some facilities. I'm going

399
00:27:20,058 --> 00:27:23,972
to demonstrate them immediately. Just to say here

400
00:27:24,026 --> 00:27:28,120
that I needed to add the cucumber for Java plugin

401
00:27:28,540 --> 00:27:33,124
and the Gerkin plugin. Remember I was saying earlier

402
00:27:33,172 --> 00:27:36,890
that Gerkin is the language that

403
00:27:37,420 --> 00:27:41,352
defines the scenarios that cucumber

404
00:27:41,416 --> 00:27:45,132
needs to use. Cucumber is the framework while

405
00:27:45,186 --> 00:27:48,060
Gerkin is the definition language.

406
00:27:57,470 --> 00:28:01,034
Let's see what this plugin can help me

407
00:28:01,072 --> 00:28:04,570
to do if I want to

408
00:28:04,640 --> 00:28:07,786
execute directly these scenarios. This feature with these

409
00:28:07,808 --> 00:28:09,660
scenarios, would that be possible?

410
00:28:11,170 --> 00:28:14,430
If I right click on this feature file,

411
00:28:16,210 --> 00:28:20,094
let me execute it. It is possible as

412
00:28:20,292 --> 00:28:24,334
you saw that Intellij

413
00:28:24,382 --> 00:28:28,574
was providing a run button, I can directly execute

414
00:28:28,622 --> 00:28:32,034
it and I can see here

415
00:28:32,152 --> 00:28:36,062
I have six scenarios 22:06 steps,

416
00:28:36,126 --> 00:28:39,094
22 past great.

417
00:28:39,212 --> 00:28:42,454
What did I need to do in order to

418
00:28:42,492 --> 00:28:46,134
be able to directly execute this

419
00:28:46,172 --> 00:28:49,690
feature file? One thing was to have

420
00:28:49,760 --> 00:28:54,234
this cucumber plugin installed. Then I

421
00:28:54,272 --> 00:28:59,174
need here to have some cucumber

422
00:28:59,222 --> 00:29:03,502
Java configuration that needs this main class as

423
00:29:03,556 --> 00:29:07,834
executor cucumber API Cli main glue

424
00:29:07,882 --> 00:29:12,734
is the BDD airport meaning the

425
00:29:12,772 --> 00:29:16,334
package where I wrote the code. You see

426
00:29:16,372 --> 00:29:20,814
here I have BDD airport as the package where the code is written

427
00:29:20,942 --> 00:29:24,622
and the feature or folder path is where the feature

428
00:29:24,686 --> 00:29:28,070
file or feature files are to be located.

429
00:29:31,770 --> 00:29:35,446
After this pretty simple setup, as you

430
00:29:35,468 --> 00:29:39,462
are seeing, I am able to directly execute

431
00:29:39,526 --> 00:29:44,762
this feature file. And remember this

432
00:29:44,816 --> 00:29:48,842
is very nice feature, especially for

433
00:29:48,896 --> 00:29:52,222
nontechnical people or even for technical people if they

434
00:29:52,276 --> 00:29:55,710
are maybe in a hurry,

435
00:29:56,450 --> 00:30:00,346
you will immediately get feedback about the scenarios and steps

436
00:30:00,378 --> 00:30:03,230
to be executed and about their results.

437
00:30:04,950 --> 00:30:08,754
Okay, let's have a closer look at the

438
00:30:08,792 --> 00:30:12,530
step from this feature

439
00:30:13,030 --> 00:30:15,490
file to this Java file.

440
00:30:16,810 --> 00:30:20,920
And you may ask yourself, how can I do

441
00:30:21,290 --> 00:30:24,838
such a thing? Quickly, how can I

442
00:30:24,924 --> 00:30:28,474
write this method and how can

443
00:30:28,512 --> 00:30:31,862
I quickly take the annotation,

444
00:30:31,926 --> 00:30:35,180
the annotation that is needed for such a step.

445
00:30:38,700 --> 00:30:42,112
You see here we have this given there is an economy flight

446
00:30:42,196 --> 00:30:46,668
and it has added, cucumber has added this given and this

447
00:30:46,754 --> 00:30:49,260
argument there is an economy flight.

448
00:30:50,880 --> 00:30:55,088
Let's have a look. Let's presume that this step

449
00:30:55,254 --> 00:30:58,416
is missing here from the implementation. If I have a

450
00:30:58,438 --> 00:31:01,840
look here at the feature file,

451
00:31:03,300 --> 00:31:06,450
the plugin will immediately detect that,

452
00:31:07,240 --> 00:31:10,964
oh, this step is missing and it will

453
00:31:11,082 --> 00:31:14,884
highlight it with another color. And if

454
00:31:14,922 --> 00:31:18,516
I try to execute now this feature file, just the

455
00:31:18,538 --> 00:31:21,000
way I was doing a little earlier,

456
00:31:21,580 --> 00:31:23,450
let's see how it goes.

457
00:31:34,440 --> 00:31:37,908
Okay, it fails, not a surprise for us,

458
00:31:38,074 --> 00:31:41,476
says here undefined step given there is an economy

459
00:31:41,508 --> 00:31:42,200
flight,

460
00:31:45,320 --> 00:31:47,910
and if I have a look here,

461
00:31:52,680 --> 00:31:55,832
I am provided an advice. You can

462
00:31:55,886 --> 00:31:59,576
implement missing steps with the snippets below and it

463
00:31:59,678 --> 00:32:03,176
immediately gives me this given there is

464
00:32:03,198 --> 00:32:06,504
an economy flight annotated method and I

465
00:32:06,542 --> 00:32:09,896
can just copy, let's presume

466
00:32:09,928 --> 00:32:13,150
that I didn't have it and paste it here.

467
00:32:13,840 --> 00:32:17,020
It was similar to this already

468
00:32:17,090 --> 00:32:20,770
implemented method and I can

469
00:32:21,940 --> 00:32:25,616
just write the Java code that corresponds to

470
00:32:25,638 --> 00:32:31,600
that action. So you can immediately obtain

471
00:32:31,940 --> 00:32:35,968
the skeleton of the test by executing

472
00:32:36,064 --> 00:32:40,068
directly this feature file and by taking

473
00:32:40,154 --> 00:32:43,750
the not yet implemented steps from here.

474
00:32:48,560 --> 00:32:52,392
Just to tell you that there is no semantic

475
00:32:52,456 --> 00:32:56,284
difference between these steps given when,

476
00:32:56,402 --> 00:32:59,996
then these annotations do

477
00:33:00,018 --> 00:33:04,210
not have a semantic difference between them,

478
00:33:04,580 --> 00:33:08,690
they just correspond to the steps from here.

479
00:33:09,380 --> 00:33:13,192
And of course they have some understanding significance,

480
00:33:13,276 --> 00:33:16,390
because if you write

481
00:33:17,080 --> 00:33:21,300
given and you read given, you understand that this is a precondition.

482
00:33:22,040 --> 00:33:25,992
If you write or read, when you understand that

483
00:33:26,046 --> 00:33:29,000
this is an action, and if you write or read,

484
00:33:29,070 --> 00:33:32,680
then you understand that this is a consequence.

485
00:33:36,960 --> 00:33:40,852
Let's move forward and let's try to implement

486
00:33:40,936 --> 00:33:44,816
some more functionality. You may ask yourself, can we

487
00:33:44,998 --> 00:33:49,072
write more complicated tests? Can we write some tests that

488
00:33:49,126 --> 00:33:52,624
need some input for their methods? Can we write

489
00:33:52,662 --> 00:33:55,476
some parameterized tests? Yes, this is possible.

490
00:33:55,578 --> 00:33:58,740
And in order to demonstrate this,

491
00:33:58,810 --> 00:34:02,756
we take this feature about providing bonus points to

492
00:34:02,778 --> 00:34:05,892
the passengers. We say that the company has

493
00:34:05,946 --> 00:34:09,332
a bonus points policy saying we would like to calculate

494
00:34:09,396 --> 00:34:12,856
the bonus points. What do we need to do? We take a look. If the

495
00:34:12,878 --> 00:34:16,772
passenger is a vip, we take the mileage and divide

496
00:34:16,836 --> 00:34:19,748
this mileage by ten and we are getting the bonus points.

497
00:34:19,854 --> 00:34:23,164
Otherwise, if the passenger is not vip, we are taking this

498
00:34:23,202 --> 00:34:26,844
mileage and we are dividing it with 20 and this

499
00:34:26,882 --> 00:34:30,396
is the bonus points. So let's have a

500
00:34:30,418 --> 00:34:34,336
look at the implementation of this new feature. It is

501
00:34:34,358 --> 00:34:37,632
a parameterized feature. The scenarios for

502
00:34:37,766 --> 00:34:42,092
these parameterized features are known in cucumber as scenario

503
00:34:42,156 --> 00:34:45,252
outlines. So we have this separate feature saying

504
00:34:45,306 --> 00:34:48,896
bonus policy. The company follows a bonus policy depending

505
00:34:48,928 --> 00:34:51,460
on the passenger type and on the mileage.

506
00:34:52,040 --> 00:34:55,436
I can immediately read here scenario outline

507
00:34:55,568 --> 00:34:59,732
regular passenger bonus policy given we have a regular passenger

508
00:34:59,796 --> 00:35:03,828
with a mileage when the regular passenger travels

509
00:35:03,924 --> 00:35:07,370
mileage one and mileage two and mileage three,

510
00:35:07,920 --> 00:35:11,100
then the bonus points of the regular passengers

511
00:35:11,440 --> 00:35:15,340
should be points. You see that we have some

512
00:35:15,410 --> 00:35:18,732
parameterized steps and at the bottom of this

513
00:35:18,786 --> 00:35:22,800
scenario outline we have a table with examples

514
00:35:23,140 --> 00:35:26,272
and for this table with examples we have mileage one,

515
00:35:26,326 --> 00:35:29,090
mileage two, mileage three and points.

516
00:35:29,700 --> 00:35:33,332
And you may immediately understand that there will be

517
00:35:33,386 --> 00:35:37,060
a one to one correspondence between the values from

518
00:35:37,130 --> 00:35:41,328
this column, mileage one that will be introduced

519
00:35:41,424 --> 00:35:45,076
here, the values from this

520
00:35:45,098 --> 00:35:48,936
column that will be inserted here, the values from these

521
00:35:48,958 --> 00:35:52,792
columns to be inserted here to mileage three and the

522
00:35:52,846 --> 00:35:56,810
values from this points column to be inserted here.

523
00:35:58,000 --> 00:36:01,544
So we have four columns

524
00:36:01,592 --> 00:36:05,452
corresponding to these four parameters and

525
00:36:05,506 --> 00:36:09,352
we have five lines meaning that things scenario

526
00:36:09,416 --> 00:36:13,040
outline will be executed five times for

527
00:36:13,110 --> 00:36:14,960
each set of values.

528
00:36:16,180 --> 00:36:20,252
And you see here two scenario outlines the scenario outline

529
00:36:20,316 --> 00:36:24,012
for the regular passenger bonus policy and the scenario

530
00:36:24,076 --> 00:36:27,152
outline for the vip passenger bonus

531
00:36:27,216 --> 00:36:31,316
policy. Of course the same example

532
00:36:31,418 --> 00:36:35,708
stable with one to one correspondence between the columns

533
00:36:35,824 --> 00:36:38,090
and the parameters from here.

534
00:36:41,660 --> 00:36:45,496
These scenarios were transposed here into

535
00:36:45,598 --> 00:36:49,020
these methods. You see again

536
00:36:49,090 --> 00:36:53,352
this one to one correspondence

537
00:36:53,416 --> 00:36:57,630
between this annotated method given annotated method and

538
00:36:59,440 --> 00:37:04,290
this step from here and

539
00:37:04,740 --> 00:37:08,844
for example between this when annotated method

540
00:37:08,972 --> 00:37:12,924
and this when step from

541
00:37:12,982 --> 00:37:17,110
here and what you need to see

542
00:37:17,480 --> 00:37:21,076
to observe in addition is that these three parameters from

543
00:37:21,098 --> 00:37:26,296
here have been translated into these

544
00:37:26,398 --> 00:37:31,032
three regular expressions from

545
00:37:31,086 --> 00:37:35,016
here and into these three parameters of

546
00:37:35,038 --> 00:37:35,960
the method.

547
00:37:38,400 --> 00:37:42,920
So when the cucumber plugin generated

548
00:37:43,000 --> 00:37:47,340
this step, it has generated this when

549
00:37:47,490 --> 00:37:51,024
annotated method and

550
00:37:51,142 --> 00:37:55,264
a method with three

551
00:37:55,302 --> 00:37:58,896
parameters, mileage one, mileage two and mileage three,

552
00:37:58,998 --> 00:38:03,016
each one corresponding to one of the regular expression

553
00:38:03,148 --> 00:38:07,030
d plus here means some integral value.

554
00:38:09,160 --> 00:38:12,836
Again this step from here, then the

555
00:38:12,858 --> 00:38:16,920
bonus points of the regular passenger should be points has one parameter.

556
00:38:17,340 --> 00:38:21,524
It has been translated into this then annotated method

557
00:38:21,652 --> 00:38:25,924
and this regular expression

558
00:38:25,972 --> 00:38:29,500
from the argument and the method with one argument here

559
00:38:29,570 --> 00:38:34,412
int points just

560
00:38:34,466 --> 00:38:39,164
to have a look here that a

561
00:38:39,202 --> 00:38:42,848
new mileage class was introduced in order

562
00:38:42,934 --> 00:38:46,304
to make the calculus for the

563
00:38:46,502 --> 00:38:49,696
given points, for the points to be awarded to the

564
00:38:49,718 --> 00:38:53,300
passenger according to the mileage. This is pure business

565
00:38:53,370 --> 00:38:54,390
logic here.

566
00:38:57,560 --> 00:39:02,496
And following the same strategy,

567
00:39:02,688 --> 00:39:05,940
when you write this test,

568
00:39:06,090 --> 00:39:09,610
first you think, what do I need in order to

569
00:39:10,300 --> 00:39:13,496
provide the business logic for this given step, which are

570
00:39:13,518 --> 00:39:17,396
the preconditions? What do we mean that we have a regular passenger

571
00:39:17,428 --> 00:39:20,908
with some mileage? What does it mean that

572
00:39:20,994 --> 00:39:24,152
the regular passenger travels some mileages?

573
00:39:24,296 --> 00:39:27,516
What does it mean that the bonus points of the

574
00:39:27,538 --> 00:39:29,870
regular passenger should be something?

575
00:39:32,020 --> 00:39:36,204
And this cucumber

576
00:39:36,252 --> 00:39:37,970
test is the same one.

577
00:39:42,280 --> 00:39:46,232
This cucumber test is the same one. I can right

578
00:39:46,286 --> 00:39:50,804
click on it and execute

579
00:39:50,852 --> 00:40:01,442
it. Let's wait a little here

580
00:40:01,576 --> 00:40:05,782
we are interested about this bonus policy new

581
00:40:05,836 --> 00:40:10,470
feature. We see here scenario outline with examples.

582
00:40:11,130 --> 00:40:14,794
And we have the five lines of

583
00:40:14,832 --> 00:40:18,650
examples that were present into the feature.

584
00:40:19,470 --> 00:40:23,226
The same here we

585
00:40:23,248 --> 00:40:26,250
have here five lines with examples.

586
00:40:27,010 --> 00:40:30,458
This means that the test is executed

587
00:40:30,554 --> 00:40:34,586
once for each line and it checks

588
00:40:34,618 --> 00:40:37,470
accordingly for each input stat.

589
00:40:39,090 --> 00:40:43,038
Let's try to execute things bonus policy feature directly,

590
00:40:43,134 --> 00:40:46,894
just the way I was doing previously with the passenger

591
00:40:46,942 --> 00:40:47,970
policy feature.

592
00:40:52,620 --> 00:40:55,580
And we see that we get immediate feedback.

593
00:40:58,000 --> 00:41:01,676
We may read here ten scenarios. Remember we are having

594
00:41:01,778 --> 00:41:05,964
two scenarios outlines, each one having five

595
00:41:06,002 --> 00:41:09,490
examples. So two multiplied by five means,

596
00:41:10,100 --> 00:41:12,960
ten scenarios and 30 steps.

597
00:41:15,460 --> 00:41:19,688
Let's have a look here at how the methods

598
00:41:19,724 --> 00:41:22,870
are generated and presume that

599
00:41:23,560 --> 00:41:27,030
this when method is not present here.

600
00:41:29,840 --> 00:41:34,736
You see here that the

601
00:41:34,758 --> 00:41:39,052
cucumber plugin will immediately emphasize

602
00:41:39,196 --> 00:41:43,360
that the method is not implemented. Says undefined step reference.

603
00:41:47,290 --> 00:41:51,098
And if I run again this bonus policy

604
00:41:51,184 --> 00:41:51,850
feature,

605
00:42:01,030 --> 00:42:04,626
okay, it is failing. But if

606
00:42:04,648 --> 00:42:07,886
I have a look here, I am told,

607
00:42:08,008 --> 00:42:10,680
hey, you are missing this step.

608
00:42:11,050 --> 00:42:14,274
And the cucumber plugin

609
00:42:14,322 --> 00:42:17,730
is providing immediately the when annotated

610
00:42:17,810 --> 00:42:21,660
method with these regular expressions and

611
00:42:22,350 --> 00:42:25,610
the method with three arguments.

612
00:42:28,800 --> 00:42:33,496
So let's go back here to bonus policy reintroduce

613
00:42:33,528 --> 00:42:36,690
things method. Have a new look here.

614
00:42:38,420 --> 00:42:42,032
Okay. The plugin has found out

615
00:42:42,086 --> 00:42:46,064
that the method is back and

616
00:42:46,262 --> 00:42:50,310
if I want to re execute this chuchumber test,

617
00:42:53,240 --> 00:42:57,430
I'm expecting everything to be working and green again.

618
00:43:02,700 --> 00:43:06,730
Okay. And this is what is happening.

619
00:43:08,460 --> 00:43:13,160
So we are getting

620
00:43:13,310 --> 00:43:16,360
closer to our end of the demonstration.

621
00:43:16,780 --> 00:43:20,596
I hope you have enjoyed this cucumber

622
00:43:20,628 --> 00:43:23,800
facilities and that you are going to

623
00:43:23,870 --> 00:43:27,612
find out that it is useful for your projects

624
00:43:27,716 --> 00:43:30,880
and you are going to adopt this BDD style.

625
00:43:31,220 --> 00:43:34,764
Of course, there are more features and more capabilities

626
00:43:34,812 --> 00:43:38,108
of cucumber that are waiting to be discovered.

627
00:43:38,284 --> 00:43:42,556
Our demonstration introduced the BDD concept

628
00:43:42,668 --> 00:43:47,024
and the core cucumber facilities thanks

629
00:43:47,062 --> 00:43:49,980
for watching. See you in the next presentation.

