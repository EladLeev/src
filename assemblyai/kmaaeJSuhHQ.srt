1
00:00:19,850 --> 00:00:23,114
Hello everyone, welcome to my session about webhooks

2
00:00:23,242 --> 00:00:27,334
security and scalability. My name is Marvin Collins and

3
00:00:27,372 --> 00:00:31,206
in this talk I'm going to talk about webhooks. I will start with

4
00:00:31,228 --> 00:00:34,610
the introduction and explain what is webbooks.

5
00:00:34,770 --> 00:00:38,202
Then we will move forward to discuss the use cases and

6
00:00:38,256 --> 00:00:42,330
security concerns and security approaches and

7
00:00:42,480 --> 00:00:46,700
webhook scalability. And finally I will give my experience

8
00:00:47,790 --> 00:00:50,650
thoughts on out when dealing with webhooks.

9
00:00:51,010 --> 00:00:55,514
So from a personal experience, I've done a lot of research developing webhooks

10
00:00:55,562 --> 00:01:00,554
application and I'm

11
00:01:00,602 --> 00:01:04,110
sure one of you, I'm sure you've,

12
00:01:04,710 --> 00:01:08,786
and I'm sure you've had experience dealing with webhooks that in terms

13
00:01:08,888 --> 00:01:12,754
whether it's integration, implementation or just adding into

14
00:01:12,792 --> 00:01:16,862
a third party system, I will assume that

15
00:01:16,936 --> 00:01:20,198
you understand the cops concept of webhooks and I

16
00:01:20,204 --> 00:01:24,038
will just try to explain for those who don't know where webhooks is.

17
00:01:24,204 --> 00:01:27,366
So Webhook was coined by Jeff Lintney back in

18
00:01:27,388 --> 00:01:31,900
2007. A web book is just a URL again,

19
00:01:32,430 --> 00:01:36,422
which is a reverse API that is created

20
00:01:36,486 --> 00:01:39,798
by application developer which is referred to the client

21
00:01:39,974 --> 00:01:43,978
to receive information from API provider which is

22
00:01:44,144 --> 00:01:48,014
often refers server without

23
00:01:48,212 --> 00:01:51,642
polling the server. So we'll discuss what polling

24
00:01:51,706 --> 00:01:56,334
is. So webhooks

25
00:01:56,382 --> 00:01:59,860
basically just another way of communication between

26
00:02:00,870 --> 00:02:04,580
application, same as rest API. If you understand what

27
00:02:05,050 --> 00:02:08,802
rest API is, and they do use the format

28
00:02:08,866 --> 00:02:12,630
which is JSON and request is done through HTTP

29
00:02:13,130 --> 00:02:17,074
post request, the same as Restus PI which is can HTTP

30
00:02:17,122 --> 00:02:22,380
method. The other option when

31
00:02:23,870 --> 00:02:27,626
for example when a pr

32
00:02:27,728 --> 00:02:31,654
happened to a GitHub repo, you often receive a notification

33
00:02:31,782 --> 00:02:35,600
if your project lead who needs to review that project,

34
00:02:37,090 --> 00:02:39,390
or you can listen to the webhook.

35
00:02:40,130 --> 00:02:43,454
So this is a good example of a web

36
00:02:43,492 --> 00:02:47,202
book because just imagine going to a GitHub page

37
00:02:47,256 --> 00:02:50,882
and refreshing over and over. And that is what is called

38
00:02:50,936 --> 00:02:57,490
polling. Okay, now polling

39
00:02:57,570 --> 00:03:01,062
is the process where you repeatedly send

40
00:03:01,116 --> 00:03:04,662
requests to the API which is the server to check for new

41
00:03:04,716 --> 00:03:08,498
data or updated data. This is done on at different

42
00:03:08,604 --> 00:03:12,234
intervals from the client application to the

43
00:03:12,272 --> 00:03:16,330
server to make sure that the client application sync with the server.

44
00:03:16,750 --> 00:03:20,698
But one thing you need to know is that polling is resourcing,

45
00:03:20,794 --> 00:03:23,934
intensive and inefficient as you can

46
00:03:23,972 --> 00:03:26,880
see on the right side of the screen.

47
00:03:27,650 --> 00:03:32,094
That is the polling process where a client send a

48
00:03:32,132 --> 00:03:34,530
request at intervals to the server.

49
00:03:37,750 --> 00:03:40,686
But the story is different with webhooks.

50
00:03:40,718 --> 00:03:44,034
So webhooks is kind of don't call me, I will

51
00:03:44,072 --> 00:03:47,638
call you and have information and you can see the difference on the screen.

52
00:03:47,724 --> 00:03:51,366
So on the left side we have webhooks, and then the right side we

53
00:03:51,388 --> 00:03:56,070
have polling. Now, webhooks only send one request

54
00:03:56,490 --> 00:04:00,570
to the application, but based

55
00:04:00,640 --> 00:04:04,614
on polling side, you can see there's multiple requests

56
00:04:04,662 --> 00:04:06,490
happening, some are failing.

57
00:04:10,290 --> 00:04:14,202
But when are we supposed to use webhooks?

58
00:04:14,346 --> 00:04:18,302
Very simple. Number one, we use

59
00:04:18,436 --> 00:04:22,030
webbooks to eliminate the polling process, which I just showed you

60
00:04:22,100 --> 00:04:25,966
a few seconds ago. When using webhooks,

61
00:04:25,998 --> 00:04:29,762
you can help conserve resources for client application.

62
00:04:29,896 --> 00:04:33,374
With the webhooks, there's no constraints building the server.

63
00:04:33,422 --> 00:04:37,094
The data is transferred based on event and it's very simple,

64
00:04:37,212 --> 00:04:41,190
risk free, with only critical or necessary information.

65
00:04:41,340 --> 00:04:45,346
Unlike traditional API relying

66
00:04:45,378 --> 00:04:48,822
on webhooks for data and require users to constantly

67
00:04:48,886 --> 00:04:52,374
check if the data is there without any trigger events.

68
00:04:52,502 --> 00:04:55,914
Webhooks do allow application to transmit data

69
00:04:56,112 --> 00:04:59,660
based on events or when the data is available,

70
00:05:00,210 --> 00:05:02,590
and they do send it immediately.

71
00:05:04,370 --> 00:05:08,298
So another use case of webhooks is automated

72
00:05:08,394 --> 00:05:11,822
data transfer on events. So again, I've mentioned event,

73
00:05:11,956 --> 00:05:16,510
my previous explanation, but this means webhooks

74
00:05:16,670 --> 00:05:21,086
do send data automatically, like immediately there's

75
00:05:21,118 --> 00:05:24,974
an event on a resource in the server, the data will be sent in real

76
00:05:25,032 --> 00:05:28,470
time. So this make it easy to automate data

77
00:05:28,540 --> 00:05:32,054
transfer based on events. Then we

78
00:05:32,092 --> 00:05:36,514
have integration and integration. Like previously

79
00:05:36,562 --> 00:05:40,074
mentioned, we've built a lot of system and

80
00:05:40,112 --> 00:05:43,834
this system do need to widely support each other and

81
00:05:43,872 --> 00:05:47,482
communicate and share data. So webhooks allow us to

82
00:05:47,536 --> 00:05:51,466
have that implementation with ease.

83
00:05:51,578 --> 00:05:56,318
Again, client application can

84
00:05:56,404 --> 00:05:59,854
rely on other information, like other system information to

85
00:05:59,892 --> 00:06:04,240
create triggers and actions within the application.

86
00:06:04,690 --> 00:06:08,078
And in this case, Webhook can help us

87
00:06:08,244 --> 00:06:11,730
create those triggers and action on those applications.

88
00:06:12,710 --> 00:06:17,250
The second part of this discussion is security concern.

89
00:06:20,170 --> 00:06:23,430
By default, webhooks does not come

90
00:06:23,500 --> 00:06:27,122
with security implementation and this is a big challenge.

91
00:06:27,186 --> 00:06:30,474
Okay. The Webhooks communication mechanism does

92
00:06:30,512 --> 00:06:34,282
not have any native way to identify maybe

93
00:06:34,336 --> 00:06:38,042
the source in the destination. So this is a security concern when working

94
00:06:38,096 --> 00:06:42,154
with the webhooks. Okay, so this means that a Webhook

95
00:06:42,202 --> 00:06:46,240
producer has no way whatsoever to verify that

96
00:06:46,610 --> 00:06:50,378
it is sending its Webhook data to the right destination.

97
00:06:50,474 --> 00:06:54,194
And the webbook's consumer, which is a client, cannot verify that

98
00:06:54,312 --> 00:06:57,570
it is receiving Webhook from the expected source.

99
00:06:57,910 --> 00:07:01,822
So like Alia mentioned, the vulnerability

100
00:07:01,966 --> 00:07:05,722
can allow anyone to act as a Webhook producer,

101
00:07:05,886 --> 00:07:07,830
which is the server,

102
00:07:08,490 --> 00:07:12,486
or a consumer, which is the receiver. And these

103
00:07:12,588 --> 00:07:16,706
people act as the receiver or consumer.

104
00:07:16,898 --> 00:07:20,522
The producer can send any kind

105
00:07:20,576 --> 00:07:24,618
of compromising data to the receiving application

106
00:07:24,704 --> 00:07:29,594
or the client application. But we

107
00:07:29,632 --> 00:07:33,214
need to make sure that this

108
00:07:33,412 --> 00:07:37,182
system are very secure. And that is where now we

109
00:07:37,236 --> 00:07:40,798
explore the security concerns and come up with

110
00:07:40,884 --> 00:07:44,270
security approaches to secure

111
00:07:44,350 --> 00:07:48,578
the web, webhooks. So I will just recap the security concern again

112
00:07:48,664 --> 00:07:51,138
and just explain them. So number one,

113
00:07:51,304 --> 00:07:55,198
Webhook's communication mechanism do lack a

114
00:07:55,224 --> 00:07:58,566
native way to identify the source and the destination of

115
00:07:58,588 --> 00:08:02,326
webhook. That is the major red flag when dealing with the web book.

116
00:08:02,348 --> 00:08:07,094
So if your Webhook cannot identify the

117
00:08:07,132 --> 00:08:10,774
producer and the consumer, that is a security concern

118
00:08:10,822 --> 00:08:14,362
that you need to look at the second

119
00:08:14,416 --> 00:08:18,326
one. This means that our Webhooks producer

120
00:08:18,358 --> 00:08:21,710
cannot verify that it is sending a web book to the correct

121
00:08:21,780 --> 00:08:25,722
extension, and the Webbook's consumer cannot verify

122
00:08:25,786 --> 00:08:29,070
that it's receiving its Webhook from the expected source.

123
00:08:29,570 --> 00:08:30,910
This vulnerability,

124
00:08:31,810 --> 00:08:35,346
again, like I mentioned, can allow anyone to

125
00:08:35,368 --> 00:08:39,698
act as a Webhook producer and receiver and

126
00:08:39,784 --> 00:08:42,994
potentially send a malicious web book to a web

127
00:08:43,032 --> 00:08:46,390
book consumer, thereby compromising and

128
00:08:46,540 --> 00:08:52,262
the receiving application. So this is where you get act based

129
00:08:52,316 --> 00:08:55,430
on the data that your application is receiving.

130
00:08:55,770 --> 00:09:00,454
So how can we make

131
00:09:00,492 --> 00:09:03,978
sure that our web, webhooks are secure? So let's discuss

132
00:09:04,064 --> 00:09:07,322
that in this section. So before

133
00:09:07,376 --> 00:09:10,700
we dive deep into webhook security,

134
00:09:13,070 --> 00:09:16,414
making webhook secure is different from the

135
00:09:16,452 --> 00:09:19,694
normal web application security. And this is

136
00:09:19,732 --> 00:09:23,570
because webhooks is a URL which is accessible

137
00:09:24,150 --> 00:09:27,918
on the Internet. It's like publicly available on the Internet

138
00:09:28,014 --> 00:09:31,778
as compared to API endpoints or

139
00:09:31,864 --> 00:09:34,740
URLs which are secured. Some are public.

140
00:09:35,110 --> 00:09:38,598
Therefore, whenever there's a request to, it's the URL that

141
00:09:38,604 --> 00:09:42,486
is the Webhook URL. It's very important to ensure that the

142
00:09:42,508 --> 00:09:46,230
request truly come from the expected source, as we earlier discuss

143
00:09:46,300 --> 00:09:50,358
or mention. Without such verification, an attacker

144
00:09:50,374 --> 00:09:53,610
can fake a request again and send that to that URL.

145
00:09:54,430 --> 00:09:57,482
But at what point do we start

146
00:09:57,616 --> 00:10:00,986
securing our webhook? Okay, so there's on the

147
00:10:01,008 --> 00:10:04,270
setup when you're setting up a webhook, and also there's during,

148
00:10:04,340 --> 00:10:08,270
the others mostly are done during runtime.

149
00:10:08,930 --> 00:10:12,962
So the first one, okay, so we're going to look at one

150
00:10:13,016 --> 00:10:16,734
time with one time verification. This is mostly

151
00:10:16,782 --> 00:10:20,174
done on setup. So where the provider

152
00:10:20,302 --> 00:10:24,338
give the client a token or

153
00:10:24,504 --> 00:10:27,606
a one time verification. Remember,

154
00:10:27,788 --> 00:10:32,854
just to let you know, this one time verification can

155
00:10:32,892 --> 00:10:37,154
be revoked. So the provider will give instruction

156
00:10:37,202 --> 00:10:40,682
to the client on the best way to manage this

157
00:10:40,736 --> 00:10:44,422
client. So the token

158
00:10:44,486 --> 00:10:47,846
will act like a secret key, but it's not managed

159
00:10:47,878 --> 00:10:51,870
by the provider, and the provider cannot tell if the client is managing

160
00:10:52,370 --> 00:10:55,982
the token. So what they will do on every

161
00:10:56,116 --> 00:10:59,146
request they will send a request,

162
00:10:59,338 --> 00:11:03,982
a book request, with the security token

163
00:11:04,046 --> 00:11:06,130
that they issued to the client.

164
00:11:08,390 --> 00:11:12,130
Once a verification token is set and registered,

165
00:11:12,550 --> 00:11:16,194
the client will validate that. So it's the job of the client

166
00:11:16,242 --> 00:11:19,894
to verify the token on every request. If it

167
00:11:19,932 --> 00:11:23,958
matches, the request is accepted. Otherwise the client should

168
00:11:24,044 --> 00:11:28,034
ignore and deny that request. The disadvantage

169
00:11:28,082 --> 00:11:31,802
of this is the security is very limited because again,

170
00:11:31,856 --> 00:11:35,270
like I mentioned, you don't know the best implementation

171
00:11:35,350 --> 00:11:39,066
that the client is doing on their end. Okay, so this

172
00:11:39,088 --> 00:11:42,414
is also another mostly used way of

173
00:11:42,532 --> 00:11:45,360
webhook security.

174
00:11:45,890 --> 00:11:50,078
Still, this exposed a lot of security issues

175
00:11:50,164 --> 00:11:53,714
to a webhook URL because they can be attacked by

176
00:11:53,752 --> 00:11:57,966
DDoS, this can be attacked by server

177
00:11:57,998 --> 00:12:01,940
side request forgery and among other

178
00:12:02,470 --> 00:12:05,250
security attacks.

179
00:12:05,770 --> 00:12:09,302
So it is not the best recommended, but it's being used

180
00:12:09,356 --> 00:12:14,390
by companies like Zoom to manage their webhooks.

181
00:12:14,730 --> 00:12:18,200
So the next

182
00:12:19,210 --> 00:12:23,334
web book security method is verification of token.

183
00:12:23,382 --> 00:12:27,094
So this simply means there's a secret token that is shared

184
00:12:27,142 --> 00:12:31,318
between the client and the provider.

185
00:12:31,494 --> 00:12:33,280
This security code,

186
00:12:35,490 --> 00:12:38,218
this secret or verification token,

187
00:12:38,394 --> 00:12:42,190
it's sent on every request and on every request.

188
00:12:43,490 --> 00:12:47,410
That's very simple. So on request, the provider send

189
00:12:47,480 --> 00:12:51,134
a Webhook request containing a secret

190
00:12:51,182 --> 00:12:54,354
which is shared between the client and the

191
00:12:54,392 --> 00:12:58,034
server in the editors on the request.

192
00:12:58,082 --> 00:13:01,302
Editors, of course. Now this security can just

193
00:13:01,356 --> 00:13:06,600
be like 64

194
00:13:07,050 --> 00:13:10,406
username and password or something like that, or just a normal

195
00:13:10,438 --> 00:13:13,754
security key. Then the client will validate the

196
00:13:13,792 --> 00:13:17,366
value on request and compare. If the value that is shared

197
00:13:17,398 --> 00:13:20,590
there is the same as the value that they have.

198
00:13:20,660 --> 00:13:24,000
Okay, it's also another used

199
00:13:25,090 --> 00:13:28,800
web, webhooks of validation and authentication process,

200
00:13:29,170 --> 00:13:32,670
but it's not effective.

201
00:13:34,150 --> 00:13:37,460
The security method does not address so many things

202
00:13:38,310 --> 00:13:41,934
and it does not secure your webhook

203
00:13:41,982 --> 00:13:45,990
application as preferred, the most preferred way.

204
00:13:46,140 --> 00:13:49,682
The second one is HMAC,

205
00:13:49,746 --> 00:13:53,314
which simply means ash

206
00:13:53,362 --> 00:13:58,066
based message authentication code. So Ash

207
00:13:58,098 --> 00:14:01,666
based message authentication code is

208
00:14:01,708 --> 00:14:05,020
one of the most popular, actually it's the most popular security,

209
00:14:05,550 --> 00:14:09,226
webhooks security method we

210
00:14:09,328 --> 00:14:13,270
use during requests. So it simply has a hash signature

211
00:14:13,430 --> 00:14:16,906
in the editors with timestamp enabled

212
00:14:16,938 --> 00:14:20,270
for validation. So example of companies that

213
00:14:20,340 --> 00:14:23,882
leverage this Webhook security method is GitHub,

214
00:14:23,946 --> 00:14:28,126
Shopify, Slack, you name them. So basically the

215
00:14:28,148 --> 00:14:31,266
server or the provider will compute a

216
00:14:31,288 --> 00:14:35,066
signature and I'm going to display this in a plain

217
00:14:35,118 --> 00:14:38,274
test, then send it to the client.

218
00:14:38,402 --> 00:14:42,246
Now since the client has a

219
00:14:42,268 --> 00:14:42,950
secret,

220
00:14:45,850 --> 00:14:49,706
they're going to also compute a signature and compare the

221
00:14:49,728 --> 00:14:53,098
two. If they're the same, then that

222
00:14:53,264 --> 00:14:56,570
response will be accepted as a valid response.

223
00:14:57,230 --> 00:15:00,814
The client application. Of course, after doing

224
00:15:00,852 --> 00:15:04,320
that computation and accepting the

225
00:15:06,690 --> 00:15:10,190
authenticity of the message request,

226
00:15:11,250 --> 00:15:14,706
they will allow to consume that. But now how do

227
00:15:14,728 --> 00:15:18,238
we use the timestamp? Now there's a timestamp

228
00:15:18,254 --> 00:15:22,094
duration which is allowed for the message to be received and consumed,

229
00:15:22,142 --> 00:15:25,786
and if it's elapsed, then that message is considered

230
00:15:25,838 --> 00:15:29,858
as irrelevant, so it's not consumed by the client.

231
00:15:29,954 --> 00:15:34,040
So that's where the timestamp become of value

232
00:15:34,490 --> 00:15:37,480
in this method. Sorry.

233
00:15:40,430 --> 00:15:44,006
Yeah. Now, if you compare Hmark and shared

234
00:15:44,038 --> 00:15:47,622
secret or verification token,

235
00:15:47,686 --> 00:15:51,658
they're more or less the same, but there's more integrity

236
00:15:51,754 --> 00:15:55,530
while using hmark compared to shared secret.

237
00:15:55,690 --> 00:15:59,806
And also hmark also give you a

238
00:15:59,828 --> 00:16:04,158
leeway to deny the token

239
00:16:04,334 --> 00:16:07,918
if it reaches a certain duration

240
00:16:08,014 --> 00:16:11,874
or a certain amount of

241
00:16:11,912 --> 00:16:15,102
time if the message is sent

242
00:16:15,176 --> 00:16:18,962
later. Another security method is just whitelisting

243
00:16:19,026 --> 00:16:22,502
IP on

244
00:16:22,556 --> 00:16:26,594
both servers for client or provider.

245
00:16:26,722 --> 00:16:31,574
It's not usually that it's effective because there's IP

246
00:16:31,622 --> 00:16:35,126
spooning where the attacker

247
00:16:35,158 --> 00:16:38,634
can pretend that they do have the same IP and

248
00:16:38,672 --> 00:16:42,094
shared it with the same. So this can

249
00:16:42,132 --> 00:16:44,430
be, sorry, IP spoofing,

250
00:16:46,210 --> 00:16:50,106
it's a process where the attackers

251
00:16:50,138 --> 00:16:53,486
will impersonate the host by just

252
00:16:53,668 --> 00:16:58,274
kind of changing or make the IP look like the

253
00:16:58,312 --> 00:17:01,634
same as the IP that you requested. So it's not

254
00:17:01,672 --> 00:17:05,554
one of the best and not recommended. And also the implementation is

255
00:17:05,592 --> 00:17:08,774
a little bit hectic because when the

256
00:17:08,812 --> 00:17:11,960
IP change, that means you have to do the setup again.

257
00:17:12,410 --> 00:17:16,086
We have mutual TLS, which is one of the best

258
00:17:16,188 --> 00:17:19,210
when it comes to webhook security method.

259
00:17:20,270 --> 00:17:23,850
So whenever, let's say you are sending a URL,

260
00:17:24,350 --> 00:17:27,850
sorry, you are sending a request from one services to another.

261
00:17:27,920 --> 00:17:31,654
There's what is called transport layer security and shake

262
00:17:31,702 --> 00:17:35,802
protocol. Then the server will send a certificate

263
00:17:35,866 --> 00:17:39,886
from client and the client will verify that certificate is coming from

264
00:17:39,908 --> 00:17:43,380
the server that is sending the request to them.

265
00:17:43,750 --> 00:17:47,282
With the mutual TLS, not only

266
00:17:47,336 --> 00:17:50,100
does the client that,

267
00:17:50,710 --> 00:17:54,094
not only the client will verify the server,

268
00:17:54,142 --> 00:17:57,894
but even the server will verify the authenticity of

269
00:17:57,932 --> 00:18:00,966
the client, so they both verify each other.

270
00:18:01,148 --> 00:18:05,110
This method is very secure and used

271
00:18:05,180 --> 00:18:08,346
by big companies like docusign, but most

272
00:18:08,368 --> 00:18:12,780
of the time it's very difficult to maintain since

273
00:18:13,150 --> 00:18:16,614
one of the biggest challenges that the certificate

274
00:18:16,662 --> 00:18:20,346
can expire, the certificate can be changed, they can have

275
00:18:20,368 --> 00:18:23,386
a different the certificate can be revoked,

276
00:18:23,418 --> 00:18:27,390
and that means you have to set it all up again most of the time.

277
00:18:27,540 --> 00:18:31,262
So that is the downside and it's not

278
00:18:31,316 --> 00:18:35,138
mostly the best way to manage a very

279
00:18:35,224 --> 00:18:39,380
high demand webhooks service.

280
00:18:39,750 --> 00:18:43,570
So from all this example that we've looked through

281
00:18:43,720 --> 00:18:47,560
from let's start with the one time verification process,

282
00:18:48,090 --> 00:18:52,194
verification token and shared secret ash

283
00:18:52,242 --> 00:18:55,554
based message authentication and to IP

284
00:18:55,602 --> 00:18:59,830
white listing to mutual TLS. What is the best approach

285
00:18:59,910 --> 00:19:02,780
to implement security?

286
00:19:03,550 --> 00:19:06,380
Webhook security. Now again,

287
00:19:08,670 --> 00:19:12,462
it's very debatable. I will say it's very debatable and hear

288
00:19:12,516 --> 00:19:18,686
me out. The reason why it's very debatable because the

289
00:19:18,708 --> 00:19:22,222
security of your web book depend on the data

290
00:19:22,276 --> 00:19:26,354
that you're supposed to share with the to

291
00:19:26,392 --> 00:19:29,554
share with the security of your

292
00:19:29,592 --> 00:19:33,138
web book depend on the data that you're supposed to share with

293
00:19:33,304 --> 00:19:36,914
the client or the data you're supposed to receive

294
00:19:36,962 --> 00:19:40,534
as a client. So if

295
00:19:40,572 --> 00:19:45,398
it is just an average data

296
00:19:45,484 --> 00:19:48,858
that does not expose a

297
00:19:48,864 --> 00:19:52,074
lot of things, then the best way to use the

298
00:19:52,192 --> 00:19:55,590
HMAC, that is ash based authentication

299
00:19:55,670 --> 00:19:59,702
code with a timestamp

300
00:19:59,766 --> 00:20:03,162
and also the data that is being shared

301
00:20:03,226 --> 00:20:07,258
should be dataless. It's supposed to contain meaningless

302
00:20:07,354 --> 00:20:10,574
data, supposed to contain the minimal data.

303
00:20:10,772 --> 00:20:14,522
And this means that whenever the client

304
00:20:14,586 --> 00:20:18,082
receives that communication, they can do again one

305
00:20:18,136 --> 00:20:21,634
polling or they can retrieve the resource that they need through

306
00:20:21,672 --> 00:20:25,006
the API. So our webhook

307
00:20:25,038 --> 00:20:28,486
will just notify, will just act as event to the

308
00:20:28,508 --> 00:20:32,230
client and create can action. And that action is now

309
00:20:32,300 --> 00:20:35,766
what you're going to use to complete a

310
00:20:35,788 --> 00:20:39,334
resource on the server. So that is the best approach

311
00:20:39,382 --> 00:20:43,382
that I think. And just to show you this in Golan

312
00:20:43,446 --> 00:20:46,810
code, let's open vs code real quick.

313
00:20:46,880 --> 00:20:50,762
I have this ready here. So you can see here we

314
00:20:50,816 --> 00:20:55,022
get a signature here. So let's look at this

315
00:20:55,076 --> 00:20:58,414
function. And this function is just getting the data. So this is the

316
00:20:58,452 --> 00:21:03,074
data, the plain text that we are supposed to

317
00:21:03,112 --> 00:21:06,340
send to the client. And we get a security

318
00:21:07,590 --> 00:21:11,182
which is shared with the server

319
00:21:11,246 --> 00:21:18,494
and the client. And we

320
00:21:18,552 --> 00:21:22,262
generate a new ash using the given ash type and

321
00:21:22,316 --> 00:21:26,134
key. The ash type here is

322
00:21:26,172 --> 00:21:29,866
now the computing algorithm is the

323
00:21:29,888 --> 00:21:33,242
Shawan and the secret. Then we just

324
00:21:33,376 --> 00:21:36,778
write the data and we return

325
00:21:36,944 --> 00:21:40,302
with the encoding format which is

326
00:21:40,356 --> 00:21:44,362
exam to string. So this is our signature

327
00:21:44,426 --> 00:21:47,642
that we return. And that signature

328
00:21:47,706 --> 00:21:50,894
is going to be included in the

329
00:21:50,932 --> 00:21:54,626
request editor, as you can see now, when it

330
00:21:54,808 --> 00:21:58,402
reaches the client side, when it reaches the client side,

331
00:21:58,536 --> 00:22:01,922
the client side will use this key that

332
00:22:01,976 --> 00:22:05,720
they shared with us. They will use this key and

333
00:22:08,250 --> 00:22:12,054
they will take the request body which

334
00:22:12,092 --> 00:22:16,966
is just the data that this

335
00:22:16,988 --> 00:22:19,900
body here, you can see we have that body here.

336
00:22:21,630 --> 00:22:25,066
Yeah, we get this body, JSON body.

337
00:22:25,248 --> 00:22:28,950
So they will use this secret

338
00:22:29,030 --> 00:22:32,942
key in the body and try to create a signature and

339
00:22:33,076 --> 00:22:37,070
match the signature. If the signature is the same then

340
00:22:37,140 --> 00:22:41,370
they will confirm that the data is valid.

341
00:22:41,530 --> 00:22:44,420
Now winding up, winding up,

342
00:22:47,030 --> 00:22:48,660
now winding up,

343
00:22:50,470 --> 00:22:54,034
winding up. So the base is

344
00:22:54,072 --> 00:22:57,526
just having ash base with the timestamp, the one that I showed you with

345
00:22:57,548 --> 00:23:01,138
the less data and when it reaches the client

346
00:23:01,234 --> 00:23:05,110
side then they will do a server request

347
00:23:05,770 --> 00:23:09,466
based on the action provided in the

348
00:23:09,648 --> 00:23:10,860
webhook event.

349
00:23:12,350 --> 00:23:16,630
So webhooks scalability.

350
00:23:16,790 --> 00:23:20,640
Webhook scalability, let's look at that real quick.

351
00:23:21,810 --> 00:23:25,610
So we've talked about all this implementation

352
00:23:25,690 --> 00:23:29,406
and setup and everything, but now our application

353
00:23:29,588 --> 00:23:32,714
is serving a lot of users and we need to scale

354
00:23:32,762 --> 00:23:36,566
this and that means our webhook

355
00:23:36,698 --> 00:23:40,258
should be able to handle large volumes of data

356
00:23:40,344 --> 00:23:45,254
with ease and making them highly scalable available for

357
00:23:45,292 --> 00:23:48,600
transfer between our application and other application.

358
00:23:49,050 --> 00:23:50,870
So as a webhooks,

359
00:23:52,410 --> 00:23:55,858
webhooks do not require

360
00:23:55,954 --> 00:23:59,878
continuous polling for data. It's much more efficient

361
00:23:59,974 --> 00:24:04,006
where resources and resource friendly and it sends

362
00:24:04,038 --> 00:24:08,380
the data in real time. But again

363
00:24:09,310 --> 00:24:12,542
at some point we need to make our

364
00:24:12,596 --> 00:24:17,374
business more effective, like more

365
00:24:17,412 --> 00:24:20,042
scalable based on demand.

366
00:24:20,106 --> 00:24:24,290
Okay, so webhook

367
00:24:24,950 --> 00:24:28,322
in conjunction with other solution like your

368
00:24:28,376 --> 00:24:32,354
infrastructure, et cetera can be used to

369
00:24:32,472 --> 00:24:35,878
make it so scalable. So let's look at some of the ways

370
00:24:35,964 --> 00:24:39,218
that we can make our webhook scalable.

371
00:24:39,394 --> 00:24:42,818
Number one is you need to optimize

372
00:24:42,914 --> 00:24:46,822
your Webhook payload. This is very simple. This is just to

373
00:24:46,876 --> 00:24:50,426
ensure that your webhook payload, payload is

374
00:24:50,528 --> 00:24:53,898
the request data that is being sent is

375
00:24:54,064 --> 00:24:57,990
very minimal. It contain only necessary

376
00:24:58,070 --> 00:25:01,706
data as minimal as possible. So this will reduce the

377
00:25:01,728 --> 00:25:05,486
amount of data that you are sending. Okay number two,

378
00:25:05,668 --> 00:25:08,826
implement load balancing. So using a load

379
00:25:08,858 --> 00:25:12,154
balancer technique we can distribute the traffic

380
00:25:12,202 --> 00:25:15,774
and the workload to multiple servers or multiple

381
00:25:15,822 --> 00:25:19,682
services. This will prevent any just

382
00:25:19,736 --> 00:25:22,942
one services being overwhelmed with the large volume request.

383
00:25:23,006 --> 00:25:27,074
So that is very important. Use a message broker.

384
00:25:27,122 --> 00:25:31,094
Don't just directly send the

385
00:25:31,132 --> 00:25:37,474
content to your message, to your web

386
00:25:37,532 --> 00:25:40,220
book, to your web service.

387
00:25:42,190 --> 00:25:45,286
We can use a message broker. Example of a message broker

388
00:25:45,318 --> 00:25:49,126
is Nat. We've implemented NaT and lambda

389
00:25:49,158 --> 00:25:52,622
is Rabbitmko and Kafka. So using

390
00:25:52,676 --> 00:25:56,410
a message broker to handle requests and process distribution,

391
00:25:56,490 --> 00:25:59,962
this will help reduce latency and improve scalability

392
00:26:00,106 --> 00:26:03,042
by number,

393
00:26:03,176 --> 00:26:06,594
a huge percentage because now the

394
00:26:06,632 --> 00:26:09,890
data is sent to the message broker and the web

395
00:26:09,960 --> 00:26:13,198
book services is just going to pick it from the message broker

396
00:26:13,214 --> 00:26:16,934
and distribute them. Implement cache this is a very good

397
00:26:16,972 --> 00:26:21,110
one, implementing cache. So when you implement cache

398
00:26:22,970 --> 00:26:26,054
it will improves the

399
00:26:26,092 --> 00:26:30,502
frequency of accessing data. So the common data that doesn't

400
00:26:30,566 --> 00:26:34,442
change so much often can be put in the cache and

401
00:26:34,496 --> 00:26:38,410
if they needed to be included in our webbook

402
00:26:39,630 --> 00:26:43,326
request, then it will reduce the number of

403
00:26:43,508 --> 00:26:46,942
requests that we need the transaction. Let's say we need to get this data

404
00:26:46,996 --> 00:26:50,894
from the database or other services. So when

405
00:26:50,932 --> 00:26:54,142
you put this common data in like cache,

406
00:26:54,206 --> 00:26:58,130
it will reduce the number, the transaction

407
00:26:59,510 --> 00:27:03,826
or the frequency of accessing that data by

408
00:27:03,848 --> 00:27:07,046
a significant percentage. So I know this

409
00:27:07,068 --> 00:27:10,486
is not common when dealing with webhooks, but I recommend

410
00:27:10,588 --> 00:27:14,818
it and it will improve your scalability

411
00:27:14,994 --> 00:27:19,782
when dealing with webhooks. And finally monitoring.

412
00:27:19,846 --> 00:27:23,914
So if you don't monitor your webhooks, you will never

413
00:27:24,112 --> 00:27:28,550
know the bot length of your webhooks infrastructure

414
00:27:28,630 --> 00:27:32,990
and setup. So monitoring will identify webbook

415
00:27:35,250 --> 00:27:39,006
scalability issues and you can

416
00:27:39,028 --> 00:27:43,378
use those metrics and logins to trace the response times,

417
00:27:43,464 --> 00:27:46,690
the errors and key performance metrics within

418
00:27:46,760 --> 00:27:49,986
your application. So those are the key things

419
00:27:50,168 --> 00:27:54,260
that you need to do to scale your application.

420
00:27:54,630 --> 00:27:58,662
But as I wind up this talk,

421
00:27:58,716 --> 00:28:02,534
as I wind up this talk, I have some items that I want

422
00:28:02,572 --> 00:28:07,186
to reiterate or just mention them one more time. So number one rule

423
00:28:07,218 --> 00:28:11,110
of thumbs when dealing with the book security is authenticate.

424
00:28:11,190 --> 00:28:14,746
Authenticate, that is, verify the source, verify the

425
00:28:14,768 --> 00:28:18,054
consumer and using the authentication

426
00:28:18,102 --> 00:28:21,982
method that we've mentioned before during

427
00:28:22,036 --> 00:28:26,222
this talk to verify the source and also

428
00:28:26,276 --> 00:28:29,742
the consumer. Number two is encrypt all

429
00:28:29,796 --> 00:28:32,686
data, okay, provide less data,

430
00:28:32,788 --> 00:28:36,594
encrypt all data if necessary. That will make

431
00:28:36,632 --> 00:28:40,274
it very easy for you to secure the data that

432
00:28:40,312 --> 00:28:44,066
is passing through to the client from

433
00:28:44,088 --> 00:28:47,954
the server side. And again, I will repeat

434
00:28:48,002 --> 00:28:53,410
this, use times time to prevent

435
00:28:53,570 --> 00:28:58,486
replay attack where attacker can replay

436
00:28:58,518 --> 00:29:01,850
the message so many times,

437
00:29:01,920 --> 00:29:05,766
okay? Provide sdks for the user

438
00:29:05,798 --> 00:29:09,850
so that they can know how to implement the webbook.

439
00:29:10,370 --> 00:29:14,266
Again, provide documentation, very good documentation

440
00:29:14,458 --> 00:29:19,066
and listing

441
00:29:19,098 --> 00:29:22,682
the best way to implement webbook security.

442
00:29:22,836 --> 00:29:27,134
That will help a lot when developers

443
00:29:27,182 --> 00:29:31,022
are trying to implement your webhooks. Perform logs.

444
00:29:31,086 --> 00:29:34,126
So webhooks are part of event driven architecture,

445
00:29:34,238 --> 00:29:37,654
okay. With this event, you should be able to

446
00:29:37,692 --> 00:29:41,430
trace a user through the system from account creation

447
00:29:43,050 --> 00:29:46,482
like the way you just do, from account creation to whatever, et cetera.

448
00:29:46,546 --> 00:29:49,778
The same thing should happen with webhooks.

449
00:29:49,874 --> 00:29:53,910
You should perform logging and tracing

450
00:29:54,250 --> 00:29:58,566
for webbooks and that will give you a clear picture of your

451
00:29:58,748 --> 00:30:02,042
webhooks. And finally, please provide webhook

452
00:30:02,106 --> 00:30:05,534
events id so that you can track which web book

453
00:30:05,652 --> 00:30:09,230
to a specific point in time and also the origin

454
00:30:09,300 --> 00:30:12,926
of that web book. Those were

455
00:30:12,948 --> 00:30:17,246
my party shots and I want to thank you. Santsana my name is

456
00:30:17,428 --> 00:30:20,170
Marvin Collins. My Twitter handle is at Marvin Collins.

