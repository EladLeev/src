1
00:00:26,610 --> 00:00:30,054
Hey, my name is Ryder and this presentation is called how to keep your

2
00:00:30,092 --> 00:00:33,366
startup's cloud secure when your security team is

3
00:00:33,468 --> 00:00:37,362
just you. So first and foremost youll can't

4
00:00:37,506 --> 00:00:41,462
realistically one person working on it isn't enough to keep your

5
00:00:41,516 --> 00:00:44,902
startup's cloud completely secure. But there are

6
00:00:44,956 --> 00:00:48,038
a couple things that we can do in order to make sure that we have

7
00:00:48,124 --> 00:00:51,738
the best possible security as we can do it. So we'll

8
00:00:51,754 --> 00:00:54,958
do our best in this presentation. I'm just going to

9
00:00:54,964 --> 00:00:59,274
do a quick about me who this is for the concept of DevOps engineers

10
00:00:59,322 --> 00:01:02,826
and DevOps as a job, your startup security landscape.

11
00:01:02,858 --> 00:01:06,570
So application security, infrastructure security and other as

12
00:01:06,580 --> 00:01:10,354
well as some best practices that I found and then concluding it all.

13
00:01:10,472 --> 00:01:13,666
So let's jump right into it. My name is Ryder Damon. I am a

14
00:01:13,688 --> 00:01:17,390
developer advocate at Indeni Cloudrail and before that I was a

15
00:01:17,400 --> 00:01:20,934
DevOps engineer for a number of different startups. Before that

16
00:01:20,972 --> 00:01:24,754
I was a web developer, and before that I actually came from a biomedical

17
00:01:24,802 --> 00:01:28,342
engineers background. So. But unusual, but a fun

18
00:01:28,396 --> 00:01:32,506
career path for sure. This presentation, who it's for,

19
00:01:32,608 --> 00:01:36,166
it's for me essentially. When I was first getting into DevOps,

20
00:01:36,358 --> 00:01:39,626
I'm designed the presentation as the things that I wish I

21
00:01:39,648 --> 00:01:43,178
knew. So if you're a DevOps engineer and you're not from a security

22
00:01:43,264 --> 00:01:46,766
background and you're at a scaling startup, things is the kind

23
00:01:46,788 --> 00:01:49,966
of presentation that is for you. No matter who you are.

24
00:01:49,988 --> 00:01:53,474
It's important to keep a growth mindset because in DevOps we're going to be

25
00:01:53,512 --> 00:01:57,634
learning new things every day. And I think that's pretty

26
00:01:57,672 --> 00:02:02,290
important. So let's first talk about DevOps.

27
00:02:02,630 --> 00:02:06,114
This is a list of things that I have been asked to do as a

28
00:02:06,152 --> 00:02:09,782
DevOps engineer. Now, a lot of these

29
00:02:09,836 --> 00:02:13,186
aren't what you would typically expect from a DevOps

30
00:02:13,218 --> 00:02:16,674
professional. For instance, catching an Uber with the company server

31
00:02:16,722 --> 00:02:20,686
in the trunk of the Uber. Not necessarily something you would expect of your DevOps

32
00:02:20,738 --> 00:02:24,394
team. But what I'm trying to get across here is that it's a

33
00:02:24,432 --> 00:02:28,794
lot. So as DevOps engineers, we're going to be asked to do a

34
00:02:28,832 --> 00:02:31,966
number of different things, and some of

35
00:02:31,988 --> 00:02:35,342
that involves security. Now, you might be

36
00:02:35,396 --> 00:02:38,558
from a security background, but I am not.

37
00:02:38,724 --> 00:02:42,494
And that's okay. I know to keep my ports closed and

38
00:02:42,532 --> 00:02:46,354
I know to limit blast radius. But when it comes to application security

39
00:02:46,472 --> 00:02:49,998
or infrastructure security, I am not an expert.

40
00:02:50,094 --> 00:02:53,442
I'm an expert at building pipelines. I'm an expert at building

41
00:02:53,496 --> 00:02:57,814
infrastructure. But the security part of it, not so much. And that's okay.

42
00:02:58,012 --> 00:03:02,230
So let's talk about the security landscape at your startup.

43
00:03:02,810 --> 00:03:07,198
First and foremost, I like to split it into three specific categories,

44
00:03:07,394 --> 00:03:11,514
application security, infrastructure security and other.

45
00:03:11,712 --> 00:03:15,434
So starting with application security, it's pretty much everything around your

46
00:03:15,472 --> 00:03:18,746
application. So making sure your source code is

47
00:03:18,768 --> 00:03:22,334
secure, making sure you're free of OASP top ten

48
00:03:22,372 --> 00:03:25,520
vulnerabilities. Do you have any

49
00:03:25,890 --> 00:03:30,906
unsanitized inputs? Are you vulnerable to SQL injection cross

50
00:03:30,938 --> 00:03:34,242
site scripting? Is that a problem? Also application

51
00:03:34,376 --> 00:03:38,114
composition. So what packages are you bringing into your application?

52
00:03:38,312 --> 00:03:41,474
Are you using a Python package that hasn't been

53
00:03:41,512 --> 00:03:45,090
updated since 2008? Things like these are

54
00:03:45,160 --> 00:03:49,462
quite a problem. And this is what I would consider to be application level

55
00:03:49,516 --> 00:03:53,366
security. Also, penetration testing. You've probably got

56
00:03:53,388 --> 00:03:56,674
can annual penetration test at your company, and if you don't,

57
00:03:56,722 --> 00:03:59,542
I highly encourage that you start one.

58
00:03:59,676 --> 00:04:03,354
It can be a difficult sell at first because they'll be anywhere from

59
00:04:03,392 --> 00:04:07,594
about $7000 to $50,000 on the upper end.

60
00:04:07,792 --> 00:04:11,550
But really the data that it provides and the things that they find

61
00:04:11,700 --> 00:04:16,110
are very valuable. So for

62
00:04:16,180 --> 00:04:19,518
application security, as a DevOps engineer, you're not really going

63
00:04:19,524 --> 00:04:22,974
to have the time to sit down and do your own

64
00:04:23,092 --> 00:04:26,818
penetration tests of the application. You're not going

65
00:04:26,824 --> 00:04:30,578
to have time to do that. Realistically, at a startup that's growing really, really fast,

66
00:04:30,664 --> 00:04:33,874
you won't have the time. So what I recommend is implementing tools like

67
00:04:33,912 --> 00:04:37,458
these, which are going to be a part of your deployment pipeline and are going

68
00:04:37,464 --> 00:04:40,694
to help you identify issues and shift those issues,

69
00:04:40,812 --> 00:04:44,262
who has to fix them over to the developer that created them?

70
00:04:44,396 --> 00:04:48,242
So first, GitHub has a number of different tools to help you catch

71
00:04:48,306 --> 00:04:52,054
any package security vulnerabilities, and SNCC has that too.

72
00:04:52,092 --> 00:04:55,414
I think it's SNCC. It could be Snyke. I'm not really sure. It's like Nginx

73
00:04:55,462 --> 00:04:58,666
all over again. So if someone knows, please let me know. But both

74
00:04:58,688 --> 00:05:01,342
of those tools, what they're going to do is they're going to allow you to

75
00:05:01,476 --> 00:05:05,600
identify any vulnerable packages that you're bringing into youll application

76
00:05:06,130 --> 00:05:09,840
so that you can fix them right away, even before you deploy them.

77
00:05:10,450 --> 00:05:13,902
OASP Z or OASP zap Z attack

78
00:05:13,956 --> 00:05:18,174
proxy. What that's going to do is identify any OASP

79
00:05:18,222 --> 00:05:21,842
top ten or any issues with your application.

80
00:05:21,976 --> 00:05:25,738
So it's web application testing, and that's a great thing to have in your pipeline

81
00:05:25,854 --> 00:05:29,078
as well. So for application security,

82
00:05:29,244 --> 00:05:33,266
you're going to want to implement the tools into your deployment pipeline.

83
00:05:33,458 --> 00:05:37,346
And if you're joining a startup as a DevOps engineer chances

84
00:05:37,378 --> 00:05:40,326
are you're not one of the first hires. So when you get there, there's going

85
00:05:40,348 --> 00:05:44,134
to be some legacy code and there's going to be a ton of technical

86
00:05:44,182 --> 00:05:47,866
debt. So when you first turn on these tools, do not be surprised when

87
00:05:47,888 --> 00:05:51,354
you see hundreds, sometimes thousands of different things

88
00:05:51,392 --> 00:05:53,950
that are raised. That's pretty normal.

89
00:05:54,290 --> 00:05:57,626
Incorporate it into your pipeline anyway. But don't fail

90
00:05:57,658 --> 00:06:01,498
the pipeline just yet. Don't allow any of these tools to fail your pipeline.

91
00:06:01,674 --> 00:06:05,134
Get them in there, get the visibility, start surfacing this

92
00:06:05,172 --> 00:06:08,386
to other members of the team that there are problems and that we need to

93
00:06:08,408 --> 00:06:11,714
fix them. Set a deadline for when you want this all

94
00:06:11,752 --> 00:06:15,140
to be fixed. And on that deadline, fail the pipeline no matter what.

95
00:06:15,830 --> 00:06:19,494
So how do we fix all these issues? We've turned all of things on.

96
00:06:19,612 --> 00:06:23,142
How do we fix these issues? You've got to set aside time

97
00:06:23,196 --> 00:06:26,742
in your sprint and I would recommend creating an ad hoc team.

98
00:06:26,876 --> 00:06:30,038
So the first thing I like to do is grab the most senior member of

99
00:06:30,044 --> 00:06:32,714
the engineering team for half a day,

100
00:06:32,912 --> 00:06:37,050
look through all of the issues and triage them. Which ones are actually problems,

101
00:06:37,200 --> 00:06:41,302
which ones are part of services that are no longer even used? Is GitHub

102
00:06:41,446 --> 00:06:45,070
reporting on something that we don't even use anymore?

103
00:06:45,490 --> 00:06:48,734
Figure those things out, then figure out how much

104
00:06:48,772 --> 00:06:52,142
you think it's going to take in order for just you to fix it and

105
00:06:52,196 --> 00:06:55,474
double that estimation. Maybe it'll take you a week to fix these problems.

106
00:06:55,592 --> 00:06:59,454
Double it. Because if you've not had familiarity

107
00:06:59,502 --> 00:07:02,754
with this, when you go in and you start fixing these issues,

108
00:07:02,872 --> 00:07:06,590
you will fix one vulnerability and five new more will come up.

109
00:07:06,680 --> 00:07:10,194
Or the package that you've just upgraded is no longer compatible

110
00:07:10,242 --> 00:07:13,510
with these four packages. It's a nightmare.

111
00:07:14,250 --> 00:07:17,554
Ideally you'll want to involve some other engineers. So front end engineers,

112
00:07:17,602 --> 00:07:21,382
back end engineers in your ad hoc team for fixing these issues,

113
00:07:21,436 --> 00:07:24,358
you don't want to do it just by yourself, but you may have a tough

114
00:07:24,374 --> 00:07:27,882
time convincing management to convince these or to

115
00:07:27,936 --> 00:07:31,398
allow these people to work on something that isn't building a new feature.

116
00:07:31,574 --> 00:07:35,086
And that's pretty common at a startup, and that's okay. So what I would

117
00:07:35,108 --> 00:07:38,510
recommend if you're facing pushback from there is don't try and pull

118
00:07:38,580 --> 00:07:42,286
everyone for a full week. Don't try and get the engineering team to

119
00:07:42,308 --> 00:07:45,762
focus on it for a full week. See if you can pull people day by

120
00:07:45,816 --> 00:07:49,522
day and work on the vulnerabilities that

121
00:07:49,576 --> 00:07:53,090
were maybe introduced by them or by someone on their team.

122
00:07:53,160 --> 00:07:56,738
Something that has to do with that team's context. If it's a

123
00:07:56,744 --> 00:08:00,198
day, it's a lot easier of a cell to pair program with them,

124
00:08:00,284 --> 00:08:02,920
and then you can fix all the rest of it by yourself.

125
00:08:03,370 --> 00:08:05,800
So let's talk about infrastructure security.

126
00:08:06,810 --> 00:08:10,006
First of all, are you in a public cloud? If you're at a

127
00:08:10,028 --> 00:08:14,074
startup, chances are yes. And then the next question is, are you in

128
00:08:14,112 --> 00:08:17,782
one of the big three if you're in more of a developer centric

129
00:08:17,846 --> 00:08:20,006
cloud? So a smaller public cloud,

130
00:08:20,128 --> 00:08:24,154
it's less difficult to misconfigure

131
00:08:24,202 --> 00:08:27,930
things, but as soon as you get into like GCP, AWS,

132
00:08:28,010 --> 00:08:31,534
Azure, it becomes very, very easy to create an

133
00:08:31,572 --> 00:08:35,410
insecure environment completely by accident. And for this

134
00:08:35,480 --> 00:08:39,310
we would recommend cloud security posture management tools,

135
00:08:39,470 --> 00:08:42,466
sometimes abbreviated as CSPM. Now,

136
00:08:42,568 --> 00:08:46,022
cloud security posture management tool. What that's going to do is it's going

137
00:08:46,076 --> 00:08:49,606
to scan your public cloud, wherever it

138
00:08:49,628 --> 00:08:53,686
may be, and identify any vulnerabilities that are in it.

139
00:08:53,868 --> 00:08:57,526
It's going to let you define a policy and show you whether

140
00:08:57,548 --> 00:09:01,050
or not your cloud is adhering to that particular policy that

141
00:09:01,120 --> 00:09:05,338
you've defined. It's going to report anything that doesn't look exactly

142
00:09:05,424 --> 00:09:08,778
how it's supposed to be. So youll can go in and you can fix it.

143
00:09:08,864 --> 00:09:13,146
So maybe someone accidentally deployed a machine into the wrong subnet.

144
00:09:13,258 --> 00:09:17,322
It's going to report things like that. Next is implement

145
00:09:17,386 --> 00:09:21,422
infrastructure as code and configuration management. So if you've never

146
00:09:21,476 --> 00:09:24,718
worked with infrastructure as code before, I would highly recommend

147
00:09:24,884 --> 00:09:28,226
getting involved with it today. I resisted it for

148
00:09:28,408 --> 00:09:31,554
quite a bit of time because I was afraid of it.

149
00:09:31,752 --> 00:09:35,074
It seemed very overwhelming to get involved with, but I promise you,

150
00:09:35,112 --> 00:09:38,294
it's easier than you think, and it's a really

151
00:09:38,332 --> 00:09:42,258
great thing to get involved with. The infrastructure becomes repeatable

152
00:09:42,354 --> 00:09:45,606
and you're able to define things quite well. I'd recommend using a

153
00:09:45,628 --> 00:09:49,194
service like terraform. Now, the benefit of this is

154
00:09:49,232 --> 00:09:53,126
not just repeatable infrastructure and seeing all of your infrastructure

155
00:09:53,158 --> 00:09:56,394
as code and version control, it's not that, it's that you can

156
00:09:56,432 --> 00:10:00,082
actually incorporate infrastructure vulnerability scanning tools.

157
00:10:00,166 --> 00:10:03,566
So whereas a CSPM tool scans your cloud environments and

158
00:10:03,588 --> 00:10:07,194
reports any issues, those issues are already in production.

159
00:10:07,322 --> 00:10:10,714
An infrastructure vulnerability scanning tool identifies

160
00:10:10,762 --> 00:10:14,478
issues before they're going into production, so you're able to catch them

161
00:10:14,564 --> 00:10:18,420
before they become actual problems, which makes it a lot easier for you.

162
00:10:18,790 --> 00:10:22,354
Consider initial implementing. So how much work is this

163
00:10:22,392 --> 00:10:25,578
actually going to take for you to manage? Is it worth the investment

164
00:10:25,614 --> 00:10:29,058
of your time? Chances are yes, it is, but it's

165
00:10:29,074 --> 00:10:32,950
not going to be the case for everyone at your particular startup.

166
00:10:34,570 --> 00:10:38,994
So a couple cloud security posture management tools are orca security,

167
00:10:39,132 --> 00:10:42,486
cloud rail, Us or aqua. And these are tools

168
00:10:42,518 --> 00:10:45,750
that are able to scan your cloud environment and report anything that's

169
00:10:45,830 --> 00:10:49,926
going wrong in youll live cloud. So any misconfigurations,

170
00:10:50,038 --> 00:10:53,882
any vulnerabilities, things like that, some infrastructure as code

171
00:10:53,936 --> 00:10:57,550
security tools that will catch these things before they go into the cloud?

172
00:10:57,620 --> 00:11:01,306
Assuming you're using infrastructure as code, are TFSec cloud rail?

173
00:11:01,338 --> 00:11:04,590
Again, this is kind of our bread and butter and checkoff by bridge crew.

174
00:11:04,670 --> 00:11:07,570
So once again, use a CSPM tool,

175
00:11:07,720 --> 00:11:11,186
and if you're using infrastructure as code, use an

176
00:11:11,208 --> 00:11:13,860
infrastructure as code vulnerability scanning tool.

177
00:11:14,310 --> 00:11:17,662
Finally, we have other security. So other security

178
00:11:17,736 --> 00:11:21,062
is pretty much anything that's not application or infrastructure is

179
00:11:21,116 --> 00:11:24,694
how I like to consider it at a startup. If you've ever

180
00:11:24,732 --> 00:11:28,374
had the lovely pleasure of being involved with a SoC two

181
00:11:28,412 --> 00:11:32,186
audit, you'll be familiar with most of these concepts. So you

182
00:11:32,208 --> 00:11:36,166
might not have an IT team and youll might have employees

183
00:11:36,198 --> 00:11:39,434
who are using computers, and management might

184
00:11:39,472 --> 00:11:44,106
want those computers secure. So are you running an endpoint monitoring

185
00:11:44,138 --> 00:11:47,694
service that actually ensures that employees are

186
00:11:47,892 --> 00:11:51,514
encrypting their drives and they have firewalls running and malware

187
00:11:51,562 --> 00:11:54,798
services running? Once again, not necessarily something you would expect from

188
00:11:54,804 --> 00:11:58,194
youll DevOps team, but it's often something that gets handed off to us,

189
00:11:58,232 --> 00:12:01,906
so it's important to keep that in mind. Other types of

190
00:12:01,928 --> 00:12:05,234
security are other things that would generally be raised in a

191
00:12:05,272 --> 00:12:08,982
SoC two audit. So does your company

192
00:12:09,036 --> 00:12:12,360
have an office? Who has the keys for that office?

193
00:12:14,250 --> 00:12:16,840
Is there security? Sorry?

194
00:12:18,250 --> 00:12:20,780
Is there wifi security at the office?

195
00:12:21,550 --> 00:12:25,546
Does your company keep a production server on

196
00:12:25,568 --> 00:12:29,018
a desktop at the office? These are all

197
00:12:29,184 --> 00:12:33,114
important security questions to consider, and for this, I would recommend

198
00:12:33,232 --> 00:12:37,294
getting involved with some SoC security tools. So the first one collide is a

199
00:12:37,332 --> 00:12:40,810
device endpoint management tool. That is my favorite

200
00:12:40,970 --> 00:12:44,366
because it's kind of like a slack application.

201
00:12:44,468 --> 00:12:47,826
You put it in slack, and then whenever someone joins the

202
00:12:47,848 --> 00:12:51,826
company and sets up their device for the first time, it will continuously ping them

203
00:12:51,848 --> 00:12:55,806
on slack until they get everything set up properly. So if they're missing

204
00:12:55,838 --> 00:12:59,394
a firewall, it'll ping them every day until they finally do it. And that's normally

205
00:12:59,442 --> 00:13:02,360
something that's my job. So I quite like that.

206
00:13:02,810 --> 00:13:06,662
Vanta and Secureframe are tools that allow you to manage

207
00:13:06,716 --> 00:13:09,730
your SoC two audit and your compliance for that.

208
00:13:09,900 --> 00:13:13,386
And if you've ever used them, they're super helpful, not just

209
00:13:13,408 --> 00:13:16,954
around audit time, but in general. So they'll connect

210
00:13:17,072 --> 00:13:20,374
to your cloud providers and they'll go through and they'll scan

211
00:13:20,422 --> 00:13:24,110
much like a CSPM to make sure you have no major

212
00:13:24,180 --> 00:13:27,866
vulnerabilities. They're not quite going to do it to the extent as a CSPM

213
00:13:27,898 --> 00:13:32,766
tool, but they will raise things like do

214
00:13:32,788 --> 00:13:35,150
you not have any VPC flow logs,

215
00:13:35,890 --> 00:13:39,410
which is something that you'll need in case anything happens. So you'll want to

216
00:13:39,480 --> 00:13:42,654
consider those tools. They've also got agents that run on low level machines

217
00:13:42,702 --> 00:13:46,658
that report package vulnerabilities. They're very, very helpful and

218
00:13:46,744 --> 00:13:50,134
when it does come audit time, they allow your auditor to self

219
00:13:50,172 --> 00:13:53,686
service, which is quite helpful. So these are

220
00:13:53,708 --> 00:13:57,366
some recommended practices that I have found made my life easier and hopefully will

221
00:13:57,388 --> 00:14:00,762
make yours as well. First is bringing infrastructure down to its

222
00:14:00,816 --> 00:14:04,634
most simple version. It may be fun to use

223
00:14:04,672 --> 00:14:08,346
the latest and greatest. And you know what? It's also good

224
00:14:08,368 --> 00:14:11,786
for our careers to use the latest and greatest. It's good to say on your

225
00:14:11,808 --> 00:14:15,326
resume that you incorporated things, brand new service so that

226
00:14:15,348 --> 00:14:18,766
you can get a better job down the line. But it may not be the

227
00:14:18,788 --> 00:14:22,560
best for the company. So maybe consider implementing those services

228
00:14:24,210 --> 00:14:28,266
in a sandbox environment and reducing your company's

229
00:14:28,298 --> 00:14:31,546
production infrastructure to the simplest version.

230
00:14:31,738 --> 00:14:34,982
I would recommend doing that, but it's whatever works for you.

231
00:14:35,156 --> 00:14:38,806
Next is using managed services wherever possible. So say

232
00:14:38,828 --> 00:14:42,082
you're running a containerized workload in AWS.

233
00:14:42,146 --> 00:14:45,602
Try consider using AWS ECS Fargate

234
00:14:45,666 --> 00:14:49,890
instead of EC two backed ECS instances,

235
00:14:50,050 --> 00:14:53,594
you'll have less servers to manage. It may be a tad, but more

236
00:14:53,632 --> 00:14:57,190
expensive, but you won't be responsible for any of the security updates

237
00:14:57,270 --> 00:15:00,858
or dealing with any outages or anything. You ship the blame and

238
00:15:00,864 --> 00:15:04,494
the responsibility to AWS, and for me, that's worth a

239
00:15:04,532 --> 00:15:08,046
couple extra hundred dollars a month. Next is

240
00:15:08,068 --> 00:15:11,646
use infrastructure as code. As I mentioned, if you're not using it, get involved with

241
00:15:11,668 --> 00:15:15,518
it. It's much easier than you think to use and it's

242
00:15:15,534 --> 00:15:18,914
a great tool. Then recruit other members of your team for

243
00:15:18,952 --> 00:15:22,194
feedback. So they may not know what's going

244
00:15:22,232 --> 00:15:26,226
on with terraform files, or they may not understand the

245
00:15:26,248 --> 00:15:29,394
cloud environment as well as you do, but they often have valuable

246
00:15:29,442 --> 00:15:33,270
feedback and the more people you can get involved in the security review process,

247
00:15:33,340 --> 00:15:36,934
the better. And finally shift left. And I don't mean this

248
00:15:36,972 --> 00:15:40,982
in the traditional sense, I mean it as shift some of the responsibilities

249
00:15:41,046 --> 00:15:45,034
of security onto the other engineers, particularly application

250
00:15:45,152 --> 00:15:49,286
security. So it is a full stacks

251
00:15:49,318 --> 00:15:52,610
engineer's job to ensure that the code that they're writing

252
00:15:52,710 --> 00:15:56,634
is free of vulnerabilities and the package that they're bringing in has been updated

253
00:15:56,682 --> 00:16:00,218
since 2008. It is your responsibility,

254
00:16:00,314 --> 00:16:04,494
though, to ensure that the deployment pipelines you're building are catching these things in

255
00:16:04,532 --> 00:16:07,346
case that particular developer forgets this.

256
00:16:07,448 --> 00:16:11,106
So shift some of those responsibilities for them, and do that

257
00:16:11,128 --> 00:16:14,670
by ensuring that you have checks in your deployment pipeline that fail the pipeline,

258
00:16:14,750 --> 00:16:18,760
and don't let that particular engineer deploy until they fix their issues.

259
00:16:19,290 --> 00:16:22,790
So, in conclusion, simplify everything. Use managed services

260
00:16:22,860 --> 00:16:26,518
wherever possible, use infrastructure as code, implement application

261
00:16:26,604 --> 00:16:29,942
security tools in your pipeline implement infrastructure security

262
00:16:29,996 --> 00:16:33,462
tools in your pipeline and involve as many other people in the security process

263
00:16:33,516 --> 00:16:37,302
as possible. And finally, continuously demonstrate to managed that

264
00:16:37,436 --> 00:16:40,910
more people in this role is valuable. Ah,

265
00:16:41,060 --> 00:16:44,318
that's it for me. If you have any questions, you can reach out to

266
00:16:44,324 --> 00:16:47,886
me on any of the links below, and I thank you

267
00:16:47,908 --> 00:16:49,420
for your time. See you later.

