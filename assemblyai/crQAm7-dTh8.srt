1
00:00:26,610 --> 00:00:29,926
Hi everyone, I'm happy to be here today. I'm Shai, I'm the

2
00:00:29,948 --> 00:00:33,174
CTO of lifecycle and today I'm going to talk about self

3
00:00:33,212 --> 00:00:37,238
contained development environment. I'm going to start to stop

4
00:00:37,324 --> 00:00:40,918
this presentation by sharing can experienced ed a

5
00:00:40,924 --> 00:00:44,962
few years ago. So back then I worked at a company called Soluto

6
00:00:45,026 --> 00:00:48,790
and I led the development of an open source solution for

7
00:00:48,860 --> 00:00:51,150
feature flagging and mode configuration.

8
00:00:51,890 --> 00:00:55,694
Since the solution was an open source solution, we wanted

9
00:00:55,812 --> 00:00:59,422
other developers in the company to contribute their code to it and

10
00:00:59,556 --> 00:01:02,910
make it better and add their own features.

11
00:01:04,130 --> 00:01:07,870
In order to encourage them, we've organized a company

12
00:01:07,940 --> 00:01:11,514
wide Akaton and because the project was called Tweak,

13
00:01:11,642 --> 00:01:15,670
we called it a tweakathon and the

14
00:01:15,820 --> 00:01:19,126
team has super excited. We created like an

15
00:01:19,148 --> 00:01:22,290
organized backlog. We added some documentation in rough

16
00:01:22,370 --> 00:01:26,150
areas, we print some shirts and

17
00:01:26,220 --> 00:01:30,074
have like swag of tweak and well

18
00:01:30,192 --> 00:01:33,994
the event started and well

19
00:01:34,032 --> 00:01:37,914
at the end it didn't work that well. The problem was that most

20
00:01:37,952 --> 00:01:41,630
developers in the company were struggling to run

21
00:01:41,780 --> 00:01:45,306
and build and run the project. I mean the bootstrapping

22
00:01:45,338 --> 00:01:48,686
was so difficult and many of

23
00:01:48,708 --> 00:01:52,558
them didn't even get to the part that they are starting to develop

24
00:01:52,644 --> 00:01:56,162
features. They just trying to make everything like work

25
00:01:56,216 --> 00:01:59,826
together. The project was complex and the tweak team

26
00:01:59,928 --> 00:02:04,210
has going from one station to other station and helping developers

27
00:02:05,130 --> 00:02:08,850
install missing dependencies or having the right configuration.

28
00:02:09,010 --> 00:02:12,102
And at the end we add some

29
00:02:12,156 --> 00:02:15,782
few features that were added but the experience

30
00:02:15,836 --> 00:02:18,620
for most developers wasn't that good.

31
00:02:19,230 --> 00:02:23,402
And to put it simply, the onboarding was way too

32
00:02:23,456 --> 00:02:27,434
difficult for Can Akiton. And that's the

33
00:02:27,472 --> 00:02:30,874
topic I'm going to talk about today, how we can make it much

34
00:02:30,912 --> 00:02:33,930
more easier to run

35
00:02:34,000 --> 00:02:37,406
a project and do the onboarding and make sure

36
00:02:37,428 --> 00:02:41,502
that developers always have great experience when

37
00:02:41,556 --> 00:02:44,986
working on this project, new and old

38
00:02:45,028 --> 00:02:52,146
developers alike. Before we

39
00:02:52,168 --> 00:02:56,034
start to deep dive into this session, I'll tell

40
00:02:56,152 --> 00:02:59,426
a bit about myself. I'm shy. I'm the CEO and co founder

41
00:02:59,458 --> 00:03:03,302
of Livecycle. I'm a full stack developer. I'm passionate about cloud

42
00:03:03,356 --> 00:03:06,802
development, backend architecture, functional programming.

43
00:03:06,866 --> 00:03:10,534
I am the creator and maintainer of Twik can open source cloud native

44
00:03:10,582 --> 00:03:13,866
feature management solution that I mentioned and I really care

45
00:03:13,888 --> 00:03:17,260
about simplicity, consistency and elegance in code.

46
00:03:18,750 --> 00:03:22,026
About lifecycle. We are building the next generation

47
00:03:22,058 --> 00:03:25,614
of collaboration tools for development teams. It's based

48
00:03:25,652 --> 00:03:29,486
on the idea of consuming playground environment and it

49
00:03:29,508 --> 00:03:33,046
designed to bridge the gap between coders and non coders

50
00:03:33,178 --> 00:03:36,962
and you are more than welcome to check it out. You can try it on

51
00:03:37,016 --> 00:03:39,730
lifecycle IO.

52
00:03:41,190 --> 00:03:44,674
So let's start by describing how does it

53
00:03:44,712 --> 00:03:48,146
feel like when we start working on a new complex

54
00:03:48,258 --> 00:03:51,654
code base. So first

55
00:03:51,692 --> 00:03:55,014
of all, we are trying to build and run it, but in many

56
00:03:55,052 --> 00:03:58,214
cases we don't have the right operation system or we have

57
00:03:58,252 --> 00:04:00,854
missing or conflicting SDK or programming language.

58
00:04:00,902 --> 00:04:04,506
Randoms can be like Python two or Python three. For example,

59
00:04:04,688 --> 00:04:08,806
we have package managers that throw, let's say random errors.

60
00:04:08,918 --> 00:04:12,254
I mean, they're not necessarily random, but they certainly feel that

61
00:04:12,292 --> 00:04:15,040
way. And then,

62
00:04:15,410 --> 00:04:18,830
well, we thought that it didn't work that well.

63
00:04:18,900 --> 00:04:22,142
We are trying to read the readme and then

64
00:04:22,196 --> 00:04:26,430
in the readme it said that we need to run some magic scapes,

65
00:04:26,510 --> 00:04:30,494
maybe change the OS file. If it's like a really complex

66
00:04:30,542 --> 00:04:34,094
project, we need to install tools and dependencies on the environment,

67
00:04:34,142 --> 00:04:36,680
such as databases or something like that.

68
00:04:37,210 --> 00:04:40,440
Maybe install root ca.

69
00:04:41,610 --> 00:04:45,414
I hope you don't have this problem, but if it's, I mean, that's certainly not

70
00:04:45,452 --> 00:04:48,966
fun. Okay, we build it and

71
00:04:48,988 --> 00:04:52,330
we run it, but now we try to develop and in many

72
00:04:52,400 --> 00:04:56,234
cases the debugging doesn't work, the id doesn't have

73
00:04:56,272 --> 00:04:59,802
problem like attaching. In many cases we have problem

74
00:04:59,856 --> 00:05:03,594
with photocomplete or dependencies code.

75
00:05:03,632 --> 00:05:07,438
Watch and build doesn't work and we need to install like watch. No other tool

76
00:05:07,524 --> 00:05:10,734
for better watching. Automodel reloading, if we are working

77
00:05:10,772 --> 00:05:14,622
on a front end app, doesn't work because of, I don't know, websocket issues

78
00:05:14,676 --> 00:05:17,878
or something, problem with external dependencies,

79
00:05:17,914 --> 00:05:20,180
of course, you name it.

80
00:05:20,870 --> 00:05:25,162
And that's not the worst. Then we get to integration

81
00:05:25,246 --> 00:05:29,254
test, which in many cases simply just are

82
00:05:29,292 --> 00:05:33,174
not running, especially if you have something

83
00:05:33,212 --> 00:05:36,614
that depends on web driver test or

84
00:05:36,652 --> 00:05:40,266
UI test. So it can be difficult.

85
00:05:40,368 --> 00:05:44,454
And the worst thing about it is that all this setup

86
00:05:44,502 --> 00:05:48,154
and we need to do it over and over again after

87
00:05:48,192 --> 00:05:51,738
a few months. If we started to work on a different project,

88
00:05:51,824 --> 00:05:55,150
if we come back to the project, there's a good chance

89
00:05:55,220 --> 00:05:58,430
that we need to do this all setup again. Maybe because

90
00:05:58,500 --> 00:06:02,618
the project got updated, or maybe we installed other dependencies that

91
00:06:02,644 --> 00:06:06,740
are conflicting. And that's definitely not fun.

92
00:06:07,590 --> 00:06:11,026
So why is it so difficult? So I mentioned some of the

93
00:06:11,048 --> 00:06:15,522
problem, but it can be like we have lots of fragmentation in operation,

94
00:06:15,586 --> 00:06:20,214
system in sdks, in runtimes. In many case it

95
00:06:20,252 --> 00:06:23,430
work on my machine and I don't worry about it anymore.

96
00:06:23,770 --> 00:06:27,826
I will prefer replace

97
00:06:27,858 --> 00:06:31,394
machine only if my machine got burned or something. I mean,

98
00:06:31,452 --> 00:06:34,986
it's work, I'm not touching it and that's the problem. When we're trying to

99
00:06:35,008 --> 00:06:38,522
set up like a new machine, there is a vast amount of different

100
00:06:38,576 --> 00:06:42,234
tool chains, ide extensions. Our development

101
00:06:42,282 --> 00:06:46,094
workflows today are much more difficult to set up and they can break

102
00:06:46,212 --> 00:06:49,230
like debugging, watching, building, got, reloading,

103
00:06:49,570 --> 00:06:53,154
maybe mounts. We are not just doing like build and run

104
00:06:53,192 --> 00:06:56,846
anymore. We want to have good tooling.

105
00:06:57,038 --> 00:07:00,354
The developer machines are also polluted and

106
00:07:00,392 --> 00:07:04,194
overloaded with tools. And besides that

107
00:07:04,392 --> 00:07:08,322
environment and tools tend to change rapidly in active repositories.

108
00:07:08,466 --> 00:07:12,406
And so at the end we have lots of frustration and

109
00:07:12,428 --> 00:07:16,246
we waste tons of time. So how can

110
00:07:16,268 --> 00:07:19,718
we make it better? So what's the dream? So the way I

111
00:07:19,724 --> 00:07:23,430
see it, the dream is developing environments that are consistent.

112
00:07:23,510 --> 00:07:25,900
We have the same predictable experience.

113
00:07:26,350 --> 00:07:29,926
They are reproducible, so I can destroy and rebuild them. I don't

114
00:07:29,958 --> 00:07:32,800
need to care about that. I managed to make it working.

115
00:07:33,570 --> 00:07:37,534
They are isolated, so they are not get affected by

116
00:07:37,572 --> 00:07:41,422
other development environments that I want by other

117
00:07:41,476 --> 00:07:45,662
project that I'm working on. They are self containers.

118
00:07:45,726 --> 00:07:49,234
So all the dependencies and tools that needed for development are

119
00:07:49,272 --> 00:07:52,386
defined and packaged inside the environment can be

120
00:07:52,408 --> 00:07:56,040
like a database or an SDK or something like that.

121
00:07:58,570 --> 00:08:02,040
So if lots of this stuff sound

122
00:08:02,970 --> 00:08:06,166
familiar to you is because

123
00:08:06,268 --> 00:08:10,280
lots of this stuff has been said about containers and

124
00:08:10,730 --> 00:08:15,020
lots of, I mean these properties that I mentioned and

125
00:08:15,870 --> 00:08:19,498
two and a half years ago, years ago vs code

126
00:08:19,584 --> 00:08:23,034
released a really amazing feature in my opinion

127
00:08:23,162 --> 00:08:26,558
that allow you to work on the vs code is

128
00:08:26,564 --> 00:08:30,190
one of the most popular id. I'm sure most of you are probably

129
00:08:30,260 --> 00:08:32,590
using it according to surveys,

130
00:08:33,350 --> 00:08:36,914
but they introduced a new amazing feature that

131
00:08:36,952 --> 00:08:40,402
allow us to have our own local

132
00:08:40,536 --> 00:08:43,394
ide running on our computer.

133
00:08:43,592 --> 00:08:47,494
But the environment itself is

134
00:08:47,532 --> 00:08:51,142
running set a container. So in terms of experience we

135
00:08:51,196 --> 00:08:55,000
still have the native UI that is running. It's not like a

136
00:08:56,330 --> 00:09:00,234
full remote solution, but the vs code instead.

137
00:09:00,352 --> 00:09:03,706
Like all the extensions and the language server and the

138
00:09:03,728 --> 00:09:07,402
debugging and the terminal and everything is running inside the container and not

139
00:09:07,456 --> 00:09:11,066
inside our local installation of vs

140
00:09:11,098 --> 00:09:14,654
code inside our host machine. So this allow

141
00:09:14,692 --> 00:09:18,574
us to have a great developer experience in

142
00:09:18,612 --> 00:09:22,554
a very well defined instant, instant selfcontained

143
00:09:22,602 --> 00:09:25,794
development environments. Going to show a demo.

144
00:09:25,912 --> 00:09:29,426
How does it look like? All the examples and

145
00:09:29,448 --> 00:09:33,346
slides are available on GitHub. All the tools using this position are

146
00:09:33,368 --> 00:09:37,346
open source and free to use project. I'm not selling anything. Most examples

147
00:09:37,378 --> 00:09:40,754
here I will say that they are not bulletproof

148
00:09:40,802 --> 00:09:44,246
completely and they are using some tools that can be

149
00:09:44,268 --> 00:09:47,734
considered experimental, but they work and they work well.

150
00:09:47,772 --> 00:09:49,580
You can easily reproduce them.

151
00:09:50,830 --> 00:09:54,362
And in this example I'm going to go through several projects and show

152
00:09:54,416 --> 00:09:58,362
how we can use this amazing new feature and

153
00:09:58,496 --> 00:10:02,000
how we can configure our projects better to have this kind of experience.

154
00:10:02,610 --> 00:10:06,730
So I'll try with a simple example that's

155
00:10:06,810 --> 00:10:10,606
a CLI tool that take an image and turn it

156
00:10:10,708 --> 00:10:14,186
into can ascii out. It's an open source

157
00:10:14,218 --> 00:10:17,506
project. The project is written in go, it's written in

158
00:10:17,528 --> 00:10:20,206
can old version of go before we had go models.

159
00:10:20,318 --> 00:10:24,210
So it requires some tweaking to make it work if I was running

160
00:10:24,280 --> 00:10:29,174
it locally. So let's open our id and

161
00:10:29,292 --> 00:10:32,966
this is a regular vs code, but you

162
00:10:32,988 --> 00:10:36,534
can see that it's working. We see on the game light

163
00:10:36,572 --> 00:10:40,730
that it's written like dev container go and

164
00:10:40,800 --> 00:10:44,154
what does it mean? So to showcase it,

165
00:10:44,192 --> 00:10:48,026
if I go and take an open terminal here and

166
00:10:48,128 --> 00:10:51,020
see if I have like the go cli or tool,

167
00:10:51,630 --> 00:10:55,070
we see that I don't have them. They are not installed on my computer,

168
00:10:55,220 --> 00:10:59,770
but here I have them. Why? Because this terminal

169
00:10:59,930 --> 00:11:03,746
is not running directly on my OS machine, it's running inside a

170
00:11:03,768 --> 00:11:07,138
dev container. But I still have the same experience

171
00:11:07,224 --> 00:11:09,780
of a regular terminal, which is amazing.

172
00:11:10,630 --> 00:11:14,690
And it's not just a terminal, it's like everything in the editor.

173
00:11:15,430 --> 00:11:18,886
So how does this magic happens? Simply we

174
00:11:18,908 --> 00:11:22,482
have a dev container folder with a dev container JsON file

175
00:11:22,626 --> 00:11:26,162
here we define what we want to have the configuration

176
00:11:26,226 --> 00:11:28,490
for this development container.

177
00:11:30,030 --> 00:11:33,420
We can define what the docker file that is used to build

178
00:11:33,950 --> 00:11:37,722
this environment. We can say some

179
00:11:37,776 --> 00:11:41,886
settings for plugins. For example I define some settings for the

180
00:11:42,068 --> 00:11:45,678
Go extension. I also can define what extension in

181
00:11:45,684 --> 00:11:49,022
the id I want. So in this case the

182
00:11:49,076 --> 00:11:52,446
dev container have dedicated extension of

183
00:11:52,468 --> 00:11:56,610
vs code. Then it doesn't have my old array of extension and

184
00:11:56,680 --> 00:12:00,786
I have other stuff that I'm doing. Because this project is

185
00:12:00,808 --> 00:12:05,140
an old project, I need to do like a sim link between the folder and

186
00:12:06,150 --> 00:12:10,226
the working folder and go lang path

187
00:12:10,258 --> 00:12:13,298
convention that they are using the past for models.

188
00:12:13,474 --> 00:12:16,694
But the good thing is that I don't need to worry about it because it

189
00:12:16,732 --> 00:12:19,894
was done for me. So if I look

190
00:12:19,932 --> 00:12:23,354
here on the docker file that is used to build a container, we can see

191
00:12:23,392 --> 00:12:27,114
that I'm using a base Ubuntu image. I'm installing Go,

192
00:12:27,232 --> 00:12:30,880
I'm setting an environment variable to not use go model.

193
00:12:31,970 --> 00:12:35,866
I'm installing other tools

194
00:12:36,058 --> 00:12:40,218
that are relevant for Go, such as Dep. It's like can all dependency management

195
00:12:40,314 --> 00:12:42,560
manager that this project use?

196
00:12:44,450 --> 00:12:48,398
I'm using the Zash shell and I'm installing

197
00:12:48,494 --> 00:12:53,170
plugins for the shell. So if I'm going to use like git.

198
00:12:55,930 --> 00:13:00,022
So we can see that we have like autocomplete for git and also for

199
00:13:00,156 --> 00:13:04,200
go because here we define the plugin of git and go.

200
00:13:05,770 --> 00:13:08,854
Amazing. So let's try to run this project.

201
00:13:08,972 --> 00:13:12,294
I'm going to do like go run images key

202
00:13:12,332 --> 00:13:16,198
go and we can see that it

203
00:13:16,364 --> 00:13:20,138
needs to have like a file using the f flag.

204
00:13:20,274 --> 00:13:24,190
And I'm going to try to run this file

205
00:13:27,890 --> 00:13:31,790
and it won't work because it's like a URL and this project doesn't support

206
00:13:31,860 --> 00:13:36,100
it. If I go to the code we can see what we need to add

207
00:13:37,110 --> 00:13:40,686
for supporting URL. Basically it's

208
00:13:40,718 --> 00:13:44,254
like adding the kind of logic here in the open image file

209
00:13:44,302 --> 00:13:48,834
you can see first of all that I have like full autocomplete highlighting.

210
00:13:48,962 --> 00:13:52,066
I mean everything just works. And I'm

211
00:13:52,098 --> 00:13:55,634
going to check out our branch

212
00:13:55,682 --> 00:13:59,206
that I have this implementation. We can see that I have everything

213
00:13:59,308 --> 00:14:03,402
from the self control perspective, everything simply just

214
00:14:03,456 --> 00:14:06,746
walk inside this dev containers. And again, everyone that

215
00:14:06,768 --> 00:14:10,526
will open this project is going to have the same experience I'm

216
00:14:10,548 --> 00:14:14,000
having now. No need to do any setup at all.

217
00:14:14,850 --> 00:14:18,334
Okay, so I

218
00:14:18,372 --> 00:14:21,726
did check the branch and we can see

219
00:14:21,748 --> 00:14:26,322
that in the new branch we have code

220
00:14:26,376 --> 00:14:30,770
that download the image. If it starts with HTTPs or HTTP,

221
00:14:31,430 --> 00:14:34,866
let's try it. Okay, so that's like

222
00:14:34,888 --> 00:14:38,440
my profile image in Afkart. Let's have the

223
00:14:39,050 --> 00:14:42,854
python logo or

224
00:14:42,892 --> 00:14:45,990
docker. And again it was very simple

225
00:14:46,060 --> 00:14:50,554
and if I didn't have the dev container I can waste hours

226
00:14:50,672 --> 00:14:54,246
making it work and have a good developer

227
00:14:54,278 --> 00:14:57,754
experience. You can see also that we have some

228
00:14:57,792 --> 00:15:02,238
errors here. Basically if I was trying to run the test,

229
00:15:02,404 --> 00:15:06,000
they would fail because they are missing dependencies in the project.

230
00:15:06,450 --> 00:15:10,506
And if I'm going to run the dependency manager

231
00:15:10,538 --> 00:15:14,306
here that is also installed inside the dev container, I'm going to run

232
00:15:14,328 --> 00:15:16,850
the test and everything work properly.

233
00:15:17,750 --> 00:15:21,140
And I'm not sure why it's still red,

234
00:15:22,710 --> 00:15:24,530
it's like missing.

235
00:15:28,890 --> 00:15:32,582
So after the insertion it actually should work

236
00:15:32,636 --> 00:15:36,280
properly. Maybe I'll just do go build.

237
00:15:43,040 --> 00:15:47,036
But you can see that the tests are working and the

238
00:15:47,058 --> 00:15:50,524
application is running. I think that the mock dependency for some

239
00:15:50,562 --> 00:15:54,604
reason vs code didn't identify it, that it

240
00:15:54,642 --> 00:15:58,224
was fixed. But if I reload the id it will

241
00:15:58,262 --> 00:16:01,792
probably work. Okay, so that was the first

242
00:16:01,846 --> 00:16:06,050
example and I wanted to take notice on what we saw here.

243
00:16:06,680 --> 00:16:10,228
First of all we saw that

244
00:16:10,394 --> 00:16:13,060
we are running inside a development container.

245
00:16:14,280 --> 00:16:17,712
So the development container has integration with the SCM.

246
00:16:17,776 --> 00:16:21,108
That's where I can do like git commands and check out a different branch.

247
00:16:21,204 --> 00:16:24,856
We have remote code editing so I can edit directly and

248
00:16:24,878 --> 00:16:28,360
we have a remote terminal. In addition we

249
00:16:28,430 --> 00:16:31,916
saw some configuration of the environment. So we set out the

250
00:16:31,938 --> 00:16:35,432
runtime, we set environment variable and path. We configured

251
00:16:35,496 --> 00:16:38,990
our shell and we define extension for vs code to use.

252
00:16:42,040 --> 00:16:45,110
Okay, let's continue to our next example.

253
00:16:46,280 --> 00:16:50,196
And it's a Python application. So again it's a Python conference,

254
00:16:50,228 --> 00:16:53,336
so it kind of makes sense. Here we have a

255
00:16:53,358 --> 00:16:56,904
simple flex application to send email based on sendgate example.

256
00:16:57,022 --> 00:17:01,064
I mean a simple flex application to send email. It is based on the

257
00:17:01,102 --> 00:17:04,524
send git example. So again all

258
00:17:04,562 --> 00:17:08,028
these projects are open source, you can try them. We have a

259
00:17:08,034 --> 00:17:12,000
new challenges. We need to run and interact with a server.

260
00:17:12,820 --> 00:17:16,444
We need to manage secrets such as the flask

261
00:17:16,572 --> 00:17:20,336
secret, the sanguine secret, and we

262
00:17:20,358 --> 00:17:22,770
need to have a good debugging experience.

263
00:17:23,800 --> 00:17:25,990
So let's try that.

264
00:17:27,560 --> 00:17:31,248
That is the product of my Python

265
00:17:31,344 --> 00:17:34,896
project, the simple email sender example. We can see the dev container

266
00:17:34,928 --> 00:17:38,424
here. Here for example, I won't have like go or

267
00:17:38,462 --> 00:17:42,520
node or the other stuff I had in the previous dev container.

268
00:17:42,860 --> 00:17:47,850
I just have like a Python 3.9.

269
00:17:48,220 --> 00:17:52,350
Here in the dev container we can see the definition, we can see the

270
00:17:52,720 --> 00:17:56,584
settings that I want to add to the Python

271
00:17:56,632 --> 00:17:59,230
extension, the extension I want to use.

272
00:18:01,060 --> 00:18:07,344
And I'm going to show the

273
00:18:07,382 --> 00:18:11,840
Docker file here. And in Docker file you can see that I'm installing

274
00:18:13,160 --> 00:18:15,220
another tool called sops.

275
00:18:15,720 --> 00:18:19,236
Sops is a

276
00:18:19,258 --> 00:18:22,608
tool that designed for encrypting

277
00:18:22,624 --> 00:18:26,504
and decrypting secrets. I'll show you how I'm going to use it.

278
00:18:26,622 --> 00:18:30,280
So basically here I have the configuration of Sendgrid

279
00:18:31,100 --> 00:18:33,850
in a file that is also part in the source control.

280
00:18:34,780 --> 00:18:37,896
But it's encrypted. I mean no one can read it.

281
00:18:37,918 --> 00:18:41,230
It's encrypted with a GPG key in this case.

282
00:18:42,560 --> 00:18:45,896
And to showcase how I'm going to use this file,

283
00:18:45,928 --> 00:18:48,764
I'm going to show a different file, for example,

284
00:18:48,962 --> 00:18:52,204
that's called example encrypt that here

285
00:18:52,242 --> 00:18:55,996
we also have a secret, but in the secret file we has like the Sendgrid

286
00:18:56,028 --> 00:19:00,236
API key and the mail default sender. This is like metadata,

287
00:19:00,428 --> 00:19:04,292
but here we have the sum secret number.

288
00:19:04,426 --> 00:19:07,780
So let's try to decode it. I'm going to use soap Cli

289
00:19:09,480 --> 00:19:12,788
let's do d and you

290
00:19:12,794 --> 00:19:17,620
can see that I have like the

291
00:19:17,690 --> 00:19:21,432
secret number here is 30. I can

292
00:19:21,566 --> 00:19:26,810
put it like in a dot file and

293
00:19:27,260 --> 00:19:31,020
the other file that is decrypted is not going to get a check inside

294
00:19:31,090 --> 00:19:34,812
the source control and you can see that I can easily edit it

295
00:19:34,866 --> 00:19:38,220
as well. So if I'll do sops edit,

296
00:19:39,440 --> 00:19:44,656
I can change here the number and

297
00:19:44,678 --> 00:19:47,904
if I'll run the decrypt again, we can see that it's the right

298
00:19:48,102 --> 00:19:51,648
different number, it's 40. And we can see that in the

299
00:19:51,654 --> 00:19:56,020
source control that this file is also changed.

300
00:19:57,640 --> 00:20:01,028
So if we look on the init file, we can

301
00:20:01,034 --> 00:20:04,528
see that the first thing we are doing, we are decrypting

302
00:20:04,624 --> 00:20:08,420
the secret encrypt JSON and put it in a n file

303
00:20:08,500 --> 00:20:11,944
that flask can use and then we

304
00:20:11,982 --> 00:20:14,680
install all the requirements.

305
00:20:15,900 --> 00:20:18,360
So let's run the init.

306
00:20:19,120 --> 00:20:22,984
Okay, now let's

307
00:20:23,032 --> 00:20:24,510
try to run the application.

308
00:20:28,920 --> 00:20:32,656
So the application is running. The reason that it's

309
00:20:32,688 --> 00:20:36,084
running this way is because we have a launch

310
00:20:36,132 --> 00:20:39,224
JSON configuration that define how the app is going to run.

311
00:20:39,342 --> 00:20:42,536
It basically created automatically the moment you run it the

312
00:20:42,558 --> 00:20:46,380
first time. In this case it's also like source controlled.

313
00:20:49,040 --> 00:20:52,670
There's no need to create it every time.

314
00:20:54,240 --> 00:20:59,292
So we have the application, we'll see that it's running on port 5001 and

315
00:20:59,426 --> 00:21:03,724
you can see that it's running on the local host of the development

316
00:21:03,772 --> 00:21:07,340
container. But we want to access it on my machine,

317
00:21:07,500 --> 00:21:10,756
so how can we do it? So first of all, I'm going to show

318
00:21:10,778 --> 00:21:14,484
you that somehow magically it works. So that's the application.

319
00:21:14,602 --> 00:21:16,870
I can send a test email,

320
00:21:18,840 --> 00:21:22,180
node it for the breakpoint yet. Spoiler.

321
00:21:25,920 --> 00:21:29,948
Let's go back. So I sent an email and it's just now.

322
00:21:30,034 --> 00:21:33,596
So it works. But the

323
00:21:33,618 --> 00:21:36,780
thing is, why does it work? I mean

324
00:21:36,850 --> 00:21:40,688
I'm the local lost on my machine and the reason is because vs code

325
00:21:40,854 --> 00:21:44,912
do a port forwarding automatically. So we see that port 5001

326
00:21:45,046 --> 00:21:49,232
on the container is forwarded to my local address

327
00:21:49,286 --> 00:21:52,768
on the port 5001. So that's

328
00:21:52,784 --> 00:21:56,324
simple. And I can forward any port that I want from

329
00:21:56,362 --> 00:21:59,990
here. I could also open it inside a vs code like

330
00:22:00,300 --> 00:22:03,800
in a browser ill and I'm going to

331
00:22:03,870 --> 00:22:10,792
let's send it again and

332
00:22:10,846 --> 00:22:14,808
I'm going to put a breakpoint and decide before,

333
00:22:14,894 --> 00:22:18,108
but basically again it simply walk.

334
00:22:18,194 --> 00:22:21,644
I mean I have the full experience, although I'm not running on

335
00:22:21,682 --> 00:22:25,624
my machine, the id is running locally,

336
00:22:25,672 --> 00:22:28,860
but the container is running on a different machine.

337
00:22:28,940 --> 00:22:32,752
And we still see like we have a great experience. We can see the watch

338
00:22:32,886 --> 00:22:37,760
variable, we can debug, we can do breakpoint, we can do everything and

339
00:22:37,830 --> 00:22:41,556
it simply work. I don't need to do any setup for that.

340
00:22:41,578 --> 00:22:43,380
I'm just opening the container,

341
00:22:45,480 --> 00:22:49,540
I'm just opening the application vs code will recognize the dev container,

342
00:22:51,560 --> 00:22:55,210
it will run the application inside the container and it will have great experience.

343
00:22:57,020 --> 00:23:01,944
Okay, so that was another challenge if

344
00:23:01,982 --> 00:23:05,116
we'll go for what we saw. So basically we

345
00:23:05,138 --> 00:23:06,700
saw secret encryption.

346
00:23:08,080 --> 00:23:11,256
We use Mozilla stops for encrypting the secrets.

347
00:23:11,368 --> 00:23:15,196
I'm using GPG key, but actually it's much more

348
00:23:15,218 --> 00:23:19,104
powerful. It can also connect to other encryption has a service solution such as

349
00:23:19,142 --> 00:23:22,796
kms of AWS or Hashicorp key vault.

350
00:23:22,988 --> 00:23:26,876
The metadata such as the keys are saved unencrypted.

351
00:23:26,908 --> 00:23:30,484
So it makes it very easy to do diffing and check history as we saw

352
00:23:30,522 --> 00:23:33,936
in the git diff. This practice

353
00:23:33,968 --> 00:23:37,236
is not actually used for dev environment all the time.

354
00:23:37,258 --> 00:23:40,596
It's actually popular in GitHub's context when deploying

355
00:23:40,628 --> 00:23:44,484
stuff to production that needs secrets. So there are other solution

356
00:23:44,532 --> 00:23:47,800
as well such as Git secret, Gitcrypt and Adele.

357
00:23:49,660 --> 00:23:54,040
The id setting we saw that I'm using a launch JSON

358
00:23:54,200 --> 00:23:57,596
for configuring the launch of

359
00:23:57,618 --> 00:24:00,828
the project and I'm doing like port forwarding to forward ports on the

360
00:24:00,914 --> 00:24:04,380
localhost. But again that was pretty

361
00:24:04,450 --> 00:24:07,868
straightforward. The next project I'm

362
00:24:07,884 --> 00:24:11,580
going to show, it's like a step up in complexity

363
00:24:11,740 --> 00:24:13,650
and it's a personal project.

364
00:24:15,140 --> 00:24:18,896
It's tweak, the open source feature

365
00:24:18,928 --> 00:24:22,528
flag management solution that we used in that Akaton.

366
00:24:22,704 --> 00:24:26,400
So in tweak we have lots of challenges. We have several microservices,

367
00:24:26,480 --> 00:24:29,780
several databases, messaging system, core service

368
00:24:29,850 --> 00:24:34,020
communication, different languages

369
00:24:34,100 --> 00:24:37,864
in each one of the microservice. The architecture looks

370
00:24:37,902 --> 00:24:41,288
something like that and it's very complex in

371
00:24:41,294 --> 00:24:46,332
terms of like dependencies, kind of services can

372
00:24:46,386 --> 00:24:49,740
be really challenging. And to solve it

373
00:24:49,810 --> 00:24:53,004
I'm going to show how we are going to use not just dev

374
00:24:53,042 --> 00:24:56,880
container but also docker compose and tilt.

375
00:24:57,220 --> 00:24:59,810
So let's see the example here.

376
00:25:01,940 --> 00:25:04,800
So that's the dev container of tweak.

377
00:25:06,980 --> 00:25:10,980
We can see that we are mounting

378
00:25:13,400 --> 00:25:15,620
volume for Docker and Docker.

379
00:25:16,440 --> 00:25:20,396
I'm installing the extension of Docker.

380
00:25:20,528 --> 00:25:23,684
So first of all you can see that I have Docker

381
00:25:23,732 --> 00:25:27,700
inside it and it's like a nested

382
00:25:27,780 --> 00:25:31,988
docker. So we'll

383
00:25:32,004 --> 00:25:35,048
see that how we can make it happen in the Docker file.

384
00:25:35,144 --> 00:25:39,052
So my extension include Docker. So I can see the

385
00:25:39,106 --> 00:25:42,296
containers that are running it include

386
00:25:42,408 --> 00:25:45,676
net because one of the project is in c sharp, it includes the

387
00:25:45,698 --> 00:25:50,400
Golang and also include prettier for formatting

388
00:25:50,820 --> 00:25:54,704
of JavaScript. The post

389
00:25:54,742 --> 00:25:58,640
create command installed all the dependencies like doing NPM

390
00:25:58,720 --> 00:26:01,712
and. NEt CLI installation.

391
00:26:01,776 --> 00:26:05,892
So we can see it here. Net restore run

392
00:26:05,946 --> 00:26:09,988
all yarn and all the other stuff and

393
00:26:10,074 --> 00:26:13,224
the docker file itself, that's where it gets interesting.

394
00:26:13,342 --> 00:26:16,436
So we have some code here that designed to run Docker

395
00:26:16,468 --> 00:26:20,996
in Docker everything here it's actually taken from vs

396
00:26:21,028 --> 00:26:24,910
code examples. We install

397
00:26:27,040 --> 00:26:30,536
CLI extension plugins for Dockergate,

398
00:26:30,568 --> 00:26:33,784
Golang and. Net, we're installing

399
00:26:33,912 --> 00:26:37,596
net, we're installing Golang, we're installing

400
00:26:37,628 --> 00:26:41,120
node js and yarn, and we're installing tilt.

401
00:26:41,860 --> 00:26:45,308
So basically we have all the things that we need to run and I'll

402
00:26:45,324 --> 00:26:47,280
talk a bit about tilt.

403
00:26:48,100 --> 00:26:51,264
So first of all, we can see that

404
00:26:51,302 --> 00:26:53,990
we have all the services, I can debug them.

405
00:26:54,760 --> 00:26:58,516
I can have good experience for

406
00:26:58,538 --> 00:27:02,144
every kind of file because I installed

407
00:27:02,192 --> 00:27:05,844
all the right extensions in place. But when we are running

408
00:27:05,882 --> 00:27:09,376
them, we want to run like the full installation of tweak

409
00:27:09,408 --> 00:27:12,748
with all the dependencies and complexity. And for that we have

410
00:27:12,794 --> 00:27:15,260
a Docker compose file.

411
00:27:16,400 --> 00:27:19,756
So Docker compose file is maybe many of

412
00:27:19,778 --> 00:27:25,352
you know, it is file that's designed to describe

413
00:27:25,416 --> 00:27:28,050
a setup of several containers that are running.

414
00:27:28,900 --> 00:27:32,556
And each container, what are the environment variables. It can also define

415
00:27:32,588 --> 00:27:35,490
what's the build context to, how to build them,

416
00:27:36,100 --> 00:27:39,170
or where do we get the docker file for building them.

417
00:27:39,720 --> 00:27:42,900
So here I have the Docker compose files,

418
00:27:43,640 --> 00:27:47,376
and the important Docker compose one is the one called Tilt Yaml.

419
00:27:47,408 --> 00:27:50,776
It's also a Docker compose file that includes all the services

420
00:27:50,878 --> 00:27:54,520
that we are running, all the environment variable, all the configuration,

421
00:27:55,740 --> 00:27:59,352
and the reason we are using

422
00:27:59,406 --> 00:28:02,904
tilt. So Docker composer allow us to run

423
00:28:02,942 --> 00:28:07,036
all this application. But tilt allow us to have a

424
00:28:07,058 --> 00:28:11,176
good development feedback loop. So every time we change a code it's

425
00:28:11,208 --> 00:28:15,064
going to rebuild the image or try to do a live update.

426
00:28:15,192 --> 00:28:19,152
So for most of the services we are simply on every code change

427
00:28:19,206 --> 00:28:22,850
we are going to rebuild the image and then rerun it.

428
00:28:23,460 --> 00:28:29,048
But for the editor we are going to do odd

429
00:28:29,084 --> 00:28:31,936
model reloading. So let's run tilt.

430
00:28:32,048 --> 00:28:35,584
We are using the command tilt app. It's a bit the same as Docker compose

431
00:28:35,632 --> 00:28:39,316
app. And here we have like the UI of

432
00:28:39,418 --> 00:28:42,984
tilt. Let's see it

433
00:28:43,022 --> 00:28:49,144
running and we can see that it's run this

434
00:28:49,182 --> 00:28:52,856
port, it's also folded here. So we

435
00:28:52,878 --> 00:28:57,304
can see all the services of

436
00:28:57,422 --> 00:29:01,052
tweak, the API and every service

437
00:29:01,106 --> 00:29:03,900
we can see the log for it. So it's very convenient.

438
00:29:05,220 --> 00:29:09,250
We can see the application running on port 80 81.

439
00:29:10,260 --> 00:29:15,084
And I'm going to show that that's

440
00:29:15,132 --> 00:29:18,784
like the editor, the UI of tweak I'm

441
00:29:18,832 --> 00:29:21,830
going to show that we can easily do a code change.

442
00:29:23,000 --> 00:29:28,304
So let's go to login

443
00:29:28,352 --> 00:29:32,584
page, let's open it here

444
00:29:32,702 --> 00:29:33,610
as well.

445
00:29:35,820 --> 00:29:39,124
And instead of welcome to I'll

446
00:29:39,172 --> 00:29:43,480
say Python

447
00:29:44,460 --> 00:29:48,012
42. So I change

448
00:29:48,066 --> 00:29:51,704
it and it has changed like with odd code reloading

449
00:29:51,752 --> 00:29:54,910
without refreshing. I can change also

450
00:29:56,580 --> 00:30:00,640
I think the login message here welcome

451
00:30:00,710 --> 00:30:04,816
message span. So let's change it as well. We put something

452
00:30:04,918 --> 00:30:08,560
like that, it will be more welcoming.

453
00:30:10,500 --> 00:30:14,004
And it simply woke and we have like a great developer experience.

454
00:30:14,202 --> 00:30:18,820
And again it has something that was very difficult to developers

455
00:30:19,480 --> 00:30:23,140
when they tried to work on this project on tweak,

456
00:30:23,300 --> 00:30:27,352
just running it was difficult. And now if they are opening this project,

457
00:30:27,406 --> 00:30:30,184
they can easily run it,

458
00:30:30,302 --> 00:30:34,076
debug it, do some changes in

459
00:30:34,098 --> 00:30:37,676
the UI and get auto loading experience, do changing in the

460
00:30:37,698 --> 00:30:41,512
services and get image rebuilding and rerun

461
00:30:41,576 --> 00:30:45,792
it and everything simply work. And I mean it's really amazing.

462
00:30:45,926 --> 00:30:50,016
I wish we has this kind of technology and capabilities like

463
00:30:50,038 --> 00:30:53,072
it was six years ago I think, or five years ago.

464
00:30:53,206 --> 00:30:55,410
So it's really amazing.

465
00:30:56,500 --> 00:31:00,464
Okay, so the last example I'm going to show.

466
00:31:00,582 --> 00:31:03,824
So let's talk a bit about this example. We saw nested

467
00:31:03,872 --> 00:31:06,900
containers. We are using the approach of Docker and Docker.

468
00:31:07,400 --> 00:31:10,936
There is also approach that's called Docker from Docker which we want the

469
00:31:11,038 --> 00:31:14,196
OS Docker connection. But I think Docker

470
00:31:14,228 --> 00:31:18,200
and Docker is much more stable and if it works well

471
00:31:18,270 --> 00:31:21,770
in terms of performance you should consider using it.

472
00:31:23,520 --> 00:31:26,476
We saw watching rebuilding on every code change,

473
00:31:26,578 --> 00:31:30,364
remote debugging. I mean we can have hot

474
00:31:30,402 --> 00:31:33,724
code reloading if possible and

475
00:31:33,762 --> 00:31:36,990
things can get slower but it's definitely worth it.

476
00:31:37,760 --> 00:31:41,504
Also in Wikipedia mock cloud dependencies. So the reason the application work is

477
00:31:41,542 --> 00:31:44,988
because we have the Docker images of database. So we have image

478
00:31:45,004 --> 00:31:48,368
of register that is running image

479
00:31:48,384 --> 00:31:52,372
of nats. We also use wild compatible solution to

480
00:31:52,506 --> 00:31:56,320
other dependencies. So tweak

481
00:31:56,400 --> 00:31:59,876
use Amazon S three, but here we

482
00:31:59,898 --> 00:32:04,244
use minio which is s free compatible and we use OIDC

483
00:32:04,292 --> 00:32:08,564
openid connect mock server which is compatible with Google SSL.

484
00:32:08,692 --> 00:32:11,960
So that's the reason we can have great

485
00:32:12,030 --> 00:32:13,530
local development experience.

486
00:32:14,860 --> 00:32:18,716
The last project I'm going to show and I'll try to

487
00:32:18,738 --> 00:32:22,636
make it short is a protocol cost model, is a tool to

488
00:32:22,658 --> 00:32:26,504
manage Kubernetes cost. And the reason it's interesting because the Kubernetes

489
00:32:26,552 --> 00:32:30,040
deployments can really be complex. There is

490
00:32:30,050 --> 00:32:34,108
a new challenge. We need a Kubernetes service server,

491
00:32:34,204 --> 00:32:37,944
we need a metric server and we need Prometheus which is a time series

492
00:32:38,012 --> 00:32:43,700
database kubernetes,

493
00:32:44,120 --> 00:32:48,036
if you are familiar and try to use it. It's a

494
00:32:48,138 --> 00:32:51,530
containers orchestration solution and it's like a full platform

495
00:32:52,220 --> 00:32:56,024
and it can be very difficult to use and running local

496
00:32:56,062 --> 00:32:59,544
development kubernetes today is already difficult. We have a

497
00:32:59,582 --> 00:33:03,492
fragmentation of different kubernetes distribution and each

498
00:33:03,646 --> 00:33:07,310
one of them have different changes in how you use them.

499
00:33:08,800 --> 00:33:11,550
Versioning is difficult, upgrading is difficult.

500
00:33:12,080 --> 00:33:15,688
So using dev container maybe we use a single kubernetes

501
00:33:15,784 --> 00:33:19,730
distorted version and it can make the life much more easy.

502
00:33:20,340 --> 00:33:24,256
So I'm going to show the example of using in

503
00:33:24,278 --> 00:33:28,610
this project we are going to use a project called k.

504
00:33:29,560 --> 00:33:33,030
So let me just turn off the tilt here.

505
00:33:34,600 --> 00:33:36,950
So that's a Kubernetes cost model.

506
00:33:37,640 --> 00:33:41,072
It's also used Docker. In Docker we have the extension

507
00:33:41,136 --> 00:33:44,932
of vs code yaml for editing kubernetes

508
00:33:44,996 --> 00:33:49,016
manifest. We have kubernetes tools. So we can see like the cluster I

509
00:33:49,038 --> 00:33:52,820
have, we have Golang because the product is in go.

510
00:33:52,990 --> 00:33:56,430
We can see that I have a Kubernetes cluster that is running.

511
00:33:58,880 --> 00:34:02,316
And if we look at the Docker file we see that we

512
00:34:02,338 --> 00:34:05,664
are installing Docker in

513
00:34:05,702 --> 00:34:08,828
Docker. We're installing autocomplete

514
00:34:08,844 --> 00:34:12,592
for kubectl. We're installing K

515
00:34:12,646 --> 00:34:17,724
3D which is the tool that's designed to create

516
00:34:17,782 --> 00:34:21,696
Kubernetes cluster, K three s clusters. We are installing ElM

517
00:34:21,808 --> 00:34:25,488
which is a package manager for Kubernetes Golang node

518
00:34:25,504 --> 00:34:27,780
js and again tilt.

519
00:34:29,000 --> 00:34:32,408
So if we look at the nit script that we have here, so we are

520
00:34:32,414 --> 00:34:36,024
running all the dependencies. But the interesting thing

521
00:34:36,062 --> 00:34:40,072
is that we are creating a Kubernetes cluster and

522
00:34:40,126 --> 00:34:43,384
also we can create a Kubernetes cluster with registry,

523
00:34:43,432 --> 00:34:46,972
so we can build

524
00:34:47,026 --> 00:34:49,292
and push images and deploy to dev.

525
00:34:49,426 --> 00:34:52,908
Also we

526
00:34:52,914 --> 00:34:56,316
are applying the manifesto in the dev container which

527
00:34:56,338 --> 00:34:59,644
is the installation of Prometheus for. So Prometheus is a time series

528
00:34:59,692 --> 00:35:03,772
database and here we use a Nelm chart of Prometheus

529
00:35:03,836 --> 00:35:07,264
and we have the definition here. Again everything is

530
00:35:07,302 --> 00:35:08,900
happening declaratively,

531
00:35:11,000 --> 00:35:15,092
automatically. So when I'm running this project everything

532
00:35:15,146 --> 00:35:18,564
is going to run and I will have a good experience

533
00:35:18,682 --> 00:35:22,052
that have a Kubernetes cluster

534
00:35:22,116 --> 00:35:25,496
running locally and also using

535
00:35:25,598 --> 00:35:28,250
tilt. Again if I'll do tilt up,

536
00:35:28,940 --> 00:35:33,200
basically tilt connects the image that I'm building locally

537
00:35:33,380 --> 00:35:37,180
with the Kubernetes cluster that is running inside the dev containers.

538
00:35:37,760 --> 00:35:39,390
So we can see again,

539
00:35:40,320 --> 00:35:43,790
let's do a refresh here

540
00:35:45,680 --> 00:35:49,004
and we can see that we have the cost model which is the API that

541
00:35:49,042 --> 00:35:52,668
calculates the cost and the IUI, which is the IUI application.

542
00:35:52,834 --> 00:35:56,444
If we look at the tilt file, we can see that we have Docker build

543
00:35:56,482 --> 00:36:00,180
of the cost model. We are pushing it by

544
00:36:00,250 --> 00:36:03,664
doing the Kubernetes resource

545
00:36:03,712 --> 00:36:07,030
and loading the Kubernetes yamls that we have here.

546
00:36:08,040 --> 00:36:11,776
And we have a local resource which is the UI

547
00:36:11,808 --> 00:36:15,256
that is running and again that is running with auto loading and

548
00:36:15,278 --> 00:36:19,460
all the things that are necessary. So the application server,

549
00:36:19,620 --> 00:36:22,900
we can see it here and we see that it works.

550
00:36:23,070 --> 00:36:25,790
And the UI we can see here.

551
00:36:26,960 --> 00:36:31,324
And the interesting thing about it that if you look

552
00:36:31,362 --> 00:36:34,712
on the, it's an open source solution.

553
00:36:34,776 --> 00:36:38,272
So if you look at the contributing file, you can see that

554
00:36:38,326 --> 00:36:42,064
in many cases it can be very complex. To run this

555
00:36:42,102 --> 00:36:45,472
application you have separate stuff for building

556
00:36:45,526 --> 00:36:49,524
and running. You need to do a port forwarding and in

557
00:36:49,562 --> 00:36:52,756
this case everything is just happening by running the

558
00:36:52,778 --> 00:36:56,276
application. So that's one example of how we

559
00:36:56,298 --> 00:36:59,190
can create a so much better development experience.

560
00:37:00,440 --> 00:37:04,136
That thing I'm going to show in this example that I can create

561
00:37:04,238 --> 00:37:12,024
this cluster called

562
00:37:12,142 --> 00:37:15,790
cost model, I think. Let's see,

563
00:37:18,000 --> 00:37:21,390
cube cost. Okay, so let's delete it

564
00:37:24,320 --> 00:37:28,492
and let's run the init

565
00:37:28,556 --> 00:37:32,560
function again and I'll open it here, additional terminal.

566
00:37:33,620 --> 00:37:37,650
And we can see that we have kubernetes running

567
00:37:39,140 --> 00:37:43,110
and so it's still not running. Let's see.

568
00:37:47,520 --> 00:37:51,192
Okay, we have a cluster, it's a use context, so let's open the additional

569
00:37:51,256 --> 00:37:54,656
terminal. Oh, no need to open it.

570
00:37:54,758 --> 00:37:58,508
Okay, so let's do kgetnod.

571
00:37:58,604 --> 00:38:02,144
We can see that we have a cluster like

572
00:38:02,182 --> 00:38:05,436
in again a few seconds. And if we'll do

573
00:38:05,478 --> 00:38:09,380
like get pods, all namespaces,

574
00:38:11,080 --> 00:38:14,656
we see that all the setup of setting

575
00:38:14,688 --> 00:38:18,310
Prometheus and the metric server, everything is like running

576
00:38:18,680 --> 00:38:22,776
taffix is the reverse proxy, but basically it's done like everything

577
00:38:22,958 --> 00:38:28,404
automatically and in less than a minute. We have a working environment

578
00:38:28,452 --> 00:38:32,124
of kubernetes that include all the dependencies we need for

579
00:38:32,162 --> 00:38:36,700
running this application that actually have very complex dependencies.

580
00:38:37,360 --> 00:38:41,084
So again, it's an example of how dev

581
00:38:41,282 --> 00:38:45,264
container actually can be used in so

582
00:38:45,382 --> 00:38:48,956
many scenarios of developing

583
00:38:48,988 --> 00:38:52,240
application, even if these applications are very complex.

584
00:38:53,620 --> 00:38:57,590
Okay, so that was the last demo.

585
00:38:59,400 --> 00:39:03,108
So we are using, for running kubernetes in the dev containers we

586
00:39:03,114 --> 00:39:05,700
are using k 3d, which is a Kubernetes.

587
00:39:06,600 --> 00:39:09,972
It's based on k three s, which is a minimal Kubernetes

588
00:39:10,036 --> 00:39:12,040
distribution. And we run it in Docker.

589
00:39:13,740 --> 00:39:18,228
We use Elm for installing the chart, as we saw with Prometheus,

590
00:39:18,404 --> 00:39:21,656
the ELM controller do it like declaratively and we

591
00:39:21,678 --> 00:39:25,352
use tilk for facilitating build pushing, running and updating

592
00:39:25,416 --> 00:39:29,176
of images. To put it simply,

593
00:39:29,208 --> 00:39:32,604
what we find this example. So we have the dockeros that

594
00:39:32,642 --> 00:39:36,288
contain the dev container that contain the

595
00:39:36,374 --> 00:39:40,592
ide and tilt and

596
00:39:40,726 --> 00:39:44,528
inside and the id are connected to

597
00:39:44,614 --> 00:39:48,720
Docker and Docker which have a registry and a Kubernetes

598
00:39:48,800 --> 00:39:52,356
node that inside of a containers that run the application.

599
00:39:52,538 --> 00:39:55,190
So it's like a very nested thing.

600
00:39:55,960 --> 00:39:59,652
But the good thing is that it's all like automatically.

601
00:39:59,796 --> 00:40:03,210
And to put it visually, it's something like this.

602
00:40:11,640 --> 00:40:15,210
Okay, so that was the last demo as I mentioned.

603
00:40:17,180 --> 00:40:20,730
I think that this example showed instant,

604
00:40:21,100 --> 00:40:24,570
instant selfcontained development environments. Something totally amazing.

605
00:40:25,020 --> 00:40:28,584
The good thing about them, that they are also source controlled, so they

606
00:40:28,622 --> 00:40:32,168
correspond to the application code so it can be easy to run like old version

607
00:40:32,184 --> 00:40:35,228
of the application. The developer machines stay clean.

608
00:40:35,394 --> 00:40:38,976
We can scale well to multiple environments without conflicts. As you

609
00:40:38,998 --> 00:40:43,040
see, I run so many environments and everything works smoothly.

610
00:40:43,700 --> 00:40:47,264
They can run locally or remotely, which is

611
00:40:47,382 --> 00:40:51,120
again very convenient if you want a much more powerful machine.

612
00:40:51,460 --> 00:40:55,792
Our setup at lifecycle, we actually have like tens of microservices,

613
00:40:55,936 --> 00:40:59,236
even more today in Golan and typescript we

614
00:40:59,258 --> 00:41:03,604
have a front end with what model loading. We have our own Kubernetes containers

615
00:41:03,732 --> 00:41:07,572
and custom resources, lots of external dependencies,

616
00:41:07,636 --> 00:41:11,256
full blown CI engine, graphQL engine.

617
00:41:11,438 --> 00:41:14,900
I mean lots of stuff is happening there as well as

618
00:41:14,990 --> 00:41:18,444
clis and sdks. And even though this setup is

619
00:41:18,482 --> 00:41:22,188
so complex, the time to build

620
00:41:22,274 --> 00:41:25,884
all this setup, tear down and build it completely from

621
00:41:25,922 --> 00:41:29,276
scratch is less than 50 minutes. The time to

622
00:41:29,298 --> 00:41:32,160
build run test code changes is less than 10 seconds,

623
00:41:32,980 --> 00:41:36,476
even less for UI changes. The time to onboard

624
00:41:36,508 --> 00:41:39,868
new developers so far is less than 3 hours. And that includes

625
00:41:39,884 --> 00:41:44,736
like setting the docker and creating provisioning

626
00:41:44,768 --> 00:41:47,700
a machine on AWS because we are working remotely.

627
00:41:48,600 --> 00:41:52,308
Time to introduce a new tool to the project is less than five minutes

628
00:41:52,394 --> 00:41:56,336
if needed. There are no walk on my machine and

629
00:41:56,378 --> 00:41:59,896
there's no stand on developer machines. Secrets are

630
00:41:59,918 --> 00:42:03,224
encamped in the repository, so developers need less to

631
00:42:03,262 --> 00:42:07,252
deal with them, less they don't need to copyten files

632
00:42:07,316 --> 00:42:10,684
from place to place on using slack secret to send them

633
00:42:10,722 --> 00:42:14,296
or something like that. We are using data feeding

634
00:42:14,328 --> 00:42:17,644
so developers have initial data to work with and

635
00:42:17,682 --> 00:42:20,960
the team mean our setup work on both

636
00:42:21,030 --> 00:42:24,876
Apple silicon devices and Intel Max. So it's

637
00:42:24,908 --> 00:42:28,370
really nice to see that it simply works.

638
00:42:29,140 --> 00:42:32,484
In the future I hope to optimize it more to have shared build

639
00:42:32,522 --> 00:42:36,676
cache, to have snapshots to reduce that 15 minutes in

640
00:42:36,858 --> 00:42:40,212
the first time and maybe

641
00:42:40,346 --> 00:42:43,640
using a better cloud provider optimized machine

642
00:42:45,740 --> 00:42:49,800
instead of AWS, something that is much more cost effective.

643
00:42:51,580 --> 00:42:54,250
There are some drawbacks here.

644
00:42:54,940 --> 00:42:58,436
Creating the initial setup can take some time. Lots of the tools

645
00:42:58,468 --> 00:43:01,644
are building edge. There's additional code to manage, like the code

646
00:43:01,682 --> 00:43:05,644
of the environment. I think the big problem is that dev environments are not

647
00:43:05,682 --> 00:43:08,316
standardized yet, so we have coding to vs code.

648
00:43:08,418 --> 00:43:12,028
Docker gate and Linux. Docker gate and Linux. I don't think it's

649
00:43:12,124 --> 00:43:16,016
that bad, but Vs code is actually like we

650
00:43:16,038 --> 00:43:19,804
don't want to dictate the IDE to use. And there's

651
00:43:19,852 --> 00:43:21,830
also some performance issues.

652
00:43:23,560 --> 00:43:27,268
Do we have alternative to vs code when using

653
00:43:27,354 --> 00:43:30,896
dev containers so it's possible to use terminal

654
00:43:30,928 --> 00:43:34,408
based code editors? Gitpod and

655
00:43:34,494 --> 00:43:37,960
FIA have similar features as well with

656
00:43:38,030 --> 00:43:42,004
Gitpod YamL file. But the one thing I'm

657
00:43:42,052 --> 00:43:46,284
most excited about is that jetbrains are having good support for that,

658
00:43:46,482 --> 00:43:50,284
both in their gateway project and gateway and spaces and

659
00:43:50,322 --> 00:43:53,230
in flit which is their new ide.

660
00:43:55,280 --> 00:43:59,490
So yeah, I think that in the future we have

661
00:44:00,580 --> 00:44:03,872
more alternative. The experience in vs code is amazing, but not everyone wants

662
00:44:03,926 --> 00:44:06,290
to. It's not the favorite editor of everyone.

663
00:44:07,860 --> 00:44:11,904
I think that putting the development environment

664
00:44:11,952 --> 00:44:15,428
configuration in the repository is part of a larger trend to put

665
00:44:15,514 --> 00:44:19,888
more stuff in there. We can see it with documentation

666
00:44:20,064 --> 00:44:22,500
with linting configuration,

667
00:44:24,300 --> 00:44:28,536
we can see it with like a test or security test and

668
00:44:28,718 --> 00:44:31,844
design system, the infrastructure of code notebooks

669
00:44:31,892 --> 00:44:35,256
and other stuff as well. And the

670
00:44:35,278 --> 00:44:38,476
way we see it, like in the future, every repository will

671
00:44:38,498 --> 00:44:42,088
be self contained. All the code tools and knowledge

672
00:44:42,184 --> 00:44:46,472
and definition related to that project will reside in the repository.

673
00:44:46,616 --> 00:44:50,464
Everything will be source controlled with history. The code

674
00:44:50,502 --> 00:44:53,280
will be so much more accessible.

675
00:44:53,700 --> 00:44:56,864
We are lowering the barrier of entry because everyone

676
00:44:57,062 --> 00:45:00,428
doesn't need to know stuff externally to the repository or

677
00:45:00,454 --> 00:45:03,750
start to do like a research on how to make everything works.

678
00:45:04,120 --> 00:45:07,860
The application are portable. It's really amazing

679
00:45:07,930 --> 00:45:11,540
that if I'm creating a project I can control

680
00:45:11,610 --> 00:45:15,130
the developer experience of the users that are going to use

681
00:45:15,660 --> 00:45:19,016
my project and I can make sure that they have

682
00:45:19,118 --> 00:45:22,772
good experience and these kind of technologies.

683
00:45:22,836 --> 00:45:26,360
I think that we are seeing emerging tools ecosystem,

684
00:45:26,960 --> 00:45:30,232
cloud ides, dedicated PR environment

685
00:45:30,296 --> 00:45:33,996
that is like the PR environment is something that we

686
00:45:34,018 --> 00:45:36,670
actually do in lifecycle, in our product.

687
00:45:37,700 --> 00:45:41,596
And also we see emerging ecosystem in everything related

688
00:45:41,628 --> 00:45:45,264
to Githubs that we have like a repository and we want to

689
00:45:45,382 --> 00:45:48,850
publish it, publish the application.

690
00:45:50,260 --> 00:45:54,336
I've shown lots of tools. Here is a small cheat sheet

691
00:45:54,368 --> 00:45:58,230
of every challenge. What's the solution and tools for example.

692
00:45:59,640 --> 00:46:03,556
Some of the examples here relate to stuff I didn't show in a concrete

693
00:46:03,588 --> 00:46:07,732
example, but they are very similar. There are challenges

694
00:46:07,796 --> 00:46:10,920
that you can tackle if you are trying to use dev containers.

695
00:46:11,260 --> 00:46:14,824
And thank you. Everything is on my

696
00:46:14,862 --> 00:46:19,924
repository and I also post links

697
00:46:20,052 --> 00:46:25,656
on my Twitter account so it

698
00:46:25,678 --> 00:46:29,664
has fun and very interesting and thank

699
00:46:29,702 --> 00:46:30,670
you for your time.

