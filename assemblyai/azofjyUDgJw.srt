1
00:00:25,410 --> 00:00:29,458
You. Hi everyone, my name is Swapnil

2
00:00:29,474 --> 00:00:33,458
Deshmukh and I'm the CTO and co founder of Certus

3
00:00:33,474 --> 00:00:37,110
Cybersecurity. Certus Cybersecurity is a security

4
00:00:37,180 --> 00:00:41,318
consulting company and we provide security services to

5
00:00:41,484 --> 00:00:44,994
various Fortune 500 companies. And a common theme

6
00:00:45,042 --> 00:00:49,302
that we have seen across the board is that we have new

7
00:00:49,436 --> 00:00:52,638
terminal logies from a non production network standpoint itself,

8
00:00:52,724 --> 00:00:56,574
such as shift left, where all the security continous are being passed over

9
00:00:56,612 --> 00:00:59,646
to either developers or are being tool based.

10
00:00:59,748 --> 00:01:03,474
And they have a certain set of policies that needs to be adhered to during

11
00:01:03,512 --> 00:01:06,526
the entire code of software defined lifecycle.

12
00:01:06,638 --> 00:01:10,302
And on the other hand, we have traditional

13
00:01:10,366 --> 00:01:14,146
technologies like red teaming exercises that happens in addition to

14
00:01:14,168 --> 00:01:18,082
that. Now there is chaos engineering and there is mitre attacks.

15
00:01:18,226 --> 00:01:21,382
There are apt relevant exercise as well.

16
00:01:21,516 --> 00:01:24,870
So something very narrowly focused than what Mitre would.

17
00:01:24,940 --> 00:01:28,266
And the reason for that exercise itself is to not

18
00:01:28,288 --> 00:01:32,042
be very intrusive from the testing protective itself, but just to

19
00:01:32,096 --> 00:01:35,434
do a pressure test to identify how

20
00:01:35,472 --> 00:01:38,266
vulnerable an infrastructure would be.

21
00:01:38,368 --> 00:01:41,646
And both technologies in itself, in its

22
00:01:41,668 --> 00:01:45,022
own right, are something that we certainly need.

23
00:01:45,156 --> 00:01:48,478
But what we see is that there is a gap when it

24
00:01:48,484 --> 00:01:52,442
comes to communicating from what learnings we have from

25
00:01:52,516 --> 00:01:56,002
shift left perspective, and also the learnings that we have

26
00:01:56,056 --> 00:01:59,230
from our red teaming, or from mitral attacks,

27
00:01:59,310 --> 00:02:02,946
or from chaos engineering itself.

28
00:02:03,048 --> 00:02:06,774
And since there is a gap, the non production tends to

29
00:02:06,812 --> 00:02:10,514
have similar set of issues that gets trickled into production

30
00:02:10,562 --> 00:02:13,906
itself. And all of these attacks

31
00:02:13,938 --> 00:02:17,334
are mostly point in time. And what

32
00:02:17,372 --> 00:02:21,126
that means is that if I do my testing

33
00:02:21,158 --> 00:02:24,934
today, but if you push the code tomorrow

34
00:02:24,982 --> 00:02:28,506
itself, I would not be able to test it because the time has passed from

35
00:02:28,528 --> 00:02:32,106
a testing perspective itself. So all of these engagements are not continuous testings per

36
00:02:32,128 --> 00:02:35,246
se, they are point in time testing. As a result of that,

37
00:02:35,348 --> 00:02:38,878
if after the test has been done, someone pushes a new code

38
00:02:38,964 --> 00:02:42,346
to the production for the things that were already validated in non production

39
00:02:42,378 --> 00:02:46,158
itself, it tends to have these insecurities again passed

40
00:02:46,174 --> 00:02:49,058
over to the production network. As a result of that.

41
00:02:49,144 --> 00:02:52,802
We strongly recommend that people

42
00:02:52,856 --> 00:02:57,042
must be thinking, should be thinking about how can they integrate

43
00:02:57,186 --> 00:03:00,642
continuous feedback between these two silos

44
00:03:00,706 --> 00:03:04,774
that we have non production network and production network, and the testing that happens between

45
00:03:04,812 --> 00:03:08,806
the two from a security standpoint. And that's what we are proposing

46
00:03:08,838 --> 00:03:12,650
from a shift up perspective. So shift up perspective,

47
00:03:12,990 --> 00:03:17,094
we are talking about continuous feedback loop. And that feedback loop

48
00:03:17,142 --> 00:03:20,854
essentially means that the production network, whenever it's

49
00:03:20,902 --> 00:03:24,462
discovering new things from a policy standpoint, that they are updating within

50
00:03:24,516 --> 00:03:28,842
their ecosystem itself should automatically get trickled down into non production

51
00:03:28,906 --> 00:03:32,686
as the policies that they need to enforce as well. And it

52
00:03:32,708 --> 00:03:36,318
could happen in two ways. Either it can have similar infrastructural

53
00:03:36,414 --> 00:03:39,966
and the infrastructure talks to each other from an API

54
00:03:39,998 --> 00:03:43,394
perspective itself, where these policies get pushed and then these

55
00:03:43,432 --> 00:03:47,026
get validated during the non production testing that is performed

56
00:03:47,058 --> 00:03:50,486
through pen testing for example, or could be dynamic testing like

57
00:03:50,508 --> 00:03:54,054
dast for example. So it gets validated there.

58
00:03:54,172 --> 00:03:56,598
If it's application level testing itself,

59
00:03:56,764 --> 00:04:00,394
then the non production learnings that they have would

60
00:04:00,432 --> 00:04:04,250
get trickled down as a policies into the production. So this talking

61
00:04:04,320 --> 00:04:06,970
back and forth itself is what we are proposing.

62
00:04:08,270 --> 00:04:11,374
And we have seen that that has been very, very effective for a few

63
00:04:11,412 --> 00:04:13,840
of the companies that we have worked with in the past.

64
00:04:16,690 --> 00:04:20,574
However, there is a course, there is a journey that company needs

65
00:04:20,612 --> 00:04:24,394
to embark whenever they are thinking about integrating DevOps

66
00:04:24,442 --> 00:04:28,014
or devsecops, or integrating security and compliance

67
00:04:28,062 --> 00:04:31,986
within DevOps pipeline itself. And the journey needs to be first it

68
00:04:32,008 --> 00:04:35,434
needs to be done manually so that you can have a lot of historical

69
00:04:35,502 --> 00:04:38,150
data about all of these policies,

70
00:04:38,730 --> 00:04:42,550
all of the different security controls that one should be considering, and then

71
00:04:42,620 --> 00:04:46,600
looking at those policies and translating that into

72
00:04:46,970 --> 00:04:51,334
either of the networks to

73
00:04:51,372 --> 00:04:55,458
give you an anecdote around it. We had a WAP solution

74
00:04:55,554 --> 00:04:59,978
that these company was using and the VAP was obviously automatically updated

75
00:05:00,034 --> 00:05:03,930
thing the attack trees. So whenever it will identify

76
00:05:04,010 --> 00:05:07,886
that there is a certain set of attacks that is happening, it will look at

77
00:05:07,988 --> 00:05:11,166
what are the new regexes, what are the new

78
00:05:11,188 --> 00:05:14,750
attack patterns that an adversary is trying to attack them with. And it will,

79
00:05:14,820 --> 00:05:18,378
behind the scenes start updating those regex in production

80
00:05:18,474 --> 00:05:21,906
and in the non production itself. They did not have the WAF at any

81
00:05:21,928 --> 00:05:25,386
given point in time. As a result of that, those policies were never getting updated.

82
00:05:25,518 --> 00:05:29,142
However, the application was very resistant against

83
00:05:29,276 --> 00:05:32,934
SQLI injections itself or SQL injections because it

84
00:05:32,972 --> 00:05:37,030
had its own set of rule sets. One fine day they

85
00:05:37,100 --> 00:05:40,474
discovered that Wap was completely misconfigured from

86
00:05:40,512 --> 00:05:44,582
a SQL injection standpoint. As a result of that, an adversary

87
00:05:44,646 --> 00:05:48,330
had passed through into the application layer directly.

88
00:05:48,830 --> 00:05:52,446
Without these, new WAF can directly talk to the application itself

89
00:05:52,548 --> 00:05:55,242
and could have tried to perform SQL.

90
00:05:55,386 --> 00:05:58,814
Now, fortunately, the company had already thought

91
00:05:58,852 --> 00:06:01,898
about it and started integrating that into the application because non

92
00:06:01,914 --> 00:06:05,534
production never had the WAF or the luxury of WAF and testing

93
00:06:05,582 --> 00:06:09,922
always would have found it. But if

94
00:06:09,976 --> 00:06:13,474
you have to set up the shift up properly, then you should

95
00:06:13,512 --> 00:06:16,934
mimic the production network as it's so the WAF should have been

96
00:06:16,972 --> 00:06:20,760
there, then you can perform two set of testings where you have

97
00:06:21,210 --> 00:06:25,014
a test with the WAF and one test without the

98
00:06:25,052 --> 00:06:28,854
WAP. And you can see how resilient your application is

99
00:06:28,892 --> 00:06:32,922
against SQLI by doing that exercise itself. But then by having both

100
00:06:33,056 --> 00:06:36,666
talking same terminology from layer defenses perspective itself,

101
00:06:36,768 --> 00:06:40,746
it becomes very easy for us to perform

102
00:06:40,848 --> 00:06:43,962
more set of testings when it comes to penetration testing itself

103
00:06:44,016 --> 00:06:47,454
and non production. Because even if we take down the run production because

104
00:06:47,492 --> 00:06:50,894
these sqlites up, it doesn't have any impact on production. As a result

105
00:06:50,932 --> 00:06:53,998
of that, all the learnings that we have during that exercise itself and all the

106
00:06:54,004 --> 00:06:57,470
new regexes that it has created, they both should be syncing

107
00:06:57,550 --> 00:07:00,846
together on those regexes. As a result of that, the policies

108
00:07:00,878 --> 00:07:04,610
would be updated on both ends are supposed to be updated in one

109
00:07:04,760 --> 00:07:08,238
there was a company that wasn't doing SQLite properly,

110
00:07:08,414 --> 00:07:11,830
very very big name in telco,

111
00:07:12,490 --> 00:07:16,226
and in this particular company itself they fortunately

112
00:07:16,258 --> 00:07:20,126
had a bug bounty program where we were able to identify a lot of SQLis

113
00:07:20,178 --> 00:07:22,986
by just using this as an attack pattern itself.

114
00:07:23,168 --> 00:07:26,842
So we were able to penetrate into their WAP regex and

115
00:07:26,896 --> 00:07:30,858
directly communicate with it because they never had either shift

116
00:07:30,954 --> 00:07:34,238
up or the continuous feedback from their development team itself

117
00:07:34,324 --> 00:07:39,054
back to these production. So I hope this

118
00:07:39,092 --> 00:07:43,146
concept of integrating chaos engineering and integrating

119
00:07:43,178 --> 00:07:46,366
with the learnings that we have from the production itself into non production and

120
00:07:46,388 --> 00:07:50,894
vice versa in a continuous fashion would help create

121
00:07:51,092 --> 00:07:54,654
a very resilient security system for your

122
00:07:54,692 --> 00:07:57,958
company. Me. And if you have any questions or if you want to

123
00:07:57,964 --> 00:08:02,278
reach out to us, please do not hesitate in reaching out to our

124
00:08:02,364 --> 00:08:05,942
either company which is Certus cybersecurity.com or our

125
00:08:05,996 --> 00:08:11,380
email address is info info@certuscyber.com.

