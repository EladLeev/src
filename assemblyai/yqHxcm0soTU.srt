1
00:00:28,050 --> 00:00:31,494
Hello everybody, my name is Mike Laboman. I am the co

2
00:00:31,532 --> 00:00:34,614
founder and CTO at Aspecto and I am

3
00:00:34,652 --> 00:00:38,646
here to talk with you about distributed tracing for node js using

4
00:00:38,748 --> 00:00:41,814
open telemetry. So even if you don't know

5
00:00:41,852 --> 00:00:45,446
distributed tracing or open telemetry, this is exactly what

6
00:00:45,468 --> 00:00:49,446
I'm going to focus, what they are, how they are working,

7
00:00:49,628 --> 00:00:53,822
and, and to be honest, you don't have to be super

8
00:00:53,876 --> 00:00:56,186
experienced specifically with nodejs,

9
00:00:56,378 --> 00:00:59,706
but we'll focus mostly on the distributed tracing

10
00:00:59,738 --> 00:01:03,314
and open telemetry part. So why did

11
00:01:03,352 --> 00:01:06,754
I choose to speak about this topic? So, I've been working with

12
00:01:06,792 --> 00:01:10,580
distributed applications for the past five years,

13
00:01:11,430 --> 00:01:15,774
and as you can assume, distributed tracing are related to distributed systems.

14
00:01:15,822 --> 00:01:19,398
So distributed system and microservices, something I've done a lot,

15
00:01:19,484 --> 00:01:22,534
and for the past two years I've been doing almost only

16
00:01:22,652 --> 00:01:26,454
opentelemetry. So I kind of know this space

17
00:01:26,572 --> 00:01:30,534
and I wanted to share my experience with you. So let's

18
00:01:30,582 --> 00:01:34,822
get started. So we will start by understanding

19
00:01:34,886 --> 00:01:38,378
why do we need track. I'll give you like a good

20
00:01:38,464 --> 00:01:42,000
real use case, real example of

21
00:01:42,930 --> 00:01:46,858
when you need traces. We have all sort of solutions

22
00:01:46,874 --> 00:01:50,282
that we working with today, things like logs, like metrics.

23
00:01:50,346 --> 00:01:53,806
Why do we need another one? Once we will understand why do

24
00:01:53,828 --> 00:01:57,666
we need it, we will learn what they are, how they work and how

25
00:01:57,688 --> 00:02:00,866
to actually implement them. So let me give

26
00:02:00,888 --> 00:02:04,130
you an example. So you're working

27
00:02:04,200 --> 00:02:07,318
in a distributed environment and you

28
00:02:07,404 --> 00:02:10,834
have a scenario where service a cannot

29
00:02:10,882 --> 00:02:15,094
write to a database. And let's assume that you

30
00:02:15,132 --> 00:02:18,566
know that from having a logs sending

31
00:02:18,598 --> 00:02:22,394
you an exception alert saying hey services a can

32
00:02:22,432 --> 00:02:26,826
write to db one. So let's think together.

33
00:02:27,008 --> 00:02:30,598
What can you think to do at that point? Right? You have

34
00:02:30,624 --> 00:02:33,790
a service that is not able to write to a database.

35
00:02:34,610 --> 00:02:39,018
This is probably a high priority thing. We may have data loss,

36
00:02:39,194 --> 00:02:42,160
most likely the user are noticing it.

37
00:02:42,790 --> 00:02:47,166
How are you going to understand what's

38
00:02:47,198 --> 00:02:50,994
happening there? So if you look at logs, they most

39
00:02:51,032 --> 00:02:55,090
likely are going to point you to a specific location in your code.

40
00:02:55,240 --> 00:02:58,322
So you'll have a line of code throwing the exception,

41
00:02:58,386 --> 00:03:02,680
and then you'll go to that code base and you would find out

42
00:03:03,370 --> 00:03:06,934
which other lines led to this specific line.

43
00:03:07,132 --> 00:03:10,890
So you kind of play this game where you're trying

44
00:03:10,960 --> 00:03:14,762
to go through the different files, the different components of your code,

45
00:03:14,896 --> 00:03:20,330
and try to figure out what could led to this specific exception.

46
00:03:21,090 --> 00:03:24,126
Or you are more of a metric guy and you would go

47
00:03:24,148 --> 00:03:28,462
and say okay, let's see what's currently happening in

48
00:03:28,596 --> 00:03:32,670
DB one. Maybe there is high cpu maybe

49
00:03:32,740 --> 00:03:35,570
there is, I don't know, an I ops issue.

50
00:03:35,720 --> 00:03:39,166
Maybe you go to have some metric telling

51
00:03:39,198 --> 00:03:43,054
you about it and maybe it's just an increase in traffic,

52
00:03:43,102 --> 00:03:46,494
right? Maybe I just have way more requests to

53
00:03:46,552 --> 00:03:49,670
service a. And then I need to ask myself,

54
00:03:49,820 --> 00:03:53,382
well, what endpoints in service a are

55
00:03:53,436 --> 00:03:57,110
actually causing a query to DB one? And then I may ask myself

56
00:03:57,180 --> 00:04:01,210
maybe it's not an HTTP call, maybe it's, I don't know, a Kafka message

57
00:04:01,280 --> 00:04:04,634
that is being sent. So this is kind of

58
00:04:04,672 --> 00:04:08,298
the thought process you are going through when you have

59
00:04:08,384 --> 00:04:12,042
issues in microservices, in distributed environment.

60
00:04:12,186 --> 00:04:15,678
Let me try to illustrate that a bit. So we have service

61
00:04:15,764 --> 00:04:18,880
a and we have DB one. We know that,

62
00:04:19,730 --> 00:04:23,074
but we don't know that. Maybe we have two

63
00:04:23,112 --> 00:04:27,026
services producing messages to service a. And then the

64
00:04:27,048 --> 00:04:30,882
question is, does only the communication between

65
00:04:30,936 --> 00:04:34,402
service b and service a are causing this issue?

66
00:04:34,536 --> 00:04:37,480
Or maybe it's service c, or maybe it's both.

67
00:04:37,930 --> 00:04:40,760
So in some way,

68
00:04:41,610 --> 00:04:44,774
when we looked at logs, went to our

69
00:04:44,892 --> 00:04:48,666
code base and started to go through the path that

70
00:04:48,688 --> 00:04:52,826
the code execution took, it's very efficient to do it within

71
00:04:52,928 --> 00:04:56,890
one process, within one service. Talking about

72
00:04:56,960 --> 00:05:00,506
multiple services, it's hard to do it. It's hard to jump

73
00:05:00,538 --> 00:05:03,886
between services and understand how they interact with one another.

74
00:05:04,068 --> 00:05:08,254
This is basically traces. So log told

75
00:05:08,292 --> 00:05:12,850
us hey, this is the situation of specific process

76
00:05:12,920 --> 00:05:16,814
a specific service. And this service is unable

77
00:05:16,862 --> 00:05:21,102
to do a specific action in a line of code. The metric

78
00:05:21,166 --> 00:05:24,866
told us kind of the overall situation of

79
00:05:24,888 --> 00:05:29,110
the system. It told us that maybe DB one had high cpu.

80
00:05:29,610 --> 00:05:33,446
The track is telling us the story between the services.

81
00:05:33,628 --> 00:05:36,854
It's telling us what is the path that this specific

82
00:05:36,972 --> 00:05:40,394
API call took. Maybe it was service b,

83
00:05:40,432 --> 00:05:43,834
service a, DB one. And it kind of gave us the

84
00:05:43,872 --> 00:05:46,940
context between the service within the entire system.

85
00:05:47,310 --> 00:05:50,574
So we probably going CTO say that

86
00:05:50,612 --> 00:05:54,218
we need all three. We need logs, metrics and traces

87
00:05:54,314 --> 00:05:58,046
in order to understand how an

88
00:05:58,068 --> 00:06:01,582
incident occurs. So let me give you

89
00:06:01,636 --> 00:06:05,874
a quick look how a trace could look like.

90
00:06:06,072 --> 00:06:10,020
So here you can see a system that present

91
00:06:10,470 --> 00:06:14,402
traces and you can see right here that

92
00:06:14,536 --> 00:06:17,798
all this track is starting

93
00:06:17,884 --> 00:06:21,320
from an API call to purchase order

94
00:06:22,330 --> 00:06:25,814
in order service. And the next thing that is

95
00:06:25,852 --> 00:06:30,010
happening is that we are calling userverify in user service.

96
00:06:30,160 --> 00:06:34,182
Then we are able to have this API

97
00:06:34,246 --> 00:06:38,230
call CTO, an external API.

98
00:06:38,390 --> 00:06:41,790
Then we have some save interaction

99
00:06:42,370 --> 00:06:45,786
followed by another service that writes

100
00:06:45,818 --> 00:06:49,214
to the database and eventually a Kafka message is being

101
00:06:49,252 --> 00:06:53,074
produced. So I have this view kind of telling me the

102
00:06:53,112 --> 00:06:56,894
map and this view kind of telling me the timeline, what happened in parallel,

103
00:06:56,942 --> 00:07:01,554
what happened in sequence. And as

104
00:07:01,592 --> 00:07:05,470
expected, you could click something and then get the overall

105
00:07:05,550 --> 00:07:09,186
data, what was the requests, what was the response? And if we're

106
00:07:09,218 --> 00:07:12,902
talking particularly about Kafka messages, as I mentioned before,

107
00:07:13,036 --> 00:07:16,358
it may not be an HTTP, it may be

108
00:07:16,444 --> 00:07:19,994
some messaging protocol such as Kafka, then you want to be

109
00:07:20,032 --> 00:07:23,398
able to kind of correlate

110
00:07:23,494 --> 00:07:26,826
between both the products and

111
00:07:26,848 --> 00:07:30,082
the consumed. So basically for me at track

112
00:07:30,166 --> 00:07:34,126
it's mostly this view, it's this

113
00:07:34,228 --> 00:07:37,902
tree view, a child parent relation that

114
00:07:37,956 --> 00:07:42,062
kind of tell you your request started at this

115
00:07:42,116 --> 00:07:46,114
point, then it got CTO service

116
00:07:46,312 --> 00:07:49,970
a or older service, and then the user service. And basically

117
00:07:50,120 --> 00:07:53,442
this is going to tell me what were the interaction between

118
00:07:53,496 --> 00:07:57,762
the different services. So that's tracing

119
00:07:57,826 --> 00:08:01,522
for me, that's the ability to see a particular API

120
00:08:01,666 --> 00:08:04,680
being propagated throughout the different services.

121
00:08:05,770 --> 00:08:09,354
And this is kind of magic thing and the

122
00:08:09,392 --> 00:08:13,260
way that it works. And that's I think very interesting from

123
00:08:13,710 --> 00:08:17,370
development point of view. So open telemetry,

124
00:08:17,950 --> 00:08:21,994
this is the standard way to collect traces. Open telemetry

125
00:08:22,042 --> 00:08:26,670
can collect other stuff like metrics and logs, but mostly most mature

126
00:08:27,010 --> 00:08:30,030
in traces. And this is an oh,

127
00:08:30,100 --> 00:08:33,602
maybe before I'm starting to explain what it is.

128
00:08:33,736 --> 00:08:37,794
Opentelemetry is an open source project, of course under

129
00:08:37,832 --> 00:08:41,902
the CNCF, the Cloud native Compute foundation.

130
00:08:42,046 --> 00:08:46,146
This is the foundation that is also responsible for kubernetes for instance.

131
00:08:46,258 --> 00:08:49,622
So it's in good hands. So the process goes

132
00:08:49,676 --> 00:08:53,734
that you implement an SDK within the code and within your

133
00:08:53,852 --> 00:08:58,634
process, within your microservices. And then this

134
00:08:58,752 --> 00:09:02,538
open telemetry is going to collect the data and

135
00:09:02,704 --> 00:09:06,042
collect the track and then ship them somewhere so

136
00:09:06,096 --> 00:09:09,146
that you'll be able CTO have this review. And this

137
00:09:09,168 --> 00:09:12,970
is going to be a parent child relation between

138
00:09:13,040 --> 00:09:16,494
all the different hops. And as you can see here we have

139
00:09:16,532 --> 00:09:19,934
service a, service b, and a database. You can see that both

140
00:09:19,972 --> 00:09:22,800
services have opentelemetry installed in them.

141
00:09:23,250 --> 00:09:26,654
And by this I mean we took the Opentelemetry SDK

142
00:09:26,702 --> 00:09:30,034
and we actually installed it within the service. And what

143
00:09:30,072 --> 00:09:34,050
happens is that when service a and service b are communicating,

144
00:09:34,710 --> 00:09:37,826
so it's very easy like logs for service

145
00:09:37,928 --> 00:09:41,350
a to just report what happened and for service b to just report

146
00:09:41,420 --> 00:09:45,094
what happened. But we don't want just the report of the

147
00:09:45,132 --> 00:09:48,666
event that, hey, I got an API call, I want something

148
00:09:48,768 --> 00:09:52,698
a bit more sophisticated. I want to know that when service

149
00:09:52,784 --> 00:09:56,300
b is being invoked, it was invoked by service a

150
00:09:57,150 --> 00:10:00,202
for that. What opentelemetry is doing is

151
00:10:00,256 --> 00:10:03,726
when you send an API call between service a to service b.

152
00:10:03,828 --> 00:10:07,882
Opentelemetry is going to inject the opentelemetry context.

153
00:10:08,026 --> 00:10:11,598
What that means. It means that when service a

154
00:10:11,684 --> 00:10:15,294
is sending an API call to service b, it's going

155
00:10:15,332 --> 00:10:18,450
to leave like a breadcrumb that it's going to say,

156
00:10:18,520 --> 00:10:22,178
hey, I was the one that sent you this message.

157
00:10:22,344 --> 00:10:26,390
So when you're reporting whatever happened within service b,

158
00:10:26,540 --> 00:10:29,974
please report it as a child of what happened

159
00:10:30,012 --> 00:10:33,574
in service a. So all of those are

160
00:10:33,612 --> 00:10:37,666
going to be shipped into a backend and let's

161
00:10:37,698 --> 00:10:41,754
call it tracing backend for simplicity purposes and

162
00:10:41,792 --> 00:10:44,170
let's see what is being reported.

163
00:10:45,230 --> 00:10:48,714
So service a is going to say,

164
00:10:48,832 --> 00:10:52,814
hey, I sent an API call to service b and

165
00:10:52,852 --> 00:10:56,634
it's going to say this is trace id number one. So every trace

166
00:10:56,682 --> 00:11:00,362
has its own id and every interaction,

167
00:11:00,426 --> 00:11:03,890
every hop between services. Any action taken

168
00:11:03,960 --> 00:11:08,194
within the span, within the trace we are going to refer as a

169
00:11:08,312 --> 00:11:12,046
span. So here we are just reporting this is span

170
00:11:12,078 --> 00:11:15,714
id 155 and we don't

171
00:11:15,762 --> 00:11:18,710
have any parent because this is the root.

172
00:11:19,130 --> 00:11:23,014
Then the 55 span id is going

173
00:11:23,052 --> 00:11:26,870
cto be injected into the headers sent to service b

174
00:11:26,940 --> 00:11:30,714
and service b is going to say, hey, I got an API call from

175
00:11:30,752 --> 00:11:33,802
service a. It is still the trace id

176
00:11:33,936 --> 00:11:36,890
one. I am span id 66,

177
00:11:37,040 --> 00:11:40,422
but I have a parent and unlike it written

178
00:11:40,486 --> 00:11:44,046
in the presentation that a mistake, I do have

179
00:11:44,068 --> 00:11:47,774
the parent and the parent is 55. And then

180
00:11:47,812 --> 00:11:51,674
when the pen reported

181
00:11:51,722 --> 00:11:55,998
by service beat that, it's writing to the DB or it's querying the DB.

182
00:11:56,174 --> 00:11:59,486
Then again we have the same idea. We're reporting

183
00:11:59,518 --> 00:12:03,982
what trace id and who is our parent. And by reporting

184
00:12:04,126 --> 00:12:07,622
this parent child structure, eventually we're able

185
00:12:07,676 --> 00:12:11,670
to render in the UI how this trace looks in this nice

186
00:12:11,740 --> 00:12:13,830
review that we saw earlier.

187
00:12:14,890 --> 00:12:18,534
Okay, so this is how it works. So when

188
00:12:18,572 --> 00:12:22,378
do you use it? We use it mostly when we have production issues.

189
00:12:22,464 --> 00:12:24,700
We can use it in other places as well.

190
00:12:26,030 --> 00:12:29,354
We can use it while developing, we can

191
00:12:29,392 --> 00:12:32,954
use it in our staging environment, but mostly in production.

192
00:12:33,082 --> 00:12:36,654
I actually wrote a cool open source to

193
00:12:36,692 --> 00:12:40,362
how to use traces in your testing, like how to utilize

194
00:12:40,426 --> 00:12:43,714
traces in your testing. So you can do a lot of stuff.

195
00:12:43,752 --> 00:12:49,170
But the common use case would be how

196
00:12:49,320 --> 00:12:52,546
am I understand what fail, how do I

197
00:12:52,568 --> 00:12:56,354
improve something that works slowly? How do I understand whether the

198
00:12:56,392 --> 00:13:00,286
system is working as expected

199
00:13:00,318 --> 00:13:03,846
or not? So that would be the common use case. But if I try to

200
00:13:03,868 --> 00:13:07,266
give it like a bigger name, I would say that we are trying to improve

201
00:13:07,298 --> 00:13:10,890
our MTTR. MtTR being meantime CTo

202
00:13:11,040 --> 00:13:14,650
resolve or recover or something starting with

203
00:13:14,720 --> 00:13:18,182
r administrative that the problem no longer exists.

204
00:13:18,246 --> 00:13:21,726
So that's what we're trying to do.

205
00:13:21,748 --> 00:13:25,262
We're trying to solve things faster and by having this

206
00:13:25,316 --> 00:13:28,814
cool image telling us oh, service a called b is called

207
00:13:28,852 --> 00:13:32,978
c, and we have this specific

208
00:13:33,064 --> 00:13:36,002
indication where the error happened and what led to that.

209
00:13:36,136 --> 00:13:40,420
That's what's going to help us to solve things very fast.

210
00:13:41,910 --> 00:13:45,426
So I've spoken quite a

211
00:13:45,448 --> 00:13:49,014
lot and I really want to show you how

212
00:13:49,052 --> 00:13:52,886
it looks in real code. Like what do I need to do in

213
00:13:52,908 --> 00:13:56,930
order to have opentelemetry implemented in my code tomorrow?

214
00:13:57,090 --> 00:13:59,500
So let me give you a quick look.

215
00:14:00,190 --> 00:14:03,802
So here I have two services.

216
00:14:03,936 --> 00:14:07,274
I have my user service and the user service

217
00:14:07,392 --> 00:14:10,750
is doing something really simple.

218
00:14:10,900 --> 00:14:15,774
But let's start with the item service. The item service has

219
00:14:15,812 --> 00:14:19,360
a data endpoint and

220
00:14:19,730 --> 00:14:23,570
what it basically is doing, it's calling the user

221
00:14:24,470 --> 00:14:27,906
service that we saw 1 second ago and

222
00:14:27,928 --> 00:14:31,906
we're responding that data. So the slash item is calling

223
00:14:32,088 --> 00:14:35,938
user and then responds the data if

224
00:14:36,024 --> 00:14:39,414
something doesn't work in slash data. So for

225
00:14:39,452 --> 00:14:42,642
instance, if I'll put in my query string fail,

226
00:14:42,786 --> 00:14:46,626
what will happen is I will respond with an error.

227
00:14:46,738 --> 00:14:51,174
And you can see here that I did two specific

228
00:14:51,372 --> 00:14:55,158
things around open telemetry, which I'll explain

229
00:14:55,324 --> 00:14:59,126
in a second. The user service is also

230
00:14:59,228 --> 00:15:02,714
doing a very simple thing. It gets an API

231
00:15:02,762 --> 00:15:06,586
call. It communicates with some mocking solution,

232
00:15:06,778 --> 00:15:10,154
randomize a number according to the length of the array

233
00:15:10,202 --> 00:15:13,958
that we got. We are reporting to Opentelemetry

234
00:15:13,994 --> 00:15:17,406
this number and then we are just responding

235
00:15:17,438 --> 00:15:20,900
that and that's all good. Both services

236
00:15:21,990 --> 00:15:25,942
are importing a file called tracer and just

237
00:15:25,996 --> 00:15:28,886
provide the name user service.

238
00:15:29,068 --> 00:15:32,166
And also the item service is doing

239
00:15:32,188 --> 00:15:35,334
the same. So basically that's all you

240
00:15:35,372 --> 00:15:38,934
need to do. When it comes to open telemetry. You just

241
00:15:38,972 --> 00:15:42,966
need CTo have a single file. You will see that the installation

242
00:15:42,998 --> 00:15:46,554
of it is quite simple. The code within the tracer and that

243
00:15:46,592 --> 00:15:50,254
is it. All the other interactions that I show

244
00:15:50,292 --> 00:15:53,854
you, they are not mandatory, but you can definitely go ahead

245
00:15:53,972 --> 00:15:58,282
and add them if you would like to Soho, the tracer.

246
00:15:58,346 --> 00:16:01,600
The tracer is actually very simple.

247
00:16:02,710 --> 00:16:06,366
So basically opentelemetry collects

248
00:16:06,398 --> 00:16:10,318
what's happening in your service and then going to send it somewhere.

249
00:16:10,494 --> 00:16:14,050
So the Yeager exporter, it's going

250
00:16:14,120 --> 00:16:17,414
to export data to Jaeger. We will see

251
00:16:17,452 --> 00:16:20,594
Yeager in a second. It's an Opensource tool that can visualize

252
00:16:20,642 --> 00:16:23,986
traces. So it either can be something you spun

253
00:16:24,018 --> 00:16:28,638
up locally or some production endpoint

254
00:16:28,674 --> 00:16:32,218
that you're using, or you're choosing to use a vendor, and then

255
00:16:32,304 --> 00:16:35,866
you'll get a bit more feature than Jaeger and you don't need to

256
00:16:36,048 --> 00:16:37,900
operate Jaeger by yourself.

257
00:16:39,230 --> 00:16:43,134
So we're telling Opentelemetry where you're going

258
00:16:43,172 --> 00:16:47,086
to send the traces. Then we're going to tell

259
00:16:47,188 --> 00:16:50,618
Opentelemetry when you send those traces,

260
00:16:50,794 --> 00:16:54,606
those spans. To be more accurate, please indicate

261
00:16:54,638 --> 00:16:58,530
that this is the service name, so we will be able to distinguish between

262
00:16:58,680 --> 00:17:02,674
services. Few kind

263
00:17:02,712 --> 00:17:06,022
of generic setups. Here you are specifying what

264
00:17:06,076 --> 00:17:10,214
kind of libraries you want to

265
00:17:10,252 --> 00:17:13,750
be able to instrument to collect data from. So here

266
00:17:13,820 --> 00:17:17,506
I went with a simple list of HTTP express, but you

267
00:17:17,548 --> 00:17:21,562
can have a lot of other

268
00:17:21,616 --> 00:17:24,550
types of instrumentation like kafka,

269
00:17:24,630 --> 00:17:28,250
mongo, rediswssdk, you name it.

270
00:17:28,320 --> 00:17:32,126
Most likely there is an instrumentation for your need.

271
00:17:32,228 --> 00:17:35,662
Basic instrumentation means please collect data

272
00:17:35,716 --> 00:17:39,706
from this library. So here specifically we're talking about the HTTP

273
00:17:39,738 --> 00:17:43,266
library, the node native HTTP and the

274
00:17:43,288 --> 00:17:47,714
exprs one. This is it. This is

275
00:17:47,912 --> 00:17:51,282
all there is to it. Everything you would see is

276
00:17:51,416 --> 00:17:53,780
going to work based on that.

277
00:17:54,470 --> 00:17:58,194
I am running two services. I did yarn

278
00:17:58,242 --> 00:18:02,754
users to start the user service and I did yarnitems

279
00:18:02,802 --> 00:18:07,990
to start the item service. So let's

280
00:18:08,510 --> 00:18:12,794
go and have a quick look what happens when

281
00:18:12,832 --> 00:18:17,020
I'm sending an API call to data.

282
00:18:17,790 --> 00:18:21,562
So I'll go to Yeager. This is Yeager,

283
00:18:21,706 --> 00:18:25,534
and let me fetch the latest track. So this

284
00:18:25,572 --> 00:18:29,214
has happened right now. And when I'm clicking on it,

285
00:18:29,252 --> 00:18:32,410
you can see that we actually called data.

286
00:18:32,580 --> 00:18:35,934
And you can see this is under the item

287
00:18:35,982 --> 00:18:41,314
service. And then we communicated with

288
00:18:41,352 --> 00:18:44,786
the user service. So you can see here that we

289
00:18:44,808 --> 00:18:48,200
sent an API call CTO, our mocking service.

290
00:18:49,290 --> 00:18:52,966
And you can see everything that you

291
00:18:52,988 --> 00:18:56,422
would like to see that is going to tell you what really happened.

292
00:18:56,476 --> 00:18:59,642
Now this trace is quite not that

293
00:18:59,696 --> 00:19:02,986
interesting because everything is local,

294
00:19:03,088 --> 00:19:06,426
the communication is quite simple, but this is how you

295
00:19:06,448 --> 00:19:10,350
will be able to debug whatever is working

296
00:19:10,420 --> 00:19:13,200
or not working. You do remember,

297
00:19:13,890 --> 00:19:17,374
let me even show you that again. So in

298
00:19:17,492 --> 00:19:20,634
user we're getting an array and we are randomizing

299
00:19:20,682 --> 00:19:24,514
a number. So if I got someone

300
00:19:24,632 --> 00:19:28,210
from Madrid, let me refresh that. So now I got someone

301
00:19:28,280 --> 00:19:31,874
from London and I want

302
00:19:31,912 --> 00:19:34,878
to understand why this thing happened,

303
00:19:35,064 --> 00:19:38,406
why this data

304
00:19:38,508 --> 00:19:42,280
was randomized. So what I did here,

305
00:19:43,050 --> 00:19:47,202
I got the current span, the active span, actually handling

306
00:19:47,266 --> 00:19:50,598
this code, and I just wrote a note, hey,

307
00:19:50,684 --> 00:19:55,142
a number was randomized and this was the number that I randomized.

308
00:19:55,286 --> 00:19:58,506
And you can actually see it right here. This is kind of

309
00:19:58,528 --> 00:20:02,286
a log, right? This is kind of allowing me to send logs within my

310
00:20:02,308 --> 00:20:05,870
track. So it kind of putting

311
00:20:05,940 --> 00:20:10,078
them together. I can see what happened between services,

312
00:20:10,164 --> 00:20:13,682
but it can also attach to those spans what

313
00:20:13,736 --> 00:20:17,762
happened within the service. So this is a cool

314
00:20:17,816 --> 00:20:21,060
trick that you can use if you want to use like add event.

315
00:20:21,670 --> 00:20:24,910
It's very useful. Now let's do

316
00:20:25,000 --> 00:20:28,546
something else. Let's make it fail.

317
00:20:28,738 --> 00:20:32,658
So when I am running a query string fail,

318
00:20:32,754 --> 00:20:36,194
let's look at the code. When I have a query

319
00:20:36,242 --> 00:20:40,234
string fail, I'm throwing a really bad arrow and

320
00:20:40,352 --> 00:20:44,058
I am doing a very interesting

321
00:20:44,144 --> 00:20:47,526
thing. So what I'm doing here is I'm fetching

322
00:20:47,558 --> 00:20:50,634
the current span. And in my logger,

323
00:20:50,682 --> 00:20:54,586
in my console, I'm actually writing

324
00:20:54,778 --> 00:20:58,606
what is the current trace id? So assume that

325
00:20:58,628 --> 00:21:02,062
you have in your production environment, you probably have some log

326
00:21:02,116 --> 00:21:05,746
solution, something like kibana or so, and you have

327
00:21:05,768 --> 00:21:09,634
an exception. Now that's cool. But now

328
00:21:09,672 --> 00:21:13,422
I want to visualize this specific exception,

329
00:21:13,486 --> 00:21:17,238
not only logs, but also in traces. So you can see here

330
00:21:17,324 --> 00:21:21,026
I'm printing critical arrow, and here I have my critical arrow

331
00:21:21,138 --> 00:21:25,106
and I have my trace id. So I'm using to copy

332
00:21:25,138 --> 00:21:29,158
that, go back to jaeger and just paste

333
00:21:29,174 --> 00:21:33,114
it right here. And now I can see the

334
00:21:33,232 --> 00:21:36,650
specific of this arrow and I can see

335
00:21:36,800 --> 00:21:39,954
all the different things that related

336
00:21:40,022 --> 00:21:43,162
to this specific action.

337
00:21:43,306 --> 00:21:46,830
So we are kind of tying together the

338
00:21:46,980 --> 00:21:50,366
logs with the traces so we'll be able to

339
00:21:50,468 --> 00:21:53,730
jump from one another. So you can

340
00:21:53,800 --> 00:21:57,554
add to your logs the current trace id or span id.

341
00:21:57,752 --> 00:22:02,062
And you can also add to your span

342
00:22:02,206 --> 00:22:05,010
something similar to logs.

343
00:22:06,090 --> 00:22:09,254
So this is all you need to do.

344
00:22:09,372 --> 00:22:12,760
This is everything there is to know.

345
00:22:13,370 --> 00:22:17,000
And I would urge you to kind of

346
00:22:18,030 --> 00:22:21,402
go and try because it's a really simple

347
00:22:21,456 --> 00:22:24,890
line of code that you can start and get started

348
00:22:24,960 --> 00:22:29,340
and see what you're getting from it. If you are interested,

349
00:22:30,190 --> 00:22:33,242
the code examples are available right here.

350
00:22:33,376 --> 00:22:36,954
So in GitHub aspecto IO opentelemetry

351
00:22:37,002 --> 00:22:40,542
bootcamp, you can grab the first

352
00:22:40,596 --> 00:22:44,382
episode of the bootcamp. That's almost exactly the show that

353
00:22:44,516 --> 00:22:48,094
I showed you and that will

354
00:22:48,132 --> 00:22:50,880
get you started with opentelemetry quite fast.

355
00:22:51,810 --> 00:22:55,926
So I really hope you enjoyed this talk and if

356
00:22:55,948 --> 00:22:59,894
you have any questions, feel free to reach out. And best

357
00:22:59,932 --> 00:23:01,890
of luck with having traces.

