1
00:00:27,620 --> 00:00:31,320
Shuli we are here together for talking about one of the most interesting

2
00:00:31,470 --> 00:00:35,610
JavaScript library we can find on the world.

3
00:00:37,580 --> 00:00:41,224
We can find any. So we made it. Okay, perfect. So we

4
00:00:41,262 --> 00:00:44,852
created this framework that's called crude, it's amigo backend

5
00:00:44,916 --> 00:00:48,376
for fast shipping application. We will talk

6
00:00:48,398 --> 00:00:51,816
about this today and we will try to use it in

7
00:00:51,838 --> 00:00:55,104
our real project. And you can follow us

8
00:00:55,142 --> 00:00:58,784
in this presentation for Discover what is good it and how we made

9
00:00:58,822 --> 00:01:02,304
it. And so we hope to

10
00:01:02,342 --> 00:01:05,572
enjoy, we hope that you enjoy the

11
00:01:05,626 --> 00:01:09,300
presentation as we enjoy creating this framework for you.

12
00:01:09,450 --> 00:01:12,180
Well, coming back to the presentation,

13
00:01:12,680 --> 00:01:16,070
I think we are ready for start. Yeah, we are ready.

14
00:01:16,440 --> 00:01:21,104
Great. So why

15
00:01:21,242 --> 00:01:25,224
spending more time about telling about us? We are

16
00:01:25,262 --> 00:01:29,448
software developers, we work in central consulting, that's a company

17
00:01:29,534 --> 00:01:33,272
that visited Italy. And we make ecommerce solution and integration

18
00:01:33,336 --> 00:01:37,070
projects. And we had lot of years

19
00:01:38,000 --> 00:01:42,012
in the business and we work for first

20
00:01:42,066 --> 00:01:45,904
year partners to create custom integration and

21
00:01:45,942 --> 00:01:48,930
custom e commerce solutions. Great.

22
00:01:50,180 --> 00:01:53,312
Let's start from a pain point. That pain point

23
00:01:53,366 --> 00:01:56,240
not for me, not for Daniele,

24
00:01:56,920 --> 00:01:59,828
but for quite every developer in the world,

25
00:01:59,914 --> 00:02:03,124
even if they are front end developer or back

26
00:02:03,162 --> 00:02:06,724
end developer or any other kind or level they

27
00:02:06,762 --> 00:02:10,680
can have. So how we can develop an

28
00:02:10,750 --> 00:02:12,650
applications in 2030?

29
00:02:13,660 --> 00:02:17,432
Well, I started making this job many

30
00:02:17,486 --> 00:02:20,844
many years ago and when I started was very easy because you had

31
00:02:20,882 --> 00:02:25,996
the monolith and the monolith was very easy because you

32
00:02:26,018 --> 00:02:29,116
had to be able CTO do everything from the back end,

33
00:02:29,138 --> 00:02:33,490
from the throat end and so much today

34
00:02:34,980 --> 00:02:38,768
the share is quite different. A modern app application

35
00:02:38,934 --> 00:02:43,612
is more complex because we have multiple

36
00:02:43,676 --> 00:02:46,852
component, lot of component that we can see here.

37
00:02:46,906 --> 00:02:49,888
We have multiple microservices.

38
00:02:50,064 --> 00:02:53,648
That's good because you can delegate the microservice development

39
00:02:53,744 --> 00:02:57,476
to one team or another team. And that's great because you

40
00:02:57,498 --> 00:03:00,824
can make work in parallel. So maybe you have some

41
00:03:00,862 --> 00:03:04,584
background job that works in your infrastructure. You can have

42
00:03:04,622 --> 00:03:08,536
message queue for making this microservice communicated together. And you

43
00:03:08,558 --> 00:03:12,636
can have database relational or non relational, or you

44
00:03:12,658 --> 00:03:14,968
can have database caching.

45
00:03:15,144 --> 00:03:18,312
Then you have a front end application that's

46
00:03:18,376 --> 00:03:22,268
usually a single page application. So a model application

47
00:03:22,354 --> 00:03:26,036
that communicates CTO API to the backend.

48
00:03:26,168 --> 00:03:29,100
And that's good, that's a very good solution,

49
00:03:29,180 --> 00:03:31,890
because as we see,

50
00:03:32,660 --> 00:03:36,244
you can use the best tool

51
00:03:36,362 --> 00:03:40,500
for each need you have. So you work

52
00:03:40,650 --> 00:03:45,492
always with the best of breed. Moreover, we can have

53
00:03:45,546 --> 00:03:49,208
panelization across multiple teams. It's good because you can reduce the time to

54
00:03:49,214 --> 00:03:53,192
the market. And of course you can

55
00:03:53,246 --> 00:03:56,760
have specialized people

56
00:03:56,830 --> 00:04:00,892
that do only one things all the day. So they are good.

57
00:04:01,026 --> 00:04:04,780
And you can separate frontend. So every team

58
00:04:04,850 --> 00:04:08,412
do and knows exactly what they need to know and

59
00:04:08,466 --> 00:04:13,120
to do. And moreover, you can improve performances using

60
00:04:13,270 --> 00:04:16,828
a simpler way of communicating data between the components

61
00:04:16,844 --> 00:04:20,560
of the system. So that's a very interesting and very

62
00:04:20,630 --> 00:04:23,250
good step forward that we can have.

63
00:04:24,020 --> 00:04:26,150
That's good. We love that.

64
00:04:27,080 --> 00:04:31,092
Anyway, I'm sad on news that this new

65
00:04:31,146 --> 00:04:34,564
way of work bring with him some

66
00:04:34,682 --> 00:04:38,208
small issues. Issues that in the most of cases

67
00:04:38,304 --> 00:04:42,310
are not so relevant or can be

68
00:04:45,880 --> 00:04:48,984
a lot less than the advantages they

69
00:04:49,022 --> 00:04:53,004
bring to the system. So in this

70
00:04:53,042 --> 00:04:56,332
case, it's not a problem. But in some

71
00:04:56,386 --> 00:04:59,752
scenarios, the point that I listed

72
00:04:59,896 --> 00:05:03,790
in this slide are not so good. Can example.

73
00:05:04,160 --> 00:05:07,356
We need multiple teams or multiple competencies,

74
00:05:07,468 --> 00:05:11,250
so that lead CTO. Lot of people or a lot of

75
00:05:12,020 --> 00:05:15,332
ethical people, or a lot of teams that have to communicate together.

76
00:05:15,386 --> 00:05:17,110
And this could be a cost.

77
00:05:19,800 --> 00:05:24,032
In scenario where you have a lot of component

78
00:05:24,096 --> 00:05:27,732
and few people that work on it, a single person cannot do the job.

79
00:05:27,786 --> 00:05:31,136
This should be a good point. So it's

80
00:05:31,168 --> 00:05:34,996
good that a single person cannot do the job, because each person that is involved

81
00:05:35,108 --> 00:05:38,744
has the best skill for the job he do.

82
00:05:38,862 --> 00:05:42,004
But in some case you would like

83
00:05:42,062 --> 00:05:45,852
to be able to address the problem in a few minutes,

84
00:05:45,906 --> 00:05:49,592
in few hours. And this is not always possible. In a complex

85
00:05:49,656 --> 00:05:53,480
scenario, when the application is splitted in multiple components

86
00:05:53,560 --> 00:05:57,680
that needs multiple competencies, CTO be understood.

87
00:05:58,260 --> 00:06:01,712
In case of problem, we have to look. That's another good point. So in case

88
00:06:01,766 --> 00:06:05,136
something is wrong, who is responsible for that? Where is the problem?

89
00:06:05,238 --> 00:06:08,544
Maybe some problem start in the back end part and finishing

90
00:06:08,592 --> 00:06:12,070
the frontend part. So it's not so easy to add this problem

91
00:06:12,440 --> 00:06:15,824
in a fashionable time. Who is impacted

92
00:06:15,872 --> 00:06:19,264
more from these small issues about the progress

93
00:06:19,312 --> 00:06:23,256
we have in web application? Of course, low budget projects. So if you have a

94
00:06:23,278 --> 00:06:27,524
low budget project, if you want to do something that's quick and dirty,

95
00:06:27,652 --> 00:06:31,224
like the application, that often we need

96
00:06:31,262 --> 00:06:35,176
to implement in small companies or in startup, in these scenarios,

97
00:06:35,288 --> 00:06:38,716
well, we are more impacted. So a

98
00:06:38,738 --> 00:06:42,820
lot of companies have to sustain a big cost, a big cost of big expenses

99
00:06:42,920 --> 00:06:46,604
for maintaining and creating application that are performant,

100
00:06:46,652 --> 00:06:50,272
that get all the advantages we can have on

101
00:06:50,406 --> 00:06:53,856
a modern application. Well, the question is

102
00:06:53,878 --> 00:06:57,584
quite provocatory, but it's actual and it's still

103
00:06:57,622 --> 00:07:00,884
possible to develop a web application with easy. Okay, we are

104
00:07:00,922 --> 00:07:04,644
here today. We are here today just for answer this question.

105
00:07:04,842 --> 00:07:08,768
That's something that we want. We want to answer this question by

106
00:07:08,874 --> 00:07:12,168
explaining how we try CTO do that and we try to

107
00:07:12,174 --> 00:07:15,784
do it with crude and how is Logan? And you

108
00:07:15,822 --> 00:07:20,344
can, yes, with crude it you can. Sure you

109
00:07:20,382 --> 00:07:24,040
can. What you can, you can try. Of course

110
00:07:24,110 --> 00:07:27,836
you can keep the result of creating a web application

111
00:07:28,018 --> 00:07:32,168
when you don't need to have any competencies

112
00:07:32,264 --> 00:07:36,752
in the back end part. So we want with this library to

113
00:07:36,806 --> 00:07:41,056
accelerate the web development by reducing the amount of time

114
00:07:41,158 --> 00:07:44,656
we have in the back end part, we want

115
00:07:44,678 --> 00:07:48,676
to focus only on the business logic or write code

116
00:07:48,858 --> 00:07:52,196
for implementing what you need. Of course in the market

117
00:07:52,378 --> 00:07:56,512
we have lot of tool in the ecosystem

118
00:07:56,576 --> 00:08:00,420
of headless CMS or data CMs

119
00:08:00,580 --> 00:08:04,660
that help you for implementing

120
00:08:04,740 --> 00:08:08,760
back end solution with small developing effort.

121
00:08:09,100 --> 00:08:13,992
But in this library we want to make it more comfortable,

122
00:08:14,136 --> 00:08:17,356
we want to avoid license fees, we want

123
00:08:17,378 --> 00:08:21,132
to create something that could run in free tire of many

124
00:08:21,186 --> 00:08:24,320
of the most spread

125
00:08:24,660 --> 00:08:28,770
cloud platform like Azure, AWS or

126
00:08:29,140 --> 00:08:32,400
vessel. And moreover we want to create something

127
00:08:32,550 --> 00:08:36,736
that can be customized easy. So we finally have a library

128
00:08:36,848 --> 00:08:40,324
that's about 100 kb, something like that,

129
00:08:40,362 --> 00:08:43,968
that can run in easy and you can install and configure

130
00:08:44,064 --> 00:08:47,652
and support complex scenario like multitenant. When you

131
00:08:47,706 --> 00:08:51,392
want to create a startup and having a multitenant environment,

132
00:08:51,456 --> 00:08:54,824
you have multiple cluster, each one with different data. So you

133
00:08:54,862 --> 00:08:59,064
can. So with this small library you can do very very

134
00:08:59,182 --> 00:09:04,472
powerful teams. So I would let

135
00:09:04,606 --> 00:09:08,236
Daniela, the other Daniel, come on the

136
00:09:08,258 --> 00:09:11,950
stage and present what is crude in detail.

137
00:09:12,480 --> 00:09:16,396
Thank you Daniele for your introduction and

138
00:09:16,578 --> 00:09:20,832
let's discover together what crude can do and what

139
00:09:20,886 --> 00:09:24,432
can do in your project, in your existing project and what

140
00:09:24,486 --> 00:09:27,680
crude it can do if you want to experiment

141
00:09:27,760 --> 00:09:31,508
or create a new JavaScript project and

142
00:09:31,594 --> 00:09:34,736
how to use it. Yes with crude

143
00:09:34,848 --> 00:09:37,776
you can. But what is crudit?

144
00:09:37,968 --> 00:09:42,420
Crude is a JavaScript

145
00:09:42,500 --> 00:09:47,240
library that in a low code cloudless

146
00:09:47,660 --> 00:09:50,956
environment can enable developer to

147
00:09:50,978 --> 00:09:54,024
create applications focusing

148
00:09:54,072 --> 00:09:57,960
on the front end, focusing on the experience the user

149
00:09:58,040 --> 00:10:02,428
will have without thinking a

150
00:10:02,434 --> 00:10:06,140
lot about the backend or the sysadmin knowledge.

151
00:10:06,800 --> 00:10:10,224
What is cruit for? Crudit can be used in a

152
00:10:10,262 --> 00:10:14,144
wide variety of projects. You can use

153
00:10:14,182 --> 00:10:17,510
crudit for fast shipping multi tenant application

154
00:10:18,040 --> 00:10:22,660
let's say you want to create a dashboard

155
00:10:23,000 --> 00:10:26,484
where some user can

156
00:10:26,522 --> 00:10:29,960
see something and some user can see something else.

157
00:10:30,110 --> 00:10:33,864
You can create with credit

158
00:10:33,982 --> 00:10:37,320
this interface and you can

159
00:10:37,390 --> 00:10:40,512
allow user to log in with their credential

160
00:10:40,676 --> 00:10:44,270
and see only the database they have access for.

161
00:10:44,960 --> 00:10:48,024
You can include it also in existing

162
00:10:48,072 --> 00:10:51,484
project. Let's say you have a project based on

163
00:10:51,522 --> 00:10:55,100
a Mongodat hosted

164
00:10:55,180 --> 00:10:58,896
on Mongo Atlas and you need to change the

165
00:10:58,918 --> 00:11:02,112
data structure for change.

166
00:11:02,166 --> 00:11:06,112
Request your client has requested.

167
00:11:06,256 --> 00:11:09,504
You can use crude it to handle

168
00:11:09,552 --> 00:11:13,264
the mutation and to manipulate existing

169
00:11:13,312 --> 00:11:17,436
data on a Mongo database easily,

170
00:11:17,568 --> 00:11:22,010
fast, and in a safe way.

171
00:11:22,460 --> 00:11:26,888
You can also use crude for a

172
00:11:26,974 --> 00:11:31,400
marketing campaign or some

173
00:11:31,470 --> 00:11:35,032
survey. You can use

174
00:11:35,086 --> 00:11:38,510
crude it for firmware travel, and you can

175
00:11:38,960 --> 00:11:42,488
use server side validation to be sure that the

176
00:11:42,514 --> 00:11:45,808
data you're receiving is clean and

177
00:11:45,974 --> 00:11:49,520
the format of the data is respected.

178
00:11:50,020 --> 00:11:54,988
But how crude is

179
00:11:55,094 --> 00:11:58,612
a JavaScript library that can be used

180
00:11:58,746 --> 00:12:02,100
in every node JS runtime.

181
00:12:05,560 --> 00:12:11,396
We developed crude with cloudless

182
00:12:11,508 --> 00:12:15,464
function in mind, such as lambda function

183
00:12:15,582 --> 00:12:20,024
from us, cloud function from Google Cloud,

184
00:12:20,222 --> 00:12:24,368
or edge function from Versailles.

185
00:12:24,564 --> 00:12:27,916
The demo we

186
00:12:27,938 --> 00:12:32,540
have prepared in our GitHub is based on

187
00:12:32,690 --> 00:12:36,464
vessel edge function and once

188
00:12:36,502 --> 00:12:40,336
you configure crude in this edge function

189
00:12:40,518 --> 00:12:44,112
you get rest

190
00:12:44,166 --> 00:12:47,980
compliant API with just a few configuration

191
00:12:48,060 --> 00:12:52,288
in JavaScript. Crudita has many features.

192
00:12:52,464 --> 00:12:56,132
The feature we start

193
00:12:56,186 --> 00:12:59,624
with was the crude. On a database, the first

194
00:12:59,662 --> 00:13:04,152
thing every application needs

195
00:13:04,286 --> 00:13:07,352
is a way to communicate to a database to

196
00:13:07,406 --> 00:13:11,244
safely store its data. So crude can

197
00:13:11,282 --> 00:13:14,812
deploy in just a few line rest

198
00:13:14,866 --> 00:13:19,230
compliant API to write read from

199
00:13:19,920 --> 00:13:24,024
document based database and we use the Mongo Atras

200
00:13:24,072 --> 00:13:28,450
database. You can use crudit to

201
00:13:29,060 --> 00:13:32,748
create custom endpoints that have a dedicated

202
00:13:32,844 --> 00:13:36,036
function to handle their request. You can

203
00:13:36,058 --> 00:13:40,164
add server side validation so your data will

204
00:13:40,202 --> 00:13:45,028
be clean and there won't be data

205
00:13:45,114 --> 00:13:48,548
in a collection that don't respect

206
00:13:48,644 --> 00:13:52,372
the validation. You can mutate existing

207
00:13:52,436 --> 00:13:56,184
data and you can unhook some

208
00:13:56,222 --> 00:13:59,320
event that happens on the database.

209
00:14:00,000 --> 00:14:03,644
Let's talk about this feature one for

210
00:14:03,682 --> 00:14:07,756
all with some examples because you

211
00:14:07,778 --> 00:14:11,212
need to see how crudit is really

212
00:14:11,266 --> 00:14:15,584
easy, really fast and really fast

213
00:14:15,622 --> 00:14:19,932
to develop. This is the configuration

214
00:14:19,996 --> 00:14:27,244
we use for crude in edge

215
00:14:27,292 --> 00:14:31,460
function over cell for the crude

216
00:14:31,800 --> 00:14:35,284
feature as you can see we use can

217
00:14:35,322 --> 00:14:38,624
express server and the only configuration

218
00:14:38,672 --> 00:14:43,812
we add is the database rule CtO

219
00:14:43,866 --> 00:14:47,508
configure crudit. Then we let crudit

220
00:14:47,604 --> 00:14:51,612
handle all the request and the response and just

221
00:14:51,666 --> 00:14:56,184
crude it. Run request response and crude it handles

222
00:14:56,312 --> 00:14:56,990
everything.

223
00:14:59,120 --> 00:15:03,440
Every request with this basic configuration

224
00:15:03,780 --> 00:15:07,292
will create a database

225
00:15:07,356 --> 00:15:11,104
for each users that makes the request and

226
00:15:11,222 --> 00:15:15,036
the collection where the data is stored will be

227
00:15:15,158 --> 00:15:19,268
based on the path the request has.

228
00:15:19,434 --> 00:15:24,340
So let's say my username is Daniele

229
00:15:24,680 --> 00:15:30,536
and I call the

230
00:15:30,558 --> 00:15:34,920
API in the path prova.

231
00:15:35,980 --> 00:15:39,304
My data will be stored if I make a

232
00:15:39,342 --> 00:15:43,180
post request in a document,

233
00:15:45,360 --> 00:15:50,056
in the post collection, in the Prova

234
00:15:50,088 --> 00:15:53,712
collection, and if with a get

235
00:15:53,846 --> 00:15:58,048
I can get the data from that collection with

236
00:15:58,134 --> 00:16:02,252
a put I can update the data in that collection and I can delete

237
00:16:02,316 --> 00:16:05,820
with a delete

238
00:16:05,900 --> 00:16:09,730
call. As I said

239
00:16:10,580 --> 00:16:13,872
its user writes in its own Mongodatabase,

240
00:16:14,016 --> 00:16:18,010
so there is no sharing between

241
00:16:18,540 --> 00:16:22,744
users of the data they

242
00:16:22,782 --> 00:16:26,628
write on the database. Each user has his own database

243
00:16:26,724 --> 00:16:30,544
so can access other users

244
00:16:30,692 --> 00:16:35,084
data and there is no leaking of them.

245
00:16:35,282 --> 00:16:38,808
You can also create database

246
00:16:38,904 --> 00:16:42,656
with other method. We are

247
00:16:42,678 --> 00:16:45,984
going to present you in a few

248
00:16:46,022 --> 00:16:49,952
minutes, but the basic for

249
00:16:50,006 --> 00:16:54,240
the just crude part of crude

250
00:16:54,920 --> 00:16:58,884
is like this. You can create

251
00:16:59,082 --> 00:17:03,488
also custom endpoints. Let's say you have a custom endpoint

252
00:17:03,584 --> 00:17:06,832
that you can overwrite the default

253
00:17:06,976 --> 00:17:11,060
for a specific endpoint.

254
00:17:11,220 --> 00:17:14,920
In this case we have a post

255
00:17:14,990 --> 00:17:18,660
request on the publish endpoint.

256
00:17:18,820 --> 00:17:22,680
On the publish path needs to be logged.

257
00:17:22,760 --> 00:17:26,424
That's the true so you need CTO be a logged

258
00:17:26,472 --> 00:17:30,552
user and then the request

259
00:17:30,616 --> 00:17:33,440
is handled with a function handle request.

260
00:17:33,860 --> 00:17:37,248
You can use this method to create

261
00:17:37,414 --> 00:17:41,200
a login and register method for crude

262
00:17:41,540 --> 00:17:46,150
so you can implement yourself the

263
00:17:46,920 --> 00:17:50,244
login and registering method you are more

264
00:17:50,282 --> 00:17:53,824
confident about. You can configure

265
00:17:53,872 --> 00:17:57,888
a simple username and password

266
00:17:57,984 --> 00:18:01,964
login or integrate

267
00:18:02,032 --> 00:18:05,656
with a third party service so you are

268
00:18:05,678 --> 00:18:09,236
free to choose the login method

269
00:18:09,428 --> 00:18:14,140
you like the most. You can add server side validation

270
00:18:14,560 --> 00:18:18,236
server side validation is performed before writing on the

271
00:18:18,258 --> 00:18:22,276
database, so there won't be in your database

272
00:18:22,408 --> 00:18:26,636
unclean data if you configure server

273
00:18:26,668 --> 00:18:31,452
side validation. This validation can be scoped

274
00:18:31,596 --> 00:18:35,160
on a certain database, on a certain collection,

275
00:18:35,340 --> 00:18:39,808
and you can also specify the regex.

276
00:18:39,984 --> 00:18:43,620
So let's see, you want CTO specify the

277
00:18:43,690 --> 00:18:47,360
collection the database only

278
00:18:47,450 --> 00:18:50,680
for the users that are admin.

279
00:18:51,100 --> 00:18:54,824
So you

280
00:18:54,862 --> 00:18:58,424
can specify the database. You know our

281
00:18:58,542 --> 00:19:02,732
admin user using a regex and

282
00:19:02,866 --> 00:19:06,556
you can specify which collection they can write

283
00:19:06,738 --> 00:19:11,020
which structure of data also

284
00:19:11,090 --> 00:19:15,160
with the name of the collection or with a regex

285
00:19:15,320 --> 00:19:18,800
that validates the name of the collection.

286
00:19:19,300 --> 00:19:23,810
The syntax for validation is

287
00:19:24,580 --> 00:19:27,920
in the validation object and uses

288
00:19:28,000 --> 00:19:31,492
the structure of validator JS, which is

289
00:19:31,546 --> 00:19:36,500
one of the very few requirements

290
00:19:36,840 --> 00:19:40,344
we need to crude it and you can

291
00:19:40,382 --> 00:19:43,944
configure all sort of validation on the form of your

292
00:19:43,982 --> 00:19:48,200
data. You can append yukes and

293
00:19:48,350 --> 00:19:52,620
event listeners on some database events

294
00:19:53,280 --> 00:19:57,180
and you can trigger

295
00:19:58,880 --> 00:20:02,472
there are some events on the database and once

296
00:20:02,546 --> 00:20:05,744
can event is triggered it

297
00:20:05,782 --> 00:20:08,290
will launch a function.

298
00:20:10,100 --> 00:20:14,304
The hooks can block the

299
00:20:14,342 --> 00:20:18,180
execution. So let's see you have before save

300
00:20:18,330 --> 00:20:22,768
hooks you can add some sort of validation

301
00:20:22,944 --> 00:20:27,140
with a third party integration using

302
00:20:27,290 --> 00:20:30,730
a call CTO. I don't know. Let's say you are

303
00:20:31,420 --> 00:20:34,856
taking the billing information for your customer.

304
00:20:35,038 --> 00:20:38,920
You might want to use vs

305
00:20:39,340 --> 00:20:43,356
service to validate their billing data. You can

306
00:20:43,458 --> 00:20:47,596
use this validation on the hooks before save

307
00:20:47,778 --> 00:20:51,500
and if the data are valid you can

308
00:20:51,570 --> 00:20:55,660
allow the user CTO write, but if the data are not valid

309
00:20:55,740 --> 00:20:59,410
you can throw an error and the error will be

310
00:20:59,940 --> 00:21:03,664
in the response when the

311
00:21:03,862 --> 00:21:06,100
user makes the request.

312
00:21:07,240 --> 00:21:10,404
We used this example on

313
00:21:10,442 --> 00:21:14,550
the before save event. We save

314
00:21:15,400 --> 00:21:18,504
in the logs database on the

315
00:21:18,542 --> 00:21:22,152
before save collection, a log that

316
00:21:22,206 --> 00:21:26,052
logs the date and the user that writes

317
00:21:26,196 --> 00:21:29,160
something on a certain database and collection.

318
00:21:29,840 --> 00:21:33,630
And this is an example you can use to log your data

319
00:21:34,320 --> 00:21:37,432
and to add a logging

320
00:21:37,496 --> 00:21:41,340
to your application. Then the mutation

321
00:21:41,920 --> 00:21:45,664
the mutation is an implementation that

322
00:21:45,862 --> 00:21:49,536
lets you mutate this existing data on

323
00:21:49,558 --> 00:21:53,152
a database like the

324
00:21:53,286 --> 00:21:57,396
validation. Also here you can use a

325
00:21:57,418 --> 00:22:00,784
database name and a collection name or a regex

326
00:22:00,832 --> 00:22:04,292
for the database name and the collection name and

327
00:22:04,346 --> 00:22:07,816
mutate the data. Then you can apply a

328
00:22:07,838 --> 00:22:12,452
mutation. A mutation once defined will be executed

329
00:22:12,516 --> 00:22:15,816
only once and you can execute the

330
00:22:15,838 --> 00:22:19,256
mutation with apply single so you specify a

331
00:22:19,278 --> 00:22:23,320
certain database database and a certain mutation

332
00:22:23,400 --> 00:22:26,380
and only that database is mutated.

333
00:22:26,720 --> 00:22:30,044
You can use apply one so the

334
00:22:30,162 --> 00:22:33,692
mutation on apply one you specify

335
00:22:33,756 --> 00:22:37,776
a database and on that database will be

336
00:22:37,958 --> 00:22:41,872
executed. Every mutation that has not already

337
00:22:41,926 --> 00:22:45,504
been executed and the flag true allows

338
00:22:45,552 --> 00:22:49,472
to continue to execute

339
00:22:49,536 --> 00:22:52,836
the mutation if one has an

340
00:22:52,858 --> 00:22:56,256
error. If you set that flag to false,

341
00:22:56,448 --> 00:23:00,216
once a mutation returns an

342
00:23:00,238 --> 00:23:03,304
error is blocked the entire process.

343
00:23:03,502 --> 00:23:07,540
Or you can apply all apply all apply all the mutation

344
00:23:07,620 --> 00:23:11,036
to all the database in the project.

345
00:23:11,218 --> 00:23:15,500
So it can be very useful for bulk

346
00:23:16,320 --> 00:23:19,592
mutation on every data in your database.

347
00:23:19,656 --> 00:23:23,116
Like you need to change the structure

348
00:23:23,148 --> 00:23:26,832
of the data in all your customer base for

349
00:23:26,886 --> 00:23:29,984
a certain collection. You can do

350
00:23:30,022 --> 00:23:33,890
this with a mutation with applied and

351
00:23:34,340 --> 00:23:38,836
as I said before, you don't need even

352
00:23:38,938 --> 00:23:42,564
DevOps because crude can

353
00:23:42,602 --> 00:23:46,528
be deployed entirely on cloudless

354
00:23:46,704 --> 00:23:50,264
runtimes. It basically just needs to

355
00:23:50,302 --> 00:23:54,280
run on node JS compatible runtimes. So lambda cloud

356
00:23:54,350 --> 00:23:57,896
function edge function azure function there

357
00:23:57,918 --> 00:24:02,360
are a ton of different solution

358
00:24:03,260 --> 00:24:07,068
that can run cruw it and

359
00:24:07,154 --> 00:24:10,856
you don't need DevOps. You don't need to think about scaling, you don't

360
00:24:10,888 --> 00:24:14,528
need to think about dimensioning your server because

361
00:24:14,614 --> 00:24:16,850
it's all handled by the cloud.

362
00:24:17,300 --> 00:24:21,180
What is this for? Is for a modern

363
00:24:21,260 --> 00:24:25,128
stack Javascript project that needs a database collection.

364
00:24:25,244 --> 00:24:29,172
So you think about front end driven app.

365
00:24:29,306 --> 00:24:34,964
So you think for the

366
00:24:35,002 --> 00:24:40,570
first thing you think about is your customer experience.

367
00:24:40,940 --> 00:24:45,016
And then you need something to save your data. You can extrude it with

368
00:24:45,038 --> 00:24:48,536
a simple integration. You can use crude it

369
00:24:48,558 --> 00:24:53,628
on node JS with MongoDB applications as

370
00:24:53,714 --> 00:24:57,288
a tool to manipulate your data. CTO add validation

371
00:24:57,384 --> 00:25:01,580
to handle crude

372
00:25:02,740 --> 00:25:06,656
operation. In any project

373
00:25:06,758 --> 00:25:09,360
that is written most in JavaScript,

374
00:25:11,460 --> 00:25:15,024
you don't need complex infrastructure in

375
00:25:15,062 --> 00:25:18,804
the explorative or a material project because

376
00:25:18,922 --> 00:25:22,676
credit can reduce really the cost. CTO zero because in

377
00:25:22,698 --> 00:25:27,392
an explorative or a material project you

378
00:25:27,466 --> 00:25:31,896
can be inside the free tier of many, many services

379
00:25:32,078 --> 00:25:35,400
where credit can run. Who needs something

380
00:25:35,470 --> 00:25:38,104
else? Crude is not for everyone.

381
00:25:38,302 --> 00:25:41,708
Crude doesn't support at the moment

382
00:25:41,794 --> 00:25:45,484
assets. So if in an application

383
00:25:45,602 --> 00:25:49,596
that needs the customer CTO import

384
00:25:49,698 --> 00:25:52,590
export assets, it doesn't work.

385
00:25:53,620 --> 00:25:57,100
It works with not relational

386
00:25:57,180 --> 00:26:01,376
database, with a document based database. So if

387
00:26:01,478 --> 00:26:05,280
your data structure is very relational,

388
00:26:05,720 --> 00:26:08,630
crude is not the best solution for you.

389
00:26:09,400 --> 00:26:13,584
If you need high business logic complexity,

390
00:26:13,712 --> 00:26:16,580
maybe you need something more robust.

391
00:26:17,820 --> 00:26:21,144
And if you need to separate business logic from

392
00:26:21,182 --> 00:26:24,888
data, also crude is not the best

393
00:26:24,974 --> 00:26:28,328
because crude is just an API. CTo write to

394
00:26:28,334 --> 00:26:31,516
a database with some feature and if you

395
00:26:31,538 --> 00:26:35,276
need a robust business logic, you need something more

396
00:26:35,378 --> 00:26:40,040
powerful. And it's also not ideal

397
00:26:40,200 --> 00:26:44,092
for someone that needs a graphical interface

398
00:26:44,236 --> 00:26:48,000
to access a backend such as CRM

399
00:26:48,420 --> 00:26:52,576
because you can do it with crude, but you have to develop

400
00:26:52,758 --> 00:26:56,436
from the ground up. Crude it can be used for an

401
00:26:56,458 --> 00:26:59,748
API to write to a database, but it can be used

402
00:26:59,834 --> 00:27:03,350
to read from a database. But if you need

403
00:27:05,240 --> 00:27:09,176
graphic interface for the backend, it's not the best because you have

404
00:27:09,198 --> 00:27:13,016
to write on your own. What do you want to add?

405
00:27:13,198 --> 00:27:16,884
We want to add import from YamL

406
00:27:16,932 --> 00:27:20,252
and JSoN of configuration. This will be

407
00:27:20,306 --> 00:27:23,790
extremely important for the mutation, for example

408
00:27:24,560 --> 00:27:27,996
because you can bulk edit them with YamL or

409
00:27:28,018 --> 00:27:31,724
JSON. We would

410
00:27:31,762 --> 00:27:36,480
like to add sports for many assets without

411
00:27:36,550 --> 00:27:40,544
creating an endpoint. So let's say you add a base 64

412
00:27:40,582 --> 00:27:44,268
of an image. We want to store the asset

413
00:27:44,364 --> 00:27:48,404
in a bucket. That's the idea, but we

414
00:27:48,442 --> 00:27:51,030
are working on it.

415
00:27:51,960 --> 00:27:56,340
We are open to suggestions from future implementation.

416
00:27:56,760 --> 00:27:59,640
Also contributions are open.

417
00:27:59,710 --> 00:28:02,888
So if you want to participate in this

418
00:28:03,054 --> 00:28:08,040
project, we are really happy

419
00:28:08,190 --> 00:28:16,072
and also GitHub starts are

420
00:28:16,126 --> 00:28:19,016
never enough. So thank you.

421
00:28:19,118 --> 00:28:23,090
It was a pleasure to be part of this health.

422
00:28:23,940 --> 00:28:28,320
Hope you see you as soon as possible. I'm Daniel

423
00:28:29,540 --> 00:28:30,620
and this is predict.

