1
00:00:34,530 --> 00:00:38,322
Hi everybody, my name is ran Isenberg, and today we're going to talk about AWS

2
00:00:38,386 --> 00:00:41,938
CDK best practices. So AWS CDK allows

3
00:00:41,954 --> 00:00:45,478
you to write infrastructure as code to describe your resources in

4
00:00:45,484 --> 00:00:48,786
the cloud with code, not JSon or YAML

5
00:00:48,818 --> 00:00:51,978
files, but actual code it. And to me, as a developer,

6
00:00:52,074 --> 00:00:54,240
it feels right at home to write code.

7
00:00:55,490 --> 00:00:58,906
Now, I had the pleasure of talking at the first AWS

8
00:00:58,938 --> 00:01:02,382
CDK day about three years ago, and I came there

9
00:01:02,436 --> 00:01:06,094
from a perspective of a newbie with CDK.

10
00:01:06,222 --> 00:01:10,402
And I wanted to share the experience of working with CDK and to share

11
00:01:10,456 --> 00:01:14,622
how it helped to accelerate the development at Cyberark with CDK.

12
00:01:14,766 --> 00:01:18,150
So in this use case, I described an audit service,

13
00:01:18,220 --> 00:01:22,326
Poc. You can think of an audit service as a

14
00:01:22,348 --> 00:01:26,114
type of an ETL log service, where you take a log, you alter

15
00:01:26,162 --> 00:01:29,350
it, extend the information and save it into a bucket.

16
00:01:30,090 --> 00:01:33,830
And here you can see we have lots of serverless services, we have IoT,

17
00:01:33,910 --> 00:01:36,950
we have kinesis, we have lambdas, we have API gateways,

18
00:01:37,030 --> 00:01:41,126
we have elasticsearch, which is now Opensearch, we have buckets.

19
00:01:41,318 --> 00:01:45,134
And we didn't have a lot of knowledge and experience with these

20
00:01:45,172 --> 00:01:48,718
services back then. And since there's not a

21
00:01:48,724 --> 00:01:52,842
lot of business domain logic here, it's just a matter of connecting

22
00:01:52,986 --> 00:01:57,250
all the Lego pieces here and configuring all the event driven architecture.

23
00:01:57,670 --> 00:02:00,946
So it took us with CDK, it was me and

24
00:02:00,968 --> 00:02:04,674
two other guys, just three days, three days to get all this

25
00:02:04,712 --> 00:02:08,722
working, which to me was mind blowing. It really shows how CDK

26
00:02:08,786 --> 00:02:12,354
can really accelerate your development. It's a very powerful

27
00:02:12,402 --> 00:02:16,040
tool. And AWS Uncle Ben says,

28
00:02:16,650 --> 00:02:20,374
with great power comes great responsibility. Since CDK

29
00:02:20,422 --> 00:02:24,118
is such a powerful and flexible utility, it's really easy to make mistakes

30
00:02:24,214 --> 00:02:27,418
when you're writing code. You can basically do whatever you want.

31
00:02:27,584 --> 00:02:31,286
I'm using Python, the CDK

32
00:02:31,318 --> 00:02:34,846
variation Python, and you can do basically whatever you

33
00:02:34,868 --> 00:02:38,494
want. So it's really easy to make mistakes, and these mistakes can be quite

34
00:02:38,532 --> 00:02:41,914
costly. So this brings up the agenda

35
00:02:42,042 --> 00:02:45,598
of this talk. We're going to talk about best practices so you don't

36
00:02:45,614 --> 00:02:49,470
make mistakes. So we're going to cover CDK app guidelines,

37
00:02:49,550 --> 00:02:53,534
constructs guidelines, SACD guidelines, security and resilience,

38
00:02:53,662 --> 00:02:57,506
journal development tips. And we're going to summarize it all. So let's

39
00:02:57,538 --> 00:03:01,906
start so, a little bit about myself. My name is Ron Eisenberg.

40
00:03:01,938 --> 00:03:05,138
I'm a principal software architect at Cyberark,

41
00:03:05,314 --> 00:03:08,710
at the platform engineering group, I'm an editless community

42
00:03:08,780 --> 00:03:12,582
builder. I'm an owner of the website runthebuilder.

43
00:03:12,726 --> 00:03:16,346
Cloud where I share my serverless knowledge and you can see

44
00:03:16,368 --> 00:03:19,466
the QR code, you're going to see these QR codes along the

45
00:03:19,488 --> 00:03:23,514
presentation. This is the link to my website where again I share all my serverless

46
00:03:23,562 --> 00:03:26,974
knowledge. Okay, so let's talk about

47
00:03:27,012 --> 00:03:30,590
CDK app guidelines. So usually when

48
00:03:30,660 --> 00:03:33,860
you go ahead and start your first service,

49
00:03:34,230 --> 00:03:36,260
you start with CDK application.

50
00:03:37,670 --> 00:03:41,506
Usually it should be around one business domain and it

51
00:03:41,528 --> 00:03:44,882
should have one stack, not several. I'm going to explain why.

52
00:03:45,016 --> 00:03:48,834
And these stacks are going to have at least one construct. Each construct

53
00:03:48,882 --> 00:03:52,066
is going to have multiple resources with configurations

54
00:03:52,178 --> 00:03:55,302
between them, all their relationships, and sometimes even

55
00:03:55,356 --> 00:03:58,726
between constructs you can have relationship between the items.

56
00:03:58,758 --> 00:04:02,474
Maybe there's an event driven mechanism here. And I

57
00:04:02,512 --> 00:04:06,940
usually view constructs as a micro or nanoservice within

58
00:04:07,470 --> 00:04:10,778
the application itself. So I

59
00:04:10,784 --> 00:04:14,474
think it's usually best practices to have you should have one stack,

60
00:04:14,602 --> 00:04:17,806
one business domain maintained by one team so you don't have

61
00:04:17,828 --> 00:04:21,454
conflicts. One CI CD pipeline. And the reason I

62
00:04:21,492 --> 00:04:25,194
said one stack is because assuming

63
00:04:25,242 --> 00:04:28,766
you have several stacks in this application, so you deploy

64
00:04:28,798 --> 00:04:32,226
the first stack and then the second stack. What happens if you

65
00:04:32,248 --> 00:04:35,310
have a serious issue that you want to fix in the second stack,

66
00:04:35,390 --> 00:04:39,210
but for some reason the first stack fails deployment.

67
00:04:39,390 --> 00:04:42,758
So now you're stuck. You have increased your blast ready. So you have

68
00:04:42,764 --> 00:04:46,646
a bug in your first stack and you must solve it before you can

69
00:04:46,668 --> 00:04:50,394
solve the really critical issue that you have in your second stack. So I think

70
00:04:50,432 --> 00:04:54,874
it's really for the better to have just one stack in your application

71
00:04:55,072 --> 00:04:57,180
and to have a smaller blast ready.

72
00:04:59,150 --> 00:05:02,478
Okay. So however, in some

73
00:05:02,564 --> 00:05:06,222
cases you need to split the application into

74
00:05:06,276 --> 00:05:10,282
another application, another repository, another stack,

75
00:05:10,426 --> 00:05:14,274
and I can think of two use cases. One use

76
00:05:14,312 --> 00:05:18,260
case is when a different team will maintain the new application or

77
00:05:19,910 --> 00:05:24,020
it's a different business domain. It started as a small part of

78
00:05:24,390 --> 00:05:27,790
your service and then over time you realize hey, it's going to

79
00:05:27,800 --> 00:05:31,094
be its own domain, so you're going to move it to its

80
00:05:31,132 --> 00:05:34,646
own repository and maintain it there. And you should keep

81
00:05:34,668 --> 00:05:38,394
in mind that you shouldn't oversplit. Right. The balance is the key here

82
00:05:38,432 --> 00:05:41,866
because there is a complexity added when you

83
00:05:41,888 --> 00:05:45,178
have multiple repositories, because sometimes services

84
00:05:45,264 --> 00:05:49,162
depend one on each other. Sometimes you need to develop

85
00:05:49,296 --> 00:05:53,040
features that are cross repository, cross application.

86
00:05:53,490 --> 00:05:57,610
Then you need to develop it with feature flags and coordinate

87
00:05:57,690 --> 00:06:01,306
the enablement of these feature flags. Sometimes there is a deployment

88
00:06:01,338 --> 00:06:04,554
time dependency, maybe there's an HTTP API

89
00:06:04,602 --> 00:06:07,858
gateway that one

90
00:06:08,024 --> 00:06:11,346
application builds and the other one needs to know it.

91
00:06:11,448 --> 00:06:15,222
So then you can use things like SSM and cloud map that one

92
00:06:15,276 --> 00:06:18,422
stack publishes to the other and use it in deployment time.

93
00:06:18,476 --> 00:06:20,950
So it gets more complicated.

94
00:06:21,450 --> 00:06:24,630
Instead of just heading all in the same repository,

95
00:06:26,570 --> 00:06:30,314
let's talk about project structure. So I believe that you should

96
00:06:30,352 --> 00:06:34,026
have three folders. You should have CDK service and the

97
00:06:34,048 --> 00:06:37,226
test. CDK will obviously contain the application. You have

98
00:06:37,248 --> 00:06:41,030
the application on the root folder, CDK will contain the stack

99
00:06:41,110 --> 00:06:44,646
and all the constructs. Then you have the service,

100
00:06:44,768 --> 00:06:48,766
which is the business domain logic, all your lambda function code, things like

101
00:06:48,788 --> 00:06:51,918
that. And then you have tests, and tests we're going to cover. You're going to

102
00:06:51,924 --> 00:06:55,326
have unit integration, end to end, and security and CDK

103
00:06:55,358 --> 00:06:59,074
infrastructure examples that we're going to cover later on. And as

104
00:06:59,112 --> 00:07:02,574
you can see, I'm a true believer in the DevOps

105
00:07:02,622 --> 00:07:05,702
mentality. That infrastructure as code and the business

106
00:07:05,756 --> 00:07:08,934
domain code should reside together because the developer should

107
00:07:08,972 --> 00:07:12,518
have the ownership and the understanding of everything together,

108
00:07:12,604 --> 00:07:16,070
from the development stages to the production and the monitoring.

109
00:07:18,510 --> 00:07:22,074
Okay, so let's say that you've created your amazing

110
00:07:22,192 --> 00:07:25,082
template, your amazing application,

111
00:07:25,216 --> 00:07:28,886
you have all the best practices, you have an amazing CI CD

112
00:07:28,918 --> 00:07:32,334
pipeline, your project structure is amazing and it

113
00:07:32,372 --> 00:07:35,790
works. Now you want to create the second

114
00:07:35,860 --> 00:07:39,102
service. So what do you do? Do you just

115
00:07:39,156 --> 00:07:43,050
copy all the code from there, just duplicate the first repository

116
00:07:43,130 --> 00:07:46,274
and manually change it to create another repository? No,

117
00:07:46,312 --> 00:07:49,874
it's a lot of work. So what we saw, like I said,

118
00:07:49,912 --> 00:07:53,762
I'm part of the platform engineering group, and we saw that by

119
00:07:53,816 --> 00:07:57,398
creating a CDK template project, a self service

120
00:07:57,484 --> 00:08:01,094
project, teams can just start and create their

121
00:08:01,132 --> 00:08:04,470
service really fast and they can get started

122
00:08:04,620 --> 00:08:08,230
with something that works, that has all the best practices, all the project

123
00:08:08,300 --> 00:08:12,186
structure, all the CI CD pipeline, everything just as it

124
00:08:12,208 --> 00:08:16,410
should be. And they can just focus on writing the business domain. They usually go

125
00:08:16,560 --> 00:08:19,914
and we provide them internal training when we tell them

126
00:08:19,952 --> 00:08:23,786
about the internal sdks that we use all the best practices for writing lambda

127
00:08:23,818 --> 00:08:27,182
functions, how the CSCD pipeline works, things like that.

128
00:08:27,316 --> 00:08:30,622
And we studied it really helps to reduce the cognitive load from the

129
00:08:30,676 --> 00:08:34,494
developers and accelerate the development. So once I

130
00:08:34,532 --> 00:08:37,954
started, it really works for us at Cyberark, I decided why not make an open

131
00:08:37,992 --> 00:08:41,454
source out of it? So I created the editless Lambda handler cookbook

132
00:08:41,502 --> 00:08:44,946
project, which is found in the QR code on the

133
00:08:44,968 --> 00:08:48,294
top right. And it's basically a serverless service that

134
00:08:48,332 --> 00:08:52,434
allows you to create an API gateway lambda that writes to a dynamodb

135
00:08:52,482 --> 00:08:56,562
table and uses feature flags based on app config configurations.

136
00:08:56,706 --> 00:09:00,486
And it has the CI CDK pipeline and observability and all

137
00:09:00,508 --> 00:09:03,626
the best practices for writing lambda functions and the testing and

138
00:09:03,648 --> 00:09:06,060
everything. So you should check it out.

139
00:09:07,390 --> 00:09:10,250
So now let's talk about construct guidelines.

140
00:09:11,870 --> 00:09:15,806
So the same way that you don't write all your code in one

141
00:09:15,908 --> 00:09:19,950
function, right? You don't just have one file with 10,000

142
00:09:20,020 --> 00:09:23,438
lines. You shouldn't do that the same in your stack. You shouldn't define

143
00:09:23,454 --> 00:09:27,006
all of the resources in your stack. You should use constructs.

144
00:09:27,118 --> 00:09:31,410
Constructs and constructs are really easy to share between

145
00:09:31,480 --> 00:09:34,786
teams. You can

146
00:09:34,808 --> 00:09:38,326
have a best practice construct that

147
00:09:38,348 --> 00:09:42,102
you can share between teams and save time. So use

148
00:09:42,156 --> 00:09:45,606
constructs. Usually I see them as a microservice or

149
00:09:45,628 --> 00:09:48,806
a nanoservice. And one exception to

150
00:09:48,828 --> 00:09:52,586
the resources on the stack is the lambda layer. If you're using lambda layer that

151
00:09:52,608 --> 00:09:56,106
is used in multiple constructs, I think that's okay to

152
00:09:56,128 --> 00:09:59,594
define on a stack level. But usually you should just have

153
00:09:59,712 --> 00:10:04,190
different constructs that define the micro or nanoservices

154
00:10:05,170 --> 00:10:06,720
of your application.

155
00:10:08,930 --> 00:10:12,506
So why did I mention that constructs are really great to

156
00:10:12,548 --> 00:10:16,130
share? Usually platform engineers will create

157
00:10:16,280 --> 00:10:19,474
and maintain the shareable construct. You can think about

158
00:10:19,512 --> 00:10:22,654
it as organization approved,

159
00:10:22,702 --> 00:10:26,162
security approved constructs or patterns that you can use

160
00:10:26,216 --> 00:10:30,562
across the organization without reinventing the will. You can create a library.

161
00:10:30,706 --> 00:10:34,322
In my case it's Python, because we use Python. It's a Python library

162
00:10:34,386 --> 00:10:37,526
of CDK constructs and you can import and use it in

163
00:10:37,548 --> 00:10:41,020
your CDK code and just use it as a black box, so to speak,

164
00:10:41,390 --> 00:10:45,020
so it saves time for developers. However,

165
00:10:46,110 --> 00:10:49,894
since it's a library, it has a version and you might need to upgrade.

166
00:10:50,022 --> 00:10:54,490
And in upgrades you need to be careful not to whoever

167
00:10:54,650 --> 00:10:58,462
maintains it needs to be careful not to change the logical id of

168
00:10:58,516 --> 00:11:02,282
stated resources so you don't get your database deleted.

169
00:11:02,346 --> 00:11:06,466
And we're going to talk about it later on. But when

170
00:11:06,488 --> 00:11:09,746
you're doing it, you should

171
00:11:09,768 --> 00:11:13,822
be careful when upgrading and writing, when you're changing logical

172
00:11:13,886 --> 00:11:16,802
ids. And we're going to talk about it later on and I'm going to explain

173
00:11:16,856 --> 00:11:19,942
it in several details. Okay,

174
00:11:19,996 --> 00:11:23,414
some examples of shareable constructs so you

175
00:11:23,452 --> 00:11:26,466
have maybe WAF rules that you want to use for your API,

176
00:11:26,498 --> 00:11:30,534
gateway or cloud front distributions. Maybe you have an SNS

177
00:11:30,582 --> 00:11:34,474
SQS pattern subscription with

178
00:11:34,512 --> 00:11:38,026
encryption at rest which is not enabled by default. You might want

179
00:11:38,048 --> 00:11:41,690
to have an AWS app config dynamic configuration construct.

180
00:11:41,850 --> 00:11:45,434
Maybe you want to have Datadog log shipper or Pii

181
00:11:45,482 --> 00:11:49,450
sanitizers. And you can find more example the following links

182
00:11:49,530 --> 00:11:53,166
constructs dev, serverless land CDK patterns and the

183
00:11:53,188 --> 00:11:55,550
edibles solutions constructs.

184
00:11:57,110 --> 00:12:00,322
So now that we understand that we need to write

185
00:12:00,376 --> 00:12:03,886
constructs, how do we take an application and split

186
00:12:03,918 --> 00:12:07,174
it into constructs? So I think that

187
00:12:07,212 --> 00:12:10,726
it should be by business domain driven. Let's take a look

188
00:12:10,748 --> 00:12:13,800
at the following service.

189
00:12:14,570 --> 00:12:18,362
So we have the crud API. We have an API gateway that

190
00:12:18,416 --> 00:12:22,620
invokes two lambda functions that write and read

191
00:12:23,230 --> 00:12:27,034
to an Aurora serverless database. It has

192
00:12:27,072 --> 00:12:29,834
its own VPC networks and all the fun stuff.

193
00:12:30,032 --> 00:12:33,742
There's an Aurora stream that triggers a lambda function that sends a message

194
00:12:33,796 --> 00:12:37,434
via SNS. There's an incoming message via the SNS

195
00:12:37,482 --> 00:12:40,910
to an SQSQ that triggers a lambda function and again reads

196
00:12:41,490 --> 00:12:45,282
the aurora function, the Aurora database. So how do you go about

197
00:12:45,336 --> 00:12:49,026
and split it into constructs? So like I said, I think it

198
00:12:49,048 --> 00:12:53,010
should be business domain driven. We have the crud

199
00:12:53,350 --> 00:12:57,142
part and we have the database part. I think the database part,

200
00:12:57,196 --> 00:13:00,230
even though it's defined in the crud,

201
00:13:02,490 --> 00:13:06,214
it is an internal contract because the

202
00:13:06,252 --> 00:13:09,766
lambdas there, they're the only one who write there, writes into the database.

203
00:13:09,798 --> 00:13:13,660
So I think they own the database, so to speak.

204
00:13:14,190 --> 00:13:17,542
You still should create the aurora as its own construct

205
00:13:17,606 --> 00:13:20,986
because it's a very complicated construct and it's really easy to share it

206
00:13:21,008 --> 00:13:24,558
across organization. So once you do it, you create it once and then

207
00:13:24,564 --> 00:13:28,654
you can share an aurora database across all the organization and just have

208
00:13:28,772 --> 00:13:32,410
a best practices and secured Aurora serverless

209
00:13:32,490 --> 00:13:35,646
database. And on the other hand, you have the messaging,

210
00:13:35,678 --> 00:13:39,150
the asynchronous part, you have the SNS and the queue

211
00:13:39,230 --> 00:13:42,786
and the two lambda functions. And again there's connections between the

212
00:13:42,808 --> 00:13:46,726
two constructs. As you can see, the lambda functions they need

213
00:13:46,748 --> 00:13:51,106
to access the overall database. So it's

214
00:13:51,138 --> 00:13:54,742
important to understand that gathered is no right and wrong in this case

215
00:13:54,876 --> 00:13:57,910
because it's all defined under the same stack.

216
00:13:58,250 --> 00:14:01,578
There isn't really right or wrong, they're going to get deployed the

217
00:14:01,584 --> 00:14:05,402
same way. However, I think it makes more sense to split like this

218
00:14:05,456 --> 00:14:09,366
because it makes it easier to find the code, to find the resources

219
00:14:09,558 --> 00:14:12,766
in the project itself. It makes it easier to maintain and the

220
00:14:12,788 --> 00:14:17,038
readability of the code. But you can choose whatever

221
00:14:17,124 --> 00:14:20,430
type of construct changes that you want.

222
00:14:20,500 --> 00:14:23,234
But I think this is a good example of how to do it that makes

223
00:14:23,272 --> 00:14:26,354
sense. Okay, let's talk about

224
00:14:26,392 --> 00:14:27,970
CI CDK guidelines.

225
00:14:29,910 --> 00:14:33,406
Okay, so usually you'd

226
00:14:33,438 --> 00:14:36,822
like to model your CI CD guidelines, stages in code.

227
00:14:36,956 --> 00:14:41,330
Different environments have different configuration and that's okay. And CDK

228
00:14:41,410 --> 00:14:44,982
needs to know how to make these configuration changes into

229
00:14:45,036 --> 00:14:49,398
your environment. And usually in my case we use Jenkins

230
00:14:49,494 --> 00:14:52,666
that sets environment variables and

231
00:14:52,688 --> 00:14:55,020
injects them into the CDK application.

232
00:14:55,550 --> 00:14:59,018
We call it a profile, can be dev test, production, whatever,

233
00:14:59,104 --> 00:15:02,894
and then CDK code knows how to address this parameter and

234
00:15:02,932 --> 00:15:06,334
make the different configuration. So you can see also

235
00:15:06,372 --> 00:15:10,046
in this example that I'm using different accounts. I'm using

236
00:15:10,228 --> 00:15:13,710
dev account test account production account and they're a different account.

237
00:15:13,780 --> 00:15:17,106
And the reason for that is that you want to

238
00:15:17,128 --> 00:15:20,766
have a small best radius in case of a breach. If somebody hacks

239
00:15:20,798 --> 00:15:24,850
into your dev account, you don't want to have your production account jeopardized.

240
00:15:25,510 --> 00:15:28,962
Another reason is to have the AWS resource quarter limits.

241
00:15:29,026 --> 00:15:32,466
You don't want to reach it. So by using different accounts you're

242
00:15:32,498 --> 00:15:36,342
probably not going to get there. So let's see an example

243
00:15:36,396 --> 00:15:39,866
of how it works in CDK. So in this case I want to define a

244
00:15:39,888 --> 00:15:43,782
table. I have the profile environment variable

245
00:15:43,846 --> 00:15:47,162
that I'm going to get that

246
00:15:47,216 --> 00:15:51,286
Jenkins sets. So in this case I'm defining a dynamodb

247
00:15:51,318 --> 00:15:55,786
table. And you can see at the point in time recovery table recovery

248
00:15:55,818 --> 00:15:59,738
argument. So if I'm at the developer environment dev environment,

249
00:15:59,834 --> 00:16:03,059
I don't want to enable it, I don't care about this database, it's going to

250
00:16:03,559 --> 00:16:07,502
be in a firmware. Users use it for just branch development

251
00:16:07,566 --> 00:16:10,958
and feature development and I don't want to backup the database.

252
00:16:11,134 --> 00:16:13,966
However, if it's production, I do want to have backups.

253
00:16:13,998 --> 00:16:17,862
Right. I want to be able to return to

254
00:16:17,996 --> 00:16:21,778
appointed time, recovery time in case of a crisis or a disaster.

255
00:16:21,954 --> 00:16:25,682
The same thing goes for the removal policy. If I'm

256
00:16:25,746 --> 00:16:29,314
in a development environment, I want to remove the database

257
00:16:29,362 --> 00:16:33,146
when I finish with the stack. But in production, if for

258
00:16:33,168 --> 00:16:36,506
some reason there is a mistake and the stack is removed, I want

259
00:16:36,528 --> 00:16:39,926
to keep my data. I want to keep my database. Okay, so this

260
00:16:39,968 --> 00:16:43,630
is an example of how you can use different configurations

261
00:16:44,210 --> 00:16:49,150
in your CDK code. Let's talk about security guidelines.

262
00:16:50,210 --> 00:16:54,190
So, secrets in, never ever write

263
00:16:54,340 --> 00:16:57,998
secrets hard coded in plain text in CDK or config files.

264
00:16:58,094 --> 00:17:01,614
You should store them in GitHub, Jenkins or some sort of guidelines,

265
00:17:01,662 --> 00:17:05,038
whatever you're using as an internal secret. And then you

266
00:17:05,064 --> 00:17:08,802
can inject it into CDK as an environment variable or parameter

267
00:17:08,866 --> 00:17:12,882
into the constructor of the stack. And then CDK

268
00:17:12,946 --> 00:17:16,774
will use this parameter to deploy it into

269
00:17:16,812 --> 00:17:20,614
secrets manager or SSM parameter store as an encrypted string,

270
00:17:20,742 --> 00:17:24,426
and then the lambda will consume it from SSM and

271
00:17:24,448 --> 00:17:27,702
secrets manager. And it's going to have an environment variable

272
00:17:27,766 --> 00:17:31,542
that tell it the secret name. And of course the correct permissions

273
00:17:31,606 --> 00:17:35,594
to get the secret. This is how you should do it. And don't use

274
00:17:35,712 --> 00:17:39,434
in the lambda functions, don't use the environment variable for storing secrets.

275
00:17:39,482 --> 00:17:42,000
Don't do that. So this is the proper way to do that.

276
00:17:43,910 --> 00:17:48,078
Okay, let's talk about resources, security configurations.

277
00:17:48,254 --> 00:17:52,420
So as you can see, AWS is really thinking about security.

278
00:17:52,950 --> 00:17:56,894
Back in January, new s three objects are encrypted

279
00:17:56,942 --> 00:18:00,102
by default and DynamoDB supports encryption at rest

280
00:18:00,156 --> 00:18:03,526
for quite a while now, but it's not all the

281
00:18:03,548 --> 00:18:07,174
same for all resources. What about SNS encryption at rest? You can see

282
00:18:07,212 --> 00:18:10,570
that it's disabled by default and you need to know it and

283
00:18:10,640 --> 00:18:13,322
enable it yourself in the CDK code.

284
00:18:13,456 --> 00:18:17,420
So security defaults differ by the service itself.

285
00:18:17,950 --> 00:18:21,702
AWS gets better it, but it's your responsibility in the end.

286
00:18:21,856 --> 00:18:25,166
You have the shared responsibility model where

287
00:18:25,348 --> 00:18:28,910
AWS keeps the security off the cloud,

288
00:18:29,060 --> 00:18:32,142
but you need to make sure that the security in the cloud

289
00:18:32,276 --> 00:18:35,854
is properly defined because these are your resources and you

290
00:18:35,892 --> 00:18:39,506
own them and you need to make them secure. It's your responsibility. Nobody else

291
00:18:39,528 --> 00:18:41,700
is going to do that for you. Okay?

292
00:18:42,390 --> 00:18:46,034
So you should make sure that all your

293
00:18:46,232 --> 00:18:49,982
configurations are really use the best security

294
00:18:50,136 --> 00:18:53,846
best practices. You should have security review, you should

295
00:18:53,868 --> 00:18:57,734
have scheduled a penetration test from time to time, and you should

296
00:18:57,772 --> 00:19:01,050
also use CDK security tests. And that's what I'm going to show you now.

297
00:19:01,120 --> 00:19:03,690
We're going to use a tool called CDK Nag.

298
00:19:04,190 --> 00:19:08,102
And these are tests that you run prior to deployment.

299
00:19:08,166 --> 00:19:12,158
So you're not going to deploy a stack that has

300
00:19:12,244 --> 00:19:15,694
security misconfiguration. So you don't expose yourself to

301
00:19:15,732 --> 00:19:19,390
a security hazard. You're going to run it before

302
00:19:19,540 --> 00:19:22,838
the deployment to your account. And these tests,

303
00:19:22,954 --> 00:19:26,734
what they do, they actually synthesize the cloud formation

304
00:19:26,782 --> 00:19:30,340
template of your stack and then they run a bunch of

305
00:19:30,870 --> 00:19:34,398
assertions again and security checks on that stack.

306
00:19:34,494 --> 00:19:38,102
So in this case we have two tests. The first test is going to check

307
00:19:38,156 --> 00:19:42,434
for AWS solution architects best practices for security measures.

308
00:19:42,562 --> 00:19:45,958
And the second one is the HIPAA standard for security

309
00:19:46,044 --> 00:19:50,610
checks. And if you did something wrong, like an overly privileged role

310
00:19:50,690 --> 00:19:54,278
or an open bucket to the world, a public bucket,

311
00:19:54,374 --> 00:19:57,514
it's going to tell you hey, it's going to fail and you're not going to

312
00:19:57,552 --> 00:20:01,306
push the code and deploy something that is risky. So that's

313
00:20:01,338 --> 00:20:04,480
very important. Okay.

314
00:20:04,850 --> 00:20:08,270
Another thing that I think is very important is to write your own IM

315
00:20:08,340 --> 00:20:11,706
policies. In this example, I want to define a dynamodb

316
00:20:11,738 --> 00:20:15,662
table and I want to provide a lambda role with the permissions to

317
00:20:15,716 --> 00:20:18,622
get an item and put an item into the table.

318
00:20:18,766 --> 00:20:21,826
So in many cases you can see that people tell

319
00:20:21,848 --> 00:20:25,154
you hey, you should use the table grant read, write data

320
00:20:25,352 --> 00:20:29,174
to your role. It's really easy, it's very readable and it works.

321
00:20:29,372 --> 00:20:32,598
But what happened is that I wanted to have

322
00:20:32,684 --> 00:20:36,502
two permissions added to my llama function, but by using

323
00:20:36,556 --> 00:20:40,150
this function I actually provided something like, I think there's like

324
00:20:40,220 --> 00:20:43,306
eight or ten permissions here that I don't need. So my

325
00:20:43,328 --> 00:20:47,206
role is not least privileged. Okay, so if somebody gains

326
00:20:47,238 --> 00:20:50,746
access to this role, he can make a lot of more damage to

327
00:20:50,768 --> 00:20:54,634
my dynamodb table that

328
00:20:54,672 --> 00:20:58,254
we wanted to have access to. So what you should

329
00:20:58,292 --> 00:21:01,738
do is use the CDK

330
00:21:01,834 --> 00:21:05,394
to write your own inline policies. And this way you

331
00:21:05,432 --> 00:21:08,914
understand the IM policies better. And you can see you

332
00:21:08,952 --> 00:21:12,994
write a policy document and policy statement. You say I want to only put

333
00:21:13,032 --> 00:21:16,622
item and get item on a specific resource table

334
00:21:16,686 --> 00:21:19,926
arn my specific table, right. You're not going

335
00:21:19,948 --> 00:21:23,606
to use an asterisk here and I'm going to allow it. So this way we

336
00:21:23,628 --> 00:21:27,094
have just the permission that we wanted and I think

337
00:21:27,132 --> 00:21:31,580
it's going to make you a better developer since you understand Im policies better.

338
00:21:32,750 --> 00:21:34,410
Let's talk about resilience.

339
00:21:36,510 --> 00:21:40,186
Okay, so sometimes in

340
00:21:40,208 --> 00:21:43,982
CDK people can go ahead and make refactor the code

341
00:21:44,036 --> 00:21:47,386
and move resources from one construct to another, maybe rename

342
00:21:47,418 --> 00:21:51,502
the construct. And sometimes they don't realize that by doing that they change

343
00:21:51,556 --> 00:21:55,642
the logical id of the resource. That means that CDK

344
00:21:55,706 --> 00:21:59,714
and cloudformation are going to delete the resource and create it new with

345
00:21:59,752 --> 00:22:03,090
the new logical id. And that could be a big issue,

346
00:22:03,160 --> 00:22:07,414
a serious issue if we're talking about stateful resources such as

347
00:22:07,532 --> 00:22:11,426
tables with data, actual production data, or maybe cross

348
00:22:11,458 --> 00:22:14,994
account trust role that you change its arn

349
00:22:15,042 --> 00:22:18,646
and now you don't have access to production to the

350
00:22:18,668 --> 00:22:22,326
other account. So you can

351
00:22:22,348 --> 00:22:26,054
have serious issues by doing something that seems very simple

352
00:22:26,172 --> 00:22:30,206
and naive. And another issue that I've encountered, only ones

353
00:22:30,228 --> 00:22:33,342
to be honest, is that if you have your CDK code

354
00:22:33,396 --> 00:22:36,750
resin exception that somehow doesn't fail the entire process

355
00:22:36,820 --> 00:22:41,210
of deployment, you can have entire resources deleted from your stack.

356
00:22:41,370 --> 00:22:45,074
So you can basically deploy and remove an API gateway or

357
00:22:45,112 --> 00:22:48,834
bucket and things like that, which is not very great. So one

358
00:22:48,872 --> 00:22:52,066
way to avoid that is

359
00:22:52,088 --> 00:22:55,550
to write CDK unit infrastructure best. So let's see how you can

360
00:22:55,560 --> 00:22:59,142
do that. So in this use case, again,

361
00:22:59,276 --> 00:23:02,646
this runs before prior to deployment. So you know you're going

362
00:23:02,668 --> 00:23:06,918
to keep your code safe. And here we're going to

363
00:23:07,084 --> 00:23:10,594
create and synthesize again the cloud formation

364
00:23:10,642 --> 00:23:14,074
template. And we're going to make some checks. We're going to make sure

365
00:23:14,112 --> 00:23:17,610
that our critical resource, the API gateway, the rest API,

366
00:23:17,950 --> 00:23:21,398
it's going to be there. The same thing for the DynamoDB table,

367
00:23:21,494 --> 00:23:24,942
and we can also add checks to make sure that the logical id is

368
00:23:24,996 --> 00:23:28,446
there and it hasn't changed. So if it changes, we know

369
00:23:28,468 --> 00:23:32,142
that we're going to basically create a new table with zero data

370
00:23:32,196 --> 00:23:36,306
there. So it's not great. So this can be a nice safeguard to

371
00:23:36,328 --> 00:23:39,726
prevent that. Another cool utility

372
00:23:39,838 --> 00:23:43,186
that you can use is CDK diff. It's an open source that you

373
00:23:43,208 --> 00:23:47,014
can add to your pipeline and what

374
00:23:47,052 --> 00:23:51,602
it does basically is it visualizes

375
00:23:51,666 --> 00:23:55,960
new resources and changes to your stack. You can see that

376
00:23:56,490 --> 00:23:59,734
a new resource is added in the green and

377
00:23:59,772 --> 00:24:03,786
a resource is deleted in red. So it makes it easier to

378
00:24:03,808 --> 00:24:07,546
understand if there is a critical change or maybe somebody is making something that

379
00:24:07,568 --> 00:24:11,002
they shouldn't be doing and changing critical resources.

380
00:24:11,066 --> 00:24:13,630
It just makes it a better visibility.

381
00:24:15,330 --> 00:24:18,734
Backups so in backups you should use retain policies like

382
00:24:18,772 --> 00:24:21,840
what we saw earlier. It's better be safe than sorry.

383
00:24:23,670 --> 00:24:27,822
You should have the ability to retain the database.

384
00:24:27,886 --> 00:24:32,082
Then you can restore the data into

385
00:24:32,136 --> 00:24:35,794
the new table in case you delete it, in case you created a new table

386
00:24:35,842 --> 00:24:39,026
instead. And you should always backup your resources.

387
00:24:39,138 --> 00:24:43,714
DynamoDB has a point in time. Same thing for Aurora databases.

388
00:24:43,842 --> 00:24:47,174
You can use AWS backups for our resources so you can

389
00:24:47,212 --> 00:24:49,850
recover your lost data in case of a disaster.

390
00:24:50,750 --> 00:24:53,530
Let's talk about some general tips and guidelines.

391
00:24:54,750 --> 00:24:59,526
So usually when I'm

392
00:24:59,558 --> 00:25:02,638
using a new service in CDK and I'm not

393
00:25:02,644 --> 00:25:06,106
really sure how to define it, I can go ahead into the console,

394
00:25:06,138 --> 00:25:09,934
the AWS console, and play around with it and just try

395
00:25:09,972 --> 00:25:13,134
to understand how the resources and entities play

396
00:25:13,172 --> 00:25:16,338
together, maybe what's the relationship between them? And then

397
00:25:16,344 --> 00:25:19,506
it makes it easier for me to write the CDK code because I understand the

398
00:25:19,528 --> 00:25:22,500
service much better sometimes.

399
00:25:23,190 --> 00:25:26,846
The second tip is that sometimes the higher level constructs,

400
00:25:26,878 --> 00:25:30,326
the abstractions that CDK provides, does not expose all

401
00:25:30,348 --> 00:25:34,310
the configuration that you might need. Sometimes you need to use the lower

402
00:25:34,380 --> 00:25:38,626
abstraction, the CFN low level resources.

403
00:25:38,818 --> 00:25:42,074
They're less, let's say easier to use or fun

404
00:25:42,112 --> 00:25:46,166
to use, but they usually expose all the cloud formation aspects

405
00:25:46,198 --> 00:25:49,900
and configuration and you can use them to define pretty much whatever you want.

406
00:25:50,750 --> 00:25:54,206
The third tip is tags. Tags are super important

407
00:25:54,308 --> 00:25:58,206
because you can use tags on the stack level and

408
00:25:58,228 --> 00:26:02,000
they're added to all the resources. So it's really easy to understand

409
00:26:02,850 --> 00:26:06,914
all the resources that you see in AWS, who created them,

410
00:26:07,032 --> 00:26:10,626
when they created them, what service they belong to, and it's really

411
00:26:10,648 --> 00:26:14,434
easy to manage your services, to manage your resources like

412
00:26:14,472 --> 00:26:18,194
that, or mermaid to understand why you have some orphan

413
00:26:18,242 --> 00:26:21,746
resources because they have tags on them. And lastly,

414
00:26:21,778 --> 00:26:25,282
I think the most important tip is that we're developers

415
00:26:25,346 --> 00:26:29,350
and we like to have cool abstractions and cool factory methods.

416
00:26:30,030 --> 00:26:33,722
And my tip for you is don't do it. This is a CDK code,

417
00:26:33,776 --> 00:26:36,986
infrastructure code. It should be as simple as possible,

418
00:26:37,168 --> 00:26:40,382
okay? It should be really readable and easy

419
00:26:40,436 --> 00:26:43,854
to use, and you shouldn't make it too

420
00:26:43,892 --> 00:26:47,790
complicated and you really should. I'm okay with more codiplication

421
00:26:48,130 --> 00:26:50,320
if it's really easier to read.

422
00:26:51,330 --> 00:26:54,350
So let's summarize it. Like we said,

423
00:26:54,420 --> 00:26:57,562
CDK is very powerful, but you need to be responsible.

424
00:26:57,626 --> 00:27:01,194
And we covered all the best practices for CDK

425
00:27:01,242 --> 00:27:04,314
app stack constructs, how to share constructs.

426
00:27:04,362 --> 00:27:07,682
We talked about the CDK template and self service mechanism,

427
00:27:07,826 --> 00:27:11,862
security and resilience and that's it.

428
00:27:11,916 --> 00:27:15,766
I hope you found it interesting and helpful. And thank you very

429
00:27:15,788 --> 00:27:20,646
much. You can follow me on Twitter LinkedIn and my website runthebuilder.com.

430
00:27:20,828 --> 00:27:21,620
Thank you very much.

