1
00:01:41,810 --> 00:01:45,434
Hi everyone, my name is Amir shaked and I'm excited

2
00:01:45,482 --> 00:01:49,486
to talk to you about a very important part of incident management, which is

3
00:01:49,588 --> 00:01:53,054
what do you do afterwards? This is how we can

4
00:01:53,092 --> 00:01:56,650
use effective debriefing to create both a learning culture

5
00:01:56,730 --> 00:02:00,000
and improve the stability of our systems. Over time.

6
00:02:01,170 --> 00:02:04,882
Every production environment fail, we too severely

7
00:02:04,986 --> 00:02:08,870
failures all the time. The question is, what do you do afterwards?

8
00:02:09,210 --> 00:02:12,438
Today I'm going to cover our journey through the process

9
00:02:12,524 --> 00:02:16,546
of change towards creating a healthy and supportive learning culture

10
00:02:16,658 --> 00:02:19,740
by taking those failures and building on those

11
00:02:20,830 --> 00:02:23,946
every production system I worked on experienced issues,

12
00:02:24,128 --> 00:02:28,042
sometimes due to code changes, other times due to third

13
00:02:28,096 --> 00:02:31,846
party providers having their entire infrastructure crashing,

14
00:02:32,038 --> 00:02:35,946
leading us to seek ways to improve constantly

15
00:02:36,058 --> 00:02:39,518
on how we do things, how we protect the system,

16
00:02:39,604 --> 00:02:42,946
and at the end of it, how do we provide a better service to

17
00:02:42,968 --> 00:02:43,780
our customers.

18
00:02:46,310 --> 00:02:50,018
When I joined the company, we set a destination of wishing to see

19
00:02:50,104 --> 00:02:53,570
rapid deployment and rapid changes, being able to

20
00:02:53,640 --> 00:02:56,690
provide the most adequate and up to date solution.

21
00:02:57,210 --> 00:03:00,994
In our case, it's a world of moving target defense

22
00:03:01,122 --> 00:03:04,466
where the scope of features and changes all the time due

23
00:03:04,498 --> 00:03:08,682
to the threat actors. So being able to deploy changes quickly

24
00:03:08,816 --> 00:03:12,262
is a major factor in our ability to provide a competitive

25
00:03:12,326 --> 00:03:15,786
product. In fact, oftentimes a

26
00:03:15,808 --> 00:03:19,322
good DevOps culture can be the differentiator and

27
00:03:19,376 --> 00:03:23,278
act as a competitive edge for your company. We wanted to

28
00:03:23,284 --> 00:03:26,830
have zero downtime and have errors or mistakes happen

29
00:03:26,900 --> 00:03:30,302
only once. We will have a chance to learn from them, but never

30
00:03:30,356 --> 00:03:31,070
twice.

31
00:03:34,710 --> 00:03:38,114
However, the starting point that we got off

32
00:03:38,152 --> 00:03:41,474
to wasn't that bright. We saw a few

33
00:03:41,512 --> 00:03:45,220
repeating issues, for example, minor things

34
00:03:45,530 --> 00:03:49,302
causing failures in production that shouldn't have been happening,

35
00:03:49,436 --> 00:03:52,440
things due to code changes or configuration changes,

36
00:03:53,130 --> 00:03:56,834
being tools prone to incidents due to the underlying

37
00:03:56,882 --> 00:04:00,010
cloud environment we were using affecting our stability.

38
00:04:00,670 --> 00:04:04,426
Now, those two factors were very concerning at

39
00:04:04,448 --> 00:04:08,246
the time when we looked at where we are and how fast we're expecting

40
00:04:08,278 --> 00:04:11,774
to grow and scale. Since what is

41
00:04:11,812 --> 00:04:15,214
a minor issue today can potentially be

42
00:04:15,252 --> 00:04:18,574
catastrophic, since the future will come

43
00:04:18,612 --> 00:04:22,480
in very fast when everything is

44
00:04:22,870 --> 00:04:25,954
growing very rapidly. Now, while those

45
00:04:25,992 --> 00:04:30,100
two were concerning the real issue, the last item was

46
00:04:30,950 --> 00:04:34,226
what was preventing us to improve the most,

47
00:04:34,328 --> 00:04:37,726
and that was fear of judgment. Every time we dove

48
00:04:37,758 --> 00:04:41,602
into trying to understand an issue that we had, there were pushbacks.

49
00:04:41,746 --> 00:04:44,950
Why do we ask so many questions? Do we not trust people?

50
00:04:45,020 --> 00:04:48,422
Why don't we just let them do their job? They know what they're doing

51
00:04:48,556 --> 00:04:51,914
and that's a problem. If you have a team members afraid or

52
00:04:51,952 --> 00:04:55,386
feeling that they're being judged or just generally insecure in

53
00:04:55,408 --> 00:04:58,582
their work environment, they are going to underperform.

54
00:04:58,726 --> 00:05:02,270
And as a team, you will not be able to learn and adapt.

55
00:05:04,450 --> 00:05:07,966
With that starting point and the destination we had in mind,

56
00:05:08,068 --> 00:05:11,438
we set off to establish a new process within the team

57
00:05:11,524 --> 00:05:15,060
of how we analyze every kind of failure and

58
00:05:16,070 --> 00:05:19,694
what do we do during the analysis, how to conduct debrief

59
00:05:19,742 --> 00:05:23,154
that we're talking about and the follow up, which is

60
00:05:23,192 --> 00:05:26,806
just as important. Now, why am I focusing so much on

61
00:05:26,828 --> 00:05:30,706
the process? And the reason is a bad system will beat

62
00:05:30,818 --> 00:05:34,630
a good person every time, just like this great quote

63
00:05:35,290 --> 00:05:38,902
says. And assuming you have the right foundation of engineers

64
00:05:39,046 --> 00:05:42,762
on your team, if you fix the process, good things

65
00:05:42,816 --> 00:05:46,646
will follow. So I'll

66
00:05:46,678 --> 00:05:49,386
start with an example of an issue that we has.

67
00:05:49,568 --> 00:05:53,086
We had a customer complaining that something was misbehaving in

68
00:05:53,108 --> 00:05:56,574
their environment and they thought that it might be related to

69
00:05:56,612 --> 00:06:00,746
us. So they called support. Support was trying to analyze

70
00:06:00,778 --> 00:06:04,286
and understand and after a while they realized they don't know

71
00:06:04,308 --> 00:06:07,426
what to do with it. So they paged the engineering team as they

72
00:06:07,608 --> 00:06:11,074
should have done. Now, the engineering team woke up

73
00:06:11,112 --> 00:06:14,846
in the middle of the night. Since they are in a different time zone,

74
00:06:15,038 --> 00:06:18,610
they work to analyze what's going on. They found the problem.

75
00:06:18,680 --> 00:06:22,194
They fixed the problem with a bit of resentment

76
00:06:22,242 --> 00:06:25,606
of having to do it in the middle of the night and then going back

77
00:06:25,628 --> 00:06:28,646
to sleep, moving on to other tasks the next day.

78
00:06:28,828 --> 00:06:31,754
Now, if this is the end of it, on the next day,

79
00:06:31,872 --> 00:06:35,082
we are certain to experience similar issues again

80
00:06:35,136 --> 00:06:38,860
and again from other similar root causes in the future.

81
00:06:39,870 --> 00:06:43,054
So we did a debrief and I'll explain in a bit

82
00:06:43,252 --> 00:06:46,922
how we did it and what exactly we asked, but apparently

83
00:06:47,066 --> 00:06:51,166
code was deployed into production by mistake. How can

84
00:06:51,188 --> 00:06:54,698
that be? An engineer merged their code into the

85
00:06:54,724 --> 00:06:58,366
main branch. It failed some tests and it was late,

86
00:06:58,478 --> 00:07:02,670
so he decided to leave it as is and keep working on it tomorrow,

87
00:07:02,830 --> 00:07:06,006
knowing it will not happen, knowing it won't be

88
00:07:06,028 --> 00:07:09,126
deployed. What he didn't know was there

89
00:07:09,148 --> 00:07:13,698
was a process added earlier that week by a DevOps engineer

90
00:07:13,794 --> 00:07:18,634
that automatically deployed that microservice when

91
00:07:18,672 --> 00:07:22,346
there was a need to auto scale. And that night we

92
00:07:22,368 --> 00:07:25,606
has a significant increase in usage,

93
00:07:25,718 --> 00:07:29,386
spinning up more services automatically with

94
00:07:29,408 --> 00:07:33,360
the new features of the auto scale. And that came with the buggy code.

95
00:07:33,730 --> 00:07:37,438
Therefore, we can ask, why is this happening?

96
00:07:37,604 --> 00:07:41,406
What can we do better? How can we avoid seeing such an issue and

97
00:07:41,428 --> 00:07:43,940
any potential similar issues in the future?

98
00:07:44,550 --> 00:07:47,934
And the way to do that is to set time to analyze

99
00:07:47,982 --> 00:07:51,726
after the fact and to look for the actual root

100
00:07:51,758 --> 00:07:55,166
cause that initiated this chain

101
00:07:55,198 --> 00:07:59,974
of events, lessons can be taken and learned from back

102
00:08:00,012 --> 00:08:03,766
to our example. We can focus a lot on why the

103
00:08:03,788 --> 00:08:07,266
buggy code was merged into production or why the auto scale

104
00:08:07,298 --> 00:08:10,890
was added and different engineers didn't know everything

105
00:08:10,960 --> 00:08:14,506
that has changing. But if we focus too much

106
00:08:14,608 --> 00:08:16,860
on why somebody did something,

107
00:08:17,550 --> 00:08:20,814
we will miss the bigger picture, which is wait

108
00:08:20,852 --> 00:08:24,062
a minute, the entire deployment process was

109
00:08:24,116 --> 00:08:27,946
flawed. How can it be that merging

110
00:08:27,978 --> 00:08:33,466
code into production doesn't ring a bell that it's

111
00:08:33,498 --> 00:08:37,086
going to be deployed? And when I'm saying merging into production,

112
00:08:37,118 --> 00:08:40,798
I mean merging into the main branch. Every branch or every repository

113
00:08:40,894 --> 00:08:44,930
names should have some kind of meaning and

114
00:08:45,000 --> 00:08:48,600
that was the root cause in this case. So if you fix the process,

115
00:08:49,050 --> 00:08:52,722
and again, going back to our example, aligning all engineers,

116
00:08:52,786 --> 00:08:56,754
that main branch always equal production regardless

117
00:08:56,802 --> 00:09:00,666
of it's being automatically deployed or not. That will

118
00:09:00,768 --> 00:09:04,714
change the way they approach merging that code and

119
00:09:04,752 --> 00:09:08,442
how it's tested, and not

120
00:09:08,496 --> 00:09:12,170
leaving buggy code in the main branch

121
00:09:13,890 --> 00:09:17,546
when it happens. So if you fix the process and we don't

122
00:09:17,578 --> 00:09:21,326
overjudge why a specific employee did or didn't do something since they

123
00:09:21,348 --> 00:09:24,770
were just trying to do their job, we will

124
00:09:24,840 --> 00:09:26,900
have an improvement later on.

125
00:09:30,470 --> 00:09:33,646
So how do you learn from the incident? There are four steps.

126
00:09:33,758 --> 00:09:37,730
It starts with the incident and the more features you become has an organization.

127
00:09:37,890 --> 00:09:41,394
The team will create an incident from supposedly minor

128
00:09:41,442 --> 00:09:44,486
things just to follow up and learn from them.

129
00:09:44,588 --> 00:09:48,934
And you provide the immediate resolution to the issue and

130
00:09:48,972 --> 00:09:52,682
that obviously will change on every issue. Then comes the process of

131
00:09:52,736 --> 00:09:56,490
24 to 72 hours afterwards, really depending on

132
00:09:56,560 --> 00:09:59,594
how much time they had to sleep or if it has a weekend in the

133
00:09:59,632 --> 00:10:02,938
middle. You're going to do the debrief and we're

134
00:10:02,954 --> 00:10:06,894
going to talk about what happened exactly within that meeting in the next

135
00:10:06,932 --> 00:10:10,250
slide. And then two weeks after the meeting,

136
00:10:10,330 --> 00:10:14,074
after the debriefs is being conducted, we do a checkpoint

137
00:10:14,122 --> 00:10:17,794
to review the action items that came from the debriefs, make sure things

138
00:10:17,832 --> 00:10:21,646
were incorporated, and this is especially important for the immediate tasks

139
00:10:21,678 --> 00:10:26,070
that came out of it, and a follow up to see that they were implemented

140
00:10:26,890 --> 00:10:31,186
straight on. Now, what is so special about conducting

141
00:10:31,218 --> 00:10:35,106
a debriefs? We need to remember it's not just a standard retrospect,

142
00:10:35,218 --> 00:10:38,662
since it usually follows an incident that may have been very

143
00:10:38,716 --> 00:10:42,490
severe or had a lot of impact and tensions are high,

144
00:10:42,560 --> 00:10:45,798
people are worried or concerned, maybe even judgy.

145
00:10:45,894 --> 00:10:49,290
So we need to take that in mind when we're going into the meeting.

146
00:10:50,110 --> 00:10:53,614
When do we do the debrief? Every time we think the

147
00:10:53,652 --> 00:10:56,654
process or the system did not perform well enough.

148
00:10:56,772 --> 00:11:00,286
So any incident is a

149
00:11:00,308 --> 00:11:03,680
good case to pick on and try to learn from.

150
00:11:04,130 --> 00:11:07,474
We ask a lot of questions. The questions I like

151
00:11:07,512 --> 00:11:10,866
to ask is, first of all, what happened? Let's have a

152
00:11:10,888 --> 00:11:14,180
detailed timeline of events from the moment it really started,

153
00:11:15,030 --> 00:11:19,346
and not just the moment somebody complained or the customer raised

154
00:11:19,378 --> 00:11:22,854
the alarm, but from the moment the issue started. Going back to

155
00:11:22,892 --> 00:11:27,014
our example, it's when somebody merged the code.

156
00:11:27,132 --> 00:11:30,534
That's when the story really started to unfold

157
00:11:30,582 --> 00:11:33,930
on that day. Or maybe

158
00:11:34,000 --> 00:11:37,498
the third party provider failed or something changed in the

159
00:11:37,504 --> 00:11:41,542
system. But try to go back to the most relevant

160
00:11:41,686 --> 00:11:45,280
starting point, not the Terry history, obviously.

161
00:11:46,210 --> 00:11:49,642
What is the impact? Also, a very important factor

162
00:11:49,706 --> 00:11:53,234
in creating a learning environment is trying to

163
00:11:53,272 --> 00:11:57,060
understand the full impact. It helps convey a message to

164
00:11:58,150 --> 00:12:01,746
the entire engineering team. Understanding the

165
00:12:01,928 --> 00:12:06,014
impact to cost or customers affected, or complaints,

166
00:12:06,142 --> 00:12:09,462
getting a full scope as big as you can.

167
00:12:09,596 --> 00:12:13,074
It's vital to help everyone understand why we're delving

168
00:12:13,122 --> 00:12:16,866
into the problem and why it is so important. And it's

169
00:12:16,898 --> 00:12:20,582
not just that they woke up or we disturbed their regular

170
00:12:20,646 --> 00:12:23,882
work schedule. It really brings everyone

171
00:12:23,936 --> 00:12:27,658
together on why is it important to find the

172
00:12:27,664 --> 00:12:30,602
root cause and fix it. Now,

173
00:12:30,656 --> 00:12:34,046
after we have the story and the facts, we want to start to analyze and

174
00:12:34,068 --> 00:12:36,720
brainstorm how to handle that better in the future.

175
00:12:37,170 --> 00:12:41,118
Now, the first two questions here I like to ask

176
00:12:41,204 --> 00:12:44,386
is, have we identified the issue in under

177
00:12:44,408 --> 00:12:48,514
a certain amount of time? Let's say five minutes.

178
00:12:48,712 --> 00:12:52,686
Why five minutes? It's not just an arbitrary

179
00:12:52,878 --> 00:12:56,934
number. We want to have a specific goal on how fast we do

180
00:12:56,972 --> 00:13:01,254
things. Having that in mind helps understand if

181
00:13:01,292 --> 00:13:04,710
we achieved it or not. So, did we identify the issue

182
00:13:04,780 --> 00:13:07,846
in under five minutes? Sometimes we did, sometimes we

183
00:13:07,868 --> 00:13:11,500
didn't. Did we fix the problem in under an hour?

184
00:13:12,270 --> 00:13:15,802
Completely fixed it. Maybe we fixed it under ten minutes.

185
00:13:15,936 --> 00:13:20,278
Do we need to do anything at all? Maybe it was completely resolved automatically

186
00:13:20,374 --> 00:13:24,240
and there was no point of us on us trying to analyze anything.

187
00:13:25,490 --> 00:13:28,830
Once we answer no to any of these questions,

188
00:13:28,980 --> 00:13:32,830
the follow up should be okay, we understand

189
00:13:32,900 --> 00:13:36,850
the full picture. What do we need to do? What do we need to change?

190
00:13:36,920 --> 00:13:41,106
What do we need to develop so we'll be eligible to answer yes

191
00:13:41,288 --> 00:13:45,514
to those two questions of identifying and fixing.

192
00:13:45,662 --> 00:13:48,680
Now, this part, while seemingly simple,

193
00:13:49,290 --> 00:13:53,046
led to a drastic culture change over time. It set a

194
00:13:53,068 --> 00:13:57,430
framework in the way it helps convey everyone

195
00:13:57,580 --> 00:14:01,226
on what is the most important thing. What should we

196
00:14:01,248 --> 00:14:04,906
focus on? That was the process and the system. It's not

197
00:14:04,928 --> 00:14:08,826
just about anyone specific. Whoever caused the

198
00:14:08,848 --> 00:14:12,734
incident is irrelevant. Tomorrow it can be somebody else.

199
00:14:12,852 --> 00:14:16,350
So it's the repetition and the

200
00:14:16,420 --> 00:14:19,626
specific question, the way they are constructed,

201
00:14:19,738 --> 00:14:23,854
that really helps drive a

202
00:14:23,892 --> 00:14:27,360
process of change and learning.

203
00:14:29,730 --> 00:14:33,438
Now, any culture change takes time.

204
00:14:33,524 --> 00:14:36,774
It's never simple. We has some things

205
00:14:36,812 --> 00:14:40,166
we had to resolve along the way, and I already mentioned a few

206
00:14:40,188 --> 00:14:44,834
of those throughout

207
00:14:44,882 --> 00:14:47,880
this talk, but I want to jump into a few more.

208
00:14:48,250 --> 00:14:52,186
First is lack of trust. You have a new manager on board.

209
00:14:52,288 --> 00:14:56,026
He's coming in, trying to instill new process, trying to change the

210
00:14:56,048 --> 00:14:59,802
culture. It takes time. A lack of trust could be

211
00:14:59,856 --> 00:15:03,390
in the process, could be in the questions people

212
00:15:03,460 --> 00:15:06,750
could ask themselves. Maybe. Is there a hidden agenda behind

213
00:15:06,820 --> 00:15:10,526
that? Perhaps. Maybe it's just another way to do the

214
00:15:10,548 --> 00:15:14,590
blame game, but in a different format.

215
00:15:15,830 --> 00:15:19,506
Now, this can be completely avoided and resolved if we

216
00:15:19,528 --> 00:15:21,970
do it properly and consistently.

217
00:15:24,070 --> 00:15:27,670
Another thing that can happen when you're trying to understand a problem

218
00:15:27,820 --> 00:15:31,174
is people saying he or she did something and

219
00:15:31,212 --> 00:15:34,806
they are at fault. Going into the blame game. When you

220
00:15:34,828 --> 00:15:39,346
see that happens, you need to stop that direction

221
00:15:39,378 --> 00:15:43,114
of discussion and put everybody back on track of what you are trying

222
00:15:43,152 --> 00:15:46,218
to achieve. And what were the specific questions we are asking?

223
00:15:46,384 --> 00:15:50,026
It's not why they did something, it is what happened

224
00:15:50,128 --> 00:15:52,000
and what do we need to change?

225
00:15:54,530 --> 00:15:58,334
Not following up on action items, that's something that

226
00:15:58,372 --> 00:16:01,406
can really be annoying. We do the process, we do the

227
00:16:01,428 --> 00:16:05,786
review. We set up action items to fix everything to

228
00:16:05,828 --> 00:16:09,698
get better, and then you have the same problem all over again a

229
00:16:09,704 --> 00:16:12,626
few weeks or months later. How did it happen?

230
00:16:12,808 --> 00:16:16,574
Basically, we set the action items, but nobody

231
00:16:16,622 --> 00:16:20,342
followed up on them. So the resolution there might be very

232
00:16:20,396 --> 00:16:24,086
simple. We did the checkpoint, we did

233
00:16:24,108 --> 00:16:27,590
the debrief, and then we set a checkpoint every two or three weeks or whatever

234
00:16:27,660 --> 00:16:31,770
time frame is relevant for you to make sure those items

235
00:16:32,110 --> 00:16:34,922
get handled. Also,

236
00:16:34,976 --> 00:16:38,922
what we specifically did was label each Jira ticket with

237
00:16:38,976 --> 00:16:43,226
debrief so we can do also a monthly review of all the debrief items

238
00:16:43,258 --> 00:16:46,894
to see what was left open, maybe relevant. Maybe something can be

239
00:16:46,932 --> 00:16:50,570
moved, pushed further in the backlog.

240
00:16:50,650 --> 00:16:55,726
But it gave us the ability to track if things were actually being followed

241
00:16:55,758 --> 00:16:59,950
up on or not. Another critical

242
00:17:00,030 --> 00:17:04,690
move we made was implementing

243
00:17:05,370 --> 00:17:08,438
proper communication on a wide scale. You need

244
00:17:08,444 --> 00:17:11,890
to make sure everybody knows that there was a debrief.

245
00:17:12,050 --> 00:17:15,890
We were publishing all our debriefs internally, very widely

246
00:17:15,970 --> 00:17:19,746
inside the company, exposed to everyone with the details of

247
00:17:19,788 --> 00:17:23,414
what happened and what are we going to do to make it better. This helps

248
00:17:23,462 --> 00:17:27,082
bridge the gap of trust and show that everything is very

249
00:17:27,136 --> 00:17:31,006
transparent and visible trying to

250
00:17:31,028 --> 00:17:34,734
fix problems. We also saw that

251
00:17:34,772 --> 00:17:37,950
if we're not asking the right questions during the process.

252
00:17:38,100 --> 00:17:41,566
We might be narrowing tools much on the

253
00:17:41,588 --> 00:17:45,234
problem and we should look broader at how things

254
00:17:45,272 --> 00:17:49,566
could be connected and relevant in a bigger picture. So not just focusing on smaller

255
00:17:49,598 --> 00:17:53,300
things. Again, using back to the example that I gave,

256
00:17:53,830 --> 00:17:57,186
not focusing on the repository

257
00:17:57,298 --> 00:18:00,774
that was changed, but asking do we have

258
00:18:00,812 --> 00:18:04,280
other repositories? Is this a global issue of

259
00:18:05,530 --> 00:18:07,560
any repository that we manage?

260
00:18:11,620 --> 00:18:15,104
Now there are four main things I would like you to take

261
00:18:15,222 --> 00:18:19,116
from this session of how to conduct a debrief besides

262
00:18:19,148 --> 00:18:22,132
the questions and the repetition. And it's these four.

263
00:18:22,266 --> 00:18:26,736
The first is avoid blame. Avoid it altogether,

264
00:18:26,848 --> 00:18:30,484
and if you see blame starting to happen within the meeting, you have

265
00:18:30,522 --> 00:18:33,060
to interfere and stop it politely.

266
00:18:33,800 --> 00:18:37,672
Always be calm, but you need to stop it to make sure it's on

267
00:18:37,726 --> 00:18:41,316
track and meeting. Go the way you want it. Because if there is a vision

268
00:18:41,348 --> 00:18:45,210
of how it's going to happen later on when you're instilling the change,

269
00:18:45,900 --> 00:18:50,072
it will happen on its own without even being needed to be involved

270
00:18:50,136 --> 00:18:53,870
in the process. And those meetings after a while

271
00:18:54,880 --> 00:18:58,012
go easy on the why questions. There is the model

272
00:18:58,066 --> 00:19:01,600
of the five whys. It's a risky one

273
00:19:01,670 --> 00:19:05,344
because when you're trying to understand why

274
00:19:05,382 --> 00:19:09,136
somebody did something, the more you dive into it. And if you

275
00:19:09,158 --> 00:19:12,996
ask too many times why, you might create a

276
00:19:13,018 --> 00:19:16,192
sense of resentment or self doubt for the employees.

277
00:19:16,256 --> 00:19:20,132
It can sound like you're being critical and judging them

278
00:19:20,266 --> 00:19:24,410
on how they behaved and why they were doing certain things.

279
00:19:25,500 --> 00:19:28,680
Be consistent, crucial. The key

280
00:19:28,750 --> 00:19:32,520
in creating a process and proving you really

281
00:19:32,670 --> 00:19:36,324
do mean what you say is consistency on the

282
00:19:36,382 --> 00:19:40,204
process, the questions and everything. And like

283
00:19:40,242 --> 00:19:43,644
I said, keep calm. It's always important,

284
00:19:43,762 --> 00:19:47,052
especially when you're looking at things that failed to stay

285
00:19:47,106 --> 00:19:51,004
calm. Show there is a path forward. It always helps

286
00:19:51,052 --> 00:19:53,200
in creating a better change environment.

287
00:19:55,780 --> 00:19:59,740
Now these are some of the most notable learnings

288
00:19:59,900 --> 00:20:04,032
we had from those processes over the years. I'll touch

289
00:20:04,086 --> 00:20:07,840
briefly on a few of those, but they really are the highlight

290
00:20:07,920 --> 00:20:11,316
of action items that we'll learn from along the

291
00:20:11,338 --> 00:20:14,736
way. Also, you can scan

292
00:20:14,768 --> 00:20:18,616
the template of our debriefs format in this

293
00:20:18,718 --> 00:20:20,650
URL if you want to see it,

294
00:20:21,820 --> 00:20:25,400
and I'll go over the examples briefly.

295
00:20:25,980 --> 00:20:29,484
First one obviously humans make mistakes. You need to fix

296
00:20:29,522 --> 00:20:32,824
the process and not trying to fix people that won't

297
00:20:32,872 --> 00:20:36,120
work because they work hard, they're smart,

298
00:20:36,200 --> 00:20:39,712
but everybody makes mistakes, so assume mistakes can happen.

299
00:20:39,846 --> 00:20:43,084
Fix the process of protecting from potential

300
00:20:43,132 --> 00:20:46,556
mistakes. Gradual rollout,

301
00:20:46,748 --> 00:20:50,044
while often appears to be some holy

302
00:20:50,092 --> 00:20:53,744
grail of microservices and large scale production systems

303
00:20:53,872 --> 00:20:57,296
it's a great tool, but it's not a silver bullet

304
00:20:57,408 --> 00:21:01,430
and it will not resolve everything. So saying it will

305
00:21:02,120 --> 00:21:05,608
miss a lot of potential problems that even when you

306
00:21:05,614 --> 00:21:09,624
have gradual rollout, you will still miss them. So don't try

307
00:21:09,662 --> 00:21:11,960
to fix everything with this hammer.

308
00:21:13,100 --> 00:21:16,628
Establish crisis mode processes very important.

309
00:21:16,734 --> 00:21:20,748
There are levels of issues and when

310
00:21:20,914 --> 00:21:24,252
the shits hit the fan, you want to know who to call,

311
00:21:24,306 --> 00:21:27,704
who to wake up and how things should operate.

312
00:21:27,832 --> 00:21:31,152
Having those crisis mode processes ahead of time

313
00:21:31,206 --> 00:21:34,624
really helps everyone understand what they should do at the

314
00:21:34,662 --> 00:21:38,672
moment. Feature flagging really

315
00:21:38,726 --> 00:21:41,090
helpful in terms of handling errors quickly.

316
00:21:42,120 --> 00:21:45,604
One of the things that you can do is disable a certain feature instead of

317
00:21:45,642 --> 00:21:48,470
rolling out or rolling back an entire system,

318
00:21:49,240 --> 00:21:52,580
especially when you have thousands of dockers.

319
00:21:54,280 --> 00:21:57,736
Feature flagging and changing config on all of them can

320
00:21:57,758 --> 00:22:01,640
be much faster than redeploying thousands of servers.

321
00:22:03,100 --> 00:22:06,824
Now we always try to avoid replacing

322
00:22:06,872 --> 00:22:10,590
something that we need to change since

323
00:22:11,040 --> 00:22:14,152
a lot of components are loosely coupled.

324
00:22:14,296 --> 00:22:17,852
So every time we want to change something, we are looking

325
00:22:17,906 --> 00:22:21,964
into is it really a change or is it a dual change? If you're

326
00:22:22,012 --> 00:22:25,392
adding and subtracting at the same time, you're actually doing two

327
00:22:25,446 --> 00:22:29,712
changes at once. So try to limit that. Add something,

328
00:22:29,846 --> 00:22:33,652
see that everything works, subtract later and see that everything

329
00:22:33,706 --> 00:22:37,904
still works. Splitting those can really help focus and narrow

330
00:22:37,952 --> 00:22:41,972
down potential issues. Looking for the ten x breaking point

331
00:22:42,106 --> 00:22:46,088
also very important. Looking ahead, trying to understand

332
00:22:46,254 --> 00:22:49,816
when can something fail and what will

333
00:22:49,838 --> 00:22:53,690
be the breaking point of that specific part of the system.

334
00:22:54,140 --> 00:22:57,996
And last but not least, treating config as code.

335
00:22:58,098 --> 00:23:01,230
Configuration metadata, everything that

336
00:23:01,760 --> 00:23:05,150
can affect the system if you treat it as code,

337
00:23:05,840 --> 00:23:09,400
add the pr, review the deployment processes,

338
00:23:09,480 --> 00:23:13,352
the rollback processes around it really helps stabilize

339
00:23:13,416 --> 00:23:17,500
everything around the system. Thank you for listening.

340
00:23:18,000 --> 00:23:22,036
It was a pleasure talking about this and and I

341
00:23:22,058 --> 00:23:26,036
hope I gave you something to work with and a new process that you can

342
00:23:26,058 --> 00:23:29,556
use for your production environment. Feel free to ping me

343
00:23:29,578 --> 00:23:33,444
on any of these mediums and ask questions about

344
00:23:33,482 --> 00:23:34,340
the subject.

