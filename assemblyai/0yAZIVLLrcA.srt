1
00:01:54,010 --> 00:01:57,854
At Devopsace Eindhoven this year, I suggested an open space about

2
00:01:57,892 --> 00:02:01,482
how Devsecops is just a band aid for a bullet wound.

3
00:02:01,626 --> 00:02:05,510
After a talk about supply chain security tools, I know

4
00:02:05,580 --> 00:02:10,230
a risky move, and now I'm telling you about it at this Devsecup conference.

5
00:02:10,570 --> 00:02:14,374
Anyway, I opened with while we should certainly

6
00:02:14,572 --> 00:02:18,478
scan our code for vulnerabilities, and ideally have those checks

7
00:02:18,514 --> 00:02:21,866
be automated, we should also invest in mitigating some

8
00:02:21,888 --> 00:02:25,382
of the root causes for vulnerabilities creeping into our code bases

9
00:02:25,446 --> 00:02:27,740
through open source use in the first place,

10
00:02:28,190 --> 00:02:31,182
shifting devsecops further left,

11
00:02:31,236 --> 00:02:34,350
if you will. And I don't mean Sec DevOps.

12
00:02:35,170 --> 00:02:39,006
So one of the people in the room mentioned that

13
00:02:39,188 --> 00:02:43,074
just having a mirror of all of components in use as

14
00:02:43,112 --> 00:02:46,466
a solution, which congratulations, you're now the

15
00:02:46,488 --> 00:02:49,682
maintainer of a bunch of mirrors. But also

16
00:02:49,816 --> 00:02:53,554
sometimes vulnerabilities are in our code bases for

17
00:02:53,592 --> 00:02:58,002
many weeks, months or even years before anyone notices.

18
00:02:58,146 --> 00:03:01,080
So new releases bring fixes as well.

19
00:03:03,370 --> 00:03:07,270
In this modern world, we rely on a lot of components to make our stuff

20
00:03:07,340 --> 00:03:10,826
work and make it continue to work. I know you know this

21
00:03:10,848 --> 00:03:14,154
to be true, but I will also bring you some stats the

22
00:03:14,192 --> 00:03:17,754
2022 Austra open source security and risk report

23
00:03:17,872 --> 00:03:21,198
produced by the Synopsis Cybersecurity Research center

24
00:03:21,364 --> 00:03:25,882
examines the results of over 2400 commercial

25
00:03:25,946 --> 00:03:30,494
code bases and the audit came back that 97%

26
00:03:30,532 --> 00:03:33,326
of those contained open source software.

27
00:03:33,518 --> 00:03:37,534
Four of the 17 industries that were represented

28
00:03:37,582 --> 00:03:40,830
in this report, computer hardware and semiconductors,

29
00:03:40,910 --> 00:03:44,302
cybersecurity, energy and clean tech and IoT,

30
00:03:44,446 --> 00:03:48,626
contained open source in 100% of their audited code bases.

31
00:03:48,818 --> 00:03:52,022
The remaining verticals had open source in 93%

32
00:03:52,076 --> 00:03:56,230
to 97% or sorry, 99% of their code bases.

33
00:03:58,090 --> 00:04:02,186
Large enterprises rely on libraries that are maintained by a single individual that

34
00:04:02,208 --> 00:04:05,914
is in over their head. Sometimes projects are handed over to

35
00:04:05,952 --> 00:04:09,130
other maintainers who don't always have the best of intentions.

36
00:04:09,630 --> 00:04:13,054
Individuals or organizations may restrict the use of their technology

37
00:04:13,172 --> 00:04:17,002
or end of life versions of their software, posing real challenges

38
00:04:17,066 --> 00:04:21,006
for organizations who rely on that software. So how

39
00:04:21,028 --> 00:04:25,090
can we contribute to the viability and sustainability of open source?

40
00:04:26,230 --> 00:04:29,266
Hi, my name is Flor, I'm based in the Netherlands. I'm a

41
00:04:29,288 --> 00:04:33,118
staff developer advocate at Aiven IO. We manage your favorite

42
00:04:33,214 --> 00:04:37,174
data tools open source data tools without exploiting the projects or their

43
00:04:37,212 --> 00:04:40,546
maintainers. Previously I worked in developer

44
00:04:40,578 --> 00:04:44,438
relation roles at Grafana Lamps and at Microsoft. I'm a

45
00:04:44,444 --> 00:04:48,326
Devopsdays code member and I organize the DevOps days Amsterdam

46
00:04:48,358 --> 00:04:51,638
and DevOps days Eindhoven city chapters.

47
00:04:51,814 --> 00:04:55,786
I am a Microsoft MVP for developer technologies and I

48
00:04:55,808 --> 00:04:59,082
organize a bunch of meetups, including but not limited to

49
00:04:59,136 --> 00:05:02,734
contributing today. Devrel Solon, Amsterdam and

50
00:05:02,772 --> 00:05:04,670
the Amsterdam ruby meetup.

51
00:05:06,850 --> 00:05:10,446
So what are some of the issues that we see in open source? One of

52
00:05:10,468 --> 00:05:14,318
the issues is relicensing projects relicense

53
00:05:14,334 --> 00:05:17,666
in order to avoid free writing, to make sure

54
00:05:17,688 --> 00:05:21,154
that bad people can't use our code to do even more bad or

55
00:05:21,192 --> 00:05:24,946
to alleviate responsibility. Another issue is

56
00:05:25,048 --> 00:05:28,434
the projects that are maintained by the proverbial

57
00:05:28,482 --> 00:05:32,066
single individual in Nebraska. That's a shout out to the XKCD

58
00:05:32,098 --> 00:05:35,794
comic that you see on the slide. While Curl

59
00:05:35,842 --> 00:05:39,814
is successfully maintained by Daniel Stenberg mostly in his lonesome, for every

60
00:05:39,852 --> 00:05:43,406
curl there is a log for J. And with every mpm

61
00:05:43,458 --> 00:05:47,382
library that you bring in, you bring in a whole host of MPM libraries

62
00:05:47,526 --> 00:05:51,360
and their transitive licenses and

63
00:05:51,730 --> 00:05:56,430
possible vulnerabilities too. Lack of resources

64
00:05:57,890 --> 00:06:01,242
prevent maintainers from spending the time that a project warrant,

65
00:06:01,306 --> 00:06:04,450
given how businesses depend on it globally,

66
00:06:04,790 --> 00:06:08,706
and maintainers can make rash decisions. They're much like other humans in

67
00:06:08,728 --> 00:06:12,494
that way. We've seen maintainers

68
00:06:12,542 --> 00:06:16,546
pull their code to avoid it from being used by the likes of ICE,

69
00:06:16,658 --> 00:06:20,674
the US Immigration and Customs Enforcement, or more recently,

70
00:06:20,722 --> 00:06:23,894
to protest Russia's attack on

71
00:06:23,932 --> 00:06:27,702
Ukraine. Are these

72
00:06:27,756 --> 00:06:30,646
the only issues that are plaguing open source?

73
00:06:30,838 --> 00:06:34,314
No, I don't think so. I would love to see open source be

74
00:06:34,352 --> 00:06:38,266
a more inclusive and equitable space,

75
00:06:38,448 --> 00:06:42,338
but for the next 30 minutes or so, let's look at some of those licenses.

76
00:06:42,534 --> 00:06:46,314
License changes, maintainer drain, and the rise in supply chain

77
00:06:46,362 --> 00:06:49,614
attacks in recent years,

78
00:06:49,652 --> 00:06:52,794
we've seen an increase in kinda open source licenses.

79
00:06:52,922 --> 00:06:56,158
Let's have a look at some of those licenses. The Commons

80
00:06:56,174 --> 00:06:59,762
Clause aims to restrict commercial free writing on open source code,

81
00:06:59,896 --> 00:07:03,620
especially cloud service providers who don't give back to the FOSS community.

82
00:07:04,150 --> 00:07:07,394
Commons clause conflicts with the FSD, which is the right to use software

83
00:07:07,442 --> 00:07:11,746
for any purpose, and the OSD, the open source definition,

84
00:07:11,938 --> 00:07:15,334
in that the license shall not restrict any party from selling or giving

85
00:07:15,372 --> 00:07:19,382
away the software. There is a bunch of ambiguous

86
00:07:19,446 --> 00:07:23,130
wording in the Commons clause like value

87
00:07:23,200 --> 00:07:26,266
derived entirely or substantially because what is

88
00:07:26,288 --> 00:07:29,798
considered substantial. Mongo used the Commons

89
00:07:29,814 --> 00:07:33,838
clause for a while, as did Redis labs, which combined it with the

90
00:07:34,004 --> 00:07:37,120
Apache license. So it was a dual license, which is anyway

91
00:07:37,490 --> 00:07:41,038
tricky business, and both moved to a nonstandard available

92
00:07:41,124 --> 00:07:44,210
source or cloud restricted licenses afterwards.

93
00:07:45,270 --> 00:07:48,946
So in Mongo's case, MongoDB moved to SSPL in

94
00:07:48,968 --> 00:07:53,154
2018, which is kind of like GPL but with

95
00:07:53,192 --> 00:07:57,010
restrictions, and it's not approved by the open source initiatives

96
00:07:57,090 --> 00:08:01,010
who are the stewards of the open source definition SSPL

97
00:08:01,090 --> 00:08:04,870
forces wide copy left impact on the cloud infrastructure.

98
00:08:05,370 --> 00:08:08,454
Its justification again is that notice or

99
00:08:08,492 --> 00:08:12,134
this notion that large cloud vendors capture all the value but contribute

100
00:08:12,182 --> 00:08:15,894
nothing back to the community. In this case, it was directed at Amazon

101
00:08:15,942 --> 00:08:19,126
Web Services in particular. Then there is the Redis

102
00:08:19,158 --> 00:08:22,618
source available license for certain redis modules created

103
00:08:22,634 --> 00:08:26,282
by Redis, while code redis remains under the BSD

104
00:08:26,346 --> 00:08:29,626
three, the TLDR is that Redis

105
00:08:29,658 --> 00:08:32,950
source available is a license to do all the usual actions.

106
00:08:33,130 --> 00:08:37,422
So use, modify, distribute, copy and sublicense except

107
00:08:37,486 --> 00:08:40,818
when your application is distributed or made available

108
00:08:40,904 --> 00:08:45,006
as a database product. So that would allow the

109
00:08:45,048 --> 00:08:48,646
community to develop their own applications but not distributed or make

110
00:08:48,668 --> 00:08:52,134
available for use as in or

111
00:08:52,332 --> 00:08:56,390
as a database product. Because, you guessed it, cloud providers

112
00:08:57,550 --> 00:09:01,686
elastic 20 then again, you'll find clauses to prevent hosted

113
00:09:01,718 --> 00:09:04,620
or managed service providers from using the project.

114
00:09:05,150 --> 00:09:08,970
It is copy left like SSPL, but with straightforward

115
00:09:09,310 --> 00:09:12,766
prohibitions. So it prevents using elastic as part

116
00:09:12,788 --> 00:09:15,710
of a hosted or managed service provider.

117
00:09:16,450 --> 00:09:19,982
It prevents third parties obstructing trademarks or

118
00:09:20,036 --> 00:09:24,174
branding, and it can embed license keys to prevent

119
00:09:24,222 --> 00:09:27,220
circumvention, which is very much not an open source thing.

120
00:09:27,990 --> 00:09:31,154
Its impact was Elasticsearch Kibana. It all

121
00:09:31,192 --> 00:09:35,066
got removed from hosted surface infrastructures like Azure

122
00:09:35,118 --> 00:09:38,566
and AWS. Then there are some others

123
00:09:38,668 --> 00:09:42,450
like the timescale TSL,

124
00:09:42,530 --> 00:09:46,194
which basically says no timescale as a service, no forking,

125
00:09:46,322 --> 00:09:49,882
or the confluent community license with which

126
00:09:49,936 --> 00:09:53,622
you can use modify distribute unless that competes

127
00:09:53,686 --> 00:09:57,370
with confluence business, which could potentially be

128
00:09:57,440 --> 00:09:58,890
a moving target.

129
00:10:00,130 --> 00:10:04,586
There's also ethical licenses like the hippocratic license,

130
00:10:04,778 --> 00:10:08,762
which prohibits the use of software in the violation of internationally

131
00:10:08,826 --> 00:10:12,666
recognized human rights, or the Mi

132
00:10:12,698 --> 00:10:16,478
five, which makes an explicit connection between the license

133
00:10:16,654 --> 00:10:20,638
and a code of conduct. The ethical

134
00:10:20,734 --> 00:10:24,482
source working group says that over the past 20 years, open source community

135
00:10:24,536 --> 00:10:28,082
has come to thrive, enjoying wild success and

136
00:10:28,136 --> 00:10:31,042
permanently changed the technology landscape.

137
00:10:31,186 --> 00:10:34,914
But the world has also changed in the past two decades,

138
00:10:34,962 --> 00:10:38,954
and they think it's time for open source to evolve to meet the

139
00:10:39,072 --> 00:10:42,458
magnitude and complexity of today's social,

140
00:10:42,624 --> 00:10:45,290
political and technological challenges.

141
00:10:46,430 --> 00:10:49,794
Open source developers don't seem to have any records,

142
00:10:49,942 --> 00:10:53,470
no way to prevent their work from being used by

143
00:10:53,540 --> 00:10:57,006
people to harm others. And that's where that working group is

144
00:10:57,028 --> 00:10:58,400
determined to make a change.

145
00:11:01,650 --> 00:11:05,694
This tweet by former colleague at Microsoft

146
00:11:05,742 --> 00:11:09,586
Tierney hits right in the fuels for me.

147
00:11:09,768 --> 00:11:13,506
Tierney is a staff developer advocate at Twilio and

148
00:11:13,528 --> 00:11:16,030
works on code Electron,

149
00:11:16,190 --> 00:11:20,600
OpenJSF and NPM. The currently

150
00:11:21,770 --> 00:11:25,014
accepted community understanding of open source as a concept is

151
00:11:25,052 --> 00:11:28,378
fundamentally at odds with the open source definition provided by

152
00:11:28,384 --> 00:11:32,282
the open source initiatives is what Tierney says.

153
00:11:32,416 --> 00:11:36,358
And they go on to say that more specifically, the accepted community understanding

154
00:11:36,374 --> 00:11:40,382
of open source usually includes some level of

155
00:11:40,436 --> 00:11:43,898
humanity, users, community maintainers,

156
00:11:43,994 --> 00:11:46,350
and it's simply missing from the definition.

157
00:11:49,650 --> 00:11:53,234
If this hits you in the fields too, and you want to learn more about

158
00:11:53,272 --> 00:11:57,470
ethical source in particular, I suggest you check out ethicalsource

159
00:11:57,550 --> 00:12:01,380
dev because I won't go into it much, but I think it's wildly interesting.

160
00:12:07,610 --> 00:12:11,986
I know what you're thinking. Open source is not really about licenses,

161
00:12:12,098 --> 00:12:14,578
it's about community sharing, openness,

162
00:12:14,674 --> 00:12:18,006
freedom. Licensing was supposed to be just the instrument,

163
00:12:18,038 --> 00:12:20,700
right? A way to formalize the relationship.

164
00:12:22,190 --> 00:12:25,846
I think the discussion around the impact of cloud restricted

165
00:12:25,878 --> 00:12:29,354
licenses was an important one to have with

166
00:12:29,392 --> 00:12:32,734
the open source community. But I think we can all

167
00:12:32,772 --> 00:12:36,414
agree that cloud restricted licenses are not a way to save open

168
00:12:36,452 --> 00:12:39,950
source because they're taking the code and the project pipe.

169
00:12:41,250 --> 00:12:43,570
Maybe that's okay for those projects.

170
00:12:46,230 --> 00:12:50,350
Are these licenses really required for economic sustainability

171
00:12:50,430 --> 00:12:54,338
of a project? Mongo and elastic argue that yes,

172
00:12:54,504 --> 00:12:58,150
they felt used by cloud infrastructure service providers,

173
00:12:59,610 --> 00:13:03,254
but new Linux is used commercially also by

174
00:13:03,292 --> 00:13:07,174
everyone and they still have great community. Perhaps because of and not

175
00:13:07,212 --> 00:13:10,566
despite of MongoDB and elastic

176
00:13:10,598 --> 00:13:14,022
themselves were large companies in their own right before the license

177
00:13:14,086 --> 00:13:17,862
change. And even taking enforceability out of the picture,

178
00:13:18,006 --> 00:13:21,534
being and winning in cases of copyright or Pentagon infringement is

179
00:13:21,572 --> 00:13:25,166
actually really hard. Changing to a more restrictive license might

180
00:13:25,188 --> 00:13:28,750
cause companies and community members to walk away,

181
00:13:28,900 --> 00:13:32,240
which could be what is actually detrimental to a project

182
00:13:32,690 --> 00:13:36,754
and the ecosystem. They do prevent free

183
00:13:36,792 --> 00:13:40,274
writing, right? Like cloud providers have stopped using these services,

184
00:13:40,472 --> 00:13:44,146
but they also push the open source community to create alternatives or to

185
00:13:44,168 --> 00:13:46,230
move to open tools.

186
00:13:50,570 --> 00:13:54,562
So some argue that these projects, Mongo Elastic

187
00:13:54,626 --> 00:13:58,234
were never really open source to begin with, but I don't think I agree with

188
00:13:58,272 --> 00:14:01,994
that. I think they brought tremendous value to the community but then

189
00:14:02,032 --> 00:14:05,526
confused open source for their business model and couldn't reconcile

190
00:14:05,558 --> 00:14:08,330
with others making money over their businesses.

191
00:14:10,690 --> 00:14:12,670
Let's look at some more examples.

192
00:14:14,450 --> 00:14:18,222
Lightbend changed aka's license from Apache 2.0

193
00:14:18,276 --> 00:14:22,080
to the BSL version one one if you're interested,

194
00:14:22,690 --> 00:14:25,954
which is a business source license, and it would

195
00:14:25,992 --> 00:14:30,094
start with Aka 2.7, which was delivered

196
00:14:30,142 --> 00:14:33,746
last October. And with any such change there is talk of

197
00:14:33,768 --> 00:14:37,906
a fork. I've seen people advocating for foss with an aggressive copy

198
00:14:37,938 --> 00:14:41,794
left license so that the now proprietary licensed original can't

199
00:14:41,842 --> 00:14:44,550
make use of bug fixes to the fork.

200
00:14:45,210 --> 00:14:49,002
It remains the question how effective this would be and

201
00:14:49,056 --> 00:14:53,094
if hurting our fellow developers is anything but really misdirected

202
00:14:53,142 --> 00:14:57,542
and anger aka can't be replaced.

203
00:14:57,606 --> 00:15:00,814
There is a lot of projects that build on top

204
00:15:00,852 --> 00:15:04,270
of AKA. A disclaimer before we move forward.

205
00:15:04,420 --> 00:15:08,542
I work for a company that is very invested and

206
00:15:08,596 --> 00:15:12,474
involved in driving Opensearch forward as the open

207
00:15:12,532 --> 00:15:16,782
source alternative to elasticsearch. When elastic

208
00:15:16,846 --> 00:15:20,482
released the publication informing about the license change,

209
00:15:20,616 --> 00:15:24,142
a shockwave went through the community. Several players

210
00:15:24,206 --> 00:15:27,410
eventually decided to collaborate and fork Elasticsearch,

211
00:15:27,570 --> 00:15:29,110
including AWS,

212
00:15:32,970 --> 00:15:36,150
Apache, Kafka development. Kafka is also a project

213
00:15:36,220 --> 00:15:39,994
in Ivan's portfolio, or rather the decision of what makes it into

214
00:15:40,032 --> 00:15:43,020
that project is primarily in confluence hands.

215
00:15:44,030 --> 00:15:48,170
The single vendor issue is rather prevalent in open source

216
00:15:48,510 --> 00:15:52,234
databricks has a strong hold on sparks. Google and Beam

217
00:15:52,282 --> 00:15:54,240
is a very similar story as well.

218
00:15:55,970 --> 00:15:59,934
Grafana, Loki and Tempo relicence from Apache two

219
00:16:00,132 --> 00:16:03,870
to AGPL, which is an infectious copy left license.

220
00:16:04,530 --> 00:16:07,630
Google warns against using HTPL,

221
00:16:08,150 --> 00:16:12,210
saying that the risk heavily outweighed the benefits the cloud

222
00:16:12,360 --> 00:16:15,526
native Computing foundation so the CNCF, in response to the

223
00:16:15,548 --> 00:16:19,122
license change of third party dependencies to AGPL,

224
00:16:19,266 --> 00:16:22,386
encourages to either switch to an alternative component,

225
00:16:22,498 --> 00:16:25,766
to freeze the component at the version prior to

226
00:16:25,788 --> 00:16:29,980
the license change, or to seek an exception from the governing board.

227
00:16:30,910 --> 00:16:33,210
Needless to say, they're not big fans.

228
00:16:37,230 --> 00:16:40,774
If you install electron, you have to add 87

229
00:16:40,832 --> 00:16:45,066
packages, and that means 87 license dependencies.

230
00:16:45,258 --> 00:16:48,618
Every single package is likely to have their own dependencies

231
00:16:48,714 --> 00:16:51,994
as well, and therefore another license that you have to comply

232
00:16:52,042 --> 00:16:55,730
with. As you can imagine, license management

233
00:16:56,150 --> 00:17:00,238
can be done manually and when done incorrectly,

234
00:17:00,334 --> 00:17:03,842
can result in technical depth. There are

235
00:17:03,896 --> 00:17:07,106
over 300 open source software licenses,

236
00:17:07,138 --> 00:17:10,838
and that list is only growing. However, the good news is

237
00:17:10,924 --> 00:17:14,534
that around 20 licenses account for 80% of all

238
00:17:14,572 --> 00:17:19,010
the commonly used open source in enterprises.

239
00:17:19,170 --> 00:17:22,874
So a deny and allow list of those licenses, together with a

240
00:17:22,912 --> 00:17:26,694
scanning tool already provides a very good starting point in managing

241
00:17:26,742 --> 00:17:30,886
them. What you can do to help track licenses

242
00:17:30,918 --> 00:17:34,158
inside your code is the license auditor tool,

243
00:17:34,244 --> 00:17:37,440
which sends notification after spotting a potential problem.

244
00:17:38,050 --> 00:17:41,374
There's also a little cheat sheet, a link to a little cheat sheet on this

245
00:17:41,412 --> 00:17:45,154
slide where you can find, but more about what

246
00:17:45,192 --> 00:17:47,460
kind of different licenses there are.

247
00:17:50,310 --> 00:17:54,382
License litigation may end up forcing you to release code under the same license

248
00:17:54,446 --> 00:17:58,386
as the package dependency that you've used. Other potential

249
00:17:58,498 --> 00:18:01,954
problems include being sued for financial

250
00:18:02,002 --> 00:18:04,550
liability by the creator of the component,

251
00:18:06,410 --> 00:18:09,594
getting penalties and restrictions on selling your software until

252
00:18:09,632 --> 00:18:12,826
the compliance is met, or losing reputation and

253
00:18:12,848 --> 00:18:16,534
getting negative press coverage, certainly in more sensitive

254
00:18:16,662 --> 00:18:17,610
industries.

255
00:18:20,110 --> 00:18:23,358
I want to switch gears a little in 2021,

256
00:18:23,364 --> 00:18:27,242
a tight lift survey of 400 open source maintainers

257
00:18:27,306 --> 00:18:30,894
found that 46% of maintainers are not paid at

258
00:18:30,932 --> 00:18:34,014
all, and only 26% receive

259
00:18:34,062 --> 00:18:37,700
as much as $1,000 per year for maintenance work.

260
00:18:38,390 --> 00:18:41,966
Over half, 59%, have quit

261
00:18:41,998 --> 00:18:45,654
or considered quitting maintaining a project, and almost half

262
00:18:45,692 --> 00:18:48,966
of the respondents listed lack of financial compensations as

263
00:18:48,988 --> 00:18:52,310
one of their top reasons for disliking being a maintainer.

264
00:18:54,090 --> 00:18:57,490
Open source libraries enable you to move faster,

265
00:18:57,570 --> 00:19:01,466
but if they're poorly maintained, if they're not healthy, they become a

266
00:19:01,488 --> 00:19:05,062
single point of failure. The 2016

267
00:19:05,126 --> 00:19:08,970
example was leftbed. All that leftbed did is

268
00:19:09,040 --> 00:19:12,910
pad out the left hand side of strings with zeroer spaces.

269
00:19:13,250 --> 00:19:16,426
Still, thousands of projects, including node

270
00:19:16,458 --> 00:19:20,218
and Babel, relied on it with leftped removed

271
00:19:20,234 --> 00:19:24,242
by NPM by the maintainer of a spythe. These applications and

272
00:19:24,296 --> 00:19:27,966
widely used bits of open source infrastructure were unable to obtain

273
00:19:27,998 --> 00:19:31,502
the dependency and thus fell over during development

274
00:19:31,566 --> 00:19:34,718
and deployment. Leftpat's maintainer felt pushed

275
00:19:34,734 --> 00:19:38,178
in the corner by messaging Kick's lawyers

276
00:19:38,354 --> 00:19:41,910
over another one of his NPM libraries, also called Kick.

277
00:19:42,250 --> 00:19:46,530
The lawyers went to NPM admins, claiming brand infringement.

278
00:19:46,690 --> 00:19:50,582
When NPM took kick away from the developer, he was furious

279
00:19:50,646 --> 00:19:54,970
and then unpublished all of his NPM managed dependencies.

280
00:19:55,790 --> 00:20:00,006
The maintainer later said that the situation made him realize that NPM

281
00:20:00,038 --> 00:20:03,278
is someone's private land where corporate is more powerful than the

282
00:20:03,284 --> 00:20:06,814
people what happened to fix

283
00:20:06,852 --> 00:20:10,586
the Internet? Which was really not a hyperbole? Laurie Foss, who is the CTO

284
00:20:10,618 --> 00:20:14,514
and co founder of NPM, took the unprecedented step

285
00:20:14,632 --> 00:20:17,010
of restoring the unpublished library.

286
00:20:17,670 --> 00:20:21,538
NPM has forcibly resurrected that particular

287
00:20:21,624 --> 00:20:24,660
version to make sure that everyone's stuff kept running.

288
00:20:25,450 --> 00:20:29,394
Maybe had the Leftpad maintainer had access to representation,

289
00:20:29,522 --> 00:20:33,698
maybe by foundation, the Leftpad incident could have been prevented.

290
00:20:33,874 --> 00:20:37,234
This maintainer had over 200 libraries

291
00:20:37,282 --> 00:20:40,822
to his name. We need to give individuals

292
00:20:40,886 --> 00:20:44,506
incentives for staying in open source and maintaining the software we've come to

293
00:20:44,528 --> 00:20:46,650
rely on. For better or worse.

294
00:20:50,130 --> 00:20:54,030
Seth Fargo after discovering a contract between software automation

295
00:20:54,850 --> 00:20:58,286
companies chef and Ice, deleted his code, and in

296
00:20:58,308 --> 00:21:01,200
doing so, more or less discontinued chef's services.

297
00:21:01,890 --> 00:21:05,186
It's a temporary thing, for sure. The nature of open source means that

298
00:21:05,208 --> 00:21:08,558
we can just roll back an unarchived previous version,

299
00:21:08,654 --> 00:21:11,998
and legally there is nothing that Seth can do. He licensed

300
00:21:12,014 --> 00:21:15,586
his code as open source. So Seth

301
00:21:15,618 --> 00:21:19,522
claims that his code lived in a personal repository

302
00:21:19,586 --> 00:21:23,666
on GitHub and under a personal namespace on Ruby gems,

303
00:21:23,858 --> 00:21:27,678
but they were actually created in a time when Seth

304
00:21:27,714 --> 00:21:30,618
was still an employee of chef. But then again,

305
00:21:30,704 --> 00:21:34,010
no OSI license or employment agreement

306
00:21:34,350 --> 00:21:37,530
requires Seth to continue to maintain code

307
00:21:37,600 --> 00:21:41,546
on his personal accounts. They were conflating

308
00:21:41,658 --> 00:21:45,354
code ownership over code stewardship is what Seth

309
00:21:45,402 --> 00:21:49,102
said, and he added to that that

310
00:21:49,156 --> 00:21:53,482
he has some very specific instructions

311
00:21:53,546 --> 00:21:56,834
in his will and how to deal with the code that he

312
00:21:56,952 --> 00:22:00,482
owns when he dies. So he basically said

313
00:22:00,536 --> 00:22:04,322
that if he would have died that day, the same thing would have happened.

314
00:22:04,456 --> 00:22:06,680
That kind of makes you think, doesn't it?

315
00:22:08,890 --> 00:22:12,470
Another example then, the GitHub project colors

316
00:22:12,890 --> 00:22:16,706
JS is simply known as colors on the NPM repository,

317
00:22:16,818 --> 00:22:20,714
has scored over 3.3 billion downloads throughout his

318
00:22:20,752 --> 00:22:24,700
lifetime, and has over 19,000 projects that depend on it.

319
00:22:25,150 --> 00:22:28,262
Similarly, Faker JS exists on NPMs

320
00:22:28,326 --> 00:22:31,342
Faker and has been retrieved 272

321
00:22:31,396 --> 00:22:34,746
times a million times from the NPM repository,

322
00:22:34,858 --> 00:22:38,010
and has over 2500 dependents.

323
00:22:38,170 --> 00:22:42,110
Both projects are developed and maintained by the same author.

324
00:22:43,030 --> 00:22:46,318
The immense download rate of these two components

325
00:22:46,414 --> 00:22:50,126
can be attributed to the basic but essential functionality

326
00:22:50,158 --> 00:22:53,406
that they provide to JavaScript developers. Colors lets

327
00:22:53,438 --> 00:22:56,930
you print colorful text messages on the console, whereas Faker

328
00:22:57,010 --> 00:23:00,374
helps developers generate fake data for their applications for

329
00:23:00,412 --> 00:23:02,230
testing and staging purposes.

330
00:23:03,290 --> 00:23:07,474
The hijacked colors version trapped applications in

331
00:23:07,532 --> 00:23:10,502
an infinite loop, printing liberty, liberty,

332
00:23:10,566 --> 00:23:14,010
liberty. And then, followed by some gibberish,

333
00:23:14,590 --> 00:23:18,102
the developer himself introduced that infinite loop in colors,

334
00:23:18,166 --> 00:23:22,086
thereby sabotaging its functionality and perched functional

335
00:23:22,118 --> 00:23:26,560
code from the Faker package in version six,

336
00:23:27,010 --> 00:23:30,160
which I mean really, the version number should have given it away.

337
00:23:30,770 --> 00:23:34,542
It's likely that this stunt relates back to November

338
00:23:34,606 --> 00:23:38,354
2020, where the developer explicitly expressed an

339
00:23:38,392 --> 00:23:41,906
intention of no longer wanting to support big companies

340
00:23:42,008 --> 00:23:45,034
with his free work, and that businesses

341
00:23:45,102 --> 00:23:50,134
should pay him a fee in

342
00:23:50,172 --> 00:23:52,440
the six figure area.

343
00:23:58,810 --> 00:24:02,054
Then, mid March this year, the developer behind the

344
00:24:02,092 --> 00:24:06,346
popular NPM package node IPC, released sabotaged versions of

345
00:24:06,368 --> 00:24:10,410
the library in protest of the ongoing war in Ukraine.

346
00:24:11,090 --> 00:24:15,130
Mid March this year, developer behind the popular NPM

347
00:24:15,210 --> 00:24:18,826
package node IPC, released sabotaged versions of the library

348
00:24:18,938 --> 00:24:21,550
in protest of the ongoing war in Ukraine.

349
00:24:22,450 --> 00:24:26,206
Newer versions of the Node IPC package began deleting

350
00:24:26,238 --> 00:24:30,206
all data and overriding files on developers'machines,

351
00:24:30,318 --> 00:24:34,450
in addition to creating new text files with piece messages.

352
00:24:34,790 --> 00:24:38,086
With over a million weekly downloads. NodeiPC is a

353
00:24:38,108 --> 00:24:42,498
prominent package used by major libraries like the Vue JS CLI.

354
00:24:42,674 --> 00:24:46,514
The package appears to have been originally created by the developer

355
00:24:46,562 --> 00:24:49,290
as a means of peaceful protest,

356
00:24:50,030 --> 00:24:53,654
as they mainly edit that message of peace on a desktop

357
00:24:53,702 --> 00:24:57,354
of a user installing the package. But then chaos unfolded when

358
00:24:57,392 --> 00:25:00,490
select versions of the code APC package library

359
00:25:01,010 --> 00:25:04,910
were seen launching a destructive payload to delete all data

360
00:25:04,980 --> 00:25:08,346
by overriding files of users. Installing the package

361
00:25:08,458 --> 00:25:12,014
for users in Russia and Belarus, only this

362
00:25:12,052 --> 00:25:15,454
has been called Protestware and is one of the newest versions

363
00:25:15,502 --> 00:25:17,410
of supply chain attacks.

364
00:25:20,150 --> 00:25:23,278
Open source is part of our infrastructure,

365
00:25:23,374 --> 00:25:26,674
products and tooling, and for this reason we need to care

366
00:25:26,712 --> 00:25:30,102
about them like they were our own projects. No company

367
00:25:30,156 --> 00:25:34,754
will leave crucial parts of their in house developed tech stack unmaintained,

368
00:25:34,882 --> 00:25:38,602
so why are we willing to do so for the ones that are open

369
00:25:38,656 --> 00:25:42,026
source? I want you to ask yourself the

370
00:25:42,048 --> 00:25:45,782
following questions. What are the departments or roles

371
00:25:45,846 --> 00:25:49,238
in your company responsible for identifying and mitigating

372
00:25:49,334 --> 00:25:53,098
impact of license changes? What projects

373
00:25:53,114 --> 00:25:57,194
in your stack do you think may be at risk of posing

374
00:25:57,242 --> 00:26:00,000
a similar challenge as elasticsearch did?

375
00:26:00,850 --> 00:26:04,420
Who is looking at the health of the software that you rely on?

376
00:26:04,950 --> 00:26:08,786
Who leads research and due diligence of alternatives so

377
00:26:08,808 --> 00:26:12,530
that when you will need to change, it won't be a knee jerk response?

378
00:26:17,130 --> 00:26:20,854
I'd be remiss if I did not talk about the log for j or

379
00:26:20,892 --> 00:26:24,402
log for shell flaw today. The remote

380
00:26:24,466 --> 00:26:28,266
execution code execution vulnerability that scored ten out of ten on

381
00:26:28,288 --> 00:26:32,380
the cvss, which is the common vulnerability scoring system.

382
00:26:33,070 --> 00:26:37,546
The impact of log for J was and is huge.

383
00:26:37,728 --> 00:26:41,274
Even if you scanned your code base and you thought that you could relax after

384
00:26:41,312 --> 00:26:44,634
confirming that you don't use log for J anywhere,

385
00:26:44,762 --> 00:26:47,998
you were not in the safe yet, right? Like you could be depending on a

386
00:26:48,004 --> 00:26:51,630
library that in turn uses log for J and still be exposed.

387
00:26:51,970 --> 00:26:55,454
Security firm Snick actually found that 60% of Java

388
00:26:55,502 --> 00:26:58,462
applications rely on the library indirectly,

389
00:26:58,526 --> 00:27:01,970
versus the 40% that rely on it directly.

390
00:27:02,950 --> 00:27:06,354
Log for J has been developed by the Apache Software

391
00:27:06,402 --> 00:27:10,022
foundation and that certainly signals health, right? And yet

392
00:27:10,076 --> 00:27:14,054
this happened. We sometimes talk

393
00:27:14,092 --> 00:27:17,058
about open source being inherently secure.

394
00:27:17,234 --> 00:27:20,630
The code is out in the open. If something is broken,

395
00:27:20,710 --> 00:27:24,634
people will see it and they will fix it. But then how

396
00:27:24,672 --> 00:27:27,754
do you explain law for J or heartbeat or

397
00:27:27,792 --> 00:27:31,494
the starts vulnerability? The many eyes argument

398
00:27:31,542 --> 00:27:35,006
is very shaky. It needs the right people to look in the

399
00:27:35,028 --> 00:27:38,366
right places and security is hard. I find that

400
00:27:38,388 --> 00:27:41,920
developers are looking at open source for solutions, not problems.

401
00:27:46,630 --> 00:27:50,334
Installing an NPM package introduces an implicit

402
00:27:50,382 --> 00:27:54,002
trust on 79 3rd party packages and

403
00:27:54,056 --> 00:27:57,110
39 maintainers, which creates a very large attack

404
00:27:57,180 --> 00:28:00,530
surface, 150 dependencies,

405
00:28:00,610 --> 00:28:03,560
which is kind of typical for a Java project.

406
00:28:04,410 --> 00:28:08,466
And those dependencies maybe release a new version ten

407
00:28:08,508 --> 00:28:12,522
times a year, which is an average amount per year. That makes

408
00:28:12,576 --> 00:28:15,674
1500 updates for you to

409
00:28:15,712 --> 00:28:18,986
consider. A software builder materials or an

410
00:28:19,008 --> 00:28:23,430
S bomb is a list of all of the open source and third party components

411
00:28:23,590 --> 00:28:27,166
present in a code base. An S bomb also lists the

412
00:28:27,188 --> 00:28:30,762
licenses that govern those components, the regressions

413
00:28:30,826 --> 00:28:34,398
of the components that are in use their patch status,

414
00:28:34,494 --> 00:28:37,954
and that allows security teams to quickly identify and

415
00:28:37,992 --> 00:28:41,090
associate security or license risk.

416
00:28:41,670 --> 00:28:45,362
The concept of a bill of materials derives from

417
00:28:45,416 --> 00:28:48,850
manufacturing, where a bill of materials is an inventory

418
00:28:48,930 --> 00:28:52,520
detailing all items that are included in a product.

419
00:28:53,530 --> 00:28:57,286
Sounds like a bunch of work. There's a good thing then that there

420
00:28:57,308 --> 00:29:01,190
is software compensation analysis tools or SCA

421
00:29:01,270 --> 00:29:04,746
tools that can help you do the job, like the one by

422
00:29:04,768 --> 00:29:09,558
Thomas Steinbergen OSS review toolkit ORT,

423
00:29:09,734 --> 00:29:13,370
which includes software package data exchange SPDX,

424
00:29:13,530 --> 00:29:16,750
which is an open standard for software bill of materials.

425
00:29:17,090 --> 00:29:20,602
SPDX allows the expression of components, licenses,

426
00:29:20,666 --> 00:29:24,546
copyright, security references, and other metadata that is related to

427
00:29:24,568 --> 00:29:28,782
your software. It is the perception

428
00:29:28,846 --> 00:29:32,100
that open source okay,

429
00:29:35,370 --> 00:29:39,554
it is the perception that open source is risky,

430
00:29:39,682 --> 00:29:43,778
but actually 98% of projects have safe versions

431
00:29:43,874 --> 00:29:46,390
available. Most vulnerabilities,

432
00:29:46,970 --> 00:29:49,542
they are patched before they're aiven disclosed.

433
00:29:49,686 --> 00:29:53,274
Lock for J was patched in 15 days and

434
00:29:53,312 --> 00:29:57,162
the patch was made available by the time that the CVE went

435
00:29:57,216 --> 00:30:00,474
public. We're just not really good at managing

436
00:30:00,522 --> 00:30:03,262
open source. When asked,

437
00:30:03,396 --> 00:30:07,310
68% of IT leaders are confident that they're not using

438
00:30:07,380 --> 00:30:10,590
vulnerable versions. But that same number,

439
00:30:10,660 --> 00:30:14,962
the same 68% of applications use

440
00:30:15,016 --> 00:30:18,766
a component with a known vulnerability. So what's

441
00:30:18,798 --> 00:30:19,620
the deal?

442
00:30:23,590 --> 00:30:26,918
Produced in partnership with the Harvard Laboratory for

443
00:30:27,004 --> 00:30:30,786
Innovation Science and the open source

444
00:30:30,818 --> 00:30:34,326
Security foundation, or the OpenSSF census two is the

445
00:30:34,348 --> 00:30:38,346
second investigation into the widespread use of free

446
00:30:38,368 --> 00:30:41,450
and open source software and aggregates data from

447
00:30:41,520 --> 00:30:44,694
over half a million observations of fauce

448
00:30:44,742 --> 00:30:47,850
libraries used in production applications

449
00:30:48,350 --> 00:30:52,460
at thousands of companies. It aims to shed light on

450
00:30:52,830 --> 00:30:57,230
the most commonly used FOSS packages and applications

451
00:30:57,730 --> 00:31:01,246
at the application library level. Such insights will

452
00:31:01,268 --> 00:31:04,622
help identify critical open source packages

453
00:31:04,686 --> 00:31:08,498
to allow for resource prioritization and address security

454
00:31:08,584 --> 00:31:10,690
issues in widely used software.

455
00:31:11,670 --> 00:31:16,434
And one of the outcomes that just

456
00:31:16,472 --> 00:31:20,466
enterprises what I've just said is that much of the widely used Foz is developed

457
00:31:20,498 --> 00:31:24,086
by only a handful of contributors, and the OpenSSF sees this

458
00:31:24,108 --> 00:31:25,480
as a problem as well.

459
00:31:27,530 --> 00:31:31,062
Related project is the open source project criticality

460
00:31:31,126 --> 00:31:34,374
score, maintained by the members of the OpenSSF

461
00:31:34,422 --> 00:31:37,100
securing critical projects Working group.

462
00:31:37,790 --> 00:31:41,606
The goals are to generate a criticality score for

463
00:31:41,648 --> 00:31:45,662
every open source project, to create a list of critical projects that the open

464
00:31:45,716 --> 00:31:49,006
source community leans on, and to use this

465
00:31:49,028 --> 00:31:53,026
data to proactively improve the security posture of these

466
00:31:53,128 --> 00:31:57,454
critical projects. A project criticality

467
00:31:57,502 --> 00:32:01,326
score defines the influence and the importance of the project, and it's

468
00:32:01,358 --> 00:32:04,878
a number between zero least critical and one

469
00:32:04,984 --> 00:32:08,470
most critical. Based on an algorithm by Rob pike.

470
00:32:08,890 --> 00:32:12,946
Using the parameters on this slide, the tool derives the criticality score

471
00:32:12,978 --> 00:32:14,600
for any open source project.

472
00:32:18,830 --> 00:32:22,390
So what can we do? We can contribute.

473
00:32:22,470 --> 00:32:26,342
We can contribute with our time, with code, with code reviews,

474
00:32:26,406 --> 00:32:30,246
documentation, but only when it's appropriate. Sometimes there

475
00:32:30,288 --> 00:32:33,774
is no lack of community contributors, but the maintainer just

476
00:32:33,812 --> 00:32:37,360
lacks the time to look at those. Maybe,

477
00:32:38,450 --> 00:32:42,174
probably and definitely. Unfortunately, they can't work on the project full

478
00:32:42,212 --> 00:32:45,634
time at the place of work. So be an excellent open

479
00:32:45,672 --> 00:32:48,734
source citizen. Written communication

480
00:32:48,782 --> 00:32:52,418
is very hard, which is why it's extra important to invest in

481
00:32:52,424 --> 00:32:55,814
your communication skills. Be patient and

482
00:32:55,852 --> 00:32:59,830
be graceful, even when your otherwise excellent pr

483
00:32:59,900 --> 00:33:03,922
doesn't make it into the project. An advocate on behalf

484
00:33:03,986 --> 00:33:07,850
of Foz inside your VR company even with

485
00:33:07,920 --> 00:33:12,074
open source being the standard and so widely used,

486
00:33:12,192 --> 00:33:16,186
many people don't know about its abundance or the rules of

487
00:33:16,208 --> 00:33:19,642
engagement. Your organization could maybe

488
00:33:19,696 --> 00:33:22,990
sponsor a project. Many companies run a

489
00:33:23,060 --> 00:33:26,686
foss fund of some sorts, and they regularly award sums of

490
00:33:26,708 --> 00:33:30,126
money to projects. Another caveat here is

491
00:33:30,148 --> 00:33:33,614
that some projects are not ready nor equipped to deal with

492
00:33:33,652 --> 00:33:37,666
large sums of money and don't know how to distribute it between

493
00:33:37,768 --> 00:33:41,074
core contributors. And also money coming

494
00:33:41,112 --> 00:33:44,942
in the one month and then nothing the next can be as bad as

495
00:33:45,016 --> 00:33:48,374
no money coming in at all when your

496
00:33:48,412 --> 00:33:52,006
company uses open source software. Spoiler the answer is

497
00:33:52,028 --> 00:33:56,502
yes. We discussed this. Here is how you can help it stay

498
00:33:56,556 --> 00:34:00,598
secure. Manage your third party licensing exposure

499
00:34:00,694 --> 00:34:04,134
just like your security exposure. Be careful

500
00:34:04,182 --> 00:34:07,542
with automation and third party library or package updates

501
00:34:07,606 --> 00:34:11,610
during CI CD. If you're extending OSS

502
00:34:11,690 --> 00:34:16,510
functionality, maybe prefer plugins over downstream modifications.

503
00:34:17,410 --> 00:34:20,894
And when you're fetting a new component, here's maybe what to

504
00:34:20,932 --> 00:34:24,962
consider. Which license are they using and

505
00:34:25,016 --> 00:34:28,462
who is behind the project? What is their governance

506
00:34:28,526 --> 00:34:31,826
policy? And sometimes

507
00:34:32,008 --> 00:34:35,846
vendor distributions or software as

508
00:34:35,868 --> 00:34:39,030
a service solution can really shield.

509
00:34:39,770 --> 00:34:43,346
I recognize the irony in saying that after we discussed

510
00:34:43,378 --> 00:34:46,360
how cloud providers aren't always seen as the good guy.

511
00:34:47,130 --> 00:34:50,300
But sometimes, if a maintained service

512
00:34:51,950 --> 00:34:55,850
is considered a well meaning citizen in the open source world,

513
00:34:55,920 --> 00:34:59,626
that is the sweet spot where you want to be. Look into tools like

514
00:34:59,648 --> 00:35:04,026
the criticality score, the OpenSSF scorecard, maybe sonotypes

515
00:35:04,058 --> 00:35:08,154
tooling which is open source as well. So you can help improve

516
00:35:08,202 --> 00:35:11,854
those tools as well and

517
00:35:11,892 --> 00:35:15,634
navigate participation in open source well by

518
00:35:15,672 --> 00:35:19,182
abiding by the principles of authentic participation,

519
00:35:19,246 --> 00:35:23,026
which were derived at the sustained Summit 2020

520
00:35:23,128 --> 00:35:26,894
event in Brussels, Belgium. There, Duan O'Brien

521
00:35:26,942 --> 00:35:31,026
and other specificated discussion groups loosely focused on corporate

522
00:35:31,138 --> 00:35:34,626
accountability in the context of open source,

523
00:35:34,818 --> 00:35:38,582
the principles are these it starts

524
00:35:38,646 --> 00:35:42,518
early. This came out of the discussions about organizations showing

525
00:35:42,534 --> 00:35:46,314
up with mature, fully baked contributions over which

526
00:35:46,352 --> 00:35:49,418
the community had no input. It puts the

527
00:35:49,424 --> 00:35:53,022
community first. This reflects the

528
00:35:53,076 --> 00:35:57,102
consensus that when an organization and the community want different things,

529
00:35:57,236 --> 00:36:01,146
the community prevails. It starts

530
00:36:01,178 --> 00:36:04,850
with listening. This is a reflection of comments

531
00:36:05,590 --> 00:36:09,790
of companies showing up to a project telling

532
00:36:09,950 --> 00:36:13,586
that had no context whatsoever in telling them all the things that

533
00:36:13,608 --> 00:36:17,410
they did wrong. It has transparent motivations.

534
00:36:17,570 --> 00:36:21,522
Without a shared understanding of the motivations, it's impossible

535
00:36:21,586 --> 00:36:24,966
to resolve differences. So there

536
00:36:24,988 --> 00:36:29,014
should be no hidden motives. It enforces respectful

537
00:36:29,062 --> 00:36:33,242
behavior. Participants they agree

538
00:36:33,296 --> 00:36:37,290
to adhere to community installed codes of conduct

539
00:36:38,110 --> 00:36:41,982
and organizations commit to holding participants on their

540
00:36:42,036 --> 00:36:45,310
side accountable for their behavior,

541
00:36:46,210 --> 00:36:50,154
and it ends gracefully. That means that there's no sudden

542
00:36:50,202 --> 00:36:53,518
withdrawal of resources without notifications and

543
00:36:53,604 --> 00:36:57,182
a contingency or an exit plan. There should be clear

544
00:36:57,236 --> 00:37:00,654
documentation that will allow the community to pick up projects

545
00:37:00,702 --> 00:37:04,180
when a company decides to withdraw their support.

546
00:37:05,370 --> 00:37:08,962
Further, as a company, when you're hiring maintainers,

547
00:37:09,106 --> 00:37:12,722
make sure that they're empowered to balance internal and external feature

548
00:37:12,786 --> 00:37:16,374
needs and please don't change scope and

549
00:37:16,412 --> 00:37:19,420
strategy on them with every new fiscal year.

550
00:37:21,150 --> 00:37:24,426
Foundations like the Apache Foundation, Linux foundation and

551
00:37:24,448 --> 00:37:27,754
the CNCF, maybe the Eclipse foundation, they act as

552
00:37:27,792 --> 00:37:31,642
stewards for the open source projects in their care and in their incubation

553
00:37:31,706 --> 00:37:35,502
pipeline. Supporting these organizations to do

554
00:37:35,636 --> 00:37:39,134
more great work is definitely a way to leave open

555
00:37:39,172 --> 00:37:42,000
source a better place than you found it.

556
00:37:43,650 --> 00:37:46,826
As a foundation supporting member, you gain a seat,

557
00:37:46,938 --> 00:37:50,734
or maybe multiple seats at the table. So make sure that you make that seat

558
00:37:50,782 --> 00:37:52,980
count and send the right people there.

559
00:37:55,850 --> 00:37:59,606
Discussions around the sustainability of open source are hard,

560
00:37:59,708 --> 00:38:03,474
but they're necessary. Free and open source software is ubiquitous.

561
00:38:03,522 --> 00:38:07,126
It's omnipresence. Yet we're still struggling to live with

562
00:38:07,148 --> 00:38:10,680
open source in a healthy, safe and productive way.

563
00:38:13,850 --> 00:38:17,574
We need better support systems to avoid maintainers burnout and

564
00:38:17,612 --> 00:38:20,830
to avoid regressions from creeping into our supply supply chain.

565
00:38:21,250 --> 00:38:25,102
We need to spend less time firefighting and more

566
00:38:25,156 --> 00:38:28,634
time nurturing our open source software supply

567
00:38:28,682 --> 00:38:30,060
chain. Thank you.

