1
00:01:28,690 --> 00:01:31,846
Hello everybody, thanks for joining my talk at

2
00:01:31,868 --> 00:01:36,066
Comfortito. Today we'll discuss instance provisioning

3
00:01:36,098 --> 00:01:39,458
and hot migration in the multicloud environment. I'm Jill

4
00:01:39,474 --> 00:01:42,218
Bear. I'm the CEO and founder of Scaledynamics,

5
00:01:42,314 --> 00:01:46,026
a startup where we provide container managed

6
00:01:46,058 --> 00:01:49,502
platform. So the first question

7
00:01:49,636 --> 00:01:53,758
is why is multicloud and hybrid important in

8
00:01:53,764 --> 00:01:57,058
the cloud native space? This picture shows you the interest

9
00:01:57,144 --> 00:02:01,166
of companies. As you see interest is growing

10
00:02:01,278 --> 00:02:05,358
to do more and more multicloud strategy for the cloud usage.

11
00:02:05,534 --> 00:02:09,266
97% of companies are requires to do multicloud

12
00:02:09,298 --> 00:02:12,274
and hybrid management. And why multicloud?

13
00:02:12,322 --> 00:02:15,974
Because each application requires has

14
00:02:16,012 --> 00:02:19,962
different requirements. So you need to be able with multicloud people

15
00:02:20,016 --> 00:02:23,690
can select the best resources at each time.

16
00:02:23,840 --> 00:02:27,306
And of course what we will discuss and discuss how

17
00:02:27,328 --> 00:02:31,180
you can move to the best resources each time.

18
00:02:32,270 --> 00:02:35,726
When you want to select the resource, you have multicloud criteria. Of course you

19
00:02:35,748 --> 00:02:39,482
have the performance criteria where you need to select the best hardware

20
00:02:39,546 --> 00:02:42,822
machine to do the job in terms of cpu,

21
00:02:42,906 --> 00:02:45,250
ram size, gpu,

22
00:02:46,630 --> 00:02:50,930
derisk, disk, type of disk, speed of disk

23
00:02:51,510 --> 00:02:55,474
network, et cetera. So purely performance

24
00:02:55,522 --> 00:02:58,886
consideration, you also can have another consideration which is about the

25
00:02:58,908 --> 00:03:02,054
cost. You can have another consideration which is

26
00:03:02,092 --> 00:03:05,574
about the managed services, additional managed services

27
00:03:05,692 --> 00:03:09,066
like database, database or APIs that the

28
00:03:09,088 --> 00:03:12,954
provider provides you. And that means that you must

29
00:03:12,992 --> 00:03:16,442
be on a specific cloud to access it. You can

30
00:03:16,576 --> 00:03:20,630
also need to select according to the labilization requirements

31
00:03:20,710 --> 00:03:23,818
of your work you are going to execute. For example, you need to

32
00:03:23,824 --> 00:03:27,802
be labeled to be able to store data regarding medical

33
00:03:27,866 --> 00:03:31,246
stuff. And at the end you

34
00:03:31,268 --> 00:03:34,882
can also consider your resource and where you want to put

35
00:03:34,936 --> 00:03:37,970
to execute your app according to the carbon footprint.

36
00:03:38,950 --> 00:03:42,510
If you consider that the carbon footprint is a requirement

37
00:03:42,590 --> 00:03:46,306
for you. So according to the latency, the cost and the carbon

38
00:03:46,338 --> 00:03:50,246
footprint, this is why multicloud is important

39
00:03:50,428 --> 00:03:54,310
in company spaces and the cloud native spaces. The second

40
00:03:54,380 --> 00:03:59,394
point is additionally

41
00:03:59,442 --> 00:04:02,070
to this multicloud approach.

42
00:04:02,230 --> 00:04:05,946
Today developers wants to do containers and companies

43
00:04:06,048 --> 00:04:09,542
are in the road of doing more and more containers.

44
00:04:09,606 --> 00:04:13,200
Traditionally developers were doing virtual machine, which is, let's say

45
00:04:14,770 --> 00:04:18,926
monolithic application. And containers provide

46
00:04:19,028 --> 00:04:22,454
full agility for developers. You can define

47
00:04:22,522 --> 00:04:26,014
specific components, you can reuse these components

48
00:04:26,062 --> 00:04:30,130
across multiple application, you can patch each component devinually.

49
00:04:30,470 --> 00:04:34,542
If one component fails, your whole application is integrated

50
00:04:34,606 --> 00:04:38,802
mode and not disconnected. So containers

51
00:04:38,866 --> 00:04:42,578
providers is a road for company because it provides a lot of advantages

52
00:04:42,674 --> 00:04:46,434
in terms of agility, in terms of productivity.

53
00:04:46,562 --> 00:04:50,906
And this is why containers is the road. So when

54
00:04:50,928 --> 00:04:54,534
you consider the two points that multicloud is important and containers

55
00:04:54,582 --> 00:04:58,042
is important, what is in mind is to

56
00:04:58,096 --> 00:05:01,322
have a way to do container in a multicloud approach.

57
00:05:01,466 --> 00:05:04,954
And this is what we do in scale dynamics.

58
00:05:05,082 --> 00:05:09,246
We have defined a new container managed platform where you

59
00:05:09,268 --> 00:05:12,794
will be able to provision cloud resources,

60
00:05:12,842 --> 00:05:16,210
public cloud resources and on premise resources to the hybrid.

61
00:05:16,870 --> 00:05:21,022
We will provide a way to deploy your containers

62
00:05:21,086 --> 00:05:24,594
on top of it. You will provide metrics to

63
00:05:24,632 --> 00:05:28,214
analyze what's the behavior and what's the state of each

64
00:05:28,412 --> 00:05:32,274
container run on top of these resources,

65
00:05:32,322 --> 00:05:35,414
and the way to move your containers across

66
00:05:35,532 --> 00:05:38,922
the different resources so you can select anytime which

67
00:05:38,976 --> 00:05:43,002
is the best one for your application. So now

68
00:05:43,056 --> 00:05:46,298
let me explain how it runs in action. So our platform

69
00:05:46,384 --> 00:05:49,894
is composed of two different pieces. One console

70
00:05:49,942 --> 00:05:53,118
where you will able to manage your numbers,

71
00:05:53,284 --> 00:05:57,342
create your projects, your cloud environments, you want to execute your

72
00:05:57,396 --> 00:06:00,974
containers and an SDK which is

73
00:06:01,012 --> 00:06:04,722
available on Linux, windows and Mac which will provide

74
00:06:04,776 --> 00:06:08,434
you a way to deploy and manage day to day

75
00:06:08,552 --> 00:06:10,610
your containers by the developers.

76
00:06:10,950 --> 00:06:14,962
So instead of showing you how the pieces, let's start

77
00:06:15,016 --> 00:06:18,038
with let me show you in action how it

78
00:06:18,044 --> 00:06:20,630
is. So let's start by the console.

79
00:06:20,970 --> 00:06:24,274
A console is a way where you will find your projects,

80
00:06:24,322 --> 00:06:28,258
your members, your API keys to do your CI CDs,

81
00:06:28,434 --> 00:06:31,158
and also the cloud management resources.

82
00:06:31,254 --> 00:06:34,422
So let me show you for example, in the member

83
00:06:34,486 --> 00:06:37,882
space you can invite members and you can set rights of each members.

84
00:06:38,016 --> 00:06:41,834
So you can really create an

85
00:06:41,872 --> 00:06:45,246
organization, can be a team, a small team or a company according to the

86
00:06:45,268 --> 00:06:48,686
size of each company. So you decide and

87
00:06:48,708 --> 00:06:52,350
you manage your member, right? Then you create project what is a project?

88
00:06:52,420 --> 00:06:56,210
A project can be a back end, a project can be a website, a project

89
00:06:56,280 --> 00:07:00,180
can be microservice, just for payment. For example,

90
00:07:00,550 --> 00:07:04,674
you decide what is a project, it's your way

91
00:07:04,712 --> 00:07:08,706
to encapsulate the project in term of a set of containers.

92
00:07:08,898 --> 00:07:12,200
So let me for example create a new project,

93
00:07:13,130 --> 00:07:17,474
conf 42 just I will use for

94
00:07:17,532 --> 00:07:20,426
the demo. So when you get a project,

95
00:07:20,608 --> 00:07:23,660
and of course I will deploy some container on it,

96
00:07:25,390 --> 00:07:28,874
you need to create where you want your containers to be

97
00:07:28,912 --> 00:07:33,274
executed. So this is what we call the environment space.

98
00:07:33,392 --> 00:07:36,686
So an environment is where you want to

99
00:07:36,708 --> 00:07:40,330
deploy. So you will define which resources for one environment,

100
00:07:40,410 --> 00:07:44,366
which resources you want to use, and you want to run your

101
00:07:44,388 --> 00:07:47,698
deploy your container on it.

102
00:07:47,784 --> 00:07:51,538
So let me create an environment and during

103
00:07:51,624 --> 00:07:54,942
this, let's say I will create an environment,

104
00:07:55,006 --> 00:07:58,534
I have to select what I want to deploy. So on our

105
00:07:58,572 --> 00:08:02,178
platform we can deploy static hosting, we can deploy a node

106
00:08:02,194 --> 00:08:05,846
JS server, we can deploy an

107
00:08:05,868 --> 00:08:08,978
HTTP docker built from the docker file,

108
00:08:09,154 --> 00:08:13,098
and then we can deploy a node JS module, which is a standard

109
00:08:13,264 --> 00:08:16,314
node JS module like say AWS,

110
00:08:16,352 --> 00:08:20,406
a service you can only call not by HTTP but by directly

111
00:08:20,438 --> 00:08:23,790
making JavaScript costs. So when you select, let's say,

112
00:08:23,940 --> 00:08:28,030
let me show you, I will do this example a manage node JS server.

113
00:08:29,330 --> 00:08:32,618
When I look to the second step is where I want to run

114
00:08:32,644 --> 00:08:36,014
it. So I have access here to any kind of multiple

115
00:08:36,062 --> 00:08:40,226
providers. I have Azure AWS, GCP OVH which

116
00:08:40,248 --> 00:08:43,780
is a french provider. We can add

117
00:08:44,310 --> 00:08:47,874
some of your custom providers if required.

118
00:08:48,002 --> 00:08:51,734
So let's say I want to be on AWS, I can

119
00:08:51,772 --> 00:08:56,034
select the region, I want to run the resource, let's say London.

120
00:08:56,162 --> 00:08:59,514
Then I can select which type of resource. So it's pretty

121
00:08:59,552 --> 00:09:03,018
fine resource in our catalog, let's say

122
00:09:03,104 --> 00:09:06,730
by default everybody is using this, but we can

123
00:09:06,880 --> 00:09:10,602
improve and extend the catalog according to each

124
00:09:10,656 --> 00:09:14,090
customer choice if he needs, let's say more cpus,

125
00:09:14,170 --> 00:09:18,480
more gpus or more ram or specification, we can

126
00:09:19,010 --> 00:09:22,986
provide in fact the resources. So when you have selected the provider

127
00:09:23,018 --> 00:09:26,162
and when you have selected the region, then you can select the right

128
00:09:26,216 --> 00:09:29,746
configuration and you click on order. When you click on order, in fact

129
00:09:29,768 --> 00:09:33,310
the resource is physically automatically provisioned

130
00:09:33,390 --> 00:09:37,090
and configured to be able to deploy

131
00:09:37,250 --> 00:09:40,230
containers on top of it. That's as simple as that.

132
00:09:40,300 --> 00:09:44,242
You don't have to do other stuff. You click provider

133
00:09:44,306 --> 00:09:47,894
region configuration and you order and

134
00:09:47,932 --> 00:09:51,946
then the resource platform will provision automatically and set up

135
00:09:51,968 --> 00:09:55,274
the resource for you. So instead of doing

136
00:09:55,312 --> 00:09:59,002
this, we provide also shared resources which are free just

137
00:09:59,056 --> 00:10:02,926
for let's say testing and evaluation purpose. So let

138
00:10:02,948 --> 00:10:07,534
me use here a shared resource running where

139
00:10:07,572 --> 00:10:11,550
I can deploy in a JS server. So it is as simple

140
00:10:11,620 --> 00:10:15,314
as that. So as I showed to you, I created an

141
00:10:15,352 --> 00:10:18,766
environment where I can deploy a container

142
00:10:18,798 --> 00:10:21,986
on top of shared resource. So to be able to

143
00:10:22,008 --> 00:10:25,570
deploy I need to install SDK

144
00:10:25,650 --> 00:10:28,822
which is available on Linux, Mac and

145
00:10:28,956 --> 00:10:32,486
Windows, which is named Warp. So with

146
00:10:32,508 --> 00:10:36,102
the warp commands developers will be able to manage

147
00:10:36,156 --> 00:10:40,330
their containers, meaning to deploy, to build their CI CD,

148
00:10:41,710 --> 00:10:44,650
to access the logs of the containers,

149
00:10:45,630 --> 00:10:49,260
to get the development, deployment information.

150
00:10:49,710 --> 00:10:53,002
Everything requires to manage

151
00:10:53,056 --> 00:10:56,666
in fact that containers on top of the resources.

152
00:10:56,778 --> 00:11:00,574
So let me show you for example all the commands you can deploy, you can

153
00:11:00,612 --> 00:11:04,622
manage your deployment, you can of course authenticate before deploying

154
00:11:04,686 --> 00:11:07,778
because according to the rights you get,

155
00:11:07,944 --> 00:11:11,950
you cannot do anything. So you can also control the build configuration,

156
00:11:12,030 --> 00:11:15,302
your project and beyond. So instead

157
00:11:15,356 --> 00:11:19,270
of let's say expliciting every command,

158
00:11:20,330 --> 00:11:23,880
I'm going to use a getting started we provide

159
00:11:24,650 --> 00:11:26,950
on our documentation.

160
00:11:27,930 --> 00:11:31,226
And with this getting started in less than three minutes

161
00:11:31,328 --> 00:11:34,618
you can deploy your node JS server and make it live on

162
00:11:34,624 --> 00:11:38,106
the share resource. So instead of doing all

163
00:11:38,128 --> 00:11:41,210
that let me just go and clone

164
00:11:42,030 --> 00:11:45,402
that in my

165
00:11:45,536 --> 00:11:50,270
stuff talk, I go on it my server then

166
00:11:50,420 --> 00:11:53,874
I install. So when it

167
00:11:53,912 --> 00:11:57,522
installed here it installed also all the package requires like

168
00:11:57,576 --> 00:12:01,438
expressgs for example to create the node JS

169
00:12:01,614 --> 00:12:05,774
server but also the wap that is already included

170
00:12:05,822 --> 00:12:10,406
here. So when it's done we

171
00:12:10,428 --> 00:12:14,326
are ready, we can deploy. So first let me for example also

172
00:12:14,428 --> 00:12:17,990
have a look to what is that code of the node JS server.

173
00:12:18,590 --> 00:12:22,202
Let me just change hello, I'm going to say

174
00:12:22,256 --> 00:12:25,914
hello conf 42 hub which means

175
00:12:25,952 --> 00:12:29,702
that it will be that code query that will be deployed.

176
00:12:29,846 --> 00:12:35,966
So once done we

177
00:12:35,988 --> 00:12:39,834
can be able to deploy very easily. The server

178
00:12:39,882 --> 00:12:43,058
is running is okay, it's set up. So to deploy I

179
00:12:43,064 --> 00:12:46,820
just have to deploy talk.

180
00:12:47,350 --> 00:12:50,834
So I'm in organization, let's say I

181
00:12:50,872 --> 00:12:54,322
use a comfort project in the demo. It is just

182
00:12:54,376 --> 00:12:57,698
a project I have configured on the console.

183
00:12:57,794 --> 00:13:01,158
So currently what the platform is doing

184
00:13:01,244 --> 00:13:05,286
is taking the node JS server source code and

185
00:13:05,468 --> 00:13:08,502
building the docker image and then it will

186
00:13:08,556 --> 00:13:12,294
deploy that docker image on top of the shared resources

187
00:13:12,342 --> 00:13:15,660
I have selected on the console and that's it.

188
00:13:16,030 --> 00:13:19,718
At some point, as you can see I had to enter a hostname.

189
00:13:19,814 --> 00:13:23,370
On this specific case I didn't understand hostname.

190
00:13:23,530 --> 00:13:26,862
This is where for example you will toto.com or your

191
00:13:26,916 --> 00:13:30,798
own company named domain.com or f or whatever

192
00:13:30,964 --> 00:13:34,910
and you will be able to manage your custom domains

193
00:13:35,070 --> 00:13:38,690
by setting the right domain name. If you leave blank,

194
00:13:39,190 --> 00:13:43,682
we will use a testing domain that we create just

195
00:13:43,736 --> 00:13:47,106
for testing purposes. So we are

196
00:13:47,128 --> 00:13:50,366
now at the end of the deployment the docker has built build,

197
00:13:50,408 --> 00:13:53,846
the image is installed and the container is going to be started

198
00:13:53,948 --> 00:13:57,202
with the DNS and the certificate installation.

199
00:13:57,346 --> 00:14:01,174
So we will be able to access our

200
00:14:01,212 --> 00:14:04,586
node JS server in live in the

201
00:14:04,608 --> 00:14:08,630
cloud on the specific resources

202
00:14:08,790 --> 00:14:10,570
we just set on the console.

203
00:14:12,370 --> 00:14:15,386
So now the server is deployed.

204
00:14:15,498 --> 00:14:18,206
So if you want to have a look to the server, I just have to

205
00:14:18,228 --> 00:14:21,806
open that. So up, let me open

206
00:14:21,988 --> 00:14:25,040
tuck and you will see here,

207
00:14:25,570 --> 00:14:28,638
sorry prop, you will see. I don't

208
00:14:28,654 --> 00:14:32,354
know if you can have a look but you'll see. Hello comfortable world

209
00:14:32,392 --> 00:14:35,986
for Node JS and it's live. You have

210
00:14:36,008 --> 00:14:39,138
a URL and you can access it as a node JS server.

211
00:14:39,314 --> 00:14:43,590
So as you can see it's very simple

212
00:14:43,660 --> 00:14:47,106
to deploy stuff. You can deploy from a docker

213
00:14:47,138 --> 00:14:50,854
file, you can deploy from a node JS server, you can deploy a static

214
00:14:50,902 --> 00:14:54,726
asset. And the platform, what does the platform when you deploy,

215
00:14:54,758 --> 00:14:59,270
it builds the final docker, then it push docker on the resource

216
00:14:59,350 --> 00:15:02,734
you have selected and then make it live.

217
00:15:02,932 --> 00:15:06,254
That's what does the platform. So let me

218
00:15:06,292 --> 00:15:10,526
get back to the console and AWS, you remember, it's where

219
00:15:10,708 --> 00:15:13,854
I've created in fact demo environment on

220
00:15:13,892 --> 00:15:17,810
comfort e two project where I just have deployed my node JS server.

221
00:15:18,150 --> 00:15:21,630
Suppose that now it's running on a shared resource.

222
00:15:21,710 --> 00:15:25,314
I want to move elsewhere and I want, let's say to

223
00:15:25,352 --> 00:15:28,694
move to an AWS resources. So let

224
00:15:28,732 --> 00:15:31,814
me select where I want to go. So let me

225
00:15:31,852 --> 00:15:35,250
select, as you can see you have AWS, GCP,

226
00:15:35,330 --> 00:15:39,454
Azure or OVH. So let me select AWS,

227
00:15:39,602 --> 00:15:42,682
let me select the right region I want to do.

228
00:15:42,736 --> 00:15:46,074
Let me select that and click order. When I just

229
00:15:46,112 --> 00:15:49,322
click order, what's going to happen is we are

230
00:15:49,376 --> 00:15:52,506
going to move the container from the

231
00:15:52,528 --> 00:15:56,510
shared resources to the resource we've just selected.

232
00:15:57,010 --> 00:16:01,150
So regarding the use case of that, that means that

233
00:16:01,300 --> 00:16:05,442
suppose you are on a small configuration with

234
00:16:05,496 --> 00:16:08,750
minimal cpu and you have, let's say a huge traffic,

235
00:16:08,830 --> 00:16:12,162
or you have huge traffic or traffic is coming

236
00:16:12,296 --> 00:16:15,826
and the load of the machine is going to

237
00:16:15,848 --> 00:16:19,558
be near 80%. What you should do is to go to a higher

238
00:16:19,644 --> 00:16:23,670
resources. So as you can see, you can use the move button

239
00:16:23,820 --> 00:16:27,366
to upgrade to the right resources, or if it

240
00:16:27,388 --> 00:16:30,520
is not anymore used, you can,

241
00:16:30,890 --> 00:16:34,714
let's say downscale to a small resources. You can

242
00:16:34,752 --> 00:16:38,218
also use the move button to go from

243
00:16:38,304 --> 00:16:41,818
one cloud to another cloud resource. That means when you

244
00:16:41,824 --> 00:16:45,086
go and go to AWS small to an azure small,

245
00:16:45,268 --> 00:16:48,682
why? Perhaps due to the cost or perhaps due to the performance

246
00:16:48,746 --> 00:16:52,302
of the resource or any kind of other

247
00:16:52,356 --> 00:16:56,286
criteria. So the move button is able

248
00:16:56,388 --> 00:17:00,850
to move across multicloud, multi cloud regions

249
00:17:01,270 --> 00:17:04,834
and is very flexible internally. The platform manage all

250
00:17:04,872 --> 00:17:09,080
the redirection of the traffic for you. You don't have to take care of that.

251
00:17:10,010 --> 00:17:13,362
The next deployment will be done on the last resource

252
00:17:13,426 --> 00:17:17,320
you just have selected and that's it. So it's super simple.

253
00:17:18,090 --> 00:17:21,546
It opens a way to go to any cloud or move to

254
00:17:21,568 --> 00:17:23,610
any cloud according to a criteria.

255
00:17:25,550 --> 00:17:29,018
This is really the objective of the platform and what we provide.

256
00:17:29,104 --> 00:17:32,606
But the question is now how you can decide to

257
00:17:32,628 --> 00:17:35,694
move. So to decide how to move,

258
00:17:35,812 --> 00:17:39,310
what we provide in the platform is you can

259
00:17:39,380 --> 00:17:42,970
have a look to the metrics of your container running on

260
00:17:42,980 --> 00:17:47,086
top of the resource. And according to the metric you can decide

261
00:17:47,198 --> 00:17:50,850
and have, you can decide what to do.

262
00:17:50,920 --> 00:17:55,842
For example, let me show the metrics of this application looking

263
00:17:55,896 --> 00:17:59,506
to the cpu load. For example, if you look to the cpu

264
00:17:59,538 --> 00:18:01,720
load, you are on average 93%.

265
00:18:02,490 --> 00:18:05,846
It does not require for me to upgrade or to upscale to

266
00:18:05,868 --> 00:18:09,306
a higher resources because let's say the

267
00:18:09,328 --> 00:18:13,130
memory is good here, the cpu load is good,

268
00:18:13,200 --> 00:18:16,140
the memory usage is good.

269
00:18:18,190 --> 00:18:19,820
When I look to the data,

270
00:18:21,710 --> 00:18:25,138
it's super good. So there are not too much requests

271
00:18:25,174 --> 00:18:28,862
on top of that resource. So that means that according to

272
00:18:28,916 --> 00:18:32,474
these metrics, I don't have to change to get a higher latency,

273
00:18:32,522 --> 00:18:36,618
a better latency, or to support my, let's say, increasing traffic.

274
00:18:36,794 --> 00:18:41,154
Thanks to these metrics, you can easily understand

275
00:18:41,272 --> 00:18:44,530
if you need to move up or if you can move down.

276
00:18:44,600 --> 00:18:48,070
For example, if your cpu is at 80%,

277
00:18:48,140 --> 00:18:51,286
you should of course upgrade. But if your cpu get back to

278
00:18:51,308 --> 00:18:55,270
10%, you can degrade to a smaller resource.

279
00:18:56,170 --> 00:18:59,370
Meaning by indirect that you control the cost

280
00:18:59,520 --> 00:19:02,982
so you don't have to pay the maximum,

281
00:19:03,046 --> 00:19:06,586
you can pay the right thing at the right time.

282
00:19:06,688 --> 00:19:10,060
And the metrics are there to provide you information

283
00:19:10,930 --> 00:19:14,318
to decide the other criteria we provide.

284
00:19:14,404 --> 00:19:17,994
So we provide number of requests, we provide the downtime

285
00:19:18,042 --> 00:19:21,418
time, we provide a number of restarts of your cpu,

286
00:19:21,514 --> 00:19:24,842
of your docker. We provide the request execution

287
00:19:24,906 --> 00:19:28,538
time, the request data in volume, the best data at

288
00:19:28,564 --> 00:19:32,146
volume. So everything you can consider when you want to

289
00:19:32,168 --> 00:19:35,418
optimize your container.

290
00:19:35,614 --> 00:19:39,750
The other metric we provide is carbon footprint estimation.

291
00:19:40,090 --> 00:19:43,526
It is in real time, and we have designed a

292
00:19:43,548 --> 00:19:47,800
new way to create carbon footprint based on

293
00:19:48,750 --> 00:19:51,050
american consortium results.

294
00:19:53,790 --> 00:19:57,318
When we provide that estimation of the carbon footprint,

295
00:19:57,494 --> 00:20:01,066
we take into account the type of the resource, meaning the

296
00:20:01,088 --> 00:20:04,554
type of the architecture of the machine, the amount of

297
00:20:04,592 --> 00:20:08,670
ram, the type of cpu, the type of the disk and the amount

298
00:20:08,740 --> 00:20:11,760
of the disk. Then we take also,

299
00:20:12,470 --> 00:20:15,794
and we have a model for every resource we manage on the platform.

300
00:20:15,992 --> 00:20:19,886
So then to create the estimation,

301
00:20:19,998 --> 00:20:23,826
we also take into account the

302
00:20:23,848 --> 00:20:27,574
real cpu load of the machine and the real data that has

303
00:20:27,612 --> 00:20:30,886
been loaded and emitted by the machine, which also impacts the

304
00:20:30,908 --> 00:20:34,930
carbon footprint. And so by using these two criteria,

305
00:20:35,010 --> 00:20:38,390
we have a very precise estimation

306
00:20:38,810 --> 00:20:42,394
across the time. It's pretty similar to what

307
00:20:42,432 --> 00:20:44,970
Google Carbon print provides,

308
00:20:45,630 --> 00:20:48,860
but you can have a look precisely to

309
00:20:49,950 --> 00:20:53,454
what is your carbon footprint across the time, across the day,

310
00:20:53,492 --> 00:20:57,534
across the week and across the months. So based

311
00:20:57,572 --> 00:21:01,194
on that, for people that are companies that are interested to optimize

312
00:21:01,242 --> 00:21:05,042
their carbon footprint, this is another criteria you can use to

313
00:21:05,096 --> 00:21:08,738
move from one resource to another resources, because perhaps moving to another

314
00:21:08,824 --> 00:21:12,850
region, for example, impacts less the carbon footprint.

315
00:21:13,430 --> 00:21:17,666
And we provide you access to all this data so you can decide.

316
00:21:17,858 --> 00:21:21,346
So thank you for having, let's say following

317
00:21:21,378 --> 00:21:24,502
this talk. I finished. Thanks a lot.

318
00:21:24,636 --> 00:21:28,760
As you can see, I show you how we can really

319
00:21:29,530 --> 00:21:32,626
do multicloud and workflow container

320
00:21:32,658 --> 00:21:36,598
management on top of multicloud and hybrid using

321
00:21:36,684 --> 00:21:40,478
our platform scale, Dynamicsmix. I hope you enjoy

322
00:21:40,564 --> 00:21:45,230
the show. Feel free to visit our website scaledynamics.com

323
00:21:45,380 --> 00:21:49,598
or send me an email if you want more information. Very pleased and

324
00:21:49,764 --> 00:21:52,478
bye bye. Have a nice day on comfort two.

