1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer,

3
00:00:06,610 --> 00:00:10,474
a quality engineer who wants to tackle the challenge of improving

4
00:00:10,522 --> 00:00:14,254
reliability in your DevOps? You can enable your DevOps for

5
00:00:14,292 --> 00:00:17,614
reliability with chaos native. Create your

6
00:00:17,652 --> 00:01:17,302
free account at Chaos native Litmus cloud hello

7
00:01:17,356 --> 00:01:21,138
everyone, I'm Parveen Khan. I'm a senior QA consultant at Thoughtworks

8
00:01:21,154 --> 00:01:24,946
which is based in London, UK. So today I'm

9
00:01:24,978 --> 00:01:28,802
going to share my experience and talk about a peek into observability

10
00:01:28,866 --> 00:01:32,554
from tester's lens. There might be quite a lot of you

11
00:01:32,592 --> 00:01:35,738
all who already know about what observability is,

12
00:01:35,824 --> 00:01:40,186
or there might be few people who are new to this and that's why you

13
00:01:40,208 --> 00:01:44,078
are here for things conference. The purpose or aim of this talk

14
00:01:44,164 --> 00:01:47,598
is to introduce you all to this topic and also

15
00:01:47,684 --> 00:01:51,390
introduce you to show how it can be helpful for testers.

16
00:01:52,770 --> 00:01:56,786
So before even jumping into the topic, I want to quickly take

17
00:01:56,808 --> 00:02:00,306
you through a simple scenario and pray for this scenario goes

18
00:02:00,328 --> 00:02:04,386
to Pierre set. I really liked how he

19
00:02:04,408 --> 00:02:08,226
used this example to explain this concept, so I'm

20
00:02:08,258 --> 00:02:11,734
using the same example. So imagine what

21
00:02:11,772 --> 00:02:15,362
would you do if you come across this foggy road while you're driving

22
00:02:15,426 --> 00:02:17,110
in a weird weather condition.

23
00:02:18,970 --> 00:02:22,522
One thing comes to our mind is that we need to slow down,

24
00:02:22,576 --> 00:02:25,580
right? But why do we need to slow down?

25
00:02:25,950 --> 00:02:29,322
It's because we don't have the visibility of what's ahead

26
00:02:29,376 --> 00:02:33,130
of us and we kind of consciously make the decision

27
00:02:33,290 --> 00:02:36,894
based on the risk, right? So if

28
00:02:36,932 --> 00:02:40,366
you're not able to drive, does that mean that we are

29
00:02:40,388 --> 00:02:43,534
bad drivers and whats we can drive

30
00:02:43,572 --> 00:02:46,834
fast enough on a forky road? Not at all. Right? In fact

31
00:02:46,952 --> 00:02:50,226
we are good drivers because we are making decisions based on

32
00:02:50,248 --> 00:02:53,826
risk. So does that mean whats the

33
00:02:53,848 --> 00:02:57,550
car isn't good enough to drive faster? Not at all.

34
00:02:57,720 --> 00:03:01,638
So our cars can drive much faster, but we just hold them back

35
00:03:01,724 --> 00:03:05,298
because we know it's bad to drive when there's no visibility.

36
00:03:05,474 --> 00:03:08,746
So we are kind of ultimately stuck, right?

37
00:03:08,928 --> 00:03:13,434
But how about these planes all

38
00:03:13,472 --> 00:03:17,034
the time? They fly among the clouds, right? So it is

39
00:03:17,072 --> 00:03:20,906
because pilots have additional instruments to do that and they don't

40
00:03:20,938 --> 00:03:24,798
have to solely rely on their eyes. So now

41
00:03:24,884 --> 00:03:28,314
what is it to do with software development?

42
00:03:28,362 --> 00:03:32,458
We all know the current trends is all about going faster and

43
00:03:32,564 --> 00:03:35,902
we all are kind of adopting different practices like agile

44
00:03:35,966 --> 00:03:39,790
DevOps, working in different distributed systems, working in microservices

45
00:03:39,950 --> 00:03:43,794
and whatnot. We want

46
00:03:43,832 --> 00:03:47,622
to deliver value quickly, right. By doing this all

47
00:03:47,676 --> 00:03:50,230
we are doing is we are building faster cars,

48
00:03:53,690 --> 00:03:57,998
we are moving into microservices, architecture or distributed

49
00:03:58,034 --> 00:04:02,842
systems and the reason why we are doing is because

50
00:04:02,896 --> 00:04:06,746
of simplicity of development, right? But on the others hand,

51
00:04:06,928 --> 00:04:11,102
there's a lot of complexity and multiple moving parts at the same time, which means

52
00:04:11,156 --> 00:04:14,986
it's more even more complex. When distributing

53
00:04:15,018 --> 00:04:18,174
a system. We are also distributing the places where things might

54
00:04:18,212 --> 00:04:19,040
go wrong.

55
00:04:21,330 --> 00:04:24,486
So we know that we need visibility,

56
00:04:24,618 --> 00:04:28,466
but how can we get that visibility into our system? So the answer to

57
00:04:28,488 --> 00:04:32,194
that is by having observability. So before even going

58
00:04:32,232 --> 00:04:35,522
ahead in trying to understand what observability is,

59
00:04:35,576 --> 00:04:39,000
let's first try to understand why do we need it in first place.

60
00:04:39,530 --> 00:04:43,670
Like I always look for real life examples to understand any given

61
00:04:43,740 --> 00:04:48,114
concept and kind of don't get convinced by just reading through theoretical

62
00:04:48,162 --> 00:04:51,226
concepts. So I'd love to share my real world experience with

63
00:04:51,248 --> 00:04:54,694
you of how I came to an understanding

64
00:04:54,742 --> 00:04:58,762
of why we need observability on the

65
00:04:58,816 --> 00:05:02,606
system that we were working on. So I joined a

66
00:05:02,628 --> 00:05:05,438
new team and the entire team was new.

67
00:05:05,604 --> 00:05:09,834
So I had an opportunity to join this team and work on really exciting

68
00:05:09,882 --> 00:05:13,886
and interesting product. It was a completely new domain for

69
00:05:13,908 --> 00:05:17,330
me and it was kind of an automated invoice system which was built

70
00:05:17,400 --> 00:05:21,746
on a microservices architecture. So the

71
00:05:21,768 --> 00:05:25,194
work which we were doing as a team was to build new features

72
00:05:25,262 --> 00:05:28,630
and also fix the bugs.

73
00:05:29,290 --> 00:05:32,982
So as a tester, when we start working

74
00:05:33,036 --> 00:05:36,854
on a new product, the first thing we try to do is to try

75
00:05:36,892 --> 00:05:40,454
and understand the product. So the

76
00:05:40,492 --> 00:05:44,454
more I was learning, the more I

77
00:05:44,492 --> 00:05:48,026
was trying to learn, but the more I

78
00:05:48,048 --> 00:05:51,230
was trying to learn about the product, I would feel that it's too complex.

79
00:05:51,970 --> 00:05:55,614
And another reason to feel this

80
00:05:55,652 --> 00:05:59,326
way was that I have seen a pattern, like a

81
00:05:59,348 --> 00:06:02,590
pattern of a lot of tickets being marked as blocked.

82
00:06:03,570 --> 00:06:07,440
I used to see a lot of production issues each day and

83
00:06:08,690 --> 00:06:12,634
developers would pick up those and investigate

84
00:06:12,682 --> 00:06:16,086
to find the root cause it. They used to

85
00:06:16,108 --> 00:06:19,574
spend days and weeks kind of like and

86
00:06:19,612 --> 00:06:23,014
then marketers blocked because they couldn't find any

87
00:06:23,052 --> 00:06:27,254
information and they couldn't find why

88
00:06:27,292 --> 00:06:31,260
it was causing this issue and they even couldn't find where the issue was.

89
00:06:34,030 --> 00:06:37,610
That kind of made me think about like

90
00:06:37,680 --> 00:06:40,794
what's wrong here? So at this point I

91
00:06:40,832 --> 00:06:44,000
really stopped thinking that the product is complex as an issue.

92
00:06:44,370 --> 00:06:47,966
So interestingly, at these same time I was trying to read a

93
00:06:47,988 --> 00:06:52,046
lot about observability without even knowing when and

94
00:06:52,148 --> 00:06:54,260
where it can be used.

95
00:06:55,030 --> 00:06:58,162
Not just reading but using different kind of

96
00:06:58,296 --> 00:07:02,306
tools. Whats promise to deliver observability to see what

97
00:07:02,328 --> 00:07:03,300
does it bring.

98
00:07:05,830 --> 00:07:09,462
So having a conversation at that point

99
00:07:09,596 --> 00:07:13,126
I was trying to have some conversation with one of my team member who was

100
00:07:13,148 --> 00:07:17,302
a developer. So that conversation gave me some food

101
00:07:17,356 --> 00:07:21,898
for thought. Whats this is what we are missing on our product and

102
00:07:21,984 --> 00:07:25,494
that's what is observability. So the conversation

103
00:07:25,622 --> 00:07:29,226
was like a light bulb moment for me because that kind

104
00:07:29,248 --> 00:07:33,054
of unlocked quite a lot of answers to few questions,

105
00:07:33,172 --> 00:07:36,720
but it did open up a lot of questions too.

106
00:07:38,530 --> 00:07:42,478
Of course I got an answer that we had

107
00:07:42,644 --> 00:07:45,586
very less or kind of no visibility onto our system,

108
00:07:45,688 --> 00:07:49,166
which is why a lot of issues were marked

109
00:07:49,198 --> 00:07:52,702
as blocked as the developers could not debug.

110
00:07:52,846 --> 00:07:55,330
And because these could not debug,

111
00:07:56,090 --> 00:07:57,880
they could not find the root cause.

112
00:08:00,010 --> 00:08:03,474
I keep talking about observability. Now let's

113
00:08:03,522 --> 00:08:05,974
try look into what it is.

114
00:08:06,172 --> 00:08:09,666
So there are quite a lot of definitions

115
00:08:09,698 --> 00:08:12,698
that can be found if we try to google about it, but this is kind

116
00:08:12,704 --> 00:08:15,738
of a simple one which I thought I can share.

117
00:08:15,904 --> 00:08:19,402
So observability is a measure of how well

118
00:08:19,456 --> 00:08:22,990
the internal started of a system can be inferred from

119
00:08:23,060 --> 00:08:26,206
its external output. It means you

120
00:08:26,228 --> 00:08:29,518
can answer any questions about what's happening on the inside of

121
00:08:29,524 --> 00:08:34,498
the system just by observing the outside of the system and without

122
00:08:34,664 --> 00:08:37,620
having to ship new code to answer new questions.

123
00:08:38,550 --> 00:08:42,142
When systems are down, you need to find answers

124
00:08:42,206 --> 00:08:45,022
by asking questions as quickly as possible.

125
00:08:45,176 --> 00:08:48,710
Right? So the system

126
00:08:48,780 --> 00:08:52,280
needs to be observable so that it can explain what's happening,

127
00:08:53,210 --> 00:08:56,406
so that we can find out what's happening on the inside of the

128
00:08:56,428 --> 00:08:59,994
system by just observing from the outside.

129
00:09:00,192 --> 00:09:03,450
But how can we make the system observable?

130
00:09:04,750 --> 00:09:07,820
The answer is by using the data. Now,

131
00:09:10,030 --> 00:09:13,854
how can we get the data? And what type of data do we need to

132
00:09:13,892 --> 00:09:16,640
have an observable system?

133
00:09:18,530 --> 00:09:23,070
We can get the data to make the system observable by adding instrumentation.

134
00:09:25,430 --> 00:09:28,770
And that instrumentation can give us the data

135
00:09:28,840 --> 00:09:32,066
that can be in the form of, like, it could be

136
00:09:32,088 --> 00:09:35,210
logs, it could be traces, or it could be metrics.

137
00:09:35,390 --> 00:09:39,302
So now let's talk about each

138
00:09:39,356 --> 00:09:43,160
of these before moving ahead with the story.

139
00:09:45,610 --> 00:09:48,938
What are logs? Okay, a log is

140
00:09:48,944 --> 00:09:51,740
a simple message which has some kind of information.

141
00:09:52,590 --> 00:09:55,990
It might have a timestamp and a payload,

142
00:09:56,070 --> 00:10:00,042
and that can help us give more

143
00:10:00,096 --> 00:10:04,234
context. Right? Again, if you're talking about distributed systems,

144
00:10:04,282 --> 00:10:07,886
we don't want to get into each different services and try to

145
00:10:07,908 --> 00:10:11,440
look at these logs. So rather than having,

146
00:10:11,970 --> 00:10:15,294
we should have them centralized at one place so it's easier.

147
00:10:15,422 --> 00:10:19,106
Right? So let me tell you,

148
00:10:19,208 --> 00:10:22,930
while I was working with this team, we used to have logs.

149
00:10:23,830 --> 00:10:27,474
It's not like we didn't had any logs, but we did had some logs,

150
00:10:27,522 --> 00:10:30,694
but they were all stored separately for each service.

151
00:10:30,812 --> 00:10:34,262
And what we used was like we used n log.

152
00:10:34,396 --> 00:10:38,102
And to access those logs, we had to access those

153
00:10:38,156 --> 00:10:42,186
separately for each service. And only way to view those was to

154
00:10:42,208 --> 00:10:44,460
open it in notepad plus plus.

155
00:10:45,230 --> 00:10:49,322
So whenever there used to be an issue, we would end up like having

156
00:10:49,376 --> 00:10:52,302
multiple notepad plus plus tabs open.

157
00:10:52,436 --> 00:10:56,110
So it was such a pain to add

158
00:10:56,180 --> 00:10:59,710
to that, the way we could search the logs was by using

159
00:10:59,780 --> 00:11:02,750
control f. Can you imagine?

160
00:11:03,510 --> 00:11:08,398
So this is the reason why logs

161
00:11:08,414 --> 00:11:12,530
should be centralized, so that we can access all the logs at the central place,

162
00:11:12,600 --> 00:11:16,674
and the log should be easily

163
00:11:16,722 --> 00:11:20,614
searchable. And the way we can make it easily searchable is by

164
00:11:20,652 --> 00:11:24,166
having the structured logs. Now, coming to

165
00:11:24,188 --> 00:11:27,286
the metrics, a metric could

166
00:11:27,308 --> 00:11:31,782
be a simple trending number, or it could be a simple value that

167
00:11:31,916 --> 00:11:35,594
kind of like expresses some data, but the system. So these

168
00:11:35,632 --> 00:11:39,354
metrics might represent different things. Like metrics might

169
00:11:39,392 --> 00:11:43,226
have some name, the time and the value. So these metrics

170
00:11:43,258 --> 00:11:46,506
are usually represented as counts

171
00:11:46,538 --> 00:11:50,366
or measures, and kind of often calculated over a period of

172
00:11:50,388 --> 00:11:53,854
time. For example, a system metric can tell you how

173
00:11:53,892 --> 00:11:56,858
much memory is being used by a process out of the total,

174
00:11:57,044 --> 00:12:01,038
and an application. Metrics can show you the number of requests

175
00:12:01,054 --> 00:12:05,646
per second being handled by a service. Or it can tell you error

176
00:12:05,678 --> 00:12:09,158
rate of an API and business metric could

177
00:12:09,164 --> 00:12:12,534
be something like how long

178
00:12:12,572 --> 00:12:15,526
does it take for a user to log in? Or how long does it take

179
00:12:15,548 --> 00:12:18,874
for a user to do certain action while

180
00:12:18,912 --> 00:12:22,938
using our product. So metrics are

181
00:12:23,024 --> 00:12:27,162
really good at aggregating things, but not

182
00:12:27,216 --> 00:12:30,334
really good at pinpointing specific detail about something.

183
00:12:30,372 --> 00:12:34,126
Like at this particular time, this is the customer who was having a problem.

184
00:12:34,308 --> 00:12:36,160
So how could we do that?

185
00:12:38,690 --> 00:12:42,334
By using traces. So trace is

186
00:12:42,372 --> 00:12:46,162
kind of like telling you a story which gives more low level

187
00:12:46,216 --> 00:12:49,742
details. It kind of shows the entire flow of the request,

188
00:12:49,806 --> 00:12:53,150
and I think it's kind of a really valuable while debugging.

189
00:12:53,230 --> 00:12:56,850
So a single trace shows the activity for an individual transaction

190
00:12:56,930 --> 00:13:00,534
or request or event as it flows through

191
00:13:00,572 --> 00:13:04,166
an application. So it kind of shows the

192
00:13:04,188 --> 00:13:07,502
end to end request. And traces

193
00:13:07,586 --> 00:13:10,970
are kind of very critical part of observability, as they

194
00:13:11,040 --> 00:13:13,290
kind of provide a lot of context.

195
00:13:14,510 --> 00:13:17,786
Okay, so I've been

196
00:13:17,808 --> 00:13:21,694
saying that with observability we can ask questions, but what

197
00:13:21,732 --> 00:13:25,566
kind of questions can we ask? So I can give you an example of

198
00:13:25,588 --> 00:13:27,680
some of the questions that can be asked.

199
00:13:29,090 --> 00:13:32,982
Is something like, why is x broken?

200
00:13:33,146 --> 00:13:37,266
So what service does my service depend on?

201
00:13:37,368 --> 00:13:40,642
And whats services are depending on my service?

202
00:13:40,776 --> 00:13:42,930
What went wrong during this release,

203
00:13:44,310 --> 00:13:47,378
why has the performance degraded over the past quarter?

204
00:13:47,474 --> 00:13:50,966
Or what logs should we look at right now? Or it

205
00:13:50,988 --> 00:13:54,440
could be like, what did my service look at this point? X.

206
00:13:55,370 --> 00:13:59,526
So just like how we talk about DevOps,

207
00:13:59,718 --> 00:14:03,098
we cannot say we are doing DevOps by just having

208
00:14:03,184 --> 00:14:07,114
some automated tool in place or by

209
00:14:07,152 --> 00:14:10,462
having some sort of process in place. It's more than

210
00:14:10,516 --> 00:14:14,030
tools, it's more than okay. So it is kind of a

211
00:14:14,100 --> 00:14:16,986
cultural and mindset change. Similarly,

212
00:14:17,098 --> 00:14:20,830
we cannot say we are doing or having observability

213
00:14:21,490 --> 00:14:25,166
by just having some different tools in place and logging

214
00:14:25,198 --> 00:14:29,166
some information. It is not just about getting the tools

215
00:14:29,198 --> 00:14:32,466
and sending some data and trying to observe the system.

216
00:14:32,568 --> 00:14:34,580
It is a cultural change.

217
00:14:35,830 --> 00:14:39,634
Now, you might be thinking what's in for testers

218
00:14:39,682 --> 00:14:43,286
with all the observability and all these new tools, why and how is

219
00:14:43,308 --> 00:14:47,670
it useful for testers, and how testers can be helpful

220
00:14:48,350 --> 00:14:52,460
and useful and they can use absorbability and how can they use it?

221
00:14:52,990 --> 00:14:56,522
So testers are like,

222
00:14:56,576 --> 00:15:00,766
you know, it is, it is easier to find more information

223
00:15:00,868 --> 00:15:04,414
around the issues, right? So for

224
00:15:04,452 --> 00:15:08,202
example, while we are testing,

225
00:15:08,266 --> 00:15:12,014
we might see some unexpected behavior or maybe see

226
00:15:12,052 --> 00:15:15,982
some kind of failures. So having access to these kind of tools

227
00:15:16,126 --> 00:15:20,450
and having these kind of tools in place allows

228
00:15:21,030 --> 00:15:24,546
the testers to look under the hood to find out what is happening with the

229
00:15:24,568 --> 00:15:28,550
request. And not just that, but it also allows

230
00:15:29,530 --> 00:15:33,734
testers to learn more about the system of

231
00:15:33,772 --> 00:15:37,366
how it communicates and works. So like for

232
00:15:37,388 --> 00:15:41,174
example, I would be using devtools to see what's

233
00:15:41,222 --> 00:15:44,458
going on when something didn't look right

234
00:15:44,544 --> 00:15:48,346
or while I was testing or while I was looking at from

235
00:15:48,368 --> 00:15:52,220
the UI point of view. But I wouldn't get enough information

236
00:15:53,390 --> 00:15:57,414
by just looking at the devtools. So by having these tools

237
00:15:57,542 --> 00:16:01,406
in place helped me in getting more information that could

238
00:16:01,428 --> 00:16:05,386
be added to the tickets while we are raising

239
00:16:05,418 --> 00:16:08,654
the bugs, which can be helpful for the developers.

240
00:16:08,782 --> 00:16:12,994
It's not just about finding the information while looking

241
00:16:13,032 --> 00:16:17,106
into the issues, but it could help us uncover understanding

242
00:16:17,138 --> 00:16:20,310
of our product, which is really very important for a tester.

243
00:16:21,850 --> 00:16:25,542
Testers are really very curious explorers and great at asking

244
00:16:25,596 --> 00:16:29,386
questions. So things could be a tool for exploring and asking questions.

245
00:16:29,568 --> 00:16:33,206
So as a tester, I tend to ask a lot of questions when I don't

246
00:16:33,238 --> 00:16:34,300
understand things.

247
00:16:38,190 --> 00:16:41,614
Testers are great at exploratory testing, not just good

248
00:16:41,652 --> 00:16:45,134
at asking questions, but testers are always curious to find

249
00:16:45,252 --> 00:16:49,146
the information about these system. So while exploring the logs,

250
00:16:49,178 --> 00:16:52,914
the metrics or the traces or any kind of data,

251
00:16:53,032 --> 00:16:56,914
testers might point out where there is need for

252
00:16:56,952 --> 00:17:00,274
more instrumentation. And not just

253
00:17:00,312 --> 00:17:03,790
that, but it also supports and helps testers for testing in production.

254
00:17:03,870 --> 00:17:07,286
So it allows the teams not just to shift left

255
00:17:07,388 --> 00:17:11,094
but also to shift right. So I

256
00:17:11,132 --> 00:17:15,698
really like this tweet by Mahd

257
00:17:15,874 --> 00:17:19,106
and how this has been put together, saying that

258
00:17:19,148 --> 00:17:22,874
a lot of times good debugging and good exploratory testing are both

259
00:17:22,912 --> 00:17:26,234
indistinguishable. When developer explores, they call

260
00:17:26,272 --> 00:17:29,994
it more often debugging, whether they know there is a problem or

261
00:17:30,032 --> 00:17:33,630
just suspect there could be. When testers explore,

262
00:17:34,210 --> 00:17:37,120
debugging is close to the last word being used.

263
00:17:39,330 --> 00:17:42,190
So to summarize,

264
00:17:43,910 --> 00:17:47,854
by making systems observable, anyone on the team can easily navigate

265
00:17:47,902 --> 00:17:51,474
from effect to clue in the production system. It makes

266
00:17:51,512 --> 00:17:55,154
it easier to debug. The goal of

267
00:17:55,192 --> 00:17:58,082
observability is not just to collect the logs,

268
00:17:58,146 --> 00:18:01,590
metrics or traces, but using the data

269
00:18:01,660 --> 00:18:04,966
to get the feedback. It just doesn't allow us

270
00:18:04,988 --> 00:18:08,694
to find the knowns of the system, but also allows us to know

271
00:18:08,732 --> 00:18:10,390
the unknown unknowns.

272
00:18:12,750 --> 00:18:16,460
So every learning experience and every journey has

273
00:18:16,830 --> 00:18:21,278
something to take away. So I kind of had some

274
00:18:21,444 --> 00:18:24,400
learnings as well to take away from this experience.

275
00:18:27,090 --> 00:18:30,894
So the key takeaway for me was that we

276
00:18:30,932 --> 00:18:35,060
as testers can go out of the way and think outside the box.

277
00:18:35,590 --> 00:18:39,682
We care and advocate about quality and that

278
00:18:39,736 --> 00:18:43,090
could be related to bringing in the improvements

279
00:18:43,510 --> 00:18:47,930
in the process and bringing in the new tools related to test automation.

280
00:18:48,030 --> 00:18:51,814
But that's not the limit. I learned that we do

281
00:18:51,852 --> 00:18:55,526
not have to limit ourselves and say that this is not related to

282
00:18:55,548 --> 00:18:59,114
testing. So let's not look into this or let's not learn

283
00:18:59,152 --> 00:19:02,634
about this. I saw the problem my team was

284
00:19:02,672 --> 00:19:06,106
going through and the problems were like developers getting

285
00:19:06,128 --> 00:19:09,386
frustrated when they couldn't resolve production issues and the

286
00:19:09,408 --> 00:19:13,086
product, others getting frustrated because they had to

287
00:19:13,108 --> 00:19:16,414
answer the clients and these had no enough information related to

288
00:19:16,452 --> 00:19:20,222
those production issues. I didn't knew the answer or

289
00:19:20,276 --> 00:19:23,922
solution to it, but being active in the community and seeing new

290
00:19:23,976 --> 00:19:27,794
tools and concepts and exploring them and then finding these

291
00:19:27,832 --> 00:19:31,986
solution and then trying out myself

292
00:19:32,088 --> 00:19:35,838
using open source tools and then presenting that as

293
00:19:35,864 --> 00:19:39,714
a suggestion to my team by building a proof

294
00:19:39,762 --> 00:19:43,446
of concept kind of help, not limiting myself to

295
00:19:43,468 --> 00:19:46,806
testing tools only and trying to think outside the box

296
00:19:46,908 --> 00:19:51,466
to help my team. And when

297
00:19:51,488 --> 00:19:55,738
I left the team, we were not yet in the terms of complete

298
00:19:55,824 --> 00:19:59,306
observability implementation, but we kind of had started our

299
00:19:59,328 --> 00:20:03,166
first steps into it. So we were like from having no

300
00:20:03,188 --> 00:20:06,894
visibility to we kind of

301
00:20:06,932 --> 00:20:10,602
had structured and centralized logs that can be easily

302
00:20:10,666 --> 00:20:13,970
querable. And we were then taking the next steps.

303
00:20:14,630 --> 00:20:18,226
So to end with, I would like to say that observability gives

304
00:20:18,408 --> 00:20:21,938
power to the entire team to get the visibility when needed.

305
00:20:22,024 --> 00:20:25,446
And observability is much more powerful when

306
00:20:25,468 --> 00:20:28,946
you apply with the right mindset and clear processes

307
00:20:28,978 --> 00:20:32,134
in place. It allows these

308
00:20:32,172 --> 00:20:36,710
teams to become proactive towards the issues rather than being reactive.

309
00:20:37,290 --> 00:20:40,322
It kind of gives power and superpowers

310
00:20:40,386 --> 00:20:43,874
everyone on the team, whether it's developers, whether it's ops engineers,

311
00:20:43,922 --> 00:20:46,470
whether it's sres, or whether it's testers.

312
00:20:48,730 --> 00:20:52,266
So thank you so much for joining

313
00:20:52,298 --> 00:20:54,560
my session and listening to my story.

314
00:20:56,610 --> 00:20:59,886
Happy to answer any questions if you have any, and be sure to

315
00:20:59,908 --> 00:21:03,710
check out my blog post pervincans.com

316
00:21:03,780 --> 00:21:07,150
and do follow me on Twitter at pervine.

317
00:21:08,210 --> 00:21:09,260
Thank you so much.

