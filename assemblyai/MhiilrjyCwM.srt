1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:14,094
observing changes exceptions. Errors in real time

4
00:00:14,212 --> 00:00:17,914
allows you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:00:25,360
You.

7
00:00:46,670 --> 00:00:49,802
Hello. So we've been invited here to talk to you about clean,

8
00:00:49,856 --> 00:00:53,770
concise, collaborative code, and I thought we'd start with introducing ourselves.

9
00:00:53,930 --> 00:00:57,182
So I'm Chris Miller, head of IT and development at School

10
00:00:57,236 --> 00:01:01,390
of Code. Been working with computers since 2000.

11
00:01:01,540 --> 00:01:04,818
Professionally been using computers since 1983,

12
00:01:04,904 --> 00:01:07,986
back when eight colors was considered fun.

13
00:01:08,168 --> 00:01:11,566
Liz, do you want to introduce yourself? Absolutely. Hi, I'm Liz

14
00:01:11,598 --> 00:01:15,042
Kaufman. Great to be here as well. After graduating with a history

15
00:01:15,096 --> 00:01:18,418
and archaeology degree. Still didn't know quite what I wanted to be when I grew

16
00:01:18,434 --> 00:01:21,766
up. Worked in project management and operations in the private and

17
00:01:21,788 --> 00:01:25,430
public sector till nearly 30, when I thought, if not now,

18
00:01:25,580 --> 00:01:28,934
when? I'm going to follow that little what if in the back of my

19
00:01:28,972 --> 00:01:32,214
head toward technology. Heard about a thing

20
00:01:32,252 --> 00:01:35,402
called the school of code boot camp, saw that it was free and thought,

21
00:01:35,456 --> 00:01:39,338
oh, I'll give this a go. And I discovered as a

22
00:01:39,344 --> 00:01:43,022
boot camper that code is the closest thing to magic in real

23
00:01:43,076 --> 00:01:46,602
life. And then after graduating as an assistant coach,

24
00:01:46,746 --> 00:01:50,606
coach and lead, lead, lead, lead coach and head of bootcamps School of code,

25
00:01:50,708 --> 00:01:54,850
I have helped share that magic with over 300 people and counting.

26
00:01:56,070 --> 00:02:00,514
Amazing. And it's great to be able to help hundreds of people each year.

27
00:02:00,712 --> 00:02:04,322
And the number of those boot campers that talk about our course

28
00:02:04,376 --> 00:02:07,010
being life changing, changing is incredible.

29
00:02:08,070 --> 00:02:11,126
So we're going to have a look at six questions, Liz, and we're just

30
00:02:11,148 --> 00:02:14,518
going to chat through them and see what we come up with.

31
00:02:14,684 --> 00:02:17,830
So if I go to our next slide,

32
00:02:19,450 --> 00:02:23,062
here are our six questions. So we're going to start by looking at plans.

33
00:02:23,126 --> 00:02:27,066
And is your plan extensive enough to help someone else? Is your

34
00:02:27,088 --> 00:02:30,694
code abstracted enough to minimize load? And that's talking about the mental

35
00:02:30,742 --> 00:02:34,302
load. Is your code encapsulated enough to be clear?

36
00:02:34,436 --> 00:02:38,394
Is it tested enough to allow you to be confident? Is it documented

37
00:02:38,442 --> 00:02:41,706
enough to help? And is your code clear enough that a nondeveloper

38
00:02:41,738 --> 00:02:45,266
can understand it? Which is a scary question, which is why I

39
00:02:45,288 --> 00:02:49,394
put it at the end. Absolutely. So let's start

40
00:02:49,432 --> 00:02:53,058
with that first question. Is your clean extensive enough to

41
00:02:53,064 --> 00:02:56,900
help someone else? What do you think a plan looks like this?

42
00:02:57,910 --> 00:03:01,466
I think a plan, and we go on a lot. Any boot campers

43
00:03:01,518 --> 00:03:04,486
listening or ex boot campers will have a little bit of a flinch when they

44
00:03:04,508 --> 00:03:07,346
hear the word plan because we go on about it so much during the boot

45
00:03:07,378 --> 00:03:10,342
camp. But I think a plan looks like,

46
00:03:10,476 --> 00:03:13,834
if you think about all of the logic that's going to go

47
00:03:13,872 --> 00:03:16,954
into what you're trying to accomplish with the code, and you

48
00:03:16,992 --> 00:03:20,614
break that down and keep breaking it down, break it down until

49
00:03:20,672 --> 00:03:24,730
you cannot break it down anymore, that computational

50
00:03:24,810 --> 00:03:28,350
thinking, that first stage of computational thinking, where you break

51
00:03:28,420 --> 00:03:32,202
it down into those little bitty chunks, I think that's the foundation

52
00:03:32,346 --> 00:03:35,554
of a good plan. Because, let's face it, especially for people new to code,

53
00:03:35,592 --> 00:03:39,858
but probably for people everywhere, the logic is hard,

54
00:03:40,024 --> 00:03:43,794
and the syntax is hard. So, trying to do both of those hard

55
00:03:43,832 --> 00:03:47,506
things at the same time, recipe for trouble. So, why not make

56
00:03:47,528 --> 00:03:51,430
it a little bit easier on yourself, on your fellow developers, on anyone else

57
00:03:51,500 --> 00:03:54,726
helping out or coming across this work by separating those

58
00:03:54,748 --> 00:03:58,374
out. Do the logic. Break down that logic first, and then

59
00:03:58,492 --> 00:04:01,386
layer on the code after you've got that plan. What about you, Chris? What do

60
00:04:01,408 --> 00:04:05,306
you think? So, for me, a plan is looking at

61
00:04:05,488 --> 00:04:08,410
the flow that you're going to take in the code. So,

62
00:04:08,560 --> 00:04:12,022
yes, you can break it down to the minute details,

63
00:04:12,086 --> 00:04:15,166
and experience will tell you when you've got far enough for

64
00:04:15,188 --> 00:04:18,794
you. So, as a beginner, yeah, by all means, go to the deepest

65
00:04:18,842 --> 00:04:22,414
level. As a senior, you may just be able to say,

66
00:04:22,532 --> 00:04:26,050
I want a request all from this database table.

67
00:04:27,030 --> 00:04:31,022
The sort of way that I generally talk about it is that, is the path

68
00:04:31,086 --> 00:04:33,810
clear enough with every step planned?

69
00:04:34,310 --> 00:04:37,726
So, is that clear enough for somebody else

70
00:04:37,768 --> 00:04:41,160
to look at your plan and go, oh, yeah, I can see where you're going.

71
00:04:42,250 --> 00:04:45,426
Does that mean that you have to detail every mortal

72
00:04:45,458 --> 00:04:48,454
minor thing? Not always. Sometimes, yes,

73
00:04:48,492 --> 00:04:51,420
you do. It depends on who you're talking to and who you're with.

74
00:04:51,950 --> 00:04:55,740
So, normally I'd say, let's go through a plan together.

75
00:04:56,110 --> 00:04:59,466
You're up for perhaps working through a plan just

76
00:04:59,568 --> 00:05:03,246
out loud on how we might do something simple. So, let's talk about

77
00:05:03,268 --> 00:05:07,354
a calculator. Now, imagine we want a calculator

78
00:05:07,402 --> 00:05:10,926
that handles whole numbers only, and we want it

79
00:05:10,948 --> 00:05:15,234
to be able to add two, divide two, subtract two, and multiply two.

80
00:05:15,432 --> 00:05:18,754
What might your clean look like for that? Yeah,

81
00:05:18,792 --> 00:05:22,638
I think for me, I would separate them out. I would tackle

82
00:05:22,734 --> 00:05:26,446
each of those functions. So the addition, the subtraction,

83
00:05:26,558 --> 00:05:29,734
the division, the multiplication, I would tackle them. I'd start

84
00:05:29,772 --> 00:05:33,414
with the basics. We always say you can iterate on a plan multiple times

85
00:05:33,452 --> 00:05:36,966
to get it right. So a basic plan might be, hey, I want

86
00:05:36,988 --> 00:05:40,914
to put a couple of numbers in, and I want to get

87
00:05:40,972 --> 00:05:44,634
one number out. That's the sum of these two numbers. Okay. That's one

88
00:05:44,672 --> 00:05:48,170
level of the plan. Then you take another pass at it,

89
00:05:48,240 --> 00:05:52,026
get a bit deeper. Okay, so what's going to happen? Maybe I

90
00:05:52,048 --> 00:05:55,774
need to have some parameters, have some functionality, have that

91
00:05:55,812 --> 00:05:59,754
operator. Okay, what operator do I need? Let's pseudocode this out. This is very simplified

92
00:05:59,882 --> 00:06:03,806
for addition, but the pattern track. So pseudocoding that

93
00:06:03,828 --> 00:06:07,346
out, what do we need to return? What type does it need to

94
00:06:07,368 --> 00:06:11,122
come out as? How is it going to be expected in places where this function

95
00:06:11,176 --> 00:06:14,994
might be used? How are we thinking making it reusable? Lots of

96
00:06:15,032 --> 00:06:18,626
things to keep in mind. So yeah, I love how you're saying like, you don't

97
00:06:18,658 --> 00:06:22,786
have to go into the minute detail as a general rule,

98
00:06:22,898 --> 00:06:26,134
but the level of detail that you need, like you said,

99
00:06:26,172 --> 00:06:29,766
to help somebody else read that plan. So stepping through it

100
00:06:29,868 --> 00:06:33,754
in each of those operations and seeing if there are any pitfalls as

101
00:06:33,792 --> 00:06:37,562
well. Any pitfalls. Because running into pitfalls during the plan

102
00:06:37,696 --> 00:06:41,274
is always a little bit less scary than running into pitfalls during

103
00:06:41,312 --> 00:06:44,846
the actual code, for sure. Absolutely. And actually there

104
00:06:44,868 --> 00:06:48,446
is a pitfall in that plan, isn't there? So we've got the idea of

105
00:06:48,468 --> 00:06:52,110
adding numbers together and producing a whole number at the other end.

106
00:06:52,260 --> 00:06:56,370
What's three divided by two? Yeah. And as you step

107
00:06:56,440 --> 00:07:00,274
through, you're like, oh, division. Division might give us

108
00:07:00,312 --> 00:07:03,602
a little problem there because we've got our friend the decimal coming in.

109
00:07:03,736 --> 00:07:07,326
Yeah. So then you discuss how you'd handle

110
00:07:07,358 --> 00:07:10,614
that. So we might decide to round up, we might decide to round down,

111
00:07:10,652 --> 00:07:14,454
or we might decide to change the original plan and have

112
00:07:14,492 --> 00:07:17,960
a decimal for that, or a floating point, as it's called in code.

113
00:07:19,450 --> 00:07:22,390
And that discussion can happen between the developers,

114
00:07:22,470 --> 00:07:25,370
between the people that have come up with the original request.

115
00:07:25,790 --> 00:07:29,274
But that's why we plan. For me, it's about finding out

116
00:07:29,312 --> 00:07:32,726
where the pitfalls are, getting a plan ahead, and if I disappear

117
00:07:32,758 --> 00:07:35,934
tomorrow, somebody else can pick up my plan and run with it.

118
00:07:36,132 --> 00:07:39,806
Or at least that's the dream, I think also just to cut in

119
00:07:39,828 --> 00:07:43,806
there. When we talk about walking the walk with agile methodology as

120
00:07:43,828 --> 00:07:47,822
well, we're talking about iterating. We're talking about going back to those stakeholders,

121
00:07:47,886 --> 00:07:51,794
the users, the other people in your business, and if they've given

122
00:07:51,832 --> 00:07:55,326
you a brief, if they've said, hey, I want this calculator to only kick

123
00:07:55,358 --> 00:07:59,022
out whole numbers during the plan. If you find out that division

124
00:07:59,086 --> 00:08:02,278
issue, you've got some floats in there that might throw that back.

125
00:08:02,364 --> 00:08:05,574
You can go back to them early and you can be honest and say this

126
00:08:05,612 --> 00:08:09,382
doesn't match up. And that's that really agile, that old picture. If you google

127
00:08:09,436 --> 00:08:13,014
it with like, it starts with a skateboard, then a scooter, then a bicycle,

128
00:08:13,062 --> 00:08:16,506
then a car, you can go through those stages earlier on in

129
00:08:16,528 --> 00:08:19,626
the process to refine the whole ask. So I thought that was a really

130
00:08:19,648 --> 00:08:22,830
important part that people don't often think about with planning as well.

131
00:08:22,980 --> 00:08:27,086
Absolutely. And it also becomes part of the documentation of

132
00:08:27,108 --> 00:08:30,382
how you've developed this. So it's something

133
00:08:30,436 --> 00:08:33,790
that other people can refer back to, because if you've solved a problem

134
00:08:33,940 --> 00:08:37,714
and you've got the plan for how you solved it, then somebody can take that

135
00:08:37,752 --> 00:08:42,018
plan and solve a different problem that's similar. Exactly that.

136
00:08:42,104 --> 00:08:45,220
Finding those patterns at algorithmic thinking, for sure.

137
00:08:45,910 --> 00:08:49,554
Yeah, plans are definitely useful,

138
00:08:49,602 --> 00:08:52,886
but I think that's like the very first step. I think we

139
00:08:52,908 --> 00:08:56,438
then get on to the next step, which would be, can somebody understand

140
00:08:56,524 --> 00:09:00,166
and execute that plan? So that's

141
00:09:00,198 --> 00:09:03,610
where it's useful to think about the language you're using in your plan,

142
00:09:03,680 --> 00:09:06,986
perhaps. So if I'm using terms that the

143
00:09:07,008 --> 00:09:11,302
team aren't going to know, you don't know PHP,

144
00:09:11,366 --> 00:09:14,174
for example, whereas I do. So if I came to you and said, well,

145
00:09:14,212 --> 00:09:17,918
we're going to create a trait that we're going to attach to an abstract class,

146
00:09:18,084 --> 00:09:21,760
you're going to look at me, we're going to do what now?

147
00:09:22,130 --> 00:09:25,458
And it's about thinking that language through

148
00:09:25,544 --> 00:09:29,060
looking at how it interprets to the next person.

149
00:09:29,430 --> 00:09:32,478
And sometimes that language is unavoidable. And what I'll

150
00:09:32,494 --> 00:09:36,354
do in that is, even though I'm writing the plan primarily for

151
00:09:36,392 --> 00:09:39,958
me, I'll actually put the definitions in for anything that looks a

152
00:09:39,964 --> 00:09:43,880
little odd or linked to some documentation on how it works.

153
00:09:45,290 --> 00:09:48,818
Definitely. I think that's really important to have that ability

154
00:09:48,914 --> 00:09:52,890
to make that plan readable. So like you said, links to documentation,

155
00:09:53,390 --> 00:09:57,114
defining any buzzword. So you clean, take it to other

156
00:09:57,152 --> 00:10:00,370
people. Also, we put a lot of emphasis at the school of code on pairing

157
00:10:00,470 --> 00:10:04,750
and on making sure that when you are working with other developers

158
00:10:05,090 --> 00:10:09,134
that might have those differences in experience in

159
00:10:09,332 --> 00:10:12,574
what they specialize in, in what languages they code in,

160
00:10:12,612 --> 00:10:16,078
things like that, that we make sure that the plan is good enough for everybody

161
00:10:16,164 --> 00:10:19,586
because it's a bit of a toxic environment. If you say, well, okay, I've made

162
00:10:19,608 --> 00:10:23,966
a plan, put the, I can't even remember what you said about the PHP lingo

163
00:10:23,998 --> 00:10:27,566
there, and then move on, start developing,

164
00:10:27,598 --> 00:10:30,806
and you've got a junior developer. If you're a senior developer, you've got

165
00:10:30,828 --> 00:10:34,306
a junior developer sitting there next to you, ostensibly pairing,

166
00:10:34,338 --> 00:10:38,278
ostensibly learning from you, and they're still not clean about what's happening

167
00:10:38,364 --> 00:10:41,766
in that plan. That's not going to be good for them. Then it's not

168
00:10:41,788 --> 00:10:45,402
going to be good for you either when it comes time to hand something over

169
00:10:45,456 --> 00:10:48,938
to them or work with them, or if you get hit by a bus,

170
00:10:49,024 --> 00:10:52,346
if heaven forbid, that fosters that environment

171
00:10:52,378 --> 00:10:55,486
where you're not truly pairing, working together.

172
00:10:55,668 --> 00:10:59,022
Yeah, for sure. Absolutely. And that pairing process actually

173
00:10:59,076 --> 00:11:02,922
plays into how you write the plan, because a senior can often forget

174
00:11:03,066 --> 00:11:06,722
that there are certain things that a junior might not know and

175
00:11:06,776 --> 00:11:09,998
conversely, a junior can come up with some brilliant ideas.

176
00:11:10,094 --> 00:11:13,618
I've been in scenarios where the junior developer in the situation

177
00:11:13,704 --> 00:11:17,174
has given me a solution that I hadn't even thought of, and then the

178
00:11:17,212 --> 00:11:21,126
senior in the situation has gone, yeah, that looks fun,

179
00:11:21,308 --> 00:11:24,934
let's try that. It's amazing

180
00:11:25,052 --> 00:11:28,854
how just having a conversation makes a difference. And I

181
00:11:28,892 --> 00:11:31,974
mean, we all know the old stereotype of developers

182
00:11:32,022 --> 00:11:34,780
in a corner, headphones on, not talking to anybody.

183
00:11:35,150 --> 00:11:38,282
That stereotype is fast disappearing. I'm not

184
00:11:38,336 --> 00:11:41,754
seeing that as much in the industry anymore. No, for sure.

185
00:11:41,792 --> 00:11:44,654
That's kind of our whole ethos that if you want to learn to code like

186
00:11:44,692 --> 00:11:48,474
that, you can still, you can go on the free solo

187
00:11:48,522 --> 00:11:52,126
resources out there and put your head down and do that. But in

188
00:11:52,148 --> 00:11:55,554
a modern tech environment, the employers that hire from school of code

189
00:11:55,672 --> 00:11:59,390
want people who can do this planning process, who can collaborate,

190
00:11:59,470 --> 00:12:03,122
who can talk to other people and not just computers, for sure.

191
00:12:03,256 --> 00:12:07,190
Absolutely. So let's take a look at our second

192
00:12:07,260 --> 00:12:10,994
question. Is your code abstracted enough to minimize load?

193
00:12:11,122 --> 00:12:14,294
So we've got that illustration there of

194
00:12:14,332 --> 00:12:18,374
the three different hearts. I love that picture. Do you

195
00:12:18,412 --> 00:12:21,962
think that that carries through to code? Is there a time where you can

196
00:12:22,016 --> 00:12:25,642
over abstract or under abstract? Yeah, I think it

197
00:12:25,696 --> 00:12:29,034
does, and it's hard for, especially when you're just starting out,

198
00:12:29,072 --> 00:12:32,506
to know where that line is. I might nick that picture for some of

199
00:12:32,528 --> 00:12:36,090
my slides for the boot campers, actually. I think because that's a good illustration

200
00:12:36,170 --> 00:12:39,534
of it, that you can spend time putting all the

201
00:12:39,572 --> 00:12:43,822
detail in one big old file, that cognitive load doing

202
00:12:43,876 --> 00:12:47,854
it to death. That might be easier at first. So recently we taught the exprs

203
00:12:47,902 --> 00:12:51,566
JS framework. We were writing servers using javascript and exprs,

204
00:12:51,678 --> 00:12:54,994
and we go from writing everything, all of the code for your server in

205
00:12:55,032 --> 00:12:58,514
one big old app js file. And then when we split

206
00:12:58,562 --> 00:13:02,386
off into things like the routers being separate or the actual models

207
00:13:02,418 --> 00:13:06,502
that are talking to the data being separate. Everybody starts to panic and everybody

208
00:13:06,556 --> 00:13:09,698
goes, oh, I don't know what's happening. Code is going everywhere.

209
00:13:09,794 --> 00:13:13,226
So it's showing them, it's finding that balance. Yes, it is a little bit

210
00:13:13,248 --> 00:13:16,886
harder at first to start splitting things out, to not have that comfort

211
00:13:16,998 --> 00:13:20,460
blanket of everything being in front of you in one place.

212
00:13:20,830 --> 00:13:24,586
But then when things get more complicated, when you have like hundreds

213
00:13:24,618 --> 00:13:27,934
of lines of code in one file, then they start to

214
00:13:27,972 --> 00:13:31,726
see, okay, now it's a lot easier if I

215
00:13:31,748 --> 00:13:34,866
don't have to parse through all of my routing, all of

216
00:13:34,968 --> 00:13:38,386
that sort of governance, getting the path parameter up just to

217
00:13:38,408 --> 00:13:40,900
see how this one thing works. So yeah, definitely.

218
00:13:44,390 --> 00:13:47,650
What do we think abstraction is? For me, it's showing what's needed

219
00:13:47,720 --> 00:13:50,934
at the time and hiding what's not needed right now.

220
00:13:51,052 --> 00:13:54,374
So like you were saying about the routers, do we need to know the ins

221
00:13:54,412 --> 00:13:57,518
and outs of every single route when we're looking at how the server

222
00:13:57,554 --> 00:14:01,420
stands up? Not really. Do we even need to know

223
00:14:03,230 --> 00:14:06,746
how the controller is handling the input if we're looking at what the

224
00:14:06,768 --> 00:14:10,214
root is? Well, no, not really. And I think that's

225
00:14:10,262 --> 00:14:13,966
part of what plays into abstraction. It's thinking about what

226
00:14:13,988 --> 00:14:17,342
do we need to make that clear

227
00:14:17,476 --> 00:14:20,814
at that time? So if I'm in a file, do I need to

228
00:14:20,852 --> 00:14:23,934
know about the thing that we've got there? If not, let's put it

229
00:14:23,972 --> 00:14:27,522
somewhere else. Yeah, I think an important bit

230
00:14:27,576 --> 00:14:31,234
on that as well is if you do need to know, making it

231
00:14:31,272 --> 00:14:34,834
clear where to find that somewhere else. So making it clear with,

232
00:14:34,872 --> 00:14:38,670
if you've abstracted some logic away into a function, name that function,

233
00:14:38,760 --> 00:14:42,386
well, say in the name what it's doing, and then have your file

234
00:14:42,418 --> 00:14:45,586
structures organized so that you have some breadcrumbs,

235
00:14:45,618 --> 00:14:48,786
so that you've got a file path, so that that's in a logical folder.

236
00:14:48,818 --> 00:14:51,450
So if you do need to go under the hood and see what's there,

237
00:14:51,600 --> 00:14:55,354
it's not a panic, it's not a black box, it's away for

238
00:14:55,392 --> 00:14:58,922
now, but it's not out of reach if you need it. Yeah,

239
00:14:58,976 --> 00:15:02,090
absolutely. And that naming convention really helps.

240
00:15:04,030 --> 00:15:07,854
That's actually one of the hardest things in development is looking at how to name

241
00:15:07,892 --> 00:15:11,054
something. I mean, what do you do if you've got three things that are called

242
00:15:11,092 --> 00:15:14,674
user, do you call them user a, user b user C do you call

243
00:15:14,712 --> 00:15:17,854
them active user, suspended user, user,

244
00:15:17,902 --> 00:15:21,314
do you call them. And again, it comes back

245
00:15:21,352 --> 00:15:24,706
to that same thing, talk to

246
00:15:24,728 --> 00:15:28,694
people, because names don't actually matter.

247
00:15:28,732 --> 00:15:32,086
To the code. We could call it whatever we wanted to. We could

248
00:15:32,108 --> 00:15:35,574
call our users fish if we wanted. Yeah, you're not going to help it.

249
00:15:35,692 --> 00:15:39,174
Example, during class they go, why are we calling

250
00:15:39,212 --> 00:15:41,418
it that? I'm like, look, I'm going to call it potato and show you that

251
00:15:41,424 --> 00:15:43,210
the code still runs. Boom.

252
00:15:44,990 --> 00:15:48,566
So sort of tied into abstraction

253
00:15:48,598 --> 00:15:52,518
is the idea of encapsulation. So I

254
00:15:52,544 --> 00:15:56,094
come from an oop background. So encapsulation is a bit clearer in

255
00:15:56,132 --> 00:15:59,566
there where you'd have a class, you'd have some public

256
00:15:59,668 --> 00:16:03,066
methods that are visible to everybody and then you'd have some

257
00:16:03,108 --> 00:16:05,700
variables inside that that are hidden away.

258
00:16:06,230 --> 00:16:10,258
And that whole thing encapsulated together gives you this idea of

259
00:16:10,344 --> 00:16:14,642
exactly like it shows a pill that we can look at and

260
00:16:14,696 --> 00:16:18,130
we can see that all of those things make sense together.

261
00:16:18,280 --> 00:16:21,714
Now you come from a slightly different background of functional programming.

262
00:16:21,762 --> 00:16:25,302
What do you think that looks like for you? Yeah, I think that

263
00:16:25,436 --> 00:16:29,474
looks like a little bit like we were talking about before encapsulating

264
00:16:29,522 --> 00:16:32,826
things almost in terms of abstraction. So we were talking

265
00:16:32,848 --> 00:16:36,326
about before with the routes and the methods of the server.

266
00:16:36,358 --> 00:16:39,818
So with that methods file, for example, if you are talking

267
00:16:39,904 --> 00:16:43,574
to data, we often tell boot campers like

268
00:16:43,632 --> 00:16:46,702
that methods file, it does not know that it's in

269
00:16:46,756 --> 00:16:50,814
a router. It does not need to know that. However, it does need how

270
00:16:50,852 --> 00:16:53,854
it's connected to the database. It needs how it's going to get that data.

271
00:16:53,892 --> 00:16:57,314
Even though it's not in a class, even though it's a bunch of functions in

272
00:16:57,352 --> 00:17:01,758
a JavaScript file, they're not neatly wrapped in that little capsule like your illustration

273
00:17:01,854 --> 00:17:05,406
there. We still need to lay out what that file

274
00:17:05,438 --> 00:17:09,090
needs to see what needs to be in scope there. It needs to take

275
00:17:09,160 --> 00:17:12,710
in, it needs to import in how it gets what it needs.

276
00:17:12,780 --> 00:17:16,374
It needs to import in any sort of config, any sort of things

277
00:17:16,412 --> 00:17:19,754
it needs and then it needs to expose. So thinking about what

278
00:17:19,792 --> 00:17:22,854
it exposes as well, exposes those functions,

279
00:17:22,902 --> 00:17:26,346
exposes that functionality in a way that elsewhere it

280
00:17:26,368 --> 00:17:29,610
can be picked up. So thinking about what it needs to run

281
00:17:29,680 --> 00:17:32,922
and what it needs to expose to make that

282
00:17:32,976 --> 00:17:36,940
run. And also in terms of, I think we also emphasize there,

283
00:17:37,650 --> 00:17:41,118
swap. There's probably Chris, you will know a better word for this,

284
00:17:41,204 --> 00:17:44,670
but I'd like to think of it as like swap ability as plug and play.

285
00:17:44,820 --> 00:17:48,594
So in terms of that connection to the database, for example, if you go

286
00:17:48,632 --> 00:17:52,034
from last week, we had an issue where

287
00:17:52,072 --> 00:17:55,794
one of our database providers went down and we had to quickly shift to

288
00:17:55,832 --> 00:17:59,026
another one because all of our code was all encapsulated neatly

289
00:17:59,058 --> 00:18:02,434
in that file, except for that connection string to that database

290
00:18:02,482 --> 00:18:06,626
coming in. We could just unplug that connection string, plug in a separate

291
00:18:06,658 --> 00:18:10,262
one to that nice little capsule, and get up and running again

292
00:18:10,316 --> 00:18:14,060
very quickly. Yeah. And what you're actually talking there is

293
00:18:14,510 --> 00:18:17,706
what professionals would talk about, the solid principles which I know we

294
00:18:17,728 --> 00:18:21,314
introduce on the boot camp, and we talk about dependency inversion,

295
00:18:21,382 --> 00:18:25,246
so not being so reliant on something else that we

296
00:18:25,268 --> 00:18:28,798
can't swap it out. And we often take

297
00:18:28,964 --> 00:18:32,414
very complex principles and we teach it with boot campers in

298
00:18:32,452 --> 00:18:36,082
simple language. And often I find that when we've taken

299
00:18:36,136 --> 00:18:39,602
that and explained it to somebody, they can go, yeah, I can do that.

300
00:18:39,656 --> 00:18:43,540
But you tell them to do dependency inversion, they go, do what now?

301
00:18:44,390 --> 00:18:47,506
I mean, to be fair, that's exactly what I do as well. Every time I

302
00:18:47,528 --> 00:18:50,582
look at the words dependency inversion, I have to google what it is.

303
00:18:50,716 --> 00:18:54,374
Yeah, same. You can see just there. I just could not think

304
00:18:54,412 --> 00:18:57,960
of the proper word for it. But yeah,

305
00:18:58,890 --> 00:19:02,042
I like how you explained it to me a few minutes ago before we started

306
00:19:02,096 --> 00:19:04,986
rolling, putting stuff together that goes together,

307
00:19:05,088 --> 00:19:08,394
keeping things tied together in a sensible way. So really

308
00:19:08,432 --> 00:19:11,722
looking at your code and saying, does this make sense to be here?

309
00:19:11,776 --> 00:19:15,614
Kind of giving it that vibe check, as the youth say, each little bit,

310
00:19:15,652 --> 00:19:18,526
does this make sense to be in here? Or does this make more sense to

311
00:19:18,548 --> 00:19:21,918
be somewhere? I mean, I've just shared a

312
00:19:21,924 --> 00:19:25,922
few points that I've pulled out from oop. But change the word class

313
00:19:25,976 --> 00:19:28,994
to file functions and it still

314
00:19:29,032 --> 00:19:32,674
applies. So I've got all data should be in a single class that needs

315
00:19:32,712 --> 00:19:36,198
to be there. All methods should be in that place.

316
00:19:36,364 --> 00:19:40,338
All related things should be easily identifiable

317
00:19:40,514 --> 00:19:44,230
and all unrelated things should be easily distinguishable.

318
00:19:44,650 --> 00:19:48,406
No data should be accessible that's not needed. And no data should

319
00:19:48,428 --> 00:19:51,754
be inaccessible that is needed. So a

320
00:19:51,792 --> 00:19:55,546
common example that I've used with boot campus, when I'm talking about that idea of

321
00:19:55,568 --> 00:19:59,146
data being accessible or inaccessible. Imagine we've got a

322
00:19:59,168 --> 00:20:02,974
user and we've got a password attached to that user. Do we

323
00:20:03,012 --> 00:20:05,600
ever want to be passing that back to the front end?

324
00:20:06,370 --> 00:20:11,150
No. So that should be inaccessible.

325
00:20:11,650 --> 00:20:14,926
But do we need it on the back end? Sometimes we need to be

326
00:20:14,948 --> 00:20:18,354
able to read and write from it. So on the back end, yes,

327
00:20:18,392 --> 00:20:22,178
we want that to be accessible. And that's where the difference

328
00:20:22,264 --> 00:20:25,666
can come in, even with how we present the same item

329
00:20:25,778 --> 00:20:29,922
dependent on where we are in code. And often we'll

330
00:20:29,986 --> 00:20:33,894
think about that and sometimes we'll forget and of course,

331
00:20:34,092 --> 00:20:38,118
we make mistakes. We're human. But that's where having

332
00:20:38,204 --> 00:20:41,482
the concept of code review and pull requests comes

333
00:20:41,536 --> 00:20:45,386
in. I have no problem with somebody looking at my code and

334
00:20:45,408 --> 00:20:48,586
going, actually, there's this wrong over here. Or we could

335
00:20:48,608 --> 00:20:52,198
do this another way. I mean, I've been developing on and off for 22

336
00:20:52,224 --> 00:20:55,534
years, and I'm still learning, and I still have

337
00:20:55,572 --> 00:20:58,862
those days where I think I'm not capable of doing this.

338
00:20:58,996 --> 00:21:02,266
And I'll let you know when that whole concept

339
00:21:02,298 --> 00:21:05,418
goes away. But 22 years and counting so far.

340
00:21:05,604 --> 00:21:09,314
Yeah, we're still waiting on that. Oh, my goodness. Same. Absolutely. And then

341
00:21:09,432 --> 00:21:13,106
even code reviews are really cool to do

342
00:21:13,128 --> 00:21:16,946
that, to get that second opinion. But going back to pairing as well, it might

343
00:21:16,968 --> 00:21:20,278
be really intimidating, like you're saying, to think, okay, have I

344
00:21:20,284 --> 00:21:21,800
gotten this exactly right?

345
00:21:23,130 --> 00:21:26,678
Am I doing the right things? Am I exposing any sorts of risk but having

346
00:21:26,764 --> 00:21:30,074
someone sitting beside you to bounce things off of, to just do

347
00:21:30,112 --> 00:21:33,946
this in a conversation, getting that different perspective, you don't have

348
00:21:33,968 --> 00:21:37,366
to go alone. This doesn't have to be solo

349
00:21:37,398 --> 00:21:40,602
mission. And that kind of ties into the whole collaborative

350
00:21:40,666 --> 00:21:44,586
thing. That code isn't a solo sport anymore,

351
00:21:44,698 --> 00:21:48,270
and it's something that we work together on

352
00:21:48,340 --> 00:21:52,222
to get the best end result. And you put two minds with different

353
00:21:52,276 --> 00:21:55,906
opinions, and you're going to end up with a brilliant result so long as those

354
00:21:55,928 --> 00:22:00,290
people are able to converse and not fall out over simple

355
00:22:00,360 --> 00:22:03,858
things. Absolutely. So let's have a look at a

356
00:22:03,864 --> 00:22:07,238
question that I guess kind of ties into everything we've just covered, which is,

357
00:22:07,324 --> 00:22:09,990
is your code tested enough to be confident?

358
00:22:11,770 --> 00:22:15,606
So on the screen, we've got unit best forming the base of

359
00:22:15,628 --> 00:22:19,654
a pyramid, integration tests on top, end to end

360
00:22:19,692 --> 00:22:23,430
tests sitting on top of that, and then manual tests, almost like an afterthought.

361
00:22:23,590 --> 00:22:27,226
So does that mean manual tests are a bad thing? Does that mean that we

362
00:22:27,248 --> 00:22:30,620
need all of it? Where do you think testing fits in?

363
00:22:31,070 --> 00:22:34,682
Yeah, that is an interesting question. I think another

364
00:22:34,736 --> 00:22:38,318
thing that might make xbootcamp precise twitch here is the word trade off.

365
00:22:38,404 --> 00:22:41,886
So everything we always emphasize everything is a trade off. And this

366
00:22:41,908 --> 00:22:45,546
includes testing. It's so easy when you first start learning testing

367
00:22:45,658 --> 00:22:49,154
to have so many people going. Testing is super important. Is it really important?

368
00:22:49,192 --> 00:22:52,994
You got to spend, like, 200% of your time testing for

369
00:22:53,032 --> 00:22:56,130
every second you code tests for 5 seconds.

370
00:22:56,790 --> 00:23:00,722
It's important to put it in that context, that wider context,

371
00:23:00,786 --> 00:23:04,086
though, of what do you need to test? And I really like what you put

372
00:23:04,108 --> 00:23:08,194
on that slide there. Chris, is your code tested enough to be confident.

373
00:23:08,322 --> 00:23:11,434
Are you confident that the user is getting what they need?

374
00:23:11,472 --> 00:23:15,318
Are you confident that other people can work on different parts

375
00:23:15,334 --> 00:23:18,570
of your code without what you've worked on falling over?

376
00:23:18,640 --> 00:23:22,026
So if I add something to your code, I can run the

377
00:23:22,048 --> 00:23:25,306
test that you've written and go, okay, I've added this new feature, but I haven't

378
00:23:25,338 --> 00:23:28,894
broken Chris's work. He's not going to come knocking on my door saying,

379
00:23:28,932 --> 00:23:33,262
you broke my code from two days ago. And just to also

380
00:23:33,316 --> 00:23:36,514
sum this up, Kent C. Dodds, who I'm sure that

381
00:23:36,552 --> 00:23:40,146
lots of people will be familiar with, has a good quote. The more

382
00:23:40,168 --> 00:23:43,490
your best resemble the way your software is used,

383
00:23:43,640 --> 00:23:47,546
the more confidence they can give you. So I think really keeping

384
00:23:47,598 --> 00:23:51,382
that user at the center, whether the user is the person using

385
00:23:51,436 --> 00:23:55,074
the software out in the real world or the fellow developer

386
00:23:55,122 --> 00:23:58,738
who's adding to it and wanting to replicate, make sure you haven't

387
00:23:58,754 --> 00:24:02,586
broken it. I think keeping that user as the focus and

388
00:24:02,608 --> 00:24:05,994
that confidence will set you right, not have you bogged down

389
00:24:06,032 --> 00:24:09,546
into the weeds. Absolutely. And Brennan Keller has

390
00:24:09,568 --> 00:24:13,418
another great quote from Twitter. He says, a QA engineer walks

391
00:24:13,434 --> 00:24:16,730
into a bar, orders a beer, orders zero beers,

392
00:24:16,810 --> 00:24:20,170
orders 999,000,000 been, orders a lizard,

393
00:24:20,250 --> 00:24:23,326
orders minus one beers, orders a random set

394
00:24:23,348 --> 00:24:26,974
of letters. The first real customer walks in and asks where the bathroom

395
00:24:27,022 --> 00:24:30,658
is. The bar bursts into flames, killing everyone. Now, that,

396
00:24:30,744 --> 00:24:34,126
to me, shows that we could write tests

397
00:24:34,158 --> 00:24:37,590
that cover absolutely every edge case for our function.

398
00:24:37,740 --> 00:24:40,710
And we can go, yes, we can handle been.

399
00:24:41,130 --> 00:24:44,374
But we forgot about the bathroom, which is kind

400
00:24:44,412 --> 00:24:47,686
of important. Yeah. I was writing a

401
00:24:47,708 --> 00:24:51,750
word counter for fun on a personal project, and I counted if there's one space,

402
00:24:51,820 --> 00:24:55,318
if there are two spaces, if there are three periods in a row without spaces,

403
00:24:55,414 --> 00:24:58,826
if there's a new line. I forgot about the fact that

404
00:24:58,848 --> 00:25:02,038
you could have more than one new line. It would put that as a break.

405
00:25:02,064 --> 00:25:05,934
Tag in the HTML and then squidge two words together when that HTML was

406
00:25:05,972 --> 00:25:08,334
stripped. The same thing.

407
00:25:08,532 --> 00:25:12,090
Yeah, it's those simple little things that we often forget

408
00:25:12,170 --> 00:25:15,578
of when we're looking at code. If we're doing it, whether we're

409
00:25:15,594 --> 00:25:18,866
doing it for fun or professionally, really, we can forget some

410
00:25:18,888 --> 00:25:22,706
of those edge cases. And again, that's the concept of talk to people,

411
00:25:22,808 --> 00:25:26,514
show it to your user. I'll often take code I've written and

412
00:25:26,632 --> 00:25:30,406
give it to the user early, as early as I can. I'll put it in

413
00:25:30,428 --> 00:25:33,878
front of a user and I'll go, this isn't yet complete,

414
00:25:33,964 --> 00:25:37,720
but can you tell me whether this bit works? Like you expect it to.

415
00:25:39,370 --> 00:25:42,682
Yeah. And if I've has the answer of yes to that on ten

416
00:25:42,736 --> 00:25:46,262
different things, then when I give it to them at the end for UAt

417
00:25:46,406 --> 00:25:48,550
or user acceptance testing,

418
00:25:48,710 --> 00:25:52,122
then usually that's a lot shorter because they've already

419
00:25:52,176 --> 00:25:55,086
seen it and they can go, yeah, that bit works. And it's just running through

420
00:25:55,108 --> 00:25:58,558
it again to check nothing's changed when we've put all those little bits together.

421
00:25:58,724 --> 00:26:02,686
Yeah, I think with cognitive diversity as well, because we

422
00:26:02,708 --> 00:26:06,426
each come from our own perspective, we know how we would use the software.

423
00:26:06,538 --> 00:26:09,778
But the amount of times that I've been surprised when I hand it to somebody

424
00:26:09,864 --> 00:26:13,186
and like in your example here, they do something completely different, I'm like,

425
00:26:13,208 --> 00:26:16,446
okay, you need to click these button, that button, that button. I have my lovely

426
00:26:16,478 --> 00:26:19,858
journey. I've got it in a flowchart, got it in my wireframes.

427
00:26:19,954 --> 00:26:23,046
They just skip three stages and wonder why it doesn't work.

428
00:26:23,148 --> 00:26:26,886
No, you're not supposed to do that, but you can't say that to

429
00:26:26,908 --> 00:26:30,454
all your users. You need to see them do those deviating

430
00:26:30,502 --> 00:26:33,850
paths to figure out what you couldn't have expected.

431
00:26:34,350 --> 00:26:38,426
There's that brilliant meme, and I wish I'd got it to hand of the

432
00:26:38,448 --> 00:26:42,006
cat feeder. Three feeders. And user

433
00:26:42,038 --> 00:26:45,326
experience is easy. You put one cat in front of each one.

434
00:26:45,508 --> 00:26:49,406
But cats are like users, and they come up with the most complicated way of

435
00:26:49,428 --> 00:26:52,834
doing it ever. And they're crossing over, they're underneath each other, they're over the top

436
00:26:52,872 --> 00:26:56,622
of each other. Sounds like most users.

437
00:26:56,766 --> 00:26:59,940
Fair enough, fair enough. Users, cats, we love them both.

438
00:27:02,150 --> 00:27:05,506
So the next question. I've got a picture of a book

439
00:27:05,528 --> 00:27:08,966
on there. Excuses for not writing documentation. I've read that book and

440
00:27:08,988 --> 00:27:12,626
I've used them all. Is your code documented

441
00:27:12,658 --> 00:27:16,722
enough to be helpful? So what do you think documentation

442
00:27:16,786 --> 00:27:20,298
should look like? Oh, that is the age old question,

443
00:27:20,384 --> 00:27:24,154
because I know there are so many different views. Talk to people who

444
00:27:24,272 --> 00:27:28,102
think that good code should fully self document it. That's a nice buzzword.

445
00:27:28,166 --> 00:27:31,462
Self documenting code with your naming conventions,

446
00:27:31,526 --> 00:27:35,262
with all of that clean code aesthetics. Then I've talked to people who think,

447
00:27:35,316 --> 00:27:39,482
comment everything, make sure that everything is absolutely. Got a comment

448
00:27:39,546 --> 00:27:43,050
saying what it does, what it ate for breakfast that morning, all of

449
00:27:43,060 --> 00:27:46,434
that good stuff. But I think that the

450
00:27:46,552 --> 00:27:50,030
sweet spot differs for each tool. It differs

451
00:27:50,190 --> 00:27:53,794
for the intended audience of that tool or that

452
00:27:53,832 --> 00:27:57,350
piece of software that you're writing. And I think that there's been

453
00:27:57,420 --> 00:28:01,538
a good industry shift that I've noticed toward more friendly documentation.

454
00:28:01,634 --> 00:28:05,142
So sometimes you get to documentation. It's full of really

455
00:28:05,196 --> 00:28:08,658
technical terms, it's really impenetrable.

456
00:28:08,754 --> 00:28:12,486
And you think, okay, I'm not in the cool kid treehouse, I don't

457
00:28:12,518 --> 00:28:16,662
belong here. I don't know enough to even start reading this documentation.

458
00:28:16,726 --> 00:28:20,178
Whereas things like the new react docs that I think are still in beta,

459
00:28:20,214 --> 00:28:24,110
they might have released them yet, but that is a really good example

460
00:28:24,180 --> 00:28:27,502
of how plain language can really

461
00:28:27,556 --> 00:28:31,486
help documentation be usable for people across the

462
00:28:31,508 --> 00:28:34,718
spectrum, from juniors up to seniors. In addition,

463
00:28:34,894 --> 00:28:38,898
one of the other points of documentation I really like to emphasize is

464
00:28:39,064 --> 00:28:42,562
it's important for future you, not just other people.

465
00:28:42,696 --> 00:28:46,066
Because if you're writing some software today, I guarantee you,

466
00:28:46,088 --> 00:28:50,646
because I've done it a million times before, you will forget what

467
00:28:50,668 --> 00:28:54,454
the intricacies were that you were really close to like six months down the line.

468
00:28:54,572 --> 00:28:58,086
So in terms of being helpful, what's going to help you in

469
00:28:58,108 --> 00:29:00,646
the future? Use it? What is it for?

470
00:29:00,828 --> 00:29:04,186
What do you need to run it? How do you run it? What does

471
00:29:04,208 --> 00:29:07,910
it do? Where could it go wrong? Those tent posts,

472
00:29:07,990 --> 00:29:10,634
what are you going to need to use this in the future? What are other

473
00:29:10,672 --> 00:29:14,286
people going to need? Yeah, I've just switched to the next

474
00:29:14,308 --> 00:29:17,662
slide because you've actually spoken exactly about that balance between

475
00:29:17,716 --> 00:29:20,974
documentation, which is brilliant. So for me,

476
00:29:21,172 --> 00:29:24,094
the way that I look at it, and you're absolutely right, there's a million different

477
00:29:24,132 --> 00:29:27,858
trains of thought on what documentation looks like. But the way I work through it,

478
00:29:27,944 --> 00:29:32,050
I've gone through documentation where I've done a comment on everything that explains exactly

479
00:29:32,120 --> 00:29:35,406
what that line is doing. One plus one. This adds

480
00:29:35,438 --> 00:29:38,722
one and one together. I can guess

481
00:29:38,776 --> 00:29:42,374
that from the fact that it says one plus one. But I've also gone

482
00:29:42,412 --> 00:29:45,846
through times where I've not written a single thing and then a week later tried

483
00:29:45,868 --> 00:29:48,520
to stand up the same software and gone, how do I do that?

484
00:29:49,850 --> 00:29:53,642
So for me, documentation tells you how to get set up

485
00:29:53,776 --> 00:29:57,114
and what the code does, but it doesn't need to tell you

486
00:29:57,152 --> 00:30:01,054
line by line what each specific thing is doing, especially if

487
00:30:01,092 --> 00:30:04,574
it's self explanatory. Now, sometimes you

488
00:30:04,612 --> 00:30:08,110
do need to put in some comments in your code

489
00:30:08,180 --> 00:30:11,550
to help understand why you've done certain things.

490
00:30:11,700 --> 00:30:15,314
So a while back I had a function where a

491
00:30:15,352 --> 00:30:18,706
number was changed from an integer to a string and then

492
00:30:18,728 --> 00:30:22,482
to a float. Now that seems

493
00:30:22,536 --> 00:30:25,910
like a really stupid thing to do, and it probably was,

494
00:30:26,060 --> 00:30:29,846
but the context was that the calculation needed it as

495
00:30:29,868 --> 00:30:33,714
an integer, the front end needed it as a string,

496
00:30:33,842 --> 00:30:36,470
and the database needed it as a float.

497
00:30:37,610 --> 00:30:41,210
So I explained at the top why that was happening.

498
00:30:41,360 --> 00:30:44,598
People could see what was happening because we had functions convert

499
00:30:44,614 --> 00:30:47,130
to string, convert to integer, convert to float.

500
00:30:48,830 --> 00:30:52,838
But explaining why we'd taken that route means that somebody else doesn't

501
00:30:52,854 --> 00:30:55,934
have to scratch their head for ten minutes trying to work it out. Yeah,

502
00:30:55,972 --> 00:30:59,902
if you've already done all that work to figure that out, don't make other people

503
00:30:59,956 --> 00:31:03,354
do that work as well. Leave that logic,

504
00:31:03,402 --> 00:31:06,866
leave the result of that work. You didn't. There's a method to

505
00:31:06,888 --> 00:31:10,514
my madness, folks, and this is it. Make people's life.

506
00:31:10,712 --> 00:31:14,926
Definitely, I think as well. We were talking earlier about semantic

507
00:31:14,958 --> 00:31:19,030
naming and the importance of things like that, so I think those really

508
00:31:19,100 --> 00:31:22,706
help tip the balance a little bit more toward not needing

509
00:31:22,738 --> 00:31:26,166
to document with comments what is self explanatory. And something that

510
00:31:26,188 --> 00:31:29,638
I find as we're teaching how to do this well,

511
00:31:29,804 --> 00:31:33,594
good functions, especially in functional programming. I'm coming from that my

512
00:31:33,632 --> 00:31:37,610
javascript has on, rather than your Php hat. I like function

513
00:31:37,680 --> 00:31:41,286
names that should say what they do in verb tense and present tense, like greet,

514
00:31:41,318 --> 00:31:44,686
like calculate, like add, things like that, which is pretty

515
00:31:44,788 --> 00:31:48,938
basic stuff, but it makes a huge difference. And then one of the bugbears

516
00:31:49,034 --> 00:31:51,934
is that people have a beautiful function name,

517
00:31:52,052 --> 00:31:55,214
and then they call what they're taking in x, they call that

518
00:31:55,252 --> 00:31:58,626
parameter x, and it's just like you've nearly gotten to

519
00:31:58,648 --> 00:32:01,922
the edge and then you've just not crossed the finish line. So for example,

520
00:32:01,976 --> 00:32:05,682
with our calculator, we could say add and

521
00:32:05,736 --> 00:32:09,478
take in X and Y. Add is beautiful documents. What it

522
00:32:09,484 --> 00:32:13,126
says on the tin X and Y, though vague, especially if

523
00:32:13,148 --> 00:32:16,710
you're doing something more complicated. So you could say first number, second number,

524
00:32:16,780 --> 00:32:20,074
something like that, number one, number two.

525
00:32:20,272 --> 00:32:24,474
There's multiple ways of calling the same thing, but making it

526
00:32:24,512 --> 00:32:27,980
clear, I try to think about code like it's telling a story.

527
00:32:28,670 --> 00:32:32,118
So if you're telling a story with your code, you're not going

528
00:32:32,144 --> 00:32:36,334
to read a story that says Bob went to f and on the way

529
00:32:36,372 --> 00:32:40,270
he took x and y. When he got there, he gave z

530
00:32:40,340 --> 00:32:44,194
to Bob. Oh God. Or you could

531
00:32:44,232 --> 00:32:47,886
go something like, bob took a journey

532
00:32:47,998 --> 00:32:51,742
on the way he went through the calculator, and in the calculator

533
00:32:51,806 --> 00:32:55,278
he chose to use add, and he added number one and

534
00:32:55,304 --> 00:32:58,806
number two together. At the end he took out the answer and

535
00:32:58,828 --> 00:33:02,902
he gave that to the next person. Yeah, he returned some

536
00:33:03,036 --> 00:33:06,150
and he gives away. Yeah, absolutely.

537
00:33:06,300 --> 00:33:09,318
That goes in. Testing has, well, because one of the

538
00:33:09,324 --> 00:33:13,434
benefits of testing is that it gives you a leg up on documentation and

539
00:33:13,472 --> 00:33:16,538
using conventions like calling things actual,

540
00:33:16,624 --> 00:33:20,202
calling things expected, using the three a's. So that's a range act

541
00:33:20,256 --> 00:33:24,382
assert. I mean, I'm giving examples, what I'm familiar with, but other

542
00:33:24,436 --> 00:33:27,934
conventions are available. But having things like

543
00:33:27,972 --> 00:33:31,354
that can be as intimidating, as obtuse as testing.

544
00:33:31,402 --> 00:33:35,634
Read like a sentence. So expect add

545
00:33:35,832 --> 00:33:39,634
two plus two to be what it actually is.

546
00:33:39,672 --> 00:33:42,786
So expect the actual to be the expected to

547
00:33:42,808 --> 00:33:46,430
be. It reads like a sentence. Things like that are really

548
00:33:46,520 --> 00:33:48,600
powerful, those conventions as well.

549
00:33:49,530 --> 00:33:53,046
So we're heading towards our last question, and this kind

550
00:33:53,068 --> 00:33:56,930
of ties into what we've just been talking about, that whole idea of storytelling.

551
00:33:57,090 --> 00:34:00,374
Is your code clear enough that a non developer can

552
00:34:00,412 --> 00:34:04,078
understand? Now, why would we say non

553
00:34:04,114 --> 00:34:07,898
developer? Because developers are not

554
00:34:07,984 --> 00:34:11,566
in silos anymore. Like you were saying, chris, the days of

555
00:34:11,588 --> 00:34:14,634
the hoodie, all the way up the dark corners,

556
00:34:14,682 --> 00:34:18,606
big headphones, can of energy, drink, the don't bother me face.

557
00:34:18,788 --> 00:34:22,414
Unfortunately for some, those are over now.

558
00:34:22,532 --> 00:34:26,386
People are involved, other people in the business, other people in

559
00:34:26,408 --> 00:34:30,254
your team. We've got tech adjacent roles. Some of our boot campers

560
00:34:30,302 --> 00:34:34,194
go, they get a foundation in coding from our course,

561
00:34:34,312 --> 00:34:38,034
but they don't always go into developer role. So you've got product owners,

562
00:34:38,082 --> 00:34:41,222
you've got business analysts, you've got people around you,

563
00:34:41,276 --> 00:34:44,454
designers. People need to look at your

564
00:34:44,492 --> 00:34:48,166
code and get that understanding of what it does. Not how it

565
00:34:48,188 --> 00:34:52,006
does, but what it does on that level that they can do their jobs.

566
00:34:52,038 --> 00:34:54,620
They can be part of that ecosystem as well.

567
00:34:55,070 --> 00:34:58,726
Yeah, and boot campers get fed up of hearing me say, if a non

568
00:34:58,758 --> 00:35:01,440
developer can understand what is happening,

569
00:35:01,890 --> 00:35:05,786
even if they don't understand how it's happening, then we've achieved

570
00:35:05,818 --> 00:35:08,400
what we want to achieve. Absolutely.

571
00:35:09,090 --> 00:35:12,766
Putting that user at the center, and if it's clear enough for

572
00:35:12,788 --> 00:35:16,334
that non developer, it will make the lives of your fellow

573
00:35:16,382 --> 00:35:20,258
developers so much easier. We want people to have easy,

574
00:35:20,424 --> 00:35:24,370
blissful lives. Code is hard enough, so let's not make things

575
00:35:24,440 --> 00:35:27,682
harder on ourselves and our fellow developers.

576
00:35:27,826 --> 00:35:31,574
Absolutely. And I've been in code

577
00:35:31,612 --> 00:35:35,346
bases where it's definitely not that, and I've been in code bases

578
00:35:35,378 --> 00:35:39,366
where it definitely is. And I know which I prefer working in. You're here.

579
00:35:39,548 --> 00:35:42,810
So you kind of alluded to this earlier on, but we

580
00:35:42,880 --> 00:35:45,580
sort of finish with that bus factor idea.

581
00:35:46,110 --> 00:35:49,914
If you were hit by a bus tomorrow, could anybody else pick

582
00:35:49,952 --> 00:35:53,818
up your work? If the answer is no, perhaps it's

583
00:35:53,834 --> 00:35:56,986
time to revisit some of your code, some of your processes,

584
00:35:57,098 --> 00:36:01,070
to refine that a little bit further, to make it possible

585
00:36:01,140 --> 00:36:04,498
for somebody to take over. Now, do we ever get to the

586
00:36:04,504 --> 00:36:08,254
point where we're completely indispensable and it's

587
00:36:08,302 --> 00:36:10,100
just a number? No,

588
00:36:11,270 --> 00:36:14,722
but that's the ideal to aim for. If I can take

589
00:36:14,776 --> 00:36:18,120
myself out of the scenario and the system can carry on,

590
00:36:18,490 --> 00:36:21,670
whether that's a code system, a business system,

591
00:36:21,740 --> 00:36:25,574
a teaching system, if that can carry on with me

592
00:36:25,612 --> 00:36:29,654
out of the scenario, then actually we've got to the panacea

593
00:36:29,702 --> 00:36:32,780
of code that can be run by anybody.

594
00:36:33,310 --> 00:36:37,770
Absolutely, yeah. It's taking away that

595
00:36:37,840 --> 00:36:41,374
precipice where you start to stress and you start to worry again.

596
00:36:41,412 --> 00:36:44,766
It's taking away that stress. Making things

597
00:36:44,868 --> 00:36:48,986
easier for the users, making things easier for your fellow developers,

598
00:36:49,098 --> 00:36:52,734
people you're working with. It's good for the ego to

599
00:36:52,772 --> 00:36:56,158
have everything depend on you. And we do a lot of work on the

600
00:36:56,164 --> 00:36:59,202
boot camp in terms of taking your ego out of code.

601
00:36:59,256 --> 00:37:03,106
You can be amazing and a great coder and be respected by

602
00:37:03,128 --> 00:37:06,866
your colleagues without having to be the source of knowledge, without having to be

603
00:37:06,888 --> 00:37:10,934
that guru in that tower. Oh, Bob is the only one who knows how

604
00:37:10,972 --> 00:37:14,120
this works. We must bow down to Bob. No,

605
00:37:14,650 --> 00:37:18,214
that has gone out of the window with that hooded coder in the corner

606
00:37:18,262 --> 00:37:21,594
on their own. We need code that. Like you were saying,

607
00:37:21,632 --> 00:37:26,380
chris, anybody can run, anybody can add to, anybody can

608
00:37:26,910 --> 00:37:30,006
maintaining as well, for sure.

609
00:37:30,128 --> 00:37:34,240
Absolutely. So, anything you want to close with this?

610
00:37:36,450 --> 00:37:40,446
I don't think so at the moment. I think we covered a lot of my

611
00:37:40,548 --> 00:37:44,302
bugbears and a lot of what keeps me sane

612
00:37:44,366 --> 00:37:47,906
in coding. So I appreciate the opportunity to chat with

613
00:37:47,928 --> 00:37:51,570
you, but just in terms of, why does clean,

614
00:37:51,720 --> 00:37:55,138
collaborative coding matter? And I've forgotten your

615
00:37:55,144 --> 00:37:58,790
other c. Chris, I'm so sorry. Concise. Concise. There we go.

616
00:37:58,860 --> 00:38:01,894
I'm not good at being concise, as you might have been able to see.

617
00:38:02,092 --> 00:38:04,998
I think it matters because, like I said before,

618
00:38:05,164 --> 00:38:09,174
coding is hard. Doing these logical coping

619
00:38:09,222 --> 00:38:12,506
with all of these factors, all of this logic in our

620
00:38:12,528 --> 00:38:16,026
brains is hard. So let's do all

621
00:38:16,048 --> 00:38:19,994
we can to make it more easy, more pleasant for

622
00:38:20,032 --> 00:38:23,806
ourselves, for our users, for other people in the business. Let's make life a

623
00:38:23,828 --> 00:38:27,694
little nicer. Let's have that rule of leaving the code better

624
00:38:27,812 --> 00:38:31,758
than when you found it. Let's make things easier on ourselves with clean,

625
00:38:31,924 --> 00:38:35,410
collaborative and concise code. What about you, Chris?

626
00:38:36,230 --> 00:38:39,474
I think you've just summed it up perfectly. It's that

627
00:38:39,512 --> 00:38:43,118
boy scout idea, isn't it, of leave the camp cleaner

628
00:38:43,134 --> 00:38:46,338
than when you're here. You're here.

629
00:38:46,424 --> 00:38:49,814
Absolutely. Wonderful. Well, thank you very

630
00:38:49,852 --> 00:38:52,966
much for joining me. Liz, and I'm sure that there will

631
00:38:52,988 --> 00:38:55,858
be questions for us. We are both on Twitter.

632
00:38:55,954 --> 00:38:58,902
You can find me at CC Miller 2018. And,

633
00:38:58,956 --> 00:39:02,630
Liz, yes, you can find me at. At codingbumblebee,

634
00:39:02,970 --> 00:39:06,134
which is a brilliant Twitter handle. Thank you so much.

635
00:39:06,172 --> 00:39:08,566
And if you want to know more about the school of code as well,

636
00:39:08,668 --> 00:39:10,280
please do head to school of.

637
00:39:12,210 --> 00:39:15,934
Excellent. Thanks very much, Liz. Thank you so much. It's been

638
00:39:15,972 --> 00:39:16,700
great. Thank you.

