1
00:00:25,570 --> 00:00:28,934
Hi everyone, myself Nisaraksha and today I'll be talking

2
00:00:28,972 --> 00:00:32,790
about Python memory and rabbit collection and so

3
00:00:32,860 --> 00:00:36,738
how it works and all. Myself Nisaksha and I am an undergraduate

4
00:00:36,834 --> 00:00:40,466
can student and right now I'm interning at fountain

5
00:00:40,498 --> 00:00:43,910
and startup. You guys can connect with me on the following social media

6
00:00:43,980 --> 00:00:47,298
links. And yeah, if you have any feedback

7
00:00:47,394 --> 00:00:50,734
for me on this presentation then also feel free to give

8
00:00:50,772 --> 00:00:54,478
me and if you have any doubt or if you want to discuss

9
00:00:54,564 --> 00:00:57,742
any topic then also, yeah, I'm open to that.

10
00:00:57,876 --> 00:01:01,726
Now let's have a look at what will be the main points covered in

11
00:01:01,748 --> 00:01:05,262
this talk. What will be the giveaway of this talk?

12
00:01:05,316 --> 00:01:09,166
So first of all, I'll start with the Python objects. Then we'll shift

13
00:01:09,198 --> 00:01:13,234
to the memory storage, that how memory is being stored and all. And after

14
00:01:13,272 --> 00:01:16,934
that we'll have a look at a couple of garbage collection algorithms, what it

15
00:01:16,972 --> 00:01:21,510
does, how they works and all that. After this presentation

16
00:01:22,330 --> 00:01:26,594
you'll have a thorough understanding how the memory deallocation

17
00:01:26,642 --> 00:01:29,858
and deallocation works. And so you might

18
00:01:29,884 --> 00:01:34,134
be able to write some efficient Python code because now you know how the objects

19
00:01:34,182 --> 00:01:38,406
are getting deallocation. So you might consider that thing while designing

20
00:01:38,438 --> 00:01:42,234
your application. Also, as a Python developer, you might have only heard of

21
00:01:42,272 --> 00:01:45,886
objects. So yeah, in Python everything is object only.

22
00:01:45,988 --> 00:01:50,058
Now let's say here I have assigned nine to a variable,

23
00:01:50,154 --> 00:01:52,814
and after that if I do id of variable, then I'll get an id,

24
00:01:52,852 --> 00:01:55,406
and if I do type of variable, then I'll get a type which is like

25
00:01:55,428 --> 00:01:58,402
class of int. So yeah, as soon as I assign this nine,

26
00:01:58,456 --> 00:02:01,922
then Python. So object will be created which will have

27
00:02:01,976 --> 00:02:05,234
unique id, its type value, and a reference count.

28
00:02:05,352 --> 00:02:08,966
So like as soon as any assignment is done, an object will

29
00:02:08,988 --> 00:02:13,238
be created which will have all these properties. Now, how the

30
00:02:13,324 --> 00:02:16,898
memory storage actually works in Python, the objects

31
00:02:16,914 --> 00:02:20,682
and the instance. So the objects and the instance variables are actually

32
00:02:20,736 --> 00:02:24,166
created in a heap memory. So as soon as the functions

33
00:02:24,198 --> 00:02:27,818
are written, so at that point there

34
00:02:27,824 --> 00:02:32,358
is no need of that function or variable so

35
00:02:32,384 --> 00:02:36,250
that objects will be collected by a garbage Collector. Now what's

36
00:02:36,330 --> 00:02:39,994
garbage collection? We'll see that in upcoming slides.

37
00:02:40,122 --> 00:02:43,826
And the methods and the variables, like the local variables and

38
00:02:43,848 --> 00:02:47,374
the methods are created in the stack memory. So a stack frame

39
00:02:47,422 --> 00:02:50,734
is created. Then as soon as the method returns,

40
00:02:50,862 --> 00:02:54,462
those frames get destroyed. In Python,

41
00:02:54,526 --> 00:02:57,862
you can have an object into an object, right? So a list into

42
00:02:57,916 --> 00:03:01,302
list or a dictionary into dictionary, or a list into dictionary, dictionary into list,

43
00:03:01,356 --> 00:03:04,802
any kind of thing, right? Because of this Python's dynamic

44
00:03:04,866 --> 00:03:08,930
nature, we need to have smart memory allocation

45
00:03:09,010 --> 00:03:12,266
scheme and also the speedy memory allocation speed. Now,

46
00:03:12,288 --> 00:03:15,626
to speed up all these operations, Python has a manager which

47
00:03:15,648 --> 00:03:19,702
is called Pymeloc, and it actually sits on the top of the

48
00:03:19,856 --> 00:03:22,990
general memory allocator. So the main

49
00:03:23,060 --> 00:03:26,426
work of Pymeloc is to allocate the memory

50
00:03:26,458 --> 00:03:30,494
and speed up the memory operations. Now let's say

51
00:03:30,612 --> 00:03:34,466
in any Python application you might have hundreds of

52
00:03:34,488 --> 00:03:37,534
objects and a couple of long running Python processes,

53
00:03:37,582 --> 00:03:41,442
right? So there might be need of huge

54
00:03:41,496 --> 00:03:45,074
memory. Now if you as a developer are

55
00:03:45,112 --> 00:03:48,806
handling the deallocation of memory, then it might be

56
00:03:48,828 --> 00:03:52,534
a case that by mistake you might deallocation some

57
00:03:52,572 --> 00:03:55,766
wrong object, some wrong variable which may

58
00:03:55,788 --> 00:03:59,478
be in use in further program. Then your program will be crashed

59
00:03:59,574 --> 00:04:03,082
and debugging will take a lot of time. So who

60
00:04:03,136 --> 00:04:06,826
does this garbage collection thing? So who actually

61
00:04:06,928 --> 00:04:10,918
deallocation the memory? So for that, the garbage collection

62
00:04:11,014 --> 00:04:14,974
has a bag. It collects the objects which are of no

63
00:04:15,012 --> 00:04:18,926
longer use and it de allocates them. It actually

64
00:04:19,028 --> 00:04:23,246
releases the memory whenever the object is of no longer use. So you

65
00:04:23,268 --> 00:04:26,962
can think this system as a kind of trash bin in our computer.

66
00:04:27,096 --> 00:04:30,286
So if you don't need any folder, then you'll just shift

67
00:04:30,318 --> 00:04:33,746
it into the trash and then it will be deleted. So it's a kind

68
00:04:33,768 --> 00:04:37,306
of a similar system. The garbage collection automatically

69
00:04:37,358 --> 00:04:41,154
tracks all the objects and it deallocation the memory automatically.

70
00:04:41,202 --> 00:04:44,646
So it's a huge relief for a programmer that the programmer does

71
00:04:44,668 --> 00:04:48,602
not need to deallocation the memory by himself. And the

72
00:04:48,656 --> 00:04:52,026
thing is, the garbage collection algorithms actually

73
00:04:52,128 --> 00:04:55,834
track these objects and it finds an optimal time at

74
00:04:55,872 --> 00:04:59,542
which to deallocation. There are these algorithms

75
00:04:59,606 --> 00:05:03,222
which does all this, and it is very useful for us also.

76
00:05:03,296 --> 00:05:06,574
So as a programmer, we don't need to do anything.

77
00:05:06,772 --> 00:05:10,426
Now let's look at the GC algorithms. So one is the reference

78
00:05:10,458 --> 00:05:14,314
counting algorithm, and the second is a generational GC reference counting algorithm

79
00:05:14,362 --> 00:05:17,954
is pretty much straightforward, it's easy and efficient also. And it

80
00:05:17,992 --> 00:05:22,190
works as like whenever there is no reference. So as the name suggests,

81
00:05:22,270 --> 00:05:26,082
reference fountain. Right? So whenever there is no reference of an object

82
00:05:26,216 --> 00:05:29,606
at that moment, it delocates the memory of that object.

83
00:05:29,788 --> 00:05:33,526
Now, to keep track of all the references, every object has

84
00:05:33,548 --> 00:05:37,174
an extra field called reference count, which we saw

85
00:05:37,212 --> 00:05:40,730
in the first slide that each python object, so each object

86
00:05:40,800 --> 00:05:44,090
has its id, its type and

87
00:05:44,240 --> 00:05:47,610
reference count and a couple of other fields, right? So actually

88
00:05:47,680 --> 00:05:51,034
that reference count is increased or decreased based on

89
00:05:51,072 --> 00:05:54,906
the allocation and all that. And the generational GC algorithm.

90
00:05:54,938 --> 00:05:58,974
So it is based on a trace based algorithm so it actually

91
00:05:59,172 --> 00:06:03,074
scans a list of objects and all that. So we'll look into much

92
00:06:03,112 --> 00:06:06,862
detail in the upcoming slides. But these two algorithms

93
00:06:06,926 --> 00:06:10,350
are there which work in different cases.

94
00:06:10,430 --> 00:06:13,774
And so actually generational DC

95
00:06:13,822 --> 00:06:16,974
algorithm detects the circular references,

96
00:06:17,102 --> 00:06:20,806
cycle of references, and it is used in that case.

97
00:06:20,908 --> 00:06:24,774
So let's have a look what all this means and let's understand it.

98
00:06:24,812 --> 00:06:28,914
So first of all, we'll see the reference count. Now here I have assigned 19

99
00:06:28,962 --> 00:06:31,994
to variable a. So if I do id of a, then I'll get the id

100
00:06:32,032 --> 00:06:35,030
of this object. So as soon as I do this assignment,

101
00:06:35,110 --> 00:06:38,506
like this object will be created, and of course the id will also be

102
00:06:38,528 --> 00:06:41,498
there. So this object will be created, which has its type,

103
00:06:41,584 --> 00:06:44,914
value and reference count. And all these properties

104
00:06:44,982 --> 00:06:48,638
are automatically detected by the python. So we don't need to give it here you

105
00:06:48,644 --> 00:06:52,160
can see the reference count is one, so we can say that

106
00:06:52,610 --> 00:06:56,574
a is referencing towards this object. So like this

107
00:06:56,612 --> 00:07:00,146
kind of thing. Now let's say if I introduce like new variable b, and if

108
00:07:00,168 --> 00:07:03,506
I do b equal to a or b equal to 19, then what will happen?

109
00:07:03,608 --> 00:07:07,666
If I do b equal to a, then you can see when

110
00:07:07,688 --> 00:07:10,934
I do id of b, then I'll get the same id, which means b is

111
00:07:10,972 --> 00:07:14,278
also referencing to the same id to the same object.

112
00:07:14,364 --> 00:07:17,718
And as soon as I do b equal to a, the reference count will be

113
00:07:17,804 --> 00:07:21,366
incremented by one. So now it will be two. Now as soon as I will

114
00:07:21,388 --> 00:07:25,158
do c equal to 19, at that moment also the reference count will be incremented

115
00:07:25,174 --> 00:07:28,314
by one, which means here reference count will be three and C

116
00:07:28,352 --> 00:07:32,010
will be also pointing towards this object. You can get all this count

117
00:07:32,080 --> 00:07:35,758
by sys get ref count. You just need to pass the object

118
00:07:35,844 --> 00:07:39,466
in that and you'll get the reference count. But here note

119
00:07:39,498 --> 00:07:42,734
one point that passing a variable into the function,

120
00:07:42,852 --> 00:07:46,114
it also increments the reference count by one because

121
00:07:46,232 --> 00:07:49,298
it creates a local copy of that, and that also

122
00:07:49,384 --> 00:07:53,074
is referred to the same object. So if I do sys get

123
00:07:53,112 --> 00:07:56,574
ref count of c, then I'll get the reference

124
00:07:56,622 --> 00:07:59,746
count as four, not three. Now let's have a look how

125
00:07:59,768 --> 00:08:03,138
the list works. So let's say I have one list, which is l one equal

126
00:08:03,154 --> 00:08:05,958
to one two three, then I'll do id. I got an id.

127
00:08:06,044 --> 00:08:08,694
If I do l two equal to l one, then I'll get the same id,

128
00:08:08,732 --> 00:08:12,562
right? But now let's say I copy the list, like copy using copy

129
00:08:12,626 --> 00:08:15,850
copy. If I copy the list one into l three, then you can see that

130
00:08:15,920 --> 00:08:18,986
the id of l three and id of l one are not same. It means

131
00:08:19,008 --> 00:08:22,346
the copy actually creates another object and it is referred to

132
00:08:22,368 --> 00:08:25,854
that object. Of course, if I do l one equal to one three, four,

133
00:08:25,972 --> 00:08:29,882
then the id of l one gets changed because now it is referencing

134
00:08:29,946 --> 00:08:33,626
to some other object. Now let's see what circular reference

135
00:08:33,738 --> 00:08:37,134
means because like generational dc algorithm detects it. So as the name

136
00:08:37,172 --> 00:08:40,418
suggests, some kind of a circular. So like here it's a circle. Here it's a

137
00:08:40,424 --> 00:08:44,594
circle, right? So circle reference means either an object is

138
00:08:44,712 --> 00:08:48,378
referencing towards itself or like two objects are differing

139
00:08:48,414 --> 00:08:51,222
towards. Here, let's say I have one list l one,

140
00:08:51,276 --> 00:08:54,502
or list one equal to this, and I am appending list one.

141
00:08:54,636 --> 00:08:58,806
Append list one. I am appending the object

142
00:08:58,908 --> 00:09:02,022
into the same object. Or else let's say I have two objects,

143
00:09:02,086 --> 00:09:05,914
object one and object two, and I am referencing object two into object

144
00:09:05,952 --> 00:09:09,450
one and then object one into object two. Now, in this

145
00:09:09,520 --> 00:09:13,242
kind of scenarios, if you look, then the reference

146
00:09:13,306 --> 00:09:16,270
count will always be greater than one.

147
00:09:16,420 --> 00:09:20,286
So the reference count won't be equal to zero at any moment.

148
00:09:20,468 --> 00:09:24,386
Because if I am referencing towards myself only

149
00:09:24,408 --> 00:09:27,970
then the reference never be equal to zero. So in this moment,

150
00:09:28,120 --> 00:09:30,962
the reference fountain algorithm won't work.

151
00:09:31,016 --> 00:09:34,922
And so the generational DC algorithm comes into picture.

152
00:09:35,006 --> 00:09:38,066
Now let's see how the reference counting garbage

153
00:09:38,098 --> 00:09:41,654
collection algorithm works and how it handles the

154
00:09:41,692 --> 00:09:45,906
reference counting algorithm. It actually always counts the reference

155
00:09:45,938 --> 00:09:49,186
number to the objects, right? And the reference counts

156
00:09:49,218 --> 00:09:53,046
are kept in the memory so that the programs are executed

157
00:09:53,078 --> 00:09:56,346
effectively. Now, first thing, we need to have a look at

158
00:09:56,368 --> 00:10:00,170
that, in which case the count will be increased, right? So one will be,

159
00:10:00,240 --> 00:10:04,014
if I pass an argument into the function, at that moment, the count

160
00:10:04,052 --> 00:10:07,294
will be incremented. If I append an object to an object,

161
00:10:07,412 --> 00:10:10,846
then also the reference count will be incremented. And if I

162
00:10:10,868 --> 00:10:14,762
do any assignment, operator, then also the count will be incremented.

163
00:10:14,906 --> 00:10:18,546
The reference counting algorithm scans the reference count. And if it

164
00:10:18,568 --> 00:10:22,526
finds any reference count equal to equal to zero, then it deallocation the memory

165
00:10:22,558 --> 00:10:25,986
for that object. Now, let's say I have one list, which is one,

166
00:10:26,008 --> 00:10:29,382
two, three, and if I'm appending that list into list two,

167
00:10:29,516 --> 00:10:32,566
if I have four, five, six, and I am appending that list one to list

168
00:10:32,588 --> 00:10:36,534
two, at this point the reference count will be one of l one.

169
00:10:36,652 --> 00:10:39,974
But now, as soon as I do l two equal to four, five, six,

170
00:10:40,012 --> 00:10:43,414
and I am append l one into the l two, at that moment, the reference

171
00:10:43,462 --> 00:10:46,650
count will be incremented by one, and now it will be two.

172
00:10:46,800 --> 00:10:50,974
And if I delete the l two. Then at that moment the reference count

173
00:10:51,012 --> 00:10:53,742
of l one will be decremented by one.

174
00:10:53,796 --> 00:10:57,214
Also. Now for global variables. So what

175
00:10:57,252 --> 00:11:00,734
about global variables? Right, so if the reference count

176
00:11:00,772 --> 00:11:04,302
of global variables becomes zero, then this

177
00:11:04,356 --> 00:11:07,826
algorithm will deallocation the memory, and after that we won't be

178
00:11:07,848 --> 00:11:11,362
able to use that global variable. But the main

179
00:11:11,496 --> 00:11:14,626
use of the global variable is that if that variable is

180
00:11:14,648 --> 00:11:18,386
not in use at any state, then also I'll be able to access that anywhere

181
00:11:18,418 --> 00:11:21,880
in my program. Right? So here in this case,

182
00:11:23,130 --> 00:11:27,174
it is made sure that the reference count of the global variable never

183
00:11:27,212 --> 00:11:30,806
drops to zero, which means they won't be de

184
00:11:30,828 --> 00:11:34,170
allocated and they will be deallocation only

185
00:11:34,240 --> 00:11:37,430
once the Python program execution is finished.

186
00:11:37,510 --> 00:11:41,740
So that's of no issue here. Now let's look at one example

187
00:11:42,270 --> 00:11:46,362
here. I have one function named poo here. So I have assigned one string

188
00:11:46,426 --> 00:11:49,758
to my name variable. So at this moment the reference count will be

189
00:11:49,764 --> 00:11:53,194
one. As soon as I pass this, my name into this poo function, the reference

190
00:11:53,242 --> 00:11:57,454
count of this object will become two. And as soon as the execution

191
00:11:57,502 --> 00:12:00,802
is completed, the reference count will become one.

192
00:12:00,936 --> 00:12:04,354
You can delete the objects using del method, right. When you use

193
00:12:04,392 --> 00:12:07,846
del method in Python, it actually decreases or

194
00:12:07,948 --> 00:12:11,142
it actually decrements the reference count by one.

195
00:12:11,196 --> 00:12:15,234
So if you delete an object, then also at that moment the reference

196
00:12:15,282 --> 00:12:18,780
count will be decremented by one for that particular object.

197
00:12:19,150 --> 00:12:22,614
Now let's see, what are the issues with this algorithm?

198
00:12:22,662 --> 00:12:26,102
Right. First thing is, it can't detect circular reference,

199
00:12:26,166 --> 00:12:29,814
because the reference count for the circular references,

200
00:12:29,942 --> 00:12:33,598
or that cycles won't be equal to zero at any point.

201
00:12:33,764 --> 00:12:37,710
And the other thing is that this algorithm actually has many

202
00:12:37,780 --> 00:12:41,742
memory and performance issues. And also

203
00:12:41,876 --> 00:12:45,470
it's kind of a big algorithm, but the main advantage is that

204
00:12:45,540 --> 00:12:49,038
it is real. So the main advantage of this approach

205
00:12:49,134 --> 00:12:52,770
of scanning the reference count and check if it is equal to equal to zero

206
00:12:52,840 --> 00:12:56,494
is that the objects can be immediately and easily destroyed

207
00:12:56,542 --> 00:12:59,922
after they are of no longer use. So as soon as the count is

208
00:12:59,976 --> 00:13:04,306
found equal, equal to, to zero, at that moment the object will be deleted,

209
00:13:04,418 --> 00:13:07,926
destroyed. So yeah, that's a plus point. But the thing is

210
00:13:07,948 --> 00:13:11,410
that this algorithm can't detect the circular reference. Also,

211
00:13:11,500 --> 00:13:15,162
there are some performance issues and all that. Now for

212
00:13:15,216 --> 00:13:18,614
that, the generational GC algorithm comes into picture.

213
00:13:18,662 --> 00:13:22,158
So it can actually detect the cycle. It could reach

214
00:13:22,244 --> 00:13:25,994
to the object which was unreachable by the reference

215
00:13:26,042 --> 00:13:30,046
counting, and it could delete that objects and it could

216
00:13:30,148 --> 00:13:33,614
free the memory. One more thing to

217
00:13:33,652 --> 00:13:36,574
know that in what cases, reference cycles could occur,

218
00:13:36,622 --> 00:13:39,838
right? If we refer any object into objects. So let's

219
00:13:39,854 --> 00:13:42,610
say a list into a list, dictionary into dictionary,

220
00:13:43,910 --> 00:13:48,134
the same thing, or let's say two objects pointing towards each

221
00:13:48,172 --> 00:13:51,858
other, something like that. So in this kind of scenario,

222
00:13:52,034 --> 00:13:55,634
the reference cycles could be created, and these kind of scenarios

223
00:13:55,682 --> 00:13:59,254
are found by the generational DC. And if they are of no

224
00:13:59,292 --> 00:14:02,590
use or something, then the memory deallocation

225
00:14:02,610 --> 00:14:06,266
will be done. Now, one thing to note is that this algorithm does not

226
00:14:06,288 --> 00:14:10,086
run in real time. It runs periodically while the reference counting

227
00:14:10,118 --> 00:14:14,030
was running in real time. So in real time it would scan

228
00:14:15,490 --> 00:14:18,734
if the reference count is equal to equal to zero, and then all the things

229
00:14:18,772 --> 00:14:22,206
were done there. But the generational Gc algorithm does

230
00:14:22,228 --> 00:14:25,874
not run in real time. It runs periodically. So let's say at

231
00:14:25,912 --> 00:14:29,726
x moment of time, I have declared like five variables, and so I've

232
00:14:29,758 --> 00:14:33,202
created five objects, let's say then after some moment,

233
00:14:33,256 --> 00:14:37,138
so let's say now at y period of time, the generational DC algorithm

234
00:14:37,234 --> 00:14:40,518
started running. Now, between that period, let's say

235
00:14:40,604 --> 00:14:44,578
at y moment, now only three objects are induced, and the two objects

236
00:14:44,594 --> 00:14:48,038
which I had declared, like their executes or their function in

237
00:14:48,044 --> 00:14:51,770
the program, has been completed. So now at that y moment,

238
00:14:51,920 --> 00:14:55,354
first of all, it will check if the objects are newly created. If it is

239
00:14:55,392 --> 00:14:58,602
newly created, it will insert into the generational zero list.

240
00:14:58,736 --> 00:15:02,234
Actually, GC algorithm, it defines three

241
00:15:02,272 --> 00:15:05,614
generation list, and it inserts the objects into that.

242
00:15:05,652 --> 00:15:08,542
And then it checks whether the object is of use or no use,

243
00:15:08,596 --> 00:15:12,174
right? So at that now by moment, it will see if the

244
00:15:12,212 --> 00:15:16,462
objects are newly created. If it is so, then it will insert into the generation

245
00:15:16,526 --> 00:15:20,066
zero list. Now it will check for the references. So it

246
00:15:20,088 --> 00:15:23,570
will scan, and it will check whether all the

247
00:15:23,640 --> 00:15:26,738
inserted objects are of use or of no use.

248
00:15:26,824 --> 00:15:29,746
We'll see how it detects that these objects are of user,

249
00:15:29,778 --> 00:15:33,686
of no use, or if it has circular references, let's say. Now the

250
00:15:33,788 --> 00:15:37,122
algorithm found that there is a circular reference,

251
00:15:37,266 --> 00:15:41,174
or two objects are of no use, it will discard

252
00:15:41,222 --> 00:15:44,538
those objects and then insert the remaining objects into the

253
00:15:44,624 --> 00:15:48,838
generation one list. Now, the same thing will happen with the generation

254
00:15:48,934 --> 00:15:52,422
one list. So it will also check for the references.

255
00:15:52,566 --> 00:15:55,642
It will discard the objects which are of no use, and then it will insert

256
00:15:55,706 --> 00:15:59,502
the remaining objects into the generation tool list. And then

257
00:15:59,556 --> 00:16:02,990
this generation tool list, this generation two list,

258
00:16:03,060 --> 00:16:07,246
also scans it, and it discards the necessary objects. And now the objects

259
00:16:07,278 --> 00:16:11,346
which are there in this second generation list, it remains until the

260
00:16:11,368 --> 00:16:14,514
Python execution is not, until the Python code

261
00:16:14,552 --> 00:16:17,974
execution is not completed. Now one thing is each

262
00:16:18,012 --> 00:16:21,640
and every generation list maintains its own individual

263
00:16:22,010 --> 00:16:25,334
counter and its own threshold. So let's say if it

264
00:16:25,372 --> 00:16:28,774
exceeds the threshold, then also the scan will be done and it will try

265
00:16:28,812 --> 00:16:31,786
to find some objects which are of no use or something, and it will try

266
00:16:31,808 --> 00:16:36,266
to discard it, right? So now let's see how it

267
00:16:36,368 --> 00:16:40,086
detects the cycle or how it detects which objects

268
00:16:40,118 --> 00:16:43,966
to discard and how the circular reference is detected, and to

269
00:16:44,068 --> 00:16:46,558
discard it, right? Which is like this step,

270
00:16:46,724 --> 00:16:50,270
discard the objects. Now this algorithm has

271
00:16:50,340 --> 00:16:54,414
two containers. One is the objects to can container. Second is the unreachable

272
00:16:54,462 --> 00:16:58,450
container. And each and every object that supports this

273
00:16:58,520 --> 00:17:02,034
garbage collection will also have an extra reference count. So this

274
00:17:02,152 --> 00:17:05,386
reference count is the basic count of Python memory,

275
00:17:05,438 --> 00:17:09,014
which is incremented on any assignment or like

276
00:17:09,052 --> 00:17:12,918
something. But this now GC underscore ref will be an extra

277
00:17:13,084 --> 00:17:16,166
reference count initialized by this. So as soon

278
00:17:16,188 --> 00:17:20,198
as the algorithm starts, GC underscore reference is initialized.

279
00:17:20,294 --> 00:17:23,722
So how the initialization takes place. So this link

280
00:17:23,776 --> 00:17:27,770
one object is referenced by the outer

281
00:17:28,190 --> 00:17:31,638
variable, which is a so the reference can will be incremented

282
00:17:31,654 --> 00:17:35,146
to one. Then like this will be one because this link two is referenced by

283
00:17:35,168 --> 00:17:38,446
link one. Then link three will be also one, and then link one will be

284
00:17:38,468 --> 00:17:41,982
incremented to two because it is also referenced by link three. And here like link

285
00:17:42,036 --> 00:17:45,406
for the GC underscore RF will be one. Now just imagine

286
00:17:45,438 --> 00:17:49,758
that this link one, link two, link three are objects and let's

287
00:17:49,774 --> 00:17:53,234
say a equal to link one object. And then internally this

288
00:17:53,272 --> 00:17:57,446
link two and link three objects are referenced by this object.

289
00:17:57,548 --> 00:18:00,742
After this initialization is done, algorithm makes

290
00:18:00,796 --> 00:18:05,362
one more iteration, and then it finds that which objects

291
00:18:05,426 --> 00:18:08,890
are truly referenced by the outer world. So here

292
00:18:08,960 --> 00:18:12,774
link one object is directly referenced by the outer

293
00:18:12,822 --> 00:18:16,346
world, while link two, link three, and link four are not

294
00:18:16,448 --> 00:18:20,246
directly referenced by the outer world. Now, it will scan

295
00:18:20,278 --> 00:18:23,438
all these objects, it will find this and it will

296
00:18:23,604 --> 00:18:26,846
decrement the GC underscore reference field.

297
00:18:26,948 --> 00:18:30,414
It will actually decrement the GC underscore reference field by

298
00:18:30,452 --> 00:18:33,466
one if it does not find the outer reference directly.

299
00:18:33,498 --> 00:18:37,186
So here link one object has direct reference from outside world,

300
00:18:37,288 --> 00:18:40,642
so this will be one and this will be zero,

301
00:18:40,696 --> 00:18:44,018
zero and zero because this object does not have the direct

302
00:18:44,104 --> 00:18:48,022
reference from the outside world. Now as soon as this object

303
00:18:48,076 --> 00:18:51,746
has been scanned and this number has been allocated, so let's

304
00:18:51,778 --> 00:18:55,302
see what happens next. So now this will be the state,

305
00:18:55,436 --> 00:18:58,902
but now notice that GC underscore reference equal, equal to zero

306
00:18:58,956 --> 00:19:02,586
does not mean that these objects are not reachable. Of course,

307
00:19:02,608 --> 00:19:06,154
GC underscore reference greater than zero means that it is actually

308
00:19:06,272 --> 00:19:09,478
directly accessible from the outside world. But GC underscore

309
00:19:09,494 --> 00:19:12,782
reference equal equal to zero does not mean that they are not reachable. Actually,

310
00:19:12,836 --> 00:19:16,942
here link two is reachable by link one. Link three is reachable by link two.

311
00:19:17,076 --> 00:19:19,918
So now one more scan will be done.

312
00:19:20,004 --> 00:19:23,386
And now for the objects

313
00:19:23,418 --> 00:19:27,118
which has GC underscore reference equal to equal to zero count, they will be marked

314
00:19:27,134 --> 00:19:30,882
as temporarily unreachable, and they will be shifted to the

315
00:19:31,016 --> 00:19:34,514
unreachable container like this. So let's say it saw

316
00:19:34,552 --> 00:19:37,570
that GCN square reference of link four is zero.

317
00:19:37,640 --> 00:19:40,966
It will shift this into this container. Then for three, it will shift this into

318
00:19:40,988 --> 00:19:44,326
this container. Now, let's say it scanned link one. Then the

319
00:19:44,348 --> 00:19:47,550
GC underscore reference was one, but so as it is greater

320
00:19:47,570 --> 00:19:51,194
than zero, then it will not do anything. So this

321
00:19:51,232 --> 00:19:54,794
processing is actually done by TP underscore traverse function,

322
00:19:54,912 --> 00:19:59,126
and it actually marks all this temporarily unreachable

323
00:19:59,238 --> 00:20:02,586
tag and all that. Now as soon as this is done, then the TP underscore

324
00:20:02,618 --> 00:20:05,774
traverse again can and it finds all

325
00:20:05,812 --> 00:20:09,678
the objects which has an immediate object from the object

326
00:20:09,764 --> 00:20:13,710
which is actually referenced to the outside world. So here link two

327
00:20:13,780 --> 00:20:16,882
has an immediate reference from the link one, and the link one

328
00:20:16,936 --> 00:20:20,274
is actually referenced by the outside world. So now

329
00:20:20,312 --> 00:20:24,290
this link two will be shifted to this objects to scan, and its

330
00:20:24,360 --> 00:20:28,254
reference count will be incremented by one. Then it will scan link

331
00:20:28,312 --> 00:20:32,054
three. Yes, now it will check whether the link to object has

332
00:20:32,092 --> 00:20:35,634
an immediate reference or not. So yes, it has the immediate reference.

333
00:20:35,682 --> 00:20:39,014
So it will get this link three object into this

334
00:20:39,052 --> 00:20:42,626
object to scan container, and it will increment its GC

335
00:20:42,658 --> 00:20:46,154
underscore reference count. And after that, like link

336
00:20:46,192 --> 00:20:49,814
three, immediate reference is link two. So here also the GCNs

337
00:20:49,942 --> 00:20:53,246
reference will be incremented. But now if you can see this

338
00:20:53,268 --> 00:20:57,082
link four is all alone by itself. So it is neither

339
00:20:57,226 --> 00:21:01,166
referenced by any object, and also it has no reference from

340
00:21:01,188 --> 00:21:04,386
any object which is accessible from outside world. So now

341
00:21:04,408 --> 00:21:08,066
in this kind of scenarios, this will be now marked as

342
00:21:08,088 --> 00:21:11,506
finally unreachable. And at the end, all the

343
00:21:11,528 --> 00:21:14,750
objects of this unreachable container will be deleted

344
00:21:14,830 --> 00:21:18,326
by the algorithm. So this is

345
00:21:18,348 --> 00:21:22,326
just an overview of the working if we

346
00:21:22,348 --> 00:21:25,590
have three objects which are referenced by each other, and then

347
00:21:25,660 --> 00:21:29,114
if we have fourth object which is referenced by itself,

348
00:21:29,232 --> 00:21:31,690
now all these three objects are.

349
00:21:31,840 --> 00:21:35,862
So the first object has direct reference by some variable,

350
00:21:36,006 --> 00:21:39,642
and now the circular object will be

351
00:21:39,776 --> 00:21:43,198
referencing to itself only, right? So in this kind of

352
00:21:43,284 --> 00:21:46,938
situation, these cycles will be detected

353
00:21:47,034 --> 00:21:50,750
and it will be discarded. So this is just an overview. I would

354
00:21:50,820 --> 00:21:54,506
highly prefer to have a look at the design of the c Python's garbage

355
00:21:54,538 --> 00:21:58,926
collector. It will give you more clarity and also they have explained

356
00:21:59,038 --> 00:22:02,834
by some code, snippets and all. Also, I would highly recommend you

357
00:22:02,872 --> 00:22:06,502
to have a look at the GC garbage function, the GC collect function.

358
00:22:06,636 --> 00:22:10,374
And once you'll see, you'll get

359
00:22:10,412 --> 00:22:13,766
some idea about how the garbage collection so how

360
00:22:13,788 --> 00:22:17,430
the scanning and all that takes place. So actually,

361
00:22:17,580 --> 00:22:21,606
I have referred these things, and I also referred to some

362
00:22:21,628 --> 00:22:25,062
of the python memory model blocks at medium. So they are also

363
00:22:25,116 --> 00:22:29,286
good. So yeah. Now if you have more interest

364
00:22:29,468 --> 00:22:33,582
in knowing this, then I would highly recommend you to refer these

365
00:22:33,636 --> 00:22:36,846
references. Thank you. If you have any questions or

366
00:22:36,948 --> 00:22:40,606
anything then feel free to connect with me. Drop me an email,

367
00:22:40,708 --> 00:22:44,526
or if you have any suggestions for me then also you are more

368
00:22:44,548 --> 00:22:46,460
than welcome to have a chat with me. Thank you.

