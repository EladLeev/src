1
00:00:25,330 --> 00:00:28,454
You. Hey everyone, we're going to talk about

2
00:00:28,492 --> 00:00:31,766
WordPress and how we can scale it with nextJs. So who

3
00:00:31,788 --> 00:00:34,866
am I? I'm Colby Fayock. I'm the one hooking bb eight and Kylo Ren

4
00:00:34,898 --> 00:00:38,354
over there. I work with the dev community as a developer advocate. For applause

5
00:00:38,402 --> 00:00:41,286
comes you can find me pretty much anywhere on the web by just googling my

6
00:00:41,308 --> 00:00:44,486
name as I'm the only one in the world. So let's start

7
00:00:44,508 --> 00:00:47,846
off by addressing the CMS in the room. It's 2021 and

8
00:00:47,868 --> 00:00:51,466
I would imagine some developers still cringe the thought of using WordPress.

9
00:00:51,578 --> 00:00:54,400
But frankly, we're still living in a WordPress world.

10
00:00:55,010 --> 00:00:58,686
According to build with trends, if we look at the CMS distribution of

11
00:00:58,708 --> 00:01:02,142
the top 1 million sites, almost 35% of

12
00:01:02,196 --> 00:01:06,634
those websites are using WordPress. That's a huge percentage beyond

13
00:01:06,682 --> 00:01:10,274
a little dip between this and last year. It's been steadily growing since its

14
00:01:10,312 --> 00:01:13,602
inception. Built with is able to detect that it's being used on at least

15
00:01:13,656 --> 00:01:16,340
28 million sites. That's a staggering number.

16
00:01:17,350 --> 00:01:20,886
And while we might not all want to use WordPress, it's realistically around to

17
00:01:20,908 --> 00:01:24,534
stay for the foreseeable future. So let's talk about how we can take advantage of

18
00:01:24,572 --> 00:01:27,714
the King CMS in a headless way and use it to power our static

19
00:01:27,762 --> 00:01:31,290
jamstack sites in 2021. So to start,

20
00:01:31,360 --> 00:01:35,062
what does headless actually mean? With our traditional

21
00:01:35,126 --> 00:01:38,458
stack, somebody visits a page in the browser, that browser reaches out to

22
00:01:38,464 --> 00:01:42,358
the server. The server will do the work like request data from the database.

23
00:01:42,454 --> 00:01:45,726
Then they'll render that page for the HTML, which will be

24
00:01:45,748 --> 00:01:49,018
returned in the response and if we're lucky, it'll be cached.

25
00:01:49,114 --> 00:01:53,246
Finally, the browser displays that response to the person with a

26
00:01:53,268 --> 00:01:56,426
headless approach. That request to the server might be asynchronous

27
00:01:56,458 --> 00:01:59,758
on the client. In this particular example, the person would visit

28
00:01:59,774 --> 00:02:03,518
a page in their browser and immediately get a response straight from storage.

29
00:02:03,614 --> 00:02:07,026
Once that page loads in the browser, the browser will kick off another request to

30
00:02:07,048 --> 00:02:09,960
a server which can load in all that dynamic content.

31
00:02:10,890 --> 00:02:13,906
But I would imagine you're probably wondering, why would we want to make a client

32
00:02:13,938 --> 00:02:17,862
side request to a CMS like WordPress? And that's not necessarily the

33
00:02:17,996 --> 00:02:21,186
recommended approach. That's where static site generators

34
00:02:21,218 --> 00:02:24,470
come in to do the hard lifting before your page even hits the browser,

35
00:02:24,550 --> 00:02:27,610
which has given rise to what people now call the Jamstack.

36
00:02:28,350 --> 00:02:32,022
Maybe you've heard of the Jamstack on Twitter, or maybe it's a completely new concept,

37
00:02:32,086 --> 00:02:35,898
but what actually is it at the core? Jamstack sites

38
00:02:35,914 --> 00:02:38,798
are static HTML websites. This isn't a new idea,

39
00:02:38,884 --> 00:02:42,158
but it's a modern approach. Typically they use JavaScript in

40
00:02:42,164 --> 00:02:45,506
the browser to make any request to your APIs that would typically give you

41
00:02:45,528 --> 00:02:49,134
that dynamic data. Or they can use those APIs at compile

42
00:02:49,182 --> 00:02:53,090
time and serve dynamic content without an extra client side request.

43
00:02:53,990 --> 00:02:57,758
One example that we can imagine is building a react application. This would serve

44
00:02:57,774 --> 00:03:01,222
as our JavaScript layer. We would use the WordPress API to provide

45
00:03:01,276 --> 00:03:04,854
that content and dynamic data. We would then compile that all down

46
00:03:04,892 --> 00:03:08,662
to a static site. Bring something like NextJs, which with a lot of other

47
00:03:08,716 --> 00:03:12,038
features is a static site generator. Now if this

48
00:03:12,044 --> 00:03:15,386
is all new to you, that sounds like a whole lot of work. Why not

49
00:03:15,408 --> 00:03:17,900
just use WordPress out of the box like we always do?

50
00:03:18,590 --> 00:03:22,506
Well, the great thing about Jamstack sites is they have a lot of compelling features

51
00:03:22,538 --> 00:03:26,526
built right in. By default, we're living up to what AWS considers a

52
00:03:26,548 --> 00:03:30,058
well architected infrastructure. These are features

53
00:03:30,074 --> 00:03:33,200
that we all care about, like performance, reliability and cost.

54
00:03:34,130 --> 00:03:37,730
With most server based solutions like WordPress, there are a lot of options

55
00:03:37,800 --> 00:03:41,086
to help speed things up. For WordPress specifically that includes

56
00:03:41,118 --> 00:03:44,642
plugins to cache or some custom work under the hood. But each page

57
00:03:44,696 --> 00:03:47,570
is a server hit, which is prone to its ups and does.

58
00:03:48,230 --> 00:03:51,606
On the other hand, serving a plain static HTML file is just

59
00:03:51,628 --> 00:03:54,838
going to be fast. Instead of spending that time rendering on a

60
00:03:54,844 --> 00:03:58,386
server, you serve a static file straight from storage or a CDN.

61
00:03:58,498 --> 00:04:02,154
And while you can do this with the default WordPress instance, it's often much more

62
00:04:02,192 --> 00:04:05,638
complicated. And often some of those plugins that you'll use might cache

63
00:04:05,654 --> 00:04:08,746
and service a static HTML file, but they still serve it from a

64
00:04:08,768 --> 00:04:10,890
regular server, not static storage.

65
00:04:11,870 --> 00:04:15,434
With any server, we're also typically paying for how much we expect

66
00:04:15,472 --> 00:04:19,050
our traffic to be. While most of the time that is predictable,

67
00:04:19,130 --> 00:04:22,670
we all hope to have a post one day go viral. And if that happens,

68
00:04:22,740 --> 00:04:25,906
people visiting our site will be the ones paying for it with slow speeds or

69
00:04:25,928 --> 00:04:29,422
timeouts. Now there's solutions like load balancing and auto

70
00:04:29,486 --> 00:04:33,006
scaling, but those aren't perfect solutions and might not always handle

71
00:04:33,038 --> 00:04:37,546
a surge in traffic. Back to the fact that we're serving static HTML

72
00:04:37,598 --> 00:04:40,450
files because we're serving files straight from storage.

73
00:04:40,530 --> 00:04:44,402
Or better yet, files straight from a CDN buzzword alert.

74
00:04:44,466 --> 00:04:47,990
That means that our user facing website is going to infinitely scale.

75
00:04:48,810 --> 00:04:52,266
That static site will survive that Reddit hug of death when

76
00:04:52,288 --> 00:04:54,250
your post ultimately goes viral.

77
00:04:55,310 --> 00:04:58,762
And managing servers isn't always cheap. While a low traffic personal

78
00:04:58,816 --> 00:05:02,166
blog might be a few dollars a month. The more that traffic grows,

79
00:05:02,198 --> 00:05:05,454
the more that cost is going to quickly grow. While you have those

80
00:05:05,492 --> 00:05:08,862
options like load balancing and auto scaling, those services also quickly

81
00:05:08,916 --> 00:05:12,282
add up and without it you risk your site slowing down or worse,

82
00:05:12,346 --> 00:05:16,638
downtime. Storage is cheap. It's really, really cheap.

83
00:05:16,734 --> 00:05:20,194
We can maintain huge static projects on AWS using s

84
00:05:20,232 --> 00:05:24,142
three for a really low cost, but even if we still manage a server,

85
00:05:24,206 --> 00:05:27,954
the usage is going to be much, much lower with only content managers or

86
00:05:27,992 --> 00:05:31,554
requests that compile time. While there's a ton of headless

87
00:05:31,602 --> 00:05:35,714
options available in a headless world, WordPress still has a lot of compelling features

88
00:05:35,762 --> 00:05:38,840
to keep us from using it. Keep us to using it.

89
00:05:39,290 --> 00:05:42,554
One issue with a lot of the recent solutions is they tend to be really

90
00:05:42,592 --> 00:05:45,866
developer focused, and that's not necessarily a bad thing. But you

91
00:05:45,888 --> 00:05:49,222
have to know your audience. If your ultimate goal is for that CMS

92
00:05:49,286 --> 00:05:53,126
to be used by people who are non technical, you're providing can experience that people

93
00:05:53,168 --> 00:05:55,440
might struggle to actually learn and use.

94
00:05:56,210 --> 00:05:59,454
WordPress is the most used cms in the industry. That means

95
00:05:59,492 --> 00:06:03,374
most of our clients are already going to be familiar with WordPress and

96
00:06:03,412 --> 00:06:06,778
there's a huge ecosystem already thriving around WordPress.

97
00:06:06,874 --> 00:06:10,274
If you run into an issue, you're more than likely able to find somebody else

98
00:06:10,312 --> 00:06:13,954
who ran into that exact same issue with a simple Google search. We can also

99
00:06:13,992 --> 00:06:17,750
take advantage of a lot of community solutions that extend WordPress.

100
00:06:18,650 --> 00:06:22,120
All right, so if it's so great, let's actually see what this looks like.

101
00:06:22,810 --> 00:06:26,246
Since four seven WordPress by default now supports a

102
00:06:26,268 --> 00:06:29,914
rest API that means right out of the box WordPress can actually be

103
00:06:29,952 --> 00:06:31,930
used as a headless APIs.

104
00:06:32,910 --> 00:06:35,994
But taking that a step further, thanks to Jason Ball who

105
00:06:36,032 --> 00:06:39,686
created WP GraphQL along with all the other amazing contributors,

106
00:06:39,798 --> 00:06:43,238
it's a simple plugin that we can add right inside of our dashboard where we

107
00:06:43,264 --> 00:06:46,990
then have the ability to query all of our WordPress data with GraphQL.

108
00:06:47,810 --> 00:06:51,614
So coming full circle we can take advantage of this approach where we leverage those

109
00:06:51,652 --> 00:06:55,134
APIs at compile time to produce static websites

110
00:06:55,182 --> 00:06:58,846
rather than waiting for that server request, we'll have our entire WordPress

111
00:06:58,878 --> 00:07:01,090
site available as HTML documents.

112
00:07:01,990 --> 00:07:05,298
The cool thing is this will work with really whatever framework you want to

113
00:07:05,304 --> 00:07:08,030
use, as long as it can hidden APIs to compile those parts,

114
00:07:08,110 --> 00:07:11,526
we're good to go. But I'm particularly here to talk about

115
00:07:11,548 --> 00:07:15,474
how we can use it with next js for the unfamiliar.

116
00:07:15,522 --> 00:07:18,966
NexTJs is a react framework, gives you a whole lot of features on top of

117
00:07:18,988 --> 00:07:21,930
react, including things like routing and data fetching.

118
00:07:22,510 --> 00:07:25,894
The two main data fetching methods are get serverside props and get static

119
00:07:25,942 --> 00:07:29,626
props, and they pretty much sound like what they do with

120
00:07:29,728 --> 00:07:33,002
get serverside props. The app is going to render on the server,

121
00:07:33,066 --> 00:07:36,750
populating any dynamic data and sending it back inside that request.

122
00:07:37,410 --> 00:07:40,846
But instead I want to use get static props, where instead of my

123
00:07:40,868 --> 00:07:44,446
visitor hitting a server directly, I want them to get their request from

124
00:07:44,468 --> 00:07:48,274
static storage. Any request to a server will happen

125
00:07:48,312 --> 00:07:52,226
at compile time, or at least as many requests as I can reasonably make happen.

126
00:07:52,328 --> 00:07:55,650
That way our visitors are spending less time waiting for that request,

127
00:07:56,550 --> 00:07:59,094
and I've done just that with a project that I've been working on called Next

128
00:07:59,132 --> 00:08:03,094
JS WordPress starter, which lets anybody spin up a new static WordPress site

129
00:08:03,132 --> 00:08:06,642
with next JS super easily like you typically

130
00:08:06,706 --> 00:08:10,166
manage or expect from a WordPress blog. The homepage is full of

131
00:08:10,188 --> 00:08:14,090
most recent posts. I take advantage of get static props where

132
00:08:14,160 --> 00:08:17,674
I request all those posts at compile time that gets

133
00:08:17,712 --> 00:08:20,826
injected into the page, and then I can build out the page exactly how I

134
00:08:20,848 --> 00:08:24,506
want with pagination and everything. Now of

135
00:08:24,528 --> 00:08:27,614
course we want to make sure that we have the routes for all of those

136
00:08:27,652 --> 00:08:31,258
posts so we can take advantage of get static paths,

137
00:08:31,354 --> 00:08:35,102
which is how we can tell nextjs exactly what paths or routes that we want

138
00:08:35,156 --> 00:08:37,940
to actually get built during that compilation process.

139
00:08:38,790 --> 00:08:42,114
And once we define those paths, we can then look up the data for

140
00:08:42,152 --> 00:08:45,890
each one of those parts as a parameter inside of getstatic props.

141
00:08:47,030 --> 00:08:50,454
I would imagine someone would typically want search out of their WordPress site

142
00:08:50,492 --> 00:08:54,098
as well, and the WordPress API actually provides search capabilities.

143
00:08:54,194 --> 00:08:57,526
But like I mentioned earlier, I'm trying to statically compile this.

144
00:08:57,628 --> 00:09:00,774
So then I would be hitting a server which is kind of against the point

145
00:09:00,812 --> 00:09:04,314
of what I'm trying to do. So I took advantage of NextJs

146
00:09:04,432 --> 00:09:07,866
sitting on top of webpack and I created a webpack compiler as part of this

147
00:09:07,888 --> 00:09:11,114
project that fetches all the posts at compile time. It would

148
00:09:11,152 --> 00:09:14,714
then create a search index with the titles and the parts inside of a static

149
00:09:14,762 --> 00:09:18,746
file. It then loads that into memory or asynchronously

150
00:09:18,778 --> 00:09:21,934
on the client, depending on what you're trying to do, and we can make those

151
00:09:21,972 --> 00:09:25,714
searches right to that index. And with all that

152
00:09:25,912 --> 00:09:29,806
I was able to get together a WordPress statically compiled

153
00:09:29,838 --> 00:09:33,234
with next JS. The cool thing is we can couple

154
00:09:33,272 --> 00:09:36,914
this with WordPress plugins like Yoast and ACF, and this

155
00:09:36,952 --> 00:09:40,238
gives us a lot of flexibility with being able to manage our content. These work

156
00:09:40,264 --> 00:09:44,006
out of the box with our next JS WordPress starter. So I

157
00:09:44,028 --> 00:09:46,774
know you don't all want to just see a bunch of screenshots of some code,

158
00:09:46,812 --> 00:09:50,198
so let's actually do a quick walkthrough. So here's what we're going

159
00:09:50,204 --> 00:09:53,138
to go through. I'm going to first show you how easy it is to spin

160
00:09:53,154 --> 00:09:56,826
up a new WordPress site with next JS WordPress starter. But that project is

161
00:09:56,848 --> 00:09:59,674
probably a little bit too much code to try to walk through in this little

162
00:09:59,712 --> 00:10:02,798
talk. So I'm going to spin up a second next JS site

163
00:10:02,884 --> 00:10:06,110
where I'm going to walk you through something that works the same

164
00:10:06,180 --> 00:10:09,306
but a little bit simpler. So let's

165
00:10:09,338 --> 00:10:12,618
dive in. All right, so we're

166
00:10:12,634 --> 00:10:16,234
going to start off with this pretty basic example of a new WordPress

167
00:10:16,282 --> 00:10:20,114
instance where here I grab a new site from WP engine where

168
00:10:20,152 --> 00:10:23,234
I just have a few posts in here that I added has sample content.

169
00:10:23,352 --> 00:10:26,946
Personally I like to use Fillerrama IO as I love featureama and

170
00:10:26,968 --> 00:10:30,054
I also added some pages. And really just the point here

171
00:10:30,092 --> 00:10:33,526
is I'm showing you this, a vanilla example of WordPress where I

172
00:10:33,548 --> 00:10:36,998
don't really have anything on here and it's brand new, right? So what

173
00:10:37,004 --> 00:10:40,482
we want to do is we want to first see how we can actually query

174
00:10:40,546 --> 00:10:43,658
for our WordPress data and we're going to do that with graphql. So I'm going

175
00:10:43,664 --> 00:10:47,046
to head over to add new under plugins and I'm going to search for WP

176
00:10:47,078 --> 00:10:51,114
graphql which we can see that I've already been searching for, where once that comes

177
00:10:51,152 --> 00:10:53,610
up it's going to be the first option and I'm going to hit install.

178
00:10:53,680 --> 00:10:56,926
Now once that loads I can hit activate and

179
00:10:56,948 --> 00:10:59,914
we can see immediately on the side here we're going to get this new tab

180
00:10:59,962 --> 00:11:03,278
for graphql where I'm going to select the graphical ide.

181
00:11:03,444 --> 00:11:06,442
Now what this is going to give us is a way that we can actually

182
00:11:06,516 --> 00:11:10,034
explore all of our WordPress data and actually see what's available here.

183
00:11:10,152 --> 00:11:13,666
Now what we want to do is we want to ultimately query all of

184
00:11:13,688 --> 00:11:17,026
our posts, right? So we can actually just scroll right down here and I

185
00:11:17,048 --> 00:11:20,438
can find my posts and I can start expanding this where we can see on

186
00:11:20,444 --> 00:11:23,890
the right here it's actually building that query where I'm going to select the edges

187
00:11:23,970 --> 00:11:27,366
and the node and we can see all the data that's associated with

188
00:11:27,388 --> 00:11:31,058
that post. And let's say for example we're going to want our id and we're

189
00:11:31,074 --> 00:11:34,346
going to want the slug and we're going to want the title of that and

190
00:11:34,368 --> 00:11:37,626
eventually the content. But now if I click play we can see that

191
00:11:37,648 --> 00:11:40,838
I'm already going to get all that information about all those posts.

192
00:11:40,934 --> 00:11:44,334
We can even see that if I scroll up here and I select even

193
00:11:44,372 --> 00:11:47,998
the excerpt and the content when I click play again,

194
00:11:48,084 --> 00:11:51,486
I get that right inside of that request. Now we can see here that

195
00:11:51,508 --> 00:11:54,858
this is showing as an HTML string, which is how we're

196
00:11:54,874 --> 00:11:58,498
going to actually render it into our page as WordPress is going to

197
00:11:58,584 --> 00:12:02,034
be the one who still constructs what that looks like when it's actually

198
00:12:02,072 --> 00:12:05,458
sending that over through the request. So now that

199
00:12:05,464 --> 00:12:08,882
we have a good idea of how we can actually query our data, let's actually

200
00:12:08,936 --> 00:12:13,142
take this and use it in practice to spin up a new website. So over

201
00:12:13,196 --> 00:12:16,902
on GitHub I talked about my nextjs WordPress starter where here

202
00:12:16,956 --> 00:12:19,926
we're going to use it to easily spin up a new next js site with

203
00:12:19,948 --> 00:12:23,366
WordPress. Now if we scroll down here we can see that the first step here

204
00:12:23,388 --> 00:12:27,062
is we're going to use yarn create next app which is going to help us

205
00:12:27,116 --> 00:12:30,718
pull this project down as a template and get it started. It install the

206
00:12:30,724 --> 00:12:33,966
dependencies so that we can get immediately started with it. So the

207
00:12:33,988 --> 00:12:36,766
first thing I'm going to do is I'm going to copy that line and you

208
00:12:36,788 --> 00:12:40,286
can use Npm if you want. I prefer to use yarn, but right inside of

209
00:12:40,308 --> 00:12:43,006
my project I'm going to paste that in and I'm going to also add an

210
00:12:43,028 --> 00:12:46,250
additional parameter so that I can set the name of the project.

211
00:12:46,340 --> 00:12:49,442
Or if you don't it'll ask you for that later. But I'm going to say

212
00:12:49,496 --> 00:12:53,154
my WP graphql conf 42 app.

213
00:12:53,272 --> 00:12:57,102
So what that's going to do again is it's going to grab this template

214
00:12:57,166 --> 00:13:00,486
from GitHub, it's going to pull it down locally, it's going

215
00:13:00,508 --> 00:13:04,246
to install all the dependencies associated with that project. It's even going

216
00:13:04,268 --> 00:13:07,862
to reset git history so that you have a fresh new start for working

217
00:13:07,916 --> 00:13:11,570
with your new project. Now we're just seeing this loading depending on

218
00:13:11,580 --> 00:13:14,726
your Internet connection. Of course it's installing all those dependencies.

219
00:13:14,838 --> 00:13:18,266
But once we get up and running we can see what's actually happening here.

220
00:13:18,368 --> 00:13:22,086
So now we can see that it's finished and it's even giving us the instructions

221
00:13:22,198 --> 00:13:25,098
where first we can CD into that new directory.

222
00:13:25,274 --> 00:13:28,638
And before we actually run the development server, we have one more thing.

223
00:13:28,724 --> 00:13:32,766
And if we see on the left here it's setting this new environment variable to

224
00:13:32,788 --> 00:13:36,462
the WordPress GraphQL endpoint because ultimately we want to fetch the data

225
00:13:36,516 --> 00:13:39,538
of our WordPress instance, right? So what I'm going to do is I'm going to

226
00:13:39,544 --> 00:13:43,250
copy this string and I'm going to open this up inside of my code editor

227
00:13:43,750 --> 00:13:47,314
where as soon as this loads we can see that I have my

228
00:13:47,352 --> 00:13:50,566
new project and in the root of the project I'm going to create a new

229
00:13:50,588 --> 00:13:54,150
file. And that file I'm going to call env local

230
00:13:54,220 --> 00:13:57,298
and that's the nextjs convention for the local where it's

231
00:13:57,314 --> 00:14:00,806
automatically going to load this in a local environment. Then finally I'm going to

232
00:14:00,828 --> 00:14:04,346
paste in that environment variable. Now of course our site is

233
00:14:04,368 --> 00:14:08,266
a WordPress site so I'm going to head over to my WordPress instance and

234
00:14:08,288 --> 00:14:12,026
we're bring to grab the location that WordPress has installed it. And for me particular

235
00:14:12,128 --> 00:14:15,518
it's spacejellydemo wpengine.com. So I'm going to

236
00:14:15,524 --> 00:14:19,166
take that URL and I'm going to replace the WordPress site.com with

237
00:14:19,188 --> 00:14:22,398
that. And we can also see the GraphQL endpoint here.

238
00:14:22,484 --> 00:14:26,058
Now that's configurable but by default it's

239
00:14:26,074 --> 00:14:29,866
going to be available with WP GraphQl at graphql and that's what we're

240
00:14:29,898 --> 00:14:33,546
doing. So we have my WordPress address GraphQl and we're

241
00:14:33,578 --> 00:14:36,934
ready to go. So now that have that saved I can actually open back

242
00:14:36,972 --> 00:14:40,278
up my terminal and I'm going to run yarn dev. And what this is going

243
00:14:40,284 --> 00:14:43,430
to do is it's going to spin up a local development server for us.

244
00:14:43,500 --> 00:14:46,086
Now I'm going to start that. So it kicks off the process. But in the

245
00:14:46,108 --> 00:14:49,718
background what's going to happen is nextjs is going to go through and it's going

246
00:14:49,724 --> 00:14:53,046
to start trying to build this homepage for us and it's going to do

247
00:14:53,068 --> 00:14:56,102
a bunch of things in the background where it's going to actually grab that data

248
00:14:56,156 --> 00:14:59,766
that we want from WordPress so that it can actually build it and inject it

249
00:14:59,788 --> 00:15:02,846
into that page. The compile time that I was talking but before.

250
00:15:02,948 --> 00:15:06,414
But also we can see some other things going on here where as

251
00:15:06,452 --> 00:15:09,760
part of the starter it's also adding some other cool features like

252
00:15:10,290 --> 00:15:13,374
it's automatically generating social images so that when you share

253
00:15:13,412 --> 00:15:16,878
it on Twitter or Facebook it shows an image rather than just some

254
00:15:16,964 --> 00:15:20,814
blank empty text. And it also shows the WP search which is that index

255
00:15:20,862 --> 00:15:24,382
we were talking about earlier. We also have a sitemap and an RSS feed.

256
00:15:24,446 --> 00:15:27,346
But we can see in the left here that the site already loaded and we

257
00:15:27,368 --> 00:15:30,646
have all this content right inside of our project and we really didn't do much

258
00:15:30,668 --> 00:15:34,342
here. All we did was plug in our WordPress address

259
00:15:34,476 --> 00:15:37,926
and we now have this basic example of a blog. We can even see that

260
00:15:37,948 --> 00:15:40,774
if we go to one of these parts that it's going to do the same

261
00:15:40,812 --> 00:15:44,198
thing as it did for the homepage where it's first going to start compelling

262
00:15:44,214 --> 00:15:47,690
that page in the background. But it's going to load in all that data

263
00:15:47,760 --> 00:15:51,146
specifically for that post. And we can see that we have our post,

264
00:15:51,248 --> 00:15:54,654
it's looking pretty great and readable and we have all this by

265
00:15:54,692 --> 00:15:58,366
default right out of the box by just plugging in our WordPress address into the

266
00:15:58,388 --> 00:16:01,630
WordPress, the next JS WordPress starter. Now again,

267
00:16:01,700 --> 00:16:05,182
I mentioned that it's probably a little bit too much to try to dive in

268
00:16:05,236 --> 00:16:08,706
all straight into this particular project because there's a lot

269
00:16:08,728 --> 00:16:12,574
of moving pieces since it is trying to really represent a full WordPress

270
00:16:12,622 --> 00:16:16,674
site. Right? So we're going to use another starter and spin up a second project

271
00:16:16,792 --> 00:16:20,114
and we're bring to use the second starter that I made. It's just a basic

272
00:16:20,162 --> 00:16:23,862
starter where it's going to have the same kind of thing happening

273
00:16:23,916 --> 00:16:27,286
in the background where it's going to request that graphql data, but it's just

274
00:16:27,308 --> 00:16:31,042
a simpler example so we can actually visualize what's happening under the hood.

275
00:16:31,106 --> 00:16:33,338
So the first thing I'm going to do is I'm going to cancel out of

276
00:16:33,344 --> 00:16:36,694
that server and spin up one and I'm going to grab

277
00:16:36,742 --> 00:16:40,298
this address just like I did with the NextJs WordPress starter and I'm

278
00:16:40,304 --> 00:16:43,426
going to paste that in and let's call this my basic

279
00:16:43,558 --> 00:16:47,054
conf 42 app. And what that's going to do,

280
00:16:47,092 --> 00:16:50,526
again, similar to NexTJs, WordPress starter is going to pull down this

281
00:16:50,548 --> 00:16:54,302
template. It's going to install all the dependencies associated with the project.

282
00:16:54,436 --> 00:16:57,506
It's going to reset the git history and really just start us off with

283
00:16:57,528 --> 00:17:00,366
a brand new application where we can immediately get productive.

284
00:17:00,478 --> 00:17:03,854
So now again, I'm going to CD into this directory

285
00:17:03,982 --> 00:17:07,166
and just like before, we need to set that WordPress GraphQL

286
00:17:07,198 --> 00:17:10,806
endpoint. So I'm going to first open up this new project inside of my code

287
00:17:10,828 --> 00:17:14,086
editor. Then I'm going to switch over quick to my other project. I'm going

288
00:17:14,108 --> 00:17:18,322
to grab that same variable data and I'm going to create that new environment variable

289
00:17:18,386 --> 00:17:22,054
file just like we did over there so that now we're ready to go

290
00:17:22,172 --> 00:17:25,786
and I can hit yarn dev. And just like before it's going to give me

291
00:17:25,808 --> 00:17:29,626
a new local development server I can exit out of that other one. And in

292
00:17:29,648 --> 00:17:33,146
the background it's starting to compile that site just the same way, except there's just

293
00:17:33,168 --> 00:17:36,686
a lot less features in it and it's just a simpler example. So it's actually

294
00:17:36,708 --> 00:17:39,806
going to load a little bit faster for us that we'll see. But once it

295
00:17:39,828 --> 00:17:43,230
loads we're going to be able to see that again. We have this simple

296
00:17:43,300 --> 00:17:47,038
example where we're still grabbing dynamic WordPress data and we're adding

297
00:17:47,054 --> 00:17:50,450
it directly to the page where we can then easily get started

298
00:17:50,520 --> 00:17:54,226
with a new simple blog using Wp graphql on WordPress and

299
00:17:54,248 --> 00:17:57,826
nextjs. But let's actually see what's happening under the hood for this one.

300
00:17:57,928 --> 00:18:01,238
So if we open up the vs code we

301
00:18:01,244 --> 00:18:04,914
can see that like a typical nextjs project, we have some default

302
00:18:04,962 --> 00:18:08,774
pages out of the box. Now Nextjs uses file system based

303
00:18:08,812 --> 00:18:12,326
routing, which is awesome so that we can see under source pages we

304
00:18:12,348 --> 00:18:15,178
have our index js which is going to be our home page.

305
00:18:15,264 --> 00:18:18,646
And if we look at the top here we can see that this export default

306
00:18:18,678 --> 00:18:22,358
function home, this is going to be our react component or page component

307
00:18:22,454 --> 00:18:25,626
that we're actually using to render that page. And if you're already familiar

308
00:18:25,658 --> 00:18:28,494
with react, this isn't really anything special.

309
00:18:28,612 --> 00:18:31,966
We ultimately just have this react component that's going to render the

310
00:18:31,988 --> 00:18:35,006
page exactly how we want. But what is special is if

311
00:18:35,028 --> 00:18:38,242
we scroll all the was down to the bottom of the page we have this

312
00:18:38,296 --> 00:18:42,002
get static props function. Now if you remember from the talk

313
00:18:42,056 --> 00:18:45,266
part of this, we actually are going to use this to grab all the

314
00:18:45,288 --> 00:18:48,398
data that we want and inject it into the page. And as we can see

315
00:18:48,424 --> 00:18:52,434
here, we're using Apollo client or Apollo GraphQl client

316
00:18:52,482 --> 00:18:55,794
so that we can fetch all that data. And we're using a similar query

317
00:18:55,842 --> 00:18:59,206
to what we saw right inside of our WordPress when we were playing around

318
00:18:59,228 --> 00:19:02,706
with the Explorer. We're also grabbing a little extra data including the title

319
00:19:02,738 --> 00:19:05,958
and description. So we were able to show that up top. But ultimately we're

320
00:19:05,974 --> 00:19:09,466
grabbing all that post data. Then we can see that as we go down

321
00:19:09,488 --> 00:19:12,106
we're going to filter and clean up the data a little bit. We're going to

322
00:19:12,128 --> 00:19:15,646
pass that right in has a props object so that we can grab that into

323
00:19:15,668 --> 00:19:18,990
the page. If we scroll back up to the top we can see those exact

324
00:19:19,060 --> 00:19:22,954
same props. But then again, ultimately it's a react component

325
00:19:23,002 --> 00:19:26,322
that we're passing all that data to and that we're able to render it out

326
00:19:26,376 --> 00:19:29,938
exactly how we want using typical react code. And that's what's going

327
00:19:29,944 --> 00:19:33,474
to give us that home page where we can see it's just a list

328
00:19:33,512 --> 00:19:37,074
of posts and the title and the description right up top.

329
00:19:37,192 --> 00:19:40,902
Now, on top of that, we also want to render a page for every single

330
00:19:40,956 --> 00:19:44,438
post, right? So this is going to be another approach where if we look at

331
00:19:44,444 --> 00:19:47,830
this post directory here, we have this other file called post

332
00:19:47,900 --> 00:19:51,474
slug. Now, if you're new to nextjs, those brackets

333
00:19:51,522 --> 00:19:54,554
might look a little weird to you. And what those are doing is it's saying

334
00:19:54,592 --> 00:19:57,946
that post slug is going to be a parameter where the value of

335
00:19:57,968 --> 00:20:01,146
it is actually going to be variable, where we want to be able to

336
00:20:01,168 --> 00:20:04,154
make sure that we have our post collection, but we're going to have a unique

337
00:20:04,202 --> 00:20:08,270
slug or path for every single post that we have available.

338
00:20:08,420 --> 00:20:11,822
Now when we open up this page, we can see again that

339
00:20:11,876 --> 00:20:15,214
similar to the home page, there's nothing necessarily special about it from

340
00:20:15,252 --> 00:20:18,978
a react component standpoint. But if we scroll, scroll, scroll all

341
00:20:18,984 --> 00:20:22,542
the way down to the bottom, we're first going to see get static props.

342
00:20:22,606 --> 00:20:25,874
But let's scroll one more time and we can see that we have this get

343
00:20:25,912 --> 00:20:29,454
static paths. Now if you remember, this is going to be how we generate

344
00:20:29,502 --> 00:20:32,726
all those paths or the routes that we're going to tell next js that

345
00:20:32,748 --> 00:20:35,926
we want to actually be available for the project. So the first

346
00:20:35,948 --> 00:20:39,494
thing we do is we get all those posts and we're going to turn them

347
00:20:39,532 --> 00:20:43,402
into can array of paths where if we see here, we see this post

348
00:20:43,456 --> 00:20:47,686
slug parameter and we can see that's exactly how this is going to align

349
00:20:47,798 --> 00:20:51,402
with creating that dynamic content where we're saying we have all these

350
00:20:51,456 --> 00:20:55,086
paths and each of them have this unique slug that we

351
00:20:55,108 --> 00:20:58,894
want to be used when rendering that page. Now, once nextjs takes

352
00:20:58,932 --> 00:21:02,986
that array and actually goes to build out each page, it's going to run getstatic

353
00:21:03,018 --> 00:21:06,490
props for each one and it's going to pass in that exact same parameter,

354
00:21:06,570 --> 00:21:10,146
the post slug, so that we can then use it and pass it in

355
00:21:10,168 --> 00:21:14,066
as a dynamic value when we query our post, so that we can use the

356
00:21:14,088 --> 00:21:17,746
post to buy and we can use the slug as that option so

357
00:21:17,768 --> 00:21:21,222
that we can get that specific post. We can plug that in

358
00:21:21,276 --> 00:21:24,806
again as a prop into that react component. We're at the top of

359
00:21:24,828 --> 00:21:28,150
the page, we can see that we have those props and just like before,

360
00:21:28,220 --> 00:21:31,782
we're rendering it as a page. At that point it's just another react

361
00:21:31,846 --> 00:21:35,494
component where we're able to really do what we want. In this instance

362
00:21:35,542 --> 00:21:39,382
we're using that content and rendering in right inside as HTML.

363
00:21:39,446 --> 00:21:42,522
And if we look back at the browser, we can see that's exactly what's happening

364
00:21:42,576 --> 00:21:46,126
where we have all this data coming directly from WordPress that

365
00:21:46,148 --> 00:21:49,454
we were able to dynamically set up as a page. So the great thing about

366
00:21:49,492 --> 00:21:52,926
this is we can still leverage the great editing experience of

367
00:21:52,948 --> 00:21:57,214
WordPress. We can also take advantage of WP graphQl where we can easily

368
00:21:57,342 --> 00:22:01,086
build all these data relationships, whether we want to include

369
00:22:01,118 --> 00:22:04,818
the author or categories because it's a complex relationship and

370
00:22:04,904 --> 00:22:08,386
rest APIs really kind of struggle at that. But what we can do is

371
00:22:08,408 --> 00:22:11,510
we can take that all together, pull it into our next JS application

372
00:22:11,660 --> 00:22:14,914
and we can still build a site on the jamsack that's going to be performant

373
00:22:14,962 --> 00:22:18,662
cheap and it's going to be amazing. So next JS WordPress starter is available

374
00:22:18,716 --> 00:22:20,380
on GitHub for you to check out.

375
00:22:22,030 --> 00:22:25,386
So let's recap really quickly about what we actually achieved here.

376
00:22:25,488 --> 00:22:28,726
We reviewed our starting point, which was a basic WordPress instance.

377
00:22:28,838 --> 00:22:32,314
We set up our next JS WordPress starter. We even set up a second next

378
00:22:32,352 --> 00:22:35,680
JS site and we dug in a little bit about how that actually works.

379
00:22:36,610 --> 00:22:40,154
Now the goal here wasn't to get you all over to jump over to WordPress,

380
00:22:40,202 --> 00:22:43,806
but to show you the flexibility of it and why it's still compelling. Along with

381
00:22:43,828 --> 00:22:47,514
all the other amazing options out there, we can come up with some pretty powerful

382
00:22:47,562 --> 00:22:50,814
solutions that provide a great user experience while also making

383
00:22:50,852 --> 00:22:54,206
it performant and cheap. If you want to check out my

384
00:22:54,228 --> 00:22:57,618
work, next JS WordPress starter is completely open source on my GitHub

385
00:22:57,714 --> 00:23:00,646
and if you want to learn how to actually do this in practice, you can

386
00:23:00,668 --> 00:23:03,906
check out my course ecommerce on the jamstack on level up tutorials

387
00:23:03,938 --> 00:23:07,830
where I walk you through how to use headless WordPress with NextJs.

388
00:23:08,650 --> 00:23:11,270
And that's it. If you want to learn more or chat about the talk again,

389
00:23:11,340 --> 00:23:14,774
I'm available everywhere. Colby Fayock you can check out the

390
00:23:14,812 --> 00:23:18,358
resources Colby fayock.com 42 and

391
00:23:18,444 --> 00:23:18,900
thanks everybody.

