1
00:00:34,450 --> 00:00:38,182
My name is Ricardo Castro, and today we're going to talk about CI CD and

2
00:00:38,236 --> 00:00:41,766
build deploy automation. Let me start by thanking the organization for

3
00:00:41,788 --> 00:00:45,366
accepting my talk, and let's get on with it. So what do we have

4
00:00:45,388 --> 00:00:48,946
on the menu for today? So we're going to briefly talk about CI

5
00:00:48,978 --> 00:00:52,126
CD. What is CI? What is CD? We're going to

6
00:00:52,148 --> 00:00:55,726
talk about regular development workflow and what

7
00:00:55,748 --> 00:00:59,658
are some of the alternatives that we can find to actually employ CI

8
00:00:59,674 --> 00:01:03,086
CD within our organizations. Before I leave you, I will

9
00:01:03,188 --> 00:01:06,594
say, what's the problem with all of this and why

10
00:01:06,632 --> 00:01:10,114
I'm talking about this topic? And I will leave you guys

11
00:01:10,152 --> 00:01:14,626
with some reading material. If I was in

12
00:01:14,648 --> 00:01:19,114
front of you, I would ask the following question, who here is practicing CICD?

13
00:01:19,262 --> 00:01:22,754
And a lot of people will probably say, I am practicing CICD,

14
00:01:22,802 --> 00:01:26,214
but let's think a little bit about it and let's see if we are really

15
00:01:26,252 --> 00:01:29,898
doing CI CD or if we are only having

16
00:01:30,064 --> 00:01:34,326
build and deploy automation. Let's start from the beginning. What is CI?

17
00:01:34,518 --> 00:01:38,294
So according to Grady Brochure, CI is the practice

18
00:01:38,342 --> 00:01:41,622
of merging all the developers working copies to a shared

19
00:01:41,766 --> 00:01:45,790
mainline. Also, we can go into the Reddit definition and saying that

20
00:01:45,860 --> 00:01:49,786
a successful CI means that new code changes to an app are regularly

21
00:01:49,898 --> 00:01:53,566
built, tested and merged to a shared repository. It is

22
00:01:53,588 --> 00:01:56,734
a solution to the problem of having too many branches of an app

23
00:01:56,772 --> 00:02:00,034
in development at once that might conflict with another. And of course,

24
00:02:00,072 --> 00:02:03,506
my favorite one is from Dave Farley. So CI, it's the idea that

25
00:02:03,528 --> 00:02:07,138
we can do a better job if we maintain a clear picture of how changes

26
00:02:07,224 --> 00:02:10,806
work alongside everyone else as they progress. So why

27
00:02:10,828 --> 00:02:14,194
do we need CI? So we need CI to reduce risks.

28
00:02:14,242 --> 00:02:19,254
So when we introduce changes, we want those changes to be less

29
00:02:19,292 --> 00:02:23,014
risky as possible, when to decrease the number of bugs. So if we introduce

30
00:02:23,062 --> 00:02:26,714
less changes, we, in theory, have less bugs. Also,

31
00:02:26,752 --> 00:02:29,786
we want to minimize the integration issues. So if

32
00:02:29,808 --> 00:02:33,022
we have smaller changes, it means that those changes won't have as many

33
00:02:33,076 --> 00:02:36,366
integration issues as they could have with

34
00:02:36,468 --> 00:02:40,682
bigger changes. And of course, it's a precursor to CD CD meaning

35
00:02:40,746 --> 00:02:43,730
continuous delivery. So what is CD?

36
00:02:44,310 --> 00:02:47,502
CD can stand for continuous deployment or continuous delivery,

37
00:02:47,566 --> 00:02:51,474
and it's a software engineering approach in which software functionalities are

38
00:02:51,512 --> 00:02:55,554
delivered frequently. Again, I'll resort to Dave Farley and

39
00:02:55,752 --> 00:02:59,526
his definition of continuous delivery. So continuous delivery is the

40
00:02:59,548 --> 00:03:02,978
ability to get changes of all types that could include features,

41
00:03:03,074 --> 00:03:07,142
configuration changes, bug fixes or experiments into production or

42
00:03:07,196 --> 00:03:11,638
into the hands of our users. And that intends

43
00:03:11,654 --> 00:03:15,370
to be done safely and in a quick and sustainable way.

44
00:03:15,520 --> 00:03:19,254
So why do we need CD? So we want low risk

45
00:03:19,302 --> 00:03:23,034
releases. So by deploying frequently and putting frequently

46
00:03:23,082 --> 00:03:26,874
changes in front of our users, we have lower risk releases.

47
00:03:27,002 --> 00:03:30,826
We want fastest time to market, so we want to release features

48
00:03:30,858 --> 00:03:35,390
and want to release changes as fast as possible. By releasing smaller

49
00:03:36,130 --> 00:03:39,970
releases and more frequently we would

50
00:03:40,040 --> 00:03:43,918
achieve higher quality because we are continuously delivering and iterating.

51
00:03:44,014 --> 00:03:48,534
And of course we also incur in lower costs, better products

52
00:03:48,652 --> 00:03:52,242
and overall happier teams. So bundling

53
00:03:52,306 --> 00:03:56,098
this all together, what is CI CD again? Dave Farley

54
00:03:56,194 --> 00:04:00,146
how we build better software faster. But we can also resort

55
00:04:00,178 --> 00:04:04,550
to other definitions, for example from red app. So CI CD is a methodology

56
00:04:04,630 --> 00:04:08,166
to frequently deliver apps to customers by introducing automation

57
00:04:08,278 --> 00:04:11,962
into the stages of app development. Or we can go to the

58
00:04:12,096 --> 00:04:15,914
knowledge of all the Internet, which is Wikipedia. So in software engineering,

59
00:04:15,962 --> 00:04:19,614
CI CD is the combined practices of continuous integration and more

60
00:04:19,652 --> 00:04:23,086
often continuous delivery, and less often continuous deployment.

61
00:04:23,198 --> 00:04:27,198
Some people distinguish between continuous delivery, a continuous deployment.

62
00:04:27,294 --> 00:04:30,770
So let's go from the start. So continuous integration,

63
00:04:31,510 --> 00:04:34,994
frequently merging several small changes into a

64
00:04:35,032 --> 00:04:38,594
main branch. So continuous delivery, it's when teams produce

65
00:04:38,642 --> 00:04:42,582
software in short cycles with high speed and frequency, so that

66
00:04:42,636 --> 00:04:45,766
reliable software can be released at any time and with

67
00:04:45,788 --> 00:04:49,398
a simple and repeatable deployment process when deciding to deploy.

68
00:04:49,574 --> 00:04:53,078
And continuous deployment is when software functionality is rolled

69
00:04:53,094 --> 00:04:56,330
out completely automatically. In practice, some people

70
00:04:56,400 --> 00:05:00,678
use continuous delivery and continuous deployment interchangeably.

71
00:05:00,854 --> 00:05:04,414
But the idea here, if you were to separate between continuous delivery and

72
00:05:04,452 --> 00:05:08,494
continuous deployment, it means that continuous integration, you build your

73
00:05:08,532 --> 00:05:12,490
software, you test it, and you merge that into some form of main branch.

74
00:05:12,650 --> 00:05:16,434
With continuous delivery, you get into a point that

75
00:05:16,472 --> 00:05:20,462
the software is ready to be put in front of users. And continuous deployment

76
00:05:20,526 --> 00:05:23,666
is the process where you actually put software in front of

77
00:05:23,688 --> 00:05:26,894
your users. In practice, what does that mean? CI CD.

78
00:05:26,942 --> 00:05:31,494
So CI CD, there's not a strict rule, but as

79
00:05:31,532 --> 00:05:34,950
a rule of thumb, we should do CI CD at least once per day.

80
00:05:35,020 --> 00:05:38,486
This means that we should integrate code at least daily from all

81
00:05:38,508 --> 00:05:42,074
developers on a team, and it should be put in front of users at least

82
00:05:42,112 --> 00:05:45,722
daily. So Dave Farley says that

83
00:05:45,856 --> 00:05:48,966
CI, for example, should run under 5 minutes. So your CI

84
00:05:48,998 --> 00:05:52,800
process should run whatever it is, should run under 5 minutes.

85
00:05:53,410 --> 00:05:56,942
Charity major says that your whole process for CI CD should run under

86
00:05:56,996 --> 00:06:00,682
15 minutes. And according to the door report, elite performers

87
00:06:00,746 --> 00:06:03,906
perform Cit under 1 hour. So those are the teams that are

88
00:06:03,928 --> 00:06:07,620
really performing, and they have their whole process from

89
00:06:08,310 --> 00:06:12,254
having some form of code to be merged, tested and deployed,

90
00:06:12,302 --> 00:06:15,554
and that should be done in under an hour. So to

91
00:06:15,592 --> 00:06:19,154
refute what CI CD is we would

92
00:06:19,192 --> 00:06:23,126
need to contradict the Dori board, which is the best approach and

93
00:06:23,148 --> 00:06:27,762
the best way that we have at the moment. What is your development workflow?

94
00:06:27,826 --> 00:06:31,590
And if we were face to face, I would ask and get some feedback

95
00:06:31,670 --> 00:06:35,446
from all of you. But let's go into a typical workflow

96
00:06:35,638 --> 00:06:39,782
that exists in many organizations. So feature branches.

97
00:06:39,846 --> 00:06:43,226
So most companies have some form of main branch

98
00:06:43,258 --> 00:06:46,794
or master branch from which they do feature branches.

99
00:06:46,842 --> 00:06:50,542
So what is a feature branch? In theory, a feature branch is

100
00:06:50,596 --> 00:06:54,574
a branch where you develop an entire feature for your product. So my question

101
00:06:54,612 --> 00:06:58,178
would be, what would be the process? By using feature branches, you are

102
00:06:58,184 --> 00:07:02,226
probably doing pull requests, right? So you have

103
00:07:02,248 --> 00:07:05,930
a master branch, you create a feature branch to develop some kind of feature,

104
00:07:06,110 --> 00:07:10,070
when you're ready for that to be tested, that you

105
00:07:10,140 --> 00:07:13,190
open a pull request that someone will review,

106
00:07:13,340 --> 00:07:17,154
and then eventually it will be merged on a main branch.

107
00:07:17,282 --> 00:07:21,130
So pull requests are usually tied with code reviews.

108
00:07:21,470 --> 00:07:25,270
So code reviews are used to ensure,

109
00:07:25,350 --> 00:07:28,522
in theory, are used to ensure that code, that your code

110
00:07:28,576 --> 00:07:32,400
is actually doing what it is supposed to do and adhering to

111
00:07:32,850 --> 00:07:36,366
some rules that are pre established. So what

112
00:07:36,388 --> 00:07:40,254
is the number one reason for code reviews? Usually the

113
00:07:40,292 --> 00:07:44,420
code reviews are done. So to ensure that

114
00:07:45,430 --> 00:07:49,474
code don't like tests and

115
00:07:49,512 --> 00:07:53,182
that it follows all the best practices.

116
00:07:53,326 --> 00:07:57,314
The problem with this is that prs are slow. So you do

117
00:07:57,352 --> 00:08:00,914
a branch, you submit a pull request, you do a code review and it eventually

118
00:08:00,962 --> 00:08:04,354
gets merged. So let's just go through an example scenario.

119
00:08:04,402 --> 00:08:07,698
So you make a change, you submit a pr to be approved.

120
00:08:07,794 --> 00:08:11,366
It takes some time for someone to pick up that pull request and do

121
00:08:11,388 --> 00:08:14,586
the review. Let's say 10 minutes, 1 hour could be a week. Let's say,

122
00:08:14,608 --> 00:08:18,042
for example, 10 minutes. So someone stopped working.

123
00:08:18,096 --> 00:08:21,674
So you will be at least 10 minutes waiting for someone to review that

124
00:08:21,712 --> 00:08:25,518
pr. Then it needs to be reviewed. If everything is okay, you'll get a

125
00:08:25,524 --> 00:08:29,594
thumbs up. If not, you'll have to go back and forth with the reviewer

126
00:08:29,642 --> 00:08:33,310
to have your changes up to the standard theyre supposed to be.

127
00:08:33,460 --> 00:08:37,374
And then you'll have to be waiting while this iteration is going.

128
00:08:37,492 --> 00:08:40,702
This means that CI, so if we want to follow theyre CI practices,

129
00:08:40,766 --> 00:08:44,274
we need to do this multiple times a day. So let's imagine a team

130
00:08:44,312 --> 00:08:47,470
of four, five, six, whatever number of engineers,

131
00:08:47,630 --> 00:08:50,994
everyone, to follow this CI CD mindset.

132
00:08:51,042 --> 00:08:55,014
Everyone would have to do this multiple times a day. So people will

133
00:08:55,052 --> 00:08:58,446
keep getting interrupted to do, for example, course reviews on prs.

134
00:08:58,578 --> 00:09:01,526
How often do you really want to be interrupted daily?

135
00:09:01,638 --> 00:09:05,414
And how many reviews

136
00:09:05,462 --> 00:09:09,178
can you actually do per day. And for CIT to work again,

137
00:09:09,264 --> 00:09:12,638
you need to do at least one review per change per day.

138
00:09:12,804 --> 00:09:16,126
So what we can do is to bad changes, which means no

139
00:09:16,148 --> 00:09:20,670
CI CD, it's also async, and there's no two way communication.

140
00:09:21,090 --> 00:09:25,002
So what are some alternatives to this? So an alternative

141
00:09:25,066 --> 00:09:28,226
is to use trunk based development. This means that you

142
00:09:28,248 --> 00:09:31,454
can submit directly to a master or trunk or a main branch,

143
00:09:31,502 --> 00:09:35,102
or you can create short lived branches and that can be merged

144
00:09:35,166 --> 00:09:38,866
directly, directly to a main branch.

145
00:09:38,978 --> 00:09:42,390
So the data from the state of DevOps report is clear.

146
00:09:42,540 --> 00:09:46,354
Trunk based development predicts higher throughput and better stability,

147
00:09:46,482 --> 00:09:50,246
and even higher job satisfaction and lower rates of burnout. And this comes

148
00:09:50,268 --> 00:09:54,518
from the DevOps Handbook. You could be asking yourself, yeah, but with PRS,

149
00:09:54,534 --> 00:09:58,134
we have code reviews. We can also do that with trunk based development.

150
00:09:58,262 --> 00:10:02,406
You can do, for example, pair programming, right? So the idea of pair programming

151
00:10:02,438 --> 00:10:05,790
is that, for example, two engineers are working on the same piece of code,

152
00:10:05,860 --> 00:10:09,278
and they are reviewing while one is writing and the

153
00:10:09,284 --> 00:10:11,760
other is reviewing and they are discussing the changes.

154
00:10:12,130 --> 00:10:15,390
But pair programming usually has some kind of criticism.

155
00:10:15,730 --> 00:10:19,602
Dismissify some of that criticism. So the first criticism is

156
00:10:19,656 --> 00:10:23,346
inefficiency. So it means that two devs working on the same code is

157
00:10:23,368 --> 00:10:26,450
wasteful resource. In practice, that's false.

158
00:10:26,530 --> 00:10:30,242
And we have evidence that can be found in the case for collaborative

159
00:10:30,306 --> 00:10:33,190
programming by John Nosek.

160
00:10:33,690 --> 00:10:37,286
Another criticism, it's that it is uncomfortable. So most

161
00:10:37,308 --> 00:10:40,758
people who try find out in reality that it's

162
00:10:40,774 --> 00:10:44,394
not the case, but this one is down to personal preference. The other

163
00:10:44,432 --> 00:10:48,234
criticism is lack of focus and

164
00:10:48,272 --> 00:10:52,086
intrusion, which is also false. Pairs are usually able

165
00:10:52,128 --> 00:10:55,146
to sustain a better focus than an individual alone,

166
00:10:55,258 --> 00:10:59,226
and then we can see evidence of that on a comparison

167
00:10:59,258 --> 00:11:02,960
of solo and pair programming in terms of flow experience,

168
00:11:03,350 --> 00:11:07,326
coding quality, and coding achievement. In the Journal of Education and Computing

169
00:11:07,358 --> 00:11:10,978
Research. The other criticism that the

170
00:11:10,984 --> 00:11:14,722
pair programming has is the fact now that we work

171
00:11:14,776 --> 00:11:18,162
a lot remotely, that we will have to, people have to be working

172
00:11:18,216 --> 00:11:21,894
remotely on pair programming, and the problem might

173
00:11:21,932 --> 00:11:25,446
be, for example, different time zones. So we can try and find a

174
00:11:25,468 --> 00:11:29,830
middle ground here. So I stole the fluid pull request

175
00:11:30,750 --> 00:11:34,602
name from my colleague Marcelo, but this idea

176
00:11:34,656 --> 00:11:38,330
is something that I've been doing for some years now, and it's the idea

177
00:11:38,400 --> 00:11:41,946
that we have some kind of a middle ground between a full pull request and

178
00:11:41,968 --> 00:11:45,726
a trunk based pull request. This means that you'll have policy

179
00:11:45,908 --> 00:11:49,646
specifications so you can specify which changes,

180
00:11:49,748 --> 00:11:53,514
which changes are low risk and can be automation

181
00:11:53,562 --> 00:11:56,994
merged, and who are the best people to review these

182
00:11:57,032 --> 00:12:00,626
changes. And all of those are policies that are pre established before

183
00:12:00,808 --> 00:12:04,514
you start developing. So you need to trust developers to

184
00:12:04,552 --> 00:12:07,782
merge before code reviews are done. And you need to keep track

185
00:12:07,836 --> 00:12:10,854
of those pull requests that should be reviewed after much.

186
00:12:11,052 --> 00:12:14,646
So the idea here is

187
00:12:14,668 --> 00:12:18,486
that you have code reviews is that

188
00:12:18,508 --> 00:12:21,914
you have some sort of policy which can tell you,

189
00:12:21,952 --> 00:12:25,226
for example, if this change needs to be reviewed by someone or

190
00:12:25,248 --> 00:12:29,500
can be automatically merged. For example, you can have, for example, changes to

191
00:12:30,110 --> 00:12:33,310
some sort of documentation automatically merged. But some

192
00:12:33,380 --> 00:12:37,374
changes, you can flag them as critical, for example, and someone needs

193
00:12:37,412 --> 00:12:41,534
to be assigned for review. And that can also be a policy

194
00:12:41,652 --> 00:12:44,906
that is specified and a specific person

195
00:12:44,948 --> 00:12:49,230
can be assigned to that review. So we've been talking a lot about CI CD,

196
00:12:49,310 --> 00:12:52,994
and if you've noticed, I haven't spoken so far of

197
00:12:53,032 --> 00:12:57,494
any tool, any pipeline, nothing. So I haven't talked about the

198
00:12:57,532 --> 00:13:00,710
well established build service

199
00:13:00,780 --> 00:13:04,070
like Jenkins or Azure DevOps or other

200
00:13:04,140 --> 00:13:07,746
types of tools, because CI

201
00:13:07,778 --> 00:13:11,462
CD is not about a tool, it's about a practice.

202
00:13:11,606 --> 00:13:15,770
So stealing from Simon Sinek,

203
00:13:17,230 --> 00:13:20,666
the golden circle so the why of

204
00:13:20,688 --> 00:13:23,850
CICD is for us to build better software.

205
00:13:24,010 --> 00:13:27,626
So how can we do that? By having faster feedback.

206
00:13:27,738 --> 00:13:31,354
And what can we do to achieve faster feedback is to have build servers,

207
00:13:31,402 --> 00:13:34,718
pipelines, et cetera. But the idea here is that

208
00:13:34,884 --> 00:13:38,930
just because we have build and deploy automation, it doesn't mean that we are doing

209
00:13:39,000 --> 00:13:42,514
CI CD. So we need tools and automation to do this

210
00:13:42,552 --> 00:13:45,966
at scale, of course. So speed reduced efforts,

211
00:13:46,078 --> 00:13:50,082
but theyre are helped by these tools, pipelines and build servers,

212
00:13:50,146 --> 00:13:53,750
but theyre are not required. So why do people usually stop

213
00:13:53,820 --> 00:13:57,366
here? Because usually some automation in and on itself is

214
00:13:57,388 --> 00:14:00,618
already very valuable. So you get the speed of just having

215
00:14:00,704 --> 00:14:04,374
stuff automated. Another reason is because people are fearful

216
00:14:04,422 --> 00:14:08,250
and they lack some trust on other people.

217
00:14:08,320 --> 00:14:11,546
So this means that we actually have to enforce some

218
00:14:11,568 --> 00:14:15,182
kind of rules. And of course it also needs some investment. You have to build

219
00:14:15,236 --> 00:14:18,398
the tools from the ground up to support all

220
00:14:18,404 --> 00:14:21,978
of this. But in essence, what CI CD tries

221
00:14:21,994 --> 00:14:25,106
to achieve is this, shorter development cycles. We want to

222
00:14:25,128 --> 00:14:29,218
increase security, we want compliance and development process in our whole process,

223
00:14:29,304 --> 00:14:33,138
and we want higher quality code. So before I leave you,

224
00:14:33,304 --> 00:14:36,550
I'll leave you guys with some reading material. So of course,

225
00:14:36,620 --> 00:14:40,166
two of the bibles in continuous integration and continuous delivery are

226
00:14:40,188 --> 00:14:42,920
the continuous delivery and continuous integration book.

227
00:14:44,170 --> 00:14:47,622
Regarding the Dora report, you have the very good

228
00:14:47,676 --> 00:14:50,770
accelerate book which describes the whole scientific process that

229
00:14:50,780 --> 00:14:54,074
is behind the generation of the Dora report.

230
00:14:54,192 --> 00:14:57,674
And like I said before, the term of fluid pull requests I told

231
00:14:57,712 --> 00:15:01,902
from my colleague Marcelo, but I'll leave you here with a link for his

232
00:15:02,036 --> 00:15:05,326
blog post from his company and a talk that he

233
00:15:05,348 --> 00:15:10,394
gave at the DevOps portal and DevOps tools portal meetup

234
00:15:10,442 --> 00:15:13,662
about fluid pull requests, and I highly advise for you guys

235
00:15:13,796 --> 00:15:17,406
to see that talk and have a better sense of what fluid pull requests

236
00:15:17,438 --> 00:15:20,754
could be. So in summary, so we talked about what is

237
00:15:20,792 --> 00:15:24,514
CI and what is CD. So CI is the idea that we

238
00:15:24,552 --> 00:15:28,254
merge changes from all the engineers into some sort of

239
00:15:28,392 --> 00:15:32,390
branch, at least daily. And CD is the process

240
00:15:32,460 --> 00:15:36,310
that we get those changes in front of our users and iterate quickly. The usually

241
00:15:36,380 --> 00:15:40,294
development workflow in most companies uses feature branches.

242
00:15:40,342 --> 00:15:44,794
So we have some sort of main branch, we perform some

243
00:15:44,832 --> 00:15:48,166
form of feature branch, we develop our entire feature. We submit

244
00:15:48,198 --> 00:15:51,406
a pull request which is reviewed and then eventually gets merged and

245
00:15:51,428 --> 00:15:55,194
deployed. The problem with this is that feature branches are usually long lived,

246
00:15:55,242 --> 00:15:59,470
which means that it's very hard to do deployment

247
00:16:00,050 --> 00:16:03,934
CI CD. So do that daily with

248
00:16:03,972 --> 00:16:07,058
feature branches. So what can we do? We can use, for example,

249
00:16:07,144 --> 00:16:11,106
trunk based development, which is the idea that we create short lived branches and

250
00:16:11,128 --> 00:16:14,558
continuously merge them and deploy them to production.

251
00:16:14,734 --> 00:16:18,354
To ensure that we have code reviews, we can use pair

252
00:16:18,402 --> 00:16:21,606
programming to actually continuously review the

253
00:16:21,628 --> 00:16:25,414
code while we develop. Or we can use some middle ground between full

254
00:16:25,452 --> 00:16:29,350
pull requests and pair programming by using the concept

255
00:16:29,850 --> 00:16:33,370
of fluid pull requests. So what's the problem with all of this?

256
00:16:33,440 --> 00:16:36,618
The problem with all of this is that usually people employ some kind of

257
00:16:36,624 --> 00:16:40,506
tool or some kind of pipeline and assume they're using CI CD. But as we

258
00:16:40,528 --> 00:16:43,862
see in practice, we haven't talked about any tool

259
00:16:43,936 --> 00:16:47,294
or any pipelines in specific, and we only talk about the philosophy build

260
00:16:47,332 --> 00:16:50,714
in between CI CD. So CI CD is a lot more powerful

261
00:16:50,762 --> 00:16:55,200
than just having build and deploy automation. And before

262
00:16:56,370 --> 00:16:59,726
I point you guys to some reading material that

263
00:16:59,748 --> 00:17:03,406
would be useful to expand on these topics. And that's all from

264
00:17:03,428 --> 00:17:06,040
my part. I hope you guys enjoy enjoyed this talk.

265
00:17:06,570 --> 00:17:10,246
I hope you enjoy the conference. Don't hesitate in contacting me

266
00:17:10,348 --> 00:17:13,686
through social. Thank you very much for attending my talk and

267
00:17:13,708 --> 00:17:14,450
have a great conference.

