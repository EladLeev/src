1
00:00:17,610 --> 00:00:21,614
Hello everyone. So welcome to Conf fourty two.

2
00:00:21,812 --> 00:00:25,366
And today we will talk about

3
00:00:25,388 --> 00:00:29,014
the accessibility in Android and we

4
00:00:29,052 --> 00:00:32,310
will see how we can implementing it and how we can test. But before

5
00:00:32,380 --> 00:00:35,714
deep dive into the concepts and slides,

6
00:00:35,842 --> 00:00:39,270
I would like to introduce myself. My name is Nav, I'm from

7
00:00:39,340 --> 00:00:42,702
Montreal. I'm software engineer at Manulife,

8
00:00:42,866 --> 00:00:46,358
also GDG organizer at GDG Montreal

9
00:00:46,454 --> 00:00:49,290
and Google developer expert for Android.

10
00:00:49,790 --> 00:00:53,854
And also I write medium articles. You can

11
00:00:54,052 --> 00:00:57,662
find me on different social channels via my handle which is

12
00:00:57,716 --> 00:01:01,982
now crazy dad. So stay

13
00:01:02,036 --> 00:01:05,474
in touch there and if you have any questions you can just ask

14
00:01:05,512 --> 00:01:08,942
me on any of the social channels like Twitter or LinkedIn,

15
00:01:09,006 --> 00:01:12,546
wherever you feel comfortable. So let's get started with the

16
00:01:12,568 --> 00:01:13,650
today's topic.

17
00:01:15,690 --> 00:01:19,542
The first thing is what is accessibility and why

18
00:01:19,596 --> 00:01:22,758
it's important. So when we talk about the

19
00:01:22,764 --> 00:01:26,054
accessibility, it's not just about the people,

20
00:01:26,172 --> 00:01:27,670
those who have a disability,

21
00:01:29,050 --> 00:01:33,490
it's actually extending your reach of your applications,

22
00:01:33,650 --> 00:01:37,058
how user can interact with your applications, like providing

23
00:01:37,154 --> 00:01:40,366
more than one source, more than one option to

24
00:01:40,388 --> 00:01:44,138
the end user. There is not just a one single source

25
00:01:44,314 --> 00:01:48,126
that user can use to use your application, for example, just a

26
00:01:48,148 --> 00:01:51,342
touch. So in general terms,

27
00:01:51,396 --> 00:01:55,186
we can say that accessibility is to making sure that everyone who

28
00:01:55,208 --> 00:01:59,442
is having any kind of disabilities, like maybe

29
00:01:59,496 --> 00:02:03,214
having a colorblindness or they have any other physical

30
00:02:03,262 --> 00:02:07,750
impairments, to make sure that they can also access applications.

31
00:02:09,290 --> 00:02:12,374
We consider this topic as we talk

32
00:02:12,412 --> 00:02:15,974
about this and we will see how we can make

33
00:02:16,012 --> 00:02:20,426
our applications accessible for those people who have these kind of problems

34
00:02:20,528 --> 00:02:23,834
or situations. So we will see

35
00:02:23,872 --> 00:02:25,850
now the impact of accessibility.

36
00:02:26,830 --> 00:02:30,426
So the first thing is, as I earlier told you, it's not

37
00:02:30,448 --> 00:02:34,142
just about supporting the people who, those who have disability. It also

38
00:02:34,196 --> 00:02:37,886
helps to increase your application reach. So according to

39
00:02:37,908 --> 00:02:41,402
the World bank, it's like 15% of the world population,

40
00:02:41,466 --> 00:02:45,106
they have some sort of disabilities. So imagine like

41
00:02:45,128 --> 00:02:49,442
if you provide a sport for

42
00:02:49,496 --> 00:02:52,942
accessibility in your applications, like your userinterface are accessible,

43
00:02:53,006 --> 00:02:56,286
then you will also code that huge users user

44
00:02:56,318 --> 00:02:59,880
base which you might didn't consider before.

45
00:03:01,530 --> 00:03:05,186
The second thing is the apps versatility. So it's

46
00:03:05,218 --> 00:03:09,766
basically providing more base,

47
00:03:09,868 --> 00:03:13,914
how user can interact with those applications. And as

48
00:03:13,952 --> 00:03:16,170
I already told, it's not just about disability,

49
00:03:18,270 --> 00:03:21,040
it also covers the versatility part of your application.

50
00:03:22,530 --> 00:03:25,726
So now we will see how Android enables accessibility. So we

51
00:03:25,748 --> 00:03:29,326
know the general definition of accessibility and why

52
00:03:29,348 --> 00:03:32,886
it's important. And if we enable the accessibility

53
00:03:32,938 --> 00:03:36,642
in our applications, it also helps the people, those who don't actually

54
00:03:36,696 --> 00:03:39,460
have any kind of disability issues.

55
00:03:40,470 --> 00:03:44,302
So one of the main ways how Android enables accessibility

56
00:03:44,366 --> 00:03:48,202
is by allowing users to hear the spoken feeder.

57
00:03:48,286 --> 00:03:52,200
So whatever is like for example if you open any application,

58
00:03:52,570 --> 00:03:55,560
so whatever the content is on the screen,

59
00:03:56,570 --> 00:04:00,390
with the help of the tools like talk back or speech recognition

60
00:04:01,530 --> 00:04:05,050
screen readers, Android will

61
00:04:05,120 --> 00:04:08,586
speak for you like whatever the content is currently visible on the

62
00:04:08,608 --> 00:04:11,966
screen. There are other ways but that

63
00:04:11,988 --> 00:04:15,630
was the major way like the spoken feedback and mostly used

64
00:04:15,780 --> 00:04:19,054
so far as far as I have seen

65
00:04:19,092 --> 00:04:22,490
that and I have also tested with those tools

66
00:04:22,570 --> 00:04:26,546
and they are worked pretty well. So now we will see how

67
00:04:26,568 --> 00:04:29,746
we can make our applications more accessible and to

68
00:04:29,768 --> 00:04:33,650
make sure that there is no any issues with the user interfaces.

69
00:04:34,970 --> 00:04:40,358
The first thing is the task flows. So this

70
00:04:40,364 --> 00:04:43,314
is not basically the designing of your userinterface,

71
00:04:43,362 --> 00:04:47,174
it's basically the

72
00:04:47,212 --> 00:04:51,114
process of completing one particular task in your application.

73
00:04:51,232 --> 00:04:54,662
For example forbid password or reset password.

74
00:04:54,806 --> 00:04:58,474
And we need to define the very well

75
00:04:58,512 --> 00:05:03,006
defined clear task flows so that user can easily able

76
00:05:03,028 --> 00:05:06,990
to find those steps and easily able to navigate

77
00:05:07,570 --> 00:05:11,166
using those steps. For example, if they want to reset their

78
00:05:11,188 --> 00:05:15,034
password, it might be directly visible under the menu.

79
00:05:15,162 --> 00:05:18,302
But if it's under five steps

80
00:05:18,446 --> 00:05:22,162
under the hood like you first go to the drawer, then you select some options

81
00:05:22,216 --> 00:05:25,570
like settings, then you go to the profile, then you go to

82
00:05:25,720 --> 00:05:29,494
those kind of options like there are five, six steps. Then user might feel not

83
00:05:29,532 --> 00:05:33,574
comfortable using your application and they might just leave your application and

84
00:05:33,612 --> 00:05:37,862
also give you a bad rating on App Store. So whenever you define figure

85
00:05:37,916 --> 00:05:41,626
out the tasks, important tasks in your application and then make

86
00:05:41,648 --> 00:05:44,806
sure that you have the minimal navigation steps so that user

87
00:05:44,838 --> 00:05:48,614
can easily perform those tasks without wasting

88
00:05:48,742 --> 00:05:52,878
too much time. The second is the action target size.

89
00:05:53,044 --> 00:05:56,974
So sometimes you might see like

90
00:05:57,012 --> 00:05:59,920
the applications, they have a fancy design.

91
00:06:00,610 --> 00:06:04,446
But the issue is with those fancy designs that they

92
00:06:04,468 --> 00:06:07,714
didn't cover the clickable size like the touch target size of those

93
00:06:07,752 --> 00:06:11,186
particular things. Like if you designed any custom view and you

94
00:06:11,208 --> 00:06:15,138
set it, let's say you would write to 2020 DP. That means

95
00:06:15,304 --> 00:06:18,818
it looks like very little icon on your application and when user

96
00:06:18,834 --> 00:06:22,326
tries to perform click on that, it will be really hard or challenging for the

97
00:06:22,348 --> 00:06:26,150
end user. So the thing is like

98
00:06:26,220 --> 00:06:30,422
how big? So if you know that the material

99
00:06:30,486 --> 00:06:34,346
design team, they provided the guidelines for Android design, not just for

100
00:06:34,448 --> 00:06:38,394
Android UI designing, UI development, but also for

101
00:06:38,512 --> 00:06:41,786
our iOS. So the minimum test target size should be

102
00:06:41,808 --> 00:06:45,710
like 48 tapes. So whenever you design your custom

103
00:06:45,780 --> 00:06:48,974
views or any other views, try to make sure

104
00:06:49,012 --> 00:06:52,658
that if there is a clickable action, you need to make

105
00:06:52,664 --> 00:06:56,340
sure that they are having the minimum touch target size.

106
00:06:57,510 --> 00:07:01,166
Most of the elements, for example image buttons

107
00:07:01,198 --> 00:07:05,694
or buttons, they already have that minimum touch target size defined.

108
00:07:05,822 --> 00:07:08,518
So you don't need to worry about in that case if you are using the

109
00:07:08,524 --> 00:07:11,846
material compose in your application. But if you are used as

110
00:07:11,868 --> 00:07:15,494
I told you, if you are developing something custom, make sure that those

111
00:07:15,532 --> 00:07:19,066
views of those compose on the interface are accessible by

112
00:07:19,088 --> 00:07:22,906
the end user. Next one

113
00:07:22,928 --> 00:07:27,194
is the labeling of interface controls. Sometimes we design like sometimes we

114
00:07:27,232 --> 00:07:30,826
have components in our application or in our user interface which is

115
00:07:30,848 --> 00:07:34,266
like just for decorative purposes like for images.

116
00:07:34,458 --> 00:07:37,886
And sometimes we are also using images for providing some sort

117
00:07:37,908 --> 00:07:41,514
of information or using images for performing some actions.

118
00:07:41,642 --> 00:07:45,046
So in that case try to make sure that you add the labels

119
00:07:45,098 --> 00:07:48,802
to those images so that when user using the tools like talk back or screen

120
00:07:48,856 --> 00:07:52,770
readers, they will understand what actually that particular component means

121
00:07:52,840 --> 00:07:56,834
or what actually action that particular component

122
00:07:56,882 --> 00:08:00,406
is associated to. So that

123
00:08:00,428 --> 00:08:03,442
is the labeling for your interfaces.

124
00:08:03,586 --> 00:08:07,422
I will cover in the later part how we can add labels to the UI

125
00:08:07,506 --> 00:08:11,574
compose and the fourth

126
00:08:11,622 --> 00:08:17,674
one is enabling the focus based navigation. So if

127
00:08:17,712 --> 00:08:21,706
your user they are using tools

128
00:08:21,738 --> 00:08:25,306
or input sources like dpads or craft balls

129
00:08:25,338 --> 00:08:28,846
or keyboards, then make sure that you also

130
00:08:28,948 --> 00:08:32,754
provide the support for the purpose based navigation. That means if

131
00:08:32,792 --> 00:08:36,434
they are using arrows like move up left down right.

132
00:08:36,552 --> 00:08:39,982
So try to define your navigation by default,

133
00:08:40,046 --> 00:08:43,774
how XML layout is processed by the readers

134
00:08:43,822 --> 00:08:47,478
or the screen readers of

135
00:08:47,484 --> 00:08:50,760
the top right is like the order of how you have

136
00:08:51,370 --> 00:08:55,110
defined the elements in your XML. So if you have four elements

137
00:08:56,170 --> 00:08:59,526
they will be ordered like 1234. So if you go to

138
00:08:59,548 --> 00:09:02,602
that using that bottom like that down

139
00:09:02,656 --> 00:09:06,186
direction, so it will be like going from one to three, four. But if you

140
00:09:06,208 --> 00:09:09,834
have some sort of custom navigation then you need to make sure

141
00:09:09,872 --> 00:09:13,706
that it will be properly followed, properly defined

142
00:09:13,738 --> 00:09:17,066
in your XML. So that when user tries to use these kind of tools

143
00:09:17,098 --> 00:09:21,150
like keywords or dpads, the navigation is working as expected.

144
00:09:21,730 --> 00:09:25,518
So those are the basic parts of the navigation

145
00:09:25,614 --> 00:09:29,918
or accessibility or what are the important concepts

146
00:09:30,014 --> 00:09:33,666
that we need to be taken care when

147
00:09:33,688 --> 00:09:34,850
we are developing.

148
00:09:36,810 --> 00:09:40,230
And now we will see some little

149
00:09:40,380 --> 00:09:44,594
implementation like some properties that you can add to your XML

150
00:09:44,642 --> 00:09:49,094
components, for example to image view for

151
00:09:49,132 --> 00:09:52,614
your minimum size, those kind of properties. We will

152
00:09:52,652 --> 00:09:56,274
see how we can add those properties to our XML

153
00:09:56,322 --> 00:09:59,400
components to make sure that our application is accessible for everyone.

154
00:10:00,370 --> 00:10:03,934
It so the first thing is the image button

155
00:10:04,052 --> 00:10:07,806
here. But as I told you before, the material compose will

156
00:10:07,828 --> 00:10:11,422
by default have the minimum touch target size defined for all the

157
00:10:11,556 --> 00:10:17,330
components that are clickable. For example, here is the image button in

158
00:10:17,400 --> 00:10:20,974
this example I have added

159
00:10:21,022 --> 00:10:24,370
the third line. If you see it's Android content description

160
00:10:24,710 --> 00:10:29,126
that is for the label. So if

161
00:10:29,148 --> 00:10:32,786
you miss the content description for your decor, if you are using the images

162
00:10:32,818 --> 00:10:36,646
only for decorating purposes, you can omit this and you can add the

163
00:10:36,668 --> 00:10:40,454
property called important food accessibility and just set

164
00:10:40,492 --> 00:10:43,898
it to know. But if your

165
00:10:43,984 --> 00:10:47,834
image is for some sort of action then you must add

166
00:10:47,872 --> 00:10:52,270
a content description and that you can refer to the string resources.

167
00:10:54,130 --> 00:10:57,694
And here it's the image button but it would be if

168
00:10:57,732 --> 00:11:00,986
the content description make more sense when you are using the image

169
00:11:01,018 --> 00:11:04,626
views. And now the next example is

170
00:11:04,648 --> 00:11:09,282
the text view. And here I have added the two

171
00:11:09,336 --> 00:11:14,130
properties. First one is the foxable. So foxable means like if

172
00:11:14,200 --> 00:11:18,486
when user is using any tools like screen readers this

173
00:11:18,588 --> 00:11:22,022
compose should be processed or not by that

174
00:11:22,076 --> 00:11:25,106
tool. So setting it to focusable false.

175
00:11:25,138 --> 00:11:28,330
That means the talkback or screen reader will skip this.

176
00:11:28,480 --> 00:11:32,694
And the next property is the screen reader focusable

177
00:11:32,822 --> 00:11:36,410
and it's only available since Android version P.

178
00:11:36,480 --> 00:11:40,166
So that's why I added the last line which says tools

179
00:11:40,198 --> 00:11:44,106
target APiP just to ignore

180
00:11:44,138 --> 00:11:48,400
the warnings in your XML designs when you're developing your application.

181
00:11:48,930 --> 00:11:52,714
And on the next example is the heading.

182
00:11:52,762 --> 00:11:56,286
So sometimes if you see in the web navigation, like in the web

183
00:11:56,388 --> 00:11:59,646
websites like we have the headings and paragraphs,

184
00:11:59,678 --> 00:12:03,326
headings and paragraphs automated to those headings.

185
00:12:03,438 --> 00:12:07,314
So if you have some sort of designs in your

186
00:12:07,352 --> 00:12:11,426
application, like sometimes we have terms and conditions that have

187
00:12:11,448 --> 00:12:15,334
like we have heading and then we have a long long paragraphs underneath that.

188
00:12:15,372 --> 00:12:19,420
And then we have again some sort of headings. So if you want to process

189
00:12:20,430 --> 00:12:23,882
heading based, if you want to score heading based navigation, so user can

190
00:12:23,936 --> 00:12:28,182
move easily between those components, you can add the property called accessibility

191
00:12:28,246 --> 00:12:32,102
heading and it's only available since Android version

192
00:12:32,166 --> 00:12:35,274
P. So here is the

193
00:12:35,312 --> 00:12:38,766
navigation, the sample of the focus based navigation. So there are a

194
00:12:38,788 --> 00:12:41,998
couple of properties that you can add to

195
00:12:42,004 --> 00:12:47,966
your components as I told you, like by default tools

196
00:12:47,998 --> 00:12:51,746
they process your components as they already in the xml. So if

197
00:12:51,848 --> 00:12:55,090
you see here it's there four. So it will be going from text

198
00:12:55,160 --> 00:12:58,502
view hello world, hello World two hello world three

199
00:12:58,636 --> 00:13:02,470
and then the image. But if you want to do something custom,

200
00:13:02,620 --> 00:13:06,246
you can add two properties called like next focus forward,

201
00:13:06,428 --> 00:13:10,106
next focus left, right, I will show you

202
00:13:10,128 --> 00:13:13,722
later in the Android studio. What are the other options

203
00:13:13,776 --> 00:13:17,130
available? But here I only added the next focus forward.

204
00:13:17,280 --> 00:13:20,666
So from the first text view like tv hello World, it will

205
00:13:20,688 --> 00:13:24,734
go to the third text view and then it go back

206
00:13:24,772 --> 00:13:27,822
to the second text view and from there it will go to the

207
00:13:27,956 --> 00:13:32,106
image view. And if you see in the last image

208
00:13:32,138 --> 00:13:35,426
view tag, I added the content description and set it to a

209
00:13:35,448 --> 00:13:38,706
null. This is also other option if you

210
00:13:38,728 --> 00:13:41,858
don't want to set important for accessibility to know

211
00:13:41,944 --> 00:13:46,934
your image views and what it tells to

212
00:13:46,972 --> 00:13:52,722
the tools or to the accessibility

213
00:13:52,786 --> 00:13:55,874
related tools like talk about that. This image is only for decorative

214
00:13:55,922 --> 00:14:00,278
purpose so it will not be processed by the accessibility

215
00:14:00,454 --> 00:14:04,330
like those tools. On the right hand side

216
00:14:04,400 --> 00:14:08,310
I have the example for labeling your components.

217
00:14:08,470 --> 00:14:11,718
So this is a very old example I can say

218
00:14:11,744 --> 00:14:15,226
because if you are familiar with the material design, they have new components

219
00:14:15,258 --> 00:14:19,406
like text input layout where you can add labels to

220
00:14:19,428 --> 00:14:23,226
that compose and that will be behaving as a label

221
00:14:23,258 --> 00:14:26,914
for those. But if you want to add up, if you are still having some

222
00:14:26,952 --> 00:14:30,546
old code bases where you have added text in

223
00:14:30,568 --> 00:14:33,806
your layout files, you can attach the labels to those edit

224
00:14:33,838 --> 00:14:37,698
text using the text views and set the property

225
00:14:37,784 --> 00:14:41,014
label for your text view. So in this case if you see

226
00:14:41,052 --> 00:14:44,582
I have username entry and then I set the label for that

227
00:14:44,636 --> 00:14:48,342
edit text using the username label text view and then just

228
00:14:48,396 --> 00:14:50,620
defining the id of my edit text.

229
00:14:52,670 --> 00:14:56,390
The next example is for accessibility library

230
00:14:56,470 --> 00:15:00,154
and it's very important one I can say. So some

231
00:15:00,192 --> 00:15:04,154
of most. Sometimes if you're familiar, let's say for the login

232
00:15:04,202 --> 00:15:07,310
flow, when login fails we show random message,

233
00:15:07,380 --> 00:15:10,618
right? Like a message which says like login failed

234
00:15:10,634 --> 00:15:14,546
or you have entered wrong credentials, whatever. So in that case

235
00:15:14,648 --> 00:15:17,682
that error message is not always visible on screen,

236
00:15:17,736 --> 00:15:21,362
right? It's like a conditional. So if that condition is true,

237
00:15:21,496 --> 00:15:24,802
then we show that message. So here

238
00:15:24,856 --> 00:15:28,386
using that accessibility live vision property, what we are telling

239
00:15:28,418 --> 00:15:32,774
to the tool like topic that how

240
00:15:32,812 --> 00:15:36,342
that tools is going to process that particular view. In this case,

241
00:15:36,396 --> 00:15:39,974
which is text view. And there are three property like

242
00:15:40,012 --> 00:15:43,914
three ways it is assertive, non purple assertive means

243
00:15:43,952 --> 00:15:47,740
like if at particular given time when this particular view

244
00:15:48,510 --> 00:15:50,620
comes or shows up on the screen,

245
00:15:51,250 --> 00:15:55,086
talkback will stop whatever it's processing and it

246
00:15:55,108 --> 00:15:58,170
will process this particular view immediately.

247
00:15:58,330 --> 00:16:01,774
And none is the default behavior. And the polite one is like whatever is

248
00:16:01,812 --> 00:16:05,522
the tools processing. Now just finish that and then after

249
00:16:05,576 --> 00:16:09,394
that that will process this

250
00:16:09,432 --> 00:16:11,650
particular compose.

251
00:16:12,950 --> 00:16:17,302
And the next example is about grouping of

252
00:16:17,436 --> 00:16:20,646
layer components. So sometimes if

253
00:16:20,668 --> 00:16:24,102
you see for example, we have a list of items. For example,

254
00:16:24,156 --> 00:16:27,654
let's say we have a list of contacts and in each

255
00:16:27,692 --> 00:16:30,380
item we have a person's name, last name,

256
00:16:31,070 --> 00:16:34,982
there might be a date of birth, or maybe their sex or gender,

257
00:16:35,046 --> 00:16:38,634
whatever different properties are there and we don't want to

258
00:16:38,672 --> 00:16:42,682
process all those items like one by one by accessibility tools

259
00:16:42,746 --> 00:16:46,414
or the screen reader tools. So in that case we can group them

260
00:16:46,452 --> 00:16:50,382
together using the property called screen

261
00:16:50,436 --> 00:16:53,566
reader foxable or adding the flexible to the parent tag of

262
00:16:53,588 --> 00:16:57,150
those compose. So in this case I have relative layout

263
00:16:57,230 --> 00:16:59,538
that I would not recommend you guys to use.

264
00:16:59,704 --> 00:17:03,026
So in your case it might be constraint layout or it

265
00:17:03,048 --> 00:17:06,606
might be linear layout or if you are using compose then

266
00:17:06,648 --> 00:17:10,454
it might be something else. So you can

267
00:17:10,492 --> 00:17:14,018
add the flexible tag to the parent. So in this case I have added

268
00:17:14,034 --> 00:17:18,006
to the relative layout. So what it basically informs

269
00:17:18,038 --> 00:17:22,170
the tool or informs to the accessibility related

270
00:17:22,750 --> 00:17:26,074
tools that all the compose of

271
00:17:26,112 --> 00:17:29,494
this particular tag, like this particular route

272
00:17:29,542 --> 00:17:33,118
view will be processed as a one group. So if you have ten

273
00:17:33,204 --> 00:17:36,222
components in this case, in this example I have two text

274
00:17:36,276 --> 00:17:40,430
views. So those two will be processed together and

275
00:17:40,580 --> 00:17:45,374
they will be treated as a one component. And it's very helpful

276
00:17:45,422 --> 00:17:48,734
when we have list items so that user can easily

277
00:17:48,782 --> 00:17:54,466
understand what that full item means

278
00:17:54,568 --> 00:17:58,230
rather than going one by one like first name, last name and

279
00:17:58,380 --> 00:18:02,118
if there are five compose, it will be not a good experience

280
00:18:02,204 --> 00:18:06,486
for the end user. So those are

281
00:18:06,668 --> 00:18:09,846
some of the properties that you can add to your XML layouts.

282
00:18:09,958 --> 00:18:13,900
So now we will see how we can test accessibility of our application.

283
00:18:14,510 --> 00:18:17,420
Is there automation available?

284
00:18:18,590 --> 00:18:22,166
We have espresso for UI testing and agent for unit testing.

285
00:18:22,198 --> 00:18:25,934
Is there tools or ways for doing that? And then we will

286
00:18:25,972 --> 00:18:29,726
see what are the manual tool or the analysis tools that we can use to

287
00:18:29,748 --> 00:18:32,160
make sure that our application is accessible for everyone.

288
00:18:33,030 --> 00:18:36,402
Manual testing is like interacting with your application using the

289
00:18:36,456 --> 00:18:40,740
accessibility services. So for example you have

290
00:18:41,590 --> 00:18:45,042
developers just finish their one task and they hand over

291
00:18:45,096 --> 00:18:48,562
to the testers. Or if you are developer and you are going to test

292
00:18:48,616 --> 00:18:51,974
all these things, then you might just turn on the talkback and then

293
00:18:52,012 --> 00:18:55,640
process screen by screen of your application and see if there is any issues

294
00:18:56,330 --> 00:18:59,738
which is like a manual testing of your application

295
00:18:59,904 --> 00:19:04,540
and then the testing with analysis tools. There are various tools being

296
00:19:05,630 --> 00:19:09,706
talkback is kind of a manual and analysis that you

297
00:19:09,728 --> 00:19:13,200
can do more like a manual thing. But there is a very

298
00:19:16,370 --> 00:19:20,094
good tool which is called accessibility scanner and it's freely available in place so

299
00:19:20,132 --> 00:19:24,062
that you can install it to your device. And then from there

300
00:19:24,116 --> 00:19:27,666
you can scan the issues. If your layouts having any

301
00:19:27,688 --> 00:19:31,330
issues, like if there is any color contrast issues, or if there is any touch

302
00:19:31,400 --> 00:19:35,186
target size issues, or if there is any issues related

303
00:19:35,218 --> 00:19:38,706
to the accessibility, you will be able to catch

304
00:19:38,818 --> 00:19:42,082
those using that tools. I will show you the sample

305
00:19:42,226 --> 00:19:44,310
later on after the slides.

306
00:19:45,850 --> 00:19:49,020
And then yes, there is a way for adding the

307
00:19:51,390 --> 00:19:54,842
accessibility tests in your UI test.

308
00:19:54,896 --> 00:19:58,474
So if you have UI tests, there is only a single line of code that

309
00:19:58,512 --> 00:20:01,786
you need to add and there is one dependency that you need to add to

310
00:20:01,808 --> 00:20:05,326
your build file and you will be good to go and your old test will

311
00:20:05,348 --> 00:20:08,990
be integrated with accessibility test

312
00:20:09,060 --> 00:20:12,706
or checks. And if there is any issues your test will fail and

313
00:20:12,728 --> 00:20:16,180
you can easily figure out there. Also like how you can

314
00:20:17,030 --> 00:20:21,426
test your application accessibility and then there

315
00:20:21,448 --> 00:20:26,066
is a user testing like just hand over your application to

316
00:20:26,248 --> 00:20:29,894
real people and then see how they interact with your application and

317
00:20:29,932 --> 00:20:34,146
if they found any issues, you can work on those issues before publishing

318
00:20:34,178 --> 00:20:37,554
your application. The last one is the pre launch

319
00:20:37,602 --> 00:20:41,530
report. It's very important and it's also a fairly available before

320
00:20:41,600 --> 00:20:45,014
we publish our application, there is a pre launch report which contains

321
00:20:45,062 --> 00:20:48,538
lot of information about the application and then there is a

322
00:20:48,624 --> 00:20:52,458
portion which is related to the accessibility issues that you can find

323
00:20:52,544 --> 00:20:55,950
which is also early stage or it can be like a last

324
00:20:56,020 --> 00:20:59,198
step I guess before you launching your application.

325
00:20:59,364 --> 00:21:03,300
So you can stop there and see if there are any important issues

326
00:21:04,070 --> 00:21:07,570
or showstoppers that you need to fix before

327
00:21:07,640 --> 00:21:09,380
actually release your application.

328
00:21:10,950 --> 00:21:14,258
So here is the code sample of adding the accessibility checks to

329
00:21:14,264 --> 00:21:17,678
your espresso test. So if this code is written

330
00:21:17,694 --> 00:21:21,766
in Cogn wave. So in the left side I

331
00:21:21,788 --> 00:21:25,254
would prefer to use this one because this is the

332
00:21:25,372 --> 00:21:30,806
more concise one and on

333
00:21:30,828 --> 00:21:34,714
the left side one is more concise. In the right side I

334
00:21:34,752 --> 00:21:37,814
have added this is also enabling the accessibility checks.

335
00:21:37,942 --> 00:21:41,454
But there is also additional properties that you can add on to

336
00:21:41,492 --> 00:21:45,054
that accessibility checks. So when

337
00:21:45,092 --> 00:21:48,142
you say enable the checks and set run

338
00:21:48,196 --> 00:21:51,534
checks from root view set to true, that means

339
00:21:51,572 --> 00:21:55,086
it will process the full UI. So if you have only single test, let's say

340
00:21:55,108 --> 00:21:58,686
in your UI test, like you're just testing one label

341
00:21:58,718 --> 00:22:02,334
in your application and you are not testing the full UI.

342
00:22:02,462 --> 00:22:05,938
In that case it's really helpful that if there is any issues,

343
00:22:06,104 --> 00:22:09,970
let's say you have ten components, if there is any issues related to the accessibility

344
00:22:10,050 --> 00:22:13,526
found in those compose, your test will fail and you will be able to

345
00:22:13,548 --> 00:22:17,126
see in the loads like what went wrong. And then there

346
00:22:17,148 --> 00:22:21,842
is also other properties

347
00:22:21,906 --> 00:22:26,118
that you can set on top of accessibility checks. Like if you want to

348
00:22:26,284 --> 00:22:29,606
suppress some kind of results, like you don't want

349
00:22:29,628 --> 00:22:34,014
to fail your test or you don't care about some views in your application or

350
00:22:34,052 --> 00:22:37,962
some properties. So if you see in the right side, I added a set suppressing

351
00:22:38,026 --> 00:22:41,726
result matches and I set that if there

352
00:22:41,748 --> 00:22:45,554
is any text contrast issue, like if

353
00:22:45,592 --> 00:22:49,694
there is a color contrast issue just associated

354
00:22:49,742 --> 00:22:53,586
to that particular given id which is like text to

355
00:22:53,608 --> 00:22:56,578
be changed, can be any id of your component,

356
00:22:56,754 --> 00:22:59,640
just ignore that and just continue with the test.

357
00:23:01,290 --> 00:23:05,522
So these are the basics like how you can implement accessibility

358
00:23:05,586 --> 00:23:08,898
for the XML and how you can add

359
00:23:08,924 --> 00:23:12,330
the tests using the espresso. Now I will show you some

360
00:23:12,400 --> 00:23:15,962
demo like the real code and how

361
00:23:16,016 --> 00:23:20,166
we can use the tools that I show you earlier or explained

362
00:23:20,198 --> 00:23:21,710
you earlier in the slides.

363
00:23:23,890 --> 00:23:27,626
So now if you see my screen, I have Android studio

364
00:23:27,658 --> 00:23:32,518
opened and I have a real device mirror

365
00:23:32,554 --> 00:23:35,598
to my MacBook which is pixel.

366
00:23:35,774 --> 00:23:38,020
So let's first open.

367
00:23:39,590 --> 00:23:42,814
If you see on the screen here it's accessibility scanner.

368
00:23:42,862 --> 00:23:46,900
If you open this application and you will see

369
00:23:47,610 --> 00:23:51,366
if there are any issues that are earlier found, if you see

370
00:23:51,388 --> 00:23:55,734
the histories there, then there is a settings button that you can see

371
00:23:55,772 --> 00:23:58,300
the threshold about.

372
00:23:59,630 --> 00:24:03,354
It's all about basically application and you can find this application on Play

373
00:24:03,392 --> 00:24:07,338
store. So once that application

374
00:24:07,424 --> 00:24:11,626
is installed, so you

375
00:24:11,648 --> 00:24:16,462
will see this blue check like the tick on

376
00:24:16,516 --> 00:24:19,966
your mobile screen. So if you want

377
00:24:19,988 --> 00:24:23,706
to test any application, for example I have this sample created

378
00:24:23,738 --> 00:24:27,634
for this top. So I have these four or five components. So these

379
00:24:27,672 --> 00:24:31,154
two are using, I have used the old

380
00:24:31,192 --> 00:24:35,234
XML compose, like this is the image and this is the text view and then

381
00:24:35,272 --> 00:24:37,842
these are the compose components like the text,

382
00:24:37,896 --> 00:24:41,560
whatever different components in the code which I will show you later.

383
00:24:42,970 --> 00:24:46,114
So if you want to test using the accessibility scanner,

384
00:24:46,162 --> 00:24:49,402
you just click on this, you will see two options like

385
00:24:49,456 --> 00:24:53,382
record, you want to record this process or you want to take a snapshot.

386
00:24:53,526 --> 00:24:55,530
So I will go with snapshot.

387
00:24:57,390 --> 00:25:00,374
Now if you see it highlights,

388
00:25:00,422 --> 00:25:03,590
there are three issues with the three components.

389
00:25:03,750 --> 00:25:07,214
So you can see there are a couple of options like

390
00:25:07,252 --> 00:25:10,714
if you want to share this report with your, let's say if you are tester

391
00:25:10,762 --> 00:25:14,738
or if you want to share this with your team lead or other team members,

392
00:25:14,824 --> 00:25:18,706
you can also share this report. Or if you want to

393
00:25:18,728 --> 00:25:22,260
go through these compose. Like what are the issues?

394
00:25:22,630 --> 00:25:26,082
If you see here, there is a details like if there is a color

395
00:25:26,136 --> 00:25:29,494
contrast issue, there is a color contrast issue for this

396
00:25:29,532 --> 00:25:32,566
component and if you click it will take you there.

397
00:25:32,668 --> 00:25:36,006
So this component is having this issue. And if you see if you want

398
00:25:36,028 --> 00:25:40,306
to read it says like contrast

399
00:25:40,338 --> 00:25:44,394
ratio, current ratio is this one. Foreground color is this one. Background color

400
00:25:44,432 --> 00:25:48,438
is this one suggested, is this one. So this is the standard provided

401
00:25:48,454 --> 00:25:52,138
by the material design guidelines for accessibility. For the color contrast ratios

402
00:25:52,154 --> 00:25:55,360
for your text color and background color of your text.

403
00:25:56,210 --> 00:25:59,454
So this is how you can use the accessibility scanner tool

404
00:25:59,492 --> 00:26:03,300
in your applications and

405
00:26:04,630 --> 00:26:08,178
same for let me find

406
00:26:08,264 --> 00:26:10,660
out talk back.

407
00:26:13,030 --> 00:26:16,830
Also it's still under the accessibility if you see the screen readers accessibility

408
00:26:16,910 --> 00:26:20,354
scanner. So there is a talkback under the accessibility menu

409
00:26:20,402 --> 00:26:23,734
and you can turn it on and just go through your

410
00:26:23,772 --> 00:26:27,126
application and see if there are any issues. So these are how you

411
00:26:27,148 --> 00:26:30,534
can use these tools and they are freely available. The talkback is default

412
00:26:30,582 --> 00:26:34,214
shipped with most of the Android

413
00:26:34,262 --> 00:26:37,894
phones operating system and then scanner

414
00:26:37,942 --> 00:26:38,860
you can install.

415
00:26:41,860 --> 00:26:45,200
So let's see the test that I have written

416
00:26:45,700 --> 00:26:51,330
for my code. So first I will show you the code.

417
00:26:56,150 --> 00:27:01,014
So if you see the code I think it's visible. Let me make

418
00:27:01,052 --> 00:27:04,280
it a little bit larger so you can see this.

419
00:27:11,560 --> 00:27:14,696
So this is my main activity and there

420
00:27:14,718 --> 00:27:19,256
are some experimental APIs that I'm using. So if you see here I

421
00:27:19,278 --> 00:27:23,284
have used the compose and then I have compose

422
00:27:23,332 --> 00:27:27,028
code here I will not cover the compose accessibility but

423
00:27:27,054 --> 00:27:30,792
I have added and you can see here how you can add the accessibility

424
00:27:30,856 --> 00:27:34,156
to your compose compose like using the content description for

425
00:27:34,178 --> 00:27:37,340
your icon and using the semantics.

426
00:27:38,420 --> 00:27:42,144
And then there are different properties that

427
00:27:42,182 --> 00:27:44,880
you can add to the compose.

428
00:27:48,040 --> 00:27:51,040
Like if you want to set the foxable focus target,

429
00:27:51,120 --> 00:27:54,296
if you want to customize the navigation in compose there is

430
00:27:54,318 --> 00:27:57,704
a property like focus order and then you can define that.

431
00:27:57,742 --> 00:28:02,680
And then you need to define the focus

432
00:28:02,750 --> 00:28:06,952
requesters so that you can attach these to your composable

433
00:28:07,016 --> 00:28:10,316
functions or composable components. So if you want to go to

434
00:28:10,338 --> 00:28:13,884
second then you just say like when this dot down from

435
00:28:13,922 --> 00:28:17,756
this image, when the user press the downwards

436
00:28:17,868 --> 00:28:21,184
arrow, go to the second focus request and it will go to that

437
00:28:21,222 --> 00:28:25,296
second which is where you have attached this one.

438
00:28:25,318 --> 00:28:29,152
So in this case I have attached this

439
00:28:29,206 --> 00:28:32,820
to this text. So it will go to this text.

440
00:28:32,970 --> 00:28:36,244
So these are a couple of things that how you can add

441
00:28:36,282 --> 00:28:39,664
accessibility. This code is already posted on GitHub.

442
00:28:39,712 --> 00:28:43,304
You can check and see how you can

443
00:28:43,342 --> 00:28:47,032
do the accessibility in

444
00:28:47,086 --> 00:28:51,528
compose. So for example live region like how you added before in

445
00:28:51,694 --> 00:28:55,256
XML. Now there is a semantics and then it

446
00:28:55,278 --> 00:28:59,996
will have these properties like heading. If you want to process this

447
00:29:00,018 --> 00:29:03,964
text to be processed as a heading, you can add this heading. If you want

448
00:29:04,002 --> 00:29:10,304
to set the live region you can set that again focus order and

449
00:29:10,342 --> 00:29:13,440
content description for the other components.

450
00:29:13,940 --> 00:29:17,600
So this is in the compose, this is just some properties.

451
00:29:18,100 --> 00:29:21,632
And now I will show you the activity

452
00:29:21,696 --> 00:29:25,312
main which is XML

453
00:29:25,376 --> 00:29:27,110
way of doing things.

454
00:29:29,240 --> 00:29:33,076
So I have this image view and if you see there it's highlighted and

455
00:29:33,178 --> 00:29:37,364
if you see here what it says is like set content description

456
00:29:37,412 --> 00:29:40,648
so you will get the length warning about this. Like you need to

457
00:29:40,654 --> 00:29:43,816
set the content description for this. So I have already added just for

458
00:29:43,838 --> 00:29:47,150
you to showcase how it looks like without that.

459
00:29:48,000 --> 00:29:51,164
So if I add the content description that

460
00:29:51,202 --> 00:29:55,372
error or that warning goes away. So other

461
00:29:55,426 --> 00:29:59,600
cool thing is about the latest Android studio. I think since 4.0

462
00:29:59,670 --> 00:30:03,520
or I'm not sure about exact version you will get a warnings

463
00:30:04,100 --> 00:30:08,128
during a development phase. Like if there is any issues. For example

464
00:30:08,214 --> 00:30:11,724
if you see before I told you the scanner shows the color

465
00:30:11,782 --> 00:30:14,996
contrast issue for this. If you see here it says that

466
00:30:15,018 --> 00:30:18,356
we have like two warnings and one error and one

467
00:30:18,378 --> 00:30:22,004
error shows that the source is like this text view, it has a color

468
00:30:22,042 --> 00:30:25,528
issues, color contrast issues. So either you

469
00:30:25,534 --> 00:30:29,112
can fix this or you can ignore this. So if you want to fix this

470
00:30:29,246 --> 00:30:32,548
it change that and if you see that error

471
00:30:32,564 --> 00:30:36,888
it goes away. So this is some of the cool features that are integrated

472
00:30:36,984 --> 00:30:42,684
within the develop IDE so that you

473
00:30:42,722 --> 00:30:46,028
can spore the accessibility within your application

474
00:30:46,114 --> 00:30:49,776
during the early phases of your application development when

475
00:30:49,798 --> 00:30:52,450
you are actually playing with the XML code.

476
00:30:54,180 --> 00:30:57,916
Next is the accessibility testing using the espresso.

477
00:30:57,948 --> 00:31:01,344
So I have espresso test here. So what I did is I could

478
00:31:01,382 --> 00:31:04,976
just enable this. So I just set the run checks

479
00:31:05,008 --> 00:31:09,072
from root view to true and this is from the espresso

480
00:31:09,136 --> 00:31:12,980
dependency that you need to add for accessibility checks.

481
00:31:13,060 --> 00:31:17,336
So this is from this library and

482
00:31:17,518 --> 00:31:19,850
if I show you the build file here,

483
00:31:21,900 --> 00:31:25,236
here is the dependency for this one. So if you pass

484
00:31:25,358 --> 00:31:29,004
accessibility you just search it

485
00:31:29,042 --> 00:31:30,510
and you will find it there.

486
00:31:31,920 --> 00:31:35,596
And once you add the checks for true and set it to true. And if

487
00:31:35,618 --> 00:31:43,286
I run this test as

488
00:31:43,308 --> 00:31:51,900
you see it starts running and we will see the results because

489
00:31:51,970 --> 00:31:56,348
we fixed that color contrast issue and we added the content description.

490
00:31:56,524 --> 00:31:59,280
So I think no test will fail.

491
00:32:03,220 --> 00:32:06,828
So both the tests are failed and I think there are still accessibility

492
00:32:06,924 --> 00:32:07,570
issues.

493
00:32:21,530 --> 00:32:24,774
So if you see the first test is failed and

494
00:32:24,812 --> 00:32:28,406
you see there is a one accessibility issue. So it

495
00:32:28,428 --> 00:32:31,874
says that there is Android compose view and it's not clickable.

496
00:32:31,922 --> 00:32:35,338
And if you see here, this item may not have

497
00:32:35,344 --> 00:32:38,262
a label readable by screen readers.

498
00:32:38,406 --> 00:32:41,926
So there is some views that still missing the content description

499
00:32:42,038 --> 00:32:45,534
or not clickable and your test will fail. So this is how you

500
00:32:45,572 --> 00:32:49,262
can add like a one line of code which will

501
00:32:49,316 --> 00:32:53,006
helps you to find out the issues related to

502
00:32:53,028 --> 00:32:57,262
the accessibility in your application. So this is some basics

503
00:32:57,326 --> 00:33:01,726
of how you can have accessibility related properties in your XML

504
00:33:01,758 --> 00:33:04,638
files like Screen reader Foxable foxable.

505
00:33:04,814 --> 00:33:08,114
Then next, focus forward. And if you see other

506
00:33:08,152 --> 00:33:11,862
options, there are a couple of other options like next focus down,

507
00:33:11,916 --> 00:33:15,174
focus left, focus right, focus up so you can add

508
00:33:15,212 --> 00:33:17,430
those properties as per your requirements.

509
00:33:18,570 --> 00:33:22,294
So that's all for this talk, and I hope you

510
00:33:22,412 --> 00:33:26,634
learned something new. Feel free to contact me

511
00:33:26,672 --> 00:33:30,394
on different channels as I show you before,

512
00:33:30,512 --> 00:33:34,298
whether it's LinkedIn or Twitter medium or GitHub, wherever you

513
00:33:34,304 --> 00:33:37,820
feel comfortable. And here are some of the references to

514
00:33:38,750 --> 00:33:42,074
some of the resources that you can follow to learn more about

515
00:33:42,112 --> 00:33:45,902
accessibility in Android. So I will share the slides.

516
00:33:46,006 --> 00:33:49,586
So thanks for your time and have a great day. Thank you

517
00:33:49,608 --> 00:33:50,180
everyone.

