1
00:00:25,410 --> 00:00:28,838
You. Hello and welcome to my talk

2
00:00:28,924 --> 00:00:32,566
concerning making the jump to Junit five from Junit four using the

3
00:00:32,588 --> 00:00:36,406
spring framework. My name is Jonathan Meek and we'll go ahead and get started.

4
00:00:36,508 --> 00:00:39,974
So a little bit of background on myself. I've been an active Java developer since

5
00:00:40,012 --> 00:00:43,506
2010. The oldest version of Java I've ever worked on was Java

6
00:00:43,538 --> 00:00:46,742
1.6. I was doing this in the process of working

7
00:00:46,796 --> 00:00:49,998
on network provisioning software, which was a lot of fun of

8
00:00:50,044 --> 00:00:53,680
currently training for my first half marathon. Originally this was set for

9
00:00:54,610 --> 00:00:58,270
March of this year that's been postponed, so I'm just going to continue

10
00:00:58,340 --> 00:01:01,934
training. I have two cats, Deacon and Reina. And as you

11
00:01:01,972 --> 00:01:05,358
see here in the photos, on the left hand side is Deacon, on the

12
00:01:05,364 --> 00:01:08,958
right hand side it's Reina. So the other part is I'm

13
00:01:08,974 --> 00:01:12,146
married to the most talented agile coach Baker known to

14
00:01:12,168 --> 00:01:15,902
me. So she currently does consulting with executives.

15
00:01:15,966 --> 00:01:19,286
But there's a lot of shop talk that happens and she's usually coaching me on

16
00:01:19,308 --> 00:01:22,646
how to be a better developer. Here in the little

17
00:01:22,668 --> 00:01:26,594
corner here, you see this wonderful little treat she's made. It's peanut butter Reese's

18
00:01:26,642 --> 00:01:29,706
cup. So that's just a little bit of background onto me. But let's go ahead

19
00:01:29,728 --> 00:01:32,966
and jump into what you came for, which was understanding

20
00:01:32,998 --> 00:01:36,700
that migration path for Junit four to junit five.

21
00:01:37,230 --> 00:01:40,902
So before we talk about that, from my perspective, I believe that there's

22
00:01:40,966 --> 00:01:44,446
a deeper problem that we're not talking about. Test frameworks are usually the last thing

23
00:01:44,468 --> 00:01:48,078
to be upgraded into those code base and I think it comes from the idea

24
00:01:48,164 --> 00:01:51,326
of we want things to continue to work. And kind

25
00:01:51,348 --> 00:01:56,274
of a side note, Junit was originally released in 2006 and

26
00:01:56,312 --> 00:02:00,622
I think as those comic illustrates here, right, this is our attitude.

27
00:02:00,766 --> 00:02:04,370
We never touch the ancient code. But the problem is

28
00:02:04,440 --> 00:02:07,746
when it comes to our testing frameworks, especially for those of us who

29
00:02:07,768 --> 00:02:11,446
are practitioners of TDD, this should be the first thing we should be looking at

30
00:02:11,468 --> 00:02:14,806
and we should be considering how to upgrade these things because these are those

31
00:02:14,828 --> 00:02:19,270
tools that are giving us the cadence that our software is working as designed

32
00:02:19,350 --> 00:02:23,242
and intended. Another aspect, something we're not talking about

33
00:02:23,296 --> 00:02:27,302
either. So I pulled this from last year's presentation

34
00:02:27,366 --> 00:02:30,870
track for a developer conference. Notice that there arent a

35
00:02:30,880 --> 00:02:34,494
lot of things talking about migrating beyond Java eight, the SE

36
00:02:34,692 --> 00:02:38,202
eleven developer certifications and discovering modern Java.

37
00:02:38,266 --> 00:02:41,502
A lot of things indicating towards that path but nothing

38
00:02:41,556 --> 00:02:45,230
around those frameworks. Now granted, this is the code Java, but when I looked across

39
00:02:45,300 --> 00:02:49,054
the whole programming track, there weren't anything. And to put it into context.

40
00:02:49,102 --> 00:02:53,170
This was actually the conference I just recently presented at Devnexus last year.

41
00:02:53,240 --> 00:02:55,954
And when I was talking at that conference, that was something I pointed out again,

42
00:02:55,992 --> 00:02:59,410
I think as a community, we have to start being willing to talk about

43
00:02:59,480 --> 00:03:03,346
not only the cool frameworks we're using to develop our code and the cool features

44
00:03:03,378 --> 00:03:06,534
of a programming language, but also those testing frameworks that we're looking

45
00:03:06,572 --> 00:03:10,166
at as well. So, first question, it's just a parentheses swap out, right?

46
00:03:10,268 --> 00:03:14,406
No. Junit five represents a major version shift and reorganization effort

47
00:03:14,438 --> 00:03:18,026
by the Junit team. It actually breaks it down into three main projects now.

48
00:03:18,128 --> 00:03:21,574
So you have the Junit platform, so that includes the test engine API

49
00:03:21,622 --> 00:03:25,386
interfaces, as well as the Junit Jupyter, which contains

50
00:03:25,418 --> 00:03:29,434
the actual implementation. So again, doing best software practice of decoupling

51
00:03:29,482 --> 00:03:33,086
the interfaces from the implementation so changes can be made in the future while not

52
00:03:33,108 --> 00:03:37,186
breaking compatibility. And then Junit vintage, which supports running Junit three

53
00:03:37,288 --> 00:03:40,754
and four tests in junit five. So if you're listening to my last

54
00:03:40,792 --> 00:03:43,966
comment, there's another question. Can't I use Junit vintage?

55
00:03:44,078 --> 00:03:47,220
You could, and I would say why?

56
00:03:47,670 --> 00:03:51,478
Because it's kind of kicking the problem down the road. I understand that

57
00:03:51,484 --> 00:03:54,950
there are needs for older code bases where we can't exactly

58
00:03:55,020 --> 00:03:58,182
go in and dive in and make those changes, but I would press

59
00:03:58,236 --> 00:04:01,770
that. We may need to reevaluate that. And also, personal experience,

60
00:04:01,840 --> 00:04:05,386
it's been that Junit vintage hasn't worked for me. Usually the

61
00:04:05,408 --> 00:04:08,954
testing fails, it does something weird. So I would say that

62
00:04:08,992 --> 00:04:12,346
Junit five can be introduced to an existing code base,

63
00:04:12,448 --> 00:04:15,674
and also, if you're going to do it into an existing code base.

64
00:04:15,712 --> 00:04:18,286
Right. You're going to have to be mindful of the fact that you're going to

65
00:04:18,308 --> 00:04:22,030
make some changes there. With that in mind, you'll see some clarity and some

66
00:04:22,100 --> 00:04:25,578
changes that happened in the annotations. So again, this is kind of why it's

67
00:04:25,594 --> 00:04:28,706
not an easy one to one swap out rate. It's. There were some updates that

68
00:04:28,728 --> 00:04:31,874
were made, and to me makes it more clear. You can see that the

69
00:04:31,912 --> 00:04:35,298
at test annotation stays the same, but you can see for some of

70
00:04:35,304 --> 00:04:39,238
these other ones, they've become more specific. Right. So before

71
00:04:39,324 --> 00:04:42,626
all versus before class, and then the before becomes

72
00:04:42,658 --> 00:04:46,214
a before each and after and after each. My favorite one is probably

73
00:04:46,252 --> 00:04:49,366
the TDD ignore becomes a disabled for me. That's a little bit clearer in my

74
00:04:49,388 --> 00:04:52,666
head. So you can see where at junit five they were trying to aim for

75
00:04:52,768 --> 00:04:55,994
conciseness behind what they were saying and what they were doing.

76
00:04:56,112 --> 00:04:59,658
Another thing you'll see is the packages name no longer is

77
00:04:59,744 --> 00:05:03,434
test located at that level. Again, it goes back and reflects

78
00:05:03,482 --> 00:05:07,294
the changes we saw earlier when I said that there was a separation of between

79
00:05:07,332 --> 00:05:10,922
the implementation and the interfaces. So you see this

80
00:05:10,986 --> 00:05:14,554
Junit Jupyter API test, and then same with the assertions,

81
00:05:14,602 --> 00:05:18,186
again going back for that conciseness and that clarity of where things reside.

82
00:05:18,298 --> 00:05:21,426
So now that we've kind of talked about the bigger pieces, let's kind of talk

83
00:05:21,448 --> 00:05:24,418
through what does an upgraded path look like? So in this example we're going to

84
00:05:24,424 --> 00:05:28,146
talk through with spring framework, with some of the other frameworks that are.

85
00:05:28,168 --> 00:05:31,366
But there they have started going to having Junit five be the

86
00:05:31,388 --> 00:05:34,774
default on new projects. So we won't go into detail that,

87
00:05:34,812 --> 00:05:38,086
but we'll talk at least here. So at least with spring framework, right, you want

88
00:05:38,108 --> 00:05:40,826
to make sure you have Java eight or higher. Again, this has used some of

89
00:05:40,848 --> 00:05:43,882
the lambda functionality behind it in order to do this,

90
00:05:43,936 --> 00:05:47,622
and then spring framework five or higher. So looking through the spring framework

91
00:05:47,686 --> 00:05:51,242
setup, Springboot 20 eight release is actually

92
00:05:51,296 --> 00:05:54,574
the first time you see Springboot five. And so you want to use that

93
00:05:54,612 --> 00:05:58,254
version or higher. It actually became default in spring boot two four.

94
00:05:58,292 --> 00:06:01,662
So in this example I'm actually going to show it using the spring two four,

95
00:06:01,716 --> 00:06:04,942
because that's easier. And I want to show off some of the features that are

96
00:06:04,996 --> 00:06:08,386
new to junit five. In that process, you want to make sure you upgrade your

97
00:06:08,408 --> 00:06:11,566
dependencies in your palm XML, and then you want to swap out the following bits,

98
00:06:11,598 --> 00:06:15,566
right? A run with becomes an extend with your spring runner becomes a spring

99
00:06:15,598 --> 00:06:19,206
extensions class, and your before becomes a before each. And also if you're

100
00:06:19,228 --> 00:06:23,046
using Makito, your junit runner class becomes a Makito extension and

101
00:06:23,068 --> 00:06:26,534
a keynote with the runners and extensions. Kind of the cool thing is now

102
00:06:26,572 --> 00:06:29,766
you're able to do many extensions where in the past you had

103
00:06:29,788 --> 00:06:33,418
to choose between a singular runner. I actually ended up using this on a project

104
00:06:33,504 --> 00:06:36,826
recently where I needed to

105
00:06:36,848 --> 00:06:40,166
add in the Makito extension. So I was able to do an extend with Makito

106
00:06:40,198 --> 00:06:43,610
extension class and it worked perfectly. No problems, no issues.

107
00:06:43,680 --> 00:06:46,346
So something to keep note. And then also that last part of you can flip

108
00:06:46,378 --> 00:06:49,646
to the earlier slide where it says the TLDR diff part two where we

109
00:06:49,668 --> 00:06:53,134
talked about that packets guidance. And again when we demo it, we'll actually walk through

110
00:06:53,172 --> 00:06:56,302
that. So not only is the same functionality there, but there are

111
00:06:56,356 --> 00:07:00,206
a couple of cool features that I find extremely helpful. The at display

112
00:07:00,238 --> 00:07:03,234
name allows you to add a human readable name to the test. I find this

113
00:07:03,272 --> 00:07:07,202
great for developers who may not be as experienced in the code base

114
00:07:07,256 --> 00:07:10,438
to be able to identify what exactly has gone wrong in a test. In the

115
00:07:10,444 --> 00:07:14,294
past when my team has done those things, we've had to come up with some

116
00:07:14,332 --> 00:07:17,702
sort of weird naming convention of should do this,

117
00:07:17,756 --> 00:07:21,554
win this, then kind of pattern in the method

118
00:07:21,602 --> 00:07:24,758
name. So this allows us to just be able to add something that's

119
00:07:24,774 --> 00:07:28,806
a little bit more readable and also can potentially allow for inexperienced developers,

120
00:07:28,918 --> 00:07:32,154
any of your scrum masters, to kind of take a look and understand where has

121
00:07:32,192 --> 00:07:35,742
it failed, especially if they happen to be reviewing test case

122
00:07:35,796 --> 00:07:39,674
results from a given setup. The other two that go hand in hand is parameterized

123
00:07:39,722 --> 00:07:43,598
test and those CSV file source. The parameterized test allows you to

124
00:07:43,684 --> 00:07:47,742
write programmatic tests where multiple inputs can be passed and tested individually.

125
00:07:47,806 --> 00:07:51,794
The CSV file source allows you to point to a particular place and say,

126
00:07:51,832 --> 00:07:55,346
okay, I want you to use this file to generate and pull in the information

127
00:07:55,448 --> 00:07:58,834
behind that. So at this point we're going to do some live

128
00:07:58,872 --> 00:08:02,054
coding. I put that in air quotes because of the fact of I've already done

129
00:08:02,092 --> 00:08:05,718
it and I can actually switch branches over into the junit five,

130
00:08:05,804 --> 00:08:08,950
but I want to at least try my best to go through it. So without

131
00:08:09,020 --> 00:08:11,450
further ado, we're going to pop out and get started.

132
00:08:11,600 --> 00:08:15,546
Okay, so to kind of show off, I'm first just going to run the

133
00:08:15,568 --> 00:08:19,398
gradle. Sorry. I'm actually using maven, not gradle

134
00:08:19,494 --> 00:08:22,918
on my work setting. I usually use gradle,

135
00:08:23,014 --> 00:08:26,398
so I figured a lot of people are probably using maven, so I

136
00:08:26,404 --> 00:08:29,982
figured to stick with that. So I'm just going to do a maven clean

137
00:08:30,036 --> 00:08:33,742
test, prove everything works as it is. Right? No black

138
00:08:33,796 --> 00:08:37,358
magic here, right? Because I feel that's important when we're

139
00:08:37,374 --> 00:08:39,620
talking about, hey, I want you to go do this thing right.

140
00:08:42,330 --> 00:08:45,526
All right, cool. So it runs through all the things, tells me

141
00:08:45,548 --> 00:08:49,146
everything's good, has nine successes. Okay, so what

142
00:08:49,168 --> 00:08:52,794
I'm going to do is I'm going to change this, but for two four,

143
00:08:52,992 --> 00:08:55,900
and I believe if merge serves me correct.

144
00:08:58,110 --> 00:09:01,482
Let's see, do I got a one? No. Okay, so we'll just go with two

145
00:09:01,536 --> 00:09:05,006
four for now and helps if I use

146
00:09:05,028 --> 00:09:08,478
the right keys. All right. And yeah, sure, we will

147
00:09:08,644 --> 00:09:11,514
go ahead and do that part. Now. At this point it's probably going to scream

148
00:09:11,562 --> 00:09:14,366
about a lot of different things. So the first place we're going to start is

149
00:09:14,388 --> 00:09:17,298
with the controller test. And we'll work through the test first,

150
00:09:17,464 --> 00:09:21,266
make sure everything looks correct. Those and then we'll work into the service and

151
00:09:21,288 --> 00:09:24,386
whatnot. And then I'll at the end do the full set with

152
00:09:24,408 --> 00:09:27,638
everything converted over to junit five. All right, so let's start with the

153
00:09:27,644 --> 00:09:31,046
controller test. As you can see, all the assertions and all the things

154
00:09:31,068 --> 00:09:34,950
arent screaming a little bit. So what we'll do is for now

155
00:09:35,020 --> 00:09:39,020
I'm actually going to remove the imports for the time being.

156
00:09:42,670 --> 00:09:46,620
And as a side note, with the application itself, this is a simple

157
00:09:47,710 --> 00:09:51,366
rest endpoint that allows us to be able to do a couple of things.

158
00:09:51,408 --> 00:09:55,166
So just real quick I'll show you got

159
00:09:55,188 --> 00:09:58,526
a simple controller of coffee, one of my favorite things

160
00:09:58,548 --> 00:10:02,462
to drink. Unfortunately because of the time of day I'm not drinking one right now,

161
00:10:02,596 --> 00:10:05,678
but it's one of my favorite things. So I have an endpoint where I

162
00:10:05,684 --> 00:10:09,314
can get all the coffees. I can get a coffee by its id and then

163
00:10:09,352 --> 00:10:12,606
I can get the best rated coffee. So that's what my testing

164
00:10:12,638 --> 00:10:16,034
does. And all this is backed up by an h two in memory database

165
00:10:16,082 --> 00:10:18,978
just for simple simplicity and whatnot.

166
00:10:19,074 --> 00:10:22,662
So this is kind of a general view of what the application looks

167
00:10:22,716 --> 00:10:26,174
like. All right, so we change this to an extend

168
00:10:26,242 --> 00:10:30,730
with and let's see if whoops

169
00:10:31,150 --> 00:10:34,700
helps if I don't, but the buttons. I'll let the

170
00:10:35,550 --> 00:10:38,346
system give me a hand here a little bit. All right,

171
00:10:38,528 --> 00:10:41,690
change that runner into an extension as I said earlier.

172
00:10:42,690 --> 00:10:45,598
And again, the system is going to help me a little bit. I'm also going

173
00:10:45,604 --> 00:10:49,422
to go ahead and delete the not needed piece

174
00:10:49,476 --> 00:10:52,814
there. Okay, so keep scrolling down. And in this case, again with the control

175
00:10:52,852 --> 00:10:55,780
treat. We're using mock MVC. All right, so let's see.

176
00:10:56,710 --> 00:10:59,780
I want to do that import. All right, cool.

177
00:11:00,230 --> 00:11:02,740
All right, let's see. What's it mad about?

178
00:11:03,190 --> 00:11:07,026
Okay, let's scroll down the assert.

179
00:11:07,138 --> 00:11:11,046
So this needs to be versions to make this work because

180
00:11:11,068 --> 00:11:14,486
it moved from assert to assertions in GNH live.

181
00:11:14,588 --> 00:11:18,454
All right, still not happy with that. Let me try

182
00:11:18,492 --> 00:11:21,274
and import. Yes, there we go.

183
00:11:21,472 --> 00:11:25,610
So I'm actually going to use the junit Jupyter API.

184
00:11:26,350 --> 00:11:30,182
All right, cool. Now everything looks correct here. Let's scroll

185
00:11:30,246 --> 00:11:33,498
back up. All right, cool. Nothing's yelling at

186
00:11:33,504 --> 00:11:37,114
me. Everything seems to be okay. All right, so I'm just going to hit Ctrl

187
00:11:37,162 --> 00:11:40,430
save real quick. All right, so that one is good at this point.

188
00:11:40,500 --> 00:11:43,006
Now I'm going to move into the service. The service may be a little bit

189
00:11:43,028 --> 00:11:46,706
more tricky because I know

190
00:11:46,728 --> 00:11:50,466
that there was one thing I had changed here with this before.

191
00:11:50,648 --> 00:11:53,646
It may yell at me a little bit either in the runtime and whatnot.

192
00:11:53,678 --> 00:11:57,806
We'll wait and see what happens here because at one point in the development

193
00:11:57,838 --> 00:12:01,526
of the code, it was demanding that something be static. So just as

194
00:12:01,548 --> 00:12:04,342
a heads up, we may run into a little bit of a bump here.

195
00:12:04,476 --> 00:12:07,278
All right, so I'm going to go ahead and delete the things that it's yelling

196
00:12:07,314 --> 00:12:10,682
about for now. Again, I could probably walk through and type

197
00:12:10,736 --> 00:12:14,106
and correct them, but we'll do this last one

198
00:12:14,128 --> 00:12:19,690
because it's just simply adding that and oh yeah, the Jupyter

199
00:12:20,350 --> 00:12:24,140
API assertions. There we go. That's correct.

200
00:12:24,590 --> 00:12:28,638
All right. Deadwidth right now, imported the right thing.

201
00:12:28,804 --> 00:12:31,706
It's going to be like, what is this? As I said earlier,

202
00:12:31,818 --> 00:12:35,438
it should change to an extension in this case. I know that with Makitoj junit

203
00:12:35,454 --> 00:12:39,634
runner, it changed name into Makito extension. So we

204
00:12:39,672 --> 00:12:43,346
do that. Okay, so we see all those mocks and the

205
00:12:43,368 --> 00:12:47,014
jacks. Okay. And we'll try

206
00:12:47,052 --> 00:12:50,866
before each helps

207
00:12:50,898 --> 00:12:54,710
if I import it. Yes, it's imported.

208
00:12:57,310 --> 00:12:59,420
All right, let's do that.

209
00:13:00,670 --> 00:13:01,420
Cool.

210
00:13:04,110 --> 00:13:07,290
All right, so the thing here that changes,

211
00:13:07,360 --> 00:13:11,658
right, is in junit four, you're able to do an expected

212
00:13:11,834 --> 00:13:16,042
that's no longer the case. In five, this particular ability

213
00:13:16,106 --> 00:13:19,710
and annotation does not exist. What you have to do instead is

214
00:13:19,780 --> 00:13:23,250
actually a lambda function.

215
00:13:23,320 --> 00:13:26,562
So this is that first place where we see something that happens.

216
00:13:26,616 --> 00:13:28,210
So we'll do an assert throws.

217
00:13:30,790 --> 00:13:34,174
And with that assert throws, I tell it. Okay, here's the expected

218
00:13:34,222 --> 00:13:37,080
type. So I'm going to tell it exception class,

219
00:13:38,650 --> 00:13:41,510
I'm going to do a comma and this is where I insert my lambda.

220
00:13:42,890 --> 00:13:46,006
And what I'll do is actually the command I care to call or

221
00:13:46,028 --> 00:13:49,850
sorry, those method I care to call. So it's actually this one.

222
00:13:50,000 --> 00:13:54,090
So I'm just going to use the right keyboard bindings,

223
00:13:56,430 --> 00:14:00,238
paste it in. All right, cool. And also get rid of that.

224
00:14:00,324 --> 00:14:04,474
So kind of the cool thing is you now get rid of the wonderful

225
00:14:04,522 --> 00:14:08,458
error, your id or editor yelling

226
00:14:08,474 --> 00:14:11,562
at you and saying, hey dude, this is never used.

227
00:14:11,636 --> 00:14:15,006
You don't do anything with it. Right. It actually gives you a purpose and allows

228
00:14:15,038 --> 00:14:18,338
to avoid that problem. All right, let's see.

229
00:14:18,504 --> 00:14:20,930
Static import of the assert throws.

230
00:14:23,690 --> 00:14:27,446
Try that again. All right, it's just

231
00:14:27,468 --> 00:14:31,640
going to be mad at me for a second. I think I misspelled something.

232
00:14:32,570 --> 00:14:34,600
That's usually my biggest problem.

233
00:14:36,090 --> 00:14:39,586
Those we go nice. Now everything looks

234
00:14:39,708 --> 00:14:43,626
nice and pretty. So let's go back up here to the

235
00:14:43,648 --> 00:14:47,338
top, make sure we're not missing anything. Okay. So it's going to tell

236
00:14:47,344 --> 00:14:50,446
us get rid of line eleven. All right, cool. So now

237
00:14:50,468 --> 00:14:53,886
I hit save. So next thing I'm going to do is just going

238
00:14:53,908 --> 00:14:55,440
to rerun my test.

239
00:15:09,470 --> 00:15:13,434
All right, cool. Everything again works. No problems.

240
00:15:13,632 --> 00:15:17,978
All right, so all I've done thus far is just move us over from junit

241
00:15:17,994 --> 00:15:21,342
four to junit five. But I've not done any of the new features around that.

242
00:15:21,476 --> 00:15:24,398
So what I'm going to do is actually go into the controller test and I'm

243
00:15:24,404 --> 00:15:28,206
going to show off the display name. So we'll

244
00:15:28,238 --> 00:15:32,500
take this first one here. So when I do at display name

245
00:15:32,870 --> 00:15:36,686
and it gives me this option, I am able to define that human readable

246
00:15:36,718 --> 00:15:40,306
thing. So right now you can see on line 34 should return all

247
00:15:40,328 --> 00:15:43,254
coffees when hitting default resource with get.

248
00:15:43,452 --> 00:15:46,246
So right now what I'm going to do is quickly kind of come up with

249
00:15:46,348 --> 00:15:49,330
a kind of standard, so to speak, treat, I would think. Okay,

250
00:15:49,420 --> 00:15:51,930
so return all coffees.

251
00:15:54,830 --> 00:15:58,502
See, I want to do that particular endpoint

252
00:15:58,566 --> 00:16:03,002
and then I expect treat to be actually get

253
00:16:03,056 --> 00:16:05,982
and then that endpoint. And then, okay, I expect that to be a 200.

254
00:16:06,036 --> 00:16:09,866
Okay, so you can see here, I'm kind of using a quick shorthand

255
00:16:09,978 --> 00:16:13,882
to be able to communicate what the expected output and ability

256
00:16:13,946 --> 00:16:16,974
of it is. Right. And when I run this. So let me

257
00:16:17,012 --> 00:16:20,706
do that and we'll do those maven clean install.

258
00:16:20,888 --> 00:16:23,890
Actually, I wonder, I'm going to try running,

259
00:16:23,960 --> 00:16:27,366
doing the run test here in visual studio code.

260
00:16:27,548 --> 00:16:31,522
Because if I do that, it will probably show it more clearly

261
00:16:31,666 --> 00:16:35,190
in its test runner results.

262
00:16:37,290 --> 00:16:40,854
All right, looks like it completed. I pull this open.

263
00:16:40,972 --> 00:16:43,610
All right, see, so right here in the test report.

264
00:16:43,680 --> 00:16:47,898
Right, you have return all coffee. Use the dash. The get 202 hundred.

265
00:16:47,984 --> 00:16:51,302
Sorry, get default endpoint

266
00:16:51,446 --> 00:16:55,046
200. Okay. Right. What I told it to be here.

267
00:16:55,168 --> 00:16:58,366
So again, just one of those things that helps with readability, helps with

268
00:16:58,388 --> 00:17:01,120
some clarity around what it is that you're looking for.

269
00:17:02,050 --> 00:17:06,274
All right, so next thing I'm going to do is

270
00:17:06,312 --> 00:17:11,220
we're actually going to try out the

271
00:17:14,150 --> 00:17:17,780
parameterized test. Again with the parameterized test,

272
00:17:18,550 --> 00:17:21,686
what we would do is we would just give it a list of parameters and

273
00:17:21,708 --> 00:17:24,390
give it a csv.

274
00:17:24,890 --> 00:17:28,358
So in this case, I'm going to cheat a little bit.

275
00:17:28,524 --> 00:17:33,038
I'm actually going to go ahead and jump over into those junit

276
00:17:33,074 --> 00:17:36,858
five completed setup and we'll walk through it and I'll explain

277
00:17:36,944 --> 00:17:40,346
how all those pieces come together. It will save us a little bit of

278
00:17:40,368 --> 00:17:44,014
time here. So let me pop here into

279
00:17:44,052 --> 00:17:45,070
the terminal,

280
00:17:49,330 --> 00:17:56,030
check out five

281
00:17:56,180 --> 00:18:01,614
complete new

282
00:18:01,652 --> 00:18:04,190
computer and I forgot to put treat little keyboard shortcut.

283
00:18:05,970 --> 00:18:19,958
There we go. But all

284
00:18:19,964 --> 00:18:23,314
right, cool. Now I'm actually in the right place. So when I scroll

285
00:18:23,362 --> 00:18:26,886
up you can see here where I've given all the display names,

286
00:18:26,918 --> 00:18:30,058
tried to put a put, tries to do a put on this resource, get a

287
00:18:30,064 --> 00:18:33,854
405 method not allowed, right to provide that information on

288
00:18:33,892 --> 00:18:37,422
the display name. And actually the test

289
00:18:37,476 --> 00:18:40,766
I'm looking for is in the service. I keep saying the

290
00:18:40,788 --> 00:18:43,440
wrong thing. All right,

291
00:18:44,370 --> 00:18:47,894
let's see. Here we go. So it should return a single copy.

292
00:18:47,962 --> 00:18:51,220
It returns a single copy by the coffee's id.

293
00:18:52,070 --> 00:18:56,306
Now with this app I

294
00:18:56,328 --> 00:19:00,310
have this Testdata CSV, right with those CSV file source.

295
00:19:01,690 --> 00:19:05,106
This resource starts off looking at the test resources

296
00:19:05,138 --> 00:19:09,206
folder in that class path. So I've pulled up the test data

297
00:19:09,308 --> 00:19:12,398
CSV to give the context.

298
00:19:12,514 --> 00:19:17,290
You'll see here the

299
00:19:17,440 --> 00:19:21,146
past index of zero, one, two and

300
00:19:21,168 --> 00:19:24,986
then the coffee id, the coffee name, the coffee

301
00:19:25,018 --> 00:19:28,526
type and its rating. So when I look

302
00:19:28,548 --> 00:19:31,966
at the coffee test service test, you notice here

303
00:19:31,988 --> 00:19:35,754
I've got parameterized test. I've told it I want you to take the CSV

304
00:19:35,802 --> 00:19:39,262
file located here and you notice the parameters

305
00:19:39,326 --> 00:19:42,802
that I've passed in, right? So you got 12345.

306
00:19:42,856 --> 00:19:47,860
When I look at the test CSV 12345.

307
00:19:48,310 --> 00:19:51,462
So again you want those to match up or it will throw an error message

308
00:19:51,516 --> 00:19:54,786
to you saying hey, you've got a couple of things in the CSV

309
00:19:54,818 --> 00:19:58,200
but not the same thing in the method name. What are you doing?

310
00:20:00,250 --> 00:20:04,730
So you can see here where I actually walk through and I

311
00:20:04,880 --> 00:20:08,666
parse the id that I passed in. I tell it

312
00:20:08,688 --> 00:20:12,720
okay go find by this and then return an optional of

313
00:20:13,090 --> 00:20:18,494
the mocked coffees that I created up here at the top that

314
00:20:18,532 --> 00:20:21,934
match that id giving that information and giving that

315
00:20:21,972 --> 00:20:25,774
viewpoint, right? So then I say okay, go get the coffee id

316
00:20:25,892 --> 00:20:29,486
when I do my asserts, right? Okay here's the pulled single coffee

317
00:20:29,518 --> 00:20:33,294
id and here's the expected name and migrating and the equality

318
00:20:33,342 --> 00:20:36,386
on it, right. So now what you're going to see instead of nine tests you

319
00:20:36,408 --> 00:20:40,110
should see eleven tests when we run this because of the

320
00:20:40,120 --> 00:20:43,686
fact of I have three items, right. Previously I was

321
00:20:43,708 --> 00:20:47,346
testing for just the one so I've added two more. So ten on eleven.

322
00:20:47,538 --> 00:20:50,454
So if I run the whole data set here.

323
00:20:50,572 --> 00:20:54,486
Okay, no thanks. Thank you intel or sorry vs

324
00:20:54,518 --> 00:20:58,234
code but I don't really care to do that right now. All right,

325
00:20:58,272 --> 00:21:02,174
so we will run all the tests here again prove no

326
00:21:02,212 --> 00:21:02,910
magic.

327
00:21:11,890 --> 00:21:15,540
Probably helps if I use those maven w clean test

328
00:21:27,930 --> 00:21:31,240
and you can see here I had eleven tests run.

329
00:21:32,330 --> 00:21:35,718
It's not going to show there. Not taking it there. My bad.

330
00:21:35,884 --> 00:21:39,194
But you can see the test run were eleven instead of nine this code time

331
00:21:39,232 --> 00:21:43,580
because we added two more tests by being able to use the parameterized test.

332
00:21:44,910 --> 00:21:48,346
All right, that concludes those. So here are the resources I

333
00:21:48,368 --> 00:21:52,390
use to pull this talk together again, I don't claim to be an expert and

334
00:21:52,400 --> 00:21:55,850
I always try to do my best to give credit where credit is due.

335
00:21:55,930 --> 00:21:59,838
In keeping with that those I want to give a special thanks to

336
00:22:00,004 --> 00:22:04,214
my teammates on the tax commons at the Home Depot. They were instrumental

337
00:22:04,282 --> 00:22:07,634
special shout. But to Jeff Anderson who gave

338
00:22:07,672 --> 00:22:10,594
a lot of feedback on this talk, helped make this talk better,

339
00:22:10,712 --> 00:22:14,686
as well as Jonathan Davis who helped me with Obs and getting this

340
00:22:14,728 --> 00:22:18,230
all pulled together. Lastly, and not least,

341
00:22:18,300 --> 00:22:21,154
I wanted to give a shout out to dinner bursary.

342
00:22:21,282 --> 00:22:24,550
He was my mentor when I first started into Java,

343
00:22:26,730 --> 00:22:30,506
told me about the conference I did my first presentation at this year at

344
00:22:30,528 --> 00:22:33,898
Devnexus. Without him I would definitely not be doing this today.

345
00:22:33,984 --> 00:22:37,882
So a huge thank you to him. All right,

346
00:22:38,016 --> 00:22:41,374
I've reached the end. Give me a second here and I will actually pull

347
00:22:41,412 --> 00:22:45,006
together my twitter handle as

348
00:22:45,028 --> 00:22:48,302
well as where you can find the code behind all this awesome work.

349
00:22:48,356 --> 00:22:51,520
So that way you can take a look see.

350
00:22:52,050 --> 00:22:56,002
All right, let me pull up visual studio code

351
00:22:56,056 --> 00:22:59,666
and I'm going to put it on a try to put it on

352
00:22:59,688 --> 00:23:03,106
a blank area. All right, so Twitter could like to

353
00:23:03,128 --> 00:23:06,422
find me. I am ehawk 61

354
00:23:06,476 --> 00:23:10,342
on whoops, provided I can type ehawk 61

355
00:23:10,396 --> 00:23:13,590
on Twitter. As far as the GitHub repo,

356
00:23:15,370 --> 00:23:26,122
if you go to GitHub.com 61,

357
00:23:26,176 --> 00:23:29,898
you'll find me. And actually I'm going to

358
00:23:29,904 --> 00:23:33,018
see if I can follow the link real quick because that's going to be faster

359
00:23:33,034 --> 00:23:36,318
than me trying to remember it. When you get to the

360
00:23:36,324 --> 00:23:40,186
page. See my face here and what you're

361
00:23:40,218 --> 00:23:44,706
looking for in those repos is migrating junit 405 and

362
00:23:44,728 --> 00:23:48,446
I will actually pull that together. Go back here into visual

363
00:23:48,478 --> 00:23:52,834
studio code and

364
00:23:52,872 --> 00:23:57,190
give the full link. Well, provided I actually copy and paste.

365
00:23:57,610 --> 00:23:58,840
Try that again.

366
00:24:02,730 --> 00:24:05,990
All right, so GitHub.com ehoc 61

367
00:24:06,060 --> 00:24:09,974
migrating four junit five so

368
00:24:10,012 --> 00:24:13,530
you can find the code for all this. I'm in the process of pulling together

369
00:24:13,600 --> 00:24:17,686
slides to put up with the code that are exact duplicates of what I presented

370
00:24:17,718 --> 00:24:21,114
today. Feel free to reach out if you have any

371
00:24:21,152 --> 00:24:24,860
questions, concerns. Thanks again for the opportunity to speak today.

372
00:24:25,870 --> 00:24:29,306
Be safe out there and looking forward to when we're all able to

373
00:24:29,328 --> 00:24:32,110
be back together and in person. See ya.

