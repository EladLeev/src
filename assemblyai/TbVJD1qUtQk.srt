1
00:00:41,090 --> 00:00:44,274
Hello everyone, my name is Akanksha. Welcome to today's session.

2
00:00:44,402 --> 00:00:47,654
There are three new trends we are seeing and I'm going to talk about each

3
00:00:47,692 --> 00:00:51,086
one of them in detail. The first trend we are seeing is that there is

4
00:00:51,108 --> 00:00:54,926
an explosion of data from all the connected devices. The growth of

5
00:00:54,948 --> 00:00:57,914
data is coming from devices like mobile phones,

6
00:00:57,962 --> 00:01:01,866
smartwatches, IoT devices and many more connected

7
00:01:01,898 --> 00:01:05,170
devices. Even applications are actually generating data,

8
00:01:05,240 --> 00:01:08,242
the social media, the way we are purchasing things.

9
00:01:08,296 --> 00:01:11,586
So mobile phones generate a lot of

10
00:01:11,608 --> 00:01:15,474
data. By our own estimate, the volume of data is

11
00:01:15,512 --> 00:01:19,154
growing from ten x every five years. To take advantage

12
00:01:19,202 --> 00:01:22,374
of all of this data, you need to be able to partner with

13
00:01:22,412 --> 00:01:26,134
someone who can easily manage this volume of data.

14
00:01:26,252 --> 00:01:29,526
The second trend that we are seeing is microservices.

15
00:01:29,638 --> 00:01:33,594
Now, microservices are now more popular because application

16
00:01:33,712 --> 00:01:37,642
needs have changed. Applications now need to scale quickly

17
00:01:37,776 --> 00:01:41,262
to potentially millions of users. They need to have

18
00:01:41,316 --> 00:01:44,686
global availability, manage petabytes of data

19
00:01:44,788 --> 00:01:48,862
and responses in milliseconds. Now, microservices allow

20
00:01:48,996 --> 00:01:52,522
small groups of developers to build these modern applications

21
00:01:52,586 --> 00:01:56,046
and innovate faster AWS. They can independently

22
00:01:56,158 --> 00:01:59,746
build and grow new products for their businesses without bringing the

23
00:01:59,768 --> 00:02:03,314
whole application or the website down. And the third trend that we are seeing

24
00:02:03,352 --> 00:02:06,914
is there's a transition to DevOps models. Now businesses

25
00:02:06,962 --> 00:02:10,662
are transforming from an IT model to a DevOps model,

26
00:02:10,796 --> 00:02:15,026
which gives developer more power to push code to production faster.

27
00:02:15,138 --> 00:02:19,030
It also uses automated tools like continuous development,

28
00:02:19,110 --> 00:02:22,570
continuous deployment and continuous integration of new code.

29
00:02:22,640 --> 00:02:26,390
So these are like three trends that are driving the new requirement

30
00:02:26,470 --> 00:02:29,606
and need for purpose build databases.

31
00:02:29,718 --> 00:02:33,950
Now let's also transition into topic of self managed databases.

32
00:02:34,370 --> 00:02:38,270
Self managing your database is a tedious, time consuming and

33
00:02:38,340 --> 00:02:42,046
expensive task. And if you guys have worked on

34
00:02:42,068 --> 00:02:45,486
databases or worked as a DBS, and I think you can really correlate

35
00:02:45,518 --> 00:02:49,470
to what I'm saying now, is you have to worry about your operational

36
00:02:49,550 --> 00:02:53,182
efficiency issues such as hardware and software installation.

37
00:02:53,326 --> 00:02:56,622
You need to make sure that your database is fully patched,

38
00:02:56,766 --> 00:03:00,102
all the cpu patches are done, make sure the backups are done

39
00:03:00,156 --> 00:03:03,142
and they're done correctly and accurately as well.

40
00:03:03,276 --> 00:03:06,662
Performance and availability issues are taken care of and

41
00:03:06,716 --> 00:03:10,442
there could be failures, and failures could be very huge ones,

42
00:03:10,496 --> 00:03:14,406
which is like a failure of a primary instance can mean downtime

43
00:03:14,438 --> 00:03:18,102
for your application and lost money for your company. In the worst

44
00:03:18,166 --> 00:03:21,978
case, a faulty backup plan can result in permanent data loss.

45
00:03:22,074 --> 00:03:25,854
Now, many dbas don't even know how the databases will

46
00:03:25,892 --> 00:03:29,246
handle an instance failure until it actually happens.

47
00:03:29,348 --> 00:03:33,034
Now, when using an on premise data center, capacity planning

48
00:03:33,082 --> 00:03:36,210
is regular fact of life. You plan months

49
00:03:36,280 --> 00:03:39,794
in advance, guessing at your growth rate, and then you

50
00:03:39,832 --> 00:03:43,614
overestimate to be on the safer side. And by doing this you're

51
00:03:43,662 --> 00:03:47,538
wasting money on unused infrastructure. And occasionally, if you're

52
00:03:47,554 --> 00:03:51,746
not good in projecting your growth rate or your need, you underestimate

53
00:03:51,778 --> 00:03:56,050
it and then you leave your customers unhappy with unexpected downtime.

54
00:03:56,130 --> 00:03:59,766
Now as a DBA, we really want you to innovate on behalf of

55
00:03:59,788 --> 00:04:03,074
your customers and not manage infrastructure.

56
00:04:03,202 --> 00:04:06,106
This is like a shared model that we have, but we'll start off with the

57
00:04:06,128 --> 00:04:09,546
left hand side. So if you look at the left hand column, this is what

58
00:04:09,568 --> 00:04:13,242
we actually spoke about just now, where you look after the whole stack,

59
00:04:13,306 --> 00:04:17,130
starting from server provisioning, patching, configuration and recovery.

60
00:04:17,210 --> 00:04:20,766
And on the right hand side is shared model by AWS, which is

61
00:04:20,788 --> 00:04:24,562
also like our fully managed database services. By AWS we

62
00:04:24,616 --> 00:04:28,302
handle all the fundamental operation. You get the patching,

63
00:04:28,366 --> 00:04:32,910
minor upgrades without downtime, automated backup failover,

64
00:04:33,070 --> 00:04:36,630
high availability and durability is taken care of and we are able to provide

65
00:04:36,700 --> 00:04:40,646
you all these features through a console with single click because we

66
00:04:40,668 --> 00:04:44,034
are using AWS cloud the AWS cloud is split

67
00:04:44,082 --> 00:04:47,894
into different AWS region. Each region is split into multiple

68
00:04:47,942 --> 00:04:51,466
availability zone which acts like a

69
00:04:51,488 --> 00:04:55,002
separate data centers within the region. When you're using

70
00:04:55,056 --> 00:04:58,554
managed databases on AWS, your database storage is

71
00:04:58,592 --> 00:05:02,302
automatically scaled according to your needs so you will never

72
00:05:02,356 --> 00:05:06,270
have to run out of disk space. Your database instance size

73
00:05:06,340 --> 00:05:10,126
or the cluster size can be increased as needed quickly in

74
00:05:10,148 --> 00:05:13,726
the console. We are based on the

75
00:05:13,748 --> 00:05:17,170
model which is like pay as you go model which is based

76
00:05:17,240 --> 00:05:20,414
on you pay only for the instance and storage

77
00:05:20,462 --> 00:05:24,114
that you use. This results in more flexibility and

78
00:05:24,152 --> 00:05:28,018
obviously less using upfront. As a database administrator,

79
00:05:28,114 --> 00:05:31,734
you provide value by assisting on schema design,

80
00:05:31,852 --> 00:05:36,402
query optimization and access control, building new applications

81
00:05:36,466 --> 00:05:40,154
and making your customers happy, and not by

82
00:05:40,272 --> 00:05:43,862
managing infrastructure for the new modern architecture.

83
00:05:43,926 --> 00:05:47,414
AWS offers 15 purpose built database

84
00:05:47,462 --> 00:05:50,894
engines that support diverse data models that allow you to

85
00:05:50,932 --> 00:05:55,146
build use case driven, highly scalable distributed

86
00:05:55,178 --> 00:05:58,734
applications. By picking the best database to solve the

87
00:05:58,772 --> 00:06:02,094
specific problem, customer can break away from the

88
00:06:02,132 --> 00:06:05,970
concept of one size fits all database and focus

89
00:06:06,040 --> 00:06:09,634
on building applications to meet the needs of their business.

90
00:06:09,832 --> 00:06:12,942
This allows customers to scale faster,

91
00:06:13,006 --> 00:06:16,858
innovate faster, build new features faster. Now let's

92
00:06:16,894 --> 00:06:20,374
look at the fully managed database services that we have.

93
00:06:20,492 --> 00:06:23,986
We provide a wide variety of database types. Now if you're

94
00:06:24,018 --> 00:06:27,886
using a relational database, then Amazon RDS includes

95
00:06:27,938 --> 00:06:31,594
supports for seven different relational database engines. This could

96
00:06:31,632 --> 00:06:35,686
be open source options such as MySQL and postgres.

97
00:06:35,718 --> 00:06:39,954
NoSQL or a commercial option such as Microsoft NoSQL Server

98
00:06:40,022 --> 00:06:43,642
or Oracle database. If you're using a non relational database,

99
00:06:43,706 --> 00:06:46,318
AWS offer multiple options there too.

100
00:06:46,404 --> 00:06:50,842
AWS document DBS is a fully managed MongoDB

101
00:06:50,906 --> 00:06:54,766
compatible document database. Amazon Elastic Cache provides

102
00:06:54,798 --> 00:06:58,382
support for both Redis and Memcache, and Amazon

103
00:06:58,446 --> 00:07:02,094
Keyspace is an Apache Cassandra compatible database

104
00:07:02,142 --> 00:07:06,290
with serverless scaling and pricing characteristics.

105
00:07:06,450 --> 00:07:09,926
Now let's look into the managed database that

106
00:07:09,948 --> 00:07:13,666
we have and how do you move basically to the managed database

107
00:07:13,698 --> 00:07:17,602
services? The most straightforward and simple solution for

108
00:07:17,676 --> 00:07:22,038
customers who are struggling to maintain their own relational databases

109
00:07:22,134 --> 00:07:26,090
at scale is to move to a managed database service like

110
00:07:26,160 --> 00:07:30,270
Amazon RDS or Amazon Aurora. In most cases, the customers

111
00:07:30,340 --> 00:07:33,706
can migrate workloads and application to a managed

112
00:07:33,738 --> 00:07:37,438
service without needing to rearchitect their application,

113
00:07:37,604 --> 00:07:41,706
and their teams can continue to leverage the same database skill

114
00:07:41,738 --> 00:07:45,774
set. Now some of the customers who migrate to self

115
00:07:45,812 --> 00:07:49,262
managed databases are essentially running the databases on

116
00:07:49,316 --> 00:07:53,598
on premises. They would like to reduce database burden,

117
00:07:53,774 --> 00:07:57,954
they do not want to re architect and they would like to have better performance

118
00:07:58,002 --> 00:08:01,462
and availability and scalability. Now the easy way

119
00:08:01,516 --> 00:08:05,138
is customer can lift and shift their self managed databases

120
00:08:05,234 --> 00:08:09,174
like Oracle SQL Server and postgres NoSQL

121
00:08:09,222 --> 00:08:12,874
MariaDB to Amazon RDS. For customer looking

122
00:08:12,912 --> 00:08:16,682
for a better performance and availability, they can move their

123
00:08:16,736 --> 00:08:20,290
lift and shift their NoSQL and postgres databases

124
00:08:20,390 --> 00:08:23,902
to Amazon Aurora and get three to five times better

125
00:08:23,956 --> 00:08:27,534
through output. Now Amazon RDS provides a

126
00:08:27,572 --> 00:08:30,526
couple of very nice features. For example,

127
00:08:30,628 --> 00:08:34,574
it provides you the scale and performance and it automates

128
00:08:34,622 --> 00:08:38,334
the time consuming administrative tasks like provisioning

129
00:08:38,382 --> 00:08:42,066
and database setup and patching, and the backup customers who are

130
00:08:42,088 --> 00:08:45,726
using non relational databases like MongoDB and Redis

131
00:08:45,838 --> 00:08:49,842
as document and in memory databases for use cases

132
00:08:49,906 --> 00:08:52,866
such as content management, personalization,

133
00:08:53,058 --> 00:08:57,270
mobile application catalog, real time gaming.

134
00:08:57,770 --> 00:09:01,306
So the most straightforward and simple solution for these customers

135
00:09:01,408 --> 00:09:04,874
who are struggling to maintain their non relational databases is

136
00:09:04,912 --> 00:09:08,614
to move any of into our fully managed non relational database

137
00:09:08,662 --> 00:09:12,138
services like moving self managed Mongo databases

138
00:09:12,234 --> 00:09:15,930
to Amazon document DB, moving self managed

139
00:09:16,010 --> 00:09:20,122
in memory databases like Redis and elastic cache to Amazon

140
00:09:20,186 --> 00:09:24,266
Elastic cache. And in most cases, these customers can migrate workloads

141
00:09:24,298 --> 00:09:27,806
and applications to a managed service without needing to

142
00:09:27,828 --> 00:09:31,886
re architect their applications and their team can continue to leverage

143
00:09:31,998 --> 00:09:35,826
the databases that they are using now. Customer wants

144
00:09:35,848 --> 00:09:39,206
to move away I think most of you

145
00:09:39,228 --> 00:09:43,058
will also correlate it. You would like to move away from old car databases

146
00:09:43,154 --> 00:09:47,234
because they are expensive, there's a proprietary, there's a lock

147
00:09:47,282 --> 00:09:50,818
in, they offer pumative licensing and comes in

148
00:09:50,844 --> 00:09:54,442
with frequent audits from their vendors, which nobody really

149
00:09:54,496 --> 00:09:57,834
likes. So even if you are not using that feature, but if you

150
00:09:57,872 --> 00:10:01,274
clicked it, then it will be flagged in the audits and you have to pay

151
00:10:01,312 --> 00:10:04,958
for it. So there's a common trend that we're seeing is customers

152
00:10:05,044 --> 00:10:08,414
would like to move away and go into like a license free

153
00:10:08,452 --> 00:10:12,454
model where they don't have to pay for any license to any of the vendors.

154
00:10:12,602 --> 00:10:16,382
And for that we have built Amazon Aurora,

155
00:10:16,526 --> 00:10:19,950
a MySQL PostgreSQL compatible relational

156
00:10:20,030 --> 00:10:23,854
database built for the cloud that combines the performance

157
00:10:23,902 --> 00:10:27,986
and availability of commercial databases while providing

158
00:10:28,018 --> 00:10:31,122
the cost effectiveness of open source databases.

159
00:10:31,266 --> 00:10:34,566
Now there are no annual licenses you pay for

160
00:10:34,588 --> 00:10:38,290
the capacity you use. This turns your capital expenditure

161
00:10:38,370 --> 00:10:41,514
into operational expenditure and better matches your

162
00:10:41,552 --> 00:10:45,274
cost with your revenue. Now some of the Aurora key features are

163
00:10:45,312 --> 00:10:49,146
it is highly durable Amazon Aurora database volumes are

164
00:10:49,168 --> 00:10:53,018
up to ten gb in segments and each segment is replicated

165
00:10:53,114 --> 00:10:56,522
six ways across availability zone. It's highly fault

166
00:10:56,586 --> 00:11:00,526
tolerance because it handles the loss of up to two out of

167
00:11:00,548 --> 00:11:04,242
six data copies without losing write availability or

168
00:11:04,296 --> 00:11:07,742
three out of six copies without losing read availability.

169
00:11:07,886 --> 00:11:11,422
It monitors your disk and nodes for failure

170
00:11:11,566 --> 00:11:15,746
and automatically replaces or repairs them if

171
00:11:15,768 --> 00:11:19,074
it finds out anything is not working fine. There's a continuous

172
00:11:19,122 --> 00:11:23,122
backup, incremental continuous backup with no impact on database

173
00:11:23,186 --> 00:11:27,666
performance. It is obviously designed to be compatible with MySQL and PostgreSQL.

174
00:11:27,698 --> 00:11:32,054
So if you are on any of the commercial database

175
00:11:32,102 --> 00:11:35,558
engines and if you would like to go into microservices,

176
00:11:35,654 --> 00:11:39,178
this is also the right time to think about going completely

177
00:11:39,344 --> 00:11:43,322
license free and move to any of the cloud native databases

178
00:11:43,386 --> 00:11:46,606
that we have. And Amazon Aurora is actually one of them.

179
00:11:46,708 --> 00:11:50,874
Now let's look into how is the application landscape

180
00:11:51,002 --> 00:11:53,954
changing right now. Back in 1670s,

181
00:11:53,992 --> 00:11:57,026
mainframe was prominent way of building application.

182
00:11:57,208 --> 00:12:01,214
This lasted until 80s where the client server was introduced

183
00:12:01,262 --> 00:12:05,442
and then that also significantly changed the way applications were

184
00:12:05,496 --> 00:12:08,806
built. And then the Internet arrived in ninety s and as

185
00:12:08,828 --> 00:12:12,322
a result the underlying data model also changed

186
00:12:12,386 --> 00:12:15,730
predominantly and database still remained monolithic.

187
00:12:15,810 --> 00:12:19,290
But now this has changed. Now we fast forward it again to today.

188
00:12:19,360 --> 00:12:23,114
Then you see that microservice architectures are how applications are

189
00:12:23,152 --> 00:12:27,094
built in the cloud. Microservices has finally reached

190
00:12:27,142 --> 00:12:30,474
the database and this allows developers to do

191
00:12:30,512 --> 00:12:33,710
what they do best. They break large applications into

192
00:12:33,780 --> 00:12:37,246
smaller services and pick the right tool for the right job.

193
00:12:37,348 --> 00:12:40,666
They want to avoid a single overburdened

194
00:12:40,698 --> 00:12:44,706
database with one storage engine and one compute engine

195
00:12:44,808 --> 00:12:48,254
trying to handle every single excess pattern.

196
00:12:48,382 --> 00:12:51,902
Now there are other things that we have also seen that latency

197
00:12:51,966 --> 00:12:55,506
requirements are much lower and they are expected to be able to

198
00:12:55,528 --> 00:12:59,254
handle millions of transactions per second. So in general,

199
00:12:59,372 --> 00:13:02,854
the application landscape is changing. And if you look into this,

200
00:13:02,972 --> 00:13:06,710
the change requirement of applications, the user growth is also

201
00:13:06,780 --> 00:13:09,814
changing, right? So the applications are going global,

202
00:13:09,862 --> 00:13:13,734
right? Businesses are capturing more data. As I said earlier,

203
00:13:13,862 --> 00:13:17,178
there's a huge data growth happening, there's a huge

204
00:13:17,344 --> 00:13:20,414
emphasis on performance. Businesses don't want to

205
00:13:20,452 --> 00:13:23,678
dilute the user experience these days, right?

206
00:13:23,844 --> 00:13:27,434
And if you talk about scalability, then a lot of businesses

207
00:13:27,482 --> 00:13:31,294
are embarking their digital transformation. And these measures of

208
00:13:31,332 --> 00:13:34,862
scales are component by number of devices that access

209
00:13:34,916 --> 00:13:38,402
their application. There are billion of smartphones in the world

210
00:13:38,456 --> 00:13:42,402
and mobile is bare minimum expectations in 2021.

211
00:13:42,456 --> 00:13:45,814
So all of these requirements are actually changing the

212
00:13:45,852 --> 00:13:49,842
application landscape, the user expectations and the requirements

213
00:13:49,906 --> 00:13:53,478
around it. And to tackle this, we have provided 15

214
00:13:53,564 --> 00:13:57,586
purpose build database engines that support diverse data models

215
00:13:57,618 --> 00:14:01,130
that allow you to build use case driven applications

216
00:14:01,470 --> 00:14:04,938
by picking the best database to solve specific problem

217
00:14:05,024 --> 00:14:08,746
and customer can break free from one size fits all.

218
00:14:08,848 --> 00:14:12,302
And if you go from here, then you can see we have

219
00:14:12,356 --> 00:14:15,850
relational databases and we have document DB.

220
00:14:15,930 --> 00:14:19,226
We have in memory cache databases.

221
00:14:19,418 --> 00:14:22,894
Let's look at the variety of purposeful databases that

222
00:14:22,932 --> 00:14:26,894
we have. We have key value database DynamoDb

223
00:14:26,942 --> 00:14:30,674
which stores database as a collection of key value pairs and

224
00:14:30,712 --> 00:14:35,230
it is idly used for ecommerce shopping cart product catalog.

225
00:14:35,390 --> 00:14:39,046
The next one we have is document DBS that stores data in

226
00:14:39,068 --> 00:14:43,250
a JSON or JSON live document. And it's ideal for mobile applications

227
00:14:43,330 --> 00:14:47,138
and cataloging in memory databases. Store databases

228
00:14:47,234 --> 00:14:50,614
in memory for low latency access and they're ideal

229
00:14:50,662 --> 00:14:54,170
for caching and gaming. We have craft databases

230
00:14:54,670 --> 00:14:58,554
that represents relationship directly and are ideally used for

231
00:14:58,592 --> 00:15:03,018
social networking or fraud detection. Then we have time series databases

232
00:15:03,194 --> 00:15:06,782
that stores data in time order and append only,

233
00:15:06,836 --> 00:15:10,346
which is ideal for DevOps and application monitoring.

234
00:15:10,458 --> 00:15:15,294
And last, we have ledger databases that stores in immutable or transmittable

235
00:15:15,422 --> 00:15:19,022
cryptographic logs. And it is ideal for finance,

236
00:15:19,086 --> 00:15:21,806
manufacturing, HR, payroll,

237
00:15:21,998 --> 00:15:25,234
retail invoices that I can think of. So we have

238
00:15:25,272 --> 00:15:28,854
a huge broad spectrum of all these purpose build

239
00:15:28,892 --> 00:15:32,546
databases. Now in the next step, I really want to dive

240
00:15:32,578 --> 00:15:36,626
deep into DynamoDB. It is a key value and document database

241
00:15:36,658 --> 00:15:40,262
that delivers single digit, multi second performance at any

242
00:15:40,316 --> 00:15:44,494
scale. It's a fully managed, multi region, multi master

243
00:15:44,642 --> 00:15:48,694
database that is built in with security, backup and restore.

244
00:15:48,822 --> 00:15:52,874
And some of the key features or some of the highlights are DynamoDB

245
00:15:52,922 --> 00:15:56,142
can handle more than 10 trillion requests per

246
00:15:56,196 --> 00:16:00,394
day and can support peaks of more than 20 million requests

247
00:16:00,442 --> 00:16:04,766
per second. Okay, so DynamoDB

248
00:16:04,878 --> 00:16:08,830
actually automatically scales tables to adjust for capacity

249
00:16:08,910 --> 00:16:12,050
and maintains performance with zero administration.

250
00:16:12,470 --> 00:16:15,790
Availability and fault tolerance are built in eliminating

251
00:16:15,870 --> 00:16:19,618
the need to architect your application for these availabilities.

252
00:16:19,714 --> 00:16:22,450
It encrypts all the data at rest. By default.

253
00:16:22,530 --> 00:16:25,894
We have point in time recovery feature that helps you

254
00:16:25,932 --> 00:16:30,314
protect your tables from accidental delete or

255
00:16:30,512 --> 00:16:34,662
write operations. DynamoDB is serverless. Also it integrates

256
00:16:34,726 --> 00:16:38,662
with lambda AWS lambda to provide triggers,

257
00:16:38,726 --> 00:16:42,090
and using triggers you can automatically execute

258
00:16:42,170 --> 00:16:45,710
a custom function when item level changes

259
00:16:45,860 --> 00:16:49,486
are done in the DynamoDB table. So hundreds of

260
00:16:49,508 --> 00:16:53,314
thousands of AWS customers have chosen DynamoDB as their key

261
00:16:53,352 --> 00:16:56,226
value document database for mobile, web,

262
00:16:56,328 --> 00:17:00,082
gaming, IoT and all applications that need

263
00:17:00,216 --> 00:17:04,046
low latency data access at any scale. The next database

264
00:17:04,078 --> 00:17:08,102
I would like to talk about is documentDB. A large variety of

265
00:17:08,156 --> 00:17:11,574
applications, drivers and tools that customers

266
00:17:11,692 --> 00:17:15,442
already use today with their MongoDB non relational

267
00:17:15,506 --> 00:17:18,706
databases can be used with Amazon document

268
00:17:18,738 --> 00:17:22,774
DBS with little or no change. It is compatible with MongoDB

269
00:17:22,822 --> 00:17:25,962
3640 drivers and tools and

270
00:17:26,016 --> 00:17:29,610
latest support can be found on our website. But with the launch of the support

271
00:17:29,680 --> 00:17:33,146
of MongoDB 40 compatibility, Amazon document

272
00:17:33,178 --> 00:17:37,406
DB supports the ability to perform asset transaction across

273
00:17:37,588 --> 00:17:41,706
customers. Customers can easily migrate their MongoDB

274
00:17:41,738 --> 00:17:45,506
databases on premises or from on premises to

275
00:17:45,528 --> 00:17:48,862
either EC two or to document DB.

276
00:17:49,006 --> 00:17:52,242
Document DB is also very much integrated with our

277
00:17:52,296 --> 00:17:55,922
Amazon Cloud Watch which provides you metrics

278
00:17:55,986 --> 00:17:59,462
for your database instances and it provides you some very key

279
00:17:59,516 --> 00:18:03,314
operational metrics. For example, how does your cluster

280
00:18:03,362 --> 00:18:06,562
look like compute memory storage through output.

281
00:18:06,626 --> 00:18:10,298
So since it is integrated you can get alerts. You can see the

282
00:18:10,304 --> 00:18:13,578
current status of these metrics here and as well.

283
00:18:13,664 --> 00:18:17,002
And lastly, it supports 15 database read

284
00:18:17,056 --> 00:18:20,606
replicas as well. Now database Freedom is

285
00:18:20,708 --> 00:18:23,994
an AWS database and analytics modernization

286
00:18:24,122 --> 00:18:27,514
incentive focused on accelerating enterprise

287
00:18:27,562 --> 00:18:30,634
migrations from Oracle and SQL server,

288
00:18:30,682 --> 00:18:33,906
Netiza, Teradata Cassandra or MongoDB platform

289
00:18:34,008 --> 00:18:37,330
to AWS cloud native database services.

290
00:18:37,480 --> 00:18:40,974
It is an incentive program, but it not only provides you an expert

291
00:18:41,022 --> 00:18:44,302
advice, it provides you workshop partners migration

292
00:18:44,366 --> 00:18:47,874
assistant to help you with your migrations

293
00:18:47,922 --> 00:18:51,206
and guide you through your migrations. Now we have a

294
00:18:51,228 --> 00:18:55,046
series of migration workbooks or playbooks that we call them. They are

295
00:18:55,068 --> 00:18:58,954
freely available for download on our website and provides a

296
00:18:58,992 --> 00:19:02,586
step by step guide outlining how migrating your

297
00:19:02,608 --> 00:19:07,094
databases or what you should look out for. These are extraordinarily

298
00:19:07,142 --> 00:19:10,774
detailed and can help anyone who's looking to migrate themselves

299
00:19:10,912 --> 00:19:14,590
with common technological hurdles or

300
00:19:14,740 --> 00:19:18,238
things to watch out for. I also would like to talk about

301
00:19:18,404 --> 00:19:21,774
DMS which is data migration service that we have

302
00:19:21,812 --> 00:19:25,614
and it is used to migrate between homogeneous database

303
00:19:25,662 --> 00:19:29,150
types, such as going from one MySQL instance

304
00:19:29,230 --> 00:19:33,294
to a new MySQL instance. Or you can use DMs to migrate

305
00:19:33,342 --> 00:19:36,470
between heterogeneous databases, such as

306
00:19:36,540 --> 00:19:40,246
moving from a commercial databases like cloud to a

307
00:19:40,268 --> 00:19:43,362
cloud, native relational databases like Aurora.

308
00:19:43,506 --> 00:19:46,738
There's another great tool that we have which is schema

309
00:19:46,754 --> 00:19:51,274
conversion tool, and it helps you to migrate your database schema between

310
00:19:51,472 --> 00:19:55,114
heterogeneous data types. It attempts to convert all

311
00:19:55,152 --> 00:19:58,902
the schema and code objects of the target database engines,

312
00:19:58,966 --> 00:20:02,794
including the stored procedures and functions. It also scans

313
00:20:02,842 --> 00:20:06,494
and converts your embedded SQL statement in

314
00:20:06,532 --> 00:20:10,590
application code. So in combination of playbook dms,

315
00:20:11,650 --> 00:20:15,534
it is very easy to migrate your databases to AWS

316
00:20:15,662 --> 00:20:19,566
let's look into partners we have quite a range

317
00:20:19,598 --> 00:20:23,282
of partners with us, but the question that I get asked

318
00:20:23,336 --> 00:20:27,118
is why do we need partners? We really recommend

319
00:20:27,224 --> 00:20:30,470
looking into our partners that can help you to do

320
00:20:30,540 --> 00:20:34,022
any proof of concept or actually can do migrations for you

321
00:20:34,076 --> 00:20:37,686
as well. They help you reduce your operational cost so

322
00:20:37,708 --> 00:20:41,340
that you can focus on innovation as well. So here is

323
00:20:41,950 --> 00:20:45,366
quite a few of our partners. We have migration partners.

324
00:20:45,398 --> 00:20:49,194
We also have license advisory partner here as well.

325
00:20:49,232 --> 00:20:52,846
So if you would like any help on your licenses or you would like

326
00:20:52,868 --> 00:20:56,794
to know more about them, then you can refer any of our partners

327
00:20:56,842 --> 00:20:59,982
here to help you with that. And lastly, we have

328
00:21:00,036 --> 00:21:04,042
lot of resources. We have also launched our database certification.

329
00:21:04,186 --> 00:21:07,674
So if you guys would like to know more about databases,

330
00:21:07,802 --> 00:21:11,166
you can visit the website mentioned here, or you can

331
00:21:11,188 --> 00:21:14,742
take the database certification as well.

332
00:21:14,916 --> 00:21:18,118
More information, contact us and then

333
00:21:18,204 --> 00:21:21,170
once again, thank you for joining today's session.

