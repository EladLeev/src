1
00:00:27,490 --> 00:00:31,270
Hi, I'm Travis Carey, it director here at Teleport, and today

2
00:00:31,340 --> 00:00:34,258
for my talk, I'm going to tell you how you can get rid of Jira

3
00:00:34,274 --> 00:00:37,814
tickets in your organization by embracing infrastructure as

4
00:00:37,852 --> 00:00:41,174
code and going to give you some practical examples today,

5
00:00:41,292 --> 00:00:44,722
as well as kind of explaining why you should do this and the general philosophies

6
00:00:44,786 --> 00:00:46,840
behind it. So let's get started.

7
00:00:48,970 --> 00:00:52,714
So terraform, not Jira tickets, pass your compliance audits the developers

8
00:00:52,762 --> 00:00:55,600
way and actually improve your security too.

9
00:00:56,210 --> 00:00:59,834
So quick disclaimer this advice primarily applies

10
00:00:59,882 --> 00:01:03,534
to a Sock two type two certification, and I can only 100%

11
00:01:03,572 --> 00:01:07,150
guarantee this advice works because that's the one certification that

12
00:01:07,220 --> 00:01:10,402
teleport has. But I can't tell you, I believe it most

13
00:01:10,456 --> 00:01:13,874
likely works 100% for PCI 27 one

14
00:01:14,072 --> 00:01:17,990
because that's about 90% similar. Should note that NIST

15
00:01:18,490 --> 00:01:22,230
for government certification and socs for public companies

16
00:01:22,300 --> 00:01:25,718
are much stricter. But I do believe, having gone through some of

17
00:01:25,724 --> 00:01:28,790
those processes, that these same lessons can be applied.

18
00:01:29,130 --> 00:01:33,046
Should also note there's a little bit of trash talking of ticketing systems

19
00:01:33,078 --> 00:01:36,486
here, but they do serve an important purpose, and the purpose

20
00:01:36,518 --> 00:01:39,946
is primarily for support teams, and we'll go into a little more detail about that

21
00:01:39,968 --> 00:01:43,578
before. And finally, if you're really embracing infrastructure

22
00:01:43,594 --> 00:01:47,566
as code, you have to remember that IC pipelines have really

23
00:01:47,668 --> 00:01:51,278
powerful API keys, and you have to take a lot of

24
00:01:51,284 --> 00:01:54,794
work to secure those. There's lots of ways to exfiltrate API

25
00:01:54,842 --> 00:01:58,882
keys, and if you're replacing dangerous console access with

26
00:01:58,936 --> 00:02:02,274
infrastructureascode as code, you have to make sure that you have a way to protect

27
00:02:02,312 --> 00:02:04,962
those API keys. And we're not going to cover that in this talk,

28
00:02:05,016 --> 00:02:08,040
but there's lots of resources you can look up for that.

29
00:02:09,210 --> 00:02:12,966
All right, let's jump into this. So first,

30
00:02:13,148 --> 00:02:16,710
why are we doing this? Well, it's mainly because hackers don't care

31
00:02:16,780 --> 00:02:20,474
about your change management process. No amount of

32
00:02:20,512 --> 00:02:23,580
Jira tickets is going to actually improve your security.

33
00:02:25,390 --> 00:02:28,938
So we have to think about why did we even start

34
00:02:29,024 --> 00:02:32,822
doing tickets in the first place? If they're not helping security,

35
00:02:32,976 --> 00:02:36,922
why are we doing it? I mean, isn't the point of doing compliance audits

36
00:02:37,066 --> 00:02:40,394
to actually have your organization's security be improved?

37
00:02:40,522 --> 00:02:44,126
So how did we end up with this process that we

38
00:02:44,148 --> 00:02:47,538
do this via tickets? And there are some good reasons, but they're a

39
00:02:47,544 --> 00:02:51,042
bit dated. So let's look at some of the common reasons that people

40
00:02:51,096 --> 00:02:54,962
decide to start using ticketing systems. So often

41
00:02:55,016 --> 00:02:58,694
people will say, well, we use Jira for planning, so we should also use it

42
00:02:58,732 --> 00:03:01,974
for change management you'll hear because it or

43
00:03:02,012 --> 00:03:04,950
systems work is considered a service organization.

44
00:03:05,850 --> 00:03:09,740
Or finally you might hear from some older IT directors that

45
00:03:10,270 --> 00:03:13,818
we follow itil philosophies and we'll dive a little

46
00:03:13,824 --> 00:03:17,674
bit into what that means if you haven't heard of it before. So first

47
00:03:17,712 --> 00:03:21,654
jumping know teams will say we already use Jira,

48
00:03:21,702 --> 00:03:25,690
so that's just the way it is. But GitHub

49
00:03:25,770 --> 00:03:28,874
is a fully featured tool for both planning

50
00:03:28,922 --> 00:03:32,238
and change management, and GitHub has improved a lot

51
00:03:32,324 --> 00:03:35,166
in the planning front, especially recently.

52
00:03:35,278 --> 00:03:39,026
You can assign your issues to project boards and

53
00:03:39,048 --> 00:03:42,434
have kanban for planning sprints and

54
00:03:42,472 --> 00:03:46,542
doing agile just like you would in Jira. But it's even better because

55
00:03:46,696 --> 00:03:50,294
they're innately linked with pull requests. You can use tags for doing

56
00:03:50,332 --> 00:03:54,290
automation, they're also great for doing auditing, to query

57
00:03:54,450 --> 00:03:57,874
different types of tickets for different views, great for release

58
00:03:57,922 --> 00:04:01,674
management that you can set up milestones. All this is really built in.

59
00:04:01,792 --> 00:04:04,538
And if you've worked for a large enterprise, they might have done a lot of

60
00:04:04,544 --> 00:04:08,006
integrations that are really linking a lot of the Jira

61
00:04:08,038 --> 00:04:11,738
functionality to GitHub. But why do we need two systems?

62
00:04:11,834 --> 00:04:15,450
That's just more work to integrate. We should stay native

63
00:04:15,530 --> 00:04:18,986
using the tools that where developers already are, and that's

64
00:04:19,018 --> 00:04:22,614
GitHub. So the next part is change management.

65
00:04:22,762 --> 00:04:26,370
Change management often happens in Jira because

66
00:04:26,440 --> 00:04:30,670
that's maybe where your business people are but not your developers.

67
00:04:30,830 --> 00:04:34,590
But change management works way better in GitHub.

68
00:04:34,750 --> 00:04:37,890
A pull request is a change request,

69
00:04:37,970 --> 00:04:41,880
but it's better than a Jira change request because

70
00:04:42,810 --> 00:04:46,566
you can't just change what it is. Once you ship it,

71
00:04:46,588 --> 00:04:50,010
when you merge that you approve the exact code or the exact

72
00:04:50,080 --> 00:04:53,738
infrastructure change described there, which is very different than

73
00:04:53,904 --> 00:04:57,434
if you do can. Older form of change management where

74
00:04:57,632 --> 00:05:01,294
you are describing a change in a Jira ticket and then

75
00:05:01,332 --> 00:05:05,226
someone has to manually perform that change. Now if they're manually performing

76
00:05:05,258 --> 00:05:08,574
that change, they could make a mistake or

77
00:05:08,772 --> 00:05:11,818
if their credentials got stolen by a hacker,

78
00:05:11,994 --> 00:05:15,646
any change could be made with those credentials versus doing it the Gitops

79
00:05:15,678 --> 00:05:19,778
way only what's approved via git is what ultimately happens.

80
00:05:19,864 --> 00:05:22,962
So in that scenario, if you compromise developer account,

81
00:05:23,016 --> 00:05:26,914
you'd have to submit a pr and then convince someone else to

82
00:05:26,952 --> 00:05:30,726
code review it and it would also have to pass your automatic tests. And this

83
00:05:30,748 --> 00:05:34,310
is a huge improvement that we all should be very familiar with

84
00:05:34,460 --> 00:05:38,330
in the DevOps world of automatic testing has already started

85
00:05:38,400 --> 00:05:42,940
to really replace QA departments and

86
00:05:43,390 --> 00:05:47,450
these other DevOps lessons can replace kind of all of the other needs for

87
00:05:47,520 --> 00:05:50,986
these manual change management things like if you

88
00:05:51,008 --> 00:05:54,954
work in an Itil organization, they might say, oh, you need a rollback

89
00:05:55,002 --> 00:05:58,014
plan in order to ship your change.

90
00:05:58,212 --> 00:06:02,010
And of course with GitHub, rollback is as simple as a revert.

91
00:06:02,170 --> 00:06:05,890
And finally, to make your auditors happy, GitHub is the best

92
00:06:05,960 --> 00:06:09,534
audit trail. We can see exactly what happened, who approved

93
00:06:09,582 --> 00:06:13,506
it, who reverted it, everything is right there. It doesn't have

94
00:06:13,528 --> 00:06:16,834
the kind of reporting that a lot of people really like Jira for,

95
00:06:16,872 --> 00:06:20,514
but it has a very full featured API and you can write some easy scripts

96
00:06:20,562 --> 00:06:24,226
to pull out those kind of csv files. You need to make your auditors

97
00:06:24,258 --> 00:06:27,490
happy. Let's take a look at the next reason. People often

98
00:06:27,580 --> 00:06:31,702
say that we can't use GitHub

99
00:06:31,766 --> 00:06:34,890
and we need Jira. And so often

100
00:06:34,960 --> 00:06:38,246
it's because they say that it is a service organization.

101
00:06:38,358 --> 00:06:42,174
And remember I mentioned that ticketing queues are

102
00:06:42,212 --> 00:06:45,902
for service organizations. But that's the it world

103
00:06:45,956 --> 00:06:49,200
of old. The new it and systems or platform

104
00:06:49,650 --> 00:06:53,358
DevOps way of thinking is that we're a platform team,

105
00:06:53,444 --> 00:06:56,966
is that we want to make tools that enable developers

106
00:06:57,018 --> 00:07:00,734
to do their jobs better. We don't want to do the work for developers

107
00:07:00,782 --> 00:07:04,382
and make those changes for them. We want to give them the tools

108
00:07:04,446 --> 00:07:08,470
so that it happens automatically. It's all about automation here.

109
00:07:08,620 --> 00:07:12,550
Every team that you include in the process slows the process

110
00:07:12,620 --> 00:07:16,738
down dramatically. I think we've all probably worked in an organization

111
00:07:16,834 --> 00:07:20,566
where you have to go through request process to make changes and

112
00:07:20,748 --> 00:07:24,074
you put in a request to it on Monday, they finally get to it on

113
00:07:24,112 --> 00:07:27,834
Tuesday, then they got to send it out for approval. Then it needs

114
00:07:27,872 --> 00:07:31,614
to get reviewed by the change management board or change

115
00:07:31,652 --> 00:07:34,986
advisory board. And before you know it, you've wasted

116
00:07:35,018 --> 00:07:38,606
an entire week just kind of waiting for the changes to get

117
00:07:38,628 --> 00:07:42,186
approved. And those things are really wholly

118
00:07:42,218 --> 00:07:45,742
unnecessary. The most we should do is have two

119
00:07:45,796 --> 00:07:49,282
people, preferably on the same team, two devs. This is just like

120
00:07:49,336 --> 00:07:53,230
your code review process that you're used to. We can apply the same concept

121
00:07:53,310 --> 00:07:56,822
to all sorts of places that we were used to do change

122
00:07:56,876 --> 00:08:00,882
request tickets. For now, I should note that some very strict compliance

123
00:08:00,946 --> 00:08:04,402
requirements that you might find in NIST or Sox.

124
00:08:04,546 --> 00:08:07,942
They do require approval from an independent second

125
00:08:07,996 --> 00:08:11,658
party. And this is often like an application owner. If you need access to

126
00:08:11,664 --> 00:08:15,322
that application, you need to ask the application owner, not someone

127
00:08:15,376 --> 00:08:19,098
on your team, whether that's okay. So it

128
00:08:19,104 --> 00:08:23,086
still fulfills the plus tool rule. Using clever code reviews on

129
00:08:23,108 --> 00:08:26,782
GitHub and code owner files, you can actually make that process

130
00:08:26,916 --> 00:08:30,414
happen pretty automatically. There are also some

131
00:08:30,452 --> 00:08:33,890
other access management tools on the market that help do

132
00:08:34,040 --> 00:08:37,890
access approvals and things like that outside of Jira,

133
00:08:38,630 --> 00:08:42,018
just quickly and easily, rather than having to do it in a

134
00:08:42,024 --> 00:08:45,300
ticket based workflow. And finally,

135
00:08:46,170 --> 00:08:49,926
talking about why it needs to not be

136
00:08:49,948 --> 00:08:53,346
a service organization is that requests just don't

137
00:08:53,378 --> 00:08:57,590
scale. You can't have an effective dev team

138
00:08:57,740 --> 00:09:01,286
and follow the right developers philosophies of like that. We want to ship

139
00:09:01,318 --> 00:09:05,098
code fast, we want to automate things if there's a manual process

140
00:09:05,184 --> 00:09:08,986
in the loop. So if you have to rely on an

141
00:09:09,008 --> 00:09:12,750
it team to say, complete a DNS request for you

142
00:09:12,900 --> 00:09:15,998
and get that approved, it's just not going

143
00:09:16,004 --> 00:09:19,870
to scale. Because if you're shipping fast or you

144
00:09:19,940 --> 00:09:23,854
have developers all over the world, suddenly you need a

145
00:09:23,892 --> 00:09:27,986
really responsive 24 7365

146
00:09:28,088 --> 00:09:31,554
support desk. And that's just way too much to ask from a lot of

147
00:09:31,592 --> 00:09:34,722
small companies. Building a global team is a lot of work.

148
00:09:34,776 --> 00:09:38,466
I know quite personally it's hard work and it's also stressful

149
00:09:38,498 --> 00:09:42,390
for those teams. And it's a bit of a fool's errand of trying to develop

150
00:09:42,460 --> 00:09:46,550
this, especially at a small company, versus instead

151
00:09:46,700 --> 00:09:50,086
investing your time in creating tools and behaving

152
00:09:50,118 --> 00:09:53,482
more like a platform team. And that allows developers to

153
00:09:53,536 --> 00:09:56,874
self serve, solve issues by themselves within

154
00:09:56,912 --> 00:10:00,074
their own time zone, hopefully with another coworker in that

155
00:10:00,112 --> 00:10:03,306
same time zone. And that's what's going to scale,

156
00:10:03,338 --> 00:10:07,130
and that's what's using to allow your organization to have a competitive advantage.

157
00:10:07,290 --> 00:10:11,066
And it's only when you make your it team start developing

158
00:10:11,178 --> 00:10:14,626
or behaving like a developers team rather than being a

159
00:10:14,648 --> 00:10:17,714
service organization. And that's what really allows you

160
00:10:17,752 --> 00:10:20,994
to ditch the queues and the ticket queues that we're also

161
00:10:21,032 --> 00:10:23,940
familiar with that service organizations rely on.

162
00:10:24,870 --> 00:10:28,278
So the final one, ITil. Now, when you

163
00:10:28,284 --> 00:10:31,538
hear this word, I want you to think of a dead dinosaur, because that's

164
00:10:31,554 --> 00:10:35,014
what ITIl is. It's a philosophy from the

165
00:10:35,052 --> 00:10:39,050
past for when it people were racking servers and running

166
00:10:39,120 --> 00:10:42,310
bare metal compute, that's not the case anymore,

167
00:10:42,390 --> 00:10:44,860
and we need to let it go.

168
00:10:45,470 --> 00:10:48,678
So ITIL was created to give you a history lesson,

169
00:10:48,774 --> 00:10:52,682
folks that have hopefully the luck of not working

170
00:10:52,736 --> 00:10:57,166
in an ITIL based organization. These were created to manage processes that

171
00:10:57,268 --> 00:10:59,946
are really manual and error prone.

172
00:11:00,058 --> 00:11:03,646
So if you're having to rack servers, you have to talk

173
00:11:03,668 --> 00:11:07,026
to a lot of teams, you have to talk to finance and procurement, you have

174
00:11:07,048 --> 00:11:10,702
to plan where it's going to go in the rack and doing rollbacks

175
00:11:10,766 --> 00:11:14,574
is not as easy as just saying oh, git, we're going to revert Git

176
00:11:14,622 --> 00:11:18,006
and it's fine. No, a rollback is a

177
00:11:18,028 --> 00:11:21,526
lot of work where it could take hours to move servers around

178
00:11:21,628 --> 00:11:24,870
to reimage servers to rechange configuration.

179
00:11:25,370 --> 00:11:28,914
That's what this was developed for. It was developed for another era.

180
00:11:28,962 --> 00:11:32,186
So trying to hold on to this is not going

181
00:11:32,208 --> 00:11:35,434
to help your developers teams, it's just going to slow them down.

182
00:11:35,552 --> 00:11:38,854
So it's time that you need to stop following

183
00:11:38,902 --> 00:11:42,878
it philosophies from the pre cloud era. It's a different world now.

184
00:11:42,964 --> 00:11:47,182
We actually can deploy servers with the click of a button. We can roll back

185
00:11:47,316 --> 00:11:51,354
entire data centers worth of infrastructure just by doing a revert

186
00:11:51,402 --> 00:11:55,006
and watching terraform taint and rebuild all the infrastructure

187
00:11:55,118 --> 00:11:58,674
you need to run a modern app. So we need to make sure that the

188
00:11:58,712 --> 00:12:02,674
entire rest of the tech stack that you have is as

189
00:12:02,712 --> 00:12:06,258
sophisticated as deploying your infrastructure

190
00:12:06,354 --> 00:12:10,226
would be with terraform or other infrastructureascode as code tools.

191
00:12:10,418 --> 00:12:13,862
So let's talk about actually

192
00:12:13,916 --> 00:12:17,254
applying some of these lessons. So a lot of people

193
00:12:17,292 --> 00:12:20,874
are familiar with using IC systems like terraform to deploy your

194
00:12:20,912 --> 00:12:24,566
AWS infrastructure or setting

195
00:12:24,598 --> 00:12:28,054
up GCP or those kind of changes, but it's

196
00:12:28,102 --> 00:12:31,174
also really helpful for other parts of your tech stack.

197
00:12:31,222 --> 00:12:35,034
A lot of people don't think about the SaaS apps that are really controlling

198
00:12:35,082 --> 00:12:38,846
this. So this includes things like GitHub and Okta. So a lot

199
00:12:38,868 --> 00:12:42,586
of times those systems are still controlled by

200
00:12:42,708 --> 00:12:46,306
sysadmins who are manually pointing and clicking within the

201
00:12:46,328 --> 00:12:50,382
console to make changes. But when you think about how powerful

202
00:12:50,446 --> 00:12:53,780
those systems are, GitHub controls everything.

203
00:12:54,950 --> 00:12:58,550
If you follow the GitHub's philosophy, and if you're doing proper

204
00:12:58,620 --> 00:13:01,794
access controls with RBAC or the newer ABAC

205
00:13:01,842 --> 00:13:05,830
attribute based access controls, then your directory system like Okta

206
00:13:06,170 --> 00:13:09,754
controls the access to everything. So if we don't let

207
00:13:09,792 --> 00:13:13,318
people manually deploy servers via the AWS console,

208
00:13:13,414 --> 00:13:17,494
why do we let people manually make changes to the GitHub console or the okta

209
00:13:17,542 --> 00:13:21,062
console, which are arguably more powerful and dangerous

210
00:13:21,126 --> 00:13:23,450
because they control all the systems?

211
00:13:24,350 --> 00:13:27,966
So let's think about this. If you use GitHub to

212
00:13:27,988 --> 00:13:32,618
manage your infrastructure, then a compromised GitHub admin owns your infrastructure.

213
00:13:32,714 --> 00:13:36,078
So it's of critical importance that we get rid

214
00:13:36,094 --> 00:13:39,886
of GitHub admins. But if we're getting rid of GitHub admins,

215
00:13:39,918 --> 00:13:43,940
then how do we do the admin work? Probably figured this out.

216
00:13:44,550 --> 00:13:48,286
It's terraform we're going to use. You know,

217
00:13:48,408 --> 00:13:52,520
you can terraform your GitHub instance on GitHub itself.

218
00:13:53,850 --> 00:13:57,206
So you want to apply these principles to

219
00:13:57,228 --> 00:14:00,902
kind of all the things in your tech stack. And this includes like terraform

220
00:14:00,966 --> 00:14:04,854
cloud itself, you can actually apply these lessons

221
00:14:04,902 --> 00:14:08,250
to the same systems they're managing and you should.

222
00:14:08,400 --> 00:14:12,298
So we're going to look at a really short practical example that

223
00:14:12,304 --> 00:14:15,870
we did here at teleport about terraforming okta. So we're going to apply

224
00:14:16,020 --> 00:14:19,978
attribute based access directory rules via terraform to eliminate Jira

225
00:14:19,994 --> 00:14:24,466
tickets for what's a really common thing in can it department is

226
00:14:24,568 --> 00:14:28,334
handling access requests. So this is just three easy steps

227
00:14:28,382 --> 00:14:31,714
and you can apply the same concept to a lot of

228
00:14:31,752 --> 00:14:35,314
different systems. So let's take a look.

229
00:14:35,432 --> 00:14:38,966
We're actually going to have some code in this discussion. So first you want

230
00:14:38,988 --> 00:14:43,014
to understand what the schema here is of the relationship between

231
00:14:43,132 --> 00:14:47,122
kind of the users and groups. So first you need to create a directory

232
00:14:47,186 --> 00:14:51,254
group for every single app. So I prefix these

233
00:14:51,292 --> 00:14:55,066
with app what the system name is. So we might have one

234
00:14:55,168 --> 00:14:59,450
that is app GitHub or app Salesforce.

235
00:14:59,970 --> 00:15:03,920
And that group is used in

236
00:15:04,850 --> 00:15:08,174
assigning to can okta application that lets users in

237
00:15:08,212 --> 00:15:11,674
through the front door, that authorizes them that they can authenticate

238
00:15:11,802 --> 00:15:15,726
hopefully with Sam'l not password via the okta directory

239
00:15:15,838 --> 00:15:19,502
to go log into that app. And ideally that login

240
00:15:19,566 --> 00:15:23,474
should have no entitlements. That should be like a basic read

241
00:15:23,512 --> 00:15:26,666
only role, the least privileged

242
00:15:26,718 --> 00:15:30,658
user that people will want. And then for all the other users

243
00:15:30,754 --> 00:15:34,182
we should create roles for each of those.

244
00:15:34,236 --> 00:15:38,182
So in our code example here, we have our basic group

245
00:15:38,316 --> 00:15:42,282
for Salesforce and we're writing in here some

246
00:15:42,336 --> 00:15:45,786
attribute based rules to decide who should go in

247
00:15:45,808 --> 00:15:49,546
the group. So we're looking at the user profile and looking at what the

248
00:15:49,568 --> 00:15:53,646
department field is to decide who should get access to Salesforce. And we say okay,

249
00:15:53,668 --> 00:15:57,038
it's the sales team or the marketing team in this simple example.

250
00:15:57,204 --> 00:16:00,478
And then for the bigger role entitlements like who's a

251
00:16:00,484 --> 00:16:03,710
Salesforce admin? Again,

252
00:16:03,780 --> 00:16:07,154
we can use things like other

253
00:16:07,192 --> 00:16:11,090
attributes that you could say, hey, you're in the IT department and you're a manager.

254
00:16:11,910 --> 00:16:15,090
Things like, you know, I wanted to call it this example

255
00:16:15,160 --> 00:16:19,222
because there often are weird exceptions. We can't always use attributes that sometimes

256
00:16:19,356 --> 00:16:22,310
we can just name names here and keep it easy.

257
00:16:22,460 --> 00:16:25,718
So if we wanted to add a new Salesforce admin, we could create

258
00:16:25,804 --> 00:16:29,580
a pull request and add a new person right here and

259
00:16:30,430 --> 00:16:34,026
have someone approve it. And I should note that you

260
00:16:34,048 --> 00:16:37,882
should make these groups and

261
00:16:37,936 --> 00:16:41,638
roles even for systems that don't support the automatic provisioning

262
00:16:41,654 --> 00:16:44,906
of roles. So Salesforce, does they support. I can actually assign

263
00:16:44,938 --> 00:16:48,622
the admin role to the two of us because

264
00:16:48,676 --> 00:16:52,286
we're in that group, but not all systems do. But you need to

265
00:16:52,308 --> 00:16:56,506
still create these because it's that important placeholder

266
00:16:56,538 --> 00:16:59,906
for change management. Otherwise you would need to create a Jira ticket to keep track

267
00:16:59,928 --> 00:17:03,778
of this. So we have to keep track of it here. And it's an important

268
00:17:03,864 --> 00:17:07,510
form of future proofing that eventually this system

269
00:17:07,580 --> 00:17:11,542
might support automatic role providing, or you

270
00:17:11,596 --> 00:17:14,758
might decide that it's important enough for a critical system

271
00:17:14,844 --> 00:17:18,906
to write your own integration to

272
00:17:18,928 --> 00:17:21,606
make that happen. So a lot of systems,

273
00:17:21,718 --> 00:17:25,686
like good systems like AWS, Salesforce, teleport also supports

274
00:17:25,718 --> 00:17:29,446
this kind of setup where you can map groups

275
00:17:29,478 --> 00:17:34,606
within Okta for certain roles and then assigning those to

276
00:17:34,628 --> 00:17:38,174
the roles within that group. And you can see the terraform code here is quite

277
00:17:38,212 --> 00:17:41,306
simple. It's just a quick loop

278
00:17:41,498 --> 00:17:45,202
to loop through all the different apps in here and then go

279
00:17:45,256 --> 00:17:49,570
create the groups and then the associated group rule that uses

280
00:17:50,150 --> 00:17:53,282
the attribute based access controls we described to put the people

281
00:17:53,336 --> 00:17:54,180
in the group.

282
00:17:56,010 --> 00:17:59,254
So we mentioned you want to do this

283
00:17:59,292 --> 00:18:02,822
anyways even when you don't have

284
00:18:02,876 --> 00:18:06,214
an automation for it. And that way we've created a

285
00:18:06,252 --> 00:18:10,442
request, approval and audit system that lives entirely in git and

286
00:18:10,576 --> 00:18:14,490
we've eliminated the need for all access requests for Jira.

287
00:18:15,630 --> 00:18:18,746
So the next step is once you do

288
00:18:18,768 --> 00:18:22,146
that, you want to remove the ability for admins

289
00:18:22,198 --> 00:18:25,806
to manage those groups within the

290
00:18:25,828 --> 00:18:28,926
console. And this is a DevOps lesson that a lot of people do

291
00:18:28,948 --> 00:18:32,462
in AWS. When you reach this happy DevOps Nirvana, you actually

292
00:18:32,516 --> 00:18:36,306
take away console access from developers because they need

293
00:18:36,328 --> 00:18:40,146
to make the changes via terraform. So in

294
00:18:40,168 --> 00:18:43,650
this case, we'll actually remove just the permission of group admin

295
00:18:44,230 --> 00:18:47,922
from all the groups that are not managed by terraform. And we should

296
00:18:47,976 --> 00:18:51,366
manage if we can, 100% of your groups in terraform. But if

297
00:18:51,388 --> 00:18:54,840
that's not realistic for you, you can at least do the ones that

298
00:18:55,210 --> 00:18:59,174
control some sort of access based permissions because you don't want to give the permission

299
00:18:59,222 --> 00:19:02,874
to say like an it help desk associate that they

300
00:19:02,912 --> 00:19:06,746
should not be able to decide who gets AWS admin in

301
00:19:06,768 --> 00:19:10,542
your SaaS app. So step

302
00:19:10,596 --> 00:19:14,878
three, you want to alert on any changes made

303
00:19:14,964 --> 00:19:18,522
outside terraform. So this is to make sure that nobody

304
00:19:18,586 --> 00:19:22,286
was able to circumvent your IAC process. And this

305
00:19:22,308 --> 00:19:25,682
is important in providing to your auditors that this was the

306
00:19:25,736 --> 00:19:29,234
only way that changes were made. And it's also a great way

307
00:19:29,272 --> 00:19:32,866
to do security investigations if a hacker was able to find

308
00:19:32,968 --> 00:19:36,754
their way around your process. So you want to connect Okta to

309
00:19:36,792 --> 00:19:39,862
your steam, their security information events management platform.

310
00:19:39,996 --> 00:19:43,346
If you don't have one, and they're quite expensive, you can actually hack

311
00:19:43,378 --> 00:19:47,074
it together using Okta, webhooks and Zapier,

312
00:19:47,122 --> 00:19:50,246
a really cheap low code solution. So what you

313
00:19:50,268 --> 00:19:53,478
want to do is you want to write an alert to fire anytime

314
00:19:53,574 --> 00:19:57,482
a group change is made by anyone other than the terraform service

315
00:19:57,536 --> 00:20:00,954
user. So if someone were able to log in by

316
00:20:00,992 --> 00:20:05,022
any other means, for some reason there was a misconfigured thing. You can also

317
00:20:05,076 --> 00:20:08,894
check for metadata on that. Did the request come from

318
00:20:08,932 --> 00:20:13,210
the ip we expected from terraform cloud? Or maybe someone stole

319
00:20:13,290 --> 00:20:16,994
our terraform service user credentials and

320
00:20:17,032 --> 00:20:20,946
they were able to use them elsewhere. So the seam really helps make sure that

321
00:20:21,048 --> 00:20:25,214
no one got around the process. Now, you should still do an occasional audit

322
00:20:25,262 --> 00:20:28,966
process, going through your logs on like a quarterly or

323
00:20:28,988 --> 00:20:32,114
annual basis to make sure that nothing slipped through the cracks,

324
00:20:32,162 --> 00:20:35,926
that you missed an alert on something that was maybe an

325
00:20:35,948 --> 00:20:39,370
unauthorized change that was not made through terraform.

326
00:20:40,270 --> 00:20:43,674
So finally, any good loop has step N,

327
00:20:43,792 --> 00:20:47,770
and you want to repeat this process until you reach 100%

328
00:20:47,840 --> 00:20:51,386
terraform coverage. So you want to keep doing this for other resources

329
00:20:51,418 --> 00:20:55,002
you'd have in Okta. Your authentication policies,

330
00:20:55,066 --> 00:20:58,554
your application setup, everything you can until you've

331
00:20:58,602 --> 00:21:01,822
reached 100% code coverage. And at that point,

332
00:21:01,876 --> 00:21:05,250
you get to the really cool thing of removing console access

333
00:21:05,400 --> 00:21:08,754
entirely. And at that point, you can create what's called a

334
00:21:08,792 --> 00:21:12,418
break glass. You know, of course, if terraform or

335
00:21:12,424 --> 00:21:16,402
the IEC process breaks down, there's an incident and

336
00:21:16,456 --> 00:21:18,920
terraform is down. You need a way to get in.

337
00:21:19,290 --> 00:21:22,566
And what you can do is create that service user that is

338
00:21:22,588 --> 00:21:25,874
your super admin. And we use one password as our password

339
00:21:25,922 --> 00:21:30,294
store. And I highly recommend it, especially now that in their recent

340
00:21:30,342 --> 00:21:33,754
release, you can also connect it to your steam. And so

341
00:21:33,792 --> 00:21:37,210
we set up an alert that if the break glass service

342
00:21:37,280 --> 00:21:41,050
user's credentials are accessed, that creates an incident,

343
00:21:41,470 --> 00:21:44,542
because the only reason we should ever be using those is

344
00:21:44,596 --> 00:21:47,898
during an incident. And if someone's using them outside of an incident,

345
00:21:47,994 --> 00:21:51,754
they're either breaking the rules or they're a hacker that's trying to compromise

346
00:21:51,802 --> 00:21:54,258
your system. And you want to know that fast.

347
00:21:54,424 --> 00:21:57,730
So that's kind of the process. And if you reach

348
00:21:57,800 --> 00:22:01,522
that 100% coverage, you don't need change

349
00:22:01,576 --> 00:22:04,894
management tickets at all for any admin functions

350
00:22:04,942 --> 00:22:09,062
within that platform. And you can apply these same lessons to

351
00:22:09,196 --> 00:22:12,642
other important systems in your tech stack like GitHub.

352
00:22:12,786 --> 00:22:16,274
Get rid of all your GitHub admins. They are so powerful and dangerous.

353
00:22:16,402 --> 00:22:19,398
You can do it to terraform itself, you can do it to all sorts of

354
00:22:19,404 --> 00:22:23,242
SAS apps and keep applying these lessons. And as you do,

355
00:22:23,296 --> 00:22:27,046
your ticket count will reduce. So you can't just throw out Jira

356
00:22:27,078 --> 00:22:30,650
right now immediately you have to kind of slowly carve away

357
00:22:30,720 --> 00:22:34,910
at it and reduce that ticket number as you increase your code coverage.

358
00:22:35,890 --> 00:22:39,262
So if you're going to remember one

359
00:22:39,316 --> 00:22:42,802
kind of lesson from this whole thing is that tickets are only

360
00:22:42,856 --> 00:22:45,826
for changes made outside of code.

361
00:22:46,008 --> 00:22:49,070
No changes outside code, no tickets.

362
00:22:49,230 --> 00:22:52,882
So remember that we develop

363
00:22:52,936 --> 00:22:56,314
tickets for service organizations and for these older philosophies

364
00:22:56,382 --> 00:23:00,194
where we have lots of manual processes because manual

365
00:23:00,242 --> 00:23:03,990
processes are very air prone. So you have to come up

366
00:23:04,060 --> 00:23:07,526
with these systems to track manual processes, to come up

367
00:23:07,548 --> 00:23:10,986
with plans to make sure you don't make mistakes. But when you do things in

368
00:23:11,008 --> 00:23:13,162
code, we no longer need to do that.

369
00:23:13,216 --> 00:23:17,334
Gitops has paved the way to remove all those manual

370
00:23:17,382 --> 00:23:20,746
processes. So you want to do this completely up and down

371
00:23:20,768 --> 00:23:24,238
your stack, including managing the SAS apps in

372
00:23:24,244 --> 00:23:27,882
the realm of it that is traditionally still done with Jira tickets.

373
00:23:27,946 --> 00:23:31,466
So I hope this talk helps empower you at your organization

374
00:23:31,578 --> 00:23:34,650
to realize that you can apply these lessons.

375
00:23:34,730 --> 00:23:38,174
And not only is it going to make your life easier

376
00:23:38,222 --> 00:23:41,970
for your developers, that you're going to be more agile, you'll be able to work

377
00:23:42,040 --> 00:23:45,378
across many time zones remotely, you'll be

378
00:23:45,384 --> 00:23:48,534
able to get tickets done quicker because you don't have to interact with as

379
00:23:48,572 --> 00:23:52,214
many teams. You're going to be more secure because only the

380
00:23:52,252 --> 00:23:55,814
changes that actually happen in GitHub are what's happening

381
00:23:55,932 --> 00:23:59,674
in your system and it becomes very hard to circumvent that process.

382
00:23:59,872 --> 00:24:03,386
And finally, your it teams are going to be a lot happier actually

383
00:24:03,488 --> 00:24:07,526
working as engineers, writing code building systems

384
00:24:07,558 --> 00:24:11,306
and platforms rather than responding to ticket queues and behaving

385
00:24:11,338 --> 00:24:15,150
like a service organization. So this is really a win win for

386
00:24:15,220 --> 00:24:18,634
everybody. It does require some upfront investment,

387
00:24:18,682 --> 00:24:22,330
but I promise you it's worth it. It's drastically

388
00:24:22,410 --> 00:24:25,946
improved our process and we can't wait to expand

389
00:24:26,058 --> 00:24:29,486
our code coverage to more and more systems because we're already seeing the

390
00:24:29,508 --> 00:24:32,814
benefits in the time that we no longer have to spend

391
00:24:32,932 --> 00:24:36,754
handling access requests. We're now able that spend that time automating

392
00:24:36,802 --> 00:24:39,826
more systems, writing more ise, writing more tests,

393
00:24:39,938 --> 00:24:43,766
improving our theme alerts and all

394
00:24:43,788 --> 00:24:47,254
the other things that we enjoy doing as engineers rather than

395
00:24:47,292 --> 00:24:50,566
responding to ticket queues. So thanks for tuning in today and

396
00:24:50,588 --> 00:24:52,690
I hope you can apply these lessons at your organization.

