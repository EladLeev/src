1
00:00:34,610 --> 00:00:39,170
Hi, welcome to my talk about next generation enterprise observability workflows.

2
00:00:39,250 --> 00:00:42,898
I'm Matt Morris. This talk will focus on unlocking observability

3
00:00:42,994 --> 00:00:46,466
at scale, especially in enterprises, by reimagining what's

4
00:00:46,498 --> 00:00:50,442
possible when integrating ITSM tools with observability tools.

5
00:00:50,506 --> 00:00:53,406
If you just rolled your eyes when I said itsm, two things.

6
00:00:53,508 --> 00:00:57,290
One, I get it. Two, stay with me. You just might be surprised.

7
00:00:57,370 --> 00:01:00,682
So after a brief backstory, I'm going to propose a new framework

8
00:01:00,746 --> 00:01:04,410
for these integrations and what we should expect of them with real examples.

9
00:01:04,490 --> 00:01:08,494
Whether you work in dev, Ops, SRE, ITSM leadership,

10
00:01:08,542 --> 00:01:11,634
or some other functional area, I think you might find some value in this talk

11
00:01:11,672 --> 00:01:14,898
for you. So let's jump in. So why are we talking about this?

12
00:01:14,984 --> 00:01:17,870
I think it's important for us to take a step back and think about some

13
00:01:17,880 --> 00:01:21,314
of the things that led us here between the time when ITSM

14
00:01:21,362 --> 00:01:24,786
was really in its heyday and now. First dev and Ops

15
00:01:24,818 --> 00:01:27,974
used to exist separated the wall in between

16
00:01:28,092 --> 00:01:32,026
that once the product was developed, it would be tossed over the wall for

17
00:01:32,048 --> 00:01:34,698
Ops to run. And this led to a situation where there was a lot of

18
00:01:34,704 --> 00:01:39,142
disconnect and honestly some tough outcomes

19
00:01:39,206 --> 00:01:42,378
due to the fact that they were separated. This led, as we know, to the

20
00:01:42,384 --> 00:01:46,094
DevOps revolution, which combined these two functions and allowed us to achieve much

21
00:01:46,132 --> 00:01:49,230
better outcomes by having complete ownership end to end.

22
00:01:49,300 --> 00:01:52,826
And SRE emerged as a practical way of achieving DevOps

23
00:01:52,858 --> 00:01:56,414
outcomes with recommended practices and frameworks

24
00:01:56,462 --> 00:02:00,514
for how we could do some of the activities that come with this model of

25
00:02:00,552 --> 00:02:04,146
integrations. But this pulled us away from the traditional approaches to

26
00:02:04,168 --> 00:02:07,826
running services, which formed the foundation for a lot of

27
00:02:07,848 --> 00:02:11,538
the ITSM methodology at the time. Next on prem workloads

28
00:02:11,554 --> 00:02:15,458
were lifted and shifted to the cloud and then re architected to run on containers

29
00:02:15,554 --> 00:02:18,646
and now shifting evermore to run on services that are

30
00:02:18,668 --> 00:02:22,106
platform as a service or function as a service. And this means that

31
00:02:22,128 --> 00:02:25,334
we went from a monolith architecture to tightly and then more loosely

32
00:02:25,382 --> 00:02:29,254
coupled microservices, and maybe next to multi runtime microservices.

33
00:02:29,382 --> 00:02:32,454
Continuing the trend towards smaller modular pieces.

34
00:02:32,582 --> 00:02:36,526
Being managed individually seems to be where we're at. And this

35
00:02:36,548 --> 00:02:39,758
led to a lot of interesting outcomes in terms of what used to

36
00:02:39,764 --> 00:02:42,974
be normal with ITSM versus what we see in this world.

37
00:02:43,092 --> 00:02:46,718
First of all, change management has evolved a lot because CI

38
00:02:46,734 --> 00:02:50,114
CD pipelines and DevOps practices mean that change management is

39
00:02:50,152 --> 00:02:53,506
often not the toll gate for deploying the prod that it used to be.

40
00:02:53,608 --> 00:02:57,058
CMDB, the configuration management database predicates a lot of

41
00:02:57,064 --> 00:03:00,774
its value on having a consistent inventory with rich attributes about

42
00:03:00,812 --> 00:03:04,934
all of the items that are a part of delivering services to

43
00:03:04,972 --> 00:03:08,514
your end users. Getting an inventory that's up to date for ephemeral

44
00:03:08,562 --> 00:03:11,890
resources, especially when they're hosted in the cloud, is near impossible,

45
00:03:11,970 --> 00:03:15,030
and consuming extra overhead to do it is very hard to justify.

46
00:03:15,110 --> 00:03:17,722
So we need to be looking at ways to leverage the information that we already

47
00:03:17,776 --> 00:03:21,262
have. Next up, service maps have become more challenging than ever,

48
00:03:21,316 --> 00:03:25,226
and modeling them using traditional systems of mapping that are available in these ITSM

49
00:03:25,258 --> 00:03:29,114
tools is suboptimal, and visibility suffers

50
00:03:29,242 --> 00:03:33,354
because black holes develop in processes. Executives and leadership

51
00:03:33,402 --> 00:03:36,734
can't really see the overall picture, and there's a lack of view into performance and

52
00:03:36,772 --> 00:03:40,226
user experience, user happiness overall, these are a lot of the things that

53
00:03:40,248 --> 00:03:43,634
the ITSM tool is supposed to be able to deliver. This might seem like bad

54
00:03:43,672 --> 00:03:46,926
news, but the reality is we have the ability to deliver

55
00:03:46,958 --> 00:03:49,766
a lot of these things with the observability data that we already have. We're just

56
00:03:49,788 --> 00:03:52,946
not leveraging it. So go with me here, and let's

57
00:03:52,978 --> 00:03:56,466
think about this from a visual standpoint. We have monitoring or APM

58
00:03:56,498 --> 00:04:00,066
or observability tools and the evolution that has happened there into the tools

59
00:04:00,098 --> 00:04:03,466
that we have today. On one side, and they're producing a lot of data

60
00:04:03,568 --> 00:04:07,366
right now. On the other side we have this iTSm tool like Servicenow

61
00:04:07,398 --> 00:04:11,222
or Salesforce or something like that, and it's producing a lot of data, but it's

62
00:04:11,286 --> 00:04:14,858
really from a process standpoint about how do we get the things done that we

63
00:04:14,864 --> 00:04:17,994
need to get done. Now, the thing is, in this current environment,

64
00:04:18,042 --> 00:04:21,166
because of the challenges that we just talked about, there's this wide chasm that has

65
00:04:21,188 --> 00:04:25,210
developed between these two sides, and the data passing between the two sides

66
00:04:25,290 --> 00:04:28,478
and the handoffs between them have honestly been really sad.

67
00:04:28,574 --> 00:04:31,794
I've spent years and years working with the integrations that exist between

68
00:04:31,832 --> 00:04:35,106
these tools, making my own, and I can honestly say that these

69
00:04:35,128 --> 00:04:38,726
are consistently some of the toughest integrations to get the outcomes that

70
00:04:38,748 --> 00:04:42,694
I want. Now, there have been some attempts to unify these two

71
00:04:42,732 --> 00:04:46,706
sides and drive some communication

72
00:04:46,818 --> 00:04:49,922
across this chasm. One example is just taking a webhook,

73
00:04:49,986 --> 00:04:53,002
and whenever there's an alert that's happening in an observability tool,

74
00:04:53,056 --> 00:04:56,506
we toss that thing over to the ITSM side. Now the problem is this

75
00:04:56,528 --> 00:05:00,234
just hearkens back to the old problem that we have with Devon Ops. We're just

76
00:05:00,272 --> 00:05:03,610
tossing the thing over the wall. There's no richness here, no workflow.

77
00:05:03,690 --> 00:05:07,898
There's no automation capability. And some integrations

78
00:05:07,994 --> 00:05:11,502
have tried, with varying degrees of consistency, to try to bring

79
00:05:11,556 --> 00:05:15,006
in host data or info about the entities that are

80
00:05:15,028 --> 00:05:18,242
being monitored by the tools. But this has been a

81
00:05:18,376 --> 00:05:21,646
very lightweight amount of information that's being brought

82
00:05:21,678 --> 00:05:24,574
so far. And I think if I had to summarize the biggest problem that I've

83
00:05:24,622 --> 00:05:28,246
seen with these types of integrations, it is that they're not approached from a

84
00:05:28,268 --> 00:05:32,040
perspective of the outcomes that we want to be able to drive.

85
00:05:32,410 --> 00:05:36,038
By bringing observability data

86
00:05:36,204 --> 00:05:39,234
and ITSM processes and automation

87
00:05:39,282 --> 00:05:42,666
and workflow capabilities together. Right. They're not

88
00:05:42,688 --> 00:05:46,202
driving it from an outcome standpoint. It tends to be from a perspective of

89
00:05:46,256 --> 00:05:50,362
we need an integration, we have to get this data across and

90
00:05:50,496 --> 00:05:53,738
we kind of check the box, right? I think we

91
00:05:53,744 --> 00:05:56,846
need to ask for more. That's where I'm coming from. And this has led to

92
00:05:56,868 --> 00:06:00,078
several subpar outcomes. First of all, we can't maximize the

93
00:06:00,084 --> 00:06:03,726
value of the tools that our organization is paying for. There's a lot

94
00:06:03,748 --> 00:06:07,502
of value being left on the table on both sides of the equation. Observability data

95
00:06:07,556 --> 00:06:10,574
can do a lot more than just toss an alert over the wall or create

96
00:06:10,612 --> 00:06:13,918
an incident. ITSM tools can do a lot more than just try to assign the

97
00:06:13,924 --> 00:06:17,622
incident and produce some MCTX dashboards. Troubleshooting is

98
00:06:17,676 --> 00:06:21,362
another area that we could do so much better. Observability is about context

99
00:06:21,426 --> 00:06:24,166
rich data. Don't listen to those people who try to tell you it's about three

100
00:06:24,188 --> 00:06:27,506
pillars. The webhook plus light instant data approach

101
00:06:27,618 --> 00:06:30,898
strips away lots of the most valuable information that is

102
00:06:30,924 --> 00:06:34,890
available here, and users are forced to do manual context switching between

103
00:06:34,960 --> 00:06:38,890
platforms, trying to figure out what the incident even means, where it came from,

104
00:06:38,960 --> 00:06:42,746
how to fix it, never mind who's affected or how badly. And these are

105
00:06:42,768 --> 00:06:46,106
the outcomes that are core to observability. Automation and continuous

106
00:06:46,138 --> 00:06:49,754
optimization are supposed to be core focuses of every discipline

107
00:06:49,802 --> 00:06:53,082
that we're talking about here. But again, the lack of tight integrations

108
00:06:53,226 --> 00:06:57,294
and thoughtful design for the interplay between these two sides

109
00:06:57,422 --> 00:07:01,154
means that many opportunities just fall through the cracks, and we want to break

110
00:07:01,192 --> 00:07:04,686
down silos. This is what drove the DevOps revolution to begin with. And although

111
00:07:04,718 --> 00:07:08,106
walls have been broken down between dev and ops, in many cases the ITSM

112
00:07:08,158 --> 00:07:11,522
team and their processes kind of remain on an island. Painfully.

113
00:07:11,586 --> 00:07:15,426
Those processes that are supposed to be protecting quality of service, the company's

114
00:07:15,458 --> 00:07:18,882
bottom line and user experience, come to be seen more as bottlenecks,

115
00:07:18,946 --> 00:07:22,474
red tape, and low value activities. And meanwhile, the lack of governance and

116
00:07:22,512 --> 00:07:26,006
process visibility with ITSM on the sideline can be a serious risk

117
00:07:26,038 --> 00:07:29,274
to the business. So what do we do about this? I took it as my

118
00:07:29,312 --> 00:07:33,214
mission that I want to try to contribute to a world where the

119
00:07:33,252 --> 00:07:37,098
combination of observability tools and ITSm tools

120
00:07:37,194 --> 00:07:40,430
can be more like the second emoji here instead of the first one.

121
00:07:40,500 --> 00:07:43,994
So I'm proposing a new framework that will allow us to get to the outcomes

122
00:07:44,042 --> 00:07:47,474
that we want and maximize what this relationship could be between

123
00:07:47,512 --> 00:07:51,934
observability tools and ITSM tools. I'm calling it the observable ITSM

124
00:07:51,982 --> 00:07:55,858
framework, and this is version one. And I've broken down some components of what

125
00:07:55,864 --> 00:07:59,270
I'm including in this framework across a few different areas. First,

126
00:07:59,340 --> 00:08:02,434
in terms of changes or deploys, we should be able to automatically

127
00:08:02,482 --> 00:08:06,690
create changes for CI CD activities and display those flags in the observability

128
00:08:06,770 --> 00:08:10,310
side too, so that we have full context what changes are happening when,

129
00:08:10,380 --> 00:08:14,554
and we can use that as very rich intelligence when we're debugging our

130
00:08:14,592 --> 00:08:18,390
applications, we need to enable the attaching of an SLO to a change request.

131
00:08:18,470 --> 00:08:22,278
If the SLO is burning post change, then back it out. And this aligns

132
00:08:22,294 --> 00:08:26,506
well with practices that we probably already do in SRE. We bring ITSm

133
00:08:26,538 --> 00:08:29,998
into the fold here, and it's something that can take zero effort from the

134
00:08:30,004 --> 00:08:33,882
DevOps side to make this possible. And we should be able to open change requests

135
00:08:33,946 --> 00:08:37,154
in the observability tool to see change outcomes as experienced by

136
00:08:37,192 --> 00:08:40,882
real users. Great examples of this is on the ITSM side,

137
00:08:40,936 --> 00:08:44,562
somebody's creating a change and they have tagged in a service

138
00:08:44,616 --> 00:08:48,114
that we're observing in observability tool, we should be able to open that up and

139
00:08:48,152 --> 00:08:51,554
see if as that change is deployed, if it affects the performance

140
00:08:51,602 --> 00:08:55,046
of our service. Because changes come from a lot of different sources and in

141
00:08:55,068 --> 00:08:58,470
a lot of different packages in terms of service components and

142
00:08:58,540 --> 00:09:02,422
maps, we need to be able to create records for all entities and slos

143
00:09:02,486 --> 00:09:06,074
observed by the observability tool. Create those into CMDB based

144
00:09:06,112 --> 00:09:09,254
on telemetry data, and they should be auto refreshed to avoid

145
00:09:09,302 --> 00:09:12,970
staleness. We do this so that we can then make

146
00:09:13,040 --> 00:09:16,734
really rich maps out of these entities, and we should map them based

147
00:09:16,772 --> 00:09:20,062
on host attributes that are in telemetry data and parent

148
00:09:20,116 --> 00:09:23,198
child relationships and traces. And all of this should be something we can set up

149
00:09:23,204 --> 00:09:27,054
in five minutes or less. Minimal steps. We need to be able to create rich

150
00:09:27,102 --> 00:09:30,830
incidents directly or via the event management processes

151
00:09:30,910 --> 00:09:34,654
that are including full context services, entities and slos

152
00:09:34,702 --> 00:09:38,866
that are affected and the ability to pass the responsible team or severity

153
00:09:38,978 --> 00:09:41,826
fields like this into the incident directly.

154
00:09:41,938 --> 00:09:45,254
What we want to do is enable the teams that are creating alerts to add

155
00:09:45,292 --> 00:09:48,374
some intelligence into those alert payloads that

156
00:09:48,412 --> 00:09:51,830
actually get processed automatically. On the ITSM side,

157
00:09:51,900 --> 00:09:55,706
we need to be able to open a detected incident from an observability tool in

158
00:09:55,728 --> 00:09:58,858
one click back into that tool for troubleshooting. We shouldn't have to

159
00:09:58,864 --> 00:10:02,106
be copying and pasting links or searching around trying

160
00:10:02,128 --> 00:10:05,566
to find a certain alert number or incident number in the

161
00:10:05,588 --> 00:10:08,878
tool that generated the notification to the ITSM side. And we should be able

162
00:10:08,884 --> 00:10:12,734
to use one click to open a user reported incident in the observability tool

163
00:10:12,772 --> 00:10:16,094
as well. Just because a user happened to be the one who created an

164
00:10:16,132 --> 00:10:19,906
incident and said hey, this thing is broken is no excuse for

165
00:10:19,928 --> 00:10:22,258
us to not have a good route for being able to open that up in

166
00:10:22,264 --> 00:10:25,446
the observability side. If you like the sound of this, then you're going

167
00:10:25,448 --> 00:10:28,974
to like this next part. Let's look at some examples what this can look like

168
00:10:29,032 --> 00:10:33,442
in practice. I have an integration that I made for honeycomb to integrate to servicenow

169
00:10:33,506 --> 00:10:36,950
and start to achieve some powerful outcomes that aren't possible with any of these other

170
00:10:37,020 --> 00:10:39,900
observability integrations that exist for other tools today.

171
00:10:41,470 --> 00:10:44,854
So first of all, in terms of setup, we clone this repo,

172
00:10:44,982 --> 00:10:48,858
we get this update set that's available here, and we bring it

173
00:10:48,864 --> 00:10:52,702
into the retrieved update sets in serviceNow. The setup is

174
00:10:52,756 --> 00:10:57,040
simple here and it's not even a store app, even simpler for the store app.

175
00:10:58,210 --> 00:11:00,080
So we open up the update set.

176
00:11:03,240 --> 00:11:06,090
So now we've previewed and committed the update set,

177
00:11:07,900 --> 00:11:11,444
we just connect a new environment by adding an API

178
00:11:11,492 --> 00:11:12,090
key.

179
00:11:15,200 --> 00:11:19,516
We'll give it whatever name we want and submit

180
00:11:19,548 --> 00:11:22,876
it here. We have the choice

181
00:11:22,908 --> 00:11:26,496
if we want to populate CMDB from the tool, or if we

182
00:11:26,518 --> 00:11:29,170
don't want to, I'll allow that.

183
00:11:30,440 --> 00:11:33,844
We'll submit. It's that simple.

184
00:11:34,042 --> 00:11:37,716
At that point, it's going to trigger a lot of actions behind the

185
00:11:37,738 --> 00:11:41,824
scenes that will allow me to route alerts

186
00:11:41,872 --> 00:11:45,208
directly to serviceNow. And I'll also

187
00:11:45,374 --> 00:11:48,884
import all of the entities that are being observed in Honeycomb

188
00:11:49,012 --> 00:11:52,170
into CMDB and map them into services.

189
00:11:53,020 --> 00:11:55,928
And allow me to do several of the other outcomes that I talked about a

190
00:11:55,934 --> 00:11:59,948
minute ago in terms of workflows that will

191
00:11:59,954 --> 00:12:03,660
help with troubleshooting, observing changes, so on and so forth.

192
00:12:04,160 --> 00:12:08,064
So now, for example, on the honeycomb side, look at an slO. We can

193
00:12:08,102 --> 00:12:10,860
configure a new recipient for burn alerts.

194
00:12:11,020 --> 00:12:14,416
And this recipient was created automatically and registered in

195
00:12:14,438 --> 00:12:18,000
the background by the integrations

196
00:12:21,070 --> 00:12:23,020
and we'll send it in as an event.

197
00:12:24,830 --> 00:12:28,026
We can see that on the servicenow side, we now have a new service that's

198
00:12:28,058 --> 00:12:31,406
been created called microservice demo. We can open

199
00:12:31,428 --> 00:12:34,994
it up and we can see the service map again. All this is done just

200
00:12:35,032 --> 00:12:37,300
by inserting API key.

201
00:12:42,640 --> 00:12:46,012
And this service map is drawn completely by using

202
00:12:46,066 --> 00:12:49,870
telemetry data that's already available in the observability tool.

203
00:12:50,400 --> 00:12:54,256
So we can see all of the services that are up at higher levels and

204
00:12:54,278 --> 00:12:57,952
we can even see down to Kubernetes pods and

205
00:12:58,006 --> 00:13:01,410
where we have data about them, they can see the nodes as well.

206
00:13:03,990 --> 00:13:08,066
So now that we have this service that is available, we can

207
00:13:08,088 --> 00:13:12,254
go ahead and hit this service with an SlO

208
00:13:12,302 --> 00:13:14,770
burn alert by triggering this Slo.

209
00:13:15,830 --> 00:13:19,206
Something else to note here is that we do have the ability in

210
00:13:19,228 --> 00:13:23,058
this integration without any touches from the user

211
00:13:23,234 --> 00:13:26,742
to be able to specify things like severity or Simon group that

212
00:13:26,796 --> 00:13:30,306
these alerts should route to or incidents should route.

213
00:13:30,498 --> 00:13:34,326
And so we'll show an example of that. So here we're specifying

214
00:13:34,358 --> 00:13:36,460
this one called cloud operator group.

215
00:13:38,590 --> 00:13:40,858
So what we can do now is I'm going to change the target for the

216
00:13:40,864 --> 00:13:43,070
SLo so that it will trigger.

217
00:13:47,170 --> 00:13:50,366
Okay, you can see that it is triggered now we go over

218
00:13:50,388 --> 00:13:53,774
to the service map side. We'll shortly see the service

219
00:13:53,812 --> 00:13:57,106
map lighting up with the impact of the alert that

220
00:13:57,128 --> 00:13:57,940
came in.

221
00:14:06,670 --> 00:14:10,300
And we can see that the severity of the service map did just change.

222
00:14:11,630 --> 00:14:14,620
Received a minor alert against the front end service.

223
00:14:18,300 --> 00:14:22,008
If we want to see what this alert is about, we can open it

224
00:14:22,014 --> 00:14:25,576
up here, we can see the details of

225
00:14:25,598 --> 00:14:26,680
the SLO.

226
00:14:29,740 --> 00:14:33,356
We can see the full payload. We can see that it was

227
00:14:33,378 --> 00:14:36,190
assigned to the assignment group that we wanted it to be.

228
00:14:36,800 --> 00:14:38,990
We can see the full payload down here.

229
00:14:43,070 --> 00:14:46,710
And most importantly, getting back to our conversation

230
00:14:46,790 --> 00:14:50,414
about making things seamless and

231
00:14:50,452 --> 00:14:53,886
allowing troubleshooting to be easy, we have a button here

232
00:14:53,908 --> 00:14:57,626
that says open honeycomb. We click launch and it takes us directly

233
00:14:57,658 --> 00:15:00,420
to the slo that is affected by the issue.

234
00:15:04,480 --> 00:15:07,996
And this doesn't have to be done through event management. We can also do

235
00:15:08,018 --> 00:15:12,520
the same thing. We'll have a recipient that's automatically created for

236
00:15:12,610 --> 00:15:16,268
incident creation. We can just as easily

237
00:15:16,444 --> 00:15:19,440
map this to that recipient.

238
00:15:19,860 --> 00:15:22,050
We have as well an incident option.

239
00:15:25,310 --> 00:15:28,350
Now let's look at an example of a change request.

240
00:15:32,100 --> 00:15:35,984
So we can see that here we have a change request that is making some

241
00:15:36,022 --> 00:15:39,584
changes to our cart service caching servicenow is

242
00:15:39,622 --> 00:15:44,080
tagged to is our MS demo service, which is observed by Honeycomb,

243
00:15:44,240 --> 00:15:47,904
as well as our cart service as the main configuration

244
00:15:47,952 --> 00:15:51,284
item that's being affected. We've gone through

245
00:15:51,322 --> 00:15:54,708
the process of getting our change ready to go, and the next thing that we're

246
00:15:54,724 --> 00:15:57,130
going to do is put it into implement state.

247
00:15:59,660 --> 00:16:03,464
Now that it's in implement state, we have a button here says open

248
00:16:03,502 --> 00:16:07,064
in honeycomb so that we can observe our change in real time as

249
00:16:07,102 --> 00:16:10,508
it's being deployed. And this pulls us into a query where we

250
00:16:10,514 --> 00:16:14,456
can see in real time the count of transactions and the heat

251
00:16:14,488 --> 00:16:17,564
map of their duration against this service 2

252
00:16:17,602 --> 00:16:20,880
hours before and 2 hours after the change was starting to implement.

253
00:16:22,340 --> 00:16:25,232
And we can see that it's even scoped down to the service name,

254
00:16:25,366 --> 00:16:26,640
which is cart.

255
00:16:35,920 --> 00:16:39,368
One last example, let's pretend that we're a user who

256
00:16:39,394 --> 00:16:42,796
has come in and is reporting an incident for an issue that I'm

257
00:16:42,828 --> 00:16:47,068
seeing. Could do this from the service catalog or various other record producers

258
00:16:47,164 --> 00:16:51,008
on the servicenow side, or I could create it here directly. So I'll

259
00:16:51,024 --> 00:16:53,750
just pick a caller which can be me,

260
00:16:54,440 --> 00:16:59,588
I'll give it a description. The MS demo application is

261
00:16:59,754 --> 00:17:03,736
slow and

262
00:17:03,758 --> 00:17:05,690
we'll pick our MS demo service.

263
00:17:08,540 --> 00:17:12,408
We don't know anything else besides that, right? We'll just say, hey channel,

264
00:17:12,574 --> 00:17:16,280
this is a self service thing state. It's new.

265
00:17:16,350 --> 00:17:19,916
Okay, fine. And impact. I don't really know what

266
00:17:19,938 --> 00:17:22,476
this is all about, but I'm going to set it to a one because the

267
00:17:22,498 --> 00:17:26,460
service is really important to me. I'll save this incident

268
00:17:27,680 --> 00:17:31,280
now without knowing anything else. Incident was just created.

269
00:17:31,780 --> 00:17:35,216
We have. The only piece of information we

270
00:17:35,238 --> 00:17:38,924
know is that it's affecting this service and this brief description

271
00:17:38,972 --> 00:17:42,116
here. We now have an open and honeycomb button that

272
00:17:42,138 --> 00:17:45,876
we can go in and see what's going on with this particular

273
00:17:46,058 --> 00:17:49,556
service. Because we have identified that this

274
00:17:49,578 --> 00:17:53,152
is something that's being observed in honeycomb. Could be a kubernetes pod,

275
00:17:53,296 --> 00:17:56,840
kubernetes node. A service that underlies the

276
00:17:56,910 --> 00:18:00,628
top level service. In this case we're looking at the top level service. So we'll

277
00:18:00,644 --> 00:18:04,684
click open in honeycomb and we get back a query that shows

278
00:18:04,882 --> 00:18:08,364
results from just a moment ago until now

279
00:18:08,562 --> 00:18:11,150
about what is going on with this application.

280
00:18:13,440 --> 00:18:16,476
And if we wanted to, we could zoom out even further. We can say,

281
00:18:16,498 --> 00:18:20,248
hey, let me see what this is like the last 8 hours. What happened leading

282
00:18:20,264 --> 00:18:23,676
up to this point? Looks like there was a spike in latency a little earlier

283
00:18:23,708 --> 00:18:26,496
in the night, maybe. I want to go back and figure out what's going on

284
00:18:26,518 --> 00:18:29,280
with that. So if I'm responding to this incident,

285
00:18:30,340 --> 00:18:34,752
I have a very easy one click option for me to get into troubleshooting

286
00:18:34,816 --> 00:18:36,310
exactly what's going on here.

287
00:18:38,840 --> 00:18:42,616
And this is just the tip of the iceberg. What's possible with

288
00:18:42,638 --> 00:18:46,484
a really thoughtful integration between observability tools and itsm

289
00:18:46,532 --> 00:18:49,130
tools. So what's next?

290
00:18:51,340 --> 00:18:54,884
I'm planning to come out with a second version of the observable itSm

291
00:18:54,932 --> 00:18:57,690
framework in the end of Q three this year.

292
00:18:58,140 --> 00:19:01,836
Version 2.0 is going to be packed with big plans for some very

293
00:19:01,858 --> 00:19:05,164
cool features that I have on the roadmap. If you're interested in this

294
00:19:05,202 --> 00:19:08,556
journey, adding your voice, building out an integration like this, or just

295
00:19:08,578 --> 00:19:11,230
commiserating about the things that we want to be better,

296
00:19:11,920 --> 00:19:16,188
then let's talk. Look me up on LinkedIn and let's connect.

297
00:19:16,354 --> 00:19:19,748
You can dm me, let me know you watch the talk and two things you

298
00:19:19,754 --> 00:19:22,196
liked if you liked to talk, or two things you hated if you hated to

299
00:19:22,218 --> 00:19:25,636
talk. Let's keep the conversation flowing, challenge the status quo, and demand more

300
00:19:25,658 --> 00:19:26,160
from these integrations.

