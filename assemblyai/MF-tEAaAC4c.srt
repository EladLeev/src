1
00:01:42,590 --> 00:01:45,986
You okay? Welcome to

2
00:01:46,008 --> 00:01:49,474
this awesome conference. We continue with this talk in

3
00:01:49,512 --> 00:01:52,914
comf 22. Thanks for invite me and

4
00:01:52,952 --> 00:01:56,114
also I am very it's a big pleasure to be

5
00:01:56,152 --> 00:01:59,780
here. So today we talk about

6
00:02:01,590 --> 00:02:05,810
the adding security to development for allowable continuous delivery

7
00:02:06,310 --> 00:02:09,594
and also tom this is me. We start

8
00:02:09,632 --> 00:02:12,982
for this who is Jonathan Gillianipon.

9
00:02:13,046 --> 00:02:16,710
He's a simple human that I love Linux

10
00:02:16,790 --> 00:02:20,622
and also love shared knowledge around for the text

11
00:02:20,676 --> 00:02:24,302
ecosystem. I try to main

12
00:02:24,356 --> 00:02:28,014
more easily our lives when we try to develop and

13
00:02:28,132 --> 00:02:32,320
start deployed on cloud or on local on our

14
00:02:34,390 --> 00:02:37,998
internal providers that we have on our countries.

15
00:02:38,094 --> 00:02:42,226
So it's my passion. I sincerely love using that.

16
00:02:42,408 --> 00:02:46,130
That is my social network at JTAN 24, in GitHub,

17
00:02:46,290 --> 00:02:49,650
in YouTube and also in X or Twitter.

18
00:02:49,810 --> 00:02:53,890
If you can contact me and adding me on LinkedIn

19
00:02:53,970 --> 00:02:57,714
I use johnnypunk. You can find me and

20
00:02:57,772 --> 00:03:01,370
I want to share with you this phrase that is

21
00:03:01,440 --> 00:03:05,306
from Confucius life is really simple but wins is on making it

22
00:03:05,328 --> 00:03:07,930
complicated that as part of avalides.

23
00:03:08,430 --> 00:03:10,140
So continue here.

24
00:03:11,950 --> 00:03:16,778
This is our agenda for today. We talk about for containerized applications.

25
00:03:16,954 --> 00:03:20,254
What exactly this? How do we can use

26
00:03:20,292 --> 00:03:23,902
that and address this using

27
00:03:23,956 --> 00:03:27,486
the software development lifecycle general challenges in

28
00:03:27,588 --> 00:03:31,294
these container best apps. What is the principal

29
00:03:31,342 --> 00:03:35,202
challenge here? Address the challenge using the sodium element

30
00:03:35,266 --> 00:03:38,774
lifecycle little demo and a couple of

31
00:03:38,812 --> 00:03:42,518
conclusions here. So we start

32
00:03:42,604 --> 00:03:46,386
at this part. At this part we talk about for containerizer

33
00:03:46,418 --> 00:03:50,460
application. But what exactly is a container? The container is exactly

34
00:03:50,910 --> 00:03:54,614
how do we can encapsulate our process encapsulate our source

35
00:03:54,662 --> 00:03:58,346
code using the Docker file. I think is the

36
00:03:58,368 --> 00:04:00,400
more simple way for using that.

37
00:04:01,970 --> 00:04:06,026
How to using this Docker file for split

38
00:04:06,058 --> 00:04:10,074
our comments and exactly wrote

39
00:04:10,202 --> 00:04:13,358
these road for our applications.

40
00:04:13,454 --> 00:04:18,898
How do we can add in and use our proper

41
00:04:19,064 --> 00:04:23,134
ecosystem, our proper operation systems.

42
00:04:23,262 --> 00:04:28,166
So at this part we define exactly every

43
00:04:28,348 --> 00:04:32,082
step that we need to cover for our packaging.

44
00:04:32,146 --> 00:04:35,334
This compilation of source code that is the one

45
00:04:35,372 --> 00:04:39,462
part and also we have the part of the containerization,

46
00:04:39,606 --> 00:04:43,322
right? This part of containerization is

47
00:04:43,456 --> 00:04:46,746
how do we move from our package and how do

48
00:04:46,768 --> 00:04:50,126
we can support and start using this

49
00:04:50,148 --> 00:04:54,142
docker for using that. The second part

50
00:04:54,196 --> 00:04:58,334
is hey, what kind of initiatives are

51
00:04:58,372 --> 00:05:01,722
around here we found exactly open container

52
00:05:01,786 --> 00:05:05,570
initiative that is OCI and also this

53
00:05:05,640 --> 00:05:09,058
container initiative talk from a

54
00:05:09,064 --> 00:05:12,238
couple of values. These values are decomposable,

55
00:05:12,334 --> 00:05:15,126
portable, decentralized, open,

56
00:05:15,228 --> 00:05:18,482
minimalist but we're compatible.

57
00:05:18,626 --> 00:05:22,550
But one biggest part here is that around for secure

58
00:05:22,890 --> 00:05:27,154
how to isolate shellbugable and

59
00:05:27,212 --> 00:05:31,606
add a cryptographic for these containerized

60
00:05:31,718 --> 00:05:35,334
application and generate more stronger container

61
00:05:35,382 --> 00:05:39,738
for our application how to add in the part of detail

62
00:05:39,824 --> 00:05:43,406
for this container and generate layer for security

63
00:05:43,508 --> 00:05:46,526
site. That is pretty awesome.

64
00:05:46,628 --> 00:05:50,910
And also we have a couple of benefits using containers.

65
00:05:51,490 --> 00:05:55,630
The first one is about for portability.

66
00:05:55,790 --> 00:05:59,410
How to use this portability for mode pretty quick

67
00:05:59,560 --> 00:06:02,754
this package for software and move from one side

68
00:06:02,792 --> 00:06:06,294
to another side from what cloud environment to

69
00:06:06,412 --> 00:06:12,530
our bare metal or our centralized definition

70
00:06:12,610 --> 00:06:16,678
for our infrastructure. The second one is the agility that we

71
00:06:16,764 --> 00:06:20,426
generate for all teams around for that. Now how do

72
00:06:20,448 --> 00:06:24,474
we generate this easily way to deploy the

73
00:06:24,512 --> 00:06:28,730
application. And another is the installation because we

74
00:06:28,880 --> 00:06:32,250
generate this installate paras software,

75
00:06:32,930 --> 00:06:36,494
generate their network around for

76
00:06:36,532 --> 00:06:40,590
this containerized application. And also we

77
00:06:40,660 --> 00:06:44,514
talk about the resource efficiency because when we

78
00:06:44,632 --> 00:06:48,882
generate this container we reduce exactly the

79
00:06:49,016 --> 00:06:53,118
consumer about the memory or cpu

80
00:06:53,214 --> 00:06:56,786
and disk about for this piece of

81
00:06:56,808 --> 00:07:02,182
software. And how do we can drop this in all around

82
00:07:02,236 --> 00:07:04,600
for our orchard station site.

83
00:07:05,290 --> 00:07:08,854
So that is a couple of images that I generated

84
00:07:08,902 --> 00:07:12,870
using the Hughen phase and also the Dali

85
00:07:13,030 --> 00:07:16,186
generation for images. How to

86
00:07:16,208 --> 00:07:19,786
the IAA generate these images for us and how

87
00:07:19,808 --> 00:07:23,360
to the IAA seems the container actually work.

88
00:07:23,890 --> 00:07:28,330
So when we talk about the lifecycle

89
00:07:28,410 --> 00:07:33,326
we talk about these could be focuses

90
00:07:33,438 --> 00:07:37,330
about these benefits or feature that we enable

91
00:07:38,550 --> 00:07:41,826
when we talk about this. So from our side we talk

92
00:07:41,848 --> 00:07:45,254
about the accelerated development and deployment side that

93
00:07:45,292 --> 00:07:49,640
it's very awesome. Because when we start this

94
00:07:50,250 --> 00:07:53,702
containerized move internally for our companies,

95
00:07:53,836 --> 00:07:57,054
we enable these capabilities for all teams,

96
00:07:57,202 --> 00:08:01,206
not just for development. We enable that for the testing

97
00:08:01,238 --> 00:08:05,562
team and the operation teams and also for

98
00:08:05,616 --> 00:08:09,954
the DevOps, Devsecops and SRE or platform engineerings

99
00:08:10,102 --> 00:08:14,186
around for this ecosystem that we have internally.

100
00:08:14,298 --> 00:08:17,774
The second one are related for portability and

101
00:08:17,812 --> 00:08:21,774
reproducibility. That is awesome because when

102
00:08:21,812 --> 00:08:25,422
you generate these docker files or these container

103
00:08:25,486 --> 00:08:28,882
applications, you move from one side your

104
00:08:28,936 --> 00:08:32,626
container application and also you can move this application

105
00:08:32,728 --> 00:08:36,006
for another part and deploy very quick that

106
00:08:36,028 --> 00:08:39,526
it's brilliant. Enhance excalibility and

107
00:08:39,548 --> 00:08:43,430
resource efficiency. That is talking previously about the

108
00:08:43,500 --> 00:08:47,046
cpu, memory and disk drive around for

109
00:08:47,068 --> 00:08:50,302
that simplify microservice detector.

110
00:08:50,466 --> 00:08:53,642
When you start that using the

111
00:08:53,696 --> 00:08:57,686
docker apps for your teams,

112
00:08:57,718 --> 00:09:01,502
you enable exactly these capabilities for move very

113
00:09:01,556 --> 00:09:05,758
quick. And also you support the architecture that the

114
00:09:05,924 --> 00:09:09,486
principal architecture definition was made for your

115
00:09:09,508 --> 00:09:13,294
teams and also the architectural department behind us.

116
00:09:13,492 --> 00:09:16,766
And how you can drop this using the

117
00:09:16,788 --> 00:09:20,850
containerizer war. And you support very quick these new

118
00:09:20,920 --> 00:09:24,030
capabilities for all ecosystems

119
00:09:24,190 --> 00:09:27,650
for the architectural designs.

120
00:09:27,810 --> 00:09:31,414
Or generate this valuable for all teams around

121
00:09:31,532 --> 00:09:35,446
for the containerized award. Reduce the

122
00:09:35,468 --> 00:09:39,114
deployment friction because you generate this and generate more

123
00:09:39,152 --> 00:09:42,554
reputable software and

124
00:09:42,592 --> 00:09:46,714
generate streamline testing and quality assurance because

125
00:09:46,832 --> 00:09:53,614
you drop these pieces of software and you can test pretty quick this

126
00:09:53,652 --> 00:09:57,914
piece of software and generate very easily these movements internally

127
00:09:57,962 --> 00:10:01,434
for this generation. So enhancement,

128
00:10:01,482 --> 00:10:05,778
security and compliance that is the focus that we talk in

129
00:10:05,784 --> 00:10:09,358
the next slides. Improved collaboration communication

130
00:10:09,454 --> 00:10:12,562
because you reduce this communication side and

131
00:10:12,616 --> 00:10:16,342
also you involve all capabilities for DevOps side.

132
00:10:16,476 --> 00:10:20,546
And when you added this DevOps

133
00:10:20,658 --> 00:10:24,518
culture inside of we added the security part.

134
00:10:24,684 --> 00:10:28,274
We enable these cuttings for

135
00:10:28,332 --> 00:10:31,530
all teams. How do these cuttings works

136
00:10:31,600 --> 00:10:35,046
for all and how do we can generate and reduce

137
00:10:35,078 --> 00:10:38,506
this friction from one side and another side and how do

138
00:10:38,528 --> 00:10:42,234
we can talk more efficiently and generate

139
00:10:42,282 --> 00:10:46,362
more quality software

140
00:10:46,426 --> 00:10:50,254
for our ecosystems and deploy more easily way and

141
00:10:50,292 --> 00:10:53,406
also reduce this friction from all teams

142
00:10:53,438 --> 00:10:56,690
around for and also reduce cost.

143
00:10:56,840 --> 00:10:59,950
Because when you reduce exactly your scope

144
00:11:00,030 --> 00:11:03,614
and you generate this last reduce in a minimal

145
00:11:03,662 --> 00:11:07,350
way, you generate this reduction for all around

146
00:11:07,420 --> 00:11:10,982
for that, that could be when you start for that

147
00:11:11,036 --> 00:11:14,226
using database practice the subfatilian lifecycle.

148
00:11:14,338 --> 00:11:18,538
But you need to talk about that inside of your company

149
00:11:18,704 --> 00:11:22,122
because when you define this and also

150
00:11:22,176 --> 00:11:25,980
you need to move internally for the companies it's not easy

151
00:11:26,750 --> 00:11:30,606
to sell something like that. Because when

152
00:11:30,708 --> 00:11:33,934
the companies start to generate these

153
00:11:33,972 --> 00:11:37,610
DevOps or DevOps move and DevOps culture

154
00:11:37,770 --> 00:11:41,294
that it's no easy to sell them because

155
00:11:41,412 --> 00:11:45,406
they open this mind and this mindset

156
00:11:45,438 --> 00:11:49,166
is very difficult to sell at the beginning.

157
00:11:49,358 --> 00:11:53,314
So we support here all

158
00:11:53,352 --> 00:11:57,446
these capabilities for the software development lifecycle using

159
00:11:57,548 --> 00:12:01,282
these phases for development, for deployment

160
00:12:01,346 --> 00:12:04,726
and also for the operation. Because when we

161
00:12:04,748 --> 00:12:08,842
define this from one part, that is for the

162
00:12:08,896 --> 00:12:12,714
develop side, we enable these capabilities for

163
00:12:12,832 --> 00:12:16,682
the development team. But what happened with the

164
00:12:16,736 --> 00:12:20,210
development team also using the dockerized

165
00:12:20,310 --> 00:12:24,734
application, they have the capabilities for

166
00:12:24,852 --> 00:12:28,874
deploy and explore and expose internally

167
00:12:28,922 --> 00:12:32,818
for their computers these source code.

168
00:12:32,904 --> 00:12:36,866
But what happened when we move this for hey, we need

169
00:12:36,888 --> 00:12:40,606
to deploy that for development environment

170
00:12:40,798 --> 00:12:44,658
or for QI environment or for testing environment for lower

171
00:12:44,824 --> 00:12:48,886
environments and also for production. That is the

172
00:12:48,908 --> 00:12:52,610
next challenge here. And also when I deploy

173
00:12:52,690 --> 00:12:56,550
the application I need to start the parachute. When we

174
00:12:56,620 --> 00:12:59,914
start the operation for this application we need

175
00:12:59,952 --> 00:13:03,894
to generate these capabilities for all ecosystems,

176
00:13:04,022 --> 00:13:08,762
right? Because the it guys need to take these

177
00:13:08,816 --> 00:13:12,122
features and how they can access to

178
00:13:12,256 --> 00:13:16,186
these capabilities. How do we can enable

179
00:13:16,298 --> 00:13:19,630
these capabilities for the Docker racer apps?

180
00:13:20,370 --> 00:13:24,302
How do we can enable that using software

181
00:13:24,446 --> 00:13:27,586
around that, right. So what

182
00:13:27,608 --> 00:13:29,860
is the challenge here?

183
00:13:30,390 --> 00:13:34,538
The general challenge here are related for image vulnerabilities,

184
00:13:34,654 --> 00:13:38,630
the misconfiguration supply chains attack and also

185
00:13:38,700 --> 00:13:41,110
the identification and access management.

186
00:13:41,610 --> 00:13:47,166
You see here in the image the OAS

187
00:13:47,218 --> 00:13:50,554
top ten that is related for Docker. And when

188
00:13:50,592 --> 00:13:54,780
you start docker, you start talking about the security side.

189
00:13:55,390 --> 00:13:59,178
How do you can drop this security for

190
00:13:59,344 --> 00:14:03,390
the old last radios that have the docker

191
00:14:03,970 --> 00:14:07,370
images that you have for the containerized

192
00:14:07,450 --> 00:14:10,814
application. You need to identify exactly what

193
00:14:10,852 --> 00:14:14,078
is your security posture,

194
00:14:14,254 --> 00:14:18,260
how to use in this security poster for generate the

195
00:14:18,710 --> 00:14:22,434
roadmaps and generate the plans for doing that,

196
00:14:22,552 --> 00:14:26,342
right? You need to take a look more in deep this but we talk

197
00:14:26,476 --> 00:14:29,170
this talk about for image vulnerabilities,

198
00:14:29,250 --> 00:14:32,598
misconfigurations, plane chains attack and interfere and

199
00:14:32,604 --> 00:14:36,974
access management. So for image vulnerabilities

200
00:14:37,122 --> 00:14:41,418
we talk for one site that is related in a

201
00:14:41,584 --> 00:14:45,434
principal and the fierce part for

202
00:14:45,632 --> 00:14:49,354
start for this the checkup's work that

203
00:14:49,392 --> 00:14:53,754
is related for how do we can generate and

204
00:14:53,792 --> 00:14:57,790
reduce this blaster using the image vulnerabilities? Because this

205
00:14:57,860 --> 00:15:02,670
impact of the image vulnerabilities impact sacly for how

206
00:15:02,740 --> 00:15:06,434
they can access to our operation system or the

207
00:15:06,472 --> 00:15:10,386
runtime site or how they can gain access

208
00:15:10,488 --> 00:15:14,194
to containerized application and also how they can

209
00:15:14,232 --> 00:15:17,910
get data from these containerized apps.

210
00:15:19,690 --> 00:15:23,414
Also you need to reduce these attacks using

211
00:15:23,532 --> 00:15:27,346
exactly the image vulnerabilities. But how do

212
00:15:27,388 --> 00:15:30,762
you can reduce that? We talk more in the next

213
00:15:30,816 --> 00:15:34,522
slides about that. But the image vulnerabilities are

214
00:15:34,576 --> 00:15:38,730
talking about the weakness or flaws that containerated

215
00:15:39,230 --> 00:15:42,926
image had at the moment when you deploy the application,

216
00:15:43,028 --> 00:15:46,394
right? So you can generate

217
00:15:46,442 --> 00:15:50,138
this and also you can reduce these vulnerabilities

218
00:15:50,234 --> 00:15:53,762
using iscans behind us. So we talk

219
00:15:53,816 --> 00:15:57,218
in one tool that we generate in the demo

220
00:15:57,384 --> 00:16:01,442
site and also that is one site. The another part is

221
00:16:01,576 --> 00:16:05,842
the software components that you have around for

222
00:16:05,896 --> 00:16:09,174
this image that you build it for the application.

223
00:16:09,292 --> 00:16:12,742
Because internally for your application you had one part

224
00:16:12,796 --> 00:16:16,294
for the operation system, the second one part that is

225
00:16:16,332 --> 00:16:20,106
related for the runtime around for your application. And the third one

226
00:16:20,128 --> 00:16:24,326
is about for the application by default.

227
00:16:24,518 --> 00:16:28,186
So you have three action items here

228
00:16:28,288 --> 00:16:32,218
for protect. How do you can protect these items

229
00:16:32,314 --> 00:16:36,238
when you prepare and generate this image for

230
00:16:36,324 --> 00:16:39,694
your site? Right? So we need

231
00:16:39,732 --> 00:16:43,140
to talk and identify exactly this

232
00:16:43,910 --> 00:16:47,294
vector than the definition from Docker

233
00:16:47,342 --> 00:16:50,834
site or the containerized site.

234
00:16:51,032 --> 00:16:54,986
The second one is related for misconfiguration. This misconfiguration

235
00:16:55,038 --> 00:16:58,422
are related for how do the

236
00:16:58,476 --> 00:17:02,902
applications generate or

237
00:17:02,956 --> 00:17:06,694
could be the development team generate or could be

238
00:17:06,732 --> 00:17:09,814
forget remove from secrets or something

239
00:17:09,852 --> 00:17:13,570
like that for the container ice work.

240
00:17:13,740 --> 00:17:17,866
When you use these misconfigurations and

241
00:17:17,888 --> 00:17:21,630
you identify that you need to take a look for these misconfigurations.

242
00:17:22,290 --> 00:17:25,870
You need to validate exactly what kind of

243
00:17:25,940 --> 00:17:29,726
misconfigurations you need to cover because

244
00:17:29,828 --> 00:17:33,530
you need to exactly explore tools behind us.

245
00:17:33,700 --> 00:17:37,666
But these misconfigurations are related for hey how do

246
00:17:37,688 --> 00:17:41,922
we can access to these misconfigurations? Could be

247
00:17:42,056 --> 00:17:45,614
generate a misconfiguration by default from one ubuntu

248
00:17:45,662 --> 00:17:49,938
image or Debian emash or something like that and also expose

249
00:17:50,034 --> 00:17:53,286
more than one port that I need could be for

250
00:17:53,308 --> 00:17:56,774
example you expose the port 22 that is

251
00:17:56,812 --> 00:18:00,970
related for SSH and also I don't know could be exposed

252
00:18:02,750 --> 00:18:06,474
in a public site the SSH key for

253
00:18:06,512 --> 00:18:10,654
access to this docker or containerized app and

254
00:18:10,852 --> 00:18:14,126
that is the part of the misconfiguration that could be

255
00:18:14,148 --> 00:18:18,238
you need to cover here. And also how do you can

256
00:18:18,404 --> 00:18:22,850
exactly identify this exposure network?

257
00:18:23,190 --> 00:18:27,730
How do you can identify the file

258
00:18:28,230 --> 00:18:32,478
insecure definitions internally for this containerized

259
00:18:32,654 --> 00:18:36,230
app? How do you can address this

260
00:18:36,380 --> 00:18:40,834
using a couple of software behind off that validate

261
00:18:40,882 --> 00:18:44,534
from the community. For another part you

262
00:18:44,572 --> 00:18:48,290
define the unsecured container registry

263
00:18:48,370 --> 00:18:52,038
and how you can drop and identify

264
00:18:52,134 --> 00:18:55,590
what happened with this registry.

265
00:18:55,670 --> 00:18:59,402
And also if you could be exposed the

266
00:18:59,456 --> 00:19:03,120
configuration the users and password for access today

267
00:19:03,570 --> 00:19:07,070
and how do they can gain access to this

268
00:19:07,140 --> 00:19:10,874
repository and copy change the image and tag

269
00:19:11,002 --> 00:19:14,974
from your site and generate this in an evolved

270
00:19:15,022 --> 00:19:19,026
image that is related for the image vulnerabilities and

271
00:19:19,048 --> 00:19:22,542
generate that in that site. This impact

272
00:19:22,686 --> 00:19:26,230
generates a very big impact when

273
00:19:26,300 --> 00:19:30,182
the application will be deployed because

274
00:19:30,316 --> 00:19:34,358
the application or could be your system

275
00:19:34,444 --> 00:19:38,380
exposed unauthorized way for

276
00:19:38,910 --> 00:19:42,906
these misconfigurations could be for one site for the database or

277
00:19:42,928 --> 00:19:46,620
could be for your registry or could be for

278
00:19:47,230 --> 00:19:50,570
the data access. When you identify

279
00:19:50,650 --> 00:19:54,158
that you take a look about hey

280
00:19:54,244 --> 00:19:57,966
I have this compromised world and I

281
00:19:57,988 --> 00:20:01,998
need to take a look in deep about this position

282
00:20:02,084 --> 00:20:05,346
and how we

283
00:20:05,368 --> 00:20:09,060
can reduce this part of the misconfiguration site.

284
00:20:09,510 --> 00:20:12,420
The another one is really for supply chains attack.

285
00:20:13,990 --> 00:20:18,054
For supply chains attack. Also we

286
00:20:18,092 --> 00:20:22,114
need to define exactly how to these attacks will be targeted

287
00:20:22,242 --> 00:20:24,470
for the sword party element lifecycle,

288
00:20:24,810 --> 00:20:28,582
how they could compromise the containerized

289
00:20:28,646 --> 00:20:33,338
application. In this context the attacker could take

290
00:20:33,504 --> 00:20:36,822
and modify our code and generate

291
00:20:36,886 --> 00:20:40,442
this on the fly and generate this

292
00:20:40,496 --> 00:20:44,734
process internally for the Tokyo set app and also the

293
00:20:44,772 --> 00:20:47,440
final product that you deliver for your customer.

294
00:20:48,530 --> 00:20:52,590
Generate an evil package of software

295
00:20:52,930 --> 00:20:58,590
and could take this data from your customers generate

296
00:20:58,670 --> 00:21:02,980
and obtain and get this data from your customer that it's pretty

297
00:21:03,510 --> 00:21:06,838
weird because your customer could be hey,

298
00:21:06,924 --> 00:21:10,438
I get my data out of your application and just

299
00:21:10,604 --> 00:21:14,582
share with you what happened here. Then they

300
00:21:14,636 --> 00:21:18,358
added to you could be lsla bar

301
00:21:18,444 --> 00:21:21,994
for the security sites. So you need to cover that

302
00:21:22,112 --> 00:21:25,450
from the zero day for the start

303
00:21:25,600 --> 00:21:28,634
when you deploy this application for your customer,

304
00:21:28,752 --> 00:21:34,494
right? So the

305
00:21:34,532 --> 00:21:38,510
object here when we talk about this

306
00:21:38,580 --> 00:21:42,326
supply chains attack also we need to validate

307
00:21:42,378 --> 00:21:46,638
exactly what happened when this compromised

308
00:21:46,734 --> 00:21:49,662
application will be for our apps.

309
00:21:49,806 --> 00:21:52,980
What kind of security

310
00:21:53,350 --> 00:21:56,854
definition we define it internally for our companies.

311
00:21:57,052 --> 00:22:01,222
How do these companies define exactly what

312
00:22:01,276 --> 00:22:04,486
happened with this definition for

313
00:22:04,508 --> 00:22:08,294
that when they're not the part for the supply

314
00:22:08,342 --> 00:22:11,526
chains attack that is related for containerizing

315
00:22:11,718 --> 00:22:15,098
and also when they access

316
00:22:15,184 --> 00:22:19,210
to this application also

317
00:22:19,280 --> 00:22:23,486
for our source code

318
00:22:23,668 --> 00:22:27,406
they can execute malicious code for the customer

319
00:22:27,508 --> 00:22:30,794
side. That is the biggest challenge

320
00:22:30,842 --> 00:22:35,040
here. How do we can reduce this blast and how

321
00:22:36,050 --> 00:22:39,794
we can reduce and generate a copy of a culture internally for

322
00:22:39,832 --> 00:22:43,246
our teams for reduce

323
00:22:43,358 --> 00:22:46,994
exactly what happened here. Another part that

324
00:22:47,032 --> 00:22:51,166
is the impact for this plane

325
00:22:51,198 --> 00:22:54,934
change attacks that is related for data breaches, the application

326
00:22:55,052 --> 00:22:58,146
disruption, the escalation privileges

327
00:22:58,338 --> 00:23:01,702
and damage our reputation. Because when

328
00:23:01,756 --> 00:23:06,122
you expose or could we take data from your companies offer

329
00:23:06,176 --> 00:23:10,078
our companies that it's very difficult

330
00:23:10,164 --> 00:23:13,850
to try to generate

331
00:23:13,930 --> 00:23:17,054
and regenerate our reputation for

332
00:23:17,092 --> 00:23:18,400
our customer, right.

333
00:23:20,050 --> 00:23:23,582
On the other side, on the other hand we have the identity

334
00:23:23,646 --> 00:23:27,426
and access management that is related. How do they containerize it

335
00:23:27,528 --> 00:23:30,930
access to another components internally and externally.

336
00:23:31,350 --> 00:23:35,686
How do we can reduce this blast? How do we can

337
00:23:35,868 --> 00:23:39,282
exactly define for the container image

338
00:23:39,346 --> 00:23:43,238
and definitions for these access

339
00:23:43,324 --> 00:23:46,626
for another components around for our software?

340
00:23:46,738 --> 00:23:50,330
For one part we define for the resource access control

341
00:23:50,400 --> 00:23:53,962
list. How do they can access to and

342
00:23:54,016 --> 00:23:57,126
generate this granular access to another mechanisms

343
00:23:57,158 --> 00:24:01,434
and permissions associate for another resources.

344
00:24:01,562 --> 00:24:05,658
The attribute based access control provides

345
00:24:05,754 --> 00:24:09,150
more flexible approach to access control evaluation

346
00:24:09,570 --> 00:24:13,538
for attributes, user and containers. And also

347
00:24:13,624 --> 00:24:17,554
if we deploy using this for

348
00:24:17,592 --> 00:24:21,390
Kubernetes, for example, we can enable the airbag

349
00:24:21,470 --> 00:24:25,670
that is the role based access control. How do we can reduce this

350
00:24:25,820 --> 00:24:29,186
access for another set of components

351
00:24:29,218 --> 00:24:32,918
around for Kubernetes? And another

352
00:24:33,004 --> 00:24:36,514
part the challenge here are related for the scalability,

353
00:24:36,642 --> 00:24:38,870
complexibility and visibility.

354
00:24:39,370 --> 00:24:43,082
Because when we drop this part

355
00:24:43,136 --> 00:24:47,446
of the piece of software containerized, we define

356
00:24:47,478 --> 00:24:51,230
exactly this

357
00:24:51,300 --> 00:24:54,682
little piece of software and this piece of software

358
00:24:54,746 --> 00:24:58,030
will be grow and reduce

359
00:24:59,810 --> 00:25:03,102
these capabilities when the software grows

360
00:25:03,246 --> 00:25:06,834
for explore more for those

361
00:25:06,872 --> 00:25:10,050
customers, right? So we need to address

362
00:25:10,120 --> 00:25:13,554
the challenge for the next topics. That's another

363
00:25:13,672 --> 00:25:17,010
images related for the AA related for one to

364
00:25:17,160 --> 00:25:20,946
this challenge that we need to talk in the software

365
00:25:21,058 --> 00:25:25,014
lifecycle. So for one side we

366
00:25:25,052 --> 00:25:28,934
need to identify very quick the vulnerabilities and

367
00:25:28,972 --> 00:25:33,634
also the misconfiguration and supply chains and IAM enforcement.

368
00:25:33,682 --> 00:25:37,526
And how do we can arrest using tools

369
00:25:37,638 --> 00:25:41,370
internally? Because when we talk about in depth setups

370
00:25:41,730 --> 00:25:45,502
based on DevOps, we talk from one

371
00:25:45,636 --> 00:25:49,214
focus that is related for pipelines. When you

372
00:25:49,252 --> 00:25:52,850
define these pipelines for the company you enable exactly

373
00:25:52,920 --> 00:25:56,482
the capabilities for your software to deploy more

374
00:25:56,536 --> 00:26:00,078
easily. But not exactly should deploy

375
00:26:00,174 --> 00:26:03,442
pretty quick without quality or

376
00:26:03,576 --> 00:26:07,774
unsecured software. The definition internally

377
00:26:07,822 --> 00:26:11,434
for devsecops when you generate these pilots

378
00:26:11,502 --> 00:26:15,506
you enable another capabilities for the software pieces

379
00:26:15,618 --> 00:26:19,174
that you deploy every day or for every URL

380
00:26:19,222 --> 00:26:22,938
or every minute. And added these security

381
00:26:23,024 --> 00:26:26,186
capabilities too for the software that

382
00:26:26,208 --> 00:26:30,334
you deploy, right. So for

383
00:26:30,372 --> 00:26:34,400
this challenge we can explore these

384
00:26:35,490 --> 00:26:38,814
tools around for the CNCF too. That is

385
00:26:38,852 --> 00:26:42,530
related exactly for the security site that is taken

386
00:26:42,600 --> 00:26:46,562
from the CNCF that

387
00:26:46,616 --> 00:26:49,902
we talked at the beginning of this talk that is related

388
00:26:49,966 --> 00:26:54,146
for the software the cloud native Computing foundation and

389
00:26:54,168 --> 00:26:58,102
this they focused for currently tools that

390
00:26:58,156 --> 00:27:01,494
are built for community, for the community and

391
00:27:01,532 --> 00:27:04,822
also ones are part for the

392
00:27:04,876 --> 00:27:08,650
one vendor or another vendor or could be from one cloud

393
00:27:08,720 --> 00:27:12,250
provider or something like that. But you have these

394
00:27:12,400 --> 00:27:16,426
tools and you can explore depends for your needs and exactly

395
00:27:16,528 --> 00:27:20,250
how to you add these tools

396
00:27:20,750 --> 00:27:24,350
for your pipelines or software development lifecycle depend

397
00:27:24,420 --> 00:27:27,786
on the phases that you are currently have for deployed

398
00:27:27,818 --> 00:27:31,694
software. So we can move very

399
00:27:31,732 --> 00:27:35,342
quick for the demo. This demo are related

400
00:27:35,406 --> 00:27:38,900
for how we can explore a couple of

401
00:27:39,350 --> 00:27:43,426
this software inside here. Let us move here

402
00:27:43,608 --> 00:27:46,982
for the demo site.

403
00:27:47,116 --> 00:27:50,840
Let me move for that and also

404
00:27:53,530 --> 00:27:57,820
drop here this also close this and

405
00:27:58,430 --> 00:28:00,860
we can open the readme right.

406
00:28:07,230 --> 00:28:11,454
So we have this repository comes 22 23

407
00:28:11,572 --> 00:28:15,440
devsecops and we have here exactly

408
00:28:15,970 --> 00:28:19,982
the step by step for generate one

409
00:28:20,036 --> 00:28:23,650
image here and also you can use this

410
00:28:23,720 --> 00:28:28,450
using I don't know could be Docker or Borman or

411
00:28:28,600 --> 00:28:32,466
another container application that currently

412
00:28:32,568 --> 00:28:35,666
you have in your company and start with that,

413
00:28:35,768 --> 00:28:39,662
right. So we suppose that you have here

414
00:28:39,816 --> 00:28:43,750
a pipeline and you clone exactly the pet link

415
00:28:43,820 --> 00:28:47,702
here and you download here. I currently download

416
00:28:47,766 --> 00:28:51,238
this source and just join

417
00:28:51,334 --> 00:28:54,710
this folder and move internally.

418
00:28:54,870 --> 00:28:58,330
And also I need to create this docker image

419
00:28:58,670 --> 00:29:01,994
using the Docker file. Create a docker

420
00:29:02,042 --> 00:29:05,614
image and also we can enable this and

421
00:29:05,652 --> 00:29:09,594
execute this part for applications.

422
00:29:09,722 --> 00:29:13,118
But we don't need exactly run that

423
00:29:13,284 --> 00:29:16,782
and we check

424
00:29:16,836 --> 00:29:20,270
this the plex clinic we have two docker files.

425
00:29:20,350 --> 00:29:24,542
One docker file that is related for

426
00:29:24,616 --> 00:29:29,058
compile the application using maven using internally

427
00:29:29,154 --> 00:29:33,586
configuration for Java that is a boom xml

428
00:29:33,698 --> 00:29:38,394
and we define exactly here that move or

429
00:29:38,432 --> 00:29:42,250
copy all the source code related here and

430
00:29:42,320 --> 00:29:46,534
when the runtime start compile

431
00:29:46,582 --> 00:29:50,060
this code and start the execution, right.

432
00:29:50,430 --> 00:29:54,058
But we have exactly the node docker file multi.

433
00:29:54,154 --> 00:29:57,610
When you use Docker files you can define

434
00:29:57,690 --> 00:30:01,694
the multistages here and you can reduce exactly the

435
00:30:01,732 --> 00:30:05,874
blazer I use using this multistage part and also

436
00:30:05,912 --> 00:30:09,778
we have the first part very similar

437
00:30:09,864 --> 00:30:13,138
for the previously but we have here

438
00:30:13,224 --> 00:30:17,382
for another phases we have here the

439
00:30:17,436 --> 00:30:21,142
production side and from build that is

440
00:30:21,276 --> 00:30:24,786
this part we package

441
00:30:24,898 --> 00:30:29,080
exactly this base from source code and generate the

442
00:30:29,610 --> 00:30:33,550
GI air packages from sprint

443
00:30:33,730 --> 00:30:37,610
clinic. And also we reduce the blast ready because in

444
00:30:37,680 --> 00:30:42,490
this part just generate the GR definition

445
00:30:42,650 --> 00:30:46,014
and not exactly the wall source code that we

446
00:30:46,052 --> 00:30:50,046
have here. So we generate the

447
00:30:50,228 --> 00:30:53,694
couple of images here and so we generate

448
00:30:53,742 --> 00:30:57,170
the first part that is related for pet clinic and we

449
00:30:57,240 --> 00:31:01,570
generate here the pet clinic mini

450
00:31:01,990 --> 00:31:06,098
using exactly the Docker mini multi file

451
00:31:06,274 --> 00:31:10,438
or generate that and also if we palliate here

452
00:31:10,524 --> 00:31:14,662
docker images and filter for

453
00:31:14,796 --> 00:31:18,154
pet clinic we have here these couple

454
00:31:18,192 --> 00:31:21,914
of images the pet clinic at mini and Pet clinic app.

455
00:31:22,032 --> 00:31:26,058
And also if we check the weight for everyone

456
00:31:26,224 --> 00:31:29,702
for each one we saw here exactly

457
00:31:29,856 --> 00:31:33,102
the image weight from one side another,

458
00:31:33,236 --> 00:31:36,842
right? And we identify exactly the app clinic

459
00:31:36,986 --> 00:31:41,806
mini is less image here for

460
00:31:41,988 --> 00:31:45,154
one site. If you validate or

461
00:31:45,192 --> 00:31:48,882
try to validate your docker deployments you can

462
00:31:49,016 --> 00:31:52,946
start for this validation site. That is the

463
00:31:53,048 --> 00:31:57,270
first scan that you need to execute

464
00:31:59,930 --> 00:32:03,314
for your operation infrastructure

465
00:32:03,442 --> 00:32:06,694
because this is part for your

466
00:32:06,732 --> 00:32:10,250
currently definition on the docker side.

467
00:32:10,320 --> 00:32:13,926
So at this part we define the continuous

468
00:32:13,958 --> 00:32:17,754
trust that is our currently installation for

469
00:32:17,792 --> 00:32:21,022
Docker and also we mount from our

470
00:32:21,076 --> 00:32:24,990
etc for the operation system in my case

471
00:32:25,140 --> 00:32:28,414
for my arch Linux inside of

472
00:32:28,612 --> 00:32:32,490
the container and date mount in the read only

473
00:32:32,660 --> 00:32:36,580
and also we mount the container the application

474
00:32:37,190 --> 00:32:40,786
in read only. Also the run c two,

475
00:32:40,968 --> 00:32:44,858
the system d two and here the Bart lib

476
00:32:44,974 --> 00:32:48,134
and the sock for docker that they

477
00:32:48,172 --> 00:32:52,034
need this execution for these container

478
00:32:52,082 --> 00:32:56,022
needs that is related for docker bench security and

479
00:32:56,076 --> 00:33:01,306
also this generate these awesome

480
00:33:01,408 --> 00:33:05,146
results for your docker configuration and you

481
00:33:05,168 --> 00:33:08,614
can check this one about what happened internally

482
00:33:08,662 --> 00:33:12,494
for your configuration and provision in your infrastructure site and

483
00:33:12,532 --> 00:33:17,322
validate exactly what happened if your docker was misconfigured

484
00:33:17,466 --> 00:33:21,006
right that is the one part for the misconfiguration for your

485
00:33:21,028 --> 00:33:26,078
docker and also if you generate

486
00:33:26,254 --> 00:33:30,414
this unconfigured installation

487
00:33:30,462 --> 00:33:34,210
for your docker you can move in my site.

488
00:33:34,360 --> 00:33:37,974
I propose this for tls because I open

489
00:33:38,012 --> 00:33:41,478
in my port because I use for another

490
00:33:41,564 --> 00:33:45,730
pucs but I don't enable the TLS communication

491
00:33:45,810 --> 00:33:49,654
just open the plain communication for my docker

492
00:33:49,702 --> 00:33:53,578
site. So you can check this and also validate exactly

493
00:33:53,664 --> 00:33:57,722
what happened with this one. And if you want or you

494
00:33:57,776 --> 00:34:02,298
need to check exactly for your move

495
00:34:02,384 --> 00:34:06,206
and depends for your postgrad also depends for

496
00:34:06,228 --> 00:34:09,950
your time for your team time about for generate

497
00:34:10,850 --> 00:34:14,370
and reduce these lags about for security posture.

498
00:34:14,870 --> 00:34:17,970
That is the one side. The second part

499
00:34:18,040 --> 00:34:21,842
here that is related for mass configuration detection and

500
00:34:21,896 --> 00:34:25,910
also we generate for

501
00:34:25,980 --> 00:34:29,800
the pet clinic the application. If you remember

502
00:34:30,490 --> 00:34:34,482
we generate two images. One images that is related

503
00:34:34,546 --> 00:34:38,234
for the PET clinic that

504
00:34:38,432 --> 00:34:42,506
contains the wall source code and we validate here

505
00:34:42,608 --> 00:34:46,266
this part for the validate this image and

506
00:34:46,368 --> 00:34:50,002
also we validate another image

507
00:34:50,086 --> 00:34:53,738
that is related for the pet clinic mini,

508
00:34:53,834 --> 00:34:58,090
right? When we saw these files

509
00:34:58,170 --> 00:35:01,594
that has par for here and compare

510
00:35:01,642 --> 00:35:05,506
these files compare selected we

511
00:35:05,528 --> 00:35:10,686
saw here a couple of differences

512
00:35:10,798 --> 00:35:14,590
from one side to another. But in general there are

513
00:35:14,680 --> 00:35:18,002
the same image when we build the images

514
00:35:18,146 --> 00:35:21,906
and also we have the same results

515
00:35:21,938 --> 00:35:25,138
here, right? Because the pet clinic and the pet clinic

516
00:35:25,234 --> 00:35:29,910
mini are defined using an Ubuntu base

517
00:35:30,060 --> 00:35:34,678
and also this ubuntu base are born out for this CBA

518
00:35:34,854 --> 00:35:38,730
and if you want to validate what is the CBA you have here

519
00:35:38,880 --> 00:35:42,542
the link for validate that and if you

520
00:35:42,676 --> 00:35:46,174
check here we can show exactly

521
00:35:46,292 --> 00:35:50,238
what is exactly a severity for this.

522
00:35:50,324 --> 00:35:54,354
At this case it's low and also if you

523
00:35:54,392 --> 00:35:58,162
drop here we can find for another medium but not

524
00:35:58,216 --> 00:36:01,426
in high level, right? So that is

525
00:36:01,448 --> 00:36:05,730
the once part how do you can generate these misconfigurations

526
00:36:07,290 --> 00:36:11,238
for your application, right? Another part

527
00:36:11,404 --> 00:36:14,850
is related for the vulnerability

528
00:36:14,930 --> 00:36:19,242
detection because you have for the misconfiguration detection site but

529
00:36:19,296 --> 00:36:22,842
for the vulnerability this generate one

530
00:36:22,896 --> 00:36:26,810
report and also you can move for your application

531
00:36:26,960 --> 00:36:30,918
and drop here for your security team and bank will be generating

532
00:36:31,014 --> 00:36:34,622
a couple of alerts here. But when you use

533
00:36:34,676 --> 00:36:38,126
a sneak that is very similar we

534
00:36:38,148 --> 00:36:41,534
can create here one folder and move

535
00:36:41,652 --> 00:36:45,474
internally for this folder we download the

536
00:36:45,512 --> 00:36:49,134
sneak for Linux and added the permissions

537
00:36:49,182 --> 00:36:53,390
for executable site and also I just generate

538
00:36:53,470 --> 00:36:57,190
this path and adding this

539
00:36:57,340 --> 00:37:00,902
folder for the current site for execute and

540
00:37:00,956 --> 00:37:05,206
we execute exactly in this part

541
00:37:05,388 --> 00:37:08,934
the latest images that we

542
00:37:08,972 --> 00:37:12,694
generated internally or generate this report internally

543
00:37:12,742 --> 00:37:16,954
for the sneak account right. When we send and

544
00:37:16,992 --> 00:37:22,302
execute this command here as

545
00:37:22,356 --> 00:37:26,394
previous for this ethnic authentication

546
00:37:26,522 --> 00:37:30,714
and generate and communicate your terminal with the ethnic

547
00:37:30,762 --> 00:37:34,340
account. And also if we move very quick here

548
00:37:35,510 --> 00:37:39,506
for the website the

549
00:37:39,528 --> 00:37:43,570
sneak we saw here login

550
00:37:43,990 --> 00:37:47,958
here and also we saw here

551
00:37:48,124 --> 00:37:51,894
our dashboard and we have internally here the two

552
00:37:51,932 --> 00:37:55,106
projects, the Pet clinic app and the pet

553
00:37:55,138 --> 00:37:59,366
clinic mini and we saw here exactly the target

554
00:37:59,478 --> 00:38:02,794
for AoS. When we change for this that

555
00:38:02,832 --> 00:38:07,114
is the same OS here and

556
00:38:07,232 --> 00:38:11,206
if we drop the move

557
00:38:11,328 --> 00:38:14,974
for these results we

558
00:38:15,012 --> 00:38:18,558
have 40 issues from one side here

559
00:38:18,724 --> 00:38:22,160
40 issues too and also we have

560
00:38:22,930 --> 00:38:26,914
Sony medium and not in low at the same because the

561
00:38:26,952 --> 00:38:30,260
image that we scan at this moment is the same,

562
00:38:30,790 --> 00:38:34,274
we just reduce exactly the weight but the

563
00:38:34,312 --> 00:38:38,002
image when we define for the docker

564
00:38:38,066 --> 00:38:41,302
site let me move here we

565
00:38:41,356 --> 00:38:45,142
define for our docker site for this

566
00:38:45,196 --> 00:38:48,742
file and another is the same basic that is

567
00:38:48,796 --> 00:38:52,666
eclipse tamarine. This eclipse tamarind we found that

568
00:38:52,688 --> 00:38:56,394
is based on

569
00:38:56,432 --> 00:39:00,350
unto site right? So we continue here

570
00:39:00,500 --> 00:39:05,514
we can also execute declare definitions

571
00:39:05,642 --> 00:39:08,942
and sincerely I test

572
00:39:08,996 --> 00:39:12,218
this for my site was very unstable because I

573
00:39:12,244 --> 00:39:16,050
need to generate more space on my disk so I can continue

574
00:39:16,120 --> 00:39:20,018
for this POC but when we start for the supply chain

575
00:39:20,024 --> 00:39:23,534
chains and the am enforcement we generate

576
00:39:23,582 --> 00:39:27,654
here a lot of comments around for

577
00:39:27,692 --> 00:39:30,982
that because these tools generate these

578
00:39:31,036 --> 00:39:34,342
reports and when you generate these reports you can

579
00:39:34,396 --> 00:39:37,446
also enable the capabilities for your team

580
00:39:37,548 --> 00:39:41,066
or something like that. So you need start to how do

581
00:39:41,088 --> 00:39:44,966
you can verify the image and the pronounce for this image?

582
00:39:44,998 --> 00:39:49,206
At this case we generate using the Docker file scan containers

583
00:39:49,238 --> 00:39:52,538
and images. We can check

584
00:39:52,704 --> 00:39:55,854
strong pipeline and

585
00:39:55,892 --> 00:39:59,422
also we can access here and include access control code

586
00:39:59,476 --> 00:40:03,678
reviews and vulnerability scanning and we check educate

587
00:40:03,774 --> 00:40:07,022
your development teams. That is the biggest

588
00:40:07,086 --> 00:40:11,042
task here because don't depend exactly the tools start

589
00:40:11,096 --> 00:40:15,478
to depend exactly the teams and it's very difficult

590
00:40:15,564 --> 00:40:19,240
for outside. Another part

591
00:40:19,610 --> 00:40:23,446
for adding this monitoring activity and

592
00:40:23,468 --> 00:40:26,694
another part that I love sincerely is how do you

593
00:40:26,732 --> 00:40:30,490
can monitor in engineering observability for the different

594
00:40:30,640 --> 00:40:34,666
components around for the teams and you

595
00:40:34,688 --> 00:40:38,860
can add it here. This part depends on

596
00:40:39,230 --> 00:40:42,666
how you can deploy the application and how you can use this application.

597
00:40:42,848 --> 00:40:46,602
How do you can explore

598
00:40:46,746 --> 00:40:50,254
your application and generate this observability stack for this

599
00:40:50,292 --> 00:40:53,806
application. And when we move for the aim

600
00:40:53,838 --> 00:40:57,982
enforcement we define here the less privileged principle

601
00:40:58,126 --> 00:41:02,420
and if you saw here the reference more

602
00:41:03,270 --> 00:41:06,690
in the talk I dropped a couple of links

603
00:41:06,770 --> 00:41:10,214
around for Docker side and also the OASP and

604
00:41:10,252 --> 00:41:14,022
they mentioned how you can generate this and using the less

605
00:41:14,076 --> 00:41:17,958
privileged and generate groups internally for your operation system.

606
00:41:18,124 --> 00:41:22,222
What's the kind of user execute application centralized

607
00:41:22,306 --> 00:41:26,054
IAM. So how you can generate

608
00:41:26,102 --> 00:41:30,094
this access for the another components around for the

609
00:41:30,132 --> 00:41:32,430
application continuous authorization,

610
00:41:32,850 --> 00:41:36,734
audit and monitoring then again

611
00:41:36,852 --> 00:41:40,734
monitoring and monitor your application that

612
00:41:40,772 --> 00:41:44,734
it's one part for identify exactly in

613
00:41:44,772 --> 00:41:48,740
a predictably way for when you start

614
00:41:49,350 --> 00:41:53,070
for the epsicob site and automate this IAM

615
00:41:53,150 --> 00:41:57,110
task for validate exactly what kind of access the

616
00:41:57,260 --> 00:42:00,294
application had to another component set up for

617
00:42:00,332 --> 00:42:04,454
this. So we can return here

618
00:42:04,652 --> 00:42:09,114
and also return for

619
00:42:09,152 --> 00:42:13,894
the slides and continue here. So our conclusions continuous

620
00:42:13,942 --> 00:42:17,702
deployment reliable we had this reliable

621
00:42:17,766 --> 00:42:21,530
when we enable these security tools

622
00:42:21,610 --> 00:42:25,502
and also if we drop here these tools and also

623
00:42:25,556 --> 00:42:29,114
add it to the SoT fatalm lifecycle and adding

624
00:42:29,162 --> 00:42:33,298
that for the pipeline are pretty awesome because you

625
00:42:33,384 --> 00:42:37,394
generate and reduce the

626
00:42:37,432 --> 00:42:41,598
scope for these security vulnerabilities

627
00:42:41,694 --> 00:42:46,226
on your teams and also you can stop

628
00:42:46,408 --> 00:42:49,778
this misconfiguration, stop this im

629
00:42:49,864 --> 00:42:53,746
enformentment and stop and reduce this blast

630
00:42:53,858 --> 00:42:57,814
for all. Principal challenge that we have internally for

631
00:42:57,852 --> 00:43:02,886
the software development alcohol and when you deploy the application generate

632
00:43:02,918 --> 00:43:07,034
the commitment for our teams that is again

633
00:43:07,152 --> 00:43:10,494
returned for the teams and how do they access

634
00:43:10,612 --> 00:43:14,158
the security side and access to the security training

635
00:43:14,244 --> 00:43:17,610
internally and start the security culture

636
00:43:17,690 --> 00:43:20,942
in our teams. It's very difficult. I think

637
00:43:20,996 --> 00:43:25,090
this to latest conclusion because

638
00:43:25,240 --> 00:43:28,830
when you involve the teams

639
00:43:28,910 --> 00:43:32,974
are pretty difficult because not all dev teams

640
00:43:33,102 --> 00:43:36,242
are open to start for this journey.

641
00:43:36,306 --> 00:43:39,830
When you start for security site right then you start

642
00:43:39,900 --> 00:43:43,686
first for the tools but you need to

643
00:43:43,708 --> 00:43:47,266
involve exactly the teams for made more easily

644
00:43:47,378 --> 00:43:50,986
your work because at the end of the day is

645
00:43:51,008 --> 00:43:55,226
the company valuable then you need to make more valuable using these

646
00:43:55,328 --> 00:43:58,646
component bonus around that. So a brief

647
00:43:58,678 --> 00:44:02,990
resume for today. We talk about for continuous the satorial lifecycle

648
00:44:03,330 --> 00:44:06,640
what kind of content I rise set application

649
00:44:07,410 --> 00:44:10,910
are not the SOT for DNM lifecycle. The general

650
00:44:10,980 --> 00:44:15,170
challenges here address the challenge using the soda lifecycle

651
00:44:15,590 --> 00:44:19,106
the Kubernetes Computer foundation about the glossary about

652
00:44:19,128 --> 00:44:22,878
the tools and how to these open source tools

653
00:44:22,974 --> 00:44:26,454
are enabled for us and validate what kind of

654
00:44:26,492 --> 00:44:30,114
components we can check for the community and also you can join

655
00:44:30,162 --> 00:44:33,878
for that this a little survey please

656
00:44:33,964 --> 00:44:37,490
if you can help me. I appreciate a lot you

657
00:44:37,580 --> 00:44:42,010
could take 1 minute for

658
00:44:42,160 --> 00:44:45,786
fill that also

659
00:44:45,888 --> 00:44:49,474
for today. Thank you for joining for this session.

660
00:44:49,622 --> 00:44:53,262
I pretty happy to be here so I appreciate this

661
00:44:53,316 --> 00:44:56,958
time with you and also they see in the

662
00:44:57,044 --> 00:45:00,542
comf 22 team. Thanks for

663
00:45:00,676 --> 00:45:04,194
invite me and also for doing this

664
00:45:04,312 --> 00:45:08,146
today better so let me return here

665
00:45:08,328 --> 00:45:11,938
and share with you this reference exactly

666
00:45:12,024 --> 00:45:15,540
that I talked for the OAS that is related for this.

667
00:45:16,150 --> 00:45:23,074
Let me move here the

668
00:45:23,112 --> 00:45:26,882
top ten and you can access this and

669
00:45:26,936 --> 00:45:30,826
this this you can check exactly what kind of component you

670
00:45:30,848 --> 00:45:35,290
can drift for your container best applications

671
00:45:36,270 --> 00:45:39,450
and that's it for today. Thank you

672
00:45:39,520 --> 00:45:42,760
very much for access to this talk. Thank you.

