1
00:00:25,970 --> 00:00:29,286
Hi everybody. I'm Dana Scheider, a senior software engineer at

2
00:00:29,308 --> 00:00:33,154
Envato, and today I'm going to talk to you about software quality management

3
00:00:33,202 --> 00:00:37,042
when you don't have dedicated QA staff and about what software

4
00:00:37,106 --> 00:00:39,750
quality can learn from manufacturing.

5
00:00:40,650 --> 00:00:43,400
I want to start off with a definition of quality.

6
00:00:43,930 --> 00:00:47,446
For the purpose of this talk. Quality is the suitability of a

7
00:00:47,468 --> 00:00:51,354
product for its intended purpose, aided from the perspective

8
00:00:51,402 --> 00:00:54,782
of the consumer. That last part is really important.

9
00:00:54,916 --> 00:00:58,366
It's the customer who ultimately decides the quality of

10
00:00:58,388 --> 00:01:01,934
your product and what quality dimensions matter to them.

11
00:01:02,052 --> 00:01:05,614
So the first step towards establishing

12
00:01:05,662 --> 00:01:09,134
software quality in an environment without QA, or with QA

13
00:01:09,182 --> 00:01:12,402
for that matter, is going to be

14
00:01:12,536 --> 00:01:16,322
identifying those quality dimensions that the consumer

15
00:01:16,466 --> 00:01:20,274
requires of your product. There are a few elements of software

16
00:01:20,322 --> 00:01:24,114
quality or quality dimensions, including functionality,

17
00:01:24,242 --> 00:01:27,746
the features that your product provides, how well they

18
00:01:27,788 --> 00:01:31,350
work, performance or speed, ux,

19
00:01:31,510 --> 00:01:35,578
freedom from bugs or defects, and security a

20
00:01:35,584 --> 00:01:38,970
lot of the time when we talk about quality, we talk about it in a

21
00:01:39,040 --> 00:01:42,554
really narrow way, focused on freedom

22
00:01:42,602 --> 00:01:45,486
from defects or bugs. But in fact,

23
00:01:45,588 --> 00:01:49,760
all of these elements, all of these components kind of play into

24
00:01:50,130 --> 00:01:53,310
the consumer's ultimate satisfaction with your product.

25
00:01:53,380 --> 00:01:57,540
And so all of choose should be considered dimensions of quality.

26
00:01:58,070 --> 00:02:01,822
So in this talk, I'm going to talk to you a little bit about traditional

27
00:02:01,886 --> 00:02:05,854
software QA, but I'm going to focus on total quality management

28
00:02:05,902 --> 00:02:09,430
and I'll go into what TQM is in a moment.

29
00:02:09,580 --> 00:02:12,150
Traditionally, when we're doing QA and software,

30
00:02:12,490 --> 00:02:15,990
we do it toward the end of the process. QA is

31
00:02:16,060 --> 00:02:19,754
a separate process that happens during or after the

32
00:02:19,792 --> 00:02:23,114
development phase. Quality analysts or

33
00:02:23,152 --> 00:02:26,922
qas don't influence product's definition or design,

34
00:02:27,056 --> 00:02:31,038
so they strictly get involved later in the process.

35
00:02:31,204 --> 00:02:34,910
Make sure that nothing has bugs. Make sure that

36
00:02:34,980 --> 00:02:38,426
edge cases have been accounted for. Sometimes they'll

37
00:02:38,458 --> 00:02:41,870
check up on security, things like that. The page still

38
00:02:41,940 --> 00:02:45,426
requires HTTPs if it's a web app, that kind

39
00:02:45,448 --> 00:02:49,202
of thing. But mostly they're focused on keeping things

40
00:02:49,256 --> 00:02:52,770
but free and aren't involved in

41
00:02:52,920 --> 00:02:56,166
defining those quality attributes that may matter to

42
00:02:56,188 --> 00:03:00,690
the customer or designing the product. Quality management

43
00:03:00,770 --> 00:03:04,306
in this model is focused on finding and fixing defects,

44
00:03:04,338 --> 00:03:08,054
and not on overall suitability of the product for its intended

45
00:03:08,102 --> 00:03:12,118
use. And that's where TQM really differs.

46
00:03:12,294 --> 00:03:15,642
Additionally, qas usually have training and experience

47
00:03:15,776 --> 00:03:19,674
that most developers don't. This is really

48
00:03:19,792 --> 00:03:23,406
key difference as well, and it's something that needs to

49
00:03:23,428 --> 00:03:27,466
be accounted for when you're moving to a model without qas,

50
00:03:27,578 --> 00:03:30,622
the knowledge that qas have is essential and needs

51
00:03:30,676 --> 00:03:34,302
to be imparted to your development team, if you

52
00:03:34,356 --> 00:03:37,538
are going to be having them take on more of that work.

53
00:03:37,704 --> 00:03:40,994
More to the point, that training and experience has to be

54
00:03:41,032 --> 00:03:44,706
imparted to everyone in your organization. But I'll get

55
00:03:44,728 --> 00:03:48,770
to that in a minute. So what is total quality management?

56
00:03:48,930 --> 00:03:52,098
Total quality management, or TQM,

57
00:03:52,274 --> 00:03:55,906
is a quality management philosophy widely

58
00:03:55,938 --> 00:03:59,286
adopted in japanese engineering. It was developed

59
00:03:59,318 --> 00:04:03,142
in the 1950s by management consultant William Deming,

60
00:04:03,206 --> 00:04:06,902
and is largely responsible for the primacy of japanese

61
00:04:06,966 --> 00:04:11,194
engineering in the manufacturing world. I developed

62
00:04:11,242 --> 00:04:15,358
a quality process that was implemented at Envato and

63
00:04:15,444 --> 00:04:19,290
realized subsequently that it had a lot in common with TQM,

64
00:04:19,370 --> 00:04:23,134
and felt that TQM had a lot to offer. So in this

65
00:04:23,172 --> 00:04:26,978
talk, I'm going to focus on TQM principles and

66
00:04:27,144 --> 00:04:31,086
how we can bring more of them to our quality management and software.

67
00:04:31,278 --> 00:04:34,594
TQM starts with a customer focus, and that

68
00:04:34,632 --> 00:04:38,406
means asking the right questions at the very beginning of the process.

69
00:04:38,588 --> 00:04:42,006
Are we building the right produces? Are we building it in

70
00:04:42,028 --> 00:04:45,474
the right way? And how well does it serve the customer's

71
00:04:45,522 --> 00:04:48,986
needs or wants? There's a story about the

72
00:04:49,008 --> 00:04:52,442
railroads in the US. The railroads didn't do so

73
00:04:52,496 --> 00:04:55,834
well as new shipping routes came

74
00:04:55,872 --> 00:04:59,466
to be developed, as trucks and planes came to be used

75
00:04:59,568 --> 00:05:02,398
to transport goods and people.

76
00:05:02,564 --> 00:05:06,618
And an analysis of the situation reveals

77
00:05:06,714 --> 00:05:10,350
that the railroads saw their business as running

78
00:05:10,420 --> 00:05:13,770
trains along tracks, and that that was a

79
00:05:13,780 --> 00:05:16,660
service that they were offering to their customers.

80
00:05:17,110 --> 00:05:20,514
But what they didn't take into account was that what

81
00:05:20,552 --> 00:05:24,014
they were actually doing for their customers was transporting

82
00:05:24,062 --> 00:05:27,126
them or their goods from point a to point b,

83
00:05:27,308 --> 00:05:31,154
and that prevented them from developing

84
00:05:31,202 --> 00:05:34,966
the right product, developing it with the kind of flexibility that

85
00:05:34,988 --> 00:05:39,050
they needed to continue to be successful as customer needs

86
00:05:39,120 --> 00:05:43,386
evolved. So that's just one compelling business case for

87
00:05:43,488 --> 00:05:47,194
focusing on quality in this way. Another dimension of

88
00:05:47,232 --> 00:05:51,178
TQM is employee empowerment. In TQM,

89
00:05:51,274 --> 00:05:54,494
everyone is responsible for quality, and everyone is

90
00:05:54,532 --> 00:05:57,934
empowered to make decisions and to

91
00:05:57,972 --> 00:06:00,800
make interventions on behalf of quality.

92
00:06:01,410 --> 00:06:05,506
Employees can speak up when something isn't right without

93
00:06:05,608 --> 00:06:09,330
fear of retaliation or repercussions.

94
00:06:09,670 --> 00:06:13,262
Employees have adequate autonomy to do their jobs.

95
00:06:13,326 --> 00:06:16,902
If they feel that something needs to be done differently in the interest

96
00:06:16,956 --> 00:06:20,422
of quality, they should be able to do that without too much red

97
00:06:20,476 --> 00:06:23,910
tape. Employees are not overworked or burned out.

98
00:06:23,980 --> 00:06:27,602
People who work too much or are

99
00:06:27,756 --> 00:06:31,718
grinding too hard make mistakes. And so it's

100
00:06:31,734 --> 00:06:36,074
really important to, from an organizational perspective, focus on

101
00:06:36,112 --> 00:06:39,722
employee well being and making sure that employees are working

102
00:06:39,776 --> 00:06:42,730
the right amount, which for knowledge workers,

103
00:06:42,810 --> 00:06:46,110
the data indicates, is probably under

104
00:06:46,180 --> 00:06:49,118
40 hours a week. So that's really important,

105
00:06:49,204 --> 00:06:52,714
too. Employees get ongoing training to improve

106
00:06:52,762 --> 00:06:56,786
their skills and to develop new skills that become relevant as

107
00:06:56,888 --> 00:07:00,526
the software world evolves. So those are all components

108
00:07:00,558 --> 00:07:04,382
of the employee empowerment that total quality management requires,

109
00:07:04,446 --> 00:07:08,630
and that good software quality management also would

110
00:07:08,700 --> 00:07:11,846
entail. Fact based decision making is

111
00:07:11,868 --> 00:07:15,414
another component. This is of course much

112
00:07:15,452 --> 00:07:18,838
easier said than done, but it's

113
00:07:18,934 --> 00:07:22,854
important to foster an organisational culture

114
00:07:22,902 --> 00:07:26,106
that's built more around fact based decision making

115
00:07:26,208 --> 00:07:30,662
than around political decision making. Making sure that

116
00:07:30,816 --> 00:07:34,426
whoever has a good idea, that idea is adopted,

117
00:07:34,538 --> 00:07:38,318
even if it's the janitor, that person has

118
00:07:38,404 --> 00:07:42,186
had the best idea and that's going to serve the interests

119
00:07:42,218 --> 00:07:45,442
of the organization. People need to

120
00:07:45,496 --> 00:07:48,814
feel empowered to speak up against people more powerful

121
00:07:48,862 --> 00:07:52,594
than them. So at Envato I know that I can

122
00:07:52,632 --> 00:07:56,226
take my disagreement directly to the CEO, and the worst that's

123
00:07:56,258 --> 00:07:59,842
going to happen is he'll disagree. And that's a critical

124
00:07:59,906 --> 00:08:03,746
component to creating an environment where employees

125
00:08:03,778 --> 00:08:07,570
are able to speak up about issues pertaining to quality

126
00:08:07,660 --> 00:08:10,550
or security, or a number of other factors.

127
00:08:10,630 --> 00:08:14,186
I strongly recommend baking this into your culture as

128
00:08:14,208 --> 00:08:17,802
much as you can. The final key component of

129
00:08:17,856 --> 00:08:21,278
TQM is continuous improvement of products

130
00:08:21,364 --> 00:08:24,906
and processes, which fits in really well with agile,

131
00:08:25,098 --> 00:08:29,146
focusing on an ongoing basis on whether youre

132
00:08:29,178 --> 00:08:33,082
doing things in the right way. What incremental improvements

133
00:08:33,146 --> 00:08:36,242
can you make to your produces so that they'll serve your customers

134
00:08:36,376 --> 00:08:40,290
better? Are there any process changes that

135
00:08:40,360 --> 00:08:44,018
could be made to make this happen? An example is I'm a

136
00:08:44,024 --> 00:08:47,734
big fan of checklists. You need to make sure that

137
00:08:47,852 --> 00:08:51,554
tests and docs are being written on every Jira

138
00:08:51,602 --> 00:08:55,254
issue, while just add a checklist to your Jira card and make

139
00:08:55,292 --> 00:08:59,130
it not done until that's done. Those sorts of things are the kinds of

140
00:08:59,200 --> 00:09:02,954
small incremental process improvements that can make a big difference in

141
00:09:02,992 --> 00:09:06,426
quality. So if you're not sold yet,

142
00:09:06,528 --> 00:09:10,650
I want to go into the kind of advantages

143
00:09:10,730 --> 00:09:13,966
of TQM a little more. The big advantage with

144
00:09:13,988 --> 00:09:17,354
TQM is that quality management starts from the very beginning.

145
00:09:17,402 --> 00:09:21,690
In this approach, you're starting with product specifications,

146
00:09:21,850 --> 00:09:25,534
visual design, UI design. Your approach

147
00:09:25,582 --> 00:09:29,134
to development so agile is going to be more conducive

148
00:09:29,182 --> 00:09:33,218
to quality management than waterfall, for example, since it

149
00:09:33,304 --> 00:09:37,014
will enable you to quickly respond to

150
00:09:37,052 --> 00:09:40,710
changes in customer needs or changes in specifications.

151
00:09:41,210 --> 00:09:44,674
Code quality is a component of quality management,

152
00:09:44,722 --> 00:09:48,282
since again it will affect your ability to quickly add

153
00:09:48,336 --> 00:09:52,250
new features to keep your code up to date and secure.

154
00:09:52,830 --> 00:09:57,130
It's really important to think broadly about quality.

155
00:09:57,280 --> 00:10:01,266
Quality is not about a freedom from bugs. Anything that's

156
00:10:01,318 --> 00:10:05,150
done well in your organization will contribute to quality, and anything

157
00:10:05,220 --> 00:10:08,654
that's done poorly, I guarantee will take away from it.

158
00:10:08,772 --> 00:10:12,734
Quality management in TQM is focused on all elements of

159
00:10:12,772 --> 00:10:16,606
design and development, so you're not just fixing bugs.

160
00:10:16,798 --> 00:10:20,514
It also results in a produces need to release patches or make

161
00:10:20,552 --> 00:10:24,210
additional changes to a released product. Since by starting

162
00:10:24,280 --> 00:10:27,766
earlier in that process and getting more people involved, youll get

163
00:10:27,788 --> 00:10:31,990
it right the first time more often. Quality is always

164
00:10:32,060 --> 00:10:35,782
the responsibility of the entire organization. And in some ways

165
00:10:35,836 --> 00:10:39,542
I think that it's better to not have a dedicated QA department

166
00:10:39,686 --> 00:10:43,546
because that drives this point home. Sometimes when

167
00:10:43,568 --> 00:10:47,658
you have a dedicated QA department, it's easy to say that quality

168
00:10:47,744 --> 00:10:51,410
is those people's responsibility. Keep it in a silo,

169
00:10:51,510 --> 00:10:55,226
throw stuff over the fence to them and everybody else can wash

170
00:10:55,258 --> 00:10:58,862
their hands of it. Quality is always the responsibility of

171
00:10:58,916 --> 00:11:02,646
the entire organization, and everybody in the organization

172
00:11:02,778 --> 00:11:06,846
needs to be formally vested with that responsibility,

173
00:11:07,038 --> 00:11:10,322
needs to have the opportunity to distinguish themselves

174
00:11:10,456 --> 00:11:14,482
by producing quality work, and needs

175
00:11:14,536 --> 00:11:17,926
to be held accountable for the quality of their work and for

176
00:11:17,948 --> 00:11:21,880
what they contribute to the overall final product.

177
00:11:22,330 --> 00:11:25,954
Some companies are going to have an easier time adopting TQM

178
00:11:26,002 --> 00:11:29,538
than others. So what are the characteristics of

179
00:11:29,564 --> 00:11:32,410
organizations that can adopt TQM?

180
00:11:32,750 --> 00:11:36,506
It's going to be cheaper and easier for you to adopt this approach if you

181
00:11:36,528 --> 00:11:40,550
have some of the components built in already. As the upshot,

182
00:11:40,710 --> 00:11:44,606
one of the most important things is having the total buy in

183
00:11:44,628 --> 00:11:48,302
of management. Unfortunately, as with a lot of

184
00:11:48,436 --> 00:11:52,378
things that you can do to make your software development

185
00:11:52,474 --> 00:11:55,300
go smoother and your product quality higher,

186
00:11:55,910 --> 00:11:59,650
there's only so much you can do without total management buy in.

187
00:11:59,720 --> 00:12:03,266
And remember that total management buy in, in the

188
00:12:03,288 --> 00:12:06,854
case of TQM, means management accepting that they

189
00:12:06,892 --> 00:12:11,074
and everyone under them is collectively and individually

190
00:12:11,122 --> 00:12:14,934
responsible for quality. So it's really important

191
00:12:15,052 --> 00:12:19,078
to make sure that there's that buy in and that understanding.

192
00:12:19,254 --> 00:12:22,378
It's going to be easier to adopt TQM if

193
00:12:22,384 --> 00:12:25,962
you recognize that quality management will always require time

194
00:12:26,016 --> 00:12:29,610
and resources. TQM will

195
00:12:29,680 --> 00:12:33,594
often result in cost reduction over having traditional QA.

196
00:12:33,642 --> 00:12:36,974
But that comes from making higher quality work the

197
00:12:37,012 --> 00:12:40,638
first time and not having to go back and fix things that

198
00:12:40,644 --> 00:12:44,002
you've messed up. It's not about not

199
00:12:44,056 --> 00:12:47,650
investing in quality in the first place. Youll will always

200
00:12:47,720 --> 00:12:51,294
have to invest in quality. And the sooner

201
00:12:51,342 --> 00:12:55,570
you accept that, the sooner you can start implementing good quality practices.

202
00:12:56,310 --> 00:13:00,070
Yeah, if you already have some of the elements of TQM in place,

203
00:13:00,140 --> 00:13:03,254
like for example, one of Envato's core values is

204
00:13:03,292 --> 00:13:06,854
that we tell it like it is, and whether it's with each other

205
00:13:06,892 --> 00:13:10,650
or with customers, we always speak up when something

206
00:13:10,720 --> 00:13:14,486
isn't right and are always honest and straightforward

207
00:13:14,598 --> 00:13:18,234
about problems. And that made it a lot

208
00:13:18,272 --> 00:13:21,898
easier to adopt some of these components of TQM

209
00:13:21,994 --> 00:13:25,482
because it relies on people individually

210
00:13:25,546 --> 00:13:29,486
having that ability to speak up about issues. You'll have

211
00:13:29,508 --> 00:13:32,894
an easier time if your organization has a culture of effective and

212
00:13:32,932 --> 00:13:36,126
multidirectional cross functional communication.

213
00:13:36,318 --> 00:13:40,386
That means that at each stage of the process, there's a collaboration happening.

214
00:13:40,568 --> 00:13:44,242
It's not management dictates to design what

215
00:13:44,296 --> 00:13:48,834
product needs to happen, what product needs to be developed, design dictates

216
00:13:48,882 --> 00:13:52,882
to development what that product needs to look like. Development dictates

217
00:13:52,946 --> 00:13:56,834
to everyone past them what the overall

218
00:13:56,882 --> 00:14:00,534
design of the software is going to be, and so on and so forth.

219
00:14:00,582 --> 00:14:04,570
Because that results in a total lack of empowerment for everyone

220
00:14:04,640 --> 00:14:09,462
later in the process. As it happens, sometimes designers

221
00:14:09,526 --> 00:14:13,962
have good input on what product needs to be developed. Sometimes developers

222
00:14:14,026 --> 00:14:17,422
have good input on design. Well, you never know.

223
00:14:17,556 --> 00:14:20,814
It could be any group of people. Youll just need

224
00:14:20,852 --> 00:14:24,566
to have a culture where that communication

225
00:14:24,618 --> 00:14:28,018
goes both ways and no one is dictating to anybody

226
00:14:28,104 --> 00:14:31,506
else. You're going to also have an easier time adopting a

227
00:14:31,528 --> 00:14:35,570
TQM approach if your code bases already have good automated

228
00:14:35,650 --> 00:14:38,886
test covers, if you currently have a

229
00:14:38,908 --> 00:14:42,358
QA department, all of that stuff is going to have to

230
00:14:42,364 --> 00:14:46,354
be moved into your code bases and that's

231
00:14:46,402 --> 00:14:49,734
going to be a certain amount of work. So if you

232
00:14:49,772 --> 00:14:53,734
already have good automated test bases in your code base, or test coverage

233
00:14:53,782 --> 00:14:56,886
in your code bases, that's going to be a lot easier.

234
00:14:57,078 --> 00:15:01,302
You're going to have an easier time if management already produces

235
00:15:01,366 --> 00:15:04,926
resources and creates conditions where employees at each point in

236
00:15:04,948 --> 00:15:08,174
the process can do their job well. If people are

237
00:15:08,212 --> 00:15:11,326
having to fight to get the tools or resources that

238
00:15:11,348 --> 00:15:15,714
they need to do their jobs, that's going to have an impact on quality.

239
00:15:15,912 --> 00:15:19,554
And finally, it's important that employees not be

240
00:15:19,592 --> 00:15:23,262
rushed, burned out or under excessive pressure to produces

241
00:15:23,326 --> 00:15:27,010
quickly. That just ends up consistently

242
00:15:27,090 --> 00:15:31,266
being at odds with the fact that quality management requires resources

243
00:15:31,298 --> 00:15:34,854
and employee time. People who are rushed, burned out,

244
00:15:34,972 --> 00:15:38,762
or under excessive pressure tend to cut

245
00:15:38,816 --> 00:15:42,278
covers and quality is usually the corner

246
00:15:42,374 --> 00:15:45,818
that gets cut along with security. So what are some success

247
00:15:45,904 --> 00:15:49,062
factors then, in terms of your organizational

248
00:15:49,126 --> 00:15:53,242
culture? Openness and safety are critical components

249
00:15:53,306 --> 00:15:56,810
to a culture of quality. Even junior engineers

250
00:15:56,890 --> 00:16:00,510
should feel comfortable asking questions and critiquing their own

251
00:16:00,580 --> 00:16:04,034
and others work. Someone once pointed out to me that

252
00:16:04,152 --> 00:16:08,126
engineers at different levels of their careers have different strengths.

253
00:16:08,238 --> 00:16:11,422
Senior engineers are great at project management

254
00:16:11,486 --> 00:16:15,154
and high level problems. Mid level engineers are great

255
00:16:15,192 --> 00:16:18,834
at coding, and junior engineers are great at theory

256
00:16:18,962 --> 00:16:22,086
that's really stuck with me and has borne out in my experience.

257
00:16:22,268 --> 00:16:26,678
And what that means is that everyone in the organization has

258
00:16:26,764 --> 00:16:30,634
something unique that they're able to contribute. So making sure

259
00:16:30,672 --> 00:16:34,618
that people are able to both feel comfortable asking questions

260
00:16:34,704 --> 00:16:38,042
and critiquing each other's work, as well as have

261
00:16:38,096 --> 00:16:41,370
their critiques listened to, is critical.

262
00:16:41,530 --> 00:16:44,922
Additionally, employees need to feel safe admitting

263
00:16:44,986 --> 00:16:48,190
and discussing their own weaknesses and mistakes.

264
00:16:48,690 --> 00:16:53,046
Collaboration is key to quality management under TQM

265
00:16:53,178 --> 00:16:56,766
and stands in opposition to competition.

266
00:16:56,958 --> 00:17:00,654
Competitive environments don't do as well with this approach,

267
00:17:00,782 --> 00:17:04,702
and the reason is because when you're focused on advancing

268
00:17:04,766 --> 00:17:08,758
yourself and on distinguishing your work

269
00:17:08,844 --> 00:17:12,066
above that of the others around you, you're not focused

270
00:17:12,098 --> 00:17:16,038
on holistically doing a good job as a team to bring a quality

271
00:17:16,124 --> 00:17:20,538
product to the market. Accountability is critical to

272
00:17:20,704 --> 00:17:24,138
developing quality products and delivering them to happy

273
00:17:24,224 --> 00:17:27,610
customers, but pressure is not the way

274
00:17:27,680 --> 00:17:31,774
to affect that. It's important to

275
00:17:31,972 --> 00:17:35,486
look at people's work holistically, look at the way they contribute to

276
00:17:35,508 --> 00:17:38,814
the team and understand that as often as not,

277
00:17:38,932 --> 00:17:42,538
when someone is failing to meet their goals

278
00:17:42,634 --> 00:17:46,434
or perform as well as they could, it's often because they

279
00:17:46,472 --> 00:17:50,274
don't have the right environment or resources to do their job,

280
00:17:50,392 --> 00:17:53,922
or because something else such as illness is getting in the way.

281
00:17:54,056 --> 00:17:57,922
And true culture of accountability understands

282
00:17:57,986 --> 00:18:01,986
that and is focused on enabling and empowering

283
00:18:02,018 --> 00:18:05,686
people to do their jobs well, not on pressuring them to

284
00:18:05,708 --> 00:18:09,958
do so. Appropriate management involvement is critical.

285
00:18:10,134 --> 00:18:14,806
Management needs to be available to provide necessary resources

286
00:18:14,918 --> 00:18:18,794
to enhance product quality, create conditions where

287
00:18:18,832 --> 00:18:22,394
everyone cant succeed, give employees the autonomy

288
00:18:22,442 --> 00:18:25,678
to do their jobs and to make decisions about quality,

289
00:18:25,844 --> 00:18:29,818
and focus on a collaborative environment

290
00:18:29,914 --> 00:18:33,666
that's oriented towards results. I want to go into

291
00:18:33,768 --> 00:18:37,858
a few recommended practices for Dev teams as far as

292
00:18:38,024 --> 00:18:41,326
how development work plays out in an organization

293
00:18:41,438 --> 00:18:44,926
that has implemented a TQM like approach to

294
00:18:44,968 --> 00:18:49,234
software quality. Number one is that you need to communicate regularly

295
00:18:49,282 --> 00:18:52,390
with product and design. Like I said

296
00:18:52,460 --> 00:18:55,510
before, bi directional communication.

297
00:18:56,170 --> 00:18:59,466
Know, maybe design gives you something that at a

298
00:18:59,488 --> 00:19:03,674
certain viewport width is going to look really strange on

299
00:19:03,712 --> 00:19:07,654
your UI. Developers should be able to give that feedback

300
00:19:07,702 --> 00:19:11,614
and designers should take it in stride. So everyone should

301
00:19:11,652 --> 00:19:14,240
be willing to take feedback from everyone else.

302
00:19:14,610 --> 00:19:18,634
People need to feel safe, constructively criticizing

303
00:19:18,682 --> 00:19:22,282
their own and others work. So if a developer

304
00:19:22,426 --> 00:19:25,694
looks at a design and thinks hell

305
00:19:25,732 --> 00:19:29,762
no, if I was a user this would not work for me. They need to

306
00:19:29,896 --> 00:19:33,554
hopefully, tactfully give that feedback to the designer and say,

307
00:19:33,592 --> 00:19:37,122
I think it would be better UX if users had the ability

308
00:19:37,186 --> 00:19:41,474
to do this, that and the other thing again, like with QA

309
00:19:41,522 --> 00:19:44,870
itself, there should be ongoing communication between product

310
00:19:44,940 --> 00:19:48,842
and design with no siloing, no throwing things

311
00:19:48,896 --> 00:19:53,082
over the fence. There's not a point where design is done and

312
00:19:53,136 --> 00:19:57,180
development begins. Quality is the responsibility of everyone.

313
00:19:57,710 --> 00:20:01,274
Using agile rituals and practices greatly

314
00:20:01,322 --> 00:20:05,642
enhances quality and your ability to respond

315
00:20:05,706 --> 00:20:09,502
quickly to changes in customer needs. Kickoffs are

316
00:20:09,556 --> 00:20:12,786
great. They enable you as a team to decide on

317
00:20:12,808 --> 00:20:16,642
an appropriate approach to each piece of development work

318
00:20:16,776 --> 00:20:20,750
and involve people from other functions or teams as appropriate.

319
00:20:20,830 --> 00:20:24,466
Pairing and mobbing using structured techniques and

320
00:20:24,568 --> 00:20:28,034
if you're pairing remotely, using appropriate tools for remote

321
00:20:28,082 --> 00:20:32,002
pairing that enable remote control of a single development

322
00:20:32,066 --> 00:20:35,302
machine are also really valuable things to

323
00:20:35,356 --> 00:20:38,646
improve quality. Generally, having a couple of pairs

324
00:20:38,678 --> 00:20:41,914
of eyes on something is always going

325
00:20:41,952 --> 00:20:45,034
to be helpful to producing a better product,

326
00:20:45,152 --> 00:20:49,110
providing you do have a culture of collaboration

327
00:20:49,190 --> 00:20:52,922
over competition. Retrospectives where you candidly

328
00:20:52,986 --> 00:20:56,618
discuss what did or didn't go well in a particular sprint

329
00:20:56,714 --> 00:21:00,254
are really important and where you're focused on

330
00:21:00,292 --> 00:21:04,030
improvement rather than pointing fingers. Culture of blame

331
00:21:04,110 --> 00:21:07,874
is not useful for improving quality

332
00:21:07,992 --> 00:21:10,994
and that feeds into the next bullet point as well,

333
00:21:11,032 --> 00:21:14,910
which is blameless post mortems where if something

334
00:21:15,000 --> 00:21:18,822
goes wrong, you want to think about improvements to

335
00:21:18,876 --> 00:21:22,310
process and communication, what actually was

336
00:21:22,380 --> 00:21:26,358
done wrong, not who did it. Robust code review

337
00:21:26,444 --> 00:21:30,410
is really important, and I can't overstate this. Code review

338
00:21:30,480 --> 00:21:34,486
is the stage where you look for bugs. Code review should be conducted

339
00:21:34,518 --> 00:21:38,150
by at least one qualified reviewer who did not contribute

340
00:21:38,230 --> 00:21:41,998
code to the pull request. Qualified means

341
00:21:42,084 --> 00:21:45,534
this person is familiar with the stack. This person

342
00:21:45,572 --> 00:21:48,320
is familiar with the problem space.

343
00:21:49,810 --> 00:21:53,334
If you have back end code that you're

344
00:21:53,402 --> 00:21:57,330
having reviewed, you want people who know back end code

345
00:21:57,400 --> 00:22:00,914
reviewing it more than your front end people. Again,

346
00:22:01,032 --> 00:22:04,990
it's important for everyone to have potential input into the process,

347
00:22:05,080 --> 00:22:08,998
and everyone's input is potentially valuable. So I'm not saying

348
00:22:09,084 --> 00:22:12,662
to exclude reviewers that have less experience

349
00:22:12,796 --> 00:22:16,054
in a particular area, but make sure

350
00:22:16,092 --> 00:22:19,622
that code is reviewed by at least one person who does have extensive

351
00:22:19,686 --> 00:22:23,510
experience in that area. Code reviewers should do manual

352
00:22:23,590 --> 00:22:27,622
testing. They should run the code on their local machine

353
00:22:27,686 --> 00:22:31,294
or in staging and try to think of edge cases that will

354
00:22:31,332 --> 00:22:35,054
break it. During that review, they should be asking themselves

355
00:22:35,172 --> 00:22:39,278
how and what has been tested with this, and whether

356
00:22:39,364 --> 00:22:43,214
those test cases are adequate. Are there additional edge cases that

357
00:22:43,252 --> 00:22:46,786
haven't been considered? It's important to keep in mind in this

358
00:22:46,808 --> 00:22:50,642
process that the happy path is often not the most common one.

359
00:22:50,776 --> 00:22:54,226
In one of my previous roles, I asked our head of product how

360
00:22:54,248 --> 00:22:58,214
many customers went through the happy path, and he told

361
00:22:58,252 --> 00:23:01,862
me 5%. So sometimes the happy path is

362
00:23:01,916 --> 00:23:05,254
actually quite rare, and it's important to make sure

363
00:23:05,292 --> 00:23:09,098
that your test cases are equally robust towards

364
00:23:09,264 --> 00:23:12,602
the kinds of situations your customers are

365
00:23:12,656 --> 00:23:14,950
actually encountering more frequently.

366
00:23:15,110 --> 00:23:19,434
Security should also be a part of this code review code

367
00:23:19,472 --> 00:23:22,874
reviewers should be informed about security and

368
00:23:22,992 --> 00:23:26,286
a kind of rule of thumb here to take away is that

369
00:23:26,308 --> 00:23:30,042
a reviewer who doesnt suggest changes is usually not thorough

370
00:23:30,106 --> 00:23:33,694
enough. And I'm not talking but a one line change that updates

371
00:23:33,742 --> 00:23:36,962
a third party library or something. But if it's a larger pull

372
00:23:37,016 --> 00:23:40,766
request that implements a feature or fixes

373
00:23:40,798 --> 00:23:44,514
a more complex but then reviewers should

374
00:23:44,552 --> 00:23:47,606
be suggesting changes and it's important

375
00:23:47,708 --> 00:23:51,794
to kind of as a reviewer, take it as a red flag

376
00:23:51,842 --> 00:23:54,630
if you find yourself having no suggestions.

377
00:23:55,450 --> 00:23:59,694
Tracking all your work will also help with software

378
00:23:59,762 --> 00:24:03,126
quality. You want to create issues or Trello cards

379
00:24:03,158 --> 00:24:06,858
or however it is that you track your work, you want to create one for

380
00:24:06,944 --> 00:24:10,314
even small changes. Even small changes

381
00:24:10,432 --> 00:24:13,734
should have adequate opportunity for review and testing.

382
00:24:13,782 --> 00:24:17,342
And that's a big part of the reason why you should create issues for them

383
00:24:17,396 --> 00:24:21,246
is that it's not just a oh, I'm just going to dash off this

384
00:24:21,268 --> 00:24:24,546
pull request, okay, I'm going to pick up this issue and I'm going to do

385
00:24:24,568 --> 00:24:27,954
a good job on it. Establish standards for pull

386
00:24:27,992 --> 00:24:31,742
request descriptions and comments and I'm talking about technical

387
00:24:31,806 --> 00:24:35,166
writing here. Information that should be included in

388
00:24:35,208 --> 00:24:38,950
every pull request description, such as context and

389
00:24:39,020 --> 00:24:42,818
links to relevant information or to the Jira

390
00:24:42,834 --> 00:24:45,974
ticket or Trello card or issue report that this

391
00:24:46,012 --> 00:24:49,740
is related to a summary of changes made.

392
00:24:50,110 --> 00:24:54,326
A section on the considerations and reasoning what alternatives

393
00:24:54,358 --> 00:24:58,490
did you consider? What alternatives did you maybe try and

394
00:24:58,640 --> 00:25:02,218
not have them work out? Why didn't they work out?

395
00:25:02,384 --> 00:25:06,094
What don't you like about the approach that you took and why did you take

396
00:25:06,132 --> 00:25:10,154
it anyway? Those kinds of things need to go into a PR description.

397
00:25:10,282 --> 00:25:13,762
And finally, there should be detailed information in each

398
00:25:13,816 --> 00:25:17,310
PR description about testing and documentation,

399
00:25:17,470 --> 00:25:21,362
how the code has been tested, what test cases have been

400
00:25:21,416 --> 00:25:25,346
tested, and what documentation has been written

401
00:25:25,378 --> 00:25:27,960
or updated as a result of these changes.

402
00:25:28,890 --> 00:25:32,722
Testing post release is another really important practice.

403
00:25:32,866 --> 00:25:36,258
So using the same manual testing procedures

404
00:25:36,354 --> 00:25:39,890
as during code review you cant to test in production.

405
00:25:40,050 --> 00:25:43,834
Ideally you want to test in a pre production environment like staging as

406
00:25:43,872 --> 00:25:47,338
well. And when you test your final product,

407
00:25:47,424 --> 00:25:50,998
you want to test it in as many environments as possible where it might be

408
00:25:51,024 --> 00:25:54,494
run. So if this is an app that might be run

409
00:25:54,532 --> 00:25:57,482
on different operating systems or hardware,

410
00:25:57,626 --> 00:26:00,926
older and newer machines, web apps that could be

411
00:26:00,948 --> 00:26:05,150
run in different browsers, apps that could be run on different devices

412
00:26:05,230 --> 00:26:08,994
or screen sizes. You want to make sure to incorporate all of

413
00:26:09,032 --> 00:26:12,306
those into your post releasing testing and as much as

414
00:26:12,328 --> 00:26:15,698
possible into your pre releasing testing. I recommend

415
00:26:15,784 --> 00:26:19,334
using detailed pull request templates to make sure that pull

416
00:26:19,372 --> 00:26:22,774
requests include the amount of information that

417
00:26:22,812 --> 00:26:26,626
they need and the type of information that they need in an organized fashion.

418
00:26:26,738 --> 00:26:30,410
I've encountered some disagreement with this from certain people,

419
00:26:30,480 --> 00:26:34,054
but I stand by it. I think that having a pull request

420
00:26:34,102 --> 00:26:38,346
template ensures that people include the appropriate information

421
00:26:38,448 --> 00:26:41,614
with each pull request that the others around them need to

422
00:26:41,652 --> 00:26:45,818
understand the changes they made and review their code effectively.

423
00:26:45,994 --> 00:26:49,082
PR templates need to include context,

424
00:26:49,226 --> 00:26:52,426
technical changes, considerations that were

425
00:26:52,468 --> 00:26:55,330
made in the process of development,

426
00:26:55,830 --> 00:26:59,710
detailed information about testing what kinds of teams,

427
00:26:59,790 --> 00:27:03,602
what kinds of automated teams have been used to test

428
00:27:03,656 --> 00:27:07,330
this code. How can a reviewer produces a but

429
00:27:07,490 --> 00:27:11,094
how can a reviewer manually test the changes? And as

430
00:27:11,132 --> 00:27:15,094
far as writing this stuff out, I recommend actually

431
00:27:15,292 --> 00:27:19,338
fleshed out test cases with steps 12345.

432
00:27:19,424 --> 00:27:23,226
These are the steps you should go through to manually test these changes.

433
00:27:23,408 --> 00:27:26,810
Click this button, fill out this form with this

434
00:27:26,880 --> 00:27:30,758
data, that level of detail what

435
00:27:30,784 --> 00:27:34,094
youll go wrong sometimes, no matter how

436
00:27:34,132 --> 00:27:37,806
hard you try to make everything good, there's still a

437
00:27:37,828 --> 00:27:41,258
certain risk that once you get stuff out in production,

438
00:27:41,354 --> 00:27:44,690
something goes wrong. We can't always change

439
00:27:44,760 --> 00:27:48,526
the fact that certain configuration is different in deployed

440
00:27:48,558 --> 00:27:52,386
environments from development environments, or that it's different in

441
00:27:52,408 --> 00:27:56,262
production from staging. So again, this is kind of

442
00:27:56,316 --> 00:27:59,574
part of people being empowered to speak up when things can

443
00:27:59,612 --> 00:28:03,426
go wrong and to admit their weaknesses and mistakes.

444
00:28:03,538 --> 00:28:07,222
People should be comfortable talking about what

445
00:28:07,276 --> 00:28:10,454
could still go wrong despite all their best efforts.

446
00:28:10,582 --> 00:28:14,362
What are the security risks? I recommend calling

447
00:28:14,416 --> 00:28:18,074
this one, but specifically, you also can

448
00:28:18,112 --> 00:28:21,538
often benefit from screenshots or videos or gifs

449
00:28:21,574 --> 00:28:24,240
that illustrate the changes that you've made.

450
00:28:24,850 --> 00:28:27,994
Our PR templates always also include a note

451
00:28:28,042 --> 00:28:31,246
that a PR is the start of a conversation, not the

452
00:28:31,268 --> 00:28:34,740
end of one, and that's a really important thing to remember.

453
00:28:35,270 --> 00:28:39,186
So these are just a few of the ways that you

454
00:28:39,208 --> 00:28:43,106
can enhance quality in your organization in the absence of

455
00:28:43,128 --> 00:28:47,538
a dedicated QA department. Total quality management,

456
00:28:47,634 --> 00:28:51,446
which was developed for manufacturing environments, turns out to

457
00:28:51,468 --> 00:28:55,094
have significant advantages in software organizations as

458
00:28:55,132 --> 00:28:59,190
well, in that it approaches quality from an organizational standpoint

459
00:28:59,270 --> 00:29:02,362
and makes quality the responsibility of every

460
00:29:02,416 --> 00:29:06,838
person in the organization, both collectively and individually.

461
00:29:07,014 --> 00:29:10,522
TQM can produces defects, improve efficiency,

462
00:29:10,586 --> 00:29:14,682
and make the end product more suitable for its intended purpose.

463
00:29:14,826 --> 00:29:18,762
TQM can also reduce your QA and defect

464
00:29:18,826 --> 00:29:21,966
related costs, provided that you understand

465
00:29:22,148 --> 00:29:26,154
that you still need to invest a certain amount of resources

466
00:29:26,202 --> 00:29:29,418
and employee time in quality management.

467
00:29:29,594 --> 00:29:33,242
Adopting TQM requires allocation of resources

468
00:29:33,306 --> 00:29:37,474
and full management support. It. And the last takeaway

469
00:29:37,522 --> 00:29:40,790
that I'd like you to get from this is that dev teams can make simple

470
00:29:40,860 --> 00:29:44,614
changes to their process to improve quality and make

471
00:29:44,652 --> 00:29:47,940
it an integral part of their work. Thank you.

