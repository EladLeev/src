1
00:00:25,730 --> 00:00:29,334
Hi, I am Jay Jayaganesh Kalyanasundaram, a software engineer in Google.

2
00:00:29,452 --> 00:00:33,494
This lightning talk in the beginner's track will cover my

3
00:00:33,532 --> 00:00:37,366
journey of venturing into and understanding concurrency in

4
00:00:37,388 --> 00:00:41,010
Golang. When I first came across the syntaxes in Golan,

5
00:00:41,090 --> 00:00:45,586
I thought it's almost same as C and has slight differences,

6
00:00:45,698 --> 00:00:49,346
like the keyword where for variable and funk

7
00:00:49,378 --> 00:00:52,814
for functions. I'm an avid user of oops and

8
00:00:52,852 --> 00:00:56,670
found that structs with interfaces can help mimic

9
00:00:57,170 --> 00:01:00,762
the thought of classes. Golang also supports

10
00:01:00,826 --> 00:01:04,306
weight groups, which can be really useful for

11
00:01:04,408 --> 00:01:08,126
lock retentions. Finally, for me, at the first glance,

12
00:01:08,238 --> 00:01:12,274
Golang was the performance of c in

13
00:01:12,472 --> 00:01:16,146
cpython. Like intuitive language, merge sort is

14
00:01:16,168 --> 00:01:19,890
one of the good known algorithms to sort an array

15
00:01:19,970 --> 00:01:23,414
with complexity o of n login. It works by

16
00:01:23,452 --> 00:01:27,154
breaking the array into two halves and recursively sorting the halves

17
00:01:27,202 --> 00:01:30,346
and finally merging them. For me, this is one of the

18
00:01:30,368 --> 00:01:33,866
good problems to code in a new language to understand the

19
00:01:33,888 --> 00:01:37,494
semantics of functions, variable declaration initializations,

20
00:01:37,622 --> 00:01:41,126
array slice manipulations. So I went

21
00:01:41,168 --> 00:01:45,406
ahead and coded the same in Golan. The sort function here

22
00:01:45,508 --> 00:01:48,826
simply breaks the array into two halves and sorts

23
00:01:48,858 --> 00:01:52,206
them recursively and merges them, and finally returns the

24
00:01:52,228 --> 00:01:55,950
result. The merge function, on the other hand, uses a two pointer

25
00:01:56,030 --> 00:02:00,414
to iterate through the two arrays to be merged, and updates

26
00:02:00,462 --> 00:02:04,318
the final array with the smaller of those two elements pointed

27
00:02:04,414 --> 00:02:08,386
by those two pointers. You can read more about it separately in the Wikipedia

28
00:02:08,418 --> 00:02:12,514
link, which I shared in the previous slide. So after coding

29
00:02:12,562 --> 00:02:16,454
the basic merge sort, I dwelled deeper into Golang to understand

30
00:02:16,572 --> 00:02:20,330
the other salient features, and discovered the

31
00:02:20,400 --> 00:02:24,502
go keyword, which is basically a magic to do multithreading

32
00:02:24,566 --> 00:02:28,106
in a very easy manner. I wrote a lot of code in C plus plus

33
00:02:28,208 --> 00:02:31,758
with multithreading by using the

34
00:02:31,844 --> 00:02:35,434
library threads. Though it wasn't rocket science, it wasn't

35
00:02:35,482 --> 00:02:39,166
as intuitive and easy as just using the go followed by

36
00:02:39,188 --> 00:02:43,002
the function name. This go keyword launches a

37
00:02:43,156 --> 00:02:47,006
go routine, which is the fundamental unit of running a multi

38
00:02:47,038 --> 00:02:51,010
threaded program in Golang. I also came across

39
00:02:51,160 --> 00:02:54,722
the channels which I've never heard before in any

40
00:02:54,776 --> 00:02:58,230
other language. My first thought towards

41
00:02:58,380 --> 00:03:01,906
the handling of threads was that this is a server

42
00:03:01,938 --> 00:03:05,526
optimization problem, and it's not of much use to me,

43
00:03:05,708 --> 00:03:09,354
although because the go keyword was

44
00:03:09,392 --> 00:03:12,826
so tempting, I decided to give that a try.

45
00:03:13,008 --> 00:03:16,326
With that, I basically wrote the same merge sort with slight

46
00:03:16,358 --> 00:03:19,750
channels by using the go routines.

47
00:03:19,830 --> 00:03:23,518
So here, as you can see, s one and s two are those

48
00:03:23,684 --> 00:03:27,610
half two halves which are basically sorted

49
00:03:27,690 --> 00:03:31,326
in those two concurrent threads defer in

50
00:03:31,348 --> 00:03:35,082
a scope is basically the last command which will be executed in that scope.

51
00:03:35,146 --> 00:03:38,802
So in this case, the wake group release is basically the last

52
00:03:38,856 --> 00:03:42,354
command which will be done in the scope of the funk. For each

53
00:03:42,392 --> 00:03:45,458
of those goroutines, we use weight group

54
00:03:45,544 --> 00:03:49,474
so that we ensure to get both the slices fully sorted

55
00:03:49,522 --> 00:03:52,994
before we start merging. As you can see, the waiting

56
00:03:53,042 --> 00:03:56,646
for the two goroutines to complete is

57
00:03:56,668 --> 00:04:00,422
the part which is slowing the execution down. So I was thinking,

58
00:04:00,476 --> 00:04:04,282
how can I speed up this execution? So I was thinking we could

59
00:04:04,336 --> 00:04:07,482
stream the data so that we don't need to wait for these total

60
00:04:07,536 --> 00:04:11,226
of two halves to be fully sorted and can proceed with the merging as

61
00:04:11,248 --> 00:04:14,846
and when we get the parts of the sorted data. So I

62
00:04:14,868 --> 00:04:18,206
thought of going back to what I came across, and that

63
00:04:18,228 --> 00:04:22,282
was channels. So I started reading a bit more about channels,

64
00:04:22,346 --> 00:04:25,774
and my first glance at them was, these are more like water pipes.

65
00:04:25,902 --> 00:04:28,946
So it basically transfers data from one end to the

66
00:04:28,968 --> 00:04:32,734
other. Okay, so what are the salient features

67
00:04:32,782 --> 00:04:36,306
of a channel? First, it has a start and it has

68
00:04:36,328 --> 00:04:40,178
an end. So it has a sender and it has a receiver.

69
00:04:40,354 --> 00:04:43,766
Second, it has a buffer to hold and this could be

70
00:04:43,788 --> 00:04:46,850
zero. This buffer is basically like the length of the pipe.

71
00:04:46,930 --> 00:04:50,506
So if the length is zero, imagine it's like a trying. So you just have

72
00:04:50,528 --> 00:04:54,074
a ring and you have the source and the sink pretty much

73
00:04:54,192 --> 00:04:57,500
with no gap between them. And if the

74
00:04:58,110 --> 00:05:01,642
receiver is not receiving more like there is a gap towards

75
00:05:01,696 --> 00:05:05,182
the end of the pipe, the sender will be blocked. The sender can't send

76
00:05:05,236 --> 00:05:08,766
more water through the pipe. Similarly, if the sender is

77
00:05:08,788 --> 00:05:13,210
not sending, the receiver will not know about it and will keep waiting

78
00:05:13,290 --> 00:05:17,274
indefinitely. The sender, however, can close the pipe

79
00:05:17,322 --> 00:05:20,578
once they have sent all the water or all the data, in this case for

80
00:05:20,584 --> 00:05:23,986
the channel, and basically say the channel that they have sent all the

81
00:05:24,008 --> 00:05:27,810
data, and the pipe or the channel, once has

82
00:05:27,880 --> 00:05:31,586
transmitted all this data to the receiver, will intimate

83
00:05:31,618 --> 00:05:35,094
the receiver that it has actually transmitted all the data, and it is going

84
00:05:35,132 --> 00:05:38,614
to close the pipe now once for all. So, with this

85
00:05:38,732 --> 00:05:42,762
analogy of water pipe, let's get back to writing the same code

86
00:05:42,816 --> 00:05:46,326
with channels. We now use channels instead of a slice,

87
00:05:46,438 --> 00:05:49,578
so that we get the stream of the data as and when they are ready,

88
00:05:49,664 --> 00:05:53,758
instead of waiting for the two fully sorted slices. So here you

89
00:05:53,764 --> 00:05:57,662
sre basically sorting those two halves again concurrently and

90
00:05:57,716 --> 00:06:01,022
merging them concurrently. That is, as and when you get the data

91
00:06:01,076 --> 00:06:04,542
from the individual channels. As a recap

92
00:06:04,606 --> 00:06:08,082
from what we did so far, we started off with

93
00:06:08,136 --> 00:06:12,574
sorting the two halves of the slice sequentially

94
00:06:12,702 --> 00:06:16,582
and then doing the merge. Then we used the go

95
00:06:16,636 --> 00:06:20,182
keyword and improved it by sorting those

96
00:06:20,236 --> 00:06:23,702
two halves concurrency and then merging them at once,

97
00:06:23,836 --> 00:06:27,930
and then finally we sorted and merged them

98
00:06:28,000 --> 00:06:30,970
again concurrently with no blocking at all.

99
00:06:31,120 --> 00:06:34,874
So we are benefited by directly transferring the data with

100
00:06:34,912 --> 00:06:38,598
channels to improve the concurrency.

101
00:06:38,774 --> 00:06:42,118
Also here I would highly recommend reading this article

102
00:06:42,214 --> 00:06:46,334
in the Go block, which basically explains why

103
00:06:46,372 --> 00:06:50,330
it's better to share memory by again communicating

104
00:06:50,490 --> 00:06:53,982
rather than communicating by sharing memory. The latter

105
00:06:54,046 --> 00:06:57,842
needs log contentions to ensure safe access by

106
00:06:57,896 --> 00:07:01,390
different processes. Now a quick anecdote

107
00:07:01,470 --> 00:07:05,042
of how I used it practically so we were in a system in our team.

108
00:07:05,096 --> 00:07:08,614
We use a system in our team where we had a front

109
00:07:08,652 --> 00:07:12,038
end which was surfacing a command line interface for the

110
00:07:12,044 --> 00:07:16,118
user. It had multiple backends which it was communicating with,

111
00:07:16,284 --> 00:07:19,654
and every backend interaction took a few

112
00:07:19,692 --> 00:07:23,642
minutes. Sometimes it was also in the order of about 510 minutes.

113
00:07:23,776 --> 00:07:27,274
So overall it was in the order of half an hour to 1

114
00:07:27,312 --> 00:07:30,694
hour. The front ends and the back ends were run as a single binary.

115
00:07:30,742 --> 00:07:34,094
So for the user it is just one single CLI command which they

116
00:07:34,132 --> 00:07:37,386
execute, or one single binary which is finally executed.

117
00:07:37,578 --> 00:07:41,086
The user wanted to know the progress of the CLI, because when

118
00:07:41,108 --> 00:07:44,826
you're waiting for half an hour, it's kind of annoying to just see a blank

119
00:07:44,858 --> 00:07:48,546
screen. You would want to see something more interactive. So finally we

120
00:07:48,568 --> 00:07:52,386
had to solve the problem of how do we report the intermediate progress before the

121
00:07:52,408 --> 00:07:55,374
function call to each of the backends actually returns?

122
00:07:55,502 --> 00:07:58,866
So we basically built a channel from the

123
00:07:58,888 --> 00:08:02,502
front end to each of these backends, and the channel was

124
00:08:02,556 --> 00:08:06,034
populated with the progress as and when some significant

125
00:08:06,082 --> 00:08:09,414
milestone was reached, and each of this was populated to the front

126
00:08:09,452 --> 00:08:13,298
end, which basically aggregated that and showed to the user

127
00:08:13,394 --> 00:08:16,966
at appropriate instances. The other benefit we had was there was

128
00:08:16,988 --> 00:08:20,346
no extra overhead with logging them in separate

129
00:08:20,378 --> 00:08:23,806
place and using some extra db and stuff, so we were able to

130
00:08:23,828 --> 00:08:27,086
solve it in a very cheap manner. That's pretty much it for

131
00:08:27,108 --> 00:08:30,782
the small lightning overview of how I learned to use

132
00:08:30,836 --> 00:08:34,474
concurrency in Golang and the different salient features,

133
00:08:34,522 --> 00:08:38,074
including the most powerful of all the channels.

134
00:08:38,202 --> 00:08:41,500
Hope it was useful to the beginners. And thank you.

