1
00:00:04,070 --> 00:00:07,466
Hello everyone and welcome to the conference. Thank you

2
00:00:07,488 --> 00:00:10,790
very much for attending this session today on using Webassembly

3
00:00:10,870 --> 00:00:12,780
for in database machine learning.

4
00:00:17,380 --> 00:00:21,676
My name is Akmal Chaudhri and I'm a technical evangelist at Singlestore.

5
00:00:21,868 --> 00:00:25,244
And in terms of the agenda today I'll walk you through some steps

6
00:00:25,292 --> 00:00:29,412
to show you how we can configure a web assembly development environment

7
00:00:29,556 --> 00:00:33,016
on our workstation or laptop, and then walk you

8
00:00:33,038 --> 00:00:36,984
through some steps to show you how we can build a function which will

9
00:00:37,022 --> 00:00:41,252
upload into a database system and that will be for sentiment analysis.

10
00:00:41,396 --> 00:00:44,892
A little bit later at the end of the presentation, I'll show you an actual

11
00:00:44,946 --> 00:00:48,316
live demo on the large movie review data set to show you how

12
00:00:48,338 --> 00:00:50,460
this actually works in reality.

13
00:00:53,840 --> 00:00:57,216
First let's do a very brief introduction to single store, and then

14
00:00:57,238 --> 00:01:00,416
we'll talk through a couple of slides and look at the motivations and reasons as

15
00:01:00,438 --> 00:01:03,890
to why we might want to use webassembly with a database system.

16
00:01:06,580 --> 00:01:10,064
So single store DB is an example of a real time distributed

17
00:01:10,112 --> 00:01:13,776
SQL database system. So what we've seen over the last decade

18
00:01:13,808 --> 00:01:17,168
or so is the development of these scale out distributed SQL

19
00:01:17,184 --> 00:01:20,548
database systems, taking advantage of off the shelf hardware,

20
00:01:20,724 --> 00:01:24,344
cluster based cloud based systems and single

21
00:01:24,382 --> 00:01:27,992
storedb also offers a unified data engine. So that means

22
00:01:28,046 --> 00:01:31,544
it supports both transactions and analytics as well.

23
00:01:31,662 --> 00:01:35,076
It is also multi model and so it contains a wide

24
00:01:35,108 --> 00:01:38,636
range of choices and possibilities. And NYSM is one of

25
00:01:38,658 --> 00:01:41,916
these that it provides support for. And we'll look an example of how

26
00:01:41,938 --> 00:01:43,150
we can do that today.

27
00:01:45,840 --> 00:01:49,168
When working with a database system, there are a wide range of tools that we

28
00:01:49,174 --> 00:01:52,524
could potentially use with that database system to utilize

29
00:01:52,572 --> 00:01:56,488
machine learning capabilities. One of these, for example, could be Apache

30
00:01:56,524 --> 00:02:00,164
Spark. Lots of great Python libraries out there

31
00:02:00,202 --> 00:02:05,044
as well. We could also use many

32
00:02:05,082 --> 00:02:09,190
external tools and technologies. OpenAI is one of these very popular ones today,

33
00:02:09,640 --> 00:02:13,176
specific to single store, we have this concept of vector functions as

34
00:02:13,198 --> 00:02:17,192
well. That's something perhaps for another presentation today. Our focus

35
00:02:17,246 --> 00:02:20,872
though is going to be on Webassembly and specifically code

36
00:02:20,926 --> 00:02:24,124
engine using Webassembly. And the example we'll look at is

37
00:02:24,162 --> 00:02:28,024
using something called Veda Valence aware dictionary and sentiment

38
00:02:28,072 --> 00:02:30,860
reasoner. More about that very shortly.

39
00:02:33,360 --> 00:02:36,608
Previously we may have built applications for specific

40
00:02:36,694 --> 00:02:40,384
platforms. Now we have this concept of write

41
00:02:40,422 --> 00:02:44,304
once deploy anywhere. So we build our WASM application and

42
00:02:44,342 --> 00:02:47,888
we can run it on the web, on the desktop, mobile,

43
00:02:47,984 --> 00:02:49,780
edge, or on the server.

44
00:02:53,640 --> 00:02:56,964
So Webassembly really helps us to solve a number of

45
00:02:57,002 --> 00:03:01,108
problems that we might have with database systems. For example,

46
00:03:01,274 --> 00:03:04,250
writing procedural SQL sometimes is very difficult.

47
00:03:04,860 --> 00:03:08,648
Equally, there may be other requirements that we have, such as machine learning, scoring or

48
00:03:08,654 --> 00:03:11,720
fuzzy text matching, which the database engine simply doesn't support.

49
00:03:11,790 --> 00:03:15,260
And how do we extend its capabilities to meet these requirements?

50
00:03:15,920 --> 00:03:19,740
Moving data around is also costly and we would prefer not to do that

51
00:03:19,810 --> 00:03:23,672
all the time to send it to the application, keep the code and

52
00:03:23,746 --> 00:03:27,696
the data itself close together, colocated in the database engine,

53
00:03:27,798 --> 00:03:29,810
and that really gives us great benefits.

54
00:03:32,500 --> 00:03:36,156
Another benefit that we get with Webassembly is the opportunity to use existing

55
00:03:36,188 --> 00:03:38,820
code that we may have written in other programming languages.

56
00:03:39,160 --> 00:03:42,644
We can transform these into WASM modules, have these

57
00:03:42,682 --> 00:03:46,084
stored and executed safely within the database engine,

58
00:03:46,202 --> 00:03:49,944
and now it extends the capabilities and functionality of the database engine

59
00:03:50,062 --> 00:03:53,050
in many different ways that we couldn't achieve before.

60
00:03:55,580 --> 00:03:59,208
So in the example that we're going to work through today, we'll see

61
00:03:59,294 --> 00:04:03,292
some code written in rust and then we'll build

62
00:04:03,346 --> 00:04:06,380
and load that code into single storedb.

63
00:04:07,120 --> 00:04:11,452
It exists in a sandbox environment within the database engine and

64
00:04:11,506 --> 00:04:14,656
as far as the database engine is concerned, it will treat it just as though

65
00:04:14,678 --> 00:04:16,000
it's a UDF.

66
00:04:19,780 --> 00:04:23,292
Let's now walk through the steps of how to set up a local WASM development

67
00:04:23,356 --> 00:04:26,436
environment. We'll need an SDK as well as some

68
00:04:26,458 --> 00:04:30,256
other software and we'll see how to install this and prepare our environment.

69
00:04:30,368 --> 00:04:34,144
So this is entirely neutral and can be used with other vendors

70
00:04:34,192 --> 00:04:35,510
products as well.

71
00:04:38,200 --> 00:04:41,080
So first we'll download the Wazi SDK.

72
00:04:42,380 --> 00:04:45,864
Here's the link. And in this

73
00:04:45,902 --> 00:04:49,604
particular case we are going to use the installation

74
00:04:49,652 --> 00:04:53,224
in the opt directory. So we download

75
00:04:53,272 --> 00:04:56,712
the software and substitute wherever

76
00:04:56,776 --> 00:04:58,940
path two is for your environment.

77
00:04:59,680 --> 00:05:03,244
We unpack and

78
00:05:03,282 --> 00:05:06,988
then we make sure that we add the bin to the path

79
00:05:07,164 --> 00:05:10,976
as shown here. So here we

80
00:05:10,998 --> 00:05:14,384
can see the next two steps. The first one is to install the

81
00:05:14,422 --> 00:05:15,680
rust toolchain.

82
00:05:19,320 --> 00:05:20,470
There we go.

83
00:05:23,320 --> 00:05:26,870
And the second step there the wit bind gen

84
00:05:30,700 --> 00:05:31,770
as such.

85
00:05:38,190 --> 00:05:41,914
So here we can see the next couple of steps. First one is

86
00:05:41,952 --> 00:05:46,170
to add the wasm 32 wazi to the rust tool chain

87
00:05:48,930 --> 00:05:52,058
as it's not installed by default.

88
00:05:52,234 --> 00:05:54,480
Very straightforward. As you can see,

89
00:05:56,150 --> 00:05:59,300
the next step after that is to

90
00:06:01,270 --> 00:06:04,562
use this pushwasm tool. And in order

91
00:06:04,616 --> 00:06:07,874
to deploy our wasm we need this for

92
00:06:07,912 --> 00:06:11,202
single storedb. So very straightforward.

93
00:06:11,266 --> 00:06:14,550
Here all we need to do is to clone the

94
00:06:14,700 --> 00:06:18,582
GitHub repo change

95
00:06:18,636 --> 00:06:23,274
to the pushwasm directory. We build it and

96
00:06:23,312 --> 00:06:27,530
then we ensure that we add the path

97
00:06:27,950 --> 00:06:31,494
to where the software has been built to our dollar path.

98
00:06:31,542 --> 00:06:34,990
So when we call it, it picks it up correctly in our environment

99
00:06:35,810 --> 00:06:39,114
and obviously please amend the path

100
00:06:39,162 --> 00:06:42,240
to to match your environment there.

101
00:06:43,090 --> 00:06:47,214
In case there are some errors, usually lib

102
00:06:47,262 --> 00:06:51,460
SSL, then it may be necessary to install this.

103
00:06:55,270 --> 00:06:56,260
As such,

104
00:07:03,450 --> 00:07:07,366
let's now switch to our rust code. So the first

105
00:07:07,388 --> 00:07:11,470
using we'll do is we'll just make a directory

106
00:07:11,570 --> 00:07:14,826
in our home folder and we'll switch to that

107
00:07:14,848 --> 00:07:18,970
directory. And then within that directory

108
00:07:19,310 --> 00:07:23,242
we'll create a skeletal rust source tree using

109
00:07:23,296 --> 00:07:23,946
this command.

110
00:07:23,978 --> 00:07:30,586
Here's we'll

111
00:07:30,618 --> 00:07:34,974
also now create an interface definition file and

112
00:07:35,012 --> 00:07:38,590
we're going to call it sentiment table wit

113
00:07:39,670 --> 00:07:43,314
and inside that file we're going to place the

114
00:07:43,352 --> 00:07:44,340
following code.

115
00:07:47,430 --> 00:07:51,270
And what this code says is that we are going to have a function

116
00:07:51,420 --> 00:07:54,886
called sentiment table. It's going

117
00:07:54,908 --> 00:07:59,174
to take an input string and

118
00:07:59,212 --> 00:08:03,334
it's going to produce an output consisting of these polarity

119
00:08:03,382 --> 00:08:06,650
scores. And these polarity scores

120
00:08:07,070 --> 00:08:11,370
are just above here. As you can see we've got compound

121
00:08:12,350 --> 00:08:15,870
positive sentiment, negative sentiment

122
00:08:16,370 --> 00:08:17,950
and neutral.

123
00:08:22,130 --> 00:08:25,466
The next step is to replace the existing contents

124
00:08:25,498 --> 00:08:29,614
of the cargo file. And here you can see we've

125
00:08:29,662 --> 00:08:33,042
got a few things that reference back to

126
00:08:33,096 --> 00:08:36,370
what we are trying to do. The sentiment table

127
00:08:38,230 --> 00:08:41,970
specifically. Also the vader sentiment

128
00:08:42,050 --> 00:08:46,200
which we are utilizing here, which has already been

129
00:08:47,450 --> 00:08:51,046
converted to rust and that actually does the hard work for

130
00:08:51,068 --> 00:08:51,640
us.

131
00:08:57,150 --> 00:09:00,634
Now we actually need to provide the implementation of the

132
00:09:00,672 --> 00:09:04,046
function in rust. And here is the

133
00:09:04,068 --> 00:09:08,286
code. So you can see we are referencing the

134
00:09:08,468 --> 00:09:10,640
interface definition file here.

135
00:09:13,090 --> 00:09:16,530
We provide the name of the function

136
00:09:16,600 --> 00:09:20,014
here, the fact that it takes a string

137
00:09:20,062 --> 00:09:23,694
as input and provides the polarity

138
00:09:23,742 --> 00:09:27,346
scores as output. And we'll see this in the

139
00:09:27,368 --> 00:09:28,290
next slide.

140
00:09:32,730 --> 00:09:36,390
So here is the remaining code in our rust file.

141
00:09:37,050 --> 00:09:40,834
And here we can see the polarity

142
00:09:40,882 --> 00:09:43,994
scores which we referenced earlier as well.

143
00:09:44,112 --> 00:09:47,770
So the compound positive sentiment,

144
00:09:48,350 --> 00:09:51,930
negative sentiment and neutral.

145
00:09:54,750 --> 00:09:57,630
So we're now ready to build the WASM module.

146
00:09:58,050 --> 00:10:01,520
So all we need to do is to just go up one directory level

147
00:10:01,890 --> 00:10:05,920
and then issue the cargo build command as such.

148
00:10:07,270 --> 00:10:11,282
And then obviously we need to deploy that into

149
00:10:11,336 --> 00:10:15,122
single storedb. But before we do that we need to create

150
00:10:15,176 --> 00:10:20,898
a database. And so here

151
00:10:21,064 --> 00:10:25,554
we're going to use a MySQl client to

152
00:10:25,592 --> 00:10:29,542
connect to single store and

153
00:10:29,596 --> 00:10:33,866
this is going to be running in the cloud. So I'll substitute the

154
00:10:33,888 --> 00:10:35,900
value for host here for example,

155
00:10:37,710 --> 00:10:40,954
as well as my password. And then

156
00:10:41,072 --> 00:10:45,006
once I've done that I can do

157
00:10:45,108 --> 00:10:49,440
a create database and I'll just call it demo and

158
00:10:49,890 --> 00:10:52,800
just switch into that database as well. Use demo.

159
00:10:55,650 --> 00:10:59,294
So I'll exit from the mySQL client back to the terminal

160
00:10:59,342 --> 00:11:03,374
window and now I'll use the pushwasm

161
00:11:03,422 --> 00:11:07,570
tool to actually load that waSm module into single storedb.

162
00:11:08,310 --> 00:11:11,862
So you can see here, it looks like a busy statement there,

163
00:11:11,916 --> 00:11:14,310
but let's walk through this. So firstly,

164
00:11:14,970 --> 00:11:17,510
prompt for the password.

165
00:11:18,810 --> 00:11:22,346
And then here the name of the

166
00:11:22,368 --> 00:11:25,770
function that I want to load. Sentiment table,

167
00:11:27,230 --> 00:11:31,174
the interface definition file that we created

168
00:11:31,222 --> 00:11:34,862
earlier. The location of

169
00:11:34,916 --> 00:11:39,182
the actual wasm that was built using

170
00:11:39,236 --> 00:11:43,354
the cargo build command. And then connection

171
00:11:43,402 --> 00:11:47,170
details. Okay, where is the database system

172
00:11:47,240 --> 00:11:51,442
actually running? And again, for this particular

173
00:11:51,576 --> 00:11:55,490
example, simply substitute the value

174
00:11:55,560 --> 00:11:58,686
of host here it's in

175
00:11:58,728 --> 00:12:02,166
the cloud. And you can see here

176
00:12:02,268 --> 00:12:05,986
that demo is the database name referenced

177
00:12:06,018 --> 00:12:09,654
here, which is what we've created on the previous slide. So once

178
00:12:09,692 --> 00:12:12,902
this command is run, and if it's successful,

179
00:12:12,966 --> 00:12:16,282
which hopefully it should be, shouldn't be any problems, we should

180
00:12:16,336 --> 00:12:19,642
see this message output wisen function

181
00:12:19,696 --> 00:12:21,690
was created successfully.

182
00:12:24,030 --> 00:12:27,742
So we'll use the MySQL client to connect to

183
00:12:27,796 --> 00:12:31,214
our demo database system and then

184
00:12:31,252 --> 00:12:35,662
we can do a couple of quick tests. Okay, so the first one here is

185
00:12:35,716 --> 00:12:40,674
just calling that function directly as

186
00:12:40,712 --> 00:12:43,806
such, select star from sentiment table.

187
00:12:43,998 --> 00:12:47,566
And then here is the string that we are passing in. We're saying the movie

188
00:12:47,598 --> 00:12:52,066
was great and then based upon that it's

189
00:12:52,098 --> 00:12:55,206
returning this to us.

190
00:12:55,388 --> 00:12:59,426
So it's giving us the fact that there's

191
00:12:59,458 --> 00:13:01,350
no negative sentiment.

192
00:13:02,110 --> 00:13:05,466
Positive seems quite reasonable, neutral seems quite

193
00:13:05,488 --> 00:13:09,740
reasonable there, and a compound score as well.

194
00:13:10,510 --> 00:13:14,590
Now one of the things that Vader can do is it can consider things like

195
00:13:14,660 --> 00:13:18,638
capitalization, for example. So for example,

196
00:13:18,804 --> 00:13:22,142
just below here, you can see that now in

197
00:13:22,196 --> 00:13:25,166
this I've put, the movie was great,

198
00:13:25,268 --> 00:13:29,282
but great is in caps and

199
00:13:29,336 --> 00:13:33,074
an exclamation mark at the end. And here

200
00:13:33,192 --> 00:13:36,654
you can see that the results

201
00:13:36,702 --> 00:13:41,080
returned show both

202
00:13:41,530 --> 00:13:46,662
the positive going

203
00:13:46,716 --> 00:13:49,926
up, the compound going up, and the neutral going

204
00:13:49,948 --> 00:13:52,860
down. And obviously negative is still zero there.

205
00:13:57,400 --> 00:14:02,244
So let's now actually look at using that function on

206
00:14:02,282 --> 00:14:06,000
the large movie review data set and see

207
00:14:06,170 --> 00:14:07,290
how that works.

208
00:14:10,870 --> 00:14:14,926
So here I have my MySQL client connected

209
00:14:14,958 --> 00:14:17,860
to my cloud based database system.

210
00:14:18,790 --> 00:14:22,310
And let's take a look at the tables.

211
00:14:23,050 --> 00:14:27,954
So in my demo database I have this table called IMDb

212
00:14:28,002 --> 00:14:31,938
reviews, which has got two columns.

213
00:14:32,114 --> 00:14:35,578
We can see that. There we go,

214
00:14:35,744 --> 00:14:39,110
describe. So I've got the sentiment,

215
00:14:39,270 --> 00:14:42,010
the text, the review, if you like,

216
00:14:42,080 --> 00:14:45,326
of the particular movie stored in

217
00:14:45,348 --> 00:14:46,750
the text column.

218
00:14:48,770 --> 00:14:54,446
And we've got 25,000

219
00:14:54,628 --> 00:14:57,520
rows here as you can see.

220
00:15:00,710 --> 00:15:04,146
And now what I can do is here I have a

221
00:15:04,168 --> 00:15:07,918
query. Substring is just to limit

222
00:15:08,014 --> 00:15:12,198
the amount of data that it shows. Otherwise it becomes a little bit

223
00:15:12,364 --> 00:15:16,162
too much to see. But in and amongst

224
00:15:16,226 --> 00:15:19,926
all of this, if we look down at

225
00:15:19,948 --> 00:15:23,906
the bottom here, we can see there is our sentiment

226
00:15:23,938 --> 00:15:27,718
table function, and I'm

227
00:15:27,734 --> 00:15:30,986
going to use that in this query and then just limit it to

228
00:15:31,008 --> 00:15:34,698
ten results, ten rows. Okay, so let's take a look at that.

229
00:15:34,784 --> 00:15:38,382
So there we go. So that's now been applied to

230
00:15:38,436 --> 00:15:41,806
that particular table. So again, we've got

231
00:15:41,828 --> 00:15:45,706
the compound, the positive, the negative and the neutral results

232
00:15:45,738 --> 00:15:49,822
there. So previously we saw that

233
00:15:49,956 --> 00:15:53,854
we were just passing a string in. Now we're actually able to utilize

234
00:15:53,902 --> 00:15:58,002
this directly with a table, as you can see, and it has

235
00:15:58,136 --> 00:16:01,606
many more practical benefits doing it this way. The other thing

236
00:16:01,628 --> 00:16:06,946
we can do is we can ask database

237
00:16:06,978 --> 00:16:10,680
system to show us the functions that it knows about.

238
00:16:11,210 --> 00:16:15,180
And here you can see that it's reporting to us

239
00:16:15,870 --> 00:16:20,886
that it knows about sentiment

240
00:16:20,918 --> 00:16:21,610
table,

241
00:16:24,830 --> 00:16:27,280
that it's a table valued function,

242
00:16:28,610 --> 00:16:33,230
and that the runtime is wasm.

243
00:16:37,490 --> 00:16:41,134
Just to summarize our presentation then. So waSm UDFs

244
00:16:41,182 --> 00:16:44,866
give just great power, extensibility, the opportunity to

245
00:16:44,888 --> 00:16:48,434
really extend the capabilities of the database engine in many new

246
00:16:48,472 --> 00:16:51,170
directions. That might be difficult to do otherwise,

247
00:16:51,750 --> 00:16:55,558
and we can do so in a variety of different languages. So today we

248
00:16:55,564 --> 00:16:59,478
saw an example using rust, but other languages such as C, C Plus plus

249
00:16:59,564 --> 00:17:03,706
and others as well are being developed and it

250
00:17:03,728 --> 00:17:07,610
gives us near native speeds, so it's very fast. And because

251
00:17:07,680 --> 00:17:10,570
it's a sandbox environment, it is also safe.

252
00:17:12,590 --> 00:17:16,202
A couple of resources to highlight. So the first one there is an article

253
00:17:16,266 --> 00:17:19,902
that I published on medium in October last

254
00:17:19,956 --> 00:17:23,806
year, which essentially does a walkthrough of the example

255
00:17:23,908 --> 00:17:27,310
that we've covered today. The only difference

256
00:17:27,380 --> 00:17:31,342
is the pushbasm tool. The syntax of that has changed slightly

257
00:17:31,486 --> 00:17:34,814
since my article last year, but the rest of the instructions

258
00:17:34,862 --> 00:17:38,020
you should be able to follow without any problems.

259
00:17:38,470 --> 00:17:42,054
And the second thing there is the bytecode alliance. So it's worth checking out

260
00:17:42,092 --> 00:17:45,442
what they're up to, some of their blogs and articles.

261
00:17:45,506 --> 00:17:49,106
Very useful to keep an eye in terms of development of wasm

262
00:17:49,218 --> 00:17:50,150
overall.

263
00:17:53,490 --> 00:17:57,502
Thank you very much for attending this session and for watching

264
00:17:57,556 --> 00:18:01,054
the video. Hope you found it useful. And if you'd like

265
00:18:01,092 --> 00:18:05,600
to contact me, please just send an email to team at

266
00:18:07,130 --> 00:18:10,406
and just mention my name and for my attention and it will get

267
00:18:10,428 --> 00:18:13,650
forwarded on to me and then I can respond to you directly.

268
00:18:13,810 --> 00:18:16,694
Have a great conference, enjoy the rest of your day.

269
00:18:16,812 --> 00:18:18,040
Thank you very much.

