1
00:00:34,610 --> 00:00:38,134
Hello guys, this is Shista. So I'm so happy to give this

2
00:00:38,172 --> 00:00:42,242
talk around how to upgrade your existing

3
00:00:42,306 --> 00:00:47,010
traditional databases, for example MySQL or PostgreSQL,

4
00:00:47,090 --> 00:00:50,810
to become a distributed one so that you can leverage

5
00:00:50,890 --> 00:00:55,034
the distributed database system to have the higher performance

6
00:00:55,162 --> 00:00:58,734
and make your query become faster and to

7
00:00:58,772 --> 00:01:02,222
give you the out of the box deployment solution. Right.

8
00:01:02,276 --> 00:01:05,662
So let's get started. This is about myself.

9
00:01:05,796 --> 00:01:09,650
I'm the Trista now I'm at the Sofias working

10
00:01:09,720 --> 00:01:12,978
as the co founder and the CTO. My area,

11
00:01:13,064 --> 00:01:16,834
it's about the distributed system around the databases,

12
00:01:16,962 --> 00:01:21,250
around the automatic databases management

13
00:01:21,330 --> 00:01:25,574
platform. So I spend my time

14
00:01:25,772 --> 00:01:29,302
as a technology and also in some open source

15
00:01:29,446 --> 00:01:32,566
foundation, for example Apache Software foundation.

16
00:01:32,678 --> 00:01:35,846
I'm the Apache member and incubator mentor

17
00:01:35,958 --> 00:01:39,606
to help to give some of the tips to some open source projects

18
00:01:39,638 --> 00:01:43,582
and their community. Yeah, so sometimes I will post some

19
00:01:43,636 --> 00:01:46,782
articles about the open source, about the open

20
00:01:46,836 --> 00:01:50,394
source monetization, about the databases

21
00:01:50,522 --> 00:01:54,422
and cloud databases on my Twitter and linking.

22
00:01:54,506 --> 00:01:58,754
If you're interested in such a topic soon, welcome to give a look there.

23
00:01:58,952 --> 00:02:02,818
Right? And today we will have the following topics we

24
00:02:02,824 --> 00:02:07,074
will talk. The first one, I will give the current scenarios

25
00:02:07,122 --> 00:02:11,142
because we have the new technology, we have the new needs.

26
00:02:11,276 --> 00:02:15,426
So we need to do some change around our database infrastructure.

27
00:02:15,538 --> 00:02:19,206
And second one, let us dive into the distributed

28
00:02:19,238 --> 00:02:22,380
database system and to look at

29
00:02:22,910 --> 00:02:26,698
what is happening in a distributed database system now.

30
00:02:26,864 --> 00:02:30,874
And then I will give some new ideas or solutions.

31
00:02:30,922 --> 00:02:34,974
Like I said before at the beginning, how to make your

32
00:02:35,172 --> 00:02:39,306
favorite postgres or MySQL or SQL

33
00:02:39,338 --> 00:02:42,430
server or Oracle to become a distributed one.

34
00:02:42,500 --> 00:02:46,322
To become a distributed system. And then if

35
00:02:46,376 --> 00:02:50,034
we have time, I will introduce my demo show and to let

36
00:02:50,072 --> 00:02:53,746
you learn it or deploy it one by one.

37
00:02:53,928 --> 00:02:57,830
Yeah. So first one, when you talk about the

38
00:02:57,900 --> 00:03:00,950
new scenarios, because in this new era,

39
00:03:01,690 --> 00:03:05,446
actually we have some new technologies. All of

40
00:03:05,468 --> 00:03:09,610
them are good features or good technologies

41
00:03:10,270 --> 00:03:13,786
to provide their values for our bi, I mean

42
00:03:13,808 --> 00:03:16,540
the business, your commercial, your customer.

43
00:03:17,310 --> 00:03:21,722
But for SPCo, for big data or databases,

44
00:03:21,866 --> 00:03:26,222
actually all the new scenarios make

45
00:03:26,276 --> 00:03:30,174
us have the new definition about big

46
00:03:30,212 --> 00:03:33,506
data characteristics. That means the

47
00:03:33,608 --> 00:03:37,154
big data five v they are the

48
00:03:37,272 --> 00:03:39,598
value, veracity,

49
00:03:39,774 --> 00:03:43,090
volume, velocity and variety.

50
00:03:44,390 --> 00:03:47,702
I will give the brief introduction about each of them.

51
00:03:47,756 --> 00:03:51,126
The first one about the value. That means we need

52
00:03:51,148 --> 00:03:55,494
to use some AP

53
00:03:55,612 --> 00:03:59,002
or use some the big data architecture or

54
00:03:59,056 --> 00:04:02,870
the solutions to help us do some statistics

55
00:04:02,950 --> 00:04:05,962
so we can know more about our

56
00:04:06,016 --> 00:04:09,306
business or give project some of the

57
00:04:09,328 --> 00:04:13,658
good feedback. Right? The second one, it's about variety.

58
00:04:13,754 --> 00:04:17,914
That means we need to guarantee that the data we collected

59
00:04:18,042 --> 00:04:21,438
are correct though. If we use this data

60
00:04:21,524 --> 00:04:24,994
to create some data model to do the

61
00:04:25,032 --> 00:04:28,642
bi work, that means that they

62
00:04:28,696 --> 00:04:32,834
are the valuable. If we use the wrong data

63
00:04:32,952 --> 00:04:36,418
to do the AI, that means

64
00:04:36,504 --> 00:04:40,390
we will guess the wrong readout will guide our

65
00:04:40,540 --> 00:04:44,130
product or companies to the wrong direction,

66
00:04:44,210 --> 00:04:47,946
right? The NASA one is about volume. That means,

67
00:04:48,048 --> 00:04:52,330
you know that in the Internet that people

68
00:04:52,480 --> 00:04:55,914
create the data every day, every minute, every second.

69
00:04:56,112 --> 00:05:00,118
So that means we need to manage the

70
00:05:00,304 --> 00:05:03,914
tremendous data size. And that's why it's

71
00:05:04,042 --> 00:05:08,046
velocity. That means that any users or

72
00:05:08,148 --> 00:05:12,486
other department, they really want to get the readout or the queries,

73
00:05:12,618 --> 00:05:15,458
the readout as quick as possible,

74
00:05:15,624 --> 00:05:19,106
right? So they want to get the real time

75
00:05:19,288 --> 00:05:23,026
readouts or do the real near real time

76
00:05:23,128 --> 00:05:26,774
process or stream data stream. The next part is

77
00:05:26,812 --> 00:05:30,738
about variety. That means your databases

78
00:05:30,834 --> 00:05:34,454
or your databases store or data store need

79
00:05:34,492 --> 00:05:38,182
to help you manage the structured and unstructured

80
00:05:38,246 --> 00:05:42,070
data. So that's the main innate

81
00:05:42,150 --> 00:05:45,850
big data characteristic. Based on

82
00:05:45,920 --> 00:05:49,466
all of the characteristic, we need

83
00:05:49,488 --> 00:05:53,738
to solve all of the issues youth or new databases

84
00:05:53,834 --> 00:05:57,440
architecture or new databases solution or product.

85
00:05:59,010 --> 00:06:02,778
But before we introduce all of them, I just want to

86
00:06:02,884 --> 00:06:07,086
give a little bit introduction about the OLTP OLAP.

87
00:06:07,198 --> 00:06:10,738
Because you know we cannot use one single

88
00:06:10,824 --> 00:06:14,034
databases or product to solve all of the issues,

89
00:06:14,152 --> 00:06:17,730
right? Or to meet all of the requirements from our previous

90
00:06:17,810 --> 00:06:21,046
slides. So generally speaking,

91
00:06:21,148 --> 00:06:25,266
we split the scenarios into two. One, the first one focused

92
00:06:25,298 --> 00:06:28,466
on the OLAP. That means to precise

93
00:06:28,498 --> 00:06:33,450
the larger amount of the data quickly and to do the analystic.

94
00:06:34,030 --> 00:06:37,738
The second one, it's about OLTP, that means

95
00:06:37,824 --> 00:06:41,318
or this kind of databases or productions,

96
00:06:41,414 --> 00:06:45,354
they want to handle large volumes

97
00:06:45,402 --> 00:06:49,354
of the transactional data involving multiple

98
00:06:49,402 --> 00:06:53,094
users, right? When we speak of the MySQL

99
00:06:53,162 --> 00:06:56,914
or PostgreSQL or Oracle, actually they

100
00:06:56,952 --> 00:07:00,930
are all belongs to this type, the type of the databases.

101
00:07:01,350 --> 00:07:05,482
So today I just want to pick up the OLTP

102
00:07:05,646 --> 00:07:09,080
area to give my solution and my idea.

103
00:07:09,850 --> 00:07:13,446
But if you have some idea about OLAP, maybe later on

104
00:07:13,468 --> 00:07:16,950
I can give other talks about around that topic.

105
00:07:17,390 --> 00:07:21,110
So now I know people love the MySQL

106
00:07:21,190 --> 00:07:24,602
or love the postgresql or some

107
00:07:24,656 --> 00:07:27,398
company will bought some the Oracle databases,

108
00:07:27,494 --> 00:07:31,242
right? But you can see that all of the monolith

109
00:07:31,306 --> 00:07:35,662
databases actually for them is too hard

110
00:07:35,796 --> 00:07:39,886
or too difficult to manage the structured data,

111
00:07:39,988 --> 00:07:43,780
especially data STP or

112
00:07:44,390 --> 00:07:47,902
BP. All of them kind of like tremendous

113
00:07:47,966 --> 00:07:52,098
data size, right? So people will consider how to use some

114
00:07:52,264 --> 00:07:55,490
distributed databases or new SQL databases,

115
00:07:55,570 --> 00:07:58,694
for example the crop row DB or MongoDB or

116
00:07:58,732 --> 00:08:03,058
the aura or such kind of the databases solution,

117
00:08:03,154 --> 00:08:06,454
right? But we need to ask

118
00:08:06,492 --> 00:08:09,834
a question why people want to adopt the

119
00:08:09,872 --> 00:08:13,962
new solutions at this point. Because you know that

120
00:08:14,016 --> 00:08:18,010
I introduced before that the monolithic databases.

121
00:08:19,970 --> 00:08:23,374
For them, it's very hard

122
00:08:23,572 --> 00:08:27,486
to help us to manage all

123
00:08:27,588 --> 00:08:31,306
the structured databases in BT or PD,

124
00:08:31,418 --> 00:08:35,250
right? And plus you know that the

125
00:08:35,320 --> 00:08:38,626
service at the beginning, they're the single one, they are

126
00:08:38,648 --> 00:08:42,082
deployed in a monolithic machine, right? But now

127
00:08:42,136 --> 00:08:45,910
you found it split it in the

128
00:08:45,980 --> 00:08:50,070
microservice or serviceless, right? And people will use the

129
00:08:50,140 --> 00:08:54,374
Kubernetes to manage all of the

130
00:08:54,412 --> 00:08:58,058
services, right? So you can see that the

131
00:08:58,144 --> 00:09:01,594
services, it's become the distributed one,

132
00:09:01,712 --> 00:09:06,198
it's split, it's sharded and your server

133
00:09:06,294 --> 00:09:09,834
actually on the same way to do all

134
00:09:09,872 --> 00:09:13,214
the stuff at the beginning, maybe you can just use

135
00:09:13,252 --> 00:09:16,862
the one server to do all the stuff. But later on you found that if

136
00:09:16,916 --> 00:09:19,600
we can use the cloud,

137
00:09:20,290 --> 00:09:23,922
the pod or container or the

138
00:09:24,056 --> 00:09:27,650
docker, you found it's easy for us to manage

139
00:09:27,720 --> 00:09:31,858
and to skew in or skew out it

140
00:09:32,024 --> 00:09:35,266
make this system become or the server make

141
00:09:35,288 --> 00:09:38,834
the infrastructure become distributed and

142
00:09:38,872 --> 00:09:42,630
become the elastic skill in our skill out,

143
00:09:42,700 --> 00:09:46,626
right? So that's the power of the distribution.

144
00:09:46,818 --> 00:09:50,378
And how about the databases? Actually big

145
00:09:50,464 --> 00:09:54,458
databases. And currently at this point people use the same

146
00:09:54,544 --> 00:09:58,522
idea, that means the distributed or sharding or the

147
00:09:58,576 --> 00:10:02,462
splitting the architecture to split one

148
00:10:02,516 --> 00:10:06,522
single databases into a distributed cluster

149
00:10:06,586 --> 00:10:10,842
to make this cluster can help you manage the tremendous

150
00:10:10,906 --> 00:10:14,354
data, enormous data, and can help you to

151
00:10:14,392 --> 00:10:18,274
do the elastic skewing and skew out based on

152
00:10:18,312 --> 00:10:21,730
your needs, right? So you can choose the pay

153
00:10:21,800 --> 00:10:26,006
add to go this model. Yeah. So at

154
00:10:26,028 --> 00:10:29,414
this point, you know that maybe we

155
00:10:29,452 --> 00:10:32,822
need to use some of the distributed databases for some

156
00:10:32,956 --> 00:10:35,990
necessary needs or cases.

157
00:10:36,970 --> 00:10:40,186
But I know most people, maybe at the

158
00:10:40,208 --> 00:10:43,754
five years ago or ten years ago, you are so

159
00:10:43,872 --> 00:10:47,786
like, you are so support

160
00:10:47,888 --> 00:10:51,534
the PostgreSQL or MySQL. But now you

161
00:10:51,572 --> 00:10:55,310
need to consider the upgrading all the stuff, okay,

162
00:10:55,380 --> 00:10:58,986
you can actually just at the beginning choose the distributed

163
00:10:59,018 --> 00:11:02,538
databases. But I guess most of

164
00:11:02,564 --> 00:11:07,966
us are still in the progress of the evolution,

165
00:11:08,078 --> 00:11:12,098
right? How to make it become the distributed one and

166
00:11:12,184 --> 00:11:15,650
today. So I want to share another solution

167
00:11:15,730 --> 00:11:19,878
to help you to own a distributed system based

168
00:11:19,964 --> 00:11:23,702
on your existing postgreSQL cluster or

169
00:11:23,756 --> 00:11:27,080
MySQL SQL cluster, and make this

170
00:11:27,550 --> 00:11:31,254
distributed postgres cluster, have the skewing

171
00:11:31,302 --> 00:11:35,126
skew out elastic skewing skew out features or rewrite

172
00:11:35,158 --> 00:11:38,650
splitting like the traffic governance features

173
00:11:38,990 --> 00:11:42,880
into this cluster. So how to do that?

174
00:11:43,570 --> 00:11:47,246
We need to know that when we speak of the

175
00:11:47,348 --> 00:11:50,686
distributed databases. Actually most of them

176
00:11:50,788 --> 00:11:54,510
adopt the computing storage splitting

177
00:11:54,670 --> 00:11:58,180
architecture. That means in this distributed system,

178
00:11:59,030 --> 00:12:02,130
it's made up of two

179
00:12:02,200 --> 00:12:05,540
important parts. The first one is the computing part.

180
00:12:05,850 --> 00:12:09,234
That means the computing nodes. The second one the storage nodes,

181
00:12:09,282 --> 00:12:13,334
right? So based on this idea, if we want to

182
00:12:13,372 --> 00:12:17,174
make our monolithic postgreSQl become a

183
00:12:17,212 --> 00:12:20,746
distributed one, actually we can regard

184
00:12:20,848 --> 00:12:24,554
or view postgreSQl or MySQL SQL as

185
00:12:24,592 --> 00:12:28,758
the storage nodes, different storage nodes. It's postgres

186
00:12:28,854 --> 00:12:32,320
means the one storage node and then

187
00:12:32,930 --> 00:12:36,910
all the storage nodes. They can do some the

188
00:12:36,980 --> 00:12:41,150
local computing work and help us to persist your

189
00:12:41,220 --> 00:12:44,834
data. Right? So if we want to create

190
00:12:44,872 --> 00:12:49,090
this distributed system, then we need the

191
00:12:49,160 --> 00:12:52,974
exact global computing nodes,

192
00:12:53,102 --> 00:12:57,126
right? So who can become the

193
00:12:57,228 --> 00:13:00,466
distributed nodes? Later on I will introduce the Apache

194
00:13:00,498 --> 00:13:04,210
sharding Sophia. It can work as the computing nodes.

195
00:13:04,290 --> 00:13:08,102
So use Apache sharding Sophia plus your existing favorite,

196
00:13:08,166 --> 00:13:12,010
MySQL, PostgreSQL or Oracle. You can have

197
00:13:12,080 --> 00:13:15,306
the distributed one. So what's the

198
00:13:15,328 --> 00:13:16,730
partition Sophia?

199
00:13:18,670 --> 00:13:22,398
All right, before that I need to give some of the benefits

200
00:13:22,484 --> 00:13:26,830
of this solution. The first one, it can leverage your existing

201
00:13:27,330 --> 00:13:30,842
database cluster. That means you don't need to overturn

202
00:13:30,906 --> 00:13:34,542
the whole of the infrastructure. A second one, you can

203
00:13:34,596 --> 00:13:38,170
leverage the ecosystem of the mature

204
00:13:38,330 --> 00:13:42,510
postgreSql deployment or maintaining

205
00:13:43,890 --> 00:13:47,362
the ecosystem of the postgreSQl

206
00:13:47,426 --> 00:13:51,714
or MySQL's maintaining work and deploying

207
00:13:51,762 --> 00:13:56,290
work, right? You have a lot of mature tools or the dbas

208
00:13:56,370 --> 00:13:59,882
can help you deal with all of the stuff. The third

209
00:13:59,936 --> 00:14:03,782
one that I will give more like the SQL

210
00:14:03,846 --> 00:14:07,626
audit or traffic governance or elastic skilling all

211
00:14:07,648 --> 00:14:10,342
the features into this solution, right?

212
00:14:10,496 --> 00:14:14,174
The last one that it can help you consider how to

213
00:14:14,212 --> 00:14:18,046
move your databases into cloud. I mean

214
00:14:18,148 --> 00:14:22,358
because we use the storage and computing

215
00:14:22,474 --> 00:14:26,270
splitting architecture, that means your postgreSQl

216
00:14:26,430 --> 00:14:30,242
works working at the storage nodes and

217
00:14:30,376 --> 00:14:33,410
are deployed in on premise.

218
00:14:33,750 --> 00:14:37,734
But you can use Apache sharing Sphereex working

219
00:14:37,852 --> 00:14:41,670
at the computing nodes and are deployed

220
00:14:42,330 --> 00:14:45,734
on the Kubernetes or on the cloud,

221
00:14:45,852 --> 00:14:49,274
right? So that means you can use this

222
00:14:49,312 --> 00:14:53,590
solution to solve the headache of database

223
00:14:53,670 --> 00:14:57,100
on cloud such issues. And that's one that

224
00:14:57,870 --> 00:15:01,582
it will provide you the out of the box deployment. I guess

225
00:15:01,636 --> 00:15:04,894
most of the projects will give such feature, right? It's not

226
00:15:04,932 --> 00:15:08,910
the highlighted one. Yeah. So let's move the next page

227
00:15:08,980 --> 00:15:12,598
with the Charlene Sophia. Before introduce

228
00:15:12,634 --> 00:15:16,242
the feature of this product or this project, I just want

229
00:15:16,296 --> 00:15:19,938
to say that it's the big community, open source community.

230
00:15:20,024 --> 00:15:22,580
It's the Apache top layer project.

231
00:15:23,190 --> 00:15:26,998
And because it has been open source for

232
00:15:27,084 --> 00:15:30,246
more than six years. So you

233
00:15:30,268 --> 00:15:34,070
know that people love it. So there are many

234
00:15:34,140 --> 00:15:38,102
contributors committers active there.

235
00:15:38,236 --> 00:15:41,974
And it released for more

236
00:15:42,012 --> 00:15:45,786
than fifty s. So you know, worry that it's a

237
00:15:45,888 --> 00:15:49,434
brand new project and for you, because people

238
00:15:49,472 --> 00:15:53,134
will worry about that. Oh, if I have some questions, I cannot get

239
00:15:53,172 --> 00:15:56,430
help from the community or oh, it's a new one.

240
00:15:56,500 --> 00:16:01,102
So people will worry about the quality and his state

241
00:16:01,156 --> 00:16:05,314
stability, right? But all

242
00:16:05,352 --> 00:16:08,750
of the issues don't exist

243
00:16:08,830 --> 00:16:13,330
here because it's a bigger one. And many

244
00:16:13,400 --> 00:16:17,154
people or companies use this project for their production

245
00:16:17,202 --> 00:16:21,170
environment. And it provides a friendly document

246
00:16:21,250 --> 00:16:24,466
for you to learn more about it. And that's

247
00:16:24,498 --> 00:16:27,960
why I want to introduce the feature of this project.

248
00:16:28,890 --> 00:16:32,374
Generally speaking, sharing Sophia provides two clients for you to

249
00:16:32,412 --> 00:16:36,554
choose. The first one, the sharding Sophia GDBC. It's a

250
00:16:36,752 --> 00:16:42,190
lightweight GDBC driver for your Java application.

251
00:16:42,340 --> 00:16:46,666
It's a framework so you can use the native Java

252
00:16:46,858 --> 00:16:50,654
interface to use Apache Sharding VGDBC and help you

253
00:16:50,692 --> 00:16:54,178
to reach the following functions. The first one,

254
00:16:54,264 --> 00:16:57,970
data sharding. That means to shard your data into

255
00:16:58,040 --> 00:17:01,954
different database instance, right? Make it

256
00:17:01,992 --> 00:17:05,254
become the distributed database one. A second about

257
00:17:05,292 --> 00:17:09,074
the distributed transformation and also rewrap splitting.

258
00:17:09,122 --> 00:17:12,614
If your databases have many replicas and you

259
00:17:12,652 --> 00:17:16,386
want to input the QPS or TPF

260
00:17:16,498 --> 00:17:19,754
system, you consider how to leverage all of

261
00:17:19,792 --> 00:17:23,914
the replica one, right? For example, to send some the

262
00:17:24,032 --> 00:17:27,226
select query rings to the replicas ones, right?

263
00:17:27,328 --> 00:17:30,774
So at the beginning, maybe you consider use the load balancer.

264
00:17:30,822 --> 00:17:34,234
But now, if you use a existing Sophia, no matter it's a GDBC

265
00:17:34,282 --> 00:17:38,366
or proxy, all of them can help you automatically do

266
00:17:38,388 --> 00:17:42,486
the load balancer stuff. And send the update

267
00:17:42,538 --> 00:17:46,126
or delayed queries to the primary instance.

268
00:17:46,238 --> 00:17:50,590
And send all of the liked queries to the replicas

269
00:17:50,670 --> 00:17:54,610
once. And can for example, use the random

270
00:17:55,130 --> 00:17:58,514
strategy or use the round robin

271
00:17:58,562 --> 00:18:01,910
strategy to leverage your replicas into the

272
00:18:01,980 --> 00:18:06,226
instance. And also it can help you do the data masking

273
00:18:06,338 --> 00:18:09,594
or data encryption. I think it's so

274
00:18:09,632 --> 00:18:13,146
valuable, so valuable features, because you

275
00:18:13,168 --> 00:18:16,826
know that you want the data in

276
00:18:16,848 --> 00:18:21,498
the databases are encrypted,

277
00:18:21,594 --> 00:18:24,926
right? But how to do that

278
00:18:25,028 --> 00:18:28,478
if you use sharding Sophia, because you can see here,

279
00:18:28,564 --> 00:18:32,694
sharding Sophia, it's deployed

280
00:18:32,762 --> 00:18:36,354
between your application and your databases. So all

281
00:18:36,392 --> 00:18:40,254
of your queries first read sharding Sophia proxy shorting Sophia

282
00:18:40,302 --> 00:18:44,302
can automatically do the data masking or data encryption

283
00:18:44,366 --> 00:18:48,130
or decryption. And so it sends

284
00:18:48,290 --> 00:18:52,386
encrypted data into your databases, right? So you don't worry

285
00:18:52,418 --> 00:18:56,210
about that. Your data, it's all plain text in the databases

286
00:18:56,290 --> 00:19:00,362
because shortening Sophia can help you do all of the encryption work

287
00:19:00,416 --> 00:19:04,410
and decryption work. Yeah, so that's because

288
00:19:04,480 --> 00:19:08,326
you know that shortening Sophie, oh, another product is shorting

289
00:19:08,358 --> 00:19:12,158
Sophie proxy. You know that at the name hint, it's the

290
00:19:12,244 --> 00:19:15,982
database proxy. Database proxy can help you do

291
00:19:16,036 --> 00:19:19,978
all the features I mentioned earlier,

292
00:19:20,074 --> 00:19:24,106
right? Yeah. So that's all about the sharding

293
00:19:24,138 --> 00:19:27,714
Sophia GDBC and Sharding Sophia proxy and the feature they can

294
00:19:27,752 --> 00:19:31,394
provide you. Actually if you use sharding JDBC because

295
00:19:31,512 --> 00:19:35,146
it just implement the native GDBC.

296
00:19:35,278 --> 00:19:38,482
So no matter your databases, it's a postgreSQL,

297
00:19:38,546 --> 00:19:41,586
MySQL or SQL, SQL or Oracle,

298
00:19:41,698 --> 00:19:44,280
it all works here. Right?

299
00:19:44,890 --> 00:19:48,502
The last part about if you

300
00:19:48,556 --> 00:19:52,102
use the sharding SUV GDBC then your deployment

301
00:19:52,166 --> 00:19:55,834
architecture will become the right column. Right?

302
00:19:55,952 --> 00:19:59,450
At the beginning, your application need to manage

303
00:19:59,520 --> 00:20:02,894
your database connection and data sources by

304
00:20:02,932 --> 00:20:06,954
yourself. But now sharing Sophia proxy

305
00:20:07,002 --> 00:20:10,894
can help you manage all of the database instance, help you

306
00:20:10,932 --> 00:20:14,482
manage the connections, do the data sharding to do the data

307
00:20:14,536 --> 00:20:18,226
masking or data encryption. All of the good stuff, right?

308
00:20:18,328 --> 00:20:21,794
And your application just focus on itself

309
00:20:21,912 --> 00:20:25,262
to use this distributed database system.

310
00:20:25,416 --> 00:20:28,710
Yeah, and another part that

311
00:20:28,860 --> 00:20:33,720
how about if my application lives

312
00:20:34,090 --> 00:20:37,750
on the Kubernetes, right? If so, you can just

313
00:20:37,820 --> 00:20:41,130
use our sharding Sophia on cloud project

314
00:20:41,280 --> 00:20:45,094
to use the helm charts. One command to deploy

315
00:20:45,142 --> 00:20:49,194
sharding Sophia cluster in your Kubernetes cluster and

316
00:20:49,232 --> 00:20:54,038
then light your application, leaving the kubernetes

317
00:20:54,134 --> 00:20:57,994
to connect the sharding Sofia proxy and sharding Sophie proxy

318
00:20:58,042 --> 00:21:01,870
can help you manage all of the databases and do data sharding.

319
00:21:02,290 --> 00:21:06,370
No matter your databases are on the

320
00:21:06,440 --> 00:21:10,430
cloud, are on the premise or in the Kubernetes

321
00:21:10,510 --> 00:21:12,610
cluster or the RDS.

322
00:21:13,910 --> 00:21:17,778
Just like the sharding Sophia can connect to your databases,

323
00:21:17,954 --> 00:21:22,630
you can solve all of the issue, right? So thanks

324
00:21:22,700 --> 00:21:26,994
to the computing

325
00:21:27,042 --> 00:21:30,618
and storage splitting architecture, that means your

326
00:21:30,784 --> 00:21:34,406
databases where your storage nodes can locate

327
00:21:34,438 --> 00:21:35,690
it anywhere.

328
00:21:38,190 --> 00:21:41,754
So NAs part, I will use the sharding

329
00:21:41,802 --> 00:21:45,822
Sophia on cloud project to do

330
00:21:45,876 --> 00:21:49,214
the demo show and I will use

331
00:21:49,252 --> 00:21:52,814
the helm to deploy the Sharding Sophia cluster and

332
00:21:52,852 --> 00:21:56,306
use the postgresqL chart to deploy the postgresql on

333
00:21:56,328 --> 00:22:00,466
the Kubernetes. If you already have your RDS, then you

334
00:22:00,488 --> 00:22:04,350
can ignore this part and just use sharding Sophia cluster operator

335
00:22:04,430 --> 00:22:07,858
chart to deploy sharding Sophia in the kubernetes

336
00:22:08,034 --> 00:22:12,022
and light the sharding Sophia connect

337
00:22:12,076 --> 00:22:15,602
to your RDS. Then it can help you manage the connection

338
00:22:15,666 --> 00:22:16,920
and do the data.

339
00:22:19,790 --> 00:22:23,514
Yeah, so when you first do the deploy work, the second one

340
00:22:23,552 --> 00:22:27,260
we need to do the work about to create your

341
00:22:27,950 --> 00:22:31,326
databases and sharding table it's not

342
00:22:31,348 --> 00:22:35,354
a single table or standard table in a postgreSQL database.

343
00:22:35,402 --> 00:22:38,746
It's a sharding table. That means this sharding table,

344
00:22:38,858 --> 00:22:43,230
actually it's made up of many

345
00:22:43,380 --> 00:22:47,102
shards or many subtables or many physical

346
00:22:47,166 --> 00:22:50,882
tables. All the subtables located in

347
00:22:50,936 --> 00:22:53,646
different postgresl instance.

348
00:22:53,838 --> 00:22:57,538
But for your application, your application just

349
00:22:57,624 --> 00:23:01,302
visit shorting surface proxy and it thinks that

350
00:23:01,356 --> 00:23:05,014
there's only one logic table named T

351
00:23:05,132 --> 00:23:08,806
user. But actually this t user consists

352
00:23:08,838 --> 00:23:13,286
of 1234 subtables

353
00:23:13,398 --> 00:23:17,190
into two postgresql

354
00:23:17,270 --> 00:23:21,850
instance. But you know, here each PostgreSQl cluster,

355
00:23:21,930 --> 00:23:25,214
it has the primary one and a replica one, right?

356
00:23:25,332 --> 00:23:29,338
So Sharon Sophia will send the queries

357
00:23:29,434 --> 00:23:33,410
to the primary one or replica one in

358
00:23:33,480 --> 00:23:36,562
this cluster. Also if

359
00:23:36,616 --> 00:23:40,014
it found that the data or rows records

360
00:23:40,062 --> 00:23:43,166
existing the cluster

361
00:23:43,278 --> 00:23:46,766
two, I mean the group two, it will send a query

362
00:23:46,878 --> 00:23:50,934
to your postgres cluster two to finish

363
00:23:51,132 --> 00:23:55,314
the routing work and the SQL

364
00:23:55,362 --> 00:23:58,922
parsing work, right? But here, if we want

365
00:23:58,976 --> 00:24:02,522
to define a sharding table, we need to use

366
00:24:02,576 --> 00:24:06,790
this distributed SQL, it's a sharding Sophia

367
00:24:06,950 --> 00:24:09,994
SQL dialect dialect and

368
00:24:10,032 --> 00:24:13,462
to similar with your MySQL

369
00:24:13,526 --> 00:24:16,898
dialect or postgreSQl. It's the Sharding Sophia dialect,

370
00:24:16,934 --> 00:24:19,934
it's a distributed SQL. You can see here,

371
00:24:20,132 --> 00:24:23,614
maybe before you can just use this create a table to create a

372
00:24:23,652 --> 00:24:27,886
single table. But here you need to use a sharding table, similar SQL

373
00:24:27,918 --> 00:24:31,394
language to create a sharding table. And this sharding table, you can

374
00:24:31,432 --> 00:24:36,166
see here the sharding column, it's an order id

375
00:24:36,348 --> 00:24:40,594
and it used the harsh mod strategy

376
00:24:40,722 --> 00:24:43,926
to split one single table into

377
00:24:44,028 --> 00:24:47,698
four one, right. Four subtables, four shards,

378
00:24:47,794 --> 00:24:51,462
right. So if

379
00:24:51,516 --> 00:24:54,826
we finish this dymo and your application

380
00:24:54,928 --> 00:24:58,614
just waited, one of the sharding Sophia proxy and sharding Sophia

381
00:24:58,662 --> 00:25:02,510
will do all of the internal workflow and it will

382
00:25:02,580 --> 00:25:05,854
use the sharding algorithm or strategy to

383
00:25:05,892 --> 00:25:09,930
help you locate the exit

384
00:25:10,010 --> 00:25:15,998
table where your expected

385
00:25:16,174 --> 00:25:18,718
record locate.

386
00:25:18,814 --> 00:25:22,146
Right. And if it found that

387
00:25:22,328 --> 00:25:25,766
it's a select query, it will also

388
00:25:25,868 --> 00:25:29,542
to leverage replica to

389
00:25:29,596 --> 00:25:32,482
send the query to one of the replica.

390
00:25:32,626 --> 00:25:36,070
Therefore you will found the QPs

391
00:25:37,550 --> 00:25:41,322
of this new database system will become higher

392
00:25:41,456 --> 00:25:45,482
because it will automatically do the rewrite splitting such

393
00:25:45,536 --> 00:25:49,114
features. Yeah, so the demo show

394
00:25:49,152 --> 00:25:53,102
will include the following steps and

395
00:25:53,236 --> 00:25:56,334
I do it by myself but actually I have no time

396
00:25:56,372 --> 00:25:59,882
to introduce more. If you have this slides

397
00:25:59,946 --> 00:26:03,970
you can follow my guide and

398
00:26:04,040 --> 00:26:08,050
to do it by yourself. First one,

399
00:26:08,120 --> 00:26:12,446
deploy the cluster by use the Sharding

400
00:26:12,478 --> 00:26:16,494
Sophia proxy charts and then use the distributed

401
00:26:16,542 --> 00:26:20,978
SQL to create the sharding DB sharding table

402
00:26:21,074 --> 00:26:25,106
to make sharding Sophia be aware sharding

403
00:26:25,138 --> 00:26:28,502
Sophia aware of your databases and

404
00:26:28,556 --> 00:26:32,614
then do some acquiring to test it's okay or

405
00:26:32,652 --> 00:26:36,326
not. All right, so that's all about my talk. And if

406
00:26:36,348 --> 00:26:39,734
you really have some questions and we can talk

407
00:26:39,772 --> 00:26:43,146
later, or you can just give me the message on my linking

408
00:26:43,178 --> 00:26:46,686
or GitHub or Twitter. Right? So see

409
00:26:46,708 --> 00:26:47,710
you later on.

