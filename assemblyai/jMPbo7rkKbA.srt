1
00:00:20,170 --> 00:00:23,690
Hi and welcome to this presentation on Webiny,

2
00:00:23,770 --> 00:00:28,082
your opensource foundation for building serverless applications.

3
00:00:28,226 --> 00:00:31,842
My name is Sven and I'm going to guide you through this presentation.

4
00:00:31,986 --> 00:00:35,270
To get started, there's going to be a quick intro about

5
00:00:35,340 --> 00:00:38,502
me and then I'm going to talk about serverless in general.

6
00:00:38,636 --> 00:00:42,234
We can't really talk about Webiny unless we talk

7
00:00:42,272 --> 00:00:46,122
about serverless. And after that I'm going to explain

8
00:00:46,176 --> 00:00:49,514
to you what Webiny is and how it can help you both

9
00:00:49,552 --> 00:00:53,310
as a developer as well as an organization, adopt serverless.

10
00:00:54,610 --> 00:00:59,066
So I'm the founder of the project. I'm a developer

11
00:00:59,258 --> 00:01:02,818
by my background, but I'm also an entrepreneur. You can

12
00:01:02,824 --> 00:01:05,220
find me on Twitter in case you want to connect.

13
00:01:06,630 --> 00:01:09,762
So what is serverless and why

14
00:01:09,816 --> 00:01:13,570
does it matter? Well, serverless for us

15
00:01:13,640 --> 00:01:16,358
developers is going to change many things,

16
00:01:16,444 --> 00:01:19,586
how we build as well as architect applications.

17
00:01:19,778 --> 00:01:23,222
And serverless brings many benefits. First of all,

18
00:01:23,356 --> 00:01:26,674
there's no service for us to manage. Sure there are servers

19
00:01:26,722 --> 00:01:30,246
behind it, but they're abstracted away. We do not access them,

20
00:01:30,268 --> 00:01:33,834
we do not care about them. We do not care about how they scale in

21
00:01:33,872 --> 00:01:37,610
or out, the load balancing the networking in between and all that.

22
00:01:37,760 --> 00:01:41,660
We just deploy our code. But serverless also

23
00:01:43,070 --> 00:01:46,350
the way how we consume services, we pay for what we use

24
00:01:46,420 --> 00:01:49,902
or the other way around, we stop paying for things we do not

25
00:01:49,956 --> 00:01:52,870
use. Today in the traditional infrastructure,

26
00:01:52,970 --> 00:01:56,846
there's so many idle time and underutilized

27
00:01:56,878 --> 00:02:00,660
resources that we're paying with serverless that ACL goes away.

28
00:02:01,590 --> 00:02:05,198
And because there is no infrastructure, we can spend more time

29
00:02:05,304 --> 00:02:09,526
on the actual product. We get faster to the market. And again,

30
00:02:09,628 --> 00:02:12,870
no infrastructure means no scaling headache. That is done

31
00:02:12,940 --> 00:02:15,160
under the hood automatically for us.

32
00:02:16,010 --> 00:02:19,638
Because of these many benefits serverless brings,

33
00:02:19,734 --> 00:02:23,354
many enterprises are adopting serverless today

34
00:02:23,472 --> 00:02:26,886
at a rapid pace and they're reporting back on what they're

35
00:02:26,918 --> 00:02:30,526
seeing in terms of cost. Some enterprises cut their

36
00:02:30,548 --> 00:02:34,446
build by half while others cut their bill by like

37
00:02:34,628 --> 00:02:38,014
60 70, all the way up to 80%,

38
00:02:38,132 --> 00:02:39,790
which is tremendous.

39
00:02:41,890 --> 00:02:46,098
Vinescent serverless allows us to spend less time

40
00:02:46,184 --> 00:02:50,126
worrying about infrastructure, how it works, how it scales,

41
00:02:50,238 --> 00:02:54,082
how to orchestrate it, and gives

42
00:02:54,136 --> 00:02:58,598
us back more time that we can invest on solving business

43
00:02:58,684 --> 00:02:59,320
problems.

44
00:03:01,770 --> 00:03:05,110
But serverless comes with many challenges.

45
00:03:05,530 --> 00:03:09,386
So there was a survey done by O'Reilly on one

46
00:03:09,408 --> 00:03:13,046
gives hundred different organizations on why they haven't

47
00:03:13,078 --> 00:03:16,966
adopting serverless, or if they did, what are the challenges they're facing

48
00:03:17,078 --> 00:03:20,530
and how are they going about adopting serverless?

49
00:03:20,710 --> 00:03:23,680
So if we focus here on the first question,

50
00:03:24,130 --> 00:03:28,400
like why organizations haven't adopted serverless these first two

51
00:03:28,850 --> 00:03:33,014
are tightly coupled. So these are big security concerns.

52
00:03:33,162 --> 00:03:36,558
But those concerns are driven by the fear

53
00:03:36,574 --> 00:03:40,594
of unknown. You can really secure something you

54
00:03:40,632 --> 00:03:44,142
do not understand. And that fear of the unknown

55
00:03:44,206 --> 00:03:47,874
is driven by the lack of experience. Developer teams

56
00:03:47,922 --> 00:03:51,426
have not been exposed to serverless offering

57
00:03:51,458 --> 00:03:55,334
and infrastructure prior, so they do not know how to build

58
00:03:55,452 --> 00:03:58,874
things for serverless and they do not know then how to put these

59
00:03:58,912 --> 00:04:01,260
proper security measurements in place.

60
00:04:02,670 --> 00:04:06,438
Now if an organization has adopting serverless,

61
00:04:06,614 --> 00:04:10,386
the challenge they're facing is educating current staff.

62
00:04:10,518 --> 00:04:13,866
Like maybe there's a small pocket of engineers that has adopted

63
00:04:13,898 --> 00:04:18,206
serverless within that organization, but how do you

64
00:04:18,388 --> 00:04:22,570
educate everybody else? How do you scale that again?

65
00:04:22,660 --> 00:04:25,826
Also how you build your application and how

66
00:04:25,848 --> 00:04:28,850
your application interacts with the serverless infrastructure,

67
00:04:29,350 --> 00:04:33,054
it's often leading to heavy lock in. You can't

68
00:04:33,102 --> 00:04:36,520
really changing your cloud vendor which can be a negative thing.

69
00:04:37,130 --> 00:04:39,960
And because serverless has many services,

70
00:04:40,650 --> 00:04:44,690
these requests go through many different jumps

71
00:04:44,770 --> 00:04:48,586
and contact many different services along the way. It's super hard to

72
00:04:48,608 --> 00:04:51,866
test and debug all that. And on the

73
00:04:51,888 --> 00:04:56,006
last one, how do organizations build serverless applications

74
00:04:56,038 --> 00:04:59,594
today? By far they are

75
00:04:59,632 --> 00:05:03,182
building custom tooling. So if you go back to that

76
00:05:03,236 --> 00:05:06,638
benefit, that serverless actually cuts down the development time.

77
00:05:06,804 --> 00:05:10,186
It does in the fact that it reduces the overhead

78
00:05:10,218 --> 00:05:12,890
that infrastructure management brings.

79
00:05:13,050 --> 00:05:16,290
But what you've saved there

80
00:05:16,440 --> 00:05:20,306
you're going to usually removes here. So it's not

81
00:05:20,328 --> 00:05:23,780
going to be a big benefit at the end of the day potentially for you.

82
00:05:24,470 --> 00:05:27,942
And that's where Webiny comes in. Webiny is

83
00:05:27,996 --> 00:05:31,446
can open source project and we like to say that Webiny is the

84
00:05:31,468 --> 00:05:34,694
easiest way to adopting serverless. So to

85
00:05:34,732 --> 00:05:38,042
explain where Webiny sits, I'm going to focus

86
00:05:38,096 --> 00:05:41,866
on this image here. It's essentially an illustration of

87
00:05:41,888 --> 00:05:45,834
your application stack. At the bottom of your stack you have

88
00:05:45,872 --> 00:05:49,158
your infrastructure providers, your clouds, AWS,

89
00:05:49,254 --> 00:05:51,520
GCP and Azure for example.

90
00:05:52,210 --> 00:05:55,614
Then you have tools and third parties that

91
00:05:55,652 --> 00:05:59,566
you use for deployment monitoring that can be anything from

92
00:05:59,588 --> 00:06:03,462
serverless framework to AWS cloud formation

93
00:06:03,546 --> 00:06:07,378
to Lumigo for monitoring or thunder similar things.

94
00:06:07,544 --> 00:06:10,882
However, these guys here, they do not help

95
00:06:10,936 --> 00:06:14,974
you build your application. They help you orchestrate

96
00:06:15,022 --> 00:06:18,834
and monitor. But when it comes to actually building it, that's where

97
00:06:18,872 --> 00:06:22,386
Webiny is. Webiny sits on the application layer and Webiny

98
00:06:22,418 --> 00:06:25,954
provides many different components to help you build a serverless

99
00:06:26,002 --> 00:06:29,526
application and in general adopt serverless. I'm going to dive

100
00:06:29,638 --> 00:06:32,490
a bit more into them in the upcoming slides.

101
00:06:34,110 --> 00:06:38,406
Webiny in terms of how you build things with Webiny,

102
00:06:38,438 --> 00:06:42,074
how Webiny was built, we are pretty much on the JavaScript stack,

103
00:06:42,122 --> 00:06:46,334
so we use node on the backend and react on the front end.

104
00:06:46,532 --> 00:06:50,286
We also use a GraphQL API layer in

105
00:06:50,308 --> 00:06:53,822
terms of a database. Webiny today runs on MongoDB,

106
00:06:53,886 --> 00:06:57,646
Atlas in particular, but we have an abstraction layer

107
00:06:57,678 --> 00:07:01,410
in how we interact with databases and are already working on

108
00:07:01,480 --> 00:07:04,786
adding more databases. The first one on

109
00:07:04,808 --> 00:07:08,534
our list at the moment is Dynamodb. It's going to hopefully come

110
00:07:08,572 --> 00:07:12,498
in the upcoming weeks or months and Webiny

111
00:07:12,514 --> 00:07:16,258
is also designed to work on multiple clouds.

112
00:07:16,434 --> 00:07:20,554
To date runs on AWS, but again there are layers already in

113
00:07:20,592 --> 00:07:24,134
place and later on we plan to add GCP and Azure

114
00:07:24,182 --> 00:07:28,314
to the list. So to

115
00:07:28,352 --> 00:07:31,974
emphasize webinar is fully free and open source.

116
00:07:32,102 --> 00:07:35,758
We got an amazing community of people contributing to the project

117
00:07:35,844 --> 00:07:39,278
and I want to just give a shout but to them and thank them.

118
00:07:39,364 --> 00:07:42,834
And I also want to invite new members. So if you like what we're doing

119
00:07:42,872 --> 00:07:46,274
here with Webiny and want to be part of it, welcome to join. We would

120
00:07:46,312 --> 00:07:48,180
be super happy to have you.

121
00:07:49,670 --> 00:07:53,090
Now as our mission is it's

122
00:07:53,910 --> 00:07:57,014
ACl about empowering developers as well

123
00:07:57,052 --> 00:08:00,790
as organizations to create serverless application in general.

124
00:08:00,940 --> 00:08:05,014
Adopt serverless. So how

125
00:08:05,052 --> 00:08:09,478
do we go about that? There are a couple of parts to Webiny.

126
00:08:09,654 --> 00:08:12,826
First of all, we have a webframework that is the

127
00:08:12,848 --> 00:08:16,186
code, that is the main product we have. It's all

128
00:08:16,208 --> 00:08:19,850
about creating and deploying serverless applications with ease.

129
00:08:20,270 --> 00:08:23,306
Then we have an admin UI which you

130
00:08:23,328 --> 00:08:26,480
can use if you want an out of the box front end,

131
00:08:27,170 --> 00:08:30,474
and then you can pretty much just register your modules

132
00:08:30,522 --> 00:08:33,694
and quickly build additional

133
00:08:33,822 --> 00:08:37,902
interfaces for your business logic for your applications.

134
00:08:38,046 --> 00:08:41,650
Webiny also provides you several readymade applications out of the box.

135
00:08:41,720 --> 00:08:45,178
So besides the foundation for building serverless

136
00:08:45,374 --> 00:08:48,786
applications, we actually took the foundation and built several applications

137
00:08:48,818 --> 00:08:52,854
on top, ensuring that we

138
00:08:52,892 --> 00:08:56,310
have a product that can suit multiple use cases.

139
00:08:56,810 --> 00:08:59,914
Finally, Webiny provides you documentation. It's all about

140
00:08:59,952 --> 00:09:03,414
guides, tutorials, reference manuals, so you can educate

141
00:09:03,462 --> 00:09:07,606
yourself and team members on how to actually consume webiny.

142
00:09:07,798 --> 00:09:10,540
Now I'm going to dive a bit deeper into each of these.

143
00:09:11,470 --> 00:09:14,894
So in terms of the framework, there are a couple of

144
00:09:14,932 --> 00:09:18,094
components to it. First of all, there's a command line interface that we

145
00:09:18,132 --> 00:09:22,566
have, and that interface helps you deploy applications

146
00:09:22,618 --> 00:09:26,226
to the serverless infrastructure. It has a

147
00:09:26,248 --> 00:09:29,902
support for multiple environments so you can have pre prod

148
00:09:29,966 --> 00:09:33,506
prod changing and so on. Then we have a

149
00:09:33,528 --> 00:09:37,138
GraphQL API layer that's part of the framework. It's powered

150
00:09:37,154 --> 00:09:40,726
by Apollo Federation, figuring that you can kind

151
00:09:40,748 --> 00:09:44,102
of have microservices that each

152
00:09:44,156 --> 00:09:47,446
microservice exposes its own schema and

153
00:09:47,468 --> 00:09:52,006
then these Apollo Federation kind of merges all together and exposes one single endpoint

154
00:09:52,118 --> 00:09:55,530
to the end consumer. It's all done automatically for you.

155
00:09:55,680 --> 00:09:59,130
And these, there's a ton more right from

156
00:09:59,200 --> 00:10:03,142
routing to server side rendering,

157
00:10:03,206 --> 00:10:06,622
access control, CI CD support. So many

158
00:10:06,676 --> 00:10:11,022
things are a part of our framework, but people

159
00:10:11,076 --> 00:10:14,514
often take these things for granted and

160
00:10:14,552 --> 00:10:18,174
think like, oh, I'm just going to do it myself in the serverless environment.

161
00:10:18,222 --> 00:10:21,650
But these things work quite differently inside

162
00:10:21,720 --> 00:10:25,394
the serverless infrastructure than how they

163
00:10:25,432 --> 00:10:29,330
work on a typical virtual machine or a container.

164
00:10:30,470 --> 00:10:33,714
Now, as a second bit that webinar provides,

165
00:10:33,762 --> 00:10:37,074
I mentioned the admin UI. So the admin

166
00:10:37,122 --> 00:10:41,018
UI, you can see like a screenshot of it here. It's all built

167
00:10:41,104 --> 00:10:44,502
using a set of reusable react components,

168
00:10:44,646 --> 00:10:48,410
and you can use those same components to build

169
00:10:48,560 --> 00:10:52,458
your interfaces, but you do not need to. You can use only the webiny

170
00:10:52,554 --> 00:10:56,046
backend side, but those react components, there's a

171
00:10:56,148 --> 00:10:59,226
significant library of them from buttons,

172
00:10:59,338 --> 00:11:02,410
tabs, accordions, drop downs.

173
00:11:02,490 --> 00:11:06,114
You get a whole set there and it will cut down your

174
00:11:06,152 --> 00:11:09,458
development time significantly. And also, if you

175
00:11:09,464 --> 00:11:12,866
look at the screenshot here, everything you see is actually a

176
00:11:12,888 --> 00:11:16,274
plugin in these admin interface, like this menu is a plugin,

177
00:11:16,322 --> 00:11:19,606
this logo is a plugin, and each plugin you

178
00:11:19,628 --> 00:11:22,358
can changing, you can turn on or off.

179
00:11:22,524 --> 00:11:26,086
Essentially you have full control of everything

180
00:11:26,188 --> 00:11:29,546
you see here and you can change it

181
00:11:29,568 --> 00:11:33,894
to fit your need without the need to do any hacks or bend

182
00:11:33,942 --> 00:11:37,014
the system to your will. It's designed to be changing

183
00:11:37,062 --> 00:11:40,714
and extended. And the most important feature of

184
00:11:40,752 --> 00:11:44,622
all, webiny has a dark mode. So a lot of users actually

185
00:11:44,676 --> 00:11:46,400
are happy about that one.

186
00:11:47,970 --> 00:11:51,962
Finally, what I'm going to mention in bit more detail are the webiny apps.

187
00:11:52,026 --> 00:11:55,682
We've got a couple of applications. So here we have a page

188
00:11:55,736 --> 00:11:58,814
builder which is designed to build serverless landing pages.

189
00:11:58,862 --> 00:12:03,262
Essentially a drag and drop tool where you drag and drop react components,

190
00:12:03,406 --> 00:12:07,186
but to emphasize the fact that those are react components,

191
00:12:07,218 --> 00:12:10,114
not static HTML snippets,

192
00:12:10,242 --> 00:12:13,286
meaning that you can drag and drop business logic. You can build your

193
00:12:13,308 --> 00:12:17,238
own widgets, components and business dashboards using this tool. It's quite

194
00:12:17,324 --> 00:12:20,220
powerful in the way how you can extend it.

195
00:12:21,230 --> 00:12:25,034
These you can also build forms, drag and drop interface for

196
00:12:25,072 --> 00:12:28,934
building forms which are also fully mobile responsive. There are triggers,

197
00:12:28,982 --> 00:12:32,286
webhooks, exports, a lot of

198
00:12:32,308 --> 00:12:36,026
features are there. And once you build a form, you can use the page builder

199
00:12:36,058 --> 00:12:40,174
to then drag and drop a specific form into particular

200
00:12:40,292 --> 00:12:44,126
page. We also have a way to

201
00:12:44,148 --> 00:12:47,390
manage files. You can upload any type of a file,

202
00:12:47,550 --> 00:12:51,966
but if you upload an image, there's also an added processing pipeline

203
00:12:51,998 --> 00:12:55,214
that's going to create thumbnails, resize the image to any dimension

204
00:12:55,262 --> 00:12:58,518
you need it. And there's a built in image editor so you

205
00:12:58,524 --> 00:13:01,910
can crop, rotate, resize images on flight right

206
00:13:01,980 --> 00:13:06,450
away from the interface. And again, this all runs on top of serverless infrastructure,

207
00:13:06,530 --> 00:13:10,170
so it can scale and handle big amounts of data without

208
00:13:10,240 --> 00:13:13,980
the need for you to do anything. It's out of the box.

209
00:13:14,910 --> 00:13:18,650
And finally, I want to mention one of our last

210
00:13:18,720 --> 00:13:22,634
applications, which is a headless CMS. So it's a full on graphql

211
00:13:22,682 --> 00:13:26,506
based headless CMS. Content modeling supports multi

212
00:13:26,538 --> 00:13:30,522
language, you can have multiple environments, environment aliases,

213
00:13:30,586 --> 00:13:33,150
it integrates also with the file manager.

214
00:13:33,510 --> 00:13:37,182
So you can quickly bootstrap an API

215
00:13:37,246 --> 00:13:41,266
for your next project with this. And it's going to run using

216
00:13:41,368 --> 00:13:44,222
serverless infrastructure, massive scale,

217
00:13:44,286 --> 00:13:47,720
but if it's idle, you won't pay a dime for it.

218
00:13:50,010 --> 00:13:52,914
And going back to those serverless challenges,

219
00:13:53,042 --> 00:13:56,454
so how Webny addresses them. So you can see

220
00:13:56,492 --> 00:14:00,458
here, because Webiny removes the fear of the unknown, it's a

221
00:14:00,544 --> 00:14:03,894
deterministic platform, you know how it behaves,

222
00:14:03,942 --> 00:14:07,414
you know what are the access endpoints,

223
00:14:07,542 --> 00:14:11,280
how the requests are routed. You can

224
00:14:11,650 --> 00:14:15,642
be certain that you have a good understanding

225
00:14:15,706 --> 00:14:18,990
of it. And because you have that now,

226
00:14:19,060 --> 00:14:22,938
you can put proper security in place.

227
00:14:23,124 --> 00:14:27,106
So it solves pretty much top two points here. When it

228
00:14:27,128 --> 00:14:29,934
comes to the challenges after adopting,

229
00:14:30,062 --> 00:14:33,598
because Webiny comes with the documentation, the gives

230
00:14:33,694 --> 00:14:37,634
tutorials, it educates your staff, your staff

231
00:14:37,682 --> 00:14:41,426
has everything they need. On our documentation portal,

232
00:14:41,618 --> 00:14:45,554
as I mentioned, Webiny has abstraction layers towards cloud providers.

233
00:14:45,682 --> 00:14:48,890
So a vendor lock in is something that's

234
00:14:49,390 --> 00:14:52,922
an inherited feature of the platform that just

235
00:14:52,976 --> 00:14:56,746
goes away for you. And the fact that you need to test and

236
00:14:56,768 --> 00:15:00,026
debug Webiny has built in processes for that,

237
00:15:00,128 --> 00:15:03,070
it makes it really easy for you to do.

238
00:15:03,220 --> 00:15:06,826
Finally, how you build serverless applications we eliminate

239
00:15:06,858 --> 00:15:10,480
the need for custom tooling. Webiny has can end to end

240
00:15:11,330 --> 00:15:14,994
list of features that it offers you. So you do not need

241
00:15:15,032 --> 00:15:18,610
to reinvent the wheel, you do not need to build new tooling.

242
00:15:20,630 --> 00:15:24,018
And with Webiny you can build many different things

243
00:15:24,104 --> 00:15:28,182
from websites to APIs to applications in

244
00:15:28,236 --> 00:15:32,486
general, any type of a microservice to

245
00:15:32,508 --> 00:15:35,922
finish off. Again, everything I've presented

246
00:15:35,986 --> 00:15:38,310
here is fully opensource.

247
00:15:39,870 --> 00:15:43,500
Webiny is licensed under the MIT license and

248
00:15:43,870 --> 00:15:48,054
you can check out the full source code with all the details

249
00:15:48,102 --> 00:15:51,706
on our GitHub. And we would like love. If you would go there

250
00:15:51,728 --> 00:15:54,800
and give us any feedback on how we can improve the product.

251
00:15:55,330 --> 00:15:58,574
For any kind of additional information, you can find them on

252
00:15:58,612 --> 00:16:02,480
our website. I really hope you enjoyed this platform.

253
00:16:03,010 --> 00:16:06,762
You can reach us as a team on Twitter.

254
00:16:06,826 --> 00:16:10,206
You can reach me directly in case you have any questions. We're more

255
00:16:10,228 --> 00:16:12,800
than happy to assist you. Thank you.

