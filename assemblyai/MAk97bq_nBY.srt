1
00:00:38,930 --> 00:00:42,738
Hey everyone, I'm Daniel, VP of engineering at Checkly.

2
00:00:42,914 --> 00:00:46,326
In my talk today, going from quarterly releases to weekly in a

3
00:00:46,348 --> 00:00:50,254
small startup company, I would like to take

4
00:00:50,292 --> 00:00:53,534
you back through my experiences of being in

5
00:00:53,572 --> 00:00:57,246
situations where my DevOps maturity wasn't always the way I wanted it to

6
00:00:57,268 --> 00:01:00,698
be and give you a blueprint with concrete steps

7
00:01:00,874 --> 00:01:04,994
how you can come out of those situations as a winner and take your

8
00:01:05,032 --> 00:01:07,650
team or organization to high DevOps maturity.

9
00:01:09,750 --> 00:01:12,994
I'm happy to say that at checkly so where I work today,

10
00:01:13,112 --> 00:01:17,026
we are already there. We are a Dora elite performer. We deploy multiple

11
00:01:17,058 --> 00:01:20,630
times a day without any incidents normally,

12
00:01:21,690 --> 00:01:24,806
and we have a very fast lead time. So the

13
00:01:24,828 --> 00:01:28,486
talk is mostly about my past experiences, really where I

14
00:01:28,508 --> 00:01:32,326
saw the immense value of synthetic monitoring to get you out of firefighting

15
00:01:32,358 --> 00:01:36,106
into high DevOps maturity as a driver. And also

16
00:01:36,208 --> 00:01:39,594
to be honest, this was part of why I joined checkly because I

17
00:01:39,632 --> 00:01:42,080
immediately saw the value proposition back then.

18
00:01:43,490 --> 00:01:47,066
But still today I use the dorometrics as an engineering leader

19
00:01:47,098 --> 00:01:50,666
to make engineering decisions so we can stay sharp

20
00:01:50,698 --> 00:01:54,722
as an engineering organization before

21
00:01:54,776 --> 00:01:58,718
we start. I think still, and I think I'm

22
00:01:58,734 --> 00:02:02,466
going to emphasize this more and more as

23
00:02:02,488 --> 00:02:05,858
a technical leader. I think the door metrics are very relevant as a

24
00:02:05,864 --> 00:02:09,000
tool and you should think about them now and then.

25
00:02:10,890 --> 00:02:14,582
I was working in a startup, for example, where I decided to take my team

26
00:02:14,636 --> 00:02:18,726
from manual, error prone monthly or quarterly releases

27
00:02:18,918 --> 00:02:23,100
to stable weekly deploys in weeks rather than months.

28
00:02:23,470 --> 00:02:27,530
And this is of course important because DevOps work always

29
00:02:27,600 --> 00:02:31,434
comes with opportunity cost. So you will have to convince some

30
00:02:31,472 --> 00:02:34,942
business thinking manager that this is where you should invest time,

31
00:02:34,996 --> 00:02:38,346
where you're not fixing bugs and you're not shipping features, but you're

32
00:02:38,378 --> 00:02:41,566
making your organization quicker and faster. So let

33
00:02:41,588 --> 00:02:45,540
me show you how I did it and increased that velocity by 70%

34
00:02:46,070 --> 00:02:50,610
along the way in a roughly 40 people engineering team startup

35
00:02:52,550 --> 00:02:56,146
Dora metrics recap so for those of you who have never

36
00:02:56,168 --> 00:02:59,506
heard of the term or maybe need a reminder, what are the

37
00:02:59,528 --> 00:03:03,654
dorometrics? So the first one is lead time for changes. So this means

38
00:03:03,692 --> 00:03:06,854
the amount of time it takes for code to get from idea to

39
00:03:06,892 --> 00:03:10,934
production, which is very important. Then it is deployment

40
00:03:10,982 --> 00:03:14,646
frequency. So how often do you deploys? And good organizations

41
00:03:14,678 --> 00:03:18,794
deploy multiple times per day time

42
00:03:18,832 --> 00:03:22,046
to restore service. You have an incident, how long does

43
00:03:22,068 --> 00:03:25,886
it take you to recover from a failure? And the last one

44
00:03:25,988 --> 00:03:30,350
change failure rate, the percentage of deployments causing a failure in production.

45
00:03:30,770 --> 00:03:34,402
Why I like these metrics and why I think you should use them is

46
00:03:34,456 --> 00:03:36,340
because they're not easy to game.

47
00:03:37,510 --> 00:03:41,106
Normally, if you only pick one metric, it's easy to

48
00:03:41,128 --> 00:03:44,862
game it and have a useless measurement. So oftentimes

49
00:03:44,926 --> 00:03:48,726
I hear people only talk about deploy frequency and that alone is not

50
00:03:48,748 --> 00:03:52,582
good enough because just deploying stuff quickly doesn't really

51
00:03:52,636 --> 00:03:56,406
tell you anything about how good your team is. It could be that you're just

52
00:03:56,428 --> 00:04:00,002
deploying version updates or dependable merges frequently,

53
00:04:00,066 --> 00:04:03,386
but it doesn't say anything about lead time. So how long does it take

54
00:04:03,408 --> 00:04:06,922
me from Jira ticket to production, from code commit to being

55
00:04:06,976 --> 00:04:10,810
live? Does every deploy cause an incident

56
00:04:11,150 --> 00:04:14,686
or introduce new bugs? That's also not great. You might be

57
00:04:14,708 --> 00:04:17,902
shipping very quickly, but then you're introducing bugs the same

58
00:04:17,956 --> 00:04:21,166
speed, which of course is nothing that you would like. So I think the

59
00:04:21,188 --> 00:04:24,594
metrics encompass DevOps maturity quite

60
00:04:24,632 --> 00:04:28,018
well, and they can be absolutely used as a tool to assess yourself

61
00:04:28,104 --> 00:04:30,260
and know where to go.

62
00:04:31,910 --> 00:04:35,506
By the way, I made a bold claim saying that

63
00:04:35,608 --> 00:04:39,126
I was able to increase velocity by 70%. How do

64
00:04:39,148 --> 00:04:43,030
I know? Well, in one startup that I worked at,

65
00:04:43,180 --> 00:04:47,186
a program manager was so kind to actually measure this using Jira

66
00:04:47,218 --> 00:04:52,140
and GitHub metrics, and you can see that

67
00:04:53,230 --> 00:04:57,274
I am being absolutely truthful here. This is what happened. Just by

68
00:04:57,312 --> 00:05:01,306
implementing the following blueprint, we were able to speed up engineering

69
00:05:01,338 --> 00:05:04,686
velocity significantly. And I

70
00:05:04,708 --> 00:05:07,760
think you'll be able to depending on where you are right now.

71
00:05:10,370 --> 00:05:13,922
My question of course, you might have been in different

72
00:05:13,976 --> 00:05:18,370
companies, and I wonder, have you ever been in those retrospectives?

73
00:05:18,870 --> 00:05:22,274
Right? So where you had these blockers or

74
00:05:22,312 --> 00:05:25,060
impediments visible on your board,

75
00:05:25,930 --> 00:05:29,382
the system is too complex and brittle. We don't know where to make

76
00:05:29,436 --> 00:05:33,426
changes. Manual QA is slowing

77
00:05:33,458 --> 00:05:36,886
us down. Deploys take days.

78
00:05:37,068 --> 00:05:40,794
We need a slack channel to coordinate them. We have little to no

79
00:05:40,832 --> 00:05:44,326
test automation or the DevOps team is constantly busy

80
00:05:44,358 --> 00:05:47,670
with their work and the dependency on them makes us slow.

81
00:05:47,830 --> 00:05:51,366
And then you might see action items that might solve

82
00:05:51,398 --> 00:05:54,686
one problem. But it's not quite a systemic approach that will get you

83
00:05:54,708 --> 00:05:58,206
out of the mess, right? So we can rewrite the service to

84
00:05:58,228 --> 00:06:01,438
make it less complex in maybe a new programming language, and it

85
00:06:01,444 --> 00:06:04,734
will be faster with all the things we have learned.

86
00:06:04,782 --> 00:06:08,766
It might be a nicer architecture. We might reduce

87
00:06:08,798 --> 00:06:12,386
the deploy frequency, right? Like maybe let's deploy quarterly and not

88
00:06:12,408 --> 00:06:15,714
monthly, because deploying is expensive. It takes three days and people

89
00:06:15,752 --> 00:06:19,202
need to coordinate on it. Let's introduce a meeting

90
00:06:19,266 --> 00:06:21,510
to organize cross team dependencies,

91
00:06:22,330 --> 00:06:25,654
because we have a lot of them and they need to be managed. And I

92
00:06:25,692 --> 00:06:29,580
guarantee you none of these measures will get you out of your DevOps hell.

93
00:06:33,070 --> 00:06:36,758
But don't despair. Use DevOps

94
00:06:36,774 --> 00:06:40,714
to guide your actions. There are a couple of things you

95
00:06:40,752 --> 00:06:44,880
can do and a couple of actions you can take that will improve things.

96
00:06:45,410 --> 00:06:48,862
Of course, and make no mistake, this will be a tough journey and

97
00:06:48,916 --> 00:06:51,760
many people will have to be convinced on the way.

98
00:06:53,730 --> 00:06:57,282
I think this is something that is dear to my heart and so I

99
00:06:57,336 --> 00:07:01,154
took an extra slide to talk just about this. A few

100
00:07:01,192 --> 00:07:04,066
words on culture and change management in general.

101
00:07:04,248 --> 00:07:08,338
Over my years I had to implement

102
00:07:08,514 --> 00:07:12,134
change and modify processes and the way that

103
00:07:12,172 --> 00:07:14,120
people worked quite often.

104
00:07:15,050 --> 00:07:18,194
And I can tell you from introducing agile

105
00:07:18,242 --> 00:07:21,638
to a team who has never worked with anything like it,

106
00:07:21,804 --> 00:07:25,274
to introducing DevOps maturity to a startup that

107
00:07:25,312 --> 00:07:28,602
has high time pressure to deliver things and

108
00:07:28,656 --> 00:07:32,426
no time for DevOps. It can be challenging,

109
00:07:32,618 --> 00:07:35,360
but the following patterns always work.

110
00:07:36,050 --> 00:07:40,254
So if you want to introduce a new process

111
00:07:40,372 --> 00:07:43,920
or a new way of working, first of all, you have to understand

112
00:07:44,450 --> 00:07:47,762
why things are the way they are. So you should never

113
00:07:47,816 --> 00:07:51,758
judge anyone based on how things are right. People came to decisions

114
00:07:51,774 --> 00:07:55,540
and conclusions and they made sense at the time. That doesn't mean that they're wrong.

115
00:07:55,990 --> 00:07:59,330
You know, a way to improve stuff, but you should have the patience

116
00:07:59,410 --> 00:08:02,966
to listen and to understand why people are where they are and you

117
00:08:02,988 --> 00:08:06,566
need to take them seriously, even if you think they

118
00:08:06,588 --> 00:08:09,994
are doing some things very wrong. And then

119
00:08:10,032 --> 00:08:13,434
the next step is you have to explain the purpose and get

120
00:08:13,472 --> 00:08:16,794
buy in from people. They need to hear it often. Why are we

121
00:08:16,832 --> 00:08:20,934
doing this? Why do we suddenly need to write tests?

122
00:08:20,982 --> 00:08:24,534
Why do we suddenly have a CI? Why does it need to be automated?

123
00:08:24,662 --> 00:08:27,390
Why do we need to deploys so often? I mean, it's not even done.

124
00:08:27,460 --> 00:08:30,702
No changes were made. Why do we need to deploy? All of these

125
00:08:30,756 --> 00:08:33,598
questions might come up and you need to be ready,

126
00:08:33,764 --> 00:08:37,634
able and patient enough to discuss them and remind people often enough that

127
00:08:37,672 --> 00:08:41,314
this is what you need. And if you do this in the end,

128
00:08:41,432 --> 00:08:45,038
some people might leave during the process. They might not like the new changes that

129
00:08:45,064 --> 00:08:48,374
you're introducing. But eventually you will win over most

130
00:08:48,412 --> 00:08:50,790
people's hearts by being successful.

131
00:08:51,850 --> 00:08:55,554
So, so much for the general introduction.

132
00:08:55,682 --> 00:08:59,146
Now let's go with the concrete steps. I have

133
00:08:59,168 --> 00:09:03,034
organized those by difficulty level. So we are going from

134
00:09:03,072 --> 00:09:06,666
easy to medium to hard concrete steps to

135
00:09:06,688 --> 00:09:09,980
take tech easy first.

136
00:09:10,590 --> 00:09:13,726
And of course this depends on where you are now, but this is

137
00:09:13,748 --> 00:09:17,280
a blueprint, right? So not everything might apply to your concrete situation.

138
00:09:17,730 --> 00:09:21,322
First, convince developers to build CI pipelines

139
00:09:21,386 --> 00:09:24,718
on GitHub. Actions are similar. Maybe there's already a company Jenkins that

140
00:09:24,724 --> 00:09:28,638
you can use. Maybe you have a GitHub account that's not being used properly.

141
00:09:28,814 --> 00:09:32,094
There are usually multiple options. Or you can grab a free GitHub actions

142
00:09:32,142 --> 00:09:34,770
account if you don't have any better solution.

143
00:09:35,450 --> 00:09:38,434
But this is important. You need CI.

144
00:09:38,562 --> 00:09:42,550
The software needs to be built, tested and

145
00:09:42,700 --> 00:09:46,246
sometimes just running it on the CI, just starting the application

146
00:09:46,348 --> 00:09:49,670
is already better than nothing to make sure that it works.

147
00:09:49,820 --> 00:09:53,334
And you will see that automation of course is key for cycle time. And cycle

148
00:09:53,382 --> 00:09:56,858
time is important because it impacts lead time. So one of

149
00:09:56,864 --> 00:10:00,446
our big dorometrics that we want to improve. And then

150
00:10:00,468 --> 00:10:04,122
of course this is a general advice. Simplify, simplify,

151
00:10:04,266 --> 00:10:06,830
simplify and again, simplify.

152
00:10:07,330 --> 00:10:10,714
Carelessly introduced complexity is the root of all evil.

153
00:10:10,762 --> 00:10:14,274
I am very convinced of that. Reduce the amount of branches that people

154
00:10:14,312 --> 00:10:18,510
use, delete unused code, remove unused dependencies.

155
00:10:18,590 --> 00:10:22,194
You can already start with that and you will make everything way less complex and

156
00:10:22,232 --> 00:10:23,460
easier to understand.

157
00:10:25,610 --> 00:10:29,346
Concrete steps to take tech easy. Number two, use synthetic

158
00:10:29,378 --> 00:10:32,934
monitoring. It is perfect for such a scenario to

159
00:10:32,972 --> 00:10:36,486
get you out of firefighting. Why is that?

160
00:10:36,668 --> 00:10:39,958
Because what it essentially is, it is taking

161
00:10:40,044 --> 00:10:43,322
end to end tests. And maybe you already even have them,

162
00:10:43,376 --> 00:10:46,982
right? So an end to end test that will use critical

163
00:10:47,046 --> 00:10:50,460
flows in your web applications as your users would do.

164
00:10:50,990 --> 00:10:54,522
It will log into the application, as you can see on the screenshot,

165
00:10:54,666 --> 00:10:58,478
log into the application and do something that is relevant. Create a

166
00:10:58,484 --> 00:11:01,200
document, buy something from the store,

167
00:11:01,970 --> 00:11:05,358
read important data, open a list of users,

168
00:11:05,534 --> 00:11:08,786
whatever it is that is important to your application. End to

169
00:11:08,808 --> 00:11:12,690
end tests can do that, and they can do it as

170
00:11:12,760 --> 00:11:15,940
synthetic users. So the moment you break it,

171
00:11:16,870 --> 00:11:20,694
you will know my application is broken. And now the cool thing is

172
00:11:20,812 --> 00:11:24,178
you can set this up in days. Building end to end tests

173
00:11:24,194 --> 00:11:27,478
and running them on a schedule is something that doesn't take long.

174
00:11:27,564 --> 00:11:30,474
It gives you amazing coverage over the whole application,

175
00:11:30,672 --> 00:11:33,994
and it gives you back the focus that you need to

176
00:11:34,032 --> 00:11:37,210
boost our metrics and get to high DevOps maturity.

177
00:11:37,950 --> 00:11:41,974
In the example screenshot, you can see something was apparently deployed

178
00:11:42,022 --> 00:11:45,914
that broke the login. You immediately know you have a strong signal,

179
00:11:45,962 --> 00:11:49,646
you know, oh no, the login is broken. We need to roll back.

180
00:11:49,828 --> 00:11:53,630
And so synthetic monitoring for me was the vital foundation

181
00:11:53,710 --> 00:11:56,260
of making the DevOps transformation work.

182
00:11:57,590 --> 00:12:01,186
Concrete steps to take tech medium. So now that

183
00:12:01,208 --> 00:12:04,482
we have the synthetic monitoring in place to really

184
00:12:04,616 --> 00:12:08,114
have us safe when we make changes, because we will immediately

185
00:12:08,162 --> 00:12:10,920
know when we break core flows through the application,

186
00:12:11,530 --> 00:12:15,494
it's time to also startup automating deployment. If it's not

187
00:12:15,532 --> 00:12:19,426
already there, because manually coordinated

188
00:12:19,458 --> 00:12:23,142
deploys, it's just not a good process. It needs to be automated,

189
00:12:23,206 --> 00:12:26,426
it needs to be repeatable so you

190
00:12:26,448 --> 00:12:30,166
can do it more and more often and therefore tune the second door

191
00:12:30,198 --> 00:12:33,978
metric which is deploy frequency. It is very important to being able to deploys

192
00:12:34,074 --> 00:12:38,522
because it also means you can roll back when something questionable or problematic

193
00:12:38,586 --> 00:12:42,234
happens. And of course introduce zero downtime

194
00:12:42,282 --> 00:12:46,206
deployable services if you don't already have them everywhere. So remove

195
00:12:46,318 --> 00:12:49,618
state from rest APIs, remove state from services

196
00:12:49,704 --> 00:12:52,974
if you can, and make them zero downtime

197
00:12:53,022 --> 00:12:56,290
deployable if needed. For the business, I can definitely

198
00:12:56,360 --> 00:13:00,146
see scenarios where some servers don't have to be zero downtime

199
00:13:00,178 --> 00:13:03,942
deployable. Maybe it's fine for them to be offline for 2 seconds, or maybe

200
00:13:03,996 --> 00:13:07,240
to be down on weekends. This depends on the business.

201
00:13:08,010 --> 00:13:11,706
But for those services, like an API, we need to run all

202
00:13:11,728 --> 00:13:15,386
the time. Make sure you make them zero downtime deployable if they're not

203
00:13:15,408 --> 00:13:18,986
already, so you can deploy them often. And of

204
00:13:19,008 --> 00:13:22,530
course simplify, simplify, simplify. Carelessly introduced

205
00:13:22,550 --> 00:13:26,874
complexity is the root of all evil. Remove redundant dependencies

206
00:13:26,922 --> 00:13:30,862
now maybe you have two libraries doing the same thing, or maybe the

207
00:13:30,916 --> 00:13:34,642
standard library of whatever ecosystem you're using already has that feature now,

208
00:13:34,776 --> 00:13:39,502
so you can remove the dependency and thereby reduce complexity.

209
00:13:39,646 --> 00:13:43,406
Update versions delete unused configurations delete unused

210
00:13:43,438 --> 00:13:47,126
feature flags. It will make it so much easier to build deployment if you

211
00:13:47,148 --> 00:13:50,520
know what configuration options actually do and which ones are used,

212
00:13:51,770 --> 00:13:56,066
and then tech hard simplify

213
00:13:56,258 --> 00:14:00,442
again. Simplify. Merge code bases why

214
00:14:00,496 --> 00:14:03,754
is this code split up into 15 repositories? So you

215
00:14:03,792 --> 00:14:07,574
suddenly need to do 15 prs, 15 merges, 15 CI

216
00:14:07,622 --> 00:14:10,966
runs, update dependencies somewhere. It's just

217
00:14:11,008 --> 00:14:14,942
needlessly complex. You can probably merge it into one or

218
00:14:14,996 --> 00:14:18,414
maybe a few code bases. Are there any

219
00:14:18,452 --> 00:14:22,110
services that might be redundant or not even used? Remove them

220
00:14:22,180 --> 00:14:26,306
right? Be bold. You can merge them into one and maybe be

221
00:14:26,328 --> 00:14:30,110
a little more monolithic if you don't really need all of those microservices

222
00:14:30,190 --> 00:14:33,090
because they increase load and system complexity.

223
00:14:33,750 --> 00:14:36,310
Remove any DevOps over engineering.

224
00:14:37,050 --> 00:14:40,994
Maybe you don't need an EBS blob storage mounted

225
00:14:41,042 --> 00:14:45,286
into a service, maybe s three is good enough. Or maybe you can use a

226
00:14:45,468 --> 00:14:48,760
hosted database instead of running your own.

227
00:14:49,770 --> 00:14:53,546
And then of course it's time to simplify the code. You can do

228
00:14:53,568 --> 00:14:57,194
that now because you have synthetic monitoring in place and it will make

229
00:14:57,232 --> 00:15:00,634
sure that you cannot break anything. And if you do, you'll immediately

230
00:15:00,682 --> 00:15:04,442
know. And then concrete

231
00:15:04,586 --> 00:15:07,520
steps to take people. And this is hard.

232
00:15:08,290 --> 00:15:11,886
So how do you get bite in

233
00:15:11,908 --> 00:15:15,198
from people. I think this is one of the hardest things you can do

234
00:15:15,364 --> 00:15:18,914
because like I said, people in the past have made

235
00:15:18,952 --> 00:15:22,146
decisions in this company, in this team, and they made sense to them,

236
00:15:22,248 --> 00:15:26,050
right? So nobody does random actions or takes random actions.

237
00:15:26,630 --> 00:15:30,370
They are where they are because of a series of experiences

238
00:15:30,450 --> 00:15:34,534
has led them there. And you need to first understand this and

239
00:15:34,572 --> 00:15:37,894
then you need to come up with a strategy to get buy in from them

240
00:15:37,932 --> 00:15:41,082
and explain why are we changing everything now

241
00:15:41,136 --> 00:15:44,538
suddenly. So what you want to do is for example,

242
00:15:44,704 --> 00:15:48,346
share past experiences of your own. So maybe you

243
00:15:48,368 --> 00:15:52,366
have been in company where DevOps maturity was way higher than it is now and

244
00:15:52,388 --> 00:15:55,040
you can tell from experience what you are doing.

245
00:15:55,490 --> 00:15:59,086
It makes sense, but we can be faster and better and

246
00:15:59,108 --> 00:16:02,834
you need to explain it. Build confidence through

247
00:16:02,872 --> 00:16:06,354
renowned material like the Google DevOps blog and the accelerate book.

248
00:16:06,392 --> 00:16:09,218
And there's many more. So many companies are doing this.

249
00:16:09,304 --> 00:16:13,166
Elite Dora performers are usually outperforming

250
00:16:13,198 --> 00:16:17,074
the competition. And then of course, like I said,

251
00:16:17,112 --> 00:16:21,318
and I can't put enough emphasis on this, constantly explain the changes,

252
00:16:21,404 --> 00:16:25,206
constantly explain the purpose and the vision to everyone as often as they need

253
00:16:25,228 --> 00:16:28,358
to hear it and show and lead by example.

254
00:16:28,524 --> 00:16:32,694
So maybe you need actually to step in and write the first deploys

255
00:16:32,742 --> 00:16:36,614
script yourself. Maybe you need to write the first CI pipeline

256
00:16:36,662 --> 00:16:40,118
script yourself. Maybe you even need to write the first test yourself.

257
00:16:40,304 --> 00:16:43,566
It doesn't matter, do it and show it to others.

258
00:16:43,668 --> 00:16:46,942
Lead by example. And then once they learn

259
00:16:46,996 --> 00:16:50,480
what the vision is, you give them back the control.

260
00:16:54,070 --> 00:16:56,980
Concrete steps to take process hard,

261
00:16:57,430 --> 00:17:00,574
move to trunk based development. Have prs

262
00:17:00,622 --> 00:17:04,062
and code review, merge to main and keep it stable

263
00:17:04,126 --> 00:17:07,934
at all times. Rollback fast if needed. Fix bugs offline.

264
00:17:08,062 --> 00:17:11,990
This is a very significant cultural change if you don't already have that.

265
00:17:12,140 --> 00:17:15,846
And I felt it was very challenging coming

266
00:17:16,028 --> 00:17:19,722
into an organization that for example uses Gitflow or some other model.

267
00:17:19,856 --> 00:17:23,706
Suddenly they don't have five different release branches or a

268
00:17:23,728 --> 00:17:27,338
development branch where they can safely merge everything and then they later

269
00:17:27,424 --> 00:17:31,254
integrate a huge chunk of code changes into the main branch

270
00:17:31,302 --> 00:17:33,420
and they pray to God that it will still work.

271
00:17:34,850 --> 00:17:38,414
Trunk based development, for those of you who don't know, is the idea that

272
00:17:38,532 --> 00:17:41,982
you always have a stable main branch and this is the one that you also

273
00:17:42,036 --> 00:17:45,550
deploy to production automatically.

274
00:17:45,970 --> 00:17:49,586
And the idea now is of course, and you can see how it

275
00:17:49,608 --> 00:17:53,106
relates to the door metrics. When you make a change on this kind

276
00:17:53,128 --> 00:17:57,078
of a branch, you want to make sure the change is actually small.

277
00:17:57,244 --> 00:18:01,474
So first of all, someone needs to review it. Try sending

278
00:18:01,522 --> 00:18:05,554
a 500 file change review request to an engineer.

279
00:18:05,682 --> 00:18:08,726
They might not be very happy about this because it will take them a day

280
00:18:08,748 --> 00:18:12,346
to review it. Send them a small one. Here's a file that

281
00:18:12,368 --> 00:18:15,866
I need to change. Here's five lines of code. Can you

282
00:18:15,888 --> 00:18:19,834
please review it? Easy to understand. And they

283
00:18:19,872 --> 00:18:23,354
can review it quickly, merge it to main, it can be deployed.

284
00:18:23,482 --> 00:18:27,658
And now the next good thing is, and this immediately impacts the next orometric

285
00:18:27,834 --> 00:18:31,066
meantime to restore or restoring from failure

286
00:18:31,098 --> 00:18:34,670
or change fail rate. If you deploy a small change

287
00:18:34,740 --> 00:18:38,434
and something goes wrong, you'll be able to

288
00:18:38,472 --> 00:18:41,778
very quickly understand what caused the issue because it was a

289
00:18:41,784 --> 00:18:44,978
very small change. So there are not many things that can actually have caused it.

290
00:18:45,064 --> 00:18:48,446
Whereas if you have a huge one spanning multiple modules

291
00:18:48,478 --> 00:18:51,378
and projects, right. So the diff gets larger.

292
00:18:51,554 --> 00:18:54,886
And especially as teams scale up and engineers scale up,

293
00:18:54,908 --> 00:18:58,166
the diff gets larger and larger and larger the longer you wait with deploying

294
00:18:58,198 --> 00:19:01,862
something and then it becomes infinitely

295
00:19:01,926 --> 00:19:05,802
more difficult to actually debug issues

296
00:19:05,936 --> 00:19:10,042
because if you have the diff created by three teams over one

297
00:19:10,096 --> 00:19:13,306
month deployed to production and it breaks, good luck

298
00:19:13,338 --> 00:19:15,360
figuring out what the hell went wrong.

299
00:19:18,370 --> 00:19:22,126
And then concrete steps to take

300
00:19:22,228 --> 00:19:25,582
process hard. All the changes that you have done now,

301
00:19:25,636 --> 00:19:29,646
so you might have not executed all of them, but you have the synthetic

302
00:19:29,678 --> 00:19:33,106
monitoring in place, which is important. It has your back, so, you know

303
00:19:33,128 --> 00:19:37,682
when something breaks. And now it's time to finally increased

304
00:19:37,826 --> 00:19:41,762
our deployment velocity or deploys frequency.

305
00:19:41,906 --> 00:19:45,282
Nice. The question is how much should we deploy

306
00:19:45,426 --> 00:19:48,554
and how frequent? Well, that depends on where you are in,

307
00:19:48,592 --> 00:19:52,330
right. Quite frankly. So depending on your current DevOps maturity,

308
00:19:53,230 --> 00:19:54,780
where you are coming from,

309
00:19:56,350 --> 00:19:59,340
what the state of the engineering team in the company is like,

310
00:20:00,450 --> 00:20:03,566
I think if you're coming from a

311
00:20:03,588 --> 00:20:07,214
very low DevOps maturity space, or depending on business needs,

312
00:20:07,412 --> 00:20:11,120
weekly deploys are actually perfectly fine.

313
00:20:11,490 --> 00:20:15,346
They're not elite, Dora. Right. So they're not 30 times a

314
00:20:15,368 --> 00:20:18,578
day or more, but they are better

315
00:20:18,664 --> 00:20:22,046
than monthly or quarterly and they reduce

316
00:20:22,078 --> 00:20:25,314
the diff significantly and they have a stable deploy process.

317
00:20:25,512 --> 00:20:29,110
And of course we have to face some realities. Like I said it initially,

318
00:20:29,610 --> 00:20:32,886
investing into DevOps is also opportunity cost.

319
00:20:32,988 --> 00:20:36,486
So there's going to be some manager or some exec on top of

320
00:20:36,508 --> 00:20:40,054
you wondering, hey, Daniel, what the hell are you doing?

321
00:20:40,092 --> 00:20:43,514
Like, you've built stuff for two weeks, yet I have not

322
00:20:43,552 --> 00:20:47,674
seen any new features or any new bugs. Right. And now

323
00:20:47,712 --> 00:20:50,806
we need to actually show them something. And if we can now,

324
00:20:50,928 --> 00:20:54,206
and this is what I was able to do, prove to

325
00:20:54,228 --> 00:20:58,862
them that suddenly lead time is reduced significantly through

326
00:20:58,996 --> 00:21:02,458
deployment frequency, through automation and through all these things that

327
00:21:02,484 --> 00:21:05,646
we have just looked at, suddenly delivering

328
00:21:05,678 --> 00:21:09,234
a bug fix takes days rather than months or

329
00:21:09,272 --> 00:21:12,866
weeks or a quarter. And of

330
00:21:12,888 --> 00:21:16,546
course this is not easy, right? So here it's on the hard slide for a

331
00:21:16,568 --> 00:21:20,066
reason. So the first weekly deploy

332
00:21:20,098 --> 00:21:23,654
that we did took us a day because we uncovered many

333
00:21:23,692 --> 00:21:27,074
issues that we hadn't seen before, right? Like we thought everything was automated,

334
00:21:27,122 --> 00:21:30,826
but it wasn't. So still manual steps were involved. We had to

335
00:21:30,848 --> 00:21:34,118
do some stuff, coordinate. It wasn't great, but of course we learned

336
00:21:34,134 --> 00:21:38,058
a lot. There was a retrospective, we implemented a series of changes,

337
00:21:38,144 --> 00:21:41,834
and the week after we reduced it to a couple of hours and eventually

338
00:21:41,882 --> 00:21:43,120
even less than that.

339
00:21:45,650 --> 00:21:49,006
And now if you're still

340
00:21:49,028 --> 00:21:53,318
not satisfied with your DevOps change, right, you could go to difficulty

341
00:21:53,354 --> 00:21:57,090
mode. Emotional damage by the way, I love Stephen Hay. He's an awesome

342
00:21:57,160 --> 00:22:01,140
youtuber, responsible for this funny meme and many cool videos.

343
00:22:02,550 --> 00:22:06,146
I think emotional damage is appropriate because the

344
00:22:06,168 --> 00:22:10,118
next step that you could take is organizational change. And this is

345
00:22:10,204 --> 00:22:13,526
very hard, right? So all the changes before you can do

346
00:22:13,548 --> 00:22:16,550
them on a team level or maybe on multiple teams.

347
00:22:16,970 --> 00:22:20,682
This, however is an organizational change. So you will need to get buy in

348
00:22:20,736 --> 00:22:24,614
from senior management, the exec

349
00:22:24,662 --> 00:22:28,586
team, someone pretty high up, and this can be

350
00:22:28,688 --> 00:22:32,670
a tough one to sell and convince. So you need a lot of patience

351
00:22:33,330 --> 00:22:36,634
and a lot of good, well argumented,

352
00:22:36,762 --> 00:22:40,650
structured documents and reasons

353
00:22:40,810 --> 00:22:43,438
to convince them. But however,

354
00:22:43,604 --> 00:22:47,346
what helps is if you've already been able to show the

355
00:22:47,368 --> 00:22:51,250
first success, right? So hey, we went from quarterly to weekly. Look at that.

356
00:22:51,400 --> 00:22:55,874
We can be even faster. Or sometimes

357
00:22:55,992 --> 00:22:58,854
you even have someone who has an open ear for you, right?

358
00:22:58,892 --> 00:23:02,246
So they also see the issues and they're looking for a solution. And now you

359
00:23:02,268 --> 00:23:06,934
can come in and suggest organizational change and

360
00:23:07,132 --> 00:23:10,746
things that I am very convinced that you need for

361
00:23:10,768 --> 00:23:14,378
being a Dora elite performer are first of all,

362
00:23:14,544 --> 00:23:18,650
cross functional teams and a you built it, you run it mentality.

363
00:23:20,110 --> 00:23:23,834
You need to have stream aligned cross functional teams

364
00:23:23,882 --> 00:23:27,162
who are able to deliver everything that is required

365
00:23:27,226 --> 00:23:30,958
themselves. They need to have front end engineers, back end engineers, they need to

366
00:23:30,964 --> 00:23:35,220
have the operational knowledge to deploy their own service and to monitor it.

367
00:23:35,750 --> 00:23:38,706
This is very important. Only then can they be fast.

368
00:23:38,888 --> 00:23:42,286
There are no dependencies, there's no dependency meeting. You don't

369
00:23:42,318 --> 00:23:45,874
need agile coaches to synchronize 15 teams.

370
00:23:45,922 --> 00:23:49,746
No, they can deliver what they need themselves. You don't

371
00:23:49,778 --> 00:23:53,240
want to have a standalone DevOps team

372
00:23:54,170 --> 00:23:57,986
that has the job to build. DevOps never talks

373
00:23:58,018 --> 00:24:01,522
to software engineers and just does whatever. Nobody really knows.

374
00:24:01,586 --> 00:24:04,954
They sit there in a corner build terraform stuff all day and nobody gets

375
00:24:04,992 --> 00:24:09,226
it. That's a big antipattern, right? So if you have a DevOps team then

376
00:24:09,248 --> 00:24:13,294
it should be temporary. And the idea is that they

377
00:24:13,332 --> 00:24:17,006
help other teams to increase DevOps maturity and

378
00:24:17,028 --> 00:24:20,030
at some point they dissolve again. It's not a permanent solution.

379
00:24:21,170 --> 00:24:24,386
Test automation and exploratory testing is important.

380
00:24:24,568 --> 00:24:28,514
You need test automation at some point every

381
00:24:28,552 --> 00:24:32,606
team has to do it and your QA

382
00:24:32,638 --> 00:24:36,126
team, right? So it must not be a manual gate for

383
00:24:36,168 --> 00:24:39,554
releases because this will reduce your door performance significantly.

384
00:24:39,602 --> 00:24:42,742
If you have to wait for someone to manually test

385
00:24:42,796 --> 00:24:47,430
something and then approve a deploy, what you want is automation.

386
00:24:47,850 --> 00:24:51,642
And as soon as the automation is satisfied and happy you roll it out

387
00:24:51,776 --> 00:24:55,158
because you have the monitoring in place through your synthetics.

388
00:24:55,334 --> 00:24:59,334
If something goes wrong, you can roll back in record time because deployment

389
00:24:59,382 --> 00:25:03,206
now is automated. So there's also no need anymore for

390
00:25:03,248 --> 00:25:07,066
manual QA as a release gate. What they can do instead is exploratory

391
00:25:07,098 --> 00:25:10,426
testing because of course test automation. You don't

392
00:25:10,458 --> 00:25:13,758
want to test everything. You don't want to have a synthetic monitoring set up

393
00:25:13,764 --> 00:25:17,700
that has 5000 tests and tests every quick path free application.

394
00:25:18,150 --> 00:25:21,586
No, it's supposed to only test core flows. And if there

395
00:25:21,608 --> 00:25:25,380
is a typo in FAQ somewhere, this is where, for example,

396
00:25:25,750 --> 00:25:29,122
manual QA can come in handy. Or if there is a broken chart

397
00:25:29,186 --> 00:25:31,990
that is displayed somewhere, this is where they can be useful.

398
00:25:33,530 --> 00:25:37,126
So thanks for listening. If you

399
00:25:37,148 --> 00:25:40,626
are interested to nerd out about synthetic

400
00:25:40,658 --> 00:25:44,774
monitoring or all things DevOps, come seek me out in the czech slack community.

401
00:25:44,892 --> 00:25:48,338
It's linked in the slides or you can also ping

402
00:25:48,354 --> 00:25:51,998
me on LinkedIn. And yeah, I'm happy to answer all your questions

403
00:25:52,084 --> 00:25:55,358
afterwards. I hope that you could learn something.

404
00:25:55,524 --> 00:25:56,460
Have a great day everyone.

