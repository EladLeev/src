1
00:00:41,010 --> 00:00:44,738
Hi folks, thanks to be here for this talk about pragmatic

2
00:00:44,834 --> 00:00:48,898
application migration to the cloud with Quarkus Kotlin,

3
00:00:48,994 --> 00:00:53,006
Hazel, cost and VM. I'm Nicola Frankel. I've been

4
00:00:53,028 --> 00:00:56,298
a former developer and other technical roles.

5
00:00:56,474 --> 00:01:00,154
I worked in the backend fields and mainly

6
00:01:00,202 --> 00:01:04,046
in Java with Javae and spring technologies. And right

7
00:01:04,068 --> 00:01:07,250
now I'm a developer advocate. I work for a company

8
00:01:07,320 --> 00:01:11,010
called Hazelcast. Hazelcast has two products. The first

9
00:01:11,080 --> 00:01:14,674
one is an in memory data grid and you can think about

10
00:01:14,712 --> 00:01:18,466
an in memory data grid as distributed data structures.

11
00:01:18,658 --> 00:01:22,454
So you would have a cluster of nodes and you can short the

12
00:01:22,492 --> 00:01:25,974
data over several nodes or replicate it. And the other

13
00:01:26,012 --> 00:01:30,134
one is that will cause jet and this is in memory stream

14
00:01:30,182 --> 00:01:33,978
processing. Today I will talk to you about

15
00:01:34,144 --> 00:01:38,426
the cloud. There is no denying that today

16
00:01:38,528 --> 00:01:42,350
everybody goes to the cloud. You can think about

17
00:01:42,420 --> 00:01:45,530
it as a sort of gold rush.

18
00:01:45,690 --> 00:01:49,758
And there are good reasons to migrate to the cloud and there are

19
00:01:49,844 --> 00:01:53,614
not so good reasons. Let's talk about the good reasons.

20
00:01:53,742 --> 00:01:58,130
The first reason why you would like to migrate to the cloud is

21
00:01:58,280 --> 00:02:01,060
visibility. That's very important.

22
00:02:02,070 --> 00:02:05,682
Some people think mistakenly that

23
00:02:05,816 --> 00:02:09,410
a we will migrate to the cloud, it will be less expensive.

24
00:02:09,570 --> 00:02:13,170
Well, it might be the case, it probably won't.

25
00:02:13,250 --> 00:02:17,218
But the reason is not about the exact sum.

26
00:02:17,314 --> 00:02:19,980
The fact is in traditional it,

27
00:02:20,510 --> 00:02:23,878
you know, cost of exequician,

28
00:02:24,054 --> 00:02:28,042
you might know the cost of maintenance because

29
00:02:28,096 --> 00:02:31,040
you have contracts. But besides that,

30
00:02:32,050 --> 00:02:35,854
it's very hard to compute exactly the

31
00:02:35,892 --> 00:02:39,614
cost of running piece

32
00:02:39,652 --> 00:02:43,682
of infrastructure. There are people, you don't know really

33
00:02:43,816 --> 00:02:47,426
exactly how much time they spend. There are a lot

34
00:02:47,448 --> 00:02:51,170
of factors that can influence it and well

35
00:02:51,240 --> 00:02:54,130
it's very hard to compute.

36
00:02:54,630 --> 00:02:58,034
Before we talked about the total cost of ownership

37
00:02:58,162 --> 00:03:02,242
and yeah, there are metrics, there are like diagrams,

38
00:03:02,306 --> 00:03:06,306
sheets, whatever, but still it takes a lot of effort

39
00:03:06,498 --> 00:03:10,090
and in the end it's a best guess.

40
00:03:10,240 --> 00:03:14,074
Now, if you migrate to the cloud, it's very simple because you

41
00:03:14,112 --> 00:03:17,962
have your build and it's broken down into, yeah, you use this

42
00:03:18,016 --> 00:03:21,854
service and you use this much memory and this

43
00:03:21,892 --> 00:03:25,598
much data, this much cpu and it costs you

44
00:03:25,684 --> 00:03:29,770
that. So transparency, visibility is the first argument

45
00:03:29,850 --> 00:03:33,282
regarding migrating to the cloud. The second is

46
00:03:33,336 --> 00:03:36,754
flexibility in traditional it.

47
00:03:36,952 --> 00:03:40,654
When you buy your own hardware, you must scale

48
00:03:40,702 --> 00:03:44,558
your hardware according to the maximum peak of usage.

49
00:03:44,654 --> 00:03:47,926
So if you are an ecommerce shop,

50
00:03:48,028 --> 00:03:51,958
you probably will buy your hardware and scale it according to

51
00:03:52,044 --> 00:03:56,402
Black Friday, cyber Monday, this kind of stuff. So very high peak

52
00:03:56,546 --> 00:04:01,174
and during the rest of the year the difference between normal

53
00:04:01,222 --> 00:04:04,614
loads and the peak loads is just waste.

54
00:04:04,662 --> 00:04:07,914
You just bought that hardware for this

55
00:04:07,952 --> 00:04:11,938
peak. The rest of the year, it's wasted.

56
00:04:12,134 --> 00:04:16,106
So the idea is, in the cloud at least you pay average

57
00:04:16,218 --> 00:04:20,110
when you need average, and you pay like much more

58
00:04:20,180 --> 00:04:24,430
when you need much more. So it's very flexible. You can scale

59
00:04:24,510 --> 00:04:28,946
nulli at will. The last argument that I

60
00:04:28,968 --> 00:04:33,540
was not really aware of that, because I work mainly in

61
00:04:34,630 --> 00:04:37,942
large or at least medium companies, is if

62
00:04:37,996 --> 00:04:42,146
you are a small team, even like a single developer,

63
00:04:42,258 --> 00:04:45,750
and you want to develop a product, well, you will

64
00:04:45,820 --> 00:04:49,594
need to acquire hardware. And again,

65
00:04:49,792 --> 00:04:53,258
this is a big step at the beginning when you have nothing,

66
00:04:53,344 --> 00:04:57,898
when you just want to create your business. So the cloud allows anybody

67
00:04:58,064 --> 00:04:59,900
to virtually start.

68
00:05:00,590 --> 00:05:04,486
And they have wonderful ideas, they have the skills

69
00:05:04,518 --> 00:05:08,398
to implement them. They can start their journey like

70
00:05:08,564 --> 00:05:12,586
on day one, nearly on day one. As I mentioned, those are

71
00:05:12,628 --> 00:05:16,354
good reasons, not so good reasons. Well,

72
00:05:16,552 --> 00:05:20,130
do like everybody else. This is the worst reason of all.

73
00:05:20,280 --> 00:05:23,394
And again, let me reinstate it.

74
00:05:23,592 --> 00:05:28,242
If you think you're migrating to the cloud, you will gain

75
00:05:28,306 --> 00:05:32,134
money, or at least waste less money. That's probably a very

76
00:05:32,172 --> 00:05:35,414
wrong assumption, and please be aware of that.

77
00:05:35,532 --> 00:05:39,302
Now imagine you already have software.

78
00:05:39,446 --> 00:05:43,258
How do you migrate? How do you take this software that was

79
00:05:43,424 --> 00:05:47,386
made for the old words for onsite hardware to

80
00:05:47,408 --> 00:05:51,242
the cloud? Well, there are three main paths. The first

81
00:05:51,296 --> 00:05:54,350
is you take it and you move it to the cloud.

82
00:05:54,420 --> 00:05:57,902
That's called lift and shift. The second is,

83
00:05:57,956 --> 00:06:01,326
hey, it's no good, let's rewrite everything. And the

84
00:06:01,348 --> 00:06:05,202
third, in which I would propose you,

85
00:06:05,256 --> 00:06:08,270
advise you, at least that's the gist

86
00:06:08,350 --> 00:06:12,162
of this talk, is to walk the middle path, that is between

87
00:06:12,296 --> 00:06:15,918
the two. So let's first talk about the lift and shift.

88
00:06:16,014 --> 00:06:19,686
Lift and shift is very easy. I mean, the cloud is

89
00:06:19,708 --> 00:06:23,494
just somebody else computer. You just say, oh, instead of

90
00:06:23,532 --> 00:06:26,946
deploying on my side, on my hardware, I will deploy

91
00:06:26,978 --> 00:06:29,526
it on another hardware.

92
00:06:29,718 --> 00:06:33,210
And most of the times it's relatively easy,

93
00:06:33,360 --> 00:06:37,194
because then every cloud provider, they provide some

94
00:06:37,232 --> 00:06:40,350
way to run containers. So you

95
00:06:40,420 --> 00:06:43,518
just containerize your application and

96
00:06:43,604 --> 00:06:46,990
you deploy it. And actually it has a high

97
00:06:47,060 --> 00:06:51,210
chances of working. As expected,

98
00:06:51,290 --> 00:06:53,762
you will be bell to deploy it.

99
00:06:53,896 --> 00:06:57,618
Unfortunately, it might not

100
00:06:57,704 --> 00:07:01,182
be so good in the middle term.

101
00:07:01,326 --> 00:07:04,866
Worst case, it won't run at all. It will be

102
00:07:04,888 --> 00:07:08,550
deployed, but it won't run at all. Because hey, your application,

103
00:07:08,700 --> 00:07:11,906
it expected some hard coded paths

104
00:07:12,018 --> 00:07:16,034
or some local resource

105
00:07:16,162 --> 00:07:20,026
that is not available or available through another

106
00:07:20,128 --> 00:07:23,978
interface in the cloud. Best case, it will run because

107
00:07:24,064 --> 00:07:28,202
you thought about everything. But your application was

108
00:07:28,256 --> 00:07:32,430
not designed to run on the cloud. So wasting some

109
00:07:32,500 --> 00:07:36,270
cpu cycles, wasting some memory that was

110
00:07:36,340 --> 00:07:39,754
not so important when you run on premise.

111
00:07:39,882 --> 00:07:43,146
Now when you run on the clouds, everything counts.

112
00:07:43,338 --> 00:07:47,142
This waste, it might cost you lots.

113
00:07:47,306 --> 00:07:50,962
Actually, perhaps you have already stumbled upon those

114
00:07:51,016 --> 00:07:55,102
twelve factor app sheets and it

115
00:07:55,256 --> 00:07:58,726
lists twelve principles that

116
00:07:58,828 --> 00:08:02,466
cloud native applications must follow. I won't

117
00:08:02,498 --> 00:08:06,534
go through all of them. Here they are as

118
00:08:06,572 --> 00:08:10,058
a reminder. But I have been a

119
00:08:10,064 --> 00:08:13,994
Java developer and let's check what a

120
00:08:14,032 --> 00:08:17,366
standard GVM web application, whether it's

121
00:08:17,398 --> 00:08:21,406
compliant with those principles. Well, the second factor says,

122
00:08:21,508 --> 00:08:25,182
hey, you should declare all your dependency. Your application should

123
00:08:25,236 --> 00:08:28,606
declare all its dependency. Okay, now if we

124
00:08:28,628 --> 00:08:32,618
have a regular GVM web application, it's probably a war

125
00:08:32,804 --> 00:08:36,478
and you expect it to be deployed

126
00:08:36,654 --> 00:08:41,342
on an application server or at least a GSP

127
00:08:41,406 --> 00:08:44,970
servlet container. But you don't declare any dependency.

128
00:08:45,150 --> 00:08:48,742
Okay, remove this issue and say,

129
00:08:48,876 --> 00:08:52,546
now we know how to run self executed.

130
00:08:52,578 --> 00:08:56,194
The jar, they embed the servlet container

131
00:08:56,242 --> 00:09:00,106
itself, so they embed the Tomcat and well,

132
00:09:00,208 --> 00:09:03,990
now it's completely self isolated.

133
00:09:04,150 --> 00:09:07,814
I don't need to declare any dependency. Everything is self contained.

134
00:09:07,942 --> 00:09:11,406
And again, it's wrong. Like the GVM is a

135
00:09:11,428 --> 00:09:14,986
huge dependency and the jar expects

136
00:09:15,018 --> 00:09:18,218
a GVM with a minimal version and it's

137
00:09:18,234 --> 00:09:21,470
not declared. That's one principle

138
00:09:21,810 --> 00:09:26,066
we don't follow. The second one is configuration. Your application

139
00:09:26,248 --> 00:09:29,714
must be easily configurable. But with

140
00:09:29,832 --> 00:09:33,586
traditional wars, that's completely

141
00:09:33,688 --> 00:09:36,854
untrue. What we learned is that we

142
00:09:36,892 --> 00:09:40,390
are using an abstraction. For example,

143
00:09:40,540 --> 00:09:44,134
let's say a data source that is available through a

144
00:09:44,172 --> 00:09:48,342
virtual URL, and then we map this URL to

145
00:09:48,396 --> 00:09:52,470
another real URL. And this is done in every environment.

146
00:09:52,550 --> 00:09:55,814
So you keep your war the same, you promote

147
00:09:55,862 --> 00:09:59,434
the artifact, which is good, and then the configuration is

148
00:09:59,472 --> 00:10:03,706
done on every application server in every environment.

149
00:10:03,898 --> 00:10:06,458
That defeats the third principle,

150
00:10:06,634 --> 00:10:11,166
principle number nine. We must start up fast.

151
00:10:11,348 --> 00:10:14,514
The reason for that is that, hey, let's imagine we

152
00:10:14,552 --> 00:10:17,666
are running on kubernetes. And kubernetes is

153
00:10:17,688 --> 00:10:21,806
super great because when a pod starts misbehaving,

154
00:10:21,918 --> 00:10:25,646
well, you just kill the pods and you start a new one.

155
00:10:25,768 --> 00:10:29,570
But if you start a new one, you assume

156
00:10:29,650 --> 00:10:33,334
that this new one will start fast enough. And guess what?

157
00:10:33,452 --> 00:10:36,802
The GVM was not made for that. The GVM

158
00:10:36,866 --> 00:10:40,122
actually starts quite slowly. And when

159
00:10:40,176 --> 00:10:43,334
it has started at the beginning, it's slow,

160
00:10:43,382 --> 00:10:46,714
it has bad performances, it needs some warm up

161
00:10:46,752 --> 00:10:50,010
time. So another principle that is defeated.

162
00:10:50,610 --> 00:10:54,554
Finally, logging. We must have streaming logs

163
00:10:54,682 --> 00:10:58,542
in containers. The streaming logs is a, we just

164
00:10:58,596 --> 00:11:03,330
write everything in the console. But again,

165
00:11:03,480 --> 00:11:07,154
sublet containers, not so great. Because your

166
00:11:07,192 --> 00:11:10,814
application will write in a file and the sublet

167
00:11:10,862 --> 00:11:14,494
container will write in another file or in multiple files.

168
00:11:14,542 --> 00:11:17,426
Perhaps your application also write in different files.

169
00:11:17,538 --> 00:11:21,074
If it's containerized well, how do we handle

170
00:11:21,122 --> 00:11:24,806
that? There is no single stream of log that we

171
00:11:24,828 --> 00:11:28,178
can follow. Now we've got even more issues

172
00:11:28,284 --> 00:11:32,198
because now it's not only about just the GVM,

173
00:11:32,294 --> 00:11:35,414
but it's about the frameworks that we are using. Spring,

174
00:11:35,462 --> 00:11:39,478
Javae, whatever, they use a lot of reflection.

175
00:11:39,574 --> 00:11:43,230
And again it's a startup performance hits because

176
00:11:43,300 --> 00:11:47,470
at the beginning it will start to load the classes

177
00:11:48,450 --> 00:11:51,774
through reflection. Not great. And if we are

178
00:11:51,812 --> 00:11:55,790
talking explicitly again about spring and Javae,

179
00:11:55,870 --> 00:11:59,650
they will do some class best counting. So they will

180
00:11:59,800 --> 00:12:02,914
check through all the class bars to say hey,

181
00:12:03,112 --> 00:12:06,758
which class has this annotation? Not great.

182
00:12:06,924 --> 00:12:10,502
So it seems like the GVM is not made for the cloud.

183
00:12:10,636 --> 00:12:14,246
So the idea in that case a we will regret the

184
00:12:14,268 --> 00:12:17,666
application. And as engineers we love to

185
00:12:17,708 --> 00:12:21,594
start from scratch. We love greenfield projects. We don't want to

186
00:12:21,632 --> 00:12:25,590
handle the mess that was made by previous developers,

187
00:12:25,670 --> 00:12:28,940
even if those previous developers were us.

188
00:12:29,710 --> 00:12:33,374
But there are a couple of issues if we want to rewrite the

189
00:12:33,412 --> 00:12:37,706
application. The first is obviously the costs. If you want to rewrite

190
00:12:37,738 --> 00:12:41,370
the application, you must have like a nontrivial budget.

191
00:12:41,450 --> 00:12:44,446
So you will go to your manager,

192
00:12:44,558 --> 00:12:48,740
manager will at some point go to the business and

193
00:12:49,110 --> 00:12:52,402
it will probably go like that. Hey, I need

194
00:12:52,536 --> 00:12:55,880
x million. What for? To rewrite the application.

195
00:12:56,330 --> 00:13:00,262
And what competitive advantage does it bring

196
00:13:00,316 --> 00:13:04,354
us? What age do we have on the market with that rewrite?

197
00:13:04,482 --> 00:13:08,522
Nothing. It will be like a rewrite feature for

198
00:13:08,576 --> 00:13:12,186
feature. So you can probably imagine what

199
00:13:12,208 --> 00:13:16,262
will be the outcome of this conversation. But imagine

200
00:13:16,326 --> 00:13:19,830
for a second that yeah, you're the business,

201
00:13:20,000 --> 00:13:23,646
understand the cloud. I mean you already have

202
00:13:23,828 --> 00:13:27,770
the biggest advantage on the market, you have no competitors,

203
00:13:27,850 --> 00:13:31,646
everything is fine. Let's go a bit into the

204
00:13:31,668 --> 00:13:35,074
detail. When you start rewriting the application,

205
00:13:35,272 --> 00:13:38,078
let's imagine you start in January.

206
00:13:38,254 --> 00:13:41,858
Well it will take some time, it will take months until

207
00:13:41,944 --> 00:13:45,474
you have rewritten the application. And so the

208
00:13:45,512 --> 00:13:48,614
target that you are chasing, the version that was

209
00:13:48,652 --> 00:13:52,354
done in January now is not the same anymore because the legacy

210
00:13:52,402 --> 00:13:56,002
version of the app probably had upgrades

211
00:13:56,146 --> 00:13:59,866
because the legacy version, the business wants to

212
00:13:59,888 --> 00:14:03,962
add more feature. So you will be actually be like

213
00:14:04,016 --> 00:14:07,546
developing toward running targets, which is

214
00:14:07,568 --> 00:14:10,970
never good. Of course there are risks involved.

215
00:14:11,050 --> 00:14:14,426
I mean legacy projects, there might be legacy,

216
00:14:14,538 --> 00:14:18,110
but at least most of the bugs have already

217
00:14:18,180 --> 00:14:22,538
been solved because people are already encountered them

218
00:14:22,644 --> 00:14:25,986
earlier on with a Greenfield project, there will

219
00:14:26,008 --> 00:14:29,682
be bugs for sure, even with the best quality process

220
00:14:29,816 --> 00:14:33,026
and with the biggest test harness in the

221
00:14:33,048 --> 00:14:36,822
world, so not great. And finally, if you are

222
00:14:36,876 --> 00:14:40,262
a team lead, if you are a manager, you must think

223
00:14:40,316 --> 00:14:43,878
how you will organize your teams. Rewrite means

224
00:14:43,964 --> 00:14:47,062
that we will need additional workforce. So either

225
00:14:47,116 --> 00:14:51,242
we recruit temporarily or we

226
00:14:51,296 --> 00:14:54,758
outsource. But in both cases we need additional

227
00:14:54,854 --> 00:14:58,490
people, and the usual way to do that is

228
00:14:58,640 --> 00:15:01,914
those new people. They will maintain

229
00:15:02,042 --> 00:15:05,870
and handle the change on the legacy application, while your

230
00:15:05,940 --> 00:15:08,842
own workforce will work on the new version.

231
00:15:08,986 --> 00:15:13,082
But there is a high chance that since the new

232
00:15:13,156 --> 00:15:16,290
people, they don't know the application that well,

233
00:15:16,360 --> 00:15:20,082
they will probably need support from the people

234
00:15:20,136 --> 00:15:24,174
who know the application. So there will be a lot of interactions

235
00:15:24,302 --> 00:15:27,942
of interruptions and it won't be super

236
00:15:27,996 --> 00:15:31,654
great. So those are four reasons why rewriting the

237
00:15:31,692 --> 00:15:34,790
application might not be such a good idea.

238
00:15:34,860 --> 00:15:38,570
So if lift and shift is not a good idea,

239
00:15:38,640 --> 00:15:42,566
if rewriting the application is not a good idea, we don't

240
00:15:42,598 --> 00:15:46,202
have that much choice. We probably

241
00:15:46,336 --> 00:15:49,826
have a middle path. And the middle path

242
00:15:49,958 --> 00:15:53,722
is actually to reuse the existing codes,

243
00:15:53,866 --> 00:15:57,482
especially the annotations from spring and Javae

244
00:15:57,546 --> 00:16:01,134
and whatever, but change the way they are used so

245
00:16:01,172 --> 00:16:04,754
the engine that uses them is not

246
00:16:04,872 --> 00:16:08,274
the traditional engine. And before I go

247
00:16:08,312 --> 00:16:12,526
further, let me introduce you about VM.

248
00:16:12,638 --> 00:16:16,066
GraalVM is actually a bag of many features. Here are a

249
00:16:16,088 --> 00:16:19,634
couple of them. So first, GraalVM has a GVM

250
00:16:19,682 --> 00:16:23,346
platform. So instead of using Oracle GDk

251
00:16:23,458 --> 00:16:26,902
or OpenGDk or whatever, you are using

252
00:16:27,036 --> 00:16:30,262
GraalVm GDk, that's fine. The other thing that

253
00:16:30,316 --> 00:16:33,754
GraalVM brings us is it's polyglot, so it

254
00:16:33,792 --> 00:16:37,754
can speak multiple languages. You can use

255
00:16:37,872 --> 00:16:41,398
multiple languages in your application, so that for

256
00:16:41,424 --> 00:16:45,022
example you can have a Java application. But at

257
00:16:45,076 --> 00:16:49,306
some point you need to use r because you need to do some statistics.

258
00:16:49,418 --> 00:16:53,630
Well, it's very easy to integrate this R file

259
00:16:53,710 --> 00:16:56,994
into your Java application. At least GraalVM makes it

260
00:16:57,032 --> 00:17:01,182
easy. The reason for that is that there is an underlying

261
00:17:01,246 --> 00:17:05,166
framework called truffle, which all those languages

262
00:17:05,278 --> 00:17:08,994
have been implemented with. So there is for example truffle

263
00:17:09,042 --> 00:17:12,742
Robbie. And this allows you, for example, to create

264
00:17:12,796 --> 00:17:17,010
your own language as well, or at least an implementation

265
00:17:17,090 --> 00:17:20,358
of the language using truffle for easier integration.

266
00:17:20,454 --> 00:17:23,354
But what is of interest into this?

267
00:17:23,472 --> 00:17:27,542
Migration to the cloud is another feature of GraalVM

268
00:17:27,606 --> 00:17:31,262
called substrate VM, and this allows you

269
00:17:31,396 --> 00:17:35,034
to create native executable from existing

270
00:17:35,082 --> 00:17:38,490
bytecodes, whether jars or classes,

271
00:17:38,650 --> 00:17:42,250
through an ahead of time compilation process.

272
00:17:42,420 --> 00:17:45,730
Of course it has some limitations.

273
00:17:46,390 --> 00:17:50,062
For example, I was talking about reflection.

274
00:17:50,206 --> 00:17:54,210
So reflection is the ability to say hey,

275
00:17:54,280 --> 00:17:57,782
I don't know which classes will be used at

276
00:17:57,836 --> 00:18:01,526
compile time, I will discover it at runtime and

277
00:18:01,628 --> 00:18:05,942
it's really a great feature of Java. But that

278
00:18:05,996 --> 00:18:09,158
means that you need to follow the execution

279
00:18:09,254 --> 00:18:12,810
path. If you do some build time

280
00:18:12,880 --> 00:18:17,046
compilation whereas the class is available at runtime,

281
00:18:17,158 --> 00:18:20,746
you understand there is a problem because at build time the class won't be

282
00:18:20,768 --> 00:18:24,414
there. Fortunately there are ways to cope with that. You can

283
00:18:24,452 --> 00:18:27,774
provide configuration file to say hey, you need to keep this

284
00:18:27,812 --> 00:18:31,614
file and this file. Well, there are ways to cope with that. It's not

285
00:18:31,652 --> 00:18:35,134
fun, but it works. Other limitation includes the

286
00:18:35,172 --> 00:18:38,734
lack of security manager. It's not

287
00:18:38,772 --> 00:18:42,590
cross platform. So if you want to have an executable

288
00:18:42,670 --> 00:18:46,690
for, let's say macOS, you need to build on macOS and

289
00:18:46,760 --> 00:18:50,454
for Windows, you need one for Windows and so on

290
00:18:50,492 --> 00:18:53,986
and so forth. But at least it's something. So let's

291
00:18:54,018 --> 00:18:57,598
have a small recap. On one side we have the GVM,

292
00:18:57,714 --> 00:19:01,622
and on the other side we have native executables.

293
00:19:01,766 --> 00:19:06,198
GVM memory consumption is high, native executable

294
00:19:06,294 --> 00:19:10,038
not so high. GVM starter time is long,

295
00:19:10,144 --> 00:19:13,294
and even more so considering that the

296
00:19:13,332 --> 00:19:16,842
performance at the beginning is not great native,

297
00:19:16,986 --> 00:19:20,926
you don't care, it's quite fast. On the opposite the

298
00:19:20,948 --> 00:19:24,514
GVM, you can write your program once and run

299
00:19:24,552 --> 00:19:28,894
it everywhere. There is a GVM for that which native executable

300
00:19:28,942 --> 00:19:32,802
obviously you cannot do. And also there is a reason why

301
00:19:32,856 --> 00:19:36,626
the GVM had always had very good performances

302
00:19:36,738 --> 00:19:40,834
past this warm up time is that it can adapt

303
00:19:40,962 --> 00:19:44,930
the native codes that it compiles to the workload.

304
00:19:45,010 --> 00:19:48,602
So during this warm up time it will

305
00:19:48,656 --> 00:19:52,346
analyze the workload and it will create

306
00:19:52,528 --> 00:19:56,314
the best native codes that is possible regarding this

307
00:19:56,352 --> 00:19:59,622
workload. And for this reason the GvM

308
00:19:59,686 --> 00:20:03,818
was always at least on par with native executables

309
00:20:03,914 --> 00:20:08,106
or C and C plus plus programs in the past. The native

310
00:20:08,218 --> 00:20:11,770
executable is statically compiled,

311
00:20:11,850 --> 00:20:15,602
so you must at build time know

312
00:20:15,656 --> 00:20:19,106
about the workload to use the best

313
00:20:19,208 --> 00:20:23,262
parameters for the computation possible. But in the clouds

314
00:20:23,406 --> 00:20:26,626
those are pretty good advantages, and the

315
00:20:26,648 --> 00:20:30,486
benefits of the GVM are not so huge. And so there is

316
00:20:30,508 --> 00:20:34,134
now a generation of cloud native frameworks such

317
00:20:34,172 --> 00:20:37,590
as micronaut or quarkus. I don't know much about

318
00:20:37,660 --> 00:20:40,810
helidon, but it seems to be part of the lot.

319
00:20:40,960 --> 00:20:45,290
And there is spring there because though spring

320
00:20:46,030 --> 00:20:49,686
was not designed in the cloud native way, because when it was designed

321
00:20:49,718 --> 00:20:54,074
there was no cloud. Now there are ways to leverage Graalvm

322
00:20:54,122 --> 00:20:57,486
for spring, but I won't talk about spring in

323
00:20:57,508 --> 00:21:01,582
the session more. And all those frameworks, they basically have

324
00:21:01,636 --> 00:21:04,230
the same approach, they all use Graalvm.

325
00:21:04,410 --> 00:21:07,762
So in the end you have a native executable and they

326
00:21:07,816 --> 00:21:11,458
handle reflection in another way. For example,

327
00:21:11,624 --> 00:21:15,762
micronaut happens to create dedicated

328
00:21:15,826 --> 00:21:19,830
class at build time, at compile time and

329
00:21:19,900 --> 00:21:22,610
sq the traditional reflection.

330
00:21:22,770 --> 00:21:25,254
So now let's have a use case.

331
00:21:25,372 --> 00:21:29,302
Imagine I want to have a URL shortener. The traditional approach

332
00:21:29,366 --> 00:21:32,422
is hey, you have this space of all URLs

333
00:21:32,486 --> 00:21:36,010
and you have a small space of

334
00:21:36,080 --> 00:21:40,006
all possible short term URLs and you

335
00:21:40,048 --> 00:21:43,802
need to have a projection and you need to handle the collisions.

336
00:21:43,946 --> 00:21:47,854
Great. I'm not a mathematician so I prefer to

337
00:21:47,972 --> 00:21:51,898
use an alternative is a I will generate

338
00:21:52,074 --> 00:21:55,890
random shortlinks for a URL and then I will

339
00:21:55,960 --> 00:21:59,202
store the mapping between the long URL and the short

340
00:21:59,256 --> 00:22:02,894
one, and also the opposite from the short URL

341
00:22:02,942 --> 00:22:06,218
to the long one. So the trade off is instead of CpU

342
00:22:06,254 --> 00:22:10,594
time I will thread storage for the demo, I will use the following

343
00:22:10,642 --> 00:22:15,110
stack. I will have a legacy Java e application or

344
00:22:15,260 --> 00:22:19,038
now it's called joycortle e but my application is Java

345
00:22:19,074 --> 00:22:22,602
e because it's legacy. I still use kotlin to write

346
00:22:22,656 --> 00:22:26,394
it, but it's not necessary. Any GBM language will do

347
00:22:26,432 --> 00:22:29,594
java whatever. Scala and I will

348
00:22:29,632 --> 00:22:33,290
be using Jax arrests because it uses

349
00:22:33,370 --> 00:22:36,814
annotations and I will be storing the data in

350
00:22:36,852 --> 00:22:40,910
hazelcast MDT. So my initial state

351
00:22:41,060 --> 00:22:44,722
is the following. I have the GVM that

352
00:22:44,776 --> 00:22:48,914
runs the Tomcat that runs my war and

353
00:22:48,952 --> 00:22:52,834
when I have a request coming in, Tomcat does

354
00:22:52,872 --> 00:22:56,446
its magic probably it uses Catalina jar

355
00:22:56,558 --> 00:23:00,962
that relies itself on Servlet Jar and Jacksonres jar

356
00:23:01,106 --> 00:23:04,982
and it knows which servlet it needs

357
00:23:05,036 --> 00:23:08,886
to call, so it call the servlet.

358
00:23:09,078 --> 00:23:12,554
The servlet itself, well wants to store or

359
00:23:12,592 --> 00:23:15,942
to read data from Hasselcast and it use a dedicated

360
00:23:16,006 --> 00:23:19,434
jar, hazelcast client jar, that's the

361
00:23:19,472 --> 00:23:23,226
initial state. Now I want to migrate to cloud native

362
00:23:23,338 --> 00:23:26,926
and I will use, let's say Quarkus. So the two b

363
00:23:26,948 --> 00:23:30,750
state in development I will still keep the GVM because

364
00:23:30,900 --> 00:23:34,814
the GVM has nice features like you can debug,

365
00:23:34,862 --> 00:23:38,260
you can set breakpoints, this kind of stuff,

366
00:23:38,710 --> 00:23:41,714
we like it and in development it's not an issue.

367
00:23:41,832 --> 00:23:45,398
So we still have the GVM, but instead of

368
00:23:45,484 --> 00:23:48,982
having the Tomcat we

369
00:23:49,036 --> 00:23:53,318
just replace everything with Quarkus. So they are the same

370
00:23:53,484 --> 00:23:57,478
capabilities but implemented by Quarkus so

371
00:23:57,564 --> 00:24:01,626
there is no Catalina jar, there is a quarkus something and there

372
00:24:01,648 --> 00:24:05,162
is a quarkus as lcas client but in the same way

373
00:24:05,216 --> 00:24:08,906
when a new HTTP request comes in

374
00:24:09,008 --> 00:24:12,510
then Quarkus will redirect the request to

375
00:24:12,580 --> 00:24:16,702
our servlet. But the best stuff happens when

376
00:24:16,756 --> 00:24:20,190
you want to deploy in a container like

377
00:24:20,340 --> 00:24:23,098
now we have the same mechanism underneath.

378
00:24:23,194 --> 00:24:26,866
I mean I infer it's the same mechanism, at least it works the same

379
00:24:26,968 --> 00:24:30,526
but now we have a single process and it's

380
00:24:30,558 --> 00:24:33,810
a native binary. I've talked a lot,

381
00:24:33,960 --> 00:24:36,918
now it's time for some demo.

382
00:24:37,084 --> 00:24:40,882
So this is the project and I must admit I cheated

383
00:24:40,946 --> 00:24:44,310
a bit. I didn't start from a

384
00:24:44,380 --> 00:24:47,834
legacy application, I directly created the

385
00:24:47,872 --> 00:24:51,610
project using the quarkus maven

386
00:24:51,950 --> 00:24:55,290
goals so that everything has been

387
00:24:55,360 --> 00:24:59,146
ready for me and because yeah you need to write couple

388
00:24:59,248 --> 00:25:03,082
of properties and there are dependency and plugins

389
00:25:03,226 --> 00:25:07,482
but you can achieve the same of course it will be more time consuming

390
00:25:07,626 --> 00:25:10,862
to do the same yourself by hand but

391
00:25:10,996 --> 00:25:14,722
anyway this is just to win some time and here

392
00:25:14,776 --> 00:25:17,886
you can see everything has been configured.

393
00:25:18,078 --> 00:25:22,180
I mean I can already use it right now

394
00:25:22,550 --> 00:25:25,910
and I have this rest API

395
00:25:26,570 --> 00:25:29,954
and so you can see jaxrs annotations

396
00:25:30,082 --> 00:25:33,366
here and you can see this is kotlin as well

397
00:25:33,468 --> 00:25:36,934
and here more jax rs so here I will respond to

398
00:25:36,972 --> 00:25:40,758
post, here I have path and here

399
00:25:40,844 --> 00:25:44,170
I have the producers to tell what it returns.

400
00:25:45,310 --> 00:25:48,554
I don't want to delve too much into the

401
00:25:48,592 --> 00:25:51,662
code but just as it is now I can start

402
00:25:51,716 --> 00:25:57,150
a hazelcast instance and

403
00:25:57,220 --> 00:26:01,070
I can start the application as well and

404
00:26:01,140 --> 00:26:04,830
here development I'm running inside the gvm

405
00:26:05,510 --> 00:26:09,586
it will compile and after

406
00:26:09,688 --> 00:26:14,100
a few seconds it will run the application.

407
00:26:19,020 --> 00:26:23,640
So it builds the application and it

408
00:26:23,710 --> 00:26:27,592
runs it. Yeah it takes a bit of time. My machine needs

409
00:26:27,646 --> 00:26:31,132
to wake up as well so I will

410
00:26:31,186 --> 00:26:35,372
prepare the curl a it has started so

411
00:26:35,426 --> 00:26:39,388
I want to store a new URL let's say this one

412
00:26:39,474 --> 00:26:42,540
fubar I will just have

413
00:26:42,610 --> 00:26:47,280
the terminal so

414
00:26:47,350 --> 00:26:50,992
it has contacted Azel cost, it has stored this into azel cost

415
00:26:51,046 --> 00:26:54,380
and I want now to do the opposite.

416
00:26:54,460 --> 00:26:58,004
I want to get the long URL from the

417
00:26:58,042 --> 00:27:01,812
short one so I will just curl this one and

418
00:27:01,866 --> 00:27:05,572
it returns me fubar. So everything works as expected as

419
00:27:05,626 --> 00:27:10,296
expected. I'm super happy now. The idea is

420
00:27:10,478 --> 00:27:13,748
I want to build that for the cloud.

421
00:27:13,924 --> 00:27:17,610
When I scaffolded this project

422
00:27:18,060 --> 00:27:20,808
Quarkus created two docker files for me.

423
00:27:20,894 --> 00:27:24,952
One is about Docker native and

424
00:27:25,006 --> 00:27:29,144
one is about Docker GDM. So here is the Docker

425
00:27:29,192 --> 00:27:32,856
native as you can see it's pretty easy,

426
00:27:32,978 --> 00:27:36,400
you just need to follow the instructions. Mvn package so

427
00:27:36,470 --> 00:27:40,768
here it takes a long, long time. This is actually

428
00:27:40,854 --> 00:27:44,416
where the magic happens. If we can

429
00:27:44,518 --> 00:27:48,548
have a look at the size of

430
00:27:48,714 --> 00:27:55,524
those files here

431
00:27:55,642 --> 00:27:59,050
you can see that it's a bit big

432
00:27:59,580 --> 00:28:03,256
and once it has been done you

433
00:28:03,278 --> 00:28:07,364
can build the docker

434
00:28:07,412 --> 00:28:10,640
image. You won't do it explicitly,

435
00:28:10,820 --> 00:28:14,844
it will do it for you. But this is like very

436
00:28:15,042 --> 00:28:18,892
fast here. And once this is done,

437
00:28:18,946 --> 00:28:21,800
I've created a docker compose file.

438
00:28:21,960 --> 00:28:25,580
Docker compose file is very easy. It has one azal cost node

439
00:28:25,660 --> 00:28:29,010
and our application. And now if

440
00:28:29,540 --> 00:28:34,092
I docker compose it docker compose

441
00:28:34,236 --> 00:28:38,292
up I will be using this new experimental feature because

442
00:28:38,346 --> 00:28:42,196
I like to try new stuff. So now

443
00:28:42,378 --> 00:28:45,844
it's on and I can again try

444
00:28:45,882 --> 00:28:49,784
to do some curl. So I will curl to

445
00:28:49,822 --> 00:28:55,848
create a new shortened URL and

446
00:28:55,934 --> 00:29:01,004
now since

447
00:29:01,042 --> 00:29:03,740
it's randomly generated, it's a new one.

448
00:29:03,890 --> 00:29:07,244
And now I can curl to check that

449
00:29:07,282 --> 00:29:10,956
everything works. And now this is

450
00:29:11,058 --> 00:29:15,840
only a native executable that runs underneath

451
00:29:16,580 --> 00:29:20,160
and as you can see, it's a seamless experience.

452
00:29:20,310 --> 00:29:24,016
It's the same experience. The demo is

453
00:29:24,038 --> 00:29:27,644
done, now we need to do some recap.

454
00:29:27,772 --> 00:29:32,080
So my advice would be hey, between rewriting

455
00:29:32,160 --> 00:29:35,796
everything and between lift and shift, just walk the

456
00:29:35,818 --> 00:29:39,636
middle path. When possible, reuse your existing sync

457
00:29:39,668 --> 00:29:43,032
code. It took you a lot of time to write

458
00:29:43,086 --> 00:29:46,584
it, to maintain it, to test it, reuse it as much

459
00:29:46,622 --> 00:29:49,848
as possible, but leverage different

460
00:29:49,934 --> 00:29:53,992
frameworks, cloud native frameworks that know how

461
00:29:54,046 --> 00:29:57,544
to mess to make the best usage of it and think

462
00:29:57,582 --> 00:30:01,032
about return over investment. Thanks for

463
00:30:01,086 --> 00:30:04,604
attention. You can read my blog, you can follow me on Twitter,

464
00:30:04,732 --> 00:30:08,876
you can read more about the Qualcomm and Hazelcast integration.

465
00:30:09,068 --> 00:30:12,780
More interestingly, you can also check the git repository.

466
00:30:12,860 --> 00:30:16,128
So the demo that I've showed you is publicly available.

467
00:30:16,294 --> 00:30:19,452
And if you got interested in Hazelcast,

468
00:30:19,516 --> 00:30:22,896
please join our slack. Thanks a lot and

469
00:30:22,918 --> 00:30:23,390
have a good day.

