1
00:00:00,250 --> 00:00:00,800
You.

2
00:00:22,930 --> 00:00:26,182
Hello everyone. Thank you for joining me today

3
00:00:26,236 --> 00:00:29,990
to observe this talk. I'm delighted to be here at

4
00:00:30,060 --> 00:00:33,894
Conf 42 observability 2023.

5
00:00:34,092 --> 00:00:37,026
Well, Star wars is a godsend,

6
00:00:37,138 --> 00:00:40,934
but in the cloud world failures are always

7
00:00:41,052 --> 00:00:44,786
around the corner. Unfortunately, we cannot prevent

8
00:00:44,818 --> 00:00:48,054
all failures, but we can try to detect them as soon

9
00:00:48,092 --> 00:00:51,870
as possible and they are quick lay this is where

10
00:00:52,020 --> 00:00:55,694
observability comes in and observability is your

11
00:00:55,732 --> 00:00:58,814
friend from day one. In this talk

12
00:00:58,932 --> 00:01:03,134
I will give an overview of how to set up dashboards

13
00:01:03,182 --> 00:01:06,866
and alarms in AWS Cloudwatch for

14
00:01:06,968 --> 00:01:11,138
serverless applications. I will also introduce our

15
00:01:11,224 --> 00:01:14,398
open source observability plugin, Silicwatch,

16
00:01:14,494 --> 00:01:18,514
which automates evade the pain of setting

17
00:01:18,562 --> 00:01:21,842
up dashboards and alarms in Cloudwatch

18
00:01:21,986 --> 00:01:26,070
and enables better levels of observability.

19
00:01:27,850 --> 00:01:30,494
I'm Duran from Forturon.

20
00:01:30,642 --> 00:01:34,602
I have over one year and under two

21
00:01:34,656 --> 00:01:37,690
years working experience in cloud.

22
00:01:38,030 --> 00:01:41,680
I actually have one year and eight months experience.

23
00:01:42,130 --> 00:01:46,014
Maybe I should have said that exact number, but I

24
00:01:46,052 --> 00:01:49,518
couldn't because as we all may agree,

25
00:01:49,604 --> 00:01:53,918
we women like talking, right? But unfortunately

26
00:01:54,094 --> 00:01:57,390
we cannot see this happening in technical events.

27
00:01:57,550 --> 00:02:01,406
I'm here and I really want to encourage other females

28
00:02:01,438 --> 00:02:04,274
to join me. Well,

29
00:02:04,472 --> 00:02:08,322
I'm enthusiastic about serverless observability

30
00:02:08,466 --> 00:02:11,746
and cows engineering. I recently

31
00:02:11,858 --> 00:02:15,234
maintained our open source observability plugin,

32
00:02:15,282 --> 00:02:18,220
Silicwatch, which I will be talking about.

33
00:02:19,230 --> 00:02:23,466
Please feel free to get in touch with me and ask any questions

34
00:02:23,648 --> 00:02:27,338
that you have. See my Twitter, LinkedIn and

35
00:02:27,424 --> 00:02:31,114
GitHub account. Is there a little bit

36
00:02:31,152 --> 00:02:35,002
about Fourtheorem? Fourtheorem is AWS

37
00:02:35,066 --> 00:02:39,162
call synthetic partner and doing a lot of work on AWS.

38
00:02:39,306 --> 00:02:43,358
If you want to learn more about Forturm please visit the websites,

39
00:02:43,454 --> 00:02:47,550
but I wanted to highlight some works we are providing

40
00:02:47,630 --> 00:02:52,078
for our clients. These are cloud migrations,

41
00:02:52,254 --> 00:02:54,670
training and cloud enablement,

42
00:02:54,830 --> 00:02:58,702
building high performance serverless applications and cutting

43
00:02:58,766 --> 00:03:02,402
cloud costs. Our architects write books

44
00:03:02,466 --> 00:03:06,274
and we are maintaining bunch of open source projects.

45
00:03:06,402 --> 00:03:10,022
These are medium, it's the Lambda Middleware

46
00:03:10,086 --> 00:03:13,274
framework and Silicstarter is a complete

47
00:03:13,392 --> 00:03:17,350
starter project for serverless applications on AWS.

48
00:03:17,510 --> 00:03:20,794
And Silicwatch is observability plugin

49
00:03:20,842 --> 00:03:24,318
which I will be talking about and we are also running

50
00:03:24,404 --> 00:03:27,710
weekly podcasts on AWS topics.

51
00:03:28,610 --> 00:03:32,442
I highly recommend you to check the website which

52
00:03:32,516 --> 00:03:35,140
is awsbytes.com.

53
00:03:36,790 --> 00:03:40,050
Let's start with the definition of observability.

54
00:03:41,270 --> 00:03:44,530
Observability is the ability to

55
00:03:44,600 --> 00:03:48,070
measure the internal state of a system

56
00:03:48,220 --> 00:03:51,186
by examining its outputs.

57
00:03:51,378 --> 00:03:55,030
There are three major pillars of observability.

58
00:03:55,370 --> 00:04:00,154
These are logs, metrics and tracing a

59
00:04:00,192 --> 00:04:03,494
log is an immutable timestamp

60
00:04:03,542 --> 00:04:07,500
record of discrete events that happened over time.

61
00:04:08,110 --> 00:04:11,486
Metrics are all the analytics around

62
00:04:11,588 --> 00:04:15,598
and all the data you are gathering so you can see

63
00:04:15,764 --> 00:04:19,246
do I have a problem? How full of my disk drive?

64
00:04:19,348 --> 00:04:22,942
How much cpu am I using? A trace

65
00:04:23,006 --> 00:04:26,850
represents the end to end journey of a request through

66
00:04:26,920 --> 00:04:30,740
a distributed system. So you can see where is the problem

67
00:04:32,070 --> 00:04:35,334
in AWS native, the main tool for

68
00:04:35,372 --> 00:04:39,394
observability is Cloudwatch and what Cloudwatch

69
00:04:39,442 --> 00:04:43,554
gives you. Logs with insights metrics,

70
00:04:43,682 --> 00:04:47,886
dashboards, alarms, cannabis and distributed

71
00:04:47,938 --> 00:04:51,338
tracing with x ray let's talk a

72
00:04:51,344 --> 00:04:55,322
little bit more about Cloudwatch and what Cloudwatch gives you

73
00:04:55,376 --> 00:04:58,922
out of the box first thing we need to understand

74
00:04:59,056 --> 00:05:02,858
it's a toolkit to allow you to build observability

75
00:05:02,954 --> 00:05:04,240
solutions yourself.

76
00:05:05,570 --> 00:05:09,246
Metrics are automatically generated for all services,

77
00:05:09,348 --> 00:05:12,646
which is great. Lots of dashboards,

78
00:05:12,698 --> 00:05:17,202
but oriented by service, not by application and

79
00:05:17,256 --> 00:05:21,042
zero alarms, but of the box which actually makes

80
00:05:21,096 --> 00:05:24,846
sense because the alarming you really want to do

81
00:05:24,968 --> 00:05:28,690
based on understanding your application context,

82
00:05:28,770 --> 00:05:34,914
like at what level you want to alert on Cloudwatch

83
00:05:35,042 --> 00:05:38,250
is already a super powerful tool,

84
00:05:38,320 --> 00:05:42,330
but setting up dashboards and alarms in Cloudwatch is

85
00:05:42,480 --> 00:05:46,634
a bit of pain and requires some work. Like you

86
00:05:46,672 --> 00:05:49,526
need to research and understand available metrics.

87
00:05:49,638 --> 00:05:53,402
You need to decide your thresholds, at what level you want to alert

88
00:05:53,466 --> 00:05:57,214
on. You need to write infrastructure as code for

89
00:05:57,252 --> 00:06:01,054
your application dashboards as well as for

90
00:06:01,092 --> 00:06:04,690
your service metric alarms. And every time

91
00:06:04,760 --> 00:06:09,010
you add a new service to your application, or even

92
00:06:09,080 --> 00:06:12,974
a NIV lambda function, you need to update your dashboards

93
00:06:13,022 --> 00:06:16,774
and alarms and you need to make sure that you do

94
00:06:16,812 --> 00:06:19,400
that for each stack in your application.

95
00:06:20,970 --> 00:06:24,726
To be honest, that's a lot of work, but it

96
00:06:24,748 --> 00:06:27,590
is really worth it to have the observability.

97
00:06:28,590 --> 00:06:32,966
I highly recommend you to treat your observability

98
00:06:33,078 --> 00:06:36,522
as you treat your unit. Test, maintain it,

99
00:06:36,656 --> 00:06:40,140
current feed it, it will definitely pay you back.

100
00:06:41,090 --> 00:06:45,022
Thankfully, there are great places that we can research and

101
00:06:45,076 --> 00:06:48,570
understand available metrics. The AWS

102
00:06:48,650 --> 00:06:52,202
well architected framework is very well written

103
00:06:52,346 --> 00:06:56,014
and the operational exalampillar is the one covered

104
00:06:56,062 --> 00:07:00,270
the observability. If you are doing serverless

105
00:07:00,350 --> 00:07:03,870
work, definitely look at the serverless lines

106
00:07:03,950 --> 00:07:08,034
which applies these six pillars. It provides

107
00:07:08,082 --> 00:07:10,594
very good guidance on metrics,

108
00:07:10,722 --> 00:07:13,990
but you still need to pick your thresholds.

109
00:07:14,890 --> 00:07:19,290
Okay, but which metrics are really essential?

110
00:07:19,870 --> 00:07:23,482
And here is the golden signals come to

111
00:07:23,536 --> 00:07:27,850
stage. These are the four key metrics.

112
00:07:28,190 --> 00:07:32,910
The first metric you want to look for is called latency.

113
00:07:33,570 --> 00:07:37,422
It is the amount of time it takes to

114
00:07:37,476 --> 00:07:41,930
service a request. The next metric is traffic.

115
00:07:42,090 --> 00:07:45,234
It is the volume of requests that a

116
00:07:45,272 --> 00:07:49,982
system is currently handling and errors.

117
00:07:50,126 --> 00:07:54,274
It is the rate of request that fail and

118
00:07:54,312 --> 00:07:58,258
finally, saturation is the percentage

119
00:07:58,354 --> 00:08:01,606
of available resources being

120
00:08:01,708 --> 00:08:02,870
consumed.

121
00:08:04,570 --> 00:08:08,746
So this is what infrastructure as code look like.

122
00:08:08,848 --> 00:08:12,246
And this is an alarm for lambda trotolink

123
00:08:12,278 --> 00:08:15,946
metric. So there is some work

124
00:08:16,048 --> 00:08:19,926
you need to do if you are going to write those for

125
00:08:20,048 --> 00:08:22,800
every single lambda function in your application.

126
00:08:24,450 --> 00:08:28,494
This is certainly a beautiful journey, but a long one.

127
00:08:28,612 --> 00:08:32,126
What if you don't have the time or resources to

128
00:08:32,148 --> 00:08:35,042
focus on that right now? Okay,

129
00:08:35,176 --> 00:08:36,900
can we automate this?

130
00:08:38,630 --> 00:08:42,226
Please keep in mind that question, but let's first understand how

131
00:08:42,248 --> 00:08:45,942
the system works when we deploy applications to

132
00:08:45,996 --> 00:08:49,650
AWS. We typically use infrastructure

133
00:08:49,730 --> 00:08:53,362
as code and most tooling for AWS

134
00:08:53,426 --> 00:08:56,758
infrastructure as code is built around cloud

135
00:08:56,844 --> 00:09:00,262
formation stack. This can be serverless framework,

136
00:09:00,406 --> 00:09:02,970
AWS, SAM and CDK,

137
00:09:03,710 --> 00:09:07,402
and every application composed one

138
00:09:07,456 --> 00:09:11,370
or more stacks and each stack is set of

139
00:09:11,440 --> 00:09:15,026
resources like lambda function, SQL, SQL,

140
00:09:15,078 --> 00:09:17,200
dynamodb, table, so on.

141
00:09:17,970 --> 00:09:21,120
So before we deploy that,

142
00:09:21,730 --> 00:09:25,966
can we see which services should have dashboards

143
00:09:26,078 --> 00:09:29,890
and alarms and magically generate them

144
00:09:30,040 --> 00:09:33,810
without going through the whole bunch of work every

145
00:09:33,880 --> 00:09:37,794
time? And the answer is yes

146
00:09:37,832 --> 00:09:41,350
we can. At fourtheorem we are really

147
00:09:41,420 --> 00:09:45,206
obsessed with observability and that obsession lead us

148
00:09:45,228 --> 00:09:48,826
to build silicwatch. So the idea of the

149
00:09:48,848 --> 00:09:52,618
Silicwatch is just put the plugin into your system,

150
00:09:52,784 --> 00:09:55,910
it will automatically look into your stack,

151
00:09:56,070 --> 00:09:58,758
enrich it with cloud formation,

152
00:09:58,854 --> 00:10:02,414
dashboards and alarms for the resources you are

153
00:10:02,452 --> 00:10:06,046
using. So as simple as possible

154
00:10:06,228 --> 00:10:10,766
with the minimum amount of work to get observability up

155
00:10:10,788 --> 00:10:15,086
and going. So how Silicwatch

156
00:10:15,118 --> 00:10:19,502
does work if we look at the serverless framework

157
00:10:19,646 --> 00:10:23,774
and AWS? Sam both of those are Yaml

158
00:10:23,822 --> 00:10:27,302
configurations. When we run a deploy with

159
00:10:27,356 --> 00:10:30,978
these frameworks, what happens behind the scenes?

160
00:10:31,154 --> 00:10:35,400
It takes your yAml configuration and

161
00:10:36,330 --> 00:10:40,186
builds a big JSON, then slic the cloud

162
00:10:40,288 --> 00:10:44,038
formation which then deploys

163
00:10:44,214 --> 00:10:48,330
and updates your resources in AWS.

164
00:10:49,390 --> 00:10:53,210
So what Silicwatch does bit to hook

165
00:10:53,290 --> 00:10:57,326
into framework lifecycle events on

166
00:10:57,348 --> 00:11:01,038
a deploy and interpret the

167
00:11:01,124 --> 00:11:04,642
cloud formation JSON for

168
00:11:04,696 --> 00:11:08,766
each service and creates dashboards

169
00:11:08,798 --> 00:11:11,300
and alarms for our application.

170
00:11:12,150 --> 00:11:15,542
So augmented JSON, you go

171
00:11:15,596 --> 00:11:18,834
from big JSON to much bigger JSON.

172
00:11:18,962 --> 00:11:23,030
This is what then gets deployed into AWS

173
00:11:24,330 --> 00:11:27,678
and this is how you get observability.

174
00:11:27,794 --> 00:11:30,060
Bake it in from day one.

175
00:11:31,310 --> 00:11:35,446
And of course Cloudwatch is fully configurable.

176
00:11:35,638 --> 00:11:39,594
You can disable what you don't like. Even you

177
00:11:39,632 --> 00:11:43,066
can configure the thresholds if the defaults

178
00:11:43,098 --> 00:11:46,638
don't suit you. Here is the QR code

179
00:11:46,804 --> 00:11:50,670
for the website and the link for the repository.

180
00:11:51,010 --> 00:11:54,606
So please visit the repository and read details

181
00:11:54,638 --> 00:11:57,700
on the readme page. If you have any questions,

182
00:11:58,070 --> 00:12:02,660
please talk to us. We will be more than happy to chat about it

183
00:12:03,510 --> 00:12:07,042
before Silicwatch if you go to AWS

184
00:12:07,106 --> 00:12:10,726
Cloudwatch console, you see no alarms, just a

185
00:12:10,748 --> 00:12:14,502
black screen. But if you add this plugin into

186
00:12:14,556 --> 00:12:17,850
your project, you will get a wave of

187
00:12:17,920 --> 00:12:21,350
relevant alarms created for the resources

188
00:12:21,430 --> 00:12:25,286
from our stack and you can even drill

189
00:12:25,318 --> 00:12:29,434
down the c alarms details. And this

190
00:12:29,472 --> 00:12:32,990
is the complete dashboards with all

191
00:12:33,060 --> 00:12:37,310
the relevant metrics from our stack. So everything

192
00:12:37,460 --> 00:12:41,278
is on a page. You can observe the whole system

193
00:12:41,364 --> 00:12:45,102
just by scrolling up and down rather than jumping

194
00:12:45,166 --> 00:12:49,362
within console windows. And so we

195
00:12:49,416 --> 00:12:53,486
understand how the whole distributed system is connected

196
00:12:53,598 --> 00:12:57,160
and what are the signs when something goes wrong.

197
00:12:58,650 --> 00:13:02,150
The other key feature is to be able

198
00:13:02,220 --> 00:13:06,454
to have alerting delivery to a channel just

199
00:13:06,492 --> 00:13:09,830
by simply adding SNS topic to the configuration.

200
00:13:09,990 --> 00:13:13,706
Silicwatch by default then deliver all of

201
00:13:13,728 --> 00:13:18,022
your alarms to that SNS topic and you can integrate

202
00:13:18,086 --> 00:13:21,500
this SNS topic with monitoring tools like

203
00:13:22,110 --> 00:13:24,806
AWS, chatbot, Opsgene,

204
00:13:24,918 --> 00:13:27,900
Pagerduty, whatever suits you.

205
00:13:28,510 --> 00:13:32,458
So just wrap up then. When you are building

206
00:13:32,564 --> 00:13:36,002
event driven systems, you need to be able

207
00:13:36,056 --> 00:13:39,426
to understand what's going on and you really want

208
00:13:39,448 --> 00:13:42,898
to spot when services are failing before users do.

209
00:13:43,064 --> 00:13:46,098
So. This is really what observability

210
00:13:46,194 --> 00:13:50,214
all about, and observability is your friend from

211
00:13:50,252 --> 00:13:53,766
day one. I hope this is the one takeaway you are

212
00:13:53,788 --> 00:13:57,718
going to get from this talk. Cloudwatch is

213
00:13:57,804 --> 00:14:01,602
already a super powerful tool, but it's a toolkit.

214
00:14:01,666 --> 00:14:03,880
You need to put effort into it.

215
00:14:04,330 --> 00:14:08,466
Automation types away the pain of setting up dashboards

216
00:14:08,498 --> 00:14:11,822
and alarms in cloud to watch, and tools like

217
00:14:11,876 --> 00:14:14,858
silicon gives you that automation.

218
00:14:15,034 --> 00:14:17,802
So we love to hear your feedback.

219
00:14:17,946 --> 00:14:20,000
Let's make it better together.

220
00:14:21,570 --> 00:14:22,462
Thank you.

