1
00:00:27,810 --> 00:00:31,586
Hi everyone, thank you for joining me today for a session on how we created

2
00:00:31,618 --> 00:00:34,966
a learning culture here at Perimeterx. And when I say

3
00:00:34,988 --> 00:00:38,850
a learning culture, I mean instilling a healthy culture of debriefs

4
00:00:38,930 --> 00:00:42,310
and positive discussions that ultimately minimize issues

5
00:00:42,380 --> 00:00:45,414
and backfires. Internally, I'm excited to share with you our

6
00:00:45,452 --> 00:00:48,690
journey here at conference U. My name is Amir Shaked.

7
00:00:48,770 --> 00:00:51,966
I lead the research in engineering team here at Perimeterx and

8
00:00:51,988 --> 00:00:55,646
I'm an experienced breaker of production environments. We are a

9
00:00:55,668 --> 00:00:59,118
software as a service company providing solutions to protect

10
00:00:59,284 --> 00:01:02,586
modern web apps at scale behind the scenes. We have

11
00:01:02,628 --> 00:01:06,158
a cloud based microservices environment on a large scale,

12
00:01:06,334 --> 00:01:09,758
around 15,000 cores, 300 microservices.

13
00:01:09,934 --> 00:01:13,234
And like any other production environment, we too see

14
00:01:13,272 --> 00:01:16,674
features all the time. Today we're going to cover our

15
00:01:16,712 --> 00:01:21,122
journey through the process of change towards creating a healthy and supportive

16
00:01:21,186 --> 00:01:24,614
learning culture by taking those failures and building on

17
00:01:24,652 --> 00:01:28,018
those. This is the essence of chaos engineering, and while a

18
00:01:28,044 --> 00:01:32,042
lot can be said on the technical aspects of randomly breaking things

19
00:01:32,096 --> 00:01:36,454
to find gaps, reality can always surprise you. Every production

20
00:01:36,502 --> 00:01:39,958
environment I worked on experienced issues, sometimes due

21
00:01:39,974 --> 00:01:44,046
to code changes, other times due to third party providers having their entire

22
00:01:44,148 --> 00:01:47,662
infra crashing, leading us to seek ways

23
00:01:47,716 --> 00:01:51,166
to learn and improve constantly on how we

24
00:01:51,188 --> 00:01:54,254
do things, how we protect the system, and at the end of it,

25
00:01:54,292 --> 00:01:58,046
how do we provide the best service to our customers. When I joined

26
00:01:58,078 --> 00:02:01,246
the company, I set a destination of wishing to see rapid

27
00:02:01,278 --> 00:02:04,606
deployments, being able to provide the most adequate

28
00:02:04,638 --> 00:02:08,254
and up to date solution. In our case, in a world of moving

29
00:02:08,312 --> 00:02:11,526
target defense where the scope of features changes all the

30
00:02:11,548 --> 00:02:15,462
time due to threat actors, being able to deploy changes quickly is a major

31
00:02:15,516 --> 00:02:18,406
factor in our ability to provide a competitive product.

32
00:02:18,508 --> 00:02:22,314
In fact, oftentimes a good DevOps culture can be the

33
00:02:22,352 --> 00:02:26,154
differentiator and act as a competitive edge for your company. We wanted

34
00:02:26,192 --> 00:02:29,434
to have zero downtime and have errors or mistakes happen only

35
00:02:29,472 --> 00:02:32,442
once, so we'll have a chance to learn, but not twice,

36
00:02:32,506 --> 00:02:36,062
meaning we didn't learn the first time. However, the starting

37
00:02:36,116 --> 00:02:39,518
points wasn't that bright. We saw a few repeating issues,

38
00:02:39,684 --> 00:02:42,994
minor things using failures in production due to code

39
00:02:43,032 --> 00:02:46,674
changes or configuration changes, being too

40
00:02:46,712 --> 00:02:50,398
prone to incidents in the underlying cloud environments

41
00:02:50,574 --> 00:02:54,062
we were using affecting our stability. Those two factors

42
00:02:54,126 --> 00:02:57,438
were very concerning when we looked at how we are going to

43
00:02:57,464 --> 00:03:01,078
grow and scale, looking at ten, x and 100 ticks ahead.

44
00:03:01,164 --> 00:03:05,206
But maybe a minor risk today will likely be catastrophic in the

45
00:03:05,228 --> 00:03:08,600
future and that future can be next week

46
00:03:09,130 --> 00:03:12,326
if you're in a fast growing company. While those were concerning the

47
00:03:12,348 --> 00:03:15,786
last one really prevented us from improving, and that's the fear of

48
00:03:15,808 --> 00:03:19,818
judgment. Whenever we dove into trying to understand issues we has,

49
00:03:19,904 --> 00:03:23,482
there were pushbacks. Why do we ask so many questions? Do we not trust

50
00:03:23,536 --> 00:03:27,198
our people? Why don't we just let them just do their job? They know what

51
00:03:27,204 --> 00:03:30,654
they're doing, and that's a problem. If you have team members afraid or

52
00:03:30,692 --> 00:03:34,154
feeling they're being judged or generally insecure in their work

53
00:03:34,212 --> 00:03:38,274
environment, they're going to underperform. And as a team,

54
00:03:38,472 --> 00:03:41,854
you will not be able to learn and adapt. In essence,

55
00:03:41,902 --> 00:03:45,186
this is the whole point of this exercise. So with that

56
00:03:45,208 --> 00:03:49,174
starting point and the destination in mind, we set off to establish a new

57
00:03:49,292 --> 00:03:53,094
process within the team of how we analyze every kind of

58
00:03:53,132 --> 00:03:57,154
failure. What do we do during the analysis? How to conduct a debriefs

59
00:03:57,202 --> 00:03:59,980
and the follow up. Why do we focus on the process?

60
00:04:00,350 --> 00:04:04,010
Because a bad system will beat a good person every

61
00:04:04,080 --> 00:04:07,318
time. And assuming you have the right foundation of engineers,

62
00:04:07,414 --> 00:04:10,506
if you fix the process, good things will happen.

63
00:04:10,608 --> 00:04:13,806
So let's start with an example, which I'm sure any of

64
00:04:13,828 --> 00:04:17,454
us who own production environments experienced, either the same or similar,

65
00:04:17,572 --> 00:04:21,166
or can relate in some way. And I'll start with

66
00:04:21,348 --> 00:04:24,686
a use case and how it relates to the process. So you have

67
00:04:24,708 --> 00:04:28,306
an incident. A customer is complaining about something misbehaving in

68
00:04:28,328 --> 00:04:31,906
their environment, and they think it might be related to you, and they're calling support.

69
00:04:32,008 --> 00:04:36,926
Support is trying to analyze and understand, and after a while realizing

70
00:04:36,958 --> 00:04:39,862
they don't know what to do with it, they will page the engineering team,

71
00:04:39,916 --> 00:04:43,286
as they should. The engineering team wakes up because it's the

72
00:04:43,308 --> 00:04:47,094
middle of the night and they're in another time zone. They work

73
00:04:47,132 --> 00:04:49,926
to analyze what's going on. They find a problem,

74
00:04:50,028 --> 00:04:53,258
they fix it. They might resent the fact that they had to fix it in

75
00:04:53,264 --> 00:04:56,426
the middle of the night, obviously, and they go back to sleep and move

76
00:04:56,448 --> 00:05:00,074
on to other tasks the next day. If that's the end of it, you are

77
00:05:00,112 --> 00:05:03,734
certain to experience similar issues again from similar root causes.

78
00:05:03,862 --> 00:05:07,182
So you should ask yourselves, why is it happening? What can we do

79
00:05:07,236 --> 00:05:11,210
better? What can we do? To avoid seeing this issue in any potential

80
00:05:11,290 --> 00:05:15,146
similar case in the future? You have to set time to analyze

81
00:05:15,178 --> 00:05:18,482
after the fact. This is the only way to make sure root causes are found

82
00:05:18,536 --> 00:05:22,370
and process problems are improved. Lessons are taken

83
00:05:22,440 --> 00:05:25,650
and can be learned from a case in hand. We actually

84
00:05:25,720 --> 00:05:29,254
had a code was deployed into production by mistake. How can it

85
00:05:29,292 --> 00:05:33,110
happen? Well, we had an engineer merging the code into the main branch.

86
00:05:33,450 --> 00:05:37,030
The code failed for some of the tests. But it was late at night and

87
00:05:37,100 --> 00:05:40,838
they decided to leave as it is and keep working tomorrow,

88
00:05:40,934 --> 00:05:44,550
knowing that code will not be deployed from main to production.

89
00:05:44,630 --> 00:05:48,278
What he didn't know has there was a process added by the DevOps

90
00:05:48,294 --> 00:05:51,902
engineer earlier that week that automatically deployed that

91
00:05:51,956 --> 00:05:55,966
specific code to production when there was a

92
00:05:55,988 --> 00:05:59,886
need to auto scale that specific microservice. And that night

93
00:05:59,988 --> 00:06:03,422
we had a specific usage increase, spinning up more

94
00:06:03,476 --> 00:06:07,410
services with the buggy code. Now here lies the issue. We can focus

95
00:06:07,480 --> 00:06:11,038
a lot on why the buggy code was merged into main, why the auto

96
00:06:11,054 --> 00:06:14,690
scale has added. If you focus too much on why certain

97
00:06:14,760 --> 00:06:18,342
someone did something or didn't do, don't they understand

98
00:06:18,476 --> 00:06:22,130
what they're going to. We're going to miss the entire issue of wait a minute,

99
00:06:22,210 --> 00:06:25,922
the process is flawed. How could an engineer

100
00:06:25,986 --> 00:06:29,538
actually merge code into production not understanding that it's going to be

101
00:06:29,564 --> 00:06:32,794
deployed? There is a meaning behind specific repositories or

102
00:06:32,832 --> 00:06:35,382
specific ways you manage the code, branches,

103
00:06:35,446 --> 00:06:38,842
naming conventions and all of that in our case.

104
00:06:38,976 --> 00:06:42,786
So if you fix the process, the problem aligns.

105
00:06:42,918 --> 00:06:45,998
In this specific case, aligning all engineers to understand that the

106
00:06:46,004 --> 00:06:49,582
main branch equal deployment to production, no matter which service.

107
00:06:49,636 --> 00:06:53,214
That is the way to approaching merging branches to the main

108
00:06:53,252 --> 00:06:56,880
branch will change drastically. Fixing this with the process

109
00:06:57,430 --> 00:07:01,074
not overjudging what a specific employee did or didn't do when they were

110
00:07:01,112 --> 00:07:04,706
just trying to do their job will prevent this from happening again.

111
00:07:04,808 --> 00:07:08,342
So how do we learn from such an incident? Well, there are four

112
00:07:08,396 --> 00:07:10,978
steps to the process. We start with the incident,

113
00:07:11,074 --> 00:07:14,406
obviously, and the more mature you

114
00:07:14,428 --> 00:07:17,734
become as an organization and learning culture, the team

115
00:07:17,772 --> 00:07:21,142
will create an incidence from supposedly minor things just

116
00:07:21,196 --> 00:07:24,986
for the follow up and learning from them, which is a really healthy stage to

117
00:07:25,008 --> 00:07:28,730
be at. You provide an immediate resolution to the issue and then

118
00:07:28,800 --> 00:07:32,358
24 to 72 hours afterwards, really depending

119
00:07:32,374 --> 00:07:36,190
on how much time they had to sleep and work hours.

120
00:07:36,260 --> 00:07:39,054
You're going to do a debriefs and we're going to talk a bit more about

121
00:07:39,092 --> 00:07:42,382
that meeting and how to conduct it in the next slide. Two weeks

122
00:07:42,436 --> 00:07:46,434
after the meeting, we do a checkpoint to review the action items that came

123
00:07:46,472 --> 00:07:50,386
from the debrief and make sure things are incorporated, especially the

124
00:07:50,408 --> 00:07:54,274
immediate tasks. So let's talk about conducting a debrief now.

125
00:07:54,312 --> 00:07:58,374
This isn't the standard retrospect, as it's usually following an incident that may

126
00:07:58,412 --> 00:08:02,418
have been even very severe in impact. When do you debriefs?

127
00:08:02,514 --> 00:08:06,134
Every time you think the process and or the system did not

128
00:08:06,172 --> 00:08:09,914
perform well enough. I ask a lot of questions. The questions I

129
00:08:09,952 --> 00:08:12,986
ask are first of all, what happened? Let's have

130
00:08:13,008 --> 00:08:16,186
a detailed timeline of events from the moment it really started.

131
00:08:16,288 --> 00:08:19,674
Not the moment somebody complained, not when the customer

132
00:08:19,792 --> 00:08:23,158
or somebody else raised the alarm, but from the moment the issue really started to

133
00:08:23,184 --> 00:08:26,538
roll into production, when the code was merged, when we changed

134
00:08:26,554 --> 00:08:30,062
the query, when the third party provider we were using started

135
00:08:30,116 --> 00:08:33,962
to crash and updated their own status page. What's the impact?

136
00:08:34,106 --> 00:08:37,358
Also a very important factor in creating a learning environment.

137
00:08:37,454 --> 00:08:40,706
It helps to convey a message to your entire engineering team by

138
00:08:40,728 --> 00:08:45,070
understanding what is the actual impact, be it cost wise,

139
00:08:45,150 --> 00:08:48,838
customers affected complaints, get a full

140
00:08:48,924 --> 00:08:52,374
scope as you can. That is vital to help everyone understand

141
00:08:52,492 --> 00:08:56,166
why we're delving into the problem and why it is so important.

142
00:08:56,348 --> 00:08:59,670
It's not just that they wake up in the middle of the night

143
00:08:59,740 --> 00:09:03,514
being paged and it's bothering them. You have to understand the full

144
00:09:03,552 --> 00:09:06,406
picture of where everything is related and connected.

145
00:09:06,518 --> 00:09:09,594
Now, after you have the story and the facts, you start to

146
00:09:09,632 --> 00:09:13,102
analyze and brainstorm how to handle this better in the future.

147
00:09:13,236 --> 00:09:17,534
First, two questions I use as leading into

148
00:09:17,572 --> 00:09:21,022
the discussion have we identified the issue in under a certain

149
00:09:21,076 --> 00:09:24,366
amount of time? Let's say 5 minutes. Why 5 minutes?

150
00:09:24,468 --> 00:09:28,094
Well, it's not arbitrary. We want to have a specific goal

151
00:09:28,142 --> 00:09:32,322
on how fast we do things. So did we identifying the issue in under

152
00:09:32,376 --> 00:09:36,114
5 minutes? Sometimes we did, sometimes we didn't. Did we fix the problem

153
00:09:36,152 --> 00:09:39,750
in under an hour? Completely fixed. Did we do it under 10 minutes?

154
00:09:39,900 --> 00:09:43,366
Do we need to do anything at all? Was it completely resolved automatically? And there

155
00:09:43,388 --> 00:09:46,486
was no point of us trying to analyze anything once we have

156
00:09:46,508 --> 00:09:50,246
the answer. Once you answer no to any of these,

157
00:09:50,348 --> 00:09:53,786
the follow up should be okay, we understand the full picture. What do

158
00:09:53,808 --> 00:09:56,266
we need to do? What do we need to change? What do we need to

159
00:09:56,288 --> 00:09:59,926
develop so we will be able to answer yes to the following

160
00:09:59,958 --> 00:10:04,698
two questions. This part has seemingly simple led

161
00:10:04,714 --> 00:10:08,282
to a drastic culture change over time. Creating the framework

162
00:10:08,346 --> 00:10:12,094
in that way helps convey to everyone the focus is on the process and

163
00:10:12,132 --> 00:10:15,698
the system. It's not about anyone specific. Whoever caused the

164
00:10:15,704 --> 00:10:19,234
incident today is irrelevant tomorrow it can be a different

165
00:10:19,352 --> 00:10:22,978
employee entirely. Now, any culture change mistakes

166
00:10:23,064 --> 00:10:26,306
time. We had some things we had

167
00:10:26,328 --> 00:10:30,274
to resolve along the way, and I already mentioned a few of those solutions

168
00:10:30,322 --> 00:10:33,894
on how we did it. First of all was lack of trust.

169
00:10:34,012 --> 00:10:37,526
Especially if you have a new manager coming in. Trying to instill a new process,

170
00:10:37,628 --> 00:10:41,338
trying to change the culture, takes time. Lack of trust

171
00:10:41,424 --> 00:10:45,066
could be in the process, could be in questions people could ask themselves.

172
00:10:45,168 --> 00:10:48,106
Is there a need, an agenda perhaps behind it.

173
00:10:48,208 --> 00:10:51,486
How would it not become the blame game we had before?

174
00:10:51,668 --> 00:10:55,550
This can be completely resolved if you do properly and

175
00:10:55,620 --> 00:10:58,894
consistently. What often happens when you're trying to

176
00:10:58,932 --> 00:11:02,206
understand why a problem occurred. People might say he

177
00:11:02,228 --> 00:11:06,098
or she did something at fault and the reissue is something else.

178
00:11:06,264 --> 00:11:10,126
Also important to notice, not following up on action items,

179
00:11:10,238 --> 00:11:13,842
something that's really annoying. You do the process, you review

180
00:11:13,896 --> 00:11:16,718
everything. You set action items,

181
00:11:16,894 --> 00:11:19,798
and then you have the same problem all over again a few weeks or a

182
00:11:19,804 --> 00:11:23,746
few months later. How did it happen? So you see that the action items

183
00:11:23,778 --> 00:11:27,414
that were set weren't being followed up on. The resolution we had was

184
00:11:27,452 --> 00:11:30,566
very simple. We established the checkpoints. You have the debriefs.

185
00:11:30,598 --> 00:11:33,894
You set checkpoints every two, three weeks, whatever time frame is relevant

186
00:11:33,942 --> 00:11:37,770
for you to make sure that the immediate action items are handled

187
00:11:38,510 --> 00:11:42,454
personally. What I also do is I label each Jira ticket with a debrief

188
00:11:42,502 --> 00:11:46,014
and do a monthly review of all the debrief items to see what is

189
00:11:46,052 --> 00:11:49,386
left open, be it irrelevant or something that had to be moved

190
00:11:49,498 --> 00:11:53,354
upwards. And another critical move we've made to resolve

191
00:11:53,402 --> 00:11:56,734
future issues is implementing a proper communication on wide

192
00:11:56,782 --> 00:12:00,674
scale. Make sure everybody knows there was a debrief where

193
00:12:00,712 --> 00:12:04,210
we are publishing our debriefs very widely within the company,

194
00:12:04,360 --> 00:12:07,826
exposed to all the employees with the details of

195
00:12:07,848 --> 00:12:11,506
what happened, what we're going to do to make it better. This helps bridge

196
00:12:11,538 --> 00:12:14,390
the gap of trust, if you might have it,

197
00:12:14,460 --> 00:12:18,362
and show that everything is very transparent and visible. We saw

198
00:12:18,416 --> 00:12:21,820
that if you're not asking the right questions,

199
00:12:22,910 --> 00:12:27,002
the focus might be the problem. And giving a wide audience can

200
00:12:27,056 --> 00:12:31,020
help give another view with more audience to

201
00:12:31,790 --> 00:12:35,066
identify gaps that might have been missed within the bigger

202
00:12:35,098 --> 00:12:38,494
picture. Now there are four main things I would want you to take

203
00:12:38,532 --> 00:12:42,074
from this session on how to conduct a debriefs listed

204
00:12:42,122 --> 00:12:45,370
here. The first would be avoid blame. Avoid it altogether.

205
00:12:45,530 --> 00:12:49,166
And if you see blame starting to happen within a meeting, within VRIF

206
00:12:49,198 --> 00:12:52,286
meetings, you need to interfere and stop it politely.

207
00:12:52,398 --> 00:12:55,794
Always be calm, but you need to stop it to make sure it's on track

208
00:12:55,832 --> 00:12:59,366
and the media goes the way you want it to go. Because if there is

209
00:12:59,388 --> 00:13:02,982
a vision of how it's going to happen later

210
00:13:03,036 --> 00:13:06,866
on when you're instilling the change, it will happen on its own without needing

211
00:13:06,898 --> 00:13:10,282
to be involved in the process. Go easy on the why

212
00:13:10,336 --> 00:13:13,882
questions. It's important to understand why

213
00:13:13,936 --> 00:13:17,466
somebody did something, but the more you dive into it, if you

214
00:13:17,488 --> 00:13:20,954
ask somebody why they did something, it could

215
00:13:20,992 --> 00:13:24,250
create resentment or self doubt for employees.

216
00:13:24,410 --> 00:13:28,506
It can sound to them like you're being critical and judging on how they behaved

217
00:13:28,538 --> 00:13:31,774
and why they're doing certain things. Be consistent, like I said

218
00:13:31,812 --> 00:13:35,182
before, and keeping calm.

219
00:13:35,246 --> 00:13:39,310
It's always important, especially when you're looking into things that failed

220
00:13:39,470 --> 00:13:42,338
to stay calm and show there is a path forward,

221
00:13:42,504 --> 00:13:46,046
especially helping to creating a better change environment.

222
00:13:46,158 --> 00:13:49,334
Now, some of our most notable learnings from all of these

223
00:13:49,372 --> 00:13:52,886
processes I've listed here, and I'll touch briefly on a few

224
00:13:52,908 --> 00:13:56,198
of those. Also, you can see in

225
00:13:56,364 --> 00:13:59,798
the format of the debrief meeting here in the QR code you

226
00:13:59,804 --> 00:14:02,598
can follow up on. So first of all,

227
00:14:02,684 --> 00:14:06,394
humans make mistakes. We need to fix the process, not trying

228
00:14:06,432 --> 00:14:10,042
to fix people that will not work because they work hard,

229
00:14:10,096 --> 00:14:13,662
they're smart, but everybody makes mistakes. Another thing I've often

230
00:14:13,716 --> 00:14:17,182
heard was gradual rollout. Now it often

231
00:14:17,236 --> 00:14:20,702
appears to be some holy grail, perhaps of microservices and

232
00:14:20,756 --> 00:14:24,030
large scale production systems. It's a great tool,

233
00:14:24,180 --> 00:14:27,570
but it's not a silver bullet. And it will not resolve everything.

234
00:14:27,640 --> 00:14:31,406
And saying it will will miss a lot of problems that you need to resolve

235
00:14:31,438 --> 00:14:35,234
in a different process or tools. Establishing crisis mode process

236
00:14:35,352 --> 00:14:38,806
also a very important one feature flagging, especially if

237
00:14:38,828 --> 00:14:42,834
I'm connecting it to the second point, in terms of handling errors

238
00:14:42,882 --> 00:14:46,086
quickly, it was really important for us. It was one of the

239
00:14:46,108 --> 00:14:49,866
things that we were able to do to disable certain features instead of

240
00:14:49,888 --> 00:14:53,286
rolling back a lot of services, sometimes thousands

241
00:14:53,318 --> 00:14:56,682
of dockers, and that helps reverting the code much

242
00:14:56,736 --> 00:15:00,442
faster and understanding if that's the cause of the problem or not.

243
00:15:00,576 --> 00:15:04,254
Maybe something else in the infrastructure is the issue and not even the code.

244
00:15:04,372 --> 00:15:07,806
We always try to avoid replacing something that we

245
00:15:07,828 --> 00:15:12,762
need to change in the system that we have at

246
00:15:12,916 --> 00:15:17,086
in place changes. When you have a lot of mostly

247
00:15:17,118 --> 00:15:21,134
coupled microservices, there is a lot of communication with underro

248
00:15:21,182 --> 00:15:24,802
and changing something in place

249
00:15:24,856 --> 00:15:28,038
can cause a lot of harm. So we try to split it into

250
00:15:28,124 --> 00:15:31,446
adding a new behavior, verifying it behaves has we

251
00:15:31,468 --> 00:15:34,982
expected, and then subtracting the old behavior and

252
00:15:35,036 --> 00:15:39,046
essentially splitting the process into two. Now, always trying

253
00:15:39,068 --> 00:15:42,594
to look ten x ahead on breaking points of the system wherever

254
00:15:42,642 --> 00:15:46,306
things happen and can break. And treating config

255
00:15:46,338 --> 00:15:50,446
has code was also a very crucial element in how how

256
00:15:50,468 --> 00:15:53,722
we do things. So that's it. Thank you for listening.

257
00:15:53,786 --> 00:15:57,626
I hope I gave you something new to use. Feel free to ping

258
00:15:57,658 --> 00:16:01,246
me on any of these mediums and ask questions, and I'd love to discuss with

259
00:16:01,268 --> 00:16:01,740
you more.

