1
00:00:23,080 --> 00:00:26,616
Hello and welcome to 42. I am drew random speaker

2
00:00:26,648 --> 00:00:29,872
presenting this talk, and we're going to talk about Javascript,

3
00:00:29,936 --> 00:00:33,088
code, JS and more in general. The event loop.

4
00:00:33,184 --> 00:00:36,788
Don't worry too much because this is an introductory talk. So if you

5
00:00:36,794 --> 00:00:39,780
don't know too much about this, not to worry.

6
00:00:40,200 --> 00:00:43,652
We're going to learn this thing together. The title of the talk is the event

7
00:00:43,706 --> 00:00:47,080
Loop fairy tale as you can see from the screen. And of course this

8
00:00:47,150 --> 00:00:50,664
takes place in a server far, far away. Now that

9
00:00:50,702 --> 00:00:54,036
we are at it, allow me to present myself. I am Lorenzo

10
00:00:54,068 --> 00:00:57,064
Pierre and I am the bard that shall sing this story to you.

11
00:00:57,102 --> 00:00:59,868
Although I'm not going to sing it, I'm just going to tell it.

12
00:00:59,954 --> 00:01:03,468
But bear with me, and if you have any questions

13
00:01:03,554 --> 00:01:07,064
whatsoever at the end of this talk or you feel that you didn't understand something

14
00:01:07,122 --> 00:01:10,690
or you want to know more about this, feel free to reach out.

15
00:01:13,140 --> 00:01:16,944
You will be able to send me a message on LinkedIn, Twitter or

16
00:01:16,982 --> 00:01:20,224
by email at any point. I'm very happy to chat with youll all,

17
00:01:20,262 --> 00:01:24,116
so just reach out. Nothing more to add on this.

18
00:01:24,298 --> 00:01:27,780
As you can see, I'm full stack wizard at Birdie, an incredible company

19
00:01:27,850 --> 00:01:31,056
in tech for good. We're going to know more about this in the next slide,

20
00:01:31,088 --> 00:01:34,624
but for now, bear with me. And I'm also schrolinger

21
00:01:34,672 --> 00:01:38,040
Hat Brotherhood's co chief, which means that I'm part

22
00:01:38,110 --> 00:01:41,864
of a community of people very interested in open

23
00:01:41,902 --> 00:01:46,068
source and the open source philosophy. And because of this we organize events,

24
00:01:46,164 --> 00:01:49,276
sessions, workshops and youre flagship event which is

25
00:01:49,298 --> 00:01:52,972
the conference open source day which is coming back in 2024

26
00:01:53,026 --> 00:01:56,252
on the 7th and eigth of March. The call for paper

27
00:01:56,306 --> 00:01:59,328
by the way, is open. So if you want to reach out and also send

28
00:01:59,414 --> 00:02:02,764
a participation to that, you can do that. And the tickets

29
00:02:02,812 --> 00:02:07,184
are free. So if you want to grab them go to 2024

30
00:02:07,302 --> 00:02:11,308
OSD Dev and you can find more information about that on

31
00:02:11,334 --> 00:02:15,076
the website. Also, you might not know me as by my

32
00:02:15,178 --> 00:02:19,156
tech nickname which is 404 answer not found but

33
00:02:19,258 --> 00:02:22,628
if you want, that is the nickname that I use throughout the Internet. So you

34
00:02:22,634 --> 00:02:26,424
can find more about me or my LinkedIn, Twitter and so on using that

35
00:02:26,462 --> 00:02:30,680
nickname and also on my website. 404 answer not found EU

36
00:02:31,340 --> 00:02:35,292
as for birdie, the beautiful company that I work for

37
00:02:35,426 --> 00:02:39,164
at Birdie, we envision a world in which we can all flourish with

38
00:02:39,202 --> 00:02:42,844
confidence as we age, and we are doing that

39
00:02:42,882 --> 00:02:46,376
by reinventing care through technology and enabling older

40
00:02:46,408 --> 00:02:49,964
adults to thrive at home. We are hiring

41
00:02:50,012 --> 00:02:53,516
engineers of all levels and also other positions

42
00:02:53,548 --> 00:02:57,184
outside of engineering. And we have clear skill requirements and

43
00:02:57,222 --> 00:03:00,796
salary, which can be found on our website, birdie care.

44
00:03:00,918 --> 00:03:04,644
So feel free to reach out if you are interested in hearing more

45
00:03:04,682 --> 00:03:08,164
about this, but let's get started with our talk and the

46
00:03:08,202 --> 00:03:11,444
story behind this. It was history.

47
00:03:11,642 --> 00:03:14,744
It was history because in a land far,

48
00:03:14,782 --> 00:03:18,152
far away, in a server far, far away, and so many years

49
00:03:18,206 --> 00:03:21,764
ago, you youll have the dragon blocks.

50
00:03:21,812 --> 00:03:25,260
And the dragon blocks were this magnificent, of course,

51
00:03:25,330 --> 00:03:29,032
but very, very powerful

52
00:03:29,096 --> 00:03:33,004
monsters that would block you,

53
00:03:33,202 --> 00:03:36,636
the programmer, from writing your code in an effective and

54
00:03:36,658 --> 00:03:40,064
efficient way. And for this reason came

55
00:03:40,102 --> 00:03:42,924
to existence. The knights of the thread.

56
00:03:43,052 --> 00:03:46,784
The knights of the thread were a group of valorous knights coming from

57
00:03:46,822 --> 00:03:49,968
all over the kingdoms of javadom, the kingdom of the

58
00:03:49,974 --> 00:03:53,732
Menaces and Pythonville. And what they would do is that they would fight

59
00:03:53,786 --> 00:03:57,476
all these dragons that would try to block the joyful life of some of the

60
00:03:57,498 --> 00:04:00,452
programming nations. How did they do that?

61
00:04:00,506 --> 00:04:03,240
Well, depending on where the knight would come from,

62
00:04:03,390 --> 00:04:06,440
as for example, the kingdoms of the Manices,

63
00:04:07,980 --> 00:04:12,408
they youll have different methodologies to fight the

64
00:04:12,414 --> 00:04:16,616
blocking dragons. The kingdom of the manices had magics called,

65
00:04:16,798 --> 00:04:19,884
named Posix threads, for example, which they

66
00:04:19,922 --> 00:04:22,860
would summon to avoid blocking,

67
00:04:24,480 --> 00:04:27,776
while Jaladon, for example, founded a new order of

68
00:04:27,798 --> 00:04:31,008
knights and wizards called the Nio Order.

69
00:04:31,174 --> 00:04:35,548
As for Pythonville, they invented a new scroll

70
00:04:35,644 --> 00:04:38,780
that the knights could bring along, called Asyncayo,

71
00:04:38,860 --> 00:04:42,850
that would help them predict and act before

72
00:04:43,160 --> 00:04:46,692
blocking events even occurred. But at some point,

73
00:04:46,746 --> 00:04:50,004
all of these knights and all of these nations started to

74
00:04:50,122 --> 00:04:54,036
hear about a new kingdom, raising up a kingdom

75
00:04:54,068 --> 00:04:58,408
that knew some kind of magic that would allow them to interact and

76
00:04:58,494 --> 00:05:02,024
avoid blocking operations altogether. And they were asking themselves,

77
00:05:02,142 --> 00:05:05,656
how are they doing it? How are they not getting blocked

78
00:05:05,688 --> 00:05:08,760
by these dragons of old, this blocking dragon?

79
00:05:08,920 --> 00:05:12,684
And, well, stories started to go

80
00:05:12,722 --> 00:05:16,204
throughout the lands, and finally a name came

81
00:05:16,242 --> 00:05:19,352
to be, and that name was the lands of promise.

82
00:05:19,496 --> 00:05:23,376
And although the pun is very intended, it was also the promise of

83
00:05:23,398 --> 00:05:26,892
a land where there would be no blocking whatsoever,

84
00:05:26,956 --> 00:05:30,244
because everything would work out eventually. Now,

85
00:05:30,282 --> 00:05:33,780
eventually is a very important word in this scenario, but we'll get

86
00:05:33,850 --> 00:05:37,296
back to this later. This land was filled

87
00:05:37,328 --> 00:05:40,596
with inhabitants named tusks, and they would

88
00:05:40,618 --> 00:05:44,104
all follow some very simple rules. But there was one, the most

89
00:05:44,142 --> 00:05:47,784
important one, that was very specific. And the specificity of

90
00:05:47,822 --> 00:05:51,700
this rule was, you shall not block the thread.

91
00:05:51,860 --> 00:05:55,404
The main thread. And what was this thread? Well, this main

92
00:05:55,442 --> 00:05:59,068
thread was this single thread castle that stood in

93
00:05:59,074 --> 00:06:01,624
the midst of this lands of promise.

94
00:06:01,752 --> 00:06:05,564
And in the single thread castle would leave

95
00:06:05,762 --> 00:06:09,968
two very important beings that we're going to talk a little bit more about

96
00:06:10,054 --> 00:06:13,628
later. But one of them being a very valorous knight,

97
00:06:13,724 --> 00:06:17,564
and the other one being the fairy

98
00:06:17,612 --> 00:06:21,188
of the event loop, and she was the one bearing all the

99
00:06:21,194 --> 00:06:25,076
magic that controlled the event loop. But let's stop for

100
00:06:25,098 --> 00:06:28,992
a minute, and before delving into which important characters

101
00:06:29,056 --> 00:06:32,980
were part of this realm, let's talk about the inhabitants.

102
00:06:33,560 --> 00:06:36,644
Now, the inhabitants that we are calling tasks,

103
00:06:36,692 --> 00:06:38,730
because that's what they like to be called,

104
00:06:39,740 --> 00:06:43,304
had a very unique way of handling their tasks. What I would like you to

105
00:06:43,342 --> 00:06:47,224
picture is that in this land, in these cities

106
00:06:47,352 --> 00:06:51,608
that were part of the land of promise, all the inhabitants, the tasks

107
00:06:51,704 --> 00:06:55,356
would be able to do multiple things at the same time. One would

108
00:06:55,378 --> 00:06:59,104
think concurrently. Is it true? Is it not true? That doesn't matter.

109
00:06:59,222 --> 00:07:02,784
You must think of this as a possibility. They were

110
00:07:02,822 --> 00:07:06,368
able, the inhabitants, the tasks, to do their things in the

111
00:07:06,374 --> 00:07:09,956
most efficient way. They knew what they wanted to do, and at

112
00:07:09,978 --> 00:07:13,476
some point, they knew that they would achieve the outcome that

113
00:07:13,498 --> 00:07:16,948
they hoped for. Now that we've said this,

114
00:07:17,034 --> 00:07:20,864
let's go and meet Astak circle.

115
00:07:20,912 --> 00:07:24,948
Astak is the valiant knight of asynchronous, the defender

116
00:07:24,964 --> 00:07:28,504
of the promised lands, and first of his name, liberator of

117
00:07:28,542 --> 00:07:32,456
processes, mother of. No, sorry, I've got that one wrong with

118
00:07:32,558 --> 00:07:36,136
know quite famous tv show. But really,

119
00:07:36,318 --> 00:07:39,916
what of stack was doing was defending the realm and

120
00:07:39,938 --> 00:07:43,932
the way tasks inhabitants were handling their own things,

121
00:07:44,066 --> 00:07:47,768
by making sure that each task would belong to each specific queue,

122
00:07:47,864 --> 00:07:51,360
and they could get, at some point, the outcome that they wanted.

123
00:07:51,510 --> 00:07:55,168
The job of Sir Colostag was very valorous, as in,

124
00:07:55,254 --> 00:07:58,336
he would make sure that everything would work perfectly fine,

125
00:07:58,438 --> 00:08:01,684
perfectly in order, and that everyone could

126
00:08:01,722 --> 00:08:05,860
get back to what they were doing without ever blocking the

127
00:08:05,930 --> 00:08:09,156
single thread, the main thread. And of course,

128
00:08:09,178 --> 00:08:12,744
he didn't do this alone. Alone, he wouldn't be able to do much,

129
00:08:12,862 --> 00:08:17,160
because he had the help of this incredible

130
00:08:17,500 --> 00:08:21,012
fairy that was actually running the event loop.

131
00:08:21,076 --> 00:08:24,700
But what is the event loop that we will call the loop from now on?

132
00:08:24,770 --> 00:08:27,740
Well, the loop was the heart of the village.

133
00:08:30,560 --> 00:08:34,444
Sorry. Every village that was part of the lands of promises had

134
00:08:34,482 --> 00:08:37,756
this central loop that was really the heart of

135
00:08:37,778 --> 00:08:40,896
the village. All the tasks, the Nabatans would go there,

136
00:08:40,998 --> 00:08:44,512
and they would have, like, different stands, and they could buy things,

137
00:08:44,566 --> 00:08:48,016
they could talk with people, and they could do anything in a

138
00:08:48,038 --> 00:08:51,364
synchronous way. Right. But the problem is

139
00:08:51,402 --> 00:08:54,884
that some synchronicity, as fast as

140
00:08:54,922 --> 00:08:58,212
it may be, can be very blocking at time. And as

141
00:08:58,266 --> 00:09:01,828
such, the tasks. The inhabitants knew exactly

142
00:09:01,914 --> 00:09:05,428
what they needed to do. If they were going to block,

143
00:09:05,524 --> 00:09:09,224
with some very heavy synchronous operation, the heart

144
00:09:09,342 --> 00:09:12,568
of the village. They knew that they couldn't just stand there.

145
00:09:12,654 --> 00:09:15,304
They knew that they had to accept that they had to go to on a

146
00:09:15,342 --> 00:09:18,396
travel of discovery to find out what

147
00:09:18,418 --> 00:09:21,564
they really wanted to do, how they wanted to do it, and then come back

148
00:09:21,602 --> 00:09:24,670
with exactly what they wanted to do.

149
00:09:25,200 --> 00:09:28,816
And for such reason, just outside of any

150
00:09:28,838 --> 00:09:31,936
of the towns of the promised lands, and outside of the

151
00:09:31,958 --> 00:09:35,596
event loop, was the desert of asynchrony.

152
00:09:35,788 --> 00:09:39,684
All the tasks would go and follow this

153
00:09:39,722 --> 00:09:42,916
path, because this path, which was known as

154
00:09:42,938 --> 00:09:46,192
the asyncali and the desert of asynchrony, was vast,

155
00:09:46,336 --> 00:09:50,128
stretching desert. And the tasks traveled this path,

156
00:09:50,224 --> 00:09:54,228
and it was a necessary tool, for they were bound to a magical destination,

157
00:09:54,324 --> 00:09:58,056
which was the forest of Libuvi. Now,

158
00:09:58,238 --> 00:10:01,896
while they were doing this path, they would reach the forest of Libuvi, which was

159
00:10:01,918 --> 00:10:06,276
also known as the forest of the thread pools. Within the expansive canopy

160
00:10:06,308 --> 00:10:10,476
of the forest of Libuvi, or thread pools, the rhythmic beats of

161
00:10:10,498 --> 00:10:13,816
the thread pool echoed. The thread pool, often depicted

162
00:10:13,848 --> 00:10:17,772
as a grand assembly of ancient trees, stood tall and firm.

163
00:10:17,916 --> 00:10:21,964
Each tree bore the hallmark of years of service, with gnar

164
00:10:22,012 --> 00:10:25,168
branches extending far and wide. At the

165
00:10:25,174 --> 00:10:28,492
foot of each tree, an elf of the threadpool

166
00:10:28,556 --> 00:10:31,792
diligently worked, weaving spells and executing

167
00:10:31,856 --> 00:10:35,604
tasks. So from these we can know that each task that

168
00:10:35,642 --> 00:10:38,884
went through the desert of asynchrony, youll at some point

169
00:10:39,002 --> 00:10:42,692
reach the forest of the thread pools. But what would happen

170
00:10:42,746 --> 00:10:45,720
this forest of the thread pools? Well, truly,

171
00:10:46,460 --> 00:10:49,944
they would meet the elves of the thread pool forest. And these

172
00:10:49,982 --> 00:10:53,076
elves were the only owners of the lib uv secrets,

173
00:10:53,188 --> 00:10:56,796
able to magically spawn as many threads as they like

174
00:10:56,898 --> 00:11:00,696
from their incredible thread pools. Of course, each forest

175
00:11:00,808 --> 00:11:04,204
was grandiose, but also as big as it

176
00:11:04,242 --> 00:11:08,068
could get. So there was a limited number of threads.

177
00:11:08,104 --> 00:11:11,456
At some point they could spawn. But that doesn't matter.

178
00:11:11,558 --> 00:11:15,632
What matters is that this thread were actually the one doing the hard

179
00:11:15,686 --> 00:11:19,296
work, the synchronous, the heavy work that those heavy

180
00:11:19,328 --> 00:11:23,044
tasks were bringing with themselves. And once that work was

181
00:11:23,082 --> 00:11:26,336
done, they would unspawn

182
00:11:26,448 --> 00:11:30,196
and just go out and back to the

183
00:11:30,218 --> 00:11:33,320
path that would lead them to the city. Each little

184
00:11:33,390 --> 00:11:36,328
task, with all of their callbacks done,

185
00:11:36,494 --> 00:11:39,960
would get back to the city so that they could take whatever

186
00:11:40,030 --> 00:11:44,116
that they wanted to do, and actually join

187
00:11:44,148 --> 00:11:47,272
the queue once more, so that they can actually enable

188
00:11:47,336 --> 00:11:51,470
themselves to live in the city again with whatever they wanted to do.

189
00:11:51,840 --> 00:11:55,612
Now of youre. This is incredible. This is

190
00:11:55,666 --> 00:11:59,216
efficient and asynchronous and non blocking so that

191
00:11:59,238 --> 00:12:03,136
the event loop could run infinitely and get back the tasks that

192
00:12:03,158 --> 00:12:06,770
were done at any point in time, because there was a trust

193
00:12:07,540 --> 00:12:10,836
that would be that at some point all of the

194
00:12:10,858 --> 00:12:14,560
tasks eventually would return with their results.

195
00:12:14,640 --> 00:12:18,016
And this was very important for the loop, for the fairy

196
00:12:18,048 --> 00:12:21,644
that was controlling the loop, and also for circle a stack

197
00:12:21,712 --> 00:12:25,272
that would then do its magic by

198
00:12:25,326 --> 00:12:28,536
bringing in the task results and actually apply them to

199
00:12:28,558 --> 00:12:31,956
the right cues. And this is all very magical

200
00:12:31,988 --> 00:12:36,204
and incredible. But we must also remember always that

201
00:12:36,242 --> 00:12:40,060
some creatures are to be feared, some others to be controlled.

202
00:12:40,560 --> 00:12:44,540
Blocking dragons should be understood, but never underestimated.

203
00:12:44,880 --> 00:12:49,010
What we want to see and learn

204
00:12:49,700 --> 00:12:52,944
from this slide is more of a

205
00:12:52,982 --> 00:12:56,604
cautionary tale to us. While the Node JS

206
00:12:56,652 --> 00:13:00,696
realm offers immense power and flexibility, it requires careful

207
00:13:00,748 --> 00:13:04,528
orchestration and vigilance. For in the world of asynchronous magic,

208
00:13:04,624 --> 00:13:07,860
even a single misstep can have dire consequences.

209
00:13:08,200 --> 00:13:11,492
But we must learn not to fear the dragons, but rather to accept

210
00:13:11,556 --> 00:13:15,352
their existence. Really, if we learn that

211
00:13:15,406 --> 00:13:18,696
there are dragon blocks, if we learn how to

212
00:13:18,718 --> 00:13:21,400
defend our systems against them,

213
00:13:21,550 --> 00:13:25,604
then we will have learned not to fear them, but actually

214
00:13:25,742 --> 00:13:29,116
maybe to befriend them. Who knows? Well, it's up to you,

215
00:13:29,138 --> 00:13:32,110
the user of Node Js, to learn more about this.

216
00:13:32,480 --> 00:13:36,376
But we've talked about the fairy tale. We've talked about very

217
00:13:36,418 --> 00:13:40,256
interesting characters, hopefully. But what is the

218
00:13:40,278 --> 00:13:43,744
event loop? Well, the event loop is comprised of many

219
00:13:43,782 --> 00:13:47,936
things, but let's talk about the phases that make up the

220
00:13:47,958 --> 00:13:51,296
event loop. There are mainly six phases

221
00:13:51,408 --> 00:13:55,664
that we can talk about, one being the timers.

222
00:13:55,792 --> 00:13:59,152
Then we have the pending callbacks. Then we have the idle

223
00:13:59,216 --> 00:14:02,490
prepare, the youll, the check,

224
00:14:03,100 --> 00:14:06,804
and the close callbacks. The timers phase

225
00:14:06,852 --> 00:14:09,620
handles callback functions of scheduled timers,

226
00:14:09,700 --> 00:14:12,820
specifically set timeout and set interval.

227
00:14:12,980 --> 00:14:16,264
It checks if the timer duration has been reached, and if so,

228
00:14:16,382 --> 00:14:20,440
executes its callback. Then we have pending callbacks.

229
00:14:20,520 --> 00:14:23,628
This phase handles I O related callbacks that were

230
00:14:23,794 --> 00:14:26,936
deferred from previous event loop cycles.

231
00:14:27,128 --> 00:14:30,320
The other one, idle and prepare, is only used internally.

232
00:14:30,740 --> 00:14:34,044
This is used to handle maintenance tasks, such as managing internal

233
00:14:34,092 --> 00:14:37,548
operations required for the upcoming I O operations or certain timers

234
00:14:37,564 --> 00:14:41,036
cleanup operations. But we must not worry too much about this.

235
00:14:41,158 --> 00:14:44,912
As for the poll phase, in this crucial phase, Node retrieves

236
00:14:44,976 --> 00:14:48,688
new I O events and executes their corresponding callbacks.

237
00:14:48,784 --> 00:14:52,144
This is where the event spends most of its time. If there are no pending

238
00:14:52,192 --> 00:14:55,348
timers or immediate callbacks, it's just running around waiting

239
00:14:55,364 --> 00:14:58,570
for things to happen if nothing is happening, of course.

240
00:14:59,100 --> 00:15:02,756
As for the check immediate one, after youll phase,

241
00:15:02,788 --> 00:15:05,976
node JS moves to the check phase, where it handles set immediate

242
00:15:06,008 --> 00:15:10,092
callbacks. And in the final phase, node JS handles close event

243
00:15:10,146 --> 00:15:14,120
callbacks. For instance, when a socket or a handle gets closed abruptly,

244
00:15:14,200 --> 00:15:18,492
the callback will be executed in this phase. This is all good.

245
00:15:18,626 --> 00:15:22,096
And of course, knowledge is everything, and there are many other things that can be

246
00:15:22,118 --> 00:15:25,360
learned. You are going to hear more and more about process

247
00:15:25,430 --> 00:15:28,732
next tick about set immediate about set timeout.

248
00:15:28,796 --> 00:15:32,644
And I think it would be good for you to actually study those

249
00:15:32,682 --> 00:15:36,068
things. But what matters the most is that you actually

250
00:15:36,234 --> 00:15:39,876
learn to reason about the loop. And how can we do that? Well,

251
00:15:39,898 --> 00:15:43,112
hopefully with some additional examples. So let's see what happens

252
00:15:43,166 --> 00:15:46,296
in the next slide. Well, there are

253
00:15:46,318 --> 00:15:50,500
many things that can be said about the loop. Sometimes very technical

254
00:15:50,580 --> 00:15:54,004
things. Sometimes people talk about the heap

255
00:15:54,132 --> 00:15:57,384
and where stuff exists, the hostack where stuff is

256
00:15:57,422 --> 00:16:01,324
cold and the actual code. But really,

257
00:16:01,442 --> 00:16:04,540
no one cares. If we imagine this as a tavern,

258
00:16:05,200 --> 00:16:09,596
you imagine like the hip is the place where all the mead is stuffed,

259
00:16:09,708 --> 00:16:13,004
the coal stack is the people at the bar actually waiting

260
00:16:13,052 --> 00:16:16,976
for their mead. And the coals are the actual order of

261
00:16:16,998 --> 00:16:20,016
the mead. Right. But no one cares, if you think about it, as long as

262
00:16:20,038 --> 00:16:23,636
the mead is the one that they wanted. No one really cares about it

263
00:16:23,738 --> 00:16:27,236
as long as they get it right. And so what should we get out

264
00:16:27,258 --> 00:16:30,624
of this? Well, I think we should simplify the event loop understanding,

265
00:16:30,672 --> 00:16:34,456
our event loop understanding to just a few phases. So let's get

266
00:16:34,478 --> 00:16:38,616
inside the loop. So what I would say is that

267
00:16:38,638 --> 00:16:42,052
there are only four important timers, queues,

268
00:16:42,116 --> 00:16:45,480
sorry, that you should think about. The first one is timers.

269
00:16:45,820 --> 00:16:49,336
Then we have callbacks. We don't really care about idle

270
00:16:49,368 --> 00:16:52,924
prepare because that's internal. So we don't really care too much about that.

271
00:16:52,962 --> 00:16:56,030
No need to remember that youre not ever going to use it.

272
00:16:56,400 --> 00:16:59,840
Then you have the pull phase and then you have the check phase.

273
00:17:00,260 --> 00:17:03,824
I would say the same for the close phase, because once

274
00:17:03,862 --> 00:17:07,408
youre out of the loop and you're closing out of your own program,

275
00:17:07,574 --> 00:17:10,976
do you really care about that phase? Youre closing your program at

276
00:17:10,998 --> 00:17:14,692
that point. What I would like to understand is

277
00:17:14,826 --> 00:17:18,656
this loop is not like very circular as it's

278
00:17:18,688 --> 00:17:21,860
shown sometimes, but it's mostly like

279
00:17:22,010 --> 00:17:25,944
going back and forth between one phase and the other. We start with

280
00:17:25,982 --> 00:17:29,332
timers. It goes to next tick or the microtasks,

281
00:17:29,396 --> 00:17:32,664
which really are the promises. And then the next

282
00:17:32,702 --> 00:17:36,024
tick or the promises go back to the callbacks, which go back to the next

283
00:17:36,062 --> 00:17:39,512
tick, or promises, which go back to either prepare, which go back to pool,

284
00:17:39,576 --> 00:17:42,524
which go back to next tick and check, and so on.

285
00:17:42,642 --> 00:17:46,076
And this goes on infinitely until we close

286
00:17:46,178 --> 00:17:49,696
and we go out of the loop. Once we've learned this and we

287
00:17:49,718 --> 00:17:53,072
know which phase is working

288
00:17:53,126 --> 00:17:56,236
at a certain point in time, we have all the knowledge

289
00:17:56,268 --> 00:18:00,848
we need to become the magicians, the wizards

290
00:18:01,024 --> 00:18:05,376
of the vent loop. Just to wrap

291
00:18:05,408 --> 00:18:08,630
our minds around this, let's do a simple exercise together.

292
00:18:09,480 --> 00:18:13,300
Which magic scroll would first be read by the mages

293
00:18:13,460 --> 00:18:17,240
first? The ancient scroll of set timeout with its callback function

294
00:18:17,310 --> 00:18:20,792
and a zero as time. The ancient scroll of set

295
00:18:20,846 --> 00:18:24,788
interval with its callback. The ancient scroll of process, next tick with

296
00:18:24,814 --> 00:18:28,556
its callback. The ancient scroll of set immediate with

297
00:18:28,578 --> 00:18:32,156
its callback or the borrowing ancient scroll of console log.

298
00:18:32,338 --> 00:18:36,124
So which one do you think is going to go first in

299
00:18:36,162 --> 00:18:39,456
order? Think about it a little bit, and if you know the

300
00:18:39,478 --> 00:18:43,264
answer, please do reach out and send

301
00:18:43,302 --> 00:18:46,816
me the answer on LinkedIn maybe, or Twitter and we can

302
00:18:46,838 --> 00:18:50,470
talk more about this. The answer is

303
00:18:51,240 --> 00:18:55,012
number five, the boring answer scroll of console log. And why

304
00:18:55,066 --> 00:18:58,804
so? Because console log is a synchronous operation which never gets

305
00:18:58,842 --> 00:19:02,596
inside the loop whatsoever. So we're not even using the event loop at this

306
00:19:02,618 --> 00:19:06,612
point because we're never going to get console log inside the loop unless

307
00:19:06,756 --> 00:19:10,068
console log is part of those FN callback functions

308
00:19:10,164 --> 00:19:13,844
which are called as part of something that is part of the event

309
00:19:13,902 --> 00:19:17,390
loop. Now, hopefully that was simple.

310
00:19:18,000 --> 00:19:21,484
What I would like to say is that the strength is found in the

311
00:19:21,522 --> 00:19:25,612
mind, but accrued with time. And this means

312
00:19:25,666 --> 00:19:29,090
that it just takes time to learn more about this and to actually

313
00:19:29,540 --> 00:19:34,112
get better knowledge and actually better at using

314
00:19:34,166 --> 00:19:38,300
node JS and JavaScript and the event loop in general. So keep practicing,

315
00:19:38,380 --> 00:19:42,384
and if you have any questions, just ask them either to me, to your seniors,

316
00:19:42,432 --> 00:19:46,564
to your peers, to anyone. Just do

317
00:19:46,602 --> 00:19:50,196
things and have fun while doing them, and you will have all

318
00:19:50,218 --> 00:19:53,850
the knowledge you need about the node js, event loop and node js in general.

319
00:19:54,300 --> 00:19:57,544
I am Lorenzo Pierre, the Bart that didn't sing this story,

320
00:19:57,582 --> 00:20:00,968
but hopefully you had fun listening to it again.

321
00:20:01,054 --> 00:20:05,156
I'm a full stack wizard at Birdie Schrodinger, head Brotherhood

322
00:20:05,188 --> 00:20:07,944
co chief, and also you can find me on LinkedIn,

323
00:20:07,992 --> 00:20:12,236
GitHub, and on my website. Answer not found EU and

324
00:20:12,418 --> 00:20:15,772
four or four answer not found is my name. If you want to get into

325
00:20:15,826 --> 00:20:19,400
open source, go to OSD Dev or 2024 OSD

326
00:20:19,480 --> 00:20:22,824
Dev, where you can find all the information about the upcoming

327
00:20:22,952 --> 00:20:26,830
conference that is going to be about open source next year in 2024.

328
00:20:27,280 --> 00:20:30,628
But most importantly, be thank you for coming to my talk.

329
00:20:30,714 --> 00:20:34,116
I hope you had fun. I hope you learned a lot of things and you

330
00:20:34,138 --> 00:20:37,536
learned how to have fun with the node JS vent

331
00:20:37,568 --> 00:20:41,172
loop. And if you have any questions, feel free to reach out and

332
00:20:41,226 --> 00:20:44,676
I'll be very happy to talk with you. Thank you very much for being here.

333
00:20:44,778 --> 00:20:46,452
Take care. Have the best day.

