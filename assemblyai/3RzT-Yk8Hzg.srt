1
00:01:44,910 --> 00:01:48,622
Hello and welcome to securing the endpoint with open source

2
00:01:48,686 --> 00:01:52,146
software. This talk is going to be a little bit of a

3
00:01:52,168 --> 00:01:55,966
reinterpretation on devsecops, which is commonly focused

4
00:01:55,998 --> 00:02:00,370
on bringing security practices to developers.

5
00:02:00,870 --> 00:02:04,930
What I'd like to do at this talk is do a little bit of bringing

6
00:02:05,350 --> 00:02:09,130
developer practices and DevOps practices CTO

7
00:02:09,200 --> 00:02:12,714
security. So before we get started with the talk,

8
00:02:12,752 --> 00:02:16,374
I'll tell you a little bit about myself. I'm the CTO and co founder

9
00:02:16,422 --> 00:02:20,614
at Fleet and I'm a co creator of OS query and on the steering committee

10
00:02:20,662 --> 00:02:24,222
for that project. Those are both projects that we'll be talking

11
00:02:24,276 --> 00:02:27,806
about more later in this talk. But before we get

12
00:02:27,828 --> 00:02:31,278
going on the talk, I'd like to make sure that we're clear on some

13
00:02:31,364 --> 00:02:35,038
definitions. In particular, what do we mean by endpoint?

14
00:02:35,134 --> 00:02:38,018
There are a lot of definitions that folks use for this.

15
00:02:38,184 --> 00:02:41,486
So an endpoint is basically a computing

16
00:02:41,518 --> 00:02:44,930
device. It could be one of these macOS laptop,

17
00:02:45,370 --> 00:02:48,562
it could be a desktop computer using macOS,

18
00:02:48,706 --> 00:02:52,786
Windows, Linux, could even be a Chromebook.

19
00:02:52,978 --> 00:02:56,854
Any sort of end user computing device could be

20
00:02:56,892 --> 00:03:00,234
considered an endpoint. And for our purposes, we also

21
00:03:00,272 --> 00:03:03,900
think of these servers as endpoints as well,

22
00:03:04,510 --> 00:03:07,914
and containers. These can

23
00:03:07,952 --> 00:03:11,854
also be endpoints. And the strategies and techniques that we talk about

24
00:03:11,892 --> 00:03:15,550
using here can potentially be applied to any of these environments.

25
00:03:16,290 --> 00:03:19,600
And that also includes environments like this

26
00:03:20,050 --> 00:03:23,346
operational technology, the control planes running

27
00:03:23,448 --> 00:03:25,410
the robots inside factories,

28
00:03:26,790 --> 00:03:29,550
and IoT sorts of devices,

29
00:03:29,630 --> 00:03:33,234
Raspberry PI, all of these things this software can potentially run

30
00:03:33,272 --> 00:03:36,862
on and manage. So first, I'll talk about Osquery,

31
00:03:36,926 --> 00:03:40,966
which is the agent that we use to collect data from all

32
00:03:40,988 --> 00:03:44,594
of these different endpoints. So Osquery lets us write queries

33
00:03:44,642 --> 00:03:48,246
to collect logs on the state and how the state is changing

34
00:03:48,278 --> 00:03:52,074
on endpoints, and also on the events taking place on

35
00:03:52,112 --> 00:03:54,982
those endpoints. It supports macOS,

36
00:03:55,046 --> 00:03:58,854
Linux, and Windows, which covers a lot of the computing environments

37
00:03:58,902 --> 00:04:02,954
that I discussed, that I just mentioned. And we'll

38
00:04:03,002 --> 00:04:06,320
talk a little bit more about Chromebooks later as well.

39
00:04:06,690 --> 00:04:10,238
An osquery enables non developers to access

40
00:04:10,324 --> 00:04:13,886
and aggregate data from disparate sources across these systems.

41
00:04:13,998 --> 00:04:18,260
And we'll talk a bit about how it uses SQL to do that.

42
00:04:18,790 --> 00:04:22,514
An OS query was designed explicitly with

43
00:04:22,552 --> 00:04:26,214
the goal to have performance and reliability, to be able to

44
00:04:26,412 --> 00:04:30,386
deploy it across these corporate and production parts

45
00:04:30,418 --> 00:04:34,406
of organization's infrastructure. An OS query is

46
00:04:34,428 --> 00:04:37,806
fully open source, licensed with an MIT license

47
00:04:37,938 --> 00:04:41,494
that allows users to do essentially

48
00:04:41,542 --> 00:04:45,402
whatever they'd like with it and the source code. And I mentioned

49
00:04:45,456 --> 00:04:49,878
SQL. So here's a very basic example. Of an OS query query.

50
00:04:50,054 --> 00:04:53,886
So select star from users will give us, across all three of

51
00:04:53,908 --> 00:04:58,266
the different supported systems, the information about the user accounts

52
00:04:58,298 --> 00:05:01,806
that exist on those systems. And there are a

53
00:05:01,828 --> 00:05:05,386
huge number of data sources that are available in OS query.

54
00:05:05,498 --> 00:05:08,750
For example things like the Etsy hosts files

55
00:05:08,830 --> 00:05:11,774
or the Cron tab file, the known hosts,

56
00:05:11,822 --> 00:05:16,402
these flat files that can be parsed and typically have specific configuration

57
00:05:16,466 --> 00:05:19,794
formats. SQLite files which are becoming

58
00:05:19,842 --> 00:05:23,202
increasingly more common on systems to store configuration

59
00:05:23,266 --> 00:05:27,138
and state for applications. The data available

60
00:05:27,244 --> 00:05:30,646
from system APIs, for example the Apple

61
00:05:30,678 --> 00:05:34,250
system log, the keychain on macOS, these are

62
00:05:34,320 --> 00:05:37,994
common sources. However, there are certainly many other

63
00:05:38,032 --> 00:05:42,446
system APIs on Windows and Linux that are useful and are also

64
00:05:42,628 --> 00:05:45,754
abstracted into this SQL concept. With OS

65
00:05:45,802 --> 00:05:49,566
query application APIs that are exposed such

66
00:05:49,588 --> 00:05:52,694
as Docker's API, the carbon Black APIs,

67
00:05:52,842 --> 00:05:56,258
many applications are exposing these APIs on local

68
00:05:56,344 --> 00:05:59,570
systems. And then we have access to event

69
00:05:59,640 --> 00:06:03,698
based APIs that are exposing lots of information such as

70
00:06:03,864 --> 00:06:08,630
FS events which can be used for file integrity monitoring purposes,

71
00:06:09,050 --> 00:06:12,166
the BPF subsystem on Linux and

72
00:06:12,188 --> 00:06:16,178
the older audit subsystem, Windows events

73
00:06:16,274 --> 00:06:20,250
and other systems like that on Windows.

74
00:06:20,910 --> 00:06:24,346
And then there's a lot of data that we might get just as metadata from

75
00:06:24,368 --> 00:06:27,638
the file system, such as information about shared folders,

76
00:06:27,814 --> 00:06:32,206
hashes of files, the permissions set on files. These can be all interesting

77
00:06:32,308 --> 00:06:35,950
and relevant pieces of information to have from a security perspective.

78
00:06:36,450 --> 00:06:40,874
And then there are more specific file formats such as plists

79
00:06:40,922 --> 00:06:45,230
on macOS that are sort of a combination of XML and binary.

80
00:06:45,390 --> 00:06:49,378
And again, just a nice way to abstract all of those. And these are all

81
00:06:49,464 --> 00:06:52,690
abstracted under that same SQL interface.

82
00:06:53,110 --> 00:06:56,358
And one of the pieces of value that we get from that is that we

83
00:06:56,364 --> 00:07:00,280
can start to combine together the tables that are available

84
00:07:00,650 --> 00:07:04,566
from each of these sources. And so for example here we

85
00:07:04,588 --> 00:07:08,362
can take a query that joins the processes and

86
00:07:08,416 --> 00:07:12,106
process open sockets tables and it does that

87
00:07:12,288 --> 00:07:15,980
by looking for processes for the information

88
00:07:16,350 --> 00:07:19,210
where the processes share the same PID.

89
00:07:20,030 --> 00:07:23,498
And then we can do filtering as well in the SQL

90
00:07:23,514 --> 00:07:27,850
query. And in this case, what we're doing is we're looking for SSHD processes

91
00:07:28,010 --> 00:07:31,962
that are listing on a port that's not port 22.

92
00:07:32,116 --> 00:07:36,046
And essentially we could interpret this as SSHD

93
00:07:36,158 --> 00:07:39,758
running on a nonstandard port. Now next I'll

94
00:07:39,774 --> 00:07:43,038
talk about Fleet, which is a system that allows

95
00:07:43,054 --> 00:07:46,914
us to package, deploy and manage OS query at scale.

96
00:07:47,042 --> 00:07:50,962
So remember, OS query is our agent. Fleet is essentially

97
00:07:51,026 --> 00:07:54,694
our coordinator for the agent. It helps us manage these

98
00:07:54,732 --> 00:07:58,486
agents across thousands, tens and hundreds of thousands

99
00:07:58,518 --> 00:08:01,850
of machines, and it helps us drive insights out of the data available

100
00:08:01,920 --> 00:08:06,294
with osquery. Fleet can run live queries,

101
00:08:06,422 --> 00:08:10,002
detect vulnerable software, detect compliance

102
00:08:10,086 --> 00:08:13,594
with organizational policies, and trigger

103
00:08:13,642 --> 00:08:17,498
automations. Fleet also allows us to configure

104
00:08:17,594 --> 00:08:20,686
scheduled queries via configuration as code so

105
00:08:20,708 --> 00:08:24,058
the queries that we were just looking at can be run on intervals

106
00:08:24,154 --> 00:08:27,598
and then those logs shipped into our logging pipelines.

107
00:08:27,774 --> 00:08:30,734
And this is all also available via API.

108
00:08:30,862 --> 00:08:34,554
So I think that this is kind of an important part of bringing the developer

109
00:08:34,622 --> 00:08:37,986
concepts into the security realm

110
00:08:38,098 --> 00:08:41,394
is this configuration as code and everything available via

111
00:08:41,442 --> 00:08:46,214
API. These allow us to build the kind of automations that

112
00:08:46,332 --> 00:08:50,060
are richer, more robust and more future looking.

113
00:08:50,750 --> 00:08:54,394
And I mentioned that we can get logs to our logging destinations. Commonly these

114
00:08:54,432 --> 00:08:57,414
kind of things are s three elastic, splunk,

115
00:08:57,462 --> 00:09:01,994
snowflake, and potentially any logging destination

116
00:09:02,122 --> 00:09:05,742
is viable as long as there's some way to get text.

117
00:09:05,876 --> 00:09:09,854
And in fact these are JSON based logs into the

118
00:09:09,892 --> 00:09:12,974
system. And as a bonus,

119
00:09:13,102 --> 00:09:17,278
fleet also includes, as I mentioned, support for chromebooks.

120
00:09:17,374 --> 00:09:21,262
So Fleet has an open source Chrome extension that essentially

121
00:09:21,326 --> 00:09:24,594
mimics OS queries functionality and provides that

122
00:09:24,632 --> 00:09:28,120
same SQL interface on the information

123
00:09:28,970 --> 00:09:32,150
provided by the Chrome OS APIs.

124
00:09:32,810 --> 00:09:36,338
And fleet is open core, so part of it is licensed

125
00:09:36,354 --> 00:09:39,980
with an MIT license and then part is available

126
00:09:40,510 --> 00:09:44,474
only on an enterprise license. Everything that I'll talk about in this talk

127
00:09:44,512 --> 00:09:48,374
today is available on the fully open source

128
00:09:48,422 --> 00:09:52,046
MIT license portion of fleet. So this can all be taken and

129
00:09:52,068 --> 00:09:56,062
applied immediately. And just for an example,

130
00:09:56,196 --> 00:09:59,470
here is some fleet user interface in which

131
00:09:59,540 --> 00:10:02,674
we can take an OS query query and

132
00:10:02,792 --> 00:10:06,926
we can save that query,

133
00:10:07,118 --> 00:10:11,166
check compatibility and generally get some friendlier

134
00:10:11,198 --> 00:10:15,042
UI on top of what we're learning

135
00:10:15,096 --> 00:10:19,250
from OS query. And this is more of the fleet user interface.

136
00:10:19,330 --> 00:10:22,950
This is what you see when you get a host enrolled into

137
00:10:23,020 --> 00:10:26,066
fleet. There's a whole bunch of information that's collected

138
00:10:26,098 --> 00:10:29,406
by default, and this can become a great baseline

139
00:10:29,458 --> 00:10:33,066
for understanding the data that's available from OS query and CTO.

140
00:10:33,088 --> 00:10:36,598
Start to understand some of the concepts that are exposed by fleet.

141
00:10:36,774 --> 00:10:40,378
So for example, we get the software inventory

142
00:10:40,474 --> 00:10:44,014
collected from the host, we get the policy compliance, and here

143
00:10:44,052 --> 00:10:47,550
in this example, this host is failing two policies.

144
00:10:48,850 --> 00:10:52,478
We also get inventory of software across

145
00:10:52,564 --> 00:10:55,838
the entire organization or all of the hosts that are enrolled.

146
00:10:55,934 --> 00:10:59,774
We can filter that software across multiple axes,

147
00:10:59,902 --> 00:11:03,294
but right now in this case, we've got it filtered by software that's

148
00:11:03,342 --> 00:11:06,726
vulnerable. And so we can see that

149
00:11:06,748 --> 00:11:10,694
we have some Google Chrome instances that probably need updates here

150
00:11:10,732 --> 00:11:14,226
because they've got some cves associated

151
00:11:14,258 --> 00:11:17,478
with them. And we talked about policies a

152
00:11:17,484 --> 00:11:20,890
little bit, but again, fleet provides a way to

153
00:11:21,040 --> 00:11:24,746
define organizational policies that we have and allow us

154
00:11:24,768 --> 00:11:28,314
to keep track of the compliance across our hosts. This is also

155
00:11:28,352 --> 00:11:32,366
a good example of where automations can be enabled so that we can

156
00:11:32,388 --> 00:11:36,922
start triggering into other systems to do response

157
00:11:36,986 --> 00:11:40,350
to policies that have failed.

158
00:11:40,770 --> 00:11:43,690
And what I'd like to do now is show a bit of a demo of

159
00:11:43,780 --> 00:11:47,774
what a sort of modern configuration as code practice

160
00:11:47,902 --> 00:11:50,450
could look like with fleet.

161
00:11:50,790 --> 00:11:54,254
So in this case we've put up a pull request that adds a detection

162
00:11:54,302 --> 00:11:57,730
using the osquery that we talked about looking for unusual SSH

163
00:11:57,890 --> 00:12:01,560
processes other than the standard port 22.

164
00:12:02,010 --> 00:12:05,046
And when we come over and look at this, we can see that there's a

165
00:12:05,068 --> 00:12:09,698
YAML file that defines the query and

166
00:12:09,884 --> 00:12:13,626
with the name and description and the query SQL that

167
00:12:13,648 --> 00:12:16,540
we looked at just a few slides ago,

168
00:12:16,910 --> 00:12:20,510
and we have configured this to run on a ten second

169
00:12:20,580 --> 00:12:24,846
interval and turn automations on so that we can get

170
00:12:25,028 --> 00:12:28,702
those logs into our logging pipeline. Now in this example,

171
00:12:28,756 --> 00:12:32,534
I've also used another tool to build a detection

172
00:12:32,602 --> 00:12:36,546
on top of that. That tool is Matano and that allows us to

173
00:12:36,648 --> 00:12:40,782
trigger alerts anytime that logs are generated

174
00:12:40,846 --> 00:12:44,798
from this query. So in this case we've also

175
00:12:44,904 --> 00:12:48,754
configured the further

176
00:12:48,802 --> 00:12:51,960
details about the alert that we want CTO fire off here.

177
00:12:52,410 --> 00:12:55,942
And essentially we want CTO investigate whether this

178
00:12:55,996 --> 00:12:59,994
nonstandard SSH is an intended practice or

179
00:13:00,112 --> 00:13:03,466
possibly some malicious activity that could be happening on

180
00:13:03,488 --> 00:13:07,014
the system. And because of all this CLI

181
00:13:07,062 --> 00:13:11,600
and API support built into fleet, we're able to

182
00:13:11,970 --> 00:13:15,466
configure all of these things through a Gitops

183
00:13:15,498 --> 00:13:18,762
workflow. So in this case, I've requested

184
00:13:18,826 --> 00:13:22,546
review now from someone else on the team, and this is

185
00:13:22,568 --> 00:13:26,402
going to generate an audit trail that allows us to keep track

186
00:13:26,456 --> 00:13:30,340
of why changes were made, who made them

187
00:13:30,710 --> 00:13:34,558
and who approved them. So I've switched over

188
00:13:34,664 --> 00:13:38,146
to a different browser where I'm

189
00:13:38,178 --> 00:13:41,942
logged in as the reviewer. And in this example I

190
00:13:42,076 --> 00:13:46,022
can now take a look and provide my

191
00:13:46,076 --> 00:13:50,034
review. I'd probably be looking in this case to ensure

192
00:13:50,082 --> 00:13:54,154
that this is going to be generating what we think will be a low

193
00:13:54,192 --> 00:13:57,766
number of false positives and a low number of false negatives

194
00:13:57,878 --> 00:14:01,226
so that we're getting a very high fidelity detection

195
00:14:01,338 --> 00:14:05,454
in place here. And when I submit this review that

196
00:14:05,492 --> 00:14:09,562
will allow the pull request to be merged because we've configured our repository

197
00:14:09,626 --> 00:14:12,946
to only allow approved pull requests to

198
00:14:12,968 --> 00:14:16,994
be merged. And what I want to really highlight here is now that

199
00:14:17,032 --> 00:14:20,734
we've got this pull request approved

200
00:14:20,782 --> 00:14:25,858
and we're able to merge it. It's the CI actions

201
00:14:26,034 --> 00:14:29,826
that enable this Gitops workflow that I think are the really powerful

202
00:14:29,938 --> 00:14:33,814
thing here. So we'll come down here and

203
00:14:33,852 --> 00:14:37,398
we'll merge our pull request and that's going to kick

204
00:14:37,414 --> 00:14:41,622
off the CI. We click through GitHub's interface

205
00:14:41,766 --> 00:14:44,380
to pull up the actions that are now running.

206
00:14:44,910 --> 00:14:48,634
And we've configured our repository to apply these

207
00:14:48,672 --> 00:14:52,270
new configurations as soon as they emerge to our main branch.

208
00:14:52,770 --> 00:14:56,126
So when we click into this we'll be able to see the status of the

209
00:14:56,148 --> 00:15:00,106
job. And essentially our CI action just installs

210
00:15:00,138 --> 00:15:03,730
the tools and then it applies the

211
00:15:03,800 --> 00:15:07,730
configurations into both Fleet and Matano.

212
00:15:08,230 --> 00:15:11,794
So effectively what we've done is we've used configuration as

213
00:15:11,832 --> 00:15:15,650
code practices to build our security detections.

214
00:15:15,810 --> 00:15:19,526
And this enables all of the advantages that hopefully many of

215
00:15:19,548 --> 00:15:23,782
you are sold on already from your

216
00:15:23,836 --> 00:15:27,766
familiarity with devsecops practices. And so

217
00:15:27,788 --> 00:15:31,260
now we'll talk a bit about what deployment of these tools looks like.

218
00:15:31,870 --> 00:15:34,998
So fleet is typically deployed in AWS

219
00:15:35,094 --> 00:15:39,382
via terraform that fleet the organization provides,

220
00:15:39,526 --> 00:15:43,482
but it can also really be deployed to any suitable infrastructure and suitable

221
00:15:43,546 --> 00:15:47,018
means. A place where we can run MySQL and redis

222
00:15:47,114 --> 00:15:50,446
and where we can run a Linux server binary. So it's a

223
00:15:50,468 --> 00:15:54,558
pretty minimal set of requirements. Fleet also does provide

224
00:15:54,644 --> 00:15:58,286
a SaaS offering of this, but mostly we're focused on the open source version

225
00:15:58,318 --> 00:16:02,142
in this talk, and then you can expose it to the public Internet

226
00:16:02,206 --> 00:16:05,730
or not. And the considerations around this are essentially

227
00:16:05,810 --> 00:16:09,846
whether you have workstations that will be off of a VPN that

228
00:16:09,868 --> 00:16:13,970
you might want to be able to access the interface

229
00:16:14,050 --> 00:16:18,566
so that they can run queries and

230
00:16:18,668 --> 00:16:22,666
send logs up. So depending on the kinds of

231
00:16:22,688 --> 00:16:25,898
devices that you want to enroll, you may or may not decide to expose it

232
00:16:25,904 --> 00:16:29,286
to the public Internet. Then you'd want to install the fleet

233
00:16:29,318 --> 00:16:32,446
control command line tool which is used for managing the

234
00:16:32,468 --> 00:16:36,110
server and packaging up installation binaries.

235
00:16:36,850 --> 00:16:41,502
There's more about this on the docs@fleetdm.com

236
00:16:41,556 --> 00:16:45,074
so feel free to check that out. And this is an

237
00:16:45,112 --> 00:16:48,882
architecture diagram of what that deployment looks like. On the top left

238
00:16:48,936 --> 00:16:52,526
we can see the OS query agent which checks

239
00:16:52,558 --> 00:16:56,146
in via HTTPs with the fleet server to

240
00:16:56,168 --> 00:16:59,778
find out if there's any work to be done essentially, and to send any logs

241
00:16:59,794 --> 00:17:04,114
that it's generated. On the bottom left we see the API

242
00:17:04,162 --> 00:17:08,006
clients, which could be the user interface that I

243
00:17:08,028 --> 00:17:11,834
showed earlier, which is a web browser user interface that

244
00:17:11,952 --> 00:17:16,134
uses also the same APIs that the fleet control command line tool uses.

245
00:17:16,262 --> 00:17:20,414
And those are the same APIs that are accessible to

246
00:17:20,532 --> 00:17:23,902
any user of fleet who wants to write code

247
00:17:23,956 --> 00:17:27,386
or integrations there. And the fleet

248
00:17:27,418 --> 00:17:31,230
server has its MySQL and redis dependencies and then

249
00:17:31,300 --> 00:17:35,134
optionally is able to send logs out to any of those logging destinations

250
00:17:35,262 --> 00:17:38,514
that we discussed. Those and more are

251
00:17:38,552 --> 00:17:42,462
available. And for OS query, the deployment essentially

252
00:17:42,526 --> 00:17:46,258
looks like generating the installation packages

253
00:17:46,354 --> 00:17:50,406
via the fleet control command line tool. That would be MSI on

254
00:17:50,428 --> 00:17:54,598
Windows, PKG on macOS, Deb for our

255
00:17:54,684 --> 00:17:58,454
debian flavored linuxes and RPM for

256
00:17:58,572 --> 00:18:01,430
our red hat flavored linuxes.

257
00:18:02,110 --> 00:18:05,338
And then typically you'd install those packages via the standard

258
00:18:05,424 --> 00:18:08,906
management workflows and that often looks

259
00:18:08,928 --> 00:18:12,254
like chef for servers, it often looks like MDM for

260
00:18:12,292 --> 00:18:15,726
workstations. Doesn't really matter how we do this as long

261
00:18:15,748 --> 00:18:18,878
as we get those packages out there, but it could also

262
00:18:18,964 --> 00:18:22,906
be instead baked into the master virtual

263
00:18:22,938 --> 00:18:26,414
machine or container images, so that whenever those vms

264
00:18:26,462 --> 00:18:30,462
or containers do start up, they are automatically connecting

265
00:18:30,526 --> 00:18:33,700
up to the fleet server and securing their data as well.

266
00:18:34,230 --> 00:18:37,474
And there's more about this enrollment process

267
00:18:37,592 --> 00:18:41,374
and deployment of OS query again on the fleet docs,

268
00:18:41,422 --> 00:18:44,786
so feel free to check that out there. Hopefully you

269
00:18:44,808 --> 00:18:47,942
found all of this a useful introduction.

270
00:18:48,006 --> 00:18:51,734
Cto the possibilities of using fleet and osquery,

271
00:18:51,782 --> 00:18:55,546
these open source tools for building a

272
00:18:55,728 --> 00:18:58,874
more devsecops oriented security

273
00:18:58,992 --> 00:19:02,598
program and bringing some of these interesting DevOps practices

274
00:19:02,774 --> 00:19:06,106
to securing endpoints. Feel free to reach out

275
00:19:06,128 --> 00:19:09,530
to me on any of these platforms and thank you very much for

276
00:19:09,600 --> 00:19:10,440
attending this talk.

