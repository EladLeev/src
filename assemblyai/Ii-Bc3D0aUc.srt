1
00:00:41,090 --> 00:00:44,550
Hi, I am Ricard Miranda, and I'm here to talk to you about

2
00:00:44,620 --> 00:00:48,434
automation in modern project development. I'm a consultant

3
00:00:48,482 --> 00:00:52,874
at closer consulting. Let's start with movement from monolith

4
00:00:52,922 --> 00:00:56,622
to services. A monolith is a very

5
00:00:56,756 --> 00:01:00,414
big application, and we are now observing a

6
00:01:00,452 --> 00:01:04,126
movement from the monolith into splitting

7
00:01:04,158 --> 00:01:07,938
the monolith into several services, so that

8
00:01:08,024 --> 00:01:11,614
coordinate among themselves. What are the characteristics

9
00:01:11,662 --> 00:01:14,914
of a monolith? Well, a monolith usually is a very

10
00:01:14,952 --> 00:01:18,434
complex system with very complex code,

11
00:01:18,552 --> 00:01:22,482
very hard to understand and usually very hard to modify.

12
00:01:22,626 --> 00:01:26,194
In reality, the monoliths tend to evolve

13
00:01:26,242 --> 00:01:30,042
into a big ball of mud, where there is a very

14
00:01:30,096 --> 00:01:33,514
strong coupling among several parts of

15
00:01:33,552 --> 00:01:37,146
the system. So it is very hard to modify one part of

16
00:01:37,168 --> 00:01:41,134
the system without impacts in other starts of the system,

17
00:01:41,332 --> 00:01:44,858
even when these problems do not occur.

18
00:01:45,034 --> 00:01:48,622
Nevertheless, a new camera usually takes a long

19
00:01:48,676 --> 00:01:52,174
time to understand the monolith, can take years to

20
00:01:52,212 --> 00:01:55,906
really understand the system. The advantage of

21
00:01:55,928 --> 00:01:59,790
the monolith resides mainly in the easiness

22
00:01:59,950 --> 00:02:04,338
to communicate inside the monolith. A call to a function

23
00:02:04,504 --> 00:02:07,654
usually is very straightforward, so you don't need to

24
00:02:07,692 --> 00:02:11,318
worry about latency or the security of the

25
00:02:11,404 --> 00:02:14,726
communication among functions of the same project,

26
00:02:14,908 --> 00:02:17,378
or to discover where is the function.

27
00:02:17,484 --> 00:02:21,018
So very easy to communicate inside

28
00:02:21,104 --> 00:02:25,322
the monolith. When you go into the services world,

29
00:02:25,456 --> 00:02:28,778
you go into a view where

30
00:02:28,864 --> 00:02:32,414
each service is simple. It just does one thing

31
00:02:32,452 --> 00:02:36,074
and does that job well, so a newcomer

32
00:02:36,122 --> 00:02:39,038
will in a couple of days understand the service.

33
00:02:39,204 --> 00:02:43,150
It's also easily to disposable, so you can write

34
00:02:43,220 --> 00:02:46,338
a new version of your service and benchmark against

35
00:02:46,424 --> 00:02:50,574
the old version, and see if this new technology or new language

36
00:02:50,622 --> 00:02:53,906
or some other aspect is worthwhile to keep, or you

37
00:02:53,928 --> 00:02:58,034
just should maintain the old version. The complexity emerges

38
00:02:58,082 --> 00:03:02,134
at the coordination level, because you start to need to worry about

39
00:03:02,252 --> 00:03:06,038
contracts for the communication among services. You need to

40
00:03:06,124 --> 00:03:10,074
worry about discoverabilities. Security of the

41
00:03:10,112 --> 00:03:14,442
communication and the deployment of this system

42
00:03:14,576 --> 00:03:18,458
composed of services is more complex than the deployment of

43
00:03:18,544 --> 00:03:21,802
the monolith. There is also another very

44
00:03:21,856 --> 00:03:25,082
big difference between the monolith and the services.

45
00:03:25,216 --> 00:03:29,006
A monolith responds to a variations in

46
00:03:29,028 --> 00:03:32,142
the workload with scaling up and down.

47
00:03:32,276 --> 00:03:35,986
So when you want to increase the workload, you install the

48
00:03:36,008 --> 00:03:39,698
system in a bigger machine. And if you no longer

49
00:03:39,784 --> 00:03:42,782
need to reply to such a big workload,

50
00:03:42,846 --> 00:03:47,206
you decrease the machine. So can be very expensive, because if

51
00:03:47,228 --> 00:03:51,106
you need a really big machine, it can have a very big economic impact,

52
00:03:51,218 --> 00:03:54,438
but it may even not be possible to

53
00:03:54,524 --> 00:03:58,982
purchase a bigger machine. And it's also very slow

54
00:03:59,046 --> 00:04:02,410
this reply, because usually

55
00:04:02,560 --> 00:04:06,106
it takes a long time to install the system in

56
00:04:06,128 --> 00:04:10,214
a new machine. For instance, when you go to the services world,

57
00:04:10,352 --> 00:04:13,966
you go to a very different approach to the

58
00:04:14,068 --> 00:04:17,710
scalability of your system. So usually each

59
00:04:17,780 --> 00:04:21,258
service scales out when there is an increase

60
00:04:21,354 --> 00:04:25,138
in the demand. So it instantiates more

61
00:04:25,304 --> 00:04:29,186
units of the same service. So if you have

62
00:04:29,208 --> 00:04:32,882
a larger workload, you have more instance of the service.

63
00:04:33,016 --> 00:04:37,014
When the workload decreases, you scale in, so you

64
00:04:37,052 --> 00:04:41,010
kill instances of the service. It's much more economically,

65
00:04:41,090 --> 00:04:45,126
and as you can see, you don't need to scale all the services,

66
00:04:45,228 --> 00:04:48,806
just go the services that require the scaling

67
00:04:48,838 --> 00:04:52,902
out or in to have a better response to the variations

68
00:04:52,966 --> 00:04:56,970
of the workload. So what we need to do have

69
00:04:57,040 --> 00:05:01,202
to be able to answer to the problems of this increasing

70
00:05:01,286 --> 00:05:04,766
complexity of the services world. We have a

71
00:05:04,788 --> 00:05:07,754
wish list. Each service should be loosely coupled.

72
00:05:07,802 --> 00:05:10,654
It should be possible to develop,

73
00:05:10,772 --> 00:05:14,190
maintain and test and deploy independently

74
00:05:14,350 --> 00:05:17,954
each service. What we observe is that the

75
00:05:17,992 --> 00:05:21,906
amount of code that you need to develop for

76
00:05:21,928 --> 00:05:26,210
your application increases much more than the functional requirements

77
00:05:26,290 --> 00:05:30,834
you start to need to develop code for automation

78
00:05:30,962 --> 00:05:34,994
tasks in terms of CI, CD and testing

79
00:05:35,042 --> 00:05:38,502
and so on. That I will speak a little bit more later in this

80
00:05:38,556 --> 00:05:41,974
presentation. In terms of tooling you need,

81
00:05:42,172 --> 00:05:45,706
git manages all the files that you need

82
00:05:45,808 --> 00:05:49,434
in your project. Usually I take the approach of

83
00:05:49,472 --> 00:05:53,214
having a git repo for each service, but some

84
00:05:53,252 --> 00:05:56,414
people take another approach. I think this is the one

85
00:05:56,452 --> 00:05:59,866
that has been working the best for all my teams.

86
00:05:59,978 --> 00:06:03,122
The automation tool. I'm thinking about something like

87
00:06:03,176 --> 00:06:07,342
Jenkins, where you automate development tasks

88
00:06:07,486 --> 00:06:10,206
like building your artifacts,

89
00:06:10,318 --> 00:06:13,666
testing or deploying. Artifactory is

90
00:06:13,688 --> 00:06:17,430
a repository where you store versions of your

91
00:06:17,500 --> 00:06:21,462
artifacts. There is another very important tool that

92
00:06:21,516 --> 00:06:25,350
is the infrastructure as code. I'm thinking about

93
00:06:25,500 --> 00:06:29,354
tools like terraform, where you describe the

94
00:06:29,472 --> 00:06:33,482
infrastructure that you need for your application. Everything from

95
00:06:33,536 --> 00:06:36,646
virtual machine to databases and tables

96
00:06:36,678 --> 00:06:39,894
or vpns. Everything that you need should be described

97
00:06:39,942 --> 00:06:44,074
as code. How does it work? You have continuous

98
00:06:44,122 --> 00:06:47,662
integration to make new versions of

99
00:06:47,716 --> 00:06:51,066
your artifacts. Each time there is a merge

100
00:06:51,178 --> 00:06:54,030
of a branch to main in git.

101
00:06:54,190 --> 00:06:58,194
So every time you do a pull request and pull request is approved and then

102
00:06:58,232 --> 00:07:01,682
there is a merge automatically. A new version of

103
00:07:01,736 --> 00:07:06,026
the artifact should be published in the artifactory.

104
00:07:06,158 --> 00:07:09,734
And when you want to deploy an artifact in an

105
00:07:09,772 --> 00:07:13,574
environment, you just run a deploy script where you say I want this

106
00:07:13,612 --> 00:07:17,550
version in this environment and it automatically

107
00:07:17,650 --> 00:07:21,114
is deployed on the target environment without

108
00:07:21,232 --> 00:07:24,826
human intervention. And so how do we tackle the

109
00:07:24,848 --> 00:07:28,346
complexity of everything that I've been talking about

110
00:07:28,528 --> 00:07:31,806
as we have seen, we have to deal with much more

111
00:07:31,828 --> 00:07:35,882
than the fractional requirements because we need to build continuous

112
00:07:35,946 --> 00:07:39,262
integration layer, we need to describe everything as

113
00:07:39,316 --> 00:07:42,682
code, we need to build a continuous deployment layer,

114
00:07:42,746 --> 00:07:45,838
and we need to automation all kind of tests,

115
00:07:45,934 --> 00:07:49,634
much more than t unit tests. You need integration test,

116
00:07:49,752 --> 00:07:53,010
acceptance test, performance test, security test,

117
00:07:53,080 --> 00:07:56,902
everything that you really need to be able to put your

118
00:07:56,956 --> 00:08:00,326
application in production. And I want to

119
00:08:00,428 --> 00:08:04,402
stress the fact that there is no space for human intervention

120
00:08:04,466 --> 00:08:08,330
in terms of tasks. Humans can only be present

121
00:08:08,400 --> 00:08:11,942
as gatekeepers. For instance, you may require

122
00:08:12,086 --> 00:08:15,562
human authorization to deploy your

123
00:08:15,616 --> 00:08:18,906
application in production, but it's just

124
00:08:19,088 --> 00:08:22,730
a gatekeeper, it does not perform a real action.

125
00:08:23,170 --> 00:08:27,054
And in the end we have very good news, because the

126
00:08:27,092 --> 00:08:30,250
anti pattern of hands on my machine just disappears.

127
00:08:30,330 --> 00:08:34,078
You no longer run anything in your machine, your machine just needs

128
00:08:34,164 --> 00:08:37,678
an IDE, you don't need to run anything in your machine,

129
00:08:37,774 --> 00:08:42,046
don't need to do tests in your machine, nothing. You run pipelines.

130
00:08:42,238 --> 00:08:45,794
If there is a problem in the pipeline, there is a report that

131
00:08:45,832 --> 00:08:49,640
you need with the problems and you need to solve those problems.

132
00:08:50,890 --> 00:08:54,454
If the pipelines go green in the end of a

133
00:08:54,492 --> 00:08:58,690
process, you are sure that it is ready to production.

134
00:08:58,850 --> 00:09:02,554
And so automation is not an afterthought. As we have

135
00:09:02,592 --> 00:09:05,834
learned from test driven development. You need

136
00:09:05,872 --> 00:09:08,954
to do the tests before you write the code. So is

137
00:09:08,992 --> 00:09:12,654
it an iterative process that starts with writing tests, writing the

138
00:09:12,692 --> 00:09:16,506
code that solves the test and refactor. And this is a cycle,

139
00:09:16,618 --> 00:09:20,366
and you go forever in this cycle. During the time that you

140
00:09:20,388 --> 00:09:24,450
are improving your application, the same approach should be used

141
00:09:24,520 --> 00:09:27,730
for the automation. So you need to

142
00:09:27,800 --> 00:09:31,234
first have the infrastructure scode, you need to

143
00:09:31,272 --> 00:09:34,530
have the automation scripts that you need for your

144
00:09:34,600 --> 00:09:38,342
application at stage that you are. For instance, if you are really

145
00:09:38,396 --> 00:09:42,294
in the beginning, maybe you just need automation script and

146
00:09:42,332 --> 00:09:45,954
you start developing. And as your application evolves

147
00:09:46,002 --> 00:09:49,666
over time, you need to add the scripts for testing

148
00:09:49,698 --> 00:09:53,706
or for deployment. And same with the infrastructure as

149
00:09:53,728 --> 00:09:58,054
code, you may modify it, put more infrastructure

150
00:09:58,182 --> 00:10:02,170
in your project, et cetera. But it's always an iterative

151
00:10:02,250 --> 00:10:06,174
process. And this approach has two big

152
00:10:06,292 --> 00:10:10,270
advantages. In one end, if you build

153
00:10:10,340 --> 00:10:14,254
incrementally, you are sure that you don't leave anything behind and

154
00:10:14,292 --> 00:10:18,270
everything is querient. The same way that when you do TDD,

155
00:10:18,350 --> 00:10:21,858
you are sure that you achieve the level of coverage that you want

156
00:10:21,944 --> 00:10:25,234
and the code is testable. And it's easier

157
00:10:25,282 --> 00:10:29,074
this way because if you try to do the automation

158
00:10:29,122 --> 00:10:33,542
layer in the end of the project, the effort required is

159
00:10:33,596 --> 00:10:37,206
much bigger than with an incremental process.

160
00:10:37,388 --> 00:10:40,774
There is a second very important reason to

161
00:10:40,812 --> 00:10:44,454
do this approach is that you test

162
00:10:44,572 --> 00:10:48,326
the automation layer in prod so you

163
00:10:48,348 --> 00:10:52,302
gain muscle in your automation layer. You are

164
00:10:52,356 --> 00:10:56,250
confident when you reach production environment

165
00:10:56,330 --> 00:10:59,422
that everything is working fine.

166
00:10:59,476 --> 00:11:02,490
In terms of automation, your system is resilient,

167
00:11:02,570 --> 00:11:05,754
is more secure, is more error prone.

168
00:11:05,882 --> 00:11:09,294
And this is the reason why I say that automation is

169
00:11:09,332 --> 00:11:12,430
where your project starts. Thank you.

170
00:11:12,580 --> 00:11:13,370
It was a pleasure.

