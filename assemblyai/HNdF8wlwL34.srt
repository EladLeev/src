1
00:01:28,850 --> 00:01:32,262
Everyone. In this presentation we'll talk about

2
00:01:32,396 --> 00:01:36,262
how the history of software engineers has

3
00:01:36,316 --> 00:01:40,254
and will continue to shape the improvement of in

4
00:01:40,412 --> 00:01:44,090
practices. Then we'll introduce newer concepts

5
00:01:44,170 --> 00:01:47,594
like environment as code that will help further

6
00:01:47,642 --> 00:01:51,354
the craft of managing infrastructure beyond

7
00:01:51,482 --> 00:01:55,470
infrastructure as code my name is Ada Shah.

8
00:01:55,630 --> 00:01:59,490
I am the founder and CEO at Zlifecycle.

9
00:02:04,970 --> 00:02:08,742
We as software industry has always learned from

10
00:02:08,796 --> 00:02:12,786
other industries like Waterfall, who remembers?

11
00:02:12,818 --> 00:02:15,670
Waterfall came from construction,

12
00:02:16,090 --> 00:02:19,834
lean came from how Toyota used to do their

13
00:02:19,872 --> 00:02:22,940
production and still do it.

14
00:02:23,550 --> 00:02:27,690
And we are learning how to handle software incidents

15
00:02:28,190 --> 00:02:31,774
from industries like airlines. This has

16
00:02:31,812 --> 00:02:35,470
helped us grow and helped us

17
00:02:35,620 --> 00:02:37,550
improve as an industry.

18
00:02:40,370 --> 00:02:44,174
In this talk, we will look at history of software engineering

19
00:02:44,302 --> 00:02:47,954
as overall and then we will see what

20
00:02:47,992 --> 00:02:52,142
of these practices have already helped us manage infrastructure

21
00:02:52,286 --> 00:02:56,790
and how we can evolve this into using

22
00:02:56,860 --> 00:03:00,802
other aspects. We'll start with version

23
00:03:00,866 --> 00:03:05,254
control, which around 1970s is when

24
00:03:05,452 --> 00:03:09,174
we started using that. I can't even imagine

25
00:03:09,222 --> 00:03:12,474
a world without version control now, but back

26
00:03:12,512 --> 00:03:15,706
in the days, the latest code used to

27
00:03:15,728 --> 00:03:18,090
be on an engineer's machine.

28
00:03:19,630 --> 00:03:23,150
After that we'll talk about deployment pipelines around

29
00:03:23,220 --> 00:03:27,102
1990s 1991 is when we started

30
00:03:27,156 --> 00:03:30,762
using deployment pipelines that gave us more predictable

31
00:03:30,826 --> 00:03:34,174
deployments. Then we'll

32
00:03:34,222 --> 00:03:37,762
talk. But microservices around 2005

33
00:03:37,816 --> 00:03:41,202
is when we realized that we need to start breaking our

34
00:03:41,256 --> 00:03:44,938
monoliths into smaller services to gain

35
00:03:45,134 --> 00:03:47,720
faster feature lead time.

36
00:03:51,050 --> 00:03:54,662
Taken around 2013 ish we started

37
00:03:54,716 --> 00:03:58,074
using continue. We'll look into that and how

38
00:03:58,112 --> 00:04:01,802
that helped software engineering and taken how that

39
00:04:01,856 --> 00:04:04,570
can be applied to managing infrastructure.

40
00:04:05,630 --> 00:04:08,986
From there on, Kubernetes is what became the

41
00:04:09,008 --> 00:04:11,920
de facto orchestration engine.

42
00:04:12,290 --> 00:04:15,710
So around 2014 we started using

43
00:04:15,780 --> 00:04:19,758
that and then let's see how we can apply the same

44
00:04:19,844 --> 00:04:23,162
to infrastructure. And then the latest

45
00:04:23,226 --> 00:04:26,882
one here is Gitops. Around 2017 is

46
00:04:26,936 --> 00:04:30,418
what it came in, and then from there on we started

47
00:04:30,504 --> 00:04:34,226
using that to deploy applications. And then we'll see

48
00:04:34,248 --> 00:04:37,510
how that we can use to deploy infrastructure.

49
00:04:39,530 --> 00:04:42,802
Before we get started though looking at those aspects,

50
00:04:42,866 --> 00:04:47,506
let's define what an infrastructure as code is, because the

51
00:04:47,548 --> 00:04:52,154
first three topics that I mentioned in the history are

52
00:04:52,192 --> 00:04:55,180
all achieved through infrastructure has code.

53
00:04:56,270 --> 00:04:59,878
So I'm sure you all know what infrastructure as code is.

54
00:05:00,064 --> 00:05:04,682
It just helps us automate provisioning of infrastructure resources.

55
00:05:04,826 --> 00:05:08,858
It is one of the key DevOps practices that enables

56
00:05:08,954 --> 00:05:12,422
teams to deliver infrastructure rapidly

57
00:05:12,506 --> 00:05:13,570
and reliably.

58
00:05:16,710 --> 00:05:20,370
All right, so before version control became ubiquitous,

59
00:05:20,710 --> 00:05:24,594
determining the latest version of an application might

60
00:05:24,632 --> 00:05:27,974
be a matter of asking what code is on an

61
00:05:28,012 --> 00:05:31,346
engineer's local machine who deployed

62
00:05:31,378 --> 00:05:34,914
it last. We realized this is unreliable,

63
00:05:35,042 --> 00:05:38,140
error prone, and makes collaboration difficult.

64
00:05:38,510 --> 00:05:43,098
Version control has allowed application code

65
00:05:43,264 --> 00:05:46,780
to scale and engineers to collaborate better.

66
00:05:48,430 --> 00:05:52,190
Infrastructure continued to be managed manually long after

67
00:05:52,260 --> 00:05:54,960
application code left those days behind,

68
00:05:55,730 --> 00:05:59,294
whether from a cloud provider's UI or

69
00:05:59,332 --> 00:06:03,662
the command line from developer's machine. Managing infrastructure

70
00:06:03,726 --> 00:06:07,474
manually makes it difficult to make changes or

71
00:06:07,512 --> 00:06:11,314
troubleshoot regressions. Infrastructure as code made

72
00:06:11,352 --> 00:06:14,814
it possible for infrastructure changes to be stored in version

73
00:06:14,862 --> 00:06:18,774
control, and it has saved engineers the toil of

74
00:06:18,812 --> 00:06:23,030
tracking the current state of your infrastructure

75
00:06:23,370 --> 00:06:27,206
and made troubleshooting easier. As you

76
00:06:27,228 --> 00:06:30,762
can see here, you should put everything in source control,

77
00:06:30,896 --> 00:06:34,058
even your bash script if you're using once in a while,

78
00:06:34,224 --> 00:06:38,122
and then make it available to everyone so that anyone

79
00:06:38,256 --> 00:06:42,298
in your organization can see how their infrastructure

80
00:06:42,394 --> 00:06:43,550
is deployed.

81
00:06:46,610 --> 00:06:50,506
Initially, it was not uncommon for applications

82
00:06:50,538 --> 00:06:54,930
to be deployed with a bash script, or even manually copying

83
00:06:55,510 --> 00:06:59,170
from a team member's laptop with

84
00:06:59,240 --> 00:07:01,700
tests run ad hoc, if at all.

85
00:07:02,150 --> 00:07:05,350
The frequent and reliable deployments of today

86
00:07:05,420 --> 00:07:09,762
were made possible through pipelines that have continuous

87
00:07:09,826 --> 00:07:12,310
integration and deployment.

88
00:07:13,050 --> 00:07:16,390
So this helps stabilize and made

89
00:07:16,460 --> 00:07:19,750
those deployments of your application more predictable

90
00:07:19,910 --> 00:07:21,210
and repeatable.

91
00:07:23,310 --> 00:07:27,270
ISE has also benefited from the use of pipelines.

92
00:07:27,430 --> 00:07:31,562
With pipelines, infrastructure changes can be tested,

93
00:07:31,706 --> 00:07:34,922
deployment becomes repeatable and auditable,

94
00:07:35,066 --> 00:07:38,830
and managing dependencies and secrets is made easier.

95
00:07:39,410 --> 00:07:42,790
This diagram shows an evolution

96
00:07:42,890 --> 00:07:46,574
from running infrastructure as code on an engineer's

97
00:07:46,622 --> 00:07:50,290
machine to a shared environment using pipelines.

98
00:07:51,670 --> 00:07:55,170
Let's dig deeper into an ISE pipeline.

99
00:07:55,770 --> 00:07:58,994
So as you can see on the left, we have the continuation

100
00:07:59,122 --> 00:08:03,046
integration bit, which means that

101
00:08:03,148 --> 00:08:07,270
we can run some static analysis against the ISE.

102
00:08:07,710 --> 00:08:09,930
We can run any unit tests,

103
00:08:11,790 --> 00:08:15,734
see if those things pass before pushing

104
00:08:15,782 --> 00:08:19,254
our changes. After that's

105
00:08:19,302 --> 00:08:22,666
done, we do testing

106
00:08:22,698 --> 00:08:26,682
and validation, and for that we can provision temporary

107
00:08:26,746 --> 00:08:30,858
environments using ISE, run compliance

108
00:08:30,954 --> 00:08:33,886
tests, integration tests,

109
00:08:33,998 --> 00:08:38,126
any security checks that you want to have, and any smoke tests.

110
00:08:38,238 --> 00:08:42,066
This gives us confidence that our changes will work in

111
00:08:42,088 --> 00:08:45,714
production. And then if that works, then we

112
00:08:45,752 --> 00:08:49,702
go to the last step. These is we deploy those changes and

113
00:08:49,756 --> 00:08:53,062
provision our infrastructure in production, and then

114
00:08:53,116 --> 00:08:56,386
we run some smoke tests to validate that production

115
00:08:56,498 --> 00:09:00,380
is what we want. So this is how

116
00:09:01,230 --> 00:09:05,434
we have been using pipelines with infrastructure as code to

117
00:09:05,472 --> 00:09:09,370
achieve more reliable provisioning of infrastructure.

118
00:09:12,210 --> 00:09:14,990
As applications grew more complex,

119
00:09:15,650 --> 00:09:19,374
deploying the entire application as a monolith can

120
00:09:19,412 --> 00:09:22,974
become a bottleneck to continuous delivery. A bug

121
00:09:23,022 --> 00:09:27,054
in one part of the code base or infrastructure prevents

122
00:09:27,102 --> 00:09:29,650
the entire application from deploying.

123
00:09:30,070 --> 00:09:33,746
Domain logic and tech stack decisions are

124
00:09:33,768 --> 00:09:37,366
often tightly coupled throughout the code base.

125
00:09:37,548 --> 00:09:40,754
Because it's all a monolith

126
00:09:40,802 --> 00:09:45,202
code base, you have everything deployed

127
00:09:45,266 --> 00:09:48,166
as a single unit. They all are tightly coupled,

128
00:09:48,198 --> 00:09:52,534
so you can't use different technologies. There teams

129
00:09:52,582 --> 00:09:56,406
began being monolith applications into smaller

130
00:09:56,518 --> 00:10:00,334
self continue components or microservices that

131
00:10:00,372 --> 00:10:04,474
could be managed and released independently. This helped

132
00:10:04,522 --> 00:10:08,042
them go to market faster, reduced the feature

133
00:10:08,106 --> 00:10:12,834
lead time, and it

134
00:10:12,872 --> 00:10:16,530
made working with applications more efficient.

135
00:10:19,110 --> 00:10:20,210
Similarly,

136
00:10:22,710 --> 00:10:25,906
basically here's an example of monolith to microservices.

137
00:10:26,018 --> 00:10:30,246
If you have a retail application where you have

138
00:10:30,268 --> 00:10:34,120
a website that allows people to

139
00:10:35,210 --> 00:10:39,334
list down products, they can check out, they can make payments

140
00:10:39,382 --> 00:10:42,570
or billing, has shopping cart aspects,

141
00:10:43,790 --> 00:10:46,970
you have the monolith application on the left.

142
00:10:47,120 --> 00:10:50,398
And then with microservices architecture you

143
00:10:50,404 --> 00:10:54,334
can start being those into separate services. You can even have

144
00:10:54,372 --> 00:10:58,366
your UI layer or data access layer and all

145
00:10:58,388 --> 00:11:00,320
of those as separate services.

146
00:11:05,270 --> 00:11:08,706
The same can be said for infrastructure. Using a

147
00:11:08,728 --> 00:11:11,902
single infrastructure has code like terraform

148
00:11:12,046 --> 00:11:16,098
to deploy all the infrastructure needed becomes complex

149
00:11:16,274 --> 00:11:20,514
and hard to maintain as you scale. To avoid

150
00:11:20,562 --> 00:11:24,530
that, we started breaking the IAC into various pieces

151
00:11:24,610 --> 00:11:28,326
which help with collaboration and reduced feature lead time

152
00:11:28,428 --> 00:11:32,294
for infrastructure breaking ise into loosely

153
00:11:32,342 --> 00:11:35,882
coupled components, taken it easier to understand and

154
00:11:35,936 --> 00:11:39,114
maintain it. So here's an example where you,

155
00:11:39,232 --> 00:11:43,054
let's say have a monolith infrastructure as code, where you have

156
00:11:43,092 --> 00:11:46,782
your networking platform, EC two and

157
00:11:46,836 --> 00:11:50,206
s three bucket and database and all of that together in

158
00:11:50,228 --> 00:11:54,018
a monolith with this. If you run your

159
00:11:54,184 --> 00:11:58,082
terraform, you have a single state file. If you make any

160
00:11:58,136 --> 00:12:01,570
changes, you have to run that again and again

161
00:12:01,720 --> 00:12:05,330
and that becomes slower as you scale.

162
00:12:06,010 --> 00:12:10,262
So in case of micro IAC, you basically break

163
00:12:10,396 --> 00:12:14,402
each of these components into separate terraform

164
00:12:14,466 --> 00:12:18,314
runs. So you would have a separate networking which

165
00:12:18,352 --> 00:12:21,910
you would run separately. After networking

166
00:12:21,990 --> 00:12:25,450
you would run, let's say your EC, two instances,

167
00:12:25,790 --> 00:12:29,286
terraform or Kubernetes terraform or postgres

168
00:12:29,318 --> 00:12:33,702
terraform. And then after that you would run your kubernetes

169
00:12:33,766 --> 00:12:37,470
add ons terraform. So breaking these separately

170
00:12:38,050 --> 00:12:41,434
allows you to have these loosely coupled

171
00:12:41,482 --> 00:12:44,962
components and you can make a change to one, just run

172
00:12:45,016 --> 00:12:49,454
that and have a more efficient way of provisioning

173
00:12:49,502 --> 00:12:50,450
infrastructure.

174
00:12:52,550 --> 00:12:56,470
So this has been working great, right? Well,

175
00:12:56,620 --> 00:13:00,546
not actually, because ISE

176
00:13:00,578 --> 00:13:03,094
is powerful and crucial tool.

177
00:13:03,292 --> 00:13:07,374
However, if you have ever managed many divergent

178
00:13:07,442 --> 00:13:11,498
environments, something like this one where

179
00:13:11,664 --> 00:13:15,146
you have your networking separate and you

180
00:13:15,168 --> 00:13:19,094
have bunch of these different components with your databases, let's say you have sage

181
00:13:19,142 --> 00:13:23,262
maker, let's say you have kubernetes, clusters and

182
00:13:23,316 --> 00:13:26,542
s three buckets and all that with

183
00:13:26,596 --> 00:13:30,480
existed tools, you know, there is still a long way,

184
00:13:30,930 --> 00:13:34,654
a long road ahead in improving developer

185
00:13:34,702 --> 00:13:37,858
effectiveness with infrastructure as code.

186
00:13:38,024 --> 00:13:39,970
And that becomes painful.

187
00:13:42,390 --> 00:13:45,766
So here's how you would actually provision an

188
00:13:45,788 --> 00:13:49,074
environment like that, using existing

189
00:13:49,122 --> 00:13:52,822
tools, you'd basically hand roll pipelines. So write

190
00:13:52,876 --> 00:13:56,134
a lot of logic in your

191
00:13:56,172 --> 00:13:59,626
jenkins or Circleci or whatever pipelining tool that you are

192
00:13:59,648 --> 00:14:03,654
using and that logic will basically run your various

193
00:14:03,782 --> 00:14:07,990
ISe components and then you'll manage that complex

194
00:14:08,070 --> 00:14:12,386
dependencies within the pipeline. So while your ise

195
00:14:12,438 --> 00:14:15,806
is declarative and idempotent, these pipelines are

196
00:14:15,828 --> 00:14:19,614
not. You have to write a lot of custom code to provision an

197
00:14:19,652 --> 00:14:23,678
entire environment. So for example, logic for executing

198
00:14:23,774 --> 00:14:27,346
networking layer first and then executing the

199
00:14:27,368 --> 00:14:30,622
Kubernetes layer and then kubernetes add ons layer,

200
00:14:30,766 --> 00:14:33,406
all of that logic needs to be written in your pipeline.

201
00:14:33,438 --> 00:14:37,046
Code tear down must be supported as

202
00:14:37,068 --> 00:14:40,690
well. If you have any failures that impact the environment,

203
00:14:40,850 --> 00:14:44,326
you need to account for that as well. And a

204
00:14:44,348 --> 00:14:49,574
lot of that just comes down to then manually solving

205
00:14:49,622 --> 00:14:53,498
these problems outside these pipelines. So as you

206
00:14:53,504 --> 00:14:57,190
can tell, these options are inefficient, costly,

207
00:14:57,270 --> 00:14:59,820
and typically it requires a dedicated team.

208
00:15:00,210 --> 00:15:03,790
Again, we are talking about more complex

209
00:15:04,210 --> 00:15:07,690
environment deployments. If you have a very simple setup,

210
00:15:07,850 --> 00:15:11,502
you don't need to worry about that. Just having some

211
00:15:11,636 --> 00:15:14,820
simple IAC and a pipeline would do the job.

212
00:15:17,270 --> 00:15:21,106
So since infrastructure as code is great,

213
00:15:21,208 --> 00:15:25,646
it helps in a lot of ways, but has becomes limiting as

214
00:15:25,688 --> 00:15:29,346
we scale. We need to start thinking beyond infrastructure

215
00:15:29,378 --> 00:15:32,934
has code. We need to start thinking how we can use

216
00:15:33,052 --> 00:15:36,534
infrastructure as code for things that it's powerful for.

217
00:15:36,652 --> 00:15:40,842
But how can we add on things on top of that to

218
00:15:40,896 --> 00:15:44,694
help us achieve scalability,

219
00:15:44,822 --> 00:15:48,410
achieve something in production that is more efficient.

220
00:15:50,450 --> 00:15:53,998
So that's when code the right side of

221
00:15:54,084 --> 00:15:57,582
this history of software engineering. So there are other

222
00:15:57,636 --> 00:16:01,214
practices taken, version control, deployment, pipeline and

223
00:16:01,252 --> 00:16:05,410
microservices which we are already using in infrastructure.

224
00:16:05,910 --> 00:16:10,050
How about using the other practices that are out there like

225
00:16:10,200 --> 00:16:14,206
continue or package managers or kubernetes?

226
00:16:14,318 --> 00:16:18,066
That has worked pretty well with applications and Gitops,

227
00:16:18,098 --> 00:16:21,080
that has worked well in recent years.

228
00:16:21,930 --> 00:16:25,686
So now we'll look at those practices and how they can

229
00:16:25,708 --> 00:16:29,258
be applied to manage infrastructure, and we will use

230
00:16:29,344 --> 00:16:33,094
environment as code as a mechanism to achieve

231
00:16:33,142 --> 00:16:36,346
those. So before we dig

232
00:16:36,368 --> 00:16:40,146
in deeper there with those, these, let's actually define

233
00:16:40,198 --> 00:16:43,870
what environment has code is. It is an abstraction over

234
00:16:43,940 --> 00:16:47,466
infrastructure as code. So you're still using infrastructure

235
00:16:47,498 --> 00:16:50,654
has code under the hood. This provides a

236
00:16:50,692 --> 00:16:53,890
declarative way of defining an entire environment.

237
00:16:54,310 --> 00:16:57,890
It works well with a control plane that manages the state

238
00:16:57,960 --> 00:17:01,970
of the entire environment, including any relationships between

239
00:17:02,040 --> 00:17:05,446
various resources. It detects drifts as

240
00:17:05,468 --> 00:17:09,174
well as enables reconciliation. It supports best

241
00:17:09,212 --> 00:17:12,130
practices like loose coupling, item potency,

242
00:17:12,210 --> 00:17:15,590
immutability, et cetera for the entire environment.

243
00:17:15,930 --> 00:17:20,090
ESC allows teams to deliver entire environments

244
00:17:20,590 --> 00:17:24,426
rapidly and reliably at scale. I know it was a

245
00:17:24,448 --> 00:17:27,900
long definition, but I think it was important to kind of read through it.

246
00:17:30,690 --> 00:17:34,720
So now that we kind of define what environment as code is,

247
00:17:35,090 --> 00:17:39,182
and we'll look into it deeper as we go into these

248
00:17:39,236 --> 00:17:42,634
various topics. So let's come back to

249
00:17:42,772 --> 00:17:47,426
one of the practices that has worked well for us in

250
00:17:47,448 --> 00:17:51,074
software engineering, working with applications. So yeah,

251
00:17:51,112 --> 00:17:54,466
the adoption of microservices made managing individual

252
00:17:54,568 --> 00:17:58,326
services easier, but added complexity to application

253
00:17:58,428 --> 00:18:01,954
dependencies. Managing dependencies between various

254
00:18:02,002 --> 00:18:06,354
microservices can put even a most robust continuous

255
00:18:06,402 --> 00:18:10,170
delivery pipeline to the test. This makes

256
00:18:10,240 --> 00:18:13,466
deploying an entire application environment a

257
00:18:13,488 --> 00:18:17,126
pain point. Similarly for infrastructure

258
00:18:17,158 --> 00:18:21,162
as code. Code creates complex

259
00:18:21,226 --> 00:18:24,030
dependency graphs that can be difficult to navigate.

260
00:18:24,610 --> 00:18:28,110
So several tools have gained popularity after

261
00:18:28,180 --> 00:18:32,074
microservices because they help simplify complex

262
00:18:32,202 --> 00:18:35,794
deployments. Containers is one of

263
00:18:35,832 --> 00:18:39,682
those tools that helps organize dependencies so

264
00:18:39,736 --> 00:18:43,394
that an engineer doesn't deploy a

265
00:18:43,432 --> 00:18:47,254
server and then deploy their applications along with that.

266
00:18:47,372 --> 00:18:51,186
On top of that, helm charts

267
00:18:51,218 --> 00:18:54,306
and customize taken that concepts even further.

268
00:18:54,498 --> 00:18:58,586
Serving has package managers for a suite of many

269
00:18:58,688 --> 00:19:02,858
services. So these tools have kind of helped us

270
00:19:03,024 --> 00:19:06,538
improve developer effectiveness and

271
00:19:06,704 --> 00:19:10,990
helped us deploy to production with more confidence.

272
00:19:11,970 --> 00:19:15,034
Similarly, environment s code applies

273
00:19:15,082 --> 00:19:19,002
the same concept to an entire environment by packaging

274
00:19:19,066 --> 00:19:22,270
all components within an environment,

275
00:19:22,610 --> 00:19:25,838
along with the dependencies between those components.

276
00:19:26,014 --> 00:19:29,730
Let's look at how that an example code

277
00:19:29,800 --> 00:19:32,994
for environment as code looks like. But before we

278
00:19:33,032 --> 00:19:37,078
do that, let's kind of just at a high level show the difference between

279
00:19:37,164 --> 00:19:40,200
environment as code and infrastructure as code.

280
00:19:40,570 --> 00:19:44,882
So infrastructure as code automates various Lego pieces.

281
00:19:45,026 --> 00:19:48,342
If you take the Lego analogy, you have various

282
00:19:48,406 --> 00:19:52,182
pieces which in this case are infrastructure resources

283
00:19:52,246 --> 00:19:55,514
or could be a group of them. Infrastructure has

284
00:19:55,552 --> 00:19:58,700
code automates those and is good at doing that.

285
00:19:59,230 --> 00:20:02,814
What environment S code does is it automates how

286
00:20:02,852 --> 00:20:06,686
those various Lego pieces are connected to make up a

287
00:20:06,708 --> 00:20:10,270
Lego toy, which is where the most value

288
00:20:10,340 --> 00:20:14,110
is. Getting your entire environment, your databases,

289
00:20:14,190 --> 00:20:17,422
your networking, your kubernetes,

290
00:20:17,486 --> 00:20:20,914
clusters or EC, two instances or s three buckets. All of that

291
00:20:20,952 --> 00:20:24,842
together is more meaningful and useful

292
00:20:25,006 --> 00:20:27,080
to a product teams.

293
00:20:29,530 --> 00:20:33,666
Now let's dig a little deeper into provisioning workflow

294
00:20:33,858 --> 00:20:37,590
using environment as code. So as we can see at the top,

295
00:20:37,740 --> 00:20:41,114
you declare your environment as code, and we will look at an

296
00:20:41,152 --> 00:20:44,966
example in the next slide. Once you push that to your source

297
00:20:44,998 --> 00:20:48,620
control, there is a control plane associated with

298
00:20:48,990 --> 00:20:52,798
environment as code that picks up the change. It sees there

299
00:20:52,804 --> 00:20:56,654
is a drift because you're doing it for the first time or maybe there is

300
00:20:56,692 --> 00:21:00,906
a drift on an existing environment and it starts reconciling.

301
00:21:01,018 --> 00:21:04,526
But it also manages state for your entire environment.

302
00:21:04,638 --> 00:21:08,190
So all these dependencies that are there and what their status

303
00:21:08,270 --> 00:21:11,774
is so that you can make intelligent decisions

304
00:21:11,822 --> 00:21:15,460
or make provisioning as and when needed.

305
00:21:15,930 --> 00:21:19,858
From there on, control plane kind of starts reconciling

306
00:21:19,954 --> 00:21:23,670
stuff at the top node, like networking, being here

307
00:21:23,740 --> 00:21:27,282
first, then your Kubernetes cluster, your postgres database

308
00:21:27,346 --> 00:21:30,570
or Kubernetes add ons after that. So control

309
00:21:30,640 --> 00:21:34,042
plane runs these various infrastructure as

310
00:21:34,096 --> 00:21:36,906
code components in the right order.

311
00:21:37,088 --> 00:21:40,846
As you can see in that box it says terraform. And each of

312
00:21:40,868 --> 00:21:43,966
these boxes, the networking, the platform

313
00:21:44,068 --> 00:21:47,962
kads and postgres and all of these are terraform

314
00:21:48,026 --> 00:21:52,394
code that have their own state. But what environment

315
00:21:52,442 --> 00:21:55,982
s code does is it also maintains state at an environment

316
00:21:56,046 --> 00:21:59,602
level because you want to know what's the state of the entire

317
00:21:59,736 --> 00:22:03,890
environment and how those various pieces are connected.

318
00:22:06,490 --> 00:22:10,130
So yeah, here's an example. This is our custom format,

319
00:22:10,210 --> 00:22:13,654
so you can use other formats as

320
00:22:13,692 --> 00:22:17,814
well. So as you can see from the top we are

321
00:22:17,852 --> 00:22:22,022
using custom resource definition, the Kubernetes custom resource definition.

322
00:22:22,166 --> 00:22:25,594
And as I mentioned, this is our format. So at the top we

323
00:22:25,632 --> 00:22:28,794
have your environment name, your team name,

324
00:22:28,992 --> 00:22:32,382
some other parameters. But as you can see

325
00:22:32,436 --> 00:22:35,290
that we have various components,

326
00:22:35,370 --> 00:22:38,606
various Lego pieces that make up the

327
00:22:38,628 --> 00:22:42,154
entire environment as part of this file.

328
00:22:42,282 --> 00:22:46,162
And then you will see here on line 54 and 55 that

329
00:22:46,216 --> 00:22:49,746
each component will have a type. In this case we have terraform as

330
00:22:49,768 --> 00:22:53,522
a type because we are using that to provision platform

331
00:22:53,656 --> 00:22:57,650
eks. And then you also can specify dependencies.

332
00:22:57,730 --> 00:23:01,558
That's how you kind of tie everything together.

333
00:23:01,644 --> 00:23:05,430
So in this case, eks depends on networking.

334
00:23:06,490 --> 00:23:09,622
So this allows you to define an entire environment.

335
00:23:09,686 --> 00:23:13,626
This allows you to push things desired state to code

336
00:23:13,808 --> 00:23:17,018
to source control. And then environment has code kind of

337
00:23:17,024 --> 00:23:20,942
picks it from there and then provisions your environment by going

338
00:23:20,996 --> 00:23:23,920
through these components one by one in the right order.

339
00:23:27,410 --> 00:23:31,582
So with increase in microservices adoption, it became clear

340
00:23:31,636 --> 00:23:35,010
that containers make it easy to manage

341
00:23:35,080 --> 00:23:38,494
those microservices. But then we had the container

342
00:23:38,542 --> 00:23:42,354
orchestration war that Kubernetes won and became the

343
00:23:42,392 --> 00:23:45,974
de facto orchestration tool. Kubernetes made

344
00:23:46,012 --> 00:23:50,242
it easier to manage microservices. These applications,

345
00:23:50,306 --> 00:23:53,746
especially due to its controller pattern that watches

346
00:23:53,778 --> 00:23:57,814
the state of your cluster, then makes changes

347
00:23:57,932 --> 00:24:01,318
where needed to bring it to the desired state specified

348
00:24:01,414 --> 00:24:04,570
in the code. So it does a lot of those things

349
00:24:04,640 --> 00:24:07,340
for you and makes it easy to manage.

350
00:24:09,470 --> 00:24:14,142
Environment s code applies the same logic to infrastructure using

351
00:24:14,196 --> 00:24:18,442
the controller pattern from Kubernetes Environment

352
00:24:18,506 --> 00:24:22,126
s code has a controller that tries to move the

353
00:24:22,148 --> 00:24:26,018
current state of these environment to the desired state in

354
00:24:26,024 --> 00:24:29,826
the code. See in the diagram that we have

355
00:24:29,848 --> 00:24:33,890
the desired state. On the left we have a control loop. It kind of

356
00:24:34,040 --> 00:24:37,574
observes and detects drift and tries to move

357
00:24:37,612 --> 00:24:41,222
the desired state to the current state. Current state

358
00:24:41,356 --> 00:24:45,298
to the desired state. And then there is this reconciliation aspect

359
00:24:45,394 --> 00:24:48,842
there as well. With environment has code though

360
00:24:48,896 --> 00:24:53,274
we would recommend having an approval step that

361
00:24:53,312 --> 00:24:56,426
shows you the plan first and you make a decision and

362
00:24:56,448 --> 00:24:59,900
taken this is based on what?

363
00:25:01,070 --> 00:25:04,878
Because you might have some destroyers there, right? You might be destroying something.

364
00:25:04,964 --> 00:25:08,730
And especially if you have a database, you don't want to just destroy

365
00:25:08,810 --> 00:25:12,834
anything without actually checking the plan and

366
00:25:12,872 --> 00:25:16,706
approving it. So this

367
00:25:16,728 --> 00:25:20,434
is how applying Kubernetes concepts and

368
00:25:20,472 --> 00:25:24,290
using Kubernetes to provision infrastructure helps.

369
00:25:26,330 --> 00:25:30,242
Yeah, we looked at this, but quickly. This control panel

370
00:25:30,306 --> 00:25:33,622
part is what we were talking about just now. This control

371
00:25:33,676 --> 00:25:36,966
panel running in Kubernetes helps you do that

372
00:25:36,988 --> 00:25:40,566
drift detection and reconciliation and allows

373
00:25:40,598 --> 00:25:44,314
you to bring back your environment if

374
00:25:44,352 --> 00:25:48,026
they are out of sync from your desired state back to the

375
00:25:48,048 --> 00:25:49,100
desired state.

376
00:25:53,890 --> 00:25:57,406
So far we have talked about improvements made to close the

377
00:25:57,428 --> 00:26:01,018
gap between an engineers, an engineer

378
00:26:01,114 --> 00:26:04,562
adding work to a code base, and that

379
00:26:04,616 --> 00:26:07,566
code base working and scaling in production.

380
00:26:07,758 --> 00:26:10,834
Turning to code submission itself as a

381
00:26:10,872 --> 00:26:13,940
tool for deployment is a natural next step.

382
00:26:14,470 --> 00:26:18,342
Kubernetes has already replaced a large

383
00:26:18,396 --> 00:26:21,810
portion of deployment pipeline logic with declarative

384
00:26:21,890 --> 00:26:25,542
configuration. Gitops on this

385
00:26:25,596 --> 00:26:29,078
concepts Gitops as a concept

386
00:26:29,174 --> 00:26:33,462
and it makes the entire deployment process configurable

387
00:26:33,526 --> 00:26:37,686
in code. It uses the git pull request workflow

388
00:26:37,878 --> 00:26:41,434
so that you can have a pull request, you can get it approved

389
00:26:41,482 --> 00:26:44,906
from someone, and then once you merge

390
00:26:44,938 --> 00:26:49,326
your changes, it picks it up and deploys those changes based

391
00:26:49,428 --> 00:26:53,330
on once it's merged to trunk.

392
00:26:54,630 --> 00:26:58,638
So here's a typical workflow from weaveworks

393
00:26:58,734 --> 00:27:02,530
that talks about deploying

394
00:27:03,750 --> 00:27:07,062
your changes using Gitops. So as you can see on the left

395
00:27:07,116 --> 00:27:11,000
you have your dev environment. Let's say

396
00:27:11,370 --> 00:27:15,126
you create a pull request, it gets approved and merged to

397
00:27:15,148 --> 00:27:18,742
git and then it picks up the change. You run some CI

398
00:27:18,886 --> 00:27:22,742
and then eventually you push your changes to container registry

399
00:27:22,886 --> 00:27:26,060
and then from there it gets deployed to

400
00:27:28,750 --> 00:27:30,570
your Kubernetes cluster.

401
00:27:31,170 --> 00:27:35,402
Similarly you can apply Gitops for environment

402
00:27:35,466 --> 00:27:39,114
has code. So if we start on the left, we push our environment

403
00:27:39,162 --> 00:27:42,998
has code to a branch, we run some validation,

404
00:27:43,194 --> 00:27:45,790
maybe some static analysis or best,

405
00:27:45,950 --> 00:27:49,362
and then we create pull request. One of your team

406
00:27:49,416 --> 00:27:53,186
members can approve the change or reject it and ask for

407
00:27:53,208 --> 00:27:56,920
a change. And then once they merge the PR,

408
00:27:57,370 --> 00:28:01,106
the control plane observes that repo picks

409
00:28:01,138 --> 00:28:04,374
up the change and it starts reconciling and give

410
00:28:04,412 --> 00:28:08,410
you your environment, your various infrastructure components.

411
00:28:11,550 --> 00:28:14,138
So that's the talk.

412
00:28:14,304 --> 00:28:17,814
Thanks for listening. The software industry

413
00:28:17,862 --> 00:28:21,994
has made great strides in improving software engineering.

414
00:28:22,122 --> 00:28:25,386
I'm hoping that things talk helped demonstrate

415
00:28:25,498 --> 00:28:30,218
how we can continue to build on existing software engineering practices

416
00:28:30,394 --> 00:28:33,722
to achieve similar gained in productivity

417
00:28:33,866 --> 00:28:37,466
and performance with respect to managing infrastructure.

418
00:28:37,658 --> 00:28:40,926
Infrastructure has code has already piqued the

419
00:28:40,948 --> 00:28:44,838
interest of many teams. Environment has code

420
00:28:44,964 --> 00:28:48,594
is on the horizon. Thanks everyone for listening.

421
00:28:48,722 --> 00:28:52,614
Hopefully this was helpful. You can find related content

422
00:28:52,732 --> 00:28:56,200
about the topic at the bitly link below.

423
00:28:56,810 --> 00:28:59,960
Please feel free to reach out if you have any questions.

424
00:29:00,490 --> 00:29:02,020
Thank you. Have a nice day.

