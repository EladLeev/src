1
00:00:25,570 --> 00:00:29,026
You. Hello and thank you all for joining my session

2
00:00:29,058 --> 00:00:32,834
at Conf 42 DevOps 2023 on deploying,

3
00:00:32,882 --> 00:00:36,326
building and observing sdks as a service. As a

4
00:00:36,348 --> 00:00:39,926
developer of many, many years, as consumer and architect of

5
00:00:39,948 --> 00:00:43,734
APIs, this is by far one of my favorite topics and

6
00:00:43,852 --> 00:00:47,030
well, one that I've, I've handled a number of times

7
00:00:47,100 --> 00:00:50,718
using what we're going to be talking about today. But anyway, as we

8
00:00:50,724 --> 00:00:53,594
go through this session, please drop any questions, comments,

9
00:00:53,642 --> 00:00:56,990
emojis into the chat or reach out to me in social media.

10
00:00:57,060 --> 00:01:00,286
I'm at developersteve Coochin pretty much most places and

11
00:01:00,388 --> 00:01:03,802
well, let me know what you think. Again, I will accept emoji.

12
00:01:03,866 --> 00:01:07,626
Anyway, before we get too far underway, I do have a quick disclaimer.

13
00:01:07,738 --> 00:01:10,994
I love tech jokes. I have a very long list of them. These are open

14
00:01:11,032 --> 00:01:14,574
source jokes, so please share them around to help make folks smile.

15
00:01:14,622 --> 00:01:19,038
But my joke today is why do devs prefer app dark themes?

16
00:01:19,214 --> 00:01:22,398
Well, it's because light attracts bugs.

17
00:01:22,574 --> 00:01:26,146
But of boots, I normally have a sound effect, but it's a few screens

18
00:01:26,178 --> 00:01:31,162
away so might do that one today. But anyway, you get the idea again.

19
00:01:31,216 --> 00:01:34,730
Hello, my name is developer Steve. I've been writing code,

20
00:01:34,800 --> 00:01:38,106
building apps and while just geeking out and tinkering around in the

21
00:01:38,128 --> 00:01:40,558
tech world for many, many years now,

22
00:01:40,724 --> 00:01:44,810
as a data analyst, as CTO, as developer,

23
00:01:44,970 --> 00:01:48,030
as developer advocate for more recent years.

24
00:01:48,180 --> 00:01:52,014
Always just love geeking out with folks, hearing what you're all building and

25
00:01:52,132 --> 00:01:56,030
well, hearing those geek out stories because that's what the industry is.

26
00:01:56,100 --> 00:01:59,634
In particular, I always love hearing about those side projects because we just

27
00:01:59,672 --> 00:02:03,006
came out of, well, we just came out of end of year holidays.

28
00:02:03,198 --> 00:02:07,010
Hope people got to build out some really cool stuff. I actually built out a

29
00:02:07,080 --> 00:02:10,706
hydro system, which I've hooked up to some IoT stuff, but I'll

30
00:02:10,738 --> 00:02:14,470
talk about that one in another talk. APIs in particular

31
00:02:14,540 --> 00:02:18,710
have something I've got a real soft spot for. I've been

32
00:02:18,860 --> 00:02:22,122
working with them for many, many years and also working

33
00:02:22,176 --> 00:02:26,022
to support them in a variety of roles as well. And APIs

34
00:02:26,086 --> 00:02:29,498
for me kind of need a few different aspects to

35
00:02:29,584 --> 00:02:33,374
really make them robust and well, to see a wider level

36
00:02:33,412 --> 00:02:37,054
of adoption because ultimately that's kind of why we build them usually,

37
00:02:37,172 --> 00:02:41,134
particularly with open ecosystems. It always blows my mind.

38
00:02:41,332 --> 00:02:45,090
Run hackathons all over the world for some really big companies

39
00:02:45,240 --> 00:02:49,186
and it always blows my mind just seeing some of the innovation that

40
00:02:49,288 --> 00:02:52,740
innovative things that even the most

41
00:02:53,670 --> 00:02:56,898
sort of regular looking APIs, I'm going to say, you know

42
00:02:56,904 --> 00:03:00,610
what I mean, what people can build out some amazing experiences.

43
00:03:00,690 --> 00:03:03,766
This one time I actually saw someone walk into a hackathon with a brand new

44
00:03:03,788 --> 00:03:07,682
toilet and do some pretty unusually

45
00:03:07,746 --> 00:03:11,340
weird and cool stuff with it. But anyway, that's a talk for another day.

46
00:03:11,710 --> 00:03:15,386
But for my money, a good API really needs to provide a

47
00:03:15,408 --> 00:03:19,818
valid service, because that's really, really important. Like you

48
00:03:19,984 --> 00:03:23,738
expose these endpoints or expose these accesses into your platforms

49
00:03:23,754 --> 00:03:27,166
or service to be able to provide some sort

50
00:03:27,188 --> 00:03:30,782
of value to a developer's application, or even to

51
00:03:30,836 --> 00:03:34,254
help them build out an idea they might have using your

52
00:03:34,292 --> 00:03:37,806
service. And again, sometimes those can be quite mind blowing.

53
00:03:37,918 --> 00:03:41,442
But having it provide not only access to a valid service,

54
00:03:41,496 --> 00:03:45,202
but in a valid way is critically important to building out any

55
00:03:45,256 --> 00:03:48,886
sort of longevity around an API. Of course it

56
00:03:48,908 --> 00:03:51,830
has to be well documented, and we've all been here before.

57
00:03:51,980 --> 00:03:55,426
The documentation doesn't lie just with the written

58
00:03:55,458 --> 00:03:59,322
documentation too. But for my money, it's always also having

59
00:03:59,376 --> 00:04:02,874
some sample code or some video tutorials just

60
00:04:02,912 --> 00:04:06,074
to add to, say, written documentation. Don't get me wrong,

61
00:04:06,112 --> 00:04:09,722
written documentation always critical. But having that video and

62
00:04:09,776 --> 00:04:13,294
also sample app content available is

63
00:04:13,332 --> 00:04:16,590
always great to add extra value to people

64
00:04:16,660 --> 00:04:20,734
trying to build out and use your experience. Of course, integration options,

65
00:04:20,852 --> 00:04:24,894
always critical to making sure you're supporting a number of widely

66
00:04:24,942 --> 00:04:29,006
used platforms or different language types,

67
00:04:29,118 --> 00:04:32,514
making sure that your app has some ready to

68
00:04:32,552 --> 00:04:36,414
use and quick and easy ways to connect into those different platforms.

69
00:04:36,542 --> 00:04:40,166
Always great to survey your user base to see what

70
00:04:40,188 --> 00:04:43,334
they're looking for or even a request form. If a

71
00:04:43,372 --> 00:04:47,174
particular language isn't available, someone can request it and reach out

72
00:04:47,212 --> 00:04:50,746
and tell you what they want to do and how they

73
00:04:50,768 --> 00:04:54,886
want to do it. Always great to get that feedback. And of course sdks,

74
00:04:54,998 --> 00:04:58,762
which is what we hear about today. Now, I've spent many,

75
00:04:58,816 --> 00:05:02,334
many hours, many, many hours building out and

76
00:05:02,372 --> 00:05:05,722
helping support, debug and fixing manually fixing

77
00:05:05,786 --> 00:05:09,102
sdks over the years. And what we're talking about today

78
00:05:09,156 --> 00:05:13,074
was something I worked on a number of years ago for

79
00:05:13,192 --> 00:05:16,962
big telco AAS, working out ways

80
00:05:17,016 --> 00:05:21,010
to automatically generate a lot of sdks very, very quickly

81
00:05:21,160 --> 00:05:24,674
using some API specs. Originally using

82
00:05:24,712 --> 00:05:28,610
Swagger one, but then as the internal system sort of got upgraded,

83
00:05:28,690 --> 00:05:32,520
moving along to Swagger two, and then of course open API spec.

84
00:05:33,050 --> 00:05:36,946
Open app spec. Totally amazing. And if you're using the earlier

85
00:05:36,978 --> 00:05:40,634
versions of Swagger, I highly recommend upgrading because

86
00:05:40,672 --> 00:05:44,394
it plugs into what we're about to talk about today

87
00:05:44,512 --> 00:05:47,626
a little bit better than the swagger two. It actually gives you more options with

88
00:05:47,648 --> 00:05:51,290
the structure of the YAML or the JSON behind

89
00:05:51,440 --> 00:05:55,530
essentially the structure of the design with the API enter

90
00:05:55,600 --> 00:05:59,514
open app generator. I feel like I need like a big grand

91
00:05:59,562 --> 00:06:02,640
entrance. Music we'll add that later.

92
00:06:03,810 --> 00:06:07,170
Open API generator for me is one of the most amazing

93
00:06:07,240 --> 00:06:11,118
open source communities I've ever contributed to or been fortunate

94
00:06:11,214 --> 00:06:14,386
enough to connect with, and they're a great community, but we'll get

95
00:06:14,408 --> 00:06:18,058
into that more in a little bit. In particular, what open app

96
00:06:18,094 --> 00:06:22,166
generator allows you to do, and again, this is an open source community,

97
00:06:22,348 --> 00:06:25,602
is load in an open API spec and be able to generate

98
00:06:25,666 --> 00:06:29,500
sdks in a variety of languages really quickly.

99
00:06:29,870 --> 00:06:33,482
Now, originally you start using this as a local

100
00:06:33,616 --> 00:06:37,526
installable CLI. So you just brew install open app

101
00:06:37,558 --> 00:06:40,662
generator, and then you can basically

102
00:06:40,736 --> 00:06:44,158
generate an SDK from an open API spec,

103
00:06:44,244 --> 00:06:48,126
which is where I started using it initially, essentially taking an

104
00:06:48,148 --> 00:06:52,394
API product spec and then loading it into OpenAPI generator

105
00:06:52,442 --> 00:06:55,714
locally, you're able to generate out an SDK really,

106
00:06:55,752 --> 00:06:58,674
really quickly with documentation too, I might add.

107
00:06:58,872 --> 00:07:02,130
But what's really cool is this then over the years

108
00:07:02,200 --> 00:07:06,018
became a deployable containerized service, which we're going to be looking at today,

109
00:07:06,184 --> 00:07:10,134
so that you could either use it locally or as an

110
00:07:10,172 --> 00:07:13,718
SDK deployed as a service. But we'll get more into that as a

111
00:07:13,724 --> 00:07:17,446
moment. Like I said, it also supports not

112
00:07:17,468 --> 00:07:21,222
only open API specs, but also some of the legacy

113
00:07:21,286 --> 00:07:25,020
Swagger one and Swagger two docs as well.

114
00:07:25,790 --> 00:07:29,498
Bit of an asterisk on that one because it's going to also depend

115
00:07:29,584 --> 00:07:33,146
on the associated language or platform you're looking

116
00:07:33,168 --> 00:07:36,426
to generate out as to how that is then supported.

117
00:07:36,618 --> 00:07:39,166
I could spend a lot of time talking about this, but I'm not going to

118
00:07:39,188 --> 00:07:42,810
today because I'm on the clock

119
00:07:42,970 --> 00:07:46,858
again. Please reach out and would love to connect further to sort

120
00:07:46,884 --> 00:07:49,602
of talk more about that. I'm about to show you what I mean,

121
00:07:49,656 --> 00:07:53,378
because this is one of my favorite parts of this open source project

122
00:07:53,464 --> 00:07:56,280
and aas been running for a number of years now,

123
00:07:56,970 --> 00:08:00,630
but it's like one open source project

124
00:08:00,700 --> 00:08:04,754
that has the core team of organizers who do a fantastic

125
00:08:04,802 --> 00:08:08,634
job and again, couldn't sing them enough praises. Please, if you're looking

126
00:08:08,672 --> 00:08:12,154
to use this or you are using this, please contribute back the way you can.

127
00:08:12,272 --> 00:08:16,342
Because beyond the core team, each one of these language types,

128
00:08:16,406 --> 00:08:20,470
platform SDK generators

129
00:08:20,550 --> 00:08:24,698
essentially has its own subcommunity underneath that. So you have like core organizers,

130
00:08:24,714 --> 00:08:28,734
then you have all these that you can see on screen, which is

131
00:08:28,852 --> 00:08:31,998
phenomenally mind blowing. It is a massive project

132
00:08:32,084 --> 00:08:36,050
of massive undertakings and could spend hours

133
00:08:36,120 --> 00:08:40,210
talking them up, but please contribute back if you can, because they do

134
00:08:40,280 --> 00:08:44,046
fantastic work, particularly supporting all this. Essentially,

135
00:08:44,158 --> 00:08:47,462
inside each different language and platform you have a

136
00:08:47,516 --> 00:08:51,382
template that then ingests the open API spec

137
00:08:51,436 --> 00:08:55,106
or swagger spec you throw in and then generates out a variety

138
00:08:55,138 --> 00:08:58,780
of different sdks automatically, which is super, super cool.

139
00:08:59,710 --> 00:09:03,174
The best part about this is, and while the default

140
00:09:03,222 --> 00:09:07,210
templates may not be a one size that fits all needs,

141
00:09:07,280 --> 00:09:10,746
so to speak, you can customize the templates to

142
00:09:10,848 --> 00:09:14,814
suit whatever your requirements are. And I'm going to name drop a company that

143
00:09:14,852 --> 00:09:18,398
does just that using this. What they have done use this

144
00:09:18,484 --> 00:09:21,902
over the years, which is square was using this at one point,

145
00:09:21,956 --> 00:09:25,822
and they actually published their moustache templates for

146
00:09:25,956 --> 00:09:29,806
their sdks that they're pushing out. So they were open to taking

147
00:09:29,988 --> 00:09:33,394
community contribs back, to being able to keep those

148
00:09:33,432 --> 00:09:36,526
updated and change them as they needed and take those change

149
00:09:36,568 --> 00:09:40,534
requests in, which is amazing. I've already talked about the

150
00:09:40,572 --> 00:09:44,102
open source, huge community side of things, so again,

151
00:09:44,156 --> 00:09:48,186
please contribute back if you can. Going to keep moving the

152
00:09:48,208 --> 00:09:51,626
generator, the CLI local, CLi aas,

153
00:09:51,728 --> 00:09:55,450
a lot of options. Now, some of these will be very specific

154
00:09:55,600 --> 00:09:59,514
to different language types. Potentially it

155
00:09:59,552 --> 00:10:03,070
just varies depending which language you're outputting.

156
00:10:03,650 --> 00:10:07,150
What I initially did sort of

157
00:10:07,300 --> 00:10:10,794
building out my mvp of SDK generations,

158
00:10:10,842 --> 00:10:14,020
if you will. Originally, when I first started using this,

159
00:10:14,630 --> 00:10:18,894
was building out configuration, yaml configuration,

160
00:10:18,942 --> 00:10:23,086
or JSON configurations for each different language type, and then ingesting

161
00:10:23,118 --> 00:10:25,906
that as part of like a bash script, just to push out a whole bunch

162
00:10:25,938 --> 00:10:29,400
of sdks really quickly in the early days.

163
00:10:29,770 --> 00:10:33,542
So essentially I would load in a, have different

164
00:10:33,596 --> 00:10:37,590
language configs sitting inside a folder,

165
00:10:38,250 --> 00:10:42,262
would run a bash script which would check the folder for the different language configuration

166
00:10:42,326 --> 00:10:46,394
types, and then it would output each of those languages using

167
00:10:46,432 --> 00:10:50,106
that consumption, it would output the SDK generation and you would

168
00:10:50,128 --> 00:10:53,760
get something, or essentially something very similar to that.

169
00:10:56,210 --> 00:10:59,534
This is all on my GitHub too, if you want to have a look.

170
00:10:59,652 --> 00:11:03,146
There's actually a better way to be able to set this

171
00:11:03,188 --> 00:11:07,102
up and have it run automatically in a more automated

172
00:11:07,166 --> 00:11:10,820
way, which is what we're here to talk about today.

173
00:11:11,830 --> 00:11:15,842
But also you can do what I like to call a

174
00:11:15,896 --> 00:11:19,686
360 observability approach to this as well. But we're going to

175
00:11:19,708 --> 00:11:23,074
get into that. So essentially as a containerized

176
00:11:23,122 --> 00:11:26,374
service, this is where things get a little bit more interesting, because you can do

177
00:11:26,412 --> 00:11:29,778
a whole bunch of different automations to help speed this up and

178
00:11:29,804 --> 00:11:33,626
make this a lot quicker. Plus add in some observability to be

179
00:11:33,648 --> 00:11:37,498
able to watch variety of different aspects to

180
00:11:37,584 --> 00:11:41,166
the overall flow. Let me show you what I mean. So we start

181
00:11:41,188 --> 00:11:44,746
with an API, building out a basic

182
00:11:44,778 --> 00:11:48,410
API spec and deploying like a very fundamental API,

183
00:11:48,490 --> 00:11:51,610
maybe powered by a lambda

184
00:11:51,690 --> 00:11:55,626
and a bit of a dynamodb in there. There's some really good examples,

185
00:11:55,658 --> 00:11:59,106
actually. The pet store, if you haven't already got an API, if you want to

186
00:11:59,128 --> 00:12:02,526
try this at home and you haven't already got an API, look for the pet

187
00:12:02,558 --> 00:12:05,634
store demo app to be able to deploy

188
00:12:05,682 --> 00:12:08,120
that and use that open API spec.

189
00:12:08,970 --> 00:12:12,470
Once you generate, have that API running and have that spec

190
00:12:12,540 --> 00:12:16,230
available, you can take that SDK straight out

191
00:12:16,300 --> 00:12:20,434
and load against the containerized open app

192
00:12:20,562 --> 00:12:24,110
service. And then like, so there's

193
00:12:24,130 --> 00:12:27,498
animations output an SDK for a different language type,

194
00:12:27,584 --> 00:12:31,094
which you can then use to run inside something like a lambda

195
00:12:31,142 --> 00:12:33,818
to be able to test the different functions in the SDK.

196
00:12:33,994 --> 00:12:38,126
Now testing the sdks, I can't even stress enough

197
00:12:38,308 --> 00:12:42,286
how critical that is. And this was based on experience

198
00:12:42,388 --> 00:12:46,642
from sdks that I've run in the past, where user feedback will be,

199
00:12:46,776 --> 00:12:49,550
we're not using it because it's using too much resource,

200
00:12:49,630 --> 00:12:53,698
or there's this particular library in it. This is where

201
00:12:53,864 --> 00:12:57,314
testing the actual output at SDK will

202
00:12:57,352 --> 00:13:00,578
help you understand how your end users

203
00:13:00,594 --> 00:13:04,120
are going to use it, and then also the performance they're going to get

204
00:13:04,490 --> 00:13:07,866
when they do use it, which is really critical, again, to making sure

205
00:13:07,888 --> 00:13:10,540
you've got that robust API service.

206
00:13:10,990 --> 00:13:14,586
But this is where distributed tracing can

207
00:13:14,608 --> 00:13:18,118
help, because we're actually able to monitor a whole bunch

208
00:13:18,134 --> 00:13:21,690
of different aspects from this entire flow really, really easy

209
00:13:21,760 --> 00:13:25,562
and really, really quickly. And so for those that aren't familiar

210
00:13:25,626 --> 00:13:28,570
with distributed tracing,

211
00:13:28,730 --> 00:13:32,694
is, if you think about just what we were looking at on that previous

212
00:13:32,762 --> 00:13:36,706
screen, cloud native applications are made up from all these different sort

213
00:13:36,728 --> 00:13:40,274
of microservices these days, and quite

214
00:13:40,312 --> 00:13:43,982
often across region, across different region types,

215
00:13:44,046 --> 00:13:47,350
you'll have a multiple of, not only have a multiple of different services,

216
00:13:47,500 --> 00:13:50,866
but have a multiple of different service versions across multiple

217
00:13:50,898 --> 00:13:54,534
different regions. Things can get rather confusing as to

218
00:13:54,572 --> 00:13:58,594
where everything is, where everything's sitting, and in particular if errors

219
00:13:58,642 --> 00:14:02,746
start to occur in that particular platform. So one

220
00:14:02,768 --> 00:14:06,250
of the more common methods to be able to start to map this through is

221
00:14:06,320 --> 00:14:11,578
distributed tracing as part of the Open Telemetry Foundation's

222
00:14:11,674 --> 00:14:15,102
sort of standardized approach to monitoring, observing and

223
00:14:15,156 --> 00:14:19,360
doing distributed tracing. This is very industry standard

224
00:14:19,730 --> 00:14:23,222
method that's currently being adopted industry wide

225
00:14:23,306 --> 00:14:27,230
to monitor and observe different aspects to internal

226
00:14:27,310 --> 00:14:31,374
microservice infrastructure and in particular deployed

227
00:14:31,422 --> 00:14:34,942
application infrastructure so if we take distributed tracing,

228
00:14:35,006 --> 00:14:38,566
for example, how this can help is being able to make sense from

229
00:14:38,668 --> 00:14:42,994
that multitude of microservice deployments

230
00:14:43,122 --> 00:14:46,386
across multiple or all those different regions helps keeps

231
00:14:46,418 --> 00:14:50,006
things all nice and organized for errors.

232
00:14:50,038 --> 00:14:53,274
In particular, being able to make sense of that entire

233
00:14:53,392 --> 00:14:56,666
end to end flow is really handy, in particular for

234
00:14:56,688 --> 00:15:00,674
app, not only for APIs, but also SDK generation

235
00:15:00,742 --> 00:15:04,814
services, for example, and also sdks that

236
00:15:04,852 --> 00:15:08,026
have been generated, just how they work and how they can have flow

237
00:15:08,058 --> 00:15:11,070
on effects with a variety of different system types.

238
00:15:12,290 --> 00:15:16,350
Best part is, and for those that are familiar with apms

239
00:15:16,430 --> 00:15:20,574
and agent based observability apps,

240
00:15:20,622 --> 00:15:24,130
and I've had my fair share of those over the years with, dare I say,

241
00:15:24,200 --> 00:15:28,470
monolith applications, making sure that the observability

242
00:15:29,850 --> 00:15:33,446
services are kept running or kept on infrastructure as

243
00:15:33,468 --> 00:15:37,622
part of your network deployment is

244
00:15:37,756 --> 00:15:41,766
sometimes quite harrowing. Actually all the time quite harrowing. He's pulled

245
00:15:41,798 --> 00:15:46,038
so many hair out, so much hair out over the years. But what agentless observability

246
00:15:46,134 --> 00:15:49,740
does is be able to sort of trace and make sense of

247
00:15:50,350 --> 00:15:54,046
those services as you go through the way. I like

248
00:15:54,068 --> 00:15:57,386
to think of this in particular to SDK

249
00:15:57,578 --> 00:16:01,246
generation or sdks as a service AAS I like

250
00:16:01,268 --> 00:16:04,670
to look at it is full circle observability,

251
00:16:05,030 --> 00:16:09,006
because what we're going to do is for each of those three streams

252
00:16:09,038 --> 00:16:12,846
we saw in that flow, we're going to apply observability methodology

253
00:16:12,958 --> 00:16:17,106
to be able to see first of all how the API is performing,

254
00:16:17,218 --> 00:16:21,234
including right down to individual API traced invocations.

255
00:16:21,362 --> 00:16:25,014
So being able to map each part of

256
00:16:25,212 --> 00:16:28,534
a particular API invocation journey

257
00:16:28,582 --> 00:16:32,694
is invaluable to tracing a lot of errors or even refinements

258
00:16:32,742 --> 00:16:36,262
you want to do with the API's performance.

259
00:16:36,406 --> 00:16:40,086
But you can also trace, monitor and observe the

260
00:16:40,128 --> 00:16:44,122
deployed SDK service inside a container. So in ecs

261
00:16:44,186 --> 00:16:47,802
in this example, or the deploying

262
00:16:47,866 --> 00:16:51,086
outputted SDK inside a lambda, to be

263
00:16:51,108 --> 00:16:54,414
able to see again how the SDK is performing when

264
00:16:54,452 --> 00:16:57,954
it's deployed as part of an application. Now, the way I based to do

265
00:16:57,992 --> 00:17:01,346
that back in the CLI days, or when I would just generate it

266
00:17:01,368 --> 00:17:04,786
locally, would be to actually have a

267
00:17:04,808 --> 00:17:09,794
single page app that would invoke every function as

268
00:17:09,832 --> 00:17:13,094
part of the call and then try and watch to see how much

269
00:17:13,132 --> 00:17:16,534
memory I was using locally to be able to figure out if it was

270
00:17:16,572 --> 00:17:20,378
doing what it should be doing in the best possible way.

271
00:17:20,544 --> 00:17:24,650
Ultimately, the sdks I was generating, I didn't want to use

272
00:17:24,720 --> 00:17:28,406
more resources than I needed to as part of the user's

273
00:17:28,438 --> 00:17:32,460
application or integration, because nobody wants to be that person.

274
00:17:33,310 --> 00:17:36,686
Anyway, like I was saying, you can use observability to be

275
00:17:36,708 --> 00:17:40,478
able to monitor the likes of API gateway or

276
00:17:40,564 --> 00:17:44,222
your deployed APIs to this

277
00:17:44,276 --> 00:17:47,330
is. I even have an API called Devjoke.

278
00:17:48,230 --> 00:17:51,746
I'll drop the endpoints for it and the access to it later.

279
00:17:51,848 --> 00:17:56,130
But being able to monitor each call from the API right through

280
00:17:56,200 --> 00:18:00,386
to using end to end tracing or even distributed tracing,

281
00:18:00,498 --> 00:18:04,226
to be able to see the API call coming in, the lambda

282
00:18:04,258 --> 00:18:07,570
being called, and then the database response,

283
00:18:07,650 --> 00:18:11,146
being able to see the amount of memory being used and the

284
00:18:11,168 --> 00:18:14,854
amount of resources each one costs is invaluable.

285
00:18:14,902 --> 00:18:18,090
To be able to determine how my API is

286
00:18:18,240 --> 00:18:21,830
not only performing, but how I can make it better. So I

287
00:18:21,840 --> 00:18:25,150
can use these metrics to be able to identify ways that

288
00:18:25,300 --> 00:18:28,894
I can make the API faster, I can make the response time better.

289
00:18:29,012 --> 00:18:32,560
Maybe there's data inside the return

290
00:18:33,250 --> 00:18:36,754
call that doesn't need to be there or needs to be in

291
00:18:36,792 --> 00:18:40,834
a different format. This will basically help me understand how

292
00:18:40,872 --> 00:18:44,690
my users are using or wanting to consume the APIs more,

293
00:18:44,760 --> 00:18:48,326
but then also how it's actually performing as a whole as well.

294
00:18:48,428 --> 00:18:52,418
And you can get quite granular down into the different aspects

295
00:18:52,434 --> 00:18:55,794
of the invocation. To be able to see the serverless

296
00:18:55,842 --> 00:18:59,066
invocation, to be able to see exactly what's going on and

297
00:18:59,088 --> 00:19:02,602
including the most dreaded in the serverless world,

298
00:19:02,736 --> 00:19:06,138
cold starts. Like how that's affecting the response time

299
00:19:06,224 --> 00:19:09,962
and performance from the API as well. But it doesn't stop

300
00:19:10,016 --> 00:19:13,214
there because you can also do the same thing for

301
00:19:13,252 --> 00:19:16,350
the service that you use to the containerized service,

302
00:19:16,420 --> 00:19:19,662
to be able to generate the sdks to begin

303
00:19:19,716 --> 00:19:23,262
with, which is always great to be able to see. And obviously

304
00:19:23,316 --> 00:19:26,754
this isn't going to be something you do all the time and can be quite

305
00:19:26,792 --> 00:19:30,450
automated as well, because ultimately this should only be run,

306
00:19:30,520 --> 00:19:34,206
or only run when a new API deployment has occurred,

307
00:19:34,238 --> 00:19:39,026
into production or into your final we

308
00:19:39,048 --> 00:19:42,950
don't test in production in your staging environment. That's what I aas trying to say.

309
00:19:43,100 --> 00:19:46,166
This doesn't run need to run all the time. It only needs to run when

310
00:19:46,188 --> 00:19:49,450
a new version of the API is available or changes have been made.

311
00:19:49,520 --> 00:19:52,454
That means the SDK needs to be regenerated,

312
00:19:52,502 --> 00:19:56,086
generated as well. Always remember to don't

313
00:19:56,118 --> 00:19:59,354
test in production. To don't test in production. Never test

314
00:19:59,392 --> 00:20:02,522
in production. You know what I mean? This is where I would change to my

315
00:20:02,576 --> 00:20:05,806
this is fine scene, but this is not fine because friends don't let

316
00:20:05,828 --> 00:20:08,160
friends do that. Anyway. You know what I mean,

317
00:20:09,410 --> 00:20:12,846
what's cool here is you can see all your tasks running as part

318
00:20:12,868 --> 00:20:16,462
of that container. Not only can you see tasks running as part of that containerized

319
00:20:16,526 --> 00:20:20,414
service, but you can start to get really refined

320
00:20:20,462 --> 00:20:24,226
down into the, refined into the metrics that are

321
00:20:24,248 --> 00:20:27,234
being captured as part of the containerized service.

322
00:20:27,352 --> 00:20:30,614
So you can see how much memory it's using or

323
00:20:30,652 --> 00:20:34,246
how much resources the container is using, but also if

324
00:20:34,268 --> 00:20:37,910
there's any errors occurring with the generation,

325
00:20:39,070 --> 00:20:43,066
it was sometimes something that I would encounter where particular

326
00:20:43,168 --> 00:20:47,430
part of, or a particular language request generation request

327
00:20:47,590 --> 00:20:51,022
would get stuck on a particular part of this

328
00:20:51,076 --> 00:20:55,130
spec. It was generating the sdks

329
00:20:55,210 --> 00:20:58,910
from AAS part of the output. Actually.

330
00:20:58,980 --> 00:21:03,186
Handy tip one of the most handiest things I think I ever learned is

331
00:21:03,288 --> 00:21:07,150
Python was the most sort of strict

332
00:21:07,310 --> 00:21:11,150
languages as far as usability went with the sdks,

333
00:21:11,230 --> 00:21:14,434
I was generating usually, and don't quote me on this

334
00:21:14,472 --> 00:21:17,766
one, usually when I was using this to

335
00:21:17,788 --> 00:21:21,414
generate a lot of sdks at scale like 40, 50 at a time,

336
00:21:21,532 --> 00:21:25,478
40, 50, different ones, different languages, different products at a time.

337
00:21:25,644 --> 00:21:29,714
The Python ones in each product API product category

338
00:21:29,842 --> 00:21:33,466
were the ones that I would get working first, and generally, once they were

339
00:21:33,488 --> 00:21:36,902
happy, most of the other, usually Touchwood,

340
00:21:37,046 --> 00:21:41,226
most of the other languages would then be able to generate out fairly

341
00:21:41,258 --> 00:21:45,470
quickly and easily. But running that SDK test at the

342
00:21:45,540 --> 00:21:49,850
end of the process to understand what the sdks

343
00:21:49,930 --> 00:21:53,570
were doing and to make sure that they were working, was probably

344
00:21:53,640 --> 00:21:57,854
the most critical final step before that final release stage.

345
00:21:57,982 --> 00:22:00,834
Now, this is something I learned the hard way,

346
00:22:00,872 --> 00:22:04,878
because one time, this one time I actually deployed sdks

347
00:22:04,974 --> 00:22:08,730
without testing them fully, which I very quickly learned

348
00:22:08,750 --> 00:22:12,326
you do not do. Mostly because the time

349
00:22:12,348 --> 00:22:16,438
that I did it, I really remember it

350
00:22:16,444 --> 00:22:20,058
was a busy week. It was always a busy week, and I didn't need to

351
00:22:20,064 --> 00:22:23,674
upset all the users. But we were wondering how many people were

352
00:22:23,712 --> 00:22:27,718
actually using the sdks were pushing up to a variety

353
00:22:27,814 --> 00:22:31,578
of different ecosystems, and it turns out a lot of

354
00:22:31,584 --> 00:22:34,954
people, because when I accidentally broke them one time, we got a lot of emails

355
00:22:35,002 --> 00:22:38,922
in to support saying, hey, the SDK is broken.

356
00:22:39,066 --> 00:22:42,522
Anyway, I fixed them very, very quickly, let me tell you.

357
00:22:42,596 --> 00:22:46,354
Anyway, please make sure you test them first. On that

358
00:22:46,392 --> 00:22:50,222
note, that brings us to the SDK testing section,

359
00:22:50,366 --> 00:22:54,146
because you can deploying, also deploy the sdks you

360
00:22:54,168 --> 00:22:57,974
generate out automatically to either a lambda or

361
00:22:58,092 --> 00:23:02,034
containerized environment. So you can use the same monitoring

362
00:23:02,162 --> 00:23:06,710
to be able to test the performance for the app,

363
00:23:07,130 --> 00:23:09,980
the sdks being generated out,

364
00:23:10,510 --> 00:23:14,294
which is critical to be able to determine things like cold starts

365
00:23:14,342 --> 00:23:18,714
or performance issues before they go into real

366
00:23:18,752 --> 00:23:22,474
world production use, always be

367
00:23:22,512 --> 00:23:25,854
thinking of those end users, and in particular not only that,

368
00:23:25,892 --> 00:23:29,646
but how you want to consume them AAS well, and that

369
00:23:29,748 --> 00:23:33,186
you want to know that somebody has done as much

370
00:23:33,208 --> 00:23:36,946
legwork as they can to make sure these sdks run

371
00:23:37,128 --> 00:23:41,326
as well as they can. Super, super critical. And taking steps

372
00:23:41,358 --> 00:23:44,820
like this just helps understand you understand

373
00:23:45,530 --> 00:23:51,174
how they will run and also what

374
00:23:51,212 --> 00:23:55,350
infrastructure they're going to try and run on. Now, usually when I test these,

375
00:23:55,500 --> 00:23:59,402
either in most environments, I'll go for

376
00:23:59,456 --> 00:24:03,340
the default average set up first, and then if there's any particular

377
00:24:04,110 --> 00:24:07,894
clients or people that I know are using a particular platform language,

378
00:24:07,942 --> 00:24:11,386
et cetera, I'll specifically go through just to check those

379
00:24:11,408 --> 00:24:14,862
as well, or put test cases in place so that

380
00:24:14,996 --> 00:24:18,462
I can make sure I can capture as much as I want.

381
00:24:18,596 --> 00:24:22,046
Actually, on that note too, one of the amazing aspects the

382
00:24:22,068 --> 00:24:25,362
community, the open API creating community has

383
00:24:25,416 --> 00:24:28,494
added over the years is automated test cases

384
00:24:28,542 --> 00:24:32,162
as well, which sometimes may not quite be

385
00:24:32,216 --> 00:24:34,980
what the test cases you are looking for,

386
00:24:36,230 --> 00:24:39,510
but they get pretty close as well. So it's quite easy to

387
00:24:39,580 --> 00:24:43,382
either extend the most moustache templates or have a test

388
00:24:43,436 --> 00:24:47,142
suite of scripts available to be able to test

389
00:24:47,196 --> 00:24:49,978
all the functions properly as part of your load test,

390
00:24:50,064 --> 00:24:53,514
your SDK load testing, or as part of your

391
00:24:53,632 --> 00:24:57,354
overall SDK test as well. But again, this is

392
00:24:57,392 --> 00:25:00,606
where distributed tracing can help because it helps bring you

393
00:25:00,628 --> 00:25:03,950
the full picture. So being able to see the full end to end view

394
00:25:04,020 --> 00:25:07,982
of everything that your application or

395
00:25:08,036 --> 00:25:11,760
everything that a demo application would be able to

396
00:25:12,470 --> 00:25:15,954
output or use or consume or generate AAS part

397
00:25:15,992 --> 00:25:18,820
of its runtime anyway,

398
00:25:19,670 --> 00:25:23,538
just some takeaways as we wrap up, because I am where we're running out of

399
00:25:23,544 --> 00:25:27,410
time. But always design APIs for dev consumption

400
00:25:27,490 --> 00:25:31,570
or just ultimately think about that end user.

401
00:25:31,650 --> 00:25:34,834
Be that a developer user, a business user,

402
00:25:34,882 --> 00:25:38,614
or even your end users end users.

403
00:25:38,742 --> 00:25:42,166
Now we're getting better. Remember to rinse,

404
00:25:42,198 --> 00:25:47,034
repeat and refine. Work out what works. Aas, part of your

405
00:25:47,072 --> 00:25:50,742
API SDK generation flows and continually

406
00:25:50,806 --> 00:25:54,780
look at ways to refine the end to end process and

407
00:25:56,050 --> 00:25:59,166
rinse and repeat. And remember to

408
00:25:59,188 --> 00:26:03,378
monitor and trace everything you possibly can, if only

409
00:26:03,464 --> 00:26:06,770
for the aforementioned points where you're building

410
00:26:06,840 --> 00:26:10,258
out these consumables for

411
00:26:10,344 --> 00:26:13,310
people to be able to build out some really cool experiences.

412
00:26:13,390 --> 00:26:16,738
Always remember to keep your end users in mind as much aas you can,

413
00:26:16,824 --> 00:26:20,598
and also where you possible be the end user and understand

414
00:26:20,684 --> 00:26:24,070
the experience from their point of view, particularly when it comes to API design

415
00:26:24,140 --> 00:26:28,030
because it just enables that way more streamlined

416
00:26:28,130 --> 00:26:31,894
sort of experience when it comes to building out amazing experiences

417
00:26:31,942 --> 00:26:35,302
with your platform. Just lastly,

418
00:26:35,366 --> 00:26:38,986
if you're looking to sort of get more

419
00:26:39,008 --> 00:26:43,318
hands on with distributed tracing, observability, or open telemetry,

420
00:26:43,414 --> 00:26:47,678
check out our blog on Lumigo IO blog and have

421
00:26:47,684 --> 00:26:50,606
a look at some of the articles on there. One of the ones. I mean,

422
00:26:50,628 --> 00:26:54,206
there's so many favorites that my name might appear on there a couple of times,

423
00:26:54,308 --> 00:26:57,930
but I've got a whole series

424
00:26:58,010 --> 00:27:01,598
on app and SDK design coming out soon,

425
00:27:01,684 --> 00:27:05,414
so keep an eye out for that one. Plus, there's some Iot ones on there

426
00:27:05,452 --> 00:27:09,254
as well, which I wrote towards the end of last year that are

427
00:27:09,292 --> 00:27:12,306
kind of fun. Did a whole bunch of 3d printing.

428
00:27:12,338 --> 00:27:15,574
Anyway, that's a talk for another day. And finally,

429
00:27:15,692 --> 00:27:18,934
just remember to always please use your tech superpowers for

430
00:27:18,972 --> 00:27:21,654
good. And remember to be excellent to each other.

