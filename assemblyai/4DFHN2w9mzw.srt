1
00:00:20,170 --> 00:00:23,934
Hello everyone. My name is Vipin Jain and I am

2
00:00:23,972 --> 00:00:28,178
speaking from a beautiful city of India called as Jaipur.

3
00:00:28,354 --> 00:00:30,950
It is also called as the pink city of India.

4
00:00:32,490 --> 00:00:36,374
As already told in my introduction, I work

5
00:00:36,412 --> 00:00:40,054
for a company called as Metacube Software. As a senior

6
00:00:40,102 --> 00:00:42,570
delivery manager and head of the QA department.

7
00:00:42,910 --> 00:00:47,386
IoT is my second love after my job

8
00:00:47,488 --> 00:00:51,306
as a delivery manager. And this has been always a

9
00:00:51,328 --> 00:00:55,098
challenge in front of me. How to develop a strategy

10
00:00:55,194 --> 00:00:59,006
to test IoT end to end. Now, end to

11
00:00:59,028 --> 00:01:03,106
end testing, we all know where we do the system testing, the integration and

12
00:01:03,128 --> 00:01:06,498
unit testing. But since IoT is not just a

13
00:01:06,504 --> 00:01:10,446
single software or a single hardware, it is a mesh of hardware,

14
00:01:10,558 --> 00:01:13,842
software, lots of protocols, there are

15
00:01:13,896 --> 00:01:17,734
APIs, there is a

16
00:01:17,772 --> 00:01:21,558
huge bandwidth connection between them. So I always

17
00:01:21,644 --> 00:01:25,046
ponder about how to test or how to develop a

18
00:01:25,068 --> 00:01:28,806
strategy for embedded systems, particularly Iot.

19
00:01:28,998 --> 00:01:32,186
About end to end testing. So in my talk

20
00:01:32,288 --> 00:01:36,218
end to end testing strategy for embedded systems, I will

21
00:01:36,304 --> 00:01:40,118
give you certain suggestions from my experiences.

22
00:01:40,294 --> 00:01:44,014
So let's move forward now. First and

23
00:01:44,052 --> 00:01:47,310
foremost question that comes to our mind is why do we even

24
00:01:47,380 --> 00:01:50,686
need to end to end test IoT setups when

25
00:01:50,708 --> 00:01:53,906
we can test each aspect of the application? So we

26
00:01:53,928 --> 00:01:56,718
can test software separately, we can test hardware,

27
00:01:56,814 --> 00:02:00,194
protocols, firmware, everything can be tested in a

28
00:02:00,232 --> 00:02:03,570
separate way. So why we need to

29
00:02:03,720 --> 00:02:07,160
perform or develop a strategy to

30
00:02:07,530 --> 00:02:10,200
test the IoT application end to end?

31
00:02:10,730 --> 00:02:14,280
Because we do not want to be in such a situation.

32
00:02:14,890 --> 00:02:18,074
This is a brilliant example of evolving an

33
00:02:18,112 --> 00:02:21,366
end to end solutions without developing

34
00:02:21,398 --> 00:02:24,826
a strategy. And you can end up in such a

35
00:02:24,848 --> 00:02:28,794
situation. So let's begin by a

36
00:02:28,832 --> 00:02:32,814
very brief history. So in the very early phase, IoT was

37
00:02:32,852 --> 00:02:36,414
developed as a two layer architecture where you

38
00:02:36,452 --> 00:02:40,394
have lots of devices and then you have lots of sensors

39
00:02:40,442 --> 00:02:43,554
or the things. IoT is Internet of things,

40
00:02:43,672 --> 00:02:46,900
so lot of things which produced data,

41
00:02:47,270 --> 00:02:50,610
and there is a two way combination between them

42
00:02:50,680 --> 00:02:54,354
and the cloud and the devices. As the application

43
00:02:54,472 --> 00:02:58,454
started getting complex, the IoT infrastructure or

44
00:02:58,492 --> 00:03:01,622
the architecture also started becoming complex. And then

45
00:03:01,676 --> 00:03:05,602
we introduced the third layer. And hence IoT

46
00:03:05,666 --> 00:03:09,574
became a three layer architecture. Where there is an application layer,

47
00:03:09,622 --> 00:03:12,970
a transportation layer and an interception layer,

48
00:03:13,470 --> 00:03:16,954
the things become more complex, the infrastructure becomes more

49
00:03:16,992 --> 00:03:19,986
complex, and similarly the software has become more complex.

50
00:03:20,118 --> 00:03:22,480
And ultimately, after lots of,

51
00:03:25,170 --> 00:03:27,920
I would say development and lots of thinking,

52
00:03:28,530 --> 00:03:32,202
a new seven layered architecture was introduced.

53
00:03:32,266 --> 00:03:35,298
And this is the one which is currently being used.

54
00:03:35,464 --> 00:03:39,314
If I quickly take you to what this seven layers architecture means,

55
00:03:39,512 --> 00:03:42,802
these are the seven layers where the lowest level

56
00:03:42,856 --> 00:03:46,198
or the things which produce the data, they are

57
00:03:46,204 --> 00:03:50,466
the physical device layers. Then there is a connectivity layers, edge computing

58
00:03:50,498 --> 00:03:53,538
layer, data accumulation, data abstraction,

59
00:03:53,634 --> 00:03:57,158
application layer and finally the collaboration and process

60
00:03:57,244 --> 00:04:01,114
layer. Now all these layers were introduced because the modern day

61
00:04:01,152 --> 00:04:04,710
applications are very complex and lot of communication

62
00:04:04,790 --> 00:04:08,602
happened between layers. So then in order

63
00:04:08,656 --> 00:04:12,574
to develop it or in order to test it, we need to apply our

64
00:04:12,612 --> 00:04:16,062
logics at every layer. And this is the base

65
00:04:16,116 --> 00:04:19,786
of my strategy. Now, what are the challenges

66
00:04:19,898 --> 00:04:23,294
in IoT testing? As I've just explained,

67
00:04:23,342 --> 00:04:26,914
IoT is a multilayered system. Then there are

68
00:04:26,952 --> 00:04:30,434
lots of dissimilar technologies being

69
00:04:30,472 --> 00:04:34,130
used in developing these systems, changing from very low level

70
00:04:34,200 --> 00:04:37,990
microcontrollers and very high level server programming.

71
00:04:38,330 --> 00:04:41,202
The functionalities span across multiple layers.

72
00:04:41,266 --> 00:04:44,520
Hence the communication between two layers become very important.

73
00:04:45,290 --> 00:04:49,802
Then the devices follow protocols, but then different

74
00:04:49,856 --> 00:04:53,606
protocols can be applicable to different devices,

75
00:04:53,718 --> 00:04:56,890
which means the protocols can become incompatible.

76
00:04:57,470 --> 00:05:00,986
The functionalities were developed by different teams or the teams

77
00:05:01,018 --> 00:05:04,830
which are sitting geographically very apart. So hence,

78
00:05:07,730 --> 00:05:11,598
because those teams are not working together, sitting together,

79
00:05:11,764 --> 00:05:15,506
there are scenarios where the use cases, they do

80
00:05:15,528 --> 00:05:19,262
not match with each other. The solution looks simpler

81
00:05:19,326 --> 00:05:23,230
because there is a very limited UI, but below that interface

82
00:05:23,310 --> 00:05:26,642
there is a very, very complex architecture and code

83
00:05:26,696 --> 00:05:29,974
is very less to justify your testing because I can

84
00:05:30,012 --> 00:05:33,750
write 100 test cases and can say that look, everything is working

85
00:05:33,820 --> 00:05:37,350
fine, but those 100 test cases are actually just

86
00:05:37,420 --> 00:05:40,634
testing the code which is written, which can be only

87
00:05:40,672 --> 00:05:44,406
10% of the entire architecture and not enough test cases

88
00:05:44,438 --> 00:05:47,830
are written to test that architecture.

89
00:05:47,990 --> 00:05:51,566
So these are some challenges which are different from the

90
00:05:51,588 --> 00:05:55,710
challenges we have faced in testing noniot applications.

91
00:05:56,210 --> 00:05:59,806
So what is the general practice when we start talking about e

92
00:05:59,828 --> 00:06:03,422
two e testing? Organizations use e two e testing

93
00:06:03,486 --> 00:06:07,570
at system level. They follow the most logical option available,

94
00:06:07,720 --> 00:06:10,786
like assemble the system fully and then test it,

95
00:06:10,888 --> 00:06:13,966
which gives a realistic simulation of the end user

96
00:06:13,998 --> 00:06:17,574
experience. But the issues that they face, as I

97
00:06:17,612 --> 00:06:21,122
explained earlier, also systems cannot simulate

98
00:06:21,186 --> 00:06:25,314
all the situations. Building such a system is very time consuming

99
00:06:25,362 --> 00:06:28,746
and costly. You need to gather every component, make sure all

100
00:06:28,768 --> 00:06:32,346
the components are connected with each other, the protocols are

101
00:06:32,368 --> 00:06:35,782
compatible and so on. Testing become very changing

102
00:06:35,846 --> 00:06:38,694
as it involves many applications working in tandem.

103
00:06:38,742 --> 00:06:41,180
APIs become very, very important here.

104
00:06:41,730 --> 00:06:45,342
The error detection happens in late cycle because everything is

105
00:06:45,396 --> 00:06:49,006
made, then it has been simulated and now if

106
00:06:49,028 --> 00:06:53,066
you can find an error then the entire setup or entire development

107
00:06:53,098 --> 00:06:56,782
process Iot needs to be reworked upon. This ultimately

108
00:06:56,846 --> 00:07:00,914
results in a lot of delay in the time to market and

109
00:07:01,032 --> 00:07:05,134
the responses to that application are very verified and they become

110
00:07:05,272 --> 00:07:09,238
very difficult to handle. I take a very simple example

111
00:07:09,324 --> 00:07:13,414
which is called as a blood glucose tracking system. Now what

112
00:07:13,452 --> 00:07:15,000
happens here is,

113
00:07:16,570 --> 00:07:20,042
as you can see in this diagram, there are

114
00:07:20,176 --> 00:07:23,786
two variables. One is the glucose sensor and the other is

115
00:07:23,808 --> 00:07:27,142
the insulin injector. And then there is a smartphone

116
00:07:27,206 --> 00:07:31,194
which acts as the middleware. So very

117
00:07:31,232 --> 00:07:34,310
simply put, there is a glucose sensor,

118
00:07:34,390 --> 00:07:38,170
like a small, I would say a patch which has a chip

119
00:07:38,250 --> 00:07:42,506
and that is inserted on. There's a small pin inserted

120
00:07:42,538 --> 00:07:45,794
inside your stomach and the patch is stuck on your

121
00:07:45,912 --> 00:07:49,780
stomach. And then it is constantly checking the blood sugar level.

122
00:07:50,150 --> 00:07:53,522
If the sugar level goes above or below a certain

123
00:07:53,576 --> 00:07:57,778
threshold value, it sends a message to the mobile.

124
00:07:57,954 --> 00:08:02,086
And from the mobile which acts as a middleware, it goes to cloud

125
00:08:02,188 --> 00:08:05,766
where lot of healthcare management system takes place. And as a

126
00:08:05,788 --> 00:08:09,530
result it sends an instruction back to the insulin pump

127
00:08:09,950 --> 00:08:13,434
if required, so that the pump gets activated and

128
00:08:13,472 --> 00:08:17,130
some insulin is secreted inside the body of the patient.

129
00:08:17,710 --> 00:08:21,534
So he gets immediate attention despite of where

130
00:08:21,572 --> 00:08:24,638
he is standing or sitting in

131
00:08:24,644 --> 00:08:28,026
the world. So this is the blood dugout tracking

132
00:08:28,058 --> 00:08:32,254
system that I want to explain. So this sensor monitor the

133
00:08:32,292 --> 00:08:36,654
blood for certain parameter, and the insulin injector follows a programmed

134
00:08:36,702 --> 00:08:40,146
schedule. But the problem is, if it is disconnected from

135
00:08:40,168 --> 00:08:44,020
the other components of the system, then there can be

136
00:08:44,390 --> 00:08:47,910
issues, right? And we'll see each issue one by one.

137
00:08:47,980 --> 00:08:51,494
Let's see this diagram in detail. So now you can

138
00:08:51,532 --> 00:08:55,202
see all the movements of the data and the instructions

139
00:08:55,266 --> 00:08:58,554
between various places. And let me explain each one of them.

140
00:08:58,672 --> 00:09:02,502
So, as I mentioned, the smartphone app serves as a middleware.

141
00:09:02,646 --> 00:09:06,730
And in addition to providing simple analysis to the user,

142
00:09:07,310 --> 00:09:11,274
the app forwards glucose level information to cloudbased

143
00:09:11,322 --> 00:09:13,870
healthcare system for additional processing.

144
00:09:14,370 --> 00:09:18,442
This cloud application compares the current measurement to the historical

145
00:09:18,506 --> 00:09:21,802
data of the patient and perform advanced analysis.

146
00:09:21,946 --> 00:09:26,350
And IoT constantly keeps looking for some unwanted patterns.

147
00:09:26,510 --> 00:09:29,826
If any unwanted pattern is found and IoT can

148
00:09:29,848 --> 00:09:33,806
lead to a potential danger, the system sends a warning directly

149
00:09:33,838 --> 00:09:37,030
to the user or reports to a human medical staff.

150
00:09:37,450 --> 00:09:41,174
Specialized medical consultant can immediately analyze the data and

151
00:09:41,212 --> 00:09:45,206
decides whether or not a special alert needs to be generated for the

152
00:09:45,228 --> 00:09:48,594
patient. The patient receives an alarm and guidance

153
00:09:48,642 --> 00:09:52,650
for the next steps, which can include change in the medication dosing.

154
00:09:53,150 --> 00:09:56,266
After the patient's approval, the change are delivered to

155
00:09:56,288 --> 00:09:59,354
the injector. But there can be a scenario where

156
00:09:59,392 --> 00:10:03,322
the patient is IoT able to respond. In that case, the medical consultants

157
00:10:03,386 --> 00:10:06,766
can send the GPS information packaged with

158
00:10:06,788 --> 00:10:11,530
the smartphone data to send an ambulance. Your mobile's automation

159
00:10:11,690 --> 00:10:14,994
can be tracked and immediate medical help can

160
00:10:15,032 --> 00:10:17,540
be sent. Right?

161
00:10:17,910 --> 00:10:21,442
So this is the entire blood tracking system

162
00:10:21,496 --> 00:10:25,150
diagram which I just explained. So this healthcare system covers everything

163
00:10:25,240 --> 00:10:28,920
here the phone acts as the middleware and

164
00:10:29,530 --> 00:10:33,142
immediate helps from the doctor to the patient. Can happen

165
00:10:33,276 --> 00:10:36,886
if the healthcare system alerts this and all this

166
00:10:36,908 --> 00:10:41,050
data gets recorded in the cloud, so that the next time something happens,

167
00:10:41,200 --> 00:10:44,970
it is again matched to the historical data which is already

168
00:10:45,040 --> 00:10:48,666
present. Let's see some wider scenarios. So what

169
00:10:48,688 --> 00:10:52,586
is the basic use case here? The blood sensor is simulated,

170
00:10:52,778 --> 00:10:56,346
the data package is selected, the data moves

171
00:10:56,378 --> 00:11:00,142
to the cloud, the cloud generate alerts. After comparing the current

172
00:11:00,196 --> 00:11:03,886
data with the existing data, the medical staff responds

173
00:11:03,918 --> 00:11:07,570
to the alert either by injecting the insulin or by

174
00:11:07,640 --> 00:11:11,678
changing the dose of the insulin, or by alerting some medical staff

175
00:11:11,774 --> 00:11:15,494
and ambulance nearby. The patient also receives those

176
00:11:15,532 --> 00:11:19,282
alert and notifications and ultimately the injection schedule

177
00:11:19,346 --> 00:11:22,600
and the injecting of insulin is completely

178
00:11:23,210 --> 00:11:27,346
automated. And all of these things still have to

179
00:11:27,468 --> 00:11:31,926
follow, still have to cater to these market requirements.

180
00:11:32,118 --> 00:11:35,754
Test early and test often speed versus quality time to

181
00:11:35,792 --> 00:11:39,306
market automation. We need to still perform all

182
00:11:39,328 --> 00:11:43,120
of these. But this is a typical IoT application.

183
00:11:43,890 --> 00:11:47,406
And if you see there is a cloud storage, there are

184
00:11:47,428 --> 00:11:50,590
data moving, there are bandwidth involved, there are

185
00:11:50,740 --> 00:11:54,814
devices, there is mobile, there is Internet speeds,

186
00:11:54,942 --> 00:11:58,594
all of these need to be tested. And then

187
00:11:58,632 --> 00:12:02,354
only we can say that I have what is called

188
00:12:02,392 --> 00:12:05,970
as an end to end testing strategy for

189
00:12:06,040 --> 00:12:09,830
testing blood glucose patient monitoring systems.

190
00:12:10,250 --> 00:12:13,494
So what is the solution, how to perform these kind

191
00:12:13,532 --> 00:12:17,422
of testing? Deconstruct the system into layers

192
00:12:17,506 --> 00:12:21,546
for more effective testing. So rather than taking the entire application

193
00:12:21,648 --> 00:12:25,654
as a whole, break it down into perception layer, network layer,

194
00:12:25,702 --> 00:12:29,142
middlewares, business layer and application layer.

195
00:12:29,286 --> 00:12:32,634
Your perception layer consists of the physical objects,

196
00:12:32,762 --> 00:12:36,426
sensors. The network layer consists of the transmissions,

197
00:12:36,538 --> 00:12:40,574
three g, four g. The middleware layers consist of information,

198
00:12:40,692 --> 00:12:43,238
process, action, the storage,

199
00:12:43,434 --> 00:12:47,950
whereas the business layer, it takes a look at the analytics and flowcharts

200
00:12:48,030 --> 00:12:51,714
to see the data. And finally, the application layer where

201
00:12:51,752 --> 00:12:55,410
the smart applications and their management resides.

202
00:12:56,090 --> 00:12:59,522
And then in each layer, isolate the components

203
00:12:59,586 --> 00:13:04,054
and test early. So if every layer just

204
00:13:04,092 --> 00:13:07,246
separate out the components. So your wireless, IoT devices,

205
00:13:07,378 --> 00:13:10,838
IoT smartphone, laptops, security gateways,

206
00:13:10,934 --> 00:13:14,474
security devices, just separate them and

207
00:13:14,512 --> 00:13:17,722
then test each one of them. Few are already

208
00:13:17,776 --> 00:13:21,454
required as tested by their vendors and few we have to test as

209
00:13:21,572 --> 00:13:23,998
testers. Right?

210
00:13:24,164 --> 00:13:27,454
So this is the two things that I want to

211
00:13:27,492 --> 00:13:30,666
explain. And now let's

212
00:13:30,698 --> 00:13:34,382
move forward. Deconstruct the system into layers,

213
00:13:34,446 --> 00:13:38,110
which is the first one. What are the primary challenges?

214
00:13:38,270 --> 00:13:41,794
Designing the system in such a way that it can be

215
00:13:41,832 --> 00:13:46,310
conducive to deconstruct in smaller blocks with well defined interfaces.

216
00:13:46,970 --> 00:13:50,802
Just like we say that in manual and automation testing automation

217
00:13:50,866 --> 00:13:55,190
needs to be built into the code so that when we automation

218
00:13:55,770 --> 00:13:59,258
engineers want to perform it, then they can do it.

219
00:13:59,424 --> 00:14:03,194
Similarly, the system should be designed here in

220
00:14:03,232 --> 00:14:07,366
such a way that it can be broken down or deconstructed

221
00:14:07,478 --> 00:14:10,906
into smaller blocks, and each block should have a well defined

222
00:14:10,938 --> 00:14:14,798
interface. And then you have to build automation around

223
00:14:14,884 --> 00:14:18,622
these blocks. And there is always a discussion that

224
00:14:18,676 --> 00:14:21,786
goes on between unit testing versus functional

225
00:14:21,818 --> 00:14:25,326
testing. So in general, a test plan should include

226
00:14:25,358 --> 00:14:28,558
a combination of unit testing, integration testing,

227
00:14:28,654 --> 00:14:32,178
and endtoend testing. The proportion of unit test

228
00:14:32,264 --> 00:14:35,714
to integration test may vary depending on the complexity

229
00:14:35,762 --> 00:14:39,110
of the solution. The more complex the solutions is,

230
00:14:39,180 --> 00:14:42,822
the more important unit tests become, because as

231
00:14:42,876 --> 00:14:46,694
the complexity grows, it become more and more difficult to

232
00:14:46,732 --> 00:14:50,762
simulate high level interfaces that ensure that various paths are

233
00:14:50,816 --> 00:14:54,262
executed. Unit testing, though, is expensive.

234
00:14:54,326 --> 00:14:58,390
We all know that, and it is expensive in terms of time and resources.

235
00:14:58,550 --> 00:15:02,038
Therefore, someone with a programmatic experience,

236
00:15:02,224 --> 00:15:04,958
for example, an engineer, must write the test,

237
00:15:05,124 --> 00:15:08,766
and because they are closely tied to the code, unit tests are

238
00:15:08,788 --> 00:15:12,334
also brittle, which means changing in a code could

239
00:15:12,372 --> 00:15:16,510
easily impact them. So an engineer is required consistently

240
00:15:16,590 --> 00:15:19,906
to maintain the tests as you move further up

241
00:15:19,928 --> 00:15:23,374
the stack. Function level tests are less prone to breakage,

242
00:15:23,502 --> 00:15:28,046
but it becomes hard to identify systematic issues when

243
00:15:28,088 --> 00:15:31,606
a unit test fails. On the other hand, identifying the root cause is

244
00:15:31,628 --> 00:15:35,654
very simpler, so you have to actually do a trade off to

245
00:15:35,692 --> 00:15:38,874
find a balance or create a blended approach to

246
00:15:38,912 --> 00:15:42,246
see a balance between unit test and functional

247
00:15:42,278 --> 00:15:46,330
testing. So use a blended approach for testing IoT,

248
00:15:46,830 --> 00:15:50,654
deconstruct the system into layers, right. So what

249
00:15:50,692 --> 00:15:53,802
we want to discuss here. So for IoT

250
00:15:53,866 --> 00:15:57,482
solutions, the first natural layer contains

251
00:15:57,546 --> 00:16:00,974
the wireless communication components. This is where

252
00:16:01,012 --> 00:16:04,274
the subsystem interacts with the APIs. Now,

253
00:16:04,312 --> 00:16:07,682
underneath the APIs are messaging protocols such as

254
00:16:07,736 --> 00:16:11,262
MQTT or HTTP, which send payloads

255
00:16:11,406 --> 00:16:14,954
like JSON and Rest, as well as the proprietary protocol

256
00:16:15,022 --> 00:16:18,038
and binary payloads. In the IoT world,

257
00:16:18,124 --> 00:16:22,258
the communication usually follows a publish

258
00:16:22,354 --> 00:16:25,640
subscribe model or a request response model.

259
00:16:26,010 --> 00:16:29,242
This model involves broadcasting data while other

260
00:16:29,296 --> 00:16:32,810
components listen for and then consume the published data

261
00:16:32,880 --> 00:16:36,634
and perform an action in request response model. We just

262
00:16:36,672 --> 00:16:40,338
send a message to the server directly and asynchronously

263
00:16:40,374 --> 00:16:44,480
waiting for a response. Automation is the key.

264
00:16:45,010 --> 00:16:48,078
What does that mean? To do this,

265
00:16:48,164 --> 00:16:51,882
you have to have a framework for simulating the sut

266
00:16:51,946 --> 00:16:55,198
system under test and verify its response,

267
00:16:55,294 --> 00:16:58,302
as shown here. For simple scenarios,

268
00:16:58,366 --> 00:17:02,046
Python or simpler steps can serve as service testing

269
00:17:02,078 --> 00:17:05,650
solutions. There are a number of stepping utilities

270
00:17:05,730 --> 00:17:09,750
that easily allow you to send payloads for testing purposes,

271
00:17:10,250 --> 00:17:13,606
but this tactic doesn't scale as the number

272
00:17:13,628 --> 00:17:16,920
of test scenarios grows from few hundred to few thousand,

273
00:17:17,390 --> 00:17:20,970
adding and changing the scripts become difficult and inefficient.

274
00:17:21,310 --> 00:17:25,274
So implementing more complex parameters is very difficult to

275
00:17:25,312 --> 00:17:28,774
do. With simple scripting tools.

276
00:17:28,902 --> 00:17:32,670
For smaller small sized things, it becomes very useful.

277
00:17:33,170 --> 00:17:35,950
You also can automate the server components.

278
00:17:36,450 --> 00:17:39,934
For example, you see this cloud healthcare system.

279
00:17:40,132 --> 00:17:44,034
There is this API layer. The message or the payload is sent

280
00:17:44,072 --> 00:17:48,226
to the services. The response comes back

281
00:17:48,408 --> 00:17:52,306
and then from the cloud two messages can go, one to

282
00:17:52,328 --> 00:17:55,874
the medical point location system and other to the medical

283
00:17:55,922 --> 00:17:59,526
staff consultation center. So this is a

284
00:17:59,548 --> 00:18:03,202
back end, right? The database contains all the historical

285
00:18:03,266 --> 00:18:07,218
data. The process is similar to testing the sensor.

286
00:18:07,394 --> 00:18:11,146
Simulate the system by sending a simulated package of data from

287
00:18:11,168 --> 00:18:15,162
the patient. Now the blood scan report, which comes back

288
00:18:15,216 --> 00:18:18,586
if it has some deviation, which means a warning needs to

289
00:18:18,608 --> 00:18:21,754
be produced. High priority warning involves

290
00:18:21,802 --> 00:18:25,614
human medical staff, low consultation. The warning message is

291
00:18:25,652 --> 00:18:29,514
sent back to the patient may contain information about the nearest

292
00:18:29,562 --> 00:18:32,990
hospital, urgent care or other medical facility.

293
00:18:33,430 --> 00:18:37,022
The testing framework will execute a number of test cases

294
00:18:37,166 --> 00:18:40,578
containing different values for different patients and expect

295
00:18:40,664 --> 00:18:44,530
specific warnings to be generated in the response.

296
00:18:45,110 --> 00:18:48,040
We can isolate the components and stress early,

297
00:18:48,650 --> 00:18:52,166
so let's also use a case here. Scan blood to

298
00:18:52,188 --> 00:18:56,386
determine glucose level we could potentially place the sensor

299
00:18:56,418 --> 00:19:00,406
probe in a liquid with a known level of glucose and other parameters corresponding

300
00:19:00,438 --> 00:19:03,990
to real blood, but this approach is neither practical

301
00:19:04,070 --> 00:19:07,274
nor it is scalable. A better approach would

302
00:19:07,312 --> 00:19:11,446
be to intercept the function call that reads from the probe

303
00:19:11,558 --> 00:19:15,354
and redirect it to the testware stub or mock for generating

304
00:19:15,402 --> 00:19:18,874
and simulating a response. It will eliminate

305
00:19:18,922 --> 00:19:22,126
the probe itself from the testing process while enabling the

306
00:19:22,148 --> 00:19:25,746
opportunity to perform automated testing of all the

307
00:19:25,768 --> 00:19:28,866
other parts of the system. A mock of the

308
00:19:28,888 --> 00:19:32,820
interaction needs to be installed to emulate a hardware function call.

309
00:19:33,350 --> 00:19:37,062
The stuff should be able to respond with reasonable values during the test

310
00:19:37,116 --> 00:19:40,822
process, using hard coded values or reading test data

311
00:19:40,876 --> 00:19:44,694
from an external data source. You also have

312
00:19:44,732 --> 00:19:48,022
to isolate the server side components, which again looks

313
00:19:48,076 --> 00:19:51,180
like the client side components, but there is some difference.

314
00:19:51,710 --> 00:19:55,814
For simple test cases, you can use a stuff that contains a node JS

315
00:19:55,862 --> 00:19:59,878
script to produce the standard responses. But for

316
00:19:59,984 --> 00:20:03,662
more advanced scenarios, a service virtualization tool

317
00:20:03,716 --> 00:20:07,246
can allow you to define a response depending on

318
00:20:07,268 --> 00:20:10,718
the input pattern. You can also use service

319
00:20:10,804 --> 00:20:14,338
virtualization to record actual traffic and replay it

320
00:20:14,344 --> 00:20:17,380
to simulate the real operations of a connected system.

321
00:20:17,750 --> 00:20:20,962
In some cases, you may want to switch even between

322
00:20:21,016 --> 00:20:24,818
a real system or a virtual asset. So a

323
00:20:24,824 --> 00:20:28,482
group of medical experts here are connected to this prioritized queue

324
00:20:28,546 --> 00:20:32,226
for consultation requests. The first person that becomes

325
00:20:32,258 --> 00:20:35,762
available, processes the next highest priority

326
00:20:35,826 --> 00:20:38,694
request to enable the automated testing,

327
00:20:38,742 --> 00:20:42,582
we need to replace this part of the system with a virtual

328
00:20:42,646 --> 00:20:47,094
equivalent. So this is how we can separate

329
00:20:47,222 --> 00:20:50,746
the components and then test them separately, whether they

330
00:20:50,768 --> 00:20:54,014
are the server side components or whether they are the

331
00:20:54,052 --> 00:20:58,206
client side components. So you have to remember a few things.

332
00:20:58,388 --> 00:21:01,806
IoT systems require thinking about the software quality

333
00:21:01,908 --> 00:21:05,182
in a larger scope. IoT solutions,

334
00:21:05,246 --> 00:21:08,110
such as our medical device examples,

335
00:21:08,270 --> 00:21:12,482
they are different from the normal systems because an

336
00:21:12,536 --> 00:21:16,230
individual feature may span multiple layers of the solution.

337
00:21:16,570 --> 00:21:20,200
Which means if we start testing these individual

338
00:21:21,290 --> 00:21:24,982
functionality, you actually have to traverse between

339
00:21:25,036 --> 00:21:29,782
various layers. That means the communication

340
00:21:29,846 --> 00:21:32,620
between any two layers becomes very important.

341
00:21:32,990 --> 00:21:36,406
The response request models or the published consume models

342
00:21:36,438 --> 00:21:39,674
are again very important because data gets published from

343
00:21:39,712 --> 00:21:43,386
one layer, may get consumed at some other layer.

344
00:21:43,578 --> 00:21:46,686
Similarly, the response sent or the request sent from

345
00:21:46,708 --> 00:21:50,138
one layer may receive a response from another layer.

346
00:21:50,314 --> 00:21:53,646
So at every layer we need to ensure that we should be

347
00:21:53,668 --> 00:21:56,900
able to send data or we should be able to receive data.

348
00:21:57,350 --> 00:22:00,526
Then delivering a high quality system, it requires testing

349
00:22:00,558 --> 00:22:04,114
capabilities at every layer. But the problem here is

350
00:22:04,152 --> 00:22:07,794
the low level layer has a lot of c

351
00:22:07,832 --> 00:22:11,954
code, the API testing layers, and then there is a backend

352
00:22:12,002 --> 00:22:15,318
part which is the very hard to access layer. So you have to

353
00:22:15,324 --> 00:22:17,640
develop strategy to cover all of these.

354
00:22:18,250 --> 00:22:22,026
You also have to consider a lot of cost which is associated with

355
00:22:22,048 --> 00:22:25,530
the system, because the reason is quite simple,

356
00:22:25,680 --> 00:22:29,526
a design failure that can outweigh the cost of deploying

357
00:22:29,558 --> 00:22:33,360
or testing solution. If you encounter such,

358
00:22:34,050 --> 00:22:37,166
ensure that you have a

359
00:22:37,188 --> 00:22:40,622
testing solution which enables you to isolate the test

360
00:22:40,676 --> 00:22:44,850
components or the API testing or the backend testing.

361
00:22:45,190 --> 00:22:48,594
So with this I come to the end of this

362
00:22:48,632 --> 00:22:52,546
talk. I hope you got some valuable information out

363
00:22:52,568 --> 00:22:56,326
of it. IoT testing is challenging, but it

364
00:22:56,348 --> 00:22:59,746
is not difficult. You have to upgrade

365
00:22:59,778 --> 00:23:03,414
yourself from your normal testings to IoT testing, and you

366
00:23:03,452 --> 00:23:06,786
also have to upskill yourself from testing softwares

367
00:23:06,818 --> 00:23:10,054
to testing hardwares. Firmwares have

368
00:23:10,092 --> 00:23:13,654
a mix of all kind of testing, and then you should

369
00:23:13,692 --> 00:23:15,990
be able to test Iot quite easily.

370
00:23:16,650 --> 00:23:19,430
Thank you. Thank you for hearing me patiently.

371
00:23:19,970 --> 00:23:22,700
I'm open to any kind of questions. Thank you.

