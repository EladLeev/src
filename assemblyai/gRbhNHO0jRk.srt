1
00:02:01,060 --> 00:02:05,372
Hello everybody. Today I would like to talk to you about trust driven development

2
00:02:05,516 --> 00:02:09,548
and how this approach can help us in DevOps transformation.

3
00:02:09,724 --> 00:02:13,064
Firstly, when we see be the transformation world,

4
00:02:13,182 --> 00:02:16,596
what do we think about that in our minds?

5
00:02:16,628 --> 00:02:20,136
It can pop up that it will be a change, it will be a

6
00:02:20,158 --> 00:02:23,256
change in the ways of working, it will be a change in

7
00:02:23,278 --> 00:02:27,036
the tools that we are using. Definitely the change.

8
00:02:27,218 --> 00:02:30,844
And if we are going through change, the most important part

9
00:02:30,882 --> 00:02:34,684
is trust. And today I will tell you why and how we can

10
00:02:34,722 --> 00:02:38,530
transform our organizations. Let's think for a while

11
00:02:39,220 --> 00:02:41,730
about the world, what we operate in.

12
00:02:43,460 --> 00:02:47,008
It is Vuca World. I hope that

13
00:02:47,094 --> 00:02:50,164
some of you have heard about this term. It was defined in the

14
00:02:50,202 --> 00:02:53,860
US after Second World War.

15
00:02:54,010 --> 00:02:57,744
And this is telling

16
00:02:57,792 --> 00:03:01,792
us about four dimensions of our nowadays world.

17
00:03:01,946 --> 00:03:05,844
Our nowadays world is volatile, it's arts uncertain,

18
00:03:05,892 --> 00:03:09,912
it's complex and is ambiguous. All right.

19
00:03:09,966 --> 00:03:13,290
On the other hand, we have our agile world,

20
00:03:14,240 --> 00:03:18,744
we have market dynamics, because our iT environment

21
00:03:18,792 --> 00:03:22,204
is very dynamic. There are a lot of companies are popping up every

22
00:03:22,242 --> 00:03:25,260
day, some startups are shutting down.

23
00:03:25,410 --> 00:03:29,544
So the market is definitely dynamic. Then we have unknown

24
00:03:29,592 --> 00:03:33,532
requirements. Obviously we as engineers,

25
00:03:33,596 --> 00:03:37,120
we know that we have a lot of discussion with the business

26
00:03:37,190 --> 00:03:41,156
that they would like to develop something, these would like to earn money. But then

27
00:03:41,258 --> 00:03:44,564
they ask us, okay, so how this feature should look like, what it

28
00:03:44,602 --> 00:03:48,516
should do. And sometimes we

29
00:03:48,538 --> 00:03:52,552
are frustrated, right, because we are the

30
00:03:52,686 --> 00:03:56,692
engineers, but they are the business guys. But in reality,

31
00:03:56,756 --> 00:04:01,496
right now we need to advise our business folks what

32
00:04:01,518 --> 00:04:05,196
to do and how to do it. We solve the

33
00:04:05,218 --> 00:04:08,632
complex problems, right? Because we are these to solve the complex

34
00:04:08,696 --> 00:04:12,300
problems and complex riddles. And last but not least,

35
00:04:12,370 --> 00:04:15,310
we have ambiguous estimations, right?

36
00:04:16,240 --> 00:04:19,916
When we develop something, we need to have a founding

37
00:04:19,948 --> 00:04:23,072
for that. And our business folks usually ask about,

38
00:04:23,206 --> 00:04:26,256
okay, nice feature, how much money does it

39
00:04:26,278 --> 00:04:29,556
cost? So we have those four aspects of

40
00:04:29,578 --> 00:04:32,896
our agile world, I call it Muka,

41
00:04:32,928 --> 00:04:36,564
acronym. So market dynamics are no requirements, complex problems and

42
00:04:36,602 --> 00:04:40,404
ambiguous estimations means muka. And it is sort

43
00:04:40,442 --> 00:04:43,450
of for me the answer for this Vuca world.

44
00:04:44,620 --> 00:04:48,010
Now, if we see the

45
00:04:48,460 --> 00:04:51,816
agile manifesto right now, we can see

46
00:04:51,918 --> 00:04:55,644
that in every single item, in every single line,

47
00:04:55,762 --> 00:04:59,084
there is a trust involved. Because these

48
00:04:59,122 --> 00:05:02,312
first one individuals and interaction of our processes and tools.

49
00:05:02,376 --> 00:05:05,404
Okay, so if we would like to interact with each

50
00:05:05,442 --> 00:05:09,010
other, we need to trust each other, right?

51
00:05:09,700 --> 00:05:13,408
Customer collaboration of the contract negotiation. We need to trust

52
00:05:13,494 --> 00:05:17,292
our customer that we not will be negotiating

53
00:05:17,356 --> 00:05:21,140
and fighting for every single feature. We will be collaborating,

54
00:05:22,200 --> 00:05:25,872
responding to a change. Definitely. We need to trust ourselves

55
00:05:26,016 --> 00:05:29,444
that we are able, we are capable to respond to the

56
00:05:29,482 --> 00:05:32,888
change that is happening. And we need to acknowledge that.

57
00:05:32,974 --> 00:05:36,170
And working software, someone needs to trust us.

58
00:05:36,700 --> 00:05:40,056
Most precisely, the investors needs to trust us that we

59
00:05:40,078 --> 00:05:43,512
will develop, they will put their money and we'll develop their

60
00:05:43,566 --> 00:05:47,164
software. So let's think for a while about

61
00:05:47,202 --> 00:05:50,552
this trust aspect. Isn't it a little bit of fuzzy?

62
00:05:50,696 --> 00:05:54,636
For me as an engineer, I didn't know what does it mean to be

63
00:05:54,658 --> 00:05:57,984
trustful and to have trust, to build trust with each other?

64
00:05:58,102 --> 00:06:01,728
So what I did, I did some research about that,

65
00:06:01,814 --> 00:06:06,128
and I observed that there are two aspects of building trust.

66
00:06:06,294 --> 00:06:10,176
The first aspect is cognitive aspect, and the other aspect is emotional

67
00:06:10,208 --> 00:06:13,860
aspect. Cognitive aspect is transmitted through

68
00:06:14,010 --> 00:06:17,748
thinking. So everything that we think of,

69
00:06:17,914 --> 00:06:21,604
everything that we have in our mind, the skills

70
00:06:21,652 --> 00:06:25,476
we have, the knowledge we gained, the experience we've

71
00:06:25,508 --> 00:06:29,384
got, this is the cognitive aspect of

72
00:06:29,422 --> 00:06:32,756
trust. And emotional aspect of trust is transmitted

73
00:06:32,788 --> 00:06:36,750
through feeling. So everything that

74
00:06:37,360 --> 00:06:41,048
is connected with our intentions, with our openness

75
00:06:41,224 --> 00:06:42,860
and honesty,

76
00:06:44,320 --> 00:06:47,900
everything that we make people feel,

77
00:06:48,050 --> 00:06:52,044
if they are interactive with us, it is emotional aspect

78
00:06:52,092 --> 00:06:56,508
of trust, and we call it that. We are in integrity

79
00:06:56,684 --> 00:07:00,708
when we have those aspects. So cognitive aspect is more oriented for

80
00:07:00,714 --> 00:07:04,756
the results. Emotional aspect is more oriented to the

81
00:07:04,938 --> 00:07:08,356
being in integrity as a person. So we

82
00:07:08,378 --> 00:07:12,200
have those two pillars. And while building

83
00:07:12,270 --> 00:07:16,420
trust, during DevOps transformation and during DevOps

84
00:07:16,580 --> 00:07:19,130
practices, we need to think about those two.

85
00:07:21,260 --> 00:07:25,416
The first pillar is all about competence, and the second pillar

86
00:07:25,448 --> 00:07:29,276
is all about character. So it means that trust is

87
00:07:29,298 --> 00:07:33,230
a combination of competence and character. Of us,

88
00:07:33,760 --> 00:07:37,760
competence is the cognitive intelligence that

89
00:07:37,910 --> 00:07:40,828
we have. We are engineers,

90
00:07:40,924 --> 00:07:44,972
so we all know that when we work, we use our analytical

91
00:07:45,036 --> 00:07:47,520
skills, we use our logic,

92
00:07:48,100 --> 00:07:51,664
we have the specific language. It can be Java language

93
00:07:51,712 --> 00:07:55,300
or c plus plus language. But it also can be

94
00:07:55,370 --> 00:07:59,056
specific technical language that we are not aware.

95
00:07:59,088 --> 00:08:02,532
Even like we are talking about deployment,

96
00:08:02,596 --> 00:08:06,184
we are talking about measurements, we are talking about having the

97
00:08:06,302 --> 00:08:09,770
ceremonies, like planning, retrospective, and so on,

98
00:08:10,140 --> 00:08:14,312
that specific language. And people outside of our domain

99
00:08:14,376 --> 00:08:18,108
will not understand that. The same with the data.

100
00:08:18,194 --> 00:08:21,884
We use a lot of data, we analyze a lot of data,

101
00:08:22,002 --> 00:08:25,692
and we know what does it mean

102
00:08:25,746 --> 00:08:29,244
if we are analyzing those records in the database,

103
00:08:29,292 --> 00:08:33,452
for example. But this is the meaning for us, for our cognitive

104
00:08:33,516 --> 00:08:35,810
intelligence, not for others.

105
00:08:36,740 --> 00:08:40,064
We have also emotional intelligence. And emotional

106
00:08:40,112 --> 00:08:43,712
intelligence is basically how to recognize

107
00:08:43,776 --> 00:08:45,860
and understand our emotions.

108
00:08:47,240 --> 00:08:51,088
So when we are in such a state,

109
00:08:51,194 --> 00:08:54,936
for example, during the meeting, and we don't understand

110
00:08:55,038 --> 00:08:58,648
our emotions, we will not be able to also

111
00:08:58,734 --> 00:09:02,890
react properly. So the first things first is to understand

112
00:09:03,600 --> 00:09:07,150
in which state we are in and what's going

113
00:09:07,600 --> 00:09:11,132
to happen with us and then we can define our

114
00:09:11,186 --> 00:09:14,860
reaction on the certain situation. For example, during meeting,

115
00:09:16,020 --> 00:09:20,044
it is also recognizing and understanding emotions

116
00:09:20,092 --> 00:09:24,704
of others. Because if we, for example, we are doing the

117
00:09:24,742 --> 00:09:28,896
planning meeting, we need to understand what's

118
00:09:28,928 --> 00:09:32,468
going on in the room for different people.

119
00:09:32,554 --> 00:09:35,684
So for example, for product owner, he or she

120
00:09:35,882 --> 00:09:39,604
might be worried that the feature will be not taken into

121
00:09:39,642 --> 00:09:43,204
consideration or he or she might be

122
00:09:43,402 --> 00:09:47,128
excited that there is a new feature coming in. But the team

123
00:09:47,214 --> 00:09:51,256
can be worried that it's difficult feature and we are

124
00:09:51,278 --> 00:09:54,556
not able to deliver these. So there are a lot of emotions that we are

125
00:09:54,578 --> 00:09:58,376
not aware of. And this emotional

126
00:09:58,408 --> 00:10:00,430
aspect is for us to understand.

127
00:10:01,200 --> 00:10:04,188
So when we embrace our emotional part,

128
00:10:04,354 --> 00:10:07,772
then this is the way to build

129
00:10:07,906 --> 00:10:11,456
a bit trust and break out the silos. And why I'm talking about

130
00:10:11,478 --> 00:10:14,784
the silos in the organization, because this is a clue. This is a

131
00:10:14,822 --> 00:10:18,316
crucial part in terms of the DevOps

132
00:10:18,348 --> 00:10:21,556
transformation. When you see this picture, there is

133
00:10:21,578 --> 00:10:24,836
an example of tools ecosystem for DevOps, there are

134
00:10:24,858 --> 00:10:28,740
a lot of different tools that we are using. We were implementing

135
00:10:29,080 --> 00:10:32,856
in the companies, or we would like to impediments. And you can

136
00:10:32,878 --> 00:10:36,056
see that there are certain domains of

137
00:10:36,078 --> 00:10:39,880
the tooling we use, for example, GitLab to build

138
00:10:39,950 --> 00:10:43,944
application, we can use chef to deploy the application,

139
00:10:44,062 --> 00:10:47,372
Docker to run it, and so on and so forth. These are a lot of

140
00:10:47,506 --> 00:10:51,420
different tools and we are keen on implementing those new tools.

141
00:10:51,760 --> 00:10:55,660
But if we have domains, we also

142
00:10:55,730 --> 00:10:59,904
may have silos, right? So there can

143
00:10:59,942 --> 00:11:03,632
be a certain amount of people building the app and then

144
00:11:03,686 --> 00:11:07,328
there can be a QA group who are testing the app.

145
00:11:07,414 --> 00:11:11,510
Obviously nowadays qas and developers, engineers are

146
00:11:11,880 --> 00:11:15,124
sometimes, usually, I guess, mixed in the one

147
00:11:15,162 --> 00:11:18,996
team, but this is just a part of this

148
00:11:19,178 --> 00:11:22,648
example. We have then people who can deploy the application

149
00:11:22,734 --> 00:11:26,660
and run on production. We can have the operations

150
00:11:26,820 --> 00:11:29,770
who monitor the application.

151
00:11:30,540 --> 00:11:33,872
And that's why if we talk about DevOps,

152
00:11:33,956 --> 00:11:37,420
DevOps means, as easy as it is,

153
00:11:37,490 --> 00:11:41,064
DevOps means development plus operations. So the shared

154
00:11:41,112 --> 00:11:46,100
responsibility, shared goal and shared

155
00:11:46,280 --> 00:11:49,856
working ways. So in

156
00:11:49,878 --> 00:11:53,424
order to have it, we need to break these silos and

157
00:11:53,462 --> 00:11:56,672
build trust. If we will build trust between those

158
00:11:56,726 --> 00:12:00,196
groups, we will be succeed. And the

159
00:12:00,218 --> 00:12:04,196
tooling is just another example that we

160
00:12:04,218 --> 00:12:07,908
will be using. But definitely we need to have trust.

161
00:12:08,074 --> 00:12:11,652
Why it's so important, because for example, let's have this

162
00:12:11,706 --> 00:12:16,168
example of building and testing software. So we have developers who

163
00:12:16,334 --> 00:12:19,592
build the code, we have qas who test these code.

164
00:12:19,646 --> 00:12:23,016
And I remember like 15 years ago when I was a

165
00:12:23,038 --> 00:12:26,380
Java developer, there was a little competition in the company.

166
00:12:26,530 --> 00:12:29,100
Between engineers and the qAs,

167
00:12:30,400 --> 00:12:33,836
that the software will have a bugs or will

168
00:12:33,858 --> 00:12:37,468
not have the bugs. So DevOps were

169
00:12:37,554 --> 00:12:40,736
building software and saying, yes, this software is ideal. Works for

170
00:12:40,758 --> 00:12:44,688
me, works for me in my environment. It works, it is perfect.

171
00:12:44,854 --> 00:12:47,936
There is no bug. And then this

172
00:12:48,118 --> 00:12:52,228
jar file, whatever this app were going to

173
00:12:52,394 --> 00:12:56,256
qas and Qas were saying, oh, there's a lot of bugs

174
00:12:56,288 --> 00:13:00,020
over there, please raise the tickets to injira.

175
00:13:00,360 --> 00:13:03,560
So that was a little competition. And obviously engineers,

176
00:13:05,260 --> 00:13:09,176
I was an engineer and we were saying, it works for

177
00:13:09,198 --> 00:13:12,856
me, works for me. Do you know that? Yeah, it works for me.

178
00:13:13,038 --> 00:13:16,368
And Qas, they were saying a lot of bucks. A lot of bucks.

179
00:13:16,484 --> 00:13:20,952
The same story can be between production

180
00:13:21,016 --> 00:13:24,764
and monitoring, right? Production people. So let's say

181
00:13:24,802 --> 00:13:28,652
building and testing and deploying to production

182
00:13:28,796 --> 00:13:32,112
and passing over the app and saying, everything's fine,

183
00:13:32,166 --> 00:13:34,610
I've done my work, everything's fine.

184
00:13:35,060 --> 00:13:38,780
It break production. Oh, you know, there is operations

185
00:13:38,860 --> 00:13:42,624
guys who can fix that. And that is also challenge,

186
00:13:42,672 --> 00:13:46,788
right? Because operations guys may say also,

187
00:13:46,954 --> 00:13:50,324
oh, the production is broken. That's because of

188
00:13:50,362 --> 00:13:54,084
the qas or because they didn't test it or because of engineers.

189
00:13:54,212 --> 00:13:57,290
So there's a blaming game starting at this point.

190
00:13:57,820 --> 00:14:01,864
And if there will be a trust like this

191
00:14:01,982 --> 00:14:05,772
that will have one common goal, one common mission, and people will trust

192
00:14:05,826 --> 00:14:09,576
each other that engineers, yes, they did the best work they've

193
00:14:09,608 --> 00:14:13,230
ever done, but bugs can be there.

194
00:14:13,760 --> 00:14:17,100
Or engineers can trust operations that, yes, operations,

195
00:14:17,180 --> 00:14:20,716
they have a lot of good intentions

196
00:14:20,828 --> 00:14:23,904
in running on production, but sometimes they need to

197
00:14:23,942 --> 00:14:27,648
fix something in the code and we can help them

198
00:14:27,734 --> 00:14:31,808
understand the code. If there will be a trust, I'll be helpful

199
00:14:31,904 --> 00:14:35,776
for everyone. This is about also exchanging

200
00:14:35,808 --> 00:14:39,076
these knowledge. So I met a lot of operations guys who wanted to

201
00:14:39,098 --> 00:14:42,660
do some coding part, but engineers said, no operations

202
00:14:42,740 --> 00:14:46,196
guys, you just run the applications,

203
00:14:46,388 --> 00:14:50,328
we are fixing the bugs and vice versa. I met a

204
00:14:50,334 --> 00:14:54,570
lot of operations guys who told me that

205
00:14:56,060 --> 00:14:59,676
we are just running the app and everything that needs to be fixed will be

206
00:14:59,698 --> 00:15:02,140
done by developer because they build these software.

207
00:15:03,840 --> 00:15:07,164
There was an idea a couple of years ago, you build it,

208
00:15:07,202 --> 00:15:10,976
you run it. So having the same people building the same people run

209
00:15:10,998 --> 00:15:14,156
it. So this is as well this direction

210
00:15:14,188 --> 00:15:18,176
that the DevOps is going to. And if we build

211
00:15:18,278 --> 00:15:21,876
trust by showing our results, showing that

212
00:15:21,898 --> 00:15:25,236
we deliver something, and also showing our attitude that we

213
00:15:25,258 --> 00:15:29,044
are open to discussion with other people, then the whole

214
00:15:29,162 --> 00:15:33,210
tool chain of our ecosystem can be shared and

215
00:15:33,900 --> 00:15:36,440
DevOps can be implemented.

216
00:15:37,420 --> 00:15:41,192
As I mentioned at the beginning, there are three aspects that we change.

217
00:15:41,326 --> 00:15:44,936
We are changing a lot during DevOps transformation. But there are three aspects

218
00:15:44,968 --> 00:15:48,590
that we change. Team structure, process adjustment and tools review.

219
00:15:50,560 --> 00:15:54,092
Sometimes we don't need to change, but sometimes we need to review

220
00:15:54,226 --> 00:15:57,792
those because team structure. I'm not going to the details about team

221
00:15:57,846 --> 00:16:01,404
structure here, but there is a separate

222
00:16:01,452 --> 00:16:04,864
book, team topologies, where you can find

223
00:16:04,982 --> 00:16:09,308
the different structures for different organizations.

224
00:16:09,404 --> 00:16:13,360
But definitely if we review our organization, we think about structure.

225
00:16:13,440 --> 00:16:16,612
Do we have the right people in the right team, for example,

226
00:16:16,666 --> 00:16:20,036
Dev Qas, dev operations. So we need

227
00:16:20,058 --> 00:16:23,720
to have these trust to management and

228
00:16:23,790 --> 00:16:26,888
from people that these

229
00:16:26,974 --> 00:16:30,344
team structure or restructure will be done

230
00:16:30,382 --> 00:16:34,484
smoothly. We may do some process adjusting,

231
00:16:34,532 --> 00:16:37,656
so some of our processes, ways of working that we are following

232
00:16:37,688 --> 00:16:41,368
right now. It's maybe not efficient or maybe can be improved.

233
00:16:41,464 --> 00:16:45,070
So we need to have trust

234
00:16:45,600 --> 00:16:49,932
in the group in order to change it, because there will be definitely resistance

235
00:16:50,076 --> 00:16:54,064
of people who like the process and there

236
00:16:54,102 --> 00:16:59,056
will be some difficulties in trusting the

237
00:16:59,078 --> 00:17:02,390
others would like to do it better. So if

238
00:17:02,840 --> 00:17:06,596
the group that would like to change something will show their

239
00:17:06,698 --> 00:17:10,484
knowledge that they know what to do, they know how to do it and

240
00:17:10,522 --> 00:17:14,184
will show the openness that we are here together to work

241
00:17:14,222 --> 00:17:18,650
this out, then the resistance can be lower

242
00:17:19,180 --> 00:17:23,220
and the tools review. We love that as engineers,

243
00:17:23,300 --> 00:17:27,096
right? When we do these DevOps transformation, we do tools

244
00:17:27,128 --> 00:17:31,550
review, implement a lot of new tools and so on. But in that case,

245
00:17:34,240 --> 00:17:37,536
our management needs to trust us that we

246
00:17:37,558 --> 00:17:41,484
know these tools, we will be using good tools and we'll handle

247
00:17:41,532 --> 00:17:45,452
that to make our software

248
00:17:45,516 --> 00:17:49,008
successful. And then once we have this trust,

249
00:17:49,174 --> 00:17:53,216
we as engineers can have the autonomy, right? We are striving

250
00:17:53,248 --> 00:17:56,960
for autonomy. You would like to do autonomously,

251
00:17:57,040 --> 00:18:00,384
a lot of things. So once we show people results

252
00:18:00,432 --> 00:18:03,450
and then show our intentions that they can trust us,

253
00:18:04,540 --> 00:18:08,036
we can get the autonomy. And it's even mentioned in the DevOps

254
00:18:08,068 --> 00:18:11,560
evolution model on the third stage, that individual,

255
00:18:11,710 --> 00:18:15,752
that's the example that individuals can work without manual

256
00:18:15,816 --> 00:18:19,788
approvals from outside of the team. It is also about trust

257
00:18:19,874 --> 00:18:23,576
because this approval step, for example, while deploying

258
00:18:23,768 --> 00:18:27,792
to the production, having this continuous delivery piece,

259
00:18:27,846 --> 00:18:31,792
right, usually in the companies, there is the green

260
00:18:31,846 --> 00:18:35,650
light that someone manually needs to click in Jira or whatever.

261
00:18:36,500 --> 00:18:39,972
So that's this approval. And if these

262
00:18:40,026 --> 00:18:43,844
people who make a green light will

263
00:18:44,042 --> 00:18:48,564
trust developers, then we can go towards more

264
00:18:48,682 --> 00:18:52,216
deploying without approval. And I

265
00:18:52,238 --> 00:18:56,056
would like to mention also Brenda Brown here and

266
00:18:56,158 --> 00:19:00,136
her quotation, she is a us psychologist and

267
00:19:00,158 --> 00:19:03,930
researcher and she said that trust is not

268
00:19:04,400 --> 00:19:07,964
being built in big sweeping moments. It's being

269
00:19:08,002 --> 00:19:11,532
built in these tiny moments every day. And it works

270
00:19:11,586 --> 00:19:16,348
like this, that you have one engineer joining

271
00:19:16,364 --> 00:19:20,960
the team and you have the other engineer in the team. And our brain subconsciously

272
00:19:21,300 --> 00:19:24,576
is assessing these relationship.

273
00:19:24,758 --> 00:19:28,496
Setting up the relationship between us is assessing the

274
00:19:28,518 --> 00:19:32,560
two aspects that I mentioned. Do this new guy have the knowledge

275
00:19:32,640 --> 00:19:35,908
and can help us in our team?

276
00:19:36,074 --> 00:19:39,364
And how about intention of this guy, of this

277
00:19:39,402 --> 00:19:43,364
person? And every sweeping moment, our brain

278
00:19:43,412 --> 00:19:47,764
subconsciously assess those two aspects. And once it's

279
00:19:47,812 --> 00:19:51,032
assessed, a relationship is being built

280
00:19:51,086 --> 00:19:53,800
and is built and trust is established.

281
00:19:54,540 --> 00:19:57,848
Now I have two example for you guys per programming.

282
00:19:57,944 --> 00:20:01,196
That's the first one in per programming we need to have

283
00:20:01,218 --> 00:20:04,284
the trust between each other, right? There are some

284
00:20:04,322 --> 00:20:07,964
challenges. When I met with the engineers, they told me that there are

285
00:20:08,082 --> 00:20:11,296
challenges in the per programming. There is a fear of

286
00:20:11,318 --> 00:20:14,972
being assessed. These first things first. I am the developer.

287
00:20:15,116 --> 00:20:18,796
I'm a senior developer. For example, doing the per programming with a junior guy.

288
00:20:18,918 --> 00:20:22,310
But is it my code senior? Is it

289
00:20:23,000 --> 00:20:26,164
enough? Does the other

290
00:20:26,202 --> 00:20:29,652
guy will see the value or the other

291
00:20:29,706 --> 00:20:33,784
hand, vice versa, that I'm junior guy and I don't feel that

292
00:20:33,822 --> 00:20:37,512
my code is good enough in this process.

293
00:20:37,566 --> 00:20:41,016
So that's a trap of obviously not for everyone, but for

294
00:20:41,038 --> 00:20:44,410
some that we can have.

295
00:20:44,940 --> 00:20:48,636
And behind this fear is

296
00:20:48,658 --> 00:20:52,044
a fear of rejection. Will I be rejected as a junior and I don't know

297
00:20:52,082 --> 00:20:55,996
anything because I don't have this knowledge? Or will I be rejected as

298
00:20:56,018 --> 00:20:59,164
a senior because I may not have a knowledge

299
00:20:59,212 --> 00:21:02,576
and my attitude may not be right? So this

300
00:21:02,598 --> 00:21:06,624
is about fear. And if we will be

301
00:21:06,662 --> 00:21:10,340
brave enough to show ourselves, then it helps building

302
00:21:10,410 --> 00:21:14,084
trust. Similar with a code review. When we have code

303
00:21:14,122 --> 00:21:15,110
review process,

304
00:21:17,800 --> 00:21:20,740
we are putting ourselves to the assessment of others,

305
00:21:20,810 --> 00:21:24,836
right? The question is if they are assessing my code or if

306
00:21:24,858 --> 00:21:28,740
they are assessing me as author of the code. I also need to be courage

307
00:21:28,820 --> 00:21:32,744
in order to build trust and to show my code and

308
00:21:32,782 --> 00:21:38,012
not to take these comments about my code into

309
00:21:38,066 --> 00:21:41,356
me. At the end, I would like to mention about the

310
00:21:41,458 --> 00:21:44,748
vulnerability that Brenda defined. Brenda defined the

311
00:21:44,754 --> 00:21:48,252
vulnerability people with vulnerability as a birthplace of innovation,

312
00:21:48,316 --> 00:21:52,160
creative and change. But what does it mean to be vulnerable? It means

313
00:21:52,230 --> 00:21:55,650
to show our weaknesses to others. Like with this example,

314
00:21:57,060 --> 00:22:01,232
with this example with the code review or per programming. Because we know

315
00:22:01,286 --> 00:22:04,836
systems of vulnerability as a flow or weakness in

316
00:22:04,858 --> 00:22:08,224
the computer system which could be exploited and volatile

317
00:22:08,272 --> 00:22:11,796
the system, right? So that's our meaning in the engineering

318
00:22:11,828 --> 00:22:15,284
of vulnerability. We are searching

319
00:22:15,332 --> 00:22:18,824
for those weaknesses and we try to fix them.

320
00:22:18,942 --> 00:22:22,484
The human vulnerability is more showing the weaknesses

321
00:22:22,532 --> 00:22:25,828
and not to try to fix them. Maybe we can try to fix them at

322
00:22:25,854 --> 00:22:29,304
some point. But first things first is to show this vulnerability

323
00:22:29,432 --> 00:22:32,892
that yes, we are humans, we have some weaknesses and

324
00:22:32,946 --> 00:22:37,200
if we admit that to people, then people will trust

325
00:22:37,270 --> 00:22:40,444
us more because our attitude,

326
00:22:40,492 --> 00:22:43,330
our intention will be clear.

327
00:22:44,900 --> 00:22:48,700
If we are talking about agile or scrum,

328
00:22:48,780 --> 00:22:52,144
we also need to be vulnerable to do scrum.

329
00:22:52,192 --> 00:22:56,004
For example, quick example for today is retrospective. So we

330
00:22:56,042 --> 00:22:59,392
do retrospectives. And in order to have meaningful conversation,

331
00:22:59,456 --> 00:23:03,044
we need to show ourselves as we are.

332
00:23:03,162 --> 00:23:06,384
A quick example with the metrics

333
00:23:06,432 --> 00:23:10,280
from our world. We need to trust each other to show proper

334
00:23:10,350 --> 00:23:13,556
numbers, right? These say, give me your metrics and I will

335
00:23:13,598 --> 00:23:17,644
tell you whatever you want to hear, right. You know

336
00:23:17,682 --> 00:23:21,052
that every single metrics can be work

337
00:23:21,106 --> 00:23:24,588
around it, right? We have four metrics here. Like just example,

338
00:23:24,674 --> 00:23:28,512
deployment frequency. They said that we need to

339
00:23:28,566 --> 00:23:32,160
frequently deploy to production and we need to measure it. Yes.

340
00:23:32,310 --> 00:23:35,932
We can split our user stories for so small items

341
00:23:35,996 --> 00:23:40,228
that we'll be deploying very frequently and our number will be very high.

342
00:23:40,394 --> 00:23:43,190
The same lead time for changes, right?

343
00:23:44,840 --> 00:23:48,880
This is about cheating a little bit, right? But splitting

344
00:23:49,040 --> 00:23:52,776
work for small chunks so small that the numbers will

345
00:23:52,798 --> 00:23:56,216
be perfect. But this is not about that. It's about being

346
00:23:56,318 --> 00:24:00,376
true with ourselves and showing our work in

347
00:24:00,398 --> 00:24:03,936
these metrics with the meantime to recover.

348
00:24:04,068 --> 00:24:07,516
I saw the workaround that when we

349
00:24:07,538 --> 00:24:11,164
deploy to production, we deploy to production. But we

350
00:24:11,202 --> 00:24:14,876
have these feature flag that says it is invisible to

351
00:24:14,898 --> 00:24:18,690
the client. So when we would like to measure the time

352
00:24:19,060 --> 00:24:22,172
to recover the system, we can measure

353
00:24:22,236 --> 00:24:26,192
up until delivering to production but

354
00:24:26,246 --> 00:24:29,584
not showing to the clients, right. And the

355
00:24:29,622 --> 00:24:33,412
time will be shorter because at the end of this process, for example,

356
00:24:33,466 --> 00:24:36,996
let's say we need to do some tests at the

357
00:24:37,018 --> 00:24:41,040
end and not calculating these time at the end we will

358
00:24:41,130 --> 00:24:45,284
have better results, but we will cheat the metrics.

359
00:24:45,412 --> 00:24:48,888
So in order to have proper numbers and to have proper

360
00:24:48,974 --> 00:24:53,556
meaning numbers, we need to have trust together,

361
00:24:53,678 --> 00:24:56,700
to be brave, to show ourselves.

362
00:24:57,120 --> 00:25:01,292
Then we will be able to build software better, build relationships better,

363
00:25:01,426 --> 00:25:04,972
and establish trust. And those three teams will

364
00:25:05,026 --> 00:25:08,640
show us the aspect of belonging that we will feel

365
00:25:08,710 --> 00:25:12,176
belong in the workplace, because we'll be

366
00:25:12,198 --> 00:25:15,584
truly ourselves as well.

367
00:25:15,782 --> 00:25:19,616
And at the end, I would like to show you and finish with a

368
00:25:19,638 --> 00:25:23,200
quotation from Simon Sinek. These team is not a group of people

369
00:25:23,270 --> 00:25:27,120
working together. The team is a group of people that trust

370
00:25:27,190 --> 00:25:29,650
each other. Thank you very much.

371
00:25:30,340 --> 00:25:33,930
Let me know if you have any questions. I'm available.

372
00:25:34,460 --> 00:25:37,896
You can also reach out me on social media and have

373
00:25:37,918 --> 00:25:39,220
a nice conference.

