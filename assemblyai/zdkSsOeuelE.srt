1
00:01:28,370 --> 00:01:32,470
Hi, welcome to the session on growing your company with AWS Container Services.

2
00:01:32,620 --> 00:01:36,582
My name is Mesaido Kasingh and I'm a developer advocate with the ECS service

3
00:01:36,636 --> 00:01:39,526
team. Before we start, I would like to give you an idea of what a

4
00:01:39,548 --> 00:01:43,018
developer advocate does with inside a service team. We work closely

5
00:01:43,034 --> 00:01:46,974
with product managers and system engineers in the team to help them understand and

6
00:01:47,012 --> 00:01:50,942
collect the signals and trends from our customers based on your feedback and help

7
00:01:50,996 --> 00:01:54,046
us all improve our products. Instead of going

8
00:01:54,068 --> 00:01:57,166
through architectural details and how things work under the covers, you'll see some

9
00:01:57,188 --> 00:02:00,578
of that. Don't worry. I decided to do today something different. We're going

10
00:02:00,584 --> 00:02:03,934
to go through the story of an imaginary company which is based on the stories

11
00:02:03,982 --> 00:02:07,810
of many real world scenarios and customers. The names of course are not real,

12
00:02:07,880 --> 00:02:11,318
but the actual use case is they are an early stage startup and we

13
00:02:11,324 --> 00:02:15,042
are going to company them on their journey from the early stages.

14
00:02:15,106 --> 00:02:18,086
As they continue to grow from were, we'll jump over to a demo of how

15
00:02:18,108 --> 00:02:21,794
they deploy the solution. Last but not least, we'll also see how they continue

16
00:02:21,852 --> 00:02:25,546
to evolve over time, how their priorities changed, and how

17
00:02:25,568 --> 00:02:29,674
they utilized the continues services within AWS in order

18
00:02:29,712 --> 00:02:33,002
to allow growth and handle complexity. So welcome

19
00:02:33,056 --> 00:02:37,054
to any company. Any company has a brand new product, something new

20
00:02:37,092 --> 00:02:40,474
in tech that will enable you to bring any product from any industry

21
00:02:40,522 --> 00:02:44,158
to market in less than eight weeks. They do this by streamlining the process,

22
00:02:44,244 --> 00:02:47,618
fully automated, allow you to upload a few artifacts and they will take care of

23
00:02:47,624 --> 00:02:51,022
the rest of everything for you. Marketing channels, advertising,

24
00:02:51,086 --> 00:02:54,594
partnership, press releases everything will be done from a to z.

25
00:02:54,792 --> 00:02:58,526
Automated managed AWS a service Scott, the founder

26
00:02:58,558 --> 00:03:01,766
of any company, wanted to solve a personal pain point that he had with his

27
00:03:01,788 --> 00:03:05,462
previous companies that he started. Launching a product is hard.

28
00:03:05,596 --> 00:03:09,666
It has a number of moving parts, relationships that need to be formed and coordinated,

29
00:03:09,778 --> 00:03:13,850
hiring multiple people to track the whole process. And in his experience,

30
00:03:14,000 --> 00:03:17,338
it never ever went smoothly. There were always hiccups along the way,

31
00:03:17,424 --> 00:03:21,290
things that were forgotten, things that he wished that they'd done better.

32
00:03:21,440 --> 00:03:24,686
So he was thinking, why not create a service that will take you

33
00:03:24,708 --> 00:03:28,826
through all the checkboxes and manage it for you? That is what brought Scott

34
00:03:28,938 --> 00:03:32,794
to any company's mission statement. Any company is a small startup

35
00:03:32,842 --> 00:03:36,074
in the early stages. They're just getting started. Meet Scott,

36
00:03:36,122 --> 00:03:39,618
the CEO. He's also the chief marketing officer. He's trying to

37
00:03:39,624 --> 00:03:42,690
raise funding, create a company at the same time. And he lives

38
00:03:42,760 --> 00:03:45,842
more in the air, in hotels than he usually does at home.

39
00:03:45,976 --> 00:03:49,686
Diane's the CTO, the technical visionary for the company. She came

40
00:03:49,708 --> 00:03:53,062
up with the technology and process to make the product possible.

41
00:03:53,196 --> 00:03:56,582
Alice is the vp of engineering. She's a coder at heart,

42
00:03:56,716 --> 00:04:00,758
hands on, and also has great leadership skills that will grow the company.

43
00:04:00,924 --> 00:04:04,330
So as founders do, they got together

44
00:04:04,400 --> 00:04:07,418
and made a strategy for the first six months of the company. And these are

45
00:04:07,424 --> 00:04:10,618
the bullet points that they came up with. Most important things they needed to do.

46
00:04:10,704 --> 00:04:13,818
The first thing they needed to do was create a web presence. They needed to

47
00:04:13,824 --> 00:04:17,550
get the word out to the world about their new technology and a new service.

48
00:04:17,700 --> 00:04:20,558
Of course, they need to find customers, build a product, and build a company in

49
00:04:20,564 --> 00:04:24,410
the background. But the most important thing was to build a web presence

50
00:04:24,570 --> 00:04:28,146
as soon as possible and as quick as possible. So Alice took

51
00:04:28,168 --> 00:04:32,146
on the responsibility for getting the website up and running. She has previous experience with

52
00:04:32,168 --> 00:04:35,314
containers and knows that the technology is sound and it will allow

53
00:04:35,352 --> 00:04:38,578
them to grow in the future. She does not really want to have any time

54
00:04:38,664 --> 00:04:42,166
to maintain the infrastructure underneath that runs the website. And she wants something that

55
00:04:42,188 --> 00:04:46,038
is fire and forget. The product is going to be awesome, of course. So it

56
00:04:46,044 --> 00:04:49,318
will need to handle significant load and Alice does not want to have to

57
00:04:49,324 --> 00:04:52,770
do that on her own. And the most important thing as a developer,

58
00:04:52,850 --> 00:04:56,762
git flow for life. So Alice was started to look for a suitable service

59
00:04:56,816 --> 00:05:00,314
that would search her needs. She contacted the AWS account team and they

60
00:05:00,352 --> 00:05:04,138
decided together to go with AWS apprunner. Let's have a look what apprunner

61
00:05:04,154 --> 00:05:07,886
is. So at the top here is the customer's application coming out of

62
00:05:07,908 --> 00:05:11,390
a container registry like ECR public or ECR private in your account

63
00:05:11,460 --> 00:05:14,078
or source code repository. For example,

64
00:05:14,164 --> 00:05:18,494
GitHub. Sitting underneath that is apprunner. We have a front end API,

65
00:05:18,542 --> 00:05:22,066
a very familiar AWS oriented API that you are

66
00:05:22,168 --> 00:05:25,794
accustomed to working with, along with a very robust AWS

67
00:05:25,842 --> 00:05:29,206
console experience. We've invested heavily from the user experience

68
00:05:29,308 --> 00:05:33,062
perspective into designing a service that takes the different

69
00:05:33,116 --> 00:05:36,438
areas of the AWS console and folds them into

70
00:05:36,524 --> 00:05:39,558
one easy to use product. Everything you see in

71
00:05:39,564 --> 00:05:42,470
the console is also backed by the front end API.

72
00:05:42,550 --> 00:05:46,246
That also allows you to interact directly with the service programmatically.

73
00:05:46,358 --> 00:05:50,154
Underneath is the orchestration workflow. That's what's handling the end

74
00:05:50,192 --> 00:05:53,222
to end story that takes you from a git push all

75
00:05:53,296 --> 00:05:57,294
the way into a running application deployed on the AWS cloud.

76
00:05:57,412 --> 00:06:00,814
With apprunner, there are a variety of these components that you do not

77
00:06:00,852 --> 00:06:04,542
need to manage. A build system, pipeline, load balancers.

78
00:06:04,686 --> 00:06:07,314
All of those are set up automatically for you.

79
00:06:07,432 --> 00:06:10,658
AWS also sets up and handles the author scaling of

80
00:06:10,664 --> 00:06:14,974
the application based on the number of requests apprunner

81
00:06:15,022 --> 00:06:18,454
is still a fairly new service, but the building blocks and the shoulders on which

82
00:06:18,492 --> 00:06:21,762
it is standing are very, very tried and tested.

83
00:06:21,906 --> 00:06:25,702
App runner is built on these mature services that we've encapsulated together into

84
00:06:25,756 --> 00:06:29,346
one simple service. And by leaving the undifferentiated

85
00:06:29,378 --> 00:06:33,382
heavy lifting to us, you don't need deep AWS domain knowledge

86
00:06:33,446 --> 00:06:36,700
to get up and running and be successful with your application.

87
00:06:37,070 --> 00:06:39,894
Apprunner is suitable for many types of applications.

88
00:06:40,022 --> 00:06:43,854
Were are the characteristics that we see most of our customers using for

89
00:06:43,892 --> 00:06:47,690
apprunner applications, web applications and rest APIs

90
00:06:47,770 --> 00:06:51,402
that serve HTTP requests. Also, these applications are stateless.

91
00:06:51,466 --> 00:06:54,786
They store their information in an external data store,

92
00:06:54,888 --> 00:06:58,846
for example DynamoDB RDS. And these applications

93
00:06:58,878 --> 00:07:02,110
are long running applications that can serve many requests,

94
00:07:02,190 --> 00:07:05,678
sometimes simultaneously. In order to handle load,

95
00:07:05,854 --> 00:07:09,738
let's have a look at the user experience in apprunner. Developer writes

96
00:07:09,774 --> 00:07:13,062
the code in their ide and pushes it to a source code repo, for example

97
00:07:13,116 --> 00:07:17,522
GitHub. Or they can create a docker image and upload it to their ECR repository.

98
00:07:17,666 --> 00:07:21,434
They then create an apprunner service which has a number of configurations, the build

99
00:07:21,472 --> 00:07:25,034
and runtime compute resources, a health check to know that tour application is

100
00:07:25,072 --> 00:07:29,462
actually working, auto scaling parameters and the deployment details.

101
00:07:29,606 --> 00:07:32,954
All that information is then used to provide you a customizable

102
00:07:33,002 --> 00:07:36,286
public secure URL with which you can access your

103
00:07:36,308 --> 00:07:39,626
application. So let's have a look what happens when you deploy

104
00:07:39,658 --> 00:07:43,434
an app runner services. Your application is deployed in an AWS

105
00:07:43,482 --> 00:07:46,706
managed VPC where your application is taken

106
00:07:46,808 --> 00:07:50,286
and packaged as a container and deployed on a fargate

107
00:07:50,318 --> 00:07:53,230
task running in that VPC in multiple subnets.

108
00:07:53,390 --> 00:07:56,942
Your customers, when they access the application, will make a DNS request

109
00:07:57,006 --> 00:08:00,434
to route 53 where they will receive an FQDN

110
00:08:00,482 --> 00:08:03,714
which is pointing to the service URL which is actually a network

111
00:08:03,762 --> 00:08:07,346
load balancer. They will make the HTTP request to the load

112
00:08:07,378 --> 00:08:11,394
balancer. From there they will be forwarded to a managed

113
00:08:11,442 --> 00:08:15,386
router inside the app runner service, and each of those requests will

114
00:08:15,408 --> 00:08:18,534
be forwarded to each one of your containers based on the number of containers

115
00:08:18,582 --> 00:08:21,610
running, just so that you know,

116
00:08:21,760 --> 00:08:25,054
apprunner can also scale down to zero, which means that if there are no

117
00:08:25,092 --> 00:08:28,954
requests coming into your application, you will not be paying for any of the requests

118
00:08:29,002 --> 00:08:33,034
coming in and you'll be able to save and optimize your costs

119
00:08:33,162 --> 00:08:36,338
from there. Any application which needs to make a

120
00:08:36,344 --> 00:08:39,934
request out to the Internet, for example to pull down dependencies

121
00:08:39,982 --> 00:08:43,394
in the application or modules, or any other

122
00:08:43,432 --> 00:08:47,270
kind of code will go through the managed. Net gateway

123
00:08:47,610 --> 00:08:51,782
out to the Internet in order to pull those dependencies down into

124
00:08:51,836 --> 00:08:55,686
the application itself. Time for a demo. Let's go

125
00:08:55,708 --> 00:08:58,922
through a scenario that people in any company

126
00:08:58,976 --> 00:09:02,266
would go through in order to deploy their application. So first things

127
00:09:02,288 --> 00:09:06,262
we're going to start with is of course shell,

128
00:09:06,406 --> 00:09:09,020
because there's no other reason why not to.

129
00:09:12,130 --> 00:09:16,158
And here we have simple git repository where

130
00:09:16,324 --> 00:09:19,566
sorry, not a git repository show where

131
00:09:19,588 --> 00:09:22,734
alice decided okay, I have an idea what I would like to do.

132
00:09:22,772 --> 00:09:26,354
I've got some kind of a boilerplate template or

133
00:09:26,392 --> 00:09:29,986
boilerplate design where I would like to base my website upon. She found

134
00:09:30,008 --> 00:09:33,410
something on git, cloned it to her repository, to her local

135
00:09:33,480 --> 00:09:37,298
machine, and for the purposes of

136
00:09:37,304 --> 00:09:41,126
this demo I created a script which will

137
00:09:41,148 --> 00:09:44,546
do a couple of things to make the flow of the demo tiny bit easier.

138
00:09:44,738 --> 00:09:47,626
What this does will make a couple of files, but in the meantime just going

139
00:09:47,648 --> 00:09:52,746
to download the file were to this repository and

140
00:09:52,768 --> 00:09:56,186
the repository is simple, is a node JS application. All I did

141
00:09:56,208 --> 00:10:00,486
was added the demo bash

142
00:10:00,518 --> 00:10:03,246
script. I'm going to run the script at the moment. What it will do will

143
00:10:03,268 --> 00:10:06,730
create a few files for me in this repository, in this repo,

144
00:10:06,890 --> 00:10:10,538
so that I can make my work a little easier. A docker ignore

145
00:10:10,554 --> 00:10:14,450
file docker file a build script, a customized script

146
00:10:15,750 --> 00:10:17,220
just to save time.

147
00:10:28,210 --> 00:10:32,018
Standard default, not a JS application which will create a static website.

148
00:10:32,104 --> 00:10:35,566
So I'm going to run my build script which will build a docker

149
00:10:35,598 --> 00:10:39,426
container for me. Also in the interest of

150
00:10:39,448 --> 00:10:45,174
saving time, this build script is going to go and build

151
00:10:45,212 --> 00:10:48,786
my container locally, but also above and beyond that. It's going to push

152
00:10:48,818 --> 00:10:53,030
it to an ECR private repository which I've already configured

153
00:10:53,850 --> 00:10:57,674
with my account. So I'll be able to use that same

154
00:10:57,712 --> 00:11:01,622
docker image further along the way. It's going to also add two tags

155
00:11:01,766 --> 00:11:05,066
to the same image as well, one with

156
00:11:05,088 --> 00:11:08,938
latest and one with a timestamp based on the

157
00:11:08,944 --> 00:11:12,446
amount of the specific date and time that I'm working on. Takes a

158
00:11:12,468 --> 00:11:27,828
couple of seconds for this to work completely

159
00:11:27,914 --> 00:11:31,952
building the image. Now it's pushing, as we say to my repository in my AWS

160
00:11:32,016 --> 00:11:36,036
account because I've already pre populated the image,

161
00:11:36,068 --> 00:11:38,776
or at least part of it with of the image into my repo is going

162
00:11:38,798 --> 00:11:47,580
a little bit quicker. Some of the layers are already there and

163
00:11:47,650 --> 00:11:54,764
it pushes the second one of the same with a different tag does

164
00:11:54,802 --> 00:11:59,564
it a very quick push and

165
00:11:59,602 --> 00:12:03,084
my image is roundy is ready. I'm going to run this locally on my machine

166
00:12:03,132 --> 00:12:05,696
because I want to see how this actually looks? So I'll run it with a

167
00:12:05,718 --> 00:12:09,364
port 3000, open up my own browser and

168
00:12:09,402 --> 00:12:12,468
look at localhost 3000 to see exactly what this looked like. So,

169
00:12:12,554 --> 00:12:17,652
boilerplate website with some kind of design.

170
00:12:17,786 --> 00:12:21,096
It has a video file and some animations going

171
00:12:21,118 --> 00:12:25,016
on in between. Looks pretty professional. Everything which

172
00:12:25,038 --> 00:12:28,616
was done with the default template was the name of Elementor, was the name

173
00:12:28,638 --> 00:12:33,656
of this website, and it

174
00:12:33,678 --> 00:12:36,236
looks like a good base which I can start upon, but I want to make

175
00:12:36,258 --> 00:12:40,344
some changes because it has to be suitable

176
00:12:40,392 --> 00:12:43,150
for any company, of course, for my website, for my company.

177
00:12:45,600 --> 00:12:49,232
So builds a script which will go

178
00:12:49,286 --> 00:12:54,690
in and modify this boilerplate website

179
00:12:55,300 --> 00:12:58,532
with a number of customizations. Mostly in this case

180
00:12:58,586 --> 00:13:02,064
it's going to be replacing

181
00:13:02,112 --> 00:13:05,684
anywhere where it says Elementor, almost anywhere where it says

182
00:13:05,722 --> 00:13:09,092
elementor into any company you can see.

183
00:13:09,146 --> 00:13:12,036
Made a number of changes in my repo,

184
00:13:12,228 --> 00:13:15,752
in my files, and I'm going to build

185
00:13:15,806 --> 00:13:20,090
a new container based on these changes. So it goes through the

186
00:13:20,780 --> 00:13:24,116
process again using of course docker

187
00:13:24,148 --> 00:13:27,230
caching. It should be a little bit quicker the second time when I'm doing it.

188
00:14:02,870 --> 00:14:06,862
Once the image is built again, push it to my ECR repository

189
00:14:06,926 --> 00:14:10,278
again with minimal changes. Most of the layers are already there so it should be

190
00:14:10,284 --> 00:14:13,506
pretty quick. And the second push is just to add a new tag

191
00:14:13,538 --> 00:14:14,950
which will be even quicker.

192
00:14:37,360 --> 00:14:40,736
And Alice says okay, I want to just see exactly what it looks like and

193
00:14:40,758 --> 00:14:44,924
see if my changes were all right. And aws we had originally the previous

194
00:14:44,972 --> 00:14:48,240
version of the website with the video animation.

195
00:14:48,660 --> 00:14:52,276
And after refreshing you can see these things have changed. Any company has

196
00:14:52,298 --> 00:14:55,760
been replaced, has replaced all the text were it's at elementor,

197
00:14:55,920 --> 00:14:59,220
that video is no longer there. All the customizations I made

198
00:14:59,290 --> 00:15:02,344
any company is more looking something which is more

199
00:15:02,382 --> 00:15:05,816
suitable for my personal website and

200
00:15:05,838 --> 00:15:08,184
the website for the company. So it looks there are a couple of things which

201
00:15:08,222 --> 00:15:11,876
didn't replace properly

202
00:15:11,908 --> 00:15:15,864
because they're graphic elements, which of course Alice

203
00:15:15,912 --> 00:15:19,356
would be able to do properly when she works in more detail on making the

204
00:15:19,378 --> 00:15:22,588
website 100% presentable for the rest of the

205
00:15:22,594 --> 00:15:26,792
world. So Alice has her container

206
00:15:26,856 --> 00:15:30,032
which is ran locally on a machine, but now she wants to take that same

207
00:15:30,086 --> 00:15:33,296
container, same application she wrote, and push it into

208
00:15:33,318 --> 00:15:36,528
apronaut so it will be accessible from the rest of the world. So let's go

209
00:15:36,534 --> 00:15:40,132
to the apparatus console were I already have an any company web

210
00:15:40,186 --> 00:15:44,128
service which has been running built in the background which is watching a git repo

211
00:15:44,304 --> 00:15:47,412
or an ECR repository in this case to make

212
00:15:47,466 --> 00:15:51,584
changes based on every new push so as soon as I pushed

213
00:15:51,712 --> 00:15:55,016
my previous versions and I was pushing them, up until now it has been

214
00:15:55,038 --> 00:15:58,584
making those changes and deploying a new version for my

215
00:15:58,622 --> 00:16:01,848
service. But let's go through how we would create a new service.

216
00:16:02,014 --> 00:16:05,084
So as we said, you can have either a container registry AWS,

217
00:16:05,122 --> 00:16:08,712
your source, or a source code repository,

218
00:16:08,776 --> 00:16:11,880
for example GitHub, where you would create a connection to GitHub.

219
00:16:11,960 --> 00:16:15,692
Choose your GitHub

220
00:16:15,756 --> 00:16:18,928
repo, which branch you would like to work off. In this case, I'm going

221
00:16:18,934 --> 00:16:22,400
to be working off the option of a container registry

222
00:16:28,950 --> 00:16:32,606
where I can choose either ECR public or ECR private.

223
00:16:32,638 --> 00:16:36,054
I'm going to choose my repository where I have this container called

224
00:16:36,092 --> 00:16:40,054
Summit demo with a tag which I've tagged it, and every time this tag is

225
00:16:40,092 --> 00:16:43,686
updated, a new build will occur. I have the

226
00:16:43,788 --> 00:16:47,210
options of choosing how I would like my deployments to work,

227
00:16:47,280 --> 00:16:51,126
either on a manual. In other words, I would initiate these deployments

228
00:16:51,158 --> 00:16:54,746
in a manual fashion or automatically. If there would

229
00:16:54,768 --> 00:16:58,986
be a new push to the GitHub repository or the ECR

230
00:16:59,018 --> 00:17:02,398
repo a new version, then a new build

231
00:17:02,484 --> 00:17:06,480
will kick off and start. You have to give the

232
00:17:06,850 --> 00:17:10,282
service a iem role so it will allow it access

233
00:17:10,356 --> 00:17:14,034
to pull the ECR, the docker image from the ECR. And here

234
00:17:14,072 --> 00:17:17,570
we configure the service and give a number of different options as well.

235
00:17:17,720 --> 00:17:21,254
Choose the amount of cpu and memory that I'm giving

236
00:17:21,292 --> 00:17:24,726
the service, which port it's listening on, and how I

237
00:17:24,748 --> 00:17:28,486
configure. Auto scaling auto scaling is done by the

238
00:17:28,508 --> 00:17:31,990
user configuring how many requests their application

239
00:17:32,140 --> 00:17:35,594
will be able to handle, and as soon as it goes over the number

240
00:17:35,632 --> 00:17:39,670
of requests, concurrent requests to that Docker container,

241
00:17:39,750 --> 00:17:42,534
it will scale up and bring up a new node.

242
00:17:42,662 --> 00:17:47,562
When the number of requests diminishes,

243
00:17:47,626 --> 00:17:50,974
then it will go back down and scale those

244
00:17:51,012 --> 00:17:54,334
containers down. You can create your own custom configuration. In this case,

245
00:17:54,372 --> 00:17:56,030
I'm going to use the defaults.

246
00:17:59,190 --> 00:18:02,738
I can continue a health check to know that my application is up and

247
00:18:02,744 --> 00:18:06,580
running properly. I also can

248
00:18:07,910 --> 00:18:11,540
add an IEM role to the container itself. If I wanted to

249
00:18:11,990 --> 00:18:16,230
perform actions on my behalf into the APIs of AWS,

250
00:18:16,650 --> 00:18:19,778
I can configure what kind of encryption I would like if it's

251
00:18:19,794 --> 00:18:23,062
an AWS owned key, or my own key if I would like to provide

252
00:18:23,116 --> 00:18:26,874
it as well. The next option is networking. If I would

253
00:18:26,912 --> 00:18:31,494
like this application to have access to resources

254
00:18:31,542 --> 00:18:34,998
in my own private VPC, I would choose custom VPC.

255
00:18:35,174 --> 00:18:38,442
If I only want access or access into

256
00:18:38,496 --> 00:18:41,918
the container and without having that container or the application

257
00:18:42,004 --> 00:18:45,774
have access into my own resources, I would choose public for this case.

258
00:18:45,812 --> 00:18:50,354
For the website we are going to choose public, click next and

259
00:18:50,392 --> 00:18:56,614
deploy as

260
00:18:56,652 --> 00:19:00,546
we said console that you all know and recognize

261
00:19:00,658 --> 00:19:04,310
different tabs. For example, the activity tab will give me what's happening with my service

262
00:19:04,380 --> 00:19:08,026
and all the different actions which are currently occurring or have occurred in the

263
00:19:08,048 --> 00:19:11,546
past. The metrics will give me the service metrics of the container, how it's

264
00:19:11,568 --> 00:19:14,826
performing. This will give me a summary of my configuration and

265
00:19:14,848 --> 00:19:18,346
I can change it. And over here I have the option of configuring

266
00:19:18,378 --> 00:19:21,598
a custom domain. By default every service

267
00:19:21,684 --> 00:19:27,006
is provisioned with a region awsaprunner.com

268
00:19:27,188 --> 00:19:30,494
fqdn but of course for

269
00:19:30,532 --> 00:19:34,606
each of tour customers custom applications they would like to have a more recognizable

270
00:19:34,638 --> 00:19:38,082
and usable name. So you can link a route 53

271
00:19:38,136 --> 00:19:42,226
hosted zone to the service and create a AE

272
00:19:42,258 --> 00:19:46,610
record or a CNamE record that will be able to attach

273
00:19:46,690 --> 00:19:50,438
and link to this apprunner service. So your users and

274
00:19:50,444 --> 00:19:53,900
your clients will be able to access through a

275
00:19:55,390 --> 00:19:58,506
generic or your own private FQDN instead of

276
00:19:58,528 --> 00:20:02,806
having coming through the apprunner domain

277
00:20:02,838 --> 00:20:05,978
names in FQDNs. If we quickly

278
00:20:06,064 --> 00:20:09,054
jump into the previous one, you'll see this is what the event log looks like.

279
00:20:09,092 --> 00:20:15,774
It gives me a status of how what everything is happening when

280
00:20:15,812 --> 00:20:19,914
we deploy applications in apprunner and update those applications.

281
00:20:19,962 --> 00:20:23,282
There's a pipeline in the background which deploys a new version in a blue green

282
00:20:23,336 --> 00:20:26,846
deployment so you do not suffer

283
00:20:26,878 --> 00:20:30,226
any downtime when you update your applications and only when your

284
00:20:30,248 --> 00:20:34,146
application has been tested and verified based on your health checks

285
00:20:34,258 --> 00:20:38,658
that everything is up and running, it will switch

286
00:20:38,754 --> 00:20:42,294
to a new version. That is why

287
00:20:42,412 --> 00:20:46,326
you can see that in my case I'm still using a previous version

288
00:20:46,358 --> 00:20:50,102
of my application which hasn't got the updates

289
00:20:50,166 --> 00:20:53,866
for any company in the customization because the

290
00:20:53,888 --> 00:20:57,658
process is not completed of deploying a new version yet and therefore I'm

291
00:20:57,674 --> 00:21:00,734
still running my old version where my

292
00:21:00,772 --> 00:21:05,102
first push of my docker container when I started this demo only

293
00:21:05,156 --> 00:21:09,386
had these original or the same default

294
00:21:09,418 --> 00:21:10,900
template which I was using.

295
00:21:12,950 --> 00:21:16,034
That's how you use apprunner. Thank you very much for watching this

296
00:21:16,072 --> 00:21:19,342
demo and let's go back to the rest of the presentation.

297
00:21:19,486 --> 00:21:22,910
So let's continue with any company's journey. They're growing at

298
00:21:22,920 --> 00:21:26,454
an insane rate and six months have gone by and

299
00:21:26,492 --> 00:21:30,754
of course AWS all founders do they have another meeting

300
00:21:30,802 --> 00:21:33,960
to understand were they want to go with the next six to 18 months

301
00:21:34,970 --> 00:21:38,906
and they came up with these three bullet points that

302
00:21:38,928 --> 00:21:42,470
they need to build a product as fast as possible with minimal maintenance.

303
00:21:42,630 --> 00:21:45,818
They need to bring revenue into the company and of

304
00:21:45,824 --> 00:21:49,774
course they need to gain market share, which means customers. So over

305
00:21:49,812 --> 00:21:53,182
the past six months, the company of course has grown. Instead of the three people

306
00:21:53,236 --> 00:21:56,586
which were doing everything from running around finding

307
00:21:56,618 --> 00:22:00,750
customers to developing a website, they have expanded.

308
00:22:00,910 --> 00:22:04,290
So instead of having one person doing everything,

309
00:22:04,360 --> 00:22:08,526
they now have teams underneath. And most of the employees

310
00:22:08,558 --> 00:22:11,826
are now working on creating a product under Alice, who is

311
00:22:11,848 --> 00:22:15,320
the vp of engineering, who still likes to code, of course, by the way.

312
00:22:15,930 --> 00:22:18,838
So they said, alice, can you build us a product?

313
00:22:18,924 --> 00:22:22,706
That's of course what she was hired for. But the requirements stayed

314
00:22:22,738 --> 00:22:26,486
pretty much the same, except for two things which were added to

315
00:22:26,508 --> 00:22:29,786
the end. The product has to be of course secure because they

316
00:22:29,808 --> 00:22:33,382
don't want to lose any customers because of a security breach or information leaking

317
00:22:33,446 --> 00:22:36,858
or landing up on the front page of the New York Times by any chance

318
00:22:37,024 --> 00:22:40,582
because they didn't guard their customer PII.

319
00:22:40,726 --> 00:22:43,406
And the second thing, of course, it's not only going to be a website that

320
00:22:43,428 --> 00:22:47,502
they built up until now using apprunner, because there is going to be information and

321
00:22:47,556 --> 00:22:50,698
data and things which they need to store and they need to be

322
00:22:50,724 --> 00:22:54,462
stored in place where that can be accessed on a regular basis,

323
00:22:54,526 --> 00:22:58,034
can be used in different ways. So these two different extra

324
00:22:58,072 --> 00:23:01,646
points on the requirements were added and let's

325
00:23:01,678 --> 00:23:05,506
see what Alice did. So Alice

326
00:23:05,538 --> 00:23:09,334
reached out to her account team, spoke to the solutions architect in AWS, and asked,

327
00:23:09,372 --> 00:23:12,662
what can we use, which is similar to the way we're working

328
00:23:12,716 --> 00:23:16,246
now. And after looking through a number of services, they decided to

329
00:23:16,268 --> 00:23:20,106
work on ECS. Amazon Elastic container Services

330
00:23:20,288 --> 00:23:23,926
what is ECS? ECS is a fully managed

331
00:23:23,958 --> 00:23:27,378
control plane and AWS. Fargate is a fully managed data plane.

332
00:23:27,414 --> 00:23:30,574
That means it is the compute that runs the containers that you

333
00:23:30,612 --> 00:23:32,670
provide for your applications.

334
00:23:33,410 --> 00:23:37,178
Customers don't need to maintain any Amis or container host clusters.

335
00:23:37,274 --> 00:23:40,866
It's a big and huge operational savings. Because everything is

336
00:23:40,888 --> 00:23:44,814
managed by AWS. It's easy to scale to ensure better utilization

337
00:23:44,862 --> 00:23:48,786
and cost savings. And of course even further and above and

338
00:23:48,808 --> 00:23:52,550
beyond that, you can use Fargate spot and savings plans to provide

339
00:23:52,620 --> 00:23:56,498
you further saving options in your account and your applications.

340
00:23:56,674 --> 00:24:00,802
The core concepts of ecs are really simple, but really, really powerful.

341
00:24:00,946 --> 00:24:03,974
A task consists of one or more containers. This is your

342
00:24:04,012 --> 00:24:07,226
application that you're running. You can run these tasks on

343
00:24:07,248 --> 00:24:10,570
an EC two instance or a Fargate instance.

344
00:24:10,910 --> 00:24:14,486
And you can also use, of course in order to save money. The spot variants

345
00:24:14,518 --> 00:24:17,230
of those either EC two spot or Fargate spot.

346
00:24:17,810 --> 00:24:21,246
Multiple identical tasks create a service

347
00:24:21,428 --> 00:24:25,546
tasks in a service can be connected to a load balancer, which is automatically

348
00:24:25,578 --> 00:24:28,862
done by ecs and groups of services and

349
00:24:28,916 --> 00:24:32,110
tasks are located in one single cluster.

350
00:24:32,630 --> 00:24:36,526
Customers can create many clusters mapped to teams and workloads.

351
00:24:36,558 --> 00:24:39,410
A cluster is simply a logical grouping.

352
00:24:40,150 --> 00:24:43,202
Any company is leveraging the newly released VPC support

353
00:24:43,256 --> 00:24:46,754
for Avroner to access resources that reside in their VPC.

354
00:24:46,882 --> 00:24:50,534
This ensures that the private information in their databases is

355
00:24:50,572 --> 00:24:53,766
not accessible from the public Internet, which meets the requirement of

356
00:24:53,788 --> 00:24:57,446
security. How is this connected to ECS? Besides the fact

357
00:24:57,468 --> 00:25:00,826
that appraunner uses AWS Fargate for running the

358
00:25:00,848 --> 00:25:04,394
tasks in the background, these other background tasks that they will be starting will be

359
00:25:04,432 --> 00:25:07,934
pulling the information that is collected through a front end application

360
00:25:08,132 --> 00:25:11,802
that is running on apprunner, pushed into an RDS database,

361
00:25:11,946 --> 00:25:15,246
and based on which is stored inside that

362
00:25:15,268 --> 00:25:19,406
database, they'll be able to provide business insight into their customers and

363
00:25:19,428 --> 00:25:22,786
the way they're using their products. So what did we see here

364
00:25:22,808 --> 00:25:25,954
today? We saw an example of a company by the name of any company was

365
00:25:25,992 --> 00:25:29,902
actually not really real, but could be your company or mine.

366
00:25:30,046 --> 00:25:33,806
Makes no difference. They managed to deploy

367
00:25:33,838 --> 00:25:36,726
their resources, meet the requirements in a very,

368
00:25:36,748 --> 00:25:40,514
very simple and easy way, the way they used to working in the AWS

369
00:25:40,562 --> 00:25:43,698
cloud and above and beyond that allowed them to grow further

370
00:25:43,794 --> 00:25:47,162
as their business grew, as they collected more customers and more market

371
00:25:47,216 --> 00:25:51,014
share. The second thing we touched today was serverless containers,

372
00:25:51,062 --> 00:25:54,906
which we by that I mean Fargate and apprunner, where you provide the

373
00:25:54,928 --> 00:25:58,714
container image and the configuration that goes along

374
00:25:58,752 --> 00:26:02,730
with it. And you do not need to manage any of the underlying infrastructure underneath

375
00:26:02,810 --> 00:26:06,654
in order to run the container. All of that is managed and taken care

376
00:26:06,692 --> 00:26:10,014
of by AWS in the cloud. So before

377
00:26:10,052 --> 00:26:12,754
I leave you to go into your next session, I want you to put here

378
00:26:12,792 --> 00:26:16,286
two links to different resources that you can dive

379
00:26:16,318 --> 00:26:19,406
deep into. I kind of geek out on the details

380
00:26:19,438 --> 00:26:22,734
of how things actually work and these two blog

381
00:26:22,782 --> 00:26:25,874
posts will be able to give you a lot more information, a lot more insight

382
00:26:25,922 --> 00:26:30,258
into how both Fargate and how apprunner works underneath,

383
00:26:30,354 --> 00:26:33,846
and how they can bring benefit to you. Thank you very much for your

384
00:26:33,868 --> 00:26:37,174
time. I hope you enjoyed the session and hope you learned something new about running

385
00:26:37,292 --> 00:26:40,406
containers on AWS and how you can benefit from the services which

386
00:26:40,428 --> 00:26:43,538
we have offering you today. My name is Mesaido.

387
00:26:43,554 --> 00:26:46,574
Casing. My emails here are up on the screen. The easiest way to get hold

388
00:26:46,612 --> 00:26:49,934
of me is to ping me on Twitter. My dms are open.

389
00:26:50,132 --> 00:26:53,920
Anything you would like to discuss. I'm always happy to hear from our customers.

390
00:26:54,290 --> 00:26:56,140
Thank you very much for your time and have a great day.

