1
00:00:17,930 --> 00:00:21,514
Hey, what's up? I'm Eva Tar. I'm a front engineer at Facebook

2
00:00:21,562 --> 00:00:25,126
here in Tel Aviv, and I'm here to talk to you about Vest, which is

3
00:00:25,148 --> 00:00:27,894
an open source framework I'm very excited about.

4
00:00:28,092 --> 00:00:31,878
But before I begin, I just have to say, Vest is not a Facebook project

5
00:00:31,964 --> 00:00:35,019
and it is not affiliate with Facebook. Just have to get this out of the

6
00:00:35,519 --> 00:00:39,286
way. Vest is short form validations tests. So as you

7
00:00:39,308 --> 00:00:42,442
can probably guess, Vest is a library intended for use with

8
00:00:42,496 --> 00:00:45,366
form or input validations in JS apps.

9
00:00:45,478 --> 00:00:49,242
And if you've done even a little form validations in the past couple of years,

10
00:00:49,376 --> 00:00:52,726
you're probably familiar with the amount of form

11
00:00:52,768 --> 00:00:56,266
validation libraries that occupy this space, and it's

12
00:00:56,298 --> 00:00:59,994
only logical to ask, why create a new one? And that's a very valid

13
00:01:00,042 --> 00:01:03,742
point that I usually tend to agree with. But in this case,

14
00:01:03,796 --> 00:01:07,780
I think we can only answer this question if we actually cover the problem

15
00:01:08,470 --> 00:01:12,098
and describe the way form validations works today.

16
00:01:12,264 --> 00:01:16,006
So in a typical scenario, what we usually have is a user that goes

17
00:01:16,028 --> 00:01:20,146
to a website, they face a form, let's say user

18
00:01:20,258 --> 00:01:24,200
login form, and they type inside an input box,

19
00:01:24,570 --> 00:01:28,438
and then event handler gets triggered. This event handler usually

20
00:01:28,524 --> 00:01:32,294
calls a function that we wrote or some third party library

21
00:01:32,422 --> 00:01:36,522
that contains a validation code. But this function usually takes

22
00:01:36,576 --> 00:01:39,914
care of the validation. It decides whether the inserted input is

23
00:01:39,952 --> 00:01:43,598
valid or invalid, and then it's up to us to decide how

24
00:01:43,604 --> 00:01:46,670
to show that to the user with a red x or a green checkmark or

25
00:01:46,740 --> 00:01:50,958
whatever. Now, this usually works

26
00:01:51,124 --> 00:01:54,818
if we only have only a limited amount of fields in our form,

27
00:01:54,904 --> 00:01:58,434
or if we do not plan on expanding and adding more features to the form

28
00:01:58,472 --> 00:02:01,300
in the future. Because from my experience,

29
00:02:02,230 --> 00:02:05,874
as long as our feature grows and the more

30
00:02:05,912 --> 00:02:09,110
complex our feature gets, the more our form

31
00:02:09,180 --> 00:02:13,042
gets more complicated and the validation code gets more complicated,

32
00:02:13,106 --> 00:02:16,326
because what we usually tend to do without any specific

33
00:02:16,428 --> 00:02:20,454
structure for form validations is put the validation code inside our

34
00:02:20,492 --> 00:02:23,958
change handler, or inside our component, or inside our feature,

35
00:02:24,134 --> 00:02:27,990
and then we do not have a way for describing it separately.

36
00:02:28,150 --> 00:02:31,574
It becomes a part of a spaghetti code that's called our feature,

37
00:02:31,702 --> 00:02:34,810
and we have no easy way to test the validation code,

38
00:02:34,960 --> 00:02:38,606
we do not have an easy way to maintain it, and it's very hard to

39
00:02:38,628 --> 00:02:42,046
read, very hard to write. And if we want to do,

40
00:02:42,148 --> 00:02:45,938
to create a refactor in our feature, we have to basically

41
00:02:46,024 --> 00:02:49,166
scrap our validations away and rewrite them from scratch.

42
00:02:49,358 --> 00:02:52,766
And this is what Vesp tries to solve, and this is what Vesp

43
00:02:52,798 --> 00:02:56,654
comes to handle. Vesp tries to come and suggest a structure

44
00:02:56,702 --> 00:03:00,086
for formulation that's also separate from a feature code.

45
00:03:00,188 --> 00:03:04,290
And the way Vesp does it is very easily by borrowing

46
00:03:04,370 --> 00:03:08,454
the syntax and style of unit testing frameworks such as mocha or

47
00:03:08,492 --> 00:03:12,234
jest, and implementing it in the world

48
00:03:12,272 --> 00:03:15,990
of form validations. So basically you describe a form validations suite

49
00:03:16,070 --> 00:03:19,434
that contains each and every test or each and every field in your

50
00:03:19,472 --> 00:03:22,970
validation suite, and then it can easily separate it

51
00:03:23,040 --> 00:03:26,270
from your feature code. It has a very narrow point of contact

52
00:03:26,340 --> 00:03:30,142
with your code, and it supports most of the features you would expect from a

53
00:03:30,196 --> 00:03:33,614
validation library. And actually I think a little more now,

54
00:03:33,652 --> 00:03:36,698
I could talk about vest all day, but I think it would be best by

55
00:03:36,724 --> 00:03:40,226
showing to you through code. So what I want to do now is show you

56
00:03:40,248 --> 00:03:44,014
how easy it is to integrate vest into an existing form and an existing

57
00:03:44,062 --> 00:03:46,770
feature without all the hassle.

58
00:03:47,110 --> 00:03:50,534
And what we're going to do is take this form, which is a react form,

59
00:03:50,572 --> 00:03:54,210
and it doesn't matter at all that it's a react form. It could be angular

60
00:03:54,290 --> 00:03:57,400
or view, or even without a framework at all,

61
00:03:57,930 --> 00:04:01,622
and add some validations to it from scratch. So it doesn't have any validations

62
00:04:01,686 --> 00:04:05,434
at the moment. We're going to install vest to

63
00:04:05,472 --> 00:04:09,306
our sandbox and create a new

64
00:04:09,328 --> 00:04:11,630
file, and I'll call it validate js.

65
00:04:12,850 --> 00:04:16,734
The name doesn't matter. I'll import vest from

66
00:04:16,852 --> 00:04:20,394
vest, and I'll create my validation suite and export

67
00:04:20,442 --> 00:04:24,650
it, because we have to run it from our form. So export

68
00:04:24,730 --> 00:04:28,082
default vest create.

69
00:04:28,136 --> 00:04:32,866
That's how we create a new validation suite, and we'll name it user form.

70
00:04:33,048 --> 00:04:36,526
The name doesn't really matter. And I'll define

71
00:04:36,558 --> 00:04:39,434
my validation suite body, and we get form validations,

72
00:04:39,502 --> 00:04:42,966
the data to validate from our form through the arguments. So what I

73
00:04:42,988 --> 00:04:46,086
do here is data, and I'll initialize it with

74
00:04:46,108 --> 00:04:49,500
an empty object in case it doesn't get sent.

75
00:04:50,190 --> 00:04:54,198
Now we have to write our test for form validations, just like in unit

76
00:04:54,214 --> 00:04:57,366
test, we have a test function we'll

77
00:04:57,398 --> 00:05:01,178
import test, and we'll also import enforce, which is pretty much like expect.

78
00:05:01,264 --> 00:05:04,330
This is our assertion function enforce.

79
00:05:04,830 --> 00:05:08,138
And I will do a dummy test just to see this stuff works. So I'll

80
00:05:08,154 --> 00:05:12,090
do test, and the first argument is the name of the field we're validating.

81
00:05:12,170 --> 00:05:16,254
So I'll do username. And now the second

82
00:05:16,292 --> 00:05:19,682
argument is not a function like in unitest, but instead it's the

83
00:05:19,736 --> 00:05:23,342
string of the message that we want the user to see in case of validation

84
00:05:23,406 --> 00:05:26,806
failure. So here it's going to be like for example,

85
00:05:26,988 --> 00:05:30,246
username is required. So username is

86
00:05:30,348 --> 00:05:33,606
required. Okay. And in

87
00:05:33,628 --> 00:05:36,822
the test body I'm going to do enforce data

88
00:05:36,956 --> 00:05:40,358
username. So enforce username

89
00:05:40,534 --> 00:05:42,410
is not empty.

90
00:05:43,630 --> 00:05:47,386
So this is our first test ever. I'm going to go to the form

91
00:05:47,488 --> 00:05:50,446
and I'm going to connect it. So the first thing I'm going to do is

92
00:05:50,468 --> 00:05:53,946
I'll import my validation test, my validation suite,

93
00:05:53,978 --> 00:05:58,810
sorry, import v form validations valid.

94
00:05:58,890 --> 00:06:02,926
Oh, I called valid. Okay, I'll rename the

95
00:06:02,948 --> 00:06:08,590
file valid.

96
00:06:11,510 --> 00:06:15,022
Okay, I'll import v from validate.

97
00:06:15,086 --> 00:06:18,582
And what v gives us is basically a function that when we

98
00:06:18,636 --> 00:06:22,626
run it, our validation suite will run. So I'll

99
00:06:22,658 --> 00:06:25,606
use it inside our change handler. And what we have in the change handler is

100
00:06:25,628 --> 00:06:29,206
basically a state setter and it sets the states to

101
00:06:29,228 --> 00:06:32,970
the key value pairs of our fields

102
00:06:33,710 --> 00:06:37,462
in our form. So it's going to be for example current field, so it's username

103
00:06:37,526 --> 00:06:40,714
and the value we put inside. So that's how our state looks.

104
00:06:40,832 --> 00:06:44,080
I'll do v and I'll pass next state to it as well.

105
00:06:46,050 --> 00:06:49,758
Now if we run it, nothing will happen even though the validation will run.

106
00:06:49,844 --> 00:06:53,426
What we have to do now is display the validation result. So what

107
00:06:53,448 --> 00:06:57,186
we can do here is constraint equals v

108
00:06:57,368 --> 00:07:01,154
get and this is how we get the validation result from that v

109
00:07:01,192 --> 00:07:05,426
object. So we take the result and

110
00:07:05,448 --> 00:07:08,594
inside our input component and it's a simple react component,

111
00:07:08,642 --> 00:07:12,402
it has nothing to do with best. I already added a validation

112
00:07:12,466 --> 00:07:16,386
messages prop that takes an array of strings and displays

113
00:07:16,418 --> 00:07:19,618
the first one as the validation message. So it's

114
00:07:19,634 --> 00:07:23,126
going to look like form validations messages and it's

115
00:07:23,158 --> 00:07:27,260
going to take an array of strings and this is the error we're seeing here.

116
00:07:27,630 --> 00:07:31,194
So what I'm going to do now is instead of passing

117
00:07:31,242 --> 00:07:35,070
a hard coded array, I'm going to res get

118
00:07:35,140 --> 00:07:38,414
errors, username, the name code

119
00:07:38,452 --> 00:07:42,174
we're validating. And what we're going to see now is that

120
00:07:42,212 --> 00:07:46,222
when I remove the stuff that's written here, we're going to see username is required

121
00:07:46,286 --> 00:07:50,274
because that's what we stated here. Now it's not

122
00:07:50,312 --> 00:07:54,942
in red and I already have a class name in that input for

123
00:07:55,016 --> 00:07:58,502
validation errors. So it's going to be like this.

124
00:07:58,636 --> 00:08:02,418
And we can do this automatically with the best helper utility.

125
00:08:02,594 --> 00:08:06,150
We can import class names from best class names,

126
00:08:07,050 --> 00:08:11,000
import class names from best

127
00:08:11,710 --> 00:08:15,926
class names and what it does it allowing us to specify which class names

128
00:08:15,958 --> 00:08:19,702
we want to show in case of form validations success or failure.

129
00:08:19,766 --> 00:08:22,800
So in our case let's do it like this,

130
00:08:23,170 --> 00:08:26,574
it returns us a function. So we'll name

131
00:08:26,612 --> 00:08:30,382
this function Cn. For example, const Cn equals class

132
00:08:30,436 --> 00:08:33,630
names. It takes form validations result object so res

133
00:08:33,700 --> 00:08:37,278
as the first argument and an object of key value pairs with

134
00:08:37,284 --> 00:08:40,642
the names of the classes we want to show. So for example, in case the

135
00:08:40,696 --> 00:08:44,770
form is invalid, let's do error.

136
00:08:45,610 --> 00:08:49,014
Sorry. In case it's valid, let's do success. In case

137
00:08:49,052 --> 00:08:52,310
it's invalid, let's do error.

138
00:08:53,210 --> 00:08:57,190
And in case it's warning there is such a thing, let's do warning.

139
00:08:59,070 --> 00:09:02,474
Now we take this again and put it inside our

140
00:09:02,512 --> 00:09:06,694
input form and do class names.

141
00:09:06,822 --> 00:09:10,726
Class name, sorry. And do cn

142
00:09:10,838 --> 00:09:14,878
username. And what we'll see now is that it turns to green

143
00:09:14,964 --> 00:09:17,822
because it's successful. And if we remove everything from it,

144
00:09:17,876 --> 00:09:20,894
it's empty. So it's red. So this

145
00:09:20,932 --> 00:09:24,218
was easy. Let's copy it over to the rest of the fields

146
00:09:24,234 --> 00:09:28,190
in our form. So username

147
00:09:30,850 --> 00:09:34,174
password let's also do

148
00:09:34,212 --> 00:09:40,102
this for firm and

149
00:09:40,156 --> 00:09:43,814
in terms of service. I don't want to actually have

150
00:09:43,852 --> 00:09:48,506
a validation message because it already has some text. Let's just add

151
00:09:48,528 --> 00:09:53,370
the class name for the color. So let's do tos.

152
00:09:53,710 --> 00:09:58,006
Now let's quickly add some more validations for our username.

153
00:09:58,118 --> 00:10:04,350
So let's do username must

154
00:10:04,420 --> 00:10:07,470
be at least three characters.

155
00:10:08,370 --> 00:10:12,330
Okay, longer than or equals three.

156
00:10:12,500 --> 00:10:24,382
Now let's copy both these for password and

157
00:10:24,436 --> 00:10:28,366
password must be at least five characters. In this case let's

158
00:10:28,398 --> 00:10:31,794
do just longer than four. Okay,

159
00:10:31,912 --> 00:10:35,582
username a must be at least three characters. Password is required.

160
00:10:35,646 --> 00:10:38,482
Abcde. Okay, perfect.

161
00:10:38,616 --> 00:10:42,950
Now let's do confirm test confirm

162
00:10:47,850 --> 00:10:50,760
passwords do not match.

163
00:10:52,570 --> 00:10:56,090
Let's do enforce data confirm

164
00:10:57,790 --> 00:11:02,970
equals data password password

165
00:11:03,950 --> 00:11:06,570
now let's see. Abcde.

166
00:11:07,150 --> 00:11:07,900
Wait,

167
00:11:10,910 --> 00:11:14,054
data confirm data password.

168
00:11:14,182 --> 00:11:18,420
Why not? Oh, I have a typo. Here it

169
00:11:32,810 --> 00:11:37,430
now let's do the same for terms of service. Test tos.

170
00:11:38,490 --> 00:11:41,910
And as I said, we do not need a validation message here.

171
00:11:42,060 --> 00:11:45,990
Let's just do enforce data tos

172
00:11:47,390 --> 00:11:50,746
is truthy because it's a boolean value. In our

173
00:11:50,768 --> 00:11:53,802
case it's checkbox perfect.

174
00:11:53,936 --> 00:11:58,062
Now one thing I'm seeing in the confirmation box is

175
00:11:58,116 --> 00:12:02,202
that when I remove the password and then I remove the confirmation,

176
00:12:02,346 --> 00:12:05,854
it's green because they are equal, but they shouldn't be

177
00:12:05,892 --> 00:12:09,362
green I think because it's empty. So let's fix

178
00:12:09,416 --> 00:12:13,374
this if data password. So only if data password

179
00:12:13,422 --> 00:12:17,170
is present. Let's run the confirmation.

180
00:12:18,070 --> 00:12:21,886
So let's try this. Perfect. It's empty.

181
00:12:21,918 --> 00:12:25,474
Now it doesn't have any color on it so it's not getting validated

182
00:12:25,522 --> 00:12:29,160
at all if password is empty. But there is one more thing.

183
00:12:29,690 --> 00:12:33,560
I type inside username, for example, and all the others get lit up.

184
00:12:34,330 --> 00:12:37,642
We're basically validating all the fields, even though

185
00:12:37,696 --> 00:12:41,066
we're only touching one of them, which is not a great user experience in my

186
00:12:41,088 --> 00:12:45,382
opinion, because the user only touched the first one, it's obvious that the others

187
00:12:45,536 --> 00:12:48,938
won't be filled yet. So let's

188
00:12:49,114 --> 00:12:52,862
fix this. Let's do vest only,

189
00:12:52,996 --> 00:12:56,670
which gives us a way to only validate a specific

190
00:12:56,740 --> 00:13:00,386
field and which field we want to validate to

191
00:13:00,408 --> 00:13:03,746
validate the field that the user is currently touching. So what

192
00:13:03,768 --> 00:13:07,010
I want to do is get somehow the current

193
00:13:07,080 --> 00:13:10,546
field and pass it

194
00:13:10,568 --> 00:13:13,874
over to only. And here in our change handler,

195
00:13:13,922 --> 00:13:17,398
we actually do get the current field. And again,

196
00:13:17,484 --> 00:13:19,510
this is a simple react handler.

197
00:13:20,650 --> 00:13:24,922
I'm taking this and I'm passing it over to

198
00:13:24,976 --> 00:13:28,346
vest. And what I'm getting now is that only the field that

199
00:13:28,368 --> 00:13:33,500
I'm touching is getting validated. The rest aren't cool.

200
00:13:34,030 --> 00:13:37,114
Let's see now, this is

201
00:13:37,152 --> 00:13:40,894
kind of a weak password. Let's say we

202
00:13:40,932 --> 00:13:44,394
want to also suggest the user to add a number to make the password

203
00:13:44,442 --> 00:13:48,166
stronger. We do not want to fail the validation on this condition,

204
00:13:48,298 --> 00:13:51,586
but we want to suggest it. How would you do that?

205
00:13:51,768 --> 00:13:55,566
With vest you have the worm optionality, so it's

206
00:13:55,598 --> 00:13:57,060
going to look like this.

207
00:13:59,270 --> 00:14:03,320
Test password again

208
00:14:03,690 --> 00:14:07,542
and password is

209
00:14:07,596 --> 00:14:10,840
Wic, maybe add a number.

210
00:14:12,330 --> 00:14:16,166
Okay, and now let's do enforce

211
00:14:16,358 --> 00:14:19,830
data password matches

212
00:14:19,990 --> 00:14:24,794
and then we can pass a regex. So let's do a

213
00:14:24,832 --> 00:14:28,314
simple number regex. And what we're going

214
00:14:28,352 --> 00:14:31,914
to see here is that we're getting that validation

215
00:14:31,962 --> 00:14:34,522
message. But I cant it to be orange. I want it to be a warning.

216
00:14:34,586 --> 00:14:38,066
I don't want it to fail form validations. So what I

217
00:14:38,088 --> 00:14:41,602
can do here is tell vest to put it in a different basket using

218
00:14:41,656 --> 00:14:45,090
vest warn. So vest warn.

219
00:14:47,350 --> 00:14:51,140
Vest warn. And if I try it again,

220
00:14:52,150 --> 00:14:55,846
we orange. We're not seeing form validations message because back in

221
00:14:55,868 --> 00:14:59,446
the form we asked only for the validation errors here. If you

222
00:14:59,468 --> 00:15:03,206
see here get errors. So let's also put the warnings

223
00:15:03,238 --> 00:15:07,258
inside. So it takes an array. So we can

224
00:15:07,344 --> 00:15:10,746
either pass the errors array or the

225
00:15:10,768 --> 00:15:14,140
warnings of array. In this case I'll just spread both those

226
00:15:15,790 --> 00:15:19,280
for a single array and we're getting it perfect.

227
00:15:19,890 --> 00:15:23,006
Now what about async validations? For example, what if we

228
00:15:23,028 --> 00:15:26,702
wanted to test that the username is already present or already taken?

229
00:15:26,756 --> 00:15:29,826
Sorry, we wanted to go to the server and see if

230
00:15:29,848 --> 00:15:33,902
a user is already taken. This supports async validations.

231
00:15:34,046 --> 00:15:38,420
In our case I already have a server call. It's a dummy server call import

232
00:15:39,270 --> 00:15:43,442
from API

233
00:15:43,586 --> 00:15:47,238
I have does user exist? It's a

234
00:15:47,244 --> 00:15:50,870
mock server call. And what it does is basically

235
00:15:51,020 --> 00:15:54,998
returns a promise that rejects when the user exists and

236
00:15:55,084 --> 00:15:58,966
it resolves when the user does not exist. So what I'm

237
00:15:58,998 --> 00:16:03,130
going to do here is write a new test for

238
00:16:03,200 --> 00:16:04,460
username. Again,

239
00:16:05,970 --> 00:16:09,854
username already taken. And what

240
00:16:09,892 --> 00:16:13,546
this does is basically similar to how does user exist. It fails

241
00:16:13,578 --> 00:16:17,950
in async validation if a promise returned rejects.

242
00:16:18,550 --> 00:16:22,926
So if I have a promise here and it rejects, the validation will fail.

243
00:16:23,118 --> 00:16:25,090
So data username.

244
00:16:27,190 --> 00:16:29,940
And now if I try typing something inside,

245
00:16:30,390 --> 00:16:33,400
for example a username that I know is taken.

246
00:16:34,410 --> 00:16:38,370
We won't see anything because form validations is async. Might take a couple of seconds

247
00:16:38,450 --> 00:16:41,666
and we're not rerendering react here once the validation

248
00:16:41,698 --> 00:16:45,402
is complete. So what I want to do instead is

249
00:16:45,456 --> 00:16:48,614
something different. I first want to display a spinner.

250
00:16:48,662 --> 00:16:51,770
So I have a spinner prop on my input.

251
00:16:52,110 --> 00:16:55,486
It's called pending. And what I want to

252
00:16:55,508 --> 00:16:59,040
do first is when I make a change to the username field

253
00:16:59,570 --> 00:17:03,150
just to show that spinner. So I'll create a new state for react.

254
00:17:04,050 --> 00:17:06,830
Cant is pending,

255
00:17:07,730 --> 00:17:11,470
set is pending equals use

256
00:17:11,540 --> 00:17:14,610
state and default it false.

257
00:17:14,950 --> 00:17:18,194
Okay, so if the current field is username, I want to show

258
00:17:18,232 --> 00:17:24,440
that spinner oh,

259
00:17:28,700 --> 00:17:31,690
set is pending to true. Perfect.

260
00:17:32,140 --> 00:17:36,200
And here I can already decide to show pending by

261
00:17:36,270 --> 00:17:39,704
is pending. So if I type

262
00:17:39,742 --> 00:17:43,196
something inside, we're saying the spinner cool.

263
00:17:43,378 --> 00:17:46,936
Now what I want to do is wait for the username

264
00:17:46,968 --> 00:17:50,252
validation to complete and then disable that spinner.

265
00:17:50,396 --> 00:17:54,272
So I'm going to take form validations result and what I'm getting

266
00:17:54,326 --> 00:17:58,576
here from the function invocation is the validation result the

267
00:17:58,598 --> 00:18:02,272
same one that I'm getting here in res. So what I'm going to do

268
00:18:02,326 --> 00:18:05,828
is const res

269
00:18:05,914 --> 00:18:09,828
equals v and then res.

270
00:18:09,914 --> 00:18:13,748
And what I have here in my validation result is a function called done,

271
00:18:13,914 --> 00:18:17,416
which basically takes a callback and runs it whenever the

272
00:18:17,438 --> 00:18:20,584
validation is fully complete, all the async validations as well.

273
00:18:20,622 --> 00:18:24,136
So what I'm going to do here is pass a callback that all it

274
00:18:24,158 --> 00:18:27,820
does is sets is pending to false.

275
00:18:30,240 --> 00:18:34,380
So what we're going to see here, for example Abc,

276
00:18:35,280 --> 00:18:38,316
and now we can see that the validation is complete because the spinner

277
00:18:38,348 --> 00:18:42,144
is gone. Now what happens if I use a username that's already

278
00:18:42,182 --> 00:18:42,770
taken?

279
00:18:46,420 --> 00:18:49,264
That's all there is to it. That's it,

280
00:18:49,382 --> 00:18:52,916
we're finished with the async validation. But I

281
00:18:52,938 --> 00:18:56,356
do see something else here. So if I

282
00:18:56,378 --> 00:19:00,640
try typing inside an invalid username, for example AEA,

283
00:19:00,800 --> 00:19:04,196
we're seeing the spinner, we're going out to the server even though we know that

284
00:19:04,218 --> 00:19:07,704
the validation already failed for the username, the username is not valid to

285
00:19:07,742 --> 00:19:10,440
begin with. We shouldn't go to the server in this case.

286
00:19:10,590 --> 00:19:14,484
So vest gives us a way to pick into the uncompleted

287
00:19:14,532 --> 00:19:19,150
validation to the intermediate validation result and

288
00:19:20,000 --> 00:19:23,564
get validations that already failed or passed. So what we have

289
00:19:23,602 --> 00:19:27,244
here is best draft, and what gives

290
00:19:27,282 --> 00:19:31,408
us is the same validation result, only uncompleted. And what we have here

291
00:19:31,494 --> 00:19:35,292
is has errors for username,

292
00:19:35,436 --> 00:19:39,010
and this returns a boolean. In our case it will be true because

293
00:19:39,860 --> 00:19:45,764
the username is too short. So only

294
00:19:45,802 --> 00:19:48,390
if the username doesn't have any errors on it,

295
00:19:49,400 --> 00:19:53,088
we'll go out to the server. So let's try again. Ea,

296
00:19:53,264 --> 00:19:56,504
we're not seeing the spinner because we're not going out to the server. Okay,

297
00:19:56,542 --> 00:20:00,276
let's try again. And the username

298
00:20:00,308 --> 00:20:03,988
is valid technically. So we're going to the server.

299
00:20:04,084 --> 00:20:07,868
But another thing here is that I'm going to the server again

300
00:20:07,954 --> 00:20:11,548
when I'm fixing it, and if I remove it and

301
00:20:11,634 --> 00:20:15,020
go back to the username that was there before, which is invalid,

302
00:20:15,680 --> 00:20:19,264
will still go to the server, which is not a good idea because we

303
00:20:19,302 --> 00:20:23,680
already know it's invalid, we already know it's taken on the server.

304
00:20:24,180 --> 00:20:27,776
Vest allows us to memorize validation results using

305
00:20:27,878 --> 00:20:29,360
test memo,

306
00:20:31,960 --> 00:20:36,612
and we can rely on a dependency array and specify which

307
00:20:36,666 --> 00:20:40,036
values we want to memorize by. So I want

308
00:20:40,058 --> 00:20:43,904
to memorize by the username, which means that if the username

309
00:20:43,952 --> 00:20:47,736
doesn't change, or if we get the same username again, we shouldn't go out

310
00:20:47,758 --> 00:20:51,096
to the server at all. We will just use the same validation result that we

311
00:20:51,118 --> 00:20:53,720
had before. So let's try again.

312
00:20:53,870 --> 00:20:55,640
Data username.

313
00:20:57,200 --> 00:21:00,920
So what we're doing here, we're testing memo

314
00:21:01,000 --> 00:21:04,524
for the field username only if the username is

315
00:21:04,562 --> 00:21:07,860
not changed. Otherwise we're getting the same validation results

316
00:21:07,880 --> 00:21:11,170
that we already got before. So let's try again.

317
00:21:12,020 --> 00:21:14,210
We're going to the server the first time,

318
00:21:16,100 --> 00:21:19,328
we're going to serve it again, and we're not going to

319
00:21:19,334 --> 00:21:22,852
the server third time because we already know

320
00:21:22,986 --> 00:21:26,884
the user's name is taken. So what

321
00:21:26,922 --> 00:21:30,688
we have here is basically this is all our form validations.

322
00:21:30,864 --> 00:21:34,490
It's separated from our features logic. It took us about,

323
00:21:35,180 --> 00:21:38,456
I think, five lines of

324
00:21:38,478 --> 00:21:42,052
logic to add vest to our features, and a few more lines

325
00:21:42,116 --> 00:21:45,896
to just display it. So as you've seen, vest is

326
00:21:45,918 --> 00:21:49,668
a pretty powerful and a pretty robust framework. It has lots of features

327
00:21:49,684 --> 00:21:52,972
and capabilities and we did not even cover all of those today. And yet

328
00:21:53,026 --> 00:21:56,568
it still maintains all the complexity in different modules

329
00:21:56,664 --> 00:22:00,176
and has a very narrow point of contact with your code. So you can make

330
00:22:00,198 --> 00:22:03,596
refactors or change your feature or even replace your UI framework.

331
00:22:03,628 --> 00:22:08,988
You cant even touch form validations code and worry breaking I'm

332
00:22:09,004 --> 00:22:12,788
a big believer in the value vest gives you as a developer to

333
00:22:12,874 --> 00:22:15,460
build your app faster with more confidence.

334
00:22:16,120 --> 00:22:19,924
I've used vest personally in multiple production apps, others have too,

335
00:22:19,962 --> 00:22:23,444
and I've received some positive feedback about Vest. Now I'm looking for

336
00:22:23,482 --> 00:22:26,928
more developers to come and help me shape the future of vest.

337
00:22:27,024 --> 00:22:30,836
And I'm also looking for more community adoption and people to come and

338
00:22:30,858 --> 00:22:34,756
suggest new feature ideas to vest. If you

339
00:22:34,778 --> 00:22:38,236
have any any question, you can ask me at Twitter or go

340
00:22:38,258 --> 00:22:42,104
to the documentation page on that projects GitHub I'm

341
00:22:42,152 --> 00:22:45,628
very much excited about best. I hope you like it too.

342
00:22:45,714 --> 00:22:46,090
Thank you.

