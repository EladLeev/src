1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer?

3
00:00:06,610 --> 00:00:10,014
A quality engineer who wants to tackle the challenge of

4
00:00:10,052 --> 00:00:14,026
improving reliability in your DevOps? You can enable your DevOps

5
00:00:14,058 --> 00:00:17,854
for reliability with chaos native. Create your free

6
00:00:17,892 --> 00:01:18,150
account at Chaos native. Litmus Cloud hi,

7
00:01:18,220 --> 00:01:21,862
welcome to Comp 42 dot Com's SRE 2021

8
00:01:21,916 --> 00:01:25,714
conference. We get to talk about level up your DevOps with GitHub

9
00:01:25,762 --> 00:01:28,986
actions in kubernetes. Here's the part where I tell you that I'm going

10
00:01:29,008 --> 00:01:32,250
to post my slides, but there are no slides.

11
00:01:32,750 --> 00:01:35,350
This is it. That GitHub,

12
00:01:35,510 --> 00:01:39,674
that notepad document. That's it.

13
00:01:39,872 --> 00:01:43,646
Now you can go grab the code for this. It's online right now here on

14
00:01:43,668 --> 00:01:47,774
GitHub. Yeah, we need to go build this code.

15
00:01:47,972 --> 00:01:51,434
But if you didn't grab this URL, go to robridge.org

16
00:01:51,482 --> 00:01:54,570
slash presentations and here's level up your DevOps.

17
00:01:54,650 --> 00:01:57,954
The code is online right now, and once we finish build it,

18
00:01:57,992 --> 00:02:02,030
it will be up there on GitHub while you're here@robrich.org.

19
00:02:02,110 --> 00:02:05,634
Click on about me and you'll see some of the things that I've done recently.

20
00:02:05,762 --> 00:02:09,522
I'm a Microsoft MVP, a friend of Redgate, a docker captain,

21
00:02:09,586 --> 00:02:13,254
and a cyral developer, automate AZ give camp

22
00:02:13,292 --> 00:02:17,014
is really fun AZ give camp brings volunteer DevOps together with

23
00:02:17,052 --> 00:02:20,906
charities to build free software. We start Friday after work.

24
00:02:21,008 --> 00:02:24,214
Sunday afternoon, we deliver the completed software to the charities.

25
00:02:24,342 --> 00:02:28,038
Sleep is optional, caffeine provided. If you're in Phoenix, come join

26
00:02:28,054 --> 00:02:31,066
us for the next AZ give camp. Or if you'd like a give camp in

27
00:02:31,088 --> 00:02:34,766
your area, hit me up on email or on Twitter and let's get

28
00:02:34,788 --> 00:02:38,510
a give camp in your neighborhood too. Some of the other things that I've done,

29
00:02:38,580 --> 00:02:42,382
I do a lot with containers, consulting and training,

30
00:02:42,516 --> 00:02:45,538
and one of the things I'm particularly proud of I replied to

31
00:02:45,544 --> 00:02:48,690
a Net Rocks podcast episode. They sent me a mug.

32
00:02:50,870 --> 00:02:54,786
Yeah, that's cool. They read my comment on the air. And there's my coveted net

33
00:02:54,808 --> 00:02:58,470
rocks mug. So let's dig in. We have here

34
00:02:58,540 --> 00:03:01,926
all of the code that we need to yep, we've got an

35
00:03:01,948 --> 00:03:05,794
empty folder. So our first step in building up a DevOps

36
00:03:05,842 --> 00:03:09,334
pipeline for containers is to have something to include

37
00:03:09,382 --> 00:03:12,842
in our container. Let's do that. So let's start out

38
00:03:12,896 --> 00:03:16,698
by creating a new website. Net new.

39
00:03:16,864 --> 00:03:20,826
Net New allows us to scaffold out lots of different types of websites

40
00:03:20,858 --> 00:03:25,130
in. Net. And so we could do an MVC site, a website blazor

41
00:03:25,210 --> 00:03:28,960
angular react. Those are all great projects. Let's do this.

42
00:03:29,330 --> 00:03:32,970
Net new MVC

43
00:03:33,130 --> 00:03:37,502
and we'll give it a name of levelup DevOps

44
00:03:37,646 --> 00:03:41,166
and an output folder of the current folder. If we didn't

45
00:03:41,198 --> 00:03:44,722
give it a name, it would use the name of our folder, in this case

46
00:03:44,776 --> 00:03:47,686
demo. And if we didn't give it an output folder, it would create a new

47
00:03:47,708 --> 00:03:51,334
folder inside this folder for that content. So we

48
00:03:51,372 --> 00:03:54,998
created it in the current folder and now we have some content.

49
00:03:55,164 --> 00:03:58,886
Let's open it up inside vs code. Now we've

50
00:03:58,918 --> 00:04:02,794
got controllers. Let's close all

51
00:04:02,832 --> 00:04:07,030
this content. We've got controllers, we've got views.

52
00:04:07,190 --> 00:04:11,998
Here's our home view. And it says welcome

53
00:04:12,084 --> 00:04:17,486
to comp 42 SrE 2021.

54
00:04:17,588 --> 00:04:20,846
Woohoo. Now we've got our website. Okay,

55
00:04:20,948 --> 00:04:24,386
now we need to get our website into containers. Our first step is

56
00:04:24,408 --> 00:04:28,174
to worry about git. So let's first create a git

57
00:04:28,222 --> 00:04:31,410
ignore file. Git ignore.

58
00:04:32,390 --> 00:04:36,630
That isn't it? Git rename

59
00:04:37,770 --> 00:04:41,174
git ignore. There we go.

60
00:04:41,372 --> 00:04:44,322
Oh, do we want to add assets?

61
00:04:44,466 --> 00:04:47,960
Yes. Now it's going to add for us this

62
00:04:48,330 --> 00:04:51,754
vs code folder. And this vs code folder will

63
00:04:51,792 --> 00:04:55,020
give us the things that we need to be able to debug our application.

64
00:04:55,790 --> 00:04:59,146
Okay, back to our git ignore file. Now here are all

65
00:04:59,168 --> 00:05:02,218
the things that we don't want to commit to our repository.

66
00:05:02,394 --> 00:05:05,402
So our bin folder, our OB folder,

67
00:05:05,466 --> 00:05:08,794
those built assets, also user specific files

68
00:05:08,842 --> 00:05:12,042
like Star user Star Suo,

69
00:05:12,106 --> 00:05:15,170
the vs folder. If we were using visual studio,

70
00:05:17,990 --> 00:05:21,410
and that's a pretty good spot for removing content

71
00:05:21,480 --> 00:05:25,246
from git. We could also include the star

72
00:05:25,368 --> 00:05:29,078
log or Star

73
00:05:29,164 --> 00:05:33,094
TMP, any other files that we wanted to exclude. But for now,

74
00:05:33,212 --> 00:05:36,774
this list is pretty good. Now we

75
00:05:36,812 --> 00:05:39,974
want to be able to create a Docker ignore file

76
00:05:40,022 --> 00:05:43,882
that has the exact same syntax as our git ignore file. Now this

77
00:05:43,936 --> 00:05:48,154
docker ignore file docker ignore is

78
00:05:48,192 --> 00:05:51,466
the exact same syntax. So in fact we can start with

79
00:05:51,488 --> 00:05:55,050
our git ignore and just use that as a docker ignore.

80
00:05:55,130 --> 00:05:59,018
In fact, if we don't have a docker ignore file,

81
00:05:59,194 --> 00:06:02,206
but we do have a git ignore file, then docker will use

82
00:06:02,228 --> 00:06:05,506
that instead. Now this is everything. We don't want to

83
00:06:05,528 --> 00:06:09,086
end up inside of our container. So we've

84
00:06:09,118 --> 00:06:12,734
got bin and obed star user star suo.

85
00:06:12,782 --> 00:06:16,166
But we also want debug content. So for example,

86
00:06:16,348 --> 00:06:20,370
appsettings development JSOn.

87
00:06:20,530 --> 00:06:24,550
And here in the properties folder, launchsettings JSOn.

88
00:06:25,050 --> 00:06:28,358
Now launchsettings JSON is all of the things that

89
00:06:28,364 --> 00:06:31,674
we need to be able to debug our application. So should we start?

90
00:06:31,712 --> 00:06:35,430
Kestrel, what port do we want to debug on? And those aren't necessary

91
00:06:35,510 --> 00:06:39,018
inside of a production runtime container. Okay,

92
00:06:39,104 --> 00:06:42,398
now we've got our Docker ignore file. Next up,

93
00:06:42,484 --> 00:06:44,750
let's create a docker file.

94
00:06:45,250 --> 00:06:48,350
New file docker file.

95
00:06:49,250 --> 00:06:52,754
Now it's important this be named Docker file and

96
00:06:52,792 --> 00:06:56,114
not Dockerfile txt. If you

97
00:06:56,152 --> 00:06:59,006
did accidentally create it with Dockerfile. Txt,

98
00:06:59,118 --> 00:07:02,878
easy enough rename and just make it Dockerfile.

99
00:07:03,054 --> 00:07:06,866
Now I have the docker extension installed in vs code so I can

100
00:07:06,888 --> 00:07:10,360
see the whale. It turned into beautiful colors. That's perfect.

101
00:07:10,890 --> 00:07:14,530
Now let's build up our configuration as code that explains

102
00:07:14,610 --> 00:07:18,138
how to get from our source code to a running container inside of

103
00:07:18,144 --> 00:07:21,594
kubernetes. Now we'll start off with the

104
00:07:21,632 --> 00:07:26,250
various lines for a docker file from copy

105
00:07:26,590 --> 00:07:29,130
run CmD.

106
00:07:29,630 --> 00:07:33,018
These are the main commands inside of a docker file.

107
00:07:33,114 --> 00:07:37,134
In fact, if you know these four commands, you can probably read pretty

108
00:07:37,172 --> 00:07:40,080
much any docker file and understand what's going on.

109
00:07:40,770 --> 00:07:44,510
Let's start off with from now this specifies the base

110
00:07:44,580 --> 00:07:47,298
image that we're going to build on top of. We want to stand on the

111
00:07:47,304 --> 00:07:51,074
shoulders of giants so let's head up to Docker hub and take

112
00:07:51,112 --> 00:07:54,642
a look at the content. Now I'm going to search for. Net and land here

113
00:07:54,696 --> 00:07:58,450
on this. Net image repository.

114
00:07:58,610 --> 00:08:02,082
Now it's a meta repository. It shows me where the other images

115
00:08:02,146 --> 00:08:06,434
are. Now we can go to. Net samples. That's great for understanding

116
00:08:06,482 --> 00:08:09,880
various docker files that build. Net in interesting ways.

117
00:08:10,190 --> 00:08:13,846
Net monitor is pretty cool. Net runtime depths that's

118
00:08:13,878 --> 00:08:17,274
the base content that we need to be able to install.

119
00:08:17,392 --> 00:08:20,870
Net on top of. On top of that is the. NET runtime

120
00:08:20,950 --> 00:08:24,614
which will include content for running console applications.

121
00:08:24,742 --> 00:08:28,938
On top of that is ASP. NeT which will allow us to host web servers

122
00:08:29,034 --> 00:08:32,474
and on top of that is built the SDK, the build tools.

123
00:08:32,602 --> 00:08:36,500
Now we want to build inside of our container. So let's start there.

124
00:08:37,030 --> 00:08:39,986
Here inside of Docker Hub with the.

125
00:08:40,088 --> 00:08:44,178
Net SDK here's the image that we want. We're using

126
00:08:44,344 --> 00:08:48,018
net 5.0 so that's the correct image

127
00:08:48,034 --> 00:08:51,702
that we'll use as our base image. Scrolling down a little bit we can

128
00:08:51,756 --> 00:08:55,110
see that the various tags available

129
00:08:55,260 --> 00:08:58,530
and the various docker files used to build those tags.

130
00:08:58,610 --> 00:09:02,522
And if we were just using the 50 tag that

131
00:09:02,576 --> 00:09:06,214
was specified above, we'd end up on Debian. Now Alpine

132
00:09:06,262 --> 00:09:10,398
is a really really small version of Linux so let's use the 5.0

133
00:09:10,484 --> 00:09:14,286
alpine tag instead. Okay, so back here in

134
00:09:14,308 --> 00:09:19,338
our Docker file we're going to say from thatalpine.

135
00:09:19,514 --> 00:09:23,098
Now we're using the 50 alpine tag that includes the build tools,

136
00:09:23,114 --> 00:09:26,740
the SDK, and now we have all of. Net in place.

137
00:09:27,670 --> 00:09:30,786
Our next step is to copy all of the content here from

138
00:09:30,808 --> 00:09:34,206
our folder. So we'll copy all of the content from the folder

139
00:09:34,238 --> 00:09:37,846
where we run the docker build command into the

140
00:09:37,868 --> 00:09:41,154
current folder in our image. Well, where is that current folder?

141
00:09:41,282 --> 00:09:44,790
Let's specify that workdur is Src.

142
00:09:45,210 --> 00:09:49,442
Now there's nothing magic about src. We could put it in Varlib

143
00:09:49,506 --> 00:09:53,386
wherever we wanted it to, but in this case I'll just have it

144
00:09:53,408 --> 00:09:57,014
at src, and that's a good spot for it. Now it'll create that directory

145
00:09:57,062 --> 00:09:59,610
and change into it if it doesn't exist.

146
00:10:00,270 --> 00:10:04,198
So we're copying all of our content into that Src directory,

147
00:10:04,294 --> 00:10:07,934
and now we need to run some build commands. Now if we were

148
00:10:07,972 --> 00:10:11,694
at the command line, the commands that we would run to be able to do

149
00:10:11,732 --> 00:10:15,134
this, we would say net

150
00:10:15,252 --> 00:10:19,682
restore. That would restore all of our nuget packages. Net build

151
00:10:19,816 --> 00:10:23,762
will build in release mode. Net test

152
00:10:23,896 --> 00:10:27,698
that will run all of our tests will also do that in release mode

153
00:10:27,874 --> 00:10:31,794
so that release mode so that we don't accidentally

154
00:10:31,842 --> 00:10:35,718
get debug and release content in place. And then

155
00:10:35,804 --> 00:10:39,426
net publish and we'll publish to

156
00:10:39,468 --> 00:10:43,034
the disk folder. Now NEt publish is that

157
00:10:43,072 --> 00:10:46,118
same command like right click publish inside of visual studio,

158
00:10:46,214 --> 00:10:50,038
but we're doing it here inside of our build process. So it'll

159
00:10:50,054 --> 00:10:53,850
be identical every time. It will go gather all the HTML CSS

160
00:10:53,930 --> 00:10:57,054
files, all the Javascript files, and also all of those

161
00:10:57,092 --> 00:11:00,954
built dlls. But it will leave behind all of our CsHTML

162
00:11:01,002 --> 00:11:04,526
and c sharp files. Okay, so here's all

163
00:11:04,548 --> 00:11:08,114
the commands that we would run from the command line, and we need

164
00:11:08,152 --> 00:11:11,442
to run them as part of our docker build.

165
00:11:11,576 --> 00:11:15,714
So let's run this one and run this one and

166
00:11:15,832 --> 00:11:19,590
run this one and run this one. There we go.

167
00:11:19,660 --> 00:11:23,666
Now we've got our docker build file executing

168
00:11:23,698 --> 00:11:27,410
each of these tasks. Now each of them is going to build a separate layer,

169
00:11:27,490 --> 00:11:30,854
so we could do interesting things like combine

170
00:11:30,902 --> 00:11:34,170
them together. But in this case we really like

171
00:11:34,240 --> 00:11:38,470
that. Docker will cache each of these layers, so having them specified

172
00:11:38,550 --> 00:11:42,030
here is kind of nice. Next thing we need to run this.

173
00:11:42,100 --> 00:11:46,826
So we need to say net levelup

174
00:11:46,938 --> 00:11:51,258
DevOps Dll and that is in workder

175
00:11:51,434 --> 00:11:54,638
dist. Now there's a few more things that we need

176
00:11:54,644 --> 00:11:58,610
to copy into place. Let's go grab some environment variables.

177
00:11:58,950 --> 00:12:02,482
Now this says we should run in production mode and we should run on port

178
00:12:02,536 --> 00:12:06,190
80 and we'll add some additional metadata to our container

179
00:12:06,270 --> 00:12:09,510
so that we know to hook into port 80.

180
00:12:10,010 --> 00:12:13,254
Perfect. Now we could use this build file as

181
00:12:13,292 --> 00:12:16,646
is and it would work great. But there's a few things that we can

182
00:12:16,668 --> 00:12:19,934
tidy up here to make our production runtime

183
00:12:20,002 --> 00:12:23,386
image a little bit smaller. Right now we're including our

184
00:12:23,408 --> 00:12:26,810
source code and our build tools in our production image.

185
00:12:27,150 --> 00:12:30,842
Let's see if we can go grab some content here on the

186
00:12:30,896 --> 00:12:34,782
Docker hub for ASP. Net and see if we can run just

187
00:12:34,836 --> 00:12:38,670
the website. Now this Asp. Net base

188
00:12:38,740 --> 00:12:42,106
image will allow us to just run the website. It doesn't include

189
00:12:42,138 --> 00:12:45,554
build tools and scrolling down a little bit we can see that it also has

190
00:12:45,592 --> 00:12:49,506
an alpine variant. So let's come back into our Docker file and

191
00:12:49,528 --> 00:12:53,650
let's split this in half. Let's go here alpine

192
00:12:54,470 --> 00:12:57,986
now we have now two images that we're

193
00:12:58,018 --> 00:13:02,040
building with one Docker file. We'll call this one our

194
00:13:03,450 --> 00:13:06,902
build server image and this

195
00:13:06,956 --> 00:13:10,422
one will be our production runtime

196
00:13:10,566 --> 00:13:13,734
server image. And I put server in air quotes

197
00:13:13,782 --> 00:13:16,502
because well it's not actually a server,

198
00:13:16,566 --> 00:13:20,266
it's an image but we can think

199
00:13:20,288 --> 00:13:23,774
of it kind of like a server. This top part will do all the building

200
00:13:23,892 --> 00:13:27,834
and then once we're done building, this bottom part will only include

201
00:13:27,882 --> 00:13:30,720
those pieces that are specific to our application.

202
00:13:31,090 --> 00:13:34,206
Now we do need to let's switch this to an

203
00:13:34,228 --> 00:13:38,062
app folder. We do need to copy the content from the disk folder

204
00:13:38,126 --> 00:13:41,620
into this folder so that we can be able to run it this way.

205
00:13:42,070 --> 00:13:45,194
But right now it's going to copy it from the disk folder on my host

206
00:13:45,262 --> 00:13:48,790
machine, not from this other container. So let me say,

207
00:13:48,860 --> 00:13:52,406
I will say as build.

208
00:13:52,508 --> 00:13:55,880
No, from equals build.

209
00:13:56,250 --> 00:13:59,938
Now I've said from equals build. So it's going to go look

210
00:13:59,964 --> 00:14:03,660
for the build stage. So let's name this one as build.

211
00:14:04,190 --> 00:14:07,354
Now we could also name this one as

212
00:14:07,472 --> 00:14:11,114
prod or whatever but we're not going to use that label so that's fine,

213
00:14:11,152 --> 00:14:15,054
we'll just leave it off. But this very specifically says copy from

214
00:14:15,092 --> 00:14:18,622
the disk folder in this build image into the current

215
00:14:18,676 --> 00:14:22,270
folder, this app folder here on this new image.

216
00:14:22,630 --> 00:14:26,434
That's great. Now that we've split our file into

217
00:14:26,472 --> 00:14:30,366
a multistage build, this stage will include all of our source

218
00:14:30,398 --> 00:14:34,020
come and build tools and this stage will not.

219
00:14:34,710 --> 00:14:38,130
The next thing we can do is take a look at these layers.

220
00:14:38,630 --> 00:14:41,606
Now we're going to copy in all of our content and then we're going to

221
00:14:41,628 --> 00:14:45,206
run restore to grab all of our dependencies and then we're going to

222
00:14:45,228 --> 00:14:48,326
build. Well what if I just change a JavaScript file?

223
00:14:48,358 --> 00:14:51,686
I'm going to re restore my dependencies.

224
00:14:51,878 --> 00:14:55,030
Really? I want to restore my dependencies

225
00:14:55,110 --> 00:14:58,038
first and then copy all my files.

226
00:14:58,214 --> 00:15:02,006
Well, I still need to grab my manifest, so let's

227
00:15:02,038 --> 00:15:05,854
copy levelup DevOps Csproj into

228
00:15:05,892 --> 00:15:09,466
the current folder. Then we'll net restore, then we'll

229
00:15:09,498 --> 00:15:13,018
copy everything else and then we'll build, test and publish.

230
00:15:13,194 --> 00:15:16,526
Now that means if I change just a cshtml

231
00:15:16,558 --> 00:15:20,258
file or just a JavaScript file that I'm not going to

232
00:15:20,344 --> 00:15:23,854
re restore my nuget packages Docker will continue caching

233
00:15:23,902 --> 00:15:27,506
this layer, it'll start here, invalidating this layer and

234
00:15:27,528 --> 00:15:30,866
it will start our build from here. Now if our build fails,

235
00:15:30,898 --> 00:15:33,782
it'll stop at this step. If our tests fail, it'll stop here.

236
00:15:33,836 --> 00:15:37,186
If our publish fails, it'll stop here. And so we'll only get to a production

237
00:15:37,218 --> 00:15:41,174
runtime image. If we restore all the things correctly and

238
00:15:41,212 --> 00:15:44,986
we build correctly and all our tests pass and we're able to

239
00:15:45,008 --> 00:15:48,346
publish. But if something fails and

240
00:15:48,368 --> 00:15:52,170
we're not changing the dependencies that the packages we depend on,

241
00:15:52,240 --> 00:15:55,994
then we can start here copying all of the new files and continuing

242
00:15:56,042 --> 00:15:59,242
on. Perfect. Now we have a docker file

243
00:15:59,306 --> 00:16:03,486
that is great in being able to build our content, cache the layers correctly

244
00:16:03,518 --> 00:16:07,218
in docker and separate it into this multi stage build

245
00:16:07,304 --> 00:16:10,366
that allows us to have a really lightweight production runtime

246
00:16:10,398 --> 00:16:13,826
container. Now our next step is to

247
00:16:13,928 --> 00:16:16,542
create a Kubernetes Yaml file.

248
00:16:16,686 --> 00:16:20,502
Now Kubernetes Yaml files can get kind of big,

249
00:16:20,556 --> 00:16:23,590
so let's just go grab the file that we used last time.

250
00:16:23,740 --> 00:16:27,122
Here's the file that we used last time. We've got a deployment

251
00:16:27,186 --> 00:16:30,842
that specifies the number of replicas. In this case we're only going to run one.

252
00:16:30,976 --> 00:16:34,586
We have a service that will load balance across all of those one

253
00:16:34,688 --> 00:16:38,810
containers. We have an ingress that will grab our content

254
00:16:38,960 --> 00:16:42,814
and resolve DNS and point it at the particular service.

255
00:16:43,012 --> 00:16:46,030
But we do have some things that we can replace here.

256
00:16:46,100 --> 00:16:49,434
Here's our AKs URL that will work on DNS.

257
00:16:49,562 --> 00:16:53,238
Here is our image label, our Githash.

258
00:16:53,354 --> 00:16:56,546
Here's our container registry URL. We do

259
00:16:56,568 --> 00:17:00,194
need to replace last time, so let's replace this with

260
00:17:00,312 --> 00:17:04,114
levelup DevOps and we've got that

261
00:17:04,152 --> 00:17:07,880
in place. We could also tune other things like

262
00:17:08,970 --> 00:17:13,106
the number of replicas, the resource limits,

263
00:17:13,298 --> 00:17:16,982
any other dependencies that we want. But at this point I think this one works

264
00:17:17,036 --> 00:17:20,102
pretty well. Okay, so we've got now our

265
00:17:20,156 --> 00:17:23,926
docker file that will build our content, our Kubernetes Yaml file that will deploy

266
00:17:23,958 --> 00:17:27,846
it to Kubernetes. And let's get all of this up to GitHub.

267
00:17:28,038 --> 00:17:31,342
Switching over in vs come I will stage all of these

268
00:17:31,396 --> 00:17:34,922
changes and I could pop open each file

269
00:17:35,066 --> 00:17:38,734
inside of vs code and see the old and new.

270
00:17:38,852 --> 00:17:42,462
But every file in this is new. So far they're all

271
00:17:42,516 --> 00:17:46,114
added. So I'll just look through and make sure that I don't have any

272
00:17:46,152 --> 00:17:49,906
files that I didn't want to commit. Did I perhaps forget to

273
00:17:49,928 --> 00:17:53,540
exclude the bin or Obs folders? No, it looks good.

274
00:17:54,150 --> 00:17:56,230
Initial commit,

275
00:17:57,370 --> 00:18:01,414
perfect. So now that I've got that commit in place

276
00:18:01,612 --> 00:18:05,190
git status, we can see that we've got that in place.

277
00:18:05,260 --> 00:18:09,046
Let's get push origin main and push

278
00:18:09,078 --> 00:18:13,466
that up to GitHub. Now if you grab this

279
00:18:13,648 --> 00:18:17,660
URL up on GitHub, you can see that we've got the code

280
00:18:18,190 --> 00:18:21,600
in place and it's looking really nice.

281
00:18:22,370 --> 00:18:25,722
Now this was a pretty much empty GitHub repository,

282
00:18:25,786 --> 00:18:29,374
but I did do a few things on my way in. I went here

283
00:18:29,412 --> 00:18:33,050
into settings and I went to secrets

284
00:18:33,130 --> 00:18:37,182
and I created a few secrets that we can use in our GitHub

285
00:18:37,246 --> 00:18:41,326
actions build. What is our containers, registry password URL

286
00:18:41,358 --> 00:18:44,514
and username, what is our Kubernetes URL and

287
00:18:44,552 --> 00:18:48,126
the kubeconfig that we need to be able to log into it. So let's

288
00:18:48,158 --> 00:18:51,190
use those secrets to build up our GitHub actions.

289
00:18:52,250 --> 00:18:55,458
Now when we click on actions for the first time, it will give us lots

290
00:18:55,474 --> 00:18:59,914
of templates that we can use. So if we want to do an openshift or

291
00:19:00,112 --> 00:19:03,302
Alibaba cloud deployment or terraform

292
00:19:03,446 --> 00:19:07,194
rust, there's lots of integrations that we can get

293
00:19:07,232 --> 00:19:11,390
to here. That's pretty cool. Now it did guess that this

294
00:19:11,460 --> 00:19:15,390
was a Jekyll site, but in this case I think

295
00:19:15,460 --> 00:19:19,434
I liked the publish a docker container workflow

296
00:19:19,482 --> 00:19:23,042
instead. Now we could definitely start from a blank file as well.

297
00:19:23,096 --> 00:19:26,766
It's just a docker file. And I'm going to rename

298
00:19:26,798 --> 00:19:29,570
this to Docker Kubernetes.

299
00:19:30,630 --> 00:19:34,590
Okay, so here's the GitHub actions build script

300
00:19:34,670 --> 00:19:38,598
that will allow us to get the content into place. Docker build

301
00:19:38,684 --> 00:19:42,280
and push Kubernetes apply.

302
00:19:42,890 --> 00:19:45,666
Now in this case I'm not going to run it on a schedule.

303
00:19:45,778 --> 00:19:49,626
We'll come back to pull request. And so in this

304
00:19:49,648 --> 00:19:54,410
case I'm only going to run it on the main branch.

305
00:19:55,390 --> 00:19:58,874
Perfect. Now I'm going to remove these environment variables in this

306
00:19:58,912 --> 00:20:02,640
case and let's get straight to the content that we want to do.

307
00:20:03,090 --> 00:20:06,638
I'm going to delete this and

308
00:20:06,804 --> 00:20:10,640
this and this.

309
00:20:11,010 --> 00:20:13,890
And let's create a new stage.

310
00:20:14,230 --> 00:20:19,220
This will be name

311
00:20:20,150 --> 00:20:24,430
Docker build and push Kubectl

312
00:20:24,510 --> 00:20:27,846
apply and let's run

313
00:20:27,948 --> 00:20:31,126
this script. Now the script that I

314
00:20:31,148 --> 00:20:34,630
want to run is first off I'm going to say Docker,

315
00:20:35,370 --> 00:20:36,920
Docker build.

316
00:20:39,610 --> 00:20:43,334
That's the current folder where I want to start my building. And let's

317
00:20:43,382 --> 00:20:47,450
tag this on our way through as well. So I'm going to tag it with

318
00:20:47,600 --> 00:20:50,894
levelup DevOps. And now

319
00:20:50,932 --> 00:20:54,558
let's go use some of those secrets. I want to be able to grab that

320
00:20:54,724 --> 00:20:57,870
GitHub, the secret here

321
00:20:57,940 --> 00:21:00,778
for my registry URL.

322
00:21:00,954 --> 00:21:04,386
And so taking a look at how secrets work inside

323
00:21:04,488 --> 00:21:08,130
of GitHub, we've got our secrets here, they're all in place.

324
00:21:08,280 --> 00:21:11,582
And now we can use this dollar curly Curly

325
00:21:11,646 --> 00:21:13,810
to be able to get at that secret.

326
00:21:14,310 --> 00:21:17,894
Perfect. So here in

327
00:21:17,932 --> 00:21:21,762
my GitHub actions build file, let's say dollar curly query.

328
00:21:21,826 --> 00:21:26,630
And I'm going to say secrets acr

329
00:21:27,130 --> 00:21:30,946
URL. There I've tagged it with my container

330
00:21:30,978 --> 00:21:34,170
registry so that when it comes time to push it, it knows exactly

331
00:21:34,240 --> 00:21:37,354
where to push it. I'm also going to give it a version. In this case

332
00:21:37,392 --> 00:21:41,520
I will use GitHub Shaw, which is

333
00:21:42,610 --> 00:21:46,238
the GitHub hash associated with this commit. Now we

334
00:21:46,244 --> 00:21:49,422
could definitely grab something like a build number or other

335
00:21:49,476 --> 00:21:52,846
details. This just makes sure it's unique and allows me to

336
00:21:52,868 --> 00:21:56,482
quickly go from the container running in production to

337
00:21:56,536 --> 00:21:58,580
the source code that created it.

338
00:21:59,190 --> 00:22:02,546
Okay, so I've got my container built and it's going to do all

339
00:22:02,568 --> 00:22:05,570
of those steps inside the build file.

340
00:22:06,170 --> 00:22:09,334
Once I've got my image built, let's push it.

341
00:22:09,372 --> 00:22:13,382
So docker push and I will go grab this

342
00:22:13,516 --> 00:22:17,350
image and I will push that up to

343
00:22:17,420 --> 00:22:21,386
my docker registry. Now what's that registry? I think

344
00:22:21,408 --> 00:22:24,538
I probably need to authenticate into it first. And that's a

345
00:22:24,544 --> 00:22:28,282
great place to go grab some content from the

346
00:22:28,336 --> 00:22:32,718
marketplace. So let's do this. Let's do a

347
00:22:32,884 --> 00:22:36,542
docker login. Now I need to log into

348
00:22:36,596 --> 00:22:39,040
my registry. So here's one.

349
00:22:41,090 --> 00:22:43,940
And is that the one that I'm after?

350
00:22:45,030 --> 00:22:46,580
Yeah, that one will work.

351
00:22:48,390 --> 00:22:51,950
Now here's the yaml associated with it that I'll need to include.

352
00:22:52,030 --> 00:22:55,958
I could pull into the full marketplace listing and take a

353
00:22:55,964 --> 00:22:59,718
look at the details. It's not uncommon to get from there

354
00:22:59,804 --> 00:23:02,870
into the GitHub

355
00:23:03,770 --> 00:23:07,266
repository that includes this content. But that's

356
00:23:07,298 --> 00:23:11,266
the action that I need to grab. So let's grab this yaml

357
00:23:11,378 --> 00:23:14,774
and let's set it in place right here. I will need to indent

358
00:23:14,822 --> 00:23:17,866
it a little bit to get that lined up. There we go.

359
00:23:18,048 --> 00:23:21,950
Now we need to log in to our registry.

360
00:23:22,770 --> 00:23:26,746
So what's our registry? Well we happen to have a secret for that. So let's

361
00:23:26,778 --> 00:23:30,910
say secrets Acr

362
00:23:31,250 --> 00:23:34,366
URL. There's our registry URL.

363
00:23:34,478 --> 00:23:37,586
What's our username? We have a secret for that as well.

364
00:23:37,688 --> 00:23:41,966
Let's do secrets Acr URL.

365
00:23:42,158 --> 00:23:45,330
No, Acr username.

366
00:23:46,010 --> 00:23:48,914
Perfect. And what's the password?

367
00:23:49,042 --> 00:23:54,482
Let's go grab the secret for that as well. Secrets ACr

368
00:23:54,626 --> 00:23:58,514
password. There we go. And then

369
00:23:58,572 --> 00:24:02,074
log out. Now this is optional and

370
00:24:02,112 --> 00:24:05,194
the default is true. This will log

371
00:24:05,232 --> 00:24:09,146
out not at the end of this step, but at the end of the entire

372
00:24:09,248 --> 00:24:12,510
build. Now if I'm on a shared build agent where

373
00:24:12,580 --> 00:24:16,334
I don't necessarily have control over that content, then I definitely want to

374
00:24:16,372 --> 00:24:20,250
clear out these secrets after the build. With GitHub actions

375
00:24:20,410 --> 00:24:24,426
hosted on GitHub they automatically purge the vm that kicked

376
00:24:24,458 --> 00:24:27,938
off my build so I don't need to worry about it. But yeah, it's a

377
00:24:27,944 --> 00:24:31,380
good idea just to clear the secrets on the way through. Perfect.

378
00:24:32,550 --> 00:24:36,318
So we'll do our docker build, we'll push that up to our container

379
00:24:36,334 --> 00:24:40,006
registry. The next step is to kubectl apply and

380
00:24:40,028 --> 00:24:43,720
I'll give it the k eight s Yaml file that we built.

381
00:24:44,170 --> 00:24:47,550
Now here in this k eight s Yaml file is a bunch of the secrets

382
00:24:47,570 --> 00:24:51,942
that we needed to replace Acr URL image label.

383
00:24:52,086 --> 00:24:56,022
So let's go replace those. Now this said command

384
00:24:56,086 --> 00:25:00,540
is a little swirly, so let me just copy it into place.

385
00:25:01,150 --> 00:25:04,778
Let's go do this replacement. Now here in

386
00:25:04,784 --> 00:25:08,878
the Kubernetes KDES Yaml file we're going to

387
00:25:09,044 --> 00:25:13,114
replace the content, not back it up. We'll go grab the Acr URL

388
00:25:13,162 --> 00:25:16,494
and replace it with that secret. We'll go grab the aks URL,

389
00:25:16,542 --> 00:25:20,034
replace it with that secret and go grab the image label and

390
00:25:20,072 --> 00:25:23,614
replace it with that secret. And we're going to do this globally.

391
00:25:23,742 --> 00:25:26,998
So we'll replace all of the instances here inside

392
00:25:27,084 --> 00:25:31,238
our Kubernetes yaml file. Now I'm very specifically doing

393
00:25:31,324 --> 00:25:34,742
this after I pushed it to the registry because

394
00:25:34,796 --> 00:25:38,954
if I were to do it earlier, like maybe here

395
00:25:39,152 --> 00:25:43,318
and then say for example, I forgot to exclude

396
00:25:43,414 --> 00:25:47,206
that from my docker, ignore. So yes, we forgot

397
00:25:47,238 --> 00:25:51,498
KDEF Yaml here, then those secrets

398
00:25:51,594 --> 00:25:55,006
would get embedded into my container and I

399
00:25:55,028 --> 00:25:58,238
really don't want to do that. So I'm very specifically going to

400
00:25:58,244 --> 00:26:01,786
put these secrets replacement after I've pushed

401
00:26:01,818 --> 00:26:05,742
my container up to my registry. Now I know that even if that Kubernetes

402
00:26:05,806 --> 00:26:09,426
Yaml file leaked into my image that it doesn't include those

403
00:26:09,448 --> 00:26:13,138
secrets. Perfect. Now we do need to

404
00:26:13,224 --> 00:26:16,914
log into our Kubernetes cluster to be able to do a kubectl

405
00:26:16,962 --> 00:26:20,898
apply. So let's head back out to the marketplace

406
00:26:20,994 --> 00:26:28,970
and let's look for a Kubernetes Kubectl.

407
00:26:29,310 --> 00:26:33,142
No, kubernetes set context.

408
00:26:33,286 --> 00:26:35,658
There we go. There we go.

409
00:26:35,744 --> 00:26:39,180
Kubernetes set context. Let's go grab this one.

410
00:26:40,750 --> 00:26:43,994
Yeah, that'll work. Is this one the one

411
00:26:44,032 --> 00:26:45,340
that I'm after though?

412
00:26:46,830 --> 00:26:50,286
No, I did want that one. Here we go. I should

413
00:26:50,308 --> 00:26:54,030
have looked at the stars. So let's copy this

414
00:26:54,100 --> 00:26:57,682
one and we'll set it in place. We probably need to adjust the

415
00:26:57,736 --> 00:27:00,914
yaml to get that to line up. Yep, there we go.

416
00:27:01,112 --> 00:27:04,370
Now here with Kubernetes set context,

417
00:27:04,710 --> 00:27:08,050
our first stop is with the method.

418
00:27:08,210 --> 00:27:11,366
So let's remove some other things and we are

419
00:27:11,388 --> 00:27:13,990
going to use the cubeconfig method.

420
00:27:14,810 --> 00:27:18,454
Now because we have the cube config method we need to specify the cube

421
00:27:18,502 --> 00:27:21,082
config. Good thing we've got a secret for that.

422
00:27:21,136 --> 00:27:25,542
Secrets, secrets cubeconfig.

423
00:27:25,686 --> 00:27:29,306
And I grabbed that by grabbing the cube config on

424
00:27:29,328 --> 00:27:32,986
my local machine. I went into my user profile

425
00:27:33,018 --> 00:27:36,430
directory, grabbed the cube folder and inside

426
00:27:36,500 --> 00:27:40,570
there the config file and extracted that portion referencing

427
00:27:40,730 --> 00:27:44,246
this particular cluster. So with that cube config

428
00:27:44,298 --> 00:27:47,778
in place I don't need the other ways to authenticate to it.

429
00:27:47,864 --> 00:27:51,490
So let's remove those. And now I've got

430
00:27:51,560 --> 00:27:55,666
my build in place. So we're going to start out checking out

431
00:27:55,688 --> 00:27:59,794
our content. Then we will do a docker login logging

432
00:27:59,842 --> 00:28:03,442
into our docker registry. Then we'll do a Kubernetes

433
00:28:03,506 --> 00:28:06,886
login logging into our Kubernetes cluster. And then we'll do all

434
00:28:06,908 --> 00:28:09,978
the steps associated with our build. We're going to build

435
00:28:10,064 --> 00:28:13,402
our docker image doing

436
00:28:13,456 --> 00:28:17,002
all of the steps inside of our docker file. We will push that

437
00:28:17,056 --> 00:28:20,634
resulting image to our image registry. We will replace

438
00:28:20,682 --> 00:28:24,042
all the secrets inside of our Kubernetes yaml file

439
00:28:24,106 --> 00:28:27,470
and finally apply that Yaml file into kubernetes.

440
00:28:28,290 --> 00:28:32,080
That looks great. So with this in place

441
00:28:33,030 --> 00:28:36,514
let's start the commit and this

442
00:28:36,552 --> 00:28:40,740
will be create GitHub actions build.

443
00:28:41,430 --> 00:28:44,514
Perfect. Now this just puts a

444
00:28:44,552 --> 00:28:48,546
file inside of our repository, inside the GitHub workflows

445
00:28:48,578 --> 00:28:53,762
folder. And we named the file Kubernetes

446
00:28:53,826 --> 00:28:57,254
Yaml. It's just a regular file inside of our

447
00:28:57,292 --> 00:29:00,330
build. So if I come in here and I say git pull,

448
00:29:00,480 --> 00:29:04,122
then we can pull that down and get at that content here

449
00:29:04,176 --> 00:29:07,674
inside of vs code as well. So if we need to

450
00:29:07,712 --> 00:29:11,546
adjust this, we can just pull out content. So in

451
00:29:11,568 --> 00:29:14,846
this case I added an extra comment. We can remove that and

452
00:29:14,868 --> 00:29:18,766
we're doing just fine. Oh, I've got an extra line there too.

453
00:29:18,948 --> 00:29:22,682
Now because we have a folder inside GitHub workflows,

454
00:29:22,746 --> 00:29:26,354
it kicked off a build. So let's come back here and we can see this

455
00:29:26,392 --> 00:29:29,714
build is running. There's our orange dot and we can

456
00:29:29,752 --> 00:29:33,598
pop open the details of that build. Now it's

457
00:29:33,614 --> 00:29:36,786
going to do each of those steps. So it checked out

458
00:29:36,808 --> 00:29:39,862
all of our content, did the docker login Kubernetes set

459
00:29:39,916 --> 00:29:43,826
context. Now it's digging through all of the steps inside of our docker

460
00:29:43,858 --> 00:29:46,918
file. Finally, once it gets done with the docker file, it's going to

461
00:29:46,924 --> 00:29:50,874
push that up to our container registry and then finally do that

462
00:29:50,912 --> 00:29:54,346
content of getting it into kubernetes. So it

463
00:29:54,368 --> 00:29:58,406
looks like it just finished pushing it up to our container registry. And there's

464
00:29:58,438 --> 00:30:02,334
our Kubectl apply and we can see that our

465
00:30:02,372 --> 00:30:06,190
build is green. Very nice. Now let's do

466
00:30:06,260 --> 00:30:09,566
a cubectl get all and we

467
00:30:09,588 --> 00:30:13,162
can see our service is starting to spin up. If I hurry

468
00:30:13,226 --> 00:30:17,460
I can find it starting, but it's already running perfect.

469
00:30:18,470 --> 00:30:22,274
Now it does take a while for the DNS to propagate associated with

470
00:30:22,312 --> 00:30:25,698
our ingress controller. And so as a shortcut for that,

471
00:30:25,784 --> 00:30:29,394
there is a mechanism where we can use port forwarding to jump straight

472
00:30:29,442 --> 00:30:33,078
into the content. Now we could port forward into a specific

473
00:30:33,164 --> 00:30:36,534
pod or into a deployment or

474
00:30:36,572 --> 00:30:40,186
into a replica set or into a service. Let's do that.

475
00:30:40,368 --> 00:30:43,834
So here I'm going to say Kubectl port

476
00:30:43,952 --> 00:30:47,398
forward servicelevelup

477
00:30:47,494 --> 00:30:51,066
DevOps and I can forward port 80 on my local machine to

478
00:30:51,088 --> 00:30:54,778
port 80 inside the container or inside the service. But maybe I've

479
00:30:54,794 --> 00:30:58,266
got something else running on port 80 on my machine. So I'll use port 80

480
00:30:58,298 --> 00:31:02,014
80 instead. Okay, now with that set

481
00:31:02,052 --> 00:31:05,582
up I can come here into localhost

482
00:31:05,726 --> 00:31:09,714
80 80. And I can see that we've got our

483
00:31:09,752 --> 00:31:13,346
website online. Welcome to comp 42 SRE 2021.

484
00:31:13,448 --> 00:31:16,982
Woohoo. Now it did all of those steps to get

485
00:31:17,036 --> 00:31:20,962
from our source code all the way to our running container

486
00:31:21,026 --> 00:31:25,026
inside of kubernetes. Now we did skip

487
00:31:25,058 --> 00:31:28,950
a few steps. It could be nice if we built a readme

488
00:31:29,030 --> 00:31:32,518
here and we did skip over pull requests,

489
00:31:32,534 --> 00:31:35,882
so let's come back to that. Now first up

490
00:31:35,936 --> 00:31:40,490
let's build a reaDme. I'm going to build a readme

491
00:31:41,170 --> 00:31:44,638
MD and let's go grab some content

492
00:31:44,724 --> 00:31:48,234
for that readme. Here's some readme

493
00:31:48,282 --> 00:31:51,680
content. And wouldn't it be cool if we could put

494
00:31:52,470 --> 00:31:56,018
a status badge here showing the status of

495
00:31:56,024 --> 00:31:59,566
our builds. Let's come back here into actions

496
00:31:59,758 --> 00:32:03,342
and pick our build and let's

497
00:32:03,406 --> 00:32:07,718
create a status badge. I'll copy that content into place

498
00:32:07,884 --> 00:32:11,478
and let's paste it right here.

499
00:32:11,644 --> 00:32:15,666
There we go. There's our status badge. Now let's

500
00:32:15,698 --> 00:32:18,826
take a look at the content that we've got. Ready to go?

501
00:32:18,928 --> 00:32:22,566
Let's stage all these changes in our docker ignore file.

502
00:32:22,598 --> 00:32:26,598
Oh yes, we forgot to ignore the kdes yaml file.

503
00:32:26,694 --> 00:32:29,910
Here's our new readme file and we

504
00:32:30,000 --> 00:32:33,822
modified a few things here. So add

505
00:32:33,956 --> 00:32:37,246
readme and fix

506
00:32:37,348 --> 00:32:41,360
typos. Let's commit that

507
00:32:42,530 --> 00:32:44,580
and then push that into place.

508
00:32:45,590 --> 00:32:48,946
Git, push origin main, that will send that up

509
00:32:48,968 --> 00:32:53,106
to GitHub. And because we have that content

510
00:32:53,208 --> 00:32:56,994
in place, it's actually going to kick off a new build. Let's watch it because

511
00:32:57,032 --> 00:33:00,438
it's really fun. Last time we went in here and we went to details to

512
00:33:00,444 --> 00:33:04,054
get out our build. This time let's go to actions and we can

513
00:33:04,092 --> 00:33:08,120
choose our particular workflow. Or I see the build started right here.

514
00:33:08,570 --> 00:33:12,234
That's great. Let's dig into that particular build and watch

515
00:33:12,272 --> 00:33:15,754
it go. So the first step is to Docker login and then

516
00:33:15,792 --> 00:33:19,942
Kubernetes login. It did both of those. Now it's pulling down the dependencies

517
00:33:20,006 --> 00:33:23,770
and starting into each of those steps inside of our docker file.

518
00:33:23,930 --> 00:33:27,326
Our first step is to copy the

519
00:33:27,508 --> 00:33:30,846
CS proge and then run net restore. Looks like that

520
00:33:30,868 --> 00:33:34,110
worked out great. Then we'll copy in everything else and run our

521
00:33:34,180 --> 00:33:38,146
net build. In this case our build succeeded. That was wonderful. Let's run

522
00:33:38,168 --> 00:33:41,518
all of our tests. There are no failing tests because there are no tests.

523
00:33:41,614 --> 00:33:45,058
Then we'll run our net publish, finally copying that into

524
00:33:45,144 --> 00:33:48,342
our new production runtime image and

525
00:33:48,396 --> 00:33:51,926
push that image up to our registry. We're back in

526
00:33:51,948 --> 00:33:55,766
our regular docker script and with that in our registry then we

527
00:33:55,788 --> 00:33:58,878
will push that up to Kubernetes and we have the latest version

528
00:33:58,914 --> 00:34:02,554
running inside of Kubernetes. Perfect. The other thing we

529
00:34:02,592 --> 00:34:05,980
have now that we have this readme is this

530
00:34:06,590 --> 00:34:10,426
status badge that will get us straight to the build results associated

531
00:34:10,458 --> 00:34:12,480
with that build. Perfect.

532
00:34:13,730 --> 00:34:18,010
Now the other thing we wanted to take on is to do pull requests.

533
00:34:18,170 --> 00:34:22,430
So let's close this and

534
00:34:22,580 --> 00:34:25,922
close this now here's the build

535
00:34:25,976 --> 00:34:29,410
that we built so far. We could definitely come in here

536
00:34:29,480 --> 00:34:33,582
to GitHub and we could click on edit

537
00:34:33,646 --> 00:34:36,966
and get back into the designer where we have the marketplace and we

538
00:34:36,988 --> 00:34:40,454
can edit the things. But in this case let's just modify it

539
00:34:40,492 --> 00:34:43,926
as a file here in our repository. Now I want to

540
00:34:43,948 --> 00:34:48,222
build a new workflow for DockerPr

541
00:34:48,386 --> 00:34:52,090
Yaml and this will run for

542
00:34:52,160 --> 00:34:53,370
pull requests.

543
00:34:55,310 --> 00:34:59,414
So here I want to do the docker

544
00:34:59,462 --> 00:35:02,250
build for prs.

545
00:35:02,670 --> 00:35:06,190
Now I want to run on all the branches that are not

546
00:35:06,260 --> 00:35:09,658
main in case I do pull requests based on other branches.

547
00:35:09,754 --> 00:35:13,890
And then I also want to say pull request and

548
00:35:14,040 --> 00:35:18,100
branches. I will do this on

549
00:35:19,030 --> 00:35:22,754
all branches. So if I do a pull request from any

550
00:35:22,792 --> 00:35:26,274
branch I will kick off this run. And if I commit to

551
00:35:26,312 --> 00:35:30,086
any other branch then I'll also kick off this run. Now as

552
00:35:30,108 --> 00:35:33,494
part of doing a pull request. I definitely don't want to deploy to

553
00:35:33,532 --> 00:35:37,000
my production kubernetes environment. So let's delete that step

554
00:35:37,370 --> 00:35:41,002
because I'm not deploying. I don't need to put

555
00:35:41,056 --> 00:35:45,082
secrets in place because I'm not deploying. I also don't need to log into

556
00:35:45,136 --> 00:35:48,566
kubernetes. Let's delete that step. I also don't

557
00:35:48,598 --> 00:35:52,426
want to push the resulting image into my container

558
00:35:52,458 --> 00:35:55,822
registry. Let's delete that step. Now I also don't need to log

559
00:35:55,876 --> 00:35:59,440
in, so let's delete that step. Docker build

560
00:35:59,890 --> 00:36:03,822
APR and now I don't even necessarily

561
00:36:03,886 --> 00:36:07,140
want to tag it with my container registry. I'll just say

562
00:36:07,670 --> 00:36:11,314
level up DevOps PR there we go.

563
00:36:11,432 --> 00:36:15,090
Now we have a build suitable for pull requests.

564
00:36:15,590 --> 00:36:19,014
It will build on all branches that are not main. It will build on all

565
00:36:19,052 --> 00:36:23,046
pull requests and it will only do all of the build steps inside of our

566
00:36:23,068 --> 00:36:27,158
docker file. Now this still will do all of the build,

567
00:36:27,244 --> 00:36:30,730
test and publish, make sure that our image will

568
00:36:30,800 --> 00:36:33,974
build successfully. And if we have any failing unit tests

569
00:36:34,022 --> 00:36:37,834
or if we have any syntax errors in our source code, then our

570
00:36:37,872 --> 00:36:41,470
pr will definitely fail. Okay so

571
00:36:41,540 --> 00:36:45,310
let's commit this content to our registry

572
00:36:45,650 --> 00:36:49,854
and we will say PR build and

573
00:36:49,892 --> 00:36:53,650
let's commit it and push that up to

574
00:36:53,720 --> 00:36:59,122
git push origin main now

575
00:36:59,176 --> 00:37:03,362
we changed our main branch. We didn't change a pull request. So because

576
00:37:03,416 --> 00:37:06,526
we changed our main branch it's going to kick off a new build.

577
00:37:06,648 --> 00:37:10,246
Perfect. This is so much fun to watch. It's going to

578
00:37:10,268 --> 00:37:13,682
do exactly those steps. It will do all of the steps

579
00:37:13,746 --> 00:37:17,206
inside of our build script. And so

580
00:37:17,228 --> 00:37:20,762
our first step is to log into Docker and Kubernetes. The next

581
00:37:20,816 --> 00:37:24,438
is to start enumerating through all of our steps in our docker file.

582
00:37:24,534 --> 00:37:28,010
The first step is to go grab all of the

583
00:37:28,080 --> 00:37:31,674
base image and then we copy in all of our content.

584
00:37:31,872 --> 00:37:35,566
Net restore. That net restore worked really well. We'll do

585
00:37:35,588 --> 00:37:39,546
a net build. Let's see if our source code worked. Yes, no warnings,

586
00:37:39,578 --> 00:37:43,226
no errors. That's great. Let's run all of our tests, no failing tests.

587
00:37:43,338 --> 00:37:47,042
Let's publish. Then we'll copy that content into our new

588
00:37:47,096 --> 00:37:50,302
image. And now we're done with our docker file.

589
00:37:50,366 --> 00:37:53,582
And the next step is to push that image

590
00:37:53,646 --> 00:37:57,922
inside into our containers registry and finally start that new copy

591
00:37:57,986 --> 00:38:01,000
inside of kubernetes. That worked.

592
00:38:01,370 --> 00:38:05,218
And if we now come into our actions,

593
00:38:05,314 --> 00:38:08,486
we see that we not only have that build that we just did, but we

594
00:38:08,508 --> 00:38:11,980
also have a new build for pull requests. Perfect.

595
00:38:12,350 --> 00:38:16,026
Now what if we want to do builds for other environments? Maybe a

596
00:38:16,048 --> 00:38:19,258
dev test environment. So we could do a similar thing.

597
00:38:19,344 --> 00:38:23,214
We could come in here and we could duplicate this

598
00:38:23,252 --> 00:38:27,374
build, switch this from main to develop

599
00:38:27,572 --> 00:38:31,802
and start replacing these. Maybe this is the ACR URL

600
00:38:31,866 --> 00:38:35,250
for develop and the

601
00:38:35,320 --> 00:38:39,090
username for develop. Well that gets a little

602
00:38:39,240 --> 00:38:42,878
crazy. Let's instead use GitHub

603
00:38:42,974 --> 00:38:46,530
environments. So we're going to modify this same build,

604
00:38:46,600 --> 00:38:49,814
the normal build that we want to do our things and it will be on

605
00:38:49,852 --> 00:38:53,218
the main branch and the develop branch,

606
00:38:53,394 --> 00:38:56,534
which means we need to come here in our pull request and say,

607
00:38:56,652 --> 00:39:02,346
but this is also not

608
00:39:02,448 --> 00:39:05,754
develop. And now let's set up our

609
00:39:05,952 --> 00:39:09,718
GitHub actions secrets for environments. So I'm

610
00:39:09,734 --> 00:39:13,946
going to come here into settings and I will come here into secrets.

611
00:39:14,058 --> 00:39:17,646
And right now all these secrets are not associated with a particular

612
00:39:17,748 --> 00:39:21,758
environment or branch, but I can create environment specific

613
00:39:21,924 --> 00:39:26,146
secrets. Now that's perfect. If I create environment specific

614
00:39:26,248 --> 00:39:30,062
secrets for each branch, then I can put the develop branch secrets

615
00:39:30,126 --> 00:39:33,314
that have the exact same names with the develop

616
00:39:33,432 --> 00:39:37,174
specific values. Now I only need

617
00:39:37,212 --> 00:39:41,570
to have one build file that will use the exact same secrets

618
00:39:41,650 --> 00:39:45,890
as all of the details. But because I have five different secrets,

619
00:39:45,970 --> 00:39:49,754
I can now push to my develop environment with

620
00:39:49,792 --> 00:39:53,414
that exact same build script. So let's

621
00:39:53,462 --> 00:39:57,100
commit this content. We've got our,

622
00:40:00,690 --> 00:40:04,506
we'll stage our change to our build file that adds

623
00:40:04,538 --> 00:40:07,946
the develop branch and our pr build that removes

624
00:40:07,978 --> 00:40:11,246
the develop branch and add a build

625
00:40:11,348 --> 00:40:14,466
for develop. Now because we're using

626
00:40:14,568 --> 00:40:17,906
environment specific secrets, we can do all

627
00:40:17,928 --> 00:40:20,370
this with one build file.

628
00:40:21,830 --> 00:40:24,770
Now we just kicked off a build. So actually,

629
00:40:24,840 --> 00:40:28,018
let me git push origin main we just kicked

630
00:40:28,034 --> 00:40:31,078
off a build and we've seen that work a bunch of times.

631
00:40:31,164 --> 00:40:34,742
It is really fun. This was really cool getting

632
00:40:34,796 --> 00:40:38,186
to show you GitHub actions and how you can level up

633
00:40:38,208 --> 00:40:42,150
your DevOps for containers with Docker and Kubernetes.

634
00:40:42,310 --> 00:40:46,714
You can grab the code that we just built up on GitHub@GitHub.com.

635
00:40:46,752 --> 00:40:50,246
Slash Robrich levelup DevOps, GitHub actions,

636
00:40:50,278 --> 00:40:54,410
kubernetes or go to robrich.org, click on presentations

637
00:40:54,490 --> 00:40:58,634
and it's right there. Find me at that spot where the conference is designated

638
00:40:58,682 --> 00:41:02,606
for live Q and A. Or if you're watching this video later, hit me up

639
00:41:02,628 --> 00:41:06,366
on Twitter at Robrich. And this has been so much

640
00:41:06,388 --> 00:41:09,406
fun getting to show you this build. Thanks for

641
00:41:09,428 --> 00:41:12,720
joining us at Comp 42.

642
00:41:13,650 --> 00:41:17,960
At it comp 42

643
00:41:18,810 --> 00:41:22,950
Sre 2021 conference

644
00:41:23,370 --> 00:41:24,120
thanks.

