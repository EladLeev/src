1
00:00:23,370 --> 00:00:27,110
Hi everyone, Justin here from Cape privacy. Today I'm going to be talking about

2
00:00:27,260 --> 00:00:30,466
protecting sensitive data and machine learning models.

3
00:00:30,658 --> 00:00:34,338
More specifically, I'm going to be talking about confidential computing, how Cape

4
00:00:34,354 --> 00:00:37,922
enables confidential computing, and show a couple of demos

5
00:00:37,986 --> 00:00:41,574
with our Python SDK called Pycape. So who am I?

6
00:00:41,612 --> 00:00:45,906
I've been working at Cape for about five years. I've learned a lot about confidential

7
00:00:45,938 --> 00:00:50,014
computing, as can emerging technology and how it can be used to protect sensitive data

8
00:00:50,092 --> 00:00:53,994
and machine learning models. Mostly backend developer,

9
00:00:54,042 --> 00:00:57,438
but I have some experience working in front end with

10
00:00:57,524 --> 00:01:00,654
Node JS and JavaScript, and I've also spent some time

11
00:01:00,692 --> 00:01:04,190
building sdks out written in Python and

12
00:01:04,260 --> 00:01:07,518
some other languages. You can pick up Pycape

13
00:01:07,534 --> 00:01:11,010
right now and try Cape out. We're looking for feedback on all aspects,

14
00:01:11,350 --> 00:01:15,026
so I encourage you to try it out and let us

15
00:01:15,048 --> 00:01:18,710
know what you think. We'll provide links to documentation, getting started guides,

16
00:01:19,210 --> 00:01:22,486
and a link to join our discord so you can easily try cape out and

17
00:01:22,508 --> 00:01:25,826
get started today. So let's

18
00:01:25,858 --> 00:01:29,630
get tired of talking about what confidential computing really is. My favorite analogy

19
00:01:29,650 --> 00:01:32,986
is to compare it to how ubiquitous encryption at

20
00:01:33,008 --> 00:01:36,726
rest and encryption transit are. Confidential computing

21
00:01:36,758 --> 00:01:40,266
is a broad set of technologies that allows data to be protected while in use.

22
00:01:40,368 --> 00:01:43,690
Data is kept private and is not leaked to whatever party,

23
00:01:43,770 --> 00:01:47,246
such as a cloud provider is actually processing the data. There are

24
00:01:47,268 --> 00:01:51,274
many different technologies that can complement each other to help provide a confidential

25
00:01:51,322 --> 00:01:54,570
computing system, technologies such as multiparty computation,

26
00:01:54,650 --> 00:01:58,370
fully home orochropic encryption, and trusted execution environments,

27
00:01:58,710 --> 00:02:02,770
or enclaves. Today, Cape's main focus is enclaves.

28
00:02:04,310 --> 00:02:07,686
Before digging into enclaves and Cape's main service, I want to talk

29
00:02:07,708 --> 00:02:11,186
about how important it is to keep encryption and key management

30
00:02:11,218 --> 00:02:14,646
as essential primitives when developing a confidential computing platform.

31
00:02:14,828 --> 00:02:18,326
Even though thinking encryption and key management is common and should be

32
00:02:18,348 --> 00:02:22,026
more common for software developers, it can still be quite complicated to do these

33
00:02:22,048 --> 00:02:25,306
things in a seamless way. When implementing encryption for your

34
00:02:25,328 --> 00:02:28,682
application, there are a lot of decisions to be made, such as

35
00:02:28,736 --> 00:02:31,934
ease using EAS,

36
00:02:32,052 --> 00:02:36,910
which mode to use, for example GCM or CBC security.

37
00:02:37,060 --> 00:02:41,870
Depending on what is chosen, security could be better or worse efficiency.

38
00:02:42,450 --> 00:02:46,146
Depending on methods chosen, one could be more efficient than the

39
00:02:46,168 --> 00:02:49,762
other, and finally, how to pack all the required data

40
00:02:49,896 --> 00:02:51,890
before sending it to a consumer.

41
00:02:53,110 --> 00:02:56,386
Finally, here's an example from Kai Cape source code of some vague

42
00:02:56,418 --> 00:03:00,102
looking acronyms that should probably be understood before using them.

43
00:03:00,236 --> 00:03:04,262
You can see Shaw 256, OAEP and

44
00:03:04,316 --> 00:03:08,054
MGF one. Also, should you be passing something

45
00:03:08,092 --> 00:03:12,262
for the label or not? Ideally, you would understand all these acronyms,

46
00:03:12,326 --> 00:03:16,086
the choices that must be made and the implications of using them if you implemented

47
00:03:16,118 --> 00:03:20,102
them yourself. While you can likely look up good defaults for encryption parameters

48
00:03:20,246 --> 00:03:23,702
without some background knowledge, it can be still difficult to make the right choices

49
00:03:23,766 --> 00:03:27,402
or even understand what you're deciding. It'd be much easier if a library

50
00:03:27,466 --> 00:03:31,534
could make the best choices for you. In addition, the library can provide education and

51
00:03:31,572 --> 00:03:35,118
the option to configure things if needed. This is our goal with Pycape and

52
00:03:35,124 --> 00:03:38,562
our other sdks. Key management can be quite hard

53
00:03:38,616 --> 00:03:41,986
as well. Depending on the cloud provider you are using, you would have to

54
00:03:42,008 --> 00:03:45,502
consider which products best fit the needs of your software. AWS,

55
00:03:45,566 --> 00:03:48,982
for example, has KMS and secret managers and even other products

56
00:03:49,036 --> 00:03:52,966
help manage keys or other secrets. Simplifying this

57
00:03:52,988 --> 00:03:56,646
is just one way to do key management would be quite powerful. So from

58
00:03:56,668 --> 00:04:00,554
the outset, one of Cape's major goal was to make this easier to

59
00:04:00,592 --> 00:04:04,458
manage for the average software developer. Software developers need to

60
00:04:04,624 --> 00:04:08,250
consider the importance of keeping data safe in their day to day activities.

61
00:04:10,430 --> 00:04:13,726
Alright, next we're going to talk about nitro enclaves. Cape is

62
00:04:13,748 --> 00:04:17,146
primarily built upon AWS nitro enclaves nitro

63
00:04:17,178 --> 00:04:20,874
enclaves is a service that allows users to deploy code to a lockdown

64
00:04:20,922 --> 00:04:24,350
containing no one can see what is running inside the container.

65
00:04:24,690 --> 00:04:27,826
Awdes cannot see and when running on Cape's platform,

66
00:04:27,928 --> 00:04:31,410
we cannot see what the users are running. Through an attestation process,

67
00:04:31,480 --> 00:04:35,054
the person who is triggering the code to run inside the enclave can confirm

68
00:04:35,102 --> 00:04:38,534
that they are in fact talking to an enclave and is running

69
00:04:38,572 --> 00:04:42,310
the code that they think it is. Everything is fully auditable.

70
00:04:43,530 --> 00:04:47,174
Nitro enclaves is a flexible platform because you can virtually take any

71
00:04:47,212 --> 00:04:50,278
container and turn it into an enclave image file.

72
00:04:50,374 --> 00:04:54,122
Often referred to as an EIF. This file is used

73
00:04:54,256 --> 00:04:58,026
to deploy your code to secure container. The EIF contains the

74
00:04:58,048 --> 00:05:01,546
whole os file system that is generated from

75
00:05:01,568 --> 00:05:05,258
the docker container plus metadata to assist with attestation.

76
00:05:05,434 --> 00:05:08,654
It can also be signed with a private key to prove that it came from

77
00:05:08,692 --> 00:05:12,446
a specific source. Eifs contain metadata that

78
00:05:12,468 --> 00:05:14,880
help tell a user where the EIF came from.

79
00:05:15,250 --> 00:05:18,866
Eifs can be signed by a private key to prove the identity of the

80
00:05:18,888 --> 00:05:22,594
entity creating the EIF. A hash of the signing certificate is

81
00:05:22,632 --> 00:05:26,754
also stored in a platform configuration register or PCR.

82
00:05:26,882 --> 00:05:31,190
The pcrs contain hashes of important information about the EIF.

83
00:05:31,530 --> 00:05:35,334
These help enable the attestation process so the user knows exactly

84
00:05:35,452 --> 00:05:38,630
what is running when communicating with the enclave.

85
00:05:39,530 --> 00:05:43,226
Since I've mentioned it a bit already, I'm going to go over what

86
00:05:43,408 --> 00:05:46,538
attestation is from a high level. Attestation is the

87
00:05:46,544 --> 00:05:50,198
process where a user can communicate with enclave and prove the enclave

88
00:05:50,214 --> 00:05:54,234
is what the user thinks it is. During communication, the enclave

89
00:05:54,282 --> 00:05:57,786
sends what is called an attestation document, this document

90
00:05:57,818 --> 00:06:01,566
containing all the information needed to prove what software the enclave is running.

91
00:06:01,668 --> 00:06:05,218
The pcrs are one of the most important aspects of

92
00:06:05,224 --> 00:06:09,374
the document. Along with these, the document is signed by a root AWS

93
00:06:09,422 --> 00:06:13,086
certificate, which also must be verified to confirm the authenticity

94
00:06:13,118 --> 00:06:16,466
of the document. Next up, an overview of

95
00:06:16,488 --> 00:06:20,690
Kate Kate has been working on the bleeding edge of confidential computing

96
00:06:20,770 --> 00:06:24,550
for over four years. Our platform helps developers easily protect

97
00:06:24,620 --> 00:06:28,282
their data and their users'data. We provide three main entry points

98
00:06:28,336 --> 00:06:33,610
into our system. Here are those entry points unencrypted

99
00:06:34,030 --> 00:06:37,514
as previously mentioned, while processing data securely, it is

100
00:06:37,552 --> 00:06:41,774
just as important to provide simple encryption primitives for developers to

101
00:06:41,892 --> 00:06:45,978
use to easily encrypt their data before sending it to be processed.

102
00:06:46,154 --> 00:06:49,854
You can easily encrypt your data for yourself or another entity you

103
00:06:49,892 --> 00:06:50,480
trust.

104
00:06:52,370 --> 00:06:55,578
Deploy deploy is used to send

105
00:06:55,604 --> 00:06:59,166
a Python function to cave to eventually be run inside the nitro enclave.

106
00:06:59,278 --> 00:07:02,434
This is a secure processing code that will eventually be used

107
00:07:02,472 --> 00:07:05,220
to process your previously encrypted data.

108
00:07:06,550 --> 00:07:10,322
Run run is used to run the function that you just deployed.

109
00:07:10,466 --> 00:07:13,974
Here, you pass a function, id the encrypted data and

110
00:07:14,012 --> 00:07:17,570
in return you get some output depending on what your function does.

111
00:07:17,740 --> 00:07:20,220
There are some concrete examples coming up soon.

112
00:07:23,150 --> 00:07:26,698
Cape provides many sdks for encrypting data and interacting with the

113
00:07:26,704 --> 00:07:30,422
cape system. We provide sdks in Python JavaScript,

114
00:07:30,566 --> 00:07:33,958
either from the browser or with node JS and Java.

115
00:07:34,054 --> 00:07:37,294
We also have a CLI tool written in golay. We plan

116
00:07:37,332 --> 00:07:40,762
on supporting as many languages as possible, so keep an eye out for new languages

117
00:07:40,826 --> 00:07:44,414
and let us know if there's another language you'd like to see an SDK

118
00:07:44,462 --> 00:07:48,226
written in. So next we're going to talk about the

119
00:07:48,248 --> 00:07:51,330
core components written in Python,

120
00:07:52,070 --> 00:07:54,210
Pycape and Cape functions.

121
00:07:55,110 --> 00:07:58,518
Pycape is the Cape SDK written in Python. It provides all the

122
00:07:58,524 --> 00:08:01,942
core functionality of encrypting data and deploying and running

123
00:08:01,996 --> 00:08:05,574
the function, because currently a small component written in rust used

124
00:08:05,612 --> 00:08:08,930
to automatically encrypt the data before being sent to the backend,

125
00:08:09,090 --> 00:08:12,714
whether you've previously encrypted or not. As a side

126
00:08:12,752 --> 00:08:16,326
note, at Cape we hope to write all common features

127
00:08:16,358 --> 00:08:19,882
of our SDK in rust. Building common components helps reduce the service

128
00:08:19,936 --> 00:08:23,214
area of potential bugs while also making the resulting code more

129
00:08:23,252 --> 00:08:26,830
auditable because it's not spread out amongst different sdks

130
00:08:28,530 --> 00:08:32,206
so, cape functions, what are those? The functions that are deployed to Cape are

131
00:08:32,228 --> 00:08:36,302
also currently written in Python. We have utilities for packaging your Python dependencies

132
00:08:36,366 --> 00:08:40,462
and your main code altogether. The resulting directory

133
00:08:40,526 --> 00:08:43,746
is what is then uploaded to cape using the deploy function.

134
00:08:43,928 --> 00:08:47,160
Here's an example of what the script must look like.

135
00:08:49,290 --> 00:08:53,346
As you can see, it contains a function called Cape

136
00:08:53,378 --> 00:08:57,266
handler that accepts a byte string input and then returns

137
00:08:57,298 --> 00:09:00,666
something, either a string or byte string. So all

138
00:09:00,688 --> 00:09:03,898
cape functions will have this format and you'll see in the

139
00:09:03,904 --> 00:09:06,554
demo next what that looks like.

140
00:09:06,592 --> 00:09:09,926
Exactly. It's demo time,

141
00:09:10,048 --> 00:09:13,114
finally. Okay, let's transition

142
00:09:13,162 --> 00:09:14,270
to the terminal.

143
00:09:16,770 --> 00:09:20,382
Today we're going to use this image classification model, Onyx model,

144
00:09:20,436 --> 00:09:23,898
to help with our examples. It uses a Resnet model pre trained

145
00:09:23,914 --> 00:09:26,946
on imagenet. For those of you who don't know what Onyx is, it stands for

146
00:09:26,968 --> 00:09:30,386
open neural network exchange. It is an ecosystem for machine learning and

147
00:09:30,408 --> 00:09:34,274
AI. We'll be using the Onyx runtime today to run our machine learning model.

148
00:09:34,392 --> 00:09:36,550
The first step is to deploy our script.

149
00:09:38,250 --> 00:09:41,750
So here is the simple python script we're deploying to cape.

150
00:09:45,290 --> 00:09:48,906
So first, all our imports. We import JSOn numpy and

151
00:09:48,928 --> 00:09:52,380
Onyx runtime. We load the Resnet model

152
00:09:52,830 --> 00:09:57,110
with this inference session. We open an imagenet underscore classes

153
00:09:57,190 --> 00:10:00,606
text file, which is all the classifications that are in

154
00:10:00,628 --> 00:10:03,120
imagenet. I think there's a thousand of them.

155
00:10:03,490 --> 00:10:06,990
And then get top five classes.

156
00:10:07,410 --> 00:10:10,926
Uses the softmac function to print out the classes in

157
00:10:10,948 --> 00:10:14,734
a nice way. So finally we have the

158
00:10:14,772 --> 00:10:18,402
main section. It's the Cape handler, which will end up getting being called

159
00:10:18,456 --> 00:10:21,278
inside the enclave. It takes inputs, bytes.

160
00:10:21,454 --> 00:10:24,530
It takes those bytes and puts them inside of a numpy buffer.

161
00:10:25,030 --> 00:10:27,974
And then it puts it inside something that Onyx will understand.

162
00:10:28,172 --> 00:10:31,240
And then finally we run the actual model.

163
00:10:31,930 --> 00:10:35,314
We take the output from that model and we generate

164
00:10:35,362 --> 00:10:39,122
the top five classes. Then we return the classes

165
00:10:39,266 --> 00:10:40,870
in a JSON block.

166
00:10:42,670 --> 00:10:45,180
So after that we can actually deploy our model.

167
00:10:46,110 --> 00:10:49,642
So next being we need to do is prepare for deployment. First we create the

168
00:10:49,696 --> 00:10:52,954
deployment folder. To make things a little bit easier,

169
00:10:53,002 --> 00:10:56,670
we define an environment variable called Onyx

170
00:10:57,970 --> 00:11:04,750
underscore resonant, underscore, deploy resonant.

171
00:11:07,270 --> 00:11:11,586
We make that directory and

172
00:11:11,608 --> 00:11:15,534
then we can copy a few things into it. So we copied

173
00:11:15,582 --> 00:11:17,990
the app file. We just looked at app Py.

174
00:11:20,090 --> 00:11:24,166
We can copy the model, which is a directory. It contains everything.

175
00:11:24,348 --> 00:11:27,560
Onyx needs to be able to run the model itself.

176
00:11:32,350 --> 00:11:35,642
And then we need to copy that imagenet underscore classes text

177
00:11:35,696 --> 00:11:37,820
file that we were just looking at.

178
00:11:43,890 --> 00:11:47,854
Okay, so next part is a little more complicated, but we need

179
00:11:47,892 --> 00:11:51,418
to add the Onyx runtime dependencies. We need to make sure it's added

180
00:11:51,514 --> 00:11:55,962
using a proper python environment because that is what we're running inside an enclave.

181
00:11:56,106 --> 00:12:00,142
To do this, we use Docker to install the requirements inside the build directory

182
00:12:00,206 --> 00:12:03,458
deployment directory. I'm just going to copy and paste this one because

183
00:12:03,464 --> 00:12:06,818
it's a bit more complicated, but here you can see it's creating

184
00:12:06,834 --> 00:12:10,434
up some volumes connections

185
00:12:10,482 --> 00:12:13,640
here, setting the working directory to build,

186
00:12:14,570 --> 00:12:18,454
and then it's actually using this Python 3.9 slim bullseye

187
00:12:18,582 --> 00:12:22,118
docker container. And then next we're just simply

188
00:12:22,294 --> 00:12:27,434
installing the Onyx runtime and the target is that

189
00:12:27,472 --> 00:12:31,390
volume we just connected to our deployment directory.

190
00:12:34,210 --> 00:12:38,046
So yeah, it'll take a few seconds, but while it looks

191
00:12:38,068 --> 00:12:41,806
a bit complicated, we hope on adding helper functions to

192
00:12:41,828 --> 00:12:43,540
assist in this step in the future.

193
00:12:48,300 --> 00:12:51,704
Next up we can deploy with the experimental CLI package of

194
00:12:51,742 --> 00:12:55,364
Pykeep, which currently wraps the Golang CLI command to easily

195
00:12:55,412 --> 00:12:58,604
be able to deploy directly from Python in the future we

196
00:12:58,642 --> 00:13:01,836
may add more native solution here. So let's take a

197
00:13:01,858 --> 00:13:02,430
look.

198
00:13:05,520 --> 00:13:08,984
Okay, so we're doing all our specifically

199
00:13:09,112 --> 00:13:12,220
the important one is to import the experimental

200
00:13:12,300 --> 00:13:16,124
package as CLI. Then down here we're

201
00:13:16,172 --> 00:13:19,664
calling CLI deploy with that

202
00:13:19,702 --> 00:13:23,284
directory we created earlier. And finally it prints out the function

203
00:13:23,482 --> 00:13:25,750
id which we'll need to use to run.

204
00:13:27,400 --> 00:13:29,750
Okay, so let's run that function.

205
00:13:30,760 --> 00:13:35,704
We'll export it to an environment variable so we can use it easily later and

206
00:13:35,742 --> 00:13:36,970
then there.

207
00:13:39,900 --> 00:13:43,620
So while that runs, let's talk about what's happening here. It's dipping the directory,

208
00:13:43,700 --> 00:13:46,612
connecting directly with enclave over a websock connection,

209
00:13:46,756 --> 00:13:50,264
running the attestation process, encrypting the function and then

210
00:13:50,302 --> 00:13:53,516
sending it directly to the enclave to be securely processed and stored for

211
00:13:53,538 --> 00:13:56,604
later use. The reason it was a bit slow here is because of the size

212
00:13:56,642 --> 00:14:00,032
of the transfer over the Internet. Machine learning models can take

213
00:14:00,086 --> 00:14:03,676
quite a bit of space sometimes. Okay, there, now it's

214
00:14:03,708 --> 00:14:05,810
done and we can try running it next.

215
00:14:07,620 --> 00:14:11,816
So to be able to run we need to get authentication

216
00:14:11,868 --> 00:14:15,860
token that is specifically scoped to the function we just created.

217
00:14:16,200 --> 00:14:20,944
So we'll export that to another environment

218
00:14:20,992 --> 00:14:21,700
variable.

219
00:14:25,100 --> 00:14:28,628
So here you can see we exported to the token

220
00:14:28,724 --> 00:14:32,916
environment variable. We call the Cape cli command

221
00:14:33,028 --> 00:14:36,472
token create. We pass the name and we pass the function

222
00:14:36,526 --> 00:14:38,140
Id that we created earlier.

223
00:14:42,400 --> 00:14:46,190
By the way, the function token id looks like this,

224
00:14:48,400 --> 00:14:58,648
it's just a random string. Basically it

225
00:14:58,754 --> 00:15:02,708
with the next script we'll able to actually run the deploy function.

226
00:15:02,874 --> 00:15:05,750
Let's go over the script we'll be using to run the prediction first.

227
00:15:11,000 --> 00:15:13,620
So once again at the top we have all our imports.

228
00:15:14,920 --> 00:15:18,296
A new one here is torch or pytorch. We'll be using that

229
00:15:18,318 --> 00:15:21,764
to preprocess the image. After that we load

230
00:15:21,812 --> 00:15:25,176
our environment variables so the token and function id that we've been being along the

231
00:15:25,198 --> 00:15:29,148
way. And here's the preprocessing process

232
00:15:29,234 --> 00:15:32,796
image file that I mentioned. So this just

233
00:15:32,818 --> 00:15:36,430
makes it so it's in a format that the Resnet model will understand.

234
00:15:39,600 --> 00:15:42,848
We could do this inside the enclave, but just to simplify a bit,

235
00:15:42,934 --> 00:15:44,960
we're doing it here in the user script.

236
00:15:46,020 --> 00:15:49,536
So we create a Cape context object here and then

237
00:15:49,558 --> 00:15:51,920
we create a handle for the function and the token.

238
00:15:52,840 --> 00:15:55,568
So here we're actually preprocessing the image.

239
00:15:55,744 --> 00:15:59,540
You can see here we're loading a dog JPeG file

240
00:16:00,760 --> 00:16:04,388
and cape run is where we actually run the

241
00:16:04,394 --> 00:16:08,248
models in the background. So we're passing the function and token and then the

242
00:16:08,254 --> 00:16:11,720
input puts bytes which is the preprocess image file.

243
00:16:12,540 --> 00:16:16,424
So the top five classes are returned and

244
00:16:16,462 --> 00:16:19,564
then we load the JSON and then

245
00:16:19,602 --> 00:16:23,132
we print them in a nice way. So this

246
00:16:23,186 --> 00:16:26,888
print function will end up printing the percentage

247
00:16:26,984 --> 00:16:28,190
of each class.

248
00:16:31,220 --> 00:16:34,464
Okay, before we run it, let's quickly see what

249
00:16:34,502 --> 00:16:36,320
image we're putting into the models.

250
00:16:39,860 --> 00:16:43,476
All right, so there's a dog, a pretty cute dog. Pretty sure

251
00:16:43,498 --> 00:16:46,756
that's a golden retriever puppy. So let's see

252
00:16:46,778 --> 00:16:48,180
what the model thinks.

253
00:16:51,640 --> 00:16:55,160
So we just need to run python run

254
00:16:55,230 --> 00:16:56,680
prediction py.

255
00:16:58,300 --> 00:17:01,896
So this is doing much of the same stuff as deploy. It's setting up the

256
00:17:01,918 --> 00:17:05,720
websocket connection, protecting and then encrypting the image.

257
00:17:09,200 --> 00:17:13,150
So once that done, now it's done. So we'll see the

258
00:17:13,760 --> 00:17:17,720
confidence in percentage of each class that it thinks

259
00:17:17,880 --> 00:17:20,370
the image we just put in could be.

260
00:17:21,140 --> 00:17:24,412
So you can see the winner here is golden retriever

261
00:17:24,556 --> 00:17:26,290
at 39.7%.

262
00:17:28,180 --> 00:17:32,096
Definitely not a tennis ball or a

263
00:17:32,118 --> 00:17:34,450
clumber, whatever that is.

264
00:17:35,300 --> 00:17:38,192
Next up, I'll show you a demo over in quiver functionality.

265
00:17:38,336 --> 00:17:41,536
This can be used as standalone or we can use it to call a cape

266
00:17:41,568 --> 00:17:45,316
function. When calling cape with a cape function, no changes are

267
00:17:45,338 --> 00:17:49,130
needed for the function. Let's look at a simple example first

268
00:17:49,980 --> 00:17:53,320
so we can take a look at this encrypt py file

269
00:17:54,540 --> 00:17:57,708
and we can see how simple it is. So first we import

270
00:17:57,794 --> 00:18:01,292
cape, we create the cape context and we just

271
00:18:01,346 --> 00:18:05,740
unencrypted this simple string hello world. By using cape unencrypted

272
00:18:06,240 --> 00:18:10,540
we get a ciphertext back, which is a byte string,

273
00:18:10,700 --> 00:18:14,416
and then we just print out encrypted and then decode the

274
00:18:14,438 --> 00:18:18,080
ciphertext to a string so we can look at it nicely.

275
00:18:19,620 --> 00:18:26,144
Okay, so now we can run this and

276
00:18:26,182 --> 00:18:29,284
we can see the encrypted string. There's a base 64

277
00:18:29,322 --> 00:18:33,156
encoded string that starts with a prefix cape. This is

278
00:18:33,178 --> 00:18:36,608
helpful to track where the string came from. And also cape can detect the

279
00:18:36,634 --> 00:18:39,956
string when it is passed into the cape function to automatically decrypt

280
00:18:39,988 --> 00:18:43,256
it inside the enclave. Now we can see how

281
00:18:43,278 --> 00:18:47,340
the image classifier model would work with the encrypted string.

282
00:18:51,680 --> 00:18:55,230
Here we can see that it's mostly the same except for this one unencrypted line.

283
00:18:56,000 --> 00:18:58,190
If we scroll down here we can see it.

284
00:18:59,940 --> 00:19:03,568
So we're just calling cape encrypt with the input bytes and sending it to the

285
00:19:03,574 --> 00:19:07,212
input bytes again. And just as before, we pass it into the cape

286
00:19:07,276 --> 00:19:08,210
one function,

287
00:19:11,780 --> 00:19:14,870
we quit it over here and then we can run it.

288
00:19:18,520 --> 00:19:22,416
We should get the exact same output as before, even though the input

289
00:19:22,448 --> 00:19:23,780
was encrypted.

290
00:19:30,730 --> 00:19:34,040
There we go, there's the results. Golden retriever again,

291
00:19:35,450 --> 00:19:39,580
I'm going to show one last example here of how to encrypt for someone else.

292
00:19:41,310 --> 00:19:44,858
So say if there's a service that you trust to decrypt your data, then you

293
00:19:44,864 --> 00:19:47,610
can encrypt it for that service specifically.

294
00:19:49,070 --> 00:19:50,540
So let's take a look.

295
00:19:53,490 --> 00:19:56,746
So I created a simple script here that takes one argument,

296
00:19:56,858 --> 00:20:00,446
which is the username of the user who you want to

297
00:20:00,468 --> 00:20:04,450
encrypt for. So just like before we call Cape encrypt

298
00:20:04,790 --> 00:20:08,660
and we have a message that says hi and then the name

299
00:20:11,670 --> 00:20:17,494
or the username as the Sys RGB and

300
00:20:17,532 --> 00:20:20,440
then we just decode it to text again.

301
00:20:25,210 --> 00:20:28,646
And then let's see, we can do cape docs, which is

302
00:20:28,668 --> 00:20:30,790
just our cape user,

303
00:20:31,850 --> 00:20:35,180
and we can see the encrypted string there it looks just before.

304
00:20:35,710 --> 00:20:39,674
All right, that's it for demos. We're going to go back to the slideshow for

305
00:20:39,712 --> 00:20:43,126
1 second. Here are some links

306
00:20:43,158 --> 00:20:47,306
to the documentation and our discord invite link. Please check them out.

307
00:20:47,488 --> 00:20:50,598
All right, thanks everyone for listening. Hope I inspired you to give Cape

308
00:20:50,614 --> 00:20:53,038
a try and see how this could be helpful in your day to day activities.

309
00:20:53,094 --> 00:20:56,754
These, as mentioned before, we're looking for feedback and are always ready

310
00:20:56,792 --> 00:20:59,620
to help out if needed, so please reach out.

311
00:20:59,990 --> 00:21:00,400
Bye everyone.

