1
00:00:00,250 --> 00:00:01,630
Are you an SRe?

2
00:00:03,570 --> 00:00:07,358
A developer? A quality

3
00:00:07,444 --> 00:00:11,162
engineer who wants to tackle the challenge of improving reliability

4
00:00:11,226 --> 00:00:14,970
in your DevOps? You can enable your DevOps for reliability

5
00:00:15,050 --> 00:00:18,654
with chaos native. Create your free account at

6
00:00:18,692 --> 00:01:17,126
Chaos native Litmus Cloud hi,

7
00:01:17,228 --> 00:01:20,390
my name is Vishnu Vardhan Chikoti and in this talk

8
00:01:20,460 --> 00:01:23,766
I am going to introduce about Arctic Arctic is a

9
00:01:23,788 --> 00:01:27,566
new SRE adoption framework that has been recently conceptualized

10
00:01:27,618 --> 00:01:31,370
by me to help with SRE adoption at enterprises.

11
00:01:32,030 --> 00:01:35,818
About me I have about 16 years of experience

12
00:01:35,984 --> 00:01:39,382
which is a diverse experience across site reliability engineering,

13
00:01:39,446 --> 00:01:43,034
product development and business analysis. For the initial

14
00:01:43,082 --> 00:01:46,670
part of my career I was in a product development business

15
00:01:46,740 --> 00:01:51,178
analyst tech ba kind of roles and then I did a career pivot

16
00:01:51,274 --> 00:01:55,246
towards the site reliability engineering area. Currently I work as

17
00:01:55,268 --> 00:01:59,006
a senior manager SRE at Fanatics Inc. And prior

18
00:01:59,038 --> 00:02:02,446
to fanatics I have worked with Broadridge bank of America,

19
00:02:02,558 --> 00:02:06,686
Tetora Consulting and DBS Bank. I also

20
00:02:06,728 --> 00:02:09,590
co authored a book by name,

21
00:02:09,740 --> 00:02:13,874
hands on site reliable two engineering and it has been published very recently

22
00:02:13,922 --> 00:02:17,410
in July 2021. There is a blog

23
00:02:17,570 --> 00:02:21,786
that I hold, it's xfgeek.com and it has content across

24
00:02:21,888 --> 00:02:25,334
capital markets which was my initial part of my career.

25
00:02:25,462 --> 00:02:28,746
There is technology and then agile. You can look up if

26
00:02:28,768 --> 00:02:32,574
you're interested. And from a location perspective, I'm in

27
00:02:32,612 --> 00:02:35,982
Hyderabad almost all the time from the last 20

28
00:02:36,036 --> 00:02:39,998
years, maybe like few months. I am not in Hyderabad but otherwise I'm always

29
00:02:40,084 --> 00:02:43,674
in Hyderabad and coming to Arctic

30
00:02:43,802 --> 00:02:47,554
I always start with a question of why and I would like this talk with

31
00:02:47,592 --> 00:02:50,802
also a question of why. So why do we actually

32
00:02:50,856 --> 00:02:54,994
need a framework for SRE adopting now

33
00:02:55,032 --> 00:02:59,042
when it comes to SRE, there sre different views on what is SRE.

34
00:02:59,186 --> 00:03:03,314
For some people SRE is about availability, for some others SRE

35
00:03:03,362 --> 00:03:06,962
is about golden signals. SRE is about automation

36
00:03:07,026 --> 00:03:10,970
for operations, SRE is about infrastructure automation or

37
00:03:11,040 --> 00:03:14,694
SRE is just a new title for production support analyst.

38
00:03:14,822 --> 00:03:18,234
The list goes on but I have given few examples here for

39
00:03:18,272 --> 00:03:22,618
some of them and then there SRE different questions for SRE.

40
00:03:22,794 --> 00:03:26,122
How is SRE different from Itil? How is SRE

41
00:03:26,186 --> 00:03:30,122
different from DevOps? How do we structure SRE teams?

42
00:03:30,266 --> 00:03:34,014
Is capacity planning taken care by sres as it is already done

43
00:03:34,052 --> 00:03:37,806
during PNV testing? I have already done those capacity planning

44
00:03:37,838 --> 00:03:41,186
in PNV testing now what is that sres are going to do at

45
00:03:41,208 --> 00:03:44,626
a later point? Can we have multiple slos for the

46
00:03:44,648 --> 00:03:48,358
same service? Is it fine if we just measure slos for

47
00:03:48,364 --> 00:03:51,814
our critical services? So this list of questions also goes

48
00:03:51,852 --> 00:03:55,080
on and on. These are like few examples which are there.

49
00:03:55,770 --> 00:03:59,706
Now to answer some of these questions and to correct some of

50
00:03:59,728 --> 00:04:02,938
these views, there SRE books, there are videos,

51
00:04:03,104 --> 00:04:06,970
there are blogs. Now we will see a frameworks.

52
00:04:07,550 --> 00:04:11,294
Now, what is a framework? The concept of framework is not new.

53
00:04:11,412 --> 00:04:14,378
We have frameworks like Springboot for Java,

54
00:04:14,554 --> 00:04:18,378
flask for Python, and then for agile adoption. Also there's

55
00:04:18,394 --> 00:04:22,682
a framework called scrum. Now if you see the definition of framework,

56
00:04:22,746 --> 00:04:25,870
what is a framework? Framework is a basic structure,

57
00:04:25,950 --> 00:04:29,746
a foundation that is set on which we

58
00:04:29,768 --> 00:04:33,006
can build on. Now this is where Arctic

59
00:04:33,038 --> 00:04:36,514
is. It's basically a framework which tries to set the basic

60
00:04:36,562 --> 00:04:40,770
structure, and a framework for SRE, a foundation

61
00:04:40,850 --> 00:04:45,154
for SRE adoption at enterprises. Now hello Arctic.

62
00:04:45,202 --> 00:04:49,242
Now we will look at what Arctic is and what are its

63
00:04:49,296 --> 00:04:52,966
two pillars. Are now the two pillars

64
00:04:52,998 --> 00:04:56,182
of Arctic are visibility and accountability.

65
00:04:56,326 --> 00:04:59,786
So these are like two key things that are important

66
00:04:59,888 --> 00:05:03,166
for transformation to look at so that we have

67
00:05:03,188 --> 00:05:06,538
a successful transformation. So what is the visibility

68
00:05:06,634 --> 00:05:09,710
required on? So SRE is about practices,

69
00:05:10,050 --> 00:05:13,902
the tooling platforms and policies or procedures.

70
00:05:14,046 --> 00:05:17,266
SRE is also about culture and SRE is

71
00:05:17,288 --> 00:05:20,590
also about principles, but that is not explicitly

72
00:05:20,670 --> 00:05:24,354
mentioned as part of visibility in this framework. So it's like

73
00:05:24,392 --> 00:05:27,878
culture is like implicit. Without the cultural change, it cannot happen.

74
00:05:27,964 --> 00:05:32,390
And also the principle should be understood now

75
00:05:32,460 --> 00:05:35,894
when it comes to the practices. So SRE has like

76
00:05:35,932 --> 00:05:40,154
lot of practices under it, and there's no need

77
00:05:40,192 --> 00:05:43,930
to probably boil the can to go and start

78
00:05:44,000 --> 00:05:46,522
on all of these practices on day one.

79
00:05:46,656 --> 00:05:49,754
Now there can be an exercise that can be

80
00:05:49,792 --> 00:05:53,662
done to look at what practices sre already in

81
00:05:53,716 --> 00:05:57,534
place. It's a natural thing that some of those

82
00:05:57,652 --> 00:06:01,520
might already be practiced in the organization, either because

83
00:06:02,290 --> 00:06:05,554
as part of their product engineering standardised, or it can be part

84
00:06:05,592 --> 00:06:08,770
of their other frameworks like ITIL. Now,

85
00:06:08,840 --> 00:06:12,494
what is like monitoring? So monitoring nowadays with very complex

86
00:06:12,542 --> 00:06:16,710
architectures where we have cloud

87
00:06:16,780 --> 00:06:20,742
infrastructure, vms on that, then there are platforms bit

88
00:06:20,796 --> 00:06:24,760
on top of that. Sometimes it's not even just directly deployed services,

89
00:06:25,210 --> 00:06:28,854
there are other services which are deployed there and it becomes a SaaS

90
00:06:28,902 --> 00:06:32,746
and they are consumed and there is cdns there,

91
00:06:32,768 --> 00:06:36,090
SRE containers, those are auto scaling environments,

92
00:06:36,510 --> 00:06:39,882
there are like DNS. So those are a lot of things.

93
00:06:39,936 --> 00:06:43,486
Like before even a request leaves the browser or

94
00:06:43,508 --> 00:06:47,722
the device of the user and then hits those production

95
00:06:47,786 --> 00:06:50,974
services and then returns back to response. Now at

96
00:06:51,012 --> 00:06:54,686
what level is the monitoring? Is there end user monitoring? Is there infra

97
00:06:54,718 --> 00:06:58,094
monitoring? Is there APM, is there database monitoring?

98
00:06:58,142 --> 00:07:01,490
So there are a lot of things within monitoring. Again,

99
00:07:01,640 --> 00:07:05,490
then there's observability which is the actual data,

100
00:07:05,640 --> 00:07:09,522
which serves a purpose of monitoring. Observability by itself has

101
00:07:09,576 --> 00:07:13,782
three pillars. It has traces, logging and

102
00:07:13,916 --> 00:07:17,622
metrics. Now, one of the difference that I like between

103
00:07:17,676 --> 00:07:21,894
monitoring and uploadability, which is said is monitoring is the microscope

104
00:07:21,942 --> 00:07:25,306
and observability is the slide under the microscope, which gives the

105
00:07:25,328 --> 00:07:28,986
clarity. Then it is about slos. Like do we

106
00:07:29,008 --> 00:07:32,158
have defined slos and does the team actually understand

107
00:07:32,244 --> 00:07:35,802
what slos are? And then at what level are they defined?

108
00:07:35,946 --> 00:07:39,194
Then measured suits and error budgets. Once the slos

109
00:07:39,242 --> 00:07:42,366
are defined, are we actually measuring the suits and

110
00:07:42,388 --> 00:07:45,710
do we have error budgets in place which are also measured?

111
00:07:46,930 --> 00:07:51,166
We'll also talk about error budget policy next and incident response.

112
00:07:51,198 --> 00:07:54,430
So when an incident happens, like how is that getting notified,

113
00:07:54,510 --> 00:07:58,066
how are the terms coming into action, how they are trying

114
00:07:58,178 --> 00:08:01,394
and how they are resolving all of that is incident response

115
00:08:01,442 --> 00:08:05,510
like incident management, how is the communications happening?

116
00:08:05,580 --> 00:08:09,814
Are we informing the stakeholders or which group the users

117
00:08:09,862 --> 00:08:13,382
informed? So all of that. And then how is the severity

118
00:08:13,446 --> 00:08:16,742
and priority determined? So a lot of things under incident

119
00:08:16,806 --> 00:08:19,718
management perspective and postmortems.

120
00:08:19,734 --> 00:08:23,490
So like postmortems probably might be done, but from an SRE's

121
00:08:23,510 --> 00:08:27,102
perspective, it is important to do postmortems in a blameless way.

122
00:08:27,156 --> 00:08:30,234
So it's not a blameful game on who made the mistake,

123
00:08:30,282 --> 00:08:33,806
but it is about how did it happen and how can we avoid it

124
00:08:33,828 --> 00:08:38,094
in the future. Change management, a change cannot

125
00:08:38,142 --> 00:08:41,042
necessarily be a code change. It can be a configuration change,

126
00:08:41,096 --> 00:08:44,974
or it can be any other change. It can be patching upgrades.

127
00:08:45,022 --> 00:08:48,662
It can be anything. Now, how are these changes actually being done,

128
00:08:48,716 --> 00:08:52,342
how are they communicated, how are they being approved, how are they being

129
00:08:52,396 --> 00:08:56,386
validated? So there is so much that goes into change management.

130
00:08:56,578 --> 00:08:59,738
Release management is about how are the releases happening

131
00:08:59,824 --> 00:09:03,142
then how sre the deployments,

132
00:09:03,286 --> 00:09:06,300
sre it blue green, canary, what are that?

133
00:09:07,390 --> 00:09:11,354
And eliminating toil. Toil is basically the

134
00:09:11,392 --> 00:09:15,246
manual, repetitive and work that can be automated away.

135
00:09:15,428 --> 00:09:19,114
And how much of toil exists is the toil being tracked?

136
00:09:19,162 --> 00:09:23,470
Sre those efforts to automate that, and at what level are they being automated?

137
00:09:23,810 --> 00:09:27,202
Capacity planning is about how are we planning for

138
00:09:27,256 --> 00:09:30,130
the infrastructure needs on a normal day?

139
00:09:30,200 --> 00:09:33,842
How is it going to handle in a peak day or a high volume day?

140
00:09:33,896 --> 00:09:37,594
Like if a high volume happens out of unplanned,

141
00:09:37,662 --> 00:09:41,174
how is it going to handle? Do we have elastic environments in

142
00:09:41,212 --> 00:09:45,414
there? So those kind of things go there.

143
00:09:45,532 --> 00:09:49,530
And infrastructure automation, how is the infrastructure being provisioned?

144
00:09:50,750 --> 00:09:53,900
Is it manual again? Is there automation in that?

145
00:09:54,430 --> 00:09:58,250
Aops nowadays with data and machine learning and

146
00:09:58,320 --> 00:10:01,718
all of these modern tools available, like it's

147
00:10:01,734 --> 00:10:05,166
not only about you need not do everything from the scratch, but there are

148
00:10:05,188 --> 00:10:08,606
libraries and frameworks available even in that space that

149
00:10:08,628 --> 00:10:12,494
can be used now with aops, what we can do,

150
00:10:12,532 --> 00:10:16,094
we can do things like autoremediation, we can do things like alert

151
00:10:16,142 --> 00:10:20,100
correlation, it can be other areas as so

152
00:10:21,270 --> 00:10:24,674
then chat hubs. Nowadays it's all about chat tools like

153
00:10:24,712 --> 00:10:28,326
slack terms or any other telegram or

154
00:10:28,348 --> 00:10:31,974
WhatsApp, take any chat application. And are

155
00:10:32,012 --> 00:10:36,086
these tools being used efficiently where the information is being

156
00:10:36,188 --> 00:10:39,894
sent over to the operations or sres through chat?

157
00:10:39,942 --> 00:10:43,334
And can sres actually take some action directly from the chat

158
00:10:43,382 --> 00:10:46,426
window? Then again,

159
00:10:46,528 --> 00:10:50,310
with the modern complex infrastructures, how confident

160
00:10:50,390 --> 00:10:53,440
are we on our own infrastructure and services?

161
00:10:53,890 --> 00:10:57,486
Can we actually handle failures that are unplanned or that are

162
00:10:57,508 --> 00:11:01,114
unknown to us? So that's where has engineering

163
00:11:01,162 --> 00:11:05,614
helps in to simulate some of those scenarios and fault

164
00:11:05,662 --> 00:11:09,042
injections and then explore the weaknesses and fix them.

165
00:11:09,176 --> 00:11:12,754
Security best practices nowadays there sre so many

166
00:11:12,792 --> 00:11:16,406
security incidents that are happening, and it is utmost important

167
00:11:16,508 --> 00:11:20,278
that the customer data or the company

168
00:11:20,364 --> 00:11:23,638
data, or the organization data or the services,

169
00:11:23,804 --> 00:11:27,470
everything is kind of protected, whether it's with ddos

170
00:11:27,570 --> 00:11:32,278
or any other thing or any breaches,

171
00:11:32,454 --> 00:11:35,926
anything there, and regulatory standards. So depending

172
00:11:35,958 --> 00:11:39,434
on the type of the business and the type

173
00:11:39,472 --> 00:11:42,766
of the market, where the business is actually happening and the

174
00:11:42,788 --> 00:11:46,202
type of products and all that, there are regulatory

175
00:11:46,266 --> 00:11:49,486
standards and that need to be followed and how is

176
00:11:49,508 --> 00:11:52,994
the compliance with those regulatory standards. So in this

177
00:11:53,032 --> 00:11:56,510
case, from an SRE perspective, it's more about technical standards,

178
00:11:56,590 --> 00:12:00,542
it's not really about any business related

179
00:12:00,686 --> 00:12:04,494
standards then tools

180
00:12:04,542 --> 00:12:07,490
and platforms. So to do all these practices,

181
00:12:07,570 --> 00:12:10,998
there is a need for having tools and platforms in place,

182
00:12:11,164 --> 00:12:14,034
like for monitoring, we need dashboarding,

183
00:12:14,082 --> 00:12:18,326
we need visualization, we need tools

184
00:12:18,358 --> 00:12:22,086
that actually ship data, then tools

185
00:12:22,118 --> 00:12:25,718
that help in transformation, tools that help in storage.

186
00:12:25,894 --> 00:12:29,450
So there are a lot of tools. Similarly for observability,

187
00:12:29,950 --> 00:12:33,386
there are a lot of tooling that is required combined to achieve

188
00:12:33,418 --> 00:12:37,486
both monitoring and observability. Then there

189
00:12:37,508 --> 00:12:41,262
are also frameworks and libraries like open tracing or open

190
00:12:41,316 --> 00:12:45,010
telemetry that can be used for tracing and

191
00:12:45,080 --> 00:12:48,962
alerting. Like how is the alerting being done? And same

192
00:12:49,016 --> 00:12:52,642
with on call management. Like how are the on call person being

193
00:12:52,696 --> 00:12:56,242
reached? Is it automated or is it manual? So automated

194
00:12:56,306 --> 00:12:59,766
through what? Tool alert correlation. So now there

195
00:12:59,788 --> 00:13:03,526
can be a number of alerts caused by the same underlying problem.

196
00:13:03,628 --> 00:13:06,850
So these alerts are already being correlated,

197
00:13:06,930 --> 00:13:10,698
so that you finally have one single incident out of that particular

198
00:13:10,864 --> 00:13:14,118
set of alerts. For example, a data center hosting

199
00:13:14,134 --> 00:13:17,434
100 vm SQL is not available, then all of those

200
00:13:17,472 --> 00:13:21,054
will start saying like okay, this is not reachable. So things

201
00:13:21,092 --> 00:13:24,318
like if there is a network problem in a particular area,

202
00:13:24,404 --> 00:13:27,918
again like the entire region will have problems. So how are

203
00:13:27,924 --> 00:13:31,802
those being correlated? So runtime platforms

204
00:13:31,866 --> 00:13:35,406
like nowadays it's all about deploying

205
00:13:35,438 --> 00:13:39,054
services as containers or on platforms

206
00:13:39,102 --> 00:13:42,606
like Kubernetes, Openshift or pivotal cloud foundry.

207
00:13:42,638 --> 00:13:46,614
So there are various platforms and then there

208
00:13:46,652 --> 00:13:49,990
are chat applications like slack teams that are actually

209
00:13:50,060 --> 00:13:53,490
used to community as I previously stated,

210
00:13:53,570 --> 00:13:56,966
and then ticketing. So when

211
00:13:56,988 --> 00:14:00,794
an incident happens or when a change actually has to happen. So how

212
00:14:00,832 --> 00:14:04,454
are those tickets being created? Is it again automated

213
00:14:04,582 --> 00:14:07,654
manual? So it's not always possible to automate.

214
00:14:07,702 --> 00:14:11,230
So what extent of automation is already

215
00:14:11,380 --> 00:14:14,974
available and self healing. So in order to do

216
00:14:15,012 --> 00:14:18,634
auto remediation or self healing, there are many tools

217
00:14:18,682 --> 00:14:22,126
now available and some of them need

218
00:14:22,148 --> 00:14:25,726
to be integrated with in house monitoring tools or alerting tools

219
00:14:25,758 --> 00:14:29,620
and to what extent it is being used.

220
00:14:30,870 --> 00:14:34,194
Then CACD tools are required to take care

221
00:14:34,232 --> 00:14:38,162
of releases or source control merges

222
00:14:38,306 --> 00:14:42,440
builds things to SRE artifacts. So there are

223
00:14:42,970 --> 00:14:46,534
a lot of tools available and what tools are being used and how

224
00:14:46,572 --> 00:14:50,246
effectively sre they being used. And again, there are tools required

225
00:14:50,278 --> 00:14:53,734
from a change management perspective, there are tools that are required

226
00:14:53,782 --> 00:14:57,414
from infrastructure provisioning perspective there is backup

227
00:14:57,462 --> 00:15:01,334
and recovery. How often backups are happening and how effective

228
00:15:01,382 --> 00:15:05,418
are there and how soon can a backup be restored

229
00:15:05,594 --> 00:15:09,534
when it is required and again, at what extent is it automated and at what

230
00:15:09,572 --> 00:15:13,434
extent is it manual? Then about patching. Like patches

231
00:15:13,482 --> 00:15:17,230
are always there, like whether they are security patches or OS patches,

232
00:15:17,310 --> 00:15:20,974
any other upgrades, end of life, end of support related.

233
00:15:21,102 --> 00:15:24,850
So there sre a lot of patching or updates or configuration that

234
00:15:24,920 --> 00:15:29,186
will be required at

235
00:15:29,208 --> 00:15:32,726
what extent this is also automated and there

236
00:15:32,748 --> 00:15:37,574
are use cases around natural language understanding like for

237
00:15:37,612 --> 00:15:40,954
example chat applications. Now can an SRE just type

238
00:15:40,992 --> 00:15:44,330
in a command, please restart this XYZ service.

239
00:15:44,480 --> 00:15:47,754
Or it can also be said in a different way,

240
00:15:47,792 --> 00:15:51,070
please reboot or please bounce XYZ service.

241
00:15:51,220 --> 00:15:55,022
The intent is the same. It's all about rebooting that particular

242
00:15:55,156 --> 00:15:59,438
XYZ service. And can the chat application actually

243
00:15:59,524 --> 00:16:03,674
understand that particular command

244
00:16:03,722 --> 00:16:06,690
through NLU and then fault injection?

245
00:16:07,190 --> 00:16:11,006
Fault injection is actually useful for chaos experiments. There are tools

246
00:16:11,038 --> 00:16:13,810
that are available to inject faults at a network level,

247
00:16:13,960 --> 00:16:17,302
tools to inject faults at a VM level, at a platform level

248
00:16:17,356 --> 00:16:21,350
like kubernetes. So it can be done at various levels

249
00:16:22,090 --> 00:16:25,154
depending on the type of infrastructure in an organization.

250
00:16:25,282 --> 00:16:28,870
Again, all these tools and platforms need not be like one tool

251
00:16:28,940 --> 00:16:32,362
because there is no one size fits all. So depending on the

252
00:16:32,416 --> 00:16:35,514
type of infrastructure and services and

253
00:16:35,552 --> 00:16:39,126
businesses that are there, there can be different set of tools

254
00:16:39,158 --> 00:16:42,906
that are actually used and policies SRE

255
00:16:42,928 --> 00:16:46,494
procedures SRE has heavy focus, as I said,

256
00:16:46,532 --> 00:16:50,160
on incident management, change management and

257
00:16:50,770 --> 00:16:54,862
error budget policies. Like what happens if the error budget is exhausted.

258
00:16:55,006 --> 00:16:59,154
Similarly, SRE onboarding procedure like how does a service actually get

259
00:16:59,192 --> 00:17:02,466
onboarded to SRE? So what is the

260
00:17:02,488 --> 00:17:05,934
procedure around that? Now that's

261
00:17:05,982 --> 00:17:08,930
about the visibility of the practices,

262
00:17:09,590 --> 00:17:13,106
tools, policies. Next we will look at metrics.

263
00:17:13,138 --> 00:17:16,562
So after all this thing like what is those value out of SRE

264
00:17:16,626 --> 00:17:20,934
transformation, the first thing to look at is how much toil got eliminated.

265
00:17:21,062 --> 00:17:24,474
Now by eliminating toil we would have saved manual effort. We would have

266
00:17:24,512 --> 00:17:28,138
improved the efficiency. Efficiency cannot derive a

267
00:17:28,144 --> 00:17:31,226
dollar value, but at least like the manual effort can derive

268
00:17:31,258 --> 00:17:34,634
some blue or green dollar value. Then a reduction

269
00:17:34,682 --> 00:17:38,014
in MTTA, like the main time to acknowledge how

270
00:17:38,052 --> 00:17:42,062
soon an incident actually is getting acknowledged before SRE and

271
00:17:42,116 --> 00:17:45,666
after SRE. The faster the acknowledgement the faster would

272
00:17:45,688 --> 00:17:49,454
be the recovery time like bit all start from each stage.

273
00:17:49,582 --> 00:17:52,706
How soon something is detected, how soon something an

274
00:17:52,728 --> 00:17:56,486
incident is actually acknowledged and how soon are we

275
00:17:56,508 --> 00:17:59,640
able two get to an insight of the problem.

276
00:18:00,330 --> 00:18:03,894
The time taken two insight is actually helped by having

277
00:18:04,012 --> 00:18:07,586
right level of observability. Now to two triads.

278
00:18:07,618 --> 00:18:11,242
Like we need to have the sufficient data to find what

279
00:18:11,296 --> 00:18:14,854
exactly is the problem. Then finally is the recovery method.

280
00:18:14,902 --> 00:18:18,106
Like how soon are we able to make a

281
00:18:18,128 --> 00:18:21,946
fix and deploy or do any recovery action. It's not always a

282
00:18:21,968 --> 00:18:25,310
fix and deploy. It might be a restart or rerun of something.

283
00:18:25,460 --> 00:18:28,574
So it can be different things or it sometimes is at

284
00:18:28,612 --> 00:18:32,074
complete rollback as well. So how soon is that recovery

285
00:18:32,122 --> 00:18:36,254
actually happening then meantime between failures,

286
00:18:36,302 --> 00:18:39,998
like when we know a failure has happened, then how soon those failure

287
00:18:40,094 --> 00:18:43,986
has happened again, what are we actually trying to

288
00:18:44,008 --> 00:18:47,686
do to fix known failures and

289
00:18:47,788 --> 00:18:51,734
reduction in postmortem action items? Like with proper

290
00:18:51,852 --> 00:18:55,494
blameless postmortems in place, like postmortem action items are

291
00:18:55,532 --> 00:18:59,426
actually resolved faster. And how soon sls

292
00:18:59,458 --> 00:19:02,662
are actually getting breached? Now we have the best

293
00:19:02,716 --> 00:19:06,282
architecture, but the sls are getting breached. Or we have

294
00:19:06,336 --> 00:19:09,786
the best kind of services but they are getting breached. So what exactly is the

295
00:19:09,808 --> 00:19:13,422
problem? Where is going wrong? We need to look at that and then fix

296
00:19:13,476 --> 00:19:17,882
it. And how soon they are getting exhausted.

297
00:19:17,946 --> 00:19:22,986
The same thing. So that's about metrics.

298
00:19:23,018 --> 00:19:27,026
And then there are benefits as well. Like there is better utilized with

299
00:19:27,048 --> 00:19:31,118
proper capacity planning. We have better utilized and planned infrastructure

300
00:19:31,294 --> 00:19:35,254
and we have improved tech staff experience, be developers or

301
00:19:35,292 --> 00:19:39,746
sres and by toil elimination and effectively

302
00:19:39,778 --> 00:19:43,074
handling incidents, avoiding DPD incidents.

303
00:19:43,202 --> 00:19:46,550
So the productivity obviously goes up and business

304
00:19:46,620 --> 00:19:50,006
launches. When I was part of product development

305
00:19:50,038 --> 00:19:53,734
and business analysis, I was part of a number of business launches

306
00:19:53,782 --> 00:19:57,830
around launching new markets

307
00:19:57,910 --> 00:20:01,542
or launching new products, launching new verticals,

308
00:20:01,606 --> 00:20:04,954
or even sometimes not even a business launch,

309
00:20:05,002 --> 00:20:09,146
it might be a launch of a new regulatory reporting. So there's

310
00:20:09,178 --> 00:20:12,702
so much of nervousness on the last day or on the final

311
00:20:12,756 --> 00:20:16,690
day that it is going to happen and will it all work as expected?

312
00:20:17,030 --> 00:20:20,462
So if we have SRe concepts

313
00:20:20,526 --> 00:20:24,514
and everything is built with a shift left mindset where we

314
00:20:24,552 --> 00:20:28,406
are confident that what we have built is reliable enough, the experience

315
00:20:28,508 --> 00:20:32,626
at business launch improves. And nowadays there are sites

316
00:20:32,658 --> 00:20:36,146
which show downtime messages, or there are sites

317
00:20:36,178 --> 00:20:39,386
which actually show the

318
00:20:39,488 --> 00:20:43,434
improper experience messages that are posted in social media.

319
00:20:43,632 --> 00:20:47,146
So the reputation improves when these kind of

320
00:20:47,168 --> 00:20:51,874
issues are actually reduced. And accountability.

321
00:20:52,022 --> 00:20:55,440
Now when it comes to accountability, how do you actually

322
00:20:55,970 --> 00:20:59,514
structure an SRE team? So do you have a central SRE

323
00:20:59,562 --> 00:21:03,074
team which takes care of everything that is required from

324
00:21:03,112 --> 00:21:06,402
an SRE perspective, or if that

325
00:21:06,456 --> 00:21:10,194
becomes a bottleneck in a very large organization, there is an option to

326
00:21:10,232 --> 00:21:13,906
actually split SRE by function. Like have an

327
00:21:13,928 --> 00:21:17,974
infrastructure SRE who focuses on infrastructure, have a data SRE who

328
00:21:18,012 --> 00:21:21,746
focuses on data side of things. SRE tools team focuses

329
00:21:21,778 --> 00:21:25,858
on building in house tools or bringing in vendor tools,

330
00:21:26,034 --> 00:21:29,322
integrating between them. So it's not only about bringing two

331
00:21:29,376 --> 00:21:33,754
tools, but it's also about integrating them in those right way

332
00:21:33,952 --> 00:21:37,386
and integrating with the internal. How much

333
00:21:37,408 --> 00:21:41,026
ever external things you bring in, there is always that internal factor

334
00:21:41,078 --> 00:21:44,526
that you need to consider and integrate. And then

335
00:21:44,628 --> 00:21:48,078
there's a concept of embedded SRE where there can be a

336
00:21:48,084 --> 00:21:51,274
central SRE which has sres embedded

337
00:21:51,322 --> 00:21:55,234
into the product engineering teams. So they work very closely with

338
00:21:55,272 --> 00:21:59,042
the product engineering teams with a shift left mindset where

339
00:21:59,176 --> 00:22:02,050
everything is built upfront,

340
00:22:02,710 --> 00:22:06,722
the reliability part aspects are built upfront. Then federated

341
00:22:06,786 --> 00:22:10,358
SRE, like in large organizations, when it is difficult

342
00:22:10,444 --> 00:22:13,750
to maintain a central SRE, or even

343
00:22:13,820 --> 00:22:17,494
to maintain something like an embedded SRE, they can also look

344
00:22:17,532 --> 00:22:21,446
at federated model where each vertical,

345
00:22:21,558 --> 00:22:25,014
or maybe each department actually has their own federated SRE

346
00:22:25,062 --> 00:22:28,870
teams, they are doing their own tools which actually suit

347
00:22:28,950 --> 00:22:32,330
their particular vertical department.

348
00:22:32,490 --> 00:22:36,506
But the recommendation would be to maintain

349
00:22:36,538 --> 00:22:40,074
the same set of policies in those standards that are set by central

350
00:22:40,122 --> 00:22:43,890
SRE. The toolings can vary based on technology,

351
00:22:44,040 --> 00:22:48,194
but the whole culture principles and the

352
00:22:48,232 --> 00:22:51,010
policies procedures they need to be standardized.

353
00:22:52,150 --> 00:22:55,806
Now, roles and responsibilities like depending

354
00:22:55,838 --> 00:22:59,314
on the number of SRE terms or how they are split,

355
00:22:59,362 --> 00:23:02,962
how they are structured, in order to make sure that nothing slips

356
00:23:03,026 --> 00:23:06,354
through these teams, in between these teams,

357
00:23:06,402 --> 00:23:10,010
and nothing is left over without a proper owner.

358
00:23:10,830 --> 00:23:14,714
It's important to look at RNDR of various things, like when

359
00:23:14,752 --> 00:23:18,054
a service, like during SRE transformation, when there are existing

360
00:23:18,102 --> 00:23:22,054
services, who is those destination maker to decide

361
00:23:22,102 --> 00:23:25,454
that, okay, these are the services or these are the applications that should

362
00:23:25,492 --> 00:23:28,894
onboard to SRE first and how is the actual onboarding going

363
00:23:28,932 --> 00:23:33,482
to be done? Who is responsible for that and community

364
00:23:33,546 --> 00:23:36,754
about new launches? Like how does SRE actually know

365
00:23:36,792 --> 00:23:40,210
that, okay, there is a new vertical coming in or there are new business

366
00:23:40,280 --> 00:23:43,842
launches. Sometimes it's not always

367
00:23:43,896 --> 00:23:48,040
related to a code release. So I have seen a number of cases where

368
00:23:48,730 --> 00:23:53,170
new business launches or new product related

369
00:23:53,250 --> 00:23:57,046
or new flows are not tied to a release and they are simply tied to

370
00:23:57,068 --> 00:24:00,986
a code flag. A user can either switch that

371
00:24:01,168 --> 00:24:04,854
flag, turn it on from a UI, or there can be some flags

372
00:24:04,902 --> 00:24:08,502
that are enabled from behind the scenes through some configuration

373
00:24:08,566 --> 00:24:12,266
change and everything starts flowing through. So it's

374
00:24:12,298 --> 00:24:15,694
important to make sure that this communication is sent through

375
00:24:15,732 --> 00:24:18,350
properly and conflict resolution.

376
00:24:19,250 --> 00:24:23,162
In larger organizations, there is a possibility of priority conflicts

377
00:24:23,226 --> 00:24:26,882
or any other conflicts between SRE in any other team

378
00:24:26,936 --> 00:24:31,182
or between SRE teams themselves. So it's important to identify

379
00:24:31,246 --> 00:24:34,894
who would be the final authority to help resolve these

380
00:24:35,032 --> 00:24:40,962
conflicts. That's about Arctic

381
00:24:41,106 --> 00:24:45,234
its visibility and accountability. Now there's no framework

382
00:24:45,362 --> 00:24:48,794
which can stand on its own and it needs to be combined with

383
00:24:48,832 --> 00:24:53,290
other concepts and frameworks for successful results.

384
00:24:54,030 --> 00:24:57,222
Now what are the frameworks are useful for sres?

385
00:24:57,366 --> 00:24:59,610
First framework is agile.

386
00:25:00,750 --> 00:25:04,138
Now why is agile framework important for sres?

387
00:25:04,234 --> 00:25:07,962
Now sres actually we looked at, there can be a tools SRE

388
00:25:08,026 --> 00:25:11,342
team that looks at tools now for such team because

389
00:25:11,396 --> 00:25:14,946
it's again product development kind of a work where they can

390
00:25:14,968 --> 00:25:18,046
look at adopting scrum for their development

391
00:25:18,078 --> 00:25:22,814
of tools. Sres with both interrupt

392
00:25:22,862 --> 00:25:26,342
work and engineering work, they can probably look at Kanban mod

393
00:25:26,396 --> 00:25:29,746
where they have their kanban queue where they sre clearing

394
00:25:29,778 --> 00:25:33,526
their tasks. There is extreme programming as well. And for

395
00:25:33,708 --> 00:25:37,314
rapid prototyping they can also use rapid

396
00:25:37,362 --> 00:25:40,634
application development model. Now these frameworks sre

397
00:25:40,672 --> 00:25:44,454
useful depending on again, which is the way the SRE

398
00:25:44,502 --> 00:25:47,754
teams are structured and what framework suits for which type

399
00:25:47,792 --> 00:25:52,170
of SRE team. And we talked about SRE helping

400
00:25:52,330 --> 00:25:55,966
in improving tech staff experience. Now how do

401
00:25:55,988 --> 00:26:00,206
we actually measure that? So recently there is this framework called space that

402
00:26:00,228 --> 00:26:03,874
has been introduced by Microsoft Velocity Lab and

403
00:26:03,912 --> 00:26:06,914
that can be actually used for measuring this.

404
00:26:07,032 --> 00:26:10,180
So go check that out if you're interested.

405
00:26:11,110 --> 00:26:14,874
And concepts of product engineering. So SRE

406
00:26:15,022 --> 00:26:19,298
uses lot of product engineering concepts like architecture,

407
00:26:19,394 --> 00:26:22,502
high availability microservices, micro front

408
00:26:22,556 --> 00:26:26,434
ends, the blue green deployments, canary deployments,

409
00:26:26,482 --> 00:26:30,374
the list goes on. So sres work so closely with the product engineering

410
00:26:30,422 --> 00:26:33,814
teams that they also understand the product engineering concepts

411
00:26:33,862 --> 00:26:37,354
and can help guide the engineering teams where

412
00:26:37,392 --> 00:26:41,054
required. If something is not being followed and

413
00:26:41,172 --> 00:26:44,974
design thinking, again, like if we are looking to introduce some

414
00:26:45,012 --> 00:26:48,382
new practice, new tool, or build

415
00:26:48,436 --> 00:26:52,298
something new, or bring in something very new feature,

416
00:26:52,394 --> 00:26:56,226
very creative, innovative feature or innovative practice into the

417
00:26:56,248 --> 00:27:00,194
organization or innovative way of doing things like design thinking can

418
00:27:00,232 --> 00:27:03,554
be helpful. Design thinking, we can look at it

419
00:27:03,592 --> 00:27:06,994
as when bit comes to bringing something new, then look

420
00:27:07,032 --> 00:27:10,130
at what is the business viability of that, what is the technical

421
00:27:10,210 --> 00:27:13,782
feasibility of that, and what is those human

422
00:27:13,836 --> 00:27:17,094
desirability. Like how much of adoption will be there after that is

423
00:27:17,132 --> 00:27:21,718
actually brought in. Then it's about empathizing

424
00:27:21,814 --> 00:27:25,830
with sets when something needs to be built and then ideating,

425
00:27:25,910 --> 00:27:29,722
prototyping and iterating over. And there's also

426
00:27:29,776 --> 00:27:33,594
this thing called sprint zero or design sprints.

427
00:27:33,642 --> 00:27:37,194
Like if SRes are looking at building some dashboards,

428
00:27:37,242 --> 00:27:40,490
nice management dashboards, especially for the visibility

429
00:27:40,570 --> 00:27:44,082
aspect or the metrics aspect that I mentioned, so they can

430
00:27:44,136 --> 00:27:47,586
actually look at doing some sprint zero or design sprint kind of

431
00:27:47,608 --> 00:27:51,454
a thing, where they can build those initial

432
00:27:51,502 --> 00:27:55,686
prototypes before even getting into the development of that and

433
00:27:55,788 --> 00:28:00,342
chicken and egg problem. Now sres do

434
00:28:00,396 --> 00:28:03,430
talk about building incident knowledge base.

435
00:28:03,580 --> 00:28:07,206
Now what is the chicken and problem is like

436
00:28:07,308 --> 00:28:10,778
do we build something and do producers actually

437
00:28:10,944 --> 00:28:14,838
produce something and then bring the consumers, or do we get the consumers

438
00:28:14,854 --> 00:28:18,186
even before producers completely build out what

439
00:28:18,208 --> 00:28:22,826
they are trying to build? Now this is a problem that can be solved by

440
00:28:23,008 --> 00:28:26,446
different ways. For example, if we

441
00:28:26,468 --> 00:28:30,094
say there is an incident knowledge base and there is not sufficient knowledge base there,

442
00:28:30,132 --> 00:28:33,966
then that option will not be there. So build the right level of knowledge

443
00:28:33,998 --> 00:28:37,758
base before spreading the word further. Similarly,

444
00:28:37,854 --> 00:28:41,634
it can also be about common frameworks and

445
00:28:41,672 --> 00:28:45,346
tools that are built, again that can

446
00:28:45,368 --> 00:28:48,678
be consumed by other product engineering teams before they

447
00:28:48,684 --> 00:28:52,066
are not fully built. If we go for an adoption,

448
00:28:52,098 --> 00:28:55,462
that will not happen. So it's like a very

449
00:28:55,516 --> 00:28:58,982
tricky situation where you need to balance out at what stage

450
00:28:59,126 --> 00:29:02,842
you will actually bring in the users or people

451
00:29:02,896 --> 00:29:06,742
to actually adopt it, then personalities

452
00:29:06,806 --> 00:29:10,526
and skills. So there are various personality types that will

453
00:29:10,548 --> 00:29:13,642
be required for a successful SRE transformation.

454
00:29:13,786 --> 00:29:17,182
So SRE transformation will need evangelists who

455
00:29:17,236 --> 00:29:21,680
can actually go in and talk about SRE and then

456
00:29:22,050 --> 00:29:25,502
say like why SRE will benefit for the organization or for the product,

457
00:29:25,556 --> 00:29:28,862
engineering teams, or even a specific practice

458
00:29:28,926 --> 00:29:32,386
within it. And then there are strategies who can make plans around how

459
00:29:32,408 --> 00:29:35,954
to do this. And then there are specialists who will be technical specialists

460
00:29:36,002 --> 00:29:39,286
or any other specialists who can help in

461
00:29:39,308 --> 00:29:43,186
the individual aspects. So there are skills

462
00:29:43,218 --> 00:29:47,822
and personalities and skills wise, like SRE, as I said, is a pretty broad

463
00:29:47,906 --> 00:29:52,006
role which includes the knowledge from engineering

464
00:29:52,038 --> 00:29:55,306
and operations. It's where by definition SRE is

465
00:29:55,328 --> 00:29:58,906
like what happens to an operation terms when it is done with

466
00:29:58,928 --> 00:30:02,586
a software engineering mindset. So there is a wide range of skill

467
00:30:02,618 --> 00:30:06,602
set required, right from understanding different types of architectures,

468
00:30:06,746 --> 00:30:09,994
infrastructures, testing, CI CD

469
00:30:10,042 --> 00:30:13,902
tools, blue, green and canary deployments. Then has

470
00:30:13,966 --> 00:30:17,490
engineering first testing, monitoring, observability,

471
00:30:17,910 --> 00:30:21,426
autoremediation, capacity, planning, some amount of

472
00:30:21,448 --> 00:30:25,286
machine learning. So the more the SRE knows, the more those

473
00:30:25,308 --> 00:30:27,670
SRE can add value to an organization.

474
00:30:29,930 --> 00:30:33,846
Again, it's not always possible to find someone who knows everything,

475
00:30:33,948 --> 00:30:37,286
but it can also be a balanced act where

476
00:30:37,468 --> 00:30:40,474
few set of sres focus on one area.

477
00:30:40,592 --> 00:30:44,554
It depends on how the organization would like to structure. And then there

478
00:30:44,592 --> 00:30:48,186
can be cross training that can be done and they

479
00:30:48,208 --> 00:30:52,110
can always upskill. And SRE is always about

480
00:30:52,260 --> 00:30:55,454
watching out for what is new coming up in the market and

481
00:30:55,492 --> 00:30:59,040
then getting the organization at that level

482
00:30:59,730 --> 00:31:03,422
and what are the different things to avoid. So one is

483
00:31:03,476 --> 00:31:06,882
about avoiding bandwagon by us

484
00:31:07,016 --> 00:31:10,146
now, use the right tools and right platforms for the

485
00:31:10,168 --> 00:31:13,762
purpose that we are looking at. There's no need to do something

486
00:31:13,816 --> 00:31:18,066
because someone else is doing. And no over engineering.

487
00:31:18,258 --> 00:31:21,794
Sres themselves accept that failures

488
00:31:21,842 --> 00:31:25,942
are normal and we measure failures and keep them under

489
00:31:25,996 --> 00:31:28,606
control at a level that is required.

490
00:31:28,738 --> 00:31:32,298
100% reliability is a wrong larger and that's one of

491
00:31:32,304 --> 00:31:35,914
the principle of SRE. So have the right set

492
00:31:35,952 --> 00:31:39,638
of slos defined, agreed by users, and engineer

493
00:31:39,734 --> 00:31:43,680
the service to the level that needs to meet that or cross that,

494
00:31:44,530 --> 00:31:47,566
and then coexistence of traditional and

495
00:31:47,668 --> 00:31:51,294
SRE policies. Now the

496
00:31:51,332 --> 00:31:54,814
organization might already be using certain policies now when

497
00:31:54,932 --> 00:32:00,206
it sets migrated over to SRE. Now don't keep

498
00:32:00,308 --> 00:32:04,270
them together. Once it's transformation, it's transformation.

499
00:32:05,210 --> 00:32:08,914
So yeah, those are the things for my talk. So any further

500
00:32:08,962 --> 00:32:12,950
questions, please feel free to reach out to me on discord

501
00:32:13,610 --> 00:32:15,286
and thank you,

