1
00:00:23,130 --> 00:00:26,726
Hey everyone, my name is Argo, and I'm a computer vision engineer at

2
00:00:26,748 --> 00:00:30,882
Diagnacad. So today I would like to talk about a cool little technique

3
00:00:30,946 --> 00:00:34,162
in computer vision, and we will discuss different cases

4
00:00:34,226 --> 00:00:38,002
where you can use it. Let's start with some basics.

5
00:00:38,146 --> 00:00:41,554
Computer vision is, generally speaking, when we use an algorithm

6
00:00:41,602 --> 00:00:45,062
to analyze an image. In our case, we're talking about

7
00:00:45,116 --> 00:00:48,466
deep learning and neural networks. For image processing,

8
00:00:48,578 --> 00:00:51,374
classification is the simplest problem,

9
00:00:51,492 --> 00:00:54,638
and it is used when we want to know if there is a

10
00:00:54,644 --> 00:00:57,694
can or a dog on the image, for example.

11
00:00:57,892 --> 00:01:01,626
So, classification is the most basic one. We give an image

12
00:01:01,658 --> 00:01:05,358
to enroll net and get only class prediction.

13
00:01:05,534 --> 00:01:09,700
But in the real world, classification is not that useful just by itself.

14
00:01:10,070 --> 00:01:13,694
In a lot of cases, we need an object detection or segmentation

15
00:01:13,742 --> 00:01:17,246
algorithm. In an object detection task, we just

16
00:01:17,288 --> 00:01:20,914
have two subtasks. The first one is to localize

17
00:01:20,962 --> 00:01:24,360
our object, and the second one is to classify that object.

18
00:01:24,890 --> 00:01:28,794
And when we find an object, we localize it with a bounding box or

19
00:01:28,832 --> 00:01:32,566
a b box. Computationally speaking, object detection

20
00:01:32,598 --> 00:01:36,346
is a lot pricier than just classification. So we are

21
00:01:36,368 --> 00:01:39,850
going to keep that in mind. Let's get closer to real

22
00:01:39,920 --> 00:01:43,434
case, where we can make use of an object detection

23
00:01:43,482 --> 00:01:46,000
algorithm for solving business problems.

24
00:01:46,610 --> 00:01:50,186
Imagine that we have a lot of security cameras,

25
00:01:50,298 --> 00:01:54,290
and we want to make sure that our building is safe.

26
00:01:54,790 --> 00:01:58,386
Maybe it's a school or a shopping center. And we

27
00:01:58,408 --> 00:02:02,066
want to detect any situation where someone gets in with a

28
00:02:02,088 --> 00:02:05,666
gun. It would be really expensive to have a lot of

29
00:02:05,688 --> 00:02:09,526
security guards who were watching every security camera. So it

30
00:02:09,548 --> 00:02:13,382
would be nice to have a neural net, which can process video

31
00:02:13,436 --> 00:02:16,578
streams from all cameras and send an alert

32
00:02:16,674 --> 00:02:20,298
if something suspicious is happening. That's an

33
00:02:20,304 --> 00:02:25,546
object detecting task. But because the system will work 24/7

34
00:02:25,728 --> 00:02:29,530
we will get false alarms. Pretty much

35
00:02:29,600 --> 00:02:33,054
a lot. And by false alarm, I mean when

36
00:02:33,092 --> 00:02:36,238
the model thinks that, for example, a cell phone is a

37
00:02:36,244 --> 00:02:38,830
handgun and gives a false alert.

38
00:02:39,490 --> 00:02:43,386
So we would like to have an operator to validate

39
00:02:43,498 --> 00:02:45,950
that. Alarms difficulties.

40
00:02:46,110 --> 00:02:49,922
Yeah, there are some in this task, and we're going to talk about a couple

41
00:02:49,976 --> 00:02:53,442
of them. The first one is that our solution needs

42
00:02:53,496 --> 00:02:57,014
to be fast. It means that it should be

43
00:02:57,052 --> 00:03:00,902
able to process a lot of frames per second and more

44
00:03:00,956 --> 00:03:04,966
cameras we have in our building, more frames we

45
00:03:04,988 --> 00:03:09,030
need to process. We can't use infinite amount of hardware,

46
00:03:09,110 --> 00:03:12,326
of course, because if the solution is expensive,

47
00:03:12,438 --> 00:03:16,454
it doesn't make any sense. Faster neural net, we have more frames

48
00:03:16,502 --> 00:03:20,622
per second. We can process on one server. The second

49
00:03:20,676 --> 00:03:23,982
problem, a lot of false alerts. We have already

50
00:03:24,036 --> 00:03:28,126
talked about it a little bit, but generally speaking,

51
00:03:28,308 --> 00:03:31,774
our video stream should be

52
00:03:31,812 --> 00:03:34,994
processed twenty four seven. And that's more than

53
00:03:35,032 --> 00:03:38,158
2 million frames per day per camera.

54
00:03:38,254 --> 00:03:41,474
That means even if we have a really low rate of

55
00:03:41,512 --> 00:03:44,500
false positives, we're still going to get them.

56
00:03:44,870 --> 00:03:48,774
So we have to deal with it. And the third problem is

57
00:03:48,812 --> 00:03:51,974
that our first two problems don't play well with each

58
00:03:52,012 --> 00:03:55,510
other. Unfortunately, as it's always a tradeoff between

59
00:03:55,580 --> 00:03:59,574
accuracy and speed. Faster neural net we have, less accuracy

60
00:03:59,622 --> 00:04:03,146
we get and more false alerts we create. Usually, if we

61
00:04:03,168 --> 00:04:06,906
want more accurate models, we need more hardware for

62
00:04:06,928 --> 00:04:10,010
running bigger models at needed speeds.

63
00:04:10,990 --> 00:04:15,046
But is there anything that can help a little bit with this tradeoff?

64
00:04:15,238 --> 00:04:18,122
Yeah, fortunately there are several techniques,

65
00:04:18,186 --> 00:04:21,834
and I'm going to talk about one of them, which has shown

66
00:04:21,882 --> 00:04:25,394
its efficacy in different cases. So how

67
00:04:25,432 --> 00:04:28,626
can we increase our accuracy without

68
00:04:28,728 --> 00:04:32,718
losing processing speed and using the same amount of computing

69
00:04:32,814 --> 00:04:36,774
hardware? We can get pretty close to that with this

70
00:04:36,812 --> 00:04:40,726
idea. And the technique is to use two

71
00:04:40,828 --> 00:04:44,120
neural nets in cascade. So one after another.

72
00:04:44,490 --> 00:04:47,734
But both nets are tuned in a specific was to

73
00:04:47,772 --> 00:04:51,274
complement each other. The first neural net is a

74
00:04:51,312 --> 00:04:54,838
fast detector, so it runs on the whole frame,

75
00:04:54,934 --> 00:04:59,014
but downscaled to 640 by 640 and localizes

76
00:04:59,062 --> 00:05:02,366
interested object and classifies it. This model

77
00:05:02,468 --> 00:05:06,014
should be tuned to have higher recall, sacrifice and

78
00:05:06,052 --> 00:05:09,454
precision, which means that model will try to

79
00:05:09,492 --> 00:05:13,342
always detect a gun, but will often give a false positive

80
00:05:13,406 --> 00:05:15,620
on a cell phone or something else.

81
00:05:17,030 --> 00:05:20,542
Detectors should be trained on relevant to inference images

82
00:05:20,606 --> 00:05:24,078
with guns. The second neural net is a classifier.

83
00:05:24,254 --> 00:05:27,618
It runs on the crop made by a detector,

84
00:05:27,794 --> 00:05:31,606
so it runs only if detector finds anything at

85
00:05:31,628 --> 00:05:35,014
the frame. Classifier's task is to

86
00:05:35,052 --> 00:05:38,406
validate if chosen by detector object is a gun or

87
00:05:38,428 --> 00:05:42,598
not. Classifier should be trained on crops from the detector.

88
00:05:42,694 --> 00:05:45,866
So again, real images but

89
00:05:45,968 --> 00:05:49,434
crops from the detector and classifiers should

90
00:05:49,472 --> 00:05:53,054
have several classes. Not only a gun, but some

91
00:05:53,092 --> 00:05:56,718
other objects which are often detected as a gun, for example,

92
00:05:56,804 --> 00:06:00,014
cell phone, umbrella, bag, or something else.

93
00:06:00,132 --> 00:06:03,738
The goal of the detector is to detect an object which might

94
00:06:03,764 --> 00:06:07,554
be a gun. Classifier should be able to correctly validate that

95
00:06:07,592 --> 00:06:11,426
object. So training both nets is done based on

96
00:06:11,448 --> 00:06:15,590
that. I should mention that classifier is easier to retrain based

97
00:06:15,660 --> 00:06:19,574
on real cases after deployment. So that's a great thing too.

98
00:06:19,692 --> 00:06:23,960
So why does it work? Let's discuss a couple of things.

99
00:06:25,290 --> 00:06:27,778
First of all, why is it fast?

100
00:06:27,964 --> 00:06:31,514
Basically, the speed of our solution is tied to

101
00:06:31,552 --> 00:06:35,126
the speed of the first neural network, the detector.

102
00:06:35,318 --> 00:06:38,714
It's because our second net runs just in

103
00:06:38,752 --> 00:06:41,998
cases when firstnet finds anything.

104
00:06:42,164 --> 00:06:45,246
So 99% of the time second

105
00:06:45,428 --> 00:06:49,182
net is idle. The second thing is that because we have

106
00:06:49,236 --> 00:06:52,410
our classifier and it can

107
00:06:52,500 --> 00:06:55,198
really validate our solution,

108
00:06:55,294 --> 00:06:59,026
our prediction, we can pick a

109
00:06:59,048 --> 00:07:02,878
fast detector. And now let's discuss why we gain accuracy.

110
00:07:02,974 --> 00:07:06,630
First of all, we use an ensemble of two models.

111
00:07:07,530 --> 00:07:11,618
Then second model gets full resolution, part of the image,

112
00:07:11,714 --> 00:07:14,982
not downscaled like the first net. Third one,

113
00:07:15,116 --> 00:07:18,714
we use different data set data sets for our models and

114
00:07:18,752 --> 00:07:21,894
our classifier is tuned to distinguish guns

115
00:07:22,022 --> 00:07:25,226
and other similar object. And one

116
00:07:25,248 --> 00:07:29,066
more thing, from detector we need good detection. From classifier we

117
00:07:29,088 --> 00:07:32,638
need good classification so we can choose models based

118
00:07:32,724 --> 00:07:35,914
exactly on that. We do not need to sacrifice

119
00:07:36,042 --> 00:07:39,326
classification power of the detector just because it

120
00:07:39,348 --> 00:07:42,818
is fast. Here are some metrics. As you

121
00:07:42,824 --> 00:07:46,382
can see on the right side we have slightly decreased

122
00:07:46,446 --> 00:07:49,950
recall but noticeably increased precision.

123
00:07:50,110 --> 00:07:53,502
And that's good because we don't want to spam

124
00:07:53,566 --> 00:07:56,914
operators with our task. Now let's

125
00:07:56,962 --> 00:08:00,854
touch a little bit on specifics of collecting the data set for

126
00:08:00,892 --> 00:08:04,870
this technique. Of course you should remember about general things

127
00:08:04,940 --> 00:08:08,022
like collecting balanced data set, data set,

128
00:08:08,156 --> 00:08:12,294
diverse representative, have a good and consistent

129
00:08:12,342 --> 00:08:15,626
labeling and so on. But here are a couple of things that

130
00:08:15,648 --> 00:08:19,258
I want to mention for the detector. You need to collect data

131
00:08:19,344 --> 00:08:22,566
as close to inference as possible. If your inference

132
00:08:22,598 --> 00:08:26,094
is going to be on security cameras, you would want to collect your data set

133
00:08:26,132 --> 00:08:29,534
on cameras close to that ones for

134
00:08:29,572 --> 00:08:33,194
sure. You need to place it correctly and have correct angles.

135
00:08:33,322 --> 00:08:37,074
Just how inference cameras are going to have your

136
00:08:37,112 --> 00:08:40,546
object in the frame should be close to inference too.

137
00:08:40,648 --> 00:08:44,110
So in an example with a gun, you don't

138
00:08:44,190 --> 00:08:47,494
need to bring gun like to 10 cm in front

139
00:08:47,532 --> 00:08:51,122
of the camera because it is not realistic. So collect

140
00:08:51,186 --> 00:08:54,966
realistic images for the classifier. You would

141
00:08:54,988 --> 00:08:59,302
want to create a lot of crops with your detector.

142
00:08:59,446 --> 00:09:03,510
It's a good idea to run a detector with a low threshold

143
00:09:03,670 --> 00:09:07,782
to get a lot of false positives. Then try to analyze images

144
00:09:07,846 --> 00:09:11,230
and select groups like cell phones.

145
00:09:11,570 --> 00:09:15,680
If it shows up often and create a separate class,

146
00:09:16,370 --> 00:09:19,806
then you can create a class named other and put there all

147
00:09:19,828 --> 00:09:23,374
images which do not belong to any created

148
00:09:23,422 --> 00:09:26,466
class. Yeah, I will

149
00:09:26,568 --> 00:09:29,842
also mention deployment slightly. As we have said,

150
00:09:29,896 --> 00:09:33,794
it is important for us to have fast solution so we

151
00:09:33,832 --> 00:09:37,746
can just train a model on Pytorch or tensorflow and call it

152
00:09:37,768 --> 00:09:41,634
a date. I highly recommend converting your models to tensor

153
00:09:41,682 --> 00:09:45,430
RT and it's basically an optimization for

154
00:09:45,500 --> 00:09:49,850
Nvidia's gpus as

155
00:09:50,000 --> 00:09:53,082
it will make your model like two to five times

156
00:09:53,136 --> 00:09:56,822
faster and you will need less vram

157
00:09:56,886 --> 00:10:00,206
on your inference so both things are

158
00:10:00,228 --> 00:10:04,254
really good when you want to process as many video streams as

159
00:10:04,292 --> 00:10:08,126
possible. With Pytorch, you can also have

160
00:10:08,148 --> 00:10:12,186
a look to Tors script, but basically tensor

161
00:10:12,218 --> 00:10:15,810
RT is always better, I mean faster.

162
00:10:16,390 --> 00:10:21,170
So have a look to Tensorrt.

163
00:10:21,990 --> 00:10:25,630
The second thing I recommend having a serving solution,

164
00:10:25,790 --> 00:10:29,806
serving software such as Treetonserve or torch

165
00:10:29,838 --> 00:10:32,630
serve or maybe tensorflowserve.

166
00:10:33,050 --> 00:10:36,838
Basically it's like a backend where you store your model

167
00:10:37,004 --> 00:10:41,100
and then send requests with images to process

168
00:10:41,710 --> 00:10:44,922
that will help you for

169
00:10:44,976 --> 00:10:48,426
scaling your deployed solution. And let's have a look to a

170
00:10:48,448 --> 00:10:51,822
couple of examples so you just know where

171
00:10:51,876 --> 00:10:55,082
to start. As a first neural network

172
00:10:55,146 --> 00:10:58,798
detector, I often use yellow models. You can have a

173
00:10:58,804 --> 00:11:02,522
look to yellow v eight and

174
00:11:02,596 --> 00:11:06,446
there are several different models from nano

175
00:11:06,478 --> 00:11:10,834
version to extra large, so you can really find

176
00:11:10,952 --> 00:11:14,260
what you're looking for and what is important.

177
00:11:14,630 --> 00:11:17,810
Yellow models converge to tensor RT really easily,

178
00:11:17,890 --> 00:11:19,720
so keep an eye on that.

179
00:11:21,050 --> 00:11:23,890
As our second model classifier,

180
00:11:24,050 --> 00:11:28,066
I often start with efficient net maybe efficient

181
00:11:28,098 --> 00:11:31,782
net version two. It also has

182
00:11:31,836 --> 00:11:35,400
different sizes, around eight, so you can choose.

183
00:11:38,010 --> 00:11:41,754
All right, let's sum up. When you need to deploy

184
00:11:41,802 --> 00:11:47,806
an object detection solution which is going to be

185
00:11:47,828 --> 00:11:51,626
need to increase precision without sacrificing speed.

186
00:11:51,818 --> 00:11:55,342
Try using a classifier as your second model which

187
00:11:55,396 --> 00:11:58,560
runs on the crop of the detector when it finds anything.

188
00:11:59,410 --> 00:12:00,830
Thanks for your attention.

