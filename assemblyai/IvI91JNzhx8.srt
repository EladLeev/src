1
00:00:17,210 --> 00:00:20,746
Hi everyone, today I'm going to talk about how to predate

2
00:00:20,778 --> 00:00:24,574
apps and perform rollouts without going through stores from a

3
00:00:24,612 --> 00:00:28,440
single code. So let's introduce myself,

4
00:00:28,970 --> 00:00:32,614
my name is Lucas Onseca. I am a

5
00:00:32,652 --> 00:00:36,386
developer advocate at Zoop Innovation. I'm from Brazil

6
00:00:36,498 --> 00:00:40,214
and it's a pleasure to be here today. So to

7
00:00:40,252 --> 00:00:43,586
start I will use as an example of lower

8
00:00:43,628 --> 00:00:46,758
shop that wants to use electronic device

9
00:00:46,854 --> 00:00:50,560
as a main communication channel with the customers.

10
00:00:50,930 --> 00:00:54,954
So they had some valid propositions

11
00:00:55,082 --> 00:00:59,358
that they want to offer to the customers and

12
00:00:59,524 --> 00:01:03,410
they want to make the customers comfortable with the exact same

13
00:01:03,480 --> 00:01:05,380
experience regardless of the platform.

14
00:01:06,470 --> 00:01:10,094
The client, that's to start a flux

15
00:01:10,142 --> 00:01:13,890
in the mobile app and if he switches to the desktop

16
00:01:14,390 --> 00:01:19,190
he can continue where he let off that

17
00:01:19,340 --> 00:01:24,674
each customer had a unique and exclusive experience dependent

18
00:01:24,722 --> 00:01:28,198
of the business role. These application should change the layout

19
00:01:28,294 --> 00:01:31,642
or the behavior and whenever these

20
00:01:31,696 --> 00:01:35,206
are updates, they are immediately received

21
00:01:35,318 --> 00:01:39,706
by the customers. So all

22
00:01:39,728 --> 00:01:43,518
of those value propositions are based

23
00:01:43,604 --> 00:01:46,750
on hypothesis testing.

24
00:01:47,090 --> 00:01:50,430
So what is hypothesis testing?

25
00:01:50,850 --> 00:01:53,294
We start with hypothesis.

26
00:01:53,422 --> 00:01:56,702
Hypothesis is always a statement.

27
00:01:56,846 --> 00:02:00,386
It is something you assume to be true but needs to

28
00:02:00,408 --> 00:02:04,730
be verified. So you had to use metrics

29
00:02:04,910 --> 00:02:08,438
that is a unit of measure to verify that the test

30
00:02:08,524 --> 00:02:12,514
was successful and the hypothesis was validated.

31
00:02:12,642 --> 00:02:15,670
And you should uses the criteria,

32
00:02:16,330 --> 00:02:19,722
that is the value you expect to achieve in the metrics to

33
00:02:19,776 --> 00:02:22,330
validate your hypothesis.

34
00:02:22,670 --> 00:02:28,742
And after that become a these or not these

35
00:02:28,806 --> 00:02:32,142
is a hypothesis that given the matrix meets the

36
00:02:32,196 --> 00:02:35,950
criteria. So these. We had

37
00:02:36,020 --> 00:02:39,326
some examples of hypothesis test that can

38
00:02:39,348 --> 00:02:43,378
be applied to the floor shop. So SMS is an

39
00:02:43,544 --> 00:02:47,250
effective communication channel for people over 35

40
00:02:47,320 --> 00:02:48,180
years old.

41
00:02:49,590 --> 00:02:52,898
20% of discount is enough to customers

42
00:02:52,984 --> 00:02:56,418
to migrate from physical solution to a fully digital one.

43
00:02:56,504 --> 00:03:00,438
It's a value proposition. A, B or C best communicates the benefits

44
00:03:00,524 --> 00:03:03,862
of my solution to my target audience and

45
00:03:03,916 --> 00:03:07,030
if I increase the value of the products by 1.5

46
00:03:07,180 --> 00:03:10,986
my customers will perceive more value and

47
00:03:11,088 --> 00:03:13,420
consequently convert more.

48
00:03:14,110 --> 00:03:17,466
All of those are just

49
00:03:17,568 --> 00:03:20,170
statements or just hypothesis.

50
00:03:20,690 --> 00:03:23,786
Something that we can assume but we don't

51
00:03:23,818 --> 00:03:25,760
know if it's true.

52
00:03:26,210 --> 00:03:29,774
So if we want to

53
00:03:29,892 --> 00:03:33,518
make hypothesis tests in your service

54
00:03:33,684 --> 00:03:37,790
deploying on my structure, I can perform several

55
00:03:37,950 --> 00:03:41,794
deploys per day while on mobile as

56
00:03:41,832 --> 00:03:45,718
I depend of the stores to below these versions and

57
00:03:45,804 --> 00:03:49,346
rollout of the application. So make hypothesis

58
00:03:49,378 --> 00:03:53,800
tests are more expensive and complex to program

59
00:03:54,170 --> 00:03:58,214
how we make hypothesis tests in the mobile today.

60
00:03:58,412 --> 00:04:02,722
So we can use feature flags to control the release

61
00:04:02,786 --> 00:04:06,234
of the functionalities in our

62
00:04:06,272 --> 00:04:09,894
app, but we still don't have full control

63
00:04:10,032 --> 00:04:12,650
over these reviewed and releases.

64
00:04:12,730 --> 00:04:16,320
Prospects if we want to test for example

65
00:04:17,330 --> 00:04:20,922
whether SMS is an effective communication

66
00:04:20,986 --> 00:04:24,274
channel. We can create several tests through the

67
00:04:24,312 --> 00:04:27,762
back end and make ten uploads per

68
00:04:27,816 --> 00:04:31,170
day in the back end. But when we

69
00:04:31,240 --> 00:04:35,382
try to test hypothesis like switch value proposition a,

70
00:04:35,436 --> 00:04:39,522
B or c best communicates the benefits of my solution to my target

71
00:04:39,586 --> 00:04:43,686
audience that involves challenges to the front end we have

72
00:04:43,788 --> 00:04:48,140
a much more complex process to follow.

73
00:04:48,590 --> 00:04:52,230
So using the concept

74
00:04:52,310 --> 00:04:56,154
of server driven UI, that concept come

75
00:04:56,192 --> 00:05:00,126
to bring all of the dynamism found in the back end to these

76
00:05:00,148 --> 00:05:04,480
front end. So all of

77
00:05:06,050 --> 00:05:09,902
creating tests and hypothesis in the back end is

78
00:05:09,956 --> 00:05:13,950
pasted to the from end without needing to challenges

79
00:05:14,020 --> 00:05:18,130
these stores. So bring total control

80
00:05:18,280 --> 00:05:21,140
to those who use it.

81
00:05:22,310 --> 00:05:25,670
Then using single

82
00:05:25,740 --> 00:05:29,686
version of these application we can

83
00:05:29,788 --> 00:05:33,906
have two versions or three versions, ten versions

84
00:05:34,018 --> 00:05:38,410
in production of the same screen but with different uis.

85
00:05:40,110 --> 00:05:44,970
We can use different

86
00:05:45,040 --> 00:05:48,106
screens by regions or by country

87
00:05:48,208 --> 00:05:52,314
uses by business marketing for example

88
00:05:52,432 --> 00:05:57,406
to accommodate couture or market challenges in

89
00:05:57,428 --> 00:06:01,966
your screens in your fluxes. Or we

90
00:06:01,988 --> 00:06:05,022
can create unique experience per user.

91
00:06:05,086 --> 00:06:10,450
So switch user will say switch flux

92
00:06:11,430 --> 00:06:15,570
so who uses this concept?

93
00:06:16,730 --> 00:06:20,102
These we had some examples of

94
00:06:20,236 --> 00:06:23,874
players that use this like native

95
00:06:24,002 --> 00:06:27,542
server driven UI. So there are others players that

96
00:06:27,596 --> 00:06:31,222
use web applications to apply

97
00:06:31,276 --> 00:06:34,934
server driven UI. But here I had some examples

98
00:06:34,982 --> 00:06:38,150
of players that use native

99
00:06:38,230 --> 00:06:41,330
server driven web. So Swiggy, Urban, Bafood,

100
00:06:41,350 --> 00:06:45,150
Flipkart, Prime, Phonic, Spotify and ET

101
00:06:45,730 --> 00:06:49,214
and our floor shop

102
00:06:49,332 --> 00:06:54,626
wants to use this. So what

103
00:06:54,648 --> 00:06:57,774
we need to use server

104
00:06:57,822 --> 00:07:01,234
driven floor shop wants to know what we need to

105
00:07:01,272 --> 00:07:04,514
use this concept. To use this

106
00:07:04,552 --> 00:07:07,894
concept we need design system.

107
00:07:08,092 --> 00:07:11,234
So design system is all of UI

108
00:07:11,282 --> 00:07:15,142
companies in your application. They are described like

109
00:07:15,196 --> 00:07:19,098
components. So we measure custom

110
00:07:19,184 --> 00:07:21,702
companies buttons, labels,

111
00:07:21,846 --> 00:07:24,854
colors, text, inputs, titles, fonts,

112
00:07:24,902 --> 00:07:28,810
text, icons, colors all

113
00:07:28,880 --> 00:07:32,634
of our UI is implemented

114
00:07:32,682 --> 00:07:36,174
like a component and we

115
00:07:36,212 --> 00:07:41,518
can use this to create layouts and

116
00:07:41,604 --> 00:07:44,930
we need to make a JSON contract.

117
00:07:45,350 --> 00:07:48,578
So if we will send to the

118
00:07:48,584 --> 00:07:51,794
backend all of

119
00:07:51,832 --> 00:07:55,006
the UI logic, we had to make the

120
00:07:55,048 --> 00:07:58,854
front end and the back end communicate about it and we

121
00:07:58,892 --> 00:08:02,518
had to make a JSON contract to show

122
00:08:02,604 --> 00:08:06,360
switch component will be showed in the screen.

123
00:08:06,810 --> 00:08:10,662
So when to

124
00:08:10,716 --> 00:08:14,106
use server driven y to use

125
00:08:14,128 --> 00:08:17,354
server driven UI I

126
00:08:17,392 --> 00:08:20,674
want to apply dynamics flows

127
00:08:20,742 --> 00:08:24,686
that contain many business uses. When you want to

128
00:08:24,708 --> 00:08:28,874
apply a b tests, when you had hickory screen layout

129
00:08:28,922 --> 00:08:33,466
challenges, different layout settings for each business rule

130
00:08:33,658 --> 00:08:37,538
and when you need immediately content to be date without through

131
00:08:37,624 --> 00:08:41,774
these stars you should use server driven UI.

132
00:08:41,822 --> 00:08:45,720
They will help you to make your application

133
00:08:46,090 --> 00:08:50,440
more dynamic and effective and

134
00:08:51,690 --> 00:08:55,382
when not to use server driven one.

135
00:08:55,516 --> 00:09:00,170
So when your applications don't have a major design

136
00:09:00,240 --> 00:09:03,418
system recurring change to the design

137
00:09:03,504 --> 00:09:06,682
system. So it's not my flux that's changed often.

138
00:09:06,816 --> 00:09:10,806
So my design system challenges often. So you can't

139
00:09:10,918 --> 00:09:14,878
use server driven UI because this will

140
00:09:14,964 --> 00:09:18,746
not help you to implement this concept. Static screens

141
00:09:18,778 --> 00:09:23,614
are fluxes that don't change often. So you

142
00:09:23,652 --> 00:09:26,754
don't change your application. You don't need to change your application so

143
00:09:26,792 --> 00:09:30,734
you don't have to use server driven UI source code don't

144
00:09:30,782 --> 00:09:35,810
have layers that separate business role from uis. So code

145
00:09:36,490 --> 00:09:40,726
had to be a good architecture, a good

146
00:09:40,908 --> 00:09:44,598
separated layers. So if you don't have this

147
00:09:44,684 --> 00:09:48,110
you should make this first to use server

148
00:09:48,130 --> 00:09:51,674
driven UI and your service layer don't support scaling or

149
00:09:51,712 --> 00:09:55,420
a b tests. So the mobile should have

150
00:09:55,870 --> 00:09:59,126
separated business roles from uis

151
00:09:59,318 --> 00:10:03,390
and your service had to support scaling.

152
00:10:04,530 --> 00:10:08,894
So how can I do how my floor shop can

153
00:10:09,092 --> 00:10:12,160
do server driven UI so

154
00:10:13,510 --> 00:10:17,390
they can do it manually setting the contract

155
00:10:17,470 --> 00:10:21,026
between the front end and the back end or

156
00:10:21,128 --> 00:10:24,946
these can use frameworks to facilitate the application of

157
00:10:24,968 --> 00:10:28,514
this concept. So here I

158
00:10:28,552 --> 00:10:32,866
had some examples. Flipkart had process Facebook Lido Urban

159
00:10:32,898 --> 00:10:36,322
Bilona and I will show you Bigo.

160
00:10:36,386 --> 00:10:40,170
Bigo is an open source framework that help you to implement

161
00:10:40,670 --> 00:10:44,838
this concept. So here is the font

162
00:10:44,934 --> 00:10:49,334
of the information. So you want to see about process

163
00:10:49,382 --> 00:10:54,126
Lona Gator Lido you can access

164
00:10:54,308 --> 00:10:57,520
from this care code here.

165
00:10:58,370 --> 00:11:02,078
So what about Beagle? For this example

166
00:11:02,164 --> 00:11:05,662
I will use open source project called Beagle which

167
00:11:05,716 --> 00:11:09,250
facilitates the applications of this concept.

168
00:11:09,590 --> 00:11:13,570
So using Beagle as a dependence

169
00:11:13,990 --> 00:11:17,846
on both the front end and the back end you can use

170
00:11:17,948 --> 00:11:21,430
these cell on the server to serialize

171
00:11:22,570 --> 00:11:26,278
these screens to DSOn format and

172
00:11:26,444 --> 00:11:31,290
on the front end deserialize to Ui native companies.

173
00:11:31,790 --> 00:11:35,082
So as you can

174
00:11:35,136 --> 00:11:38,534
see Bigo uses the Facebook

175
00:11:38,662 --> 00:11:42,266
yoga library as an in

176
00:11:42,288 --> 00:11:46,234
giant switch implemented the concept of flexbox

177
00:11:46,362 --> 00:11:50,122
on mobile. So to organize

178
00:11:50,186 --> 00:11:54,174
the elements on the screen to managing

179
00:11:54,222 --> 00:11:58,414
to create complex screen we use the Flexbox

180
00:11:58,462 --> 00:12:01,650
concept from yoga library.

181
00:12:02,390 --> 00:12:05,220
So let's code.

182
00:12:06,330 --> 00:12:10,054
If you want to access the code that

183
00:12:10,092 --> 00:12:13,958
I will show you can use this QR code

184
00:12:14,124 --> 00:12:18,280
and I will show you the example.

185
00:12:18,890 --> 00:12:22,614
So here I had the

186
00:12:22,652 --> 00:12:26,314
backend. So if you access the

187
00:12:26,352 --> 00:12:30,454
GitHub code you should use the intellij

188
00:12:30,582 --> 00:12:34,990
or what you want to uploaded the backend and

189
00:12:35,060 --> 00:12:38,874
you had to open the back end. Sample these bigo sample

190
00:12:38,922 --> 00:12:42,480
back end. Here I had

191
00:12:43,650 --> 00:12:49,506
x sample application so this

192
00:12:49,528 --> 00:12:53,470
is my back end. Here I had a controller,

193
00:12:53,630 --> 00:12:56,466
I am using spring.

194
00:12:56,658 --> 00:12:59,954
So here I had zup innovation processor

195
00:13:00,002 --> 00:13:04,150
from spring to read the endpoint

196
00:13:04,570 --> 00:13:08,282
and here is backend. So we call

197
00:13:08,336 --> 00:13:12,620
this of BFf backend for from end and

198
00:13:13,550 --> 00:13:18,086
the difference between normal

199
00:13:18,118 --> 00:13:21,870
backend or normal BFf is the power

200
00:13:21,940 --> 00:13:25,866
of describing it. Describe your uis

201
00:13:25,978 --> 00:13:29,726
using the cell kotlin these cell so this backend is

202
00:13:29,748 --> 00:13:33,090
in Kotlin and here

203
00:13:33,160 --> 00:13:36,990
we describe our screen. So these I'm

204
00:13:37,070 --> 00:13:42,354
running on localhost so my

205
00:13:42,392 --> 00:13:46,678
application is consuming this screen from

206
00:13:46,844 --> 00:13:50,502
JSON and here I had a

207
00:13:50,556 --> 00:13:54,840
navigation bar, I had a container, I had

208
00:13:55,610 --> 00:14:01,018
a text input button to

209
00:14:01,104 --> 00:14:05,100
log in with biometry and I had a button.

210
00:14:06,910 --> 00:14:10,880
So if I want to change something these

211
00:14:11,250 --> 00:14:15,038
I can just updated my back end

212
00:14:15,204 --> 00:14:19,422
and make an upload here and

213
00:14:19,556 --> 00:14:24,030
my front end will get these updates

214
00:14:24,110 --> 00:14:28,754
immediately. So if I change the text to

215
00:14:28,872 --> 00:14:32,242
english so I will change here to

216
00:14:32,376 --> 00:14:37,954
log in cpf

217
00:14:38,082 --> 00:14:42,178
or cpf

218
00:14:42,354 --> 00:14:49,408
or so

219
00:14:49,494 --> 00:14:53,072
if I upload this stop

220
00:14:53,126 --> 00:14:57,008
and run I will change all of

221
00:14:57,174 --> 00:15:02,152
those texts so it

222
00:15:02,286 --> 00:15:45,904
let wait restart my

223
00:15:45,942 --> 00:15:49,704
application. The text

224
00:15:49,902 --> 00:15:53,304
was updated so in the next time that the

225
00:15:53,342 --> 00:15:56,532
user access these z screen they will receive

226
00:15:56,596 --> 00:16:00,590
immediately my content updated so

227
00:16:01,760 --> 00:16:05,116
I can make challenges in

228
00:16:05,138 --> 00:16:08,572
the UI. I can add some text

229
00:16:08,626 --> 00:16:12,704
input here so if I want to put

230
00:16:12,742 --> 00:16:19,360
the password here so password

231
00:16:19,940 --> 00:16:24,690
and here password and

232
00:16:29,840 --> 00:16:35,470
here I had to fix

233
00:16:38,720 --> 00:16:42,032
so I will

234
00:16:42,086 --> 00:16:44,530
use global form.

235
00:16:51,370 --> 00:16:57,142
So we had two text

236
00:16:57,196 --> 00:17:00,778
inputs and two texts and if I

237
00:17:00,864 --> 00:17:04,682
upload this I upload this change

238
00:17:04,736 --> 00:17:08,460
on my back end so let's wait

239
00:17:11,700 --> 00:17:15,830
for that. Let me try into this text.

240
00:17:32,640 --> 00:17:37,620
So I

241
00:17:37,690 --> 00:17:41,790
open the siri again sorry it

242
00:17:55,560 --> 00:18:10,708
close it feature

243
00:18:10,884 --> 00:18:18,072
is awesome. Um close

244
00:18:18,126 --> 00:18:25,118
these deck don't

245
00:18:25,134 --> 00:18:31,364
tell to

246
00:18:31,402 --> 00:18:57,620
uses siri nice

247
00:18:58,870 --> 00:19:07,000
ohm bicep feature awesome

248
00:19:25,200 --> 00:19:29,390
okay I will open the x code and

249
00:19:29,780 --> 00:19:31,330
run this again.

250
00:19:33,220 --> 00:19:38,450
Let's run this again okay

251
00:19:44,880 --> 00:19:49,036
and now I had two text inputs

252
00:19:49,228 --> 00:19:53,344
so I can change the

253
00:19:53,382 --> 00:19:57,250
logic on my back end using

254
00:19:58,340 --> 00:20:02,960
beagle. So here I had condition

255
00:20:03,120 --> 00:20:06,916
component so I can create conditions on

256
00:20:06,938 --> 00:20:11,060
my back end. Here I'm using just a simple condition

257
00:20:11,400 --> 00:20:16,008
if my macro danger is one two these 456789

258
00:20:16,174 --> 00:20:20,168
I will pass to the next screen but

259
00:20:20,254 --> 00:20:24,120
I could use another service or call

260
00:20:24,190 --> 00:20:27,724
another serves to make sure that the user is in

261
00:20:27,762 --> 00:20:31,212
my base so I can use this

262
00:20:31,266 --> 00:20:34,856
valley to call another serves.

263
00:20:34,968 --> 00:20:38,316
But here is a

264
00:20:38,338 --> 00:20:42,044
simple condition validation if I

265
00:20:42,082 --> 00:20:48,916
don't attention and if

266
00:20:49,058 --> 00:20:53,972
invalid cpf. So if

267
00:20:54,026 --> 00:20:57,796
I just use

268
00:20:57,898 --> 00:21:03,648
one, two, three and click here they

269
00:21:03,674 --> 00:21:07,736
will show you mia alert let

270
00:21:07,758 --> 00:21:11,610
me updated this so these now we had

271
00:21:13,520 --> 00:21:17,230
full english screen so

272
00:21:18,800 --> 00:21:21,150
let's replace the application.

273
00:21:27,210 --> 00:21:31,434
I'm replacing the application because my

274
00:21:31,472 --> 00:21:33,820
emulator is not working well,

275
00:21:35,550 --> 00:21:39,142
but I just had to predate

276
00:21:39,206 --> 00:21:42,382
on my App Store's application so

277
00:21:42,436 --> 00:21:46,030
I can just use my back end to change my

278
00:21:46,100 --> 00:21:48,750
front end logic, my front end Ui.

279
00:21:49,250 --> 00:21:52,810
All of those companies are native

280
00:21:52,890 --> 00:21:56,754
companies. So I had the same

281
00:21:56,792 --> 00:22:00,514
power of the native to use on my

282
00:22:00,552 --> 00:22:04,914
back end. So if I use a

283
00:22:04,952 --> 00:22:08,294
different key credential I will

284
00:22:08,332 --> 00:22:11,734
get this alert. But if I

285
00:22:11,772 --> 00:22:15,462
use the right credential I will

286
00:22:15,516 --> 00:22:19,410
see the next page. So I can create

287
00:22:19,580 --> 00:22:23,014
complex fluxes, I can create logic,

288
00:22:23,142 --> 00:22:27,674
I can call another services.

289
00:22:27,872 --> 00:22:32,414
So here I had an

290
00:22:32,452 --> 00:22:36,318
example of send request so these I call

291
00:22:36,404 --> 00:22:40,030
another application, another serves.

292
00:22:40,370 --> 00:22:44,058
So all of the power that I had

293
00:22:44,164 --> 00:22:47,682
in my mobile I can use on my back

294
00:22:47,736 --> 00:22:51,940
end to make the application

295
00:22:52,550 --> 00:22:57,562
more powerful, I can make these applications more customizable.

296
00:22:57,726 --> 00:23:01,190
So this is the power of use

297
00:23:01,260 --> 00:23:05,190
server driven UI concept using kotlin and

298
00:23:05,340 --> 00:23:09,086
the back end. But if you don't

299
00:23:09,138 --> 00:23:12,678
want to use bigo you can do it manually.

300
00:23:12,854 --> 00:23:16,614
So you should get a JSON

301
00:23:16,662 --> 00:23:20,362
contract and your front end head

302
00:23:20,416 --> 00:23:23,978
to no switch component

303
00:23:24,154 --> 00:23:27,390
is colored on my JSOn.

304
00:23:27,810 --> 00:23:32,222
So that is it to

305
00:23:32,276 --> 00:23:35,922
show you very happy to

306
00:23:36,056 --> 00:23:39,618
be here with you and I hope that you learned something

307
00:23:39,784 --> 00:23:43,300
with me and if you want make contact

308
00:23:45,350 --> 00:23:49,454
you can get this QR

309
00:23:49,502 --> 00:23:58,600
code to connect. So let me here

310
00:23:59,210 --> 00:24:03,266
we had all of my social medias

311
00:24:03,298 --> 00:24:06,534
if you want to make contact you want to make

312
00:24:06,572 --> 00:24:09,922
patches and I am on the discord server

313
00:24:10,066 --> 00:24:13,870
so be free to call me. Thank you so much and

314
00:24:13,940 --> 00:24:14,800
see you.

