1
00:00:25,570 --> 00:00:29,266
Hello and welcome. I am Toddy Copian. This is programming

2
00:00:29,298 --> 00:00:32,614
your way up a skyscraper. Coding in HMC Architects profession here at Conf

3
00:00:32,652 --> 00:00:36,754
42. Let's get started. Little bit about me. Design technologist,

4
00:00:36,802 --> 00:00:40,162
developer background architecture. I've built everything from ballparks

5
00:00:40,226 --> 00:00:44,086
to skyscrapers, to apartments and everything in between. And the

6
00:00:44,108 --> 00:00:47,634
common thread has been doing things better with data and automation.

7
00:00:47,682 --> 00:00:51,258
And Python has been a big benefit to me, my team. So I'll

8
00:00:51,274 --> 00:00:54,906
show you a little bit about what's possible with Python, and it is that Python

9
00:00:54,938 --> 00:00:58,574
makes it possible. I want to show you this great set of examples of what

10
00:00:58,612 --> 00:01:02,270
all the tools and methods Python has been

11
00:01:02,340 --> 00:01:05,598
utilized to work with the architects out there. And just

12
00:01:05,604 --> 00:01:09,170
to be clear, there's architects and there's architects. I'm talking about traditional building

13
00:01:09,240 --> 00:01:12,606
construction, architects of floor plans and stuff like that. Many of you might be familiar

14
00:01:12,638 --> 00:01:16,382
with computer architects and system design architects,

15
00:01:16,446 --> 00:01:20,354
but they both have a common ground with Christopher Alexander's pattern language,

16
00:01:20,402 --> 00:01:23,798
which has been a big influence to both disciplines. The idea of a

17
00:01:23,804 --> 00:01:27,142
pattern language is you can reuse pattern that you created in the past

18
00:01:27,196 --> 00:01:30,794
that has been reliable and you can reuse it to came without reinventing the whole

19
00:01:30,832 --> 00:01:34,314
process every time, not only saving you a lot of effort, but also making

20
00:01:34,352 --> 00:01:37,830
it easier to make efficient processes.

21
00:01:37,910 --> 00:01:41,766
It's a philosophy of design. It's influenced me, a lot of other designers

22
00:01:41,798 --> 00:01:45,854
out there and programmers worldwide. So if you are thinking like what

23
00:01:45,892 --> 00:01:49,390
this is, there's actually a lot of common ground. These aren't two separate things altogether.

24
00:01:49,730 --> 00:01:53,538
They provide different outputs, but they're very similar. And a quick history lesson of

25
00:01:53,544 --> 00:01:57,106
HMC Architects works. Historically, you would think architects are

26
00:01:57,208 --> 00:02:01,154
drawing pictures all day long that can create the

27
00:02:01,192 --> 00:02:04,914
design. And you keep coding through that process of

28
00:02:05,032 --> 00:02:08,606
drawing, updating drawings, getting feedback, creating the modifications,

29
00:02:08,638 --> 00:02:11,926
getting more detail in your design. And in the past, you had anywhere from

30
00:02:11,948 --> 00:02:15,622
a few dozen drawing plans to a few hundred. Now you need

31
00:02:15,676 --> 00:02:18,706
thousands, literally thousands. I've worked with decks construction.

32
00:02:18,738 --> 00:02:22,394
Document decks have thousands of documents. It's a wasteful and limited process.

33
00:02:22,512 --> 00:02:26,266
It's kind of outgrown its use. So people are moving into different

34
00:02:26,288 --> 00:02:29,082
ways to work, and that's where computer technology comes into play.

35
00:02:29,216 --> 00:02:33,162
This is just one example of some computational design. Computational design is basically

36
00:02:33,216 --> 00:02:37,098
using computers to help you create a design based on your inputs and parameters,

37
00:02:37,194 --> 00:02:41,262
and working through that with the aid of a computer. Basically not possible with

38
00:02:41,396 --> 00:02:44,526
a human hand. So this has been utilized a lot by

39
00:02:44,548 --> 00:02:47,874
architects over the last decade or so, and traditional means of

40
00:02:47,912 --> 00:02:51,054
design documentation not sufficient. So we're trying to do something more sophisticated

41
00:02:51,102 --> 00:02:54,606
like this without spending 100 years trying to draw it and document

42
00:02:54,638 --> 00:02:58,934
it and make it functional, constructable, building. That's where python comes to play.

43
00:02:59,052 --> 00:03:02,902
Something as simple as just creating geometry with code

44
00:03:02,956 --> 00:03:06,342
and scripts. Just simple scripting has gone a long way. In this example,

45
00:03:06,396 --> 00:03:09,746
you can see here that we create a bunch of points as a diamond shape.

46
00:03:09,778 --> 00:03:13,230
The points are then connected into planes, and then you could take this one shape

47
00:03:13,250 --> 00:03:16,310
you created and then multiply it, and from there you can get much more sophisticated.

48
00:03:16,390 --> 00:03:19,786
They can see the starting points if he's using the code. And this is in

49
00:03:19,808 --> 00:03:23,146
an example called grasshopper and rhino. It's a general purpose

50
00:03:23,178 --> 00:03:26,622
3d modeling tool, and it's gotten a lot of traction. This is what more

51
00:03:26,756 --> 00:03:31,082
designers want to do. They want to create elaborate concepts

52
00:03:31,146 --> 00:03:34,766
in design and make it construction, but they don't want to be

53
00:03:34,788 --> 00:03:38,066
limited by the software and technology around them. So this has been the

54
00:03:38,088 --> 00:03:41,826
starting point over ten years ago with a lot of architects, and we also use

55
00:03:41,848 --> 00:03:45,586
a system called building information modeling. The idea is that you can combine a

56
00:03:45,608 --> 00:03:48,962
3d model with a database, a relational

57
00:03:49,026 --> 00:03:52,614
database that has content like the size of a wall,

58
00:03:52,732 --> 00:03:56,070
the type of a floor, whether it's concrete or wood, what have you.

59
00:03:56,140 --> 00:03:58,678
Keep it in the model, keep it all together,

60
00:03:58,844 --> 00:04:02,374
and from there you can use it in your drawings.

61
00:04:02,422 --> 00:04:06,726
So you have more information embedded in your drawings. It's been a big time saver

62
00:04:06,758 --> 00:04:10,762
because you have a database. But we also want to work

63
00:04:10,816 --> 00:04:14,602
with this information, again, not be limited by the software one uses.

64
00:04:14,666 --> 00:04:18,170
Revit. Revit has an open source tool called Dynamo,

65
00:04:18,250 --> 00:04:21,854
this big old colorful shape in the middle, which can help

66
00:04:21,892 --> 00:04:25,066
you automate the process of coding data and geometry

67
00:04:25,098 --> 00:04:28,594
to the model so you're not trying to be a monkey and run through

68
00:04:28,632 --> 00:04:32,126
everything yourself. And this is an example of dynamo. It's a visual

69
00:04:32,158 --> 00:04:35,954
scripting medium, it's low code. You can do cool things like create this

70
00:04:35,992 --> 00:04:39,266
curvy geometry through a dataflow and then add like an image to

71
00:04:39,288 --> 00:04:41,606
it. It's very fun to do that kind of stuff and explore this way.

72
00:04:41,628 --> 00:04:44,998
It's not something you can really do with the software, the revit software on your

73
00:04:45,004 --> 00:04:48,758
own. And I've been using it, for example, to create towers. And all I

74
00:04:48,764 --> 00:04:52,066
do is put an input of a bunch of coordinates with the type of levels

75
00:04:52,098 --> 00:04:55,866
and walls I want. I modify the inputs, and I have an

76
00:04:55,888 --> 00:04:58,826
output of floors and walls that I want in the model, and it looks like

77
00:04:58,848 --> 00:05:02,426
this. On the left is the wireframe of the inputs and extruding it

78
00:05:02,448 --> 00:05:06,126
through 100 levels on the right. I have a fully formed skyscraper that

79
00:05:06,148 --> 00:05:09,962
I can have elevations for and put in my documentation sheet,

80
00:05:10,026 --> 00:05:13,498
which has been great and it's really an awesome output.

81
00:05:13,514 --> 00:05:16,902
And Dynamo with all this visual scripting is what was my gateway into programming.

82
00:05:16,986 --> 00:05:20,286
But sometimes you want to do more and this is my gateway into Python

83
00:05:20,318 --> 00:05:23,758
programming was the node of Python in Dynamo that lets

84
00:05:23,774 --> 00:05:27,138
you do much more with fewer steps. And once I discovered this, I kind of

85
00:05:27,144 --> 00:05:31,266
fell in love. You can do something as simple as taking geometrical

86
00:05:31,298 --> 00:05:34,806
shape like just a basic rectangle with a length of width of 100ft. And through

87
00:05:34,828 --> 00:05:38,306
a couple of variables of setting the origin and rotation

88
00:05:38,338 --> 00:05:41,762
axis, you can iterate through the rotation

89
00:05:41,906 --> 00:05:45,254
using floats and a set degree and just create a twisting tower.

90
00:05:45,302 --> 00:05:48,266
You could do this in the visual scripting format, but it takes more steps and

91
00:05:48,288 --> 00:05:51,126
may not be has fluid, but I could take something as simple as a script

92
00:05:51,158 --> 00:05:54,654
in Pythonweb in this visual scripting medium and create

93
00:05:54,692 --> 00:05:58,702
some great shapes. So this is what's been releasing a lot of

94
00:05:58,756 --> 00:06:02,494
efficiency and benefit for designers using just Pythonweb. A very very simple

95
00:06:02,532 --> 00:06:06,046
python I could teach a child. And this is something we'll grow with here.

96
00:06:06,148 --> 00:06:09,486
And on top of that, we have another great tool called Blender. I think more

97
00:06:09,508 --> 00:06:12,046
than a few of you have used it. It's a different software platform than what

98
00:06:12,068 --> 00:06:15,414
I've talked about with Rhino and Rabbit, but these are all completely different products from

99
00:06:15,452 --> 00:06:19,286
completely different companies. And proprietary open source like blender, they're all using

100
00:06:19,308 --> 00:06:22,742
Python supports Python. It has a huge user community

101
00:06:22,876 --> 00:06:26,310
and it does a great job using a system called meshes. It's not

102
00:06:26,380 --> 00:06:29,758
data, it's mesh. But there's a new add in called Blender

103
00:06:29,794 --> 00:06:33,606
BIM, which takes that building information, modeling, that database format with parametric

104
00:06:33,638 --> 00:06:36,970
modeling, and an open source format called IFC to then

105
00:06:37,040 --> 00:06:40,662
take the free to use blender tools with these integrations

106
00:06:40,726 --> 00:06:44,666
with these open source formats, to then create your geometry, then push into a proprietary

107
00:06:44,698 --> 00:06:47,854
format like Revit or ArchicAd as BIM models, which to me

108
00:06:47,892 --> 00:06:51,562
my world is like candy. This is amazing that I can open so many avenues

109
00:06:51,626 --> 00:06:55,262
design and configuration and so free floating from there.

110
00:06:55,316 --> 00:06:58,366
This is what it looks like basically in blender you create a series

111
00:06:58,398 --> 00:07:02,206
of meshes, then volumes, and then you attribute shapes

112
00:07:02,238 --> 00:07:04,978
to it and you can put components like windows and doors through it. With the

113
00:07:04,984 --> 00:07:08,539
blender Bim add in and really in a very few steps you

114
00:07:09,039 --> 00:07:12,710
can go from just some basic massing to a full building section floor plan

115
00:07:12,780 --> 00:07:16,086
c here. This is all possible thanks to the contributors in the

116
00:07:16,108 --> 00:07:20,086
space of both Blender and Pythonweb, and just the growth of information in the

117
00:07:20,108 --> 00:07:23,530
built environment. And you can eventually take it and create something like this,

118
00:07:23,600 --> 00:07:26,954
a skyscraper, which is kind of like the whole point of this

119
00:07:26,992 --> 00:07:30,426
talk is how we can get architects the tools they need to

120
00:07:30,448 --> 00:07:33,946
design faster and better, to get better results and to get the design they

121
00:07:33,968 --> 00:07:36,894
want. Others are architects, very open minded people, but at the end of the day,

122
00:07:36,932 --> 00:07:39,150
this is what they want to do. They want to design, they want to make

123
00:07:39,220 --> 00:07:42,974
the most compelling kinds of work. And all

124
00:07:43,012 --> 00:07:46,226
these tools with the Python open source community has been

125
00:07:46,248 --> 00:07:50,078
making that possible over the years. And another great example of is not just designing,

126
00:07:50,094 --> 00:07:53,762
but also designing with a lot of thought in mind.

127
00:07:53,816 --> 00:07:57,250
And these days, environmental design, sustainable design, isn't big.

128
00:07:57,320 --> 00:08:00,626
We have another great contributor from the Pythonweb community called Ladybug

129
00:08:00,658 --> 00:08:04,226
Tools, which can run in any geometry engine. From any of the examples I showed

130
00:08:04,258 --> 00:08:08,114
before, all written in Pythonweb. Pip install LBT ladybug

131
00:08:08,162 --> 00:08:11,462
tools. It's really cool. In this case, you're seeing the sun kind of

132
00:08:11,516 --> 00:08:15,094
canvas overhead, and we can get the sense of how much light's in the room

133
00:08:15,212 --> 00:08:18,486
really useful, especially in this visual scripting stage that I showed you earlier, that you

134
00:08:18,508 --> 00:08:21,678
could just kind of design your room. You don't export to another software. It gives

135
00:08:21,684 --> 00:08:25,098
you some greater results, gives you some options. It goes through a lot of neural

136
00:08:25,114 --> 00:08:28,814
networks to give you some options of what's possible with the results, and helps you

137
00:08:28,852 --> 00:08:31,946
narrow down definition of what you're trying to find in the most balanced

138
00:08:31,978 --> 00:08:35,518
room for light and energy, and pick a few from there. If you're

139
00:08:35,534 --> 00:08:39,278
not super savvy at a high level, you can make some good decisions.

140
00:08:39,374 --> 00:08:42,626
And another tool from that same developer is called

141
00:08:42,648 --> 00:08:46,750
honeybee, and helps you visualize the spaces for daylight energy analysis.

142
00:08:46,830 --> 00:08:49,970
This is going to be a big win for people who are designing spaces.

143
00:08:50,050 --> 00:08:53,894
You can imagine this being a single floor of a 100 story building, and if

144
00:08:53,932 --> 00:08:57,126
the building is oriented north, this energy study holds up in

145
00:08:57,148 --> 00:09:00,150
every floor because the sun's going to come in the same way, assuming there's no

146
00:09:00,220 --> 00:09:03,686
shadows, for example, blocking you. So these are the kind of tools that can be

147
00:09:03,708 --> 00:09:06,966
useful in a very fast way to get some great results. They're all free,

148
00:09:07,068 --> 00:09:09,766
and you could take that. And then instead of just having these kind of one

149
00:09:09,788 --> 00:09:12,830
off designs and kind of just leaving it done, when we finish the project,

150
00:09:12,900 --> 00:09:15,886
we can study the building. There's an example. We have a tower that has lot

151
00:09:15,908 --> 00:09:19,134
of floors, and for each one has a different space and different kind of space

152
00:09:19,172 --> 00:09:23,562
for different purposes. At the bottom there you can see the x axis displaying

153
00:09:23,706 --> 00:09:26,846
date and the y axis displaying kilowatt hours and how

154
00:09:26,868 --> 00:09:29,618
much time that's being, or how much energy being used over time. So now we

155
00:09:29,624 --> 00:09:33,266
have a live information feedback in the built space because we

156
00:09:33,288 --> 00:09:37,106
have something like Python to collect this data as an energy model and export it

157
00:09:37,128 --> 00:09:40,358
in a very straightforward way so we don't have to just assume it's working okay

158
00:09:40,444 --> 00:09:43,026
per design. You have to always check it. And this is kind of the growth

159
00:09:43,058 --> 00:09:47,538
of python. In the future it'll be a great tool for integration.

160
00:09:47,714 --> 00:09:51,410
You can use all sorts of data formats like XML,

161
00:09:51,490 --> 00:09:55,174
CSV, HTML, JSON, the bin models, the design models,

162
00:09:55,222 --> 00:09:58,710
everything put into Python. From there you can get data frames to pandas,

163
00:09:58,790 --> 00:10:02,586
do can energy analysis or data analysis and visualization of mapplotlib or

164
00:10:02,608 --> 00:10:05,786
so many other packages and libraries. This is where Pythonweb becomes

165
00:10:05,818 --> 00:10:09,294
the glue between different kinds of efforts in the built space and

166
00:10:09,332 --> 00:10:12,638
design space. And again, just want to reiterate it, Python makes it

167
00:10:12,644 --> 00:10:16,206
possible. It used to be architects were kind of beholden

168
00:10:16,238 --> 00:10:20,094
to proprietary formats and corporate kind of expectations

169
00:10:20,142 --> 00:10:23,954
of how you work. This has really opened floodgates for us to work more

170
00:10:23,992 --> 00:10:27,734
fluidly. And I think all the contributors here, special thanks to everybody here.

171
00:10:27,772 --> 00:10:31,138
These are all open source tools. Some of the other software

172
00:10:31,234 --> 00:10:35,186
is proprietary, but everything you see here is effectively either open source

173
00:10:35,218 --> 00:10:38,758
and primarily Python and developed by open source contributors. So a

174
00:10:38,764 --> 00:10:41,810
big thanks to everybody on this list and to Python contributors out everywhere.

175
00:10:41,890 --> 00:10:45,238
Whatever you do makes a big difference. Your software is being utilized in ways you

176
00:10:45,244 --> 00:10:49,542
wouldn't expect before. So I'm going to keep shouting to the rooftop about

177
00:10:49,596 --> 00:10:53,178
how we we can design better buildings. Large came small scale, any scale

178
00:10:53,194 --> 00:10:56,522
with Python tools, and just hope we have more traction.

179
00:10:56,666 --> 00:10:59,982
And thanks everyone for attending my talk at conf

180
00:11:00,036 --> 00:11:02,654
42. Please get in touch with me if you have any questions about this talk.

181
00:11:02,692 --> 00:11:05,582
Just want to chat. It's been good talking with you. Have a good one.

182
00:11:05,636 --> 00:11:06,046
Thanks,

