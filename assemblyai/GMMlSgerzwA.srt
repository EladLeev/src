1
00:00:25,010 --> 00:00:27,590
Hello everyone, I'm Shirel Moog.

2
00:00:28,490 --> 00:00:32,150
Today we'll talk about developer observability,

3
00:00:32,650 --> 00:00:36,950
which I think should be the fourth pillar of observability.

4
00:00:37,770 --> 00:00:40,774
But first let me say a couple of things about me.

5
00:00:40,972 --> 00:00:44,722
I wrote a few books, including one about debugging,

6
00:00:44,786 --> 00:00:48,440
which covers all of the topics we'll discuss here.

7
00:00:49,050 --> 00:00:53,390
I've worked in this industry for decades, in many companies

8
00:00:53,540 --> 00:00:57,040
and as a consultant. I also worked

9
00:00:57,410 --> 00:01:00,830
at sun, which became Oracle, etc.

10
00:01:01,650 --> 00:01:05,154
You can contact me over my socials listed here and follow me

11
00:01:05,192 --> 00:01:08,594
on Twitter, LinkedIn, etc. Check out my

12
00:01:08,632 --> 00:01:12,242
YouTube channel and my blog for videos and posts in

13
00:01:12,296 --> 00:01:16,502
this style. This is my April book

14
00:01:16,556 --> 00:01:20,274
titled practical debugging at scale. Everything in today's

15
00:01:20,322 --> 00:01:23,320
talk is in there, and a lot more.

16
00:01:23,770 --> 00:01:27,240
I have another book about Java coming out. In a couple of months

17
00:01:27,550 --> 00:01:31,100
it will cover Java eight to 21.

18
00:01:31,470 --> 00:01:34,140
Let's jump right into the talk.

19
00:01:34,510 --> 00:01:38,230
Most of us know the three pillars of observability.

20
00:01:38,390 --> 00:01:42,414
They are logs, which are mostly written by

21
00:01:42,452 --> 00:01:46,202
the developer but ingested and managed by Ops

22
00:01:46,346 --> 00:01:50,382
traces which are usually pretty seamless for developers who

23
00:01:50,436 --> 00:01:53,890
quite often aren't even aware they exist,

24
00:01:54,470 --> 00:01:58,766
and metrics which help us measure and quantify

25
00:01:58,878 --> 00:02:01,940
pretty much everything but our application.

26
00:02:03,190 --> 00:02:06,710
They are all great and essential as

27
00:02:06,780 --> 00:02:10,150
part of a healthy production environment.

28
00:02:11,210 --> 00:02:14,466
But they all have a few drawbacks.

29
00:02:14,578 --> 00:02:17,830
The first is the fact that they are static.

30
00:02:18,510 --> 00:02:22,300
I can't add a log into a production system.

31
00:02:22,670 --> 00:02:26,554
A developer needs to make that change, then go

32
00:02:26,592 --> 00:02:30,054
through a process to add the log and

33
00:02:30,112 --> 00:02:33,566
thats takes a while. This is

34
00:02:33,588 --> 00:02:37,226
true for metrics and traces as well. While traces

35
00:02:37,338 --> 00:02:41,210
are typically seamless, thats is not universal

36
00:02:41,290 --> 00:02:45,022
and it's sometimes hard to understand a trace

37
00:02:45,086 --> 00:02:48,482
without custom spans. This is best

38
00:02:48,536 --> 00:02:52,082
summed up in a visual was thats is

39
00:02:52,136 --> 00:02:56,034
a familiar pattern. We have a problem in production

40
00:02:56,162 --> 00:02:59,382
so we need to add more information, a log,

41
00:02:59,516 --> 00:03:03,670
a metric, or sometimes more. Then we need

42
00:03:03,740 --> 00:03:07,720
a pull request or a similar review process.

43
00:03:08,270 --> 00:03:11,770
This can take a while. In some companies we have

44
00:03:11,840 --> 00:03:15,820
double reviews which can really stretch the time.

45
00:03:16,270 --> 00:03:19,922
Then we go through CI, CD and possibly a QA

46
00:03:20,006 --> 00:03:23,422
process beyond testing to finally get

47
00:03:23,476 --> 00:03:27,454
that code into production. This whole process can

48
00:03:27,492 --> 00:03:31,102
take days or sometimes more. If we don't have

49
00:03:31,156 --> 00:03:34,782
a fast CD cycle, then in production

50
00:03:34,846 --> 00:03:38,420
we need the user to reproduce the problem.

51
00:03:39,030 --> 00:03:42,702
This might be a flaky problem that's

52
00:03:42,766 --> 00:03:46,520
hard to reproduce. This might take a while.

53
00:03:46,970 --> 00:03:50,758
Then when we review the problem, it is often the case

54
00:03:50,844 --> 00:03:54,966
that we didn't log enough. We don't have the

55
00:03:54,988 --> 00:03:57,640
exact information that we need.

56
00:03:58,990 --> 00:04:02,858
We then need to go all the way back to square

57
00:04:02,944 --> 00:04:07,018
one and start that cycle all

58
00:04:07,104 --> 00:04:10,774
over again. That's the

59
00:04:10,832 --> 00:04:13,706
CICD cycle of death.

60
00:04:13,898 --> 00:04:17,802
I use this term a lot and every time I describe

61
00:04:17,866 --> 00:04:21,806
this I get a lot of nods from the crowd. We all

62
00:04:21,828 --> 00:04:24,530
know the story. It's universal.

63
00:04:24,870 --> 00:04:28,734
We all suffer through that cycle when tracking an elusive

64
00:04:28,782 --> 00:04:33,570
bug. It's a deep pain in our industry,

65
00:04:34,390 --> 00:04:37,110
but things can be worse.

66
00:04:37,850 --> 00:04:42,150
Yes, worse than this painful cycle.

67
00:04:42,650 --> 00:04:45,878
The solution is often to log

68
00:04:45,964 --> 00:04:50,102
more just in case. This seems like a sensible

69
00:04:50,166 --> 00:04:54,682
solution. We solve the problem with lack of data by

70
00:04:54,736 --> 00:04:58,538
adding a lot of data. To be fair, that does

71
00:04:58,624 --> 00:05:02,206
work on some occasions, but it is one

72
00:05:02,228 --> 00:05:05,690
of those cases where the cure is worse.

73
00:05:05,770 --> 00:05:09,450
Thats the disease. Logging ingestion

74
00:05:09,530 --> 00:05:13,234
alone can account to a third of

75
00:05:13,272 --> 00:05:17,380
the total cloud costs. That is often much

76
00:05:17,750 --> 00:05:21,330
more than other costs combined.

77
00:05:21,910 --> 00:05:25,910
Logging seriously impacts application performance.

78
00:05:26,410 --> 00:05:29,640
This has a cascading effect

79
00:05:30,010 --> 00:05:33,250
of requiring additional resources,

80
00:05:33,410 --> 00:05:36,226
slowing the application, etc. Cetera.

81
00:05:36,418 --> 00:05:39,962
Other observability took have similar impact on

82
00:05:40,016 --> 00:05:43,290
performance and on storage.

83
00:05:44,110 --> 00:05:47,994
This was discussed a while back in Reddit and

84
00:05:48,032 --> 00:05:50,830
I love this quote from one of the posters.

85
00:05:51,170 --> 00:05:54,542
A team just set a log level too

86
00:05:54,596 --> 00:05:59,440
high and burned through $100,000

87
00:05:59,810 --> 00:06:03,714
in days. This is a

88
00:06:03,832 --> 00:06:07,422
very common scenario, although this is indeed

89
00:06:07,486 --> 00:06:11,026
extreme. Overlogging can kill

90
00:06:11,208 --> 00:06:14,738
projects, companies jobs and

91
00:06:14,824 --> 00:06:18,770
kill the rainforest. The amount of pollution,

92
00:06:18,850 --> 00:06:22,790
production by overlogging and wasted resources

93
00:06:23,690 --> 00:06:27,030
is absolutely frightening.

94
00:06:27,850 --> 00:06:31,774
This might have been worth it if it actually solves

95
00:06:31,842 --> 00:06:35,306
the problem, but more often than not,

96
00:06:35,488 --> 00:06:39,226
it doesn't really help. We can log everything

97
00:06:39,408 --> 00:06:43,626
due to privacy we can't log everything due

98
00:06:43,658 --> 00:06:46,270
to privacy and security concerns.

99
00:06:47,010 --> 00:06:50,590
Looking over a huge mess of logs and metrics

100
00:06:51,330 --> 00:06:54,642
makes the process of tracking an issue into

101
00:06:54,776 --> 00:06:58,914
a needle in a haystack. At best,

102
00:06:59,032 --> 00:07:01,890
it slows us down. At worst,

103
00:07:02,390 --> 00:07:06,930
it has a lot of redundant memory

104
00:07:07,010 --> 00:07:10,614
and a lot of storage, but is still

105
00:07:10,732 --> 00:07:14,822
missing that valuable information that we

106
00:07:14,876 --> 00:07:19,174
need because, as I said, we can't

107
00:07:19,302 --> 00:07:22,746
truly log everything. We can't log

108
00:07:22,848 --> 00:07:25,500
the truly valuable data.

109
00:07:27,470 --> 00:07:31,294
Another limitation is the heavy focus

110
00:07:31,412 --> 00:07:35,342
of these tools on DevOps. Developers write

111
00:07:35,396 --> 00:07:39,354
logs, but they're ingested and handled by DevOps.

112
00:07:39,482 --> 00:07:43,170
Production issues are often handled by SRE.

113
00:07:43,830 --> 00:07:47,470
This disconnect means that as a developer,

114
00:07:47,550 --> 00:07:50,942
you would need to log something that someone whose

115
00:07:51,006 --> 00:07:54,350
job you don't understand fully

116
00:07:54,510 --> 00:07:57,830
would find useful. That's problematic.

117
00:07:58,330 --> 00:08:02,226
Furthermore, the tooling is very much focused

118
00:08:02,338 --> 00:08:05,794
on the DevOps point of view. Instead of dealing

119
00:08:05,842 --> 00:08:09,366
with source code from the IDE, the tooling talks

120
00:08:09,398 --> 00:08:12,794
about agents, entry points and other ideas that

121
00:08:12,832 --> 00:08:14,970
are less familiar to developers.

122
00:08:16,190 --> 00:08:19,542
With the shift to microservices and serverless

123
00:08:19,606 --> 00:08:23,354
systems systems

124
00:08:23,402 --> 00:08:26,350
became resistant to debugging.

125
00:08:26,850 --> 00:08:30,570
In fact, the only way some developers

126
00:08:30,650 --> 00:08:33,970
can check their code is through tests.

127
00:08:34,470 --> 00:08:38,402
That isn't ideal. It means that when they have an

128
00:08:38,456 --> 00:08:42,286
unforeseen problem, they need to use tools designed

129
00:08:42,318 --> 00:08:45,670
for DevOps to understand the problem, and then

130
00:08:45,740 --> 00:08:49,240
try and create a test case for that problem.

131
00:08:49,930 --> 00:08:53,350
This is a major step backwards.

132
00:08:53,850 --> 00:08:57,174
Developers need observability just as much as

133
00:08:57,212 --> 00:09:01,142
DevOps. While a vast majority of production

134
00:09:01,206 --> 00:09:04,682
problems could be handled by Ops, some of the

135
00:09:04,736 --> 00:09:08,074
hardest problems to fix are bugs in

136
00:09:08,112 --> 00:09:11,386
the code. I'm not talking about crashes.

137
00:09:11,578 --> 00:09:15,534
That's where most of us go automatically when thinking

138
00:09:15,652 --> 00:09:19,840
about production problems. Most production problems

139
00:09:20,290 --> 00:09:24,370
are cache misses in the code or stale cache.

140
00:09:24,870 --> 00:09:28,402
It means an item is missing in a listing. It only

141
00:09:28,456 --> 00:09:32,580
happens in production, and we have no clue how to fix that.

142
00:09:33,270 --> 00:09:36,694
Existing observability is usually very opaque in

143
00:09:36,732 --> 00:09:41,046
such situations. Ops don't even know much

144
00:09:41,148 --> 00:09:44,834
about such issues. They might flush the cache,

145
00:09:44,882 --> 00:09:48,970
but that's a blunt instrument and a poor workaround.

146
00:09:49,550 --> 00:09:52,730
Developers need their own observability,

147
00:09:53,070 --> 00:09:56,742
but it needs to be different from today's

148
00:09:56,806 --> 00:10:00,254
observability. The first principle of

149
00:10:00,292 --> 00:10:04,394
developer observability is to meet developers

150
00:10:04,522 --> 00:10:08,030
where they are working in the IDE

151
00:10:08,180 --> 00:10:11,646
isn't a requirement. Some of these tools work in

152
00:10:11,668 --> 00:10:14,706
the browser, which is also fine as long as

153
00:10:14,728 --> 00:10:18,094
they use terms and environments that are familiar

154
00:10:18,142 --> 00:10:21,330
to developers. In such a tool,

155
00:10:21,400 --> 00:10:25,380
we would inject a log to a line of code.

156
00:10:25,770 --> 00:10:29,830
We discuss metrics in terms of specific

157
00:10:29,980 --> 00:10:33,362
lines of code, not in terms of spans,

158
00:10:33,506 --> 00:10:37,282
entry points, etc. Cetera. Ideally this happens

159
00:10:37,436 --> 00:10:41,514
directly in the IDE, since that's where developers spend their

160
00:10:41,552 --> 00:10:45,270
time. But the bigger thing is the ability

161
00:10:45,350 --> 00:10:49,622
to inject observability metrics right into production

162
00:10:49,686 --> 00:10:52,830
code. Thats means I can add

163
00:10:52,900 --> 00:10:56,206
a new log metric or snapshot without

164
00:10:56,308 --> 00:10:59,520
going through the whole cycle like before.

165
00:11:00,050 --> 00:11:03,870
Remember this diagram? This is pretty complex.

166
00:11:04,030 --> 00:11:08,206
With develop observability we can simplify this considerably.

167
00:11:08,398 --> 00:11:11,554
We can remove two stages from the process.

168
00:11:11,752 --> 00:11:15,494
Developers can instantly inject a log or

169
00:11:15,532 --> 00:11:18,582
a metric to production without any

170
00:11:18,636 --> 00:11:22,022
changes to the code itself. We can then

171
00:11:22,076 --> 00:11:25,814
reproduce the problem while coordinating with the

172
00:11:25,852 --> 00:11:29,754
end user experiencing it. I can thats with

173
00:11:29,792 --> 00:11:33,482
a customer while they reproduce the issue. The great

174
00:11:33,536 --> 00:11:37,500
thing is if I don't have all the information

175
00:11:38,350 --> 00:11:41,870
they sre still on the line, I can

176
00:11:41,940 --> 00:11:45,342
immediately add another log or metric and ask

177
00:11:45,396 --> 00:11:48,734
them to try again. This completely

178
00:11:48,932 --> 00:11:52,678
changes the way we look at production.

179
00:11:52,874 --> 00:11:57,138
I used a very loaded word there,

180
00:11:57,304 --> 00:12:01,490
injecting. In fact, when I was working for

181
00:12:01,560 --> 00:12:04,942
a developer observability company, I was

182
00:12:05,016 --> 00:12:07,974
prohibited from uttering the I word.

183
00:12:08,172 --> 00:12:11,990
It's a scary word. It means we

184
00:12:12,060 --> 00:12:16,242
change code in production and the typical association

185
00:12:16,306 --> 00:12:19,530
we have with that word is very negative.

186
00:12:19,870 --> 00:12:22,540
Injecting bugs, changes,

187
00:12:24,270 --> 00:12:28,010
or even injecting a security vulnerability.

188
00:12:28,510 --> 00:12:31,822
I get exactly why my employer didn't want

189
00:12:31,876 --> 00:12:35,486
to be associated with that word, but this

190
00:12:35,588 --> 00:12:40,490
isn't the only tool that uses injection to implement functionality,

191
00:12:40,650 --> 00:12:43,780
so it's not the end of all.

192
00:12:44,150 --> 00:12:48,046
To be fair, though, security is a major concern.

193
00:12:48,238 --> 00:12:51,902
Most of the tools in the field have similar approaches

194
00:12:51,966 --> 00:12:58,138
to that's

195
00:12:58,254 --> 00:13:01,670
a key aspect in the security is

196
00:13:01,740 --> 00:13:05,890
the management server. As developers we don't

197
00:13:05,970 --> 00:13:09,274
access production. This is the job

198
00:13:09,312 --> 00:13:13,094
of DevOps. It's segregated the developer

199
00:13:13,142 --> 00:13:17,334
observability backend is accessible to the developers

200
00:13:17,462 --> 00:13:21,358
like any other observability server. The actual

201
00:13:21,444 --> 00:13:25,706
backend communicates only with thats server.

202
00:13:25,898 --> 00:13:30,058
Thats is pretty familiar if you worked with other observability

203
00:13:30,154 --> 00:13:34,542
tools, but is very different from other developer approaches

204
00:13:34,606 --> 00:13:38,018
such as remote debugging. This means thats

205
00:13:38,104 --> 00:13:41,234
even if there is a weakness in the

206
00:13:41,272 --> 00:13:45,034
injection code, it would be very hard to exploit

207
00:13:45,102 --> 00:13:49,462
as even the developers don't have direct access to

208
00:13:49,516 --> 00:13:53,106
the back end servers. Furthermore,

209
00:13:53,218 --> 00:13:57,222
some developer observability solutions enclose the

210
00:13:57,276 --> 00:14:01,434
solution in a sandbox which executes everything

211
00:14:01,552 --> 00:14:05,402
in a controlled environment. Let's say I

212
00:14:05,456 --> 00:14:09,890
add a log and it takes up too much cpu,

213
00:14:10,070 --> 00:14:13,614
or I add a conditional metric that

214
00:14:13,652 --> 00:14:17,418
tries to modify the application state in the conditional

215
00:14:17,514 --> 00:14:21,210
statement. Some developer observability tools will detect

216
00:14:21,290 --> 00:14:25,182
both of these scenarios and limit the amount of resources

217
00:14:25,246 --> 00:14:27,810
or block execution entirely.

218
00:14:28,390 --> 00:14:31,570
Since all access to the system is done through

219
00:14:31,640 --> 00:14:35,398
a back end server, it's a trivial matter to keep

220
00:14:35,484 --> 00:14:39,062
an administrative log. That means thats we can

221
00:14:39,116 --> 00:14:42,690
track every operation performed by any user.

222
00:14:42,850 --> 00:14:46,706
There is always a record. If a user tries

223
00:14:46,738 --> 00:14:50,602
to steal private information, it will be logged and

224
00:14:50,656 --> 00:14:53,130
can be used has evidence.

225
00:14:53,870 --> 00:14:57,162
Some information is problematic, such as

226
00:14:57,216 --> 00:15:01,610
credit card numbers. Thats is called personally identifiable

227
00:15:01,690 --> 00:15:04,366
information, or PII for short.

228
00:15:04,548 --> 00:15:07,898
We must remove such information from logs,

229
00:15:08,074 --> 00:15:11,550
sometimes by law and sometimes by regulation.

230
00:15:11,970 --> 00:15:15,060
Ideally we will catch that in the review,

231
00:15:15,590 --> 00:15:19,598
but if a log is injected, it might accidentally

232
00:15:19,694 --> 00:15:22,766
print something that shouldn't be printed.

233
00:15:22,958 --> 00:15:27,202
We can recognize those patterns and implicitly

234
00:15:27,266 --> 00:15:30,774
block them from logging. This is done with

235
00:15:30,812 --> 00:15:34,386
the PII reduction functionality supported

236
00:15:34,498 --> 00:15:38,314
by some tools, but the most important

237
00:15:38,432 --> 00:15:41,210
feature for security is block lists.

238
00:15:41,550 --> 00:15:45,850
Imagine a disgruntled developer within our organization.

239
00:15:46,430 --> 00:15:50,022
Thats developer can add a log to the user login

240
00:15:50,086 --> 00:15:53,786
code and print all the usernames and passwords.

241
00:15:53,898 --> 00:15:57,358
By the time we notice it in the administration log,

242
00:15:57,524 --> 00:16:00,782
he might be in a different country with all of the

243
00:16:00,836 --> 00:16:04,766
ill gotten gains. We can stop that with a block

244
00:16:04,798 --> 00:16:08,174
list. With it we can block a developer

245
00:16:08,222 --> 00:16:12,642
from logging or adding metrics to a specific set

246
00:16:12,696 --> 00:16:16,630
of sensitive files, classes or packages.

247
00:16:17,610 --> 00:16:21,270
I think we had enough theory. Let's do a

248
00:16:21,340 --> 00:16:25,334
short demo of one such product, Lightrun as

249
00:16:25,372 --> 00:16:29,494
a disclaimer. I used to work there, but thats was last

250
00:16:29,532 --> 00:16:33,110
year. I no longer do. On the left side

251
00:16:33,180 --> 00:16:36,582
you can see intellij idea, my id of

252
00:16:36,636 --> 00:16:39,934
choice. On the right side I have an application

253
00:16:40,012 --> 00:16:43,694
station that counts the prime numbers running on

254
00:16:43,732 --> 00:16:47,534
a remote server. We can see the console of

255
00:16:47,572 --> 00:16:51,130
that demo. The application doesn't print any logs

256
00:16:51,210 --> 00:16:54,514
as it does the counting, which makes

257
00:16:54,552 --> 00:16:57,780
it hard to debug if something didn't work there.

258
00:16:58,310 --> 00:17:01,554
In the middle we can see the currently running agents

259
00:17:01,672 --> 00:17:05,454
which are the server instances. We also see tags

260
00:17:05,502 --> 00:17:09,382
above them tags let us apply an action to a group

261
00:17:09,436 --> 00:17:13,554
of server processes. If we have 1000 servers, we can assign

262
00:17:13,602 --> 00:17:17,126
the tag production to 500 of them and then perform an

263
00:17:17,148 --> 00:17:21,050
operation on all 500 by performing it on a tag.

264
00:17:21,550 --> 00:17:24,934
A server can have multiple tag

265
00:17:24,982 --> 00:17:28,310
designations such as East Coast,

266
00:17:28,470 --> 00:17:31,870
Ubuntu 20, green, et cetera.

267
00:17:32,690 --> 00:17:36,682
This effectively solves the scale problem typical

268
00:17:36,746 --> 00:17:40,618
debuggers have. We can apply observability operations

269
00:17:40,714 --> 00:17:45,134
to multiple servers. Here we have only one tag

270
00:17:45,262 --> 00:17:48,850
and one server process. Because this

271
00:17:48,920 --> 00:17:52,414
is a demo and I didn't want to crowd

272
00:17:52,462 --> 00:17:56,230
it, I can add a new log by

273
00:17:56,300 --> 00:17:58,840
right clicking a line and adding it.

274
00:17:59,370 --> 00:18:03,320
I ask it to log the value of the variable I

275
00:18:03,690 --> 00:18:07,560
and it will just print it to the application log.

276
00:18:08,090 --> 00:18:11,638
This will fit in order with the other logs,

277
00:18:11,734 --> 00:18:15,654
so if I have a log in the code, my added

278
00:18:15,702 --> 00:18:20,038
log will appear as if it was written in the code next to it.

279
00:18:20,224 --> 00:18:23,950
They will all get ingested into services like

280
00:18:24,020 --> 00:18:27,626
elastic seamlessly, or you can pipe

281
00:18:27,658 --> 00:18:29,520
them locally to the IDe.

282
00:18:30,130 --> 00:18:34,174
So this plays very nicely with existing

283
00:18:34,222 --> 00:18:38,398
observability while solving the fact thats traditional

284
00:18:38,494 --> 00:18:41,300
observability isn't dynamic enough.

285
00:18:41,990 --> 00:18:44,878
The tools complement each other,

286
00:18:45,064 --> 00:18:47,480
they don't replace one another.

287
00:18:48,090 --> 00:18:52,114
Notice I can include complex expressions like method,

288
00:18:52,162 --> 00:18:55,970
invocations, et cetera, but lightweight enforces

289
00:18:56,050 --> 00:19:00,438
them all to be read. Only some developer observability

290
00:19:00,534 --> 00:19:04,330
tools do that, while others don't,

291
00:19:05,230 --> 00:19:07,900
but the thing I want to focus on is this.

292
00:19:08,590 --> 00:19:12,734
Notice the log took too much cpu and

293
00:19:12,772 --> 00:19:16,762
Lightran pauses logging for a bit so it won't

294
00:19:16,826 --> 00:19:21,114
destroy the server performance. Logs are restored

295
00:19:21,162 --> 00:19:24,738
automatically a but later when we're SRE

296
00:19:24,824 --> 00:19:28,674
cpu isn't depleted. This is the

297
00:19:28,712 --> 00:19:31,890
sandbox I was talking about earlier.

298
00:19:32,550 --> 00:19:36,662
With developer observability, we can add debug information

299
00:19:36,796 --> 00:19:40,774
in areas that don't make sense since

300
00:19:40,812 --> 00:19:44,422
the information will be removed once we're done,

301
00:19:44,556 --> 00:19:48,870
it isn't a big deal. A log that might be too expensive

302
00:19:49,030 --> 00:19:52,666
as it will blow up ingestion costs because

303
00:19:52,768 --> 00:19:56,950
it's on a line that is invoked very frequently,

304
00:19:57,110 --> 00:20:00,574
can be added for a few

305
00:20:00,612 --> 00:20:04,320
minutes and then removed. That isn't a problem,

306
00:20:05,810 --> 00:20:10,138
but the most important aspect of developer observability

307
00:20:10,314 --> 00:20:13,540
is insight at a developer level.

308
00:20:13,910 --> 00:20:17,810
DevOps know the features that

309
00:20:17,880 --> 00:20:20,910
are used frequently, but they can't

310
00:20:20,990 --> 00:20:24,562
tell if a specific method or block of code

311
00:20:24,616 --> 00:20:28,370
is reached. With developer observability, we can detect

312
00:20:28,450 --> 00:20:32,114
if a block of code is used and get applicable

313
00:20:32,162 --> 00:20:35,302
statistics. If we're considering a

314
00:20:35,356 --> 00:20:39,242
code change, we can evaluate the risk and

315
00:20:39,296 --> 00:20:42,634
reward beforehand by adding a

316
00:20:42,672 --> 00:20:44,810
metric to that block.

317
00:20:45,950 --> 00:20:49,580
Developer observability is a new tool

318
00:20:49,890 --> 00:20:53,326
for a new audience, but it's still an

319
00:20:53,348 --> 00:20:56,670
observability solution. First and foremost,

320
00:20:57,490 --> 00:21:01,342
when you inject a metric, it integrates with your

321
00:21:01,396 --> 00:21:04,754
existing dashboards. When you inject a

322
00:21:04,792 --> 00:21:08,878
log, it integrates with your ingested

323
00:21:08,974 --> 00:21:12,578
logic. Developer observability is about

324
00:21:12,664 --> 00:21:17,170
making the crucial benefits of observability accessible

325
00:21:17,330 --> 00:21:20,422
to a new crowd, a crowd of

326
00:21:20,476 --> 00:21:23,990
developers, which is the most important

327
00:21:24,140 --> 00:21:27,598
goal. When I give talks

328
00:21:27,714 --> 00:21:31,194
to DevOps, I often ask them about

329
00:21:31,312 --> 00:21:34,934
observability, and a surprising

330
00:21:35,062 --> 00:21:38,794
small number of developers are actually

331
00:21:38,992 --> 00:21:43,138
using observability tools on their day to day basic

332
00:21:43,254 --> 00:21:47,066
basis. They hear about observability solutions,

333
00:21:47,178 --> 00:21:51,406
they know about them, but they don't truly use them.

334
00:21:51,588 --> 00:21:55,042
Developer observability is a way to

335
00:21:55,096 --> 00:21:59,122
open the world of observability to

336
00:21:59,256 --> 00:22:03,858
the developer community at large. And this

337
00:22:04,024 --> 00:22:08,280
is the time in which developers truly need

338
00:22:08,810 --> 00:22:11,890
these sorts of solutions. With the migration

339
00:22:11,970 --> 00:22:14,390
to microservices and serverless,

340
00:22:15,210 --> 00:22:19,702
they are figuratively blind by

341
00:22:19,836 --> 00:22:23,800
these new architectures, unlike before.

342
00:22:25,290 --> 00:22:29,590
Thanks for bearing with me. I hope you enjoyed the presentation.

343
00:22:30,050 --> 00:22:33,230
Also, check out debugagent.com, my book

344
00:22:33,300 --> 00:22:37,002
and my YouTube channel where I have many tutorials

345
00:22:37,066 --> 00:22:39,900
on these sorts of subjects. Thank you.

