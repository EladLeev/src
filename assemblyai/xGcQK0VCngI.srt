1
00:00:27,730 --> 00:00:32,194
Thank you for coming to my talk with the title of enjoy typesafe

2
00:00:32,242 --> 00:00:35,426
web development with Ada. Well it is not actually about Ada,

3
00:00:35,458 --> 00:00:38,950
but I want to take Ada as a way to basically that

4
00:00:39,020 --> 00:00:42,566
there is a lot of opportunity in using functional programming in the

5
00:00:42,588 --> 00:00:46,454
JVM world, right. So I'm Mapuji, I'm from

6
00:00:46,492 --> 00:00:49,950
Kulkul Tech and in this conf 42 series I wanted this

7
00:00:49,980 --> 00:00:53,262
us about FP. Why is it very important and then

8
00:00:53,316 --> 00:00:56,510
how it benefits you like Java programmer, right?

9
00:00:56,580 --> 00:01:00,046
And the good news is I'm from Java island so

10
00:01:00,148 --> 00:01:04,106
let me work to you about FP and the Java ecosystem,

11
00:01:04,218 --> 00:01:07,602
right? Okay so I want to discuss about a lot of things,

12
00:01:07,656 --> 00:01:10,914
but this is the outline, right? So one is I want to discuss about

13
00:01:10,952 --> 00:01:14,706
what is functional programming really is and what are the benefits of

14
00:01:14,728 --> 00:01:18,370
using functional programming, what type of FP languages and

15
00:01:18,440 --> 00:01:21,494
if it's really awesome, what is the success I ever had

16
00:01:21,532 --> 00:01:25,666
in the past. And I'll discuss about Elm and how I really loved

17
00:01:25,698 --> 00:01:29,094
it. And I want to explore further about using

18
00:01:29,212 --> 00:01:33,306
FPL language in the JVM world. And it leads me to the Ada, how I

19
00:01:33,328 --> 00:01:36,550
use Ada as one of the example of pure FP language

20
00:01:36,630 --> 00:01:40,170
in the JVM world. Right, okay so that's a lot of

21
00:01:40,240 --> 00:01:43,406
jargon, but let me take you to a story, right?

22
00:01:43,588 --> 00:01:46,714
So if you take a look to FP

23
00:01:46,842 --> 00:01:50,702
programming or fastline programming, it is actually a very old

24
00:01:50,756 --> 00:01:54,026
concept. It is created in 1978 by a bunch

25
00:01:54,058 --> 00:01:58,002
of people and it is really old, right? And the good thing is,

26
00:01:58,136 --> 00:02:01,886
although it is really old, the concept still holds true till

27
00:02:01,918 --> 00:02:05,314
today. And this is very fascinating for me because it is such an

28
00:02:05,352 --> 00:02:08,902
old concept, but it keep repeating and then there is a lot of value

29
00:02:08,956 --> 00:02:12,438
in learning about it. It gets you become a

30
00:02:12,444 --> 00:02:15,830
better programmer by learning it, right? And it will not be

31
00:02:15,900 --> 00:02:19,346
like frontend development where they invented

32
00:02:19,378 --> 00:02:22,490
a lot of concept last night. It is just like good old

33
00:02:22,560 --> 00:02:26,746
concept, right? And there is a story when I playing with Elm in

34
00:02:26,768 --> 00:02:30,086
the front end world because Elm is like pure FP

35
00:02:30,118 --> 00:02:33,950
languages, people think that the number

36
00:02:34,020 --> 00:02:37,374
of updates that met in the past few days is really

37
00:02:37,412 --> 00:02:41,402
matters. And then the problem with Elm is Elm is updated

38
00:02:41,546 --> 00:02:45,342
two years ago and there is no update since then. But it is very stable.

39
00:02:45,406 --> 00:02:49,214
But people things that if it's not up there is stable

40
00:02:49,262 --> 00:02:52,690
or it is like unmaintained. But the thing is

41
00:02:52,840 --> 00:02:56,446
for Elmer is really stable, but for some other programming

42
00:02:56,478 --> 00:03:00,034
language, I don't know, but sometimes in

43
00:03:00,072 --> 00:03:03,686
FT world it becomes very very stable. Right? Okay, let's continue.

44
00:03:03,788 --> 00:03:07,554
So there is a nice meme about code written in Haskell

45
00:03:07,602 --> 00:03:10,874
is guaranteed to have no side effect because no one will ever run

46
00:03:10,912 --> 00:03:14,214
it. Right? Okay, so what is actually FP?

47
00:03:14,342 --> 00:03:18,038
So let me introduce you to John. John is a software engineer

48
00:03:18,134 --> 00:03:21,766
and he would like to create a new web app. So he's writing

49
00:03:21,798 --> 00:03:25,934
a web app and he grabbed his favorite language and

50
00:03:26,052 --> 00:03:29,354
hint is it's Java. And he start writing,

51
00:03:29,482 --> 00:03:32,694
right? And he's using a new tech stock,

52
00:03:32,762 --> 00:03:36,626
it is using a new this, new that, anything and

53
00:03:36,648 --> 00:03:40,206
whatnot. And it will take a while for him. And few moments

54
00:03:40,238 --> 00:03:44,398
later, Tada. Now he's

55
00:03:44,574 --> 00:03:48,150
having a working app and he scared

56
00:03:48,220 --> 00:03:51,574
to create a pull request, right? So he made

57
00:03:51,612 --> 00:03:55,074
that pull request and now the code will go through a series

58
00:03:55,122 --> 00:03:59,302
of code review, right? But like

59
00:03:59,356 --> 00:04:03,106
in any other code review, your spaghetti code will

60
00:04:03,148 --> 00:04:07,510
not pass, right? And he got things, he got recommendation

61
00:04:07,590 --> 00:04:11,322
to refactor the code from the senior guy.

62
00:04:11,376 --> 00:04:14,538
And like any other code review, ten lines

63
00:04:14,554 --> 00:04:18,414
of code, ten issue. But if it's 500 lines of code, it looks

64
00:04:18,452 --> 00:04:21,726
fine. And the problem is John is

65
00:04:21,828 --> 00:04:25,390
come to the former batch, which is ten lines of code,

66
00:04:25,460 --> 00:04:29,406
ten issues. Tada. Okay. Then he

67
00:04:29,428 --> 00:04:32,846
can reflect up the code. So he's tap tap, tap tap tap

68
00:04:32,878 --> 00:04:36,578
tap tap tap tap tap tap tap, tada. All the sweat.

69
00:04:36,754 --> 00:04:40,518
And he said, I finished refactoring the entire code. Cool.

70
00:04:40,604 --> 00:04:43,734
Is the bug fixed now? Is the app

71
00:04:43,772 --> 00:04:47,046
is still working? Turns out it's not. That's a problem.

72
00:04:47,148 --> 00:04:51,094
What we can learn from here, the thing is developing software

73
00:04:51,142 --> 00:04:55,014
is hard, right? The other problem is building reliable

74
00:04:55,062 --> 00:04:58,410
software needs a lot of effort. There is code review,

75
00:04:58,480 --> 00:05:01,920
there is unit testing, there is refactoring. And sometimes

76
00:05:02,530 --> 00:05:06,046
software is just, there is too much detail in it. There is too

77
00:05:06,068 --> 00:05:10,154
much details, right. And take a look in the refactoring.

78
00:05:10,202 --> 00:05:13,220
Refactoring is good, I support it.

79
00:05:13,830 --> 00:05:17,730
But sometimes it can be very complex.

80
00:05:18,390 --> 00:05:22,338
So I asking can it be more simple? And next part is,

81
00:05:22,424 --> 00:05:25,874
is it possible to make like refactoring? And all the effort

82
00:05:25,922 --> 00:05:29,426
we have in the making of software engineering, more reliable,

83
00:05:29,538 --> 00:05:33,350
more enjoyable maybe. And my suggestion is

84
00:05:33,420 --> 00:05:36,802
so welcome to the functional programming. I cannot

85
00:05:36,866 --> 00:05:40,614
guarantee you much, but it's been fun for me. Welcome to the FP.

86
00:05:40,742 --> 00:05:44,250
And then I'll introduce you to what FP is.

87
00:05:44,320 --> 00:05:47,914
So FP is like old concept. It's already there

88
00:05:47,952 --> 00:05:51,070
since 1978. And turns out

89
00:05:51,140 --> 00:05:54,334
like I said earlier, it can help you code better.

90
00:05:54,452 --> 00:05:57,886
So one, it helps make your mind to

91
00:05:57,988 --> 00:06:02,026
a see things differently. So when you code in functional

92
00:06:02,058 --> 00:06:05,794
programming, it's very far, far different. So youll used to

93
00:06:05,832 --> 00:06:09,326
work with objects or imperative

94
00:06:09,438 --> 00:06:12,658
programming, you prepare some variable, you do things,

95
00:06:12,744 --> 00:06:16,310
but in the FP it's the same, but it's a little bit different.

96
00:06:16,380 --> 00:06:19,846
So now you see things differently and it

97
00:06:19,868 --> 00:06:23,526
is affecting you when you do code now you be more

98
00:06:23,548 --> 00:06:26,742
creative with composing functions. Now when you write

99
00:06:26,796 --> 00:06:30,598
the code, youll model the code with different construct,

100
00:06:30,694 --> 00:06:34,938
you model the code with a lot of function, you're composing it together and

101
00:06:35,024 --> 00:06:39,322
hopefully it can help you to write better code by making

102
00:06:39,376 --> 00:06:43,250
the code more readable. You can use a lot of concept in phasma

103
00:06:43,270 --> 00:06:46,762
programming querying. You can do something like pipe operator

104
00:06:46,826 --> 00:06:50,026
and things like that and it becomes very expressive.

105
00:06:50,138 --> 00:06:53,182
And the good thing is if you are using a very

106
00:06:53,236 --> 00:06:56,994
strict FP language, it can make your code easy to

107
00:06:57,032 --> 00:07:00,206
change, easy to refactor, easy to maintain.

108
00:07:00,318 --> 00:07:03,346
This is very, very integral part, and very important part

109
00:07:03,368 --> 00:07:07,794
that I really love about FP is if you choose the right FP languages,

110
00:07:07,922 --> 00:07:11,666
it can make your code easy to change and it's very enjoyable.

111
00:07:11,778 --> 00:07:15,526
So you can create like the code looks like

112
00:07:15,708 --> 00:07:19,142
something right now, but in the future if you learn new

113
00:07:19,196 --> 00:07:23,082
things, you can refactor it and then make the code to be something else.

114
00:07:23,216 --> 00:07:26,742
You can refactor, the interface is the same, but you can refactor,

115
00:07:26,806 --> 00:07:30,686
but you can feel safe because if it's compiled it might be

116
00:07:30,708 --> 00:07:34,382
working. So it scared better because now your code

117
00:07:34,436 --> 00:07:38,666
is composed by function. Hopefully it is like pure

118
00:07:38,698 --> 00:07:42,154
function. So you can take an advantage of concurrency

119
00:07:42,282 --> 00:07:45,794
of you don't need to think about state anymore. And yeah,

120
00:07:45,832 --> 00:07:49,346
this is it. So let's take a look. The quote from

121
00:07:49,448 --> 00:07:53,086
Uncle Bob from the clean architecture all risk condition

122
00:07:53,198 --> 00:07:56,626
deadlock condition. Concurrent problems are due

123
00:07:56,658 --> 00:08:00,934
to mutable variables. See mutable variables and

124
00:08:01,052 --> 00:08:04,002
let's take a look to the Eric Eliot quotes.

125
00:08:04,066 --> 00:08:08,074
FP is the process of building software by compassing pure function,

126
00:08:08,192 --> 00:08:11,994
avoiding set state mutable data side effects and

127
00:08:12,032 --> 00:08:16,314
functional programming is declarative rather than imperative. And application that

128
00:08:16,352 --> 00:08:19,654
flows through pure function flows through pure

129
00:08:19,702 --> 00:08:23,326
function. Okay, so let's continue. So what is the benefit of

130
00:08:23,348 --> 00:08:26,986
using it, right? It seems awesome. If you are using FP,

131
00:08:27,098 --> 00:08:30,254
you can get the following advantage. Your code can

132
00:08:30,292 --> 00:08:33,806
be achieving the holy grail of bugs free code because youll

133
00:08:33,828 --> 00:08:37,922
have no side effect. If your code is compiled, 90% is

134
00:08:37,976 --> 00:08:41,774
working usually. And you can take advantage of efficient

135
00:08:41,822 --> 00:08:45,902
parallel programming because you are using immutable data. You don't need to think about memory

136
00:08:45,966 --> 00:08:49,602
anymore, and you can take advantage of concurrent programming.

137
00:08:49,666 --> 00:08:53,394
You can use nested function, you can use lazy evaluation,

138
00:08:53,522 --> 00:08:57,142
things like that. It's very awesome. It can make you more readable and more

139
00:08:57,196 --> 00:09:00,886
performance this way, but if you're doing it right. Okay, so there is a

140
00:09:00,908 --> 00:09:04,698
couple of types of FP languages. So there is the

141
00:09:04,864 --> 00:09:08,710
first part which is more into pure functional programming language

142
00:09:08,790 --> 00:09:12,154
like Haskell, L. Mercury clean and so on and so

143
00:09:12,192 --> 00:09:16,474
forth. There is another part of language which is impure functional

144
00:09:16,522 --> 00:09:20,206
programming language like Scala, closure, f, sub okaman and so on and

145
00:09:20,228 --> 00:09:24,910
so forth. There is also a lot of op languages or multi

146
00:09:24,990 --> 00:09:28,610
paradigm languages like JavaScript, Ruby that's now trying

147
00:09:28,680 --> 00:09:32,066
to adopt a lot of FP idea into the

148
00:09:32,088 --> 00:09:35,374
language. And it's cool. It's very awesome I think.

149
00:09:35,432 --> 00:09:39,154
And they should do more, right, okay, so what functional programming

150
00:09:39,202 --> 00:09:42,566
success I ever encountered. So let's take a look to

151
00:09:42,588 --> 00:09:46,290
my experience in building application using FP

152
00:09:46,370 --> 00:09:49,074
functional programming. It is elm.

153
00:09:49,202 --> 00:09:53,050
So if you take a look to the Elm website, you can see that

154
00:09:53,120 --> 00:09:56,534
they claim that it is a delightful language for reliable

155
00:09:56,582 --> 00:10:00,390
web application. And there's a lot of testimonials.

156
00:10:00,470 --> 00:10:03,882
It is like a scam, I told youll it's like a scam.

157
00:10:04,026 --> 00:10:07,434
So some people said it is the most productive programming

158
00:10:07,482 --> 00:10:11,342
language I have used. Some other people said my

159
00:10:11,396 --> 00:10:15,002
favorite thing is the feeling of joy and relaxation when writing

160
00:10:15,066 --> 00:10:18,274
elm code. Others said using Elm I can

161
00:10:18,312 --> 00:10:22,286
deploy and go to sleep. And some other people said just follow the compiler

162
00:10:22,318 --> 00:10:25,362
errors and come out the other end with the working app.

163
00:10:25,416 --> 00:10:28,902
So if you break things, you refactor like John and then

164
00:10:28,956 --> 00:10:33,026
now you break things. Initially your code is like having a compiler

165
00:10:33,058 --> 00:10:36,258
errors, but once you finish all the compiler errors,

166
00:10:36,354 --> 00:10:39,622
99% it is fully working app, right?

167
00:10:39,676 --> 00:10:43,078
It's very amazing, right? Yeah. And the other

168
00:10:43,164 --> 00:10:46,938
feature it's provided is something that's really rare in

169
00:10:47,024 --> 00:10:50,426
web UI or web development or friend development is

170
00:10:50,528 --> 00:10:54,550
runtime exception. So if you take a look to the Javascript

171
00:10:54,630 --> 00:10:57,838
error in the browser, you can open Google now and then go to the

172
00:10:57,844 --> 00:11:00,970
web tools devtools, you can see that there is a lot of console log error.

173
00:11:01,050 --> 00:11:04,626
Sometimes you open Facebook, it's the

174
00:11:04,648 --> 00:11:08,494
same. You open Twitter, it's the same. There is usually some runtime error

175
00:11:08,542 --> 00:11:12,238
happening there, but by using what is it? Elm,

176
00:11:12,334 --> 00:11:16,066
you can basically minimize the error to almost zero.

177
00:11:16,168 --> 00:11:19,862
So it is happening on NoRAD ink where they have almost zero

178
00:11:19,996 --> 00:11:23,954
runtime error. They get it one, only one. It is because bug

179
00:11:24,002 --> 00:11:27,366
in the compiler, but it is already fixed by now. So the

180
00:11:27,388 --> 00:11:31,226
other good thing is if you see here, the compiler gives

181
00:11:31,248 --> 00:11:34,326
you some very meaningful errors.

182
00:11:34,438 --> 00:11:37,946
So in here it said this to in

183
00:11:38,048 --> 00:11:41,722
call projects may be in, but drop needs the first argument

184
00:11:41,786 --> 00:11:45,422
to be in. And there is a hint there, right. It's very

185
00:11:45,476 --> 00:11:49,770
interesting and like I said before, fearless refactoring,

186
00:11:49,850 --> 00:11:53,454
where the compiler guides you safely through your changes and

187
00:11:53,492 --> 00:11:57,374
sharing confidence even through the most wide breaking refactoring in unfamiliar

188
00:11:57,422 --> 00:12:01,058
code base. It's very awesome because whether you're renaming a

189
00:12:01,064 --> 00:12:04,606
function or you make drastic changes in a code data type, you just fold

190
00:12:04,638 --> 00:12:08,038
the compiler and by the end of the day you can get a

191
00:12:08,044 --> 00:12:11,814
working app. And the other good thing is this

192
00:12:11,852 --> 00:12:16,742
is something that really specific to Elm, but they have some

193
00:12:16,796 --> 00:12:20,698
model on building reliable app, but this is specific

194
00:12:20,784 --> 00:12:24,362
to them. Right. Let's just keep it. So the

195
00:12:24,416 --> 00:12:27,850
last part is about fast and friendly feedback.

196
00:12:28,830 --> 00:12:32,746
People now really interested in immediate

197
00:12:32,778 --> 00:12:36,286
feedback. They need things now and then. Having a

198
00:12:36,308 --> 00:12:40,254
compiler that's really helping youll to get that fast feedback is pretty

199
00:12:40,292 --> 00:12:43,742
awesome and I think most compilers done

200
00:12:43,796 --> 00:12:47,378
that, but elm make it to the next level by having a very

201
00:12:47,544 --> 00:12:51,250
easy to read and friendly kind of frustration

202
00:12:51,910 --> 00:12:55,182
friendly. What is it? Nice compiler errors

203
00:12:55,246 --> 00:12:58,834
and you are talking to compilers rather than you

204
00:12:58,872 --> 00:13:02,786
blame the compiler, right? It's very empowering.

205
00:13:02,978 --> 00:13:07,142
And now I know I want to explore more about

206
00:13:07,196 --> 00:13:10,994
Ada. So Ada is one of the pure

207
00:13:11,042 --> 00:13:14,810
FP language in the JVM world and it is awesome.

208
00:13:14,960 --> 00:13:18,502
And it is basically Haskell for the JVM.

209
00:13:18,566 --> 00:13:22,090
So let's take a look at it. So why people are using Ada?

210
00:13:22,170 --> 00:13:25,566
So EDA is there because it has a

211
00:13:25,588 --> 00:13:29,754
very robust interrupt. So ETA has a strongly

212
00:13:29,802 --> 00:13:33,882
type FFI or foreign function invocation or interface

213
00:13:33,946 --> 00:13:36,830
that allows you to safely interrupt with Java.

214
00:13:37,250 --> 00:13:40,754
And it has another properties which is ultra type

215
00:13:40,792 --> 00:13:44,574
safety which it has a global type inference giving you a dynamic

216
00:13:44,622 --> 00:13:48,130
language experience, but with a strong type hidden underneath.

217
00:13:48,210 --> 00:13:51,362
Sometimes you don't need to put all the type annotation,

218
00:13:51,426 --> 00:13:54,806
but youll still get all the advantage of very very

219
00:13:54,908 --> 00:13:58,182
strong type system. And because the next part

220
00:13:58,236 --> 00:14:01,686
is ETA offers wide range of strategy for handling and currency.

221
00:14:01,798 --> 00:14:04,998
Like there is STM, there is mfas, there is fibers.

222
00:14:05,094 --> 00:14:09,194
So it's very flexible. And let's take a look to the demo.

223
00:14:09,312 --> 00:14:11,758
So let's go to the demo now.

224
00:14:11,844 --> 00:14:15,450
Hopefully it is working. Okay, so ETA is updated

225
00:14:15,530 --> 00:14:22,730
now I can now run Ada atlas

226
00:14:22,810 --> 00:14:26,466
run and it will run through the app, it resolving all the

227
00:14:26,488 --> 00:14:29,714
dependency and all that stuff and then downloading from

228
00:14:29,752 --> 00:14:33,042
source. And then after that we can run it.

229
00:14:33,096 --> 00:14:36,422
But while it's compiling the app, let's take a look to the code.

230
00:14:36,476 --> 00:14:39,686
So this code is. You can take a look at it in

231
00:14:39,708 --> 00:14:42,358
GitHub. It is very simple.

232
00:14:42,524 --> 00:14:46,386
I create two applications. One is the Fibonacci

233
00:14:46,498 --> 00:14:49,942
application, the other is the simple hello world.

234
00:14:50,076 --> 00:14:53,434
We'll basically walk through it like one by one.

235
00:14:53,552 --> 00:14:56,300
And the idea is,

236
00:14:57,070 --> 00:15:00,974
it is mostly Haskell, right. It is Haskell code. The code

237
00:15:01,012 --> 00:15:04,640
is HHS, which stands for Haskell. Right.

238
00:15:05,010 --> 00:15:08,622
And if you take a look at it. So while

239
00:15:08,676 --> 00:15:12,074
my code is still compiling, let's take a look at programming

240
00:15:12,122 --> 00:15:15,666
languages. If you see here, in here, they want

241
00:15:15,688 --> 00:15:19,026
to create, what is it? They want to create a very simple

242
00:15:19,128 --> 00:15:22,914
hello word application API. And then what they can do is

243
00:15:22,952 --> 00:15:26,606
basically they create a type API and then they can decide

244
00:15:26,638 --> 00:15:29,746
that I want to create hello. There is a query params

245
00:15:29,778 --> 00:15:33,414
and then basically it's returning a JSON value, right. And then

246
00:15:33,452 --> 00:15:37,206
after that you can create some similar to

247
00:15:37,228 --> 00:15:40,362
controller here, like controller. And then after that you can

248
00:15:40,416 --> 00:15:44,300
basically returning an error there

249
00:15:44,670 --> 00:15:48,250
if they didn't tell your name, otherwise it will basically

250
00:15:48,320 --> 00:15:51,994
returning hello something. There is maybe, and there is the other one,

251
00:15:52,032 --> 00:15:55,966
right. And it is running on the port 9000. Okay, so let's take

252
00:15:55,988 --> 00:15:59,166
a look at the actual code here. I hope it is

253
00:15:59,188 --> 00:16:02,766
already running. So in here it's still processing just fine.

254
00:16:02,948 --> 00:16:05,794
Yeah. So the problem with Ada is, well,

255
00:16:05,912 --> 00:16:09,060
I'm doing it. The problem with Ada is Ada is running,

256
00:16:09,750 --> 00:16:13,806
having a lot of problem lately. So the maintainer

257
00:16:13,838 --> 00:16:17,406
is not very active anymore. So the downside is

258
00:16:17,448 --> 00:16:21,330
Ada is not really actively maintained, but it's pretty much stable.

259
00:16:21,410 --> 00:16:24,886
It's pretty much stable. And you can use a lot of

260
00:16:24,988 --> 00:16:28,038
Haskell packages here and then you can still doing a

261
00:16:28,044 --> 00:16:31,306
lot of productive development in Ada. But I

262
00:16:31,328 --> 00:16:34,826
think it is interesting idea to have Haskell with

263
00:16:34,848 --> 00:16:38,330
the interact of Java. But the really good thing is what I

264
00:16:38,400 --> 00:16:42,042
recommend using Ada is not for production application, but more like

265
00:16:42,176 --> 00:16:45,994
youll are learning things, you can see things differently

266
00:16:46,042 --> 00:16:49,354
by learning how to write things in Haskell, especially if you are from Java

267
00:16:49,402 --> 00:16:53,118
world, you don't want to learn all the Java build tool,

268
00:16:53,204 --> 00:16:56,878
but now using Ada you can use something like gradle

269
00:16:56,974 --> 00:16:59,826
to basically running Haskell application. Pretty interesting,

270
00:16:59,928 --> 00:17:04,066
right? Yeah. So while waiting you can go through all this and

271
00:17:04,088 --> 00:17:07,834
then get a cheat sheet and then get a feel of how Ada

272
00:17:07,982 --> 00:17:11,830
looks like. And then after that in here. Once we finish

273
00:17:11,900 --> 00:17:15,782
everything, we can basically run the app. So I'm waiting here.

274
00:17:15,916 --> 00:17:19,514
Okay, so let's check again on the docker we

275
00:17:19,552 --> 00:17:23,366
have on the atlas. It is running now. And let's

276
00:17:23,398 --> 00:17:27,530
take a look on our Fibonacci API. So it is

277
00:17:27,600 --> 00:17:31,440
very simple. So we have application running on port 9000

278
00:17:32,050 --> 00:17:36,346
and let's take a look at it. So let's open local host

279
00:17:36,458 --> 00:17:39,710
9000 and we put Fibu.

280
00:17:40,210 --> 00:17:44,302
Okay, so let's try, I have Fibonacci endpoint

281
00:17:44,366 --> 00:17:48,258
here. If I call one it gives me

282
00:17:48,264 --> 00:17:51,282
the Fibonacci number. If I put two I hit

283
00:17:51,336 --> 00:17:54,962
two, if I have four it returns like five

284
00:17:55,096 --> 00:17:59,014
things like that. Very awesome. And it can keep like

285
00:17:59,052 --> 00:18:02,006
on and on and on as you wish. Right.

286
00:18:02,188 --> 00:18:06,066
And things is just a very basic simple API.

287
00:18:06,178 --> 00:18:09,514
And then I want to give you the one that exactly looks like this.

288
00:18:09,632 --> 00:18:13,574
I can go here and then I can change the surfer

289
00:18:13,702 --> 00:18:17,818
into surfer. Two, for simplicity I can go here

290
00:18:17,904 --> 00:18:21,742
and then I will restart the machine building

291
00:18:21,796 --> 00:18:26,830
executable compiling and then transit running.

292
00:18:26,980 --> 00:18:31,038
And then in here we can get the endpoint hello and

293
00:18:31,044 --> 00:18:36,626
then query param, right. So just hello

294
00:18:36,728 --> 00:18:41,554
and then we can go query parame equal my

295
00:18:41,592 --> 00:18:45,394
name and it should be able to tell

296
00:18:45,432 --> 00:18:48,374
me my name. That's really awesome, right? Yeah,

297
00:18:48,412 --> 00:18:51,346
so that's very basic example of Ada.

298
00:18:51,458 --> 00:18:55,640
I'll make it larger. So the idea is we have

299
00:18:57,930 --> 00:19:00,950
almost similar application like Haskell,

300
00:19:01,110 --> 00:19:04,746
but you can do some java interrupt if you want. I give some

301
00:19:04,848 --> 00:19:09,258
Java interrupt example here if you want to take a look further and

302
00:19:09,344 --> 00:19:13,006
yeah, so that's the very basic endpoint I can

303
00:19:13,188 --> 00:19:17,070
tell to you. So the idea is you can have very strong

304
00:19:17,140 --> 00:19:20,160
type languages. So in here.

305
00:19:22,210 --> 00:19:26,498
So the magic on the Haskell is it's basically

306
00:19:26,584 --> 00:19:30,114
giving you this type, like this type

307
00:19:30,152 --> 00:19:34,050
annotation and then basically everything should

308
00:19:34,120 --> 00:19:35,830
match with this type annotation.

309
00:19:36,970 --> 00:19:40,246
And then in here one of the interesting part is

310
00:19:40,268 --> 00:19:45,602
the jetty surfer here where it's basically interoperability

311
00:19:45,666 --> 00:19:49,750
with the surplus. Right. Very awesome. So the idea

312
00:19:49,820 --> 00:19:53,862
is we are using surf and surfer, but behind

313
00:19:53,916 --> 00:19:57,130
the scene there is some page that Eta giving to the

314
00:19:57,280 --> 00:20:00,810
Haskell compiler, the Atlas compiler to basically using

315
00:20:00,880 --> 00:20:04,206
some patch version of to instead of using

316
00:20:04,228 --> 00:20:08,174
the actual serpent from the Haskell. So it's very interesting. Yeah,

317
00:20:08,212 --> 00:20:11,470
I think that's it. I hope that you enjoyed the simple

318
00:20:11,540 --> 00:20:14,734
demo I had and the

319
00:20:14,772 --> 00:20:18,046
Ada don't side. So as I said earlier that the language is

320
00:20:18,068 --> 00:20:21,918
not that maintained anymore. I'm not very a fit user

321
00:20:21,934 --> 00:20:26,046
of Ada. So I'm not sure if it's like the language is not maintained

322
00:20:26,078 --> 00:20:30,034
or it is already stable enough, but I think

323
00:20:30,072 --> 00:20:33,990
that it is the later one because many packages

324
00:20:34,490 --> 00:20:38,134
is not hosted anymore, I cannot install it and things like

325
00:20:38,172 --> 00:20:41,334
that. I need to run the docker version to make it run on my machine

326
00:20:41,382 --> 00:20:45,046
and things like that. So please think about it when choosing Ada

327
00:20:45,078 --> 00:20:48,886
in your production and managing compatibility with Haskell

328
00:20:48,918 --> 00:20:52,378
ecosystem is hard. So for example, if I were to run one

329
00:20:52,384 --> 00:20:56,282
of the example from the app, I need to basically very careful in choosing

330
00:20:56,346 --> 00:21:00,046
Haskell dependency. I'm not sure if it's from

331
00:21:00,068 --> 00:21:03,434
the Haskell or from the Ada, but it is very hard to manage the dependency

332
00:21:03,482 --> 00:21:06,642
and make the dependency working together. But yeah,

333
00:21:06,776 --> 00:21:10,514
that's it guys, that's about Ada. So I hope you enjoy my

334
00:21:10,552 --> 00:21:14,402
presentation. I hope that you can be a better John by

335
00:21:14,536 --> 00:21:18,158
maybe learning more about FP languages in the future,

336
00:21:18,264 --> 00:21:21,942
or you can also explore or applying it to your day to day

337
00:21:21,996 --> 00:21:25,814
work environment. So if you are a tech lead or someone that

338
00:21:25,852 --> 00:21:29,202
can basically influence a tech statistician,

339
00:21:29,346 --> 00:21:32,722
you might as well take a look at some FP languages

340
00:21:32,786 --> 00:21:36,534
instead of only the popular one. And I can

341
00:21:36,572 --> 00:21:40,510
assure you that it's worth the effort because it

342
00:21:40,580 --> 00:21:43,706
helps you open your mind and see things differently.

343
00:21:43,818 --> 00:21:47,166
And thank you. That's my presentation today. I hope that you

344
00:21:47,188 --> 00:21:49,262
enjoy my presentation. Talk to you soon,

