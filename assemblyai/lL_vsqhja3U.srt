1
00:00:31,090 --> 00:00:33,880
Hello everyone, thank you for joining us.

2
00:00:34,410 --> 00:00:37,558
Our talk is about CICD and how a number of SRE and

3
00:00:37,564 --> 00:00:40,120
DevOps practices are revolving around it.

4
00:00:40,810 --> 00:00:42,870
Let me start with the QK introduction.

5
00:00:45,450 --> 00:00:49,446
So this is pretty much who I am. For most part of my

6
00:00:49,628 --> 00:00:52,430
core career I have been in SRE and DevOps,

7
00:00:58,450 --> 00:01:01,694
just a small and shameless promotion. My book is book

8
00:01:01,732 --> 00:01:05,438
on architecting cloud native serverless solutions is coming out this June.

9
00:01:05,614 --> 00:01:09,620
If you are interested, please watch out for the release or connect with me.

10
00:01:10,230 --> 00:01:16,802
Now let us move on to the talk so

11
00:01:16,856 --> 00:01:20,226
SRE principles I wouldn't go into the definition of

12
00:01:20,248 --> 00:01:23,958
SRE adopts. We are in an SRE conference and I'm pretty sure all

13
00:01:23,964 --> 00:01:27,574
of you are aware of them. I'm also sure that we all

14
00:01:27,612 --> 00:01:31,562
acknowledge the fact that SREs and SRE organizations comes in

15
00:01:31,616 --> 00:01:35,146
all shapes and forms and what they do and how they do

16
00:01:35,168 --> 00:01:38,714
things. Those are mostly defined by their organization and their

17
00:01:38,752 --> 00:01:41,230
organizations culture to a large extent.

18
00:01:42,370 --> 00:01:45,946
But there are certain principles that all SRE organizations

19
00:01:46,058 --> 00:01:49,966
draw from our foundational book that is the Google SRE book.

20
00:01:50,148 --> 00:01:54,110
I will do a quick recap of those in this slide.

21
00:01:54,930 --> 00:01:58,258
Embracing risk SREs estimate the

22
00:01:58,264 --> 00:02:02,062
cost of reliability, assess and manage the risk involved

23
00:02:02,206 --> 00:02:07,266
in improving the reliability and use the error budget smartly slox

24
00:02:07,298 --> 00:02:11,350
or service level objectives. It is a direct measure of customers experience

25
00:02:11,500 --> 00:02:14,440
and hence it translates to the reliability of your service.

26
00:02:15,770 --> 00:02:19,114
Toil eliminate toil is

27
00:02:19,152 --> 00:02:22,746
an important pillar of SRE and toil is a repetitive and

28
00:02:22,768 --> 00:02:26,026
manual task required to keep your production services up and

29
00:02:26,048 --> 00:02:31,062
running, and this can be eliminated using automation monitoring.

30
00:02:31,206 --> 00:02:34,766
Well, nowadays we call it observability and it is the key to measuring all

31
00:02:34,788 --> 00:02:39,150
the critical vehicles of your systems. Release engineering

32
00:02:39,570 --> 00:02:44,850
standardizing the build and release of software into production automation

33
00:02:45,190 --> 00:02:49,326
automating the repetitive work to improve developer velocity and productivity,

34
00:02:49,438 --> 00:02:51,330
including building platforms.

35
00:02:52,310 --> 00:02:55,906
Simplicity we all work with complex distributed

36
00:02:55,938 --> 00:03:00,102
systems. Breaking down them into simplified services is

37
00:03:00,156 --> 00:03:04,550
key to managing a better infrastructure and bringing better reliability.

38
00:03:05,530 --> 00:03:09,402
Now, there are a lot more to the SRE functions than these seven

39
00:03:09,456 --> 00:03:13,002
points, but these are the most important and the most often

40
00:03:13,056 --> 00:03:14,300
prioritized ones.

41
00:03:18,190 --> 00:03:22,314
DevOps practices so in this slide we are going to look into the DevOps practices.

42
00:03:22,442 --> 00:03:25,966
But unlike the SRE book, there is no one standard list

43
00:03:25,988 --> 00:03:29,918
of recommended DevOps practices. So I have condensed some of

44
00:03:29,924 --> 00:03:32,320
those commonly found practices into this list.

45
00:03:33,090 --> 00:03:36,426
Communication collaboration by definition,

46
00:03:36,618 --> 00:03:40,530
DevOps bridges the gap between traditional dev and Ops teams.

47
00:03:41,030 --> 00:03:45,570
Now this is achieved through collaboration at all stages of software development lifecycle.

48
00:03:46,410 --> 00:03:49,714
The agile methodologies like scrum and Kanban are very critical

49
00:03:49,762 --> 00:03:53,750
in this phase continuous improvements.

50
00:03:54,410 --> 00:03:58,490
So continuous improvements involve gradually rolling out small changes so that

51
00:03:58,640 --> 00:04:02,250
the development teams can iterate their products and services fast.

52
00:04:02,400 --> 00:04:05,798
And this involves tools and practices like continuous integration,

53
00:04:05,894 --> 00:04:08,966
test driven development, continuous delivery, et cetera.

54
00:04:09,158 --> 00:04:13,214
Monitoring. Here we see a recurring theme here. We need

55
00:04:13,252 --> 00:04:16,794
observability to assess whether the steps we take for continuous improvements

56
00:04:16,842 --> 00:04:20,126
are fruitful, and we also need it to ensure that we

57
00:04:20,148 --> 00:04:23,694
have is one production systems and it gives us a continuous

58
00:04:23,742 --> 00:04:26,898
feedback loop automation. Similar to

59
00:04:26,904 --> 00:04:30,174
the SRE principle, DevOps also builds tools and platforms

60
00:04:30,222 --> 00:04:33,330
for continuous improvements. Remember,

61
00:04:33,480 --> 00:04:36,850
just like the SRE principles, this is not an exhaustive list,

62
00:04:37,000 --> 00:04:40,902
but rather the most common and the most prioritized practices. And some of these points

63
00:04:40,956 --> 00:04:43,880
could even be broken down further into its own list.

64
00:04:45,050 --> 00:04:48,666
Now that we have looked into both SRE and Dow's principles, let us

65
00:04:48,688 --> 00:04:51,820
take a quick look into how they relate to each other.

66
00:04:59,550 --> 00:05:02,874
Class SRE implements DevOps now when we

67
00:05:02,912 --> 00:05:06,686
discuss the relationship between SRE and DevOps, this is a statement that comes

68
00:05:06,708 --> 00:05:10,526
up very often. The idea this statement projects is that

69
00:05:10,628 --> 00:05:14,590
DevOps is a set of high level principles that should guide the SDLC

70
00:05:14,670 --> 00:05:18,194
and the agile practices, and SRE implement many

71
00:05:18,232 --> 00:05:21,566
of these principles by adopting them to the distributed production

72
00:05:21,598 --> 00:05:25,122
services. There are many key features and

73
00:05:25,176 --> 00:05:28,440
key areas where SRE and DevOps align. For example,

74
00:05:28,810 --> 00:05:32,774
both value collaboration communication and they use it to build teams and

75
00:05:32,812 --> 00:05:36,594
set organizational culture and both operates on a shared ownership

76
00:05:36,642 --> 00:05:38,570
model along with the developers.

77
00:05:40,110 --> 00:05:43,766
Accept the change as the medium for business and organizational

78
00:05:43,798 --> 00:05:47,386
progress, understand and accept the risk that comes

79
00:05:47,408 --> 00:05:51,354
with the changes. So this is a key principle that

80
00:05:51,472 --> 00:05:54,190
changes are necessary and changes can bring failures.

81
00:05:56,130 --> 00:06:00,026
Change management and software release with the right tooling and controls, using CI

82
00:06:00,058 --> 00:06:03,978
CD is a critical piece of the entire software development lifecycle and hence the

83
00:06:04,004 --> 00:06:07,666
part of SRE and DevOps. Automation is a

84
00:06:07,688 --> 00:06:11,086
key for toil reduction and developer productivity. Building developer

85
00:06:11,118 --> 00:06:14,514
tools as well as platforms for managing production services is part

86
00:06:14,552 --> 00:06:17,750
of the automation initiative. Now this is where platform

87
00:06:17,820 --> 00:06:19,670
engineering also comes into picture.

88
00:06:21,530 --> 00:06:25,270
SRE and DevOps use data for decision making along

89
00:06:25,340 --> 00:06:28,598
using observability tools. Now SRE focus

90
00:06:28,684 --> 00:06:32,134
mostly on slos while DevOps focus on dorometrics.

91
00:06:32,262 --> 00:06:35,606
Now this is just a primary focal point, but observability covers

92
00:06:35,638 --> 00:06:39,020
a lot more than this and is required for running production services.

93
00:06:40,770 --> 00:06:44,074
There are more areas where SREs and DevOps practices align,

94
00:06:44,122 --> 00:06:46,160
but this should give you a good idea.

95
00:06:51,170 --> 00:06:54,518
Now if you observe this relations and DevOps and SRE

96
00:06:54,554 --> 00:06:58,174
in general, you will see that there is a recurring theme emerging

97
00:06:58,302 --> 00:07:02,178
and that is change. Now these changes could be code,

98
00:07:02,264 --> 00:07:06,386
configuration or infrastructure. Now why

99
00:07:06,408 --> 00:07:09,400
is change important? Let's take a quick look.

100
00:07:13,850 --> 00:07:17,794
So change is what brings business value. Any new features,

101
00:07:17,842 --> 00:07:21,626
any stability improvements, and any other sort of changes, they all

102
00:07:21,648 --> 00:07:25,242
work towards this one goal. Ultimately, if a change

103
00:07:25,296 --> 00:07:29,066
doesn't bring value directly or indirectly to the business, that is

104
00:07:29,088 --> 00:07:32,670
not a change worth pursuing. Now, does this mean that

105
00:07:32,740 --> 00:07:35,440
change is always positive? Let us see.

106
00:07:40,130 --> 00:07:42,810
So changes can lead to production outages,

107
00:07:42,890 --> 00:07:46,020
bugs, LSL breaches and a lot more.

108
00:07:47,030 --> 00:07:50,914
While all changes are well intended, they don't always bring value. Sometimes code

109
00:07:50,952 --> 00:07:54,210
and config changes can introduce bugs or even cause production outages.

110
00:07:54,710 --> 00:07:58,386
Now, the outages or the incidents as we call in SRE world, can directly

111
00:07:58,418 --> 00:08:02,246
impact customers. Sometimes it can also set back the engineering team

112
00:08:02,268 --> 00:08:06,066
by a few hours or even days while they are busy fixing

113
00:08:06,098 --> 00:08:10,006
those incidents. Now, SRE builds incident management

114
00:08:10,038 --> 00:08:13,254
practices to effectively deal with incidents. But in a software

115
00:08:13,302 --> 00:08:16,726
system, as long as there are changes, the chances of them causing

116
00:08:16,758 --> 00:08:18,620
incidents will also remain strong.

117
00:08:19,550 --> 00:08:22,910
So if we need to avoid service disruptions and customer

118
00:08:22,980 --> 00:08:26,558
impact as much as possible, we need to take one step back

119
00:08:26,644 --> 00:08:29,946
to the stage where before the code hits

120
00:08:29,978 --> 00:08:32,560
the production, let us see how that is done.

121
00:08:37,750 --> 00:08:41,940
So we roll out changes that have positive impact on our products or services.

122
00:08:42,390 --> 00:08:46,514
But once we do decide that these are changes to go

123
00:08:46,632 --> 00:08:49,826
that we need to push through, then we need to go into the discipline

124
00:08:49,858 --> 00:08:53,522
of change management. Now, change management allows SREs

125
00:08:53,586 --> 00:08:57,554
and developers to assess the risk of change, evaluate the acceptable

126
00:08:57,602 --> 00:08:59,610
risk, and roll it out to production.

127
00:09:00,590 --> 00:09:04,118
Now, tracking of changes, along with its evaluation

128
00:09:04,214 --> 00:09:08,810
and acceptance is the part of the necessary bookkeeping in change management.

129
00:09:09,150 --> 00:09:13,022
Now this is usually achieved using a software change management repository service

130
00:09:13,076 --> 00:09:16,798
like Git, along with pull request and peer reviews. And I'm sure

131
00:09:16,884 --> 00:09:21,182
all of you are familiar with this workflow. Now, SEM process

132
00:09:21,236 --> 00:09:25,026
stops at this point. From here, SRs and dobs have

133
00:09:25,048 --> 00:09:28,862
to take it further with release management. Now this involves testing,

134
00:09:28,926 --> 00:09:31,330
building and development and deployment.

135
00:09:31,750 --> 00:09:35,490
Now this takes us to the central point in our talk CI CD.

136
00:09:41,610 --> 00:09:44,598
So the central theme of everything we discussed so far is change.

137
00:09:44,764 --> 00:09:48,242
Now, with all that we covered about incident management, change management,

138
00:09:48,306 --> 00:09:52,042
SRE and dows principles, all this revolve around

139
00:09:52,096 --> 00:09:56,246
changes. But how do we manage and roll out changes effectively?

140
00:09:56,438 --> 00:10:00,330
The answer is obvious, and that is where CI CD comes into picture.

141
00:10:00,910 --> 00:10:04,430
It is the vehicle of all changes in your software infrastructure.

142
00:10:05,250 --> 00:10:08,574
Now, SEM is the foundation to CICD, but most

143
00:10:08,612 --> 00:10:12,670
of the tooling for SEM are built around your issue tracker and code repositories.

144
00:10:14,050 --> 00:10:17,566
CI CD will integrate with these tools, but it involves

145
00:10:17,598 --> 00:10:21,214
a lot more than change management at a high level. It involves

146
00:10:21,262 --> 00:10:23,950
verifying and testing the code, ensuring compliance,

147
00:10:24,030 --> 00:10:27,750
building artifacts, and deploying the code into different environments.

148
00:10:28,330 --> 00:10:31,634
And finally, that code will make its way into production if it is production

149
00:10:31,682 --> 00:10:32,390
worthy.

150
00:10:37,850 --> 00:10:41,766
In the title of our presentation, we called CICD the SRE DevOps

151
00:10:41,798 --> 00:10:45,194
overlay. Now what do we imply with that? It is

152
00:10:45,232 --> 00:10:49,046
the idea that a large spectrum of SRE and DevOps

153
00:10:49,078 --> 00:10:52,746
responsibilities are influenced by or even a

154
00:10:52,768 --> 00:10:56,278
byproduct of the changes, and the change cycle is managed

155
00:10:56,294 --> 00:11:00,154
through CI CD pipelines. Now let us do a dissection

156
00:11:00,202 --> 00:11:03,570
of various aspects of CI CD and how it relates to DevOps and SRE.

157
00:11:04,870 --> 00:11:08,910
Before we move into those important points, recall that both SRE

158
00:11:08,990 --> 00:11:12,878
and DevOps advises small incremental changes to be rolled

159
00:11:12,894 --> 00:11:16,470
out to avoid impact and manage changes effectively.

160
00:11:17,130 --> 00:11:20,274
Now, the only way to achieve this is through a fully automated

161
00:11:20,322 --> 00:11:26,802
CI CD pipeline testing.

162
00:11:26,946 --> 00:11:30,810
Now this is an obvious one, but we never do this sufficiently.

163
00:11:31,390 --> 00:11:34,700
Functional testing improves our confidence in the functionality of our application.

164
00:11:35,310 --> 00:11:38,726
Nonfunctional testing, on the other hand, improves our confidence

165
00:11:38,838 --> 00:11:41,820
in the application stability, scalability and security.

166
00:11:42,750 --> 00:11:46,526
Now, most of the functional tests, like unit and integration tests are automated as

167
00:11:46,548 --> 00:11:50,602
part of the continuous integration phase, whereas the most non functional tests are automated

168
00:11:50,666 --> 00:11:54,222
at various stages of deployment to various environments,

169
00:11:54,286 --> 00:11:58,260
including production stage, UAT and whatever you might have.

170
00:11:59,030 --> 00:12:02,194
Now, some non functional tests like performance testing are also done

171
00:12:02,312 --> 00:12:06,066
post production deployment, and this also

172
00:12:06,088 --> 00:12:10,166
generates a lot of reports on code quality, test coverage, all those

173
00:12:10,188 --> 00:12:13,526
things. While DevOps drive

174
00:12:13,548 --> 00:12:17,346
the adoption of most of the functional tests, SRE concentrate on the non functional

175
00:12:17,378 --> 00:12:21,306
part of the equation. Now this is not a set boundary, but in

176
00:12:21,328 --> 00:12:25,034
an organization that has both SRE and DevOps teams, this is how it

177
00:12:25,072 --> 00:12:26,090
usually evolves.

178
00:12:30,510 --> 00:12:34,110
Now there is no single standard for application configuration.

179
00:12:35,330 --> 00:12:39,374
You could use any of these listed methods or combine many of them.

180
00:12:39,572 --> 00:12:43,614
But remember, one of the key SRE principles is simplicity in

181
00:12:43,652 --> 00:12:46,618
design, configuration, business logic, et cetera.

182
00:12:46,794 --> 00:12:50,174
Whatever you choose, be consistent with it and make sure that

183
00:12:50,212 --> 00:12:54,110
any changes to your configuration values can be versioned and audited.

184
00:12:54,610 --> 00:13:00,066
So you infrastructure

185
00:13:00,098 --> 00:13:03,974
and configuration there are different ways in which you can provision your

186
00:13:04,012 --> 00:13:07,938
infrastructure and configure the application. In traditional it infrastructure,

187
00:13:08,034 --> 00:13:11,574
configuration management was the standard way to provision and configure

188
00:13:11,622 --> 00:13:13,930
your servers and applications.

189
00:13:14,670 --> 00:13:18,266
Now if you have workloads running on bare metals or vms, make sure to

190
00:13:18,288 --> 00:13:22,158
use a configuration management tool and commit your recipes to version control.

191
00:13:22,324 --> 00:13:26,160
Now these recipes could be play ansible playbooks or it could be

192
00:13:27,810 --> 00:13:32,240
salt stays in the salt stack ecosystem, but you get the idea.

193
00:13:33,510 --> 00:13:37,566
Now, the era of cloud management and Kubernetes has brought in newer

194
00:13:37,598 --> 00:13:41,170
ways to provision, configure and configure infrastructure.

195
00:13:41,750 --> 00:13:45,934
Infrastructure as code allows you to declare your infrastructure components as code

196
00:13:45,992 --> 00:13:49,590
and then have an automated system apply those changes to your infrastructure.

197
00:13:50,250 --> 00:13:54,274
Network as code is a subset of this and applies the same principles

198
00:13:54,322 --> 00:13:57,778
to network device configurations. Now there are

199
00:13:57,804 --> 00:14:01,354
generic tools like terraform as well as vendor specific tools like AWS cloud

200
00:14:01,392 --> 00:14:06,010
formation that are used for infrastructure as code management.

201
00:14:06,590 --> 00:14:10,522
But irrespective of the technologies used, this enabled SRE

202
00:14:10,586 --> 00:14:14,510
and DevOps to treat their infrared resources as code and manage their lifecycle

203
00:14:19,330 --> 00:14:23,002
Gitops and CICD now the evolution of IAC

204
00:14:23,066 --> 00:14:25,650
or infrastructure as code gave birth to another idea,

205
00:14:25,720 --> 00:14:29,806
Gitops. It is the new philosophy of for managing

206
00:14:29,838 --> 00:14:33,454
systems and resources. Now this philosophy can be broken into following

207
00:14:33,502 --> 00:14:37,218
elements. Desired state the declaration of the

208
00:14:37,224 --> 00:14:40,326
desired states define what is the end state of

209
00:14:40,348 --> 00:14:44,086
your infrastructure and its resources. Now, irrespective of the

210
00:14:44,108 --> 00:14:48,006
tech used to declare these resources, the changes should

211
00:14:48,028 --> 00:14:51,686
be versioned and immutable, which naturally leads us to storing

212
00:14:51,718 --> 00:14:55,322
the declarations in Git. Now there will be system

213
00:14:55,376 --> 00:14:59,226
specific software agents that will pull any changes automatically and apply it

214
00:14:59,248 --> 00:15:03,006
to the destination system. These same agents will also watch in

215
00:15:03,028 --> 00:15:06,718
real time for the state of the system and reconcile any drips to

216
00:15:06,724 --> 00:15:07,920
the desired state.

217
00:15:10,290 --> 00:15:13,966
Now Githubs can be implemented in a number of ways. As long as you

218
00:15:13,988 --> 00:15:17,810
have a Git based version system that allows either pull or push based notification,

219
00:15:18,310 --> 00:15:21,890
that should be enough for agents to discover the changes and apply them.

220
00:15:22,040 --> 00:15:25,586
But what is the most natural way to do this? Of course

221
00:15:25,608 --> 00:15:29,414
it is CI CD. If you commit the changes to disabled state into

222
00:15:29,452 --> 00:15:32,534
the gate, the changes can be picked up by a CI CD system,

223
00:15:32,652 --> 00:15:35,894
treat it like any other application code and proceed to apply those

224
00:15:35,932 --> 00:15:39,798
changes. Now this is quite convenient and uses all the tools

225
00:15:39,814 --> 00:15:49,206
and workflows that SRE used in the application deployment Gitops

226
00:15:49,238 --> 00:15:52,826
and the XS code revolution. Now the evolution of

227
00:15:52,848 --> 00:15:56,206
Gitops and infrastructure as code brought out more practices that can

228
00:15:56,228 --> 00:15:58,510
be declared as code and implemented.

229
00:15:59,810 --> 00:16:04,018
Policy as code allows you to enforce organizations and security

230
00:16:04,104 --> 00:16:06,930
policies on your code, configuration and resources.

231
00:16:07,430 --> 00:16:10,706
SLOS code definitions and tracking of

232
00:16:10,728 --> 00:16:13,278
slos for large number of services very tricky.

233
00:16:13,454 --> 00:16:16,900
Codifying them into SLOS code makes it very easy.

234
00:16:17,830 --> 00:16:21,366
Dashboard as code is something that has existed for a while. You might have

235
00:16:21,388 --> 00:16:25,458
seen this with Grafana and similar tools. Now similarly

236
00:16:25,474 --> 00:16:28,360
you could configure your observability sidecars also using code.

237
00:16:29,130 --> 00:16:32,666
Even the CI CD pipelines themselves can be defined as code and this

238
00:16:32,688 --> 00:16:34,810
will help you when you onboard new projects.

239
00:16:36,910 --> 00:16:40,026
Now there are more to this list, but this is how you bring SRE and

240
00:16:40,048 --> 00:16:41,610
DevOps through CI CD.

241
00:16:45,650 --> 00:16:49,358
So, to summarize what is discussed so far, a large number of DevOps and

242
00:16:49,364 --> 00:16:52,430
SRE practices can be implemented via CICD.

243
00:16:52,770 --> 00:16:56,286
This helps in standardization of the best practices and improve the reliability

244
00:16:56,318 --> 00:17:00,158
posture of your services. Make sure that your CICD

245
00:17:00,174 --> 00:17:04,370
evolves to accommodate these practices as your SRE and engineering maturity grows.

246
00:17:09,910 --> 00:17:13,210
So there are a lot of advanced SRE DevOps practices with CI CD.

247
00:17:13,310 --> 00:17:16,946
And in the second part of this talk Gerima will discuss the more advanced concepts

248
00:17:16,978 --> 00:17:20,666
and the futuristic look into CICD. But before we

249
00:17:20,688 --> 00:17:23,846
go into that, I would like to take a minute to talk about our mutual

250
00:17:23,878 --> 00:17:27,210
association with CDF, the continuous delivery foundation.

251
00:17:32,030 --> 00:17:36,030
So CDF is a foundation under Linux foundation umbrella similar

252
00:17:36,100 --> 00:17:39,342
to the CNCF. CDF is a vendor neutral body

253
00:17:39,396 --> 00:17:43,054
that hosts a number of popular open source projects in the CI CD space.

254
00:17:43,252 --> 00:17:46,946
Its mission is to bring together vendors, developers and end

255
00:17:46,968 --> 00:17:50,354
users to advance the standardization and best practices of

256
00:17:50,392 --> 00:17:54,178
CI CD. Now this is the official definition of

257
00:17:54,184 --> 00:17:57,480
what CDF is, but the next slide might give you a better idea.

258
00:18:01,690 --> 00:18:04,578
These are the projects that are currently managed by CDF,

259
00:18:04,754 --> 00:18:08,682
Jenkins, Jenkins X, Screwdriver, Spinnaker and Tecton Power

260
00:18:08,736 --> 00:18:12,326
CA and CD pipelines. Persha is a decentralized package

261
00:18:12,358 --> 00:18:15,498
network based on blockchain. Otelius is

262
00:18:15,504 --> 00:18:18,842
a microservice catalog with supply chain intelligence and domain driven design

263
00:18:18,896 --> 00:18:22,346
support. Shipwrecked is a framework for building container

264
00:18:22,378 --> 00:18:25,754
images and CD events is a common specification

265
00:18:25,802 --> 00:18:29,598
for continuous delivery events. I'm sure this would give you a

266
00:18:29,604 --> 00:18:33,346
better idea of what CDF is. Me and Garima are

267
00:18:33,528 --> 00:18:36,994
community ambassadors of the CDF and work towards the

268
00:18:37,032 --> 00:18:40,926
better community adoption and standardization of our projects

269
00:18:41,038 --> 00:18:44,578
as well as the general CI CD best practices. Over to

270
00:18:44,584 --> 00:18:48,854
you Garima. Thank you everyone. Hello everyone

271
00:18:49,052 --> 00:18:52,546
and I'm Garima Bajpai. I'm here to talk about kudaneous

272
00:18:52,578 --> 00:18:56,150
integration and delivery, the SRE DevOps overlay.

273
00:18:56,490 --> 00:19:00,250
This is a joint topic which we have taken up together

274
00:19:00,320 --> 00:19:04,122
with Safir and myself. You must be having

275
00:19:04,176 --> 00:19:08,502
a good view on what the topic is all about through Safir.

276
00:19:08,646 --> 00:19:12,382
Now I would like to talk about from a high level

277
00:19:12,436 --> 00:19:15,902
futuristic perspective. Why should you care

278
00:19:15,956 --> 00:19:19,406
about this topic? So before we actually get going and

279
00:19:19,428 --> 00:19:23,342
get started on the conversation today I'm going to have with you

280
00:19:23,396 --> 00:19:26,594
I would like to introduce myself. I'm Garima Bajpai based

281
00:19:26,632 --> 00:19:29,806
out of Oreva, Canada. I am the founder

282
00:19:29,838 --> 00:19:33,106
for the DevOps community of Practice here in Canada which has

283
00:19:33,128 --> 00:19:36,790
several chapters. It has around about 1500

284
00:19:36,860 --> 00:19:40,674
members and it is at various

285
00:19:40,722 --> 00:19:44,002
locations. If you have not checked out this community of practice,

286
00:19:44,066 --> 00:19:47,614
I would do recommend to do that. I'm also the chair

287
00:19:47,682 --> 00:19:50,778
for the Continuous Delivery Foundation Ambassador Group,

288
00:19:50,944 --> 00:19:54,614
which is a group of practitioners primarily

289
00:19:54,662 --> 00:19:58,106
in the continuous delivery space which is fostering change,

290
00:19:58,208 --> 00:20:02,202
evolution and future perspective of continuous delivery

291
00:20:02,346 --> 00:20:05,434
when it comes to open source technology and tools.

292
00:20:05,562 --> 00:20:10,030
I'm also a course creator and content provider with various

293
00:20:10,610 --> 00:20:14,354
affiliated organizations. If you want to kind of check out my work,

294
00:20:14,472 --> 00:20:17,646
you can go to DevOps Institute as well as condensed

295
00:20:17,678 --> 00:20:22,098
Delivery foundation for references and content

296
00:20:22,184 --> 00:20:25,490
and courses created on DevOps and SRE primarily.

297
00:20:26,890 --> 00:20:30,754
I am also nominated for the DevOps Dozen

298
00:20:30,802 --> 00:20:34,370
in 2022 Community Awards for top DevOps

299
00:20:34,450 --> 00:20:37,606
Evangelist and one

300
00:20:37,628 --> 00:20:41,178
of my core assignments for this year

301
00:20:41,344 --> 00:20:45,222
is I would be publishing a book on strategizing

302
00:20:45,286 --> 00:20:48,746
content delivery in cloud with pact. It is coming out in

303
00:20:48,768 --> 00:20:52,014
July. If you haven't checked out that I would

304
00:20:52,132 --> 00:20:56,720
recommend to do that as well. It is available on Amazon for

305
00:20:57,330 --> 00:21:01,070
pre ordering. So now I get started

306
00:21:01,140 --> 00:21:04,610
with site reliability engineering and DevOps.

307
00:21:05,350 --> 00:21:09,214
It is amazing and hard to believe that we only started a decade

308
00:21:09,262 --> 00:21:12,738
ago with all this, right? With most of

309
00:21:12,744 --> 00:21:16,914
the practices and concepts which are in the content delivery space,

310
00:21:17,032 --> 00:21:21,078
there's exponential growth of tools. There is also

311
00:21:21,244 --> 00:21:24,566
increasing complexity. It is inevitable that

312
00:21:24,588 --> 00:21:28,270
the complexity which is increasing with the rapid adoption

313
00:21:28,450 --> 00:21:32,246
and it is bringing new operational challenges,

314
00:21:32,438 --> 00:21:36,810
risks, overhead and cognitive load on the practitioners.

315
00:21:38,990 --> 00:21:43,562
Moreover, cost with more and more services and applications

316
00:21:43,706 --> 00:21:47,162
moving to the cloud, financial practices and engineering practices,

317
00:21:47,226 --> 00:21:50,894
SRE getting highly integrated. So if you have

318
00:21:50,932 --> 00:21:54,394
not heard of finops or cops optimization dryers

319
00:21:54,442 --> 00:21:58,274
in big and small organizations, I think it's high time to

320
00:21:58,312 --> 00:22:01,746
check out that movement as well. And lastly, I would

321
00:22:01,768 --> 00:22:06,182
say skill shortage that there are many aspects of learning people

322
00:22:06,236 --> 00:22:10,086
are getting behind due to lack of self development and increasing a

323
00:22:10,108 --> 00:22:13,414
major skill shortage. So there

324
00:22:13,452 --> 00:22:17,410
are challenges and opportunity for both sides,

325
00:22:17,570 --> 00:22:21,130
DevOps and site reliability engineering. But before

326
00:22:21,200 --> 00:22:24,954
we actually move forward, we would also like to understand that

327
00:22:25,072 --> 00:22:29,162
how did we reach to this stage? So if you think about

328
00:22:29,296 --> 00:22:32,720
how these two movements got started and

329
00:22:33,410 --> 00:22:37,322
from a DevOps perspective, the DevOps practices were primarily

330
00:22:37,466 --> 00:22:41,118
kind of developer centric. It was

331
00:22:41,284 --> 00:22:45,970
a push from the developer productivity

332
00:22:46,310 --> 00:22:49,442
and obviously the evangelist started

333
00:22:49,496 --> 00:22:53,522
looking at how do we shorten the lead time for

334
00:22:53,656 --> 00:22:57,414
our software delivery or incremental deliveries. And that's where

335
00:22:57,532 --> 00:23:01,762
a lot of practices got kind of introduced and adopted.

336
00:23:01,906 --> 00:23:06,290
Whereas there was a specific set of industry practices on evangelist

337
00:23:06,370 --> 00:23:09,590
which were looking at like how do you bring enhanced reliability

338
00:23:09,670 --> 00:23:13,834
posture when you talk about decentralizing, or when you

339
00:23:13,872 --> 00:23:17,334
talk about bringing DevOps practices on the table with flow,

340
00:23:17,382 --> 00:23:21,738
feedback and experimentation?

341
00:23:21,914 --> 00:23:25,694
So there was like a constant push on how

342
00:23:25,732 --> 00:23:30,058
do you bring customer experience, reliability posture

343
00:23:30,154 --> 00:23:34,834
and increasing stability with

344
00:23:34,952 --> 00:23:38,082
the increase of developer productivity in the same

345
00:23:38,136 --> 00:23:42,382
context. So we see that these two mutually enforcing

346
00:23:42,446 --> 00:23:46,374
practices are in waking for several years now,

347
00:23:46,492 --> 00:23:50,406
and we are at a stage where we would like to

348
00:23:50,428 --> 00:23:54,760
kind of discuss that, how site reliability engineering and

349
00:23:55,850 --> 00:23:58,954
DevOps would be

350
00:23:58,992 --> 00:24:02,986
pivoting to an optimal operating model and

351
00:24:03,008 --> 00:24:06,582
to fully realize the potential of, let's say, DevOps at scale,

352
00:24:06,646 --> 00:24:10,506
the integration of SRE practices is essential. Everybody agrees

353
00:24:10,538 --> 00:24:13,674
to that today. Balancing investment in tools,

354
00:24:13,722 --> 00:24:17,018
upskilling for reliability, visa vis rapid innovation

355
00:24:17,194 --> 00:24:20,702
is needed to bring that optimal operating model

356
00:24:20,836 --> 00:24:24,350
in place. And could continuous delivery

357
00:24:24,430 --> 00:24:27,650
be that common code, the common trigger

358
00:24:28,710 --> 00:24:32,258
to be the binding force behind that optimal operating model?

359
00:24:32,344 --> 00:24:35,734
Let's explore more. So, before we

360
00:24:35,772 --> 00:24:39,720
actually go further into this conversation, it is also important

361
00:24:40,890 --> 00:24:44,978
we talk about the law of diminishing returns.

362
00:24:45,154 --> 00:24:49,100
And why do we do so? Here in this

363
00:24:49,790 --> 00:24:53,430
talk is because if you think about DevOps practices

364
00:24:53,510 --> 00:24:57,114
or SRE practices, there's a certain set of

365
00:24:57,152 --> 00:25:01,274
output which is envied, which is expected

366
00:25:01,322 --> 00:25:04,846
or which is aligned to the business goals. And there's a

367
00:25:04,868 --> 00:25:08,606
substantial amount of time and effort needed as

368
00:25:08,628 --> 00:25:12,786
an input to steer that right. But the

369
00:25:12,808 --> 00:25:17,374
more we actually move towards incremental

370
00:25:17,422 --> 00:25:19,970
deliveries or enforcing these practices,

371
00:25:20,710 --> 00:25:24,660
we will realize that there is a point where

372
00:25:25,450 --> 00:25:28,930
we will have the point of maximum yield,

373
00:25:29,010 --> 00:25:30,840
that now,

374
00:25:31,210 --> 00:25:34,694
howsoever we provide you

375
00:25:34,732 --> 00:25:37,758
with input, with time, with people, with efforts,

376
00:25:37,874 --> 00:25:39,770
with practices, with tools,

377
00:25:40,750 --> 00:25:44,058
we have reached to a maximum yield point. And then

378
00:25:44,144 --> 00:25:47,414
from there we would be dropping

379
00:25:47,462 --> 00:25:50,702
our productivity to negative returns because of

380
00:25:50,756 --> 00:25:54,254
the complexity which is getting introduced, the number

381
00:25:54,292 --> 00:25:57,914
of tools which we have adopted,

382
00:25:58,042 --> 00:26:01,182
and also due to other factors which we have talked about,

383
00:26:01,236 --> 00:26:05,506
like cost and skill gap. So in

384
00:26:05,528 --> 00:26:09,246
order to ensure that we understand that there is an optimal

385
00:26:09,278 --> 00:26:12,418
operating model which is needed to be

386
00:26:12,504 --> 00:26:15,986
put in place for individuals, communities and systems

387
00:26:16,018 --> 00:26:19,574
to be sustainable, what can

388
00:26:19,612 --> 00:26:22,918
be that optimal operating model? And how do

389
00:26:23,004 --> 00:26:26,898
we know, or how do I know that my organization

390
00:26:26,994 --> 00:26:31,274
is ready for that SrE DevOps overlay which

391
00:26:31,312 --> 00:26:34,742
we are talking about here, which can bring that optimal operating

392
00:26:34,806 --> 00:26:37,366
model in existence?

393
00:26:37,558 --> 00:26:41,150
So there are few things which we can do

394
00:26:41,220 --> 00:26:44,314
as an individual, as teams, as organizations,

395
00:26:44,362 --> 00:26:48,778
and these are questions which we probably will have to ask ourselves.

396
00:26:48,954 --> 00:26:53,150
So, first of all, the main business objective,

397
00:26:53,230 --> 00:26:57,266
why are we deploying and what is

398
00:26:57,288 --> 00:27:00,674
our mission vision? What kind of applications are we

399
00:27:00,712 --> 00:27:04,722
deploying? Are they monolithic or microservices? Where are we deploying these

400
00:27:04,776 --> 00:27:08,982
applications? What Sre the core objective for organizations? How many cloud

401
00:27:09,036 --> 00:27:12,354
providers are involved? How could we keep them converged?

402
00:27:12,402 --> 00:27:15,894
And lastly, how often do I want

403
00:27:15,932 --> 00:27:19,446
to deploy and why? If we start answering

404
00:27:19,478 --> 00:27:22,794
these questions, we will come to a point where we would be

405
00:27:22,832 --> 00:27:26,726
able to assess or analyze our state of nation

406
00:27:26,838 --> 00:27:30,018
from an organizations individual or community perspective.

407
00:27:30,134 --> 00:27:34,414
That whether we are ready for that DevOps SRE overlay and

408
00:27:34,532 --> 00:27:38,030
start talking about the common

409
00:27:38,100 --> 00:27:42,426
core. The common core which is the continuous delivery and associated

410
00:27:42,458 --> 00:27:46,254
practices. And when we talk about that

411
00:27:46,292 --> 00:27:50,850
common core, essentially we are talking about four principles,

412
00:27:51,430 --> 00:27:55,158
declarative way. The entire system has to

413
00:27:55,164 --> 00:27:58,678
be described declaratively. The second

414
00:27:58,844 --> 00:28:02,482
principle is version and immutable. The canonical

415
00:28:02,546 --> 00:28:06,086
desired state is version and does not matter which tool is

416
00:28:06,108 --> 00:28:09,430
it. The third principle is pulled automatically.

417
00:28:09,510 --> 00:28:13,242
So how much operational overload we

418
00:28:13,296 --> 00:28:17,066
have in the system, and if we approve changes

419
00:28:17,248 --> 00:28:20,910
automatically and apply it to the system, that would be

420
00:28:20,980 --> 00:28:25,178
one of the principles which can help you get to that optimal

421
00:28:25,274 --> 00:28:29,034
operating model. And the fourth point is continuously

422
00:28:29,082 --> 00:28:32,334
reconcile so software agents to ensure that correctness and

423
00:28:32,372 --> 00:28:36,034
learn on diversions. So if you think

424
00:28:36,072 --> 00:28:39,086
about these four principles, make sense to your delivery.

425
00:28:39,198 --> 00:28:42,770
Let's continue this dialogue.

426
00:28:43,270 --> 00:28:46,454
So we have reached to a point where we have

427
00:28:46,492 --> 00:28:50,018
built some consensus on the common core. Continuous delivery

428
00:28:50,114 --> 00:28:54,162
practices and associated practices like continuous integration

429
00:28:54,226 --> 00:28:57,930
and deployment can provide that common

430
00:28:58,000 --> 00:29:01,622
core for SRE and DevOps overlay.

431
00:29:01,766 --> 00:29:03,740
Now, we also have,

432
00:29:04,990 --> 00:29:08,550
I would say, challenge in terms of how we measure

433
00:29:08,630 --> 00:29:11,934
this progress. And primarily, if you

434
00:29:11,972 --> 00:29:15,374
think about measurement perspective, a lot of things have

435
00:29:15,412 --> 00:29:20,030
been done, and mostly we talk about industrial

436
00:29:20,450 --> 00:29:23,810
practices or best practices around Dora.

437
00:29:24,630 --> 00:29:28,146
And I would like to kind of also highlight through my

438
00:29:28,168 --> 00:29:31,762
talk that if you are looking at that

439
00:29:31,816 --> 00:29:35,210
common core, the optimal

440
00:29:35,390 --> 00:29:39,042
operating model, it's time for you to go beyond

441
00:29:39,106 --> 00:29:42,246
Dora and I would highlight some of the

442
00:29:42,268 --> 00:29:45,160
functional advancements which are associated with this.

443
00:29:46,170 --> 00:29:49,914
Functional advancements of supercloud, or sometimes referred to as

444
00:29:50,032 --> 00:29:53,660
cross cloud, providing interoperability with

445
00:29:54,190 --> 00:29:57,866
specifically content delivery capability. So we'll have

446
00:29:57,888 --> 00:30:01,902
to kind of assess that posture moving forward using

447
00:30:01,956 --> 00:30:05,502
an event driven approach and introducing a high level of

448
00:30:05,556 --> 00:30:09,642
reusability, flexibility and full stack interoperability

449
00:30:09,786 --> 00:30:13,234
for the complete software lifecycle being

450
00:30:13,272 --> 00:30:16,386
the second one. The third functional advancement I

451
00:30:16,408 --> 00:30:20,878
would emphasize is progressive delivery with machine learning capability

452
00:30:20,974 --> 00:30:24,174
and reducing the challenge of adoption of progressive

453
00:30:24,222 --> 00:30:27,826
delivery. The fourth bullet item, and that I

454
00:30:27,848 --> 00:30:31,300
called silver bullet is s bomb for the future

455
00:30:31,750 --> 00:30:35,314
as SBOM software bill of material continuous to evolve.

456
00:30:35,362 --> 00:30:39,398
So is the framework for data exchange and the need for a standard format.

457
00:30:39,494 --> 00:30:43,942
So these are the functional advancements which you can correlate

458
00:30:44,006 --> 00:30:48,170
to your measurement of success in getting

459
00:30:48,240 --> 00:30:51,280
to that optimal operating model.

460
00:30:51,970 --> 00:30:55,514
Now I would highlight this SBOM

461
00:30:55,642 --> 00:30:59,498
as one of the core of fundamental of foundational capabilities

462
00:30:59,674 --> 00:31:03,470
which will help you manage the complexity and securability

463
00:31:03,550 --> 00:31:06,882
of modern software deployment. Gartner believes that

464
00:31:06,936 --> 00:31:10,494
in 2025, 60% of the organizations

465
00:31:10,542 --> 00:31:14,622
procuring mission critical software solutions will mandate as form disclosure

466
00:31:14,766 --> 00:31:18,694
in the license and support agreement, up from less than 5%

467
00:31:18,732 --> 00:31:22,102
in 2022. It is essential to make

468
00:31:22,156 --> 00:31:25,926
it as part a measurable part, a tangible part

469
00:31:26,028 --> 00:31:30,250
of your delivery as you go along. There are

470
00:31:30,320 --> 00:31:34,442
operational advancements as well, which we should see for

471
00:31:34,496 --> 00:31:37,578
measuring portability being one of them.

472
00:31:37,744 --> 00:31:41,374
There are variety of languages, platforms and frameworks being

473
00:31:41,412 --> 00:31:44,526
used today. How do we make portability as

474
00:31:44,548 --> 00:31:48,506
one of the measuring criteria for our software delivery

475
00:31:48,538 --> 00:31:52,742
components? To reduce the cognitive workload

476
00:31:52,826 --> 00:31:57,486
for not only developers but also for SRE practitioners,

477
00:31:57,678 --> 00:32:01,454
flow optimized and observable deliveries. So whenever

478
00:32:01,502 --> 00:32:05,246
we are going to decentralize our delivery, we go from monolithic

479
00:32:05,278 --> 00:32:08,662
to microservices. We have a distribution management system.

480
00:32:08,796 --> 00:32:12,342
We need to have a flow optimized and observable system.

481
00:32:12,476 --> 00:32:16,594
So have you introduced that component in your software delivery

482
00:32:16,722 --> 00:32:20,154
that can also be one of the measurable aspects of the

483
00:32:20,192 --> 00:32:23,782
common core? I will also talk about resource optimized

484
00:32:23,846 --> 00:32:27,542
and resilient. That means optimized posture of infrastructure.

485
00:32:27,606 --> 00:32:31,114
It is not okay to add fixed cost to your products as

486
00:32:31,152 --> 00:32:34,666
you go along, so you will have to look at that optimization

487
00:32:34,778 --> 00:32:38,186
at the infrastructure layer. And lastly,

488
00:32:38,218 --> 00:32:41,982
I would say real time and dynamic. So how real time and

489
00:32:42,036 --> 00:32:45,982
dynamic your software delivery capabilities

490
00:32:46,046 --> 00:32:50,242
are which can support rapid scale up, scale down and address

491
00:32:50,296 --> 00:32:51,810
the real time requirements.

492
00:32:54,230 --> 00:32:57,894
When we talk about all these changes, we also talk

493
00:32:57,932 --> 00:33:02,680
about the infinite bandwidth and zero latency from

494
00:33:03,690 --> 00:33:07,206
demand and supply value chain system. So we need to kind

495
00:33:07,228 --> 00:33:10,410
of ensure that we have some supporting,

496
00:33:11,310 --> 00:33:14,614
measurable general purpose

497
00:33:14,662 --> 00:33:18,086
pipelines and services which can be serving

498
00:33:18,118 --> 00:33:22,346
our fundamental needs or general purpose or they can be reusable.

499
00:33:22,538 --> 00:33:25,566
We cannot forget small and medium business services.

500
00:33:25,668 --> 00:33:29,774
So think small before you think big and high

501
00:33:29,812 --> 00:33:33,860
performance community collaboration hubs which are

502
00:33:34,230 --> 00:33:38,702
mostly needed for entrepreneurs,

503
00:33:38,766 --> 00:33:42,654
for evangelists, for practitioners to foster

504
00:33:42,782 --> 00:33:46,834
collaboration and create a possible futuristic

505
00:33:46,882 --> 00:33:48,440
approach on all this.

506
00:33:50,010 --> 00:33:53,350
I will not talk about more on this because

507
00:33:53,420 --> 00:33:56,754
state of art AI capabilities SRE going from beyond

508
00:33:56,802 --> 00:34:00,434
cloud native to edge native and full stack interoperability

509
00:34:00,482 --> 00:34:03,914
and enhancing reusability can be some

510
00:34:03,952 --> 00:34:11,902
of the key areas of focus

511
00:34:12,036 --> 00:34:14,910
for the next generation practitioners.

512
00:34:15,410 --> 00:34:18,778
When we talk about the overlay of DevOps and SRE,

513
00:34:18,874 --> 00:34:22,606
we also think about net zero commitment and SRE can

514
00:34:22,628 --> 00:34:26,446
lead the way there. One of the critical threads which ties

515
00:34:26,558 --> 00:34:29,906
everything back together is net zero commitment. SRE can

516
00:34:29,928 --> 00:34:33,346
lead that way. And what if we can create a marketplace of

517
00:34:33,368 --> 00:34:37,242
carbon neutral products and services where we can cascade the impact?

518
00:34:37,326 --> 00:34:40,694
If we would intend to do so, we might have

519
00:34:40,732 --> 00:34:44,482
to consider future evolutionary changes and some of the next steps

520
00:34:44,626 --> 00:34:47,978
could be as follows, like mapping your carbon footprint for

521
00:34:48,064 --> 00:34:51,766
products and services and identifying hotspot features guidelines

522
00:34:51,798 --> 00:34:54,586
for financing of ICT products and services,

523
00:34:54,688 --> 00:34:58,074
certification and decarbonization of ICT services and

524
00:34:58,112 --> 00:35:02,702
products through tools and processes. So we

525
00:35:02,756 --> 00:35:06,894
have tried to kind of ensure that we bring here

526
00:35:06,932 --> 00:35:10,782
and now aspects of the SRE DevOps overlay through

527
00:35:10,836 --> 00:35:14,430
Safir's conversation and also try to ensure

528
00:35:14,510 --> 00:35:18,578
what is in stored for future from an optimal operating model

529
00:35:18,664 --> 00:35:22,130
perspective. When we talk about SRE DevOps overlay and how

530
00:35:22,200 --> 00:35:26,838
continuous delivery stack can create

531
00:35:26,924 --> 00:35:30,498
that pivot or create that binding

532
00:35:30,594 --> 00:35:34,262
together perspective around all this

533
00:35:34,396 --> 00:35:38,166
for the future. If you like this conversation, do follow me

534
00:35:38,188 --> 00:35:42,150
on LinkedIn or get in touch with me or contend

535
00:35:43,210 --> 00:35:46,694
through our social handles. But for

536
00:35:46,732 --> 00:35:50,446
now I would say goodbye and thank you for

537
00:35:50,468 --> 00:35:52,240
listening to our talk.

