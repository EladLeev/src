1
00:00:34,770 --> 00:00:38,374
I always say it's hard to follow a tough act, but no

2
00:00:38,412 --> 00:00:41,814
act is tougher than lunch. But I'll do my best.

3
00:00:42,012 --> 00:00:46,050
And one thing is we want to make sure that as any speaker,

4
00:00:46,130 --> 00:00:49,506
you're leaving this session with a new nugget

5
00:00:49,538 --> 00:00:52,746
of information nation a little bit about today's

6
00:00:52,778 --> 00:00:56,078
talk. We're going to be talking about cloud metadata service

7
00:00:56,164 --> 00:01:00,346
and the abuses. We're seeing it on the front lines from different threat actors

8
00:01:00,458 --> 00:01:04,340
and we're going to really particularly speak on a particular use case.

9
00:01:05,990 --> 00:01:09,886
So quick little we'll give us some small introductions of ourselves,

10
00:01:10,078 --> 00:01:13,538
a little overview of what is the instance metadata service.

11
00:01:13,624 --> 00:01:16,962
We're going to actually talk about that across the three major cloud

12
00:01:17,016 --> 00:01:20,438
platforms, AWS, GCP and Azure. But then we're

13
00:01:20,444 --> 00:01:24,086
going to really focus on AWS towards the end. We're going to then speak a

14
00:01:24,108 --> 00:01:27,366
little bit about the threat landscape. So what is happening that

15
00:01:27,388 --> 00:01:30,714
we're seeing that are being abused by threat actors or

16
00:01:30,752 --> 00:01:33,910
can be abused by threat actors around the cloud metadata.

17
00:01:34,070 --> 00:01:37,482
And then we're going to get into the specific use

18
00:01:37,536 --> 00:01:41,194
case where we saw threat actors able to

19
00:01:41,232 --> 00:01:44,446
abuse this at a large grand scale and kind of go

20
00:01:44,468 --> 00:01:47,598
through the timeline of the attack. And then towards the

21
00:01:47,604 --> 00:01:50,670
end we're going to do a demo of exactly

22
00:01:50,820 --> 00:01:54,450
what the threat actors did and utilized in order to perform

23
00:01:54,520 --> 00:01:58,162
this attack. And then we're going to be doing this

24
00:01:58,216 --> 00:02:01,426
detections, how to detect this in your environment, how to

25
00:02:01,448 --> 00:02:04,818
remediate, how to prevent. And then we're going

26
00:02:04,824 --> 00:02:09,894
to finally do that same demo to show that the prevention techniques was

27
00:02:09,932 --> 00:02:12,854
able to successfully block the specific attack.

28
00:02:13,052 --> 00:02:16,406
And we try to plan ahead.

29
00:02:16,508 --> 00:02:20,122
We made sure the demo gods isn't always working in people's favor.

30
00:02:20,256 --> 00:02:24,220
So what we did, we had video demos which we'll be talking through it

31
00:02:25,870 --> 00:02:29,434
as always. This is more of a housekeeping item. The case

32
00:02:29,472 --> 00:02:33,390
studies and examples that we're going to be talking about is really

33
00:02:33,540 --> 00:02:37,226
around just various different attacks and things that we've

34
00:02:37,258 --> 00:02:40,526
seen on the front lines that are public knowledge and just through from our

35
00:02:40,548 --> 00:02:43,966
proactive type engagements. There's not one specific client we're

36
00:02:43,998 --> 00:02:47,426
speaking of just because we want to obfuscate as

37
00:02:47,448 --> 00:02:51,010
much to try to keep our clients confidentiality intact.

38
00:02:52,390 --> 00:02:55,710
So a little bit about myself. I'm Nader Zaveri.

39
00:02:55,790 --> 00:02:59,382
I'm a senior manager within Mandian, specifically part of

40
00:02:59,436 --> 00:03:03,094
our security transformational services practice. Say that

41
00:03:03,132 --> 00:03:07,014
three times fast, I dare you. It's a very unique practice though.

42
00:03:07,052 --> 00:03:10,602
So within Mandiant as we know, we have the

43
00:03:10,656 --> 00:03:14,246
incident response services which is our foremost

44
00:03:14,438 --> 00:03:18,278
service that we provide, we're the containment remediation arm

45
00:03:18,374 --> 00:03:22,022
during an incident. So as investigators, as Brandon

46
00:03:22,086 --> 00:03:25,658
and his team are investigating, we're there to help plug the holds

47
00:03:25,754 --> 00:03:28,954
that the attackers were able to utilize and also help remediate

48
00:03:29,002 --> 00:03:32,826
additional holds and gaps that maybe the attacker may try to pivot.

49
00:03:33,018 --> 00:03:36,878
Another facet of what we do here at STS

50
00:03:36,974 --> 00:03:40,306
is proactive engagements. So throughout the talk, you're going to hear

51
00:03:40,328 --> 00:03:44,574
me talk about things that I've seen from the front lines as well as organizations

52
00:03:44,622 --> 00:03:48,754
that are being proactive. They want to be able to test and assess

53
00:03:48,802 --> 00:03:52,738
their cloud environment. So they call us and we perform proactive

54
00:03:52,834 --> 00:03:56,806
engagements and assessments across their environment, regardless of

55
00:03:56,828 --> 00:03:57,800
the cloud platform.

56
00:04:00,170 --> 00:04:03,734
And my name is Brandon Sean Ruffer. I am a principal consultant

57
00:04:03,782 --> 00:04:07,606
with Mandiant services team, focusing on incident response

58
00:04:07,638 --> 00:04:12,026
and digital forensics. My focus is similar

59
00:04:12,128 --> 00:04:15,882
to Nader in know when an incident occurs.

60
00:04:15,946 --> 00:04:19,962
We're those individuals that are in the front lines responding to breaches

61
00:04:20,106 --> 00:04:23,998
as well as performing some of the behind the scenes activities

62
00:04:24,174 --> 00:04:27,726
where it comes to actually what occurred and recreating

63
00:04:27,758 --> 00:04:30,930
and following the breadcrumbs to the overall incident.

64
00:04:31,830 --> 00:04:35,210
I have a degree in digital forensics

65
00:04:35,390 --> 00:04:39,078
as well as I've responded to both many

66
00:04:39,164 --> 00:04:43,160
ransomware and nation state threat actors as well over the years.

67
00:04:43,850 --> 00:04:47,602
I as well provide with my

68
00:04:47,676 --> 00:04:50,518
free time as well, or the lack thereof,

69
00:04:50,694 --> 00:04:56,278
other industry advisory to other organizations,

70
00:04:56,454 --> 00:04:59,782
and I am an instructor for our incident

71
00:04:59,846 --> 00:05:02,880
response and other related course content.

72
00:05:03,330 --> 00:05:07,166
I also manage a team of individuals in

73
00:05:07,188 --> 00:05:11,840
our San Francisco office, but I recently moved to Arizona and

74
00:05:12,390 --> 00:05:16,498
it's been an interesting transition between just the

75
00:05:16,584 --> 00:05:19,330
general teams at mandiant.

76
00:05:21,190 --> 00:05:25,186
Awesome. So first, before we kind of break into

77
00:05:25,288 --> 00:05:29,074
exactly what happened, we want to kind of level set the terminologies.

78
00:05:29,122 --> 00:05:32,742
When we're talking about instance metadata service, what do we mean?

79
00:05:32,876 --> 00:05:36,306
What is instance metadata? What is it related to AWS?

80
00:05:36,418 --> 00:05:40,186
But really this is across cloud platforms. One thing is

81
00:05:40,368 --> 00:05:43,786
it provides critical information. So if you have a

82
00:05:43,808 --> 00:05:46,902
virtual machine that's in the cloud or EC, two instance,

83
00:05:47,046 --> 00:05:51,162
in this case with AWS, it's a

84
00:05:51,216 --> 00:05:54,826
set up to be a non routable link, local IP

85
00:05:54,858 --> 00:05:58,350
address, 169254 or 169254,

86
00:05:58,420 --> 00:06:01,914
you could do a simple crow command, and it provides

87
00:06:01,962 --> 00:06:05,554
critical information for the operating system,

88
00:06:05,672 --> 00:06:09,410
IP address, what subnet they're in, what availability zone,

89
00:06:09,990 --> 00:06:13,266
some of the key things that an application may

90
00:06:13,288 --> 00:06:17,590
need. So sometimes a developer needs this to be able to provide

91
00:06:17,660 --> 00:06:21,186
critical information. But also you can supply

92
00:06:21,378 --> 00:06:25,142
certain scripts, like startup scripts within the user data

93
00:06:25,196 --> 00:06:29,338
to be able to have the virtual machine run. And one

94
00:06:29,344 --> 00:06:33,180
of the things is this is across really cloud platforms and

95
00:06:33,630 --> 00:06:36,838
we're speaking a little bit more deeply on AWS,

96
00:06:37,014 --> 00:06:40,302
but Azure has its instance metadata service as well

97
00:06:40,356 --> 00:06:41,870
as GCP.

98
00:06:44,210 --> 00:06:47,998
Now we know a little bit about what is the instance metadata service.

99
00:06:48,084 --> 00:06:51,326
Why do we care? So we will be talking a

100
00:06:51,348 --> 00:06:55,202
little bit more on instance AWS, instance metadata service

101
00:06:55,256 --> 00:06:57,620
version one versus version two.

102
00:06:58,950 --> 00:07:02,930
One thing is this is not a vulnerability. It is a misconfiguration.

103
00:07:03,510 --> 00:07:07,234
So it's not going to be caught by normal vulnerability scanners.

104
00:07:07,362 --> 00:07:10,642
This is a misconfiguration. It is meant

105
00:07:10,706 --> 00:07:14,566
to be like this for a certain time. And one thing

106
00:07:14,588 --> 00:07:18,314
is just anecdotally and I'm glad this just came

107
00:07:18,352 --> 00:07:22,538
out about a week and a half ago by datadog where

108
00:07:22,704 --> 00:07:25,994
they went and scoured their 600

109
00:07:26,032 --> 00:07:30,140
plus organizations and the specific

110
00:07:30,750 --> 00:07:34,174
misconfiguration which is version one. And we'll talk a little bit about what

111
00:07:34,212 --> 00:07:38,398
happens in version one versus version two. This 93%

112
00:07:38,484 --> 00:07:41,614
of EC two instances had

113
00:07:41,652 --> 00:07:45,266
this misconfiguration and 95% of

114
00:07:45,288 --> 00:07:49,262
organizations across their span of 600 plus organizations

115
00:07:49,326 --> 00:07:53,234
had at least one or more instances. And this

116
00:07:53,272 --> 00:07:57,346
is something that anecdotally I can kind of speak to just from doing hundreds

117
00:07:57,378 --> 00:08:00,806
of IRS and proactive assessments. This is

118
00:08:00,828 --> 00:08:04,022
a common finding we see across

119
00:08:04,156 --> 00:08:07,666
the different AWS environments that we see is

120
00:08:07,788 --> 00:08:11,626
this specific configuration is turned on.

121
00:08:11,808 --> 00:08:15,274
It's not turned off by default, it's turned on by

122
00:08:15,312 --> 00:08:18,780
default. Imds v one. And when you run a specific

123
00:08:19,970 --> 00:08:23,454
configuration within an EC two, for example,

124
00:08:23,572 --> 00:08:27,738
you'll see the HTTP token

125
00:08:27,914 --> 00:08:32,374
set to optional. We will talk about what happens when you set it to required

126
00:08:32,522 --> 00:08:35,874
and what it stops. One thing is

127
00:08:36,072 --> 00:08:40,014
this is not something new, right? The IMDSv one abuse

128
00:08:40,142 --> 00:08:43,970
that happened is not something new. This happened at Capital one breach,

129
00:08:44,630 --> 00:08:48,546
the very infamous Capital one breach that we are all well aware

130
00:08:48,578 --> 00:08:51,720
of. The threat actors utilized this

131
00:08:52,170 --> 00:08:55,282
attack in 2019 and by December or November,

132
00:08:55,346 --> 00:08:59,578
December time period, AWS in 2019 was able to create the

133
00:08:59,664 --> 00:09:02,902
version two. It's not turned off by default.

134
00:09:02,966 --> 00:09:06,570
So majority of organizations that we've seen still have this

135
00:09:06,640 --> 00:09:10,854
misconfiguration. One thing as I mentioned is

136
00:09:10,992 --> 00:09:15,146
as this instance metadata service is being utilized,

137
00:09:15,258 --> 00:09:18,974
there are things like a user data script you can load as

138
00:09:19,012 --> 00:09:22,826
you load an EC two instance similar to if you recall

139
00:09:22,858 --> 00:09:26,274
in your Windows days, right? There's a log on script that can allow for

140
00:09:26,312 --> 00:09:29,618
mapping of drives and a lot of times those

141
00:09:29,704 --> 00:09:33,406
user data scripts and what we've seen just through our various

142
00:09:33,438 --> 00:09:36,362
different IRS, they have clear text passwords.

143
00:09:36,446 --> 00:09:40,406
If you have a password and they're utilizing Powershell or

144
00:09:40,428 --> 00:09:43,686
Bash, you can see the password in clear text.

145
00:09:43,788 --> 00:09:47,382
So if a threat actor has the ability to query this

146
00:09:47,436 --> 00:09:51,162
from the outside, or have the ability to get access

147
00:09:51,216 --> 00:09:54,838
to the EC two instance, if they were to query the user data scripts

148
00:09:54,934 --> 00:09:59,050
within the instance metadata service, they'll be able to obtain those passwords.

149
00:10:00,110 --> 00:10:03,882
And once this problem of this misconfiguration

150
00:10:03,946 --> 00:10:08,842
gets really exacerbated, once you see a vulnerable

151
00:10:08,906 --> 00:10:11,870
application that has a SSRF,

152
00:10:13,890 --> 00:10:18,162
an SSRF vulnerability that will then take this misconfiguration and

153
00:10:18,216 --> 00:10:21,474
really expand it out even further because

154
00:10:21,512 --> 00:10:25,138
of the ability to query it from the outside. And Brandon will

155
00:10:25,144 --> 00:10:29,282
kind of talk about a little bit about what exactly we saw and how

156
00:10:29,336 --> 00:10:32,754
a threat actors was able to utilize this and be able to query

157
00:10:32,882 --> 00:10:36,422
and things from the outside without it being inside

158
00:10:36,476 --> 00:10:40,358
the actual instance. Because remember, this is a link local

159
00:10:40,524 --> 00:10:43,290
IP address, it's non routable.

160
00:10:43,710 --> 00:10:47,146
Only way that this can happen from the outside is through an

161
00:10:47,168 --> 00:10:48,890
SSRF vulnerability.

162
00:10:50,910 --> 00:10:54,414
And one thing we really wanted to discuss, and one of the reasons why once

163
00:10:54,452 --> 00:10:58,762
this came up, we went through the whole process and we realized

164
00:10:58,826 --> 00:11:02,778
that this may be, and we talked internally through threat intel.

165
00:11:02,874 --> 00:11:06,802
I talked to various contacts in other cloud security communities, and this

166
00:11:06,856 --> 00:11:10,354
may have been the first time we've seen a threat actors take

167
00:11:10,392 --> 00:11:13,710
a misconfiguration, specific misconfiguration,

168
00:11:13,870 --> 00:11:17,602
across an entire set of IP cider

169
00:11:17,666 --> 00:11:21,698
ranges against a cloud provider. So they had a misconfiguration,

170
00:11:21,794 --> 00:11:24,838
they knew they had an SSRF vulnerable application,

171
00:11:25,004 --> 00:11:28,694
and they essentially sprayed and prayed across a set.

172
00:11:28,732 --> 00:11:32,102
I think we have over 2100 ips. They were spraying

173
00:11:32,166 --> 00:11:35,846
this specific threat actor. And Brandon

174
00:11:35,878 --> 00:11:39,526
will talk a little bit more about what exactly we saw from a forensic standpoint

175
00:11:39,558 --> 00:11:41,520
and what exactly happened.

176
00:11:42,450 --> 00:11:47,018
Great, thanks Nader. Yeah, definitely. This is pretty unique

177
00:11:47,194 --> 00:11:50,362
in general across the board that we've seen a threat actors

178
00:11:50,426 --> 00:11:54,610
target really all IP ranges related to

179
00:11:54,680 --> 00:11:57,970
a hosted infrastructure, in particular to AWS.

180
00:11:58,470 --> 00:12:02,530
We've seen the threat actors as well scan other resources for other

181
00:12:02,680 --> 00:12:06,146
similar misconfigurations and other cloud hosted

182
00:12:06,178 --> 00:12:09,720
services. We'll definitely talk through some of those. But in particular,

183
00:12:11,050 --> 00:12:14,678
definitely cloud hosted services are a rather

184
00:12:14,764 --> 00:12:18,470
attractive target for similar threat actors.

185
00:12:18,550 --> 00:12:21,994
Just in general, because of the proliferation of

186
00:12:22,032 --> 00:12:25,386
cloud hosted resources and the available information,

187
00:12:25,488 --> 00:12:29,126
including things like configurations and other topology,

188
00:12:29,318 --> 00:12:32,766
and most predominantly in this particular case, credential information

189
00:12:32,948 --> 00:12:36,366
that was leveraged to further the attack that

190
00:12:36,388 --> 00:12:39,566
they were able to carry out. We will cover kind of a

191
00:12:39,588 --> 00:12:42,240
demo of what we saw in this particular case,

192
00:12:42,870 --> 00:12:46,338
but related to the actual infrastructure, this was especially

193
00:12:46,424 --> 00:12:49,842
challenging because the number and amount of log data that was actually

194
00:12:49,896 --> 00:12:54,100
recorded was rather minimal in comparison to

195
00:12:54,630 --> 00:12:58,022
other locally hosted platforms or things

196
00:12:58,076 --> 00:13:01,542
that in general would have

197
00:13:01,676 --> 00:13:04,840
more verbose logging out of the box.

198
00:13:05,770 --> 00:13:09,674
The other thing in particular we saw of UNC two

199
00:13:09,712 --> 00:13:13,622
nine three was obviously exploitation

200
00:13:13,686 --> 00:13:17,654
and targeting of other services and other applications

201
00:13:17,702 --> 00:13:21,594
that were hosted in the AWS IP address range

202
00:13:21,642 --> 00:13:25,118
space, and then further abuse of IMDSv one.

203
00:13:25,204 --> 00:13:28,654
And as Nader had mentioned, not only is this

204
00:13:28,692 --> 00:13:32,286
a misconfiguration, but the fact that it's on hosted infrastructure in

205
00:13:32,308 --> 00:13:36,034
the cloud makes it easy to identify external applications that

206
00:13:36,072 --> 00:13:39,826
if a CVE is released to obtain information to

207
00:13:39,848 --> 00:13:43,982
further an attack, or things like remote code execution

208
00:13:44,046 --> 00:13:47,602
to obtain temporary access keys and credentials.

209
00:13:47,746 --> 00:13:51,734
The other thing as well is in this particular case it was very

210
00:13:51,772 --> 00:13:55,586
limited to a single system that had been inadvertently

211
00:13:55,618 --> 00:13:57,480
open to the Internet. However,

212
00:13:58,430 --> 00:14:02,310
similarly with the roles that are assigned to VMS,

213
00:14:02,390 --> 00:14:06,170
sometimes there's just configurations which allow

214
00:14:06,320 --> 00:14:09,782
a role not only on one vm but multiple vms.

215
00:14:09,846 --> 00:14:13,514
So narrowing down where credential

216
00:14:13,562 --> 00:14:17,770
exposure might have occurred gets definitely more complicated

217
00:14:17,930 --> 00:14:21,834
as there are other access rules and keys that share the same permissions

218
00:14:21,882 --> 00:14:25,906
that might have access to a particular s

219
00:14:25,928 --> 00:14:29,780
three bucket or some other resource that has or is used to store data.

220
00:14:30,950 --> 00:14:34,610
And as I had said, activity expands over all

221
00:14:34,680 --> 00:14:38,194
industry verticals for a cloud hosting platform. So this isn't limited

222
00:14:38,242 --> 00:14:41,990
to just AWS, but there are existing and similar

223
00:14:42,060 --> 00:14:46,546
threats in AWS GCP

224
00:14:46,658 --> 00:14:50,300
as well as Azure that host similar metadata services.

225
00:14:50,750 --> 00:14:54,074
Yeah, and one thing to kind of note, and I think Brandon had mentioned

226
00:14:54,112 --> 00:14:57,786
this, we aren't specifically talking about the

227
00:14:57,888 --> 00:15:01,478
CVE, the vulnerability that the threat actors utilized,

228
00:15:01,574 --> 00:15:05,454
which they did utilize a vulnerability in SSR, vulnerability within an

229
00:15:05,492 --> 00:15:09,306
application, because we're trying to nip it at the bud

230
00:15:09,338 --> 00:15:12,446
where if we patch this one application,

231
00:15:12,548 --> 00:15:17,294
a new SSRF will come about. We're looking at specifically the misconfiguration

232
00:15:17,342 --> 00:15:21,154
of this metadata service and focusing on that because that is

233
00:15:21,192 --> 00:15:24,562
at the root of the problem where if you'll see during

234
00:15:24,616 --> 00:15:28,386
our talk, when we are going through the remediation

235
00:15:28,578 --> 00:15:32,354
methods, you will see us be able to remediate

236
00:15:32,402 --> 00:15:36,294
and turn on the IMDs version two and be able to stop

237
00:15:36,332 --> 00:15:40,262
this type of attack. So this is why our talk is really focusing

238
00:15:40,326 --> 00:15:43,510
mainly on the misconfiguration,

239
00:15:43,590 --> 00:15:46,326
the setting, as opposed to just a CVE,

240
00:15:46,438 --> 00:15:49,658
because this CVE is here today, another one's going

241
00:15:49,664 --> 00:15:52,894
to be here tomorrow, and really trying to focus on how to

242
00:15:52,932 --> 00:15:54,800
remediate this head on.

243
00:15:56,690 --> 00:16:00,782
And as we mentioned, we're going to focus a little bit on AWS, but across

244
00:16:00,916 --> 00:16:04,526
different platforms. Like Azure has its metadata

245
00:16:04,558 --> 00:16:09,198
service. Azure does it very well, specifically because they require

246
00:16:09,374 --> 00:16:13,362
the metadata service tag to be

247
00:16:13,496 --> 00:16:17,106
added during the packet. But also anytime they

248
00:16:17,128 --> 00:16:21,154
have something like an X forwarded four message, they will automatically

249
00:16:21,202 --> 00:16:25,062
reject it. The X forwarded four is really key because it will talk about

250
00:16:25,196 --> 00:16:28,694
if something is coming from a relay server or proxy,

251
00:16:28,822 --> 00:16:32,326
it will then automatically block it and it requires

252
00:16:32,358 --> 00:16:36,154
an Oauth token to be had in

253
00:16:36,192 --> 00:16:39,882
order for you to query the metadata service. But even

254
00:16:39,936 --> 00:16:43,358
then, there are some great articles around how you

255
00:16:43,364 --> 00:16:47,326
cloud use Azure managed identities as

256
00:16:47,348 --> 00:16:50,906
a way to abuse and proliferate.

257
00:16:50,938 --> 00:16:55,298
And there's some great articles from Carl and Marius around

258
00:16:55,464 --> 00:16:59,342
different ways of using Azure managed identities and being able to abuse

259
00:16:59,486 --> 00:17:04,194
Azure. Utilizing the metadata service with

260
00:17:04,232 --> 00:17:07,750
Google Cloud is similar. As I mentioned, they require

261
00:17:08,170 --> 00:17:11,686
a header, a metadata flavor. The header must

262
00:17:11,708 --> 00:17:15,378
have the metadata flavor. Google as well as they block

263
00:17:15,474 --> 00:17:19,226
exported four messages. So they do that same thing.

264
00:17:19,328 --> 00:17:23,050
But this wasn't always the case. The older versions,

265
00:17:23,630 --> 00:17:27,242
version zero one or v one beta one back

266
00:17:27,296 --> 00:17:31,034
maybe a few years back, that allowed and that didn't require that

267
00:17:31,072 --> 00:17:34,430
header to be there, which then allowed for, let's say a similar

268
00:17:34,500 --> 00:17:37,966
type of attack, an SSRF type attack to occur, but that is

269
00:17:37,988 --> 00:17:42,058
no longer supported. So now it's only a version one, which then blocks

270
00:17:42,074 --> 00:17:46,258
the capability. But even then, as I mentioned, there's ways you could

271
00:17:46,424 --> 00:17:50,130
query the metadata service once you do have access to

272
00:17:50,200 --> 00:17:53,634
the easy two instance to be able to get

273
00:17:53,672 --> 00:17:57,350
all the metadata, sometimes add SSH keys at the project

274
00:17:57,420 --> 00:18:00,774
level, which some of the articles that talked

275
00:18:00,812 --> 00:18:04,760
about this where Matiga recently did this, as well as

276
00:18:05,610 --> 00:18:09,080
Ancat, which is a great website for a lot of cloud

277
00:18:09,450 --> 00:18:13,414
pen testing, talks about this as well. How you could query

278
00:18:13,462 --> 00:18:17,162
the metadata, get your SSh keys and put it at the project level

279
00:18:17,216 --> 00:18:20,894
and not just at the instance level. The whole

280
00:18:20,932 --> 00:18:24,586
point is we want to show that this cloud metadata abuse can occur

281
00:18:24,698 --> 00:18:27,694
across cloud platforms. But this specific case,

282
00:18:27,812 --> 00:18:31,022
because of the header not

283
00:18:31,076 --> 00:18:34,834
requiring the exported four, allows for

284
00:18:34,872 --> 00:18:38,066
the proliferation and to make this as large

285
00:18:38,168 --> 00:18:39,620
of a scope as possible.

286
00:18:41,190 --> 00:18:44,750
One thing that was notable as well is how

287
00:18:44,920 --> 00:18:48,098
long similar metadata services existed.

288
00:18:48,194 --> 00:18:52,134
And I think Nader had given an example of

289
00:18:52,252 --> 00:18:55,874
even GCP has some available configurations

290
00:18:55,922 --> 00:18:59,786
for using metadata since back in 2017 and

291
00:18:59,808 --> 00:19:03,686
then some other people that have attempted to abuse

292
00:19:03,718 --> 00:19:07,434
that, even if it's in a testing form.

293
00:19:07,632 --> 00:19:11,230
Similarly, the other example Nader had given was

294
00:19:11,380 --> 00:19:14,942
the capital one event where there obviously

295
00:19:14,996 --> 00:19:19,546
was the usage of similar metadata services and abuse of related credentialing

296
00:19:19,658 --> 00:19:23,186
and then more recently in

297
00:19:23,208 --> 00:19:27,330
February of 2021, we had basically a

298
00:19:27,400 --> 00:19:30,946
database management software CVE that

299
00:19:30,968 --> 00:19:34,580
was originally announced. And then

300
00:19:35,050 --> 00:19:38,466
for this particular version of the database software

301
00:19:38,578 --> 00:19:43,958
called Adminer, it allowed basically the

302
00:19:44,044 --> 00:19:47,030
usage of a server side request forgery,

303
00:19:47,470 --> 00:19:51,110
which then the threat actors kind of chained that for usage.

304
00:19:51,190 --> 00:19:54,778
And with the understanding of the metadata services

305
00:19:54,864 --> 00:19:58,570
existing in AWS cloud, they were able to

306
00:19:58,640 --> 00:20:02,202
obtain a proof of concept code which was subsequently

307
00:20:02,266 --> 00:20:05,626
released, and then the proof

308
00:20:05,658 --> 00:20:10,426
of concept. Essentially we have circumstantial

309
00:20:10,458 --> 00:20:14,082
evidence that that proof of concept was utilized to then perform

310
00:20:14,136 --> 00:20:18,180
this particular attack that also was available pretty quickly

311
00:20:19,350 --> 00:20:23,154
using various open source and Google searches is

312
00:20:23,192 --> 00:20:26,566
easy enough to find the CVE and then abuse that

313
00:20:26,588 --> 00:20:30,358
across the platform. Within three months,

314
00:20:30,444 --> 00:20:34,038
we saw basically the usage of this

315
00:20:34,124 --> 00:20:37,706
particular CVE along with the proof of concept, which will give you

316
00:20:37,728 --> 00:20:41,366
a demo to automate the identification

317
00:20:41,478 --> 00:20:45,274
of vulnerable versions of the admin or software on the web

318
00:20:45,312 --> 00:20:48,822
platform itself. We saw then subsequently

319
00:20:48,886 --> 00:20:54,666
the retrieval of the EC

320
00:20:54,698 --> 00:20:58,430
two instance roles, and then

321
00:20:58,580 --> 00:21:02,506
the acquisition of the credential to subsequently

322
00:21:02,538 --> 00:21:05,874
use in the attack. From there they

323
00:21:05,912 --> 00:21:09,218
utilize the key credential to log into the

324
00:21:09,224 --> 00:21:13,250
AWS command line, conduct reconnaissance of the available

325
00:21:13,320 --> 00:21:17,142
data in the s three bucket that the keys had credentials with, and then

326
00:21:17,196 --> 00:21:20,290
perform data theft from the available bucket.

327
00:21:20,450 --> 00:21:23,640
The thing that's interesting with that as well is

328
00:21:24,330 --> 00:21:28,738
once they obtained the keys and the temporary access credentials,

329
00:21:28,914 --> 00:21:32,858
that was when some of the alerting went off, which we'll talk to that in

330
00:21:32,864 --> 00:21:36,566
a later slide. But in general, the threat

331
00:21:36,598 --> 00:21:40,134
actors in this particular case, not only from the

332
00:21:40,192 --> 00:21:43,610
initial release of the proof of concept,

333
00:21:43,690 --> 00:21:47,370
but even on the date of June,

334
00:21:47,450 --> 00:21:51,070
we saw the reconnaissance and then data theft, I believe within

335
00:21:51,140 --> 00:21:54,770
3 hours of the attack itself. So moving rather

336
00:21:54,840 --> 00:21:58,514
quickly. Yeah, so that's a great point where as soon

337
00:21:58,552 --> 00:22:02,178
as they were able to obtain credentials, we saw them right in the

338
00:22:02,184 --> 00:22:05,714
environment fairly quickly. And another thing I think to mention,

339
00:22:05,752 --> 00:22:09,218
as I mentioned a few times, is this is one CVE

340
00:22:09,314 --> 00:22:13,014
that was created, the POC was out there. And that's one

341
00:22:13,052 --> 00:22:17,074
thing is it's only so much you could be ahead of on vulnerabilities.

342
00:22:17,202 --> 00:22:20,634
I have just a little story where a

343
00:22:20,672 --> 00:22:23,782
vulnerability was disclosed October

344
00:22:23,846 --> 00:22:27,254
21. Seven days later, a POC,

345
00:22:27,302 --> 00:22:31,062
a proof of concept, came out on the Internet, the 27th.

346
00:22:31,206 --> 00:22:34,426
By the 20 eigth, that client that we were doing,

347
00:22:34,448 --> 00:22:37,082
the IR, was breached with that same proof of concept.

348
00:22:37,226 --> 00:22:40,314
So it's only so much you can be ahead of these vulnerabilities.

349
00:22:40,362 --> 00:22:43,934
This is why we really want to focus on the configurations and settings and

350
00:22:43,972 --> 00:22:47,742
one thing. I will say just from a suggestion, when you are doing your vulnerability

351
00:22:47,806 --> 00:22:51,074
scanning, you're seeing just a lot of vulnerabilities that

352
00:22:51,112 --> 00:22:54,466
come out based off of whatever nessus scan or

353
00:22:54,488 --> 00:22:57,570
other vulnerability scanning software that you're utilizing.

354
00:22:58,070 --> 00:23:01,782
One thing to help prioritize it is if a POC is out there,

355
00:23:01,916 --> 00:23:05,638
if a proof of concept has been published, that is something you want

356
00:23:05,644 --> 00:23:09,046
to definitely get ahead of and try to patch that right away. And you'll

357
00:23:09,078 --> 00:23:12,474
notice as well, Cisa doesn't always

358
00:23:12,512 --> 00:23:15,830
publish bulletins for every vulnerability

359
00:23:15,910 --> 00:23:19,018
out there. But once you see a proof of concept that's out there, that is

360
00:23:19,024 --> 00:23:22,654
something that's Internet accessible, you'll see a bulletin come out right away

361
00:23:22,772 --> 00:23:26,746
for that. So just trying to help with staying

362
00:23:26,778 --> 00:23:30,062
on top of your threat and vulnerability management is trying to figure

363
00:23:30,116 --> 00:23:33,486
out if those are out there. That is any script

364
00:23:33,518 --> 00:23:37,186
kitty who can get on a GitHub and utilize which we have

365
00:23:37,208 --> 00:23:41,070
some circumstantial evidence that the POC that was utilized

366
00:23:41,150 --> 00:23:46,326
was the same one that was found in

367
00:23:46,348 --> 00:23:49,622
this particular case. The way that the demo is going to work

368
00:23:49,676 --> 00:23:53,510
is very similar to what we believe the threat actors had performed

369
00:23:54,890 --> 00:23:58,458
prior to this stage leading up to what we're going

370
00:23:58,464 --> 00:24:02,742
to show in the demo. Basically, we saw the threat actors scan

371
00:24:02,886 --> 00:24:06,726
the web application and then subsequently

372
00:24:06,758 --> 00:24:10,586
perform the attack. The fact that the infrastructure was

373
00:24:10,608 --> 00:24:13,934
hosted in AWS obviously is one of the key

374
00:24:13,972 --> 00:24:17,646
factors in this particular case. But in

375
00:24:17,668 --> 00:24:20,906
general, across our client base, once we were able to obtain some of the IP

376
00:24:20,938 --> 00:24:24,670
addresses that we identified as related to the threat actors activity,

377
00:24:25,030 --> 00:24:28,574
we saw that there were other similar characteristics

378
00:24:28,622 --> 00:24:33,218
where our threat intelligence team was able to match on, I believe on 2100

379
00:24:33,304 --> 00:24:36,934
IP addresses that had scanned for similar vulnerabilities around

380
00:24:36,972 --> 00:24:40,790
the same time. So kind of an interesting tidbit of information there.

381
00:24:40,940 --> 00:24:44,146
But the way that the attack works is somewhat

382
00:24:44,178 --> 00:24:47,922
counterintuitive from an investigative standpoint mainly as well,

383
00:24:48,076 --> 00:24:51,862
because there is not really command and control traffic,

384
00:24:51,926 --> 00:24:55,462
but there's an operational relay box which is essentially

385
00:24:55,526 --> 00:24:57,820
the attacker's command and control system.

386
00:24:58,430 --> 00:25:01,770
The proof of concept code that was released.

387
00:25:02,270 --> 00:25:06,414
What they ended up doing was running that on their local system and

388
00:25:06,452 --> 00:25:09,502
then navigating to the vulnerable admin or page.

389
00:25:09,556 --> 00:25:12,974
We'll show you the demo of this in a couple of seconds here. But once

390
00:25:13,012 --> 00:25:16,194
they navigated to the admin or page and had the code running on their own

391
00:25:16,232 --> 00:25:18,850
box, they typed in the IP address import,

392
00:25:19,000 --> 00:25:22,366
subsequently returned the credentials there shown

393
00:25:22,398 --> 00:25:25,700
in step three. Once they had the credentials themselves,

394
00:25:26,150 --> 00:25:30,598
they basically no longer needed the infrastructure hosted on their command and control

395
00:25:30,764 --> 00:25:34,626
operational relay box, and they also didn't

396
00:25:34,658 --> 00:25:38,070
need access to the front end of the application anymore. They were able to log

397
00:25:38,140 --> 00:25:41,258
in, utilize the keys, and then exfiltrate the

398
00:25:41,264 --> 00:25:44,554
data from the s three bucket itself. So pretty quick

399
00:25:44,592 --> 00:25:47,846
attack, and I believe in the upcoming slide,

400
00:25:47,878 --> 00:25:51,514
we have a quick demo. Yes. So we're going to do the demo with,

401
00:25:51,552 --> 00:25:55,854
of course, IMD's v one enabled. So we're going to walk through this demo

402
00:25:56,052 --> 00:25:59,534
with the infrastructure in place that kind of mirrors what we saw the

403
00:25:59,572 --> 00:26:03,166
attacker utilize. And you'll see very quickly, as mentioned with

404
00:26:03,188 --> 00:26:06,526
the admin or tool, all they needed was an IP

405
00:26:06,558 --> 00:26:10,098
address and a port, and they didn't need a

406
00:26:10,104 --> 00:26:14,290
username, didn't need a password. And you'll see access keys and secret access

407
00:26:14,360 --> 00:26:18,406
keys to that Ec two instance. And so

408
00:26:18,428 --> 00:26:22,006
what you'll see is the script that we're going

409
00:26:22,028 --> 00:26:25,602
to run includes a parameter for the port as well as the URI

410
00:26:25,666 --> 00:26:27,400
for the metadata service itself.

411
00:26:28,170 --> 00:26:31,466
Subsequently, we change the IP address to our

412
00:26:31,488 --> 00:26:34,890
attacker's operational relay box, which is the local system in this particular

413
00:26:34,960 --> 00:26:38,950
case, appended by the port, we change the setting for elasticsearch,

414
00:26:39,030 --> 00:26:42,078
hit the login button, and then the credentials are returned to the screen.

415
00:26:42,164 --> 00:26:45,562
So a very simple attack in theory,

416
00:26:45,626 --> 00:26:49,278
but from an investigative standpoint, it's very challenging to

417
00:26:49,364 --> 00:26:52,410
acquire actual relevant data that records

418
00:26:52,490 --> 00:26:56,354
the actual happening of this. So in general, I have some

419
00:26:56,392 --> 00:27:00,146
commands there to pipe in what the keys and tokens are and

420
00:27:00,168 --> 00:27:03,666
then perform the actual reconnaissance for the buckets and

421
00:27:03,688 --> 00:27:07,358
then download the content. But that's really at

422
00:27:07,384 --> 00:27:10,680
a high level. What it includes you'll see on the web server as well.

423
00:27:11,370 --> 00:27:15,510
The system itself that you type in the IP address.

424
00:27:15,660 --> 00:27:18,774
The Amazon Web services is appended by the admin again

425
00:27:18,812 --> 00:27:22,486
within the vulnerable version, reaching back out as a result of the server

426
00:27:22,518 --> 00:27:26,902
side request forgery back to the command and control operational

427
00:27:27,046 --> 00:27:30,630
relay box hosting the script itself. So in general,

428
00:27:30,720 --> 00:27:34,234
once you obtain the IAM role, it includes

429
00:27:34,282 --> 00:27:37,406
the key and credential information. You can change some of

430
00:27:37,428 --> 00:27:41,246
the settings to actually obtain all of the list of available

431
00:27:41,348 --> 00:27:45,282
roles and then subsequently utilize that

432
00:27:45,336 --> 00:27:49,266
for the attack itself. And so

433
00:27:49,288 --> 00:27:53,106
now that we know what happened with IMD's V one,

434
00:27:53,288 --> 00:27:56,502
as I mentioned, Amazon came

435
00:27:56,556 --> 00:27:59,826
out with IMDs version two back in November

436
00:27:59,858 --> 00:28:03,078
of 2019 and went to

437
00:28:03,084 --> 00:28:06,822
the reinvent and they went live. But we,

438
00:28:06,876 --> 00:28:10,246
as we just saw from that data, as well as just anecdotally,

439
00:28:10,358 --> 00:28:12,970
we see this in almost every environment.

440
00:28:13,390 --> 00:28:17,222
So what is different with IMD's version two than version

441
00:28:17,286 --> 00:28:21,110
one? Version two, it's now a session based protocol,

442
00:28:21,190 --> 00:28:24,542
a session based model where you have, instead of starting

443
00:28:24,596 --> 00:28:28,154
with the get request, you put a put request to obtain a token,

444
00:28:28,282 --> 00:28:32,366
and then from that token you could then start querying the

445
00:28:32,548 --> 00:28:35,902
metadata service. If it was coming from a relay box

446
00:28:36,036 --> 00:28:39,374
it would fail because it requires that X forwarded

447
00:28:39,422 --> 00:28:42,626
four to not be there. If it sees a packet with an

448
00:28:42,648 --> 00:28:45,654
X forwarded four there, it will block it.

449
00:28:45,692 --> 00:28:49,266
And it does require the attribute and the header

450
00:28:49,298 --> 00:28:53,062
to have metadata service. They've also added cloud

451
00:28:53,116 --> 00:28:56,882
watch metrics. So if the metadata service is being utilized

452
00:28:57,026 --> 00:29:00,378
and version one, you'll be able to get that. And I'll talk a little

453
00:29:00,384 --> 00:29:04,106
bit about the different detection techniques internally of

454
00:29:04,128 --> 00:29:08,134
how you can be able to see it, as well as some open source

455
00:29:08,182 --> 00:29:12,270
tools to just verify if you have an organization that runs AWS.

456
00:29:12,610 --> 00:29:16,334
One thing to do today or Monday is to

457
00:29:16,532 --> 00:29:19,790
check out your AwS EC two instances.

458
00:29:21,890 --> 00:29:25,534
Some of the native services that you could utilize. There's a native

459
00:29:25,582 --> 00:29:29,202
services as AWS security hub. They have its own

460
00:29:29,336 --> 00:29:33,090
detection now that allows you to see if

461
00:29:33,240 --> 00:29:37,074
an EC two instance has an IMDS version one

462
00:29:37,112 --> 00:29:40,278
enabled. There's specific cloud watch metrics. As I mentioned,

463
00:29:40,364 --> 00:29:43,814
if IMDs version one is enabled on an EC two instance or is being

464
00:29:43,852 --> 00:29:47,250
utilized, they'll be able to do that as well as a config rule.

465
00:29:47,330 --> 00:29:50,710
You can utilize a config rule to be able to do remediation.

466
00:29:50,870 --> 00:29:54,138
There's open source tools out there. So I am one, I'm a

467
00:29:54,144 --> 00:29:58,106
big proponent especially of the security community to not

468
00:29:58,128 --> 00:30:02,074
only utilize native services, but if you need to utilize open source

469
00:30:02,122 --> 00:30:05,614
tools, get great open source tools and reputable open

470
00:30:05,652 --> 00:30:09,086
source tools like Prowler or Metabadger, which is

471
00:30:09,108 --> 00:30:12,898
a tool just dedicated to be able to

472
00:30:12,984 --> 00:30:16,814
remediate and take away and discover and remediate

473
00:30:16,862 --> 00:30:20,482
imds version one. Vulnerable systems there.

474
00:30:20,616 --> 00:30:24,786
And of course there's cloud mapper made by

475
00:30:24,808 --> 00:30:28,890
a great kind of cloud security guys and some of our cloud security personnel.

476
00:30:28,990 --> 00:30:32,386
And there's always ways to discover just purely through the AWS command

477
00:30:32,418 --> 00:30:35,586
line interface, you could utilize it and be able to query.

478
00:30:35,698 --> 00:30:39,094
And when you're going through the query of a describe EC two

479
00:30:39,132 --> 00:30:42,278
describe instance, you'll be able to see where we're

480
00:30:42,294 --> 00:30:45,946
going to talk about in a little bit. Was the HTTP token being

481
00:30:46,048 --> 00:30:50,090
set to optional in the beginning? And once we set it to required,

482
00:30:50,530 --> 00:30:53,600
you will see the difference in the oats comes out.

483
00:30:55,010 --> 00:30:57,310
So a little bit about the detection.

484
00:30:58,370 --> 00:31:01,854
So in general, this particular type of

485
00:31:01,892 --> 00:31:05,442
attack is pretty challenging to investigate, although as

486
00:31:05,496 --> 00:31:09,380
quick as we were able to demonstrate the actual event.

487
00:31:10,070 --> 00:31:13,854
It really doesn't have too many logs that were generated

488
00:31:13,982 --> 00:31:16,950
in a couple of events that we've had that were similar.

489
00:31:17,100 --> 00:31:20,854
The main thing that we had to kind of key us on as to whether

490
00:31:20,892 --> 00:31:25,000
or not exfiltration had occurred of either the credential itself

491
00:31:25,450 --> 00:31:29,074
or the bucket itself are related to guard

492
00:31:29,122 --> 00:31:32,242
duty, which in some of our testing

493
00:31:32,306 --> 00:31:35,478
we found that either the data has already been taken and there's

494
00:31:35,494 --> 00:31:39,078
been an alert, or the key itself, the credential

495
00:31:39,174 --> 00:31:42,640
from the role basically has been taken.

496
00:31:43,170 --> 00:31:46,714
You'll see that there's really two primary alerts for the credential

497
00:31:46,762 --> 00:31:50,250
theft itself. One is the instance credential exfiltration

498
00:31:50,330 --> 00:31:54,322
and then instance credential exfiltration outside, either inside

499
00:31:54,376 --> 00:31:57,620
or outside of the AWS environment itself.

500
00:31:58,310 --> 00:32:02,450
In particular, it is incredibly challenging to

501
00:32:02,520 --> 00:32:05,670
figure out in some cases what the alert means because

502
00:32:05,740 --> 00:32:09,894
the metadata services themselves, at least for AWS, is rather

503
00:32:10,012 --> 00:32:13,320
sparse and limited. The reason being,

504
00:32:15,210 --> 00:32:18,662
I guess in general is some logging which shows the usage

505
00:32:18,726 --> 00:32:22,394
subsequently of the credential maliciously. But in

506
00:32:22,432 --> 00:32:26,186
general the instance metadata service, because of the way that

507
00:32:26,288 --> 00:32:30,086
it uses the link local address, the actual, there's not

508
00:32:30,128 --> 00:32:33,626
like an HTTP log which records illegitimate

509
00:32:33,818 --> 00:32:37,434
or even legitimate requests for the tokens

510
00:32:37,482 --> 00:32:40,766
themselves. So because of the

511
00:32:40,788 --> 00:32:44,286
server side request forgery and the system querying the metadata

512
00:32:44,318 --> 00:32:46,500
service as if it were a local system,

513
00:32:47,270 --> 00:32:50,546
there's limited data that's recorded by the

514
00:32:50,568 --> 00:32:53,874
actual metadata service. And I don't believe there's anything that

515
00:32:54,072 --> 00:32:57,394
really can increase the verbosity of the logging

516
00:32:57,442 --> 00:33:00,758
for the metadata piece itself.

517
00:33:00,924 --> 00:33:04,834
The other thing that was challenging was the available VPC

518
00:33:04,882 --> 00:33:08,418
flow logs. What we had seen was once the threat

519
00:33:08,434 --> 00:33:11,786
actors performed this particular attack, we saw kind of

520
00:33:11,808 --> 00:33:15,974
an anomaly in the network traffic where we saw the web request which looked failed.

521
00:33:16,022 --> 00:33:20,050
And I'll explain that in a couple of seconds. But from the failure

522
00:33:20,150 --> 00:33:24,346
in the web log itself, we saw traffic outbound

523
00:33:24,458 --> 00:33:28,634
from the EC two instance, which was an anomaly

524
00:33:28,682 --> 00:33:32,190
because we were like why is the EC two instance reaching out

525
00:33:32,340 --> 00:33:35,710
to the Internet? So in the logs

526
00:33:35,790 --> 00:33:39,810
we ended up seeing 302 redirect and a 403

527
00:33:39,880 --> 00:33:43,506
error message. That as an investigator kind

528
00:33:43,528 --> 00:33:46,982
of threw us off as to why the application was erroring out

529
00:33:47,036 --> 00:33:49,430
because you would assume that would be a failure,

530
00:33:50,170 --> 00:33:53,494
but the failures were relevant. Matching that up from

531
00:33:53,532 --> 00:33:57,206
a timeline perspective with the VPC flow logs because we were able

532
00:33:57,228 --> 00:34:00,780
to see the outbound traffic which

533
00:34:01,390 --> 00:34:05,370
we were able to make some conclusions based on the web request itself

534
00:34:05,440 --> 00:34:08,666
which included an unknown IP address and a port number,

535
00:34:08,768 --> 00:34:13,230
plus the VPC flow logs outbound that there was something else going on

536
00:34:13,380 --> 00:34:17,034
from a vulnerability standpoint. And then subsequently

537
00:34:17,082 --> 00:34:21,050
the timing aligned very well with the object level access logs

538
00:34:21,130 --> 00:34:24,850
and data events where we could see the copying of the data

539
00:34:25,000 --> 00:34:28,530
using the AWS command line in subsequent actions.

540
00:34:30,070 --> 00:34:33,186
And I think one thing to mention, I think Brandon had talked about this is

541
00:34:33,208 --> 00:34:37,058
there's a delay that happens from the time of exfiltration

542
00:34:37,154 --> 00:34:40,982
before the alert. We're using demo size time

543
00:34:41,036 --> 00:34:44,182
of small type of data exfiltration but

544
00:34:44,316 --> 00:34:48,266
there is just a delay in general. And also it's an

545
00:34:48,288 --> 00:34:52,010
alert, right? It's not a prevention. And actually just came out

546
00:34:52,080 --> 00:34:54,934
yesterday is if you utilize AWS,

547
00:34:54,982 --> 00:34:58,806
detective, it now can group your guard

548
00:34:58,838 --> 00:35:02,266
duty alerts and your VPC flow logs that just came out last night.

549
00:35:02,288 --> 00:35:05,546
I think I just tweeted about that. I'm not just trying to drop my twitter.

550
00:35:05,658 --> 00:35:09,662
I was for real. It did just come out last night where you can now

551
00:35:09,796 --> 00:35:13,634
group your guard duty alerts with your VPC flow logs and

552
00:35:13,672 --> 00:35:17,694
stack them up for easier triaging. And that just came out with detective

553
00:35:17,742 --> 00:35:21,586
last night. So there's strides that are happening from

554
00:35:21,608 --> 00:35:25,220
the AWS standpoint. But one thing is,

555
00:35:26,010 --> 00:35:29,574
okay, we've discovered it, we've detected it, how can we

556
00:35:29,612 --> 00:35:33,110
remediate it? There's a few ways to remediate.

557
00:35:34,010 --> 00:35:37,206
Do you even need this instance metadata service?

558
00:35:37,388 --> 00:35:41,206
There's many times and majority of the time you don't

559
00:35:41,238 --> 00:35:45,450
need the instance metadata service unless your application or

560
00:35:45,520 --> 00:35:49,194
your team needs it for a specific reason. From getting

561
00:35:49,232 --> 00:35:52,554
the IP address, the availability zone,

562
00:35:52,602 --> 00:35:56,874
the subnet, you can disable that entire instance

563
00:35:56,922 --> 00:36:00,378
metadata service at once. As you're

564
00:36:00,394 --> 00:36:03,170
going through the EC two metadata option,

565
00:36:03,320 --> 00:36:06,318
you put an HTTP endpoint,

566
00:36:06,494 --> 00:36:09,934
put false or disabled and you'll be able to block

567
00:36:09,982 --> 00:36:13,506
the ability for even anyone to utilize that if

568
00:36:13,528 --> 00:36:16,786
it's needed. Right? So you talk to your team, they've said no, we need

569
00:36:16,808 --> 00:36:20,614
this because we can do X, Y and Z. You can then require who

570
00:36:20,652 --> 00:36:24,038
can utilize it. You can put it at the IP table where you

571
00:36:24,044 --> 00:36:28,386
can say only Bob can query this specific IP

572
00:36:28,418 --> 00:36:32,186
address and you

573
00:36:32,208 --> 00:36:36,214
can block it like that. And you can also just utilize

574
00:36:36,342 --> 00:36:39,626
open source tools. If you've talked to your team and realize we don't really need

575
00:36:39,648 --> 00:36:42,902
this at all, let's just go through the entire list,

576
00:36:42,976 --> 00:36:46,334
litany of lists. There's ways that utilize this from open

577
00:36:46,372 --> 00:36:49,946
source tools. Metabadger is another one I talked about already. Open source

578
00:36:49,978 --> 00:36:53,534
tool that goes through all your instances, discovers them. If they

579
00:36:53,572 --> 00:36:58,046
are, you can remediate them in a single stroke. So now we've remediated

580
00:36:58,078 --> 00:37:01,666
it, how can we prevent it from happening again? So we

581
00:37:01,688 --> 00:37:05,578
want to make sure after we're done remediating, I don't want to talk about IMDs

582
00:37:05,614 --> 00:37:09,782
v one again because it's just not something I, as an

583
00:37:09,916 --> 00:37:13,206
information security officer, want to consistently worry about.

584
00:37:13,388 --> 00:37:17,454
You can do it in many different ways. There's SCP

585
00:37:17,522 --> 00:37:21,226
service control policies where you can say only those

586
00:37:21,328 --> 00:37:24,906
that have EC two instances that are version two

587
00:37:25,088 --> 00:37:28,266
can query can be in our

588
00:37:28,288 --> 00:37:32,174
environment. So you can only limit your environment to EC two

589
00:37:32,212 --> 00:37:34,720
version, IMds version two.

590
00:37:36,050 --> 00:37:39,194
So if you were to create an EC two instance with version

591
00:37:39,242 --> 00:37:42,090
one and not putting the disabled,

592
00:37:42,250 --> 00:37:46,190
not putting the disabled function, it will

593
00:37:46,260 --> 00:37:49,406
not allow you to create that EC two instance. There's infrastructure

594
00:37:49,438 --> 00:37:52,786
as code methodologies, right? If you are not doing it through the

595
00:37:52,808 --> 00:37:55,874
console, and the true method we want to do is

596
00:37:55,912 --> 00:37:59,974
always push infrastructure as code. We don't want to have a lot of people having

597
00:38:00,012 --> 00:38:03,938
their hands in the cookie jar in terms of being able to make modifications

598
00:38:04,034 --> 00:38:07,762
to your environment. You utilize infrastructure as code, cloud formation,

599
00:38:07,826 --> 00:38:11,186
terraform, there's terraform techniques and cloud formation techniques

600
00:38:11,218 --> 00:38:14,518
to be able to block it. And then you could utilize in local IAM police,

601
00:38:14,534 --> 00:38:18,454
if you have one AWS account, not using AWS organizations,

602
00:38:18,582 --> 00:38:21,886
you don't want to use scps. You could utilize it where you can

603
00:38:21,908 --> 00:38:25,738
block the ability from users launching any EC two instance

604
00:38:25,834 --> 00:38:32,174
that does not have version two required and

605
00:38:32,212 --> 00:38:35,746
some additional prevention techniques. So let's say you have to have it. We have to

606
00:38:35,768 --> 00:38:39,298
have Bob who has the ability to query it.

607
00:38:39,464 --> 00:38:43,646
There's ways that you want to still harden it. As I mentioned, user data scripts,

608
00:38:43,678 --> 00:38:47,106
that launching script that happens initially when an EC two instance

609
00:38:47,138 --> 00:38:50,578
is created and launched,

610
00:38:50,674 --> 00:38:54,562
there's a user data script. You want to make sure you're going through those scripts

611
00:38:54,626 --> 00:38:58,258
and ensuring there's no clear text passwords, there's open source tools

612
00:38:58,274 --> 00:39:01,740
that can catch it, like Scout suite that can catch that for you.

613
00:39:02,750 --> 00:39:05,686
You want to limit the number of HTTP hops,

614
00:39:05,878 --> 00:39:09,498
so it's not going through a relay server. You can limit it to one.

615
00:39:09,664 --> 00:39:12,778
You can go from one all the way to 64, but you

616
00:39:12,784 --> 00:39:15,374
can say, I only want it to go through one hop, so it's not going

617
00:39:15,412 --> 00:39:19,226
through, let's say a relay server that may have caused

618
00:39:19,258 --> 00:39:22,814
this to happen. And you can limit who can

619
00:39:22,852 --> 00:39:26,194
utilize it, as I mentioned, just through an IM policy.

620
00:39:26,312 --> 00:39:31,086
And then also who can modify the IMDs

621
00:39:31,118 --> 00:39:34,740
version one and two. You could do that at the IAM level as well.

622
00:39:36,710 --> 00:39:40,246
So demo number two, we're going to see, we turned it

623
00:39:40,268 --> 00:39:43,794
on, we did some magic in the back, we turned it on. Now version

624
00:39:43,842 --> 00:39:47,754
two is enabled and Brandon's going to walk through what happens after

625
00:39:47,792 --> 00:39:51,558
that. So very similarly,

626
00:39:51,734 --> 00:39:55,322
running the command to include the port number as

627
00:39:55,376 --> 00:39:58,746
well as the metadata service itself on the

628
00:39:58,768 --> 00:40:02,430
operational relay box. Once that

629
00:40:02,500 --> 00:40:06,606
runs, it's operational on the actual system itself,

630
00:40:06,788 --> 00:40:10,334
change the setting to elasticsearch and then change the

631
00:40:10,372 --> 00:40:15,314
source import ip address. And basically

632
00:40:15,432 --> 00:40:18,820
it errors out instead of returns the credentials to the screen.

633
00:40:19,190 --> 00:40:22,802
That's because the put request, there's two pieces obviously

634
00:40:22,856 --> 00:40:26,886
once IMDs V two has to be enabled. One is the put request to

635
00:40:26,908 --> 00:40:30,614
basically authorize the request and then an additional request to obtain the

636
00:40:30,652 --> 00:40:34,326
credentials themselves. And in

637
00:40:34,348 --> 00:40:37,446
general, this is kind of the mitigation, at least if

638
00:40:37,468 --> 00:40:41,574
there are Internet facing systems or similar infrastructure

639
00:40:41,622 --> 00:40:45,174
set up in AWS, at least one way to remediate

640
00:40:45,302 --> 00:40:48,586
the overall event. Awesome.

641
00:40:48,688 --> 00:40:52,650
So as you can see, it's unauthorized. For one unauthorized attempt,

642
00:40:53,150 --> 00:40:56,286
as Brandon mentioned, it requires a put request to get the session token to

643
00:40:56,308 --> 00:40:59,246
then be able to query. Because this doesn't have that,

644
00:40:59,268 --> 00:41:03,086
it's a relay box, it doesn't truly have access internally to the

645
00:41:03,188 --> 00:41:05,914
easy to instance. We aren't able to get that.

646
00:41:05,972 --> 00:41:09,682
So really action item for everyone at the end of this session is

647
00:41:09,816 --> 00:41:13,218
go to your teams. If you have an AWS instance, if you

648
00:41:13,224 --> 00:41:16,866
have AWS in your environment, ensure and say do we have

649
00:41:16,888 --> 00:41:20,102
any IMDs version one enabled? I don't know.

650
00:41:20,156 --> 00:41:23,526
Then here's a few things. And actually it goes straight into our

651
00:41:23,548 --> 00:41:26,966
next slide. We actually put out a blog a few months back with

652
00:41:26,988 --> 00:41:30,582
the help of some others within our team and threat intel,

653
00:41:30,726 --> 00:41:34,634
where we walk through the entire process of the threat actors, but also

654
00:41:34,752 --> 00:41:38,454
the specific mitigations. It's about ten plus pages

655
00:41:38,502 --> 00:41:42,778
of detection techniques, prevention mitigations

656
00:41:42,954 --> 00:41:46,778
and remediate techniques. So go to your teams.

657
00:41:46,874 --> 00:41:50,286
Say if we have IMDSv one enabled, I want to know how many do

658
00:41:50,308 --> 00:41:53,474
we have and do we need it or not? And be able

659
00:41:53,512 --> 00:41:57,042
to remediate that as soon as possible. And that

660
00:41:57,096 --> 00:41:59,540
concludes our session. If there's any questions.

661
00:42:02,870 --> 00:42:06,454
I guess one more closing thought is as

662
00:42:06,492 --> 00:42:10,706
well, depending on the actual vulnerability

663
00:42:10,818 --> 00:42:14,530
scanner or anything like that, there's obviously not a vulnerability,

664
00:42:14,610 --> 00:42:17,894
it's a misconfiguration, which is one of the key pieces I think we're trying

665
00:42:17,932 --> 00:42:21,114
to get the teams to take away with them in

666
00:42:21,152 --> 00:42:24,806
that there might be something that is low priority

667
00:42:24,838 --> 00:42:28,202
or low risk if it's an internal system or might not

668
00:42:28,256 --> 00:42:31,886
necessarily have Internet accessibility, but that paired with the fact that there was

669
00:42:31,908 --> 00:42:35,454
a vulnerability on this server makes this

670
00:42:35,572 --> 00:42:38,926
a little bit more of a challenge to not only respond to,

671
00:42:39,108 --> 00:42:42,574
but to figure out how to remediate and make

672
00:42:42,692 --> 00:42:46,082
the system hardened and more secure because the attack

673
00:42:46,136 --> 00:42:49,006
itself is rather simple and was carried out rather rapidly.

674
00:42:49,118 --> 00:42:52,818
And unfortunately there's a couple of clients that ended up in

675
00:42:52,824 --> 00:42:56,210
a similar boat where it was too late when there was an identification

676
00:42:57,110 --> 00:43:00,374
after the exfiltration had occurred. Yes, that's a great

677
00:43:00,412 --> 00:43:03,446
point. A vulnerability scanner will not catch this.

678
00:43:03,628 --> 00:43:06,918
This is where you need to expand your vulnerability scanners to have something like an

679
00:43:06,924 --> 00:43:11,350
attack service management where it can catch things that are major misconfigurations

680
00:43:11,430 --> 00:43:15,114
that they see from the outside. To be able to catch something like

681
00:43:15,152 --> 00:43:18,794
an ASM that could be able to catch these misconfigurations and

682
00:43:18,832 --> 00:43:22,206
be able to notify the team that you do have

683
00:43:22,228 --> 00:43:26,400
EC. Two instances that have version one enabled. Great point,

684
00:43:27,170 --> 00:43:30,782
Robert. All right, thank you guys.

685
00:43:30,916 --> 00:43:35,210
That was great. If you guys have any questions for Brandon

686
00:43:35,290 --> 00:43:38,878
or Nader, they will be outside those doors to

687
00:43:38,964 --> 00:43:42,286
my right, your left in about 5 minutes and they'll be

688
00:43:42,308 --> 00:43:44,830
there for about ten or 15 minutes. If you want to chat,

689
00:43:45,450 --> 00:43:49,094
we'll be back here at 245, I believe so, in about

690
00:43:49,132 --> 00:43:53,586
15 minutes. Give it up again for Brandon Nader.

691
00:43:53,778 --> 00:43:54,760
Thank you.

