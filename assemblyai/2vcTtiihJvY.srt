1
00:01:28,370 --> 00:01:32,262
Hi, thanks for joining my presentation from event based to microservices using

2
00:01:32,316 --> 00:01:35,622
Kubernetes and Argo CD. My name is Ramesh and I'm currently

3
00:01:35,676 --> 00:01:39,318
director of Cloud and DevOps at Oak nine. In the past I've served as a

4
00:01:39,324 --> 00:01:42,890
senior DevOps engineer and an application engineering manager.

5
00:01:42,970 --> 00:01:46,554
If you need to reach me, you can reach me at Twitter at rpatel Oak

6
00:01:46,602 --> 00:01:50,746
nine or by email at rpatel at Oak nine IO today we'll

7
00:01:50,778 --> 00:01:54,426
talk about who Oak nine is, why we decided to go to microservices,

8
00:01:54,538 --> 00:01:58,034
the current state and the past state of our architecture, and then I'll also

9
00:01:58,072 --> 00:02:01,582
do a deployment of a microservice getting deployed to Kubernetes

10
00:02:01,646 --> 00:02:06,174
using Gitops principles. Oak nine is a SaaS based product which facilitates

11
00:02:06,222 --> 00:02:09,606
cloud security from when you start writing code all the way to

12
00:02:09,628 --> 00:02:13,158
production. We integrate many of the CI CD tools and we also have

13
00:02:13,164 --> 00:02:16,582
a CLI. Our framework and tools that we use in house

14
00:02:16,636 --> 00:02:20,714
are comprised of the following angular node for our front end net

15
00:02:20,752 --> 00:02:24,410
core for our API and Lambdas Python for automation for our security.

16
00:02:24,480 --> 00:02:28,342
Blueprints go for our CLI binary and majority

17
00:02:28,406 --> 00:02:31,062
of our infrastructure is in AWS.

18
00:02:31,206 --> 00:02:34,746
Why did we decide to go to microservices? The first main reason was our

19
00:02:34,768 --> 00:02:38,426
build time was getting to be way too high. This causes a slower velocity

20
00:02:38,458 --> 00:02:42,282
of deployments and a slow go to market in terms of product development features.

21
00:02:42,346 --> 00:02:46,046
Our API was also becoming a large monolith. It was hard to onboard

22
00:02:46,078 --> 00:02:49,906
new devs when you have a huge code base that also leads to longer

23
00:02:50,008 --> 00:02:54,270
net build times and testing. We needed a loosely coupled architecture

24
00:02:54,350 --> 00:02:57,846
and we also needed teams to run independently. Here's the past

25
00:02:57,948 --> 00:03:01,714
state of our architecture. It's a typical event driven

26
00:03:01,762 --> 00:03:05,526
architecture in AWS. What we wanted to do was

27
00:03:05,628 --> 00:03:08,946
this monolith AWS Fargate cluster

28
00:03:08,978 --> 00:03:12,314
that we had running. We wanted to replace that with Kubernetes and use

29
00:03:12,352 --> 00:03:15,946
Argo CD to deploy microservices. So this

30
00:03:15,968 --> 00:03:18,922
is the current state of our architecture here.

31
00:03:18,976 --> 00:03:23,006
We have replaced Fargate with the EKs cluster and then we

32
00:03:23,028 --> 00:03:26,954
use Argo CD and the tooling around Argo CD is customized

33
00:03:27,002 --> 00:03:30,474
for the overlays and gauntlet for the variable injections.

34
00:03:30,602 --> 00:03:34,478
We also leverage CI CD tools such as Jenkins and Argo CD.

35
00:03:34,574 --> 00:03:38,462
Majority of this is following the Gitops principles for deployment.

36
00:03:38,606 --> 00:03:42,066
So in the next slide I'll do a small demo of a

37
00:03:42,088 --> 00:03:45,518
microservice getting deployed to Kubernetes.

38
00:03:45,694 --> 00:03:49,602
So aws you can see here I have a simple Nginx

39
00:03:49,666 --> 00:03:53,494
server which is rendering hello World and what I'll do

40
00:03:53,532 --> 00:03:57,506
here is I'll change this index HTML file to

41
00:03:57,548 --> 00:04:00,858
basically say hello World Conf fourty two.

42
00:04:01,024 --> 00:04:04,666
And then that will in turn kick off a

43
00:04:04,688 --> 00:04:08,166
Jenkins pipeline which will send a new image tag

44
00:04:08,198 --> 00:04:09,450
to Argo CD.

45
00:04:19,730 --> 00:04:23,054
So our Jenkins pipeline basically has two

46
00:04:23,092 --> 00:04:26,974
phases to it or two stages to it. One is a build docker

47
00:04:27,022 --> 00:04:30,690
image which builds the necessary artifact. The other is

48
00:04:30,760 --> 00:04:34,174
run Argo CD. Argo CD Binary

49
00:04:34,222 --> 00:04:37,366
will be called within the Jenkins pipeline to push a

50
00:04:37,388 --> 00:04:40,546
microservices to kubernetes. So let's

51
00:04:40,578 --> 00:04:44,454
take a look at this pipeline. As you can see

52
00:04:44,652 --> 00:04:48,246
in Argo, here's a project that Jenkins will push

53
00:04:48,278 --> 00:04:52,298
to in a matter of few seconds. We should see

54
00:04:52,464 --> 00:04:55,866
the new image getting pushed here and then a sync happening to our

55
00:04:55,888 --> 00:04:57,290
Kubernetes cluster.

56
00:04:59,230 --> 00:05:02,110
So right here now it's calling the Argo CD binary.

57
00:05:04,770 --> 00:05:08,394
And then you ran see the sync happening automatically in kubernetes.

58
00:05:08,522 --> 00:05:12,270
So within a matter of 30 seconds we were able to tag an image,

59
00:05:13,250 --> 00:05:16,762
build an image and push an image to kubernetes.

60
00:05:16,826 --> 00:05:25,286
And now this should say hello World Comp 42 it

61
00:05:25,428 --> 00:05:26,120
you.

62
00:05:28,810 --> 00:05:32,194
Well, thanks for joining me today. I hope this presentation

63
00:05:32,242 --> 00:05:36,290
was useful. And if you have any questions please email me at Arpatel at Oakland

64
00:05:36,370 --> 00:05:37,286
IO. Thanks,

