1
00:00:38,850 --> 00:00:42,854
Hello everyone and welcome to my talk multiple terraform projects in

2
00:00:42,892 --> 00:00:46,614
a Monorepo and today we will try to answer a question, how to survive that

3
00:00:46,652 --> 00:00:50,254
mess. A couple words about

4
00:00:50,292 --> 00:00:53,694
me. I am a DevOps engineer and I used

5
00:00:53,732 --> 00:00:56,670
to be a software engineer.

6
00:00:57,170 --> 00:01:00,400
I try to automate things

7
00:01:00,770 --> 00:01:04,882
and I fan of clean

8
00:01:04,936 --> 00:01:08,690
code and open source and

9
00:01:08,760 --> 00:01:13,006
infrastructure as a code. Here you can find QR

10
00:01:13,038 --> 00:01:16,614
code and link to my profile on

11
00:01:16,652 --> 00:01:20,600
LinkedIn. So if you have questions about

12
00:01:21,610 --> 00:01:24,566
this terrap compose tool,

13
00:01:24,748 --> 00:01:28,074
or if you want to just talk with me

14
00:01:28,112 --> 00:01:31,210
about some DevOps topics or something else,

15
00:01:31,280 --> 00:01:34,726
you can reach me out there. So let's

16
00:01:34,758 --> 00:01:38,970
start when someone

17
00:01:39,040 --> 00:01:43,134
tell you that it has everything as

18
00:01:43,172 --> 00:01:46,720
an infrastructure, as a code, it might

19
00:01:47,410 --> 00:01:51,214
be something similar to that picture. So it

20
00:01:51,332 --> 00:01:55,170
probably not something that you are expecting out of these

21
00:01:55,320 --> 00:01:58,946
words, right? So you can

22
00:01:59,048 --> 00:02:01,586
see there as a code,

23
00:02:01,768 --> 00:02:05,258
but it may be copy pasted,

24
00:02:05,374 --> 00:02:09,942
or maybe not clean, or maybe not

25
00:02:09,996 --> 00:02:13,974
updated and so on. So it

26
00:02:14,092 --> 00:02:17,326
might be different expectations

27
00:02:17,458 --> 00:02:20,534
out of it. I was in this situation several

28
00:02:20,582 --> 00:02:24,394
times and today I will

29
00:02:24,512 --> 00:02:28,074
try to guide you through

30
00:02:28,112 --> 00:02:32,250
my experience out of managing

31
00:02:32,690 --> 00:02:36,746
such projects. And our agenda

32
00:02:36,778 --> 00:02:40,766
for today is first I will explain

33
00:02:40,868 --> 00:02:44,514
prerequisites that we have. Then we will

34
00:02:44,552 --> 00:02:49,586
have a problem deep dive. Then I

35
00:02:49,608 --> 00:02:53,886
will try to explore existing solutions.

36
00:02:53,998 --> 00:02:58,194
What we have there, I will introduce terracompose

37
00:02:58,242 --> 00:03:02,086
then and a short demo and a couple

38
00:03:02,188 --> 00:03:05,426
final words in the end. So let's

39
00:03:05,458 --> 00:03:09,226
start. We have as a prerequisite a set

40
00:03:09,248 --> 00:03:12,826
of projects in a monorepo. They have

41
00:03:12,928 --> 00:03:16,410
various workspaces, which is mostly equal to environments,

42
00:03:17,390 --> 00:03:21,150
various structures and terraform versions.

43
00:03:21,970 --> 00:03:26,830
And if we look into our

44
00:03:26,900 --> 00:03:30,670
projects, you might have similar

45
00:03:30,740 --> 00:03:34,202
situation that you have some projects

46
00:03:34,266 --> 00:03:37,742
in your folder, whatever name I

47
00:03:37,796 --> 00:03:41,454
select projects. And you

48
00:03:41,492 --> 00:03:44,710
might also have some common stuff like

49
00:03:44,900 --> 00:03:48,230
creating vpcs or something like that

50
00:03:48,300 --> 00:03:51,830
which is shared across these projects. And it might

51
00:03:51,900 --> 00:03:54,918
have a little bit different location here.

52
00:03:55,004 --> 00:03:59,210
In this example it's a common, you can see it on the left picture.

53
00:03:59,870 --> 00:04:04,442
Also you can have environments based

54
00:04:04,576 --> 00:04:08,250
approach of structures. Your projects,

55
00:04:08,910 --> 00:04:12,206
as you can see on the right picture with

56
00:04:12,308 --> 00:04:15,882
modules. When we talk about various

57
00:04:15,946 --> 00:04:16,910
workspaces,

58
00:04:19,010 --> 00:04:23,506
mostly we talk about different

59
00:04:23,688 --> 00:04:27,460
number of workspaces per project

60
00:04:28,230 --> 00:04:31,666
and different naming combinations. So some of

61
00:04:31,688 --> 00:04:35,330
the projects might have staging and production

62
00:04:35,850 --> 00:04:40,274
only, some might have life stage

63
00:04:40,402 --> 00:04:46,102
and so on. Also we have different

64
00:04:46,236 --> 00:04:49,946
structures here because some of

65
00:04:49,968 --> 00:04:53,898
the projects might have components which

66
00:04:53,984 --> 00:04:57,530
add additional level of the file structure.

67
00:04:58,110 --> 00:05:02,430
And in the end we might have different terraform versions

68
00:05:03,170 --> 00:05:07,230
across the projects and also different

69
00:05:07,300 --> 00:05:11,118
versions inside the project between different

70
00:05:11,204 --> 00:05:15,106
workspaces, because you might be in the process

71
00:05:15,208 --> 00:05:18,434
of upgrading terraform and you have on

72
00:05:18,472 --> 00:05:22,674
managing, for example, one version of terraform. And in production still you

73
00:05:22,712 --> 00:05:26,150
can have different version.

74
00:05:27,770 --> 00:05:31,890
Okay, so let's summarize

75
00:05:31,970 --> 00:05:35,430
our complaints.

76
00:05:36,090 --> 00:05:40,490
We have following pain points, different terraform versions,

77
00:05:41,150 --> 00:05:44,662
and it's a pain of switching

78
00:05:44,726 --> 00:05:48,890
terraform versions on local between different projects.

79
00:05:50,850 --> 00:05:54,830
Also you have there a risk of incompatibility of the snippets.

80
00:05:55,410 --> 00:05:58,686
And also here we

81
00:05:58,708 --> 00:06:02,010
have a problem that our workspaces

82
00:06:02,170 --> 00:06:05,358
not visible and not trackable by versions control

83
00:06:05,444 --> 00:06:09,038
system. And that's why

84
00:06:09,124 --> 00:06:11,280
you need to memorize everything.

85
00:06:12,290 --> 00:06:17,174
And it creates a problem

86
00:06:17,372 --> 00:06:20,690
when you involve someone for troubleshooting

87
00:06:20,850 --> 00:06:24,946
or onboard newcomers. Aren't there any solutions

88
00:06:24,978 --> 00:06:28,460
on the market? Let's see.

89
00:06:28,990 --> 00:06:31,980
So we have terraform cloud,

90
00:06:32,750 --> 00:06:36,570
which is famous SaaS solution.

91
00:06:40,690 --> 00:06:45,520
It's a native solution for terraform and

92
00:06:46,850 --> 00:06:50,906
it's really good, but it's a pricey

93
00:06:50,938 --> 00:06:55,842
solution and it's not solve everything

94
00:06:55,976 --> 00:06:59,698
that we need. So it still

95
00:06:59,864 --> 00:07:03,314
for us has a low

96
00:07:03,512 --> 00:07:06,230
visibility for workspaces.

97
00:07:06,730 --> 00:07:10,466
And you still need to memorize your structure

98
00:07:10,498 --> 00:07:13,750
and workspaces and

99
00:07:13,820 --> 00:07:17,286
the price for sure. If we take a

100
00:07:17,308 --> 00:07:20,866
look into other tools,

101
00:07:20,978 --> 00:07:24,250
terraground, terramate, terraspace, they are also

102
00:07:24,400 --> 00:07:30,382
really good and they

103
00:07:30,436 --> 00:07:33,838
cover some pain points,

104
00:07:34,004 --> 00:07:38,030
but not all of them. Instead they create

105
00:07:38,180 --> 00:07:42,842
also some pain points, because with

106
00:07:42,996 --> 00:07:46,980
introducing them, you need to

107
00:07:48,150 --> 00:07:51,090
maintain some files,

108
00:07:52,470 --> 00:07:55,922
they are required, or some file structures

109
00:07:55,986 --> 00:07:59,750
or so on. So they create some

110
00:07:59,820 --> 00:08:03,910
amount of overhead. Sometimes it

111
00:08:03,980 --> 00:08:07,800
does make sense to use it, sometimes not.

112
00:08:08,270 --> 00:08:11,610
But we are trying to talk

113
00:08:11,680 --> 00:08:15,450
about the lightweight solution. So we

114
00:08:15,520 --> 00:08:19,180
do not want to have overhead, almost nothing.

115
00:08:21,010 --> 00:08:24,240
And then three years ago

116
00:08:25,650 --> 00:08:29,438
I thought that. Okay, wait, I already

117
00:08:29,524 --> 00:08:33,700
saw it somewhere and I remember

118
00:08:34,230 --> 00:08:37,634
that we have Docker compose and

119
00:08:37,672 --> 00:08:41,138
docker and Docker compose have

120
00:08:41,224 --> 00:08:45,250
a configuration for the projects in yaml.

121
00:08:45,930 --> 00:08:50,950
It's a very clean approach

122
00:08:51,450 --> 00:08:57,786
with config as a code and it

123
00:08:57,808 --> 00:09:00,170
has high visibility and traceability.

124
00:09:00,590 --> 00:09:05,340
And the idea behind terracompose, exactly that.

125
00:09:06,030 --> 00:09:09,578
Why cannot we do something

126
00:09:09,664 --> 00:09:12,910
like that with the terraform projects?

127
00:09:14,690 --> 00:09:18,302
Okay, and let me show you

128
00:09:18,356 --> 00:09:20,270
this quick wrapper.

129
00:09:20,850 --> 00:09:23,890
So terracompose, use cases,

130
00:09:25,270 --> 00:09:29,266
use cases are actually here

131
00:09:29,368 --> 00:09:32,830
actions that we can run in terracompose,

132
00:09:32,990 --> 00:09:36,258
we can run plan, apply workspaces,

133
00:09:36,354 --> 00:09:40,262
run shell and help more

134
00:09:40,316 --> 00:09:44,006
often. For sure we using plan and

135
00:09:44,028 --> 00:09:47,946
apply. And under the hood these actions are

136
00:09:48,048 --> 00:09:52,282
having terraform commands and

137
00:09:52,336 --> 00:09:55,962
providing output of them. We also can

138
00:09:56,016 --> 00:09:59,686
run command inside the container

139
00:09:59,798 --> 00:10:04,254
with run action. We can list workspaces and

140
00:10:04,292 --> 00:10:07,486
we can run a shell inside

141
00:10:07,588 --> 00:10:11,034
the container and join

142
00:10:11,082 --> 00:10:14,354
it. If we take

143
00:10:14,392 --> 00:10:18,322
a look on collaboration diagram here,

144
00:10:18,376 --> 00:10:22,222
we can see that when we trigger terracompose

145
00:10:22,286 --> 00:10:26,310
action under the hood, Terracompose will

146
00:10:26,380 --> 00:10:30,550
read configuration which is written into the config file

147
00:10:31,130 --> 00:10:35,522
and based on that run terraform

148
00:10:35,666 --> 00:10:38,890
command inside the docker.

149
00:10:39,470 --> 00:10:42,778
Also it will run

150
00:10:42,944 --> 00:10:46,220
this action, wrap it into

151
00:10:47,070 --> 00:10:50,402
some different commands like change directory,

152
00:10:50,486 --> 00:10:53,406
terraform, init, select workspaces and so on.

153
00:10:53,588 --> 00:10:57,722
With this setup we solve our problem with terraform

154
00:10:57,786 --> 00:11:01,530
versions because we use Docker

155
00:11:01,610 --> 00:11:05,662
which allow us to have different terraform

156
00:11:05,726 --> 00:11:09,490
versions on the same machine.

157
00:11:10,390 --> 00:11:14,286
Also we solve problem with different structure

158
00:11:14,318 --> 00:11:19,320
and workspaces and memorizing them because we

159
00:11:19,690 --> 00:11:23,830
can customize our alias

160
00:11:24,570 --> 00:11:28,106
with different path, different workspace and

161
00:11:28,128 --> 00:11:31,434
we don't need to memorize them. Only one

162
00:11:31,552 --> 00:11:35,850
that we need to do is to actually create this config file.

163
00:11:36,190 --> 00:11:39,922
We also improve our validation

164
00:11:40,006 --> 00:11:43,680
approach because we chain terraform commands and

165
00:11:44,610 --> 00:11:49,386
we automatically run validation.

166
00:11:49,578 --> 00:11:53,140
We will not forget about it and

167
00:11:53,670 --> 00:11:57,006
it will also automate some cleanup

168
00:11:57,118 --> 00:12:00,930
things after running action.

169
00:12:01,270 --> 00:12:05,686
So it will also help us in this way when

170
00:12:05,708 --> 00:12:09,174
we will talk about capabilities. So here I would

171
00:12:09,212 --> 00:12:12,690
stress that we don't need to memorize

172
00:12:12,770 --> 00:12:16,354
it and it's

173
00:12:16,402 --> 00:12:20,490
a part of code base so it has same visibility.

174
00:12:22,110 --> 00:12:26,150
You can have merge requests

175
00:12:26,310 --> 00:12:30,570
and you can have a documentation

176
00:12:31,010 --> 00:12:34,910
just at your code base about workspaces.

177
00:12:35,890 --> 00:12:40,286
Also having terraform commands provide

178
00:12:40,388 --> 00:12:44,466
us a guaranteed validated plan and

179
00:12:44,568 --> 00:12:49,140
it will just speed up maintenance and development because

180
00:12:50,310 --> 00:12:54,094
it require less time for double check, for printing,

181
00:12:54,142 --> 00:12:58,200
repeated comments and in the end it

182
00:12:58,570 --> 00:13:02,162
means less validation failures on CI

183
00:13:02,226 --> 00:13:05,814
when you will push your code because it

184
00:13:05,852 --> 00:13:10,346
shift left validations and

185
00:13:10,448 --> 00:13:14,602
it require from you to do

186
00:13:14,656 --> 00:13:18,582
all checks locally. First in the configuration

187
00:13:18,646 --> 00:13:21,838
file you can see two

188
00:13:21,924 --> 00:13:25,466
main blocks. This is default

189
00:13:25,658 --> 00:13:29,114
which contains shared properties

190
00:13:29,242 --> 00:13:32,618
across the aliases and aliases which

191
00:13:32,644 --> 00:13:36,686
is actually our projects

192
00:13:36,718 --> 00:13:40,340
and environments. And here

193
00:13:40,710 --> 00:13:44,414
you can see that this terraform version

194
00:13:44,462 --> 00:13:48,006
that we define in default might

195
00:13:48,108 --> 00:13:50,950
be overwritten in alias.

196
00:13:51,770 --> 00:13:55,590
The required property is only one path

197
00:13:56,090 --> 00:13:59,642
only. This is distinguish aliases between

198
00:13:59,696 --> 00:14:04,138
each other and we

199
00:14:04,224 --> 00:14:08,170
have here also example of the hooks usage.

200
00:14:08,910 --> 00:14:12,826
Hooks will help us to customize our projects

201
00:14:12,858 --> 00:14:16,142
even more so we

202
00:14:16,196 --> 00:14:19,658
are able to run scripts or commands

203
00:14:19,834 --> 00:14:23,922
before some particular activities and

204
00:14:23,976 --> 00:14:28,194
or after. And this way we

205
00:14:28,312 --> 00:14:32,526
will be able to do some workarounds

206
00:14:32,718 --> 00:14:36,246
for some h cases. We will

207
00:14:36,268 --> 00:14:39,800
talk about it later. Here you can see

208
00:14:40,330 --> 00:14:43,986
the output of the help action.

209
00:14:44,178 --> 00:14:47,650
So it lists available actions and also

210
00:14:47,740 --> 00:14:51,450
it lists available aliases.

211
00:14:52,110 --> 00:14:55,500
And now it's time for demo.

212
00:14:57,230 --> 00:15:01,242
First of all I want to emphasize

213
00:15:01,386 --> 00:15:05,214
few points about demo. So first

214
00:15:05,332 --> 00:15:08,430
we will have it in AWS.

215
00:15:09,810 --> 00:15:13,762
Second demo project I

216
00:15:13,816 --> 00:15:18,100
prepare it and it contains for

217
00:15:18,870 --> 00:15:23,294
speed and for readability projects

218
00:15:23,342 --> 00:15:27,030
that creates only vpcs and security groups.

219
00:15:27,690 --> 00:15:30,834
And also we will keep terraform state locally

220
00:15:30,882 --> 00:15:34,790
for simplicity, but please never do it in production.

221
00:15:35,370 --> 00:15:38,698
Here I want to show

222
00:15:38,784 --> 00:15:42,102
how I connect to AWS. So it's

223
00:15:42,166 --> 00:15:45,782
just a simple AWS

224
00:15:45,846 --> 00:15:49,922
profile and I export also profile

225
00:15:50,006 --> 00:15:53,338
name with environment variable. I also created

226
00:15:53,434 --> 00:15:57,374
these commands, this aliases which is

227
00:15:57,492 --> 00:16:01,610
just help us to not print

228
00:16:01,690 --> 00:16:04,500
that long commands during the demo.

229
00:16:05,830 --> 00:16:09,794
So let's check that we have only default VPC and

230
00:16:09,832 --> 00:16:12,500
default security group. Okay,

231
00:16:13,110 --> 00:16:17,490
everything is prepared.

232
00:16:17,570 --> 00:16:19,400
Let's download the tool.

233
00:16:20,410 --> 00:16:24,482
So I'm downloading the terracompose

234
00:16:24,546 --> 00:16:28,490
tool and copied into

235
00:16:28,560 --> 00:16:32,470
the local bin. I also will clone

236
00:16:32,550 --> 00:16:36,874
the terracompose demo project which

237
00:16:36,912 --> 00:16:40,570
is available in GitHub.

238
00:16:41,170 --> 00:16:45,360
And let's start with the first

239
00:16:46,610 --> 00:16:50,574
demo project is a common so as I mentioned,

240
00:16:50,772 --> 00:16:54,350
it will create a vpcs for all our

241
00:16:54,420 --> 00:16:58,066
projects and we can use,

242
00:16:58,168 --> 00:17:01,794
and we can create resources in these

243
00:17:01,832 --> 00:17:05,394
vpcs. So here we have folder

244
00:17:05,442 --> 00:17:08,470
with terraform state. We have two environments,

245
00:17:09,610 --> 00:17:14,262
nonprod and production. And we

246
00:17:14,316 --> 00:17:17,910
have here tf varst files,

247
00:17:18,590 --> 00:17:22,106
one managing with workspace and another

248
00:17:22,208 --> 00:17:26,522
one does not match with

249
00:17:26,576 --> 00:17:31,342
his name with workspace name. So for

250
00:17:31,396 --> 00:17:34,622
this use case we for

251
00:17:34,676 --> 00:17:39,498
staging just define

252
00:17:39,674 --> 00:17:43,426
workspace property. And for production we

253
00:17:43,448 --> 00:17:47,394
define beside workspace property, we define also

254
00:17:47,512 --> 00:17:51,250
tfvars property. So this is a

255
00:17:51,320 --> 00:17:55,238
very simple example when we

256
00:17:55,244 --> 00:17:59,186
can omit some break in naming

257
00:17:59,298 --> 00:18:03,160
combinations and we can use

258
00:18:03,770 --> 00:18:08,090
a random name for tfwars. Just put

259
00:18:08,160 --> 00:18:11,798
this name into the alias

260
00:18:11,974 --> 00:18:15,642
config. Okay, let's build

261
00:18:15,696 --> 00:18:19,954
a plan. So this is just a simple command.

262
00:18:20,022 --> 00:18:23,754
As you can see this is plan and then alias

263
00:18:23,802 --> 00:18:27,790
name. Now you see the

264
00:18:27,940 --> 00:18:30,480
output that we are running,

265
00:18:30,930 --> 00:18:36,066
terraform init. We see the

266
00:18:36,168 --> 00:18:39,198
normal Tf init output.

267
00:18:39,374 --> 00:18:44,014
Also we can see that workspace Nonprod

268
00:18:44,142 --> 00:18:47,320
has been found in config and we will select it

269
00:18:47,770 --> 00:18:51,880
and we see the information about

270
00:18:53,450 --> 00:18:57,110
the main factors

271
00:18:57,630 --> 00:19:02,214
for our plan. This is workspace and this is tfwars

272
00:19:02,342 --> 00:19:06,460
name. Then after

273
00:19:07,150 --> 00:19:10,206
checking plan, you can see that this plan is

274
00:19:10,228 --> 00:19:14,000
actually saved in this file. So we can

275
00:19:14,610 --> 00:19:17,600
even manually check it if you want.

276
00:19:19,410 --> 00:19:23,790
Okay, then we can run workspaces alias.

277
00:19:23,870 --> 00:19:27,426
This is also just

278
00:19:27,448 --> 00:19:31,534
a short link to list the available alias workspaces.

279
00:19:31,582 --> 00:19:35,262
Sorry. And we see that we currently

280
00:19:35,416 --> 00:19:40,550
are in nonprod workspace.

281
00:19:41,850 --> 00:19:45,414
So let's apply. When we run apply,

282
00:19:45,612 --> 00:19:49,494
it's also easy. It's just apply and name workspace.

283
00:19:49,542 --> 00:19:53,306
You don't need to define all details about files and

284
00:19:53,328 --> 00:19:57,386
so on. So it's done already. Under the

285
00:19:57,408 --> 00:20:01,034
hood we see in which directory

286
00:20:01,082 --> 00:20:05,646
we are, we are running terraform in need standard

287
00:20:05,748 --> 00:20:09,390
output of it, selecting workspace.

288
00:20:10,370 --> 00:20:14,210
And now we see that, okay, we want to apply

289
00:20:14,360 --> 00:20:18,020
file with this name, are you sure about that?

290
00:20:19,110 --> 00:20:24,434
And also we can see how

291
00:20:24,552 --> 00:20:26,870
long time ago it was modified.

292
00:20:27,930 --> 00:20:31,826
So now you can decide, is that exactly file

293
00:20:31,858 --> 00:20:34,200
that you want to apply or not?

294
00:20:36,810 --> 00:20:39,850
So if we print, yes, we can proceed.

295
00:20:42,030 --> 00:20:46,154
And our sources were

296
00:20:46,192 --> 00:20:49,778
created. Now let's build a plan for production.

297
00:20:49,974 --> 00:20:54,750
And you remember that there we had an

298
00:20:54,900 --> 00:20:58,778
TfVars named differently

299
00:20:58,874 --> 00:21:03,006
from workspace, but terraform

300
00:21:03,118 --> 00:21:07,060
plan is there and file also

301
00:21:07,910 --> 00:21:11,540
pick it up correctly. Now let's apply.

302
00:21:12,390 --> 00:21:15,220
And now you see that, okay,

303
00:21:15,930 --> 00:21:20,178
I ran the command, but now it contains a suffix.

304
00:21:20,274 --> 00:21:24,114
So with the suffix debug you can enable debug

305
00:21:24,162 --> 00:21:27,522
mode which will run it

306
00:21:27,596 --> 00:21:31,130
without init, without format check

307
00:21:31,200 --> 00:21:35,606
and without validation. So it's very useful

308
00:21:35,798 --> 00:21:40,070
for development process and

309
00:21:40,240 --> 00:21:43,982
debugging process, because you don't need

310
00:21:44,036 --> 00:21:47,914
to wait until everything will be validated

311
00:21:48,042 --> 00:21:51,966
and in its process will finished and

312
00:21:51,988 --> 00:21:55,118
so on. So it's

313
00:21:55,214 --> 00:21:59,042
very useful for development, but I

314
00:21:59,096 --> 00:22:02,834
would not recommend doing that out

315
00:22:02,872 --> 00:22:06,406
of development. So you need to have a

316
00:22:06,428 --> 00:22:09,990
clear understanding for what you are doing

317
00:22:10,060 --> 00:22:13,574
that. Okay,

318
00:22:13,692 --> 00:22:17,030
so we want to apply our

319
00:22:17,100 --> 00:22:21,222
changes, they are applied.

320
00:22:21,366 --> 00:22:25,340
And also let's check how we can run

321
00:22:26,910 --> 00:22:30,054
other commands. So we can just

322
00:22:30,112 --> 00:22:33,822
trigger action, run alias and

323
00:22:33,876 --> 00:22:38,746
then we can put any commands

324
00:22:38,778 --> 00:22:43,554
that we want to run, they will be run in

325
00:22:43,592 --> 00:22:47,314
the container. So here you can see that

326
00:22:47,352 --> 00:22:51,954
we list our state and we see that our

327
00:22:51,992 --> 00:22:55,526
VPC is there. And also

328
00:22:55,628 --> 00:22:59,154
I want to show you that our vpcs

329
00:22:59,282 --> 00:23:03,320
were really created and they are

330
00:23:03,770 --> 00:23:07,914
in place. Okay, now let's check

331
00:23:07,952 --> 00:23:11,626
more complex example. Here we see

332
00:23:11,728 --> 00:23:15,850
project that have two compose,

333
00:23:16,590 --> 00:23:19,370
let's go with the app component.

334
00:23:20,050 --> 00:23:24,000
And here we see that

335
00:23:24,530 --> 00:23:28,234
we have beside our Tf

336
00:23:28,282 --> 00:23:32,570
state folder with two workspaces

337
00:23:32,650 --> 00:23:36,226
integration and live. We have also here

338
00:23:36,328 --> 00:23:40,050
some tf state for experiment.

339
00:23:40,710 --> 00:23:44,922
So for example you are doing some experiment in integration workspace

340
00:23:45,006 --> 00:23:48,706
and you have this TF

341
00:23:48,738 --> 00:23:52,710
state folder just for integration workspace

342
00:23:53,130 --> 00:23:56,934
and you want to apply that. So how can you do it for

343
00:23:56,972 --> 00:24:00,890
that you can use backend config property and

344
00:24:00,960 --> 00:24:05,322
define their workspace deer with

345
00:24:05,376 --> 00:24:09,100
another location for the terraform state.

346
00:24:09,710 --> 00:24:13,322
Or for example, if you are using remote

347
00:24:13,466 --> 00:24:18,000
backend, you can put here some key and

348
00:24:18,690 --> 00:24:22,462
use that. So that

349
00:24:22,516 --> 00:24:26,522
just allow you to run terraform

350
00:24:26,586 --> 00:24:29,570
in it with some custom backend config.

351
00:24:29,910 --> 00:24:34,100
And hooks. Help us here because

352
00:24:34,710 --> 00:24:37,800
when we will jump from one

353
00:24:38,410 --> 00:24:41,766
environment to another environment we

354
00:24:41,788 --> 00:24:45,400
will see error because we

355
00:24:46,250 --> 00:24:49,814
ran terraform init with different

356
00:24:49,932 --> 00:24:55,900
backend configs. So for

357
00:24:56,910 --> 00:25:00,782
work around that issue we can just

358
00:25:00,836 --> 00:25:06,190
run hooks which removing terraform

359
00:25:06,690 --> 00:25:10,510
folder on both of these environments

360
00:25:11,330 --> 00:25:14,610
and it will solve our problem.

361
00:25:14,760 --> 00:25:18,420
This is just an example, you might have different use case

362
00:25:19,350 --> 00:25:24,846
and let's see how it works. So I

363
00:25:24,968 --> 00:25:28,870
going to run a plan on integration.

364
00:25:29,850 --> 00:25:33,058
We see here that we trigger

365
00:25:33,234 --> 00:25:37,378
before df init hook and we

366
00:25:37,484 --> 00:25:42,010
run our terraform init using backend config.

367
00:25:42,670 --> 00:25:46,810
We see config sorry, init output and

368
00:25:46,960 --> 00:25:50,054
selecting workspace. And we

369
00:25:50,112 --> 00:25:54,474
can check that in the end we are in workspace

370
00:25:54,522 --> 00:25:58,554
integration with TFwars integration

371
00:25:58,602 --> 00:26:02,800
tFwars. Okay, we see the plan here,

372
00:26:03,430 --> 00:26:06,900
no errors. So I'm going to

373
00:26:07,510 --> 00:26:12,180
apply it now.

374
00:26:14,970 --> 00:26:18,150
After resource were created,

375
00:26:19,930 --> 00:26:24,182
we see that changes are actually were

376
00:26:24,236 --> 00:26:27,974
recorded into experiment TF

377
00:26:28,022 --> 00:26:32,762
state and TF state with origin was

378
00:26:32,816 --> 00:26:36,026
not modified. So you

379
00:26:36,048 --> 00:26:39,466
can see that this option

380
00:26:39,648 --> 00:26:42,958
really works. And our

381
00:26:43,044 --> 00:26:46,080
security group also in place,

382
00:26:47,810 --> 00:26:51,694
we can see it here. Okay, now let's try

383
00:26:51,812 --> 00:26:56,530
to run interactive shell into container.

384
00:26:57,270 --> 00:27:00,690
And for that we will use

385
00:27:00,760 --> 00:27:04,562
shell action. We also

386
00:27:04,616 --> 00:27:08,520
need to approve it because for the

387
00:27:09,370 --> 00:27:13,750
projects purposes and we are inside the container.

388
00:27:14,570 --> 00:27:17,960
Now let's check our workspace list.

389
00:27:18,510 --> 00:27:22,090
Okay, so now we just check in that we

390
00:27:22,160 --> 00:27:26,918
are in the backend

391
00:27:27,094 --> 00:27:30,880
configuration experimental one,

392
00:27:31,490 --> 00:27:35,840
and for live

393
00:27:36,930 --> 00:27:40,682
we can just run terra

394
00:27:40,746 --> 00:27:44,660
compose action plan. It will

395
00:27:45,350 --> 00:27:49,774
run before Tf init hook

396
00:27:49,822 --> 00:27:54,334
again, run normal Tfe

397
00:27:54,382 --> 00:27:57,270
init without experimental backend config.

398
00:27:57,770 --> 00:28:01,526
And you can see that here we

399
00:28:01,548 --> 00:28:05,000
have plan that has been built

400
00:28:05,610 --> 00:28:09,462
incorrect workspace with correct tfwars

401
00:28:09,526 --> 00:28:13,580
file. Let's apply.

402
00:28:18,350 --> 00:28:22,218
Okay, so the resource was created

403
00:28:22,314 --> 00:28:25,840
and here we also can see them.

404
00:28:26,370 --> 00:28:29,998
Good. I think it's enough

405
00:28:30,084 --> 00:28:34,590
for this demo. I hope

406
00:28:34,740 --> 00:28:38,750
that you saw that with this setup,

407
00:28:39,090 --> 00:28:42,750
terracompose tool is really helpful

408
00:28:43,570 --> 00:28:46,870
when we we can just

409
00:28:46,940 --> 00:28:51,254
run action name and alias and it

410
00:28:51,292 --> 00:28:54,754
will run it with the properties with the arguments

411
00:28:54,802 --> 00:28:58,326
that we defined in the config

412
00:28:58,358 --> 00:29:01,674
file and we don't have to remember

413
00:29:01,872 --> 00:29:06,026
them and double check

414
00:29:06,208 --> 00:29:08,140
validity and so on.

415
00:29:08,750 --> 00:29:11,950
Let's back now to

416
00:29:12,100 --> 00:29:15,600
our presentation. So with that said,

417
00:29:17,650 --> 00:29:21,040
all done now, what do you think?

418
00:29:21,410 --> 00:29:24,180
Let's check our points.

419
00:29:25,030 --> 00:29:28,578
So here we have almost

420
00:29:28,664 --> 00:29:31,810
everything solved switch and terraform versions.

421
00:29:32,150 --> 00:29:36,630
It's now only attribute in YaML thanks

422
00:29:36,700 --> 00:29:41,474
to the running it into Docker snippets

423
00:29:41,522 --> 00:29:43,590
and compatibility visualization.

424
00:29:43,930 --> 00:29:47,094
Workspace traceability of the

425
00:29:47,132 --> 00:29:50,986
workspace automate routines needs to

426
00:29:51,008 --> 00:29:54,714
remember all these were solved chain in

427
00:29:54,752 --> 00:29:58,154
commons still. Well, it's a

428
00:29:58,192 --> 00:30:01,662
solved, but it's hard coded. That's why I market it as

429
00:30:01,716 --> 00:30:06,286
partially solved, because in

430
00:30:06,308 --> 00:30:09,950
the future plans I want to make

431
00:30:10,020 --> 00:30:14,238
them customizable and also allow users

432
00:30:14,414 --> 00:30:18,820
to create a custom action or

433
00:30:19,590 --> 00:30:23,490
override default action

434
00:30:25,690 --> 00:30:31,510
to solve different problems,

435
00:30:31,660 --> 00:30:36,454
or maybe just because to

436
00:30:36,492 --> 00:30:40,074
fix something. And if

437
00:30:40,112 --> 00:30:43,850
we talk about complexity and price.

438
00:30:44,000 --> 00:30:48,474
It's an open source and it's a simple yaml that

439
00:30:48,512 --> 00:30:53,374
you can create for 1 hour. So I tried to

440
00:30:53,412 --> 00:30:57,578
implement it into different projects

441
00:30:57,754 --> 00:31:01,838
and I spent about 1 hour and

442
00:31:01,924 --> 00:31:03,700
the job was done.

443
00:31:05,030 --> 00:31:08,930
Now let's talk about the future. So since

444
00:31:09,000 --> 00:31:12,478
that was just a simple wrapper,

445
00:31:12,574 --> 00:31:16,406
a quick wrapper written three years ago.

446
00:31:16,508 --> 00:31:20,406
So I didn't thought about the proper

447
00:31:20,588 --> 00:31:24,326
interface design and this

448
00:31:24,348 --> 00:31:27,478
is something that I see needs to

449
00:31:27,484 --> 00:31:31,350
be improved. Also, I want

450
00:31:31,420 --> 00:31:35,480
to make actions customizable as I just mentioned.

451
00:31:36,090 --> 00:31:40,206
And who knows, maybe rewriting go how

452
00:31:40,228 --> 00:31:44,000
do you think? So I actually

453
00:31:45,570 --> 00:31:49,520
want to encourage you to contribute to this project.

454
00:31:49,970 --> 00:31:53,694
You can find links to this project in QR code

455
00:31:53,812 --> 00:31:57,360
and in my GitHub account.

456
00:31:57,970 --> 00:32:01,326
Please join. And with that I

457
00:32:01,348 --> 00:32:03,930
want to say thank you for your attention.

