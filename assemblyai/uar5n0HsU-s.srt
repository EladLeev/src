1
00:00:34,610 --> 00:00:38,006
All right, so let's go ahead and break into this PowerPoint a little bit.

2
00:00:38,028 --> 00:00:41,250
And it's going to be super straightforward. Really quick theory,

3
00:00:41,330 --> 00:00:44,566
just because like we all know youll need the theory to

4
00:00:44,588 --> 00:00:47,686
understand the hands on piece and you need the hands on piece to understand the

5
00:00:47,708 --> 00:00:50,878
theory, both them go together. So let's just go ahead and

6
00:00:50,884 --> 00:00:53,566
go through it, but I promise it won't be too much PowerPoint hell. All right,

7
00:00:53,588 --> 00:00:56,974
so first things first. What are secrets? Now youll usually hear

8
00:00:57,012 --> 00:01:00,654
that secrets are like passwords or API keys or something

9
00:01:00,692 --> 00:01:04,286
along those lines. But in reality secrets are really anything that

10
00:01:04,308 --> 00:01:08,274
you don't want in plain text. Now this could be a username for

11
00:01:08,312 --> 00:01:11,906
whatever reason, don't know a specific use case, but maybe you

12
00:01:11,928 --> 00:01:15,634
would want a username and a password to be tied together and

13
00:01:15,672 --> 00:01:19,206
not in plain text. Again, for whatever reason you could go ahead

14
00:01:19,228 --> 00:01:22,966
and you can put that into a secrets now out of

15
00:01:22,988 --> 00:01:27,010
the box. Kubernetes does have the ability to create secrets.

16
00:01:27,090 --> 00:01:30,586
In the core API group there is a resource that you can

17
00:01:30,608 --> 00:01:33,722
use to create secrets. However, here's the

18
00:01:33,776 --> 00:01:37,274
problem with Kubernetes secrets. Now, they are unencrypted by

19
00:01:37,312 --> 00:01:40,682
default. And what I mean by that is when you create a Kubernetes secret,

20
00:01:40,746 --> 00:01:44,126
it's stored in ETCD, which is the Kubernetes data store.

21
00:01:44,228 --> 00:01:47,562
And then from in there it's unencrypted.

22
00:01:47,706 --> 00:01:50,942
So there is zero encryption inside of

23
00:01:50,996 --> 00:01:54,974
ETCD for the secrets. They are stored in plain base 64 text.

24
00:01:55,092 --> 00:01:58,834
Which means if you have access to etCD, if a service account has

25
00:01:58,872 --> 00:02:02,142
access to etCD, if any engineer has access to etCD,

26
00:02:02,206 --> 00:02:05,614
if any attacker gets access to etcD because it's not secure

27
00:02:05,662 --> 00:02:09,750
for whatever reason, yes, they can get direct access to

28
00:02:09,820 --> 00:02:14,034
your secrets. So because of that, when I'm in production environments,

29
00:02:14,162 --> 00:02:17,426
I typically say that we should be going with another secrets

30
00:02:17,458 --> 00:02:21,594
provider, another third party. In fact, there is documentation even

31
00:02:21,632 --> 00:02:25,066
in Kubernetes documentation that states all of this. It's like, listen,

32
00:02:25,168 --> 00:02:29,014
everything is unencrypted by default. You should probably go with a third party

33
00:02:29,142 --> 00:02:32,374
if possible. Now from a third party perspective,

34
00:02:32,422 --> 00:02:36,026
there are a lot of different options. However, I typically go

35
00:02:36,048 --> 00:02:39,454
with Hashcorp vault. And the reason why, other than the fact that

36
00:02:39,492 --> 00:02:42,686
you can kind of just deploy it and not pay anything for it, there is

37
00:02:42,708 --> 00:02:46,126
so much documentation and so many getting started guides and

38
00:02:46,148 --> 00:02:49,474
so many different ways to run it in production that you can read about and

39
00:02:49,512 --> 00:02:53,278
watch videos on and even courses and all that good stuff. So when I'm consulting

40
00:02:53,294 --> 00:02:56,902
for customers, I'm always thinking about not what the latest and greatest is,

41
00:02:56,956 --> 00:03:00,674
but what's actually supported heavily. And Kubernetes

42
00:03:00,722 --> 00:03:04,054
and Vault is supported heavily. And I think the fact

43
00:03:04,092 --> 00:03:07,526
that it's supported, number one speaks to how good

44
00:03:07,548 --> 00:03:10,678
it is. But number two, it goes into just how important,

45
00:03:10,764 --> 00:03:14,074
having documentation and having best practices and all of that is.

46
00:03:14,112 --> 00:03:18,166
So with that, let's go ahead and learn about how we can implement hashcore

47
00:03:18,198 --> 00:03:21,994
vault in our Kubernetes environment. All right, so now that we know why

48
00:03:22,032 --> 00:03:24,938
we would want to use vault, let's go ahead and actually figure out how to

49
00:03:24,944 --> 00:03:27,998
get it installed in Kubernetes. So first things first, we're going to

50
00:03:28,004 --> 00:03:31,226
go ahead and we're going to use helm. Helm is the Kubernetes package manager.

51
00:03:31,258 --> 00:03:35,594
And essentially instead of just going to the raw Kubernetes manifest and running Kubectl

52
00:03:35,642 --> 00:03:39,118
apply or Kubectl create, we can version it with helm,

53
00:03:39,214 --> 00:03:42,578
update it, roll it back, et cetera. So first things first, you want to

54
00:03:42,584 --> 00:03:46,082
make sure you have the Hashicorp repo. Now I already

55
00:03:46,136 --> 00:03:49,558
have that because I have it installed already. So next what I can

56
00:03:49,564 --> 00:03:53,190
do is I can use this install command. Now I'm going to be naming my

57
00:03:53,260 --> 00:03:56,994
chart vault. I'm going to be calling upon the vault

58
00:03:57,042 --> 00:04:00,486
helm chart and then I'm going to use two flags. Well actually a few.

59
00:04:00,588 --> 00:04:04,066
So the first is to enable the UI. The second is to

60
00:04:04,108 --> 00:04:06,938
enable the service type as load balancer. And then next what I'm going to do

61
00:04:06,944 --> 00:04:10,566
is I'm going to specify the vault namespace and I'm going to create that namespace

62
00:04:10,678 --> 00:04:13,774
if it's not already created. All right? And as we can

63
00:04:13,812 --> 00:04:17,214
see, this was deployed. So I'm going to clear

64
00:04:17,252 --> 00:04:21,978
that screen and I'm going to run Kubectl getall namespace

65
00:04:22,154 --> 00:04:25,426
vault. Okay, so notice here

66
00:04:25,448 --> 00:04:28,994
how there are a few things going on. I have the services, I have the

67
00:04:29,032 --> 00:04:31,586
deployments and then the pods right here.

68
00:04:31,688 --> 00:04:34,574
So this container is still creating.

69
00:04:34,622 --> 00:04:38,386
Now we want to wait until it's in the running state so I

70
00:04:38,408 --> 00:04:41,846
can just show this to you really quick. All right,

71
00:04:41,868 --> 00:04:44,886
it's still creating. Let's go ahead and give it a few more minutes or a

72
00:04:44,908 --> 00:04:48,870
few moments should only be seconds. All right, so as we can see,

73
00:04:48,940 --> 00:04:52,122
it is running, but it's not officially available yet. It's saying

74
00:04:52,176 --> 00:04:56,010
zero of one. So what we want to do is I'm going to open

75
00:04:56,080 --> 00:04:59,386
up, well rather I'm going to go to this IP address and if

76
00:04:59,408 --> 00:05:04,542
you're wondering, by the way, I'm running on

77
00:05:04,596 --> 00:05:07,822
aks. You could be running in any cloud, any managed Kubernetes service,

78
00:05:07,876 --> 00:05:10,510
doesn't matter. I just so happen to be running in aks.

79
00:05:11,410 --> 00:05:15,422
So really quick, let's just go ahead and show that again. I'm going to

80
00:05:15,476 --> 00:05:18,858
copy the IP address which is the load balancer

81
00:05:18,954 --> 00:05:22,206
for the vault Ui. And then I'm going to head over to the web browser

82
00:05:22,238 --> 00:05:24,578
really quick. All right. And I'm going to pop that in and then I'm going

83
00:05:24,584 --> 00:05:28,086
to put it over 8200. Okay? So we can see the

84
00:05:28,108 --> 00:05:31,858
UI is up, but it's not unsealed.

85
00:05:31,954 --> 00:05:35,222
That's why you see that zero one there that the container is running,

86
00:05:35,276 --> 00:05:38,518
but it's not available. So what I want to do here

87
00:05:38,604 --> 00:05:42,534
is I am going to run this Kubectl

88
00:05:42,582 --> 00:05:46,662
exec command. And essentially what I'm doing is I'm running the vault operator

89
00:05:46,726 --> 00:05:50,166
init command inside of the container or inside of the pod

90
00:05:50,198 --> 00:05:53,530
rather without actually executing into the pod.

91
00:05:55,150 --> 00:05:58,286
So as you can see, we have a few unsealed keys right here. All right?

92
00:05:58,308 --> 00:06:01,726
And then here's the initial root token. So what

93
00:06:01,748 --> 00:06:04,894
I'm going to do is I'm going to have to run this command three times

94
00:06:05,012 --> 00:06:08,526
because we're going to have to unseal it a few times. So let's

95
00:06:08,558 --> 00:06:11,714
go ahead and run that just like this.

96
00:06:11,832 --> 00:06:15,380
And then I'm going to pop in the first key.

97
00:06:17,350 --> 00:06:21,174
And as you can see, it says one of three. So with vaults you always

98
00:06:21,212 --> 00:06:24,518
have to put in at least three unseal keys. So we have to

99
00:06:24,524 --> 00:06:27,560
do the same thing even though it's running in Kubernetes. Same thing.

100
00:06:28,430 --> 00:06:31,660
All right, so now let's put in the second one.

101
00:06:33,710 --> 00:06:35,740
All right, now it says two of three.

102
00:06:36,990 --> 00:06:40,022
And then finally let's put in the

103
00:06:40,096 --> 00:06:44,080
third here. Got to run the command first.

104
00:06:45,090 --> 00:06:49,342
All right, and as you can see, we are now good to go.

105
00:06:49,476 --> 00:06:53,040
So if I go back to the UI here,

106
00:06:53,490 --> 00:06:56,500
we can now see that it's asking me to sign in.

107
00:06:56,950 --> 00:07:00,322
So what I'm going to do is I'm going to scroll up again,

108
00:07:00,456 --> 00:07:03,778
I'm going to get that initial root token, I'm going to

109
00:07:03,784 --> 00:07:07,462
pop it in here. And we are now in and

110
00:07:07,516 --> 00:07:11,046
good to go. However, one thing that I do want

111
00:07:11,068 --> 00:07:14,822
to show is remember this pod used to just

112
00:07:14,876 --> 00:07:18,438
show running, but zero out of one was actually ready. So now if

113
00:07:18,444 --> 00:07:22,498
we run Kubectl, get pods namespace

114
00:07:22,594 --> 00:07:26,022
vault, we can see that it is now officially running.

115
00:07:26,076 --> 00:07:29,714
So our UI is up, Vault is deployed in our Kubernetes cluster.

116
00:07:29,762 --> 00:07:33,578
And. And now we're ready to officially start injecting secrets. And that's

117
00:07:33,594 --> 00:07:37,326
how you can get vault up and running in any Kubernetes. Cluster, thank you

118
00:07:37,348 --> 00:07:37,900
so much for watching.

