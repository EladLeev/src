1
00:00:25,570 --> 00:00:29,542
You hi, Tim Spann here and

2
00:00:29,596 --> 00:00:34,326
welcome to my talk on building

3
00:00:34,428 --> 00:00:37,778
modern data streams applications with Python.

4
00:00:37,954 --> 00:00:41,654
And we'll cover this in a DevOps manner, but this is important way

5
00:00:41,692 --> 00:00:45,510
to get started. I'm Tim Spann. I'm a developer advocate at stream native

6
00:00:46,810 --> 00:00:50,862
and you could scan all my info here. I've been doing different

7
00:00:50,916 --> 00:00:54,842
types of systems for a long time, focusing on streaming applications,

8
00:00:54,906 --> 00:00:58,302
Python, Java at a lot of different big data

9
00:00:58,356 --> 00:01:02,302
and streaming companies over the years. Every week

10
00:01:02,356 --> 00:01:05,826
I put out a newsletter. The flipstack weekly covers all

11
00:01:05,848 --> 00:01:09,458
the big open source tools out there. Lots of good

12
00:01:09,624 --> 00:01:12,478
videos, podcasts, articles,

13
00:01:12,574 --> 00:01:15,250
tools, examples, demos,

14
00:01:15,750 --> 00:01:19,318
everything I could find. That was cool that week I put it in there.

15
00:01:19,404 --> 00:01:23,446
It's archived lots of different ways to take a look at it, check it

16
00:01:23,468 --> 00:01:28,342
out. So when you're building modern

17
00:01:28,406 --> 00:01:32,506
data applications, it's not something you could do with one tool,

18
00:01:32,688 --> 00:01:36,966
one system, one application requires

19
00:01:36,998 --> 00:01:40,250
a team, that usually requires a team of people,

20
00:01:40,400 --> 00:01:43,518
but if the application is small enough, you could do this by yourself.

21
00:01:43,604 --> 00:01:47,054
If you've got the right tools. Python makes it pretty

22
00:01:47,092 --> 00:01:50,394
easy. Pulsar in the middle is a hub to distribute

23
00:01:50,442 --> 00:01:53,778
your data wherever it needs to go, and you can use a lot of

24
00:01:53,864 --> 00:01:57,582
different data processing and data query

25
00:01:57,646 --> 00:02:01,650
tools to make this easier. Depends on what you're familiar with

26
00:02:01,720 --> 00:02:05,466
and what you like working with. Examples are Apache Nifi,

27
00:02:05,518 --> 00:02:09,170
Apache Flink, Apache Spark, Apache Zeppelin,

28
00:02:09,250 --> 00:02:12,680
Trino. Lots of good products out there,

29
00:02:13,050 --> 00:02:16,470
going to start off and do most of this talk is going to be around

30
00:02:16,540 --> 00:02:19,690
Pulsar which is a streaming tool.

31
00:02:19,840 --> 00:02:23,578
It is growing, a lot of people are using it,

32
00:02:23,744 --> 00:02:27,146
over 560 continuous to the project

33
00:02:27,248 --> 00:02:31,050
out there, over 7000 people in the slack,

34
00:02:31,210 --> 00:02:34,974
tons of work going on, logs of organizations using it,

35
00:02:35,092 --> 00:02:38,622
so definitely check it out. Pulsar has some pretty cool

36
00:02:38,676 --> 00:02:42,458
features that make writing modern applications

37
00:02:42,634 --> 00:02:46,450
and using DevOps to put them into wherever environment you

38
00:02:46,600 --> 00:02:49,874
are using very easily. IoT is

39
00:02:49,912 --> 00:02:53,986
very easy to manage your clusters from one place, and again,

40
00:02:54,088 --> 00:02:57,662
whether it's through rest, endpoints, command line tools,

41
00:02:57,806 --> 00:03:01,554
or you automate it as much as you can through the different DevOps

42
00:03:01,602 --> 00:03:05,046
tools that you have out there, it's very easy to do so,

43
00:03:05,228 --> 00:03:10,022
and it's very easy to scale things out and up elastically

44
00:03:10,086 --> 00:03:14,170
when you need it. And again through those APIs or DevOps tools.

45
00:03:14,510 --> 00:03:18,006
It was designed for the cloud. So where the compute

46
00:03:18,038 --> 00:03:21,034
happens and where the storage happens, two different places,

47
00:03:21,162 --> 00:03:24,842
very easy to partition,

48
00:03:24,906 --> 00:03:28,894
rebalance things, don't have to take things down, could spread this

49
00:03:28,932 --> 00:03:32,830
around the world and again do that through automation

50
00:03:33,490 --> 00:03:37,106
and it's very easy to do

51
00:03:37,128 --> 00:03:40,898
a lot of different use cases there. And since it has support for a lot

52
00:03:40,904 --> 00:03:44,098
of different protocols and libraries, very easy for you

53
00:03:44,104 --> 00:03:47,606
to take what you have now and move it over. Not a lot of

54
00:03:47,628 --> 00:03:51,078
extra work when it comes down to it.

55
00:03:51,164 --> 00:03:53,670
When you're doing messaging, streaming,

56
00:03:54,170 --> 00:03:57,874
you've got a unit of data. Now, some people call it an event,

57
00:03:58,012 --> 00:04:01,340
an object message,

58
00:04:02,030 --> 00:04:05,526
we'll call it a message. And there's a couple of components

59
00:04:05,558 --> 00:04:09,146
for it. Obviously you've got your data. That's the

60
00:04:09,168 --> 00:04:12,634
payload, the value. This is what you care about most.

61
00:04:12,832 --> 00:04:16,014
This is your record, whatever it is,

62
00:04:16,052 --> 00:04:19,120
wherever IoT came from, we put that in the value.

63
00:04:19,490 --> 00:04:22,618
This is the most important thing to you because this is your data. You want

64
00:04:22,644 --> 00:04:26,798
to distribute, deliver, wherever it's going. Now, in pulsar,

65
00:04:26,894 --> 00:04:30,930
that's raw bytes. Now you can have that message data

66
00:04:31,000 --> 00:04:34,274
conform to different data schemas. And obviously since

67
00:04:34,312 --> 00:04:37,238
it's raw bytes, I can put anything I want in there. So I could put

68
00:04:37,244 --> 00:04:40,418
a PDF, but I could also put JSON, Avro,

69
00:04:40,514 --> 00:04:43,718
Podobuff, all the different data types in

70
00:04:43,724 --> 00:04:47,142
there. Really nice. Now a commonly used thing,

71
00:04:47,196 --> 00:04:50,614
and it's important for performance queries,

72
00:04:50,662 --> 00:04:54,394
a lot of different things. Is a key, a key per

73
00:04:54,512 --> 00:04:58,106
one of these messages. Please set this

74
00:04:58,288 --> 00:05:00,810
comes in useful for partitioning,

75
00:05:01,250 --> 00:05:04,846
compacting data, making things more performant, and also for

76
00:05:04,868 --> 00:05:08,666
your own use. Cases of finding that message later, maybe for debugging

77
00:05:08,778 --> 00:05:12,266
or just being able to do value lookups.

78
00:05:12,378 --> 00:05:15,986
This key can also be really important if

79
00:05:16,008 --> 00:05:19,678
you want to keep the latest version with some of the newest APIs.

80
00:05:19,774 --> 00:05:23,490
The table API lets you keep and

81
00:05:23,560 --> 00:05:27,634
access these very quickly. So definitely set

82
00:05:27,672 --> 00:05:31,062
a key. It's a good property to have for

83
00:05:31,116 --> 00:05:34,134
any use case. Do it. If you want to have more key

84
00:05:34,172 --> 00:05:37,046
value sets, a bunch of properties, you can add as many as you want to

85
00:05:37,068 --> 00:05:40,810
a message. Obviously don't put a whole database in there. That's kind of silly.

86
00:05:41,230 --> 00:05:45,302
Set a name for who produced this record. It's good for debugging,

87
00:05:45,366 --> 00:05:49,226
auditing, all kinds of things. Just do it. Otherwise we

88
00:05:49,248 --> 00:05:52,218
put a really dumb name in there. So put your own in there, make it

89
00:05:52,224 --> 00:05:56,014
smart. Every message is going to have a sequence id.

90
00:05:56,132 --> 00:05:59,550
This is so things are ordered. You don't have to do anything

91
00:05:59,620 --> 00:06:02,958
for it, but if you want to query it or access it, that is available

92
00:06:03,044 --> 00:06:07,390
so you know what's going on. Now, we talked about bytes,

93
00:06:07,810 --> 00:06:11,150
raw bytes. Might be hard to have a contract

94
00:06:11,230 --> 00:06:14,514
between your different systems, different users of data.

95
00:06:14,712 --> 00:06:18,806
You probably want a schema for your data. If it's structured or

96
00:06:18,828 --> 00:06:22,262
semi structured. Fortunately, pulsar handles this

97
00:06:22,316 --> 00:06:25,590
for you. You don't have to spin up something else,

98
00:06:25,740 --> 00:06:29,286
don't have to use some third party tool. Schema registry

99
00:06:29,318 --> 00:06:33,690
is built in, don't even have to think about it. So in Python

100
00:06:34,350 --> 00:06:37,420
I can just create a record,

101
00:06:38,110 --> 00:06:41,690
put data in it, tell the producer

102
00:06:42,430 --> 00:06:46,158
what type of schema it is, and it'll build it for me. Ready to

103
00:06:46,164 --> 00:06:49,200
go. It'll version Iot if I change it. It's nice.

104
00:06:49,650 --> 00:06:53,594
Now, by default we support Avro, Protobuff, and JSON.

105
00:06:53,722 --> 00:06:57,294
Those are the most common. This is flexible,

106
00:06:57,342 --> 00:07:00,146
so if you need to add more types of schemas, you could do that,

107
00:07:00,168 --> 00:07:03,282
but those are the most common. Reproduce it,

108
00:07:03,416 --> 00:07:06,674
person on the other side reads it, use that schema,

109
00:07:06,722 --> 00:07:09,480
deserializes it. We're good to go.

110
00:07:11,050 --> 00:07:14,040
So we've got data, we know what it looks like. That's great.

111
00:07:14,490 --> 00:07:17,474
A quick look into some new DevOps stuff.

112
00:07:17,612 --> 00:07:21,610
Recently there's been the addition for pulsar of a pulsar shell.

113
00:07:22,350 --> 00:07:25,866
This lets you interactively, or if you want to

114
00:07:25,888 --> 00:07:29,226
run a set of commands in a

115
00:07:29,248 --> 00:07:33,246
list. Again, easy to DevOps at. The pulsar shell is

116
00:07:33,268 --> 00:07:36,960
pretty cool. It envelops all the different

117
00:07:37,810 --> 00:07:41,710
command line interfaces that you could do. So administration,

118
00:07:42,950 --> 00:07:46,130
sending, receiving messages, configuration.

119
00:07:46,710 --> 00:07:51,346
Great system to have. Now, one unique thing with

120
00:07:51,528 --> 00:07:54,638
pulsar is support for different protocols.

121
00:07:54,814 --> 00:07:58,534
So to show this to you in a way that makes sense,

122
00:07:58,732 --> 00:08:02,546
I put in my cat, his name is splute,

123
00:08:02,738 --> 00:08:06,550
and he's showing you the four cool ways

124
00:08:06,700 --> 00:08:10,790
to get your streams out there or into the data stream.

125
00:08:10,950 --> 00:08:14,540
We could use mop, which is MQTT common in

126
00:08:14,910 --> 00:08:18,460
know you get all these devices floating around here,

127
00:08:18,910 --> 00:08:21,978
pop that data out of there, get that into your stream.

128
00:08:22,154 --> 00:08:25,518
AoP, little less common, but you'll see that in a lot of

129
00:08:25,524 --> 00:08:29,626
old enterprises, whether that's AMQP or RabbitMQ,

130
00:08:29,818 --> 00:08:33,666
we can take part of those messages. Kop is

131
00:08:33,688 --> 00:08:37,182
for Kafka. We could talk and receive

132
00:08:37,246 --> 00:08:41,246
Kafka messages. And finally, sometimes you want to do websockets,

133
00:08:41,358 --> 00:08:44,020
very easy to do in Python, so you could do that.

134
00:08:45,450 --> 00:08:48,818
We support full Kafka protocol,

135
00:08:48,914 --> 00:08:52,134
so you use all the existing Kafka libraries, including the ones

136
00:08:52,172 --> 00:08:55,778
for Python, and it'll just act as a Kafka

137
00:08:55,874 --> 00:08:59,234
broker. So this is nice. If you have some legacy

138
00:08:59,282 --> 00:09:03,034
Kafka apps, you can have them come right through. Very easy to

139
00:09:03,072 --> 00:09:06,460
mix and match Pulsar and Kafka makes it easy.

140
00:09:06,990 --> 00:09:10,202
There's a big ecosystem out there with

141
00:09:10,256 --> 00:09:14,650
all the different things that you could use within pulsar

142
00:09:14,810 --> 00:09:18,366
again, we mentioned those different protocol handlers, ton of

143
00:09:18,388 --> 00:09:22,206
client libraries. So say you don't want to always do Python. You could

144
00:09:22,228 --> 00:09:26,114
do Java, go node JS R C

145
00:09:26,152 --> 00:09:30,114
Plus plus C sharp, Scala, ton of other ones gives you

146
00:09:30,152 --> 00:09:33,858
lots of different options for programming. This is a great way to

147
00:09:33,864 --> 00:09:37,426
have your Python app talk to other apps, different systems or

148
00:09:37,448 --> 00:09:41,222
tools, lots of connectors. So if you don't want to write code,

149
00:09:41,356 --> 00:09:44,934
or maybe don't want to write code for the source, have one of these

150
00:09:44,972 --> 00:09:49,094
connectors do it for you. Just do a little configuration. Again, DevOps app,

151
00:09:49,212 --> 00:09:52,602
so you can automate that very easily and

152
00:09:52,656 --> 00:09:56,106
have the data come into the stream very easily. You write some

153
00:09:56,128 --> 00:09:59,754
functions and I'll show you a little about that. If you want to process your

154
00:09:59,792 --> 00:10:04,074
data once it's in the system, all the major ones are out there. Trino Presta

155
00:10:04,122 --> 00:10:06,480
Spark, flank lambda very easy.

156
00:10:07,570 --> 00:10:11,674
Once your data gets huge, if you don't want to store it all in pulsar,

157
00:10:11,722 --> 00:10:15,246
we can automatically tier that out to the major cloud storage

158
00:10:15,278 --> 00:10:19,042
or hadoop, whatever makes sense for your environment. Very easy

159
00:10:19,096 --> 00:10:23,294
to do. Now one of the cool things you could do with Python

160
00:10:23,342 --> 00:10:27,046
and pulsar is write functions. What's nice here is it's kind

161
00:10:27,068 --> 00:10:31,126
of like your own little AWS lambda. Wherever you're running this,

162
00:10:31,308 --> 00:10:35,074
you write a function in Python or another language like Java

163
00:10:35,122 --> 00:10:39,530
go. You deploy this out there and

164
00:10:39,600 --> 00:10:43,498
very easily it is ready to

165
00:10:43,504 --> 00:10:47,478
be distributed and you could subscribe it to multiple topics.

166
00:10:47,574 --> 00:10:50,694
You could change this on the fly with DevOps

167
00:10:50,742 --> 00:10:54,894
automation. So I could decide, oh, let me change what topics come

168
00:10:54,932 --> 00:10:58,954
in, decide what topic comes out, change what the log topic

169
00:10:59,002 --> 00:11:02,654
is. So something comes into your function which is

170
00:11:02,692 --> 00:11:06,718
called every time an event or message hits the topic,

171
00:11:06,894 --> 00:11:10,082
runs your code, and your code does whatever you want it to do. Could call

172
00:11:10,136 --> 00:11:14,222
ML models, anything from any Python library

173
00:11:14,366 --> 00:11:18,914
runs that code, and by default it could just return it to the output

174
00:11:18,962 --> 00:11:22,146
topic that's been applied. And again that could be changed

175
00:11:22,178 --> 00:11:25,686
with automation or within your code. You could have it

176
00:11:25,708 --> 00:11:29,210
decide to go to another topic based on the data

177
00:11:29,280 --> 00:11:32,938
or based on some circumstance, maybe an error, what have you.

178
00:11:33,024 --> 00:11:37,110
Very easy to do, and by default using configuration

179
00:11:37,270 --> 00:11:40,730
we could have any of the logs from this go to another

180
00:11:40,800 --> 00:11:44,078
topic. So you could dog food IoT, have it go to another

181
00:11:44,164 --> 00:11:47,918
function or anything that reads pulsar for IoT. To process

182
00:11:48,004 --> 00:11:51,866
your logs makes it very easy. Don't have to worry about command

183
00:11:51,898 --> 00:11:54,958
line stuff all over the place, or how do I get to my logs?

184
00:11:55,134 --> 00:11:58,946
Very easy. This is a small example

185
00:11:59,128 --> 00:12:02,786
of a Python function that I wrote for pulsar. As you can

186
00:12:02,808 --> 00:12:06,226
see, very easy to do. I'm just using a standard

187
00:12:06,328 --> 00:12:09,878
Vader sentiment library, and this is how

188
00:12:09,884 --> 00:12:13,238
it works. You set up a class, give it a name,

189
00:12:13,404 --> 00:12:16,598
it's a function, you set it in it. You can do stuff in

190
00:12:16,604 --> 00:12:19,834
there if you need to. Process is what's called per

191
00:12:19,872 --> 00:12:23,738
event, and that is the input field you get there.

192
00:12:23,904 --> 00:12:27,338
Context gives you access to anything from

193
00:12:27,424 --> 00:12:31,550
pulsar. This gives you access to different topics,

194
00:12:31,890 --> 00:12:35,534
logs, buffers, lots of interesting things

195
00:12:35,572 --> 00:12:39,040
you might need. That's up to you if you want to use it.

196
00:12:40,130 --> 00:12:43,754
By default, it's just a string. You could change

197
00:12:43,812 --> 00:12:48,142
this based on how you want that data coming in. Obviously processing

198
00:12:48,286 --> 00:12:51,486
strings of JSON is trivial in Python,

199
00:12:51,678 --> 00:12:54,718
so I'm going to do a sentiment on one of the fields.

200
00:12:54,814 --> 00:12:58,662
I'm going to create a new output format in JSON by

201
00:12:58,716 --> 00:13:02,310
taking the data that was there already and adding the sentiment,

202
00:13:02,650 --> 00:13:06,854
sending that with that return that's going to go to whatever topic that

203
00:13:06,892 --> 00:13:10,714
was configured to be my output topic. You can't get much easier than

204
00:13:10,752 --> 00:13:14,954
that. And when I want to deploy it again, like we mentioned,

205
00:13:15,152 --> 00:13:18,522
automate that as much as you want. This is the command line tool.

206
00:13:18,656 --> 00:13:22,726
Create your function, point to wherever that data is. If it's java, it's a jar.

207
00:13:22,838 --> 00:13:26,910
If it's Python, it's just that Python file or a zip or a directory.

208
00:13:27,810 --> 00:13:31,434
Give it the name, any inputs you want. This can be as many topics

209
00:13:31,482 --> 00:13:34,670
as you want. Point it to your output topic, give it a name,

210
00:13:34,740 --> 00:13:38,126
and it's deployed. What's nice is lots

211
00:13:38,158 --> 00:13:41,346
of different ways to deploy this by default. If you just want to

212
00:13:41,368 --> 00:13:44,882
run that in pulsar, let pulsar handle it. It could do it.

213
00:13:44,936 --> 00:13:48,806
You deploy Iot separately to kubernetes. There's also

214
00:13:48,988 --> 00:13:52,546
an open source project called function Mesh.

215
00:13:52,738 --> 00:13:57,126
This is a very cool system that will run all your functions for you.

216
00:13:57,308 --> 00:14:00,970
Scale them up, do monitor, manage, all that kind of stuff.

217
00:14:01,120 --> 00:14:04,778
Pretty cool. Opensource project now when I'm going

218
00:14:04,784 --> 00:14:08,186
to automate setting up a cluster, these are

219
00:14:08,208 --> 00:14:11,866
the command line tools to do that. Pulsar is

220
00:14:11,888 --> 00:14:15,520
multi tenant, so I'm going to create a tenant for this application,

221
00:14:15,890 --> 00:14:19,022
create a namespace for this app, check,

222
00:14:19,076 --> 00:14:22,766
make sure they're all there. Then I can create my topics. You see

223
00:14:22,788 --> 00:14:26,126
here, the topic name is a little long. Persistence tells

224
00:14:26,158 --> 00:14:29,906
me store that message until I've acknowledged it,

225
00:14:29,928 --> 00:14:32,882
or told you to delete it, or put an expiration on it.

226
00:14:33,016 --> 00:14:36,914
They could be non persistent if you want. Most people make them persistent

227
00:14:36,962 --> 00:14:40,310
for your own preservation of the data.

228
00:14:40,460 --> 00:14:43,462
Then I've got the tenant. You could have as many tenants as you want,

229
00:14:43,596 --> 00:14:45,800
then the namespace underneath there,

230
00:14:46,250 --> 00:14:50,326
then a topic. You could have millions of topics if you want here I

231
00:14:50,348 --> 00:14:53,526
could list them. Obviously this can be done through the rest endpoint,

232
00:14:53,558 --> 00:14:57,340
and this could be automated with any tool that you like using.

233
00:14:58,510 --> 00:15:02,650
Now, if I'm going to do anything with Python, install the Python

234
00:15:02,990 --> 00:15:06,922
poster client. We are only supporting Python

235
00:15:06,986 --> 00:15:10,814
three, the latest couple of versions. So use

236
00:15:10,852 --> 00:15:15,250
the latest version if you have to, if you're on some weird format.

237
00:15:15,590 --> 00:15:18,894
This has been built for most platforms

238
00:15:18,942 --> 00:15:22,498
out there, intel and Mac and arm and all those fun things.

239
00:15:22,584 --> 00:15:26,130
But if you're running something unique, maybe you got your own environment.

240
00:15:26,470 --> 00:15:29,982
You could build the Python client by building the C

241
00:15:30,136 --> 00:15:33,766
client that is built on takes a little extra work, but you've done

242
00:15:33,788 --> 00:15:37,474
that. I've done that on my own. I did this before the official client

243
00:15:37,522 --> 00:15:40,966
was out, but that's out there now. But just as an exercise, if you're

244
00:15:40,998 --> 00:15:44,106
into building long applications, you could do

245
00:15:44,128 --> 00:15:47,482
that. I recommend going back

246
00:15:47,536 --> 00:15:50,618
a couple of versions depending on where you're going to install this.

247
00:15:50,784 --> 00:15:53,846
Right now we're up to 211, but two,

248
00:15:53,888 --> 00:15:57,486
9210 depends on what cluster you're running.

249
00:15:57,668 --> 00:16:01,386
If you're starting new, let's start with 211. There's a lot of new features

250
00:16:01,418 --> 00:16:05,794
in there, so make it happen. Applications can be really simple.

251
00:16:05,992 --> 00:16:08,930
Import pulsar, create your client,

252
00:16:09,350 --> 00:16:12,654
point it to your cluster again. If you're running in docker

253
00:16:12,702 --> 00:16:16,658
or on your laptop, local host or the name of the machine,

254
00:16:16,834 --> 00:16:20,546
create a producer pointing to that topic,

255
00:16:20,738 --> 00:16:24,322
send a text message, we'll encode Iot UTF eight, close the client,

256
00:16:24,386 --> 00:16:27,000
boom, you sent a message. Pretty easy.

257
00:16:27,370 --> 00:16:31,002
Now, unfortunately, real world's not that easy,

258
00:16:31,056 --> 00:16:34,826
right? You have security, you got all kinds of fun stuff you

259
00:16:34,848 --> 00:16:38,650
got to do well. I can pass all those in with parameters

260
00:16:39,150 --> 00:16:43,260
and use authentication if you want to. OAuth is the most common.

261
00:16:43,710 --> 00:16:46,606
If you want to get a free cloud of this, if you don't want to

262
00:16:46,628 --> 00:16:50,270
install it, your own stream native has a free instance you could use.

263
00:16:50,420 --> 00:16:54,474
It is secured with SSL plus Oauth secure

264
00:16:54,522 --> 00:16:58,354
way to do this, you get a key, boom, point to it, it'll connect

265
00:16:58,392 --> 00:17:01,780
just as fast as the other one. We've got some examples out there.

266
00:17:02,310 --> 00:17:06,078
Now I mentioned schemas, pretty easy to create a schema.

267
00:17:06,174 --> 00:17:09,782
Got to import this extra library here.

268
00:17:09,836 --> 00:17:14,130
I'm going to set up a class using records from that library,

269
00:17:14,290 --> 00:17:17,560
and you put a bunch of fields in there and put your types in there,

270
00:17:18,090 --> 00:17:22,074
create your client like before. But now I'm going to create a schema for

271
00:17:22,112 --> 00:17:25,562
that class. And then when I do a producer, I'm going to pass

272
00:17:25,616 --> 00:17:29,462
that schema in. So now that topic uses that schema

273
00:17:29,526 --> 00:17:32,934
and versions of it. If you send something that doesn't have the schema,

274
00:17:32,982 --> 00:17:36,046
Iot won't meet the contract. Your data quality is not going to work,

275
00:17:36,068 --> 00:17:39,550
and we'll let you send that message. So think about it before you do that,

276
00:17:39,620 --> 00:17:42,878
make sure people agree to it. So I set the record,

277
00:17:43,044 --> 00:17:46,386
send it, and set my key there and we're ready

278
00:17:46,408 --> 00:17:50,066
to go very easy. Full app available at the link below.

279
00:17:50,248 --> 00:17:53,506
Do the same thing with JSon. You see the idea,

280
00:17:53,608 --> 00:17:57,014
really simple. Can use those same records. Maybe you

281
00:17:57,052 --> 00:18:00,770
want one topic with JSON schema, one with Avro.

282
00:18:00,930 --> 00:18:04,680
Depends on your downstream systems. Maybe it's up to you

283
00:18:05,050 --> 00:18:08,822
again. If you want to produce messages, pretty easy.

284
00:18:08,876 --> 00:18:12,406
If you want to consume them, you could put it in a loop

285
00:18:12,518 --> 00:18:16,454
or have some callbacks. It gets its own unique subscription

286
00:18:16,502 --> 00:18:19,466
name. We get the message, we acknowledge it.

287
00:18:19,648 --> 00:18:24,030
Let me point out a couple of things. There subscription

288
00:18:24,850 --> 00:18:28,782
every client has one, or you could share one. What that means

289
00:18:28,836 --> 00:18:33,214
is I have a unique pointer stored in the broker that tells me

290
00:18:33,332 --> 00:18:36,866
where I am. So if I disconnect, come back later, it's going to

291
00:18:36,888 --> 00:18:40,174
put me in the right spot so I don't lose messages,

292
00:18:40,222 --> 00:18:43,566
I don't go out of order. As soon as I acknowledge

293
00:18:43,598 --> 00:18:47,382
it, I move my pointer forward Iot. Going to reread those again.

294
00:18:47,436 --> 00:18:50,886
Unless you want to do another interface and scroll back to an

295
00:18:50,908 --> 00:18:53,478
earlier one, this is great.

296
00:18:53,644 --> 00:18:57,890
If you are done with it after acknowledgement,

297
00:18:57,970 --> 00:19:01,354
it could be cleaned up and deleted if you want to save space,

298
00:19:01,552 --> 00:19:05,206
up to you. Now if I want to use a different protocol

299
00:19:05,238 --> 00:19:08,294
to send messages to pulsar,

300
00:19:08,422 --> 00:19:11,840
I could use the MQTT libraries out there.

301
00:19:12,210 --> 00:19:16,400
Paho has a great one. Same idea. Connect to

302
00:19:17,250 --> 00:19:21,114
Mqtt, give me a client name, send some jSon,

303
00:19:21,162 --> 00:19:24,814
point to the server, use a default mqtt port

304
00:19:24,852 --> 00:19:28,066
of 1883. Obviously you could change that to whatever you

305
00:19:28,088 --> 00:19:31,966
want. You could turn on SSL if you like. Point to my topic,

306
00:19:32,078 --> 00:19:35,302
send the data boom. Makes Iot easy.

307
00:19:35,356 --> 00:19:38,946
If maybe you don't want to use the pulsar libraries

308
00:19:38,978 --> 00:19:42,182
or you have mqtt app.

309
00:19:42,316 --> 00:19:45,814
Same idea for websockets, use that websocket client out

310
00:19:45,852 --> 00:19:50,042
there. There is a little bit unique syntax in here.

311
00:19:50,176 --> 00:19:54,362
Make sure you point to your pulsar server with your rest

312
00:19:54,416 --> 00:19:58,646
point typically 80 80, but you can change it producer.

313
00:19:58,758 --> 00:20:01,994
And again, that tenant namespace and

314
00:20:02,032 --> 00:20:06,366
topic create to it, send a message, encode it.

315
00:20:06,548 --> 00:20:11,034
We have to base 64, encode it, and put it in a special JSON package

316
00:20:11,162 --> 00:20:14,578
to get it over there. But then we'll get it back. We've got examples of

317
00:20:14,584 --> 00:20:18,526
that. If you want to use Kafka library, use the Kafka

318
00:20:18,558 --> 00:20:21,582
python library that's out there in the open source.

319
00:20:21,646 --> 00:20:24,674
Nothing specific to pulsar. Again,

320
00:20:24,792 --> 00:20:28,118
semi json over there. Use any of the standard

321
00:20:28,204 --> 00:20:32,120
kafka. We're just pointing to pulsar now. Same idea.

322
00:20:32,730 --> 00:20:36,742
We talked about deploying functions before. Here's one

323
00:20:36,796 --> 00:20:40,554
specific to that ML little function I did

324
00:20:40,752 --> 00:20:43,942
again point to that Python script,

325
00:20:44,086 --> 00:20:47,530
give it the class name. What's the input? What's the log,

326
00:20:47,680 --> 00:20:51,558
what's the output? There's a couple of other options you could

327
00:20:51,584 --> 00:20:55,454
put in there. I'm doing auto act true. So what that

328
00:20:55,492 --> 00:20:59,102
means is when that function runs just before

329
00:20:59,156 --> 00:21:02,830
it finishes, it's going to acknowledge that it consumed that message.

330
00:21:02,980 --> 00:21:06,846
So if you need to sweep it up or put it into tier storage,

331
00:21:06,958 --> 00:21:10,274
that'll be done. Otherwise, if you don't do that with this

332
00:21:10,312 --> 00:21:14,226
subscription, that data is going to wait around till the system is out of

333
00:21:14,248 --> 00:21:17,126
space, or give you a warning to say, hey,

334
00:21:17,308 --> 00:21:20,120
you've got these things lying around for a while.

335
00:21:21,290 --> 00:21:24,934
We have a free book out there for

336
00:21:25,052 --> 00:21:28,270
learning. Pulsar is written by my friend David.

337
00:21:28,370 --> 00:21:31,558
He's been doing pulsar for a long time. He's a committer,

338
00:21:31,734 --> 00:21:34,874
does some really cool talks. He's done

339
00:21:34,912 --> 00:21:38,314
some talks with me recently. Definitely check this

340
00:21:38,352 --> 00:21:42,110
book out. Scan that, get the full pDF.

341
00:21:42,850 --> 00:21:45,818
It's the complete edition, not an early release.

342
00:21:45,914 --> 00:21:49,006
Every chapter, all the example code.

343
00:21:49,188 --> 00:21:52,510
It is great. Covers everything in pulsar.

344
00:21:52,950 --> 00:21:56,466
This is the way to go. Download it. How can you

345
00:21:56,488 --> 00:22:00,290
complain about a free book? This is me

346
00:22:00,440 --> 00:22:02,180
around halloween time.

347
00:22:03,270 --> 00:22:06,134
Scan my thing. If you want more information,

348
00:22:06,332 --> 00:22:09,970
I've got a bunch of python and pulsar resources.

349
00:22:10,130 --> 00:22:13,686
Or contact me through LinkedIn or through

350
00:22:13,788 --> 00:22:17,314
Twitter if it's still out there. Or definitely check out my GitHub.

351
00:22:17,362 --> 00:22:21,286
I've got a ton of examples with different languages, different systems,

352
00:22:21,478 --> 00:22:24,966
what have you. Make it pretty easy. So we've

353
00:22:24,998 --> 00:22:28,234
covered the slides, you'll have them as part

354
00:22:28,272 --> 00:22:31,338
of this talk, so you don't have to worry

355
00:22:31,434 --> 00:22:34,800
doing screen prints and stuff. You'll get everything you need there.

356
00:22:35,810 --> 00:22:39,966
But let's look at some demos. So this one's pretty simple,

357
00:22:40,148 --> 00:22:43,774
but I think it's pretty cool. On a raspberry

358
00:22:43,822 --> 00:22:48,270
PI, I've got a PI

359
00:22:48,350 --> 00:22:52,174
aware device, a usb stick and a little antenna

360
00:22:52,222 --> 00:22:55,678
so I could look at all the planes flying over my house over

361
00:22:55,704 --> 00:22:59,206
here in New Jersey, and that'll work anywhere where you have

362
00:22:59,308 --> 00:23:02,898
planes. I'm near a couple of airports,

363
00:23:03,074 --> 00:23:06,034
so I see know there's the Newark airport,

364
00:23:06,162 --> 00:23:09,414
JFK, some other ones, some smaller airports

365
00:23:09,462 --> 00:23:12,902
down here, and military ones, so you get to see different planes

366
00:23:12,966 --> 00:23:16,874
flying around. Pretty cool. What's nice is

367
00:23:17,072 --> 00:23:20,490
I wrote an application here that runs on the PI,

368
00:23:20,930 --> 00:23:25,166
and that is a python app that is

369
00:23:25,348 --> 00:23:28,778
consuming data from that device,

370
00:23:28,954 --> 00:23:32,366
pushing it out into pulsar, and then we

371
00:23:32,388 --> 00:23:35,778
could use it for some fun stuff. I have a

372
00:23:35,944 --> 00:23:39,394
function out there that takes it and cleans it up, turns it into

373
00:23:39,432 --> 00:23:45,202
other records, and they could do things like consume it from

374
00:23:45,256 --> 00:23:49,170
spark or with flink. Pretty straightforward

375
00:23:49,250 --> 00:23:52,742
here, and it's a lot of data. If we go into

376
00:23:52,796 --> 00:23:56,166
here, I could show you how easy that is to run it. It is

377
00:23:56,188 --> 00:23:59,510
just sending big chunks of data. It is the simplest

378
00:23:59,590 --> 00:24:02,682
app you're ever going to see,

379
00:24:02,736 --> 00:24:06,746
but I'll show it to you anyway. Source codes available. So what

380
00:24:06,768 --> 00:24:09,802
we do here is import all those fun things

381
00:24:09,856 --> 00:24:13,354
you need. I like to get

382
00:24:13,472 --> 00:24:16,766
information on my device as extra fields, so look at the

383
00:24:16,788 --> 00:24:20,538
temperature, all those things on the pie. Get the arguments for where we're

384
00:24:20,554 --> 00:24:24,080
sending this to pulsar because you got a bunch of different options there.

385
00:24:24,690 --> 00:24:28,500
And then we connect to pulsar if we have security.

386
00:24:29,030 --> 00:24:32,094
And then I'm going to create a unique id. I like to have a unique

387
00:24:32,142 --> 00:24:35,310
id for every record I send again for that key.

388
00:24:35,480 --> 00:24:39,526
So I'm calling an

389
00:24:39,548 --> 00:24:42,806
API that you saw displayed as a

390
00:24:42,828 --> 00:24:45,846
web page on that device, grabbing it,

391
00:24:45,948 --> 00:24:49,494
grabbing that raw ugly JSon and just

392
00:24:49,532 --> 00:24:53,770
sending it to a message. And then I've got a function that cleans it up.

393
00:24:53,920 --> 00:24:57,354
But just to give you an example of what you could do here on this

394
00:24:57,392 --> 00:25:01,126
device, I also have some sensors.

395
00:25:01,318 --> 00:25:05,022
Again, since there's so few raspberry pis left in the world,

396
00:25:05,156 --> 00:25:08,270
I'm trying to get as much out of these devices as possible.

397
00:25:08,420 --> 00:25:12,046
So I've got some sensors running on there. And again, all the

398
00:25:12,068 --> 00:25:16,526
code is out there. This is running a couple of sensors formatting

399
00:25:16,558 --> 00:25:19,970
as JSON and sending it to pulsar.

400
00:25:20,470 --> 00:25:23,380
If we look at this code here,

401
00:25:24,150 --> 00:25:27,618
you'll see again another Python app and I'll

402
00:25:27,714 --> 00:25:29,320
show you the code here.

403
00:25:30,490 --> 00:25:33,990
And pretty straightforward bunch of imports

404
00:25:34,330 --> 00:25:37,706
and a bunch of fields for this one I put required on

405
00:25:37,728 --> 00:25:40,886
there because I need that downstream when I'm going to drop

406
00:25:40,918 --> 00:25:44,582
this into a data lake.

407
00:25:44,726 --> 00:25:48,698
So I don't want to have any empty fields there.

408
00:25:48,864 --> 00:25:52,614
Sort of requirement for that data sync. So I grab

409
00:25:52,662 --> 00:25:56,366
the data from those sensor, format it the way I

410
00:25:56,388 --> 00:26:00,222
want, put it into the record in the format that I want,

411
00:26:00,276 --> 00:26:03,626
and then send it with a unique key, and then it's just a loop.

412
00:26:03,738 --> 00:26:07,154
So you see when we run it, it's just passing through

413
00:26:07,192 --> 00:26:10,706
there. Once it's in pulsar, I could do anything I want with it.

414
00:26:10,808 --> 00:26:14,446
Obviously you can add any kind of deployment scripts

415
00:26:14,478 --> 00:26:18,200
around this. Pretty straightforward, pretty easy,

416
00:26:18,730 --> 00:26:22,354
but makes for a nice way to do applications.

417
00:26:22,482 --> 00:26:25,590
Also have one that does stores. Again,

418
00:26:25,740 --> 00:26:28,762
pretty easy in pulsar to grab stuff from.

419
00:26:28,896 --> 00:26:31,370
This case a websockets.

420
00:26:32,190 --> 00:26:35,020
Pound that data out, send that where it's going.

421
00:26:35,550 --> 00:26:38,954
Same thing for mastodon. Pull that data using

422
00:26:38,992 --> 00:26:43,310
the Python API, send that to pulsar.

423
00:26:43,970 --> 00:26:47,280
Again, pretty straightforward. Make a record,

424
00:26:47,890 --> 00:26:50,240
set a key, send the data.

425
00:26:51,490 --> 00:26:55,566
Pretty easy. Schema is accessible from

426
00:26:55,588 --> 00:26:59,374
the DevOps tools. You could see what's going on, change the

427
00:26:59,412 --> 00:27:02,480
versions, all that sort of fun stuff.

428
00:27:02,930 --> 00:27:06,694
Hope you liked my talk. Ask any questions to

429
00:27:06,732 --> 00:27:09,974
the different channels and I'll be very glad to get

430
00:27:10,012 --> 00:27:13,826
back to you and give you a hand. Thanks for attending

431
00:27:13,858 --> 00:27:17,540
my talk. If you need any other information, feel free to reach out.

