1
00:00:20,650 --> 00:00:23,918
Okay. Hi everyone. Conferences have changed a

2
00:00:23,924 --> 00:00:27,702
little this year. We're doing a lot of virtual conferences, which is really

3
00:00:27,756 --> 00:00:31,206
cool to me because it means we can do more of them. So my

4
00:00:31,228 --> 00:00:34,886
name is Josh Stella. I'm the co founder and chief technology

5
00:00:34,988 --> 00:00:38,354
officer at Fug. And what we do at Fug is

6
00:00:38,412 --> 00:00:41,674
cloud security. But what I'm going to talk about today

7
00:00:41,792 --> 00:00:45,226
is open policy agent addressing cloud security with,

8
00:00:45,328 --> 00:00:48,970
as they call it, OPA. So a little bit

9
00:00:49,040 --> 00:00:52,798
of what we will cover on the agenda. I'm going

10
00:00:52,804 --> 00:00:56,554
to go through an overview of misconfiguration risk

11
00:00:56,602 --> 00:01:00,734
in the cloud era. This is the big attack vector on cloud is

12
00:01:00,772 --> 00:01:04,180
misconfiguration of cloud resources. I'm going to explain thats a little bit

13
00:01:04,790 --> 00:01:08,526
why we believe policy as code, which is what OPA

14
00:01:08,558 --> 00:01:12,814
does, is really mandatory for successful

15
00:01:12,862 --> 00:01:16,638
security and compliance. Manual processes just don't cut it

16
00:01:16,664 --> 00:01:20,054
anymore. I'm going to go into an

17
00:01:20,092 --> 00:01:23,654
introduction of OPA and show you their website and

18
00:01:23,692 --> 00:01:27,350
talk a little bit about the language and so on and some of the

19
00:01:27,420 --> 00:01:31,260
ecosystem of tools that fuge contributes. CTO quite a lot.

20
00:01:32,110 --> 00:01:35,754
We're going CTO drill in to the OPA toolbox for

21
00:01:35,792 --> 00:01:39,740
the cloud security use case. OPA gets used for all kinds of stuff now,

22
00:01:40,110 --> 00:01:43,966
but we're going to drill in for cloud security and

23
00:01:43,988 --> 00:01:47,390
then a little bit on getting started with policy

24
00:01:47,540 --> 00:01:51,760
code using OPA. Now this is pre recorded so we can't take live questions,

25
00:01:52,470 --> 00:01:56,402
but I hope this is at least a really good

26
00:01:56,456 --> 00:02:00,418
introduction. CTO the topic. So what is cloud

27
00:02:00,504 --> 00:02:03,874
misconfiguration? The first thing to understand about it

28
00:02:03,912 --> 00:02:07,686
is it is a major security risk, the major

29
00:02:07,788 --> 00:02:11,826
security risk in cloud. So nearly

30
00:02:11,858 --> 00:02:15,126
all successful attacks on cloud services are the

31
00:02:15,148 --> 00:02:18,346
result of customer misconfiguration, mismanagement and

32
00:02:18,368 --> 00:02:21,350
mistakes, according to Neil McDonald from Gartner.

33
00:02:21,430 --> 00:02:25,322
Gartner just last week put out some new research saying

34
00:02:25,376 --> 00:02:29,286
that cloud misconfiguration is a greater

35
00:02:29,478 --> 00:02:33,854
threat, is a greater attack surface, a greater vulnerability than

36
00:02:33,972 --> 00:02:37,358
workload security, which is all we used to care about.

37
00:02:37,524 --> 00:02:41,322
So this is a big deal. Now we at Fugue

38
00:02:41,386 --> 00:02:45,234
every year do a big survey of folks who are

39
00:02:45,272 --> 00:02:49,842
operating Atscale on cloud and thats 93%

40
00:02:49,896 --> 00:02:53,874
figure came from that survey. Over 300 companies and

41
00:02:53,912 --> 00:02:57,990
organizations operating at large atscale on cloud and 93%

42
00:02:58,140 --> 00:03:02,310
were concerned about a major security breach due to misconfiguration.

43
00:03:02,810 --> 00:03:06,230
I was pleased with that number, but the 7%

44
00:03:06,300 --> 00:03:09,498
that aren't represented probably going to show up in

45
00:03:09,504 --> 00:03:11,980
the news. If you're not worried about this,

46
00:03:12,670 --> 00:03:16,474
you should be because even the experts find

47
00:03:16,512 --> 00:03:20,794
it quite challenging. And by the way, before founding Fuge, I worked at AWS

48
00:03:20,922 --> 00:03:25,130
as a principal solution architect for national security kinds

49
00:03:25,210 --> 00:03:29,086
of environments. So this is a huge problem.

50
00:03:29,268 --> 00:03:32,946
Now, if you were to read the news and

51
00:03:32,968 --> 00:03:36,786
if the news were fully accurate, you would think

52
00:03:36,968 --> 00:03:41,214
that object storage access policies, object storage

53
00:03:41,342 --> 00:03:44,430
would be the number one misconfiguration concern.

54
00:03:44,590 --> 00:03:48,918
But when we asked people what their main security

55
00:03:49,004 --> 00:03:53,062
risk concerns are around misconfiguration, the very first answer

56
00:03:53,196 --> 00:03:56,946
was identity and access management. And I was super pleased

57
00:03:56,978 --> 00:04:01,420
to see this because that's true. IAM is

58
00:04:02,030 --> 00:04:05,546
really a network is

59
00:04:05,568 --> 00:04:09,514
the right way to think about it. And getting it correct is

60
00:04:09,552 --> 00:04:12,958
extraordinarily difficult and complex. And if you get it wrong,

61
00:04:13,044 --> 00:04:16,414
it can have just devastating consequences. So number

62
00:04:16,452 --> 00:04:19,786
one answer, obviously thats are not exclusive

63
00:04:19,818 --> 00:04:22,650
of each other. Number two answer,

64
00:04:22,740 --> 00:04:26,094
security group rules. But essentially firewall rules,

65
00:04:26,222 --> 00:04:29,810
TCP IP based ingress and egress.

66
00:04:30,150 --> 00:04:33,826
Yeah, one of the things that I get

67
00:04:33,848 --> 00:04:37,634
to do it's a lot of fun, is when a breach

68
00:04:37,682 --> 00:04:40,966
hits the press, I and my team will try to

69
00:04:40,988 --> 00:04:45,094
recreate it. And you don't always have enough

70
00:04:45,132 --> 00:04:47,720
information to go on, but you always learn something.

71
00:04:48,270 --> 00:04:51,738
And one of the things that we've learned is that most of

72
00:04:51,744 --> 00:04:55,530
these breaches are a combination of a problem with IAM,

73
00:04:56,750 --> 00:05:00,910
a two liberal ingress ports somewhere, and then

74
00:05:00,980 --> 00:05:04,398
ultimately getting to the object storage access

75
00:05:04,484 --> 00:05:06,640
policies to steal data.

76
00:05:07,890 --> 00:05:11,246
Also very common hack is stealing data at an

77
00:05:11,268 --> 00:05:15,342
s. Three is kind of the one everyone talks about. Happens rarely

78
00:05:15,406 --> 00:05:19,394
because it's just a public bucket. So that is

79
00:05:19,512 --> 00:05:22,834
a simple interpretation versus those

80
00:05:22,872 --> 00:05:26,226
reality. But people also do stuff like stand up crypto

81
00:05:26,258 --> 00:05:30,022
mining in your cloud accounts, there's all kinds of things they can do. And then

82
00:05:30,076 --> 00:05:34,182
fourth among our respondents was encryption in

83
00:05:34,236 --> 00:05:37,778
transit disabled. All right,

84
00:05:37,964 --> 00:05:41,114
so what we've learned over years of doing this,

85
00:05:41,152 --> 00:05:45,478
and this is kind of allfube does, is that cloud misconfiguration

86
00:05:45,574 --> 00:05:48,886
is pretty much universally overlooked

87
00:05:48,918 --> 00:05:52,254
in some way or another. I have yet

88
00:05:52,292 --> 00:05:55,374
to see an organization that had it perfect.

89
00:05:55,572 --> 00:05:58,666
And there are reasons for this, valid reasons.

90
00:05:58,778 --> 00:06:02,714
That quote from Gartner sounded a little pejorative

91
00:06:02,842 --> 00:06:06,526
of cloud users, of customers, of cloud. It's actually

92
00:06:06,548 --> 00:06:09,954
very hard to get thats stuff right. So every time somebody hits the news,

93
00:06:09,992 --> 00:06:13,426
I feel bad for them. I don't think they're fools. It's hard.

94
00:06:13,608 --> 00:06:18,418
Many dangerous cloud misconfigurations are not recognized

95
00:06:18,594 --> 00:06:21,320
as misconfigurations by the security team.

96
00:06:22,170 --> 00:06:25,794
And there is a reason for that, which is most security teams

97
00:06:25,842 --> 00:06:29,542
are at least somewhat reliant or heavily reliant on compliance

98
00:06:29,606 --> 00:06:32,918
frameworks to give them guidance, best practices.

99
00:06:33,094 --> 00:06:36,202
There's NIST, there's soc two,

100
00:06:36,336 --> 00:06:39,754
there's cis benchmark. Well, those are

101
00:06:39,792 --> 00:06:43,546
behind the times. And so all kinds

102
00:06:43,578 --> 00:06:47,402
of dangerous misconfigurations can exist

103
00:06:47,546 --> 00:06:51,546
even when you're doing things right according to those standards.

104
00:06:51,738 --> 00:06:55,102
So the security team doesn't see it as a misconfiguration,

105
00:06:55,246 --> 00:06:58,786
because the compliance framework they're reliant on doesn't see it as

106
00:06:58,808 --> 00:07:02,626
a misconfiguration. And therefore they are exceedingly common

107
00:07:02,728 --> 00:07:06,006
in enterprise cloud environments. And because of

108
00:07:06,028 --> 00:07:10,262
the changing nature of cloud, the constant mutation of

109
00:07:10,316 --> 00:07:15,426
infrastructure in cloud, this is akin to needles continuously

110
00:07:15,618 --> 00:07:18,886
appearing in a haystack. So a little

111
00:07:18,908 --> 00:07:22,570
bit about hacker strategy, and by the way, all these things relate back to policy

112
00:07:22,640 --> 00:07:26,646
as code, so stick with me here. Hacker strategy

113
00:07:26,678 --> 00:07:30,090
has evolved over the years, kind of the traditional

114
00:07:30,450 --> 00:07:33,742
Hollywood version. Know bad

115
00:07:33,796 --> 00:07:37,342
actors breaking in and stealing your data is that they first

116
00:07:37,396 --> 00:07:41,338
identify the target organization and then they search for vulnerabilities,

117
00:07:41,434 --> 00:07:44,814
or maybe use phishing or something to create vulnerabilities

118
00:07:44,942 --> 00:07:48,242
and then attack and steal data. This does still

119
00:07:48,296 --> 00:07:52,274
happen in the world. A relatively recent example of this

120
00:07:52,312 --> 00:07:56,120
was North Korea did not like a movie that Sony pictures made,

121
00:07:56,570 --> 00:08:00,066
and so stole their email and they targeted

122
00:08:00,098 --> 00:08:03,494
Sony. But this is not how most main real

123
00:08:03,532 --> 00:08:07,522
approaches happen anymore. What instead is happening is

124
00:08:07,596 --> 00:08:11,366
that the bad actors, often in organized networks or distributed

125
00:08:11,398 --> 00:08:14,938
networks, are running automation to find

126
00:08:15,024 --> 00:08:18,666
misconfigured resources. And a

127
00:08:18,688 --> 00:08:22,480
friend of mine who just focuses on this area

128
00:08:22,930 --> 00:08:26,960
told me that the average length of time between

129
00:08:27,650 --> 00:08:31,166
a resource going on the Internet can IP address or a DNS record or

130
00:08:31,188 --> 00:08:34,674
whatever, and it getting scanned for vulnerabilities is

131
00:08:34,712 --> 00:08:38,174
about seven minutes. Once it's

132
00:08:38,222 --> 00:08:41,842
found, the bad guys are going to hit it even faster than that.

133
00:08:41,896 --> 00:08:45,266
I've seen as fast as multiple times a second where

134
00:08:45,288 --> 00:08:49,346
bad guys are examining your critical infrastructure.

135
00:08:49,458 --> 00:08:53,286
That's Internet facing, looking for those ways in. So what

136
00:08:53,308 --> 00:08:57,062
the bad guys do is they run all this automation, they constantly run it,

137
00:08:57,196 --> 00:09:00,074
and they get up in the morning and they get their coffee and they see,

138
00:09:00,112 --> 00:09:04,314
oh, there's a bank with a vulnerability, oh, there's a

139
00:09:04,432 --> 00:09:08,250
major manufacturer, and then they already know

140
00:09:08,400 --> 00:09:11,290
what the misconfiguration is and how they can exploit it,

141
00:09:11,360 --> 00:09:15,486
because that's what their automation has looking for. So if you don't think

142
00:09:15,508 --> 00:09:18,794
people care enough about your organization for them to target you, it doesn't

143
00:09:18,842 --> 00:09:22,746
matter. As soon as you're putting things online, bad guys are finding

144
00:09:22,778 --> 00:09:25,300
them. And if you have anything they care about,

145
00:09:26,070 --> 00:09:29,454
they know, they have an enumeration of what you're vulnerable

146
00:09:29,502 --> 00:09:33,038
to. And this is why I said earlier,

147
00:09:33,134 --> 00:09:36,266
the manual approach is no longer good enough. It's just simply

148
00:09:36,318 --> 00:09:40,358
not fast enough. And it's not thorough enough because the bad actors are using

149
00:09:40,524 --> 00:09:43,990
automation and you have to use automation and policy

150
00:09:44,060 --> 00:09:48,070
as code is a really super thorough

151
00:09:48,590 --> 00:09:50,540
and helpful way to do that.

152
00:09:50,910 --> 00:09:54,314
So the attack surface on

153
00:09:54,352 --> 00:09:58,220
cloud is complex and ever expanding. So in the data center days

154
00:09:58,750 --> 00:10:02,118
there is still physical infrastructure in the cloud, but that's all abstracted

155
00:10:02,134 --> 00:10:05,614
away by the cloud service providers, right? But in the old days, you would buy

156
00:10:05,652 --> 00:10:09,386
switches, you would buy servers, you would buy firewalls, you'd shove

157
00:10:09,418 --> 00:10:13,174
them in a rack, and three or five years later you might recapitalize

158
00:10:13,242 --> 00:10:16,546
those. These things were replaced them. In other

159
00:10:16,568 --> 00:10:20,318
words, pretty static, right? Pretty static.

160
00:10:20,494 --> 00:10:23,890
And they were manually deployed, configured and maintained.

161
00:10:24,890 --> 00:10:28,374
That slow manual process gave

162
00:10:28,412 --> 00:10:32,022
all kinds of teams the time to

163
00:10:32,076 --> 00:10:36,242
examine that infrastructure for security and other reasons,

164
00:10:36,386 --> 00:10:39,730
because it moved slowly. I mean, I've sat in change control boards.

165
00:10:39,810 --> 00:10:43,418
We were talking about which ports should be allowed to be open on a

166
00:10:43,424 --> 00:10:46,746
firewall. And there's some canonical document thats says this is

167
00:10:46,768 --> 00:10:50,074
what can be allowed, and there's a teams who own

168
00:10:50,112 --> 00:10:53,566
that. Well, the cloud's completely different than

169
00:10:53,588 --> 00:10:56,746
that. You can try to do that in cloud, but you'll

170
00:10:56,778 --> 00:11:00,174
fail. I've seen organizations try to treat it like a data

171
00:11:00,212 --> 00:11:03,978
center. It doesn't work. Engineers are smarter

172
00:11:03,994 --> 00:11:07,486
than that, and they find ways around your slow

173
00:11:07,518 --> 00:11:11,266
moving controls. The whole point of cloud is to go fast. And so you

174
00:11:11,288 --> 00:11:14,970
have software defined infrastructure, which is highly dynamic,

175
00:11:15,150 --> 00:11:18,898
and all of it is deployed, configured and maintained via APIs.

176
00:11:19,074 --> 00:11:22,546
Now those APIs giveth and taketh

177
00:11:22,578 --> 00:11:25,960
away. What they give is this ability to

178
00:11:26,410 --> 00:11:30,234
go as fast as you want, to experiment, to iterate. And that's awesome.

179
00:11:30,352 --> 00:11:34,090
And that's one of the key benefits of cloud. The APIs also

180
00:11:34,160 --> 00:11:37,686
give us the ability to use software engineering

181
00:11:37,718 --> 00:11:41,434
and computer science to check the efficacy

182
00:11:41,482 --> 00:11:45,406
and safety of our infrastructure. You could not do that

183
00:11:45,428 --> 00:11:48,240
in the data center. It was manual, right?

184
00:11:48,930 --> 00:11:52,994
But those APIs also take away the

185
00:11:53,032 --> 00:11:56,306
friction, the slowness for manual checks to

186
00:11:56,328 --> 00:12:00,162
be effective. So the developers themselves are now building

187
00:12:00,216 --> 00:12:03,330
and modifying their own infrastructure environments.

188
00:12:04,230 --> 00:12:07,446
So this is why we believe strongly that you have to

189
00:12:07,468 --> 00:12:10,886
use policy as code for any kind of security at

190
00:12:10,908 --> 00:12:14,534
scale on cloud. Because in the data center days, the infrastructure security

191
00:12:14,652 --> 00:12:18,342
operations teams would build out infrastructure

192
00:12:18,406 --> 00:12:22,410
and then hand resources off to those

193
00:12:22,480 --> 00:12:25,862
business units that were building applications and validations

194
00:12:25,926 --> 00:12:29,770
and audits were generally performed infrequently and manually.

195
00:12:30,270 --> 00:12:34,080
And the data center never had a control plane API that was complete.

196
00:12:34,450 --> 00:12:38,218
Right? So in the cloud era this gets flipped

197
00:12:38,234 --> 00:12:41,774
upside down. Instead of the developers getting slotted into

198
00:12:41,812 --> 00:12:45,390
existing infrastructure that's run by the infrastructure teams,

199
00:12:45,470 --> 00:12:48,994
the developers are ad hoc building infrastructure. I built

200
00:12:49,112 --> 00:12:52,466
this morning a global network in

201
00:12:52,488 --> 00:12:55,570
about five minutes. Well that would have been a months long

202
00:12:55,640 --> 00:12:59,606
project in the data center world. And this is a reality we

203
00:12:59,628 --> 00:13:03,800
just have to deal with because it is going to continue.

204
00:13:04,170 --> 00:13:08,322
So the world's flipped over. Now the developers are building the infrastructure

205
00:13:08,466 --> 00:13:11,674
via APIs, but we

206
00:13:11,712 --> 00:13:14,986
gain the ability. Now you can still do, and we see this

207
00:13:15,008 --> 00:13:18,010
all the time at fug out there in the world folks that are still doing

208
00:13:18,080 --> 00:13:21,310
manual validation, audits, remediation.

209
00:13:21,730 --> 00:13:25,390
But it's kind of nuts because the bad guys remember, are automated.

210
00:13:25,810 --> 00:13:29,182
So what you can do now is use policy as

211
00:13:29,236 --> 00:13:32,910
code in order to go as fast

212
00:13:32,980 --> 00:13:36,114
or faster and be preventative against these

213
00:13:36,152 --> 00:13:39,634
kinds of risks. And what this really does is the policy has

214
00:13:39,672 --> 00:13:43,154
code then empowers engineers to own the security of their cloud

215
00:13:43,192 --> 00:13:46,898
based systems successfully. You can make it repeatable,

216
00:13:46,994 --> 00:13:50,802
you can make it testable, shareable, scalable, peer reviewed,

217
00:13:50,866 --> 00:13:55,080
all the good stuff you get when you're talking about writing code.

218
00:13:56,410 --> 00:14:00,220
All right, so what is policy as code versus other things?

219
00:14:01,790 --> 00:14:05,942
In traditional programming languages, general purpose programming languages,

220
00:14:06,086 --> 00:14:09,738
what you're really doing is expressing some kind

221
00:14:09,744 --> 00:14:13,434
of logic and data manipulation, data processing and logic.

222
00:14:13,562 --> 00:14:17,178
So your logical functions, and I mean this with a small f, I don't

223
00:14:17,194 --> 00:14:20,698
mean formal functions, although those two are expressed

224
00:14:20,714 --> 00:14:24,046
as code. And then your tooling, your compiler,

225
00:14:24,078 --> 00:14:27,666
your interpreter, your linter, your ide provides a

226
00:14:27,688 --> 00:14:31,026
feedback loop that tells you whether it is

227
00:14:31,048 --> 00:14:34,546
going to work or at least give you a lot of hints, right? If you

228
00:14:34,568 --> 00:14:38,340
try to multiply a string times a floating point,

229
00:14:39,110 --> 00:14:42,486
your compiler or interpreter will probably tell you, at least tell you that you might

230
00:14:42,508 --> 00:14:45,734
not be wanting to do that. That's going to have a weird result, but probably

231
00:14:45,772 --> 00:14:48,870
will tell you you're not allowed to do that without a cast, right?

232
00:14:48,940 --> 00:14:52,634
So a lot of people think who aren't programmers and

233
00:14:52,672 --> 00:14:55,962
my background is in programming and software architecture, think thats

234
00:14:56,016 --> 00:14:59,034
programmers are people that have thats big complex machine in their head

235
00:14:59,072 --> 00:15:02,538
and they just write it down. It doesn't really work that way.

236
00:15:02,704 --> 00:15:06,734
The way it works is you are trying things and

237
00:15:06,772 --> 00:15:10,330
your tooling is telling you where you're making a mistake.

238
00:15:10,490 --> 00:15:14,034
Not all mistakes. You still have to have a lot of judgment and a lot

239
00:15:14,072 --> 00:15:16,850
of taste and your own opinions.

240
00:15:18,070 --> 00:15:21,394
But the tooling is helping you along the way, every step of the way.

241
00:15:21,432 --> 00:15:25,166
Well, policy as code is that same feedback

242
00:15:25,198 --> 00:15:28,726
loop around security. So your security

243
00:15:28,828 --> 00:15:31,720
posture can be expressed, has code,

244
00:15:32,250 --> 00:15:35,734
and then the tooling can tell you if what

245
00:15:35,772 --> 00:15:39,542
you're doing from a security perspective is

246
00:15:39,596 --> 00:15:43,066
correct or dangerous. In the same way the compiler interpreter will

247
00:15:43,088 --> 00:15:46,362
tell you if your functions will function. A policy

248
00:15:46,416 --> 00:15:50,242
has code engine. A good one will tell you if what you're doing is secure

249
00:15:50,326 --> 00:15:53,598
and meets policy. And by the way,

250
00:15:53,764 --> 00:15:57,566
this is an immediate gain in

251
00:15:57,588 --> 00:16:01,482
terms of productivity. Because if, as a developer,

252
00:16:01,546 --> 00:16:05,262
if my tooling is now telling me, hey, you can't have that

253
00:16:05,316 --> 00:16:09,300
particular port open to the whole Internet on a security group,

254
00:16:09,910 --> 00:16:13,214
I don't have to wait for a security audit to tell me that. My tooling

255
00:16:13,262 --> 00:16:17,154
tells me that, and I can fix it without any humans getting in the loop.

256
00:16:17,282 --> 00:16:20,454
So really powerful stuff.

257
00:16:20,652 --> 00:16:24,246
So we at Fug are super excited about open policy

258
00:16:24,348 --> 00:16:28,082
agent. We actually have a lot of formative patents

259
00:16:28,146 --> 00:16:31,322
in the area of policy as code at fugue, and had written our whole

260
00:16:31,376 --> 00:16:34,700
own compiled language around it and so on.

261
00:16:35,230 --> 00:16:38,614
But then when OPA came out, and that's what the creators

262
00:16:38,742 --> 00:16:42,398
call it, OPA. When OPA came out,

263
00:16:42,484 --> 00:16:46,318
we saw what had the potential to be a standard,

264
00:16:46,484 --> 00:16:50,906
and there really has never been one. There have been some absolutely horrible

265
00:16:51,098 --> 00:16:54,400
XML expressions of policy that don't do anything,

266
00:16:55,590 --> 00:16:59,266
don't have any functional aspect, any runtime aspect. But in

267
00:16:59,288 --> 00:17:03,346
terms of an actual working open source standard,

268
00:17:03,448 --> 00:17:07,206
and I don't mean standards body, I mean de facto standard agreed upon by

269
00:17:07,228 --> 00:17:10,454
a lot of folks. That's never been the case with policy as code.

270
00:17:10,492 --> 00:17:15,382
And we saw OPA as a potential real

271
00:17:15,436 --> 00:17:21,882
win in this area. It's also very know,

272
00:17:21,936 --> 00:17:25,706
a lot of times technology pops up that we look at and

273
00:17:25,728 --> 00:17:29,034
I think, yeah, OPA is really nicely done.

274
00:17:29,072 --> 00:17:33,182
It's pretty elegant. It really started taking off when

275
00:17:33,236 --> 00:17:36,110
it became sponsored by the Cloud Native Computing foundation.

276
00:17:36,850 --> 00:17:40,222
Who are the folks that manage Kubernetes? So when we got on board,

277
00:17:40,276 --> 00:17:43,954
it was real early days. Now a those lot of folks are using

278
00:17:43,992 --> 00:17:47,186
this like Pinterest and Netflix and all kinds of

279
00:17:47,208 --> 00:17:50,606
people. I went out to give a talk at the OPa

280
00:17:50,718 --> 00:17:54,450
day at Kubecon

281
00:17:54,790 --> 00:17:58,582
last year, and it was standing room only and all

282
00:17:58,636 --> 00:18:01,320
kinds of big companies there. Okay.

283
00:18:02,890 --> 00:18:06,230
Opa has a language called Rego.

284
00:18:07,450 --> 00:18:10,874
I don't know why people make naming choices, but the language has a different

285
00:18:10,912 --> 00:18:14,694
name. It's Rego. It's a really cool, simple language.

286
00:18:14,822 --> 00:18:18,218
It's really declarative, and it's sort of

287
00:18:18,224 --> 00:18:21,226
like a query language. In fact, I think of it as a query language,

288
00:18:21,258 --> 00:18:25,150
but a declarative one, and it can validate any

289
00:18:25,220 --> 00:18:28,318
JSON data structure. Well, just about everything

290
00:18:28,404 --> 00:18:32,234
can get expressed as JSON these days. So you can compare

291
00:18:32,282 --> 00:18:35,642
that using OPA and using the regular language. You can assert

292
00:18:35,786 --> 00:18:39,806
declarations about what you expect and don't expect there to be in JSON,

293
00:18:39,918 --> 00:18:43,154
and then it will examine it and tell you whether or not

294
00:18:43,192 --> 00:18:46,626
that's true. And that means you can use this for a whole

295
00:18:46,648 --> 00:18:50,102
lot of use cases. So the normal ones that

296
00:18:50,156 --> 00:18:53,318
I saw out at Kubecon and that I read about all

297
00:18:53,324 --> 00:18:57,474
the time are people using OPA on a transaction basis. In microservice

298
00:18:57,522 --> 00:19:00,774
architectures, where individual calls from microservice

299
00:19:00,822 --> 00:19:04,394
a to microservice B to microservice Z are

300
00:19:04,432 --> 00:19:08,278
getting evaluated as to whether or not that call is legal.

301
00:19:08,374 --> 00:19:11,870
We use it in a totally different way at Fug. We use it for

302
00:19:12,020 --> 00:19:15,642
cloud configuration of cloud infrastructure,

303
00:19:15,786 --> 00:19:19,210
and it scales really nicely.

304
00:19:19,290 --> 00:19:23,234
We do over a billion evaluations of policy a day in our

305
00:19:23,272 --> 00:19:26,846
SaaS platform. We have added

306
00:19:26,878 --> 00:19:29,714
quite a bit to the tooling ecosystem, which we'll show you.

307
00:19:29,912 --> 00:19:33,694
We've got an open source project called Regula for checking terraform

308
00:19:33,822 --> 00:19:37,126
using OPA, and we've also got a much

309
00:19:37,228 --> 00:19:41,026
faster evaluator and better dev tools,

310
00:19:41,138 --> 00:19:43,960
breakpoints and stuff like that. Okay,

311
00:19:45,530 --> 00:19:49,606
I'm not going to read through this, but until OPA,

312
00:19:49,638 --> 00:19:53,322
you really kind of had three choices. Two are shown here.

313
00:19:53,456 --> 00:19:56,362
One was a proprietary policy as code,

314
00:19:56,416 --> 00:19:59,894
which was usually expressed as some kind of pseudo

315
00:19:59,942 --> 00:20:02,874
language baked into a vendor's product,

316
00:20:03,072 --> 00:20:06,526
often a kind of subset of SQL or something like this.

317
00:20:06,628 --> 00:20:10,506
And it was specific to that product. You still see that now with lots

318
00:20:10,538 --> 00:20:13,646
of vendors out there? Oh yeah, we do policy as code, and you look under

319
00:20:13,668 --> 00:20:16,640
the hood and it's something that only works with their stuff.

320
00:20:17,270 --> 00:20:20,146
There are all kinds of problems with that. We as an industry are familiar with

321
00:20:20,168 --> 00:20:23,730
those. The second one we don't have on here is people

322
00:20:23,800 --> 00:20:27,410
trying to build policy libraries into general purpose languages.

323
00:20:27,910 --> 00:20:30,758
I personally have seen a lot of these and I don't think any of them

324
00:20:30,764 --> 00:20:35,110
are very good. And the reason is this is its own domain

325
00:20:35,930 --> 00:20:39,686
and it can be done much better with a

326
00:20:39,708 --> 00:20:42,906
domain specific language, which is what Rego is.

327
00:20:43,088 --> 00:20:46,426
So open policy agent I mentioned, you can use it across lots of

328
00:20:46,448 --> 00:20:49,798
use cases. There's a robust ecosystem and community that's

329
00:20:49,814 --> 00:20:53,406
only growing, and that means your engineers will want

330
00:20:53,428 --> 00:20:57,594
to learn it. Whereas if you tell an engineer, go learn some proprietary language

331
00:20:57,642 --> 00:21:01,626
that's baked into some big enterprise

332
00:21:01,658 --> 00:21:04,946
y product that doesn't usually, unless it just

333
00:21:04,968 --> 00:21:08,254
becomes absolutely dominant, doesn't usually become a good career skill,

334
00:21:08,302 --> 00:21:10,690
but OPA is pretty good career skill.

335
00:21:13,350 --> 00:21:17,266
All right. A myth that needs busting

336
00:21:17,378 --> 00:21:21,080
is that to do policy as code in the cloud,

337
00:21:21,610 --> 00:21:25,126
you first have to do infrastructure as code.

338
00:21:25,308 --> 00:21:29,020
That's not true. You can do policy as code

339
00:21:29,630 --> 00:21:33,894
right now, no matter how you built your cloud infrastructure.

340
00:21:34,022 --> 00:21:36,540
In fact, it's important cto get it in place.

341
00:21:38,110 --> 00:21:41,098
If you haven't gone to infrastructure as code yet, it's important to get it in

342
00:21:41,104 --> 00:21:45,114
place up front. Also, very few organizations standardize

343
00:21:45,162 --> 00:21:49,354
on single infrastructure as code products. You might have some terraform and some cloud formation

344
00:21:49,402 --> 00:21:52,846
and some ansible scattered around an organization. Well, if your

345
00:21:52,868 --> 00:21:56,914
policy has code is dependent on infrastructure as code, you now need that

346
00:21:56,952 --> 00:22:00,818
many policy as code solutions with different policies and rules. It's a

347
00:22:00,824 --> 00:22:04,066
really bad idea. Well, you want to check policy up

348
00:22:04,088 --> 00:22:07,814
front, but you need the same policy to work all

349
00:22:07,852 --> 00:22:10,550
the way through into the runtime.

350
00:22:12,010 --> 00:22:16,022
Yeah. So we believe that policy as code really has to take priority over

351
00:22:16,076 --> 00:22:18,600
infrastructure has code. I mean, by all means do both,

352
00:22:19,370 --> 00:22:23,178
but policy as code can be its whole own separate project.

353
00:22:23,344 --> 00:22:26,518
Most of our customers that are implementing it do it that way. They don't

354
00:22:26,534 --> 00:22:29,974
go and impose on the team that's building out terraform stuff to do

355
00:22:30,032 --> 00:22:33,694
policy because it's a separate concern and they just

356
00:22:33,732 --> 00:22:36,926
offer it as a service. And then ultimately, over time,

357
00:22:37,028 --> 00:22:40,670
it becomes important enough that it's mandated.

358
00:22:42,050 --> 00:22:45,970
All right, where you need policy as code

359
00:22:46,040 --> 00:22:49,010
is throughout the entire software development lifecycle.

360
00:22:49,750 --> 00:22:52,766
And they have to be the same policies,

361
00:22:52,958 --> 00:22:56,466
like literally the same files, the same rego files in

362
00:22:56,488 --> 00:22:59,654
OPA's case. Otherwise, you're going to get different

363
00:22:59,692 --> 00:23:03,862
results at different stages, and that is going to sow confusion and

364
00:23:03,996 --> 00:23:08,070
create vulnerabilities. So what do I mean by the whole SDLC?

365
00:23:08,410 --> 00:23:11,834
You got to start in design, or at least you want

366
00:23:11,872 --> 00:23:15,546
to, so that, like for example, we have

367
00:23:15,568 --> 00:23:19,754
this project called Regula that's out on GitHub. I'll show it to you open

368
00:23:19,792 --> 00:23:23,150
source project, and it will check your terraform plan

369
00:23:23,220 --> 00:23:26,750
files against OPA policies. Well, those same

370
00:23:26,820 --> 00:23:30,186
OPA policies can then be loaded into a CI CD

371
00:23:30,218 --> 00:23:33,274
pipeline. So first you check your infrastructure

372
00:23:33,322 --> 00:23:37,134
as code if you're doing that. But next in your CI CD pipeline,

373
00:23:37,182 --> 00:23:40,462
you can check the dev environment post deployment

374
00:23:40,606 --> 00:23:44,110
to see if it's valid and should be allowed to go to stage

375
00:23:44,190 --> 00:23:47,302
or prod. Right. So you can gate your

376
00:23:47,356 --> 00:23:51,240
deployments using policy as code, and then finally

377
00:23:51,850 --> 00:23:55,270
you're not done yet. That's all the day one

378
00:23:55,340 --> 00:23:59,254
stuff, it's day two on. That is hard in this

379
00:23:59,292 --> 00:24:03,130
industry, right? Any of us who've built stuff know that. So you have to be

380
00:24:03,200 --> 00:24:07,078
constantly checking against those same policies against that infrastructure.

381
00:24:07,174 --> 00:24:10,694
Because the stuff is mutable, right? Somebody can have a maintenance

382
00:24:10,742 --> 00:24:14,334
window and go in and make a change, and that's not in

383
00:24:14,372 --> 00:24:17,854
your design or deploy stage, but now it's in your production and maybe

384
00:24:17,892 --> 00:24:20,910
it's a dangerous change. So you need it the whole way through.

385
00:24:21,060 --> 00:24:24,802
I would argue you absolutely need it

386
00:24:24,856 --> 00:24:28,254
in the enforce and I would go enforce

387
00:24:28,302 --> 00:24:31,698
first, then deploy, then design. Unless you want to go

388
00:24:31,784 --> 00:24:33,940
across the board. It's really not that hard.

389
00:24:35,190 --> 00:24:38,850
All right, let's switch from slides.

390
00:24:38,930 --> 00:24:42,200
I normally spend a whole lot of time at the terminal, but this is

391
00:24:42,810 --> 00:24:46,326
less a live demonstration and more a talk on

392
00:24:46,348 --> 00:24:49,846
a topic. So I apologize for all the slides. All right. What I'm showing

393
00:24:49,878 --> 00:24:54,214
you here is actually our diagrams

394
00:24:54,262 --> 00:24:58,474
that we generated in Fug. And the reason I'm showing this is to contextualize how

395
00:24:58,512 --> 00:25:01,762
we're using OPA for cloud configuration.

396
00:25:01,926 --> 00:25:05,482
So just to make clear what fug

397
00:25:05,546 --> 00:25:09,418
is going CTO do in this case is go scan your those environment,

398
00:25:09,594 --> 00:25:12,910
collect all of the configuration information, and then we can do

399
00:25:12,980 --> 00:25:17,250
computation on it, such as drawing diagrams and comparing to

400
00:25:17,320 --> 00:25:20,674
OPA policies. So just a little explanation of what you're looking

401
00:25:20,712 --> 00:25:24,734
at. This is the Internet. It's going into some different VPC

402
00:25:24,782 --> 00:25:27,794
networks through Internet gateways, load balancers,

403
00:25:27,842 --> 00:25:31,222
compute instances, et cetera. All right? And if I select

404
00:25:31,276 --> 00:25:35,286
one of these things, I can get all of its configuration information.

405
00:25:35,468 --> 00:25:39,510
However, using OPA, I can show errors

406
00:25:39,590 --> 00:25:43,420
in compliance. So a bunch of stuff just turned red.

407
00:25:43,790 --> 00:25:47,146
Those are things that are failing our policy as

408
00:25:47,168 --> 00:25:51,114
code evaluations. Okay, so let's take a look at this VPC

409
00:25:51,162 --> 00:25:53,440
network you can see down here.

410
00:25:53,810 --> 00:25:57,470
VPC default security group should restrict all traffic.

411
00:25:58,050 --> 00:26:01,326
Configuring all VPC default security groups should restrict all

412
00:26:01,348 --> 00:26:04,078
traffic encourages. Least I'm not going to read the whole thing.

413
00:26:04,164 --> 00:26:07,938
Basically, every time you build a VPC on AWS, if you didn't know this,

414
00:26:08,024 --> 00:26:11,620
you get with it for free. A highly insecure security group

415
00:26:12,470 --> 00:26:16,200
that allows egress on all ports, which is a really bad idea.

416
00:26:16,970 --> 00:26:20,866
So we're telling you that, and the way we're telling you that is by evaluating

417
00:26:21,058 --> 00:26:25,394
OPA a rego policy against that infrastructure.

418
00:26:25,522 --> 00:26:28,806
Okay, so this is one way. And by the way, there's a version of

419
00:26:28,828 --> 00:26:32,374
this thats is free forever for small scale deployments.

420
00:26:32,422 --> 00:26:36,234
You can go CTO, fug dot Co and use it for free

421
00:26:36,272 --> 00:26:39,734
forever. I think up to 1500 cloud resources,

422
00:26:39,782 --> 00:26:41,440
something like that.

423
00:26:43,570 --> 00:26:47,594
We've organized them in our own world into control families

424
00:26:47,642 --> 00:26:51,438
that you might have heard of, cis GDPR, HIPAA, NIST, et cetera. We have a

425
00:26:51,444 --> 00:26:55,874
few best practices in here where every time we kind of

426
00:26:56,072 --> 00:26:59,346
perform an autopsy on a real breach in the real

427
00:26:59,368 --> 00:27:02,914
world or do a simulation of it, we look for ways we can use

428
00:27:02,952 --> 00:27:06,334
OPA to tell our customers if

429
00:27:06,472 --> 00:27:09,638
they have vulnerabilities that the bad guys used in

430
00:27:09,644 --> 00:27:12,726
that breach. And the answer is almost always thats there are new things that we

431
00:27:12,748 --> 00:27:14,040
learn. So for example,

432
00:27:17,610 --> 00:27:21,354
iam role assumption is a really scary one.

433
00:27:21,392 --> 00:27:25,306
And I think I'm going to do another talk somewhere in this conference about

434
00:27:25,408 --> 00:27:28,460
and show you and steal some data and that'll be fun.

435
00:27:30,210 --> 00:27:33,934
Okay, so that's a little bit on how you can use it at the

436
00:27:33,972 --> 00:27:37,178
runtime. This is running infrastructure.

437
00:27:37,274 --> 00:27:38,480
But what about,

438
00:27:40,450 --> 00:27:43,666
actually, I'm going to change gears here and I'm going to

439
00:27:43,688 --> 00:27:47,282
say what is OPA? I've described it,

440
00:27:47,416 --> 00:27:50,930
but this is openpolyagent.org.

441
00:27:52,150 --> 00:27:56,166
The Styra folks are the inventors of OPA and

442
00:27:56,188 --> 00:27:59,586
the maintainers of it. We mentioned before it's

443
00:27:59,618 --> 00:28:03,362
declarative policy. And here you can see it for Kubernetes envoy

444
00:28:03,426 --> 00:28:06,598
and application code. But what

445
00:28:06,604 --> 00:28:10,486
I want to get to is this bit right here. So you've

446
00:28:10,518 --> 00:28:14,182
got some architectural flexibility. What OPA is, it's a language

447
00:28:14,246 --> 00:28:17,786
and then it's an evaluation of that language in

448
00:28:17,808 --> 00:28:21,210
the runtime. You can use it in two modes,

449
00:28:21,290 --> 00:28:23,870
those same implementation.

450
00:28:24,450 --> 00:28:28,142
You can run it as a demon and basically stand

451
00:28:28,196 --> 00:28:31,550
it up as its own microservice in your service architecture.

452
00:28:32,210 --> 00:28:35,890
Or you can run, it has a library. And this is really nice

453
00:28:35,960 --> 00:28:39,154
because depending on what your use case is,

454
00:28:39,192 --> 00:28:42,686
one might be more appropriate. I mentioned we do lots and lots

455
00:28:42,718 --> 00:28:46,366
and lots of OPA evaluation. So we run as a library because we can't afford

456
00:28:46,398 --> 00:28:50,166
the network overhead, right. It's got to be fast. So we bake it

457
00:28:50,188 --> 00:28:53,014
in, but you can also stand it up as a demon and then you have

458
00:28:53,052 --> 00:28:56,294
less policy to manage,

459
00:28:56,412 --> 00:28:59,740
right. In terms of where the policies live and so on.

460
00:29:00,350 --> 00:29:04,182
It's a really cool thing. And you can go, let's go to their GitHub

461
00:29:04,246 --> 00:29:08,518
here and it's

462
00:29:08,534 --> 00:29:12,430
written in go code. And let's take a look at the adopters.

463
00:29:12,770 --> 00:29:16,154
So these are folks who are using OPA. And you'll

464
00:29:16,202 --> 00:29:19,150
recognize some of these names. Atlassian,

465
00:29:19,730 --> 00:29:22,678
BNY Mellon, Capital one, chef,

466
00:29:22,794 --> 00:29:26,274
Cloudflare, fuge were here. We were actually a very

467
00:29:26,312 --> 00:29:31,794
early adopter this list has gotten much more impressive since

468
00:29:31,832 --> 00:29:35,002
we kind of signed up for using OPA, Goldman Sachs,

469
00:29:35,086 --> 00:29:37,110
Intuit, Netflix, Pinterest,

470
00:29:37,610 --> 00:29:41,346
SAP. So, yelp, when you're

471
00:29:41,378 --> 00:29:44,822
thinking about adopting an open source tool,

472
00:29:44,956 --> 00:29:48,040
and by those way, when you adopt a policy as code tool,

473
00:29:48,970 --> 00:29:51,978
you're making an investment that's going to last for a long time because you're going

474
00:29:51,984 --> 00:29:55,574
to build up a bunch of code, right? And replacing

475
00:29:55,622 --> 00:29:58,810
code is really expensive. I view all lines of code

476
00:29:58,880 --> 00:30:01,660
as financial liabilities to the company.

477
00:30:02,370 --> 00:30:05,774
They are things you're stuck to. Well, this should give

478
00:30:05,812 --> 00:30:08,990
you some ability to sleep at night knowing that

479
00:30:09,060 --> 00:30:12,720
this isn't going anywhere and in fact, it's going to grow.

480
00:30:13,110 --> 00:30:17,170
So that's pretty cool. So, yeah, go check out open policy agent

481
00:30:17,240 --> 00:30:21,346
itself. I'll show you a couple of

482
00:30:21,528 --> 00:30:25,070
projects we've put out. And once I've

483
00:30:25,150 --> 00:30:28,386
given you this tour, I'm actually going to open a code editor and

484
00:30:28,408 --> 00:30:31,286
show you a little bit of code. But if you don't write code, don't be

485
00:30:31,308 --> 00:30:34,674
scared, it'll be fine. I'm going to be really explanatory.

486
00:30:34,722 --> 00:30:38,760
Okay. And you'll read some of these and you'll say, well, I could do that.

487
00:30:39,130 --> 00:30:43,100
All right, so regular is for use with

488
00:30:43,790 --> 00:30:47,482
terraform, and what it will do is

489
00:30:47,536 --> 00:30:51,038
when you do terraform, you go through a step called the plan

490
00:30:51,204 --> 00:30:54,718
stage. Regula will then

491
00:30:54,804 --> 00:30:58,334
examine that plan against a collection of

492
00:30:58,372 --> 00:31:02,614
rego policies, of OPA policies, and it will approve

493
00:31:02,682 --> 00:31:06,030
or reject it based on whether it breaks those policies.

494
00:31:06,190 --> 00:31:10,514
So you can see here we've built into

495
00:31:10,712 --> 00:31:13,950
the open source tool, a bunch of stuff on AWS,

496
00:31:14,110 --> 00:31:17,650
GCP, and Azure, making sure

497
00:31:17,720 --> 00:31:21,574
33 89 isn't open and 22 isn't open, and making

498
00:31:21,612 --> 00:31:24,754
sure kms crypto keys are rotated at some reasonable

499
00:31:24,802 --> 00:31:28,380
frequency, et cetera. So a lot of this stuff comes out of the box.

500
00:31:29,870 --> 00:31:33,340
You need OPA and terraform, or if you want.

501
00:31:33,950 --> 00:31:37,610
Where is the link? Yeah, you can run it has a GitHub action.

502
00:31:38,190 --> 00:31:41,360
So GitHub actions, if you've not used them, are really cool.

503
00:31:41,730 --> 00:31:45,338
They're essentially spinning up containers in GitHub's

504
00:31:45,434 --> 00:31:48,640
infrastructure and running it for you.

505
00:31:49,330 --> 00:31:52,458
So you can just hit our GitHub action. You don't have to

506
00:31:52,484 --> 00:31:55,710
install anything, and you'll

507
00:31:55,790 --> 00:31:58,900
get that answer that way, but you can run it locally, too.

508
00:31:59,990 --> 00:32:04,190
This is actually pretty much just a shell script

509
00:32:04,270 --> 00:32:07,018
and a whole bunch of work we did in Rego.

510
00:32:07,214 --> 00:32:10,582
Rego is quite powerful, and we've solved a lot of the

511
00:32:10,636 --> 00:32:14,386
kind of annoying things about writing infrastructure policies in Rego

512
00:32:14,418 --> 00:32:17,800
for you as libraries, but it's very, very simple project.

513
00:32:19,150 --> 00:32:22,746
We also have out there a project, again open source on

514
00:32:22,768 --> 00:32:27,050
GitHub called Frego, which is the Fugue rego toolset.

515
00:32:28,030 --> 00:32:31,798
We wanted breakpoints. We're writing really fancy Rego at Fug.

516
00:32:31,894 --> 00:32:34,986
We do a lot of this. So we wanted really good developer tools.

517
00:32:35,098 --> 00:32:38,480
So standard OPA comes with a repl

518
00:32:39,250 --> 00:32:42,958
and some other tooling, but we wanted, like I said, breakpoints and the ability to

519
00:32:42,964 --> 00:32:46,686
go and change values and do the stuff that you do as a programmer

520
00:32:46,718 --> 00:32:50,702
when you're writing sophisticated things. So we wrote Frego.

521
00:32:50,846 --> 00:32:54,930
Frego also is a super fast evaluator of

522
00:32:55,000 --> 00:32:58,598
OPA policies on large data sets, which is a

523
00:32:58,604 --> 00:33:03,138
lot of what fugue does. So it runs like a hundred times faster than stock

524
00:33:03,314 --> 00:33:05,960
OpA for that large data set use.

525
00:33:07,530 --> 00:33:10,746
Uh, you're welcome to contribute to these. I mentioned the other one is

526
00:33:10,768 --> 00:33:14,310
all Rego and OPA and a shell script.

527
00:33:14,470 --> 00:33:17,974
This one's written in Haskell. So if we have any haskellers

528
00:33:18,022 --> 00:33:21,534
out there who are into policy as code, you can check this

529
00:33:21,572 --> 00:33:25,390
out. Okay, let's look at some

530
00:33:25,460 --> 00:33:26,800
actual code.

531
00:33:30,530 --> 00:33:33,886
All right, let's just walk through this real quick. In fact, I pointed

532
00:33:33,918 --> 00:33:37,506
out this one to you when

533
00:33:37,528 --> 00:33:41,394
we were going through the GitHub repo. So this is those

534
00:33:41,432 --> 00:33:43,860
kms rotate rule, right?

535
00:33:44,310 --> 00:33:48,162
So we can give it a name. We can call this package rules

536
00:33:48,226 --> 00:33:51,494
kms rotate. Well, that doesn't seem like a big deal, unless you

537
00:33:51,532 --> 00:33:54,840
can't give things names, unless you can organize things.

538
00:33:55,530 --> 00:33:59,190
And this is why having a real domain specific language that's thought

539
00:33:59,260 --> 00:34:03,222
through and is full featured, it has those capabilities.

540
00:34:03,286 --> 00:34:06,726
Okay, so here we're just defining a couple of things. We're saying the resource

541
00:34:06,758 --> 00:34:10,282
type we're looking for is AWS KMS key.

542
00:34:10,416 --> 00:34:14,270
By the way, we can do this cool thing of mapping to controls,

543
00:34:14,690 --> 00:34:17,966
right? So this is mapped to cis two eight,

544
00:34:18,068 --> 00:34:21,306
and then we keep our own enumeration

545
00:34:21,498 --> 00:34:24,866
of the rules we're adding into regular. All right,

546
00:34:24,888 --> 00:34:29,554
so this is just kind of the setup. And then here

547
00:34:29,592 --> 00:34:32,370
is the entire logic block. All right,

548
00:34:32,520 --> 00:34:37,058
so what we're saying here is default,

549
00:34:37,154 --> 00:34:41,026
allow equal false meaning by default,

550
00:34:41,218 --> 00:34:44,466
don't allow things, allow equal false.

551
00:34:44,658 --> 00:34:48,650
And then we say, but allow

552
00:34:48,800 --> 00:34:51,660
if those input enable key rotation is true,

553
00:34:52,990 --> 00:34:56,346
right? Very simple declaration and gets you right

554
00:34:56,368 --> 00:34:59,866
to the point. So let's see if I can find.

555
00:35:00,048 --> 00:35:04,090
Our team has been like cleaning up and organizing

556
00:35:04,170 --> 00:35:07,594
so much stuff in here that the big complex regos

557
00:35:07,642 --> 00:35:11,838
are now kind of abstracted into libraries, but this one's a

558
00:35:11,844 --> 00:35:15,006
little fancier right here our package is rules,

559
00:35:15,038 --> 00:35:18,180
VPC, flow log. And here we're doing an import.

560
00:35:18,710 --> 00:35:22,450
Okay, we can import libraries. It's a real language.

561
00:35:23,750 --> 00:35:27,126
And here we're saying the resource type is just multiple. In other

562
00:35:27,148 --> 00:35:30,930
words, we're going to deal with that as we go. We've got our control mapping.

563
00:35:31,090 --> 00:35:34,994
Hey, it's comments. Comments are important in source

564
00:35:35,042 --> 00:35:38,678
code. This is a real language. I'm going to keep

565
00:35:38,764 --> 00:35:42,330
saying that. But you need these features to have a maintainable

566
00:35:42,750 --> 00:35:46,026
set of code. And policy has code. You're going to live with it for

567
00:35:46,048 --> 00:35:49,558
a long time, right? So you have to have it be maintainable.

568
00:35:49,734 --> 00:35:53,050
So here we're just giving some explanation.

569
00:35:53,130 --> 00:35:57,082
Every flow log in the template. So flow logs equal fugue

570
00:35:57,146 --> 00:36:00,394
resources. Now why does it say fugue resources? Because we've

571
00:36:00,442 --> 00:36:03,974
given you a bunch of libraries like fug

572
00:36:04,042 --> 00:36:07,186
reggae right here that are going to help you a lot. So here you can

573
00:36:07,208 --> 00:36:10,820
see we've done a lot of work to

574
00:36:12,390 --> 00:36:15,458
take all the fancy stuff and make it so you don't

575
00:36:15,464 --> 00:36:18,886
have to do that with regular. So one of the

576
00:36:18,908 --> 00:36:22,210
things I think is critically important when evaluating

577
00:36:22,290 --> 00:36:26,226
a language I have like my first test, I don't care if it's imperative

578
00:36:26,258 --> 00:36:29,418
or functional or object oriented, they're all fine for different things.

579
00:36:29,504 --> 00:36:33,418
But the main thing I want to understand is, is it easy to do

580
00:36:33,504 --> 00:36:36,634
simple stuff? One answer

581
00:36:36,672 --> 00:36:40,870
has CTo be yes. And two, can you do really sophisticated

582
00:36:40,950 --> 00:36:44,426
stuff and does it hold up well in both of those use cases? And I'm

583
00:36:44,458 --> 00:36:47,838
very pleased that they designed Rego and OPa quite well.

584
00:36:47,844 --> 00:36:50,734
And the answer is yes. So I'm not going to walk you through all this

585
00:36:50,772 --> 00:36:53,954
code, but the important thing to take from this is

586
00:36:54,072 --> 00:36:57,442
even doing sophisticated things is possible, right?

587
00:36:57,496 --> 00:37:00,260
And this is 35 lines of code,

588
00:37:01,110 --> 00:37:05,010
and a few of them are, it's probably ten lines of

589
00:37:05,080 --> 00:37:08,870
actual logic in here. Not super hard to reason about.

590
00:37:08,940 --> 00:37:12,534
Pretty easy, very easy to learn, actually. And you

591
00:37:12,572 --> 00:37:16,440
can take advantage of stuff like all this work we've done in

592
00:37:17,370 --> 00:37:22,062
already, abstracting things and things like regular.

593
00:37:22,146 --> 00:37:23,980
And there are others out there doing this,

594
00:37:27,630 --> 00:37:31,146
so some getting started resources. By the way, what I

595
00:37:31,168 --> 00:37:34,382
would suggest the best starting place is,

596
00:37:34,436 --> 00:37:38,254
and this is going to sound self serving, but honestly, it will let you see

597
00:37:38,292 --> 00:37:41,966
what OPA can do without you having to invest any work,

598
00:37:42,148 --> 00:37:47,026
is if you go to fube Co, let me show you thats you

599
00:37:47,048 --> 00:37:50,366
can get this kind of evaluation of your existing

600
00:37:50,398 --> 00:37:53,790
cloud infrastructure against all these control families in OPA.

601
00:37:53,870 --> 00:37:58,066
And you can also cloud your own OPA into fuge, your own rega

602
00:37:58,178 --> 00:38:02,440
for your own controls, and then you don't have to worry at all about

603
00:38:02,810 --> 00:38:06,406
having to download OPA or learn the language. You can

604
00:38:06,428 --> 00:38:09,926
start experimenting with the capabilities right away. On the other hand,

605
00:38:10,108 --> 00:38:14,054
you can use the GitHub action on regular if you're using terraform super easily

606
00:38:14,182 --> 00:38:17,802
out of the you know, if you're like me and you like to

607
00:38:17,856 --> 00:38:21,354
download source code and compile it yourself and really look

608
00:38:21,392 --> 00:38:24,958
under the hood, go to the GitHub repo at open policy agent and have a

609
00:38:24,964 --> 00:38:28,078
blast. So these are the

610
00:38:28,084 --> 00:38:31,694
resources I showed you. I think that's about

611
00:38:31,732 --> 00:38:34,942
what I've got for you today. So thanks much

612
00:38:34,996 --> 00:38:39,002
for spending your time with me. And by the way, I'm Josh at Fug

613
00:38:39,066 --> 00:38:42,286
Fugue Co. Feel free to reach out

614
00:38:42,308 --> 00:38:45,254
to me and I try to answer everyone who does.

615
00:38:45,412 --> 00:38:46,420
So thanks very much.

