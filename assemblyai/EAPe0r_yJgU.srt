1
00:00:26,450 --> 00:00:29,634
Hello there. Today's topic is from infrastructure

2
00:00:29,682 --> 00:00:33,938
as code to environment has code challenges, scaling ISE

3
00:00:34,034 --> 00:00:37,494
and how to resolve them. This talk is based on my and

4
00:00:37,532 --> 00:00:41,158
my team's experience working with and helping various companies

5
00:00:41,244 --> 00:00:44,486
adopt infrastructure as code and the

6
00:00:44,508 --> 00:00:48,214
challenges we have seen scaling infrastructure as code over

7
00:00:48,252 --> 00:00:52,106
the years. I will also introduce environments

8
00:00:52,218 --> 00:00:56,254
code which has helped us resolve those challenges. Some of

9
00:00:56,292 --> 00:00:59,518
what you will hear today around environments code

10
00:00:59,604 --> 00:01:03,026
is new and I would love to hear what you think about it,

11
00:01:03,128 --> 00:01:06,446
answer any questions and discuss it further.

12
00:01:06,638 --> 00:01:10,754
My name is Adarsh Shah. I am the founder and CEO at

13
00:01:10,792 --> 00:01:11,730
Compuzest.

14
00:01:17,450 --> 00:01:21,794
We all know what infrastructure has code is. It helps us automate

15
00:01:21,842 --> 00:01:25,206
provisioning of infrastructure resources. It is one

16
00:01:25,228 --> 00:01:29,114
of the key DevOps practices that enables teams to

17
00:01:29,152 --> 00:01:32,650
deliver infrastructure rapidly and reliably.

18
00:01:35,310 --> 00:01:39,450
Here's a typical evolution of your ISE. You probably

19
00:01:39,520 --> 00:01:43,662
start with a very simple setup, a monolith ISE with

20
00:01:43,716 --> 00:01:47,722
a single ISE run. If you are using terraform,

21
00:01:47,786 --> 00:01:51,802
then that means a single state file. As you can see in the diagram

22
00:01:51,866 --> 00:01:55,090
on the left, it has networking platform

23
00:01:55,240 --> 00:01:58,206
EC two and S three bucket,

24
00:01:58,318 --> 00:02:01,540
all in a single monolith ISE run.

25
00:02:01,910 --> 00:02:05,810
As you scale, you start breaking the ISE into separate

26
00:02:05,890 --> 00:02:09,190
smaller iscs. As you can see

27
00:02:09,260 --> 00:02:13,762
in the diagram on the right, there is a separate networking IAC

28
00:02:13,906 --> 00:02:18,034
and then platform EC Two, platform KDAs

29
00:02:18,162 --> 00:02:21,654
and postgres that depend on

30
00:02:21,692 --> 00:02:25,062
networking and then Kadas Addon that depends on

31
00:02:25,116 --> 00:02:28,442
platform K has this talk is focused on

32
00:02:28,496 --> 00:02:32,554
teams who have already broken down their infrastructure

33
00:02:32,602 --> 00:02:36,398
as code into smaller runs or looking

34
00:02:36,484 --> 00:02:40,142
to do that. If you have a very simple setup and can

35
00:02:40,196 --> 00:02:44,222
just execute it as a single run, you won't

36
00:02:44,286 --> 00:02:47,300
have most of the challenges we talk about today.

37
00:02:48,950 --> 00:02:53,166
For the execution of your IAC, it probably starts

38
00:02:53,198 --> 00:02:56,674
with running it on the engineer's machine.

39
00:02:56,802 --> 00:03:00,934
But as you mature you have more members of the team that want

40
00:03:00,972 --> 00:03:04,978
to run the IAC and want a more reliable

41
00:03:05,074 --> 00:03:09,414
and stable execution environments. You create a pipeline

42
00:03:09,542 --> 00:03:12,614
or use Gitops to execute the infrastructure

43
00:03:12,662 --> 00:03:16,566
as code from a shared environment. This talk is focused

44
00:03:16,598 --> 00:03:20,050
on teams who already use pipelines

45
00:03:20,230 --> 00:03:23,294
or Gitops are looking to do

46
00:03:23,332 --> 00:03:23,920
so.

47
00:03:26,610 --> 00:03:30,202
Applications teams need an entire environment,

48
00:03:30,346 --> 00:03:34,094
something like you see in the diagram, to deploy and operate

49
00:03:34,142 --> 00:03:37,454
their applications. Just getting networking

50
00:03:37,582 --> 00:03:41,006
platform K eight s or RDS database

51
00:03:41,118 --> 00:03:45,018
on its own is not going to allow them to run their applications.

52
00:03:45,134 --> 00:03:48,982
They need an entire environment, whatever that might

53
00:03:49,036 --> 00:03:52,722
mean for the team that has these various

54
00:03:52,786 --> 00:03:56,710
infrastructure resources and dependencies between them.

55
00:03:56,860 --> 00:04:00,474
In this example environment, networking needs to be

56
00:04:00,512 --> 00:04:03,654
provisioned first and then platform EC

57
00:04:03,702 --> 00:04:07,098
two, platform K eight s and then

58
00:04:07,184 --> 00:04:11,434
the k eight s addons. If you want to get an environment

59
00:04:11,562 --> 00:04:14,718
like this using infrastructure as code,

60
00:04:14,884 --> 00:04:18,446
here are your options. Create a

61
00:04:18,468 --> 00:04:22,142
monolith ISE but we all know this is bad.

62
00:04:22,276 --> 00:04:26,382
It creates a tight coupling and is not recommended unless,

63
00:04:26,446 --> 00:04:29,746
of course, you have a very simple use case,

64
00:04:29,928 --> 00:04:33,854
the state files become large and it becomes painful to maintain

65
00:04:33,902 --> 00:04:37,270
them with monolith ISE.

66
00:04:37,930 --> 00:04:42,066
Option two involves hand rolling pipelines using tools

67
00:04:42,098 --> 00:04:45,654
like Jenkins, Circleci, et cetera to run

68
00:04:45,692 --> 00:04:49,606
the ISE and manage complex dependencies in

69
00:04:49,628 --> 00:04:53,558
the pipeline code. While your ISE is declarative

70
00:04:53,654 --> 00:04:56,762
and idempotent, these pipelines are not.

71
00:04:56,896 --> 00:05:01,050
You have to write a lot of custom code to provision an entire

72
00:05:01,120 --> 00:05:02,010
environment.

73
00:05:04,190 --> 00:05:08,042
Teardown must be supported and any failures

74
00:05:08,186 --> 00:05:11,594
errors that impact the environment must be accounted

75
00:05:11,642 --> 00:05:14,914
for as well. If there are failures or

76
00:05:14,952 --> 00:05:19,102
errors. While execution, they usually get managed manually

77
00:05:19,166 --> 00:05:22,034
by engineers. As you can tell,

78
00:05:22,152 --> 00:05:26,754
these options are inefficient, costly, and typically requires

79
00:05:26,802 --> 00:05:28,200
a dedicated team.

80
00:05:30,490 --> 00:05:34,326
Here are some other challenges scaling ISE if you

81
00:05:34,348 --> 00:05:37,786
want to follow principles like immutability for

82
00:05:37,808 --> 00:05:41,402
your environments or make it easier to share best

83
00:05:41,456 --> 00:05:45,782
practices implementation of environments across various

84
00:05:45,846 --> 00:05:49,382
teams having a mechanism to easily replicate

85
00:05:49,446 --> 00:05:53,598
environments is critical. Since the pipelines I mentioned

86
00:05:53,684 --> 00:05:57,358
in the previous slide are not ideal for managing entire

87
00:05:57,444 --> 00:06:00,714
environments, it becomes painful to replicate

88
00:06:00,762 --> 00:06:04,578
them. Teams spend a lot of time writing custom

89
00:06:04,664 --> 00:06:06,930
code to replicate environments.

90
00:06:07,670 --> 00:06:11,262
Visualizing and understanding environments are challenging,

91
00:06:11,326 --> 00:06:14,798
too. Teams also struggle to do that.

92
00:06:14,984 --> 00:06:18,806
Trying to find that information by going directly to

93
00:06:18,828 --> 00:06:22,322
the cloud provider's dashboard is even more confusing.

94
00:06:22,466 --> 00:06:25,126
If these want to troubleshoot an issue,

95
00:06:25,308 --> 00:06:28,698
share knowledge between teams, or make any changes

96
00:06:28,784 --> 00:06:32,454
to existing environments, they need to go through a painful

97
00:06:32,502 --> 00:06:36,682
and time consuming process. A lot of teams create

98
00:06:36,736 --> 00:06:40,082
diagrams for their environments with various

99
00:06:40,246 --> 00:06:43,870
infrastructure resources and how they are connected using

100
00:06:43,940 --> 00:06:47,694
tools like Vizio or draw IO. But these

101
00:06:47,732 --> 00:06:51,130
diagrams get out of date soon with real environments.

102
00:06:51,290 --> 00:06:55,026
Instead of helping, they actually provide incorrect information

103
00:06:55,208 --> 00:06:58,754
and can cause confusion over

104
00:06:58,792 --> 00:07:02,334
a period of time due to human error or indirect

105
00:07:02,382 --> 00:07:05,926
changes. Provisioned infrastructure drifts from the

106
00:07:05,948 --> 00:07:10,470
desired state in code while with existing solutions,

107
00:07:10,810 --> 00:07:14,002
like using a pipeline to execute ISe.

108
00:07:14,146 --> 00:07:17,630
Drift can be directed since ISE is declarative,

109
00:07:17,730 --> 00:07:21,210
but only when that pipeline executes the IAC next

110
00:07:21,280 --> 00:07:24,970
time, and it will only find drifts within

111
00:07:25,040 --> 00:07:28,618
that particular IAC. Teams should know

112
00:07:28,704 --> 00:07:33,242
about the drift right away, and not just for individual infrastructure

113
00:07:33,306 --> 00:07:36,926
resources or a few of them, but for the entire

114
00:07:37,028 --> 00:07:41,322
environment and various component dependencies,

115
00:07:41,466 --> 00:07:45,234
so they can remediate any issues as soon as

116
00:07:45,272 --> 00:07:45,860
possible.

117
00:07:48,710 --> 00:07:52,446
Now that we understand the challenges scaling infrastructure

118
00:07:52,478 --> 00:07:55,986
has code, let's understand what environments

119
00:07:56,098 --> 00:07:59,430
code is and how it helps resolve those challenges.

120
00:08:01,290 --> 00:08:04,774
We can start by looking at a higher level from IAC

121
00:08:04,812 --> 00:08:07,946
to environment as code environment S code is

122
00:08:07,968 --> 00:08:11,050
an abstraction over infrastructure has code,

123
00:08:11,200 --> 00:08:14,922
as you can see in from IAC to environments as code

124
00:08:14,976 --> 00:08:18,534
declarative and executes and manages various

125
00:08:18,662 --> 00:08:22,946
infrastructure as code components. Various ISE

126
00:08:22,998 --> 00:08:26,714
components are responsible for provisioning infrastructure,

127
00:08:26,762 --> 00:08:30,522
resources, etc. Is responsible

128
00:08:30,586 --> 00:08:34,194
for executing infrastructure has code in the

129
00:08:34,232 --> 00:08:35,220
right order.

130
00:08:37,830 --> 00:08:40,526
If we use the Lego analogy,

131
00:08:40,718 --> 00:08:44,866
infrastructure has code automates various Lego pieces that

132
00:08:44,888 --> 00:08:48,486
are your individual infrastructure resources, or a

133
00:08:48,508 --> 00:08:52,610
few of them together, while environments code automates

134
00:08:52,690 --> 00:08:56,294
how these Lego pieces are connected to make up

135
00:08:56,332 --> 00:08:59,450
a Lego toy your entire environment.

136
00:09:02,510 --> 00:09:05,846
Here's a definition. I know it's long, but I think it's

137
00:09:05,878 --> 00:09:09,546
important to go from, from, from IAC

138
00:09:09,568 --> 00:09:13,706
to environments as code abstraction over infrastructure

139
00:09:13,738 --> 00:09:17,726
as code that provides a declarative way of defining an

140
00:09:17,748 --> 00:09:21,422
entire environment. It has a control plane that

141
00:09:21,476 --> 00:09:25,742
manages the state of the environment, including relationships

142
00:09:25,886 --> 00:09:29,710
between various resources, detects drift,

143
00:09:29,870 --> 00:09:32,718
as well as enables reconciliation.

144
00:09:32,894 --> 00:09:36,798
It also supports best practices like loose coupling,

145
00:09:36,894 --> 00:09:40,186
item potency, immutability, etc.

146
00:09:40,318 --> 00:09:42,390
For the entire environment,

147
00:09:42,890 --> 00:09:47,110
etc. Allows teams to deliver entire environments

148
00:09:47,470 --> 00:09:50,170
rapidly and reliably at scale.

149
00:09:52,910 --> 00:09:57,286
Now let's dig deeper into provisioning from,

150
00:09:57,398 --> 00:10:00,506
from, from from IAC to environment as

151
00:10:00,528 --> 00:10:03,894
code. At the top, we define our environment

152
00:10:03,942 --> 00:10:08,046
has code, which is declarative. We push it to source control

153
00:10:08,228 --> 00:10:11,498
control plane that's associated with environments.

154
00:10:11,594 --> 00:10:15,122
Code picks up that challenges. It manages the state

155
00:10:15,176 --> 00:10:19,262
of the entire environment, including any dependencies between various

156
00:10:19,326 --> 00:10:22,222
components, their statuses, et cetera.

157
00:10:22,366 --> 00:10:27,682
And then it starts reconciling various infrastructure

158
00:10:27,746 --> 00:10:31,000
components. These are infrastructure as code

159
00:10:31,450 --> 00:10:34,390
pieces that have their own state.

160
00:10:34,460 --> 00:10:38,102
So if you're using terraform like you have in this instance,

161
00:10:38,246 --> 00:10:41,066
networking is actually terraform code.

162
00:10:41,248 --> 00:10:45,622
And terraform manages the state of that networking

163
00:10:45,686 --> 00:10:49,958
component. And then once networking is done, it provisions

164
00:10:50,054 --> 00:10:53,870
platform kdas and postgres. So the control

165
00:10:53,940 --> 00:10:58,314
plane that's associated with environments code manages

166
00:10:58,362 --> 00:11:02,062
in what order these components run, and these after

167
00:11:02,116 --> 00:11:05,826
that, the kades add ons runs. So as you can see,

168
00:11:05,928 --> 00:11:09,822
the control plane is what that manages all of these various

169
00:11:09,886 --> 00:11:13,010
pieces. But infrastructure's code,

170
00:11:13,160 --> 00:11:17,506
terraform in this case, is actually responsible for provisioning

171
00:11:17,618 --> 00:11:20,070
resources in your cloud provider.

172
00:11:21,770 --> 00:11:25,702
And then for the tear down, it reverses the logic and

173
00:11:25,756 --> 00:11:29,370
starts from the leaf node and then goes up the chain.

174
00:11:32,590 --> 00:11:36,346
So now that we looked at what environment s code is, let's look

175
00:11:36,368 --> 00:11:43,658
at the various attributes of environments. Code environments

176
00:11:43,754 --> 00:11:47,230
code manages an entire environment, so it

177
00:11:47,300 --> 00:11:51,390
should support defining that entire environment with

178
00:11:51,460 --> 00:11:54,674
various infrastructure components in an easy

179
00:11:54,712 --> 00:11:58,526
to understand format. It also supports specifying

180
00:11:58,558 --> 00:12:01,570
various relationships between these components.

181
00:12:01,990 --> 00:12:05,054
This diagram shows can example environments

182
00:12:05,102 --> 00:12:08,494
code using the YAML custom format.

183
00:12:08,622 --> 00:12:11,914
We use this for our product zlifecycle,

184
00:12:12,062 --> 00:12:15,074
but it doesn't have to be a YAmL format.

185
00:12:15,202 --> 00:12:19,098
Anything that you can use to specify the entire

186
00:12:19,184 --> 00:12:22,474
environment, any format can be used has.

187
00:12:22,512 --> 00:12:26,122
You can see on line 54. It allows you two

188
00:12:26,176 --> 00:12:29,386
specify the type of infrastructure has code,

189
00:12:29,568 --> 00:12:32,782
which is terraform in this case, and also that

190
00:12:32,836 --> 00:12:35,870
this component depends on the networking components.

191
00:12:37,810 --> 00:12:41,690
Environments code promotes loosely coupled ISE

192
00:12:41,770 --> 00:12:45,374
components like you see in the diagram. It brings

193
00:12:45,422 --> 00:12:48,882
these loosely coupled ISe components together

194
00:12:49,016 --> 00:12:54,210
to give an entire environment like

195
00:12:54,280 --> 00:12:57,586
infrastructure has code tools have state files

196
00:12:57,698 --> 00:13:01,190
to capture the state of each ise run.

197
00:13:01,340 --> 00:13:05,122
Environments code also has a state file that captures

198
00:13:05,186 --> 00:13:08,950
the state of the entire environment, including the various

199
00:13:09,030 --> 00:13:12,870
components and their relationships has. You can see in the diagram

200
00:13:12,950 --> 00:13:17,114
it has operation and status that tells you about

201
00:13:17,152 --> 00:13:20,846
the last run, of what type of operation it was

202
00:13:20,948 --> 00:13:24,490
and what's the current state. It also tracks

203
00:13:24,650 --> 00:13:28,320
component operation and status from the last run.

204
00:13:30,210 --> 00:13:33,630
Item potency and immutability are key principles

205
00:13:33,710 --> 00:13:37,570
for infrastructure as code. How do you apply these

206
00:13:37,720 --> 00:13:40,050
two an entire environment?

207
00:13:40,950 --> 00:13:44,162
Let's first understand what they mean. In case

208
00:13:44,216 --> 00:13:46,290
you're not aware of these principles.

209
00:13:46,630 --> 00:13:49,990
Idempotency means no matter how many times

210
00:13:50,060 --> 00:13:53,334
you run your IAC or your code and

211
00:13:53,372 --> 00:13:57,094
what your starting state is, you will end up with the same end

212
00:13:57,132 --> 00:14:00,630
state. This simplifies the provisioning of infrastructure

213
00:14:00,710 --> 00:14:04,650
and reduces the chances of inconsistent results.

214
00:14:06,910 --> 00:14:10,446
So let's look at when you start at the top. Let's say

215
00:14:10,468 --> 00:14:14,254
you want three vms. Your code provisions three

216
00:14:14,292 --> 00:14:17,502
vms in non idempotent case,

217
00:14:17,636 --> 00:14:21,342
if you reapply the challenges, you get three more

218
00:14:21,396 --> 00:14:24,734
vms. So if you are expecting three vms,

219
00:14:24,862 --> 00:14:27,700
you actually end up getting six instead.

220
00:14:29,110 --> 00:14:33,186
On the item portent side though, if you reapply or change

221
00:14:33,368 --> 00:14:37,094
it knows that you already have the three vms, so it

222
00:14:37,132 --> 00:14:41,398
won't provision any new vms if you reapply the changes.

223
00:14:41,564 --> 00:14:45,030
So you end up getting the three expected vms.

224
00:14:46,730 --> 00:14:50,618
With EAC, you can achieve item potency for the entire

225
00:14:50,704 --> 00:14:54,646
environment has it tracks state for the entire environment

226
00:14:54,758 --> 00:14:58,106
and knows what the last operation was and

227
00:14:58,128 --> 00:15:01,440
its state pipelines don't do that for you.

228
00:15:03,090 --> 00:15:06,394
Configuration drift is a huge problem with infrastructure.

229
00:15:06,522 --> 00:15:10,094
It occurs when over a period that there are

230
00:15:10,132 --> 00:15:13,634
changes made to infrastructure that are not recorded and your

231
00:15:13,672 --> 00:15:17,106
various environments drift from each other in

232
00:15:17,128 --> 00:15:20,270
ways that are not easily reproducible.

233
00:15:20,430 --> 00:15:24,158
This usually happens if you have a mutable infrastructure

234
00:15:24,254 --> 00:15:28,486
that lives for a long time. These issues can

235
00:15:28,508 --> 00:15:31,858
be resolved by using immutable infrastructure.

236
00:15:32,034 --> 00:15:36,534
So as you can see on the left, if you

237
00:15:36,572 --> 00:15:40,574
have version one of your code or your infrastructure

238
00:15:40,642 --> 00:15:44,538
code deployed, you make some changes to your code

239
00:15:44,704 --> 00:15:47,398
and in case of mutable infrastructure,

240
00:15:47,494 --> 00:15:50,970
you apply the new version to the same infrastructure.

241
00:15:51,130 --> 00:15:54,734
So you have long lived infrastructure. In case of

242
00:15:54,772 --> 00:15:58,446
immutable infrastructure, when you

243
00:15:58,468 --> 00:16:02,014
make a change, you actually provision a brand new set

244
00:16:02,052 --> 00:16:05,854
of infrastructure with the new version, redirect traffic

245
00:16:05,982 --> 00:16:10,290
to that new version, and then get rid of the old infrastructure.

246
00:16:11,670 --> 00:16:14,942
Immutable infrastructure means instead of changing an

247
00:16:15,016 --> 00:16:18,262
existing infrastructure, you replace it with new.

248
00:16:18,396 --> 00:16:21,714
By provisioning new infrastructure every time you're

249
00:16:21,762 --> 00:16:25,622
making sure it is reproducible and doesn't allow

250
00:16:25,676 --> 00:16:29,402
for configuration drift over time. Why not apply this

251
00:16:29,456 --> 00:16:33,894
principle? Two, the entire environment. You can do that using environment

252
00:16:33,942 --> 00:16:37,270
has code. You can replace entire environments

253
00:16:37,430 --> 00:16:41,518
by bringing brand new environments up instead of

254
00:16:41,604 --> 00:16:45,390
changing existing ones. To achieve immutability.

255
00:16:47,650 --> 00:16:52,026
As mentioned earlier, teams usually create diagrams manually

256
00:16:52,218 --> 00:16:56,002
and then keep it updated as they change code.

257
00:16:56,136 --> 00:16:59,954
You all know how that goes. The diagrams get out of date over

258
00:16:59,992 --> 00:17:03,714
a period of time and provide misinformation and are

259
00:17:03,752 --> 00:17:07,382
more harmful than from from from from from

260
00:17:07,436 --> 00:17:10,854
IAC to environment. As code understand format, you can use

261
00:17:10,892 --> 00:17:14,934
it to create a visual that helps teams understand

262
00:17:15,132 --> 00:17:19,770
their, as well as other teams environments within their organization.

263
00:17:20,270 --> 00:17:23,814
This screenshot is from our product zlifecycle

264
00:17:23,942 --> 00:17:27,082
that is created using the environment has code

265
00:17:27,136 --> 00:17:31,578
concept environments

266
00:17:31,674 --> 00:17:35,162
code has a control plane that contains a reconciler

267
00:17:35,226 --> 00:17:38,462
that observes whether the desired state and the current

268
00:17:38,516 --> 00:17:41,694
state have drifted and then reconciles them.

269
00:17:41,812 --> 00:17:45,602
You might be thinking this looks like Kubernetes controllers and

270
00:17:45,656 --> 00:17:49,186
yes, it is based on the same concept. In fact you

271
00:17:49,208 --> 00:17:53,250
can use Kubernetes controllers to achieve it. In these case

272
00:17:53,320 --> 00:17:57,302
though, it probably makes sense to have an approval step that

273
00:17:57,356 --> 00:18:02,498
shows the plan before bringing the actual status

274
00:18:02,594 --> 00:18:05,762
back to desired state. And this might involve,

275
00:18:05,826 --> 00:18:09,206
as this might involve destroying or recreating

276
00:18:09,238 --> 00:18:12,742
infrastructure companies

277
00:18:12,806 --> 00:18:16,566
and promoting changes across various environments becomes

278
00:18:16,598 --> 00:18:20,934
a lot easier with environments from from from

279
00:18:20,982 --> 00:18:25,198
from IAC to environment as code understand format and push to source control.

280
00:18:25,364 --> 00:18:29,134
You can compare the code for various environments and

281
00:18:29,172 --> 00:18:32,774
promote changes. You can also use Gitops

282
00:18:32,842 --> 00:18:36,046
for the entire environment. Using environment

283
00:18:36,078 --> 00:18:39,694
has code. So let's look at how the Gitops

284
00:18:39,742 --> 00:18:42,994
flow would look like with ESC. We start

285
00:18:43,032 --> 00:18:46,280
on the left, you define your environment code,

286
00:18:46,890 --> 00:18:51,058
you can add push to a branch, you validate

287
00:18:51,154 --> 00:18:55,026
if everything is valid, and create a pull request.

288
00:18:55,218 --> 00:18:58,714
Someone from your team looks at the

289
00:18:58,752 --> 00:19:01,994
PR, approves the PR, and then it eventually gets

290
00:19:02,032 --> 00:19:05,462
merged to main. There is a control plane

291
00:19:05,526 --> 00:19:09,126
that's associated with environments code that observes

292
00:19:09,158 --> 00:19:12,766
the repository, picks up a change, and then starts the

293
00:19:12,788 --> 00:19:14,320
reconciliation process.

294
00:19:17,090 --> 00:19:19,950
Thanks everyone for attending my talk.

295
00:19:20,100 --> 00:19:23,678
Please feel free to reach out if you have any questions about

296
00:19:23,764 --> 00:19:26,480
environment has code, infrastructure has code,

297
00:19:27,410 --> 00:19:31,406
and also we have a product that uses the

298
00:19:31,428 --> 00:19:34,686
same environments as code concept, so check it

299
00:19:34,708 --> 00:19:38,198
out. It's called zlifecycle and as I mentioned at

300
00:19:38,204 --> 00:19:41,554
the start, I would love to get your from from from

301
00:19:41,602 --> 00:19:44,726
from from from IAC to environment as code

302
00:19:44,748 --> 00:19:44,820
again.

