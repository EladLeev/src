1
00:02:09,300 --> 00:02:13,288
Chris, I've been used, trying, at least with some

2
00:02:13,454 --> 00:02:17,304
realms of success, to use Kubernetes. Since zero four.

3
00:02:17,502 --> 00:02:21,050
I've got opinions, so strap in.

4
00:02:22,140 --> 00:02:25,784
I'm a solution architect at Via, instructor at learn k

5
00:02:25,822 --> 00:02:29,128
eight and a tinkerer of a bunch of

6
00:02:29,134 --> 00:02:30,330
open source things.

7
00:02:32,700 --> 00:02:36,048
I often talk too fast, so key

8
00:02:36,094 --> 00:02:39,680
kick me or something, or throw things at me, it's fine. We're actually human

9
00:02:39,750 --> 00:02:42,000
people that we can do that now in a minute.

10
00:02:42,660 --> 00:02:47,104
So with a bit of audience participation by

11
00:02:47,142 --> 00:02:51,190
show of hands, who's worked with Kubernetes pods before?

12
00:02:51,880 --> 00:02:55,716
Anyone? Hey, in the right room. Good. Look at

13
00:02:55,738 --> 00:02:57,430
that. Actual hands and people.

14
00:02:59,240 --> 00:03:02,996
Cool. And for anyone who didn't raise their hand, well, welcome to party.

15
00:03:03,028 --> 00:03:07,210
You've almost missed it. Pods are

16
00:03:07,580 --> 00:03:10,792
the smallest deployable units of computing that you can

17
00:03:10,846 --> 00:03:14,344
create and manage in kubernetes, and they represent

18
00:03:14,472 --> 00:03:18,540
like a single instance of an application running in your cluster.

19
00:03:19,360 --> 00:03:22,044
Okay, so that's the topic of this. Well,

20
00:03:22,242 --> 00:03:24,300
what about pod security policies?

21
00:03:25,940 --> 00:03:29,248
So they've been around since 1.0,

22
00:03:29,334 --> 00:03:33,100
which is about a million kubernetes

23
00:03:33,180 --> 00:03:36,944
years, and in that time they've never made it past

24
00:03:36,982 --> 00:03:40,884
the beta classification, which is a curious observation of its own. Right.

25
00:03:41,082 --> 00:03:45,360
And I believe it may actually be the last v one beta, one resource

26
00:03:45,520 --> 00:03:48,580
that's often routinely used in production

27
00:03:49,400 --> 00:03:52,904
since ingress was recently matured to a v one.

28
00:03:52,942 --> 00:03:56,008
Recently, however,

29
00:03:56,094 --> 00:03:58,840
sadly, that's not going to be the case for psps.

30
00:03:59,980 --> 00:04:03,632
They were deprecated in 1.21, which was April

31
00:04:03,716 --> 00:04:07,400
last year, and will be removed entirely

32
00:04:07,480 --> 00:04:10,220
in 1.25,

33
00:04:10,370 --> 00:04:12,750
which will be around August this year.

34
00:04:13,520 --> 00:04:16,764
So what is a PSP, apart from more words than

35
00:04:16,802 --> 00:04:20,524
should ever be on a slide? That's better?

36
00:04:20,722 --> 00:04:24,144
Well, PSPs give cluster admins basically, in short,

37
00:04:24,342 --> 00:04:27,952
an ability to impose some limits on

38
00:04:28,006 --> 00:04:31,924
the things that are running in the cluster. So things

39
00:04:31,962 --> 00:04:35,584
like being able to run as root, opening ports on the host, types of volume

40
00:04:35,632 --> 00:04:37,700
you can use, et cetera,

41
00:04:39,000 --> 00:04:42,230
if you've not seen one before, it looks something like this.

42
00:04:45,480 --> 00:04:48,070
So by show of hands,

43
00:04:48,600 --> 00:04:52,216
or actually put your hand up and let you volunteer an answer, but who

44
00:04:52,238 --> 00:04:55,404
could give me an example of what I could do with a container that looks

45
00:04:55,442 --> 00:04:59,016
like this? The pod spec. You can see that without any reflection?

46
00:04:59,048 --> 00:05:03,196
All I can see is glare. Go then.

47
00:05:03,298 --> 00:05:07,250
Not much. Not much? It's an altime image. It doesn't have anything inside.

48
00:05:07,780 --> 00:05:11,136
Not much, you reckon? No. You can run it as

49
00:05:11,158 --> 00:05:14,304
root, but you don't have tooling inside.

50
00:05:14,502 --> 00:05:15,250
Okay,

51
00:05:17,860 --> 00:05:19,460
any other answers?

52
00:05:23,960 --> 00:05:26,100
Salmon, stop feeding our answers.

53
00:05:28,840 --> 00:05:32,596
Okay, so I'm not going to bother I

54
00:05:32,618 --> 00:05:35,944
won't do it with Alpine, but the thing that will actually the example I've got

55
00:05:35,982 --> 00:05:38,568
is pretty much the same and I don't use any of the tools, so I

56
00:05:38,574 --> 00:05:44,056
could have done it with Alpine. So let's flip

57
00:05:44,088 --> 00:05:47,964
the other way. So I've got

58
00:05:48,002 --> 00:05:51,390
a hopefully. What's that?

59
00:05:52,720 --> 00:05:55,180
Zoom in, needy.

60
00:05:58,580 --> 00:06:02,240
Is that better? I mean, you won't be able to read anything

61
00:06:02,310 --> 00:06:04,690
now, but sure, I've zoomed in.

62
00:06:05,700 --> 00:06:08,812
Okay, so I've got a cluster,

63
00:06:08,876 --> 00:06:12,768
right? So I've done it with kind for the sake of doing this easily.

64
00:06:12,864 --> 00:06:16,928
But you should be able to get the idea right. It's a cluster that's

65
00:06:17,104 --> 00:06:20,580
running, that doesn't have any pods. It's vanilla as it comes.

66
00:06:20,650 --> 00:06:25,700
Right. So I'm going to do something

67
00:06:25,770 --> 00:06:29,592
reasonably straightforward. So I'm going to do it. The Debian image says,

68
00:06:29,646 --> 00:06:33,032
your point doesn't make any bloody difference. I could do exactly the same things

69
00:06:33,086 --> 00:06:35,468
with Alpine, but I'm going to do it with Debian just for the sake of

70
00:06:35,474 --> 00:06:39,464
it because that's what I had prepped. But it is a vanilla debian

71
00:06:39,512 --> 00:06:42,460
image. I'm not using any of the tooling that comes in the image.

72
00:06:43,920 --> 00:06:47,240
Now this would be the same whether it

73
00:06:47,250 --> 00:06:50,368
was Debian or Alpine. Does that give any clues to what

74
00:06:50,374 --> 00:06:51,170
I could do?

75
00:06:54,340 --> 00:06:57,308
And I've demoed this to a load of app here, folks. So you're not allowed

76
00:06:57,324 --> 00:07:01,552
to answer any clues.

77
00:07:01,696 --> 00:07:05,748
So what if I were to make

78
00:07:05,834 --> 00:07:07,380
a directory?

79
00:07:09,000 --> 00:07:12,616
So make like slash, foo and then mount one of

80
00:07:12,638 --> 00:07:15,832
those volumes. So you'll notice that the

81
00:07:15,886 --> 00:07:19,096
amount of things I have here, that's the host. Right. So this

82
00:07:19,118 --> 00:07:22,040
is a VM that's running on my laptop.

83
00:07:23,680 --> 00:07:25,950
If I can not do that,

84
00:07:28,160 --> 00:07:30,350
sorry, I missed the last bit off the thing.

85
00:07:31,680 --> 00:07:34,732
So I can mount that now if I look

86
00:07:34,786 --> 00:07:38,640
in, well, I'm now up to the host.

87
00:07:39,540 --> 00:07:42,864
Okay, so what can I do with that? Well, I can do some

88
00:07:42,902 --> 00:07:45,810
interesting things. So without tooling, as you pointed out,

89
00:07:47,140 --> 00:07:50,976
I can export path and just load into my

90
00:07:50,998 --> 00:07:54,848
path, find where tubecuttle is because I'm lazy.

91
00:07:54,944 --> 00:07:58,310
I could use curl or I could port to

92
00:08:01,080 --> 00:08:04,004
the devtcp port and tunnel it through.

93
00:08:04,122 --> 00:08:07,668
But I'm lazy. I'm just going to use the vanilla tools that we're

94
00:08:07,684 --> 00:08:11,816
all used to using like kubectl and things like that. So I

95
00:08:11,838 --> 00:08:15,304
do that. I'm going to just sim link in. So I don't need to mess

96
00:08:15,342 --> 00:08:18,956
around with pointing in the right places. So I'm going to sim link in the

97
00:08:19,058 --> 00:08:22,936
kubelet. So I'm now on the host. So I can just use the Kubelets

98
00:08:23,128 --> 00:08:27,760
certificates to talk to the cluster app as the cluster API,

99
00:08:28,740 --> 00:08:32,016
and I'm going to set my kubeconfig to

100
00:08:32,038 --> 00:08:36,960
be the Kubelets configuration.

101
00:08:37,460 --> 00:08:42,692
So now what can I do exactly?

102
00:08:42,826 --> 00:08:46,436
Right, I've poned your cluster. I can go and get

103
00:08:46,458 --> 00:08:49,670
all the pods. I can go and get all the nodes. I can

104
00:08:50,120 --> 00:08:53,944
pretty much do whatever I like. I have pretty much most

105
00:08:53,982 --> 00:08:57,800
of your cluster now. I can't exec into a pod

106
00:08:58,620 --> 00:09:02,456
easily. What I can do if

107
00:09:02,478 --> 00:09:06,568
I do say kubectl get pods.

108
00:09:06,664 --> 00:09:09,676
So this is the one that I'm already in. But if I try and do

109
00:09:09,778 --> 00:09:15,916
Kubectl exec and

110
00:09:15,938 --> 00:09:18,768
then try and run bashing it, right, I'm going to get a no, because the

111
00:09:18,774 --> 00:09:21,868
Kubectl API says that the kubelet,

112
00:09:21,964 --> 00:09:24,604
quite rightly so, shouldn't be able to exec into your pods.

113
00:09:24,652 --> 00:09:25,810
Well, sure,

114
00:09:27,780 --> 00:09:30,736
but I can do a load of other things. So I can go and relabel

115
00:09:30,768 --> 00:09:34,260
your node, so I can pull all of the current

116
00:09:34,330 --> 00:09:38,196
workload to the node that I own, so I can talk

117
00:09:38,218 --> 00:09:41,776
to the docker demon or whatever containers runtime

118
00:09:41,808 --> 00:09:46,116
you're running and interface directly with that, right? So the

119
00:09:46,138 --> 00:09:49,240
docker socket is all available to me. So I can go and look at

120
00:09:49,310 --> 00:09:52,856
whatever the containers are running on the node that I've managed to get, and I

121
00:09:52,878 --> 00:09:55,804
can go and drain all of the other nodes. So I can do like a

122
00:09:55,842 --> 00:10:00,380
cubecuttle or cordon nodes.

123
00:10:01,600 --> 00:10:05,756
I could go and drain all

124
00:10:05,778 --> 00:10:09,504
of the other nodes, and I can label myself with

125
00:10:09,542 --> 00:10:14,716
all of the taints and tolerations that you might have had existing.

126
00:10:14,828 --> 00:10:18,368
Because I've got the ability to declare who I am in the cluster as a

127
00:10:18,374 --> 00:10:20,900
node, because I'm impersonating a node at this point.

128
00:10:21,050 --> 00:10:24,676
So I own your cluster. I own everything that's running on

129
00:10:24,698 --> 00:10:27,990
it. I own everything that's outside of it that it can connect to.

130
00:10:29,720 --> 00:10:31,110
Sad times, right?

131
00:10:35,420 --> 00:10:38,872
Yeah. Don't let me have admin on your clusters. I guess it's the

132
00:10:38,926 --> 00:10:42,328
message of the story. Okay, a bit more obvious,

133
00:10:42,414 --> 00:10:45,668
but again, by doing something like this,

134
00:10:45,774 --> 00:10:49,244
game over, but pretty much under the same terms

135
00:10:49,282 --> 00:10:52,572
that we've just covered. How about this?

136
00:10:52,626 --> 00:11:01,820
Can anyone help me out? What might I be able to do with that's

137
00:11:02,740 --> 00:11:05,872
okay. So I can masquerade as other things

138
00:11:05,926 --> 00:11:09,456
to the network. So I could maybe open up

139
00:11:09,478 --> 00:11:13,156
on port four, four, three or 80, depending what you're running on

140
00:11:13,178 --> 00:11:16,960
your network, and potentially

141
00:11:17,040 --> 00:11:20,656
impersonate what might be like a normal ingress service. So if I can boot

142
00:11:20,688 --> 00:11:23,510
out your ingress pod that's locking that port,

143
00:11:24,920 --> 00:11:28,376
or I find a way to crash that, I can maybe hog that port

144
00:11:28,398 --> 00:11:32,600
on the host port again. I can now sit between traffic between the outside

145
00:11:32,670 --> 00:11:36,296
world and your apps. I can also talk to

146
00:11:36,318 --> 00:11:40,220
and masquerade with all sorts of local systems to the host, like x

147
00:11:40,290 --> 00:11:43,772
or D bus ice guzzy, depending on what your world

148
00:11:43,826 --> 00:11:47,020
is, or indeed the container runtime as well, depending how that's configured.

149
00:11:47,440 --> 00:11:51,472
Bit more involved, but ultimately game over after

150
00:11:51,526 --> 00:11:55,216
you've basically just jumped through a few more hoops in order to actually get that

151
00:11:55,238 --> 00:11:59,012
route. So basically, leave any one of those controls in

152
00:11:59,066 --> 00:12:02,932
the PSP open and you can be kind of one bad pod away

153
00:12:02,986 --> 00:12:06,196
from losing absolutely everything that you

154
00:12:06,218 --> 00:12:09,476
own. So psps fundamentally sound like

155
00:12:09,498 --> 00:12:13,136
a great idea, right? Well, not so fast, bucko.

156
00:12:13,248 --> 00:12:16,616
There's a whole heap of usability issues that

157
00:12:16,638 --> 00:12:19,976
you might have encountered if you've actually tried to use them in anger. So the

158
00:12:19,998 --> 00:12:24,320
policy is based on the user that created the pod, not the workload.

159
00:12:24,500 --> 00:12:28,364
And if you've created pods with, say, CI or something, for example,

160
00:12:28,562 --> 00:12:31,884
that might require you to have multiple identities to

161
00:12:31,922 --> 00:12:34,030
authenticate to the API server with.

162
00:12:34,800 --> 00:12:38,576
But fundamentally, when was the last time that any of us actually created a

163
00:12:38,598 --> 00:12:42,368
pod and not a deployment or a stateful set

164
00:12:42,454 --> 00:12:45,232
or a batch job or whatever else, right?

165
00:12:45,286 --> 00:12:48,852
So, well, in that case, the identity creating the pod is the

166
00:12:48,906 --> 00:12:52,596
service account of that controller. Some of the

167
00:12:52,618 --> 00:12:57,092
parameters aren't simply admission controllers that

168
00:12:57,146 --> 00:13:00,896
accept or reject, but actually do some manipulator,

169
00:13:00,928 --> 00:13:04,648
some mutation on the actual pod itself. And that's not clear from the

170
00:13:04,654 --> 00:13:08,664
docs. And the order of the evaluation also

171
00:13:08,702 --> 00:13:12,004
can be confusing and in some ways unpredictable, with multiple

172
00:13:12,052 --> 00:13:15,464
policies with overlapping scope, especially if

173
00:13:15,502 --> 00:13:19,212
there's some of those mutating ones. And it only

174
00:13:19,266 --> 00:13:22,808
applies to new pods, not anything that's already running on your cluster,

175
00:13:22,904 --> 00:13:26,124
which means you might not know when you update the policy, and then

176
00:13:26,162 --> 00:13:28,430
it goes and breaks something that you're already running,

177
00:13:30,800 --> 00:13:34,096
and you don't know that it's going to break it until it happens to get

178
00:13:34,118 --> 00:13:38,000
to a point of rescheduling. So maybe a node fails or

179
00:13:38,070 --> 00:13:40,980
something like that, say that the pod is going to reschedule.

180
00:13:41,960 --> 00:13:45,284
So, well, what are the alternatives, right, in this new world?

181
00:13:45,322 --> 00:13:48,884
So what should we do? Well, the clock's ticking. August is probably

182
00:13:48,922 --> 00:13:51,030
only another lockdown or so away,

183
00:13:51,800 --> 00:13:55,076
so there's a fair amount of choice.

184
00:13:55,268 --> 00:13:58,488
And here's just a few. I made them shine and like all the

185
00:13:58,494 --> 00:14:01,560
rest of it, right? So they're shiny.

186
00:14:02,300 --> 00:14:05,748
Or you could write your own like it's just a webhook fundamentally that you

187
00:14:05,774 --> 00:14:09,070
can provide a 200 or a not 200 response to.

188
00:14:09,600 --> 00:14:13,324
I'm going to focus on a few because with a little help they provide

189
00:14:13,442 --> 00:14:16,652
like a straightforward ish migration

190
00:14:16,716 --> 00:14:20,124
journey. There is an intrigue

191
00:14:20,172 --> 00:14:24,160
answer, by which I mean it's built

192
00:14:24,230 --> 00:14:27,328
into kubernetes, so why am I not just kind

193
00:14:27,334 --> 00:14:30,388
of pointing at that, grabbing my drink and walking off. Right,

194
00:14:30,474 --> 00:14:34,432
so pod security standards are most easily

195
00:14:34,496 --> 00:14:38,656
thought of as three rigidly defined predefined pod

196
00:14:38,688 --> 00:14:42,128
security policies. So those are privileged,

197
00:14:42,224 --> 00:14:45,668
which is basically anything goes. So it's the same as like not defining

198
00:14:45,684 --> 00:14:49,140
a policy at all baseline, which is like a middle ground,

199
00:14:49,220 --> 00:14:52,616
stops some of the super obvious stuff.

200
00:14:52,798 --> 00:14:55,912
Most your stuff should probably, I'd imagine,

201
00:14:55,976 --> 00:15:00,172
probably run at this stage, at this tier without change and

202
00:15:00,226 --> 00:15:04,104
restricted, which is the most restricted policy and stops

203
00:15:04,152 --> 00:15:07,756
most things. So I would generally

204
00:15:07,788 --> 00:15:11,996
suggest aspire to run stuff here, but realistically you'll

205
00:15:12,028 --> 00:15:15,884
probably have some issues. So rigid universal

206
00:15:15,932 --> 00:15:19,696
policies sound great, and it's super easy to communicate

207
00:15:19,728 --> 00:15:23,588
these between teams, test against them, and absolutely

208
00:15:23,674 --> 00:15:27,392
no confusion when you're deploying between different clusters.

209
00:15:27,536 --> 00:15:30,052
So, happy days, right?

210
00:15:30,186 --> 00:15:33,976
Well, sadly not for

211
00:15:33,998 --> 00:15:38,068
a few reasons. So ideally you'd run all your workload

212
00:15:38,164 --> 00:15:42,552
restricted, but realistically inevitably there'll be some

213
00:15:42,606 --> 00:15:46,376
things that can't quite fit. Well, restrictions are applied

214
00:15:46,408 --> 00:15:50,712
on a namespace level and there's no way to grant fine grade exemptions.

215
00:15:50,776 --> 00:15:54,220
So your only option then is to take a massive step

216
00:15:54,290 --> 00:15:58,204
down and take that entire namespace down

217
00:15:58,242 --> 00:16:01,570
to the next kind of significant step beneath that,

218
00:16:03,060 --> 00:16:06,976
and it's applied with a label on the namespace. I mean not even like an

219
00:16:06,998 --> 00:16:10,480
annotation or an extension of the namespace policy. Fuck's sake.

220
00:16:10,560 --> 00:16:14,132
So what's it good for? Well, the only

221
00:16:14,186 --> 00:16:17,248
thing I can see this is possibly good for is if you're

222
00:16:17,264 --> 00:16:21,280
a software vendor building products that run on Kubernetes,

223
00:16:21,440 --> 00:16:24,600
and if you're mad enough to be in that

224
00:16:24,670 --> 00:16:28,680
business, then if you can make your product run

225
00:16:28,750 --> 00:16:31,976
in a restricted, then it will probably give

226
00:16:31,998 --> 00:16:35,544
you a good head start for whatever unique unicorn

227
00:16:35,592 --> 00:16:39,224
features that your customers will have implemented

228
00:16:39,272 --> 00:16:43,464
and demonstrate that you've at least considered the security implications

229
00:16:43,512 --> 00:16:47,436
of your product. Okay, so how do we migrate

230
00:16:47,468 --> 00:16:50,880
all those old legacy psps to something new? Well,

231
00:16:50,950 --> 00:16:54,080
it's unfortunately no simple like for like mapping pod security

232
00:16:54,150 --> 00:16:57,884
policy. And any of the replacements behave slightly differently

233
00:16:57,932 --> 00:17:01,476
and fundamentally for good reason too. So if you've been

234
00:17:01,498 --> 00:17:05,760
using pod security policy for a while, you probably likely

235
00:17:05,920 --> 00:17:10,884
have some quite complex rules in place that

236
00:17:10,922 --> 00:17:14,168
have become entangled with some of those usability issues that you might have.

237
00:17:14,254 --> 00:17:17,704
So I would generally just encourage you to take the

238
00:17:17,742 --> 00:17:21,704
opportunity to then refactor those and

239
00:17:21,742 --> 00:17:25,836
simplify trying to continue, rather than trying to continue what

240
00:17:25,858 --> 00:17:28,972
you've always done up until now. That said,

241
00:17:29,106 --> 00:17:33,256
there has been some work to ease the transition by reproducing

242
00:17:33,288 --> 00:17:36,940
the same capabilities and even calling them the same things in

243
00:17:37,010 --> 00:17:41,404
some cases. So the short answer is,

244
00:17:41,602 --> 00:17:45,312
use our whizbang super duper tool. I should have worn my pink jeans for today,

245
00:17:45,366 --> 00:17:48,912
sorry. So with this,

246
00:17:48,966 --> 00:17:53,268
you can simply provide your existing PSP and take your pick of

247
00:17:53,434 --> 00:17:57,072
policy engine from Conervo keyboard and or gatekeeper,

248
00:17:57,216 --> 00:18:00,564
or just paste it into our simple web app

249
00:18:00,682 --> 00:18:04,520
and let your browser do the work. So to

250
00:18:04,590 --> 00:18:08,170
demo that real quick, we can do

251
00:18:08,540 --> 00:18:14,840
if I can remember the URL to it via

252
00:18:16,620 --> 00:18:26,240
GitHub IO sorry,

253
00:18:26,430 --> 00:18:28,720
it live demos.

254
00:18:49,380 --> 00:19:17,114
Let me get to the address ow with

255
00:19:17,152 --> 00:19:17,740
that.

256
00:19:22,590 --> 00:19:25,970
So with this you'll notice the big report Abug button,

257
00:19:26,040 --> 00:19:29,730
probably taking more focus than anything else. And that's important because yes,

258
00:19:29,800 --> 00:19:33,474
making bug reports is probably good because it's probably not perfect. It's definitely

259
00:19:33,512 --> 00:19:37,974
not perfect. I built it with

260
00:19:38,012 --> 00:19:41,174
this. I'm just going to pick like

261
00:19:41,212 --> 00:19:44,534
an example. So you'll see the policy on the left

262
00:19:44,572 --> 00:19:48,506
hand side, and you can see on the right hand side the

263
00:19:48,528 --> 00:19:52,138
policy of what that looks like in gatekeeper. So if you're

264
00:19:52,144 --> 00:19:55,638
using OPA or in cubeboarden,

265
00:19:55,734 --> 00:19:59,180
which is a bit bigger, or converto, which again,

266
00:20:01,410 --> 00:20:04,800
errors. So yeah, bugs are good, right?

267
00:20:05,650 --> 00:20:08,320
If I do that, it might do something different.

268
00:20:10,210 --> 00:20:12,800
Okay, fine, bugs, cool.

269
00:20:15,490 --> 00:20:17,760
Raising bugs is probably a good thing. If I do that,

270
00:20:18,390 --> 00:20:21,710
that works in canoe at least. So yeah, some of them don't work, but that's

271
00:20:21,790 --> 00:20:25,362
indicative of some of the mapping and some of the limitations in those policy

272
00:20:25,416 --> 00:20:28,502
engines. Right,

273
00:20:28,556 --> 00:20:31,510
okay, fine, here ends the live demos.

274
00:20:35,130 --> 00:20:38,294
So by doing that,

275
00:20:38,332 --> 00:20:41,462
well, your PSP just converted more or less, as we saw

276
00:20:41,516 --> 00:20:45,846
seamlessly to canervo keyboard or gatekeeper

277
00:20:46,038 --> 00:20:49,226
was easy, right? Well, but should you.

278
00:20:49,328 --> 00:20:53,194
So don't be fooled. Just because I wrote a tool to

279
00:20:53,232 --> 00:20:56,910
help does not mean I think any of this is remotely even

280
00:20:56,980 --> 00:21:00,654
a good idea for the vast majority of the use cases. But it

281
00:21:00,692 --> 00:21:04,178
got your attention, which is the important bit. Using a

282
00:21:04,184 --> 00:21:07,538
cluster enforced policy does not guarantee any real

283
00:21:07,624 --> 00:21:11,246
security. You may well find that the cure

284
00:21:11,278 --> 00:21:13,090
is actually worse than the disease.

285
00:21:13,910 --> 00:21:17,334
So as a trend, we're seeing more

286
00:21:17,372 --> 00:21:21,894
and more vulnerabilities in the wild with attacks that

287
00:21:21,932 --> 00:21:25,462
cluster enforced policy would actually not protect against, say,

288
00:21:25,516 --> 00:21:28,882
this and porn kit and dirty

289
00:21:28,946 --> 00:21:32,326
pipe and dirty cow and similar silly

290
00:21:32,358 --> 00:21:35,626
brand names that cves get, but they're more in

291
00:21:35,648 --> 00:21:39,558
the case. So if you've been keeping up, you'll probably realize

292
00:21:39,654 --> 00:21:43,598
I've taken you on a roller coaster. So I've explained a problem with security

293
00:21:43,684 --> 00:21:46,698
and kubernetes, a solution that was PSP,

294
00:21:46,874 --> 00:21:50,462
another problem of psps going away, and then another

295
00:21:50,516 --> 00:21:54,042
solution of a tool that I built, and I'll get another

296
00:21:54,116 --> 00:21:57,460
problem that undermines everything that I've just told you.

297
00:21:58,790 --> 00:22:02,210
Well, the good news is there are answers. They are simple,

298
00:22:02,280 --> 00:22:05,566
but not necessarily easy. But I'm out of time,

299
00:22:05,688 --> 00:22:10,742
so you'll have to come back and

300
00:22:10,796 --> 00:22:13,382
find out from that in my next talk.

301
00:22:13,436 --> 00:22:15,990
However, as a sign of some good faith,

302
00:22:16,810 --> 00:22:20,522
you can expect a scenic walkthrough, some buzzwords like these,

303
00:22:20,656 --> 00:22:24,950
and I'm excited to be able to share some of the hard but fundamentally

304
00:22:25,030 --> 00:22:28,714
simple solutions that can actually provide a robust level

305
00:22:28,752 --> 00:22:32,650
of coverage, and also advice on how to tackle

306
00:22:32,730 --> 00:22:36,334
the cultural changes that need to go hand in hand with the

307
00:22:36,372 --> 00:22:40,318
tech. Thanks for your time. Hopefully this has been

308
00:22:40,484 --> 00:22:44,622
interesting, if not just a tease. Please do

309
00:22:44,676 --> 00:22:48,718
follow me on LinkedIn, Twitter, all the other nonsense at GitHub.

310
00:22:48,894 --> 00:22:52,434
You can be assured there'll be no spam, since I'm simply awful at

311
00:22:52,472 --> 00:22:55,902
any sort of self promotion, especially on social media CNs

312
00:22:55,966 --> 00:22:59,866
me just points at my LinkedIn at Apvia

313
00:22:59,918 --> 00:23:02,982
we're doing a ton of open source, so do check out

314
00:23:03,036 --> 00:23:06,742
both mine and Appvia's GitHub orgs star and

315
00:23:06,876 --> 00:23:11,002
all the other things to watch and to your heart's content. The original content

316
00:23:11,056 --> 00:23:14,906
for this talk and some of the solutions I've alluded to, including how

317
00:23:14,928 --> 00:23:18,106
to do policy as version code, are available on

318
00:23:18,128 --> 00:23:21,180
the Appia blog at the minute questions,

319
00:23:22,110 --> 00:23:24,540
as Graham said, we can tackle later.

320
00:23:25,470 --> 00:23:28,218
Otherwise I would have held the stage, which was the notes that I had.

321
00:23:28,384 --> 00:23:29,820
And that's me.

