1
00:00:23,090 --> 00:00:23,880
Hi everyone.

2
00:00:27,450 --> 00:00:30,718
I guess many of you can relate to this situation. Early in

3
00:00:30,724 --> 00:00:34,254
the morning you wake up feeling good before work, gently turn

4
00:00:34,292 --> 00:00:37,870
the alarm off and open your laptop to check your email and chat.

5
00:00:38,210 --> 00:00:41,738
You received a notification in your email you have been assigned

6
00:00:41,754 --> 00:00:45,406
a new task. You need to implement feature X on Project A.

7
00:00:45,588 --> 00:00:49,518
You work hard all day, do youre job and release feature X on Project

8
00:00:49,604 --> 00:00:53,446
A. Then some time passes. Put your

9
00:00:53,588 --> 00:00:57,654
little hand in mind. You wake up in a great mood again youre turn

10
00:00:57,692 --> 00:01:01,506
the alarm off and open your email. You have received another notification

11
00:01:01,618 --> 00:01:04,694
about a task you need to implement feature X

12
00:01:04,732 --> 00:01:08,238
on Project B. At first you think it's deja vu,

13
00:01:08,354 --> 00:01:12,026
but then upon closer inspection, you realize it's a different project and

14
00:01:12,048 --> 00:01:16,214
it just needs the same feature. You read about best programming

15
00:01:16,262 --> 00:01:20,426
practices and now you should reuse code. But the feature seems small and

16
00:01:20,448 --> 00:01:24,254
you already know everything about how to make it. Plus, the projects are from

17
00:01:24,292 --> 00:01:27,790
different domains. It's unlikely to happen again in the future,

18
00:01:27,860 --> 00:01:31,346
right? So you copy the code and release feature X on

19
00:01:31,368 --> 00:01:34,654
Project B very quickly and easily. That's a good practice

20
00:01:34,702 --> 00:01:37,300
too. But half a year later,

21
00:01:40,710 --> 00:01:44,242
waking up and opening your email, you feel a panic attack is coming

22
00:01:44,296 --> 00:01:47,846
on. You've received an education about you need to

23
00:01:47,868 --> 00:01:51,606
implement feature X on Project C. You say enough is

24
00:01:51,628 --> 00:01:54,626
enough. It's time to move everything to common components.

25
00:01:54,818 --> 00:01:58,514
You open Project A, look at your feature but don't recognize

26
00:01:58,562 --> 00:02:02,298
it. Everything has changed in Pinek. You open Project B,

27
00:02:02,384 --> 00:02:05,962
search for feature X. But here as well, it's completely different

28
00:02:06,096 --> 00:02:09,338
and not even the same as Project A. You are

29
00:02:09,344 --> 00:02:12,890
left with no choice. So for the third time, you create feature X

30
00:02:12,960 --> 00:02:16,346
and release it on Project C. If such drama

31
00:02:16,378 --> 00:02:20,602
happens with your project from time to time, then you will definitely like this presentation.

32
00:02:20,746 --> 00:02:24,846
And today I will display the role of Bill Murray. My name

33
00:02:24,868 --> 00:02:27,934
is Vadim. I am already ten years in development.

34
00:02:28,062 --> 00:02:31,794
I work as a front end team lead at ETG and also I

35
00:02:31,832 --> 00:02:35,894
write a series of articles on GitHub. 2 minutes Dev notes this

36
00:02:35,932 --> 00:02:38,760
series is about daily challenges programmers face.

37
00:02:39,450 --> 00:02:43,554
So as I said, I worked at ETG. ETG manages

38
00:02:43,602 --> 00:02:46,482
companies specializing in hotel bookings worldwide.

39
00:02:46,626 --> 00:02:50,006
It operates in hundreds plus markets represented

40
00:02:50,038 --> 00:02:52,886
by brands like Zenhotels and Tradehawk.

41
00:02:53,078 --> 00:02:56,298
So here is what it looks like on the inside. The B

42
00:02:56,304 --> 00:03:00,060
two C segment includes hotels, the most popular product of the company.

43
00:03:00,430 --> 00:03:03,726
Hotels are also represented in the B two B segment. That means

44
00:03:03,748 --> 00:03:07,630
that the hotel engine can be utilized for the needs of other businesses

45
00:03:08,050 --> 00:03:11,710
apart from hotels. In the B two B segment, the company also has a set

46
00:03:11,780 --> 00:03:14,974
of transportation products. What are these products?

47
00:03:15,172 --> 00:03:18,434
Sales, the sales of flight tickets, the sale of train

48
00:03:18,472 --> 00:03:21,682
tickets and transfers. About a year ago,

49
00:03:21,736 --> 00:03:25,414
I joined ETG and began to be responsible for the front end of all

50
00:03:25,452 --> 00:03:29,366
transportation products. And as you might guess, I encountered the

51
00:03:29,388 --> 00:03:31,830
drama. I showcased it at the beginning.

52
00:03:33,290 --> 00:03:37,190
So what we have the frontend is written in Nextjs.

53
00:03:37,630 --> 00:03:40,090
All apps have the same set of pages.

54
00:03:40,590 --> 00:03:43,722
Apps have similar domain. There is a similar

55
00:03:43,776 --> 00:03:47,894
set of services to interact with and similar work with suppliers.

56
00:03:48,022 --> 00:03:51,674
But each product has its own unique aspect which projects simply creating

57
00:03:51,722 --> 00:03:55,226
one application and coloring it in three different shades.

58
00:03:55,418 --> 00:03:59,118
Hence we encounter our drama. Everything seems to be the same,

59
00:03:59,204 --> 00:04:02,574
but it's not. So the very first pain point

60
00:04:02,612 --> 00:04:06,258
I started to address was how to create a feature once

61
00:04:06,344 --> 00:04:09,646
and forget about it. In general, the problem of reusing

62
00:04:09,678 --> 00:04:13,618
common code is as old as time. As soon as any company starts to

63
00:04:13,624 --> 00:04:17,014
grow a little and has more than one project, it faces the

64
00:04:17,052 --> 00:04:21,046
issue of quota use, not to mention big text. And when

65
00:04:21,068 --> 00:04:24,294
we hear big text and problem of quota use in the same

66
00:04:24,332 --> 00:04:27,906
sentence, the first things we think of is monorepository.

67
00:04:28,098 --> 00:04:31,786
A monorepository is a way to manage code where you keep all the

68
00:04:31,808 --> 00:04:35,670
code for many projects in one place using one git repository.

69
00:04:35,830 --> 00:04:39,834
This is different from the usual method where each project has its own separate

70
00:04:39,882 --> 00:04:43,402
git repository and git history. Therefore,

71
00:04:43,466 --> 00:04:46,798
it seems that we can conclude the presentation, create a

72
00:04:46,804 --> 00:04:50,746
mona repository, place common components in the separate folder and all applications

73
00:04:50,778 --> 00:04:54,606
will have access to it. However, the monorepository didn't

74
00:04:54,638 --> 00:04:58,066
suit our needs. So what's the problem? As I

75
00:04:58,088 --> 00:05:01,554
said before, our products are very similar, but they

76
00:05:01,672 --> 00:05:05,426
also have significant differences. They have different backends in

77
00:05:05,448 --> 00:05:08,854
different programming languages. In general, there are many

78
00:05:08,892 --> 00:05:11,590
edge cases where the scenarios do not overlap.

79
00:05:11,930 --> 00:05:15,426
Therefore, developing all products in one place with a single git

80
00:05:15,458 --> 00:05:19,194
history is not a good idea. Additionally, since they have

81
00:05:19,232 --> 00:05:22,762
different backends and different suppliers, each product should have

82
00:05:22,816 --> 00:05:26,138
its own release cycle and race warning, even if you

83
00:05:26,144 --> 00:05:29,706
are talking about the same feature. Of course we can

84
00:05:29,728 --> 00:05:32,970
use some of the trendy tools for working with monarch repositories.

85
00:05:33,130 --> 00:05:36,766
These tools allow us to check the git history only for the specific project

86
00:05:36,868 --> 00:05:40,350
and its dependencies and enable independent releases.

87
00:05:40,690 --> 00:05:44,066
All of these tools are working, however, it's not other things to

88
00:05:44,088 --> 00:05:47,586
learn and maintain and do it that we have a small team of

89
00:05:47,608 --> 00:05:50,690
front end developers introducing almost any new technology.

90
00:05:50,840 --> 00:05:54,546
Create a subbuzz factor of one since it's clear that I

91
00:05:54,568 --> 00:05:58,310
will be the one who will edit, I wouldn't want to block all the teams.

92
00:05:58,730 --> 00:06:01,634
Additionally, this adds unnecessary complexity.

93
00:06:01,762 --> 00:06:05,494
It's much simpler to copy a feature from one project to another rather

94
00:06:05,532 --> 00:06:09,338
than continuously maintain an abstraction that's only beneficial in a

95
00:06:09,344 --> 00:06:12,634
couple of cases. To learn more about the concept of

96
00:06:12,672 --> 00:06:16,218
over abstracting, you can watch Dana Brahma's presentation on

97
00:06:16,224 --> 00:06:18,060
the topic of wet code base.

98
00:06:21,790 --> 00:06:25,166
So Bill Murey, gripping onto a stubborn idea,

99
00:06:25,268 --> 00:06:28,400
couldn't escape from the loop and faced failure one more time.

100
00:06:28,770 --> 00:06:32,510
Once we rejected the monarch repository, we basically have one

101
00:06:32,660 --> 00:06:35,874
option left for reusing code. It's polar repository and

102
00:06:35,912 --> 00:06:39,138
packages I must say it's a quite popular approach in

103
00:06:39,144 --> 00:06:43,070
the company. Most UI components that are shared between teams

104
00:06:43,150 --> 00:06:46,590
and should be common are placed in the separate git repository.

105
00:06:46,750 --> 00:06:50,274
There is a dedicated team that maintains it, and all other developers

106
00:06:50,322 --> 00:06:53,846
in the company can contribute to it. In most of the teams I

107
00:06:53,868 --> 00:06:57,874
know, common used package manager is yarn and yarn allows

108
00:06:57,922 --> 00:07:01,910
specifying a repository URL as a project dependency in package JSON.

109
00:07:02,270 --> 00:07:05,926
So this led us to use a package in project even without setting

110
00:07:05,958 --> 00:07:10,110
up a corporate registry. What are the advantages of this solution?

111
00:07:10,450 --> 00:07:14,990
So it's widely used method within the company, ensuring uniformity

112
00:07:15,490 --> 00:07:18,878
change. History is isolated and semantically accurate within a

113
00:07:18,884 --> 00:07:22,506
single repository. It has intuitive workflow.

114
00:07:22,618 --> 00:07:26,022
You complete your work in the common package, bump the package direction,

115
00:07:26,106 --> 00:07:29,966
and update the package version in the application. So Bill Murray

116
00:07:29,998 --> 00:07:33,634
went to sleep hoping that he had broken the loop and that the new

117
00:07:33,672 --> 00:07:36,920
day would be different from yesterday. But the next morning.

118
00:07:40,730 --> 00:07:44,358
At first glance, it seems like the solution is suitable and it's time to

119
00:07:44,364 --> 00:07:46,978
start moving the common code to a separate repository.

120
00:07:47,154 --> 00:07:50,362
However, a few questions have arisen. How do we test

121
00:07:50,416 --> 00:07:53,754
everything during developing? And how do we write reusable code

122
00:07:53,792 --> 00:07:57,018
that can be reused? It might teams like a strange questions,

123
00:07:57,104 --> 00:08:00,598
but these are not without reason. Look, when I talk

124
00:08:00,624 --> 00:08:04,606
about the shared component library, it's pretty clear components are

125
00:08:04,628 --> 00:08:07,790
something that can be easily encapsulated and parameterized.

126
00:08:08,290 --> 00:08:12,494
We need a button. We wrote a function that takes some couple of parameters and

127
00:08:12,532 --> 00:08:15,586
returns some UI. How can we ensure that

128
00:08:15,608 --> 00:08:20,066
such UI will be displayed correctly in our application when we import it

129
00:08:20,248 --> 00:08:23,314
right? We should take some tools like storybook and

130
00:08:23,352 --> 00:08:26,614
create a story. Storybook will show us how our

131
00:08:26,652 --> 00:08:29,960
button will look like in our application when we add it there.

132
00:08:31,210 --> 00:08:34,898
If in addition to components we need to reuse some business logic,

133
00:08:34,994 --> 00:08:38,226
we still have unit tests. We extract the logic

134
00:08:38,258 --> 00:08:41,946
into separate functions or helpers and write unit tests for them.

135
00:08:42,128 --> 00:08:46,220
This way we determine how our logic will be reused within the application.

136
00:08:46,990 --> 00:08:50,400
But what should I do if I am using nextjs. For example,

137
00:08:50,850 --> 00:08:54,618
I need to extract a custom page that connects

138
00:08:54,634 --> 00:08:58,810
with a polar client and validates get initial props across all pages.

139
00:08:58,970 --> 00:09:02,334
With this level of reuse, I have to move half of the project

140
00:09:02,452 --> 00:09:06,046
infrastructure from the project repository to a separate repository

141
00:09:06,158 --> 00:09:09,170
and create a similar one there. To test my logic.

142
00:09:09,750 --> 00:09:13,026
In essence I need to invent my own storybook, but for components of

143
00:09:13,048 --> 00:09:16,214
different level. You might say just use

144
00:09:16,252 --> 00:09:19,762
the RN link, keep everything in your own repository,

145
00:09:19,906 --> 00:09:23,766
link your separate library and develop. That way when

146
00:09:23,788 --> 00:09:27,138
you are finished you can unlink, update the version and you are

147
00:09:27,164 --> 00:09:31,158
good to go. But this may seems counterintuitive.

148
00:09:31,254 --> 00:09:35,434
It's like agreeing that we have a poly repository instead of monorepository and

149
00:09:35,472 --> 00:09:39,494
then suddenly restorting the linking packages and essentially reinventing

150
00:09:39,542 --> 00:09:42,894
workspaces. We want to come up with something that allow

151
00:09:42,932 --> 00:09:46,954
us to harness the full power of the rigs as a monopository

152
00:09:47,002 --> 00:09:50,574
approach. However, we want to remain independent and continue using

153
00:09:50,612 --> 00:09:53,866
the polar repo approach. And as you can probably guess

154
00:09:53,908 --> 00:09:57,010
from the name of the presentation, we have found a solution.

155
00:09:57,350 --> 00:10:01,310
So git submodules when we are talking about GitHub modules,

156
00:10:01,390 --> 00:10:04,898
there is no difference from a regular git repository. I mean, this is the

157
00:10:04,904 --> 00:10:08,678
same things. Now, instead of storing the package version in the

158
00:10:08,684 --> 00:10:12,070
package JSON, we store a reference to a comet in the

159
00:10:12,220 --> 00:10:16,038
submodules history. This reference give us access to all of

160
00:10:16,044 --> 00:10:19,594
the files that were current at that common. This way

161
00:10:19,632 --> 00:10:22,822
you no longer need to manually handle linking packages.

162
00:10:22,966 --> 00:10:26,426
As soon as you install a submodules, a regular directory appears in the

163
00:10:26,448 --> 00:10:29,398
project containing the necessary package files.

164
00:10:29,574 --> 00:10:33,326
Let's look how we can do it. To add a submodules to the project,

165
00:10:33,428 --> 00:10:37,482
you need to execute the following comment git submodules add and specify

166
00:10:37,546 --> 00:10:41,226
the rule of your shared repository. After running the comment,

167
00:10:41,258 --> 00:10:45,346
you can check the status of your project and you will see the

168
00:10:45,368 --> 00:10:48,706
next following so we can see

169
00:10:48,728 --> 00:10:52,206
that two files have been added. First, the git submodules

170
00:10:52,238 --> 00:10:55,934
configuration file git modules where all the submodules

171
00:10:55,982 --> 00:10:59,654
used in the application will be list the config file itself is very

172
00:10:59,692 --> 00:11:03,366
simple. It contains name of submodule pass where submodules is

173
00:11:03,388 --> 00:11:07,654
placed in the application, and oral where that submodules is fetched from

174
00:11:07,852 --> 00:11:11,826
the second file, or more accurately a symbolic link, is the submodules

175
00:11:11,858 --> 00:11:15,094
itself. To confirm that it is a reference to a commit,

176
00:11:15,142 --> 00:11:18,922
you can execute the comment git diff and see the output that says

177
00:11:18,976 --> 00:11:22,310
it is has to make this a

178
00:11:22,320 --> 00:11:25,520
module files appear under its name, you need to fetch them.

179
00:11:27,010 --> 00:11:30,186
You need to run the common git submodules, update remote init,

180
00:11:30,378 --> 00:11:33,666
and then wrap it in NPM scripts. For example, to make it

181
00:11:33,688 --> 00:11:36,770
easier to use in local development or CI pipeline.

182
00:11:37,190 --> 00:11:41,170
For example, in our company we have such script yarn update GitHub

183
00:11:41,590 --> 00:11:45,522
and that's it. Now we have a directory in the project that leads to another

184
00:11:45,576 --> 00:11:49,058
repository. We move the shared code into the submodules and reuse

185
00:11:49,074 --> 00:11:53,122
it. There is no need to do anything separately within the submodules

186
00:11:53,186 --> 00:11:56,466
since all the code is used only in the project. Bill Murray

187
00:11:56,498 --> 00:11:59,580
commits his changes and goes to sleep. But in the morning,

188
00:12:03,230 --> 00:12:06,906
Bill Murray forgot that he has a team and that they need to learn how

189
00:12:06,928 --> 00:12:10,170
to use new tool, even if it's a good old git.

190
00:12:10,510 --> 00:12:14,458
As I mentioned before, submodules are just like regular git repositories.

191
00:12:14,634 --> 00:12:18,426
So if you make changes to files within the submodules, you need to execute

192
00:12:18,458 --> 00:12:22,426
the following code to save the changes. CD submodules pass git common

193
00:12:22,458 --> 00:12:26,574
git push once you commit changes in the submodules, this symbol

194
00:12:26,622 --> 00:12:30,078
link in your parent repository will also automatically update

195
00:12:30,174 --> 00:12:33,426
to point to the latest commit you made. And to

196
00:12:33,448 --> 00:12:36,814
avoid losing these changes, youre now need to commit the changes in the parent

197
00:12:36,872 --> 00:12:41,106
repository as well. It's the same process. Git common git push

198
00:12:41,298 --> 00:12:44,534
if you don't specify anything additional when starting to work

199
00:12:44,572 --> 00:12:48,614
with some modules, by default, the submodules fetches the default branch.

200
00:12:48,742 --> 00:12:52,554
Therefore your project will use files from this branch, but you can

201
00:12:52,592 --> 00:12:56,038
control this to do so. In the Gitchmodel file,

202
00:12:56,134 --> 00:12:59,406
you can specify the branch property, and then the submodules will

203
00:12:59,428 --> 00:13:03,674
start pulling changes from that branch. Unfortunately or fortunately,

204
00:13:03,802 --> 00:13:07,818
in the submodule's configuration, you can specify a specific commit hash,

205
00:13:07,914 --> 00:13:11,102
only a branch or tag anyway. In the parent

206
00:13:11,156 --> 00:13:14,766
repository it will store the latest commit hash from branch or from

207
00:13:14,788 --> 00:13:18,274
tag, but in case with branch, this has may change

208
00:13:18,312 --> 00:13:21,586
if new changes appear on the branch we are looking at. Due to

209
00:13:21,608 --> 00:13:24,766
this, our team made a decision to abstract from the common default

210
00:13:24,798 --> 00:13:27,938
branch. This way, changes related to one project

211
00:13:28,024 --> 00:13:31,400
won't forced an update for another project. What do I mean?

212
00:13:31,770 --> 00:13:34,966
We have created three more branches for each project and use

213
00:13:34,988 --> 00:13:37,160
the default branch as a synchronization point.

214
00:13:37,610 --> 00:13:41,094
Let's say someone started working on a feature in the Avia

215
00:13:41,142 --> 00:13:44,614
project. They have their own target branch Avia

216
00:13:44,662 --> 00:13:47,850
core, from which they create their feature branch and make changes

217
00:13:47,920 --> 00:13:51,626
in it. While the changes are in progress, they will also need

218
00:13:51,648 --> 00:13:55,550
to change the data source for the submodules and specify their feature branch.

219
00:13:55,890 --> 00:13:59,274
Once the feature is completed, the featured branch is merged with the Target

220
00:13:59,322 --> 00:14:01,840
branch and Avia youre moves forward.

221
00:14:02,450 --> 00:14:05,634
However, this doesn't force the other projects to immediately pull the

222
00:14:05,672 --> 00:14:09,550
latest changes from main branch. It's possible that this common feature

223
00:14:09,630 --> 00:14:13,074
might be needed in other projects later, and when these

224
00:14:13,112 --> 00:14:16,806
changes are needed, the main branch is pulled into the appropriate core branch of

225
00:14:16,828 --> 00:14:20,470
the project, for example rail whales or transfers.

226
00:14:20,810 --> 00:14:24,306
So these approaches looks like we have one common development

227
00:14:24,338 --> 00:14:27,100
branch and three production branches for each project.

228
00:14:27,470 --> 00:14:30,966
If you look more closely, you will notice that this approach slightly

229
00:14:30,998 --> 00:14:34,426
differs from the package approach. With packages, we have

230
00:14:34,448 --> 00:14:37,786
the opposite three developing branches which

231
00:14:37,808 --> 00:14:41,782
are actually feature branches, and one production branch that forces

232
00:14:41,846 --> 00:14:45,738
applications to use new stuff every time there is an update.

233
00:14:45,914 --> 00:14:49,278
Submodules allow us to avoid this. In addition to all

234
00:14:49,284 --> 00:14:52,926
of this, we also get a bunch of other benefits. We have the

235
00:14:52,948 --> 00:14:56,274
ability to easily search through files in the entire application,

236
00:14:56,472 --> 00:14:59,694
including the submodules. As I mentioned earlier,

237
00:14:59,742 --> 00:15:03,026
the IDE teams the submodule as a regular directory, so the

238
00:15:03,048 --> 00:15:06,674
search is no different. Now we have the capability to

239
00:15:06,712 --> 00:15:10,406
store regular typescript in our GitHub module which we can import into

240
00:15:10,428 --> 00:15:13,894
the application and use seamlessly without a build step.

241
00:15:14,092 --> 00:15:17,810
You no longer have to wait for the build pipeline of your common library

242
00:15:17,890 --> 00:15:21,180
to finish in order to use in a fresh version in your application.

243
00:15:21,790 --> 00:15:25,594
The shared code from the submodules is integrated into your application code

244
00:15:25,712 --> 00:15:29,082
and pipelines are combined. You can build

245
00:15:29,136 --> 00:15:33,386
once and if everything compiles, it means the common submodule

246
00:15:33,418 --> 00:15:37,006
is in order. This also includes linting and

247
00:15:37,028 --> 00:15:40,526
testing. We got an agnostic tool that can be

248
00:15:40,548 --> 00:15:43,866
fitted into any architecture as the submodule is the conceptually

249
00:15:43,898 --> 00:15:46,990
a directory with a set of files of a certain category,

250
00:15:47,150 --> 00:15:50,338
something like a shared model. In addition to

251
00:15:50,344 --> 00:15:53,598
all of the above, we also have the convenience of reusing not

252
00:15:53,624 --> 00:15:57,366
only isolated entities like components, but also large pieces of

253
00:15:57,388 --> 00:16:01,030
application logic without the need to rebuild the infrastructure.

254
00:16:01,450 --> 00:16:04,530
And essentially we have resolved our drama.

255
00:16:04,690 --> 00:16:08,134
Now implemented features develop uniformly for all products and

256
00:16:08,172 --> 00:16:11,626
follow the same concept. And the icing on the cake. As soon

257
00:16:11,648 --> 00:16:15,194
has we introduced submodules, we fixed several tipples in the

258
00:16:15,232 --> 00:16:18,540
shared functionality that was simply copied from project to project.

259
00:16:18,910 --> 00:16:22,654
Mil Muri seems to have figured something out. As soon as he started doing

260
00:16:22,692 --> 00:16:26,286
good things for the team, his typical day changed and now events are

261
00:16:26,308 --> 00:16:30,190
happened differently. Perhaps this is the only way to break the loop.

262
00:16:31,330 --> 00:16:35,186
Alright, next I would like to share some consideration with you on

263
00:16:35,208 --> 00:16:38,946
the topic of what to keep in mind if your team setup is similar to

264
00:16:38,968 --> 00:16:42,078
ours and you also want to transition to some modules.

265
00:16:42,254 --> 00:16:46,038
After all, besides the pros, there is always cons and nuances to

266
00:16:46,044 --> 00:16:50,294
deal with. This process always comes down to a tradeoff where

267
00:16:50,332 --> 00:16:53,926
we sacrifice something to get something else. So here we

268
00:16:53,948 --> 00:16:57,458
go. Git submodules is the same kind of dependency

269
00:16:57,554 --> 00:17:01,702
as other packages in your package. Json nothing

270
00:17:01,756 --> 00:17:04,380
in this module should implement anything from the application.

271
00:17:05,070 --> 00:17:08,682
You should follow this rule to avoid turning your submodules into something

272
00:17:08,736 --> 00:17:12,618
that only works in a limited number of projects while failing in orders

273
00:17:12,634 --> 00:17:16,938
because the files are not in the right places. On the other hand, the submodules

274
00:17:16,954 --> 00:17:20,240
is allowed to be aware of other dependencies in your project.

275
00:17:20,690 --> 00:17:23,918
It's similar to when you install a state manager for react.

276
00:17:24,014 --> 00:17:27,394
You expect it to work on any react project and not work where

277
00:17:27,432 --> 00:17:30,654
react is absent. If you have several multilingual

278
00:17:30,702 --> 00:17:33,954
applications, it's logical to assume that common text should

279
00:17:33,992 --> 00:17:37,814
be translated in the same way so that translators don't do the same work

280
00:17:37,852 --> 00:17:41,474
multiple times for each project. As soon as you have prepared

281
00:17:41,522 --> 00:17:44,530
the code for the release, it's best to enter the submodule,

282
00:17:44,610 --> 00:17:48,226
create a tag, and specify it as a branch in the submodule config

283
00:17:48,258 --> 00:17:51,498
in your main application. This is only for the future.

284
00:17:51,664 --> 00:17:55,306
If something breaks in the future and you need to debug code that depends on

285
00:17:55,328 --> 00:17:59,130
the submodules, it will be significant help. Look,

286
00:17:59,280 --> 00:18:03,546
you can make a mistake. For example, in version 100:17 release

287
00:18:03,578 --> 00:18:07,486
it and then add more code to the submodules. The submodules code can

288
00:18:07,508 --> 00:18:11,274
change a lot before the error is discovered and may already be incompatible

289
00:18:11,322 --> 00:18:14,766
with the version of your application in production text. Come to

290
00:18:14,788 --> 00:18:17,966
rescue in this case, we know which submodules version

291
00:18:17,998 --> 00:18:21,266
we used for the release. We can add this tag to use to the

292
00:18:21,288 --> 00:18:25,650
submodule config and reproduce the bug in our application on the compatible branch.

293
00:18:26,070 --> 00:18:29,318
But it is not necessary to create text every time.

294
00:18:29,484 --> 00:18:33,362
You can achieve the same effect by simply switching to a past common

295
00:18:33,426 --> 00:18:37,522
branch off from lit and then specify this branch in the submodule config

296
00:18:37,666 --> 00:18:40,300
and then we can test our application in the same way.

297
00:18:40,670 --> 00:18:44,230
Components and functions beside being abstract and parameterized

298
00:18:44,310 --> 00:18:48,550
should be as small has possible. This is necessary for tree shaking.

299
00:18:48,710 --> 00:18:52,090
If one file contains hundred functions, of which 90

300
00:18:52,160 --> 00:18:55,870
are used in project A and project B, and only ten are used in Project

301
00:18:55,940 --> 00:18:59,422
C, it's better to separate them. This way. Project C

302
00:18:59,476 --> 00:19:03,134
doesn't need to include code in its bundle that it doesn't use.

303
00:19:03,332 --> 00:19:06,558
There are situations where a feature is developed

304
00:19:06,574 --> 00:19:10,594
at the same time. In two projects, the stars aligned. In such

305
00:19:10,632 --> 00:19:14,238
cases, it's obvious that the two projects might block each other while requesting

306
00:19:14,254 --> 00:19:17,894
the common parts. In this case, one project should work

307
00:19:17,932 --> 00:19:21,622
on the common part that can be reused later. While the second

308
00:19:21,676 --> 00:19:24,870
project focuses on things specific to its own requirements,

309
00:19:25,210 --> 00:19:28,986
it's crucial to define the contract or interface you expect from the

310
00:19:29,008 --> 00:19:32,602
common part to avoid issues with its future

311
00:19:32,736 --> 00:19:36,042
use. So one team works on the common part

312
00:19:36,096 --> 00:19:39,514
with a known interface, and the second team makes changes in their

313
00:19:39,552 --> 00:19:43,306
project using that interface. Then they can switch roles.

314
00:19:43,498 --> 00:19:46,862
The first team works on their project and the second team can start

315
00:19:46,916 --> 00:19:51,242
testing once the first team is done. The second team already got feedback

316
00:19:51,306 --> 00:19:55,358
and can make necessary adjustments to the shared code. And perhaps

317
00:19:55,374 --> 00:19:59,426
the most important advice all the abovementioned tips may

318
00:19:59,448 --> 00:20:03,134
not directly relate to working with submodules, but it's crucial to document

319
00:20:03,182 --> 00:20:06,754
each of them. What I have shared with you is based on our

320
00:20:06,792 --> 00:20:09,640
experience of using submodules for almost a year.

321
00:20:10,010 --> 00:20:13,922
Documenting each of these aspects is another way to create documentation

322
00:20:13,986 --> 00:20:17,260
for new team members joining your project and team,

323
00:20:17,710 --> 00:20:21,050
so don't overlook this. Let's summarize.

324
00:20:21,470 --> 00:20:24,860
The problem of reusing code has been around for a long time.

325
00:20:25,230 --> 00:20:28,954
A monopository is an excellent solution, but is more suitable for very

326
00:20:28,992 --> 00:20:32,446
large teams and may be challenging for smaller teams due to the need to

327
00:20:32,468 --> 00:20:35,930
maintain another new technology. A poly repository

328
00:20:36,010 --> 00:20:39,210
solves the problem of reusability and separate histories,

329
00:20:39,370 --> 00:20:43,166
but is better suited for entities that are easily to isolate and

330
00:20:43,188 --> 00:20:46,030
for which you can set up your own infrastructure.

331
00:20:46,370 --> 00:20:50,282
Git submodules allow you to combine the convenience of a monorepo

332
00:20:50,346 --> 00:20:53,230
with the ability to address issues from a poly repo.

333
00:20:53,530 --> 00:20:57,602
Listen to your team and document all gaps in your processes.

334
00:20:57,746 --> 00:21:02,662
This is your contribution to the documentation for future team members and

335
00:21:02,716 --> 00:21:06,406
that's all. Subscribe to my socials, leave feedback, and thank you

336
00:21:06,428 --> 00:21:07,090
all for your attention.

