1
00:00:27,010 --> 00:00:31,186
Hello everyone, I'm Trishul. I'm a frontend developer and a JavaScript enthusiast.

2
00:00:31,298 --> 00:00:34,406
By day I architect some e commerce solution for Westwing and

3
00:00:34,428 --> 00:00:38,054
by night I'm a Mozilla enthusiast. So today

4
00:00:38,092 --> 00:00:42,338
I'll be talking about destructuring front end monolith with micro frontends.

5
00:00:42,514 --> 00:00:45,794
So what is a monolith? By definition,

6
00:00:45,922 --> 00:00:49,298
monolithic application is designed to be a self contained

7
00:00:49,394 --> 00:00:52,730
complete of programs are interconnected and interdependent.

8
00:00:52,890 --> 00:00:56,606
So monoliths application are self contained applications, the component of

9
00:00:56,628 --> 00:01:00,666
which are tightly coupled to each other, interdependent and interconnected

10
00:01:00,858 --> 00:01:04,560
components like UI elements, database, everything goes together.

11
00:01:04,930 --> 00:01:08,642
In modern day this monolith has already been broken into backend and the frontend,

12
00:01:08,776 --> 00:01:11,918
and eventually backend has been broken into microservices.

13
00:01:12,094 --> 00:01:16,226
This worked fine for along, but with evolution of JavaScript we

14
00:01:16,248 --> 00:01:19,846
have lots of code now in front end. Frontend hosts major chunks of

15
00:01:19,868 --> 00:01:23,974
business logic. With lots of code comes lots of complete and

16
00:01:24,012 --> 00:01:27,698
now what we have is again called a front end monolith.

17
00:01:27,794 --> 00:01:31,546
And with this we have all the problems of monolith again all the

18
00:01:31,568 --> 00:01:34,874
code is in a single place, increasing size of repo every

19
00:01:34,912 --> 00:01:38,502
day. Every feature we add increases the size of the code and eventually

20
00:01:38,566 --> 00:01:41,786
it increases the complexity of the code. Since lots of

21
00:01:41,808 --> 00:01:45,850
team are working together on the same code, we have increased interteam dependencies

22
00:01:46,010 --> 00:01:49,886
and as a result of all of this our development to deploy cycle has

23
00:01:49,908 --> 00:01:53,534
been slowed down. Moreover, the whole team is as

24
00:01:53,572 --> 00:01:57,266
strong has the weakest link. If any team has broken anything on

25
00:01:57,288 --> 00:02:00,722
the production, all these teams are blocked. No one can deploy anything

26
00:02:00,776 --> 00:02:04,866
else until this thing is fixed by the team. So what

27
00:02:04,888 --> 00:02:08,770
is our solution? Enters micro front ends?

28
00:02:09,350 --> 00:02:12,654
What is a micro frontend? By definition, micro frontend

29
00:02:12,712 --> 00:02:16,306
architecture is a design pattern where a monolithic frontend app is destructure

30
00:02:16,338 --> 00:02:20,118
into small independent apps. These micro apps are stitched together as a

31
00:02:20,124 --> 00:02:23,706
single page on the fly. Consider your huge monolithic system. It has been

32
00:02:23,728 --> 00:02:27,834
broken into small, let's say components, and each component behaves on its

33
00:02:27,872 --> 00:02:31,626
own. So each macro frontend is a standalone system

34
00:02:31,728 --> 00:02:35,306
capable of running on its own. Each macro frontend has

35
00:02:35,328 --> 00:02:39,466
an independent repository, a separate piece of code, so that the complexity

36
00:02:39,498 --> 00:02:42,750
of its code is contained into this individual repository.

37
00:02:43,410 --> 00:02:46,834
It has independent CI pipelines, so you can have your own

38
00:02:46,872 --> 00:02:49,810
testing suits, you can have your own deployment pipelines,

39
00:02:50,710 --> 00:02:54,146
you can have your own regression pipelines whatsoever. This do

40
00:02:54,168 --> 00:02:57,794
not bother other teams. And finally which I love

41
00:02:57,832 --> 00:03:01,586
the most, they have independent deployments. Each micro frontend is deployed

42
00:03:01,618 --> 00:03:05,366
individually. One team do not have to wait for the other team or is

43
00:03:05,388 --> 00:03:08,862
not blocked by the other team. If your code is ready, it's tested.

44
00:03:08,946 --> 00:03:12,394
You can already deploy and make sure your live site has

45
00:03:12,432 --> 00:03:15,594
the live code as a whole. This whole

46
00:03:15,632 --> 00:03:19,146
microfrontend architecture enables parallel development cycle so

47
00:03:19,168 --> 00:03:22,686
that every team has their own domain and they can move with

48
00:03:22,708 --> 00:03:26,238
their own velocity. Let's have a

49
00:03:26,244 --> 00:03:29,694
look at the architecture. So consider this case. There are several micro frontend

50
00:03:29,732 --> 00:03:33,886
ends, remote one, remote two, remote three, and a host. So these micro front

51
00:03:33,908 --> 00:03:37,634
ends expose these packages in the wild and

52
00:03:37,672 --> 00:03:41,474
host consumes those packages. Host does not have to worry about how

53
00:03:41,512 --> 00:03:44,418
these were built, how these were compiled or how these were made available.

54
00:03:44,504 --> 00:03:48,280
All it needs a remote address where it can get these remotes from.

55
00:03:50,410 --> 00:03:53,606
Now let's have a look how we architected our e

56
00:03:53,628 --> 00:03:56,966
commerce website at westwing. So at Westwing we

57
00:03:56,988 --> 00:04:00,690
have this very simplistic destructure. There's a header, there's a footer,

58
00:04:00,770 --> 00:04:03,834
and there are several pages, let's say homepage, product listing page,

59
00:04:03,872 --> 00:04:07,674
product detail page, payments, page and cart page, and many more.

60
00:04:07,792 --> 00:04:11,066
So in a monolithic word, all these code were in the

61
00:04:11,088 --> 00:04:14,014
same code base. All the teams were working on the same code.

62
00:04:14,132 --> 00:04:17,534
And obviously there will be lots of friction, lot of

63
00:04:17,652 --> 00:04:21,578
to and fro, and most importantly there were lots of blockage

64
00:04:21,674 --> 00:04:24,786
because of one team. The other teams have to wait for the deploy. We have

65
00:04:24,808 --> 00:04:27,970
to sync our deploy, but with micro front ends,

66
00:04:28,950 --> 00:04:32,994
we made every page into a micro frontend, individual from

67
00:04:33,032 --> 00:04:36,642
each other and independent. And these micro front ends were

68
00:04:36,696 --> 00:04:40,134
consumed by the host. The host has

69
00:04:40,172 --> 00:04:43,426
the header and the footer, we generally call it as an app shell.

70
00:04:43,538 --> 00:04:47,394
So when a request is made to a page, let's say for the home

71
00:04:47,452 --> 00:04:51,260
page, the app shell takes the request and

72
00:04:51,630 --> 00:04:55,500
renders the header and the footer with homepage micro frontend.

73
00:04:57,550 --> 00:05:00,826
So what should appshell have apart from header and

74
00:05:00,848 --> 00:05:04,826
footer? So what we put in app shell is more of shared

75
00:05:04,858 --> 00:05:07,918
business logic, which will be kind of consistent throughout all the

76
00:05:07,924 --> 00:05:11,994
micro front ends. So one of such logic is login logic.

77
00:05:12,122 --> 00:05:15,746
So all the login mechanism we put in app shell if

78
00:05:15,848 --> 00:05:19,294
user needs to log in. So instead of micro frontend initiating the logic

79
00:05:19,342 --> 00:05:22,926
process, login process, it sends a signal

80
00:05:22,958 --> 00:05:26,478
to Appshell and app shell initiates the login process. If the user is logged

81
00:05:26,494 --> 00:05:29,894
in, Appshell returns the data of the logged in user, else it shows

82
00:05:29,932 --> 00:05:33,606
a login pop up or whatsoever is the logic. But this is

83
00:05:33,628 --> 00:05:37,026
consistent in the app shell. And micro frontends do not have to worry

84
00:05:37,058 --> 00:05:39,950
about it, they just send the signal and get the response.

85
00:05:40,130 --> 00:05:43,946
The next thing which we put here was tracking. So our

86
00:05:44,048 --> 00:05:47,834
ecommerce site have different third party tracking, which is

87
00:05:47,872 --> 00:05:51,626
common throughout the system. So instead of putting it in each micro frontend,

88
00:05:51,728 --> 00:05:55,986
we put it in Appshell, so that it's uniformly available throughout microfrontend

89
00:05:56,038 --> 00:06:00,046
ecosystem. So if any micro frontend needs to send a signal, they send

90
00:06:00,068 --> 00:06:03,374
a signal to Appshell and Appshell eventually sends it to

91
00:06:03,412 --> 00:06:06,754
the third party. This makes sure that we

92
00:06:06,792 --> 00:06:10,482
maintain the consistency of tracking, and we have a single

93
00:06:10,536 --> 00:06:14,226
place where we can monitor what tracking is being done if we want to

94
00:06:14,248 --> 00:06:18,150
log it, if we want to debug it. So it comes really handy.

95
00:06:19,210 --> 00:06:22,866
Next thing we put there was system config. So we use lots

96
00:06:22,898 --> 00:06:26,802
of config, like the environment config, these pipeline config

97
00:06:26,866 --> 00:06:30,874
and whatnot. So instead of putting it in all the micro frontend, we just

98
00:06:30,912 --> 00:06:34,362
put it in appshell. And then when any micro frontend needs

99
00:06:34,416 --> 00:06:38,378
some of it, they just request from App shell. So app shell basically

100
00:06:38,464 --> 00:06:41,626
holds the single source of truth for all the configs throughout

101
00:06:41,658 --> 00:06:45,294
the system. Whosoever Microsoft frontend want some

102
00:06:45,332 --> 00:06:49,022
configs, they just request it from Appshell and get all of it.

103
00:06:49,156 --> 00:06:52,814
And then the final thing which we put in Appshell is these

104
00:06:52,852 --> 00:06:56,286
routing. So Appshell is responsible for building all

105
00:06:56,308 --> 00:07:00,114
the pages because it has the header and the footer. So we put

106
00:07:00,152 --> 00:07:03,426
all the routing logic within the app shell. So for example, if you

107
00:07:03,448 --> 00:07:08,018
make a request for a listing page. So existing

108
00:07:08,034 --> 00:07:11,926
micro frontend is invoked by the app shell and it is

109
00:07:11,948 --> 00:07:15,926
rendered with the header and footer. And finally the complete page is served to

110
00:07:15,948 --> 00:07:19,670
the user. So these are some shared business

111
00:07:19,740 --> 00:07:22,978
logic, which we put in Appshell called,

112
00:07:23,084 --> 00:07:26,426
maybe you can call it host. So we have been

113
00:07:26,448 --> 00:07:29,974
talking about lots of data transfer between micro frontend

114
00:07:30,022 --> 00:07:33,674
and app shell. So we need to understand how the communication between

115
00:07:33,712 --> 00:07:37,086
micro frontend and Appshell has been set up. So there are

116
00:07:37,108 --> 00:07:41,162
generally two ways. So in microfrontend ecosystem,

117
00:07:41,226 --> 00:07:44,538
if we are using the same tech stack, let's say micro frontends

118
00:07:44,554 --> 00:07:47,794
are in react and Appshell is also in react. So the

119
00:07:47,832 --> 00:07:50,994
communication is a very easy process. We can just share the

120
00:07:51,032 --> 00:07:54,990
props like any react component except the props, and it behaves.

121
00:07:55,070 --> 00:07:58,246
Props can be a data or props can be a function. So if

122
00:07:58,268 --> 00:08:01,366
you want to change the property of the parent, you can

123
00:08:01,388 --> 00:08:04,694
pass some function and eventually the child

124
00:08:04,732 --> 00:08:08,806
component will change some property in the parent. Simple react flow.

125
00:08:08,918 --> 00:08:12,202
So this shared component is

126
00:08:12,336 --> 00:08:15,846
still a react component. So it will still behave how the react behaves.

127
00:08:15,878 --> 00:08:19,260
So there is nothing extra layer which we need to do.

128
00:08:20,350 --> 00:08:24,094
And the other way is if we have, let's say view

129
00:08:24,132 --> 00:08:27,566
js or react or angular, let's say basically some

130
00:08:27,588 --> 00:08:31,674
different text stack, not the same text stack throughout ecosystem,

131
00:08:31,802 --> 00:08:35,602
then we use something called as custom dome events. So what are custom

132
00:08:35,656 --> 00:08:39,774
dome events? So custom dome events are just user generated events.

133
00:08:39,822 --> 00:08:43,566
This behave exactly like any other events of the Javascript,

134
00:08:43,758 --> 00:08:47,874
but it's just we can create our own in

135
00:08:47,912 --> 00:08:51,954
our west Wing system. We also use custom events for communicating

136
00:08:52,002 --> 00:08:54,854
between one microfrontend ten to another.

137
00:08:54,972 --> 00:08:58,482
Sometimes it's easier rather than just passing down lots of props.

138
00:08:58,626 --> 00:09:01,660
So yeah, let's have a look at

139
00:09:02,110 --> 00:09:06,060
some custom Dom events. So it's super easy.

140
00:09:07,070 --> 00:09:09,674
All you have to do is let's say I have defined an event called as

141
00:09:09,712 --> 00:09:13,374
my event. You subscribe to this event like any other

142
00:09:13,412 --> 00:09:17,310
event, like adding listener maybe to the document, to the element,

143
00:09:19,170 --> 00:09:22,286
whatsoever you feel comfortable with and how to trigger this

144
00:09:22,308 --> 00:09:25,634
event, how to fire this event. So you have to create a new

145
00:09:25,672 --> 00:09:29,266
custom event with your name and you can

146
00:09:29,288 --> 00:09:32,770
pass the data, whatever is required for you. For example, I pass

147
00:09:32,840 --> 00:09:36,146
is clicked. And when this custom event is ready, all you

148
00:09:36,168 --> 00:09:39,862
need to do is dispatch this event. So this dispatch event

149
00:09:39,916 --> 00:09:43,442
will make it available for all the subscriber

150
00:09:43,586 --> 00:09:46,946
in the window. So it has nothing to do with microfrontend, app shell

151
00:09:46,978 --> 00:09:50,594
or anything. It is plain native JavaScript. So everything

152
00:09:50,652 --> 00:09:54,554
which ends in the browser is JavaScript, HTML, CSS. So it

153
00:09:54,592 --> 00:09:58,106
doesn't matter whichever microfrontend you are, whichever app shell you are, if an

154
00:09:58,128 --> 00:10:01,466
event is fired and it has a subscriber, the subscriber will get the

155
00:10:01,488 --> 00:10:05,358
event. So based on that logic, we build this whole

156
00:10:05,524 --> 00:10:08,782
messaging system using custom dome events. And that works

157
00:10:08,836 --> 00:10:12,830
pretty good out of the box solution for communication.

158
00:10:13,750 --> 00:10:17,394
Now we have seen the architecture of the microfundance. Now let's see how we

159
00:10:17,432 --> 00:10:20,786
implemented this one. So there were several ways we tried to

160
00:10:20,808 --> 00:10:23,650
implement the microfrontend architecture.

161
00:10:24,790 --> 00:10:28,038
Initially what we did is like we have small components and

162
00:10:28,044 --> 00:10:31,254
then we exported them as node modules and imported them into the

163
00:10:31,292 --> 00:10:35,926
projects. This way worked for a while, but still it

164
00:10:35,948 --> 00:10:39,366
blocked our deployment because eventually at end

165
00:10:39,388 --> 00:10:42,794
of the day, you have to deploy these node modules with the incremental version into

166
00:10:42,832 --> 00:10:46,506
the main app. So we are still at the same problem, but with

167
00:10:46,528 --> 00:10:49,942
webpack five we have module Federation. So module Federation

168
00:10:50,006 --> 00:10:53,310
allows webpack to reference some modules which are not present

169
00:10:53,380 --> 00:10:57,066
at the compile time and they can be available at the runtime.

170
00:10:57,258 --> 00:11:01,082
So let's have a look at this again. So when we compile

171
00:11:01,146 --> 00:11:04,590
host, we do not need to have remote one, remote two, remote three.

172
00:11:04,660 --> 00:11:08,066
We just pass the reference of remote one, remote two, remote three with help of

173
00:11:08,088 --> 00:11:11,586
module federation plugin and assume that these will be these when

174
00:11:11,688 --> 00:11:15,750
the application will be up and running. So this allows

175
00:11:16,090 --> 00:11:20,866
to compile the host without any external remotes.

176
00:11:20,978 --> 00:11:24,354
And remote one, remote two, remote three are compiled separately

177
00:11:24,482 --> 00:11:28,134
and ready for consumption. So on the runtime when

178
00:11:28,172 --> 00:11:31,274
the app is up, it looks for the remote one, and when it

179
00:11:31,312 --> 00:11:35,382
gets the packages it just chunk in into the host

180
00:11:35,526 --> 00:11:38,730
compiled code and behaves like any other component.

181
00:11:39,470 --> 00:11:42,160
Now let's have a look at some code.

182
00:11:42,850 --> 00:11:46,282
So consider this main JSX. It's a simple react

183
00:11:46,346 --> 00:11:49,626
app. It is just a component rendering

184
00:11:49,658 --> 00:11:53,626
h three with a title as a prop. So we need to expose

185
00:11:53,658 --> 00:11:56,580
this component into these wild. So how would we do that?

186
00:11:57,430 --> 00:12:01,182
So it's pretty simple. This is our remote config.

187
00:12:01,326 --> 00:12:04,786
This is basically webpack config. And in this webpack config the first

188
00:12:04,808 --> 00:12:07,830
thing we need to do is include module federation plugin.

189
00:12:08,330 --> 00:12:12,134
So this is native webpack plugin which comes

190
00:12:12,172 --> 00:12:15,862
with webpack five. So it has

191
00:12:15,916 --> 00:12:19,490
first entry as remote one, the name. So this is the namespace

192
00:12:19,570 --> 00:12:23,130
with which it will be known into the host.

193
00:12:23,550 --> 00:12:27,510
The second one is the file name remote entry. So remote entry is a file

194
00:12:27,590 --> 00:12:30,986
which is created with the model federation. So consider this file

195
00:12:31,018 --> 00:12:34,526
as a metadata file. It contains all

196
00:12:34,548 --> 00:12:38,366
the address, it contains all

197
00:12:38,388 --> 00:12:41,934
the address and the package, and the relation between

198
00:12:42,052 --> 00:12:45,118
these packages when which package has to be loaded.

199
00:12:45,294 --> 00:12:50,466
And then we have this exposes. So this

200
00:12:50,488 --> 00:12:54,078
is these place where we define which component we have to expose.

201
00:12:54,174 --> 00:12:57,662
For us it's src main JSx and with

202
00:12:57,736 --> 00:13:01,494
which namespace it will be exposed. So it's main.

203
00:13:01,692 --> 00:13:05,014
And the final thing which we have is shared. So what

204
00:13:05,052 --> 00:13:08,342
module federation allows is like if you are in the same ecosystem,

205
00:13:08,406 --> 00:13:11,014
let's say everywhere you are using react.

206
00:13:11,142 --> 00:13:14,922
So you should not load two copies of react into your

207
00:13:14,976 --> 00:13:18,646
app. So these shared

208
00:13:18,678 --> 00:13:22,390
key allows you to define what all libraries

209
00:13:22,470 --> 00:13:25,918
you expect to be provided from the host. So in our case we

210
00:13:25,924 --> 00:13:29,066
say react and react dome, please use it from host and do not load

211
00:13:29,098 --> 00:13:31,600
a copy of it from micro frontend.

212
00:13:32,290 --> 00:13:35,502
So with this the module is already exported.

213
00:13:35,646 --> 00:13:39,710
So now this exposed module has to be consumed

214
00:13:39,790 --> 00:13:41,780
and let's see how we will do that.

215
00:13:42,550 --> 00:13:45,546
So again this is the host config of webpack.

216
00:13:45,678 --> 00:13:50,902
So again here we have to not

217
00:13:50,956 --> 00:13:54,674
write exactly here we have to include module Federation plugin

218
00:13:54,802 --> 00:13:58,166
and give a namespace, host namespace. And then we have

219
00:13:58,188 --> 00:14:02,186
to define the remotes. So we need to define like what all

220
00:14:02,208 --> 00:14:05,434
remotes will be available. So let's say

221
00:14:05,472 --> 00:14:09,194
we define the remote one and its address these it can

222
00:14:09,232 --> 00:14:13,214
pick up the remote entry js, the entry file which will kind of explain the

223
00:14:13,252 --> 00:14:17,374
rest of the things. And these finally again, the shared so as

224
00:14:17,412 --> 00:14:20,846
I explained before, we can define some modules which can be not

225
00:14:20,868 --> 00:14:24,734
modules, libraries, basically vendor modules which can be shared from host

226
00:14:24,782 --> 00:14:27,810
to all the micro front ends.

227
00:14:28,310 --> 00:14:32,434
So with this, the connection has already been made between

228
00:14:32,632 --> 00:14:36,386
the micro frontend and the host. So this host will

229
00:14:36,408 --> 00:14:39,926
consume the micro frontend remote one which will be available at localhost 3002

230
00:14:39,948 --> 00:14:42,680
and having remote entry on that address.

231
00:14:43,450 --> 00:14:46,898
Now the connection has been made, but still we haven't used the component.

232
00:14:46,994 --> 00:14:49,690
So let's check how to use that main component.

233
00:14:51,870 --> 00:14:55,114
It's as simple as this. It's literally like this. If you look at the second

234
00:14:55,152 --> 00:14:58,426
line import remote app from remote one main.

235
00:14:58,528 --> 00:15:01,934
So remote one is the namespace of the exposed remote and

236
00:15:01,972 --> 00:15:06,026
main is the namespace of the exposed component.

237
00:15:06,218 --> 00:15:11,134
And then remote app can be used as any

238
00:15:11,172 --> 00:15:14,606
other react component throughout your app. So you can

239
00:15:14,628 --> 00:15:18,014
pass the props to it, you can render it, you can conditional render

240
00:15:18,062 --> 00:15:22,302
it, whatsoever you want to do with it and with the simple steps.

241
00:15:22,366 --> 00:15:25,790
You're already having microfundance setup running.

242
00:15:25,960 --> 00:15:29,606
So I have prepared a small demo and let's have a look at

243
00:15:29,628 --> 00:15:32,806
it. So these I have

244
00:15:32,828 --> 00:15:36,242
two projects, host and remote. In remote

245
00:15:36,386 --> 00:15:40,246
it's a simple react setup with a webpack config. In the webpack

246
00:15:40,278 --> 00:15:43,878
config we have module federation plugin with namespace

247
00:15:43,894 --> 00:15:47,206
of remote one remote entry and exposes a shared

248
00:15:47,238 --> 00:15:51,002
component which is present in its source folder. And in addition

249
00:15:51,066 --> 00:15:54,474
it expects some shared libraries like React and react

250
00:15:54,522 --> 00:15:58,910
dome from the host. Let's have a look at the shared component.

251
00:16:00,690 --> 00:16:04,482
The shared component is just h four rendering current count

252
00:16:04,616 --> 00:16:08,370
which is counter these value passed from the props.

253
00:16:09,350 --> 00:16:13,490
Let's have a look at these remote app it's a simple app, remote app,

254
00:16:13,560 --> 00:16:17,238
it has a shared component and the chunk value here

255
00:16:17,324 --> 00:16:20,806
is just one static one. Now let's have a look

256
00:16:20,828 --> 00:16:23,958
at the host in the host in

257
00:16:23,964 --> 00:16:28,006
the webpack config. Again we have model federation plugin. It's a host

258
00:16:28,038 --> 00:16:32,058
namespace and it accepts a remote remote one at the address

259
00:16:32,144 --> 00:16:36,058
localhost 3002. And it exposes some

260
00:16:36,144 --> 00:16:38,890
shared libraries like React and React dome.

261
00:16:39,230 --> 00:16:42,960
And now let's have a look at host app.

262
00:16:43,490 --> 00:16:46,874
So host app basically imports react component remote

263
00:16:46,922 --> 00:16:50,814
component from remote one namespace from

264
00:16:50,852 --> 00:16:54,386
remote one namespace, and shared component namespace which was

265
00:16:54,408 --> 00:16:57,458
exposed. And this, it simply uses it as

266
00:16:57,544 --> 00:17:00,420
a component and pass a counter to it.

267
00:17:00,790 --> 00:17:05,590
This counter is a state variable and

268
00:17:05,660 --> 00:17:08,998
on a button click, on a button click,

269
00:17:09,084 --> 00:17:12,786
it increases the counter by one. So this is basically a functional

270
00:17:12,818 --> 00:17:16,754
component and it's passing state to these remote

271
00:17:16,802 --> 00:17:21,290
component. So let's see how this works in terminal,

272
00:17:21,710 --> 00:17:24,634
sorry, in browser. So let's make it run.

273
00:17:24,752 --> 00:17:28,502
Let's run the remote first and then let's

274
00:17:28,646 --> 00:17:30,010
run the host.

275
00:17:32,050 --> 00:17:35,306
So this is on localhost 3002 and this is on localhost

276
00:17:35,338 --> 00:17:39,040
3001. Let's have a look at both.

277
00:17:43,970 --> 00:17:47,746
It's, let's have a look

278
00:17:47,768 --> 00:17:51,282
at the remote first in remote. If you can see it's a simple

279
00:17:51,336 --> 00:17:55,098
remote app with current count one. So the inner box is the shared

280
00:17:55,134 --> 00:17:58,386
component which is available in the remote app. Now let's

281
00:17:58,418 --> 00:18:03,494
check our host app at

282
00:18:03,532 --> 00:18:07,346
3001. Here again

283
00:18:07,468 --> 00:18:10,598
we have the same component, shared component, but it is being served

284
00:18:10,614 --> 00:18:14,186
from the remote. Let's quickly have a look at

285
00:18:14,208 --> 00:18:16,700
the network and just reload it.

286
00:18:22,760 --> 00:18:26,180
And if we see we have a remote entry, main JS,

287
00:18:26,840 --> 00:18:31,024
which is initiated by main js and then remote entry

288
00:18:31,072 --> 00:18:33,748
in turn invokes lots of modules here,

289
00:18:33,914 --> 00:18:38,036
like for example shared component which we need. And let's

290
00:18:38,068 --> 00:18:41,332
check the functionality of this. We increase the counter

291
00:18:41,476 --> 00:18:45,512
one by one. So the upper one, the count in host is five and current

292
00:18:45,566 --> 00:18:48,904
count in shared component is five. So basically it's seamlessly

293
00:18:48,952 --> 00:18:52,204
forwarding the state from host app

294
00:18:52,242 --> 00:18:56,172
to the shared component. And this is the magic of model

295
00:18:56,226 --> 00:18:59,512
Federation. It really seems out of the box, just same

296
00:18:59,666 --> 00:19:03,196
native react component as if it was present in the scope

297
00:19:03,228 --> 00:19:07,010
of this host project. So with this

298
00:19:07,940 --> 00:19:11,584
we have lots of power from

299
00:19:11,622 --> 00:19:15,444
module Federation to make sure our react components still work the same

300
00:19:15,482 --> 00:19:17,990
way, even if it is not included in the project.

301
00:19:20,120 --> 00:19:22,260
So let's get back to our slides.

302
00:19:26,600 --> 00:19:30,008
Okay, so we have implemented microfrontend and investing in in

303
00:19:30,014 --> 00:19:33,556
our shop, but it was not piece of cake.

304
00:19:33,668 --> 00:19:37,608
We have a bit of challenges while developing this micro frontend,

305
00:19:37,774 --> 00:19:41,004
so I want to share some of our challenges with you.

306
00:19:41,202 --> 00:19:45,036
So first one was design consistency. When we were splitting out

307
00:19:45,058 --> 00:19:48,396
micro front ends, one of the major concern of us was like how

308
00:19:48,418 --> 00:19:52,556
to keep the design consistent throughout the micro frontend. Right now we have a

309
00:19:52,578 --> 00:19:56,352
conscious like okay, we will do these, but when the team grows, when the code

310
00:19:56,406 --> 00:20:00,188
grows, how will we make sure that the design is consistent throughout all the micro

311
00:20:00,204 --> 00:20:03,990
front ends? So what we came up with was a design system.

312
00:20:04,440 --> 00:20:07,952
We have something called, we call has UI kit.

313
00:20:08,096 --> 00:20:11,796
UI Kit is basically house of all the components which are available for the

314
00:20:11,818 --> 00:20:14,950
UI, for example buttons, search bar,

315
00:20:16,840 --> 00:20:20,536
drop downs, checkbox, etc. So whatever

316
00:20:20,638 --> 00:20:24,340
UI component we have, it should be in the UI kit

317
00:20:24,420 --> 00:20:28,596
and then every micro frontend should use it from the UI kit instead of implementing

318
00:20:28,628 --> 00:20:31,950
of their own, even if they want to implement their own.

319
00:20:32,640 --> 00:20:35,864
First we implement that in UI kit and then we consume

320
00:20:35,912 --> 00:20:39,340
from there. And we have to make a small

321
00:20:39,410 --> 00:20:43,308
storybook for this one so that everyone knows

322
00:20:43,404 --> 00:20:46,864
what elements are available in the UI kit. And this actually

323
00:20:46,902 --> 00:20:50,336
helps the new developers and also the designers to

324
00:20:50,358 --> 00:20:54,290
know what we have and so that these can infer from our design system.

325
00:20:55,080 --> 00:20:58,628
The next challenge we had was initializing a new micro front end.

326
00:20:58,714 --> 00:21:02,416
With each micro front end we have lots of setup, we have GitLab pipelines,

327
00:21:02,528 --> 00:21:05,944
we have CI setup, we have Docker setup, we have

328
00:21:05,982 --> 00:21:09,176
helm charts, we have publishing to

329
00:21:09,198 --> 00:21:12,584
s three scripts, and a lot of stuff on the infra side.

330
00:21:12,702 --> 00:21:16,776
So doing this manually is pretty kind

331
00:21:16,798 --> 00:21:20,044
of extensive work and also very

332
00:21:20,082 --> 00:21:23,656
error prone. So instead of doing it manually for every micro

333
00:21:23,688 --> 00:21:26,956
frontend, what we use is a templating engine. We call it

334
00:21:26,978 --> 00:21:31,244
temporeto. So temporato is very smart templating

335
00:21:31,292 --> 00:21:34,576
engine. It maintains different templates for us,

336
00:21:34,678 --> 00:21:37,936
and with the help of these complete, it spins up

337
00:21:37,958 --> 00:21:41,088
a new micro frontend or whatever your project is

338
00:21:41,254 --> 00:21:44,804
within a minute. So if we do something like

339
00:21:44,842 --> 00:21:47,732
this, if you can see on my screen,

340
00:21:47,866 --> 00:21:51,296
so these template create it, reuse a template

341
00:21:51,328 --> 00:21:54,676
project where all the templates are present and we have

342
00:21:54,698 --> 00:21:58,048
several templates, but for this we are interested in micro

343
00:21:58,064 --> 00:22:01,770
frontend template. So when we select micro frontend template and

344
00:22:02,540 --> 00:22:05,956
go ahead, we pass some variables. These variables

345
00:22:05,988 --> 00:22:09,470
are basically kind of namespaces which can be kind of

346
00:22:09,920 --> 00:22:13,852
find and replace while creating the template. So once

347
00:22:13,906 --> 00:22:17,244
the template is created out of the box we have, as you can see,

348
00:22:17,282 --> 00:22:20,816
docker file, helm charts, CI pipelines, end to

349
00:22:20,838 --> 00:22:23,730
end test, everything set up already.

350
00:22:24,100 --> 00:22:29,056
One more advantage of using this template engine for us is we

351
00:22:29,078 --> 00:22:32,912
have lots of micro front ends and we need to make sure that

352
00:22:32,966 --> 00:22:36,484
all the micro front ends are in sync on the infra level. For example,

353
00:22:36,602 --> 00:22:39,876
if we change the, let's say s

354
00:22:39,898 --> 00:22:43,028
three script, how we publish it, we change some stuff there.

355
00:22:43,114 --> 00:22:47,944
So we need to forward it to every micro front end. So instead

356
00:22:47,982 --> 00:22:51,896
of doing it that manually, we just update the template and micro front

357
00:22:51,918 --> 00:22:56,356
ends update their part of these template and it propagates uniformly

358
00:22:56,388 --> 00:22:59,784
throughout the micro front ends. So using a template

359
00:22:59,832 --> 00:23:03,356
really kind of eased our lives as a

360
00:23:03,378 --> 00:23:07,532
developer. Apart from these, we have some more

361
00:23:07,666 --> 00:23:11,356
challenges for example, the biggest

362
00:23:11,388 --> 00:23:14,588
one was decoupling code from app shell.

363
00:23:14,764 --> 00:23:18,496
Okay, so what we did is when we decided to

364
00:23:18,518 --> 00:23:21,856
move to micro frontend, we said what we

365
00:23:21,878 --> 00:23:25,424
have this monolith, we will call this app shell. Instead of creating a new app

366
00:23:25,462 --> 00:23:28,676
shell, we will have this as an app shell. And we will be

367
00:23:28,698 --> 00:23:31,764
taking out components one by one, so that our app

368
00:23:31,802 --> 00:23:35,936
shell will be leaner. And finally we will having only header and footer

369
00:23:35,968 --> 00:23:39,156
and some business logic in app shell and rest, everything will be a micro

370
00:23:39,188 --> 00:23:42,968
frontend. So to achieve that, the first thing

371
00:23:42,974 --> 00:23:45,930
we did was moving components to the design system.

372
00:23:46,300 --> 00:23:50,092
So every UI component, we moved into the design system.

373
00:23:50,226 --> 00:23:54,268
And once we have in the design system, every reference of that

374
00:23:54,354 --> 00:23:58,040
was only from UI kit. There was no reference,

375
00:23:58,120 --> 00:24:01,596
internal reference from one place to another. In the code made be

376
00:24:01,618 --> 00:24:05,152
microfrontend, made be Appshell, uniformly. Anything which is

377
00:24:05,206 --> 00:24:08,796
related to UI has to be in UI kit and it has to be referenced

378
00:24:08,828 --> 00:24:12,436
and used from there itself. So doing this actually kind

379
00:24:12,458 --> 00:24:16,528
of half double work, because this enables us to decouple lots

380
00:24:16,544 --> 00:24:18,900
of stuff already, even in the app shell.

381
00:24:20,920 --> 00:24:24,276
Now sharing the logic between microfrontends, next thing

382
00:24:24,298 --> 00:24:27,492
which we want to tackle was some logic

383
00:24:27,636 --> 00:24:30,904
which is static, it does not require data, but for

384
00:24:30,942 --> 00:24:34,968
example price formatters. So we want our website

385
00:24:35,054 --> 00:24:38,644
to have the same price formatting throughout

386
00:24:38,692 --> 00:24:42,076
the website. Like maybe any micro frontend may be any

387
00:24:42,098 --> 00:24:45,420
page, we want it same. So instead of copying this logic into

388
00:24:45,490 --> 00:24:49,336
every micro front end, we created some small utility NPM

389
00:24:49,368 --> 00:24:52,616
packages, like price formatting helpers

390
00:24:52,728 --> 00:24:56,076
or some date formatting helpers. So these are small helpers

391
00:24:56,108 --> 00:24:59,776
which we use throughout our micro frontend system. So whenever we

392
00:24:59,798 --> 00:25:03,392
find a utility which is shared by more than two micro front ends,

393
00:25:03,456 --> 00:25:09,284
we create a small package out of it. And this

394
00:25:09,322 --> 00:25:12,496
logic is used from the packages rather than just existing it twice

395
00:25:12,528 --> 00:25:16,424
or twice. So this kind of still makes sure

396
00:25:16,462 --> 00:25:19,976
that our code is consistent and we

397
00:25:19,998 --> 00:25:23,064
are not kind of using different logic at different parts of our website,

398
00:25:23,182 --> 00:25:25,610
which is eventually a different micro frontend.

399
00:25:26,940 --> 00:25:30,276
And last but not the least, building an efficient

400
00:25:30,308 --> 00:25:33,608
developer experience. So once we have all these micro

401
00:25:33,624 --> 00:25:37,324
front ends ready, the biggest problem we had was like, let's say we have

402
00:25:37,362 --> 00:25:41,180
one app shell and three micro front ends. To develop it locally,

403
00:25:41,260 --> 00:25:45,104
we have to run all four together. So on 3001,

404
00:25:45,142 --> 00:25:48,512
two, three, four, we were running micro front ends and

405
00:25:48,646 --> 00:25:52,464
the app shell, and then we were able

406
00:25:52,502 --> 00:25:56,148
to make some change. And this was pretty cumbersome process because it

407
00:25:56,154 --> 00:25:59,332
takes lots of resources. My laptop fan was really

408
00:25:59,386 --> 00:26:02,708
like I'm doing a coin mining or something.

409
00:26:02,874 --> 00:26:06,952
But eventually we get over that. So in order to fix

410
00:26:07,006 --> 00:26:10,084
this, what we did is we followed a docker based approach.

411
00:26:10,212 --> 00:26:14,136
So we created a docker image of everything which

412
00:26:14,158 --> 00:26:18,936
is deployed on staging, and we accepted the

413
00:26:18,958 --> 00:26:23,196
macro front ends URL via environment variable in

414
00:26:23,218 --> 00:26:27,388
this docker image. So if there is no environment variable present,

415
00:26:27,554 --> 00:26:31,172
we use the staging URL, else the environment variable.

416
00:26:31,256 --> 00:26:34,288
So when we develop on the local system, we run,

417
00:26:34,374 --> 00:26:37,904
let's say on localhost, three housed and one the micro frontend,

418
00:26:38,022 --> 00:26:41,824
and pass it into the docker image with

419
00:26:41,862 --> 00:26:46,000
an environment variable. So when we run the docker image,

420
00:26:46,160 --> 00:26:49,652
everything is used from the staging environment but the micro frontend

421
00:26:49,706 --> 00:26:53,392
from the local environment. So this helped us to have a smooth

422
00:26:53,456 --> 00:26:56,872
and more productive developer experience. There are still

423
00:26:56,926 --> 00:27:01,192
things which can be improved in this, but for now it's way better than running

424
00:27:01,326 --> 00:27:05,450
four node processes. So yeah,

425
00:27:06,060 --> 00:27:09,756
this is kind of a snapshot, what we did at Westwing and

426
00:27:09,778 --> 00:27:13,640
how we were solving the problems and how we broke our huge monolith

427
00:27:13,720 --> 00:27:17,176
into small micro front ends and app shell.

428
00:27:17,368 --> 00:27:20,924
Still, we have a long way to go, but from past six

429
00:27:20,962 --> 00:27:24,332
months, the progress we have,

430
00:27:24,466 --> 00:27:28,316
I can totally say this is super worth it

431
00:27:28,498 --> 00:27:31,150
with that. Thank you everyone.

432
00:27:31,800 --> 00:27:32,850
Thanks for attending my talk.

