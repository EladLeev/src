1
00:00:27,330 --> 00:00:31,266
So hello everyone, my name is Rick Spurgeon. I'm a developer advocate

2
00:00:31,298 --> 00:00:34,774
here at Kong. I provided some links here for you to reach

3
00:00:34,812 --> 00:00:38,246
out to me if you have any questions about the topic today. Today I

4
00:00:38,268 --> 00:00:41,606
want to talk about API Ops just a little

5
00:00:41,628 --> 00:00:44,374
bit in the beginning, and then I want to do something really fun, which is

6
00:00:44,492 --> 00:00:48,466
use some API to build a new API

7
00:00:48,578 --> 00:00:52,254
and an API Ops work flow and showcase how

8
00:00:52,292 --> 00:00:56,110
API Ops helps you deliver APIs to production.

9
00:00:56,450 --> 00:01:00,160
So let's get started by just talking about API Ops first.

10
00:01:01,490 --> 00:01:05,054
API first is a methodology for defining API

11
00:01:05,102 --> 00:01:08,610
specifications as the source of truth for APIs.

12
00:01:09,110 --> 00:01:12,942
What that means is a textual

13
00:01:13,006 --> 00:01:17,250
representation or specification of an API defines the behaviors

14
00:01:17,330 --> 00:01:21,074
and it can be used to generate documentation code libraries for clients

15
00:01:21,122 --> 00:01:25,750
and servers and really

16
00:01:25,820 --> 00:01:29,254
provides a great documentation source of truth

17
00:01:29,302 --> 00:01:33,434
for your API at runtime. API gateways provide

18
00:01:33,552 --> 00:01:36,566
a key abstraction for APIs behaviors.

19
00:01:36,678 --> 00:01:40,234
So things like security, traffic control, things like that

20
00:01:40,352 --> 00:01:43,774
are critical from an API gateway. It prevents us from having to

21
00:01:43,812 --> 00:01:47,198
write that functionality into API service code on

22
00:01:47,204 --> 00:01:51,546
the back end. So how do we bridge these two topics?

23
00:01:51,738 --> 00:01:55,246
With Kong, we can use a declarative tool called Dec to

24
00:01:55,268 --> 00:01:58,546
bridge these technologies. The way you would do that is you might have

25
00:01:58,568 --> 00:02:01,858
your API specification typically for rest APIs in

26
00:02:01,864 --> 00:02:05,342
the form of an open API specification. You can use Dec

27
00:02:05,416 --> 00:02:09,154
to generate from that specification an API gateway

28
00:02:09,202 --> 00:02:11,750
or Kong gateway declarative configuration.

29
00:02:12,170 --> 00:02:15,446
That configuration then can be synchronized or amplified to

30
00:02:15,468 --> 00:02:19,662
a Kong gateway to enact those behaviors onto a gateway.

31
00:02:19,826 --> 00:02:21,900
So this is all nice and simple,

32
00:02:22,670 --> 00:02:26,026
but as teams have grown to adopt microservices and

33
00:02:26,048 --> 00:02:29,226
domain driven design, API Ops has needed to grow with it.

34
00:02:29,248 --> 00:02:32,922
It's gotten more complicated. So practical API Ops

35
00:02:32,986 --> 00:02:36,922
requires more complex behaviors to enable what we like to call federated

36
00:02:36,986 --> 00:02:40,906
API ops. You want to empower development

37
00:02:40,938 --> 00:02:44,766
teams to be able to build and deliver their APIs,

38
00:02:44,958 --> 00:02:49,074
and you want to give them the ability to

39
00:02:49,192 --> 00:02:52,766
self service to control their own destiny and their API

40
00:02:52,798 --> 00:02:56,274
delivery, while at the same time as like a platform team

41
00:02:56,312 --> 00:02:59,510
might need to still enable governance capabilities.

42
00:03:00,250 --> 00:03:03,814
And we want to do these two things together. So federated means

43
00:03:04,012 --> 00:03:07,286
enabling these teams to do as much of this as they can on

44
00:03:07,308 --> 00:03:11,434
their own, while enabling a centralized team

45
00:03:11,472 --> 00:03:15,530
to maintain this centralized control and potentially own

46
00:03:15,600 --> 00:03:18,438
and deliver the API to the actual infrastructure.

47
00:03:18,614 --> 00:03:21,982
So we can do this also with Kong. Using our Kong declarative tool

48
00:03:22,036 --> 00:03:26,042
deck deck provides beyond the generation capabilities,

49
00:03:26,106 --> 00:03:27,710
things like transformations,

50
00:03:28,050 --> 00:03:31,354
merging, verification or linting,

51
00:03:31,482 --> 00:03:35,090
and then of course the ability to deliver it to the production or

52
00:03:35,160 --> 00:03:38,770
running runtime Kong gateway. And we can build these

53
00:03:38,840 --> 00:03:42,418
capabilities into pipelines or workflows that

54
00:03:42,504 --> 00:03:46,254
match what you typically see in CI CD systems. So for instance,

55
00:03:46,302 --> 00:03:49,654
GitHub actions allows you to declare workflows. You can imagine these

56
00:03:49,692 --> 00:03:53,014
pipelines here match those really well. The teams could have different

57
00:03:53,052 --> 00:03:56,162
repositories and the code and the declarative configurations

58
00:03:56,226 --> 00:03:59,578
could be sourced and copied across them. And as we're

59
00:03:59,584 --> 00:04:03,494
going to see here today, we can use common development workflows

60
00:04:03,542 --> 00:04:07,222
like PRS reviews and automated

61
00:04:07,286 --> 00:04:11,146
systems to deliver these things using very well

62
00:04:11,168 --> 00:04:15,146
known Gitop style approaches. Right, so I

63
00:04:15,168 --> 00:04:17,646
want to get started because I have a long demo here. I want to try

64
00:04:17,668 --> 00:04:20,160
to get to it. So let's get started with a coding demo.

65
00:04:20,930 --> 00:04:23,950
The fun thing we're going to do today is we're going to use API to

66
00:04:24,020 --> 00:04:27,346
help us deliver some of this. And we're just going to start from the very

67
00:04:27,368 --> 00:04:31,166
beginning. I have a totally empty repository coding folder

68
00:04:31,198 --> 00:04:34,866
here, and what I've done is I've found a

69
00:04:34,888 --> 00:04:38,366
really fun tool called chatbased. And Chatblade

70
00:04:38,398 --> 00:04:41,958
allows you to interact with the chat GBT API directly on

71
00:04:41,964 --> 00:04:45,382
the command line here. I've aliased that to the term house,

72
00:04:45,516 --> 00:04:49,046
the command house, so that I can just make this fun, interactive and quick to

73
00:04:49,068 --> 00:04:53,078
type. You can see that I've just aliased that and used my credentials

74
00:04:53,174 --> 00:04:56,860
to run it. So what we can do is

75
00:04:57,230 --> 00:05:01,334
catalyte command allows us to interact with it directly using something

76
00:05:01,472 --> 00:05:05,498
akin to the web browser you might use with chat Gbt.

77
00:05:05,594 --> 00:05:08,766
So we could say something like ask know

78
00:05:08,788 --> 00:05:12,622
what is an API gateway? And we stream back a response from

79
00:05:12,676 --> 00:05:16,066
chat GbT just like you would on a web browser. But what I

80
00:05:16,088 --> 00:05:20,142
really love about Chatblade is it can interact using common Linux principles,

81
00:05:20,206 --> 00:05:23,714
using standard in, standard out. So we can say pipe a question

82
00:05:23,752 --> 00:05:27,246
to it. So briefly describe API ops. And I'm passing that directly

83
00:05:27,278 --> 00:05:31,186
into the chatblade command and it will again stream back a response

84
00:05:31,218 --> 00:05:35,158
for us. We're going to use this to build code. How can we do that?

85
00:05:35,324 --> 00:05:38,646
So the way I've started to use this is I ask it a

86
00:05:38,668 --> 00:05:42,266
very specific question. Write me a bash script that initializes this folder to do

87
00:05:42,368 --> 00:05:46,010
a node js project. You'll see that I pass that

88
00:05:46,080 --> 00:05:50,006
through the chatbased command and then again through the t command that allows

89
00:05:50,038 --> 00:05:53,790
me to pipe it out to a file, but also vet what we get back

90
00:05:53,940 --> 00:05:57,566
from chat GbT. You of course wouldn't want to run anything that you

91
00:05:57,588 --> 00:06:00,494
haven't first vetted from the API system.

92
00:06:00,692 --> 00:06:04,046
So here it's going to build a script for us

93
00:06:04,068 --> 00:06:08,126
to run. You can see here it's a bash script. It'll initialize

94
00:06:08,158 --> 00:06:11,742
a git repository, it's setting up a package JSON file,

95
00:06:11,886 --> 00:06:15,246
and it's setting up a git ignore installing dependencies, et cetera,

96
00:06:15,278 --> 00:06:18,566
et cetera. So I've added that quickly. I've ran it a few

97
00:06:18,588 --> 00:06:21,094
times. We can go ahead and do this and it will run this for us.

98
00:06:21,132 --> 00:06:24,982
We now have a functioning node js repository here

99
00:06:25,036 --> 00:06:28,678
locally. Just by asking chat GbT a question

100
00:06:28,844 --> 00:06:32,582
API first, as I said at the beginning, is really important. We want to specify

101
00:06:32,646 --> 00:06:36,234
APIs using a specification. So I'm going to ask

102
00:06:36,272 --> 00:06:40,102
chat Gbt to write us an open API spec file. I want to call attention

103
00:06:40,166 --> 00:06:44,000
to this little dash l flag that I'm passing to the chatbased command here.

104
00:06:44,370 --> 00:06:47,902
That means use the last session for

105
00:06:47,956 --> 00:06:51,646
chat GbT. It basically says to chat GbT. Continue the

106
00:06:51,668 --> 00:06:55,930
conversation. This will allow me to ask questions in sequence and continue

107
00:06:56,020 --> 00:06:59,358
on a conversation with the AI technology as I go. I don't

108
00:06:59,374 --> 00:07:02,574
have to rephrase or reprompt every time with Dash

109
00:07:02,622 --> 00:07:06,526
l, it's just using the previous context for the conversation. So here I'm

110
00:07:06,558 --> 00:07:09,986
asking it to write an open API spec for a very simple API,

111
00:07:10,098 --> 00:07:13,414
just like a hello world API, and we're going to tee that off

112
00:07:13,452 --> 00:07:16,674
and look at it and also to an open API spec yaml

113
00:07:16,722 --> 00:07:19,000
file so you can see what that looks like there.

114
00:07:20,750 --> 00:07:24,042
Great, now I want to implement it. So how would I implement it?

115
00:07:24,176 --> 00:07:27,766
Chat GBT please write us a Javascript web service that implements the previous

116
00:07:27,798 --> 00:07:31,834
open API spec. Going back to that context

117
00:07:31,882 --> 00:07:35,486
of the conversation. Chat GBT can just read back the

118
00:07:35,508 --> 00:07:39,358
open API spec that had previously generated and create

119
00:07:39,444 --> 00:07:42,590
a very simple node JS application for us here.

120
00:07:42,740 --> 00:07:46,094
So that's now in the server JS file. We have an open

121
00:07:46,132 --> 00:07:48,260
API spec file there too as well.

122
00:07:48,950 --> 00:07:52,366
How would we run that? Well, everyone loves docker. We use docker,

123
00:07:52,398 --> 00:07:55,750
so let's go ahead and do that. Build a docker file for the Javascript service.

124
00:07:55,900 --> 00:07:59,000
Again, the context allows us to ask very simple questions.

125
00:08:00,490 --> 00:08:03,814
Great, it's created a docker file for us

126
00:08:04,012 --> 00:08:06,882
and we can then ask Chachi BT.

127
00:08:06,946 --> 00:08:10,502
Let's go ahead and create a script that will build the image and run

128
00:08:10,556 --> 00:08:13,846
it. I'm also going to ask Chachibt to run the docker

129
00:08:13,958 --> 00:08:17,290
container on a specific network that will allow us to bridge it

130
00:08:17,360 --> 00:08:19,938
later to the API gateway that we're going to deploy.

131
00:08:20,134 --> 00:08:23,550
So here we've asked it to create us a little script.

132
00:08:23,970 --> 00:08:28,046
It will build the container, create a network and

133
00:08:28,068 --> 00:08:31,822
then run. I think that that

134
00:08:31,876 --> 00:08:35,646
might be a little bit of a problem if the container already exists. So let's

135
00:08:35,678 --> 00:08:38,306
go ahead and do that.

136
00:08:38,488 --> 00:08:41,986
So let's go ahead and run it and see if that

137
00:08:42,008 --> 00:08:45,366
works for us. So we

138
00:08:45,388 --> 00:08:48,440
have a hello world service running.

139
00:08:49,050 --> 00:08:52,390
Can we ask it a question? Yeah, hello world. So our service

140
00:08:52,460 --> 00:08:56,006
is running here on Docker and we're up and

141
00:08:56,028 --> 00:08:59,558
going. So now we want to put an API gateway in

142
00:08:59,564 --> 00:09:02,906
front of it and start to build out API ops. So how will we do

143
00:09:02,928 --> 00:09:06,380
that? Today I'm going to show you Kong connect.

144
00:09:06,830 --> 00:09:10,102
Kong connect is Kong's SaaS product that proven,

145
00:09:10,166 --> 00:09:13,614
among many things, a host of control plane. The host of control

146
00:09:13,652 --> 00:09:17,386
plane allows us to treat API gateways

147
00:09:17,498 --> 00:09:21,102
as a single unit for scale, obviously up and down.

148
00:09:21,236 --> 00:09:24,794
And what we can do is we can configure this hosted

149
00:09:24,842 --> 00:09:28,306
control plane and it will manage the runtime data planes or the

150
00:09:28,328 --> 00:09:32,018
actual API gateways for us. Connect provides tools of

151
00:09:32,024 --> 00:09:35,006
other features that I'm not going to go into today, analytics,

152
00:09:35,198 --> 00:09:38,742
dev portals, et cetera. To get started, I want to use

153
00:09:38,796 --> 00:09:42,070
APIs because I'm a believer in APIs and automation.

154
00:09:42,650 --> 00:09:46,054
I'm going to create a personal access token here that will allow me to work

155
00:09:46,092 --> 00:09:50,002
with connect programmatically. So I'm going to go into here

156
00:09:50,076 --> 00:09:54,166
and I'm going to go ahead and save that token that I just created

157
00:09:54,278 --> 00:09:58,700
that allows me to use it directly on the command line. And I can

158
00:09:59,230 --> 00:10:03,382
do some things like use the connect API

159
00:10:03,446 --> 00:10:07,258
to create one of these control planes called a runtime group. Currently I'm

160
00:10:07,274 --> 00:10:11,310
going to give it a name called hello World. I'm passing in my credential and

161
00:10:11,380 --> 00:10:15,134
we're creating a runtime group on the fly here using an API.

162
00:10:15,262 --> 00:10:18,878
So we have a hello world runtime

163
00:10:19,054 --> 00:10:22,354
group. Now this is our control plane and

164
00:10:22,392 --> 00:10:26,270
what we want to do is we want to deploy a Kong gateway

165
00:10:26,430 --> 00:10:30,022
into this hosted control plane, connect them together.

166
00:10:30,156 --> 00:10:33,622
The easiest way to do that in a development environment is just to run one

167
00:10:33,676 --> 00:10:36,722
locally on your machine. Since I have Docker,

168
00:10:36,786 --> 00:10:40,594
I'm already doing that. I'm just going to do that here. So what I'm Kong

169
00:10:40,652 --> 00:10:43,766
here is connect gives me these nice little helper

170
00:10:43,798 --> 00:10:47,066
functions to deploy a con gateway. And all of the

171
00:10:47,088 --> 00:10:50,846
secrets and all of the things you see above are used to connect

172
00:10:50,948 --> 00:10:54,218
the running local API gateway back up to the hosted

173
00:10:54,234 --> 00:10:57,440
control plane. Before I run this though,

174
00:11:02,130 --> 00:11:04,526
I need to make sure that I run the gateway on the same network as

175
00:11:04,548 --> 00:11:08,306
our running service. That way they can communicate. We're using the API gateway to

176
00:11:08,328 --> 00:11:12,146
proxy traffic to our service. So that connection needs

177
00:11:12,168 --> 00:11:16,334
to be valid. So what we have now are two containers

178
00:11:16,382 --> 00:11:19,414
running a Kong gateway and a hello world service.

179
00:11:19,612 --> 00:11:23,586
Okay, so what we're going to do now is let's

180
00:11:23,618 --> 00:11:27,142
go ahead and build out the API ops workflows. So how can we do that?

181
00:11:27,276 --> 00:11:30,506
Well, we're going to use GitHub actions, if you're familiar with

182
00:11:30,528 --> 00:11:34,890
it. This is a command I've set up to create some necessary

183
00:11:36,030 --> 00:11:39,674
folders and things that we're going to work out of in order

184
00:11:39,712 --> 00:11:43,126
to enable API ops and automated workflows. Creating a GitHub

185
00:11:43,158 --> 00:11:47,070
workflows folder, that's the well known place that GitHub uses for its GitHub actions.

186
00:11:47,490 --> 00:11:50,458
We're going to create a folder called Connect, and inside of this connect folder we're

187
00:11:50,474 --> 00:11:54,290
going to store the actionable connect

188
00:11:54,440 --> 00:11:57,874
Kong declarative configuration files and that's what's going to drive our

189
00:11:57,912 --> 00:12:01,074
automation. I'm using here the GitHub CLi to

190
00:12:01,112 --> 00:12:04,994
create a repository, make it public,

191
00:12:05,192 --> 00:12:08,838
and that will actually reach out to GitHub and create

192
00:12:08,924 --> 00:12:13,606
that new repository. So if I

193
00:12:13,628 --> 00:12:16,934
go up to here, you can see we have this new repository called my

194
00:12:16,972 --> 00:12:20,538
API. There's a couple of manual steps I've got to do here quickly.

195
00:12:20,624 --> 00:12:22,540
To make this work,

196
00:12:23,470 --> 00:12:27,254
GitHub actions needs special permissions because what we're going to use GitHub actions

197
00:12:27,302 --> 00:12:31,270
for is to create pr based workflows. When files are modified

198
00:12:31,350 --> 00:12:35,354
in the repository, we're going to create prs that will then automation

199
00:12:35,402 --> 00:12:39,358
the driving of changes to the connect system.

200
00:12:39,524 --> 00:12:43,006
And so we have to give it the proper permissions. We also need

201
00:12:43,028 --> 00:12:46,350
to give it a secret, which is that same secret

202
00:12:46,430 --> 00:12:49,730
that we created at the beginning.

203
00:12:50,070 --> 00:12:53,890
Connect supports service accounts and all sorts of RBAC and other security.

204
00:12:53,960 --> 00:12:56,850
But for the purpose of a demo, we're just going to do this here.

205
00:12:57,000 --> 00:13:01,298
So I'm going to copy in that same personal access token

206
00:13:01,394 --> 00:13:05,126
and I'm going to use it for this well known variable and this will

207
00:13:05,148 --> 00:13:09,082
be fed into the actions, into the CI CD system as it does things.

208
00:13:09,216 --> 00:13:13,514
So here we go. We actually now should have the

209
00:13:13,552 --> 00:13:15,610
necessary security settings.

210
00:13:16,510 --> 00:13:20,106
And before I go on, what I

211
00:13:20,128 --> 00:13:23,774
want to do now is you can ask the

212
00:13:23,812 --> 00:13:27,114
API systems for help in building these GitHub action

213
00:13:27,162 --> 00:13:30,426
workflows. In my experience they're not well trained

214
00:13:30,458 --> 00:13:34,366
on these tools and it's also quite difficult to express the

215
00:13:34,388 --> 00:13:38,066
question clearly enough to have it generate these for you. In the interest of

216
00:13:38,088 --> 00:13:41,714
time, I've bootstrapped this for us so I'm just going to manually copy in

217
00:13:41,752 --> 00:13:45,714
some files. There's three GitHub action workflow files that I'm going to show

218
00:13:45,752 --> 00:13:48,130
you. But what I'm going to do is I'm going to show you that within

219
00:13:48,200 --> 00:13:52,360
GitHub I want to go ahead and just commit these in because we can

220
00:13:53,050 --> 00:13:56,694
just get the whole thing started just by doing this. So once the workflows are

221
00:13:56,732 --> 00:14:00,466
in the repository, they will start to be evaluated by the GitHub action

222
00:14:00,498 --> 00:14:04,086
CI CD system. So I'm adding the files, I'm doing a commit

223
00:14:04,118 --> 00:14:06,774
and I'm just going to go ahead and push them up to our repository.

224
00:14:06,902 --> 00:14:10,586
We'll go through the files in a second. As you now come

225
00:14:10,608 --> 00:14:13,950
over to GitHub, you can see all of our files are up here and

226
00:14:14,020 --> 00:14:17,440
if we go into actions we have running

227
00:14:18,130 --> 00:14:21,534
workflows. So we're going to go through these one at a time.

228
00:14:21,652 --> 00:14:25,106
The first one I created was called convert oas to Kong and it lives in

229
00:14:25,128 --> 00:14:29,234
this file right here. What this does is it says anytime a

230
00:14:29,272 --> 00:14:33,230
push happens to the main branch for this particular file,

231
00:14:33,310 --> 00:14:37,380
and you'll recall back we asked chat GBT to create this file for us.

232
00:14:37,750 --> 00:14:41,666
We're going to run this set of jobs, and this set of jobs includes checking

233
00:14:41,698 --> 00:14:44,982
out the repository, setting up the deck tool.

234
00:14:45,036 --> 00:14:48,866
So this is a little job that is provided, Kong provides,

235
00:14:48,898 --> 00:14:52,566
that allows us to install deck into the CI CD workflow

236
00:14:52,598 --> 00:14:56,314
here. And here's the key part. We're going to

237
00:14:56,352 --> 00:15:00,338
use our Dec API Ops style commands

238
00:15:00,454 --> 00:15:04,240
to convert that open API spec file into

239
00:15:04,610 --> 00:15:08,462
a stage declarative configuration. So here we're saying convert this

240
00:15:08,516 --> 00:15:11,530
file to output to this file.

241
00:15:11,690 --> 00:15:15,266
And I simulated one of these kind

242
00:15:15,288 --> 00:15:18,514
of multi stage apiops workflows by

243
00:15:18,552 --> 00:15:22,046
adding a second step, which is another API

244
00:15:22,078 --> 00:15:25,474
ops command we provide called add plugins. This allows us to

245
00:15:25,512 --> 00:15:29,106
layer on a plugin using a JSON path selector.

246
00:15:29,138 --> 00:15:33,698
So here I've said for all the services in the input

247
00:15:33,874 --> 00:15:37,554
declarative configuration, add a rate limiting

248
00:15:37,602 --> 00:15:41,130
plugin with this five second configuration.

249
00:15:41,790 --> 00:15:45,194
And here we're going to output it out back to the same

250
00:15:45,232 --> 00:15:48,938
file. So we are using the same file as kind of a working

251
00:15:49,104 --> 00:15:52,006
place to build up a configuration.

252
00:15:52,198 --> 00:15:55,790
And as I mentioned before, we're going to stage this into a pr

253
00:15:55,860 --> 00:15:59,182
so that it can be merged and it can be

254
00:15:59,236 --> 00:16:02,746
reviewed and then merged prior to further being acted

255
00:16:02,778 --> 00:16:05,858
upon. So that's workflow number one.

256
00:16:06,024 --> 00:16:09,918
If we go look at this now, we see that that action completed

257
00:16:10,094 --> 00:16:14,450
and we have a new pull request. And that pull request contains

258
00:16:14,870 --> 00:16:18,930
a new file Kong staged contains,

259
00:16:19,010 --> 00:16:22,274
and this is a Kong declarative configuration file.

260
00:16:22,402 --> 00:16:26,006
It has a service, that service is configured on a

261
00:16:26,028 --> 00:16:29,682
particular port, it's configured on a particular host.

262
00:16:29,826 --> 00:16:33,382
This matches what's in the docker container. From our earlier

263
00:16:33,446 --> 00:16:36,746
request to chat GBT, we said build a docker container that can do

264
00:16:36,768 --> 00:16:40,140
this, build a docker image that can do this and run it like so.

265
00:16:40,510 --> 00:16:44,414
So this matches, it matched what we told

266
00:16:44,452 --> 00:16:48,346
Docker and it matched what we told chat GBT to do. In the open API

267
00:16:48,378 --> 00:16:51,994
spec generation, we have a route that matches on Slash

268
00:16:52,042 --> 00:16:55,854
hello. And we have a plugin on our service for rate limiting

269
00:16:55,902 --> 00:17:00,030
with a five second. So this is a combination of the convert and transform

270
00:17:00,110 --> 00:17:03,602
stage that I showed in the diagram earlier, and it's staged into

271
00:17:03,656 --> 00:17:06,978
a file that we can review.

272
00:17:07,144 --> 00:17:10,406
Let's pretend that everyone reviews it, everyone gives it the looks good

273
00:17:10,428 --> 00:17:14,070
to me. We can merge this down and what we now

274
00:17:14,140 --> 00:17:18,194
end up with is the execution of a second workflow.

275
00:17:18,242 --> 00:17:21,466
So let's look at that second workflows. What we're doing now is

276
00:17:21,488 --> 00:17:24,790
we're saying stage the Kong changes to synchronize.

277
00:17:24,870 --> 00:17:27,690
This is kind of like another step before production.

278
00:17:28,510 --> 00:17:33,242
Basically what we're doing is we're going to use Dec to determine

279
00:17:33,306 --> 00:17:36,394
what changes will occur in the production API

280
00:17:36,442 --> 00:17:40,346
gateway prior to actually pushing them up. You could skip this stage,

281
00:17:40,378 --> 00:17:43,726
but this allows us to do one more step of verification in

282
00:17:43,748 --> 00:17:47,266
case there's drift in, let's say the production system. Let's look

283
00:17:47,288 --> 00:17:50,526
at that file real quick. Here's the workflow

284
00:17:50,558 --> 00:17:54,114
file. This says on pushes to main to that

285
00:17:54,152 --> 00:17:58,082
stage file that we just created in the previous step. Do some very similar

286
00:17:58,136 --> 00:18:01,398
things. Set up deck, check out the repository. What we're going

287
00:18:01,404 --> 00:18:04,934
to do is copy the staged file to another file and

288
00:18:04,972 --> 00:18:08,514
make this act as if this is the production file. So here's

289
00:18:08,562 --> 00:18:11,818
kind of the working file and here's where we want to operate off of.

290
00:18:11,904 --> 00:18:14,522
There are other ways to do this, of course, but this is a very easy

291
00:18:14,576 --> 00:18:18,390
way to do so. We're going to use a deck tool command

292
00:18:18,470 --> 00:18:22,560
called Diff. This will connect up to our

293
00:18:23,170 --> 00:18:26,942
configured control plane, in this case the hello

294
00:18:26,996 --> 00:18:30,522
World runtime group that we created earlier with our configured

295
00:18:30,586 --> 00:18:35,934
secrets. And it will calculate a difference. This is calculating

296
00:18:35,982 --> 00:18:39,934
any drift that may have occurred. So what is on the production system versus

297
00:18:39,982 --> 00:18:43,794
what's in this state file that we've just passed into it.

298
00:18:43,992 --> 00:18:47,654
We're going to use that diff to then create a

299
00:18:47,692 --> 00:18:51,030
PR. That PR can be further reviewed and

300
00:18:51,100 --> 00:18:54,920
approved or rejected so it's like a final step before

301
00:18:55,290 --> 00:18:58,966
pushing into production. So if

302
00:18:58,988 --> 00:19:02,518
we go look at the PR that it created, this is a deck

303
00:19:02,534 --> 00:19:05,900
diff output pushed into the description of the PR.

304
00:19:06,590 --> 00:19:10,140
We can look at what files have changed. And this is

305
00:19:10,670 --> 00:19:13,970
the same deck file that we mentioned earlier.

306
00:19:13,990 --> 00:19:17,806
It's a copy of the same file as you would go forward with

307
00:19:17,828 --> 00:19:21,562
this, the whole file wouldn't change. It's just because we have a net new environment

308
00:19:21,626 --> 00:19:25,666
here. It's basically saying nothing, an entirely new file has

309
00:19:25,688 --> 00:19:29,586
been given. So we

310
00:19:29,608 --> 00:19:33,010
can pretend that the platform team has looked at this

311
00:19:33,160 --> 00:19:36,914
and they all approve, and they can

312
00:19:36,952 --> 00:19:40,534
approve the PR and merge it down. And then finally one more

313
00:19:40,572 --> 00:19:44,614
step occurs, and that's called deploy changes to

314
00:19:44,652 --> 00:19:47,874
Kong. And so what it does is it looks at that other file,

315
00:19:47,922 --> 00:19:51,734
this is the quote unquote production file. Anytime a push

316
00:19:51,782 --> 00:19:55,130
to this file on the main branch runs, do the exact

317
00:19:55,200 --> 00:19:59,034
same thing, check out the repository, set up the deck tool.

318
00:19:59,152 --> 00:20:02,658
But this time we're actually going to run the sync command. The sync command

319
00:20:02,694 --> 00:20:06,110
is the thing that actually enables the changes, right?

320
00:20:06,180 --> 00:20:09,722
So if we go look back at that action,

321
00:20:09,866 --> 00:20:13,150
it succeeded. So we can go in here and look at the log

322
00:20:13,300 --> 00:20:17,490
and we can see that the deck sync command returned a positive

323
00:20:18,070 --> 00:20:21,762
return code. We know it succeeded, which means that those changes

324
00:20:21,896 --> 00:20:25,540
got pushed. So if we go up to connect,

325
00:20:25,910 --> 00:20:29,942
what are we going to see? Well, we have the hello world control

326
00:20:29,996 --> 00:20:33,510
plane that we created and some things have changed.

327
00:20:33,930 --> 00:20:37,414
We now can go into the objects that are configured within

328
00:20:37,532 --> 00:20:40,666
the runtime group or the control plane. And here

329
00:20:40,688 --> 00:20:44,522
we see we have a new service, hello World API. It points

330
00:20:44,576 --> 00:20:47,818
to the host hello world on port 3000.

331
00:20:47,984 --> 00:20:51,820
It's enabled. We have a route that

332
00:20:52,830 --> 00:20:56,320
looks for requests on hello.

333
00:20:57,170 --> 00:21:01,054
And we have a rate limiting plugin which

334
00:21:01,092 --> 00:21:04,882
is configured to the service and is configured for a five

335
00:21:04,936 --> 00:21:08,606
second window. So you can see we never touched

336
00:21:08,638 --> 00:21:12,094
any of these screens. We enabled the deployment

337
00:21:12,142 --> 00:21:16,114
of this configuration using just a pure API Ops workflow

338
00:21:16,242 --> 00:21:19,426
akin to a Gitops workflow, but it is a Gitops workflow.

339
00:21:19,618 --> 00:21:23,714
And so this control plane now should have pushed

340
00:21:23,762 --> 00:21:28,114
down that configuration to our API

341
00:21:28,162 --> 00:21:31,450
gateway. So if we go back to the terminal,

342
00:21:31,790 --> 00:21:35,158
we can ask the service directly because we're

343
00:21:35,174 --> 00:21:38,054
on the machine, hello and get a response.

344
00:21:38,182 --> 00:21:41,918
But we can also proxy through the API gateway and get a

345
00:21:41,924 --> 00:21:46,046
response that has been pushed through the

346
00:21:46,068 --> 00:21:50,970
API gateway and includes rate limiting plugin capabilities,

347
00:21:51,050 --> 00:21:54,738
right? So this is where the API gateway provides that value of

348
00:21:54,824 --> 00:21:58,546
the abstraction layer in front of the service. Right. What else

349
00:21:58,648 --> 00:22:02,354
can connect do for us? We'll just click

350
00:22:02,392 --> 00:22:04,740
through a couple of these briefly. But for example,

351
00:22:05,290 --> 00:22:09,094
it can give us traffic so we can do

352
00:22:09,132 --> 00:22:12,614
things like run this and generate some

353
00:22:12,652 --> 00:22:16,322
fake traffic. And we can see analytics

354
00:22:16,386 --> 00:22:20,570
collecting data on

355
00:22:20,640 --> 00:22:25,046
our APIs, and we can look at individual requests.

356
00:22:25,238 --> 00:22:28,982
And this is a single pane of glass across your API.

357
00:22:29,046 --> 00:22:32,750
So you can imagine your domain driven design teams all

358
00:22:32,820 --> 00:22:36,618
aggregated under this control plane,

359
00:22:36,714 --> 00:22:40,510
and you could see them all together and get reporting,

360
00:22:41,490 --> 00:22:45,326
debug issues, this kind of thing. There's also dev portals

361
00:22:45,358 --> 00:22:49,140
and API products, I'm going to skip those today, but this is connect.

362
00:22:51,110 --> 00:22:54,882
What else can I tell you about this? So if you'd like

363
00:22:54,936 --> 00:22:58,002
to reach out to us about this API ops,

364
00:22:58,066 --> 00:23:02,146
I want to show you this GitHub repository here go ApIops

365
00:23:02,178 --> 00:23:05,666
under the Kong organization. This is where we're building out our API

366
00:23:05,698 --> 00:23:09,126
ops capabilities for Dec. The library go based in

367
00:23:09,148 --> 00:23:12,326
here that you can reach out to us on file

368
00:23:12,358 --> 00:23:14,010
an issue or open a discussion.

369
00:23:15,230 --> 00:23:18,506
That way, if you want to contribute or help us build out these

370
00:23:18,528 --> 00:23:20,300
capabilities, we would love that.

371
00:23:22,290 --> 00:23:26,094
Kong Connect provides a suite of APIs and

372
00:23:26,132 --> 00:23:30,590
all of that is available to you on developer comhq.com.

373
00:23:30,740 --> 00:23:34,462
I use the connect runtime API to automation,

374
00:23:34,526 --> 00:23:38,222
the building of that runtime group earlier.

375
00:23:38,366 --> 00:23:42,082
So there's a catalog here of various things you can do, including building

376
00:23:42,136 --> 00:23:45,366
out dev portals identity management on the connect.

377
00:23:45,468 --> 00:23:49,442
So I mentioned service counts, things like that, all API driven,

378
00:23:49,586 --> 00:23:53,846
as well as the runtime groups itself. So I

379
00:23:53,868 --> 00:23:57,654
wanted to share a reference of the tools that I

380
00:23:57,692 --> 00:24:01,522
used here today. Obviously the deck tool Kong

381
00:24:01,586 --> 00:24:04,806
Connect chat GBT. I was just using an account that

382
00:24:04,828 --> 00:24:08,406
I have, and the chatbased account is configured to talk to that. And of

383
00:24:08,428 --> 00:24:11,550
course GitHub GitHub actions in the GitHub Cli.

384
00:24:12,290 --> 00:24:15,086
And again, I would like to go back to the front, and if you'd like

385
00:24:15,108 --> 00:24:18,782
to reach out to me, discuss this or any of the other topics about

386
00:24:18,836 --> 00:24:22,334
Kong or APIs API gateways, please feel free

387
00:24:22,372 --> 00:24:25,020
to reach out. Thanks for listening today.

