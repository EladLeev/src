1
00:00:25,410 --> 00:00:25,960
You.

2
00:00:29,610 --> 00:00:33,094
Hello Comp 42 and welcome to my talk.

3
00:00:33,212 --> 00:00:37,666
Build your next app with web components. My name is Andrew Desmarais.

4
00:00:37,778 --> 00:00:41,510
You can find me on all the social medias at Teradocs. My website

5
00:00:41,580 --> 00:00:44,866
is Teradocs tech and my background

6
00:00:44,898 --> 00:00:48,630
is that I've been in the industry for about 17 years, started with building

7
00:00:48,700 --> 00:00:52,446
back ends for the most part, but over the course of the last decade have

8
00:00:52,468 --> 00:00:55,998
really strived to become a full stack engineer and worked with a

9
00:00:56,004 --> 00:00:59,342
lot of different web technologies, which is what has led me to

10
00:00:59,476 --> 00:01:03,120
the talk that you're hearing today about really trying to stick to the platform.

11
00:01:04,290 --> 00:01:07,774
So what's the problem? The problem really stems

12
00:01:07,822 --> 00:01:11,314
from the framework wars, the constant flame wars about

13
00:01:11,352 --> 00:01:14,946
frameworks. And it really is my

14
00:01:14,968 --> 00:01:18,278
opinion that every line of front end code is tech debt when it's written in

15
00:01:18,284 --> 00:01:22,086
a framework. The most pressing example I

16
00:01:22,108 --> 00:01:24,070
have of this is Angularjs.

17
00:01:26,410 --> 00:01:29,622
When everyone was really early in the framework world,

18
00:01:29,756 --> 00:01:33,434
Angularjs came on the scene and was the best thing that we had

19
00:01:33,472 --> 00:01:37,094
available. It really sped up our ability to create web applications

20
00:01:37,142 --> 00:01:40,746
quickly, and a lot of different companies latched onto it to build their

21
00:01:40,768 --> 00:01:44,558
enterprise software. This has since yielded a major

22
00:01:44,644 --> 00:01:48,622
problem. Angular JS was deprecated four

23
00:01:48,676 --> 00:01:52,702
years ago, five years ago at this point, and as of December 31

24
00:01:52,756 --> 00:01:56,414
of 2021, it will no longer be supported at all.

25
00:01:56,532 --> 00:02:00,114
So that means that every application that was written in angular JS now must

26
00:02:00,152 --> 00:02:03,986
be rewritten into something else, and I would encourage you to rewrite it

27
00:02:04,008 --> 00:02:05,410
using web components.

28
00:02:07,350 --> 00:02:11,566
Outside of that specific example, we've all lost sleep to the framework wars.

29
00:02:11,678 --> 00:02:14,950
By choosing the right framework, you're always going to pick wrong because

30
00:02:15,020 --> 00:02:18,498
there is no good choice in my opinion. But I also think that frameworks

31
00:02:18,514 --> 00:02:22,274
equate to vendor lock in. Choosing a specific framework

32
00:02:22,322 --> 00:02:25,078
means that everything you do is going to be built in that framework, and you're

33
00:02:25,094 --> 00:02:27,898
not really going to have an opportunity to mix and match, very often without a

34
00:02:27,904 --> 00:02:31,126
lot of overhead. There's also upgrade fatigue.

35
00:02:31,238 --> 00:02:34,766
Like every time a framework upgrades, you really should be upgrading to

36
00:02:34,788 --> 00:02:38,974
the latest and greatest because there are security patches that to address vulnerabilities and

37
00:02:39,092 --> 00:02:43,470
there are new speed improvements in those frameworks that are being addressed.

38
00:02:44,130 --> 00:02:48,366
But that comes with a major downside of all of the dependencies

39
00:02:48,558 --> 00:02:52,130
that are bundled in with these frameworks that you're not in control of,

40
00:02:52,280 --> 00:02:56,142
you don't get to control if viewer react includes a new dependency

41
00:02:56,206 --> 00:02:59,622
that you're not in control of. And we've all seen some of the big

42
00:02:59,676 --> 00:03:02,470
problems that can happen with large dependency trees.

43
00:03:03,210 --> 00:03:06,342
With the breaking of the web in several cases, right thinking

44
00:03:06,396 --> 00:03:10,274
left pad, or in the large vulnerability cases that we've

45
00:03:10,322 --> 00:03:14,086
seen. So it's good to minimize our dependency tree

46
00:03:14,118 --> 00:03:18,054
as much as possible. So that's why I encourage you to use our newest ally

47
00:03:18,102 --> 00:03:22,346
that we have on the scene, web components. So I

48
00:03:22,368 --> 00:03:24,874
want to dive into web components a little bit to explain what they are.

49
00:03:24,912 --> 00:03:28,430
In case you're unfamiliar with them. It's important to understand

50
00:03:28,500 --> 00:03:31,982
that they web components based, obviously components in the name.

51
00:03:32,116 --> 00:03:35,774
They do come along with lifecycle methods though, so that's something that you're used to

52
00:03:35,812 --> 00:03:39,234
in all of the frameworks. Web components have them too. They have great

53
00:03:39,272 --> 00:03:42,766
style encapsulation built in just via the shadow Dom,

54
00:03:42,958 --> 00:03:46,594
and they have some of the greatest documentation on the web with

55
00:03:46,632 --> 00:03:50,360
MDN. MDN is supported and

56
00:03:50,890 --> 00:03:54,374
curated by Mozilla and provides probably the best

57
00:03:54,412 --> 00:03:57,906
curated documentation out there. So let's talk about web components.

58
00:03:57,938 --> 00:04:01,510
What are they? Web components are a combination of

59
00:04:01,580 --> 00:04:04,794
a few different pieces of web technology. I'm not going to cover

60
00:04:04,832 --> 00:04:07,866
all these super in depth, but let's go over them really quickly.

61
00:04:07,968 --> 00:04:11,386
So we have custom elements, which is basically the ability to define your

62
00:04:11,408 --> 00:04:14,950
own HTML elements. We have the shadow Dom,

63
00:04:15,030 --> 00:04:18,906
which is a way to encapsulate not only your CSS but also your HTML

64
00:04:19,018 --> 00:04:22,314
and isolate them from the rest of the Dom. Then we have slots,

65
00:04:22,442 --> 00:04:25,710
which is a way to allow your consumers to bring their own content

66
00:04:25,780 --> 00:04:29,650
into your components. Think content projection in angular or children

67
00:04:29,720 --> 00:04:33,026
in react or slots in view. And then there are

68
00:04:33,048 --> 00:04:36,654
templates, which is just for faster render times. It allows some HTML

69
00:04:36,702 --> 00:04:40,454
elements to be defined ahead of time and then cloned really quickly for use

70
00:04:40,492 --> 00:04:44,050
later. So getting in a little bit deeper on custom elements,

71
00:04:44,210 --> 00:04:47,638
they're pretty limited with the number of requirements that I have.

72
00:04:47,804 --> 00:04:51,202
The only requirements really are that the tag name has to be all lowercase

73
00:04:51,266 --> 00:04:54,586
and it must contain a hyphen. Outside of that you can kind of

74
00:04:54,608 --> 00:04:58,346
name it whatever you want. Believe it or not, something as

75
00:04:58,528 --> 00:05:02,730
obnoxious in my opinion, as t hyphen can actually

76
00:05:02,800 --> 00:05:06,346
be a valid custom element name. I don't know why that's allowed,

77
00:05:06,378 --> 00:05:09,818
but it is. So outside of that though, there's lifecycle methods.

78
00:05:09,914 --> 00:05:13,422
Lifecycle methods for these elements consist of

79
00:05:13,476 --> 00:05:17,502
connected callback, which is when an element is added to the DOM, disconnected callback

80
00:05:17,566 --> 00:05:20,878
elements removed from the DOM, and when the attribute changed

81
00:05:20,894 --> 00:05:24,306
callback, which is keeping track of when attributes are changing on

82
00:05:24,328 --> 00:05:28,246
that element. So really feels familiar if you're used

83
00:05:28,268 --> 00:05:30,962
to other frameworks with some of these lifecycle methods,

84
00:05:31,026 --> 00:05:34,390
and also nice minimal requirements.

85
00:05:35,530 --> 00:05:39,798
Thinking of style encapsulation, something that a lot of us have used different

86
00:05:39,964 --> 00:05:43,446
systems to encapsulate our CSS. The shadow

87
00:05:43,478 --> 00:05:46,086
DOM provides beautiful style encapsulation.

88
00:05:46,278 --> 00:05:50,038
Effectively, the shadow Dom creates a miniature dom that is isolated

89
00:05:50,134 --> 00:05:53,606
from what we call the light dom, which is the main documentary.

90
00:05:53,798 --> 00:05:56,966
By using the shadow dom, when you put a style sheet into it, that style

91
00:05:56,998 --> 00:06:00,074
sheet is actually isolated from the light dom and will not affect any other elements

92
00:06:00,122 --> 00:06:03,886
except for what is in the shadow Dom. The benefit of this is that we

93
00:06:03,908 --> 00:06:07,586
don't have to obfuscate our class names. We don't need build tooling that's going

94
00:06:07,588 --> 00:06:10,494
to do that for us. We can use regular old class names.

95
00:06:10,542 --> 00:06:14,354
Or if you're using really small amount of, very small amount of

96
00:06:14,392 --> 00:06:17,838
HTML, you could just reference things by their tag names.

97
00:06:17,934 --> 00:06:21,494
Because you're so tightly encapsulated, you don't have to worry about that

98
00:06:21,532 --> 00:06:25,506
bleed of CSS, bleeding outside of that component and affecting

99
00:06:25,538 --> 00:06:29,058
things you didn't intend. So super powerful to be able to have the shadow

100
00:06:29,074 --> 00:06:32,246
Dom encapsulating your styles. The next one is

101
00:06:32,268 --> 00:06:36,106
slots, and this allows components to really

102
00:06:36,128 --> 00:06:39,338
take advantage of consumers providing their blown content. So the example that you

103
00:06:39,344 --> 00:06:42,794
can see in front of you is a basic card component where I want

104
00:06:42,832 --> 00:06:46,080
the consumer to tell me the title and the image and

105
00:06:47,090 --> 00:06:50,666
the description of that image. And as long as the consumer provides

106
00:06:50,698 --> 00:06:54,142
those things in the slots, then the card will render exactly as you would expect

107
00:06:54,196 --> 00:06:57,486
it to. And you get all of this additional styling of

108
00:06:57,508 --> 00:07:01,086
all of the elements that are being brought in and all of this additional layout

109
00:07:01,118 --> 00:07:04,450
that the consumer didn't need to worry about because it's a component.

110
00:07:05,830 --> 00:07:09,118
The last thing is documentation. So MDN

111
00:07:09,214 --> 00:07:12,374
really is some of the best documentation we have

112
00:07:12,412 --> 00:07:15,666
on the web. It's extremely well curated and it's kept

113
00:07:15,698 --> 00:07:18,966
up to date in a much better fashion than a lot

114
00:07:18,988 --> 00:07:22,906
of other documentation out there. So all of the things I've talked about so

115
00:07:22,928 --> 00:07:26,326
far with web components are documented on MDM. I encourage

116
00:07:26,358 --> 00:07:29,834
you to go out and look at it because all of their documentation is absolutely

117
00:07:29,952 --> 00:07:33,498
fantastic. So one of the questions I get a

118
00:07:33,504 --> 00:07:37,342
lot when I talk about this to people is, is it really

119
00:07:37,396 --> 00:07:40,846
enterprise ready? And the answer is absolutely.

120
00:07:41,028 --> 00:07:44,638
Like, how enterprise ready is it? Well, YouTube, as a great example,

121
00:07:44,724 --> 00:07:48,754
is all web components. It's using web components for

122
00:07:48,792 --> 00:07:52,258
everything that it does. And how do I know this?

123
00:07:52,344 --> 00:07:56,078
Because of a beautiful piece of tooling called web component devtools,

124
00:07:56,174 --> 00:07:59,506
which allows us to inspect and interact with web

125
00:07:59,528 --> 00:08:03,014
components in a way that is a little bit harder if you're just using the

126
00:08:03,052 --> 00:08:06,514
native chrome devtools gives us access to attributes

127
00:08:06,562 --> 00:08:09,750
and properties and see the slots that are available and things like that.

128
00:08:09,900 --> 00:08:13,726
You can see it's still fairly new, it's young in its development lifecycle,

129
00:08:13,778 --> 00:08:17,674
but it is a pretty powerful set of tooling. It's also

130
00:08:17,712 --> 00:08:20,954
nice to see that things like YouTube aren't alone. We also have the Nintendo Web

131
00:08:20,992 --> 00:08:24,814
store, which is also based completely in web components. So if

132
00:08:24,852 --> 00:08:28,778
Nintendo is betting their financial

133
00:08:28,954 --> 00:08:32,366
gain on web components, you can bet that it's actually a

134
00:08:32,388 --> 00:08:36,560
well baked, enterprise ready piece of technology.

135
00:08:37,970 --> 00:08:41,646
So another question I get about is delivery. How are we delivering

136
00:08:41,678 --> 00:08:45,294
web components? What does that story look like? The nice thing is, if you're writing

137
00:08:45,342 --> 00:08:48,994
native ESM, you can actually just deliver your ESM directly to

138
00:08:49,032 --> 00:08:52,774
the DOm using a script tag. And then your markup is, well, it's just

139
00:08:52,812 --> 00:08:56,646
markup. Even with your custom elements, that markup is

140
00:08:56,828 --> 00:09:00,146
really readable and really maintainable because it is just HTML

141
00:09:00,178 --> 00:09:03,674
at the end of the day. So beautiful that web

142
00:09:03,712 --> 00:09:06,380
components provide such a simple delivery system.

143
00:09:07,150 --> 00:09:10,506
But what if I want minification and bundling and those types of things that my

144
00:09:10,528 --> 00:09:14,174
framework provides me? Well, we still have all of the bundling tools available to

145
00:09:14,212 --> 00:09:18,570
us. I've chosen to highlight webpack and roll up here if we want minification.

146
00:09:18,730 --> 00:09:22,826
These are the two examples that provide minification for you. So webpack

147
00:09:22,938 --> 00:09:26,546
gives you nine whopping lines of

148
00:09:26,568 --> 00:09:29,940
config that provide you with minification and

149
00:09:30,790 --> 00:09:34,498
a basic minified bundle. And then the same thing in roll up,

150
00:09:34,664 --> 00:09:38,126
a little bit bigger, but only 13 lines to give you that nice ESM

151
00:09:38,158 --> 00:09:41,974
bundle with minification using terser. But very,

152
00:09:42,012 --> 00:09:45,570
very small amount of work needed to be able to get some of that basic

153
00:09:45,650 --> 00:09:48,886
minification that we're used to. And then I wanted

154
00:09:48,908 --> 00:09:52,430
to rehighlight the fact that this is really just a script tag.

155
00:09:52,530 --> 00:09:56,134
Like how simple is it? It really is this simple. This is the entire HTML

156
00:09:56,182 --> 00:09:59,526
document to demonstrate that card example from earlier.

157
00:09:59,638 --> 00:10:03,274
So that one script tag comes in and that card

158
00:10:03,312 --> 00:10:07,326
HTML is just HTML. So it's super powerful to

159
00:10:07,348 --> 00:10:10,938
have something so simple to look at and read because it creates

160
00:10:10,954 --> 00:10:14,494
a high level of maintainability in the long run. The other

161
00:10:14,532 --> 00:10:17,822
question that I get is support. Is it really well supported?

162
00:10:17,966 --> 00:10:21,474
Yeah, it's extremely well supported. All the major

163
00:10:21,512 --> 00:10:24,766
modern browsers support it. And if you really need ie

164
00:10:24,798 --> 00:10:27,634
eleven support, there are polyfills out there for that too.

165
00:10:27,752 --> 00:10:31,282
So it is extremely well supported out there in the industry.

166
00:10:31,346 --> 00:10:34,546
And you know how I was talking about upgrade fatigue earlier.

167
00:10:34,658 --> 00:10:37,958
The nice piece is the browsers maintain the

168
00:10:37,964 --> 00:10:42,258
upgrade for you if something needs to be patched. From a security vulnerability perspective,

169
00:10:42,354 --> 00:10:45,770
the platform is going to patch it. If there is a new

170
00:10:45,840 --> 00:10:49,306
piece of functionality that needs to be released, the platform is going to release it.

171
00:10:49,408 --> 00:10:53,130
So it makes life really really easy to maintain.

172
00:10:54,510 --> 00:10:58,206
So let's talk about a lot of the common things that frameworks provide

173
00:10:58,308 --> 00:11:01,290
that we're going to need if we're going to build an application with web components,

174
00:11:01,370 --> 00:11:04,394
things like dynamic templates and data binding and routing,

175
00:11:04,442 --> 00:11:08,030
and bringing along our favorite CSS library that we want,

176
00:11:08,180 --> 00:11:11,426
and state management. Because all of these are questions that we need to answer if

177
00:11:11,448 --> 00:11:14,466
we're going to be convincing the people around us that we can do this thing

178
00:11:14,488 --> 00:11:17,822
with web components. So dynamic templates,

179
00:11:17,966 --> 00:11:21,314
it's just JavaScript at the end of the day. So using basic

180
00:11:21,362 --> 00:11:24,454
string concatenation we can get through with 99%

181
00:11:24,492 --> 00:11:27,298
of what we really want to accomplish.

182
00:11:27,474 --> 00:11:31,154
And that means that string template literals

183
00:11:31,202 --> 00:11:34,626
have kind of become the way to go. Using backticks allows

184
00:11:34,658 --> 00:11:37,626
us to define string template literals in a way that we can drop in the

185
00:11:37,648 --> 00:11:40,826
variables that we need to at the time that we need to. But if you

186
00:11:40,848 --> 00:11:44,522
really want some advanced rendering, we can go with a really thin and small

187
00:11:44,576 --> 00:11:47,918
library, something like lid HTML. If six k is

188
00:11:47,924 --> 00:11:52,154
too big for you, there's also things out there like micro HTML or UHTML

189
00:11:52,282 --> 00:11:56,106
that are even smaller at two k that provide most of the things that lit

190
00:11:56,138 --> 00:11:59,214
HTML also provides. But if you bring in lit,

191
00:11:59,262 --> 00:12:02,914
then you get dynamic template rendering, you get data binding, you get

192
00:12:02,952 --> 00:12:06,466
event binding, attribute binding, property binding, et cetera. And for

193
00:12:06,488 --> 00:12:08,290
a very very small bundle,

194
00:12:09,430 --> 00:12:12,786
data binding. Well the nice thing is that web components

195
00:12:12,818 --> 00:12:16,178
are just objects, just like everything else in JavaScript. So if you can grab

196
00:12:16,194 --> 00:12:20,310
a handle to it using a query selector, then you can just pass in

197
00:12:20,460 --> 00:12:24,614
complex data objects by passing them to a property on that tag.

198
00:12:24,742 --> 00:12:28,410
So documenting that is definitely a big deal, but it's also

199
00:12:28,480 --> 00:12:31,626
not that big, not that hard a thing to do as you're developing your web

200
00:12:31,648 --> 00:12:34,746
components. And once again, if you really want something that

201
00:12:34,768 --> 00:12:37,358
feels a little bit more fluent and a little bit more native, then you can

202
00:12:37,364 --> 00:12:42,266
use lit HTML to do that. Property binding in line routing

203
00:12:42,298 --> 00:12:45,518
is the next biggest one. People are so used to routing having to

204
00:12:45,524 --> 00:12:48,420
be something that is very very framework specific.

205
00:12:49,030 --> 00:12:52,738
But luckily there's a set of framework utilities out

206
00:12:52,744 --> 00:12:56,142
there, a set of UI utilities out there, sorry, called Vodin.

207
00:12:56,286 --> 00:12:59,506
And Vodin has a router that's a standalone router, you don't have to bring it

208
00:12:59,528 --> 00:13:02,934
along any of their other UI components. And that router gives you

209
00:13:02,972 --> 00:13:06,678
a lot of the features that you're used to getting with a framework. Things like

210
00:13:06,764 --> 00:13:10,066
child routes and fallback routes, and being able to grab route

211
00:13:10,098 --> 00:13:13,958
parameters and use those in your templates also handles redirects so

212
00:13:13,964 --> 00:13:16,646
that if you're upgrading a path away from one path to a new path,

213
00:13:16,678 --> 00:13:20,042
you can handle that. And one of the biggest features that frameworks tend to provide

214
00:13:20,096 --> 00:13:23,638
us is the lazy loading of JavaScript bundles. The Vodin

215
00:13:23,654 --> 00:13:27,266
router handles the fact that you don't need to load all of your JavaScript

216
00:13:27,318 --> 00:13:31,198
up from if you have a bundle of web components that aren't used on the

217
00:13:31,204 --> 00:13:34,382
first page and are only used on a second page of a wizard system,

218
00:13:34,436 --> 00:13:38,238
for example, then don't load that up from bundle

219
00:13:38,254 --> 00:13:42,126
that separately, load it separately, and Vaden's router will allow you to load

220
00:13:42,158 --> 00:13:45,060
that lazily as that navigation is happening.

221
00:13:46,630 --> 00:13:50,526
So bringing in SAS or less I'm choosing SAS

222
00:13:50,558 --> 00:13:54,046
in this example. Bringing in know going

223
00:13:54,088 --> 00:13:56,198
with a bundler is pretty much the only way that you're going to be able

224
00:13:56,204 --> 00:13:59,666
to do that. You need some build step to accomplish it, and with the shadow

225
00:13:59,698 --> 00:14:01,942
dom in play you're going to have to be able to import those things.

226
00:14:01,996 --> 00:14:05,298
So on the left is webpack. Not the

227
00:14:05,324 --> 00:14:08,634
smallest amount of config in the world, I will admit, but at the same time

228
00:14:08,672 --> 00:14:12,406
it's also not that complex. It uses both the SAS loader and the raw loader

229
00:14:12,438 --> 00:14:15,946
to be able to bring that in. And this allows us to import that

230
00:14:15,968 --> 00:14:19,390
style sheet like text so that when I'm importing it from within

231
00:14:19,460 --> 00:14:23,034
my component, I can actually just take the text from that SAS file

232
00:14:23,082 --> 00:14:26,766
and put it inside of a style tag and it will render appropriately to

233
00:14:26,788 --> 00:14:30,402
get that same functionality out of roll up. It's much simpler because

234
00:14:30,456 --> 00:14:34,018
of the SAS rollup plugin. Simply setting output to false on

235
00:14:34,024 --> 00:14:37,426
the SAS rollup plugin means that it will output text to the import and

236
00:14:37,448 --> 00:14:40,600
that allows us to use it exactly like we would want to.

237
00:14:42,170 --> 00:14:45,318
State management is the last big one. So how do

238
00:14:45,324 --> 00:14:48,646
we handle state management? I really like to keep the

239
00:14:48,668 --> 00:14:52,266
kiss principle in mind, keep it super simple.

240
00:14:52,448 --> 00:14:56,774
Keeping it super simple means don't overcomplicate

241
00:14:56,822 --> 00:14:59,542
things because they feel like they are complicated.

242
00:14:59,686 --> 00:15:03,370
State management can be kept very simple. As an example,

243
00:15:03,440 --> 00:15:06,586
one of the ways that I like to keep state management simple for my applications

244
00:15:06,618 --> 00:15:09,918
is I use singletons. If I have a user that

245
00:15:09,924 --> 00:15:13,338
could appear somewhere in the application and it could appear in many different places,

246
00:15:13,434 --> 00:15:17,006
then having a singleton class, which is effectively a class that only is

247
00:15:17,028 --> 00:15:20,434
ever instantiated once, but can be fetched many times. Having that

248
00:15:20,472 --> 00:15:24,094
Singleton class manage the state for that user means that I can reference

249
00:15:24,142 --> 00:15:28,210
it anywhere in my application, but it's only held in one place

250
00:15:28,280 --> 00:15:31,526
in memory. I don't have to worry about fetching it multiple times or

251
00:15:31,548 --> 00:15:35,350
how to do caching that can be handled by the Singleton service that I've created.

252
00:15:36,410 --> 00:15:39,638
If you are growing really, really large and you have a lot of state to

253
00:15:39,644 --> 00:15:42,914
manage, you can always go redux. Redux is just Javascript

254
00:15:42,962 --> 00:15:46,326
at the end of the day, but I found that to be overkill in the

255
00:15:46,348 --> 00:15:50,306
vast majority of cases. And the last one is if you're using GraphQL,

256
00:15:50,418 --> 00:15:53,486
you can always use Apollo for that. Apollo has a lot of good caching and

257
00:15:53,508 --> 00:15:57,230
state management built into it that will help you out if you're using graphQl.

258
00:15:58,690 --> 00:16:02,126
So thank you very much for taking the time to hear me out on

259
00:16:02,148 --> 00:16:05,326
this web components thing. I hope that I've opened your eyes a little bit

260
00:16:05,348 --> 00:16:09,022
to what's available to you out there, and I really hope that

261
00:16:09,156 --> 00:16:12,254
if you're given an opportunity to in the future that you'll choose

262
00:16:12,292 --> 00:16:15,020
web components as your way to build your next application. Thank you.

