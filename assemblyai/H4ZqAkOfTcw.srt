1
00:00:00,410 --> 00:00:06,126
Jamaica make up real

2
00:00:06,148 --> 00:00:09,530
time feedback into the behavior of your distributed systems

3
00:00:09,610 --> 00:00:12,490
and observing changes exceptions.

4
00:00:12,570 --> 00:00:16,666
Errors in real time allows you to not only experiment with confidence,

5
00:00:16,778 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:01:04,942
You hi

7
00:01:04,996 --> 00:01:08,894
everyone, my name is Vishnu Vardhan Chikoti and then in this session

8
00:01:08,942 --> 00:01:13,570
I'm going to talk about my learnings from chaos experiments.

9
00:01:13,990 --> 00:01:17,430
About me I have about 17 years of experience across

10
00:01:17,500 --> 00:01:21,634
it labeled engineering which includes chaos engineering, product development

11
00:01:21,682 --> 00:01:25,094
and business analysis. It's a diverse experience that I have.

12
00:01:25,292 --> 00:01:28,598
Currently I'm a senior manager SRE at Fanatics

13
00:01:28,694 --> 00:01:31,942
and prior to fanatics I have worked at Broadridge,

14
00:01:32,006 --> 00:01:36,150
Goldman Sachs, bank of America, Tektora Consulting and DBS

15
00:01:36,230 --> 00:01:40,662
bank. So most of this experience is into investment banking, product development

16
00:01:40,726 --> 00:01:44,574
or in the SRE areas. Other than this talk, I have

17
00:01:44,612 --> 00:01:48,206
also done few other things. One is like I'm a co author of

18
00:01:48,228 --> 00:01:52,282
a book, hands on site reliability Engineering, which has been published recently.

19
00:01:52,346 --> 00:01:55,554
In July 2021, I have done a couple of

20
00:01:55,592 --> 00:01:59,442
tech talks. One is in conf 42 SRE 2021,

21
00:01:59,496 --> 00:02:02,994
about a new enterprise SRE adoption framework called

22
00:02:03,032 --> 00:02:06,466
Arctic and I have also spoken about chaos engineering

23
00:02:06,498 --> 00:02:10,082
and how it relates to error budgets in Chaos Carnival

24
00:02:10,146 --> 00:02:13,538
2022. I also have a blog except

25
00:02:13,554 --> 00:02:17,090
geek.com. It has content across capital markets,

26
00:02:17,170 --> 00:02:20,394
technology and some other things. If you want

27
00:02:20,432 --> 00:02:23,542
you can check it out and from a location perspective.

28
00:02:23,606 --> 00:02:26,534
I am almost all the time at Hyderabad,

29
00:02:26,582 --> 00:02:29,820
India from the last 20 years.

30
00:02:30,510 --> 00:02:34,030
Before I get into the main topic, let's do a quick

31
00:02:34,100 --> 00:02:37,566
recap on what chaos engineering is. So this

32
00:02:37,588 --> 00:02:41,038
is like the definition from principles of chaos. I'm not going

33
00:02:41,044 --> 00:02:45,226
to read the full thing, but if you see there are like three main parts

34
00:02:45,258 --> 00:02:48,754
to it. So one is that it is about experiments on

35
00:02:48,792 --> 00:02:52,366
a system and then the second part is building confidence.

36
00:02:52,478 --> 00:02:55,682
And then the third part is about the turbulent conditions in

37
00:02:55,736 --> 00:02:59,590
production. Now when an experiment is done,

38
00:02:59,660 --> 00:03:02,854
it can result in a failure that the system is not

39
00:03:02,892 --> 00:03:06,358
able to withstand that condition or it can result in a

40
00:03:06,364 --> 00:03:09,778
situation where the system has actually withstand that condition.

41
00:03:09,874 --> 00:03:13,046
So if it chaos actually able to handle

42
00:03:13,078 --> 00:03:16,634
that, then it builds confidence that okay, like this can be

43
00:03:16,672 --> 00:03:20,538
handled. And if it doesn't then we need to go back and actually look at

44
00:03:20,624 --> 00:03:23,934
how do we fix it. The next thing

45
00:03:23,972 --> 00:03:27,834
is about the turbulent conditions themselves. So what turbulent

46
00:03:27,882 --> 00:03:31,614
conditions can actually occur in production? So the first one

47
00:03:31,652 --> 00:03:35,146
is the famous application or service and availability.

48
00:03:35,258 --> 00:03:38,766
So we all know that there can be a chaos monkey which can be deployed

49
00:03:38,798 --> 00:03:42,498
and it can randomly shut down services or applications. And this is a

50
00:03:42,504 --> 00:03:46,162
famous thing. And coming to the modern way on

51
00:03:46,216 --> 00:03:49,794
how we develop, deploy applications and expose it

52
00:03:49,832 --> 00:03:53,426
to users. So there are like various components.

53
00:03:53,458 --> 00:03:56,310
So we might deploy it in an on prem system,

54
00:03:56,380 --> 00:03:59,740
we might deploy it on cloud, multicloud, hybrid, cloud,

55
00:04:00,110 --> 00:04:03,530
one region, multiregion. So there are various different

56
00:04:03,600 --> 00:04:07,894
ways we actually deploy. We replicate across database

57
00:04:07,942 --> 00:04:12,186
instances. And then the users themselves are now at

58
00:04:12,208 --> 00:04:15,340
a very high scale where they are trying to,

59
00:04:16,290 --> 00:04:19,646
they are actually spread across the globe and accessing that

60
00:04:19,748 --> 00:04:23,534
over their wiFi, broadband or some wireless

61
00:04:23,582 --> 00:04:26,882
connectivity. So in such a scenario, there are

62
00:04:26,936 --> 00:04:31,246
so many network hops between the users requesting

63
00:04:31,278 --> 00:04:34,434
for something and then getting back what they want.

64
00:04:34,552 --> 00:04:38,094
So there can be delays in the network, there can be failures

65
00:04:38,142 --> 00:04:42,274
in the network, like packet loss or packet corruption kind of a scenarios.

66
00:04:42,322 --> 00:04:45,878
Or we can have a resource utilization problem

67
00:04:46,044 --> 00:04:49,914
with respect to cpu memory or I o

68
00:04:50,032 --> 00:04:53,642
related issues. Now, when we

69
00:04:53,696 --> 00:04:57,770
consider an application, let's say running on a vm, so it's not that that

70
00:04:57,840 --> 00:05:01,134
particular process is running. So there can be other things

71
00:05:01,172 --> 00:05:05,614
that might be running, which can be an infrastructure agent for

72
00:05:05,812 --> 00:05:09,322
infrastructure automation, there can be an agent for observability

73
00:05:09,386 --> 00:05:12,842
purposes. There can be an agent from security purposes.

74
00:05:12,906 --> 00:05:16,418
So there can be various other agents, and they might actually cause a

75
00:05:16,424 --> 00:05:19,874
problem which can create that cpu situation, how much you test your

76
00:05:19,912 --> 00:05:23,906
application, like when you deploy it in production, and then when it

77
00:05:23,928 --> 00:05:27,734
is running in an ecosystem with other processes. And the other

78
00:05:27,772 --> 00:05:31,314
things can also cause a problem and configuration

79
00:05:31,362 --> 00:05:35,042
error. So we have all seen that when there is some condition

80
00:05:35,106 --> 00:05:38,314
error, there can be a massive incident as well.

81
00:05:38,352 --> 00:05:42,406
So it's better we try that on a small best radius

82
00:05:42,598 --> 00:05:45,642
by injected that and then verifying how the

83
00:05:45,696 --> 00:05:48,982
system behaves and then database failures.

84
00:05:49,046 --> 00:05:52,966
So with database we can have logs, we can have transaction log fill ups,

85
00:05:52,998 --> 00:05:56,254
so there can be condition, so there can be other things

86
00:05:56,292 --> 00:05:59,838
in the database. So how is your overall system

87
00:05:59,924 --> 00:06:03,566
actually working or behaving in this particular scenario?

88
00:06:03,678 --> 00:06:07,262
So that's like a quick recap on what chaos

89
00:06:07,326 --> 00:06:11,250
is now coming to actual learning.

90
00:06:11,320 --> 00:06:14,622
So what I've actually learned from my experience with chaos

91
00:06:14,686 --> 00:06:17,880
engineering since the last four or five years, now,

92
00:06:18,330 --> 00:06:21,142
one is about the tools themselves.

93
00:06:21,276 --> 00:06:25,318
So being a technical person, we are all very interested

94
00:06:25,404 --> 00:06:28,706
about what tool to use the moment we know that, okay, there's a chaos

95
00:06:28,738 --> 00:06:32,026
engineering that needs to be done. Now, when we look

96
00:06:32,048 --> 00:06:35,418
at a tool. So there are various tools now available,

97
00:06:35,504 --> 00:06:38,540
open source or from a vendor. Now,

98
00:06:38,990 --> 00:06:42,480
some of the thinking that we need to look at is

99
00:06:43,330 --> 00:06:46,958
whether we are going to use this particular tool just for a team

100
00:06:47,044 --> 00:06:50,286
or a department, or at an entire organization level.

101
00:06:50,468 --> 00:06:53,754
Now, as you broader your scope.

102
00:06:53,802 --> 00:06:57,182
So what you observe is there is a variation in runtime,

103
00:06:57,246 --> 00:07:00,130
so how the applications are actually running.

104
00:07:00,200 --> 00:07:03,854
So are they running on vms, are they running on on prem,

105
00:07:03,902 --> 00:07:07,478
are they running on cloud, are they running on kubernetes kind

106
00:07:07,484 --> 00:07:11,846
of environment, so where they are actually running and then how they

107
00:07:11,868 --> 00:07:15,810
are connecting with each other. So that would be one variation.

108
00:07:15,970 --> 00:07:20,058
And the next variation that you would see is like the architectures themselves on

109
00:07:20,144 --> 00:07:23,866
how again they are deployed, how you are trying to maintain the

110
00:07:23,888 --> 00:07:27,754
ha for that, how you are trying to replicate. So there

111
00:07:27,792 --> 00:07:30,140
can be some differences in that.

112
00:07:31,250 --> 00:07:35,278
And then the application maturity itself, like given some standard

113
00:07:35,444 --> 00:07:39,726
architecture patterns and design patterns. Now how each application

114
00:07:39,828 --> 00:07:43,374
or service has implemented them can also vary.

115
00:07:43,422 --> 00:07:47,086
So the overall maturity of what they have actually considered

116
00:07:47,118 --> 00:07:50,494
and at what level they have implemented also differs.

117
00:07:50,542 --> 00:07:54,894
Now if you run chaos experiments on a particular blast

118
00:07:54,942 --> 00:07:58,982
radius and then you think that okay, the same thing will also work for

119
00:07:59,116 --> 00:08:02,582
another set of applications and all that might not actually

120
00:08:02,636 --> 00:08:06,342
exactly match. So there will be differences on what

121
00:08:06,396 --> 00:08:10,502
has been implemented. And next is about the policies.

122
00:08:10,566 --> 00:08:13,962
Now you take an organization, so there will be various things

123
00:08:14,016 --> 00:08:17,370
like what would your infrastructure team actually allow you

124
00:08:17,440 --> 00:08:20,966
to do on your applications or when

125
00:08:21,008 --> 00:08:24,686
you keep expanding that particular scope of where

126
00:08:24,708 --> 00:08:28,014
you want to run the chaos experiment. And then there will be

127
00:08:28,052 --> 00:08:31,166
certain policies from security perspective on

128
00:08:31,268 --> 00:08:34,734
what experiments you can run and in what way you have to run.

129
00:08:34,772 --> 00:08:38,702
Like though the tool has a capability that might not be straightforward

130
00:08:38,766 --> 00:08:42,862
to implement given that. And then there will be like change related policies

131
00:08:42,926 --> 00:08:46,690
now. And then there will be incident related policies like how you are

132
00:08:46,760 --> 00:08:50,774
making sure that what you are actually going to run is in line with

133
00:08:50,812 --> 00:08:54,534
these all policies. So that's one thing about

134
00:08:54,572 --> 00:08:57,862
the tools that I have learned. And then the second

135
00:08:57,916 --> 00:09:01,434
thing is about the actual tools themselves. There are like, as I said,

136
00:09:01,552 --> 00:09:05,942
many tools available. The first one is obviously very famous chaos

137
00:09:06,006 --> 00:09:09,738
monkey. We all know that. And that's what it started. And then there

138
00:09:09,744 --> 00:09:12,602
is Simeon army, I didn't mention it here.

139
00:09:12,656 --> 00:09:18,142
And then there is Warrian which is basically has

140
00:09:18,196 --> 00:09:21,802
failures based on protocol like HTTP MySql.

141
00:09:21,866 --> 00:09:25,346
And then error condition can be like you

142
00:09:25,368 --> 00:09:29,630
are returning an error or you are injecting a delay. So those condition

143
00:09:29,710 --> 00:09:33,442
and then there is boot chaos monkey. Basically you

144
00:09:33,496 --> 00:09:36,970
add certain configuration to a palm file and you build your sharing

145
00:09:36,990 --> 00:09:40,454
boot application and then it will randomly start injecting that

146
00:09:40,492 --> 00:09:44,818
faults. And then chaos blade is from Alibaba

147
00:09:44,914 --> 00:09:48,066
which has various chaos experiments,

148
00:09:48,178 --> 00:09:51,906
scenarios including like attacks on the JVM level,

149
00:09:52,028 --> 00:09:56,262
the fault injections at the JVM level, and then there is pumba

150
00:09:56,326 --> 00:10:00,446
which is basically for Docker containers so it can

151
00:10:00,548 --> 00:10:04,558
run as a standalone binary or you

152
00:10:04,564 --> 00:10:08,366
can inject some libraries into your container and then use palma as

153
00:10:08,388 --> 00:10:12,010
well. And there is chaos mesh for kubernetes

154
00:10:12,090 --> 00:10:16,386
environments. Similarly we have litmus for kubernetes and

155
00:10:16,488 --> 00:10:20,062
cloud native environments. And then there is chaos

156
00:10:20,126 --> 00:10:23,090
cube for kubernetes environments.

157
00:10:23,510 --> 00:10:27,174
And then there is Cthulhu and we have

158
00:10:27,292 --> 00:10:31,750
monarch from T Mobile which is used for pivotal cloud foundry

159
00:10:32,090 --> 00:10:35,878
based applications. So if you have deployments there then monarch can

160
00:10:35,884 --> 00:10:38,950
be used. And then there is mangle from VMware.

161
00:10:39,030 --> 00:10:42,362
So there are various fault injection available

162
00:10:42,496 --> 00:10:46,122
for VMware related or at a VM level.

163
00:10:46,176 --> 00:10:49,946
So there are various things which are available through mangle. And then there

164
00:10:49,968 --> 00:10:52,750
is at T resiliency studio.

165
00:10:53,170 --> 00:10:56,986
And then there is moxie which is also a proxy like Warian.

166
00:10:57,098 --> 00:11:00,654
So you can create put moxie as a proxy and then you can

167
00:11:00,692 --> 00:11:04,002
inject like response code failures or

168
00:11:04,056 --> 00:11:07,294
injected delays or any network related

169
00:11:07,342 --> 00:11:10,786
failures also through moxie. And then there is chaos toolkit with

170
00:11:10,888 --> 00:11:14,194
various integrations that are available now.

171
00:11:14,232 --> 00:11:18,114
Again, which tool you want based on where your ecosystem

172
00:11:18,162 --> 00:11:21,494
is, where your application ecosystem is, and then what is your

173
00:11:21,532 --> 00:11:25,126
best radius. So based on that it can be used. And then there are

174
00:11:25,148 --> 00:11:28,418
also some operating system native features

175
00:11:28,514 --> 00:11:32,106
that can actually be used. So if you look at these tools like

176
00:11:32,128 --> 00:11:35,594
how they are implemented internally, there are some common things that are

177
00:11:35,632 --> 00:11:39,066
actually used. So some common Linux features or

178
00:11:39,088 --> 00:11:42,462
some common windows features that are actually used. And then

179
00:11:42,516 --> 00:11:45,566
coming to the actual scenarios like what I have seen

180
00:11:45,668 --> 00:11:48,270
while injecting chaos experiments.

181
00:11:49,330 --> 00:11:52,846
So one is like reconnect failures. So most of us who have

182
00:11:52,868 --> 00:11:56,234
worked for a long time can connect to this reconnect failure.

183
00:11:56,282 --> 00:11:59,954
Like let's say we have an application and running and then suddenly it can't connect

184
00:11:59,992 --> 00:12:03,746
to the database. Like how is it actually behaving? So is it

185
00:12:03,768 --> 00:12:07,494
actually not able to reconnect anymore or is it hung or

186
00:12:07,612 --> 00:12:09,240
what kind of things are happening?

187
00:12:10,890 --> 00:12:14,214
So that's one thing that I have seen. So we need to look at how

188
00:12:14,252 --> 00:12:17,614
to fix it and then the timeout

189
00:12:17,682 --> 00:12:21,142
problems. Now if you inject a network delay, like how is your timeout

190
00:12:21,206 --> 00:12:24,666
being handled in your service or UI or whatever is

191
00:12:24,688 --> 00:12:27,290
that you are trying to verify?

192
00:12:30,350 --> 00:12:33,786
And then let's say it's a UI, is it actually crashing

193
00:12:33,818 --> 00:12:37,018
the timeout and throwing a proper message? Or is it just throwing

194
00:12:37,034 --> 00:12:40,494
a fin out four l and

195
00:12:40,532 --> 00:12:44,126
then there can be crashes like

196
00:12:44,308 --> 00:12:48,018
whether it again can be a service or the UI or a mobile app or

197
00:12:48,104 --> 00:12:51,294
whatever it says it can simply crash.

198
00:12:51,422 --> 00:12:55,426
So based on the injected failure condition, so is it something which is happening?

199
00:12:55,608 --> 00:12:59,634
That's something that needs to be checked. And then the master slave

200
00:12:59,682 --> 00:13:03,282
setups. Now let's say you bring down the master instance

201
00:13:03,346 --> 00:13:07,126
and then you have multiple slaves also available. And is

202
00:13:07,148 --> 00:13:11,418
the election actually working fine? And then is one of the slave actually upgrading to

203
00:13:11,584 --> 00:13:14,662
master? So that's something that can be checked.

204
00:13:14,726 --> 00:13:18,186
And now there are other things that can be

205
00:13:18,208 --> 00:13:22,054
done, is like you disconnect the master from the slave through network

206
00:13:22,102 --> 00:13:25,774
failure condition. Now is the slave actually thinking that

207
00:13:25,812 --> 00:13:29,754
the master no longer exists and it being upgrading itself to a master?

208
00:13:29,802 --> 00:13:33,834
And then we have a split brain scenario. So that is like other

209
00:13:33,892 --> 00:13:37,330
kind of scenarios that can happen. And then

210
00:13:37,400 --> 00:13:41,026
again, depending on what actually happened, you will have a fix, like you need to

211
00:13:41,048 --> 00:13:44,654
have three nodes, like one master

212
00:13:44,702 --> 00:13:48,278
and two slaves, where even if one master disconnects from the

213
00:13:48,444 --> 00:13:51,954
slave through some network problem, the slave can connect to the other slave

214
00:13:52,002 --> 00:13:56,214
and then it knows that, okay, the master is still alive. So there

215
00:13:56,252 --> 00:14:00,166
can be like various fixes, various things to look at based

216
00:14:00,188 --> 00:14:03,434
on what the problem has been identified. And then the

217
00:14:03,472 --> 00:14:07,274
auto scaling thing. Now if you inject a high cpu condition or you are trying

218
00:14:07,312 --> 00:14:10,842
to bring down few instances, is your auto scaling actually

219
00:14:10,896 --> 00:14:15,406
working properly? That the scaling is actually happening to

220
00:14:15,428 --> 00:14:18,762
bring back the required instances, or to bring up a new instance

221
00:14:18,826 --> 00:14:22,014
based on the cpu or memory injection that would have been

222
00:14:22,052 --> 00:14:25,282
done. And then the ha setup again,

223
00:14:25,336 --> 00:14:29,634
like how is your high availability working when one of the instance is

224
00:14:29,672 --> 00:14:33,042
actually not available? Is it kicking in correctly and then

225
00:14:33,176 --> 00:14:37,186
working then exception handling. Let's say there

226
00:14:37,208 --> 00:14:40,486
is a user who is trying to do some transactions and

227
00:14:40,508 --> 00:14:44,118
then there is a failure at a network or these old timeout things.

228
00:14:44,204 --> 00:14:47,270
And then how is it actually being handled on the US side?

229
00:14:47,340 --> 00:14:51,114
Again, let's say he has done a buy transaction, it has actually hit

230
00:14:51,152 --> 00:14:54,794
the server and the buy actually got processed, but the return

231
00:14:54,912 --> 00:14:58,906
was not properly handled in the UI. So then

232
00:14:58,928 --> 00:15:01,962
that will be a problem. The user will not know what exactly has happened.

233
00:15:02,016 --> 00:15:06,254
So are you actually like, let's say there is a timeout or

234
00:15:06,452 --> 00:15:10,126
there is some other error coming from back end. Are you

235
00:15:10,148 --> 00:15:13,262
actually taking the user back to some kind of a screen where he knows

236
00:15:13,326 --> 00:15:16,946
what exactly has happened overall and that kind

237
00:15:16,968 --> 00:15:21,230
of a user experience and then observability.

238
00:15:21,390 --> 00:15:25,086
So this is not directly injected directly related to how

239
00:15:25,128 --> 00:15:28,326
the application has withstand the

240
00:15:28,348 --> 00:15:32,866
turbulent condition. But other things that can be considered are like observability,

241
00:15:32,978 --> 00:15:36,886
like when these kind of errors are actually happening. Are you actually

242
00:15:37,068 --> 00:15:41,500
logging it or are you catching it within your observability data?

243
00:15:41,870 --> 00:15:45,434
And then observability is the data. And once you have that

244
00:15:45,472 --> 00:15:48,986
data, do you have the right monitors in place when these kind of

245
00:15:49,008 --> 00:15:52,346
things have happened? Actually, did the monitoring pick it up

246
00:15:52,368 --> 00:15:55,530
or not? So in certain cases, yes, we have set up the observability,

247
00:15:55,610 --> 00:15:59,486
but we haven't set up the monitors. And once we have set

248
00:15:59,508 --> 00:16:02,974
up the monitors, the next thing is, is the alerting being done

249
00:16:03,012 --> 00:16:06,414
through the right channels? Are you messaging someone? Are you

250
00:16:06,452 --> 00:16:09,986
emailing someone? Are you actually paging someone? So this kind of

251
00:16:10,008 --> 00:16:14,222
alerting will also come into the picture that you can actually verify

252
00:16:14,286 --> 00:16:17,030
whether that chaos actually worked fine or not.

253
00:16:17,180 --> 00:16:21,126
Right. And then error budgets, now, when these errors are happening,

254
00:16:21,228 --> 00:16:25,254
fan raids or whatever, errors are actually being sent back,

255
00:16:25,292 --> 00:16:28,914
are these being recorded and adjusted against the error

256
00:16:28,962 --> 00:16:32,426
budget so you don't create a major

257
00:16:32,528 --> 00:16:36,042
impact to the error project, to chaos experiments because it's a small

258
00:16:36,096 --> 00:16:39,846
blast radius, but still you can verify that whether they are reflecting

259
00:16:39,878 --> 00:16:43,294
there or not. And then auto recovery, if you

260
00:16:43,332 --> 00:16:46,938
have auto recovery set up, you can check whether the auto recovery

261
00:16:47,034 --> 00:16:50,554
has actually triggered correctly and then recovered the instance.

262
00:16:50,602 --> 00:16:54,034
For example, you are trying to bring down an instance and

263
00:16:54,072 --> 00:16:58,046
then did it actually through the monitoring, did it trigger

264
00:16:58,078 --> 00:17:01,380
the auto recovery and did it actually bring that instance back?

265
00:17:02,710 --> 00:17:06,742
So that's another thing. And then the other learning

266
00:17:06,796 --> 00:17:10,370
I have is about injecting multiple failures.

267
00:17:10,530 --> 00:17:13,794
So we don't actually inject multiple

268
00:17:13,842 --> 00:17:16,994
failures at the same time across the ecosystem, we inject

269
00:17:17,042 --> 00:17:21,346
like kind of one failure at a time. Like if you inject too many failures

270
00:17:21,458 --> 00:17:24,634
parallel at the same time, you don't know what

271
00:17:24,672 --> 00:17:28,140
went wrong and what would have actually caused it.

272
00:17:29,470 --> 00:17:33,802
That is another thing. And then, yeah, how do you actually handle the identified

273
00:17:33,866 --> 00:17:37,918
weaknesses? So when you have actually identified some problem

274
00:17:38,004 --> 00:17:41,342
through chaos experiments, it comes back to the product

275
00:17:41,396 --> 00:17:44,842
development backlog. And we have this problem of like,

276
00:17:44,996 --> 00:17:48,706
basically it goes into the technical backlog because this is some kind of a

277
00:17:48,728 --> 00:17:51,458
technical problem that you need to fix.

278
00:17:51,624 --> 00:17:55,154
Now, how do you actually prioritize this and get

279
00:17:55,192 --> 00:17:58,438
it fixed? So it depends on the scale of the problem.

280
00:17:58,524 --> 00:18:01,880
Now, you would have injected again the chaos experiment on a small

281
00:18:02,250 --> 00:18:05,942
best radius. Now, what happens if such a problem happens at a

282
00:18:06,076 --> 00:18:09,914
widespread thing? So basically what

283
00:18:09,952 --> 00:18:13,366
would be the impact and what level of problem it would creating?

284
00:18:13,398 --> 00:18:17,530
Like you need to prioritize it accordingly and either

285
00:18:17,600 --> 00:18:20,954
utilize your 20% of tech backlog that

286
00:18:20,992 --> 00:18:24,542
can be allocated in a sprint, or if it is a bigger problem,

287
00:18:24,676 --> 00:18:28,062
then you have to allocate more time than the 20%

288
00:18:28,196 --> 00:18:32,126
to fix this problem and then knowledge sharing. So once you have done

289
00:18:32,148 --> 00:18:36,074
the chaos experiments and learned something from that, it is important that you actually

290
00:18:36,132 --> 00:18:39,826
go back and share within the organization that these are the

291
00:18:39,848 --> 00:18:43,154
experiments that were run and this is what are the results that we saw.

292
00:18:43,272 --> 00:18:46,526
And if there are any observations like the system did not

293
00:18:46,568 --> 00:18:50,294
withstand that, then what did you actually do to fix it?

294
00:18:50,412 --> 00:18:54,034
Because in certain cases, the similar patterns or the architecture

295
00:18:54,082 --> 00:18:56,802
patterns will be used across the enterprise.

296
00:18:56,866 --> 00:19:00,994
And then it's important that you go back and fix the different places

297
00:19:01,042 --> 00:19:03,270
that the same problem might occur.

298
00:19:06,250 --> 00:19:09,734
That's my talk. And any questions you have, like send

299
00:19:09,772 --> 00:19:12,380
it discord and thank you.

