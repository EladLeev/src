1
00:00:20,170 --> 00:00:23,322
Thank you for joining us for zero trust security with IoT session.

2
00:00:23,466 --> 00:00:26,946
I am Syed Rehan Armasi, IoT developer evangelist

3
00:00:26,978 --> 00:00:30,646
within AWS IoT service team. You have my QR code on the right hand

4
00:00:30,668 --> 00:00:34,530
side here. You can connect to me using LinkedIn or twitter.

5
00:00:34,610 --> 00:00:38,506
Ask me any questions related with AWS or WSIO IoT or zero trust or

6
00:00:38,528 --> 00:00:42,426
in general. So let's begin. So in

7
00:00:42,448 --> 00:00:45,674
this session today we will look at

8
00:00:45,792 --> 00:00:49,242
zero trust and its protection principles. We will also

9
00:00:49,296 --> 00:00:52,506
look at NIST and NCSC zero trust design principles.

10
00:00:52,538 --> 00:00:56,000
These are the cybersecurity organization in UK and US.

11
00:00:56,450 --> 00:00:59,546
We will also look at AWS IoT security best practices.

12
00:00:59,658 --> 00:01:03,326
These are the ones which I basically advocate to

13
00:01:03,348 --> 00:01:07,074
my customers or AWS in general advocate to customers

14
00:01:07,272 --> 00:01:10,946
as part of the security best practice to adhere to. Then we will look at

15
00:01:10,968 --> 00:01:14,366
a demo and I'll walk you through using AWS Iot green grass

16
00:01:14,398 --> 00:01:18,306
and AWS IoT device client these are the two open source AWS

17
00:01:18,338 --> 00:01:22,374
IoT projects which you can basically use to emulate a real

18
00:01:22,492 --> 00:01:25,862
hardware or real device, a real Iot thing.

19
00:01:25,996 --> 00:01:30,010
AWS IoT, the Green Cross is actually edge

20
00:01:30,830 --> 00:01:34,246
runtime environment where basically you can run lambda

21
00:01:34,278 --> 00:01:38,330
components to compute at edge.

22
00:01:39,070 --> 00:01:42,874
Within this demo we will basically look at how to secure these devices using AWS

23
00:01:42,922 --> 00:01:47,246
IoT policies and how does it actually adhere to

24
00:01:47,428 --> 00:01:51,066
AWS IG adhere to zero trust? Then I'll

25
00:01:51,098 --> 00:01:54,466
take questions if there are any so what is zero trust?

26
00:01:54,568 --> 00:01:58,014
So from a NIST, which is a cybersecurity

27
00:01:58,062 --> 00:02:01,410
organization in the US, they always

28
00:02:01,480 --> 00:02:05,118
say that the cybersecurity paradigm,

29
00:02:05,294 --> 00:02:08,538
you need to make sure the network based parameters to focus on users'assets,

30
00:02:08,574 --> 00:02:11,974
and resources, right? And you need to make sure that there is no

31
00:02:12,012 --> 00:02:15,334
implicit trust granted to assets or user based

32
00:02:15,372 --> 00:02:19,320
on their physical network location or the asset ownership. For example,

33
00:02:19,850 --> 00:02:23,766
somebody who is basically a root user or admin user,

34
00:02:23,958 --> 00:02:27,254
and you give them complete network access and allowing

35
00:02:27,382 --> 00:02:30,906
them to access your backend, it is against your trust guidelines and

36
00:02:30,928 --> 00:02:34,238
principles, whether they based over VPN or

37
00:02:34,244 --> 00:02:38,154
they're basically doing it over physical based on the office location

38
00:02:38,202 --> 00:02:41,338
and whatnot. Similarly,

39
00:02:41,514 --> 00:02:44,530
NCSC, which is a cybersecurity organization,

40
00:02:45,110 --> 00:02:48,754
a government agency in UK, they say

41
00:02:48,792 --> 00:02:52,594
that there shouldn't be a trust, direct trust

42
00:02:52,792 --> 00:02:56,626
and inherent trust in the network is removed and

43
00:02:56,648 --> 00:03:00,534
should be removed. Always assume network is hostile and

44
00:03:00,572 --> 00:03:04,406
each request is verified. So for example, network is assumed hostile. You may never know

45
00:03:04,508 --> 00:03:08,086
who's actually snooping and eavesdropping and always request each

46
00:03:08,108 --> 00:03:11,802
request is verified, basically backing that up with the policy and backing them

47
00:03:11,856 --> 00:03:15,382
up with the authentication authorization to make sure it's a right user.

48
00:03:15,446 --> 00:03:18,678
Right level of privileges has been applied when the user is accessing

49
00:03:18,694 --> 00:03:21,798
the environment. So protection principles

50
00:03:21,814 --> 00:03:25,710
for zero trust. So these are some of the protection principles.

51
00:03:26,530 --> 00:03:29,806
When I have a discussion with my customers, I always look at and I

52
00:03:29,828 --> 00:03:33,546
basically tell them that to look out for within your own protection

53
00:03:33,578 --> 00:03:37,454
guidelines or security guidelines, make sure

54
00:03:37,652 --> 00:03:41,374
you're always paranoid in a sense that Internet and external

55
00:03:41,422 --> 00:03:45,494
threats always exist, right? Never assume that

56
00:03:45,612 --> 00:03:49,734
whether the internal user or external user, they are verified and

57
00:03:49,772 --> 00:03:52,946
they are valid users, so there won't be any compromise

58
00:03:52,978 --> 00:03:56,866
on situation, right? Assume hostility.

59
00:03:56,978 --> 00:04:00,386
Always assume each device is hostile. So if we take zero trust principles

60
00:04:00,418 --> 00:04:03,594
in hand, we will look at to see that

61
00:04:03,632 --> 00:04:07,514
every device is hostile, right? And this goes hand in

62
00:04:07,552 --> 00:04:11,306
hand with the rest of the other principles which we're going to talk about

63
00:04:11,408 --> 00:04:15,038
to make sure that if the device, whether IoT is actually owned by

64
00:04:15,204 --> 00:04:18,474
it director or IT administrator or a developer

65
00:04:18,522 --> 00:04:21,834
or whatnot, you need to make sure that every device is hostile

66
00:04:21,882 --> 00:04:24,910
because we never know what device could be used

67
00:04:25,060 --> 00:04:28,414
as a bed or a conduit for can attacker

68
00:04:28,462 --> 00:04:32,046
to basically gain access to your environment. Gatekeeper.

69
00:04:32,238 --> 00:04:35,910
This is one of the rounding ones where we basically

70
00:04:35,980 --> 00:04:40,130
look at authorization and authentication every user,

71
00:04:40,210 --> 00:04:44,520
every request to make sure that you have a gatekeeper in place.

72
00:04:45,130 --> 00:04:49,206
Most organizations do have gatekeeper in place, but usually some

73
00:04:49,228 --> 00:04:52,826
of them actually has a caching mechanism where they say, okay, yeah, no,

74
00:04:52,848 --> 00:04:55,946
we have authorized and authenticated this user or device and we

75
00:04:55,968 --> 00:04:59,786
will have this available and valid for next five days and whatnot. You shouldn't do

76
00:04:59,808 --> 00:05:03,102
that. You should always make sure that you authenticate and authorize every

77
00:05:03,156 --> 00:05:06,926
single time to make sure that your gatekeeper is always up

78
00:05:06,948 --> 00:05:10,746
to date. Trust issues I think we talked about earlier from the NIST

79
00:05:10,778 --> 00:05:14,480
principles as well as NCSE that

80
00:05:14,930 --> 00:05:18,606
trusted devices is never trusted. So for example, as I mentioned earlier,

81
00:05:18,638 --> 00:05:22,146
if somebody is in management or somebody is basically a

82
00:05:22,168 --> 00:05:26,642
developer, anybody within the company

83
00:05:26,696 --> 00:05:30,482
is basically trying to connect to the environment and they have a trusted device

84
00:05:30,546 --> 00:05:34,194
and they have root access. They shouldn't basically get automatically,

85
00:05:34,322 --> 00:05:38,114
inherently gain back access to environment

86
00:05:38,162 --> 00:05:42,374
because these are against zero trust principle because this can lead to causing

87
00:05:42,422 --> 00:05:45,526
of your back end to compromise.

88
00:05:45,718 --> 00:05:49,542
And then we can also look at God update and change policies dynamically.

89
00:05:49,606 --> 00:05:52,634
For example, if a device has been compromised, you need to make

90
00:05:52,672 --> 00:05:56,366
sure that you are updating the policy dynamically. If a user laptop has

91
00:05:56,388 --> 00:05:59,994
been stolen, you're updating the policy dynamically. If the device

92
00:06:00,042 --> 00:06:03,706
IoT device, Internet of Things device basically has been compromised, you're updating

93
00:06:03,738 --> 00:06:06,738
the policy dynamically. Taken what I've just mentioned,

94
00:06:06,824 --> 00:06:10,610
let's take and apply security best practices when basically

95
00:06:10,680 --> 00:06:13,906
talking about Internet of things or an asset, basically trying

96
00:06:13,928 --> 00:06:16,930
to connect to your environment, whether it's a cloud or endpoint,

97
00:06:17,270 --> 00:06:20,440
always decouple ingestion from processing. For example,

98
00:06:21,050 --> 00:06:24,166
we have two types of control plane. We have a data plane and we have

99
00:06:24,188 --> 00:06:27,794
control plane. Data plane is where the device is actually sending you sensory data,

100
00:06:27,852 --> 00:06:31,162
telemetry data. And then we look at control

101
00:06:31,216 --> 00:06:35,050
plane where you control the authentication authorization

102
00:06:35,710 --> 00:06:39,066
and whatnot. The category of the device to basically allow to

103
00:06:39,088 --> 00:06:42,714
basically connect to the cloud or endpoint is where we decouple

104
00:06:42,762 --> 00:06:46,254
this from processing. For example, let's say if

105
00:06:46,292 --> 00:06:49,742
a device becomes compromised and you know that you have a control

106
00:06:49,796 --> 00:06:53,518
plane separately, you can basically lock the device out and

107
00:06:53,604 --> 00:06:56,946
we will look at rest of the best practices below.

108
00:06:57,128 --> 00:07:00,786
You can basically always make sure the device is actually out

109
00:07:00,808 --> 00:07:04,062
from the environment, but is actually functioning as an offline behavior.

110
00:07:04,126 --> 00:07:07,854
Gives a segue into the next point which I was going to talk about design

111
00:07:07,912 --> 00:07:11,894
for offline behavior. Make sure your device is actually capable to

112
00:07:11,932 --> 00:07:15,574
run offline. Let's say, as I mentioned earlier, device being compromised and

113
00:07:15,612 --> 00:07:19,574
you want to basically apply the control plane and lock out from the environment,

114
00:07:19,702 --> 00:07:23,434
from the cloud or your endpoint, your network and make sure it

115
00:07:23,472 --> 00:07:28,650
works offline behavior. For example, I actually have humidifier

116
00:07:28,990 --> 00:07:32,510
connected to the Internet. I can control it using my

117
00:07:32,660 --> 00:07:36,906
mobile app. I want to make sure that if the basically device becomes

118
00:07:36,938 --> 00:07:40,714
compromised, I would basically still have the normal regular functionality

119
00:07:40,762 --> 00:07:43,986
available from the device and it shouldn't be basically be

120
00:07:44,008 --> 00:07:47,186
compromised. That I shouldn't actually have a device which is

121
00:07:47,208 --> 00:07:50,706
basically not performing what is basically devices and tasks to

122
00:07:50,728 --> 00:07:55,006
do. Design lean data enriched in the cloud.

123
00:07:55,128 --> 00:07:58,742
So for example, any IoT device or in fact

124
00:07:58,796 --> 00:08:02,406
any asset, whether it's connected to the cloud or on

125
00:08:02,428 --> 00:08:06,870
prem environment or endpoint or whatnot, always will generate

126
00:08:07,850 --> 00:08:11,478
tons of amount of data. We could go to zetabyte,

127
00:08:11,494 --> 00:08:15,178
petabytes and whatnot. Right? And we need to make sure that

128
00:08:15,264 --> 00:08:18,874
we remove the right data or rich data with

129
00:08:18,912 --> 00:08:22,326
a noisy data. So for example, if you have a device connecting

130
00:08:22,358 --> 00:08:25,742
to the cloud, you need to make sure that you are taking

131
00:08:25,796 --> 00:08:28,926
the lean data and applying it into the cloud and

132
00:08:28,948 --> 00:08:32,110
basically using it to do bi on it. You don't want to basically

133
00:08:32,180 --> 00:08:35,774
have a noisy data as well as rich data coming

134
00:08:35,812 --> 00:08:38,850
to the cloud and then you enrich it on the cloud. No, you should basically

135
00:08:38,920 --> 00:08:42,622
apply the design principles to say you have a lean data at edge

136
00:08:42,686 --> 00:08:45,886
so you basically could use something like AWS Iot greengrass,

137
00:08:45,918 --> 00:08:49,798
which basically works on the edge and offline to give you

138
00:08:49,884 --> 00:08:53,506
enriched data. So basically you can run compute at edge

139
00:08:53,538 --> 00:08:57,446
using AWS IoT greengrass, an example of that. So you

140
00:08:57,468 --> 00:09:01,082
could basically have a lean data coming to the cloud, which you can enrich by

141
00:09:01,136 --> 00:09:04,854
applying, I don't know, normalization. You could apply kinesis,

142
00:09:04,902 --> 00:09:08,566
firehose, or any other sort of data lake putting into data lake and enrich

143
00:09:08,598 --> 00:09:11,238
it for your bi users, analytics and whatnot.

144
00:09:11,334 --> 00:09:14,858
Personalization, for example, you need to basically handle

145
00:09:14,954 --> 00:09:18,766
each device differently. You can't basically have one co

146
00:09:18,788 --> 00:09:21,806
solution for all. For example, you may have a connected car,

147
00:09:21,908 --> 00:09:25,166
you may actually have a connected fridge, you may have a connected microwave.

148
00:09:25,278 --> 00:09:28,482
They all have a different functionality. You need to basically

149
00:09:28,536 --> 00:09:32,414
handle personalization, tie them up with the offline behavior,

150
00:09:32,542 --> 00:09:35,630
tie them up with a decoupling injection from processing.

151
00:09:35,710 --> 00:09:39,186
For example, a car is basically a totally different machine compared

152
00:09:39,218 --> 00:09:43,046
to a microwave or fridge. Fridge main task is

153
00:09:43,068 --> 00:09:46,546
basically making sure keeping things cold and not to make sure they go rot.

154
00:09:46,658 --> 00:09:50,706
Similarly with a microwave and similarly with a car. So for example, you wouldn't

155
00:09:50,738 --> 00:09:54,442
want to basically compromise a car. And you would basically lock that car

156
00:09:54,496 --> 00:09:57,994
down to make sure it is not working at all. I mean, carbon is actually

157
00:09:58,032 --> 00:10:01,726
moving. It will create telemetry data in terms of where it is

158
00:10:01,748 --> 00:10:04,270
actually going, the motor, the battery,

159
00:10:05,170 --> 00:10:08,906
the brake pads, the fluids, the pressure,

160
00:10:09,018 --> 00:10:12,746
so many things. The moving parts within the car will basically give you a telemetry

161
00:10:12,778 --> 00:10:16,754
data, which obviously you can enrich an edge, normalize it,

162
00:10:16,792 --> 00:10:19,986
and then send it to the cloud for you to utilize that. And also you

163
00:10:20,008 --> 00:10:24,770
can apply personalization for it. For example, you can apply EV

164
00:10:24,840 --> 00:10:28,422
car, which is electronic car battery running out, and you're basically

165
00:10:28,476 --> 00:10:32,658
notifying the user and routing them up to the local closest

166
00:10:32,834 --> 00:10:35,878
EV charger. You can't do that obviously with the

167
00:10:35,884 --> 00:10:39,670
microwave it's totally different story. So you need to basically handle personalization

168
00:10:39,830 --> 00:10:43,146
also to make sure that they allow the

169
00:10:43,168 --> 00:10:46,506
devices to basically work offline so there is

170
00:10:46,528 --> 00:10:50,102
no compromise of feature and usage

171
00:10:50,166 --> 00:10:54,442
of the device. What is designed to do and also ensure devices

172
00:10:54,506 --> 00:10:58,398
regularly send status check. For example, some customers

173
00:10:58,484 --> 00:11:02,206
basically send status checks like every 24 hours.

174
00:11:02,308 --> 00:11:05,714
Well, that's fine, you can send over 24 hours. But then

175
00:11:05,752 --> 00:11:09,294
that depends if the asset is actually moving. Asset is portable asset,

176
00:11:09,342 --> 00:11:12,370
what's the priority of the asset and whatnot?

177
00:11:13,350 --> 00:11:17,240
Some customers actually send it every five minutes. Some customers send it every 1 hour.

178
00:11:17,930 --> 00:11:21,926
It all depends on how you want to basically make sure the

179
00:11:21,948 --> 00:11:25,880
device is actually sending the status check and regularly sending the status check.

180
00:11:26,410 --> 00:11:30,554
Also look at device security lifecycle holistically. So the device security

181
00:11:30,672 --> 00:11:34,074
lifecycle holistically ties in very well with one of the other

182
00:11:34,112 --> 00:11:37,350
principles, which is identify lifecycle management.

183
00:11:37,430 --> 00:11:41,510
So for example, you actually have a device, and it is a greenfield device.

184
00:11:41,670 --> 00:11:44,686
You want to basically make sure it's gone into the field. You are having a

185
00:11:44,708 --> 00:11:49,018
proactive action on the device, whether the certificate becomes compromised or somebody's

186
00:11:49,034 --> 00:11:52,702
trying to clone the certificate of the device, or if the device basically has

187
00:11:52,756 --> 00:11:56,158
become too chatty and whatnot. You basically compromise

188
00:11:56,254 --> 00:11:59,698
the device connectivity to the cloud by saying that, okay, I'm going

189
00:11:59,704 --> 00:12:03,266
to apply privileges and the policy by locking IoT down and

190
00:12:03,288 --> 00:12:07,042
then implementing device identify identity lifecycle management.

191
00:12:07,106 --> 00:12:10,582
For example, if a device becomes chatty, you want to basically

192
00:12:10,636 --> 00:12:13,970
put the devices into a quarantine group or quarantine zone,

193
00:12:14,050 --> 00:12:17,974
where basically you can apply restricted access to

194
00:12:18,012 --> 00:12:21,046
the device in terms of it can just send you the data and cannot receive

195
00:12:21,078 --> 00:12:23,926
the data from other devices or from the cloud and whatnot.

196
00:12:24,038 --> 00:12:27,158
And it is functioning,

197
00:12:27,254 --> 00:12:30,666
but it is not basically functioning to the 100%. You have

198
00:12:30,688 --> 00:12:33,914
not basically made the device redundant. It is capable

199
00:12:33,962 --> 00:12:37,726
of carrying out the function it is designed to do. But you want to

200
00:12:37,748 --> 00:12:40,640
basically make sure that in terms of the device security,

201
00:12:41,890 --> 00:12:45,646
you could basically use, for example, in this case Edujase IoT secure

202
00:12:45,678 --> 00:12:49,390
tunneling feature to log into your device using SSH tunnel

203
00:12:49,470 --> 00:12:52,562
over MQTT. And the device basically will say,

204
00:12:52,616 --> 00:12:55,954
okay, you're connected to me. You can basically restore its firmware. You could

205
00:12:55,992 --> 00:12:59,414
basically restore its state to the previous working state or look at what

206
00:12:59,452 --> 00:13:02,658
actually caused this anomaly. Right? So it goes tie

207
00:13:02,674 --> 00:13:06,466
in very well together in hand in hand. Lease privileges

208
00:13:06,578 --> 00:13:10,694
again, start with least privileges and grant them elevated

209
00:13:10,742 --> 00:13:14,460
privileges as and when needed. You shouldn't give them.

210
00:13:14,990 --> 00:13:18,742
If you're talking about from AWS policies

211
00:13:18,806 --> 00:13:22,314
perspective, if applying a star for everything, it's just

212
00:13:22,352 --> 00:13:25,774
not the right way to do. You need to basically make sure and understand what

213
00:13:25,812 --> 00:13:29,530
the devices is actually connecting is, sending, what is publishing,

214
00:13:29,610 --> 00:13:33,490
what is receiving and whatnot. So apply the bare minimum

215
00:13:34,070 --> 00:13:38,034
policies and permissions for the device to basically connect to and be

216
00:13:38,072 --> 00:13:41,646
functional for your environment. Secure device credentials

217
00:13:41,678 --> 00:13:45,282
is trust. So for example, you may have a device which

218
00:13:45,336 --> 00:13:49,206
basically have a TPM, which is the hardware module for you

219
00:13:49,228 --> 00:13:52,886
to encrypt the device credentials or certificates when

220
00:13:52,908 --> 00:13:54,600
it's trying to connect to the cloud.

221
00:13:56,250 --> 00:13:59,626
If you don't have a hardware TPM, you could also set up

222
00:13:59,648 --> 00:14:02,982
a software based TPM within your environment or within your devices

223
00:14:03,046 --> 00:14:07,690
and whatnot. And this will basically encrypt the security credentials

224
00:14:08,270 --> 00:14:11,980
and always making sure that it doesn't get compromised at rest.

225
00:14:13,470 --> 00:14:17,466
I've already touched that about implement device identity lifecycle management.

226
00:14:17,498 --> 00:14:21,038
It goes hand in hand with device security, where I mentioned that you need

227
00:14:21,044 --> 00:14:24,766
to look at the complete holistic view of the identity of lifecycle management.

228
00:14:24,958 --> 00:14:29,054
Also tied with the previous practice

229
00:14:29,102 --> 00:14:32,734
I've talked about is that each category should be personalized

230
00:14:32,782 --> 00:14:36,030
differently, whether it's a car, whether it's a fridge, whether it's a microwave,

231
00:14:36,190 --> 00:14:39,734
kitchen appliances, external lights or whatnot. They all should

232
00:14:39,772 --> 00:14:43,126
be maintained and managed differently based on

233
00:14:43,148 --> 00:14:46,758
their identity, lifecycle management and machine learning.

234
00:14:46,844 --> 00:14:51,234
So as human, our level of reaction

235
00:14:51,282 --> 00:14:55,378
and response can never be equivalent to

236
00:14:55,404 --> 00:14:58,570
the computer. So if you actually have, let's say, machine learning, right,

237
00:14:58,640 --> 00:15:02,286
and you actually have a compromised situation within your environment, or your

238
00:15:02,308 --> 00:15:06,510
devices get compromised, if it's a machine learning, it can immediately

239
00:15:07,330 --> 00:15:11,946
notify you and apply the lock and basically quarantine

240
00:15:11,978 --> 00:15:15,950
the device so it doesn't basically violate and create security

241
00:15:16,020 --> 00:15:19,186
risk for you, for other devices and within your environment. So this

242
00:15:19,208 --> 00:15:23,042
is where I always say to my customers, use machine learning where you can

243
00:15:23,096 --> 00:15:26,866
always apply machine learning where you can, unless the devices are not

244
00:15:26,888 --> 00:15:30,134
capable to. I mean, there are two types of machine learning when we're talking about

245
00:15:30,172 --> 00:15:33,400
here. One is at actually cloud side machine learning,

246
00:15:33,770 --> 00:15:37,426
where you have the capability to train the model and apply cloud side machine

247
00:15:37,458 --> 00:15:40,814
learning knowledge. And then we also have something called machine learning inference,

248
00:15:40,882 --> 00:15:44,698
which basically you can apply machine learning model, train in the

249
00:15:44,704 --> 00:15:48,182
cloud and apply the inference of it at the edge devices. These devices

250
00:15:48,246 --> 00:15:51,270
could be can MCU or small raspberry PI.

251
00:15:51,350 --> 00:15:54,462
They are capable of running machine learning inference because you're not training the model,

252
00:15:54,516 --> 00:15:56,670
you're applying the inference at edge.

253
00:15:57,890 --> 00:16:01,120
Finally, take a holistic view of data security.

254
00:16:01,490 --> 00:16:06,274
You need to make sure if the device basically is connected to the cloud or

255
00:16:06,312 --> 00:16:09,966
in fact interconnected to your environment or on prem wherever endpoint.

256
00:16:10,078 --> 00:16:15,186
You need to make sure the data never gets compromised because you

257
00:16:15,208 --> 00:16:18,614
don't want to basically lose the faith and trust of the user if

258
00:16:18,652 --> 00:16:22,294
the data basically gets compromised. So have a holistic view of

259
00:16:22,332 --> 00:16:25,922
data security and making sure it ties in with the device credentials

260
00:16:25,986 --> 00:16:29,782
by using TPM, the hardware module. So make sure the devices never

261
00:16:29,836 --> 00:16:33,034
actually comes to a state where it can become compromised for

262
00:16:33,072 --> 00:16:36,778
a snooper or attacker who's trying to basically obtain the identity of the

263
00:16:36,784 --> 00:16:40,342
device and obtain access into your environment.

264
00:16:40,486 --> 00:16:44,634
Let's look at telemetry before machine learning. So I mentioned earlier, apply machine

265
00:16:44,682 --> 00:16:48,474
learning. So if a customer basically is unable to apply machine

266
00:16:48,522 --> 00:16:51,434
learning due to the capability of the device,

267
00:16:51,482 --> 00:16:54,946
or the device at edge is not capable to handle machine learning, then you

268
00:16:54,968 --> 00:16:58,302
can basically use something called AWS IoT device defender.

269
00:16:58,366 --> 00:17:02,146
It gives you the capability in terms of security profile to apply

270
00:17:02,328 --> 00:17:05,586
the data set, apply the algorithm to say that if

271
00:17:05,608 --> 00:17:09,538
the device becomes chatty or if the credentials has been compromised and whatnot,

272
00:17:09,634 --> 00:17:13,206
notify the user through Amazon SNS and

273
00:17:13,308 --> 00:17:16,706
log it into Cloudwatch. And then also send a trigger using lambda

274
00:17:16,738 --> 00:17:20,626
back into the device to say that you need to basically stop

275
00:17:20,668 --> 00:17:24,266
sending this data. Also, when it's connected to the cloud part, you can

276
00:17:24,288 --> 00:17:28,198
basically use lambda to move the device into a quarantine zone.

277
00:17:28,294 --> 00:17:32,026
But obviously these are the manual steps where you will need to do as part

278
00:17:32,048 --> 00:17:35,866
of your setup if the machine learning cannot be applied. Now let's

279
00:17:35,898 --> 00:17:39,118
look at defending devices with Amazon machine learning, right?

280
00:17:39,204 --> 00:17:43,086
So if you have a device which is capable of sending you data to

281
00:17:43,108 --> 00:17:46,178
the cloud, or an asset which is sending you data to the cloud,

282
00:17:46,264 --> 00:17:50,478
you could basically use the data, put it through Amazon

283
00:17:50,574 --> 00:17:54,590
Sagemaker by cleaning up the data into AWS IoT analytics,

284
00:17:54,750 --> 00:17:58,614
having the channel, the pipelines data store and creating a data set. Now this data

285
00:17:58,652 --> 00:18:02,278
set will be used by Amazon Sagemaker to create the model.

286
00:18:02,364 --> 00:18:06,086
You can basically take the model and apply into Amazon S three and

287
00:18:06,108 --> 00:18:09,626
then this model can be sent back to the devices at edge to

288
00:18:09,648 --> 00:18:13,414
say that okay, we have created this ML inference

289
00:18:13,542 --> 00:18:17,926
and for you to basically apply this locally. So this could be a microcontroller

290
00:18:17,958 --> 00:18:21,178
IoT, could be a raspberry PI, it could be

291
00:18:21,184 --> 00:18:24,990
a full blown industrial edge environment running in

292
00:18:25,060 --> 00:18:28,238
a normal operating system. These can be sent back downwards to

293
00:18:28,244 --> 00:18:31,934
the device to basically handle this. You can see here we also talked

294
00:18:31,972 --> 00:18:35,274
about AWS IoT device Defender, which will give you the capability

295
00:18:35,402 --> 00:18:38,866
to look at certificate the policies, audit it in terms of

296
00:18:38,888 --> 00:18:43,278
whether the device has basically been compromised or not. Make sure you grant permissions

297
00:18:43,454 --> 00:18:47,218
based on what the user basically need on need to know basis.

298
00:18:47,394 --> 00:18:51,030
Finally, let's look at automated eliminate risk by

299
00:18:51,100 --> 00:18:54,834
applying inherent and inbuilt feature of AWS

300
00:18:54,882 --> 00:18:58,310
IoT device Defender ML detect. Now in this feature you will see

301
00:18:58,380 --> 00:19:02,086
that AWS IoT device Defender ML detect contains policies,

302
00:19:02,198 --> 00:19:05,594
permissions, audit and takes the holistic view and take

303
00:19:05,632 --> 00:19:09,354
all of that into a machine learning model. It takes a machine learning model,

304
00:19:09,472 --> 00:19:12,814
creates the model for you and takes proactive action. It gets

305
00:19:12,852 --> 00:19:16,666
to work for you. So for example, if there's been a compromise, the machine

306
00:19:16,698 --> 00:19:20,350
learning model will notify the user using Amazon Connect or

307
00:19:20,500 --> 00:19:24,014
alexa devices and notify the user using

308
00:19:24,052 --> 00:19:27,758
a mobile app which have through Appsync and whatnot and

309
00:19:27,844 --> 00:19:31,154
take mitigation action for you to notify that okay,

310
00:19:31,192 --> 00:19:34,958
the device been compromised, there has been a violation.

311
00:19:35,054 --> 00:19:38,534
You basically have taken the action and moved the device out

312
00:19:38,572 --> 00:19:42,802
from a normal zone into quarantine zone until you can basically rectify

313
00:19:42,866 --> 00:19:46,822
the situation with that. I'm going to move into a demo.

314
00:19:46,956 --> 00:19:50,370
So this is a demo architecture which I'm going

315
00:19:50,380 --> 00:19:53,658
to show you what we're going to look at. So I'm going to use

316
00:19:53,744 --> 00:19:57,514
AWS IoT, greengrass and AWS Iot device client to show

317
00:19:57,552 --> 00:20:01,566
AWS IoT or IoT things. You can basically use these

318
00:20:01,748 --> 00:20:05,406
open source services, open source software I should

319
00:20:05,428 --> 00:20:08,510
say, to emulate Iot things.

320
00:20:08,660 --> 00:20:11,950
We will look at device policies and permissions

321
00:20:12,370 --> 00:20:15,810
by applying lease privileges and then basically taking this

322
00:20:15,880 --> 00:20:19,074
and looking at the visibility of the violation of this device is

323
00:20:19,112 --> 00:20:23,218
actually creating for example looking at device Defender ML detect or

324
00:20:23,304 --> 00:20:26,958
rule detect for you to know that, to apply the algorithm

325
00:20:27,054 --> 00:20:30,454
to see if there has been any compromise so you can take those

326
00:20:30,492 --> 00:20:33,590
actions. Finally, we will look at security hub,

327
00:20:33,930 --> 00:20:37,158
AWS security hub, which is one of the security services

328
00:20:37,244 --> 00:20:41,298
we have in AWS, where you can look at complete single pane

329
00:20:41,314 --> 00:20:44,982
of glass, whether it's an IoT device, whether it's an asset,

330
00:20:45,046 --> 00:20:49,782
or as a computer connecting to the environment to your whole aws.org.

331
00:20:49,846 --> 00:20:53,566
You can basically see the billions showing up in there, whether it's EC two and

332
00:20:53,588 --> 00:20:57,278
whatnot. So giving you a complete holistic view in a

333
00:20:57,284 --> 00:21:01,114
single pane of glass. So with that, let's switch over to AWS

334
00:21:01,162 --> 00:21:04,740
IoT core or an AWS console to look into this

335
00:21:05,110 --> 00:21:08,818
from AWS Iot console, let's look at connecting to a

336
00:21:08,824 --> 00:21:11,998
device, connecting a device to the environment.

337
00:21:12,174 --> 00:21:14,770
You have can option to go through this as a visit,

338
00:21:16,010 --> 00:21:18,440
creating a new thing, give it a thing name.

339
00:21:30,090 --> 00:21:33,382
The visual will guide you through to set up the SDK

340
00:21:33,446 --> 00:21:36,150
platform. If you need you can set it up for node js, Python,

341
00:21:36,230 --> 00:21:38,934
Java. So just go ahead with Linux and Mac,

342
00:21:39,062 --> 00:21:42,410
download the connection kit and complete

343
00:21:42,480 --> 00:21:46,750
it and

344
00:21:46,900 --> 00:21:50,574
we're done with that. Okay, so we also

345
00:21:50,612 --> 00:21:54,446
have a test client. So this will basically allow us to

346
00:21:54,468 --> 00:21:58,174
look at the data coming in into our cloud environment.

347
00:21:58,302 --> 00:22:01,826
So you can see here, I'm actually using AWS IoT device client to

348
00:22:01,848 --> 00:22:05,022
send some sensory data over here in terms of temperature,

349
00:22:05,086 --> 00:22:08,694
pressure, humidity and data time.

350
00:22:08,812 --> 00:22:13,686
So these devices are backed by our

351
00:22:13,788 --> 00:22:17,240
security certificate. So if I go into security,

352
00:22:18,170 --> 00:22:21,562
if you go into certificate. Each device basically has

353
00:22:21,616 --> 00:22:25,210
a certificate and the certificate ties in with the policy.

354
00:22:25,360 --> 00:22:28,874
So here, if you look at deny all

355
00:22:28,912 --> 00:22:32,734
policy, which means that we are blocking the device in here

356
00:22:32,772 --> 00:22:36,126
and not basically giving any actions or resources to do in terms

357
00:22:36,148 --> 00:22:39,454
of denying action. Right. We also have

358
00:22:39,492 --> 00:22:43,290
something called AwSiot device finder audit feature.

359
00:22:43,450 --> 00:22:47,266
And I usually say to my customers, run schedule can

360
00:22:47,288 --> 00:22:51,138
audit. So for example, if I go ahead and create an audit here,

361
00:22:51,224 --> 00:22:55,026
we basically give you 14 best practices for

362
00:22:55,048 --> 00:22:58,086
you to run audit against. You can run it ad hoc, which is just now,

363
00:22:58,108 --> 00:23:01,750
or you can run it biweekly, weekly, monthly or daily. So I'll just do

364
00:23:01,820 --> 00:23:06,182
once ad hoc one now and

365
00:23:06,316 --> 00:23:09,926
I'll look at the one which I created earlier and we can see what

366
00:23:09,948 --> 00:23:12,460
are the non compliant. So if I go into that one,

367
00:23:13,310 --> 00:23:16,950
we can see that there are some devices basically sharing a certificate,

368
00:23:17,030 --> 00:23:20,870
there is some overly permissive policy, there are role aliases

369
00:23:20,950 --> 00:23:24,398
and so on. So if you basically were to mitigate an action, we will basically

370
00:23:24,484 --> 00:23:27,854
go ahead and run things and start a mitigation action. And this

371
00:23:27,892 --> 00:23:31,358
overly permissive policy will basically get mitigated. And we

372
00:23:31,364 --> 00:23:34,830
can basically run this mitigation action to say go ahead, do this

373
00:23:34,900 --> 00:23:37,838
and apply the reason for it and so on. So it will complete the task

374
00:23:37,854 --> 00:23:41,426
and it will block the policy, making sure that this

375
00:23:41,448 --> 00:23:45,410
is not overly permissive. Right. So let's go into a security

376
00:23:45,480 --> 00:23:48,694
profile, which I mentioned about the machine learning part. So we have two

377
00:23:48,732 --> 00:23:52,994
options here when it comes to machine learning. We have rule based setup

378
00:23:53,042 --> 00:23:56,726
for security profile, which means that if I basically go ahead

379
00:23:56,748 --> 00:24:00,426
and say it needs to connect to all the things or all the devices which

380
00:24:00,448 --> 00:24:04,220
are talking to AWS IoT. So let's say confole two

381
00:24:06,270 --> 00:24:09,546
profile, and I can

382
00:24:09,568 --> 00:24:13,142
select the metrics. So we support cloud side metrics,

383
00:24:13,206 --> 00:24:16,558
device side metrics, and custom metrics. So for example, if you

384
00:24:16,564 --> 00:24:19,518
have devices, if you want to understand the cpu usage and whatnot, you can do

385
00:24:19,524 --> 00:24:22,778
that. It's custom metric. And remember the architecture

386
00:24:22,794 --> 00:24:26,482
diagram I showed you earlier where you had SNS topics, so you can send

387
00:24:26,536 --> 00:24:29,906
sns to the end user. So for now,

388
00:24:29,928 --> 00:24:33,614
I'll just leave that for now. And then the significant

389
00:24:33,662 --> 00:24:36,982
difference between rule based and machine learning

390
00:24:37,036 --> 00:24:40,130
based is here. So, for example, in authorization

391
00:24:40,210 --> 00:24:44,610
failure, you're actually creating an algorithm to say that notify

392
00:24:44,690 --> 00:24:47,890
if this happens absolutely or relatively,

393
00:24:47,970 --> 00:24:51,174
and based on greater than, less than, or equal to, let's say a value of

394
00:24:51,212 --> 00:24:54,838
three in the last five minutes, ten minutes, 1 hour, whatnot.

395
00:24:54,934 --> 00:24:58,570
Right. And you have similarly for disconnect, you have it for message

396
00:24:58,640 --> 00:25:01,974
size, you have it for rest of the other metrics. So I'm going to cancel

397
00:25:02,022 --> 00:25:05,598
this one for now and basically go and show you the difference between this one

398
00:25:05,684 --> 00:25:09,006
and the machine learning based one. So let's look at machine learning based one.

399
00:25:09,028 --> 00:25:12,160
So if I select it for all the things and give it a name,

400
00:25:16,550 --> 00:25:19,698
and let's select all the metrics. And in here,

401
00:25:19,784 --> 00:25:23,806
similarly, just like that, you can set up an NSNS notification. And let's

402
00:25:23,838 --> 00:25:27,214
go into the next section. And in next section you can see there's a start

403
00:25:27,272 --> 00:25:30,680
difference here. We basically just take the data points

404
00:25:31,450 --> 00:25:35,666
for us to trigger the alarm. And when we should basically clear the alarm,

405
00:25:35,778 --> 00:25:38,620
rest of it is basically taken care of by machine learning.

406
00:25:39,630 --> 00:25:43,580
So let's go ahead and complete this one.

407
00:25:44,510 --> 00:25:47,914
So if I create this ML profile, it basically allows you

408
00:25:47,952 --> 00:25:51,446
to basically have this machine learning model created.

409
00:25:51,478 --> 00:25:54,922
So if I go in here and look at the behavior

410
00:25:54,986 --> 00:25:58,730
ML training, so you can see that it's pending built, it's not being created.

411
00:25:58,810 --> 00:26:02,222
So it needs 25,000 data points for it to basically

412
00:26:02,356 --> 00:26:05,486
get triggered and active in. So I usually say to

413
00:26:05,508 --> 00:26:08,626
my customers that once more is getting built, create a

414
00:26:08,648 --> 00:26:11,922
rule based profile for timing until basically this kicks in.

415
00:26:11,976 --> 00:26:15,426
So the moment you basically have 25,000 data points, it will trigger the

416
00:26:15,448 --> 00:26:19,366
action and it'll basically go ahead and start taking actions for you, notifying Iot

417
00:26:19,388 --> 00:26:22,950
for you. Okay. So the other thing I

418
00:26:23,020 --> 00:26:26,662
also wanted to show you is effectively if the device basically

419
00:26:26,716 --> 00:26:29,794
becomes chatty, so we can basically look at alarms.

420
00:26:29,842 --> 00:26:33,126
So we can see, let's say if

421
00:26:33,148 --> 00:26:36,806
I basically look at a historic alarm and see the alarm behaviors

422
00:26:36,838 --> 00:26:40,010
actually has happened in the last 24 hours. So I have been very good.

423
00:26:40,080 --> 00:26:43,230
I've tried to make sure my devices don't compromise any shape or form.

424
00:26:43,300 --> 00:26:47,162
So if I basically look at a previous alarm, if monster

425
00:26:47,226 --> 00:26:50,446
basically loads up. So we can see here DDML six is

426
00:26:50,468 --> 00:26:54,158
a previous alarm. Let's dive into the

427
00:26:54,164 --> 00:26:57,586
profile policy here. So if I go in here and look

428
00:26:57,608 --> 00:27:01,454
at it and see why basically got triggered an alarm.

429
00:27:01,582 --> 00:27:09,278
Right. So let's go into the Iot thing itself and

430
00:27:09,364 --> 00:27:12,720
look at the certificate. Basically it's attached to it.

431
00:27:15,490 --> 00:27:18,878
And within the certificate, let's look at the policies basically using,

432
00:27:18,964 --> 00:27:22,180
which is causing the problem. So let's look at this policy.

433
00:27:23,910 --> 00:27:27,042
So we can see here that there is complete

434
00:27:27,096 --> 00:27:30,866
violation of this policy of zero trust. And we need to

435
00:27:30,888 --> 00:27:34,594
basically make sure that this device basically shouldn't be allowed

436
00:27:34,642 --> 00:27:38,022
all action on IoT resource. Right. You need to basically

437
00:27:38,076 --> 00:27:41,846
lock this down. So we can basically run a

438
00:27:41,868 --> 00:27:45,654
mitigation action on this device by creating a mitigation

439
00:27:45,702 --> 00:27:52,250
action, let's say action.

440
00:27:52,910 --> 00:27:56,234
And basically you have multiple options here. So I'll say add things

441
00:27:56,272 --> 00:28:00,602
to the thing group, and I'll basically use IAM

442
00:28:00,666 --> 00:28:04,606
role, which I created earlier, allowing me to basically carry out

443
00:28:04,628 --> 00:28:08,334
this action. And we can basically use DDML group. This is where

444
00:28:08,372 --> 00:28:11,380
the device basically existed. And if you run this,

445
00:28:13,590 --> 00:28:15,730
and we can basically block the devices.

446
00:28:18,790 --> 00:28:22,290
So let's come over to thing group.

447
00:28:22,440 --> 00:28:25,862
So basically I have something called quarantine group, which is where

448
00:28:25,916 --> 00:28:29,046
I basically make sure all my devices which

449
00:28:29,068 --> 00:28:32,294
are compromised goes into a quarantine group and

450
00:28:32,332 --> 00:28:35,774
it has a policy attached to it to make sure that it has a deny

451
00:28:35,842 --> 00:28:39,260
all. So that means the device is actually isolated, can't do anything.

452
00:28:41,230 --> 00:28:45,098
So now let's look at the final part of the diagram for the demo

453
00:28:45,264 --> 00:28:48,734
where I mentioned having a single pane of glass. So here we

454
00:28:48,772 --> 00:28:52,762
are looking at AWS security hub. So if I go into security hub,

455
00:28:52,906 --> 00:28:55,886
you have options to create integrations to many,

456
00:28:55,908 --> 00:28:59,854
many different services. So in here, if I basically click on

457
00:28:59,892 --> 00:29:02,814
integrations, you have chatbot card Iot, firewall,

458
00:29:02,862 --> 00:29:06,766
detective health. So also AWS Iot device, defender,

459
00:29:06,798 --> 00:29:10,626
audit, detect, Macy and whatnot. Right? So I have some

460
00:29:10,648 --> 00:29:13,794
of them enabled and you can see here, it will show

461
00:29:13,832 --> 00:29:17,730
up AWS. If the button shows up, I stop accept finding.

462
00:29:17,810 --> 00:29:21,206
That means that it's basically accepted finding, just like it says over here,

463
00:29:21,228 --> 00:29:24,790
as a status. Right. So if I basically go into findings,

464
00:29:25,290 --> 00:29:28,746
this is where we'll get a single pane of glass of everything which

465
00:29:28,768 --> 00:29:31,994
is happening within the AWS account,

466
00:29:32,112 --> 00:29:35,946
whether it's EC two, whether it's s three, whether it's Iot. So we

467
00:29:35,968 --> 00:29:40,160
can see here we have an EC two environment security group.

468
00:29:40,610 --> 00:29:44,378
We also have IoT devices

469
00:29:44,474 --> 00:29:47,594
which are basically writing to security bucket and whatnot.

470
00:29:47,722 --> 00:29:51,278
So you can basically look at all of these in a single pane of glass

471
00:29:51,374 --> 00:29:54,930
to have a single security view for you to

472
00:29:55,000 --> 00:29:58,146
notify if there's any situations been happening and to

473
00:29:58,168 --> 00:30:01,750
basically take actions on that. So with that,

474
00:30:01,820 --> 00:30:06,390
let's switch over back to our presentation.

475
00:30:07,930 --> 00:30:10,760
And within the presentation, we can see here,

476
00:30:12,090 --> 00:30:16,154
we just completed that, the demo. Now, I wanted

477
00:30:16,192 --> 00:30:20,154
to share some of the links with you. On the right

478
00:30:20,192 --> 00:30:23,626
hand side, you will see a YouTube channel. So as

479
00:30:23,648 --> 00:30:27,346
part of AWS IoT devices developer

480
00:30:27,398 --> 00:30:30,670
advocate team, within AWS IoT service team, we have our

481
00:30:30,820 --> 00:30:34,062
AWS channel, where we basically

482
00:30:34,196 --> 00:30:37,598
occasionally and routinely publish videos. So it will

483
00:30:37,604 --> 00:30:40,686
be good for you to subscribe and you also have devtool space for you

484
00:30:40,708 --> 00:30:43,940
to basically look at any microblogging which we do

485
00:30:45,110 --> 00:30:48,446
on the left hand side. The right hand side is a QR

486
00:30:48,478 --> 00:30:51,506
and the left hand side is a workshop, links and some other links. So there

487
00:30:51,528 --> 00:30:54,822
are three distinctive workshops which I wanted

488
00:30:54,876 --> 00:30:59,638
to mention. First one is get started with the awsiot.com

489
00:30:59,724 --> 00:31:03,254
is where you can basically get started and learn about how

490
00:31:03,292 --> 00:31:07,350
to basically connect devices to the cloud, how you basically can leverage

491
00:31:07,510 --> 00:31:10,598
and set up IoT. If you want to learn IoT,

492
00:31:10,774 --> 00:31:14,902
then we have security focused workshop, AWS Iot.

493
00:31:14,966 --> 00:31:18,506
Zerotrustworkshop.com. It is completely designed

494
00:31:18,538 --> 00:31:22,078
from ground up to be focused on zero trust.

495
00:31:22,244 --> 00:31:25,466
And then finally we have Greengrass Workshop, which I mentioned earlier,

496
00:31:25,578 --> 00:31:30,074
our feature, our open source software,

497
00:31:30,122 --> 00:31:33,614
greengrass, which runs on edge. And you can also look at

498
00:31:33,652 --> 00:31:37,406
the source code for these open source projects, which we have, which is

499
00:31:37,428 --> 00:31:41,082
AWS IoT device client and AWS IoT

500
00:31:41,146 --> 00:31:45,346
green grass. Both of these are used within these workshops.

501
00:31:45,538 --> 00:31:49,074
Finally, thank you very much from me for listening

502
00:31:49,122 --> 00:31:51,910
to me and AWS. I mentioned earlier,

503
00:31:52,650 --> 00:31:56,422
if you want to connect with me on LinkedIn, these are my QR code for

504
00:31:56,476 --> 00:32:00,102
Twitter as well. I'm always happy to help to anyone who's basically

505
00:32:00,156 --> 00:32:03,794
looking to seek information or have any blockers where I can unblock

506
00:32:03,842 --> 00:32:06,020
them. Thank you very much. Have a great day.

