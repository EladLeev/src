1
00:00:25,410 --> 00:00:30,920
Our name.

2
00:01:53,990 --> 00:01:57,826
Hello everyone, thank you for joining me today to

3
00:01:57,848 --> 00:02:01,266
my talk about kics. Kics up your security

4
00:02:01,368 --> 00:02:04,450
app notch with custom query.

5
00:02:05,590 --> 00:02:09,186
So I want to first say that I really

6
00:02:09,288 --> 00:02:12,686
admire us as DevOps. And I tell why, because we've

7
00:02:12,718 --> 00:02:16,878
taken our shoulders all the things that developers

8
00:02:16,974 --> 00:02:20,762
hate to do, right? Developers hate to do operation and we

9
00:02:20,816 --> 00:02:24,250
took that on our shoulder. And lately it's not

10
00:02:24,320 --> 00:02:27,162
only operation, it's also security,

11
00:02:27,296 --> 00:02:30,594
observability, githubs, ML ops,

12
00:02:30,662 --> 00:02:34,250
all this operation stuff became on our shoulders.

13
00:02:34,410 --> 00:02:37,774
And now I know that developers usually do not understand

14
00:02:37,892 --> 00:02:42,822
how do we agree to took all those operation responsibilities.

15
00:02:42,986 --> 00:02:46,194
But we know the trick, right? So what we do to make

16
00:02:46,232 --> 00:02:49,474
this operation easy, we automate everything,

17
00:02:49,592 --> 00:02:53,198
right? This is the key to have DevOps efficiency,

18
00:02:53,374 --> 00:02:57,430
to do automations, right? This is the way DevOps started.

19
00:02:57,500 --> 00:03:01,074
This is why it's called DevOps, because we started to do the manual

20
00:03:01,122 --> 00:03:04,722
operation deploying the server. I remember that I manually

21
00:03:04,866 --> 00:03:08,942
used upload files to an FTP server

22
00:03:09,106 --> 00:03:12,234
and then people automate that. You remember the tools like

23
00:03:12,272 --> 00:03:16,246
chef and puppet, et cetera. And then when everything became complex,

24
00:03:16,358 --> 00:03:19,642
we add also another layer on top of

25
00:03:19,696 --> 00:03:22,922
it. This layer is infrastructure as code,

26
00:03:22,976 --> 00:03:27,034
right? So a couple of years ago, after we do have a lot of scripts

27
00:03:27,082 --> 00:03:30,734
that does everything and script that rules script, we started to

28
00:03:30,772 --> 00:03:34,242
say, hey, maybe we can write those infrastructure as

29
00:03:34,296 --> 00:03:37,822
code. So we started to describe infrastructure

30
00:03:37,886 --> 00:03:40,366
like resources, machines, APIs,

31
00:03:40,478 --> 00:03:44,114
connections, policies, everything configured as

32
00:03:44,152 --> 00:03:47,570
code. And that makes our life easier

33
00:03:47,650 --> 00:03:51,778
and make our job much, much exclusive to developers,

34
00:03:51,874 --> 00:03:55,814
right? Anyway, we do that layer, but you

35
00:03:55,852 --> 00:03:59,198
know, Mark Knappler, telegraph road, then come the laws,

36
00:03:59,234 --> 00:04:02,938
then come the lawyers, then come the schools, and then came all

37
00:04:03,024 --> 00:04:06,246
the mess on top of that. So this infrastructure

38
00:04:06,278 --> 00:04:09,818
as code layer became complex too. So we create

39
00:04:09,904 --> 00:04:13,198
another layer. Now we have tools that

40
00:04:13,284 --> 00:04:16,526
automate what we do on infrastructure as code,

41
00:04:16,628 --> 00:04:19,950
that automate what we used to do with script, right?

42
00:04:20,020 --> 00:04:23,262
This is a new layer that we see now, many, many tools that

43
00:04:23,316 --> 00:04:26,722
take care for infrastructure as code and do some

44
00:04:26,776 --> 00:04:30,738
operations, automate operations on top of it. And now if you

45
00:04:30,744 --> 00:04:34,370
don't mind, let's think what will happen in two years from now.

46
00:04:34,440 --> 00:04:37,134
We will have another layer, and then another layer.

47
00:04:37,182 --> 00:04:40,950
And this slide in the world that we have today,

48
00:04:41,100 --> 00:04:44,374
this slide in couple of years from today will have n

49
00:04:44,412 --> 00:04:48,502
layers as the number of the complexity we will add to our system.

50
00:04:48,636 --> 00:04:52,666
And that's a big problem. And my name is Gabriel and today

51
00:04:52,768 --> 00:04:56,394
I'm going to talk about one of my methods. There are many

52
00:04:56,432 --> 00:04:59,814
methods how to deal with this layer, model, to orchestrate

53
00:04:59,862 --> 00:05:03,702
stuff and making it less complex even. We automate

54
00:05:03,766 --> 00:05:07,114
everything, all the complex system. Today I'm going to show

55
00:05:07,152 --> 00:05:11,146
you one of my favorite methods to make those

56
00:05:11,248 --> 00:05:14,626
easier. But I will not do it alone. I want you

57
00:05:14,648 --> 00:05:18,866
to welcome our guest to our talk. Today we

58
00:05:18,888 --> 00:05:22,578
have a very special guest. This guest is born in Guatemala. He became a

59
00:05:22,584 --> 00:05:25,826
very big businessman there. Guy there. And then he

60
00:05:25,848 --> 00:05:29,730
moved to Mexico. In Mexico, he opened some businesses,

61
00:05:29,890 --> 00:05:33,462
but the security and all the operations became very

62
00:05:33,516 --> 00:05:37,074
complex because Mexico, you know, there are trouble there. So he decided

63
00:05:37,122 --> 00:05:41,186
to move to the country where everything worked smoothly. He moved to America,

64
00:05:41,218 --> 00:05:44,620
to the US. And then he find that

65
00:05:44,990 --> 00:05:48,634
not always things in America works like

66
00:05:48,672 --> 00:05:51,946
in America. Let's welcome gas. Freeing a

67
00:05:51,968 --> 00:05:55,638
good businesswoman with two main business, Los Puerto

68
00:05:55,654 --> 00:05:59,534
C? Romanos and La Vendrea brilliante, but also some

69
00:05:59,652 --> 00:06:02,906
business that we don't want to know about. And let's

70
00:06:02,938 --> 00:06:06,274
see how he went to infrastructure as code.

71
00:06:06,312 --> 00:06:09,746
So, as we said, he get to America. He started his businesses, but then

72
00:06:09,768 --> 00:06:13,122
he find that he need protocols, right? He have a very

73
00:06:13,176 --> 00:06:17,486
complex business model. He do things below the table

74
00:06:17,598 --> 00:06:21,254
and above the table. And he needs time to hide stuff and

75
00:06:21,292 --> 00:06:25,334
sometimes to show stuff. And he wants to see that outside

76
00:06:25,452 --> 00:06:29,926
everything will look great. But inside sometime became dirty.

77
00:06:30,038 --> 00:06:33,274
And this is why he came in love with infrastructure as

78
00:06:33,312 --> 00:06:37,434
code. Why? Because infrastructure as code get you control on the

79
00:06:37,472 --> 00:06:41,442
continuous operation process. If you just have scripts,

80
00:06:41,526 --> 00:06:44,686
if there is something new, some resource, some protocol that

81
00:06:44,708 --> 00:06:48,094
you need to create, nothing documented that. And this is

82
00:06:48,132 --> 00:06:51,902
the point. Gas. And we love infrastructure as code

83
00:06:52,036 --> 00:06:55,582
because we can have all our protocol in one repository,

84
00:06:55,726 --> 00:06:59,060
right? And this is how gas actually

85
00:06:59,430 --> 00:07:03,282
built his business to do everything as code.

86
00:07:03,336 --> 00:07:06,978
The code started in the terraform that define

87
00:07:07,074 --> 00:07:10,470
everything happened. Every store has a terraform resource.

88
00:07:11,450 --> 00:07:15,254
Every bucket that get into that store is a resource in his

89
00:07:15,292 --> 00:07:19,274
terraform. All the API, all the connection between the businesses now

90
00:07:19,312 --> 00:07:22,774
documented as code in open API files.

91
00:07:22,822 --> 00:07:26,218
And then the containers, all the containers shipped on

92
00:07:26,304 --> 00:07:29,926
trucks is on Docker. And this orchestration and drivers

93
00:07:29,958 --> 00:07:33,914
use kubernetes. And also even it does some serverless framework

94
00:07:34,042 --> 00:07:37,854
for all the small stuff in the middle. Now Gus has a

95
00:07:37,892 --> 00:07:42,042
very nice repository with all his infrastructure

96
00:07:42,186 --> 00:07:45,626
documented and protocol. That's code we can find. Gus,

97
00:07:45,738 --> 00:07:49,826
look at the evening at this repo and smile to itself to see how

98
00:07:49,928 --> 00:07:53,646
he got his businesses to do everything work efficiently.

99
00:07:53,758 --> 00:07:57,782
And he can inspect everything. But that happiness didn't keep

100
00:07:57,836 --> 00:08:01,174
longer. Someday an unattended guest came

101
00:08:01,212 --> 00:08:05,206
into one of his businesses and treat the customers and the

102
00:08:05,228 --> 00:08:09,238
team there. And that was a very, very bad event.

103
00:08:09,404 --> 00:08:13,686
And Gus of course after that tried to relax the employees.

104
00:08:13,798 --> 00:08:17,014
But then he got that something got wrong with the infrastructure

105
00:08:17,062 --> 00:08:20,954
as code. He got to his repo and ask himself, how do

106
00:08:20,992 --> 00:08:24,302
I configure infrastructure that could

107
00:08:24,356 --> 00:08:28,334
make this stuff happen? And he looked at the code again and again and

108
00:08:28,372 --> 00:08:32,362
tried to look at Google. And then he find a very small asterisks.

109
00:08:32,426 --> 00:08:35,886
You can see here in line seven. Okay, the actions, you see the

110
00:08:35,908 --> 00:08:39,186
asterisks that said all the actions permitted in

111
00:08:39,208 --> 00:08:43,198
this resource, but that's supposed to be prohibited.

112
00:08:43,374 --> 00:08:47,222
And then Gas asks himself, how could I know that

113
00:08:47,276 --> 00:08:50,710
all those nice stuff that I'm adding as

114
00:08:50,780 --> 00:08:54,102
code and protocol is something that I know

115
00:08:54,156 --> 00:08:57,982
about. And gas as you know has domain expertise.

116
00:08:58,066 --> 00:09:01,706
But sometime this protocol came from outside. And now

117
00:09:01,808 --> 00:09:05,290
gas came to a question that every developers engineer

118
00:09:05,790 --> 00:09:09,110
asked himself, especially in developers term.

119
00:09:09,270 --> 00:09:13,020
How could I know that all my infrastructure as code

120
00:09:13,890 --> 00:09:17,438
do what it aims to do? And gas says look at the

121
00:09:17,444 --> 00:09:20,730
Internet and find a tool called Kix. Kix is a very popular

122
00:09:20,810 --> 00:09:24,786
open source tool. There's some alternative but we will focus on Kix today.

123
00:09:24,968 --> 00:09:28,274
And Kix is actually checking your infrastructure as

124
00:09:28,312 --> 00:09:32,242
code for misconfiguration. It check if there is security problem.

125
00:09:32,376 --> 00:09:35,746
It check if there is any misconfiguration

126
00:09:35,778 --> 00:09:38,918
that can lead you to trouble. Kix actually used

127
00:09:39,004 --> 00:09:42,358
to find what happened to gas. If someone

128
00:09:42,444 --> 00:09:45,958
has this terraform file, Kix will tell you

129
00:09:46,044 --> 00:09:49,766
this is a misconfiguration. You should never put wildcard in the

130
00:09:49,788 --> 00:09:53,162
actions portion. You should put something else right.

131
00:09:53,216 --> 00:09:56,554
So gas started to use Kix. Kix is actually very

132
00:09:56,592 --> 00:10:00,282
easy to use. You can edit as a GitHub action, you can run it

133
00:10:00,336 --> 00:10:03,674
locally, you can run it on every circle CI or CI

134
00:10:03,722 --> 00:10:07,694
system. Just a simple docker image and one

135
00:10:07,732 --> 00:10:11,354
command that you run and it gives you everything happen in your repository.

136
00:10:11,402 --> 00:10:15,866
But not only that, Kics actually has 1600,

137
00:10:15,988 --> 00:10:20,002
more than 1600 misconfiguration and security test

138
00:10:20,136 --> 00:10:23,634
on all the tools that listed here. So you can check

139
00:10:23,672 --> 00:10:27,614
your ansible code, you can check flag cloud formation and azure resource

140
00:10:27,662 --> 00:10:30,994
manager, you can check your Kubernetes config

141
00:10:31,042 --> 00:10:34,598
file, you can check APIs, you can check terraform, terraform can do everything,

142
00:10:34,684 --> 00:10:38,326
which is a very good check in Kix, that it can check all

143
00:10:38,348 --> 00:10:41,498
your terraform for misconfiguration. And actually

144
00:10:41,584 --> 00:10:45,114
gas was really happy. And why

145
00:10:45,152 --> 00:10:48,394
he was that happy because even in the first time that he

146
00:10:48,432 --> 00:10:52,790
ran cakes. And I promise you that if you didn't run any misconfiguration

147
00:10:52,870 --> 00:10:56,222
tool yet when you will run it, you will find some

148
00:10:56,276 --> 00:10:59,614
findings, so gas finds some finding. And then he understood that this

149
00:10:59,652 --> 00:11:03,054
tool will work for him. So he started to use

150
00:11:03,092 --> 00:11:06,386
Kix, put it in a continuous way for every

151
00:11:06,488 --> 00:11:10,302
new commit came to the infrastructure as code repository.

152
00:11:10,446 --> 00:11:13,554
He used to run Kics and find if there are

153
00:11:13,592 --> 00:11:17,394
any misconfiguration problem there. But this

154
00:11:17,432 --> 00:11:20,546
happiness did not continue longer. Why? One of the checks

155
00:11:20,578 --> 00:11:23,510
on kics, called privilege escalation allowed.

156
00:11:24,010 --> 00:11:27,718
This check actually verify that you don't

157
00:11:27,734 --> 00:11:31,626
have containers in Kubernetes clusters that run

158
00:11:31,728 --> 00:11:35,498
with privilege escalation allowed. Which means

159
00:11:35,664 --> 00:11:39,558
you should always have some privilege

160
00:11:39,734 --> 00:11:43,722
permission on your container. But for gas that wasn't

161
00:11:43,786 --> 00:11:47,134
good, because some of the containers got

162
00:11:47,172 --> 00:11:49,710
to trouble. And when it got to trouble,

163
00:11:50,050 --> 00:11:54,062
gas don't want to know what happened there.

164
00:11:54,196 --> 00:11:57,890
He wants to have custom rules that say

165
00:11:58,040 --> 00:12:01,554
if something, then something. So what is

166
00:12:01,592 --> 00:12:05,250
the first thing to do, right. So you find like one

167
00:12:05,320 --> 00:12:09,338
finding that have severity high, but you don't

168
00:12:09,374 --> 00:12:12,534
need it in your organization. So right, gas is a very good

169
00:12:12,572 --> 00:12:15,794
thing for that, it just can exclude that. We know that gas,

170
00:12:15,842 --> 00:12:19,034
when he don't like something, he excludes it from the

171
00:12:19,072 --> 00:12:22,854
system. This is exactly the same what Gaz

172
00:12:22,982 --> 00:12:26,938
does with this particular

173
00:12:27,104 --> 00:12:31,126
query. But then gas understands

174
00:12:31,238 --> 00:12:34,770
that he should not always exclude it. He regrets

175
00:12:34,790 --> 00:12:38,480
on the way that he excludes totally the way of

176
00:12:38,850 --> 00:12:42,398
this query, this test from

177
00:12:42,564 --> 00:12:46,354
his kics run. And he needs to find a way now not

178
00:12:46,392 --> 00:12:49,794
only to exclude that, but maybe create it,

179
00:12:49,832 --> 00:12:53,234
maybe modify it a bit. So the

180
00:12:53,272 --> 00:12:56,334
test will check for privilege escalation,

181
00:12:56,462 --> 00:13:00,326
but only in particular cases. And right, this is something that can happen in your

182
00:13:00,348 --> 00:13:03,622
organization. You started to run Kix, you started to run

183
00:13:03,676 --> 00:13:07,362
some automation tools, and then you find that one of the finding,

184
00:13:07,426 --> 00:13:10,906
one of the test, one of the checks is something that you want to

185
00:13:10,928 --> 00:13:15,062
run, but not always, or you want to run, but you want to customize

186
00:13:15,126 --> 00:13:18,422
that. So let's see how you can customize your kix

187
00:13:18,486 --> 00:13:22,858
queries. So let's take a bit a

188
00:13:22,864 --> 00:13:26,286
broader view on Kix, how it works. So Kix is based in a

189
00:13:26,308 --> 00:13:29,982
very powerful framework called open policy agent. What is open

190
00:13:30,036 --> 00:13:33,554
policy agent? I'm pretty sure some of you already familiar with that.

191
00:13:33,672 --> 00:13:37,294
Open policy agent is a project funded and maintained

192
00:13:37,342 --> 00:13:40,734
by the Cloud Native foundation and Linux foundation.

193
00:13:40,862 --> 00:13:44,498
And it's actually a way to define policy as code.

194
00:13:44,584 --> 00:13:48,150
What does that mean? So think about code. Code is actually

195
00:13:48,300 --> 00:13:51,734
something, in the end static. It's something that computer

196
00:13:51,852 --> 00:13:55,286
understand. And when you translate code, it usually

197
00:13:55,388 --> 00:13:58,466
can translate it, especially infrastructure as code can

198
00:13:58,508 --> 00:14:02,054
translate it into some tree three mean JSon,

199
00:14:02,102 --> 00:14:06,502
right? Json, you must know Json. JSON is always a tree structure

200
00:14:06,646 --> 00:14:09,754
and then you can define a policy that check

201
00:14:09,792 --> 00:14:13,722
if this tree structure is standing

202
00:14:13,786 --> 00:14:17,182
in the condition that you define in the policy, right.

203
00:14:17,236 --> 00:14:20,986
And open policy agent is actually work on many many endpoints

204
00:14:21,018 --> 00:14:25,140
of your product lifecycle. KICs actually takes

205
00:14:25,510 --> 00:14:29,602
queries that written in open policy agent and we will soon see

206
00:14:29,656 --> 00:14:33,246
how you can write your own query, your own policy rules

207
00:14:33,278 --> 00:14:37,554
in open policy agent and implement it on your infrastructure

208
00:14:37,602 --> 00:14:41,254
as code. So how actually open policy agent

209
00:14:41,372 --> 00:14:44,834
define a policy. So OPA, I'll call it opower.

210
00:14:44,882 --> 00:14:49,250
OPA from now has a query or policy

211
00:14:49,340 --> 00:14:53,386
language that's called rigo. And this is a very simple policy

212
00:14:53,488 --> 00:14:57,226
that you can define. So first in line one you define the

213
00:14:57,248 --> 00:15:01,290
package, the package called play every policy agent, every policy

214
00:15:01,440 --> 00:15:04,702
must have be part of a package. And then you can

215
00:15:04,756 --> 00:15:08,494
import some tools. These tools will help you to ask the

216
00:15:08,532 --> 00:15:11,502
right question about what you define right now.

217
00:15:11,556 --> 00:15:14,494
And then we say hello equal to base.

218
00:15:14,622 --> 00:15:18,830
Now this policy agent, this policy rule, this policy rigo

219
00:15:18,910 --> 00:15:21,890
will have input. Input is what we want to check.

220
00:15:21,960 --> 00:15:25,682
Input can be API call. Input can be infrastructure

221
00:15:25,746 --> 00:15:29,510
as code. Input can be Kubernetes data,

222
00:15:29,660 --> 00:15:33,142
whatever it is. The input message equals world

223
00:15:33,276 --> 00:15:37,302
will do hello to true. And then we can check if

224
00:15:37,356 --> 00:15:41,114
this hello equal world. We can

225
00:15:41,152 --> 00:15:45,030
say that true and say the policy fail,

226
00:15:45,190 --> 00:15:48,810
all the policy succeed. This language can of course be

227
00:15:48,880 --> 00:15:52,794
very rich. And this is the way every query in kics

228
00:15:52,842 --> 00:15:57,162
work. Let's look on a real time, right? So every query

229
00:15:57,226 --> 00:16:00,542
on kix has two building blocks. The first one

230
00:16:00,596 --> 00:16:04,194
is the metadata. This is actually the simplest one. So think about

231
00:16:04,232 --> 00:16:08,942
it like the description of the particular KICS

232
00:16:09,006 --> 00:16:12,050
test. So we already talk about the KICS test.

233
00:16:12,120 --> 00:16:15,694
Call privilege escalation allowed, right? This is the one I opened

234
00:16:15,742 --> 00:16:19,606
here and we here declare here a json that

235
00:16:19,708 --> 00:16:23,382
say what is here in this query. We'll go

236
00:16:23,436 --> 00:16:26,882
later further to see every part of this json.

237
00:16:26,946 --> 00:16:30,070
What does that mean? But let's say in short

238
00:16:30,140 --> 00:16:34,074
now we need a query name, we need the severity and we

239
00:16:34,112 --> 00:16:37,530
also need an id. We'll see later how we generate all that.

240
00:16:37,600 --> 00:16:41,194
We can have also description URL so the finding will have some

241
00:16:41,232 --> 00:16:44,702
details. So we created the first one. Kix created actually

242
00:16:44,756 --> 00:16:48,942
the first one. And then we have the rigo. As we said, every kics text

243
00:16:49,076 --> 00:16:52,510
is actually Rigo query rigo policy.

244
00:16:52,660 --> 00:16:55,890
So let's see how Rigo policy looks like. For example,

245
00:16:55,960 --> 00:16:59,922
for the privilege escalation allowed. So let's dive into

246
00:16:59,976 --> 00:17:03,662
this one, as I said, we have a package, we're importing

247
00:17:03,726 --> 00:17:07,382
some tools and we'll go to those tools later. And then we have

248
00:17:07,436 --> 00:17:10,726
policy. Every policy check only one thing in

249
00:17:10,748 --> 00:17:14,114
the infrastructure as code file. It started with the document

250
00:17:14,242 --> 00:17:17,426
here we know it's Kubernetes. This document will be yaml

251
00:17:17,458 --> 00:17:21,014
that defines kubernetes. Then we can take the metadata,

252
00:17:21,142 --> 00:17:24,714
check the spec for the container, check if

253
00:17:24,752 --> 00:17:28,902
there are containers and then check for each container.

254
00:17:28,966 --> 00:17:33,034
If allow privilege escalation is true, if allow privilege

255
00:17:33,082 --> 00:17:36,894
escalation is true, we want to return the

256
00:17:36,932 --> 00:17:40,522
result. So remember, if allow privilege escalation

257
00:17:40,586 --> 00:17:44,434
was false, we didn't have the result. And that's a nice way to see

258
00:17:44,472 --> 00:17:48,594
how query in Rigo in open policy agent work.

259
00:17:48,712 --> 00:17:52,350
So if we return the result, we know that the policy failed.

260
00:17:52,430 --> 00:17:56,002
If we not return the result because the code did not reach this

261
00:17:56,056 --> 00:18:00,294
way, we know the policy passed. So when kics run

262
00:18:00,412 --> 00:18:04,582
it actually go all over your kubernetes file, run this

263
00:18:04,636 --> 00:18:08,694
portion of policy and if allow privilege escalation

264
00:18:08,742 --> 00:18:12,074
is true, we will return this one. Now let's back

265
00:18:12,112 --> 00:18:15,974
to the example that we did have in gas, right? So gas

266
00:18:16,022 --> 00:18:19,386
want only particular cases to run

267
00:18:19,488 --> 00:18:23,386
the privilege escalation policy. So we modify the policy

268
00:18:23,488 --> 00:18:27,514
to say gas. Know that container

269
00:18:27,562 --> 00:18:31,822
that started with the name Regalo shouldn't allow

270
00:18:31,956 --> 00:18:36,126
privilege escalation because this is like a kamikaza

271
00:18:36,158 --> 00:18:39,666
container. If something happened to them, you should burn all the

272
00:18:39,688 --> 00:18:42,974
truck. So he said, if the container

273
00:18:43,022 --> 00:18:46,438
name starts with Regalo, only in this case

274
00:18:46,604 --> 00:18:50,422
get into the failure of the policy.

275
00:18:50,556 --> 00:18:54,294
And that's a nice thing how we can customize and we can take

276
00:18:54,332 --> 00:18:57,586
it to ourselves. Let's say for example, we want

277
00:18:57,628 --> 00:19:00,374
to limit something on s three buckets,

278
00:19:00,502 --> 00:19:04,138
but we do want particular buckets to have public

279
00:19:04,304 --> 00:19:08,474
or this exactly example that we want for example

280
00:19:08,672 --> 00:19:11,902
some model of escalations or some model

281
00:19:11,956 --> 00:19:15,722
of privilege on particular sets of container

282
00:19:15,786 --> 00:19:19,550
we can set on our organization that only containers that started

283
00:19:19,700 --> 00:19:23,586
their name in some particular name will get a

284
00:19:23,608 --> 00:19:26,900
bit different policy requirement on that,

285
00:19:27,270 --> 00:19:31,630
right? So now we copied the original query

286
00:19:31,710 --> 00:19:35,774
from kix repository, as I show you is on GitHub

287
00:19:35,902 --> 00:19:39,298
and we are mounted in a local folder.

288
00:19:39,394 --> 00:19:44,054
And when we run kicks instead of run kicks without anything,

289
00:19:44,252 --> 00:19:48,458
only with our code. As you can see here in the latest second

290
00:19:48,544 --> 00:19:52,486
mount we have the test code. In the first row

291
00:19:52,598 --> 00:19:57,862
we are mounting actually the custom query

292
00:19:58,006 --> 00:20:01,258
into the original query in the

293
00:20:01,344 --> 00:20:04,942
kics container. If we will run kics this way,

294
00:20:04,996 --> 00:20:09,482
it will take the query from our local customized

295
00:20:09,546 --> 00:20:13,054
query and then everything will work smoothly, right?

296
00:20:13,172 --> 00:20:16,754
Only if container name starts with Regalo we'll get the

297
00:20:16,792 --> 00:20:20,306
finding. But for all other container we'll not get the

298
00:20:20,328 --> 00:20:23,330
relevant finding. I'll show you later how to do this.

299
00:20:23,400 --> 00:20:26,766
Mounting more efficient for all your custom queries.

300
00:20:26,878 --> 00:20:30,246
But this is the way it works. So now we

301
00:20:30,268 --> 00:20:34,166
have gas happy, right? So he can now look at their queries and

302
00:20:34,188 --> 00:20:38,214
if something fail which are not supposed to fail, he can exclude

303
00:20:38,262 --> 00:20:42,394
that and he can also customize that. But then

304
00:20:42,592 --> 00:20:45,930
some security incident happened again and gas also

305
00:20:46,000 --> 00:20:49,802
expand his businesses. He decides to not only trust things that

306
00:20:49,856 --> 00:20:52,986
happened in Mexico and also do stuff inside.

307
00:20:53,168 --> 00:20:55,854
So he gets to his business.

308
00:20:55,972 --> 00:20:59,434
One of the biggest name in the security industry

309
00:20:59,482 --> 00:21:03,462
in America. This is let's welcome Mike Armantrout.

310
00:21:03,546 --> 00:21:06,674
Now Mike came into the business, right?

311
00:21:06,872 --> 00:21:10,594
And Mike have some very, very specific

312
00:21:10,712 --> 00:21:14,098
requests. One of them was that anything happened

313
00:21:14,184 --> 00:21:18,402
between the businesses will be under his inspection.

314
00:21:18,466 --> 00:21:22,134
Think about it like you have an API and all

315
00:21:22,172 --> 00:21:25,746
your API should have some header. This header

316
00:21:25,778 --> 00:21:29,478
is not something that Kix will check, but you want to verify

317
00:21:29,654 --> 00:21:33,174
that every developer that deliver

318
00:21:33,302 --> 00:21:37,082
open API configuration to your code base has

319
00:21:37,216 --> 00:21:40,814
this header configured there. So we need now

320
00:21:40,852 --> 00:21:44,622
to create new query. Now kics don't know

321
00:21:44,756 --> 00:21:48,570
what happened in our internal API configuration.

322
00:21:48,730 --> 00:21:52,298
And when we need to think about queries on kics,

323
00:21:52,394 --> 00:21:55,806
we need to think on every particular case. Now think about

324
00:21:55,828 --> 00:21:59,294
it like a unit test. When you write unitest, when you do TDD,

325
00:21:59,422 --> 00:22:02,962
you are thinking on every corner case that your test

326
00:22:03,016 --> 00:22:06,530
can fail. And this is the same way you should think. But custom

327
00:22:06,600 --> 00:22:10,262
queries that we are going to create in kics, we are not going to create

328
00:22:10,316 --> 00:22:14,566
every edge case. But this is something that important to remember for later.

329
00:22:14,748 --> 00:22:19,158
So what we need to do, what we need, our basic request

330
00:22:19,254 --> 00:22:22,794
is very base is very small. So we

331
00:22:22,832 --> 00:22:26,774
want every path, every endpoint in our API

332
00:22:26,902 --> 00:22:31,014
has this header called route inspection. Now let's

333
00:22:31,062 --> 00:22:34,526
think about it as a query. Okay. We need to check there

334
00:22:34,548 --> 00:22:37,966
is header portion for every API we need

335
00:22:37,988 --> 00:22:41,546
to check one of those header is ermine route inspection.

336
00:22:41,658 --> 00:22:44,794
We need to check this ermine route inspection as the right

337
00:22:44,852 --> 00:22:47,906
schema and this is not number right. So I can

338
00:22:47,928 --> 00:22:51,218
count lot of things we need to check. We will need to write

339
00:22:51,384 --> 00:22:54,942
just a query, one query but with

340
00:22:55,016 --> 00:22:58,920
lot of policy portions. With lot of policy

341
00:23:00,250 --> 00:23:03,714
policies configured inside this query.

342
00:23:03,842 --> 00:23:08,134
In order to make sure every API endpoint came with

343
00:23:08,252 --> 00:23:12,070
airman's route inspection portion header,

344
00:23:12,150 --> 00:23:15,450
right. So how we can do that. So first thing, kics came

345
00:23:15,520 --> 00:23:19,562
to help with us. If you will clone kix repositories or just

346
00:23:19,616 --> 00:23:23,414
get into kics. On GitHub you'll find a folder

347
00:23:23,462 --> 00:23:26,954
called template query, right? What is template query

348
00:23:27,002 --> 00:23:30,782
is actually an empty query that

349
00:23:30,836 --> 00:23:34,674
you have and you can write your

350
00:23:34,712 --> 00:23:38,734
metadata, your rigo based on that. But this template

351
00:23:38,782 --> 00:23:41,954
has another thing which is important for you.

352
00:23:41,992 --> 00:23:45,794
If you want to create a new query, it has test folder.

353
00:23:45,842 --> 00:23:49,282
This test folder should include all the test cases.

354
00:23:49,346 --> 00:23:52,898
You need to verify that your rules

355
00:23:52,994 --> 00:23:56,502
works well. Okay let's look for example on the very

356
00:23:56,556 --> 00:24:00,058
basic difference between positive and negative. So in

357
00:24:00,064 --> 00:24:03,974
the left side we have positive the positive missing

358
00:24:04,022 --> 00:24:07,814
the header, right we have here the path slash

359
00:24:07,942 --> 00:24:11,718
which is get method and we don't find any header on it.

360
00:24:11,744 --> 00:24:15,178
But in the right side we find the parameter has header.

361
00:24:15,274 --> 00:24:18,638
So now we know we have test base. The first test case

362
00:24:18,724 --> 00:24:22,446
should not expose the finding and the

363
00:24:22,468 --> 00:24:25,762
second should show us a finding. So this is point to start.

364
00:24:25,816 --> 00:24:29,518
Of course our case has some more positive and negative

365
00:24:29,694 --> 00:24:32,738
flows but we need to start with something,

366
00:24:32,904 --> 00:24:36,058
right? Then we need to define our metadata

367
00:24:36,094 --> 00:24:39,702
JSoN. Now this metadata JSON has some

368
00:24:39,836 --> 00:24:43,414
thing we need to declare. We must to declare all those things.

369
00:24:43,532 --> 00:24:47,570
Query name which is the name of this query. The severity

370
00:24:47,650 --> 00:24:51,194
can be high, medium and info the category of that

371
00:24:51,232 --> 00:24:54,950
which is access control. There are a list of categories can be found on kix

372
00:24:55,030 --> 00:24:58,682
repository description text which is the text that

373
00:24:58,736 --> 00:25:02,186
describe what this finding do. Which is very important because when

374
00:25:02,208 --> 00:25:05,946
people run it you want to be informative to know what they need to solve.

375
00:25:06,058 --> 00:25:09,502
Description Id and Id. Now that's interesting because you need to use

376
00:25:09,556 --> 00:25:12,574
some kix CLI to generate those id.

377
00:25:12,692 --> 00:25:16,574
It's very easy to use. You can find it. I already created

378
00:25:16,622 --> 00:25:20,034
it myself here and the platform. Now what is the platform?

379
00:25:20,152 --> 00:25:23,842
So Kix actually if you remember we say that open

380
00:25:23,896 --> 00:25:27,026
policy agent is actually run on JSON in code

381
00:25:27,058 --> 00:25:30,434
to process trees like a JSON tree

382
00:25:30,562 --> 00:25:34,134
tree structure and then see the policy on that.

383
00:25:34,172 --> 00:25:37,058
But for example Yaml is not a JSON.

384
00:25:37,154 --> 00:25:40,378
Pulumi is not a JSON. Terraform is not a

385
00:25:40,384 --> 00:25:44,502
JSON. So Kix already support libraries

386
00:25:44,566 --> 00:25:48,330
like all of that and allow us to write

387
00:25:48,480 --> 00:25:51,882
queries and Kics will convert those structures

388
00:25:51,946 --> 00:25:55,054
into JSON and do the checks there. So you can

389
00:25:55,092 --> 00:25:59,070
look here on the libraries that Kics support and see what

390
00:25:59,140 --> 00:26:02,574
is the platform that KiCs supported and you can

391
00:26:02,612 --> 00:26:06,290
write today in your creating custom queries.

392
00:26:07,350 --> 00:26:10,690
Good point to know is that KiCs also give you some test

393
00:26:10,760 --> 00:26:14,386
framework. So if you don't want to run kix in order to check your

394
00:26:14,408 --> 00:26:18,390
new query, you have some CLI tools, you can find it

395
00:26:18,460 --> 00:26:22,258
and also instruction how to install it on kix documentation.

396
00:26:22,434 --> 00:26:25,894
And also do test for your queries before

397
00:26:26,012 --> 00:26:29,702
I'll show you later. I'll not get into it too much

398
00:26:29,756 --> 00:26:33,254
because it's something you know you need configuration, your environment, et cetera.

399
00:26:33,302 --> 00:26:37,034
But that's good thing to know. So remember you can test it also in

400
00:26:37,072 --> 00:26:41,594
more detailed and informative way using go

401
00:26:41,632 --> 00:26:44,862
run commands that KiCs include already. And then

402
00:26:44,916 --> 00:26:48,254
we got to the most important part, right? So we already have our

403
00:26:48,292 --> 00:26:51,466
test for the new query, we already have the metadata

404
00:26:51,498 --> 00:26:54,946
Json. And now let's write the first policy. Now you

405
00:26:54,968 --> 00:26:59,250
remember we need policy for every edge case. This is only the policy

406
00:26:59,400 --> 00:27:03,330
for the very basic thing we want to check every

407
00:27:03,480 --> 00:27:07,430
endpoint that we have configured in open API has

408
00:27:07,500 --> 00:27:11,014
parameters. Parameter is actually the

409
00:27:11,052 --> 00:27:14,690
place where we put the headers for every endpoint.

410
00:27:14,770 --> 00:27:18,246
So as you can see we have here the documentation in row six,

411
00:27:18,348 --> 00:27:22,122
right, which is the document which will be the open API. Nothing from our

412
00:27:22,176 --> 00:27:25,834
side. And then we want to check is tree which is important for us because

413
00:27:25,872 --> 00:27:29,034
we don't want to allow user to use open

414
00:27:29,072 --> 00:27:32,522
API two. And then we collect all the passes.

415
00:27:32,586 --> 00:27:35,854
Now all this thing is some syntax you have to learn

416
00:27:35,892 --> 00:27:39,578
in Rigo. This is not something hard to learn, but it's

417
00:27:39,594 --> 00:27:42,110
also similar to go in some ways.

418
00:27:42,260 --> 00:27:45,634
And here we actually collect all the passes from

419
00:27:45,672 --> 00:27:49,154
the Rigo and we check for each one of them if there

420
00:27:49,192 --> 00:27:53,010
is a valid key call parameters. Now remember if

421
00:27:53,080 --> 00:27:56,930
we will pass after row nine, mean if open policy agent

422
00:27:57,000 --> 00:28:00,646
will run on this rule and will go after row nine,

423
00:28:00,828 --> 00:28:04,274
the result will return and then we check if there is no valid

424
00:28:04,322 --> 00:28:08,002
key parameter. We want to go to row eleven. Row eleven

425
00:28:08,066 --> 00:28:11,418
will retain the result and that's our first policy.

426
00:28:11,584 --> 00:28:14,666
This policy want to check if there is parameter and

427
00:28:14,688 --> 00:28:18,138
then we say we miss attribute, right? So every result

428
00:28:18,304 --> 00:28:21,642
has some keys. You can find kics documentation on that.

429
00:28:21,696 --> 00:28:25,566
But we go quickly, we have the document id which is actually the

430
00:28:25,588 --> 00:28:29,006
file. We already ran the infrastructure as code check on it.

431
00:28:29,108 --> 00:28:32,606
We have the search key which is what we want to search. And you can

432
00:28:32,628 --> 00:28:36,034
see here a formatted dynamic attribute from the

433
00:28:36,072 --> 00:28:39,426
particular name. What is the name? Name is actually the name of the

434
00:28:39,448 --> 00:28:42,398
endpoint missing attribute, Mike's header,

435
00:28:42,494 --> 00:28:46,726
right. And if we have write result, this is how we already

436
00:28:46,828 --> 00:28:50,258
write our new query. If we'll take those query

437
00:28:50,354 --> 00:28:53,634
and mount it to Kics, every open API, that missing

438
00:28:53,682 --> 00:28:57,014
parameter portion in

439
00:28:57,052 --> 00:29:00,442
the configuration will throw this result.

440
00:29:00,576 --> 00:29:03,914
Nice. We created our first rigo and

441
00:29:03,952 --> 00:29:07,594
I encourage you if you didn't succeed to

442
00:29:07,792 --> 00:29:12,026
read noise by excluding or by customizing.

443
00:29:12,138 --> 00:29:16,058
Think about new rules. Think about look at your organization

444
00:29:16,234 --> 00:29:19,918
and think what rules you can create

445
00:29:20,084 --> 00:29:23,386
to make your team run much faster.

446
00:29:23,498 --> 00:29:26,482
You can also combine some git apps with that,

447
00:29:26,536 --> 00:29:29,982
et cetera, to see how you can create code owners

448
00:29:30,046 --> 00:29:33,902
for portion. I'm not diving in too much, but creating rules.

449
00:29:33,966 --> 00:29:37,382
It's also not only for Kics. We'll talk about it soon.

450
00:29:37,516 --> 00:29:40,646
You can create rules almost in every tool that

451
00:29:40,668 --> 00:29:44,166
you run automatically. And that's a good way in one

452
00:29:44,268 --> 00:29:47,666
action you do to get rid of the noise

453
00:29:47,698 --> 00:29:51,510
that your developer complaining on. Now if you want

454
00:29:51,580 --> 00:29:55,114
to mount those into your kics, run. So if you remember

455
00:29:55,232 --> 00:29:58,634
we did it in the docker command, but we can

456
00:29:58,672 --> 00:30:02,286
also do it in the docker image. So we have here the

457
00:30:02,308 --> 00:30:05,966
docker image of a kix which is actually

458
00:30:06,068 --> 00:30:09,246
the take from Checkmarkix and

459
00:30:09,268 --> 00:30:12,842
I just copied the assets folder, which assets

460
00:30:12,906 --> 00:30:16,590
is actually my custom rules into the app bin assets

461
00:30:16,670 --> 00:30:20,782
which is the assets that kix has. Now all my queries

462
00:30:20,846 --> 00:30:24,446
will override the queries that Kics has and also add the queries

463
00:30:24,478 --> 00:30:27,974
that I added and then run kics. Easy as that.

464
00:30:28,092 --> 00:30:32,054
We get all our configuration, custom configuration run

465
00:30:32,092 --> 00:30:35,942
together with Kics. Now you must ask how I get this

466
00:30:35,996 --> 00:30:39,786
assets folder. So let's say for example you run in circuit CI run in

467
00:30:39,808 --> 00:30:43,466
GitHub action. You should have some pre step that clone the

468
00:30:43,488 --> 00:30:46,774
repository of your custom queries custom and created

469
00:30:46,822 --> 00:30:50,182
queries and put it in two kics in a runtime.

470
00:30:50,246 --> 00:30:53,550
Supposed to be easy if you're familiar with all those

471
00:30:53,620 --> 00:30:57,454
API actions. So we created a query and

472
00:30:57,492 --> 00:31:01,134
now we have custom run. Now we really have gas happy. And when

473
00:31:01,172 --> 00:31:05,266
gas happy like protocol. So now let's see what is

474
00:31:05,288 --> 00:31:09,182
gas protocol for happy life. When you do devsecops

475
00:31:09,246 --> 00:31:12,686
and you hate the noise that all those security tools

476
00:31:12,718 --> 00:31:16,046
bring to you, what is the protocol? First exclude.

477
00:31:16,158 --> 00:31:19,490
Look at the tools, look at why developer complaints

478
00:31:19,570 --> 00:31:22,950
and see what you can exclude. You maybe not need anything.

479
00:31:23,100 --> 00:31:26,626
Then if you didn't succeed with that, look what you can customize.

480
00:31:26,738 --> 00:31:30,874
This customization can make sure that developers know exactly what

481
00:31:30,912 --> 00:31:34,294
they need to do without letting you as a DevOps

482
00:31:34,342 --> 00:31:37,626
to mess too much with permissions and stuff like that.

483
00:31:37,728 --> 00:31:41,718
And also you can let them the responsibility

484
00:31:41,814 --> 00:31:45,390
for the thing they need to create. And then you can also create

485
00:31:45,460 --> 00:31:48,826
rules that the third stage, look at your tools,

486
00:31:48,938 --> 00:31:52,974
think how you can make them better by creating rules. And that thing is

487
00:31:53,012 --> 00:31:56,538
not only for kics. Almost every security automation tools

488
00:31:56,554 --> 00:31:59,426
that you will hear of it today or it may be run.

489
00:31:59,608 --> 00:32:03,394
Should have some infrastructure to create your

490
00:32:03,432 --> 00:32:07,218
own. Your own thing that needs to be done and need to be assessed

491
00:32:07,234 --> 00:32:11,186
in your organization. And in this way, I'll wish

492
00:32:11,218 --> 00:32:14,994
you all to get rid of noise to get better devsecops

493
00:32:15,042 --> 00:32:18,630
implementation in your organization and make sure

494
00:32:18,700 --> 00:32:22,690
you have happy smile as well as gossip.

495
00:32:22,850 --> 00:32:26,886
Thank you for joining me today. I was Gabriel and I'll be

496
00:32:26,908 --> 00:32:31,258
happy to connect each one of you on Twitter. I'm available on Twitter on LinkedIn.

497
00:32:31,354 --> 00:32:35,342
I'm trying to do developers. I'm trying to do developers. I'm trying

498
00:32:35,396 --> 00:32:38,430
to help developers make their life easier.

499
00:32:39,250 --> 00:32:41,290
See you around. Thank you for joining.

