1
00:01:28,290 --> 00:01:31,702
Hello everyone, this is Jin Wei. I'm very happy to

2
00:01:31,756 --> 00:01:35,014
introduce the Apache API six Ingress project.

3
00:01:35,212 --> 00:01:38,802
This is a simpler and easier kubernetes ingress

4
00:01:38,946 --> 00:01:43,050
have something about myself. I'm Apache API six PMC,

5
00:01:43,130 --> 00:01:47,150
Apache Skywalking committee, and the founder of Apache API Six

6
00:01:47,220 --> 00:01:50,506
Ingress controller. So what is Apache

7
00:01:50,538 --> 00:01:54,254
API six Ingress controller? It is another ingress controller

8
00:01:54,302 --> 00:01:57,570
implementation based on Apache API six,

9
00:01:57,720 --> 00:02:01,602
and it supports declarative configuration which

10
00:02:01,656 --> 00:02:05,234
can be configured through native ingress results or

11
00:02:05,272 --> 00:02:09,378
through custom results definition. We call it CRD.

12
00:02:09,554 --> 00:02:13,506
This picture tells us that the Apache API

13
00:02:13,538 --> 00:02:16,934
six Ingress controller is usually deployed at the

14
00:02:16,972 --> 00:02:20,374
age of the cluster, serving as a cluster

15
00:02:20,422 --> 00:02:24,220
entry and forwarding business request to the services.

16
00:02:25,070 --> 00:02:28,986
Well, we also need to introduce Apache API six.

17
00:02:29,168 --> 00:02:32,702
It is a high performance four dynamic real

18
00:02:32,756 --> 00:02:36,350
time API gateway and it is also a top level

19
00:02:36,420 --> 00:02:40,318
project of Apache foundation. This is the

20
00:02:40,404 --> 00:02:43,586
architecture diagram of Apache API six,

21
00:02:43,768 --> 00:02:47,474
and the left part show us Apache API six how

22
00:02:47,512 --> 00:02:52,050
to process business traffic with rich plugin functions.

23
00:02:52,550 --> 00:02:56,354
On the right is the controller plan of Apache API

24
00:02:56,402 --> 00:02:59,762
six. Here we mainly focus on admin

25
00:02:59,826 --> 00:03:03,554
APIs, through which ingress controller

26
00:03:03,602 --> 00:03:06,840
synchronize results to Apache API six.

27
00:03:07,470 --> 00:03:10,550
Okay, let's talk about the working mechanism

28
00:03:10,710 --> 00:03:13,622
of Apache API six Ingress controller.

29
00:03:13,766 --> 00:03:17,914
The Apache API six Ingress controller watches events from

30
00:03:17,952 --> 00:03:21,754
the Kubernetes API server, something like secret

31
00:03:21,882 --> 00:03:25,070
endpoints and Ingress in kubernetes,

32
00:03:25,570 --> 00:03:29,022
as well as custom results definition such

33
00:03:29,076 --> 00:03:32,850
as API six root API six,

34
00:03:32,920 --> 00:03:36,820
upstream API six tls and so on.

35
00:03:37,350 --> 00:03:41,650
And then the channel resource objects are covered,

36
00:03:42,150 --> 00:03:46,318
compared, and finally the results are synchronized

37
00:03:46,414 --> 00:03:49,810
to a patch API six cluster by invoking

38
00:03:49,890 --> 00:03:53,794
admin APIs. So this diagram

39
00:03:53,842 --> 00:03:57,762
fully shows the relationship between Ingress controller

40
00:03:57,826 --> 00:04:02,310
and Apache API six. Apache API six Ingress controller

41
00:04:02,390 --> 00:04:06,122
is used as a controller plan to calculate and

42
00:04:06,176 --> 00:04:09,610
synchronize restores configuration between

43
00:04:09,680 --> 00:04:13,070
Kubernetes and Apisix cluster.

44
00:04:14,450 --> 00:04:18,430
Well, what can we do with Apache Apisix in grace?

45
00:04:18,850 --> 00:04:22,442
I list many important features here such as

46
00:04:22,516 --> 00:04:26,590
dynamic configuration service discovery,

47
00:04:26,750 --> 00:04:30,946
flexible load balancing strategies, out of the box,

48
00:04:31,048 --> 00:04:35,274
health checks, traffic split and more than 70 official

49
00:04:35,342 --> 00:04:39,318
plugins, as well as the configuration of custom

50
00:04:39,404 --> 00:04:42,040
plugins, ability and so on.

51
00:04:43,290 --> 00:04:46,886
Welcome to watch the project and get more future

52
00:04:46,988 --> 00:04:50,326
information. Let me show the path

53
00:04:50,358 --> 00:04:53,914
of Apache API six Ingress controller in

54
00:04:53,952 --> 00:04:58,026
2019. I wrote the first line of project

55
00:04:58,208 --> 00:05:01,914
and donated to the Apache foundation

56
00:05:02,042 --> 00:05:05,454
in December 2020 after half

57
00:05:05,492 --> 00:05:08,558
a year of community polishing. The first

58
00:05:08,644 --> 00:05:12,960
GA version was released in June 2021.

59
00:05:14,150 --> 00:05:17,602
Until the last version 1.4

60
00:05:17,736 --> 00:05:20,798
release, Apache API Six Ingress

61
00:05:20,894 --> 00:05:24,942
has been used by more and more enterprises and

62
00:05:25,016 --> 00:05:27,350
working in production environments.

63
00:05:28,490 --> 00:05:32,358
Much has been learned along the way and soon

64
00:05:32,444 --> 00:05:35,750
we will be raising version 1.5

65
00:05:35,820 --> 00:05:39,686
in midmain. This is contribute

66
00:05:39,798 --> 00:05:44,570
growth curve of the Apache API Six Ingress controller

67
00:05:45,710 --> 00:05:49,626
and its steady growth shows that the project

68
00:05:49,728 --> 00:05:53,390
has maintained a good level of activity.

69
00:05:54,530 --> 00:05:58,382
Well, there is a question I think you will ask. We know

70
00:05:58,436 --> 00:06:01,934
that there are many ingress implementations in

71
00:06:01,972 --> 00:06:05,698
kubernetes, but why we still create another

72
00:06:05,784 --> 00:06:08,500
ingress based on API six?

73
00:06:09,510 --> 00:06:13,678
Of course, as a gateway with excellent performance,

74
00:06:13,854 --> 00:06:17,874
Apache API six is necessary to implement

75
00:06:18,002 --> 00:06:21,094
ingress in order to help users to

76
00:06:21,132 --> 00:06:23,960
use it on Kubernetes platform.

77
00:06:25,290 --> 00:06:29,130
Apart from that, we certainly have other reasons

78
00:06:29,470 --> 00:06:33,130
that are why I recommend API six

79
00:06:33,200 --> 00:06:36,330
ingress to you. First.

80
00:06:36,480 --> 00:06:40,598
All configurations of API six take effect

81
00:06:40,784 --> 00:06:44,622
dynamically and there is no need to

82
00:06:44,676 --> 00:06:48,190
reload when the configuration is changed.

83
00:06:50,050 --> 00:06:53,390
Compared with some other ingress implementations,

84
00:06:53,830 --> 00:06:57,970
using API six ingredients has nature advantages.

85
00:06:59,910 --> 00:07:03,620
Apache API six ingredients is easier to use,

86
00:07:05,130 --> 00:07:09,270
the declarative configuration is more readable

87
00:07:09,850 --> 00:07:13,094
and complex scenarios can be defined in

88
00:07:13,132 --> 00:07:16,678
a single result. This example shows

89
00:07:16,764 --> 00:07:20,786
that an API is assigned to different upstream

90
00:07:20,898 --> 00:07:24,426
according to weights. Of course that

91
00:07:24,608 --> 00:07:27,260
certain condition must be made.

92
00:07:27,790 --> 00:07:31,562
Here we can see that the complete traffic split

93
00:07:31,626 --> 00:07:35,230
configuration are delivered into two parts,

94
00:07:35,570 --> 00:07:40,154
match and back end. The match part defines

95
00:07:40,202 --> 00:07:43,590
the root matching rules and the backend

96
00:07:43,690 --> 00:07:47,090
part defines the weight between upstreams.

97
00:07:47,590 --> 00:07:51,220
The whole configuration is very easy to read.

98
00:07:53,590 --> 00:07:57,590
Third, API six have strong scalability

99
00:07:58,170 --> 00:08:02,134
following the above configuration. If you want

100
00:08:02,172 --> 00:08:05,030
to add some features to this API,

101
00:08:05,370 --> 00:08:09,318
such as the ability to support cross domain and

102
00:08:09,404 --> 00:08:13,222
URIW, we can use plugins

103
00:08:13,366 --> 00:08:17,402
to empower the API. If you want to

104
00:08:17,456 --> 00:08:20,570
add more features, just add plugins.

105
00:08:21,250 --> 00:08:24,986
I'd like to say that the design of the plugin

106
00:08:25,098 --> 00:08:29,150
is very compatible with the declarative configuration

107
00:08:29,810 --> 00:08:32,918
and because of the in cap solution

108
00:08:33,034 --> 00:08:36,338
of plugin, you do not need to write

109
00:08:36,424 --> 00:08:40,238
code slaved in declarative configuration

110
00:08:40,414 --> 00:08:44,290
and no longer need to pay attention to these code

111
00:08:44,360 --> 00:08:48,098
logics. The only thing need to be case

112
00:08:48,114 --> 00:08:52,150
about is some simple variables which is

113
00:08:52,220 --> 00:08:54,550
more general and more readable.

114
00:08:56,330 --> 00:08:59,802
Okay, let's come back and talk

115
00:08:59,856 --> 00:09:03,642
about the flexibility of the architecture of

116
00:09:03,696 --> 00:09:07,494
Apache API six. Ingress controller Apache

117
00:09:07,542 --> 00:09:11,934
API six ingress does not combine controller and

118
00:09:12,052 --> 00:09:14,910
proxy like other ingresses.

119
00:09:15,330 --> 00:09:18,814
The advantage of this is that you can

120
00:09:18,852 --> 00:09:21,390
deploy them together or separately.

121
00:09:22,790 --> 00:09:26,222
When Ingress controller and API six are deployed

122
00:09:26,286 --> 00:09:30,206
together, they are used to handle ingress requests

123
00:09:30,318 --> 00:09:32,930
to a single Kubernetes cluster,

124
00:09:33,270 --> 00:09:37,350
no different from traditional Kubernetes ingress.

125
00:09:39,050 --> 00:09:43,414
You can also deploy them separately. This is awesome.

126
00:09:43,612 --> 00:09:46,790
As shown on the right, API six

127
00:09:46,860 --> 00:09:51,126
cluster is deployed outside the Kubernetes clusters

128
00:09:51,318 --> 00:09:54,950
and can manage the traffic on multiple Kubernetes

129
00:09:55,030 --> 00:09:59,494
clusters. In this way all resources

130
00:09:59,622 --> 00:10:03,470
be managed in unified API cluster

131
00:10:03,970 --> 00:10:07,870
and also reduce one traffic forwarding.

132
00:10:09,170 --> 00:10:13,026
The only thing you need to care about is

133
00:10:13,048 --> 00:10:16,930
the networking between the Kubernetes clusters.

134
00:10:18,150 --> 00:10:21,810
Here are some complaints using Apache API six

135
00:10:21,960 --> 00:10:25,774
more and more enterprise customers are using Apache

136
00:10:25,822 --> 00:10:29,954
API six for production environments. More and more

137
00:10:29,992 --> 00:10:34,390
user are adopting Apache API six Ingress solutions.

138
00:10:35,130 --> 00:10:38,582
That's what keeps our open source

139
00:10:38,646 --> 00:10:41,274
project going. Okay,

140
00:10:41,392 --> 00:10:44,662
I'd like to share with you the future plans

141
00:10:44,726 --> 00:10:47,930
of Apache API six Ingress controller.

142
00:10:48,270 --> 00:10:52,974
We are supporting the Kubernetes Gateway API and

143
00:10:53,012 --> 00:10:56,990
we are also preparing to support a new scenarios

144
00:10:57,650 --> 00:11:01,166
which is to support cluster deployment without

145
00:11:01,268 --> 00:11:04,958
etCD. I think users who mind

146
00:11:05,044 --> 00:11:08,702
etcd being stateful will be happy to hear

147
00:11:08,756 --> 00:11:09,760
about that.

148
00:11:11,570 --> 00:11:15,446
Why we made such changes because this needs

149
00:11:15,548 --> 00:11:19,382
from the community are very reasonable and

150
00:11:19,436 --> 00:11:23,400
this is the driving force for the project to continue.

151
00:11:24,810 --> 00:11:28,978
Okay, the above is the whole content of this sharing.

152
00:11:29,154 --> 00:11:33,206
Looking forward to build a patch API six community together

153
00:11:33,308 --> 00:11:36,520
with you. See you next time.

