1
00:00:25,410 --> 00:00:28,502
You. Hey everybody,

2
00:00:28,636 --> 00:00:32,294
things for coming to my talk about organizational chaos and how

3
00:00:32,332 --> 00:00:35,794
recipes for service ownership can overcome those challenges,

4
00:00:35,922 --> 00:00:39,190
I'm really excited to share. So let's get started. So who am I?

5
00:00:39,260 --> 00:00:42,914
I'm Joey Parsons. I'm a longtime veteran in the infrastructure

6
00:00:42,962 --> 00:00:46,418
and reliability space. I've led engineering and operation teams

7
00:00:46,434 --> 00:00:49,542
for the last 20 teams at a handful of companies. You've probably

8
00:00:49,596 --> 00:00:52,826
heard of running anything from platform and backend engineering

9
00:00:52,858 --> 00:00:55,838
teams to old school operation teams. Fun fact,

10
00:00:55,924 --> 00:00:59,374
I've actually carried a literal pager for on call for work and

11
00:00:59,412 --> 00:01:03,674
more recently running site reliability. At Airbnb, I've seen how folks

12
00:01:03,722 --> 00:01:07,090
organize both their people and their infrastructure for success.

13
00:01:07,240 --> 00:01:11,218
These days I'm building a company called FX where we've built a platform

14
00:01:11,304 --> 00:01:15,134
to help engineering teams better operate and use microservices,

15
00:01:15,262 --> 00:01:18,382
including helping them overcome the human and cognitive

16
00:01:18,446 --> 00:01:21,922
load challenges that can occur, including service ownership.

17
00:01:21,986 --> 00:01:25,606
What I'm going to talk about when it comes to the topic today comes from

18
00:01:25,628 --> 00:01:29,622
my years of experience as well has from our customers who come to us

19
00:01:29,676 --> 00:01:33,798
to solve some of these challenges. So what is service ownership?

20
00:01:33,894 --> 00:01:37,418
It's a pretty broad topic, to be honest, and there's plenty of opinions in the

21
00:01:37,424 --> 00:01:41,082
space that are all generally correct, and I'm pretty glad that it's actually become

22
00:01:41,136 --> 00:01:44,702
a topic that people talk about. Some folks like to distill it down into

23
00:01:44,756 --> 00:01:48,318
simply, you code it, you own it. But it goes far beyond that.

24
00:01:48,404 --> 00:01:52,362
Ownership is more of a mindset of responsibility that gives you freedom

25
00:01:52,426 --> 00:01:56,286
as well as autonomy. It's not all just on call and deploys.

26
00:01:56,398 --> 00:02:00,574
So how do we define it? Service ownership means that teams are fully

27
00:02:00,622 --> 00:02:04,162
autonomous and responsible for the delivery of their service

28
00:02:04,296 --> 00:02:07,726
component or piece of functionality. It goes both ways.

29
00:02:07,848 --> 00:02:11,542
In order to have true ownership and have the autonomy over your work,

30
00:02:11,596 --> 00:02:15,058
you take on responsibility. And thankfully, the responsibility parts

31
00:02:15,074 --> 00:02:18,726
of ownership come with the freedom and flexibility and autonomy that

32
00:02:18,748 --> 00:02:22,498
we know every engineer craves when it comes to their work. And this includes whats

33
00:02:22,524 --> 00:02:25,946
is definitely not limited to incident response. So this is

34
00:02:25,968 --> 00:02:29,594
what most folks think of when they think about service ownership, but it's really just

35
00:02:29,632 --> 00:02:33,162
a part of it. But ultimately, it's a pretty big part of the responsibility

36
00:02:33,226 --> 00:02:36,414
side of things. Service uptime matters, so the on

37
00:02:36,452 --> 00:02:40,094
call part of ownership is naturally critical. But it's not just on

38
00:02:40,132 --> 00:02:43,886
call. It's managing observability, monitoring, and ensuring that

39
00:02:43,908 --> 00:02:47,230
everyone has all the information they need to take action

40
00:02:47,310 --> 00:02:51,422
when something dire happens. Performance and efficiency is pretty self explanatory,

41
00:02:51,486 --> 00:02:54,594
but as a service owner, you're responsible for making sure that

42
00:02:54,632 --> 00:02:58,022
a service runs fast or slow, I guess, as it needs to be,

43
00:02:58,076 --> 00:03:01,426
tuning for performance and efficiency of resources falls

44
00:03:01,458 --> 00:03:04,770
upon the service owners building features and tracking bugs,

45
00:03:04,850 --> 00:03:08,214
the most obvious of all these. But it's critical to call out who do those

46
00:03:08,252 --> 00:03:12,058
Jira tickets get assigned to. Capacity planning costs may matter.

47
00:03:12,144 --> 00:03:15,910
May not matter in some companies, but in others it's absolutely critical.

48
00:03:15,990 --> 00:03:19,626
Keeping track of your resources and using them appropriately is key in

49
00:03:19,648 --> 00:03:23,366
any low margin business. In some orgs, it's simply just a measure

50
00:03:23,398 --> 00:03:27,118
of dollars, but in others, this is something that can show up and funnel up

51
00:03:27,124 --> 00:03:30,554
to A-P-L report. Last but not least, failure injection

52
00:03:30,602 --> 00:03:34,526
and chaos. Who's running game days for a service? Who's ensuring that

53
00:03:34,548 --> 00:03:36,960
it's fault tolerant to the rigors of your platform,

54
00:03:38,310 --> 00:03:42,414
compute and user behavior? More often, it's a critical

55
00:03:42,462 --> 00:03:46,238
part of an engineer's workload. So speaking of chaos,

56
00:03:46,414 --> 00:03:49,734
what happens when service ownership doesn't go

57
00:03:49,772 --> 00:03:53,922
right? Organizational chaos. So this is comp 42 chaos

58
00:03:53,986 --> 00:03:58,066
engineering. Before you can even think about running failure injection or setting

59
00:03:58,098 --> 00:04:01,526
up game days, you need to know who to involve in a world of

60
00:04:01,548 --> 00:04:05,066
microservices. Imagine trying to run a game day where you're going to

61
00:04:05,088 --> 00:04:08,938
take part of the info down. Let's say it's a really critical database that a

62
00:04:08,944 --> 00:04:12,378
lot of services need to engage with through its presentation service.

63
00:04:12,464 --> 00:04:16,042
And this may have repercussions for a lot of services. If you're unable

64
00:04:16,186 --> 00:04:19,582
to figure out who to coordinate with for those other services for that game day,

65
00:04:19,636 --> 00:04:22,926
you end up getting stuck. Frankly, beyond that, without a sense of

66
00:04:22,948 --> 00:04:26,226
service ownership, your engineers are struggling day to day on

67
00:04:26,248 --> 00:04:29,790
a day to day basis to probably get anything done in their own worlds,

68
00:04:29,870 --> 00:04:33,998
much less cross team or infrastructure wide chaos inevitably

69
00:04:34,174 --> 00:04:37,954
ensues and engineers are left distraught that the people side of things simply

70
00:04:38,002 --> 00:04:41,366
isn't set up properly and look to management for answers. So what

71
00:04:41,388 --> 00:04:44,822
are all the things that can cause organizational chaos without service

72
00:04:44,876 --> 00:04:48,662
ownership? First and foremost, unowned services, this is probably

73
00:04:48,716 --> 00:04:52,902
the worst thing that can happen. Poor ownership is replaced by nonexisting ownership,

74
00:04:52,966 --> 00:04:56,358
and it leaves all the responsibilities of a service owner to nobody,

75
00:04:56,454 --> 00:05:00,378
and no one knows who to talk to. Secondly, no easy way to contact a

76
00:05:00,384 --> 00:05:03,626
service owner. Knowing who an owner is is one thing, but how do I

77
00:05:03,648 --> 00:05:07,054
get in contact with them? What's their slack channel? What's their email address?

78
00:05:07,172 --> 00:05:10,606
How do I page them if there's an emergency? If it's not easy, it's not

79
00:05:10,628 --> 00:05:14,202
getting done without engineers being, frankly, absolutely livid.

80
00:05:14,266 --> 00:05:17,906
Poor documentation or runbooks part of ownership is making sure

81
00:05:17,928 --> 00:05:21,506
that it's up to date and solid so that not only can your team follow,

82
00:05:21,608 --> 00:05:25,346
but others can if they ever need to operate bus factors of one this

83
00:05:25,368 --> 00:05:28,738
usually comes hand in hand with the hero complex. I'm sure we've

84
00:05:28,754 --> 00:05:32,194
all had it before, but there's usually that one engineer who knows

85
00:05:32,242 --> 00:05:35,878
everything and can operate every system or service. Yet when they leave the

86
00:05:35,884 --> 00:05:39,154
team, switch roles, leave the company, or frankly

87
00:05:39,202 --> 00:05:42,742
something terrible happens to them, the rest of the is left holding the bag.

88
00:05:42,806 --> 00:05:46,106
Their knowledge needs to be dispersed to a team or team to prevent their

89
00:05:46,128 --> 00:05:49,254
own burnout, but also to share the load and responsibility.

90
00:05:49,382 --> 00:05:52,822
Make this a priority to end if you can broken

91
00:05:52,886 --> 00:05:56,234
or missing on call rotations I bet we all have hilarious

92
00:05:56,282 --> 00:05:59,918
on call rotation stories. I remember getting paid for a startup I

93
00:05:59,924 --> 00:06:03,758
hasnt worked for in over two teams because something esoteric broke. Yeah,

94
00:06:03,844 --> 00:06:06,970
without service ownership maintained, this sort of thing that's funny

95
00:06:07,050 --> 00:06:10,786
is bound to happen. There's plenty more where all that came from and I'd love

96
00:06:10,808 --> 00:06:14,446
to hear your stories, but I want to run through some tenants or even recipes

97
00:06:14,558 --> 00:06:18,278
for how to ensure solid service ownership at your company.

98
00:06:18,444 --> 00:06:21,622
First thing. No unowned services ever.

99
00:06:21,756 --> 00:06:25,446
None. Everything needs to have an owner. How many of you have felt that

100
00:06:25,468 --> 00:06:28,738
story where there's this critical service that everybody knows exists,

101
00:06:28,834 --> 00:06:32,210
but folks have played hot potato with it for years to where when there's a

102
00:06:32,220 --> 00:06:35,466
security issue, nobody quite knows who to reach out to. That's an

103
00:06:35,488 --> 00:06:38,662
unknown service and probably the worst thing you can have for your culture.

104
00:06:38,726 --> 00:06:41,962
It's important to defining can owner for each service and keep it up to date

105
00:06:42,016 --> 00:06:45,578
and maintained in a place that's easy for folks to consume and digest.

106
00:06:45,674 --> 00:06:48,586
Which brings me to my next point, which may be a little controversial.

107
00:06:48,698 --> 00:06:52,234
One service for one team. A service cannot

108
00:06:52,282 --> 00:06:56,498
be owned by two teams. When two teams own it, nobody does.

109
00:06:56,584 --> 00:06:59,790
You need the single team to contact. That's well defined.

110
00:06:59,870 --> 00:07:03,954
Imagine being in a situation where something dire is happening, security issue,

111
00:07:04,072 --> 00:07:07,554
incident response, something like that, and you're unsure of which team to reach

112
00:07:07,592 --> 00:07:10,994
out to. There's a decision point that shouldn't exist. Sure, you could ping

113
00:07:11,042 --> 00:07:14,422
both teams. Then you're likely to get someone involved who doesn't need to be

114
00:07:14,476 --> 00:07:18,102
one of the tenants of service. Ownership is being autonomous, and you can't be

115
00:07:18,156 --> 00:07:21,926
if you need to coordinate elsewhere. One team to one service ratio

116
00:07:22,038 --> 00:07:25,722
never toss over the fence, even within a team. So the embed model

117
00:07:25,776 --> 00:07:29,306
for sres that's gaining popularity is

118
00:07:29,328 --> 00:07:33,078
becoming quite prevalent, especially if you're able to hire these sorts of highly trained

119
00:07:33,094 --> 00:07:36,814
folks. However, if you're just replicating the pre DevOps model

120
00:07:36,852 --> 00:07:40,446
of separating dev from ops, where they're the only ones who are dealing with

121
00:07:40,468 --> 00:07:44,078
the hard parts of ownership, you're doing it wrong. Every engineer of a

122
00:07:44,084 --> 00:07:48,414
team is part of the ownership, not just the sres or the ops. Every engineer

123
00:07:48,462 --> 00:07:51,586
needs to be on the on call rotation, and the sres should be up

124
00:07:51,608 --> 00:07:55,682
leveling everybody's ability to do it better. You should be tracking

125
00:07:55,746 --> 00:07:59,542
production operational readiness constantly and always.

126
00:07:59,676 --> 00:08:03,830
Constantly and always. Part of true service ownership is having quality

127
00:08:03,900 --> 00:08:07,250
documentation, whether that be runbooks, API specs,

128
00:08:07,330 --> 00:08:10,598
general documentations, observability dashboards, and more.

129
00:08:10,684 --> 00:08:13,990
Having this information readily available makes ownership easier,

130
00:08:14,070 --> 00:08:17,274
not just for you, but for the other folks who may need to operate your

131
00:08:17,312 --> 00:08:21,702
system in a pinch. And don't just do it as part of a preflight

132
00:08:21,766 --> 00:08:25,482
checklist before a service is launched for the first time. Do it constantly

133
00:08:25,546 --> 00:08:28,654
and make sure everything is kept up to date. And when it comes

134
00:08:28,692 --> 00:08:32,350
to tracking readiness, measure what matters most to you every

135
00:08:32,420 --> 00:08:35,890
organization is different, and you may care deeply about having

136
00:08:35,960 --> 00:08:39,438
in depth runbooks, while a company under regulatory compliance

137
00:08:39,534 --> 00:08:43,730
may care about something else more like having a security scan run every day.

138
00:08:43,800 --> 00:08:47,354
Build a mechanism to measure what matters most to your organization,

139
00:08:47,502 --> 00:08:50,614
not necessarily just taking the cookie cutter approach from

140
00:08:50,652 --> 00:08:54,134
other companies you may have heard from, but contact information

141
00:08:54,252 --> 00:08:57,846
should be easy and simple to find, and if it's not,

142
00:08:57,948 --> 00:09:01,546
it needs to be incredibly intuitive. For example, let's say you have

143
00:09:01,568 --> 00:09:05,306
a team in your engineering called user growth. They're responsible for

144
00:09:05,328 --> 00:09:08,826
building services and functionality to help grow your user base.

145
00:09:08,928 --> 00:09:12,362
Simple enough, but what if their Slack channel is something called

146
00:09:12,496 --> 00:09:16,102
hashtag scale and their email address is just growth app?

147
00:09:16,256 --> 00:09:19,406
No one's going to know how to get in contact with them, keep things simple

148
00:09:19,508 --> 00:09:23,210
and make it consistent, so else your engineers are just left floundering.

149
00:09:23,290 --> 00:09:27,342
Speaking of keeping things simple, on call rotations should be intimately

150
00:09:27,406 --> 00:09:31,134
tied to your user directory system, whether that's Google, LDAP, active directory,

151
00:09:31,182 --> 00:09:35,310
whatever you use. Otherwise, you end up with too many inconsistencies

152
00:09:35,390 --> 00:09:38,566
between two groups, and even funny things where people have left the team or

153
00:09:38,588 --> 00:09:42,022
a company and still are on call for your service. Let's talk about

154
00:09:42,076 --> 00:09:46,434
Reorgs, the absolutely dreaded reorg. Nobody loves reorgs,

155
00:09:46,482 --> 00:09:50,486
and they're usually done quite in haste, but often, especially with microservices,

156
00:09:50,598 --> 00:09:54,106
the people get reorgs, but the microservices don't. A goal for

157
00:09:54,128 --> 00:09:58,314
every reorg should be to reassign, assign, or reassign every

158
00:09:58,352 --> 00:10:02,278
service or piece of software in existence so that the negative ramifications

159
00:10:02,294 --> 00:10:05,886
of service ownership are mitigated from the start and you don't end up

160
00:10:05,908 --> 00:10:08,698
with that one person owning a service, or even worse,

161
00:10:08,794 --> 00:10:12,174
unowned services where people just shrug and say hey, I guess

162
00:10:12,212 --> 00:10:15,542
I used to own that, but I switched teams so I don't anymore.

163
00:10:15,626 --> 00:10:19,454
Good luck. You never hasnt that to happen. So make sure you reorg

164
00:10:19,502 --> 00:10:22,894
all of your services too. Anytime you do an organizational reorg,

165
00:10:22,942 --> 00:10:26,338
ownership is a challenge it's definitely not easy to get right.

166
00:10:26,424 --> 00:10:29,986
There's probably a jillian other recipes I could have mentioned today that would

167
00:10:30,008 --> 00:10:32,998
help all of you, but hopefully this is a set of rules that you can

168
00:10:33,004 --> 00:10:36,182
live by and it can be a start for you. One last thing to mention

169
00:10:36,236 --> 00:10:39,314
at the end here is that the folks on your team are the most precious

170
00:10:39,362 --> 00:10:42,662
part of your organization and company. Always think about how to do service

171
00:10:42,716 --> 00:10:46,134
ownership and what you can do or tools you can implement to help

172
00:10:46,172 --> 00:10:49,206
them do it better. You want them building products and software to

173
00:10:49,228 --> 00:10:52,238
help your end use. Not thinking about tracking down a person,

174
00:10:52,324 --> 00:10:56,170
a service, a dashboard, an owner and leaving the day frustrated?

175
00:10:56,250 --> 00:10:59,642
Think about the owners. Don't forget them. Thanks again for listening.

176
00:10:59,706 --> 00:11:02,970
Feel free to hit me up at at Joey Parsons on Twitter to chat.

177
00:11:03,050 --> 00:11:03,660
Have a great day.

