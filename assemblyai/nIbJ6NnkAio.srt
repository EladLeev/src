1
00:00:23,170 --> 00:00:27,026
Hello everyone, and welcome to how the magic of open source helps

2
00:00:27,058 --> 00:00:30,650
our project. My name is Daniel Espino Garcia.

3
00:00:30,730 --> 00:00:33,966
I am a software design engineer at Mattermost. If you want

4
00:00:33,988 --> 00:00:38,174
to contact me, feel free to drop by the office at Mattermost community

5
00:00:38,292 --> 00:00:41,694
server. Before we start, let me tell

6
00:00:41,732 --> 00:00:45,234
you a story. Imagine you are using a program.

7
00:00:45,432 --> 00:00:48,900
You only have the binary, so you cannot look inside

8
00:00:49,430 --> 00:00:51,970
and you want to know how it will behave.

9
00:00:52,390 --> 00:00:56,338
The only way you can do that is by looking at the documentation

10
00:00:56,514 --> 00:00:59,702
or experimenting. You could also try

11
00:00:59,756 --> 00:01:03,094
stack overflow or Chat GPT to see if you

12
00:01:03,132 --> 00:01:07,242
get the answer. But maybe your question

13
00:01:07,296 --> 00:01:11,754
is so deep that they cannot answer it. Neither can

14
00:01:11,792 --> 00:01:14,620
experimentation can give you an idea,

15
00:01:15,150 --> 00:01:19,082
but you cannot know for sure. Wouldn't it be great

16
00:01:19,216 --> 00:01:22,080
if you could see how the program was made?

17
00:01:22,690 --> 00:01:26,106
If you could look beyond the black box and tap

18
00:01:26,138 --> 00:01:29,582
into the essence of the program, wouldn't that be like

19
00:01:29,636 --> 00:01:33,042
magic? Ladies and gentlemen, that is

20
00:01:33,096 --> 00:01:36,658
part of the magic of open source. Here is the

21
00:01:36,664 --> 00:01:39,940
agenda for today, and without further ado, let's start

22
00:01:40,310 --> 00:01:43,550
what is open source? Let's start with

23
00:01:43,640 --> 00:01:47,410
a few misconceptions. The first misconception

24
00:01:47,490 --> 00:01:51,398
is about the word free. Sure, most of

25
00:01:51,404 --> 00:01:54,840
the open source code that is out there you can get for free.

26
00:01:55,210 --> 00:01:59,398
But the free world is about freedom,

27
00:01:59,574 --> 00:02:03,494
not about the cost. If we go to the open source initiative

28
00:02:03,542 --> 00:02:07,434
definition, the main part of the freedom is

29
00:02:07,472 --> 00:02:10,782
the freedom to redistribute the code, not about

30
00:02:10,836 --> 00:02:14,474
that being free. Another common misconception

31
00:02:14,602 --> 00:02:18,574
is that open source community can

32
00:02:18,612 --> 00:02:22,002
be your free labor. They will test

33
00:02:22,136 --> 00:02:26,466
and contribute to your project, and you don't have to pay them anything

34
00:02:26,648 --> 00:02:29,540
because that's how open source works.

35
00:02:31,590 --> 00:02:34,180
No, that may happen,

36
00:02:34,550 --> 00:02:38,502
but it's not how it works. You need to have a good

37
00:02:38,556 --> 00:02:41,942
product or library. People have to find it,

38
00:02:41,996 --> 00:02:45,574
people have to use it, and people have to see potential in

39
00:02:45,612 --> 00:02:48,410
it. So it's worth the time contributing.

40
00:02:48,830 --> 00:02:51,500
And all that is not free.

41
00:02:51,870 --> 00:02:54,982
And when you get to the point where they start contributing,

42
00:02:55,126 --> 00:02:57,850
you still have to keep control of your library.

43
00:02:58,450 --> 00:03:02,734
Review the pull request, discuss the changes. Sure it

44
00:03:02,772 --> 00:03:06,734
helps, but it's not free. Next you

45
00:03:06,772 --> 00:03:10,560
could ask, how can you sell something that is free?

46
00:03:11,010 --> 00:03:14,226
Well, there are many ways. Among other things, it's not

47
00:03:14,248 --> 00:03:17,442
only the code that you are selling, it's the whole

48
00:03:17,496 --> 00:03:20,500
product or sometimes a service.

49
00:03:21,110 --> 00:03:24,706
There are out there big profitable companies that are open source,

50
00:03:24,738 --> 00:03:28,454
like red hat. Others like GitHub use an

51
00:03:28,492 --> 00:03:31,800
open code approach that I will talk about later.

52
00:03:32,250 --> 00:03:36,110
And other huge companies like Meta or Microsoft

53
00:03:36,290 --> 00:03:39,434
have a big part of their code, also distributed as open

54
00:03:39,472 --> 00:03:43,702
source. So looking at examples,

55
00:03:43,846 --> 00:03:48,278
yeah, it seems that it is economically

56
00:03:48,374 --> 00:03:52,222
viable. Finally, some people

57
00:03:52,276 --> 00:03:55,870
will say that open source is a niche,

58
00:03:56,770 --> 00:03:59,440
something just a few people use.

59
00:04:00,130 --> 00:04:03,746
But according to some sources, 90% of

60
00:04:03,768 --> 00:04:06,782
the code you have out there uses open source

61
00:04:06,846 --> 00:04:10,766
one way or another. Sure, oftentimes it's

62
00:04:10,798 --> 00:04:13,940
used to create proprietary code, but still use.

63
00:04:14,570 --> 00:04:16,710
So not really a niche.

64
00:04:18,170 --> 00:04:21,814
So yeah, we know everything that is

65
00:04:21,852 --> 00:04:25,110
not open source, but what is open source?

66
00:04:25,450 --> 00:04:30,010
I'm going with an adaptation of the open source initiative definition.

67
00:04:30,670 --> 00:04:34,346
What I feel is more important are these points.

68
00:04:34,528 --> 00:04:38,220
First of all, the code of the software has to be available.

69
00:04:38,770 --> 00:04:42,894
You must be able to look at the code of what you

70
00:04:42,932 --> 00:04:47,130
are executing. Next is derived workers.

71
00:04:47,290 --> 00:04:51,086
The license must allow creating derivative work out of

72
00:04:51,108 --> 00:04:54,770
the code and distribution under the same license.

73
00:04:55,270 --> 00:04:58,706
This can be under different restrictions based on the license, but in

74
00:04:58,728 --> 00:05:02,114
general it's about being able to use the open source code in the

75
00:05:02,152 --> 00:05:05,606
project. Another important one is that the

76
00:05:05,628 --> 00:05:09,462
distribution should not discriminate. Everyone should

77
00:05:09,516 --> 00:05:13,382
be able to use the code in any field and with

78
00:05:13,436 --> 00:05:17,482
whatever technology. And finally one

79
00:05:17,536 --> 00:05:20,650
that is really useful for us everyday developers.

80
00:05:21,150 --> 00:05:25,206
Free redistribution people redistribute

81
00:05:25,238 --> 00:05:27,926
the code as a gregate of programs.

82
00:05:28,118 --> 00:05:31,680
That is what bring us tools like NPM to us.

83
00:05:32,130 --> 00:05:35,760
But what kind of open source exists out there?

84
00:05:36,130 --> 00:05:39,934
One way to look at it is about openness. The most

85
00:05:39,972 --> 00:05:43,582
pure way of open source is that open

86
00:05:43,636 --> 00:05:47,454
source, what we have already talked about. Then you

87
00:05:47,492 --> 00:05:51,570
have Opencore, which is a mix of open and closed source.

88
00:05:52,070 --> 00:05:56,350
The code of the product must be usable as a standalone

89
00:05:56,510 --> 00:06:00,138
and be open source. The rest of the add OSS

90
00:06:00,174 --> 00:06:03,794
may be closed code. With that in mind, you could differentiate

91
00:06:03,842 --> 00:06:07,494
between open core with a thick closed layer and open

92
00:06:07,532 --> 00:06:11,310
core with a thin closed layer. For example, as in mattermost,

93
00:06:11,330 --> 00:06:15,562
I will say that more than 90% of the code is

94
00:06:15,616 --> 00:06:18,700
open source with a thin layer of closed code.

95
00:06:19,150 --> 00:06:23,006
Apart of that, you may have code available that

96
00:06:23,028 --> 00:06:27,086
is not really open source because the license on top of

97
00:06:27,108 --> 00:06:30,558
this code forbids the use and distribution of

98
00:06:30,564 --> 00:06:34,082
the code. But you are able to look at it making

99
00:06:34,136 --> 00:06:36,900
the code visible, which is also really interesting.

100
00:06:38,230 --> 00:06:42,062
Then you can look at the licenses. Regarding licenses,

101
00:06:42,126 --> 00:06:45,218
there are tons of different licenses,

102
00:06:45,394 --> 00:06:48,854
each one with some kirks. For example,

103
00:06:48,972 --> 00:06:53,494
the GPL license force that any derivative work

104
00:06:53,692 --> 00:06:56,810
must be released as a GPL license.

105
00:06:57,390 --> 00:07:01,066
The BSD one allows you to modify and distribute the

106
00:07:01,088 --> 00:07:04,662
software as long as you keep a copy of the original copyright

107
00:07:04,726 --> 00:07:08,986
notice. List of conditions and disclaimers finally,

108
00:07:09,168 --> 00:07:12,430
the MIT one is one of the most lags,

109
00:07:12,770 --> 00:07:16,286
allowing you to do all the changes you need as long

110
00:07:16,308 --> 00:07:19,454
as you keep a copy of the original license and

111
00:07:19,492 --> 00:07:22,420
copyright notice. Well,

112
00:07:22,870 --> 00:07:25,922
now that the history lesson is over,

113
00:07:26,056 --> 00:07:29,646
let's get down to business. Open source

114
00:07:29,678 --> 00:07:33,598
is great, and it will be great to use it on our project.

115
00:07:33,784 --> 00:07:37,334
But how do we do that? Do we have to go to

116
00:07:37,372 --> 00:07:40,040
every GitHub repository and download it?

117
00:07:41,930 --> 00:07:46,034
Kinda, but not really. That is where package

118
00:07:46,082 --> 00:07:50,022
managers come into place. There are out there many repositories

119
00:07:50,086 --> 00:07:53,626
of open source libraries. Each language has their own,

120
00:07:53,808 --> 00:07:58,570
but I'm going to talk about one we use at mattermost NPM.

121
00:07:59,090 --> 00:08:02,346
NPM stands for node package manager,

122
00:08:02,538 --> 00:08:06,222
but as they say on their website, it's not only

123
00:08:06,276 --> 00:08:10,446
that, it also has a registry of open source packages to

124
00:08:10,468 --> 00:08:14,274
use on your apps. And finally, it is also a

125
00:08:14,312 --> 00:08:17,570
command line client to use or publish those packages.

126
00:08:18,150 --> 00:08:22,034
NPM tracks all your dependencies and

127
00:08:22,072 --> 00:08:26,486
helps you install all the different things you need to make your code work.

128
00:08:26,668 --> 00:08:30,630
And where does it all go? To the node modules folder.

129
00:08:31,050 --> 00:08:35,074
Every single package you need, including their dependencies,

130
00:08:35,202 --> 00:08:38,326
will be downloaded and throw into the node modules

131
00:08:38,358 --> 00:08:41,366
folder. This you see in the slide.

132
00:08:41,478 --> 00:08:44,906
This is part of the contents of the node modules folder in

133
00:08:44,928 --> 00:08:48,998
our mobile app. It is overwhelming the

134
00:08:49,024 --> 00:08:52,110
amount of code we are using that we didn't write ourselves,

135
00:08:52,530 --> 00:08:56,190
and all this code will be compiled and sent

136
00:08:56,260 --> 00:08:59,840
over with our application without any cost.

137
00:09:00,290 --> 00:09:03,742
And part of that is thanks to the concept

138
00:09:03,806 --> 00:09:05,810
of open source software.

139
00:09:06,390 --> 00:09:09,042
But what is inside this?

140
00:09:09,176 --> 00:09:13,058
Let's take a deeper look at the library. At one library, for example,

141
00:09:13,144 --> 00:09:16,694
the base 64 package, as you can see

142
00:09:16,732 --> 00:09:20,246
there we have the full code for us to

143
00:09:20,268 --> 00:09:23,462
see. And here is where the magic of open

144
00:09:23,516 --> 00:09:26,440
source I was talking about starts to happen.

145
00:09:26,990 --> 00:09:30,954
So we have all that code there and

146
00:09:30,992 --> 00:09:34,202
how can we use it? Understanding what

147
00:09:34,256 --> 00:09:38,620
happens beneath for this section, I want to put you into a real example.

148
00:09:39,070 --> 00:09:42,586
At some point we noticed our app was mixing

149
00:09:42,618 --> 00:09:46,318
images. It didn't happen often, so it was really hard to

150
00:09:46,324 --> 00:09:49,726
reproduce, but we were able to pinpoint the issue down

151
00:09:49,748 --> 00:09:52,990
to one of our direct appendices. Fuzzimage.

152
00:09:53,350 --> 00:09:57,570
But more interestingly, it only happened on iOS.

153
00:09:58,390 --> 00:10:01,954
If this was closed code, we may be able to use

154
00:10:01,992 --> 00:10:05,240
a binary of fastimage libraries in our code,

155
00:10:05,690 --> 00:10:09,686
and when we face this problem, our only choice will

156
00:10:09,708 --> 00:10:13,206
be to send an email complaining how their library is

157
00:10:13,228 --> 00:10:17,194
causing problems. But with open source we are

158
00:10:17,232 --> 00:10:20,426
able to get a bit deeper. When we get

159
00:10:20,448 --> 00:10:24,054
to the node modules folder of the fast image libraries,

160
00:10:24,182 --> 00:10:27,514
we see this. The JavaScript side

161
00:10:27,632 --> 00:10:31,582
mainly uses the native component and since our

162
00:10:31,636 --> 00:10:35,166
code only fails in iOS, it makes a lot of

163
00:10:35,188 --> 00:10:38,302
sense or problems over there. But when we go

164
00:10:38,356 --> 00:10:42,654
to the native code we see this fastimage

165
00:10:42,782 --> 00:10:46,446
is implementing an element from another libraries

166
00:10:46,638 --> 00:10:50,674
sd animated image view. So we

167
00:10:50,712 --> 00:10:54,442
found our problem was not directly related to fastimage,

168
00:10:54,526 --> 00:10:58,582
but an underlying library. We were able to go even

169
00:10:58,636 --> 00:11:02,550
farther down looking at the code of this library and

170
00:11:02,700 --> 00:11:05,400
well yeah, we didn't fix the issue,

171
00:11:06,030 --> 00:11:09,638
but we were able to post in their repo

172
00:11:09,734 --> 00:11:14,154
about this problem. And a few versions later the

173
00:11:14,192 --> 00:11:17,786
issue was fixed and ready for

174
00:11:17,968 --> 00:11:20,010
use in the newest version.

175
00:11:20,510 --> 00:11:23,894
But it's not only about tracking

176
00:11:23,942 --> 00:11:27,438
bugs. Sometimes yes, you want to learn more.

177
00:11:27,604 --> 00:11:31,322
For example, should you flatten your styles before

178
00:11:31,396 --> 00:11:35,122
passing them to components in React native? The only

179
00:11:35,176 --> 00:11:38,770
way to know that is to see the underlying implementation.

180
00:11:39,270 --> 00:11:42,900
This is not something you can do with closed code,

181
00:11:43,270 --> 00:11:46,390
but here it's way simpler.

182
00:11:46,890 --> 00:11:50,326
We go to the library and see how things are done under the

183
00:11:50,348 --> 00:11:53,782
hood. In this particular case we see that all

184
00:11:53,836 --> 00:11:57,414
basic components in react native are calling fluttering

185
00:11:57,462 --> 00:12:00,522
style either way, so calling

186
00:12:00,576 --> 00:12:04,780
it ourselves helps at apparently nothing.

187
00:12:05,550 --> 00:12:09,290
Sometimes the libraries are distributed in a minimized way,

188
00:12:09,440 --> 00:12:12,880
making it really difficult to understand what is going on.

189
00:12:13,250 --> 00:12:16,414
Let's imagine we want to check how expensive is

190
00:12:16,452 --> 00:12:19,070
using a use memo in our components.

191
00:12:19,490 --> 00:12:23,106
We want to get some extra performance, but will

192
00:12:23,208 --> 00:12:26,180
use memo really help and at what cost.

193
00:12:26,870 --> 00:12:30,802
So we dive into the code modules files of

194
00:12:30,856 --> 00:12:33,662
react and we find, among other things,

195
00:12:33,816 --> 00:12:38,040
this okay yeah,

196
00:12:38,650 --> 00:12:42,086
as you can see, hard to see what is

197
00:12:42,108 --> 00:12:44,710
going on here, but do not fear.

198
00:12:45,130 --> 00:12:48,220
What we can do is go to the actual code.

199
00:12:48,590 --> 00:12:52,522
How we do this, probably a Google search will

200
00:12:52,576 --> 00:12:55,994
take us where we want to go faster, but let's do it the

201
00:12:56,032 --> 00:12:59,242
long way. First of all, let's go to

202
00:12:59,296 --> 00:13:02,666
RPM and look for the package. Yeah, the package

203
00:13:02,698 --> 00:13:06,942
we're using is react. So there

204
00:13:06,996 --> 00:13:09,854
you have the repository link,

205
00:13:09,972 --> 00:13:13,230
let's go to the repository and voila.

206
00:13:13,650 --> 00:13:16,420
All the react code at the tip of your hands.

207
00:13:17,270 --> 00:13:20,574
After some more searching, making sure you are in the right branch

208
00:13:20,622 --> 00:13:23,060
and so on and so forth, you may find this.

209
00:13:23,770 --> 00:13:28,182
So the actual function I should be looking for

210
00:13:28,316 --> 00:13:31,654
is update memo. And where is that? In my

211
00:13:31,692 --> 00:13:35,222
code modules. Because I mean that

212
00:13:35,276 --> 00:13:38,510
code is executing so it should be somewhere in my note

213
00:13:38,530 --> 00:13:41,580
modules. Let's take a look.

214
00:13:42,190 --> 00:13:46,314
There you are. Apparently react native will implement this

215
00:13:46,352 --> 00:13:49,722
a little bit and looking a bit into it, you can start

216
00:13:49,776 --> 00:13:53,662
grasping the overhead of using use memo, which well

217
00:13:53,716 --> 00:13:55,840
in general is not much.

218
00:13:56,930 --> 00:14:00,206
Well, learning is great, but at some point you

219
00:14:00,228 --> 00:14:03,826
want to get things fixed. So what can

220
00:14:03,848 --> 00:14:07,666
we do? Let's have some real examples about that.

221
00:14:07,848 --> 00:14:11,234
What you see in the screen on the left side is

222
00:14:11,272 --> 00:14:15,174
the comment history of the latest release version of

223
00:14:15,212 --> 00:14:18,886
React Native realized library, one of the libraries we

224
00:14:18,908 --> 00:14:22,486
use at Mattermost. And on the right you

225
00:14:22,508 --> 00:14:25,106
can see the commit history of the main branch.

226
00:14:25,298 --> 00:14:29,366
As you can see, a lot has happened since let's

227
00:14:29,398 --> 00:14:32,986
imagine there's a bug that is affecting my application.

228
00:14:33,088 --> 00:14:36,666
I need to fix it and I know the

229
00:14:36,688 --> 00:14:40,286
bug is in the library, but great,

230
00:14:40,388 --> 00:14:43,994
it is fixed on main but not on the latest

231
00:14:44,042 --> 00:14:47,200
release. If this was closed code,

232
00:14:48,130 --> 00:14:51,482
yeah, I wouldn't even know there's a fixing

233
00:14:51,626 --> 00:14:56,346
in main. All I could do is complain

234
00:14:56,458 --> 00:15:00,430
and hope that some point it will get fixed.

235
00:15:00,850 --> 00:15:04,326
But since this is open source we

236
00:15:04,348 --> 00:15:08,200
know there's a fix and that opens several options.

237
00:15:08,890 --> 00:15:12,150
The easiest one is just wait for the new release,

238
00:15:12,570 --> 00:15:16,390
but sometimes they're bugs more time sensitive.

239
00:15:16,810 --> 00:15:20,394
You may have to align to your own release cycles or it is

240
00:15:20,432 --> 00:15:22,714
affecting a critical part of your app.

241
00:15:22,912 --> 00:15:26,794
Waiting is not always an option. Another option will

242
00:15:26,832 --> 00:15:30,000
be to import the library directly from Main.

243
00:15:32,210 --> 00:15:36,046
That is a bad idea. Depending on the

244
00:15:36,068 --> 00:15:39,738
project, main may not be the best tested and stable branch.

245
00:15:39,914 --> 00:15:43,614
You may be able to afford to add one commit that fixes

246
00:15:43,662 --> 00:15:47,730
the problem you have, but do you want to include all other

247
00:15:47,800 --> 00:15:50,210
changes that maybe create more trouble?

248
00:15:50,950 --> 00:15:54,406
Probably not. One extra option is

249
00:15:54,428 --> 00:15:57,560
to create your own fork and cherry pick the change.

250
00:15:58,090 --> 00:16:01,960
Then you just have to import your fork and that's it.

251
00:16:02,330 --> 00:16:05,974
But then it makes more complicated to keep

252
00:16:06,012 --> 00:16:09,462
the track of the new versions because yeah, a new version

253
00:16:09,606 --> 00:16:13,846
appears on the main repo so you have to sync

254
00:16:13,958 --> 00:16:17,194
your fork or yeah,

255
00:16:17,392 --> 00:16:21,262
you no longer need a fork, so you change back

256
00:16:21,316 --> 00:16:25,470
the reference to import the original library,

257
00:16:25,810 --> 00:16:29,946
but then you want to add another fix so you get back to your fork.

258
00:16:30,058 --> 00:16:33,954
Yeah, that seems a lot of work. The option I like the most

259
00:16:34,152 --> 00:16:37,698
is patching the package. Let's take an example

260
00:16:37,784 --> 00:16:40,420
again the mixed image problem.

261
00:16:40,870 --> 00:16:45,030
I told you that one more recent version of the under lighting library,

262
00:16:45,530 --> 00:16:48,694
the issue was fixed, but what

263
00:16:48,732 --> 00:16:51,670
we are using is the fast image library.

264
00:16:52,170 --> 00:16:56,200
We will need to get that updated too. But no,

265
00:16:56,890 --> 00:17:00,970
it's not needed. If we patch the library,

266
00:17:01,390 --> 00:17:05,580
we just need to find the correct files in the node code folder. For example

267
00:17:05,950 --> 00:17:09,166
this one where you see that we

268
00:17:09,188 --> 00:17:13,600
are setting the library version, make the changes we need

269
00:17:14,210 --> 00:17:18,366
and run Npxpx patch package that

270
00:17:18,388 --> 00:17:21,774
will create a new patch with the changes that

271
00:17:21,812 --> 00:17:24,690
will be used every time I install the library.

272
00:17:25,190 --> 00:17:28,734
As you can see on the left, this is something we sensitively

273
00:17:28,782 --> 00:17:32,450
do in our project, but patches have

274
00:17:32,520 --> 00:17:36,200
one more use changing how things work.

275
00:17:36,650 --> 00:17:40,246
Libraries are great, but sometimes you want them to work in

276
00:17:40,268 --> 00:17:44,002
a slight different manner. You want that tweak

277
00:17:44,146 --> 00:17:47,510
that things that make them more yours.

278
00:17:48,410 --> 00:17:51,834
Again with close code, all you could do

279
00:17:51,872 --> 00:17:55,466
is complain and hope. And if what you needed

280
00:17:55,568 --> 00:17:59,514
is something only you need, you can expect the original

281
00:17:59,562 --> 00:18:03,134
developer to add it. So you may

282
00:18:03,172 --> 00:18:06,798
end up creating your own library just because you needed

283
00:18:06,884 --> 00:18:10,922
that small thing, but not with open source.

284
00:18:11,066 --> 00:18:14,542
Let me give you an example. React native hat

285
00:18:14,606 --> 00:18:18,642
feedback library as you can see here, the different

286
00:18:18,696 --> 00:18:22,146
type of vibrations are hard coded. Probably there

287
00:18:22,168 --> 00:18:25,814
are good reasons for that. But we want a

288
00:18:25,852 --> 00:18:28,934
vibration that has a special duration and

289
00:18:28,972 --> 00:18:32,754
how we do that. We could rebuild

290
00:18:32,802 --> 00:18:36,370
the whole library ourselves so we can have

291
00:18:36,540 --> 00:18:40,874
the durations the way we want them. We could create

292
00:18:40,912 --> 00:18:45,130
a fork and do that in our fork.

293
00:18:46,030 --> 00:18:49,374
Or we can even ask the original developer to comply with

294
00:18:49,412 --> 00:18:51,840
our needs and do the things we need.

295
00:18:52,770 --> 00:18:56,000
But yeah, all that seems kind of wrong.

296
00:18:56,450 --> 00:19:00,334
Let's just patch it. The process is the same as

297
00:19:00,372 --> 00:19:03,966
with the fixes. You modify the file in your non modules

298
00:19:03,998 --> 00:19:07,906
folder, call NPX patch package and

299
00:19:08,008 --> 00:19:11,294
there you have the patch to use the library

300
00:19:11,342 --> 00:19:14,440
as you need. Let's look at another example.

301
00:19:15,210 --> 00:19:19,254
We use Watermelon DB library as an alternative to redux to

302
00:19:19,292 --> 00:19:23,186
store the state of the app. Watermelon Db uses

303
00:19:23,218 --> 00:19:27,334
an underlying SQL live database to store the state in

304
00:19:27,372 --> 00:19:31,062
order to keep the data integrity. It has some checks as the following

305
00:19:31,206 --> 00:19:34,906
you cannot batch elements without changes and you cannot update rows with

306
00:19:34,928 --> 00:19:38,234
pending changes. This is really important

307
00:19:38,432 --> 00:19:42,990
because if not, you may end up with unexpected results.

308
00:19:43,570 --> 00:19:46,990
But we needed to go around those limitations.

309
00:19:47,330 --> 00:19:51,470
We still want to inform the developer they are doing something out of the ordinary.

310
00:19:51,830 --> 00:19:55,154
But if the developer knows what they are doing,

311
00:19:55,352 --> 00:19:58,834
we want to allow it. But that is us.

312
00:19:59,032 --> 00:20:02,610
Most people should still have those guards.

313
00:20:03,110 --> 00:20:06,486
So again, what did we do? Ask the

314
00:20:06,508 --> 00:20:09,734
developer to comply to our needs? No,

315
00:20:09,932 --> 00:20:13,142
we just patched the package. We made

316
00:20:13,196 --> 00:20:16,486
the changes we wanted, so the process continued the

317
00:20:16,508 --> 00:20:20,122
way we thought it was the correct way. We keep it

318
00:20:20,176 --> 00:20:24,634
contained so only us do this in the dangerous way and

319
00:20:24,672 --> 00:20:28,220
we don't have to wait for the original library to get a new release out.

320
00:20:28,670 --> 00:20:32,240
And well, we are almost at the end.

321
00:20:32,610 --> 00:20:35,802
I hope you like this talk and you discover

322
00:20:35,866 --> 00:20:39,342
a new phase of the magic of open source and start

323
00:20:39,396 --> 00:20:42,974
using it to help your projects. But the reality

324
00:20:43,022 --> 00:20:46,338
is that it's not only about the code.

325
00:20:46,504 --> 00:20:49,940
That's not only where open source helps your project.

326
00:20:50,870 --> 00:20:53,410
When you decide to become open source,

327
00:20:53,930 --> 00:20:56,120
you open the door to a community,

328
00:20:56,730 --> 00:21:00,360
people that will help your project to improve in many ways.

329
00:21:00,970 --> 00:21:04,550
People not only contributing code directly.

330
00:21:04,890 --> 00:21:09,100
For example, in Mattermost we have received tons of

331
00:21:09,470 --> 00:21:11,690
localization contributions.

332
00:21:12,430 --> 00:21:16,298
Also, being open source helps you

333
00:21:16,464 --> 00:21:20,122
to achieve better security and security contributions.

334
00:21:20,266 --> 00:21:23,658
For example, with hacker one bounty programs,

335
00:21:23,834 --> 00:21:28,030
or even when a client wants to audit your code,

336
00:21:28,100 --> 00:21:31,938
the security of your code, you can just

337
00:21:32,104 --> 00:21:36,306
have it there, it's there, you can look at it and see how security

338
00:21:36,408 --> 00:21:40,450
is or not. We also have a growing community of

339
00:21:40,520 --> 00:21:44,502
QA contributors, and that helped a lot during

340
00:21:44,556 --> 00:21:48,870
the last October fest. We also have the community server

341
00:21:49,290 --> 00:21:53,126
where a lot of troubleshooting is done many times,

342
00:21:53,308 --> 00:21:57,066
not even by members of the staff, but by peers helping each

343
00:21:57,088 --> 00:22:00,874
other. And of course all the

344
00:22:00,912 --> 00:22:04,970
people that find and report backs or propose new features.

345
00:22:05,550 --> 00:22:08,966
As you can see, opening the code and opening

346
00:22:08,998 --> 00:22:12,506
the door to the community can be a great boost

347
00:22:12,538 --> 00:22:16,046
to your project. And if anyone from the

348
00:22:16,068 --> 00:22:19,342
community is watching this talk, I want to say thank

349
00:22:19,396 --> 00:22:22,660
you. Mattermost wouldn't be the same without you.

350
00:22:23,030 --> 00:22:26,450
And another important thing in open source,

351
00:22:27,030 --> 00:22:30,094
remember to give back. The simplest

352
00:22:30,142 --> 00:22:32,980
thing you can do is open your code.

353
00:22:33,770 --> 00:22:36,520
But yeah, I understand that's not always possible,

354
00:22:37,130 --> 00:22:40,934
but if you are creating any library or

355
00:22:40,972 --> 00:22:43,800
any tool that could be used for more people,

356
00:22:45,290 --> 00:22:48,842
consider opening it. Usually that

357
00:22:48,896 --> 00:22:51,900
is easier to open than the whole project,

358
00:22:52,430 --> 00:22:56,394
and you may be able to help a lot of people out there. The next

359
00:22:56,432 --> 00:22:59,774
best thing is to go out there

360
00:22:59,812 --> 00:23:03,230
and contribute. Whenever you're using a library,

361
00:23:03,650 --> 00:23:07,374
think how you can make it better and try to get

362
00:23:07,412 --> 00:23:11,714
those improvements upstream. Your project will be

363
00:23:11,752 --> 00:23:15,620
better since the library you're using is better,

364
00:23:16,230 --> 00:23:20,466
and you will also make it better for

365
00:23:20,568 --> 00:23:23,746
many more people. And if

366
00:23:23,768 --> 00:23:27,270
you want to do still a bit more, feel free to donate money to different

367
00:23:27,340 --> 00:23:30,834
projects. There are many open source projects out there accepting

368
00:23:30,882 --> 00:23:35,190
donations and that is one way to keep the ball rolling for those projects.

369
00:23:35,770 --> 00:23:38,840
And just to summarize what we talked today,

370
00:23:39,210 --> 00:23:42,582
a few notes. Get comfortable with how

371
00:23:42,636 --> 00:23:46,026
non modules is organized or well, if you are

372
00:23:46,048 --> 00:23:49,610
using any other language. However, that language manages the packages.

373
00:23:50,210 --> 00:23:53,242
Do not be afraid. In diving into library

374
00:23:53,306 --> 00:23:57,738
code, it can help you understand better how things are done under the hood

375
00:23:57,834 --> 00:24:02,334
and help you grow. As an engineer, remember that

376
00:24:02,372 --> 00:24:05,490
you can fix libraries before the change gets upstream.

377
00:24:05,910 --> 00:24:09,346
But of course, if you are the one fixing it,

378
00:24:09,448 --> 00:24:12,610
be nice and create a pull request in the original library.

379
00:24:13,350 --> 00:24:16,758
And last of all, remember that if you want a

380
00:24:16,764 --> 00:24:20,166
different flavor in a libraries, you can always patch it so

381
00:24:20,188 --> 00:24:23,640
it works the way you want. But yeah,

382
00:24:24,410 --> 00:24:28,310
remember that you have patched. So when you face an

383
00:24:28,460 --> 00:24:32,360
issue before creating the issue directly on the

384
00:24:32,970 --> 00:24:36,326
repository of the creator make

385
00:24:36,348 --> 00:24:40,430
sure you didn't introduce the issue with your patches s and

386
00:24:40,500 --> 00:24:43,790
well, thank you very much for watching this talk.

387
00:24:43,940 --> 00:24:47,134
I hope you like it. And if you want to

388
00:24:47,172 --> 00:24:50,926
ask any questions or leave any comment, remember that you can do

389
00:24:50,948 --> 00:24:55,614
it at the office at community mattermost.com.

390
00:24:55,812 --> 00:24:56,330
Goodbye.

