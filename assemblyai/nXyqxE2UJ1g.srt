1
00:00:25,170 --> 00:00:28,870
Terra and security researcher and industry. I will show

2
00:00:28,940 --> 00:00:32,822
how to secrets, keys in Docker containers and

3
00:00:32,876 --> 00:00:36,806
kubernetes in different environments and

4
00:00:36,908 --> 00:00:40,470
also comment best practice for saving and securing

5
00:00:40,890 --> 00:00:45,138
distribution of secrets using specific tools in the devsecops

6
00:00:45,154 --> 00:00:49,266
ecosystem. BSDR have written

7
00:00:49,378 --> 00:00:53,310
public is this book with Italy implemented

8
00:00:53,810 --> 00:00:58,526
Docker and Kubernetes. In this book, basically you

9
00:00:58,548 --> 00:01:02,566
will learn about Docker and Kubernetes as a platform for the development

10
00:01:02,698 --> 00:01:06,386
of containers taking into account the security of

11
00:01:06,408 --> 00:01:09,810
applications. Also you will learn

12
00:01:09,960 --> 00:01:14,226
for example how to secure your Docker and Kubernetes environments and

13
00:01:14,248 --> 00:01:18,174
discover vulnerabilities and threads with specific tools

14
00:01:18,222 --> 00:01:21,080
like Falco, three eco events and so on.

15
00:01:22,170 --> 00:01:25,670
These could be the main points of the tools. First,

16
00:01:25,740 --> 00:01:29,510
I will commend the challenge of security and

17
00:01:29,580 --> 00:01:33,666
secret keys in containers ladder.

18
00:01:33,698 --> 00:01:37,062
I will commend the best practice for securing a security distributing

19
00:01:37,126 --> 00:01:39,340
of secrets in Docker containers. For example,

20
00:01:39,870 --> 00:01:43,694
with Docker secrets we can manage information

21
00:01:43,812 --> 00:01:47,722
that is needed at real time but cannot

22
00:01:47,786 --> 00:01:51,520
be exposed in the Dockerimas or

23
00:01:52,550 --> 00:01:56,162
source code repository. We continue with

24
00:01:56,216 --> 00:02:00,094
managing secrets in Kubernetes using volumes

25
00:02:00,142 --> 00:02:03,454
and sales secrets and finally I will comment

26
00:02:03,502 --> 00:02:07,410
other tools for distributing secrets in containers like

27
00:02:07,480 --> 00:02:11,654
Hashicorp but and keyword we

28
00:02:11,692 --> 00:02:16,070
start commenting the tools factor the tools factor is a methodology that allows

29
00:02:16,730 --> 00:02:20,220
to create software service applications that are

30
00:02:20,590 --> 00:02:24,486
deployed that are usually deployed

31
00:02:24,518 --> 00:02:28,362
in encloded environments. These methodology includes best

32
00:02:28,416 --> 00:02:31,998
practice for applications are developed with

33
00:02:32,164 --> 00:02:36,030
maximum portability, stability, security and fault tolerance.

34
00:02:36,450 --> 00:02:40,474
One of the many philosophy of twelve factor

35
00:02:40,602 --> 00:02:44,770
apps is that configuration should be stored

36
00:02:45,190 --> 00:02:49,106
in the environment. In practical terms, these means

37
00:02:49,208 --> 00:02:52,580
storing configuration separating from other source code.

38
00:02:53,030 --> 00:02:56,854
In general, secrets provide a

39
00:02:56,892 --> 00:03:00,406
mechanism to store data that can be read by application

40
00:03:00,588 --> 00:03:04,594
at runtime and secrets play a critical

41
00:03:04,642 --> 00:03:09,238
role in security when storing sensitive data separately

42
00:03:09,334 --> 00:03:13,366
from application code. This include data such as passwords,

43
00:03:13,398 --> 00:03:16,762
hostname, key certificates and so on. For example,

44
00:03:16,816 --> 00:03:21,094
if your application requires a database connection to

45
00:03:21,152 --> 00:03:24,954
this, usually you need a hostname, a username, a password

46
00:03:25,002 --> 00:03:26,830
for connecting these database.

47
00:03:27,890 --> 00:03:31,642
Furthermore, there's a different database server for development,

48
00:03:31,706 --> 00:03:34,498
testing, production and so on.

49
00:03:34,584 --> 00:03:37,810
And in this way secrets with secrets

50
00:03:41,110 --> 00:03:45,182
you can meet that each environment can provide

51
00:03:45,336 --> 00:03:49,510
its own database information to the applications and the application code

52
00:03:49,660 --> 00:03:53,990
doesn't needed to know which environment it is securing.

53
00:03:54,730 --> 00:03:58,678
Basically, a credential manager or secrets manager

54
00:03:58,854 --> 00:04:02,406
basically is an administrator of credential

55
00:04:02,518 --> 00:04:05,818
passwords, configurations or certificates. The main reason

56
00:04:05,904 --> 00:04:09,578
why our applications are going to need a

57
00:04:09,744 --> 00:04:12,894
secret manager is mainly to

58
00:04:13,012 --> 00:04:16,474
prevent the most sensitive information from being leaked.

59
00:04:16,602 --> 00:04:20,522
In this way we can compare a secrets manager to a user password

60
00:04:20,586 --> 00:04:24,674
manager. These a secrets manager will work at the application

61
00:04:24,792 --> 00:04:29,170
level, sharing credential and connect and connecting certificates

62
00:04:30,150 --> 00:04:34,670
in this way. For example, Docker secrets

63
00:04:34,830 --> 00:04:38,854
is a treaty that can help us to store any type

64
00:04:38,892 --> 00:04:42,550
of data that can be represented as a string or a binary.

65
00:04:44,330 --> 00:04:48,200
At this point, we can include username and passwords, hostname and port

66
00:04:50,110 --> 00:04:53,610
sh keys, TLA certificates,

67
00:04:53,950 --> 00:04:57,818
and so on. The following diagram shows how

68
00:04:57,984 --> 00:05:01,706
Docker use RAF that is a consensus algorithm

69
00:05:01,738 --> 00:05:05,690
for managing a replicated log in a distributed

70
00:05:05,850 --> 00:05:09,246
system to ensure that data remains consistent in the

71
00:05:09,268 --> 00:05:12,414
NT swart and all the service running on

72
00:05:12,452 --> 00:05:16,206
it. Basically, the RAF algorithm transmits a secret in

73
00:05:16,228 --> 00:05:18,850
an incretive way to all the manager nodes.

74
00:05:19,750 --> 00:05:23,166
Other diagrams also shows the worker

75
00:05:23,198 --> 00:05:28,130
nodes which are instances of Docker engine securing

76
00:05:28,290 --> 00:05:32,006
these containers. At this point, Docker secrets works

77
00:05:32,108 --> 00:05:36,342
like a bolt where you can pull sensitive data and

78
00:05:36,396 --> 00:05:39,726
you can only use it if you have the bolt

79
00:05:39,778 --> 00:05:43,434
keys. You can only access this

80
00:05:43,472 --> 00:05:47,034
data if you have the master key or

81
00:05:47,072 --> 00:05:50,638
the bulk keys, which you must

82
00:05:50,724 --> 00:05:54,238
get from the service code to which you actually need

83
00:05:54,324 --> 00:05:59,694
other key. Currently, Docker secrets are

84
00:05:59,732 --> 00:06:04,154
only available to swar service. This means that standalone

85
00:06:04,202 --> 00:06:07,002
containers cannot access Siggrass. Therefore,

86
00:06:07,066 --> 00:06:11,106
to use Sigress, we must configure our cluster for

87
00:06:11,208 --> 00:06:14,734
swar for Docker swar using the Docker swar init command

88
00:06:14,782 --> 00:06:18,166
where the manager IP is

89
00:06:18,188 --> 00:06:21,906
the IP address accented by Docker to the managing node.

90
00:06:22,018 --> 00:06:26,578
And when you add a secret to the swar,

91
00:06:26,754 --> 00:06:30,346
Docker sends the secret to the

92
00:06:30,368 --> 00:06:33,690
swarmanager over a mutual delays connection. For example,

93
00:06:33,760 --> 00:06:37,382
we could use the contents

94
00:06:37,446 --> 00:06:41,280
of a file to create a secret and when you

95
00:06:42,050 --> 00:06:46,750
grant a newly created or running

96
00:06:46,820 --> 00:06:54,442
service access to a secret, the secret

97
00:06:54,506 --> 00:06:57,710
is mounted into the container

98
00:06:59,330 --> 00:07:03,106
in can in memory file system. The location of

99
00:07:03,128 --> 00:07:06,760
the mount point within the containers by default is

100
00:07:10,410 --> 00:07:14,690
secrets name. Due to Docker secrets require

101
00:07:14,770 --> 00:07:18,794
our cluster to be in Swarmode, we cannot access

102
00:07:18,992 --> 00:07:22,294
other secrets from the normal Docker run command.

103
00:07:22,422 --> 00:07:25,994
Instead, we have to create services and we

104
00:07:26,032 --> 00:07:29,580
can specify when creating services.

105
00:07:31,410 --> 00:07:35,454
At this moment we

106
00:07:35,492 --> 00:07:38,634
can create secrets associated

107
00:07:38,682 --> 00:07:42,362
to these services. In this example we are creating ready

108
00:07:42,436 --> 00:07:46,162
services and granting access to other secret that

109
00:07:46,216 --> 00:07:49,970
we have created. Next, we can for example

110
00:07:50,040 --> 00:07:54,094
get the identifier of the ready service tax container

111
00:07:54,222 --> 00:07:57,746
using the Docker PS command and at

112
00:07:57,768 --> 00:08:00,914
this point you can use Docker containers, a command

113
00:08:00,962 --> 00:08:04,994
to connect to the container and read the context

114
00:08:05,042 --> 00:08:07,030
of the secret data file.

115
00:08:09,310 --> 00:08:12,746
When you add or inspect an individual secret at

116
00:08:12,768 --> 00:08:15,770
any time or list all secrets,

117
00:08:16,750 --> 00:08:21,614
the limitation is that you

118
00:08:21,652 --> 00:08:25,038
cannot remove a secret that is running services

119
00:08:25,204 --> 00:08:28,350
is using. If you try removing the secret,

120
00:08:29,170 --> 00:08:33,186
the removal file because other Reddit service is running

121
00:08:33,368 --> 00:08:36,798
and has access to the secret.

122
00:08:36,974 --> 00:08:40,802
In this example, we are removing the secret by the service

123
00:08:40,936 --> 00:08:44,114
and to remove normally what is we

124
00:08:44,152 --> 00:08:48,082
want to remove a secret without distributing

125
00:08:48,146 --> 00:08:52,710
the running service. You can use other techniques like rotating secrets

126
00:08:53,770 --> 00:08:57,240
using other techniques. For example, establishing a policy

127
00:08:57,850 --> 00:09:01,750
of your secret keys.

128
00:09:02,090 --> 00:09:08,394
Next, for example, we call verify other

129
00:09:08,432 --> 00:09:11,790
service no longer has access to the secrets.

130
00:09:12,130 --> 00:09:17,838
In this way a node only has access to

131
00:09:17,924 --> 00:09:22,590
encrypt secrets and if the code only

132
00:09:22,660 --> 00:09:26,546
has access to a secret, if other node is

133
00:09:26,568 --> 00:09:30,338
a swarm manager or if this is running service

134
00:09:30,424 --> 00:09:33,842
tasks which have been rated access to the secret and

135
00:09:33,896 --> 00:09:36,820
when a container tasks stop running,

136
00:09:37,670 --> 00:09:41,014
the decrypted secrets are unmounted from the

137
00:09:41,052 --> 00:09:44,994
memory system file system for that container

138
00:09:45,042 --> 00:09:47,910
and fluid from the code memory.

139
00:09:48,750 --> 00:09:51,910
We continue commenting. Best practice associated

140
00:09:51,990 --> 00:09:58,022
with when we needed to secure

141
00:09:58,166 --> 00:10:01,678
this kind of information. For example, is it considered a

142
00:10:01,684 --> 00:10:05,438
best practice to remove a secret once it's no longer

143
00:10:05,524 --> 00:10:09,530
needed? For example, we can permanently remove a secret

144
00:10:09,610 --> 00:10:13,466
using the command Docker secret

145
00:10:13,658 --> 00:10:16,530
rein secrets.

146
00:10:16,870 --> 00:10:20,178
At this point it's important to remember that before

147
00:10:20,264 --> 00:10:24,130
remove the secret, we need to stop and remove

148
00:10:24,810 --> 00:10:27,990
services that are using this secret

149
00:10:28,410 --> 00:10:32,006
docker. Another best practice for example

150
00:10:32,108 --> 00:10:35,590
is relative with Docker that makes

151
00:10:35,660 --> 00:10:38,854
secrets available to our application as files.

152
00:10:38,982 --> 00:10:42,522
As we have seen before, the could behavior is

153
00:10:42,576 --> 00:10:46,394
to make each secret its own file in the

154
00:10:46,432 --> 00:10:50,086
directory run secrets. But this

155
00:10:50,128 --> 00:10:53,214
default behavior can be changed if

156
00:10:53,252 --> 00:10:56,894
we change the location of the file by securing it

157
00:10:56,932 --> 00:11:00,778
with our service. For example, the following command is useful

158
00:11:00,874 --> 00:11:04,126
is the secret if the secret contains information

159
00:11:04,308 --> 00:11:08,698
that our application expects in a specific location.

160
00:11:08,874 --> 00:11:12,750
The secret functionalities are available using Docker compose

161
00:11:14,050 --> 00:11:18,040
the following file configuration we define two secrets other

162
00:11:18,650 --> 00:11:22,770
first one is external, meaning it refers to a secret created

163
00:11:22,930 --> 00:11:26,646
using the docker secret command and the second one refers to

164
00:11:26,668 --> 00:11:30,070
a file and doesn't require any initial

165
00:11:30,150 --> 00:11:33,722
setup with Docker. Keep in mind that using

166
00:11:33,856 --> 00:11:37,226
the file approach bypass most of other benefits of

167
00:11:37,248 --> 00:11:40,314
using Docker secret. Also, other file

168
00:11:40,362 --> 00:11:44,254
must be available to all hosts where the service might

169
00:11:44,292 --> 00:11:47,534
run my execute and we must take care to

170
00:11:47,572 --> 00:11:51,550
protect the content of the file using mechanisms

171
00:11:52,850 --> 00:11:57,590
other than Docker. For example, using encryption techniques

172
00:11:57,770 --> 00:12:00,942
over this file that we are sharing in the docker host.

173
00:12:01,006 --> 00:12:04,706
For example, docker composite tasks can

174
00:12:04,728 --> 00:12:08,420
be deployed using other docker client and

175
00:12:08,790 --> 00:12:13,334
as part of the developed deployment other

176
00:12:13,372 --> 00:12:16,886
stack will be configured with access to

177
00:12:16,908 --> 00:12:20,854
the secret and the following commas allow deploying

178
00:12:20,902 --> 00:12:25,370
the services and access other secrets that

179
00:12:25,440 --> 00:12:30,022
we are deploying with

180
00:12:30,096 --> 00:12:35,806
Docker stack. Now we are commenting the

181
00:12:35,828 --> 00:12:40,174
same button in Kubernetes when working with Kubernetes well,

182
00:12:40,212 --> 00:12:44,286
the most easy way to create a secret is using the Kubectl command

183
00:12:44,398 --> 00:12:48,798
to reference the manifest file you just created

184
00:12:48,894 --> 00:12:52,446
and the request will be sent to the APA server

185
00:12:52,558 --> 00:12:57,110
in the Kubernetes control plane for the request to be action.

186
00:12:57,610 --> 00:13:01,362
Afterward, other data will be stored in the ETC

187
00:13:01,426 --> 00:13:04,998
data store of your cluster when worker go in.

188
00:13:05,004 --> 00:13:08,534
Kubernetes secrets also can also be passed

189
00:13:08,582 --> 00:13:12,694
to containers using mounted

190
00:13:12,742 --> 00:13:16,694
volumes. This will cause the configuration

191
00:13:16,742 --> 00:13:20,894
data to appear in files available to the container file system and

192
00:13:20,932 --> 00:13:24,846
each top level k in the configuration data will appear as a

193
00:13:24,868 --> 00:13:28,062
file containing all case below that top

194
00:13:28,116 --> 00:13:32,042
level k. Within the Kubernetes ecosystem

195
00:13:32,106 --> 00:13:35,646
we can find other projects that allow the management

196
00:13:35,678 --> 00:13:39,490
of secrets. For example, Seal secrets

197
00:13:41,110 --> 00:13:45,230
project is a tool that allows to encrypt secrets using

198
00:13:45,320 --> 00:13:49,094
a resource called seed secrets. This tool can be used

199
00:13:49,132 --> 00:13:52,758
to encrypt Kubernetes secrets and store it

200
00:13:52,924 --> 00:13:56,306
on the GitHub repository. In this way seed

201
00:13:56,338 --> 00:14:00,214
secret encrypts the secret data and

202
00:14:00,252 --> 00:14:03,730
it can be decrypt using the Kubernetes crusted

203
00:14:03,810 --> 00:14:07,402
controller. The main components of these solutions are the

204
00:14:07,456 --> 00:14:11,386
client used to generate encrypted secrets.

205
00:14:11,418 --> 00:14:14,926
At this point the user don't have the capacity to

206
00:14:14,948 --> 00:14:19,214
decrypt except the secret controller and

207
00:14:19,252 --> 00:14:22,946
the other components is other Kubernetes secret controller used to

208
00:14:22,968 --> 00:14:26,674
decrypt the seal secret and store it as

209
00:14:26,712 --> 00:14:29,970
a secret in the Kubernetes cluster.

210
00:14:31,030 --> 00:14:34,750
The solution is based on a publicly infrastructure

211
00:14:34,830 --> 00:14:38,678
and serves a public key to encrypt and install a

212
00:14:38,684 --> 00:14:42,226
private key on the cluster. Basically this tool encrypts

213
00:14:42,258 --> 00:14:45,942
data using a public key for the cluster using

214
00:14:45,996 --> 00:14:50,490
the certificate of the Kubernetes cluster when it's applied

215
00:14:50,830 --> 00:14:55,286
in the following configuration file we are defining a secret

216
00:14:55,398 --> 00:14:59,466
that containers user key and password in

217
00:14:59,568 --> 00:15:03,258
base 64 format which are easily

218
00:15:03,434 --> 00:15:06,782
reversible for

219
00:15:06,836 --> 00:15:10,782
securing this configuration file that

220
00:15:10,836 --> 00:15:16,062
containers critical

221
00:15:16,126 --> 00:15:19,394
information. You can other create a secret and

222
00:15:19,432 --> 00:15:23,538
seal it with Kubernetes solute that can be found in

223
00:15:23,544 --> 00:15:27,374
the GitHub repository of the project and the following command

224
00:15:27,422 --> 00:15:30,774
generates encrypt data for the secret and is not

225
00:15:30,812 --> 00:15:34,342
possible to decrypt except using the

226
00:15:34,396 --> 00:15:38,600
sealed secret controller. This is the encrypt data

227
00:15:39,450 --> 00:15:42,754
for the secret generated with the Kubernetes

228
00:15:42,802 --> 00:15:47,034
Seal command and at this point no

229
00:15:47,072 --> 00:15:50,502
one can decrypt except the CFC controller.

230
00:15:50,646 --> 00:15:53,614
The previous manifest file for example can be used.

231
00:15:53,652 --> 00:15:57,834
We can use the previous manifest file to create the seal secret

232
00:15:57,962 --> 00:16:01,466
in your cluster and can be executed

233
00:16:01,498 --> 00:16:05,074
using the Kubectl apply command and at this point this

234
00:16:05,112 --> 00:16:08,866
seal secret can be used to be

235
00:16:08,968 --> 00:16:12,434
pushed to the jeep repository without the

236
00:16:12,472 --> 00:16:16,086
consent of any individual accessing other

237
00:16:16,108 --> 00:16:19,814
original volumes. Docker and Kubernetes secrets are

238
00:16:19,852 --> 00:16:23,702
SLS solutions, but you can also consider third

239
00:16:23,756 --> 00:16:27,746
party secret restoration solutions. Some popular secrets

240
00:16:27,778 --> 00:16:30,626
management alternatives include Hashicorp,

241
00:16:30,818 --> 00:16:32,070
Kweeth,

242
00:16:34,030 --> 00:16:37,658
Achilles, Bolt. Also we have

243
00:16:37,744 --> 00:16:40,926
cloud provider solutions, specific solutions for

244
00:16:41,028 --> 00:16:42,110
AWS,

245
00:16:44,610 --> 00:16:47,790
Google Cloud, Google Cloud and so on,

246
00:16:47,940 --> 00:16:54,798
Azure and so on. For example, we can start with a

247
00:16:54,804 --> 00:16:58,418
tool for storing and accessing secrets in a securing way that

248
00:16:58,504 --> 00:17:01,982
offers an interface for storing secrets while providing

249
00:17:02,126 --> 00:17:05,570
an access control system and an access lock system.

250
00:17:05,720 --> 00:17:09,778
In these diagram we highlight how Bolt make a separation

251
00:17:09,874 --> 00:17:13,174
between the different components. On one hand we have the

252
00:17:13,212 --> 00:17:16,786
storage component and on the other hand we have the components

253
00:17:16,818 --> 00:17:21,034
to generate the secrets and credentials to

254
00:17:21,072 --> 00:17:24,410
access these secrets. When bolt is start

255
00:17:24,480 --> 00:17:28,074
for the fish time, an encryption key generated and

256
00:17:28,112 --> 00:17:30,140
is used to protect all information.

257
00:17:31,330 --> 00:17:35,258
This key is protected by a master key which by default

258
00:17:35,354 --> 00:17:39,758
is split into five shaded keys and at these point

259
00:17:39,924 --> 00:17:44,110
we will be able to generate the master keys with three of these

260
00:17:44,180 --> 00:17:47,826
five shaded keys and with this case we

261
00:17:47,848 --> 00:17:49,730
could access the secrets.

262
00:17:51,030 --> 00:17:54,914
Secrets are encrypted outside bowel using what

263
00:17:54,952 --> 00:17:59,750
is called Bowel's transit secrets giant

264
00:18:00,970 --> 00:18:05,734
is can encryption as a service solution to

265
00:18:05,772 --> 00:18:09,206
be secure? Bowl performs cryptographic funtios

266
00:18:09,238 --> 00:18:13,210
on data intransit and doesn't store data

267
00:18:13,280 --> 00:18:17,814
while the data is intransit. Bow, like other hashicorp

268
00:18:17,862 --> 00:18:21,754
tools such as console and Nomad, provides a

269
00:18:21,792 --> 00:18:26,630
graphical user interface accessible

270
00:18:26,710 --> 00:18:30,734
through the roster that allows other same operations to be executed through

271
00:18:30,772 --> 00:18:34,046
the API or from the command line.

272
00:18:34,228 --> 00:18:39,086
These are the keys features of other valve. We can highlight features

273
00:18:39,118 --> 00:18:43,140
like the capacity to encrypt and decrypt data

274
00:18:43,590 --> 00:18:46,680
without storing it. Other data

275
00:18:47,050 --> 00:18:51,046
have the capacity also to generate secrets on

276
00:18:51,068 --> 00:18:54,482
demand for certain operations. Also allows

277
00:18:54,546 --> 00:18:57,990
the replication across multiple data centers,

278
00:18:58,350 --> 00:19:03,114
offers protection for secret renovation and

279
00:19:03,312 --> 00:19:06,922
ships as a secret repository with

280
00:19:06,976 --> 00:19:10,886
access control details and another interesting tool

281
00:19:10,928 --> 00:19:14,366
is keyword in a similar way that we have

282
00:19:14,388 --> 00:19:17,774
seen with all kwith helps with

283
00:19:17,812 --> 00:19:20,970
infrastructure tools, secrets, GPG carriers,

284
00:19:21,130 --> 00:19:25,394
database credentials, tilly certificates and

285
00:19:25,432 --> 00:19:29,138
so on. These are the

286
00:19:29,144 --> 00:19:32,846
main components of these solutions are the kwith server

287
00:19:33,038 --> 00:19:36,974
that provides JSON API for accessing and managing

288
00:19:37,022 --> 00:19:40,114
the secrets KCNC that is

289
00:19:40,152 --> 00:19:44,070
a kwith client that retrieves secrets from

290
00:19:44,140 --> 00:19:47,602
the keyword server using tools with a client

291
00:19:47,666 --> 00:19:51,466
certificates. Other client Other K with CLE is

292
00:19:51,488 --> 00:19:57,274
the main tool for managing the secrets for

293
00:19:57,312 --> 00:20:00,842
managing the secrets and the users that can now take

294
00:20:00,896 --> 00:20:04,154
these secrets and the automotive API

295
00:20:04,202 --> 00:20:07,646
is the API we can use for request access to

296
00:20:07,668 --> 00:20:09,840
these secrets. For example,

297
00:20:12,050 --> 00:20:15,890
in this script capture, we can see where we can add

298
00:20:15,960 --> 00:20:20,286
a secret using K with clip

299
00:20:20,478 --> 00:20:24,850
and the K with automation API

300
00:20:27,210 --> 00:20:31,400
for making a request using

301
00:20:32,090 --> 00:20:35,986
a client certificate. The main features of kwith

302
00:20:36,098 --> 00:20:39,822
are basically kwith helps

303
00:20:39,986 --> 00:20:43,354
with the main advantage of this tool

304
00:20:43,472 --> 00:20:47,078
is that has the capacity to store all secrets

305
00:20:47,174 --> 00:20:51,338
in memory only. Another interesting solution that

306
00:20:51,424 --> 00:20:55,610
provides cloud providers, for example IBls

307
00:20:56,130 --> 00:20:59,854
secret managers lets you quickly rotate, manage and

308
00:20:59,892 --> 00:21:03,970
retrieve database credentials, APK and passwords.

309
00:21:04,710 --> 00:21:08,900
Using these solutions you can secure, analyze and manage

310
00:21:09,510 --> 00:21:13,342
secrets needed to access the AWS

311
00:21:13,406 --> 00:21:16,674
cloud capabilities on third party service and

312
00:21:16,712 --> 00:21:20,286
on premise. This is the main features

313
00:21:20,318 --> 00:21:24,946
of these solutions. It has the capacity to encrypt other secrets

314
00:21:25,058 --> 00:21:28,762
transmitting over TLS in a way that we have seen

315
00:21:28,816 --> 00:21:32,810
with Hashicorp and Kwith also

316
00:21:32,880 --> 00:21:36,694
provides client side catching libraries

317
00:21:36,742 --> 00:21:40,970
to improve the availability and reduce the latency

318
00:21:41,050 --> 00:21:45,200
of using your secret. And obviously you can use

319
00:21:45,730 --> 00:21:49,150
a specific service from AWS.

320
00:21:49,970 --> 00:21:53,962
For example you can use BPC

321
00:21:54,026 --> 00:21:55,790
virtual private club.

322
00:21:57,510 --> 00:22:00,962
You can configure this service these

323
00:22:01,016 --> 00:22:04,530
close service to keep traffic within the

324
00:22:04,680 --> 00:22:08,374
OS network. If you are hosting your application on

325
00:22:08,412 --> 00:22:12,518
Azure, for example, there is a tool specific called

326
00:22:12,684 --> 00:22:16,438
Azure cable that enables users to manage

327
00:22:16,524 --> 00:22:22,166
all secrets for their applications that are deployed in

328
00:22:22,188 --> 00:22:25,434
the Azure cloud provider. This tool

329
00:22:25,472 --> 00:22:29,014
has the capacity to ensure that all your secrets are managing

330
00:22:29,062 --> 00:22:32,730
in a single repository. This includes key certificates,

331
00:22:32,810 --> 00:22:36,746
connection strings and password and you can use K Vault's

332
00:22:36,778 --> 00:22:41,034
Rest API for connecting your application with the Azure

333
00:22:41,162 --> 00:22:45,620
cable. Another tool that we can see

334
00:22:47,110 --> 00:22:51,460
in this ecosystem is Aki less but that is

335
00:22:52,310 --> 00:22:56,414
similar tool that basically provides sower

336
00:22:56,462 --> 00:23:00,214
as a service platform that has the capacity to

337
00:23:00,252 --> 00:23:04,882
protect credentials both static dynamic including

338
00:23:05,026 --> 00:23:08,886
third certificate, automatician and encryption keys.

339
00:23:09,078 --> 00:23:14,826
This platform supports the

340
00:23:14,848 --> 00:23:18,806
main features of this tool that provides a serotras

341
00:23:18,838 --> 00:23:23,310
application access by providing unify authentication

342
00:23:23,890 --> 00:23:28,074
and provides also an encryption as a service allowing

343
00:23:28,122 --> 00:23:32,074
customers to protect sensitive data and useless

344
00:23:32,122 --> 00:23:35,950
data by applying feeds

345
00:23:38,390 --> 00:23:41,598
142 certificate

346
00:23:41,694 --> 00:23:43,970
certified up level encryption.

347
00:23:46,890 --> 00:23:50,790
This kind of certificate or

348
00:23:50,860 --> 00:23:54,658
certificate is a security standard for accreditation

349
00:23:54,754 --> 00:23:59,018
of cryptographic models used in

350
00:23:59,024 --> 00:24:02,170
other cryptography industry mainly. And finally

351
00:24:02,240 --> 00:24:06,134
for concluding remember that not stored

352
00:24:06,182 --> 00:24:10,086
secrets in the application system environment variables or

353
00:24:10,128 --> 00:24:14,266
source code managing system and the main recommendation

354
00:24:14,378 --> 00:24:18,430
is using secrets

355
00:24:18,770 --> 00:24:22,954
as a main tool for any container based architecture

356
00:24:23,002 --> 00:24:26,590
application because they help to achieve the goal of

357
00:24:26,660 --> 00:24:30,638
keeping code and configurations in asylum separate and

358
00:24:30,804 --> 00:24:34,346
recommend adopt some of these managing

359
00:24:34,378 --> 00:24:38,200
solutions because sensitive information can be

360
00:24:38,730 --> 00:24:42,338
easily leaked and out of the credentials

361
00:24:42,434 --> 00:24:45,858
could make applications vulnerable.

362
00:24:46,034 --> 00:24:48,760
And that's all. Thank you very much.

