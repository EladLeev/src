1
00:00:20,170 --> 00:00:24,122
Hello everyone, and welcome to falling in love with unit testing.

2
00:00:24,266 --> 00:00:27,990
My name is Joe Skeen and I've been writing code for nearly 30

3
00:00:28,060 --> 00:00:31,862
years, starting from a very young age, and have used

4
00:00:31,916 --> 00:00:35,574
a multitude of languages and frameworks. My absolute

5
00:00:35,692 --> 00:00:39,654
driving passion is helping engineers across the software development

6
00:00:39,702 --> 00:00:43,750
community stay excited about doing software development

7
00:00:43,910 --> 00:00:47,126
and to keep learning and growing throughout their careers.

8
00:00:47,318 --> 00:00:51,350
One of my favorite topics two teach when doing mentorships or trainings

9
00:00:51,430 --> 00:00:54,586
is unit testing. And over the years I've developed

10
00:00:54,618 --> 00:00:58,126
an approach, two unit testing, that not only has improved how

11
00:00:58,148 --> 00:01:02,206
I write tests, but also how I write all of my code.

12
00:01:02,388 --> 00:01:05,634
It has changed my attitude towards writing tests from being

13
00:01:05,672 --> 00:01:09,506
a chore to a sheer delight. Today, I hope I

14
00:01:09,528 --> 00:01:13,282
can show you how to shed your fear of unit testing and become

15
00:01:13,336 --> 00:01:17,430
a happier, more well adjusted software engineer.

16
00:01:17,850 --> 00:01:21,922
Throughout my career, I have encountered very few developers

17
00:01:22,066 --> 00:01:25,622
who don't think that unit testing is valuable. There are

18
00:01:25,676 --> 00:01:29,114
so many benefits to unit testing, including but not

19
00:01:29,152 --> 00:01:32,602
limited to early bug detection and

20
00:01:32,656 --> 00:01:35,530
regression prevention through continuous integration,

21
00:01:36,110 --> 00:01:39,050
ability to refactor code more competently,

22
00:01:39,550 --> 00:01:43,600
a more well thought through design leading to better quote quality

23
00:01:44,210 --> 00:01:47,040
living documentation, and more.

24
00:01:47,570 --> 00:01:51,374
In today's world, with AI tooling becoming more

25
00:01:51,412 --> 00:01:54,834
readily available, it's important to remember that

26
00:01:54,872 --> 00:01:58,466
one of the most important things we contribute to our work

27
00:01:58,568 --> 00:02:01,780
as developers is our focused thought.

28
00:02:02,230 --> 00:02:05,714
We are paid for our abilities of how we think,

29
00:02:05,912 --> 00:02:09,560
but we also need a good way to validate what we think.

30
00:02:10,010 --> 00:02:14,086
Sure, we may think we understand everything about our program now,

31
00:02:14,268 --> 00:02:18,810
but what about in a year when we've been off working on other projects?

32
00:02:19,310 --> 00:02:23,206
As we spend the time to write quality test cases, it helps

33
00:02:23,238 --> 00:02:26,502
to challenge assumptions and focus our implementation

34
00:02:26,566 --> 00:02:29,580
on solving the right problems in the right way.

35
00:02:30,190 --> 00:02:33,646
This quote from Trish Koo, director of engineering at

36
00:02:33,668 --> 00:02:37,742
Octopus deploy sums it up pretty well. The more

37
00:02:37,796 --> 00:02:41,534
effort I put into testing the product conceptually at the start

38
00:02:41,572 --> 00:02:45,342
of the process, the less effort I have to put into manually

39
00:02:45,406 --> 00:02:49,214
testing the product at the end because fewer bugs

40
00:02:49,262 --> 00:02:52,610
emerge as a result. At the same time,

41
00:02:52,680 --> 00:02:56,306
though, can overwhelming majority of the engineers I've encountered

42
00:02:56,338 --> 00:03:00,642
throughout my career didn't actually feel comfortable writing unit tests.

43
00:03:00,786 --> 00:03:04,054
But why is that? I've heard stories where

44
00:03:04,092 --> 00:03:08,102
management at a company makes an edict that an arbitrary amount of code

45
00:03:08,156 --> 00:03:11,894
coverage must be maintained on the code base. For developers

46
00:03:11,942 --> 00:03:15,286
in things situation that are inexperienced with unit testing,

47
00:03:15,398 --> 00:03:18,330
things can lead to a lot of negative experiences.

48
00:03:18,750 --> 00:03:22,038
I've heard that a lot of other people feel too much pressure from

49
00:03:22,064 --> 00:03:26,298
their boss, stakeholders, et cetera, to deliver on a tight deadline

50
00:03:26,394 --> 00:03:29,280
that they don't feel that they have enough time to test.

51
00:03:29,650 --> 00:03:33,034
But if testing helps prevent regressions and detect bugs

52
00:03:33,082 --> 00:03:36,706
early, wouldn't that mean that doing testing actually saves time,

53
00:03:36,808 --> 00:03:40,242
not spends it? After giving this a great deal

54
00:03:40,296 --> 00:03:43,634
of thought, I've come to the conclusion that most developers are

55
00:03:43,672 --> 00:03:47,214
uncomfortable with unit testing simply because they never

56
00:03:47,272 --> 00:03:51,142
learned how to do it well. I mean, think about it.

57
00:03:51,276 --> 00:03:54,966
Some developers are self taught. I was in that category in

58
00:03:54,988 --> 00:03:58,738
my early career, and I can tell you that the thought never crossed

59
00:03:58,754 --> 00:04:02,454
my mind that learning how to do unit testing was an essential

60
00:04:02,502 --> 00:04:06,042
skill that I needed to pick up. I hadn't even really heard

61
00:04:06,096 --> 00:04:09,366
the term unit test until I was in college earning

62
00:04:09,398 --> 00:04:12,922
my CS degree. But even then, as a CS

63
00:04:12,986 --> 00:04:16,874
student, I didn't feel like I really understood what unit testing

64
00:04:16,922 --> 00:04:19,600
was and why it was important for me to do.

65
00:04:20,050 --> 00:04:23,338
More recently, I've talked with many colleagues who received

66
00:04:23,354 --> 00:04:26,910
their CS education through a fast paced bootcamp.

67
00:04:27,270 --> 00:04:30,514
These programs are mostly designed to teach just enough

68
00:04:30,632 --> 00:04:33,554
that a student can land their first CS job,

69
00:04:33,752 --> 00:04:37,490
and unit testing rarely falls on that critical path.

70
00:04:37,930 --> 00:04:42,070
So no wonder unit testing doesn't come naturally to any of us.

71
00:04:42,220 --> 00:04:45,494
Most of us haven't had a good chance to learn how to become really

72
00:04:45,532 --> 00:04:49,174
good at it. My journey to becoming a unit testing

73
00:04:49,222 --> 00:04:52,380
evangelist began at my first job out of college.

74
00:04:52,830 --> 00:04:56,566
My manager, Sheldon Hancock, organized a book club

75
00:04:56,598 --> 00:05:00,450
amongst the development team to study the art of unit testing

76
00:05:00,550 --> 00:05:03,758
by Roy Oshirov it was

77
00:05:03,844 --> 00:05:08,266
through this discussion and study that I became excited about unit testing,

78
00:05:08,378 --> 00:05:12,014
an excitement that has only grown over the past decade or so.

79
00:05:12,212 --> 00:05:15,666
I was very fortunate to have good mentors early in my

80
00:05:15,688 --> 00:05:19,246
professional career to show me the joy of unit testing,

81
00:05:19,358 --> 00:05:22,754
and before long, I found myself teaching others what I had

82
00:05:22,792 --> 00:05:26,478
learned before diving into the four keys to unit

83
00:05:26,494 --> 00:05:30,070
testing success. Let's quickly clarify what a unit test

84
00:05:30,140 --> 00:05:33,426
is and how it differs from other types of testing.

85
00:05:33,618 --> 00:05:37,270
A unit test is a test in which you are able to isolate a small

86
00:05:37,340 --> 00:05:41,082
piece of code from the rest of the application and

87
00:05:41,136 --> 00:05:44,826
test it under a variety of circumstances to verify the correct

88
00:05:44,928 --> 00:05:48,326
behavior of that component. Although other types

89
00:05:48,358 --> 00:05:51,898
of testing, including integration and endtoend testing,

90
00:05:51,994 --> 00:05:55,646
have their place, unit testing should be the

91
00:05:55,668 --> 00:05:59,120
types of tests that you invest the most heavily in.

92
00:05:59,490 --> 00:06:02,882
The more parts of your application that are involved in a test

93
00:06:02,936 --> 00:06:06,498
case, the more likely that a new feature or change

94
00:06:06,584 --> 00:06:10,126
will break that test, leading to constant fixing

95
00:06:10,158 --> 00:06:13,266
up of those tests. A unit test,

96
00:06:13,368 --> 00:06:16,942
once written correctly, should only have to change if the requirements

97
00:06:17,006 --> 00:06:19,940
for that one specific piece of code change.

98
00:06:20,470 --> 00:06:23,590
Thus, well written unit tests have a lower

99
00:06:23,660 --> 00:06:26,886
maintenance cost than other types of tests and a

100
00:06:26,908 --> 00:06:29,580
greater return on investment over time.

101
00:06:30,190 --> 00:06:34,234
Let's discuss the four keys I have found to being successful in

102
00:06:34,272 --> 00:06:37,882
unit testing. Key one break

103
00:06:37,936 --> 00:06:41,646
it down into distinct use cases to understand the problem you

104
00:06:41,668 --> 00:06:45,582
are solving. Unit testing is a process of

105
00:06:45,716 --> 00:06:49,150
reconciling our product requirements with reality.

106
00:06:49,650 --> 00:06:53,202
It is, at its core, identifying how our code

107
00:06:53,256 --> 00:06:56,798
should behave, not just when things go as planned,

108
00:06:56,894 --> 00:07:01,060
but defining behavior for unexpected circumstances as well.

109
00:07:01,590 --> 00:07:04,782
As we begin to tease these use cases apart,

110
00:07:04,926 --> 00:07:09,062
we gain a deeper understanding of the problem we are solving and

111
00:07:09,116 --> 00:07:12,786
leave our code well equipped to handle whatever the user will throw

112
00:07:12,818 --> 00:07:16,774
at it. Sometimes, before I even start writing any

113
00:07:16,812 --> 00:07:20,842
code or tests, I'll sit down and think about what my code

114
00:07:20,896 --> 00:07:24,342
will do. I'll draft up a series of statements

115
00:07:24,486 --> 00:07:29,110
of what given function in a variety of circumstances

116
00:07:29,190 --> 00:07:32,734
should do. Two illustrate this let's take

117
00:07:32,772 --> 00:07:36,622
an everyday object that most people should be familiar with,

118
00:07:36,756 --> 00:07:40,350
a door. While conceptually simple,

119
00:07:40,500 --> 00:07:44,286
a door system is comprised of a number of components,

120
00:07:44,478 --> 00:07:48,958
the wood panel, the door itself, the door frame,

121
00:07:49,134 --> 00:07:53,266
the hinges, the doorknob, and sometimes a

122
00:07:53,288 --> 00:07:56,360
doorstopper to prevent damage to a nearby wall.

123
00:07:56,730 --> 00:08:00,610
For this example, as we're talking about unit testing,

124
00:08:00,770 --> 00:08:04,246
let's take a single component of the door system

125
00:08:04,428 --> 00:08:06,950
and define its expected behavior,

126
00:08:07,390 --> 00:08:10,842
the doorknob. Specifically, let's talk

127
00:08:10,896 --> 00:08:14,454
through a simple interior locking doorknob

128
00:08:14,582 --> 00:08:17,706
called a privacy knob, such as one you

129
00:08:17,728 --> 00:08:20,490
may have on your bedroom or bathroom door.

130
00:08:20,930 --> 00:08:24,362
Before defining the behavior, it's helpful to define

131
00:08:24,426 --> 00:08:28,186
the nouns of your component, as it helps you establish a shared

132
00:08:28,218 --> 00:08:30,734
vocabulary with others who will read things.

133
00:08:30,772 --> 00:08:34,426
Specification I found this image on Amazon,

134
00:08:34,538 --> 00:08:37,954
not a sponsor, that illustrates the kind of knob I have

135
00:08:37,992 --> 00:08:41,506
in mind, then annotated it with the terms I will use to

136
00:08:41,528 --> 00:08:45,750
describe the parts of it the outside knob, the inside

137
00:08:45,820 --> 00:08:49,830
knob, the push button, and the latch bolt.

138
00:08:50,330 --> 00:08:53,794
I'm not going to include the latch plate since it's

139
00:08:53,842 --> 00:08:57,858
exterior to the doorknob component being part of the door frame.

140
00:08:58,034 --> 00:09:01,946
In practice, this would be external to your unit and you

141
00:09:01,968 --> 00:09:05,580
would want to mock it out if needed. For your test case.

142
00:09:06,350 --> 00:09:10,846
With our nouns defined, let's write our first use case a

143
00:09:10,868 --> 00:09:14,666
privacy doorknob. When the push button is not pressed

144
00:09:14,858 --> 00:09:18,222
when the user turns the inside knob should

145
00:09:18,276 --> 00:09:22,302
also turn the outside knob. For some of you out there,

146
00:09:22,356 --> 00:09:25,902
you may be familiar with BDD or behavior

147
00:09:25,966 --> 00:09:29,314
driven development, and so you may things to write this

148
00:09:29,352 --> 00:09:33,646
sentence in a given when then syntax let's

149
00:09:33,678 --> 00:09:38,230
try that. Given the push button is not pressed

150
00:09:38,570 --> 00:09:41,826
when the user turns the inside knob,

151
00:09:42,018 --> 00:09:45,240
then the outside knob should also turn.

152
00:09:45,690 --> 00:09:49,574
Writing a use case in either of these ways helps to clearly

153
00:09:49,622 --> 00:09:53,302
define what the situation is and the expected behavior,

154
00:09:53,446 --> 00:09:56,842
and removes ambiguity to the point that you will start seeing

155
00:09:56,896 --> 00:09:59,866
other similar use cases. For example,

156
00:10:00,048 --> 00:10:03,694
for the first use cases situation, there's another thing I

157
00:10:03,732 --> 00:10:07,290
would expect to happen. A privacy doorknob

158
00:10:07,370 --> 00:10:10,922
when the push button is not pressed, when the user

159
00:10:10,986 --> 00:10:14,606
turns the inside knob should retract the latch

160
00:10:14,638 --> 00:10:18,034
bolt. Oh, and that reminds me,

161
00:10:18,152 --> 00:10:21,390
does it matter which way the user turns the knob?

162
00:10:21,550 --> 00:10:25,146
I should probably account for both clockwise and counterclockwise

163
00:10:25,198 --> 00:10:28,754
rotation. A privacy doorknob when the push

164
00:10:28,802 --> 00:10:33,266
button is not pressed when the user turns the inside knob clockwise,

165
00:10:33,458 --> 00:10:37,030
should also turn the outside knob counterclockwise.

166
00:10:37,790 --> 00:10:41,254
Similarly, when the user turns the inside knob

167
00:10:41,302 --> 00:10:44,506
counterclockwise, should also turn the outside

168
00:10:44,608 --> 00:10:48,054
knob clockwise. The outside knob

169
00:10:48,102 --> 00:10:52,170
can similarly be turned in this state. A privacy

170
00:10:52,250 --> 00:10:56,186
door knob when the push button is not pressed, when the user turns

171
00:10:56,218 --> 00:10:59,502
the outside knob clockwise, should also turn

172
00:10:59,556 --> 00:11:02,270
the inside knob counterclockwise.

173
00:11:02,790 --> 00:11:07,006
Similarly, when the user turns the outside knob counterclockwise,

174
00:11:07,118 --> 00:11:10,050
should also turn the inside knob clockwise.

175
00:11:10,790 --> 00:11:14,446
And as always, when the user

176
00:11:14,478 --> 00:11:18,390
turns the outside knob should retract the latch bolt.

177
00:11:18,890 --> 00:11:22,822
Oh boy, we haven't even locked the door yet and we're starting

178
00:11:22,876 --> 00:11:26,066
to get a really big pile of use cases.

179
00:11:26,258 --> 00:11:30,342
Although individually each sentence is clear and unambiguous

180
00:11:30,486 --> 00:11:33,882
as a whole, it's getting harder to keep track of what we have

181
00:11:33,936 --> 00:11:37,306
and haven't tested. Can you imagine if we

182
00:11:37,328 --> 00:11:40,898
weren't just testing the doorknob component, but tried to nail

183
00:11:40,934 --> 00:11:44,686
down every combination and permutation of use cases for

184
00:11:44,708 --> 00:11:47,886
the entire door system? This is a

185
00:11:47,908 --> 00:11:51,086
good reason to consider unit tests as your primary types of

186
00:11:51,108 --> 00:11:55,214
tests. It cuts down dramatically the number of overall

187
00:11:55,262 --> 00:11:58,862
use cases to consider, since each piece can be validated

188
00:11:58,926 --> 00:12:02,882
independently. This brings me two another reason people

189
00:12:02,936 --> 00:12:06,786
don't like unit testing. It gets really messy

190
00:12:06,898 --> 00:12:10,854
really fast. You end up with a lot of duplicate code

191
00:12:10,972 --> 00:12:14,054
and it's generally hard to maintain things is

192
00:12:14,092 --> 00:12:18,140
why I always teach this second key to unit testing success.

193
00:12:18,910 --> 00:12:22,410
Key number two, care about the quality of your test code

194
00:12:22,480 --> 00:12:26,422
as much as you would production code. A little dry,

195
00:12:26,566 --> 00:12:29,626
don't repeat yourself can go a long way.

196
00:12:29,808 --> 00:12:33,514
Let's take the use cases we have so far and organize

197
00:12:33,562 --> 00:12:37,530
them now. There still is some duplication,

198
00:12:37,690 --> 00:12:41,214
but this is getting much easier to reason with. We can now

199
00:12:41,252 --> 00:12:44,580
define some test cases for the button pressed state.

200
00:12:45,110 --> 00:12:48,482
A privacy doorknob when the push button is

201
00:12:48,536 --> 00:12:53,182
pressed when the user tries to turn the outside knob clockwise

202
00:12:53,326 --> 00:12:56,526
should not turn the outside knob at all. Should not turn the

203
00:12:56,568 --> 00:13:00,230
inside knob at all should not retract the latch bolt

204
00:13:00,730 --> 00:13:04,630
when the user tries to turn the outside knob counterclockwise,

205
00:13:05,050 --> 00:13:08,354
should not turn the outside knob at all should not turn the inside

206
00:13:08,412 --> 00:13:12,346
knob at all, should not retract the latch bolt when the

207
00:13:12,368 --> 00:13:15,930
user tries to turn the inside knob clockwise,

208
00:13:16,510 --> 00:13:20,826
should pop the push button out, should turn the inside knob clockwise,

209
00:13:20,938 --> 00:13:25,242
should turn the outside knob counterclockwise, and should retract

210
00:13:25,306 --> 00:13:28,926
the latch bolt. Finally, when the user tries to turn

211
00:13:28,948 --> 00:13:32,570
the inside knob counterclockwise, should pop the

212
00:13:32,740 --> 00:13:36,446
push button out, should turn the inside knob counterclockwise,

213
00:13:36,558 --> 00:13:40,286
should turn the outside knob clockwise, and should retract the latch

214
00:13:40,318 --> 00:13:43,874
bolt. There are other use cases as well,

215
00:13:43,992 --> 00:13:47,074
such as when the push button is pressed,

216
00:13:47,202 --> 00:13:50,486
when the user tries to close the door, pressing the

217
00:13:50,508 --> 00:13:54,630
latch bolt essentially should retract the latch bolt.

218
00:13:55,130 --> 00:13:58,934
When the user inserts a long pin into the hole

219
00:13:58,982 --> 00:14:02,294
on the outside knob, it should pop the push

220
00:14:02,342 --> 00:14:05,786
button out. There are also some other

221
00:14:05,888 --> 00:14:09,050
exceptional use cases we should at least think about.

222
00:14:09,120 --> 00:14:12,526
Like when the button is pressed, when the

223
00:14:12,548 --> 00:14:15,774
user uses excessive force to try

224
00:14:15,812 --> 00:14:19,440
to turn the outside knob, the knob should not break.

225
00:14:20,290 --> 00:14:23,598
Or maybe it should break, but not hurt

226
00:14:23,614 --> 00:14:26,766
the user. Thinking about these cases

227
00:14:26,878 --> 00:14:30,462
will shed light in the darker corners of your subject's defined

228
00:14:30,526 --> 00:14:34,302
behavior and provide an opportunity. Two, have a conversation

229
00:14:34,366 --> 00:14:37,862
with the stakeholder about what the appropriate behavior should

230
00:14:37,916 --> 00:14:41,270
be in such exceptional circumstances.

231
00:14:41,610 --> 00:14:45,110
At any rate, taking this specification to your business

232
00:14:45,180 --> 00:14:48,634
analyst will clarify any assumptions that you may

233
00:14:48,672 --> 00:14:52,714
have made when interpreting the original ask on to

234
00:14:52,752 --> 00:14:57,610
key number three. Focus on what matters please

235
00:14:57,680 --> 00:15:01,502
note that the goal of this exercise is not to get 80%

236
00:15:01,556 --> 00:15:05,422
code coverage or some other arbitrary amount, but rather

237
00:15:05,476 --> 00:15:09,550
to enumerate the use cases for our privacy doorknob component.

238
00:15:09,890 --> 00:15:14,046
When you start with the use cases rather than the code itself,

239
00:15:14,228 --> 00:15:17,342
it helps you to cover all the functional cases,

240
00:15:17,486 --> 00:15:21,330
which also has a side effect of giving you almost 100%

241
00:15:21,400 --> 00:15:24,686
code coverage once you are done. I think we're

242
00:15:24,718 --> 00:15:29,138
ready for key number four. Structure your unit test implementation

243
00:15:29,234 --> 00:15:33,122
using aaa. Now that we know what we are testing,

244
00:15:33,186 --> 00:15:37,122
let's start thinking about the how every automated

245
00:15:37,186 --> 00:15:41,074
test case, whether it's a unit test or some form of integration

246
00:15:41,122 --> 00:15:44,250
or end two end test, is made up of three

247
00:15:44,320 --> 00:15:47,210
stages in order of execution,

248
00:15:48,030 --> 00:15:51,378
a range what preconditions exist

249
00:15:51,414 --> 00:15:55,054
for this test case, what code must be run to

250
00:15:55,092 --> 00:15:59,230
set everything up so you are ready to test this particular condition.

251
00:15:59,730 --> 00:16:03,742
For our doorknob example, we would need to construct our doorknob

252
00:16:03,806 --> 00:16:07,620
object and make sure that the button is properly set.

253
00:16:08,310 --> 00:16:11,394
Act execute the action you are trying.

254
00:16:11,432 --> 00:16:15,090
Two test, for example, turning the knob

255
00:16:15,750 --> 00:16:19,714
assert, how do we prove that the action completed

256
00:16:19,762 --> 00:16:23,782
the way we expected it to? We may check the return value

257
00:16:23,836 --> 00:16:27,750
of the action, or perhaps a value from a mock.

258
00:16:28,270 --> 00:16:31,974
In practice, I almost always start by defining

259
00:16:32,022 --> 00:16:35,846
my action. This helps me stay focused on the core

260
00:16:35,878 --> 00:16:39,530
of what I'm trying to test. I'll define my action once

261
00:16:39,600 --> 00:16:43,054
in a scope broad enough that all my test cases testing that

262
00:16:43,092 --> 00:16:46,334
action have access to it. This not only

263
00:16:46,372 --> 00:16:49,754
reduces duplicate code, but it helps make it easier

264
00:16:49,802 --> 00:16:53,166
to ensure that each test case is calling the action in

265
00:16:53,188 --> 00:16:56,354
a consistent way. Now, we have

266
00:16:56,392 --> 00:16:59,550
spent a lot of time talking testing theory,

267
00:16:59,710 --> 00:17:03,700
but what happens when you try to apply what we have learned in code?

268
00:17:04,230 --> 00:17:07,426
Here I have written a sample implementation for our privacy

269
00:17:07,458 --> 00:17:10,886
doorknob. Please be kind. I'm still a

270
00:17:10,908 --> 00:17:14,310
little bit new to wrestling, so I'm sure that this could be

271
00:17:14,380 --> 00:17:17,734
a little more idiomatic. First we have the

272
00:17:17,772 --> 00:17:21,194
privacy doorknob, which is represented as a struct with a

273
00:17:21,232 --> 00:17:24,566
single property button is pushed.

274
00:17:24,758 --> 00:17:28,698
That will be true if the button is pushed and false if it is not.

275
00:17:28,864 --> 00:17:32,206
In our imple block we have a constructor function

276
00:17:32,308 --> 00:17:35,694
new, and then we also have a few different

277
00:17:35,812 --> 00:17:39,578
functions. Turn inside knob, turn outside knob,

278
00:17:39,754 --> 00:17:43,314
insert pin into outside knob, hole is

279
00:17:43,352 --> 00:17:47,394
button pressed and press button. You notice that

280
00:17:47,512 --> 00:17:51,234
a lot of the test cases that we've written already kind

281
00:17:51,272 --> 00:17:54,926
of drove this design of what methods

282
00:17:54,958 --> 00:17:59,382
are available. That's really helpful because then

283
00:17:59,436 --> 00:18:02,566
we don't have to dream this up before thinking about the

284
00:18:02,588 --> 00:18:06,120
use cases. We can use the use cases to drive the design.

285
00:18:06,810 --> 00:18:10,646
A couple of other things I threw in there are mostly

286
00:18:10,678 --> 00:18:14,506
for helpers, like the return value

287
00:18:14,608 --> 00:18:17,942
of turning the inside or outside knob returns

288
00:18:18,006 --> 00:18:21,530
a knob indirection result that

289
00:18:21,680 --> 00:18:25,374
will either have the inside knob having a rotation direction or

290
00:18:25,412 --> 00:18:29,086
not. Same with the outside knob, and the latch bolt will have

291
00:18:29,108 --> 00:18:32,350
a latch bolt state of either extended or retracted.

292
00:18:32,870 --> 00:18:36,370
Rotation direction is either clockwise or counterclockwise,

293
00:18:37,270 --> 00:18:40,754
and later we'll see that I

294
00:18:40,792 --> 00:18:44,034
needed an opposite function for that,

295
00:18:44,152 --> 00:18:48,450
so that when one is going clockwise, the other can go counterclockwise.

296
00:18:48,870 --> 00:18:52,120
And then finally our enum for latch volt state.

297
00:18:52,810 --> 00:18:56,326
Now we're ready to start writing our tests. First step is

298
00:18:56,348 --> 00:19:00,006
to define our testing module, and this should look familiar if anyone's

299
00:19:00,038 --> 00:19:03,610
ever run cargo new with the lib argument,

300
00:19:04,670 --> 00:19:08,474
just a test module called tests that

301
00:19:08,512 --> 00:19:12,078
uses the super scope. Now let's take our

302
00:19:12,164 --> 00:19:15,882
use cases from above and paste them into our test module.

303
00:19:16,026 --> 00:19:21,450
I'll only paste a portion of the use cases in for brevity immediately.

304
00:19:21,530 --> 00:19:25,482
I see a problem. My use cases are pretty nested,

305
00:19:25,546 --> 00:19:28,878
but I only have one level of nesting in my test module.

306
00:19:29,054 --> 00:19:32,354
If I flatten out all my use cases, we can get all the tests into

307
00:19:32,392 --> 00:19:35,630
a single test module, but then we lose the organization

308
00:19:35,710 --> 00:19:38,870
and structure we created for our use cases.

309
00:19:39,450 --> 00:19:42,902
Let's just try creating nested modules for each level

310
00:19:42,956 --> 00:19:46,806
of nesting of our use cases. The last part of the sentence will

311
00:19:46,828 --> 00:19:50,314
be the name of the test function. Let's apply the

312
00:19:50,352 --> 00:19:54,170
arrange act assert pattern to our first three test cases.

313
00:19:54,510 --> 00:19:58,586
Arrange will initialize our privacy doorknob instance and set the

314
00:19:58,608 --> 00:20:01,774
desired state. In these cases, the button needs

315
00:20:01,812 --> 00:20:05,706
to be pressed. Act will call the turn outside knob

316
00:20:05,738 --> 00:20:09,514
method on our privacy doorknob. Instance assert

317
00:20:09,562 --> 00:20:13,614
will check the result of turn outside knob method to ensure

318
00:20:13,662 --> 00:20:17,554
that it behaved as expected. Each test case only

319
00:20:17,672 --> 00:20:20,180
checks one field on the result.

320
00:20:20,870 --> 00:20:24,066
What's great about this nested module approach is that

321
00:20:24,088 --> 00:20:27,058
we can still see the structure of our use cases,

322
00:20:27,154 --> 00:20:29,590
but we get really nice output.

323
00:20:29,930 --> 00:20:34,066
Let's take a look at this privacy doorknob tests.

324
00:20:34,178 --> 00:20:38,274
When the push button is pressed, when the user tries to turn the outside knob

325
00:20:38,322 --> 00:20:41,370
clockwise should not retract the latch bolt.

326
00:20:42,110 --> 00:20:46,154
What I love about this is that each test case is transformed back

327
00:20:46,192 --> 00:20:49,366
into a sentence like we started with a sentence

328
00:20:49,398 --> 00:20:53,038
that we could read to a nontechnical person and they would understand

329
00:20:53,124 --> 00:20:56,346
what we're saying. And if we get a test failure,

330
00:20:56,458 --> 00:21:00,174
the test case name tells us in exactly which way

331
00:21:00,292 --> 00:21:03,854
our code is not meeting our requirements but

332
00:21:03,892 --> 00:21:07,298
revisiting our tests. There is some duplication of code,

333
00:21:07,464 --> 00:21:11,026
and I'm not saying that duplication is always bad, but in

334
00:21:11,048 --> 00:21:14,370
things case it could lead to some of our tests being brittle.

335
00:21:14,870 --> 00:21:18,274
For example, if we change the name of our turn outside knob

336
00:21:18,322 --> 00:21:21,686
method, we would have to change the name of the method in

337
00:21:21,708 --> 00:21:25,734
all of our test cases that use it. Or maybe one

338
00:21:25,772 --> 00:21:28,810
of the test cases might accidentally call turn inside

339
00:21:28,880 --> 00:21:32,726
knob instead of turn outside knob. We can take advantage

340
00:21:32,758 --> 00:21:36,282
of our nested module structure to reduce this duplication by

341
00:21:36,336 --> 00:21:39,834
defining an action function. We put this

342
00:21:39,872 --> 00:21:43,390
function in the module when the user tries to turn the outside

343
00:21:43,460 --> 00:21:46,654
knob clockwise, since every test inside that

344
00:21:46,692 --> 00:21:50,554
module will execute the same action. Now we can replace

345
00:21:50,602 --> 00:21:53,818
the call to turn outside knob in each test with

346
00:21:53,844 --> 00:21:57,602
a call to action. Now, if later we change

347
00:21:57,656 --> 00:22:01,186
the name of the turn outside knob function, we only

348
00:22:01,208 --> 00:22:05,354
have to change it in one place. But there's more duplication

349
00:22:05,422 --> 00:22:08,950
in the arrange section of each test. Since the

350
00:22:09,020 --> 00:22:12,342
when the push button is pressed describes the state

351
00:22:12,396 --> 00:22:15,814
of the knob, we can move the arrange section to

352
00:22:15,852 --> 00:22:19,478
that module level. Great. Now it

353
00:22:19,484 --> 00:22:22,762
will be harder for individual tests to drift from the state

354
00:22:22,816 --> 00:22:26,506
we want defined in that scope. With both the arrange and

355
00:22:26,528 --> 00:22:30,042
act sections moved to the module level, all but the last

356
00:22:30,096 --> 00:22:34,234
line of each test is the same. Let's make all that boilerplate

357
00:22:34,282 --> 00:22:37,726
code a little less verbose. This is getting a

358
00:22:37,748 --> 00:22:41,374
lot easier to read and maintain, but since we

359
00:22:41,412 --> 00:22:44,938
are using rust, we can do better. We can use the

360
00:22:44,964 --> 00:22:48,210
macro to reduce the duplication even further.

361
00:22:48,630 --> 00:22:52,386
This brings each test case down to a single line of code,

362
00:22:52,568 --> 00:22:55,842
but we should probably modify the macro so we can pass it

363
00:22:55,896 --> 00:22:59,254
any arrange or action function we want. This will make

364
00:22:59,292 --> 00:23:02,550
it possible to reuse this macro in other modules.

365
00:23:03,130 --> 00:23:06,390
One more thing the macro should be able to take in

366
00:23:06,460 --> 00:23:09,650
a closure. Two, define whatever assertion you want,

367
00:23:09,820 --> 00:23:13,420
whether it is on the result or on the knob itself.

368
00:23:14,190 --> 00:23:17,994
With our test cases down to a single line each, we can

369
00:23:18,032 --> 00:23:21,242
very quickly implement all the rest of our test cases.

370
00:23:21,386 --> 00:23:24,846
We can even leverage AI assisted code completion once

371
00:23:24,868 --> 00:23:28,190
we get it going from experience starting

372
00:23:28,260 --> 00:23:32,106
from scratch doing AI unit tests has led to disappointing results

373
00:23:32,138 --> 00:23:35,630
for me, but once it's able to understand the desired

374
00:23:35,710 --> 00:23:39,570
style and flow of the code can actually be very helpful.

375
00:23:40,150 --> 00:23:43,730
It is when you get to this point where you know how to

376
00:23:43,800 --> 00:23:47,086
structure your tests, write them succinctly,

377
00:23:47,278 --> 00:23:50,614
and can write them quickly, that you really start to feel

378
00:23:50,652 --> 00:23:54,902
the excitement of unit testing. Although the first few tests may take

379
00:23:54,956 --> 00:23:58,594
several minutes to write, once you get some momentum, you can pump

380
00:23:58,642 --> 00:24:02,426
out over 100 top quality unit tests in under an hour.

381
00:24:02,608 --> 00:24:06,186
For me, nothing is quite as satisfying as finishing off your

382
00:24:06,208 --> 00:24:09,914
workday or week by writing a bunch of unit tests and

383
00:24:09,952 --> 00:24:13,470
knowing that you've made your code more robust and reliable.

384
00:24:14,050 --> 00:24:17,658
Before we wrap up, I'd like to offer a word of caution.

385
00:24:17,834 --> 00:24:21,294
It is possible to overtest your code. By that I

386
00:24:21,332 --> 00:24:24,734
mean writing tests that are too specific or writing

387
00:24:24,782 --> 00:24:28,434
tests that are too numerous. For example, if you have

388
00:24:28,472 --> 00:24:32,274
a function that takes a string and returns the string with

389
00:24:32,312 --> 00:24:36,422
all the vowels removed, you don't need to write a test for every

390
00:24:36,476 --> 00:24:40,262
possible string. You just need to write a test for every

391
00:24:40,316 --> 00:24:44,050
class of inputs. For example, the empty string,

392
00:24:44,210 --> 00:24:47,926
a small string with some values, a small string

393
00:24:47,958 --> 00:24:51,418
with only values, a small string with no value

394
00:24:51,504 --> 00:24:54,694
vowels, a very large string,

395
00:24:54,822 --> 00:24:58,890
and a string with complex unicode characters like emoji.

396
00:24:59,470 --> 00:25:03,034
If you were to try to write a test for every possible string,

397
00:25:03,162 --> 00:25:06,766
you're going to end up with a lot of tests that are essentially the

398
00:25:06,788 --> 00:25:10,254
same, making it difficult to distinguish between which

399
00:25:10,292 --> 00:25:13,730
are meaningful use cases and which are just noise

400
00:25:14,070 --> 00:25:17,630
focusing on testing the different classes of inputs

401
00:25:17,710 --> 00:25:21,602
will help you write more meaningful tests that are easier to understand and

402
00:25:21,656 --> 00:25:24,802
maintain. So as much as I love

403
00:25:24,856 --> 00:25:28,534
having a large number of unit tests, you always need to make sure

404
00:25:28,572 --> 00:25:31,906
you're testing for the right reason. You are not testing

405
00:25:31,938 --> 00:25:35,366
to get a certain number of test cases. You're not testing to

406
00:25:35,388 --> 00:25:39,402
get a certain percentage of code coverage. You're testing to make sure your

407
00:25:39,456 --> 00:25:42,810
code works under each kind of circumstance.

408
00:25:43,150 --> 00:25:46,106
If you can do that with ten tests, great.

409
00:25:46,288 --> 00:25:49,386
If you need 100 tests, that's fine too.

410
00:25:49,568 --> 00:25:53,082
Just make sure you're not writing tests for the sake of writing

411
00:25:53,146 --> 00:25:56,414
tests. Finally, I'd like to offer a word

412
00:25:56,452 --> 00:26:00,142
of encouragement. Don't expect to write perfect tests the first

413
00:26:00,196 --> 00:26:03,566
time, or to be able to write perfect tests every time.

414
00:26:03,748 --> 00:26:07,330
Don't expect the habit of writing tests to develop overnight.

415
00:26:07,670 --> 00:26:10,574
It takes time to learn how to write good tests,

416
00:26:10,702 --> 00:26:14,238
and it takes time to develop the habit of writing tests.

417
00:26:14,414 --> 00:26:18,126
But if you stick with it, you will get better. You will learn

418
00:26:18,168 --> 00:26:22,098
how to write better tests, and you will learn how to write them faster.

419
00:26:22,274 --> 00:26:26,310
And you will find that the time you spend writing tests is

420
00:26:26,380 --> 00:26:30,326
more than made up for by the time that you save debugging

421
00:26:30,358 --> 00:26:33,962
and fixing bugs. There are so many more

422
00:26:34,016 --> 00:26:38,214
topics in unit testing I'd love two cover, such as mocking external

423
00:26:38,262 --> 00:26:41,894
dependencies testing, asynchronous code testing,

424
00:26:41,942 --> 00:26:45,166
multithreaded code, et cetera. But I'll have to

425
00:26:45,188 --> 00:26:48,974
cover those topics in a future talk. I hope things has given you the

426
00:26:49,012 --> 00:26:52,366
spark you need to find enjoyment in unit testing and to

427
00:26:52,388 --> 00:26:55,854
start writing unit tests for your own code. If you would like

428
00:26:55,892 --> 00:26:59,614
to learn more about unit testing and how to apply it to your own

429
00:26:59,652 --> 00:27:03,182
code, please reach out to me. I'd love to help you

430
00:27:03,236 --> 00:27:06,802
or your team get started. I'm Joe Skeen.

431
00:27:06,946 --> 00:27:08,930
Thanks for watching and happy coding.

