1
00:00:23,320 --> 00:00:27,112
Hi, I'm Taslan Graham and welcome to my talk on automated

2
00:00:27,176 --> 00:00:30,272
web accessibility testing using playwrightjs

3
00:00:30,416 --> 00:00:32,020
and Ox core.

4
00:00:34,280 --> 00:00:37,584
First, a little bit about myself. I am a full stack software

5
00:00:37,632 --> 00:00:40,724
engineer from Jamaica. I primarily develop web

6
00:00:40,762 --> 00:00:44,596
applications and I am mostly interested and focused

7
00:00:44,628 --> 00:00:47,400
on node and JavaScript technologies.

8
00:00:48,700 --> 00:00:52,344
What's on the agenda for this presentation? First, we will

9
00:00:52,382 --> 00:00:56,248
look at what is accessibility? Why is accessibility

10
00:00:56,344 --> 00:01:00,248
important? We will also look at the web content accessibility

11
00:01:00,344 --> 00:01:04,124
guidelines WCAG. We will

12
00:01:04,162 --> 00:01:07,520
also look at the WCAG principles of accessibility.

13
00:01:07,860 --> 00:01:11,296
We will look at common accessibility issues. We will

14
00:01:11,318 --> 00:01:14,736
take a look at what is accessibility testing? And then we

15
00:01:14,758 --> 00:01:18,400
will finally look at automating accessibility testing.

16
00:01:20,040 --> 00:01:22,100
So what is accessibility?

17
00:01:22,840 --> 00:01:26,800
Software? Accessibility refers to the design and development practices

18
00:01:26,960 --> 00:01:30,464
that make digital applications, website and software

19
00:01:30,512 --> 00:01:34,356
interfaces usable and navigable by individuals

20
00:01:34,388 --> 00:01:38,180
with diverse abilities and disabilities. It involves

21
00:01:38,260 --> 00:01:41,508
ensuring that all users, including those with visual,

22
00:01:41,604 --> 00:01:44,984
auditory, motor or cognitive impairments,

23
00:01:45,112 --> 00:01:48,824
can interact with software comfortably and effectively,

24
00:01:48,952 --> 00:01:52,364
thus providing equal access to information and

25
00:01:52,402 --> 00:01:55,896
functionality. Accessibility also deals

26
00:01:55,928 --> 00:01:59,356
with how websites are structured. Are they using proper semantic

27
00:01:59,388 --> 00:02:03,004
HTML? Are they easily navigable with assistive

28
00:02:03,052 --> 00:02:06,864
technologies? Now, why is

29
00:02:06,902 --> 00:02:08,370
accessibility important?

30
00:02:11,160 --> 00:02:15,190
First, inclusivity and equal opportunity.

31
00:02:16,200 --> 00:02:19,764
So when you

32
00:02:19,802 --> 00:02:24,392
design with accessibility in mind, you are able to create

33
00:02:24,446 --> 00:02:27,736
a software or an application that is more inclusive to a

34
00:02:27,758 --> 00:02:31,336
wider range of users, regardless of any challenges that they may

35
00:02:31,358 --> 00:02:31,930
have.

36
00:02:33,920 --> 00:02:37,244
Accessibility is also good because it makes it

37
00:02:37,282 --> 00:02:41,244
easier for assistive technologies to be used to navigate your

38
00:02:41,282 --> 00:02:45,448
website or your application. When you design with accessibility

39
00:02:45,544 --> 00:02:49,344
in mind, you also expand your user base because now

40
00:02:49,462 --> 00:02:52,370
your software or your website, your application,

41
00:02:53,300 --> 00:02:56,892
it is now accessible to a wider audience

42
00:02:56,956 --> 00:03:00,864
of users. Also, it improves

43
00:03:00,912 --> 00:03:04,164
user experience. So many of the features of

44
00:03:04,202 --> 00:03:07,812
accessibility is beneficial to all users and not only

45
00:03:07,866 --> 00:03:11,464
users with some form of disabilities such as for

46
00:03:11,502 --> 00:03:15,588
example, if you were to add alternative text to images

47
00:03:15,684 --> 00:03:19,256
that is both beneficial to normal users and users who may

48
00:03:19,278 --> 00:03:20,680
have visual impairment.

49
00:03:21,820 --> 00:03:25,100
Accessibility also helps with search engine optimization.

50
00:03:25,440 --> 00:03:29,560
When you develop with accessibility in mind and you follow certain accessibility

51
00:03:29,640 --> 00:03:33,576
practices such as ensuring that all HTML

52
00:03:33,608 --> 00:03:36,930
pages have a title and

53
00:03:38,100 --> 00:03:41,532
other practices such as ensuring that images have can alternative

54
00:03:41,596 --> 00:03:45,090
text, you usually get better

55
00:03:45,460 --> 00:03:48,728
search engine optimization and then search engines

56
00:03:48,764 --> 00:03:50,870
will actually rank your websites higher.

57
00:03:51,640 --> 00:03:55,104
Finally, accessibility is a legal requirement.

58
00:03:55,232 --> 00:03:58,420
Accessibility is a legal requirement in some countries.

59
00:04:00,840 --> 00:04:04,408
The web content accessibility guidelines so

60
00:04:04,494 --> 00:04:08,664
the Web content accessibility guidelines WCAG are

61
00:04:08,702 --> 00:04:12,456
technical standards on web accessibility. Developed by the

62
00:04:12,478 --> 00:04:16,296
Worldwide Web Consortium, the guidelines aim

63
00:04:16,328 --> 00:04:19,880
to make websites, apps, electronic documents, and other digital

64
00:04:19,960 --> 00:04:23,356
assets accessible to people with a broad range of

65
00:04:23,378 --> 00:04:26,788
disabilities, including sensory, intellectual,

66
00:04:26,904 --> 00:04:28,960
learning, and physical disabilities.

67
00:04:30,100 --> 00:04:33,216
The WCAG has a set

68
00:04:33,238 --> 00:04:37,616
of principles, a set of accessibility principles which

69
00:04:37,718 --> 00:04:41,360
we should follow when we are implementing accessibility

70
00:04:41,440 --> 00:04:45,312
into our applications and the principles of accessibilities

71
00:04:45,376 --> 00:04:49,044
are one perceivable. This means that you

72
00:04:49,082 --> 00:04:52,552
should make it simple for users to see and hear the content

73
00:04:52,686 --> 00:04:56,692
in your application. You should present text alternative

74
00:04:56,836 --> 00:05:00,728
for nontext content. You should provide

75
00:05:00,814 --> 00:05:04,584
captions and alternatives

76
00:05:04,632 --> 00:05:08,796
for multimedia content. You should create content

77
00:05:08,898 --> 00:05:13,272
that can be presented without losing meaning when using assistive technologies

78
00:05:13,336 --> 00:05:18,044
such as screen readers. Another principle

79
00:05:18,092 --> 00:05:21,612
is operable. This means that you should make all functionality

80
00:05:21,676 --> 00:05:25,024
accessible straight from the keyboard. You should give

81
00:05:25,062 --> 00:05:28,464
users sufficient time to read and use the content that

82
00:05:28,502 --> 00:05:32,308
is being displayed. You should avoid using content

83
00:05:32,474 --> 00:05:35,060
that might trigger seizures.

84
00:05:35,560 --> 00:05:39,350
You should also facilitate users to navigate and

85
00:05:39,960 --> 00:05:42,810
find content easily on their web application.

86
00:05:44,620 --> 00:05:48,520
Understandable. This means that you should build text

87
00:05:48,590 --> 00:05:51,700
that is understandable and readable for users.

88
00:05:51,860 --> 00:05:55,832
You should create content that appear and operates in a predictable

89
00:05:55,896 --> 00:05:59,772
manner. You should also develop your application in a way that

90
00:05:59,826 --> 00:06:03,768
helps users to avoid and correct errors.

91
00:06:03,944 --> 00:06:07,536
Your application should also be robust. This means you

92
00:06:07,558 --> 00:06:11,424
should maximize the compatibility of your application with

93
00:06:11,462 --> 00:06:13,440
present and future tools.

94
00:06:14,980 --> 00:06:19,008
Also, elements in your web application should have a start

95
00:06:19,094 --> 00:06:22,816
and end tags and they should be nested according

96
00:06:22,848 --> 00:06:26,436
to their specifications. You should also aim to provide

97
00:06:26,538 --> 00:06:30,112
a name, role and value for nonstandard

98
00:06:30,176 --> 00:06:32,200
user interface components.

99
00:06:34,060 --> 00:06:37,610
Now, what are some common accessibility issues?

100
00:06:39,020 --> 00:06:42,212
A common accessibility issue is missing alternative

101
00:06:42,276 --> 00:06:45,784
text on images. Missing alternative text for images

102
00:06:45,832 --> 00:06:50,124
is one of the most common accessibility issues in web design.

103
00:06:50,322 --> 00:06:53,804
According to web Aim, 31.3% of

104
00:06:53,842 --> 00:06:57,824
homepage banners actually miss actually does not have an

105
00:06:57,862 --> 00:07:00,160
alternative text on their images.

106
00:07:01,220 --> 00:07:04,828
Another accessibility issue is poor color contrast.

107
00:07:05,004 --> 00:07:08,476
This is one of the most common accessibility issues noticed

108
00:07:08,508 --> 00:07:11,924
on many websites. Poor contrast makes

109
00:07:11,962 --> 00:07:15,350
it difficult to read content on your website.

110
00:07:18,360 --> 00:07:21,736
Poor HTML heading structure improper use of

111
00:07:21,758 --> 00:07:24,872
HTML headings, that's h one to h six,

112
00:07:25,006 --> 00:07:28,632
can make reading your website content unorganized and very

113
00:07:28,686 --> 00:07:31,476
confusing to navigate. Additionally,

114
00:07:31,588 --> 00:07:34,884
assistive technologies such as screen readers uses headers

115
00:07:34,932 --> 00:07:38,292
to navigate websites. Therefore, if you have improper

116
00:07:38,356 --> 00:07:42,536
header header structure on your website or improper header

117
00:07:42,568 --> 00:07:46,636
hierarchy, this will make navigating website using assistive

118
00:07:46,668 --> 00:07:50,690
technology much more difficult for persons who rely on such technology.

119
00:07:53,300 --> 00:07:57,312
Missing area attributes area

120
00:07:57,366 --> 00:08:01,168
attributes are a set of attributes that can be added to HTML elements

121
00:08:01,264 --> 00:08:04,992
to enhance the accessibility of web content. These attributes

122
00:08:05,056 --> 00:08:08,356
provide additional information to assistive technologies such

123
00:08:08,378 --> 00:08:12,410
as screen readers in understanding and interacting with web content.

124
00:08:13,340 --> 00:08:17,544
Area attributes help to make dynamic and interactive web applications much

125
00:08:17,582 --> 00:08:18,760
more accessible.

126
00:08:20,700 --> 00:08:24,280
Missing form labels is another common accessibility

127
00:08:24,360 --> 00:08:27,772
issue and when form

128
00:08:27,826 --> 00:08:30,984
fields form input fields don't have a label,

129
00:08:31,032 --> 00:08:34,350
it makes it difficult for users to understand what exactly

130
00:08:35,520 --> 00:08:39,324
they are supposed to enter what information this form field is trying to capture,

131
00:08:39,452 --> 00:08:43,004
and for users who rely on assistive technologies

132
00:08:43,052 --> 00:08:46,576
such as screen readers, it becomes even more difficult as the

133
00:08:46,598 --> 00:08:50,116
screen reader is unable to determine and inform the user of

134
00:08:50,138 --> 00:08:53,956
the type of information that they are supposed to enter into a

135
00:08:53,978 --> 00:08:55,350
particular form field.

136
00:08:58,920 --> 00:09:02,340
Keyboard inaccessibility is also another common accessibility

137
00:09:02,420 --> 00:09:06,884
issue and this is where websites or applications

138
00:09:07,012 --> 00:09:10,440
are not navigable via keyboard input.

139
00:09:11,420 --> 00:09:14,584
Also, not having a mobile responsive design is a form

140
00:09:14,622 --> 00:09:17,996
of accessibility issue and this will make it an

141
00:09:18,018 --> 00:09:21,336
unpleasant experience for persons who are using mobile devices

142
00:09:21,448 --> 00:09:24,812
as they will not be able to properly access and use your

143
00:09:24,866 --> 00:09:28,880
website. So now

144
00:09:28,950 --> 00:09:32,690
we move on to understanding a bit about

145
00:09:33,220 --> 00:09:36,816
accessibility testing and the first question we have to answer is

146
00:09:36,918 --> 00:09:39,620
what is accessibility testing?

147
00:09:40,200 --> 00:09:43,828
Accessibility testing deals with testing the features of a

148
00:09:43,834 --> 00:09:47,584
web application in a ay that ensures that all users,

149
00:09:47,632 --> 00:09:50,676
irrespective of most disabilities, will be able

150
00:09:50,698 --> 00:09:53,720
to interact with the software to its full potential.

151
00:09:54,380 --> 00:09:58,072
This includes allowing disabled users to perform all

152
00:09:58,126 --> 00:10:01,476
key actions without external assistance

153
00:10:01,588 --> 00:10:05,020
and making the application inclusive for all users.

154
00:10:08,560 --> 00:10:11,768
So, with the general understanding of what is accessibility

155
00:10:11,864 --> 00:10:16,220
testing, the next question to answer is what is automated

156
00:10:16,660 --> 00:10:20,668
accessibility testing? Automated accessibility testing

157
00:10:20,844 --> 00:10:24,284
can a website's underlying code and existing

158
00:10:24,332 --> 00:10:28,840
content and flag errors based on the web content accessibility

159
00:10:28,940 --> 00:10:31,908
guideline? It is important,

160
00:10:31,994 --> 00:10:35,664
though, to note that automated accessibility testing

161
00:10:35,712 --> 00:10:38,948
is not a replacement for manual test,

162
00:10:39,114 --> 00:10:42,264
but it should be used in conjunction with

163
00:10:42,302 --> 00:10:45,816
manual testing for a more holistic testing experience. And this

164
00:10:45,838 --> 00:10:49,940
will allow you to capture unique accessibility

165
00:10:50,020 --> 00:10:54,032
issues that an automated test cannot capture.

166
00:10:54,116 --> 00:10:58,140
And also the automated test will allow you to easily capture

167
00:10:58,640 --> 00:11:02,524
some common accessibility issues that

168
00:11:02,562 --> 00:11:05,630
might be a bit more tedious to capture in a manual process.

169
00:11:09,410 --> 00:11:13,294
Some of the common issues that accessibility test

170
00:11:13,412 --> 00:11:16,890
that automated accessibility testing can capture

171
00:11:17,050 --> 00:11:20,574
is missing area attributes, missing alternative

172
00:11:20,622 --> 00:11:23,326
text and images, poor color contrast,

173
00:11:23,438 --> 00:11:27,138
missing landmark labels, missing page titles, and these are to

174
00:11:27,144 --> 00:11:29,490
name a few of the things that can be captured.

175
00:11:31,750 --> 00:11:35,366
So now we move into some of the tools that we will

176
00:11:35,388 --> 00:11:38,850
be using to perform automated accessibility

177
00:11:38,930 --> 00:11:42,534
testing on a web application and the first tool to look at

178
00:11:42,572 --> 00:11:45,080
is ax alley engine.

179
00:11:45,630 --> 00:11:48,758
So Axe or Axecore is an accessibility

180
00:11:48,854 --> 00:11:52,422
testing engine for web applications. It enforces

181
00:11:52,486 --> 00:11:56,166
a number of rules and best practices to help you easily catch

182
00:11:56,278 --> 00:11:58,400
and fix accessibility issues.

183
00:11:58,850 --> 00:12:02,430
It's fast, secure, lightweight and was built

184
00:12:02,500 --> 00:12:06,122
to seamlessly integrate with any existing test environment

185
00:12:06,266 --> 00:12:09,814
so you can automate accessibility testing

186
00:12:09,962 --> 00:12:14,178
alongside your regular functional testing and with this ability to

187
00:12:14,264 --> 00:12:18,274
easily integrate it within an existing test

188
00:12:18,392 --> 00:12:21,854
environment, makes it easy for you to introduce

189
00:12:21,902 --> 00:12:24,760
accessibility to testing to an existing project.

190
00:12:26,650 --> 00:12:30,722
The second tool we will be using is playwright. And playwright

191
00:12:30,786 --> 00:12:33,890
is a framework for web test and automation,

192
00:12:34,050 --> 00:12:37,900
and we can integrate playwright with Axecore to perform

193
00:12:38,430 --> 00:12:41,370
automated accessibility testing.

194
00:12:43,230 --> 00:12:46,698
All right, so now we will take a

195
00:12:46,704 --> 00:12:50,762
look at how we can set up automated accessibility

196
00:12:50,826 --> 00:12:54,686
testing in a project, and then

197
00:12:54,868 --> 00:12:58,570
we will demonstrate how we can use that automated accessibility

198
00:12:58,650 --> 00:13:02,114
testing to capture some accessibility issues.

199
00:13:02,312 --> 00:13:06,082
And then we will look at how we can introduce that

200
00:13:06,136 --> 00:13:10,750
accessibility testing as a part of our CI CD pipeline

201
00:13:10,910 --> 00:13:12,210
in GitHub.

202
00:13:14,570 --> 00:13:18,760
Okay, so we have this very simple website here,

203
00:13:19,130 --> 00:13:22,550
and it actually has a number of accessibility issues.

204
00:13:22,700 --> 00:13:26,502
And what we are going to do is we are going to implement the automated

205
00:13:26,566 --> 00:13:29,658
accessibility testing as a part of our test suite in

206
00:13:29,664 --> 00:13:33,318
the application so that we can identify

207
00:13:33,414 --> 00:13:37,462
some of these issues. Now, as mentioned in

208
00:13:37,536 --> 00:13:41,390
the presentation, the tools we will be using is Axecore

209
00:13:41,810 --> 00:13:45,840
and playwright JS. So let's just take a quick look

210
00:13:46,770 --> 00:13:49,946
at those. So I'm on the

211
00:13:49,988 --> 00:13:52,290
GitHub page for oxcore,

212
00:13:54,070 --> 00:13:57,522
and as it says here, axecore is an accessibility testing engine

213
00:13:57,656 --> 00:14:00,930
for websites and other HTML based interfaces.

214
00:14:02,070 --> 00:14:05,666
Also makes mention of the rules that axecore

215
00:14:05,698 --> 00:14:08,514
checks, and it has different types of rules.

216
00:14:08,562 --> 00:14:10,134
WCAG 2.02.12.

217
00:14:10,172 --> 00:14:13,494
.2 it

218
00:14:13,532 --> 00:14:17,386
also has a link to the

219
00:14:17,408 --> 00:14:18,810
individual rules.

220
00:14:21,470 --> 00:14:25,318
Each rule has an id, a description. It gives the impact

221
00:14:25,494 --> 00:14:29,150
of that particular accessibility issue.

222
00:14:29,300 --> 00:14:31,978
So it has three impact levels,

223
00:14:32,074 --> 00:14:35,950
moderate, serious, and critical.

224
00:14:37,170 --> 00:14:41,026
It also provides a

225
00:14:41,048 --> 00:14:44,626
link to

226
00:14:44,648 --> 00:14:47,780
a page where you can learn more about the particular issue.

227
00:14:50,150 --> 00:14:53,286
You can see examples of cases where

228
00:14:53,308 --> 00:14:57,720
it would pass, and also example of

229
00:14:58,170 --> 00:15:02,200
cases where that particular issue would pop up.

230
00:15:03,370 --> 00:15:07,418
So let's head back there. The other tool we will be using

231
00:15:07,504 --> 00:15:08,650
is playwright,

232
00:15:11,470 --> 00:15:14,742
and specifically we will be using playwright

233
00:15:14,886 --> 00:15:18,134
test alongside Axecore playwright.

234
00:15:18,262 --> 00:15:22,394
And Axecore playwright is a package that actually makes the axecore

235
00:15:22,442 --> 00:15:26,014
engine available or accessible within

236
00:15:26,132 --> 00:15:28,510
the playwright testing framework.

237
00:15:29,410 --> 00:15:32,674
So let's head over to our code editor to get that

238
00:15:32,712 --> 00:15:33,540
set up.

239
00:15:36,950 --> 00:15:43,410
So the first thing I'm going to install is Axecore

240
00:15:43,490 --> 00:15:44,310
playwright,

241
00:15:54,420 --> 00:15:58,252
and then I'll install the playwright

242
00:15:58,316 --> 00:16:01,936
package. So to do that, we actually say NPM init playwright.

243
00:16:02,048 --> 00:16:03,220
At latest,

244
00:16:06,040 --> 00:16:09,316
it will ask a series of questions. Which language am

245
00:16:09,338 --> 00:16:12,468
I using? I say Javascript. Where do you

246
00:16:12,474 --> 00:16:15,160
want to put my end to end test? I go with the default.

247
00:16:15,660 --> 00:16:18,920
I won't add a GitHub action.

248
00:16:19,660 --> 00:16:23,048
Do I want to install the browsers? No, I won't install the

249
00:16:23,054 --> 00:16:26,892
browsers. I'll include that step as a part of the

250
00:16:26,946 --> 00:16:28,830
actual execution of the test.

251
00:16:29,680 --> 00:16:30,990
I'll choose no.

252
00:16:41,220 --> 00:16:44,624
After we set up playwright, we'll notice a couple of

253
00:16:44,662 --> 00:16:48,128
things being added to our code base.

254
00:16:48,294 --> 00:16:51,524
So first we have a folder test for end to end

255
00:16:51,562 --> 00:16:54,550
test as some simple test case.

256
00:16:58,520 --> 00:17:02,570
There's also a test examples folder which has more functional test

257
00:17:02,940 --> 00:17:06,136
in there. And it

258
00:17:06,158 --> 00:17:09,496
has a playwright config JS file. And this is where we

259
00:17:09,518 --> 00:17:13,080
actually configure the behavior of playwright.

260
00:17:15,520 --> 00:17:19,644
So we tell it the test directory should

261
00:17:19,682 --> 00:17:23,276
it execute in parallel. The reporter here this

262
00:17:23,298 --> 00:17:26,792
is telling playwright how do we want to

263
00:17:26,866 --> 00:17:30,908
have it actually report any accessibility

264
00:17:31,004 --> 00:17:34,930
issues to us? And there's a number of options

265
00:17:35,300 --> 00:17:39,128
we have list line junit Json HTML

266
00:17:39,324 --> 00:17:41,540
I'll actually stick with the HTML.

267
00:17:43,080 --> 00:17:44,900
I'll remove this section.

268
00:17:47,960 --> 00:17:51,956
And the projects section is actually where playwright configures the

269
00:17:51,978 --> 00:17:55,688
different browsers that the tests will actually get executed on.

270
00:17:55,774 --> 00:17:59,236
So we have a configuration for Chrome, one for Firefox,

271
00:17:59,348 --> 00:18:01,080
and one for Safari.

272
00:18:04,080 --> 00:18:07,404
All right, so first thing I'll do is I'll make

273
00:18:07,442 --> 00:18:11,656
an update to this file. I'm actually using ESM.

274
00:18:11,768 --> 00:18:27,252
So I need to update this import statement and

275
00:18:27,306 --> 00:18:28,660
update the export.

276
00:18:32,800 --> 00:18:35,870
I'm also going to delete the functional test.

277
00:18:38,640 --> 00:18:41,230
I'll rename the existing test.

278
00:18:43,840 --> 00:18:47,488
So I'll call this home page since we will be testing the home page of

279
00:18:47,494 --> 00:18:48,210
the website.

280
00:18:54,420 --> 00:18:58,032
And I'll just replace

281
00:18:58,096 --> 00:19:02,470
this with the actual test code.

282
00:19:02,920 --> 00:19:06,932
So let me walk

283
00:19:06,986 --> 00:19:10,408
through this. So what

284
00:19:10,414 --> 00:19:13,624
we have here, we import the test and expect

285
00:19:13,742 --> 00:19:18,424
from playwright. And we

286
00:19:18,462 --> 00:19:20,410
went ahead and configured our test.

287
00:19:21,900 --> 00:19:25,356
We then navigate to

288
00:19:25,538 --> 00:19:29,388
the particular page of the website. It's actually the home page.

289
00:19:29,554 --> 00:19:33,404
So we navigate to that page and then we actually set

290
00:19:33,442 --> 00:19:36,760
up an instance of the axe builder.

291
00:19:36,840 --> 00:19:41,104
And the axe builder is actually a class that you use to

292
00:19:41,222 --> 00:19:44,796
configure the behavior of the accessibility testing.

293
00:19:44,988 --> 00:19:50,996
And the most simplest form is actually what

294
00:19:51,018 --> 00:19:55,156
we have here, which is just new Aux builder. We pass the page information.

295
00:19:55,258 --> 00:19:58,516
So that's the page that playwright is currently on.

296
00:19:58,698 --> 00:20:02,788
And then we call the analyze method. And the analyze

297
00:20:02,804 --> 00:20:06,628
method will actually check this page against the different accessibility

298
00:20:06,724 --> 00:20:10,180
rules. We store the results in a variable

299
00:20:10,260 --> 00:20:12,200
accessibility scan results.

300
00:20:13,600 --> 00:20:17,032
And then we have a simple expect statement

301
00:20:17,096 --> 00:20:21,128
where we're expecting that the accessibility scan results

302
00:20:21,224 --> 00:20:23,020
should be an empty array.

303
00:20:27,140 --> 00:20:30,770
Now let's execute this test

304
00:20:31,780 --> 00:20:34,370
by running NPX playwright test.

305
00:20:46,710 --> 00:20:50,494
All right, so when we run the test, it actually prints

306
00:20:50,542 --> 00:20:55,270
out, it prints out the issues

307
00:20:55,340 --> 00:20:58,646
that it found. It prints it out to the terminal. However,

308
00:20:58,748 --> 00:21:02,486
because we had indicated that we wanted the reporter to

309
00:21:02,508 --> 00:21:07,370
be can HTML, it also opens

310
00:21:08,910 --> 00:21:12,874
a web page where we can see more information

311
00:21:13,072 --> 00:21:14,700
about the particular issues.

312
00:21:16,930 --> 00:21:21,550
Let me zoom in a bit. So for each issue that

313
00:21:21,700 --> 00:21:24,778
our accessibility test discovers,

314
00:21:24,874 --> 00:21:28,218
to typically follow this pattern where it has a description

315
00:21:28,314 --> 00:21:32,510
so looking at this first issue, the description is ensures

316
00:21:32,590 --> 00:21:37,054
the contrast within foreground and background colors meets WCag

317
00:21:37,182 --> 00:21:41,250
two wa minimum contrast ratio.

318
00:21:42,090 --> 00:21:45,430
If we scroll down, we see that it has an id.

319
00:21:45,580 --> 00:21:49,622
And this id actually makes it very easy for us to go

320
00:21:49,676 --> 00:21:53,894
back to the axecore documentation and

321
00:21:54,012 --> 00:21:57,082
find more information about that particular

322
00:21:57,216 --> 00:22:03,194
accessibility issue. So if we head over here and

323
00:22:03,232 --> 00:22:05,450
go to the list of rules,

324
00:22:10,000 --> 00:22:13,676
we can actually find it by the id and

325
00:22:13,698 --> 00:22:17,804
there's a link to further documentation explaining more

326
00:22:17,842 --> 00:22:19,550
about this particular issue.

327
00:22:23,540 --> 00:22:27,520
Also, there's a help URL

328
00:22:28,980 --> 00:22:32,716
property in the results, the test results, and it provides

329
00:22:32,748 --> 00:22:36,404
a link. And that link actually takes you to a web page

330
00:22:36,442 --> 00:22:38,950
where you can learn more about that particular issue.

331
00:22:39,720 --> 00:22:43,908
It gives more information. So it gives information

332
00:22:43,994 --> 00:22:47,672
on the background color that's being used. Also gives

333
00:22:47,726 --> 00:22:51,016
information on the foreground color that's been used. And it

334
00:22:51,118 --> 00:22:55,656
mentions the contrast ratio. So the

335
00:22:55,678 --> 00:22:58,880
expected contrast ratio for accessibility

336
00:22:59,060 --> 00:23:02,684
is 4.5 to one. We can see here that the

337
00:23:02,722 --> 00:23:05,550
actual contrast ratio of the website falls short.

338
00:23:07,120 --> 00:23:09,870
And if we scroll down some more,

339
00:23:10,640 --> 00:23:14,050
it also provides the HTML line of code

340
00:23:14,660 --> 00:23:19,260
that was checked when this particular accessibility

341
00:23:19,340 --> 00:23:23,056
issue was discovered. So this line of code here, where I have

342
00:23:23,078 --> 00:23:26,752
a link with teams as

343
00:23:26,806 --> 00:23:30,000
the label for that anchor,

344
00:23:30,980 --> 00:23:34,800
that's the line of code where we actually discovered that contrast

345
00:23:34,880 --> 00:23:38,328
issue. Now, if we scroll down, there's a

346
00:23:38,334 --> 00:23:39,850
lot of contrast issues.

347
00:23:42,940 --> 00:23:46,052
It's another issue. So this one is opensource.

348
00:23:46,116 --> 00:23:49,336
Each HTML documents document contains

349
00:23:49,368 --> 00:23:53,404
a non empty title element. And this is indicating that our

350
00:23:53,442 --> 00:23:56,636
website page of our web page actually does not have

351
00:23:56,658 --> 00:24:00,780
a title element. Once again,

352
00:24:00,930 --> 00:24:04,760
it provides a URL to our

353
00:24:04,770 --> 00:24:08,290
web page where we can learn more about this particular accessibility issue.

354
00:24:08,900 --> 00:24:13,068
Provides an id that we can use to easily find this accessibility

355
00:24:13,164 --> 00:24:17,220
issue. If we are looking at the axecore list of rules,

356
00:24:19,960 --> 00:24:23,120
it shows the impact. So the impact.

357
00:24:23,200 --> 00:24:24,980
There are three levels of impact,

358
00:24:26,140 --> 00:24:30,084
serious, moderate and critical. So for a missing

359
00:24:30,132 --> 00:24:34,068
HTML tag, a missing title tag,

360
00:24:34,244 --> 00:24:37,960
it's actually an impact level of serious.

361
00:24:40,000 --> 00:24:43,836
So that's pretty much a breakdown of how

362
00:24:43,938 --> 00:24:48,472
playwright and axecore reports accessibility

363
00:24:48,536 --> 00:24:51,980
issues that's discovered in your application. So I'm

364
00:24:52,480 --> 00:24:55,760
going to head back over to my code editor

365
00:24:57,540 --> 00:25:01,788
and I'm

366
00:25:01,804 --> 00:25:05,108
going to open a pr with what we have here,

367
00:25:05,274 --> 00:25:10,256
which is we have simply added the automated accessibility

368
00:25:10,368 --> 00:25:13,776
testing. I'm going to open a pr, and then after opening

369
00:25:13,808 --> 00:25:17,496
a pr, I'll also go ahead and add this test as

370
00:25:17,518 --> 00:25:20,280
a part of a CD pipeline.

371
00:26:13,330 --> 00:26:18,058
All right, so if we head over to a browser and

372
00:26:18,164 --> 00:26:23,026
go to the git repository to

373
00:26:23,048 --> 00:26:23,940
create the pr.

374
00:26:28,950 --> 00:26:33,094
All right, so at this point, as you can see, there's nothing happening here

375
00:26:33,132 --> 00:26:36,614
in terms of accessibility testing. So what we're going to do

376
00:26:36,652 --> 00:26:40,006
next is actually add a GitHub workflow that

377
00:26:40,028 --> 00:26:44,006
will make the accessibility testing a

378
00:26:44,028 --> 00:26:47,000
part of our CI CD pipeline process.

379
00:26:56,010 --> 00:27:01,070
So first add a GitHub folder.

380
00:27:27,230 --> 00:27:32,080
We have a workflow file here called CI and

381
00:27:33,490 --> 00:27:37,854
we're configuring it to run on

382
00:27:37,892 --> 00:27:41,594
pull request. So whenever you open a pull request and whenever

383
00:27:41,642 --> 00:27:45,186
you make subsequent commits to that pull request, this particular

384
00:27:45,368 --> 00:27:48,626
GitHub action will get executed. We're running it

385
00:27:48,648 --> 00:27:52,740
on an Ubuntu platform. We set up

386
00:27:53,350 --> 00:27:57,270
node 18, go ahead and install our

387
00:27:57,340 --> 00:28:01,654
dependencies. We will then start the

388
00:28:01,692 --> 00:28:05,506
server, and then afterwards we will run the test. So that's

389
00:28:05,538 --> 00:28:10,214
the general flow of how this particular GitHub

390
00:28:10,262 --> 00:28:13,734
workflow will operate. We'll set up node

391
00:28:13,782 --> 00:28:17,414
18, install our dependencies, and then start the server,

392
00:28:17,542 --> 00:28:21,840
then execute our accessibility test.

393
00:28:23,650 --> 00:28:27,742
So one more thing is we

394
00:28:27,796 --> 00:28:42,446
need to have a test script npm

395
00:28:42,478 --> 00:28:46,420
run test, just double checking that's actually there.

396
00:28:52,090 --> 00:28:55,346
With this workflow now added

397
00:28:55,458 --> 00:28:58,280
to our code, I'm going to commit this.

398
00:28:58,890 --> 00:29:02,040
And what will happen is that this will result in

399
00:29:03,050 --> 00:29:07,080
the accessibility test being executed on our pr

400
00:29:08,490 --> 00:29:10,920
as a part of our CI CD process.

401
00:29:11,930 --> 00:29:31,898
So know if

402
00:29:31,924 --> 00:29:36,340
I head back over to my browser and go to

403
00:29:37,270 --> 00:29:38,370
repository,

404
00:29:42,070 --> 00:29:46,274
we now notice that on the pull request

405
00:29:46,322 --> 00:29:49,590
we're actually seeing the test being executed.

406
00:29:50,330 --> 00:29:57,590
So let me click on that's

407
00:30:00,910 --> 00:30:04,410
and at this point it's installed in the different browsers.

408
00:30:08,590 --> 00:30:11,774
So we can see here that the workflow got executed and the

409
00:30:11,812 --> 00:30:15,454
accessibility test got executed as well.

410
00:30:15,492 --> 00:30:18,622
And it discovered the different

411
00:30:18,676 --> 00:30:20,640
accessibility issues that we have.

412
00:30:23,110 --> 00:30:27,010
And once again it gives sufficient

413
00:30:28,070 --> 00:30:32,130
explanation about each issue that's discovered.

414
00:30:32,550 --> 00:30:35,800
It provides the impact level.

415
00:30:38,170 --> 00:30:42,230
It also provides the HTML

416
00:30:42,970 --> 00:30:45,670
code that's causing this violation.

417
00:30:52,510 --> 00:30:54,810
It also provides the URL,

418
00:30:55,870 --> 00:30:59,222
the help URL, which gives you more information about that

419
00:30:59,296 --> 00:31:00,960
particular accessibility issue.

420
00:31:05,170 --> 00:31:09,546
So we can see here that our accessibility test got executed

421
00:31:09,658 --> 00:31:12,994
as a GitHub action, and what we could actually do

422
00:31:13,192 --> 00:31:16,594
is upon resolving all the accessibility issues,

423
00:31:16,712 --> 00:31:20,606
we could eventually configure our repository

424
00:31:20,718 --> 00:31:24,798
to require that these tests to

425
00:31:24,824 --> 00:31:28,626
require that this accessibility test successfully passes before we're

426
00:31:28,658 --> 00:31:31,510
able to actually merge in a pull request.

427
00:31:31,850 --> 00:31:35,574
However, I am not going to demonstrate that

428
00:31:35,772 --> 00:31:39,702
as a part of this demo. So this actually concludes my

429
00:31:39,756 --> 00:31:43,414
demo. So thanks for joining me as I

430
00:31:43,452 --> 00:31:47,154
discuss automated web accessibility testing using playwright,

431
00:31:47,202 --> 00:31:50,558
JS and Axcore. If you'd like to get in touch with me,

432
00:31:50,644 --> 00:31:53,982
these are my social media handles on Instagram. It's at

433
00:31:54,036 --> 00:31:57,806
taslang on Twitter. It's at taslanagraham on

434
00:31:57,828 --> 00:32:03,230
LinkedIn. It's Taslan Graham, and my email is taslan@taslanagraham.com.

435
00:32:03,300 --> 00:32:05,770
Thank you for joining and I hope you enjoyed this presentation.

