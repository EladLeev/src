1
00:00:38,770 --> 00:00:42,450
Hey everyone, welcome to mapping the minefield of open source software risks,

2
00:00:42,530 --> 00:00:46,194
where we'll be talking about the dumpster fire that is software supply chain

3
00:00:46,242 --> 00:00:49,918
security. To give you a quick background on myself, my name is

4
00:00:49,964 --> 00:00:53,818
Kyle Kelly. I am the founder at Cram Hacks, which is a weekly software supply

5
00:00:53,834 --> 00:00:57,374
chain security newsletter. I'm also a security researcher at

6
00:00:57,412 --> 00:01:01,226
Semgrep, working on these supply chain security team. And lastly,

7
00:01:01,258 --> 00:01:04,926
I'm an executive consultant at Banksec, where we offer cybersecurity consulting

8
00:01:04,958 --> 00:01:08,420
services to financial institutions across the United States.

9
00:01:08,870 --> 00:01:12,286
As far as education goes, I do have a master's degree in computer science

10
00:01:12,398 --> 00:01:16,370
and a number of cybersecurity related certifications.

11
00:01:16,710 --> 00:01:20,086
For jumping into the presentation, quickly go over the

12
00:01:20,108 --> 00:01:24,258
agenda, which are broken up into three sections where we have industry prioritization

13
00:01:24,354 --> 00:01:27,794
and easy ones. Ultimately, I'll be covering what are software

14
00:01:27,842 --> 00:01:31,286
dependencies, some generalizations around their usage and risks,

15
00:01:31,398 --> 00:01:35,002
how to prioritize these vulnerabilities, and some easy ones

16
00:01:35,056 --> 00:01:37,610
that can be applied to make life a heck of a lot easier.

17
00:01:38,190 --> 00:01:41,614
So what is a software dependency? Well,

18
00:01:41,732 --> 00:01:45,482
software dependency is a specific module, library or software

19
00:01:45,546 --> 00:01:49,466
package that another piece of software relies on to function correctly.

20
00:01:49,578 --> 00:01:53,514
In essence, with the help of dependency management, tooling for downloading,

21
00:01:53,562 --> 00:01:57,678
version management, et cetera, dependencies are what enable reuse

22
00:01:57,694 --> 00:02:01,074
of code at scale. Of course, these are both internal and open

23
00:02:01,112 --> 00:02:05,010
source dependencies, but we'll be focusing on opensource specifically.

24
00:02:05,510 --> 00:02:08,534
So does your organization use open source code?

25
00:02:08,652 --> 00:02:12,150
Almost definitely. If you don't, I honestly don't know how you get anything

26
00:02:12,220 --> 00:02:16,482
done. Might be a testament to my own software developer skills,

27
00:02:16,546 --> 00:02:19,906
but I know for a fact that without open source

28
00:02:19,938 --> 00:02:23,574
code, I would not be getting anything done. In 2022 alone,

29
00:02:23,622 --> 00:02:27,302
GitHub recorded over 52 million new open source projects.

30
00:02:27,366 --> 00:02:31,398
That is absolutely nuts. But focusing on known software dependencies,

31
00:02:31,494 --> 00:02:34,938
we can look at a public package repository such as NPM,

32
00:02:35,114 --> 00:02:38,314
which hosts somewhere around 3 million unique packages.

33
00:02:38,442 --> 00:02:42,346
Now NPM does by far host the most number of unique packages,

34
00:02:42,458 --> 00:02:45,874
but that makes sense given how modular JavaScript tends to be.

35
00:02:45,992 --> 00:02:50,178
That being said, others, like Pypy, are still hosting about 500,000

36
00:02:50,264 --> 00:02:53,682
unique packages, and after you account for different versions, that's over

37
00:02:53,736 --> 00:02:57,494
5 million releases. It's really no surprise that over 90%

38
00:02:57,532 --> 00:03:01,222
of organizations use open source software in some shape or form.

39
00:03:01,356 --> 00:03:04,934
Maybe a more interesting data point is that any given application,

40
00:03:05,132 --> 00:03:08,914
70% to 90%, is likely to comprise of open source

41
00:03:08,962 --> 00:03:12,058
code. That being said, there's one major caveat to

42
00:03:12,064 --> 00:03:15,642
that statement, which is that although many sources will reference the 70%

43
00:03:15,696 --> 00:03:19,850
to 90% figure. In actuality, the coverage is likely much less.

44
00:03:20,000 --> 00:03:23,486
And that's just because when you consider active code or lines of code that are

45
00:03:23,508 --> 00:03:27,022
actually executed by the application. So open

46
00:03:27,076 --> 00:03:30,766
source dependencies often have many, many lines of code, but you

47
00:03:30,788 --> 00:03:34,974
are rarely ever using all of them, if ever. And we've actually

48
00:03:35,012 --> 00:03:38,322
concluded that for any given dependency import into a project,

49
00:03:38,456 --> 00:03:42,370
you're likely only using roughly 10% of its functionality.

50
00:03:43,030 --> 00:03:46,798
Now that we know your organizations is using open source software dependencies,

51
00:03:46,894 --> 00:03:51,138
let's talk about vulnerabilities now for vulnerabilities

52
00:03:51,314 --> 00:03:55,042
in 2023, there were just over 28,000 total cves

53
00:03:55,106 --> 00:03:59,046
assigned, and this number is trending upwards for sure. But we don't necessarily want

54
00:03:59,068 --> 00:04:02,966
to use cves as a single source of truth for supply chain vulnerabilities.

55
00:04:03,158 --> 00:04:06,394
Firstly, many cves are for commercial applications or

56
00:04:06,432 --> 00:04:09,834
standalone projects. Secondly, the CVE process is a bit

57
00:04:09,872 --> 00:04:13,046
painful, especially in comparison to the simplicity of GitHub

58
00:04:13,078 --> 00:04:16,906
security advisories, at least in the context of opensource software.

59
00:04:17,098 --> 00:04:20,250
That said, we still have a lot of work to do on the vulnerability,

60
00:04:20,330 --> 00:04:24,190
discovery and disclosure side. So I project that this 28,000 total

61
00:04:24,260 --> 00:04:28,494
CVE count in 2023 is going to be washed away significantly

62
00:04:28,542 --> 00:04:32,206
in the next couple of years. Taking a look at some of the ecosystems

63
00:04:32,238 --> 00:04:36,494
covered by the GitHub Security advisory database, we can see that ecosystems

64
00:04:36,542 --> 00:04:40,646
don't all get the same amount of attention. And this also kind of

65
00:04:40,828 --> 00:04:44,246
leads to determining how much value could you be getting from

66
00:04:44,268 --> 00:04:48,034
a software supply chain security tool or software composition analysis

67
00:04:48,082 --> 00:04:51,742
tool? If you're using Swift elixir, dart or flutter,

68
00:04:51,826 --> 00:04:54,986
there's really not a whole lot of value to be had simply because there's not

69
00:04:55,008 --> 00:04:58,486
a lot of known vulnerabilities. Supply chain security tools aren't

70
00:04:58,518 --> 00:05:01,850
going out there and discovering application security

71
00:05:01,920 --> 00:05:04,718
vulnerabilities in open source code. We're simply saying,

72
00:05:04,804 --> 00:05:08,266
hey, you're using this dependency. What are known vulnerabilities

73
00:05:08,378 --> 00:05:11,646
related to it? How can we help you prioritize which ones to

74
00:05:11,668 --> 00:05:14,778
remediate first, either through upgrading or replacing that

75
00:05:14,804 --> 00:05:18,594
dependency with a more secure alternative? So, as of the last

76
00:05:18,632 --> 00:05:22,098
time I checked, there were about 16,000 total advisories on the

77
00:05:22,104 --> 00:05:25,474
GitHub Security advisory database, and these have all been

78
00:05:25,512 --> 00:05:29,382
reviewed and verified by the advisory maintainers. Roughly half

79
00:05:29,436 --> 00:05:32,550
are either a high or critical severity, and in my experience

80
00:05:32,620 --> 00:05:35,926
with reviewing thousands of advisories, anything less than a high

81
00:05:35,948 --> 00:05:39,686
severity can usually be ignored, especially if you have highs

82
00:05:39,718 --> 00:05:43,014
and criticals impacting your application. Definitely always prioritize

83
00:05:43,062 --> 00:05:46,186
the highs and criticals first. You maybe have heard

84
00:05:46,208 --> 00:05:49,494
of solutions like the exploit prediction scoring system, EPSs,

85
00:05:49,622 --> 00:05:53,010
or CiSA's known exploited vulnerabilities catalog, the KeV,

86
00:05:53,190 --> 00:05:56,574
which can also be used to prioritize vulners based on their likelihood of being

87
00:05:56,612 --> 00:06:00,526
exploited. However, if you take a closer look at these, especially the

88
00:06:00,548 --> 00:06:04,210
known exploited vulnerabilities catalog, you'll find that they really focus

89
00:06:04,280 --> 00:06:07,970
in on commercial products and standalone applications.

90
00:06:08,390 --> 00:06:11,970
For instance, EPSS signs a very heavy weight if

91
00:06:12,040 --> 00:06:15,422
Microsoft is mentioned in the advisory and Kev

92
00:06:15,566 --> 00:06:19,394
really only has a select few advisories related

93
00:06:19,442 --> 00:06:21,880
to any opensource project at all.

94
00:06:22,490 --> 00:06:25,830
Moving along, let's take a look at how to manage these vulnerabilities.

95
00:06:26,250 --> 00:06:30,310
Here's an example of just seven projects which I've run Semgrep supply chain on,

96
00:06:30,380 --> 00:06:33,906
but without our reachability analysis filter enabled. This is intended

97
00:06:33,938 --> 00:06:37,034
to be a one to one matching of what you would see using something like

98
00:06:37,072 --> 00:06:40,682
dependent bot, but I'll be walking through what we do differently to make this number

99
00:06:40,736 --> 00:06:43,958
much more palatable. Now, 2500 might seem

100
00:06:43,974 --> 00:06:46,654
like a little or a lot, and that's just going to depend on the size

101
00:06:46,692 --> 00:06:50,318
of your projects, how many dependencies you use, et cetera. But to put

102
00:06:50,324 --> 00:06:53,502
it into perspective, I've seen orgs with a total vulnerability count

103
00:06:53,556 --> 00:06:57,026
in the high six figures. Hopefully you're already using some sort

104
00:06:57,048 --> 00:07:00,740
of supply chain security tooling and have a rough idea of your magic number.

105
00:07:01,110 --> 00:07:04,286
For those of you with a big number, it's no surprise that sonotype

106
00:07:04,318 --> 00:07:07,926
has reported that supply chain attacks are increasing at a rate of

107
00:07:07,948 --> 00:07:12,118
742% per year. Now that being said,

108
00:07:12,204 --> 00:07:16,114
let's talk about prioritization. Well, these likelihood

109
00:07:16,162 --> 00:07:19,622
is that you're using some tool other than Semgrip supply chain, if any.

110
00:07:19,676 --> 00:07:22,842
So your security staff or developers are likely to approach the problem

111
00:07:22,896 --> 00:07:26,266
with questions such as these, especially the obvious ones.

112
00:07:26,448 --> 00:07:29,814
Are we even using this function and is it even exploitable?

113
00:07:29,942 --> 00:07:33,774
Then they'll likely spend valuable time and resources only to learn the

114
00:07:33,812 --> 00:07:37,642
code does not use the vulnerable function, making it unexploitable.

115
00:07:37,706 --> 00:07:41,454
We don't care about this, or my personal favorite these vulnerability is

116
00:07:41,492 --> 00:07:45,166
a critical severity, but it's a regular expression denial of service vulnerability,

117
00:07:45,278 --> 00:07:48,686
and it's on an internal application. There's no risk we can ignore

118
00:07:48,718 --> 00:07:51,842
this. Don't spend valuable security engineering time

119
00:07:51,976 --> 00:07:55,954
fixing these ridiculous vulnerabilities. That being said,

120
00:07:56,072 --> 00:08:00,038
opensource dependencies enable impressive efficiencies, there's no doubt about that.

121
00:08:00,124 --> 00:08:03,462
But time spent by your staff to investigate these questions takes

122
00:08:03,516 --> 00:08:07,846
away from that value. So let's touch on how reachability offers

123
00:08:07,878 --> 00:08:11,350
near effortless prioritization in the traditional

124
00:08:11,430 --> 00:08:15,622
sense. Semgrep supply chain still falls under the dependency scanner category,

125
00:08:15,766 --> 00:08:19,034
no different than a dependabot or OSS dependency check

126
00:08:19,072 --> 00:08:21,260
or NPM audit, just to name a few.

127
00:08:21,570 --> 00:08:25,198
So using a traditional solution like these mentioned,

128
00:08:25,364 --> 00:08:29,850
they more or less take a vulnerability database and see thousands of vulnerabilities,

129
00:08:30,010 --> 00:08:33,742
and then they report the hundreds which impact your dependencies based on their

130
00:08:33,796 --> 00:08:37,806
version and the name of the dependency. But by introducing

131
00:08:37,838 --> 00:08:41,394
code scanning reachability, you can narrow down from hundreds to just

132
00:08:41,432 --> 00:08:44,654
the tens that result in an actual vulnerable usage,

133
00:08:44,782 --> 00:08:48,242
otherwise, meaning the vulnerability actually rests in your

134
00:08:48,296 --> 00:08:51,558
code. Now I have a slide to get deeper into this, but at a

135
00:08:51,564 --> 00:08:54,838
high level, reachability to us at Semgrip means that the piece of

136
00:08:54,844 --> 00:08:58,258
a dependency that introduces risk, aka the vulnerable component,

137
00:08:58,354 --> 00:09:01,754
appears in your code or is reachable in your code.

138
00:09:01,872 --> 00:09:05,242
The magic sauce on how we do this is in our usage of the open

139
00:09:05,296 --> 00:09:09,260
source Semgrep engine, which also powers our other commercial products.

140
00:09:09,630 --> 00:09:12,966
This enables our researchers to write Semgrip rules that detect

141
00:09:12,998 --> 00:09:16,578
the vulnerable usage of dependencies. If you've ever used Semgrep,

142
00:09:16,614 --> 00:09:19,774
whether it be the paid version or open source, you probably know how easy

143
00:09:19,812 --> 00:09:23,650
it is to write Semgrip rules. And so we can do this very efficiently.

144
00:09:24,310 --> 00:09:27,582
Let's move on and discuss software composition analysis,

145
00:09:27,646 --> 00:09:31,678
often called SCA, which is ultimately the prioritization enabler.

146
00:09:31,774 --> 00:09:35,218
Afterward, we can look at some more research backing our claim here,

147
00:09:35,304 --> 00:09:38,422
which suggests reachability reduces thousands of alerts into

148
00:09:38,476 --> 00:09:41,794
tens of high quality findings. So here I've broken

149
00:09:41,842 --> 00:09:44,834
up SCA into four different categories, manifest,

150
00:09:44,882 --> 00:09:47,906
lock file, static analysis, and dynamic analysis,

151
00:09:48,018 --> 00:09:51,546
and each of these offer insights into a project's dependencies, just in

152
00:09:51,568 --> 00:09:55,094
different ways. Manifest files will tell you what direct dependencies

153
00:09:55,142 --> 00:09:58,614
are used, but really not much else. This isn't all that effective

154
00:09:58,662 --> 00:10:01,934
these days. Next we have lock files, which take things

155
00:10:01,972 --> 00:10:06,090
a step further by also presenting specific versions tied to those dependencies,

156
00:10:06,250 --> 00:10:10,330
and also include any transitive dependencies. So any dependencies

157
00:10:10,410 --> 00:10:14,020
required by the dependencies being imported into your project.

158
00:10:14,470 --> 00:10:17,714
Now, manifest and lock file analysis are what I often refer to

159
00:10:17,752 --> 00:10:21,502
as traditional sea, whereas the industry has since incorporated

160
00:10:21,566 --> 00:10:24,962
other techniques like static and dynamic analysis. Now,

161
00:10:25,016 --> 00:10:27,742
I'm not going to argue static versus dynamic analysis,

162
00:10:27,886 --> 00:10:30,966
we just don't have enough time for that. But you can probably guess that I

163
00:10:30,988 --> 00:10:34,950
prefer static analysis, especially in the context of software supply chain.

164
00:10:35,290 --> 00:10:38,998
The two main reasons are that a build reproducibility is often a

165
00:10:39,004 --> 00:10:42,202
nightmare, and with static analysis we don't necessarily care if your code

166
00:10:42,256 --> 00:10:46,170
can run and b I enjoy research at scale. Simple as that.

167
00:10:46,240 --> 00:10:49,862
I can confidently run Semgrip against thousands of projects without manually

168
00:10:49,926 --> 00:10:53,502
tuning each and every one of them to get dynamic analysis to work.

169
00:10:53,636 --> 00:10:57,534
And dynamic analysis is significantly slower, at least based on my experience.

170
00:10:57,732 --> 00:11:01,386
So that said, there are some potential benefits to dynamic

171
00:11:01,418 --> 00:11:04,634
analysis, the obvious one being that in static

172
00:11:04,682 --> 00:11:07,874
analysis we can't determine whether a path is likely to

173
00:11:07,912 --> 00:11:10,942
or ever will be taken, which means dynamic reachability

174
00:11:11,006 --> 00:11:14,718
could be slightly more effective in that regard. But based on the research I've

175
00:11:14,734 --> 00:11:18,274
reviewed, the complexity tends to cause static analysis to be favorable,

176
00:11:18,322 --> 00:11:22,470
with only marginal benefits to using dynamic analysis.

177
00:11:23,370 --> 00:11:26,242
And that's why at sungrip we use a combination of manifest,

178
00:11:26,306 --> 00:11:29,630
lock, file and static analysis. This gives us the best bang

179
00:11:29,650 --> 00:11:33,542
for the buck, enabling effective reachability, but without compromising performance

180
00:11:33,606 --> 00:11:37,014
and usability. Now I briefly described reachability earlier,

181
00:11:37,062 --> 00:11:40,582
but we should narrow in on this just because similar to sea, the industry

182
00:11:40,646 --> 00:11:43,950
seems to be using it to mean all different types of things. For example,

183
00:11:44,020 --> 00:11:47,786
Cdxgen, which is the open source Cyclone DX SBOm generation

184
00:11:47,818 --> 00:11:50,926
tool, calls a dependency reachable if it is used at

185
00:11:50,948 --> 00:11:54,186
all in your code. Other tools may call a vulnerability reachable

186
00:11:54,218 --> 00:11:58,180
if it impacts a direct dependency, or maybe it's affecting a public facing application.

187
00:11:58,710 --> 00:12:02,318
Now, Semgrep reachability, which we commonly refer to as code scanning

188
00:12:02,334 --> 00:12:06,222
reachability, does, as the name implies, it scans your code to identify

189
00:12:06,286 --> 00:12:10,022
these and often how you are using a known vulnerable function.

190
00:12:10,156 --> 00:12:13,746
If it finds a path where the function will get called, then it's reachable.

191
00:12:13,858 --> 00:12:17,094
And the way we determine these is based on

192
00:12:17,212 --> 00:12:21,162
what the vulnerability is from the security advisory. If it says

193
00:12:21,296 --> 00:12:25,386
you're only introducing risk if you call this particular function in

194
00:12:25,408 --> 00:12:28,662
a particular way, well, we can write a Semgrep rule to identify

195
00:12:28,726 --> 00:12:31,926
that usage in your code. And this has been proven

196
00:12:31,958 --> 00:12:35,182
time and time again to be effective. But to reference some external research,

197
00:12:35,316 --> 00:12:38,574
there's a paper by NC state titled a comparative study of

198
00:12:38,612 --> 00:12:42,314
vulnerability reporting by software composition analysis tools,

199
00:12:42,442 --> 00:12:45,650
which found only 2.1% of roughly 2500

200
00:12:45,720 --> 00:12:49,054
vulnerability alerts were found to be reachable. And that's through static

201
00:12:49,102 --> 00:12:52,254
code analysis. Early on, we at Semgrip

202
00:12:52,382 --> 00:12:56,738
conducted an internal study specifically using Semgrip's reachability analysis

203
00:12:56,834 --> 00:12:59,910
and evaluated 1100 open source projects.

204
00:13:00,410 --> 00:13:04,418
Of these, Semgrip identified 932 total vulnerabilities,

205
00:13:04,514 --> 00:13:08,182
but only twelve were determined to be reachable, and that's actually

206
00:13:08,236 --> 00:13:12,186
less than 2%. But keep in mind there are several factors that

207
00:13:12,208 --> 00:13:15,226
may play a role in your results, most commonly the language of the project.

208
00:13:15,328 --> 00:13:18,746
For example, JavaScript and Python dependencies tend to benefit a

209
00:13:18,768 --> 00:13:22,198
ton from reachability, and that's just due to its modularity. Whereas other

210
00:13:22,224 --> 00:13:26,254
languages like C sharp are more likely to be used by standalone projects where

211
00:13:26,292 --> 00:13:30,190
static code analysis is less capable of determining function calls.

212
00:13:30,610 --> 00:13:34,234
Discovering vulnerabilities is great and all, but what is objectively

213
00:13:34,282 --> 00:13:38,082
more important is remediating them. Sonotype's 2023

214
00:13:38,136 --> 00:13:41,906
report discovered that 96% of known vulnerable downloads had

215
00:13:41,928 --> 00:13:46,130
a fixed version already available, so that's a pretty good sign that open source project

216
00:13:46,200 --> 00:13:49,974
maintainers are doing a good job of releasing fixed versions. Log four

217
00:13:50,012 --> 00:13:53,474
j is a great one to highlight here, because Sonotype actually has a dashboard

218
00:13:53,522 --> 00:13:56,582
for known vulnerable downloads, which last I checked, had over

219
00:13:56,636 --> 00:13:59,878
300 million vulnerable downloads since December 2021,

220
00:13:59,884 --> 00:14:03,386
and still, I mean roughly 25% of

221
00:14:03,408 --> 00:14:06,278
downloads in the last seven days were vulnerable versions.

222
00:14:06,454 --> 00:14:10,486
So let's focus on what orgs can be doing better to alleviate

223
00:14:10,518 --> 00:14:13,738
some common struggles when it comes to remediating vulnerabilities,

224
00:14:13,834 --> 00:14:18,394
besides the obvious one, which is to use some form of supply chain security tooling.

225
00:14:18,522 --> 00:14:22,074
In the remaining slides, we'll touch on semantic versioning, manifest files,

226
00:14:22,122 --> 00:14:25,386
and transitive risks. All right, so semantic

227
00:14:25,418 --> 00:14:28,546
versioning is beautiful and I love it. I really can't express that enough.

228
00:14:28,648 --> 00:14:32,814
It can just be super beneficial for identifying easy wins during the remediation

229
00:14:32,862 --> 00:14:36,834
process. For example, maybe you have 200 vulnerabilities, but 100

230
00:14:36,872 --> 00:14:40,246
of them have a fixed version that is just a patch upgrade. Now,

231
00:14:40,268 --> 00:14:43,686
if I was the responsible developer and saw this, I'd probably just hit the

232
00:14:43,708 --> 00:14:47,186
upgrade button. It's that simple. Although I maybe wouldn't suggest

233
00:14:47,218 --> 00:14:50,726
this on anything super important in production. Just to be safe,

234
00:14:50,838 --> 00:14:54,458
maybe an additional 50 are minor upgrades. Again, I'm just going

235
00:14:54,464 --> 00:14:58,186
to hit the upgrade button, but if you're a more responsible person,

236
00:14:58,288 --> 00:15:02,214
I'd say pay closer attention to minor upgrades versus patch

237
00:15:02,262 --> 00:15:05,174
upgrades. Now, major upgrades, on the other hand,

238
00:15:05,232 --> 00:15:08,222
are the ones where I definitely want to take a look at these change log

239
00:15:08,276 --> 00:15:11,706
or other relevant documentation. And that's just because I've been bitten

240
00:15:11,738 --> 00:15:14,518
more than once by major upgrades, breaking functionality,

241
00:15:14,634 --> 00:15:19,086
or even worse, changing functionality just enough where it only slightly impacts

242
00:15:19,118 --> 00:15:22,020
your project. And maybe you missed a test case.

243
00:15:22,390 --> 00:15:25,686
Lastly, just a reminder that most of what I've shared in this

244
00:15:25,708 --> 00:15:29,686
presentation is ecosystem dependent, so breaking changes may be

245
00:15:29,708 --> 00:15:32,760
more common in some languages than others.

246
00:15:33,210 --> 00:15:37,030
Also, semantic versioning isn't actually enforced. For example, the study

247
00:15:37,100 --> 00:15:40,742
breaking bad semantic versioning and impact of breaking changes in Maven

248
00:15:40,806 --> 00:15:44,170
Central concluded that roughly 20% of non major

249
00:15:44,240 --> 00:15:48,218
releases in the Maven central ecosystem were breaking changes,

250
00:15:48,384 --> 00:15:52,014
but then again, that also implies that roughly 80% were not

251
00:15:52,052 --> 00:15:58,286
breaking changes. So if you're upgrading 100 dependencies 80%

252
00:15:58,308 --> 00:16:01,086
of the time, you're safe to just go ahead and hit the update button.

253
00:16:01,268 --> 00:16:04,646
Now let's talk about these in the context of a JavaScript

254
00:16:04,698 --> 00:16:08,046
developer, where you've likely seen a package JSOn

255
00:16:08,078 --> 00:16:12,206
file, otherwise known as your project's manifest. Now, if you're developing

256
00:16:12,238 --> 00:16:15,950
in a different ecosystem, you'll likely have a different file name, but the concept

257
00:16:16,030 --> 00:16:19,198
is more or less the same. A manifest file contains all

258
00:16:19,224 --> 00:16:22,326
direct dependencies used by your project and what is used to

259
00:16:22,348 --> 00:16:25,474
generate a project's lock file. We touched on this a bit earlier

260
00:16:25,522 --> 00:16:29,674
when discussing SCA, but as an example, whenever you run NPM install or

261
00:16:29,712 --> 00:16:33,654
directly generate a lock file with the package lock only flag,

262
00:16:33,782 --> 00:16:37,222
NPM is looking at your manifest file, your version ranges,

263
00:16:37,366 --> 00:16:41,242
and then assigning specific versions to these dependencies, while also

264
00:16:41,296 --> 00:16:44,634
determining all transitive dependencies as well as their respective

265
00:16:44,682 --> 00:16:48,570
versions. Now what most people don't realize is the potential

266
00:16:48,650 --> 00:16:52,474
ROI when you keep a manifest file up to date, especially when paired

267
00:16:52,522 --> 00:16:56,226
with meaningful version ranges, for example, a dependency that is

268
00:16:56,248 --> 00:17:00,322
widely used throughout your project. You may want to actually review all changes before

269
00:17:00,376 --> 00:17:03,922
upgrading, but a package where you're only using only one

270
00:17:03,976 --> 00:17:07,506
component of it, or maybe you know it to be well maintained

271
00:17:07,698 --> 00:17:10,898
and that it adheres to semverse specifications,

272
00:17:11,074 --> 00:17:13,990
you can safely assign a broader version range.

273
00:17:14,490 --> 00:17:18,166
So back to our example with NPM, you can get fairly creative on how

274
00:17:18,188 --> 00:17:21,062
you specify versioning for each direct dependency.

275
00:17:21,206 --> 00:17:24,730
To quickly go over some common ones, you can specify an exact

276
00:17:24,800 --> 00:17:27,894
version, use a tilde to allow any patch versions,

277
00:17:28,022 --> 00:17:31,130
use a carrot to allow both minor and patch versions.

278
00:17:31,470 --> 00:17:35,166
So basically anything except a major version. Or you can

279
00:17:35,188 --> 00:17:38,686
always go for the latest version via an asterisk. Just to show

280
00:17:38,708 --> 00:17:42,318
you a quick example of what this might look like in Semgrip app, you can

281
00:17:42,324 --> 00:17:45,966
clearly see your version and the fixed version, so if you see

282
00:17:45,988 --> 00:17:49,314
it's just a patch or a minor upgrade, well, it should be an easy one.

283
00:17:49,352 --> 00:17:52,734
Just go ahead and upgrade. A research paper titled

284
00:17:52,782 --> 00:17:55,786
a large scale analysis of semantic versioning in NPM

285
00:17:55,918 --> 00:17:59,458
reported that for the NPM ecosystem, specifically,

286
00:17:59,554 --> 00:18:03,174
the minor flexible version specification was by far the most

287
00:18:03,212 --> 00:18:07,302
commonly used. And the study also determined that over 87%

288
00:18:07,356 --> 00:18:10,838
of all dependencies in their test sample were configured

289
00:18:10,934 --> 00:18:14,234
to receive updates automatically. But that

290
00:18:14,272 --> 00:18:17,190
doesn't mean they actually get updated automatically.

291
00:18:17,270 --> 00:18:21,254
A common occurrence is that new versions are available, but you haven't

292
00:18:21,302 --> 00:18:24,906
updated your lock file in a while. Of course, this can be resolved

293
00:18:24,938 --> 00:18:28,574
by regularly running NPMI or similar to

294
00:18:28,612 --> 00:18:31,470
regenerate your lock file and use the latest versions.

295
00:18:32,050 --> 00:18:35,506
All right, I'm going to be ending things on a bit of

296
00:18:35,528 --> 00:18:38,974
a controversial topic, which are transitive vulnerabilities.

297
00:18:39,102 --> 00:18:42,734
Now, transitive vones are basically the dependency vones impacting

298
00:18:42,782 --> 00:18:46,402
your project's dependencies. I often refer to them as 3rd,

299
00:18:46,456 --> 00:18:49,574
fourth, or fifth party vulnerabilities, but the chain can go much,

300
00:18:49,612 --> 00:18:52,966
much further than just five, and in fact, it very commonly does.

301
00:18:53,148 --> 00:18:57,160
A little fun fact for you. The 2020 GitHub Octaverse report

302
00:18:57,530 --> 00:19:01,366
disclosed that the average amount of indirect or transitive dependencies

303
00:19:01,478 --> 00:19:04,806
for a JavaScript project with only ten direct dependencies

304
00:19:04,918 --> 00:19:08,314
is 683 total. I always

305
00:19:08,352 --> 00:19:11,974
found that to be crazy, and I still do. It's just imagining NPM

306
00:19:12,022 --> 00:19:16,110
install ten times and all of a sudden you're downloading 683

307
00:19:16,180 --> 00:19:20,046
different software packages just for your project to work. Now the

308
00:19:20,068 --> 00:19:23,610
biggest reason why this is somewhat controversial is because in reality,

309
00:19:23,770 --> 00:19:26,766
what are you going to do about it? If you use a dependency maybe affected

310
00:19:26,798 --> 00:19:30,242
by another dependency's vulnerability, there's really not much you can do.

311
00:19:30,296 --> 00:19:34,242
Unless you plan to dedicate engineering time to fixing the issue however far

312
00:19:34,296 --> 00:19:37,542
down the chain, and mapping this fix at each and every level,

313
00:19:37,676 --> 00:19:41,478
there's not really going to be any impact. That said, I do really enjoy

314
00:19:41,564 --> 00:19:45,030
the research behind transitive vulnerabilities. However,

315
00:19:45,100 --> 00:19:49,046
that said, reachability via static code analysis hasn't really impressed me.

316
00:19:49,148 --> 00:19:52,682
This goes back to what I mentioned earlier about active versus inactive code.

317
00:19:52,816 --> 00:19:56,454
For example, if I only import one function of an NPM package,

318
00:19:56,582 --> 00:20:00,522
transitive reachability via static code analysis won't know to only look

319
00:20:00,576 --> 00:20:04,266
at paths associated with that function. And this has a chain

320
00:20:04,298 --> 00:20:08,046
effect as you continue down the dependency tree. But at

321
00:20:08,068 --> 00:20:11,710
the end of the day, transitive risks are definitely real, and I'm hopeful future

322
00:20:11,780 --> 00:20:15,070
research and development will continue to make this more manageable.

323
00:20:15,570 --> 00:20:19,266
Anyways, at these end of the day, odds are that more than 90% of your

324
00:20:19,288 --> 00:20:22,110
vulnerabilities are caused by transitive dependencies.

325
00:20:22,270 --> 00:20:25,570
And I say just smack the easy button, ignore them.

326
00:20:25,640 --> 00:20:29,414
There's not much you can do about them anyway. If you see that there's any

327
00:20:29,612 --> 00:20:33,234
subset of direct dependencies introducing a mass amount of transitive

328
00:20:33,282 --> 00:20:36,774
vulnerabilities, maybe it's an unmaintained project,

329
00:20:36,892 --> 00:20:40,342
maybe it's an older project, or maybe the maintainers just don't

330
00:20:40,406 --> 00:20:43,862
care a whole lot. Or maybe those vulnerabilities

331
00:20:43,926 --> 00:20:46,826
just aren't reachable in their code, and they don't care to fix these because it

332
00:20:46,848 --> 00:20:50,646
doesn't introduce any actual risk. So to wrap

333
00:20:50,678 --> 00:20:55,018
things up, I'll leave you with three main takeaways. Firstly, the effectiveness of reachability.

334
00:20:55,194 --> 00:20:58,634
We routinely see up to a 98% false positive

335
00:20:58,682 --> 00:21:01,418
reduction thanks to code scanning reachability.

336
00:21:01,594 --> 00:21:05,282
Secondly, build reproducibility and semantic versioning solve so

337
00:21:05,336 --> 00:21:09,006
many headaches, it's only inevitable with the recent push for software

338
00:21:09,038 --> 00:21:12,750
supply chain security that we see these become more of a priority.

339
00:21:12,910 --> 00:21:16,434
And lastly, the spicy take transitive vulnerabilities can usually

340
00:21:16,472 --> 00:21:20,546
be ignored. I say usually because there are some very, very special cases,

341
00:21:20,658 --> 00:21:24,774
but even then, if you're using respectable packages, they themselves will

342
00:21:24,812 --> 00:21:28,474
often create a security advisory due to their usage of a transitive one,

343
00:21:28,592 --> 00:21:32,182
which ultimately makes it a vulnerability impacting a direct dependency.

344
00:21:32,326 --> 00:21:35,562
So transitive vulnerabilities don't matter at all if

345
00:21:35,616 --> 00:21:38,886
you're making security advisories for the direct dependencies.

346
00:21:39,078 --> 00:21:42,414
Now, this could very easily start a debate as to why the current

347
00:21:42,452 --> 00:21:46,378
standards for reporting supply chain vulnerabilities is ineffective,

348
00:21:46,554 --> 00:21:50,654
but we'll save that for another time, and that about wraps things up.

349
00:21:50,692 --> 00:21:53,982
Thank you for joining this talk, and if you are at all interested in learning

350
00:21:54,036 --> 00:21:57,706
more about reachability or the Semgrip supply chain product, I've included

351
00:21:57,738 --> 00:22:01,006
links in the slide. Lastly, if you want to keep up with the latest in

352
00:22:01,028 --> 00:22:05,202
software supply chain security news, feel free to check out my newsletter, cram hack

353
00:22:05,306 --> 00:22:08,514
and subscribe. Or if you'd like to contact me directly,

354
00:22:08,562 --> 00:22:10,340
I've included my LinkedIn as well.

