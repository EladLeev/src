1
00:00:26,050 --> 00:00:29,586
Hi, this is a presentation on using the new MySQL

2
00:00:29,618 --> 00:00:32,694
Shell with Python and I'd like to

3
00:00:32,732 --> 00:00:36,278
start by introducing myself. My name is Dave Stokes. I'm a

4
00:00:36,284 --> 00:00:39,366
community manager. I've been on the MySQL community team for just over a

5
00:00:39,388 --> 00:00:42,774
decade using MySQL since it first came out,

6
00:00:42,892 --> 00:00:46,246
and this will hopefully be a quick introduction to the MySQL shell and

7
00:00:46,268 --> 00:00:49,378
how to extend it with Python. Safe harbor statement

8
00:00:49,394 --> 00:00:52,922
I work for Oracle. During the course of this presentation

9
00:00:52,986 --> 00:00:57,034
I'm talking about the free open source version of MySQL and the MySQL Shell

10
00:00:57,162 --> 00:01:00,574
all out there under the GPL. However, in Q-A-I might very

11
00:01:00,612 --> 00:01:04,538
often some new functionality coming in future releases

12
00:01:04,714 --> 00:01:08,306
since I don't have perfect knowledge of those perfect releases and what

13
00:01:08,328 --> 00:01:11,666
I know is probably wrong. Take anything I say about a future release with a

14
00:01:11,688 --> 00:01:15,860
grain of salt. So about me

15
00:01:16,310 --> 00:01:20,174
once again I'm on the MyScope community team. I live in Texas. The slides

16
00:01:20,222 --> 00:01:24,514
would be available@slideshare.net Slash Dave Stokes I got a blog at elephantdolphin

17
00:01:24,562 --> 00:01:27,826
blogspot.com. If you need to get a hold of me, I'm at Stoker on Twitter

18
00:01:27,858 --> 00:01:31,674
or David stokes@oracle.com so what

19
00:01:31,712 --> 00:01:34,790
is the new MySQL Shell? Well, if you used our old interface,

20
00:01:34,870 --> 00:01:38,614
anything before 80 it was a simple commandline editor.

21
00:01:38,662 --> 00:01:42,458
The new shell is much more advanced in that it allows you to process

22
00:01:42,544 --> 00:01:45,502
queries in structured query language. Big surprise there,

23
00:01:45,556 --> 00:01:48,874
eh? Also there's a JavaScript mode and a Python

24
00:01:48,922 --> 00:01:52,398
mode. So between these three modes you've got a lot of flexibility. And by the

25
00:01:52,404 --> 00:01:55,274
way, if you have something that's written in Python, you can run it in JavaScript

26
00:01:55,322 --> 00:01:58,926
modes, and JavaScript modes stuff can run in Python.

27
00:01:59,118 --> 00:02:02,894
So if you haven't seen our new shell, it's no longer monochromatic

28
00:02:03,022 --> 00:02:05,918
when you fire it up. It of course gives you the copyright.

29
00:02:06,094 --> 00:02:10,018
And if you notice here, this yellow stuff here says js

30
00:02:10,114 --> 00:02:13,398
for JavaScript. Well what if you don't like JavaScript and you'd want

31
00:02:13,404 --> 00:02:16,726
to use Python? Py moves you into Python mode. And if

32
00:02:16,748 --> 00:02:20,214
you're an old timer like me and you want SQL, there you go. You can

33
00:02:20,252 --> 00:02:23,814
run SQl by the way, you can run SQL code from Python or JavaScript

34
00:02:23,862 --> 00:02:27,066
mode as you wish. Now once you log in,

35
00:02:27,168 --> 00:02:30,842
if you do a backslash s for status or you can do a session get

36
00:02:30,896 --> 00:02:33,758
status, there's some things here I like to point out to you.

37
00:02:33,924 --> 00:02:37,754
First thing, if you can see my mouse here is by default we're secure

38
00:02:37,802 --> 00:02:41,726
we're using SSL with TLS AES 256 by

39
00:02:41,748 --> 00:02:44,366
default. If you don't need it, you can turn it off, but by default we

40
00:02:44,388 --> 00:02:48,206
wanted to give that to you. Also, our default character set now is UTF

41
00:02:48,238 --> 00:02:51,730
eight mb four. That's to help get all four planes of the

42
00:02:51,880 --> 00:02:56,638
90 unit code standard, which means yes, you do get emojis.

43
00:02:56,734 --> 00:03:00,042
Yay. And by the way, if you notice down here, compression,

44
00:03:00,126 --> 00:03:03,842
if you need to compress stuff, that helps a lot sound by default.

45
00:03:03,986 --> 00:03:07,126
So with the new shell you have two types of sessions. The classic, which is

46
00:03:07,148 --> 00:03:10,262
our old port three three six. We've had that for 25 years. Yes,

47
00:03:10,316 --> 00:03:14,538
MySQL is 25 year old. And we also have another port 3360

48
00:03:14,624 --> 00:03:18,326
for the new Xdev API, which is designed to handle

49
00:03:18,358 --> 00:03:22,206
both SQL traffic and NoSQL traffic. You can use MySQL as

50
00:03:22,228 --> 00:03:26,078
a NoSQL JSON document store. By the

51
00:03:26,084 --> 00:03:29,754
way, you can reach the JSON stuff from the classic

52
00:03:29,802 --> 00:03:33,226
side and the classic stuff from the NoSQL

53
00:03:33,258 --> 00:03:36,618
side. Trying to give you more flexibility. Now the reason we're

54
00:03:36,634 --> 00:03:39,634
here today is I want to talk about the functions. If you write functions or

55
00:03:39,672 --> 00:03:43,518
programs or scripts or whatever you want to call it, in either JavaScript or Python,

56
00:03:43,614 --> 00:03:47,358
and you find them handy, you can actually run them under different sessions.

57
00:03:47,454 --> 00:03:50,966
So you can have one session running JavaScript, two more running Python, run all

58
00:03:50,988 --> 00:03:54,694
sorts of reports and all that. Now to log in you can either

59
00:03:54,732 --> 00:03:58,118
type in MySQL shell, root at localhost or whatever thing.

60
00:03:58,204 --> 00:04:00,658
Or once you get the shell fired up, you can do a backslash c for

61
00:04:00,684 --> 00:04:03,958
connect and you log in. Or once you get fired

62
00:04:03,974 --> 00:04:07,786
up you can have multiple sessions. Now this example is in JavaScript where we're having

63
00:04:07,968 --> 00:04:11,434
session one, which we say we're going to do a classic session which

64
00:04:11,472 --> 00:04:14,726
will work to three, three six, account name and password.

65
00:04:14,838 --> 00:04:17,518
Now if I want a second session to generate data and feed it to the

66
00:04:17,524 --> 00:04:20,526
first session, no problem there. Oh, by the way,

67
00:04:20,548 --> 00:04:23,630
if you want encryption, you can specify how you want it,

68
00:04:23,700 --> 00:04:26,962
where you want your definitions for all the stuff.

69
00:04:27,096 --> 00:04:30,306
In this example we're accepting TLS eleven and one

70
00:04:30,328 --> 00:04:33,650
two. Well, by default compression is turned on, but if you want to

71
00:04:33,720 --> 00:04:37,198
specify your algorithms like LZ four or Z standard and

72
00:04:37,224 --> 00:04:40,518
the local compression, you can do that. Also,

73
00:04:40,604 --> 00:04:44,006
something we can offer for you is JSON schema validation. JSon by

74
00:04:44,028 --> 00:04:47,366
default is very loosey goosey. There's no rigor on

75
00:04:47,388 --> 00:04:50,662
there. Traditionally, relational databases is very tightly

76
00:04:50,726 --> 00:04:55,606
structured. One thing we do, thanks to the wonderful, wonderful people@jsonschema.org,

77
00:04:55,718 --> 00:04:59,558
is we can set up an exemplar template that we test your incoming

78
00:04:59,574 --> 00:05:02,750
JSON documents against and we can say hey,

79
00:05:02,900 --> 00:05:06,890
we have this required field and the values,

80
00:05:06,970 --> 00:05:10,782
it takes numbers and the minimum value is -90 the maximum number 90.

81
00:05:10,916 --> 00:05:14,814
Maximum is plus 90. So you can set up required fields range check

82
00:05:14,852 --> 00:05:17,890
and type checks. Very very handy. By the way,

83
00:05:17,960 --> 00:05:20,786
first time you log in using the MySQL shell, it will ask you if you

84
00:05:20,808 --> 00:05:24,446
want to store your password that is hashed very securely.

85
00:05:24,558 --> 00:05:27,714
So if you don't want to keep typing your password, that will do that work

86
00:05:27,752 --> 00:05:30,994
for you too. By the way, if you have some code in Python,

87
00:05:31,122 --> 00:05:33,942
you can just pipe it with a shell and away it will go.

88
00:05:34,076 --> 00:05:37,314
Make sure you're in Python mode of course. By the way, if you have libraries

89
00:05:37,362 --> 00:05:42,234
you like, like this example, I'm using datetime. I import the

90
00:05:42,272 --> 00:05:45,850
datetime library and I get full access to that.

91
00:05:45,920 --> 00:05:48,794
So if you have libraries you'd like to work with the data with, it's all

92
00:05:48,832 --> 00:05:52,494
there for you. Also, if you're using our

93
00:05:52,532 --> 00:05:56,554
new Xdev API as a NoSQL document

94
00:05:56,602 --> 00:06:00,094
store, the MySQL no longer requires you to actually go out and

95
00:06:00,132 --> 00:06:03,594
use SQL if you don't want to. You'll find this is a very straightforward

96
00:06:03,642 --> 00:06:07,474
API. On our system, we're connected to a database called

97
00:06:07,512 --> 00:06:11,106
WorldX. It has a document collection. We've typed get

98
00:06:11,128 --> 00:06:14,626
collection. It'll tell you the name of that collection is country info. So the

99
00:06:14,648 --> 00:06:17,918
current database pointer to that collection, we're going to find

100
00:06:18,024 --> 00:06:21,730
all the records that have a name like a parameter and we bind

101
00:06:21,810 --> 00:06:25,026
uppercase s wildcard to that parameter and we're going to limit

102
00:06:25,058 --> 00:06:28,434
to one. So our new API is very straightforward,

103
00:06:28,482 --> 00:06:32,790
very easy to use, very similar between all three languages.

104
00:06:33,210 --> 00:06:37,002
Also supports in our other various connectors, very easy to use. Once again,

105
00:06:37,056 --> 00:06:41,130
if you don't like SQL, you do mysql without SQL.

106
00:06:41,710 --> 00:06:45,626
By the way, I'm going to repeat that. You find out your collections,

107
00:06:45,818 --> 00:06:49,214
go out and run your query. By the way, it is not

108
00:06:49,252 --> 00:06:53,322
an Orm, it is actually a totally clean sheet protocol

109
00:06:53,386 --> 00:06:56,750
written on Google protobuffs. Real nice design.

110
00:06:56,820 --> 00:06:59,026
And by the way has a lot of smarts put in there so it gets

111
00:06:59,048 --> 00:07:02,610
rid of things like most SQL injection. Okay, here's another

112
00:07:02,680 --> 00:07:06,254
thing. I'm logged in. I'm in Python mode. For my current session,

113
00:07:06,302 --> 00:07:09,746
I'm going to run underscore SQL on just a straight query. So that'd be the

114
00:07:09,768 --> 00:07:13,158
same as going out to the SQL mode and running the same query by the

115
00:07:13,164 --> 00:07:16,438
way, if you notice this is out in a table output. If you want to

116
00:07:16,444 --> 00:07:19,766
do it in JSon you tell your shell hey, my resort format is

117
00:07:19,788 --> 00:07:23,218
going to be JSON and how it comes in JSOn very

118
00:07:23,244 --> 00:07:26,982
very handy. By the way, I mentioned earlier, you don't need to use SQl

119
00:07:27,046 --> 00:07:29,786
say like you have a project where your bosses tell you hey, go ahead and

120
00:07:29,808 --> 00:07:33,194
start coding, we'll tell you what you're actually doing next week. It's real easy

121
00:07:33,232 --> 00:07:36,814
to go out there and create a document collection and in there

122
00:07:36,852 --> 00:07:40,014
we're going to add a record and haven't gone,

123
00:07:40,052 --> 00:07:43,166
had to go out and set up relations, had to set up indexes. I'm able

124
00:07:43,188 --> 00:07:46,990
to just store data right off the bat. Now if I

125
00:07:47,060 --> 00:07:50,626
do a DB openjs the collection we create up here and in

126
00:07:50,648 --> 00:07:53,106
a record you'll notice that when I do the find command that it gives you

127
00:07:53,128 --> 00:07:56,418
an underscore id. This is the value you can specify or have the

128
00:07:56,424 --> 00:08:00,166
server generate it for you. This is actually a primary key for

129
00:08:00,188 --> 00:08:04,054
the NoDB storage engine. Very important, but I'm not going to go off into that.

130
00:08:04,172 --> 00:08:08,466
So if you have JavaScript libraries, this is an example of JavaScript libraries.

131
00:08:08,658 --> 00:08:12,310
If I type in the libraries require a file.

132
00:08:12,390 --> 00:08:15,846
If I do Dave tab, it shows me the two functions we have defined

133
00:08:15,878 --> 00:08:19,546
over here and I can run them at will. That's about the

134
00:08:19,568 --> 00:08:23,146
same thing for JavaScript. Now you can define your own extensions to

135
00:08:23,168 --> 00:08:26,846
the base functionality of the shell. It forms their reports and

136
00:08:26,868 --> 00:08:30,286
extensions. Now these can be created once again in JavaScript or

137
00:08:30,308 --> 00:08:33,786
Python, and they're accessible from either of those languages.

138
00:08:33,978 --> 00:08:37,154
You can persist these, you can watch them, have them run over and over

139
00:08:37,192 --> 00:08:41,326
again, and they are automatically loaded every time the shell starts. Now here's

140
00:08:41,358 --> 00:08:44,734
an interesting example. We're going to define

141
00:08:44,782 --> 00:08:48,350
a quick little extension in Python.

142
00:08:48,510 --> 00:08:51,782
And the trick down here is we create

143
00:08:51,836 --> 00:08:55,318
a function, this one where I'm just going to call show tables and we have

144
00:08:55,324 --> 00:08:57,558
to make sure that we have a session. You have to be logged into the

145
00:08:57,564 --> 00:09:00,738
database to actually get access to the tables.

146
00:09:00,834 --> 00:09:04,598
So if you don't have a session it kind of tells

147
00:09:04,614 --> 00:09:08,026
you where to go. So if you do have a session, it's basically going

148
00:09:08,048 --> 00:09:11,354
to run underscore SQL, select from world city and then

149
00:09:11,392 --> 00:09:14,586
dump out the results. Now the trick is to register the shell is

150
00:09:14,608 --> 00:09:18,446
we have to have a plugin object and we create an extension for that.

151
00:09:18,468 --> 00:09:21,566
And for that plugin object that we have here, we give it the name of

152
00:09:21,588 --> 00:09:25,726
our function, what we want to call it, and a little bit of help information

153
00:09:25,908 --> 00:09:28,818
as you can see there in what, a dozen lines of code.

154
00:09:28,904 --> 00:09:31,326
Very easy to set up a basic loop query.

155
00:09:31,518 --> 00:09:34,414
So once again, make sure we have a session,

156
00:09:34,542 --> 00:09:37,814
and once we have a session we can run queries all day long.

157
00:09:38,012 --> 00:09:42,034
Now as I mentioned before, all we have to do is register the plugin

158
00:09:42,082 --> 00:09:46,258
object with our function and easy peasy. Now reports

159
00:09:46,274 --> 00:09:50,374
are a little bit different. You can register a report that you define

160
00:09:50,502 --> 00:09:55,078
in any Python or JavaScript. The reporting facility

161
00:09:55,174 --> 00:09:58,378
handles building reports. There's a whole bunch of out there already for you.

162
00:09:58,464 --> 00:10:02,158
And reports can specify a list of report specific options. If you

163
00:10:02,164 --> 00:10:04,270
want to have a v for verbose,

164
00:10:05,250 --> 00:10:08,814
z for compress, however you want to do it and

165
00:10:08,932 --> 00:10:12,574
you could have all sorts of inputs so it actually read

166
00:10:12,612 --> 00:10:15,966
from the screen. Now instead of registering

167
00:10:16,078 --> 00:10:19,394
a plugin, it's register report. Otherwise it's pretty

168
00:10:19,432 --> 00:10:23,438
much like you've seen earlier. You can write your own reports.

169
00:10:23,614 --> 00:10:27,598
This is one where it modes out there and watches the sessions. I believe this

170
00:10:27,624 --> 00:10:30,966
one's actually built into the new shell and when you run

171
00:10:30,988 --> 00:10:34,514
it, it tells you I'm running this with a slash watch sessions

172
00:10:34,562 --> 00:10:37,778
which is the name of our report and

173
00:10:37,804 --> 00:10:41,130
it runs every 2 seconds. When the building

174
00:10:41,200 --> 00:10:44,934
reports you can set up intervals, you can set up global

175
00:10:44,982 --> 00:10:49,210
statuses to watch. You can run things in foreground background

176
00:10:49,550 --> 00:10:53,478
however you want to do it. Now the shell by default also has some

177
00:10:53,504 --> 00:10:57,230
utilities. For those of you who deal with a lot of data.

178
00:10:57,380 --> 00:11:00,638
One very important one is import JSON. So if you have a

179
00:11:00,644 --> 00:11:03,850
lot of JSoN it's very easy to use. You say util

180
00:11:03,930 --> 00:11:07,298
import JSoN, the name of the file, what schema or database you're

181
00:11:07,304 --> 00:11:12,402
loading into, and what you want to call the collection. This works with

182
00:11:12,456 --> 00:11:15,666
the latest version of the shell. Also for those of you who are on five

183
00:11:15,688 --> 00:11:19,438
seven wanting to go to 80, we have a uterus check for server upgrade.

184
00:11:19,534 --> 00:11:22,406
This will go out there and make sure that you're not using reserved words.

185
00:11:22,508 --> 00:11:26,066
We have several new reserved words in 80. Also make sure that you're

186
00:11:26,098 --> 00:11:29,720
not going to run into any problems like converting over to utf eight and before.

187
00:11:30,190 --> 00:11:33,834
Also we can have utilities for importing tables. We have

188
00:11:33,872 --> 00:11:37,126
a lot of interesting stuff off the import table. If you've

189
00:11:37,158 --> 00:11:40,474
been playing with MySQl dump for years and years and years, are looking

190
00:11:40,512 --> 00:11:44,670
for something a little bit faster. We have export table and

191
00:11:44,820 --> 00:11:47,934
that's a very fast way to dump your data. And we also

192
00:11:47,972 --> 00:11:51,326
have the ability to dump in the entire instance. So if

193
00:11:51,348 --> 00:11:54,478
you want everything on the server, you can do that. If you want to

194
00:11:54,484 --> 00:11:57,190
test to see how long it's going to run, you can do that. If you're

195
00:11:57,210 --> 00:12:00,478
using the Oracle cloud, there's some functionality you can do there for setting

196
00:12:00,494 --> 00:12:03,986
up buckets and all that. If you want to dump tables, you can just say

197
00:12:04,008 --> 00:12:07,514
okay, from this schema, I want these two tables.

198
00:12:07,662 --> 00:12:10,710
Very interesting. Fun. Now if you want to learn more about all this,

199
00:12:10,780 --> 00:12:14,178
the MySQL Shell is actually fairly well documented

200
00:12:14,274 --> 00:12:17,042
and there's lots of examples on writing plugins.

201
00:12:17,186 --> 00:12:20,682
This one, developpaper.com is a very good starting

202
00:12:20,736 --> 00:12:24,150
place. My counterpart from Belgium

203
00:12:24,310 --> 00:12:27,466
has a lot of interesting blogs about how to do that.

204
00:12:27,568 --> 00:12:30,822
Also he has a GitHub libraries of a whole bunch of shell plugins

205
00:12:30,886 --> 00:12:34,266
that are very nice, very very handy things like that.

206
00:12:34,288 --> 00:12:37,758
You copy users, check in ODB status and all other stuff.

207
00:12:37,844 --> 00:12:40,526
And before I go, I'd like to say, hey, if you want to run the

208
00:12:40,548 --> 00:12:44,238
MySQL shell under our new MySQL database service,

209
00:12:44,324 --> 00:12:48,034
if you go to this location, you can get $300 in credits. This is

210
00:12:48,072 --> 00:12:51,266
quite a long time, month or two if you stay

211
00:12:51,288 --> 00:12:54,798
in the low end engines for free to go out there and test the MySQL

212
00:12:54,814 --> 00:12:57,778
service. By the way, this is the full enterprise version of MySQL Eight and it

213
00:12:57,784 --> 00:13:01,046
is the latest and greatest, and it is monitored and supported by

214
00:13:01,068 --> 00:13:04,198
MySQL engineers. Also, if you're a member of

215
00:13:04,204 --> 00:13:07,494
the MySQL community, congratulations, you're now a member of the MySQL community.

216
00:13:07,612 --> 00:13:10,754
Please join us on MySQL community manager

217
00:13:10,802 --> 00:13:13,926
on mySql.com under Twitter we're MySQl,

218
00:13:13,958 --> 00:13:17,398
Facebook we're MySQL and LinkedIn Render MySQL.

219
00:13:17,574 --> 00:13:21,786
By the way, if you are a startup and startups only, you can enroll@oracle.com.

220
00:13:21,808 --> 00:13:24,894
Slash startup get a whole bunch of cloud credits, whole bunch of help with other

221
00:13:24,932 --> 00:13:27,390
areas, exposure with marketing,

222
00:13:27,730 --> 00:13:31,134
some good stuff if you want to do some events, because events are coming back.

223
00:13:31,172 --> 00:13:34,446
Thank goodness. This is a great thing if you are a startup because Oracle really

224
00:13:34,468 --> 00:13:37,358
wants to get you off the ground. And by the way, if you're using a

225
00:13:37,364 --> 00:13:40,526
lot of JSON with MySQL, please buy a copy of my book. This is the

226
00:13:40,548 --> 00:13:43,866
second edition. First edition came out three years ago and we keep adding

227
00:13:43,898 --> 00:13:46,806
new features. So a second edition is new. This is for folks who want to

228
00:13:46,828 --> 00:13:50,038
learn how to use JSON with a database. Our manual is good, but it's a

229
00:13:50,044 --> 00:13:53,222
reference guide, not a coding example.

230
00:13:53,356 --> 00:13:56,742
And this is how you do it best. Practices guide available

231
00:13:56,796 --> 00:14:00,198
on Amazon today. And with that, we're going to go into Q A,

232
00:14:00,284 --> 00:14:01,620
and I want to thank you for your time.

