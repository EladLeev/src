1
00:00:23,530 --> 00:00:26,710
Hi everybody. My name is Moshe Zadka. My website

2
00:00:26,780 --> 00:00:30,246
is cobodies.com, where you can find every way of reaching out to me, known to

3
00:00:30,268 --> 00:00:33,878
humankind. And today I want to talk to you about Pyo three

4
00:00:33,964 --> 00:00:37,314
and how Python loves rust. I want to start with the acknowledgment

5
00:00:37,362 --> 00:00:40,946
of country. I live in Belmont in the San Francisco Bayer

6
00:00:40,978 --> 00:00:44,306
peninsula, which is the ancestral homeland of the raw

7
00:00:44,338 --> 00:00:48,182
Tusholoni people. Let's start by talking a little bit about

8
00:00:48,316 --> 00:00:52,286
rust. What use it, why using it

9
00:00:52,308 --> 00:00:55,440
might be a good idea, and how to use it.

10
00:00:56,130 --> 00:01:01,054
What is rust? Rust is a low level language which

11
00:01:01,092 --> 00:01:04,466
supports zero cost abstractions, abstractions that don't have

12
00:01:04,488 --> 00:01:07,934
any one time cost, and it is memory

13
00:01:07,982 --> 00:01:11,474
safe. This combination is pretty rare, and that's what

14
00:01:11,512 --> 00:01:15,058
makes rust useful. So why

15
00:01:15,224 --> 00:01:17,250
is this combination useful?

16
00:01:17,830 --> 00:01:21,160
Well, sometimes, as they say,

17
00:01:21,530 --> 00:01:25,670
algorithm needs to go vroom, right? Performance is useful.

18
00:01:26,570 --> 00:01:30,154
However, the algorithm often runs on untrusted data.

19
00:01:30,352 --> 00:01:33,946
We really like it, even if the data is bad, even if

20
00:01:33,968 --> 00:01:38,140
it's bugging the algorithm. The way it

21
00:01:39,070 --> 00:01:42,534
comes about is not harmful, right? It doesn't say

22
00:01:42,592 --> 00:01:44,720
open a security issue.

23
00:01:45,890 --> 00:01:49,086
The prototypical example that you want to keep in mind when

24
00:01:49,108 --> 00:01:51,790
you think about trust is low level parsing.

25
00:01:52,690 --> 00:01:56,382
Let's say that you need to parse some new weird

26
00:01:56,446 --> 00:01:59,986
low level format. Your parser will probably have to do with some

27
00:02:00,008 --> 00:02:03,586
untrusted data. You can't use

28
00:02:03,688 --> 00:02:07,166
a higher level library because this is new format. So you have to go byte

29
00:02:07,198 --> 00:02:10,566
by byte, which means you want something that can give you the performance of

30
00:02:10,588 --> 00:02:14,070
reading something byte by byte while still keeping safety in mind

31
00:02:14,140 --> 00:02:17,506
and giving you the zero cost abstractions to make sure that your

32
00:02:17,548 --> 00:02:20,410
code still is readable and easy to debug.

33
00:02:21,230 --> 00:02:24,058
So for my example,

34
00:02:24,144 --> 00:02:27,386
I'll use counting as kind of

35
00:02:27,408 --> 00:02:30,762
my low level parsing example. It's a nice third

36
00:02:30,816 --> 00:02:33,966
example that will show us a number of features in rust and how to use

37
00:02:33,988 --> 00:02:37,806
them for Python. So in this example,

38
00:02:37,908 --> 00:02:41,454
we need to check if a character appears more than x time,

39
00:02:41,652 --> 00:02:44,606
not to say how many times it appears. We just need to see if it

40
00:02:44,628 --> 00:02:48,030
goes above a threshold value. That's an interesting twist.

41
00:02:48,110 --> 00:02:51,698
And that means that we can't use a lot of other things that

42
00:02:51,864 --> 00:02:54,526
might be super useful in general for counting,

43
00:02:54,638 --> 00:02:58,550
but will, for example, read the whole file,

44
00:02:58,970 --> 00:03:03,014
even if we only need to check for three

45
00:03:03,052 --> 00:03:05,910
appearances, and those all appeared in the beginning.

46
00:03:06,650 --> 00:03:10,374
We want to enable resetting counts on spaces

47
00:03:10,422 --> 00:03:13,514
and new lines. Again,

48
00:03:13,552 --> 00:03:17,290
this is the example, so you can think of like a

49
00:03:17,360 --> 00:03:21,242
use case, right? We want to see is there the word that includes x

50
00:03:21,296 --> 00:03:25,054
more than the character more than x time, or if there's a line that

51
00:03:25,092 --> 00:03:26,720
includes it more than x time.

52
00:03:27,970 --> 00:03:32,058
Again, this is not very complicated to implement,

53
00:03:32,154 --> 00:03:35,778
which is what makes it a good example, and does have enough

54
00:03:35,864 --> 00:03:39,266
nooks and trannies that we'll be able to use it to kind of get

55
00:03:39,288 --> 00:03:42,722
into some of the interesting parts of interfacing between

56
00:03:42,776 --> 00:03:46,422
Python and rust. So it's really

57
00:03:46,476 --> 00:03:49,586
just interesting enough. So let's

58
00:03:49,618 --> 00:03:53,174
start writing some rust code. The first thing we know is that we need to

59
00:03:53,212 --> 00:03:56,566
support three options. Reset on new

60
00:03:56,588 --> 00:03:59,746
lines, reset on spaces, and no reset.

61
00:03:59,938 --> 00:04:03,578
So we make it an enum that would be probably the equivalent to

62
00:04:03,584 --> 00:04:07,100
what we would choose in Python to make it as a three way num.

63
00:04:08,190 --> 00:04:11,850
And now we have the structure that kind of keeps the parameters

64
00:04:11,930 --> 00:04:15,646
of the problem, right? So you want to

65
00:04:15,668 --> 00:04:19,262
define the character, we want to define the min

66
00:04:19,316 --> 00:04:22,350
number and what is the reset.

67
00:04:22,710 --> 00:04:26,482
And in our example we just have one method has

68
00:04:26,536 --> 00:04:30,274
count, where you give it some data and

69
00:04:30,312 --> 00:04:33,380
it checks if it has a count.

70
00:04:34,550 --> 00:04:37,922
In order to make the code a bit more site friendly,

71
00:04:38,066 --> 00:04:42,230
I've moved some of the implementation

72
00:04:42,570 --> 00:04:45,746
into a separate has count internal function that won't

73
00:04:45,778 --> 00:04:49,290
be exposed to Python later on. Spoiler alert.

74
00:04:50,190 --> 00:04:53,994
But that makes it easier to kind of fit different things

75
00:04:54,032 --> 00:04:57,882
on slide. So the function takes

76
00:04:57,936 --> 00:05:02,000
a counter, it takes the data,

77
00:05:02,690 --> 00:05:06,798
and it returns a boolean, and it

78
00:05:06,964 --> 00:05:10,506
loops over the character. It will update

79
00:05:10,538 --> 00:05:14,590
the current counter. You'll notice that I

80
00:05:14,660 --> 00:05:17,934
define current count as a mutable. That's mutable.

81
00:05:18,062 --> 00:05:21,410
And when I pass it, I pass it as a mutable reference,

82
00:05:21,750 --> 00:05:25,026
which means as the changing site. I can tell that this

83
00:05:25,048 --> 00:05:28,614
is a function that might update current count as well as

84
00:05:28,652 --> 00:05:32,370
get it as an input. And if it returns Boolean,

85
00:05:32,450 --> 00:05:35,910
then I can stop. I know that I already have enough

86
00:05:35,980 --> 00:05:39,626
count, so I can stop. So now we

87
00:05:39,648 --> 00:05:41,260
need to implement that count,

88
00:05:43,230 --> 00:05:46,170
and we do maybe reset,

89
00:05:46,750 --> 00:05:50,054
which might reset if we

90
00:05:50,112 --> 00:05:54,282
encounter a reset character. It maybe increments

91
00:05:54,426 --> 00:05:58,510
if this is the right count character, and if

92
00:05:58,580 --> 00:06:02,378
it sees that the current count is bigger

93
00:06:02,394 --> 00:06:05,826
than the minimum number, it returns true. I do that by just having the

94
00:06:05,848 --> 00:06:09,166
last expression equal true. So the way Ras

95
00:06:09,198 --> 00:06:13,410
interprets a semicolon separated

96
00:06:14,150 --> 00:06:18,934
list of expressions is by evaluating them in order and

97
00:06:18,972 --> 00:06:22,326
returning the value of the last expression, which in

98
00:06:22,348 --> 00:06:26,198
this case is a boolean, saying whether we've exceeded the

99
00:06:26,204 --> 00:06:29,190
current count, maybe reset.

100
00:06:29,270 --> 00:06:33,162
Use a pretty fun feature of rust, which is

101
00:06:33,216 --> 00:06:37,254
the match. So in this case I match on a tuple. The tuple

102
00:06:37,302 --> 00:06:41,050
is the character. And what is the reset

103
00:06:41,630 --> 00:06:45,166
and if it's new line and the reset is new

104
00:06:45,188 --> 00:06:48,506
lines reset, or if it's space and the reset

105
00:06:48,538 --> 00:06:52,174
is spaces reset, then I reset the count, and otherwise I do

106
00:06:52,212 --> 00:06:55,362
nothing. Every function in rust has to return

107
00:06:55,416 --> 00:06:58,734
a value, but in this case the value is the empty tuple,

108
00:06:58,782 --> 00:07:01,810
which is always the same value, which is the empty tuple.

109
00:07:02,790 --> 00:07:06,014
Maybe incur checks if the character

110
00:07:06,062 --> 00:07:10,102
equals to the target character, and if so, it increments the count.

111
00:07:10,236 --> 00:07:13,366
You notice that here I direct the current count,

112
00:07:13,548 --> 00:07:17,366
and you'll also notice that again, both in the calling site

113
00:07:17,468 --> 00:07:19,000
and in the function.

114
00:07:20,330 --> 00:07:24,486
I take care to note that current counter

115
00:07:24,598 --> 00:07:28,314
is a mutable reference, right? Which means that

116
00:07:28,512 --> 00:07:32,234
it will always know that it's a mutable reference at every point.

117
00:07:32,432 --> 00:07:35,726
And the important thing is that this is not a default. And so if you

118
00:07:35,748 --> 00:07:39,774
don't see that, you know, for example, in this case, that counter cannot be

119
00:07:39,812 --> 00:07:45,198
changed because that's not a mutable reference. So again,

120
00:07:45,284 --> 00:07:48,514
I wrote this code both to fit on slides. This is not necessarily the best

121
00:07:48,552 --> 00:07:53,086
practices. I didn't format the code according

122
00:07:53,118 --> 00:07:56,706
to the best formatting guidelines, again with the ideal that it

123
00:07:56,728 --> 00:08:00,614
fits into a slide and be reasonably readable. Here, the API between

124
00:08:00,652 --> 00:08:04,502
the functions is definitely not ideal. Even the higher level

125
00:08:04,556 --> 00:08:07,766
API is not what I would choose in other cases. But this is

126
00:08:07,788 --> 00:08:11,542
enough to have working code. It's not really

127
00:08:11,596 --> 00:08:15,514
bad rasp, it's just not an ideal rasp, but it's nice

128
00:08:15,552 --> 00:08:18,762
to see it on slides. And now we see how that code,

129
00:08:18,816 --> 00:08:22,406
right? So again, in kind of our imagination,

130
00:08:22,438 --> 00:08:26,400
that code was kind of mostly written or pre written before we start,

131
00:08:27,730 --> 00:08:31,530
but we have to understand it so that we can properly wrap it in python.

132
00:08:31,690 --> 00:08:34,346
So now let's go to the wrapping parts.

133
00:08:34,538 --> 00:08:38,162
There's obviously a few ways to wrap it, but using pyro three is

134
00:08:38,216 --> 00:08:42,222
really nice, because all we do is add annotations

135
00:08:42,286 --> 00:08:45,518
to the Ras code. We don't have to write any python code or any kind

136
00:08:45,544 --> 00:08:48,726
of glue code. The only thing we do

137
00:08:48,828 --> 00:08:52,390
is go inside the RAs code and add proper annotations,

138
00:08:53,770 --> 00:08:57,286
so it's purely in line. And which means that as the

139
00:08:57,308 --> 00:09:00,540
code is modified, it's modified together with the wrapping code,

140
00:09:01,070 --> 00:09:04,614
we start with like include. This is the rust

141
00:09:04,662 --> 00:09:08,486
equivalent to import statement. So we use a Pyo three prelude,

142
00:09:08,518 --> 00:09:11,420
which imports a lot of stuff that we'll use on later.

143
00:09:12,670 --> 00:09:16,810
And now we have to decorate the reset

144
00:09:17,470 --> 00:09:20,590
enam a little bit. So we say this is a pyo class,

145
00:09:20,660 --> 00:09:24,786
which means please expose it to Python, and it

146
00:09:24,808 --> 00:09:28,674
can't be exposed to Python unless it implements clone or

147
00:09:28,712 --> 00:09:32,466
copy, and these are basically things that we

148
00:09:32,488 --> 00:09:35,698
would need to implement ourselves, except in waste. Often when you

149
00:09:35,704 --> 00:09:39,046
want to say copy it the obvious way that you would have

150
00:09:39,068 --> 00:09:42,646
copied, and clone it the obvious way that you would have cloned it.

151
00:09:42,828 --> 00:09:46,706
There's a specific way to spell these things, and that's what derived

152
00:09:46,738 --> 00:09:50,626
clone and derived copy means. It means there's

153
00:09:50,658 --> 00:09:54,054
only one reasonable way to copy that. There's only one reasonable way to clone

154
00:09:54,102 --> 00:09:57,500
that. Please just write the code yourself, don't make me do that.

155
00:09:57,950 --> 00:10:01,926
So Russ will happily do that for you. The counter

156
00:10:01,958 --> 00:10:04,846
is a little bit simpler. All we need to do is just wrap it with

157
00:10:04,868 --> 00:10:08,394
a PI class and the implement. We wrap

158
00:10:08,442 --> 00:10:11,742
with PI methods and we add a new method called

159
00:10:11,796 --> 00:10:15,490
new. We didn't have to have it for us because we could

160
00:10:15,640 --> 00:10:19,486
create a new counter object directly from rust. It wasn't

161
00:10:19,598 --> 00:10:22,914
hidden. But in our case we do want to

162
00:10:22,952 --> 00:10:26,546
make it exposed to Python, and that means that we need to expose a

163
00:10:26,568 --> 00:10:29,798
constructor to Python. So we expose the

164
00:10:29,804 --> 00:10:33,478
constructor to Python that takes the parameters and sets them in

165
00:10:33,484 --> 00:10:36,774
the structure. And with all of that

166
00:10:36,812 --> 00:10:40,090
done, we just tell the module to

167
00:10:40,160 --> 00:10:44,442
include the counter and to include the reset and

168
00:10:44,496 --> 00:10:48,266
we return ok. The question marks means that

169
00:10:48,288 --> 00:10:51,742
if there's a problem in adding either class

170
00:10:51,876 --> 00:10:54,942
that will raise an exception. Well, it will return

171
00:10:54,996 --> 00:10:59,674
an incorrect PI result, which in Python, when it's unwrapped

172
00:10:59,802 --> 00:11:03,906
will raise an exception saying I had a problem initializing that.

173
00:11:04,088 --> 00:11:07,780
And the okay means don't raise an exception, it's fine.

174
00:11:08,550 --> 00:11:12,510
Now the tool to use for all of that is maturing.

175
00:11:12,670 --> 00:11:16,534
So maturing develop is the equivalent of

176
00:11:16,732 --> 00:11:20,230
PP install minus editable. It installs it inside the current

177
00:11:20,300 --> 00:11:24,006
virtual environment, and you'll still have

178
00:11:24,028 --> 00:11:27,126
to rerun it because it's fast and not Python, but it

179
00:11:27,148 --> 00:11:29,980
kind of more or less automatically keeps it up to date.

180
00:11:31,470 --> 00:11:35,434
And when you finally want to upload a wheel to

181
00:11:35,472 --> 00:11:39,238
pipe PI, you use material and build it will give you a great wheel.

182
00:11:39,414 --> 00:11:42,638
And by a great wheel I mean it will be cpu specific.

183
00:11:42,724 --> 00:11:44,990
So if you want to support more than one cpu,

184
00:11:47,490 --> 00:11:51,342
you need to build it on more than one cpu architecture. And obviously

185
00:11:51,476 --> 00:11:55,086
Linux Macs and windows will need different wheels, but it

186
00:11:55,108 --> 00:11:59,090
will provide you a many Linux wheel, right? So that's all taken care of you

187
00:11:59,240 --> 00:12:03,186
just by using maturin without changing hard. And once you

188
00:12:03,208 --> 00:12:07,080
have either the wheel installed or you install it via Maturin for testing it out,

189
00:12:07,770 --> 00:12:10,630
you import it just like any other module,

190
00:12:11,530 --> 00:12:14,966
you create a new counter. In this case I

191
00:12:14,988 --> 00:12:19,050
created a counter that does the new line reset method.

192
00:12:20,190 --> 00:12:24,426
And if I count something that has three c's in it,

193
00:12:24,608 --> 00:12:28,074
then it will return. True. And if

194
00:12:28,112 --> 00:12:31,898
I count something that has three c's in it,

195
00:12:31,984 --> 00:12:35,886
but there's a new line between the first two, then obviously it

196
00:12:35,908 --> 00:12:39,438
resets on the, after it sees the

197
00:12:39,444 --> 00:12:42,698
second c, it resets on the new line, and so it never gets a three.

198
00:12:42,804 --> 00:12:46,930
And so it gives me false. Right. So now we have fast

199
00:12:47,000 --> 00:12:50,370
code to implement the desired algorithm.

200
00:12:51,510 --> 00:12:54,580
So what do I want you to take away from this?

201
00:12:55,770 --> 00:12:59,720
Using rust in Python is surprisingly easy.

202
00:13:01,370 --> 00:13:04,694
If you already have the Rust code, you decorate it.

203
00:13:04,732 --> 00:13:08,026
If it's someone else's rust code, then you have to thinly wrap it

204
00:13:08,048 --> 00:13:10,620
in your own layer of rust and then decorate that.

205
00:13:11,950 --> 00:13:15,226
Obviously these two languages are very different from each other.

206
00:13:15,328 --> 00:13:18,650
Rust is very high performance.

207
00:13:19,870 --> 00:13:23,134
I didn't put any measurements here because that was beyond the scope of

208
00:13:23,172 --> 00:13:26,654
what I have time to talk about. And also, there's many ways

209
00:13:26,692 --> 00:13:29,934
to optimize rust, but even in

210
00:13:29,972 --> 00:13:33,586
this case, implementing more or less equivalent code in Python would

211
00:13:33,608 --> 00:13:37,426
be much, much slower. It's safe, right?

212
00:13:37,608 --> 00:13:41,422
I looped over characters. I potentially

213
00:13:41,486 --> 00:13:45,314
could have done pretty complicated things. There was no way that this

214
00:13:45,352 --> 00:13:48,406
code could have an out of bound error or a

215
00:13:48,428 --> 00:13:51,494
memory issue or something like that, because I

216
00:13:51,532 --> 00:13:55,414
wrote it on top of high level abstractions that are safe even

217
00:13:55,452 --> 00:13:58,326
though they don't have any runtime cost,

218
00:13:58,508 --> 00:14:00,860
but just have a learning curve, right?

219
00:14:02,110 --> 00:14:05,894
You saw, I have to understand stuff like mutable

220
00:14:05,942 --> 00:14:09,766
references, and if you do slightly more complicated

221
00:14:09,798 --> 00:14:13,386
things, you start to have to understand bow checkers and lifetimes

222
00:14:13,418 --> 00:14:17,070
and a lot of fun things like that. It's not trivial,

223
00:14:17,730 --> 00:14:21,790
and that makes it kind of awkward for prototyping. If I want to quickly change

224
00:14:21,940 --> 00:14:25,620
how to function interface, I also have to change the type information.

225
00:14:26,950 --> 00:14:30,740
Python is almost the opposite. It's very easy to get started.

226
00:14:31,190 --> 00:14:34,498
Supports really tight iteration loops, but there is a

227
00:14:34,504 --> 00:14:38,046
speed cap. You can optimize Python, but at some point you write

228
00:14:38,088 --> 00:14:41,506
into pretty hard limits. But if you combine

229
00:14:41,538 --> 00:14:45,014
them, you get the best of all worlds. You can prototyping in Python and then

230
00:14:45,052 --> 00:14:48,834
move the performance button next to rust and the stronger

231
00:14:48,882 --> 00:14:52,354
together you can do development

232
00:14:52,482 --> 00:14:55,602
and then you send it off to be deployed

233
00:14:55,746 --> 00:14:59,366
and you reap the benefits. So I hope that

234
00:14:59,388 --> 00:15:02,650
will help you your own projects. Thank you so much for listening,

235
00:15:02,730 --> 00:15:04,714
and I hope you enjoy the rest of the conference.

