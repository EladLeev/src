1
00:00:00,250 --> 00:00:04,830
Are you an SRE, a developer,

2
00:00:06,610 --> 00:00:10,014
a quality engineer who wants to tackle the challenge of

3
00:00:10,052 --> 00:00:14,026
improving reliability in your DevOps? You can enable your DevOps

4
00:00:14,058 --> 00:00:17,854
for reliability with chaos native. Create your free

5
00:00:17,892 --> 00:01:17,110
account at Chaos native Litmus cloud hello

6
00:01:17,180 --> 00:01:20,774
everyone. My name is Filipi Files and today we're going to talk about how you

7
00:01:20,812 --> 00:01:24,882
can keep your code safe during the development

8
00:01:24,946 --> 00:01:28,730
path. Right? So my name is Filipi Files and I've been working at

9
00:01:28,800 --> 00:01:32,154
principal security engineer at Talkdesk. By the way,

10
00:01:32,192 --> 00:01:35,994
Talkdesk is a company from Portugal responsible to

11
00:01:36,032 --> 00:01:39,354
provide some contact center as a service, as a product,

12
00:01:39,472 --> 00:01:43,014
actually. And I'm security research at Can Segura.

13
00:01:43,062 --> 00:01:46,542
Right. So, Sen Segura is a brazilian company, but they have many

14
00:01:46,596 --> 00:01:50,586
customers around the world. They appear in many different reports.

15
00:01:50,618 --> 00:01:53,966
Like a gardener, like a Forrester, like a coupinger tools.

16
00:01:54,148 --> 00:01:58,002
It provides some solutions of the pen, privileged access

17
00:01:58,056 --> 00:02:02,958
management. And I'm secured advocate and secured instructor

18
00:02:03,054 --> 00:02:06,562
about many topics related to security. Right?

19
00:02:06,696 --> 00:02:10,230
Andor. I'm research, not research. I'm advocate of this awesome project.

20
00:02:10,300 --> 00:02:14,214
Hack is not a prime, by the way, this project, it's pretty awesome

21
00:02:14,332 --> 00:02:17,874
because the idea here is to explain more about the concept, about the hacking,

22
00:02:17,922 --> 00:02:21,158
right? Because hacking is really not a prime. It's a mindset,

23
00:02:21,254 --> 00:02:24,614
it's a lifecycle. So how you can look into some software,

24
00:02:24,662 --> 00:02:27,898
for example, and how you use your creative mind.

25
00:02:27,984 --> 00:02:31,434
Okay? And I'm a contributor of the red team Village. It's a pretty

26
00:02:31,472 --> 00:02:33,280
nice community in the US.

27
00:02:34,530 --> 00:02:38,250
I'm a speaker there and I'm talking in many different events.

28
00:02:38,330 --> 00:02:41,578
Andor. I'm a part of the staff team of the Defcon groups here in Sao

29
00:02:41,594 --> 00:02:44,818
Paul. It's a community here. And I'm a creator instructor of

30
00:02:44,824 --> 00:02:48,702
the Maor analysis course of Maura attack types with Q can.

31
00:02:48,766 --> 00:02:53,006
It's a kind of technique using in an offensive exploitations

32
00:02:53,118 --> 00:02:56,486
using the concept calling Maor. This is my web page,

33
00:02:56,588 --> 00:03:00,210
if you'd like to see more information about me. Other talks

34
00:03:00,290 --> 00:03:04,066
that I'm doing or I'm not doing, but talks

35
00:03:04,098 --> 00:03:07,678
that I'm making in different events, different talkdesk

36
00:03:07,714 --> 00:03:11,846
that you can see here. Andor. Here I have here some articles published

37
00:03:11,958 --> 00:03:15,914
about different stocks related to cybersecurity, right? And here

38
00:03:15,952 --> 00:03:19,482
you can find Philippe X 86.

39
00:03:19,616 --> 00:03:23,902
Actually, this is my main GitHub. Here you can see more information

40
00:03:24,036 --> 00:03:28,110
about my project, about some things, about me.

41
00:03:28,180 --> 00:03:31,520
Okay, so let's talk about our main topic today.

42
00:03:32,210 --> 00:03:35,566
About how you can improve your code, actually. So as you can

43
00:03:35,588 --> 00:03:39,038
see here, I don't know if it's small but here I have in my GitHub

44
00:03:39,134 --> 00:03:42,722
or sac demo, this is my project that I will be using

45
00:03:42,776 --> 00:03:46,840
here during this demo. During these presentations. I have here different

46
00:03:47,450 --> 00:03:50,786
codes vulnerable, right? So you can copy

47
00:03:50,818 --> 00:03:54,374
that after this conference or this meeting and you can using this

48
00:03:54,412 --> 00:03:57,286
in your presentations or your tasks in your demo. Okay,

49
00:03:57,388 --> 00:04:01,302
so first of all I would like to explain more differences about the

50
00:04:01,436 --> 00:04:04,682
same concept because I would like to put all those people in the same page.

51
00:04:04,736 --> 00:04:08,598
Okay, so there's a simple definition about what is exactly sast dust

52
00:04:08,694 --> 00:04:12,714
and leaks difference. Okay, so SAST is a statistic application security

53
00:04:12,832 --> 00:04:16,638
testing. It's important step when you create

54
00:04:16,724 --> 00:04:20,078
some software, when you develop

55
00:04:20,164 --> 00:04:23,522
something. Remember when I'm talking about

56
00:04:23,576 --> 00:04:28,050
the software development lifecycle, but I will put another

57
00:04:28,120 --> 00:04:32,126
SSS DLC. So secured software development lifecycle.

58
00:04:32,238 --> 00:04:35,654
So you can use in this strategy or

59
00:04:35,692 --> 00:04:39,394
this method during your development process or development

60
00:04:39,442 --> 00:04:42,790
path. Okay, so set analyzes the search code

61
00:04:42,860 --> 00:04:47,426
of the system or that you using before you're

62
00:04:47,458 --> 00:04:51,162
putting this code in the productions, okay. Tasks are usually performing before

63
00:04:51,216 --> 00:04:55,210
the system, as I mentioned is in productions and only

64
00:04:55,280 --> 00:04:59,418
in the search code. The idea here is to scanning your search code to

65
00:04:59,504 --> 00:05:02,906
see if you find some vulnerabilities in

66
00:05:02,928 --> 00:05:06,546
this code. The point important here is Orosack

67
00:05:06,598 --> 00:05:09,822
is can open source project that you can see. I will put here

68
00:05:09,876 --> 00:05:12,542
Orusaki in the Internet, for example,

69
00:05:12,676 --> 00:05:16,158
you can check here and I will explain more about what is exactly

70
00:05:16,244 --> 00:05:19,522
Orusaki during this presentation. Okay. Another point

71
00:05:19,576 --> 00:05:22,834
is das is a dynamic application security test

72
00:05:22,952 --> 00:05:26,894
is another approach. The dask

73
00:05:26,942 --> 00:05:30,386
tests expose interfaces for a vulnerability. In this case it's

74
00:05:30,418 --> 00:05:34,054
different when you compare to test. Okay. In this case, dask is great for

75
00:05:34,092 --> 00:05:37,074
finding externally visible vulnerabilities.

76
00:05:37,122 --> 00:05:40,762
So after the publications, okay, it tools recommended to find

77
00:05:40,816 --> 00:05:44,790
vulnerability externally visible. I mean you need to publish this URL

78
00:05:44,870 --> 00:05:48,698
to be tested is enough to perform, to test or a binary to

79
00:05:48,704 --> 00:05:52,126
be executed. So this is can important thing. So you

80
00:05:52,148 --> 00:05:56,138
have another different techniques

81
00:05:56,154 --> 00:05:59,840
that you can use in this analysis like SCA or

82
00:06:00,690 --> 00:06:04,402
container scanning. So part of the process using in this

83
00:06:04,456 --> 00:06:08,050
development path, okay, so leaks is another interactive application

84
00:06:08,120 --> 00:06:11,726
security test. You combine these two different strategy,

85
00:06:11,758 --> 00:06:15,790
okay, just to be clear, when we talk about the vulnerabilities

86
00:06:15,870 --> 00:06:19,158
in safe code, it's pretty important to understand some difference. So you

87
00:06:19,164 --> 00:06:23,074
have some levels about the security, right. When you find some vulnerabilities,

88
00:06:23,122 --> 00:06:26,242
probably, you know, but if you don't know, it's pretty important to clarify

89
00:06:26,306 --> 00:06:29,846
this. Okay, so first it's critical, it's too high.

90
00:06:30,028 --> 00:06:33,466
And the second is high, median low. It means this

91
00:06:33,488 --> 00:06:36,826
is the definitions about the vulnerability and here in

92
00:06:36,848 --> 00:06:40,380
this case. But this explanation is related to these

93
00:06:40,930 --> 00:06:45,806
tools in this case or sac is the info, I mean when

94
00:06:45,828 --> 00:06:48,238
you receive some info about the log.

95
00:06:48,404 --> 00:06:52,046
No, probably we don't have any information about this.

96
00:06:52,228 --> 00:06:55,694
Maybe something is suspicious but

97
00:06:55,812 --> 00:06:59,666
it's not clear if it's malicious or not or it's vulnerable or not in

98
00:06:59,688 --> 00:07:03,362
this case. Okay, so it is how you can

99
00:07:03,416 --> 00:07:07,214
using these explanations related to these tools

100
00:07:07,262 --> 00:07:11,398
in this case or Recyc, right? Okay so this is just to clarify something

101
00:07:11,484 --> 00:07:15,286
related to this main topic about the security

102
00:07:15,468 --> 00:07:18,594
Andor software development lifecycle. Okay, so let's

103
00:07:18,642 --> 00:07:22,582
talk about what is exactly these open source tools or Sec.

104
00:07:22,636 --> 00:07:25,906
Okay, open source autosec today is maintaining

105
00:07:25,938 --> 00:07:29,018
for innovation supernovation is a brazilian company by the

106
00:07:29,024 --> 00:07:32,494
way, it's my previous job and this tool is

107
00:07:32,532 --> 00:07:35,774
responsible to identify vulnerabilities. Simple and fast.

108
00:07:35,972 --> 00:07:39,454
Here is the explanation or SeC is an open source tool again

109
00:07:39,572 --> 00:07:42,634
that performs statistical code analysis as I mentioned,

110
00:07:42,692 --> 00:07:46,130
to identify security flows during the development process.

111
00:07:46,200 --> 00:07:50,034
So here it's good

112
00:07:50,072 --> 00:07:53,614
point here. Currently the language and tools for analyzing

113
00:07:53,662 --> 00:07:57,126
are C sharp, Java, Kotlin, Python, Ruby, Golang and take a

114
00:07:57,148 --> 00:08:01,398
look this the terraform and kubernetes and another

115
00:08:01,484 --> 00:08:04,934
like a JSon Alexa shell and so on

116
00:08:04,972 --> 00:08:08,394
and so on. Okay and another point here, pretty nice in these

117
00:08:08,432 --> 00:08:12,378
tools is has option to search for key

118
00:08:12,544 --> 00:08:15,834
leaks and security flows in all files of

119
00:08:15,872 --> 00:08:19,690
your project as well as in a GitHub history.

120
00:08:19,840 --> 00:08:23,054
So you can using the Orsec tool in the

121
00:08:23,092 --> 00:08:26,874
developer through the CLI and by using the devsecops

122
00:08:26,922 --> 00:08:30,574
team on CI CS. I will explain more during this

123
00:08:30,612 --> 00:08:33,806
conversation. Okay, just to clarify what is exactly this tool.

124
00:08:33,908 --> 00:08:37,614
So here we have a web manager to manage the vulnerabilities

125
00:08:37,742 --> 00:08:41,074
and you can using this in your pipeline as

126
00:08:41,112 --> 00:08:44,498
well. It's pretty nice because you can improve your pipeline. Okay,

127
00:08:44,584 --> 00:08:48,310
so here's some explanations on how the or Sec works.

128
00:08:48,380 --> 00:08:52,150
You can read after this presentation the documentations. Okay so let's

129
00:08:52,570 --> 00:08:55,734
return here in the documentations. So if I click here

130
00:08:55,772 --> 00:08:59,334
in our sec, take a look this, I will fall into the main page here

131
00:08:59,452 --> 00:09:03,174
as you can see, just to explain you. Okay let me close

132
00:09:03,212 --> 00:09:06,774
this another tabs. Another point is you

133
00:09:06,812 --> 00:09:10,766
can click here. For example, let me clear just the

134
00:09:10,948 --> 00:09:14,510
main page. Let me put here again

135
00:09:14,580 --> 00:09:18,206
rsack here one more time. Rsack Andor

136
00:09:18,228 --> 00:09:21,598
I will explain the main page here. Rsack IO you

137
00:09:21,604 --> 00:09:25,158
can click here on a GitHub to see the main page in a GitHub.

138
00:09:25,274 --> 00:09:28,962
As you can see here you can check all those informations here about

139
00:09:29,016 --> 00:09:33,022
what it is exactly, the documentation and how you can contribute

140
00:09:33,086 --> 00:09:36,760
more in this case from this awesome product. By the way,

141
00:09:37,130 --> 00:09:40,658
another point in this documentation is you have here the docs

142
00:09:40,674 --> 00:09:45,010
Andor the community, you have here the forum, you can interact

143
00:09:45,090 --> 00:09:49,442
with another people from the community. Here you have the english

144
00:09:49,506 --> 00:09:54,534
page of orsack, you can open here many cases

145
00:09:54,582 --> 00:09:58,426
or if you have some ebore using our sec in a GitHub actions or

146
00:09:58,448 --> 00:10:02,400
using your pipeline. So here you can see you can using this

147
00:10:03,730 --> 00:10:07,678
to exchange knowledge with the community. Okay, so pretty nice

148
00:10:07,764 --> 00:10:11,040
that you have this opportunity. Okay, so let's return here in

149
00:10:11,810 --> 00:10:15,426
the documentation. It's here, okay, and I will

150
00:10:15,448 --> 00:10:19,214
click here in a CLI and I'm using here the installation processor.

151
00:10:19,262 --> 00:10:22,402
So pretty simple, I will install here in my

152
00:10:22,536 --> 00:10:26,226
Linux machine, I will be using curl here, as you can see I have

153
00:10:26,248 --> 00:10:30,242
here by the way the main directory that I have the same ports vulnerable

154
00:10:30,306 --> 00:10:33,718
as you can see here in my virtual machine. So first of

155
00:10:33,724 --> 00:10:37,654
all you pass here and as you can see I will using the

156
00:10:37,692 --> 00:10:41,878
crow to request this binary to install in my virtual machine.

157
00:10:41,974 --> 00:10:45,802
And after to install, as you can see I'm downloading and I will move

158
00:10:45,856 --> 00:10:49,114
this binary to the local bin as you can see here because

159
00:10:49,152 --> 00:10:52,446
I can execute this binary in whatever place I have inside of

160
00:10:52,468 --> 00:10:56,254
my virtual machine. So now I have here the orsack in

161
00:10:56,292 --> 00:11:00,094
my virtual machine, okay, so I will set

162
00:11:00,212 --> 00:11:03,758
h to see about what kind of comment I can use here.

163
00:11:03,844 --> 00:11:07,122
So as you can see here, I can use into two different ways,

164
00:11:07,176 --> 00:11:11,138
like a flags and like a comments, comments. I mean it's available

165
00:11:11,224 --> 00:11:14,974
comments that you can use in the start to start or reset CLI

166
00:11:15,102 --> 00:11:21,618
version to see the version, but basically and generate but

167
00:11:21,704 --> 00:11:25,286
I mean the main comment that you will use in the start because I will

168
00:11:25,308 --> 00:11:29,478
be using the CLi executing aerosack. So aerosack start

169
00:11:29,564 --> 00:11:33,034
and after that h to see about what

170
00:11:33,072 --> 00:11:37,158
kind of flag I can use here. And if you see I have many flags

171
00:11:37,174 --> 00:11:40,330
to use here. So here a simple

172
00:11:40,400 --> 00:11:44,526
explanation is start the orsac analyzing in your current

173
00:11:44,708 --> 00:11:47,360
path. I mean when you executing this,

174
00:11:48,050 --> 00:11:52,026
just by default you execute this in rsack

175
00:11:52,138 --> 00:11:55,338
demo because this is the current path. Okay, so I can

176
00:11:55,364 --> 00:11:58,946
set, by the way, if you would like to analyze another different directory, for example

177
00:11:59,048 --> 00:12:02,178
another folder I can set for example p,

178
00:12:02,264 --> 00:12:05,830
like this, let me show you here p.

179
00:12:05,900 --> 00:12:09,334
Here p I mean the project path, okay,

180
00:12:09,452 --> 00:12:13,378
so for example, in this case I am in this path,

181
00:12:13,474 --> 00:12:15,880
but if I set here p,

182
00:12:16,570 --> 00:12:20,330
I will write another different folder to analyzing this. It's pretty

183
00:12:20,400 --> 00:12:24,298
simple and very intuitive how it can use the CLI and you

184
00:12:24,304 --> 00:12:27,530
can set for example a. I mean it's authorization.

185
00:12:28,030 --> 00:12:31,214
In this case the authorization token is responsible to send all those

186
00:12:31,252 --> 00:12:34,654
information about the vulnerabilities to a web manager or a SEC

187
00:12:34,692 --> 00:12:37,646
web manager that you can manage it.

188
00:12:37,748 --> 00:12:40,974
All those vulnerabilities that you find in your

189
00:12:41,012 --> 00:12:44,830
code in this platform. If you have a time I will explain during this presentations.

190
00:12:44,910 --> 00:12:49,186
Okay, so another point is if you use another polycode like

191
00:12:49,368 --> 00:12:52,974
a sonar cube for example, and you have gear

192
00:12:53,102 --> 00:12:56,454
o to set the output format. And as you can see

193
00:12:56,492 --> 00:13:00,166
here, I can send the output format to integrate with

194
00:13:00,188 --> 00:13:04,790
the sonarcube. Because in Sonarcube you have the qualicold software

195
00:13:06,410 --> 00:13:09,706
or tools for example. And of course in Sonarcube you have

196
00:13:09,728 --> 00:13:12,906
some version with a security stuff.

197
00:13:13,008 --> 00:13:16,406
In this different version, I think it's an enterprise version,

198
00:13:16,438 --> 00:13:19,706
I don't know exactly. But Aurotech, it was developed by

199
00:13:19,728 --> 00:13:23,230
the security team from supernovation. It's a guy different, right.

200
00:13:23,300 --> 00:13:26,794
So when the team created the engine responsible to analyzing

201
00:13:26,842 --> 00:13:30,494
this, it's a security team. So the

202
00:13:30,532 --> 00:13:34,526
essential of this tools is from the security team. So this

203
00:13:34,548 --> 00:13:38,674
is some difference. But you can recommendation to both of them

204
00:13:38,712 --> 00:13:42,002
because Sonarcube is more focused in a quality code

205
00:13:42,136 --> 00:13:44,722
and Sec is using a security code.

206
00:13:44,776 --> 00:13:48,726
Okay, so let's execute to see how this works in

207
00:13:48,748 --> 00:13:51,926
my environment, for example. So let me set here, let's check here

208
00:13:51,948 --> 00:13:55,986
I have an agolake, let's see for example I will executing

209
00:13:56,018 --> 00:13:59,798
this auto sec start

210
00:13:59,884 --> 00:14:03,866
and I will set p. Okay. And I can put here for

211
00:14:03,888 --> 00:14:07,306
example different path. I will executing this in the main path here I

212
00:14:07,328 --> 00:14:10,780
will click enter for example and I will set this.

213
00:14:11,230 --> 00:14:14,990
This is by default the folder that I am having here.

214
00:14:15,060 --> 00:14:18,638
And I click enter and after that I will execute this

215
00:14:18,724 --> 00:14:22,880
in my environment. So as you can see here,

216
00:14:23,830 --> 00:14:27,486
I will start execution and I will see how the auto

217
00:14:27,518 --> 00:14:31,250
sect works. Another point during the scanning is so how

218
00:14:31,320 --> 00:14:34,786
exactly where you can using the

219
00:14:34,808 --> 00:14:38,290
auto sac. So here I will go to the autosack,

220
00:14:38,950 --> 00:14:42,478
sorry, going to overview. Anyhow you can see here the auto

221
00:14:42,494 --> 00:14:46,102
sac analysis type. First is the set as I mentioned.

222
00:14:46,236 --> 00:14:49,846
So there's a statistical vulnerability analysis. And the second is

223
00:14:49,868 --> 00:14:53,434
they can be done in the search code or a byte code or

224
00:14:53,472 --> 00:14:57,322
binary. So this is the main topic here, the main function using

225
00:14:57,376 --> 00:15:01,418
the Orsat, but they have more two different analysis that

226
00:15:01,424 --> 00:15:04,974
I like. By the way it's about the leaks, I mean

227
00:15:05,172 --> 00:15:08,526
the leaks checks to the search code for possible

228
00:15:08,628 --> 00:15:12,142
leaks, printations or private keys or hard

229
00:15:12,196 --> 00:15:16,240
coded password, for example, if you have some hard coded in your code,

230
00:15:16,610 --> 00:15:19,970
they appears to you that this is vulnerable.

231
00:15:20,870 --> 00:15:24,020
Sometimes you put in your code in a clear text,

232
00:15:25,050 --> 00:15:29,202
terrible vulnerability by the way. It's a misconfiguration, actually not vulnerability

233
00:15:29,346 --> 00:15:34,822
in the code, it's a misconfiguration because you

234
00:15:34,876 --> 00:15:38,770
take there. So dependence

235
00:15:38,850 --> 00:15:42,506
audit you analyzing the project. Dependence is to check the vulnerabilities for

236
00:15:42,528 --> 00:15:46,310
a 30 part libraries. Because sometimes you need to import semi

237
00:15:46,390 --> 00:15:49,866
libraries in your code to execute something and sometimes this

238
00:15:49,888 --> 00:15:53,806
library is vulnerable. So because of this, it's pretty nice you see about

239
00:15:53,908 --> 00:15:57,754
this library. It's a kind of dependence

240
00:15:57,802 --> 00:16:01,086
check, but it's pretty nice to see about this type. So for

241
00:16:01,108 --> 00:16:04,322
me it's three different ways that you can,

242
00:16:04,376 --> 00:16:07,646
different types that you can analyze. Okay, so I performed

243
00:16:07,678 --> 00:16:11,406
this in my environment. I executing

244
00:16:11,438 --> 00:16:13,010
this during this presentation.

245
00:16:15,030 --> 00:16:19,058
As you can see the scanning about the RSAC.

246
00:16:19,154 --> 00:16:23,126
Okay, so let me hit down here. So where can you

247
00:16:23,148 --> 00:16:27,298
use the Orsec locally as I'm using here my files tomachine.

248
00:16:27,394 --> 00:16:30,730
You can using this in your CI CD pipeline.

249
00:16:31,070 --> 00:16:34,554
And if you are a developer, you can using this in your

250
00:16:34,592 --> 00:16:38,166
IDE extension in your vs code. For now it's

251
00:16:38,198 --> 00:16:41,646
just available an extension in vs code. So this is how

252
00:16:41,668 --> 00:16:45,390
you can using the autosec in two different ways.

253
00:16:45,540 --> 00:16:48,906
Not two, Andor three, in a locally Andor a CI CD

254
00:16:48,938 --> 00:16:52,254
pipeline. Andor ide like a vs code.

255
00:16:52,372 --> 00:16:55,978
Okay, so let me hit on it here and. Okay, so let's see the

256
00:16:56,084 --> 00:16:59,394
log about the results of this scanning. Okay, let me

257
00:16:59,432 --> 00:17:03,122
turn in the beginning. So here as you can see the type of the

258
00:17:03,176 --> 00:17:06,982
starting of this code and the finish time. So as you can see

259
00:17:07,036 --> 00:17:10,758
and the first, let's see about the lot.

260
00:17:10,844 --> 00:17:14,450
First is the leaks. That's very totally critical.

261
00:17:14,610 --> 00:17:18,450
Andor first is the engine security tools. It's can autosac

262
00:17:18,530 --> 00:17:21,786
engine. Okay, it's pretty nice in

263
00:17:21,808 --> 00:17:25,178
my opinion, because this is development by the security team.

264
00:17:25,344 --> 00:17:28,666
In this case not security team, but development by the autosac team.

265
00:17:28,768 --> 00:17:32,426
So engine responsible to see this vulnerability. This is

266
00:17:32,448 --> 00:17:35,606
the files exactly vulnerable, right. In this case the Python.

267
00:17:35,638 --> 00:17:39,486
TTC. Python and as you can see the code. Take a look. This is

268
00:17:39,508 --> 00:17:43,326
not a password. In this case you have here the hard

269
00:17:43,428 --> 00:17:46,622
coded password, as I mentioned. So where

270
00:17:46,676 --> 00:17:50,370
is the exactly explanation about this vulnerability? In this case you can find

271
00:17:50,440 --> 00:17:54,146
here the main information, not many information, the explanation about this

272
00:17:54,168 --> 00:17:57,414
vulnerability. And you can see here the link of

273
00:17:57,452 --> 00:18:01,574
the CWE. So Philippe, I don't know exactly

274
00:18:01,692 --> 00:18:05,286
what is CWE. So you can open the link and

275
00:18:05,308 --> 00:18:09,142
you can see here in the Internet, what is exactly this information

276
00:18:09,276 --> 00:18:12,762
if you don't security guy, for example.

277
00:18:12,816 --> 00:18:17,014
So basically, CWE is a common weakness enumerations,

278
00:18:17,062 --> 00:18:20,640
right? So it's from my tree. And here is the

279
00:18:21,330 --> 00:18:24,446
total explanations about this vulnerability. In this case,

280
00:18:24,468 --> 00:18:27,966
the software contains 100 folded credentials such as a

281
00:18:27,988 --> 00:18:31,486
password or a cryptography key. And here is the

282
00:18:31,508 --> 00:18:34,786
extended description. And by

283
00:18:34,808 --> 00:18:38,162
the way, here you can see here the relationship of this

284
00:18:38,216 --> 00:18:42,130
main vulnerability. And the point is here, it's pretty nice

285
00:18:42,200 --> 00:18:43,620
if you don't have a guy,

286
00:18:45,430 --> 00:18:48,786
actually, if you don't have a guy, or if you know a guy of the

287
00:18:48,808 --> 00:18:52,600
security here you have a good content

288
00:18:53,050 --> 00:18:56,294
to read and to learn more about the security. Right?

289
00:18:56,332 --> 00:19:01,094
So we have here the other variants of these vulnerabilities

290
00:19:01,222 --> 00:19:05,114
or different vulnerabilities is connected with

291
00:19:05,152 --> 00:19:08,570
this main vulnerability. And you can see here the many

292
00:19:08,640 --> 00:19:12,282
explanation, the many informations about

293
00:19:12,416 --> 00:19:16,254
this vulnerability. Here's some examples and how

294
00:19:16,372 --> 00:19:20,346
you can find your code. So it's a guide

295
00:19:20,538 --> 00:19:24,942
about the security and you can use in your code. So here's some vulnerabilities.

296
00:19:25,006 --> 00:19:28,420
This is the idea of this vulnerabilities about

297
00:19:31,030 --> 00:19:35,102
other vulnerabilities in different protocol, for example. So here

298
00:19:35,176 --> 00:19:38,754
potentials mitigate, so how you can improve these vulnerabilities.

299
00:19:38,882 --> 00:19:42,534
And here you can see many information about

300
00:19:42,652 --> 00:19:46,274
these vulnerabilities using a safe code credentials.

301
00:19:46,322 --> 00:19:50,294
Okay, so we have a here guide to suggest you andor to improve your

302
00:19:50,332 --> 00:19:53,946
knowledge if you're a developer guy. And take a look this in the

303
00:19:53,968 --> 00:19:57,370
second log we have here Java. And take a look

304
00:19:57,520 --> 00:20:01,342
in this case the two line and the column seven. And here is

305
00:20:01,396 --> 00:20:05,162
the correct files that we can find. The vulnerability

306
00:20:05,226 --> 00:20:07,230
in this case is the app Java.

307
00:20:08,930 --> 00:20:12,522
As you can see here, you have another different Cwe,

308
00:20:12,586 --> 00:20:16,306
it's a three 30. It's a different when you compare to

309
00:20:16,328 --> 00:20:19,826
the first, we have two different vulnerabilities and

310
00:20:19,848 --> 00:20:23,234
two different searches, because the difference is the

311
00:20:23,272 --> 00:20:27,090
vulnerability is different. Okay, so let's go more another

312
00:20:27,240 --> 00:20:30,934
difference. So here, take a look. This python in this case, so take a look

313
00:20:31,052 --> 00:20:34,770
is the security tools is different. It's not from Orsec,

314
00:20:34,850 --> 00:20:37,270
in this case it is for Bandit.

315
00:20:37,930 --> 00:20:41,494
So as you can see here, it's another engine. In this case it's open source

316
00:20:41,542 --> 00:20:44,986
engine. So another different tools that

317
00:20:45,008 --> 00:20:48,502
you can using together the RSC. From my perspective,

318
00:20:48,566 --> 00:20:52,522
it's pretty nice because you can combine all those engines.

319
00:20:52,586 --> 00:20:55,358
And if you see here below, take a look at this. You have an ago

320
00:20:55,444 --> 00:20:59,470
sach engine, it's another, you have more than one

321
00:20:59,620 --> 00:21:02,960
engine inside the same platform

322
00:21:03,730 --> 00:21:07,334
here you can have more than engines

323
00:21:07,482 --> 00:21:11,698
scanning your code. So here you can find others,

324
00:21:11,784 --> 00:21:15,640
pretty nice information. Okay, in the end of this

325
00:21:16,250 --> 00:21:20,150
analyzing, as you can see here, in this analysis, the total of this

326
00:21:20,220 --> 00:21:24,438
ten possible vulnerabilities were found

327
00:21:24,604 --> 00:21:28,338
and we classified it then into one critical,

328
00:21:28,514 --> 00:21:31,638
right? So one totally critical, two highs,

329
00:21:31,814 --> 00:21:35,386
three medium andor four low.

330
00:21:35,568 --> 00:21:39,718
As you can see here, you have ten vulnerabilities in this,

331
00:21:39,904 --> 00:21:43,482
remember in this fold here, in this case, this folder.

332
00:21:43,546 --> 00:21:46,800
Okay, so if you see I have here

333
00:21:47,650 --> 00:21:50,686
more than one project.

334
00:21:50,868 --> 00:21:54,366
Let's see, I have here three different project in

335
00:21:54,388 --> 00:21:58,062
different, okay, so Andor how Philippe can use in this

336
00:21:58,196 --> 00:22:00,960
nvs code for example. So as I mentioned here,

337
00:22:03,650 --> 00:22:09,430
let me open my, I guess put here sandbox.

338
00:22:20,880 --> 00:22:30,904
Let's see here section

339
00:22:30,952 --> 00:22:34,324
one. Okay, we'll take a look at this. I have here

340
00:22:34,362 --> 00:22:37,572
the same project, okay,

341
00:22:37,706 --> 00:22:41,604
I have here my Golang code, I have

342
00:22:41,642 --> 00:22:45,108
here Java here node js folding the

343
00:22:45,114 --> 00:22:48,552
same code vulnerable. Okay, as you can see here in my vs code

344
00:22:48,606 --> 00:22:51,880
and I have here the extension. Basically we click here

345
00:22:51,950 --> 00:22:54,120
and I write your autosec.

346
00:22:55,580 --> 00:22:58,552
Pretty simple. If you're using vs code, for example,

347
00:22:58,686 --> 00:23:01,964
as you can see just clicking here install and after

348
00:23:02,002 --> 00:23:05,048
that you have the extension here in your environment.

349
00:23:05,144 --> 00:23:08,284
It's pretty simple to use basically. Let's see here,

350
00:23:08,322 --> 00:23:12,920
I just click in here in a start analyzing.

351
00:23:13,000 --> 00:23:16,172
And after that take a look this, hold on

352
00:23:16,226 --> 00:23:19,712
for a sec. Started to analyzing in your code. And as you can see here,

353
00:23:19,766 --> 00:23:24,388
they will executing this analysis in my search code.

354
00:23:24,554 --> 00:23:28,404
The same execution that I execute this in my

355
00:23:28,522 --> 00:23:32,052
environment. So let me explain more about another thing

356
00:23:32,106 --> 00:23:35,450
during this study with happening.

357
00:23:35,820 --> 00:23:39,816
Let me explain here about auto sec. Let's check here the

358
00:23:39,838 --> 00:23:43,272
overview, let me not here and about the

359
00:23:43,326 --> 00:23:46,856
installation CLI installations one more time. And as

360
00:23:46,878 --> 00:23:50,244
I mentioned, I executing this locally. As I explained here,

361
00:23:50,382 --> 00:23:54,024
you can use here in the Windows platform. If it works with Windows.

362
00:23:54,072 --> 00:23:57,772
For example, you have here different versions about the Unix platform in

363
00:23:57,826 --> 00:24:01,340
Windows. And you can use in here Andor a Mac.

364
00:24:01,920 --> 00:24:07,468
This is the process hash actually here's

365
00:24:07,484 --> 00:24:12,096
the version on how you can use in such they

366
00:24:12,118 --> 00:24:15,548
give the privilege actually. And here is the installations

367
00:24:15,724 --> 00:24:19,316
by image Docker. Because you can using this in image Docker here

368
00:24:19,338 --> 00:24:23,316
it's the common that you can use in your environment. And you

369
00:24:23,338 --> 00:24:27,204
can using this the installation by pipeline. It's pretty

370
00:24:27,242 --> 00:24:30,516
nice. I think we have time to explain during this presentation.

371
00:24:30,548 --> 00:24:33,844
So I will use in the GitHub actions to explain you to simulate the pipeline.

372
00:24:33,892 --> 00:24:37,288
Actually you can using this the AWS code build

373
00:24:37,374 --> 00:24:40,828
so you can integrate. But basically here is the step that you can use in

374
00:24:40,834 --> 00:24:44,476
the comments. The example here you can

375
00:24:44,498 --> 00:24:47,724
use in your circle CI for example,

376
00:24:47,842 --> 00:24:51,640
and your Jenkins, in your azure DevOps pipeline

377
00:24:51,720 --> 00:24:55,664
or in your git CI CD. So all those

378
00:24:55,862 --> 00:24:59,456
CI CDs, it was tested by the

379
00:24:59,638 --> 00:25:03,440
Photosec team and this

380
00:25:03,590 --> 00:25:07,440
works pretty nice. Okay, if you'd like to have another different cis

381
00:25:07,520 --> 00:25:10,624
you can test or you can again using openness,

382
00:25:10,672 --> 00:25:15,944
some case or tickets, not tickets, it's not a ticket, but you

383
00:25:15,982 --> 00:25:19,716
can write in the forum and the security team and the Orsec

384
00:25:19,748 --> 00:25:23,032
team can help you right to this project. Let's return

385
00:25:23,086 --> 00:25:27,092
it here in this vs code here it's

386
00:25:27,156 --> 00:25:31,176
running, still running the

387
00:25:31,198 --> 00:25:34,684
orsack here. And by the way, I am doing the streaming, I am

388
00:25:34,722 --> 00:25:37,884
using the virtual machining, I am doing the scanning at the same

389
00:25:37,922 --> 00:25:42,224
time. So because of this, it's not too fast, but usually 30

390
00:25:42,342 --> 00:25:45,936
and 40 seconds to perform this, it's too fast.

391
00:25:46,038 --> 00:25:48,640
But in my case I'm using the virtual machining,

392
00:25:49,380 --> 00:25:53,776
I'm doing the streaming, the recording many

393
00:25:53,878 --> 00:25:57,510
functions in the same machine because it's more

394
00:25:57,880 --> 00:26:01,616
not too fast. Okay, so let's see here the doc

395
00:26:01,648 --> 00:26:05,764
Python, take a look. This, when I click here, this is a totally critical in

396
00:26:05,802 --> 00:26:09,176
the line exactly where you can found the vulnerability. You can

397
00:26:09,198 --> 00:26:12,616
put your mouse here below and take a look at this information,

398
00:26:12,718 --> 00:26:16,344
the same information that you find in the CLI. So take a look at this.

399
00:26:16,382 --> 00:26:19,964
You have here the hash reference about this vulnerability and you have

400
00:26:20,002 --> 00:26:23,212
here the explanations about the leaks. Remember in the first log

401
00:26:23,266 --> 00:26:26,860
that I show you, okay? And one more time here

402
00:26:26,930 --> 00:26:30,856
the CWE, again 790 80,

403
00:26:30,968 --> 00:26:34,592
the same link that you can click here and you can read more

404
00:26:34,646 --> 00:26:38,272
about this information if you don't know about what is exactly the

405
00:26:38,326 --> 00:26:41,744
CWE Andor here it's another, take a look.

406
00:26:41,782 --> 00:26:45,116
This is the orsac engine, the engine responsible to the tactics they'll

407
00:26:45,148 --> 00:26:48,520
define in this vulnerability. And here you can see the bandit.

408
00:26:48,620 --> 00:26:51,940
So let's see another the Java here it's the same,

409
00:26:52,090 --> 00:26:56,192
click here, you can read more about this insecure andor

410
00:26:56,256 --> 00:27:00,650
number generate, and here the explanation why this

411
00:27:03,500 --> 00:27:07,492
Andor number is vulnerable. Not my definition, not definition

412
00:27:07,556 --> 00:27:10,924
from Felipe or from Zupi or from

413
00:27:10,962 --> 00:27:15,064
Autosec, it's definition from my trip. Okay, the organization, the organization responsible

414
00:27:15,112 --> 00:27:18,508
for the vulnerabilities. And here it's another Javascript, take a

415
00:27:18,514 --> 00:27:22,056
look. This is another Javascript using a shell

416
00:27:22,248 --> 00:27:25,704
interpreter when executing OS commands arbitrary.

417
00:27:25,832 --> 00:27:29,712
So here it's another pretty nice explanation about

418
00:27:29,766 --> 00:27:33,216
this flow. And as you can see here, it's just for info,

419
00:27:33,328 --> 00:27:37,924
not info, in this case it's load, right based

420
00:27:37,962 --> 00:27:41,190
on Ongo sac engine. So as you can see here,

421
00:27:41,800 --> 00:27:45,624
the point that you can find, exactly point that

422
00:27:45,662 --> 00:27:49,224
you can find the vulnerability. So for example here you can

423
00:27:49,342 --> 00:27:53,160
set using some other different

424
00:27:53,230 --> 00:27:56,600
solutions and you can set the environment,

425
00:27:56,960 --> 00:28:00,910
the secret environment you don't pass. For example here

426
00:28:02,880 --> 00:28:06,108
in the text, in the clear text, okay so here is the

427
00:28:06,114 --> 00:28:09,576
way that you can use it receiving your vs

428
00:28:09,608 --> 00:28:13,468
code in your ide, okay so in the last one are you using

429
00:28:13,554 --> 00:28:16,764
in this case in the security Andor GitHub

430
00:28:16,812 --> 00:28:20,352
actions. So I have here my GitHub actions, okay here

431
00:28:20,406 --> 00:28:23,792
my action, it's flaws, it's not

432
00:28:23,846 --> 00:28:28,268
any job running for now and I will return

433
00:28:28,374 --> 00:28:31,892
in my main fold here. And if you click

434
00:28:31,946 --> 00:28:35,792
here, so you need to set the workflow right in this repository.

435
00:28:35,856 --> 00:28:38,424
So here if you don't know how this works, you can click here and set

436
00:28:38,462 --> 00:28:41,768
up workflow yourself. Andor here is the information,

437
00:28:41,854 --> 00:28:45,188
so how you can create this folder.

438
00:28:45,284 --> 00:28:48,520
And here is the example that you can use in this case,

439
00:28:48,590 --> 00:28:52,652
right, so let me click in action one more time here. As you can see

440
00:28:52,786 --> 00:28:55,900
none jobs running out and I will create this

441
00:28:55,970 --> 00:29:04,316
folder here and

442
00:29:04,338 --> 00:29:07,504
I will go return here to the documentations Andor

443
00:29:07,542 --> 00:29:13,504
when I will pop this and I will explain more about the here

444
00:29:13,542 --> 00:29:17,008
and take a look. First of all I will create this job, the security pipelines

445
00:29:17,104 --> 00:29:21,092
and take a look the job, okay, I will run

446
00:29:21,226 --> 00:29:25,232
basically this comma, it's the safe code,

447
00:29:25,376 --> 00:29:29,236
install the order sack, okay. And after that I will execute

448
00:29:29,268 --> 00:29:32,936
the ordersack start and I will set the path, basically is the main

449
00:29:32,958 --> 00:29:36,056
path here that I'm running this and I will

450
00:29:36,078 --> 00:29:39,684
set as another flaws e I mean in this case it's

451
00:29:39,732 --> 00:29:44,268
true because in this case if they found whatever

452
00:29:44,354 --> 00:29:48,284
vulnerability in this code, they broke the pipeline. They create

453
00:29:48,322 --> 00:29:51,516
a gate to break the pipeline Andor

454
00:29:51,618 --> 00:29:55,664
because the code is vulnerable and it's impossible to go

455
00:29:55,702 --> 00:29:59,024
to the production because the code is totally vulnerable. And by the way,

456
00:29:59,062 --> 00:30:02,788
in this case with Python we have here the clear text,

457
00:30:02,874 --> 00:30:05,892
remember that? Yes okay, I think you remember.

458
00:30:06,026 --> 00:30:10,800
So I create this, so let's see about the GitHub

459
00:30:10,880 --> 00:30:11,510
states.

460
00:30:14,300 --> 00:30:17,560
I think it's running just a log,

461
00:30:17,710 --> 00:30:20,996
let me go, let me add this folder,

462
00:30:21,028 --> 00:30:24,970
let me commit the

463
00:30:28,960 --> 00:30:32,760
demo enter. So we have here the new folder,

464
00:30:32,840 --> 00:30:35,900
the new file actually. So you push,

465
00:30:39,120 --> 00:30:41,650
I'm working with a master not a main,

466
00:30:43,860 --> 00:30:47,280
so you need to set my password.

467
00:30:47,940 --> 00:30:51,330
In this case I'm executing this new

468
00:30:52,660 --> 00:30:55,808
action. So let's return it here in my GitHub actions, as you

469
00:30:55,814 --> 00:30:59,476
can see, non jobs running. I will click an action one more time and take

470
00:30:59,498 --> 00:31:04,068
a look what happened. So now I have one

471
00:31:04,154 --> 00:31:07,576
workflow here, security pipeline. And if I click here, take a

472
00:31:07,598 --> 00:31:11,464
look at this, I am running now this new job in

473
00:31:11,502 --> 00:31:15,064
my GitHub actions. So I'm trying

474
00:31:15,102 --> 00:31:18,632
to see if my code is vulnerable, not if not vulnerable,

475
00:31:18,776 --> 00:31:22,124
it pass, okay, but it's vulnerable I will break because

476
00:31:22,162 --> 00:31:25,452
I set, remember the flag e.

477
00:31:25,586 --> 00:31:29,180
In this case it's true, the code needs to be minos

478
00:31:29,520 --> 00:31:33,088
one. If they found some vulnerability in this code,

479
00:31:33,254 --> 00:31:36,652
they will broke or create a gate in this pipeline,

480
00:31:36,716 --> 00:31:40,576
okay, so they will executing this, let me go

481
00:31:40,598 --> 00:31:44,448
to the job. So take a look this setting the environment,

482
00:31:44,624 --> 00:31:48,196
and after that they will check out the code,

483
00:31:48,378 --> 00:31:52,580
and now they will running autosack in my environment.

484
00:31:53,240 --> 00:31:56,970
So if they found here any vulnerabilities, as you can see here,

485
00:31:57,500 --> 00:31:58,570
it's tools,

486
00:32:03,580 --> 00:32:07,530
it's the same that I execute things in CLI and

487
00:32:08,620 --> 00:32:11,836
vs code. And as you can see here, let me return here, as you

488
00:32:11,858 --> 00:32:15,272
can see, create a gate or break the pipeline,

489
00:32:15,336 --> 00:32:17,880
okay, and here is the execution,

490
00:32:17,960 --> 00:32:21,356
right. As you can see, executing the curl Andor after that they

491
00:32:21,378 --> 00:32:26,032
set the rsack, sast, p and

492
00:32:26,166 --> 00:32:30,012
e if vulnerable. And let's see the logs.

493
00:32:30,076 --> 00:32:33,132
So take a look this. It's basically 1 minute.

494
00:32:33,196 --> 00:32:36,964
In this case, take a look this the same vulnerability that

495
00:32:37,002 --> 00:32:40,288
we found since the first, right in the CLI,

496
00:32:40,384 --> 00:32:43,284
in yes code, okay,

497
00:32:43,482 --> 00:32:46,708
others about the many information about the logs. And take a look

498
00:32:46,714 --> 00:32:50,508
at this here the password secret in python.

499
00:32:50,544 --> 00:32:53,624
In this case, in a clear desk, one more time you pass it, one,

500
00:32:53,662 --> 00:32:57,000
two, three, and another is, this is not a password.

501
00:32:57,360 --> 00:33:00,812
Okay. And here, as you can see in this case,

502
00:33:00,866 --> 00:33:04,300
more than one possibility. Andor,

503
00:33:04,370 --> 00:33:07,724
take a look this a four process completed with

504
00:33:07,762 --> 00:33:11,056
the execute exit code. One, because I set

505
00:33:11,078 --> 00:33:14,336
the flag, remember Andor, as you can see the

506
00:33:14,438 --> 00:33:18,684
code, it was broken.

507
00:33:18,812 --> 00:33:22,160
In this case I can send many information,

508
00:33:22,310 --> 00:33:26,020
I can send these information to the web manager, but we don't have to explain

509
00:33:26,090 --> 00:33:28,980
more during this presentations. During this presentation,

510
00:33:29,400 --> 00:33:33,296
Andor, after that you can treat all those vulnerability

511
00:33:33,408 --> 00:33:37,060
and you can changing this code,

512
00:33:37,130 --> 00:33:40,676
and after that you can rerun the job. If the code was

513
00:33:40,778 --> 00:33:44,260
pretty nice, so they will pass.

514
00:33:44,410 --> 00:33:48,028
Okay guys, so I finish here, my presentation, I don't

515
00:33:48,034 --> 00:33:51,804
know if you have any questions, so if you have any questions, so please let

516
00:33:51,842 --> 00:33:55,532
me know. I hope this presentation should be useful for you.

517
00:33:55,666 --> 00:33:59,288
And one more time, thank you so much for being here using these presentations

518
00:33:59,384 --> 00:34:01,850
and see you in the next event.

