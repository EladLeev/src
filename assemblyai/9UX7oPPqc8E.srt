1
00:01:28,450 --> 00:01:32,150
Hi everyone, my name is Tal. Thank you for joining serverless security,

2
00:01:32,220 --> 00:01:35,510
top ten here at 42 Cloud native.

3
00:01:35,930 --> 00:01:38,520
Let's start. So before we start,

4
00:01:40,690 --> 00:01:44,206
who am I and why am I here? So my name is Tal, as I

5
00:01:44,228 --> 00:01:48,206
said. Now I'm the head of security

6
00:01:48,308 --> 00:01:51,614
research of cloud Native technologies at

7
00:01:51,652 --> 00:01:56,210
contrast security. I got there through an acquisition of

8
00:01:56,280 --> 00:02:00,082
Cloud Essence, a company I co founded that

9
00:02:00,136 --> 00:02:04,318
created a serverless testing, security testing solution.

10
00:02:04,494 --> 00:02:07,810
Prior to that, I was head of security research at Protigo,

11
00:02:08,150 --> 00:02:12,006
another service protection solution who got acquired by Checkpoint at

12
00:02:12,028 --> 00:02:15,254
2019. So I've been doing serverless for the last couple

13
00:02:15,292 --> 00:02:18,200
of years and I'm here to talk about it.

14
00:02:19,130 --> 00:02:22,458
So I know we've all talked about cloud native in

15
00:02:22,464 --> 00:02:26,346
this conference, so I'm not going to add too much of it.

16
00:02:26,368 --> 00:02:30,206
But you can see that Forrester predicted that 25 of

17
00:02:30,228 --> 00:02:34,254
developers are using serverless regularly already.

18
00:02:34,372 --> 00:02:37,806
So I'm assuming one of four

19
00:02:37,988 --> 00:02:42,046
of you now, if you join the talk, probably more

20
00:02:42,228 --> 00:02:44,660
are using serverless and this is why we are here.

21
00:02:45,190 --> 00:02:48,834
Okay, so this is how a typical, actually not

22
00:02:48,872 --> 00:02:51,700
so big serverless architecture look like.

23
00:02:52,550 --> 00:02:56,406
This is one of the accounts that we monitor at contrast, and you

24
00:02:56,428 --> 00:03:01,254
can see a lot of resources and cloud services

25
00:03:01,372 --> 00:03:05,650
connected to each other in a very complex

26
00:03:05,730 --> 00:03:08,998
way, we can say, but this is not so complex.

27
00:03:09,174 --> 00:03:12,566
However, there are many security challenges

28
00:03:12,678 --> 00:03:16,422
when dealing with such environment which you don't have a big flow,

29
00:03:16,566 --> 00:03:20,114
a server or monolith with one big logic

30
00:03:20,182 --> 00:03:23,534
flow, but instead you have a lot of resources and

31
00:03:23,572 --> 00:03:27,166
services that are disconnected to

32
00:03:27,188 --> 00:03:30,922
each other by nature and then configured

33
00:03:30,986 --> 00:03:34,660
to create some kind of a logic with each other.

34
00:03:36,870 --> 00:03:40,114
What is a serverless environment is can

35
00:03:40,152 --> 00:03:43,614
event driven architecture. Actually, when you have in AWS,

36
00:03:43,662 --> 00:03:47,474
for example, you have lambda functions which basically host

37
00:03:47,522 --> 00:03:50,854
your code and run your code, execute your code

38
00:03:50,972 --> 00:03:54,454
based on cloud or events in your cloud.

39
00:03:54,572 --> 00:03:57,962
Events can be API gateway, so rest

40
00:03:58,016 --> 00:04:02,154
APIs, HTTP request could be table changes,

41
00:04:02,272 --> 00:04:06,534
Iot rules, logs at three buckets

42
00:04:06,582 --> 00:04:09,738
of files or anything that you

43
00:04:09,744 --> 00:04:13,742
can think about. And those functions really run your code to

44
00:04:13,796 --> 00:04:17,054
interact with other services, typically in the

45
00:04:17,092 --> 00:04:20,782
cloud. But because this is your code, this is also

46
00:04:20,836 --> 00:04:24,158
where you have create your mistakes,

47
00:04:24,254 --> 00:04:28,034
especially security mistakes that can cause

48
00:04:28,232 --> 00:04:31,620
some cloud damage. And we'll talk about it.

49
00:04:32,870 --> 00:04:36,962
So we said lambda

50
00:04:37,026 --> 00:04:40,742
lambdas are really the compute, the service that runs your code.

51
00:04:40,876 --> 00:04:44,022
Those are read only environments that

52
00:04:44,076 --> 00:04:47,718
have a slash tamp folder if you want to run

53
00:04:47,804 --> 00:04:51,194
or to write some files. They are

54
00:04:51,232 --> 00:04:54,954
not wired to the Internet in the sense that you cannot ssh to them.

55
00:04:54,992 --> 00:04:58,810
They of course have connection. You can create HTTP requests

56
00:04:59,470 --> 00:05:03,386
or any type of request, inside or outside, but you cannot

57
00:05:03,498 --> 00:05:06,574
connect to the runtime. The data is

58
00:05:06,612 --> 00:05:10,906
temporary. Once the runtime or the code finished

59
00:05:10,938 --> 00:05:14,334
to execute, it evades,

60
00:05:14,382 --> 00:05:17,902
so the data doesn't remain

61
00:05:17,966 --> 00:05:21,774
there. It's ephemeral. The code itself resides in the environment.

62
00:05:21,822 --> 00:05:24,898
So when the code needs to run, basically AWS in

63
00:05:24,904 --> 00:05:28,054
this case, spins up the environment with the code inside and

64
00:05:28,092 --> 00:05:31,926
execute it. Also, the permissions for the function,

65
00:05:32,028 --> 00:05:35,478
which are the keys translated to the keys in the

66
00:05:35,484 --> 00:05:39,138
runtime, are located in the environment as

67
00:05:39,164 --> 00:05:42,394
environment variables, so the function can interact with other services

68
00:05:42,512 --> 00:05:45,834
based on its permissions. All right,

69
00:05:45,872 --> 00:05:50,002
so we said we're going to talk about this security top ten, so whatnot.

70
00:05:50,086 --> 00:05:53,390
If the main project OS serverless top ten

71
00:05:53,460 --> 00:05:57,246
project that right now interprets the

72
00:05:57,268 --> 00:06:00,622
original top ten security top ten, running an open call

73
00:06:00,676 --> 00:06:04,146
for a few years, there is little data,

74
00:06:04,248 --> 00:06:08,334
so we're waiting for more data to come up. To create a serverless

75
00:06:08,382 --> 00:06:11,634
tailor top ten, you're more

76
00:06:11,672 --> 00:06:14,340
than welcome to contribute to it,

77
00:06:15,210 --> 00:06:19,110
right? So let's start with number one event injection.

78
00:06:20,170 --> 00:06:24,066
Like any other injection attacks that you're familiar

79
00:06:24,178 --> 00:06:28,280
with from web technologies, pretty much the same.

80
00:06:28,650 --> 00:06:31,754
The difference here mostly is the entry point.

81
00:06:31,872 --> 00:06:35,174
So it can come not just from an HTTP request,

82
00:06:35,222 --> 00:06:39,210
but by many uncontrolled entry points. And we'll talk about that.

83
00:06:39,280 --> 00:06:43,242
We mentioned a few of them, like s three so files, emails,

84
00:06:43,306 --> 00:06:47,066
IoT, and we'll talk about it in a second. Traditional attacks

85
00:06:47,098 --> 00:06:50,794
still exist like injection command injection, SQL injection or NoSQL

86
00:06:50,842 --> 00:06:54,398
injection code injection, depending on the

87
00:06:54,404 --> 00:06:57,954
runtime of the function. And there are new types of injection like

88
00:06:58,072 --> 00:07:01,582
email injection, which we'll see later on MqtT

89
00:07:01,646 --> 00:07:04,690
pub sub. So things that you weren't really familiar with,

90
00:07:04,760 --> 00:07:07,330
and even voice command injection,

91
00:07:08,710 --> 00:07:12,026
the impact depends on the function's permissions.

92
00:07:12,078 --> 00:07:15,794
So if I have an injection attack, the impact that the attacker

93
00:07:15,842 --> 00:07:19,442
can cause it depends on what the function

94
00:07:19,516 --> 00:07:23,514
can do in the cloud. So few entry points,

95
00:07:23,552 --> 00:07:27,146
so rest APIs, of course, maybe the most common ones. But we

96
00:07:27,168 --> 00:07:30,574
can also have three party applications connected to our application to

97
00:07:30,612 --> 00:07:33,998
our functions, cloud storage, authentication services,

98
00:07:34,084 --> 00:07:38,350
logs and events, IoT, voice command via alexa,

99
00:07:38,690 --> 00:07:42,080
search for it on Google, you'll find something,

100
00:07:43,250 --> 00:07:46,558
email, SNS, code pipelines and many other things.

101
00:07:46,644 --> 00:07:50,820
Anything basically is a lambda or the function can be connected to.

102
00:07:51,590 --> 00:07:55,570
So what are the best practices here? Well, like traditional

103
00:07:55,650 --> 00:07:58,994
application, never trust, pass or make any assumption

104
00:07:59,042 --> 00:08:02,534
regarding input. The problem here is that we

105
00:08:02,572 --> 00:08:06,722
don't have security controls in the perimeter

106
00:08:06,786 --> 00:08:10,226
because actually with serverless we kind of lost the perimeter. We don't

107
00:08:10,258 --> 00:08:14,166
have the network access to the entry point to the function. We don't

108
00:08:14,198 --> 00:08:17,386
control it. Basically when we run function we just can the

109
00:08:17,408 --> 00:08:21,386
code. So the code has to secure itself. So we

110
00:08:21,408 --> 00:08:24,906
need to use positive like whitelist input

111
00:08:24,938 --> 00:08:28,830
validations inside the code. API gateway can also allow

112
00:08:28,900 --> 00:08:32,426
configuring some JSON models to limit the

113
00:08:32,468 --> 00:08:35,906
type of request. But you have to make sure your code

114
00:08:36,008 --> 00:08:40,046
can secure itself. You have to consider all event types

115
00:08:40,078 --> 00:08:44,014
and entry points. If before voice command

116
00:08:44,062 --> 00:08:48,294
injection owasp not something you should think of now

117
00:08:48,332 --> 00:08:51,874
you should. And of course just to limit the impact,

118
00:08:51,922 --> 00:08:56,290
you should run functions with list privilege managing

119
00:08:56,370 --> 00:08:58,760
just the required permission for the function.

120
00:09:00,170 --> 00:09:04,190
So of course there are some commercial tools

121
00:09:04,210 --> 00:09:08,330
that helps you protect your functions in runtime or

122
00:09:08,400 --> 00:09:09,740
detect security.

123
00:09:11,410 --> 00:09:15,520
Best practices shift left basically

124
00:09:16,930 --> 00:09:20,494
second part is broken authentication we've seen before the

125
00:09:20,532 --> 00:09:23,826
image with all the resources connected to each other. So the

126
00:09:23,848 --> 00:09:27,780
functions are really stateless, they don't really have a session to them.

127
00:09:28,550 --> 00:09:31,794
So there are more tricky ways to

128
00:09:31,832 --> 00:09:36,002
control the authentication. But basically think about

129
00:09:36,056 --> 00:09:40,194
zero trust functions cannot really trust anything, they just execute

130
00:09:40,242 --> 00:09:44,162
the code. You can store a session out of bound like a database,

131
00:09:44,226 --> 00:09:47,754
but I wouldn't say that's a common way nor

132
00:09:47,792 --> 00:09:51,382
that's a best practice. You could have multiple

133
00:09:51,446 --> 00:09:54,874
entry points, services, events and triggers that come into

134
00:09:54,912 --> 00:09:59,050
your code with no continuous flow to control the authentication.

135
00:10:00,210 --> 00:10:04,320
For example, here you can see a lambda function which is

136
00:10:05,410 --> 00:10:09,070
maybe secured by itself so you cannot reach it

137
00:10:09,140 --> 00:10:12,640
directly. But there is can open sns here,

138
00:10:13,750 --> 00:10:17,058
an open ses here that triggers the function.

139
00:10:17,144 --> 00:10:20,994
And if we can get directly to the ses, we can actually run the

140
00:10:21,032 --> 00:10:24,210
code we as an attacks.

141
00:10:24,630 --> 00:10:27,720
So you have to make sure the function can secure itself

142
00:10:28,330 --> 00:10:31,574
without even knowing who is

143
00:10:31,612 --> 00:10:36,582
going to send the email. In this case best

144
00:10:36,636 --> 00:10:40,710
practices. So if you're using AWS, use cognito

145
00:10:40,870 --> 00:10:44,934
whenever possible you can use of course other authentication

146
00:10:44,982 --> 00:10:48,074
services like Okta. Depending on the service on

147
00:10:48,112 --> 00:10:52,974
this cloud that you're using, use access tokens that

148
00:10:53,012 --> 00:10:56,526
can include custom data and can be

149
00:10:56,548 --> 00:11:00,958
signed jot tokens. For example, if you need

150
00:11:01,124 --> 00:11:04,882
external user perform input validation. Run with list

151
00:11:04,936 --> 00:11:08,194
privilege is always a best practice and

152
00:11:08,312 --> 00:11:12,420
just in case if you need out of bound security state.

153
00:11:12,870 --> 00:11:16,694
But I'd say the best practice here is

154
00:11:16,732 --> 00:11:20,502
to be able to run

155
00:11:20,556 --> 00:11:23,670
with zero trust. So when the cloud runs, it already

156
00:11:23,740 --> 00:11:27,266
knows in a way that the user

157
00:11:27,298 --> 00:11:30,140
was authenticated. So you must make sure of that.

158
00:11:32,990 --> 00:11:35,690
Number three, sensitive data exposure.

159
00:11:36,510 --> 00:11:40,922
Well that's really same as any other cloud

160
00:11:40,976 --> 00:11:44,238
based data. Our data is stored in the

161
00:11:44,244 --> 00:11:47,534
cloud, so we need to protect it in a different way than on

162
00:11:47,572 --> 00:11:51,546
our say. It doesn't mean it's less secure.

163
00:11:51,738 --> 00:11:55,154
In many cases, I'd rather my data to be

164
00:11:55,192 --> 00:11:59,166
stored on databases and be managed

165
00:11:59,198 --> 00:12:02,734
by cloud providers like Google Azure or AWS

166
00:12:02,782 --> 00:12:06,434
rather than a small company. In terms of

167
00:12:06,552 --> 00:12:10,814
customer data, when we execute code, the data is stored under

168
00:12:10,952 --> 00:12:14,422
temp. We also have other sensitive data like

169
00:12:14,476 --> 00:12:17,918
the environment variables that can contain tokens,

170
00:12:18,114 --> 00:12:22,090
access keys and other secrets.

171
00:12:23,150 --> 00:12:27,370
Other types of sensitive data, which is very common is

172
00:12:27,520 --> 00:12:31,318
data in buckets. We've seen many times exposed f

173
00:12:31,344 --> 00:12:35,678
three buckets which breach that

174
00:12:35,764 --> 00:12:39,322
expose data that was unsecured

175
00:12:39,386 --> 00:12:42,874
or put into a cloud storage. But the configuration

176
00:12:42,922 --> 00:12:46,430
of the cloud storage left it open for hackers

177
00:12:46,510 --> 00:12:49,682
to access. Source code, as we mentioned,

178
00:12:49,736 --> 00:12:53,426
is also in the environment. So if someone can run access or to

179
00:12:53,448 --> 00:12:56,886
gain access to your lambda function, they can also have access to

180
00:12:56,908 --> 00:13:00,626
the source code. The best practice.

181
00:13:00,738 --> 00:13:03,986
So if you're using a lambda and you store data into slash

182
00:13:04,018 --> 00:13:07,814
temp, delete it after the use so another execution won't have

183
00:13:07,852 --> 00:13:11,686
access to it. Use kms the key again, if we're

184
00:13:11,718 --> 00:13:15,654
using AWS, kms and equivalent to encrypt environment variables

185
00:13:15,702 --> 00:13:19,574
to encrypt data, and you can use also secret storage

186
00:13:19,622 --> 00:13:23,406
if you need to transfer data secrets between

187
00:13:23,508 --> 00:13:24,960
lambdas and services.

188
00:13:26,210 --> 00:13:29,882
If you're using other services, make sure you're securing

189
00:13:29,946 --> 00:13:33,346
them. For example, buckets don't make them public.

190
00:13:33,448 --> 00:13:37,300
That could be a huge risk for your company.

191
00:13:37,750 --> 00:13:41,330
Again, if the lambda handles

192
00:13:42,150 --> 00:13:46,040
sensitive data, make sure you run with less privilege. We'll hear it

193
00:13:46,570 --> 00:13:50,040
again and again because it limits any type of

194
00:13:50,730 --> 00:13:54,534
risk, and we'll talk about it independently later.

195
00:13:54,652 --> 00:13:58,202
And you can use other services. Again, if we're running

196
00:13:58,256 --> 00:14:01,974
AWS, you can use Macy, for example, to identify sensitive

197
00:14:02,022 --> 00:14:03,770
data in your buckets.

198
00:14:05,310 --> 00:14:09,206
All right, so we talked about list privileged a lot. So overprivileged

199
00:14:09,238 --> 00:14:13,054
function is number four. In this case, I'd say

200
00:14:13,092 --> 00:14:16,234
that more than 90% is an understatement.

201
00:14:16,282 --> 00:14:19,998
I'd say more than 95% or 99%

202
00:14:20,084 --> 00:14:23,858
are misconfigured. The difference between small mistakes and

203
00:14:23,944 --> 00:14:28,222
big mistakes. That's the difference. Functions tend

204
00:14:28,286 --> 00:14:31,554
to use many permissions that

205
00:14:31,592 --> 00:14:36,714
are not required. The reason for that is that because it's hard to configure

206
00:14:36,862 --> 00:14:41,800
a very tight security for each function for

207
00:14:42,330 --> 00:14:46,502
many reasons. Maybe we don't know exactly what is their right

208
00:14:46,556 --> 00:14:50,522
permission, or maybe lack of time, or could be other

209
00:14:50,576 --> 00:14:54,438
stuff. In many cases, security teams inside organization

210
00:14:54,534 --> 00:14:58,310
even give the developers predefined

211
00:14:58,390 --> 00:15:01,674
roles, which has many functionalities

212
00:15:01,722 --> 00:15:05,134
and many permissions that they don't need, but they tell them to use them.

213
00:15:05,172 --> 00:15:08,762
So the developers are really limited

214
00:15:08,826 --> 00:15:12,510
to use those. The impact of

215
00:15:12,580 --> 00:15:16,810
other vulnerabilities and other security risks that we discussed again

216
00:15:16,980 --> 00:15:20,802
depends on the permissions of the function. Because if the function only

217
00:15:20,856 --> 00:15:24,402
has permission to execute the code, and I don't know,

218
00:15:24,456 --> 00:15:28,246
write to the log, to the STD, out to the log system

219
00:15:28,428 --> 00:15:31,926
service, then the impact here, even for a

220
00:15:31,948 --> 00:15:35,606
code injection, is quite limited. On the

221
00:15:35,628 --> 00:15:40,034
other hand, if the function has permissions in many cases like wildcards,

222
00:15:40,082 --> 00:15:43,674
to services, to add three buckets, and we will see that in a demo later,

223
00:15:43,792 --> 00:15:47,594
you can see how big of a mess it can do. Okay,

224
00:15:47,712 --> 00:15:50,970
in many cases it's going to be limited,

225
00:15:51,050 --> 00:15:54,302
maybe stealing some data from database or from your cloud

226
00:15:54,356 --> 00:15:58,126
storage. But in extreme cases it can

227
00:15:58,228 --> 00:16:01,790
really lead to a disaster into leading to your

228
00:16:01,940 --> 00:16:04,690
complete cloud account takeover.

229
00:16:05,830 --> 00:16:08,946
Here is an example. So the last

230
00:16:09,048 --> 00:16:12,434
part on the left is an

231
00:16:12,472 --> 00:16:16,514
s three permission that has really

232
00:16:16,552 --> 00:16:19,942
a wild card both on the action and the resource. In the middle

233
00:16:19,996 --> 00:16:24,786
we've added some security, which is adding

234
00:16:24,818 --> 00:16:28,406
the specific bucket, but on the right side is the list privilege. We can

235
00:16:28,428 --> 00:16:32,282
see the getobject and the bucket name. So this really

236
00:16:32,336 --> 00:16:35,674
limits just what we need into the function.

237
00:16:35,872 --> 00:16:39,322
And again, best practice, review each

238
00:16:39,376 --> 00:16:42,910
resource is function and apply list privilege. There is almost

239
00:16:42,980 --> 00:16:47,242
impossible to do manually unless you have a handful of functions.

240
00:16:47,306 --> 00:16:50,880
So you have some way to automate that service,

241
00:16:52,050 --> 00:16:55,314
that thing, and make sure each function that goes into your

242
00:16:55,352 --> 00:16:59,282
production has its list

243
00:16:59,336 --> 00:17:02,754
privilege, right? Number five,

244
00:17:02,792 --> 00:17:06,054
vulnerable dependencies. Of course, this is very

245
00:17:06,092 --> 00:17:10,034
common. Using dependencies can be insecure

246
00:17:10,082 --> 00:17:14,790
if you're importing dependencies with security vulnerabilities,

247
00:17:15,530 --> 00:17:19,078
because functions tend to be very small in types of the custom

248
00:17:19,164 --> 00:17:22,442
code that you write, they tend to bring a lot of

249
00:17:22,576 --> 00:17:25,610
dependencies, right? So a lot of imports.

250
00:17:26,750 --> 00:17:30,906
In that case, it may lead to security breaches

251
00:17:30,938 --> 00:17:34,960
in your code. Again, depends if you're actually using

252
00:17:35,490 --> 00:17:39,070
the vulnerable part of the imported dependencies.

253
00:17:40,770 --> 00:17:44,034
I probably don't need to explain that to you,

254
00:17:44,072 --> 00:17:48,510
but when you import a specific library

255
00:17:48,590 --> 00:17:52,306
like request, in this case it brings with it

256
00:17:52,408 --> 00:17:55,686
the whole family and everything, all the dependencies of the

257
00:17:55,708 --> 00:17:59,160
dependencies and the dependencies of the dependencies and so on.

258
00:18:00,330 --> 00:18:03,986
So best practices, scan your dependencies before deploying

259
00:18:04,018 --> 00:18:07,646
into production. Use open source or third party solutions

260
00:18:07,698 --> 00:18:11,098
that can make sure if you can

261
00:18:11,184 --> 00:18:15,158
use secure versions whenever possible. Replace library

262
00:18:15,254 --> 00:18:18,540
or apply your custom patch if there is no

263
00:18:18,910 --> 00:18:20,720
security patch outside.

264
00:18:23,810 --> 00:18:27,466
Number six, insufficient logging and monitoring.

265
00:18:27,578 --> 00:18:30,270
So why is it different here?

266
00:18:30,420 --> 00:18:34,378
Well, because we're using serverless and cloud technologies.

267
00:18:34,474 --> 00:18:38,162
There is a logging and monitoring service by

268
00:18:38,216 --> 00:18:42,610
default in AWS, but you need to know how to use it. So it's

269
00:18:43,350 --> 00:18:46,866
a little bit more complex because you need to know how to extract

270
00:18:46,898 --> 00:18:49,750
data from it, how to access it, how to automate the process,

271
00:18:49,820 --> 00:18:53,160
because of course you cannot manually go and check.

272
00:18:54,490 --> 00:18:57,958
So basically if you have

273
00:18:58,044 --> 00:19:01,322
a production environment with millions of invocation, it's really hard

274
00:19:01,376 --> 00:19:04,620
to understand or learn anything from that.

275
00:19:06,110 --> 00:19:09,354
All right, because of time

276
00:19:09,392 --> 00:19:13,360
limitations, we're going to see a demo now and then we'll cover

277
00:19:13,810 --> 00:19:18,206
really quickly the other security issues.

278
00:19:18,388 --> 00:19:22,480
So as you can see here, we have

279
00:19:22,930 --> 00:19:25,570
a user that sends an email.

280
00:19:25,720 --> 00:19:29,538
The email then triggers a lambda function number four.

281
00:19:29,704 --> 00:19:34,366
And the function does two things. Store the file

282
00:19:34,398 --> 00:19:38,466
that was uploaded to an athlete bucket and then reply directly

283
00:19:38,498 --> 00:19:42,438
to the user. So the user doesn't have direct access

284
00:19:42,524 --> 00:19:45,640
to the function. Right, but the

285
00:19:46,490 --> 00:19:50,266
email service does. In this case we'll see a

286
00:19:50,288 --> 00:19:54,250
demo, how the hacker, in this case the user send the malicious

287
00:19:55,070 --> 00:19:58,634
file into the lambda function, which has of course

288
00:19:58,672 --> 00:20:02,682
a vulnerability. The vulnerability would then impact

289
00:20:02,826 --> 00:20:06,702
or cause the lambda to run malicious code

290
00:20:06,836 --> 00:20:10,346
and change the security configuration of the bucket,

291
00:20:10,538 --> 00:20:14,194
as well as submit emails to

292
00:20:14,232 --> 00:20:16,500
other destinations. Okay,

293
00:20:17,350 --> 00:20:18,420
let's see.

294
00:20:23,110 --> 00:20:27,000
So in this case this is a call for papers system

295
00:20:27,370 --> 00:20:35,680
and the user is going to send an email to

296
00:20:36,050 --> 00:20:40,320
the CFP system,

297
00:20:41,190 --> 00:20:43,700
sending an innocent PDF of course,

298
00:20:45,190 --> 00:20:49,106
just to check the system and see how it works. And as

299
00:20:49,128 --> 00:20:50,100
you can see,

300
00:20:52,070 --> 00:20:55,254
after a few seconds we get a reply. Thank you

301
00:20:55,292 --> 00:20:58,760
for your submission, Defcon. Of course.

302
00:21:00,410 --> 00:21:04,162
So in this case what I want to do is send a malicious

303
00:21:04,226 --> 00:21:07,100
file just to see what happens. Now,

304
00:21:08,030 --> 00:21:11,210
just a regular malicious file.

305
00:21:22,250 --> 00:21:25,960
The PDF that we've now submitted has some malware in it

306
00:21:26,650 --> 00:21:30,314
and we've got two emails. The second email which

307
00:21:30,352 --> 00:21:34,182
says we've identified malicious

308
00:21:34,326 --> 00:21:38,220
content in your file and there was a link to Verus total.

309
00:21:38,670 --> 00:21:44,430
Okay, so now what we're going to do is well,

310
00:21:44,580 --> 00:21:47,838
let's try to exploit the function that does the security

311
00:21:47,924 --> 00:21:51,658
verification. Okay, so I pre wrote

312
00:21:51,754 --> 00:21:56,386
a security code

313
00:21:56,488 --> 00:21:59,634
that will be downloaded by the function

314
00:21:59,832 --> 00:22:03,522
and will send emails to different

315
00:22:03,576 --> 00:22:07,634
destinations that I want. In this case I'll

316
00:22:07,682 --> 00:22:11,014
reply to myself, but I can send to whoever I

317
00:22:11,052 --> 00:22:14,600
want. But the best part is I'm going to change

318
00:22:16,730 --> 00:22:20,762
the security configuration of the cloud storage, the s three bucket that

319
00:22:20,816 --> 00:22:24,154
holds all the submissions, all the CPF to

320
00:22:24,192 --> 00:22:27,834
a public bucket, and then I'll be able to access all the

321
00:22:27,872 --> 00:22:29,690
submissions of all the users.

322
00:22:31,090 --> 00:22:32,830
Let's see how that plays.

323
00:22:40,690 --> 00:22:44,554
Okay, I'm uploading the file

324
00:22:44,602 --> 00:22:48,320
to my own bucket, just so I'll be able to access it through the web.

325
00:22:48,770 --> 00:22:52,066
The lambda will be able to access it through the web. Then I'm going to

326
00:22:52,088 --> 00:22:56,290
send this file with a malicious file name that

327
00:22:56,360 --> 00:23:00,506
we're going to exploit. A command injection in the lambda tells

328
00:23:00,558 --> 00:23:04,614
it to download my file from that bucket and

329
00:23:04,652 --> 00:23:05,720
execute it,

330
00:23:07,370 --> 00:23:10,982
uncompress and execute it. And just for fun,

331
00:23:11,036 --> 00:23:15,370
I've added some requests. This is the s three bucket that holds

332
00:23:16,030 --> 00:23:19,530
all the submissions. As you can see, I don't have access

333
00:23:19,600 --> 00:23:20,860
when I'm trying to.

334
00:23:24,390 --> 00:23:26,980
Okay, let's send the malicious file then.

335
00:23:47,470 --> 00:23:50,918
Here on the right side you can see that I've

336
00:23:50,934 --> 00:23:54,458
got some notifications. I just wrote some to myself,

337
00:23:54,544 --> 00:23:58,286
some notifications, so I'll see that things are happening in the background. And as

338
00:23:58,308 --> 00:24:02,094
you can see now, I got two emails back. One is the regular one,

339
00:24:02,212 --> 00:24:05,602
but the second one is part of the exploit saying, hey you,

340
00:24:05,656 --> 00:24:09,506
congratulations, you were accepted to

341
00:24:09,528 --> 00:24:12,798
Defcon. And here is your honorarum

342
00:24:12,974 --> 00:24:17,060
of $300. So click here to

343
00:24:17,670 --> 00:24:21,640
gain access to that money. But this is of course a phishing link

344
00:24:22,090 --> 00:24:25,878
which I can send to other participants. And this is

345
00:24:25,884 --> 00:24:29,658
the first part. But the nice part, the second part is here where the

346
00:24:29,664 --> 00:24:32,540
bucket was not accessible before,

347
00:24:33,550 --> 00:24:37,450
is now fully accessible. And I can see all the submissions.

348
00:24:40,750 --> 00:24:43,440
I can also download them to my own computer.

349
00:24:45,570 --> 00:24:48,400
Okay, so we're done with the demo,

350
00:24:49,090 --> 00:24:53,866
let's continue. So we've

351
00:24:53,898 --> 00:24:57,874
covered six of the top ten. We have four more.

352
00:24:58,072 --> 00:25:01,694
One is open resources. So we've talked about broken

353
00:25:01,742 --> 00:25:05,970
authentication, but we can actually have just open

354
00:25:06,040 --> 00:25:09,634
resources like queues, like SNS

355
00:25:09,762 --> 00:25:13,026
services, like s, three buckets, like API gateways.

356
00:25:13,138 --> 00:25:16,614
Those can be just misconfigured to be open and can lead

357
00:25:16,652 --> 00:25:20,586
to, in this case, security issues.

358
00:25:20,768 --> 00:25:24,026
The next part is denial of service versus denial of

359
00:25:24,048 --> 00:25:27,498
wallet. So lambdas have limitation of 1000

360
00:25:27,584 --> 00:25:31,450
concurrent lambdas at the same time for

361
00:25:31,520 --> 00:25:35,182
all the lambdas in the account. If I'm limiting that,

362
00:25:35,316 --> 00:25:38,990
I can have denial of service even if not because someone can actually

363
00:25:39,060 --> 00:25:43,294
send more than 1000 requests in

364
00:25:43,332 --> 00:25:47,374
parallel. But in any case, I'm going to have this debate

365
00:25:47,422 --> 00:25:51,502
between denial of service and denial of wallet because execution

366
00:25:51,566 --> 00:25:54,542
of lambda functions cost money per execution.

367
00:25:54,606 --> 00:25:58,038
So if I'm not limiting the user, and the function

368
00:25:58,204 --> 00:26:02,786
can be accessed from unauthenticated user or for a registered

369
00:26:02,818 --> 00:26:06,614
user, then they can cost money.

370
00:26:06,652 --> 00:26:10,762
If they leave multiple requests overnight or over one

371
00:26:10,816 --> 00:26:13,820
week, I'm going to pay for it. So yeah,

372
00:26:14,910 --> 00:26:19,226
the payment is by the millions, but if

373
00:26:19,248 --> 00:26:22,314
it's a targeted attack, it can cost me a couple

374
00:26:22,352 --> 00:26:25,838
of $100 insecure shared space.

375
00:26:25,924 --> 00:26:29,790
So we've talked about the slash temp.

376
00:26:30,210 --> 00:26:33,840
So between executions, if I'm running

377
00:26:34,530 --> 00:26:38,082
in parallel, then they of course don't share the same

378
00:26:38,136 --> 00:26:41,906
runtime. So they don't share the same data. But if I'm running a

379
00:26:41,928 --> 00:26:45,086
request after a request for performance reasons,

380
00:26:45,198 --> 00:26:48,758
performance reasons, the runtime is recycled by the

381
00:26:48,764 --> 00:26:52,566
cloud provider, leaving the data inside. So if I

382
00:26:52,588 --> 00:26:55,400
have access to slash temp from the outside,

383
00:26:56,410 --> 00:26:59,630
if the developer didn't delete the previous execution,

384
00:26:59,730 --> 00:27:03,050
I can access it and I can steal data of other

385
00:27:03,200 --> 00:27:05,910
requests coming from maybe other users.

386
00:27:06,070 --> 00:27:09,686
And the last one of course, is insecure

387
00:27:09,878 --> 00:27:13,006
secret management. Again, this is some kind of a

388
00:27:13,028 --> 00:27:16,570
complex because lambdas are independent,

389
00:27:16,650 --> 00:27:20,158
stateless and ephemeral. And it's kind of hard

390
00:27:20,244 --> 00:27:24,426
to gain access to store data. Developers tend

391
00:27:24,458 --> 00:27:28,030
to store data hard coded. This is very unrecommended.

392
00:27:28,110 --> 00:27:31,474
You can store data in your environment variables if

393
00:27:31,512 --> 00:27:35,326
you encrypt them. If not, again, it's a risk.

394
00:27:35,518 --> 00:27:39,094
There are other services that allow to set place like

395
00:27:39,132 --> 00:27:43,046
a vault that you can extract sensitive data from like

396
00:27:43,148 --> 00:27:46,866
secret managers or really vaults if you're

397
00:27:46,898 --> 00:27:49,080
using terraform or something like this.

398
00:27:50,910 --> 00:27:54,166
Hashicorp okay, so we've covered

399
00:27:54,198 --> 00:27:58,022
the top ten. We have, at contrast,

400
00:27:58,086 --> 00:28:01,834
our own method to do that. We're doing it

401
00:28:01,872 --> 00:28:05,246
not by protecting the function, but by testing the

402
00:28:05,268 --> 00:28:08,714
function for security vulnerabilities to remove the risk,

403
00:28:08,762 --> 00:28:12,346
including list privilege. So we connect to an account, we scan

404
00:28:12,378 --> 00:28:15,506
everything, we monitor everything and everything that we find on your

405
00:28:15,528 --> 00:28:19,090
lambda functions and the connected resources like APIs,

406
00:28:19,430 --> 00:28:23,950
API gateways, and f three. We can detect misconfiguration

407
00:28:24,030 --> 00:28:27,446
and security vulnerabilities in your code.

408
00:28:27,548 --> 00:28:32,102
In your custom code we can detect functions with over

409
00:28:32,156 --> 00:28:35,718
permissions, and in that case we can secure your

410
00:28:35,804 --> 00:28:37,190
serverless environment.

411
00:28:39,450 --> 00:28:42,986
This is an example of a list privilege permission, so we

412
00:28:43,008 --> 00:28:46,854
can detect that the function needs only one specific permission.

413
00:28:46,902 --> 00:28:49,370
In this case was DynamoDB scan.

414
00:28:50,590 --> 00:28:54,294
Okay, if you want to learn more about security in serverless

415
00:28:54,342 --> 00:28:57,680
environment, you can use DVSH, an open source project

416
00:28:58,610 --> 00:29:02,720
owned by OASP that lets you both secure and

417
00:29:03,970 --> 00:29:07,742
play the offensive part. In a service

418
00:29:07,876 --> 00:29:11,614
environment with just one click you can deploy it, but make sure

419
00:29:11,652 --> 00:29:15,726
you don't do that in production because unless the account

420
00:29:15,908 --> 00:29:19,094
is native to that environment, you can

421
00:29:19,132 --> 00:29:20,440
have some problems.

422
00:29:23,610 --> 00:29:25,480
Okay, thank you very much.

423
00:29:26,890 --> 00:29:30,518
Tal, shoot me an email if you want to discuss more about serverless and

424
00:29:30,524 --> 00:29:30,980
serverless security.

