1
00:00:25,330 --> 00:00:29,046
You. Hello everyone. Thank you

2
00:00:29,068 --> 00:00:32,534
so much for joining this session. My name is Karan and

3
00:00:32,572 --> 00:00:36,022
today I'll be talking about the topic why clean

4
00:00:36,076 --> 00:00:39,894
code is no longer a myth. So before I begin

5
00:00:39,932 --> 00:00:43,462
with the presentation, I would like to thank the entire team of

6
00:00:43,516 --> 00:00:47,110
Con 42 for giving me this opportunity to present

7
00:00:47,180 --> 00:00:49,640
my talk. So thank you so much.

8
00:00:50,610 --> 00:00:53,934
Here's a brief introduction. About me so I have been

9
00:00:53,972 --> 00:00:57,518
working primarily as an Android mobile developer for the past

10
00:00:57,604 --> 00:01:01,770
five plus years now. I have been working mainly on technologies

11
00:01:01,850 --> 00:01:05,134
like AI, AR and VR. More recently

12
00:01:05,182 --> 00:01:08,706
I've been involved in developing web applications using react and

13
00:01:08,728 --> 00:01:13,374
angular, and my current work assignment includes developing mobile applications

14
00:01:13,502 --> 00:01:17,106
using React native. And apart from being passionate

15
00:01:17,138 --> 00:01:20,178
about technology, I also love writing poems,

16
00:01:20,354 --> 00:01:23,974
traveling to different places across the globe, and meeting new

17
00:01:24,012 --> 00:01:26,870
people. So that's about me in a nutshell.

18
00:01:27,470 --> 00:01:31,498
Now, needless to say, most of us are working

19
00:01:31,584 --> 00:01:34,902
in software projects which are agile in nature,

20
00:01:35,046 --> 00:01:39,414
and they are characterized by the fact that they are result oriented,

21
00:01:39,542 --> 00:01:42,654
involves continuous improvement, and no

22
00:01:42,692 --> 00:01:46,158
longer are we working in silos. We are all working

23
00:01:46,244 --> 00:01:50,350
in either small or medium sized cross functional teams.

24
00:01:50,690 --> 00:01:54,366
The second block actually talks about software design principles.

25
00:01:54,398 --> 00:01:58,446
So I've listed four of these software design principles,

26
00:01:58,558 --> 00:02:02,322
and these software design principles also have been there for

27
00:02:02,376 --> 00:02:05,894
quite some time now. However, it is the lack of the

28
00:02:05,932 --> 00:02:09,286
early adoption of these principles in software projects that

29
00:02:09,308 --> 00:02:12,854
has actually caused a lot of concerns. Now, more often than

30
00:02:12,892 --> 00:02:16,034
not, software projects tend to incorporate

31
00:02:16,082 --> 00:02:19,800
these principles either towards the frag end of the project,

32
00:02:20,650 --> 00:02:23,978
when it's going to be launched, or sometimes even after it

33
00:02:23,984 --> 00:02:27,850
has launched. So here it is important to know that these kind of

34
00:02:27,920 --> 00:02:31,920
software design principles have to be incorporated as early as possible

35
00:02:32,530 --> 00:02:36,590
in the software development lifecycle. So here I would like to specifically mention

36
00:02:36,660 --> 00:02:40,314
about one of the principles, which is separation of concerns.

37
00:02:40,442 --> 00:02:43,786
Now, separation of concerns basically means that you divide

38
00:02:43,818 --> 00:02:47,634
a program into say exists sections and then

39
00:02:47,672 --> 00:02:51,554
each section basically handles a separate concern. So these

40
00:02:51,592 --> 00:02:55,134
kind of software design principles are especially important nowadays

41
00:02:55,182 --> 00:02:58,994
in software projects. Coming to the third block, which talks about

42
00:02:59,032 --> 00:03:02,402
the age in which we all live in, which is the age of automation.

43
00:03:02,466 --> 00:03:06,054
Now, the age of automation, basically one of the benefits of

44
00:03:06,172 --> 00:03:10,078
the age of automation is that you get to use more tools and accelerators,

45
00:03:10,194 --> 00:03:13,942
and one of the main advantages is that it helps to reduce the overall

46
00:03:14,006 --> 00:03:17,626
cost and the effort. So the age of automation certainly

47
00:03:17,728 --> 00:03:21,102
is something that we are all a part of,

48
00:03:21,156 --> 00:03:25,086
and we are all using it in our day to day lives as well.

49
00:03:25,268 --> 00:03:28,494
So before coming to the main

50
00:03:28,532 --> 00:03:32,330
topic of the presentation, here is a short disclaimer.

51
00:03:32,490 --> 00:03:36,498
So this session is not about why to write clean code,

52
00:03:36,584 --> 00:03:40,242
or neither does it talk about what is clean code or what is clean

53
00:03:40,296 --> 00:03:44,002
architecture, nor does it try to answer the question about

54
00:03:44,056 --> 00:03:47,746
why don't so software engineers write clean code. So the objective

55
00:03:47,778 --> 00:03:51,606
of this session mainly is to describe how one can actually

56
00:03:51,708 --> 00:03:55,522
go about developing or writing

57
00:03:55,586 --> 00:03:58,866
a clean code. And it's talking about one of the tasks

58
00:03:58,898 --> 00:04:02,522
that software developers even today feel that it is something

59
00:04:02,576 --> 00:04:05,894
far fetched. And if you happen to be one of those developers,

60
00:04:05,942 --> 00:04:09,194
then perhaps you might have guessed it by now. It is

61
00:04:09,312 --> 00:04:12,558
writing clean code. So that is basically

62
00:04:12,724 --> 00:04:16,654
the objective of the session. So years are

63
00:04:16,692 --> 00:04:20,634
trimmed down, a version of a day in the life of a software

64
00:04:20,682 --> 00:04:24,178
developer. So software developer is someone who

65
00:04:24,264 --> 00:04:27,538
checks in his code at say regular intervals and

66
00:04:27,704 --> 00:04:32,094
submits finally a pull request, which is then internally

67
00:04:32,142 --> 00:04:36,114
reviewed by a team of developers, so colleagues or

68
00:04:36,232 --> 00:04:40,254
senior members in the team. And basically

69
00:04:40,312 --> 00:04:43,654
the developers would then provide some feedback based

70
00:04:43,692 --> 00:04:47,554
on which the person who developed the code would refactor

71
00:04:47,602 --> 00:04:51,586
it, and then finally this would go on until

72
00:04:51,628 --> 00:04:55,190
the PR has been approved. Now once the PR has been approved,

73
00:04:55,270 --> 00:04:58,806
this would basically trigger some scripts, so it can be some build scripts

74
00:04:58,838 --> 00:05:01,526
which would in turn execute a pipeline.

75
00:05:01,638 --> 00:05:05,562
And here is where the DevOps team would come into picture,

76
00:05:05,626 --> 00:05:08,878
where they would be involved mainly in the monitoring of

77
00:05:08,884 --> 00:05:12,814
the pipeline, determining whether the operations of the pipeline are going on

78
00:05:12,852 --> 00:05:16,666
smoothly. And the output of this process would be say a binary

79
00:05:16,698 --> 00:05:20,734
or an artifact that would be produced, which would then be deployed to a QA

80
00:05:20,782 --> 00:05:24,002
environment. And here is where the testing team would come into play,

81
00:05:24,056 --> 00:05:27,474
where they would actually be involved more in the testing of

82
00:05:27,512 --> 00:05:31,142
the app or the solution, and against a set of test

83
00:05:31,196 --> 00:05:35,106
cases, of course. And then they would also be providing their feedback

84
00:05:35,138 --> 00:05:38,774
on a continuous basis to the development team. So now,

85
00:05:38,812 --> 00:05:42,906
assuming basically all this has happened and the

86
00:05:42,928 --> 00:05:46,246
issues have been resolved and there are no potential bottlenecks,

87
00:05:46,278 --> 00:05:49,894
then the testing team would ideally give a green signal and the

88
00:05:49,952 --> 00:05:53,934
application would go into production or

89
00:05:53,972 --> 00:05:57,134
something that we call as going live. So this is

90
00:05:57,172 --> 00:06:00,554
a feeling that I think most of us have experienced

91
00:06:00,682 --> 00:06:04,802
by now. And when this kind of a situation or moment

92
00:06:04,936 --> 00:06:07,860
comes in, we feel something like this.

93
00:06:08,230 --> 00:06:12,258
It's this kind of a moment where you feel that your code actually

94
00:06:12,344 --> 00:06:16,386
has worked and you have actually produced a working

95
00:06:16,488 --> 00:06:20,386
version, which is fine and it has gone into production. But if you're

96
00:06:20,418 --> 00:06:23,842
one of those who loves writing clean code, then perhaps

97
00:06:23,906 --> 00:06:27,366
this is really not the icing on the cake. So there are

98
00:06:27,388 --> 00:06:30,886
some drawbacks which are basically associated with this kind of an approach.

99
00:06:30,918 --> 00:06:34,474
So in this case, the developers, they are mainly focused on

100
00:06:34,512 --> 00:06:38,538
making the solution, I would say work. So I

101
00:06:38,544 --> 00:06:42,118
would say there's less amount of time which is actually spent on the refactoring

102
00:06:42,134 --> 00:06:46,026
of the code. So there are no, or I would say limited precommit checks

103
00:06:46,058 --> 00:06:49,242
which are in place. And there is always an ongoing debate

104
00:06:49,306 --> 00:06:53,258
of whether the developer should actually invest his time

105
00:06:53,284 --> 00:06:57,454
in writing a working code, or whether he should invest his time in writing

106
00:06:57,502 --> 00:07:00,846
a maintainable code. So there is always a debate

107
00:07:00,878 --> 00:07:03,860
that goes on about this.

108
00:07:04,390 --> 00:07:08,102
So these kind of problems do exist, but then there are some ways

109
00:07:08,156 --> 00:07:11,254
by which you could tackle them. So for now,

110
00:07:11,292 --> 00:07:15,160
let's try to deviate from the world of technology

111
00:07:15,530 --> 00:07:18,630
and move to the world of human psychology.

112
00:07:18,990 --> 00:07:23,050
Now, in case of human psychology, there is something that we all

113
00:07:23,200 --> 00:07:26,326
have known about which is nothing but a habit.

114
00:07:26,438 --> 00:07:29,190
So habit is something that is not developed overnight.

115
00:07:29,270 --> 00:07:33,142
So writing clean code also needs to be, or become

116
00:07:33,216 --> 00:07:36,462
a habit. So what are the four stages, you may ask,

117
00:07:36,516 --> 00:07:39,742
of building a habit? So I have listed them down, so they are nothing

118
00:07:39,796 --> 00:07:43,902
but queue craving, response and reward. So q

119
00:07:43,956 --> 00:07:47,326
is nothing but something that triggers your brain to initiate

120
00:07:47,358 --> 00:07:51,186
a particular behavior and action, and also basically helps you

121
00:07:51,208 --> 00:07:55,198
to predict or provide some more information of the actual reward.

122
00:07:55,374 --> 00:07:58,710
Craving, on the other hand, is the motivational force behind

123
00:07:58,780 --> 00:08:01,846
developing the habit. The response basically in this

124
00:08:01,868 --> 00:08:05,298
case represents the actual habit itself. And the reward,

125
00:08:05,394 --> 00:08:08,774
as the name suggests, basically is the results or

126
00:08:08,892 --> 00:08:12,070
the outcomes of developing this kind of a habit.

127
00:08:12,230 --> 00:08:15,466
So these are the four stages, I would say, of building a habit. But if

128
00:08:15,488 --> 00:08:18,762
we had to map this in terms of our

129
00:08:18,816 --> 00:08:22,278
main objective of writing clean code, so this is what we

130
00:08:22,304 --> 00:08:25,594
would eventually come up with. So in the case of writing

131
00:08:25,642 --> 00:08:29,422
clean code, our queue basically would involve removing of debt code,

132
00:08:29,556 --> 00:08:33,466
finding of unused variables, automating the formatting of the code, and applying

133
00:08:33,498 --> 00:08:36,946
certain custom rules. On the other hand, our craving basically, or the

134
00:08:36,968 --> 00:08:40,814
motivation behind developing this habit would be to write maintainable

135
00:08:40,862 --> 00:08:44,734
code to maximize the refactoring of the code, and eventually to minimize

136
00:08:44,782 --> 00:08:48,294
the amount of bugs. The response in this case would

137
00:08:48,332 --> 00:08:52,246
involve using githubs and linting, which I'll be talking about in

138
00:08:52,268 --> 00:08:55,874
the subsequent slides as well. And although the rewards

139
00:08:55,922 --> 00:08:59,562
of developing this kind of habit would be many, but I have listed down

140
00:08:59,616 --> 00:09:03,594
three of the important ones, which is basically consistency in terms

141
00:09:03,632 --> 00:09:07,018
of the code, effort and cost savings in terms of

142
00:09:07,024 --> 00:09:11,082
the development time, and also achieving a higher code

143
00:09:11,136 --> 00:09:15,034
quality. So these are the three important rewards of developing

144
00:09:15,082 --> 00:09:18,542
this kind of a habit. So the question now is that how does

145
00:09:18,596 --> 00:09:22,286
actually one go about developers this habit. So one

146
00:09:22,308 --> 00:09:26,146
of the steps that I found useful in this is something that

147
00:09:26,248 --> 00:09:30,002
I usually recommend, which is basically using something called as

148
00:09:30,056 --> 00:09:33,374
husky. So husky, for those of you who are not aware,

149
00:09:33,422 --> 00:09:36,814
is nothing but a popular Javascript or NPM

150
00:09:36,862 --> 00:09:40,642
package which is already out there, a framework which allows developers

151
00:09:40,706 --> 00:09:44,354
to run certain scripts while doing certain specific actions.

152
00:09:44,482 --> 00:09:48,022
Now these actions can be either in the form of githubs, which are

153
00:09:48,076 --> 00:09:51,418
internally also scripts which run every time a particular

154
00:09:51,504 --> 00:09:55,066
event occurs in your git repository. And these events also can

155
00:09:55,088 --> 00:09:58,426
be of different, different types. So it can be a

156
00:09:58,448 --> 00:10:02,530
pre commit, a pre push. So these are the various events, and the gith

157
00:10:02,630 --> 00:10:07,146
basically would be executed each time, every time a particular event occurs.

158
00:10:07,258 --> 00:10:11,226
So in that case, how does actually one go about installing

159
00:10:11,258 --> 00:10:15,050
husky or setting Husky up? The answer is pretty straightforward.

160
00:10:15,130 --> 00:10:18,834
You could just use a simple command. So in this case, the command is

161
00:10:18,872 --> 00:10:22,626
NPX husky in it. So, which basically would inject a kind of a

162
00:10:22,648 --> 00:10:26,434
prepare script in your package or JSON file, and the installation would

163
00:10:26,472 --> 00:10:29,654
move on. Pretty straightforward. So this is basically a simple way

164
00:10:29,692 --> 00:10:33,222
by which you could install husky. So here I would like to also

165
00:10:33,276 --> 00:10:36,374
mention that it is recommended to use, of course,

166
00:10:36,412 --> 00:10:40,466
the latest version of Husky, because if you're one of those who have used Husky

167
00:10:40,498 --> 00:10:44,134
before, and if you're now migrating from say a low version,

168
00:10:44,182 --> 00:10:47,594
say version four, to the latest version around this time,

169
00:10:47,632 --> 00:10:50,586
which is six. So you have to note that there have been a lot of

170
00:10:50,608 --> 00:10:54,314
significant changes in the way husky now actually interacts with the whole JS

171
00:10:54,362 --> 00:10:58,346
ecosystem. So it has been actually kept away. So I would say decoupled

172
00:10:58,378 --> 00:11:02,238
in a way and making it more

173
00:11:02,404 --> 00:11:06,526
easier to use. So that is basically one of the advantages with the newest version.

174
00:11:06,638 --> 00:11:09,954
So I would recommend people trying husky for the first time to use

175
00:11:09,992 --> 00:11:12,740
the new version and set it up.

176
00:11:13,110 --> 00:11:16,142
So this is about the setup, which is basically pretty straightforward.

177
00:11:16,206 --> 00:11:19,378
So let's now understand, how does one write his

178
00:11:19,464 --> 00:11:23,058
first pre commit hook. So a precommit

179
00:11:23,074 --> 00:11:26,726
hook can be also written in the form of a script. So in

180
00:11:26,748 --> 00:11:30,370
this case, basically I have included a pre commit hook as a

181
00:11:30,380 --> 00:11:33,978
part of my script. And in this case, this is a pretty simple example

182
00:11:34,064 --> 00:11:37,366
where I have actually used a precommit hook,

183
00:11:37,398 --> 00:11:40,986
which does an Eslint kind of task. So it does an

184
00:11:41,008 --> 00:11:44,334
Eslint minus minus fix, which is basically going to

185
00:11:44,452 --> 00:11:47,946
find out or solve the most common errors or commonly

186
00:11:47,978 --> 00:11:51,022
occurring errors for me. So it can be in terms of white

187
00:11:51,076 --> 00:11:54,914
spacing, or it can be in terms of variable declaration. So this would

188
00:11:54,952 --> 00:11:58,398
basically help me to ensure that developers,

189
00:11:58,494 --> 00:12:01,790
before developers check in their code, most of the commonly occurring

190
00:12:01,870 --> 00:12:05,298
problems have been fixed and the developers can then

191
00:12:05,384 --> 00:12:08,738
check in their code. So this kind of a pre commit hook would,

192
00:12:08,824 --> 00:12:12,214
although it's a pretty simple one, but it would help you to ensure that

193
00:12:12,252 --> 00:12:15,446
whatever code has been checked in, it's of good quality. So this

194
00:12:15,468 --> 00:12:19,290
is basically a very simple example of a precommit hook.

195
00:12:19,630 --> 00:12:23,610
So coming to the next slide, so I mentioned about Eslint,

196
00:12:24,190 --> 00:12:27,434
one of the slides prior to this, and I

197
00:12:27,472 --> 00:12:31,466
mentioned that Eslint is also one of the popular frameworks which

198
00:12:31,488 --> 00:12:34,606
are there, and Eslint actually helps developers to

199
00:12:34,628 --> 00:12:38,186
find problems in their code without actually running or executing

200
00:12:38,218 --> 00:12:41,898
it. And prettier on the other hand, is like an optional code formatter.

201
00:12:41,914 --> 00:12:45,154
So there are many code formatters out there, but prettier is something

202
00:12:45,192 --> 00:12:47,780
that one uses quite often,

203
00:12:49,430 --> 00:12:53,806
especially in terms of JavaScript and react based applications,

204
00:12:53,838 --> 00:12:57,474
I would say. And if you are one of those who uses

205
00:12:57,522 --> 00:13:01,446
react JS or is developing react JS based applications, then the

206
00:13:01,468 --> 00:13:04,994
good part is that the create react app already comes bundled

207
00:13:05,042 --> 00:13:08,386
in with the Eslint config. So as you might be aware,

208
00:13:08,418 --> 00:13:11,674
the eslint has a lot of plugins that it

209
00:13:11,712 --> 00:13:15,002
has, and you can actually include them as a part of your

210
00:13:15,056 --> 00:13:18,566
configuration. Or in that case, if you are using react

211
00:13:18,598 --> 00:13:22,214
JS, there would be already a, by default a set of plugins

212
00:13:22,262 --> 00:13:26,254
which would be there, but you can always go ahead and install any

213
00:13:26,292 --> 00:13:30,574
other plugin if required. So that is one of the things

214
00:13:30,612 --> 00:13:33,886
that you could do in case of Eslint. And prettier on the

215
00:13:33,908 --> 00:13:37,746
other hand, would be something that also you could use if

216
00:13:37,768 --> 00:13:41,634
you are well acquainted with it, and if you'd like to make

217
00:13:41,672 --> 00:13:45,186
code formatting a lot easier. So that is basically done using a

218
00:13:45,208 --> 00:13:48,854
simple command which I have listed down, which is basically doing

219
00:13:48,892 --> 00:13:52,680
a yarn add and to include prettier in your application.

220
00:13:53,130 --> 00:13:56,850
So this is basically a pretty simple way of installing

221
00:13:56,930 --> 00:14:00,454
Eslint and prettier and coming to the next slide.

222
00:14:00,502 --> 00:14:04,394
Now, Eslint, as I mentioned, would help you to find

223
00:14:04,432 --> 00:14:08,266
out problems in a code without executing it, and that is

224
00:14:08,288 --> 00:14:11,562
because of certain rules. So there are certain rules

225
00:14:11,626 --> 00:14:15,614
that you could add for basic syntax validation or

226
00:14:15,652 --> 00:14:19,322
variable declaration or say brace styles to fit your requirements

227
00:14:19,386 --> 00:14:22,606
of the project. And there are two ways actually of

228
00:14:22,708 --> 00:14:26,714
configuring Eslint. So one way is basically you create an eslint

229
00:14:26,762 --> 00:14:30,674
RC Js file at the root level of your project.

230
00:14:30,792 --> 00:14:33,954
Or you could ideally go with the second approach, which is to

231
00:14:33,992 --> 00:14:37,666
add Eslint config feed in the package JSon. So this

232
00:14:37,688 --> 00:14:41,014
is another approach where you can specify your rules and

233
00:14:41,052 --> 00:14:44,646
your configuration. So I have actually gone with the first approach. In this

234
00:14:44,668 --> 00:14:48,246
case, I have created an Eslint RC Js file in which I

235
00:14:48,268 --> 00:14:51,578
have included all the rules which are going

236
00:14:51,584 --> 00:14:54,746
to be applicable for my project. So the good part is that here you

237
00:14:54,768 --> 00:14:58,666
could actually do

238
00:14:58,688 --> 00:15:02,094
a lot of customization in terms of your rules and try to make it

239
00:15:02,132 --> 00:15:05,626
more stricter or depending upon

240
00:15:05,658 --> 00:15:09,086
your project requirements. So Eslint offers you

241
00:15:09,108 --> 00:15:12,334
that flexibility and one can actually take into

242
00:15:12,372 --> 00:15:16,366
account all the commonly occurring problems or commonly occurring

243
00:15:16,398 --> 00:15:20,098
issues that developers face and also try to set up some rules so that

244
00:15:20,184 --> 00:15:24,146
it could be avoided before committing the code. So these

245
00:15:24,168 --> 00:15:28,386
kind of rules also can be added as a part of the Eslint

246
00:15:28,418 --> 00:15:32,214
RC js file. So this is a simple example of how

247
00:15:32,252 --> 00:15:35,558
one can configure rules using Eslint and

248
00:15:35,644 --> 00:15:39,106
coming to the next slide. So in addition to linting

249
00:15:39,138 --> 00:15:42,614
of code, I feel that one of the most important tasks

250
00:15:42,662 --> 00:15:46,406
which is often neglected is providing meaningful commit

251
00:15:46,438 --> 00:15:49,974
messages. So in addition to linting of code, I would say commit linting

252
00:15:50,022 --> 00:15:53,942
is also especially important when it comes to writing or

253
00:15:54,016 --> 00:15:57,422
writing clean code, and even in that case tracking down of

254
00:15:57,556 --> 00:16:01,262
commit messages, especially in software projects which have been going on for

255
00:16:01,316 --> 00:16:04,626
like say several years. So it's very

256
00:16:04,648 --> 00:16:07,890
important also to make sure that every developer basically

257
00:16:07,960 --> 00:16:12,062
follows a particular standard in terms of commit messages.

258
00:16:12,126 --> 00:16:15,326
And for this, basically one can actually leverage the commit

259
00:16:15,358 --> 00:16:18,722
lint. So the commit lint also can be, it's also nothing

260
00:16:18,776 --> 00:16:21,926
but similar to the ES lint. But in this case you could

261
00:16:22,108 --> 00:16:25,798
have different set of rules. So of course this will be more related to

262
00:16:25,964 --> 00:16:29,826
related in terms of the way you name or provide your commit

263
00:16:29,858 --> 00:16:33,386
messages. So in this case also you could use

264
00:16:33,408 --> 00:16:37,526
a simple yarn command which I have listed down to include those packages

265
00:16:37,638 --> 00:16:41,118
as a part of your project and you could get started using it. So this

266
00:16:41,124 --> 00:16:44,574
is also pretty straightforward where using this kind of

267
00:16:44,612 --> 00:16:48,622
a linting type, actually you could ensure that every

268
00:16:48,676 --> 00:16:52,106
developer follows a particular standard in terms of his commit

269
00:16:52,138 --> 00:16:55,442
messages, which eventually, later on maybe in the project,

270
00:16:55,496 --> 00:16:58,770
can be tracked by someone in case of an issue.

271
00:16:58,920 --> 00:17:02,818
So that is also something that I would recommend using

272
00:17:02,984 --> 00:17:06,902
as well. So coming to the next slide, which talks about

273
00:17:07,036 --> 00:17:10,182
environmental configurations, now this is again a very important

274
00:17:10,316 --> 00:17:13,970
aspect of writing clean code, because as developers

275
00:17:14,130 --> 00:17:17,666
we often work on different operating systems,

276
00:17:17,698 --> 00:17:21,402
be it windows, Linux or macOS. So based

277
00:17:21,456 --> 00:17:25,414
on the different versions or different dependency versions,

278
00:17:25,462 --> 00:17:29,066
there's always some kind of a conflict that may arise. Now, usually in

279
00:17:29,088 --> 00:17:33,050
a dev environment, one does not typically run the NPM install command

280
00:17:34,110 --> 00:17:37,166
unless he or she is running the project for the first time or there are

281
00:17:37,188 --> 00:17:40,478
some version changes that needs to be done.

282
00:17:40,564 --> 00:17:44,174
So in this case, the good part is that we have something called as

283
00:17:44,212 --> 00:17:47,282
a node version manager. So this basically it is used to

284
00:17:47,416 --> 00:17:51,780
install a specific version, or you can say multiple versions of a particular

285
00:17:52,230 --> 00:17:55,842
framework or library, and one can do that using say

286
00:17:55,976 --> 00:17:59,154
the command like NVM install where you specify

287
00:17:59,202 --> 00:18:02,822
the version you want to use, and then using the NVM use

288
00:18:02,876 --> 00:18:07,366
command, you start using that in your particular project. So then irrespective of

289
00:18:07,548 --> 00:18:11,406
the version that runs on your operating system, this version

290
00:18:11,458 --> 00:18:14,746
would then be specific to that project, and it will help you

291
00:18:14,768 --> 00:18:18,134
to ensure that you have a consistency in terms of the versioning

292
00:18:18,182 --> 00:18:21,826
with other developers who might be using maybe a different operating

293
00:18:21,878 --> 00:18:25,582
system or a different version on their system. So this

294
00:18:25,716 --> 00:18:29,018
would help you ensure that there's a consistency among

295
00:18:29,114 --> 00:18:32,890
the versions and could help you to basically even avoid any dependency

296
00:18:32,970 --> 00:18:36,046
conflicts, aversion conflicts in the future. So this is one of

297
00:18:36,068 --> 00:18:39,730
the, I would say one of the main advantages of using

298
00:18:39,800 --> 00:18:43,538
this kind of an environmental configuration as well.

299
00:18:43,704 --> 00:18:47,462
So moving on. I would say writing clean

300
00:18:47,516 --> 00:18:51,554
code definitely would help you to improve the efficiency and the overall

301
00:18:51,602 --> 00:18:55,478
output of your code and the code quality itself.

302
00:18:55,564 --> 00:18:59,354
And I feel that project team should basically focus more on the

303
00:18:59,392 --> 00:19:02,758
environmental setup and configuring

304
00:19:02,854 --> 00:19:06,534
the frameworks for clean code before even the actual development starts.

305
00:19:06,582 --> 00:19:10,426
And in my opinion, refactoring should definitely be made a

306
00:19:10,448 --> 00:19:13,886
continuous process where developers should focus more on refactoring the

307
00:19:13,908 --> 00:19:17,806
code rather than actually producing, say, just a working version of the

308
00:19:17,828 --> 00:19:21,694
code. So that's it from my side. And before I

309
00:19:21,732 --> 00:19:25,486
conclude, I would like to share a very interesting quote that I

310
00:19:25,508 --> 00:19:28,702
came across on the Internet, which says that every

311
00:19:28,756 --> 00:19:32,014
developers loves to write clean code, yet not

312
00:19:32,052 --> 00:19:35,874
every developer writes code in the same way. So that's

313
00:19:35,922 --> 00:19:40,182
about it from my side. So here are a few references based

314
00:19:40,236 --> 00:19:42,918
on which I compiled my presentation today,

315
00:19:43,004 --> 00:19:46,790
and thank you once again to the entire team

316
00:19:46,860 --> 00:19:50,610
of Con 42 and hope all of you enjoyed the session.

317
00:19:50,770 --> 00:19:54,374
Please feel free to get in touch in case of any questions or

318
00:19:54,492 --> 00:19:56,820
any queries. So thank you so much once again.

