1
00:01:42,590 --> 00:01:46,114
You. Hello and welcome to ten

2
00:01:46,152 --> 00:01:49,966
ways to doom your DevOps. My name is Sheen Godimer. I'm a DevOps

3
00:01:49,998 --> 00:01:53,406
engineer with a government contractor called praeses,

4
00:01:53,598 --> 00:01:56,530
and I've been through a lot of DevOps transformations.

5
00:01:57,190 --> 00:02:00,626
Almost every organization has managed to sabotage their

6
00:02:00,648 --> 00:02:03,966
own transformation or get in their own way. So the transformation

7
00:02:03,998 --> 00:02:07,210
is virtually guaranteed to fail. Here are ten policy

8
00:02:07,320 --> 00:02:11,158
that I run into time and time again that doom a DevOps effort

9
00:02:11,254 --> 00:02:13,980
from the get go. Number one,

10
00:02:14,590 --> 00:02:18,170
slow onboarding. It takes days or weeks

11
00:02:18,240 --> 00:02:21,466
or months for a new team member to contribute meaningfully to

12
00:02:21,488 --> 00:02:24,766
the team. The problem with this is it makes them feel like

13
00:02:24,788 --> 00:02:28,606
they're a burden or it bores them, or it sets an

14
00:02:28,628 --> 00:02:32,462
expectation of pace that's really slow and they don't ever get really

15
00:02:32,516 --> 00:02:35,922
engaged and want to work faster and be

16
00:02:35,976 --> 00:02:40,254
truly engaged to contribute to the team. Most importantly,

17
00:02:40,302 --> 00:02:43,794
it shows them how important we consider them, which is to say, not at all,

18
00:02:43,832 --> 00:02:47,000
because we did nothing to prepare for them. Arriving on the team,

19
00:02:47,610 --> 00:02:51,042
have a laptop or a workstation ready, install the necessary

20
00:02:51,106 --> 00:02:54,134
tools, grant the necessary permissions, and then

21
00:02:54,172 --> 00:02:57,974
be prepared to pair or mob or ensemble code or work

22
00:02:58,012 --> 00:03:01,798
with them so that they really learn your process and your system

23
00:03:01,964 --> 00:03:05,002
and practice it ahead of time because they may not be used to it.

24
00:03:05,056 --> 00:03:08,006
Your team should have that as part of the culture so that they can onboard

25
00:03:08,038 --> 00:03:11,978
people quickly. The next doom is using the cloud.

26
00:03:12,064 --> 00:03:15,822
Not the regular cloud, but a pretend cloud. We run our data center

27
00:03:15,876 --> 00:03:19,230
in the cloud instead of leveraging the cloud. Well,

28
00:03:19,300 --> 00:03:23,134
that ignores the advantages of the cloud. So there are no advantages of the

29
00:03:23,172 --> 00:03:27,170
cloud. There are five essential characteristics of cloud

30
00:03:27,240 --> 00:03:31,106
computing as defined by NIST, but the one I see missing most often is

31
00:03:31,128 --> 00:03:34,690
self service. If you put your cloud resources

32
00:03:35,030 --> 00:03:38,566
behind a long request process or a complex ticketing and

33
00:03:38,588 --> 00:03:41,574
approval process, you aren't using the cloud.

34
00:03:41,772 --> 00:03:45,266
Then executives get frustrated because the cloud was supposed to make things faster

35
00:03:45,298 --> 00:03:49,050
and more flexible, but the organization is actively

36
00:03:49,550 --> 00:03:53,178
preventing that from happening by not actually using the

37
00:03:53,184 --> 00:03:56,614
cloud the way it was supposed to be. Similarly,

38
00:03:56,742 --> 00:04:00,170
doing agile instead of actually being agile,

39
00:04:00,670 --> 00:04:04,366
our organization has standardized the way teams will be agile, and there's no

40
00:04:04,388 --> 00:04:07,518
flexibility to change. Well, if you have a

41
00:04:07,524 --> 00:04:11,370
top down, mandated, unified process, you aren't doing agile.

42
00:04:11,530 --> 00:04:15,358
Agile is driven by self organizing teams.

43
00:04:15,534 --> 00:04:18,740
But you say we have a stand up for an hour every day.

44
00:04:19,190 --> 00:04:23,726
Exactly what we're talking about. Agile is supposed to encourage agility,

45
00:04:23,918 --> 00:04:27,590
right? And it's based on a couple of things, but one of the really strong

46
00:04:27,660 --> 00:04:31,126
pieces is remembering that

47
00:04:31,148 --> 00:04:35,138
it's individuals and interactions over processes and tools and responding

48
00:04:35,154 --> 00:04:39,526
to change over following a plan. And you can't have those if you're not a

49
00:04:39,548 --> 00:04:43,370
self organizing team. A great sign that you aren't agile

50
00:04:43,790 --> 00:04:47,066
is that you require status meetings and status reports and then

51
00:04:47,088 --> 00:04:50,522
status roll ups and then monthly summaries of all of those because

52
00:04:50,576 --> 00:04:54,714
there's too many status reports to really pay attention, to have your stakeholders

53
00:04:54,762 --> 00:04:58,334
join the standups, or at least the reviews, and that way they see

54
00:04:58,372 --> 00:05:02,026
what's actually going on and your team can actually get to agile.

55
00:05:02,218 --> 00:05:05,774
Doom number four, the change control board or change advisory

56
00:05:05,822 --> 00:05:09,486
board or review, whatever you call it. Every production

57
00:05:09,518 --> 00:05:13,060
change must be approved by a group that has no idea what we do.

58
00:05:14,710 --> 00:05:18,374
First off, you can't release multiple times a day if it needs approval from

59
00:05:18,412 --> 00:05:21,480
a group that meets multiple times a month. Right?

60
00:05:21,930 --> 00:05:25,670
Besides, what value are they adding

61
00:05:26,090 --> 00:05:29,546
in Devsecops? The process has reviews by the team and

62
00:05:29,568 --> 00:05:33,066
quality tools and quality gates all along the way so that our

63
00:05:33,088 --> 00:05:36,966
DevOps process itself manages risk, not some disinterested

64
00:05:36,998 --> 00:05:40,650
and uninformed group. The Dora report has shown us that ccbs

65
00:05:40,730 --> 00:05:44,638
increase risk, not reduce it. So show

66
00:05:44,724 --> 00:05:48,238
the rest of the organization that you have a process

67
00:05:48,324 --> 00:05:51,834
that you are disciplined in following, that you do pull request

68
00:05:51,882 --> 00:05:55,822
approvals, that you have quality gates, that you follow the principle of least privilege.

69
00:05:55,966 --> 00:05:59,326
And if there's a real question about what's

70
00:05:59,358 --> 00:06:02,706
being pushed out when, show them that you're using infrastructure as

71
00:06:02,728 --> 00:06:06,790
code and immutable infrastructure, so there's always really

72
00:06:06,940 --> 00:06:10,726
clear what's being pushed out to production, then you

73
00:06:10,748 --> 00:06:14,114
don't need the team or a board there to restrict

74
00:06:14,162 --> 00:06:17,746
what you're doing and how you're doing it. Next, being afraid

75
00:06:17,778 --> 00:06:21,546
to fail a failed experiment means we'll have a lot of explaining to do to

76
00:06:21,568 --> 00:06:25,542
management. Well, real Rogers has said good judgment

77
00:06:25,606 --> 00:06:29,050
comes from experience, and a lot of that comes from bad judgment.

78
00:06:29,390 --> 00:06:33,146
No failure means no learning. We're not going to get different results

79
00:06:33,178 --> 00:06:36,574
if we don't change what we're doing or how we're doing it. You need to

80
00:06:36,612 --> 00:06:39,934
work to the point where you're aggressively and

81
00:06:39,972 --> 00:06:43,982
ruthlessly protecting psychological safety and you're striving for

82
00:06:44,036 --> 00:06:47,234
a generative culture where learning, experimentation is just

83
00:06:47,272 --> 00:06:51,058
part of the way you work doesn't mean you just open up to the

84
00:06:51,064 --> 00:06:54,594
wild, wild west and anybody can do whatever they feel like. You can try to

85
00:06:54,632 --> 00:06:57,874
constrain the blast radius of any experiment you do. Make sure it only

86
00:06:57,912 --> 00:07:01,398
affects a small piece so that there's not much damage done. You don't lose a

87
00:07:01,404 --> 00:07:05,254
lot of time or a lot of goodwill. And be

88
00:07:05,292 --> 00:07:08,406
loud and public about learning from your experiments, both the good ones and

89
00:07:08,428 --> 00:07:11,446
the bad ones. Let other teams learn from your mistakes,

90
00:07:11,478 --> 00:07:15,178
and let other teams benefit from the things that you've shown that have worked.

91
00:07:15,344 --> 00:07:18,886
Plus, it lets the organization understand that you're

92
00:07:18,918 --> 00:07:22,474
getting to a different type of culture, a generative culture,

93
00:07:22,602 --> 00:07:26,574
where you protect psychological safety. Speaking of which,

94
00:07:26,692 --> 00:07:30,426
the unchanging culture will do anything it takes to get to DevOps.

95
00:07:30,458 --> 00:07:33,774
But we aren't allowed to change our culture. Well, bad news for

96
00:07:33,812 --> 00:07:37,314
you. DevsecOps is a culture, not a set

97
00:07:37,352 --> 00:07:41,026
of tools or practices. Right? And this has to be something that

98
00:07:41,048 --> 00:07:44,194
changes beyond just the team. It can't just be our

99
00:07:44,232 --> 00:07:47,342
team changes the culture, but the culture outside is terrible

100
00:07:47,406 --> 00:07:51,382
or restrictive or it doesn't like what we're doing because

101
00:07:51,436 --> 00:07:54,886
you're not going to get the benefits of DevOps if we restrict all

102
00:07:54,908 --> 00:07:58,918
the changes to only within the team. Now, you're not going to change the entire

103
00:07:59,004 --> 00:08:02,854
organization's culture at once, but maybe you can make some inroads and prepare

104
00:08:02,902 --> 00:08:06,458
the way and let them see that there are ways for the

105
00:08:06,624 --> 00:08:10,326
organizations to start changing because the DevOps team is showing

106
00:08:10,358 --> 00:08:13,866
them how it's working. If you don't manage your culture,

107
00:08:13,898 --> 00:08:17,246
your culture will manage you. Evangelize to other

108
00:08:17,268 --> 00:08:20,382
teams, make them want what our team has, show them how things are working,

109
00:08:20,436 --> 00:08:24,042
how things are going well, and maybe most importantly,

110
00:08:24,106 --> 00:08:27,394
find a champion, someone who's going to keep us from getting into trouble for doing

111
00:08:27,432 --> 00:08:30,786
things differently. They're going to help evangelize our

112
00:08:30,808 --> 00:08:34,306
culture. They're going to help show the rest of the organization how our

113
00:08:34,328 --> 00:08:38,530
culture is changing and how DevOps is helping similarly

114
00:08:38,690 --> 00:08:42,418
unchanging policies. We'll do anything it takes to get to DevOps, but we aren't allowed

115
00:08:42,434 --> 00:08:46,022
to change our policies. Well, existing policies are often

116
00:08:46,076 --> 00:08:49,130
designed around infrequent changes. Monthly,

117
00:08:50,430 --> 00:08:53,740
quarterly, annually, whatever it is. Right.

118
00:08:54,110 --> 00:08:58,060
And again, this needs to happen outside the team. We can't set

119
00:08:58,750 --> 00:09:02,026
policies just within the team and then have to deal with the

120
00:09:02,048 --> 00:09:05,190
rest of the organization's policies. When, as soon as we step out and have to

121
00:09:05,200 --> 00:09:08,830
deal with something that's not completely self contained, we're not going to get the benefits

122
00:09:08,900 --> 00:09:12,078
of DevOps. If we restrict change to only within the team, we're going to

123
00:09:12,084 --> 00:09:15,966
have to start making inroads to the rest of the organization. If there are policies

124
00:09:15,998 --> 00:09:19,826
that are standing in your way and you can't just ignore them, find out

125
00:09:19,848 --> 00:09:23,394
why that policy exists. Use automation in our process to

126
00:09:23,432 --> 00:09:27,506
generate evidence that we're going to meet the intent that we're

127
00:09:27,538 --> 00:09:31,638
going to constrain the risk. We're going to reduce the problems,

128
00:09:31,804 --> 00:09:35,634
right. And show how our process reduces risk via automation

129
00:09:35,682 --> 00:09:38,946
and via the process itself, rather than just somebody blindly

130
00:09:38,978 --> 00:09:42,854
following it for fear of getting caught, or worse,

131
00:09:42,982 --> 00:09:46,794
not following it and hiding the fact that they're not following it and

132
00:09:46,832 --> 00:09:50,390
just trying to get away with it. Too many decision makers.

133
00:09:50,470 --> 00:09:54,350
Every decision means meeting with multiple stakeholders to get consensus.

134
00:09:54,690 --> 00:09:58,206
If multiple people are responsible for a decision to be made, then no

135
00:09:58,228 --> 00:10:01,630
one's actually responsible. Remember the scene from

136
00:10:01,700 --> 00:10:04,510
office space? I have eight different bosses right now,

137
00:10:04,580 --> 00:10:07,586
so that means when I make a mistake, I have eight different people coming by

138
00:10:07,608 --> 00:10:11,614
to tell me about it. That's my only real motivation. It's not to be hassled.

139
00:10:11,742 --> 00:10:15,106
That and the fear of losing my job. But, you know, that will only

140
00:10:15,128 --> 00:10:18,050
make someone work just hard enough not to get fired,

141
00:10:18,210 --> 00:10:21,394
right? This type of too many decision makers,

142
00:10:21,442 --> 00:10:25,960
too many people having to have a say and approve things often goes back

143
00:10:26,330 --> 00:10:29,878
to being afraid to fail. Right? Again.

144
00:10:30,044 --> 00:10:33,626
Find a champion, highlight some of your early wins and make them want to take

145
00:10:33,648 --> 00:10:37,334
credit and responsibility. And that's going to lead you towards a generative

146
00:10:37,382 --> 00:10:41,210
culture where you're protecting psychological safety, where experimentation and learning

147
00:10:41,280 --> 00:10:44,766
is just part of the way you do business. Having too

148
00:10:44,788 --> 00:10:48,286
many metrics, we can't do that or it'll hurt our monthly or

149
00:10:48,308 --> 00:10:51,486
quarterly, our yearly numbers, right. Well,

150
00:10:51,588 --> 00:10:55,090
when a measure becomes a target, it ceases to be a good measure.

151
00:10:56,390 --> 00:11:00,750
Metrics should measure desired

152
00:11:00,830 --> 00:11:04,414
outcomes, right? We shouldn't just be blindly using any metric

153
00:11:04,462 --> 00:11:08,678
that we can find or what's available. And too many metrics in a complex system

154
00:11:08,764 --> 00:11:12,054
leads to management. Whack a mole. What you want to do is pick

155
00:11:12,092 --> 00:11:15,734
a target metric, improve that add process

156
00:11:15,852 --> 00:11:19,126
to protect it, to make sure it's going to stay where we got it

157
00:11:19,148 --> 00:11:22,714
to, and then pick the next metric. And slowly but surely focus on

158
00:11:22,752 --> 00:11:25,946
one metric or a few metrics at a time. Don't be trying

159
00:11:25,968 --> 00:11:29,740
to measure many, many metrics at once. It'll never work.

160
00:11:30,590 --> 00:11:34,590
And the last doom is unrealistic expectations.

161
00:11:34,930 --> 00:11:38,090
All of our problems will disappear as soon as we get to devsecops.

162
00:11:38,170 --> 00:11:41,406
Well, the actual case is DevOps won't make

163
00:11:41,428 --> 00:11:45,134
your problems vanish. In fact, it usually just shines the light on them and makes

164
00:11:45,172 --> 00:11:48,306
them more visible. The reality is we're going to

165
00:11:48,328 --> 00:11:51,890
need more discipline, not less. We're going to fail more often,

166
00:11:52,040 --> 00:11:55,106
not less. We're going to pick what we want to improve. We're going to work

167
00:11:55,128 --> 00:11:57,846
on it till that's better, and then we're going to pick the next thing.

168
00:11:57,948 --> 00:12:01,638
It's a long process. It doesn't magically wave a

169
00:12:01,644 --> 00:12:05,458
wand and fix everything. But if you set realistic expectations,

170
00:12:05,554 --> 00:12:09,450
people will see that you're constantly making progress towards improving.

171
00:12:09,950 --> 00:12:14,246
In summary, the ten ways to doom your DevOps slow

172
00:12:14,278 --> 00:12:18,474
onboarding using the cloud being

173
00:12:18,592 --> 00:12:22,454
agile having change control board change advisory

174
00:12:22,502 --> 00:12:26,634
boards being afraid to fail having an

175
00:12:26,672 --> 00:12:30,170
unchanging culture having unchanging policies

176
00:12:30,510 --> 00:12:32,930
having too many decision maker ers,

177
00:12:33,510 --> 00:12:37,534
watching too many metrics and setting unrealistic

178
00:12:37,582 --> 00:12:41,854
expectations. Please let me know on the conference 42 discord

179
00:12:41,902 --> 00:12:46,574
if you've seen these or other common problems when you've been adopting DevOps.

180
00:12:46,702 --> 00:12:49,570
Also, I'm other devsecops gene on X,

181
00:12:49,640 --> 00:12:52,978
Twitter, YouTube, GitHub, other social media. Reach out and let

182
00:12:52,984 --> 00:12:54,640
me know what you think. Thanks for coming.

