1
00:01:28,610 --> 00:01:31,702
Hello, my name is JJ Asghar, and as you can see

2
00:01:31,756 --> 00:01:35,526
up over there, you can

3
00:01:35,548 --> 00:01:39,366
find me at jgasgar on Twitter or more or less anywhere else.

4
00:01:39,468 --> 00:01:43,390
And awesome@ibm.com. Yes, I really do have that email address,

5
00:01:43,460 --> 00:01:46,734
which is always fun. So you've come here today

6
00:01:46,772 --> 00:01:50,734
to learn about some githubs. I'm just kind of

7
00:01:50,772 --> 00:01:54,602
stepping myself into this world and the things that I finally learned

8
00:01:54,666 --> 00:01:58,366
Andor embraced. Frankly speaking, I'm shocked

9
00:01:58,398 --> 00:02:02,194
it took me this long to get here. I'm very excited about this

10
00:02:02,232 --> 00:02:05,266
talk, and we're going to go over some basic things to make sure we're all

11
00:02:05,288 --> 00:02:08,970
talking about the same stuff, and then we're actually going to play with some Gitops

12
00:02:09,070 --> 00:02:12,440
and two very simple use cases that

13
00:02:13,050 --> 00:02:16,166
as you build off of it, youve be amazed on what you can actually

14
00:02:16,188 --> 00:02:19,942
get done. And it just seems like a natural progression

15
00:02:20,086 --> 00:02:25,078
for all our cloud native lifestyles.

16
00:02:25,174 --> 00:02:27,740
So let me go ahead and flip my screen.

17
00:02:29,790 --> 00:02:32,240
There we go. Youve should be able to see IBM there.

18
00:02:32,770 --> 00:02:36,106
Yes, as I said earlier, I do work for IBM.

19
00:02:36,218 --> 00:02:39,866
And here we go. Taking a step back and leveraging

20
00:02:39,898 --> 00:02:43,730
Gitops to wrangle your clusters and projects. And again,

21
00:02:43,880 --> 00:02:47,860
JJ, developer advocate. So please,

22
00:02:48,550 --> 00:02:52,174
if you have any questions or thoughts, never hesitate to reach out directly

23
00:02:52,222 --> 00:02:56,214
to me. My life is to be a personable nerd to

24
00:02:56,252 --> 00:03:00,200
help you out here. All right,

25
00:03:00,730 --> 00:03:02,470
so let's talk about the introduction.

26
00:03:04,890 --> 00:03:08,620
Basically, if you're at this talk, you've probably made

27
00:03:09,790 --> 00:03:13,338
your adventure into cloud native. You probably have a kubernetes or a couple

28
00:03:13,344 --> 00:03:16,358
of kubernetes clusters or maybe even some openshift clusters,

29
00:03:16,534 --> 00:03:20,002
and you have this ability

30
00:03:20,086 --> 00:03:23,182
to deploy stuff. You understand what pods are,

31
00:03:23,236 --> 00:03:26,654
you understand what the advantage of

32
00:03:26,852 --> 00:03:30,880
cloud native is, and you're doing well.

33
00:03:31,730 --> 00:03:35,438
But this git ops thing keeps popping up in a lot of different conversations,

34
00:03:35,614 --> 00:03:38,994
and you probably want to learn and or leverage it,

35
00:03:39,112 --> 00:03:43,054
and that's why you're here. I'm here because I'm

36
00:03:43,102 --> 00:03:46,966
slow but surely taking over more and more stories inside of

37
00:03:46,988 --> 00:03:50,566
IBM around Gitops. It's becoming more and more a

38
00:03:50,588 --> 00:03:54,502
de facto way to do work with our cloud

39
00:03:54,556 --> 00:03:58,178
native space, and it really is just a natural progression.

40
00:03:58,274 --> 00:04:01,980
And I'm really hoping this talk kind of brings that to you.

41
00:04:05,150 --> 00:04:08,218
The natural thing you need to start talking to after about understanding this, you need

42
00:04:08,224 --> 00:04:11,742
to start talking about CI and CD. If you've never seen these two terms

43
00:04:11,796 --> 00:04:15,550
before, I'm shocked.

44
00:04:15,890 --> 00:04:19,562
It's kind of can industry standard now, but CI

45
00:04:19,626 --> 00:04:23,062
stands for continuous integration and CD

46
00:04:23,226 --> 00:04:25,250
stands for continuous delivery.

47
00:04:26,390 --> 00:04:30,610
CI is pretty much industry standard now across the board.

48
00:04:30,760 --> 00:04:34,674
If youve writing some software somewhere, you probably have some level

49
00:04:34,712 --> 00:04:38,006
of a CI pipeline that constantly either builds it or

50
00:04:38,028 --> 00:04:41,362
runs your unit tests or runs. Youve integration tests

51
00:04:41,426 --> 00:04:44,614
or things like mean by

52
00:04:44,652 --> 00:04:48,040
default things like GitHub actions and

53
00:04:48,730 --> 00:04:52,554
Travis and Circle CI. They're very

54
00:04:52,752 --> 00:04:56,154
low overhead to get running, and it gives you a peace of mind

55
00:04:56,272 --> 00:05:00,060
that your code is doing what you need to do. As I said,

56
00:05:00,370 --> 00:05:02,894
it's pretty much the standard. Now,

57
00:05:03,092 --> 00:05:06,270
CD, on the other hand, which is continuous delivery.

58
00:05:06,770 --> 00:05:11,390
As much as people want to say it's CI and CD in one breath,

59
00:05:12,470 --> 00:05:16,290
CD isn't industry standard. Continuous delivery

60
00:05:16,870 --> 00:05:18,930
is a rather robust,

61
00:05:19,590 --> 00:05:23,234
mature process that you know, you can trust

62
00:05:23,272 --> 00:05:27,314
your code to continually get deployed. There's philosophies

63
00:05:27,362 --> 00:05:31,110
out there that the main branch should always be deployable.

64
00:05:31,450 --> 00:05:34,966
There's also a lot of different philosophies, like the production branch should

65
00:05:34,988 --> 00:05:38,506
always be deployable, things like that. And that type of

66
00:05:38,528 --> 00:05:42,620
gating on there actually kind of goes in the face of

67
00:05:43,710 --> 00:05:47,226
CD, where your application should just be

68
00:05:47,248 --> 00:05:51,354
deployable. I guess arguably the production branch or main branch

69
00:05:51,482 --> 00:05:54,574
you target and then it's always deployable, and then you can always

70
00:05:54,612 --> 00:05:58,094
make sure it works. But the point being is that when

71
00:05:58,132 --> 00:06:01,120
CI finishes, CD happens.

72
00:06:01,730 --> 00:06:05,626
So if everything's green, it just goes out there. So as soon as you merge

73
00:06:05,658 --> 00:06:08,962
it to whatever deploy branch you have, which should be main,

74
00:06:09,016 --> 00:06:12,274
in my personal opinion. When you hit that big green button,

75
00:06:12,392 --> 00:06:15,794
the tests kick off one last time to verify everything hasn't changed.

76
00:06:15,842 --> 00:06:19,670
Nothing, no regressions. And then the theory was

77
00:06:19,740 --> 00:06:23,334
is to deploy it. And that's where we kind of come into

78
00:06:23,372 --> 00:06:27,174
this conversation around Githubs. Gitops is basically

79
00:06:27,292 --> 00:06:31,066
the other half of CI. It is the

80
00:06:31,088 --> 00:06:34,540
CD portion of it. So let's bring this over here.

81
00:06:35,390 --> 00:06:39,238
So what is Gitops? Simply said, it's a way to leverage

82
00:06:39,334 --> 00:06:43,162
the typical git workflow in configuration of one or many kubernetes.

83
00:06:43,226 --> 00:06:46,702
Clusters can also be openshift. In the applications inside

84
00:06:46,756 --> 00:06:50,574
of them. It leverages something called a pull

85
00:06:50,612 --> 00:06:54,242
mechanism instead of a push, which is very important to talk about.

86
00:06:54,296 --> 00:06:57,506
We'll talk about more in a minute. You can

87
00:06:57,528 --> 00:07:01,634
deploy something from like GitHub actions or Jenkins, or even

88
00:07:01,752 --> 00:07:05,682
Openshift webhooks. The biggest pain

89
00:07:05,736 --> 00:07:09,062
point that GitHub takes away is that now you have

90
00:07:09,116 --> 00:07:13,000
a true history of your deployment and how things happen.

91
00:07:14,090 --> 00:07:19,014
There are real problems with not leveraging

92
00:07:19,062 --> 00:07:23,500
Gitops completely. This is more or less a whole or nothing process.

93
00:07:23,950 --> 00:07:27,418
You can't kind of just do a Gitops workflow right.

94
00:07:27,584 --> 00:07:30,886
It doesn't work that way. When you decide to

95
00:07:30,928 --> 00:07:34,766
go down the Gitops path, you are making a change to your

96
00:07:34,788 --> 00:07:38,720
deployment process and your deployment mechanisms that will be

97
00:07:39,490 --> 00:07:43,146
complete whole hog. One reason why we like it on the openshift

98
00:07:43,178 --> 00:07:47,986
side so much is because we do pick the best of breed of things from

99
00:07:48,008 --> 00:07:51,054
the red hat standpoint. And the Gitops workflow

100
00:07:51,102 --> 00:07:54,354
actually fits really well in that space, which is really

101
00:07:54,392 --> 00:07:57,894
nice. So why

102
00:07:57,932 --> 00:08:01,640
should you care, right? As long as our app is up and running,

103
00:08:03,530 --> 00:08:05,990
why should I bother with all this overhead?

104
00:08:06,650 --> 00:08:10,954
Well, if you have one clusters, okay, maybe this

105
00:08:10,992 --> 00:08:14,214
isn't worth it, right? But as soon as you start building multiple

106
00:08:14,262 --> 00:08:18,330
clusters, you start building a dev cluster, building a QA cluster,

107
00:08:19,150 --> 00:08:20,640
or for that matter,

108
00:08:22,370 --> 00:08:25,840
you have a process where you need features out quickly.

109
00:08:26,370 --> 00:08:29,630
The idea of doing manual deployments is tough.

110
00:08:30,930 --> 00:08:34,522
Obviously youve moved to the cloud native space and now you have multiple kubernetes

111
00:08:34,586 --> 00:08:37,966
or Openshift clusters. It could

112
00:08:37,988 --> 00:08:42,014
even be spread around various clouds. Right. Like you're not all on IBM

113
00:08:42,062 --> 00:08:44,420
cloud, which you should be. I'm just saying.

114
00:08:45,370 --> 00:08:48,600
Kidding. I work for IBM. Of course I'm going to say that.

115
00:08:49,690 --> 00:08:53,138
But it's got unruly. You have clusters,

116
00:08:53,234 --> 00:08:56,514
you have your dev environment Andor Azure your production,

117
00:08:56,562 --> 00:09:00,566
and IBM Cloud Andor for

118
00:09:00,588 --> 00:09:04,358
some reason you have a bunch of s three buckets. I dont know. It's unruly.

119
00:09:04,454 --> 00:09:08,426
It's frustrating. And I'm here to tell you not

120
00:09:08,448 --> 00:09:11,966
to worry. One of the beauties of Gitops is the

121
00:09:11,988 --> 00:09:16,026
ability to maintain all these clusters. Because what is a Kubernetes cluster

122
00:09:16,058 --> 00:09:19,306
but a bunch of yaml and leveraging Gitops to edit

123
00:09:19,338 --> 00:09:22,880
that Yaml Andor whatnot allows for

124
00:09:23,510 --> 00:09:26,130
some way to wrangle around clusters.

125
00:09:27,270 --> 00:09:30,866
IBM here to tell you and give you these tools to help

126
00:09:30,968 --> 00:09:34,482
make this happen, to help make this happen

127
00:09:34,536 --> 00:09:37,846
so you can focus on building for the business instead of

128
00:09:37,868 --> 00:09:41,254
fighting your infrastructure. You've already spent so much time Andor effort learning

129
00:09:41,292 --> 00:09:44,390
how to get your application inside of kubernetes.

130
00:09:44,810 --> 00:09:48,194
Now you got to fight maintaining the infrastructure

131
00:09:48,242 --> 00:09:51,978
all over again. And Gitops kind of takes some of that pain away

132
00:09:52,144 --> 00:09:56,118
and in turn gives you that CD that we were talking about earlier

133
00:09:56,214 --> 00:09:59,820
that you desperately should be moving towards.

134
00:10:01,250 --> 00:10:04,874
Leveraging Gitops and the principles around is a mashup of traditional

135
00:10:04,922 --> 00:10:08,346
infrastructure management andor software development

136
00:10:08,378 --> 00:10:12,570
practices that your developers have been using for almost decades now.

137
00:10:12,740 --> 00:10:16,242
And it gives you an audible, accountable, and enforceable way to

138
00:10:16,376 --> 00:10:19,666
interface with all of your Kubernetes fleets, which is

139
00:10:19,688 --> 00:10:20,420
really important.

140
00:10:22,310 --> 00:10:26,002
So from what I've been learning

141
00:10:26,056 --> 00:10:29,446
about Gitops and all that. I genuinely believe this is going to become the de

142
00:10:29,468 --> 00:10:32,706
facto way that we are going to maintain

143
00:10:32,898 --> 00:10:36,166
more than one cluster. Okay. Arguably youve can

144
00:10:36,188 --> 00:10:39,498
maintain one, as I said earlier, you can maintain one cluster with this if you

145
00:10:39,504 --> 00:10:42,922
really want, but for me, this really

146
00:10:42,976 --> 00:10:46,380
feels like what we are going to be doing moving forward.

147
00:10:47,150 --> 00:10:50,842
So let's talk about a typical git workflow,

148
00:10:50,906 --> 00:10:54,270
right? Like I mentioned about leveraging into main earlier,

149
00:10:56,130 --> 00:11:00,126
this is a very simple example, right? And of

150
00:11:00,148 --> 00:11:03,790
course you're going to have a lot of different arguments around all the different stuff,

151
00:11:03,860 --> 00:11:07,474
but let's just stay with this very simple, very simple

152
00:11:07,512 --> 00:11:11,154
workflow that I'm about to show as a de facto way to

153
00:11:11,192 --> 00:11:14,814
use git. Okay? I mean, if you want to talk about git

154
00:11:14,862 --> 00:11:18,630
flow and other weird ways of doing it, sure, fine.

155
00:11:18,700 --> 00:11:22,146
You can absolutely implement those inside of the space, but I'm

156
00:11:22,178 --> 00:11:25,334
looking for just showing people how to get started so

157
00:11:25,372 --> 00:11:27,830
they can mold it to their normal workflow.

158
00:11:28,410 --> 00:11:31,594
So this is it, right? You've got your main

159
00:11:31,632 --> 00:11:35,222
branch, where that's all your code, and then you have a feature

160
00:11:35,286 --> 00:11:39,082
branch or a bugfish branch that branches off,

161
00:11:39,136 --> 00:11:43,150
does the fixes, and then you merge it back into main. That's it,

162
00:11:43,220 --> 00:11:47,054
right? It's nothing too crazy. You work in isolation, which is

163
00:11:47,092 --> 00:11:50,974
really nice. Your feature branch and youve bugfish branch are off

164
00:11:51,012 --> 00:11:54,578
on bits own branch, as you can see from here.

165
00:11:54,744 --> 00:11:58,846
And that's important to know. So that means that main is always deployable,

166
00:11:58,958 --> 00:12:02,446
right? Like again, CD continuous deployment.

167
00:12:02,558 --> 00:12:06,326
So this simple branch, right, it's a simple branching mechanism, is all

168
00:12:06,348 --> 00:12:10,870
you need to do to start with to leverage Gitops in your normal workflow.

169
00:12:13,210 --> 00:12:17,094
So there's multiple different ways of making

170
00:12:17,132 --> 00:12:20,870
this happen. And the first one we need to talk about is pull versus push.

171
00:12:21,030 --> 00:12:24,886
So I mentioned earlier that Gitops is a pull based mechanism

172
00:12:24,998 --> 00:12:28,794
instead of a push based mechanism. So when you run

173
00:12:28,832 --> 00:12:32,366
your CI pipeline and you push out your

174
00:12:32,388 --> 00:12:35,646
code to your main branch, and now it does all

175
00:12:35,668 --> 00:12:37,070
the tests and whatnot,

176
00:12:38,370 --> 00:12:42,750
traditionally you would push your deployment out to the new clusters

177
00:12:45,990 --> 00:12:50,066
to push it out to your

178
00:12:50,088 --> 00:12:54,082
new servers or whatever, right? Well, Gitops comes

179
00:12:54,216 --> 00:12:58,600
and flips the narrative. What they do now is pull.

180
00:12:59,050 --> 00:13:02,294
So constantly there's a little agent that sits on side

181
00:13:02,332 --> 00:13:05,782
of your cluster pulling against

182
00:13:05,916 --> 00:13:09,100
wherever youve Git repo is looking for changes.

183
00:13:09,550 --> 00:13:12,826
You can obviously change how quickly and how slow you want to do it,

184
00:13:12,928 --> 00:13:16,906
and that's fine. But the idea is

185
00:13:16,928 --> 00:13:20,682
that you pull into your cluster any changes,

186
00:13:20,816 --> 00:13:25,610
which means your application needs to be aware

187
00:13:25,690 --> 00:13:29,166
of that it could be updated at any time, which can be a little

188
00:13:29,188 --> 00:13:32,638
bit level of, could be a little bit of

189
00:13:32,804 --> 00:13:36,174
an engineering problem. I mean, that's the reason why you should run things through QA

190
00:13:36,222 --> 00:13:40,542
and test and all. But the idea is that it pulls constantly,

191
00:13:40,686 --> 00:13:44,050
which actually opens up some really interesting conversations because

192
00:13:44,120 --> 00:13:47,554
that means now if you have can air gapped environment, you can

193
00:13:47,592 --> 00:13:51,074
have this agent running on an air gapped cluster somewhere

194
00:13:51,202 --> 00:13:54,978
that pulls off of a cache that's been security scanned, for instance,

195
00:13:55,074 --> 00:13:58,694
which is really neat. So instead of you just pushing your code and it pushes

196
00:13:58,742 --> 00:14:02,058
out to that environment, now you can cache the

197
00:14:02,064 --> 00:14:05,786
things and verify that it's the stuff you expect it to be. This also gives

198
00:14:05,808 --> 00:14:08,540
the ability to pull in a,

199
00:14:11,630 --> 00:14:15,086
you don't have to push everything off at the same time. You pull things at

200
00:14:15,108 --> 00:14:18,702
a rate that you feel comfortable with, which allows for better,

201
00:14:18,756 --> 00:14:21,898
like, you know, uptime and whatnot in the long term,

202
00:14:22,074 --> 00:14:24,990
because youve know, if you pull Andor something breaks,

203
00:14:25,490 --> 00:14:28,802
youve can have the intelligence in there to make sure it doesn't change it.

204
00:14:28,856 --> 00:14:32,702
But if you push on top of it, pushing on top of it, unless youve

205
00:14:32,766 --> 00:14:36,646
made some really interesting engineering choices, you could

206
00:14:36,668 --> 00:14:40,520
take your application down. So it's important to recognize these things.

207
00:14:44,170 --> 00:14:47,810
So let's talk about the three major players

208
00:14:47,890 --> 00:14:51,494
in the space, and one's Argo CD, the other one's Jenkins

209
00:14:51,542 --> 00:14:55,606
X. And frankly speaking, the granddaddy

210
00:14:55,638 --> 00:14:58,778
of them all is something called Flux CD. Argo is the

211
00:14:58,784 --> 00:15:01,070
first one, Jenkins X, and obviously flux.

212
00:15:02,050 --> 00:15:05,754
So flux CD is CLI

213
00:15:05,802 --> 00:15:09,614
based and is very lightweight and does

214
00:15:09,652 --> 00:15:12,854
exactly what you want it to do. It is unbelievably

215
00:15:12,922 --> 00:15:15,986
powerful. And IBM very, very impressed with the work it

216
00:15:16,008 --> 00:15:19,874
does. You have Jenkins X, which is kind of the next

217
00:15:19,912 --> 00:15:21,890
generation of the Jenkins ecosystem,

218
00:15:22,710 --> 00:15:26,094
and it's very impressive, but it's

219
00:15:26,142 --> 00:15:29,942
very prescriptive, or at least the last time I played with it,

220
00:15:29,996 --> 00:15:32,520
it was expecting some very specific things.

221
00:15:33,210 --> 00:15:35,922
And if you're already in the Jenkins ecosystem,

222
00:15:36,066 --> 00:15:39,222
Jenkins actually is a natural progression and more power

223
00:15:39,276 --> 00:15:42,922
to you. The one that kind of grabbed me and really made

224
00:15:42,976 --> 00:15:46,310
me understand the beauty of Gitops is Argo.

225
00:15:46,470 --> 00:15:50,614
And in the rest of this talk, I'm going to be actually focusing this conversation

226
00:15:50,662 --> 00:15:54,286
around Argo CD because it really did just

227
00:15:54,308 --> 00:15:57,854
kind of make things make sense to me, and that's important to say.

228
00:15:57,972 --> 00:16:01,118
So let's go ahead and install one,

229
00:16:01,284 --> 00:16:04,290
and I'm going to go ahead and bring this small.

230
00:16:04,440 --> 00:16:07,140
No, that's not what I wanted.

231
00:16:07,990 --> 00:16:11,300
Let's see here. We're going to make this small,

232
00:16:12,470 --> 00:16:16,120
this over here, and then bring this over here,

233
00:16:17,530 --> 00:16:20,774
and then probably make this a little bit bigger so youve all

234
00:16:20,812 --> 00:16:21,640
can see.

235
00:16:25,130 --> 00:16:29,230
And then if I do cubectl

236
00:16:29,410 --> 00:16:32,678
get ns.

237
00:16:32,774 --> 00:16:36,986
So as we see here, I'm on an openshift cluster and

238
00:16:37,008 --> 00:16:40,266
this should work. There we go. As you can

239
00:16:40,288 --> 00:16:43,606
see, and I built an upset cluster about 17 days ago.

240
00:16:43,728 --> 00:16:47,802
Got a bunch of projects in here, but if you look here, kget pods,

241
00:16:47,866 --> 00:16:51,422
I'm in the default namespace and there's nothing in there, which is exactly

242
00:16:51,476 --> 00:16:52,480
what we wanted.

243
00:16:54,310 --> 00:16:58,420
Where is my notes? So the first thing first is

244
00:16:59,430 --> 00:17:01,060
I need to.

245
00:17:03,910 --> 00:17:04,900
What the.

246
00:17:07,750 --> 00:17:11,240
So there are some really nice straightforward ways to install

247
00:17:15,690 --> 00:17:19,926
Argo CD. And right here is

248
00:17:20,108 --> 00:17:22,938
I've actually created a nice little markdown file. But the first thing we're going to

249
00:17:22,944 --> 00:17:26,374
do here is we're going to create a namespace,

250
00:17:26,422 --> 00:17:29,546
Argo CD namespace, and then I'm just going to pull it directly down from

251
00:17:29,568 --> 00:17:33,278
the stable branch and kubectl apply it. So there we go.

252
00:17:33,444 --> 00:17:37,150
So you see, we creates the namespace and we threw in some custom resources,

253
00:17:37,650 --> 00:17:41,246
which is nice. And that's actually all

254
00:17:41,268 --> 00:17:44,766
you need to do. Argo CD is just two commands,

255
00:17:44,798 --> 00:17:48,622
which is always fun. So if I do kgetpods

256
00:17:48,686 --> 00:17:51,010
and Argocd,

257
00:17:52,150 --> 00:17:55,658
as you see, we're creating our containers. I did not pre bake

258
00:17:55,694 --> 00:17:59,222
this, I wanted to show this live, which is important. But that's actually

259
00:17:59,276 --> 00:18:02,534
it, that's actually all the installation, which is

260
00:18:02,572 --> 00:18:05,654
pretty nice. So let's see

261
00:18:05,692 --> 00:18:06,280
here,

262
00:18:09,690 --> 00:18:13,142
bring this back over here. And as that is

263
00:18:13,196 --> 00:18:17,330
going. So let's talk about some infrastructure management.

264
00:18:17,410 --> 00:18:22,766
So the first thing I wanted to talk about obviously has the way

265
00:18:22,788 --> 00:18:26,398
to deal with a bunch of fleets. So as I've been seeing with different customers

266
00:18:26,484 --> 00:18:30,286
out there, as much as I

267
00:18:30,308 --> 00:18:34,274
tried to tell people have one, big clusters use

268
00:18:34,312 --> 00:18:36,994
namespaces and projects to split stuff up.

269
00:18:37,192 --> 00:18:41,038
Frankly speaking, people didn't adopt it right. They started spinning

270
00:18:41,054 --> 00:18:45,300
up multiple clusters for dev, QA and

271
00:18:45,770 --> 00:18:49,526
prod or whatever. So that's actually where Argo CD comes

272
00:18:49,548 --> 00:18:53,730
into play really nicely. You can leverage Argo CD

273
00:18:53,810 --> 00:18:57,894
to maintain some level of consistency through all

274
00:18:57,932 --> 00:19:01,510
of your different Openshift clusters, or Kubernetes clusters.

275
00:19:01,590 --> 00:19:04,218
I'm going to be showing Openshift because it's just a little bit easier with the

276
00:19:04,224 --> 00:19:08,122
GUI, but all these things work on kubernetes just fine

277
00:19:08,176 --> 00:19:11,166
too. So this right here,

278
00:19:11,268 --> 00:19:12,640
if you can read it,

279
00:19:14,610 --> 00:19:17,902
is basically creating something called a menu link inside

280
00:19:17,956 --> 00:19:21,066
of our console on our Openshift cluster.

281
00:19:21,258 --> 00:19:23,280
I'm going to show here in just a second,

282
00:19:24,050 --> 00:19:27,506
plugging it in and making it happen. But the idea is, let's say

283
00:19:27,528 --> 00:19:30,626
for instance, you wanted to change, I don't know,

284
00:19:30,648 --> 00:19:32,980
a logo everywhere. Or for that matter,

285
00:19:34,230 --> 00:19:38,086
you wanted to add a link to Google, to every single openshift cluster. If you

286
00:19:38,108 --> 00:19:43,030
bring, take a look here, just so I'm completely transparent,

287
00:19:43,770 --> 00:19:47,494
here's an openshift cluster here. And you

288
00:19:47,532 --> 00:19:50,838
see here, there's this nice little drop down up here. There's this

289
00:19:50,924 --> 00:19:54,986
manager managed cluster right here. The idea is to add a link to Google,

290
00:19:55,088 --> 00:19:59,194
right? It's not great, it's not a great example, but the idea is

291
00:19:59,312 --> 00:20:03,050
now I can shotgun this across every single cluster.

292
00:20:03,210 --> 00:20:06,906
You have an internal website that you all need to add for like privacy,

293
00:20:07,018 --> 00:20:10,414
I don't know, whatever you imagine it. So now every single

294
00:20:10,452 --> 00:20:14,014
cluster that's running Argo CD and I add this little

295
00:20:14,052 --> 00:20:17,778
configuration to will now get that link, which is pretty nice.

296
00:20:17,944 --> 00:20:21,394
So if I come back over here and see that

297
00:20:21,432 --> 00:20:24,850
Argo CD is up, there we go, we're running,

298
00:20:24,920 --> 00:20:28,710
everything's great. So the interesting part about it

299
00:20:28,780 --> 00:20:32,726
with Argo CD is that you

300
00:20:32,748 --> 00:20:35,974
don't have to expose it to the Internet, right? It can just sit

301
00:20:36,012 --> 00:20:39,722
on the cluster by itself. So one of those times

302
00:20:39,776 --> 00:20:43,274
you might want to actually do it is you

303
00:20:43,312 --> 00:20:47,306
go ahead and create a port forward here. If I bring this back over and

304
00:20:47,328 --> 00:20:53,740
then I go to 127

305
00:20:55,310 --> 00:20:58,926
80, 80, there we go. It's like,

306
00:20:58,948 --> 00:21:02,398
hey, youve not secure, blah, blah blah. And as

307
00:21:02,404 --> 00:21:06,542
youve can see here, here's Argo CD, right, like I did port forward

308
00:21:06,596 --> 00:21:09,998
to it. It's sitting there. IBM not exposed to the real Internet.

309
00:21:10,094 --> 00:21:14,078
It's nice and secure, which is always good. But before I go any farther,

310
00:21:14,174 --> 00:21:17,510
IBM going to need that password. So I'm going to go ahead and

311
00:21:17,580 --> 00:21:22,118
grab this and

312
00:21:22,204 --> 00:21:25,986
there it is. Don't worry. You do not worry

313
00:21:26,018 --> 00:21:28,966
about stealing this from me because I will be blowing up this cluster after the

314
00:21:28,988 --> 00:21:32,394
fact. But if I go to admin here and then pop

315
00:21:32,432 --> 00:21:36,262
that password in, and there we go, we got argo CD

316
00:21:36,326 --> 00:21:39,986
sitting in here running, and by default it has cluster admin rights,

317
00:21:40,038 --> 00:21:43,840
so it can create namespaces, andor do things and whatnot, which is always nice.

318
00:21:45,090 --> 00:21:48,670
So I have this Gitops tutorial repository,

319
00:21:49,730 --> 00:21:53,038
which is important to show this is what

320
00:21:53,044 --> 00:21:56,366
we're actually going to be linking up against. I actually have my installation instructions

321
00:21:56,398 --> 00:21:59,154
in here too, so you're more than welcome to play with this in the future

322
00:21:59,192 --> 00:22:03,314
if you like. If you go into the OS thing here,

323
00:22:03,512 --> 00:22:06,760
and then if I go into

324
00:22:07,610 --> 00:22:11,254
tenants. And then here's my link to google. Here is

325
00:22:11,292 --> 00:22:14,614
my customization file which is if you need that, know what that is. But here

326
00:22:14,652 --> 00:22:18,118
is the actual yaml which is kind of

327
00:22:18,124 --> 00:22:21,740
nice. I don't know if you can read that but hopefully youve can.

328
00:22:22,910 --> 00:22:26,140
So if I go ahead and bring this up over here,

329
00:22:26,510 --> 00:22:28,586
I can go ahead and just create a new app here. Now you can do

330
00:22:28,608 --> 00:22:32,414
this through multiple different ways. I'm just going to do it through the GUI because

331
00:22:32,532 --> 00:22:35,840
it's nice and easy. So I'm going to do link to

332
00:22:36,210 --> 00:22:39,486
google and then my

333
00:22:39,508 --> 00:22:42,882
sync policies, I want to have it do automatic so it's constantly building against

334
00:22:42,936 --> 00:22:47,140
it. And then the source repository is

335
00:22:48,390 --> 00:22:52,178
this whole thing here. If IBM going to go ahead and go ahead and here

336
00:22:52,344 --> 00:22:56,146
copy this and then you can actually change

337
00:22:56,168 --> 00:22:59,350
it to whatever revision you want which is nice.

338
00:22:59,500 --> 00:23:03,766
And did I erase that? All that oops link to

339
00:23:03,868 --> 00:23:07,350
google. I want this to be automatic.

340
00:23:08,010 --> 00:23:11,254
It can actually self heal which is nice too. That's important to recognize.

341
00:23:11,302 --> 00:23:15,354
So if something goes funky you can always try to do it. And then

342
00:23:15,472 --> 00:23:18,826
grab that there and then the path and

343
00:23:18,848 --> 00:23:22,720
then I'm going to go directly to here which is

344
00:23:23,330 --> 00:23:26,974
OS tennis main copy. Put that

345
00:23:27,012 --> 00:23:30,720
in there and then

346
00:23:31,490 --> 00:23:35,578
the cluster URL, you can actually have argo

347
00:23:35,594 --> 00:23:39,154
CD control a bunch of remote clusters if you wanted to, which is

348
00:23:39,192 --> 00:23:42,882
neat too. But we're just going to do this for the local one

349
00:23:43,016 --> 00:23:47,622
and we're going to go ahead and do this in the

350
00:23:47,676 --> 00:23:52,134
default namespace and then that

351
00:23:52,172 --> 00:23:56,230
should be it. So let's go ahead and create default.

352
00:23:56,570 --> 00:23:59,834
And there we go. We go ahead and create it. And if I've got

353
00:23:59,872 --> 00:24:04,060
my notes correct, this should

354
00:24:06,590 --> 00:24:08,060
make it happen.

355
00:24:12,850 --> 00:24:18,142
The path needs to be absolutely create.

356
00:24:18,196 --> 00:24:19,280
How about that one?

357
00:24:23,970 --> 00:24:25,600
Maybe. Let's see.

358
00:24:35,030 --> 00:24:39,014
This did go faster in my previous testing, so I'm so

359
00:24:39,052 --> 00:24:41,320
sorry this is taking so long.

360
00:24:46,010 --> 00:24:47,160
One more time.

361
00:24:54,750 --> 00:24:57,994
So then I believe by default this checks every five

362
00:24:58,032 --> 00:25:01,838
minutes, but we'll see. And there we go. So now it looks and

363
00:25:01,844 --> 00:25:05,086
then it sees this and it's in cluster. And then what we're going to do

364
00:25:05,108 --> 00:25:08,370
is go ahead and hit that sync button. Synchronize.

365
00:25:10,150 --> 00:25:13,694
There we go. As you can see immediately it said it's

366
00:25:13,822 --> 00:25:17,620
out of sync. So it's figuring that out. It synced it.

367
00:25:17,990 --> 00:25:21,240
And then if I've got this right,

368
00:25:22,730 --> 00:25:27,542
we should be able to see okay,

369
00:25:27,596 --> 00:25:31,726
that's synced. So then if I come back over to our cluster

370
00:25:31,858 --> 00:25:34,540
here and I refresh this page.

371
00:25:38,680 --> 00:25:42,304
There we go. We got our link to google. Youve see that? Pretty neat.

372
00:25:42,432 --> 00:25:46,500
Cool. So if I wanted to change this all of a sudden.

373
00:25:49,100 --> 00:25:52,824
Hang on. The idea is I could be able to change this

374
00:25:52,862 --> 00:25:56,568
to whatever I need it to be. So if I go back over here

375
00:25:56,654 --> 00:25:59,820
to this link copy,

376
00:26:00,640 --> 00:26:04,316
throw it in here, and then go

377
00:26:04,338 --> 00:26:08,030
back into os, and then tenants link to google

378
00:26:08,640 --> 00:26:12,940
and change this to bing, for instance, because I'm

379
00:26:13,620 --> 00:26:16,960
crazy or whatever, I commit that

380
00:26:17,110 --> 00:26:19,776
again, I should have created another branch, do all that stuff, but you get the

381
00:26:19,798 --> 00:26:23,388
point. And now if I go ahead and say,

382
00:26:23,494 --> 00:26:27,110
sync this one, and then I synchronize again

383
00:26:27,880 --> 00:26:31,670
and it'll say it's out of sync here in a second.

384
00:26:36,160 --> 00:26:37,340
Last sync.

385
00:26:39,360 --> 00:26:42,316
There we go. So it's out of sync. It recognized. Hey, it's out of sync.

386
00:26:42,338 --> 00:26:45,328
Now, this does self heal. So if I had a bunch of clusters, I wouldn't

387
00:26:45,334 --> 00:26:48,864
have to synchronize every single one of them. But the idea is that, right?

388
00:26:48,982 --> 00:26:52,244
And now we should see this

389
00:26:52,282 --> 00:26:56,420
change here in a second refresh

390
00:26:59,240 --> 00:27:02,712
maybe. There we go. So now

391
00:27:02,766 --> 00:27:06,360
if I come back over to my openshift cluster refresh,

392
00:27:07,740 --> 00:27:10,170
and if I click on this one and link to google,

393
00:27:11,260 --> 00:27:14,090
there I am. At mean,

394
00:27:15,340 --> 00:27:19,020
point taken. It's not super crazy, but the idea

395
00:27:19,090 --> 00:27:22,476
is that now I have my configuration inside of

396
00:27:22,498 --> 00:27:26,552
my GitHub repository, which could be any git repository,

397
00:27:26,616 --> 00:27:29,548
and be able to change that now if I have enough time, which I don't

398
00:27:29,564 --> 00:27:31,920
think I do, unfortunately,

399
00:27:33,700 --> 00:27:37,212
I wanted to show off the ability

400
00:27:37,276 --> 00:27:41,228
to do a simple application here, which in that same repository I

401
00:27:41,254 --> 00:27:44,724
can easily add. And this little simple python app,

402
00:27:44,842 --> 00:27:48,836
as you can see, is so much more advanced. But it's all in there too,

403
00:27:49,018 --> 00:27:53,580
where you can play around and sync

404
00:27:53,600 --> 00:27:57,076
it all in, and then you can just make a small change to the flask

405
00:27:57,108 --> 00:27:59,544
app or the deployment or whatever,

406
00:27:59,742 --> 00:28:03,224
and then it

407
00:28:03,262 --> 00:28:06,732
actually federates throughout the whole thing. That moment that you see everything

408
00:28:06,786 --> 00:28:10,524
go from out of sync and then back to sync all of a sudden makes

409
00:28:10,722 --> 00:28:14,110
Argo CD makes so much more sense. It really truly does.

410
00:28:15,920 --> 00:28:19,152
So I'm coming right up to 30 minutes,

411
00:28:19,286 --> 00:28:23,104
or actually 26 minutes. So let's just talk about a conclusion real

412
00:28:23,142 --> 00:28:27,170
fast. I genuinely believe this to be

413
00:28:27,620 --> 00:28:31,508
the next generation of how we're going to maintain our

414
00:28:31,594 --> 00:28:34,996
Openshift or Kubernetes clusters. Fleets and

415
00:28:35,018 --> 00:28:39,588
fleets of clusters out there need

416
00:28:39,674 --> 00:28:43,270
consistency. If I learned anything from the configuration management space,

417
00:28:44,520 --> 00:28:48,532
which was when you spin up a bunch of EC, two instances or vms

418
00:28:48,596 --> 00:28:52,276
or whatever, you need to make sure that they all have the same version

419
00:28:52,388 --> 00:28:56,136
of OpensSL or whatever on top of it well, in the

420
00:28:56,158 --> 00:29:00,180
Kubernetes space and Openshift space, you're going to

421
00:29:00,190 --> 00:29:03,592
have a bunch of devs touching a bunch of different clusters,

422
00:29:03,736 --> 00:29:07,084
and they're going to want the same interface and know that the same stuff is

423
00:29:07,122 --> 00:29:10,796
there on each one. And Gitops

424
00:29:10,828 --> 00:29:15,040
is just going to do that for us as administrators

425
00:29:15,460 --> 00:29:19,952
has people who maintain the infrastructure for

426
00:29:20,006 --> 00:29:24,048
your cloud native users. It's just a natural progression.

427
00:29:24,224 --> 00:29:27,476
People do say that Gitops is DevOps two or

428
00:29:27,498 --> 00:29:29,430
3.0 or whatever you want to call it.

429
00:29:31,560 --> 00:29:33,320
I think that's a little bits unfair.

430
00:29:35,180 --> 00:29:38,856
I think Gitops is a natural progression, but not really

431
00:29:38,958 --> 00:29:40,680
another version.

432
00:29:43,420 --> 00:29:46,476
It's got some strengths to it, and I believe it's going to be the next

433
00:29:46,498 --> 00:29:50,492
one. But DevOps is still encompassing so much more than

434
00:29:50,546 --> 00:29:54,220
just maintaining infrastructures.

435
00:29:55,200 --> 00:29:58,632
So thank you for your time. Hopefully you did learn something new,

436
00:29:58,706 --> 00:30:02,256
and please don't hesitate to reach out. My job is

437
00:30:02,278 --> 00:30:05,948
to be a nerd that you can find, as I said at the beginning,

438
00:30:06,124 --> 00:30:09,680
and hopefully this tickled your fancy

439
00:30:10,360 --> 00:30:13,540
and play around on that Gitops tutorial.

440
00:30:14,120 --> 00:30:17,904
There's a few things in there. I am updating it pretty regularly

441
00:30:18,032 --> 00:30:19,670
with new stuff or whatever,

442
00:30:20,760 --> 00:30:24,344
and I do want to say Christian Hernandez from Red

443
00:30:24,382 --> 00:30:27,784
Hat has some amazing tutorials on how to use

444
00:30:27,822 --> 00:30:31,368
Argo CD. Actually, the Gitops tutorial I

445
00:30:31,374 --> 00:30:35,450
have there is from his tutorial, which is

446
00:30:35,980 --> 00:30:39,736
a lot more in depth than what I did. But if

447
00:30:39,758 --> 00:30:44,536
this spurred something, I strongly suggest going

448
00:30:44,558 --> 00:30:49,216
through his thanks y'all and to I

449
00:30:49,238 --> 00:30:51,936
hope to see youve everyone in the real world soon.

