1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:08,366
all from the comfort of a remote workplace? Andela has

3
00:00:08,388 --> 00:00:11,582
matched thousands of technologists across the globe to their next

4
00:00:11,636 --> 00:00:15,818
career adventure. We're empowering new talent worldwide,

5
00:00:15,914 --> 00:00:19,802
from Sao Paulo to Egypt and Lagos to Warsaw.

6
00:00:19,946 --> 00:00:23,038
Now the future of work is yours to create.

7
00:00:23,204 --> 00:00:27,030
Anytime, anywhere. The world is at your fingertips.

8
00:00:27,370 --> 00:00:29,190
This is Andela.

9
00:01:13,270 --> 00:01:16,398
Okay, I would like to share the agenda of this talk.

10
00:01:16,504 --> 00:01:20,146
First I will make an introduction using some examples and comment

11
00:01:20,178 --> 00:01:23,846
about the difficulties that it presents. Then I

12
00:01:23,868 --> 00:01:27,302
will explain what is a workflow and how can we apply

13
00:01:27,356 --> 00:01:31,258
this in our solutions. Then at the end,

14
00:01:31,344 --> 00:01:35,530
I will make a quick demo to show how easy it can be implemented.

15
00:01:36,350 --> 00:01:39,842
Let's start with the introduction. Go is an incredible

16
00:01:39,926 --> 00:01:43,466
technology that has amazing performance, allowing solutions

17
00:01:43,498 --> 00:01:47,066
to be available faster than ever with incremental daily

18
00:01:47,098 --> 00:01:50,842
updates and with a great community continuously

19
00:01:50,906 --> 00:01:54,370
improving the core base functionalities. Today's business

20
00:01:54,440 --> 00:01:57,966
requirements are changing and need a great flexibility

21
00:01:58,158 --> 00:02:02,350
to adapt quickly with zero impact in the working ecosystems.

22
00:02:02,510 --> 00:02:05,950
Every company is going through this process and its own speed

23
00:02:06,030 --> 00:02:09,654
and it has a different agenda. So they need to be prepared for

24
00:02:09,692 --> 00:02:13,398
everything in order to maintain the integration between them.

25
00:02:13,484 --> 00:02:17,314
Let's have an example of a driver application. We have a passenger

26
00:02:17,362 --> 00:02:20,994
that can request a trip, make a payment, a driver

27
00:02:21,042 --> 00:02:24,522
that gets a notification of these, trip accepts it and then bill

28
00:02:24,576 --> 00:02:28,266
for each trip. It looks simple. Now until we see all

29
00:02:28,288 --> 00:02:31,958
the integrations. Here you can see all the subsystems

30
00:02:32,054 --> 00:02:35,646
and these integrations with all the microservices including the

31
00:02:35,668 --> 00:02:39,182
external systems. So let's think now just a single

32
00:02:39,236 --> 00:02:42,862
task with a client that has a need to know the status of an order.

33
00:02:42,996 --> 00:02:46,498
Some of them will integrate with our public endpoint to get information,

34
00:02:46,664 --> 00:02:50,194
other will request us to use the webhook to inform them any

35
00:02:50,232 --> 00:02:54,078
updates. Another will request a file transfer using SFTP.

36
00:02:54,174 --> 00:02:58,002
As you can see, the main requirement is clear, but implementation of

37
00:02:58,056 --> 00:03:02,434
each will change depending on the needs of the business. We can create this integration

38
00:03:02,482 --> 00:03:06,166
to include all the business needs and add conditionals for each situation,

39
00:03:06,268 --> 00:03:09,606
making a big custom solution for everyone. But actually all

40
00:03:09,628 --> 00:03:12,854
these change are constantly new integrations along with the rapid

41
00:03:12,902 --> 00:03:16,666
updates making hard to maintain in the long period. So it

42
00:03:16,688 --> 00:03:20,454
will create the need of a reward to make it smaller and stable again.

43
00:03:20,592 --> 00:03:24,154
So I will explain today how can prevent

44
00:03:24,202 --> 00:03:28,430
these or at least mitigate this using workflows.

45
00:03:29,490 --> 00:03:32,734
So why workflows? Any system is different from

46
00:03:32,772 --> 00:03:36,466
each other and there are multiple ways to organize teams around it. But let

47
00:03:36,488 --> 00:03:39,986
me share my experience on how we have been working and the

48
00:03:40,008 --> 00:03:44,206
things we learn. First we need to have can idea of the business logic,

49
00:03:44,318 --> 00:03:48,178
know the areas and try to focus our teams around them.

50
00:03:48,344 --> 00:03:51,862
This way we can have a clear scope of the requirements in order

51
00:03:51,916 --> 00:03:55,238
to solve them. Now assume that we know where exactly a

52
00:03:55,244 --> 00:03:58,486
new requirement will have an impact and focus the correct teams

53
00:03:58,518 --> 00:04:02,250
to make those changes in their particular areas. We will allow

54
00:04:02,400 --> 00:04:06,022
them to measure the effort, define what microservices

55
00:04:06,086 --> 00:04:08,682
will be affected or if we really need one.

56
00:04:08,816 --> 00:04:12,598
However, decoupling the logic into teams and raise

57
00:04:12,614 --> 00:04:16,190
the question of how are we going to integrate everything. Any process

58
00:04:16,260 --> 00:04:19,854
have a trigger action that could be generated by different events like

59
00:04:19,892 --> 00:04:23,578
a time schedule, a data change or a user interactions.

60
00:04:23,754 --> 00:04:27,506
Those triggers will start a workflow of staff to complete all

61
00:04:27,528 --> 00:04:31,010
the needs of the process. We can create custom integrations using

62
00:04:31,080 --> 00:04:34,546
a message broker or APIC calls, but it will be

63
00:04:34,568 --> 00:04:37,926
hard to maintain without the appropriate documentation and it

64
00:04:37,948 --> 00:04:41,650
will take time to find who is responsible for each integration.

65
00:04:41,810 --> 00:04:46,006
Using a workflows tool we can create a flow of the business process

66
00:04:46,108 --> 00:04:49,542
using existing microservices started by an event

67
00:04:49,596 --> 00:04:53,322
trigger or a batch schedule. It is possible to define each step

68
00:04:53,376 --> 00:04:57,322
of the process, have full visibility of what is happening and

69
00:04:57,376 --> 00:05:00,634
change it at any moment according to the needs of each

70
00:05:00,672 --> 00:05:05,050
particular case. Workflows with go allow to have all the core functionality

71
00:05:05,130 --> 00:05:08,714
of Ingo and delegate these orchestration of the business logic

72
00:05:08,762 --> 00:05:12,330
into a new layer that controls the flow of a task

73
00:05:12,410 --> 00:05:16,034
and that can be easily maintained and adapted to

74
00:05:16,072 --> 00:05:19,874
any new change. A specific team is

75
00:05:19,912 --> 00:05:23,666
in charge of these workflows. They need to be sure all the requirements are

76
00:05:23,688 --> 00:05:27,734
fulfilled and that the integration between microservices are

77
00:05:27,772 --> 00:05:31,270
resolved in the same way. It also gives more detail

78
00:05:31,340 --> 00:05:35,538
of the process to the business for any new functionality

79
00:05:35,634 --> 00:05:38,954
and it makes a better understanding of how the entire system is

80
00:05:38,992 --> 00:05:42,630
working. Some workflows also allow the direct integration

81
00:05:42,710 --> 00:05:47,142
with other types of objects like databases, third party applications

82
00:05:47,286 --> 00:05:50,710
that reduce the development time of certain types.

83
00:05:50,870 --> 00:05:54,382
So now I will make a demo of a workflow in a cloud

84
00:05:54,436 --> 00:05:56,880
environment in order to make it more clear.

85
00:05:57,570 --> 00:06:01,066
Each cloud system has different tools,

86
00:06:01,178 --> 00:06:04,374
but in this case I will be using the one from GDP.

87
00:06:04,522 --> 00:06:08,002
I will start by creating a new workflow. As you can see here,

88
00:06:08,136 --> 00:06:11,934
I need to put the name, a description, a region

89
00:06:11,982 --> 00:06:15,758
where it will be deployed, a security account,

90
00:06:15,944 --> 00:06:19,334
and then I can define a trigger in order to run this

91
00:06:19,372 --> 00:06:22,646
workflow. So let's go next. Here I

92
00:06:22,668 --> 00:06:26,310
will need to define the main process logic.

93
00:06:26,730 --> 00:06:30,890
This example is just calling a dummy

94
00:06:31,230 --> 00:06:34,362
URL that has an endpoint that will result

95
00:06:34,416 --> 00:06:37,562
in a value. And here you can see as I can

96
00:06:37,616 --> 00:06:40,830
set new values manually and then return

97
00:06:40,900 --> 00:06:44,590
that message in the process. This is very

98
00:06:44,660 --> 00:06:47,120
customizable and very easy to use.

99
00:06:47,890 --> 00:06:51,374
And this is in Yaml file. But you can also use this same

100
00:06:51,412 --> 00:06:55,714
thing in JSoN. As you can see, this is just the same logic with

101
00:06:55,752 --> 00:06:59,138
a different format. So let's try something different.

102
00:06:59,304 --> 00:07:02,782
These is the code for a diagram

103
00:07:02,926 --> 00:07:07,300
that will define the day today and return a message

104
00:07:07,750 --> 00:07:10,962
according to it. As you can see, if it's Friday,

105
00:07:11,026 --> 00:07:14,246
I will see this message. If it's a weekend, I will see this one,

106
00:07:14,348 --> 00:07:17,640
and if not, I will see that it's a work week.

107
00:07:18,250 --> 00:07:20,810
Let's deploy this and see how it runs.

108
00:07:21,470 --> 00:07:24,380
Now I will execute this for the first time.

109
00:07:25,390 --> 00:07:28,762
As you can see here, I can have multiple inputs, but in this case

110
00:07:28,816 --> 00:07:32,762
I will not use it and then I will not activate the logs.

111
00:07:32,826 --> 00:07:36,126
But it's very simple to activate that and have the

112
00:07:36,148 --> 00:07:39,326
detail of what happens of each step and try to

113
00:07:39,348 --> 00:07:43,054
solve any issues. I will execute it now, as you can

114
00:07:43,092 --> 00:07:46,498
see, because today is Tuesday, it's a time week,

115
00:07:46,584 --> 00:07:49,874
it's a working week. So I will get in that.

116
00:07:49,992 --> 00:07:53,394
And at these bottom I will have the detail of the process on how

117
00:07:53,432 --> 00:07:56,934
it went. Let's go back and change this

118
00:07:56,972 --> 00:07:57,560
core.

119
00:08:00,010 --> 00:08:02,760
I will edit this workflow with something different.

120
00:08:11,630 --> 00:08:14,890
In this case, I'm using something that will connect

121
00:08:14,960 --> 00:08:18,810
to Wikipedia. It will use the current day

122
00:08:18,960 --> 00:08:22,602
with the world Tuesday and searching Wikipedia

123
00:08:22,746 --> 00:08:26,862
things related to that. As you can see in the code,

124
00:08:26,996 --> 00:08:30,862
it's very easy to have a diagram at the right that will

125
00:08:30,916 --> 00:08:34,518
follow up all these possible steps that it could go and the actions

126
00:08:34,554 --> 00:08:37,874
that it need to take. So doesn't matter the

127
00:08:37,912 --> 00:08:41,460
size of these, it's very easy to follow what is going on.

128
00:08:42,310 --> 00:08:45,140
So let's deploy this and see how it works.

129
00:08:48,970 --> 00:08:52,230
Now I will execute these as a new version.

130
00:08:53,850 --> 00:08:57,818
Again, I don't need any input because I am connecting to all

131
00:08:57,904 --> 00:09:01,500
public systems, but we will see the result after that.

132
00:09:04,190 --> 00:09:07,638
Okay, here you can see that our output

133
00:09:07,734 --> 00:09:11,654
is a list of things that are related to Tuesday in Wikipedia.

134
00:09:11,782 --> 00:09:15,866
So it integrates two different systems that are external.

135
00:09:15,978 --> 00:09:19,806
One is internal and the other one is external and giving me a result for

136
00:09:19,828 --> 00:09:23,634
this. Then we can use this information to do whatever we

137
00:09:23,672 --> 00:09:24,260
need.

138
00:09:26,870 --> 00:09:31,010
I hope these makes us more clear of what is a workflow,

139
00:09:31,670 --> 00:09:35,182
how are we able to create new ones, and how easy

140
00:09:35,256 --> 00:09:39,494
is to maintain, change and make anything

141
00:09:39,692 --> 00:09:44,806
that we need in order to make it more clear of

142
00:09:44,828 --> 00:09:48,200
the process that we need. Thank you for watching.

143
00:09:48,570 --> 00:09:52,006
I hope this talk makes it more clear what a workflow is,

144
00:09:52,108 --> 00:09:56,006
why we are using this technology, and what is the potential of having

145
00:09:56,108 --> 00:09:59,822
in your solutions. If you have any questions here,

146
00:09:59,996 --> 00:10:03,214
my contact information, please don't hesitate to ask any

147
00:10:03,252 --> 00:10:06,942
doubts that you may have. Thank you for joining and have a nice day.

148
00:10:07,076 --> 00:10:07,290
Bye.

