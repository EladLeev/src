1
00:00:27,010 --> 00:00:30,374
Hello everyone. My name is Bill Code and my talk is the

2
00:00:30,412 --> 00:00:34,390
art and science of a b test development. What I'll be talking

3
00:00:34,460 --> 00:00:37,640
about is going to be a brief introduction of who I am,

4
00:00:38,170 --> 00:00:42,114
an introduction to the A B testing process, a b test developer

5
00:00:42,162 --> 00:00:45,542
strategies, some developer tips, what happens post

6
00:00:45,596 --> 00:00:48,630
launch and how to iterate, and some parting advice.

7
00:00:49,690 --> 00:00:53,518
So so currently I am a front end optimization developer at Love Every,

8
00:00:53,684 --> 00:00:57,582
which is a company that offers stage based play kits and digital products for early

9
00:00:57,636 --> 00:01:02,010
learning. Prior to this I worked at several different conversion rate optimization

10
00:01:02,090 --> 00:01:04,530
agencies as a developer.

11
00:01:05,830 --> 00:01:09,378
Some things that I like. I am a

12
00:01:09,464 --> 00:01:13,346
very amateur home cook, big fan of electronic music

13
00:01:13,448 --> 00:01:17,474
and getting into student filmmaking. I love video games and

14
00:01:17,512 --> 00:01:21,142
also a huge hockey fan. So that's enough about me.

15
00:01:21,196 --> 00:01:25,266
Let's talk about what a b testing actually is. In its simplest

16
00:01:25,298 --> 00:01:28,342
form, it's a method of showing several different variations of a web page

17
00:01:28,396 --> 00:01:32,214
or application of visitors at random, and comparing which variant converts

18
00:01:32,262 --> 00:01:35,782
better. We also call these test experiments.

19
00:01:35,926 --> 00:01:39,594
You may also know this process as split creating. It's the same

20
00:01:39,632 --> 00:01:43,630
thing. We're actually splitting traffic of a website between

21
00:01:43,780 --> 00:01:47,534
the different variations that we create. And in this example here,

22
00:01:47,572 --> 00:01:50,606
we have sort of one conversion of a website,

23
00:01:50,788 --> 00:01:54,314
which is the control, or how the website exists in its natural

24
00:01:54,362 --> 00:01:58,126
state, versus a variation. One where we've changed

25
00:01:58,158 --> 00:02:01,858
that header section to a different design. And then through the use of an A

26
00:02:01,864 --> 00:02:05,774
B testing platform, we will launch this experience, split the traffic,

27
00:02:05,822 --> 00:02:08,470
and then measure the difference between these variations.

28
00:02:09,690 --> 00:02:13,750
So with experiments, you'll need some basic roles at your organization.

29
00:02:14,330 --> 00:02:17,590
The first would be your lead optimizer. This is someone who's actually

30
00:02:17,660 --> 00:02:20,874
the point person for the A B testing efforts and is

31
00:02:20,912 --> 00:02:25,114
managing a testing roadmap. You'll of course need a UX designer to

32
00:02:25,152 --> 00:02:28,234
research the problems or opportunities to test into.

33
00:02:28,352 --> 00:02:31,774
And this person is designing those new experiences for

34
00:02:31,812 --> 00:02:35,038
your developer who's actually creating and deploying the code.

35
00:02:35,204 --> 00:02:39,870
And lastly, you'll need a digital analyst to interpret the results and build recommendations

36
00:02:40,210 --> 00:02:43,620
based on those test outcomes. So we see that

37
00:02:44,070 --> 00:02:48,110
optimization experimentation, it's really a collective effort.

38
00:02:48,270 --> 00:02:51,646
And after sharing more about the A B testing

39
00:02:51,678 --> 00:02:55,646
process, I'll of course be explaining the intricacies of the developer role

40
00:02:55,678 --> 00:02:59,070
here. So what platform do we want to a

41
00:02:59,080 --> 00:03:02,454
B test with? Well, there's a lot of them, and you can see

42
00:03:02,492 --> 00:03:05,842
here this long list, and honestly,

43
00:03:05,986 --> 00:03:08,566
at their core they all do the same thing. They all have their pros and

44
00:03:08,588 --> 00:03:12,154
cons. But for the purpose of this talk, we'll be looking

45
00:03:12,192 --> 00:03:15,850
at some screenshots, optimizely because in my opinion

46
00:03:16,190 --> 00:03:19,462
they probably have the best UI and are the most straightforward.

47
00:03:19,606 --> 00:03:23,098
So we'll be seeing screenshots from optimize in this case. But there are plenty of

48
00:03:23,104 --> 00:03:26,666
tools for a b testing out there. So with client side testing

49
00:03:26,698 --> 00:03:30,494
you will want to implement your main platform snippet as high up

50
00:03:30,532 --> 00:03:34,030
in the document as possible and ensure it's synchronous.

51
00:03:34,370 --> 00:03:37,874
The reason for this is that you don't want your users to see a

52
00:03:37,912 --> 00:03:41,106
glimpse of original content and if they're bucketed intro

53
00:03:41,208 --> 00:03:44,866
a different variation, they'll see that original content change walkthrough their

54
00:03:44,888 --> 00:03:48,230
variation content. And this is what's known as

55
00:03:48,300 --> 00:03:51,160
Flickr and it degrades the user experience.

56
00:03:52,010 --> 00:03:56,562
So it's very important that this script is implemented synchronously.

57
00:03:56,626 --> 00:04:00,578
And yes this is render blocking, but we are changing

58
00:04:00,594 --> 00:04:04,518
the way chat the page is rendering here with this script, so it is warranted.

59
00:04:04,694 --> 00:04:07,994
But because of this, we want to make sure that this

60
00:04:08,032 --> 00:04:11,466
script, whatever code we're deploying for our variations in our

61
00:04:11,488 --> 00:04:15,434
AP test, we want to make sure that that code is as performant

62
00:04:15,482 --> 00:04:18,686
and as small as possible. Also, a mistake that

63
00:04:18,708 --> 00:04:22,154
beginners make here is that they deploy this snippet

64
00:04:22,202 --> 00:04:26,238
through a tag manager which automatically makes it async.

65
00:04:26,414 --> 00:04:30,226
I think really the only exception for doing that is if you are only a

66
00:04:30,248 --> 00:04:33,982
b testing elements that are below the visual fold.

67
00:04:34,126 --> 00:04:37,906
But in general it's not recommended. So for this talk I have

68
00:04:37,928 --> 00:04:41,062
a website that has optimizedly implemented so we could actually

69
00:04:41,116 --> 00:04:44,898
take a look at what's going on. So if we inspect with devtools

70
00:04:45,074 --> 00:04:48,902
we could see in the head that we have our snippet right

71
00:04:48,956 --> 00:04:52,274
here and then in the console. This gives us a global

72
00:04:52,322 --> 00:04:55,818
optimizely object we could play around with and it shows us data

73
00:04:55,904 --> 00:04:59,226
on the experiments that we're running. But let's switch back

74
00:04:59,248 --> 00:05:02,582
over to the slides for a second. So on your ecommerce website,

75
00:05:02,736 --> 00:05:06,638
your team may have discovered a problem or opportunity that's been validated with data

76
00:05:06,724 --> 00:05:10,478
to test with a b testing. And here we have an example

77
00:05:10,644 --> 00:05:14,400
website that's selling some apparel and

78
00:05:14,850 --> 00:05:17,934
we have a hypothesis statement stated here.

79
00:05:18,052 --> 00:05:20,606
I believe if we add a mini cart to the header we'll make it easier

80
00:05:20,638 --> 00:05:23,966
for users to check out. If I'm right we'll see an increase in order conversion

81
00:05:23,998 --> 00:05:27,438
rate. So we want to create an A B test where we're showing a mini

82
00:05:27,454 --> 00:05:31,426
cart on this page right now. It's just a sort of static cart

83
00:05:31,458 --> 00:05:34,786
icon on the top right? But what happens if we add a little mini cart.

84
00:05:34,818 --> 00:05:38,438
When we hover over, we see an order summary. Will that perform better

85
00:05:38,604 --> 00:05:42,534
than this current control version? So once you've come up with that hypothesis,

86
00:05:42,582 --> 00:05:45,702
you'll want to formalize things into a requirements document.

87
00:05:45,846 --> 00:05:49,334
This is an example here where we have experiment

88
00:05:49,382 --> 00:05:52,326
one. Add mini card as the title of our A B test,

89
00:05:52,448 --> 00:05:55,774
and we'll restate that hypothesis. We'll show the

90
00:05:55,812 --> 00:05:58,958
problem that you're addressing. We'll list the device that the A

91
00:05:58,964 --> 00:06:02,746
B test should run, where it should run, what key metrics you're

92
00:06:02,778 --> 00:06:05,986
tracking. Also, every A B test has

93
00:06:06,008 --> 00:06:10,142
a duration, which is the length of time the test should run until a statistical

94
00:06:10,206 --> 00:06:14,062
significance is reached and the requirements, the visual requirements.

95
00:06:14,126 --> 00:06:17,518
So on the left is our control, the way the page exists in

96
00:06:17,544 --> 00:06:20,934
its natural state versus our variation one.

97
00:06:21,132 --> 00:06:24,754
And you can see that we're coding that little mini cart on the cart icon,

98
00:06:24,802 --> 00:06:28,614
hover. We'll list some dev specs here for the developer so

99
00:06:28,652 --> 00:06:32,426
they know exactly what they're doing. There will be some

100
00:06:32,528 --> 00:06:36,470
user QA stories here so that your QA

101
00:06:36,550 --> 00:06:40,406
personnel can figure out exactly what needs to be done on the new variation

102
00:06:40,518 --> 00:06:43,786
and some key metrics to track. So having this test plan in

103
00:06:43,808 --> 00:06:47,054
place makes it really easy for you as a developer to understand

104
00:06:47,172 --> 00:06:51,038
exactly what you need to code for this a B test. And when it

105
00:06:51,044 --> 00:06:54,414
comes to the way that things execute, they generally work

106
00:06:54,452 --> 00:06:58,126
the same across the platforms. But essentially the A B testing snippet

107
00:06:58,158 --> 00:07:01,394
will load. It will check if the user is on

108
00:07:01,432 --> 00:07:04,674
a URL that is targeted within the A B test,

109
00:07:04,872 --> 00:07:08,534
and if so, it will then check if the user is in a

110
00:07:08,572 --> 00:07:12,486
certain audience that you've set up for it. So something like the

111
00:07:12,508 --> 00:07:16,274
browser or desktop device, if they're in that audience

112
00:07:16,322 --> 00:07:19,702
segment that you've set up within the test, they'll then move on to

113
00:07:19,756 --> 00:07:22,954
check if you're in the proper traffic allocation for the

114
00:07:22,992 --> 00:07:26,794
experiment. Because not all experiments have to be set to 100%

115
00:07:26,832 --> 00:07:30,822
of traffic. Some experiments, maybe to mitigate some risk,

116
00:07:30,966 --> 00:07:34,606
can only be set to maybe 10% of traffic. And within that

117
00:07:34,628 --> 00:07:37,982
10%, there will be a 50 50 split between v zero

118
00:07:38,036 --> 00:07:41,454
and v one. So if you're in that test group of

119
00:07:41,492 --> 00:07:45,394
10% of traffic allocation, the platform will determine which

120
00:07:45,432 --> 00:07:49,042
variations you should see. And then any experiment code

121
00:07:49,096 --> 00:07:52,754
that you've written, let's say it's v one, then that

122
00:07:52,792 --> 00:07:56,270
v one experiment code that you've written will then execute for that user.

123
00:07:56,350 --> 00:07:59,602
So that's the order of events. Now,

124
00:07:59,656 --> 00:08:03,094
when it comes to dev strategy, there's a number of

125
00:08:03,132 --> 00:08:06,194
ways to code these A B tests, but it always depends on the requirements,

126
00:08:06,242 --> 00:08:10,194
so we'll take a look at those now. So coming up with the dev strategy

127
00:08:10,322 --> 00:08:13,626
is going to depend on if you are an in house developer or

128
00:08:13,648 --> 00:08:16,886
a third party developer. If you're an in house developer,

129
00:08:16,998 --> 00:08:20,730
you'll have source code access, which will make your job a lot easier.

130
00:08:21,150 --> 00:08:24,506
In this case, it's possible to do hide show tests

131
00:08:24,618 --> 00:08:28,554
where, let's say you're creating the addition of a new component somewhere.

132
00:08:28,682 --> 00:08:32,238
You can build that new component into your code base in a hidden state.

133
00:08:32,324 --> 00:08:35,950
And then in your v one of optimizely just put a CSS

134
00:08:36,030 --> 00:08:39,554
rule to show that new component there

135
00:08:39,592 --> 00:08:43,074
is total control over deployment. So you know exactly when to

136
00:08:43,112 --> 00:08:46,882
deploy your a b test code. You can sync it up with your normal site

137
00:08:46,936 --> 00:08:50,822
deploys and also you have the ability to do more

138
00:08:50,876 --> 00:08:54,514
redirect type tests. So if you're testing a completely different redesign

139
00:08:54,562 --> 00:08:58,390
of, let's say, a product detail page, you can code that new product detail

140
00:08:58,460 --> 00:09:02,838
page on a completely different URL. And then within optimizely

141
00:09:02,934 --> 00:09:06,198
you just can do a redirect to that new page. If you're

142
00:09:06,214 --> 00:09:09,642
working as a third party developer, you don't have access

143
00:09:09,696 --> 00:09:13,162
to the source code usually. So all changes have to be made

144
00:09:13,296 --> 00:09:17,038
based on what you see with the site in front of you. A lot of

145
00:09:17,044 --> 00:09:21,454
times you're searching for global functionality that you can manipulate and

146
00:09:21,492 --> 00:09:24,846
it's a little more risky because there's unknown context. You may

147
00:09:24,868 --> 00:09:28,580
not know if the client website is going to deploy a change

148
00:09:29,270 --> 00:09:32,658
that is going to remove some dependencies that your A

149
00:09:32,664 --> 00:09:36,114
B test code was using and that will break your a B test.

150
00:09:36,312 --> 00:09:40,278
So really there's a big difference between the two and that's going

151
00:09:40,284 --> 00:09:44,578
to determine your strategy of how you actually code these A B tests.

152
00:09:44,754 --> 00:09:47,746
In this talk, I'm going to focus a little bit more on the third party

153
00:09:47,778 --> 00:09:51,366
dev aspect of it just because there's a lot more challenge to it.

154
00:09:51,388 --> 00:09:54,934
And I think it makes for a much more interesting talk than simply

155
00:09:54,982 --> 00:09:59,066
coding up an alternative version of a page and then doing a redirect test too.

156
00:09:59,248 --> 00:10:02,826
So moving on now we'll take a quick look at the setup within optimizely for

157
00:10:02,848 --> 00:10:06,206
the A B test. If we

158
00:10:06,228 --> 00:10:09,486
go to our A B test in optimizely, we'll see that

159
00:10:09,508 --> 00:10:12,746
we have a spot for variations. We're just going to have our original

160
00:10:12,778 --> 00:10:16,042
and our variation one here. The targeting is

161
00:10:16,116 --> 00:10:20,020
where the A B test should run. So if we're referencing our test plan

162
00:10:20,790 --> 00:10:24,306
this a b test is going to run sitewide because this

163
00:10:24,328 --> 00:10:28,186
little cart icon where we're adding the mini cart is available sitewide.

164
00:10:28,238 --> 00:10:33,080
So we would do a substring match for fatcatitude.com.

165
00:10:33,450 --> 00:10:37,318
The audience referencing our test plan again

166
00:10:37,484 --> 00:10:41,322
will be desktop. So optimizely has a really easy way

167
00:10:41,376 --> 00:10:44,886
to create audiences with these sort of drop downs

168
00:10:44,918 --> 00:10:48,854
you just drag and drop. You could do a number of different audience solutions,

169
00:10:48,982 --> 00:10:52,218
the platform, the location, there's a whole array

170
00:10:52,234 --> 00:10:55,710
of these things, but in our case we just need desktop.

171
00:10:56,770 --> 00:11:00,398
We'll jump now to the metrics. This is

172
00:11:00,484 --> 00:11:03,866
anywhere we want to add certain goals, such as clickables

173
00:11:03,898 --> 00:11:07,662
or visitors to pages. You could create custom goals

174
00:11:07,806 --> 00:11:11,634
that can be done in this section. Shared code. So any code that should

175
00:11:11,672 --> 00:11:15,442
run before any variation code should run. Usually this is

176
00:11:15,496 --> 00:11:19,106
maybe some sort of bucketing code to Google Analytics or Adobe

177
00:11:19,138 --> 00:11:23,174
site catalyst, whatever analytics platform the site is using

178
00:11:23,372 --> 00:11:26,662
and the traffic allocation. So this is the portion of

179
00:11:26,716 --> 00:11:30,210
visitors meeting the audience conditions that are

180
00:11:30,300 --> 00:11:33,914
eligible for the experiment. So we'll keep it at 100% at

181
00:11:33,952 --> 00:11:37,674
a 50 50 split. And then

182
00:11:37,712 --> 00:11:41,242
there's just a number of other options. You can schedule the test to go live

183
00:11:41,296 --> 00:11:44,666
at a certain point. It also gives you some API names

184
00:11:44,698 --> 00:11:48,526
to make your code a little bit more dynamic. But we'll jump now to

185
00:11:48,628 --> 00:11:51,902
actually the coding strategy, how to actually code this test.

186
00:11:51,956 --> 00:11:55,470
So we'll go into one of these variations, our v one,

187
00:11:55,620 --> 00:11:58,946
and it has a WYSIWYG editor, but we're never going to use that.

188
00:11:58,968 --> 00:12:02,546
We're going to write actual code here. There's just certain things you can't do with

189
00:12:02,568 --> 00:12:05,458
the WYSIWYG. But if we go into this editor here,

190
00:12:05,544 --> 00:12:09,038
we see that there's some code here. And next we're going to walk through some

191
00:12:09,064 --> 00:12:12,630
of that code. So technically you could write all of your code into a single

192
00:12:12,700 --> 00:12:16,546
file and then copy and paste it into the optimize Lee editor.

193
00:12:16,738 --> 00:12:20,354
But you'll see that it sort of becomes unwieldy the larger the experiment

194
00:12:20,402 --> 00:12:23,754
is. But just as an example, it might look something like this,

195
00:12:23,792 --> 00:12:27,814
where you have an iffy, so has to not pollute the global namespace.

196
00:12:27,942 --> 00:12:31,538
And then you can add your CSS styles by way of string

197
00:12:31,574 --> 00:12:35,402
concatenation, and then you can start adding your HTML

198
00:12:35,466 --> 00:12:39,262
with functions to create that mini cart and function

199
00:12:39,316 --> 00:12:42,974
to save to local storage so that that data persists across the

200
00:12:43,012 --> 00:12:46,866
different pages and the event listeners. So as

201
00:12:46,888 --> 00:12:50,994
you can see, this isn't a huge experiment, but the bigger ones you really want

202
00:12:51,032 --> 00:12:55,294
something like a build tool so that all of these files

203
00:12:55,342 --> 00:12:58,806
and concerns can be separated and can be compiled into a

204
00:12:58,828 --> 00:13:02,822
single build, which I'll show next. So now we'll look at a build

205
00:13:02,876 --> 00:13:06,326
tool and a defined structure for our a b

206
00:13:06,348 --> 00:13:09,834
test code, and you'll see that this is a much more preferred way of doing

207
00:13:09,872 --> 00:13:13,766
development. So essentially this is a webpack

208
00:13:13,798 --> 00:13:17,462
config file where we could use all of the latest and greatest bundling

209
00:13:17,526 --> 00:13:20,890
options we could use has we can import

210
00:13:20,960 --> 00:13:24,506
HTML, we can minify, we can transpile,

211
00:13:24,618 --> 00:13:28,238
we could use node packages, do all those fancy things, which is really nice.

212
00:13:28,324 --> 00:13:32,106
So if we look at our entry file, which is our v one js,

213
00:13:32,218 --> 00:13:34,590
we see that we can import our CSS,

214
00:13:35,350 --> 00:13:38,926
attach it directly to the head this way import those functions.

215
00:13:38,958 --> 00:13:42,500
It's a lot cleaner, a lot nicer than that single file build.

216
00:13:43,030 --> 00:13:46,994
And if we pull up the terminal and we run the webpack

217
00:13:47,042 --> 00:13:51,126
command, it'll run some processes, and when

218
00:13:51,148 --> 00:13:54,662
it's ready it will spit out a single build for us.

219
00:13:54,716 --> 00:13:58,326
Our v one bundle here and now we

220
00:13:58,348 --> 00:14:02,010
can actually just copy and paste this directly into optimizely.

221
00:14:02,430 --> 00:14:05,674
So at this point we want to test our code just before we paste intro

222
00:14:05,712 --> 00:14:09,354
optimizely. And this is a single page app. So even

223
00:14:09,392 --> 00:14:12,634
if we go to another page, we're still within the same context.

224
00:14:12,762 --> 00:14:16,666
And this code has watchers to check if any other items

225
00:14:16,698 --> 00:14:20,206
are being added. And it's checking local storage and

226
00:14:20,228 --> 00:14:24,142
then creating that HTML list when we're hovering over

227
00:14:24,196 --> 00:14:28,180
the cart icon. And if we go to another page, we'll add another product,

228
00:14:29,270 --> 00:14:33,074
we'll hover over. We see that populate in the mini cart, which is great.

229
00:14:33,112 --> 00:14:37,006
Of course, if we refresh, we won't see that mini cart on hover anymore,

230
00:14:37,038 --> 00:14:40,002
we'd have to reenter our code into the console.

231
00:14:40,146 --> 00:14:43,586
So what we want to do now is paste this code in the optimizely

232
00:14:43,618 --> 00:14:47,206
editor so that optimizely can give us a preview link so that we

233
00:14:47,228 --> 00:14:51,066
can have a persistent experience. So if we go back over

234
00:14:51,088 --> 00:14:54,470
to optimizely, we'll go back to our variations,

235
00:14:54,550 --> 00:14:58,246
we'll hit edit, we'll go to the code editor, and we'll

236
00:14:58,278 --> 00:15:01,340
paste in our build, hit save, and apply.

237
00:15:01,710 --> 00:15:05,466
And now to create a preview link, we go to API names

238
00:15:05,498 --> 00:15:08,110
and we want to copy the id of the variation.

239
00:15:09,490 --> 00:15:12,990
And we can use this in a special parameter.

240
00:15:13,510 --> 00:15:17,662
Optimize Lee X equals chat id. And then optimizely

241
00:15:17,726 --> 00:15:21,346
Lee token is going to equal public. And so

242
00:15:21,448 --> 00:15:25,414
with this URL, you can essentially share the

243
00:15:25,452 --> 00:15:29,042
experience with your code running to any of the stakeholders,

244
00:15:29,186 --> 00:15:32,374
UX designers, QA to make

245
00:15:32,412 --> 00:15:35,894
sure the experience is looking and functioning as

246
00:15:35,932 --> 00:15:39,314
expected. So if we add those query

247
00:15:39,362 --> 00:15:43,018
parameters, add a product to the cart, we see that

248
00:15:43,104 --> 00:15:47,306
the experience is showing. And so we'll go back to the home page with

249
00:15:47,328 --> 00:15:51,478
those params, hover over the cart. We still see the mini cart,

250
00:15:51,574 --> 00:15:54,400
so this way we can share this experience with anyone.

251
00:15:54,770 --> 00:15:58,446
Now, once your experiment preview has been qaed and approved, it's time

252
00:15:58,468 --> 00:16:01,806
to set the test live. And after the test is live, the platform

253
00:16:01,908 --> 00:16:05,326
will continue to collect data and randomly bucket

254
00:16:05,358 --> 00:16:09,026
those users to either v zero, V one, V two, and so on.

255
00:16:09,128 --> 00:16:12,706
And those users will continue to see their experience until they

256
00:16:12,728 --> 00:16:16,598
clear their cookies. And this whole time the

257
00:16:16,684 --> 00:16:20,102
experiment platform is collecting results. Now this is typically more of

258
00:16:20,156 --> 00:16:22,950
an optimizer or analyst responsibility,

259
00:16:23,290 --> 00:16:27,286
but this is what it would look like. And after the

260
00:16:27,308 --> 00:16:30,758
test has run, after it's reached statistical significance.

261
00:16:30,934 --> 00:16:34,426
Now what if your test lost? Well, it's not all

262
00:16:34,448 --> 00:16:38,202
in vain. You've probably learned something and you've probably

263
00:16:38,256 --> 00:16:42,018
saved time and money by not permanently implementing

264
00:16:42,134 --> 00:16:45,850
something. Chat wasn't going to work, and oftentimes negative

265
00:16:45,930 --> 00:16:49,726
test results often lead to new creating ideas that

266
00:16:49,748 --> 00:16:53,374
you can continue to iterate upon. And you really do need to have that

267
00:16:53,492 --> 00:16:57,474
culture of experiments at your company and that

268
00:16:57,512 --> 00:17:01,166
trust and that ownership to continue doing this until you find a winner.

269
00:17:01,278 --> 00:17:05,554
Now if your test won, that's great. You can temporarily set

270
00:17:05,752 --> 00:17:10,134
and optimize the v one experience to 100%

271
00:17:10,172 --> 00:17:13,734
of visitors. Now, you only want to do this for a short amount

272
00:17:13,772 --> 00:17:17,366
of time. It's just generally not good to have what are supposed to

273
00:17:17,388 --> 00:17:20,486
be these somewhat ephemeral tests running

274
00:17:20,668 --> 00:17:24,522
for such a long time. You want to immediately get this into your

275
00:17:24,656 --> 00:17:27,818
main core development team's roadmap so that it can

276
00:17:27,824 --> 00:17:31,402
be a permanent change. So now I'd like to share a quote from a friend

277
00:17:31,456 --> 00:17:34,974
and former coworker of mine. His name is Aaron Montana and I think

278
00:17:35,012 --> 00:17:38,426
this beautifully captures the essence of a B test development.

279
00:17:38,618 --> 00:17:42,874
Historically, software development has leaned heavily on architecture analogies.

280
00:17:43,002 --> 00:17:45,882
Strong foundations build good houses, maintenance is vital,

281
00:17:45,946 --> 00:17:50,430
etc. Experimentation, however, is the art of building sandcastles.

282
00:17:50,590 --> 00:17:54,030
Beautiful structures, but complete facades intended to delight,

283
00:17:54,110 --> 00:17:57,566
facilitate learning, and be washed away by the tide.

284
00:17:57,758 --> 00:18:01,318
It's so poetic, but it's so true. I mean, what we're doing here is

285
00:18:01,484 --> 00:18:05,462
we want to make quick, iterative experiments. So velocity is key,

286
00:18:05,516 --> 00:18:08,806
because what we care about are those insights so we can

287
00:18:08,828 --> 00:18:12,170
make decisions on things we want to productionize or

288
00:18:12,240 --> 00:18:15,580
things that just don't work. So thanks Aaron for this.

289
00:18:15,950 --> 00:18:20,006
So now I'll share some general developer tips for a B test development.

290
00:18:20,118 --> 00:18:23,194
The first is avoid concurrent tests on the same page.

291
00:18:23,392 --> 00:18:26,814
Not only will this reduce complexity, but if you have many

292
00:18:26,852 --> 00:18:31,162
A B tests running on the same page, it can also be hard to attribute

293
00:18:31,226 --> 00:18:34,562
results because you're not sure if the results you're seeing

294
00:18:34,616 --> 00:18:38,190
are because of a combination of variations

295
00:18:38,270 --> 00:18:42,610
in experiments on the same page. So in general, to reduce complexity,

296
00:18:43,030 --> 00:18:45,782
just keep it to a few per page. Also,

297
00:18:45,836 --> 00:18:49,238
namespace classes, ids, global variations a

298
00:18:49,244 --> 00:18:52,726
b test development is a separate work stream from your

299
00:18:52,748 --> 00:18:56,294
regular sites development. So anything you can do to

300
00:18:56,412 --> 00:19:00,034
reduce any kind of conflict there is important also always QA

301
00:19:00,082 --> 00:19:03,926
on actual devices. We know the actual devices can perform differently

302
00:19:03,958 --> 00:19:06,858
than the emulator, so that's important.

303
00:19:07,024 --> 00:19:10,846
Check logged in logged, but states when you're developing the code,

304
00:19:11,028 --> 00:19:14,586
anything dynamic should be carefully considered and accounted

305
00:19:14,618 --> 00:19:18,186
for in your code. Confirm the control state when bugs

306
00:19:18,218 --> 00:19:21,582
are found. So if there's any bug on your site,

307
00:19:21,716 --> 00:19:25,246
stakeholders may not know where it's coming from. And the first

308
00:19:25,268 --> 00:19:28,578
thing you might want to do is opt out of your A B testing platform

309
00:19:28,744 --> 00:19:31,986
and see if the bug still exists. If it is, it's not coming from

310
00:19:32,008 --> 00:19:34,660
your A B test. That's usually a good first step.

311
00:19:36,170 --> 00:19:39,080
Here are some mistakes that beginners make.

312
00:19:39,610 --> 00:19:43,142
Know writing CSS in line as we saw

313
00:19:43,196 --> 00:19:46,962
before, we have modern tooling now to create has,

314
00:19:47,026 --> 00:19:50,550
and we can compile that into a single build

315
00:19:50,620 --> 00:19:53,866
that we can add. And a lot of the platforms have a separate space for

316
00:19:53,888 --> 00:19:57,482
CSS, so we should take advantage of that. Anything to keep our code

317
00:19:57,536 --> 00:20:01,274
clean and organized. Also, here's a few tools

318
00:20:01,322 --> 00:20:05,950
that I think are particularly important when it comes to single page applications

319
00:20:06,370 --> 00:20:10,382
where you're sort of seeing those virtual page changes and

320
00:20:10,436 --> 00:20:14,322
components are rerendering. So your code really has to happen

321
00:20:14,376 --> 00:20:17,854
at those certain triggers. And mutation observers

322
00:20:17,902 --> 00:20:21,506
are great for that. You can attach your mutation observer to a certain

323
00:20:21,688 --> 00:20:25,570
section, certain element, watch for the subtree, and then

324
00:20:25,640 --> 00:20:29,314
when there's a mutation you can run a callback intersection

325
00:20:29,362 --> 00:20:32,886
observers are great for when you want to detect if an

326
00:20:32,908 --> 00:20:36,662
element has entered your viewport. There is a technique for

327
00:20:36,716 --> 00:20:39,942
XHR override, which you're basically overriding the prototype

328
00:20:40,006 --> 00:20:43,958
of the XHR request and then putting in your custom callback

329
00:20:44,054 --> 00:20:47,450
when that request is completed. And we could also use

330
00:20:47,520 --> 00:20:51,306
pulling functions to check for a custom condition

331
00:20:51,498 --> 00:20:53,470
and then run a custom callback.

332
00:20:55,490 --> 00:20:58,878
Here are some query parameters. These are specific to

333
00:20:58,884 --> 00:21:03,006
the optimizely platform, but you can log what

334
00:21:03,028 --> 00:21:06,318
audience segments you're in, any warnings or errors.

335
00:21:06,414 --> 00:21:10,930
We have query parameter to disable or opt out of optimizely altogether.

336
00:21:11,510 --> 00:21:15,886
And as we saw before, we have a query parameter to preview experiences

337
00:21:15,918 --> 00:21:19,490
in optimizely. They also have a great debugging

338
00:21:19,570 --> 00:21:23,206
extension as well. This is great for your non developers to see

339
00:21:23,228 --> 00:21:26,726
what's going on as well. So really a

340
00:21:26,748 --> 00:21:30,730
B test. It's a communal activity and

341
00:21:30,880 --> 00:21:34,394
everyone across your organization has great ideas and

342
00:21:34,432 --> 00:21:38,246
different perspectives and different sources of data. So I encourage

343
00:21:38,278 --> 00:21:41,402
you to have a way for those people to

344
00:21:41,456 --> 00:21:44,782
submit their ideas. One way you could do this really simple, is a Google

345
00:21:44,836 --> 00:21:48,014
form. Ask them if they have any ideas, and then

346
00:21:48,052 --> 00:21:51,406
you can create a roadmap and prioritize them and figure out

347
00:21:51,428 --> 00:21:53,330
what would work best for your organization.

348
00:21:54,150 --> 00:21:58,574
Lastly, some parting advice. Definitely keep a hypothesis library,

349
00:21:58,702 --> 00:22:02,146
some centralized repository where you're keeping track of

350
00:22:02,328 --> 00:22:05,418
all the ideas that you want to test and the outcome,

351
00:22:05,614 --> 00:22:08,870
the development effort that goes into it, and the priority.

352
00:22:09,450 --> 00:22:12,760
Small iterative changes are usually best.

353
00:22:13,130 --> 00:22:16,454
If you're doing a test where you're testing a completely

354
00:22:16,572 --> 00:22:19,000
different product page design,

355
00:22:19,390 --> 00:22:22,474
maybe you're adding certain features to the page. Well,

356
00:22:22,512 --> 00:22:25,706
even if that a B test has a positive result,

357
00:22:25,888 --> 00:22:29,786
you may not know what specifically caused that. So if

358
00:22:29,808 --> 00:22:33,674
you test small changes, you'll know if there was a positive

359
00:22:33,722 --> 00:22:37,054
or negative result. They could be directly attributable to

360
00:22:37,092 --> 00:22:40,234
that one change. Having enough traffic

361
00:22:40,282 --> 00:22:43,454
is important. You need a certain level

362
00:22:43,492 --> 00:22:46,986
of traffic for your test to reach a statistical significance.

363
00:22:47,098 --> 00:22:51,294
So keep that in mind and always be testing. This should be part of your

364
00:22:51,412 --> 00:22:54,766
company's culture. I think there's a lot you can learn

365
00:22:54,788 --> 00:22:58,326
from this, and it's fun too. And I think sharing the results of

366
00:22:58,348 --> 00:23:01,766
your A B tests are also a great activity to share with

367
00:23:01,788 --> 00:23:05,542
your coworkers. So that's the end of my talk. Here are

368
00:23:05,596 --> 00:23:09,222
some places to find me. Thanks very much for listening and

369
00:23:09,276 --> 00:23:10,020
I'll see you next time.

