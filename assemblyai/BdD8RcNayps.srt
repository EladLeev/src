1
00:00:20,330 --> 00:00:23,886
Hello there. Welcome to the Conf 42

2
00:00:23,988 --> 00:00:28,450
Rust Lang two conference. My name is Atmaram

3
00:00:28,530 --> 00:00:32,434
and I am going to talk on the topic of journey of journey

4
00:00:32,482 --> 00:00:36,306
programming language written in rust by tester.

5
00:00:36,418 --> 00:00:40,134
None other than me. There are so many programming

6
00:00:40,182 --> 00:00:44,426
languages out there, yet I felt need of writing another one

7
00:00:44,528 --> 00:00:49,062
just for testing and I am going to talk about all my experiences

8
00:00:49,126 --> 00:00:51,950
in writing this language in rust.

9
00:00:52,450 --> 00:00:55,694
About me I am an occasional speaker. I talk

10
00:00:55,732 --> 00:00:58,926
at multiple conferences. I am blogger. I write lot

11
00:00:58,948 --> 00:01:03,342
of blogs about testing and systems engineering. I am passionate

12
00:01:03,406 --> 00:01:07,042
programmer. I like writing code, writing good code.

13
00:01:07,176 --> 00:01:11,042
I'm tester by profession. I do testing for

14
00:01:11,176 --> 00:01:14,778
earning money. I am open source contributor.

15
00:01:14,974 --> 00:01:19,698
I occasionally write on Twitter with the Twitter handle atmnk

16
00:01:19,794 --> 00:01:24,306
nine. Don't forget to subscribe and I work at Sedin Technologies

17
00:01:24,418 --> 00:01:27,606
as test manager. So I am going to walk you

18
00:01:27,628 --> 00:01:31,034
through the agenda of this topic. I am going to

19
00:01:31,072 --> 00:01:35,286
talk about the idea of journey programming language first. Then I'm

20
00:01:35,318 --> 00:01:38,742
going to quickly show you the demo of how journey programming language

21
00:01:38,806 --> 00:01:42,720
works with its quick application to sample application.

22
00:01:43,490 --> 00:01:47,146
Then I'm going to talk about how it came into existence

23
00:01:47,258 --> 00:01:50,558
into various phases, how it started as a

24
00:01:50,564 --> 00:01:54,414
pet project in Java, then in between how I felt

25
00:01:54,462 --> 00:01:58,222
need of writing the same tool in different programming language.

26
00:01:58,366 --> 00:02:01,746
Then I will talk about how I chose the rust for

27
00:02:01,848 --> 00:02:04,962
writing this tool. Then I will talk about

28
00:02:05,016 --> 00:02:08,198
how I created a project plan and how that project plan

29
00:02:08,284 --> 00:02:11,702
worked. Then throughout this journey of writing tool,

30
00:02:11,836 --> 00:02:15,574
how different features came into existence, got added and

31
00:02:15,612 --> 00:02:19,714
some of the feature got removed. Then I will talk about my experiences

32
00:02:19,762 --> 00:02:23,066
with Rust while writing this tool and I will show you

33
00:02:23,088 --> 00:02:26,826
an extended demo of the same tool and I will

34
00:02:26,848 --> 00:02:30,450
show you some rust code as well where this tool is written

35
00:02:30,630 --> 00:02:33,994
and I will conclude my talk. So let's

36
00:02:34,042 --> 00:02:37,390
talk about the idea of journey programming language.

37
00:02:37,810 --> 00:02:41,774
While I was doing testing, I felt a need of

38
00:02:41,812 --> 00:02:44,994
some tool. Why? Because I was doing

39
00:02:45,032 --> 00:02:48,814
so many mundane activities and routine activities repetitively,

40
00:02:48,942 --> 00:02:52,798
I failed need for automating those repetitive

41
00:02:52,894 --> 00:02:57,010
activities. I felt there should be some tool where I can automate

42
00:02:57,090 --> 00:03:00,722
these activities as command. To elaborate

43
00:03:00,786 --> 00:03:03,926
more on this idea, what I failed was

44
00:03:04,028 --> 00:03:07,654
I should be able to quickly create commands for multiple or

45
00:03:07,692 --> 00:03:11,302
repetitive use. The command should be parameterized

46
00:03:11,366 --> 00:03:15,130
means I should be able to invoke same command with multiple different

47
00:03:15,200 --> 00:03:18,886
values while running the command. If the tool doesn't

48
00:03:18,918 --> 00:03:22,446
know specific value, the tool should ask invoker of the

49
00:03:22,468 --> 00:03:26,570
command. The specific values and these commands could be created

50
00:03:26,650 --> 00:03:30,462
for multiple tasks or automating multiple activities like test data

51
00:03:30,516 --> 00:03:34,106
creation or creation of mock server. So that was

52
00:03:34,148 --> 00:03:38,542
all idea and I will show you how this idea came into existence

53
00:03:38,606 --> 00:03:42,482
with a demo. I'm going to show you a quick demo

54
00:03:42,536 --> 00:03:46,230
of core compiler which has programming abilities.

55
00:03:46,890 --> 00:03:50,834
Program which core compiler requires can be written in journey

56
00:03:50,882 --> 00:03:54,040
programming language which is an open source tool.

57
00:03:54,490 --> 00:03:57,606
So what I am going to do is I am going to

58
00:03:57,628 --> 00:04:01,594
switch to the postman. So I have created one server called

59
00:04:01,632 --> 00:04:05,722
as a to do server, our goto application for

60
00:04:05,776 --> 00:04:09,690
doing pet projects. Right. This to do server has

61
00:04:09,760 --> 00:04:13,118
rest APIs. So if you see the post

62
00:04:13,204 --> 00:04:16,222
method in this postman has

63
00:04:16,276 --> 00:04:18,960
localhost 9001 as an address.

64
00:04:19,330 --> 00:04:23,058
Now if I send a post request with

65
00:04:23,064 --> 00:04:25,860
a title bring milk, what happens?

66
00:04:26,550 --> 00:04:30,078
It creates a to do with a title bring milk.

67
00:04:30,254 --> 00:04:33,682
It gives it an id one and it sets its

68
00:04:33,736 --> 00:04:37,654
status as done as false. I can

69
00:04:37,692 --> 00:04:41,350
create one more to do bring eggs

70
00:04:41,690 --> 00:04:45,174
and it created one more to do. I can get all

71
00:04:45,212 --> 00:04:48,454
to dos using get method. So it gave

72
00:04:48,492 --> 00:04:51,830
me both the to dos bring milk and bring eggs.

73
00:04:51,990 --> 00:04:55,562
I can get a single to do like I need to provide

74
00:04:55,616 --> 00:04:59,194
the id of the to do. So I provided id as one

75
00:04:59,232 --> 00:05:02,714
and it gave me to do with id one which has title bring

76
00:05:02,752 --> 00:05:06,446
milk. So this is a sample application. Now I

77
00:05:06,468 --> 00:05:10,046
am going to show you while testing this application you will need to create so

78
00:05:10,068 --> 00:05:13,582
many data and all right what you can do with the tool

79
00:05:13,716 --> 00:05:17,346
which I have created. So I am going to

80
00:05:17,368 --> 00:05:21,026
go into the terminal now. Let's try to

81
00:05:21,048 --> 00:05:23,682
create a to do. So what I'm going to do is I'm going to run

82
00:05:23,736 --> 00:05:28,246
a command car, run create to

83
00:05:28,268 --> 00:05:31,734
do. Now if you see this command ran and

84
00:05:31,772 --> 00:05:35,110
this command is stuck at something, it's asking me please enter

85
00:05:35,180 --> 00:05:38,860
value for title of type catering so I can say

86
00:05:39,390 --> 00:05:42,634
bring vegetables. And it said

87
00:05:42,832 --> 00:05:45,610
it has done executing journey.

88
00:05:46,190 --> 00:05:50,202
Now let me see on postman whether

89
00:05:50,256 --> 00:05:53,946
this to do was created or not. So I'll say get all to dos

90
00:05:54,138 --> 00:05:57,710
and it has created a to do bring vegetables.

91
00:05:58,130 --> 00:06:01,454
That was the same to do that we created right over here on

92
00:06:01,492 --> 00:06:04,430
terminal, bring vegetables.

93
00:06:04,870 --> 00:06:08,514
Now to get all to dos I needed

94
00:06:08,552 --> 00:06:12,094
to go to postman, right? But same can be done with the command

95
00:06:12,142 --> 00:06:16,134
which I have created. What I am going to do is get

96
00:06:16,332 --> 00:06:19,574
all to dos. Now if I run this

97
00:06:19,612 --> 00:06:23,266
command, it is giving me all the to dos.

98
00:06:23,378 --> 00:06:26,694
If you see the response is a string which

99
00:06:26,732 --> 00:06:30,534
has to do with title, bring milk, bring eggs

100
00:06:30,662 --> 00:06:34,058
and bring vegetables. Now this is not what

101
00:06:34,144 --> 00:06:37,834
just the tool can do. I'm going to show you one more

102
00:06:37,872 --> 00:06:40,890
command, create multiple to dos.

103
00:06:41,470 --> 00:06:45,018
Now I want to create multiple to dos. Now how many to dos

104
00:06:45,034 --> 00:06:48,766
I want to create this is what tool is asking. Please enter value of to

105
00:06:48,788 --> 00:06:52,506
dos to create length. Now I'm

106
00:06:52,538 --> 00:06:55,998
going to give let's say I want to create twelve to dos.

107
00:06:56,174 --> 00:07:00,190
Now the tool is asking do you want random to do names?

108
00:07:00,350 --> 00:07:04,770
And the value which is asked is of type boolean.

109
00:07:05,110 --> 00:07:08,566
Do I want random to do names? Let's say yes and it

110
00:07:08,588 --> 00:07:11,794
said it's done executing the journey. Now let's

111
00:07:11,842 --> 00:07:15,398
get all to dos. Now you

112
00:07:15,404 --> 00:07:18,280
will see all to dos are over here.

113
00:07:18,830 --> 00:07:22,362
Whatever to dos these random to dos with random title were

114
00:07:22,416 --> 00:07:25,706
created. This is what tool can do.

115
00:07:25,888 --> 00:07:29,130
Now you must be wondering that is this tool

116
00:07:29,200 --> 00:07:32,774
just coded for to dos? No. In fact get all to dos

117
00:07:32,822 --> 00:07:35,854
create to do. These are all scripted. You can

118
00:07:35,892 --> 00:07:39,022
create multiple commands like this in the tool,

119
00:07:39,156 --> 00:07:42,634
how to script this and all. I'm going to show you in an extended

120
00:07:42,682 --> 00:07:45,790
demo. So let's switch back to the presentation.

121
00:07:46,370 --> 00:07:50,340
Now I am going to talk about how this idea started. It started

122
00:07:50,790 --> 00:07:54,082
with a lazy tester who wanted

123
00:07:54,136 --> 00:07:58,498
to automate mundane activities. Now this tester

124
00:07:58,674 --> 00:08:01,698
initially started this project with plain Java.

125
00:08:01,794 --> 00:08:05,606
Initial pilot was started with the java the tool which you

126
00:08:05,628 --> 00:08:09,506
see right now. The same tool was written in Java

127
00:08:09,618 --> 00:08:13,302
at the right hand side over here if you see there is a screenshot

128
00:08:13,366 --> 00:08:16,998
attached for how you going to create the commands.

129
00:08:17,094 --> 00:08:21,014
The entire tool was config driven right hand side. Whatever you see

130
00:08:21,152 --> 00:08:24,346
is just a config for creating commands.

131
00:08:24,378 --> 00:08:27,870
You needed to create folders and files in specific structure.

132
00:08:28,450 --> 00:08:31,886
All control structures were config driven. If you see all the

133
00:08:31,908 --> 00:08:36,002
control structures like block post all this info were

134
00:08:36,056 --> 00:08:39,746
config driven. It was highly designed on a specific

135
00:08:39,848 --> 00:08:44,050
convention that needed to be followed. Like you need to understand the convention

136
00:08:45,030 --> 00:08:48,230
with which these configurations to be created.

137
00:08:48,730 --> 00:08:52,646
To run a tool you needed to have specific version of Java and tool was

138
00:08:52,668 --> 00:08:56,454
bundled as a jar. It was used for real project

139
00:08:56,572 --> 00:09:01,258
as a productivity tool. So my past organization, in my past project

140
00:09:01,344 --> 00:09:05,130
I have used this Java based tool for creating

141
00:09:05,790 --> 00:09:09,466
multiple commands, productivity commands. Now what was

142
00:09:09,488 --> 00:09:13,134
the overall feedback? So I spread this tool across my

143
00:09:13,172 --> 00:09:15,600
colleagues and they started using this.

144
00:09:15,970 --> 00:09:19,998
And what was their feedback? They said the idea is really good

145
00:09:20,084 --> 00:09:23,634
tool like this simplifies lot of mundane activities but

146
00:09:23,672 --> 00:09:27,454
for creating actual command it is bit difficult and creator

147
00:09:27,502 --> 00:09:30,450
need to understand lot of convention followed.

148
00:09:31,190 --> 00:09:34,866
Also the tool has a dependency on specific version of

149
00:09:34,888 --> 00:09:38,614
Java and user needs to install Java. The tool is

150
00:09:38,652 --> 00:09:42,070
restrictive in terms of possibilities that can be done with it.

151
00:09:42,220 --> 00:09:45,446
So overall the feedback was this guy over at

152
00:09:45,468 --> 00:09:49,542
the right hand side saying then I felt I need to write

153
00:09:49,596 --> 00:09:53,514
this tool in a different programming language. Why? Because we

154
00:09:53,552 --> 00:09:57,270
need a language which can produce native tools. So I discarded Java.

155
00:09:57,350 --> 00:10:01,190
Not to bash Java. Java is useful in many places,

156
00:10:01,270 --> 00:10:05,274
but for this tool Java was not useful. Then I charted

157
00:10:05,322 --> 00:10:09,790
down what are the different needs from the programming language that

158
00:10:09,940 --> 00:10:13,822
I am being to write this tool in. So I said language

159
00:10:13,886 --> 00:10:17,326
should be able to produce cross platform executables

160
00:10:17,358 --> 00:10:21,086
because I needed a native binaries and I was intending

161
00:10:21,118 --> 00:10:25,178
to distribute this tool across Mac, Windows and Debian OS.

162
00:10:25,294 --> 00:10:29,154
So I needed a language which can produce cross

163
00:10:29,202 --> 00:10:32,754
platform executables. Language should be memory safe

164
00:10:32,802 --> 00:10:36,502
since tool is going to be highly programmable because

165
00:10:36,556 --> 00:10:41,206
we are going to write so I discarded the approach of config driven commands,

166
00:10:41,318 --> 00:10:44,966
rather I took the approach of code driven commands.

167
00:10:44,998 --> 00:10:49,014
So we are going to write a programming language or a domain specific language

168
00:10:49,142 --> 00:10:52,190
and as it is going to be highly programmable,

169
00:10:52,610 --> 00:10:56,234
the language in which we are going to code. This should be memory

170
00:10:56,282 --> 00:10:59,742
safe. Language should cater to high concurrency needs

171
00:10:59,796 --> 00:11:03,434
since tool can be further adapted for writing mock servers

172
00:11:03,482 --> 00:11:07,598
and load test because we are going to write mock servers which could be invoked

173
00:11:07,614 --> 00:11:10,446
with high concurrency and load tests with high concurrency.

174
00:11:10,558 --> 00:11:14,350
So language should cater to the high concurrency demand

175
00:11:14,510 --> 00:11:18,146
ecosystem around. Language should have ready made libraries for creating

176
00:11:18,178 --> 00:11:21,862
CLI tools. As you saw in the demo, we were invoking entire tool

177
00:11:21,916 --> 00:11:25,730
with the command line arguments, so we needed to create a CLI

178
00:11:25,890 --> 00:11:29,446
parsers and all language should be systems programming

179
00:11:29,478 --> 00:11:33,610
language since tool may be further extended for lower level programmability.

180
00:11:34,270 --> 00:11:37,706
Language should have low or no GC footprint since tool will

181
00:11:37,728 --> 00:11:41,534
be further extended for load testing because in

182
00:11:41,572 --> 00:11:45,082
load testing every user's interaction matters,

183
00:11:45,146 --> 00:11:48,910
right? So it should have low or no GC footprint

184
00:11:49,410 --> 00:11:52,606
and language should be typesafe. So based on

185
00:11:52,628 --> 00:11:56,074
this, I evaluated three systems programming

186
00:11:56,122 --> 00:11:59,198
language, C plus plus, Rust and Go. At that time,

187
00:11:59,364 --> 00:12:02,734
both all C plus plus, rust and Go are systems programming

188
00:12:02,782 --> 00:12:06,242
language. They can produce native binaries and they can support

189
00:12:06,296 --> 00:12:09,622
very high concurrencies and they have libraries for building

190
00:12:09,676 --> 00:12:13,570
CLI tools. Everything was same for all, chose three languages

191
00:12:13,650 --> 00:12:16,482
up till here. But when it comes to memory safety,

192
00:12:16,546 --> 00:12:20,098
memory safety is not a language feature and is programmer's job in

193
00:12:20,124 --> 00:12:22,918
case of C. In case of Rust,

194
00:12:23,094 --> 00:12:26,474
Rust is a memory safe language and memory safety is

195
00:12:26,512 --> 00:12:29,818
forced on a programmer. In case of Go is

196
00:12:29,824 --> 00:12:33,146
also memory safe, but it's not forced on a programmer and programmer

197
00:12:33,178 --> 00:12:36,446
can choose to escape memory safety. When it comes

198
00:12:36,468 --> 00:12:40,414
to C. C has no GC footprint and memory management is

199
00:12:40,452 --> 00:12:43,818
pure programmer's job when it comes to rust. It has

200
00:12:43,844 --> 00:12:47,374
no GC footprint and rust forces memory management via borrow

201
00:12:47,422 --> 00:12:50,674
checker when it comes to go. Go has a

202
00:12:50,712 --> 00:12:54,206
little bit of garbage collector which periodically scans heap

203
00:12:54,238 --> 00:12:58,454
for unused objects. So when I

204
00:12:58,492 --> 00:13:01,778
compared the need with the languages and the three languages,

205
00:13:01,954 --> 00:13:05,030
I thought like Rust will be matching most of the needs.

206
00:13:05,180 --> 00:13:08,578
I never knew how to write code in rust.

207
00:13:08,754 --> 00:13:12,022
I was new to the rust, but I still took that challenge

208
00:13:12,086 --> 00:13:15,622
and I started writing this tool in Rust. The lovely

209
00:13:15,686 --> 00:13:19,930
rust. Rust is called as the most loud programming language.

210
00:13:20,350 --> 00:13:24,014
I have heard this statement about Rust that

211
00:13:24,052 --> 00:13:27,834
Rust takes its type safety on steroids. Like you can't

212
00:13:27,882 --> 00:13:31,914
escape rust type safety. The code won't even compile

213
00:13:31,962 --> 00:13:35,902
if it is not type safe. And there was one exaggerated

214
00:13:36,046 --> 00:13:39,534
statement I had about trust that if your code compiles

215
00:13:39,582 --> 00:13:43,394
it will less likely have any issues. Like even to get your

216
00:13:43,432 --> 00:13:47,518
code into the compile state you need to fight lot with the compiler.

217
00:13:47,614 --> 00:13:51,282
That's what I have heard about trust. Although it is an exaggerated

218
00:13:51,346 --> 00:13:55,222
statement. Your code may still have functional issues and other issues,

219
00:13:55,276 --> 00:13:59,574
but you will have some sort of assurance if your code compiles then

220
00:13:59,612 --> 00:14:03,606
I created a project plan for this entire project. I designed

221
00:14:03,638 --> 00:14:07,162
the architecture which you can see on the right hand side. All the green

222
00:14:07,216 --> 00:14:10,022
boxes over here are the code blocks.

223
00:14:10,166 --> 00:14:14,094
All the blue boxes over here are the compilers and tools which

224
00:14:14,212 --> 00:14:18,026
I use for creating this project, and the black boxes

225
00:14:18,058 --> 00:14:21,774
which you see are the binaries which are produced. The pink box

226
00:14:21,812 --> 00:14:25,346
over here is a small plugin that I created, and the red box over

227
00:14:25,368 --> 00:14:28,846
here is an intellij idea for which this plugin was created.

228
00:14:29,038 --> 00:14:32,894
This entire tool was written in rust programming

229
00:14:32,942 --> 00:14:36,950
language, although there was some one more project

230
00:14:37,100 --> 00:14:40,760
where I created a plugin for this tool

231
00:14:41,130 --> 00:14:45,302
in a Kotlin programming language. But wool tool

232
00:14:45,356 --> 00:14:48,102
is written in rust programming language.

233
00:14:48,246 --> 00:14:52,134
The plugin which I was talking about is an intellij

234
00:14:52,182 --> 00:14:55,834
plugin which can be used with Intellij idea.

235
00:14:56,032 --> 00:15:00,034
So that Intellij idea understand this journey programming language

236
00:15:00,102 --> 00:15:03,994
and it provides intelligence around its syntaxes

237
00:15:04,042 --> 00:15:07,882
and other stuff. So in the project plan I designed

238
00:15:07,946 --> 00:15:11,680
and created architecture of this entire project.

239
00:15:12,290 --> 00:15:15,982
Writing unit integration and end to end test were necessary

240
00:15:16,046 --> 00:15:19,486
for this project because this was going to be an open source

241
00:15:19,518 --> 00:15:23,214
project and I may sometime have time or sometime

242
00:15:23,262 --> 00:15:26,986
may not have time and if there is a need for any feature

243
00:15:27,118 --> 00:15:31,046
then I should be quickly able to tweak the code with

244
00:15:31,148 --> 00:15:34,534
getting lot of backlog that I have lost my

245
00:15:34,572 --> 00:15:38,586
touch with the code. So I should be quickly run the test to

246
00:15:38,608 --> 00:15:42,326
verify whether I am not breaking anything. Creating Intellij

247
00:15:42,358 --> 00:15:46,394
idea plugin for adoption of language was

248
00:15:46,432 --> 00:15:49,834
also necessary. Adding more features as

249
00:15:49,872 --> 00:15:53,914
and when required was also necessary. Evaluating existing

250
00:15:53,962 --> 00:15:57,694
open source libraries for not reinventing the wheel like

251
00:15:57,812 --> 00:16:01,210
in the entire progress of this writing,

252
00:16:01,290 --> 00:16:04,986
this tool, I used so many libraries which I am going to talk about

253
00:16:05,108 --> 00:16:09,074
so that I don't need to write so many code, custom code by myself.

254
00:16:09,272 --> 00:16:12,994
This was a project plan that I had. I'm talking

255
00:16:13,032 --> 00:16:16,390
about the designing and architecture of this project. This project

256
00:16:16,460 --> 00:16:19,430
was built into four different components.

257
00:16:19,770 --> 00:16:22,946
There were three rust crates that were created

258
00:16:23,138 --> 00:16:27,014
which was one of those was server, other was compiler and

259
00:16:27,052 --> 00:16:31,046
other one was library and there was separate project for Intellij plugin

260
00:16:31,078 --> 00:16:34,746
which was Kotlin Brace project. The server which I called

261
00:16:34,848 --> 00:16:38,934
Cors was a websocket based server which can be interacted

262
00:16:38,982 --> 00:16:42,686
with. It can be integrated with any messaging application.

263
00:16:42,788 --> 00:16:46,942
So the tool which you were seeing, the commands which were invoking on

264
00:16:46,996 --> 00:16:50,714
item or command line can be invoked from any messaging

265
00:16:50,762 --> 00:16:54,606
application. The compiler or the core compiler

266
00:16:54,638 --> 00:16:57,906
that compiles project and creates distributable package which can be

267
00:16:57,928 --> 00:17:00,978
used with servers and other was also one of

268
00:17:00,984 --> 00:17:05,042
the crate and most meaty part of this code was

269
00:17:05,096 --> 00:17:08,838
a library that has most meaty parsing and execution logic which can

270
00:17:08,844 --> 00:17:13,026
be reused in server and compiler. And the plugin was an intellij

271
00:17:13,058 --> 00:17:16,642
plugin to provide intelligence around syntax of the language

272
00:17:16,786 --> 00:17:20,466
and I needed to write unit integration and end to end test as a safety

273
00:17:20,498 --> 00:17:24,662
net throughout this project progressed.

274
00:17:24,806 --> 00:17:27,962
This project started as a tool for test data

275
00:17:28,016 --> 00:17:31,434
creation by invoking rest APIs, but it saw

276
00:17:31,552 --> 00:17:35,066
lot of demand for the features. Like one of my employer

277
00:17:35,098 --> 00:17:39,086
asked me to add a feature of service virtualization because the

278
00:17:39,108 --> 00:17:43,310
product which we were testing had integrations with lot of third party

279
00:17:43,910 --> 00:17:47,694
systems and those third party systems were not providing good sandboxes.

280
00:17:47,742 --> 00:17:51,234
So we almost automated like ten plus third

281
00:17:51,272 --> 00:17:54,526
party systems. We service virtualized those ten plus third party

282
00:17:54,558 --> 00:17:58,230
systems with this tool with the added feature of service virtualization.

283
00:17:58,890 --> 00:18:02,854
I also added feature of test data creation directly into DB. So you

284
00:18:02,892 --> 00:18:06,006
saw I was creating test data using rEst APIs, but I

285
00:18:06,028 --> 00:18:09,306
can create test data directly into the DB using the tool as

286
00:18:09,328 --> 00:18:13,402
well. Then one of my employer was

287
00:18:13,456 --> 00:18:17,146
testing websocket based servers. While I was

288
00:18:17,248 --> 00:18:21,094
researching for any ready made tools for load testing websocket

289
00:18:21,142 --> 00:18:24,282
based server, there were some tools but they were not handling

290
00:18:24,346 --> 00:18:28,030
event loops properly because I used Tokyo in this project

291
00:18:28,100 --> 00:18:32,186
which was already having event loop. So I just needed to spawn

292
00:18:32,218 --> 00:18:36,206
the scripts in a load test manner. So load

293
00:18:36,238 --> 00:18:39,682
test feature also got added into this tool. Then later

294
00:18:39,736 --> 00:18:43,010
on I removed cores which is a server component

295
00:18:43,670 --> 00:18:47,110
which can be reintroduced later because it had low

296
00:18:47,260 --> 00:18:50,774
adoption, many people were not using it.

297
00:18:50,892 --> 00:18:54,806
I added CI CD pipeline to automatically create platform specific

298
00:18:54,908 --> 00:18:58,674
installables like Homebu, formula, windows installers

299
00:18:58,722 --> 00:19:02,794
and debian installers. And all these installers are being used because some

300
00:19:02,832 --> 00:19:06,138
of the folks from the teams were using Windows machines, some of the

301
00:19:06,144 --> 00:19:09,546
folks from the team were using Linux machine and some of the folks from

302
00:19:09,568 --> 00:19:13,342
the team were using Mac machines. Now throughout this

303
00:19:13,396 --> 00:19:16,862
all writing journey of this tool I had

304
00:19:16,916 --> 00:19:21,002
really good experiences with Rust. I had initial typical

305
00:19:21,066 --> 00:19:24,850
struggles of fighting with Rust compiler for code to compile

306
00:19:25,270 --> 00:19:29,170
entire async ecosystem in rust is highly customizable.

307
00:19:29,510 --> 00:19:33,534
Crates like Tokyo, Asyncrate, Norm, Clap Sud were highly

308
00:19:33,582 --> 00:19:36,766
used needed to use nightly since many

309
00:19:36,808 --> 00:19:40,706
language features and libraries used require nightly features.

310
00:19:40,898 --> 00:19:44,214
Some libraries were either nonexistent or were not

311
00:19:44,252 --> 00:19:47,554
in mature state. So I needed to create quick and dirty reusable

312
00:19:47,602 --> 00:19:50,630
libraries like async, rdbc, etc.

313
00:19:51,150 --> 00:19:54,794
Every time a code that was compiled was rewarding since

314
00:19:54,832 --> 00:19:58,410
it used to ensure something working has been reproduced.

315
00:19:58,750 --> 00:20:02,602
Writing unit integration and end to end test provided necessary

316
00:20:02,666 --> 00:20:06,366
safety net to modify features regularly without being anything

317
00:20:06,548 --> 00:20:10,042
so I can carelessly tweak the features

318
00:20:10,106 --> 00:20:13,754
and unit integration and e two e test used to give me enough

319
00:20:13,812 --> 00:20:17,330
safety net that I am not breaking anything because there were already

320
00:20:17,400 --> 00:20:21,518
users using this tool. I got all answers in community forums

321
00:20:21,534 --> 00:20:25,750
and on community discord server when was stuck.

322
00:20:26,090 --> 00:20:29,414
I used different libraries while coding for this tool.

323
00:20:29,452 --> 00:20:33,062
Like a norm for creating parsers and ast I used

324
00:20:33,116 --> 00:20:36,594
Tokyo as an asynchronous runtime.

325
00:20:36,722 --> 00:20:40,074
I used hypher for low level servers, I used

326
00:20:40,112 --> 00:20:43,610
cert and cert JSon for serialization and deserialization.

327
00:20:43,950 --> 00:20:48,246
The clap library came handy for cli parser futures

328
00:20:48,278 --> 00:20:51,974
and futures utils for some readymade futures features.

329
00:20:52,022 --> 00:20:55,978
With async code there is this very good trade called async

330
00:20:55,994 --> 00:20:59,294
trade for lot of async code with trades. I use

331
00:20:59,332 --> 00:21:03,434
async recursion as well because at some places I needed to write recursive

332
00:21:03,482 --> 00:21:07,854
code in async blocks. I use fake library

333
00:21:07,982 --> 00:21:11,346
for writing some fake data generators. I use Mokito as well

334
00:21:11,368 --> 00:21:15,650
for creating test doubles for test and I use many more other libraries.

335
00:21:16,090 --> 00:21:19,478
Now we will see the extended demo of this

336
00:21:19,564 --> 00:21:23,960
tool. So you must be wondering like

337
00:21:24,890 --> 00:21:27,682
how this code is written,

338
00:21:27,746 --> 00:21:31,754
right? So let me show you the code which

339
00:21:31,792 --> 00:21:35,930
is creating a to do. This is very small

340
00:21:36,000 --> 00:21:39,466
chose which is just eight lines of code. You can see

341
00:21:39,648 --> 00:21:43,186
I have a create to do which is parameterized

342
00:21:43,238 --> 00:21:46,506
which has title. I am calling post request.

343
00:21:46,538 --> 00:21:50,074
So if you see this looks like a programming language, you can see the syntax

344
00:21:50,122 --> 00:21:54,162
highlighting as well. Post request I can pass URL text this text

345
00:21:54,216 --> 00:21:58,322
is like a text template. I can pass. I can provide variables as well over

346
00:21:58,376 --> 00:22:02,302
here with body object title title.

347
00:22:02,366 --> 00:22:05,886
Now if you see over here, title is nowhere,

348
00:22:06,078 --> 00:22:09,718
nowhere asked for or nowhere coded. So this tool

349
00:22:09,804 --> 00:22:13,334
uses a principle of correlation. Whatever is not known it will

350
00:22:13,372 --> 00:22:16,966
ask the user. So I'll show you quickly what

351
00:22:16,988 --> 00:22:20,860
I mean by that. So when I say chose run

352
00:22:22,030 --> 00:22:26,426
create to do what is actually happening is

353
00:22:26,528 --> 00:22:29,818
it is looking for title within a code

354
00:22:29,984 --> 00:22:33,502
within its existing runtime. While this script is running,

355
00:22:33,636 --> 00:22:37,262
it didn't find title so it asked user please enter

356
00:22:37,316 --> 00:22:41,040
a value for title of type string. I can say

357
00:22:41,890 --> 00:22:45,594
bring tomatoes and it ran

358
00:22:45,642 --> 00:22:48,110
the journey. Similarly,

359
00:22:48,770 --> 00:22:52,514
when I am calling get all to Dos, you will see I'm calling a

360
00:22:52,552 --> 00:22:56,402
get request with URL text like this. Now here

361
00:22:56,456 --> 00:22:59,782
you will see there is one more correlation happening matching body

362
00:22:59,836 --> 00:23:04,274
object result. So this tool has ability to capture response

363
00:23:04,322 --> 00:23:07,774
from the rest APIs as well. So if you see get request

364
00:23:07,842 --> 00:23:11,830
is done over here. But this additional clause

365
00:23:11,910 --> 00:23:14,986
matching body object result will capture the

366
00:23:15,008 --> 00:23:19,498
response in the variable result. And here we are printing text

367
00:23:19,584 --> 00:23:23,370
template result. So if you see I have used text template

368
00:23:23,530 --> 00:23:27,614
with a variable result. So if I say get

369
00:23:27,652 --> 00:23:31,120
all to Dos, let's see what happens. Get all

370
00:23:31,490 --> 00:23:34,674
to Dos, you will

371
00:23:34,712 --> 00:23:38,802
see this code ran get request. It stored the

372
00:23:38,856 --> 00:23:42,834
response in result and it printed the result as

373
00:23:43,032 --> 00:23:46,566
a single line. You can see this code is

374
00:23:46,588 --> 00:23:51,350
just six lines of code and it can produce tremendous results.

375
00:23:51,690 --> 00:23:54,950
Now let's talk about get single

376
00:23:55,020 --> 00:23:58,986
to do. Okay? Before going showing you

377
00:23:59,008 --> 00:24:02,554
the script, I will just run get single to

378
00:24:02,592 --> 00:24:05,914
do. Now it is asking please

379
00:24:05,952 --> 00:24:09,226
enter value for Id of type positive integer. Like what is

380
00:24:09,248 --> 00:24:12,940
the id of the to do? If I say id is three,

381
00:24:13,470 --> 00:24:16,814
it gave me the to do with id three. Now let's see, what is the

382
00:24:16,852 --> 00:24:20,286
script written for this? So you'll see it is calling a

383
00:24:20,308 --> 00:24:23,966
get request. And as we said like this is a

384
00:24:23,988 --> 00:24:28,062
text template where we are passing id as a parameter

385
00:24:28,206 --> 00:24:31,742
and we are declaring that the id should be positive integer.

386
00:24:31,806 --> 00:24:35,054
So while you saw it asked me please enter value of Id

387
00:24:35,112 --> 00:24:38,374
of type positive integer. So let's call

388
00:24:38,412 --> 00:24:42,966
the same script and let's see if I provide text

389
00:24:43,068 --> 00:24:47,074
instead of integer. It says that invalid

390
00:24:47,122 --> 00:24:50,906
value. Please enter value of type positive integer, right? So if

391
00:24:50,928 --> 00:24:54,666
I say, let's say ten, it gave me to

392
00:24:54,688 --> 00:24:58,570
do with id ten. Now you are seeing

393
00:24:58,640 --> 00:25:02,326
all this is happening on a server, right? Like to do server.

394
00:25:02,438 --> 00:25:06,074
In fact this entire to do server is also written in the journey

395
00:25:06,122 --> 00:25:10,170
programming language. You can see how we can do service virtualization.

396
00:25:10,330 --> 00:25:14,130
So you can see here what we are doing is we are listening on

397
00:25:14,200 --> 00:25:18,190
9001 with these scriptlets

398
00:25:18,350 --> 00:25:22,686
like we are saying on post with URL. This is again text template matching

399
00:25:22,718 --> 00:25:27,442
request body object title. So we are capturing variable

400
00:25:27,506 --> 00:25:31,046
title from body object and we are

401
00:25:31,228 --> 00:25:34,614
creating a to do object. We are pushing it into the

402
00:25:34,652 --> 00:25:38,754
temporary variable to Dos and we are responding with status

403
00:25:38,802 --> 00:25:42,326
20 one and body object to do. So. This is like a dynamic

404
00:25:42,358 --> 00:25:46,026
service virtualization that we did for entire to do server. In fact we

405
00:25:46,048 --> 00:25:49,734
wrote entire to do server in this programming

406
00:25:49,782 --> 00:25:53,294
language. Similarly, when I say get all so

407
00:25:53,332 --> 00:25:56,826
I am just returning all the to DoS like respond

408
00:25:56,858 --> 00:25:59,898
with status 200 and body object to DoS.

409
00:26:00,074 --> 00:26:03,858
When I am asking for single to do. I have this

410
00:26:04,024 --> 00:26:07,586
text URL as a parameterized id as

411
00:26:07,608 --> 00:26:12,094
a positive integer. So it will automatically grab

412
00:26:12,222 --> 00:26:15,438
from the URL the number and it will

413
00:26:15,624 --> 00:26:19,586
assign id variable that value. The resultant

414
00:26:19,618 --> 00:26:23,094
status is 404 and resultant body is to do

415
00:26:23,132 --> 00:26:26,902
not found. If this loop doesn't succeed then

416
00:26:26,956 --> 00:26:30,394
this value will be remaining as it is. So you will see on the for

417
00:26:30,432 --> 00:26:34,346
loop what we are doing is we are searching for that to

418
00:26:34,368 --> 00:26:38,678
DoS for. So this variable is iterated and item

419
00:26:38,774 --> 00:26:42,086
Id is compared with this id. Now once this

420
00:26:42,128 --> 00:26:45,226
id is found then we are setting response

421
00:26:45,258 --> 00:26:48,686
body as item and response status as 200 and we are

422
00:26:48,708 --> 00:26:52,126
responding with a status r status and a body object

423
00:26:52,308 --> 00:26:56,370
r body. So this is how we did entire service virtualization.

424
00:26:57,110 --> 00:27:00,546
In case you are interested to have a look at the code of

425
00:27:00,568 --> 00:27:04,174
the server. So this is purely written in rust.

426
00:27:04,222 --> 00:27:07,826
As I said, there are three major crates which are written

427
00:27:07,858 --> 00:27:11,606
over here. One was deleted, course is deleted. So we

428
00:27:11,628 --> 00:27:15,334
have only two now. Chose and Corlin, I have examples over

429
00:27:15,372 --> 00:27:18,742
here and playground over here like playground.

430
00:27:18,806 --> 00:27:22,426
I created just for testing the scripts actually.

431
00:27:22,608 --> 00:27:27,046
But if I say chose,

432
00:27:27,238 --> 00:27:31,440
if I say cargo test,

433
00:27:32,850 --> 00:27:36,702
it will run all my test. The entire project is test

434
00:27:36,756 --> 00:27:40,634
driven and you will see all the code written

435
00:27:40,682 --> 00:27:44,798
over here has followed the rest structure.

436
00:27:44,974 --> 00:27:49,330
We are writing library in journey

437
00:27:49,750 --> 00:27:53,474
states, steps and all. So you have

438
00:27:53,512 --> 00:27:56,322
seen like this has passed so many test cases.

439
00:27:56,386 --> 00:27:58,710
263 test cases are passed.

440
00:28:00,090 --> 00:28:02,950
So this was all about a presentation.

441
00:28:03,610 --> 00:28:07,074
Now I'm being to conclude my talk with this demo. Overall,

442
00:28:07,122 --> 00:28:10,634
writing a programming language in rust was a very rewarding experience.

443
00:28:10,832 --> 00:28:14,106
The tool created and a programming language created has

444
00:28:14,128 --> 00:28:18,198
been used by my past employers and present for service virtualization

445
00:28:18,294 --> 00:28:21,674
test data creation load testing, hence it had a very well adoption

446
00:28:21,722 --> 00:28:25,834
as well. The whole rust ecosystem is a great place for experiments,

447
00:28:25,882 --> 00:28:29,982
tools and projects like this. The feared learning curve with

448
00:28:30,036 --> 00:28:33,246
Rust had a minimal impact as the

449
00:28:33,268 --> 00:28:36,594
programming settles. With Rust, it feels more rewarding to

450
00:28:36,632 --> 00:28:40,478
create great code than initial struggle of fighting with language.

451
00:28:40,654 --> 00:28:44,334
No wonder why Rust is called most loud programming language

452
00:28:44,462 --> 00:28:48,086
and I consider journey programming language is as one of

453
00:28:48,108 --> 00:28:51,750
my best work and I feel really proud about creating something

454
00:28:51,820 --> 00:28:53,910
that is useful using Rust.

455
00:28:55,610 --> 00:28:59,506
I convey my sincere thanks for free peak and canva

456
00:28:59,538 --> 00:29:03,714
for all graphics for this illustration. I am thankful to confortito

457
00:29:03,762 --> 00:29:07,446
for opportunity to present and entire rust community for

458
00:29:07,468 --> 00:29:09,700
awesome support and ecosystem. Thank you.

