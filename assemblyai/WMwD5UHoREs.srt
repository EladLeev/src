1
00:01:42,050 --> 00:01:45,422
Hi, welcome to my session. This is plan

2
00:01:45,476 --> 00:01:49,162
for unplanned work game days with chaos

3
00:01:49,226 --> 00:01:52,910
Engineering. My name is Mandy Walls. I am a

4
00:01:53,060 --> 00:01:56,414
DevOps advocate at Pagerduty. If you'd like to get in touch

5
00:01:56,452 --> 00:01:59,450
with me, you can tweet at me. I'm lnxchk on Twitter.

6
00:01:59,530 --> 00:02:02,078
You can also email me. I'm mwalls@pagerduty.com.

7
00:02:02,084 --> 00:02:05,794
Pagerduty is hiring. We've got some positions

8
00:02:05,842 --> 00:02:09,426
open. You can check those out@pagerduty.com. Slash careers

9
00:02:09,538 --> 00:02:14,598
that's the last time we talk about Peter duty. So what

10
00:02:14,604 --> 00:02:19,226
do we do? We do a bit of incidents response and we

11
00:02:19,248 --> 00:02:23,590
want to get better at incident response. Having better incident response

12
00:02:23,670 --> 00:02:26,826
helps our reliability, it helps our customer experience.

13
00:02:27,008 --> 00:02:30,406
But getting better at incident response is

14
00:02:30,448 --> 00:02:34,014
a double edged sword. We want to get better and to get better

15
00:02:34,052 --> 00:02:37,630
at most things, what you do is you practice.

16
00:02:37,970 --> 00:02:41,322
But to practice getting better at incident

17
00:02:41,386 --> 00:02:45,038
response, that means we

18
00:02:45,204 --> 00:02:48,626
want to have more incidents, but we really don't want to have

19
00:02:48,648 --> 00:02:52,190
more incidents. So what can we do to give ourselves

20
00:02:52,350 --> 00:02:56,706
a place to practice? Incidents response

21
00:02:56,818 --> 00:03:00,182
is a muscle that has to be exercised like anything

22
00:03:00,236 --> 00:03:03,522
else, right? The workflows, your communications patterns,

23
00:03:03,586 --> 00:03:06,962
the who and where doesn't just happen by magic.

24
00:03:07,026 --> 00:03:10,826
Like, you train people how to do it and they get

25
00:03:10,848 --> 00:03:14,954
better at it over time, right? So we don't want to

26
00:03:15,072 --> 00:03:18,906
do that in public as

27
00:03:18,928 --> 00:03:22,878
much as we possibly, possibly can. But we want to

28
00:03:23,044 --> 00:03:27,326
give folks a place to practice what they

29
00:03:27,508 --> 00:03:31,118
do when there's a real issue, right? So that's what

30
00:03:31,204 --> 00:03:35,470
we're going to take a look at. So many organizations

31
00:03:35,630 --> 00:03:39,186
and even individual teams now are using

32
00:03:39,368 --> 00:03:42,754
a game days practice to build

33
00:03:42,872 --> 00:03:46,462
those muscles around incident response and around troubleshooting

34
00:03:46,526 --> 00:03:49,846
and just sort of getting used to what it

35
00:03:49,868 --> 00:03:53,378
means to triage and troubleshoot incidents on their environments.

36
00:03:53,474 --> 00:03:56,466
At pager duty, we refer to them as failure Fridays.

37
00:03:56,578 --> 00:04:00,742
And we've been kind of like talking about this for almost

38
00:04:00,796 --> 00:04:04,266
ten years. Honestly, I think the blog post I have here is from, I think,

39
00:04:04,288 --> 00:04:07,478
2013. We refer to them as failure Fridays,

40
00:04:07,494 --> 00:04:11,274
and sometimes they're failure any day, right? If they happen to not be on

41
00:04:11,312 --> 00:04:15,306
Friday. But the Fridays are for the big ones. But regular teams

42
00:04:15,338 --> 00:04:19,038
can sort of do whatever they need to during the week. The point of

43
00:04:19,044 --> 00:04:22,554
the exercise, though, is to make sure that production

44
00:04:22,602 --> 00:04:26,354
operation systems are doing what we need them to do when

45
00:04:26,392 --> 00:04:30,322
we need them to do it. And this can be a number of

46
00:04:30,456 --> 00:04:34,126
different things that are sort of attached to your production

47
00:04:34,158 --> 00:04:37,682
ecosystem are metrics and observability tools,

48
00:04:37,746 --> 00:04:41,206
giving us the right telemetry in the right way that we

49
00:04:41,228 --> 00:04:44,866
can access it. Are the escalation policies or notifications

50
00:04:44,898 --> 00:04:48,534
and incident rooms and all that stuff working as we expect

51
00:04:48,572 --> 00:04:52,774
them to do? Folks know what is expected of them and

52
00:04:52,892 --> 00:04:56,774
where to go to gives them more information. You don't want them scrambling

53
00:04:56,822 --> 00:05:00,106
around during a real incident. Right? And if we need to push a

54
00:05:00,128 --> 00:05:03,738
fix, how do

55
00:05:03,744 --> 00:05:07,678
we do that? Is there a short circuit for the regular process?

56
00:05:07,764 --> 00:05:10,958
Does it have to go back through the full pipeline? What are we going to

57
00:05:10,964 --> 00:05:14,122
do there? Real incidents can be super stressful,

58
00:05:14,186 --> 00:05:18,526
especially when they're customer impacting. And not everyone has the temperament

59
00:05:18,638 --> 00:05:21,602
to be calm and think through things.

60
00:05:21,736 --> 00:05:25,342
People get super hyped up, right? So we also want to give folks

61
00:05:25,486 --> 00:05:29,622
a chance to experience what happens when something isn't running

62
00:05:29,676 --> 00:05:33,862
smoothly. So we can do this with some

63
00:05:33,996 --> 00:05:37,922
failure Fridays, some game days, and we can introduce a little bit of experimentation

64
00:05:37,986 --> 00:05:41,354
into those. We want to go into our game days and our

65
00:05:41,392 --> 00:05:45,082
failure Fridays with a goal. Maybe it sounds cool

66
00:05:45,216 --> 00:05:49,142
to just walk through your data center and pull cables, or scroll through the assets

67
00:05:49,206 --> 00:05:52,666
list in a public cloud and just delete something randomly.

68
00:05:52,858 --> 00:05:55,280
But that isn't where you should be starting.

69
00:05:55,890 --> 00:05:59,114
Reliability and resilience improvement practice,

70
00:05:59,162 --> 00:06:02,394
that's not going to give you the best benefit when what you want to

71
00:06:02,452 --> 00:06:06,002
do is create an environment for everyone

72
00:06:06,056 --> 00:06:10,206
to improve on things. Chaos engineering lets

73
00:06:10,238 --> 00:06:13,954
you compare what you think will happen to

74
00:06:13,992 --> 00:06:17,426
what actually happens in your systems. You literally are

75
00:06:17,448 --> 00:06:21,186
going to break things on purpose to learn how to build more resilient

76
00:06:21,218 --> 00:06:25,074
systems. And this is going to help you build better technical

77
00:06:25,122 --> 00:06:28,918
systems. It's also going to help you build better sociotechnical systems,

78
00:06:29,014 --> 00:06:32,170
which is all of that human workflow that goes into

79
00:06:32,240 --> 00:06:35,738
responding to an incidents, troubleshooting, resolving, and all

80
00:06:35,744 --> 00:06:39,834
of those pieces. Right. Chaos engineering can

81
00:06:39,872 --> 00:06:43,402
make it sound kind of scary or maybe irreverent

82
00:06:43,466 --> 00:06:47,034
for some teams. You might also find programs that call it fault

83
00:06:47,082 --> 00:06:50,298
injection, which sounds a little bit more serious.

84
00:06:50,394 --> 00:06:53,826
But what we're really after is taking the systems as

85
00:06:53,848 --> 00:06:57,506
we know them, changing things around a little bit, and see what happens.

86
00:06:57,608 --> 00:07:01,406
So we're going to use chaos engineering to validate

87
00:07:01,518 --> 00:07:05,346
the assumptions we have about how our

88
00:07:05,448 --> 00:07:09,010
systems are going to behave when they meet the users.

89
00:07:09,590 --> 00:07:13,126
Your best laid plans might go out the window when you find out what

90
00:07:13,148 --> 00:07:16,450
the users are actually going to do with the product. Right. The goal of combining

91
00:07:16,530 --> 00:07:20,162
the structure of chaos engineering and specific tests

92
00:07:20,306 --> 00:07:23,786
with a regular cadence of intentional practices is really going to

93
00:07:23,808 --> 00:07:27,594
make sure that what you're putting in front of your users is the best

94
00:07:27,632 --> 00:07:31,306
system possible. You want to make sure you're not forgetting about all

95
00:07:31,328 --> 00:07:34,902
that dependency back there. You do a black hole test, which means like taking,

96
00:07:34,976 --> 00:07:38,318
pretending that back end is offline and then what happens to the

97
00:07:38,324 --> 00:07:41,774
front end? What's it do? How are you going to mitigate that and working

98
00:07:41,812 --> 00:07:44,946
through all of those things? So we want to be

99
00:07:44,968 --> 00:07:49,486
intentional about what we're doing and not just random picking

100
00:07:49,518 --> 00:07:53,486
things apart. When we're looking at what we want to actually improve,

101
00:07:53,598 --> 00:07:57,766
our goals are to learn and we want to focus on

102
00:07:57,868 --> 00:08:01,174
the customer experience. That's the whole point, to keep

103
00:08:01,212 --> 00:08:05,286
customers and users happy and give them the best experience possible.

104
00:08:05,468 --> 00:08:09,842
So when we're planning out testing programs and failure scenarios,

105
00:08:09,986 --> 00:08:14,150
we want to keep the users in mind. We want to improve the reliability

106
00:08:14,310 --> 00:08:17,786
and resilience of the components that our users rely on the

107
00:08:17,808 --> 00:08:20,890
most and where they expect the best performance.

108
00:08:22,130 --> 00:08:25,454
A testing scenario that only flexes part of the

109
00:08:25,492 --> 00:08:28,270
application that users aren't utilizing.

110
00:08:28,610 --> 00:08:32,158
It's like a tree falling in the forest. It's a

111
00:08:32,164 --> 00:08:35,506
lot of work with little impact on the overall success of your

112
00:08:35,528 --> 00:08:39,426
service. So we want to focus on components that are going to generate the

113
00:08:39,448 --> 00:08:42,546
most stress when they go down or become

114
00:08:42,648 --> 00:08:46,558
unreliable. To have a successful chaos testing

115
00:08:46,574 --> 00:08:50,598
and game day practice, you want to have some things in place first,

116
00:08:50,684 --> 00:08:54,694
right? It's kind of enticing to sort of go in at the beginning and create

117
00:08:54,732 --> 00:08:58,294
one of these practices. But you need some tools aligned

118
00:08:58,342 --> 00:09:02,326
first. One, you're going to want at least some basic monitoring

119
00:09:02,358 --> 00:09:05,882
and telemetry. It's absolutely fine and

120
00:09:05,936 --> 00:09:09,210
really kind of expected to use your

121
00:09:09,280 --> 00:09:12,654
game days to flex your monitoring and try

122
00:09:12,692 --> 00:09:16,302
and figure out what you're missing. What other piece of data would

123
00:09:16,356 --> 00:09:19,774
have shown us this problem earlier, especially for

124
00:09:19,812 --> 00:09:23,418
log messages and other application output? You need

125
00:09:23,444 --> 00:09:26,882
to start with at least enough monitoring that you know your test

126
00:09:27,016 --> 00:09:30,146
registered right, and then figure out

127
00:09:30,168 --> 00:09:32,962
what happens downstream. If you're looking for,

128
00:09:33,016 --> 00:09:36,878
say, how your application responds to a dependency being offline.

129
00:09:37,054 --> 00:09:40,566
Black hole test. Have a basic set of monitors in

130
00:09:40,588 --> 00:09:43,926
place for that scenarios. Whatever it is that makes sense for

131
00:09:43,948 --> 00:09:47,158
your platform. If it's an internal dependency, maybe you're monitoring it

132
00:09:47,164 --> 00:09:50,938
directly. If it's an external dependency, maybe you're watching a status page on a

133
00:09:50,944 --> 00:09:53,420
periodic basis or something like that.

134
00:09:54,030 --> 00:09:57,370
Two, you want to set up your response process.

135
00:09:57,520 --> 00:10:01,462
Chaos testing and game days are an excellent place to practice

136
00:10:01,526 --> 00:10:04,586
your incident response protocols in a low stakes

137
00:10:04,618 --> 00:10:07,946
environment. We're being intentional. We've set our goals in advance.

138
00:10:08,058 --> 00:10:11,598
We think we know what's going to happen. So we can take some time to

139
00:10:11,684 --> 00:10:14,918
practice. Having an incident commander assigning

140
00:10:14,954 --> 00:10:18,066
a scribe preparing a post incidents review, like a

141
00:10:18,088 --> 00:10:21,522
post game day review, is just as useful as a post

142
00:10:21,576 --> 00:10:25,134
incident review is for production. Then we want to establish

143
00:10:25,182 --> 00:10:28,738
our workflows for fixing things. Lay the groundwork

144
00:10:28,834 --> 00:10:32,662
for how much experimentation you want the team to do during the test.

145
00:10:32,716 --> 00:10:35,814
In a real incident, your SMEs may need a pooch code

146
00:10:35,932 --> 00:10:39,866
or configuration updates to remediate the issue. They're going to keep working until they

147
00:10:39,888 --> 00:10:43,846
have restored service. You're not going to do that necessarily

148
00:10:43,958 --> 00:10:46,838
during a game day or a failure Friday scenario.

149
00:10:46,934 --> 00:10:50,106
You have a set work time and some things that

150
00:10:50,128 --> 00:10:53,390
you want to experiment around, and then you can call time

151
00:10:53,460 --> 00:10:56,846
right and be done, but establish what you're going to

152
00:10:56,868 --> 00:10:59,950
do there. Finally, you want to think about

153
00:11:00,100 --> 00:11:03,346
any improvements that you're going to sort of

154
00:11:03,368 --> 00:11:07,074
discover in this process what happens after the

155
00:11:07,112 --> 00:11:11,362
game day. Too many teams spend time planning and

156
00:11:11,416 --> 00:11:15,250
executing game days and then not putting those process

157
00:11:15,320 --> 00:11:19,474
improvements back into their work stream, right? If the reliability improvements

158
00:11:19,522 --> 00:11:22,950
you learn about during the exercise require changes

159
00:11:23,020 --> 00:11:26,518
to the code, you need to get those back into

160
00:11:26,604 --> 00:11:30,394
the workflow so that they become production code. Right? So making

161
00:11:30,432 --> 00:11:34,502
sure that your product team is on board and things can be prioritized

162
00:11:34,566 --> 00:11:38,314
and you're learning and utilizing what you then learn from

163
00:11:38,352 --> 00:11:42,074
the process. So improving reliability is

164
00:11:42,112 --> 00:11:45,558
a long range process. So you're taking the

165
00:11:45,584 --> 00:11:48,878
time to do the planning ahead of a game day and that's going

166
00:11:48,884 --> 00:11:51,566
to help you get the most out of the work that you do after the

167
00:11:51,588 --> 00:11:55,186
game day. I won't go

168
00:11:55,208 --> 00:11:57,698
into the first two pieces deeply, right?

169
00:11:57,784 --> 00:12:01,474
Monitoring telemetry. There's lots of folks that

170
00:12:01,512 --> 00:12:05,618
know more about that stuff than I do, but game days are an excellent opportunity

171
00:12:05,704 --> 00:12:09,970
to flex your incident response muscles. You don't have to mobilize

172
00:12:10,050 --> 00:12:14,134
a full incident response every game day, but it's an

173
00:12:14,172 --> 00:12:17,566
option you should keep in mind just to sort of keep things flowing

174
00:12:17,618 --> 00:12:22,054
and keeping all that muscle memory active, responding to major incidents

175
00:12:22,102 --> 00:12:25,862
that impact users, and especially if they cross

176
00:12:26,006 --> 00:12:29,702
team and service boundaries. Take coordinated effort,

177
00:12:29,766 --> 00:12:33,722
right? And practice. Not only do

178
00:12:33,776 --> 00:12:36,906
they help your team work within the response framework,

179
00:12:37,018 --> 00:12:40,714
but your game day can then also help your incidents commanders practices

180
00:12:40,762 --> 00:12:44,414
managing an incident. They're skills like any other, right? The more we use

181
00:12:44,452 --> 00:12:48,302
them, the better they'll be. And for folks who are newly trained

182
00:12:48,366 --> 00:12:51,874
as say, an incidents commander or some other position you might be using

183
00:12:51,912 --> 00:12:56,034
in your response process, having the opportunity to practice in

184
00:12:56,072 --> 00:12:59,026
a not real incident is super good for them,

185
00:12:59,048 --> 00:13:02,406
right? Your incident response practice is going to improve over time as well. And your

186
00:13:02,428 --> 00:13:06,338
game days are going to help you become more comfortable and more confident

187
00:13:06,434 --> 00:13:09,158
when they're handling incidents in production,

188
00:13:09,254 --> 00:13:12,474
right? So we organize in advance, we set

189
00:13:12,512 --> 00:13:15,926
out explicit expectations for our practice, and we invite

190
00:13:15,958 --> 00:13:18,700
the people that are going to be learning from it.

191
00:13:20,030 --> 00:13:23,840
Then we can set up what we need to know.

192
00:13:24,530 --> 00:13:27,966
Your game day is going to help you verify that all of your end

193
00:13:27,988 --> 00:13:32,254
to end components in your IR process are

194
00:13:32,292 --> 00:13:35,854
working appropriately. Sometimes they aren't right.

195
00:13:35,892 --> 00:13:39,618
Things don't work. So when you choose your tests, your first checkpoint is,

196
00:13:39,704 --> 00:13:43,538
do we have the appropriate alert for this scenario? If I've taken a service

197
00:13:43,624 --> 00:13:47,010
offline in a black hole test, does the system

198
00:13:47,080 --> 00:13:50,706
alert me somehow? Does it alert for latency tests for disk

199
00:13:50,738 --> 00:13:54,646
Rio? Where is it coming in from? How do I know that I'm coming into

200
00:13:54,668 --> 00:13:57,842
the right service in my incident management software?

201
00:13:57,906 --> 00:14:01,114
All of those things can be exercised when the alerts fire.

202
00:14:01,312 --> 00:14:05,082
Then what happens? Are folks being notified appropriately behave?

203
00:14:05,136 --> 00:14:09,146
They actually gone and put their contact info into the platform?

204
00:14:09,328 --> 00:14:13,514
Are you coordinating in a team chat channel? Are they on a conference

205
00:14:13,562 --> 00:14:16,750
call? How does everyone find out all that information?

206
00:14:16,900 --> 00:14:20,506
Especially if you've got folks new to your team or you've changed

207
00:14:20,538 --> 00:14:23,826
platforms, take the opportunity to get everyone in

208
00:14:23,848 --> 00:14:26,660
line to practice how to find all this information.

209
00:14:27,670 --> 00:14:31,534
Finally, think about your troubleshooting before you're in a real failure.

210
00:14:31,582 --> 00:14:35,566
Right? It's essential do folks behave access to all the dashboards

211
00:14:35,598 --> 00:14:39,570
they need? Are they hidden behind a password? Are they locked down somewhere?

212
00:14:39,650 --> 00:14:43,634
Can responders access the hosts or repositories configuration

213
00:14:43,682 --> 00:14:47,542
files, whatever else they might need to mitigate a real

214
00:14:47,596 --> 00:14:51,034
incident? You ought to practice that. Right? Has everyone been

215
00:14:51,072 --> 00:14:54,586
added to the management tools for your platforms? Do they

216
00:14:54,608 --> 00:14:58,630
know how to use them? Can they do restarts? Can they do scale ups?

217
00:14:58,710 --> 00:15:02,270
Any of those sort of basic failure scenarios are

218
00:15:02,340 --> 00:15:05,534
super helpful as part of your game day to provide

219
00:15:05,732 --> 00:15:08,160
valuable experience for new team members.

220
00:15:09,010 --> 00:15:12,160
Decide when you're going to call the experiment over,

221
00:15:12,690 --> 00:15:15,838
put an end to it right. It might be time bound. We're going to

222
00:15:15,844 --> 00:15:19,506
look at this particular scenario for ten minutes, or it could be

223
00:15:19,528 --> 00:15:22,674
more flexible. When we feel like we've learned what we wanted to

224
00:15:22,712 --> 00:15:26,200
know, we'll turn it off. These scenarios can be super quick,

225
00:15:26,970 --> 00:15:31,286
especially if the systems are already

226
00:15:31,468 --> 00:15:35,206
well defined, right? And if

227
00:15:35,228 --> 00:15:38,966
you use a lot of defensive practices, right, you've got graceful degradation and other

228
00:15:38,988 --> 00:15:42,426
things in place. So you may only be testing a little

229
00:15:42,448 --> 00:15:45,866
bit of that defense, maybe focusing on a new feature or something like

230
00:15:45,888 --> 00:15:49,462
that. And that's totally fine. They don't have to be blown out wide.

231
00:15:49,526 --> 00:15:52,602
We take the whole site down for a while sort of practices.

232
00:15:52,666 --> 00:15:55,470
It's fine to practice in smaller components.

233
00:15:56,610 --> 00:15:59,694
We build our game day with our

234
00:15:59,732 --> 00:16:03,514
goals in mind. We have this general goal, the overarching goal,

235
00:16:03,642 --> 00:16:07,186
improve the reliability of our service. But to get the most out of the

236
00:16:07,208 --> 00:16:11,406
game day, we want to set something specific so that we can concentrate

237
00:16:11,438 --> 00:16:15,102
on it. Maybe we have some code that we've

238
00:16:15,166 --> 00:16:18,882
introduced to fix something that happened previously.

239
00:16:18,946 --> 00:16:22,520
Right. We want to make sure then that as we introduce that code,

240
00:16:22,890 --> 00:16:26,598
we behave actually fixed the thing. Right. And that's hard to do in a

241
00:16:26,604 --> 00:16:29,980
staging environment, especially if it's reliant on

242
00:16:31,390 --> 00:16:35,354
production level load. Right. Do we need to

243
00:16:35,472 --> 00:16:39,510
test how a new database index impacts a slowdown? Are our users

244
00:16:39,590 --> 00:16:43,070
reporting that the sign up flow is slow? You're not sure why,

245
00:16:43,140 --> 00:16:46,366
you can't really catch it in staging. And there's plenty of

246
00:16:46,388 --> 00:16:50,062
scenarios that you can be digging into using

247
00:16:50,116 --> 00:16:53,518
these kinds of practices. But be very explicit about what you want

248
00:16:53,524 --> 00:16:57,058
to find. You can also focus on larger problems like

249
00:16:57,144 --> 00:17:00,210
DDoS attacks or data center level failures,

250
00:17:00,630 --> 00:17:03,934
depending on which parts of your ecosystem you want to investigate

251
00:17:03,982 --> 00:17:07,538
and which teams are sort of involved in the game day practice.

252
00:17:07,634 --> 00:17:11,302
There are benefits to practicing a range of scenarios across

253
00:17:11,356 --> 00:17:14,854
your teams over time. And it's good too to mix up,

254
00:17:14,892 --> 00:17:19,100
like having teams that own a couple of services

255
00:17:19,470 --> 00:17:23,734
practices on their stuff independently before introducing a larger

256
00:17:23,782 --> 00:17:26,998
cross team experiment. So we're

257
00:17:27,014 --> 00:17:30,220
going to set up our hypotheses. What do we expect to find?

258
00:17:30,990 --> 00:17:34,378
If we already have defensive coding measures,

259
00:17:34,554 --> 00:17:37,866
do they kick in? Is there a failover? Is there a scale

260
00:17:37,898 --> 00:17:41,518
up that should happen? Is there some other automation that's going

261
00:17:41,524 --> 00:17:44,946
to take care of some things? Maybe we expect the whole thing

262
00:17:44,968 --> 00:17:49,022
to fall over. That's fine. It's a place to start improving

263
00:17:49,086 --> 00:17:52,974
from, right? But definitely set those initial hypotheses.

264
00:17:53,102 --> 00:17:56,806
You have assumptions on how the systems will behave, so get

265
00:17:56,828 --> 00:18:00,950
them down in writing so you can use them as a baseline for improvement.

266
00:18:02,170 --> 00:18:05,718
Afterwards, we're going to

267
00:18:05,724 --> 00:18:09,190
talk about what happens, so make sure you're recording it. Save your charts,

268
00:18:09,270 --> 00:18:13,190
save your graphs, save the list of commands. This is also helpful

269
00:18:13,270 --> 00:18:17,034
in real life incidents so that you are

270
00:18:17,072 --> 00:18:20,060
collecting information to run your post incident review.

271
00:18:20,430 --> 00:18:23,806
Think about not just the things you first looked at,

272
00:18:23,908 --> 00:18:27,422
but other related information that might help in the future.

273
00:18:27,556 --> 00:18:30,974
This is another part of your practice that's going to help you build up a

274
00:18:31,012 --> 00:18:34,446
better incident response practice, and especially if you take the time

275
00:18:34,548 --> 00:18:38,610
to write a post game day review. It's going to give your team

276
00:18:38,760 --> 00:18:42,526
a place to organize their thoughts and then improve the practice

277
00:18:42,558 --> 00:18:46,206
for the next time. Say, well, we thought we were going to be relying

278
00:18:46,238 --> 00:18:50,114
on this particular piece of information. Turns out that metric wasn't as helpful

279
00:18:50,162 --> 00:18:53,558
as we thought. But here's this other thing that we're monitoring over here

280
00:18:53,644 --> 00:18:57,938
that was actually much more helpful. So the next time you have a production

281
00:18:58,034 --> 00:19:01,466
incidents relating to that service, you can go right to the one that

282
00:19:01,488 --> 00:19:05,062
you learned about, right? So talk about what you learned.

283
00:19:05,126 --> 00:19:08,826
Right. We went to all of this trouble. We did this planning. It's on

284
00:19:08,848 --> 00:19:12,218
the follow the failure Friday calendar. We put all this stuff together,

285
00:19:12,304 --> 00:19:16,046
we planned all these scenarios. Then what we want to

286
00:19:16,068 --> 00:19:19,562
talk about, what we learned, we want to share with other teams in our organization

287
00:19:19,626 --> 00:19:23,134
who can benefit from it so that everybody is gaining

288
00:19:23,182 --> 00:19:26,594
knowledge through these practices. We talk about

289
00:19:26,632 --> 00:19:30,978
our improvements. We're going to put the things that we learned to good use.

290
00:19:31,144 --> 00:19:34,146
Improving the reliability and resilience of

291
00:19:34,168 --> 00:19:37,298
our system is our requirement.

292
00:19:37,394 --> 00:19:41,074
We're going to balance non feature operational improvements with feature

293
00:19:41,122 --> 00:19:44,674
work in order to provide the best experience for the users.

294
00:19:44,802 --> 00:19:48,860
So the findings from your game day might generate work

295
00:19:49,230 --> 00:19:52,874
that should go into the backlog for your service to

296
00:19:52,912 --> 00:19:57,018
improve it over time. You might want better error messages in the application

297
00:19:57,104 --> 00:20:00,950
logs. You might want fewer messages

298
00:20:01,030 --> 00:20:04,734
in the application logs, right. You might need a new default for

299
00:20:04,852 --> 00:20:08,586
memory allocation or garbage collection or other kind of subsystems.

300
00:20:08,618 --> 00:20:11,694
You might need better timeouts or feature flags or other

301
00:20:11,732 --> 00:20:16,210
mechanisms for dark launching. Whatever it is, any number of new improvements

302
00:20:16,630 --> 00:20:19,938
might be uncovered in this practice. So don't abandon them.

303
00:20:20,024 --> 00:20:23,666
Get them documented and into the planning. And over time that's going to

304
00:20:23,688 --> 00:20:27,842
help you work around all of these processes.

305
00:20:27,986 --> 00:20:32,050
As your team gets comfortable with defensive resilience techniques,

306
00:20:32,130 --> 00:20:35,654
it's going to be easier to use those practices regularly when

307
00:20:35,692 --> 00:20:39,058
you're developing new features, and then they're

308
00:20:39,074 --> 00:20:43,434
going to be in there from the beginning instead of waiting for test day to

309
00:20:43,472 --> 00:20:47,242
sort of unveil them. Right. You can use these experiments to create

310
00:20:47,296 --> 00:20:51,574
new best practices, common shared libraries and standards

311
00:20:51,622 --> 00:20:53,150
for your whole organization.

312
00:20:54,690 --> 00:20:58,766
So we get some questions when we talk to customers about these

313
00:20:58,788 --> 00:21:01,626
kinds of practices. And one of the big ones is should you run a surprise

314
00:21:01,658 --> 00:21:05,554
game day? And I know it

315
00:21:05,592 --> 00:21:09,282
seems like that's a thing you should do, but often

316
00:21:09,416 --> 00:21:13,166
you probably don't want to, right? Maybe we'll

317
00:21:13,198 --> 00:21:16,594
say maybe once you behave your patterns

318
00:21:16,642 --> 00:21:20,182
and practices well honed. We've been talking

319
00:21:20,236 --> 00:21:24,102
about being deliberate and explicit about what

320
00:21:24,156 --> 00:21:27,542
our goals are for running a game day in the first

321
00:21:27,596 --> 00:21:31,466
place. If you're looking to run a surprise game day,

322
00:21:31,648 --> 00:21:35,686
be really clear about what you're hoping to accomplish.

323
00:21:35,878 --> 00:21:39,734
Knowing that there is much more risk for this kind of testing

324
00:21:39,862 --> 00:21:43,454
when folks aren't expecting it, it can

325
00:21:43,492 --> 00:21:46,894
feel more real, I guess you could say to

326
00:21:46,932 --> 00:21:50,458
run surprise game days, we don't know when real incidents

327
00:21:50,474 --> 00:21:54,430
are going to happen, but if your team isn't consistently

328
00:21:54,510 --> 00:21:57,886
getting through planned testing scenarios, a surprise isn't

329
00:21:57,918 --> 00:22:01,934
going to magically make them better. It actually could have negative

330
00:22:01,982 --> 00:22:05,702
effects on the team and how it works together. So be

331
00:22:05,756 --> 00:22:09,206
very careful about deciding to

332
00:22:09,228 --> 00:22:12,310
run a surprise game day. Not everybody

333
00:22:12,380 --> 00:22:15,926
likes surprises, for sure. And then when should

334
00:22:15,948 --> 00:22:19,514
we game day. When's a good time to

335
00:22:19,552 --> 00:22:22,742
do this assessment of our reliability

336
00:22:22,886 --> 00:22:25,978
and resilience? The truth is kind

337
00:22:25,984 --> 00:22:29,434
of anytime, right? Especially if you're in a sort

338
00:22:29,472 --> 00:22:32,682
of distributed microservices environment,

339
00:22:32,746 --> 00:22:36,362
right? Teams that have ownership

340
00:22:36,426 --> 00:22:40,254
of singular services can probably run

341
00:22:40,452 --> 00:22:43,854
a failure scenario across the services at any time. But also

342
00:22:43,972 --> 00:22:47,250
you want to think about doing it when things have been going well,

343
00:22:47,320 --> 00:22:50,802
right? You don't want to run production environment game

344
00:22:50,856 --> 00:22:54,466
days when you've already been blasting through your slos on

345
00:22:54,488 --> 00:22:58,594
a service. If you've had a lot of incidents

346
00:22:58,642 --> 00:23:02,470
already, you've had maybe some downtime if your users are already

347
00:23:02,540 --> 00:23:05,720
unhappy with the reliability of the application.

348
00:23:06,250 --> 00:23:10,086
Doing production testing isn't a way to make them super happy,

349
00:23:10,188 --> 00:23:13,878
even if you mean well and even if your goal is improvement. Right. You don't

350
00:23:13,894 --> 00:23:16,986
want to blow through the rest of your air budget on testing as you might

351
00:23:17,008 --> 00:23:20,886
need it for your real incidents. So look for

352
00:23:20,928 --> 00:23:24,574
time when you can do shorter focus tests when things

353
00:23:24,612 --> 00:23:28,606
are calm and running well. Right? The bottom image is

354
00:23:28,788 --> 00:23:32,494
an example from our bot that's notifying folks that someone

355
00:23:32,612 --> 00:23:36,626
on the team is running a failure Friday exercise. It lasts from

356
00:23:36,648 --> 00:23:39,746
one seven p. M. To one thirty one p. M. It's a short,

357
00:23:39,848 --> 00:23:42,994
focused experiment that can give you a lot of information,

358
00:23:43,192 --> 00:23:47,106
and it's in our chat. You can follow the channel and

359
00:23:47,128 --> 00:23:50,326
figure out what that team was doing, and maybe that will help your

360
00:23:50,348 --> 00:23:54,562
team as well. But make plans to run some chaos testing

361
00:23:54,706 --> 00:23:58,626
against new features, especially after they've had some time to burn in.

362
00:23:58,748 --> 00:24:02,394
You want to have an idea of the baseline performance before you go

363
00:24:02,432 --> 00:24:05,980
injecting new faults into it. So work on

364
00:24:06,510 --> 00:24:10,054
sort of setting that good practice that as you

365
00:24:10,192 --> 00:24:14,350
invoke new features and you put new things into production, that you're also going back

366
00:24:14,500 --> 00:24:18,266
and looking at the impact there and digging

367
00:24:18,298 --> 00:24:21,680
into those tests and additional performance issues.

368
00:24:23,650 --> 00:24:27,458
The converse of that is when should you not game day.

369
00:24:27,624 --> 00:24:30,738
And this is going to vary in different organizations, but there's a

370
00:24:30,744 --> 00:24:34,562
couple of things that we encourage people to keep in mind. Don't game day right

371
00:24:34,616 --> 00:24:37,954
after a reorg. We know big organizations

372
00:24:38,002 --> 00:24:41,542
like to reorg from time to time, but give folks time

373
00:24:41,676 --> 00:24:43,960
to get acclimated with the services,

374
00:24:44,650 --> 00:24:47,398
acclimated with the teams they've been assigned to.

375
00:24:47,564 --> 00:24:50,934
Don't wait until your busiest

376
00:24:50,982 --> 00:24:55,034
season and then game day, you're going to plan ahead. You know stuff is coming,

377
00:24:55,232 --> 00:24:59,274
so keep those two things in mind, not right after Reorg and

378
00:24:59,312 --> 00:25:03,094
not right at the beginning of your busiest

379
00:25:03,142 --> 00:25:06,382
time. I'm looking at you retail like you guys have been planning this since

380
00:25:06,436 --> 00:25:10,046
June. You know your biggest season is coming.

381
00:25:10,228 --> 00:25:14,020
You want to be doing your practicing earlier, not later.

382
00:25:14,790 --> 00:25:17,954
So reconsider spending your time doing game days

383
00:25:18,072 --> 00:25:21,522
if your business partners and product managers aren't on

384
00:25:21,576 --> 00:25:25,026
board with taking input for the backlog. Based on what

385
00:25:25,048 --> 00:25:28,478
you learn, a game day can still have value if

386
00:25:28,504 --> 00:25:31,926
it's just for your team to practice, but you won't be getting the

387
00:25:31,948 --> 00:25:35,734
full value of the exercise right. So you want to take all those things

388
00:25:35,772 --> 00:25:38,986
in mind as you do more of these,

389
00:25:39,088 --> 00:25:41,900
and even as you do more small ones,

390
00:25:42,350 --> 00:25:45,990
your team gets used to all of the components

391
00:25:46,070 --> 00:25:49,946
that are important for your incident response process.

392
00:25:50,128 --> 00:25:53,326
They are going to know where all the dashboards are.

393
00:25:53,428 --> 00:25:56,814
They're going to see how your chat bots and your other

394
00:25:56,852 --> 00:26:00,670
automation operates and know where to log into

395
00:26:00,740 --> 00:26:03,886
the conference call, what channel to follow in

396
00:26:03,988 --> 00:26:07,458
the chat application. All of those things that,

397
00:26:07,624 --> 00:26:11,646
if they're not used to it, are even more difficult when people are stressed

398
00:26:11,678 --> 00:26:15,350
out during a real incident. So you have this

399
00:26:15,420 --> 00:26:19,010
wonderful opportunity to sort of get people in the mindset

400
00:26:19,090 --> 00:26:22,546
that we're worried about our reliability.

401
00:26:22,738 --> 00:26:26,040
We want to work on this and here's how our practices go.

402
00:26:27,370 --> 00:26:30,874
So to summarize just a little bit for you, one have

403
00:26:30,912 --> 00:26:34,054
a plan. Think about it in advance.

404
00:26:34,182 --> 00:26:36,682
Don't just do it right. You want to say,

405
00:26:36,736 --> 00:26:40,506
hey, we have introduced a new table into

406
00:26:40,528 --> 00:26:44,062
the database. We want to do some failure Friday scenarios around

407
00:26:44,116 --> 00:26:47,838
the performance of that. We have put a new dependency on the back end.

408
00:26:47,924 --> 00:26:51,150
We want to make sure our defensive coding is okay.

409
00:26:51,300 --> 00:26:55,026
We have put some new features in and we want to make sure

410
00:26:55,208 --> 00:26:58,914
all the logging works so that folks know where to find information when things

411
00:26:58,952 --> 00:27:02,350
go wrong. Any kind of new feature,

412
00:27:02,430 --> 00:27:05,220
new code improvement, whatever it is,

413
00:27:06,070 --> 00:27:09,266
what does it look like when it gets into production? There are going

414
00:27:09,288 --> 00:27:12,742
to be things that you can see when you get to staging, and that's fine.

415
00:27:12,876 --> 00:27:16,514
But there's also going to be things that you're not going to be fully comfortable

416
00:27:16,562 --> 00:27:19,574
with until you've seen them actually perform in

417
00:27:19,612 --> 00:27:23,706
prod. And you need that data, you need that user flow, you need all

418
00:27:23,728 --> 00:27:27,194
that activity going on to make sure that you've done what you

419
00:27:27,232 --> 00:27:30,550
thought you were going to do. So you're going to be intentional

420
00:27:30,630 --> 00:27:34,170
about all of these things. These aren't an accident, they aren't a surprise.

421
00:27:34,330 --> 00:27:38,138
They are a way for your team to say we're

422
00:27:38,154 --> 00:27:41,470
going to improve our reliability via x, Y and z. We're going to

423
00:27:41,540 --> 00:27:46,050
improve our incident management practices via additional

424
00:27:46,390 --> 00:27:50,340
practice and workflow and give us

425
00:27:50,710 --> 00:27:53,906
an opportunity here to get better at all of the things that

426
00:27:53,928 --> 00:27:57,630
are going to in the downstream have an effect on

427
00:27:57,720 --> 00:28:01,286
our incidents response and our overall reliability. And then

428
00:28:01,308 --> 00:28:04,230
we're going to use what we learn. There's plenty of things that we can learn

429
00:28:04,300 --> 00:28:07,726
about the performance of our non

430
00:28:07,778 --> 00:28:11,974
feature work, all of our operational requirements, whether they are database

431
00:28:12,022 --> 00:28:15,834
indexes or timeouts or red button or

432
00:28:15,872 --> 00:28:19,786
whatever you're doing with your services and your reliability there.

433
00:28:19,888 --> 00:28:23,838
We want to use all those things. So make sure that everyone on

434
00:28:23,844 --> 00:28:28,058
the team is on board with taking those lessons and internalizing

435
00:28:28,074 --> 00:28:32,014
them. So a couple for creating effective game

436
00:28:32,052 --> 00:28:35,038
day tests this is a really nice article. What they've worked on.

437
00:28:35,124 --> 00:28:39,134
The second one is from the folks at Azure advancing resilience

438
00:28:39,182 --> 00:28:42,818
through chaos engineering and fault injection. Another really good article to read if

439
00:28:42,824 --> 00:28:46,386
you're kind of new to all this and thinking about what you might want there.

440
00:28:46,488 --> 00:28:49,746
If you want to learn more about incident response

441
00:28:49,778 --> 00:28:52,934
methodologies and how to handle that with your team, you can check

442
00:28:52,972 --> 00:28:56,262
out response pagerduty.com. And just for fun,

443
00:28:56,316 --> 00:28:59,910
we have a podcast called pager to the limit and we'd love to have you

444
00:28:59,980 --> 00:29:03,074
as a listener there. We cover incident management,

445
00:29:03,122 --> 00:29:06,470
but also all kinds of other things. So if that's interesting,

446
00:29:06,620 --> 00:29:09,606
throw it in your favorite podcaster. So I hope you enjoy the rest of the

447
00:29:09,628 --> 00:29:11,866
event. And thanks for coming to my session.

