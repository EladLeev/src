1
00:00:25,570 --> 00:00:29,586
You. Hi everyone, and welcome to this session on compelling

2
00:00:29,618 --> 00:00:33,346
code reuse in the enterprise. This may seem like a funny

3
00:00:33,378 --> 00:00:36,838
introductory slide to get started with this person programming in

4
00:00:36,844 --> 00:00:40,146
the background that is clearly doing it, maybe anonymously

5
00:00:40,178 --> 00:00:43,590
or in the dark, but in reality, sometimes this can be us,

6
00:00:43,660 --> 00:00:47,426
right? Especially from a code reuse perspective you might have experienced

7
00:00:47,458 --> 00:00:51,006
in your organization. The reality that is simply wasn't valued to

8
00:00:51,028 --> 00:00:54,558
think about code reuse because you work in a distributed microservice world, maybe that just

9
00:00:54,564 --> 00:00:57,806
didn't fit. Maybe you see the value and the only way you got

10
00:00:57,828 --> 00:01:01,326
it done was to be that person who added the extra value at

11
00:01:01,348 --> 00:01:04,586
nighttime. And I've definitely been there myself, where I've

12
00:01:04,618 --> 00:01:07,746
pursued this with a passion and seen how code reuse can

13
00:01:07,768 --> 00:01:11,266
be very compelling, be very valuable, but honestly, it can be

14
00:01:11,288 --> 00:01:14,814
very difficult to know when to reuse and how to reuse effectively

15
00:01:14,862 --> 00:01:18,194
without causing a bottleneck or a problem. So that's what this talk is really all

16
00:01:18,232 --> 00:01:21,974
about, focusing on how do we identify reuse properly, and then looking

17
00:01:22,012 --> 00:01:25,974
at a key example through service templates and service chassis that can provide a

18
00:01:26,012 --> 00:01:29,366
really helpful way to reuse code in an effective way, especially in a

19
00:01:29,388 --> 00:01:33,286
distributed microservice world. This quote I love from Eric Raymond,

20
00:01:33,318 --> 00:01:37,114
which says good programmers know what to write, great ones know what to

21
00:01:37,152 --> 00:01:40,458
rewrite and reuse, because understanding when to rewrite something

22
00:01:40,544 --> 00:01:43,840
and of course our discussion today when to reuse something is pretty difficult.

23
00:01:45,410 --> 00:01:48,526
Just as we get started, a little bit of information about myself. My name is

24
00:01:48,548 --> 00:01:52,010
Travis and I work as a principal software engineer for SPS Commerce.

25
00:01:52,090 --> 00:01:55,954
You probably haven't heard of SPS commerce. We're a business to business organization that

26
00:01:55,992 --> 00:01:59,742
focuses on exchanging invoices and purchase orders between retailers

27
00:01:59,806 --> 00:02:03,406
and between suppliers. We're the world's largest

28
00:02:03,438 --> 00:02:07,374
retail network and have hundreds and thousands of retailers and suppliers

29
00:02:07,422 --> 00:02:11,640
in our network. And my focus specifically there is on developer experience.

30
00:02:12,090 --> 00:02:15,782
And you might initially ask yourself, what exactly do you mean by developer experience?

31
00:02:15,836 --> 00:02:19,094
It's a pretty loaded or overloaded term these days,

32
00:02:19,292 --> 00:02:22,486
and specifically when I talk about developer experience, I try

33
00:02:22,508 --> 00:02:25,846
to define it and put a boundary around it. And it's a relatively new term.

34
00:02:25,878 --> 00:02:29,210
It's developed over the past five or six years. You might be thinking

35
00:02:29,280 --> 00:02:33,078
it's kind of like developer advocacy or developer relations,

36
00:02:33,184 --> 00:02:37,402
and it definitely is tangentially related to that, but it's something that's slightly

37
00:02:37,466 --> 00:02:40,558
different than that. And this is a great definition that I've seen from the

38
00:02:40,564 --> 00:02:44,042
appslab.com, which is developer experience is the activity

39
00:02:44,106 --> 00:02:47,534
of sourcing, improving and optimizing how developers

40
00:02:47,582 --> 00:02:50,946
get their work done. And so when we think about how developers get their

41
00:02:50,968 --> 00:02:54,766
work done, in a lot of cases we're thinking about the Persona of the developer

42
00:02:54,878 --> 00:02:58,566
and how they're moving information to production using the development principles of

43
00:02:58,588 --> 00:03:02,354
your organization. So that's where we tie together the experience along with the development

44
00:03:02,402 --> 00:03:06,230
principles which are very unique to your organization, really form

45
00:03:06,380 --> 00:03:09,240
this Venn diagram, this concept of developer experience.

46
00:03:09,930 --> 00:03:13,382
The reality is that engineers in different organizations,

47
00:03:13,526 --> 00:03:17,386
depending on how old your organization is, have really fought to

48
00:03:17,488 --> 00:03:21,146
understand what tools they should use. Are there standardized tooling that they should

49
00:03:21,168 --> 00:03:24,346
use for CI CD for observability? In some cases yes. In other

50
00:03:24,368 --> 00:03:28,094
cases no. There's just a plethora of different tools they could use. And so your

51
00:03:28,132 --> 00:03:31,706
engineers and your leads are fending for themselves and picking and choosing the right tools

52
00:03:31,738 --> 00:03:35,086
within this jungle of tooling that may exist. And in

53
00:03:35,108 --> 00:03:38,814
many cases these tools have come online out of necessity

54
00:03:38,862 --> 00:03:42,146
and need, but they haven't really been thought through on the complete experience on end

55
00:03:42,168 --> 00:03:45,714
to end moving something to production and how they integrate with each other.

56
00:03:45,912 --> 00:03:49,366
And that's why we think of this quote as fairly helpful for understanding the

57
00:03:49,388 --> 00:03:53,442
problem that developer experience solves, which is developers work in rainforests,

58
00:03:53,506 --> 00:03:56,758
not planned gardens. The idea that you never had an opportunity

59
00:03:56,844 --> 00:03:59,894
from a greenfield perspective to plan exactly what your

60
00:03:59,932 --> 00:04:03,114
delivery process would be like and the tools involved in it. But rather

61
00:04:03,152 --> 00:04:06,506
it grew out of many different requirements and needs over

62
00:04:06,528 --> 00:04:10,714
the years. And so developer experience is really starting to take a look at these

63
00:04:10,752 --> 00:04:14,014
particular areas and starting to hone in and focus on some of them.

64
00:04:14,132 --> 00:04:17,338
At SPS commerce, we think of developer experience in terms of capabilities.

65
00:04:17,434 --> 00:04:21,726
Capabilities help us put a bit of a boundary around exactly

66
00:04:21,828 --> 00:04:25,186
what we're discussing and exactly what is involved in developer experience. So these

67
00:04:25,208 --> 00:04:29,166
are identified horizontal fast tracks to be curated for maximum

68
00:04:29,198 --> 00:04:32,942
productivity within the organization. And so if we draw the organization

69
00:04:33,006 --> 00:04:36,914
like this in terms of development, operations, cost, security, we been

70
00:04:36,952 --> 00:04:40,098
to draw these horizontal fast tracks. In developer experience,

71
00:04:40,184 --> 00:04:43,366
one might be a very common one which is building and deploying a

72
00:04:43,388 --> 00:04:47,026
new feature to production. How do I do that? Am I using feature flagging?

73
00:04:47,058 --> 00:04:49,878
What am I using for CI CD? How does all that integrate together? How do

74
00:04:49,884 --> 00:04:53,178
I observe the metrics at the end of it might be building and deploying a

75
00:04:53,184 --> 00:04:56,940
new application from scratch and having a developer portal to help you through that experience.

76
00:04:57,390 --> 00:05:01,146
It might be API design which can be a large part of developer experience in

77
00:05:01,168 --> 00:05:03,930
how we consume and how we produce APIs.

78
00:05:04,290 --> 00:05:07,438
Or as we move towards our discussion today, it might be

79
00:05:07,444 --> 00:05:10,586
code reuse, how do you think, but code reuse, how do you think about inner

80
00:05:10,618 --> 00:05:14,106
source within the organization? How do you know when it's appropriate and effective

81
00:05:14,138 --> 00:05:18,066
to think about reuse? And of course, developer experience and code

82
00:05:18,088 --> 00:05:21,186
reuse go hand in hand so closely as we think about it.

83
00:05:21,288 --> 00:05:24,546
And code reuse is defined as the act of recycling or

84
00:05:24,568 --> 00:05:27,746
repurposing code parts to improve existing or to

85
00:05:27,768 --> 00:05:30,934
create new software. We write it once, we use it multiple times, right?

86
00:05:30,972 --> 00:05:34,194
Pretty straightforward. And as we think about the stack

87
00:05:34,242 --> 00:05:38,118
and the technology that we've all built our professions and our careers on,

88
00:05:38,204 --> 00:05:41,930
and that slowly grows here. In terms of your low level machine

89
00:05:42,270 --> 00:05:45,670
container runtimes and the OSI model for networking,

90
00:05:45,750 --> 00:05:49,414
the application runtime that you're using, the web application framework

91
00:05:49,462 --> 00:05:52,650
you're using is a library, a piece of shared code, much like you might develop,

92
00:05:52,720 --> 00:05:56,122
but yours would be more focused internally on your domain.

93
00:05:56,266 --> 00:06:00,314
And so when we think about developer experience, we're actually thinking about the entire usage

94
00:06:00,362 --> 00:06:03,406
of all of these stacks, everything from your local iDe and what you use and

95
00:06:03,428 --> 00:06:06,734
how you do it all the way up to how you're building software

96
00:06:06,782 --> 00:06:10,626
on top of that, and what are the specific pieces of reusable code

97
00:06:10,728 --> 00:06:13,966
within your or custom domain. So today we're focused

98
00:06:13,998 --> 00:06:17,826
here on this particular horizontal, which is your custom domain,

99
00:06:17,858 --> 00:06:21,366
your logic, your information that is specific to how you do things

100
00:06:21,468 --> 00:06:25,270
at your organization, your best practices, your tech principles.

101
00:06:25,770 --> 00:06:29,350
And the title of this particular talk titled

102
00:06:29,510 --> 00:06:33,066
Compelling Code Reuse intentionally uses the

103
00:06:33,088 --> 00:06:36,694
word compelling, and it has two varying definitions,

104
00:06:36,742 --> 00:06:40,218
automated with, that are both very relevant for what we're discussing. And the

105
00:06:40,224 --> 00:06:43,594
first is to force or push towards a course

106
00:06:43,632 --> 00:06:46,606
of action. And my goal today is not to force or push you, nor would

107
00:06:46,628 --> 00:06:50,618
you be for you to go back and force your organization to do code reuse,

108
00:06:50,714 --> 00:06:54,526
but rather thinking more appropriately on the second definition, which is sharing a

109
00:06:54,548 --> 00:06:58,174
powerful and irresistible effect, requiring acute admiration,

110
00:06:58,222 --> 00:07:01,922
attention, or respect. In other words, if we're doing code

111
00:07:01,976 --> 00:07:05,214
reuse correctly, which I hope I've convinced you by the end of this presentation,

112
00:07:05,262 --> 00:07:09,174
there are appropriate ways and compelling ways to produce and use

113
00:07:09,212 --> 00:07:13,074
code reuse, then it is an irresistible thing. That mentality

114
00:07:13,122 --> 00:07:16,866
of whether we should do it or not, especially within microservices, begins to shift

115
00:07:16,898 --> 00:07:20,514
and change. So let's go back to basics

116
00:07:20,562 --> 00:07:23,914
a little bit and think about theoretical code reuse. And here we're just simply talking

117
00:07:23,952 --> 00:07:27,818
about the general day to day practice of how you incrementally share code and

118
00:07:27,824 --> 00:07:31,500
move it across your particular project and the software that you write

119
00:07:32,430 --> 00:07:35,422
the first is a simple module. A module could be a class,

120
00:07:35,476 --> 00:07:38,622
it could be a project, it could be any level of granularity that you want.

121
00:07:38,676 --> 00:07:42,046
And of course inside that module we have a function a function a

122
00:07:42,068 --> 00:07:45,758
we reuse inside module b. And that's pretty straightforward. We can already reference that and

123
00:07:45,764 --> 00:07:49,602
make use of it. But if you're working through an n tier architecture for whatever

124
00:07:49,656 --> 00:07:53,182
application you have that has layers for different reasons, architectural purity

125
00:07:53,246 --> 00:07:56,706
and that sort of thing, then module c may want to reference function a.

126
00:07:56,728 --> 00:08:00,694
And it wouldn't be appropriate for to reference it directly because it

127
00:08:00,732 --> 00:08:04,006
should have no knowledge of module a which has the function in it.

128
00:08:04,108 --> 00:08:07,446
So you do normally what you would do, you abstract and you pull out and

129
00:08:07,468 --> 00:08:10,774
you create different reference components for it, and you create this

130
00:08:10,812 --> 00:08:13,160
module d and apply function a in it.

131
00:08:13,610 --> 00:08:16,874
And of course that creates a standard project that you have and you're happy,

132
00:08:16,912 --> 00:08:19,466
you're reusing that. And that was pretty easy to do. And there's not a lot

133
00:08:19,488 --> 00:08:23,110
of concerns on what it would take to refactor that as you launch a

134
00:08:23,120 --> 00:08:27,290
new project. And that project might exist in the same repository

135
00:08:27,370 --> 00:08:30,558
or same proximity or location. Of course, if you want

136
00:08:30,564 --> 00:08:33,806
to use function a there, you would have to abstract and pull out function a

137
00:08:33,828 --> 00:08:37,346
into a new project and then have both these projects reference it. It wouldn't be

138
00:08:37,368 --> 00:08:41,246
appropriate for project b to have full reference or understanding

139
00:08:41,278 --> 00:08:44,546
of project a. And as I said, these are inside a

140
00:08:44,568 --> 00:08:47,878
similar boundary within a repository, and that's pretty straightforward to

141
00:08:47,884 --> 00:08:51,240
do. That isn't a big concern. That allows me to refactor and move quickly.

142
00:08:51,770 --> 00:08:56,434
But a repository, like other natural

143
00:08:56,482 --> 00:09:00,306
barriers, is where we begin to find code reuse difficult. When that's

144
00:09:00,338 --> 00:09:03,562
in another repository now it becomes a really interesting question,

145
00:09:03,616 --> 00:09:07,366
a much different question, which is, how do I effectively reuse

146
00:09:07,398 --> 00:09:10,854
module a, which has function a in it, knowing that it's

147
00:09:10,902 --> 00:09:14,230
not accessible to me? How should it be distributed? How should we

148
00:09:14,240 --> 00:09:18,170
look at it? So that's why when we think about code reuse

149
00:09:18,250 --> 00:09:21,754
and we think about many things, they get much harder as they become a distributed

150
00:09:21,802 --> 00:09:25,406
problem. And so today we're really talking about the pattern of distributed

151
00:09:25,438 --> 00:09:29,074
code reuse, and it's always harder at scale, right?

152
00:09:29,112 --> 00:09:33,314
We always see that it's always harder to work with

153
00:09:33,352 --> 00:09:36,994
microservices as they grow in terms of the volume of them than it is

154
00:09:37,032 --> 00:09:40,326
having a monolith. But of course there's a lot of advantages to that, and in

155
00:09:40,348 --> 00:09:43,190
the same way, there are a lot of advantages here. We just need to understand

156
00:09:43,260 --> 00:09:47,174
them and the characteristics of them correctly. So if

157
00:09:47,212 --> 00:09:50,966
we were to take an example to try and understand the complexities we might encounter

158
00:09:50,998 --> 00:09:54,314
now from a distributed code reuse pattern, let's look at a couple

159
00:09:54,352 --> 00:09:57,162
different microservices. We might have service a,

160
00:09:57,216 --> 00:10:00,806
service b and service c, and in these microservices we'll

161
00:10:00,838 --> 00:10:04,154
want to reuse our function a. And of course, easiest way

162
00:10:04,192 --> 00:10:07,290
to do that is to distribute them in a package. Might be a Maven package

163
00:10:07,370 --> 00:10:10,686
deployed to Maven Central, or a package you've pushed and deployed to

164
00:10:10,708 --> 00:10:13,440
your internal JFrog usage of it,

165
00:10:13,890 --> 00:10:17,438
and as you begin to roll that. But there's a creator of

166
00:10:17,444 --> 00:10:20,766
function a that puts it together, this team that owns it, and there's

167
00:10:20,798 --> 00:10:23,826
different teams that are consuming it, and they may or may not have knowledge or

168
00:10:23,848 --> 00:10:27,426
understand who that team even is. But we begin to see a lot of drawbacks

169
00:10:27,458 --> 00:10:32,226
here that people start to encounter, and that's why this is maybe discouraged

170
00:10:32,258 --> 00:10:35,762
in a lot of places. The first is large dependency

171
00:10:35,826 --> 00:10:36,630
chains,

172
00:10:39,450 --> 00:10:42,906
especially in Java applications, right? That's no surprise. We can

173
00:10:42,928 --> 00:10:46,026
have a lot of dependencies here. And as those dependencies begin to

174
00:10:46,048 --> 00:10:49,306
grow inside function a, service a now has no

175
00:10:49,328 --> 00:10:52,646
choice but to bring those dependencies along for the ride. The initial

176
00:10:52,678 --> 00:10:56,206
dependencies that they brought in with function a may have grown over

177
00:10:56,228 --> 00:10:59,626
time as they upgrade versions. And so we see what we call the dynamic

178
00:10:59,658 --> 00:11:03,118
equilibrium, or this shift over time of technical debt that can be

179
00:11:03,124 --> 00:11:06,610
built up as a result of that. And in some cases, dependency chain can be

180
00:11:06,680 --> 00:11:10,334
pretty large and can be pretty dangerous if you're not familiar

181
00:11:10,382 --> 00:11:13,998
with who created the package. We also see enhancement friction

182
00:11:14,094 --> 00:11:17,726
become a problem where one of the services decides it needs a very small update

183
00:11:17,758 --> 00:11:21,606
to function a, to introduce more flexibility or a new feature or capability of

184
00:11:21,628 --> 00:11:24,966
it. And of course function a, the team owners that may

185
00:11:24,988 --> 00:11:29,046
or may not be aligned to that change, they may also decide that they

186
00:11:29,068 --> 00:11:31,954
don't have the time to look at your pull request or look at that change.

187
00:11:32,012 --> 00:11:35,846
And so it becomes very difficult now for a small change to happen, which isn't

188
00:11:35,878 --> 00:11:39,660
something that we value in microservices, where we can make changes and deploy very quickly

189
00:11:40,030 --> 00:11:43,200
as a part of, in some cases, your standard two pizza team.

190
00:11:44,290 --> 00:11:48,014
Of course you have administration and cost and ownership involved here.

191
00:11:48,132 --> 00:11:50,974
Who actually owns this as it grows, who's going to continue to maintain it?

192
00:11:51,012 --> 00:11:54,574
It's all fun and happy in the first six months, but after that

193
00:11:54,612 --> 00:11:58,298
it's maintenance work. We have to continue to update it and patch it.

194
00:11:58,484 --> 00:12:01,378
And is the team who originally pushed it out, are they willing to take that

195
00:12:01,384 --> 00:12:04,958
on. Do we even know or have slas on expectation for them? And that leads

196
00:12:04,974 --> 00:12:08,242
us into roadmap on politics and opinions. And whether

197
00:12:08,296 --> 00:12:11,670
the team that owns function a really thinks it should even proceed in that particular

198
00:12:11,740 --> 00:12:14,886
direction or not, that a particular service wants to take it,

199
00:12:14,988 --> 00:12:19,000
it can deviate and begin to change. Do we understand the roadmap for it?

200
00:12:20,250 --> 00:12:23,766
And of course we think about exponential flaws and vulnerabilities. Well, we have the advantage

201
00:12:23,798 --> 00:12:27,046
here of having a single reasonable piece of code. If we're not maintaining

202
00:12:27,078 --> 00:12:30,166
it, we're not supporting it and staying up to date with it. Well, now we're

203
00:12:30,198 --> 00:12:33,606
using up vulnerabilities and flaws much faster than if

204
00:12:33,648 --> 00:12:36,702
the team had to be aware of what that logic was in that code

205
00:12:36,756 --> 00:12:40,426
themselves. And of course, over time, this can be compounded

206
00:12:40,458 --> 00:12:44,206
by multiple active releases, meaning that the team has quickly pushed out

207
00:12:44,228 --> 00:12:47,566
of version two. But there's lots of services on version one. If there's fundamental

208
00:12:47,598 --> 00:12:51,234
differences or changes between those major versions, can a team

209
00:12:51,272 --> 00:12:55,054
even easily upgrade to version two? And so you end up maintaining

210
00:12:55,102 --> 00:12:58,238
one, two, three major active versions that all

211
00:12:58,264 --> 00:13:01,446
have to be handled, and that just compounds the time that needs to be

212
00:13:01,468 --> 00:13:05,522
spent. And of course that gets even worse with competition.

213
00:13:05,666 --> 00:13:09,138
So as services decides that there's too much friction here, I can't

214
00:13:09,154 --> 00:13:12,326
get what I need, the dependency chains are too large. I can do that better.

215
00:13:12,508 --> 00:13:15,366
Sure, they go ahead and they try to do that better. They create another version

216
00:13:15,398 --> 00:13:18,762
of the repository, they manage it, and quickly. The same thing happens

217
00:13:18,816 --> 00:13:21,914
for consumers of that repository. But now the problem is worse, because there is

218
00:13:21,952 --> 00:13:24,800
two function a's and copy of function a.

219
00:13:25,650 --> 00:13:29,290
And of course this maybe is an accurate picture in your organization.

220
00:13:29,370 --> 00:13:32,938
But in a lot of organizations, especially with some of the values of microservices,

221
00:13:33,034 --> 00:13:36,446
a polyglot ecosystem is a very real scenario

222
00:13:36,478 --> 00:13:39,842
that you might encounter. So as we see that with service d might be a

223
00:13:39,896 --> 00:13:44,002
net six service, and it might be consuming or

224
00:13:44,056 --> 00:13:47,134
intend to consume the same function a. But of course it can't.

225
00:13:47,182 --> 00:13:50,466
And so rather than distribute it via a reasonable package,

226
00:13:50,578 --> 00:13:54,146
we often might say, well, this is where we should have just created another microservice

227
00:13:54,178 --> 00:13:57,686
that can consume that, and it can be agnostic of the language. We don't have

228
00:13:57,708 --> 00:14:00,758
to care. And it can begin to move away from some of these problems.

229
00:14:00,924 --> 00:14:03,306
But the reality is, and what we're going to discover today is some of the

230
00:14:03,328 --> 00:14:06,806
best things, some of the most appropriate things that we want to reuse through distributed

231
00:14:06,838 --> 00:14:10,214
packages cannot be made into a microservice.

232
00:14:10,262 --> 00:14:14,126
They are things that are used for cross functional concerns and for

233
00:14:14,308 --> 00:14:17,966
technical bootstrapping. And so we can accomplish, or I

234
00:14:17,988 --> 00:14:21,182
should say we can overcome a lot of these scenarios, but we have to apply

235
00:14:21,236 --> 00:14:24,386
very specific intention. We have to know exactly what

236
00:14:24,408 --> 00:14:27,646
we're building in order to do it effectively. And this requires intentional,

237
00:14:27,678 --> 00:14:30,820
necessary effort. We don't get distributed reusable code for free.

238
00:14:32,710 --> 00:14:36,610
And so we then understand more or better

239
00:14:36,680 --> 00:14:39,986
about this myth and the reality of why we

240
00:14:40,008 --> 00:14:43,226
should not share code within microservices. In fact, diving is some of

241
00:14:43,228 --> 00:14:46,566
the most popular books over the last few years. One in particular that's always

242
00:14:46,588 --> 00:14:50,982
been close to me has been building evolutionary architectures, which says microservices

243
00:14:51,046 --> 00:14:54,486
askew code reuse. Adopting the philosophy of preferred duplication

244
00:14:54,518 --> 00:14:58,902
to coupling. Reuse implies coupling and microservices architectures

245
00:14:58,966 --> 00:15:02,058
are extremely decoupled. These are opposite characteristics I

246
00:15:02,064 --> 00:15:05,294
don't want to couple together. So we're going to have to think about coupling pretty

247
00:15:05,332 --> 00:15:08,560
heavily when we talk about distributed code.

248
00:15:09,570 --> 00:15:13,306
Of course, as we read further in the same book, we find that code reuse

249
00:15:13,338 --> 00:15:17,710
can be an asset, but also a potential liability. So we understand the liability

250
00:15:17,790 --> 00:15:21,070
portion of it, but also recognizing that if harnessed correctly,

251
00:15:21,150 --> 00:15:24,690
it can be a big asset, making sure the coupling points introduced in your code

252
00:15:24,760 --> 00:15:28,098
don't conflict with the goals in your architecture. So we're going to have

253
00:15:28,104 --> 00:15:30,294
to expand. We're going to have to understand that a bit more as we dig

254
00:15:30,332 --> 00:15:33,986
in. But the question remains still then, do I duplicate

255
00:15:34,018 --> 00:15:36,758
the code or do I reuse the code? Understanding that you're going to have to

256
00:15:36,764 --> 00:15:40,650
make this decision, especially if you haven't made it yet in your distributed service

257
00:15:40,720 --> 00:15:44,650
system. And of course, if we think about copying code

258
00:15:44,720 --> 00:15:48,406
versus reusing code in terms of the law of diminishing

259
00:15:48,438 --> 00:15:51,574
returns, we see some interesting characteristics

260
00:15:51,622 --> 00:15:55,466
developed too. If you're not familiar with the law of diminishing returns,

261
00:15:55,498 --> 00:15:58,734
it's a principle stating that profits or benefits gained from

262
00:15:58,772 --> 00:16:02,014
something will represent a proportionally smaller gain as more

263
00:16:02,052 --> 00:16:05,598
money or energy is invested in it. So what we mean by that is you

264
00:16:05,604 --> 00:16:09,540
might have a line that looks like this. Comparing cost and resources for copied code

265
00:16:09,990 --> 00:16:13,506
I copied the code initially and that was pretty easy

266
00:16:13,528 --> 00:16:15,506
to do. In fact, it was a lot easier because I didn't even have to

267
00:16:15,528 --> 00:16:18,834
write the code in the first place. So with using this with one or two

268
00:16:18,872 --> 00:16:22,274
additional resources, that you're compelling it to different places

269
00:16:22,322 --> 00:16:25,766
that you'll put the code, it actually gets cheaper. But eventually, as you

270
00:16:25,788 --> 00:16:29,350
have to maintain that piece of code and you've copied it across four,

271
00:16:29,420 --> 00:16:32,806
five, six services. Now, when a change comes, or when it

272
00:16:32,828 --> 00:16:35,658
has a package or dependency that it needs, and you're keeping that up to date,

273
00:16:35,744 --> 00:16:39,258
this begins to start to cost you more than if you had distributed in the

274
00:16:39,264 --> 00:16:42,954
first place. And so we see that change then in the

275
00:16:42,992 --> 00:16:47,178
cost start to rise pretty substantially as we increase the number of resources.

276
00:16:47,354 --> 00:16:50,478
So we have to consider the fact that depending on how many times I need

277
00:16:50,484 --> 00:16:52,878
to reuse this code, it can be a lot cheaper or it can be a

278
00:16:52,884 --> 00:16:56,346
lot more expensive compared inversely then to reusable

279
00:16:56,378 --> 00:16:59,986
code, we see the opposite characteristics up front. The first time I

280
00:17:00,008 --> 00:17:03,602
want to reuse something, but I want to make it reusable code and distribute it.

281
00:17:03,656 --> 00:17:06,354
That actually costs me more the second time I do it.

282
00:17:06,472 --> 00:17:09,906
But the reality is that it's probably even much more than shown

283
00:17:09,938 --> 00:17:14,098
in this curve. That initial inclination to use distributed

284
00:17:14,114 --> 00:17:17,298
code can be pretty costly if you're not sure your projected outcome and where you're

285
00:17:17,314 --> 00:17:20,586
heading with this. So let's keep these characteristics and

286
00:17:20,608 --> 00:17:24,646
diminishing returns in mind as we consider code reuse. And for today's

287
00:17:24,678 --> 00:17:28,730
discussion we're really talking about then how do we mature our code reuse practices?

288
00:17:29,070 --> 00:17:32,538
And we don't have time to dive into all of the characteristics and

289
00:17:32,544 --> 00:17:35,434
dimensions today, but we're going to first look at coupling.

290
00:17:35,482 --> 00:17:39,630
Coupling is the best gauge that we have to understand how others

291
00:17:39,700 --> 00:17:43,326
might make use of our particular piece of distributed code, how coupled would they

292
00:17:43,348 --> 00:17:46,706
be to it. And the second part of that then is assuming we've made

293
00:17:46,728 --> 00:17:49,874
the decision to reuse code, let's look at a scenario that can

294
00:17:49,912 --> 00:17:53,614
offer us, in some cases appropriately, highly coupled

295
00:17:53,742 --> 00:17:57,678
scenarios that are actually effective in providing value to the organization through templating.

296
00:17:57,774 --> 00:18:01,240
And specifically we'll looks at service templates and service chassis there.

297
00:18:02,170 --> 00:18:05,654
So, diving first into compelling, let's understand

298
00:18:05,772 --> 00:18:09,286
exactly what do we mean by compelling? It's fair to always just jump back

299
00:18:09,308 --> 00:18:12,620
into a definition for that out of the book we've been working with, which is

300
00:18:12,990 --> 00:18:16,426
building evolutionary architectures. It defines coupling as how the

301
00:18:16,448 --> 00:18:19,580
pieces of the architecture connect and rely on one another.

302
00:18:19,950 --> 00:18:23,914
And that's helpful. But I think that actually for once, the Wikipedia

303
00:18:24,042 --> 00:18:27,454
definition is even better here, which can help us break this

304
00:18:27,492 --> 00:18:31,290
down. Coupling is the degree of interdependence between software modules.

305
00:18:31,370 --> 00:18:35,406
So number one, a measure of how closely connected the two routines or modules are,

306
00:18:35,508 --> 00:18:38,638
and number two, the strength of the relationship between the modules. So we're

307
00:18:38,654 --> 00:18:42,450
sharing to blend and move into the area of domain driven design, and how close

308
00:18:42,520 --> 00:18:45,794
the different domain aspects are to this. So let's dive in.

309
00:18:45,832 --> 00:18:49,526
We'll talk about reuse, talk about duplication, and then we'll have a little

310
00:18:49,548 --> 00:18:52,866
bet of a dive into reference

311
00:18:52,978 --> 00:18:56,678
and reference code. But first to get started, when we think

312
00:18:56,684 --> 00:19:00,102
about coupling code reuse, let's look at an example. And this is a real world

313
00:19:00,156 --> 00:19:03,926
example that I've worked through and that I've lived and felt the advantage

314
00:19:03,958 --> 00:19:07,606
and the pain of it was building an s three multipart upload.

315
00:19:07,718 --> 00:19:11,594
And this s three multipart upload seemed like a distributed piece

316
00:19:11,632 --> 00:19:14,202
of code that we wanted to write to make use in a couple of services.

317
00:19:14,336 --> 00:19:17,166
It was going to be a net based project and it was going to be

318
00:19:17,188 --> 00:19:20,702
used at least in two services, and likely several more after that.

319
00:19:20,836 --> 00:19:23,806
And so we had a clear identified need and we knew what we needed to

320
00:19:23,828 --> 00:19:27,330
build. And it was a bit more low level code than our business

321
00:19:27,400 --> 00:19:31,234
logic or the business logic of our services would care about. Meaning that it's s

322
00:19:31,272 --> 00:19:34,914
three multi part upload, it's chunking, it's streaming, it's using

323
00:19:34,952 --> 00:19:38,786
buffers, it's resetting buffers and streams using that type of code,

324
00:19:38,888 --> 00:19:42,454
which is fine to say that, I'd like to make that reasonable. That makes sense.

325
00:19:42,572 --> 00:19:45,826
It is a little error prone. If you don't reset those buffers or those streams

326
00:19:45,858 --> 00:19:48,674
at the right part as you're chunking and calculate the number of bytes properly,

327
00:19:48,722 --> 00:19:52,906
then it can be problematic. And because of that, it's also difficult to test because

328
00:19:53,008 --> 00:19:57,210
we don't actually have anything other than maybe local stack or a

329
00:19:57,360 --> 00:20:01,094
mock version of it to use locally. And so performing and writing integration

330
00:20:01,142 --> 00:20:04,238
tests and ensuring that it actually functions against the real thing is not something that

331
00:20:04,244 --> 00:20:07,040
we want to distribute across all our services if we don't have to.

332
00:20:07,810 --> 00:20:11,614
And this seemed like a really good identified piece of code we wanted

333
00:20:11,652 --> 00:20:15,018
to distribute, but it actually broke down and caused

334
00:20:15,034 --> 00:20:18,546
a lot of the pain that we talked about earlier, why it

335
00:20:18,568 --> 00:20:21,746
was inflexible and specific. We didn't correctly understand

336
00:20:21,848 --> 00:20:25,714
the contract or the interfaces that we need. With only having the two services to

337
00:20:25,752 --> 00:20:29,806
develop it with upfront, the module began to grow. It turned

338
00:20:29,918 --> 00:20:33,058
into a different set of roadmaps and opinions from just here's a multipart

339
00:20:33,074 --> 00:20:36,498
airplane component turned into a cloud package which had much more in it, which grew

340
00:20:36,514 --> 00:20:39,720
the dependency chain part of that dynamic equilibrium problem.

341
00:20:40,090 --> 00:20:43,866
And of course then it really became this proprietary library. And this

342
00:20:43,888 --> 00:20:47,274
proprietary library then required us to use it the way it was meant to,

343
00:20:47,312 --> 00:20:51,126
which is we needed a download service. And so the download service wrapped

344
00:20:51,158 --> 00:20:54,798
the s three multipart upload and you needed to use the download service and

345
00:20:54,804 --> 00:20:58,126
the download config object in order to pass that into the cloud package, which we

346
00:20:58,148 --> 00:21:01,566
then use and instantiate the s three multipart upload. That was

347
00:21:01,588 --> 00:21:04,954
a mouthful. And that's one of the problems here is it required

348
00:21:05,002 --> 00:21:08,354
some deep understanding of this that really I didn't need to have just to

349
00:21:08,392 --> 00:21:12,066
use can s three SDK. And as a

350
00:21:12,088 --> 00:21:15,490
result, then we also saw the dependency chain became a problem. We were

351
00:21:15,560 --> 00:21:18,806
on one particular dependency, very, very coupled. In this

352
00:21:18,828 --> 00:21:22,582
case, it was AWS SDK version two versus version three in. Net,

353
00:21:22,716 --> 00:21:26,454
which is substantially different. And importing and using two different

354
00:21:26,492 --> 00:21:30,438
versions of the same SDK in the same app domain in. Net is fairly difficult

355
00:21:30,524 --> 00:21:33,610
thing to do. And at the end of the day you ask yourself,

356
00:21:33,680 --> 00:21:37,014
well, there's some friction there, but maybe what we identified

357
00:21:37,062 --> 00:21:40,794
as the benefits was more valuable than what we lost. And the reality is

358
00:21:40,832 --> 00:21:44,474
it wasn't. And that's something that's hard to gauge without experience.

359
00:21:44,672 --> 00:21:46,814
But at the end of the day, when you look at it and you think

360
00:21:46,852 --> 00:21:49,994
you saved 100 lines of code, that's a good indicator,

361
00:21:50,042 --> 00:21:52,878
a good gauge to say, wow, maybe this wasn't the way that we should have

362
00:21:52,884 --> 00:21:56,154
gone. So with that example in mind,

363
00:21:56,212 --> 00:21:59,426
what are some reasons, some reasons when we should want to

364
00:21:59,448 --> 00:22:02,766
reuse? Well, emerging need was good. We had an identified emerging

365
00:22:02,798 --> 00:22:06,702
need in that example, and that was appropriate. But understanding the maturity

366
00:22:06,766 --> 00:22:10,534
of your organization is important because emerging need can be very different for someone

367
00:22:10,572 --> 00:22:13,986
in a new organization versus an older organization.

368
00:22:14,178 --> 00:22:17,698
Your roadmap and future plans may show different emerging need or problems

369
00:22:17,804 --> 00:22:21,706
from others, and so identify what

370
00:22:21,728 --> 00:22:25,466
that need might be and continue to look for other characteristics here that

371
00:22:25,488 --> 00:22:28,140
we'll see as well. Emerging need is not enough.

372
00:22:29,710 --> 00:22:33,466
High duplication, though, is interesting. And we identified that we had two places of

373
00:22:33,488 --> 00:22:37,258
duplication, but maybe that wasn't enough for us to really identify the contracts

374
00:22:37,274 --> 00:22:40,766
that would be in place to make it flexible enough. And so in this

375
00:22:40,788 --> 00:22:44,142
case, I often think about the rule of three at least. So you need to

376
00:22:44,196 --> 00:22:47,518
have at least three places in the wild that you're not planning for this exist,

377
00:22:47,614 --> 00:22:51,074
but that do in fact exist because requirements and code evolves and

378
00:22:51,112 --> 00:22:54,354
changes. And so it's not theoretical. I need to actually have three

379
00:22:54,392 --> 00:22:57,666
places this exists in production to evaluate and say, I see

380
00:22:57,688 --> 00:23:00,934
it's exactly the same in three places, or it's slightly different, and I can build

381
00:23:00,972 --> 00:23:03,430
a contract to build in that flexibility.

382
00:23:04,970 --> 00:23:08,434
You have to think about high complexity as well, if something is really complex

383
00:23:08,482 --> 00:23:12,010
and there is additional overhead to building it, but, and duplicating it,

384
00:23:12,080 --> 00:23:15,834
that might be a characteristic to say I should actually move towards building

385
00:23:15,872 --> 00:23:19,210
that sooner. And of course

386
00:23:19,280 --> 00:23:22,186
it might be high risk. And when I think about high risk, I often think

387
00:23:22,208 --> 00:23:25,566
about authorization type of code. We're often taught and

388
00:23:25,588 --> 00:23:29,326
told not to rebuild authorization mechanisms where you don't need to use the

389
00:23:29,348 --> 00:23:33,006
stuff that exists in your organization in order to do that, rather than building it

390
00:23:33,028 --> 00:23:36,098
each and every time, because that can be high risk. And authorization told be a

391
00:23:36,104 --> 00:23:39,874
good indication of something that is reusable. But you might

392
00:23:39,912 --> 00:23:43,438
also look for stuff that is a high change frequency.

393
00:23:43,534 --> 00:23:46,706
So we're not looking for stuff that is highly change because it's different every time

394
00:23:46,728 --> 00:23:49,842
you use it. You're looking for something that I have to change it often,

395
00:23:49,896 --> 00:23:53,126
but it's used in many spots exactly the same way that would

396
00:23:53,148 --> 00:23:56,178
allow you to change in one spot, test it in one way and then distribute

397
00:23:56,194 --> 00:23:59,398
it out to a lot of those places. Of course, at the

398
00:23:59,404 --> 00:24:03,178
end of the day, going back to our initial characteristics in looking at this,

399
00:24:03,264 --> 00:24:06,806
we have to ensure that we have low coupling on the architectural dimensions

400
00:24:06,838 --> 00:24:10,074
that you care about. And those dimensions are going to be specific to your application.

401
00:24:10,192 --> 00:24:13,430
And so if it's important for you to move fast in a

402
00:24:13,440 --> 00:24:16,538
particular dependency, then we need to ensure this doesn't have that dependency.

403
00:24:16,634 --> 00:24:20,254
It might just mean generally using a lot less dependencies in your

404
00:24:20,292 --> 00:24:23,986
particular package. You don't necessarily need that left trim package in

405
00:24:24,008 --> 00:24:27,362
order to do a left trim right. You can use something else

406
00:24:27,416 --> 00:24:30,766
for that internally or copy

407
00:24:30,798 --> 00:24:33,700
inside your particular code base and distribute it.

408
00:24:35,270 --> 00:24:38,606
One of my favorites too, that is a great place to identify reusable code

409
00:24:38,648 --> 00:24:42,006
is for best practices and principles. Anytime that you can

410
00:24:42,028 --> 00:24:45,734
codify your best practices and your technical principles and move them into your

411
00:24:45,772 --> 00:24:50,230
code base and then distribute that, that's a huge win that spiders across the organization.

412
00:24:50,730 --> 00:24:54,186
And so you're seeing materialize then a services of characteristics that lead

413
00:24:54,208 --> 00:24:57,814
us to a clear set of reasonable information, which is technical and cross

414
00:24:57,862 --> 00:25:01,342
functional concerns in a distributed world. What do we mean by that? We're talking

415
00:25:01,396 --> 00:25:05,194
support code, we're talking authentication, authorization, standard configs,

416
00:25:05,242 --> 00:25:08,362
platform level features and sdks that need to be integrated

417
00:25:08,426 --> 00:25:12,558
with logging and monitoring can have a great

418
00:25:12,644 --> 00:25:16,394
representation here. We'll talk about that in a minute. HTTP client sdks

419
00:25:16,442 --> 00:25:19,634
and wrappers are also very important. Those are things that don't necessarily change,

420
00:25:19,672 --> 00:25:23,310
but can provide a lot of value, error handling and validation.

421
00:25:23,390 --> 00:25:26,646
You don't need to do that differently in different app domains in a lot of

422
00:25:26,668 --> 00:25:30,450
cases. And of course, serialization, your serialization

423
00:25:30,530 --> 00:25:33,990
can be standardized in more interesting ways across the organization.

424
00:25:34,730 --> 00:25:38,662
Coming from SBS commerce, then we've had the opportunity to

425
00:25:38,716 --> 00:25:41,906
distribute a lot of these types of things in reusable code,

426
00:25:42,028 --> 00:25:46,006
and we use a monolithic, or I should say a mono repo style approach

427
00:25:46,038 --> 00:25:49,126
to that, where we build out a lot of these reusable modules in a shared

428
00:25:49,158 --> 00:25:52,778
repository in GitHub. And one, for example, is logging. We have

429
00:25:52,784 --> 00:25:56,330
an opinionated logging structure where we look for consistency of operations,

430
00:25:56,410 --> 00:26:00,266
dashboarding review, meaning that we push out this structured JSON log format

431
00:26:00,298 --> 00:26:03,854
that is the same across all of the particular applications we

432
00:26:03,892 --> 00:26:06,962
install it to. And that means that the log format is the same.

433
00:26:07,016 --> 00:26:11,198
Our operators, whether it be our engineers themselves who are monitoring production

434
00:26:11,294 --> 00:26:15,070
or other teams entirely that want to look at it, they have an immediate understanding

435
00:26:15,150 --> 00:26:18,718
to the log format that's there. Dashboards can be made in

436
00:26:18,744 --> 00:26:22,182
a reasonable way as well, because they can use the existing log format for it,

437
00:26:22,236 --> 00:26:25,160
and it's very quick and easy to review as needed.

438
00:26:26,330 --> 00:26:30,022
Errors can be another great example where, if you're using an API design

439
00:26:30,076 --> 00:26:33,546
first approach, do you have standardized error formats for

440
00:26:33,568 --> 00:26:36,378
your APIs that you're pushing out? There's no reason every service,

441
00:26:36,464 --> 00:26:40,394
every microservice you have or deployable unit should be building that

442
00:26:40,432 --> 00:26:44,118
on their own, or worse yet, just using the completely their

443
00:26:44,144 --> 00:26:47,998
own strategy or unique schema we should be able to standardize. And if

444
00:26:48,004 --> 00:26:51,994
you're in the API design world, you're familiar with RoC 708 seven, which proposes

445
00:26:52,042 --> 00:26:55,474
a standardized way to do that. Now you need to represent that model

446
00:26:55,512 --> 00:26:59,474
and distribute it. Identity identity is our

447
00:26:59,512 --> 00:27:03,374
package that allows us to handle authorization and authentication in a standardized

448
00:27:03,422 --> 00:27:06,974
way, tested in a single spot, and distributed it in a highly

449
00:27:07,022 --> 00:27:10,914
effective way. And serialization, and I mentioned this earlier

450
00:27:10,962 --> 00:27:14,422
in the last slide, serialization is not something that necessarily has to change

451
00:27:14,476 --> 00:27:18,194
between service to service. In fact, you can find a lot of additional interoperability

452
00:27:18,242 --> 00:27:21,434
and capability by just having that taken care of. And I'm not just talking about

453
00:27:21,472 --> 00:27:25,194
are you choosing camel casing or snake casing, talking about more interesting things around

454
00:27:25,232 --> 00:27:29,382
how you handle enumeration serialization, or how you handle

455
00:27:29,526 --> 00:27:32,894
nulls, or you ignore them or add them. What you do when you want to

456
00:27:32,932 --> 00:27:36,398
ignore something, all sorts of different

457
00:27:36,484 --> 00:27:39,630
detailed serialization questions that are often overlooked,

458
00:27:39,970 --> 00:27:43,034
and of course, secrets. At SPS Commerce, we use the AWS secret

459
00:27:43,082 --> 00:27:46,626
manager, and we have a very custom and proprietary way that we use it

460
00:27:46,648 --> 00:27:50,578
and organize it in a multi account, cross account world,

461
00:27:50,664 --> 00:27:54,322
sorry, I should say multiregion, cross account world. And so

462
00:27:54,376 --> 00:27:58,066
what we're seeing here is that there's still some level of coupling to these

463
00:27:58,168 --> 00:28:01,526
aspects as you pull these into your service. But this is

464
00:28:01,548 --> 00:28:05,346
where we move in and we talk about the concepts and the characteristics around appropriate

465
00:28:05,378 --> 00:28:08,854
coupling. Because you see, you might think, or you might believe

466
00:28:08,892 --> 00:28:12,026
that the term coupling is always bad. I always want low coupling, when in

467
00:28:12,048 --> 00:28:15,926
reality there's also appropriate, compelling. And if you're asking what appropriate coupling

468
00:28:15,958 --> 00:28:19,206
is, let's go back for a definition, which is dimensions of the architecture

469
00:28:19,238 --> 00:28:22,634
that should be coupled to provide maximum benefit with minimal overhead

470
00:28:22,682 --> 00:28:26,320
and cost, meaning that there is a benefit that compelling can provide.

471
00:28:26,930 --> 00:28:31,194
When we balance that, we also compare it against this additional

472
00:28:31,242 --> 00:28:34,842
quote, which is that the idea that more reusable code is the less usable

473
00:28:34,906 --> 00:28:38,542
it is. Meaning that if we go to make our code too reusable,

474
00:28:38,606 --> 00:28:42,466
too flexible, it then doesn't provide an opinion that might

475
00:28:42,488 --> 00:28:46,114
be specific to your organization, and therefore it's less interesting, it's less

476
00:28:46,152 --> 00:28:49,494
usable. So we're looking for that balance of the right level of

477
00:28:49,532 --> 00:28:53,394
low coupling, but still having reusable code that provides an opinion

478
00:28:53,442 --> 00:28:56,726
in there. And that's a really difficult balance to find. Like everything in

479
00:28:56,748 --> 00:29:00,558
architecture, that balance is staying in the middle, not finding each extreme

480
00:29:00,594 --> 00:29:03,866
of the ditch. So let's look at two examples that might help

481
00:29:03,968 --> 00:29:07,898
clarify exactly what we mean by this balance that we're looking for.

482
00:29:08,064 --> 00:29:11,446
First would be consistent logging format that we just talked about. The balance

483
00:29:11,478 --> 00:29:14,954
there, of course, is the advantages that I mentioned around dashboard

484
00:29:15,002 --> 00:29:18,318
usage, and we can have operators then that look at

485
00:29:18,324 --> 00:29:22,122
this in the same way. But if you've created, for example, a reusable dashboard,

486
00:29:22,186 --> 00:29:25,054
and that dashboard is a single instance where you can select a service and now

487
00:29:25,092 --> 00:29:28,626
switches between all those services very easily across your different

488
00:29:28,648 --> 00:29:32,526
teams and it can read them all, that's great. What happens if that reasonable dashboard

489
00:29:32,558 --> 00:29:36,020
is actually a template that gets copied every time it rolls out?

490
00:29:36,390 --> 00:29:40,450
Now, if I were to change my log format, that doesn't necessarily

491
00:29:40,530 --> 00:29:44,038
help me in the same way because the new log format rolls out to the

492
00:29:44,044 --> 00:29:47,702
different services and will break all the reasonable dashboards that are out there and cost

493
00:29:47,756 --> 00:29:51,254
me time to update and redeploy them. So thinking through

494
00:29:51,372 --> 00:29:54,562
how the different coupling characteristics might interact are essential

495
00:29:54,626 --> 00:29:58,226
here. Another one of my favorite examples

496
00:29:58,258 --> 00:30:01,806
is with feature flex. So you're not familiar with feature flags. Think of them

497
00:30:01,828 --> 00:30:04,558
as a decision point you can add into your code to decide if you're going

498
00:30:04,564 --> 00:30:07,226
to execute a piece of code or not, you're reusing a feature.

499
00:30:07,338 --> 00:30:10,798
And you might ask another service to say, hey, is this feature on or is

500
00:30:10,804 --> 00:30:14,046
it off? And when we think about it, there are three key areas that we

501
00:30:14,068 --> 00:30:17,010
can use appropriate coupling to help us with feature flags.

502
00:30:18,070 --> 00:30:21,262
First would be flag keys. So when I ask that provider,

503
00:30:21,326 --> 00:30:24,594
hey, is this flag on or off? I have to provide it a key.

504
00:30:24,632 --> 00:30:27,454
And that key is a string text that has to match what's in the feature

505
00:30:27,502 --> 00:30:31,334
flagging decision provider. If it doesn't match, it's not going to work. And so

506
00:30:31,372 --> 00:30:35,462
if I can create a package that distributes those particular keys across

507
00:30:35,516 --> 00:30:38,834
different services that might need to consume the same feature flag toggle,

508
00:30:38,962 --> 00:30:42,626
that's a big advantage. That also helps me and is can advantage

509
00:30:42,658 --> 00:30:45,306
when I want to clean it up. If I want to clean up one of

510
00:30:45,328 --> 00:30:48,586
these flags across a whole bunch of different deployable units, I need to ensure that

511
00:30:48,608 --> 00:30:52,726
I go across them all and remove it. And so using distributed package to remove

512
00:30:52,758 --> 00:30:56,474
it and build it into an enumeration as an example, and then remove

513
00:30:56,522 --> 00:30:59,834
that enum now allows me to actually redistribute a package

514
00:30:59,962 --> 00:31:03,102
and I'm using to actually break the build as people

515
00:31:03,156 --> 00:31:05,746
upgrade, and so they'll upgrade and be able to go to their code and know

516
00:31:05,768 --> 00:31:09,730
that they should remove that. That flag is no longer active or shouldn't be considered.

517
00:31:10,790 --> 00:31:14,126
Similarly, user context is important. When I work across a distributed

518
00:31:14,158 --> 00:31:18,102
environment, I need to provide the same context and say my user is

519
00:31:18,236 --> 00:31:21,446
name Travis. Now if my other service

520
00:31:21,548 --> 00:31:24,534
asks and says name is Travis John,

521
00:31:24,732 --> 00:31:28,006
then that's not going to work. That's not going to be appropriate. Those are two

522
00:31:28,028 --> 00:31:32,074
different names that it's provided. Maybe one's using name, one's using first name, last name.

523
00:31:32,192 --> 00:31:36,038
The context isn't the same. So using a distributed library to help with the abstraction

524
00:31:36,054 --> 00:31:39,398
of the feature flag context can be enormous help in appropriate,

525
00:31:39,414 --> 00:31:43,374
compelling as well. Another way

526
00:31:43,412 --> 00:31:47,146
to think about appropriate coupling and the difference between duplicating

527
00:31:47,178 --> 00:31:50,846
and reuse, I find, is the traditional animation process. And in

528
00:31:50,868 --> 00:31:54,378
my household I have three young children, and the Lion King

529
00:31:54,394 --> 00:31:56,800
is a pretty big,

530
00:31:57,570 --> 00:32:01,138
I guess, show that we watch often. And it's interesting when

531
00:32:01,144 --> 00:32:03,906
you look at the traditional animation process, I have a lot of respect for the

532
00:32:03,928 --> 00:32:07,282
animators because this is a ton of work to do. Some of these minute changes

533
00:32:07,336 --> 00:32:11,074
in detail shifts. When you think about it, we can break this into two core

534
00:32:11,122 --> 00:32:14,354
parts. The first is the foreground, the second is the background.

535
00:32:14,482 --> 00:32:18,226
And here the background really only has two components. And the foreground,

536
00:32:18,258 --> 00:32:21,542
though, in animating the different animals as they move and shift is

537
00:32:21,596 --> 00:32:25,066
pretty unique, right? Every time I got to redraw it, do I want to have

538
00:32:25,088 --> 00:32:28,234
to redraw the background that hasn't changed every single time? And of course,

539
00:32:28,272 --> 00:32:31,306
the answer is no. And when we think about that, then we think about that

540
00:32:31,328 --> 00:32:35,130
in terms of duplication. When you're going to redraw those animals

541
00:32:35,950 --> 00:32:38,958
in this way, you don't want to redraw the background every time. You're going to

542
00:32:38,964 --> 00:32:41,566
have a ton of little changes and small changes to make. And this is what

543
00:32:41,588 --> 00:32:45,002
the most important part of the scene is, is these animals, not the background.

544
00:32:45,146 --> 00:32:48,354
And of course, the background then is the reusable portion that we want to have

545
00:32:48,392 --> 00:32:51,794
there and available. And in the traditional animation process, they were done

546
00:32:51,832 --> 00:32:54,866
separately. You can take a look at behind the scenes with the lion king and

547
00:32:54,888 --> 00:32:58,286
see how that looks and works. But essentially we have some transparent

548
00:32:58,318 --> 00:33:01,606
sheets that are overlaid over top of each other, a series of overlays that build

549
00:33:01,628 --> 00:33:04,854
this together. So the animator isn't responsible for drawing the whole

550
00:33:04,892 --> 00:33:08,566
scene and redrawing it every time he wants to slightly shift or move

551
00:33:08,748 --> 00:33:12,266
the arm of the lion, for example. In the same way we think

552
00:33:12,288 --> 00:33:15,786
of that with code reuse in a distributed microservice world,

553
00:33:15,888 --> 00:33:19,786
when we stand up a new microservice, there's a ton of cross functional concerns that

554
00:33:19,808 --> 00:33:23,134
are just the background. They're there to make the service work, they're there

555
00:33:23,172 --> 00:33:26,782
to set the context. But the real business logic, the thing that

556
00:33:26,836 --> 00:33:29,834
makes this particular service unique,

557
00:33:29,882 --> 00:33:33,354
is often not something you want to duplicate. It's domain

558
00:33:33,402 --> 00:33:37,490
driven, and it should be existing in this particular domain. It belongs in this microservice.

559
00:33:38,390 --> 00:33:41,986
So with that in mind, though, sometimes there are reasons just to copy it.

560
00:33:42,008 --> 00:33:46,974
And so I want to run through some of these quickly with you. Sometimes understanding

561
00:33:47,102 --> 00:33:50,280
if you have an incorrect abstraction is important. Right.

562
00:33:51,050 --> 00:33:54,114
And so when we look at this, the idea is that you should prefer duplication

563
00:33:54,162 --> 00:33:58,086
over wrong abstraction. If you don't have enough information to understand the

564
00:33:58,108 --> 00:34:01,418
abstraction that you want to build, the interface or the contracts that you're building,

565
00:34:01,504 --> 00:34:05,146
then don't do it yet. Like that simple example in

566
00:34:05,168 --> 00:34:09,174
s three we looked at earlier, we didn't have enough understanding

567
00:34:09,222 --> 00:34:11,340
of what the abstraction should be.

568
00:34:13,870 --> 00:34:17,006
Low overhead to savings ratio. So we think about what is the

569
00:34:17,028 --> 00:34:19,758
actual reuse savings going to have? And of course, a lot of this goes back

570
00:34:19,764 --> 00:34:22,766
to that law of diminishing returns we saw earlier. And this,

571
00:34:22,788 --> 00:34:25,838
in a lot of cases, there's no simple formula to say this is

572
00:34:25,844 --> 00:34:28,434
the amount of time you're going to save. And a lot of these things are

573
00:34:28,472 --> 00:34:31,938
intangible to some degree. But as you begin to think about this

574
00:34:32,024 --> 00:34:35,474
and look at this more, you'll develop a real sense for it, a real

575
00:34:35,592 --> 00:34:38,414
gut understanding of it, but in many cases,

576
00:34:38,462 --> 00:34:41,878
understanding how often you plan to reuse it and some of those other characteristics in

577
00:34:41,884 --> 00:34:45,478
terms of high risk emerging need. Is it

578
00:34:45,484 --> 00:34:48,874
already built? In three spots that I can see how it's been used are really

579
00:34:48,912 --> 00:34:52,540
helpful guidelines for how to approach that.

580
00:34:53,310 --> 00:34:56,666
And of course you want to think about feasibility here. And when we

581
00:34:56,688 --> 00:35:00,410
think about feasibility, we're thinking about the idea that maybe

582
00:35:00,480 --> 00:35:04,170
this isn't something that your team should be building. Maybe you've bitten off too much

583
00:35:04,320 --> 00:35:08,026
and there's more than you can chew, right? If you're a particular delivery

584
00:35:08,058 --> 00:35:11,134
team and you're working on a small aspect, and you're putting together a large application

585
00:35:11,252 --> 00:35:15,178
framework, reusable package, maybe that's something that your platform engineering

586
00:35:15,194 --> 00:35:18,798
team should be building, maybe it isn't even you. And so it's

587
00:35:18,814 --> 00:35:22,014
something to consider that if it's not feasible,

588
00:35:22,062 --> 00:35:25,266
if, for example, there are too many dependencies being added and you can't legitimately do

589
00:35:25,288 --> 00:35:29,238
it without a high degree of coupling, then don't try and

590
00:35:29,244 --> 00:35:32,486
do it. If that's the case, it can be better to copy a little

591
00:35:32,508 --> 00:35:35,142
code than pull in a big library. For one function,

592
00:35:35,276 --> 00:35:37,910
dependency hygiene trumps code reuse.

593
00:35:38,730 --> 00:35:42,042
And of course last but maybe of most

594
00:35:42,096 --> 00:35:45,866
interest is diversified opinions. Sometimes there are just other

595
00:35:45,888 --> 00:35:48,986
opinions, there are too many opinions on how to build something. And if

596
00:35:49,008 --> 00:35:52,218
that's the case, maybe you should consider actually not building it.

597
00:35:52,224 --> 00:35:55,374
Bet. Until you've actually had a chance to land on an opinion within

598
00:35:55,412 --> 00:35:58,862
your organization that would actually make it reusable. Otherwise, you might find

599
00:35:58,916 --> 00:36:02,318
that no one wants to use your nice reusable code that you've built because they

600
00:36:02,324 --> 00:36:05,838
have a different approach to the performance of it or to how serialization

601
00:36:05,934 --> 00:36:09,826
should work. So with

602
00:36:09,848 --> 00:36:13,122
that in mind, I always like to bring up this idea

603
00:36:13,176 --> 00:36:16,466
around shared utility libraries with coupling. This is often how I feel when

604
00:36:16,488 --> 00:36:19,806
I see shared utility libraries. And let me explain a little bit about

605
00:36:19,848 --> 00:36:23,686
what I mean by that. And so if we were to use a library kind

606
00:36:23,708 --> 00:36:27,366
of associated term here, and in the library you had a book and you

607
00:36:27,388 --> 00:36:31,142
wanted to pull that book off the shelf, and it might be called Myorg module

608
00:36:31,206 --> 00:36:35,046
utilities. And there are two core

609
00:36:35,078 --> 00:36:38,154
pieces of content in that particular book.

610
00:36:38,352 --> 00:36:41,754
There is how to cook craft dinner in the microwave, and building custom

611
00:36:41,792 --> 00:36:44,990
furniture so different from each other.

612
00:36:45,060 --> 00:36:48,474
Much like many utility libraries that are just made up of different random

613
00:36:48,522 --> 00:36:51,866
things that people put in there that do different string parsing utilities

614
00:36:51,898 --> 00:36:56,126
or enum parsing all the way to HTTP

615
00:36:56,158 --> 00:37:00,098
clients for APIs, the reality is that they don't actually belong together.

616
00:37:00,184 --> 00:37:03,586
And because you've coupled them together in the same distributable project or

617
00:37:03,608 --> 00:37:07,870
single piece library that's there now, they can't be used effectively

618
00:37:08,030 --> 00:37:11,398
to get rid of some of the problems and the high degree of coupling that

619
00:37:11,404 --> 00:37:15,106
we've seen thus far. And so the reality is that cooking craft in the microwave

620
00:37:15,138 --> 00:37:18,406
and building custom furniture have much different dependencies involved in

621
00:37:18,428 --> 00:37:22,610
them. Or if they were actually pieces of code they told have much different packages

622
00:37:22,690 --> 00:37:26,042
they were consumed. But now you've bound them together and you're pushing them out,

623
00:37:26,096 --> 00:37:29,418
forcing consumers to think that well, number one, the dependency tree is going

624
00:37:29,424 --> 00:37:32,602
to be awful for that. Number two, do you really have any authority over either

625
00:37:32,656 --> 00:37:36,378
one of those? Why would you put them in the same package? Maybe they're

626
00:37:36,394 --> 00:37:39,726
not even accurate or correct. And so it begs a lot of

627
00:37:39,748 --> 00:37:43,582
questions. Keep those libraries small, keep them task focused and specific.

628
00:37:43,716 --> 00:37:47,466
Don't build a utility library. But in a lot of cases a utility library

629
00:37:47,498 --> 00:37:50,658
has been built simply because someone just needed a place to

630
00:37:50,664 --> 00:37:53,906
start copying these kind of one off functions and put them somewhere. And that's not

631
00:37:53,928 --> 00:37:57,218
a bad thing to have. It's just probably more appropriate not to

632
00:37:57,224 --> 00:38:00,854
distribute it and just keep it in a GitHub repo, keep it in something like

633
00:38:00,892 --> 00:38:04,550
stack overflow. We think of those as snippets, right? So you might

634
00:38:04,620 --> 00:38:08,006
use different methods for keeping track of those and having

635
00:38:08,028 --> 00:38:11,062
them available. Maybe at some point it makes sense to see how they grow,

636
00:38:11,116 --> 00:38:14,954
and maybe there is a package that is nicely coupled together that would make sense

637
00:38:14,992 --> 00:38:18,358
to build. But over time you'll likely find that there's a good chunk

638
00:38:18,374 --> 00:38:21,530
of stuff in there that should never be released together in a single libraries.

639
00:38:23,070 --> 00:38:26,734
So with that in mind, let's assume that you've made the decision to go ahead

640
00:38:26,772 --> 00:38:30,906
and start building some of these cross functional concerns into a libraries,

641
00:38:31,098 --> 00:38:33,918
and that libraries you can go ahead and build it out and im sure it

642
00:38:33,924 --> 00:38:34,990
would be effective.

643
00:38:37,350 --> 00:38:40,702
But what I want to touch on here is the idea of templating. Because templating

644
00:38:40,766 --> 00:38:45,090
can really help us think about how to position our reusable code across your ecosystem.

645
00:38:46,230 --> 00:38:49,826
And so the idea around templating takes us one abstraction

646
00:38:49,858 --> 00:38:53,046
layer above that with the intention of introducing a

647
00:38:53,068 --> 00:38:56,486
grouping of packages to form a standard, a more opinionated way of

648
00:38:56,508 --> 00:39:00,498
implementing something that can be cross cutting, some of these cross cutting technical areas

649
00:39:00,514 --> 00:39:03,414
that we want to apply to. So we're going to talk about project seeds.

650
00:39:03,462 --> 00:39:06,506
We're going to build on that with service templates and then build on that with

651
00:39:06,528 --> 00:39:10,250
service chassis. So diving into project

652
00:39:10,320 --> 00:39:14,206
seeds, what do I mean by a project seed is very important, which is

653
00:39:14,308 --> 00:39:17,662
a very high level reference point for starting a new

654
00:39:17,716 --> 00:39:20,954
application that typically provides standardized folder structure

655
00:39:21,002 --> 00:39:24,270
along with SDLC workflow via templates files.

656
00:39:24,630 --> 00:39:28,306
And so it's fairly simple and straightforward. Your seed is made

657
00:39:28,328 --> 00:39:31,326
up of things like metadata folder structure.

658
00:39:31,358 --> 00:39:35,026
Do you use source or src? Do you have a test folder? Do you have

659
00:39:35,048 --> 00:39:39,206
a standardized GitHub actions yaml file you put in there that gives you

660
00:39:39,308 --> 00:39:42,822
the defaults of your template or workflow? Really any of these

661
00:39:42,876 --> 00:39:46,342
types of files or folders that exist, it might be

662
00:39:46,396 --> 00:39:50,214
GitHub specific files like a dependent bot file or codeowners file, or even

663
00:39:50,252 --> 00:39:53,786
a readme MD of how to get started. And when you go ahead and

664
00:39:53,808 --> 00:39:57,980
create that, you're creating a copy of it. And so in most cases when using

665
00:39:58,350 --> 00:40:02,342
a project seed, it's a one time copy to start the project. Here's your skeleton,

666
00:40:02,406 --> 00:40:05,470
go ahead and start ripping it apart and changing names and moving stuff around.

667
00:40:05,620 --> 00:40:08,746
And so the value here, there's a little bit of value, it helps you notionally

668
00:40:08,778 --> 00:40:12,474
get started on a new project. In some cases people are already copying previous

669
00:40:12,522 --> 00:40:16,114
projects they work on in order to start. And the cost to maintain is pretty

670
00:40:16,152 --> 00:40:19,906
low because it's typically language agnostic. And you see that as

671
00:40:19,928 --> 00:40:23,778
a repository template in GitHub where you can mark any repository as

672
00:40:23,784 --> 00:40:27,614
a template and then it simply gets copied and pasted

673
00:40:27,742 --> 00:40:31,046
into the new repo as you selected and start. So there are mechanisms out there

674
00:40:31,068 --> 00:40:34,434
and there are tools at GitHub that just have that built in and it's

675
00:40:34,482 --> 00:40:36,840
low value, low cost as well though.

676
00:40:37,530 --> 00:40:40,778
But more interesting is moving to a service template. And a

677
00:40:40,784 --> 00:40:44,294
service template is defined as this, which is an opinionated reference

678
00:40:44,342 --> 00:40:47,542
for specific application and language types that reduces

679
00:40:47,606 --> 00:40:51,650
boilerplate setup and provide consistency on crosscutting concerns.

680
00:40:51,750 --> 00:40:56,410
The important part here with the template is we're actually moving to language specific scenarios

681
00:40:56,490 --> 00:41:00,318
where we want to provide distributed and reusable code.

682
00:41:00,484 --> 00:41:03,726
And so here we have security classes, we have external

683
00:41:03,758 --> 00:41:06,914
considerations, loggers tracing all

684
00:41:06,952 --> 00:41:10,062
the types of code that we talked about earlier

685
00:41:10,126 --> 00:41:13,554
that we think is appropriate to reuse have been copied and are

686
00:41:13,592 --> 00:41:17,866
available here. Now this typically a service template can be created with tokenized

687
00:41:17,918 --> 00:41:21,878
parameters, and so tokenized parameters are hey, I want to change

688
00:41:22,044 --> 00:41:25,298
the namespace this is in, or the class name to be prefixed

689
00:41:25,314 --> 00:41:28,646
with some specific name for this service, and it does that

690
00:41:28,668 --> 00:41:32,038
transformation and dumps it in your repository for you. This again is a

691
00:41:32,044 --> 00:41:35,642
point in time snapshot on creation. It doesn't update or change after that.

692
00:41:35,776 --> 00:41:39,018
And so here we see the value is a little bit larger because I can

693
00:41:39,024 --> 00:41:43,242
get started pretty fast with some pretty great opinions. But the cost over time,

694
00:41:43,296 --> 00:41:46,842
especially as we think about the law of diminishing returns, then that I'm copying these

695
00:41:46,896 --> 00:41:50,206
pieces of code means that that's great when you got three of them, but when

696
00:41:50,228 --> 00:41:52,238
I got ten or 20 of these and I need to make an update to

697
00:41:52,244 --> 00:41:56,180
the security class, oops, that's a big change to make.

698
00:41:57,190 --> 00:42:00,562
Nevertheless, we see the ability to do service

699
00:42:00,616 --> 00:42:04,814
templates in tools like backstage. IO has a great template

700
00:42:04,862 --> 00:42:08,006
library and marketplace that you can go into, and you can create custom donts and

701
00:42:08,028 --> 00:42:11,960
choose them and tokenize the parameters to get started, and that works fairly well.

702
00:42:13,690 --> 00:42:17,558
The reality though is we're still copying that code and we're still seeing some of

703
00:42:17,564 --> 00:42:20,886
the coupling points are really going to get our way over time. So we

704
00:42:20,908 --> 00:42:25,178
really need to think about the concepts around service chassis. And a service chassis again

705
00:42:25,264 --> 00:42:28,618
is not something that you would just do on your own or have to

706
00:42:28,624 --> 00:42:31,786
do on your own versus a service template. You might actually combine project feels,

707
00:42:31,818 --> 00:42:35,360
service templates and service chassis altogether to form a great experience.

708
00:42:35,810 --> 00:42:39,486
But at a high level, a service chassis changes this around

709
00:42:39,668 --> 00:42:43,246
by instead of including all the code inside of our

710
00:42:43,268 --> 00:42:47,506
service template, we're actually just including configuration for those packages that

711
00:42:47,528 --> 00:42:51,342
are being pulled in. And so now they are copied references.

712
00:42:51,486 --> 00:42:54,750
We've copied by reference, or I should say passed by reference.

713
00:42:54,830 --> 00:42:58,398
And so when we create the new service, that's great. It is a point

714
00:42:58,424 --> 00:43:01,862
in time snapshot of the service template. But because

715
00:43:01,916 --> 00:43:05,714
I can change and modify those pieces of code, I can very easily now reference

716
00:43:05,762 --> 00:43:09,720
them and reference newer versions if I want when you're pushing them out.

717
00:43:10,170 --> 00:43:13,594
And so here we see the value is pretty high because not

718
00:43:13,632 --> 00:43:16,186
only can I get that point in time snapshot and get flying on a new

719
00:43:16,208 --> 00:43:19,862
service very fast, I can also begin to augment and change the opinions

720
00:43:19,926 --> 00:43:23,206
and the best practices and have individuals update

721
00:43:23,238 --> 00:43:26,366
with them over time. Now it gets a little bit better than that.

722
00:43:26,388 --> 00:43:29,786
We can actually take this one abstraction further. In this case, I have a series

723
00:43:29,818 --> 00:43:33,162
of static references. I have exactly five references. They've been added.

724
00:43:33,306 --> 00:43:37,470
That's all I can ever change at a global level within the organization,

725
00:43:37,550 --> 00:43:40,754
unless I go back and add another reference inside the service template. But then only

726
00:43:40,792 --> 00:43:44,498
new projects get that. So we abstract it one bit further with

727
00:43:44,504 --> 00:43:48,166
the service chassis and we use this particular chassis. We might

728
00:43:48,188 --> 00:43:52,306
have a chassis named specifically for building rest APIs in the organization,

729
00:43:52,498 --> 00:43:56,294
and it provides a configuration of all the packages above, maybe some other

730
00:43:56,332 --> 00:44:00,226
configurations relative to rest API, and that way our service templates becomes

731
00:44:00,258 --> 00:44:03,846
much smaller. Anytime we can eliminate components

732
00:44:03,878 --> 00:44:07,334
in the service templates but provide the same functionality, that's a benefit.

733
00:44:07,462 --> 00:44:11,366
So here the service template is very small, it's just a bootstrap that says config.

734
00:44:11,558 --> 00:44:15,306
Use this one package that we have as a reference to the abstracted

735
00:44:15,338 --> 00:44:18,942
reference. And of course when we go ahead and create then the service

736
00:44:18,996 --> 00:44:22,654
off of it, it references a single reference package, but it references all

737
00:44:22,692 --> 00:44:26,418
these other packages. And of course the benefit there is I can add new stuff,

738
00:44:26,504 --> 00:44:29,940
I can change high level configuration, I have a lot more control

739
00:44:30,390 --> 00:44:33,586
on the integration of that within the service. And so the

740
00:44:33,608 --> 00:44:37,586
value here can be much higher and the cost is much lower, not assuming the

741
00:44:37,608 --> 00:44:41,526
cost of creating the other packages. And so this is a pretty

742
00:44:41,708 --> 00:44:45,394
large advantage where we can start to combine then the surface chassis concept

743
00:44:45,442 --> 00:44:48,902
with the service template and the seed to build a pretty nice

744
00:44:48,956 --> 00:44:52,986
experience for reusable code. Of course,

745
00:44:53,088 --> 00:44:56,310
there's another problem that we often experience in the organization,

746
00:44:56,390 --> 00:44:59,546
and I call that the service mesh gap. And the reason I call it that

747
00:44:59,568 --> 00:45:02,966
is because we think about platform engineering. We think about building out these platforms

748
00:45:02,998 --> 00:45:06,126
that a lot of our organizations are building now, and a lot

749
00:45:06,148 --> 00:45:09,834
of that is built on Kubernetes cluster, other container orchestrators

750
00:45:09,882 --> 00:45:13,214
perhaps, but at the end of the day, using service meshes and building that

751
00:45:13,252 --> 00:45:16,734
platform, we see a lot of the functionality provided for us.

752
00:45:16,772 --> 00:45:20,274
So areas where we might have only been able to do in code before,

753
00:45:20,312 --> 00:45:23,358
like distributed tracing. If you're trying to do that without a service mesh,

754
00:45:23,534 --> 00:45:27,026
you had to put it in your code. But now as we start to

755
00:45:27,048 --> 00:45:30,054
move some of these things and we use service meshes and proxies, we can begin

756
00:45:30,092 --> 00:45:33,250
to automatically build in mutual TLS tracing,

757
00:45:33,330 --> 00:45:37,074
egress, logging metrics, errors, and auth is just default

758
00:45:37,122 --> 00:45:39,734
part of that, even if your container is just hello world and has nothing else

759
00:45:39,772 --> 00:45:43,722
as a part of it. But the reality is to effectively do

760
00:45:43,776 --> 00:45:47,558
the logging, it still has to come. Often cases in some type of agreed

761
00:45:47,574 --> 00:45:51,802
upon format or distributed tracing works in the service mesh without any changes.

762
00:45:51,936 --> 00:45:54,974
But we can add a lot more context to it if we want to build

763
00:45:55,012 --> 00:45:58,714
its maturity to the next level. And so we need to meet a contract

764
00:45:58,842 --> 00:46:02,686
in these cases to metrics, to logging, to tracing, and that can

765
00:46:02,708 --> 00:46:05,922
be a great place for the service chassis to fit as well. The reason

766
00:46:05,976 --> 00:46:09,806
is now we can make platform level updates, but also roll

767
00:46:09,838 --> 00:46:13,970
out distributed piece of code that can also automatically roll out

768
00:46:14,040 --> 00:46:18,210
to these different services that have already implemented and used that particular service chassis.

769
00:46:18,870 --> 00:46:22,418
Now the next question on top of this I know is what you're

770
00:46:22,434 --> 00:46:26,326
thinking, which is that my teams never update their packages. That's great. You're saying that

771
00:46:26,348 --> 00:46:29,638
they can update to a newer version, but why? Told they they're not

772
00:46:29,644 --> 00:46:32,794
even thinking about that necessarily. And if we want to get this to a point

773
00:46:32,832 --> 00:46:36,314
of highest effectiveness, we need to have some

774
00:46:36,352 --> 00:46:40,460
level of communication with the teams that's letting them know when new

775
00:46:41,310 --> 00:46:44,446
components or new versions of the package are available. And that needs to

776
00:46:44,468 --> 00:46:47,566
be something that happens fast and quick in order to keep your

777
00:46:47,588 --> 00:46:51,358
velocity flowing in a microservice world. So there are lots of different tools to

778
00:46:51,364 --> 00:46:54,634
do that. If we think about the problem and we have a library,

779
00:46:54,682 --> 00:46:57,986
in this case a nuget package could be a maven package in your app.

780
00:46:58,088 --> 00:47:01,086
The only reasons your team is going to want to update is because while it's

781
00:47:01,118 --> 00:47:04,766
initial install, they detected a vulnerability. There was perhaps

782
00:47:04,798 --> 00:47:08,298
a major upgrade, or they need a new feature that they're

783
00:47:08,334 --> 00:47:11,778
looking for specifically on that package. Beyond that, teams aren't

784
00:47:11,794 --> 00:47:15,606
going to upgrade, just go look at it on their own. Typically you have

785
00:47:15,628 --> 00:47:19,026
some really great engineers who do that, but typically they don't.

786
00:47:19,058 --> 00:47:22,966
And so we can use tools to help us solve this problem. Tools like dependent

787
00:47:22,998 --> 00:47:26,582
bet. If you're using GitHub, dependent bet is a really easy component,

788
00:47:26,646 --> 00:47:30,314
especially for open source, that you can enable that automatically submits pull

789
00:47:30,352 --> 00:47:33,426
requests to your repository with any package updates.

790
00:47:33,558 --> 00:47:36,878
And to answer your question, yes, it does support private feels. So if you want

791
00:47:36,884 --> 00:47:41,258
to build your internal service template, deploy that to an internal package repository,

792
00:47:41,434 --> 00:47:45,246
or JFrog or even public, you can configure that and

793
00:47:45,268 --> 00:47:48,626
include it. It is highly configurable for other purposes. So if you're saying I

794
00:47:48,648 --> 00:47:51,586
don't want to bump all my version numbers all the time, though that might be

795
00:47:51,608 --> 00:47:55,266
a good idea. You can configure just to say for these packages you should do

796
00:47:55,288 --> 00:47:59,246
that. And this is incredibly helpful. And we encourage all our teams

797
00:47:59,278 --> 00:48:02,710
to do this so that you're staying up to date with, if not other things,

798
00:48:02,780 --> 00:48:06,546
at least with the distributed packages that are there, that could be information you include

799
00:48:06,578 --> 00:48:09,946
in your documentation of your library. That that is the expectation for

800
00:48:09,968 --> 00:48:13,878
consumers. It does work across all major language ecosystems

801
00:48:13,974 --> 00:48:17,434
that I've looked at and used, and it does interact nicely through

802
00:48:17,472 --> 00:48:20,922
pull requests. There are other tools out there if you're large in the.

803
00:48:20,976 --> 00:48:24,154
Net world. Newkeeper used to be a good option.

804
00:48:24,352 --> 00:48:27,226
It's not a hosted service though, it's one you'd have to build out and host

805
00:48:27,258 --> 00:48:30,778
yourself. But renovate is a great option and dependent

806
00:48:30,794 --> 00:48:34,122
bot is nice and it works. But renovate provides a lot of additional

807
00:48:34,186 --> 00:48:37,506
options, especially in terms of grouped updates, ensuring that certain packages get

808
00:48:37,528 --> 00:48:40,942
updated at the same time and the same pull request, which can be problematic.

809
00:48:41,006 --> 00:48:44,894
Independent bet so take a look at this type of tooling for dependency

810
00:48:44,942 --> 00:48:48,526
management and dependency consumption and see if you can make use of it. It'll change

811
00:48:48,568 --> 00:48:52,200
the way you think about distributed code in terms of your velocity as well.

812
00:48:53,450 --> 00:48:56,870
So with that in mind, moving on then, here's an example of a service

813
00:48:56,940 --> 00:49:00,154
template that we have at SPS, and this incorporates a lot of these

814
00:49:00,192 --> 00:49:03,622
capabilities. This particular example is demonstrating

815
00:49:03,686 --> 00:49:07,206
how we moved and we use the service template to move between error formats,

816
00:49:07,318 --> 00:49:11,306
to move to structured JSON output, to move our secrets from AWS parameter

817
00:49:11,338 --> 00:49:15,150
store to secret manager, how we handle and move from

818
00:49:15,220 --> 00:49:18,554
standardized resilient HTTP clients for identity authentication

819
00:49:18,682 --> 00:49:22,880
to more distributed auth handlers, which is pretty cool

820
00:49:23,730 --> 00:49:27,858
tracing. And we moved from AWS x ray to open telemetry like many

821
00:49:28,024 --> 00:49:32,050
modification of our serialization routines. And all this was built inside a standard

822
00:49:32,120 --> 00:49:36,274
API chassis that had an opinionated set of best practices within

823
00:49:36,312 --> 00:49:39,282
our organization that it created and set up by default.

824
00:49:39,426 --> 00:49:42,818
And then at the same time include a bunch of your own capability,

825
00:49:42,914 --> 00:49:46,198
additional security, middleware, swag or sentry. Build that all

826
00:49:46,204 --> 00:49:49,442
into the application so that with a simple single install

827
00:49:49,516 --> 00:49:53,034
and a simple package reference, we can begin

828
00:49:53,152 --> 00:49:57,770
to take advantage of your best practices in your organization without

829
00:49:57,840 --> 00:50:01,206
having done anything, without having the overhead of that code even in your repository.

830
00:50:01,398 --> 00:50:04,878
And so for us, this is a particular example. In. Net we

831
00:50:04,884 --> 00:50:08,526
also have other growing service templates in Java and

832
00:50:08,628 --> 00:50:12,266
also in go and in Python. But this example I can simply

833
00:50:12,298 --> 00:50:15,506
create a new scaffolded web application using. Net new

834
00:50:15,528 --> 00:50:19,550
web API, which is the default template from Microsoft, not something we created.

835
00:50:19,710 --> 00:50:23,234
And I can then do a. Net install of our chassis and

836
00:50:23,352 --> 00:50:27,590
update the runtime host. So updating your program Cs essentially,

837
00:50:28,010 --> 00:50:31,394
or if you're in Java, your program Java,

838
00:50:31,522 --> 00:50:35,094
and here you can come in, you can specify then

839
00:50:35,132 --> 00:50:38,706
that you want to use the SPS host. This is our service chassis.

840
00:50:38,818 --> 00:50:42,746
Add it in and then specify that you want to use the middleware as

841
00:50:42,768 --> 00:50:46,906
well as the dependency injection, and then after that everything is configurable and

842
00:50:46,928 --> 00:50:50,246
ejectable, meaning that you have an escape hatch at every point. If you decide

843
00:50:50,278 --> 00:50:53,146
you don't want to use a certain feature of that package without ejecting from the

844
00:50:53,168 --> 00:50:57,194
whole service template altogether. Of course, there are teams that don't want to necessarily

845
00:50:57,242 --> 00:51:00,814
couple themselves to this particular large service template, and they can

846
00:51:00,852 --> 00:51:04,850
use some of the other distributed packages independently and individually if needed.

847
00:51:05,000 --> 00:51:08,370
So that's been a huge advantage in what they're producing.

848
00:51:10,150 --> 00:51:13,394
Well, we're almost at our time for today, but it's important that we talk

849
00:51:13,432 --> 00:51:17,250
about what incremental gains you can achieve within your organization.

850
00:51:17,590 --> 00:51:20,934
And I want to make sure that this was understood before leaving here, that in

851
00:51:20,972 --> 00:51:24,486
some cases, achieving a full service template might be

852
00:51:24,588 --> 00:51:27,846
a mile high order, something that you can't get to with what you

853
00:51:27,868 --> 00:51:31,910
have. And so instead of developing grand designs for an internal code framework,

854
00:51:31,990 --> 00:51:35,674
it's often best to start small, develop iteratively, and progressively build on small

855
00:51:35,712 --> 00:51:39,334
successes. So take advantage of if you can't build a full service chassis

856
00:51:39,382 --> 00:51:43,226
today, start with some of the smaller concepts, build one package and then include that

857
00:51:43,248 --> 00:51:46,494
package reference in your service template and start to roll it out.

858
00:51:46,612 --> 00:51:49,934
Think. But whether you need a full service chassis, we didn't talk about it today,

859
00:51:49,972 --> 00:51:53,274
we didn't have a chance to. But if you're in a polyglot ecosystem,

860
00:51:53,322 --> 00:51:56,714
it can be a lot of work to maintain those. And your dynamic equilibrium

861
00:51:56,762 --> 00:51:59,778
is all about. Do you have enough people supporting it on what the needs of

862
00:51:59,784 --> 00:52:03,298
the organization are? So a lot of this comes back to the resources you have

863
00:52:03,304 --> 00:52:06,810
at hand and the capabilities that you have. But no matter what you decide,

864
00:52:06,910 --> 00:52:09,958
there is a path forward for effective code reuse for

865
00:52:10,044 --> 00:52:13,522
distributed microservices, and I think that you should investigate it further,

866
00:52:13,586 --> 00:52:15,640
and I hope that's compelling enough for you.

867
00:52:17,130 --> 00:52:21,270
Thanks for taking a look today. I'll leave you with this quote from Douglas Crawford,

868
00:52:21,350 --> 00:52:24,646
which I love, which is code reuse is the holy grail

869
00:52:24,678 --> 00:52:28,598
of software engineering. And whether by Holy Grail he intended

870
00:52:28,614 --> 00:52:32,266
to mean that it is all about the journey, that you may never find the

871
00:52:32,288 --> 00:52:35,742
holy Grail, or the potential that it may or may not exist, or whether

872
00:52:35,796 --> 00:52:39,246
it is in fact just the ultimate treasure that

873
00:52:39,268 --> 00:52:42,846
we are looking for. I'll let you decide on which definition is

874
00:52:42,868 --> 00:52:45,914
appropriate, but keep thinking about appropriate coupling for your decisions,

875
00:52:45,962 --> 00:52:48,954
and dive in and take a look at some of those service templates and chassis

876
00:52:49,002 --> 00:52:52,286
that you can build internally in your organization. Appreciate your

877
00:52:52,308 --> 00:52:55,750
time today. Take care. You can always find me online. Mine as well.

878
00:52:55,820 --> 00:52:58,290
On my website or also on Twitter.

