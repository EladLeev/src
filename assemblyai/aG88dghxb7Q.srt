1
00:00:25,090 --> 00:00:27,846
Um, hello everybody,

2
00:00:28,028 --> 00:00:31,222
welcome to my talk in Conf fourty

3
00:00:31,276 --> 00:00:35,062
two this year on the DevOps tracks, we will talk about

4
00:00:35,196 --> 00:00:38,790
how in my favorite banks, we made these reality

5
00:00:39,130 --> 00:00:43,858
to implement the it controls, especially the security controls

6
00:00:44,034 --> 00:00:47,394
over the complete release supply

7
00:00:47,442 --> 00:00:50,926
chain, whatever the technology,

8
00:00:51,108 --> 00:00:55,082
whatever the teams, whatever the departments,

9
00:00:55,226 --> 00:00:59,070
because some of them may have some different released processes,

10
00:00:59,730 --> 00:01:03,298
especially because of the technology, but also because of

11
00:01:03,384 --> 00:01:06,754
what they know and what they've done so

12
00:01:06,792 --> 00:01:11,106
far. But at the bank level,

13
00:01:11,288 --> 00:01:15,098
some controls, some security checks are defined,

14
00:01:15,214 --> 00:01:19,186
and we make sure that these controls

15
00:01:19,378 --> 00:01:21,430
are a reality.

16
00:01:23,370 --> 00:01:26,806
So I will start with a

17
00:01:26,828 --> 00:01:30,450
small presentation. I'm Manuel. I've been working in these

18
00:01:30,460 --> 00:01:34,538
DevOps world since long time,

19
00:01:34,624 --> 00:01:37,958
even before the term DevOps did exist.

20
00:01:38,134 --> 00:01:42,286
I worked in several companies. You see the logos, the last ones are

21
00:01:42,468 --> 00:01:46,670
electric cloud or cloudbees or Wipro. And I'm also a

22
00:01:46,740 --> 00:01:50,622
DevOps Institute ambassador where we talk and

23
00:01:50,756 --> 00:01:53,854
think about the human aspect of DevOps,

24
00:01:53,902 --> 00:01:57,874
which is very important in the project, as we will see today

25
00:01:57,992 --> 00:02:02,142
in that lessons learned oriented

26
00:02:02,206 --> 00:02:06,040
talk, a little bit of history.

27
00:02:06,810 --> 00:02:10,534
Just to start, we will not

28
00:02:10,572 --> 00:02:14,422
go through everything, obviously, but over the last

29
00:02:14,556 --> 00:02:17,902
25 or even 30 years, which is roughly

30
00:02:17,986 --> 00:02:21,754
the time I've been working, there has

31
00:02:21,792 --> 00:02:25,626
been a lot of changes in the infrastructure in

32
00:02:25,648 --> 00:02:29,050
these application architectures.

33
00:02:29,630 --> 00:02:33,610
That leads to a certain number of challenges.

34
00:02:33,770 --> 00:02:37,358
Okay, roughly, if we want to sum up

35
00:02:37,444 --> 00:02:40,894
at the maximum, we've switched from the

36
00:02:40,932 --> 00:02:44,434
monolithic application to modular application,

37
00:02:44,552 --> 00:02:48,770
whatever it means. Today, modular means microservices oriented

38
00:02:50,310 --> 00:02:53,250
architecture, and it brings,

39
00:02:53,590 --> 00:02:57,378
I would say, a little bit more of complexity

40
00:02:57,554 --> 00:02:59,800
in the release process itself.

41
00:03:01,370 --> 00:03:04,070
So roughly,

42
00:03:04,970 --> 00:03:09,290
if we look back in the past

43
00:03:09,360 --> 00:03:12,730
years, we've had several waves,

44
00:03:13,230 --> 00:03:16,682
languages, method, process or

45
00:03:16,736 --> 00:03:20,810
product. And then now DevOps. Each of these waves

46
00:03:20,890 --> 00:03:24,686
has been characterized by some

47
00:03:24,868 --> 00:03:28,574
capabilities oriented on

48
00:03:28,772 --> 00:03:32,538
languages, oriented on the first case,

49
00:03:32,644 --> 00:03:36,654
tools for constructing software systems

50
00:03:36,702 --> 00:03:40,110
and monitoring. Then came the CMM,

51
00:03:40,270 --> 00:03:43,534
it and agile. And now we are talking about DevOps,

52
00:03:43,582 --> 00:03:47,202
about pipelines, about automation,

53
00:03:47,346 --> 00:03:50,520
obviously applied to the application.

54
00:03:51,770 --> 00:03:54,886
One of the main characteristics that comes from the state of

55
00:03:54,908 --> 00:03:58,634
DevOps report is that the

56
00:03:58,672 --> 00:04:03,830
deployment frequency recently grew

57
00:04:03,910 --> 00:04:08,422
a lot, really a lot, because mainly

58
00:04:08,486 --> 00:04:11,978
of the microservices application microservices

59
00:04:12,074 --> 00:04:16,986
architecture that intrinsically brings

60
00:04:17,098 --> 00:04:20,302
a lot of capabilities in releasing fast,

61
00:04:20,436 --> 00:04:23,570
releasing fast, mean release frequently.

62
00:04:24,550 --> 00:04:27,854
So when we talk about DevOps

63
00:04:27,902 --> 00:04:32,450
tooling that has matured, we roughly

64
00:04:33,110 --> 00:04:36,614
at the very beginning switch from a

65
00:04:36,652 --> 00:04:41,750
job based release

66
00:04:42,490 --> 00:04:45,762
orchestration, release management to a pipeline

67
00:04:45,826 --> 00:04:50,086
based for a second generation. So we had some scripts,

68
00:04:50,198 --> 00:04:55,222
and basically what we have done is that we have wrapped

69
00:04:55,286 --> 00:04:59,370
these scripts into some stages and environments.

70
00:05:00,610 --> 00:05:04,400
Obviously, even if it was

71
00:05:04,770 --> 00:05:07,870
a quite poor automation.

72
00:05:09,410 --> 00:05:13,330
We had the ability to define some access rights, for example, which is a

73
00:05:13,400 --> 00:05:16,100
very first important step,

74
00:05:16,790 --> 00:05:21,154
second to third from pipeline based

75
00:05:21,272 --> 00:05:24,878
to adding a lot

76
00:05:24,984 --> 00:05:29,334
of additional things, testing for example in

77
00:05:29,372 --> 00:05:33,106
the automation process. So stages

78
00:05:33,298 --> 00:05:36,630
and environment to QA

79
00:05:37,050 --> 00:05:40,346
CI, a little bit of

80
00:05:40,448 --> 00:05:44,042
release automation, starting with some

81
00:05:44,176 --> 00:05:48,250
best practice, the fidelity across the environment,

82
00:05:48,830 --> 00:05:52,560
the inventory, know where we are and what we do,

83
00:05:53,810 --> 00:05:57,134
the change management. Why should I

84
00:05:57,252 --> 00:06:01,310
start from a point a to go to a point b and

85
00:06:01,380 --> 00:06:04,626
requirement management. What are the link between what

86
00:06:04,648 --> 00:06:08,194
I'm doing and some requirements? So this is

87
00:06:08,232 --> 00:06:11,842
where Jira grew up also to

88
00:06:11,896 --> 00:06:15,386
make the link between all these aspects

89
00:06:15,438 --> 00:06:18,982
of software delivery. And obviously because

90
00:06:19,036 --> 00:06:22,840
this is one of the purpose today, add more security.

91
00:06:23,290 --> 00:06:26,518
Security in terms of security of

92
00:06:26,524 --> 00:06:30,726
the software and security of the process. So approvals,

93
00:06:30,918 --> 00:06:34,438
know who did what. Audit trail.

94
00:06:34,614 --> 00:06:37,994
All these security aspects that grew up

95
00:06:38,032 --> 00:06:40,670
between my second and third phase,

96
00:06:41,250 --> 00:06:44,606
between third and fourth phase, where we are today,

97
00:06:44,708 --> 00:06:48,622
a fully configurable system where we can

98
00:06:48,676 --> 00:06:52,598
have scalability and ease

99
00:06:52,634 --> 00:06:55,890
of onboarding for new applications.

100
00:06:57,670 --> 00:07:01,490
Very often we have some model

101
00:07:01,560 --> 00:07:05,006
based tools, model based, that allow

102
00:07:05,048 --> 00:07:08,550
us to switch from the simple

103
00:07:08,620 --> 00:07:11,880
pipeline to a proper DevOps platform

104
00:07:12,250 --> 00:07:17,058
where we decouple the deployment

105
00:07:17,154 --> 00:07:20,342
activities from these release activities.

106
00:07:20,486 --> 00:07:24,186
So what does it bring? It brings a complete audit trail with the

107
00:07:24,208 --> 00:07:27,974
approvals, with the ability to automate

108
00:07:28,022 --> 00:07:31,354
the approvals and all the reporting

109
00:07:31,402 --> 00:07:35,630
and dashboarding that I can imagine on all the data I'm gathering.

110
00:07:36,210 --> 00:07:39,930
Self service. It's ease of use for the consumers,

111
00:07:40,010 --> 00:07:43,514
for the new projects

112
00:07:43,642 --> 00:07:47,070
that are onboarding on these platforms.

113
00:07:49,030 --> 00:07:52,146
Roughly one, two, three and four.

114
00:07:52,328 --> 00:07:57,074
When I think about the evolution

115
00:07:57,202 --> 00:08:00,470
of DevOps, I'm also thinking in terms of

116
00:08:00,540 --> 00:08:02,470
enterprise scalability.

117
00:08:04,170 --> 00:08:07,946
And I've gone through some challenges that I still have

118
00:08:07,968 --> 00:08:11,706
to face today. Okay. Challenges in the financial services

119
00:08:11,808 --> 00:08:15,546
world, where I work mainly, and we

120
00:08:15,568 --> 00:08:19,402
will focus today on the third one because

121
00:08:19,456 --> 00:08:23,390
it's devsec abstracts. Security and compliance.

122
00:08:24,130 --> 00:08:28,890
Security and compliance. I go through some organization potential

123
00:08:28,970 --> 00:08:29,600
problem.

124
00:08:31,890 --> 00:08:35,502
Sometimes there is one centralized tools

125
00:08:35,566 --> 00:08:39,554
group that makes decisions which are

126
00:08:39,592 --> 00:08:43,106
not necessarily linked with

127
00:08:43,288 --> 00:08:46,870
the field, people that actually do

128
00:08:46,940 --> 00:08:49,350
the development or the operations.

129
00:08:50,250 --> 00:08:54,018
But I also have to deal with the platforms.

130
00:08:54,194 --> 00:08:58,166
Several clouds, several technologies. Am I fully

131
00:08:58,198 --> 00:09:02,246
kubernetes? Do I use Openshift

132
00:09:02,358 --> 00:09:04,650
or Tanzu or rancher?

133
00:09:05,870 --> 00:09:09,578
And each business unit that may have

134
00:09:09,744 --> 00:09:13,120
its own way of working with a release team,

135
00:09:13,570 --> 00:09:17,082
with a specific technological

136
00:09:17,146 --> 00:09:20,830
stack, with some licenses and with some different

137
00:09:20,900 --> 00:09:24,594
processes. So it's not always easy to deal with all

138
00:09:24,632 --> 00:09:28,930
that and to define something that would make everybody happy.

139
00:09:29,080 --> 00:09:33,346
Okay, you recognize here the

140
00:09:33,368 --> 00:09:36,802
wall of confusion between development and operation in the background.

141
00:09:36,866 --> 00:09:40,578
So the challenges, I will not go through this slide

142
00:09:40,754 --> 00:09:42,310
because it's unreadable,

143
00:09:43,850 --> 00:09:47,554
because I have too many challenges. Challenges in terms

144
00:09:47,612 --> 00:09:51,030
of spending, in terms of visibility

145
00:09:51,190 --> 00:09:54,010
and in terms of morale,

146
00:09:55,310 --> 00:09:58,410
the business loss or the people lost also.

147
00:09:58,560 --> 00:10:02,320
So in order to try to address all that

148
00:10:03,330 --> 00:10:06,106
and all that can be quantified,

149
00:10:06,298 --> 00:10:10,142
okay. It's quite

150
00:10:10,196 --> 00:10:14,020
easy to have the ability to put numbers

151
00:10:14,870 --> 00:10:18,290
for spending, for lack of visibility,

152
00:10:18,870 --> 00:10:22,078
for lack of morale or business losses.

153
00:10:22,174 --> 00:10:25,446
And at the end of the day, we can calculate, and this is what we

154
00:10:25,468 --> 00:10:28,802
will do in a couple of slides, a return on investment.

155
00:10:28,866 --> 00:10:32,470
When we think about another solution,

156
00:10:32,970 --> 00:10:36,470
a new approach that

157
00:10:36,540 --> 00:10:39,610
will allow us to have a better visibility,

158
00:10:40,590 --> 00:10:43,786
have a better morale of

159
00:10:43,808 --> 00:10:47,286
the employees, have a better flexibility,

160
00:10:47,398 --> 00:10:49,660
and to really scale, okay?

161
00:10:52,050 --> 00:10:56,314
Which also has some impacts. Impacts in teams of spending,

162
00:10:56,442 --> 00:11:00,400
in terms of overtime, I will spend more time, I will

163
00:11:01,650 --> 00:11:05,726
spend less money in hardware

164
00:11:05,838 --> 00:11:09,330
or in spending in my different

165
00:11:09,400 --> 00:11:12,030
clouds and in efforts,

166
00:11:12,190 --> 00:11:15,782
because I do not have to maintain a homegrown or some

167
00:11:15,836 --> 00:11:19,478
homegrown solutions. When I define based

168
00:11:19,564 --> 00:11:23,254
on some market tools that can

169
00:11:23,292 --> 00:11:26,838
be open source or not, it's not the question,

170
00:11:27,004 --> 00:11:31,100
but if I choose something that I can rely on,

171
00:11:31,630 --> 00:11:35,434
I can, but the effort to

172
00:11:35,472 --> 00:11:39,210
maintain these on ground tools. So my return on investment,

173
00:11:39,890 --> 00:11:43,470
what is it? For the very example

174
00:11:43,620 --> 00:11:47,630
that I'm talking about today, the return on investment, it's been quite

175
00:11:47,700 --> 00:11:51,914
easy to calculate. You have the cumulative spending

176
00:11:52,042 --> 00:11:56,018
investments in red and the benefits in

177
00:11:56,104 --> 00:11:59,906
blue. So we are with a

178
00:11:59,928 --> 00:12:03,266
fair case. It's not the best case. It's not the

179
00:12:03,288 --> 00:12:07,414
worst case. It's a fair case. And you see that we have

180
00:12:07,452 --> 00:12:11,254
the return on investment after five months of

181
00:12:11,372 --> 00:12:14,594
fully using a new approach,

182
00:12:14,722 --> 00:12:17,994
a new production that will allow us

183
00:12:18,112 --> 00:12:23,034
to have that transversal matter

184
00:12:23,152 --> 00:12:26,534
in terms of security and implementing

185
00:12:26,582 --> 00:12:30,814
of devsecops. So what does it mean in

186
00:12:30,852 --> 00:12:34,254
terms of processes? Okay, so I

187
00:12:34,292 --> 00:12:38,186
focus on the security pipeline. This is not the only pipeline

188
00:12:38,218 --> 00:12:41,134
which is transversal, but this is our topic today.

189
00:12:41,332 --> 00:12:44,746
That security pipeline is roughly

190
00:12:44,858 --> 00:12:48,246
the answer to several questions. I want to do CI CD,

191
00:12:48,298 --> 00:12:52,290
I want to be compliant. I want to build a bill of material.

192
00:12:52,790 --> 00:12:57,574
The bill of material. We will go back on that in

193
00:12:57,612 --> 00:13:01,240
several slides. Joe Biden has

194
00:13:02,410 --> 00:13:05,606
published an executive order on the bill of

195
00:13:05,628 --> 00:13:09,430
materials. So it become very important to be compliant.

196
00:13:09,930 --> 00:13:14,200
But it's not my focus.

197
00:13:14,590 --> 00:13:17,740
If I am working on a project, it's not my focus.

198
00:13:18,350 --> 00:13:21,994
I'm okay to be compliant to these security standards,

199
00:13:22,042 --> 00:13:25,198
but it's not my job. My job is to develop

200
00:13:25,284 --> 00:13:29,038
applications and to make sure that these applications while

201
00:13:29,204 --> 00:13:32,570
verifying these security standards will work

202
00:13:32,660 --> 00:13:36,740
in production. So I'm doing DevOps, but security is

203
00:13:37,670 --> 00:13:40,686
something that I want to complies to, but it's

204
00:13:40,718 --> 00:13:43,954
not my job to define how I have

205
00:13:44,072 --> 00:13:48,534
to be compliant. So basically what

206
00:13:48,652 --> 00:13:51,910
we have defined as a DevOps

207
00:13:52,330 --> 00:13:56,326
team, we have defined a security

208
00:13:56,508 --> 00:14:00,410
pipeline made of several stages that

209
00:14:00,480 --> 00:14:04,106
we have agreed with the security people,

210
00:14:04,288 --> 00:14:07,866
where we have to comply to

211
00:14:07,968 --> 00:14:11,802
several stages, several tasks

212
00:14:11,866 --> 00:14:15,402
in the stages for development, for integration, for delivery,

213
00:14:15,466 --> 00:14:18,970
for pre production and production. We have to do some scans,

214
00:14:19,050 --> 00:14:22,510
we have to verify some security aspects.

215
00:14:23,250 --> 00:14:26,686
So let me introduce these generic

216
00:14:26,718 --> 00:14:29,906
checks and controls. The important thing

217
00:14:29,928 --> 00:14:33,170
is that they cannot be changed by me. I am working on the project,

218
00:14:33,240 --> 00:14:37,362
so I don't have the choice to go or not go through that security pipeline.

219
00:14:37,426 --> 00:14:41,510
I have to be compliant. I cannot bypass these checks.

220
00:14:42,170 --> 00:14:45,910
They can change anytime, even between two deliveries.

221
00:14:47,050 --> 00:14:50,860
We will go through an example of that,

222
00:14:51,550 --> 00:14:55,820
which was a workshop I did some time ago,

223
00:14:56,510 --> 00:15:00,140
which is these very explanation of this

224
00:15:01,010 --> 00:15:05,342
change that can happen anytime. They are flexible enough

225
00:15:05,396 --> 00:15:10,606
to cover all the cases for the technologies, for the

226
00:15:10,628 --> 00:15:14,674
process itself. So a huge number of parameters and

227
00:15:14,712 --> 00:15:18,466
they are open and scalable so they can embrace new tools and

228
00:15:18,488 --> 00:15:21,826
new technologies. Let's focus on

229
00:15:21,848 --> 00:15:26,230
that security pipeline. So it's made of examples,

230
00:15:27,130 --> 00:15:31,430
the examples we have made for this implementation,

231
00:15:32,090 --> 00:15:36,134
the checks could be other ones, it could be other tools rather

232
00:15:36,172 --> 00:15:39,606
than Sonacube or checkmarks or the IQ server.

233
00:15:39,798 --> 00:15:43,706
But roughly this is what we go through and

234
00:15:43,888 --> 00:15:48,122
we will see how we feed back that information in the

235
00:15:48,176 --> 00:15:52,670
main application delivery pipeline.

236
00:15:53,330 --> 00:15:57,562
Just a small focus. The stage of development,

237
00:15:57,626 --> 00:16:02,030
we have to go through some SaaS analysis with

238
00:16:02,100 --> 00:16:05,874
three different tools. But before doing that

239
00:16:05,992 --> 00:16:09,250
we ensure that the user has gone through the training,

240
00:16:09,320 --> 00:16:12,546
so he knows what he's doing and he knows how

241
00:16:12,568 --> 00:16:16,200
to analyze the feedback he will have. And at the end

242
00:16:16,890 --> 00:16:20,706
I have an exit gate, so I will block

243
00:16:20,898 --> 00:16:24,662
the delivery if the thresholds for

244
00:16:24,716 --> 00:16:28,282
these three SAS analysis are not met

245
00:16:28,416 --> 00:16:31,530
or are not satisfactory.

246
00:16:32,750 --> 00:16:36,838
Same thing. Another example for the preprod deployment.

247
00:16:37,014 --> 00:16:42,890
I verify that I have gone through these

248
00:16:42,960 --> 00:16:46,446
checks, so a dust and some of

249
00:16:46,548 --> 00:16:50,298
the different checks. And at the end of these day I will verify

250
00:16:50,394 --> 00:16:54,306
that my preprod rules are okay in

251
00:16:54,328 --> 00:16:57,060
order to allow to move forward.

252
00:16:59,110 --> 00:17:02,834
So my security pipeline will be

253
00:17:02,872 --> 00:17:06,674
used by an application pipeline. Remember I am the

254
00:17:06,712 --> 00:17:10,358
application. So once more I still want to do CI CD, I want

255
00:17:10,364 --> 00:17:14,630
to be compliant. I want to build my bill of material using

256
00:17:14,700 --> 00:17:18,540
the security checks that has been defined over there

257
00:17:19,310 --> 00:17:23,290
and building my bomb and applying these

258
00:17:23,360 --> 00:17:27,340
internal controls for compliance and with built in security.

259
00:17:28,670 --> 00:17:32,366
So what does it mean? It teams that you remember my

260
00:17:32,388 --> 00:17:36,622
pipeline for the security five stages. My application

261
00:17:36,756 --> 00:17:40,446
pipeline may have some very different stages, okay?

262
00:17:40,548 --> 00:17:44,066
It has been defined like this in my department since

263
00:17:44,168 --> 00:17:48,174
years. So I like to have these environments.

264
00:17:48,302 --> 00:17:51,634
So what I will do, and this is what we've done,

265
00:17:51,832 --> 00:17:55,798
we just synchronize things. We synchronize saying,

266
00:17:55,964 --> 00:17:59,826
for an example, okay, to start the QA stage

267
00:17:59,938 --> 00:18:03,606
here on my application, I have to wait for

268
00:18:03,628 --> 00:18:07,640
the results of the integration checks in security.

269
00:18:07,950 --> 00:18:11,626
And if these integration checks in security are

270
00:18:11,728 --> 00:18:15,238
okay, you remember my conditions for passing

271
00:18:15,334 --> 00:18:19,082
the gate. If I can pass the gate out

272
00:18:19,136 --> 00:18:22,750
of integration in security, then I can

273
00:18:22,820 --> 00:18:26,634
move to QA and deploy to QA and do my QA

274
00:18:26,682 --> 00:18:30,202
test, and then after that my sight system integration

275
00:18:30,266 --> 00:18:33,970
test and so on. So I synchronize the two pipelines,

276
00:18:34,310 --> 00:18:37,522
the application that can change and the security

277
00:18:37,656 --> 00:18:41,458
that never changes. An example

278
00:18:41,544 --> 00:18:45,214
of application release pipeline where

279
00:18:45,352 --> 00:18:49,094
this step start, my security

280
00:18:49,212 --> 00:18:53,266
pipeline cannot be removed, cannot be bypassed.

281
00:18:53,298 --> 00:18:57,078
You remember, I have to go through that, and it will

282
00:18:57,164 --> 00:19:01,194
make sure that I synchronize everything

283
00:19:01,392 --> 00:19:04,922
afterwards. So, well, my pipeline is quite

284
00:19:05,056 --> 00:19:08,934
big. I have several checks

285
00:19:08,982 --> 00:19:12,720
that are related to my application. I use

286
00:19:13,170 --> 00:19:17,120
my own ticketing system. For example, in stage seven,

287
00:19:17,890 --> 00:19:21,258
I check the bomb entry,

288
00:19:21,354 --> 00:19:24,050
the CMDB entry, the mutability.

289
00:19:24,550 --> 00:19:27,794
These are things that are related to my application.

290
00:19:27,912 --> 00:19:31,378
But in the meantime, in parallel, I will have all my

291
00:19:31,464 --> 00:19:35,270
security checks. The example,

292
00:19:35,340 --> 00:19:39,174
if I do a small focus, what happens in development and

293
00:19:39,292 --> 00:19:43,494
the conditions. User has gone through the training to

294
00:19:43,532 --> 00:19:46,600
enter once more and the

295
00:19:47,710 --> 00:19:51,740
gate rules to get out. I have to have

296
00:19:52,110 --> 00:19:55,174
the same threshold,

297
00:19:55,302 --> 00:19:59,194
okay, for the different analysis, same thing for

298
00:19:59,232 --> 00:20:03,194
the production here. So it becomes serious. I'm switching

299
00:20:03,242 --> 00:20:07,054
to production. I'm handing off. I have to make

300
00:20:07,092 --> 00:20:10,286
sure that I have a bill of material. I have

301
00:20:10,308 --> 00:20:13,714
an entry in my CMDB because this is the

302
00:20:13,752 --> 00:20:18,382
way my favorite bank works. I have to check the immutability

303
00:20:18,526 --> 00:20:22,222
of that information. And I have to have an SKU,

304
00:20:22,286 --> 00:20:26,286
because any application that goes into production

305
00:20:26,398 --> 00:20:30,454
has to have an SKU in my case. But you can

306
00:20:30,492 --> 00:20:34,486
define all

307
00:20:34,508 --> 00:20:38,806
the rules that you want in order to condition

308
00:20:38,918 --> 00:20:41,050
what will happen afterwards,

309
00:20:43,310 --> 00:20:47,030
the processes. So focus on the bill of material.

310
00:20:47,110 --> 00:20:50,390
I promised you that five minutes ago.

311
00:20:50,560 --> 00:20:53,918
Since may twelveth, the president,

312
00:20:54,004 --> 00:20:57,520
Joe Biden, has issued an executive order.

313
00:20:58,290 --> 00:21:02,390
If you want to read a little bit more about that, there is an excellent

314
00:21:02,570 --> 00:21:06,642
paper on TechCrunch of Ben Higgins that explains very

315
00:21:06,696 --> 00:21:10,338
well how that executive order works.

316
00:21:10,504 --> 00:21:14,830
Basically, any vendor has to publish

317
00:21:14,910 --> 00:21:17,810
a bill of material, of what is selling.

318
00:21:17,970 --> 00:21:21,538
It's very simple. So the typical use cases

319
00:21:21,634 --> 00:21:25,174
of the bill of material, it's used

320
00:21:25,212 --> 00:21:29,750
for automation, know what you have. It's used for compliance,

321
00:21:30,090 --> 00:21:33,322
for security. This is what we're doing and for

322
00:21:33,376 --> 00:21:36,918
understanding the complexity. So the bill of material

323
00:21:37,014 --> 00:21:40,698
has become an artifact,

324
00:21:40,794 --> 00:21:44,990
but it's an artifact that describes all the artifacts

325
00:21:45,810 --> 00:21:49,754
that are used or that has been generated to deploy

326
00:21:49,802 --> 00:21:54,018
the application. So just like in 75

327
00:21:54,104 --> 00:21:57,966
Unix introduced Yak, which is yet another compiler.

328
00:21:57,998 --> 00:22:01,698
Compiler. For those who know that feature of

329
00:22:01,864 --> 00:22:04,958
Unix, I would say that

330
00:22:05,064 --> 00:22:09,062
the bill of material could be yet

331
00:22:09,116 --> 00:22:13,170
another artifact. Artifact, because it's a meta artifact

332
00:22:13,250 --> 00:22:16,678
describing other artifacts. If you are interested

333
00:22:16,764 --> 00:22:20,730
about that. By the way, in other conferences

334
00:22:21,790 --> 00:22:26,570
I have delivered a presentation which

335
00:22:26,640 --> 00:22:30,902
focus was the bill of material. With all these standards

336
00:22:30,966 --> 00:22:34,758
and the explanations of how to build a bill

337
00:22:34,784 --> 00:22:38,506
of material and how to use it in the software supply

338
00:22:38,538 --> 00:22:41,966
chain, we consider it as

339
00:22:41,988 --> 00:22:45,502
the single source of the software delivery proof.

340
00:22:45,566 --> 00:22:50,366
So the bit of material time ago described

341
00:22:50,398 --> 00:22:54,274
how we were building the software. Now it describes how

342
00:22:54,312 --> 00:22:58,242
we are releasing the software. It's just some kind of extension

343
00:22:58,386 --> 00:23:01,794
because time ago we had some sources,

344
00:23:01,922 --> 00:23:06,390
we had a build methodology and we produced some executables.

345
00:23:07,130 --> 00:23:09,914
Roughly it was done okay,

346
00:23:10,032 --> 00:23:13,546
now we have to deliver. So to go through a

347
00:23:13,568 --> 00:23:17,146
pipeline to do a certain number of tasks and

348
00:23:17,168 --> 00:23:21,102
to deliver the application in production and to see how it works.

349
00:23:21,236 --> 00:23:24,846
So it's just an extension. But since it's an

350
00:23:24,868 --> 00:23:28,430
extension, the content of the bill of material may

351
00:23:28,500 --> 00:23:32,522
change over time because I will analyze,

352
00:23:32,586 --> 00:23:35,986
I will scan, and the results of my scans of

353
00:23:36,008 --> 00:23:39,442
my analysis because of the audit trail are also

354
00:23:39,496 --> 00:23:43,570
part of my bill of material. So it's very important to understand that notion.

355
00:23:44,630 --> 00:23:48,326
It can change over time. So it's very important

356
00:23:48,428 --> 00:23:52,518
to make it immutable so that I keep trace of

357
00:23:52,604 --> 00:23:56,950
all the scans of all the different

358
00:23:57,020 --> 00:24:01,034
steps that were used to build my

359
00:24:01,072 --> 00:24:02,330
bill of material.

360
00:24:05,630 --> 00:24:09,926
So this is roughly the

361
00:24:09,968 --> 00:24:13,326
explanation and the presentation of

362
00:24:13,428 --> 00:24:17,466
what we did. So if I sum

363
00:24:17,498 --> 00:24:20,974
up in three sentences a

364
00:24:21,012 --> 00:24:24,690
security pipeline, which is the same for

365
00:24:24,760 --> 00:24:27,650
all the applications and all the technologies,

366
00:24:28,710 --> 00:24:31,794
an application pipeline that can change,

367
00:24:31,912 --> 00:24:35,542
obviously, but that will always call that

368
00:24:35,676 --> 00:24:39,334
control pipeline, that security pipeline. I say control because

369
00:24:39,372 --> 00:24:43,046
the security pipeline is not the only one. There are some

370
00:24:43,148 --> 00:24:48,166
other pipelines that are called still executing

371
00:24:48,198 --> 00:24:51,974
in parallel, still synchronizing with my main pipeline.

372
00:24:52,022 --> 00:24:55,082
But I am sure whatever my

373
00:24:55,136 --> 00:24:57,740
department, whatever my technology,

374
00:24:58,190 --> 00:25:01,822
whatever the application I'm releasing that if I got the

375
00:25:01,876 --> 00:25:05,086
okay to switch to handoff to

376
00:25:05,108 --> 00:25:09,054
production, it means that I am clear for the

377
00:25:09,092 --> 00:25:13,006
security aspects and for all the other control aspects

378
00:25:13,038 --> 00:25:16,660
that has been defined at the bank level.

379
00:25:18,150 --> 00:25:21,662
A couple of lessons learned. I made this slide,

380
00:25:21,726 --> 00:25:26,200
just one, to be very focused and

381
00:25:27,450 --> 00:25:31,480
to really understand what we've done,

382
00:25:33,130 --> 00:25:37,614
I would say, rather than some technical aspects

383
00:25:37,682 --> 00:25:41,866
that were very interesting. But one

384
00:25:41,888 --> 00:25:45,206
of the first lessons is implement. Do implement.

385
00:25:45,318 --> 00:25:49,034
Okay. DevOps processes, DevOps controls, automated bill

386
00:25:49,072 --> 00:25:52,494
of material. Just do it and do it now.

387
00:25:52,692 --> 00:25:55,802
Even if it's with a minimal set of tools,

388
00:25:55,946 --> 00:25:59,662
even if they are internal or

389
00:25:59,716 --> 00:26:03,250
external, even if it can look

390
00:26:03,320 --> 00:26:06,820
difficult to gather all that information,

391
00:26:07,350 --> 00:26:12,210
the return on investment is tremendous.

392
00:26:13,190 --> 00:26:17,814
It's fast and tremendous. So do

393
00:26:17,852 --> 00:26:20,998
it now. Do follow the state of

394
00:26:21,004 --> 00:26:24,920
the art company wide, because the competitors do.

395
00:26:25,690 --> 00:26:29,514
If you didn't do CI five years

396
00:26:29,552 --> 00:26:32,950
ago, the competitors were doing it. If you didn't do CD

397
00:26:33,030 --> 00:26:36,060
two years ago, the competitors were doing it.

398
00:26:37,870 --> 00:26:42,080
If you don't orchestrate your releases today, if you

399
00:26:42,690 --> 00:26:45,694
don't do devsecops today,

400
00:26:45,892 --> 00:26:49,770
if you don't look at value stream management today, the competitors

401
00:26:49,850 --> 00:26:53,666
do. And they will get an advantage if you do

402
00:26:53,688 --> 00:26:57,700
not do it before them. So do follow the state of the art

403
00:26:59,990 --> 00:27:03,890
in your company. And the third lesson,

404
00:27:05,290 --> 00:27:08,790
with the automation that we've implemented and the

405
00:27:08,860 --> 00:27:12,518
self embedded controls like the security ones

406
00:27:12,604 --> 00:27:16,262
I have described, it's very easy that

407
00:27:16,396 --> 00:27:20,358
the culture and the best practices will get disseminated

408
00:27:20,454 --> 00:27:23,660
within the organization. So at these, end of the day,

409
00:27:24,670 --> 00:27:28,250
what we have noticed in that project

410
00:27:28,320 --> 00:27:32,094
is that at the very beginning, users were

411
00:27:32,132 --> 00:27:36,750
some kind of trying,

412
00:27:36,900 --> 00:27:40,314
okay, they were not very keen to be chosen

413
00:27:40,362 --> 00:27:44,514
to try that new system because they didn't know

414
00:27:44,632 --> 00:27:48,820
what they were wanted.

415
00:27:49,350 --> 00:27:53,234
They were not sure of what to expect from that.

416
00:27:53,272 --> 00:27:56,790
They were afraid to have a constraint of

417
00:27:56,860 --> 00:28:00,598
going through security and so on. Now we have a

418
00:28:00,604 --> 00:28:03,990
queue, okay, very clearly we have a queue of people

419
00:28:04,140 --> 00:28:07,914
asking to be embedded into the system. And the

420
00:28:07,952 --> 00:28:11,386
only slowness that

421
00:28:11,408 --> 00:28:15,340
we have is from the ability of

422
00:28:17,710 --> 00:28:21,502
embedding new people, onboarding new

423
00:28:21,556 --> 00:28:25,290
people, and growing the infrastructure.

424
00:28:25,370 --> 00:28:29,498
But roughly, this is something that we managed

425
00:28:29,514 --> 00:28:33,294
to do. So I thank you very much for

426
00:28:33,332 --> 00:28:38,334
your attention. Please keep

427
00:28:38,372 --> 00:28:42,126
in touch. You have my contact details here on the

428
00:28:42,148 --> 00:28:45,894
screen. Do not hesitate to contact like me, and very

429
00:28:45,932 --> 00:28:49,942
happy to have been part of Confo v two these

430
00:28:49,996 --> 00:28:53,060
year. Goodbye and see you soon.

