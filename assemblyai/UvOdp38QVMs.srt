1
00:00:25,410 --> 00:00:28,834
You welcome to our talk about code Insight.

2
00:00:28,962 --> 00:00:32,086
You know who we are from our introductions, but let

3
00:00:32,108 --> 00:00:35,798
me introduce form three as well. The name form three

4
00:00:35,884 --> 00:00:39,286
is derived from third generation cloud technology and a

5
00:00:39,308 --> 00:00:43,190
shortened version of the word platform, form three.

6
00:00:43,340 --> 00:00:47,234
We have some great customers, which you can see on this slide,

7
00:00:47,362 --> 00:00:50,586
who choose our payment platform as their payment processing

8
00:00:50,618 --> 00:00:55,246
solution. Form three was founded in 2016 and

9
00:00:55,268 --> 00:00:59,022
we've been growing and scaling ever since. We currently have

10
00:00:59,076 --> 00:01:02,750
around 260 employees, of which about 130

11
00:01:02,820 --> 00:01:06,322
are engineers. We are a fully remote company and

12
00:01:06,376 --> 00:01:10,194
we're hiring. Today. We will be learning about our

13
00:01:10,232 --> 00:01:13,346
journey with code analysis at form three as

14
00:01:13,368 --> 00:01:17,210
well. AWS how we built our custom tool code Insight

15
00:01:17,390 --> 00:01:21,430
we will begin with an introduction of engineering at form three.

16
00:01:21,580 --> 00:01:25,350
This will set the stage at how we deliver code at form three

17
00:01:25,420 --> 00:01:27,880
and what challenges our teams face.

18
00:01:28,510 --> 00:01:31,914
Next, we discuss the requirements that we needed from our

19
00:01:31,952 --> 00:01:35,274
custom tool, followed up by the architecture we have

20
00:01:35,312 --> 00:01:38,220
implemented as part of the code Insight project.

21
00:01:38,750 --> 00:01:42,174
Finally, we round up our journey by discussing its

22
00:01:42,212 --> 00:01:45,914
adoption into our teams and some insights or lessons learned

23
00:01:45,962 --> 00:01:49,038
from the project. We have a lot of ground to cover,

24
00:01:49,124 --> 00:01:52,734
so let's get started. Let's begin with a

25
00:01:52,772 --> 00:01:56,594
discussion of engineering at form three. As I

26
00:01:56,632 --> 00:01:59,922
mentioned in the intro, form three have been around since

27
00:01:59,976 --> 00:02:03,538
2016 and we've been growing ever since.

28
00:02:03,704 --> 00:02:07,446
The way we deliver software has evolved together with our

29
00:02:07,468 --> 00:02:11,698
organization. We now have over 500 repositories

30
00:02:11,794 --> 00:02:15,158
in different languages such as terraform, GO,

31
00:02:15,324 --> 00:02:18,774
Java, Yaml, which our developers contribute

32
00:02:18,822 --> 00:02:22,762
to at different frequencies. Some of our repos are under

33
00:02:22,816 --> 00:02:26,074
development and some are not actively maintained. Built are

34
00:02:26,112 --> 00:02:29,974
important to our platform. We are a rapidly

35
00:02:30,022 --> 00:02:33,486
growing engineering organization. This means that we

36
00:02:33,508 --> 00:02:36,286
have engineers which are quite new to the code base,

37
00:02:36,388 --> 00:02:40,046
contributing to our live services. They need support

38
00:02:40,148 --> 00:02:42,990
and quick feedback on the code they deliver.

39
00:02:43,350 --> 00:02:46,706
Our platform is compliant with the highest standards of

40
00:02:46,728 --> 00:02:50,082
security and should be actively maintained to remain free

41
00:02:50,136 --> 00:02:53,986
from vulnerabilities. We use Travis CI as our

42
00:02:54,008 --> 00:02:58,050
continuous integration tool and all of our code checks integrate

43
00:02:58,130 --> 00:03:01,794
with it built. Most importantly,

44
00:03:01,922 --> 00:03:05,606
code ownership and the Devsecops mindset are at the

45
00:03:05,628 --> 00:03:09,254
heart of everything we do at form three. We firmly

46
00:03:09,302 --> 00:03:13,066
believe that security must also play an integrated role in

47
00:03:13,088 --> 00:03:16,234
the full lifecycle of our apps in order to take

48
00:03:16,272 --> 00:03:19,126
advantage of the agility of DevOps.

49
00:03:19,318 --> 00:03:23,066
Our code analysis tools should make it easy for teams

50
00:03:23,098 --> 00:03:27,242
to deliver secure solutions. The first static

51
00:03:27,306 --> 00:03:30,954
analysis tool we used was Salis, open sourced

52
00:03:31,002 --> 00:03:34,514
by Coinbase. It gave us a consistent set of

53
00:03:34,552 --> 00:03:38,050
static analysis tools across all of our repos.

54
00:03:38,710 --> 00:03:43,134
All the analysis tools were bundled into one Docker container.

55
00:03:43,262 --> 00:03:47,042
The docker container was then downloaded source mounted

56
00:03:47,106 --> 00:03:50,600
and the scans run from the container for each build.

57
00:03:50,970 --> 00:03:54,242
The solution worked well for a while, but the containers

58
00:03:54,306 --> 00:03:56,950
became sluggish and heavy. Afterwards,

59
00:03:58,090 --> 00:04:02,118
we re implemented our own lightweight solution called

60
00:04:02,204 --> 00:04:05,430
SeC can as a replacement form salas.

61
00:04:05,590 --> 00:04:08,822
It was designed to wrap multiple static analysis

62
00:04:08,886 --> 00:04:12,506
tools and to allow our tool can to be easily tweaked

63
00:04:12,538 --> 00:04:15,310
and reused across multiple repos.

64
00:04:15,890 --> 00:04:19,738
Checks were run in a docker container with a configured token,

65
00:04:19,834 --> 00:04:22,826
which meant that each service needed its own token.

66
00:04:22,938 --> 00:04:26,014
Injected scans were configured

67
00:04:26,062 --> 00:04:29,742
for each repo via a make file or a Travis YAML

68
00:04:29,806 --> 00:04:34,290
file. Sexcan brought us two big advantages,

69
00:04:34,630 --> 00:04:38,502
standardized scanning across all repos in a single place

70
00:04:38,556 --> 00:04:40,870
to maintain our scanning tools.

71
00:04:41,770 --> 00:04:45,154
However, while Sexcan delivered on its promise

72
00:04:45,202 --> 00:04:48,854
of a more lightweight scanning tool, it introduced

73
00:04:48,902 --> 00:04:52,214
some other problems which were accentuated by our growing

74
00:04:52,262 --> 00:04:56,678
engineering team. First, there was no enforcement.

75
00:04:56,854 --> 00:05:00,794
Sex can had to be manually configured on every new repo

76
00:05:00,842 --> 00:05:03,918
and could be made optional. Second,

77
00:05:04,004 --> 00:05:07,614
we had no visibility of which repos were

78
00:05:07,652 --> 00:05:10,826
configured to use it and which repos were failing

79
00:05:10,858 --> 00:05:14,926
their scans. Furthermore, Sexcan only ran

80
00:05:14,958 --> 00:05:18,942
on prs, so the repos that were no longer under active development

81
00:05:19,006 --> 00:05:22,386
were never scanned. And finally, it was

82
00:05:22,408 --> 00:05:25,494
difficult to manage adoption and updates as the

83
00:05:25,532 --> 00:05:29,238
config was spread out across every repo. All of them needed

84
00:05:29,324 --> 00:05:32,120
changing once updates were rolled out.

85
00:05:33,370 --> 00:05:37,662
As we continued to grow and have more services and repositories,

86
00:05:37,826 --> 00:05:41,290
it became necessary to move to a new solution.

87
00:05:42,270 --> 00:05:45,942
Some key requirements for the new code scanning solution,

88
00:05:46,086 --> 00:05:50,114
code insight, were identified by the infosec

89
00:05:50,182 --> 00:05:53,994
team. We needed a centralized source code scanning

90
00:05:54,042 --> 00:05:58,122
solution that could integrate well with our development workflows.

91
00:05:58,266 --> 00:06:01,690
A central configuration makes it easy to maintain

92
00:06:01,770 --> 00:06:05,618
and change system wide. Custom code

93
00:06:05,704 --> 00:06:09,006
Insight tool provide metrics for scanned repositories,

94
00:06:09,118 --> 00:06:12,754
even those that are not being actively contributed to.

95
00:06:12,872 --> 00:06:16,786
It is very scary to have repositories that are not scanned

96
00:06:16,818 --> 00:06:19,640
that could get new vulnerabilities over time.

97
00:06:20,410 --> 00:06:24,214
Custom code insight tool be easy to add and enforce for

98
00:06:24,252 --> 00:06:28,294
new repositories. It should also provide a workaround to stop

99
00:06:28,332 --> 00:06:30,730
it from blocking emergency releases.

100
00:06:31,710 --> 00:06:34,954
With all this in mind, the team kicked off the new

101
00:06:34,992 --> 00:06:38,554
code Insight project to address some of the problems that we were seeing

102
00:06:38,592 --> 00:06:42,246
with Sexcam. The project has been the work

103
00:06:42,288 --> 00:06:45,614
of many of our amazing engineers, which you can see on

104
00:06:45,652 --> 00:06:49,022
this slide. I will now hand over to one of these

105
00:06:49,076 --> 00:06:52,570
awesome contributors and my co presenter Ross,

106
00:06:52,650 --> 00:06:56,878
who will walk you through the rest of our exciting journey with code insight.

107
00:06:57,054 --> 00:07:00,274
Thanks Adelina. Right, let's take a look at how code

108
00:07:00,312 --> 00:07:03,634
insight scans one of our repositories code

109
00:07:03,672 --> 00:07:07,094
insight is installed as a GitHub app on each of our

110
00:07:07,132 --> 00:07:11,094
repos, and when a pull request is created, our GitHub app

111
00:07:11,132 --> 00:07:14,934
is notified by a webhook from GitHub on

112
00:07:14,972 --> 00:07:18,386
our side that looks like a lambda function behind an API

113
00:07:18,418 --> 00:07:21,526
gateway. So this first lambda

114
00:07:21,558 --> 00:07:24,986
function fetches the code from GitHub and calls GitHub back

115
00:07:25,008 --> 00:07:28,300
to say that we're going to be performing some scans on that pr.

116
00:07:28,830 --> 00:07:32,346
It looks at the content of the code and uses

117
00:07:32,378 --> 00:07:35,806
that to decide which scans need to be performed, and then

118
00:07:35,828 --> 00:07:40,222
it puts a message onto a request queue to say please

119
00:07:40,276 --> 00:07:44,590
go and run these scans. That request queue

120
00:07:44,670 --> 00:07:47,954
is then consumed by an orchestrator lambda, and that

121
00:07:47,992 --> 00:07:51,966
records some details about the scan, and then creates

122
00:07:51,998 --> 00:07:55,798
a message on the task pending queue, which gets picked up by the

123
00:07:55,804 --> 00:08:00,338
scheduler lambda. Now, the scheduler lambda actually runs

124
00:08:00,434 --> 00:08:03,874
the scan as a task on Amazon's elastic

125
00:08:03,922 --> 00:08:07,122
container service, and for this we're using a serverless

126
00:08:07,186 --> 00:08:10,634
Fargate cluster. Now,

127
00:08:10,672 --> 00:08:14,214
inside Fargate, each of our scans runs

128
00:08:14,262 --> 00:08:17,466
multiple containers in a single task, so we

129
00:08:17,488 --> 00:08:20,918
wanted to keep the scan container itself really simple so it's

130
00:08:20,934 --> 00:08:24,046
easy to add new ones. So all the peripheral jobs have been

131
00:08:24,068 --> 00:08:27,562
pushed out to other containers. The first container

132
00:08:27,626 --> 00:08:31,246
clones a repository and writes it to disk, so that

133
00:08:31,268 --> 00:08:34,766
the scanned container can just read it from disk and writes its results

134
00:08:34,798 --> 00:08:38,734
to disk. Once that's complete, two more containers

135
00:08:38,782 --> 00:08:42,126
kick in to process those results. One of them writes

136
00:08:42,158 --> 00:08:45,826
comments back to GitHub, which we'll see later, and another takes the

137
00:08:45,848 --> 00:08:48,870
results and puts them on an s three bucket for persistence.

138
00:08:49,610 --> 00:08:53,494
Finally, once that's all done, a notification container takes

139
00:08:53,532 --> 00:08:57,400
over, which writes a message on a queue to say that the task is complete.

140
00:08:58,510 --> 00:09:01,766
So when that task complete message is consumed

141
00:09:01,798 --> 00:09:05,446
by the orchestrator, it can update the records and emit

142
00:09:05,478 --> 00:09:08,854
an event for the notifier, which in turn will update

143
00:09:08,902 --> 00:09:12,366
GitHub. Now, once all of the scans are complete,

144
00:09:12,468 --> 00:09:16,000
the notifier can set the final status of the check on the pr.

145
00:09:17,330 --> 00:09:21,758
So we run this whole process for every pr

146
00:09:21,924 --> 00:09:25,714
every time there's a change coming into one of our repositories. But we

147
00:09:25,752 --> 00:09:29,390
also scan all of our repositories default branches

148
00:09:29,470 --> 00:09:33,186
nightly, meaning that even the quietest project has

149
00:09:33,208 --> 00:09:37,266
its code scanned every 24 hours. If one of those default branch

150
00:09:37,298 --> 00:09:41,190
scans fails, we'll notify the owning team over slack.

151
00:09:43,290 --> 00:09:47,122
So what does this look like to one of our engineers? Well, in the GitHub

152
00:09:47,186 --> 00:09:50,346
check information, they'll be able to see each of the scans that

153
00:09:50,368 --> 00:09:53,914
was performed, the result, and a link to the

154
00:09:53,952 --> 00:09:58,074
scan in the code insight UI. In some cases we

155
00:09:58,112 --> 00:10:01,766
want to allow a build to pass even if a check has failed,

156
00:10:01,878 --> 00:10:05,086
and those are labeled here as soft failures. So this

157
00:10:05,108 --> 00:10:09,006
can be really handy for existing repositories where the team is still working through

158
00:10:09,028 --> 00:10:13,006
some issues, or when we're experimenting with new scans. And we

159
00:10:13,028 --> 00:10:15,550
don't want to risk breaking everybody's builds.

160
00:10:16,450 --> 00:10:20,318
If a user clicks through, they'll be able to see details of the scans.

161
00:10:20,414 --> 00:10:23,678
So this is the full suite, each of the scans that have been performed,

162
00:10:23,774 --> 00:10:27,206
and they can click through and see the full content of the logs from

163
00:10:27,228 --> 00:10:31,238
the s three bucket we saw before. But really

164
00:10:31,324 --> 00:10:34,546
the best user interface for code insight is within GitHub.

165
00:10:34,658 --> 00:10:38,214
So my colleague Adam recently finished off the feature so that

166
00:10:38,252 --> 00:10:41,642
engineers will get fast feedback as comments directly on their

167
00:10:41,696 --> 00:10:45,114
pr, right alongside the offending line of code.

168
00:10:45,312 --> 00:10:49,126
So to do this, we need the scan output to be consistent,

169
00:10:49,238 --> 00:10:52,350
and we're adapting our scans to use the sarif standard

170
00:10:52,420 --> 00:10:55,534
wherever possible. So this

171
00:10:55,572 --> 00:10:59,102
shift from SEC scan to code insight has given us

172
00:10:59,156 --> 00:11:03,102
a few real benefits. Centralizing the config keeps the honest

173
00:11:03,156 --> 00:11:06,654
people honest. So now switching a scan off requires

174
00:11:06,702 --> 00:11:10,098
a pull request into a central repository, which the information

175
00:11:10,184 --> 00:11:13,374
security team will review. It also prevents

176
00:11:13,422 --> 00:11:16,902
an attacker from introducing some malicious code in a PR

177
00:11:17,036 --> 00:11:20,518
and also disabling the check that would look for that malicious code in the

178
00:11:20,524 --> 00:11:24,038
same PR. And also

179
00:11:24,124 --> 00:11:27,826
this infrastructure scales to meet our demands.

180
00:11:27,938 --> 00:11:31,626
So it's a fairly diurnal flow. So we

181
00:11:31,648 --> 00:11:34,758
see engineers creating a load of prs during the day, and it tends

182
00:11:34,774 --> 00:11:37,850
to be quite built overnight apart from the nightly builds.

183
00:11:38,990 --> 00:11:42,266
And the infrastructure can scale to adapt to that.

184
00:11:42,288 --> 00:11:46,334
It's mostly serverless, although I should mention this might change over

185
00:11:46,372 --> 00:11:49,854
time because we've just hired our first canadian employee with more to

186
00:11:49,892 --> 00:11:52,990
come so we could see changes in this pattern, but we think that

187
00:11:53,060 --> 00:11:55,380
the infrastructure is going to scale well for that.

188
00:11:57,270 --> 00:12:00,674
So how did we actually bring this in at form three?

189
00:12:00,792 --> 00:12:04,420
We didn't just drop this in and break everybody's builds on day one.

190
00:12:04,890 --> 00:12:08,102
So for existing repositories, we started with soft

191
00:12:08,156 --> 00:12:12,594
failures at first, so can would just report failures

192
00:12:12,642 --> 00:12:16,406
for information but not block builds. And we took

193
00:12:16,428 --> 00:12:20,202
a ratcheting approach to things. So once a repository was

194
00:12:20,256 --> 00:12:23,354
passing, we would then enforce it, and we wouldn't allow it to go

195
00:12:23,392 --> 00:12:26,374
back for new repositories.

196
00:12:26,502 --> 00:12:29,674
Once we were content that this worked, we enforced code

197
00:12:29,712 --> 00:12:32,554
insight everywhere on all new repositories.

198
00:12:32,682 --> 00:12:36,030
So people are getting that out of the box by default.

199
00:12:37,010 --> 00:12:40,254
And we started to gather metrics recently so that we

200
00:12:40,292 --> 00:12:43,686
can assess vulnerabilities that are raised by code insight scans,

201
00:12:43,818 --> 00:12:47,106
but also so that we can check code insight's performance and make

202
00:12:47,128 --> 00:12:51,214
sure it's not getting in people's way. But for those existing

203
00:12:51,262 --> 00:12:55,294
repositories, we needed to drive adoption across teams.

204
00:12:55,342 --> 00:12:58,550
We need to encourage our engineering teams to fix the issues

205
00:12:58,620 --> 00:13:02,166
and get their builds going green. And we did this in

206
00:13:02,188 --> 00:13:05,394
a few different ways. So we created some batch

207
00:13:05,442 --> 00:13:08,418
prs for issues that affected multiple teams.

208
00:13:08,514 --> 00:13:12,314
So where we found something that we could fix in multiple places, we would

209
00:13:12,432 --> 00:13:17,450
use a tool, something like turbolifter, to be able to create

210
00:13:17,600 --> 00:13:20,666
prs across multiple repositories. And we could offer them up to

211
00:13:20,688 --> 00:13:24,174
the feature teams to review and then pull them into their code base to fix

212
00:13:24,212 --> 00:13:27,754
an issue. We arranged some mob sessions,

213
00:13:27,802 --> 00:13:31,374
so we got people from across the engineering team

214
00:13:31,492 --> 00:13:34,430
together to work on improving code insight coverage.

215
00:13:35,090 --> 00:13:38,274
And also there was a feature of code insight that was meant to

216
00:13:38,312 --> 00:13:41,902
introduce some gamification, which is the team leaderboard.

217
00:13:42,046 --> 00:13:45,942
So this is a view of our team leaderboard. But I have to be honest,

218
00:13:46,076 --> 00:13:49,894
this has not been terribly successful in driving adoption. So these

219
00:13:49,932 --> 00:13:53,622
metrics unfairly reward teams who write very little code

220
00:13:53,756 --> 00:13:57,026
product and stigmatizes those with lots

221
00:13:57,058 --> 00:14:00,666
of repositories to manage. So on the whole, I don't think gamification is

222
00:14:00,688 --> 00:14:04,380
right for this sort of thing. Engineers can just see right through it.

223
00:14:05,150 --> 00:14:08,634
So that's one of the things that hasn't worked terribly well. There are

224
00:14:08,672 --> 00:14:11,686
a few others. So,

225
00:14:11,728 --> 00:14:14,782
firstly, it can be tempting to think that because this

226
00:14:14,836 --> 00:14:18,154
system isn't processing billions of pounds worth of payments

227
00:14:18,202 --> 00:14:21,578
like our other code, that it's not critical.

228
00:14:21,674 --> 00:14:25,630
But if code insight stops working, if somebody introduces a can

229
00:14:25,710 --> 00:14:29,374
that just fails everything, then we can bring the whole company's

230
00:14:29,422 --> 00:14:31,940
work to a breaching halt, as I found.

231
00:14:32,630 --> 00:14:36,486
So we have to treat it like production infrastructure. And to that end,

232
00:14:36,588 --> 00:14:40,562
we've introduced ways of canarying new versions of scans,

233
00:14:40,706 --> 00:14:44,550
and we're also adding a better test environment and better monitoring.

234
00:14:45,610 --> 00:14:48,878
Next thing is that we've had a few chunky repositories,

235
00:14:48,994 --> 00:14:52,586
particularly with terraform code, that have proved to be

236
00:14:52,608 --> 00:14:56,282
a stumbling block for adoption. So it's much easier to get a small

237
00:14:56,336 --> 00:15:00,438
code based passing and then improve coverage incrementally than

238
00:15:00,464 --> 00:15:04,206
it is to wrangle some sprawling repository so where you can.

239
00:15:04,308 --> 00:15:07,920
Splitting out repositories into smaller units can help.

240
00:15:09,090 --> 00:15:12,430
Finally, many of the tools we are using to scan our code

241
00:15:12,500 --> 00:15:16,030
are based on databases of vulnerabilities that are held

242
00:15:16,110 --> 00:15:20,494
externally. So a minor vulnerability added to one of those databases

243
00:15:20,622 --> 00:15:24,850
can cause a lot of our builds to break suddenly if we're not careful.

244
00:15:25,990 --> 00:15:29,094
So to address some of these issues, we've got some

245
00:15:29,132 --> 00:15:32,838
upcoming features. So we want to be

246
00:15:32,844 --> 00:15:35,926
able to distinguish between new and existing issues so that

247
00:15:35,948 --> 00:15:39,074
we can target feedback to users. This is going to help

248
00:15:39,132 --> 00:15:42,614
in those legacy code bases where the existing

249
00:15:42,662 --> 00:15:45,850
issues can make it hard to spot new ones being introduced.

250
00:15:47,150 --> 00:15:51,350
We're also going to do more with metrics, so for example, spotting flakiness

251
00:15:51,430 --> 00:15:54,480
of scans or some scans that take too long to run.

252
00:15:55,090 --> 00:15:59,002
And finally, we want to introduce the concepts of age and severity

253
00:15:59,066 --> 00:16:03,060
into code insight so that we only hard fail a built

254
00:16:03,430 --> 00:16:06,610
if it violates our policies on remediation.

255
00:16:07,750 --> 00:16:11,266
So to wrap it up then, code insight has allowed us

256
00:16:11,288 --> 00:16:15,060
to streamline the way we do application security. At form three,

257
00:16:16,470 --> 00:16:20,106
we're running scans on every pull request and nightly

258
00:16:20,158 --> 00:16:24,214
on every repository, so that even the quietest project is being

259
00:16:24,252 --> 00:16:28,322
checked for vulnerabilities regularly. And for our engineers,

260
00:16:28,386 --> 00:16:31,926
it's easy to interact with code insight just as part of their normal

261
00:16:31,958 --> 00:16:36,074
GitHub workflow. So having code insight comment on your pr is

262
00:16:36,112 --> 00:16:39,446
like having an eagle eyed, slightly pedantic colleague

263
00:16:39,558 --> 00:16:42,910
looking over your shoulder all the time, which is pretty helpful.

264
00:16:43,410 --> 00:16:47,374
On the other hand, gamification didn't add much for us.

265
00:16:47,572 --> 00:16:51,546
If you're going to try it, make sure that the metrics driving rewards

266
00:16:51,658 --> 00:16:53,840
are fair and meaningful to you.

267
00:16:55,730 --> 00:16:59,534
So I think a big part of the success of code insight is the central

268
00:16:59,582 --> 00:17:03,470
management and configuration of it, which raises our overall compliance

269
00:17:03,550 --> 00:17:06,846
and that allows us to drive improvements in the tool. It's dead

270
00:17:06,878 --> 00:17:10,114
easy for us to add new scans, and we can take comfort

271
00:17:10,162 --> 00:17:13,270
that every piece of our code is being looked at continuously.

272
00:17:15,210 --> 00:17:17,830
And with that, I'd like to say thanks for listening,

273
00:17:18,410 --> 00:17:21,766
and thank you to my co presenter Adelina. We look forward to

274
00:17:21,788 --> 00:17:25,286
getting your questions on Discord, and please don't hesitate to reach out

275
00:17:25,308 --> 00:17:28,758
to us on Twitter. It's always nice to make new friends.

276
00:17:28,924 --> 00:17:32,560
Please take a look at the form three engineering site.

277
00:17:33,490 --> 00:17:36,906
Once you've worked your appetite there, I'm sure you'll like to get to the career

278
00:17:36,938 --> 00:17:40,494
site and become one of our colleagues. And also check out the

279
00:17:40,532 --> 00:17:43,802
excellent form three tech podcast run by my colleague Kev.

280
00:17:43,866 --> 00:17:45,920
There's some excellent guests on there.

281
00:17:46,930 --> 00:17:48,010
Thanks again for listening.

