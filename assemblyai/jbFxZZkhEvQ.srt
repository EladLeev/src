1
00:00:39,010 --> 00:00:41,938
All right, thanks for listening to my session.

2
00:00:42,034 --> 00:00:46,146
We're going to talk about some automation and hopefully controlling some toil

3
00:00:46,258 --> 00:00:49,978
with automation. I'm Mandy walls. I am a DevOps advocate at Pagerduty

4
00:00:50,034 --> 00:00:53,134
it. I'm Ellen Xchk on most of the social

5
00:00:53,172 --> 00:00:56,474
medias. If you like, get in touch with me. I'm happy to chat

6
00:00:56,522 --> 00:01:00,014
about stuff and you can always email me, which is great too, right?

7
00:01:00,052 --> 00:01:03,726
We all get email. So I'm going to talk broadly about automation

8
00:01:03,838 --> 00:01:07,090
and complex environments. But let's start with

9
00:01:07,240 --> 00:01:10,610
a task that is pretty common and

10
00:01:10,680 --> 00:01:14,306
maybe more common in larger organizations than smaller ones. But as an example,

11
00:01:14,408 --> 00:01:18,458
hopefully it makes sense to people. So I have a developer. Her name's

12
00:01:18,494 --> 00:01:21,714
Alice, and Alice works on a microservice.

13
00:01:21,842 --> 00:01:24,694
It's a feature in a customer facing application.

14
00:01:24,892 --> 00:01:28,326
When Alice or one of her team members is ready to

15
00:01:28,348 --> 00:01:32,362
push some amount of work into the main pipelines, they're responsible for doing

16
00:01:32,416 --> 00:01:35,994
some first sort of sanity checks on their code. And because

17
00:01:36,032 --> 00:01:39,370
of the way it fits into this microservices environment, they need

18
00:01:39,440 --> 00:01:42,922
a bigger interruptions environment than they could just run on their laptops.

19
00:01:42,986 --> 00:01:46,894
So they do this in the cloud. So to ensure that her

20
00:01:46,932 --> 00:01:50,778
code is going to work, Alice needs the sanity check environment

21
00:01:50,874 --> 00:01:53,662
in the development cloud account. Unfortunately,

22
00:01:53,806 --> 00:01:57,074
because of compliance or requirements or whatever,

23
00:01:57,192 --> 00:02:01,326
Alice doesn't have direct access to the cloud account that's

24
00:02:01,358 --> 00:02:05,102
restricted. So she has to put in a ticket

25
00:02:05,246 --> 00:02:08,294
with another team and they'll do it for her.

26
00:02:08,412 --> 00:02:11,670
So her request is submitted to the cloud operations team.

27
00:02:11,740 --> 00:02:15,606
It goes into a queue with everybody else's request, whatever might

28
00:02:15,628 --> 00:02:19,590
be happening for cloud ops, and it'll get handled eventually,

29
00:02:19,750 --> 00:02:23,194
right? The first subtask for her

30
00:02:23,232 --> 00:02:27,206
ticket is to get approval from Finops. The Finops

31
00:02:27,238 --> 00:02:30,986
team reviews the request tickets, and if a

32
00:02:31,008 --> 00:02:34,442
team is over budget or they have too many environments

33
00:02:34,506 --> 00:02:38,314
already, they haven't cleaned up all of their old stuff, the ticket's rejected

34
00:02:38,362 --> 00:02:41,294
and gets sent back to the requester to try again.

35
00:02:41,492 --> 00:02:45,314
If Finops approves the ticket, it proceeds to cloudops. At some

36
00:02:45,352 --> 00:02:48,834
point, hopefully, Alice will get her environment, but it

37
00:02:48,872 --> 00:02:52,498
feels so clunky. We want to make sure

38
00:02:52,584 --> 00:02:56,774
that all the boxes are checked, that we're using the most recent security

39
00:02:56,892 --> 00:03:00,662
profiles, that we're using the right firewall rules, that we're following all

40
00:03:00,716 --> 00:03:04,294
the rules and regulations and financial guidelines and all of those

41
00:03:04,332 --> 00:03:08,678
other things. But this takes time away from

42
00:03:08,764 --> 00:03:12,466
getting work done, and Alice should be continuing

43
00:03:12,498 --> 00:03:15,674
on her development journey. They are getting more stuff done.

44
00:03:15,792 --> 00:03:19,690
She wants to get back to work so she can ship more awesome features.

45
00:03:20,110 --> 00:03:23,754
So we need a way of dealing with getting

46
00:03:23,792 --> 00:03:26,762
through all this stuff. The hard part,

47
00:03:26,896 --> 00:03:30,526
know all of the folks in our example have goals and projects and

48
00:03:30,548 --> 00:03:34,146
things that they're responsible for. They have different products and services that

49
00:03:34,168 --> 00:03:37,506
they're permitted to have access to, but most of all, and sort

50
00:03:37,528 --> 00:03:40,722
of most importantly, they have specific expertise for

51
00:03:40,776 --> 00:03:44,894
their roles, right? So how much organizational

52
00:03:45,022 --> 00:03:48,690
expertise gets shared varies from team to team,

53
00:03:48,760 --> 00:03:52,130
right. It's definitely common in small companies. If you work in a startup,

54
00:03:52,210 --> 00:03:55,586
you might be one day helping fix a printer and the next day you're provisioning

55
00:03:55,618 --> 00:03:58,210
stuff in the cloud and the next day you're like debugging the mobile app.

56
00:03:58,300 --> 00:04:02,458
It totally happens. But when organizations get larger and their services

57
00:04:02,544 --> 00:04:06,294
get more complex, you start to naturally see some of this siloing

58
00:04:06,342 --> 00:04:10,234
off because their requirements now need somebody to

59
00:04:10,272 --> 00:04:14,126
go really deep in that product, into that environment or

60
00:04:14,148 --> 00:04:17,786
whatever it happens to be. So folks need to cultivate more expertise.

61
00:04:17,898 --> 00:04:21,806
In our fictitious organization, the development team isn't permitted to

62
00:04:21,828 --> 00:04:25,646
directly provision assets in the main cloud accounts. They don't necessarily even know

63
00:04:25,668 --> 00:04:29,534
how to do that. They're in there, they're writing the code, they know their libraries

64
00:04:29,582 --> 00:04:32,706
and the runtimes and the things that impact their application,

65
00:04:32,888 --> 00:04:35,922
and they just want to get code into production. Right.

66
00:04:36,056 --> 00:04:39,714
Then we've got our finops folks, and they're analysts mostly,

67
00:04:39,762 --> 00:04:43,014
right? They may not even do a whole lot of development work other than some

68
00:04:43,052 --> 00:04:46,466
tooling, but they're there to watch the spend and estimate costs

69
00:04:46,498 --> 00:04:50,006
and say, oh, make some recommendations on the budgets and

70
00:04:50,108 --> 00:04:53,226
say, well, we've been deploying this over here, but it might be

71
00:04:53,248 --> 00:04:56,746
cheaper if we moved it to somewhere else. It doesn't really impact us, do that

72
00:04:56,768 --> 00:05:00,202
kind of analysis on the thing. So they know their stuff

73
00:05:00,336 --> 00:05:03,854
and then cloud ops is there. They maintain the access and security and

74
00:05:03,892 --> 00:05:07,002
make sure everything is constantly updated for best practices

75
00:05:07,066 --> 00:05:10,334
or recommended practices for the environment that they're using.

76
00:05:10,452 --> 00:05:13,534
And they're sort of responsible for how all those

77
00:05:13,572 --> 00:05:17,186
things fit together. And then they provide environments back to all the

78
00:05:17,208 --> 00:05:21,170
other teams. So each of these teams knows their stuff, but they all have enough

79
00:05:21,240 --> 00:05:25,086
stuff that they're responsible for to keep them busy. And it's

80
00:05:25,118 --> 00:05:28,454
challenging to try and cross train folks across all these

81
00:05:28,492 --> 00:05:31,906
tasks. So unfortunately, we get to a point where we've

82
00:05:31,938 --> 00:05:35,894
got these important skills that get siloed off and it happens kind

83
00:05:35,932 --> 00:05:39,734
of naturally. Eventually, teams get too large to share all of this stuff,

84
00:05:39,852 --> 00:05:43,478
so we want to get to the point where teams

85
00:05:43,494 --> 00:05:47,146
are spending time doing important work shipping code to production and

86
00:05:47,168 --> 00:05:51,286
keeping customers happy. But we still have to get all the boring stuff accomplished

87
00:05:51,318 --> 00:05:54,970
and that's where we're going to need some automation. So what is automation?

88
00:05:55,050 --> 00:05:59,070
We know it sounds pretty good, right? We know that we probably want some.

89
00:05:59,220 --> 00:06:03,166
And the dirty secret of software development is

90
00:06:03,188 --> 00:06:06,610
really that a lot of the work that goes into getting

91
00:06:06,680 --> 00:06:10,354
software from idea to production has nothing to do with

92
00:06:10,392 --> 00:06:14,098
the application code itself, right? It's all that other stuff

93
00:06:14,184 --> 00:06:17,294
that has to happen. We want our code to have a nice, safe,

94
00:06:17,342 --> 00:06:20,966
cozy place to live when it gets to production. It has nothing to do

95
00:06:20,988 --> 00:06:24,914
with what the application is going to do, right? So our cloud ops team knows

96
00:06:24,962 --> 00:06:28,326
how to get that done. But once you've done

97
00:06:28,348 --> 00:06:31,930
that once or twice and you know how to do it, it's not that exciting.

98
00:06:32,350 --> 00:06:35,418
We need to get stuff there the right way, with the right controls in the

99
00:06:35,424 --> 00:06:37,690
right environments. We don't want to do it ourselves.

100
00:06:38,430 --> 00:06:41,706
The application engineers don't really have the time to

101
00:06:41,728 --> 00:06:45,550
get well versed in all the hundreds of different things

102
00:06:45,620 --> 00:06:48,894
available in our cloud platform, and we might not be

103
00:06:48,932 --> 00:06:53,054
able to give that to them anyway. So we look for another layer, another process

104
00:06:53,172 --> 00:06:56,734
to provide access in a safe way. So we're going to dig a bit

105
00:06:56,772 --> 00:07:00,450
into automation and we're going to dig a bit into building for delegation.

106
00:07:00,950 --> 00:07:04,386
First we'll take a short side quest because we get this question from time to

107
00:07:04,408 --> 00:07:08,402
time. Both of these. Is AI automation? And is automation

108
00:07:08,466 --> 00:07:11,640
AI? Well,

109
00:07:12,010 --> 00:07:15,362
take a step back. We can use AI to help build automation.

110
00:07:15,426 --> 00:07:18,914
You may have more or less success with this, depending on the nature

111
00:07:18,962 --> 00:07:22,246
of your environment. If you use a lot of open source

112
00:07:22,278 --> 00:07:26,026
software, a lot of publicly available stuff, you'll have more luck than if

113
00:07:26,048 --> 00:07:29,686
you're using a bunch of cot stuff or everything you have is homegrown,

114
00:07:29,798 --> 00:07:33,662
obviously, because these large language models that you might be asking questions to

115
00:07:33,796 --> 00:07:37,726
are using publicly available information. And if your information on

116
00:07:37,748 --> 00:07:41,358
your software is behind a login or a support portal that

117
00:07:41,364 --> 00:07:45,354
they can't get into, they're not going to know stuff, right? So you're basically limited

118
00:07:45,402 --> 00:07:48,562
to what's been published online. So if you are using a lot of open

119
00:07:48,616 --> 00:07:52,114
source, you might be okay, right? So it can at least help you get

120
00:07:52,152 --> 00:07:55,758
your automation built. But automation itself isn't AI.

121
00:07:55,934 --> 00:07:59,142
It's not at a point yet where we can build

122
00:07:59,196 --> 00:08:02,370
some automation and have it learn and grow with your systems.

123
00:08:02,530 --> 00:08:06,034
It's not to a point where it finds an error

124
00:08:06,082 --> 00:08:09,414
code and then goes out and looks at that error code

125
00:08:09,452 --> 00:08:12,618
and then creates more code around it to the point where you don't know

126
00:08:12,624 --> 00:08:15,660
what even is in there. So we're not at that point yet.

127
00:08:16,270 --> 00:08:20,106
So we're not to the point where automation is going to let you likes just

128
00:08:20,128 --> 00:08:23,990
sit back, relax, have a margarita and hope that the automation

129
00:08:24,070 --> 00:08:27,054
is going to take care of all of this for you. There's been a number

130
00:08:27,092 --> 00:08:29,914
of research trends over the years in complex systems,

131
00:08:30,042 --> 00:08:33,274
stuff about self healing, stuff about intelligence systems,

132
00:08:33,402 --> 00:08:37,314
and there's lots of pathways forward for

133
00:08:37,352 --> 00:08:41,042
these to happen, but we're not there yet. So we're going to continue to write

134
00:08:41,176 --> 00:08:45,346
most of this stuff ourselves and keep an eye on it because

135
00:08:45,368 --> 00:08:48,886
we're looking for a handful of basic benefits, right? Because we

136
00:08:48,908 --> 00:08:52,658
are going to invest in automation. Even if we're using AI tools

137
00:08:52,674 --> 00:08:55,862
to help us generate it, we still need to invest people

138
00:08:55,916 --> 00:08:59,478
hours into maintaining it, making sure it works, all that great stuff. So it is

139
00:08:59,484 --> 00:09:03,306
an investment, right? It doesn't happen overnight. Hopefully you're not doing it on

140
00:09:03,328 --> 00:09:06,278
your off hours. You want it to be part of the actual products thats you're

141
00:09:06,294 --> 00:09:10,262
working on. So you've got these complex environments,

142
00:09:10,326 --> 00:09:13,830
they're built with hundreds or even thousands of individual components.

143
00:09:13,910 --> 00:09:18,030
So you've got all this complexity and all this stuff. And it's more than most

144
00:09:18,100 --> 00:09:21,642
humans are capable of sort of rationalizing across all the environments.

145
00:09:21,706 --> 00:09:24,506
So we want to be able to contain all of that so that we don't

146
00:09:24,538 --> 00:09:28,146
get too many people confused about it. Then we

147
00:09:28,168 --> 00:09:31,794
want to be able to cope with all the change that comes downstream to us

148
00:09:31,832 --> 00:09:35,822
from all those components. Because things are updating constantly. You might be getting regular

149
00:09:35,886 --> 00:09:39,426
emails, hey, we're sunsetting XYZ. Hey the deprecation

150
00:09:39,458 --> 00:09:42,726
date on this is April 30 or whatever it is. You want to be able

151
00:09:42,748 --> 00:09:46,482
to maintain all of your components in a way that reduces

152
00:09:46,546 --> 00:09:49,606
risk, right? Because we don't want to be running stuff that's end of life,

153
00:09:49,708 --> 00:09:52,906
but we still want to be able to maintain things in our sane and

154
00:09:52,928 --> 00:09:56,138
rational way. To do that we're probably going to need some automation to

155
00:09:56,144 --> 00:09:59,660
help us out. And then the hard part is that

156
00:10:00,110 --> 00:10:03,674
with all these components they're all slightly different. Some of them

157
00:10:03,712 --> 00:10:07,486
are configured in Yaml and some of them are in their own markup language and

158
00:10:07,508 --> 00:10:10,986
some of them are like maybe still using a whole lot of Gui's or dot

159
00:10:11,018 --> 00:10:14,958
files and that kind of stuff. And it's hard

160
00:10:15,044 --> 00:10:18,622
to do all of thats work without making mistakes.

161
00:10:18,686 --> 00:10:21,602
And we're used to bugs, we're software developers, it happens.

162
00:10:21,736 --> 00:10:25,186
But we want to get to a point where we're reducing that

163
00:10:25,208 --> 00:10:28,626
risk has much as possible. And if we're doing the same process

164
00:10:28,728 --> 00:10:31,814
over and over and over again and multiple people have to be able to do

165
00:10:31,852 --> 00:10:35,446
it, the best way to do that is to encode it somewhere that makes it

166
00:10:35,468 --> 00:10:39,346
easier so people aren't copying and pasting and accidentally missing a line or missing

167
00:10:39,378 --> 00:10:42,746
the long strings of options at the end of a

168
00:10:42,768 --> 00:10:46,346
command. And obviously we want to get to the point where

169
00:10:46,368 --> 00:10:49,734
we're reducing toil. If you're not familiar with the word toil,

170
00:10:49,862 --> 00:10:53,150
it's kind of the way that the Google

171
00:10:53,220 --> 00:10:56,960
SRE books talk about work that,

172
00:10:57,490 --> 00:11:01,054
let's say boring, right? They don't usually use the word boring, but it's the

173
00:11:01,092 --> 00:11:04,126
work that has to get done. And it expands sort

174
00:11:04,148 --> 00:11:07,374
of linearly as your environment grows linearly,

175
00:11:07,422 --> 00:11:11,058
right? So things like doing your security updates or

176
00:11:11,224 --> 00:11:14,674
making sure that all of your containers are in line with things like

177
00:11:14,712 --> 00:11:17,850
all that kind of boring stuff that has to happen. And you're doing like you're

178
00:11:17,870 --> 00:11:21,014
rerolling images for security updates, all that kind of stuff.

179
00:11:21,132 --> 00:11:24,950
So we know it has to get done. It's like brushing your teeth.

180
00:11:25,770 --> 00:11:28,998
If you skip a couple of days, maybe, but if you

181
00:11:29,004 --> 00:11:32,086
skip months, you're going to have a problem, right? So you don't want your teeth

182
00:11:32,118 --> 00:11:34,460
falling out because you're not doing your toil work.

183
00:11:34,910 --> 00:11:38,938
So there are some potential drawbacks to automating too much stuff,

184
00:11:39,104 --> 00:11:42,606
and I'll say too much, but you kind of get to a point where things

185
00:11:42,628 --> 00:11:46,414
are more comfortable. One is to look

186
00:11:46,452 --> 00:11:49,998
out for is loss of expertise because you're not going to be able to completely

187
00:11:50,084 --> 00:11:53,418
replace everybody with automation. But you don't

188
00:11:53,434 --> 00:11:56,706
want to get to a point where folks don't know what's going on. There's a

189
00:11:56,728 --> 00:12:01,140
lot of research in systems engineering and automation engineering that

190
00:12:02,230 --> 00:12:07,086
talks about what do you do with junior

191
00:12:07,118 --> 00:12:10,562
engineers, new team members in automated environments.

192
00:12:10,626 --> 00:12:14,066
You want to make sure that they are constantly in the workflow

193
00:12:14,098 --> 00:12:18,082
and constantly working with the products to make sure that they can maintain the automation

194
00:12:18,146 --> 00:12:21,786
and they know what's going on. When the more complex problems come through

195
00:12:21,808 --> 00:12:25,478
that the automation isn't built to work through, they still understand what's

196
00:12:25,494 --> 00:12:28,842
going on and then you have a little bit

197
00:12:28,896 --> 00:12:31,182
of risk from brittleness, right.

198
00:12:31,236 --> 00:12:35,230
Automation is part of your lifecycle.

199
00:12:35,810 --> 00:12:39,358
The systems are part of the automation as much as

200
00:12:39,444 --> 00:12:43,006
your automation code is. It needs to change when the

201
00:12:43,028 --> 00:12:47,102
services change, it will probably need to be updated when the operating

202
00:12:47,166 --> 00:12:50,706
system or dependencies are updated. And you want to be

203
00:12:50,728 --> 00:12:54,146
in a place where you can maintain those tools for a

204
00:12:54,168 --> 00:12:57,490
service as well as you maintain the service itself.

205
00:12:57,640 --> 00:13:01,330
So you don't want to get to a point where you cannot relaunch a thing

206
00:13:01,400 --> 00:13:04,566
because you've lost the start scripts or you don't know where that stuff got to,

207
00:13:04,588 --> 00:13:07,142
or nobody knows how to maintain it. We don't want to get to that point

208
00:13:07,196 --> 00:13:10,138
where we're breaking things because the automation hasn't kept up.

209
00:13:10,224 --> 00:13:14,010
So we want to keep up on that. And another big one is

210
00:13:14,080 --> 00:13:17,494
more political and social than technical, but it's so prevalent,

211
00:13:17,542 --> 00:13:21,046
it's basically a bad management meme as like the dream

212
00:13:21,078 --> 00:13:24,682
of kicking back and drinking a margarita while the automation does all the work.

213
00:13:24,816 --> 00:13:27,806
On the opposite side of that is the manager is like, why are you guys

214
00:13:27,828 --> 00:13:31,118
all here if we've got everything automated? Like you're all fired, right? So we don't

215
00:13:31,124 --> 00:13:34,594
want to get to that point either. We're not at a point where the system

216
00:13:34,632 --> 00:13:38,354
is going to run fine without you. We're trying to make more time in your

217
00:13:38,392 --> 00:13:41,746
day by automating some stuff. So when we go

218
00:13:41,768 --> 00:13:45,282
for automation, it doesn't matter

219
00:13:45,336 --> 00:13:49,046
what you're writing the automation in. And depending on your platform, you could

220
00:13:49,068 --> 00:13:53,026
do things in something as simple as Powershell or bash or your favorite

221
00:13:53,058 --> 00:13:56,726
programming language, whether that's go or python or whatever else you

222
00:13:56,748 --> 00:13:59,734
might be deploying other automation focused tools, right?

223
00:13:59,772 --> 00:14:03,014
Like infrastructure as code components and that kind of stuff. So there's

224
00:14:03,062 --> 00:14:07,046
lots of ways of putting automation into your workflow

225
00:14:07,078 --> 00:14:10,218
that aren't necessarily you have to build the whole thing yourself. There are lots of

226
00:14:10,224 --> 00:14:14,106
building blocks for it, but you should be looking for some basic

227
00:14:14,138 --> 00:14:17,614
characteristics to make things a little easier on yourself over

228
00:14:17,652 --> 00:14:22,366
the lifecycle of the services that you're supporting. And these

229
00:14:22,468 --> 00:14:26,450
probably look like what you want for software development because they totally.

230
00:14:27,590 --> 00:14:31,454
So I've pulled these from Lee Atchison's architecting for scale,

231
00:14:31,502 --> 00:14:34,066
which is a great book. You should take a look at that one if you

232
00:14:34,088 --> 00:14:38,166
haven't. But it's ways to think about

233
00:14:38,348 --> 00:14:42,594
the automation for service as part of the product itself and the characteristics

234
00:14:42,642 --> 00:14:46,438
going to help you maintain things going forward. And these

235
00:14:46,604 --> 00:14:50,086
should hopefully be pretty familiar to you as you have

236
00:14:50,188 --> 00:14:54,246
gone on your DevOps journey. We want things to be testable, whether there's

237
00:14:54,278 --> 00:14:57,994
a test harness for the language that we've chosen to write

238
00:14:58,032 --> 00:15:01,306
our application in, or there's another whole like a test kitchen kind

239
00:15:01,328 --> 00:15:04,574
of application that likes along with it. We want to get to that. You can

240
00:15:04,612 --> 00:15:08,494
apply test driven development methods if that's part of your

241
00:15:08,532 --> 00:15:11,978
culture, that's great too. You also want things to be flexible.

242
00:15:12,074 --> 00:15:15,422
You want them to be implemented for future improvements. So we're not hard

243
00:15:15,476 --> 00:15:19,666
coding things. Maybe we're going out to the configuration database to pull more information about

244
00:15:19,768 --> 00:15:23,426
services and connectivity and things like that. We also want to put all

245
00:15:23,448 --> 00:15:27,090
of it in the version control system so that we can review it

246
00:15:27,160 --> 00:15:30,246
and we have access to its history if we ever need to

247
00:15:30,268 --> 00:15:34,562
go back and look at something. We also want to keep this automation for related

248
00:15:34,626 --> 00:15:38,166
systems the same. And this is like I say that

249
00:15:38,188 --> 00:15:41,562
and you think, oh yeah, that's obvious. But I have worked with customers in

250
00:15:41,616 --> 00:15:45,078
different places over the years that you could have two teams

251
00:15:45,174 --> 00:15:48,522
sitting on the opposite sides of a wall of cubicles and they're both

252
00:15:48,576 --> 00:15:52,394
running the same platform, but their stuff is binary incompatible

253
00:15:52,442 --> 00:15:55,838
because they've been allowed to recompile everything

254
00:15:56,004 --> 00:15:59,806
separately and then they can't share scripts and tools and all

255
00:15:59,828 --> 00:16:03,394
that kind of stuff. And that's crazy. That's such a waste of time and

256
00:16:03,432 --> 00:16:07,342
resources. So from a political

257
00:16:07,406 --> 00:16:11,250
standpoint, you might have to have some hard talks with

258
00:16:11,320 --> 00:16:14,546
the folks that have recompiled things or

259
00:16:14,568 --> 00:16:18,446
have built their own stuff or have kind of gone on side quests

260
00:16:18,558 --> 00:16:21,846
to make their stuff special, because that's going to be harder for absolutely everybody in

261
00:16:21,868 --> 00:16:25,442
the long run. You gain more benefit from your automation

262
00:16:25,586 --> 00:16:29,000
if you can share things across different teams. Right.

263
00:16:29,450 --> 00:16:33,098
So a little bit of a rant there. We also

264
00:16:33,184 --> 00:16:36,602
want things to be repeatable. We definitely want them to be auditable. Right.

265
00:16:36,656 --> 00:16:39,866
I want to run the same every time the tool runs, I want it

266
00:16:39,888 --> 00:16:43,306
to do the same thing. And I want to get to the point where if

267
00:16:43,328 --> 00:16:46,522
I run it, I know I ran it. I want that to be centralized.

268
00:16:46,586 --> 00:16:50,286
And folks know that because the goal here is

269
00:16:50,308 --> 00:16:53,674
for me to give this to Alice, right? So I want to know when Alice

270
00:16:53,722 --> 00:16:57,338
ran the thing, and I want to know that every time Alice runs

271
00:16:57,354 --> 00:17:00,466
the thing, it's going to act the same way for her too. So there's not

272
00:17:00,488 --> 00:17:04,126
a lot of confusion that I don't have to then deal with. So let's

273
00:17:04,158 --> 00:17:08,030
take a look at what it might mean to automate for delegation.

274
00:17:08,110 --> 00:17:11,782
And for folks who are used to sort of writing for themselves.

275
00:17:11,916 --> 00:17:14,726
There's some things that might be a little bit different when we think about it,

276
00:17:14,748 --> 00:17:18,194
right? Because we have a bunch of different teams, right? So all those folks

277
00:17:18,242 --> 00:17:21,574
on the left hand side of the screen there, they're not

278
00:17:21,612 --> 00:17:25,206
dumb. They know their own thing, right? They've got all their own set of tools

279
00:17:25,238 --> 00:17:28,106
and all their own set of knowledge and all that kind of stuff. And then

280
00:17:28,128 --> 00:17:31,434
we've got all of our tools on the right hand side there that are doing

281
00:17:31,472 --> 00:17:35,646
all the cool stuff in our environments, but it's hard to share all

282
00:17:35,668 --> 00:17:38,782
of the things on the right with all of the people on the left because

283
00:17:38,836 --> 00:17:42,414
they don't know all of the same things and they don't have

284
00:17:42,532 --> 00:17:46,046
all of exactly the same skills. And importantly,

285
00:17:46,158 --> 00:17:49,090
they also don't all have exactly the same access,

286
00:17:49,240 --> 00:17:53,154
right, which is another issue that always pops up. So as

287
00:17:53,192 --> 00:17:56,834
we are building for the goal of taking toil off

288
00:17:56,872 --> 00:18:00,422
my plate and giving it to Alice as maybe a click button

289
00:18:00,476 --> 00:18:04,166
somewhere, then I want to make sure that I am resolving all of her

290
00:18:04,188 --> 00:18:07,718
questions via the automation and taking care of all that stuff.

291
00:18:07,804 --> 00:18:11,206
So I want to be able to say, oh, I know Alice knows

292
00:18:11,238 --> 00:18:14,730
X, Y and Z and we'll understand it this way. And I can address

293
00:18:14,800 --> 00:18:17,962
those kinds of gaps for her before I pass

294
00:18:18,016 --> 00:18:21,286
this automation over to her team. So we're

295
00:18:21,318 --> 00:18:24,542
basically building an internal product, right,

296
00:18:24,596 --> 00:18:28,266
when we build this kind of automation. And like I mentioned before, this leads

297
00:18:28,298 --> 00:18:31,322
really well into folks that are on a platform engineering journey,

298
00:18:31,386 --> 00:18:34,870
right? We are designing for delegation

299
00:18:34,970 --> 00:18:38,766
to another team and part of that is going to be supporting

300
00:18:38,798 --> 00:18:42,622
how our users work. Knowing that some of our engineering teams

301
00:18:42,686 --> 00:18:45,966
are super comfortable on the command line, some of them aren't.

302
00:18:46,078 --> 00:18:49,358
A lot of them really just want to log into a web page and click

303
00:18:49,384 --> 00:18:53,122
a button, or maybe they're working in something likes backstage and they want a module

304
00:18:53,186 --> 00:18:56,694
there, or they want things in a certain place. So that stuff

305
00:18:56,732 --> 00:18:59,846
is super easy for them and that's great, but you need to know that and

306
00:18:59,868 --> 00:19:03,546
think about it. We also want to provide results that make sense

307
00:19:03,648 --> 00:19:07,542
whether things are successful or not. If it produces an error,

308
00:19:07,606 --> 00:19:11,194
it should be a helpful error. Oh hey, you're over budget, or hey,

309
00:19:11,232 --> 00:19:14,334
you've already got six environments deployed in your

310
00:19:14,372 --> 00:19:17,886
account, you can't have any more. Please go clean something up. Right. Rather than just

311
00:19:17,908 --> 00:19:21,710
saying error, failing, right. So being helpful to

312
00:19:21,780 --> 00:19:25,022
the users and for folks who have worked in the back end for a long

313
00:19:25,076 --> 00:19:29,186
time, some skills that you might have to build as

314
00:19:29,208 --> 00:19:33,026
you're thinking about how this delegation is going to work, you also want consistency of

315
00:19:33,048 --> 00:19:36,594
experience. You want the same kind of error messages, you want the same kind of

316
00:19:36,632 --> 00:19:40,258
options for the commands, you want things to be named similarly.

317
00:19:40,354 --> 00:19:43,366
You don't want to use a lot of jargon if you don't have to.

318
00:19:43,468 --> 00:19:47,398
You certainly don't want to use like inside jokes, right? And that kind of stuff

319
00:19:47,484 --> 00:19:50,682
in these kinds of internal products because you want as many

320
00:19:50,736 --> 00:19:54,922
people as possible to be able to use them and be successful with them without

321
00:19:54,976 --> 00:19:58,394
having a lot of insider knowledge, right? So making things as

322
00:19:58,432 --> 00:20:01,978
accessible as possible to as wide an

323
00:20:02,064 --> 00:20:06,114
audience as you can, knowing that they're all just your coworkers,

324
00:20:06,182 --> 00:20:09,598
right? If they don't understand something they're going to be pinging you on slack or

325
00:20:09,604 --> 00:20:12,526
teams or whatever. But at the same time they really just want to get their

326
00:20:12,548 --> 00:20:16,260
work done and not be burdened with a bunch of silly stuff.

327
00:20:16,630 --> 00:20:20,066
We also want to include as much documentation and context as

328
00:20:20,088 --> 00:20:24,354
we can, whether that's like hover overs or whatever it looks like for

329
00:20:24,392 --> 00:20:27,686
your tools. So that like you say, folks don't have to come back to you

330
00:20:27,708 --> 00:20:31,234
on slack all the time. So we are designing

331
00:20:31,282 --> 00:20:35,094
for other people that kind of look like us, right? They are

332
00:20:35,132 --> 00:20:38,514
other folks that are technically minded,

333
00:20:38,562 --> 00:20:41,686
they are doing technical work and they are headed in the

334
00:20:41,708 --> 00:20:45,146
same direction we are, right. We want to create awesome products for

335
00:20:45,168 --> 00:20:48,634
the customers. It's just that some of us work on the backside and they work

336
00:20:48,672 --> 00:20:52,678
on the front side. So like any software design we are focusing on

337
00:20:52,704 --> 00:20:56,206
empathy for the users. It just happens to be that the users are the

338
00:20:56,228 --> 00:20:58,430
next team over in the chart.

339
00:21:00,050 --> 00:21:03,554
So we want to turn our expertise, the things we know, things cloud

340
00:21:03,592 --> 00:21:07,758
ops knows, things finops knows into automation.

341
00:21:07,854 --> 00:21:12,034
So that when Alice wants to request that

342
00:21:12,152 --> 00:21:15,720
environment she logs into our automation platform,

343
00:21:16,090 --> 00:21:20,162
whatever it is requests her environment provision environment.

344
00:21:20,306 --> 00:21:24,006
And it says oh you're Alice, you're on this team,

345
00:21:24,108 --> 00:21:28,486
you have these permissions to these jobs in these environments and

346
00:21:28,508 --> 00:21:31,686
it just goes through the workflow right? Oh here's

347
00:21:31,718 --> 00:21:35,354
the jobs for Alice's team. Click the button, off it goes, it goes

348
00:21:35,392 --> 00:21:38,346
through the budget check. Doesn't need a human does it?

349
00:21:38,368 --> 00:21:42,218
Automatically creates the environment, pops it back up to Alice says here's

350
00:21:42,234 --> 00:21:45,290
your environment, please log in at da da da.

351
00:21:45,450 --> 00:21:48,906
And every job gets logged for audit.

352
00:21:49,018 --> 00:21:52,682
So that I know Alice provisioned an environment on Thursday

353
00:21:52,826 --> 00:21:56,434
because then when her co worker Ben tries to

354
00:21:56,472 --> 00:22:00,466
provision something on Friday and the account is full

355
00:22:00,568 --> 00:22:04,366
he can say oh Alice has one, let's see if she's

356
00:22:04,398 --> 00:22:07,618
done. We can turn things off. So what kinds of

357
00:22:07,624 --> 00:22:10,918
things should we automate? Like you may be thinking in your head, well I've got

358
00:22:10,924 --> 00:22:14,614
all this junk that I do thats if it makes the most

359
00:22:14,652 --> 00:22:18,742
sense to automate. So there's a couple of ways of framing up thinking

360
00:22:18,796 --> 00:22:21,626
about automation that you can take a look at. We're going to look at two

361
00:22:21,648 --> 00:22:25,034
of them. So the first one is to automate based on

362
00:22:25,152 --> 00:22:28,598
what feels most comfortable to sort of automate

363
00:22:28,694 --> 00:22:32,006
around a specific set of tasks. Now we're pager

364
00:22:32,038 --> 00:22:35,326
duty, so we took a look at some tasks that you

365
00:22:35,348 --> 00:22:39,038
might do during an incident response, right? Something's wrong. There might

366
00:22:39,044 --> 00:22:41,822
be some things that you need to do. Happens all the time,

367
00:22:41,876 --> 00:22:46,014
right? So looking at tasks

368
00:22:46,142 --> 00:22:49,906
on a set of axes, on the x axis there

369
00:22:49,928 --> 00:22:54,274
on the bottom, we are looking at things that go from simple to

370
00:22:54,392 --> 00:22:57,446
sophisticated or complex, right? So simple things are

371
00:22:57,468 --> 00:23:01,206
like maybe one single command in one set of services, and the

372
00:23:01,228 --> 00:23:04,822
next one sophisticated stuff might be looking across

373
00:23:04,876 --> 00:23:08,214
lots of different services or trying to coordinate something. And then

374
00:23:08,252 --> 00:23:11,626
as we look at the y axis, the bottom, it's stuff that has

375
00:23:11,648 --> 00:23:14,458
no impact. This is your read only kind of stuff,

376
00:23:14,544 --> 00:23:17,690
right? And then when we get

377
00:23:17,840 --> 00:23:21,698
higher and higher on the y axis, things get a little bit more high impact

378
00:23:21,814 --> 00:23:25,114
and might be a little scary to get automating,

379
00:23:25,242 --> 00:23:28,442
especially at the beginning, right? So thinking about the incident

380
00:23:28,506 --> 00:23:31,694
response context, things that in the green there

381
00:23:31,732 --> 00:23:35,426
are super easy maybe, and you might actually already have

382
00:23:35,448 --> 00:23:39,406
access to them, it's just a matter of putting them somewhere more easily

383
00:23:39,438 --> 00:23:42,660
available. Things like just info gathering, right?

384
00:23:43,350 --> 00:23:46,874
Memory, cpu error messages, get that performance

385
00:23:46,942 --> 00:23:50,210
check, that kind of thing. Getting out into the yellow,

386
00:23:50,290 --> 00:23:53,750
things get a little bit more complex and we might need some help

387
00:23:53,820 --> 00:23:57,846
from our environment for starter restarts or

388
00:23:58,028 --> 00:24:02,630
maybe multi step restarts or other more complex diagnostics

389
00:24:02,710 --> 00:24:06,138
out of like maybe Kafka is pushing something wrong or there's a

390
00:24:06,144 --> 00:24:09,866
weird error message there and we got into the red. There's some

391
00:24:09,888 --> 00:24:13,750
things here that folks aren't super comfortable automating and some of it fortunately

392
00:24:13,830 --> 00:24:17,166
will be handled by your cloud. But it might not be. Whether it's things like

393
00:24:17,268 --> 00:24:20,686
scaling up a complex environment that you push a bunch of

394
00:24:20,708 --> 00:24:23,886
new containers into a pod or something like thats. Or you need to do a

395
00:24:23,908 --> 00:24:28,622
multi service rolling restart, maybe across different locations geographically.

396
00:24:28,686 --> 00:24:32,450
So thats things all sync up and reconnect. Or you might have a process

397
00:24:32,520 --> 00:24:36,258
for rollback or redeploy that you get to the point where

398
00:24:36,264 --> 00:24:40,166
you really want to automate those kinds of things, right, for incident response, but you

399
00:24:40,188 --> 00:24:43,510
can sort of take that and break it down. In the Alice example

400
00:24:43,580 --> 00:24:47,122
too, we could do the same sort of tasks in a graph

401
00:24:47,266 --> 00:24:50,666
based on provision environments in the cloud and figure out what

402
00:24:50,688 --> 00:24:54,710
to do there. Another way to look at automating tasks

403
00:24:54,790 --> 00:24:57,786
is through this XKCD example.

404
00:24:57,888 --> 00:25:01,386
There's always an XKCD example, right? So you can

405
00:25:01,408 --> 00:25:05,582
also think about automating the tasks that you do most often or

406
00:25:05,636 --> 00:25:09,246
the stuff that takes the most time. Right. Because we want to look at

407
00:25:09,348 --> 00:25:13,498
getting time back out of our day by not doing these sort of toily tasks.

408
00:25:13,594 --> 00:25:17,346
So you can actually do this kind of graph for yourself and

409
00:25:17,368 --> 00:25:20,846
think about how often do you do a task? Well cloud ops

410
00:25:20,878 --> 00:25:24,174
has to provision environments like 40 times a week. It's crazy. Oh my gosh.

411
00:25:24,302 --> 00:25:27,778
And how long that actually takes. And get yourself to

412
00:25:27,784 --> 00:25:31,542
the point where you figure out okay, we're going to get back x number of

413
00:25:31,596 --> 00:25:35,574
person hours every week by automation. This thing. And some stuff

414
00:25:35,772 --> 00:25:39,414
might be hard to justify in this way, right?

415
00:25:39,452 --> 00:25:42,678
You might have some jobs that you only run once a quarter, maybe it's

416
00:25:42,694 --> 00:25:46,282
reporting or something like that. You think oh, we only run this once

417
00:25:46,336 --> 00:25:50,122
every three months and it doesn't run that long. But even that stuff

418
00:25:50,256 --> 00:25:53,498
you can benefit from automating because of the

419
00:25:53,504 --> 00:25:57,130
other things thats automation gives you because you're only running it once a quarter.

420
00:25:57,210 --> 00:26:00,638
It's easy for people to forget how to do it and mess it up.

421
00:26:00,724 --> 00:26:04,238
So having some automation around that can prevent that stuff too. So you

422
00:26:04,244 --> 00:26:07,874
have all of those sort of benefits that you want to think

423
00:26:07,912 --> 00:26:11,234
about when you're thinking about what kind of things

424
00:26:11,272 --> 00:26:14,100
to automate and what you're going to get back out of all of that.

425
00:26:14,630 --> 00:26:17,918
And eventually you get to the point where you've got a bunch of automation or

426
00:26:17,944 --> 00:26:21,126
you have a bunch of targets for automation you could think about.

427
00:26:21,308 --> 00:26:24,514
Thats exactly the end state is for that automation.

428
00:26:24,562 --> 00:26:28,422
Because not everything's going to get to a perfect run on its own

429
00:26:28,476 --> 00:26:31,642
kind of life, right? So thinking it too

430
00:26:31,696 --> 00:26:34,630
about as you're building your automation portfolio,

431
00:26:34,790 --> 00:26:38,246
thinking about the evolution of those automation components, whatever you've

432
00:26:38,278 --> 00:26:41,962
written them in doesn't even matter. Starting on the left we

433
00:26:42,016 --> 00:26:46,142
have automation opportunities. That's just fancy way of saying things we haven't automated yet,

434
00:26:46,196 --> 00:26:49,886
right? They're just in the backlog, we'll get to them. But then we

435
00:26:49,908 --> 00:26:53,162
get to the most common one which is human initiated automation.

436
00:26:53,226 --> 00:26:56,850
This is your common scripts and other tools the team members

437
00:26:56,920 --> 00:27:00,900
are running on demand. This is Alice getting her environment right.

438
00:27:01,670 --> 00:27:05,558
We want something done, we need to complete a task and it's unscheduled. This is

439
00:27:05,564 --> 00:27:09,874
going to happen when some other work has been completed. So it's

440
00:27:09,922 --> 00:27:13,686
human dependent, human initiated. A lot

441
00:27:13,708 --> 00:27:17,366
of stuff has out in that part, right? That's where

442
00:27:17,468 --> 00:27:20,706
a lot of automation kind of likes because that's the workflow,

443
00:27:20,738 --> 00:27:24,186
that's the nature of this kind of work. If you get to the point where

444
00:27:24,208 --> 00:27:27,814
you've got stuff that you want to kick off, say during an incident.

445
00:27:27,942 --> 00:27:31,354
We get to the point where we might get some automation with oversight. This is

446
00:27:31,392 --> 00:27:35,114
automation that runs on its own in response to some environmental trigger.

447
00:27:35,162 --> 00:27:38,766
Some event happens. And it might be simple things like your

448
00:27:38,788 --> 00:27:41,934
cron jobs that rotate logs or other stuff like

449
00:27:41,972 --> 00:27:45,666
restarting a service when it stops responding to queries or whatever the

450
00:27:45,688 --> 00:27:48,926
automation still requires. Maybe some humans to make sure it runs

451
00:27:48,958 --> 00:27:52,674
okay. It might require permission to be able to say,

452
00:27:52,712 --> 00:27:57,086
hey, this alert came in, should we try this remediation

453
00:27:57,278 --> 00:28:00,646
and someone human responder has to press the button. You could

454
00:28:00,668 --> 00:28:03,926
totally do that. And when we get to the point where

455
00:28:03,948 --> 00:28:07,618
we're pretty comfortable with that, we might get to the point where the automation

456
00:28:07,794 --> 00:28:11,494
runs on its own with a fallback stage. It runs and it only

457
00:28:11,532 --> 00:28:15,194
requires a human intervention if something goes wrong. So it might just keep

458
00:28:15,232 --> 00:28:18,566
running in the background that one time out of ten that it fails

459
00:28:18,598 --> 00:28:22,038
with some weird error code. Then it pops back up to the human responder

460
00:28:22,054 --> 00:28:24,846
and says, hey, I tried this, it didn't work. You need to tasks a look

461
00:28:24,868 --> 00:28:28,318
at it, right? It will let humans know when it's not able to fix a

462
00:28:28,324 --> 00:28:31,614
thing if all goes well, the other nine times

463
00:28:31,652 --> 00:28:35,026
out of ten it just does what it needs to do, doesn't necessarily need to

464
00:28:35,048 --> 00:28:38,642
report. Eventually you might get to the last

465
00:28:38,696 --> 00:28:42,354
has on some things monitor and evaluate tasks get done with

466
00:28:42,392 --> 00:28:46,374
automation. Edge tasks are pretty well managed. You don't get

467
00:28:46,492 --> 00:28:50,294
errors all that often and instead of tasks coming

468
00:28:50,332 --> 00:28:53,730
in and creating tickets or alerts, they just create metrics,

469
00:28:53,810 --> 00:28:57,622
right? Rather than saying like Brian in April cleared n

470
00:28:57,676 --> 00:29:01,738
requests for this error code this week, you might know

471
00:29:01,824 --> 00:29:05,738
this error code was completed by automation end times this week.

472
00:29:05,824 --> 00:29:09,398
So you can monitor it over time, right? And rather than relying on likes

473
00:29:09,494 --> 00:29:12,714
how Brian and April feel about having restarted this thing or whatever

474
00:29:12,752 --> 00:29:16,266
the task is, you actually have metrics based on the alerts

475
00:29:16,298 --> 00:29:20,160
coming in, the automation handling things. So you end up being able to

476
00:29:20,530 --> 00:29:23,978
monitor and manage the performance of the system a little bit better because you've

477
00:29:23,994 --> 00:29:27,218
got the actual raw data there. Not all of

478
00:29:27,224 --> 00:29:30,626
your tasks are going to reach all of these phases. Some things,

479
00:29:30,648 --> 00:29:35,022
like I said, are more naturally going to hang out in that human initiated automation

480
00:29:35,086 --> 00:29:38,966
part, but even that is going to gain back so much time for

481
00:29:38,988 --> 00:29:42,438
your team to get all those sort of toily tasks out of your way

482
00:29:42,524 --> 00:29:46,518
and put them into your automation portfolio so that you can

483
00:29:46,684 --> 00:29:50,134
do more interesting stuff and learn new things and do

484
00:29:50,172 --> 00:29:53,258
whatever you need to do. Otherwise. So that is most of

485
00:29:53,264 --> 00:29:57,210
my talk. Hopefully, that was helpful for folks. We love to talk about thats stuff.

486
00:29:57,360 --> 00:30:00,586
I didn't talk much about Pagerduty. If you want to talk about Pagerduty, we are

487
00:30:00,608 --> 00:30:04,270
always available. You can find more information@pagerduty.com.

488
00:30:04,340 --> 00:30:07,790
We also have an automation platform that was built off of Rundeck,

489
00:30:08,130 --> 00:30:11,422
which there's information there@rundeck.com. There's also

490
00:30:11,476 --> 00:30:14,686
a community version if you want to try that out. And there are

491
00:30:14,708 --> 00:30:18,702
some links there on our community site for our

492
00:30:18,756 --> 00:30:22,526
automation resources and code and all kinds of

493
00:30:22,548 --> 00:30:25,414
examples and things like that, too. So we love to talk about this stuff,

494
00:30:25,452 --> 00:30:28,518
and it would be great to hear from any of you. If you'd like to

495
00:30:28,524 --> 00:30:31,126
reach out on our community site, we'd love to hear from you. So I hope

496
00:30:31,148 --> 00:30:34,246
you have a great rest of comp 42.

