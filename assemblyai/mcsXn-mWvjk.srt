1
00:00:34,610 --> 00:00:37,494
Hi everyone, I'm Lucas, and today I'm going to talk to you about how to

2
00:00:37,532 --> 00:00:41,186
design staging environments. Not only staging environments, pre production

3
00:00:41,218 --> 00:00:44,182
environments in general. And before we get started,

4
00:00:44,236 --> 00:00:47,046
I just thought I'd give you a brief intro about myself.

5
00:00:47,228 --> 00:00:50,590
So I'm the founder of Ergomake where@ergomake.com dev

6
00:00:50,740 --> 00:00:54,270
and we work a lot with these preproduction and these

7
00:00:54,340 --> 00:00:57,406
staging environments. So all this content comes from what

8
00:00:57,428 --> 00:01:00,526
we've learned dealing with users that want to set up

9
00:01:00,548 --> 00:01:04,234
those kinds of environments. I'm also an author, so ive written

10
00:01:04,282 --> 00:01:07,540
testing JavaScript applications, which is a book published by many.

11
00:01:07,910 --> 00:01:11,710
In the past I've been a core maintainer of Chi Js and Silent JS,

12
00:01:11,790 --> 00:01:15,810
and I've contributed to many other open source projects, including Jest,

13
00:01:15,890 --> 00:01:18,710
which many of you may use if you use JavaScript.

14
00:01:19,210 --> 00:01:23,026
Previously before founding Ergomake, I was a senior software engineer

15
00:01:23,058 --> 00:01:25,670
at Elastic who does elasticsearch.

16
00:01:26,730 --> 00:01:30,682
So without further ado, I want to get started and talk about

17
00:01:30,736 --> 00:01:34,362
staging environments. And to start, I'd like to explore why people

18
00:01:34,416 --> 00:01:37,930
use staging, why people use preproduction environments today,

19
00:01:38,080 --> 00:01:41,726
and why these environments matter. So today most

20
00:01:41,748 --> 00:01:45,098
people use staging for one of these three reasons.

21
00:01:45,274 --> 00:01:49,454
First, development. Because individuals can't easily run

22
00:01:49,492 --> 00:01:53,166
their whole app on their machines, so they will point to staging if they

23
00:01:53,188 --> 00:01:56,834
cannot do that, if they need to run 1000 containers, if they have to have,

24
00:01:56,872 --> 00:02:00,226
I don't know, many queues running and things like that,

25
00:02:00,248 --> 00:02:03,966
they usually cannot run all that on their machines, so they use staging

26
00:02:03,998 --> 00:02:07,570
environments and just run one application on their machine.

27
00:02:08,010 --> 00:02:11,874
The second reason is for testing, because each retests and synthetics

28
00:02:11,922 --> 00:02:15,286
tests they need to run somewhere, and a developer's machine is

29
00:02:15,308 --> 00:02:18,530
usually not the ideal place to do so. Furthermore,

30
00:02:18,610 --> 00:02:23,130
a staging environments may not be representative enough of production.

31
00:02:23,470 --> 00:02:27,254
And the third and final reason is validation. Because nontechnical

32
00:02:27,302 --> 00:02:31,274
folks, designers and products and product people, usually cannot run

33
00:02:31,312 --> 00:02:35,006
the whole app on their machines because they lack the technical expertise or

34
00:02:35,028 --> 00:02:39,002
they lack tools, and they need to do acceptance tests somewhere

35
00:02:39,146 --> 00:02:43,134
so that they can provide feedback to developers during

36
00:02:43,172 --> 00:02:46,990
these three activities. Managing preproduction in general serves

37
00:02:47,070 --> 00:02:50,114
three main purposes. The first is

38
00:02:50,152 --> 00:02:53,794
to ensure that features match specs. The second

39
00:02:53,832 --> 00:02:57,366
is to perform representative tasks and catch bugs before they get to

40
00:02:57,388 --> 00:03:01,234
preproduction. And the third is for sharing context among

41
00:03:01,282 --> 00:03:04,486
technical and non technical team members. So when

42
00:03:04,508 --> 00:03:07,894
you have one of these environments, product can see it, QA can see it,

43
00:03:07,932 --> 00:03:11,942
designers can see it, not only devs can see it, as usually happens.

44
00:03:12,076 --> 00:03:15,206
What usually happens is that devs do a lot of work on their machines.

45
00:03:15,318 --> 00:03:18,582
They review the code, they send it to stage or to production,

46
00:03:18,646 --> 00:03:22,666
and only then these people see it. So if you have these pre production

47
00:03:22,698 --> 00:03:26,430
environments, people can see it early, before things get to production.

48
00:03:27,090 --> 00:03:30,960
But there are better ways to get all of these benefits

49
00:03:31,490 --> 00:03:34,754
than what we currently do. So what

50
00:03:34,792 --> 00:03:38,450
are we doing wrong today? Well, there's plenty of challenges

51
00:03:38,870 --> 00:03:42,402
that currently happen. The first is on the left

52
00:03:42,456 --> 00:03:46,470
here is that we have excessive technical complexity.

53
00:03:47,130 --> 00:03:50,754
This complexity usually comes in the form of opaque CI

54
00:03:50,802 --> 00:03:53,330
pipelines, complex helm shards,

55
00:03:53,490 --> 00:03:57,410
terraform files, and many other infrastructure tools that developers don't usually

56
00:03:57,500 --> 00:04:00,934
understand. And many times even infra people don't fully

57
00:04:00,982 --> 00:04:04,714
understand them. This complex infrastructure then

58
00:04:04,752 --> 00:04:08,614
leads to another problem. Developers cannot spin up preproduction

59
00:04:08,662 --> 00:04:12,382
environments for themselves, so they end up depending on these

60
00:04:12,436 --> 00:04:16,378
operations and infrastructure teams. And this dependency

61
00:04:16,474 --> 00:04:19,790
leads to a lot of wasted time, long cycle times,

62
00:04:19,860 --> 00:04:23,826
and very often bugs because developers don't understand the

63
00:04:23,848 --> 00:04:26,914
underlying tooling and infrastructure. And I know

64
00:04:26,952 --> 00:04:30,482
we've been talking a lot about DevOps, but without

65
00:04:30,536 --> 00:04:34,178
empowering developers, without teaching them how infrastructure works,

66
00:04:34,344 --> 00:04:37,510
we cannot get there. It is pretty difficult to understand

67
00:04:37,580 --> 00:04:41,574
all those things. Another problem is that

68
00:04:41,612 --> 00:04:45,014
most people today, they have a single staging environment, and that

69
00:04:45,052 --> 00:04:48,554
happens for a myriad of reasons. Maybe staging is too

70
00:04:48,592 --> 00:04:51,530
expensive if it's representative of production,

71
00:04:51,870 --> 00:04:55,562
and maybe the complex infrastructure means it's not easy

72
00:04:55,696 --> 00:04:59,660
to reproduce staging on demand whenever developers need it.

73
00:05:00,030 --> 00:05:03,534
If that's the case, the developers who wrote code pointing to

74
00:05:03,572 --> 00:05:06,862
managing end up got being able to work if

75
00:05:06,916 --> 00:05:10,782
staging is down or misbehaving, so managing goes down. Everyone that

76
00:05:10,836 --> 00:05:14,260
has to develop against staging is not able to work.

77
00:05:15,190 --> 00:05:19,118
For designers, a problem with staging is that there's a lack of visibility

78
00:05:19,214 --> 00:05:22,926
into what's being done before changes are merged and deployed.

79
00:05:23,038 --> 00:05:27,054
So when feedback comes, it's usually too late and too expensive to

80
00:05:27,112 --> 00:05:30,786
change things. For qas, in addition

81
00:05:30,818 --> 00:05:34,166
to having to wait for the app to be deployed before they can test,

82
00:05:34,348 --> 00:05:38,390
they often have to do with messy data or dirty state, which makes

83
00:05:38,460 --> 00:05:42,038
their tests unrepresentive. So imagine you have

84
00:05:42,124 --> 00:05:45,894
the single staging environment and designers are using it to validate

85
00:05:45,942 --> 00:05:49,386
whether things look like they should. Developers are developing against it.

86
00:05:49,408 --> 00:05:53,198
They are sending a bunch of fake data there. If that's the case,

87
00:05:53,364 --> 00:05:56,942
maybe QA will do something and they won't know whether they've done something

88
00:05:56,996 --> 00:06:01,438
wrong, whether there's a bug or whether it was just someone

89
00:06:01,604 --> 00:06:05,330
messing up with state in staging so they can test things.

90
00:06:05,480 --> 00:06:08,754
So it's very difficult for qas to properly analyze the code

91
00:06:08,792 --> 00:06:11,780
that's there without proper state, without proper data.

92
00:06:12,550 --> 00:06:15,906
And finally, product managers may also have to wait for

93
00:06:15,928 --> 00:06:18,742
developers to deploy the change that PO needs to see,

94
00:06:18,876 --> 00:06:22,534
and then they have to juggle those dependencies themselves. So let's say

95
00:06:22,572 --> 00:06:25,782
developer a is developing a feature and developer b is developing a feature that

96
00:06:25,836 --> 00:06:29,494
impacts feature a in some way. If that's the

97
00:06:29,532 --> 00:06:32,986
case, both developers cannot deploy the changes at the same time. They have to do

98
00:06:33,008 --> 00:06:36,426
a conflict, and until they resolve those conflicts and send it to

99
00:06:36,528 --> 00:06:40,182
preproduction product cannot see it because there's only

100
00:06:40,256 --> 00:06:43,838
staging environments. So there's again this bottleneck not

101
00:06:43,844 --> 00:06:47,790
only for deploying to production, but also for validating things from

102
00:06:47,860 --> 00:06:49,630
a product perspective.

103
00:06:51,010 --> 00:06:54,420
Okay, so now that we understand these problems,

104
00:06:55,110 --> 00:06:57,300
how do we actually solve them?

105
00:06:58,310 --> 00:07:02,190
The first step is to eliminate the bottleneck and empower developers

106
00:07:02,270 --> 00:07:06,002
developers to spin up the environments at will. So instead

107
00:07:06,056 --> 00:07:10,066
of having a single environment that's always there, you just tell developers whenever

108
00:07:10,098 --> 00:07:12,150
you need, you can get an environment.

109
00:07:13,290 --> 00:07:17,762
For that. It is essential to have simple inference code setups and pipelines

110
00:07:17,826 --> 00:07:21,260
that are easy for developers to understand.

111
00:07:21,950 --> 00:07:25,686
And for that, SRes and DevOps engineers.

112
00:07:25,798 --> 00:07:29,146
I don't really like the term. I think of DevOps as a coach or not

113
00:07:29,168 --> 00:07:32,118
as a role. But anyway, let's ignore that for now.

114
00:07:32,144 --> 00:07:36,426
So for that, these people, they need to create a good set of abstractions

115
00:07:36,618 --> 00:07:40,350
for the developers to use. Those abstractions may sometimes

116
00:07:40,420 --> 00:07:43,810
even simplify the staging environments you deploy, given it

117
00:07:43,880 --> 00:07:46,610
doesn't always need to be exactly like production.

118
00:07:46,950 --> 00:07:50,654
Furthermore, for those to work, it is important to embed

119
00:07:50,702 --> 00:07:54,226
an infrastructure expert into the team to provide support

120
00:07:54,328 --> 00:07:57,606
and empower developers. Because as I've mentioned before,

121
00:07:57,788 --> 00:08:00,658
all these infrastructure tools,

122
00:08:00,834 --> 00:08:04,786
they're really complex and you cannot simply rely. The developers

123
00:08:04,898 --> 00:08:08,502
will have time to understand all of that. So by embedding

124
00:08:08,566 --> 00:08:11,818
this expert into the team, they can kind

125
00:08:11,824 --> 00:08:15,034
of be like as a service person,

126
00:08:15,152 --> 00:08:18,714
as a consultant for those devs to be able to manage that

127
00:08:18,752 --> 00:08:22,218
infrastructure. One way that people do this currently is

128
00:08:22,224 --> 00:08:25,434
by having platform engineering teams that provide good APIs

129
00:08:25,482 --> 00:08:29,226
for developers. But if that's all your case, if you don't have a platform engineering

130
00:08:29,258 --> 00:08:32,754
team, it's perfectly fine to embed a DevOps person into

131
00:08:32,792 --> 00:08:36,306
the development team. With that you will be

132
00:08:36,328 --> 00:08:39,826
able to have these multiple environments on demand and

133
00:08:39,928 --> 00:08:42,450
cut the intercheam dependencies.

134
00:08:44,150 --> 00:08:47,942
Now something you're all probably thinking about is that having

135
00:08:47,996 --> 00:08:51,880
too many environments sounds expensive, and it usually is.

136
00:08:52,330 --> 00:08:55,414
Well, because of that, it is

137
00:08:55,452 --> 00:08:58,950
important to allocate a resource pool for teams

138
00:08:59,530 --> 00:09:03,354
that not only prevents you from worrying about excessive costs, but also

139
00:09:03,392 --> 00:09:06,954
empowers the team to use the resources, however they find it more

140
00:09:06,992 --> 00:09:10,746
useful. There are many ways of doing that, but one easy way,

141
00:09:10,848 --> 00:09:14,410
especially if you go multicloud or if you run many clusters everywhere,

142
00:09:14,570 --> 00:09:17,966
is to use budgeting features of kubesphere, which I

143
00:09:17,988 --> 00:09:21,198
quite like, and they're quite easy to set up, as shown here.

144
00:09:21,364 --> 00:09:24,542
If you do that, all of a sudden you don't have to worry about things

145
00:09:24,596 --> 00:09:27,778
being too expensive anymore, because you're going to cap the use of the team.

146
00:09:27,864 --> 00:09:31,186
And the team won't have to escalate whenever they need to buy something

147
00:09:31,288 --> 00:09:34,402
on AWS, whenever they need a new instance or things like that.

148
00:09:34,536 --> 00:09:37,960
So you empower the team to move fast

149
00:09:39,290 --> 00:09:42,806
and remember that your environments, they don't necessarily have to

150
00:09:42,828 --> 00:09:46,326
be too similar to production. Depending on what you're doing,

151
00:09:46,428 --> 00:09:49,970
you can have lighter weight environments, like when developing or validating the

152
00:09:49,980 --> 00:09:53,238
product. And sometimes you can have functional equivalents,

153
00:09:53,254 --> 00:09:56,954
even for testing, unless you're doing benchmarking or something that depends on

154
00:09:56,992 --> 00:10:00,234
representative inference. So the way I think about this is that

155
00:10:00,272 --> 00:10:02,934
for development we need functional equivalents.

156
00:10:03,062 --> 00:10:06,666
So the queues, the services that

157
00:10:06,688 --> 00:10:09,514
you depend on, they need to be running so that you can point to staging,

158
00:10:09,562 --> 00:10:12,206
point to pre production, and then you can do your dev there and you can

159
00:10:12,228 --> 00:10:16,206
be reasonably confident that things will work as they should. For validation,

160
00:10:16,318 --> 00:10:20,562
product designers and qas, they need some kind of guarantee that

161
00:10:20,616 --> 00:10:24,114
things will be similar in terms of performance and in terms of

162
00:10:24,152 --> 00:10:27,654
overall functioning as they would be in production. And for those

163
00:10:27,692 --> 00:10:30,822
tasks, these people don't usually put much load into the system,

164
00:10:30,956 --> 00:10:34,594
so you can scale them down and you will still have performance

165
00:10:34,642 --> 00:10:38,226
equivalence. Finally, for testing, infrastructure equivalents

166
00:10:38,258 --> 00:10:41,850
is important so that you catch bugs that you'd only catch

167
00:10:42,350 --> 00:10:45,802
when you have a certain pool running. So the important thing here is to

168
00:10:45,856 --> 00:10:49,930
understand that even though you can have an equivalent infrastructure,

169
00:10:50,510 --> 00:10:54,778
by equivalent, I don't mean equivalent to says that you're

170
00:10:54,794 --> 00:10:58,606
going to have 1000 instances, that you're going to offer lots of

171
00:10:58,628 --> 00:11:02,330
benefits in terms of performance. Many of these bugs can be called with

172
00:11:02,500 --> 00:11:06,020
much less infrastructure than people usually have.

173
00:11:07,750 --> 00:11:11,314
Another thing I recommend doing is to generate a representative fake data

174
00:11:11,352 --> 00:11:14,946
set for production database schemas and integrate that into your

175
00:11:14,968 --> 00:11:18,998
staging environments deployment pipeline. That way

176
00:11:19,164 --> 00:11:22,502
every new environment gets a fresh set of data, which is super

177
00:11:22,556 --> 00:11:26,642
useful not only for qas, devs and other folks to do representative

178
00:11:26,706 --> 00:11:30,454
test, but also to validate migrations will work

179
00:11:30,492 --> 00:11:33,786
appropriately, which is something we've seen quite a got many, many people that come to

180
00:11:33,808 --> 00:11:37,462
talk to us at Ergomake, they have this problem. They have migrations,

181
00:11:37,606 --> 00:11:41,018
and they are not sure that their migrations are not going to destroy some kind

182
00:11:41,024 --> 00:11:44,378
of important data. So they want to have these environments, so that the migration

183
00:11:44,474 --> 00:11:48,638
runs there, and they want to have some representative data there

184
00:11:48,804 --> 00:11:52,106
to have a good guarantee that things are not going to break when those migrations

185
00:11:52,138 --> 00:11:55,294
go to production. And if you want to do that,

186
00:11:55,332 --> 00:11:58,446
it is quite easy to write a small script, to read your schemas and integrate

187
00:11:58,478 --> 00:12:02,002
it with libraries like Faker. And while you can

188
00:12:02,056 --> 00:12:05,186
guess what data goes there and generate it on the fly by looking at the

189
00:12:05,208 --> 00:12:08,734
schema. So use Faker to remove any PII, to remove

190
00:12:08,782 --> 00:12:12,486
any data that's sensitive, and then you put it there and then you have a

191
00:12:12,508 --> 00:12:15,666
good guarantee that that data is going to be similar enough of production

192
00:12:15,698 --> 00:12:18,738
to catch bugs with migrations.

193
00:12:18,914 --> 00:12:22,074
Now, to solve the late feedback problem, something we've talked about

194
00:12:22,112 --> 00:12:25,686
quite a lot is about empowering known technical users

195
00:12:25,718 --> 00:12:29,306
and shift left on their contribution. And I

196
00:12:29,328 --> 00:12:32,710
usually like to do that by creating a directory where these people can get links

197
00:12:32,790 --> 00:12:36,206
to all these environments and access them at any time. Usually the

198
00:12:36,228 --> 00:12:39,866
pull request is the best place to have that. So tools like Roselle,

199
00:12:39,898 --> 00:12:43,226
if you're using xjs and ergomake itself, can spin

200
00:12:43,258 --> 00:12:46,946
those up for you automatically. So now all of a sudden, instead of those people

201
00:12:46,968 --> 00:12:50,366
having to go to staging, validating things there, and not knowing even what's

202
00:12:50,398 --> 00:12:54,334
there, these people, they can review code functionally

203
00:12:54,462 --> 00:12:58,054
by clicking a link on a pull request. And just remember, you may

204
00:12:58,092 --> 00:13:02,134
want to put some pages of these previews behind some

205
00:13:02,172 --> 00:13:06,338
type of auth to avoid, for example, features being revealed

206
00:13:06,514 --> 00:13:09,340
to the Internet or crawlers indexing them.

207
00:13:10,190 --> 00:13:13,626
Finally, another very important thing is to have some kind of

208
00:13:13,648 --> 00:13:17,334
observability set up, so that when product people or designers

209
00:13:17,382 --> 00:13:20,986
or QA is doing some tests, you get alerts and you

210
00:13:21,008 --> 00:13:24,186
see that something went wrong with metrics or somehow.

211
00:13:24,298 --> 00:13:27,934
So if you just deploy a promptio server or some kind of alert manager which

212
00:13:28,052 --> 00:13:31,198
sends messages to slack, that's ideal, because many times,

213
00:13:31,364 --> 00:13:34,058
even though things will work okay for these folks,

214
00:13:34,234 --> 00:13:38,530
you will not see an error thrown in the backend, which may be something critical.

215
00:13:39,670 --> 00:13:42,754
Synthetics and e three tasks are also a great thing to have running against these

216
00:13:42,792 --> 00:13:45,774
environments, because if you have production,

217
00:13:45,822 --> 00:13:48,318
fine, you're going to catch errors, you're going to get alerts when things got wrong

218
00:13:48,344 --> 00:13:52,374
because there's people using it. But for pre production there's usually

219
00:13:52,412 --> 00:13:56,274
got as much load, so you can kind of preproduction these workflows with synthetics tests

220
00:13:56,322 --> 00:14:01,030
running against these environments all the time. And you can also save production

221
00:14:01,190 --> 00:14:04,614
from having to be the target of etest.

222
00:14:04,662 --> 00:14:08,346
So you can run ET test separately isolated against each of

223
00:14:08,368 --> 00:14:12,574
these environments. And it's also important to say that

224
00:14:12,612 --> 00:14:16,218
you won't be able to catch all possible problems with these environments.

225
00:14:16,394 --> 00:14:19,930
Their main utility is to shift left on as many stages

226
00:14:20,010 --> 00:14:23,562
of the development lifecycle as possible. Therefore,

227
00:14:23,626 --> 00:14:26,990
you should really focus on having a reliable production environment

228
00:14:27,150 --> 00:14:31,198
and have feature flags to avoid holding things up and got deploying

229
00:14:31,374 --> 00:14:34,858
if something cannot be deployed. So you just switch a feature flag

230
00:14:34,974 --> 00:14:38,214
on or off, and then you can continue deploying even if

231
00:14:38,252 --> 00:14:41,414
something escapes this review process.

232
00:14:41,532 --> 00:14:44,070
This shift left validations.

233
00:14:44,810 --> 00:14:48,022
So to summarize, use on demand environments,

234
00:14:48,086 --> 00:14:51,446
not just one. Empower developers to spin up environments,

235
00:14:51,638 --> 00:14:54,070
manage resources on a team basis,

236
00:14:54,230 --> 00:14:57,558
use fresh copies of data for staging environments,

237
00:14:57,734 --> 00:15:01,674
make preproduction environments observable, run periodic tests against

238
00:15:01,712 --> 00:15:05,202
those environments, have different profiles for preproduction

239
00:15:05,286 --> 00:15:08,958
like lightweight and heavyweight, and do not allow

240
00:15:09,124 --> 00:15:13,102
preproduction to become a bottleneck. So for Q

241
00:15:13,156 --> 00:15:16,686
A, you can either send me an email at Lucas Costa at

242
00:15:16,788 --> 00:15:20,558
got ergomake.com or you can go to Ergomake Dev and you

243
00:15:20,564 --> 00:15:24,126
will find some links there where you can talk to us on

244
00:15:24,148 --> 00:15:28,630
Twitter. I'm at the Wizard Lucas. You can also send me a message there,

245
00:15:28,780 --> 00:15:31,346
right? Thank you very much. It's been a pleasure.

