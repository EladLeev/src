1
00:00:26,930 --> 00:00:30,754
I'm Tommy Kay, head micro frontends department at Leaky and Frontend

2
00:00:30,802 --> 00:00:34,518
house and podcaster known from micro frontend house series on

3
00:00:34,524 --> 00:00:38,322
micro frontend house channels. Im going to take you into the journey

4
00:00:38,386 --> 00:00:41,526
through the world of the micro frontends. Let's start with

5
00:00:41,548 --> 00:00:45,666
the agenda. We are going to speak about software architecture.

6
00:00:45,778 --> 00:00:49,618
Monolith approach, distributed approaches, micro frontends.

7
00:00:49,714 --> 00:00:53,278
What? Why my winit. And at the end, we will quickly

8
00:00:53,364 --> 00:00:56,174
summarize everything what I was talking about.

9
00:00:56,292 --> 00:00:59,722
Are you ready? So let's do this. The software

10
00:00:59,786 --> 00:01:04,318
architecture is about the whole system. Fundamental organization,

11
00:01:04,494 --> 00:01:07,730
which includes components, relations between them,

12
00:01:07,800 --> 00:01:11,394
infrastructure, environment and set of rules and

13
00:01:11,432 --> 00:01:15,134
design patterns used to manage the system. Right.

14
00:01:15,272 --> 00:01:19,014
It gives the directions to the development teams of how to

15
00:01:19,052 --> 00:01:23,062
build, scale and maintain the whole system and

16
00:01:23,116 --> 00:01:25,750
make it meet the business expectations.

17
00:01:26,250 --> 00:01:29,834
Such set of the principles and tooling makes the

18
00:01:29,872 --> 00:01:33,338
required work more predictable and efficient as

19
00:01:33,424 --> 00:01:37,466
all of the team members know. Why, what and how?

20
00:01:37,568 --> 00:01:40,954
One of the examples from the software architecture area is

21
00:01:40,992 --> 00:01:45,546
a wellknown monolith approach. It issues that all of the requirements,

22
00:01:45,658 --> 00:01:49,610
solutions, functionalities and data are encapsulated

23
00:01:49,690 --> 00:01:53,442
under a single application. I believe most of us worked

24
00:01:53,496 --> 00:01:57,966
with applications like that. And good example are rabionrails

25
00:01:57,998 --> 00:02:01,774
apps. Okay, so basically rabionrails app encapsulate

26
00:02:01,822 --> 00:02:05,018
the frontend layer, the backend layer, the database layer,

27
00:02:05,134 --> 00:02:08,642
and it's everything closed under the single solution,

28
00:02:08,706 --> 00:02:12,306
right? Okay, cool. So let's discuss the pros

29
00:02:12,338 --> 00:02:16,502
and cons of the monolith approach. It encapsulates all the problems

30
00:02:16,636 --> 00:02:20,294
and solution under the single application. On complexity

31
00:02:20,342 --> 00:02:23,562
growth, it's hard to scale. Security of data

32
00:02:23,616 --> 00:02:26,826
storing and communication is much easier. It has

33
00:02:26,848 --> 00:02:30,534
a reduced palette of used technologies, lack of modularity

34
00:02:30,662 --> 00:02:34,462
and easy to start development. The other type of

35
00:02:34,516 --> 00:02:37,898
the architecture area is a distributed approach.

36
00:02:37,994 --> 00:02:41,614
Let's take a closer look on that. Okay, so let's assume we

37
00:02:41,652 --> 00:02:45,186
have a couple of different functionalities and integrations to

38
00:02:45,208 --> 00:02:47,922
cover. We can build a single backend application,

39
00:02:48,056 --> 00:02:51,970
the monolith one, or we can split the monolith into

40
00:02:52,040 --> 00:02:55,574
separate microservices. Each of the microservices will be

41
00:02:55,612 --> 00:02:59,634
responsible for the particular functionality like payments,

42
00:02:59,682 --> 00:03:03,238
authorization, payment, treatment process and

43
00:03:03,324 --> 00:03:06,514
stuff like that. To make the communication easier,

44
00:03:06,642 --> 00:03:10,230
we can connect all the dots under the communication hub.

45
00:03:10,310 --> 00:03:14,294
Let's call it gateway. The good example is Graphql

46
00:03:14,342 --> 00:03:17,574
federation that is mostly based off the distributed

47
00:03:17,622 --> 00:03:21,254
approach. The process conf 42 distributed architecture

48
00:03:21,302 --> 00:03:24,554
is high performance under a big traffic and it's

49
00:03:24,602 --> 00:03:28,206
really easy to scale. Increased response time depends on the

50
00:03:28,228 --> 00:03:31,802
number of the nodes to process the request. High complexity

51
00:03:31,866 --> 00:03:35,394
at the beginning of implementation. White palette of

52
00:03:35,432 --> 00:03:39,374
available technologies, hard to debug and analyze

53
00:03:39,502 --> 00:03:42,898
and hard to pros security for the whole system.

54
00:03:43,064 --> 00:03:46,718
Does it make sense? So let's move forward. Now it's

55
00:03:46,734 --> 00:03:49,870
the time to introduce the micro frontends.

56
00:03:50,030 --> 00:03:52,398
What are the micro frontend house?

57
00:03:52,504 --> 00:03:56,402
Mostly they are the adaptation of the distributed architecture

58
00:03:56,466 --> 00:03:59,734
for the web applications. Right? So the assumption

59
00:03:59,782 --> 00:04:03,366
is still the same. Create the small micro apps that resolve

60
00:04:03,398 --> 00:04:07,318
the particular problem, expose each of the solutions

61
00:04:07,414 --> 00:04:10,574
and use them wherever needed. One of the main

62
00:04:10,612 --> 00:04:14,974
wins is the really great modularisation and technology

63
00:04:15,092 --> 00:04:18,682
agnostic attempt as each of the module

64
00:04:18,746 --> 00:04:23,134
can be realized with the different technology and

65
00:04:23,332 --> 00:04:26,830
with the different teams. As we can see on the diagram,

66
00:04:26,990 --> 00:04:30,286
instead of creating the monolith app that would include

67
00:04:30,318 --> 00:04:33,714
all of the modules within its source, we did create a

68
00:04:33,752 --> 00:04:37,110
separately micro apps like schedule, video, call,

69
00:04:37,260 --> 00:04:39,746
user profile and notifications.

70
00:04:39,938 --> 00:04:43,222
Cool. So those apps are used inside

71
00:04:43,356 --> 00:04:46,518
the shell app and the shell app is basically

72
00:04:46,684 --> 00:04:50,646
our API gateway that I have presented in the distributed

73
00:04:50,678 --> 00:04:54,538
approach definition. Right? Cool. So the shell app connect

74
00:04:54,624 --> 00:04:58,038
all of our micro apps and expose the single entry

75
00:04:58,134 --> 00:05:01,654
two the end user. From the user perspective it will be just

76
00:05:01,712 --> 00:05:05,006
the single app. But under the hood there would be

77
00:05:05,028 --> 00:05:08,606
the combination of smaller blocks that are composed to

78
00:05:08,628 --> 00:05:12,410
get the main app. Each of the module can integrate with

79
00:05:12,500 --> 00:05:16,498
the microservices directly or indirectly, or with some single

80
00:05:16,584 --> 00:05:20,242
API or with any data source, any data

81
00:05:20,296 --> 00:05:23,762
provider we want to include inside our

82
00:05:23,816 --> 00:05:27,854
architecture, inside our platform. The shell app also can integrate

83
00:05:27,902 --> 00:05:31,126
with the data providers and then expose this data to

84
00:05:31,148 --> 00:05:35,554
the micro apps. Depends on the case. Let's take a look at more advanced

85
00:05:35,602 --> 00:05:39,446
usage. One of the options is to choose the distributed approach on

86
00:05:39,468 --> 00:05:42,378
both front end and backend. And yeah,

87
00:05:42,464 --> 00:05:45,594
you're probably right, it might look complex and certainly

88
00:05:45,712 --> 00:05:49,066
it is. It fits well when there are a lot of

89
00:05:49,088 --> 00:05:51,722
different functionalities, modules, views,

90
00:05:51,786 --> 00:05:55,486
widgets and business logic to be covered and

91
00:05:55,588 --> 00:05:59,534
scalability is one of the key requirements. We can

92
00:05:59,572 --> 00:06:03,054
easily add or remove modules and compose new

93
00:06:03,092 --> 00:06:06,638
apps within existing modules. Or add new modules.

94
00:06:06,654 --> 00:06:09,922
Two. Compose the new apps. Yeah, there are plenty of use

95
00:06:09,976 --> 00:06:14,146
cases and there are plenty of things that we can do with

96
00:06:14,248 --> 00:06:17,618
the microapps approach. What are the pros and cons

97
00:06:17,704 --> 00:06:21,566
for the micro frontends architecture? Each module is a separate self

98
00:06:21,608 --> 00:06:25,318
contained app with on ecosystem. The key is to provide

99
00:06:25,404 --> 00:06:29,290
the good communication between apps. Modularization makes

100
00:06:29,360 --> 00:06:33,590
it easy to scale. Shell apps is responsible for integrating

101
00:06:33,670 --> 00:06:37,302
all the apps. Each micro frontend has own API

102
00:06:37,366 --> 00:06:41,126
integration. Independent development teams can collaborate

103
00:06:41,158 --> 00:06:44,346
on the front end app easily performance optimization

104
00:06:44,458 --> 00:06:47,466
opportunities. As we saw on the diagram,

105
00:06:47,578 --> 00:06:51,178
creating the micro frontends architecture is complex

106
00:06:51,274 --> 00:06:54,490
and it may be hard to set up and start implementation.

107
00:06:54,650 --> 00:06:57,726
We can use one of the popular micro frontends frameworks

108
00:06:57,758 --> 00:07:01,838
like big single spa webpack five and module federation

109
00:07:01,934 --> 00:07:05,086
open components, et cetera, et cetera. There are a bunch

110
00:07:05,118 --> 00:07:08,990
of different tools that covers the micro frontends architecture

111
00:07:09,070 --> 00:07:12,390
and the micro frontends boilerplate. Two,

112
00:07:12,540 --> 00:07:15,218
let us start implementation much faster.

113
00:07:15,314 --> 00:07:18,906
Personally I did use bit and it makes the

114
00:07:18,928 --> 00:07:22,106
whole job perfect and I recommend to take a look on

115
00:07:22,128 --> 00:07:25,546
their documentation and also take a

116
00:07:25,568 --> 00:07:29,018
look into their tutorials like they explain everything,

117
00:07:29,184 --> 00:07:32,942
everything how to deal with the micro front end within your

118
00:07:32,996 --> 00:07:36,506
favorite technologies. Mostly I was working with the react

119
00:07:36,618 --> 00:07:40,318
and this tool makes the whole job

120
00:07:40,484 --> 00:07:43,662
and it was really really easy for me to implement a different

121
00:07:43,716 --> 00:07:47,538
app and connect them under the shell app. So yeah, I highly recommend

122
00:07:47,624 --> 00:07:51,794
to take a look and enjoy. But yeah,

123
00:07:51,832 --> 00:07:55,298
let's move forward now, it's time two, answer the question why

124
00:07:55,384 --> 00:07:59,314
we might need that. The huge plus is that the separate development

125
00:07:59,362 --> 00:08:02,518
teams can work on different areas of our platform,

126
00:08:02,684 --> 00:08:06,326
each specialized in a different technology. For the company,

127
00:08:06,428 --> 00:08:10,566
it means that the project teams can be composed of the mixed

128
00:08:10,598 --> 00:08:13,930
skills developers and help to better

129
00:08:14,000 --> 00:08:17,930
allocate the resources and employees. So for example,

130
00:08:18,080 --> 00:08:21,746
one of the team that specializes in the react can work on the schedule

131
00:08:21,798 --> 00:08:25,102
app that is realized with the react. The angular team

132
00:08:25,236 --> 00:08:29,422
can focus on the video call app and someone who is

133
00:08:29,476 --> 00:08:32,846
perfect in vanilla js can work on the Shell app with

134
00:08:32,868 --> 00:08:36,482
just compose all of our apps right? Another use case

135
00:08:36,536 --> 00:08:39,986
where the micro front end might be helpful is where there is

136
00:08:40,008 --> 00:08:43,300
a need to migrate from one technology to the another.

137
00:08:43,750 --> 00:08:47,206
Instead of doing a revolution and rewrite the apps from

138
00:08:47,228 --> 00:08:50,754
the scratch, the development teams can adopt the distributed

139
00:08:50,802 --> 00:08:54,290
approach and switch for example from angular

140
00:08:54,450 --> 00:08:58,074
to react step by step. So following the

141
00:08:58,112 --> 00:09:01,642
rule, make an evolution, not a revolution. It makes

142
00:09:01,696 --> 00:09:04,886
the whole migration easier and more predictable.

143
00:09:04,998 --> 00:09:08,634
And what's more important, teams can experiment with the product

144
00:09:08,752 --> 00:09:12,134
by exploring different technologies and solutions

145
00:09:12,182 --> 00:09:16,126
and pick the best one without rewriting the whole app, which as

146
00:09:16,148 --> 00:09:19,806
an outcome saves time and money. One of the benefits, thanks to

147
00:09:19,828 --> 00:09:23,034
the micro frontends'architecture is that we can easily

148
00:09:23,082 --> 00:09:26,814
compose the new apps by reuse of the currently existing

149
00:09:26,862 --> 00:09:30,514
modules or adding a new one. The same video call app

150
00:09:30,552 --> 00:09:33,714
can be reused in the patient or doctor app or

151
00:09:33,752 --> 00:09:36,934
in ambulance driver app, but the key is to

152
00:09:36,972 --> 00:09:40,614
expose the right communication interface to be able

153
00:09:40,652 --> 00:09:44,694
to inject the data and expose other handrails to lets

154
00:09:44,732 --> 00:09:48,002
us integrate with this micro app much easier.

155
00:09:48,146 --> 00:09:51,530
Now, let's assume that your client knows that he wants to build

156
00:09:51,600 --> 00:09:55,450
three different apps, but based on the similar branding and similar

157
00:09:55,520 --> 00:09:59,574
UI, right? So instead of creating the presentation layer

158
00:09:59,622 --> 00:10:03,354
for each of the apps, we can extract the reusable blocks

159
00:10:03,402 --> 00:10:07,102
and create a reusable package that can be utilized within

160
00:10:07,156 --> 00:10:10,302
our apps. Okay, we can add storybook or

161
00:10:10,356 --> 00:10:14,634
any other tool that you like to use to document our components library.

162
00:10:14,762 --> 00:10:18,802
And as an outcome, we receive a good foundation for something

163
00:10:18,856 --> 00:10:22,382
that's called design system. With the micro frontend,

164
00:10:22,446 --> 00:10:26,158
House can easily put all things into the order and manage the

165
00:10:26,184 --> 00:10:30,070
whole infrastructure in cleaner and more understandable way.

166
00:10:30,220 --> 00:10:33,762
We discussed the theory for the micro frontend. House discussed

167
00:10:33,826 --> 00:10:37,042
some examples, but as you can see in the presentation,

168
00:10:37,106 --> 00:10:40,854
some big players also trust in the micro frontends architecture.

169
00:10:40,982 --> 00:10:44,406
So those players are like Zalando, Microsoft, Leroamerlem,

170
00:10:44,438 --> 00:10:48,346
Starbucks. And I believe it's also worth for you to check it

171
00:10:48,368 --> 00:10:51,910
on your own. Choose the technology with the surgical precision.

172
00:10:51,990 --> 00:10:55,962
With the micro frontends architecture, you can easily build scalable

173
00:10:56,026 --> 00:10:59,290
apps that are composed from the independent modules.

174
00:10:59,370 --> 00:11:03,054
Pick the technology that responds to the business problem and gives

175
00:11:03,092 --> 00:11:06,446
the most optimized result. So that's it.

176
00:11:06,548 --> 00:11:09,886
Thank you for your attention. I hope that you have enjoyed the

177
00:11:09,908 --> 00:11:13,374
whole show and the knowledge I have shared with you

178
00:11:13,492 --> 00:11:16,934
will be useful and and see you next time.

179
00:11:17,052 --> 00:11:17,330
Bye.

