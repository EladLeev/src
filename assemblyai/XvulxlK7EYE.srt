1
00:00:23,130 --> 00:00:25,798
Hi everyone. As you all know,

2
00:00:25,884 --> 00:00:29,378
SQL is everywhere, from extracting niche

3
00:00:29,394 --> 00:00:33,094
information, to analyzing cell information to

4
00:00:33,132 --> 00:00:37,094
analyzing the company finance. And today we are

5
00:00:37,132 --> 00:00:40,866
here to explore fascinating aspects of SQL

6
00:00:40,898 --> 00:00:44,502
queries that you may have not been aware of,

7
00:00:44,636 --> 00:00:48,342
the ability to deposit them like any other

8
00:00:48,396 --> 00:00:51,742
code, SQL queries are prone to errors and

9
00:00:51,796 --> 00:00:55,534
bugs, and while fixing syntax error like

10
00:00:55,572 --> 00:00:57,850
that query may seem trivial,

11
00:00:58,010 --> 00:01:02,094
identifying and resolving other issues queries may

12
00:01:02,132 --> 00:01:05,634
be quite challenging, as things are not

13
00:01:05,672 --> 00:01:09,102
always as they seem, and silent

14
00:01:09,166 --> 00:01:13,186
errors are lurking beneath the tough, waiting to

15
00:01:13,208 --> 00:01:17,458
catch up off guard. These silent errors can particularly

16
00:01:17,634 --> 00:01:21,670
be elusive when they go undetected until later

17
00:01:21,740 --> 00:01:25,490
stages of the pipeline, making it challenging

18
00:01:25,570 --> 00:01:29,306
to spot discrepancies in those dashboard or the end

19
00:01:29,328 --> 00:01:32,502
of those funnel. In the realm of regular software

20
00:01:32,566 --> 00:01:36,666
developer, bugs can be uncovered through various means like

21
00:01:36,768 --> 00:01:40,794
debugging, testing, monitoring and even user feedback.

22
00:01:40,922 --> 00:01:44,174
However, in this talk our focus will be on

23
00:01:44,212 --> 00:01:47,402
SQL and on debugging specifically,

24
00:01:47,546 --> 00:01:51,434
while we will speak about monitoring and how debugging

25
00:01:51,482 --> 00:01:54,914
and monitoring can be relatively similar

26
00:01:55,032 --> 00:01:58,354
and achieved in similar ways. So there

27
00:01:58,392 --> 00:02:02,130
are several things or kind of issues that can happen

28
00:02:02,200 --> 00:02:05,922
in SQL query. We can have missing records,

29
00:02:05,986 --> 00:02:09,318
too many records, duplication, null business

30
00:02:09,404 --> 00:02:12,902
logic, computation that is wrong and many,

31
00:02:12,956 --> 00:02:16,306
many more. And identifying flows in SQL

32
00:02:16,338 --> 00:02:19,574
queries is tough. It requires skills

33
00:02:19,622 --> 00:02:23,626
and experience, and the database, or at least most of

34
00:02:23,648 --> 00:02:27,062
them, does not provide a debugger.

35
00:02:27,206 --> 00:02:30,380
It does provide, however, an execution plan.

36
00:02:30,930 --> 00:02:34,494
And with that execution plan we

37
00:02:34,532 --> 00:02:38,654
can understand what's happening beneath the

38
00:02:38,692 --> 00:02:42,682
surface. And the reason databases

39
00:02:42,826 --> 00:02:46,894
doesn't provide debugging capabilities is because

40
00:02:47,012 --> 00:02:51,294
it was a lot of data and getting there will

41
00:02:51,332 --> 00:02:55,426
be kind of overwhelming and can be very moments

42
00:02:55,458 --> 00:02:59,480
are impacted. But those that do

43
00:02:59,930 --> 00:03:03,286
that, they do it by creating a

44
00:03:03,308 --> 00:03:08,870
materialized sub expression of a specific relation

45
00:03:08,950 --> 00:03:13,030
or part of the relation. So buzzword

46
00:03:13,110 --> 00:03:17,110
alert using execution plans from above

47
00:03:17,190 --> 00:03:21,454
will allow us to debug those system tough tracing it

48
00:03:21,492 --> 00:03:25,550
will allow us to understand the behavior of the database inside

49
00:03:25,700 --> 00:03:30,030
and by that identifying buttons and bugs.

50
00:03:30,450 --> 00:03:33,982
So we should democratize execution

51
00:03:34,046 --> 00:03:38,260
plan. So how does it actually work?

52
00:03:38,870 --> 00:03:42,642
We got SQL query that we want to execute and

53
00:03:42,696 --> 00:03:46,402
it goes through a journey from parsing to the execution

54
00:03:46,466 --> 00:03:49,766
itself. In parsing we create structure and

55
00:03:49,788 --> 00:03:53,254
do some basic validation. Then in the analysis we

56
00:03:53,292 --> 00:03:56,258
include some semantic validation.

57
00:03:56,434 --> 00:03:59,834
Then we rewrite the tree to

58
00:03:59,872 --> 00:04:02,010
be a bit more optimized.

59
00:04:02,990 --> 00:04:07,062
And the two last steps are adding

60
00:04:07,206 --> 00:04:10,430
really important information. We plan what

61
00:04:10,500 --> 00:04:14,734
execution strategy we want to select and it got many,

62
00:04:14,772 --> 00:04:18,814
many statistics and then we execute it and we add the

63
00:04:18,852 --> 00:04:22,678
statistics from real time. So let's delve

64
00:04:22,794 --> 00:04:26,514
on explain, which gives us the

65
00:04:26,552 --> 00:04:30,210
execution plan. So explain without nothing,

66
00:04:30,360 --> 00:04:33,966
give us what the database

67
00:04:34,078 --> 00:04:37,442
wanted or planned to do. While if we add,

68
00:04:37,496 --> 00:04:41,050
explain, analyze, we get what the database planned

69
00:04:41,070 --> 00:04:44,326
to do and what actually happened. And you

70
00:04:44,348 --> 00:04:48,630
can see here an example of execution

71
00:04:48,710 --> 00:04:52,330
plan in postgres specifically, but it's quite similar across

72
00:04:52,400 --> 00:04:55,962
databases. And you can see that we have explained and then

73
00:04:56,016 --> 00:04:59,914
the options and the query itself. So one option

74
00:04:59,952 --> 00:05:03,294
is those analyze that we discussed about. We can tell

75
00:05:03,332 --> 00:05:07,150
it if we want format like JSON XML or stuff like that.

76
00:05:07,300 --> 00:05:11,182
And we got many, many options

77
00:05:11,316 --> 00:05:14,898
that add information, for example, adding information

78
00:05:15,064 --> 00:05:19,650
about the cost or the buffers.

79
00:05:20,150 --> 00:05:24,418
And a pro tip for me to you go over execution plan

80
00:05:24,504 --> 00:05:28,354
at least once because it's similar across databases

81
00:05:28,482 --> 00:05:32,390
and it will help you probably in your career.

82
00:05:32,730 --> 00:05:36,440
So let's explain it.

83
00:05:37,450 --> 00:05:40,794
Let's say we have a query that counts the number

84
00:05:40,832 --> 00:05:43,766
of users that have a Twitter handle.

85
00:05:43,958 --> 00:05:47,754
So we run explain, analyze on top of that and

86
00:05:47,792 --> 00:05:51,214
we get that blob of yarn. So we can

87
00:05:51,252 --> 00:05:54,542
see that it's pretty cryptid at first

88
00:05:54,676 --> 00:05:58,734
and it's even longer than our queries. So if

89
00:05:58,772 --> 00:06:02,966
we have like a big table, it can be overwhelming.

90
00:06:03,098 --> 00:06:06,386
But there are numbers here. So probably we

91
00:06:06,408 --> 00:06:08,740
can understand some of the things.

92
00:06:09,430 --> 00:06:13,774
So we can see here the time that the query

93
00:06:13,902 --> 00:06:17,214
took to execute and the time that it could be

94
00:06:17,272 --> 00:06:19,750
took to plan that query.

95
00:06:20,410 --> 00:06:24,120
And if we go to the main

96
00:06:24,730 --> 00:06:28,402
stuff, we can see that it's structured as an inverse

97
00:06:28,466 --> 00:06:31,430
trick. And we got many, many operations.

98
00:06:31,590 --> 00:06:34,742
We got operations that related to scan,

99
00:06:34,886 --> 00:06:38,922
which is reading at those table. We got operations that

100
00:06:38,976 --> 00:06:42,426
relate to join and we got operations that relate

101
00:06:42,458 --> 00:06:45,902
to aggregation. And each of those

102
00:06:45,956 --> 00:06:49,662
node hold the information that is

103
00:06:49,716 --> 00:06:53,202
relative to eight. So we got the information

104
00:06:53,336 --> 00:06:56,590
on aggregation and on the sequential can

105
00:06:56,670 --> 00:06:59,954
that include the field? And you

106
00:06:59,992 --> 00:07:03,426
don't need to remember all the things that I teach you

107
00:07:03,448 --> 00:07:07,286
now. You can cheat on your own work and just

108
00:07:07,468 --> 00:07:11,062
look for the weird numbers and just ask

109
00:07:11,116 --> 00:07:15,400
Google, ask JGPt, they know even better than me,

110
00:07:15,850 --> 00:07:20,586
but you need to know what to feed them. And I

111
00:07:20,608 --> 00:07:23,754
think it's kind of the easiest way to

112
00:07:23,792 --> 00:07:27,274
do it. And after you identify the issues,

113
00:07:27,472 --> 00:07:31,338
they can even help you find an appropriate

114
00:07:31,434 --> 00:07:35,600
solution. But let me try to explain it anyway.

115
00:07:36,370 --> 00:07:40,586
So if we look on the aggregate node,

116
00:07:40,698 --> 00:07:43,902
we can see several columns.

117
00:07:44,046 --> 00:07:48,162
So we got the planned rows, like the estimate number

118
00:07:48,296 --> 00:07:51,806
of rows that will be produced by this node,

119
00:07:51,918 --> 00:07:55,960
the aggregate. So in this example it's one.

120
00:07:56,410 --> 00:07:59,910
And we got the actual rows, which is the number

121
00:07:59,980 --> 00:08:03,842
that was actually produced. There is an asterisk

122
00:08:03,906 --> 00:08:07,282
regarding the loop that we will discuss bit later.

123
00:08:07,436 --> 00:08:11,222
And we got those plan with it, which means the average

124
00:08:11,286 --> 00:08:15,002
size of a row. And here

125
00:08:15,056 --> 00:08:17,610
we can see that it's eight bytes.

126
00:08:18,350 --> 00:08:21,802
And next there are stuff that relates to the time,

127
00:08:21,856 --> 00:08:25,754
to the execution time and the plan time. So startup

128
00:08:25,802 --> 00:08:29,342
cost and total cost is what the planner thinks that will

129
00:08:29,396 --> 00:08:33,746
happen. It's arbitrary units, and we got the actual

130
00:08:33,928 --> 00:08:38,850
startup time and the actual total time, which actual

131
00:08:38,920 --> 00:08:42,386
total time tells us the time to return all the

132
00:08:42,408 --> 00:08:46,178
rows in milliseconds of this specific node.

133
00:08:46,354 --> 00:08:50,198
And again, it's per loop and

134
00:08:50,284 --> 00:08:54,230
we got to the loop, the thing that I waited

135
00:08:54,650 --> 00:08:58,422
to not discuss about. So loop is

136
00:08:58,556 --> 00:09:02,214
kind of weird, basically takes an entire node

137
00:09:02,342 --> 00:09:05,722
and the numbers of actual total time and

138
00:09:05,776 --> 00:09:09,334
the actual total rows is multiplied

139
00:09:09,382 --> 00:09:12,794
by the number of loops that is executed.

140
00:09:12,922 --> 00:09:16,830
And they do that to make it comparable

141
00:09:17,970 --> 00:09:21,680
in terms of the cost and the actual execution plan.

142
00:09:23,510 --> 00:09:27,102
So you need to know this. And when you calculate,

143
00:09:27,166 --> 00:09:30,578
take into consideration that kind of stuff, which is a

144
00:09:30,584 --> 00:09:33,778
bit annoying. And to be honest,

145
00:09:33,864 --> 00:09:38,246
every database has its own wildcat. Some was

146
00:09:38,428 --> 00:09:41,574
different segments, but it is the same.

147
00:09:41,692 --> 00:09:44,722
So how can we use this technique

148
00:09:44,786 --> 00:09:48,602
to find the issues? So I will give you a silly example like

149
00:09:48,656 --> 00:09:52,234
empty result, and you can consider it's those

150
00:09:52,272 --> 00:09:56,570
same if you have like ten joins and

151
00:09:56,640 --> 00:10:01,050
just one, and zero returns records

152
00:10:01,130 --> 00:10:03,854
and you dont know where it comes from.

153
00:10:04,052 --> 00:10:08,170
So we can see here the same query I picked

154
00:10:08,250 --> 00:10:11,294
specific users that have.

155
00:10:11,412 --> 00:10:15,154
Donald Trump was the ender. And we can

156
00:10:15,192 --> 00:10:18,670
see that the return number of rows

157
00:10:18,830 --> 00:10:23,474
that we got here is zero. And it

158
00:10:23,512 --> 00:10:27,498
happened both on the aggregate and on the sequence

159
00:10:27,534 --> 00:10:31,586
scan, which means that it origined

160
00:10:31,618 --> 00:10:34,838
from a wrong filter. You can see here the numbers

161
00:10:34,924 --> 00:10:39,050
of rows that were filtered. And after we did our

162
00:10:39,120 --> 00:10:42,774
investigation, we understood that the Twitter

163
00:10:42,822 --> 00:10:46,442
handle is a bit different. So we went back,

164
00:10:46,576 --> 00:10:49,740
we fixed it and we found the issues.

165
00:10:50,210 --> 00:10:53,482
So we can use these kind of techniques

166
00:10:53,626 --> 00:10:57,418
to help us in case a problem exists.

167
00:10:57,594 --> 00:11:01,246
And then it find us a productivity tool.

168
00:11:01,348 --> 00:11:04,594
And in cases that we don't want or we

169
00:11:04,632 --> 00:11:07,970
don't know if a problem exists, it may protect us

170
00:11:08,040 --> 00:11:11,474
and give us more knowledge about whether an

171
00:11:11,512 --> 00:11:14,910
issue exists or not. But as you saw,

172
00:11:15,000 --> 00:11:18,550
it's a bit like knowing specifically where

173
00:11:18,620 --> 00:11:22,742
to look for an issue and where not. And on real

174
00:11:22,796 --> 00:11:26,310
execution plan it's much much bigger,

175
00:11:26,890 --> 00:11:29,580
which is not that nice to be honest.

176
00:11:29,950 --> 00:11:33,638
So aren't there any easier

177
00:11:33,734 --> 00:11:37,626
ways? So I know that I like

178
00:11:37,728 --> 00:11:41,822
UI and I want people to tell me exactly

179
00:11:41,956 --> 00:11:45,806
where a particular issue was originated. And I

180
00:11:45,828 --> 00:11:49,386
want even ints to help me to rewrite

181
00:11:49,418 --> 00:11:53,380
those stuff. Maybe now with JPT it's a bit less important.

182
00:11:53,750 --> 00:11:57,454
And we want to know that my query

183
00:11:57,502 --> 00:12:01,282
now that is great. Even if I push it to

184
00:12:01,336 --> 00:12:05,006
production and data changes, I know how

185
00:12:05,048 --> 00:12:08,322
to handle it a bit later. And unfortunately,

186
00:12:08,466 --> 00:12:11,654
most of current tools focus

187
00:12:11,772 --> 00:12:14,914
on the performance part, which is critical.

188
00:12:15,042 --> 00:12:18,378
But we want our query to be actually correct.

189
00:12:18,544 --> 00:12:22,170
Like you got finance questions which you over

190
00:12:22,240 --> 00:12:26,474
test, so they are probably okay. But even on the sales and

191
00:12:26,512 --> 00:12:30,134
marketing and the rest of the part is kind

192
00:12:30,192 --> 00:12:33,950
of buggy. And you try to find

193
00:12:34,100 --> 00:12:37,598
and fix issues in the wrong way. Like if

194
00:12:37,604 --> 00:12:41,246
you find duplications, you might add a distinct at the

195
00:12:41,268 --> 00:12:45,534
end of the funnel. But then other consumers

196
00:12:45,582 --> 00:12:48,580
in the middle will have problems as well.

197
00:12:49,750 --> 00:12:52,900
So what can we do?

198
00:12:53,830 --> 00:12:57,746
So I wrote a tool that is called queryflow,

199
00:12:57,778 --> 00:13:01,814
which is not that mature and not that

200
00:13:01,932 --> 00:13:05,446
ready to be used. But I want to show you how easy

201
00:13:05,548 --> 00:13:08,950
it can be and how we should thrive

202
00:13:09,030 --> 00:13:13,082
to have things around. So let's say I have

203
00:13:13,136 --> 00:13:17,382
a query that reads from titles table

204
00:13:17,526 --> 00:13:21,818
and then do join to cruise and then another

205
00:13:21,904 --> 00:13:25,530
join to people. And I want to get the movies

206
00:13:25,610 --> 00:13:30,062
that Mr. Bing is

207
00:13:30,116 --> 00:13:33,722
playing. So obviously I have

208
00:13:33,796 --> 00:13:38,180
a mistake and this will return zero

209
00:13:39,430 --> 00:13:43,022
entry points. So instead of looking on a ujson,

210
00:13:43,166 --> 00:13:46,550
I can look at those specific visualization,

211
00:13:46,970 --> 00:13:51,298
which tells me where the issues originate.

212
00:13:51,394 --> 00:13:55,400
So I can visualize any number that we saw before

213
00:13:56,010 --> 00:13:59,334
as a number, and then according

214
00:13:59,382 --> 00:14:02,826
to how big it is, then the length of the

215
00:14:02,848 --> 00:14:06,182
operation is big. So we can see that reading

216
00:14:06,246 --> 00:14:11,226
the coup is like big. There is a lot of rows,

217
00:14:11,338 --> 00:14:14,778
people is quite big and titles is smaller.

218
00:14:14,874 --> 00:14:19,134
And after we do the filter, we can see that not only

219
00:14:19,332 --> 00:14:24,254
it's quite small, it's colored

220
00:14:24,302 --> 00:14:28,734
in red. And as a very opinionated

221
00:14:28,862 --> 00:14:32,226
person, I like to add visualization and

222
00:14:32,248 --> 00:14:35,830
stuff like that. So every color has its meaning.

223
00:14:36,570 --> 00:14:41,554
So here, let's say if you have ten joints,

224
00:14:41,602 --> 00:14:44,982
you can see exactly where the table where

225
00:14:45,036 --> 00:14:49,574
it was originated. And you can also, instead of visualizing,

226
00:14:49,702 --> 00:14:53,702
you can use the intermediate representation

227
00:14:53,846 --> 00:14:57,900
to tell you and to track you if you got any

228
00:15:00,750 --> 00:15:04,990
zero information or zero records and even

229
00:15:05,060 --> 00:15:08,094
push it to somewhere like slack or whatever.

230
00:15:08,292 --> 00:15:11,934
But this is an easy example. I want to show

231
00:15:11,972 --> 00:15:15,846
you something a bit different. So let's say I have a join

232
00:15:15,898 --> 00:15:20,750
between titles and genre. And I want to find only movies

233
00:15:20,830 --> 00:15:24,594
that are safe for my kids. So I can see

234
00:15:24,632 --> 00:15:28,386
here that I have a lot of titles,

235
00:15:28,498 --> 00:15:31,426
I have a few genres.

236
00:15:31,538 --> 00:15:35,186
And I can see that after I joins the genres and the title,

237
00:15:35,298 --> 00:15:39,106
I can see that it's much bigger. So here, if I

238
00:15:39,148 --> 00:15:42,634
expected one to one or many to

239
00:15:42,672 --> 00:15:46,362
one, I can see that I have duplications here and I can find

240
00:15:46,416 --> 00:15:49,866
it again either as a visualization, I can give it

241
00:15:49,888 --> 00:15:53,402
even a coloring and other things like that.

242
00:15:53,456 --> 00:15:57,358
And I find many issues like too many

243
00:15:57,524 --> 00:16:01,182
errors, nulls and stuff like that. And it's easy, you just

244
00:16:01,236 --> 00:16:04,866
need to parse the execution plan and then add

245
00:16:04,968 --> 00:16:08,642
several rules on top of that. So what's happening behind

246
00:16:08,696 --> 00:16:12,254
the scenes is that I parse or I create parser

247
00:16:12,302 --> 00:16:16,422
for each database for the execution plan and then it's engine

248
00:16:16,476 --> 00:16:20,534
agnostic and it can support multiple queries and

249
00:16:20,572 --> 00:16:23,782
metrics, which the database itself will never

250
00:16:23,836 --> 00:16:27,142
be able to do it. So it can be extremely useful for

251
00:16:27,196 --> 00:16:31,594
performance optimization as well. That's not the

252
00:16:31,632 --> 00:16:35,366
talk. And each node is enriched with additional

253
00:16:35,478 --> 00:16:39,398
information and you can use the UI that indicates

254
00:16:39,574 --> 00:16:43,030
the proportions of the metrics and find

255
00:16:43,120 --> 00:16:47,514
issues. But obviously it's not mature, it's extremely opinionated.

256
00:16:47,642 --> 00:16:52,374
But I think we should expect opinionated

257
00:16:52,522 --> 00:16:55,986
things that will help us make queries correct.

258
00:16:56,088 --> 00:16:59,010
It's awesome to use it because it's easy,

259
00:16:59,160 --> 00:17:02,526
but we don't test it in most of the cases,

260
00:17:02,638 --> 00:17:06,002
even with things DBT, which is great.

261
00:17:06,136 --> 00:17:09,650
So I'm pretty optimistic about the future.

262
00:17:09,800 --> 00:17:13,606
And let's face it, queryflow is still not mature, you should probably

263
00:17:13,708 --> 00:17:16,870
not use it yet. If I work

264
00:17:16,940 --> 00:17:20,522
a bit on query flow you might, but I hope that other

265
00:17:20,576 --> 00:17:24,010
people like you will try to make it

266
00:17:24,160 --> 00:17:28,122
easy to work with SQL because SQL will not leave us very

267
00:17:28,176 --> 00:17:31,294
soon. And those tools I think need

268
00:17:31,332 --> 00:17:33,946
to be easy and intuitive,

269
00:17:34,138 --> 00:17:37,722
integrated in an ide and proactive

270
00:17:37,786 --> 00:17:41,582
help you do stuff like not go back every

271
00:17:41,636 --> 00:17:45,662
single time because data change and you want to monitor it

272
00:17:45,796 --> 00:17:50,202
as well. So maybe even like saving execution

273
00:17:50,266 --> 00:17:53,806
plan, you can do it on postgs and then run the

274
00:17:53,828 --> 00:17:57,670
analysis of the should plan beforehand and stuff like that.

275
00:17:57,820 --> 00:18:02,390
But I think this will be a major game changer.

276
00:18:02,730 --> 00:18:06,934
So thank you very much for listening to me and please enjoy the

277
00:18:06,972 --> 00:18:09,300
rest of the conference. Thank you very much.

