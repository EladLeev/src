1
00:00:26,290 --> 00:00:30,018
Today we're going to talk about pragmatic security automation

2
00:00:30,114 --> 00:00:33,446
in the cloud with Python. So we have a

3
00:00:33,468 --> 00:00:36,818
very exciting talk in this session,

4
00:00:36,914 --> 00:00:40,774
and I'm going to share my experience and techniques when

5
00:00:40,892 --> 00:00:43,510
dealing with these types of requirements.

6
00:00:44,650 --> 00:00:47,640
So before I start, let me introduce myself.

7
00:00:48,250 --> 00:00:51,710
I am Joshua Arvin Lat. People call me arms.

8
00:00:52,050 --> 00:00:55,754
I am the chief technology officer of Nuworks Interactive

9
00:00:55,802 --> 00:00:59,050
Labs. I'm also an AWS machine learning hero,

10
00:00:59,210 --> 00:01:03,074
and I'm also the author of the book Machine Learning

11
00:01:03,112 --> 00:01:06,660
with Amazon Sagemaker Cookbook. So there

12
00:01:07,030 --> 00:01:10,626
you'll see about 80 recipes which

13
00:01:10,648 --> 00:01:14,510
would help data scientists and developers and machine learning engineers

14
00:01:14,670 --> 00:01:17,682
perform ML experiments and deployments.

15
00:01:17,826 --> 00:01:21,446
But for today, the topic will be on security and

16
00:01:21,468 --> 00:01:25,046
security automation. So what will we

17
00:01:25,068 --> 00:01:29,020
talk about in this session? So we will talk about

18
00:01:29,470 --> 00:01:33,418
the cybersecurity attack can we're going to talk about security

19
00:01:33,504 --> 00:01:36,938
automation with a purpose. Basically, the goal there is for

20
00:01:36,944 --> 00:01:40,086
us to understand the different ways we can

21
00:01:40,128 --> 00:01:42,110
make use of automated scripts.

22
00:01:43,170 --> 00:01:47,530
We'll also talk about some tips and techniques when writing

23
00:01:47,690 --> 00:01:51,198
security automation scripts. I'm using to

24
00:01:51,204 --> 00:01:54,466
share also some techniques when it code to creating an

25
00:01:54,488 --> 00:01:58,046
automated data integrity layer. And we're

26
00:01:58,078 --> 00:02:01,134
going to talk about automated vulnerability management

27
00:02:01,182 --> 00:02:04,810
as well. And finally, we're going to talk about secure

28
00:02:04,990 --> 00:02:08,840
infrastructure as code techniques. So, are you ready?

29
00:02:09,530 --> 00:02:13,330
Yeah, let's go. So let's talk about cybersecurity

30
00:02:13,410 --> 00:02:15,960
attack chain first. So if you were to ask yourself,

31
00:02:17,770 --> 00:02:21,402
what's this all about? What's the cybersecurity attack can so

32
00:02:21,456 --> 00:02:25,494
here it's important for us to know that if we are planning to secure

33
00:02:25,542 --> 00:02:29,418
an environment, it's critical that we know how

34
00:02:29,504 --> 00:02:33,070
hackers would attack an existing system

35
00:02:33,220 --> 00:02:36,974
or environment. Sometimes you will

36
00:02:37,012 --> 00:02:41,040
be working and building on system, you'll be building systems and

37
00:02:42,210 --> 00:02:45,486
you may read in some sort of blog

38
00:02:45,518 --> 00:02:49,570
post or comment section of a stack overflow link

39
00:02:49,720 --> 00:02:53,026
that the best practice is this. And in

40
00:02:53,048 --> 00:02:57,234
order to secure your implementation, this is the best practice.

41
00:02:57,362 --> 00:03:01,190
But if you were CTO, take a step back and ask yourself, is this

42
00:03:01,260 --> 00:03:04,454
important? The only way for us to know that

43
00:03:04,492 --> 00:03:08,338
is to reverse the process might

44
00:03:08,364 --> 00:03:11,180
be able to perform the attack.

45
00:03:12,190 --> 00:03:15,754
So in the next couple of lives we will share a couple of examples and

46
00:03:15,792 --> 00:03:19,034
see how an attack changes and

47
00:03:19,072 --> 00:03:22,510
how the set of sequences would change as well, depending on

48
00:03:22,660 --> 00:03:25,150
how the environment has been implemented.

49
00:03:27,410 --> 00:03:31,534
So here, as we can see in the screen, we have

50
00:03:31,732 --> 00:03:35,250
a virtual private cloud. So we have a network there with

51
00:03:35,320 --> 00:03:37,410
public and private subnets.

52
00:03:39,750 --> 00:03:43,554
So generally most of the web application servers are

53
00:03:43,592 --> 00:03:46,966
in the public subnet and in most cases the

54
00:03:46,988 --> 00:03:50,566
database servers are in the private subnet. So the

55
00:03:50,588 --> 00:03:54,950
reason why the servers private subnet is that it's not

56
00:03:55,100 --> 00:03:59,494
directly accessible from everywhere else.

57
00:03:59,692 --> 00:04:03,206
So if you were to try to connect directly to the database

58
00:04:03,238 --> 00:04:06,860
servers or some of the servers there, you won't be able to connect.

59
00:04:07,470 --> 00:04:10,902
So in this case we have a Kubernetes set up

60
00:04:11,056 --> 00:04:14,574
where some of the servers are deployed in

61
00:04:14,612 --> 00:04:18,206
the private subnet. However, there are some servers in the

62
00:04:18,228 --> 00:04:22,026
public subnet such as the cloud nine control instance,

63
00:04:22,218 --> 00:04:25,966
which we should consider as high risk, especially if it's

64
00:04:25,998 --> 00:04:29,086
accessible in the cloud. So if an external

65
00:04:29,118 --> 00:04:32,434
attacker would attack the system, of course

66
00:04:32,552 --> 00:04:36,290
one of the primary ways to do it is to attack

67
00:04:36,360 --> 00:04:39,666
these ones in the public subnet. So being care

68
00:04:39,698 --> 00:04:42,838
of which areas are exposed is the first step.

69
00:04:42,924 --> 00:04:46,070
And at the same time it's important for us to know that

70
00:04:46,220 --> 00:04:50,310
it's not just the malicious actors

71
00:04:50,390 --> 00:04:54,042
from the outside which could cause the attack. It's also

72
00:04:54,096 --> 00:04:57,594
possible for internal employees of a company to

73
00:04:57,632 --> 00:05:01,466
perform the attack. So it's important for us to perform

74
00:05:01,568 --> 00:05:04,506
and have a set of something like defense in depth.

75
00:05:04,618 --> 00:05:08,990
These. Even if you have secured a certain layer, it's important for

76
00:05:09,140 --> 00:05:13,262
different layers to be secured and for the entire implementation

77
00:05:13,326 --> 00:05:16,674
to be audited regularly. So here,

78
00:05:16,712 --> 00:05:19,582
as you can see, that setup is high risk.

79
00:05:19,646 --> 00:05:24,382
And if we were to add some security automation

80
00:05:24,446 --> 00:05:27,774
work, one of the first things to review

81
00:05:27,832 --> 00:05:31,830
would be these security of the ones in the public subnet.

82
00:05:32,490 --> 00:05:36,134
At the same time. If you were the attacker, what would you do?

83
00:05:36,252 --> 00:05:39,400
These goal is not to simply attack the system.

84
00:05:39,770 --> 00:05:44,150
The goal these is to steal something or to perform some tasks

85
00:05:44,230 --> 00:05:47,178
that your system is not supposed to do. So for example,

86
00:05:47,344 --> 00:05:50,330
if some of the servers have already been compromised,

87
00:05:51,410 --> 00:05:54,810
the databases would probably been dumped

88
00:05:54,890 --> 00:05:58,846
and stolen and downloaded from your setup. That's one.

89
00:05:58,948 --> 00:06:02,438
The second would be stealing the passwords.

90
00:06:02,634 --> 00:06:06,302
Once the passwords have been stolen, the passwords

91
00:06:06,446 --> 00:06:09,090
may be used against other systems.

92
00:06:09,510 --> 00:06:13,426
And the other thing that hackers would do is they

93
00:06:13,448 --> 00:06:17,346
can probably use your server to attack other websites

94
00:06:17,378 --> 00:06:20,806
and systems. So there are a lot of things an attacker can do.

95
00:06:20,908 --> 00:06:26,226
And if you think about the word hack, hack means you're

96
00:06:26,338 --> 00:06:29,974
able to perform something using a certain tool

97
00:06:30,012 --> 00:06:33,302
or system, which is not generally the common use care

98
00:06:33,356 --> 00:06:36,794
for the tool. So your website may be used to do something else,

99
00:06:36,832 --> 00:06:40,042
like attacking another system. So that

100
00:06:40,096 --> 00:06:43,854
said, the attack vectors do change and

101
00:06:43,892 --> 00:06:47,898
the ways an attacker would attack your systems would change depending

102
00:06:47,914 --> 00:06:51,546
on how your system is implemented. So if you have servers

103
00:06:51,658 --> 00:06:55,134
and your servers have vulnerabilities, and the vulnerabilities have been exploited

104
00:06:55,182 --> 00:06:59,090
by the attackers, then they'll be able to use

105
00:06:59,240 --> 00:07:03,294
the tools and the attacks which are appropriate

106
00:07:03,342 --> 00:07:06,760
for that type of environment. If you have a serverless application,

107
00:07:07,370 --> 00:07:10,610
even if you think that your application is secure,

108
00:07:10,770 --> 00:07:14,600
there care still different ways to attack that kind of application.

109
00:07:15,530 --> 00:07:19,546
So for example, if you have a serverless environment and

110
00:07:19,568 --> 00:07:23,350
serverless setup, you don't manage the infrastructure.

111
00:07:23,430 --> 00:07:26,998
However, the code that you've written inside, let's say the lambda

112
00:07:27,014 --> 00:07:30,366
functions, can be vulnerable to attacks. So if

113
00:07:30,388 --> 00:07:33,502
you care unable to write secure code,

114
00:07:33,636 --> 00:07:36,510
meaning code which can be exploitable.

115
00:07:37,490 --> 00:07:40,906
If you're unable to write something which can't

116
00:07:40,938 --> 00:07:44,594
be exploited, then of course hackers can directly inject something into

117
00:07:44,632 --> 00:07:48,542
your code in your python code and then perform some operations

118
00:07:48,686 --> 00:07:51,380
which your code shouldn't be doing.

119
00:07:52,150 --> 00:07:55,606
So again, in a server setup, there's no

120
00:07:55,708 --> 00:07:59,010
servers to manage, but still there's code that's written

121
00:07:59,090 --> 00:08:02,790
from your end. So how do you secure that? The first step

122
00:08:02,860 --> 00:08:06,230
there is to make use of existing

123
00:08:07,310 --> 00:08:10,570
features of serverless services, for example,

124
00:08:10,720 --> 00:08:14,346
Amazon API gateway. There are some security

125
00:08:14,448 --> 00:08:18,246
features there which you may check first before creating

126
00:08:18,278 --> 00:08:21,834
your own script. And once you have identified that you need to write your own

127
00:08:21,872 --> 00:08:25,434
script, then that's the time you try to add additional

128
00:08:25,482 --> 00:08:28,846
security layers. So you may add a WAF or a

129
00:08:28,868 --> 00:08:31,982
web application firewall, or you can create a custom script which

130
00:08:32,036 --> 00:08:35,710
prevents access to certain directories

131
00:08:35,790 --> 00:08:39,586
or lives. So in this diagram, what we can

132
00:08:39,608 --> 00:08:42,734
see here is that we've made use of lambda edge,

133
00:08:42,862 --> 00:08:46,278
which is basically a lambda function where you can write

134
00:08:46,364 --> 00:08:50,150
custom function, custom python code and function custom

135
00:08:50,220 --> 00:08:54,006
python code, and it gets triggered, and it

136
00:08:54,028 --> 00:08:58,982
gets invoked when a user accesses

137
00:08:59,126 --> 00:09:02,426
your site. So before the custom logic here at

138
00:09:02,448 --> 00:09:06,278
the bottom is executed,

139
00:09:06,374 --> 00:09:10,554
the lambda edge, at the edge, close to the user, is executed

140
00:09:10,602 --> 00:09:14,814
first. So you can add those security checks way

141
00:09:14,852 --> 00:09:18,426
before a user gets to the API

142
00:09:18,458 --> 00:09:21,806
gateway. So that's one of the things that

143
00:09:21,828 --> 00:09:26,034
you can do so that you'll be able to separate the security logic from

144
00:09:26,072 --> 00:09:29,010
the custom code inside the lambda functions.

145
00:09:29,350 --> 00:09:33,394
So at least you're able to protect things from that layer itself.

146
00:09:33,592 --> 00:09:37,240
At the same time, do not forget to also add security

147
00:09:37,930 --> 00:09:41,254
code and custom logic near your

148
00:09:41,292 --> 00:09:44,502
lambda functions as well. As I mentioned earlier, you need to have

149
00:09:44,556 --> 00:09:47,080
multiple layers of security there.

150
00:09:51,610 --> 00:09:55,794
All right, so now let's talk about security automation

151
00:09:55,842 --> 00:09:59,654
with a purpose. What are the different ways we

152
00:09:59,692 --> 00:10:03,500
can do or we can use to

153
00:10:03,950 --> 00:10:07,980
practice security properly? So here

154
00:10:08,510 --> 00:10:12,186
we're going to share some common techniques on how to improve the

155
00:10:12,208 --> 00:10:15,774
security posture of your systems and of course the

156
00:10:15,812 --> 00:10:19,710
security awareness of your entire company. So here in these first

157
00:10:19,780 --> 00:10:23,594
slide here, we can see that, oh, we can use Python

158
00:10:23,722 --> 00:10:27,414
to do some automation work and integrate,

159
00:10:27,482 --> 00:10:28,850
let's say, Nmap,

160
00:10:30,390 --> 00:10:33,954
a network assessment tool with another tool, or maybe

161
00:10:33,992 --> 00:10:37,774
another set of tools. If you are aware, and if you have used NMAP

162
00:10:37,822 --> 00:10:41,346
before, you can technically use it by itself.

163
00:10:41,448 --> 00:10:44,678
So even without additional automation work, you'll be

164
00:10:44,684 --> 00:10:48,006
able to get it to work. And yeah, you just have CTo know the

165
00:10:48,028 --> 00:10:51,254
different options, you just have to know how

166
00:10:51,292 --> 00:10:54,954
to use it and also know other features that other people

167
00:10:54,992 --> 00:10:58,906
do not know about. For example, people just think of Nmap as

168
00:10:59,008 --> 00:11:02,154
a network assessment tool.

169
00:11:02,272 --> 00:11:06,414
However, you can make use of existing scripts there by

170
00:11:06,452 --> 00:11:11,354
making use of the, I think it's the scripts argument.

171
00:11:11,482 --> 00:11:14,926
So if you're able to use that option, then you

172
00:11:14,948 --> 00:11:18,382
can also perform some additional security checks in your site.

173
00:11:18,516 --> 00:11:22,338
So people think of this tool as a purely network assessment tool, but it

174
00:11:22,344 --> 00:11:26,146
can do so much more. One of the reasons why

175
00:11:26,168 --> 00:11:29,714
you might probably do these is if, let's say that you want some sort

176
00:11:29,752 --> 00:11:33,350
of custom functionality that

177
00:11:33,420 --> 00:11:36,934
makes use of Nmap and then you want to make use of another tool

178
00:11:36,972 --> 00:11:40,374
and try to connect them. You can use Python to

179
00:11:40,412 --> 00:11:43,382
bridge those two things. There are different ways to do this,

180
00:11:43,436 --> 00:11:46,794
but yeah, if you're trying to build a system that's already

181
00:11:46,832 --> 00:11:50,330
making use of python and you want to integrate Nmap with it, then yeah,

182
00:11:50,400 --> 00:11:53,898
you can do something like that. In the past,

183
00:11:53,984 --> 00:11:58,320
I have done something like this and I wasn't aware of the fact that

184
00:11:59,650 --> 00:12:03,070
there's already different ways to automate it. So one of the

185
00:12:03,140 --> 00:12:06,800
things that I did in the past is I literally just used the

186
00:12:07,590 --> 00:12:11,154
python code which runs bash scripts inside

187
00:12:11,192 --> 00:12:15,054
the python code in order to trigger the Nmap command.

188
00:12:15,182 --> 00:12:18,750
However, if you are already aware,

189
00:12:18,830 --> 00:12:21,950
then you can technically install a library or a

190
00:12:21,960 --> 00:12:25,762
package so that you just need to import Nmap

191
00:12:25,826 --> 00:12:28,966
and then things are much cleaner from an implementation end.

192
00:12:29,068 --> 00:12:32,982
So even if you're using Python, there's still different ways CTO make

193
00:12:33,036 --> 00:12:36,886
use of Nmap in your script. And the recommended

194
00:12:36,918 --> 00:12:40,774
way here is to look for a library or a package where you can literally

195
00:12:40,822 --> 00:12:44,186
just import Nmap and there's an API that you

196
00:12:44,208 --> 00:12:45,500
can use.

197
00:12:46,770 --> 00:12:50,158
So if you run Nmap and you want to,

198
00:12:50,244 --> 00:12:53,822
let's say, list the top ports, if you want to do

199
00:12:53,876 --> 00:12:57,226
this sort of check first before running an extensive scan,

200
00:12:57,338 --> 00:13:01,058
then that's one of the advantages of using this type of setup. And if

201
00:13:01,064 --> 00:13:04,450
you want to automation generate a really amazing, really clean

202
00:13:04,520 --> 00:13:08,574
report, then the tool in this box here can be replaced

203
00:13:08,622 --> 00:13:12,354
with some sort of report generation

204
00:13:12,482 --> 00:13:14,360
script or tool or service.

205
00:13:16,970 --> 00:13:21,190
The other way to utilize your Python scripting skills

206
00:13:21,530 --> 00:13:24,970
is to do a demo. So generally

207
00:13:25,710 --> 00:13:29,574
when performing and when implementing a vulnerability management

208
00:13:29,622 --> 00:13:31,020
program in your company,

209
00:13:33,150 --> 00:13:37,578
a major factor would involve people and processes.

210
00:13:37,754 --> 00:13:40,800
If people do not understand the importance of security.

211
00:13:41,250 --> 00:13:45,518
If these don't understand the security concepts and the implications of what they're doing,

212
00:13:45,684 --> 00:13:49,470
then it would be hard for you to enforce certain processes.

213
00:13:50,210 --> 00:13:53,666
So one of the recommended ways to do this is through demos, and you

214
00:13:53,688 --> 00:13:57,598
can technically have this sort of example where you have a password protected

215
00:13:57,614 --> 00:14:01,542
zip file and you can create a custom Python script, maybe 20

216
00:14:01,596 --> 00:14:05,590
lines of code, which basically just runs a brute force attack

217
00:14:05,740 --> 00:14:09,718
on the password protected zip file. So this would help you perform

218
00:14:09,804 --> 00:14:13,442
a quick demo on password strength. So people think,

219
00:14:13,516 --> 00:14:17,194
okay, my password will be password. So maybe in 1

220
00:14:17,232 --> 00:14:21,130
second, or maybe less than a second, an attacker would be able

221
00:14:21,200 --> 00:14:24,694
to crack these password of your zip file.

222
00:14:24,822 --> 00:14:28,430
So the harder it is and the more time it takes

223
00:14:28,500 --> 00:14:33,306
to crack the password, these the better. So with your python

224
00:14:33,338 --> 00:14:36,494
scripting skills, you can write a 20 line or 30

225
00:14:36,532 --> 00:14:39,940
line script and you'll be able to perform this demo.

226
00:14:40,310 --> 00:14:43,938
And this is one way to not just focus on tech,

227
00:14:44,024 --> 00:14:47,426
but also on people as well, because once they get

228
00:14:47,448 --> 00:14:50,918
to understand the implications of their actions, then you'll be

229
00:14:50,924 --> 00:14:54,086
able CTO introduce more concepts, CTO your company, and have your

230
00:14:54,188 --> 00:14:55,670
initiatives approved.

231
00:14:58,400 --> 00:15:01,976
Next would be security automation tips. So this is a very exciting

232
00:15:02,088 --> 00:15:05,132
part and I'll be sharing some of the tips

233
00:15:05,276 --> 00:15:07,170
and techniques I'm using myself.

234
00:15:08,740 --> 00:15:12,850
So the first one here is to make use of

235
00:15:13,620 --> 00:15:16,480
Python context managers.

236
00:15:16,820 --> 00:15:20,304
So generally when you're using context managers,

237
00:15:20,352 --> 00:15:23,652
you're probably going to use this in these context of

238
00:15:23,706 --> 00:15:26,470
opening a file, writing to a file, and then closing it.

239
00:15:27,240 --> 00:15:30,356
What I've done in the past is in order for me to clean my

240
00:15:30,378 --> 00:15:33,624
code a bit and CTO improve the logging. When I'm writing really

241
00:15:33,662 --> 00:15:38,116
quick and small scripts, I make use of these context managers.

242
00:15:38,308 --> 00:15:42,316
So as you can see in the screen, I created a custom function

243
00:15:42,498 --> 00:15:45,932
where if you use the with

244
00:15:45,986 --> 00:15:49,596
block statement, then before a certain set

245
00:15:49,618 --> 00:15:54,544
of statements are executed these, it would print the

246
00:15:54,582 --> 00:15:57,744
label and then the word start, and then when these set

247
00:15:57,782 --> 00:16:02,000
of statements have completely executed, have finished execution

248
00:16:02,340 --> 00:16:05,740
these, we'll print the same block

249
00:16:05,820 --> 00:16:09,664
with n. And the advantage with these very basic

250
00:16:09,712 --> 00:16:13,060
approach is in addition to automatically making

251
00:16:13,130 --> 00:16:17,264
your program or script easier

252
00:16:17,312 --> 00:16:20,420
to understand, it's much easier to debug,

253
00:16:21,080 --> 00:16:24,248
because if there's something wrong with your code in some sort of function,

254
00:16:24,414 --> 00:16:27,752
then you'll easily know these the error happened

255
00:16:27,886 --> 00:16:31,816
because when you're writing scripts, it's not going to work 100% right away.

256
00:16:31,998 --> 00:16:35,836
It might break while you're writing it. And these, faster you're able

257
00:16:35,858 --> 00:16:39,340
to debug your scripts, the better. So it will definitely

258
00:16:39,410 --> 00:16:42,910
be quite noisy in terms of when you're running things.

259
00:16:43,280 --> 00:16:46,916
But yeah, as long as you're able to debug

260
00:16:46,968 --> 00:16:50,640
your script really fast, then that would definitely help you save

261
00:16:50,710 --> 00:16:53,996
so much time compared to having a noisy set of logs.

262
00:16:54,028 --> 00:16:57,904
And of course you can modify these functions and disable logging

263
00:16:57,952 --> 00:17:01,492
when your script is already working. So there are different

264
00:17:01,546 --> 00:17:05,604
organizations, CTO these one. The other things that I've done in the past is

265
00:17:05,802 --> 00:17:08,884
also colorizing the logs. So if you're writing

266
00:17:08,932 --> 00:17:12,472
automated scripts using Python and you're writing and building

267
00:17:12,526 --> 00:17:16,424
security tools, it's more preferable to make

268
00:17:16,462 --> 00:17:20,184
use of the color coding solutions where you

269
00:17:20,222 --> 00:17:23,608
just add some characters

270
00:17:23,704 --> 00:17:26,840
before and after certain string elements.

271
00:17:27,000 --> 00:17:30,476
And then when it's rendered in the terminal, there will be

272
00:17:30,498 --> 00:17:33,636
a color red or a color blue, and it's much easier

273
00:17:33,688 --> 00:17:37,360
to read compared to a single colored set of logs.

274
00:17:38,020 --> 00:17:39,810
So check that out.

275
00:17:42,620 --> 00:17:46,376
All right, so here we are seeing a sample class, and I

276
00:17:46,398 --> 00:17:50,232
generally use these when trying to create a script

277
00:17:50,296 --> 00:17:54,024
which makes use of different configuration variables.

278
00:17:54,152 --> 00:17:57,660
So when writing custom scripts which, let's say perform

279
00:17:57,730 --> 00:18:01,744
a certain security task, one of the things that I do

280
00:18:01,782 --> 00:18:05,580
in Python is I create utility classes. And these utility

281
00:18:05,660 --> 00:18:09,536
classes would of course depend on the preference of these

282
00:18:09,638 --> 00:18:13,636
person writing the script. So what does this

283
00:18:13,738 --> 00:18:17,284
simple class do? So what

284
00:18:17,322 --> 00:18:21,056
it does is if you have, let's say a dictionary,

285
00:18:21,248 --> 00:18:25,572
let's say mail with nested,

286
00:18:25,636 --> 00:18:29,044
nested dictionary where you have mail and SG

287
00:18:29,092 --> 00:18:32,890
file uploader as the keys, and then you have other dictionaries inside.

288
00:18:33,340 --> 00:18:37,156
Sometimes it's quite tricky,

289
00:18:37,268 --> 00:18:40,504
and sometimes it's also confusing in your code

290
00:18:40,622 --> 00:18:44,444
when you have to deal with configuration stored in dictionary as well,

291
00:18:44,482 --> 00:18:48,024
because of course when you're writing a script, it's better to make your script

292
00:18:48,072 --> 00:18:51,580
as stateless as possible. So again, in this sample

293
00:18:51,740 --> 00:18:55,372
script, the configuration in the dictionary

294
00:18:55,436 --> 00:18:58,896
would of course be stored in some sort of n

295
00:18:58,918 --> 00:19:02,520
file or some sort of JSON file outside of the actual script.

296
00:19:02,620 --> 00:19:06,436
And once you need to load it inside your code, you need

297
00:19:06,458 --> 00:19:10,644
to be able to manage the

298
00:19:10,682 --> 00:19:15,190
chain of access

299
00:19:15,880 --> 00:19:19,128
variables. So that, let's say that if you need to access the

300
00:19:19,134 --> 00:19:22,808
username of, let's say, mail, then instead

301
00:19:22,894 --> 00:19:26,232
of having a really long line of code,

302
00:19:26,286 --> 00:19:29,704
maybe you can just use node mail username as seen in line

303
00:19:29,742 --> 00:19:32,808
15 and so on. So that allows

304
00:19:32,824 --> 00:19:36,760
you to separate configuration from the actual code logic.

305
00:19:36,840 --> 00:19:39,852
And there are different ways CTO do this. So again, this is just a quick

306
00:19:39,906 --> 00:19:43,500
example, and you may try to look for other techniques

307
00:19:43,580 --> 00:19:46,560
when you're trying to manage custom configuration.

308
00:19:46,900 --> 00:19:50,620
So once you have your script ready, you will have different environments.

309
00:19:50,700 --> 00:19:54,060
Let's say you have a custom scanner script.

310
00:19:54,220 --> 00:19:58,020
So your custom scanner script, when in staging, would make use of a different

311
00:19:58,090 --> 00:20:01,796
set of configuration files. Once it needs to be used in

312
00:20:01,818 --> 00:20:05,392
a production environment, these, you can just change the configuration file

313
00:20:05,456 --> 00:20:09,168
and then run the same script without changing anything inside, and you will be able

314
00:20:09,194 --> 00:20:12,600
to scan the production environment and then finally generate a report.

315
00:20:12,750 --> 00:20:16,376
So those are some techniques, because when you're writing a script, the last thing you

316
00:20:16,398 --> 00:20:19,720
want to do is hard code credentials inside that script.

317
00:20:22,280 --> 00:20:25,456
All right, so those are just some of the techniques that I've

318
00:20:25,488 --> 00:20:28,980
used, but that should do for now as we'll be talking about other things

319
00:20:29,050 --> 00:20:30,950
also in this talk.

320
00:20:32,700 --> 00:20:36,308
Next, we're going to talk about automated data integrity layer.

321
00:20:36,404 --> 00:20:39,928
So if you were to ask yourself, what's this

322
00:20:40,094 --> 00:20:43,908
and why do we need to talk about data integrity

323
00:20:44,084 --> 00:20:47,784
of a system? So when an attacker attacks

324
00:20:47,832 --> 00:20:50,030
a certain system, let's say a banking application,

325
00:20:51,120 --> 00:20:54,636
after an attacker is able to, let's say, steal the credentials of the

326
00:20:54,658 --> 00:20:58,592
users, of course, the attackers would try

327
00:20:58,646 --> 00:21:02,032
to modify, may try to modify the values inside

328
00:21:02,086 --> 00:21:04,944
the databases, because once can attacker, let's say,

329
00:21:04,982 --> 00:21:09,036
has bind shell or reverse shell or whatever access the attacker

330
00:21:09,068 --> 00:21:12,308
is able to have, the next step is to perform

331
00:21:12,394 --> 00:21:16,256
something and change something and then steal something. And sometimes you cannot

332
00:21:16,288 --> 00:21:19,876
steal everything inside. What you can do is what the attacker can

333
00:21:19,898 --> 00:21:23,464
do is steal the passwords and then use the passwords to

334
00:21:23,502 --> 00:21:27,428
access certain web portals

335
00:21:27,524 --> 00:21:30,952
or web admin pages. But then even there,

336
00:21:31,006 --> 00:21:34,796
even if you have web admin access, sometimes being able

337
00:21:34,818 --> 00:21:38,072
CTO directly modify what's inside the database is the easier

338
00:21:38,136 --> 00:21:41,976
approach CTo make. So once these records in the database

339
00:21:42,168 --> 00:21:44,780
have been updated,

340
00:21:45,120 --> 00:21:48,848
then if you add, let's say, 1 million to a certain account,

341
00:21:49,014 --> 00:21:52,672
then it would be very hard to track how that

342
00:21:52,726 --> 00:21:56,544
account had that amount, especially if the system did not

343
00:21:56,582 --> 00:22:00,416
have proper logging in place when there are transactions.

344
00:22:00,608 --> 00:22:03,876
So being able to detect any sort of

345
00:22:03,898 --> 00:22:07,972
data integrity issues inside your application would

346
00:22:08,026 --> 00:22:12,600
help you identify if your system has been attacked, because in most cases,

347
00:22:12,940 --> 00:22:16,520
people have no idea that their systems have already been attacked.

348
00:22:18,300 --> 00:22:21,320
So here we can see that one plus one equals two.

349
00:22:21,470 --> 00:22:25,432
So one of the ways to detect security attacks

350
00:22:25,496 --> 00:22:28,860
and attacks which involve data integrity,

351
00:22:30,400 --> 00:22:33,900
which involve the data integrity of your systems, is that if the numbers

352
00:22:33,970 --> 00:22:38,432
do not add up, then maybe it might have been modified not

353
00:22:38,486 --> 00:22:41,330
via your application code, but from somewhere else.

354
00:22:41,700 --> 00:22:45,824
And sometimes people get confused when the numbers have

355
00:22:46,022 --> 00:22:50,144
changed a bit because it may be due to developers mistakes,

356
00:22:50,192 --> 00:22:54,368
but it can also be due to an external person attacking

357
00:22:54,384 --> 00:22:58,576
your system. So one of the techniques

358
00:22:58,608 --> 00:23:02,328
that you can do is when your application is storing something in the

359
00:23:02,334 --> 00:23:06,292
database instead of you trying to write auditing

360
00:23:06,356 --> 00:23:08,680
scripts, which may be a bit reactive,

361
00:23:09,740 --> 00:23:14,020
some attacks may be detected much faster

362
00:23:14,180 --> 00:23:17,084
when the script is inside your web application.

363
00:23:17,282 --> 00:23:20,476
So this may seem counterintuitive to some of us,

364
00:23:20,578 --> 00:23:24,216
but if you're able to write a custom data integrity checker

365
00:23:24,248 --> 00:23:28,392
script which does not significantly add

366
00:23:28,546 --> 00:23:32,336
to the transaction time. So let's say that

367
00:23:32,358 --> 00:23:36,204
the transaction time is 0.5 seconds and your custom data integrity

368
00:23:36,252 --> 00:23:40,016
checker script would make it 0.6 seconds. Then you'd

369
00:23:40,048 --> 00:23:43,124
be able to perform some checks before and

370
00:23:43,162 --> 00:23:44,790
after a transaction happens.

371
00:23:46,600 --> 00:23:50,150
Let's say that the write operation was able to write

372
00:23:50,940 --> 00:23:54,760
one plus one equals two and then the total would be two,

373
00:23:54,830 --> 00:23:58,250
right? But these, your hacker was able to

374
00:23:58,620 --> 00:24:02,548
change the database content, change the database values,

375
00:24:02,724 --> 00:24:06,350
and the number suddenly became three.

376
00:24:07,200 --> 00:24:10,504
So what you can do in your custom data integrity checker script,

377
00:24:10,552 --> 00:24:13,560
using, let's say Python and SQL alchemy,

378
00:24:13,720 --> 00:24:17,064
you'll be able to detect that the values

379
00:24:17,192 --> 00:24:20,524
do not seem to be correct because there are some formulas

380
00:24:20,572 --> 00:24:24,252
which are used to check the formulas

381
00:24:24,396 --> 00:24:28,176
and trying to compare the logs in real time. So if

382
00:24:28,198 --> 00:24:31,332
the set of records are loaded in real time and there seems

383
00:24:31,386 --> 00:24:34,496
to be something which does not seem

384
00:24:34,528 --> 00:24:38,932
to add properly, then you can already tag that for

385
00:24:38,986 --> 00:24:42,532
review. Then you can perform the review manually.

386
00:24:42,676 --> 00:24:46,312
So that's one of the ways to do things because in addition to

387
00:24:46,366 --> 00:24:49,672
being able to prevent the issues from

388
00:24:49,726 --> 00:24:52,868
being deployed to production because of a developer's mistake,

389
00:24:52,964 --> 00:24:56,300
you'll be able to detect if your system is also attacked,

390
00:24:57,360 --> 00:24:59,390
especially on the database side of things.

391
00:25:03,000 --> 00:25:06,128
The next topic would be on automated vulnerability

392
00:25:06,224 --> 00:25:09,448
management. So here

393
00:25:09,534 --> 00:25:13,012
we're going to make use of vulnerability assessment tools.

394
00:25:13,156 --> 00:25:16,936
But it should be critical for security

395
00:25:17,038 --> 00:25:20,724
teams to know the different ways to secure

396
00:25:20,772 --> 00:25:23,976
an environment and make use of assessment tools.

397
00:25:24,168 --> 00:25:28,140
Sometimes people think that oh, I have this amazing security tool,

398
00:25:28,290 --> 00:25:31,884
I'll be able to secure the

399
00:25:31,922 --> 00:25:35,616
entire system by just running the tool and then patching the

400
00:25:35,638 --> 00:25:38,944
vulnerabilities. However, these timing is also

401
00:25:38,982 --> 00:25:42,850
important because when you're running a manual tool,

402
00:25:43,780 --> 00:25:46,690
it will require human hours.

403
00:25:47,060 --> 00:25:51,204
And if you care going to run, let's say once every month,

404
00:25:51,322 --> 00:25:55,716
run that tool once a month. Then there's that one month gap where

405
00:25:55,898 --> 00:25:59,800
your system might have been compromised already because

406
00:25:59,870 --> 00:26:03,160
of a vulnerability which has been deployed accidentally

407
00:26:03,500 --> 00:26:07,448
by your implementation team. So one of

408
00:26:07,454 --> 00:26:11,304
the ways to do these is to look for tools, let's say Amazon Inspector,

409
00:26:11,352 --> 00:26:15,470
which automatically runs when something in a system changes.

410
00:26:15,840 --> 00:26:20,030
So one of the changes, one of the cool things with this tool is

411
00:26:21,440 --> 00:26:24,924
if you push a new container, then Amazon inspector

412
00:26:24,972 --> 00:26:28,896
automatically runs an assessment in the container. And then when

413
00:26:28,918 --> 00:26:32,320
something changes in your instance, let's say you install

414
00:26:32,390 --> 00:26:36,404
something there, then the assessment tool also runs automatically and

415
00:26:36,442 --> 00:26:39,780
it generates a report which you can read

416
00:26:39,850 --> 00:26:43,764
and review. So this means that instead of

417
00:26:43,962 --> 00:26:47,348
having a security team run

418
00:26:47,514 --> 00:26:51,064
scanners manually regularly, you can

419
00:26:51,102 --> 00:26:54,936
depend on tools which run automatically when a set of

420
00:26:54,958 --> 00:26:59,896
changes happen. So this allows things CTo be more to

421
00:26:59,918 --> 00:27:03,784
be easier when it comes to your implementation team's collaboration with

422
00:27:03,822 --> 00:27:07,516
these security team. So that said, one of the techniques you

423
00:27:07,538 --> 00:27:11,950
can do there is, given that you're using Amazon Inspector, you can make use of

424
00:27:12,400 --> 00:27:15,884
both three, you can make use of both these and Python

425
00:27:16,012 --> 00:27:20,176
to automatically set up this entire security

426
00:27:20,278 --> 00:27:23,916
setup. So that when you have a new project, let's say you have a virtual

427
00:27:23,948 --> 00:27:27,872
private cloud, instead of you manually setting up Amazon inspector

428
00:27:27,936 --> 00:27:32,340
and all the prerequisites required to install Amazon inspector,

429
00:27:33,960 --> 00:27:37,856
you can just have a lambda function with Bulletree and Python

430
00:27:37,968 --> 00:27:41,640
and some custom scripting stuff where, yeah,

431
00:27:41,710 --> 00:27:45,028
everything set up automatically whenever you have a new environment.

432
00:27:45,204 --> 00:27:48,536
So there, the advantage there is choose the

433
00:27:48,558 --> 00:27:51,884
right tools and then use Python to do

434
00:27:51,922 --> 00:27:55,932
some additional custom scripting work to

435
00:27:55,986 --> 00:27:58,270
make it easy for your entire company.

436
00:28:01,350 --> 00:28:04,686
The last one would be on secure infrastructure as

437
00:28:04,728 --> 00:28:08,440
code. So when you're trying to secure your system,

438
00:28:09,210 --> 00:28:12,342
sometimes people think of security as having

439
00:28:12,396 --> 00:28:15,880
a vulnerability assessment tool and

440
00:28:18,030 --> 00:28:21,734
patching the systems and making sure that there are no vulnerabilities

441
00:28:21,782 --> 00:28:23,900
which can be exploited. However,

442
00:28:24,430 --> 00:28:28,042
things are trickier than

443
00:28:28,176 --> 00:28:32,394
what they think. For one thing, not all vulnerabilities

444
00:28:32,442 --> 00:28:36,074
can be patched right away. For example, you have a new version

445
00:28:36,122 --> 00:28:39,886
of a library which would solve any

446
00:28:39,988 --> 00:28:42,800
vulnerabilities existing in your system.

447
00:28:43,250 --> 00:28:46,814
Then if upgrading that library version would

448
00:28:46,852 --> 00:28:50,574
make your system unstable, then sometimes the

449
00:28:50,612 --> 00:28:54,174
patches are delayed. So there are different ways to

450
00:28:54,212 --> 00:28:58,022
manage the vulnerabilities of your system.

451
00:28:58,156 --> 00:29:01,634
And one ways to do it is through secure infrastructure

452
00:29:01,682 --> 00:29:04,950
as code. And with this approach you'll be able to

453
00:29:05,100 --> 00:29:09,050
easily secure environments

454
00:29:09,550 --> 00:29:11,210
in a layered fashion.

455
00:29:12,270 --> 00:29:16,122
So let's say that you have this sort of environment and you want

456
00:29:16,176 --> 00:29:20,014
to convert this as code. So once you're able to convert this as

457
00:29:20,052 --> 00:29:23,742
code, you'll be able to create

458
00:29:23,796 --> 00:29:27,134
new environments and be able to

459
00:29:27,172 --> 00:29:30,414
run different sort of security scanners and tools in

460
00:29:30,452 --> 00:29:34,980
those temporary environments. So once your application

461
00:29:35,430 --> 00:29:38,734
has been converted to a certain template

462
00:29:38,862 --> 00:29:42,766
or a certain set of scripts, then creating

463
00:29:42,798 --> 00:29:46,826
new environments that's a clone of this original environment would be easier.

464
00:29:46,958 --> 00:29:50,962
And if you were to integrate this with some sort of devsecops pipeline,

465
00:29:51,106 --> 00:29:55,606
then that's possible as well. So in your pipeline you push your code,

466
00:29:55,788 --> 00:29:59,098
an environments is automatically generated, a set of security

467
00:29:59,184 --> 00:30:02,902
scripts and scanners are executed on your temporary

468
00:30:02,966 --> 00:30:06,010
environment. And once the scan has finished,

469
00:30:06,510 --> 00:30:10,006
you can now take down and delete that environment and then push

470
00:30:10,038 --> 00:30:13,386
your challenges to production. So in that way you'll

471
00:30:13,418 --> 00:30:17,006
be able to make sure that your production environment is not affected by

472
00:30:17,028 --> 00:30:20,734
the scanners, because sometimes the vulnerability scanners may be harmful and

473
00:30:20,772 --> 00:30:24,278
sometimes noisy, and you want to do that in an isolated environment

474
00:30:24,394 --> 00:30:28,690
which is very similar or maybe a clone of your production environment.

475
00:30:29,350 --> 00:30:33,182
So one of these techniques you can do these is to make use of Bodotree,

476
00:30:33,326 --> 00:30:36,710
python and cloud automation to perform this

477
00:30:36,860 --> 00:30:40,626
kind of implementation and technique.

478
00:30:40,818 --> 00:30:44,806
So with this one you can make this very scalable and then you can

479
00:30:44,908 --> 00:30:47,030
reuse this also in other projects.

480
00:30:48,730 --> 00:30:52,314
At the same time, when you're using cloud automation, instead of having one

481
00:30:52,352 --> 00:30:55,942
single template for all the resources and properties

482
00:30:56,006 --> 00:30:59,362
of your entire environment, you can do it in a layered approach.

483
00:30:59,526 --> 00:31:03,582
So what you can do is you can have cloud

484
00:31:03,636 --> 00:31:07,502
automation templates, let's say JSON files or

485
00:31:07,636 --> 00:31:11,066
YAmL files which only focus on the network

486
00:31:11,178 --> 00:31:15,362
level, or maybe the IM level where you list

487
00:31:15,416 --> 00:31:19,330
the permissions there. The advantage there is you'll be able to

488
00:31:19,400 --> 00:31:22,786
automate the rollout of configuration of your

489
00:31:22,808 --> 00:31:26,518
environment from staging to prod using

490
00:31:26,604 --> 00:31:28,950
code. So instead of you doing things manually,

491
00:31:31,530 --> 00:31:35,490
you'll be able to test things first in staging,

492
00:31:35,650 --> 00:31:39,586
maybe close the redis port using cloud permission

493
00:31:39,618 --> 00:31:43,238
templates and when you have tested it that is working and there's

494
00:31:43,254 --> 00:31:46,826
no impact your application, then you'll be able to use the

495
00:31:46,848 --> 00:31:50,686
same template in your production environment. So yeah, so this one is

496
00:31:50,788 --> 00:31:54,122
very practical CTO use and it's easier to identify

497
00:31:54,186 --> 00:31:57,566
also from a security audit standpoint when these security

498
00:31:57,668 --> 00:32:01,482
configuration changes have been performed, because it's versioned

499
00:32:01,626 --> 00:32:05,650
and you'll know when these changes have been implemented.

500
00:32:06,550 --> 00:32:10,222
And finally, once you have this approach, as mentioned earlier,

501
00:32:10,286 --> 00:32:13,746
you'll be able to create multiple environments. So what you can

502
00:32:13,768 --> 00:32:17,222
do is once you're able to easily roll out and

503
00:32:17,276 --> 00:32:20,806
create a complete environment in

504
00:32:20,828 --> 00:32:24,054
let's say ten minutes to 15 minutes, then you can use one

505
00:32:24,092 --> 00:32:28,070
environment for manual testing. Because sometimes if people want to perform

506
00:32:28,220 --> 00:32:31,946
manual penetration testing, then yeah, you can use that environment there.

507
00:32:32,048 --> 00:32:36,074
At the same time you can have another environment which is a clone of the

508
00:32:36,192 --> 00:32:39,578
other environment and use that for automated security

509
00:32:39,664 --> 00:32:43,066
scans and tests. Then finally, since they're

510
00:32:43,098 --> 00:32:46,462
literally all clones of each other, you can now create

511
00:32:46,596 --> 00:32:49,914
your own production environment or maybe update your existing

512
00:32:49,962 --> 00:32:53,034
production environment, which is a cloud of this environment.

513
00:32:53,162 --> 00:32:57,006
And you may not need to test that since they're literally

514
00:32:57,118 --> 00:33:00,706
100% clones of each other. And then once you

515
00:33:00,728 --> 00:33:04,798
no longer need the other environments, then you can delete those environments.

516
00:33:04,974 --> 00:33:08,342
So these are some of the techniques that you can use,

517
00:33:08,476 --> 00:33:11,666
and as long as you're not trying to cheat your way when trying to update

518
00:33:11,698 --> 00:33:15,254
the configuration lives, then you'll do fine, especially when

519
00:33:15,292 --> 00:33:17,320
implementing infrastructure as code.

520
00:33:20,320 --> 00:33:23,824
So there, that's pretty much it. We were

521
00:33:23,862 --> 00:33:27,840
able to talk about a lot of topics and being able to one

522
00:33:27,910 --> 00:33:31,680
identify what you want to secure, being able to identify

523
00:33:32,520 --> 00:33:35,796
how you're going to approach security, and being able

524
00:33:35,818 --> 00:33:39,712
to use Python properly when writing automated scripts,

525
00:33:39,856 --> 00:33:44,260
you'll be able to perform security automation in the cloud properly

526
00:33:44,680 --> 00:33:46,790
and you'll learn as you go along,

527
00:33:48,120 --> 00:33:51,408
especially when dealing with security requirements.

528
00:33:51,584 --> 00:33:54,964
So that's pretty much it. Hope you learned something from my

529
00:33:55,002 --> 00:33:58,172
talk and have a great day ahead.

