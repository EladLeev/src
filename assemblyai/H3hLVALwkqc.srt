1
00:00:27,330 --> 00:00:30,834
Hi there, my name is Ismail. I am a cloud native developer

2
00:00:30,882 --> 00:00:34,886
at Wescale. In today's talk, we are going to present you the

3
00:00:34,908 --> 00:00:38,390
notion of compliance in the cloud and how to think it

4
00:00:38,460 --> 00:00:41,814
efficiently. So first of all,

5
00:00:41,932 --> 00:00:45,910
what is compliance? When we think about cloud,

6
00:00:45,980 --> 00:00:49,640
we think about a cool place where we can have

7
00:00:49,970 --> 00:00:53,758
id and implement it into a business in a matter of hours

8
00:00:53,844 --> 00:00:57,450
or even minutes, because the cloud will provide us with hardware

9
00:00:57,530 --> 00:01:00,654
and managed services so that we can focus

10
00:01:00,852 --> 00:01:03,620
on the business side of your code.

11
00:01:04,070 --> 00:01:07,346
But it could also be a very dangerous place

12
00:01:07,528 --> 00:01:11,186
where is located my data? Is it encrypted? Does the

13
00:01:11,208 --> 00:01:13,860
workload, does actually what it says?

14
00:01:14,390 --> 00:01:18,322
And all those questions must be answered

15
00:01:18,386 --> 00:01:22,182
from a client point of view because we need

16
00:01:22,236 --> 00:01:26,722
some guarantees that we are not in a malicious

17
00:01:26,786 --> 00:01:29,740
situation, that we are in a safe place,

18
00:01:30,910 --> 00:01:34,762
and this guarantee is represented by compliance from

19
00:01:34,816 --> 00:01:38,666
the business provider. Compliance is all about

20
00:01:38,768 --> 00:01:42,958
managing the risk. It's a set of rules to abide by

21
00:01:43,124 --> 00:01:47,194
in order to provide that we took the necessary steps

22
00:01:47,322 --> 00:01:51,134
to protect our client in

23
00:01:51,172 --> 00:01:55,534
the consumption of our service. It is usually legally

24
00:01:55,662 --> 00:01:59,342
driven. We all know RGPD, but also PCI,

25
00:01:59,486 --> 00:02:03,074
DSS for instance. It could also be

26
00:02:03,112 --> 00:02:07,590
internally driven with human resources or environment policies.

27
00:02:08,970 --> 00:02:12,850
As a set of rules, compliance can be seen as an obstacle

28
00:02:12,930 --> 00:02:16,566
to your business or innovation process.

29
00:02:16,748 --> 00:02:20,282
But you should really create a win win situation where you

30
00:02:20,336 --> 00:02:24,042
embrace compliance as being part of your business,

31
00:02:24,176 --> 00:02:27,546
where you think it continuously and in an

32
00:02:27,568 --> 00:02:31,242
automatic manner, so that any

33
00:02:31,376 --> 00:02:35,046
audit is a non event and you can get rid

34
00:02:35,078 --> 00:02:39,086
of of countless errors of meeting and in the end

35
00:02:39,268 --> 00:02:42,750
have kind of compliance governance.

36
00:02:43,090 --> 00:02:47,082
Of course, compliance is nothing new for cloud providers

37
00:02:47,146 --> 00:02:50,798
aws. They already provide you with a shared responsibility

38
00:02:50,894 --> 00:02:55,294
model that tells you that the hardware and managed services

39
00:02:55,432 --> 00:02:59,234
provided are compliance regarding RGPD, for instance,

40
00:02:59,362 --> 00:03:02,950
but you are still in charge to implement yourself,

41
00:03:03,100 --> 00:03:06,280
your part of compliance on the cloud platform,

42
00:03:06,730 --> 00:03:11,754
on each data or workload that you deploy on

43
00:03:11,792 --> 00:03:15,478
this platform. So the question really becomes

44
00:03:15,574 --> 00:03:19,610
how to implement this compliance into

45
00:03:19,680 --> 00:03:23,662
the platform. And in this schema, what is interesting

46
00:03:23,796 --> 00:03:27,758
is that we want to really

47
00:03:27,844 --> 00:03:31,440
bake the compliance into the cloud platform

48
00:03:31,810 --> 00:03:36,210
so that each time we deploy a data

49
00:03:36,360 --> 00:03:39,570
or workload, it is by design,

50
00:03:39,720 --> 00:03:43,086
compliance. And by exploding the notion

51
00:03:43,118 --> 00:03:46,582
of compliance into policies as code,

52
00:03:46,716 --> 00:03:49,880
we begin to see that we can

53
00:03:50,250 --> 00:03:53,814
apply already proven solutions such as

54
00:03:53,932 --> 00:03:58,046
DevOps that will enable us to apply the CI CD

55
00:03:58,098 --> 00:04:01,340
process to our policies and

56
00:04:02,510 --> 00:04:06,778
in the end our compliance. So one question

57
00:04:06,864 --> 00:04:10,960
that we can ask is how does code

58
00:04:11,570 --> 00:04:16,106
that we store in these repositories translate

59
00:04:16,218 --> 00:04:20,538
in terms of cloud vocabulary?

60
00:04:20,714 --> 00:04:23,794
With Tongi, we see three layers model.

61
00:04:23,912 --> 00:04:27,730
First one is identity and access management.

62
00:04:28,150 --> 00:04:33,874
That is all about trust. You give trust to

63
00:04:33,992 --> 00:04:37,414
identities so that they can act on the cloud platform.

64
00:04:37,612 --> 00:04:42,214
It is cloud platform provided and we

65
00:04:42,412 --> 00:04:45,974
obviously need to control that trust. And this

66
00:04:46,012 --> 00:04:49,754
is where the policies intervene. We distinguish two kind

67
00:04:49,792 --> 00:04:53,514
of them. First one, passive platform policies is

68
00:04:53,552 --> 00:04:57,194
also cloud platform provided and is about configuration that

69
00:04:57,232 --> 00:05:01,386
you can set on the different services provided

70
00:05:01,418 --> 00:05:05,722
by your platform. For instance, you can forbid the creation

71
00:05:05,786 --> 00:05:09,962
of an object bucket inside that region.

72
00:05:10,106 --> 00:05:13,762
The problem is it's really loosely coupled to

73
00:05:13,816 --> 00:05:17,634
the platform and we may

74
00:05:17,672 --> 00:05:21,202
lack of expressivity when we

75
00:05:21,256 --> 00:05:24,658
think in business term. That is to say the

76
00:05:24,664 --> 00:05:28,150
cloud platform won't be able to follow you in

77
00:05:28,220 --> 00:05:31,910
all of your needs. And this is where reactive platform policy

78
00:05:31,980 --> 00:05:36,130
shines, because the platforms produce

79
00:05:36,210 --> 00:05:40,186
events when something happened, where in

80
00:05:40,288 --> 00:05:44,074
the capacity to consume those events in order to

81
00:05:44,112 --> 00:05:47,450
trigger action that will implement

82
00:05:47,950 --> 00:05:51,742
one of our policy and in the end enable the

83
00:05:51,796 --> 00:05:55,920
compliance. And we can take simple example

84
00:05:56,290 --> 00:06:00,014
on the GCP, for instance, we may want to

85
00:06:00,212 --> 00:06:03,874
stop each evening our SQL instances and

86
00:06:03,912 --> 00:06:07,746
start them up again each morning. Usually we

87
00:06:07,768 --> 00:06:11,540
will see the following implementation. We call that

88
00:06:12,310 --> 00:06:16,994
orchestration choreography. We will choreography

89
00:06:17,042 --> 00:06:21,686
different services with one another in order to get

90
00:06:21,868 --> 00:06:24,680
a certain policy in place.

91
00:06:25,050 --> 00:06:29,146
And in the case of GCP, we could very well

92
00:06:29,328 --> 00:06:33,126
implement two entries inside a scheduler.

93
00:06:33,238 --> 00:06:37,098
One of them would be in charge to call a top

94
00:06:37,184 --> 00:06:40,622
SQL instance cloud function and the second

95
00:06:40,676 --> 00:06:44,782
one would be in charge to call another cloud function that

96
00:06:44,836 --> 00:06:47,998
would start the SQL instance each

97
00:06:48,084 --> 00:06:52,154
morning. Of course we would use infrastructure

98
00:06:52,202 --> 00:06:56,238
as code through terraform in order to easily reproduce

99
00:06:56,414 --> 00:07:00,146
this architecture inside another project.

100
00:07:00,328 --> 00:07:03,762
So far so good, but we see three

101
00:07:03,816 --> 00:07:07,062
main drawbacks. The first one is that

102
00:07:07,116 --> 00:07:10,374
we have to think about this architecture and

103
00:07:10,412 --> 00:07:14,070
it's very subjective. In fact, some of you may have

104
00:07:14,140 --> 00:07:18,182
another approach with the same result. Second drawback

105
00:07:18,246 --> 00:07:22,122
is about the code that we put inside those

106
00:07:22,176 --> 00:07:26,614
function. It's up to you to code these functions

107
00:07:26,742 --> 00:07:30,494
and you could very well set bug or

108
00:07:30,532 --> 00:07:34,030
bugs. And last but not least, we have

109
00:07:34,100 --> 00:07:38,026
a risk of duplication between different teams

110
00:07:38,138 --> 00:07:41,754
because of a lack of communication with Tangi.

111
00:07:41,802 --> 00:07:45,442
We discovered a nice tool that could

112
00:07:45,496 --> 00:07:49,218
provide you with answers to the different problem we

113
00:07:49,304 --> 00:07:53,074
previously mentioned. First of all, it enables you

114
00:07:53,112 --> 00:07:58,830
to switch from an imperative pradeem into declarative

115
00:07:58,910 --> 00:08:03,154
one. Clocksodian will provide you with a domain specific language

116
00:08:03,282 --> 00:08:07,602
that will enable the describing of policies through

117
00:08:07,676 --> 00:08:10,810
a YaML file and with your own business term.

118
00:08:11,790 --> 00:08:15,626
This is really interesting because from

119
00:08:15,808 --> 00:08:19,354
there you don't have to do anything but to write

120
00:08:19,392 --> 00:08:23,338
a YAMl file and deployed infrastructure

121
00:08:23,514 --> 00:08:27,630
will be taken in charge by cloud custodian

122
00:08:28,450 --> 00:08:32,462
AWS, long as the code that also will be deployed inside

123
00:08:32,596 --> 00:08:36,114
those function. So we tackle the

124
00:08:36,152 --> 00:08:39,810
problem of the architecture, we don't have to think about it.

125
00:08:39,880 --> 00:08:43,442
We tackle the problem of the code inside the cloud function,

126
00:08:43,576 --> 00:08:47,334
we don't have to think about it too. And we

127
00:08:47,372 --> 00:08:51,030
tackle the problem of duplication because now

128
00:08:51,100 --> 00:08:54,770
we are able to expose in few files

129
00:08:54,850 --> 00:08:58,666
or policies with business terms

130
00:08:58,848 --> 00:09:02,934
and those files are easily shareable amongst

131
00:09:02,982 --> 00:09:07,242
all your team so that they can benefit from the same

132
00:09:07,296 --> 00:09:10,654
treatment and the same approach of your

133
00:09:10,692 --> 00:09:14,350
policies. So Tongi, can you present

134
00:09:14,420 --> 00:09:18,254
yourself and tell us more about what

135
00:09:18,372 --> 00:09:22,314
cloud custodian is? So cloud custodian

136
00:09:22,362 --> 00:09:26,340
is an open source initiative launched by Capital one.

137
00:09:26,950 --> 00:09:30,514
It mainly consists of a Python library based on

138
00:09:30,552 --> 00:09:34,466
YaML files. In entry, each YamL file will describe a

139
00:09:34,488 --> 00:09:38,594
list of policies that will help you to set up and ensure

140
00:09:38,722 --> 00:09:42,934
two types of compliance mentioned by Ismail just before

141
00:09:43,132 --> 00:09:46,642
reactive compliance and passive scanning compliance.

142
00:09:46,786 --> 00:09:50,682
In few words, cloud Kosian can be interfaced with the three main public

143
00:09:50,736 --> 00:09:54,106
cloud providers I mentioned here,

144
00:09:54,208 --> 00:09:57,340
AWS, Azure and Google Cloud platform.

145
00:09:57,870 --> 00:10:01,710
Note that Google Cloud platform is now in

146
00:10:01,780 --> 00:10:06,270
Alpha stage for now, but soon to be fully released.

147
00:10:07,170 --> 00:10:11,146
Since it's written in Python, it can run everywhere.

148
00:10:11,258 --> 00:10:14,926
The project is currently in the CNCF

149
00:10:14,958 --> 00:10:18,338
sandbox initiative and have a

150
00:10:18,424 --> 00:10:20,500
release frequency of a month.

151
00:10:21,990 --> 00:10:25,986
So cloud custodian under the hood a

152
00:10:26,008 --> 00:10:29,560
cloud custodian policy can be described as shown here.

153
00:10:31,530 --> 00:10:35,078
We can see the type of resource that

154
00:10:35,084 --> 00:10:38,362
will be targeted by the policy. Here we're talking

155
00:10:38,416 --> 00:10:42,406
about Microsoft Azure disks filter.

156
00:10:42,518 --> 00:10:45,914
Also we can

157
00:10:45,952 --> 00:10:49,020
filter to select only the resource that matters for us.

158
00:10:49,950 --> 00:10:53,994
Here we want to select all the Microsoft Azure azure disks

159
00:10:54,042 --> 00:10:57,982
that are not attached to any other resource and

160
00:10:58,036 --> 00:11:02,126
also actions to perform on

161
00:11:02,148 --> 00:11:05,358
the found resources. Here we want to delete

162
00:11:05,374 --> 00:11:09,054
them. We can do a quick parallel

163
00:11:09,182 --> 00:11:13,298
with SQL language with

164
00:11:13,384 --> 00:11:18,360
the select from where syntax like

165
00:11:18,970 --> 00:11:23,846
the select is the action we want to perform from

166
00:11:23,948 --> 00:11:27,730
is the resource we want to target and where

167
00:11:27,900 --> 00:11:31,450
all our filtering conditions.

168
00:11:31,950 --> 00:11:36,460
Now let's talk a bit about numbers.

169
00:11:37,070 --> 00:11:39,958
Here is a summary of all the resources,

170
00:11:40,054 --> 00:11:44,240
actions and filter available for each cloud custodian service.

171
00:11:44,770 --> 00:11:48,078
The project was launched for AWS in the first place,

172
00:11:48,164 --> 00:11:52,094
so that's why there is a lot more settings for this cloud

173
00:11:52,132 --> 00:11:56,142
provider, but it kind of represents the market shares

174
00:11:56,286 --> 00:11:59,314
between cloud providers. The big point here

175
00:11:59,352 --> 00:12:03,666
is to show you that the coverage of

176
00:12:03,688 --> 00:12:07,922
all the possibilities is already consequenced, so most of your compliance

177
00:12:08,066 --> 00:12:11,490
cases can be fulfilled with cloud custodian.

178
00:12:11,650 --> 00:12:14,530
Let's talk a bit about execution modes.

179
00:12:14,690 --> 00:12:18,130
Cloud custodian is defined to be completely agnostic

180
00:12:18,290 --> 00:12:21,538
of its run place as long as you have a patch and

181
00:12:21,564 --> 00:12:25,258
virtual environment. The most interesting things

182
00:12:25,344 --> 00:12:29,130
here is that the projects can also

183
00:12:29,200 --> 00:12:33,082
rely on cloud providers several services to set up more complex

184
00:12:33,146 --> 00:12:36,654
workflows. It's really easy to make it all together with

185
00:12:36,692 --> 00:12:40,510
cloud custodian just by specifying a mode

186
00:12:41,010 --> 00:12:44,622
with several arguments in your policy. Cloud custodian will automatically

187
00:12:44,686 --> 00:12:47,966
deploy on the cloud providers multiple

188
00:12:47,998 --> 00:12:51,682
resource to cover the need described in the policy.

189
00:12:51,816 --> 00:12:54,450
Depending on what is specified,

190
00:12:56,810 --> 00:13:00,390
the deploy action will provision triggers and serverless application

191
00:13:00,540 --> 00:13:04,390
directly in the cloud. For AWS triggers,

192
00:13:04,730 --> 00:13:08,170
you can see we can use cloud watch events

193
00:13:08,750 --> 00:13:12,090
coming from cloud trail or

194
00:13:12,240 --> 00:13:16,586
schedule events to

195
00:13:16,608 --> 00:13:19,370
trigger lambda AWS lambda functions.

196
00:13:19,710 --> 00:13:23,246
For Google Cloud platform, cloud custodian will

197
00:13:23,268 --> 00:13:27,194
use cloud security command center logging

198
00:13:27,242 --> 00:13:31,102
or a cloud scheduler to trigger Google

199
00:13:31,156 --> 00:13:34,514
Cloud functions. Eventually on Azure, the same

200
00:13:34,552 --> 00:13:38,402
workflow is applied using Evan grid, a cloud scheduler and

201
00:13:38,456 --> 00:13:40,930
also azure cloud functions.

202
00:13:41,750 --> 00:13:44,690
So move on to filters.

203
00:13:46,570 --> 00:13:49,510
Let's talk a bit about filter types.

204
00:13:50,170 --> 00:13:54,230
There is about three filter types

205
00:13:55,050 --> 00:13:59,362
you can filter on specific value filter

206
00:13:59,426 --> 00:14:03,654
that there are filter that will make an API call an API

207
00:14:03,702 --> 00:14:07,338
call to the cloud platform to check a specific

208
00:14:07,424 --> 00:14:10,090
setting for an identified resource.

209
00:14:11,150 --> 00:14:14,430
You can also specify naven filter

210
00:14:15,330 --> 00:14:19,706
which will only check incoming events and do the verification

211
00:14:19,898 --> 00:14:23,858
with the value provided in the policy. And there is also specific

212
00:14:23,944 --> 00:14:27,138
filters to do more

213
00:14:27,224 --> 00:14:29,090
complex filtering.

214
00:14:30,550 --> 00:14:34,878
Let's see a little example that use those

215
00:14:34,984 --> 00:14:36,710
three types of filters.

216
00:14:38,330 --> 00:14:41,686
So here we have a

217
00:14:41,708 --> 00:14:45,574
little policy. This policy will check

218
00:14:45,612 --> 00:14:49,180
and enforce that log file validation is enables on

219
00:14:50,350 --> 00:14:54,074
a cloud trail trail at least what we want is to have

220
00:14:54,192 --> 00:14:57,226
notification when

221
00:14:57,408 --> 00:15:00,794
the cloud trail trail is updated to disable log

222
00:15:00,832 --> 00:15:05,066
five validation. So you can see here the resource targeted is AWS

223
00:15:05,178 --> 00:15:08,654
cloud trail. The mod is a cloud trail mold so

224
00:15:08,692 --> 00:15:11,822
we will react on an event and the event

225
00:15:11,876 --> 00:15:14,050
we are watching is update trail.

226
00:15:15,190 --> 00:15:19,410
There we can see unlike

227
00:15:19,560 --> 00:15:23,054
some filters, the first filter here is a filter

228
00:15:23,102 --> 00:15:26,406
on a tag. So it

229
00:15:26,428 --> 00:15:27,830
is a value filter.

230
00:15:29,610 --> 00:15:33,206
Here we want to know if the

231
00:15:33,228 --> 00:15:35,480
tag trail to watch is to true.

232
00:15:36,730 --> 00:15:41,946
After that there is little specific

233
00:15:42,048 --> 00:15:45,578
filter. This filter is a specific filter on the trail just to see

234
00:15:45,584 --> 00:15:49,706
if the trail is logging or not. Then there

235
00:15:49,728 --> 00:15:53,966
is two value filters. The first filter is to see we

236
00:15:53,988 --> 00:15:57,870
want to know if the trail is military regional and the second filter

237
00:15:58,690 --> 00:16:03,380
is to assure that this

238
00:16:03,910 --> 00:16:07,540
cloud trail trail will log all actions on a specific

239
00:16:08,630 --> 00:16:10,980
s three packet name.

240
00:16:13,510 --> 00:16:17,062
The last filter is an event filter. So as you can see

241
00:16:17,116 --> 00:16:21,170
we use gms pass syntax

242
00:16:21,330 --> 00:16:24,966
to reach in the API event in

243
00:16:24,988 --> 00:16:28,294
the cloud trail event, a specific setting

244
00:16:28,342 --> 00:16:31,340
and to check its value. Okay,

245
00:16:31,870 --> 00:16:35,382
so now let's do a more complex

246
00:16:35,446 --> 00:16:38,860
example. Let's extend this a bit.

247
00:16:40,370 --> 00:16:43,914
In some cases you can't apply remediation

248
00:16:43,962 --> 00:16:47,806
on a resource at creation. That's because the resource takes some

249
00:16:47,828 --> 00:16:51,306
times to be available and cannot

250
00:16:51,338 --> 00:16:54,820
be modified until the resource is available.

251
00:16:55,830 --> 00:16:59,714
What we can do here is create a mark for up

252
00:16:59,912 --> 00:17:03,858
workflow for delayed actions. First we

253
00:17:03,864 --> 00:17:07,510
need a policy to detect the creation of a resource

254
00:17:08,890 --> 00:17:13,030
and check that the resource is wrongly configured.

255
00:17:13,370 --> 00:17:16,690
The policy will apply a mark for tag

256
00:17:16,850 --> 00:17:22,474
on the resource with an operation with

257
00:17:22,512 --> 00:17:26,358
an operation to perform, and also a minimum time period

258
00:17:26,534 --> 00:17:30,214
to apply the execution. Then we wait for the resource

259
00:17:30,262 --> 00:17:33,994
to be available using a periodic policy which contains a filter

260
00:17:34,042 --> 00:17:38,138
on the resource states. Once the resource is available, the periodic

261
00:17:38,154 --> 00:17:41,694
policy will apply a remediation. To finish

262
00:17:41,732 --> 00:17:45,314
the workflow we have to delete the

263
00:17:45,352 --> 00:17:49,218
remediated resource. And then finally

264
00:17:49,384 --> 00:17:53,006
you can take a coffee because any resources that it wrongly

265
00:17:53,038 --> 00:17:55,170
configured will be remediated.

266
00:17:58,490 --> 00:18:01,830
Let's see a little example of this workflow.

267
00:18:02,410 --> 00:18:06,360
So here I made a little use case for you.

268
00:18:09,530 --> 00:18:14,266
The need we are trying to answer here that we

269
00:18:14,288 --> 00:18:18,566
want that all our RDS DB

270
00:18:18,598 --> 00:18:22,054
clusters must have continuous

271
00:18:22,102 --> 00:18:26,062
backup backup retention period enabled to its maximum time,

272
00:18:26,116 --> 00:18:29,694
which is 35 days. So here

273
00:18:29,732 --> 00:18:34,098
you have the first policy. The first policy is

274
00:18:34,264 --> 00:18:38,142
a cloud trail policy reacting on two separated

275
00:18:38,206 --> 00:18:41,358
events, a create DB cluster and modified DB cluster.

276
00:18:41,454 --> 00:18:45,590
Because we want also to apply the remediation when

277
00:18:45,660 --> 00:18:49,174
someone updates this setting, it has only

278
00:18:49,212 --> 00:18:52,422
one filter which is a value filter on

279
00:18:52,476 --> 00:18:55,990
a backup retention period with an operation and the value.

280
00:18:56,060 --> 00:18:59,626
The thing is that it say that we

281
00:18:59,648 --> 00:19:03,514
select only DB cluster that have

282
00:19:03,552 --> 00:19:07,946
backup retention period less

283
00:19:08,048 --> 00:19:11,434
than certified date. Here we

284
00:19:11,472 --> 00:19:15,470
have two actions. The first action is a macro up action.

285
00:19:16,210 --> 00:19:19,726
So we put a tag named backup retention compliance on

286
00:19:19,748 --> 00:19:23,330
the LDS cluster and the retention

287
00:19:24,390 --> 00:19:27,666
operation to change. And as I

288
00:19:27,688 --> 00:19:28,260
said,

289
00:19:31,430 --> 00:19:35,560
we have to set up a limit of time until

290
00:19:36,650 --> 00:19:40,454
the remediation is applicable. So we want

291
00:19:40,572 --> 00:19:43,510
to do it as soon as it can be applied.

292
00:19:44,410 --> 00:19:48,214
And also a second action which is

293
00:19:48,332 --> 00:19:51,630
notify. We want to also notify that Closkojan

294
00:19:51,650 --> 00:19:56,246
has found a non compliant

295
00:19:56,438 --> 00:20:00,362
RDS cluster. This will help you to treat

296
00:20:00,416 --> 00:20:04,254
afterwards like CI CD deployments that

297
00:20:04,292 --> 00:20:09,870
may have wrongly configured resources.

298
00:20:11,250 --> 00:20:14,640
Here the second policy,

299
00:20:15,330 --> 00:20:18,762
this policy is not triggered by cloudtrail.

300
00:20:18,826 --> 00:20:22,462
It's a periodic policy triggered every

301
00:20:22,516 --> 00:20:25,654
two minutes. The main goal of this policies to

302
00:20:25,692 --> 00:20:30,230
find marked for up DB clusters

303
00:20:31,290 --> 00:20:36,600
with the tag we saw before and

304
00:20:37,050 --> 00:20:39,866
DB clusters that are available.

305
00:20:39,968 --> 00:20:44,170
So we need here three different filters,

306
00:20:44,590 --> 00:20:47,210
specific filter which is a mark four filter,

307
00:20:47,870 --> 00:20:53,262
a value filter for backup retention period and

308
00:20:53,316 --> 00:20:56,926
also a value filter on the status of the

309
00:20:56,948 --> 00:21:00,734
DB cluster. Here the only action to do is to

310
00:21:00,852 --> 00:21:05,140
enforce backup retention period to 35 days

311
00:21:07,030 --> 00:21:10,434
and to finish this workflow. As I said before,

312
00:21:10,632 --> 00:21:14,898
we have another periodic policy that

313
00:21:14,984 --> 00:21:19,242
will just filter on resources

314
00:21:19,406 --> 00:21:22,840
that are now compliance but wasn't before.

315
00:21:24,410 --> 00:21:28,170
Since they weren't compliant before, they have a tag

316
00:21:28,990 --> 00:21:33,094
and the only action of this policy is to remove the tag to prevent

317
00:21:33,142 --> 00:21:36,742
unwanted actions on compliance

318
00:21:36,806 --> 00:21:40,842
resource. So another big objective

319
00:21:40,906 --> 00:21:44,490
of cloud compliance and auditability is to bring Githubs

320
00:21:44,570 --> 00:21:48,574
in the game. With this library you can also have

321
00:21:48,612 --> 00:21:52,422
a compliance driven by your favorite cvs.

322
00:21:52,586 --> 00:21:56,094
The main goal here is to reassure auditors that conformity

323
00:21:56,142 --> 00:22:00,194
is applied since your code repository is the truth and

324
00:22:00,312 --> 00:22:02,900
also the true state of your platform.

325
00:22:05,050 --> 00:22:12,694
There is also different businesses and operational needs that

326
00:22:12,732 --> 00:22:16,418
you can answer. With cloud custodian you can achieve

327
00:22:16,594 --> 00:22:19,750
finops fulfillment by starting and stopping

328
00:22:19,830 --> 00:22:21,740
development instance at night.

329
00:22:22,590 --> 00:22:26,534
Then you can also use this library to detect

330
00:22:26,582 --> 00:22:29,990
malicious actions made from within the cloud platform

331
00:22:30,160 --> 00:22:33,422
and send an alert. As you can see,

332
00:22:33,476 --> 00:22:36,666
there is multiple integration available using slack,

333
00:22:36,698 --> 00:22:38,350
splunk or Datadog.

334
00:22:40,610 --> 00:22:44,580
The main goal here for compliance is

335
00:22:45,030 --> 00:22:49,554
to help you leverage on cloud custodian to

336
00:22:49,592 --> 00:22:52,674
bake your own rule of compliance into your

337
00:22:52,712 --> 00:22:56,846
cloud platform. Cloud custodian is open source by nature.

338
00:22:57,038 --> 00:23:00,630
If you identify a specific need, it's up to you to develop

339
00:23:00,700 --> 00:23:03,480
a new feature and give it back to the community.

340
00:23:04,170 --> 00:23:07,254
The first thing you have to do is to

341
00:23:07,292 --> 00:23:11,174
fork the GitHub repository, then develop your

342
00:23:11,212 --> 00:23:14,714
feature, make and pass the sets and

343
00:23:14,832 --> 00:23:18,202
open a pull request. A little

344
00:23:18,256 --> 00:23:22,254
story here with this mail we figured out that there

345
00:23:22,292 --> 00:23:26,394
were no start action on Google Cloud platform SQL

346
00:23:26,442 --> 00:23:30,400
instances. Let me show you how we managed to

347
00:23:31,410 --> 00:23:34,850
develop this feature and to add it to cloud custodian.

348
00:23:38,550 --> 00:23:42,174
So the library is written in Python,

349
00:23:42,222 --> 00:23:46,150
so it's really easy for you if you develop

350
00:23:46,220 --> 00:23:51,014
a bit using this language to understand how

351
00:23:51,052 --> 00:23:54,390
to use this library and how to add some features.

352
00:23:55,130 --> 00:23:59,130
First we made a good use of cloud custodian prepared classes,

353
00:24:00,110 --> 00:24:03,786
functions and registries to add the

354
00:24:03,808 --> 00:24:05,100
new action here.

355
00:24:06,430 --> 00:24:10,246
Then we also developed the related test.

356
00:24:10,368 --> 00:24:13,440
We can find it here.

357
00:24:17,410 --> 00:24:22,398
The test is really easy to understand. We have to create

358
00:24:22,484 --> 00:24:28,122
a policy. This policy is the chisen

359
00:24:28,186 --> 00:24:32,690
tradition of what we can write using Yaml.

360
00:24:33,910 --> 00:24:38,360
Then we run the policy and we assert that

361
00:24:39,210 --> 00:24:42,280
the number of resource identified is to one.

362
00:24:43,210 --> 00:24:46,550
All information for development are

363
00:24:46,620 --> 00:24:49,370
really well explained in the developer manual.

364
00:24:49,950 --> 00:24:53,466
Even the stubborn test stubbers are tests that

365
00:24:53,488 --> 00:24:56,906
you can see here. Here are the records of

366
00:24:56,928 --> 00:25:00,742
the stubborn they are API

367
00:25:00,806 --> 00:25:04,302
calls. They are the response of API calls made to the Google Cloud

368
00:25:04,356 --> 00:25:08,046
platform. So the first thing you have to do

369
00:25:08,148 --> 00:25:11,770
is to use a function named

370
00:25:11,850 --> 00:25:15,810
record flight data that will output

371
00:25:16,550 --> 00:25:19,826
the API call results. And then in

372
00:25:19,848 --> 00:25:23,458
your test you use replay flight data to

373
00:25:23,544 --> 00:25:26,790
only replay the response of the API call to mock

374
00:25:27,610 --> 00:25:31,560
the actions made on the platform by your policy.

375
00:25:32,410 --> 00:25:36,710
These turbo are really useful

376
00:25:37,390 --> 00:25:41,260
because you have to apply them once and then

377
00:25:41,870 --> 00:25:45,994
the API call results recorded are run

378
00:25:46,112 --> 00:25:48,090
on each test suite.

379
00:25:50,850 --> 00:25:54,538
Now I leave you in good hands with Ismail

380
00:25:54,634 --> 00:25:58,254
who will show you a little demo, live demo of what

381
00:25:58,292 --> 00:26:02,190
we can do with cloud custodian on the GCP. Yes.

382
00:26:02,340 --> 00:26:05,662
Thank you Tangi for your cloud custodian

383
00:26:05,726 --> 00:26:09,522
presentation. So right now we are going to show

384
00:26:09,576 --> 00:26:13,298
you how to use it with a concrete case which is

385
00:26:13,384 --> 00:26:17,058
on the Google Cloud platform to forbid the creation of compute

386
00:26:17,074 --> 00:26:20,662
instance with public ip. To illustrate the case,

387
00:26:20,716 --> 00:26:24,566
we would use cloud shell, which is a dev environment as

388
00:26:24,588 --> 00:26:28,090
a service provisioned with a certain amount of tool. And we

389
00:26:28,160 --> 00:26:31,354
have also installed cloud custodian in it

390
00:26:31,392 --> 00:26:35,034
to deploy our policy. Before deep diving inside this

391
00:26:35,072 --> 00:26:38,906
policy, I want to show you that we don't have any

392
00:26:39,008 --> 00:26:42,686
cloud functions deployed. So in

393
00:26:42,708 --> 00:26:46,734
this kind, yes, zero items nor any cloud

394
00:26:46,772 --> 00:26:50,398
scheduler jobs. So why do I want to do that?

395
00:26:50,564 --> 00:26:54,546
To show you that indeed it

396
00:26:54,568 --> 00:26:58,226
is cloud custodian that would be in charge to think the

397
00:26:58,248 --> 00:27:01,380
architecture and deploy the code on the cloud platform.

398
00:27:01,750 --> 00:27:06,040
So before doing

399
00:27:06,650 --> 00:27:11,222
the cloud custodian part, we have to mention that we

400
00:27:11,276 --> 00:27:15,078
have to use a certain amount of API on the cloud platform.

401
00:27:15,244 --> 00:27:19,318
So we used terraform in order to activate

402
00:27:19,414 --> 00:27:22,902
some APIs and also create identity

403
00:27:23,046 --> 00:27:26,714
so that cloud custodian could use it, and so

404
00:27:26,752 --> 00:27:30,166
that we can on our side apply the least

405
00:27:30,208 --> 00:27:34,394
privilege principles with workload

406
00:27:34,442 --> 00:27:37,550
that cloud custodian will act with.

407
00:27:37,700 --> 00:27:41,262
So our policy

408
00:27:41,396 --> 00:27:45,330
called forbid public ip on compute instances is

409
00:27:45,400 --> 00:27:48,930
made of four different policies.

410
00:27:49,510 --> 00:27:52,334
Before going into the escalation,

411
00:27:52,462 --> 00:27:56,198
I want to deploy it because

412
00:27:56,284 --> 00:27:59,618
it takes a certain amount of time to provision the resource.

413
00:27:59,794 --> 00:28:03,782
So let's do that. We already have

414
00:28:03,836 --> 00:28:08,310
installed a virtual environment with custodian, cloud custodian

415
00:28:08,470 --> 00:28:10,940
so forbid public ip. Okay,

416
00:28:11,550 --> 00:28:15,180
and okay, it's running. What happens

417
00:28:15,550 --> 00:28:19,020
under the hood is that cloud custodian will

418
00:28:19,550 --> 00:28:23,054
provide, will implement different

419
00:28:23,172 --> 00:28:26,270
resources and we think about cloud

420
00:28:26,340 --> 00:28:29,982
functions, but also job scheduler and we'll see

421
00:28:30,036 --> 00:28:33,934
why. So what the

422
00:28:33,972 --> 00:28:38,066
chaining of our policy is doing is the following. First policy

423
00:28:38,168 --> 00:28:42,306
is about to listen

424
00:28:42,488 --> 00:28:45,910
for audit log on the event

425
00:28:45,980 --> 00:28:49,942
of insertion of compute instance. Basically it says for

426
00:28:49,996 --> 00:28:53,842
every creation of a compute instance do this action,

427
00:28:53,906 --> 00:28:57,142
we don't have any filtering because we want to

428
00:28:57,196 --> 00:29:01,162
apply the action of setting labels on

429
00:29:01,216 --> 00:29:04,778
all compute instance. Those labels are state

430
00:29:04,864 --> 00:29:08,410
the first and next policy, check public ip. The second

431
00:29:08,480 --> 00:29:11,886
policy this time will also act on

432
00:29:11,908 --> 00:29:15,434
GCP instance, but is of type GCP periodic,

433
00:29:15,482 --> 00:29:19,358
meaning that every minute it will apply this

434
00:29:19,444 --> 00:29:22,870
specific filter, looking for instance

435
00:29:23,050 --> 00:29:26,562
with a label, next policy and the value check

436
00:29:26,616 --> 00:29:30,254
public IP but also exposing

437
00:29:30,382 --> 00:29:33,842
a public IP. This time the action would be a mark

438
00:29:33,896 --> 00:29:37,734
for which is a syntactic sugar. In order to

439
00:29:37,772 --> 00:29:41,606
apply an already formed label that

440
00:29:41,628 --> 00:29:45,746
we can use in the next policy, we also notify

441
00:29:45,938 --> 00:29:49,338
through pubsub dedicated email address,

442
00:29:49,424 --> 00:29:53,260
but it could be really what you want. A third policy

443
00:29:53,710 --> 00:29:57,354
will still act on GCP instance is

444
00:29:57,392 --> 00:30:00,894
still periodic, so we have a scheduler that

445
00:30:00,932 --> 00:30:05,246
would trigger every minute a workload and

446
00:30:05,348 --> 00:30:08,702
we would filter an instance marked for

447
00:30:08,756 --> 00:30:12,410
up with stop. So we notice that we also

448
00:30:12,500 --> 00:30:15,826
have stop here. What is happening is that we

449
00:30:15,848 --> 00:30:19,234
are chaining those two policies with one another,

450
00:30:19,432 --> 00:30:23,554
and this time we effectively apply the action stop.

451
00:30:23,752 --> 00:30:27,334
A final policy is here to create

452
00:30:27,452 --> 00:30:31,046
a specific case where my also

453
00:30:31,148 --> 00:30:34,962
GCP instance is called unstoppable,

454
00:30:35,026 --> 00:30:38,058
following five digits. And in this case

455
00:30:38,144 --> 00:30:41,482
we consider that we want to start the

456
00:30:41,536 --> 00:30:45,782
instance again and remove the label that were chaining

457
00:30:45,846 --> 00:30:48,954
the policies in order to avoid to

458
00:30:48,992 --> 00:30:53,210
fall into an infinite loop. This time we are not periodic,

459
00:30:53,370 --> 00:30:57,006
we are of type GCP audit, meaning that we

460
00:30:57,028 --> 00:31:00,954
are listening for dedicated stop events

461
00:31:01,082 --> 00:31:04,450
in order to apply the filters and

462
00:31:04,600 --> 00:31:08,942
finally the actions. So let's

463
00:31:09,086 --> 00:31:13,326
see it in action. In the above

464
00:31:13,438 --> 00:31:17,458
window we have complete instances list command

465
00:31:17,554 --> 00:31:21,522
that would display the different instance

466
00:31:21,666 --> 00:31:25,330
and state that would be creating.

467
00:31:25,490 --> 00:31:29,290
So this time we want

468
00:31:29,360 --> 00:31:32,620
to show you that we have

469
00:31:33,150 --> 00:31:35,770
the function that are provisioned.

470
00:31:37,230 --> 00:31:40,720
So functions list okay,

471
00:31:41,170 --> 00:31:44,378
and we have four different methods,

472
00:31:44,554 --> 00:31:48,394
each of which with a different trigger. We have HTTP trigger,

473
00:31:48,442 --> 00:31:51,754
but also event trigger. HTTP trigger

474
00:31:51,802 --> 00:31:54,340
are for the periodic policy,

475
00:31:54,790 --> 00:31:57,986
whereas the event trigger are

476
00:31:58,008 --> 00:32:01,250
for the policies who are listening to the

477
00:32:01,400 --> 00:32:04,846
audit log. So for the GCP audit

478
00:32:04,958 --> 00:32:08,770
type also we have two different jobs,

479
00:32:09,590 --> 00:32:13,442
jobs lists corresponding to the HTTP trigger

480
00:32:13,506 --> 00:32:16,120
that we just previously mentioned.

481
00:32:16,570 --> 00:32:20,614
So we have the custodian auto check public IP,

482
00:32:20,742 --> 00:32:24,682
which is corresponding to the policy that would

483
00:32:24,736 --> 00:32:28,122
check each instance if it has public

484
00:32:28,176 --> 00:32:31,262
IP, and stop instances with

485
00:32:31,316 --> 00:32:35,818
public IP that correspond to the third policies,

486
00:32:35,994 --> 00:32:39,770
the one with marked for up that would be triggered

487
00:32:39,930 --> 00:32:43,842
every minute. So let's create

488
00:32:43,976 --> 00:32:46,798
an instance called Toto,

489
00:32:46,974 --> 00:32:51,060
okay? So it will provision on my cloud platform

490
00:32:51,750 --> 00:32:56,694
compute instance, exposing by default a

491
00:32:56,732 --> 00:33:00,434
public IP. So if we follow the workflow

492
00:33:00,482 --> 00:33:03,830
that we previously described,

493
00:33:04,330 --> 00:33:08,938
we have this indeed new

494
00:33:09,024 --> 00:33:12,710
label applied on this instance.

495
00:33:12,790 --> 00:33:17,142
Next policy, check public IP so that it can be filtered

496
00:33:17,206 --> 00:33:20,540
by the next policy. Here we go.

497
00:33:21,070 --> 00:33:23,758
That would be applying the Mac for up.

498
00:33:23,924 --> 00:33:27,674
So we have this specific label related to cloud custodian

499
00:33:27,722 --> 00:33:31,166
or source policy stop. And it

500
00:33:31,188 --> 00:33:34,190
would be serving the third policy,

501
00:33:34,260 --> 00:33:37,698
the filtering of the third policy to apply the stop

502
00:33:37,784 --> 00:33:42,260
operation. So if we run it

503
00:33:43,350 --> 00:33:47,190
manually, we can see,

504
00:33:47,340 --> 00:33:50,120
okay, this one, okay,

505
00:33:51,370 --> 00:33:54,694
it would be triggering new methods that

506
00:33:54,732 --> 00:33:58,522
would be looking for instances with

507
00:33:58,656 --> 00:34:02,266
the marked for up. And we see that Toto is

508
00:34:02,288 --> 00:34:05,994
now stopping indeed, because it was marked for

509
00:34:06,032 --> 00:34:08,220
up with the operation stop.

510
00:34:09,550 --> 00:34:14,250
And now if we create nonstoppable

511
00:34:14,330 --> 00:34:16,720
instance, okay,

512
00:34:17,090 --> 00:34:20,414
followed by the digits, this time it will

513
00:34:20,452 --> 00:34:24,500
follow the same workflow, it will start, it will be

514
00:34:25,590 --> 00:34:29,538
branded with the labels and then it will be stopped because

515
00:34:29,624 --> 00:34:33,426
exposing a public IP, but because it is called

516
00:34:33,528 --> 00:34:37,400
unstoppable 12345,

517
00:34:37,850 --> 00:34:41,110
it will be restarted. And we will

518
00:34:41,180 --> 00:34:44,822
also see disappearing the different levels that

519
00:34:44,876 --> 00:34:48,374
are necessary to apply the stopping

520
00:34:48,422 --> 00:34:51,834
policy. So to avoid to fall into an

521
00:34:51,872 --> 00:34:55,718
infinite loop, we would be removing

522
00:34:55,814 --> 00:34:59,674
the level. So we are

523
00:34:59,712 --> 00:35:04,560
going to manually run our

524
00:35:04,930 --> 00:35:09,518
jobs. So seems that it was check,

525
00:35:09,684 --> 00:35:13,986
okay, it was already triggered and

526
00:35:14,168 --> 00:35:18,690
we have the mark four up for the stop operation that is appearing.

527
00:35:19,750 --> 00:35:23,794
And this time when we stop the

528
00:35:23,832 --> 00:35:24,610
instance,

529
00:35:27,290 --> 00:35:30,082
this instance will be filtered and stopped.

530
00:35:30,146 --> 00:35:33,446
Okay, we see that. But because we

531
00:35:33,468 --> 00:35:36,646
have this name, the final policies will be

532
00:35:36,668 --> 00:35:39,898
called and it will start the instance again.

533
00:35:39,984 --> 00:35:43,338
So it takes a certain amount of time, but not so much.

534
00:35:43,424 --> 00:35:47,686
Let's see it in action. So right now it's stopping,

535
00:35:47,878 --> 00:35:51,946
it's terminated. And because the force

536
00:35:51,978 --> 00:35:56,138
policy is listening for the stop event and filtering

537
00:35:56,234 --> 00:36:00,570
on this specific kind of name, it is now restarting

538
00:36:00,650 --> 00:36:04,050
again our instance,

539
00:36:04,550 --> 00:36:08,094
which is now running. And because we don't

540
00:36:08,142 --> 00:36:11,486
want to fall into an infinite loop,

541
00:36:11,598 --> 00:36:15,438
we should also see that the label would

542
00:36:15,464 --> 00:36:18,726
be removed in the end. So it may

543
00:36:18,748 --> 00:36:22,806
take a certain amount of time, but in the end it would

544
00:36:22,988 --> 00:36:26,258
finish the job. In the meantime,

545
00:36:26,354 --> 00:36:30,250
I want to show you dedicated policies

546
00:36:30,750 --> 00:36:33,850
for a specific use case of cloud custodian.

547
00:36:35,230 --> 00:36:38,460
When we want to batch operation on the cloud platform,

548
00:36:38,830 --> 00:36:42,922
we usually go through scripts,

549
00:36:42,986 --> 00:36:47,134
but cloud custodian through the filtering and the action is

550
00:36:47,172 --> 00:36:50,650
able to really to batch your action. And for instance,

551
00:36:50,810 --> 00:36:54,574
here I have a policy to filter on GCP

552
00:36:54,622 --> 00:36:58,658
instance labeled Devfest in order to delete them.

553
00:36:58,824 --> 00:37:02,580
And right now it will services us in order

554
00:37:04,070 --> 00:37:08,038
to clean our cloud platform

555
00:37:08,204 --> 00:37:12,070
from those specific instances.

556
00:37:12,810 --> 00:37:16,662
Before applying this policy, we can see that extra

557
00:37:16,716 --> 00:37:21,062
labels that we were mentioning were indeed removed from the unstoppable

558
00:37:21,126 --> 00:37:25,162
instance. So we avoid the infinite loop. And now

559
00:37:25,216 --> 00:37:29,794
let's apply this dedicated policy to remove

560
00:37:29,942 --> 00:37:33,962
those instances labeled with state equal

561
00:37:34,026 --> 00:37:37,726
defest. Both instances are in

562
00:37:37,748 --> 00:37:40,814
this case. So if I run this

563
00:37:40,852 --> 00:37:45,150
policy we can see that the filter is indeed counting

564
00:37:45,230 --> 00:37:48,894
two instances and it is stopping

565
00:37:48,942 --> 00:37:51,700
the instances and then removing it.

566
00:37:52,070 --> 00:37:56,340
That would conclude our demo and

567
00:37:56,650 --> 00:38:00,454
I leave the lead to Tangi now. Tangi, up to

568
00:38:00,492 --> 00:38:04,262
you. Thank you very much Ismail. I hope this demo

569
00:38:04,316 --> 00:38:08,226
had shown you all what is possible using cloud custodian with unified

570
00:38:08,258 --> 00:38:11,626
language cross cloud providers I

571
00:38:11,648 --> 00:38:15,702
will now present a bit where we are from Wescale

572
00:38:15,766 --> 00:38:18,778
who are we? Born in 2015,

573
00:38:18,864 --> 00:38:22,330
Wescale is a company that have built a community of 50 experts

574
00:38:22,410 --> 00:38:26,126
who helps you to become cloud native. We advise and

575
00:38:26,148 --> 00:38:29,694
help our clients to think, build and master their own cloud

576
00:38:29,732 --> 00:38:33,422
native architecture, always in correlation

577
00:38:33,486 --> 00:38:37,746
with their material availability in the cloud. We are currently

578
00:38:37,928 --> 00:38:41,614
CNCF service providers and also Azure

579
00:38:41,662 --> 00:38:44,690
Corp, AWS and GCP partners.

580
00:38:45,050 --> 00:38:48,598
We actively hiring in France in and

581
00:38:48,684 --> 00:38:52,438
remotely. Wescale has also a training program

582
00:38:52,524 --> 00:38:56,322
for cloud enthusiasts. All training journeys about GCP,

583
00:38:56,386 --> 00:38:59,938
AWS, Kubernetes and Nashikob

584
00:38:59,954 --> 00:39:03,526
technologies like vault and terraform will help you to

585
00:39:03,548 --> 00:39:07,030
master cloud technologies and DevOps methodology.

586
00:39:08,330 --> 00:39:12,222
Thanks a lot for your attention. If you have any questions, feel free

587
00:39:12,276 --> 00:39:14,860
to contact us. We will be more than happy to answer.

