1
00:00:00,250 --> 00:00:02,720
Good afternoon, everyone. It's nice to be here.

2
00:00:03,890 --> 00:00:07,758
I know it's, it's been a

3
00:00:07,764 --> 00:00:12,142
long day. There's been a lot of good

4
00:00:12,196 --> 00:00:16,160
information, a lot of talking, a lot of testing, a lot of things.

5
00:00:17,810 --> 00:00:21,902
Why I'm here is a good question that

6
00:00:21,956 --> 00:00:26,006
you haven't asked yet, but I'm going to answer because is

7
00:00:26,108 --> 00:00:27,800
why this talk is here.

8
00:00:29,770 --> 00:00:33,526
I've been working with AWS technology for about twelve years.

9
00:00:33,628 --> 00:00:37,014
I joined AWS four years ago and I worked a lot with AWS,

10
00:00:37,052 --> 00:00:40,694
a solutions architect, actually the first year with some of the biggest

11
00:00:40,742 --> 00:00:43,946
gaming companies in the nordic, and we

12
00:00:43,968 --> 00:00:47,142
were working a lot on scalability and some of their resiliency

13
00:00:47,206 --> 00:00:52,270
issues and trying to find solutions and also to

14
00:00:52,340 --> 00:00:56,398
work trying to get some of those chaos engineering teams actually get started.

15
00:00:56,484 --> 00:00:59,706
And I realized because there are patterns

16
00:00:59,818 --> 00:01:04,058
that you can see in what's blocking people from actually

17
00:01:04,164 --> 00:01:07,698
adopting some of those cool practices, and one of

18
00:01:07,704 --> 00:01:11,506
them is chaos engineering. So this talk is really a collection of

19
00:01:11,608 --> 00:01:15,618
kind of tips and tricks to help you get started

20
00:01:15,784 --> 00:01:19,094
in your journey. If you're already started, it doesn't mean these talk

21
00:01:19,132 --> 00:01:21,510
is going to be totally useful. Hopefully.

22
00:01:23,370 --> 00:01:26,854
Actually it might enable you even further so you can accelerate the

23
00:01:26,892 --> 00:01:30,714
adoption of your journey. So how many of you

24
00:01:30,752 --> 00:01:33,340
have active chaos engineering practices currently?

25
00:01:34,190 --> 00:01:38,134
Right, and we're talking chaos engineering,

26
00:01:38,182 --> 00:01:40,778
right, not just chaos practices,

27
00:01:40,954 --> 00:01:44,542
because that's pretty much good. And how many

28
00:01:44,596 --> 00:01:48,526
of you have a hard time to actually accelerate the

29
00:01:48,548 --> 00:01:51,694
adoption within the company? All right,

30
00:01:51,732 --> 00:01:55,140
good. So there's three people here. This talk is for you.

31
00:01:56,390 --> 00:02:00,382
All right, so in November,

32
00:02:00,446 --> 00:02:04,146
actually, before reinvent, I did ask a

33
00:02:04,168 --> 00:02:07,778
question on Twitter, because I was having a lot

34
00:02:07,784 --> 00:02:11,234
of conversation around chaos engineering, and I was really trying to confirm

35
00:02:11,282 --> 00:02:14,934
some of those private conversation I was having with the rest

36
00:02:14,972 --> 00:02:17,960
of the world and trying to see what's happening.

37
00:02:18,270 --> 00:02:21,974
And the question is, what's preventing

38
00:02:22,022 --> 00:02:26,006
you from having chaos engineering

39
00:02:26,038 --> 00:02:28,330
basically widely adopted in your organization?

40
00:02:29,970 --> 00:02:33,694
And quite interesting, the first answer was enough chaos in

41
00:02:33,732 --> 00:02:36,990
prod, right? Which I think everyone can agree,

42
00:02:37,140 --> 00:02:41,726
can agree with that, despite this joke of is

43
00:02:41,748 --> 00:02:44,946
it chaos engineering or chaos is so funny is

44
00:02:44,968 --> 00:02:48,334
because we are all having really chaos in production,

45
00:02:48,462 --> 00:02:52,014
or we tend to call production chaos because it's never really a stable

46
00:02:52,062 --> 00:02:55,720
system. A follow up question actually was

47
00:02:56,410 --> 00:02:59,686
why do you have chaos in production? So what do you think is

48
00:02:59,708 --> 00:03:04,440
these biggest reason for having chaos any?

49
00:03:08,030 --> 00:03:11,946
I guess that might be a factor, but quite interesting

50
00:03:12,048 --> 00:03:15,290
is mostly fighting fire. So people

51
00:03:15,360 --> 00:03:18,470
actually are pretty much reacting to outages

52
00:03:18,550 --> 00:03:22,262
and trying to fix things rather than improving

53
00:03:22,326 --> 00:03:25,886
things. And chaos engineering is often seen as an

54
00:03:25,908 --> 00:03:29,454
extra burden to implement on top of what we have.

55
00:03:29,652 --> 00:03:33,066
And I think this is probably one of the first reason why it's

56
00:03:33,098 --> 00:03:36,594
actually very hard to implement. Chaos engineering is because people call

57
00:03:36,632 --> 00:03:40,386
it something extra to do on what you

58
00:03:40,408 --> 00:03:44,766
already do, which is not necessarily bad, but it's actually slowing

59
00:03:44,798 --> 00:03:48,710
down your adoption. So this is basically

60
00:03:48,780 --> 00:03:52,662
what people think about chaos engineering. Actually, the first problem

61
00:03:52,796 --> 00:03:56,194
with chaos engineering is in the title

62
00:03:56,242 --> 00:04:00,330
itself. Don't call it chaos engineering.

63
00:04:01,550 --> 00:04:05,258
And it's been expected today is actually

64
00:04:05,424 --> 00:04:08,986
call it engineering. And I'll give you a simple reason for

65
00:04:09,008 --> 00:04:12,634
that. Every single customer that has trouble

66
00:04:12,762 --> 00:04:16,266
with chaos engineering and actually having widely adopted

67
00:04:16,298 --> 00:04:21,162
inside the company is because the leadership

68
00:04:21,226 --> 00:04:25,310
team or the sea level team see chaos engineering as

69
00:04:25,380 --> 00:04:28,574
chaos. If you just tell the word chaos

70
00:04:28,622 --> 00:04:32,194
to your leadership team, never get

71
00:04:32,232 --> 00:04:35,974
on trust. So it's a bit similar to one of the talk we had

72
00:04:36,012 --> 00:04:39,794
today around shadowingly

73
00:04:39,842 --> 00:04:43,462
fixing your company. Chaos engineering is kind of works

74
00:04:43,516 --> 00:04:46,470
in the shadow. You're doing engineering.

75
00:04:47,130 --> 00:04:50,294
It's actually engineering. So don't call it chaos engineering

76
00:04:50,422 --> 00:04:54,474
to start with. And this is not really a tip, it's really a

77
00:04:54,512 --> 00:04:58,060
requirement. So that's why it's called on the number zero.

78
00:04:59,150 --> 00:05:02,554
These second really important thing, in my opinion,

79
00:05:02,682 --> 00:05:06,894
is change the focus of chaos engineering and

80
00:05:06,932 --> 00:05:10,286
don't focus on the discipline itself. Actually, you have

81
00:05:10,308 --> 00:05:14,186
to have a wider view to start with on what you're trying

82
00:05:14,308 --> 00:05:17,666
to do and how Chaos engineering works. I'll give you

83
00:05:17,688 --> 00:05:21,426
an example. This is one of my favorite story, and this is an

84
00:05:21,528 --> 00:05:25,918
internal story of Amazon and which really, really reflects

85
00:05:26,094 --> 00:05:28,600
that statement, to have a wider view.

86
00:05:29,450 --> 00:05:33,270
The thing is, good intentions don't work. An intention is

87
00:05:33,420 --> 00:05:37,398
people want to do good. So how many of you go to work every morning

88
00:05:37,484 --> 00:05:41,020
trying to say, today I'm going to do shitty work?

89
00:05:41,790 --> 00:05:45,146
How many? Right, so you all want to do good.

90
00:05:45,248 --> 00:05:48,362
Actually, as people, we often,

91
00:05:48,416 --> 00:05:50,800
and as engineers, we often want to do good.

92
00:05:51,330 --> 00:05:54,782
So good intentions don't work. But let me show you

93
00:05:54,836 --> 00:05:57,280
why it doesn't as well.

94
00:05:57,650 --> 00:06:01,214
It's because people already want good. There's a story behind all

95
00:06:01,252 --> 00:06:06,030
that. And at Amazon, there's something which we call the customer service

96
00:06:06,180 --> 00:06:09,650
training. It's actually every amazonian that joins the company

97
00:06:09,720 --> 00:06:12,850
has the capability, after maybe three or four months,

98
00:06:13,000 --> 00:06:16,198
to go and shadow customer

99
00:06:16,284 --> 00:06:19,606
service reps and see

100
00:06:19,788 --> 00:06:23,446
what customers are really dealing with, what the

101
00:06:23,468 --> 00:06:27,270
problem they have is kind of a way not to lose

102
00:06:27,770 --> 00:06:31,450
touch with our customers and get immediate feedback.

103
00:06:31,870 --> 00:06:35,530
So Jeff Bessels actually did that and does that

104
00:06:35,600 --> 00:06:39,466
regularly. But in one of those occurrence, he was sitting next to

105
00:06:39,488 --> 00:06:43,166
a rep, very experienced rep, and she

106
00:06:43,188 --> 00:06:46,526
pulled one of the tickets. She looks at it very quickly,

107
00:06:46,628 --> 00:06:50,160
turns it to Jeff Bezos and say, I'm sure

108
00:06:50,530 --> 00:06:54,420
she's going to return that table. Jeff was like,

109
00:06:55,110 --> 00:06:59,074
what? You're like a magician and stuff. I just know.

110
00:06:59,272 --> 00:07:03,138
Okay, so they go through the call, these order,

111
00:07:03,304 --> 00:07:06,902
and kid you not actually the person wanted

112
00:07:06,956 --> 00:07:10,294
to return the table. It actually happened that the table had

113
00:07:10,332 --> 00:07:12,920
scratches and she wanted to return.

114
00:07:13,610 --> 00:07:15,240
So it goes,

115
00:07:18,410 --> 00:07:22,220
Jeff Bezos asked the rep after the call is like,

116
00:07:22,590 --> 00:07:25,770
how did you know that she wanted to return the table?

117
00:07:26,350 --> 00:07:29,674
And she said, well, we just had thousands of those

118
00:07:29,712 --> 00:07:33,040
in the last two weeks. And he looks at her like, what?

119
00:07:33,410 --> 00:07:37,082
How come we can have thousands of similar cases

120
00:07:37,146 --> 00:07:40,506
and not act on it, right? It doesn't

121
00:07:40,538 --> 00:07:44,170
make sense. So he did what every managed

122
00:07:44,250 --> 00:07:47,714
does. You go to the team, to the leadership, you say,

123
00:07:47,752 --> 00:07:50,914
become on guys, we need to do better. We need to care

124
00:07:50,952 --> 00:07:54,722
more about our customers. We need to try

125
00:07:54,776 --> 00:07:58,120
harder. Well, guess what happened?

126
00:07:58,490 --> 00:08:02,280
Well, nothing happened actually. It just didn't work

127
00:08:02,650 --> 00:08:06,342
because good intentions don't work because she

128
00:08:06,396 --> 00:08:09,594
was and every other reps was already trying

129
00:08:09,632 --> 00:08:12,938
to do the best because they go to work trying to do the best.

130
00:08:13,104 --> 00:08:17,260
So if good intentions don't work, work what does?

131
00:08:21,410 --> 00:08:24,800
Before answering the question, I want to tell you about a little story,

132
00:08:25,330 --> 00:08:27,550
and that's these story of Toyota.

133
00:08:28,450 --> 00:08:30,880
Do you know what an undone cord is?

134
00:08:31,410 --> 00:08:35,694
Right? An undone cord was invented by Toyota

135
00:08:35,742 --> 00:08:39,874
in the early 19 two,

136
00:08:40,072 --> 00:08:43,278
those are silk, silk weaver loom.

137
00:08:43,374 --> 00:08:47,160
So basically, Toyota before making chaos, was making

138
00:08:48,330 --> 00:08:52,566
clothes for geishas. And geishas have high

139
00:08:52,668 --> 00:08:56,262
quality standards. And if there's any

140
00:08:56,316 --> 00:09:00,354
defect in the production line on silk, it has to be stopped

141
00:09:00,402 --> 00:09:05,690
immediately so that geishas get the top quality clothing.

142
00:09:06,270 --> 00:09:10,622
So what they did is they invented a little button

143
00:09:10,676 --> 00:09:15,422
on the side. You see the little cord on the left that anybody

144
00:09:15,556 --> 00:09:18,814
in the production could pull if they could

145
00:09:18,852 --> 00:09:23,460
see a problem on the silk and everyone

146
00:09:24,470 --> 00:09:27,826
could pull that. And they took this practice actually

147
00:09:27,928 --> 00:09:32,206
a little further on manufacturing lines.

148
00:09:32,238 --> 00:09:35,746
And this is actually a manufacturing line for Toyota.

149
00:09:35,778 --> 00:09:38,950
And you see those cords up. These are

150
00:09:39,020 --> 00:09:42,566
cords that you see all along the manufacturing line.

151
00:09:42,748 --> 00:09:46,658
And anyone on the factory floor,

152
00:09:46,754 --> 00:09:50,986
if they see a defect, can pull the

153
00:09:51,008 --> 00:09:54,170
cord. Now, if you do this in Europe,

154
00:09:55,150 --> 00:09:58,646
you get your leadership, come yell at you, you are stopping

155
00:09:58,678 --> 00:10:02,286
your production line. It's better be good because we are losing millions and

156
00:10:02,308 --> 00:10:04,862
millions of dollars. Well,

157
00:10:04,916 --> 00:10:08,398
Toyota has a different way of doing that. When anyone

158
00:10:08,484 --> 00:10:11,966
pulls the cord, the leadership comes and say, thank you very much

159
00:10:12,068 --> 00:10:15,360
for pulling the cord. That means you care about our customers.

160
00:10:15,750 --> 00:10:19,266
So that means they empower anyone on the production line to care even more.

161
00:10:19,288 --> 00:10:22,866
It's a cultural thing. So that's called the undone cord. And we

162
00:10:22,888 --> 00:10:26,950
took that principle and tried to employ that

163
00:10:27,020 --> 00:10:30,678
into customers service because of course our rep

164
00:10:30,764 --> 00:10:34,614
had seen that thousand times. So she

165
00:10:34,652 --> 00:10:37,814
could have pulled the plug and see, oh, that's the ten times

166
00:10:37,852 --> 00:10:41,334
I'm doing this item. Let's pull that plug and take this item

167
00:10:41,382 --> 00:10:44,938
out of the catalog. And so we did.

168
00:10:45,104 --> 00:10:48,794
So for some unit, this is actually one of the unit that

169
00:10:48,992 --> 00:10:53,066
was put on the catalog that I'd mistake and contacts

170
00:10:53,098 --> 00:10:57,134
fell from 30%, 33% to 3% within

171
00:10:57,252 --> 00:10:58,960
a couple of days. Right.

172
00:11:00,210 --> 00:11:03,966
And these are kind of interesting ideas. So if

173
00:11:04,148 --> 00:11:07,822
good intentions don't work, work what

174
00:11:07,876 --> 00:11:11,750
does? That's another ondon corn

175
00:11:11,770 --> 00:11:14,850
mechanism that worked actually on prime Video, which is quite funny.

176
00:11:15,270 --> 00:11:18,646
You can receive sometimes emails and it'll tell you we are

177
00:11:18,668 --> 00:11:22,534
refunding you because we noticed that the quality of the movie was

178
00:11:22,572 --> 00:11:26,562
not the best you could. And these are all automatic

179
00:11:26,626 --> 00:11:30,162
emails, right? So there's no one looking at the logs

180
00:11:30,226 --> 00:11:33,706
and say, oh, the quality of the delivery of that

181
00:11:33,728 --> 00:11:37,114
person was bad. Now those are system that analyze log in

182
00:11:37,152 --> 00:11:40,458
real time and say, hey, if you are experiencing issue, we're refunding

183
00:11:40,474 --> 00:11:44,426
the movie. All those are mechanism

184
00:11:44,538 --> 00:11:46,640
to actually improve customer service.

185
00:11:47,410 --> 00:11:51,322
And when you think about chaos

186
00:11:51,386 --> 00:11:54,340
engineering, it's actually very similar.

187
00:11:55,510 --> 00:11:59,406
All your company, all your developers,

188
00:11:59,518 --> 00:12:03,330
they want to do good, right? So if you have

189
00:12:03,400 --> 00:12:06,450
an engineering practices that is stalling,

190
00:12:07,130 --> 00:12:10,742
the first thing you need to think of is not necessarily people

191
00:12:10,796 --> 00:12:14,326
and not asking them to try harder at testing or do better.

192
00:12:14,428 --> 00:12:16,870
It's because you're missing a mechanism.

193
00:12:18,330 --> 00:12:21,626
And this is very, very important because it's changing the

194
00:12:21,648 --> 00:12:25,018
focal point of where the problem is from people

195
00:12:25,104 --> 00:12:28,570
which already want to do good to a lack of mechanism.

196
00:12:29,230 --> 00:12:33,470
And if you think about mechanism, there are

197
00:12:33,620 --> 00:12:37,166
three things in a mechanism. The tool. Obviously you need the

198
00:12:37,188 --> 00:12:41,166
tool to implement a mechanism, but then you need to have an

199
00:12:41,188 --> 00:12:43,070
adoption framework.

200
00:12:45,330 --> 00:12:49,150
How are people going to use your tool? And actually how do you enforce

201
00:12:49,230 --> 00:12:52,434
people to use your tool? And these best, how do you

202
00:12:52,552 --> 00:12:56,454
do not enforce it, but how do you make it that

203
00:12:56,492 --> 00:12:59,862
it's subconscious like they can't do

204
00:12:59,916 --> 00:13:03,206
without, or it's automatic. And then you need to

205
00:13:03,228 --> 00:13:07,014
audit, of course, because you create a tool, you have an

206
00:13:07,052 --> 00:13:11,370
adoption, and then you need to audit that. So when you think about chaos engineering,

207
00:13:11,790 --> 00:13:15,802
don't only think about the tools, because very

208
00:13:15,856 --> 00:13:20,254
often when you think about that, it means you're looking

209
00:13:20,292 --> 00:13:24,078
at the wrong problem. And we'll talk about mechanism a

210
00:13:24,084 --> 00:13:28,138
little bit later. Another tip

211
00:13:28,234 --> 00:13:32,158
is, well, change starts with

212
00:13:32,324 --> 00:13:36,180
beginning with understanding. And that's both personal.

213
00:13:36,790 --> 00:13:40,306
If you want to change as a human being, you need to understand what

214
00:13:40,328 --> 00:13:44,290
you're doing, and that's the same for your system.

215
00:13:44,440 --> 00:13:47,974
And we talked about monitoring a lot. But I could ask

216
00:13:48,012 --> 00:13:50,950
you that, what are the top,

217
00:13:51,100 --> 00:13:54,694
most, top five painful experience outages that

218
00:13:54,732 --> 00:13:57,778
you've had in the last two years?

219
00:13:57,964 --> 00:14:01,674
Are you actually able to give me data that

220
00:14:01,712 --> 00:14:05,274
backs up your claim or do you have a gut feeling? Well,

221
00:14:05,312 --> 00:14:09,210
you'll be surprised. Pretty much nine

222
00:14:09,280 --> 00:14:13,210
companies out of ten, it's going to be gut feeling. And very often

223
00:14:13,280 --> 00:14:17,134
it's time bias. So is it going to remember the last two or

224
00:14:17,172 --> 00:14:20,702
three outage that were really painful? But if you look at a long

225
00:14:20,756 --> 00:14:24,340
time, you can see very, very different set of things.

226
00:14:25,590 --> 00:14:28,930
So very often

227
00:14:29,000 --> 00:14:32,082
people will tell you what they think

228
00:14:32,136 --> 00:14:35,118
it is, but it's not really what it is.

229
00:14:35,224 --> 00:14:39,174
So have a way to

230
00:14:39,212 --> 00:14:43,126
really measure and to look at the past. Outage a

231
00:14:43,148 --> 00:14:47,618
tool that analyzes your coes, for example, or we call it Coe. Your postmortems,

232
00:14:47,714 --> 00:14:51,594
we call it Coe corrections of error. And I'll talk a little bit. But your

233
00:14:51,632 --> 00:14:55,914
post mortem, it's good to write it, but do

234
00:14:55,952 --> 00:14:58,918
some analysis on it. Try to find pattern.

235
00:14:59,014 --> 00:15:03,258
And a pattern is not. Bob deleted

236
00:15:03,274 --> 00:15:06,990
a database in production or Adrian deleted database in production.

237
00:15:07,410 --> 00:15:11,002
I did it twice. For real. Never got fired.

238
00:15:11,066 --> 00:15:14,222
You know why I never got fired? Because I was not blamed.

239
00:15:14,286 --> 00:15:18,020
Because I was set free to be able to do it,

240
00:15:18,630 --> 00:15:22,466
which there was no rail guards. It's like I

241
00:15:22,488 --> 00:15:27,326
could run any command without having confirm command

242
00:15:27,358 --> 00:15:30,754
line that would confirm that. You really want a database to delete the database

243
00:15:30,802 --> 00:15:34,566
in production? Yes. It was

244
00:15:34,588 --> 00:15:38,642
not like this. And my terminal was exactly the same for test production

245
00:15:38,706 --> 00:15:42,746
environment. There was no different colors. There was no such a thing. So it's not

246
00:15:42,768 --> 00:15:46,570
my fault actually, because even though I deleted the database,

247
00:15:47,870 --> 00:15:51,210
I was being pulled every 3 seconds to answer

248
00:15:51,280 --> 00:15:54,938
question. I was not let alone to concentrate. There was fires everywhere.

249
00:15:55,034 --> 00:15:57,678
So yeah, the consequences is my stress level.

250
00:15:57,764 --> 00:16:01,774
My attention made me delete these database, but I should not have

251
00:16:01,812 --> 00:16:06,754
been able to do that. So some

252
00:16:06,792 --> 00:16:10,546
of those painful things. I mean,

253
00:16:10,568 --> 00:16:14,290
how many of you ever had an outage of SSL certificates?

254
00:16:15,210 --> 00:16:19,222
I love that one. This has nothing to do

255
00:16:19,276 --> 00:16:23,240
with coding skills, right. It's about process.

256
00:16:23,850 --> 00:16:27,874
It's a mechanism actually to enforce that. Your SSL

257
00:16:27,922 --> 00:16:31,926
certificates are either rotated or the alarms on it. So it's

258
00:16:31,958 --> 00:16:34,950
again a lack of process, it's always DNS.

259
00:16:35,030 --> 00:16:38,758
Well, definitely is configuration drift,

260
00:16:38,854 --> 00:16:42,654
right? We all have infrastructure as code,

261
00:16:42,772 --> 00:16:47,406
right? But how

262
00:16:47,428 --> 00:16:51,658
many of you are allowed to log into a machine on SSH

263
00:16:51,754 --> 00:16:55,266
and do configuration challenges? Why do you use

264
00:16:55,288 --> 00:16:56,660
infrastructure as code?

265
00:16:59,590 --> 00:17:03,502
Why? Because if you do it, you're thinking immutable

266
00:17:03,566 --> 00:17:07,320
infrastructure is good, but then you let people

267
00:17:07,850 --> 00:17:09,080
mutate it.

268
00:17:11,610 --> 00:17:15,554
Right? So all this is all about good intentions.

269
00:17:15,602 --> 00:17:18,954
And you see where I'm going here, right? It's actually

270
00:17:19,152 --> 00:17:23,574
a lot of it has nothing to do with human. It's about processes,

271
00:17:23,702 --> 00:17:27,610
detecting things and the same third party providers.

272
00:17:29,230 --> 00:17:32,302
Very often you have a dependency that's going to fail. Well,

273
00:17:32,356 --> 00:17:36,074
again, it's about having a process that monitors that. Maybe it's a circuit breaker,

274
00:17:36,122 --> 00:17:39,866
maybe it's a higher level process. Whatever it is or it's

275
00:17:39,898 --> 00:17:43,194
having. Multiple providers don't

276
00:17:43,242 --> 00:17:44,480
rely on one.

277
00:17:46,150 --> 00:17:50,370
Imagine if Tesco was relying only on one provider

278
00:17:50,950 --> 00:17:53,890
of twix bars or sneakers,

279
00:17:54,230 --> 00:17:57,874
and that provider gets bought by its competitors. What does it mean?

280
00:17:57,912 --> 00:18:01,414
That for the next six months they can't provide that particular food?

281
00:18:01,452 --> 00:18:04,566
No, of course they have a diversity of providers. So this is

282
00:18:04,588 --> 00:18:08,940
the same for you. You have to have a mechanism to identify those problems.

283
00:18:11,630 --> 00:18:15,340
Every time we have an outage at Amazon or AWS or

284
00:18:16,350 --> 00:18:19,994
the business, we go through what is

285
00:18:20,032 --> 00:18:23,610
called the postmortem. We call this internally corrections of errors.

286
00:18:23,770 --> 00:18:27,674
It's basically, and I'm going to piss

287
00:18:27,722 --> 00:18:31,790
people off, it's five wise,

288
00:18:32,290 --> 00:18:36,382
but not five wise, because within our culture we don't

289
00:18:36,446 --> 00:18:40,046
stop at five wise. It's just the name we gave to the process because initially

290
00:18:40,078 --> 00:18:43,854
it was called firewalls. But basically it's an analysis

291
00:18:43,902 --> 00:18:47,654
of what happened, what was the impact on the customer,

292
00:18:47,852 --> 00:18:51,366
how many of your customers have been impacted. Basically it's the

293
00:18:51,388 --> 00:18:54,630
blast radius, really understanding the blast radius

294
00:18:55,370 --> 00:18:58,486
of what were them, what were, what were the

295
00:18:58,508 --> 00:19:01,420
contributing factors. And this is very, very important.

296
00:19:02,350 --> 00:19:05,994
And this is one of the problem of the five y's and why we have

297
00:19:06,032 --> 00:19:09,894
to stop calling it five y's. And I'll

298
00:19:09,942 --> 00:19:14,250
explain this at the end. Technology is a lot more complicated than just tools.

299
00:19:14,330 --> 00:19:17,902
It's actually culture processes and

300
00:19:17,956 --> 00:19:21,630
tools. When you do an analysis of

301
00:19:21,780 --> 00:19:25,614
root cause analysis, very often people stop at the tools

302
00:19:25,742 --> 00:19:29,486
or the processes,

303
00:19:29,598 --> 00:19:32,578
but actually you have to look at the entire set of pitches. So you have

304
00:19:32,584 --> 00:19:36,182
to ask a lot of whys in many different direction, in many

305
00:19:36,236 --> 00:19:39,986
different kind of universe, the cultural universe,

306
00:19:40,098 --> 00:19:43,240
the tool universe, the process universe. Right.

307
00:19:45,050 --> 00:19:48,018
If you find one contributing factor,

308
00:19:48,114 --> 00:19:52,058
it's not enough. You have to dig out, you have to ask more questions,

309
00:19:52,144 --> 00:19:56,038
more complicated questions. Also we have the discussion

310
00:19:56,214 --> 00:19:59,626
blameless, right? It's actually not blameless because you want

311
00:19:59,648 --> 00:20:03,754
to know who did the mistake. You want to understand it means it's

312
00:20:03,802 --> 00:20:07,838
consequence less. You're not going to fire someone

313
00:20:07,924 --> 00:20:12,014
because of mistake, but you want to understand what that person did

314
00:20:12,052 --> 00:20:15,682
this, how he was allowed to basically do that problem,

315
00:20:15,736 --> 00:20:19,860
if it's an operator problem. So never ever stop at an operator problem.

316
00:20:22,230 --> 00:20:25,942
It's a false sense of responsibility. It's not there.

317
00:20:25,996 --> 00:20:29,206
Right. The responsibility is often on the

318
00:20:29,388 --> 00:20:33,138
mechanism, on the culture, or the wrong set of tools.

319
00:20:33,234 --> 00:20:36,646
Never really these people. Then you have

320
00:20:36,668 --> 00:20:39,882
to have data to support that stuff, right? If you don't have data,

321
00:20:40,016 --> 00:20:43,658
you're navigating basically in the assume world,

322
00:20:43,824 --> 00:20:45,690
assuming is death.

323
00:20:47,870 --> 00:20:51,854
What were the lessons learned? Usually there are a lot of them.

324
00:20:51,972 --> 00:20:54,970
Again, it's the realm of having culture,

325
00:20:55,050 --> 00:20:58,702
tools and processes always think about that, because this is where technology

326
00:20:58,836 --> 00:21:01,882
lives. And what are the corrective actions?

327
00:21:02,026 --> 00:21:05,202
These corrective actions for us, we always assign a date.

328
00:21:05,336 --> 00:21:09,394
By default, it's two weeks, but you can have way

329
00:21:09,432 --> 00:21:13,042
faster dates or a bit longer, depending on the task at hand.

330
00:21:13,176 --> 00:21:17,190
And this is very important because it defines the auditing.

331
00:21:17,770 --> 00:21:21,650
So then we can actually have weekly reviews

332
00:21:21,730 --> 00:21:25,666
and those weekly reviews. Interestingly enough, these are with the upper

333
00:21:25,778 --> 00:21:29,606
leadership team. Actually, Andy Jassie regularly goes into those

334
00:21:29,708 --> 00:21:32,870
technology review. Andy Jassy is CEO of AWS.

335
00:21:33,030 --> 00:21:37,018
And now there are a lot of service teams, right? So we use

336
00:21:37,104 --> 00:21:40,758
a wheel of fortune where every team, if they

337
00:21:40,784 --> 00:21:44,570
get selected, they have to go on stage and present their metrics,

338
00:21:44,650 --> 00:21:48,734
their operations, what they have done to fix the particular

339
00:21:48,852 --> 00:21:52,458
problem that were outlined in the CoE or

340
00:21:52,484 --> 00:21:56,286
something like this. And it's

341
00:21:56,318 --> 00:22:00,082
really meant to share things. So all

342
00:22:00,136 --> 00:22:03,714
the service teams are actually around the table like this. The management is

343
00:22:03,752 --> 00:22:07,646
here and these. Everyone has to present. It needs random. The wheel

344
00:22:07,678 --> 00:22:11,286
of fortune is a weighted random wheel of fortune. So if

345
00:22:11,308 --> 00:22:14,742
you get called two or three times, eventually it's going to go

346
00:22:14,796 --> 00:22:18,026
to someone else because your weight is going

347
00:22:18,048 --> 00:22:21,354
to be higher. It really is

348
00:22:21,392 --> 00:22:25,290
a process also to spread knowledge across the different teams

349
00:22:27,150 --> 00:22:31,194
and identify maybe what could be the next experiment

350
00:22:31,242 --> 00:22:34,654
to run or continuous experiment, continuous verification to avoid having

351
00:22:34,692 --> 00:22:39,726
this problem. And on

352
00:22:39,748 --> 00:22:42,942
the adoption part, so we have the tools,

353
00:22:43,006 --> 00:22:46,098
we have the auditing and adoption part.

354
00:22:46,184 --> 00:22:50,098
We use something called the policy engine. And basically

355
00:22:50,184 --> 00:22:54,046
the policy engine is a tool to amplify social pressure.

356
00:22:54,158 --> 00:22:57,286
It's quite interesting tool. It collects all

357
00:22:57,308 --> 00:23:00,790
the data of an environment from

358
00:23:00,860 --> 00:23:04,258
the best practices that were understood.

359
00:23:04,354 --> 00:23:08,522
We codify those best practices into scripts that scrap environments within

360
00:23:08,576 --> 00:23:11,958
AWS in every team and then return a score

361
00:23:12,054 --> 00:23:16,326
for a particular service team or architecture

362
00:23:16,518 --> 00:23:20,334
or software practices. And then if

363
00:23:20,372 --> 00:23:24,350
it doesn't implement those best practice

364
00:23:25,250 --> 00:23:29,034
which are continuously monitored, then its scores

365
00:23:29,082 --> 00:23:33,170
go down and then those dashboards appear on the leadership

366
00:23:33,990 --> 00:23:38,258
team weekly meeting. Right. So then you have to justify how come

367
00:23:38,424 --> 00:23:41,330
you are not following your best practices.

368
00:23:42,150 --> 00:23:46,226
And this is not because people don't

369
00:23:46,258 --> 00:23:50,246
want to do it, but it's because we tend as people

370
00:23:50,348 --> 00:23:53,366
to push things forward and if we

371
00:23:53,388 --> 00:23:57,446
have pressure from our peers, we always want

372
00:23:57,468 --> 00:24:01,242
to get out. Aws a good kid, right? Whereas if you actually

373
00:24:01,296 --> 00:24:04,554
don't have those reviews and if you don't have

374
00:24:04,592 --> 00:24:07,690
social pressure, we tend to take a shortcut and just say,

375
00:24:07,760 --> 00:24:11,198
maybe later, maybe later. And I'm sure you've all been in

376
00:24:11,204 --> 00:24:14,686
that situation when someone's going to verify what

377
00:24:14,708 --> 00:24:17,920
you do and someone is actually peers at your level,

378
00:24:19,090 --> 00:24:22,838
it's something which pushes

379
00:24:22,874 --> 00:24:25,700
you to do a little bit better.

380
00:24:26,150 --> 00:24:29,394
Not that you don't want to do good, but you're still

381
00:24:29,432 --> 00:24:33,346
human, right? So these are some of the mechanism that

382
00:24:33,368 --> 00:24:37,126
we use. Another one that is another tip that

383
00:24:37,148 --> 00:24:41,026
is super important. When you adopt chaos engineering

384
00:24:41,058 --> 00:24:44,710
practices, you're never ever going to go from zero

385
00:24:44,780 --> 00:24:48,134
to 100 in your company. Actually, you have to

386
00:24:48,172 --> 00:24:51,434
find the right Troy and horse, and that Troy and horse is going to be

387
00:24:51,472 --> 00:24:54,902
your team, which is going to be spreading

388
00:24:54,966 --> 00:24:58,300
the good virus inside the company.

389
00:24:59,390 --> 00:25:03,790
Never choose the best team. You know what, because they're already doing great

390
00:25:03,940 --> 00:25:07,050
and when they do great, it's hard to justify

391
00:25:07,210 --> 00:25:11,102
the work that you're going to do with chaos engineering. So very often

392
00:25:11,156 --> 00:25:14,234
I see companies say, oh, this is the best team. They have the best practice

393
00:25:14,282 --> 00:25:18,370
list, start chaos engineering with them, and then there's very little

394
00:25:18,440 --> 00:25:21,940
noticeable differences because they're already doing great.

395
00:25:22,630 --> 00:25:26,390
And then the other team are not really inspired because there's nothing

396
00:25:26,540 --> 00:25:30,182
magical that happened. So that's one thing is people

397
00:25:30,316 --> 00:25:33,606
expect change to be magical or wow

398
00:25:33,788 --> 00:25:37,302
or something that is going to transcend their

399
00:25:37,356 --> 00:25:41,242
developer experience. If you take these worst team, these have way other

400
00:25:41,296 --> 00:25:44,890
problems than dealing with chaos engineering, like having

401
00:25:44,960 --> 00:25:49,274
infrastructure as code in place or shutting down port 22.

402
00:25:49,312 --> 00:25:53,040
So you can't log into your instance or things like these.

403
00:25:53,410 --> 00:25:57,146
So choose a team in the middle, which team is going to serve

404
00:25:57,178 --> 00:26:00,400
best your interest. And when you have that team,

405
00:26:01,730 --> 00:26:04,130
you have to find the right metric.

406
00:26:05,350 --> 00:26:09,106
And I'm often asked, okay, which metric is best?

407
00:26:09,208 --> 00:26:12,898
If I start with a team, if I

408
00:26:12,904 --> 00:26:15,690
have to choose one metric, it's going to be MTTR,

409
00:26:15,870 --> 00:26:19,480
because that's meantime to recovery. So that means

410
00:26:19,850 --> 00:26:23,382
how fast the team is going to be able to deal

411
00:26:23,436 --> 00:26:25,640
with an outage and recover from it.

412
00:26:26,730 --> 00:26:29,994
And that's only because of confidence. And this is,

413
00:26:30,032 --> 00:26:34,170
for me, the essence of chaos engineering is training the team

414
00:26:34,240 --> 00:26:37,802
to be confident. That's confidence in

415
00:26:37,936 --> 00:26:41,630
the application, but also in the tools and in their process

416
00:26:41,780 --> 00:26:45,134
to actually deal with outage. How many

417
00:26:45,172 --> 00:26:47,950
have had first outage in production?

418
00:26:51,040 --> 00:26:54,972
You've never had outages in production or

419
00:26:55,026 --> 00:26:59,036
leave, right? Okay. Now, how many of you had outages in

420
00:26:59,058 --> 00:27:02,284
production? Right? How many of you during those

421
00:27:02,322 --> 00:27:05,500
outage felt that they've lost all their

422
00:27:05,570 --> 00:27:09,568
capacity to, you think they started sweating,

423
00:27:09,664 --> 00:27:13,440
they started swearing, they basically became really stupid.

424
00:27:13,520 --> 00:27:16,720
But that's what outages do in production.

425
00:27:16,880 --> 00:27:20,788
Chaos engineering kind of limits that,

426
00:27:20,874 --> 00:27:24,292
right? You're still going to be scared because it's still an outage in production.

427
00:27:24,356 --> 00:27:27,492
There are still real customers and you care, actually you're scared

428
00:27:27,556 --> 00:27:31,210
because you care for the customer and you care for your work, which is great.

429
00:27:31,820 --> 00:27:35,804
So MTTR is a great metric, because the less you

430
00:27:35,842 --> 00:27:39,112
are scared these faster you get into action,

431
00:27:39,176 --> 00:27:42,392
the better you're thinking, then the faster you're able to recover.

432
00:27:42,536 --> 00:27:46,284
And chaos engineering is definitely high

433
00:27:46,322 --> 00:27:50,588
on that. So if there's one metric to follow at

434
00:27:50,594 --> 00:27:54,780
these beginning before you understand, or you get others, like avability or

435
00:27:54,850 --> 00:27:58,500
things like this, MTTR is always, always a good default.

436
00:27:58,920 --> 00:28:02,548
And you don't have to have 20 metrics, have one

437
00:28:02,634 --> 00:28:06,240
which is solid, and that one is actually quite solid

438
00:28:06,400 --> 00:28:09,400
because that impacts directly your availability,

439
00:28:10,060 --> 00:28:14,004
because when you're down, the availability is only improved by your meantime

440
00:28:14,052 --> 00:28:17,530
to recovery. And that's super important to understand.

441
00:28:18,860 --> 00:28:21,784
There's another thing which is quite interesting as well.

442
00:28:21,902 --> 00:28:25,588
So during the life cycle of chaos injuring

443
00:28:25,684 --> 00:28:29,116
you basically start from the steady state, you make an

444
00:28:29,138 --> 00:28:32,312
hypothesis, you run your experiment, you want to verify

445
00:28:32,376 --> 00:28:35,840
your experiment and then improve it. And that's continuous learning

446
00:28:35,910 --> 00:28:38,850
cycle that we talked about all day.

447
00:28:39,540 --> 00:28:43,184
When you start, you actually don't have to have

448
00:28:43,302 --> 00:28:45,760
anything else than hypothesis.

449
00:28:46,500 --> 00:28:50,028
I'll tell you how I run hypothesis meetings in my

450
00:28:50,054 --> 00:28:53,892
company or in companies that I work with. I put people

451
00:28:53,946 --> 00:28:57,796
in a room. And that's not just the engineer, it's actually

452
00:28:57,898 --> 00:29:00,436
the project manager, the CTO, the CEO,

453
00:29:00,548 --> 00:29:04,392
everyone that is somehow related to the project, to the

454
00:29:04,526 --> 00:29:08,650
stuff that we want to test or what the service, the product,

455
00:29:09,900 --> 00:29:13,324
everyone in the room, from designers to

456
00:29:13,442 --> 00:29:17,224
I love your helmet. It's not distracting

457
00:29:17,272 --> 00:29:18,030
at all.

458
00:29:20,160 --> 00:29:22,510
It's quite funny, it's good.

459
00:29:24,580 --> 00:29:28,156
So I'll put everyone in the room right. Not just the engineers.

460
00:29:28,348 --> 00:29:31,920
And what is interesting to do here is actually ask

461
00:29:31,990 --> 00:29:36,704
them to write on the paper what

462
00:29:36,742 --> 00:29:40,656
they think is going to be that result of the hypothesis.

463
00:29:40,688 --> 00:29:44,416
So for example, my hypothesis is what happens if my database

464
00:29:44,448 --> 00:29:47,990
goes down. So you write on the paper

465
00:29:48,940 --> 00:29:52,584
within the timeline, you don't talk to anyone else and

466
00:29:52,622 --> 00:29:55,736
you write what is there. And you know why

467
00:29:55,838 --> 00:29:58,090
it's super important to write on the paper?

468
00:29:59,580 --> 00:30:02,924
Because when people talk to each other,

469
00:30:03,042 --> 00:30:06,536
there's something called convergence of ideas that's

470
00:30:06,568 --> 00:30:09,880
related to diversity and to diversity

471
00:30:09,960 --> 00:30:14,030
of people. Right. There's strong mindset people

472
00:30:14,580 --> 00:30:18,352
that will push their ideas and introvert people

473
00:30:18,406 --> 00:30:21,536
will naturally like me. You'll be surprised. I'm really

474
00:30:21,558 --> 00:30:25,328
introvert. I need to step back and think a lot

475
00:30:25,494 --> 00:30:28,420
before I can say anything in a meeting.

476
00:30:28,920 --> 00:30:30,580
Who is extrovert?

477
00:30:31,560 --> 00:30:34,310
They'll start talking a lot.

478
00:30:35,320 --> 00:30:39,332
And if they are really convincing, you have convergence of ideas and

479
00:30:39,386 --> 00:30:42,868
everyone tends to think, oh yeah, that sounds about right. Yeah, that's what's

480
00:30:42,884 --> 00:30:45,784
going to happen. This is zero information for you.

481
00:30:45,822 --> 00:30:49,832
It's useless. What you want is write it down

482
00:30:49,886 --> 00:30:53,196
because then you have a divergence of ideas and you realize that

483
00:30:53,298 --> 00:30:56,444
everyone has different idea of what

484
00:30:56,482 --> 00:31:00,732
happens if something goes down. And that's 100%

485
00:31:00,786 --> 00:31:04,510
of the time. I yet to have run a meeting where I've done that.

486
00:31:05,700 --> 00:31:09,008
Everyone knew exactly what was happening. And you

487
00:31:09,014 --> 00:31:13,084
can just stop here. This is your beauty of getting started with chaos

488
00:31:13,132 --> 00:31:17,076
engineering, because you have to understand how on earth is it

489
00:31:17,098 --> 00:31:20,692
possible that everyone thinks differently. So it probably means

490
00:31:20,746 --> 00:31:23,430
that specifications were not complete,

491
00:31:24,680 --> 00:31:28,820
documentation was not right or they have changed.

492
00:31:29,500 --> 00:31:32,680
Right. And the changes haven't propagated.

493
00:31:33,100 --> 00:31:36,248
So if you have product that takes months to do,

494
00:31:36,334 --> 00:31:40,712
it might be some developers might got

495
00:31:40,766 --> 00:31:44,552
stuck at the specification from the beginning and haven't

496
00:31:44,616 --> 00:31:47,916
necessarily caught up with the new ones. Or then

497
00:31:47,938 --> 00:31:50,872
you are new these and you have assumptions,

498
00:31:51,016 --> 00:31:54,744
right? So overemphasis

499
00:31:54,792 --> 00:31:57,656
on the hypothesis,

500
00:31:57,848 --> 00:32:01,376
I kid you not. This is probably going to be the wow moment in

501
00:32:01,398 --> 00:32:04,544
your company. You're going to fix most of these issues, these, you don't really

502
00:32:04,582 --> 00:32:08,244
have to run anything experiments because this is

503
00:32:08,362 --> 00:32:11,648
already going to fix a lot of issue because it's

504
00:32:11,664 --> 00:32:14,900
going to trigger some questions which then you're going to investigate,

505
00:32:15,880 --> 00:32:20,068
which is actually quite beautiful. The fifth

506
00:32:20,244 --> 00:32:23,284
is do introduce chaos engineering.

507
00:32:23,332 --> 00:32:27,930
Very early in these process I see company having

508
00:32:28,300 --> 00:32:31,844
beautiful processes, focusing on CI

509
00:32:31,892 --> 00:32:35,336
CD pipelines and then thinking about chaos engineering.

510
00:32:35,368 --> 00:32:38,076
It's the same thing if you create an application and say, oh, maybe I should

511
00:32:38,098 --> 00:32:41,736
make it secure. So chaos engineering

512
00:32:41,768 --> 00:32:45,056
is actually job. It's not zero because security is, but it

513
00:32:45,078 --> 00:32:48,416
should be. Job one or two should be really high on the process.

514
00:32:48,518 --> 00:32:51,410
And that means when you hire people,

515
00:32:53,460 --> 00:32:57,030
teach them how to break stuff,

516
00:32:57,560 --> 00:33:01,604
actually create dev environment where you can let people say

517
00:33:01,642 --> 00:33:05,232
Docker stuff and see what happened. Are you playing

518
00:33:05,296 --> 00:33:08,544
with just running your system in your local environment

519
00:33:08,592 --> 00:33:11,816
and playing Docker stuff and see what happened? That will teach you a

520
00:33:11,838 --> 00:33:15,224
lot. Actually, the first thing I was

521
00:33:15,262 --> 00:33:18,856
doing when I was hiring teams in my previous company is the

522
00:33:18,878 --> 00:33:22,636
first week they had to run a small program with three APIs. It was

523
00:33:22,658 --> 00:33:26,590
a product API. So get

524
00:33:27,200 --> 00:33:30,524
post and delete and health check and then

525
00:33:30,562 --> 00:33:34,476
trying to make it as resilient as possible. And that was the

526
00:33:34,498 --> 00:33:38,428
only guideline. And they could use all the tricks

527
00:33:38,524 --> 00:33:42,380
within the dev environment. The only thing is it was the Docker environment.

528
00:33:42,540 --> 00:33:46,204
Things like these. It changes the way developers think

529
00:33:46,342 --> 00:33:50,470
because it triggers something in the mind that

530
00:33:51,400 --> 00:33:55,396
actually there's more than just working, there's like breaking. And it

531
00:33:55,418 --> 00:33:59,232
goes back to when you try to understand how a radio or television

532
00:33:59,296 --> 00:34:02,616
worked. You often have to break it to see how

533
00:34:02,638 --> 00:34:06,040
it works. Right? And this is the same. There's few comments. I love

534
00:34:06,190 --> 00:34:09,512
to get these developer to start with. Docker kill,

535
00:34:09,566 --> 00:34:11,770
Docker stop is just beautiful.

536
00:34:14,780 --> 00:34:18,696
Another one is did

537
00:34:18,718 --> 00:34:22,972
the authentic yourself? It's great to run

538
00:34:23,026 --> 00:34:26,256
tons of process. For example, on your health check API and

539
00:34:26,278 --> 00:34:29,776
see how it behavior. Or on your API and see

540
00:34:29,878 --> 00:34:33,456
does my health check answer? Because if

541
00:34:33,478 --> 00:34:36,684
you have an API in the health check API and these are hammered

542
00:34:36,732 --> 00:34:40,070
and your cp is 100%, which one do you favor?

543
00:34:40,760 --> 00:34:43,350
Do you want to answer the API or the health check?

544
00:34:43,880 --> 00:34:47,364
Well, you should actually think about it because it's actually one of the big

545
00:34:47,402 --> 00:34:50,824
problem in distributed systems is

546
00:34:50,862 --> 00:34:54,936
prioritizations of requests when systems are congested. Because if

547
00:34:54,958 --> 00:34:58,740
you don't answer the health check and you answer your API,

548
00:34:58,820 --> 00:35:03,000
well, the load balancer is going to take the machine out of

549
00:35:03,070 --> 00:35:06,910
the auto scaling group, for example, and then you have nothing left.

550
00:35:07,760 --> 00:35:12,056
So degradation is a good way. Burning cpus, for example. This is stressng.

551
00:35:12,088 --> 00:35:15,640
It was talked today about it's an evolution of the stress

552
00:35:15,720 --> 00:35:19,536
API, of the stress tool. TC is definitely a good

553
00:35:19,558 --> 00:35:22,976
one to add latency. So there's a bunch of tools where you

554
00:35:22,998 --> 00:35:27,168
can start playing locally in your environment.

555
00:35:27,344 --> 00:35:30,804
You don't have to do this in prod. This will teach you a whole lot

556
00:35:30,842 --> 00:35:34,724
of things, especially how to treat your

557
00:35:34,762 --> 00:35:38,984
system. Another very important thing is when

558
00:35:39,022 --> 00:35:43,300
things go down, have a reflex to look at the blast radius

559
00:35:43,460 --> 00:35:46,890
and understand it. That means that

560
00:35:47,980 --> 00:35:51,756
then when people will start building, they will start to have

561
00:35:51,778 --> 00:35:55,132
this mindset of thinking about the potential blast radius of this.

562
00:35:55,186 --> 00:35:57,500
That means architecture, that means API.

563
00:35:58,160 --> 00:36:01,790
So it's really trying to create a culture where

564
00:36:02,400 --> 00:36:06,488
everything is around blast radius reduction. Because if

565
00:36:06,594 --> 00:36:10,400
you do things with as minimal blast radius possible, it means less customers

566
00:36:10,470 --> 00:36:14,016
are going to be affected and chaos engineering is exactly the

567
00:36:14,038 --> 00:36:17,556
same. When you do your experiment, think what is the

568
00:36:17,578 --> 00:36:20,868
smallest blast radius possible that I can do

569
00:36:20,954 --> 00:36:23,540
to actually disprove or prove an experiment?

570
00:36:25,320 --> 00:36:28,740
We've seen this today. Never assume,

571
00:36:29,100 --> 00:36:32,490
right? And if you assume something,

572
00:36:34,300 --> 00:36:38,100
it's probably broken. If you haven't verified

573
00:36:38,180 --> 00:36:41,988
it's assume it's broken. That's basically the language.

574
00:36:42,164 --> 00:36:45,528
And there are a few things in the cloud that I see continuously.

575
00:36:45,624 --> 00:36:48,876
People assume work and that goes with

576
00:36:48,898 --> 00:36:51,980
managed services. Actually, I think that's a problem of managed services.

577
00:36:52,130 --> 00:36:56,428
Even though it's super important for you to innovate faster,

578
00:36:56,604 --> 00:36:59,968
they give you a sense of belief that everything is going

579
00:36:59,974 --> 00:37:03,536
to be okay because the burden on

580
00:37:03,558 --> 00:37:06,908
managing that service is on somewhere else. And when

581
00:37:06,934 --> 00:37:10,470
it's AWS, yeah, we manage it pretty well

582
00:37:10,840 --> 00:37:14,388
most of the time. But failure happen and they will happen.

583
00:37:14,554 --> 00:37:18,580
And s these did fail a couple of times since

584
00:37:18,650 --> 00:37:22,424
2006. And the effect was dramatic is because people had

585
00:37:22,462 --> 00:37:25,976
never experienced an s three outage before. So they

586
00:37:25,998 --> 00:37:29,156
discovered new failure modes that they were not familiar

587
00:37:29,188 --> 00:37:32,948
with. And these are kind of some of those failure modes

588
00:37:33,044 --> 00:37:37,228
that I've seen the most, at least on AWS, because this is

589
00:37:37,394 --> 00:37:40,408
kind of the audience I talk to. Assuming,

590
00:37:40,504 --> 00:37:43,964
for example, multi AZ, you have a region, you have three AZ. How many

591
00:37:44,002 --> 00:37:47,456
of you use AWS? These just to get a sense, right. So on

592
00:37:47,478 --> 00:37:51,170
AWS you have a region, you have three aws to have your application

593
00:37:52,100 --> 00:37:55,552
to be fault tolerant. And people

594
00:37:55,606 --> 00:37:58,772
assume an AZ just never has problem. But it does.

595
00:37:58,826 --> 00:38:02,390
Even though they're isolated, sometimes they do. So test,

596
00:38:03,320 --> 00:38:06,710
you're resistant to one AZ failure. We had discussion today,

597
00:38:07,880 --> 00:38:11,496
how do we do this? Well, you can push your

598
00:38:11,518 --> 00:38:14,650
subnets to have zero traffic in the network. For example,

599
00:38:15,980 --> 00:38:18,936
you saw people here. I know usually people are like, what the hell are you

600
00:38:18,958 --> 00:38:22,616
doing with verifying people? So I'm not breaking

601
00:38:22,648 --> 00:38:25,150
necks of people. That's not what I do.

602
00:38:26,080 --> 00:38:29,720
Identify top people in the teams,

603
00:38:29,880 --> 00:38:34,120
then I take them out of the equation because

604
00:38:34,290 --> 00:38:37,744
people over rely on the ten

605
00:38:37,782 --> 00:38:40,690
x developer, right?

606
00:38:41,620 --> 00:38:45,452
And you'll be surprised. I do this experiment

607
00:38:45,516 --> 00:38:49,256
very, very often. The last one was last year, November,

608
00:38:49,308 --> 00:38:52,964
October. And I took the guy, it was great.

609
00:38:53,002 --> 00:38:56,692
I took his laptop, sent him home 6 hours later. We had to

610
00:38:56,746 --> 00:39:00,200
bring him back urgently. Actually, he was the only one who knew how to do

611
00:39:00,270 --> 00:39:03,896
a particular magic trick to get back the

612
00:39:03,918 --> 00:39:07,480
database up and running. Or he had the key,

613
00:39:07,550 --> 00:39:09,530
or no one else had.

614
00:39:10,460 --> 00:39:14,508
So don't stop at it.

615
00:39:14,594 --> 00:39:18,940
Experiment or computer experiment, think about people, because this

616
00:39:19,010 --> 00:39:22,376
will highlight weaknesses in your process and mechanism.

617
00:39:22,488 --> 00:39:26,204
So the problem here was just they didn't have a mechanism to ensure

618
00:39:26,332 --> 00:39:30,176
that everyone in the team had the same level of knowledge and

619
00:39:30,198 --> 00:39:33,296
they couldn't share it, because there

620
00:39:33,318 --> 00:39:36,384
was one guy that was just doing it himself and,

621
00:39:36,502 --> 00:39:39,856
well, even though it was great, he was never really telling

622
00:39:39,888 --> 00:39:43,636
what he was doing right, and it was all right

623
00:39:43,658 --> 00:39:47,430
for other people. And this is just to

624
00:39:48,280 --> 00:39:52,188
start all those things. Actually, I realized even though there is gremlin,

625
00:39:52,224 --> 00:39:55,876
and I use gremlin a lot, I use the chaos toolkit a lot, pumbaa,

626
00:39:55,908 --> 00:39:58,984
all those things. There were some missing stuff.

627
00:39:59,102 --> 00:40:02,696
So I went to write a bunch of open source

628
00:40:02,808 --> 00:40:06,520
stuff to help people do failure injection.

629
00:40:06,680 --> 00:40:10,076
This talk is not about failure injection, because failure injection, in my

630
00:40:10,098 --> 00:40:13,884
opinion, is just a tiny part of chaos engineering. But these are

631
00:40:13,922 --> 00:40:17,328
the tools that I wrote to be able to do the verification that I

632
00:40:17,334 --> 00:40:21,372
was talking about. So these AZ failure is in a chaos

633
00:40:21,436 --> 00:40:24,988
script. You can randomly kill database instances,

634
00:40:25,084 --> 00:40:28,140
elasticache cluster full AWS.

635
00:40:28,300 --> 00:40:31,744
If you're using a serverless and you do Python, I wrote

636
00:40:31,792 --> 00:40:35,136
an injection library error

637
00:40:35,168 --> 00:40:39,172
injection library to do in lambda can return

638
00:40:39,226 --> 00:40:41,590
different HTTP code and stuff like these.

639
00:40:43,400 --> 00:40:46,856
I can do demos later because I'm already a

640
00:40:46,878 --> 00:40:50,024
bit out of time. So if you're interested in any of that, I'll be here

641
00:40:50,062 --> 00:40:53,716
hanging out. So I can show you some demos, but you'll

642
00:40:53,748 --> 00:40:56,876
find everything on my GitHub. I just didn't want to

643
00:40:57,058 --> 00:41:00,604
push too much AWS stuff, because in the audiences, not everyone

644
00:41:00,642 --> 00:41:04,190
is AWS. It doesn't make sense to focus too much on that.

645
00:41:05,300 --> 00:41:06,880
So in summary,

646
00:41:09,380 --> 00:41:13,296
my biggest, let's say, suggestion, getting out of

647
00:41:13,318 --> 00:41:17,444
these starting blocks blocks with chaos engineering is actually take a step back and

648
00:41:17,642 --> 00:41:19,670
realize this still doesn't work.

649
00:41:20,920 --> 00:41:24,752
But realize actually really the chaos engineering,

650
00:41:24,816 --> 00:41:28,112
it really is a set of an intersection

651
00:41:28,176 --> 00:41:31,576
between culture, tools and processes, and it really sits in the

652
00:41:31,598 --> 00:41:35,476
middle. And if you have problem with the adoption

653
00:41:35,508 --> 00:41:38,520
of this, take a step back, try to analyze,

654
00:41:38,860 --> 00:41:42,392
maybe there's something in your culture that is missing.

655
00:41:42,536 --> 00:41:46,040
Chaos engineering needs very strong ownership,

656
00:41:46,120 --> 00:41:49,912
really strong deep dive characteristics,

657
00:41:49,976 --> 00:41:53,470
very strong high standards and

658
00:41:53,840 --> 00:41:57,376
bias for action or whatever. This is what we do, how we call

659
00:41:57,398 --> 00:42:00,736
our leadership principle, for example, inside Amazon. But that

660
00:42:00,758 --> 00:42:04,716
will define who you're going to hire, right? So maybe you're just not hiring

661
00:42:04,748 --> 00:42:08,476
the right people. Maybe your culture is not set right yet and maybe you can

662
00:42:08,518 --> 00:42:11,684
transform it to match a little bit more

663
00:42:11,722 --> 00:42:15,124
what chaos engineering in your company is. And I think there's no

664
00:42:15,162 --> 00:42:18,500
blueprint. I can't tell you exactly what sort of

665
00:42:18,570 --> 00:42:22,376
people you need to hire to run chaos engineering because it's going to depend on

666
00:42:22,398 --> 00:42:26,308
your company culture. Then you're going to have to define tools.

667
00:42:26,404 --> 00:42:29,944
And there's plenty of tools. There's new

668
00:42:29,982 --> 00:42:33,352
tools coming up every day. So which ones are using.

669
00:42:33,486 --> 00:42:37,244
It's really depending on your environment where you're doing, but there's never

670
00:42:37,282 --> 00:42:40,236
going to be one. It's going to be a set of one. The only thing

671
00:42:40,258 --> 00:42:44,264
I can tell is try to make these tools uniform

672
00:42:44,312 --> 00:42:47,810
for the entire company. Most of the time that I've seen

673
00:42:48,580 --> 00:42:52,140
failures as well is because people use so many different set of tools

674
00:42:52,220 --> 00:42:56,144
and then the adoption of those tools is very hard because

675
00:42:56,182 --> 00:42:59,604
there's so many of them. So choose the right one. What works

676
00:42:59,722 --> 00:43:04,196
for the particular verification that you want to set and

677
00:43:04,218 --> 00:43:08,660
then start with that. Then at the end, once you're really focusing

678
00:43:10,440 --> 00:43:14,024
the chaos engineering practice, then you can have

679
00:43:14,062 --> 00:43:17,384
more. But at least to start with, focus on few and these

680
00:43:17,422 --> 00:43:21,096
are the ones that are going to give you most gains. So understand your

681
00:43:21,118 --> 00:43:24,888
past outage, figure out the patterns. And then it's not the

682
00:43:24,894 --> 00:43:28,364
low hanging fruit, but it's the one that has tried to fix things that have

683
00:43:28,402 --> 00:43:32,190
the biggest blast radius and then get the tools right for that and

684
00:43:33,040 --> 00:43:36,684
the right culture. But don't forget processes because

685
00:43:36,722 --> 00:43:40,476
this is super, super important and we talked about those mechanism, right?

686
00:43:40,498 --> 00:43:44,492
So it's a complete process. So you have the tools,

687
00:43:44,626 --> 00:43:48,256
these adoption and the editing part of it, and that's

688
00:43:48,288 --> 00:43:51,716
pretty much it. Thank you very much. I write a lot on medium if you

689
00:43:51,738 --> 00:43:55,396
want to follow on Twitter, and I'm going to be here hanging out.

690
00:43:55,498 --> 00:43:58,804
Remember, I'm a bit introvert, so even though I speak

691
00:43:58,842 --> 00:44:00,820
on stage, I'm actually introvert.

692
00:44:01,960 --> 00:44:05,170
But I'm happy to talk with you. Thank you very much.

