1
00:00:00,250 --> 00:00:04,830
Are you an SRE, a developer,

2
00:00:06,610 --> 00:00:10,474
a quality engineer who wants to tackle the challenge of improving

3
00:00:10,522 --> 00:00:14,026
reliability in your DevOps? You can enable your DevOps

4
00:00:14,058 --> 00:00:17,614
for reliability with chaos native. Create your

5
00:00:17,652 --> 00:00:20,800
free account at Chaos native Litmus cloud

6
00:01:16,570 --> 00:01:20,454
hello everyone. Happy to be here. I'm here to talk about how to empower your

7
00:01:20,492 --> 00:01:23,926
developers to troubleshoot Kubernetes independently. My name

8
00:01:23,948 --> 00:01:26,994
is Itiel Shwartz and I'm the CTO and co founder of Commodore,

9
00:01:27,042 --> 00:01:30,854
the first Kubernetes native troubleshooting platform. I really believe in

10
00:01:30,892 --> 00:01:34,038
the shiftlab movement in dev empowerment.

11
00:01:34,134 --> 00:01:38,154
Other than that, in the past I worked in eBay, Forter Rookout and

12
00:01:38,192 --> 00:01:41,834
I have a lot of backend and opsit experience

13
00:01:42,032 --> 00:01:45,546
and also I'm a Kubernetes fan. So the agenda

14
00:01:45,578 --> 00:01:48,814
for today is first of all we are going to talk about the benefits and

15
00:01:48,852 --> 00:01:52,138
challenges of Kubernetes. I know everyone knows Kubernetes,

16
00:01:52,234 --> 00:01:55,394
but I'm going to do a little bit more of like a deep dive on

17
00:01:55,432 --> 00:01:59,134
what's so good and what's not that good in kubernetes.

18
00:01:59,262 --> 00:02:03,262
We are going to talk about complexity of troubleshooting Kubernetes

19
00:02:03,326 --> 00:02:07,138
and how to overcome them. So first of all, I think everyone

20
00:02:07,224 --> 00:02:10,294
knows that move fast and break things is kind of

21
00:02:10,332 --> 00:02:13,686
the new motto for the past couple of years. We are

22
00:02:13,708 --> 00:02:17,142
shipping code a lot faster and elite teams are moving even

23
00:02:17,196 --> 00:02:21,046
faster than normal teams, meaning 100, even thousands

24
00:02:21,078 --> 00:02:24,522
of deployments per day in this new

25
00:02:24,576 --> 00:02:28,186
world, in this new space, what happened is in order to move

26
00:02:28,288 --> 00:02:32,122
fast, new infrastructure has emerged and docker

27
00:02:32,186 --> 00:02:35,902
and Kubernetes are de facto the standard in this new world.

28
00:02:36,036 --> 00:02:40,154
And like 88% of organizations already adopted

29
00:02:40,202 --> 00:02:43,998
Kubernetes. So I know everything sounds

30
00:02:44,084 --> 00:02:47,922
amazing and Kubernetes has a lot of benefits. It help you save

31
00:02:47,976 --> 00:02:51,278
money, it's easy to port multicloud capabilities,

32
00:02:51,374 --> 00:02:54,606
a lot of things and it sounds like it's

33
00:02:54,638 --> 00:02:58,294
doing everything. But in the end of the day it

34
00:02:58,332 --> 00:03:02,226
does come with its price. And I think every organization

35
00:03:02,338 --> 00:03:05,922
that is moving to Kubernetes because it looks sexy,

36
00:03:05,986 --> 00:03:10,618
because it will help make their life a lot easier at

37
00:03:10,624 --> 00:03:14,378
the beginning of the migration is bombarded with issues

38
00:03:14,464 --> 00:03:18,202
that arise because they move to kubernetes. It looks very

39
00:03:18,256 --> 00:03:21,646
easy, very naive to get started, but once you are in

40
00:03:21,668 --> 00:03:26,058
there, you feel the pain, you feel how hard it is, how complex

41
00:03:26,154 --> 00:03:29,486
Kubernetes really is. And also the

42
00:03:29,508 --> 00:03:33,742
trick about kubernetes is it makes it very easy to build very complex

43
00:03:33,806 --> 00:03:37,218
systems and basically it allows you to

44
00:03:37,224 --> 00:03:39,570
shoot yourself in the leg very easily.

45
00:03:40,150 --> 00:03:44,238
So the complexity of troubleshooting and troubleshooting Kubernetes

46
00:03:44,334 --> 00:03:48,014
is basically because a lot of things happen in the Kubernetes cluster

47
00:03:48,062 --> 00:03:52,054
that you don't really know. The master can change,

48
00:03:52,092 --> 00:03:56,134
the node can change, and not all of those changes, all of those issues

49
00:03:56,252 --> 00:03:59,606
are propagated, are propagated. More than

50
00:03:59,628 --> 00:04:02,794
that, one issue, one issue with microservice can

51
00:04:02,832 --> 00:04:06,186
impact the rest of the system. And because with the move

52
00:04:06,208 --> 00:04:09,418
to Kubernetes, we are moving from a monolith application to a lot

53
00:04:09,424 --> 00:04:13,406
of microservices, a very small and innocent change in

54
00:04:13,428 --> 00:04:16,400
one service might crash the whole application.

55
00:04:17,250 --> 00:04:21,386
Other than that, there are permission issues and some organizations

56
00:04:21,418 --> 00:04:24,482
don't really trust everyone to see all of the data.

57
00:04:24,616 --> 00:04:28,158
What causes basically the lack of ability?

58
00:04:28,254 --> 00:04:32,094
CTO act independently for some team members and particularly

59
00:04:32,142 --> 00:04:35,734
for developers. And because Kubernetes is still new and not

60
00:04:35,772 --> 00:04:38,690
a lot of people are really experts in Kubernetes,

61
00:04:38,850 --> 00:04:42,530
we see how the lack of knowledge is frustrating

62
00:04:42,610 --> 00:04:45,702
for developers and for teams, and they

63
00:04:45,756 --> 00:04:49,338
don't really understand how they should operate this

64
00:04:49,504 --> 00:04:53,686
very complex system and how are they expected

65
00:04:53,718 --> 00:04:57,706
to own the services even they don't really know what is happening

66
00:04:57,808 --> 00:05:01,486
under the hood. More than that, there is the

67
00:05:01,508 --> 00:05:05,470
very big question of who is responsible for troubleshooting issues

68
00:05:05,540 --> 00:05:08,990
in Kubernetes. I think if we

69
00:05:09,060 --> 00:05:12,542
ask the same question a couple of years ago it was clear

70
00:05:12,596 --> 00:05:16,114
that the knock and opsit responsibility is

71
00:05:16,152 --> 00:05:19,474
to manage things in production. Now with the shift level

72
00:05:19,512 --> 00:05:22,866
movement in a world where for each dev there

73
00:05:22,888 --> 00:05:26,822
is one DevOps, we see more and more organization trying to

74
00:05:26,876 --> 00:05:30,646
shift this responsibility from the DevOps to

75
00:05:30,668 --> 00:05:34,038
the developer. Mainly because there are a lot of developers, they are already

76
00:05:34,124 --> 00:05:37,250
responsible for deploying the code into production.

77
00:05:37,410 --> 00:05:41,354
And if they are already deploying the code into production, then it

78
00:05:41,392 --> 00:05:44,554
only makes sense that they will be responsible for

79
00:05:44,592 --> 00:05:48,954
the troubleshooting, for the ability not only CTO

80
00:05:48,992 --> 00:05:52,190
break things, but also to fix them and to understand

81
00:05:52,340 --> 00:05:55,120
what did it break and why did it break.

82
00:05:56,370 --> 00:06:00,058
So the question is, if kubernetes is indeed complex,

83
00:06:00,154 --> 00:06:03,398
and if we want our developers to help us troubleshoot

84
00:06:03,434 --> 00:06:06,670
Kubernetes, we want them to get a full ownership

85
00:06:06,750 --> 00:06:10,670
over their application, like full end to end, from deployment

86
00:06:10,750 --> 00:06:14,754
to troubleshooting, what do we need to do as operations as

87
00:06:14,792 --> 00:06:18,662
SRE in order to allow them, in order to

88
00:06:18,716 --> 00:06:22,230
make them part of the troubleshooting cycle, and not only

89
00:06:22,300 --> 00:06:25,702
bystanders. So the step one,

90
00:06:25,756 --> 00:06:27,990
and like a lot of organizations,

91
00:06:28,730 --> 00:06:32,490
when we speak with organization, we see how they try to throw everything

92
00:06:32,560 --> 00:06:35,770
to the developers. Basically. I don't know you are now

93
00:06:35,840 --> 00:06:39,594
responsible for it. We brought Kubernetes into the organization so

94
00:06:39,632 --> 00:06:43,018
the dev can have more empowerment. It's your problem now.

95
00:06:43,104 --> 00:06:46,862
But I think one of the key things that you must start with

96
00:06:46,916 --> 00:06:50,446
is to get the buy in from the dev. You need the dev and you

97
00:06:50,468 --> 00:06:53,874
don't necessarily have to get all of the dev organization. Even a few

98
00:06:53,912 --> 00:06:57,970
champions at first are good enough. You need people that

99
00:06:58,040 --> 00:07:01,186
will want to troubleshoot and they want to troubleshoot not

100
00:07:01,208 --> 00:07:04,740
because they're like Mazoheks, but because

101
00:07:05,110 --> 00:07:08,546
it will give them more ownership, more responsibilities and

102
00:07:08,568 --> 00:07:12,454
more independence. So you need to understand how

103
00:07:12,492 --> 00:07:16,066
to harness the developers through the journey of troubleshooting,

104
00:07:16,178 --> 00:07:19,510
how you can make them part of the team and not

105
00:07:19,580 --> 00:07:22,938
something that they are reluctant to

106
00:07:22,944 --> 00:07:26,682
do. If you expect them to wake up in the middle of the night and

107
00:07:26,736 --> 00:07:29,882
to understand what is happening in the Kubernetes cluster, you have

108
00:07:29,936 --> 00:07:33,310
to get the bind, you have to get them engaged,

109
00:07:33,890 --> 00:07:37,806
and if not, it's not really going to work after you

110
00:07:37,828 --> 00:07:41,498
get them engaged. And now everyone really wants to troubleshoot.

111
00:07:41,594 --> 00:07:45,266
You need to spend the time on the training part. A lot

112
00:07:45,288 --> 00:07:48,302
of developers, developers are measured,

113
00:07:48,366 --> 00:07:52,114
or used to be measured on the quality of the code they

114
00:07:52,152 --> 00:07:55,602
write and the number of features they write, not necessarily on

115
00:07:55,656 --> 00:07:59,694
how good they are at troubleshooting. They have a very micro

116
00:07:59,822 --> 00:08:03,106
and aeroscope. I don't like to say every developer

117
00:08:03,138 --> 00:08:06,774
is like this, but as a whole, while the operation people that

118
00:08:06,812 --> 00:08:10,634
troubleshoot has a more of a macro level view. And what you need to do

119
00:08:10,672 --> 00:08:14,250
is help them to understand the world as you see

120
00:08:14,400 --> 00:08:17,530
to write the playbook, to go in and train

121
00:08:17,600 --> 00:08:21,794
them so they will have all of the necessary knowledge

122
00:08:21,862 --> 00:08:25,326
in order to troubleshoot independently. You can't expect to

123
00:08:25,348 --> 00:08:29,438
say, okay, you're a developer, I see that you want to troubleshoot, knock yourself

124
00:08:29,524 --> 00:08:33,326
up. You should help them CTO, make the

125
00:08:33,348 --> 00:08:36,686
journey a lot easier by giving them some of the knowledge

126
00:08:36,718 --> 00:08:40,254
that you already have about both the technical parts of kubernetes

127
00:08:40,382 --> 00:08:44,542
and also about the company specific parts of how is Kubernetes

128
00:08:44,606 --> 00:08:46,150
managed? In my organization,

129
00:08:48,170 --> 00:08:52,034
the step three is to give them the tools they need to succeed.

130
00:08:52,162 --> 00:08:56,706
Again, I will say that most monitoring

131
00:08:56,738 --> 00:09:00,314
tools, most troubleshooting tools like today are more

132
00:09:00,352 --> 00:09:03,494
focused on the operation. People like Commodore is can exception,

133
00:09:03,542 --> 00:09:07,900
but I will say most of them are macro level

134
00:09:08,350 --> 00:09:12,314
operation focused. You need to help them have

135
00:09:12,352 --> 00:09:16,014
the right tools in order to troubleshoot efficiently. And that

136
00:09:16,052 --> 00:09:19,806
means creating them the relevant dashboard in Datadog training to

137
00:09:19,828 --> 00:09:23,306
them, how they can add it or change this in Datadog or Prometheus,

138
00:09:23,338 --> 00:09:27,122
it doesn't really matter. You have to make sure that once an issue

139
00:09:27,176 --> 00:09:30,334
occurring in the system, they have the relevant places

140
00:09:30,382 --> 00:09:35,526
and tools to look at. They should have the

141
00:09:35,628 --> 00:09:39,126
required permissions to go, but also it

142
00:09:39,148 --> 00:09:42,982
should be part of the training on understanding CTO them how

143
00:09:43,036 --> 00:09:47,062
to use those certain tools. And once

144
00:09:47,116 --> 00:09:50,486
we have all of these tools, we must give them the permission. You can

145
00:09:50,518 --> 00:09:54,262
really experts someone CTO be responsible

146
00:09:54,326 --> 00:09:58,262
for the production environment. When he has zero production

147
00:09:58,406 --> 00:10:01,946
accessibility. He can't see the logs or he can't do actions such

148
00:10:01,968 --> 00:10:05,326
as rollback or increase replicas and so on. So if you

149
00:10:05,348 --> 00:10:08,494
experts them to wake up in the middle of the night troubleshooting the issue,

150
00:10:08,612 --> 00:10:12,970
you must give them not only the necessary tools, but more than the permission

151
00:10:13,130 --> 00:10:17,102
and the abilities to do actions

152
00:10:17,166 --> 00:10:21,074
in order to remediate the issue. One of the most frustrating things that

153
00:10:21,112 --> 00:10:24,354
I see in organization is that the developers can

154
00:10:24,392 --> 00:10:27,814
deploy the code to production, but for some reason they can't really roll back

155
00:10:27,852 --> 00:10:31,302
to the previous version. And that in turn just

156
00:10:31,356 --> 00:10:34,786
creates frustration for the developers and for the DevOps.

157
00:10:34,818 --> 00:10:38,466
Like everyone is not happy because the DevOps

158
00:10:38,498 --> 00:10:41,754
is required CTo be in the loop every time we need CTO

159
00:10:41,792 --> 00:10:45,066
roll back. And on the other hand, the developers need to call up

160
00:10:45,088 --> 00:10:48,730
the DevOps just so you can click the button. So free yourself,

161
00:10:48,880 --> 00:10:52,462
open the bottlenecks and allow the developers CTO take

162
00:10:52,596 --> 00:10:56,446
full responsibility over the lifecycle of

163
00:10:56,468 --> 00:11:00,062
the system. And I will say

164
00:11:00,116 --> 00:11:03,874
that we are talking about troubleshooting, about the

165
00:11:04,072 --> 00:11:08,242
procedures, about the training, about the tool. It is important

166
00:11:08,376 --> 00:11:11,810
to make sure you are a single team,

167
00:11:11,960 --> 00:11:16,178
that the core mission is to make the system better and

168
00:11:16,264 --> 00:11:19,926
to improve the troubleshooting process and time. So you needed

169
00:11:19,948 --> 00:11:23,622
to find the relevant partners. It can be even one or two tech

170
00:11:23,676 --> 00:11:27,046
lead in the dev organization to get started. You need

171
00:11:27,068 --> 00:11:30,646
to remember this is a marathon. It's not a sprint. It's not

172
00:11:30,668 --> 00:11:34,102
like one silver of a bullet. And all of your developers

173
00:11:34,166 --> 00:11:37,594
will be just as good as you are. You need to remember, it will take

174
00:11:37,632 --> 00:11:41,114
time. You will need to change some of the playbooks, you will need

175
00:11:41,152 --> 00:11:45,022
to change some of the tools, you will need to adapt them. You will maybe

176
00:11:45,076 --> 00:11:49,150
need to create new actions, a new access mechanism to

177
00:11:49,220 --> 00:11:53,242
accommodate the fact that the developers are now owning the troubleshooting

178
00:11:53,306 --> 00:11:56,882
process. But I don't think you can really

179
00:11:56,936 --> 00:12:00,366
take it as a bummer. Like now I need to write tools

180
00:12:00,398 --> 00:12:04,718
for the developers to use or something like that. The opposite.

181
00:12:04,814 --> 00:12:08,454
You are now writing tools that will empower your developer and

182
00:12:08,492 --> 00:12:12,006
in this way you are basically freeing yourself out of

183
00:12:12,028 --> 00:12:15,318
troubleshooting and out of waking up in the middle of the night.

184
00:12:15,404 --> 00:12:18,886
I think one thing that good

185
00:12:18,988 --> 00:12:22,538
operation and developers love to do is to automate themselves

186
00:12:22,624 --> 00:12:26,394
out of the process. And this is the state of mind that you

187
00:12:26,432 --> 00:12:29,778
need to think, how can I be less involved in troubleshooting?

188
00:12:29,894 --> 00:12:33,006
How can I give more tools, more capabilities to

189
00:12:33,028 --> 00:12:37,018
the developers? So to conclude

190
00:12:37,114 --> 00:12:41,118
the talk today, I will say that it's important when starting to

191
00:12:41,124 --> 00:12:44,098
adopt Kubernetes to think about all of these things.

192
00:12:44,264 --> 00:12:48,226
You can really expect to move everything from the

193
00:12:48,248 --> 00:12:52,798
legacy system into Kubernetes and expect things to work normally.

194
00:12:52,974 --> 00:12:56,514
You should try and build the right foundation from the ground

195
00:12:56,562 --> 00:13:00,850
up, meaning have the dev involved in picking the technologies,

196
00:13:00,930 --> 00:13:04,434
in troubleshooting from day one and getting the bind

197
00:13:04,482 --> 00:13:07,590
from them. More than that, I will say that

198
00:13:07,660 --> 00:13:11,202
in the end of the day this will increase the velocity of

199
00:13:11,276 --> 00:13:14,666
everyone in the team, both the developers, because they

200
00:13:14,688 --> 00:13:18,266
will be able to write code fetcher and once they have issue they will

201
00:13:18,288 --> 00:13:21,822
be able to solve it by themselves. And it will also help

202
00:13:21,876 --> 00:13:25,022
to free the DevOps and the SRE because they

203
00:13:25,076 --> 00:13:29,086
won't be bombarded with developers that are like why is

204
00:13:29,108 --> 00:13:33,066
it not working? Can you fix my application? My application is crashing

205
00:13:33,098 --> 00:13:37,006
and so on. So both the developers and operations

206
00:13:37,118 --> 00:13:40,690
should be happy about this process as it will make

207
00:13:40,760 --> 00:13:44,802
both of them much more efficient and it will save time for

208
00:13:44,856 --> 00:13:48,038
everyone. So I think having the developer as a

209
00:13:48,044 --> 00:13:51,798
critical part of the troubleshooting process is a must for

210
00:13:51,964 --> 00:13:55,542
every organization that want CTO move fast. And I think

211
00:13:55,596 --> 00:13:58,934
that it's not that hard, but it is a process,

212
00:13:59,052 --> 00:14:03,958
it will take time and you need to understand that even

213
00:14:04,044 --> 00:14:07,526
it might be like a bit hard at first. Over the

214
00:14:07,548 --> 00:14:10,190
long term it's worth your time.

215
00:14:10,380 --> 00:14:14,106
And that was me talking about troubleshooting

216
00:14:14,138 --> 00:14:17,534
Kubernetes. It was really fun being here. Thank you a lot

217
00:14:17,572 --> 00:14:17,660
everyone.

