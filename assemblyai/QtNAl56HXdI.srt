1
00:00:41,010 --> 00:00:44,726
Hi, welcome to building a serverless fintech startup bonnet. First of

2
00:00:44,748 --> 00:00:48,194
all, let me just introduce you to me. I'm Daniel Bass.

3
00:00:48,242 --> 00:00:51,614
I'm the CTO of Zeti. I was in

4
00:00:51,652 --> 00:00:54,942
a previous life the lead engineer for private assets and alternatives team,

5
00:00:54,996 --> 00:00:58,960
a major investment manager. So my background is in financial technology.

6
00:00:59,410 --> 00:01:02,870
I'm an author and a blogger, so I've written two books,

7
00:01:02,970 --> 00:01:06,386
one on beginning serverless architectures, Microsoft Azure, and then the

8
00:01:06,408 --> 00:01:09,294
second more recent one on advanced serverless architectures,

9
00:01:09,342 --> 00:01:13,566
Microsoft Azure, which don't let the advanced intimidate

10
00:01:13,598 --> 00:01:17,700
you. It's a very accessible book and definitely the one I'd recommend.

11
00:01:18,150 --> 00:01:21,334
I also maintain a serverless blog where

12
00:01:21,372 --> 00:01:23,862
I write about all of the things that I'm talking about today and more.

13
00:01:23,916 --> 00:01:27,250
So feel free to go and check that out at Daniel

14
00:01:27,330 --> 00:01:30,586
Bass. I thought I should also introduce you

15
00:01:30,608 --> 00:01:34,518
to actually what Zeti is. So Zeti is a paypermile

16
00:01:34,694 --> 00:01:38,326
digital financing platform to accelerating the adoption of zero emission

17
00:01:38,358 --> 00:01:41,722
vehicles. Now what does that mean? Well, the world

18
00:01:41,856 --> 00:01:45,578
desperately needs to move to zero emission vehicles to solves the climate crisis.

19
00:01:45,674 --> 00:01:48,926
It is a simple fact that if we're going to do that, we need to

20
00:01:48,948 --> 00:01:51,678
have zero emission vehicles powered by renewable energy.

21
00:01:51,844 --> 00:01:56,106
We're tackling mostly the renewable, the zero emission vehicles

22
00:01:56,138 --> 00:01:59,090
part of that. And these current zero emission vehicles on the market,

23
00:01:59,160 --> 00:02:02,802
I. E battery electric, is the majority one currently. They do actually

24
00:02:02,856 --> 00:02:05,540
present quite a few challenges for people to switch to.

25
00:02:05,990 --> 00:02:09,766
They're more expensive, as I think people are fairly familiar with, but they also have

26
00:02:09,788 --> 00:02:13,014
quite different patterns in terms of their usage. So the range is

27
00:02:13,052 --> 00:02:16,242
lower, but they also don't require any maintenance

28
00:02:16,386 --> 00:02:20,202
or very, very little maintenance. And that actually makes it very difficult for companies

29
00:02:20,256 --> 00:02:23,670
that have built their business models around the existing

30
00:02:23,750 --> 00:02:27,226
way that petrol and diesel vehicles work. So what

31
00:02:27,248 --> 00:02:30,902
we're doing is we're making it easier and more efficient for asset operators

32
00:02:30,966 --> 00:02:34,138
to shift to zero emission vehicles. And then weve

33
00:02:34,154 --> 00:02:38,490
also making sure that the investors who are funding that switch

34
00:02:38,570 --> 00:02:42,554
get a reasonable return on their investment. The real key innovation

35
00:02:42,602 --> 00:02:46,206
there is the pay per mile aspect. So rather than a fixed

36
00:02:46,238 --> 00:02:49,694
monthly payment, instead if youll drive 0 mile

37
00:02:49,742 --> 00:02:53,138
one month you would pay zero pounds on that month. And if you

38
00:02:53,144 --> 00:02:56,802
drive 1000 miles you would pay, let's say 30 pence per mile

39
00:02:56,866 --> 00:03:00,134
and you'd pay 30 pounds. This is really,

40
00:03:00,172 --> 00:03:03,782
really good for vehicles operators who generally think

41
00:03:03,836 --> 00:03:06,706
in terms of revenue per mile. So taxi drivers,

42
00:03:06,738 --> 00:03:09,914
delivery vehicle companies and that sort of thing.

43
00:03:10,032 --> 00:03:13,446
So what is serverless? That is an eternal

44
00:03:13,478 --> 00:03:16,586
question. It's not a fantastic name as it's kind

45
00:03:16,608 --> 00:03:19,978
of constantly debated and slightly confused about

46
00:03:20,064 --> 00:03:23,354
what it is, but the one thing I would say is that it is more

47
00:03:23,392 --> 00:03:26,734
than just function as a service. So a lot of people will have heard of

48
00:03:26,772 --> 00:03:30,010
AWS Lambda as your functions or Google cloud functions.

49
00:03:30,090 --> 00:03:33,422
Serverless is much more than just that. It really should include all

50
00:03:33,556 --> 00:03:37,346
services that I think of as being utility like. So you pay for

51
00:03:37,368 --> 00:03:41,138
what you use, it's instantly available on tap, it will scale to

52
00:03:41,224 --> 00:03:44,866
virtually any amount, you don't need to manage it. When you switch on

53
00:03:44,888 --> 00:03:48,146
a light bulb, you don't have to think about what frequency the electricity is

54
00:03:48,168 --> 00:03:51,734
being profile at. Everything just works. There's a bunch of services like that.

55
00:03:51,852 --> 00:03:54,678
It services like that. So cdns for example,

56
00:03:54,764 --> 00:03:58,258
you just upload videos to a CDN and it just works. You don't

57
00:03:58,274 --> 00:04:01,862
have to think about all of the details of how do they split that across

58
00:04:01,916 --> 00:04:04,378
all of the edge servers around the world and all that sort of thing.

59
00:04:04,464 --> 00:04:08,054
It is just fire and forget. Similar things with pay per use databases.

60
00:04:08,102 --> 00:04:11,398
So things like Google Spanner,

61
00:04:11,494 --> 00:04:15,054
you know, you just pay per database transaction and it works

62
00:04:15,092 --> 00:04:18,714
out everything for you, just put your data in there, it works out indexing

63
00:04:18,762 --> 00:04:22,126
and all that sort of stuff and it just works. So I'd say

64
00:04:22,148 --> 00:04:25,842
more broadly, a serverless mindset can be used to

65
00:04:25,896 --> 00:04:29,842
minimize waste and undifferentiated heavy lifting. So if your

66
00:04:29,896 --> 00:04:32,766
company's business is managing kubernetes clusters,

67
00:04:32,878 --> 00:04:36,622
then it's probably a fantastic thing to become very good at managing kubernetes

68
00:04:36,686 --> 00:04:39,990
clusters. But there's only a few of those companies, and there are a lot more

69
00:04:40,060 --> 00:04:43,634
companies that do that whilst their actual value is selling

70
00:04:43,682 --> 00:04:47,046
insurance or doing whatever. Being a

71
00:04:47,068 --> 00:04:50,842
cafe, like all sorts of different things. If you're doing that, it's not the actual

72
00:04:50,896 --> 00:04:54,502
value. And there is an established way of an automatable

73
00:04:54,566 --> 00:04:58,854
way of doing that. I youll classify that as undifferentiated heavy lifting.

74
00:04:58,982 --> 00:05:03,114
You're doing a lot of work that doesn't actually directly translate CTO

75
00:05:03,232 --> 00:05:06,734
value for your customers. Whereas a service mindset says

76
00:05:06,772 --> 00:05:10,350
right, let's try and make everything that isn't in that direct value

77
00:05:10,420 --> 00:05:13,902
chain of getting value to the customer, let's get rid of that and try and

78
00:05:13,956 --> 00:05:17,674
make it automated, use services to do it. And these focus

79
00:05:17,732 --> 00:05:21,250
only on the things that we do and we do well and that our customers

80
00:05:21,320 --> 00:05:25,154
will value. So why is serverless supposed to be a good fit for startups now?

81
00:05:25,192 --> 00:05:28,326
I've used it extensively in an enterprise world and

82
00:05:28,348 --> 00:05:32,322
it has very, very good benefits these, but now I'm in this startup

83
00:05:32,386 --> 00:05:35,494
world, it's been quite good to see that in

84
00:05:35,532 --> 00:05:39,318
theory the benefits are significant here too. Pay for what you use

85
00:05:39,484 --> 00:05:42,970
is really good for a startup where you've got very few customers,

86
00:05:43,120 --> 00:05:47,110
but when you've got very, very few customers, you also generally have very little funding

87
00:05:47,190 --> 00:05:50,938
and very little revenue. So that means that your bills are

88
00:05:50,944 --> 00:05:54,074
small when your revenue is small, and your bills only get big

89
00:05:54,192 --> 00:05:58,222
when hopefully your revenue is big, or at least your funding's big. That mapping is

90
00:05:58,276 --> 00:06:01,498
really nice for your sort of cash flow management. And if you're

91
00:06:01,514 --> 00:06:04,734
sort of seeing similarities between Zetti's model

92
00:06:04,932 --> 00:06:09,398
for turning finance into a bit of a utility and service's

93
00:06:09,434 --> 00:06:12,878
model of turning compared and it services into a bit of a utility,

94
00:06:12,974 --> 00:06:16,658
then that's no accident. The other benefits of serverless, you have

95
00:06:16,664 --> 00:06:20,134
a much faster development cycle, so you should be able to ship product

96
00:06:20,172 --> 00:06:23,286
a lot quicker. Scaling serverless system so generally should

97
00:06:23,308 --> 00:06:26,242
be considered to be a zero manual intervention. It should just scale.

98
00:06:26,306 --> 00:06:29,686
That's supposed to be very useful. If youll startup is suddenly on the how

99
00:06:29,708 --> 00:06:33,318
can you use homepage and everyone visits your website and it's

100
00:06:33,334 --> 00:06:36,842
always embarrassing if that happens. And then you can't capitalize on that traffic because

101
00:06:36,896 --> 00:06:40,394
your server is serving 500 and it's not great

102
00:06:40,432 --> 00:06:44,410
for your public image. So then other benefits

103
00:06:44,480 --> 00:06:47,866
are things like there's no patching and the only security that you have to worry

104
00:06:47,898 --> 00:06:51,226
about is the security of the code you yourself are uploading.

105
00:06:51,258 --> 00:06:55,806
So that's a really subtle point. But say if

106
00:06:55,828 --> 00:06:59,326
you decided to host your startup's code on a server

107
00:06:59,358 --> 00:07:02,738
plugged in in the corner behind me, if you think about all of the

108
00:07:02,744 --> 00:07:05,874
different security aspects, you need to think about there's a vast amount

109
00:07:05,912 --> 00:07:08,526
that are nothing to do with code. You've got to make sure that you install

110
00:07:08,568 --> 00:07:12,006
a burglar alarm. You've got to make sure that there's a

111
00:07:12,028 --> 00:07:15,366
failsafe power in case someone decides to, I don't know,

112
00:07:15,388 --> 00:07:18,646
go and cut your mains power or something here. Depending on what

113
00:07:18,668 --> 00:07:21,526
you're putting on that server, I don't know why anyone youll try and attack you

114
00:07:21,548 --> 00:07:24,746
quite so thoroughly, but in a financial world you do need to think

115
00:07:24,768 --> 00:07:27,926
about these sort of things because a lot of money can be made by attackers

116
00:07:28,118 --> 00:07:31,546
if they manage to compromise you. And then there's all sorts of other stuff as

117
00:07:31,568 --> 00:07:34,614
well. Like if you're running Linux on that server,

118
00:07:34,662 --> 00:07:38,126
there's recently a massive exploit that have been in the code base for like

119
00:07:38,148 --> 00:07:40,910
ten years. And you're going to make sure that you patch that very, very quickly.

120
00:07:40,980 --> 00:07:44,558
Otherwise an attacker can just get on by onto your server by just running a

121
00:07:44,564 --> 00:07:48,322
script. Now with serverless there are no servers, they're all managed services.

122
00:07:48,456 --> 00:07:52,290
So the only real security you need to worry about is your own code,

123
00:07:52,440 --> 00:07:56,206
which is a massive benefit. The other side is

124
00:07:56,248 --> 00:07:59,830
something that I don't have strong data for, and I'll admit that

125
00:07:59,900 --> 00:08:03,846
up front, but youll would expect

126
00:08:04,028 --> 00:08:07,954
that serverless systems would be generally better environmentally,

127
00:08:08,082 --> 00:08:11,890
and that's because your utilization of your system always hovers

128
00:08:12,050 --> 00:08:15,846
just a bit below 100% because obviously no one can get to 100% compared to

129
00:08:15,868 --> 00:08:19,314
a normal system. Say if you ran a server with, I don't know, four cpus

130
00:08:19,362 --> 00:08:22,666
and eight gig of Ram, and you need to do that because at the peak

131
00:08:22,698 --> 00:08:25,838
time during the day you use four gig of that ram or six gig of

132
00:08:25,844 --> 00:08:28,734
that Ram, and maybe when you have a spike you might go up a bit

133
00:08:28,772 --> 00:08:31,966
more. That means that the vast majority of the time in the middle

134
00:08:31,988 --> 00:08:36,014
of the night or whatever, you're using 0% or 1%. Now with a serverless system

135
00:08:36,052 --> 00:08:39,714
you scale down to zero. So when you're using nothing, you actually

136
00:08:39,752 --> 00:08:43,294
are using nothing. So the utilization is a lot better. There's a lot less waste.

137
00:08:43,342 --> 00:08:46,850
Now, the cloud providers don't actually provide breakdowns of the different energy

138
00:08:46,920 --> 00:08:49,782
usages and co2 emissions of each different service.

139
00:08:49,836 --> 00:08:53,558
So you can't say for certain, but logically it should be much better

140
00:08:53,644 --> 00:08:56,598
because of the lack of waste. Let's go on to the Xero platform.

141
00:08:56,684 --> 00:09:00,334
So zero is the beating heart of Zeti. It tracking

142
00:09:00,402 --> 00:09:03,786
thousands of vehicles in real time, and in future is going to track hundreds of

143
00:09:03,808 --> 00:09:07,494
thousands to hopefully millions. It keeps basically monitors

144
00:09:07,542 --> 00:09:10,826
where those vehicles are, which is important for

145
00:09:10,928 --> 00:09:14,886
default conditions, and maybe if there's something wrong

146
00:09:14,928 --> 00:09:18,698
with the vehicle, et cetera. It receives updates for things like crashes.

147
00:09:18,794 --> 00:09:21,806
So we need to know if a vehicle has been written off. And we also

148
00:09:21,828 --> 00:09:25,566
need to bill operators for their usage, so we need to check their

149
00:09:25,588 --> 00:09:29,106
odometer values. One of the key things it can also do is it

150
00:09:29,128 --> 00:09:32,434
informs investors of the performance of their investment in real time.

151
00:09:32,472 --> 00:09:35,790
So that's really cool. You've sort of got as an investor,

152
00:09:35,870 --> 00:09:38,900
usually if you're investing in vehicle finance or whatever,

153
00:09:39,210 --> 00:09:42,694
you've sort of got a finger in the air. Best guess of what

154
00:09:42,732 --> 00:09:46,454
the value of your investment is at any given time, because at best

155
00:09:46,572 --> 00:09:50,774
you get paid once a month, but you don't know if these person's

156
00:09:50,902 --> 00:09:54,538
actually using the vehicle at all in that time. So there was a

157
00:09:54,544 --> 00:09:58,246
big default of hurts at the start of the coronavirus

158
00:09:58,278 --> 00:10:02,126
pandemic. And that was mostly because there was a lot of finance lent out

159
00:10:02,148 --> 00:10:05,466
to them. But when the pandemic startup, no one was renting cars,

160
00:10:05,578 --> 00:10:09,294
so people had a massive delay between seeing that

161
00:10:09,332 --> 00:10:13,082
and then that sort of debt going defaulting.

162
00:10:13,146 --> 00:10:16,458
So being able to see all of your investment performance in real time for

163
00:10:16,484 --> 00:10:19,538
this sort of thing is very rare. You just don't see it. And it's a

164
00:10:19,544 --> 00:10:23,374
real differentiator for Xero. It's built entirely from serverless components,

165
00:10:23,422 --> 00:10:26,882
so there isn't a single Linux jump box or

166
00:10:26,936 --> 00:10:30,486
anything in it. All I've got is my Mac mini on

167
00:10:30,508 --> 00:10:33,814
the desk in front of me and my sort of managed cloud services.

168
00:10:33,932 --> 00:10:37,318
So I'm using Azure functions, Cosmos, TB, Eventgrid and

169
00:10:37,324 --> 00:10:40,774
Azure static web apps amongst a few other

170
00:10:40,812 --> 00:10:44,106
sort of services. So there is no physical server for

171
00:10:44,128 --> 00:10:48,026
me to actually use and no virtual server either. It's all managed services all

172
00:10:48,048 --> 00:10:51,498
the way down. So this is sort of an example of how the

173
00:10:51,504 --> 00:10:55,246
Xero platform works for a given use case.

174
00:10:55,428 --> 00:10:59,306
It's not a particular part of the zero platform, it's more a generalization of several

175
00:10:59,338 --> 00:11:03,590
sections. So on the left here you can see our users.

176
00:11:03,690 --> 00:11:07,646
So they might be investors, they might be asset operators,

177
00:11:07,678 --> 00:11:11,406
we call them. So the people who are operating fleets of vehicles

178
00:11:11,518 --> 00:11:15,410
and they're visiting a static web app now that

179
00:11:15,480 --> 00:11:18,758
is say a react application or an angular application,

180
00:11:18,844 --> 00:11:22,358
we tend to use react and typescript and they visit that

181
00:11:22,444 --> 00:11:26,774
and that app then goes off and says, right, I want the

182
00:11:26,812 --> 00:11:30,754
account details for this person. So it goes off to an Azure function. The azure

183
00:11:30,802 --> 00:11:34,314
function spins up from nothing and goes okay, let's go and get

184
00:11:34,352 --> 00:11:38,070
the account details for that person goes off to Cosmos Db where they're stored.

185
00:11:38,150 --> 00:11:41,562
Cosmos DB is in fully serverless mode as well. So it

186
00:11:41,616 --> 00:11:45,434
goes from nothing and goes oh, wakes up and sends

187
00:11:45,562 --> 00:11:49,454
the account details back. We also have the other way around for

188
00:11:49,492 --> 00:11:52,666
this, so that sort of pull method where the user

189
00:11:52,698 --> 00:11:56,034
has to be logged on for it to happen. But we also have the other

190
00:11:56,072 --> 00:11:59,842
end of our system, which is also serverless and flexible and

191
00:11:59,896 --> 00:12:03,294
does change vastly in terms of its usage, which is the vehicles

192
00:12:03,342 --> 00:12:07,314
driving around. So most vehicles tend to be parked at night,

193
00:12:07,432 --> 00:12:11,286
although if you're looking at things like taxi vehicles, that can vary quite

194
00:12:11,308 --> 00:12:14,998
heavily, obviously, because the busy hours can sometimes on Saturday nights, for example,

195
00:12:15,084 --> 00:12:18,294
can be a very busy time and they might be parked during the day during

196
00:12:18,332 --> 00:12:21,830
that period. But generally there's got CTO, be some downtime

197
00:12:21,910 --> 00:12:25,706
in a business that's operating vehicles, if anything, just because the drivers need to

198
00:12:25,728 --> 00:12:29,574
sleep. So only when the vehicles are driving do we actually collect

199
00:12:29,622 --> 00:12:33,334
events from them. We have an azure function that ingests all of those events,

200
00:12:33,382 --> 00:12:36,558
takes them all in, basically turns them into our view of the world. So we

201
00:12:36,564 --> 00:12:39,966
have lots and lots of different providers. You can imagine like the event coming from

202
00:12:39,988 --> 00:12:43,082
a Renault is going to be different from the event coming from a Tesla.

203
00:12:43,146 --> 00:12:46,674
And it depends. We've got chips and trackers in each of them and

204
00:12:46,712 --> 00:12:50,146
they're different makes and things like that. So it handles all of that stuff

205
00:12:50,248 --> 00:12:54,414
and then it pushes it onto Eventgrid. Now EventGrid is a massively

206
00:12:54,462 --> 00:12:58,098
scalable event handling solution. You can just publish as many events to it

207
00:12:58,104 --> 00:13:00,998
as you like and it will just work. And we use that.

208
00:13:01,084 --> 00:13:04,674
And then to get it into the user's browser we use something called signalr,

209
00:13:04,722 --> 00:13:09,558
which is a nice way of basically wrapping websockets

210
00:13:09,734 --> 00:13:13,610
and all of that sort of stuff. The real power of it is

211
00:13:13,760 --> 00:13:17,466
actually managing a websocket connection is hard and some

212
00:13:17,488 --> 00:13:20,774
browsers don't support it or support only part of the protocol,

213
00:13:20,822 --> 00:13:23,886
et cetera. Signalr just takes that all away from you as a developer. You just

214
00:13:23,908 --> 00:13:28,186
publish it to Signalr and then Signalr will work out between the client's

215
00:13:28,218 --> 00:13:31,806
browser and the serverless, which is the best way to

216
00:13:31,828 --> 00:13:35,746
connect. And yeah, so that's sort of the

217
00:13:35,768 --> 00:13:39,202
way that Xero platform works in general. And you can see that

218
00:13:39,256 --> 00:13:42,340
if weve only collecting events when vehicles are actually moving,

219
00:13:43,190 --> 00:13:46,414
you can see there's vast variations in terms of the traffic

220
00:13:46,462 --> 00:13:49,010
through that event grid and that signal r instance,

221
00:13:49,850 --> 00:13:53,186
during the day or during the busy times, it's going to be very, very busy,

222
00:13:53,218 --> 00:13:57,078
and then it'll go right down to virtually nothing during non busy times.

223
00:13:57,244 --> 00:14:00,746
So what's really powerful here is the static web app. That's what

224
00:14:00,768 --> 00:14:04,886
really allows you to eliminate bucketed

225
00:14:04,998 --> 00:14:08,486
usage, and that's how I refer to things that are server

226
00:14:08,518 --> 00:14:11,846
youll if you like. What you're really doing is paying for a bucket of usage.

227
00:14:11,958 --> 00:14:14,890
So even if you're only using 5% of that bucket,

228
00:14:14,970 --> 00:14:17,802
with bucketed usage, you have to pay for the entire bucket.

229
00:14:17,866 --> 00:14:21,274
So if you're thinking about virtual machine,

230
00:14:21,402 --> 00:14:24,698
maybe you have to buy a dual core or a single core

231
00:14:24,714 --> 00:14:27,886
machine. Even if you're only using that core for 5% of the time, you still

232
00:14:27,908 --> 00:14:30,578
need to pay for the whole core. You can't pay for a fraction of it

233
00:14:30,664 --> 00:14:33,842
to go fully serverless and get all of the billing benefits

234
00:14:33,896 --> 00:14:36,966
and all of the efficiency benefits, you need to be able to eliminate that from

235
00:14:36,988 --> 00:14:40,326
your entire architecture. The static web app allows you to finally

236
00:14:40,428 --> 00:14:43,878
do that and eliminate it entirely. So you can think of it as

237
00:14:43,884 --> 00:14:47,238
an alternative to MVC. So if

238
00:14:47,244 --> 00:14:50,246
you're used to running ASP net or Django,

239
00:14:50,358 --> 00:14:54,422
it's kind of a drop in for that. It consists of a bundle of HTML,

240
00:14:54,486 --> 00:14:58,086
JavaScript and CSS, or alternatively webassembly.

241
00:14:58,118 --> 00:15:02,026
If you're using frameworks like U or Blazor that are just loaded files

242
00:15:02,058 --> 00:15:05,034
into the user's browser, so they could be hosted anywhere.

243
00:15:05,082 --> 00:15:08,814
Generally they're hosted in cdns or something like that.

244
00:15:08,932 --> 00:15:12,474
Content delivery networks, you can use front end frameworks,

245
00:15:12,522 --> 00:15:15,614
so we use react and typescript as our preferred one.

246
00:15:15,652 --> 00:15:18,894
But again, we're fairly flexible. If there's something that comes along that we like,

247
00:15:18,932 --> 00:15:22,686
we'll definitely try it out once these apps are loaded up. And the

248
00:15:22,708 --> 00:15:25,766
way to really think about this sort of thing is think of them as an

249
00:15:25,788 --> 00:15:29,286
app, like an app on your phone, and that will help in terms of the

250
00:15:29,468 --> 00:15:32,566
security concepts and things like that is if you think of it as an app

251
00:15:32,588 --> 00:15:35,366
on your phone rather than a web page on the Internet, that sort of makes

252
00:15:35,388 --> 00:15:39,174
it easier. So once loaded up, they then go cto the

253
00:15:39,212 --> 00:15:42,838
secure back end, which is going to be in our case as your functions.

254
00:15:42,934 --> 00:15:45,738
And that has very, very stringent security.

255
00:15:45,904 --> 00:15:49,034
So for internal staff we'll use as your ad,

256
00:15:49,152 --> 00:15:52,874
and for external customers we'll use as your ad b to c, the world's

257
00:15:52,922 --> 00:15:56,574
worst named cloud service. And what that effectively is,

258
00:15:56,612 --> 00:16:00,046
is hosted login. So we don't store anyone's usernames and

259
00:16:00,068 --> 00:16:03,390
passwords, we don't even store their email address or anything like that.

260
00:16:03,460 --> 00:16:07,138
We leave that the service provided by Azure to do. And that

261
00:16:07,224 --> 00:16:10,660
allows us to protect people's information a lot better.

262
00:16:11,430 --> 00:16:14,962
Yeah, it also allows us to do things like apply groups. And this is basically

263
00:16:15,016 --> 00:16:18,294
a full enterprise. It allows you to use what

264
00:16:18,332 --> 00:16:21,686
an enterprise would use for segmenting these users. And I've done

265
00:16:21,708 --> 00:16:25,270
it on a massive scale for nothing

266
00:16:25,340 --> 00:16:29,658
or virtually nothing. So you can use these really top end,

267
00:16:29,824 --> 00:16:33,574
very expensive Internet commerce tools for virtually

268
00:16:33,622 --> 00:16:37,478
nothing if they are serverless in nature. These other benefit

269
00:16:37,494 --> 00:16:41,222
of things, static web app is it's so scalable. So to scale

270
00:16:41,286 --> 00:16:45,274
any sort of web application, what you generally start to look at doing is separating

271
00:16:45,322 --> 00:16:48,318
out the front and the back end. So say, if you've ever looked at,

272
00:16:48,324 --> 00:16:51,838
I don't know, say, scaling a WordPress install, right. One of

273
00:16:51,844 --> 00:16:55,718
the first things that they advise you to do is move all of your static

274
00:16:55,754 --> 00:16:59,026
content onto a content delivery network. Right. And then further things

275
00:16:59,048 --> 00:17:02,558
that you can do is. Right, well, let's maybe switch out so that we're

276
00:17:02,574 --> 00:17:05,826
using APIs on the back end and

277
00:17:06,008 --> 00:17:09,314
we're loading up a single page application instead.

278
00:17:09,432 --> 00:17:13,240
And that will shift some of the processing from our side to the client side.

279
00:17:14,330 --> 00:17:17,286
Once you've done that, you can then separate them entirely. So you can have the

280
00:17:17,308 --> 00:17:20,426
front end hosted somewhere totally separately to the back end and you can scale them

281
00:17:20,448 --> 00:17:24,070
separately. So it means that even if you don't

282
00:17:24,150 --> 00:17:27,066
keep everything in a serverless mode forever, for example,

283
00:17:27,168 --> 00:17:31,014
maybe for whatever reason you need to shift your API layer to be permanently

284
00:17:31,062 --> 00:17:34,458
hosted. Maybe you don't want cold startup, which are serverless,

285
00:17:34,634 --> 00:17:38,826
particular thing for serverless, or you need to be within a virtual network

286
00:17:38,938 --> 00:17:42,446
that has very specific controls. Whatever it is, you're in a

287
00:17:42,468 --> 00:17:45,774
very nice adaptable point of view. It's no bad

288
00:17:45,812 --> 00:17:48,978
architecture to be in, if you like. So yeah, so the benefits

289
00:17:49,064 --> 00:17:52,382
we found using serverless, being able to deliver very fast as a startup,

290
00:17:52,446 --> 00:17:55,902
that's really the big thing that we need to do. We need to deliver software

291
00:17:55,966 --> 00:17:59,550
as quickly as possible to be able to target that market

292
00:17:59,640 --> 00:18:02,822
and continue to grow. Yeah, we found that

293
00:18:02,876 --> 00:18:06,086
we haven't had to spend very much time, and part of the reason for that

294
00:18:06,108 --> 00:18:08,566
very fast delivery, I should say, is we haven't had to spend a lot of

295
00:18:08,588 --> 00:18:12,486
time managing servers or thinking about what planning what instances

296
00:18:12,518 --> 00:18:16,234
we need or all of that sort of thing. We've been able to just get

297
00:18:16,272 --> 00:18:20,298
going and not have to worry about patching and

298
00:18:20,304 --> 00:18:23,326
all that sort of thing. Scaling so far has been good.

299
00:18:23,428 --> 00:18:25,760
I've not noticed any problems at all.

300
00:18:27,570 --> 00:18:31,402
We are already tracking the entire fleet that we've got deployed

301
00:18:31,546 --> 00:18:35,894
through our serverless system and it's not even choked, even slightly.

302
00:18:35,962 --> 00:18:39,186
So it's going well so far. Obviously with scaling, it's one of

303
00:18:39,208 --> 00:18:43,502
those things where you can test it with things like serverless artillery

304
00:18:43,566 --> 00:18:47,746
and all of that stuff, but nothing really replaces the real production

305
00:18:47,778 --> 00:18:51,394
issues. So we'll see how we go with that one. But I'm

306
00:18:51,442 --> 00:18:54,978
not really expecting any problems. And it's incredibly cheap.

307
00:18:55,154 --> 00:18:58,386
Our bill is less than 100 pounds.

308
00:18:58,498 --> 00:19:01,870
And for a serverless, for a startup that's

309
00:19:01,890 --> 00:19:04,630
very, very cheap. And that's what you need as a startup,

310
00:19:04,790 --> 00:19:08,198
you don't want to be spending money on infrastructure when you could be spending

311
00:19:08,214 --> 00:19:11,402
on growing your business. Speaking of growing our business, we are

312
00:19:11,456 --> 00:19:15,262
hiring and we'd love to have applications through for

313
00:19:15,396 --> 00:19:18,698
c sharp developers and front end generally react.

314
00:19:18,794 --> 00:19:22,478
As I mentioned earlier, developers, if you've got another skill set that you think would

315
00:19:22,484 --> 00:19:25,966
be really valuable to us at Zeti, then by all means just drop me

316
00:19:25,988 --> 00:19:28,880
a note. And we're here to hire good people,

317
00:19:29,970 --> 00:19:33,774
so be sure to get in touch. And yeah, any questions,

318
00:19:33,972 --> 00:19:37,478
please get in touch with me on Twitter or email me

319
00:19:37,644 --> 00:19:39,910
dambass at zeti co. UK.

320
00:19:40,810 --> 00:19:43,878
And yeah, I'll try and get back to you and

321
00:19:43,964 --> 00:19:46,820
I look forward to hearing any questions. Thank you.

