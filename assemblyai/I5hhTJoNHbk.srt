1
00:00:40,770 --> 00:00:43,830
Welcome to Conf 42 DevOps edition.

2
00:00:44,330 --> 00:00:47,522
Let's deep dive and green DevOps

3
00:00:47,666 --> 00:00:51,598
building sustainable software guy hi,

4
00:00:51,684 --> 00:00:55,390
I am Neel Shah, a DevOps community guy building

5
00:00:55,460 --> 00:00:58,830
various DevOps communities in my local region like

6
00:00:58,900 --> 00:01:01,226
Google Cloud, Docker, CNCM,

7
00:01:01,258 --> 00:01:05,122
Hashicorp, managed more than 15 plus hackathons and

8
00:01:05,176 --> 00:01:08,606
working as a product manager at Internal Infotech.

9
00:01:08,798 --> 00:01:11,010
So here comes the false statement.

10
00:01:11,670 --> 00:01:15,066
I have all my data on cloud so I don't

11
00:01:15,118 --> 00:01:18,280
emit carbon dioxide. Is that true?

12
00:01:18,890 --> 00:01:22,902
No. Eventually, because each and every one of us

13
00:01:23,036 --> 00:01:26,886
who have hosted their website or application on cloud

14
00:01:27,068 --> 00:01:31,642
are emitting carbon dioxide indirectly as

15
00:01:31,776 --> 00:01:36,102
we have hosted on the data centers and the data centers

16
00:01:36,246 --> 00:01:40,266
emit carbon dioxide. So we are eventually emitting carbon

17
00:01:40,298 --> 00:01:43,566
dioxide as we reveal in the

18
00:01:43,588 --> 00:01:46,734
innocence driven by software development. We also

19
00:01:46,772 --> 00:01:51,274
acknowledge considerable carbon emission carbon footprint

20
00:01:51,402 --> 00:01:55,326
from our products. So how we can reduce

21
00:01:55,358 --> 00:01:58,500
that? Today we are going to talk around that.

22
00:01:58,870 --> 00:02:02,930
So what is Green DevOps? Green DevOps is a general terminology

23
00:02:03,670 --> 00:02:07,702
accused by the normal people to understand and building

24
00:02:07,756 --> 00:02:11,346
sustainable software. Unlike the traditional development

25
00:02:11,458 --> 00:02:14,674
where we were focusing on spare and functionality

26
00:02:14,722 --> 00:02:18,698
of our product, eventually in green DevOps we will focus on

27
00:02:18,784 --> 00:02:22,650
the environmental consideration in the forefront. Then we will consider

28
00:02:22,720 --> 00:02:26,970
the spare and functionality. So it will also benefit for

29
00:02:27,040 --> 00:02:30,780
the environment and eventually it will also benefit for our product.

30
00:02:31,310 --> 00:02:35,290
What are the benefits of brain DevOps? We will reduce

31
00:02:35,370 --> 00:02:39,018
the consumption of the energy, it will eventually

32
00:02:39,194 --> 00:02:43,270
optimize our product, our resources

33
00:02:43,450 --> 00:02:47,234
and it will eventually save

34
00:02:47,272 --> 00:02:50,402
our cost, save our pockets. So the

35
00:02:50,456 --> 00:02:53,470
two benefits are we will reduce the energy consumption,

36
00:02:53,550 --> 00:02:57,686
eventually it will reduce the carbon dioxide and

37
00:02:57,868 --> 00:03:01,974
it will eventually reduce the cost. So win

38
00:03:02,012 --> 00:03:06,866
win situation for all. Next is improve

39
00:03:07,058 --> 00:03:10,266
resource efficiency because eventually we are

40
00:03:10,288 --> 00:03:14,490
utilizing the resources in a go and go manner to

41
00:03:14,560 --> 00:03:17,814
give the customer a very smooth procedure.

42
00:03:17,942 --> 00:03:21,674
We will have a lot of lot of amount of big vms.

43
00:03:21,802 --> 00:03:25,466
Eventually we can do that stuff on a single vm

44
00:03:25,498 --> 00:03:30,174
also. So why we are not coding to have our customer

45
00:03:30,372 --> 00:03:34,238
a battery experience. So eventually precisely

46
00:03:34,334 --> 00:03:38,610
or measuring all the things we can cost

47
00:03:38,680 --> 00:03:42,046
down and we can slow down the number of vms.

48
00:03:42,158 --> 00:03:45,538
So eventually it will improve

49
00:03:45,554 --> 00:03:49,480
the efficiency and it will also have

50
00:03:49,930 --> 00:03:53,574
our cost cutting and eventually we can implement some

51
00:03:53,692 --> 00:03:57,074
code optimism techniques, we can resize our infra.

52
00:03:57,122 --> 00:04:01,586
In that manner we can have some efficient testing will

53
00:04:01,628 --> 00:04:06,010
eventually help us to improve our resources.

54
00:04:06,670 --> 00:04:09,580
Next is enhance software quality.

55
00:04:09,970 --> 00:04:13,454
So as soon as the developers work on the

56
00:04:13,492 --> 00:04:17,294
code optimization and also of techniques, eventually it will

57
00:04:17,332 --> 00:04:20,480
also optimize our software quality.

58
00:04:21,250 --> 00:04:25,166
So we are not wasting the energy in any manner.

59
00:04:25,278 --> 00:04:28,850
So eventually we are saving our cost and we are also working

60
00:04:28,920 --> 00:04:32,526
on carbon footprint. We have discussed around carbon footprint.

61
00:04:32,558 --> 00:04:35,830
Carbon footprint, but how the carbon footprint is

62
00:04:35,900 --> 00:04:39,830
measured on a water scale. So let's discuss

63
00:04:39,900 --> 00:04:44,146
on that portion. So that is GHG protocol. That is greenhouse

64
00:04:44,178 --> 00:04:48,134
gases protocol. And there are different scopes

65
00:04:48,182 --> 00:04:52,106
under it. And eventually from most

66
00:04:52,208 --> 00:04:55,802
of the big companies, from top ten companies. Most of the nine

67
00:04:55,856 --> 00:05:00,338
companies use this to differentiate

68
00:05:00,374 --> 00:05:03,642
their usages in different sectors. Different scopes.

69
00:05:03,786 --> 00:05:07,258
First is direct emission, indirect emissions.

70
00:05:07,354 --> 00:05:11,242
What we can consider is when we burn the fuel directly,

71
00:05:11,386 --> 00:05:14,926
when as a company or as a person, we are burning the fuel

72
00:05:14,958 --> 00:05:18,418
directly, it counts in the scope one. Next is scope two.

73
00:05:18,504 --> 00:05:22,180
That is indirect emissions. The indirect emissions consider

74
00:05:23,190 --> 00:05:27,062
when we are using some electricity, when we are using

75
00:05:27,196 --> 00:05:31,062
a tube light or a light. Then the energy came

76
00:05:31,116 --> 00:05:34,386
from the power supplier, the electric power station.

77
00:05:34,498 --> 00:05:37,430
So eventually they are burning their coal,

78
00:05:37,770 --> 00:05:41,446
their fuel. So it comes in scope too. And all of

79
00:05:41,468 --> 00:05:45,002
the things which are other things like

80
00:05:45,056 --> 00:05:47,530
business travel. So the plane,

81
00:05:48,030 --> 00:05:51,414
the airplane, lot of carbon dioxide,

82
00:05:51,542 --> 00:05:55,306
this sort of things could be considered in scope three from material

83
00:05:55,338 --> 00:05:59,326
purchase and what are the activities and each and every other activity is considered the

84
00:05:59,348 --> 00:06:03,074
scope three. So how it is working

85
00:06:03,112 --> 00:06:06,766
in our DevOps field. So when we host

86
00:06:06,878 --> 00:06:10,530
a website in private cloud, website or application,

87
00:06:10,680 --> 00:06:13,982
anything and private cloud, it considers in scope

88
00:06:14,046 --> 00:06:17,566
two. And when we do the same in

89
00:06:17,608 --> 00:06:21,430
public cloud or hybrid cloud, it is considered in

90
00:06:21,500 --> 00:06:25,106
scope three. It is a measures

91
00:06:25,138 --> 00:06:28,358
given by the grin software formulation under the

92
00:06:28,364 --> 00:06:32,282
GHS protocol. Yeah. So how we

93
00:06:32,336 --> 00:06:35,958
can find out this carbon intensity

94
00:06:36,054 --> 00:06:40,710
in our product or utilize our carbon footprint.

95
00:06:40,870 --> 00:06:44,810
So this is the formula from which we can generally

96
00:06:44,970 --> 00:06:48,478
gather the data and say the intensity in

97
00:06:48,484 --> 00:06:52,174
this region is less, the intensity in this region is more. So from

98
00:06:52,212 --> 00:06:55,246
this formula we can derive with that. And this formula

99
00:06:55,278 --> 00:06:59,150
includes the electricity or energy consumed.

100
00:06:59,310 --> 00:07:02,430
Also the carbon emitters

101
00:07:02,590 --> 00:07:06,594
through hardware and sole software. So this calculates

102
00:07:06,642 --> 00:07:10,082
all the things and it's formalized by Grimsoft

103
00:07:10,146 --> 00:07:14,034
foundation which is working on to use carbon footprint

104
00:07:14,082 --> 00:07:16,840
for each and every product in our world.

105
00:07:17,470 --> 00:07:21,334
Next is the major cloud providers

106
00:07:21,462 --> 00:07:25,434
are also working to help people to

107
00:07:25,472 --> 00:07:30,082
reuse the carbon footprint. So they also have their own calculators

108
00:07:30,246 --> 00:07:34,526
which will detect all the resources used in their

109
00:07:34,628 --> 00:07:38,734
products. So eventually AWS has AWS carbon footprint tool.

110
00:07:38,772 --> 00:07:41,934
Google has Google Cloud carbon footprint. Azure has

111
00:07:41,972 --> 00:07:45,630
azure sustainable calculator. So even the cloud providers,

112
00:07:46,850 --> 00:07:50,354
when we use any resources of them and when we choose some

113
00:07:50,392 --> 00:07:53,890
regions, they will also show the region which is having

114
00:07:54,040 --> 00:07:58,022
low carbon footprint. Eventually there is a small mark and

115
00:07:58,076 --> 00:08:01,622
which is telling us low co2. So it is saying

116
00:08:01,676 --> 00:08:05,714
like the carbon footprint latency, the efficiency of carbon

117
00:08:05,762 --> 00:08:08,474
in that region is low, so you can utilize that.

118
00:08:08,592 --> 00:08:12,620
So also the major cloud providers are focusing on that.

119
00:08:13,150 --> 00:08:17,418
Next is one of the open source tool and largely used

120
00:08:17,504 --> 00:08:21,454
tool is car cloud carbon footprint. It is

121
00:08:21,492 --> 00:08:25,600
widely used by everyone because it's open source and

122
00:08:26,690 --> 00:08:30,302
it is very easy to work on this. And this

123
00:08:30,356 --> 00:08:34,126
is a sort of dashboard which we can gather utilizing

124
00:08:34,158 --> 00:08:38,946
the carbon footprint from cloud carbon footprint tool.

125
00:08:39,128 --> 00:08:42,686
So eventually we need to give our bls

126
00:08:42,718 --> 00:08:46,214
over there and also to give us

127
00:08:46,332 --> 00:08:49,862
a large amount of data. So eventually it will make the dashboards over

128
00:08:49,916 --> 00:08:53,222
there. Next is the major thing.

129
00:08:53,356 --> 00:08:57,590
That is how we can reduce the carbon footprint

130
00:08:58,250 --> 00:09:02,486
in the DevOps techniques. Here comes a real green DevOps

131
00:09:02,598 --> 00:09:06,246
because it will eventually help all the DevOps people to reuse

132
00:09:06,278 --> 00:09:08,650
their carbon footprint.

133
00:09:09,150 --> 00:09:11,994
The first is cache static data.

134
00:09:12,192 --> 00:09:15,642
Eventually when we go on the same website, a large larger

135
00:09:15,706 --> 00:09:19,230
amount of time. So if the data, small amount of data

136
00:09:19,300 --> 00:09:22,946
is cached then it will benefit for us. So eventually it

137
00:09:22,968 --> 00:09:26,594
won't take another amount of time, another amount

138
00:09:26,632 --> 00:09:30,900
of strength energy. Together the same data again and again.

139
00:09:31,270 --> 00:09:34,174
Next is delayed unused storage resources.

140
00:09:34,302 --> 00:09:37,894
Eventually we should monitor all the things and

141
00:09:37,932 --> 00:09:41,606
also delayed all the things which are not necessary and we

142
00:09:41,628 --> 00:09:45,122
can have our infrastructure to bare minimum. Next is implement

143
00:09:45,186 --> 00:09:48,534
stateless design. Another thing is queue

144
00:09:48,582 --> 00:09:52,042
non urgent processing request because when

145
00:09:52,096 --> 00:09:55,450
we have multiple amount of requests, the storage will be optimized.

146
00:09:56,110 --> 00:09:59,306
No, the storage will be buckled up and it

147
00:09:59,328 --> 00:10:03,530
will also have a large amount of request on the same manner.

148
00:10:03,610 --> 00:10:07,486
So we should run this in a sense that if the

149
00:10:07,588 --> 00:10:11,280
requests are not urgent so it can be on the

150
00:10:12,050 --> 00:10:15,406
next tab after the requests which are currently going on.

151
00:10:15,588 --> 00:10:18,606
This is scale down your infra when not in use angel,

152
00:10:18,638 --> 00:10:22,242
it will also cost down your thing and use

153
00:10:22,296 --> 00:10:25,482
serverless cloud services. Why? Because serverless

154
00:10:25,646 --> 00:10:28,774
has a functionality where we don't need

155
00:10:28,812 --> 00:10:32,102
to manage the cloud functionalities. It will manage

156
00:10:32,156 --> 00:10:36,034
by cloud providers and whenever there is necessary

157
00:10:36,082 --> 00:10:39,738
of large amount of storage or large amount of vms, then it will scale up

158
00:10:39,824 --> 00:10:43,430
and automatically. When there is no need it will scale down automatically.

159
00:10:43,590 --> 00:10:46,460
So using this it will help us.

160
00:10:46,910 --> 00:10:50,686
Next is we can have software eco design sort

161
00:10:50,708 --> 00:10:54,522
of thing. Next is choice of instances

162
00:10:54,586 --> 00:10:58,266
and a proper type on AWS. We have on spot

163
00:10:58,298 --> 00:11:02,094
instances. They are just like server layers, they just

164
00:11:02,132 --> 00:11:05,394
use the bare minimum thing. When they are not in use

165
00:11:05,432 --> 00:11:08,594
they will also use the minimum thing.

166
00:11:08,792 --> 00:11:11,954
So we should use the right size of the thing.

167
00:11:12,072 --> 00:11:15,234
Eventually. If we need, let's say some x

168
00:11:15,272 --> 00:11:18,758
amount of storage, then we should see

169
00:11:18,844 --> 00:11:22,440
that sort of instance from the whole group of things.

170
00:11:22,810 --> 00:11:26,498
Next is capertom wherever it will be, auto scale groups

171
00:11:26,514 --> 00:11:30,982
or containers or anything, and change reason or zone.

172
00:11:31,126 --> 00:11:34,586
As per the low carbon latency shown by

173
00:11:34,608 --> 00:11:38,678
the cloud provider, we can easily improve

174
00:11:38,694 --> 00:11:41,910
the things. These are the things which is implemented

175
00:11:42,070 --> 00:11:45,098
in a day to day process. But yeah, we can

176
00:11:45,184 --> 00:11:48,862
slowly start slowly, we can gradually implement them and

177
00:11:48,996 --> 00:11:52,634
have a huge impact then, yeah. So what are cloud

178
00:11:52,692 --> 00:11:55,646
awareness? So temporal shifting.

179
00:11:55,838 --> 00:11:59,662
So when the carbon intensity in our region

180
00:11:59,806 --> 00:12:03,042
is very high, then we can shift over

181
00:12:03,096 --> 00:12:06,706
some work which are not necessarily urgent.

182
00:12:06,898 --> 00:12:11,062
We can schedule them. When the carbon efficiency, carbon efficiency is good

183
00:12:11,116 --> 00:12:14,646
or carbon latency is low, we can schedule them at

184
00:12:14,668 --> 00:12:18,934
that time. Next is demand shaping. So demand

185
00:12:18,982 --> 00:12:22,726
shaping, when we are working with image

186
00:12:22,758 --> 00:12:26,650
or video analysis sort of thing, let's say then

187
00:12:26,800 --> 00:12:30,310
we need to give the output and a high quality image or

188
00:12:30,320 --> 00:12:34,382
high quality video. So in spite of that, at the

189
00:12:34,436 --> 00:12:38,394
time of very high carbon latency in that region,

190
00:12:38,522 --> 00:12:42,746
we can do that. We can pixelate and pixel down the image

191
00:12:42,778 --> 00:12:45,620
quality and give them the pixel down quality.

192
00:12:46,150 --> 00:12:50,450
So the lower energy will be consumed

193
00:12:50,950 --> 00:12:54,722
on that node. Eventually. If we are

194
00:12:54,776 --> 00:12:58,434
working on a CICD platform, let's say something

195
00:12:58,472 --> 00:13:02,814
like jackians, where the architecture is like workers

196
00:13:02,862 --> 00:13:06,294
live nodes. So eventually, when the time

197
00:13:06,332 --> 00:13:09,180
is, the carbon dicency is high,

198
00:13:09,630 --> 00:13:13,126
so we can use some of the no worker

199
00:13:13,158 --> 00:13:16,358
nodes instead of, sorry, some of the slave nodes

200
00:13:16,374 --> 00:13:20,494
instead of all the slave nodes, and do other stuff

201
00:13:20,612 --> 00:13:24,382
after the things which is currently going on

202
00:13:24,436 --> 00:13:28,362
can be down to use them reconvene

203
00:13:28,506 --> 00:13:31,390
instead of doing all the things in a parallel manner.

204
00:13:31,730 --> 00:13:35,774
Next is partial shaping. So what

205
00:13:35,812 --> 00:13:39,786
it is done is you can like,

206
00:13:39,828 --> 00:13:43,426
let's take one example how the automatic load balancer works.

207
00:13:43,608 --> 00:13:46,530
We have the same thing in two different regions,

208
00:13:46,690 --> 00:13:50,600
and it will fetch the request, or it will give the

209
00:13:50,970 --> 00:13:54,870
request to that region which is nearby to the users.

210
00:13:55,210 --> 00:13:58,280
But what Google implemented in between,

211
00:13:58,730 --> 00:14:02,650
it's from the true facts from one of the research paper which

212
00:14:02,720 --> 00:14:07,222
can be published that they implemented

213
00:14:07,366 --> 00:14:10,414
on the top of load balancer. They also implemented to

214
00:14:10,452 --> 00:14:14,522
have the request from the region which has lower carbon footprint,

215
00:14:14,666 --> 00:14:17,390
sorry, low carbon latency.

216
00:14:18,050 --> 00:14:22,090
So it will help produce

217
00:14:22,170 --> 00:14:25,902
carbon in that manner also. So it will fetch the request

218
00:14:25,966 --> 00:14:29,970
from the region which has lower emission of carbon

219
00:14:30,550 --> 00:14:33,806
in spite of having the nearby region.

220
00:14:33,918 --> 00:14:37,494
So it is helping out that. And eventually from

221
00:14:37,532 --> 00:14:41,720
the report, it proves that

222
00:14:42,170 --> 00:14:46,230
using this 51% efficient work

223
00:14:46,300 --> 00:14:49,866
is done there. So yeah, that also helps a

224
00:14:49,888 --> 00:14:53,638
lot. Next is, is it a phenops

225
00:14:53,654 --> 00:14:57,130
plus green ops in green DevOps? Eventually,

226
00:14:57,710 --> 00:15:00,954
because as on the path of green DevOps,

227
00:15:01,002 --> 00:15:04,254
we are also saving a lot of money. Another use case

228
00:15:04,292 --> 00:15:07,454
is when we have a service.

229
00:15:07,572 --> 00:15:11,486
Let's say we have five nodes working on

230
00:15:11,508 --> 00:15:15,502
a day. On a day, we have a sunlight

231
00:15:15,566 --> 00:15:19,454
and we have a good carbon latency, but eventually,

232
00:15:19,582 --> 00:15:22,510
in night, we don't have sunlight,

233
00:15:22,670 --> 00:15:25,934
so the carbon emission would be higher. So on

234
00:15:25,992 --> 00:15:29,974
night, what we can do is we can scale down our

235
00:15:30,092 --> 00:15:33,986
nodes from five to two or three, which are bare

236
00:15:34,018 --> 00:15:37,954
minimum. And eventually, on the day, we can also scale

237
00:15:38,002 --> 00:15:41,766
up. So this kind of thing could be

238
00:15:41,788 --> 00:15:45,266
implemented. And eventually there's both helping

239
00:15:45,298 --> 00:15:49,138
and pin offs and also green ups. Green DevOps.

240
00:15:49,314 --> 00:15:52,382
Yeah. Connect with me for any queries and.

241
00:15:52,436 --> 00:15:55,498
Yeah. Thank you. Thank you, Khan for the shoe.

242
00:15:55,594 --> 00:15:56,460
Have a nice day ahead.

