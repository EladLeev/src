{"language_code": "en_us", "audio_url": "https://cdn.assemblyai.com/upload/d70bc271-c375-4cf3-a088-619bd66b83e1", "punctuate": true, "format_text": true, "dual_channel": null, "webhook_url": null, "webhook_auth_header_name": null, "webhook_auth_header_value": null, "audio_start_from": null, "audio_end_at": null, "word_boost": ["automates", "collection", "conffourtytwo", "from", "github", "grafana", "jira", "metricca", "nontech", "owasp", "projectleaderandprojectcollaborator", "revolutionizing", "software", "timopagel", "tools", "users"], "boost_param": "high", "filter_profanity": false, "redact_pii": false, "redact_pii_audio": false, "redact_pii_policies": null, "redact_pii_sub": null, "speaker_labels": false, "speakers_expected": null, "content_safety": false, "content_safety_confidence": null, "iab_categories": false, "custom_spelling": null, "disfluencies": false, "sentiment_analysis": false, "auto_chapters": false, "entity_detection": false, "summarization": true, "summary_model": "informative", "summary_type": "bullets_verbose", "auto_highlights": true, "language_detection": false, "speech_threshold": null, "id": "135da248-70d7-485a-94e3-769dec4a3606", "status": "completed", "error": null, "text": "Hello, let us talk about Metric collector and analyzer. My name is Timo Pagl. I'm a Devsecops trainer and strategist. I'm an open source fan and an open knowledge fan boy and I'm a university lecturer. In this talk I will provide you now with an introduction. Afterwards we will take a look at the architecture of Metrica and then we will come to an outlook. I am also the leader of the devsector Ops maturity model and the question first is I say why do you need security maturity models when you want to enhance the security in your area of influence? Then you ask yourself how to enhance the security and there are so many options you have that you need to think about how to prioritize to understand the options. I like to categorize in DevOps strategies. So how do you harden your DevOps processes and technologies? And then the question is how can you enhance your security through DevOps strategies? So how can you utilize the strategies which are already there? For example, you can utilize a build process to integrate security testing there or you're having information gathering maybe with a stack like Prometheus and Grafana which collection the different metrics. So there you just need to adjust the metrics that you're getting alerted when there is security incidents. I regularly perform assessments and these assessments are performed quarterly, yearly or bi yearly. But as a product team I want fast feedback for my performed security activities to stay motivated. So as a product team I want to implement an activity and then get feedback. An example in the area of security testing is the meantime to respond to vulnerabilities. I might have performed very well. Then I want to see it reflected in the feedback. And in case I haven't performed very well, I also want to get notified. Hey, it's currently not going as planned and there are things which we can automate. So the question is how do we automate devsecops assessments? And the solution is Metrica. In Metricca we have manual assessments which we perform in a YAmL structure and automatic assessments where we pull the information from various sources like Jira, other security tools like dependency track, confluence, maybe even from Azure active directory. So there are various tools where we can get information from the metric collector and analyzer. Here you see an overview for it. So on the bottom you have two different or three different YAML files. You have activities per team and per application. So some activities are per application and some activities per team. So when you have for example a security champion per team then this is team based and the activity status is inherited to the applications of that team. You have a one to n relationship here and then you have maturity model definitions. So on which level is a specific activity? What is the threshold for that activity that you say it is performed for an application or it's not performed, that are the information we store in a configuration yaml. But manual assessments have a lag. So for example, when you do thread modeling, you document the thread modeling in your tool, for example in confluence. And afterwards you need to document it again in YAML, or the product owner or the product team needs to document it in the YAML. In addition, there the collector comes into place. The collector automatically collection from various different sources like confluence, in case you document your threat modeling in confluence. And then you maybe have a label on that page called threat modeling. And on the top you have information when did it happen and who the participants and very important, the application id. And then we fetch that information automatically with the collector and afterwards both sources. So with a collector source and the different YAML files are getting analyzed by the analyzer. And then we push that information to Grafana security dashboard. And in Grafana you might be able also to configure alerts, automatically alerts. For example when a threat modeling is missing, you might say I want to perform a threat modeling every quarter and a team hasn't performed it within the last three months. And you can send out a warning, hey, you should very soon perform a quick split modeling so that this process is also automated. Here you see an overview of how product owners or the team can handle the yamls in the repository. So you have a repository and the product owner maybe pulls the repository or uses a web UI to perform changes. So for example, hey, I read all the needed security policies and I confirm it in the YaML file. Then the product owner pushes it. These changes to the repository create the pull request and then a security architect could review these changes, approves or denies it, and then see changes are reflected in case the pull request is accepted. Here we see how the flow is for the thresholds. So there is a trigger, for example the pull request. Then we transfer the meter model information to Java objects. We combine the Yaml files and the collector information. Then we check the threshold for that team in that particular level, for example the mean time to patch. Then we generate dashboards out of it. The dashboards will be already half thresholds which we generate from the Java application. So we want to stay independent from the grafana. We want to be able to put any other option there as well, any other data source, for example the maturity, the devsec option, maturity model itself, or even other sources. This is a very big overview of the architecture. So in GitHub we are building the whole application so that you can utilize it in your organization and with your data. We are also planning to make the architecture very flexible so that you can define, so that you can have your own activity definition. That's why we came up with this class diagram where we have the spring component, the date component and the integer component with an interface. And then the activity has all these different types, so you can combine these types as you like. And in this case, the main developer here is Rafael Vespi, who came up with this diagram and is implementing be very the YAML file should be very generic so that you can have your own activity definitions per application or team. You have the activities YAML and the team YAML and you have the very generic configuration Yaml, which is there only once, in which you define what activities are there and what are the thresholds and what are the levels for these different activities. In the configuration yaml, you have the application id, you have the target level, and then for the activities, the level, in case you have implemented the activity on which level this activity should be performed. And we're currently not having a structure for the threshold, but that will come. Here is an example for the activities YAml. You have again an application id and the different activities. We also want to generate a schema so that when the pull request happens you can, or the product owner can receive there is a mistake in the provided YaML file. I have to say it's not a silver bullet. You always have people and processes. You need to say as a team you still need to perform these activities. You need to put it into the YAML files. So that's all something where you need to do a lot of cultural work. And I recommend to use the collector in the future rather than the YAML. So the yamls are there for static things which you cannot automate easily, but everything you can automate, you should automate with the collection. As you have already mentioned, currently we are in a draft status or the implementation phase. Currently we can perform changes very easily. So in case you have any ideas how to enhance this, please talk with me. Come to the overslack channel, to the DSM channel, or if you like, you can also send an email. Here are my information. The access Switzerland is sponsoring this project and we currently estimate that it will be implemented by the end of 2023. Thank you and see you soon. Bye.", "words": [], "utterances": null, "confidence": 0.932949542575653, "audio_duration": 825.0, "webhook_status_code": null, "webhook_auth": false, "summary": "- Timo Pagl: How do we automate devsecops assessments? The solution is Metrica. In Metricca we have manual assessments and automatic assessments. How can you enhance your security through DevOps strategies?", "auto_highlights_result": {"status": "success", "results": [{"count": 1, "rank": 0.08, "text": "security maturity models", "timestamps": [{"start": 145010, "end": 147230}]}, {"count": 2, "rank": 0.07, "text": "security testing", "timestamps": [{"start": 187302, "end": 188166}, {"start": 237648, "end": 238774}]}, {"count": 1, "rank": 0.07, "text": "Grafana security dashboard", "timestamps": [{"start": 443216, "end": 445506}]}, {"count": 1, "rank": 0.07, "text": "security incidents", "timestamps": [{"start": 204424, "end": 205970}]}, {"count": 1, "rank": 0.06, "text": "maturity model definitions", "timestamps": [{"start": 356392, "end": 358158}]}, {"count": 1, "rank": 0.06, "text": "various different sources", "timestamps": [{"start": 401092, "end": 402878}]}, {"count": 3, "rank": 0.06, "text": "maturity model", "timestamps": [{"start": 138758, "end": 139638}, {"start": 356392, "end": 357122}, {"start": 592448, "end": 593022}]}, {"count": 14, "rank": 0.06, "text": "team", "timestamps": [{"start": 219548, "end": 220006}, {"start": 228830, "end": 229674}, {"start": 332560, "end": 333130}, {"start": 340532, "end": 340686}, {"start": 343300, "end": 343918}, {"start": 345188, "end": 345422}, {"start": 353028, "end": 353234}, {"start": 390676, "end": 390942}, {"start": 458488, "end": 458722}, {"start": 479008, "end": 479386}, {"start": 551236, "end": 551598}, {"start": 675068, "end": 675302}, {"start": 678096, "end": 678602}, {"start": 749204, "end": 749422}]}, {"count": 1, "rank": 0.06, "text": "product owners", "timestamps": [{"start": 477390, "end": 478470}]}, {"count": 10, "rank": 0.05, "text": "information", "timestamps": [{"start": 190116, "end": 190526}, {"start": 290452, "end": 291166}, {"start": 314216, "end": 314734}, {"start": 369468, "end": 369990}, {"start": 416810, "end": 417654}, {"start": 426828, "end": 427158}, {"start": 441696, "end": 442298}, {"start": 538400, "end": 538826}, {"start": 547010, "end": 547760}, {"start": 808712, "end": 809460}]}, {"count": 1, "rank": 0.05, "text": "performed security activities", "timestamps": [{"start": 222780, "end": 225170}]}, {"count": 4, "rank": 0.05, "text": "threat modeling", "timestamps": [{"start": 405048, "end": 405646}, {"start": 412152, "end": 413550}, {"start": 452084, "end": 452586}, {"start": 456404, "end": 456926}]}, {"count": 2, "rank": 0.05, "text": "Metric collector", "timestamps": [{"start": 106440, "end": 107566}, {"start": 319532, "end": 320466}]}, {"count": 1, "rank": 0.05, "text": "various sources", "timestamps": [{"start": 291988, "end": 293230}]}, {"count": 9, "rank": 0.05, "text": "application", "timestamps": [{"start": 334160, "end": 334778}, {"start": 338576, "end": 339178}, {"start": 367308, "end": 367638}, {"start": 425148, "end": 425526}, {"start": 570546, "end": 571160}, {"start": 602292, "end": 602898}, {"start": 674284, "end": 674726}, {"start": 699524, "end": 699934}, {"start": 722268, "end": 722646}]}]}, "content_safety_labels": null, "iab_categories_result": null, "chapters": null, "sentiment_analysis_results": null, "entities": null}