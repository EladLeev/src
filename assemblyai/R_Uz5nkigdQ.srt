1
00:00:00,250 --> 00:00:01,630
Are youll an SRE,

2
00:00:03,570 --> 00:00:07,358
a developer, a quality

3
00:00:07,444 --> 00:00:11,162
engineer who wants to tackle the challenge of improving reliability

4
00:00:11,226 --> 00:00:14,970
in your DevOps? You can enable your DevOps for reliability

5
00:00:15,050 --> 00:00:19,114
with chaos native. Create your free account at Chaos

6
00:00:19,162 --> 00:01:18,150
native. Litmus Cloud hi.

7
00:01:18,220 --> 00:01:21,890
Today I'm going to talk through how you can do lean

8
00:01:21,970 --> 00:01:25,126
product delivery through SLO. So you'll have to bear with

9
00:01:25,148 --> 00:01:28,358
me a little bit here. There's a bit of buzzword bingo going on. We're going

10
00:01:28,364 --> 00:01:31,338
to be talking lean theory, we're going to be talking product development, and we're going

11
00:01:31,344 --> 00:01:35,660
to be talking SRe all in about 25, 30 minutes.

12
00:01:36,910 --> 00:01:40,502
So I always like to start these off with the key takeaways.

13
00:01:40,646 --> 00:01:43,838
So in case you don't get to the end, at least youll know

14
00:01:43,844 --> 00:01:47,774
what the points I was trying to make were. The first is very

15
00:01:47,812 --> 00:01:51,262
much coming from lean theory that if you can eliminate waste, you can drive

16
00:01:51,316 --> 00:01:54,080
better outcomes as you go along.

17
00:01:54,530 --> 00:01:58,334
The second is that implicit expectations exist.

18
00:01:58,382 --> 00:02:01,394
And I'll be diving into a little bit more of what I mean by that

19
00:02:01,432 --> 00:02:04,706
as we go through. And the third is that one

20
00:02:04,728 --> 00:02:08,214
of the powerful things about slos is

21
00:02:08,252 --> 00:02:11,554
they convert these expectations into concrete

22
00:02:11,602 --> 00:02:15,650
outcomes. So we're talking the implicit into the explicit.

23
00:02:15,730 --> 00:02:19,074
I think hopefully by the end of this, you'll get an idea of how powerful

24
00:02:19,122 --> 00:02:23,018
that is just very quickly,

25
00:02:23,104 --> 00:02:26,694
just the obligatory kind of about me slide. I'm the AWS

26
00:02:26,742 --> 00:02:31,446
practice lead at Contino. We're a global digital transformation consultancy.

27
00:02:31,638 --> 00:02:35,294
I'm an AWS APN ambassador, which, if ever, means I do lots of stuff like

28
00:02:35,332 --> 00:02:38,506
this, and I ride and talk and do all those kind of things. And I'm

29
00:02:38,538 --> 00:02:41,150
a hashicorp ambassador as well.

30
00:02:41,300 --> 00:02:44,414
And kind of most poignantly for

31
00:02:44,452 --> 00:02:47,374
this talk is I'm a bit of a lean junkie. I love my lean theory.

32
00:02:47,422 --> 00:02:51,106
I love kind of diving into everything about it. And you'll see,

33
00:02:51,208 --> 00:02:54,514
hopefully why I enjoy doing that so much as

34
00:02:54,552 --> 00:02:55,640
we go through.

35
00:02:57,530 --> 00:03:00,870
So I'm going to talk through a story of

36
00:03:00,940 --> 00:03:03,634
a time I went through with the team, and we're going to be talking specifically

37
00:03:03,682 --> 00:03:06,680
about AWS landing zones. Now,

38
00:03:07,610 --> 00:03:10,220
why have I picked a landing zone? As an example?

39
00:03:10,830 --> 00:03:14,534
And this is maybe a little bit of, when you look into Slo

40
00:03:14,582 --> 00:03:17,798
and SRE, normally, when you're

41
00:03:17,814 --> 00:03:20,894
looking at the kind of systems where those are applied, these are like

42
00:03:20,932 --> 00:03:24,830
millions of transactions a day, kind of being super high throughput.

43
00:03:25,170 --> 00:03:29,310
And I kind of wanted to prove the point that slos

44
00:03:29,650 --> 00:03:32,666
are valuable even in low throughput systems.

45
00:03:32,698 --> 00:03:36,434
Can Adris landing zone is one really

46
00:03:36,552 --> 00:03:40,562
just today we're going to kind of follow that kind of lean theory of focus.

47
00:03:40,696 --> 00:03:44,174
And when we talk about landing zones, they do account vending,

48
00:03:44,222 --> 00:03:48,386
we do account provisioning, we do security guardrails, we do cit pipelines,

49
00:03:48,578 --> 00:03:51,926
compliance, and do all manner of things. But really today we're just going to look

50
00:03:51,948 --> 00:03:55,094
at one thing and that's account vending. Because really,

51
00:03:55,212 --> 00:03:58,742
or project vending or subscription vending, depending on your cloud

52
00:03:58,796 --> 00:04:02,102
of choice. But if you can't do this,

53
00:04:02,236 --> 00:04:05,926
you do not have a landing zone if you can't make these accounts and projects

54
00:04:05,958 --> 00:04:08,634
for other people. So that's where we're going to narrow it on today because this

55
00:04:08,672 --> 00:04:12,286
is pretty much feature one, almost as

56
00:04:12,308 --> 00:04:16,458
you build out a landing zone. Now, I think everyone's

57
00:04:16,474 --> 00:04:20,014
probably seen user stories and you'll get something like

58
00:04:20,052 --> 00:04:23,898
this. I just looked this one up for what an account vending user

59
00:04:23,914 --> 00:04:27,454
story might look like. As a development team, I want to be able to provision

60
00:04:27,502 --> 00:04:30,020
AWS accounts so I can deploy my application.

61
00:04:30,390 --> 00:04:34,610
Awesome. Cool. We all have a pretty half

62
00:04:34,680 --> 00:04:38,546
decent shared understanding of that. I think as we dive

63
00:04:38,578 --> 00:04:42,102
in, hopefully youll see that there's a lot left unsaid with this

64
00:04:42,156 --> 00:04:45,974
and we'll dive into that and show how taking an

65
00:04:46,012 --> 00:04:50,262
SLO first approach really helps take some of the ambiguity

66
00:04:50,406 --> 00:04:51,500
out of this.

67
00:04:53,550 --> 00:04:56,726
Okay, I said I was a bit of a lean junkie,

68
00:04:56,758 --> 00:05:00,606
so let's just dive a little bit more into lean. So one

69
00:05:00,628 --> 00:05:03,898
of the core concepts of lean is this idea of waste.

70
00:05:04,074 --> 00:05:07,050
And there are eight kinds of waste.

71
00:05:07,210 --> 00:05:11,482
Defects, overproduction, waiting, unused talent, extra processing,

72
00:05:11,546 --> 00:05:14,350
transportation, motion and inventory.

73
00:05:15,730 --> 00:05:18,866
All these are things which you can look to target. And just by

74
00:05:18,888 --> 00:05:22,338
the by, just to kind of put this into context, so lean theory came out

75
00:05:22,344 --> 00:05:26,100
of the Toyota production system. When you look at

76
00:05:27,050 --> 00:05:30,454
Toyota production system and where they've got to in

77
00:05:30,492 --> 00:05:34,146
their value stream, when they produce a car, they're reckon they're

78
00:05:34,178 --> 00:05:37,506
up to about 33% value, which means they're

79
00:05:37,538 --> 00:05:39,350
67% waste.

80
00:05:40,330 --> 00:05:44,746
The kind of idea in the software space is we're at 1% value.

81
00:05:44,848 --> 00:05:48,250
So you can either take that as a sad thing or

82
00:05:48,400 --> 00:05:51,478
a lot of room for improvement. I try and take it that way

83
00:05:51,504 --> 00:05:55,486
around. And really one of the things we're going to look at

84
00:05:55,508 --> 00:05:59,470
today is the waste of extra processing. And this is building

85
00:05:59,540 --> 00:06:02,938
something to better quality than is required. This is where

86
00:06:02,964 --> 00:06:06,782
you're building something that is fantastic when merely

87
00:06:06,846 --> 00:06:10,434
good would do. You're spending all this time making something amazing when

88
00:06:10,472 --> 00:06:12,980
really you need to be working on other things.

89
00:06:14,550 --> 00:06:17,720
So when we're talking about quality,

90
00:06:18,890 --> 00:06:21,320
if we come back to this user story.

91
00:06:22,970 --> 00:06:26,802
This can be done so many different ways. This doesn't

92
00:06:26,866 --> 00:06:30,534
talk to quality, it talks to output. And that's

93
00:06:30,582 --> 00:06:34,186
just a fundamental understanding that you

94
00:06:34,208 --> 00:06:38,026
have to get once the user story is written, you need more.

95
00:06:38,208 --> 00:06:41,580
I can take this and I can implement this a million different ways.

96
00:06:41,950 --> 00:06:45,342
I can fully automate to the nth degree to make it as fast

97
00:06:45,396 --> 00:06:48,702
as physically possible. I can just let

98
00:06:48,756 --> 00:06:52,426
people turn that can that mechanical turk on it and have it

99
00:06:52,468 --> 00:06:54,930
take a while at the expense of human effort.

100
00:06:55,750 --> 00:06:59,298
So you really can answer this fundamental question

101
00:06:59,384 --> 00:07:01,620
of what is good enough?

102
00:07:02,710 --> 00:07:06,162
At what point is my account vending solution good enough

103
00:07:06,216 --> 00:07:09,480
that I can stop working on it and move it on to the next thing?

104
00:07:09,850 --> 00:07:13,670
And even to answer this question, there's another question you have to answer,

105
00:07:13,740 --> 00:07:17,880
right? Who defines good enough? Who gets

106
00:07:18,410 --> 00:07:20,940
to say what that is?

107
00:07:22,030 --> 00:07:25,258
And this ends up coming back to and boiling down to the

108
00:07:25,264 --> 00:07:28,666
whole concept of product management. And really, when you look

109
00:07:28,688 --> 00:07:32,234
at product management, and this is not my term, but product management

110
00:07:32,282 --> 00:07:36,238
is tension management, you've got tension between

111
00:07:36,404 --> 00:07:40,622
the product owner, the scrum master and the delivery team. You've got between

112
00:07:40,676 --> 00:07:44,478
the team and the consumers. You've got between the team and the

113
00:07:44,484 --> 00:07:48,306
other teams they rely upon. There's all these tension in all these

114
00:07:48,328 --> 00:07:51,874
different areas. And we're just going to focus on where I think slos really

115
00:07:51,912 --> 00:07:55,906
drive is one particular kind of tension, and that's

116
00:07:55,938 --> 00:07:58,950
the tension between delivery and consumers.

117
00:08:00,570 --> 00:08:03,862
So what you're trying to build and the people who are asking you to build

118
00:08:03,916 --> 00:08:07,766
things, and obviously it's a one to many relationship.

119
00:08:07,868 --> 00:08:11,590
You've got one delivery team, you have many consumers, all with competing priorities,

120
00:08:11,670 --> 00:08:14,380
all pushing their competing priorities on you, right?

121
00:08:14,990 --> 00:08:18,106
So being able to be mindful and explicit about

122
00:08:18,128 --> 00:08:21,390
how you manage that tension can end up being really powerful.

123
00:08:23,570 --> 00:08:27,066
Now, potentially, not everyone has spent

124
00:08:27,098 --> 00:08:30,606
a lot of time in SRE. Maybe they've watched this because they want to learn

125
00:08:30,628 --> 00:08:34,340
what an SLO is. And don't worry, I'm going to go over that now.

126
00:08:35,510 --> 00:08:39,918
So where you start is with an SLI, a service level indicator.

127
00:08:40,094 --> 00:08:43,602
This will dictate the difference between success and

128
00:08:43,656 --> 00:08:47,246
failure. It's a binary distinction. So youll

129
00:08:47,278 --> 00:08:50,806
be able to, given whatever it is your feature is supposed to do,

130
00:08:50,908 --> 00:08:53,654
when it does the thing that it's there to do,

131
00:08:53,772 --> 00:08:57,094
youll very easily classify as either whether that's successful or

132
00:08:57,132 --> 00:09:01,290
was a failure. What your service level objective does

133
00:09:01,440 --> 00:09:05,194
is defines how frequently can I

134
00:09:05,232 --> 00:09:08,598
fail of every 100 or 1000 or 10,000 requests.

135
00:09:08,614 --> 00:09:12,062
How many of those are allowed to fail. And there needs to be some there

136
00:09:12,116 --> 00:09:14,800
that's allowed to fail. That number can never be zero.

137
00:09:15,730 --> 00:09:19,466
And then you get down to an SLA, which is defining

138
00:09:19,498 --> 00:09:23,034
the penalty for exceeding the failure

139
00:09:23,082 --> 00:09:26,722
goal. So if you break too much or

140
00:09:26,776 --> 00:09:29,906
break too often, what's the penalty there?

141
00:09:30,008 --> 00:09:33,458
Now, often with internal systems, you don't go down the

142
00:09:33,464 --> 00:09:36,626
full path for an SLA. You're not really going to be passing money around in

143
00:09:36,648 --> 00:09:39,846
the business. But if you look at AWS or

144
00:09:39,868 --> 00:09:42,982
GCP or azure, whenever you looks at service,

145
00:09:43,036 --> 00:09:46,294
there's an SLO that goes alongside, which says, how often in

146
00:09:46,332 --> 00:09:49,980
any given month is that service allowed to be down?

147
00:09:50,910 --> 00:09:54,858
And if they're down too much, they give you service credit back

148
00:09:55,024 --> 00:09:58,300
in exchange for that. So that's the service level agreement, right?

149
00:09:59,710 --> 00:10:02,934
And fundamentally, in order to have an SLA,

150
00:10:02,982 --> 00:10:05,438
you have to have an SLO. In order to have an SLO, you have to

151
00:10:05,444 --> 00:10:09,134
have can SLI. And a really common problem I

152
00:10:09,172 --> 00:10:13,278
see out there in my job is that

153
00:10:13,444 --> 00:10:16,340
there's SLAs and Slos that are written on paper.

154
00:10:17,350 --> 00:10:20,834
Sometimes, a lot of the time, there's not the SlIs to go along

155
00:10:20,872 --> 00:10:23,982
with it. So you have my network traffic,

156
00:10:24,046 --> 00:10:28,742
like my network traffic to my on premise environment that

157
00:10:28,796 --> 00:10:32,646
has an SLA of 99.9%. But you ask,

158
00:10:32,748 --> 00:10:36,166
how do you measure that? What's failure? What's success?

159
00:10:36,348 --> 00:10:39,866
No one ever knows, right? And they just put this on paper.

160
00:10:39,968 --> 00:10:44,646
And the term I've kind of coined for that is Schrodinger's SLA.

161
00:10:44,758 --> 00:10:48,326
If you can see your slA, if you can't measure

162
00:10:48,358 --> 00:10:51,610
your slA, you don't know whether your system's alive or dead.

163
00:10:52,190 --> 00:10:55,774
So how can you make decisions based on that? Right? Slo,

164
00:10:55,892 --> 00:10:59,358
it's a common anti pattern out there in the space. And I'll talk to

165
00:10:59,364 --> 00:11:03,134
youll towards the end of how you can get away from

166
00:11:03,172 --> 00:11:04,430
this antipattern.

167
00:11:06,470 --> 00:11:10,034
Okay, again, I know I keep coming back to user story, but bear with

168
00:11:10,072 --> 00:11:13,780
me. Right? So we have this use story provisioning AWS accounts. Cool.

169
00:11:14,390 --> 00:11:17,766
What's the SLI here? What dictates that the

170
00:11:17,788 --> 00:11:21,526
account was successfully provisioned or not successfully provisioned from the

171
00:11:21,548 --> 00:11:24,360
consumer's point of view? From the user's point of view,

172
00:11:27,290 --> 00:11:30,646
if you go and talk to your consumers and ask them, okay, you've asked,

173
00:11:30,668 --> 00:11:33,674
can AOS account? How quickly do you want it? They'll come back with something like

174
00:11:33,712 --> 00:11:37,366
five minutes. Now, for those people who haven't worked in AwS

175
00:11:37,398 --> 00:11:40,554
a lot, I can quite happily tell you that this is pretty

176
00:11:40,592 --> 00:11:44,222
much impossible, even if it is

177
00:11:44,276 --> 00:11:47,630
possible. The amount of effort that's going to have to go into

178
00:11:47,700 --> 00:11:50,574
this to get it to this point is huge, right,

179
00:11:50,772 --> 00:11:54,034
slo? Yeah, maybe we can do this. We can't really do

180
00:11:54,072 --> 00:11:57,710
much else. This is going to take weeks, maybe months of effort.

181
00:11:57,870 --> 00:12:01,394
So you counter, right? This is a negotiation. As you're managing that

182
00:12:01,432 --> 00:12:03,730
tension, it's about negotiating.

183
00:12:04,070 --> 00:12:07,766
So say okay, when you wrestle crown, I'll get you on within a week.

184
00:12:07,868 --> 00:12:08,920
Is that okay?

185
00:12:10,970 --> 00:12:14,566
When I think about this, as someone that's built all my

186
00:12:14,588 --> 00:12:18,114
fair share of landing zones, I could just have this as a weekly

187
00:12:18,162 --> 00:12:21,478
task that someone goes through and creates all the accounts for everyone. It's just a

188
00:12:21,484 --> 00:12:24,154
weekly task that someone picks up through the week and we get it done within

189
00:12:24,192 --> 00:12:27,194
a week. Cool. That seems pretty easy, right? Maybe it's a late Friday thing,

190
00:12:27,232 --> 00:12:30,406
I don't know. But now for consumers,

191
00:12:30,438 --> 00:12:33,546
they're now bottlenecking on us because a week is quite a long time to wait.

192
00:12:33,568 --> 00:12:36,718
If they're rapidly trying to provision and they realize need another account and it's like,

193
00:12:36,724 --> 00:12:40,654
oh, it's going to be a week, and now they're like twiddling thumbs, killing time,

194
00:12:40,772 --> 00:12:43,520
whatever else, this doesn't feel quite right.

195
00:12:44,930 --> 00:12:48,142
And this is take for an example of where I ended up with a client.

196
00:12:48,206 --> 00:12:51,954
Is a business day pretty reasonable? I'm going to have to build

197
00:12:51,992 --> 00:12:55,678
some automation around this to do this. If a team can't

198
00:12:55,694 --> 00:12:59,494
predict they're going to need an account a day in advance, there's probably other things

199
00:12:59,612 --> 00:13:02,854
that are maybe a little bit wrong. So this is

200
00:13:02,892 --> 00:13:06,582
generally fairly acceptable within the domain. And just

201
00:13:06,636 --> 00:13:10,106
for reference, this is 100 times slower than what the

202
00:13:10,128 --> 00:13:14,170
consumer wanted, and it's five times faster than what you proposed.

203
00:13:14,510 --> 00:13:17,814
But this is something that's workable and this is something that's explicit

204
00:13:17,862 --> 00:13:21,882
that it's measurable. And when

205
00:13:21,936 --> 00:13:25,806
we come to Slos, I use

206
00:13:25,988 --> 00:13:29,246
the idea of smart goals. Like an SLO is a goal that you're trying to

207
00:13:29,268 --> 00:13:33,042
hit. And I quite like smart goals. And I know they're more commonly seen in

208
00:13:33,096 --> 00:13:36,530
the personal development, career goal setting kind of space.

209
00:13:36,600 --> 00:13:39,874
Right? And you get the five

210
00:13:39,912 --> 00:13:44,018
ideas. It should be specific, measurable, attainable, relevant, and time box.

211
00:13:44,184 --> 00:13:47,574
Cool. All right. The slo that we had before that

212
00:13:47,612 --> 00:13:50,920
was I want an account vendored in one business day.

213
00:13:51,370 --> 00:13:55,590
That's specific, it's measurable, it's relevant, it's time boxed.

214
00:13:56,090 --> 00:13:59,682
Cool. But what about attainable?

215
00:13:59,746 --> 00:14:02,538
What's actually attainable here? What do we think we can actually do? Are we going

216
00:14:02,544 --> 00:14:05,978
to get every single account within a day for the rest of time.

217
00:14:06,144 --> 00:14:09,606
Do we really think that's possible? So when we start to narrow

218
00:14:09,638 --> 00:14:12,686
down this attainability bit, okay, so we

219
00:14:12,708 --> 00:14:16,826
have our SlI, and then once we add this attainable portion

220
00:14:16,858 --> 00:14:20,270
to it, it becomes an SLo. Maybe it's this.

221
00:14:20,340 --> 00:14:24,066
So account vending is in one business day 99% of the

222
00:14:24,088 --> 00:14:27,010
time, measured over a rolling 30 day window.

223
00:14:28,150 --> 00:14:31,586
Maybe that's where we're at. And one

224
00:14:31,608 --> 00:14:35,282
of the things I often find is because when you look at AWS or

225
00:14:35,336 --> 00:14:38,662
Azure or GCP or anything else, and you look at our slas, they're normally mentioned

226
00:14:38,716 --> 00:14:41,990
in three nines, four nines, five nines.

227
00:14:42,330 --> 00:14:45,170
Some of the stuff is. But at ten nines now, and it's obscene,

228
00:14:45,250 --> 00:14:48,598
right? And I found this has led to a lot of people

229
00:14:48,684 --> 00:14:52,266
dropping nines on stuff where the nine doesn't really make all that

230
00:14:52,288 --> 00:14:56,106
much sense. So let's just add a dose of realism to

231
00:14:56,128 --> 00:14:59,594
this. Let's not slap the number on because the number looks good. Let's work

232
00:14:59,632 --> 00:15:02,830
out what's feasible and attainable, what we think is realistic.

233
00:15:04,530 --> 00:15:07,678
If you put a 99% on here.

234
00:15:07,764 --> 00:15:10,782
So if we vend 100 counts a month,

235
00:15:10,916 --> 00:15:14,898
one's allowed to fail. Now, again, I appreciate not everyone spent a lot of time

236
00:15:15,064 --> 00:15:18,242
in the cloud or with this kind of problem, but trust

237
00:15:18,296 --> 00:15:22,382
me, 100 accounts is a lot. That is an unreasonable

238
00:15:22,446 --> 00:15:25,874
amount. I always like to think of it in

239
00:15:25,912 --> 00:15:29,858
this space. How many do we average

240
00:15:30,034 --> 00:15:33,366
and then how many do we think we want to let? What will give us

241
00:15:33,388 --> 00:15:36,870
enough room to fail? When you look at that 99%,

242
00:15:36,940 --> 00:15:40,386
like if youll say, oh, I don't mind a couple of accounts

243
00:15:40,418 --> 00:15:42,790
failing a month, I think we want to be able to have that freedom.

244
00:15:42,870 --> 00:15:45,722
You need to be 200 accounts a month to be able to do that.

245
00:15:45,856 --> 00:15:49,226
That is not reasonable. You can't do that.

246
00:15:49,408 --> 00:15:52,574
No business on earth is vending 200

247
00:15:52,612 --> 00:15:55,630
accounts a month. Definitely not consistently.

248
00:15:57,170 --> 00:16:00,446
So. Think about historical data, look within the

249
00:16:00,468 --> 00:16:04,142
industry, look elsewhere, or go ask someone who's done it before.

250
00:16:04,276 --> 00:16:08,434
And ten accounts a month, that's a bit more reasonable. I'd expect that

251
00:16:08,472 --> 00:16:11,934
to, over time, average out. That ends up being a reasonable assumption.

252
00:16:11,982 --> 00:16:15,800
We still want the two failures. Our SLo has now ended up at 80%.

253
00:16:16,170 --> 00:16:20,214
Okay, cool. So now we're working out these numbers based on

254
00:16:20,412 --> 00:16:24,294
realistic expectations. Realistic numbers and everything else.

255
00:16:24,332 --> 00:16:27,842
It's starting to get a lot more real and possible and feasible,

256
00:16:27,906 --> 00:16:31,046
right? And hey, would you look at this? We now

257
00:16:31,068 --> 00:16:34,554
have an slo that we're kind of happy with. The account vending happens

258
00:16:34,592 --> 00:16:37,622
in the business date, 80% of the time over 30 day window.

259
00:16:37,766 --> 00:16:41,654
Cool. All right. Now it feels like we're getting somewhere.

260
00:16:41,702 --> 00:16:43,740
Hopefully you kind of feel that, too.

261
00:16:45,150 --> 00:16:49,102
One thing I always want to talk about with this is kind of the general

262
00:16:49,156 --> 00:16:52,110
rule of thumb, and I was talking about nines. Now, people are very nine happy

263
00:16:52,180 --> 00:16:55,306
that adding an extra nine is generally ten times harder than adding

264
00:16:55,338 --> 00:16:59,106
the previous one. So going from a system that's up 99%

265
00:16:59,128 --> 00:17:02,878
of the time to 99.9% of the time is ten times harder.

266
00:17:02,974 --> 00:17:06,338
It's ten times more investment. Youll need better architecture,

267
00:17:06,434 --> 00:17:09,958
better monitoring, observability, like better people,

268
00:17:10,044 --> 00:17:13,958
everything around it just gets way harder. Right? And this is

269
00:17:13,964 --> 00:17:17,062
an enduring investment. Software entropy is real.

270
00:17:17,116 --> 00:17:21,098
System entropy is real. Maintaining a system

271
00:17:21,264 --> 00:17:24,618
at three nines is ten times harder than maintaining a

272
00:17:24,624 --> 00:17:28,140
system at two nines. And when you come down to it,

273
00:17:28,830 --> 00:17:32,898
team capacity is limited. If you're building many systems

274
00:17:32,934 --> 00:17:36,334
that all have four or five nines attached to everything to it,

275
00:17:36,372 --> 00:17:40,080
you're being to blow your team capacity out of the water.

276
00:17:40,450 --> 00:17:43,934
And they'll just end up in this maintenance period where they're just trying to keep

277
00:17:43,972 --> 00:17:47,300
stuff alive and they no longer have any room to move forward with things.

278
00:17:49,030 --> 00:17:52,402
Less, really is more as the team

279
00:17:52,456 --> 00:17:55,726
that's building out the product, what you want to do is you want to negotiate

280
00:17:55,758 --> 00:17:58,570
the minimum slos for your features,

281
00:17:58,750 --> 00:18:02,054
because the lower those slos are, the more time you have to do

282
00:18:02,092 --> 00:18:05,782
other things. Youll can do core things at a lower slo or fewer things

283
00:18:05,836 --> 00:18:09,338
at higher slo. When it

284
00:18:09,344 --> 00:18:13,306
comes to a landing zone. Ideally you want more. Potentially in

285
00:18:13,328 --> 00:18:16,822
your context, actually, you want less features. With higher slos.

286
00:18:16,886 --> 00:18:20,970
It depends on the business case, but really, it's by

287
00:18:21,040 --> 00:18:24,766
tracking how you are working and what the ongoing maintenance burden is

288
00:18:24,788 --> 00:18:28,538
on your team, of the stuff you've already built, you can make better decisions

289
00:18:28,554 --> 00:18:31,774
about where to spend your time tomorrow or next week, or even just

290
00:18:31,812 --> 00:18:34,900
today. And really,

291
00:18:35,350 --> 00:18:39,698
I am an engineer at heart, right? If I'm given these

292
00:18:39,784 --> 00:18:43,346
two things, I'm given the classic user story on

293
00:18:43,368 --> 00:18:47,414
the left hand side and on the right hand side, I have my

294
00:18:47,452 --> 00:18:51,286
slo when it comes to I have to design the

295
00:18:51,308 --> 00:18:54,934
architecture, I have to code the solution, I have to build the system that

296
00:18:54,972 --> 00:18:58,518
enables this. If you give the one on

297
00:18:58,524 --> 00:19:02,058
the right to ten engineers, you're going to end up with stuff that looks a

298
00:19:02,064 --> 00:19:05,718
lot more similar, that actually fits the business requirement.

299
00:19:05,814 --> 00:19:09,574
If you give the one on the left to ten engineers in isolation,

300
00:19:09,622 --> 00:19:13,098
you're going to get ten very potentially very different solutions

301
00:19:13,194 --> 00:19:16,446
with different characteristics. As performance characteristics and

302
00:19:16,468 --> 00:19:20,174
the way they interact with the business in the now and enduring sense will

303
00:19:20,212 --> 00:19:22,400
change. Now,

304
00:19:23,810 --> 00:19:26,862
as I said before, I haven't talked about it yet, but I

305
00:19:26,916 --> 00:19:30,706
raised the antipatten of Schrodinger's SLA before. How do you stop it so

306
00:19:30,728 --> 00:19:34,706
these slos and everything else stop just being

307
00:19:34,808 --> 00:19:38,914
paper tigers that don't really drive any change and don't drive accountability.

308
00:19:39,042 --> 00:19:42,870
So Schrodinger's SLA, okay, how do we avoid?

309
00:19:45,530 --> 00:19:49,094
Youll know, as much as I don't think you can

310
00:19:49,212 --> 00:19:52,466
debug a system with a dashboard, but you can tell system health from a dashboard

311
00:19:52,498 --> 00:19:55,178
a lot of the time, it's not going to help debugging it, but it's going

312
00:19:55,184 --> 00:19:58,234
to help, you know, what the health is like, being to be able to help

313
00:19:58,272 --> 00:20:02,234
you make the right decisions. And this is just kind of

314
00:20:02,272 --> 00:20:05,742
an artistic rendition of something

315
00:20:05,796 --> 00:20:09,726
I build at a client. Right, slo, when you've got all these portions and

316
00:20:09,748 --> 00:20:13,166
features and parts of the system and services you're providing and

317
00:20:13,188 --> 00:20:17,070
you're measuring them here, then you can start to

318
00:20:17,140 --> 00:20:20,674
make the right decisions. And I've listed some AOS services on the left hand side.

319
00:20:20,712 --> 00:20:24,018
You can use to build this stuff cheaply with really low total cost of

320
00:20:24,024 --> 00:20:27,902
ownership, something that's really easy to build. And also,

321
00:20:27,976 --> 00:20:31,218
this is something that I fundamentally believe if you're

322
00:20:31,234 --> 00:20:34,566
working in sprints or campaign or whatever else, what you

323
00:20:34,588 --> 00:20:38,246
want to do with this is build it into your process, make it so this

324
00:20:38,268 --> 00:20:41,354
isn't some dashboard that no one ever looks at again, but build it into how

325
00:20:41,392 --> 00:20:44,970
you function as a team. Every sprint review,

326
00:20:45,040 --> 00:20:49,174
look at how your system and your services created

327
00:20:49,222 --> 00:20:52,794
and performed in the last sprint. Did we let stuff

328
00:20:52,832 --> 00:20:56,174
fall to the wayside? Is everything we built working well enough that on the next

329
00:20:56,212 --> 00:21:00,062
sprint we can focus on features? What does it look

330
00:21:00,116 --> 00:21:04,034
like? What do our consumers expect, and how are we operating according to those

331
00:21:04,072 --> 00:21:07,486
expectations? Finding the place where this fits

332
00:21:07,518 --> 00:21:10,786
in your natural flow is really important to make sure

333
00:21:10,808 --> 00:21:13,010
it drives the right behaviors.

334
00:21:13,910 --> 00:21:17,218
And when we look at these, and we'll dive in a little, but you

335
00:21:17,224 --> 00:21:20,990
can see the ISC compliance against numbers low. Account vending is high.

336
00:21:21,080 --> 00:21:23,846
I've tried to use the goals to indicate stuff here, but let's just kind of

337
00:21:23,868 --> 00:21:27,494
look at what the numbers start to be able to, what they drive in terms

338
00:21:27,532 --> 00:21:31,650
of decisions. Look at that account vending. So we

339
00:21:31,660 --> 00:21:35,338
had the SLO before at 80%. We're at 95%.

340
00:21:35,424 --> 00:21:38,618
Cool. We've got a big error budget here. We can afford to drop quite a

341
00:21:38,624 --> 00:21:41,782
few accounts before we start going under the expectation

342
00:21:41,846 --> 00:21:45,338
for people. So is there a big refactor we

343
00:21:45,344 --> 00:21:48,254
want to do? Became although this is working, there's things we really don't like about

344
00:21:48,292 --> 00:21:51,674
it is the stuff we wanted to add to account vending or tack

345
00:21:51,722 --> 00:21:55,154
onto it, which may make it a little bit more unstable as you add new

346
00:21:55,192 --> 00:21:58,594
features while you mature those or you go, okay,

347
00:21:58,632 --> 00:22:02,322
account vending is good enough. No one's touching account vending. For now.

348
00:22:02,376 --> 00:22:05,702
We're going to focus on other stuff. It's working well

349
00:22:05,756 --> 00:22:09,240
enough for now. Let's go look at the next thing that we need to.

350
00:22:10,730 --> 00:22:15,186
Another thing that comes with SLOS

351
00:22:15,298 --> 00:22:18,954
is we're ever inflating expectations. Slo, you're building system to

352
00:22:18,992 --> 00:22:22,506
match expectations. If you overshoot the expectation, like in

353
00:22:22,528 --> 00:22:26,566
this case, we're at 95 over 80. If you operate

354
00:22:26,598 --> 00:22:29,702
at 95 for six months, unfortunately,

355
00:22:29,766 --> 00:22:33,466
everyone's going to now start thinking that although 80 is what it says and 80

356
00:22:33,498 --> 00:22:37,258
is what's calculated, people are going to start to expect that it's

357
00:22:37,274 --> 00:22:41,434
going to be 95. Became humans like to mistake

358
00:22:41,482 --> 00:22:44,820
correlation and causation. They'd like to draw patterns and things right.

359
00:22:45,510 --> 00:22:49,250
So when you have this error budget, take risks.

360
00:22:49,830 --> 00:22:53,122
When you have this space, make sure you remind people

361
00:22:53,176 --> 00:22:57,034
that systems can fail and your systems will fail. And they need to be prepared

362
00:22:57,102 --> 00:23:00,166
for that eventuality in kind

363
00:23:00,188 --> 00:23:04,034
of a way. Don't let them get too comfortable. Became that leads

364
00:23:04,082 --> 00:23:07,734
to massive problems down the road where all of a sudden they expect more

365
00:23:07,772 --> 00:23:10,760
than you're really willing to give to and commit to.

366
00:23:12,670 --> 00:23:16,678
Okay, let's look at another quick example. So access provisioning here. So we've

367
00:23:16,694 --> 00:23:19,674
only got a 2% error budget. We're only slightly above where we want to be.

368
00:23:19,712 --> 00:23:22,186
We're above where we want to be. Cool. So we don't necessarily need to go

369
00:23:22,208 --> 00:23:25,546
and look at this right now. But these are the kind of

370
00:23:25,648 --> 00:23:28,666
things where we probably don't want to add new features. This, if we can avoid

371
00:23:28,698 --> 00:23:31,450
it, because that's going to probably make it a little bit core unstable.

372
00:23:31,610 --> 00:23:34,734
Is there tech debt we can do a pay down of?

373
00:23:34,772 --> 00:23:37,746
Can we increase the testing? What can we do to make this a little bit

374
00:23:37,768 --> 00:23:41,278
more stable to give us error budget? How can we build the error

375
00:23:41,294 --> 00:23:44,926
budget up so we feel like we have enough room to take risk,

376
00:23:44,958 --> 00:23:48,326
to add new features, to leave this alone if that's what we want to

377
00:23:48,348 --> 00:23:52,326
do. And the last quick example is like the

378
00:23:52,348 --> 00:23:55,462
compliance scans, we're way below our budget here.

379
00:23:55,516 --> 00:23:59,286
Ideally, you should never end up 32% below, but who knows these things can

380
00:23:59,308 --> 00:24:03,130
happen, right? But this way you can use it to drive that forward.

381
00:24:03,200 --> 00:24:06,362
So right now it's okay. We're really underperforming here.

382
00:24:06,496 --> 00:24:10,102
We need to invest in stability. These be in the next sprint

383
00:24:10,166 --> 00:24:13,546
or the next tickets to get picked up off the queue. We need

384
00:24:13,568 --> 00:24:16,558
to make sure that we're getting the right tickets in here to bring this up

385
00:24:16,564 --> 00:24:20,222
to the level that we want it to be. Or potentially probably

386
00:24:20,276 --> 00:24:23,546
not. This is not the best example of this, but potentially

387
00:24:23,738 --> 00:24:26,894
is the old slo that we set. Is that too high?

388
00:24:27,092 --> 00:24:30,926
Is it turning infeasible to maintain over time? Did we misjudge

389
00:24:30,958 --> 00:24:33,266
things? Do we make the wrong trade offs? Do we need to go back and

390
00:24:33,288 --> 00:24:36,386
renegotiate with our consumers to go? We know we said we're going to give up

391
00:24:36,408 --> 00:24:39,874
95% of the time, but we've actually found that that's really a mass

392
00:24:39,912 --> 00:24:43,126
amount of effort for us to maintain. We want to drop that a little bit

393
00:24:43,148 --> 00:24:46,930
to give us time to do other things. And then you can have these conversations

394
00:24:47,010 --> 00:24:50,486
and really drive forward. Right. As opposed to constantly

395
00:24:50,518 --> 00:24:53,820
being stuck not knowing what's going on.

396
00:24:56,190 --> 00:24:59,990
And you can do this for almost anything.

397
00:25:00,080 --> 00:25:03,806
Again, this is just a table of some

398
00:25:03,908 --> 00:25:07,006
slos that I came up with.

399
00:25:07,028 --> 00:25:11,114
A hypothetical customer. Right? These aren't

400
00:25:11,242 --> 00:25:14,666
anything particular. And ideally,

401
00:25:14,698 --> 00:25:17,026
I don't want you to read all of these. I mean, feel free to go

402
00:25:17,048 --> 00:25:21,026
look in the slides later, but I would expect that in here

403
00:25:21,048 --> 00:25:24,722
there are things you disagree with, and that's fine, really,

404
00:25:24,776 --> 00:25:28,422
at the end of it. That's the point. By making

405
00:25:28,476 --> 00:25:32,374
these things explicit, putting them down on paper, having the conversations around

406
00:25:32,412 --> 00:25:35,702
them, making them measurable and actionable, and the source of where you drive

407
00:25:35,756 --> 00:25:38,920
your priorities, youll make these things real.

408
00:25:39,290 --> 00:25:42,634
And instead of having all these people with different ideas of

409
00:25:42,672 --> 00:25:46,806
what is okay and what isn't okay, everyone comes away with a common understanding

410
00:25:46,838 --> 00:25:50,198
of what's okay. It's the same being as having ubiquitous language

411
00:25:50,214 --> 00:25:55,322
and domain driven design. If you take away ambiguity

412
00:25:55,386 --> 00:25:59,118
and arrive at a common consensus, you can really move forward

413
00:25:59,284 --> 00:26:02,382
knowing that you all are on the same page. And that's one of the real

414
00:26:02,436 --> 00:26:06,670
powers of this. Now, if you're on

415
00:26:06,740 --> 00:26:10,206
Aws and you want to build out like an example, I do have a tiny

416
00:26:10,238 --> 00:26:14,014
little GitHub repo that kind of goes the account events

417
00:26:14,062 --> 00:26:16,838
all the way through to Grafana dashboard at the other side. You can go and

418
00:26:16,844 --> 00:26:19,110
give it a check out. It's pretty extensible.

419
00:26:20,410 --> 00:26:23,826
Go and have some fun with it. Or don't.

420
00:26:23,938 --> 00:26:26,790
I know. I'd like you to, but obviously no force.

421
00:26:27,710 --> 00:26:30,954
So with that, I'll just quickly just come

422
00:26:30,992 --> 00:26:34,902
back around on the key takeaways. So eliminated waste

423
00:26:34,966 --> 00:26:38,726
drives better outcomes. If we can stop gold plating

424
00:26:38,758 --> 00:26:42,122
and over engineering services and make sure we are building

425
00:26:42,176 --> 00:26:45,470
stuff that's good enough to do what the client wants,

426
00:26:45,620 --> 00:26:49,982
we can drive better outcomes for the product that we're building because

427
00:26:50,036 --> 00:26:53,230
we're better able to reprioritize and make sure that our time is always

428
00:26:53,300 --> 00:26:57,202
spent at the best place, at the best time. The second

429
00:26:57,256 --> 00:27:01,278
is that implicit expectations exist. Events that table

430
00:27:01,374 --> 00:27:04,658
of potential slos I put at the end. Right? Like we all have

431
00:27:04,744 --> 00:27:07,786
slightly different ideas of what success and failure

432
00:27:07,838 --> 00:27:11,606
means in the network space, for example. So you

433
00:27:11,628 --> 00:27:14,806
really need to look at these and find a way to surface them.

434
00:27:14,908 --> 00:27:19,246
And the best way I found of surfacing them is with SLos

435
00:27:19,378 --> 00:27:23,494
taking these expectations and converting them into concrete outcomes

436
00:27:23,622 --> 00:27:26,060
that drive the way you build your product.

437
00:27:26,750 --> 00:27:30,300
Slos are not only for the googles of the world, they're for everyone.

438
00:27:30,850 --> 00:27:34,430
I think they're fundamental about making sure you're building

439
00:27:34,500 --> 00:27:38,142
products that are fit for purpose and really

440
00:27:38,276 --> 00:27:41,374
live and kind of evolve with

441
00:27:41,412 --> 00:27:45,390
the customer and their differing demands and the ability of your team.

442
00:27:45,540 --> 00:27:49,182
Not these static systems that just live forever, but something that you can see

443
00:27:49,236 --> 00:27:52,602
grow around the problem space you're trying to explore,

444
00:27:52,666 --> 00:27:56,902
right? So hopefully everyone found that useful again.

445
00:27:56,956 --> 00:28:01,286
The slides will be available after. Obviously there's videos available if

446
00:28:01,308 --> 00:28:04,646
you want to find me on any of the socials, Twitter, LinkedIn, all that good

447
00:28:04,668 --> 00:28:08,118
stuff. I'm around always having a chat about this stuff. I hope you have a

448
00:28:08,124 --> 00:28:08,980
wonderful rest of your day.

