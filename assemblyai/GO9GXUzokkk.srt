1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,578
time feedback into the behavior of your distributed systems

3
00:00:09,674 --> 00:00:13,374
and observing changes exceptions errors in

4
00:00:13,412 --> 00:00:16,746
real time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,082
Clone hey

7
00:00:47,136 --> 00:00:51,750
everyone, Andy Knight here, automation panda and developer advocate at applitools.

8
00:00:51,830 --> 00:00:55,514
Today I'm going to show you how to run visual tests for your storybook

9
00:00:55,562 --> 00:00:59,086
components across different browsers. And you won't even need

10
00:00:59,108 --> 00:01:03,060
to write a single line of new test code. Let's learn

11
00:01:04,870 --> 00:01:08,674
here. I have a small react app that I developers myself using a

12
00:01:08,712 --> 00:01:12,066
storybook component library. I have it running on my

13
00:01:12,088 --> 00:01:13,090
local machine.

14
00:01:15,910 --> 00:01:19,494
All the different things you see on this app are components which

15
00:01:19,532 --> 00:01:22,550
are small, reusable places of the UI.

16
00:01:23,290 --> 00:01:27,174
Here I have three examples of components used to build this app,

17
00:01:27,372 --> 00:01:30,906
a button, a text input field, and even the

18
00:01:30,928 --> 00:01:34,486
scroll button I just clicked. Components are richer

19
00:01:34,518 --> 00:01:37,782
than plain old web elements. A web element

20
00:01:37,846 --> 00:01:41,070
is simply an entity declared by an HTML tag.

21
00:01:41,650 --> 00:01:46,030
A component, however, is a unit of UI.

22
00:01:46,770 --> 00:01:50,606
Components are made up of elements. Small components may

23
00:01:50,628 --> 00:01:53,598
be a single element with some CSS styling,

24
00:01:53,774 --> 00:01:57,442
but larger components like headers and sidebars may use

25
00:01:57,496 --> 00:02:00,754
multiple elements in order

26
00:02:00,792 --> 00:02:04,798
to make consistent designs. Web developers create component libraries

27
00:02:04,894 --> 00:02:08,882
so they can reuse components anywhere in these app without duplicating

28
00:02:08,946 --> 00:02:11,190
code or breaking their uniformity.

29
00:02:11,930 --> 00:02:15,426
For example, let's say you want all buttons in your app to be round

30
00:02:15,458 --> 00:02:19,334
and blue like this one. You could define a component

31
00:02:19,382 --> 00:02:23,190
for could blue buttons and use that component everywhere

32
00:02:23,350 --> 00:02:26,874
instead of explicitly setting every individual button to be

33
00:02:26,912 --> 00:02:30,194
round and blue. Tools like storybook

34
00:02:30,262 --> 00:02:34,506
enable developers to build and maintain libraries of reusable components

35
00:02:34,538 --> 00:02:35,360
like this.

36
00:02:39,170 --> 00:02:42,818
Components, just like any other pieces of code, can change as part of

37
00:02:42,824 --> 00:02:46,882
software development. Some changes are intentional, but others

38
00:02:46,936 --> 00:02:50,626
are not. What happens if that round blue button

39
00:02:50,728 --> 00:02:54,306
becomes rectangular? Or what happens if

40
00:02:54,328 --> 00:02:58,200
it turns red? Is that good or bad?

41
00:02:58,570 --> 00:03:00,470
Will anyone even notice?

42
00:03:02,810 --> 00:03:07,422
Some changes are obvious. For example, if the button accidentally

43
00:03:07,506 --> 00:03:10,294
becomes enormous due to a CSS typo,

44
00:03:10,422 --> 00:03:14,154
everyone would notice. Not all changes might be this

45
00:03:14,192 --> 00:03:18,010
obvious, though. Think about could buttons turning rectangular?

46
00:03:18,670 --> 00:03:21,230
Subtle changes can be easy to overlook.

47
00:03:23,330 --> 00:03:27,006
We need a way to visually inspect components. If we

48
00:03:27,028 --> 00:03:30,590
could compare a good baseline image side by side

49
00:03:30,660 --> 00:03:34,302
with the latest checkpoint image these we could easily see

50
00:03:34,356 --> 00:03:38,014
any differences. App tools eyes does this automatically

51
00:03:38,062 --> 00:03:41,938
for storybook components. It captures snapshots for each story

52
00:03:42,024 --> 00:03:45,718
and uses visual AI for comparisons. In fact,

53
00:03:45,804 --> 00:03:49,714
you don't even need to create any test cases or write any automated

54
00:03:49,762 --> 00:03:53,586
code. The applitools Eyes Storybook SDK

55
00:03:53,698 --> 00:03:57,110
automatically creates tests for each story it finds.

56
00:03:59,470 --> 00:04:03,402
We could do this testing manually using the storybook viewer, but we would

57
00:04:03,456 --> 00:04:06,666
probably miss things. Manual inspection would

58
00:04:06,688 --> 00:04:09,690
be difficult to scale with a large component library.

59
00:04:10,350 --> 00:04:14,298
It's also a hassle to do cross browser testing for these components.

60
00:04:14,474 --> 00:04:17,706
You need to reopen the storybook viewer in different browsers

61
00:04:17,818 --> 00:04:20,800
and grind through all the stories again and again.

62
00:04:23,570 --> 00:04:27,594
So let's see how to automate visual tests for storybook components

63
00:04:27,642 --> 00:04:31,294
using Appletool's eyes. I'll show you the storybook component

64
00:04:31,342 --> 00:04:34,890
library behind this app, and then I'll show you how to configure

65
00:04:34,990 --> 00:04:38,626
that project for visual testing. We'll run a few tests

66
00:04:38,658 --> 00:04:41,830
together and see how they appear in the applitools dashboard.

67
00:04:42,650 --> 00:04:46,502
Let's go. So here

68
00:04:46,556 --> 00:04:49,994
is the storybook component library for

69
00:04:50,032 --> 00:04:53,686
that react app we just saw. I have it opened

70
00:04:53,718 --> 00:04:57,226
in the storybook viewer in my browser. As you can

71
00:04:57,248 --> 00:05:01,130
see in the left sidebar, there are four components

72
00:05:01,210 --> 00:05:03,390
for this library,

73
00:05:04,530 --> 00:05:07,850
the button, these header,

74
00:05:08,010 --> 00:05:11,550
these scroll button, and the text input.

75
00:05:12,210 --> 00:05:15,614
Now, some of these components, such as the button, actually have multiple

76
00:05:15,662 --> 00:05:19,346
variations or stories for them. Here we

77
00:05:19,368 --> 00:05:22,834
can see the enormous button. We also have a

78
00:05:22,872 --> 00:05:25,720
large button, primary color,

79
00:05:26,090 --> 00:05:29,720
a rectangular button, and a secondary color.

80
00:05:30,890 --> 00:05:35,142
We can also use the different controls to view

81
00:05:35,276 --> 00:05:38,966
what the buttons would look like under different conditions.

82
00:05:39,158 --> 00:05:42,794
So here I can toggle the rectangular button between

83
00:05:42,832 --> 00:05:45,050
the primary and secondary colors.

84
00:05:46,590 --> 00:05:50,654
It's nice to come in here and manually test out our components as

85
00:05:50,692 --> 00:05:53,486
we're developing them. But keep in mind,

86
00:05:53,588 --> 00:05:56,926
as our component library grows, we're going to have more

87
00:05:56,948 --> 00:06:01,038
and more things to manually test. And so

88
00:06:01,124 --> 00:06:04,882
manual testing isn't going to keep up with the scale of

89
00:06:04,936 --> 00:06:08,402
most large web app projects. It'll be

90
00:06:08,456 --> 00:06:12,690
much, much better to have our visual testing automated.

91
00:06:13,990 --> 00:06:17,442
So here is the source code for that react

92
00:06:17,506 --> 00:06:22,550
app. I have the project open in vs code under

93
00:06:22,620 --> 00:06:26,214
source. You can see all of the

94
00:06:26,252 --> 00:06:29,754
stories for the different components in our

95
00:06:29,792 --> 00:06:33,834
library, as well as the app's main page and

96
00:06:33,872 --> 00:06:37,066
all that other react stuff if

97
00:06:37,088 --> 00:06:40,334
we want to add applitools eyes Storybook SDK to this

98
00:06:40,372 --> 00:06:43,646
project. Thankfully, we don't need to muck around too

99
00:06:43,668 --> 00:06:47,226
much with code. One thing we need to do is we'll

100
00:06:47,258 --> 00:06:50,830
need to add the Applitools

101
00:06:51,170 --> 00:06:54,458
Eyes storybook package to

102
00:06:54,484 --> 00:06:58,990
the project. Now, I've already done that, so you'll see it here in package

103
00:06:59,070 --> 00:07:02,514
JSOn. But if you wanted to install it into your

104
00:07:02,552 --> 00:07:08,200
own project, it's as simple as NPM install

105
00:07:08,810 --> 00:07:12,630
and then the name of that package.

106
00:07:13,450 --> 00:07:16,994
And you can do that for any project that has a storybook component

107
00:07:17,042 --> 00:07:21,100
library, whether that's react angular view

108
00:07:21,470 --> 00:07:25,386
doesn't matter. Now the

109
00:07:25,408 --> 00:07:29,350
other thing I need to add to my project is a config file,

110
00:07:29,510 --> 00:07:32,240
and that's here at the root project directory level.

111
00:07:32,610 --> 00:07:35,390
Appletools config js.

112
00:07:36,450 --> 00:07:40,090
Inside of this put a module exports

113
00:07:40,170 --> 00:07:44,066
objects, and add the following settings. First, you'll want

114
00:07:44,088 --> 00:07:47,860
to set a concurrency setting that will dictate how many

115
00:07:48,710 --> 00:07:51,842
parallel visual tests can run in the

116
00:07:51,896 --> 00:07:55,686
app tools Ultrafast test cloud. Note that if

117
00:07:55,708 --> 00:07:59,330
you're using an app tools free account, you'll be limited

118
00:07:59,410 --> 00:08:01,990
to one level of concurrency.

119
00:08:04,410 --> 00:08:09,254
Secondly, you'll have the batch name, which refers to the

120
00:08:09,292 --> 00:08:12,380
collection of tests that you will be launching at one time.

121
00:08:12,750 --> 00:08:16,266
So that way when you go to the app tools dashboard, you can see a

122
00:08:16,288 --> 00:08:19,610
helpful name for all the tests you have. I'm going to call this

123
00:08:19,680 --> 00:08:22,030
visually testing storybook components.

124
00:08:25,090 --> 00:08:28,218
The only other thing you need to do this kind of testing

125
00:08:28,314 --> 00:08:32,314
is an Appletools account. You can go to appletools.com slash

126
00:08:32,362 --> 00:08:36,260
register and sign up for a free account. Just to get started

127
00:08:36,790 --> 00:08:40,050
with your account. You'll get something called an API key,

128
00:08:40,200 --> 00:08:44,270
and you'll need to set that API key as an environment variable

129
00:08:44,350 --> 00:08:48,850
like this applitools

130
00:08:48,930 --> 00:08:52,694
API key equals and just paste whatever that key

131
00:08:52,732 --> 00:08:56,278
is. Now I'm going to keep mine secret because I don't want

132
00:08:56,284 --> 00:08:57,880
you running tests on my account.

133
00:09:01,150 --> 00:09:04,534
With those few things set up, it's time to run some visual

134
00:09:04,582 --> 00:09:07,450
tests. So from your project directory,

135
00:09:07,790 --> 00:09:11,610
run the visual tests using the following command,

136
00:09:11,770 --> 00:09:17,310
NPx eyes storybook,

137
00:09:19,570 --> 00:09:23,554
and you'll also need to give it the static directory of

138
00:09:23,592 --> 00:09:27,378
files, in my case, the public directory using the

139
00:09:27,464 --> 00:09:30,340
S option and let's run it.

140
00:09:31,270 --> 00:09:34,482
What this will do is it will start up storybook and

141
00:09:34,536 --> 00:09:38,230
the eyes SDK will look for all of these stories inside

142
00:09:38,300 --> 00:09:39,080
of it.

143
00:09:44,010 --> 00:09:48,126
Then it will perform the visual testing on each story it finds.

144
00:09:48,258 --> 00:09:52,234
So in our library we had four components, but it had a total of

145
00:09:52,272 --> 00:09:53,290
nine stories.

146
00:09:54,910 --> 00:09:58,220
Once all those stories are found,

147
00:09:58,670 --> 00:10:02,586
it will run the visual tests in the ultrafast

148
00:10:02,618 --> 00:10:05,230
test grid and it will upload the results.

149
00:10:05,810 --> 00:10:08,910
Here you can see a spill out for all of those results.

150
00:10:09,890 --> 00:10:13,486
There are those five stories for the

151
00:10:13,508 --> 00:10:16,994
button, each one with its name tests on chrome under

152
00:10:17,032 --> 00:10:20,834
the default viewport. We also had those two header, one scroll button,

153
00:10:20,872 --> 00:10:24,194
and one text input. And notice how all these were reported as

154
00:10:24,232 --> 00:10:28,246
new. New means it's establishing new baseline snapshots for

155
00:10:28,268 --> 00:10:31,558
each of these stories, and you can go to the

156
00:10:31,564 --> 00:10:35,046
applitools eyes SDK to see these results. All you got

157
00:10:35,068 --> 00:10:36,680
to do is click this link.

158
00:10:39,230 --> 00:10:42,694
When we visit the applitools dashboard. We can see that our batch

159
00:10:42,742 --> 00:10:46,454
of tests for visually testing storybook components has been uploaded

160
00:10:46,502 --> 00:10:49,594
to the dashboard. And in here,

161
00:10:49,632 --> 00:10:53,210
we have all nine of those new snapshots.

162
00:10:53,370 --> 00:10:57,166
So it's taking those baselines that we'll say are good,

163
00:10:57,268 --> 00:10:59,950
and we'll use those for future comparisons.

164
00:11:00,610 --> 00:11:03,826
You could even open them up to see what the baselines look like.

165
00:11:03,928 --> 00:11:07,490
For example, here's the baseline for the header.

166
00:11:09,510 --> 00:11:13,042
All good. Let's try running

167
00:11:13,096 --> 00:11:17,270
these tests again to see what happens when we take our first checkpoint.

168
00:11:19,610 --> 00:11:22,440
So back in our terminal in vs code,

169
00:11:23,050 --> 00:11:26,742
let's run the same test again with no changes to

170
00:11:26,876 --> 00:11:27,560
anything.

171
00:11:31,390 --> 00:11:34,422
Again, same thing happens, starts up storybook,

172
00:11:34,486 --> 00:11:38,166
identifies all the stories and will perform the visual testing

173
00:11:38,198 --> 00:11:40,330
on each of the nine stories it finds.

174
00:11:47,010 --> 00:11:50,382
And it does it pretty quick, thankfully. All right,

175
00:11:50,516 --> 00:11:54,402
so again, we have those nine test results, and now

176
00:11:54,456 --> 00:11:58,690
instead of saying new, each one is saying passed.

177
00:11:59,190 --> 00:12:01,780
Let's go look at those results in the dashboard again.

178
00:12:06,390 --> 00:12:09,606
Now, when we go to the app tools dashboard, we see

179
00:12:09,708 --> 00:12:13,250
that second round of tests having been uploaded,

180
00:12:13,330 --> 00:12:17,518
and they're all reporting as passed. They're not new anymore because we had baselines

181
00:12:17,554 --> 00:12:21,510
before they're passed, because applitools compared

182
00:12:21,590 --> 00:12:25,354
the checkpoint images to the baseline images. If we open

183
00:12:25,392 --> 00:12:28,742
them up, for example, like with the header here, we can visually

184
00:12:28,806 --> 00:12:32,574
compare the baseline with the checkpoint side by side.

185
00:12:32,692 --> 00:12:36,906
And upon visual inspection, it's obvious nothing has change.

186
00:12:37,098 --> 00:12:41,390
Therefore, all of these are good, and applitools marked them all as passed.

187
00:12:45,410 --> 00:12:48,866
Now, let's run our tests a third time. But first,

188
00:12:48,968 --> 00:12:53,246
let's introduce a visual change and see how Appletool's

189
00:12:53,278 --> 00:12:55,220
eyes identifies it.

190
00:12:56,410 --> 00:13:00,086
So let's turn our nice blue button

191
00:13:00,188 --> 00:13:04,002
into a red button. If we go into our stories

192
00:13:04,146 --> 00:13:07,706
and we go into button CSS, we can

193
00:13:07,728 --> 00:13:10,970
see all the css for styling those buttons.

194
00:13:12,350 --> 00:13:15,782
Let's tweak the class for the primary

195
00:13:15,846 --> 00:13:18,710
color instead of blue.

196
00:13:18,870 --> 00:13:20,220
Let's make it red.

197
00:13:22,930 --> 00:13:25,950
Nice flaming hot red. All right,

198
00:13:26,020 --> 00:13:29,680
let's save that. Let's run the tests again.

199
00:13:34,100 --> 00:13:37,170
Uhoh, what happened?

200
00:13:37,540 --> 00:13:41,296
So we can see that there's a little x by our nine of nine stories.

201
00:13:41,488 --> 00:13:44,864
And when we see the printout of the results, seven of the tests

202
00:13:44,912 --> 00:13:47,780
have passed, but two are marked as unresolved.

203
00:13:47,940 --> 00:13:49,880
Let's take a look in the dashboard.

204
00:13:52,300 --> 00:13:57,156
So here in the dashboard, we can see our latest catch had two unresolved

205
00:13:57,268 --> 00:14:00,996
test pages. Now, unresolved means that app tools

206
00:14:01,028 --> 00:14:04,140
has identified a visual difference, and it needs

207
00:14:04,210 --> 00:14:08,268
you as the human to come in and determine if that's good or bad.

208
00:14:08,434 --> 00:14:12,236
Remember, some visual changes can be okay if they were deliberately

209
00:14:12,268 --> 00:14:15,964
intended by the developer, but others may be bugs

210
00:14:16,012 --> 00:14:19,360
that happen accidentally or unexpectedly.

211
00:14:19,700 --> 00:14:22,976
So let's take a look in one

212
00:14:22,998 --> 00:14:26,892
of these. So here we have the visual snapshots

213
00:14:26,956 --> 00:14:30,436
for the primary button and if we open them when we

214
00:14:30,458 --> 00:14:34,628
compare side by side we can see there's a clear visual difference.

215
00:14:34,794 --> 00:14:38,340
The one on the left, the baseline is blue. These these one on the right

216
00:14:38,410 --> 00:14:42,104
is red. And Apple tool's eyes also highlights the

217
00:14:42,142 --> 00:14:46,520
differences for you in purple. So here

218
00:14:46,670 --> 00:14:50,110
we can say if this is good or bad.

219
00:14:51,200 --> 00:14:55,400
If it's good we can give it a thumbs up. And these, the latest checkpoint

220
00:14:55,480 --> 00:14:58,700
becomes the new baseline image against

221
00:14:58,770 --> 00:15:02,684
which future checkpoints will be compared. Or we could say

222
00:15:02,722 --> 00:15:06,256
this is a bug. And so at that point we would give a

223
00:15:06,278 --> 00:15:09,616
thumbs down and then the original baseline is

224
00:15:09,638 --> 00:15:12,400
kept and this one is seen as a failure.

225
00:15:15,700 --> 00:15:19,680
Let's say that these change was deliberate and expected and good.

226
00:15:19,830 --> 00:15:23,204
I'll mark it with these thumbs up and

227
00:15:23,242 --> 00:15:26,452
then what the app tools dashboard will do is it'll take you to

228
00:15:26,506 --> 00:15:30,872
the next unresolved test. And so here again we can see

229
00:15:31,006 --> 00:15:34,964
the differences in the component. This time we're looking at the header

230
00:15:35,092 --> 00:15:38,648
and Appletool's eyes narrowed in on the sign up button on

231
00:15:38,654 --> 00:15:41,996
the right being the only thing that change. All the other stuff in

232
00:15:42,018 --> 00:15:45,372
the header was the same so nothing was highlighted again.

233
00:15:45,426 --> 00:15:51,656
Since this is a good change, we'll say thumbs up and

234
00:15:51,778 --> 00:15:55,036
boom. Now our catch results

235
00:15:55,068 --> 00:15:58,336
have been updated. Anytime you save new baselines like

236
00:15:58,358 --> 00:16:00,720
that, remember to save your results.

237
00:16:02,900 --> 00:16:06,944
And now things will be good. And we have new baseline images

238
00:16:06,992 --> 00:16:08,180
for those tests.

239
00:16:12,840 --> 00:16:16,736
Let's make another change. This time I want to tweak the

240
00:16:16,778 --> 00:16:20,452
header. So let's go to our header

241
00:16:20,596 --> 00:16:24,088
JSX file and I want to

242
00:16:24,094 --> 00:16:27,432
do a couple of things here. First of all,

243
00:16:27,566 --> 00:16:30,876
I want to change the title text in

244
00:16:30,898 --> 00:16:34,728
the header. Rather than saying visually testing storybook components,

245
00:16:34,824 --> 00:16:38,556
let's change it to something else so we

246
00:16:38,578 --> 00:16:41,550
can see a text based change here.

247
00:16:42,660 --> 00:16:46,096
Also I want to tweak the layout. So if

248
00:16:46,118 --> 00:16:47,920
I go to header CSS,

249
00:16:50,100 --> 00:16:53,232
notice here in the wrapper, this controls how

250
00:16:53,286 --> 00:16:56,468
that layout of left and right with the buttons go. I'm going

251
00:16:56,474 --> 00:17:00,208
to be devious. Pretend I accidentally deleted

252
00:17:00,384 --> 00:17:04,212
justify content. All right,

253
00:17:04,266 --> 00:17:07,396
clearly this is going to mess up the visuals. So let's run the tests again

254
00:17:07,418 --> 00:17:08,630
and see what happens.

255
00:17:11,320 --> 00:17:15,224
Uhoh, bump, bump. But again, two of

256
00:17:15,262 --> 00:17:18,664
our tests are unresolved this time both of these the

257
00:17:18,702 --> 00:17:22,076
header component. That's to be expected given the change we

258
00:17:22,098 --> 00:17:25,180
made. Let's hop over to the dashboard to inspect.

259
00:17:27,200 --> 00:17:30,728
The latest batch has those two unresolved test cases.

260
00:17:30,824 --> 00:17:34,032
So let's take a look at them. I'll open

261
00:17:34,086 --> 00:17:37,456
one. Let's see what's different. Wow.

262
00:17:37,558 --> 00:17:41,232
Pretty much everything. So we can see that not only was

263
00:17:41,286 --> 00:17:45,548
the title change, but the buttons were changed.

264
00:17:45,724 --> 00:17:49,316
So on the original, the title was on the left and the

265
00:17:49,338 --> 00:17:52,448
buttons were on the right. In the latest checkpoint,

266
00:17:52,544 --> 00:17:56,452
the title text is different and the buttons no longer

267
00:17:56,506 --> 00:17:59,624
appear on the right, but are smashed all the way to the left, right next

268
00:17:59,662 --> 00:18:00,760
to the title.

269
00:18:03,820 --> 00:18:07,576
We can actually inspect these changes more deeply if

270
00:18:07,598 --> 00:18:10,972
we go to preview match level. We'll notice that right

271
00:18:11,026 --> 00:18:14,750
now it is on the strict matching level.

272
00:18:15,120 --> 00:18:18,812
Strict means app tools eyes is going to look for differences that

273
00:18:18,866 --> 00:18:22,216
a human eye would notice. This includes things

274
00:18:22,338 --> 00:18:25,200
like content, layout and all the above.

275
00:18:25,860 --> 00:18:29,296
But we can change the filter to look at different things. Let's try

276
00:18:29,318 --> 00:18:31,170
a matching level of content.

277
00:18:33,220 --> 00:18:36,816
What the content does is it looks to see what has changed

278
00:18:36,848 --> 00:18:40,496
in terms of the content. Not so much these layout

279
00:18:40,608 --> 00:18:43,988
content looking at colors as well as text.

280
00:18:44,154 --> 00:18:47,720
And so we can see here, because we changed all those things,

281
00:18:47,870 --> 00:18:49,610
it's still highlighting everything.

282
00:18:51,020 --> 00:18:53,240
But if I changed it to layout,

283
00:18:54,540 --> 00:18:57,944
meaning don't look at tests, only look at

284
00:18:57,982 --> 00:19:00,460
the things that have shifted in layout,

285
00:19:00,960 --> 00:19:04,620
then we see a much different picture here.

286
00:19:04,690 --> 00:19:08,428
The thing that app tools eyes denotes as being different in layout are

287
00:19:08,514 --> 00:19:12,524
the buttons themselves, right? The text

288
00:19:12,642 --> 00:19:16,796
visually testing storybook components versus mycool site is

289
00:19:16,978 --> 00:19:20,204
ignored by app tools eyes. And this can be helpful

290
00:19:20,252 --> 00:19:23,664
because sometimes it doesn't matter what these text is in a

291
00:19:23,702 --> 00:19:27,012
particular layout or field or

292
00:19:27,066 --> 00:19:30,752
grid or whatever you're doing. Maybe it's

293
00:19:30,896 --> 00:19:34,468
just these shifting of elements that you're looking for. So you

294
00:19:34,474 --> 00:19:37,604
can use these to help determine if this is a

295
00:19:37,642 --> 00:19:40,968
good or bad new checkpoint. For me, though,

296
00:19:41,054 --> 00:19:44,456
I do care about both layout and content, so I want to keep

297
00:19:44,478 --> 00:19:48,296
it on the strict comparison. And to me,

298
00:19:48,478 --> 00:19:52,396
the shifting of the buttons is a pretty bad thing. I would

299
00:19:52,418 --> 00:19:56,076
see that as a visual bug. So in this case, I'm going to

300
00:19:56,098 --> 00:19:58,540
give thumbs down for a failure.

301
00:19:59,680 --> 00:20:02,620
We can see in the other story of this component,

302
00:20:04,020 --> 00:20:07,616
there's only one button instead of two, but still it's been shifted and

303
00:20:07,638 --> 00:20:10,530
I don't like that. So I'm going to thumbs down that as well.

304
00:20:13,220 --> 00:20:17,220
Now we can see we have failed results because things were not equal.

305
00:20:18,120 --> 00:20:21,744
If I save, that will become saved. And so anytime

306
00:20:21,792 --> 00:20:25,700
that type of failure happens again, it'll automatically be logged as failed.

307
00:20:27,580 --> 00:20:30,884
What we should do now is we should go back to the code and update

308
00:20:30,932 --> 00:20:33,816
it to make sure that things will pass again.

309
00:20:33,998 --> 00:20:35,210
Let's do that.

310
00:20:37,740 --> 00:20:41,376
And bam. So what I did real quick is I went behind the scenes

311
00:20:41,428 --> 00:20:45,212
and I undid the changes and rerun the tests and now we can see

312
00:20:45,266 --> 00:20:48,572
everything is back to passing. If I look at those specific

313
00:20:48,706 --> 00:20:51,996
header comparisons, we can see boom.

314
00:20:52,028 --> 00:20:56,140
Boom. Our baseline was unchanged. Our checkpoint

315
00:20:56,300 --> 00:20:59,744
is fixed now. So that's how we can use

316
00:20:59,782 --> 00:21:03,264
visual testing to spot bad changes and then use that feedback to

317
00:21:03,302 --> 00:21:06,528
quickly make the improvements and fixes,

318
00:21:06,624 --> 00:21:09,670
rerun our tests and set everything back to being good.

319
00:21:12,680 --> 00:21:16,820
So far, all these testing we've done has been on Google Chrome.

320
00:21:17,160 --> 00:21:20,632
But with the Apple tools ultrafast grid, we could test

321
00:21:20,686 --> 00:21:23,850
our components against any browsers that we want.

322
00:21:24,220 --> 00:21:28,308
The advantage of doing cross browser testing is that we can render

323
00:21:28,404 --> 00:21:32,312
all of those snapshots under different configurations and detect

324
00:21:32,376 --> 00:21:36,364
if there's any weird differences between them. For example,

325
00:21:36,482 --> 00:21:40,076
maybe there's some weird thing with

326
00:21:40,178 --> 00:21:43,440
IE or safari that doesn't render our button

327
00:21:43,590 --> 00:21:47,360
as appropriately as we would want. And we want to find that. But before

328
00:21:47,430 --> 00:21:51,504
our users do another nice thing with cross browser testing for

329
00:21:51,542 --> 00:21:55,456
components is that if we have larger

330
00:21:55,488 --> 00:21:58,544
components, they may have some aspects of responsive

331
00:21:58,592 --> 00:22:02,404
design. So we want to make sure that those bigger components are

332
00:22:02,442 --> 00:22:05,940
rendered properly and all their elements appear appropriately,

333
00:22:06,280 --> 00:22:09,736
which in isolation is really nice because we can catch that

334
00:22:09,758 --> 00:22:13,140
before it spreads out to other pages. Thankfully,

335
00:22:13,220 --> 00:22:17,076
the app tools eyes SDK for storybook makes cross browser testing

336
00:22:17,108 --> 00:22:21,176
a breeze. All we have to do is update our app tools config

337
00:22:21,208 --> 00:22:24,376
js and in here you can see I've

338
00:22:24,408 --> 00:22:28,412
added this browser setting with a list

339
00:22:28,546 --> 00:22:31,784
of different browser configurations. I have

340
00:22:31,842 --> 00:22:35,984
five desktop browser configurations, each with their

341
00:22:36,022 --> 00:22:40,432
own viewport size as well as these name of the browser and

342
00:22:40,486 --> 00:22:44,724
I have five mobile browser configurations with

343
00:22:44,762 --> 00:22:48,816
these device name as well as the screen orientation

344
00:22:48,928 --> 00:22:52,596
being portrait or landscape. It's important to test not

345
00:22:52,618 --> 00:22:55,664
only different browsers, but also different viewport

346
00:22:55,712 --> 00:22:59,684
sizes and orientations. So let's

347
00:22:59,732 --> 00:23:03,492
see what happens when we run our nine stories

348
00:23:03,636 --> 00:23:07,000
against these ten browser configurations.

349
00:23:12,320 --> 00:23:16,300
And boom. Check it out. So here

350
00:23:16,370 --> 00:23:19,964
we had many, many more test results, 90 to

351
00:23:20,002 --> 00:23:23,216
be precise. And even though we

352
00:23:23,238 --> 00:23:27,264
had run some of these stories before for

353
00:23:27,302 --> 00:23:31,520
visual testing because they now have these new browser configurations,

354
00:23:32,180 --> 00:23:36,064
they have to establish new baselines. So that's why all of the results

355
00:23:36,112 --> 00:23:39,796
now are new. If we go

356
00:23:39,818 --> 00:23:42,820
to this link, we can see it all in the dashboard.

357
00:23:44,120 --> 00:23:47,752
And here are the results. As we can see we have 90 new

358
00:23:47,806 --> 00:23:51,316
results across all the different browser

359
00:23:51,428 --> 00:23:55,224
configurations we specified. And notice how

360
00:23:55,262 --> 00:23:59,796
little time it took this entire catch only took 37 seconds.

361
00:23:59,988 --> 00:24:03,116
37 seconds for 90 tests in a

362
00:24:03,138 --> 00:24:06,936
browser is really, really fast. That's why it's called the apple

363
00:24:06,968 --> 00:24:10,584
tools ultra fast grid. If you were to do traditional

364
00:24:10,632 --> 00:24:14,384
cons, browser testing for these 90 tests could take

365
00:24:14,502 --> 00:24:18,064
several minutes, possibly even an hour or more

366
00:24:18,102 --> 00:24:19,120
to execute.

367
00:24:20,500 --> 00:24:24,536
So cross browser visual testing for storybook

368
00:24:24,588 --> 00:24:27,190
components is really, really nice.

369
00:24:30,680 --> 00:24:34,404
One more thing I want to touch on is when and where to run your

370
00:24:34,442 --> 00:24:38,452
visual component tests. Now, component tests

371
00:24:38,516 --> 00:24:42,312
fall somewhere between your integration tests and your

372
00:24:42,366 --> 00:24:45,896
end to end tests, because components are like

373
00:24:45,998 --> 00:24:50,876
UI units. What I recommend is

374
00:24:50,898 --> 00:24:54,332
to run your visual component tests from some sort of

375
00:24:54,386 --> 00:24:58,424
CI process. I actually created a GitHub action

376
00:24:58,472 --> 00:25:02,336
in this example repository so that I could run them, let's say

377
00:25:02,438 --> 00:25:06,400
whenever a pull request is opened. Here is the

378
00:25:06,470 --> 00:25:09,852
workflow yaml for my GitHub action.

379
00:25:09,996 --> 00:25:13,250
It's pretty straightforward, so there's no reason not to do this.

380
00:25:13,860 --> 00:25:17,536
I run it on a Ubuntu image, and to do

381
00:25:17,558 --> 00:25:20,976
it you simply check out the code, you set up node JS,

382
00:25:21,088 --> 00:25:24,752
you install the dependencies, and then instead of running that command

383
00:25:24,816 --> 00:25:28,388
locally like we did before, you just run it here. You will need

384
00:25:28,394 --> 00:25:31,896
to configure your project with your applitools API key, but that

385
00:25:31,918 --> 00:25:34,936
should be the only input you need. And then you

386
00:25:34,958 --> 00:25:38,536
can specify the different steps in the workflow when you

387
00:25:38,558 --> 00:25:42,412
want to dispatch these, and they'll run and upload your results to the

388
00:25:42,466 --> 00:25:45,020
app tools dashboard. It's pretty nifty,

389
00:25:46,880 --> 00:25:51,176
and that's how you can run visual component tests for your storybook libraries.

390
00:25:51,368 --> 00:25:54,896
All you need to do is add the app tools eyes SDK to your

391
00:25:54,918 --> 00:25:58,636
project, declare some config, and run the tests.

392
00:25:58,828 --> 00:26:02,290
You don't need to explicitly write any new test code.

393
00:26:02,660 --> 00:26:05,936
If you want to try this for yourself, check out the example code in this

394
00:26:05,958 --> 00:26:09,916
GitHub repository and read this article I wrote recently on visual testing

395
00:26:09,948 --> 00:26:13,392
for storybook. Again, my name is Andy Knight. You can follow

396
00:26:13,446 --> 00:26:16,790
me on Twitter at automation panda. Feel free to hit me up with any questions.

