1
00:00:25,570 --> 00:00:29,282
Hello everyone, my name is Mitrivinik and I'm a developer advocate on the Facebook

2
00:00:29,346 --> 00:00:33,126
open source team. Today we'll talk about a project EnT and how it can make

3
00:00:33,148 --> 00:00:36,626
it easier for you to deal with data when working with go programming

4
00:00:36,658 --> 00:00:39,958
language. So let's go. As I said, today I'll talk about Ant and how it

5
00:00:39,964 --> 00:00:43,186
can make it easier for you to deal with data in go programming

6
00:00:43,218 --> 00:00:46,598
language. But before I do that, I'd like to introduce myself a

7
00:00:46,604 --> 00:00:50,078
bit more. And so what do I do? As I said, I'm an open source

8
00:00:50,124 --> 00:00:53,402
developer advocate and we are dealing with a massive portfolio

9
00:00:53,466 --> 00:00:56,830
of open source projects, more than 600 of them.

10
00:00:56,900 --> 00:00:59,742
And there are different pillars and areas of focus.

11
00:00:59,876 --> 00:01:03,194
And for myself personally, I focus on mobile development,

12
00:01:03,242 --> 00:01:06,954
Android, iOS and hybrid open source project like React

13
00:01:07,002 --> 00:01:10,526
native, lethal for Android, fresco for image

14
00:01:10,558 --> 00:01:14,686
management in Android, but also flipper which is extendable

15
00:01:14,798 --> 00:01:18,594
mobile apps, debugger and many more projects. But more importantly

16
00:01:18,642 --> 00:01:21,814
is that I'm very passionate about open source and that's why I'm talking

17
00:01:21,852 --> 00:01:25,314
about ANt and what is Ent? Ent was originally

18
00:01:25,362 --> 00:01:29,046
open sourced by Facebook and it's Orm for go programming

19
00:01:29,078 --> 00:01:33,350
language. What is OrM, you ask? Orm is object relational

20
00:01:33,430 --> 00:01:36,918
mapping. And again, it's a term, it's an acronym.

21
00:01:37,094 --> 00:01:41,110
And to define it I would use the most best online

22
00:01:41,200 --> 00:01:45,322
source ever. It's a technique for converting data between incompatible

23
00:01:45,386 --> 00:01:49,182
type systems using object oriented programming languages. It's a long

24
00:01:49,236 --> 00:01:52,526
sentence by was I said these best source on the

25
00:01:52,548 --> 00:01:56,386
web, Wikipedia. But ultimately in simple terms, what it

26
00:01:56,408 --> 00:02:00,130
does is imagine you have an entity user in your code

27
00:02:00,280 --> 00:02:03,490
with a certain number of attributes, user id,

28
00:02:03,640 --> 00:02:06,906
first name, last name and then you have a table

29
00:02:06,958 --> 00:02:10,134
in your database with the user id first name

30
00:02:10,172 --> 00:02:14,006
and last name. A stack that basically map to your object.

31
00:02:14,188 --> 00:02:18,098
In between. You would have orm that will connect your objects

32
00:02:18,194 --> 00:02:21,830
in your object created language which might be go or Java.

33
00:02:21,990 --> 00:02:25,974
With these table you don't have to called particular transactions

34
00:02:26,102 --> 00:02:29,466
deal with constraints. It will be handled for you in

35
00:02:29,488 --> 00:02:33,266
the Orm of your choice. And this Orm is what we're discussing

36
00:02:33,318 --> 00:02:37,194
today with and basically is that object relational mapping

37
00:02:37,242 --> 00:02:40,206
that we can use for go. And why is OrM important?

38
00:02:40,308 --> 00:02:44,098
Because why would we even discuss it if it wasn't? It's all about data.

39
00:02:44,184 --> 00:02:48,126
Everything is about data, big or small. Most applications

40
00:02:48,158 --> 00:02:51,522
are data driven. An example is for instance Google

41
00:02:51,576 --> 00:02:55,666
cloud integration. These simple diagram it's really driven by data.

42
00:02:55,768 --> 00:02:59,494
It has an important piece of these entire pipeline. If you talk about

43
00:02:59,532 --> 00:03:02,774
AWS, the startup use case that they have on their website.

44
00:03:02,972 --> 00:03:06,182
It's also all about data. They're dealing with data.

45
00:03:06,316 --> 00:03:09,986
And example of course was I'm working at Facebook, Facebook scribe,

46
00:03:10,018 --> 00:03:13,946
the log processor there alone were dealing with a massive amount of data.

47
00:03:14,048 --> 00:03:16,858
In this case logs, which is again a data.

48
00:03:17,024 --> 00:03:20,854
Data is extremely important. Was we just highlighted then OrM

49
00:03:20,902 --> 00:03:24,654
is important too. If you're dealing with something essential, whatever you're using

50
00:03:24,692 --> 00:03:28,366
was a tool for that. Data is important. And I've kind

51
00:03:28,388 --> 00:03:31,914
of talked about already theory quite a bit. And I personally

52
00:03:31,962 --> 00:03:35,486
do not like theory too much. That's why let's look at the code, let's look

53
00:03:35,508 --> 00:03:39,122
at ent in action, why it's so powerful. Again, they have great

54
00:03:39,176 --> 00:03:42,226
documentation that you can find on these website. And if you were to

55
00:03:42,248 --> 00:03:45,826
go to the simple intro page, you would find that the

56
00:03:45,848 --> 00:03:49,286
only thing you have to do is you have to run Goget and go to

57
00:03:49,308 --> 00:03:53,174
get the CLI installed. Then you initialize your project. In my

58
00:03:53,212 --> 00:03:57,270
case I call it endgotalk and it will produce you something like this.

59
00:03:57,340 --> 00:04:00,838
As you can see here, I have just a simple file

60
00:04:00,854 --> 00:04:04,742
for the project with a module name. Then if you run another operation

61
00:04:04,806 --> 00:04:08,262
to initialize simplest entity, simple file

62
00:04:08,406 --> 00:04:11,722
user in this case, because you remember that's like the easiest use

63
00:04:11,776 --> 00:04:15,166
case I can think of. And again, you can see that on a website as

64
00:04:15,188 --> 00:04:19,242
well. It will generate a schema for you, for the user with fields,

65
00:04:19,306 --> 00:04:23,262
just the placeholders initially. But if you wanted to take it further and

66
00:04:23,316 --> 00:04:26,514
let's say add age name or whatever else,

67
00:04:26,552 --> 00:04:30,286
you might decide to add those fields, after adding

68
00:04:30,318 --> 00:04:33,458
them, you will run generate operation with Ent.

69
00:04:33,544 --> 00:04:37,202
It will generate all sorts of files that necessary for you to use it.

70
00:04:37,256 --> 00:04:40,822
It's already fully functioning, so you can deploy it and start

71
00:04:40,876 --> 00:04:44,130
working with ent right away. If you wanted to create entities,

72
00:04:44,210 --> 00:04:47,766
for example, you create a client in the client, in this case

73
00:04:47,788 --> 00:04:51,626
I connect to sqlite three. And if I wanted to, as I

74
00:04:51,648 --> 00:04:55,610
said, create a user, the only thing I have to do is add

75
00:04:55,680 --> 00:04:59,162
this operation that sets name, h or whatever other

76
00:04:59,216 --> 00:05:02,266
attributes are required for my entity. In the

77
00:05:02,288 --> 00:05:05,358
situation, the way I showed before, I had first name and last name.

78
00:05:05,444 --> 00:05:08,414
Here I just have h name. It doesn't matter.

79
00:05:08,532 --> 00:05:11,998
It's just all about showing you how simple and quick it is to

80
00:05:12,084 --> 00:05:15,534
have something in your code that will allow you to interact with

81
00:05:15,572 --> 00:05:18,834
data as any other orm will allow you. And again, it's just

82
00:05:18,872 --> 00:05:22,226
a simple insight on how simple it is to start.

83
00:05:22,328 --> 00:05:25,906
And if you were to obviously not just create, but read something querying the

84
00:05:25,928 --> 00:05:29,454
entities again, you will add a query user

85
00:05:29,582 --> 00:05:33,686
function and that function you choose by what you're going to search for.

86
00:05:33,788 --> 00:05:37,334
It can be an id, it can be a name. In this case you can

87
00:05:37,372 --> 00:05:41,058
see that I just call a query function and specify a where clause.

88
00:05:41,154 --> 00:05:44,426
Similarly, as you were to do a query in these

89
00:05:44,448 --> 00:05:47,866
database directly, but here you can do it in the code and that's the only

90
00:05:47,888 --> 00:05:50,966
thing you really have to use. And again, if you want to go deeper,

91
00:05:50,998 --> 00:05:54,650
you'll find it on their website on endgo IO.

92
00:05:54,730 --> 00:05:58,254
And there is a lot more. If anything, Ent has a great deal of

93
00:05:58,292 --> 00:06:01,694
documentation you can pick and choose from and get started.

94
00:06:01,812 --> 00:06:05,006
There are many tutorials in there already. It teaches you

95
00:06:05,028 --> 00:06:08,338
how to set it up more than just intro, just step by step.

96
00:06:08,424 --> 00:06:11,682
It goes into more complex situations, how to create a to do,

97
00:06:11,816 --> 00:06:14,894
how to query and mutate your data. And more importantly,

98
00:06:14,942 --> 00:06:18,594
if you wanted to have some integrations, let's say with graphql

99
00:06:18,722 --> 00:06:22,274
or relay, it also goes into those details

100
00:06:22,322 --> 00:06:25,638
too. And of course there are more docs than that.

101
00:06:25,724 --> 00:06:29,138
There is the more complex documentation about schemas,

102
00:06:29,234 --> 00:06:32,634
about migration from the databases. How do you

103
00:06:32,672 --> 00:06:36,186
do graph traversal? And a lot, a lot more than that. And of

104
00:06:36,208 --> 00:06:39,718
course I'm really glad they have that here. It's about testing.

105
00:06:39,814 --> 00:06:43,710
No production code should be left untested, I believe. I'm not talking about 100%

106
00:06:43,780 --> 00:06:47,278
coverage built. You should have some tests to make sure something

107
00:06:47,364 --> 00:06:50,250
as important was dealing with data is tested.

108
00:06:50,330 --> 00:06:54,042
And fortunately this project has that writing in the documentation

109
00:06:54,106 --> 00:06:57,822
on the main page. If you really want to see the internals,

110
00:06:57,886 --> 00:07:01,554
you can see go to the godocs. It's available right on the website

111
00:07:01,672 --> 00:07:05,522
and it has all the information you need for that. But really

112
00:07:05,576 --> 00:07:08,982
it's all about the community. You want to join the community, don't just

113
00:07:09,116 --> 00:07:12,802
consume a project like this. And the community is great. It's growing.

114
00:07:12,866 --> 00:07:16,162
Right now they have a newsletter, a blog

115
00:07:16,226 --> 00:07:20,166
where these try to connect with the audience and discuss what the new features might

116
00:07:20,188 --> 00:07:23,386
be. They have a Twitter account. If you are following Twitter for

117
00:07:23,408 --> 00:07:26,602
the most part, and of course they have slack to discuss

118
00:07:26,736 --> 00:07:29,830
and do. The Q was whenever necessary.

119
00:07:29,910 --> 00:07:33,406
Or if you have a question about starting to use, go. And I always like

120
00:07:33,428 --> 00:07:37,262
to end my talks with quick call to action that gets

121
00:07:37,316 --> 00:07:40,926
you going after the presentation is over. I know it was a quick one,

122
00:07:41,028 --> 00:07:44,522
but I hope that you will experiment with tools.

123
00:07:44,586 --> 00:07:47,490
I haven't showed you much here, obviously. I just show you how to get started

124
00:07:47,560 --> 00:07:51,314
and why RM is important if you're not using one. But if

125
00:07:51,352 --> 00:07:55,410
you are directly dealing with data, you would find and a great project

126
00:07:55,480 --> 00:07:59,318
to deal with. A great tool to add to your toolkit. Join these ent community.

127
00:07:59,404 --> 00:08:02,598
Don't just use it. More importantly, try to contribute back.

128
00:08:02,684 --> 00:08:06,662
That's the very nature of open source. You join the community, you become

129
00:08:06,716 --> 00:08:10,370
a user, then you become a contributor, and then you might become a maintainer.

130
00:08:10,450 --> 00:08:14,402
Just try to engage and contribute back. Don't just consume.

131
00:08:14,466 --> 00:08:17,522
And with that, I'd like to say thank you. Follow me on Twitter,

132
00:08:17,586 --> 00:08:21,342
go to my blog LinkedIn or email me direct, likely for any questions.

133
00:08:21,476 --> 00:08:23,226
And thank you so much for listening.

