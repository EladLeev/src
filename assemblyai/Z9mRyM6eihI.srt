1
00:00:25,810 --> 00:00:29,382
Hello and welcome to my talk. My name is Prasav, and today

2
00:00:29,436 --> 00:00:33,302
I'm going to talk about a different side of the could language, one that

3
00:00:33,356 --> 00:00:36,630
will hopefully inspire you to search for the artist within yourselves.

4
00:00:36,970 --> 00:00:40,386
While preparing for this talk, I thought a lot about how to approach

5
00:00:40,418 --> 00:00:44,054
the subject. I could just sit and talk about

6
00:00:44,092 --> 00:00:47,382
art theory for hours, but no one would stay here and listen.

7
00:00:47,516 --> 00:00:50,894
I could also just dive straight into coding. That wouldn't make

8
00:00:50,932 --> 00:00:54,206
it quite either. Beyond the basics, much of

9
00:00:54,228 --> 00:00:58,158
the real creative work is just sitting alone and trying things for hours,

10
00:00:58,324 --> 00:01:01,982
failing and trying again and over and over and over again,

11
00:01:02,116 --> 00:01:04,834
trying different things, until they suddenly click.

12
00:01:04,952 --> 00:01:08,370
So I figure I could just tell a story instead,

13
00:01:08,520 --> 00:01:11,938
one that approaches the subject through the prism of my own experience.

14
00:01:12,104 --> 00:01:15,266
A story that, interestingly enough, starts at the

15
00:01:15,288 --> 00:01:18,454
end. At the end of our story, there has a book,

16
00:01:18,572 --> 00:01:21,686
an actually different kind of book. It had none of

17
00:01:21,708 --> 00:01:25,442
the usual suspects in it. There would be no web servers,

18
00:01:25,586 --> 00:01:29,222
that there would be no networks, no containers even.

19
00:01:29,356 --> 00:01:32,054
The book wasn't even supposed to teach the goal language.

20
00:01:32,182 --> 00:01:35,434
Instead, it was more meant to inspire people to try

21
00:01:35,472 --> 00:01:39,174
new things. Interestingly enough, it was also the first quote

22
00:01:39,222 --> 00:01:42,758
unquote product that I released after jumping into the unknown waters

23
00:01:42,774 --> 00:01:45,920
of solopreneurship at the start of this year.

24
00:01:46,290 --> 00:01:49,770
And yet, this book is only a byproduct of a long journey.

25
00:01:49,930 --> 00:01:53,398
Therefore, it's the journey that the rest of the story will focus upon.

26
00:01:53,514 --> 00:01:57,246
It's a story about finding new sources of inspiration, about picking

27
00:01:57,278 --> 00:02:01,282
up the goal language later in my career, and last but not

28
00:02:01,336 --> 00:02:05,154
least, about rediscovering the joy of programming through

29
00:02:05,192 --> 00:02:09,218
the language. My story with graphics began in the early 2000s.

30
00:02:09,384 --> 00:02:12,742
Like many kids at the time, I also wanted

31
00:02:12,796 --> 00:02:16,690
to make video games. So I started with can Pascal,

32
00:02:16,850 --> 00:02:20,934
but quickly realized that those weren't really helping me make the flashy

33
00:02:20,982 --> 00:02:24,394
stuff as fast as I wanted. So somewhere around that time,

34
00:02:24,512 --> 00:02:27,894
a new language called processing appeared. It caught

35
00:02:27,942 --> 00:02:31,706
my attention, and I immediately started playing with it. Processing was

36
00:02:31,728 --> 00:02:35,886
born at MIT. It wasn't meant so much

37
00:02:36,068 --> 00:02:38,794
targeting professional programmers,

38
00:02:38,842 --> 00:02:42,606
but more towards non experts, especially people with an

39
00:02:42,628 --> 00:02:45,954
artistic background. This was really the first time

40
00:02:45,992 --> 00:02:50,002
that I saw a language that was meant two really

41
00:02:50,056 --> 00:02:53,746
help people deal with graphics and such. So processing took

42
00:02:53,768 --> 00:02:57,734
the basics of Java, but it really simplified them. It also came

43
00:02:57,772 --> 00:03:01,346
with a really nice library that was helping

44
00:03:01,378 --> 00:03:04,742
people to work with graphics. Many of the processing works

45
00:03:04,796 --> 00:03:08,566
would occupy just a single file. They were called sketches at the

46
00:03:08,588 --> 00:03:12,150
time, and one of them would look something like this.

47
00:03:12,300 --> 00:03:15,930
So actually, this sketch on the left is

48
00:03:16,000 --> 00:03:19,962
one of the first sketches that I wrote in processing, and later

49
00:03:20,016 --> 00:03:22,798
on, it was the one that actually inspired me to write the book.

50
00:03:22,964 --> 00:03:26,270
As you can see, there's really nothing too

51
00:03:26,340 --> 00:03:31,038
complex and fancy about those sketches. It's essentially just a

52
00:03:31,044 --> 00:03:34,410
few lines of code that would, at the beginning,

53
00:03:34,490 --> 00:03:38,310
would just a nice color palette

54
00:03:38,490 --> 00:03:42,420
from a source image, and then would use those colors to

55
00:03:42,870 --> 00:03:46,580
basically randomly spread rectangles around

56
00:03:47,030 --> 00:03:50,374
in various degrees of opacity. And this would create this

57
00:03:50,412 --> 00:03:54,594
nice sort of overlay effect. But most of the processing sketches

58
00:03:54,642 --> 00:03:58,338
are something like that. They're quite simple. My obsession

59
00:03:58,434 --> 00:04:02,486
with the language even met me later on with one of the forefathers

60
00:04:02,518 --> 00:04:06,166
of the computer graphics field, the german guy called fidanaki.

61
00:04:06,278 --> 00:04:09,914
I was a student of his during my masters, and it was

62
00:04:09,952 --> 00:04:13,646
about that time when I really started reading more deeply about the

63
00:04:13,668 --> 00:04:17,162
philosophy behind those randomly scattered squiggly

64
00:04:17,226 --> 00:04:19,978
lines. But in a typical fashion,

65
00:04:20,154 --> 00:04:23,758
life took over, so I had to move on with it.

66
00:04:23,924 --> 00:04:27,854
I jumped out of university, and I made the career

67
00:04:27,902 --> 00:04:31,886
as a Java developer. It was about until late

68
00:04:31,918 --> 00:04:35,346
2018 when I was introduced to go as actually a part

69
00:04:35,368 --> 00:04:37,950
of a job switch. This was a pivotal moment,

70
00:04:38,040 --> 00:04:41,494
and probably one of the few moments that was

71
00:04:41,612 --> 00:04:44,738
going to define my future trajectory. I has so hooked

72
00:04:44,754 --> 00:04:47,894
up on the simplistic nature of the language that I started using it

73
00:04:47,932 --> 00:04:51,818
for other things. Has. Well, at some point, I figured I

74
00:04:51,824 --> 00:04:55,386
could just grab my old processing sketches and translate them two

75
00:04:55,488 --> 00:04:59,514
go, would that work? And the answer is

76
00:04:59,552 --> 00:05:03,214
yes. And as people say, the rest was just history. One thing

77
00:05:03,252 --> 00:05:07,182
led to another. But how does

78
00:05:07,236 --> 00:05:10,542
generative art really relate? Two law. To go into

79
00:05:10,596 --> 00:05:14,162
that, I will first have two define what generative art really

80
00:05:14,216 --> 00:05:18,110
is. And that's a difficult subject

81
00:05:18,190 --> 00:05:21,794
by itself, because you're probably about to find as many

82
00:05:21,832 --> 00:05:25,598
definitions of generative art as there are people dealing

83
00:05:25,614 --> 00:05:28,838
with it. And of course, none of them would fit the context of

84
00:05:28,844 --> 00:05:32,466
the goal image. So I had to come up with my own explanation.

85
00:05:32,658 --> 00:05:35,958
Allow me to share it with you. Generative heart is a

86
00:05:35,964 --> 00:05:39,626
balance between procedure and randomness. It's the result of

87
00:05:39,728 --> 00:05:43,094
simple steps multiplied many times over a complex

88
00:05:43,142 --> 00:05:46,714
organism of tiny actors interacting sequentially and

89
00:05:46,752 --> 00:05:50,762
concurrently with one another. Think about it. A lot of this actually

90
00:05:50,816 --> 00:05:54,586
applies to go, doesn't it? Actually a fun fact, this animation

91
00:05:54,618 --> 00:05:57,470
on the right was completely made with the goal language.

92
00:05:58,130 --> 00:06:01,966
I think it really exemplifies what I mean with

93
00:06:01,988 --> 00:06:05,070
this definition. It's a bunch of tiny actors,

94
00:06:05,150 --> 00:06:09,134
each of them taking simple and seemingly random

95
00:06:09,182 --> 00:06:13,074
steps. But in a combination, these lead

96
00:06:13,112 --> 00:06:17,006
two the breeding of new behavior, of complex behaviors.

97
00:06:17,038 --> 00:06:21,126
And this is one of the postulates of generative art as well. It's like you

98
00:06:21,148 --> 00:06:25,318
don't have to write complex code to achieve complexity. You just have to

99
00:06:25,484 --> 00:06:29,138
write simple things and multiply them over and over and

100
00:06:29,164 --> 00:06:33,222
over again, stepping on the product of the previous

101
00:06:33,286 --> 00:06:37,398
step, essentially. All right, let's look at some of the basic building blocks

102
00:06:37,414 --> 00:06:40,886
that the go standard library provides as well. As is usual

103
00:06:40,918 --> 00:06:44,970
for the go language, you're provided with only a bare set of basics.

104
00:06:45,130 --> 00:06:48,750
However, these basics are so well designed

105
00:06:49,090 --> 00:06:52,606
as it is usual for the language, we're provided with only

106
00:06:52,628 --> 00:06:55,850
a bare set of basics. In fact, most of the

107
00:06:55,860 --> 00:06:59,794
code types can really fit on one slide. It's just these three

108
00:06:59,832 --> 00:07:03,026
interfaces that you see on this slide that you need two

109
00:07:03,048 --> 00:07:07,606
know about, and you can pretty much say that you know most of the

110
00:07:07,628 --> 00:07:12,130
graphics fundamentals provided by the go standard library.

111
00:07:12,290 --> 00:07:16,294
Those basics are extremely well designed. They hold

112
00:07:16,332 --> 00:07:20,006
a minimum set of requirements, and that's it. For a type to

113
00:07:20,028 --> 00:07:23,562
qualify as an image, for example, it only needs to implement three simple

114
00:07:23,616 --> 00:07:26,986
methods, the same for the color you can think of.

115
00:07:27,008 --> 00:07:30,262
Those has essentially as the reader and the writer interfaces

116
00:07:30,326 --> 00:07:34,254
of the graphics domain. It's really this idea of composability and

117
00:07:34,292 --> 00:07:37,566
swapping that makes this whole thing so easy

118
00:07:37,668 --> 00:07:41,454
and so interesting. As we'll see later, this allows for other

119
00:07:41,492 --> 00:07:44,754
libraries to build up on those basics. All right,

120
00:07:44,792 --> 00:07:47,970
let's look at one example. I think there's no better

121
00:07:48,040 --> 00:07:51,998
way to speak about composition than the concept of image filters.

122
00:07:52,174 --> 00:07:56,306
A filter can be an image too, wrapping its source in itself.

123
00:07:56,488 --> 00:08:00,050
If we implement all the methods that satisfy the image interface,

124
00:08:00,130 --> 00:08:03,910
we could then use our filter in any other place that accepts an image.

125
00:08:04,410 --> 00:08:07,634
Another example, cutting a circle out of an image.

126
00:08:07,762 --> 00:08:11,126
I think this was actually featured in

127
00:08:11,148 --> 00:08:14,454
the Go documentation tool. Again, we can achieve

128
00:08:14,582 --> 00:08:17,946
the same effect by wrapping can existing source and telling it

129
00:08:17,968 --> 00:08:21,646
how to render each pixel. Unlike the previous example, here we

130
00:08:21,668 --> 00:08:25,422
selectively play with the opacity of the pixels and not

131
00:08:25,476 --> 00:08:29,086
just the color hue and saturation. So in

132
00:08:29,108 --> 00:08:32,698
a way, we achieve the creating of the circle by saying

133
00:08:32,804 --> 00:08:37,042
any pixel that's not in the circumference of the circle will

134
00:08:37,096 --> 00:08:40,866
have an opacity of zero, essentially meaning that it will

135
00:08:40,888 --> 00:08:44,690
be completely transparent. This leads to the perfect

136
00:08:44,760 --> 00:08:48,486
circular cutout we can see on the right hand side. Implementing all of

137
00:08:48,508 --> 00:08:51,826
those things by ourselves will be an overkill.

138
00:08:52,018 --> 00:08:55,542
Thankfully, there is a number of great libraries out there that provide

139
00:08:55,596 --> 00:08:58,998
us with what we need. Thanks to the composability and lack

140
00:08:59,014 --> 00:09:02,762
of deep abstractions. Those are also extremely easy to integrate or learn

141
00:09:02,816 --> 00:09:06,746
from. I could say perhaps one of the most widely used

142
00:09:06,928 --> 00:09:10,614
libraries when it comes to drawing 2d graphics

143
00:09:10,662 --> 00:09:13,390
in Go is called GG,

144
00:09:13,810 --> 00:09:17,982
and it's really simple to use. It's one of the main

145
00:09:18,036 --> 00:09:21,422
libraries that also feature in my book, and it's been

146
00:09:21,476 --> 00:09:25,170
essentially an indispensable tool in my work ever since I started

147
00:09:25,240 --> 00:09:28,306
working with graphics and go. What I really like about it

148
00:09:28,328 --> 00:09:32,398
is the fact that it has the same procedural

149
00:09:32,494 --> 00:09:36,018
API and look and feel of many of

150
00:09:36,024 --> 00:09:39,662
the functions that exist in the processing programming language.

151
00:09:39,806 --> 00:09:43,542
So those who have played with it would

152
00:09:43,596 --> 00:09:46,790
expect to find the same basic primitives to work with,

153
00:09:46,860 --> 00:09:50,074
essentially shapes and rectangles and

154
00:09:50,112 --> 00:09:53,402
fonts and basic image filters and such.

155
00:09:53,536 --> 00:09:56,934
It's extremely useful, and I can totally

156
00:09:56,982 --> 00:10:00,206
recommend using it. All right, before we

157
00:10:00,228 --> 00:10:04,346
go into a short demo session, here are a couple of notable mentions

158
00:10:04,458 --> 00:10:07,920
that didn't make it into this talk. The first one

159
00:10:08,370 --> 00:10:11,582
is webassembly. It's something

160
00:10:11,636 --> 00:10:15,426
that I've dedicated the whole bonus chapter and part of

161
00:10:15,448 --> 00:10:18,994
my book, and it's something that I

162
00:10:19,032 --> 00:10:22,802
would definitely want to expand further upon, and we

163
00:10:22,856 --> 00:10:26,626
might have a slight chance to see this into the demo. Although I'm

164
00:10:26,658 --> 00:10:30,438
not going two go into the code, I'm still going to show you

165
00:10:30,604 --> 00:10:34,454
how webassembly can be useful in

166
00:10:34,652 --> 00:10:37,880
producing graphics generators for the web. For example,

167
00:10:38,430 --> 00:10:41,962
the second thing is genetic algorithms. It's something that I'm currently working

168
00:10:42,016 --> 00:10:45,866
on, and it will definitely be one of my

169
00:10:46,048 --> 00:10:49,818
sources for future content for expansions of

170
00:10:49,824 --> 00:10:53,002
the book, and why not future topics for talks.

171
00:10:53,146 --> 00:10:57,150
So definitely expect to see more to come

172
00:10:57,300 --> 00:11:00,686
in the next year or so. And the third one

173
00:11:00,788 --> 00:11:04,218
is a book recommendation. I have to say it's one

174
00:11:04,244 --> 00:11:07,922
of the few books that I would definitely recommend for people

175
00:11:07,976 --> 00:11:11,966
wanting to start with graphics engineering programming ego.

176
00:11:12,078 --> 00:11:15,178
The book is called the Nature of Code by Daniel Shipman,

177
00:11:15,294 --> 00:11:18,178
and it's actually about processing,

178
00:11:18,274 --> 00:11:22,134
but it's so well written and so easy

179
00:11:22,172 --> 00:11:25,766
to follow that many of the things would be easily sort

180
00:11:25,788 --> 00:11:29,000
of transferable and applicable to go.

181
00:11:29,310 --> 00:11:33,206
And I should say there are a lot of interesting concepts

182
00:11:33,318 --> 00:11:36,810
going back to math and statistics and sort of

183
00:11:36,880 --> 00:11:40,798
different fields also, like talking about different aspects of the graphics and

184
00:11:40,884 --> 00:11:43,840
art. So definitely something to check out.

185
00:11:44,610 --> 00:11:48,526
All right, so the next portion of this talk will be a

186
00:11:48,548 --> 00:11:52,250
demo session in which I'm going to show

187
00:11:52,420 --> 00:11:56,590
one of my early sketches, and in parallel

188
00:11:56,750 --> 00:12:00,846
I wanted to demonstrate how go applications

189
00:12:00,878 --> 00:12:04,366
can be compiled to webassembly and drive interactive applications

190
00:12:04,398 --> 00:12:08,066
on the web. Let's jump right in. One of the subjects

191
00:12:08,098 --> 00:12:11,650
that I at least wanted to show in the demo. Unfortunately,

192
00:12:11,730 --> 00:12:14,758
it's quite a complex topic of its own,

193
00:12:14,844 --> 00:12:18,338
so I'm not going to be able to talk so

194
00:12:18,364 --> 00:12:22,554
much in detail about it is the

195
00:12:22,752 --> 00:12:26,234
compiling of go applications to webassembly and using them inside

196
00:12:26,272 --> 00:12:29,690
a web browser. So at least I wanted to show how I

197
00:12:29,760 --> 00:12:33,546
took one of my sketches

198
00:12:33,738 --> 00:12:37,646
and basically put it inside of

199
00:12:37,668 --> 00:12:41,054
a website. So what this website here,

200
00:12:41,172 --> 00:12:44,594
and this is the URL, what this

201
00:12:44,632 --> 00:12:48,754
website here does is it allows anyone to just go

202
00:12:48,792 --> 00:12:53,326
there and generate graphics,

203
00:12:53,438 --> 00:12:56,966
basically randomly generated graphics of

204
00:12:56,988 --> 00:13:00,934
their own. So I can definitely advise anyone to just go there

205
00:13:00,972 --> 00:13:04,966
and try it. It's completely live and I

206
00:13:04,988 --> 00:13:08,646
will make sure to put all the relevant

207
00:13:08,758 --> 00:13:12,442
URLs and addresses inside of the

208
00:13:12,496 --> 00:13:15,926
slides. So without further ado,

209
00:13:15,958 --> 00:13:19,866
I just wanted to start rendering and in

210
00:13:19,888 --> 00:13:23,680
parallel move to my other demo because this might take a little bit of time.

211
00:13:24,290 --> 00:13:25,040
Right.

212
00:13:27,570 --> 00:13:31,022
Okay. Loaded the wasm file and

213
00:13:31,076 --> 00:13:34,846
it starts drawing. So we could be able to see some results

214
00:13:34,878 --> 00:13:38,098
in a couple of, not more than a couple of minutes.

215
00:13:38,264 --> 00:13:42,194
In the meantime, I wanted to

216
00:13:42,392 --> 00:13:46,280
switch to a very simple sample sketch. It's actually the sketch that

217
00:13:47,610 --> 00:13:51,542
I'm speaking about in my book,

218
00:13:51,676 --> 00:13:54,726
and as one can see,

219
00:13:54,908 --> 00:13:58,246
setting up the whole sketch and the sketch itself,

220
00:13:58,348 --> 00:14:02,106
they're not really complex. They shouldn't be complex at

221
00:14:02,128 --> 00:14:05,306
all. Actually, I just wanted to show you

222
00:14:05,328 --> 00:14:08,982
a sample output of the sketch. So this is what it's supposed to render.

223
00:14:09,046 --> 00:14:14,366
It's essentially a reinterpretation of the

224
00:14:14,388 --> 00:14:17,966
processing sketch that you saw above, but with a

225
00:14:17,988 --> 00:14:21,358
little bit of addition. And since I actually

226
00:14:21,444 --> 00:14:25,490
like playing with random color palettes

227
00:14:27,830 --> 00:14:31,726
most of the time, I don't even start with predefined images

228
00:14:31,758 --> 00:14:35,230
of my own, but actually source random images from the Internet.

229
00:14:35,310 --> 00:14:38,454
And one of the things that I wanted to show you is how I do

230
00:14:38,492 --> 00:14:42,162
that. Not many people know, but the popular

231
00:14:42,306 --> 00:14:46,466
image sharing service unsplash, it has an API

232
00:14:46,658 --> 00:14:50,178
and it allows people to essentially go

233
00:14:50,204 --> 00:14:52,250
there and say, give me a random image.

234
00:14:53,950 --> 00:14:57,466
In our case, we don't even want to book at it, we just want to

235
00:14:57,488 --> 00:15:01,482
use it as a color palette source. Then once

236
00:15:01,536 --> 00:15:04,766
we have this image, we essentially create a

237
00:15:04,788 --> 00:15:08,142
sketch, and I will go in a couple of seconds into

238
00:15:08,196 --> 00:15:12,010
what this sketch entails. We give it a bunch of parameters,

239
00:15:12,090 --> 00:15:15,474
which I totally understand that not

240
00:15:15,512 --> 00:15:18,722
everyone will really understand what they mean.

241
00:15:18,776 --> 00:15:22,434
Sometimes I don't either. These are just

242
00:15:22,472 --> 00:15:27,442
meant to essentially

243
00:15:27,586 --> 00:15:30,934
drive the generation of every next step of every

244
00:15:31,052 --> 00:15:34,726
next iteration. So as you can see there, some of

245
00:15:34,748 --> 00:15:38,534
them will stay the same throughout the whole destination

246
00:15:38,582 --> 00:15:42,810
width, destination height, or others are essentially

247
00:15:43,310 --> 00:15:46,966
what the initial alpha of the rendering

248
00:15:47,158 --> 00:15:50,622
is, and minimum edge count

249
00:15:50,676 --> 00:15:54,622
and maximum edge count of the polygons that we're drawing and

250
00:15:54,676 --> 00:15:58,240
stuff like that. So with that done,

251
00:15:58,850 --> 00:16:03,360
what we do essentially is we

252
00:16:03,730 --> 00:16:06,834
go through a bunch of iterations. That's one of the things that

253
00:16:06,872 --> 00:16:10,718
make generative art what it is. It's essentially a bunch of iterations

254
00:16:10,814 --> 00:16:15,066
on top of simple steps. And on every iteration, we call the sketch update,

255
00:16:15,118 --> 00:16:19,254
the sketches update method. So let's take

256
00:16:19,292 --> 00:16:22,120
a quick look into the sketch itself. Again,

257
00:16:22,810 --> 00:16:26,534
super procedural. Nothing too fancy, nothing too

258
00:16:26,572 --> 00:16:30,474
complex. It's setting up a

259
00:16:30,512 --> 00:16:34,042
canvas under the hood using the library that I mentioned,

260
00:16:34,176 --> 00:16:38,726
Gg. It's extremely helpful for allowing

261
00:16:38,758 --> 00:16:42,906
us to set those things and draw primitives

262
00:16:42,938 --> 00:16:46,206
on top and mix and match with varying opacities and

263
00:16:46,228 --> 00:16:49,454
stuff like that. It's extremely simple and nice

264
00:16:49,492 --> 00:16:52,802
to start with. And then the actual update method is also

265
00:16:52,856 --> 00:16:56,274
not super computer. What's happening is unlike

266
00:16:56,392 --> 00:17:00,530
we draw a random pixel from source,

267
00:17:00,870 --> 00:17:04,162
transpose it over to the destination using

268
00:17:04,216 --> 00:17:07,746
this super complex, super complex formula

269
00:17:07,778 --> 00:17:11,378
of just finding the corresponding pixel into the destination

270
00:17:11,474 --> 00:17:15,720
and essentially saying, draw a

271
00:17:16,410 --> 00:17:19,740
polygon depending on the

272
00:17:20,350 --> 00:17:24,106
configuration, with a certain number of edges at

273
00:17:24,128 --> 00:17:27,580
this location. To make things even more interesting,

274
00:17:28,590 --> 00:17:31,594
I added these two parameters.

275
00:17:31,642 --> 00:17:35,566
So one is like this stroke inversion threshold, which says

276
00:17:35,748 --> 00:17:39,950
well beyond a certain size, since these

277
00:17:40,020 --> 00:17:43,360
polygons are expected to get smaller and smaller over time,

278
00:17:44,850 --> 00:17:48,322
start adding something like a border, so that

279
00:17:48,376 --> 00:17:52,066
the smaller the polygons are, the more sketchy they look like. So it

280
00:17:52,088 --> 00:17:55,960
looks like a graphic. So one is this, and the other is

281
00:17:57,450 --> 00:18:01,046
basically the one

282
00:18:01,228 --> 00:18:04,614
that's called stroke jitter. Again, something that

283
00:18:04,652 --> 00:18:07,682
I invented. It's completely up to

284
00:18:07,756 --> 00:18:12,214
the people who create the sketch to come up with naming

285
00:18:12,262 --> 00:18:16,042
conventions that sort of mean something

286
00:18:16,096 --> 00:18:19,740
to them. So the stroke jitter will just say, we don't want

287
00:18:20,050 --> 00:18:23,294
this particular color to appear in

288
00:18:23,332 --> 00:18:27,178
that exact spot based on the source.

289
00:18:27,274 --> 00:18:30,446
You can just as well add a

290
00:18:30,468 --> 00:18:34,026
little bit of a randomness to it. And that's what this stroke jitter

291
00:18:34,058 --> 00:18:36,560
will do. It just go through,

292
00:18:37,830 --> 00:18:42,020
we'll just say, take the pixel and

293
00:18:42,630 --> 00:18:47,874
give it a varying amount of distance

294
00:18:47,922 --> 00:18:51,894
from the original source. And yeah, on every

295
00:18:51,932 --> 00:18:55,654
iteration, we'll make sure to reduce the stroke size, and we'll also

296
00:18:55,692 --> 00:18:59,382
increase the alpha so that we create this sort of effect of reducing

297
00:18:59,446 --> 00:19:02,060
the polygon size. And at the same time,

298
00:19:02,750 --> 00:19:05,994
I'll just explain it as building up or

299
00:19:06,032 --> 00:19:09,900
sort of a kept effect of

300
00:19:10,690 --> 00:19:14,560
the drawing. So without further ado, I'll just say,

301
00:19:15,490 --> 00:19:18,846
let's go and try it. And as I was

302
00:19:18,868 --> 00:19:22,110
saying, based on the fact that it loads a completely

303
00:19:22,180 --> 00:19:25,954
random image, I have no clue what

304
00:19:25,992 --> 00:19:29,154
the actual output will look like. So this

305
00:19:29,192 --> 00:19:31,220
will be a bit of a surprise for me too.

306
00:19:36,250 --> 00:19:39,974
One thing you'll notice is that the

307
00:19:40,012 --> 00:19:43,606
smaller the polygons, respectively, the smaller the brushes at

308
00:19:43,628 --> 00:19:46,866
the end. It will get progressively faster

309
00:19:46,898 --> 00:19:50,666
and faster until eventually just finishes in a

310
00:19:50,688 --> 00:19:53,450
couple of milliseconds. So let's see the output.

311
00:19:54,670 --> 00:19:58,010
All right. Completely different image.

312
00:19:58,590 --> 00:20:01,840
Not sure if you like it or not.

313
00:20:03,010 --> 00:20:06,782
A bit dark to my taste. Maybe we'll just, you know, we'll just generate another

314
00:20:06,836 --> 00:20:10,638
one, but it will basically follow the

315
00:20:10,644 --> 00:20:15,470
same pattern image.

316
00:20:17,410 --> 00:20:20,450
Few more iterations and beyond the thousand,

317
00:20:20,520 --> 00:20:22,100
it will speed up.

318
00:20:24,970 --> 00:20:28,360
And there we go. Black and white. Interesting.

319
00:20:28,810 --> 00:20:33,346
All right, now let's

320
00:20:33,378 --> 00:20:35,590
switch back to the browser and see what we've.

321
00:20:39,370 --> 00:20:42,978
Okay, this is a new sketch. It's based on a concept called Perla

322
00:20:42,994 --> 00:20:47,386
Noise. It's very well explained in the Daniel Schiffman book,

323
00:20:47,568 --> 00:20:52,434
and it's something that I want to definitely emphasize

324
00:20:52,502 --> 00:20:55,614
more on in future talks and in future chapters of the book.

325
00:20:55,732 --> 00:20:59,310
So, as you can see, this one is also

326
00:20:59,380 --> 00:21:00,320
quite nice.

327
00:21:01,730 --> 00:21:05,218
And essentially, this sketch follows a

328
00:21:05,224 --> 00:21:08,014
similar approach in that it will etc.

329
00:21:08,142 --> 00:21:11,966
A sort of a random image from the Internet, and we'll

330
00:21:11,998 --> 00:21:15,398
use it as a color palette, but instead of

331
00:21:15,484 --> 00:21:18,726
randomly distributing polygons and triangles and whatnot, it will

332
00:21:18,748 --> 00:21:23,880
just use a concept called perlin noise to

333
00:21:24,410 --> 00:21:27,598
imitate randomly

334
00:21:27,634 --> 00:21:31,194
scattered brushes. So, yeah,

335
00:21:31,312 --> 00:21:31,980
again,

336
00:21:35,230 --> 00:21:39,066
this looks quite nice to me, but I leave it to

337
00:21:39,088 --> 00:21:42,414
the interpretation of the viewer at the end.

338
00:21:42,612 --> 00:21:46,318
So, yeah, with this beautiful

339
00:21:46,404 --> 00:21:50,142
picture, I just wanted to say thank you once again for

340
00:21:50,196 --> 00:21:53,982
choosing my talk today and definitely looking forward

341
00:21:54,036 --> 00:21:57,422
to seeing more and more people taking

342
00:21:57,476 --> 00:22:00,606
the goal language for a spin and seeing what else could be

343
00:22:00,628 --> 00:22:04,126
done with it beyond the usual aspects of

344
00:22:04,148 --> 00:22:06,166
its application. Thank you.

