1
00:00:17,610 --> 00:00:21,642
Welcome from SQL to NoSQL, a gentle introduction

2
00:00:21,706 --> 00:00:25,106
for new developers. My name is Joe Carlson,

3
00:00:25,178 --> 00:00:27,160
and let's get started.

4
00:00:27,770 --> 00:00:30,920
So did you know

5
00:00:31,770 --> 00:00:35,382
that there are the two main bottlenecks for

6
00:00:35,436 --> 00:00:38,314
any web application, generally speaking,

7
00:00:38,432 --> 00:00:43,062
tend to be either network speed or databases

8
00:00:43,126 --> 00:00:46,458
execution speed. But there's only one of

9
00:00:46,464 --> 00:00:49,974
these things that we actually can control with an asterisk.

10
00:00:50,022 --> 00:00:53,342
So network speed obviously is limited to

11
00:00:53,396 --> 00:00:56,846
the speed of light, which for some reason, human beings have not figured out

12
00:00:56,868 --> 00:01:00,462
how to break the speed of light yet. Something Einstein C,

13
00:01:00,596 --> 00:01:03,834
right. We can't do it. We can move our servers

14
00:01:03,882 --> 00:01:07,346
around to make that distance shorter, so the light has to actually

15
00:01:07,368 --> 00:01:10,562
travel less distance. But the easiest thing that we can control

16
00:01:10,616 --> 00:01:14,126
is actually increasing our database performance speed, which brings

17
00:01:14,158 --> 00:01:17,622
us to our subject today. So the more

18
00:01:17,676 --> 00:01:21,080
you know, database and network speed is very important.

19
00:01:22,490 --> 00:01:26,390
My name is Joe Carlson. I'm a developer advocate working

20
00:01:26,460 --> 00:01:30,198
for a small little company called MongoDB. Did I say I'm a developer

21
00:01:30,214 --> 00:01:34,106
advocate and software engineer? Well, I am, and here's my

22
00:01:34,128 --> 00:01:37,850
socials. Important note here before we get started,

23
00:01:37,920 --> 00:01:41,566
if I say anything controversial here today, just know it's my opinions, not my

24
00:01:41,588 --> 00:01:44,814
employer's opinions. And second of all, if you want to follow along

25
00:01:44,852 --> 00:01:47,498
with any of the resources, including code, snippets,

26
00:01:47,674 --> 00:01:48,590
links,

27
00:01:50,610 --> 00:01:54,126
video of this talk, the slide deck, any of that stuff, you can either scan

28
00:01:54,158 --> 00:01:57,746
that QR code in the upper right hand corner, or you

29
00:01:57,768 --> 00:02:00,434
can use that link there, that bit ly link, to get all the information.

30
00:02:00,552 --> 00:02:03,940
So let's get started here.

31
00:02:05,190 --> 00:02:08,962
The first thing I want to do is start from a SQL background,

32
00:02:09,026 --> 00:02:12,454
right? I think a lot of people have the

33
00:02:12,492 --> 00:02:16,514
SQL experience and are looking to evaluate

34
00:02:16,562 --> 00:02:19,894
NoSQL as a potential database. And the hard

35
00:02:19,932 --> 00:02:23,410
part about that in particular with MongoDB, is kind of mapping the

36
00:02:23,420 --> 00:02:26,378
terms and concepts. A lot of them are actually more similar than you think,

37
00:02:26,464 --> 00:02:29,738
but we have a different way of calling them, and there's different reasons why we

38
00:02:29,744 --> 00:02:32,990
do that, which we'll get into. The second thing I want to talk about today

39
00:02:33,060 --> 00:02:37,578
as well is four major reasons why you'd

40
00:02:37,594 --> 00:02:41,470
want to be selecting a NoSQL database like MongoDB over

41
00:02:41,620 --> 00:02:45,330
a traditional RDBMS SQL type database.

42
00:02:45,910 --> 00:02:49,362
Let's just jump in, huh? So first things first,

43
00:02:49,496 --> 00:02:52,642
MongoDB saves data in documents. Now,

44
00:02:52,696 --> 00:02:56,398
if you're totally new to programming, you might think that documents refers

45
00:02:56,414 --> 00:02:59,654
to something like a word document, which it doesn't. In this case.

46
00:02:59,692 --> 00:03:03,318
We're actually talking about JSon like documents. It's actually its own thing,

47
00:03:03,404 --> 00:03:07,030
Bson. It's binary instead of JavaScript,

48
00:03:07,450 --> 00:03:10,550
but it has a couple differences. With this BsOn notation.

49
00:03:10,890 --> 00:03:14,906
It might look a lot like an object or a dictionary or

50
00:03:14,928 --> 00:03:17,930
hashmap you've seen in other programming languages. And that's intentional, right?

51
00:03:18,000 --> 00:03:21,120
It's a data structure as programmers we're used to using.

52
00:03:21,570 --> 00:03:25,002
So just like a object, dictionary or hashmap,

53
00:03:25,066 --> 00:03:28,314
you access data in a document via key value pairs.

54
00:03:28,362 --> 00:03:30,400
So you access a key to go get that data.

55
00:03:33,570 --> 00:03:36,786
You can save things like strings. And this is for the binary, right?

56
00:03:36,888 --> 00:03:40,114
With JSon, every value is saved as

57
00:03:40,152 --> 00:03:43,698
a string. And it's up to whatever language kind of

58
00:03:43,704 --> 00:03:47,190
person to figure out what the language or the thing actually is. Bsun's more specific.

59
00:03:47,260 --> 00:03:49,894
With BSOn, we can save specific data types in it,

60
00:03:50,012 --> 00:03:52,978
like strings here, or integers,

61
00:03:53,154 --> 00:03:56,966
or this array of tuples. It's an

62
00:03:56,988 --> 00:04:00,538
array of integers. It's actually Geojson data. So you can save

63
00:04:00,704 --> 00:04:05,974
latitude and longitudinal data as its own specific BSOn

64
00:04:06,022 --> 00:04:10,220
data type. You can save arrays of data or

65
00:04:10,670 --> 00:04:14,430
arrays, or nested arrays or objects in any structure you want.

66
00:04:14,580 --> 00:04:17,998
So you can be very expressive about how you want to actually model that data

67
00:04:18,084 --> 00:04:22,426
in a document. So that's

68
00:04:22,458 --> 00:04:26,014
what a document looks like. But let's look at like a traditional SQL databases.

69
00:04:26,142 --> 00:04:29,262
How would we model the same data using an SQL database?

70
00:04:29,326 --> 00:04:32,980
Traditionally when we're using some normalization, like to the third form.

71
00:04:33,590 --> 00:04:36,466
So the first thing you'd want to do obviously, is this looks like it's some

72
00:04:36,488 --> 00:04:39,206
sort of user table or user data. So you'd probably want to start with a

73
00:04:39,228 --> 00:04:42,706
user table. But you'll see we actually can't

74
00:04:42,738 --> 00:04:46,040
save all the data in there. And the reason for that is

75
00:04:46,890 --> 00:04:50,730
traditionally with SQL database you want to normalize, you're not repeating data.

76
00:04:50,880 --> 00:04:53,978
So for something like the professions table, you'd want

77
00:04:53,984 --> 00:04:57,494
to split off into a separate table and link that data via foreign

78
00:04:57,542 --> 00:05:01,578
keys. So you can see here, because if you have n number

79
00:05:01,664 --> 00:05:05,374
of additional professions that you want to use. So we want to link those

80
00:05:05,412 --> 00:05:08,158
off. What about that cars table? Right.

81
00:05:08,324 --> 00:05:11,422
We want to do probably the same thing. The only difference here is we're saving

82
00:05:11,476 --> 00:05:14,638
more complex data. So our structure in SQL is going to

83
00:05:14,644 --> 00:05:18,286
have more columns. I always have to think about rows and columns.

84
00:05:18,318 --> 00:05:21,038
I get them confused in my head, but we're going to have those. So that's

85
00:05:21,054 --> 00:05:24,740
traditionally, how would we do this? Right? We were going to normalize this data.

86
00:05:25,270 --> 00:05:28,758
We'd be splitting up into separate tables and joining them via rows and

87
00:05:28,764 --> 00:05:31,270
columns or via foreign keys.

88
00:05:32,090 --> 00:05:36,086
Nothing too fancy. Nothing too fancy. Okay, so first little

89
00:05:36,108 --> 00:05:39,800
bit of vocab here. You know what?

90
00:05:40,410 --> 00:05:42,300
Let me skip over this right now.

91
00:05:44,430 --> 00:05:47,702
Did you know that MongoDB,

92
00:05:47,846 --> 00:05:51,446
I think a common misconception with MongoDB is it's a schemaless database.

93
00:05:51,558 --> 00:05:55,214
This is in fact actually not true. MongoDB is actually a

94
00:05:55,252 --> 00:05:56,990
flexible schema. Databases,

95
00:05:58,210 --> 00:06:02,286
whoops, hit the b button there. So what

96
00:06:02,308 --> 00:06:06,078
this means basically is at a database level, you can actually enforce

97
00:06:06,174 --> 00:06:09,186
schemas for your data, right?

98
00:06:09,368 --> 00:06:12,542
You can be as flexible or inflexible as you possibly

99
00:06:12,606 --> 00:06:15,954
want. A lot of traditional rdbms use,

100
00:06:16,152 --> 00:06:19,458
you have to use scheme validation for every row and column. For every column.

101
00:06:19,474 --> 00:06:22,854
Excuse me. And you can totally do something similar by saving every

102
00:06:22,892 --> 00:06:26,406
key value pair as a schema, but you can

103
00:06:26,428 --> 00:06:29,306
be as flexible with it as you totally want. Okay, let's go through some more

104
00:06:29,328 --> 00:06:32,858
rows or more vocab here.

105
00:06:32,944 --> 00:06:36,134
So a document in MongoDB would be analogous

106
00:06:36,182 --> 00:06:40,490
to a row or rows of data joined by foreign keys in a traditional rdbms,

107
00:06:41,170 --> 00:06:44,926
fields would be similar to a column. Right? Collections is

108
00:06:44,948 --> 00:06:47,742
the same as a table. And. Oh yeah.

109
00:06:47,796 --> 00:06:51,306
So MongoDB collect where there's no concept

110
00:06:51,338 --> 00:06:54,242
of a table. So stop me if you've heard this one before. It's an old

111
00:06:54,376 --> 00:06:55,730
programmer's joke.

112
00:06:57,590 --> 00:07:01,134
So a DBA walks into a NoSQL

113
00:07:01,182 --> 00:07:04,850
bar, but immediately leaves because he couldn't find a table.

114
00:07:05,750 --> 00:07:09,766
Pause for virtual groans thank

115
00:07:09,788 --> 00:07:12,200
you very much. Thank you so much. You guys are all great.

116
00:07:13,930 --> 00:07:17,174
Okay, so we have a lot of different terms. Let's get the one that's actually

117
00:07:17,212 --> 00:07:20,774
the same databases. Databases are same for both NoSQL

118
00:07:20,822 --> 00:07:24,246
and SQL databases. Did you know that NoSQL

119
00:07:24,278 --> 00:07:27,574
databases like MongoDB also support indexing?

120
00:07:27,702 --> 00:07:31,018
They do the same b tree structure for indexing data. You can

121
00:07:31,024 --> 00:07:33,962
do it. And you can actually do more complex things with the nested data structures.

122
00:07:34,026 --> 00:07:37,246
With MongoDB, you can embed that

123
00:07:37,268 --> 00:07:40,558
data. And that'd be analogous to joining, right? When we split up that data with

124
00:07:40,564 --> 00:07:43,726
our SQL data, instead of having to separate that into

125
00:07:43,748 --> 00:07:47,246
a separate foreign key, we can just keep all that data that we need together.

126
00:07:47,428 --> 00:07:50,514
There's no reason to have to go somewhere else to go get it right,

127
00:07:50,552 --> 00:07:53,246
because we keep it right there, which we're going to talk about has some massive

128
00:07:53,278 --> 00:07:56,290
performance gains. Also,

129
00:07:56,360 --> 00:07:59,634
did you know that MongoDB actually supports multi document

130
00:07:59,682 --> 00:08:03,622
asset transactions? Who knew? It's true.

131
00:08:03,676 --> 00:08:07,190
Yes, MongoDB actually supports multi document asset transactions.

132
00:08:07,530 --> 00:08:10,306
So if you can do an update, a delete, a git, a query,

133
00:08:10,338 --> 00:08:13,638
another update, delete, you can all make that a single asset transaction.

134
00:08:13,654 --> 00:08:16,378
If any of those fail, roll it all back just like you would with an

135
00:08:16,384 --> 00:08:19,526
asset or with a traditional rdbms or legacy systems,

136
00:08:19,558 --> 00:08:22,794
right? It's all there, that power.

137
00:08:22,912 --> 00:08:25,966
The difference though is you can be as flexible as you want with it.

138
00:08:26,148 --> 00:08:29,200
You can enforce that or not as much as you possibly want,

139
00:08:29,890 --> 00:08:33,710
which we'll talk about the end. But let's wrap up here.

140
00:08:33,780 --> 00:08:36,846
We're halfway through here, so we want to get through the four huge reasons why

141
00:08:36,868 --> 00:08:40,734
you might want to consider a NoSQL database like MongoDB

142
00:08:40,782 --> 00:08:44,878
for your next project. So those reasons are it allows you to program faster,

143
00:08:44,974 --> 00:08:48,482
it allows you to pivot easier, allows you to query your data faster,

144
00:08:48,546 --> 00:08:51,926
and allows you to scale cheaper. So let's dig into that first one,

145
00:08:51,948 --> 00:08:55,250
programming faster. So MongoDB,

146
00:08:55,330 --> 00:08:58,834
since it's using a data structure analogous to objects,

147
00:08:58,882 --> 00:09:02,634
dictionaries or hash maps, it converts easily to most major

148
00:09:02,672 --> 00:09:06,266
programming languages. So let's say hypothetically you have a

149
00:09:06,288 --> 00:09:10,202
project manager or boss that says, hey, we need you to go ahead and write

150
00:09:10,256 --> 00:09:14,054
a crud operation for our profile page. We need to update,

151
00:09:14,182 --> 00:09:18,026
maybe delete the user page. We need to, you do all that, right? So let's

152
00:09:18,058 --> 00:09:21,198
go ahead and do that. We're going to model our data similarly like

153
00:09:21,204 --> 00:09:24,506
we had before. Just going to be an object with that data in MongoDB

154
00:09:24,618 --> 00:09:28,674
or on the right side.

155
00:09:28,792 --> 00:09:32,334
I get those confused too. We're going to have our users and professions table joined

156
00:09:32,382 --> 00:09:35,634
by a foreign key. So let's see what this looks like to actually update this

157
00:09:35,672 --> 00:09:39,158
data with MongoDB. So first thing we need to do, and we have to do

158
00:09:39,164 --> 00:09:42,230
this with both of these things, but we need to actually connect to our database.

159
00:09:42,570 --> 00:09:46,694
Our databases are actually series going off here on

160
00:09:46,732 --> 00:09:50,530
a separate server that we have to go connect to. It's authenticate

161
00:09:50,610 --> 00:09:54,234
totally the same, right? No problem. Here's where we get

162
00:09:54,272 --> 00:09:57,402
start seeing some differences. So the first thing we want to do is actually

163
00:09:57,456 --> 00:10:01,210
find that user in our database. So what we're going to do is

164
00:10:01,360 --> 00:10:04,862
just do a query. We just tell MongoDB which databases we're in,

165
00:10:04,916 --> 00:10:07,518
which collection we're in, and we have to tell what to find. So we have

166
00:10:07,524 --> 00:10:10,906
our user id and say find user number xyz

167
00:10:11,098 --> 00:10:14,562
and boom, we're done, right? That object comes back as a

168
00:10:14,696 --> 00:10:18,114
object in memory we can start using. Okay, what about

169
00:10:18,152 --> 00:10:21,730
in SQL? So MSQL,

170
00:10:22,070 --> 00:10:25,378
we need to actually go make the SQL query. And then when we

171
00:10:25,384 --> 00:10:29,362
get that data back though, the difference is this thing called object impedance

172
00:10:29,426 --> 00:10:32,982
mismatch. Basically what that means is there's no baked in

173
00:10:33,036 --> 00:10:36,166
data type called a rows and column in any programming language. So we have to

174
00:10:36,188 --> 00:10:39,346
convert that data structure to something we can actually use in memory.

175
00:10:39,458 --> 00:10:41,626
So we have to map that into an object that we have to use,

176
00:10:41,648 --> 00:10:45,260
which we don't have to do with MongoDB because it's already a document, we're done.

177
00:10:46,510 --> 00:10:51,046
Next thing we have to do is since it's in two separate collections,

178
00:10:51,078 --> 00:10:55,006
we have to go make another query, pull that in and append that results to

179
00:10:55,028 --> 00:10:58,000
our object in. Oh right,

180
00:10:58,770 --> 00:11:01,626
and that's just querying the data. So what if we want to make an update

181
00:11:01,658 --> 00:11:05,242
to it? MongoDB, we have our object. Since we're

182
00:11:05,306 --> 00:11:08,194
using a table, we're probably going to be using an object anyways because that makes

183
00:11:08,232 --> 00:11:10,930
sense for saving this data structure in memory.

184
00:11:11,910 --> 00:11:15,090
And we do the same thing with our SQL

185
00:11:16,470 --> 00:11:19,606
and then we want to make can update on that user and all you do

186
00:11:19,628 --> 00:11:23,106
is pass that object in memory that we created to that user and boom,

187
00:11:23,138 --> 00:11:26,360
we're done. That's it. That's it.

188
00:11:27,050 --> 00:11:29,858
Because we're using that object in memory,

189
00:11:30,034 --> 00:11:33,226
MongoDB maps that instantly for us. We can save the data that

190
00:11:33,248 --> 00:11:37,146
we are thinking about it and using it as developers, but we

191
00:11:37,168 --> 00:11:40,250
have to translate that data when we're using SQL,

192
00:11:41,070 --> 00:11:44,458
right, because of that object impedance mismatch. So we

193
00:11:44,464 --> 00:11:47,678
have to go actually update that data and convert that data into a

194
00:11:47,684 --> 00:11:50,750
data structure that can be understood by the database.

195
00:11:51,090 --> 00:11:54,546
And we have to do that for both the user table and also the

196
00:11:54,568 --> 00:11:57,250
professional table. And we have to make those updates to that collection.

197
00:11:58,150 --> 00:11:59,700
That's a ton of work.

198
00:12:01,510 --> 00:12:04,786
So how much does that make us

199
00:12:04,808 --> 00:12:08,194
go faster. So in MongoDB, querying and updating

200
00:12:08,242 --> 00:12:12,566
a user takes 30 lines of code, with SQL takes 73

201
00:12:12,588 --> 00:12:14,760
lines of code, which is the exact same thing.

202
00:12:16,810 --> 00:12:20,706
All right, pivoting easier. So remember what I said about schema validation, right?

203
00:12:20,748 --> 00:12:24,662
Flexible schemas, this is really helpful, especially for prototyping

204
00:12:24,806 --> 00:12:28,406
or as your app changes. But if you want to make changes to the schema

205
00:12:28,438 --> 00:12:32,342
of a document, it's super easy. No problem with SQL,

206
00:12:32,486 --> 00:12:36,426
because you're enforcing data types for each thing, it becomes impossible or becomes

207
00:12:36,458 --> 00:12:39,214
more challenging. You have to make sure you're updating all the other old data with

208
00:12:39,252 --> 00:12:42,766
it. And again, you can totally do this with MongoDB. So for

209
00:12:42,788 --> 00:12:46,286
example, I just built an IoT device and I'm saving some time series data

210
00:12:46,308 --> 00:12:49,854
from the IoT sensors. And I added a new sensor to this device.

211
00:12:49,982 --> 00:12:53,726
I was able to start instantly adding that new sensor data to my time series

212
00:12:53,758 --> 00:12:56,978
data without a problem. I didn't care about the old data anyways because it

213
00:12:56,984 --> 00:12:59,686
was only showing a week's worth of data on my charts. So this wasn't a

214
00:12:59,708 --> 00:13:03,286
perfect use case for having a flexible schema with

215
00:13:03,388 --> 00:13:08,694
my program. It was perfect use case and

216
00:13:08,892 --> 00:13:12,186
performance, right? That's what we're all here for. You may not

217
00:13:12,208 --> 00:13:15,834
know this, but doing joins is extremely expensive, both for

218
00:13:15,872 --> 00:13:19,526
time and space for your databases. What's happening is it's

219
00:13:19,558 --> 00:13:22,794
making a query to all those tables, pulling them all to a center point in

220
00:13:22,832 --> 00:13:26,286
memory, and then doing a query on that data in memory from your

221
00:13:26,308 --> 00:13:29,406
database. This is blocking slow and

222
00:13:29,428 --> 00:13:32,606
does not scale, right? Especially if you're doing these same things over and over again.

223
00:13:32,628 --> 00:13:36,162
It's going to have to keep pulling this in, keep querying this data, keep saving

224
00:13:36,216 --> 00:13:40,034
it. It becomes a massive blocker for applications at

225
00:13:40,072 --> 00:13:43,506
scale. With MongoDB, though, if you can keep all that

226
00:13:43,528 --> 00:13:46,818
data in a single document, it takes a single query to go get all the

227
00:13:46,824 --> 00:13:50,726
data you need and to show back. Nothing has to be pulled into memory and

228
00:13:50,748 --> 00:13:54,086
queried and returned back, right? All the data we need is in

229
00:13:54,108 --> 00:13:57,662
one place. That's massively performant for applications,

230
00:13:57,746 --> 00:14:01,658
massively performant for applications and

231
00:14:01,744 --> 00:14:05,046
scalability, right? So as your server

232
00:14:05,078 --> 00:14:09,046
grows, it can grow horizontally with MongoDB, which I think involves

233
00:14:09,078 --> 00:14:12,534
a little bit of explanation, right? So vertical

234
00:14:12,582 --> 00:14:16,426
versus horizontal scaling. So let's say you have a SQL database

235
00:14:16,458 --> 00:14:19,678
and you run out of space on your server. What do you do?

236
00:14:19,844 --> 00:14:23,614
Well, if you have to go ahead and buy a bigger hard drive,

237
00:14:23,732 --> 00:14:26,574
you have to pause sending data to that old server and you need to start

238
00:14:26,612 --> 00:14:29,966
sending all that new data to that new server. You could have downtime.

239
00:14:29,998 --> 00:14:33,186
It takes a while. It's dangerous. And you probably know this

240
00:14:33,208 --> 00:14:37,234
from memory or like just from experience. But buying humongous hard drives

241
00:14:37,282 --> 00:14:40,630
quickly becomes more expensive, right? It exponentially gets more expensive.

242
00:14:42,010 --> 00:14:46,146
It starts cheap and then explodes up. So you're vertically scaling

243
00:14:46,178 --> 00:14:49,626
because you have to buy a vertically larger database and transfer all that

244
00:14:49,648 --> 00:14:53,210
data over to it. MongoDB horizontally scales.

245
00:14:53,950 --> 00:14:56,938
That means if you run a space on a MongoDB server, all you have to

246
00:14:56,944 --> 00:15:00,058
do is buy another server and MongoDB will

247
00:15:00,064 --> 00:15:04,074
automatically start, it's called sharding, and it'll start sending that data to the other servers

248
00:15:04,122 --> 00:15:07,886
instantly. There's no downtime instantly, right? You can do some cool

249
00:15:07,908 --> 00:15:12,014
stuff with like geolocation data and putting data close to users. There's some really

250
00:15:12,052 --> 00:15:15,346
interesting sharding strategies you can handle. I will also make a note too.

251
00:15:15,368 --> 00:15:18,478
A lot of document databases do not horizontally scale.

252
00:15:18,574 --> 00:15:22,046
If you're building a huge application, make sure your database

253
00:15:22,078 --> 00:15:25,874
can actually do horizontal scaling. All right,

254
00:15:25,912 --> 00:15:28,550
that's all four I think. 1234 yes. Awesome.

255
00:15:28,700 --> 00:15:32,546
So what is next for you? If I've inspired

256
00:15:32,578 --> 00:15:36,422
you at all, this is just a tiny taste of your stuff

257
00:15:36,476 --> 00:15:39,666
here. I wish I could have talked about the four biggest mistakes

258
00:15:39,698 --> 00:15:44,646
I see developers make when they come from a SQL

259
00:15:44,678 --> 00:15:47,180
background to NoSQL, but we don't have time today.

260
00:15:47,710 --> 00:15:50,780
But if I've inspired you at all and want to learn more about

261
00:15:51,170 --> 00:15:54,826
NoSQL databases, I highly recommend breaking

262
00:15:54,858 --> 00:15:58,734
out university mongodb.com. It's a totally free and open training

263
00:15:58,772 --> 00:16:02,574
source developed by MongoDB and you should totally check out the m one

264
00:16:02,612 --> 00:16:06,682
course. It's incredible and an amazing place to start if you're a brand new developer

265
00:16:06,746 --> 00:16:09,778
or brand new MongoDB developer and you can go as far as you want with

266
00:16:09,784 --> 00:16:13,122
those courses. They're amazing though. Other thing I'd recommend too

267
00:16:13,176 --> 00:16:16,660
is just get out there and do it right.

268
00:16:17,190 --> 00:16:19,926
If you have a home project and you're building something,

269
00:16:20,028 --> 00:16:23,106
just swap it out and use MongoDB as a database

270
00:16:23,138 --> 00:16:26,280
layer and then Google and try to figure it out. Come to our community,

271
00:16:27,050 --> 00:16:30,150
mongodb.com or a dev hub and try to figure out how to make the application

272
00:16:30,300 --> 00:16:33,638
for me. I don't expect you to learn something from having come to

273
00:16:33,644 --> 00:16:37,126
this talk. I expect you to have learned something after doing it on your own

274
00:16:37,228 --> 00:16:39,640
and I encourage you to go home and actually try it out.

275
00:16:40,290 --> 00:16:43,902
Dollars and in fact, if you want to get $100 in free Atlas credits,

276
00:16:43,956 --> 00:16:47,214
which is our hosted option in the cloud, which is so

277
00:16:47,252 --> 00:16:50,398
easy, there's a free tier forever. But if you want $100 in free credits,

278
00:16:50,484 --> 00:16:54,238
you should use code Joe K 100 and

279
00:16:54,404 --> 00:16:57,982
sign up. It's incredible. Seriously, I haven't set up a server

280
00:16:58,046 --> 00:17:01,966
side MongoDB instance forever because Atlas is so easy and convenient

281
00:17:01,998 --> 00:17:06,126
to use. You should totally check it out and here is some additional resources

282
00:17:06,158 --> 00:17:08,866
for you. But lastly, I just want to say thank you so much for having

283
00:17:08,888 --> 00:17:12,674
me here. I really appreciate it. You are the best. I feel humbled and lucky

284
00:17:12,722 --> 00:17:15,942
to be just a part of this. And yeah,

285
00:17:15,996 --> 00:17:18,470
I guess I hope I see you soon. So if you enjoy this at all,

286
00:17:18,540 --> 00:17:20,726
I would love for you to hang out with me later in the future.

287
00:17:20,828 --> 00:17:23,686
But here's my socials. You should totally come hang out with me. The best place

288
00:17:23,708 --> 00:17:27,506
to get a hold of me is on my twitter. But that's

289
00:17:27,538 --> 00:17:30,800
it. Again, thank you so much. You're the best.

