1
00:00:25,570 --> 00:00:29,042
It. All right, another session.

2
00:00:29,186 --> 00:00:32,694
This time we will talk a little bit about infrastructure as code,

3
00:00:32,732 --> 00:00:37,830
but not infrastructure as code itself. But if

4
00:00:37,900 --> 00:00:41,206
it is secure, and if not, what we can do to

5
00:00:41,228 --> 00:00:45,302
make it a little bit more secure, what is

6
00:00:45,436 --> 00:00:49,222
quite important, I believe. Okay,

7
00:00:49,356 --> 00:00:53,230
so let's get started.

8
00:00:53,380 --> 00:00:57,034
My name is Paolo Pivots and I am a lead system engineer

9
00:00:57,082 --> 00:01:01,518
at IPAM, Poland. I work here for last

10
00:01:01,604 --> 00:01:05,166
two and a half years almost free. Also, I am DevOps

11
00:01:05,198 --> 00:01:08,850
Institute ambassador and AWS community builder.

12
00:01:09,590 --> 00:01:13,140
So we will have a little presentation today.

13
00:01:13,830 --> 00:01:17,318
Part of it will be in AWS because, well,

14
00:01:17,404 --> 00:01:22,262
you see why. All right, so first

15
00:01:22,316 --> 00:01:26,566
of all, we will talk about security

16
00:01:26,748 --> 00:01:29,990
in terraform templates. So what is terraform?

17
00:01:31,690 --> 00:01:35,338
I strongly believe that all of you know already,

18
00:01:35,424 --> 00:01:38,554
but just to be sure, it is an

19
00:01:38,592 --> 00:01:46,426
infrastructure as code tool, right? So very basic

20
00:01:46,458 --> 00:01:50,094
information. Right? So what is infrastructure as code then? Right.

21
00:01:50,132 --> 00:01:53,154
So infrastructure as code is a fast,

22
00:01:53,352 --> 00:01:57,838
dynamic, programmable way to deploy hidden misconfigurations

23
00:01:58,014 --> 00:02:01,090
everywhere. Yep.

24
00:02:01,510 --> 00:02:05,494
And when we start to think about infrastructure as code in this way,

25
00:02:05,612 --> 00:02:09,574
the new world opens, because very

26
00:02:09,612 --> 00:02:12,870
often we use infrastructure as code just like this. Right?

27
00:02:12,940 --> 00:02:16,242
We are writing something. Deploy, rewriting, deploy,

28
00:02:16,306 --> 00:02:19,340
rewriting, deploy, rewriting, deploy. And after two days,

29
00:02:20,110 --> 00:02:23,660
finally our template is ready.

30
00:02:25,310 --> 00:02:29,740
I've been there. I know that it's quite,

31
00:02:30,610 --> 00:02:34,014
let's say not usual to see

32
00:02:34,052 --> 00:02:37,962
something like that, but we have possibilities

33
00:02:38,026 --> 00:02:40,670
to work with it a little better.

34
00:02:40,820 --> 00:02:43,860
So in terms of security,

35
00:02:44,790 --> 00:02:48,482
what we deal with. So for

36
00:02:48,536 --> 00:02:52,734
sure, you remember like almost two years ago, solar winds,

37
00:02:52,782 --> 00:02:56,214
right, to go a

38
00:02:56,252 --> 00:03:00,358
little, but through it, to give you a little

39
00:03:00,444 --> 00:03:04,390
bit more insight,

40
00:03:06,570 --> 00:03:11,754
what happened there. So the bridge was

41
00:03:11,792 --> 00:03:15,018
done for the company, which has like 300,000

42
00:03:15,104 --> 00:03:18,970
customers, right? And 30,000 used

43
00:03:19,040 --> 00:03:23,022
Orion with the application, which, let's say were

44
00:03:23,076 --> 00:03:26,746
infected. This infected

45
00:03:26,778 --> 00:03:30,638
version was downloaded or were downloaded 80,000

46
00:03:30,724 --> 00:03:31,360
times.

47
00:03:33,350 --> 00:03:37,854
80,000. More than ten government institution

48
00:03:37,902 --> 00:03:44,674
in us was infected or affected by these, by this

49
00:03:44,712 --> 00:03:48,342
version. And to say even

50
00:03:48,396 --> 00:03:51,958
more, Microsoft, Nvidia, Palo Alto, what is interesting,

51
00:03:52,044 --> 00:03:55,526
because they are also working with the security different level,

52
00:03:55,628 --> 00:03:58,986
but yes, and VMware, just to list a

53
00:03:59,008 --> 00:04:02,970
few of them. And Orion was the first.

54
00:04:03,040 --> 00:04:06,986
And like a half a year or one year later, they had another

55
00:04:07,088 --> 00:04:12,302
issue. Right? So now

56
00:04:12,356 --> 00:04:15,774
you can say, all right, but it was not about infrastructure as

57
00:04:15,812 --> 00:04:20,846
code. Right? Okay, I agree. But this

58
00:04:20,868 --> 00:04:24,206
is what we deal with and this is

59
00:04:24,228 --> 00:04:28,740
one of the element of the puzzle. So let's look on

60
00:04:30,070 --> 00:04:33,874
few numbers first. And those

61
00:04:33,912 --> 00:04:37,910
numbers are collected from IBM and Ponemon Institute report from.

62
00:04:38,060 --> 00:04:41,560
Well, almost two years right now. So it's for 2020.

63
00:04:42,330 --> 00:04:46,280
So average cost of each bridge is almost 4 million.

64
00:04:48,090 --> 00:04:51,754
Quite a lot, right? All right. IBM and Ponemon works with big

65
00:04:51,792 --> 00:04:54,726
customers or big organizations.

66
00:04:54,838 --> 00:04:55,980
But anyway,

67
00:04:58,430 --> 00:05:02,762
this will be interesting because average time to identify and contain

68
00:05:02,906 --> 00:05:06,442
the breach, and the breach

69
00:05:06,586 --> 00:05:09,600
is 280 days,

70
00:05:11,090 --> 00:05:14,494
from which 207 days in average

71
00:05:14,542 --> 00:05:18,114
is to identify the problem and then more

72
00:05:18,152 --> 00:05:21,650
than 70 to contain the problem. So to fix

73
00:05:21,720 --> 00:05:25,570
the problem, IBM and Polymon

74
00:05:27,290 --> 00:05:30,962
identify the percent of breaches

75
00:05:31,026 --> 00:05:35,826
by different areas. And in cloud misconfigurations,

76
00:05:36,018 --> 00:05:38,666
we care almost in infrastructure as code.

77
00:05:38,848 --> 00:05:42,838
So breaches caused by cloud misconfiguration

78
00:05:43,014 --> 00:05:46,540
for them, for their report it was 19%.

79
00:05:48,350 --> 00:05:52,030
So one fifth of all breaches because

80
00:05:52,100 --> 00:05:53,710
of the cloud misconfiguration,

81
00:05:55,330 --> 00:06:00,778
it start to be quite scary,

82
00:06:00,874 --> 00:06:04,690
right? So what kind of cloud misconfigurations

83
00:06:06,790 --> 00:06:10,322
we had and breaches because of this. So in

84
00:06:10,376 --> 00:06:14,770
2019, Imperva had a breach

85
00:06:15,530 --> 00:06:21,494
where they lost customer or lost they

86
00:06:21,532 --> 00:06:25,170
lost customer records like API keys, TLS certificates,

87
00:06:25,250 --> 00:06:29,958
et cetera, et cetera. Because of network misconfiguration,

88
00:06:30,054 --> 00:06:33,658
hard coded API keys and not encrypted records in

89
00:06:33,664 --> 00:06:34,570
database.

90
00:06:37,150 --> 00:06:40,640
Imperva identified these issue after ten months.

91
00:06:42,130 --> 00:06:45,630
Another example of misconfigurations,

92
00:06:45,970 --> 00:06:48,880
capital one. Also, these same year,

93
00:06:51,010 --> 00:06:53,410
more than 100 million records exposed,

94
00:06:53,830 --> 00:06:57,310
bank account, social numbers of their customers, et cetera.

95
00:06:57,470 --> 00:07:00,818
Why it happened because there were

96
00:07:00,904 --> 00:07:04,606
misconfiguration in IAM policies and unencrypted

97
00:07:04,638 --> 00:07:08,326
storages. Those reports are obviously available

98
00:07:08,428 --> 00:07:11,494
in the Internet, so you can search for them.

99
00:07:11,532 --> 00:07:15,414
There is a lot more of them to give you

100
00:07:15,452 --> 00:07:17,960
the impression what we have.

101
00:07:18,510 --> 00:07:21,946
So what kind of cloud misconfiguration we

102
00:07:21,968 --> 00:07:24,550
can have really two types.

103
00:07:24,710 --> 00:07:27,994
One is cloud misconfiguration itself, when we are

104
00:07:28,032 --> 00:07:31,066
creating some resources or we are updating resources,

105
00:07:31,098 --> 00:07:34,606
et cetera. And these second, very important

106
00:07:34,708 --> 00:07:39,562
and very tricky

107
00:07:39,626 --> 00:07:42,030
really, is configuration drift.

108
00:07:42,630 --> 00:07:46,866
So I will talk a little bit about drifts in

109
00:07:46,888 --> 00:07:50,766
some time, but right now we need to know that drifts

110
00:07:50,798 --> 00:07:54,238
are definitely more danger

111
00:07:54,414 --> 00:07:57,750
because they are not monitored.

112
00:07:58,170 --> 00:08:02,454
All right. Okay. So what is drift, in fact?

113
00:08:02,572 --> 00:08:06,226
So drift is, as I said, is unmonitored,

114
00:08:06,338 --> 00:08:10,330
undocumented change in the configuration done manually

115
00:08:11,230 --> 00:08:14,346
in most of the times, right? Most of the cases. Because if we care,

116
00:08:14,368 --> 00:08:19,206
talking about change done by infrastructure

117
00:08:19,238 --> 00:08:22,814
as code templates or CDK or wherever it

118
00:08:22,852 --> 00:08:25,694
is monitored, documented somehow. Right.

119
00:08:25,892 --> 00:08:29,200
But this change is done manually by someone,

120
00:08:30,050 --> 00:08:33,540
no one knows when, where, why.

121
00:08:35,030 --> 00:08:38,702
Right. And a very sad

122
00:08:38,766 --> 00:08:42,126
fact, 90% of organizations

123
00:08:42,318 --> 00:08:45,910
allow users to make changes without proper

124
00:08:45,980 --> 00:08:49,558
process. And as a proper

125
00:08:49,644 --> 00:08:53,382
process, I mean, even go that high that

126
00:08:53,436 --> 00:08:56,738
you disallow or prohibit.

127
00:08:56,914 --> 00:09:01,482
Let's use more strong

128
00:09:01,536 --> 00:09:05,066
word. They prohibit access to

129
00:09:05,248 --> 00:09:07,850
business accounts for users,

130
00:09:08,270 --> 00:09:12,350
okay. I mean access to console,

131
00:09:12,770 --> 00:09:15,520
to play with resources on the account.

132
00:09:16,930 --> 00:09:21,054
And this is according to the state

133
00:09:21,092 --> 00:09:24,682
of devsecops by accuracy. Formerly because they care acquired

134
00:09:24,746 --> 00:09:29,140
by tenable. It's also for 2020.

135
00:09:29,990 --> 00:09:33,854
So this fact is very sad and very unbelievable,

136
00:09:33,982 --> 00:09:37,842
right? So we are talking here also about financial

137
00:09:37,906 --> 00:09:42,934
companies, about healthcare companies where these information should

138
00:09:42,972 --> 00:09:46,920
be very secure. So if you care. Scared enough.

139
00:09:47,530 --> 00:09:51,322
We didn't finish yet. So now we are going to the

140
00:09:51,376 --> 00:09:55,340
new report from this year and

141
00:09:57,070 --> 00:10:01,502
it is interesting because sonotype did

142
00:10:01,636 --> 00:10:06,074
a report where they talk with 300 professionals

143
00:10:06,202 --> 00:10:09,518
and they have very interesting information. These.

144
00:10:09,684 --> 00:10:13,006
So 36% of professionals suffered a

145
00:10:13,028 --> 00:10:15,898
serious breach because of cloud misconfiguration.

146
00:10:16,074 --> 00:10:19,374
So of course here we care talking about different group of

147
00:10:19,412 --> 00:10:22,830
people. That's obvious. So that's why

148
00:10:22,900 --> 00:10:26,914
we have different numbers. But I hoped

149
00:10:26,962 --> 00:10:30,280
it will be lower. But it's not, right.

150
00:10:31,930 --> 00:10:35,670
Very interesting is that almost

151
00:10:35,740 --> 00:10:40,730
50% of teams had more than 50 misconfigurations

152
00:10:41,230 --> 00:10:42,300
per day.

153
00:10:44,590 --> 00:10:48,634
50 misconfiguration. More than 50 misconfiguration per

154
00:10:48,672 --> 00:10:51,820
day. I say wow,

155
00:10:52,670 --> 00:10:53,420
right?

156
00:10:55,890 --> 00:10:58,240
It's hard to imagine really.

157
00:10:59,890 --> 00:11:05,602
So what kind of misconfigurations they

158
00:11:05,656 --> 00:11:09,870
find. So the most important, the most popular

159
00:11:09,950 --> 00:11:13,570
ones is misconfiguration of IAM.

160
00:11:15,690 --> 00:11:18,902
In all clouds, IAM are

161
00:11:18,956 --> 00:11:21,960
the core of everything.

162
00:11:22,970 --> 00:11:27,394
It's not quite very clear,

163
00:11:27,532 --> 00:11:31,050
very well understandable for people

164
00:11:31,120 --> 00:11:35,222
how to work with them. But the main goal

165
00:11:35,286 --> 00:11:39,274
which we should look forward and try

166
00:11:39,312 --> 00:11:42,862
to achieve is to have as less

167
00:11:42,916 --> 00:11:46,218
permissions as possible, as required

168
00:11:46,314 --> 00:11:50,286
even and go with policies like a

169
00:11:50,308 --> 00:11:53,554
one to one. So one resource has access to

170
00:11:53,592 --> 00:11:57,762
one other resource and if this resource needs

171
00:11:57,896 --> 00:12:01,314
access to similar resource but another one,

172
00:12:01,512 --> 00:12:06,886
it means another policy. Right? So we

173
00:12:06,908 --> 00:12:10,354
are decoupling the policies

174
00:12:10,402 --> 00:12:13,974
here. Yes. In these end of the day

175
00:12:14,012 --> 00:12:18,358
we will have a lot of policies. There will be a total mess, total chaos.

176
00:12:18,454 --> 00:12:22,458
But first of all, we are working with them through infrastructure as code,

177
00:12:22,544 --> 00:12:23,180
right?

178
00:12:26,510 --> 00:12:29,970
And we have proper naming and proper tagging.

179
00:12:30,150 --> 00:12:35,754
This is also important. And the second obvious biggest

180
00:12:35,802 --> 00:12:39,326
percent is security groups. It's very tempting, very easy

181
00:12:39,428 --> 00:12:42,240
and very common that. All right, I need to test something.

182
00:12:42,790 --> 00:12:46,782
I will just add my ip

183
00:12:46,846 --> 00:12:50,206
to ssh. Well, I don't know what is my IP.

184
00:12:50,238 --> 00:12:53,938
I will just put done.

185
00:12:54,024 --> 00:12:54,660
Right.

186
00:12:58,090 --> 00:13:01,494
So these elements are

187
00:13:01,532 --> 00:13:05,126
quite important. So now

188
00:13:05,228 --> 00:13:09,066
how those teams, those people are catching the issues. And this

189
00:13:09,088 --> 00:13:12,858
is also interesting because 33% of these

190
00:13:13,024 --> 00:13:17,078
do manual checks before deployments. And by manual

191
00:13:17,174 --> 00:13:20,462
I mean they are looking on the templates they have. For example,

192
00:13:20,516 --> 00:13:24,522
I don't know, code review or whatever, they are reading the templates

193
00:13:24,666 --> 00:13:28,080
and they can miss stuff. Obviously,

194
00:13:28,850 --> 00:13:32,910
27% of them do a post deployment checks

195
00:13:34,870 --> 00:13:38,722
what is really

196
00:13:38,776 --> 00:13:41,810
risky because this is already deployed.

197
00:13:42,550 --> 00:13:46,422
All right, so we know what kind of

198
00:13:46,476 --> 00:13:49,638
issues people have, we know how they

199
00:13:49,724 --> 00:13:53,734
catch and try to fix the issues, so how much time they spend on

200
00:13:53,772 --> 00:13:57,030
it. And this is also quite interesting and

201
00:13:57,100 --> 00:14:00,438
I'd like to focus your attention

202
00:14:00,534 --> 00:14:04,250
here. So fair percent of these 300

203
00:14:04,320 --> 00:14:08,538
people said that these spend more than 500

204
00:14:08,624 --> 00:14:12,366
hours per week fixing the issues.

205
00:14:12,468 --> 00:14:15,790
Finding them and fixing it means that twelve

206
00:14:15,860 --> 00:14:20,026
people from these 300 say that. So their teams

207
00:14:20,138 --> 00:14:23,890
spend 100% of time

208
00:14:24,040 --> 00:14:31,380
working with infrastructure as code security issues.

209
00:14:32,230 --> 00:14:34,820
And it's for twelve people.

210
00:14:35,690 --> 00:14:38,600
Work for twelve people only for this.

211
00:14:39,610 --> 00:14:41,270
It sounds scary,

212
00:14:43,610 --> 00:14:47,866
but we

213
00:14:47,888 --> 00:14:51,050
are lucky here. And we have helping hands.

214
00:14:51,200 --> 00:14:55,114
And with helping hands, I mean the

215
00:14:55,152 --> 00:14:58,506
processes, the approaches, like for example, shift left.

216
00:14:58,688 --> 00:15:02,074
What it means, this is like a paradigm

217
00:15:02,202 --> 00:15:06,334
not only for software, which is obvious, right? Everyone is

218
00:15:06,372 --> 00:15:10,110
saying shift left in creation software, et cetera, et cetera. But it works

219
00:15:10,180 --> 00:15:11,710
also for infrastructure.

220
00:15:13,750 --> 00:15:18,020
Thanks to that, we have very fast feedbacks that something is wrong.

221
00:15:18,950 --> 00:15:22,242
Tools like SE stake also can be

222
00:15:22,296 --> 00:15:26,630
relevant for infrastructure. So these static analysis tools.

223
00:15:28,010 --> 00:15:32,434
And again, like with the proper development,

224
00:15:32,562 --> 00:15:35,240
everyone is responsible for security, right?

225
00:15:35,930 --> 00:15:39,574
We can implement open policy agents or any software

226
00:15:39,622 --> 00:15:41,930
which are using this approach.

227
00:15:42,670 --> 00:15:46,218
And this is project under a

228
00:15:46,224 --> 00:15:49,260
CNCF. So quite mature and quite

229
00:15:50,050 --> 00:15:56,014
stable. I mean stable from

230
00:15:56,052 --> 00:16:00,094
the perspective of big organization. It's not something what is like

231
00:16:00,132 --> 00:16:03,778
ifmrl, it is here right now and tomorrow will be

232
00:16:03,784 --> 00:16:07,522
gone. Now this is like a policy engine

233
00:16:07,576 --> 00:16:10,914
that automates and unifies implementation of

234
00:16:10,952 --> 00:16:14,334
policies across the environments and allows

235
00:16:14,382 --> 00:16:18,310
us to enforce, monitor and remediate policies

236
00:16:18,810 --> 00:16:21,720
across all environments and resources, right?

237
00:16:22,250 --> 00:16:25,560
And this is the one link which I want you to remember,

238
00:16:27,050 --> 00:16:30,858
all right, what we should do, we should control

239
00:16:30,944 --> 00:16:34,774
everything before we deploy. And here I'm

240
00:16:34,822 --> 00:16:38,406
saying that if you have infrastructure as code and you deploy

241
00:16:38,438 --> 00:16:42,042
it first on dev, then QA, then preprod, then RC,

242
00:16:42,106 --> 00:16:45,962
then prove this dev environment.

243
00:16:46,026 --> 00:16:48,720
These first in the chain is in these.

244
00:16:50,210 --> 00:16:53,666
The importance of this environment is exactly the

245
00:16:53,688 --> 00:16:57,666
same from the security perspective, like production. I know this

246
00:16:57,848 --> 00:17:00,740
like how it can sound.

247
00:17:01,670 --> 00:17:04,340
But let me ask you something.

248
00:17:05,370 --> 00:17:09,734
Would you like to create a bank account

249
00:17:09,932 --> 00:17:14,150
in the bank which has the exposure

250
00:17:14,490 --> 00:17:19,270
of dev and qa environments recently?

251
00:17:22,240 --> 00:17:26,256
Because I'm not. So if

252
00:17:26,438 --> 00:17:29,360
template is deployed, it is already too late.

253
00:17:30,580 --> 00:17:34,500
Let's put it in our heads

254
00:17:37,080 --> 00:17:40,672
like daily scrum, we also have daily scrum,

255
00:17:40,816 --> 00:17:45,144
always have daily scrum at 10:00 a.m. In our team the

256
00:17:45,182 --> 00:17:49,380
same way, if we deploy templates, it is already too late.

257
00:17:49,540 --> 00:17:53,316
All right, we should use dedicated tools to prevent

258
00:17:53,348 --> 00:17:57,320
deployments with misconfigured resources

259
00:17:57,660 --> 00:18:00,796
and use CI CD pipelines for it. Why? This is

260
00:18:00,818 --> 00:18:04,156
important because CI CD pipeline can have first of

261
00:18:04,178 --> 00:18:07,400
all implemented those tools and then stop fail,

262
00:18:07,480 --> 00:18:10,050
break the pipeline if something is wrong.

263
00:18:11,300 --> 00:18:14,370
So we have a lot of tools around,

264
00:18:15,300 --> 00:18:18,992
to name a few. Chekhov, right? The only

265
00:18:19,046 --> 00:18:21,536
one which is written in Python here,

266
00:18:21,718 --> 00:18:25,620
Terrascan TFSec to written in Golang,

267
00:18:26,360 --> 00:18:29,444
another one, CFN Nag, I think this is in

268
00:18:29,482 --> 00:18:33,392
python as well, but I don't remember at this moment. So this CFN Nag

269
00:18:33,456 --> 00:18:37,844
is especially for cloud formation, right? And snick

270
00:18:37,892 --> 00:18:42,200
for example. So these, all of them except CFN NAG

271
00:18:42,620 --> 00:18:45,480
work with terraform,

272
00:18:47,820 --> 00:18:49,160
with Kubernetes,

273
00:18:50,460 --> 00:18:53,736
with cloudformation except terra scan and TFSEC,

274
00:18:53,768 --> 00:18:57,756
right? Obviously because the dame is even part of

275
00:18:57,778 --> 00:19:02,172
the terraform. All right, so also

276
00:19:02,226 --> 00:19:05,650
we have tools from Acurix which are quite

277
00:19:06,900 --> 00:19:10,684
more advanced right now. They are acquired

278
00:19:10,732 --> 00:19:14,644
by Tenable. So I'd like to demo few

279
00:19:14,682 --> 00:19:17,856
of them, three of them really. It will be terra

280
00:19:17,888 --> 00:19:21,350
scan by acurix, Chekhov by Bridgekiro and

281
00:19:21,960 --> 00:19:25,336
TFSeC by Aquam at this moment. Right?

282
00:19:25,438 --> 00:19:30,356
So this is the GitHub for terra

283
00:19:30,388 --> 00:19:33,880
scan, for Chekhov and for TFSeC

284
00:19:34,220 --> 00:19:40,540
and you can implement it in your own pipelines.

285
00:19:41,120 --> 00:19:44,316
So let's see how they

286
00:19:44,418 --> 00:19:47,740
look like. I have very

287
00:19:47,890 --> 00:19:50,924
fresh installation of arm,

288
00:19:50,972 --> 00:19:54,876
sorry, very fresh installation of vagrant

289
00:19:54,908 --> 00:19:58,480
machine because I don't need anything more

290
00:19:58,550 --> 00:20:03,440
here. So let's do first,

291
00:20:03,510 --> 00:20:07,736
let's install those tools with Chekhov.

292
00:20:07,788 --> 00:20:11,156
It is quite easy, right? So what we need to

293
00:20:11,178 --> 00:20:15,104
do is pip install checkoff

294
00:20:15,152 --> 00:20:17,930
probably I didn't have pip here. Yes, exactly.

295
00:20:21,500 --> 00:20:24,980
First I need to get update.

296
00:20:25,140 --> 00:20:29,310
So we spend a few seconds here on this

297
00:20:30,400 --> 00:20:32,350
or even more, let's see.

298
00:20:35,440 --> 00:20:39,456
So as I said, checkoff is only one tool which we

299
00:20:39,478 --> 00:20:43,890
will test here, which is interesting.

300
00:20:44,580 --> 00:20:45,490
All right,

301
00:20:51,250 --> 00:20:53,920
this is quite interesting at this moment,

302
00:20:55,510 --> 00:20:59,380
but not. Don't worry, I have a backup in mind.

303
00:21:03,750 --> 00:21:06,660
Okay, let's try, maybe it'll stop it and.

304
00:21:12,950 --> 00:21:15,620
Oh, all right.

305
00:21:17,910 --> 00:21:18,770
Yep,

306
00:21:21,350 --> 00:21:24,906
it, it. So I have an

307
00:21:24,928 --> 00:21:27,370
issue here. So no worries,

308
00:21:31,610 --> 00:21:34,790
let's do with it differently.

309
00:21:35,530 --> 00:21:40,102
Right here I have my AWS

310
00:21:40,166 --> 00:21:43,740
console. We will go to EC two.

311
00:21:47,630 --> 00:21:52,494
I will create an instance very

312
00:21:52,532 --> 00:21:53,120
quickly.

313
00:21:56,130 --> 00:22:00,480
Let's use AWS Linux for it.

314
00:22:02,850 --> 00:22:08,734
I need to use default

315
00:22:08,782 --> 00:22:12,900
setting. I don't need anything else. All right.

316
00:22:14,790 --> 00:22:18,742
Okay, this is all right. At this moment

317
00:22:18,876 --> 00:22:22,550
for the security group, I will say this, I don't care at

318
00:22:22,700 --> 00:22:25,974
this moment. All right, please do not

319
00:22:26,012 --> 00:22:29,962
do that. I try to do

320
00:22:30,016 --> 00:22:33,834
this. I'm doing

321
00:22:33,872 --> 00:22:36,490
this right now only for the presentation purposes.

322
00:22:38,270 --> 00:22:41,882
Okay, create new pair.

323
00:22:42,026 --> 00:22:46,190
Okay, let's call it presentation

324
00:22:46,610 --> 00:22:50,590
download. All right, it is downloaded.

325
00:22:55,530 --> 00:22:58,810
Okay, so my instance is now launching.

326
00:23:01,310 --> 00:23:04,166
Something wrong happened here with this ubuntu.

327
00:23:04,198 --> 00:23:06,060
So we don't care about that.

328
00:23:09,330 --> 00:23:11,200
Let's try to connect.

329
00:23:12,610 --> 00:23:13,360
Okay,

330
00:23:21,270 --> 00:23:24,034
it was presentation Pem, right?

331
00:23:24,232 --> 00:23:29,262
And now what I need to have is the ip

332
00:23:29,326 --> 00:23:38,342
of this machine and

333
00:23:38,396 --> 00:23:41,862
it should work. Please work for me. Yeah,

334
00:23:41,916 --> 00:23:46,070
perfect. Okay, so we are going to become

335
00:23:46,140 --> 00:23:50,090
the root and we try to install checkoff.

336
00:23:51,790 --> 00:23:54,938
Okay, Pip is not found. All right,

337
00:23:55,024 --> 00:24:00,626
so what I need to do is to install Pip.

338
00:24:00,758 --> 00:24:04,862
I don't remember right now what

339
00:24:04,916 --> 00:24:08,670
it is here in Linux

340
00:24:09,330 --> 00:24:12,160
in the red hat. So I know already.

341
00:24:18,310 --> 00:24:19,060
Okay.

342
00:24:21,830 --> 00:24:24,180
All right, got it.

343
00:24:25,850 --> 00:24:27,080
Default problem.

344
00:24:29,130 --> 00:24:32,326
Yeah, of course I should install it as

345
00:24:32,348 --> 00:24:36,126
a user, but here only for this presentation purpose.

346
00:24:36,258 --> 00:24:39,740
It's okay to have this.

347
00:24:46,810 --> 00:24:51,270
Okay, so now I should have checkoff

348
00:24:52,430 --> 00:24:55,980
install. Let's try, maybe I need to

349
00:24:57,950 --> 00:25:01,482
do this a simple like that looks

350
00:25:01,536 --> 00:25:04,720
like not. All right,

351
00:25:08,930 --> 00:25:10,480
checkoff not found.

352
00:25:13,810 --> 00:25:17,620
So let me just check where it can be

353
00:25:19,590 --> 00:25:24,802
because it should be installed really in

354
00:25:24,856 --> 00:25:28,082
our, all right,

355
00:25:28,136 --> 00:25:32,440
let's come back to this a little bit later. Right now we will install

356
00:25:33,450 --> 00:25:37,058
how I did it. Okay, Pip, install checkoff.

357
00:25:37,154 --> 00:25:40,438
So should be here. Let me just repeat it,

358
00:25:40,604 --> 00:25:41,320
just,

359
00:25:43,790 --> 00:25:50,282
and now let's try to do maybe the same thing here just

360
00:25:50,336 --> 00:25:53,580
to speed things up.

361
00:25:57,330 --> 00:26:00,480
Oh yeah, I have it.

362
00:26:01,330 --> 00:26:05,086
Right, so checkoff is installed. Right. So now what

363
00:26:05,268 --> 00:26:09,358
I want to do is to install terra

364
00:26:09,374 --> 00:26:13,746
scan. Okay, so this

365
00:26:13,768 --> 00:26:17,106
is the turbo which I

366
00:26:17,128 --> 00:26:20,802
need to install first download

367
00:26:20,946 --> 00:26:24,678
obviously. Right, I have it. So now let

368
00:26:24,764 --> 00:26:28,514
me unpack.

369
00:26:28,562 --> 00:26:35,438
It's

370
00:26:35,554 --> 00:26:37,420
okay. What happened here?

371
00:26:42,270 --> 00:26:44,380
Let's try maybe with the name.

372
00:26:49,250 --> 00:26:52,160
Okay, I have some issue here again.

373
00:26:55,330 --> 00:26:58,738
For some reason things do not

374
00:26:58,824 --> 00:27:02,020
want to work for me today.

375
00:27:02,630 --> 00:27:05,700
So let me try to do this again.

376
00:27:10,090 --> 00:27:12,680
All right, let's check. I have it.

377
00:27:15,690 --> 00:27:19,240
All right, I have it. So let me try to,

378
00:27:28,750 --> 00:27:32,794
yeah, probably some typo or things

379
00:27:32,832 --> 00:27:38,986
like that. All right, let's remove the bundle.

380
00:27:39,098 --> 00:27:42,942
Okay, now what I need to do is to

381
00:27:42,996 --> 00:27:48,018
install terra scan into

382
00:27:48,184 --> 00:27:51,780
UsR bin local

383
00:27:53,030 --> 00:27:56,820
bin install of course.

384
00:27:59,210 --> 00:28:02,902
All right, and now I can remove it from here. All right,

385
00:28:02,956 --> 00:28:05,640
so now let's try if I have it. Yes,

386
00:28:06,250 --> 00:28:13,418
version two without

387
00:28:13,504 --> 00:28:17,338
dashes, just version. Okay, version 112

388
00:28:17,424 --> 00:28:20,940
is installed. All right, so now the last tool,

389
00:28:23,150 --> 00:28:24,330
tFSec,

390
00:28:26,690 --> 00:28:28,160
let me copy it.

391
00:28:29,250 --> 00:28:32,382
Okay, I have this one. Yes.

392
00:28:32,436 --> 00:28:35,966
And as you can see right now, this one

393
00:28:36,068 --> 00:28:39,698
is downloaded not as a package. But just like

394
00:28:39,864 --> 00:28:44,610
executable or almost executable. So first

395
00:28:44,680 --> 00:28:49,162
let me just move it to TfSec

396
00:28:49,246 --> 00:28:56,520
to have more clear name.

397
00:28:57,530 --> 00:29:01,506
We need to do ch code for it

398
00:29:01,628 --> 00:29:05,706
and obviously we need to install it TF sec

399
00:29:05,808 --> 00:29:09,958
into bin, usr uSR

400
00:29:10,134 --> 00:29:14,042
local bin and

401
00:29:14,096 --> 00:29:17,340
remove it from here. Let's check.

402
00:29:20,270 --> 00:29:22,490
Yeah, we have it in version.

403
00:29:25,550 --> 00:29:30,866
Okay, so what we will do now let

404
00:29:30,888 --> 00:29:32,370
me check if I have git.

405
00:29:34,230 --> 00:29:37,860
I do not have it, so let me just install quickly

406
00:29:41,770 --> 00:29:45,830
git. What I will do, I will clone

407
00:29:47,530 --> 00:29:51,750
a curix test templates

408
00:29:53,550 --> 00:29:59,306
and we will see how they work on

409
00:29:59,328 --> 00:30:00,860
it. Okay,

410
00:30:02,830 --> 00:30:06,698
why this template? Because these prepared

411
00:30:06,794 --> 00:30:10,894
quite interesting and

412
00:30:10,932 --> 00:30:14,590
problematic templates. All right, so let's go to terraform

413
00:30:15,010 --> 00:30:19,026
directory. And we are here. So how to

414
00:30:19,128 --> 00:30:22,482
execute checkoff? It's very simple. We need to

415
00:30:22,536 --> 00:30:25,662
put checkoff minus d means directory,

416
00:30:25,726 --> 00:30:29,618
obviously, and let it be our current directory.

417
00:30:29,714 --> 00:30:33,560
Bam. We need to wait a second or two

418
00:30:33,930 --> 00:30:37,254
and this is the effect. All right, so as you can see a lot of

419
00:30:37,292 --> 00:30:40,600
failed or fails and

420
00:30:41,470 --> 00:30:44,970
these organization is

421
00:30:45,040 --> 00:30:48,694
clear. You have all information here, what failed,

422
00:30:48,742 --> 00:30:53,030
what resource, what file, in what lines

423
00:30:53,190 --> 00:30:56,622
from where this file was called, what is

424
00:30:56,676 --> 00:31:00,800
the code here? And also the guide, right, this guide means

425
00:31:02,530 --> 00:31:05,280
some information, how you can fix it.

426
00:31:06,130 --> 00:31:10,340
And on the top, on the top

427
00:31:11,670 --> 00:31:14,980
there's a lot of it, as you can see. Come on.

428
00:31:17,750 --> 00:31:21,894
On the top there is a summary, so summary should

429
00:31:21,932 --> 00:31:25,670
be on the end. Let me do this differently.

430
00:31:32,350 --> 00:31:36,106
All right, so as you can see here, past tracked is

431
00:31:36,208 --> 00:31:39,550
44, failed tracks is 58

432
00:31:39,620 --> 00:31:42,862
and nothing was skipped. Skipped means that you

433
00:31:42,916 --> 00:31:47,042
can say that

434
00:31:47,096 --> 00:31:51,006
specific checks need to be skipped.

435
00:31:51,118 --> 00:31:54,738
You don't want to check them because for example Chekhov has

436
00:31:54,824 --> 00:31:58,590
the scan which is checking

437
00:31:58,670 --> 00:32:01,240
the description of your security group.

438
00:32:02,490 --> 00:32:05,702
Maybe it may be an issue for

439
00:32:05,756 --> 00:32:09,430
someone that this is not described properly,

440
00:32:10,730 --> 00:32:14,602
I mean about AWS, but for

441
00:32:14,656 --> 00:32:18,122
sure it's not the security issue, right? So here

442
00:32:18,176 --> 00:32:22,314
for example, when I have my security group

443
00:32:22,432 --> 00:32:25,230
for this instance,

444
00:32:25,730 --> 00:32:29,146
let me show it to you. These, you see this description

445
00:32:29,178 --> 00:32:32,814
field. So generally we can say what is the

446
00:32:32,852 --> 00:32:38,878
reason of having this specific record, right? So this is Checkoff

447
00:32:39,054 --> 00:32:42,802
alerted as a problem. Okay,

448
00:32:42,856 --> 00:32:46,500
so this is checkoff. Quite nice.

449
00:32:47,110 --> 00:32:49,490
Let's try with TF scan,

450
00:32:50,490 --> 00:32:54,520
I mean TFSEC. So here the syntax is a little bit different

451
00:32:55,770 --> 00:32:59,922
and you have even the information about the use of disk

452
00:32:59,986 --> 00:33:03,386
iOS, about what was

453
00:33:03,408 --> 00:33:06,406
the time for evaluation, runnings, et cetera, et cetera,

454
00:33:06,438 --> 00:33:10,314
how many files were checked, loaded modules and

455
00:33:10,352 --> 00:33:14,218
the results. So we found ten criticals, ten high,

456
00:33:14,384 --> 00:33:18,558
medium low and ignored. As you can see there is a less so

457
00:33:18,644 --> 00:33:21,934
TF scan found less issues but it

458
00:33:21,972 --> 00:33:25,050
doesn't mean it is worse

459
00:33:25,130 --> 00:33:29,060
tool than Chekhov. Checkoff is finding different

460
00:33:31,590 --> 00:33:35,474
issues, right? There is like a common part of

461
00:33:35,512 --> 00:33:39,274
issues that all free tools care catching.

462
00:33:39,422 --> 00:33:44,310
But I did a quite extensive best

463
00:33:44,380 --> 00:33:49,794
for all of them and results

464
00:33:49,842 --> 00:33:53,594
said that I should have three of them in my pipeline to be

465
00:33:53,792 --> 00:33:56,442
like 90% sure what I'm doing right.

466
00:33:56,576 --> 00:34:02,442
So quite not

467
00:34:02,496 --> 00:34:06,590
perfect situation. All right so this was TF SeC,

468
00:34:06,740 --> 00:34:10,622
how to do with terra scan. Right now

469
00:34:10,676 --> 00:34:14,286
we are saying something else, terra scan scan and we

470
00:34:14,308 --> 00:34:18,450
are scanning it and terra scan takes the most

471
00:34:18,600 --> 00:34:19,730
resources,

472
00:34:21,910 --> 00:34:25,042
takes the most time. So it's these

473
00:34:25,096 --> 00:34:29,434
longest run even if it wasn't

474
00:34:29,582 --> 00:34:33,398
shown here maybe they improved something but like

475
00:34:33,564 --> 00:34:37,526
one year ago this time was definitely

476
00:34:37,708 --> 00:34:42,226
the longest because terrascan had implemented

477
00:34:42,258 --> 00:34:45,894
API inside. So you were

478
00:34:45,932 --> 00:34:49,994
able to run terrascan as like a separate tool which

479
00:34:50,032 --> 00:34:53,530
is available all the time like Sonarcube

480
00:34:54,210 --> 00:34:57,470
and just execute the API

481
00:34:58,130 --> 00:35:01,210
call from the pipeline which is very useful

482
00:35:01,290 --> 00:35:04,798
because you don't need or to prepare proper

483
00:35:04,884 --> 00:35:08,500
image for your pipelines or download the tool all the time.

484
00:35:09,350 --> 00:35:13,342
As you can see we have 20 high 13

485
00:35:13,406 --> 00:35:17,442
medium and five low 38 policies are

486
00:35:17,496 --> 00:35:21,490
violated. So this is how

487
00:35:21,560 --> 00:35:25,220
they work in the most default options.

488
00:35:25,530 --> 00:35:29,094
All right, I don't want to show you

489
00:35:29,212 --> 00:35:32,860
definitely more complicated options

490
00:35:33,310 --> 00:35:36,954
for very simple reason because I strongly believe that

491
00:35:36,992 --> 00:35:40,522
the beauty lies in simplicity. So if

492
00:35:40,576 --> 00:35:43,946
something works from default out of

493
00:35:43,968 --> 00:35:48,254
the box that is perfect tool for me. So this

494
00:35:48,292 --> 00:35:55,374
is how I run them just

495
00:35:55,412 --> 00:35:59,106
through my Linux machine. So how

496
00:35:59,128 --> 00:36:03,250
it looks in the maybe

497
00:36:03,320 --> 00:36:06,770
first I will show you the templates

498
00:36:07,110 --> 00:36:10,786
of pipeline which I created because I've created

499
00:36:10,818 --> 00:36:14,130
my pipeline using cloudformation.

500
00:36:14,290 --> 00:36:18,280
So this is the template, very simple.

501
00:36:18,730 --> 00:36:21,898
I didn't pay too much attention on the roles but I

502
00:36:21,904 --> 00:36:25,626
need to have few roles in order to have my

503
00:36:25,648 --> 00:36:29,514
pipeline AWS code pipeline and I

504
00:36:29,552 --> 00:36:33,702
have four blocks inside. One is mandatory

505
00:36:33,766 --> 00:36:36,960
to pull source. I'm doing this using

506
00:36:38,690 --> 00:36:42,366
my own created repository in the

507
00:36:42,468 --> 00:36:46,350
code commit and then I have my tests where

508
00:36:46,420 --> 00:36:49,662
one block is for checkoff, checkoff,

509
00:36:49,806 --> 00:36:55,266
second is for here

510
00:36:55,368 --> 00:36:58,158
TFSec and third is for Terrascan.

511
00:36:58,254 --> 00:37:02,150
And here the configuration means these

512
00:37:02,220 --> 00:37:06,134
like a general approach to

513
00:37:06,172 --> 00:37:09,462
doing things right. So I have my phases during

514
00:37:09,516 --> 00:37:13,334
the install time I'm installing checkoff,

515
00:37:13,462 --> 00:37:17,834
creating the directory for reports. Then during the build

516
00:37:18,032 --> 00:37:21,706
I do these proper test and as you can see here

517
00:37:21,808 --> 00:37:25,950
I stream the output

518
00:37:26,290 --> 00:37:30,046
into the file. Why you

519
00:37:30,068 --> 00:37:33,566
will see in the moment the same, very the

520
00:37:33,588 --> 00:37:37,026
same situation. Of course the installation process is different, it's for

521
00:37:37,048 --> 00:37:40,926
TFSec and also I have the possibility

522
00:37:41,038 --> 00:37:45,458
to send

523
00:37:45,624 --> 00:37:49,650
output in junit format

524
00:37:49,730 --> 00:37:55,030
into the file and the same for Terrascan,

525
00:37:55,530 --> 00:37:59,138
I'm streaming it to the Terrascan XML file

526
00:37:59,234 --> 00:38:03,978
right now. All free tools allow

527
00:38:04,064 --> 00:38:07,754
us to use junit to

528
00:38:07,792 --> 00:38:11,834
have proper reporting what is really perfect,

529
00:38:11,952 --> 00:38:15,438
because when we go to code

530
00:38:15,524 --> 00:38:18,750
build and I mean more like a code pipelines,

531
00:38:19,810 --> 00:38:23,054
we have our pipeline here which is failed and it is

532
00:38:23,092 --> 00:38:26,174
on purpose. So let me

533
00:38:26,212 --> 00:38:29,522
just release this pipeline again right

534
00:38:29,576 --> 00:38:30,180
now.

535
00:38:33,110 --> 00:38:36,820
These mandatory block will pull code

536
00:38:38,870 --> 00:38:41,478
code on. Yes it did it.

537
00:38:41,644 --> 00:38:45,094
So let me

538
00:38:45,132 --> 00:38:48,226
open all of those scanners,

539
00:38:48,258 --> 00:38:52,470
these as you can see I'm executing them

540
00:38:52,540 --> 00:38:56,314
in the same time. In fact it's not always these same time,

541
00:38:56,352 --> 00:39:00,074
but generally the idea is to have them in the same time and

542
00:39:00,112 --> 00:39:04,166
then of course I can have another next steps. But for this

543
00:39:04,208 --> 00:39:06,480
presentation this is what I need really.

544
00:39:07,730 --> 00:39:11,150
So as you can see there is a lot,

545
00:39:11,300 --> 00:39:14,814
it's generally what happened, the same happened in

546
00:39:14,852 --> 00:39:16,720
normal execution, right?

547
00:39:20,390 --> 00:39:24,366
So as you can see right now, this command

548
00:39:24,398 --> 00:39:27,650
was executed and of course it failed.

549
00:39:28,310 --> 00:39:31,586
And this is also very important, all free tools can fail

550
00:39:31,618 --> 00:39:37,174
your pipeline. So this is very

551
00:39:37,212 --> 00:39:40,854
good, let's say. So I told you that

552
00:39:40,892 --> 00:39:44,250
I send this to this file, to this report and

553
00:39:44,320 --> 00:39:47,674
also I publish this report. So here

554
00:39:47,712 --> 00:39:50,966
we can say we can see how the report from checkoff

555
00:39:50,998 --> 00:39:55,726
looks like in the code pipeline or code build we

556
00:39:55,748 --> 00:39:59,306
see that 20 checks

557
00:39:59,418 --> 00:40:02,574
failed, 84 was positive. This is

558
00:40:02,612 --> 00:40:06,154
for different repository, not this from macurics,

559
00:40:06,202 --> 00:40:10,690
another one and

560
00:40:10,760 --> 00:40:14,350
we have the full information what failed

561
00:40:14,430 --> 00:40:18,114
really? Okay, so this is Checkoff. Let's see what

562
00:40:18,152 --> 00:40:19,890
we have for TFSeC.

563
00:40:21,610 --> 00:40:22,630
Download,

564
00:40:26,410 --> 00:40:30,470
preparation and then we have the execution.

565
00:40:31,050 --> 00:40:35,274
TFSeC is only one tool which is much more

566
00:40:35,312 --> 00:40:37,770
happier if terraform is installed.

567
00:40:38,590 --> 00:40:42,138
It can work without but it's definitely

568
00:40:42,224 --> 00:40:45,950
more happier. So again we have the reporting,

569
00:40:47,090 --> 00:40:49,280
let's see what we have in report.

570
00:40:52,510 --> 00:40:56,314
All right. Eleven best failed, we don't know how many

571
00:40:56,352 --> 00:40:59,886
passed unfortunately. And again we have the information,

572
00:40:59,988 --> 00:41:03,278
these about everything. What about

573
00:41:03,364 --> 00:41:04,430
Terrascan?

574
00:41:06,210 --> 00:41:10,640
Again, download, installation and

575
00:41:11,350 --> 00:41:14,190
as you can expect it failed.

576
00:41:14,350 --> 00:41:16,580
Perfect what we have in a report,

577
00:41:19,720 --> 00:41:23,136
right? 14 checks failed,

578
00:41:23,248 --> 00:41:26,776
16 passed. So first of

579
00:41:26,798 --> 00:41:30,570
all, only TFSEg doesn't show how many

580
00:41:31,660 --> 00:41:35,370
checks pass, right? It can be

581
00:41:36,140 --> 00:41:40,110
useful information if you build metrics on it,

582
00:41:40,800 --> 00:41:44,476
on this report it may be interesting how

583
00:41:44,498 --> 00:41:47,884
many checks in time, how much more checks in time

584
00:41:47,922 --> 00:41:50,720
you have and how many of them failed.

585
00:41:51,380 --> 00:41:54,864
So I

586
00:41:54,902 --> 00:41:58,752
prefer these option here, not like this

587
00:41:58,806 --> 00:42:02,576
one. And this one is also perfect. And so

588
00:42:02,598 --> 00:42:04,416
as you can see, 2080,

589
00:42:04,448 --> 00:42:06,420
411,

590
00:42:07,240 --> 00:42:11,300
1416 so different

591
00:42:11,370 --> 00:42:15,400
policies, different checks, different findings,

592
00:42:16,940 --> 00:42:19,450
which one will be best for you?

593
00:42:20,380 --> 00:42:23,576
It's up to you. It's really up to you.

594
00:42:23,678 --> 00:42:27,188
You should go with all of them, check them,

595
00:42:27,374 --> 00:42:30,652
look how these work, right?

596
00:42:30,786 --> 00:42:35,608
And then decide

597
00:42:35,704 --> 00:42:38,908
what to use. Right?

598
00:42:38,994 --> 00:42:41,040
So this was the presentation,

599
00:42:42,420 --> 00:42:46,688
but we didn't talk about one

600
00:42:46,774 --> 00:42:50,092
important element, tools much about drifts.

601
00:42:50,236 --> 00:42:53,776
Right? So what about drifts?

602
00:42:53,888 --> 00:42:58,324
The challenge here with drifts is that

603
00:42:58,442 --> 00:43:02,256
drifts have to be controlled continuously

604
00:43:02,448 --> 00:43:06,244
and there is always someone who has elevated privileges,

605
00:43:06,372 --> 00:43:10,520
right? So even if I say that we should prohibit it,

606
00:43:10,590 --> 00:43:17,324
there is always the root who can do things and

607
00:43:17,362 --> 00:43:20,684
we need to remember about that. And the

608
00:43:20,722 --> 00:43:24,476
available tools not always cover all possible

609
00:43:24,578 --> 00:43:28,044
changes. The best example here is the drift detection from

610
00:43:28,082 --> 00:43:31,776
cloud formation which catch a lot of

611
00:43:31,798 --> 00:43:35,312
stuff, but definitely

612
00:43:35,446 --> 00:43:38,944
not all of them. Even from the list of

613
00:43:38,982 --> 00:43:42,784
this you remember this percentage from this

614
00:43:42,822 --> 00:43:47,460
list. These detection has problems and

615
00:43:47,530 --> 00:43:50,784
important and very unpopular management

616
00:43:50,832 --> 00:43:54,196
must understand that if these say to you

617
00:43:54,218 --> 00:43:57,640
it must be done now, it means a lot of risks.

618
00:44:00,620 --> 00:44:04,548
What tools we can use for drift detections. Drift Ctl

619
00:44:04,724 --> 00:44:08,376
acquired by SNC recently Kubediv for

620
00:44:08,398 --> 00:44:11,764
Kubernetes SaaS offerings

621
00:44:11,812 --> 00:44:15,352
like bridge crew akurix. They have offerings,

622
00:44:15,496 --> 00:44:19,620
paid offerings of course, for continuous monitoring

623
00:44:19,720 --> 00:44:24,396
of your templates, of your misconfigurations

624
00:44:24,508 --> 00:44:25,920
and your drifts.

625
00:44:27,700 --> 00:44:31,676
So we should go into new level just

626
00:44:31,798 --> 00:44:34,820
even before, beyond just scanners,

627
00:44:35,240 --> 00:44:40,464
we should have everything as code. And it means that with those newest

628
00:44:40,512 --> 00:44:44,524
offerings we are able to create it. To create automated controller

629
00:44:44,592 --> 00:44:48,436
remediation processes

630
00:44:48,628 --> 00:44:52,440
and security must be implemented on the earliest possible stage

631
00:44:52,860 --> 00:44:55,432
for infrastructure, for everything,

632
00:44:55,566 --> 00:44:59,340
right? And everything as code means here policy

633
00:44:59,410 --> 00:45:02,860
as code means security as code means

634
00:45:02,930 --> 00:45:06,750
drift as code with those offerings, right? With those

635
00:45:08,720 --> 00:45:11,810
paid offerings and remediation as code.

636
00:45:12,260 --> 00:45:15,728
And what I'd like you to have

637
00:45:15,814 --> 00:45:19,536
as a takeaway from this session is that please do

638
00:45:19,558 --> 00:45:23,012
not pretend that you have security because every

639
00:45:23,066 --> 00:45:27,396
possible misconfiguration will be explored now

640
00:45:27,498 --> 00:45:31,028
tomorrow in one week, but will be right for

641
00:45:31,114 --> 00:45:34,624
a few years ago for wrongly configured

642
00:45:34,672 --> 00:45:38,310
elasticsearch, it was like a couple of minutes

643
00:45:40,200 --> 00:45:43,968
needed to have elasticsearch hacked.

644
00:45:44,144 --> 00:45:48,108
A couple of minutes and security

645
00:45:48,194 --> 00:45:50,700
is very complex and expensive.

646
00:45:51,600 --> 00:45:54,940
Thank you very much. I hope you enjoyed the session

647
00:45:56,240 --> 00:45:59,484
and I hope you enjoy the all

648
00:45:59,522 --> 00:46:02,890
sessions from this conference. Thank you.

