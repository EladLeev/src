1
00:02:14,920 --> 00:02:18,470
Hey everyone, thanks for joining my talk.

2
00:02:19,400 --> 00:02:23,332
I'm happy to be with great other folks that share the knowledge with

3
00:02:23,386 --> 00:02:27,184
others. Our talk today is how do we utilize chaos

4
00:02:27,232 --> 00:02:30,180
engineering to become better cloud native engineers?

5
00:02:31,000 --> 00:02:34,996
Let me first introduce myself. My name is Iran and I'm leading the sirenbox security

6
00:02:35,098 --> 00:02:38,780
engineering at Siren. I'm an engineer, I'm a problem solver

7
00:02:39,120 --> 00:02:42,430
and love sharing my knowledge with others obviously.

8
00:02:43,680 --> 00:02:47,116
So before we start, I would like to start with this one.

9
00:02:47,218 --> 00:02:50,624
What are you going to gain out of this talk? I would like to share

10
00:02:50,662 --> 00:02:54,656
with you how we leverage chaos engineering principles to

11
00:02:54,678 --> 00:02:57,968
achieve other things besides its main goal. We wanted at

12
00:02:57,974 --> 00:03:01,756
the beginning to bring more confidence to our engineers while responding

13
00:03:01,788 --> 00:03:05,636
to production incidents and in addition to that, train them to

14
00:03:05,658 --> 00:03:09,856
become better cloud native engineers as it requires additional expertise

15
00:03:09,968 --> 00:03:13,316
which isn't just the actual programming job.

16
00:03:13,418 --> 00:03:16,856
And ship your code to somewhere. I would like to

17
00:03:16,878 --> 00:03:20,856
share with you how we got there, what we are doing, and how

18
00:03:20,878 --> 00:03:24,744
it improves our engineering team expertise. And you might

19
00:03:24,782 --> 00:03:28,436
ask yourself, why is this title on color being

20
00:03:28,548 --> 00:03:31,740
so? It's a series of workshops that are composed in Siren,

21
00:03:32,080 --> 00:03:36,616
which are the beginning, I must admit, meant to bring more confidence

22
00:03:36,808 --> 00:03:40,108
to the engineers during their own call shifts.

23
00:03:40,284 --> 00:03:43,792
But later on it became a great playground to train

24
00:03:43,846 --> 00:03:47,404
the cloud native engineering practices and share knowledge

25
00:03:47,452 --> 00:03:51,424
around that. So during this session, I'm going to share

26
00:03:51,542 --> 00:03:54,884
what we are doing in such workshops. So stay with

27
00:03:54,922 --> 00:03:56,150
me to learn more.

28
00:03:57,560 --> 00:04:01,604
So let's start with the buzzword cloud native. Here's the definition I

29
00:04:01,642 --> 00:04:05,284
copied from the CNCF documentation. We call

30
00:04:05,322 --> 00:04:09,112
it the cloud native definition. I highlighted some of the words

31
00:04:09,166 --> 00:04:12,900
there. While you read these definition,

32
00:04:12,980 --> 00:04:16,292
you see the words scalable, dynamic,

33
00:04:16,356 --> 00:04:19,980
loosely coupled, resilient, manageable, observable.

34
00:04:20,480 --> 00:04:24,300
At the end you see something that I truly believe in

35
00:04:24,370 --> 00:04:28,136
and I'm trying to make it part of the culture of any engineering

36
00:04:28,168 --> 00:04:31,970
team I join. As engineers. We deliver production.

37
00:04:33,140 --> 00:04:36,576
From the definition, you see that this is what actually

38
00:04:36,678 --> 00:04:40,304
cloud native brings. As a result, engineers can make high

39
00:04:40,342 --> 00:04:44,396
impact changes. These is my opinion, what every engineers

40
00:04:44,428 --> 00:04:47,636
culture should believe in, make an impact as an as

41
00:04:47,658 --> 00:04:49,830
a result, you will have happy customers.

42
00:04:51,160 --> 00:04:54,300
The evolution of the cloud native technologies

43
00:04:54,400 --> 00:04:58,308
and the need to scale engineering, leading organizations

44
00:04:58,404 --> 00:05:02,536
to restructure the teams and embrace new architectural approaches such

45
00:05:02,558 --> 00:05:05,976
as services. We are using cloud environments that

46
00:05:05,998 --> 00:05:09,516
are pretty dynamic and we might choose building microservices to

47
00:05:09,538 --> 00:05:12,956
achieve better engineers scale. You should remember that as

48
00:05:12,978 --> 00:05:16,364
a side note, microservices are not gold, but we use

49
00:05:16,402 --> 00:05:19,768
that, the cloud and other stuff as the tools to scale

50
00:05:19,784 --> 00:05:23,600
our engineering product. As your system call,

51
00:05:24,260 --> 00:05:27,292
your system probably becomes more and more distributed.

52
00:05:27,436 --> 00:05:30,252
Distributed systems are by nature challenging.

53
00:05:30,396 --> 00:05:33,948
They are not easy to debug, they are not easy to maintain. And why it's

54
00:05:33,964 --> 00:05:37,952
not easy just because we see pieces of a larger puzzle.

55
00:05:38,096 --> 00:05:41,872
Two years ago I wrote a blog that's trying to describe

56
00:05:41,936 --> 00:05:45,736
the engineering evolution. At a glance, I think that

57
00:05:45,838 --> 00:05:49,252
the role of engineers grown to be much bigger.

58
00:05:49,396 --> 00:05:52,040
We are not shipping code anymore.

59
00:05:52,780 --> 00:05:56,568
We design it, we develop it, we release it, we support it

60
00:05:56,574 --> 00:05:59,800
in production. The days that we had to throw

61
00:06:00,400 --> 00:06:04,956
the artifacts on operations are over.

62
00:06:05,138 --> 00:06:08,940
As engineers we arent accountable for the full relief cycle.

63
00:06:09,860 --> 00:06:13,772
If you think about it, it's mind blowing. We brought

64
00:06:13,836 --> 00:06:17,324
so much power to us as engineers

65
00:06:17,452 --> 00:06:20,960
and with regard power we should be much more responsible.

66
00:06:21,880 --> 00:06:26,048
You might be interested in reading my post that I wrote

67
00:06:26,144 --> 00:06:30,132
two years ago. I just talked about the changes

68
00:06:30,186 --> 00:06:34,152
and the complexity, but we should embrace these

69
00:06:34,206 --> 00:06:37,604
changes. These changes enable teams to take an endtoend

70
00:06:37,652 --> 00:06:41,800
ownership of their deliveries and enhance their velocity.

71
00:06:42,140 --> 00:06:44,468
As a result of these evolutions,

72
00:06:44,644 --> 00:06:48,296
engineers these days are closer to the product and

73
00:06:48,318 --> 00:06:52,156
the customer needs. In my opinion, there is still a long way to

74
00:06:52,178 --> 00:06:55,724
go and companies are still struggling. How to get engineers closer to their

75
00:06:55,762 --> 00:06:59,720
customers to understand in depth what their business impact.

76
00:06:59,880 --> 00:07:03,164
We called about impact, but what is this engineering

77
00:07:03,212 --> 00:07:07,056
impact that we talk about? Engineers need to know what

78
00:07:07,078 --> 00:07:10,576
do they solve? What's these influence on the customer and

79
00:07:10,678 --> 00:07:14,324
know these impact on the product. If you think

80
00:07:14,362 --> 00:07:17,600
about it, there is a transition in the engineering mindset.

81
00:07:17,680 --> 00:07:21,216
We ship products and not just code. We embrace

82
00:07:21,248 --> 00:07:25,252
this transition which brings with it so many benefits to the companies that are

83
00:07:25,306 --> 00:07:29,044
adapting them, and we are among

84
00:07:29,092 --> 00:07:32,970
them. And on these other end,

85
00:07:33,500 --> 00:07:36,872
as a team, as a system scale, it becomes challenging

86
00:07:36,936 --> 00:07:40,380
to write new features that solve a certain problem.

87
00:07:40,530 --> 00:07:44,920
And even understanding service behavior is much more complex.

88
00:07:45,080 --> 00:07:48,380
And let's see why it becomes more complex.

89
00:07:49,780 --> 00:07:54,224
The advanced approaches that I just mentioned bring

90
00:07:54,342 --> 00:07:58,396
great value. But as engineers, we are now writing app

91
00:07:58,428 --> 00:08:02,384
that are part of a wider collection of other services that are

92
00:08:02,422 --> 00:08:06,084
built on top of a certain platform in the cloud.

93
00:08:06,282 --> 00:08:09,476
I really like what Ben is sharing in these slides and I would like to

94
00:08:09,498 --> 00:08:12,896
share it with you. He's calling them deep systems.

95
00:08:13,008 --> 00:08:16,688
Images are better than words and the pyramid

96
00:08:16,784 --> 00:08:19,944
in the slide explains it all. You can see

97
00:08:19,982 --> 00:08:23,736
that as your service scales, you need to be responsible to a

98
00:08:23,758 --> 00:08:28,140
deep chain of other services that these services actually depend on.

99
00:08:28,290 --> 00:08:31,592
This is what it means. We are maintaining deep systems.

100
00:08:31,736 --> 00:08:35,372
Obviously, microservices and distributed systems are deep by

101
00:08:35,426 --> 00:08:38,988
nature. Let's try to imagine just a

102
00:08:38,994 --> 00:08:42,032
certain service you have, let's say you have some,

103
00:08:42,166 --> 00:08:45,616
I don't know, order service. What do you do in

104
00:08:45,638 --> 00:08:48,960
this order service? You fetch the data in one service

105
00:08:49,110 --> 00:08:53,396
and then you need to fetch another data from another service and

106
00:08:53,498 --> 00:08:56,790
you maybe produce an arent to a third service.

107
00:08:57,160 --> 00:09:00,596
The story can go on, but you understand the

108
00:09:00,618 --> 00:09:04,136
concept. It's just complex. Deep systems are complex and

109
00:09:04,158 --> 00:09:08,052
you should know how to deal with them. As part of transitioning

110
00:09:08,116 --> 00:09:11,924
to being more cloud native distributed and resolving

111
00:09:11,972 --> 00:09:15,528
on orchestrators such as kubernetes at

112
00:09:15,534 --> 00:09:19,436
your foundations, engineers face more and more challenges that

113
00:09:19,458 --> 00:09:22,684
they didn't have to deal with before. Just imagine this

114
00:09:22,722 --> 00:09:26,524
scenario. You are on call, there is some back pressure that

115
00:09:26,562 --> 00:09:30,364
burning your SLO targets. There is some issue with

116
00:09:30,402 --> 00:09:33,724
one of your AZ and third of your deployment couldn't

117
00:09:33,772 --> 00:09:37,408
reschedule due to some node availability issues. What do

118
00:09:37,414 --> 00:09:40,048
you do? You need to found it.

119
00:09:40,214 --> 00:09:44,004
You need to find it, but and you might need to point that to your

120
00:09:44,042 --> 00:09:47,156
on call DevOps colleague. By the way, DevOps may be

121
00:09:47,178 --> 00:09:51,268
working on that already as it might trigger these slos as well.

122
00:09:51,434 --> 00:09:54,692
These kind of incidents happen. And as a cloud

123
00:09:54,746 --> 00:09:58,120
native engineer you should be aware of the platform you're running

124
00:09:58,190 --> 00:10:01,940
in. What does it mean? You should know that these are AZ

125
00:10:02,020 --> 00:10:05,864
in every region your pod affinities are defined in

126
00:10:05,902 --> 00:10:10,120
some way and the pods that are scheduled have some status.

127
00:10:10,280 --> 00:10:14,072
These are cluster events. And how do you read the cluster events

128
00:10:14,216 --> 00:10:17,852
in such a failure? This was just one particular

129
00:10:17,986 --> 00:10:21,936
scenario that happened to me and might happen to many of you before.

130
00:10:22,118 --> 00:10:25,568
As you see, it's not your just service

131
00:10:25,654 --> 00:10:29,024
anymore, it's more than that. And this is what it means

132
00:10:29,062 --> 00:10:30,960
to be a cloud native engineer.

133
00:10:32,280 --> 00:10:35,492
As I said already, being a cloud native engineer is fun

134
00:10:35,546 --> 00:10:38,790
but also challenging. So these days

135
00:10:39,880 --> 00:10:43,604
engineers arent just writing code and

136
00:10:43,642 --> 00:10:47,064
building packages, but arent expected to know how to write

137
00:10:47,102 --> 00:10:50,552
the relevant Kubernetes resource yamls or use

138
00:10:50,606 --> 00:10:54,568
helm or containerize these app and ship it to

139
00:10:54,734 --> 00:10:57,660
some variety of environments.

140
00:10:58,640 --> 00:11:02,284
So as you see, it's not enough to know it

141
00:11:02,402 --> 00:11:05,720
at a high level, being a cloud native engineers

142
00:11:05,800 --> 00:11:09,224
means that it's not enough to just know the programming

143
00:11:09,272 --> 00:11:13,120
language you are working on well. But you should also keep adapting

144
00:11:14,180 --> 00:11:17,724
your knowledge and understanding of the cloud native technologies

145
00:11:17,772 --> 00:11:21,424
that you are depending on. Besides these tools you are

146
00:11:21,462 --> 00:11:25,348
using, building cloud native applications involves taking into account

147
00:11:25,434 --> 00:11:28,852
many moving parts such as these platform you are building

148
00:11:28,906 --> 00:11:32,340
on, the database you are using, and much more.

149
00:11:32,490 --> 00:11:36,296
Obviously there are great tools and frameworks out there that

150
00:11:36,398 --> 00:11:39,928
abstract some of this complexity out from you.

151
00:11:40,014 --> 00:11:43,636
As an engineer, but being blind to them might teams

152
00:11:43,668 --> 00:11:46,010
you day or even night.

153
00:11:47,740 --> 00:11:52,616
If you haven't heard of the fallacies of distributed computing,

154
00:11:52,808 --> 00:11:55,772
I really suggest you to read farther on them.

155
00:11:55,906 --> 00:11:59,836
They are here to stay and you should be aware of them and be prepared.

156
00:11:59,948 --> 00:12:03,516
In cloud things will happen, things will fail.

157
00:12:03,628 --> 00:12:05,970
Don't think that you know what to expect,

158
00:12:06,500 --> 00:12:10,304
just make sure you understand them. You handle them

159
00:12:10,342 --> 00:12:13,844
gracefully and breath them. As I said, they will

160
00:12:13,882 --> 00:12:17,268
just happen. We talked a

161
00:12:17,274 --> 00:12:20,756
lot about the arent benefits and

162
00:12:20,778 --> 00:12:24,324
also the challenging. So these is what

163
00:12:24,362 --> 00:12:27,736
we had to do and we had to deal with them with

164
00:12:27,758 --> 00:12:31,576
these challenges here at Cyren. So let me explain what

165
00:12:31,598 --> 00:12:34,810
did we do to code with these challenges here?

166
00:12:35,180 --> 00:12:38,476
We utilize Kerson engineering for that propose and we

167
00:12:38,498 --> 00:12:42,510
have found this method pretty useful and I think that it can be

168
00:12:43,120 --> 00:12:47,212
nice to share with you the practices how

169
00:12:47,266 --> 00:12:48,990
we dealt with them here.

170
00:12:50,660 --> 00:12:52,610
So stay here with me.

171
00:12:54,420 --> 00:12:58,160
Let's first give a quick brief of what chaos engineering

172
00:12:58,740 --> 00:13:02,144
is. The main goal of Chaos engineers is

173
00:13:02,182 --> 00:13:05,712
as explained in the slide that I just copied from the Chaos

174
00:13:05,776 --> 00:13:09,188
principles website. The idea of chaos engineering is

175
00:13:09,194 --> 00:13:12,980
to identify the weaknesses and reduce certain when building

176
00:13:13,050 --> 00:13:16,650
distributed systems. As I already mentioned

177
00:13:17,020 --> 00:13:20,484
in previous slides, building distributed systems at scale

178
00:13:20,532 --> 00:13:24,004
is challenging and since such systems tend to be composed

179
00:13:24,132 --> 00:13:27,916
of many moving parts, leveraging chaos engineering practices to

180
00:13:27,938 --> 00:13:31,916
reduce these blast radius of such failures improves itself

181
00:13:32,098 --> 00:13:35,436
as a great method for

182
00:13:35,458 --> 00:13:38,696
that propose. So I've created

183
00:13:38,728 --> 00:13:42,492
a services of workshops called Oncoloke King. These workshops

184
00:13:42,556 --> 00:13:45,520
intend to achieve two main objectives.

185
00:13:45,940 --> 00:13:49,696
The first train engineers on production failures that

186
00:13:49,718 --> 00:13:53,172
we had recently and second is to train engineers on cloud

187
00:13:53,226 --> 00:13:56,704
native practices, tooling and how to become better cloud native

188
00:13:56,752 --> 00:14:00,116
engineers. A bit on

189
00:14:00,138 --> 00:14:03,748
our call procedure before we proceed so it will help you

190
00:14:03,754 --> 00:14:07,384
to understand better what I'm going to talk

191
00:14:07,422 --> 00:14:11,480
about in the next slides. We have weekly engineering shifts

192
00:14:11,820 --> 00:14:15,816
and ANOC team that monitors our system 24/7 there

193
00:14:15,838 --> 00:14:19,660
are these alert severities defined severity one, two and three which

194
00:14:19,730 --> 00:14:23,580
actually define the business impact alerts to the

195
00:14:23,650 --> 00:14:27,368
actual service owner, alerts that we usually monitor.

196
00:14:27,544 --> 00:14:31,532
We have alert playbooks that assist these on call engineer while

197
00:14:31,666 --> 00:14:35,216
responding to an event. I will elaborate on them

198
00:14:35,238 --> 00:14:38,784
a bit later. And in case of a severity one, the first

199
00:14:38,822 --> 00:14:41,970
priority is to get the system back to a normal state.

200
00:14:42,340 --> 00:14:46,244
These on call engineers that is leading the incidents should understand the

201
00:14:46,282 --> 00:14:50,612
high level business impact to communicate back

202
00:14:50,746 --> 00:14:54,116
to the customers and in any case that there needs to

203
00:14:54,138 --> 00:14:57,464
be some specific expertise to bring back into

204
00:14:57,502 --> 00:15:00,856
a functional state. The engineers is making sure that the

205
00:15:00,878 --> 00:15:04,072
relevant team or the service owner are on the keyboard to lead

206
00:15:04,126 --> 00:15:07,916
it. These are the tools that the engineer got

207
00:15:08,018 --> 00:15:11,420
in his box to utilize in case of an incident.

208
00:15:11,920 --> 00:15:14,620
It's a pretty nice tool set, I must admit.

209
00:15:15,200 --> 00:15:19,056
We have Jager, Kibana, Grafana and

210
00:15:19,078 --> 00:15:22,348
all the rest. Now that we understand the big picture,

211
00:15:22,444 --> 00:15:25,970
let's read down to the workshop itself.

212
00:15:28,980 --> 00:15:33,216
The workshop sessions are composed into three parts.

213
00:15:33,328 --> 00:15:36,016
We have the introduction and a goal setting.

214
00:15:36,208 --> 00:15:39,764
Then we might share some important stuff that we would like to share with

215
00:15:39,802 --> 00:15:43,204
everyone. And then we start the

216
00:15:43,242 --> 00:15:46,424
challenge as the most important thing

217
00:15:46,462 --> 00:15:50,056
of this workshop. Let's dive into each one

218
00:15:50,078 --> 00:15:52,360
of the parts that I just mentioned above.

219
00:15:53,740 --> 00:15:57,172
The session starts with a quick introduction and motivation.

220
00:15:57,316 --> 00:16:01,304
Why do we have these session? What are we going to do in the upcoming

221
00:16:01,352 --> 00:16:04,764
session? And make sure that the audience are

222
00:16:04,802 --> 00:16:08,476
aligned on the flow and the agenda. It's very

223
00:16:08,498 --> 00:16:12,080
important to show that every time as it makes people

224
00:16:12,150 --> 00:16:16,016
more connected to the motivation and understand what is

225
00:16:16,038 --> 00:16:20,016
going to happen. This is part of your main goal. You should try to

226
00:16:20,038 --> 00:16:23,428
keep people focused and concentrated, so make sure that

227
00:16:23,514 --> 00:16:27,300
the things are clear and concise at the beginning of

228
00:16:27,370 --> 00:16:29,060
every workshop session.

229
00:16:30,600 --> 00:16:34,372
Sometimes we utilize the session as a great opportunity to communicate

230
00:16:34,436 --> 00:16:38,372
some architectural aspects, platform improves

231
00:16:38,516 --> 00:16:42,008
or process changes that we had recently. For example,

232
00:16:42,174 --> 00:16:45,850
we provide some updates on the on call process,

233
00:16:46,320 --> 00:16:49,516
maybe code service flow that

234
00:16:49,538 --> 00:16:52,750
we made some adaptations on and more.

235
00:16:54,240 --> 00:16:57,868
And the last part, and the most important part is we work on

236
00:16:57,954 --> 00:17:01,868
maximum two production incidence simulation

237
00:17:02,044 --> 00:17:05,936
and the overall session shouldn't be longer

238
00:17:06,038 --> 00:17:09,408
than 60 minutes. We have found out that we

239
00:17:09,494 --> 00:17:12,336
lose engineers concentration for longer sessions.

240
00:17:12,448 --> 00:17:14,420
So if you work hybrid,

241
00:17:15,320 --> 00:17:18,484
it is better that these sessions will

242
00:17:18,522 --> 00:17:22,292
happen when you are in the same workspace as we have found that

243
00:17:22,426 --> 00:17:25,832
much more productive. The communication is a key

244
00:17:25,966 --> 00:17:29,176
and it's making a

245
00:17:29,198 --> 00:17:32,616
great difference. Let me share with you what we

246
00:17:32,638 --> 00:17:36,196
are doing specifically in this part, which is the core

247
00:17:36,228 --> 00:17:39,516
of this workshop. I think this

248
00:17:39,538 --> 00:17:43,368
is one of the most important things. Our oncology being

249
00:17:43,464 --> 00:17:46,732
workshop sessions are usually trying to be close

250
00:17:46,786 --> 00:17:49,904
to real life production scenarios as possible.

251
00:17:50,102 --> 00:17:53,856
By simulating real production scenarios in one of

252
00:17:53,878 --> 00:17:57,516
our environments, such real life scenarios enables

253
00:17:57,548 --> 00:18:01,664
the engineers to build confidence while taking care of real

254
00:18:01,702 --> 00:18:05,236
production incident. Try to have an environment that

255
00:18:05,258 --> 00:18:09,076
you can simulate that incidents on and let people play in

256
00:18:09,098 --> 00:18:12,704
real time. As we always say, there is no identical environment

257
00:18:12,752 --> 00:18:17,060
to production and since we are doing specific experiments,

258
00:18:18,920 --> 00:18:23,348
it's not really necessary to have production environment in place.

259
00:18:23,514 --> 00:18:26,664
Obviously, as more as you advance,

260
00:18:26,832 --> 00:18:30,216
it might be better to walk on production, but it's

261
00:18:30,248 --> 00:18:34,028
much more complex by nature, as you already understand.

262
00:18:34,194 --> 00:18:38,172
And we have never done this before since

263
00:18:38,226 --> 00:18:41,632
we utilize chaos engineering here. I suggest having

264
00:18:41,686 --> 00:18:45,392
a real experiments that you can execute within a few

265
00:18:45,446 --> 00:18:49,056
clicks. We are using one of our lotus environments for

266
00:18:49,078 --> 00:18:52,864
that proposal. I must

267
00:18:52,902 --> 00:18:56,576
say that we started manually, so if you don't

268
00:18:56,608 --> 00:19:00,084
have a tool I really suggest you not to spend dime on that.

269
00:19:00,202 --> 00:19:03,110
Don't rush to cause a specific chaos engineering tool.

270
00:19:03,960 --> 00:19:07,632
Just recently we started using litmos chaos

271
00:19:07,776 --> 00:19:11,368
to run these chaos experiments. But you

272
00:19:11,374 --> 00:19:14,616
can cause anything else you would like to or

273
00:19:14,638 --> 00:19:17,980
you can just simulate this instance manually as we have done

274
00:19:18,050 --> 00:19:21,324
in the beginning. I think that the most

275
00:19:21,362 --> 00:19:24,892
important thing is, as I said before,

276
00:19:25,026 --> 00:19:29,056
we need to have a playground for the genes to actually exercise and

277
00:19:29,078 --> 00:19:32,524
got just hearing someone talking about presentation slide

278
00:19:32,572 --> 00:19:36,944
in some demo you will be convinced that

279
00:19:37,062 --> 00:19:40,556
when they arent practicing and not just listening

280
00:19:40,588 --> 00:19:43,988
to someone explaining it makes the session very very

281
00:19:44,074 --> 00:19:48,340
productive. Right after the introduction slides

282
00:19:48,840 --> 00:19:52,640
we drill down into first challenge.

283
00:19:52,800 --> 00:19:56,676
The session started with some slide

284
00:19:56,788 --> 00:20:01,316
that is explaining a certain incident that we arent going to simulate.

285
00:20:01,508 --> 00:20:05,736
We usually give some background of what is going to happen. For example there

286
00:20:05,758 --> 00:20:09,404
is some back pressure in one of our services that we couldn't handle in

287
00:20:09,442 --> 00:20:13,084
some specific UTC time. We present some metrics of

288
00:20:13,122 --> 00:20:17,608
the current behavior. For example we present the alerts

289
00:20:17,704 --> 00:20:21,596
and the corresponding grafana dashboards.

290
00:20:21,788 --> 00:20:26,144
Usually I

291
00:20:26,182 --> 00:20:29,952
think that you should present something that is very

292
00:20:30,006 --> 00:20:33,652
minimal because these is how it usually happens during the real

293
00:20:33,706 --> 00:20:37,792
production incident. These we give engineers

294
00:20:37,856 --> 00:20:41,780
some time to review the incident by themselves. Giving them time to think

295
00:20:41,850 --> 00:20:45,140
about it is really crucial.

296
00:20:45,300 --> 00:20:48,356
These are exercising alone thinking. If they haven't

297
00:20:48,388 --> 00:20:52,024
covered something similar before this very important step,

298
00:20:52,222 --> 00:20:55,608
it will encourage them to try and find

299
00:20:55,694 --> 00:20:59,324
out more information and utilize their know how to get

300
00:20:59,362 --> 00:21:03,512
more information such as gather some cluster metrics

301
00:21:03,576 --> 00:21:07,132
or view the relevant dashboards, read the logs or

302
00:21:07,186 --> 00:21:08,380
service status.

303
00:21:09,700 --> 00:21:14,508
And I think that it's understanding

304
00:21:14,684 --> 00:21:17,968
the customer impact is a very important

305
00:21:18,134 --> 00:21:21,596
aspect. You should understand the customer impact.

306
00:21:21,708 --> 00:21:26,276
And even more importantly, when you are in

307
00:21:26,298 --> 00:21:29,476
an on call shift, in case of a severity one,

308
00:21:29,578 --> 00:21:33,108
you should communicate the impact on the customer and see if

309
00:21:33,114 --> 00:21:36,996
there is any walk around that did the incident resolved completely.

310
00:21:37,178 --> 00:21:40,308
Engineers is not always aware of the actual customer impact.

311
00:21:40,404 --> 00:21:43,944
It's very good time to discuss it. I think

312
00:21:43,982 --> 00:21:47,964
that the walks of chess and I really think

313
00:21:48,002 --> 00:21:51,310
that it's a good time to speak about such things.

314
00:21:54,320 --> 00:21:57,964
I think that you should also pose their analysis from time to

315
00:21:58,002 --> 00:22:01,392
time and encourage them to ask questions. We have found

316
00:22:01,446 --> 00:22:04,972
out that the discussions around the incidents is a great place for knowledge

317
00:22:05,036 --> 00:22:08,640
sharing. Knowledge earning can be anything from design

318
00:22:08,710 --> 00:22:12,080
diagram to some specific Kubernetes command line and

319
00:22:12,150 --> 00:22:15,908
if you are sitting together in the same space, it can be pretty nice

320
00:22:15,994 --> 00:22:19,316
because you can see who is doing what and then you

321
00:22:19,338 --> 00:22:24,840
can ask them to show the tools that they are using and

322
00:22:24,990 --> 00:22:27,930
other people can learn a lot from that.

323
00:22:28,700 --> 00:22:33,000
What I really like in this session is that it triggers conversations

324
00:22:33,500 --> 00:22:36,090
and engineers tell to each other,

325
00:22:39,280 --> 00:22:42,904
for example, to send them Cli or tools

326
00:22:42,952 --> 00:22:46,988
that they recommend to use. It's pretty nice and

327
00:22:47,074 --> 00:22:50,720
it really makes the engineers life

328
00:22:50,790 --> 00:22:54,080
while debugging an incident much, much easier.

329
00:22:55,540 --> 00:22:59,024
The workshop sessions will teach you a lot on the know

330
00:22:59,062 --> 00:23:02,784
how that people have and I encourage you to update the playbooks

331
00:23:02,832 --> 00:23:05,780
based on that. If you don't have such a playbook,

332
00:23:06,440 --> 00:23:09,716
I really recommend you to have such we have a variety of

333
00:23:09,738 --> 00:23:11,860
incidents playbooks.

334
00:23:13,080 --> 00:23:17,272
Most of them are composed for major severity one

335
00:23:17,326 --> 00:23:21,124
alerts as a provider on colongineer with some gotchas

336
00:23:21,172 --> 00:23:25,544
and high level flows that is important to know and

337
00:23:25,582 --> 00:23:29,624
to look at when dealing with different production incidents

338
00:23:29,752 --> 00:23:34,108
or scenarios. And this

339
00:23:34,114 --> 00:23:38,430
is how our playbook template looks like.

340
00:23:38,740 --> 00:23:42,080
You can see that these is some description how to detect

341
00:23:43,780 --> 00:23:47,296
the issue, how to assess the customer

342
00:23:47,398 --> 00:23:51,184
impact, and how to communicate in case

343
00:23:51,222 --> 00:23:54,928
of a failure. Drive the conversations

344
00:23:55,024 --> 00:23:58,164
by asking questions that will enable you to share some

345
00:23:58,202 --> 00:24:01,764
of the topics that you would like to train on. A few

346
00:24:01,802 --> 00:24:06,090
examples that I have improves to be efficient arent

347
00:24:06,860 --> 00:24:10,756
you can for example, ask an engineer to present the Grafana dashboard

348
00:24:10,788 --> 00:24:15,108
to look at or ask someone else to share the kibana logging queries

349
00:24:15,204 --> 00:24:18,936
or ask another one to present their jega

350
00:24:18,968 --> 00:24:22,792
tracing and how do they fund trace.

351
00:24:22,936 --> 00:24:25,420
It's pretty nice. I must admit.

352
00:24:27,280 --> 00:24:31,010
You sometimes need to moderate these conversation as

353
00:24:31,380 --> 00:24:35,296
the time really flies fast and you

354
00:24:35,318 --> 00:24:38,460
need to bring back the focus of it because the conversation

355
00:24:38,540 --> 00:24:44,272
getting very heavy sometimes during

356
00:24:44,326 --> 00:24:47,924
the discussion portal, figure on interesting

357
00:24:48,042 --> 00:24:52,070
architectural aspects that you would like the engineers to know about.

358
00:24:52,440 --> 00:24:55,944
Maybe you can talk on specific async channel that

359
00:24:55,982 --> 00:24:59,768
you might want to share your thoughts about or anything

360
00:24:59,854 --> 00:25:03,160
else. Encourage the audience to speak by asking

361
00:25:03,230 --> 00:25:06,624
questions around these areas of interest that will enable

362
00:25:06,692 --> 00:25:09,896
them to even suggest new design approaches

363
00:25:10,008 --> 00:25:13,244
or highlight different challenges that

364
00:25:13,282 --> 00:25:17,384
they were thinking about lately. You might be surprised,

365
00:25:17,512 --> 00:25:21,168
I tell you. You might be surprised what people say and

366
00:25:21,254 --> 00:25:24,944
sometimes you might even add them some of the things

367
00:25:24,982 --> 00:25:28,336
that they suggest to your technical depth in order to take

368
00:25:28,358 --> 00:25:29,970
care of them later on.

369
00:25:31,400 --> 00:25:34,852
At the end of every challenge, ask somebody to present their

370
00:25:34,906 --> 00:25:38,564
end to end analysis. It makes things clearer for

371
00:25:38,602 --> 00:25:42,544
people that might not feel comfortable

372
00:25:42,592 --> 00:25:46,744
enough to ask questions in. For example in large forums or

373
00:25:46,782 --> 00:25:50,164
engineers that have been just joined the team or junior

374
00:25:50,212 --> 00:25:53,160
engineers that might want to learn more afterwards.

375
00:25:53,820 --> 00:25:57,084
It's a great source for people to get back into

376
00:25:57,282 --> 00:26:01,470
what has been done and also a fantastic part of your knowledge base.

377
00:26:02,080 --> 00:26:05,212
These you can share the onboarding training process

378
00:26:05,346 --> 00:26:09,392
to new engineers that just join the team. I found

379
00:26:09,446 --> 00:26:13,792
out that people sometimes just watch the recording afterwards and

380
00:26:13,846 --> 00:26:16,944
becomes handy even just for engineers to get some

381
00:26:16,982 --> 00:26:20,050
overview of the tools that they have.

382
00:26:20,820 --> 00:26:24,132
So just make sure to record it and share

383
00:26:24,186 --> 00:26:27,140
the meeting notes right after the session.

384
00:26:28,600 --> 00:26:32,390
As you have seen, chaos engineering for training is pretty cool,

385
00:26:33,740 --> 00:26:37,732
so leverage that to invest in your engineers team's knowledge

386
00:26:37,796 --> 00:26:41,624
and expertise and seems like it was successful for

387
00:26:41,662 --> 00:26:44,890
us and maybe successful for you as well.

388
00:26:46,300 --> 00:26:49,496
So to summarize some of the key takeaways,

389
00:26:49,688 --> 00:26:53,432
we found out that these sessions are an awesome playground

390
00:26:53,496 --> 00:26:57,304
for engineers. I must admit that I didn't think about using chaos

391
00:26:57,352 --> 00:27:00,704
engineering for this simulation at the first place.

392
00:27:00,822 --> 00:27:04,972
We started with just manual simulations of our incidents

393
00:27:05,116 --> 00:27:08,556
or just presenting some of the evidence we gathered

394
00:27:08,668 --> 00:27:12,960
during some time of failure to drive conversation around them.

395
00:27:13,110 --> 00:27:16,796
As we moved forward, we leveraged the usage

396
00:27:16,828 --> 00:27:21,924
of Kios tools for that proposal. Besides training to

397
00:27:21,962 --> 00:27:25,428
become better cloud native engineer, non code

398
00:27:25,444 --> 00:27:28,980
engineers are feeling more comfortable now in their shifts

399
00:27:29,060 --> 00:27:32,890
and understand the tools that are available to them to respond quickly.

400
00:27:33,740 --> 00:27:37,484
I thought it can be good to share as

401
00:27:37,522 --> 00:27:41,132
we always talk about chaos engineers experiments to make

402
00:27:41,266 --> 00:27:45,724
better, reliable systems, but you can also leverage them

403
00:27:45,922 --> 00:27:49,070
also to invest in your engineering team's training.

404
00:27:50,720 --> 00:27:54,316
So thanks for your time and hope it was a

405
00:27:54,338 --> 00:27:58,268
fruitful session. Feel free to ask questions

406
00:27:58,354 --> 00:28:01,844
anytime and I will be very happy to share with you much

407
00:28:01,882 --> 00:28:02,770
more if you want to.

