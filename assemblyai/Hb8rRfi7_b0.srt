1
00:00:25,410 --> 00:00:28,822
You. Hi there, and welcome

2
00:00:28,876 --> 00:00:32,434
to sleeping with one eye open experiences in production

3
00:00:32,482 --> 00:00:35,810
support. My name is Quintin Balsdon. I'm an Android developed.

4
00:00:35,890 --> 00:00:40,594
I've been working in London since 2017,

5
00:00:40,722 --> 00:00:44,182
and I've been developing applications since about

6
00:00:44,236 --> 00:00:48,482
2010. I've supported quite a lot of different applications,

7
00:00:48,546 --> 00:00:52,126
from startups to long running apps. They've been

8
00:00:52,308 --> 00:00:55,118
both mobile, desktop, back end.

9
00:00:55,204 --> 00:00:58,846
I even have a stint supporting us. For seven years I

10
00:00:58,868 --> 00:01:03,098
supported an Excel macro that I wrote, and I think it's really important

11
00:01:03,204 --> 00:01:06,786
that as people involved with software, we understand that

12
00:01:06,808 --> 00:01:09,774
we are part of an entire ecosystem,

13
00:01:09,902 --> 00:01:13,262
and it's something that it's not really explained

14
00:01:13,326 --> 00:01:16,562
to people when they join, that everyone is a part of software

15
00:01:16,626 --> 00:01:19,942
delivery and the entire process that's contained within

16
00:01:19,996 --> 00:01:23,782
that. After a particularly intense three year project where

17
00:01:23,836 --> 00:01:27,574
production support was a major aspect, my company asked me

18
00:01:27,612 --> 00:01:31,830
to just write down the things that I'd learned, and that's how this presentation

19
00:01:31,910 --> 00:01:35,594
actually came about. And it's my hope that I create an

20
00:01:35,632 --> 00:01:39,942
environment of understanding and of communication

21
00:01:40,006 --> 00:01:43,822
that we can all learn from each other and grow and become better

22
00:01:43,876 --> 00:01:47,294
at doing this. So the first question we need to

23
00:01:47,332 --> 00:01:50,686
ask is, how does software support fit in? And I

24
00:01:50,708 --> 00:01:54,242
think in terms of the software development lifecycle, it is

25
00:01:54,296 --> 00:01:58,254
that last element of maintenance that we're really focusing

26
00:01:58,302 --> 00:02:02,322
in on. I think that everybody should be involved with

27
00:02:02,376 --> 00:02:06,386
production support, and that doesn't mean that you are

28
00:02:06,488 --> 00:02:09,606
doing overnight support getting called out at 03:00 a.m.

29
00:02:09,628 --> 00:02:13,394
Not everybody is at a point of their lives where they are even capable

30
00:02:13,442 --> 00:02:17,254
of doing that. But I do think that everyone needs

31
00:02:17,292 --> 00:02:21,306
to be aware of what's going on. I have found that those who have

32
00:02:21,328 --> 00:02:25,546
invested the time in doing production support have a far more

33
00:02:25,648 --> 00:02:29,526
holistic view of the domain in which they operate.

34
00:02:29,638 --> 00:02:33,178
And they understand the nuances

35
00:02:33,354 --> 00:02:36,682
of all the infrastructure and technologies that are communicating,

36
00:02:36,746 --> 00:02:40,782
and it makes them better developers and better

37
00:02:40,836 --> 00:02:44,286
people who seek to understand how things work. And I think it's

38
00:02:44,318 --> 00:02:47,646
imperative as well that we consider it critical,

39
00:02:47,758 --> 00:02:51,214
because if people aren't involved,

40
00:02:51,342 --> 00:02:54,674
they tend not to understand the nuances of the

41
00:02:54,712 --> 00:02:58,754
infrastructure and architecture that they're working with, and they tend

42
00:02:58,802 --> 00:03:02,146
to be less capable of spotting potential problems earlier

43
00:03:02,178 --> 00:03:05,942
on. And so the more we get involved with production support, the less

44
00:03:05,996 --> 00:03:09,178
we actually have to do it, because we are learning

45
00:03:09,264 --> 00:03:12,614
the way that our particular infrastructure works and are capable

46
00:03:12,662 --> 00:03:15,850
of dealing with that. There are times

47
00:03:15,920 --> 00:03:18,678
where we had one particular component,

48
00:03:18,854 --> 00:03:21,642
when that component failed, we knew where to look,

49
00:03:21,776 --> 00:03:25,054
and once we started noticing that pattern, we were far more

50
00:03:25,092 --> 00:03:28,782
capable of saying we need to do some work in that area.

51
00:03:28,836 --> 00:03:32,810
We need to go and figure out what's going on. Why is that component failing

52
00:03:32,890 --> 00:03:35,906
and how do we make it better so that we don't get called out all

53
00:03:35,928 --> 00:03:39,134
the time? I think that supporting a production

54
00:03:39,182 --> 00:03:42,194
application can sound quite scary. No one wants to get

55
00:03:42,232 --> 00:03:45,586
called out or feel massively responsible. There's a

56
00:03:45,608 --> 00:03:48,806
lot of ghosts in the shell that we might not want

57
00:03:48,828 --> 00:03:52,598
to have to experience, and it's very important

58
00:03:52,684 --> 00:03:56,166
that we see both the positive side and negative sides of

59
00:03:56,188 --> 00:03:59,322
supporting a production application. One of the best

60
00:03:59,376 --> 00:04:03,034
things that I've found is that you build your

61
00:04:03,072 --> 00:04:06,586
team in such a phenomenal way when

62
00:04:06,608 --> 00:04:10,042
you get called out together. There is a big sense

63
00:04:10,096 --> 00:04:14,074
of camaraderie in walking off of the battlefield tired

64
00:04:14,122 --> 00:04:17,518
and broken, and knowing that you've done your best

65
00:04:17,604 --> 00:04:21,630
to support your customers. A few years ago, I wrote a personal

66
00:04:21,700 --> 00:04:25,186
app as a joke. It really was not intended to

67
00:04:25,368 --> 00:04:28,610
be popular and someone created a Reddit page

68
00:04:28,680 --> 00:04:32,386
for it and the popularity skyrocketed and

69
00:04:32,408 --> 00:04:36,680
I ended up with 30,000 people using my app at one time.

70
00:04:37,450 --> 00:04:41,334
That was particularly scary for me because I

71
00:04:41,452 --> 00:04:44,582
had no mechanism of supporting a user base

72
00:04:44,636 --> 00:04:47,974
on that scale. And I realized that no matter what I put

73
00:04:48,012 --> 00:04:51,546
into the wild, it could get used by a lot of people. And I

74
00:04:51,568 --> 00:04:55,770
think having that knowledge in that aspect is really important.

75
00:04:55,920 --> 00:04:59,258
One thing we can do is look at the example of others in

76
00:04:59,264 --> 00:05:02,542
the news. I've done a lot of learning from

77
00:05:02,596 --> 00:05:05,882
just watching how other companies respond and react

78
00:05:05,946 --> 00:05:09,742
to problems. And so I'd like to introduce to you a few use

79
00:05:09,796 --> 00:05:13,342
cases. Some of the stories that I'm going to mention

80
00:05:13,396 --> 00:05:16,180
here, I've actually chosen very recent ones.

81
00:05:16,630 --> 00:05:20,034
Latest is two years, and I'd like you to keep these

82
00:05:20,072 --> 00:05:24,130
in mind as we go through these, because these are public

83
00:05:24,280 --> 00:05:27,898
mentioned in the news. You may have experienced them personally,

84
00:05:28,014 --> 00:05:31,814
but learning from how other companies respond, whether good

85
00:05:31,852 --> 00:05:35,670
or bad, can be really, really useful. So I'd like to just mention

86
00:05:35,740 --> 00:05:38,922
a few of these incidents. One of the biggest ones that stood out to me

87
00:05:38,976 --> 00:05:42,874
was from the 20 April to the 20 May

88
00:05:42,912 --> 00:05:47,098
2018 TSB had a problem where 1.9

89
00:05:47,184 --> 00:05:50,794
million customers couldn't access their accounts. They had no

90
00:05:50,832 --> 00:05:55,054
access to their bank accounts for a month as a result of a

91
00:05:55,252 --> 00:05:59,070
software rollover to a new system. They were exporting their servers from

92
00:05:59,140 --> 00:06:03,730
one place to another, and as a result of

93
00:06:03,880 --> 00:06:07,150
not being willing to roll back, they denied

94
00:06:07,310 --> 00:06:11,086
their customers access. In December 2018,

95
00:06:11,278 --> 00:06:15,010
there was a third party certificate renewal for two,

96
00:06:15,080 --> 00:06:18,614
a cellular provider in the UK, and that resulted in 30

97
00:06:18,652 --> 00:06:22,502
million customers having no access to the cell phone network for

98
00:06:22,556 --> 00:06:26,566
a significant period of time. It was the good part of a working day.

99
00:06:26,748 --> 00:06:29,386
If. If 2020 didn't have enough problems,

100
00:06:29,568 --> 00:06:33,658
July we had Virgin Media where they had 10,000

101
00:06:33,744 --> 00:06:37,626
customer complaints recorded in down detector, and that was

102
00:06:37,648 --> 00:06:40,926
their second outage in two weeks. In the

103
00:06:40,948 --> 00:06:44,094
same month, Facebook sdks came out with

104
00:06:44,132 --> 00:06:46,970
a problem, and that caused Spotify, Pinterest,

105
00:06:47,050 --> 00:06:50,378
Tinder, and a lot of other apps to fail.

106
00:06:50,474 --> 00:06:54,238
In August, Spotify's transport layer security

107
00:06:54,324 --> 00:06:57,890
certificate wasn't up to date. Security certificates are a big problem,

108
00:06:57,960 --> 00:07:01,138
and it's something one of the things you should keep the

109
00:07:01,144 --> 00:07:04,306
finger of the pulse on and one of the biggest ones in

110
00:07:04,328 --> 00:07:07,062
2020, you might have experienced it,

111
00:07:07,116 --> 00:07:10,214
but for an hour, Google's single sign on

112
00:07:10,252 --> 00:07:13,490
went down on December 14,

113
00:07:13,570 --> 00:07:16,674
and people had no access to YouTube, Gmail,

114
00:07:16,722 --> 00:07:21,062
and other Google based services. That was really telling.

115
00:07:21,206 --> 00:07:25,302
While that was going on, it was really interesting to see how they responded

116
00:07:25,446 --> 00:07:29,226
and how they were trying to mitigate the problem and what the

117
00:07:29,328 --> 00:07:32,846
public's access to this information was.

118
00:07:33,028 --> 00:07:36,942
One of the biggest learnings I got from that, that we had as well,

119
00:07:36,996 --> 00:07:40,606
is you don't want to necessarily blame a particular

120
00:07:40,708 --> 00:07:44,094
service. YouTube is down. Gmail is down. When you start seeing

121
00:07:44,132 --> 00:07:47,778
a whole bunch of services not working, maybe it's the sign on or some kind

122
00:07:47,784 --> 00:07:51,138
of authentication layer. We can get to that later.

123
00:07:51,224 --> 00:07:55,274
And then most recently, Signal, which is a messenger

124
00:07:55,342 --> 00:07:59,222
app, suddenly gained popularity because of

125
00:07:59,276 --> 00:08:02,978
WhatsApp's privacy policy changing.

126
00:08:03,074 --> 00:08:06,962
And they were endorsed

127
00:08:07,106 --> 00:08:11,398
by Elon Musk. And the influx of new users

128
00:08:11,494 --> 00:08:15,418
created a problem for them at scale that they struggled for

129
00:08:15,504 --> 00:08:19,066
quite a few days, and they were really good at telling people what

130
00:08:19,088 --> 00:08:22,494
the problems were. Monzo has also been quite good at getting back

131
00:08:22,532 --> 00:08:26,414
to customers and saying, we're sorry, we're down, we're working on the problem. Please have

132
00:08:26,452 --> 00:08:30,154
patience. So it's no doubt that even the biggest

133
00:08:30,202 --> 00:08:33,646
of giants are capable of falling and slipping

134
00:08:33,678 --> 00:08:37,282
up. And how we manage ourselves as

135
00:08:37,336 --> 00:08:40,914
the developers of software and as the

136
00:08:41,032 --> 00:08:44,418
representatives of these companies can make a huge

137
00:08:44,504 --> 00:08:47,542
difference. So you get called out,

138
00:08:47,596 --> 00:08:51,206
it's 03:00 a.m. In the morning. You've just kind

139
00:08:51,228 --> 00:08:54,854
of opened your eyes and what are you going to do?

140
00:08:54,972 --> 00:08:58,646
What is my advice to you? I would say the first thing

141
00:08:58,748 --> 00:09:02,246
to do is to ensure that you have the right goal

142
00:09:02,278 --> 00:09:06,266
in mind. So I call that putting on the right hat in

143
00:09:06,288 --> 00:09:10,314
my day to day job. I'm an Android developer. When I go

144
00:09:10,352 --> 00:09:13,726
in, I have certain tools in mind. I want

145
00:09:13,748 --> 00:09:16,810
to make the app better. I want to improve the infrastructure,

146
00:09:16,890 --> 00:09:20,906
I want to do certain things, and I'll have my sticks

147
00:09:20,938 --> 00:09:24,274
that I want to use as my

148
00:09:24,312 --> 00:09:27,986
particular tools. When going into a production support call,

149
00:09:28,088 --> 00:09:31,726
it is so important that we lose those agendas,

150
00:09:31,838 --> 00:09:35,346
that the goal is to diagnose the problem without

151
00:09:35,448 --> 00:09:38,806
necessarily laying blame on any individual. We want to

152
00:09:38,828 --> 00:09:42,562
delegate in terms of making sure that we've communicated

153
00:09:42,626 --> 00:09:45,798
with the right groups of people, and we want to make sure that

154
00:09:45,884 --> 00:09:49,418
the decision we make is the best one we can

155
00:09:49,584 --> 00:09:52,266
given where we are at that point in time.

156
00:09:52,368 --> 00:09:56,346
It's so relevant to point out that production support

157
00:09:56,448 --> 00:10:00,666
is mostly a communicative and collaborative effort.

158
00:10:00,778 --> 00:10:04,714
What happens during a call out will affect others perceptions

159
00:10:04,762 --> 00:10:07,994
of you. This is personally, professionally and externally

160
00:10:08,042 --> 00:10:11,294
as a company, and behavior is so important to

161
00:10:11,332 --> 00:10:15,282
your reputation. You want to ensure that these

162
00:10:15,336 --> 00:10:19,710
elements are always maintained, the perceptions and your reputation.

163
00:10:19,870 --> 00:10:23,026
When software fails, it doesn't matter who's to

164
00:10:23,048 --> 00:10:26,966
blame. The fact is, there is a problem. Blaming will

165
00:10:26,988 --> 00:10:31,026
only get you so far. Understanding will get you so much further.

166
00:10:31,138 --> 00:10:35,046
And so when it fails, we want to

167
00:10:35,068 --> 00:10:38,230
make sure that we discover what's broken and

168
00:10:38,300 --> 00:10:41,050
we take the time to fix it properly.

169
00:10:42,350 --> 00:10:45,754
It's really telling during that two outage that they were

170
00:10:45,792 --> 00:10:49,466
so quick to point out that their third party provider didn't renew a

171
00:10:49,488 --> 00:10:53,014
certificate. And it's really unfortunate

172
00:10:53,062 --> 00:10:56,974
because they really laid the blame quite hard on Ericsson. And it's an

173
00:10:57,012 --> 00:11:00,862
understandable error. Some people just don't have that, and they weren't thinking

174
00:11:00,916 --> 00:11:04,346
about that. You set the security, the certificate to expire

175
00:11:04,378 --> 00:11:07,634
in ten years, and you don't write it down or have a system to create

176
00:11:07,672 --> 00:11:11,746
a reminder. It's an understandable error. One of the things that

177
00:11:11,848 --> 00:11:15,346
happened to me is we had

178
00:11:15,368 --> 00:11:19,394
an issue where the hardware secure module had failed

179
00:11:19,442 --> 00:11:23,190
and they needed to drive out a new component to the data center.

180
00:11:23,340 --> 00:11:26,882
And while this was going on, we had to put all our load

181
00:11:26,946 --> 00:11:31,122
onto one particular server. So our load balancers weren't

182
00:11:31,186 --> 00:11:34,778
really operational, and we had to keep quite a tight finger on the

183
00:11:34,784 --> 00:11:37,530
pulse of our system. We had to baby it and look after it.

184
00:11:37,600 --> 00:11:41,198
And thankfully, others were two of us on call at that time.

185
00:11:41,364 --> 00:11:44,542
What ended up happening was we had one

186
00:11:44,596 --> 00:11:48,138
person on monitoring and one person on communication.

187
00:11:48,314 --> 00:11:51,886
And deciding on those roles early was so important

188
00:11:51,988 --> 00:11:55,566
because we were the people who were involved on the front end. And when apps

189
00:11:55,598 --> 00:11:58,994
fail, the front end gets blamed. And so having

190
00:11:59,032 --> 00:12:02,290
someone who was monitoring the front end and ensuring things were still working,

191
00:12:02,360 --> 00:12:06,138
doing diagnosis, checking everything, and not having to worry

192
00:12:06,174 --> 00:12:10,114
about the communication element was really, really important. We decided

193
00:12:10,162 --> 00:12:14,086
on whose role was who was doing what, and it was

194
00:12:14,188 --> 00:12:17,286
really effective because when all those requests were

195
00:12:17,308 --> 00:12:21,418
coming in, we had so many requests from WhatsApp, from email,

196
00:12:21,504 --> 00:12:25,686
from an internal communication tool, from slack, from teams everywhere.

197
00:12:25,878 --> 00:12:29,466
It just seemed to be coming from everywhere and piling on us. But one person

198
00:12:29,568 --> 00:12:33,034
focusing on communication meant that that was your job, and one

199
00:12:33,072 --> 00:12:36,286
person focusing on diagnosis and fixing that was

200
00:12:36,308 --> 00:12:39,806
their job. And defining roles early and quickly was one of the

201
00:12:39,828 --> 00:12:43,242
best things we could have done. In another incident that we had. Once the sales

202
00:12:43,316 --> 00:12:46,674
team called me from an international client and I had to run

203
00:12:46,712 --> 00:12:50,606
out and sort and source a Bluetooth

204
00:12:50,638 --> 00:12:53,982
low energy printer for a system we were developing.

205
00:12:54,126 --> 00:12:57,674
And so right at that point in time, my goal

206
00:12:57,742 --> 00:13:01,046
was not only to get something out that could work and do

207
00:13:01,068 --> 00:13:04,786
the job, but I had to actually go and find a supplier

208
00:13:04,978 --> 00:13:08,886
that was a really interesting one to have to actually go and source

209
00:13:08,918 --> 00:13:10,540
hardware years.

210
00:13:12,750 --> 00:13:17,354
The real point is just define your role and know in

211
00:13:17,392 --> 00:13:20,906
that case, what you're going to do. Sometimes the best way to

212
00:13:20,928 --> 00:13:24,686
do that is to ask questions. I think questions are one of the

213
00:13:24,708 --> 00:13:28,574
most effective ways of guiding a conversation and

214
00:13:28,612 --> 00:13:32,462
taking control of a situation. When we know how to wield our

215
00:13:32,516 --> 00:13:36,002
questions in a proper way, I think we can use

216
00:13:36,056 --> 00:13:39,202
questions so nicely when trying

217
00:13:39,256 --> 00:13:42,818
to understand rather than trying to point out a particular system.

218
00:13:42,904 --> 00:13:46,498
And again, this goes back to agendas. I trust believe

219
00:13:46,584 --> 00:13:50,562
that one particular component needs to be rewritten.

220
00:13:50,626 --> 00:13:53,574
And I go in and when I get a call out, I say, it's that

221
00:13:53,612 --> 00:13:57,014
component, it's doing it again. And you just want to take your

222
00:13:57,052 --> 00:14:00,698
agenda and drive it home, whereas you might actually be wrong.

223
00:14:00,784 --> 00:14:04,890
And when you're wrong and you're making a hard statement like this

224
00:14:04,960 --> 00:14:08,774
component is the problem, you are developing a reputation

225
00:14:08,822 --> 00:14:12,430
of someone who can't be relied on in a crisis. And by

226
00:14:12,500 --> 00:14:15,886
rather asking questions, we can get to

227
00:14:15,908 --> 00:14:19,600
a point where we're learning and suggesting without

228
00:14:19,970 --> 00:14:23,070
developing a negative reputation around ourselves.

229
00:14:23,490 --> 00:14:27,050
One of the best questions that I used to

230
00:14:27,060 --> 00:14:30,706
ask was, could it be this component? And then someone would come along and

231
00:14:30,728 --> 00:14:34,450
say, no, it can't be that one, because we see this issue here.

232
00:14:34,520 --> 00:14:38,082
And so not only do I learn that my stuff isn't working,

233
00:14:38,136 --> 00:14:41,494
but that someone else's stuff isn't working. And so we know now we know

234
00:14:41,532 --> 00:14:44,374
as a result to look higher up in the chain or to look at different

235
00:14:44,412 --> 00:14:48,122
ones that might be related to that, and see how do we

236
00:14:48,256 --> 00:14:51,482
tease out this web of

237
00:14:51,536 --> 00:14:54,314
problems? By using effective questions,

238
00:14:54,512 --> 00:14:58,506
which also tends to the point of don't cry wolf unless you're absolutely

239
00:14:58,608 --> 00:15:02,122
sure, because it's going to distract your team. So often

240
00:15:02,256 --> 00:15:05,838
qas and testers will tell me, to reproduce a problem,

241
00:15:05,924 --> 00:15:09,326
you need to click here and then push back, and then you'll see the issue.

242
00:15:09,428 --> 00:15:13,070
And I found that I really need to ask a lot of questions

243
00:15:13,140 --> 00:15:16,686
around that, just that kind of action, clicking on a

244
00:15:16,708 --> 00:15:20,514
button and then pushing back. When I navigate to the next screen, do I wait

245
00:15:20,552 --> 00:15:23,726
for the next screen to finish loading before I push back, or do I push

246
00:15:23,758 --> 00:15:27,498
back while it's loading? And a lot of times qas just assume,

247
00:15:27,614 --> 00:15:31,286
or testers or even developers will assume that you know

248
00:15:31,308 --> 00:15:34,850
what they're talking about. But I'm not seeing what you're seeing necessarily.

249
00:15:34,930 --> 00:15:38,726
And questions are such a great way to guide that conversation,

250
00:15:38,838 --> 00:15:42,730
because even in software, there's such a big

251
00:15:42,800 --> 00:15:46,506
disparity between what people mean when they say certain terms.

252
00:15:46,608 --> 00:15:50,446
Certain terms carry with them different aspects for different people.

253
00:15:50,548 --> 00:15:53,962
Some people say crash when they might mean an error,

254
00:15:54,026 --> 00:15:57,726
or they might say frozen when they mean a

255
00:15:57,748 --> 00:16:01,070
crash, or they don't understand what lag really

256
00:16:01,140 --> 00:16:04,750
is. So defining these terms and asking questions

257
00:16:04,820 --> 00:16:08,194
around their terms, what do you mean? What are you actually seeing? Like, could you

258
00:16:08,232 --> 00:16:11,582
show me these kinds of questions? And an inquisitive

259
00:16:11,646 --> 00:16:15,058
nature and taking an interest in the problem rather than in particular

260
00:16:15,144 --> 00:16:18,550
people or systems, we can start teasing out

261
00:16:18,620 --> 00:16:22,038
exactly what's going on. One of the best questions to ask

262
00:16:22,124 --> 00:16:25,782
is, where did this problem come from? Who's reporting it?

263
00:16:25,916 --> 00:16:29,366
Is it coming from one user who called, one user

264
00:16:29,398 --> 00:16:32,886
who tweeted? Is it coming from our systems

265
00:16:32,918 --> 00:16:37,098
themselves, the diagnostic tools that we've put in place? I find that questions

266
00:16:37,184 --> 00:16:40,322
can be asked because of three great reasons.

267
00:16:40,406 --> 00:16:43,854
One is because the answer is important. We need the answer.

268
00:16:43,972 --> 00:16:47,294
Sometimes we ask questions because asking is important

269
00:16:47,412 --> 00:16:50,654
and people might, in their explanation of

270
00:16:50,692 --> 00:16:54,894
something, realize a component that they need to elaborate

271
00:16:54,942 --> 00:16:58,546
on. Sometimes the process of answering the question

272
00:16:58,648 --> 00:17:02,900
is important. Someone taking you through how they came

273
00:17:03,830 --> 00:17:07,666
to the end result that they've determined can yield the best result.

274
00:17:07,768 --> 00:17:11,702
I think we also need to be so careful that we don't use questions

275
00:17:11,836 --> 00:17:15,526
as a mechanism of intimidation, that we're careful in

276
00:17:15,548 --> 00:17:19,526
the way that we construct it, in the way that we communicate. Because in

277
00:17:19,548 --> 00:17:22,810
these times of stress, it can be so important

278
00:17:22,960 --> 00:17:26,666
to make sure that everyone's our friend. Because when we

279
00:17:26,688 --> 00:17:30,278
need to get information out of people, we want to make sure that we're

280
00:17:30,294 --> 00:17:34,186
getting the best possible results. A few questions that I've

281
00:17:34,218 --> 00:17:37,710
learned to ask is, what actually caused the problem? How are we seeing it?

282
00:17:37,780 --> 00:17:40,954
What are users seeing? How is a user particularly

283
00:17:41,002 --> 00:17:44,530
affected? How do we know that something is wrong? Is it our

284
00:17:44,600 --> 00:17:47,870
system? How will we know when this is fixed?

285
00:17:47,950 --> 00:17:52,674
What is the mechanism by which we

286
00:17:52,712 --> 00:17:56,866
can rightfully say that the problem is actually fixed? Can we determine

287
00:17:56,978 --> 00:18:00,438
how many unique users are affected right now?

288
00:18:00,524 --> 00:18:04,520
Sometimes a problem exists, but it's not affecting anybody.

289
00:18:05,450 --> 00:18:09,030
If someone can't do a particular action

290
00:18:09,950 --> 00:18:13,210
at 03:00 a.m. In the morning, is it really worth

291
00:18:13,280 --> 00:18:17,100
getting six engineers and 20 managers up at that point in time?

292
00:18:17,630 --> 00:18:21,386
What is the best call or the best reaction to the

293
00:18:21,408 --> 00:18:24,750
problem? How long has our system been down? If it's down,

294
00:18:24,820 --> 00:18:29,006
and how do we know what to do to fix the issue?

295
00:18:29,108 --> 00:18:33,014
And then also reflection, how would we do this differently

296
00:18:33,082 --> 00:18:36,162
afterwards? So what I would say then is,

297
00:18:36,296 --> 00:18:40,306
when you get called out, having tools available to

298
00:18:40,328 --> 00:18:44,690
you other than just the ability to ask questions, can be critical.

299
00:18:45,430 --> 00:18:48,966
Before we get called out, we want to know that the

300
00:18:48,988 --> 00:18:52,534
different mechanisms by which we analyze and

301
00:18:52,572 --> 00:18:56,502
look at our system are ready. So when identifying our

302
00:18:56,556 --> 00:19:00,090
source, we want to look at, was it social media? Was it call center

303
00:19:00,160 --> 00:19:01,050
complaints?

304
00:19:04,350 --> 00:19:08,118
Some customer experience might be determined by different devices.

305
00:19:08,214 --> 00:19:11,766
Is it just Android? Is it just iOS? These kinds

306
00:19:11,798 --> 00:19:15,338
of things. Quite often, when a user tells me there's

307
00:19:15,354 --> 00:19:18,814
a problem with Android, it doesn't work. My first question is,

308
00:19:18,852 --> 00:19:22,446
did you try it on iPhone? Because if they haven't tried it on a

309
00:19:22,468 --> 00:19:26,026
different system with a completely different code base, we can't

310
00:19:26,058 --> 00:19:29,086
be sure whether it was the back end or the front end that's failing.

311
00:19:29,118 --> 00:19:33,170
That is one of the easiest ways to distinguish that there's a problem

312
00:19:33,240 --> 00:19:36,886
on a particular platform. Did you try it on web? Do we use

313
00:19:36,908 --> 00:19:40,694
the same back end for web? That kind of thing. Sometimes we

314
00:19:40,732 --> 00:19:44,662
can look at how our historic baselines were

315
00:19:44,716 --> 00:19:48,114
working. So when we compare our baseline

316
00:19:48,242 --> 00:19:52,022
this month to last month, we can see, oh, this is just an anomaly,

317
00:19:52,086 --> 00:19:55,130
or, oh, this is occurring every time payday hits,

318
00:19:55,710 --> 00:20:00,490
sometimes Christmas and New Year's quite often result

319
00:20:00,560 --> 00:20:04,554
in spikes because people are bored or something like

320
00:20:04,592 --> 00:20:08,286
that. Excuse me. So we want to be careful that our

321
00:20:08,308 --> 00:20:11,726
tools are capable, that our tools are correct,

322
00:20:11,828 --> 00:20:15,250
and that we look at it from a number of angles.

323
00:20:16,550 --> 00:20:20,066
So ensure that you have access and

324
00:20:20,088 --> 00:20:23,234
that you know how to get access if you need it.

325
00:20:23,432 --> 00:20:27,062
We've had an issue in the past where one

326
00:20:27,116 --> 00:20:31,282
person was the only one who had the password

327
00:20:31,346 --> 00:20:35,174
to gain access to a production feature. And so every time

328
00:20:35,212 --> 00:20:38,758
there was a problem that may have involved that feature, whether it

329
00:20:38,764 --> 00:20:41,818
was that feature or not. We needed to call them out so that they

330
00:20:41,824 --> 00:20:45,274
could log in and check, and that just very quickly we

331
00:20:45,312 --> 00:20:48,794
resolved that, because we can't rely on one person,

332
00:20:48,912 --> 00:20:52,766
and we also need to make sure that access is maintained. So you

333
00:20:52,788 --> 00:20:57,210
don't want to have a situation where the policy says that passwords automatically

334
00:20:57,290 --> 00:21:00,798
or user accounts automatically dissolve after

335
00:21:00,964 --> 00:21:04,350
three months, because that's your security policy. What you want

336
00:21:04,420 --> 00:21:07,794
is when that a few days before that access is

337
00:21:07,832 --> 00:21:11,602
revoked, they get an email. Their line manager gets an email, and people

338
00:21:11,656 --> 00:21:15,346
are aware, and the team gets an email, that people are aware that

339
00:21:15,448 --> 00:21:19,474
access is changing and how to regain access. We had a particularly

340
00:21:19,522 --> 00:21:23,254
complex tool in one of my previous clients that it was

341
00:21:23,292 --> 00:21:27,094
so complex, and the terminology around getting access was

342
00:21:27,132 --> 00:21:31,034
so confusing, we actually lost track of what we

343
00:21:31,072 --> 00:21:34,666
needed to know to get access to that component. And so we

344
00:21:34,688 --> 00:21:38,202
had to come around with these runbooks just for getting

345
00:21:38,256 --> 00:21:41,914
access. But runbooks are an essential part. You'll never escape

346
00:21:41,962 --> 00:21:45,550
runbooks if you want to do production support

347
00:21:45,620 --> 00:21:49,386
successfully. I cannot express how important runbooks

348
00:21:49,418 --> 00:21:52,974
are. We used to order our runbooks by

349
00:21:53,012 --> 00:21:56,782
feature and ensure that all of our runbooks contained

350
00:21:56,846 --> 00:21:59,630
the core team responsible for that delivery.

351
00:21:59,710 --> 00:22:03,586
So we knew not who to blame, but who we could ask.

352
00:22:03,768 --> 00:22:07,686
Who can we ask our effective questions to in

353
00:22:07,708 --> 00:22:11,814
order to gain a proper understanding of that particular feature? We also had

354
00:22:11,852 --> 00:22:15,446
emergency contact information. So when something falls over

355
00:22:15,548 --> 00:22:19,254
in that area, others was a mechanism, maybe not

356
00:22:19,292 --> 00:22:22,682
a particular person, but a mechanism by which we could go and

357
00:22:22,736 --> 00:22:25,786
access someone that could give us the information we

358
00:22:25,808 --> 00:22:29,210
needed. We also included in our runbooks a status report

359
00:22:29,280 --> 00:22:32,554
link so we could go into from our runbooks. We could click

360
00:22:32,592 --> 00:22:36,094
a link and go into a reporting tool that would give us as much as

361
00:22:36,132 --> 00:22:39,390
possible to try and understand what that feature was doing.

362
00:22:39,460 --> 00:22:43,146
We also included an architecture diagram, and architecture diagrams

363
00:22:43,178 --> 00:22:46,626
were really useful in identifying dependencies and

364
00:22:46,648 --> 00:22:49,986
how dependencies relate within that system or feature, so that if

365
00:22:50,008 --> 00:22:53,534
there were multiple features failing and they all had an element

366
00:22:53,582 --> 00:22:57,746
in common in the architecture, we were capable of communicating

367
00:22:57,858 --> 00:23:01,042
with people. And the Google incident

368
00:23:01,106 --> 00:23:04,566
is so good about that, because that's not the

369
00:23:04,588 --> 00:23:07,846
first time I've seen a single sign on fail. There have

370
00:23:07,868 --> 00:23:11,494
been other cases where people couldn't access internal systems

371
00:23:11,622 --> 00:23:15,194
that I've seen, and you keep on thinking, oh, what's wrong with YouTube and

372
00:23:15,232 --> 00:23:18,634
Gmail and Google Docs? What is wrong with all these

373
00:23:18,672 --> 00:23:21,886
systems? Why are they failing? And then it turns out it's something on your security

374
00:23:21,988 --> 00:23:25,370
layer that your security keys

375
00:23:25,450 --> 00:23:28,874
aren't up to date, or that element is failing.

376
00:23:28,922 --> 00:23:32,414
We also included a repository link in our runbooks because

377
00:23:32,532 --> 00:23:34,980
having access to the code could help.

378
00:23:35,670 --> 00:23:39,298
I don't recommend trying to learn code base

379
00:23:39,384 --> 00:23:42,978
at 03:00 a.m. In the morning. It's not fun.

380
00:23:43,144 --> 00:23:46,622
But what you could do is you could go and look at

381
00:23:46,776 --> 00:23:50,114
what tests have been written. Is that particular feature tested,

382
00:23:50,162 --> 00:23:53,910
and if not, why? Or maybe make a suggestion

383
00:23:54,330 --> 00:23:57,606
in the washop, which I will recommend later, you could make

384
00:23:57,628 --> 00:24:00,842
a suggestion that teams implement tests so that these

385
00:24:00,896 --> 00:24:05,174
problems don't arise. And having that kind of status involved

386
00:24:05,222 --> 00:24:08,902
in your project beyond just the code is very effective,

387
00:24:08,966 --> 00:24:12,510
or we found very effective. And while reports

388
00:24:13,010 --> 00:24:16,046
can be very useful, I have found that

389
00:24:16,148 --> 00:24:19,886
reports can also give you a very skewed perspective if

390
00:24:19,908 --> 00:24:23,106
you only measure certain elements of that. You want to be

391
00:24:23,128 --> 00:24:27,490
careful with reports that you know how to read in between the lines.

392
00:24:27,990 --> 00:24:31,678
When you look at a report, you can't always determine

393
00:24:31,774 --> 00:24:35,082
exactly a situation. Our biggest request

394
00:24:35,166 --> 00:24:38,566
from management when doing

395
00:24:38,748 --> 00:24:42,294
reports on production incidents were how

396
00:24:42,332 --> 00:24:46,054
many unique users were affected by this problem.

397
00:24:46,172 --> 00:24:50,202
And if your report is just a blanket crash report,

398
00:24:50,336 --> 00:24:53,562
where it shows you this is how many crashes happened

399
00:24:53,616 --> 00:24:57,130
between this time and that time, you cannot assume that that

400
00:24:57,200 --> 00:25:00,894
count is the number of unique users that were

401
00:25:00,932 --> 00:25:04,846
impacted. A lot of times, if someone's doing a sort

402
00:25:04,868 --> 00:25:08,622
of primary feature activity, they might try

403
00:25:08,676 --> 00:25:12,190
several times, and so one person might have five

404
00:25:12,260 --> 00:25:15,826
tries, whereas another person could have tried ten times.

405
00:25:15,928 --> 00:25:19,950
And so the unique number of impacts cannot be measured necessarily

406
00:25:20,030 --> 00:25:23,714
by that. And I would strongly recommend against any

407
00:25:23,752 --> 00:25:26,982
kind of one dimensional reporting. Just having one

408
00:25:27,036 --> 00:25:30,310
report is just not good enough. Knowing how many

409
00:25:30,380 --> 00:25:34,086
sessions were alive during that time, and not

410
00:25:34,108 --> 00:25:37,878
in a way that could uniquely identify your customers,

411
00:25:37,964 --> 00:25:41,610
necessarily, because that might not be possible

412
00:25:41,760 --> 00:25:45,146
given your environment. If you're in a financial institution, you want to be

413
00:25:45,168 --> 00:25:48,746
very careful that your reports cannot uniquely identify people and

414
00:25:48,768 --> 00:25:52,640
accounts. You want to keep that separate from your development team.

415
00:25:53,410 --> 00:25:56,682
Never let the development team have access to your production

416
00:25:56,746 --> 00:26:00,606
financial server. The problems there are

417
00:26:00,628 --> 00:26:03,826
just unending. You want to be able to identify a

418
00:26:03,848 --> 00:26:07,266
problem for the right reason, and I would

419
00:26:07,288 --> 00:26:10,914
strongly recommend for all of this.

420
00:26:10,952 --> 00:26:14,814
Management is having one communication

421
00:26:14,862 --> 00:26:18,614
tool. Communication, like I've said before, is going to be

422
00:26:18,652 --> 00:26:21,810
your biggest asset, but it can also be your biggest

423
00:26:21,890 --> 00:26:24,230
detractor. In a support incident.

424
00:26:24,730 --> 00:26:28,054
I already spoke about the time where a

425
00:26:28,092 --> 00:26:31,594
colleague and I determined to have different roles, where one was working

426
00:26:31,632 --> 00:26:35,174
on the system itself and one was just managing communication,

427
00:26:35,302 --> 00:26:39,402
because we had all these different mechanisms, and especially

428
00:26:39,536 --> 00:26:42,894
now in the world we live in, others are so many things that

429
00:26:42,932 --> 00:26:46,574
can ping you. I think a lot of us

430
00:26:46,612 --> 00:26:50,490
are just so tired of things pinging at us. Where you've got Skype,

431
00:26:50,570 --> 00:26:53,370
WhatsApp teams,

432
00:26:53,530 --> 00:26:57,346
emails, texts. Determining one tool

433
00:26:57,448 --> 00:27:00,594
that you're going to communicate with will really help

434
00:27:00,632 --> 00:27:04,414
you focus in on the problem and effectively communicating

435
00:27:04,462 --> 00:27:08,150
that need to management is a skill in and of itself.

436
00:27:08,300 --> 00:27:12,738
I remember there was one problem that we had with internationalization

437
00:27:12,914 --> 00:27:16,246
in Android, and I was just trying to fix a

438
00:27:16,268 --> 00:27:21,718
problem with the way that the particular internationalization

439
00:27:21,814 --> 00:27:25,030
worked. And I kept on getting just pinged.

440
00:27:25,110 --> 00:27:28,886
I just want to ask, hey, how's it going? What's going on? Are you nearly

441
00:27:28,918 --> 00:27:32,458
done? And every 2 seconds I got this ping and I

442
00:27:32,464 --> 00:27:35,946
had to tell them, I'm busy working on a solution.

443
00:27:36,138 --> 00:27:39,470
I cannot be disturbed. But I also don't want to ignore you,

444
00:27:39,540 --> 00:27:43,226
so I'm not sure what to do. Can I tell you when I'm

445
00:27:43,258 --> 00:27:46,866
done? And eventually I set my status saying, working on

446
00:27:46,888 --> 00:27:50,482
this issue, please don't ping me. And I put a little warning light

447
00:27:50,536 --> 00:27:53,940
on it. And that really helped another time that

448
00:27:54,310 --> 00:27:57,746
we had a really being issue with, people were saying there was a problem

449
00:27:57,768 --> 00:28:01,686
with Android only, and it turned out that it was an IP six issue.

450
00:28:01,788 --> 00:28:05,394
So something to do with the way that one of the networks,

451
00:28:05,442 --> 00:28:09,298
a very popular UK network, was managing IP six packets

452
00:28:09,394 --> 00:28:13,114
caused a massive packet loss. And the only way we

453
00:28:13,152 --> 00:28:16,746
actually determined there was a problem with that because we

454
00:28:16,768 --> 00:28:20,426
couldn't see it on the production apps we were running, and even some

455
00:28:20,448 --> 00:28:23,854
of our qas and testers on different networks couldn't see it.

456
00:28:23,892 --> 00:28:27,658
And eventually someone who was a customer of that network

457
00:28:27,754 --> 00:28:31,406
realized that the problem was with the network or the

458
00:28:31,428 --> 00:28:34,660
service provider that our customers were using as well.

459
00:28:35,830 --> 00:28:38,738
The result of realizing that kind of problem,

460
00:28:38,824 --> 00:28:42,414
which was a really great collaborative effort and a communication

461
00:28:42,462 --> 00:28:46,318
effort, understanding that that was the issue, we managed to create a

462
00:28:46,344 --> 00:28:49,702
tool and a report as a result that showed us

463
00:28:49,836 --> 00:28:53,250
which networks were being used. And then that became

464
00:28:53,330 --> 00:28:56,946
another part of our ecosystem. And that leads

465
00:28:56,978 --> 00:29:00,066
me to my next point, trusting the team in our day to

466
00:29:00,108 --> 00:29:02,730
day development processes.

467
00:29:03,550 --> 00:29:06,842
For me, the way that I work and the way that a lot of people

468
00:29:06,896 --> 00:29:10,598
work is we're given a feature to work on. We write tests,

469
00:29:10,694 --> 00:29:14,942
we write the code, it goes through a code review process, it then gets

470
00:29:15,076 --> 00:29:19,306
merged into a branch, then hopefully

471
00:29:19,338 --> 00:29:22,874
it gets reviewed by a QA, then it merges into the main branch,

472
00:29:22,922 --> 00:29:26,938
then it gets regression tested, then it gets released,

473
00:29:27,034 --> 00:29:30,386
and these processes are quite long winded. This is not something you

474
00:29:30,408 --> 00:29:33,426
could do easily on a production support call out.

475
00:29:33,528 --> 00:29:36,594
And there's a reason why we have these processes in place.

476
00:29:36,712 --> 00:29:40,358
We take it slow because we want to be careful. The reason why we want

477
00:29:40,364 --> 00:29:43,554
to be careful is, again, it boils down to reputation.

478
00:29:43,682 --> 00:29:47,202
I think that especially maybe in a smaller team environment

479
00:29:47,266 --> 00:29:51,382
or one where there's less control, the temptation

480
00:29:51,526 --> 00:29:55,462
is to bypass code review and bypass

481
00:29:55,526 --> 00:29:59,270
testing in the name of an immediate fix. And this kind of reckless

482
00:29:59,350 --> 00:30:03,090
cowboy behavior, while you might get away with it once or twice,

483
00:30:03,190 --> 00:30:06,846
you always run a massive risk. And the risk that

484
00:30:06,868 --> 00:30:10,586
you take on is not just. Not just on your behalf personally,

485
00:30:10,618 --> 00:30:14,226
but when you take a risk like that, you're taking it on behalf of

486
00:30:14,328 --> 00:30:18,162
the entire organization. And while

487
00:30:18,216 --> 00:30:21,842
it might be cool to try and be a superhero, you need to

488
00:30:21,896 --> 00:30:24,786
ensure that you end up being a superhero every time.

489
00:30:24,888 --> 00:30:28,422
And that is a compounding level of risk, because once

490
00:30:28,476 --> 00:30:32,354
you lose that battle, once your reputation

491
00:30:32,402 --> 00:30:36,406
is gone, and you also undermine the entire point of having those

492
00:30:36,428 --> 00:30:40,202
things there in the first place. I remember years ago was one of my first

493
00:30:40,256 --> 00:30:43,526
jobs. I was called out for a production

494
00:30:43,638 --> 00:30:47,306
support incident. I had to drive into the office and sit there,

495
00:30:47,408 --> 00:30:50,966
and I had a number of people kind of standing

496
00:30:50,998 --> 00:30:54,506
over me telling me to release this app. And eventually I

497
00:30:54,528 --> 00:30:57,998
had a fix in place, and I said, but wait, we need to do a

498
00:30:58,004 --> 00:31:00,942
code review. And they were like, no, just push it out.

499
00:31:00,996 --> 00:31:04,286
And it's really difficult when you've got

500
00:31:04,308 --> 00:31:06,900
that pressure on you, even from your team,

501
00:31:07,670 --> 00:31:11,282
to say no. And I'm so grateful that I did. I can't say

502
00:31:11,336 --> 00:31:14,798
I think it was just pure luck. It wasn't so much that I'm fantastic,

503
00:31:14,894 --> 00:31:18,506
I'm definitely not. But I was really grateful

504
00:31:18,638 --> 00:31:21,654
that I called another developer, woke them up, and I said,

505
00:31:21,692 --> 00:31:25,218
look, please, just do a code review. I'm getting a lot of pressure.

506
00:31:25,314 --> 00:31:29,138
And thankfully, they were willing, and they spotted an error that could have

507
00:31:29,164 --> 00:31:32,826
caused a massive crash. And we managed to fix the

508
00:31:32,848 --> 00:31:36,490
problem without massive incidents, but it was because

509
00:31:36,560 --> 00:31:40,314
we did it as a team and we trust in the process that was

510
00:31:40,352 --> 00:31:43,482
put in place. And in that particular incident,

511
00:31:43,546 --> 00:31:47,066
yes, we came out with a result where the error

512
00:31:47,098 --> 00:31:50,974
was fixed. But there are also times when you just need to leave

513
00:31:51,012 --> 00:31:54,446
the problem there, that a problem has to remain unresolved

514
00:31:54,478 --> 00:31:57,682
until the team can wake up. If it's not worth

515
00:31:57,816 --> 00:32:01,134
waking up 20 developers, six qas,

516
00:32:01,182 --> 00:32:04,514
and five managers at that particular point in time, you might

517
00:32:04,552 --> 00:32:08,226
have to leave it. This happened to me a

518
00:32:08,248 --> 00:32:11,942
while back where someone wanted to turn a feature off,

519
00:32:11,996 --> 00:32:15,046
and I said, look, in order to do that, we have to take the whole

520
00:32:15,068 --> 00:32:18,074
app down. That means production goes down for everyone,

521
00:32:18,192 --> 00:32:21,834
whereas this particular feature, it was trust,

522
00:32:21,872 --> 00:32:25,574
a contact feature or something like that, it wasn't a primary

523
00:32:25,622 --> 00:32:29,194
functionality feature, it was some esoteric part

524
00:32:29,232 --> 00:32:33,134
of the system. And I said to them, if we do take the app

525
00:32:33,172 --> 00:32:35,920
down, which is a possibility, we affect everyone.

526
00:32:37,010 --> 00:32:40,462
And granted, this problem is not going to happen,

527
00:32:40,596 --> 00:32:43,646
but then we're not going to make money. And I had to put

528
00:32:43,668 --> 00:32:47,614
it in those terms. Unfortunately, that particular person decided

529
00:32:47,662 --> 00:32:50,446
to go over my head, which is perfectly reasonable.

530
00:32:50,638 --> 00:32:53,902
I was speaking from a logical perspective as a developer.

531
00:32:53,966 --> 00:32:57,886
They went over my head to another manager, who unfortunately wasn't

532
00:32:57,918 --> 00:33:01,622
Tools receptive to being woken up at 02:00 a.m. And they said,

533
00:33:01,676 --> 00:33:04,982
yeah, I'd rather leave others or there and deal with it later.

534
00:33:05,036 --> 00:33:08,326
But at least as a team, I made a decision. I stuck to my

535
00:33:08,348 --> 00:33:11,522
guns and thankfully I was corroborated.

536
00:33:11,586 --> 00:33:13,926
And if they had said, no, we need to fix it, we need to wake

537
00:33:13,958 --> 00:33:17,386
everybody up, I would have been happy to do that the same, but at

538
00:33:17,408 --> 00:33:20,970
least it was a discussion that happened. And also, again,

539
00:33:21,040 --> 00:33:24,698
not blaming anyone. People don't want errors.

540
00:33:24,794 --> 00:33:28,206
I remember there was a particular problem in

541
00:33:28,228 --> 00:33:31,338
an app, and this was one of the first apps I wrote.

542
00:33:31,354 --> 00:33:34,382
There was a spelling mistake, and in my mind

543
00:33:34,436 --> 00:33:37,666
the client was taking too long to fix the spelling mistake. And so I

544
00:33:37,688 --> 00:33:41,266
released a new version with that spelling mistake in there. And I felt absolutely

545
00:33:41,368 --> 00:33:45,154
terrible because I realized that I had taken that step of

546
00:33:45,192 --> 00:33:48,930
trying to be a hero, not trusting the team, not trusting management.

547
00:33:49,010 --> 00:33:52,438
And thankfully, my company was very gracious with me and

548
00:33:52,444 --> 00:33:56,386
they were very kind on that behalf. And I'm

549
00:33:56,418 --> 00:33:59,814
glad I had that small experience where it was a brush with failure

550
00:33:59,862 --> 00:34:03,930
rather than an actual failure. But it's something important to keep in mind

551
00:34:04,000 --> 00:34:07,642
that you don't want to be in that situation. And that

552
00:34:07,696 --> 00:34:11,822
leads me to my next point, which is to take down

553
00:34:11,876 --> 00:34:15,598
time. I think it's so important that we best,

554
00:34:15,764 --> 00:34:19,486
especially as people who are willing to get up

555
00:34:19,588 --> 00:34:23,054
at all hours in the morning in order to satisfy clients and

556
00:34:23,172 --> 00:34:27,042
keep the company going, because I think it shows that we value

557
00:34:27,176 --> 00:34:31,218
what we do, not to the point of just writing beautiful code

558
00:34:31,304 --> 00:34:34,850
or producing something worthwhile, but supporting the people

559
00:34:34,920 --> 00:34:38,998
who use our application. And we need to be really sure

560
00:34:39,084 --> 00:34:42,466
that we take time to look after ourselves. No one's

561
00:34:42,498 --> 00:34:46,678
going to offer to look after you. And I think it's so good

562
00:34:46,764 --> 00:34:50,346
to be able to take a step back and say, at the end of a

563
00:34:50,368 --> 00:34:53,994
call, I'm going to be coming in

564
00:34:54,032 --> 00:34:57,978
later because I need to rest and being able to say,

565
00:34:58,064 --> 00:35:01,238
I'm going to take a day off now because of this, and discussing

566
00:35:01,254 --> 00:35:04,750
this with people, create a discussion around it and agree on

567
00:35:04,900 --> 00:35:08,666
what will happen. You don't want to be the only person that people can rely

568
00:35:08,698 --> 00:35:12,666
on. You want to create very, very distinct boundaries of what you're prepared

569
00:35:12,698 --> 00:35:15,870
to do and what you're not prepared to do. Without communicating,

570
00:35:15,950 --> 00:35:19,214
we're not going to get anywhere. Those boundaries need to be effectively

571
00:35:19,262 --> 00:35:23,342
communicated, especially when it comes to taking time off, getting renumeration

572
00:35:23,406 --> 00:35:26,450
for perhaps extra work done, or being allowed

573
00:35:26,530 --> 00:35:30,418
to take time in lieu. These things are all part of a communication aspect,

574
00:35:30,514 --> 00:35:34,038
and I strongly recommend that that communication is done

575
00:35:34,124 --> 00:35:37,080
in writing before an incident happens,

576
00:35:37,530 --> 00:35:40,682
and know the sacrifice that you're going to make.

577
00:35:40,816 --> 00:35:44,186
Some people will get an offer for just extra money,

578
00:35:44,288 --> 00:35:48,602
and they think that that's a fantastic outcome of doing

579
00:35:48,656 --> 00:35:52,430
production support. And it can be, but knowing that

580
00:35:52,500 --> 00:35:56,202
you are preparing yourself to be on edge while sleeping.

581
00:35:56,346 --> 00:36:00,046
I was so scared of being on production support.

582
00:36:00,148 --> 00:36:03,326
Sometimes. There were sometimes when a new feature had just

583
00:36:03,348 --> 00:36:06,914
come out, people were going to use it a lot. And I would

584
00:36:06,952 --> 00:36:10,722
lie in bed, literally with one eye open and

585
00:36:10,776 --> 00:36:14,130
not being able to sleep. Nothing would happen. And then I can't take

586
00:36:14,200 --> 00:36:17,794
time off because I was just on call. I was just on call,

587
00:36:17,832 --> 00:36:21,874
but I never actually got called out. So understanding that we're making a sacrifice

588
00:36:21,922 --> 00:36:25,654
of sleep, of time, and that is the money worth

589
00:36:25,692 --> 00:36:29,434
it, is a question we really have to ask ourselves. And so for some

590
00:36:29,472 --> 00:36:32,554
final thoughts, I think one of the things I

591
00:36:32,592 --> 00:36:36,390
would really encourage is doing wash ups.

592
00:36:36,470 --> 00:36:40,826
And what I mean by a washop is taking a scientific view

593
00:36:40,928 --> 00:36:44,094
of what happened. After something's happened

594
00:36:44,132 --> 00:36:47,742
and you've taken your rest. You come in the next day and

595
00:36:47,876 --> 00:36:51,454
you talk to your team and you explain what happened,

596
00:36:51,572 --> 00:36:54,702
who you were speaking to, what you think the cause was,

597
00:36:54,756 --> 00:36:58,034
who was affected, how you resolved it, or how

598
00:36:58,072 --> 00:37:01,938
you came to your delegation and what decision ended up being made

599
00:37:02,024 --> 00:37:05,634
and who made that decision, whether you were the one who made the decision or

600
00:37:05,672 --> 00:37:09,446
whether someone else did. Quite often I would get

601
00:37:09,468 --> 00:37:12,966
a call out just from our internal systems, and I would look

602
00:37:12,988 --> 00:37:16,598
at it and I'd be like, oh, this was the garbage collector going crazy.

603
00:37:16,764 --> 00:37:20,034
We know about this problem. It's an existing issue. It's a blip.

604
00:37:20,082 --> 00:37:22,854
It's at 03:00 in the morning, so not a lot of users are effective.

605
00:37:22,902 --> 00:37:27,114
I'd put that on our slack board and then I'd go back to bed because

606
00:37:27,312 --> 00:37:30,874
the system had already corrected itself. But having those

607
00:37:30,912 --> 00:37:34,714
wash ups is so important, it allows you to communicate

608
00:37:34,762 --> 00:37:38,286
that you understood the problem. It shows an interest in

609
00:37:38,308 --> 00:37:42,382
your system. It is a way to teach other people to do production support

610
00:37:42,436 --> 00:37:46,050
themselves, and to show them that what systems they have access to.

611
00:37:46,120 --> 00:37:49,566
And this is what encourages learning and correction

612
00:37:49,598 --> 00:37:53,406
for the future. So yeah, please, for the sake

613
00:37:53,438 --> 00:37:57,414
of your own sanity, do a wash up afterwards. I think it's also

614
00:37:57,452 --> 00:38:01,094
really important to check your merging and release strategy. Some people just

615
00:38:01,132 --> 00:38:04,614
merge straight into their main branch without thinking,

616
00:38:04,812 --> 00:38:08,554
or they don't create proper release notes. And this can be

617
00:38:08,592 --> 00:38:12,934
particularly dangerous when code is just thrust

618
00:38:12,982 --> 00:38:16,966
into the main branch, and then your releases are branched

619
00:38:17,158 --> 00:38:21,286
off of your main branch. Quite often you can end up releasing features

620
00:38:21,318 --> 00:38:25,386
you weren't intending to, even if they're not turned on and users wouldn't

621
00:38:25,418 --> 00:38:28,686
see them. You want to be careful of what's going out there and how it

622
00:38:28,708 --> 00:38:32,286
might impact other systems. We've seen this in particular with

623
00:38:32,308 --> 00:38:35,554
cross platform systems, where a feature gets released for

624
00:38:35,592 --> 00:38:39,074
one platform but not the other, and then

625
00:38:39,272 --> 00:38:42,740
there's some kind of issue between that. And also

626
00:38:43,430 --> 00:38:47,314
having release notes can be very telling. If you've

627
00:38:47,362 --> 00:38:50,834
just released an app and now there's a problem, those release notes

628
00:38:50,882 --> 00:38:54,434
are gold at really weird

629
00:38:54,482 --> 00:38:58,234
times when you have to be looking at why a particular system

630
00:38:58,272 --> 00:39:02,330
has failed, and knowing what branch was merged into

631
00:39:02,400 --> 00:39:06,230
that particular release can be vital

632
00:39:06,390 --> 00:39:10,378
in ascertaining what a problem was. And the last element that

633
00:39:10,384 --> 00:39:13,882
I'd like to just quickly mention is schedule management.

634
00:39:14,026 --> 00:39:17,790
Having the buddy system employed on your

635
00:39:17,860 --> 00:39:21,486
support team, on your support roster, I think is the best decision you can

636
00:39:21,508 --> 00:39:25,002
make. We used to have a primary and a secondary that would alternate,

637
00:39:25,066 --> 00:39:28,674
and that was really useful because we would know who was

638
00:39:28,712 --> 00:39:32,274
primary, who was taking the main role, who was telling people

639
00:39:32,312 --> 00:39:35,822
what to do, and who was secondary. In terms of if primary

640
00:39:35,886 --> 00:39:39,362
doesn't get called out for whatever reason, they're on the tube,

641
00:39:39,506 --> 00:39:43,046
not that that happens lately, or they're incapacitated for

642
00:39:43,068 --> 00:39:46,374
some reason, or just unavailable, maybe the network's down in their

643
00:39:46,412 --> 00:39:50,366
area, there's a secondary who can come in and help, or if primary

644
00:39:50,418 --> 00:39:53,754
is feeling super overwhelmed, they can call the secondary and say,

645
00:39:53,792 --> 00:39:57,402
hey, I need my buddy, can you jump in? And making

646
00:39:57,456 --> 00:40:00,822
sure that people have access to the numbers they need to call

647
00:40:00,896 --> 00:40:04,446
to the right teams, what to do in

648
00:40:04,468 --> 00:40:07,966
the case where you need to escalate beyond the

649
00:40:07,988 --> 00:40:11,582
secondary. So if you've been called out, like having

650
00:40:11,636 --> 00:40:15,950
it in your calendar, all those vital numbers and contacts

651
00:40:16,030 --> 00:40:19,650
can be so useful, and putting a

652
00:40:19,720 --> 00:40:23,634
special tool in place that is not only accessible to

653
00:40:23,672 --> 00:40:27,574
everyone but that is managing who's doing what

654
00:40:27,612 --> 00:40:30,806
when can be the best idea you can

655
00:40:30,828 --> 00:40:34,594
come up with. Also you want to make sure that you don't overwhelm

656
00:40:34,642 --> 00:40:38,166
developed or any support engineer. You want

657
00:40:38,188 --> 00:40:41,546
to make sure that everybody's taking it in turns and you don't end

658
00:40:41,568 --> 00:40:45,242
up with people being on call for three weeks in a row or being

659
00:40:45,296 --> 00:40:48,742
primary all the time and having those distinctions

660
00:40:48,806 --> 00:40:51,894
and also enabling people to know who's primary,

661
00:40:51,942 --> 00:40:56,026
who's secondary. I'm secondary today. Who's the primary, who's knowing

662
00:40:56,058 --> 00:41:00,062
those roles and who to call in that instance can be super super

663
00:41:00,116 --> 00:41:03,166
useful. So schedule management is not just about having a

664
00:41:03,188 --> 00:41:07,146
calendar in place, it's about connecting, collaborating and communicating

665
00:41:07,258 --> 00:41:10,926
and yeah, so I'd like to thank you for attending this. If you have

666
00:41:10,948 --> 00:41:14,850
any questions please feel free to look me up on GitHub.

667
00:41:14,970 --> 00:41:18,502
And thank you so much for attending this. Please enjoy

668
00:41:18,556 --> 00:41:19,698
the rest of the conference.

