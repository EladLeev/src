1
00:00:17,290 --> 00:00:21,230
Hi everybody, and welcome to this talk. We are going to be

2
00:00:21,300 --> 00:00:24,966
spending some time to think, but how to really improve our

3
00:00:25,028 --> 00:00:28,902
rust code? The talk's title is get maximum benefit from zero

4
00:00:28,956 --> 00:00:32,694
cost abstractions. I'm really going to try to think about

5
00:00:32,812 --> 00:00:37,400
the ways to get the most from rust while

6
00:00:37,950 --> 00:00:41,866
keeping your runtime performance extremely high. One thing

7
00:00:41,888 --> 00:00:45,500
to note, though, is that clone of the talk is actually completely new.

8
00:00:46,430 --> 00:00:50,720
There are some three guide places to look for

9
00:00:51,090 --> 00:00:55,354
some really useful resources after this. One is the API guidelines,

10
00:00:55,482 --> 00:00:59,534
another is the index for Clippy, and then

11
00:00:59,572 --> 00:01:03,490
is a repository idiomatic rust that you can search for.

12
00:01:03,640 --> 00:01:07,950
The API guidelines provide probably hundreds,

13
00:01:08,030 --> 00:01:12,130
at least dozens of really useful and practical

14
00:01:12,550 --> 00:01:17,062
tips for being able to use

15
00:01:17,116 --> 00:01:18,470
trust effectively.

16
00:01:20,170 --> 00:01:24,040
Clippy provides a very

17
00:01:26,730 --> 00:01:30,118
definitely provides hundreds and hundreds of programmatic checks

18
00:01:30,214 --> 00:01:31,580
for your code,

19
00:01:33,470 --> 00:01:36,858
along with explanations in all of them.

20
00:01:36,944 --> 00:01:41,134
So, for example, in this case, we're checking to see whether or not

21
00:01:41,332 --> 00:01:44,858
we are comparing

22
00:01:44,954 --> 00:01:48,430
for known constants that are already defined inside the standard

23
00:01:48,500 --> 00:01:52,534
library. By following Clippy's

24
00:01:52,602 --> 00:01:56,514
recommendations, we actually get much more

25
00:01:56,552 --> 00:02:00,500
closer to our intent with and we

26
00:02:00,870 --> 00:02:03,860
remove bugs from our code. Okay,

27
00:02:05,450 --> 00:02:08,834
so now I've got acknowledgments out of the way. I would also like to define

28
00:02:08,882 --> 00:02:13,190
zero cost magic doesn't actually exist.

29
00:02:13,770 --> 00:02:16,600
We can't get something for nothing.

30
00:02:18,990 --> 00:02:22,950
So zero cost, in the sense of zero cost abstractions

31
00:02:23,030 --> 00:02:26,886
actually means zero additional cost. You couldn't

32
00:02:26,918 --> 00:02:29,180
have written something better yourself.

33
00:02:31,490 --> 00:02:34,686
Possibly a more technically precise way to express this would

34
00:02:34,708 --> 00:02:36,880
be to say zero marginal cost.

35
00:02:39,650 --> 00:02:44,402
Lastly, I want to also point out that zero runtime zero

36
00:02:44,456 --> 00:02:48,286
cost also relates to runtime performance, and therefore we can trade

37
00:02:48,318 --> 00:02:51,950
off compile time execution

38
00:02:52,110 --> 00:02:55,226
if it will provide us with faster runtime

39
00:02:55,278 --> 00:02:58,566
code. That is, builds can take longer if

40
00:02:58,588 --> 00:03:00,310
the program will run faster.

41
00:03:01,850 --> 00:03:06,038
Okay, let's start off with a couple of very small quick

42
00:03:06,124 --> 00:03:10,166
tips. Some really useful

43
00:03:10,198 --> 00:03:13,466
literals exist in the trust language. One of

44
00:03:13,488 --> 00:03:16,966
them I quite like is the byte literal

45
00:03:17,158 --> 00:03:21,294
for being able to encode ASCII as an

46
00:03:21,332 --> 00:03:24,570
integer as a u eight integer,

47
00:03:24,650 --> 00:03:27,790
rather than as the can or char

48
00:03:27,860 --> 00:03:31,898
type, which takes four bytes. If we prefix

49
00:03:31,994 --> 00:03:35,582
a character literal with a b, we get a

50
00:03:35,636 --> 00:03:39,380
u eight value. Capital a is

51
00:03:40,230 --> 00:03:43,460
the number 65 as u eight value.

52
00:03:44,390 --> 00:03:48,150
There is a similar way for

53
00:03:48,220 --> 00:03:52,342
us to be able to keep two

54
00:03:52,396 --> 00:03:55,462
inject unicode literals, sorry,

55
00:03:55,516 --> 00:03:58,794
unicode. Inside our source code. With the

56
00:03:58,832 --> 00:04:02,426
slash u, we can add in any code point rather than

57
00:04:02,448 --> 00:04:06,730
encoding the actual source literal ourselves.

58
00:04:07,550 --> 00:04:11,514
Okay, so now let's touch on idiomatic trust. We had a look at clippy

59
00:04:11,562 --> 00:04:14,830
before, but what we really want to do

60
00:04:14,980 --> 00:04:18,398
is enable the rest of our team to follow

61
00:04:18,564 --> 00:04:22,234
along with our code. And we do that by maintaining

62
00:04:22,282 --> 00:04:24,450
the conventions of the ecosystem.

63
00:04:25,350 --> 00:04:27,570
Programming is a team sport,

64
00:04:28,870 --> 00:04:32,350
and writing software is easier than reading software.

65
00:04:32,510 --> 00:04:36,246
So by that I mean it's harder to

66
00:04:36,268 --> 00:04:39,810
follow along someone else's mental model or someone else's

67
00:04:39,890 --> 00:04:43,000
thinking when you're just reading the source code.

68
00:04:45,610 --> 00:04:49,306
In trust, I would say that getters and setters are kind of generally not

69
00:04:49,408 --> 00:04:53,366
useful. We have traits for interfaces,

70
00:04:53,478 --> 00:04:57,466
we don't use inheritance, and so therefore the

71
00:04:57,568 --> 00:05:01,246
same benefits, if there were any. I'm not confident that there

72
00:05:01,268 --> 00:05:05,226
were the same benefits of Java style getters and setters

73
00:05:05,338 --> 00:05:08,030
are sort of not available in trust.

74
00:05:11,410 --> 00:05:15,026
Like all rules, or most rules, at least there's an exception. And that

75
00:05:15,048 --> 00:05:19,010
is if you have, let's say a wrapper type that provides

76
00:05:20,390 --> 00:05:24,018
access to one logical thing, a get,

77
00:05:24,104 --> 00:05:27,010
or might be might be useful. So for example,

78
00:05:27,080 --> 00:05:31,078
from the standard library we have these non zero types which provide

79
00:05:31,164 --> 00:05:35,446
access. Two, the raw value and cell

80
00:05:35,548 --> 00:05:38,986
also does a similar thing. They have a get method which

81
00:05:39,088 --> 00:05:40,620
returns the inner type.

82
00:05:42,590 --> 00:05:46,774
Are there other conventions? I've touched on the API guidelines

83
00:05:46,822 --> 00:05:47,900
right at the start,

84
00:05:50,350 --> 00:05:53,886
when you are dealing with conversions of your types, you want to

85
00:05:53,908 --> 00:05:57,262
use the right method. By that I mean either as

86
00:05:57,316 --> 00:06:01,386
or to or into, depending on how you are performing the conversion,

87
00:06:01,578 --> 00:06:05,342
as well as sticking with the conventions

88
00:06:05,406 --> 00:06:09,502
of the ecosystem relating to generating iterators

89
00:06:09,566 --> 00:06:10,930
over some collection.

90
00:06:13,510 --> 00:06:17,590
You should also eagerly implement rates

91
00:06:18,810 --> 00:06:23,654
if your type is able to be

92
00:06:23,692 --> 00:06:27,282
compared for equality with other types. Implement partial

93
00:06:27,346 --> 00:06:31,474
equality. Implement clone where you can, or partial,

94
00:06:31,522 --> 00:06:35,466
or where it's appropriate, because your consumers or

95
00:06:35,488 --> 00:06:39,462
the people that are importing your code cannot

96
00:06:39,526 --> 00:06:42,990
implement those traits themselves. For your type,

97
00:06:43,140 --> 00:06:46,938
it's impossible for them to take a foreign trait

98
00:06:47,034 --> 00:06:50,334
like has and a foreign type. Let's say something

99
00:06:50,372 --> 00:06:54,480
that you've created and implement hash. For that foreign type.

100
00:06:56,230 --> 00:06:59,106
To do so, they would need to create a new type around it and it's

101
00:06:59,128 --> 00:07:02,850
just kind of annoying. So where you can, you should

102
00:07:02,920 --> 00:07:06,406
implement as much as possible. Want to

103
00:07:06,428 --> 00:07:10,130
talk a little bit about actually creating some other practices

104
00:07:10,210 --> 00:07:13,910
which will lend themselves to quality software?

105
00:07:17,920 --> 00:07:21,904
There are linters inside the ecosystem. We've talked

106
00:07:21,942 --> 00:07:25,276
about Clippy before, and to invoke it we use cargo.

107
00:07:25,308 --> 00:07:28,796
Clippy rust format is available via cargo

108
00:07:28,828 --> 00:07:30,640
format inside your crate.

109
00:07:33,560 --> 00:07:37,476
For extra points, you can

110
00:07:37,498 --> 00:07:40,420
make things harder for yourself by adding a pre commit hook.

111
00:07:41,960 --> 00:07:45,784
This will actually you could ask git to

112
00:07:45,822 --> 00:07:49,620
run cargo format on your behalf and fail if their formatting

113
00:07:49,780 --> 00:07:53,732
isn't correct. In fact, you can ask cargo format

114
00:07:53,796 --> 00:07:57,360
to update the code itself potentially,

115
00:07:57,460 --> 00:08:00,590
which might, may or may not be whats you want.

116
00:08:01,760 --> 00:08:03,500
So to set up the hook,

117
00:08:04,800 --> 00:08:08,792
you first create a file called pre commit

118
00:08:08,856 --> 00:08:12,780
or pre commit inside the hooks directory

119
00:08:12,860 --> 00:08:14,960
of your hidden git directory,

120
00:08:16,100 --> 00:08:19,744
make it executable, and then git will invoke it every time you run

121
00:08:19,782 --> 00:08:23,136
git commit. Here's an

122
00:08:23,158 --> 00:08:27,148
example. We need the

123
00:08:27,334 --> 00:08:30,496
hashmap syntax at the start because we didn't provide a file

124
00:08:30,528 --> 00:08:34,148
extension. I like to add a comment saying what this file actually

125
00:08:34,234 --> 00:08:37,640
does, and I've kind of got a cheat available,

126
00:08:37,790 --> 00:08:41,096
which is that if I want to skip any of these checks, I can

127
00:08:41,118 --> 00:08:44,452
just invoke git commit with cheat equals

128
00:08:44,516 --> 00:08:47,896
one, and then the pre

129
00:08:47,918 --> 00:08:52,190
commit will pass. Otherwise I ensure that the formatting is correct.

130
00:08:52,640 --> 00:08:56,376
I run the rust compiler under its check mode,

131
00:08:56,408 --> 00:08:59,944
which is a fast version of the compiler, and then I run Clippy,

132
00:08:59,992 --> 00:09:03,890
which is a more lengthier thing to check.

133
00:09:04,420 --> 00:09:08,108
At first I'm checking formatting, then I'm checking that the code compiles,

134
00:09:08,124 --> 00:09:10,400
and then I'm checking that the code is ergonomic.

135
00:09:11,460 --> 00:09:15,030
If those all pass, I'm allowed to commit my code.

136
00:09:18,130 --> 00:09:23,326
Something else relate, which is a little bit more complex, is when

137
00:09:23,348 --> 00:09:26,778
you define a function and you are taking a

138
00:09:26,804 --> 00:09:30,562
reference to some type, try to remember to

139
00:09:30,616 --> 00:09:34,002
take a reference to the borrowed version of the type rather

140
00:09:34,056 --> 00:09:37,202
than borrowing an own version. So for example,

141
00:09:37,336 --> 00:09:40,786
instead of borrowing a string, we borrow a

142
00:09:40,808 --> 00:09:44,326
string, or we take a string slice as an argument. It'll be easier for your

143
00:09:44,348 --> 00:09:47,986
callers. It turns out, for technical reasons relating to Rust's

144
00:09:48,018 --> 00:09:51,750
dref trait, that if you accept a string slides,

145
00:09:51,830 --> 00:09:56,186
you'll actually enable your callers to call your function with

146
00:09:56,368 --> 00:10:00,010
a reference to a string, because a reference to a string

147
00:10:00,430 --> 00:10:04,462
actually dereferences to an STR

148
00:10:04,596 --> 00:10:08,414
with a lowercase s. So what

149
00:10:08,452 --> 00:10:12,638
we want to do is change this

150
00:10:12,724 --> 00:10:16,562
string, and then all we should

151
00:10:16,616 --> 00:10:19,810
need to be able two do here is just change string into stir,

152
00:10:20,310 --> 00:10:23,582
and then we can now suddenly

153
00:10:23,646 --> 00:10:27,262
call is all caps

154
00:10:27,326 --> 00:10:29,160
with oh, that's not correct,

155
00:10:31,770 --> 00:10:34,886
and we're done. It's not always going to be this

156
00:10:34,908 --> 00:10:38,358
simple. Some other code will

157
00:10:38,364 --> 00:10:42,300
be slightly more complex. The same thing is,

158
00:10:43,630 --> 00:10:47,882
just to be very clear, we want to avoid things like

159
00:10:47,936 --> 00:10:53,382
taking a reference two a box of,

160
00:10:53,536 --> 00:10:54,800
let's say t.

161
00:10:57,920 --> 00:11:01,180
What we shouldn't prefer to say is just take the reference

162
00:11:01,840 --> 00:11:03,470
to a slice of t.

163
00:11:06,640 --> 00:11:10,464
The second form here is going to be easier on your callers and will still

164
00:11:10,502 --> 00:11:14,096
enable people who have boxed the type to

165
00:11:14,118 --> 00:11:18,268
be given access to it. Okay, sorry if that's confused.

166
00:11:18,284 --> 00:11:21,508
Some people let's reduce the cost of

167
00:11:21,514 --> 00:11:24,070
monomorphization. That sounds a bit crazy.

168
00:11:25,160 --> 00:11:29,920
Every specialized function that your code creates

169
00:11:30,000 --> 00:11:32,900
or your compiler creates whenever you use generics,

170
00:11:33,900 --> 00:11:37,140
and instantiate whenever you use generics,

171
00:11:37,220 --> 00:11:40,664
the compiler will generate a specialized version of a

172
00:11:40,702 --> 00:11:44,424
function for all of its input types. This takes up

173
00:11:44,462 --> 00:11:48,092
space. We can actually avoid some of that space by

174
00:11:48,146 --> 00:11:49,660
being a bit sneaky.

175
00:11:53,440 --> 00:11:56,510
Let me show what I mean.

176
00:11:57,700 --> 00:12:01,280
I've got a function here is all caps, which is actually doing exactly

177
00:12:01,350 --> 00:12:04,512
the same thing AWS before, but now we

178
00:12:04,566 --> 00:12:08,396
also want to accept a cow

179
00:12:08,508 --> 00:12:15,456
for whatever reason, just because it's

180
00:12:15,488 --> 00:12:18,804
the type in the standard library. That is the most

181
00:12:18,842 --> 00:12:19,750
fun to say.

182
00:12:22,300 --> 00:12:25,924
Now I've got here a crazy looking generic

183
00:12:25,972 --> 00:12:29,464
type which says that I'll accept a reference to any

184
00:12:29,502 --> 00:12:32,868
t, whether t de references

185
00:12:32,964 --> 00:12:36,656
to str to a string lowercase

186
00:12:36,708 --> 00:12:41,064
s. This will create a new version

187
00:12:41,112 --> 00:12:44,140
of is all caps for all of its input types.

188
00:12:44,640 --> 00:12:49,084
What I'm going to do instead is duplicate

189
00:12:49,132 --> 00:12:53,184
the function two start with and

190
00:12:53,222 --> 00:12:57,040
then change it to change

191
00:12:57,110 --> 00:13:01,092
the one that I want to call to

192
00:13:01,146 --> 00:13:02,580
not being a generic.

193
00:13:05,000 --> 00:13:08,740
And then I'm going to give it an underscore to indicate thats it's private.

194
00:13:10,520 --> 00:13:14,536
And then in the public method, although public

195
00:13:14,638 --> 00:13:22,024
because I'm not using the pub keyword, although I can I

196
00:13:22,062 --> 00:13:25,804
just call is all caps with

197
00:13:25,922 --> 00:13:30,328
the prefix underscore. So now what's triplicated?

198
00:13:30,424 --> 00:13:33,852
Or if I had say a cow and then a string and then a

199
00:13:33,906 --> 00:13:38,172
string slice. Only this smaller fraction

200
00:13:38,236 --> 00:13:42,064
of the code itself is actually triplicated. But there's only

201
00:13:42,102 --> 00:13:46,256
one version of the calling of the function that

202
00:13:46,278 --> 00:13:49,010
ends up being the body of the work.

203
00:13:50,360 --> 00:13:54,340
But there's a trick. We need to ask rust

204
00:13:55,320 --> 00:13:56,950
not to inline the code,

205
00:13:57,560 --> 00:14:00,836
otherwise things code will all get injected to all

206
00:14:00,858 --> 00:14:06,024
of the specific versions of the

207
00:14:06,062 --> 00:14:10,772
code that we want to create. So that's good. Okay, so now we have reduced

208
00:14:10,836 --> 00:14:14,330
the cost of monomorphization, at least the space cost.

209
00:14:17,440 --> 00:14:20,060
Let's talk a little bit about testing.

210
00:14:24,160 --> 00:14:27,516
And I say testing generally because actually what I

211
00:14:27,538 --> 00:14:30,060
really want to speak about is formal methods.

212
00:14:33,060 --> 00:14:37,036
If you have people using your software, you really don't

213
00:14:37,068 --> 00:14:40,796
want that software to break. And formal methods,

214
00:14:40,828 --> 00:14:43,380
including formal verification,

215
00:14:44,520 --> 00:14:48,416
are probably still in the difficult, like in the spectrum

216
00:14:48,448 --> 00:14:52,484
of easy to difficult. They're probably still in the difficult slides, but they are coming

217
00:14:52,602 --> 00:14:56,276
towards easy may

218
00:14:56,298 --> 00:15:00,760
be too strong. They're kind of moving towards learnable.

219
00:15:02,780 --> 00:15:06,376
Modeling involves spending time. So we kind of create a

220
00:15:06,398 --> 00:15:08,910
specification for how we want our program to run.

221
00:15:09,920 --> 00:15:14,120
And then the first step to kind of using modeling

222
00:15:14,200 --> 00:15:17,836
is actually two just write a

223
00:15:17,858 --> 00:15:21,968
document describing how you want the program to work.

224
00:15:22,134 --> 00:15:25,296
This could be called readme driven development. You kind of

225
00:15:25,398 --> 00:15:28,912
write the documentation before the code.

226
00:15:29,046 --> 00:15:32,944
This gives you time to think it through and design your API

227
00:15:33,072 --> 00:15:37,424
without actually having anyone dependent

228
00:15:37,472 --> 00:15:41,124
on your code. There are many ways that

229
00:15:41,162 --> 00:15:45,012
are more advanced than that, including formal verification, other languages,

230
00:15:45,076 --> 00:15:48,920
but writing a document actually

231
00:15:48,990 --> 00:15:53,496
will save you intense amount of debugging time later on. I make

232
00:15:53,518 --> 00:15:57,064
that as a claim without evidence, so if you disagree with that,

233
00:15:57,102 --> 00:15:59,710
please fire up in the comments. That's fine.

234
00:16:00,880 --> 00:16:04,764
I would like to make this claim a form

235
00:16:04,802 --> 00:16:08,552
of testing that's less common than unit tests, but it's still really valuable.

236
00:16:08,616 --> 00:16:12,204
Is this thing called property testing in rust,

237
00:16:12,332 --> 00:16:15,756
the prop test crate provides the ability

238
00:16:15,868 --> 00:16:19,344
for you to test a range of inputs for

239
00:16:19,462 --> 00:16:22,404
functions rather than just one test at a time or,

240
00:16:22,442 --> 00:16:26,384
sorry, a given unit test. Instead of giving it one specific input

241
00:16:26,432 --> 00:16:30,144
and checking its output, you can trust ask for random inputs within code

242
00:16:30,192 --> 00:16:33,460
range. It's actually

243
00:16:33,530 --> 00:16:37,064
very interesting and

244
00:16:37,102 --> 00:16:40,436
quite revealing sometimes about it finds the edge

245
00:16:40,468 --> 00:16:44,056
cases for you. And if you really want to find the

246
00:16:44,078 --> 00:16:48,060
edge cases, then you fuzz your inputs.

247
00:16:48,800 --> 00:16:52,600
A fuzzer is a program which generates random inputs

248
00:16:52,680 --> 00:16:56,264
for your functions. Now this sounds really complicated

249
00:16:56,312 --> 00:17:00,348
and difficult. It turns out though that

250
00:17:00,514 --> 00:17:03,936
fuzzing libraries actually make it relatively easy for you

251
00:17:03,958 --> 00:17:07,280
to just fuzz a specific function of your program.

252
00:17:07,430 --> 00:17:11,564
And you kind of write these test handlers, kind of like these baby

253
00:17:11,612 --> 00:17:14,916
programs thats call one function of your API and

254
00:17:14,938 --> 00:17:18,692
then just kind of give it random input like things thats should

255
00:17:18,746 --> 00:17:22,324
never ever appear in practice and see what breaks. And every time

256
00:17:22,362 --> 00:17:25,864
it breaks your program gets stronger because you

257
00:17:25,902 --> 00:17:28,952
fix the problem. You fix the problem,

258
00:17:29,006 --> 00:17:32,360
right? Okay,

259
00:17:32,430 --> 00:17:36,664
so lastly, maybe not. Lastly, there's actually plenty of slides to go.

260
00:17:36,862 --> 00:17:41,064
The new type pattern is very very handy and is very confusing or alien

261
00:17:41,112 --> 00:17:44,972
to people who come to rust. I've got this problem

262
00:17:45,106 --> 00:17:48,616
and that is we've got two thermometers

263
00:17:48,808 --> 00:17:52,556
reading the temperature and they actually are reading

264
00:17:52,588 --> 00:17:56,224
the same temperature. This is 20 degrees celsius. And turns out

265
00:17:56,262 --> 00:17:59,404
that 20 degrees celsius is also an integer in Fahrenheit,

266
00:17:59,452 --> 00:18:03,268
which is quite fun to know. So what

267
00:18:03,274 --> 00:18:07,344
we really want when we calculate our average temperature is 20 degrees

268
00:18:07,392 --> 00:18:10,544
celsius or 68 degrees

269
00:18:10,592 --> 00:18:13,924
fahrenheit, depending on if

270
00:18:13,962 --> 00:18:17,368
you are one of the one countries I believe that uses Fahrenheit in

271
00:18:17,374 --> 00:18:19,690
the world anyway,

272
00:18:21,340 --> 00:18:24,936
but instead we get 44. Now this is not a problem with

273
00:18:24,958 --> 00:18:28,776
the type system. These are all floating point values. Trust compiler

274
00:18:28,808 --> 00:18:32,076
dozens not care really that you have

275
00:18:32,098 --> 00:18:35,644
made like a logical error. What we do instead is we

276
00:18:35,682 --> 00:18:39,624
wrap f 32 or floating point value in

277
00:18:39,682 --> 00:18:43,280
our unit. Now,

278
00:18:43,350 --> 00:18:47,344
when we go to compare them or add

279
00:18:47,382 --> 00:18:50,876
them together and then divide, the program will fail

280
00:18:50,908 --> 00:18:53,888
to compile. Now, you may be wondering,

281
00:18:54,064 --> 00:18:57,360
is failing to compile really preferable to crashing

282
00:18:57,440 --> 00:19:01,060
or no, is failing to compile really preferable?

283
00:19:01,400 --> 00:19:05,616
And the answer is yes, actually, you don't want things to just silently

284
00:19:05,648 --> 00:19:09,672
work that are broken. Like it's better, two, not have the thing

285
00:19:09,726 --> 00:19:13,624
start than to things for something to fall over half

286
00:19:13,662 --> 00:19:17,032
the way through and even worse, fall over without you being ever

287
00:19:17,086 --> 00:19:20,920
told because you get a valid input, a valid output

288
00:19:21,000 --> 00:19:23,500
when you try to create the average temperature.

289
00:19:28,480 --> 00:19:32,284
One subtle way to improve this even further, even further

290
00:19:32,332 --> 00:19:36,560
is two, say that booleans and options should really

291
00:19:36,630 --> 00:19:39,596
be returned from functions.

292
00:19:39,788 --> 00:19:44,000
Now that's because if you assign this boolean from

293
00:19:44,150 --> 00:19:47,716
this call to is alive or it's a method, I suppose, and you would get

294
00:19:47,738 --> 00:19:51,396
a bool out, it's like true. Further later on in

295
00:19:51,418 --> 00:19:53,430
your code, you now need to wonder,

296
00:19:54,360 --> 00:19:57,770
why do I have a boolean in my code

297
00:19:58,540 --> 00:20:01,956
ten lines later? It kind of becomes a little bit confusing.

298
00:20:02,148 --> 00:20:05,320
You need like a variable that's well named, and if it's not,

299
00:20:05,390 --> 00:20:09,708
then you've just kind of got a crazy variable that you

300
00:20:09,874 --> 00:20:13,630
like. True or false? What does that actually mean? It's hard to know.

301
00:20:14,080 --> 00:20:17,390
It might be you're comparing a quality with something.

302
00:20:18,880 --> 00:20:23,330
So instead we can change

303
00:20:24,020 --> 00:20:27,644
from an is underscore method. So that's a method

304
00:20:27,692 --> 00:20:30,992
that returns a boolean. Instead we

305
00:20:31,046 --> 00:20:34,100
return just our own enum.

306
00:20:35,000 --> 00:20:39,012
And this way it doesn't matter where our variable appears. It's always

307
00:20:39,066 --> 00:20:42,548
going to refer to. It's always going to

308
00:20:42,554 --> 00:20:46,650
be sort of self documentating that it's a

309
00:20:47,740 --> 00:20:51,976
value that encodes the state of

310
00:20:52,158 --> 00:20:56,536
whether or not something is valid or alive or not in itself.

311
00:20:56,638 --> 00:21:00,140
Oh, this is actually a lie. It doesn't have self in there.

312
00:21:00,290 --> 00:21:04,524
Nearly version of this slide actually included type

313
00:21:04,562 --> 00:21:07,660
parameter in lifecycle.

314
00:21:08,240 --> 00:21:12,144
But then I thought that people might get picky and complain that I

315
00:21:12,182 --> 00:21:15,856
also needed to implement clone and so forth, so I should have

316
00:21:15,878 --> 00:21:17,010
fixed that up.

317
00:21:19,380 --> 00:21:23,200
I like market traits. So this is a really

318
00:21:23,270 --> 00:21:27,284
nice part of the type system and

319
00:21:27,322 --> 00:21:30,448
really focuses on this idea of a zero cost abstraction.

320
00:21:30,544 --> 00:21:34,732
And that's partially because I think traits are kind of one of the centerpieces

321
00:21:34,816 --> 00:21:35,800
of rust.

322
00:21:39,680 --> 00:21:43,292
Within the standard library, you get a small set of marker traits like

323
00:21:43,346 --> 00:21:46,824
copy, send, sync, sync, copy,

324
00:21:46,872 --> 00:21:50,304
send, size, synced and unpin that live

325
00:21:50,342 --> 00:21:52,080
within the standard marker module.

326
00:21:53,940 --> 00:21:57,264
And it's hard to read there, but actually at the bottom it's saying

327
00:21:57,302 --> 00:22:01,628
that size is so common that you

328
00:22:01,654 --> 00:22:06,356
actually need to opt out of it in

329
00:22:06,378 --> 00:22:09,908
your own types. So the compiler will always derive size

330
00:22:09,994 --> 00:22:13,940
for you unless you ask it not to explicitly.

331
00:22:14,360 --> 00:22:17,450
The idea behind these types is that they are providing information

332
00:22:17,980 --> 00:22:21,636
to the type system that takes up no internal

333
00:22:21,668 --> 00:22:25,080
representation in the final binary or final executable itself.

334
00:22:25,230 --> 00:22:28,712
So they take up zero space, and they are therefore

335
00:22:28,776 --> 00:22:32,430
zero cost in our definition. From the start of the page

336
00:22:33,280 --> 00:22:37,244
start of the talk, we can get further with zero

337
00:22:37,282 --> 00:22:41,120
cost abstractions. It turns out that using

338
00:22:41,190 --> 00:22:44,224
option wisely, if you are

339
00:22:44,262 --> 00:22:48,128
dealing with references, is super,

340
00:22:48,214 --> 00:22:49,360
super handy.

341
00:22:51,060 --> 00:22:52,550
Stupid thing to say.

342
00:22:54,840 --> 00:22:58,548
If you wrap a reference type that is a

343
00:22:58,714 --> 00:23:02,804
ampersand t or a box t in

344
00:23:02,842 --> 00:23:06,116
option, it takes up no more space in memory.

345
00:23:06,228 --> 00:23:09,880
That's because rust guarantees that

346
00:23:10,030 --> 00:23:13,960
option, sorry, that references which are pointers

347
00:23:14,380 --> 00:23:17,836
are never null. So there's a free bit pattern available that can be

348
00:23:17,858 --> 00:23:19,420
used for pattern matching.

349
00:23:22,710 --> 00:23:26,894
We can make our rust code easier

350
00:23:26,942 --> 00:23:29,570
to use by avoiding a couple of gotchas.

351
00:23:31,450 --> 00:23:35,382
We want to avoid magical typecasting with

352
00:23:35,436 --> 00:23:39,174
draf. So if you remember a couple of slides ago, we talked

353
00:23:39,212 --> 00:23:42,534
about the dereference trait and that we

354
00:23:42,572 --> 00:23:46,426
kind of were able to accept multiple types. So this was a

355
00:23:46,448 --> 00:23:49,450
reference to a string versus a string slides.

356
00:23:50,110 --> 00:23:54,506
And it turns out that you can base this to

357
00:23:54,528 --> 00:23:58,206
create something called draf polymorphism. It's a

358
00:23:58,228 --> 00:24:01,902
known antipattern. Now this is a more

359
00:24:01,956 --> 00:24:05,118
difficult code example,

360
00:24:05,204 --> 00:24:10,626
but let's see if I can show you what the problem is.

361
00:24:10,808 --> 00:24:14,654
Whats I might want to do if I was to come from an object oriented

362
00:24:14,702 --> 00:24:19,502
programming language is to kind of use draf to recreate

363
00:24:19,566 --> 00:24:24,054
inheritance. I've got here a base class with

364
00:24:24,092 --> 00:24:25,510
a greet method,

365
00:24:26,970 --> 00:24:33,666
and then

366
00:24:33,688 --> 00:24:37,778
I have a person class that has inside of it a member

367
00:24:37,874 --> 00:24:41,094
base. And the

368
00:24:41,132 --> 00:24:45,430
Draf implementation for person involves

369
00:24:46,010 --> 00:24:49,980
returning self dot base. So when

370
00:24:50,670 --> 00:24:54,282
the person is dereferenced, it returns this base

371
00:24:54,336 --> 00:24:56,780
class and the base class has an object.

372
00:24:58,750 --> 00:25:01,610
Now if I have a main method,

373
00:25:02,830 --> 00:25:06,554
I can use some sort of one of the magical things

374
00:25:06,592 --> 00:25:09,290
about rust thats is this dot operator.

375
00:25:09,630 --> 00:25:13,630
Implicitly, dereferences on demand will enable

376
00:25:13,710 --> 00:25:17,490
me to call a greet method from Greeter just

377
00:25:17,560 --> 00:25:21,742
by because person has implemented draf,

378
00:25:21,886 --> 00:25:25,706
we do not want to abuse this. It's like a very sharp

379
00:25:25,758 --> 00:25:29,878
edge feature. It will cause problems

380
00:25:30,044 --> 00:25:32,230
and it's going to be very very confusing.

381
00:25:34,410 --> 00:25:36,280
We have two ways out of this.

382
00:25:38,750 --> 00:25:42,010
We can either use a trait. So trait greet

383
00:25:42,590 --> 00:25:46,346
will enable us to say that the person can

384
00:25:46,368 --> 00:25:49,894
implement greet and actually rely on the default

385
00:25:49,942 --> 00:25:53,466
method itself. We don't even need any extra code. And now

386
00:25:53,488 --> 00:25:57,370
we can, we now we can call greet from person. In fact, we've simplified

387
00:25:58,670 --> 00:26:01,846
a bunch of other stuff because we don't need multiple types

388
00:26:01,878 --> 00:26:04,702
and so forth. It alternatively,

389
00:26:04,766 --> 00:26:06,580
if we really want our base class,

390
00:26:10,310 --> 00:26:13,890
if we really wanted to kind of create something which has kind of templated,

391
00:26:14,310 --> 00:26:17,894
we need to write the facade ourselves. So we just

392
00:26:17,932 --> 00:26:21,494
create a greet method and

393
00:26:21,532 --> 00:26:23,640
then we're given access. Two,

394
00:26:25,530 --> 00:26:30,794
the base greet, you see, thats the

395
00:26:30,832 --> 00:26:34,982
person's greet implementation is just dispatched

396
00:26:35,046 --> 00:26:39,306
to the internal class. And now if I have

397
00:26:39,408 --> 00:26:44,860
main greeter

398
00:26:46,020 --> 00:26:49,584
greet does the right thing. It's slightly less

399
00:26:49,622 --> 00:26:52,636
ergonomic than breaking the rules,

400
00:26:52,828 --> 00:26:55,940
but please don't break the rules. It really will cause problems.

401
00:26:56,010 --> 00:27:00,208
I promise to improve

402
00:27:00,224 --> 00:27:04,180
your rust code. You should make it impossible to create

403
00:27:04,250 --> 00:27:07,140
like partially constructed types.

404
00:27:09,320 --> 00:27:12,644
It's really tempting to add like an is valid method or

405
00:27:12,682 --> 00:27:16,790
validate step, but actually doing so will

406
00:27:17,240 --> 00:27:20,684
just create mistakes because people are

407
00:27:20,722 --> 00:27:24,556
lazy and will forget people

408
00:27:24,578 --> 00:27:28,632
are humans. We can actually encode the validation logic

409
00:27:28,696 --> 00:27:32,672
inside our constructors and return result rather

410
00:27:32,726 --> 00:27:33,730
than t.

411
00:27:36,260 --> 00:27:40,768
This is a form of programming called making illegal states

412
00:27:40,934 --> 00:27:44,192
unrepresentable. But in this case,

413
00:27:44,326 --> 00:27:47,568
I have sort of a building and a height. Now the building's

414
00:27:47,584 --> 00:27:49,220
height must be nonzero,

415
00:27:51,080 --> 00:27:54,340
and what I want to avoid is validation.

416
00:27:57,450 --> 00:27:59,580
So in order to get around this,

417
00:28:01,070 --> 00:28:02,940
I have some cheater code.

418
00:28:05,310 --> 00:28:11,422
In the new method. I actually

419
00:28:11,476 --> 00:28:15,246
I'll just copy and paste and I'll go

420
00:28:15,268 --> 00:28:16,430
back a slide.

421
00:28:18,770 --> 00:28:22,254
My new method becomes a we

422
00:28:22,292 --> 00:28:25,298
return result, and if height is nothing,

423
00:28:25,384 --> 00:28:29,380
we return zero height. So I needed an error type in there also,

424
00:28:29,990 --> 00:28:31,940
and otherwise I return. Okay,

425
00:28:32,790 --> 00:28:36,474
this makes it impossible for there ever to be a valid

426
00:28:36,542 --> 00:28:40,294
building object around that has the

427
00:28:40,332 --> 00:28:43,990
illegal type. Now there is a little bit of extra bureaucracy

428
00:28:44,890 --> 00:28:48,466
around because we need kind of a result type and we need an

429
00:28:48,508 --> 00:28:49,500
error type.

430
00:28:51,390 --> 00:28:54,294
By the way, if you have implemented debug,

431
00:28:54,342 --> 00:28:58,170
then you have implicitly implemented error as well, because there's an automatic,

432
00:29:02,770 --> 00:29:06,286
but that is,

433
00:29:06,468 --> 00:29:08,350
and this isn't spelled correctly,

434
00:29:10,130 --> 00:29:13,934
but this will provide us with significantly stronger,

435
00:29:13,982 --> 00:29:15,570
more robust software.

436
00:29:17,750 --> 00:29:20,900
I got a couple of other pieces of advice before we wrap up.

437
00:29:23,270 --> 00:29:26,914
You've probably heard of generics, which is static dispatch,

438
00:29:26,962 --> 00:29:30,514
and trait objects, which dynamic dispatch.

439
00:29:30,642 --> 00:29:34,774
But I'm here to tell you today that there's a third way called

440
00:29:34,812 --> 00:29:38,526
enum dispatch. We create can enum type, which encodes,

441
00:29:38,578 --> 00:29:42,298
which kind of encapsulates all the possible states

442
00:29:42,384 --> 00:29:45,946
or all the morphisms, all the types that

443
00:29:45,968 --> 00:29:50,378
our thing could be, and then we match on it inside

444
00:29:50,464 --> 00:29:53,850
the calling code. The downside is that it becomes

445
00:29:53,930 --> 00:29:57,546
slightly unwieldy to use inside the functions

446
00:29:57,578 --> 00:29:59,790
that make use of this kind of supertype.

447
00:30:01,410 --> 00:30:05,194
You need to match on every single instance of it. Now to make it smoother,

448
00:30:05,242 --> 00:30:08,482
there is a crate called enum dispatch which takes

449
00:30:08,536 --> 00:30:12,146
a lot of that pain away. It's much, much faster. And some of the

450
00:30:12,168 --> 00:30:15,714
benchmarks that this crate provides we're talking about

451
00:30:15,752 --> 00:30:19,542
sort of ten times performance gains even inside

452
00:30:19,596 --> 00:30:22,440
the static dispatch case, which seems kind of crazy.

453
00:30:25,370 --> 00:30:28,810
But I encourage you two take a look

454
00:30:28,880 --> 00:30:32,234
and see if your trait has more

455
00:30:32,272 --> 00:30:36,058
than two or three methods. There's probably

456
00:30:36,144 --> 00:30:38,940
an opportunity for you to refine your design.

457
00:30:40,110 --> 00:30:44,350
There are very few traits inside the rust standard library that

458
00:30:44,420 --> 00:30:47,550
have more than one method that you need to implement.

459
00:30:48,050 --> 00:30:51,630
When they do have multiple traits. Sorry,

460
00:30:51,700 --> 00:30:55,154
multiple methods inside the one trait. A lot of them are

461
00:30:55,192 --> 00:30:59,006
provided via default implementations.

462
00:30:59,198 --> 00:31:03,650
If you have a trait thats is very narrow but

463
00:31:03,720 --> 00:31:08,086
deep, you'll find that it's much easier for your callers to

464
00:31:08,188 --> 00:31:11,766
make use of, versus an API that is kind

465
00:31:11,788 --> 00:31:15,206
of broad but shallow is more specific. It's not

466
00:31:15,228 --> 00:31:18,934
general enough, and you'll find that it's really difficult for

467
00:31:18,972 --> 00:31:22,230
people that are using your trait to make use of.

468
00:31:22,380 --> 00:31:25,986
That's everything that I have for you today. I really hope that you have enjoyed

469
00:31:26,018 --> 00:31:29,206
the talk. Hopefully I've said a few

470
00:31:29,228 --> 00:31:32,714
things that you've agreed with, a few things that are new, and possibly

471
00:31:32,762 --> 00:31:36,462
even a few things that you disagree with. You are very welcome to

472
00:31:36,596 --> 00:31:40,670
say hi in the comments and let's see if we can start a discussion.

473
00:31:41,170 --> 00:31:44,526
Hit me up on Twitter and let's see where we can go.

474
00:31:44,628 --> 00:31:45,182
Take care.

