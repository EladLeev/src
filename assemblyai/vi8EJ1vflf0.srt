1
00:00:24,650 --> 00:00:28,678
Everyone and welcome to Conf 42, cloud native 2022.

2
00:00:28,844 --> 00:00:32,214
I hope you all been having an amazing conference so far.

3
00:00:32,412 --> 00:00:35,846
In this talk we are going to look at the changes that have taken place

4
00:00:35,948 --> 00:00:39,574
in the deployment ecosystem over the last few years

5
00:00:39,692 --> 00:00:43,634
and see how they have affected developers. I'm Arsh

6
00:00:43,682 --> 00:00:47,906
and I work as a devex engineer at Octeto. I'm also an active contributor

7
00:00:47,938 --> 00:00:51,920
to the open source Kubernetes project. So let's get started.

8
00:00:53,090 --> 00:00:56,734
In this talk I want to introduced you to Jane a couple

9
00:00:56,772 --> 00:00:59,966
of years ago. Jane's life was simple and she got to do

10
00:00:59,988 --> 00:01:03,674
what she enjoyed, write code. Most applications

11
00:01:03,722 --> 00:01:07,154
had a monolithic architecture and all she had to do was open up

12
00:01:07,192 --> 00:01:10,734
her favorite code editor, run a command or two, and she'd

13
00:01:10,782 --> 00:01:14,562
have her application up and running. Then she would just write some code,

14
00:01:14,616 --> 00:01:18,438
hit save, and see her changes interacted based on that, submit a

15
00:01:18,444 --> 00:01:21,094
pull request and things would be good to go.

16
00:01:21,292 --> 00:01:25,878
So what happened to our happy dev experience?

17
00:01:25,964 --> 00:01:29,610
Containers and kubernetes in the last couple of years,

18
00:01:29,680 --> 00:01:33,210
containers made our lives super easy and containerization basically

19
00:01:33,280 --> 00:01:36,742
became the norm. Everyone reevaluated

20
00:01:36,806 --> 00:01:40,474
how they were structuring their applications. Containers made us

21
00:01:40,512 --> 00:01:44,014
realize that instead of working on this one single large application,

22
00:01:44,212 --> 00:01:47,642
it is so much more easier to scale an application that is composed

23
00:01:47,706 --> 00:01:51,310
of multiple smaller pieces, that is microservices.

24
00:01:52,130 --> 00:01:55,582
We also started using container orchestration tools like kubernetes

25
00:01:55,646 --> 00:01:59,602
in production to further scale our applications more effectively than

26
00:01:59,656 --> 00:02:03,714
was possible before. Now all of this changed these

27
00:02:03,752 --> 00:02:05,830
world of a happy developer Jane.

28
00:02:06,730 --> 00:02:10,946
Suddenly Jane was having a tough time bringing up her application locally.

29
00:02:11,138 --> 00:02:14,760
She could not just now continue developing as she was before.

30
00:02:16,410 --> 00:02:20,246
The thing with microservices is that they are interwoven and closely

31
00:02:20,278 --> 00:02:23,962
linked to each other. So let's say Jane has to make a change

32
00:02:24,016 --> 00:02:27,818
on a particular microservices. The only two options she has available

33
00:02:27,904 --> 00:02:31,126
with her are bringing that microservice up locally

34
00:02:31,158 --> 00:02:34,862
and working on it. The problem in this case is that

35
00:02:34,916 --> 00:02:38,094
she isn't able to see how the change she makes could interact with the other

36
00:02:38,132 --> 00:02:41,360
microservices because she hasn't brought them up together.

37
00:02:41,730 --> 00:02:45,534
Now this might not be a problem when you're working with two or three microservices,

38
00:02:45,662 --> 00:02:49,154
but imagine making a change in an application consisting of

39
00:02:49,192 --> 00:02:52,354
1015 microservices. It is almost

40
00:02:52,472 --> 00:02:56,534
impossible to predict how your changes would affect other things if you're working

41
00:02:56,572 --> 00:03:00,502
in isolation with a particular microservices. The second

42
00:03:00,556 --> 00:03:03,926
option Jane has available is to actually bring up

43
00:03:03,948 --> 00:03:07,734
all the microservices and configure things between them so that

44
00:03:07,772 --> 00:03:10,570
they all work like the actual application locally.

45
00:03:10,990 --> 00:03:14,390
Now mind you that this is no easy task.

46
00:03:14,550 --> 00:03:18,026
Jane would have to read and make sense of a bunch of readmes written by

47
00:03:18,048 --> 00:03:21,946
infra people or some hacky bash scripts which often break and

48
00:03:21,968 --> 00:03:25,306
require debugging. And these readmes and scripts

49
00:03:25,338 --> 00:03:29,086
are anyways hard to maintain and keep up to date. And you know what

50
00:03:29,108 --> 00:03:32,862
the worst part is? Even when Jane does spend things time

51
00:03:32,916 --> 00:03:36,802
bringing up and configuring all the microservices, she still can't be sure

52
00:03:36,856 --> 00:03:40,050
that everything would work as it works in production.

53
00:03:40,710 --> 00:03:44,162
Reason being that locally bringing up all the microservices is no longer

54
00:03:44,216 --> 00:03:48,162
the same thing as how they are brought up in production. Her environments

55
00:03:48,226 --> 00:03:51,522
still be won't exactly like the production Kubernetes

56
00:03:51,586 --> 00:03:53,640
clusters which run the final application.

57
00:03:56,170 --> 00:03:59,670
So what did we do to solve chains wars?

58
00:04:00,110 --> 00:04:03,882
We told her hey, work locally on an independent microservice and

59
00:04:03,936 --> 00:04:07,370
take these CI CD pipelines. Once you push your changes,

60
00:04:07,440 --> 00:04:10,986
we'll run them in the CI against a production environment and let

61
00:04:11,008 --> 00:04:13,774
you know if things are working as expected or not.

62
00:04:13,972 --> 00:04:19,582
Or we gave Jane access to staging environments where

63
00:04:19,636 --> 00:04:23,474
she was like after she was done, she could see her changes brought up like

64
00:04:23,512 --> 00:04:27,650
they would be in production and verify if everything is working as expected.

65
00:04:28,630 --> 00:04:32,686
But ask yourselves, did we actually solve Jane's

66
00:04:32,718 --> 00:04:35,140
problems? No.

67
00:04:36,410 --> 00:04:40,262
The workflow Jane was used to was this bring up

68
00:04:40,316 --> 00:04:43,446
the entire application she needed for development in a

69
00:04:43,468 --> 00:04:47,202
command or two, write some code, see her changes immediately,

70
00:04:47,266 --> 00:04:51,114
and iterate, all while being sure that things would

71
00:04:51,152 --> 00:04:54,666
work exactly the same in production when she pushes her

72
00:04:54,688 --> 00:04:57,914
changes. But the flow we currently gave her

73
00:04:58,032 --> 00:05:01,630
is not the same. It is too far from the code writing phase.

74
00:05:02,290 --> 00:05:06,286
With this flow, she only gets genuine feedback after she

75
00:05:06,308 --> 00:05:08,480
is done committing and pushing her changes.

76
00:05:09,170 --> 00:05:12,830
And that too is not instantaneous and takes a lot of time.

77
00:05:12,980 --> 00:05:16,354
Like bringing up the environment in CI often takes minutes if

78
00:05:16,392 --> 00:05:18,900
not hours if you're working with a pretty big application.

79
00:05:20,790 --> 00:05:24,274
So the question still remains, how do we fix things

80
00:05:24,312 --> 00:05:26,040
for Jane and make her happy?

81
00:05:27,370 --> 00:05:31,042
Before concluding, I want to discuss a solution which has these potential

82
00:05:31,106 --> 00:05:34,246
of solving all these problems developers working on

83
00:05:34,268 --> 00:05:36,840
microservice based applications face.

84
00:05:38,510 --> 00:05:41,850
And that production I feel is cloud development environments.

85
00:05:43,550 --> 00:05:47,146
The way they work is that they first deploy your application to

86
00:05:47,168 --> 00:05:50,806
a Kubernetes cluster using these same manifests you deploy

87
00:05:50,838 --> 00:05:54,526
to production. So the idea is that you deploy your application to

88
00:05:54,548 --> 00:05:57,774
the cluster just like you would in production, and then you see

89
00:05:57,812 --> 00:06:02,830
the result of the code you write as soon as you hit save to

90
00:06:02,900 --> 00:06:06,738
explain this in a bit more detail, let's consider a simple application

91
00:06:06,824 --> 00:06:11,006
which has two microservices. Now this is just for explaining

92
00:06:11,038 --> 00:06:14,594
like in an ideal world you would have like around ten microservices and

93
00:06:14,632 --> 00:06:18,582
things would get complicated. But let's just work with a movies application which

94
00:06:18,636 --> 00:06:21,910
has a front end which is interacted with an API.

95
00:06:23,370 --> 00:06:26,914
Once you have your application containers running in a cluster,

96
00:06:27,042 --> 00:06:30,190
these cloud development environments replace the container

97
00:06:30,290 --> 00:06:33,466
for a particular microservice you want to work on with

98
00:06:33,488 --> 00:06:36,922
a development container. So if you see the second box,

99
00:06:36,976 --> 00:06:40,498
you'll see that if you want to work on the API microservices,

100
00:06:40,534 --> 00:06:44,362
we would first deploy both the front end and the API to a cluster,

101
00:06:44,506 --> 00:06:48,394
and then we would replace the running API container

102
00:06:48,442 --> 00:06:50,750
with a development API container.

103
00:06:52,130 --> 00:06:55,906
Now what's special about this container is that it syncs all the

104
00:06:55,928 --> 00:06:59,650
code you write with the code which is running inside the cluster.

105
00:07:00,070 --> 00:07:03,346
So the changes you make will be moved to the cluster and you

106
00:07:03,368 --> 00:07:07,000
could see the results live as soon as you hit save.

107
00:07:07,930 --> 00:07:11,874
And the best part is that since this replaced container inherits

108
00:07:12,002 --> 00:07:15,494
all the configuration of the original container as well,

109
00:07:15,612 --> 00:07:19,414
so the other parts of your application continue to work exactly like these

110
00:07:19,452 --> 00:07:22,906
were working before. So that means you are

111
00:07:22,928 --> 00:07:26,346
working in an environment which is exactly lives production, and all

112
00:07:26,368 --> 00:07:29,750
you had to do was use the same manifests you were already using.

113
00:07:29,920 --> 00:07:31,440
How convenient. No?

114
00:07:33,330 --> 00:07:36,942
So I think you can now start to see how cloud

115
00:07:36,996 --> 00:07:40,474
dev environments solve all the problems we discussed

116
00:07:40,602 --> 00:07:43,822
and also provide a better developer experience for cloud native

117
00:07:43,886 --> 00:07:47,774
application developers. Con is the problem of developers

118
00:07:47,822 --> 00:07:51,234
working in an unrealistic environment, because cloud dev

119
00:07:51,272 --> 00:07:55,060
environments use the same manifests as production to bring up your application.

120
00:07:55,990 --> 00:07:59,814
Working in an environment which doesn't mimic production is the most common cause

121
00:07:59,852 --> 00:08:03,366
of bugs which creep in late in the dev cycle and are hard to

122
00:08:03,388 --> 00:08:07,254
debug. The reason they are hard to debug in the first place is that

123
00:08:07,372 --> 00:08:10,906
because finding them locally wasn't possible, because if that

124
00:08:10,928 --> 00:08:14,682
were the case, they would have gotten caught a lot earlier in the dev

125
00:08:14,736 --> 00:08:18,538
cycle. But the fact that they appear later and are tough to

126
00:08:18,544 --> 00:08:22,138
replicate locally is what makes them nasty to debug.

127
00:08:22,314 --> 00:08:26,426
But if you use the same manifests you use in production when developing

128
00:08:26,458 --> 00:08:29,886
locally, then you catch these bugs in your

129
00:08:29,908 --> 00:08:33,086
local environment even before you push your changes, and you would have

130
00:08:33,108 --> 00:08:36,274
a much easier time shipping features and you can be sure

131
00:08:36,312 --> 00:08:41,234
that the changes you push will not have these bugs these

132
00:08:41,272 --> 00:08:45,598
second thing is that with cloud dev environments you also get instantaneous feedback

133
00:08:45,774 --> 00:08:49,734
like you saw in the previous slide. The code gets synced as soon

134
00:08:49,772 --> 00:08:53,154
as you hit save. So you see the result of what you have written

135
00:08:53,202 --> 00:08:56,694
immediately. You no longer have to build your application,

136
00:08:56,892 --> 00:09:00,950
commit your changes and push them and wait for CI pipelines

137
00:09:01,110 --> 00:09:04,938
or just lives. Wait for access to a staging environment to

138
00:09:04,944 --> 00:09:07,900
be sure that your code is working.

139
00:09:08,350 --> 00:09:11,846
Because once your application is live in a cluster,

140
00:09:11,958 --> 00:09:15,086
all you need to do is hit save and then you see the results for

141
00:09:15,108 --> 00:09:18,426
your application. Now this speeds

142
00:09:18,458 --> 00:09:22,586
up the inner dev cycle, and not only that, but it also gives devs

143
00:09:22,618 --> 00:09:26,606
the confidence that what they have written will work in the CI and staging

144
00:09:26,638 --> 00:09:29,698
phases. Now I'm not saying that this is like a

145
00:09:29,704 --> 00:09:33,234
replacement of CI and staging. Both of them are useful and

146
00:09:33,272 --> 00:09:36,546
have their place, but this approach is more

147
00:09:36,568 --> 00:09:40,662
close to the developer and therefore it feels just like it was

148
00:09:40,716 --> 00:09:44,434
like a couple of years ago when we were not working on microservices

149
00:09:44,482 --> 00:09:48,166
and we had these monoliths we could bring up and hit save and

150
00:09:48,188 --> 00:09:52,186
see our changes. So it brings back that feeling of getting feedback as

151
00:09:52,208 --> 00:09:56,186
soon as you write and not waiting minutes or hours to

152
00:09:56,208 --> 00:10:00,086
see how your changes look. The third thing

153
00:10:00,128 --> 00:10:03,534
which makes most developers like chain very happy is

154
00:10:03,572 --> 00:10:07,214
that with cloud dev environments, devs don't have to

155
00:10:07,252 --> 00:10:11,354
spend time configuring things. All the configuration

156
00:10:11,402 --> 00:10:14,762
required to bring up a dev environment goes in a single file,

157
00:10:14,826 --> 00:10:18,530
and every developer can just bring up the entire application using a single

158
00:10:18,600 --> 00:10:22,222
command, which deploys to the cluster and replaces the required

159
00:10:22,286 --> 00:10:25,530
microservice container, as shown in the previous slide.

160
00:10:25,710 --> 00:10:29,282
So this idea of using dev environments

161
00:10:29,346 --> 00:10:34,306
as code makes dev environments much more reproducible

162
00:10:34,418 --> 00:10:37,762
and ephemeral. So if things go wrong, you can simply

163
00:10:37,906 --> 00:10:41,626
destroy a particular dev environment and spin another up in a

164
00:10:41,648 --> 00:10:45,306
matter of minutes. There are other added benefits,

165
00:10:45,408 --> 00:10:49,126
like since you are using cloud resources, everything is faster

166
00:10:49,238 --> 00:10:52,810
and you no longer have to be limited by the capabilities

167
00:10:52,890 --> 00:10:56,430
of your local machine. And the

168
00:10:56,580 --> 00:11:00,282
other good part I feel, is that these cloud dev environments

169
00:11:00,346 --> 00:11:03,866
do not force you to shift from the tools

170
00:11:03,898 --> 00:11:07,090
you've been using. You write code just like you would,

171
00:11:07,160 --> 00:11:10,846
except that it's being deployed and run in a cluster.

172
00:11:10,958 --> 00:11:14,590
So not only is the process faster and the feedback more genuine,

173
00:11:14,670 --> 00:11:18,086
but you do not have to say goodbye to the tools you

174
00:11:18,108 --> 00:11:21,160
love, like change your id or anything else.

175
00:11:23,050 --> 00:11:26,514
I want to end this talk with a quote which I feel beautifully sums

176
00:11:26,562 --> 00:11:29,798
up whatever we have discussed. If everything

177
00:11:29,884 --> 00:11:33,494
is happening in the cloud, then why should your dev environments not

178
00:11:33,532 --> 00:11:36,726
be there too? Thank you

179
00:11:36,748 --> 00:11:40,446
so much for attending and I hope you have a great conference. If you

180
00:11:40,468 --> 00:11:44,046
have any questions about the talk or just want to chat. Please don't hesitate to

181
00:11:44,068 --> 00:11:44,700
reach out to me.

