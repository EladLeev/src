1
00:00:23,690 --> 00:00:27,222
Welcome to Python 20 and 23. Today I'm going to be speaking about

2
00:00:27,276 --> 00:00:31,282
automate your cloudops so that you can spend less time doing operations

3
00:00:31,346 --> 00:00:34,774
and more time building the things you need to build. Let's take a quick

4
00:00:34,812 --> 00:00:38,454
step back and talk about documentation. As developers, we often

5
00:00:38,492 --> 00:00:41,830
think about documentation as when we want to build something, we go to a website,

6
00:00:41,900 --> 00:00:45,234
we read what we need to do in order to implement a new feature.

7
00:00:45,362 --> 00:00:48,882
But documentation is also really important internally,

8
00:00:49,026 --> 00:00:52,590
right? When something go sideways, do we have a checklist of how to fix

9
00:00:52,660 --> 00:00:56,174
what's wrong? When we need to roll out new infrastructure? Do we have

10
00:00:56,212 --> 00:00:59,886
docs that walk us through all of the steps from a

11
00:00:59,908 --> 00:01:03,326
cloud ops or a DevOps or a site reliability engineer point

12
00:01:03,348 --> 00:01:06,962
of view? A lot of times these are called runbooks or they're called

13
00:01:07,016 --> 00:01:11,586
checklists, right? These are just things that we have internally to help us

14
00:01:11,768 --> 00:01:15,554
get through our day and do all of these tasks that need to get done.

15
00:01:15,752 --> 00:01:19,446
And I think what we can do to make our lives better is we can

16
00:01:19,468 --> 00:01:22,950
automate some of these things, because it turns out

17
00:01:23,020 --> 00:01:26,422
that in a recent study we found that application support

18
00:01:26,476 --> 00:01:30,006
and operations takes up to as much as 55% of your developer

19
00:01:30,038 --> 00:01:33,398
time, giving you a lot less time to build those new features

20
00:01:33,414 --> 00:01:35,900
or those new functions that you need to work on.

21
00:01:36,990 --> 00:01:40,906
So clearly those are the advantages. But let's actually walk

22
00:01:40,928 --> 00:01:44,158
through a blog post, and this is a blog post written by a

23
00:01:44,164 --> 00:01:47,854
gentleman whose job was to be a site reliability engineer for

24
00:01:47,892 --> 00:01:51,438
a gambling website. Now, if you think about a gambling website,

25
00:01:51,604 --> 00:01:55,374
if they go down, like a gambling website's entire

26
00:01:55,492 --> 00:01:59,506
motivation is to take money from people. So if they go down,

27
00:01:59,688 --> 00:02:03,118
they can't take in money. So site reliability and keeping

28
00:02:03,134 --> 00:02:06,920
the site up and making sure that everything is available is really, really important.

29
00:02:07,370 --> 00:02:10,886
So this guy walked through some of the things he found.

30
00:02:11,068 --> 00:02:14,690
He found that when he had good documentation and good runbooks,

31
00:02:14,770 --> 00:02:18,406
that issues were resolved a lot faster. He found that

32
00:02:18,428 --> 00:02:22,022
the escalations were better. If they had a good checklist, maybe the on call

33
00:02:22,076 --> 00:02:24,906
could solve it and they didn't need the expert. But if they did need the

34
00:02:24,928 --> 00:02:28,970
expert, they knew who to reach out to. Maybe even like the NOC team

35
00:02:29,040 --> 00:02:32,010
could solve the issues because they could walk through the steps.

36
00:02:32,990 --> 00:02:36,266
They found that it was easier to onboard people, right? Because if you're hiring

37
00:02:36,298 --> 00:02:40,474
somebody and you say, here's how everything works, here's the checklist,

38
00:02:40,602 --> 00:02:43,870
it's a lot easier, you understand what's going on. It's a lot faster to understand

39
00:02:43,940 --> 00:02:47,394
what's going on. And they found that that improved training. Right.

40
00:02:47,432 --> 00:02:51,250
And as people came on board to this and started using

41
00:02:51,400 --> 00:02:55,106
all of the runbooks that he created, they found that they wanted to

42
00:02:55,128 --> 00:02:58,886
update the runbooks. They didn't get stale. That's another problem that happens with your

43
00:02:58,908 --> 00:03:02,466
documentation, right? Oh, jeez. We wrote that six months ago, and everything's

44
00:03:02,498 --> 00:03:06,230
changed since then. That doesn't help you when things are broken,

45
00:03:06,650 --> 00:03:09,766
right? You need to have something that's up to date so you can go boom,

46
00:03:09,798 --> 00:03:13,578
boom, boom, boom, boom and fix the outage. Right? Lower that time,

47
00:03:13,664 --> 00:03:15,370
mean time to resolution.

48
00:03:17,230 --> 00:03:20,902
And of course, once you have it all written down, we can start automate

49
00:03:20,966 --> 00:03:24,400
it, which is where we're going to get to in this talk. Now,

50
00:03:25,090 --> 00:03:28,734
this guy had a really, really cool boss. His boss said,

51
00:03:28,772 --> 00:03:32,218
all right, you can take seven months off and just build these runbooks.

52
00:03:32,234 --> 00:03:35,710
And he looked at every single issue, every single outage that happened

53
00:03:35,780 --> 00:03:38,740
for the last 18 months and built, like,

54
00:03:39,350 --> 00:03:42,738
hundreds and hundreds of runbooks. And then once he had them, he had

55
00:03:42,744 --> 00:03:45,620
to spend 10% of his time ongoing to keep them up to date.

56
00:03:46,150 --> 00:03:50,082
Now, let's take a step back and go back to reality.

57
00:03:50,146 --> 00:03:54,166
Most companies, you're not going to get seven months to stop what

58
00:03:54,188 --> 00:03:58,210
you're doing or take one person on your team just to build runbooks.

59
00:03:58,290 --> 00:04:01,190
We don't have that luxury.

60
00:04:02,030 --> 00:04:05,146
We need something that's going to get us there a little bit faster. And so

61
00:04:05,168 --> 00:04:08,586
that's what we're going to talk about today. I work

62
00:04:08,608 --> 00:04:12,830
for a company called Unscript, and we've built an open source

63
00:04:13,570 --> 00:04:17,386
cloudops automate platform. And what's

64
00:04:17,418 --> 00:04:20,430
great about this is it helps you get started immediately,

65
00:04:21,170 --> 00:04:25,362
building automations into your cloud, ops into your site,

66
00:04:25,416 --> 00:04:28,930
reliability into everything that you would consider DevOps.

67
00:04:29,750 --> 00:04:33,726
It's open source and is built on top of Jupyter notebooks.

68
00:04:33,838 --> 00:04:37,806
And so, as Python developers, you're probably familiar with the Jupyter notebooks.

69
00:04:37,838 --> 00:04:41,126
They're online notebooks that walk through your

70
00:04:41,148 --> 00:04:44,758
Python code. And each one of the little boxes is a set of code,

71
00:04:44,844 --> 00:04:49,254
and they build on top of each other and create an

72
00:04:49,292 --> 00:04:52,826
overall application. And if you think about a runbook, it's a bunch of

73
00:04:52,848 --> 00:04:55,962
steps or actions that you take to work

74
00:04:56,016 --> 00:04:59,238
through a process and solve it. It's sort of like a checklist or a runbook.

75
00:04:59,334 --> 00:05:03,162
And Jupyter notebooks are really, really well situated

76
00:05:03,226 --> 00:05:05,200
to be able to do this same thing.

77
00:05:06,530 --> 00:05:09,930
So what's great about Jupyter notebooks? They're online, they're collaborative,

78
00:05:10,010 --> 00:05:12,958
right? The worst thing is when there's an outage and it's like, oh, I've got

79
00:05:12,964 --> 00:05:16,286
that unskript on my laptop. That doesn't help the other person when

80
00:05:16,308 --> 00:05:20,066
they're on call. Right? So if it's online and everyone can access it, they can

81
00:05:20,088 --> 00:05:23,026
go through the checklist, they can go through the runbook and solve the problem.

82
00:05:23,128 --> 00:05:27,122
That's great. It's Python. So there's no domain

83
00:05:27,266 --> 00:05:30,598
specific language, there's no yaml, there's nothing like that.

84
00:05:30,684 --> 00:05:34,434
It's all just, we understand Python. We can write with Python,

85
00:05:34,562 --> 00:05:38,514
easy peasy. You can easily document

86
00:05:38,562 --> 00:05:41,786
what you're doing. Each one of the code snippets can be

87
00:05:41,808 --> 00:05:45,354
separated by a doc section where you can write up what's going

88
00:05:45,392 --> 00:05:48,486
on, why you're doing this, what are the inputs?

89
00:05:48,598 --> 00:05:51,838
Put it all in there via text or markdown so that people can follow along

90
00:05:51,924 --> 00:05:57,022
that, your checklist or your runbook, and know

91
00:05:57,076 --> 00:06:00,494
exactly what's happening in each one of those steps. And because

92
00:06:00,532 --> 00:06:05,134
it's Python, we can automate each one of those steps. So Jupyter

93
00:06:05,182 --> 00:06:09,170
notebooks are perfectly situated for this sort of cloud ops

94
00:06:09,590 --> 00:06:10,610
automation.

95
00:06:12,470 --> 00:06:16,142
So let's get started. Our GitHub repository,

96
00:06:16,206 --> 00:06:19,974
you can find it at runbooks. Sh. When you

97
00:06:20,012 --> 00:06:23,538
go there, you'll find that we have hundreds of runbooks

98
00:06:23,554 --> 00:06:26,886
and actions already built. So not only do

99
00:06:26,908 --> 00:06:32,162
you have this know, Jupyter notebooks are a great way to outline

100
00:06:32,226 --> 00:06:35,466
it and build a backbone for what we're doing, but we already have

101
00:06:35,488 --> 00:06:38,026
a bunch of the code written, so you can just drag and drop in the

102
00:06:38,048 --> 00:06:41,990
pieces that you need. And if the pieces that you are looking for aren't there,

103
00:06:42,160 --> 00:06:44,800
it's just Python, we can connect it all up.

104
00:06:46,850 --> 00:06:49,982
So here's an example runbook that I built,

105
00:06:50,036 --> 00:06:54,030
and what this is doing is it's doing a health check of our kubernetes clusters.

106
00:06:55,250 --> 00:06:59,122
And so what it's doing is the first

107
00:06:59,176 --> 00:07:02,958
action here is it's just contacting our kubernetes cluster.

108
00:07:03,054 --> 00:07:06,414
I configured a login and everything. All the credentials

109
00:07:06,462 --> 00:07:09,720
are taken care of in unskript as well. So it's really easy to write

110
00:07:10,570 --> 00:07:13,826
each one of these actions because the credentials

111
00:07:13,858 --> 00:07:16,806
are stored elsewhere, so you don't have to worry about the login or having the

112
00:07:16,828 --> 00:07:20,406
right API key that's all stored inside unscript, and you just

113
00:07:20,428 --> 00:07:23,146
have to write the code saying, hey, give me a list of all of the

114
00:07:23,168 --> 00:07:26,710
Kubernetes pods, right? And then once we have those kubernetes

115
00:07:26,790 --> 00:07:30,186
pods, let's get the logs from each one of those, right? So if you have

116
00:07:30,208 --> 00:07:34,234
ten pods, you might get ten sets of logs. And then I

117
00:07:34,272 --> 00:07:37,614
wrote just a simple python script here that says, all right,

118
00:07:37,732 --> 00:07:40,746
go through all those logs and tell me if there's a warning in the logs,

119
00:07:40,778 --> 00:07:44,222
right? If something's written in the logs, it's a warning. That's like the check engine

120
00:07:44,276 --> 00:07:47,826
light coming on on your car, right? Something's wrong, we should take

121
00:07:47,848 --> 00:07:51,666
a look at it. But nobody reads the logs. So if I run

122
00:07:51,688 --> 00:07:55,234
this every hour and just look in the logs for the last hour and write

123
00:07:55,272 --> 00:07:58,790
all the warnings and then post a message to slack, the team

124
00:07:58,860 --> 00:08:00,600
can be aware that there's a problem.

125
00:08:01,690 --> 00:08:05,206
What's really cool is three of the four actions in

126
00:08:05,228 --> 00:08:08,886
this runbook are pre built. They're in unscript today.

127
00:08:08,988 --> 00:08:12,422
So you just drag drop them in and set up your configuration,

128
00:08:12,486 --> 00:08:16,054
which are the input parameters, like what's the URL you're connecting

129
00:08:16,102 --> 00:08:19,786
to, what your credentials, et cetera, et cetera. And we'll show that in

130
00:08:19,808 --> 00:08:23,338
a second. The last one I had to write. But this whole thing is in

131
00:08:23,344 --> 00:08:26,174
a pr to our open source. So if you wanted to run this very health

132
00:08:26,212 --> 00:08:30,234
check, you can, because soon you'll be in our open source repo and it'll

133
00:08:30,282 --> 00:08:31,840
just show up in the tool.

134
00:08:34,130 --> 00:08:37,422
So when you're getting started, you end up at our GitHub repo.

135
00:08:37,486 --> 00:08:41,266
While you're there, give us a star if you feel like you want

136
00:08:41,288 --> 00:08:44,834
to. But at the bottom there's instructions on how to

137
00:08:44,872 --> 00:08:48,598
install it, and it's a docker. Install locally onto your machine, or you

138
00:08:48,604 --> 00:08:51,846
can put it up in the cloud, right into your

139
00:08:51,868 --> 00:08:57,014
cloud instance so that your team can share it. But rather

140
00:08:57,052 --> 00:09:00,666
than describe it, let's just go straight into chrome and

141
00:09:00,688 --> 00:09:03,946
we can see how it works. When you fire up the

142
00:09:03,968 --> 00:09:07,674
docker version of Unscript, you land at a welcome page and read about

143
00:09:07,712 --> 00:09:11,178
us. Report bugs, request features, explore the docs, right?

144
00:09:11,264 --> 00:09:14,906
Standard stuff. But here's a list of all of the runbooks,

145
00:09:15,018 --> 00:09:18,286
and if you click these, it'll open up in a new tab and you can

146
00:09:18,308 --> 00:09:21,280
actually configure your runbook so that you can run it.

147
00:09:22,610 --> 00:09:25,746
Let's also look through over here. When you're writing a runbook, you can

148
00:09:25,768 --> 00:09:29,614
save it. You can add actions or notes. An action

149
00:09:29,662 --> 00:09:33,522
is code, the notes or the markdown or the text code,

150
00:09:33,576 --> 00:09:37,154
comments, essentially credentials I'll talk about in just a second.

151
00:09:37,352 --> 00:09:40,646
But we can also have input parameters. And so what an input parameter is,

152
00:09:40,668 --> 00:09:44,242
is when you run this runbook, you could set the region

153
00:09:44,386 --> 00:09:47,974
if you're running an AWS, so that it always is checking the same

154
00:09:48,012 --> 00:09:51,660
region. Or you could send in parameters like I want to study

155
00:09:52,110 --> 00:09:55,674
this, and so you can input variables into

156
00:09:55,712 --> 00:09:58,906
the entire runbook that will then can be applied to each one

157
00:09:58,928 --> 00:10:03,258
of the actions in your runbook. So credentials

158
00:10:03,434 --> 00:10:07,006
credentials are the way we connect into the

159
00:10:07,028 --> 00:10:10,574
different services. And obviously you can't just have those

160
00:10:10,612 --> 00:10:14,126
open to the Internet. We need to have different services. But as

161
00:10:14,148 --> 00:10:17,618
you can see here, almost every single type of

162
00:10:17,624 --> 00:10:21,566
database that's out there you can connect into your observability platforms.

163
00:10:21,598 --> 00:10:24,894
They're all there. Your CI CD platforms,

164
00:10:25,022 --> 00:10:29,766
we support all the major clouds and kubernetes we

165
00:10:29,788 --> 00:10:33,910
can send to slack. And if you don't see a service you're using in

166
00:10:33,980 --> 00:10:38,018
this list, we offer rest APIs, or you can just ssh

167
00:10:38,114 --> 00:10:41,974
into the box that you're using if you're interested to do that.

168
00:10:42,172 --> 00:10:45,306
Okay, but let's just actually build a runbook. I just want to show you

169
00:10:45,328 --> 00:10:49,434
how fast and easy it is to start from scratch and have something running in

170
00:10:49,472 --> 00:10:53,286
almost no time. So I have this empty

171
00:10:53,398 --> 00:10:57,290
runbook here. Every single runbook has an unscript internal

172
00:10:57,450 --> 00:11:00,878
action that runs first. But what I want to do here is what I want

173
00:11:00,884 --> 00:11:05,822
to do is get a list of all my Ec two instances at AWS and

174
00:11:05,876 --> 00:11:09,474
get a list of them. And then we'll play around with that

175
00:11:09,512 --> 00:11:12,626
list of instances. So what we can do here is there are

176
00:11:12,648 --> 00:11:16,486
hundreds of actions built into unscript, right? We can look at Google Cloud

177
00:11:16,668 --> 00:11:20,118
and we can see all of the actions that are available.

178
00:11:20,284 --> 00:11:24,114
We can look at kubernetes,

179
00:11:24,242 --> 00:11:27,560
some are like this and some are k eight, right?

180
00:11:28,110 --> 00:11:32,186
We can look at elastic and we can see it

181
00:11:32,208 --> 00:11:36,170
helps if I could spell. We're going to look at AWS, filter all images.

182
00:11:38,830 --> 00:11:42,534
So I want to filter all EC two instances.

183
00:11:42,582 --> 00:11:45,246
So I'm going to just drag this action over. This is the one I want

184
00:11:45,268 --> 00:11:48,222
to use. And if we open this up,

185
00:11:48,276 --> 00:11:50,800
we can see there's python code in here,

186
00:11:51,490 --> 00:11:54,766
doesn't really matter because we don't need to change it. If you did

187
00:11:54,788 --> 00:11:57,054
need to change it, you can go in there and just configure it, right?

188
00:11:57,092 --> 00:12:00,206
Not a big deal, but let's just configure it. Let's get this set up so

189
00:12:00,228 --> 00:12:03,374
it can be run. So credentials are set up in here,

190
00:12:03,492 --> 00:12:07,362
or you can add a credential right here. I already have AWS

191
00:12:07,426 --> 00:12:11,574
credentials connected into my account built in.

192
00:12:11,692 --> 00:12:14,440
That way I don't have to show my secret key in the video.

193
00:12:15,530 --> 00:12:19,298
So now unskript knows how to connect into

194
00:12:19,324 --> 00:12:22,486
my AWS infrastructure.

195
00:12:22,678 --> 00:12:26,726
And then I want to find all the EC two instances for a specific region.

196
00:12:26,838 --> 00:12:30,022
And this is just a python variable. So I can just say

197
00:12:30,176 --> 00:12:33,630
us west two, right.

198
00:12:33,780 --> 00:12:38,734
I can apply these changes and run this and

199
00:12:38,772 --> 00:12:41,966
we get a list of all the instances. Another way we could do

200
00:12:41,988 --> 00:12:45,746
this is if you remember earlier I talked about the input parameters in

201
00:12:45,768 --> 00:12:49,106
this runbook. I have input region as a variable set

202
00:12:49,128 --> 00:12:52,542
to us west two. So instead if I use the variable

203
00:12:52,606 --> 00:12:56,114
here and

204
00:12:56,152 --> 00:12:58,920
apply that and hit run, we're going to get the same answer,

205
00:12:59,370 --> 00:13:02,806
but it's using the variable. Now what if I

206
00:13:02,828 --> 00:13:06,310
wanted to use these instances somewhere? I can set up an output

207
00:13:07,390 --> 00:13:11,706
and save this into the instances variable and

208
00:13:11,728 --> 00:13:14,090
then rerun it so that it's in the variable.

209
00:13:15,150 --> 00:13:18,506
And let's add an action and we can

210
00:13:18,528 --> 00:13:22,590
do something really simple like print instances

211
00:13:24,770 --> 00:13:28,334
and it printed them. Right. That makes sense. But what are some

212
00:13:28,372 --> 00:13:32,674
other things I could do here? I could take

213
00:13:32,712 --> 00:13:37,538
a list of EC two instances and

214
00:13:37,624 --> 00:13:40,626
restart them, right?

215
00:13:40,728 --> 00:13:44,606
So in my configuration I could say instances,

216
00:13:44,798 --> 00:13:48,086
right, because it's in a variable and I

217
00:13:48,108 --> 00:13:50,230
could set my input region,

218
00:13:51,930 --> 00:13:55,286
apply these, do the credential and then restart all the

219
00:13:55,308 --> 00:13:58,486
instances. Some of these are running in production, so I'm not going to do

220
00:13:58,508 --> 00:14:01,706
that for the video. But you get the idea how easy it is

221
00:14:01,728 --> 00:14:05,286
to just really quickly drag and drop in the bits

222
00:14:05,318 --> 00:14:08,554
that you want to do and you can have a working runbook in just

223
00:14:08,592 --> 00:14:09,820
a matter of minutes.

224
00:14:16,930 --> 00:14:20,206
I'm going to give one more example here. And this is again, it's an

225
00:14:20,228 --> 00:14:23,270
AWS example. But the idea here is service quotas.

226
00:14:23,370 --> 00:14:26,914
So there are certain features inside AWS that

227
00:14:26,952 --> 00:14:30,386
Amazon gives you a limit. You can only have so many of these in

228
00:14:30,408 --> 00:14:34,734
your AWS infrastructure. For example, your elastic

229
00:14:34,782 --> 00:14:38,758
ips for EC two in one region you can only have five of those.

230
00:14:38,924 --> 00:14:42,406
And so the way you find this out is you've got to

231
00:14:42,428 --> 00:14:46,082
know the service and you need to know this like random

232
00:14:46,146 --> 00:14:49,842
code that exists here. And then you can call an API

233
00:14:49,906 --> 00:14:51,580
and you can get the number five.

234
00:14:53,390 --> 00:14:57,142
Now we had a customer who was running into problems because their automations

235
00:14:57,206 --> 00:15:00,410
were failing, because it turned out they were hitting some of their service

236
00:15:00,480 --> 00:15:03,726
quota limits and they didn't know it. And so then

237
00:15:03,748 --> 00:15:07,374
their automation was failing because they couldn't actually provision more, in this

238
00:15:07,412 --> 00:15:11,342
case elastic ips, right? So let's look like at

239
00:15:11,476 --> 00:15:14,962
unscript right now, we actually have five of these in use

240
00:15:15,016 --> 00:15:18,606
right now. So we can't actually add another elastic

241
00:15:18,638 --> 00:15:22,354
ip at this point we're at the limit. And so this was

242
00:15:22,392 --> 00:15:25,654
just a runbook that I created for this

243
00:15:25,692 --> 00:15:29,046
talk. So our customer was really interested in this. So we

244
00:15:29,068 --> 00:15:32,374
prebuilt a series of actions to

245
00:15:32,412 --> 00:15:35,270
help them understand where they stood.

246
00:15:42,500 --> 00:15:45,664
Here's a runbook, or an action that takes every

247
00:15:45,702 --> 00:15:49,164
single VPC service quota and finds

248
00:15:49,212 --> 00:15:52,784
the quota limit and then also queries to see how many are

249
00:15:52,822 --> 00:15:53,410
used.

250
00:15:55,480 --> 00:15:58,996
And again, the parameter is set here. The region is

251
00:15:59,018 --> 00:16:03,396
set to us west two. And I am saying,

252
00:16:03,578 --> 00:16:08,592
let me know if I've hit 50% of my usage.

253
00:16:08,736 --> 00:16:13,156
Right. So in this case, my nat gateways per availability zone

254
00:16:13,348 --> 00:16:16,792
that has this code right here, the limit is five and I've used

255
00:16:16,846 --> 00:16:19,944
four of them. So what we can do is

256
00:16:19,982 --> 00:16:22,824
then there's another action that I have right here that says,

257
00:16:22,942 --> 00:16:26,556
let's ask for an increase. And this isn't automatic, like it gets put

258
00:16:26,578 --> 00:16:29,916
into a queue and then it gets run. But let's look at this. So the

259
00:16:29,938 --> 00:16:33,424
configuration I have here is, again, the region is a variable set

260
00:16:33,462 --> 00:16:36,784
up here. And then I'm saying

261
00:16:36,822 --> 00:16:39,936
for a VPC, because these are VPC services,

262
00:16:40,118 --> 00:16:44,530
the quota code, and because this is a demo that I'm just doing here,

263
00:16:45,460 --> 00:16:49,104
right here's the quota code. It matches right here. You could programmatically

264
00:16:49,152 --> 00:16:52,484
say, take the output from here and find the quota code and then

265
00:16:52,522 --> 00:16:56,368
run it. But in this case, it's hard coded.

266
00:16:56,464 --> 00:16:59,844
But you get the idea. And I only have one shot at this, because once

267
00:16:59,882 --> 00:17:03,384
you ask for an increase, you can't ask for another increase until it's been

268
00:17:03,422 --> 00:17:05,450
completed. So I'm going to run this,

269
00:17:06,220 --> 00:17:10,764
and I forgot to put in my credentials. So let's put in the credential and

270
00:17:10,802 --> 00:17:14,156
now let's run it. And it says,

271
00:17:14,338 --> 00:17:18,124
I have asked for ten. I forgot to show that I asked

272
00:17:18,162 --> 00:17:21,272
for ten. I said, hey, for VPC,

273
00:17:21,336 --> 00:17:24,732
for this quote code, the limit was for

274
00:17:24,786 --> 00:17:28,096
I want ten. And so I just sent an API request saying,

275
00:17:28,118 --> 00:17:31,616
hey, I want ten for this. And if you look down here,

276
00:17:31,638 --> 00:17:35,024
it says 200, like it's in the queue to now be set

277
00:17:35,062 --> 00:17:38,484
up to ten, which is pretty awesome. Now,

278
00:17:38,602 --> 00:17:42,128
one thing that's really interesting with these AWS service codes

279
00:17:42,224 --> 00:17:45,316
is that these are really hard to find.

280
00:17:45,498 --> 00:17:49,284
And part of the reason for that is there's like 2600 of them,

281
00:17:49,322 --> 00:17:52,660
right? AWS is huge. There's so many things going on.

282
00:17:52,810 --> 00:17:56,276
And as I was building these out, I really wanted to get a better understanding

283
00:17:56,308 --> 00:17:58,888
of what was going on. And so I'm going to scroll to the top of

284
00:17:58,894 --> 00:18:02,316
this runbook real quickly to show you what I did to better understand this.

285
00:18:02,498 --> 00:18:05,976
The first thing I did after I installed

286
00:18:06,008 --> 00:18:09,804
some PiP stuff was to get

287
00:18:09,842 --> 00:18:13,224
the list of all the service names, right? So the service name here is VPC.

288
00:18:13,352 --> 00:18:16,832
If you run this, it's going to give you a list of all the service

289
00:18:16,886 --> 00:18:20,016
names. And there's 222 of them, right? There are a lot of

290
00:18:20,038 --> 00:18:23,680
them, right? Cloud nine, cognito,

291
00:18:24,100 --> 00:18:28,032
all these different things that Amazon offers, like 222

292
00:18:28,086 --> 00:18:31,270
service names. There's a lot of them. I'm just going to minimize that.

293
00:18:31,720 --> 00:18:35,236
Then I built another action. And we'll look

294
00:18:35,258 --> 00:18:38,980
at this here that says, for us, west two, for a specific service,

295
00:18:39,050 --> 00:18:43,284
like VPC or EC two, get me all the service quotas.

296
00:18:43,412 --> 00:18:47,112
Now, you may notice here, I'm not actually putting in the service name

297
00:18:47,166 --> 00:18:50,952
here, and that's because I'm using an iterator. So I'm actually taking

298
00:18:51,006 --> 00:18:54,124
a list, all 222 of them,

299
00:18:54,242 --> 00:18:57,532
and running through this. So this is going to run 222 times and give me

300
00:18:57,586 --> 00:19:01,880
every single service quota that exists inside AWS.

301
00:19:02,040 --> 00:19:05,330
I'm not going to hit run here because that takes a long time.

302
00:19:06,100 --> 00:19:09,696
So once I have all 2600 of

303
00:19:09,718 --> 00:19:13,644
these service quotas, I can create a csv

304
00:19:13,692 --> 00:19:16,944
of those and then I can save them to Google sheets. And you can see

305
00:19:16,982 --> 00:19:20,004
I actually have that action right here. And it comes over

306
00:19:20,042 --> 00:19:23,476
here into Google sheets. So let's actually run it.

307
00:19:23,498 --> 00:19:26,816
So you can see that this actually happens. I can come here, I can delete

308
00:19:26,848 --> 00:19:30,840
everything that's in the Google sheet, and I can run this action.

309
00:19:33,500 --> 00:19:37,096
And it says that it did it. So let's go over to there and

310
00:19:37,118 --> 00:19:40,476
you can see it did it. We can do it again, just because it's sort

311
00:19:40,498 --> 00:19:44,524
of fun to watch. Come over here.

312
00:19:44,562 --> 00:19:46,140
We can make this a little smaller.

313
00:19:48,640 --> 00:19:52,076
Run action. And bam, it created it.

314
00:19:52,098 --> 00:19:55,660
So now this is an automation. I can make this happen every single

315
00:19:55,730 --> 00:19:58,912
day. I've been running this every day for about the last week.

316
00:19:58,966 --> 00:20:02,112
And like four or five new services are added every single

317
00:20:02,166 --> 00:20:05,920
day. And you can see here, here are all my VPC

318
00:20:07,240 --> 00:20:10,964
service quotas, right? And here are the names, here's that

319
00:20:11,002 --> 00:20:14,532
secret code, and here's the quota value for my

320
00:20:14,586 --> 00:20:18,416
account. If you look here, you can see my nat gateways per availability zone.

321
00:20:18,448 --> 00:20:21,990
And it's set to five. I haven't refreshed these numbers yet because

322
00:20:22,440 --> 00:20:25,864
remember, this is requiring it across 222 of them. It takes a long

323
00:20:25,902 --> 00:20:28,856
time. So if I run it again, this might say ten now, but right now

324
00:20:28,878 --> 00:20:32,184
it still says five. But what's really cool about this is

325
00:20:32,222 --> 00:20:35,528
this automates every single day it gets uploaded to our docs.

326
00:20:35,544 --> 00:20:38,348
So if you're curious about this, you can go to the unscript docs and you

327
00:20:38,354 --> 00:20:42,140
can get the quota code for all 26 40

328
00:20:42,210 --> 00:20:45,390
of these, right? There's tons and tons of these things. It's really interesting.

329
00:20:45,920 --> 00:20:48,784
But again, this is one of those things that's hard to find.

330
00:20:48,902 --> 00:20:52,528
So why not write a little bit of automation to get it into one place

331
00:20:52,614 --> 00:20:54,480
so that it's a lot easier?

332
00:20:56,180 --> 00:20:59,316
Instead of being hidden behind a bunch of API calls, you can now look it

333
00:20:59,338 --> 00:21:02,996
up in a Google sheet that might be useful for you. Maybe you would

334
00:21:03,018 --> 00:21:06,352
prefer the API for me. This was super, super helpful.

335
00:21:06,496 --> 00:21:08,600
So, in conclusion,

336
00:21:11,020 --> 00:21:14,436
runbooks are a way to describe your internal documentation.

337
00:21:14,628 --> 00:21:18,280
When there's an outage, when you need to provision something new,

338
00:21:18,430 --> 00:21:21,864
you have a checklist or a runbook that walks through all the different steps.

339
00:21:21,992 --> 00:21:26,088
And research and people's blog posts have shown

340
00:21:26,184 --> 00:21:29,976
that when you have really good internal documentation, your outcomes are improved.

341
00:21:30,088 --> 00:21:33,516
You lower your meantime to resolution. When there's an outage, right? When you're ripping your

342
00:21:33,538 --> 00:21:36,604
hair out, the last thing you want is an out of date runbook.

343
00:21:36,652 --> 00:21:39,596
If it's up to date and it's automated, it's going to make things easier.

344
00:21:39,708 --> 00:21:42,850
It improves your collaboration and you can automate it.

345
00:21:43,780 --> 00:21:47,376
That automation reduces that manual DevOps toil those things

346
00:21:47,398 --> 00:21:50,004
that you have to do, the 20 things you need to do every single day,

347
00:21:50,122 --> 00:21:53,684
the things that derail your day, because you've got to go do stuff

348
00:21:53,802 --> 00:21:57,280
that you weren't planning to do. Because if you don't, things will break.

349
00:21:57,450 --> 00:22:00,600
You can auto remediate things, you can increase your observability.

350
00:22:01,900 --> 00:22:05,256
The opportunities here are really endless. And with

351
00:22:05,278 --> 00:22:08,804
unscript it's open source, it's Python, it's based on Jupyter

352
00:22:08,852 --> 00:22:12,156
notebooks. There are hundreds of automations built in and it's all

353
00:22:12,178 --> 00:22:15,324
open source and easy, easy to create new ones that

354
00:22:15,362 --> 00:22:19,276
you can use yourself. If you're so interested, you can contribute it

355
00:22:19,298 --> 00:22:23,064
back to our open source. So hopefully

356
00:22:23,112 --> 00:22:26,704
this has given you an idea of how you can use your python experience to

357
00:22:26,742 --> 00:22:30,332
help you automate a lot of the day to day toil

358
00:22:30,396 --> 00:22:34,252
that you need to do every day to keep your DevOps, to keep your infrastructure

359
00:22:34,316 --> 00:22:37,936
up and running. A few resources if you're

360
00:22:37,968 --> 00:22:41,440
interested. Again, our GitHub repo is at Runbooks

361
00:22:41,520 --> 00:22:44,950
sh. If you want to give us a star, we'd love that.

362
00:22:45,560 --> 00:22:48,852
You can reach out to us@unscript.com there's a link to our

363
00:22:48,906 --> 00:22:52,504
slack community there. If you'd like to sign up and if you have

364
00:22:52,542 --> 00:22:56,404
questions we'd be happy to help you on your DevOps

365
00:22:56,452 --> 00:23:00,196
automation journey. Here's the blog post on things I learned

366
00:23:00,228 --> 00:23:03,508
managing site reliability for some of the world's busiest gambling sites.

367
00:23:03,604 --> 00:23:06,824
It's an interesting read and I'm Doug Sillars

368
00:23:06,952 --> 00:23:10,188
and I run developer relations at Unscript. If you want to get a hold of

369
00:23:10,194 --> 00:23:13,596
me, probably the easiest way is on Twitter and my Twitter handle is

370
00:23:13,618 --> 00:23:17,096
Doug Sillers, so I'm pretty easy to find. If you just search Doug

371
00:23:17,128 --> 00:23:20,444
Sillars, you'll find me. Thank you very much for

372
00:23:20,482 --> 00:23:24,708
listening and I look forward to talking with you and helping you

373
00:23:24,834 --> 00:23:28,660
on your cloudops automation journey.

374
00:23:29,240 --> 00:23:31,570
You can learn more at unscript and thanks for watching.

