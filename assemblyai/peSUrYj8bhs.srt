1
00:00:21,530 --> 00:00:25,554
I'm so happy ive been here. And I confess that in stock

2
00:00:25,602 --> 00:00:28,998
means a really hard challenge for me.

3
00:00:29,084 --> 00:00:32,662
But I'm happy to have the coders to talk

4
00:00:32,716 --> 00:00:36,050
about technology and golings,

5
00:00:36,130 --> 00:00:39,706
and even more to prove that a

6
00:00:39,808 --> 00:00:42,954
woman in tech can talk about technology.

7
00:00:43,152 --> 00:00:47,002
Even your native language is in English. Okay,

8
00:00:47,136 --> 00:00:50,530
I'll talk about what I learned in coding a Cli

9
00:00:50,630 --> 00:00:54,298
in Golings. And here is our agenda.

10
00:00:54,394 --> 00:00:57,854
Today we're going to talk about the Golings project. I will show

11
00:00:57,892 --> 00:01:00,240
you what this project do,

12
00:01:01,010 --> 00:01:04,826
how I built the iterative terminal,

13
00:01:04,938 --> 00:01:08,490
the challenge, I face it, what I learned.

14
00:01:08,650 --> 00:01:12,626
And yeah, here we have also cheers. But we

15
00:01:12,648 --> 00:01:16,114
don't have a conqueror of a compiler program without tears,

16
00:01:16,162 --> 00:01:17,720
am I right? Okay,

17
00:01:19,050 --> 00:01:22,614
so about me. First I present myself for you

18
00:01:22,652 --> 00:01:26,742
all. I am a software developer about five years I

19
00:01:26,796 --> 00:01:30,626
began as a front end developer and today I'm

20
00:01:30,658 --> 00:01:34,250
a fully backend developer in video

21
00:01:34,320 --> 00:01:38,220
streaming platform here in Brazil. Called it global Play.

22
00:01:38,750 --> 00:01:42,400
I forgot, but I am a brazilian girl

23
00:01:43,330 --> 00:01:46,590
and working with video

24
00:01:46,660 --> 00:01:50,800
streaming was my biggest dream the last year. And I'm happy

25
00:01:51,330 --> 00:01:54,818
of being enabled in my first opportunity

26
00:01:54,984 --> 00:01:58,242
to work with that. And I'm also

27
00:01:58,296 --> 00:02:02,322
a guitar player in a funny rock band here in Brazil called

28
00:02:02,376 --> 00:02:05,702
Chijalos Bayans. And in English it

29
00:02:05,756 --> 00:02:07,990
means Baya bricks.

30
00:02:08,410 --> 00:02:12,118
Baya is a brazilian stage name and

31
00:02:12,204 --> 00:02:15,698
bricks is that red bricks

32
00:02:15,874 --> 00:02:19,114
to build houses. So, okay,

33
00:02:19,232 --> 00:02:22,982
let's go to the talk. The Golings

34
00:02:23,046 --> 00:02:29,098
project is a CLi command line interface with

35
00:02:29,184 --> 00:02:32,302
exercise that will teach you how to

36
00:02:32,356 --> 00:02:35,882
program in go the project. Have some comments

37
00:02:35,946 --> 00:02:40,494
like run that will compile the file with

38
00:02:40,532 --> 00:02:44,594
an ahor and you have to fix the zehor. And when

39
00:02:44,632 --> 00:02:47,330
you run the comment,

40
00:02:47,990 --> 00:02:51,922
it will compile the file and tell you if

41
00:02:51,976 --> 00:02:56,210
it's okay and if it has an error.

42
00:02:56,950 --> 00:03:00,774
The least command to show all exercise that

43
00:03:00,812 --> 00:03:04,434
is available for you to edit the files

44
00:03:04,482 --> 00:03:08,214
and fix are hint. To give you a hint

45
00:03:08,262 --> 00:03:12,134
about the exercise, you're stuck. Like here in the video I'm

46
00:03:12,182 --> 00:03:15,850
doing the variables. One exercise

47
00:03:16,510 --> 00:03:19,738
and this file have an error and I

48
00:03:19,744 --> 00:03:23,694
have to fix it. So the challenge was

49
00:03:23,732 --> 00:03:27,450
to build a watch comment with integrative modes

50
00:03:27,610 --> 00:03:30,990
that I'm showing in this video. I have the

51
00:03:31,060 --> 00:03:33,966
variables file. I have to fix this file.

52
00:03:34,078 --> 00:03:38,222
And when I edit, the command

53
00:03:38,286 --> 00:03:42,082
to run and compile must automatically been

54
00:03:42,136 --> 00:03:45,878
run it. And I can also

55
00:03:45,964 --> 00:03:49,890
type in terminal like this. I ask for a hint,

56
00:03:50,050 --> 00:03:53,382
this one. And even I type something

57
00:03:53,436 --> 00:03:56,854
in terminal. It must keep running my project so

58
00:03:56,892 --> 00:04:00,634
I can save again and it will run and

59
00:04:00,672 --> 00:04:02,970
try to compile the file I'm editing.

60
00:04:04,110 --> 00:04:08,330
So what to do. I was thinking about

61
00:04:08,400 --> 00:04:12,138
the order to solve the problems and so first

62
00:04:12,304 --> 00:04:16,126
I built the functions to listen the file chance. And the

63
00:04:16,148 --> 00:04:19,790
last one I created the iterative mode with

64
00:04:19,860 --> 00:04:23,394
user inputs like that video we saw the

65
00:04:23,432 --> 00:04:26,290
user typing hint comments.

66
00:04:27,750 --> 00:04:31,154
Okay how to listen the file chains I

67
00:04:31,192 --> 00:04:34,734
work with infinite loops, goho chains and fs

68
00:04:34,782 --> 00:04:38,286
notify packager. The fs note five packager

69
00:04:38,318 --> 00:04:42,034
is responsible for listening to operational system events

70
00:04:42,082 --> 00:04:46,354
notifications. So I'm going to show you first how I created

71
00:04:46,402 --> 00:04:49,626
the watch event functions and we're going

72
00:04:49,648 --> 00:04:52,970
to use the fs notify packager here to create

73
00:04:53,040 --> 00:04:56,502
a watcher and receiving a channel as a pattern.

74
00:04:56,566 --> 00:05:00,494
Okay we golings to iterate with this channel but we

75
00:05:00,532 --> 00:05:04,254
created a watcher here and this

76
00:05:04,292 --> 00:05:08,394
watcher will return. I struct with some methods

77
00:05:08,442 --> 00:05:11,438
and even structs that we can operate it.

78
00:05:11,604 --> 00:05:15,410
And the last one I created I

79
00:05:15,480 --> 00:05:18,946
formatted a string to a path that I want to watch.

80
00:05:19,128 --> 00:05:23,410
This one I use the root example but tingling it

81
00:05:23,480 --> 00:05:25,990
was the exercise folder.

82
00:05:30,330 --> 00:05:33,922
The add method from our watcher that we creating

83
00:05:33,986 --> 00:05:37,682
in the previous stage doesn't reach

84
00:05:37,756 --> 00:05:41,798
subdirectors. So I'm here in the exercise

85
00:05:41,974 --> 00:05:45,402
and I'm typing the file here

86
00:05:45,456 --> 00:05:49,338
inside the anonymous functions one. So it

87
00:05:49,424 --> 00:05:53,402
doesn't going to work because this

88
00:05:53,456 --> 00:05:57,118
edge only listens to file changes

89
00:05:57,204 --> 00:06:00,846
here. So I have to enter in every

90
00:06:00,948 --> 00:06:04,462
folder here and adding my method.

91
00:06:04,606 --> 00:06:08,158
So to enter inside every folder I'm

92
00:06:08,174 --> 00:06:11,250
going to use the file path and walk jer method.

93
00:06:13,030 --> 00:06:17,302
This directories is the file path here exercise and

94
00:06:17,356 --> 00:06:20,870
it's going to run every folder here.

95
00:06:21,020 --> 00:06:25,158
And when I check if it is

96
00:06:25,244 --> 00:06:28,994
a deer I add this cohen deer

97
00:06:29,122 --> 00:06:33,114
that I mean to my watcher list that

98
00:06:33,152 --> 00:06:35,670
we creating in the previous stage.

99
00:06:35,830 --> 00:06:39,546
So in terminal when I print I

100
00:06:39,568 --> 00:06:43,502
inserted a print here inside the zip and it

101
00:06:43,556 --> 00:06:46,080
looks like this picture here.

102
00:06:48,370 --> 00:06:51,418
And the last one we're

103
00:06:51,434 --> 00:06:55,150
going to iterate in our watch event destruct.

104
00:06:56,290 --> 00:07:00,178
We're going to check if every ever changed here

105
00:07:00,344 --> 00:07:05,106
and we're going to check if the event that my

106
00:07:05,128 --> 00:07:08,910
system notification it was a right

107
00:07:09,000 --> 00:07:13,334
event. So if it is right event I

108
00:07:13,372 --> 00:07:17,400
golings to insert the file name in

109
00:07:17,950 --> 00:07:22,300
my channel that I pass it as a padding my function okay

110
00:07:24,110 --> 00:07:28,294
so here we have our function to watch all the directories

111
00:07:28,422 --> 00:07:32,222
events this

112
00:07:32,276 --> 00:07:36,026
way running every file

113
00:07:36,058 --> 00:07:39,294
change. So when I type and I try

114
00:07:39,332 --> 00:07:42,910
to fix some file the comment must

115
00:07:42,980 --> 00:07:47,300
run automatically my file and tell me if

116
00:07:47,670 --> 00:07:52,130
it's okay or is still broken.

117
00:07:54,150 --> 00:07:58,038
Here is my

118
00:07:58,204 --> 00:08:01,670
mind Cli body and I create

119
00:08:01,740 --> 00:08:02,600
a channel,

120
00:08:05,050 --> 00:08:08,374
a channel to pass as a pattern

121
00:08:08,422 --> 00:08:12,026
to my watch event functions that I creating in the

122
00:08:12,128 --> 00:08:15,446
previous stage I use infinite loop.

123
00:08:15,558 --> 00:08:19,366
We're going to understand better why I have to use infinite

124
00:08:19,398 --> 00:08:23,628
loop when we built the iterative mode, but we're

125
00:08:24,128 --> 00:08:27,706
golings to use that to always keep running the exercise.

126
00:08:27,898 --> 00:08:31,822
And I create a globo chin here because

127
00:08:31,956 --> 00:08:35,762
it's the other process and I wanted to make more

128
00:08:35,816 --> 00:08:39,634
things after the globo chin like

129
00:08:39,672 --> 00:08:43,474
the iterative modes and here inside we have

130
00:08:43,672 --> 00:08:47,094
range in this channel. So every time this

131
00:08:47,132 --> 00:08:51,366
channel is updates I wanted to run the

132
00:08:51,468 --> 00:08:56,600
run next exercise command and

133
00:08:57,130 --> 00:09:01,194
the third is building the iterative mode and

134
00:09:01,232 --> 00:09:05,286
I can resume this step in buffer

135
00:09:05,318 --> 00:09:08,570
packager infinite loops switch case

136
00:09:08,720 --> 00:09:13,102
to choose the right comments to run with

137
00:09:13,156 --> 00:09:23,258
user inputs I'm

138
00:09:23,274 --> 00:09:27,358
going to use the burfuel packager and this packager

139
00:09:27,534 --> 00:09:31,298
implements functionality for buffer data input and

140
00:09:31,384 --> 00:09:35,566
output and we have to build the iterative mode.

141
00:09:35,678 --> 00:09:40,290
So we're going to need the reader types of dispackager

142
00:09:40,970 --> 00:09:44,498
and methods to reach the user input.

143
00:09:44,594 --> 00:09:48,578
So here I get the user input

144
00:09:48,754 --> 00:09:52,490
read string until the user tag press

145
00:09:52,560 --> 00:09:56,122
the enter the enter key and here

146
00:09:56,176 --> 00:09:59,878
I have the CmG share variable and

147
00:10:00,064 --> 00:10:03,502
sir here we have only

148
00:10:03,556 --> 00:10:07,786
a switch case to decide what command

149
00:10:07,818 --> 00:10:11,790
I golings to run with

150
00:10:11,860 --> 00:10:15,714
user inputs here and if a user type list golings

151
00:10:15,752 --> 00:10:19,630
to run this command hint going to run print hint

152
00:10:19,790 --> 00:10:24,722
or maybe kit the program and

153
00:10:24,776 --> 00:10:32,262
here is our mindfelling function step

154
00:10:32,316 --> 00:10:34,040
that we built.

155
00:10:39,040 --> 00:10:42,412
Yeah, so let's go to think

156
00:10:42,466 --> 00:10:44,780
about the challenge I faced.

157
00:10:46,100 --> 00:10:49,664
The first one was really understand what I have to

158
00:10:49,702 --> 00:10:53,648
do. I think this is a good example that shows

159
00:10:53,734 --> 00:10:57,508
how communication write skills are very important

160
00:10:57,674 --> 00:11:04,432
because even I read the issue it

161
00:11:04,506 --> 00:11:07,960
wasn't really clear to me how to build it,

162
00:11:08,030 --> 00:11:12,170
because the first time I thought that I have to build

163
00:11:13,180 --> 00:11:16,404
iterative modes like Cli

164
00:11:16,452 --> 00:11:20,264
flex. So when the user

165
00:11:20,392 --> 00:11:24,076
type a flag after watch

166
00:11:24,258 --> 00:11:28,364
comment, I think it was to

167
00:11:28,402 --> 00:11:31,884
enter in an iterative mode like type

168
00:11:32,002 --> 00:11:36,370
watch trace a watch trace c.

169
00:11:37,380 --> 00:11:41,104
So it wasn't what the

170
00:11:41,302 --> 00:11:44,772
project boner means to say about

171
00:11:44,826 --> 00:11:48,292
how to create watch command or

172
00:11:48,426 --> 00:11:52,324
iterative terminal. I really understand what

173
00:11:52,362 --> 00:11:55,668
I have to do. After the repository

174
00:11:55,844 --> 00:11:59,752
owner showed me a video of how it works in

175
00:11:59,806 --> 00:12:03,992
rust links is the same

176
00:12:04,046 --> 00:12:07,876
project, but for the rest language. So after watching

177
00:12:07,918 --> 00:12:10,990
it I really understand what I have to do.

178
00:12:11,440 --> 00:12:14,764
And the second one, the time to

179
00:12:14,802 --> 00:12:18,940
work on an open source project is difficult to manage.

180
00:12:19,090 --> 00:12:23,180
I have my personal scheduling with tech communities,

181
00:12:23,340 --> 00:12:27,516
family content production and work related

182
00:12:27,628 --> 00:12:30,960
studies, and it took me about three months

183
00:12:31,030 --> 00:12:34,404
to actually finish my contribution. I love

184
00:12:34,442 --> 00:12:37,844
to work on it, but I wish I could do it

185
00:12:37,882 --> 00:12:41,524
faster. Because when I come back to pick up where I

186
00:12:41,562 --> 00:12:45,320
left off I often forgot what I was doing

187
00:12:45,390 --> 00:12:49,544
or thinking. So for my

188
00:12:49,582 --> 00:12:52,820
next contribution I have to better organize

189
00:12:52,900 --> 00:12:56,312
my schedule to keep my constants and not

190
00:12:56,366 --> 00:13:00,228
forget anything. And the last one I faced

191
00:13:00,324 --> 00:13:04,936
concohense problems and operational system notifications

192
00:13:04,968 --> 00:13:08,190
that we're going to show you. I'm going to show you now.

193
00:13:09,860 --> 00:13:13,852
This was my problem. Here we have a file

194
00:13:13,916 --> 00:13:18,096
that I am editing and check.

195
00:13:18,198 --> 00:13:21,772
Pay attention here. And this is mobile.

196
00:13:21,836 --> 00:13:26,176
And the left we have a simple code that represents

197
00:13:26,368 --> 00:13:30,116
what we built into now. A channel.

198
00:13:30,298 --> 00:13:34,288
A function that received a channel running in a goho chain.

199
00:13:34,384 --> 00:13:37,764
Another goal hosting and a for iterating

200
00:13:37,892 --> 00:13:43,912
in this channel that I pasted to understand which

201
00:13:43,966 --> 00:13:47,216
file have changed.

202
00:13:47,348 --> 00:13:51,144
So if a file is changed I want to print the file

203
00:13:51,192 --> 00:13:55,960
name here. And after 2 seconds I want to finishing

204
00:13:56,120 --> 00:13:59,940
my program. So pay attention

205
00:14:00,040 --> 00:14:06,336
here. I saved my file about 1234

206
00:14:06,518 --> 00:14:10,364
ive times. And my watch is in functions

207
00:14:10,412 --> 00:14:14,960
only printed one. And after it finished.

208
00:14:15,320 --> 00:14:18,196
And check this one again.

209
00:14:18,378 --> 00:14:21,204
One, two.

210
00:14:21,402 --> 00:14:25,016
I save it two times my file and

211
00:14:25,118 --> 00:14:27,832
it printed only the finish.

212
00:14:27,966 --> 00:14:32,024
So how channel works? How it

213
00:14:32,142 --> 00:14:35,464
must works. When I create a channel

214
00:14:35,582 --> 00:14:38,844
it receives the value like this

215
00:14:38,882 --> 00:14:42,588
one. I created a channel with two

216
00:14:42,674 --> 00:14:46,172
length of buffer. I insert one

217
00:14:46,306 --> 00:14:50,112
two and iterate over it

218
00:14:50,166 --> 00:14:54,560
to print it. So here is this print element

219
00:14:55,140 --> 00:14:59,376
and here is that two the last element that it

220
00:14:59,478 --> 00:15:01,920
passed to a variable.

221
00:15:03,000 --> 00:15:07,012
The channel must work with this. So every

222
00:15:07,066 --> 00:15:10,772
time I save a file change it must

223
00:15:10,826 --> 00:15:15,110
inserting the channel. So if it

224
00:15:15,640 --> 00:15:19,112
isn't inserting the event in my

225
00:15:19,166 --> 00:15:23,560
channel. I think or my system notification

226
00:15:23,980 --> 00:15:27,130
isn't working very well. Or maybe

227
00:15:28,640 --> 00:15:34,748
or I think it can means system

228
00:15:34,834 --> 00:15:37,960
problem with my machine,

229
00:15:38,120 --> 00:15:41,980
with the me one chip or maybe

230
00:15:42,050 --> 00:15:45,376
my code. But I faced this problem

231
00:15:45,478 --> 00:15:50,640
with a long time and

232
00:15:50,790 --> 00:15:55,568
thinking all the problems I face it or

233
00:15:55,734 --> 00:15:58,828
all the things I develop it.

234
00:15:59,014 --> 00:16:02,230
I thinking what I learned with that.

235
00:16:02,760 --> 00:16:06,104
The first one is get feedback as soon

236
00:16:06,142 --> 00:16:09,640
as faster. Talk it to people. Show your

237
00:16:09,710 --> 00:16:13,144
code and ask what they think. Maybe they

238
00:16:13,182 --> 00:16:17,112
can see things you're not seeing. Or teach you better ways

239
00:16:17,166 --> 00:16:18,970
to do what you're doing.

240
00:16:20,300 --> 00:16:24,264
Understand the go flow to the bug and how channels

241
00:16:24,312 --> 00:16:28,316
works. I work with go but I don't write a

242
00:16:28,338 --> 00:16:32,204
lot of code that use channel or handles with

243
00:16:32,242 --> 00:16:36,444
operational sustain notifications. So this project helped

244
00:16:36,492 --> 00:16:40,160
me a lot to understand how gold handles with

245
00:16:40,230 --> 00:16:43,808
this context and open source.

246
00:16:43,984 --> 00:16:47,348
Yes open source can help you a lot to understand

247
00:16:47,434 --> 00:16:50,740
of how the universe of technology works.

248
00:16:50,890 --> 00:16:54,464
It can turn a k in your head that

249
00:16:54,522 --> 00:16:58,312
you can also participate in discussions of

250
00:16:58,366 --> 00:17:01,960
tools that you use and you can create

251
00:17:02,030 --> 00:17:06,040
something new and create together with other

252
00:17:06,110 --> 00:17:09,624
people. I think it is an active

253
00:17:09,672 --> 00:17:13,500
learning where you're looking for information on

254
00:17:13,650 --> 00:17:17,724
how to do it and then you

255
00:17:17,762 --> 00:17:21,824
apply to practice. Okay. So if

256
00:17:21,862 --> 00:17:25,212
you can contribute to open source projects,

257
00:17:25,356 --> 00:17:28,370
I believe that will help you a lot.

258
00:17:29,380 --> 00:17:33,072
And thank you so much for watching my

259
00:17:33,126 --> 00:17:36,800
talk until here. Thank you for

260
00:17:36,870 --> 00:17:40,532
confidential, for accepting my talk and any

261
00:17:40,586 --> 00:17:44,164
questions or comments you have. I am at your

262
00:17:44,202 --> 00:17:48,672
disposal. You can find me on the network

263
00:17:48,816 --> 00:17:50,740
as Leislim.

264
00:17:53,560 --> 00:17:56,780
Usually my feet, my postures is important,

265
00:17:56,890 --> 00:18:00,200
is from Brazil, but I also talk in English.

266
00:18:00,280 --> 00:18:04,092
You can send me a message. Okay, see you.

267
00:18:04,226 --> 00:18:06,170
Bye. Take care and thank you.

