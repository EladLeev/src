1
00:00:38,370 --> 00:00:42,774
What is DevOps? DevOps, for me is more

2
00:00:42,812 --> 00:00:46,598
a culture, an approach of

3
00:00:46,764 --> 00:00:50,718
managing your projects, and so on. But I think once

4
00:00:50,804 --> 00:00:53,918
SRE came up in the picture, then we had actually

5
00:00:54,004 --> 00:00:57,310
toolings keep track on DevOps approach.

6
00:00:57,650 --> 00:01:01,662
And then now today, they are introducing a new role, which is

7
00:01:01,796 --> 00:01:05,482
being out there everywhere on the Internet, on the blog, on videos,

8
00:01:05,556 --> 00:01:09,250
and everywhere on platform engineering is the hot stuff. It's just that

9
00:01:09,400 --> 00:01:12,482
I think we were asking a lot of things to people,

10
00:01:12,616 --> 00:01:16,126
I think new roles pops up to

11
00:01:16,168 --> 00:01:20,162
resolve a lot of pressure put on the shoulders of engineers.

12
00:01:20,306 --> 00:01:24,182
I think platform engineering is a great thing, but I wonder if people

13
00:01:24,316 --> 00:01:27,954
fully understand what is behind platform engineering,

14
00:01:28,002 --> 00:01:31,242
what is not behind the platform engineering. And sometimes

15
00:01:31,296 --> 00:01:35,290
it's a bit confusing. I mean, I would argue that DevOps was never born,

16
00:01:35,950 --> 00:01:39,606
and because of that, it's not dead. And I don't want to reveal

17
00:01:39,638 --> 00:01:43,438
my age here, but if you go many years

18
00:01:43,524 --> 00:01:47,322
back and look at software engineers

19
00:01:47,386 --> 00:01:50,622
of 1980s, they were on the

20
00:01:50,676 --> 00:01:54,580
full spectrum of what it takes to write a code,

21
00:01:54,950 --> 00:01:58,158
get it out there, make sure it's run properly,

22
00:01:58,254 --> 00:02:01,746
and look after it. And then there was a period that we

23
00:02:01,768 --> 00:02:04,858
started to have a lot of different technologies,

24
00:02:04,974 --> 00:02:08,034
explosion of programming languages and technologies,

25
00:02:08,082 --> 00:02:11,510
and then specialist front end or

26
00:02:11,580 --> 00:02:15,362
middleware. And then gradually platform evolved

27
00:02:15,426 --> 00:02:18,934
and we started to see that, okay, we're creating

28
00:02:18,982 --> 00:02:22,634
silos. And then DevOps came about to break these silos and

29
00:02:22,672 --> 00:02:26,090
connect engineers back again. And now it's taking

30
00:02:26,160 --> 00:02:29,786
different guys like sres or platform

31
00:02:29,888 --> 00:02:33,578
engineering to perhaps do the same thing. What sres

32
00:02:33,674 --> 00:02:37,082
do, they go. At least one way of implementing

33
00:02:37,146 --> 00:02:41,040
is they embedded in the teams to make sure that the team understand

34
00:02:41,730 --> 00:02:44,270
your piece of code is not running on ether.

35
00:02:44,850 --> 00:02:48,594
What are the other components of it? I want to add to that,

36
00:02:48,632 --> 00:02:52,686
because I feel like part of why DevOps came to be is because software projects

37
00:02:52,718 --> 00:02:56,742
kept failing. Like with waterfall, something like only 30%

38
00:02:56,876 --> 00:02:59,190
of the projects would succeed.

39
00:03:01,290 --> 00:03:04,920
Obviously, all of mine went perfectly. Of course they were

40
00:03:05,290 --> 00:03:09,690
right. But lots of my friends projects failed.

41
00:03:10,030 --> 00:03:13,434
And part

42
00:03:13,472 --> 00:03:17,034
of the idea was when we switched to agile, it was like, what if

43
00:03:17,072 --> 00:03:20,506
we asked for feedback instead of building a

44
00:03:20,528 --> 00:03:24,166
thing in a silence for this really long time?

45
00:03:24,288 --> 00:03:28,126
And then with DevOps, it's like, what if we spoke to ops? What if

46
00:03:28,148 --> 00:03:31,422
we didn't, like you said, have the two silos? But also,

47
00:03:31,476 --> 00:03:34,826
what if we got feedback all the time? What if we tested

48
00:03:34,938 --> 00:03:38,914
all the time? What if we integrated constantly, your piece and

49
00:03:38,952 --> 00:03:42,386
my piece, so that in ten weeks from now, when we met and we

50
00:03:42,408 --> 00:03:44,914
tried to integrate it and it didn't work. And then we're both like, it's your

51
00:03:44,952 --> 00:03:47,780
fault. We've already tested that all the time,

52
00:03:48,550 --> 00:03:52,914
in my opinion, is like a lot of the magic, because I started seeing projects

53
00:03:52,962 --> 00:03:55,878
go just better and people getting along.

54
00:03:55,964 --> 00:04:00,054
and like you said, henrik, like culture change, it required so

55
00:04:00,092 --> 00:04:03,866
much change in the way we think and work. So I come from the

56
00:04:03,888 --> 00:04:07,702
performance engineering background, and when we were in waterfall,

57
00:04:07,766 --> 00:04:11,174
it was like we were doing things, and then we have to

58
00:04:11,232 --> 00:04:15,018
go to production, and then we were doing some optimizations,

59
00:04:15,114 --> 00:04:19,230
and the ops people were completely different. And the way you deploy,

60
00:04:19,570 --> 00:04:23,162
the way you were doing things, it was a consistent

61
00:04:23,226 --> 00:04:27,534
fight, or it was like going through the journey of explaining

62
00:04:27,582 --> 00:04:31,854
everything to another team. And that was so time consuming.

63
00:04:31,982 --> 00:04:35,566
I think the fact that now we merge the ops part of the development

64
00:04:35,598 --> 00:04:38,898
process makes the things much more easier.

65
00:04:38,994 --> 00:04:42,166
And I think to be fully DevOps, I think you need

66
00:04:42,188 --> 00:04:45,666
a platform that allow you to deploy from a code perspective.

67
00:04:45,778 --> 00:04:48,714
and store the assets of your, for example,

68
00:04:48,752 --> 00:04:52,170
kubernetes is, I think, one of the key driver to enable

69
00:04:52,990 --> 00:04:56,266
the DevOps approach. But if

70
00:04:56,288 --> 00:04:59,114
you're still in the old fashioned technology,

71
00:04:59,312 --> 00:05:03,050
it's more difficult to implement those automated

72
00:05:03,210 --> 00:05:07,306
processes to deploy things. I mean, at least that's my perspective.

73
00:05:07,338 --> 00:05:11,198
I think it really depends on what you have internally to fully apply this

74
00:05:11,364 --> 00:05:15,406
approach. Sometimes it's very difficult to

75
00:05:15,428 --> 00:05:19,342
put a triangle in a square or a square and triangle,

76
00:05:19,486 --> 00:05:23,166
because sometimes you force things. We want to be DevOps, 100% DevOps.

77
00:05:23,198 --> 00:05:26,340
But yeah, it doesn't fit. It doesn't fit, but let's change the shape instead.

78
00:05:26,710 --> 00:05:29,958
Yeah, I think with the emerging of cloud, 

79
00:05:30,044 --> 00:05:33,394
cloud native technology, I think now it's much more easier

80
00:05:33,442 --> 00:05:37,254
to get started and implement that. Yeah, I think part

81
00:05:37,292 --> 00:05:40,454
of it too is the evolution from waterfall to agile.

82
00:05:40,502 --> 00:05:44,806
Also mimic the evolution of shipping software on a CDrom

83
00:05:44,918 --> 00:05:48,438
to it always being online. And you cannot

84
00:05:48,614 --> 00:05:52,326
export all of your performance aNymore by shipping a cDROM

85
00:05:52,358 --> 00:05:56,554
to a customer aNd expecting them to install it, and then pay your consulting

86
00:05:56,602 --> 00:06:00,542
arm $10,000 a week or $10,000 a day sometimes

87
00:06:00,676 --> 00:06:05,166
to install it and manage it for them. So the

88
00:06:05,188 --> 00:06:08,834
loop is closed, right. You're getting more feedback from

89
00:06:08,952 --> 00:06:12,066
the users, and that means the developers have to be closer to

90
00:06:12,088 --> 00:06:15,474
production than they were when they were just shipping things off and putting

91
00:06:15,512 --> 00:06:19,682
cds in the mail and not caring about stuff anymore. So the whole evolution

92
00:06:19,746 --> 00:06:22,882
kind of mimics not only the software development lifecycle,

93
00:06:22,946 --> 00:06:26,166
but also the way you manage your teams and the way that your

94
00:06:26,188 --> 00:06:30,002
organization has to function because now the loop is a whole lot closer

95
00:06:30,066 --> 00:06:33,306
than it had been when you were shipping cds. So I think that

96
00:06:33,488 --> 00:06:36,378
evolution is still missing. Some people,

97
00:06:36,544 --> 00:06:41,270
I think, feel like there's still some developers out there who really haven't fully

98
00:06:41,430 --> 00:06:44,926
engaged with the idea that you're there

99
00:06:45,028 --> 00:06:48,526
to produce a thing that the customer wants and needs and

100
00:06:48,548 --> 00:06:52,158
is going to pay you for in most cases. And you want to

101
00:06:52,164 --> 00:06:55,874
get that feedback and incorporate that super quickly to get things

102
00:06:55,912 --> 00:06:59,902
better for the customer. That's a very good point because it kind of stretches

103
00:06:59,966 --> 00:07:03,774
in two way role of software engineers.

104
00:07:03,902 --> 00:07:07,266
I mean, DevOps is pulling it closer to

105
00:07:07,288 --> 00:07:10,646
operations high runs, but the other side that it

106
00:07:10,668 --> 00:07:14,006
should stretch is to understand the customer better. And I don't know, is there a

107
00:07:14,028 --> 00:07:17,494
name for customer DevOps? Is there a name

108
00:07:17,532 --> 00:07:21,318
for stretching that way? I think it's the so

109
00:07:21,404 --> 00:07:25,354
approach measuring how good

110
00:07:25,392 --> 00:07:29,162
your software is. And before that we were using, I don't know,

111
00:07:29,216 --> 00:07:33,238
centic monitoring, or we'll use a monitoring to react

112
00:07:33,334 --> 00:07:37,550
on something that was happening. And now we try to be aware before

113
00:07:37,620 --> 00:07:41,118
the actual user starts to see it. So I think we are

114
00:07:41,124 --> 00:07:45,294
getting better. We're getting better for sure. I remember being a software developer

115
00:07:45,422 --> 00:07:49,074
and wanting to show my progress to

116
00:07:49,112 --> 00:07:53,538
my client as I was working, and this was like 2012,

117
00:07:53,704 --> 00:07:56,962
this was not that long ago. And my boss saying like,

118
00:07:57,016 --> 00:08:00,158
no, they will wait until it's done. I'm like, no, I need to check with

119
00:08:00,184 --> 00:08:03,478
them to make sure I'm building what they want. And he's like, well, they're just

120
00:08:03,484 --> 00:08:06,806
going to change their mind all the time. And I'm like, here's the

121
00:08:06,828 --> 00:08:10,134
thing, buddy. I don't want to have to rebuild this in

122
00:08:10,172 --> 00:08:13,786
six months because I didn't build what was in their brain, right?

123
00:08:13,808 --> 00:08:15,994
And if I can show them like, oh, it's going to work like this,

124
00:08:16,032 --> 00:08:19,558
does that make sense? And draw pictures and do mockups

125
00:08:19,654 --> 00:08:20,540
and whatever.

126
00:08:22,350 --> 00:08:25,910
I am bad at making things pretty. I know I have this weakness,

127
00:08:25,990 --> 00:08:28,782
but they got the picture right, like a menu here, drag this over there.

128
00:08:28,836 --> 00:08:32,126
I'll make it look pretty later. And by I, I mean another person that's good

129
00:08:32,148 --> 00:08:35,986
at that. But do you know what I mean? We'll get this across as a

130
00:08:36,008 --> 00:08:39,554
bit of context. I now work in

131
00:08:39,592 --> 00:08:43,374
security. I now do application security. So I talk about devsecops.

132
00:08:43,422 --> 00:08:47,314
So I'm that person that thinks we need to bring security up a lot because

133
00:08:47,352 --> 00:08:51,250
it's not always happening. So I'm going to be injecting that into our conversation

134
00:08:51,410 --> 00:08:55,270
a bit because I cannot help myself I was wondering

135
00:08:55,690 --> 00:08:59,186
if the rest of you could give a bit of background of where you're

136
00:08:59,218 --> 00:09:02,666
coming from. Because I was a software engineer and then I switched to security

137
00:09:02,768 --> 00:09:06,714
and I briefly did cloud security because I couldn't make up my mind, but where

138
00:09:06,752 --> 00:09:10,134
each one of you are coming from before we start talking about the trends

139
00:09:10,182 --> 00:09:14,254
we're seeing. Yeah, Henrik, kick us come from.

140
00:09:14,292 --> 00:09:18,270
I used to be a software developer. I moved to performance engineering,

141
00:09:18,930 --> 00:09:22,458
where I spent most of my career. And then recently I moved from

142
00:09:22,564 --> 00:09:26,354
performance engineering to observability, which is

143
00:09:26,472 --> 00:09:28,930
a requirement for performance engineering.

144
00:09:29,670 --> 00:09:33,070
And I'm more touching, more cloud native

145
00:09:33,150 --> 00:09:36,806
topics now today than I did before because,

146
00:09:36,908 --> 00:09:40,280
yeah, you touch base technology that your customers are using

147
00:09:40,970 --> 00:09:44,038
and you don't explore necessary technology

148
00:09:44,204 --> 00:09:47,634
every day, depending on the time that you have. But yeah,

149
00:09:47,772 --> 00:09:51,194
performance and observability is my key topic. Can I

150
00:09:51,232 --> 00:09:54,678
ask, what is the difference between performance and observability

151
00:09:54,774 --> 00:09:57,420
for people that don't know? Like me,

152
00:09:58,830 --> 00:10:03,530
when you do performance engineering, you are driving

153
00:10:03,610 --> 00:10:06,714
the approach from the beginning, from the dev stage

154
00:10:06,762 --> 00:10:10,606
to production. What do we need to measure and what do we

155
00:10:10,628 --> 00:10:13,706
need to do to make sure that our system is performant?

156
00:10:13,818 --> 00:10:17,618
So performance could be. Many people think about response times

157
00:10:17,704 --> 00:10:21,074
naturally, and the fact that it's available and so on.

158
00:10:21,112 --> 00:10:24,114
But now with the fact that we move to the cloud now, there are also

159
00:10:24,152 --> 00:10:27,422
the aspect of energy consumptions of our data centers,

160
00:10:27,566 --> 00:10:31,202
the actual costs that we will basically

161
00:10:31,336 --> 00:10:34,434
been paying if we deploy this application into production.

162
00:10:34,562 --> 00:10:38,294
So the performance is not limited to

163
00:10:38,492 --> 00:10:42,266
response times anymore, it's larger. And to be able to

164
00:10:42,288 --> 00:10:45,882
measure, you need to be able to take decision, you need to measure it.

165
00:10:45,936 --> 00:10:49,354
This is where observability come into picture. We used to call

166
00:10:49,392 --> 00:10:54,606
it monitoring back in the old days. It's been renamed because

167
00:10:54,788 --> 00:10:58,522
we were mainly relying a few years back in metrics.

168
00:10:58,666 --> 00:11:01,626
That was the main thing. People were looking at dashboards,

169
00:11:01,738 --> 00:11:05,218
graphs, and we all had

170
00:11:05,304 --> 00:11:08,478
logs. And with the opentemetry

171
00:11:08,574 --> 00:11:12,766
project that emerged, distributed tracing has become very popular.

172
00:11:12,878 --> 00:11:16,566
And now the approach of obliberate is to take not

173
00:11:16,588 --> 00:11:20,278
only metrics into your decisions, you're taking all those

174
00:11:20,364 --> 00:11:24,022
various signals. So metric traces, logs, of course,

175
00:11:24,076 --> 00:11:28,194
profiling, if you do profiling, and then with all those signals

176
00:11:28,322 --> 00:11:31,606
contextualized, you can understand what is happening

177
00:11:31,708 --> 00:11:34,618
and you're more efficient when you need to troubleshoot. So at the end, when,

178
00:11:34,624 --> 00:11:37,754
if you don't want to do performance engineering properly, you rexed at least

179
00:11:37,792 --> 00:11:41,658
to have a proper observability stack in your environments. Otherwise it will be difficult to

180
00:11:41,664 --> 00:11:44,798
make decisions that's awesome. Thanks for humoring me.

181
00:11:44,884 --> 00:11:48,986
Who's next? Yeah, I'll go next. So yeah, I started out as a Linux

182
00:11:49,018 --> 00:11:52,074
systems administrator back when people thought that was foolish.

183
00:11:52,202 --> 00:11:56,302
And really, if you wanted to do systems should hamed done Solaris

184
00:11:56,366 --> 00:12:00,100
or Hpux and that panned out walls.

185
00:12:01,350 --> 00:12:04,642
Now I do community Devrel kind of things.

186
00:12:04,696 --> 00:12:08,618
So I currently work at Pagerduty. So we're working with incident response

187
00:12:08,654 --> 00:12:12,358
and helping people, figuring that whole process out and post mortems. And along the

188
00:12:12,364 --> 00:12:16,626
way I've done a whole lot of stuff DevOps wise as far as helping

189
00:12:16,658 --> 00:12:20,170
people modernize all of their practices. We do still run into

190
00:12:20,320 --> 00:12:23,946
companies that are doing agile fall. We'll say

191
00:12:24,128 --> 00:12:27,770
they get stuck along the way and are

192
00:12:27,920 --> 00:12:31,254
hindering their progress forward into modern

193
00:12:31,302 --> 00:12:34,858
practice with whether it's politics or fear or whatever the

194
00:12:34,864 --> 00:12:37,786
problem is, they just kind of get hung up in places.

195
00:12:37,978 --> 00:12:40,880
We talk about that too. I guess it's my turn.

196
00:12:41,650 --> 00:12:45,890
My story is a little bit complex.

197
00:12:46,550 --> 00:12:50,222
My background is civil engineering. So I graduated

198
00:12:50,286 --> 00:12:54,462
as a civil engineer. But I realized I just love programming.

199
00:12:54,526 --> 00:12:58,914
So after studying four years of civil engineering, I moved and studied software

200
00:12:58,962 --> 00:13:03,218
engineering and then worked as a software engineer.

201
00:13:03,394 --> 00:13:07,342
After a couple of times mistakenly deleting an whole Oracle

202
00:13:07,506 --> 00:13:12,074
database, I found a job as support

203
00:13:12,192 --> 00:13:15,834
team lead. I don't know why I got that job. Probably they didn't ask

204
00:13:15,872 --> 00:13:20,130
me enough questions in a financial trading

205
00:13:20,310 --> 00:13:24,990
company. And then now this is around 2013,

206
00:13:25,650 --> 00:13:28,926
I set up a team. I think that was the

207
00:13:28,948 --> 00:13:32,830
first time we invented this word of reliability.

208
00:13:33,410 --> 00:13:37,666
So came into space of there

209
00:13:37,688 --> 00:13:42,290
was DevOps going around at the time, then reliability engineering,

210
00:13:42,790 --> 00:13:46,862
and became very passionate and interested in incidents

211
00:13:46,926 --> 00:13:50,546
why system fails. and became big fan

212
00:13:50,578 --> 00:13:53,942
of locks of John Olsbo and Dr.

213
00:13:53,996 --> 00:13:57,240
Richard Cook, if you know them.

214
00:13:57,550 --> 00:14:00,950
And my journey as head of reliability

215
00:14:01,030 --> 00:14:04,362
engineering ended two years ago when I

216
00:14:04,416 --> 00:14:08,810
became a founder. So I left my job to set up a company called

217
00:14:08,960 --> 00:14:12,782
Uptime Labs, which our work is very much

218
00:14:12,916 --> 00:14:16,714
on. Incident response. and creating simulations

219
00:14:16,762 --> 00:14:20,458
and drills and getting better at incidents.

220
00:14:20,554 --> 00:14:23,426
One reason I did it because I was really missing coding. I said, okay,

221
00:14:23,448 --> 00:14:27,860
if I build my own company, I can do coding. That's not true.

222
00:14:31,510 --> 00:14:35,174
I love it for many other reasons, but that didn't work

223
00:14:35,212 --> 00:14:38,406
out. Oh my God,

224
00:14:38,428 --> 00:14:42,006
it's so true. I founded my own company too. And you

225
00:14:42,028 --> 00:14:46,098
end up doing management meetings and marketing

226
00:14:46,194 --> 00:14:49,642
and partnerships and it's like, when do I get to do the cool

227
00:14:49,696 --> 00:14:50,540
part again?

228
00:14:52,990 --> 00:14:56,426
That's hard. That part of me is still alive. One day

229
00:14:56,448 --> 00:15:00,186
I'm going to get back to coding, but they just don't know

230
00:15:00,208 --> 00:15:03,206
where. Well if you get acquired, you could do that. That's what I did,

231
00:15:03,248 --> 00:15:06,158
I got acquired. Now I get to kind of go back to do some of

232
00:15:06,164 --> 00:15:09,290
the stuff I wanted to do. Someone else has to be the boss.

233
00:15:09,450 --> 00:15:10,160
Yeah,

234
00:15:13,810 --> 00:15:17,780
I'm not in charge anymore. Hands off, hands off. You got it.

235
00:15:19,350 --> 00:15:23,010
So what types of trends are we seeing with DevOps?

236
00:15:23,350 --> 00:15:27,186
Because things are changing. Right? Does anyone want to throw some thoughts

237
00:15:27,218 --> 00:15:30,710
out there? I think what would be interesting

238
00:15:30,780 --> 00:15:34,470
is to why did we brought up platform engineering

239
00:15:35,050 --> 00:15:39,078
initially when this role came up in the picture, when I real

240
00:15:39,244 --> 00:15:42,762
reading that blog and they were saying oh, we're going to make

241
00:15:42,816 --> 00:15:46,410
an ops role back. And I said what? I thought that

242
00:15:46,480 --> 00:15:49,786
we were going to put the ops back in the

243
00:15:49,808 --> 00:15:53,086
same team. And then no, they kind of

244
00:15:53,108 --> 00:15:56,574
create a role separate. And then I said okay,

245
00:15:56,612 --> 00:16:00,094
so this is interesting. And once you go

246
00:16:00,132 --> 00:16:03,454
further in your topic, you realize that, yeah, if I

247
00:16:03,492 --> 00:16:06,974
ask my DevOps team to do their pipeline,

248
00:16:07,022 --> 00:16:10,802
their automation, but they need to deploy in kubernetes, so they have to manage also

249
00:16:10,856 --> 00:16:15,054
the knowledge in kubernetes. And then in kubernetes you have probably some security aspects,

250
00:16:15,102 --> 00:16:18,886
some network routing components to include and

251
00:16:18,908 --> 00:16:22,774
then you're asking so much expertise to everyone but nobody can

252
00:16:22,812 --> 00:16:26,310
keep up on this. So that's why I think it was really

253
00:16:26,460 --> 00:16:29,730
beneficial to put like a team

254
00:16:29,820 --> 00:16:32,966
that will be central, that build that apps

255
00:16:32,998 --> 00:16:36,490
catalog so then people can just pick up what they need

256
00:16:36,640 --> 00:16:40,202
to basically have the right assets for their applications and then focus

257
00:16:40,256 --> 00:16:43,838
on the things that they need to deliver that will bring value to

258
00:16:43,844 --> 00:16:47,550
the business. I think it's a new role that walls make

259
00:16:47,700 --> 00:16:51,578
the DevOps culture even more stronger in the organizations.

260
00:16:51,674 --> 00:16:55,018
I think that was a missing component and I think I'm very

261
00:16:55,044 --> 00:16:58,658
happy to see it. And I'm really eager to see if

262
00:16:58,824 --> 00:17:02,382
most of the organization implementing platform engineering,

263
00:17:02,446 --> 00:17:05,418
not just renaming the role because it's the first reaction. So I'm going to rename

264
00:17:05,454 --> 00:17:08,674
my DevOps whatever engineer into platform engineering.

265
00:17:08,722 --> 00:17:12,182
Now I'm more thinking of since

266
00:17:12,236 --> 00:17:15,526
we started that practice, are we more efficient in

267
00:17:15,548 --> 00:17:19,026
the way we deliver our software in production? I walls be very eager

268
00:17:19,058 --> 00:17:22,166
to hear about that because this role is quite

269
00:17:22,188 --> 00:17:25,642
new, it's less than a year old. But I think

270
00:17:25,776 --> 00:17:29,354
if you do it well, I'm pretty sure that it's going to bring

271
00:17:29,392 --> 00:17:32,474
a lot of value for the organizations, at least for making the automation

272
00:17:32,522 --> 00:17:36,010
more stronger, making sure that the observability

273
00:17:36,090 --> 00:17:39,482
piece that is required later on for the sres, the performance engineers

274
00:17:39,546 --> 00:17:43,902
or any other aspects is already considered very

275
00:17:43,956 --> 00:17:46,994
early when they build their solution. So I think,

276
00:17:47,112 --> 00:17:51,022
yeah, it's like the check marks required to make it successful

277
00:17:51,166 --> 00:17:54,786
will be managed by this team. So I think that hope that

278
00:17:54,888 --> 00:17:58,326
across the fingers, that is going to be valuable for 2024.

279
00:17:58,348 --> 00:18:02,598
Yeah, I think the interesting thing about product engineering is that it looked by platform

280
00:18:02,684 --> 00:18:06,214
engineering is that it looks like an internal product, like you

281
00:18:06,252 --> 00:18:10,074
are building your internal components to

282
00:18:10,112 --> 00:18:14,134
help your application developers utilize

283
00:18:14,182 --> 00:18:18,070
all of the products that you use to build your software.

284
00:18:18,150 --> 00:18:22,234
And part of that is your golden path or your paved

285
00:18:22,282 --> 00:18:26,720
roads or however you're putting that together. And that is very much a product

286
00:18:27,170 --> 00:18:30,958
building kind of mindset with your customers being

287
00:18:31,044 --> 00:18:34,606
your internal developers. And that's going to be some input from your

288
00:18:34,628 --> 00:18:37,970
SRE team. What should we monitor, what should the performance look like? What are we

289
00:18:38,040 --> 00:18:41,886
consuming for that? Plus all your application developers, what's the pipeline?

290
00:18:41,998 --> 00:18:45,314
What are you doing for integration? Testing what's the other

291
00:18:45,352 --> 00:18:49,234
components that you need and putting all that stuff together to facilitate everyone else's

292
00:18:49,282 --> 00:18:53,186
work. And I think that's a kind of role we haven't

293
00:18:53,218 --> 00:18:56,690
really seen for a while. Like the pendulum swings.

294
00:18:56,770 --> 00:18:59,926
We've gotten to a point where there's so much complexity that someone needs

295
00:18:59,948 --> 00:19:03,174
to go deep on this stuff, and that's not going to be your application DevOps.

296
00:19:03,222 --> 00:19:06,934
You want them going deep on your application languages, not on all the other SaaS

297
00:19:06,982 --> 00:19:10,614
components or whatever else you're doing. And so we need more expertise

298
00:19:10,742 --> 00:19:14,158
into some of these pieces for folks to continue to

299
00:19:14,164 --> 00:19:17,518
be successful. From a security perspective, I think that platform

300
00:19:17,604 --> 00:19:21,034
engineering is super exciting because, hamed,

301
00:19:21,082 --> 00:19:24,398
you probably are thinking the same thing when you're responding to a security

302
00:19:24,484 --> 00:19:28,306
incident. So first of all, you don't know till after unless you have

303
00:19:28,328 --> 00:19:32,238
some sort of observability going on, right? You get told after you're

304
00:19:32,254 --> 00:19:35,742
looking at everything after the disaster has happened as opposed to being alerted.

305
00:19:35,806 --> 00:19:39,102
It's happening right now. And that's super exciting.

306
00:19:39,166 --> 00:19:42,726
Like so many companies I've worked at, they're like, hey, can you go investigate this?

307
00:19:42,748 --> 00:19:46,146
I'm like, you have no logs. What am I investigating? You've literally

308
00:19:46,178 --> 00:19:49,802
made no evidence for me, right? And I'm still finding that

309
00:19:49,936 --> 00:19:53,334
still on the regular, they're like, oh, logging is really expensive,

310
00:19:53,382 --> 00:19:57,146
or monitoring is too expensive. So we just turned all of that off and

311
00:19:57,168 --> 00:19:57,980
I'm like,

312
00:20:00,590 --> 00:20:04,218
it's true. And then a lot of security tools don't work properly if you don't

313
00:20:04,234 --> 00:20:08,174
have those turned on, how are we supposed to detect bad stuff's happening.

314
00:20:08,292 --> 00:20:12,046
And so now that we have these platform engineers, we could talk with

315
00:20:12,068 --> 00:20:15,278
them and work with them and try to figure out like, hey, this looks like

316
00:20:15,284 --> 00:20:18,386
a security incident. Maybe if you see stuff like this, you could call us and

317
00:20:18,408 --> 00:20:22,002
we could come and check it out with you. Because if you can catch something

318
00:20:22,056 --> 00:20:25,426
as it's happening, you can save a lot of money if

319
00:20:25,448 --> 00:20:28,066
you can find it very quickly and close it off.

320
00:20:28,248 --> 00:20:31,414
I hamed done security incidents where I'm like, this cost more than

321
00:20:31,452 --> 00:20:34,486
my house, this mistake, right?

322
00:20:34,668 --> 00:20:37,814
And then if it goes on and on, it's just like every single day,

323
00:20:37,852 --> 00:20:41,480
worse and worse and worse. I worked with a company once and

324
00:20:42,010 --> 00:20:45,370
they almost, if you do business

325
00:20:45,440 --> 00:20:48,874
online and you don't have access to credit cards, your business is

326
00:20:48,912 --> 00:20:52,666
sort of toast. Most customers aren't

327
00:20:52,698 --> 00:20:56,446
willing to just do PayPal or cryptocurrencies. They want to use their

328
00:20:56,468 --> 00:21:00,110
visa or their Mastercard. And they had screwed things up so badly they almost

329
00:21:00,180 --> 00:21:03,374
got no more credit card.

330
00:21:03,572 --> 00:21:07,246
And so it's really serious, right? And so I'm

331
00:21:07,278 --> 00:21:10,450
pretty excited about this change and this focus on observability.

332
00:21:11,430 --> 00:21:14,674
I know that it's really good for all sorts of things, but the security people

333
00:21:14,712 --> 00:21:16,980
are having a bit of a party. Just so you know,

334
00:21:19,670 --> 00:21:23,506
from an observer perspective, we think that. I'm not saying that the expertise

335
00:21:23,538 --> 00:21:27,190
on security is part of observability, but the data that comes

336
00:21:27,260 --> 00:21:30,746
out of security toolings is clearly an

337
00:21:30,768 --> 00:21:34,730
angle for observability. Being able to, if you have a vulnerability

338
00:21:35,150 --> 00:21:38,602
alert, being able to figure out what are the user journey or

339
00:21:38,656 --> 00:21:42,026
what are the path the user journey in the

340
00:21:42,048 --> 00:21:46,014
application that are impacted by this issue. To then make

341
00:21:46,052 --> 00:21:49,518
a patch quickly and dirty so then people can buy

342
00:21:49,604 --> 00:21:52,990
is crucial because you say, oh, we are vulnerable,

343
00:21:54,230 --> 00:21:57,902
but where and who is impacted?

344
00:21:58,046 --> 00:22:01,186
And if you start asking those questions, then you are screwed for

345
00:22:01,208 --> 00:22:04,578
sure. So what is the boundaries of platform

346
00:22:04,664 --> 00:22:08,038
engineer? Is it, sometimes I come across

347
00:22:08,124 --> 00:22:11,686
it and include some dev toolings in

348
00:22:11,708 --> 00:22:15,026
some organization. I see that, oh, there's a platform engineering team and there's

349
00:22:15,058 --> 00:22:18,234
a dev tooling team or dev engineering or

350
00:22:18,352 --> 00:22:22,058
developer experience engineering. That's another one that

351
00:22:22,144 --> 00:22:25,354
I heard recently. Devex for me

352
00:22:25,392 --> 00:22:29,210
is if you have a platform like kubernetes, you will set up

353
00:22:29,280 --> 00:22:32,414
all the best practices to first utilize in a more

354
00:22:32,452 --> 00:22:36,270
efficient way. The resources that you may consume in your cluster

355
00:22:37,090 --> 00:22:40,510
provide all the default toolings that

356
00:22:40,580 --> 00:22:43,178
will make their development successful.

357
00:22:43,354 --> 00:22:47,118
And if they want to use Argo or flux or whatever to deploy,

358
00:22:47,214 --> 00:22:50,354
they can pick and choose in the app catalog, deploy it,

359
00:22:50,392 --> 00:22:54,226
and maybe provide like a pipeline template, because sometimes when you

360
00:22:54,248 --> 00:22:57,286
move on to another pipeline tooling, then you have

361
00:22:57,308 --> 00:23:00,646
to learn it. And people moving from Jenkins then

362
00:23:00,668 --> 00:23:04,070
to Argo say oh, it's completely different. And then

363
00:23:04,140 --> 00:23:08,530
people have to get onboarding into those new tooling. So having

364
00:23:08,620 --> 00:23:12,262
some templates so people can get started easily, easier.

365
00:23:12,326 --> 00:23:16,246
Yeah, I think it's also something and also not from an architecture

366
00:23:16,278 --> 00:23:19,642
perspective, but more. The platform engineer will

367
00:23:19,696 --> 00:23:23,278
have to check that everyone is respecting our best practices in terms of, I don't

368
00:23:23,284 --> 00:23:27,306
know, we have to set resource allocations values,

369
00:23:27,418 --> 00:23:30,634
otherwise your workload will consume forever.

370
00:23:30,762 --> 00:23:33,786
So yeah, just putting the standards. So yeah,

371
00:23:33,908 --> 00:23:37,554
the customers are the team and not

372
00:23:37,672 --> 00:23:41,090
the users of the applications. But I

373
00:23:41,160 --> 00:23:45,026
had a question on my mind and say, as a platform engineer, I'm pretty much

374
00:23:45,048 --> 00:23:48,262
disconnected from the value that my organization is providing to

375
00:23:48,316 --> 00:23:51,830
the market. So is there a way to link

376
00:23:51,980 --> 00:23:55,286
or measure which project are more important to the

377
00:23:55,308 --> 00:23:58,434
other based on revenue or based on, I don't know, on critical

378
00:23:58,482 --> 00:24:02,054
applications. So then if he needs to react to a request,

379
00:24:02,182 --> 00:24:05,978
you will make the priority based on which app is more important compared to

380
00:24:05,984 --> 00:24:09,194
the other. I don't know. There is a lot of questions related to

381
00:24:09,232 --> 00:24:12,938
platform engineers still out there, but I think it's

382
00:24:12,954 --> 00:24:16,334
a good sign. Our industry, IT industry, I think we

383
00:24:16,372 --> 00:24:20,762
are pretty young comparing to established industries

384
00:24:20,826 --> 00:24:23,730
like aviation or civil engineering.

385
00:24:24,310 --> 00:24:28,114
Decades and decades, and probably some of them stretches to 100 years.

386
00:24:28,312 --> 00:24:32,386
They evolved, learned the rules, became very clear,

387
00:24:32,488 --> 00:24:36,274
but it I feel still we are discovering what rules

388
00:24:36,402 --> 00:24:40,246
we need and how complex these systems should

389
00:24:40,268 --> 00:24:43,942
be. Sometimes I think like are we making things

390
00:24:44,076 --> 00:24:48,122
too complex to just deploy a hello word

391
00:24:48,256 --> 00:24:52,266
Javascript? With using these new frameworks, you end

392
00:24:52,288 --> 00:24:56,070
up downloading 50 megabytes, running five tools,

393
00:24:56,150 --> 00:25:00,022
gradle or whatever to compile it, and then hold the AWS

394
00:25:00,086 --> 00:25:04,166
stuff to ship it out, and that used to be like notepad

395
00:25:04,198 --> 00:25:07,946
and HTML command. And I'm not sure if it's like we're

396
00:25:07,978 --> 00:25:12,000
going too much complex for the same result or is a really good reason.

397
00:25:13,970 --> 00:25:17,410
That's a question I hamed love to hear your perspectives.

398
00:25:17,830 --> 00:25:21,410
I think you make a really interesting point,

399
00:25:21,560 --> 00:25:25,246
but I think the it industry

400
00:25:25,358 --> 00:25:29,234
has learned from the car manufacturing

401
00:25:29,282 --> 00:25:32,962
industry. So we shifted

402
00:25:33,026 --> 00:25:36,982
the agile and other processes based on how they were doing things.

403
00:25:37,036 --> 00:25:40,294
So I think if they're doing better, maybe in ten years

404
00:25:40,332 --> 00:25:43,674
we'll be as good as they are. I think that the

405
00:25:43,712 --> 00:25:46,858
apps we're building are totally different than we used to.

406
00:25:47,024 --> 00:25:50,474
I remember making an app that was for twelve people being like this is

407
00:25:50,512 --> 00:25:54,638
ridiculous. But I would make apps for 2000 people, for 3000 people.

408
00:25:54,804 --> 00:25:58,266
And then I went and worked at Microsoft and we're

409
00:25:58,298 --> 00:26:01,342
working on stuff that millions of people use.

410
00:26:01,476 --> 00:26:05,170
And when there's the tiniest memory leak in something,

411
00:26:05,240 --> 00:26:08,862
it's catastrophic. Like the smallest error,

412
00:26:09,006 --> 00:26:13,074
when you're scaling like that, it becomes ginormous. And so I

413
00:26:13,112 --> 00:26:16,826
also think that the complexity is in what users are expecting

414
00:26:16,878 --> 00:26:20,230
these tools to do. Now, like we were talking

415
00:26:20,300 --> 00:26:23,894
earlier, before you got here, hamed, about how I was on a flight that

416
00:26:23,932 --> 00:26:27,302
got canceled, I couldn't go into

417
00:26:27,356 --> 00:26:30,726
the app and cancel the ticket. I went and just

418
00:26:30,748 --> 00:26:33,706
bought a ticket from some other airline. I was like, listen, you've delayed me three

419
00:26:33,728 --> 00:26:36,906
days, you want to delay me two more? I'm not moving to London, even though

420
00:26:36,928 --> 00:26:40,294
it's a lovely city, I need to go home. And they just kept canceling

421
00:26:40,342 --> 00:26:44,926
it every day and I was getting pretty nervous. So I

422
00:26:44,948 --> 00:26:48,446
was like, I'm going to spend some money today, but I still can't cancel the

423
00:26:48,468 --> 00:26:52,106
ticket. And they're still rescheduling me. I don't know what they think they're

424
00:26:52,138 --> 00:26:55,834
doing, but the fact that I can't even go on the Internet and cancel,

425
00:26:55,882 --> 00:26:59,774
I have to wait on hold for like 8 hours. I'm like, this is unacceptable.

426
00:26:59,822 --> 00:27:02,866
But think about ten years ago, think about 20 years ago,

427
00:27:02,968 --> 00:27:06,306
you would never be like, I can't believe I can't press some

428
00:27:06,328 --> 00:27:10,274
buttons and cancel a flight. Now you can compare a zillion

429
00:27:10,322 --> 00:27:14,006
flights and you can decide a zillion other things, right? You could

430
00:27:14,028 --> 00:27:17,270
never do that before. So what the expectation is of the customer,

431
00:27:17,340 --> 00:27:21,158
I feel has completely changed. That's very interesting. So it's

432
00:27:21,174 --> 00:27:24,810
a market pool that demands complexity.

433
00:27:25,470 --> 00:27:28,826
I think so. I also think that over this time,

434
00:27:28,928 --> 00:27:32,918
so when I started writing code like in the

435
00:27:32,944 --> 00:27:36,654
weren't hackers all over malicious actors trying to get into things all

436
00:27:36,692 --> 00:27:39,966
the time? And now as soon as you put an

437
00:27:39,988 --> 00:27:44,362
app on the Internet, someone's scanning it, someone is trying to get in there immediately.

438
00:27:44,506 --> 00:27:48,946
And that's not a thing that when I went to college in the

439
00:27:48,968 --> 00:27:52,066
hamed to deal with, right. And so software developers are not

440
00:27:52,088 --> 00:27:55,422
only facing customers that are very sophisticated,

441
00:27:55,566 --> 00:27:58,834
that have advanced needs and wants and expectations,

442
00:27:58,962 --> 00:28:02,982
they also have attackers that are just like all over them.

443
00:28:03,116 --> 00:28:06,534
That's not stuff. When I was a dev, I remember I was just

444
00:28:06,572 --> 00:28:10,098
starting to have scans done before I switched to becoming

445
00:28:10,114 --> 00:28:13,722
a pen tester where I seemed like a genius because I had

446
00:28:13,776 --> 00:28:16,682
a little scanner that could just check the things, right.

447
00:28:16,816 --> 00:28:20,154
And things have just really catapulted in this new way.

448
00:28:20,192 --> 00:28:23,406
This is my opinion. What does everyone else think? Yeah, I think

449
00:28:23,508 --> 00:28:27,098
we're kind of suffering from our own success, like the ubiquity

450
00:28:27,274 --> 00:28:31,498
of software in lives and generally in the culture

451
00:28:31,594 --> 00:28:35,198
and all those things. And someone wants to sell you a smart washing machine.

452
00:28:35,214 --> 00:28:39,214
and I'm like, I don't really need a smart washing machine.

453
00:28:39,262 --> 00:28:42,866
I need it to wash my clothes, and that's great. I don't

454
00:28:42,888 --> 00:28:46,238
need anything else out of that. But incorporating all of that sort

455
00:28:46,264 --> 00:28:50,502
of digitization into all your regular life has really become

456
00:28:50,636 --> 00:28:53,702
something that, like you say, we didn't learn that

457
00:28:53,756 --> 00:28:57,298
in a computer science degree, and you kind of still don't.

458
00:28:57,394 --> 00:29:00,314
Mandi, it's going to look a lot different, I think,

459
00:29:00,512 --> 00:29:04,358
even going forward, as things continue to go. And it's

460
00:29:04,374 --> 00:29:07,466
not like we're intentionally injecting complexity. It's that things are

461
00:29:07,488 --> 00:29:11,594
naturally complex as you continue to add components to them. And when

462
00:29:11,632 --> 00:29:15,534
we were dealing with server workstation kind of conversations, that was one

463
00:29:15,572 --> 00:29:18,906
thing. And now we've got distributed systems and they're geographically dispersed,

464
00:29:18,938 --> 00:29:22,570
and there's lots of codependencies and other things that live in other places.

465
00:29:22,650 --> 00:29:26,694
And yeah, you have a lot more robust and sophisticated software,

466
00:29:26,762 --> 00:29:29,982
but at the same time, your environment that it lives in, the topology

467
00:29:30,046 --> 00:29:33,662
that it lives in, is in some ways much more fragile and sometimes very brittle.

468
00:29:33,806 --> 00:29:37,382
Even the complexity of the system is based also

469
00:29:37,436 --> 00:29:40,934
because everything is based on software today. A few years

470
00:29:40,972 --> 00:29:43,954
back, it was mainly apps or web apps,

471
00:29:44,002 --> 00:29:47,462
maybe, and now even the car. The car

472
00:29:47,516 --> 00:29:51,222
has software, has tons of software. It's not even a traditional

473
00:29:51,286 --> 00:29:54,780
car where you just can plug things and repair things.

474
00:29:55,790 --> 00:29:58,650
You need a computer to understand and diagnose the problem.

475
00:29:58,720 --> 00:30:02,286
So that shows where are we heading. Everything is based on

476
00:30:02,308 --> 00:30:06,094
software. So everyone is afraid of having

477
00:30:06,212 --> 00:30:10,160
the software dying and then being dead and then

478
00:30:10,770 --> 00:30:14,500
generating a lot of consequences. I have a customer which is

479
00:30:15,830 --> 00:30:19,650
one of the leader in the transport containers

480
00:30:19,990 --> 00:30:23,454
on the sea. And it's even impressive.

481
00:30:23,502 --> 00:30:27,430
So they have, every single container

482
00:30:28,090 --> 00:30:31,922
that is in the ship has a small IoT

483
00:30:31,986 --> 00:30:34,850
device. So they are pinging,

484
00:30:35,010 --> 00:30:39,254
depending on the container, what it is inside. You can also measure the

485
00:30:39,372 --> 00:30:43,078
temperature, things like this to figure out even when it's

486
00:30:43,094 --> 00:30:46,714
been delivered on the destination, if the transport was done well,

487
00:30:46,752 --> 00:30:50,826
and if the product has not been impacted or infected, whatever. And then

488
00:30:50,928 --> 00:30:55,082
even those company, now they are building even the networking.

489
00:30:55,146 --> 00:30:58,846
So then when they are in the middle of the sea, those containers is

490
00:30:58,868 --> 00:31:02,702
still able to communicate back to the main data center. So, I mean,

491
00:31:02,756 --> 00:31:06,274
in the 90s, we never thought about that. It's just that

492
00:31:06,312 --> 00:31:09,922
now we are overflowed by data and

493
00:31:10,056 --> 00:31:13,330
we love data. And just to see the explosion of

494
00:31:13,400 --> 00:31:17,586
AI implementations, everyone wants to take the data, make some great features

495
00:31:17,618 --> 00:31:21,686
about knowing our customers, suggesting great

496
00:31:21,708 --> 00:31:24,918
things to their customers, and behind you have data and so you have to

497
00:31:24,924 --> 00:31:27,190
process that. So even more bigger software,

498
00:31:29,630 --> 00:31:34,218
those software that process data is usually super

499
00:31:34,304 --> 00:31:37,526
expensive. And yeah, I think it's

500
00:31:37,638 --> 00:31:41,254
not only about the we are touching more people because we can operate

501
00:31:41,302 --> 00:31:44,894
from a small country, do a business from a small island, and you can

502
00:31:44,932 --> 00:31:48,362
basically deliver to all the people on earth,

503
00:31:48,426 --> 00:31:52,062
which is amazing. We never thought about that in sure, it's really

504
00:31:52,116 --> 00:31:56,238
interesting that the software and computer systems

505
00:31:56,414 --> 00:32:00,226
just getting into every aspect of our life and

506
00:32:00,408 --> 00:32:04,322
that I think puts a huge responsibility on it

507
00:32:04,456 --> 00:32:07,606
engineers, anyone in this industry. And I

508
00:32:07,628 --> 00:32:10,934
think probably we need to wake up and accept that our industry is now a

509
00:32:10,972 --> 00:32:14,790
safety critical industry, because system failure

510
00:32:15,130 --> 00:32:18,300
can have impacts far worse than

511
00:32:19,550 --> 00:32:22,330
plane falling off the sky, for instance,

512
00:32:23,070 --> 00:32:26,506
payments, transport, all aspect of it

513
00:32:26,608 --> 00:32:30,966
is dependent on it. And I was looking into this topic because

514
00:32:31,008 --> 00:32:35,098
of my interest in incidents and how organizations look into incident response,

515
00:32:35,194 --> 00:32:38,638
and I realized that software is so important,

516
00:32:38,804 --> 00:32:41,946
we are it. I would say it's already safety

517
00:32:41,978 --> 00:32:45,620
critical industry, but in terms of

518
00:32:46,230 --> 00:32:49,922
regulations and standards and practices, we are far

519
00:32:49,976 --> 00:32:53,474
behind other safety critical industries. If you look at

520
00:32:53,512 --> 00:32:57,210
aviation, there are specifications how to build a reliable plane,

521
00:32:57,310 --> 00:33:01,014
how to test it, how every component needs to,

522
00:33:01,052 --> 00:33:03,958
what regulations they need to comply with in it.

523
00:33:04,044 --> 00:33:06,966
That reliability is pretty much kind of relying that, you know,

524
00:33:06,988 --> 00:33:10,522
that platform engineer that I hired, he hopefully have

525
00:33:10,576 --> 00:33:13,734
read released it book by Michael Niegar,

526
00:33:13,862 --> 00:33:17,850
and knows how to build a system that doesn't fail and

527
00:33:17,920 --> 00:33:21,226
have resilience. So I think that's the next big thing for

528
00:33:21,248 --> 00:33:25,274
our industry to wake up to the fact that it's a safety critical industry

529
00:33:25,402 --> 00:33:29,214
and take steps toward that. And I'm sure regulations will catch up. I see

530
00:33:29,252 --> 00:33:32,346
already in financial services in Europe,

531
00:33:32,378 --> 00:33:36,082
there's a regulation called Dora Digital Operational Resiliency act,

532
00:33:36,216 --> 00:33:39,826
which is starting to better define how

533
00:33:40,008 --> 00:33:43,650
IT systems and financial services needs to be

534
00:33:43,800 --> 00:33:47,478
resilient. So I think that will be a big pattern. I don't know

535
00:33:47,484 --> 00:33:50,120
how from platform engineers we got to this point,

536
00:33:52,250 --> 00:33:57,138
but you made an interesting point to say that I'm

537
00:33:57,154 --> 00:34:00,906
very interested in the green it topic. I'm following that

538
00:34:00,928 --> 00:34:04,266
aspect as of now, as of today, just the software that

539
00:34:04,288 --> 00:34:08,122
we have in data centers, and in the cloud is 3%

540
00:34:08,176 --> 00:34:11,498
of the carbon footprint. But the problem is that

541
00:34:11,504 --> 00:34:15,678
we are adding more and more software, more and more data

542
00:34:15,844 --> 00:34:19,406
every month, every day is added. And if we don't do

543
00:34:19,508 --> 00:34:23,138
nothing, it would just keep this growing. The way we

544
00:34:23,224 --> 00:34:27,634
utilize resources, we're going to reach out. I think they say

545
00:34:27,752 --> 00:34:31,666
more than 16% of carbon footprint usage globally will

546
00:34:31,688 --> 00:34:35,366
be data centers, and just the airline industry is

547
00:34:35,388 --> 00:34:39,874
10%, so which means that data center will be bigger impact

548
00:34:39,922 --> 00:34:43,842
on earth than just flying overseas,

549
00:34:43,986 --> 00:34:47,882
which is crazy. So I think it's a topic that people

550
00:34:47,936 --> 00:34:52,182
need to understand and try to build software

551
00:34:52,326 --> 00:34:55,766
in a smart way. And one topic I want to also brought

552
00:34:55,798 --> 00:34:59,670
up, you mentioned why are we not respecting

553
00:34:59,750 --> 00:35:03,326
all those processes? And I think it's pretty much related to the fact

554
00:35:03,348 --> 00:35:07,534
that technology is moving so fast in it world.

555
00:35:07,732 --> 00:35:11,118
There's always a new framework out there, there's always a

556
00:35:11,124 --> 00:35:14,866
new things to learn out, learn from. And there's a lot of

557
00:35:14,888 --> 00:35:18,420
open source project, because open source is innovation today,

558
00:35:18,870 --> 00:35:22,498
and keeping track and being able to

559
00:35:22,584 --> 00:35:25,982
know everything today for normal engineers

560
00:35:26,046 --> 00:35:30,742
is impossible. So it's a never ending learning job

561
00:35:30,876 --> 00:35:34,294
working in it, for sure. Earlier, when you were talking about all the

562
00:35:34,332 --> 00:35:38,406
data, we're collecting a thing that I have seen. So on

563
00:35:38,428 --> 00:35:41,414
the security side, and privacy specifically,

564
00:35:41,462 --> 00:35:44,858
we talk about data minimization. So, like a

565
00:35:44,864 --> 00:35:48,186
lot of marketing companies or marketing teams, they collect everything.

566
00:35:48,288 --> 00:35:51,978
Like, every time you take a breath, they would like to collect that, but a

567
00:35:51,984 --> 00:35:55,534
lot of them are. One, they're not using it. Two, it's none of their business.

568
00:35:55,652 --> 00:35:59,310
And so a thing within the security and especially the privacy community

569
00:35:59,380 --> 00:36:02,974
is like, why don't you not collect it unless you actually need it. If you

570
00:36:03,012 --> 00:36:06,686
have a data breach but you haven't collected that data, then someone can't

571
00:36:06,718 --> 00:36:10,194
steal. So I saw a talk

572
00:36:10,312 --> 00:36:14,334
by Troy Hunt last week, and he gets sent these giant

573
00:36:14,382 --> 00:36:17,666
data breaches for his site. Have I been pwned? And he's like, yeah,

574
00:36:17,688 --> 00:36:18,980
I never keep the.

575
00:36:20,630 --> 00:36:23,814
I I validate it. I make sure it's cool. He's like,

576
00:36:23,852 --> 00:36:27,126
I erase that. Do you want to know why? Because no one can steal it

577
00:36:27,148 --> 00:36:29,400
from me if I'm not posting it.

578
00:36:30,970 --> 00:36:33,642
He's like, I make sure this. And then I just have a bunch of email

579
00:36:33,696 --> 00:36:37,146
addresses and which breaches they were in, and then no one can steal it.

580
00:36:37,168 --> 00:36:40,474
And if more of us design our systems where we

581
00:36:40,512 --> 00:36:43,906
respect our users privacy, despite the marketing team's protest,

582
00:36:43,958 --> 00:36:47,870
we only collect data that we're actually going to use. Because sometimes

583
00:36:47,940 --> 00:36:51,258
it's just like, well, let's just collect everything, then maybe we'll

584
00:36:51,274 --> 00:36:54,794
need it, and maybe we won't. And if we're trying to reduce data

585
00:36:54,852 --> 00:36:58,850
center sprawl and the amount of energy we're using,

586
00:36:58,920 --> 00:37:02,334
this is a way where we could have better security, have better privacy,

587
00:37:02,382 --> 00:37:05,490
and maybe save the environment through data minimization.

588
00:37:05,830 --> 00:37:09,030
It's a thing I'm kind of excited about recently.

589
00:37:10,570 --> 00:37:13,766
But reducing the data is a big challenge, to be honest, because with

590
00:37:13,788 --> 00:37:17,578
the growth of everyone wants to see systems and observe them. So we're going

591
00:37:17,584 --> 00:37:18,940
to increase the data anyway.

592
00:37:22,350 --> 00:37:27,046
We are running in two circles. It's true you're

593
00:37:27,078 --> 00:37:31,002
in opposition to the ability to use

594
00:37:31,056 --> 00:37:34,714
AI then across all of it as well. That's computationally

595
00:37:34,762 --> 00:37:38,446
expensive and therefore environmentally damaging, as well

596
00:37:38,468 --> 00:37:41,758
as requiring large data sets to train and

597
00:37:41,764 --> 00:37:45,538
maintain those models. So there's a whole other discussion to be had there.

598
00:37:45,624 --> 00:37:48,946
What that looks like in the future. I walls wondering when AI will come up

599
00:37:48,968 --> 00:37:50,050
in this conversation.

600
00:37:55,530 --> 00:37:58,326
Who has been asked 400 times,

601
00:37:58,508 --> 00:38:00,950
what do you predict for the future of AI?

602
00:38:03,050 --> 00:38:05,846
Constantly, like every single event.

603
00:38:06,028 --> 00:38:09,186
What do you think of AI? I'm like, mostly.

604
00:38:09,218 --> 00:38:12,540
It's annoying right now, right? Mostly going to get good.

605
00:38:13,710 --> 00:38:17,114
Or the other question is, are we going to lose our job because of

606
00:38:17,152 --> 00:38:20,860
AI? Ask Chat GPT to write you a program.

607
00:38:21,230 --> 00:38:24,666
Yeah, Chat GPT. Rewrite my resume for me so I can

608
00:38:24,688 --> 00:38:28,480
find. We were talking about

609
00:38:29,250 --> 00:38:32,962
how software is getting complex for a good

610
00:38:33,016 --> 00:38:37,300
reason, and how big it's getting. We talked about

611
00:38:37,990 --> 00:38:41,326
the green it that henrik

612
00:38:41,358 --> 00:38:45,742
you brought as walls. The other factor is, can we really separate

613
00:38:45,806 --> 00:38:48,770
working software from people? And by that, what I mean,

614
00:38:48,840 --> 00:38:52,034
if the software is in production for how long? We can dare

615
00:38:52,082 --> 00:38:55,730
not to get any engineer close to that software

616
00:38:55,890 --> 00:38:59,462
and still be confident that it's running as expected

617
00:38:59,526 --> 00:39:01,900
without any operations person.

618
00:39:02,830 --> 00:39:06,790
And I do ask these questions in conversations,

619
00:39:06,870 --> 00:39:10,826
and I haven't heard anyone say in more than three weeks we can trust that

620
00:39:10,848 --> 00:39:14,654
software going on. Which then leds me into then,

621
00:39:14,692 --> 00:39:18,254
when we talk about software and systems, really, people are part

622
00:39:18,292 --> 00:39:22,250
of that and when we need to see it, but would be interesting to get

623
00:39:22,420 --> 00:39:26,114
room's thoughts on that. I would say that if you

624
00:39:26,152 --> 00:39:30,162
do like remediations, I will never have a system do

625
00:39:30,216 --> 00:39:33,778
automatic remediation, reply things directly without a

626
00:39:33,784 --> 00:39:36,942
human action. I would prefer

627
00:39:37,006 --> 00:39:41,138
to have an automated process that suggests a commit or suggests

628
00:39:41,154 --> 00:39:44,390
a change, and then a human looking at it and say,

629
00:39:44,460 --> 00:39:47,238
yes, that makes sense, so let's put it on.

630
00:39:47,404 --> 00:39:50,906
But I will never hamed some programs that says, oh,

631
00:39:51,008 --> 00:39:53,260
the memory is here, I'm going to kill this,

632
00:39:53,790 --> 00:39:57,402
because I think we are not mature enough to make these

633
00:39:57,456 --> 00:40:00,854
automated decisions without measuring the actual impact

634
00:40:00,902 --> 00:40:04,266
on the complex environment. So not even AI can do

635
00:40:04,288 --> 00:40:07,774
that. I mean, AI can, AI is just that, oh,

636
00:40:07,812 --> 00:40:10,800
I have this, I need that data here, here.

637
00:40:11,650 --> 00:40:15,890
And then you can basically suggest a change. But I will never put

638
00:40:15,960 --> 00:40:19,442
AI doing the actual decision and say,

639
00:40:19,496 --> 00:40:22,978
let's do that change now. I mean, maybe in the

640
00:40:22,984 --> 00:40:26,818
future, I don't know, but for now, because I

641
00:40:26,824 --> 00:40:30,274
like the fact with a system like GitHub, GitLab whatever,

642
00:40:30,312 --> 00:40:33,542
or BitBucket to keep track on the changes and

643
00:40:33,596 --> 00:40:37,030
know what happened. And like you mentioned before,

644
00:40:37,100 --> 00:40:41,666
and, being able to do a postmodern mortal analysis,

645
00:40:41,778 --> 00:40:45,318
you have a problem. Then if you have those changes marked

646
00:40:45,334 --> 00:40:48,406
somewhere, then you can understand and take actions.

647
00:40:48,518 --> 00:40:52,154
And if a system is doing things without any control, then I hamed no

648
00:40:52,192 --> 00:40:56,174
idea how we can understand what's going. So ops people's jobs are not

649
00:40:56,212 --> 00:40:59,614
threatened by AI, then that's good news for just, I think,

650
00:40:59,652 --> 00:41:03,550
ops people, because we're dealing with so much cloud

651
00:41:03,620 --> 00:41:08,926
environments, a lot of workload, a lot of data from different angles.

652
00:41:09,038 --> 00:41:12,642
So being flooded by data is very complicated. Having a system

653
00:41:12,696 --> 00:41:16,660
that guides you to understand what is happening

654
00:41:16,970 --> 00:41:20,742
and what type of action you should take, I think it makes sense.

655
00:41:20,876 --> 00:41:24,822
But I will definitely say that, no, I can't imagine any

656
00:41:24,956 --> 00:41:29,282
company yet being comfortable enough with the current models,

657
00:41:29,346 --> 00:41:33,146
the way they're built, to be able to take all of their data

658
00:41:33,248 --> 00:41:36,694
about their environments, about all the things that they have deployed,

659
00:41:36,742 --> 00:41:39,706
about how all things are connected. Even if they have that, which a lot of

660
00:41:39,728 --> 00:41:43,014
folks don't have all that data, there's still a lot of it that's buried

661
00:41:43,062 --> 00:41:46,750
in brains and not actually documented. Like you have to train that AI model

662
00:41:46,820 --> 00:41:50,542
on your system to be able to get good predictions back

663
00:41:50,596 --> 00:41:54,314
out of it. And I don't think a lot of these large enterprises

664
00:41:54,362 --> 00:41:57,266
are in a place that they're going to do that yet. There's a lot of

665
00:41:57,288 --> 00:42:00,754
maturation that would need to happen in the models to trust your

666
00:42:00,792 --> 00:42:04,334
data. You don't want everyone out there to know exactly what versions

667
00:42:04,382 --> 00:42:07,702
of every piece of software you're running, because that opens up your attack

668
00:42:07,756 --> 00:42:10,566
vectors to everyone who can read it.

669
00:42:10,668 --> 00:42:14,194
You don't want that out there. So training these models

670
00:42:14,242 --> 00:42:18,358
is very sophisticated, and you have to have all that data available

671
00:42:18,444 --> 00:42:21,626
to them. You don't have all that data available to human beings right

672
00:42:21,648 --> 00:42:25,434
now, let alone being able to ship it into a format that an

673
00:42:25,472 --> 00:42:29,546
AI model is going to understand. And I don't see that

674
00:42:29,728 --> 00:42:32,918
happening soon. Right now it's too expensive,

675
00:42:33,094 --> 00:42:36,734
it's much cheaper to deploy humans to figure that stuff out than it is

676
00:42:36,772 --> 00:42:40,746
to pay for the compute and storage and training of those models

677
00:42:40,778 --> 00:42:44,778
to get that. I don't think we're anywhere near close to having deploy an AI

678
00:42:44,874 --> 00:42:47,954
bot into your environment and trust that it's going to be able to figure everything

679
00:42:47,992 --> 00:42:51,522
out and suggest solutions for you. What about if

680
00:42:51,576 --> 00:42:55,254
the system where the AI rely on just goes

681
00:42:55,292 --> 00:42:58,950
down? So he's going to predict, I don't know what

682
00:42:59,100 --> 00:43:01,160
would be scary. Yeah, really.

683
00:43:02,170 --> 00:43:06,294
When copilot came out by GitHub, it was trained on

684
00:43:06,332 --> 00:43:10,390
all those open source projects that have no security team,

685
00:43:10,540 --> 00:43:13,690
that have no money for a pen tester, that have no money

686
00:43:13,760 --> 00:43:17,386
for a code review, or a security expert to come and look at

687
00:43:17,408 --> 00:43:20,906
all those things. And so almost all the code it would suggest

688
00:43:20,938 --> 00:43:24,270
was like, oh God, don't put that into production. And so

689
00:43:24,340 --> 00:43:27,294
Microsoft came out with security copilot, which is still,

690
00:43:27,412 --> 00:43:32,346
they think maybe next year it'll be ga

691
00:43:32,458 --> 00:43:35,826
and it's still in beta. And I saw a

692
00:43:35,848 --> 00:43:39,026
talk and I interviewed this lady from Microsoft last week and

693
00:43:39,128 --> 00:43:43,090
she said basically like, please use all the old controls, like, do not depend

694
00:43:43,160 --> 00:43:46,594
on us. She said it nicer than that,

695
00:43:46,632 --> 00:43:50,086
but she's like, it's not ready and everyone else is just lying and

696
00:43:50,108 --> 00:43:53,874
at least we're telling the truth. But I'm seeing some startups

697
00:43:53,922 --> 00:43:57,474
come out. There's one startup that came out and they created

698
00:43:57,522 --> 00:44:00,986
a lot of cool stuff. It's founders from contrast security,

699
00:44:01,088 --> 00:44:04,986
which created a bunch of security observability tools and

700
00:44:05,088 --> 00:44:08,346
runtime security tool, like very interesting, innovative stuff.

701
00:44:08,448 --> 00:44:11,802
And they've come out with an auto remediation tool

702
00:44:11,936 --> 00:44:15,678
and obviously there's AI and, everything. But I

703
00:44:15,684 --> 00:44:19,326
guess the idea is like, we've seen this bug four zillion times

704
00:44:19,508 --> 00:44:22,334
and we know you fix it like this. So we're going to make a pull

705
00:44:22,372 --> 00:44:25,666
request and tell you we think this code will fix it. Do you want

706
00:44:25,688 --> 00:44:28,946
to check it out? Because I don't know how many

707
00:44:28,968 --> 00:44:32,398
of you have received a report from a security tester,

708
00:44:32,494 --> 00:44:35,598
or more importantly one of those automated tools and they're

709
00:44:35,614 --> 00:44:38,498
like, here's 40,000 things wrong, get going.

710
00:44:38,584 --> 00:44:42,066
And you just like, I quit.

711
00:44:42,178 --> 00:44:46,162
I can't even, right. And so if you could instead receive

712
00:44:46,226 --> 00:44:49,606
a thing that says, okay, so we found these things. These are like

713
00:44:49,628 --> 00:44:53,338
the twelve things we think are actually of important, and we have a potential fix

714
00:44:53,424 --> 00:44:57,174
for eight. I feel like that might make developers

715
00:44:57,222 --> 00:45:01,014
not hate the security people so much, hopefully anymore.

716
00:45:01,142 --> 00:45:04,334
I'm pretty excited about this idea of am I going to just

717
00:45:04,372 --> 00:45:08,190
press a button and release the prod. With no testing. No.

718
00:45:08,340 --> 00:45:11,694
But I'm certainly cool with looking at it,

719
00:45:11,732 --> 00:45:15,086
seriously considering it, running all of the integration tests and

720
00:45:15,108 --> 00:45:18,882
functionality tests and unit tests, see if it works. And then it's like, okay,

721
00:45:18,936 --> 00:45:22,626
so maybe we should just do it, because there's a lot

722
00:45:22,648 --> 00:45:25,874
of little pieces, like you say, like, little pieces of functionality, like,

723
00:45:25,912 --> 00:45:29,494
oh, you left this port open, or your security isn't set

724
00:45:29,532 --> 00:45:33,270
to the right key strength on this particular account, or whatever,

725
00:45:33,340 --> 00:45:36,886
those kinds of really specific things. I think there's a

726
00:45:36,908 --> 00:45:40,314
lot of potential there to your copilot kind of thing will do for you.

727
00:45:40,352 --> 00:45:43,718
Like write me a library. Yeah. Fix my shaw

728
00:45:43,814 --> 00:45:47,306
problems or whatever I've included here that aren't right.

729
00:45:47,408 --> 00:45:51,278
Yeah, right. Oh, my God. Reminds me. What walls. That tool

730
00:45:51,444 --> 00:45:53,280
fortify the security.

731
00:45:54,450 --> 00:45:57,694
Yes. That's the static analysis tool. Yeah.

732
00:45:57,812 --> 00:46:01,594
It was like my nightmare, seeing the 50 warnings

733
00:46:01,642 --> 00:46:04,320
every morning. How many of them.

734
00:46:05,170 --> 00:46:09,006
I know I scanned an app once with one

735
00:46:09,028 --> 00:46:12,818
of the old static analysis tools, like a first generation, like fortify, but it

736
00:46:12,824 --> 00:46:16,530
wasn't them. And it said it had 43,000 vulnerabilities.

737
00:46:16,610 --> 00:46:19,638
And I was like, I'm going to go home now.

738
00:46:19,724 --> 00:46:23,894
One web app. But now

739
00:46:24,092 --> 00:46:27,538
security industry is moving towards next generation, where it

740
00:46:27,564 --> 00:46:31,814
does pattern matching and more accurate

741
00:46:31,862 --> 00:46:35,446
ways of finding things. So there's just way more true positives,

742
00:46:35,478 --> 00:46:39,066
and fewer, less false positives. It's still not perfect, but the

743
00:46:39,088 --> 00:46:42,794
accuracy is. When I started an app tech, I was like, throw those

744
00:46:42,832 --> 00:46:45,934
in the garbage. Why are we even using them? It's so

745
00:46:45,972 --> 00:46:49,822
useless. But now I'm like, oh, I like it now. It goes

746
00:46:49,876 --> 00:46:53,434
faster. It gives me results that actually, I was like, oh, that's terrifying.

747
00:46:53,482 --> 00:46:56,802
Thanks for pointing that out to me. Versus I hamed to dig

748
00:46:56,856 --> 00:47:00,062
for, like, 300 pages to find a thing that matters.

749
00:47:00,206 --> 00:47:04,034
So we're getting better, but we're not perfect. But I guess

750
00:47:04,152 --> 00:47:07,826
if any industry person tells you that, they're probably also got some magic

751
00:47:07,858 --> 00:47:09,400
beans they need you to buy.

752
00:47:14,090 --> 00:47:17,646
Any other comments on AI and machine learning besides

753
00:47:17,698 --> 00:47:21,210
I hope it gets better? Well, there is one small point.

754
00:47:21,360 --> 00:47:24,714
AI, you touched on it when this new

755
00:47:24,752 --> 00:47:28,602
copilot, they look at existing open source codes and

756
00:47:28,656 --> 00:47:32,686
replicate that. There's another angle to it, which is

757
00:47:32,788 --> 00:47:37,086
currently in the IT industry. More than

758
00:47:37,188 --> 00:47:41,022
70% of the codes are written by

759
00:47:41,156 --> 00:47:43,460
male people. Okay.

760
00:47:46,470 --> 00:47:50,322
It's growing, but we have smaller participation from

761
00:47:50,376 --> 00:47:53,982
women in coding. Now, if AI learns

762
00:47:54,046 --> 00:47:57,890
how to code from the code that written

763
00:47:58,870 --> 00:48:02,534
by a bunch of guys, we'll replicate that

764
00:48:02,572 --> 00:48:05,974
code. And we may say that, okay, there's no difference the way women

765
00:48:06,012 --> 00:48:10,042
code and men code. And the reason that question came

766
00:48:10,096 --> 00:48:13,526
up for me, I was looking at, because of my job, going through labs

767
00:48:13,558 --> 00:48:17,174
of different incident logs, people's conversation, and we noticed

768
00:48:17,222 --> 00:48:21,274
actually women communicate differently

769
00:48:21,322 --> 00:48:25,166
in incidents comparing to men, the way they talk,

770
00:48:25,268 --> 00:48:29,166
what gets them engaged, what it's not. And we're contemplating that

771
00:48:29,188 --> 00:48:32,890
if there's an AI tool that can get engaged in the incident

772
00:48:32,970 --> 00:48:36,354
response and it looks at all these chat logs walls,

773
00:48:36,392 --> 00:48:39,902
be more like a male participant than female

774
00:48:39,966 --> 00:48:42,786
participant. And then the question came up, oh,

775
00:48:42,888 --> 00:48:46,390
is that also true for coding? Does Java code

776
00:48:46,540 --> 00:48:51,782
that a female software engineer writes looks different to

777
00:48:51,836 --> 00:48:55,480
what a male software engineers write?

778
00:48:56,010 --> 00:49:00,006
Can we answer that question? I don't know. But there's

779
00:49:00,038 --> 00:49:04,026
another aspect of AI, which is the gender bias, which it can project if

780
00:49:04,048 --> 00:49:07,900
it only looks at past, given how it's distributed in

781
00:49:08,670 --> 00:49:12,862
participation of the gender in

782
00:49:12,916 --> 00:49:16,240
it, I wonder if that's cultural too.

783
00:49:16,930 --> 00:49:21,130
So this is a weird story, but the first time I pen tested an API,

784
00:49:21,210 --> 00:49:24,322
so I'm canadian, that is my accent, you probably

785
00:49:24,376 --> 00:49:27,906
heard. And the responses from

786
00:49:27,928 --> 00:49:31,742
the API were super polite, just like the stereotype,

787
00:49:31,806 --> 00:49:35,454
right? And it was like, oh no, I'm sorry, that's bad input.

788
00:49:35,502 --> 00:49:38,658
This is how you want to form. And so it kept helping me until I

789
00:49:38,664 --> 00:49:42,166
made a successful attack. And so then I had to write them and be like,

790
00:49:42,188 --> 00:49:45,254
you're not allowed to. So the only person that's going to see an error message

791
00:49:45,292 --> 00:49:48,498
from an API is either like a tester, the developer, or a

792
00:49:48,524 --> 00:49:52,490
malicious actor. And so you're helping the malicious actor attack you.

793
00:49:52,560 --> 00:49:56,202
It should know, invalid, know, error number,

794
00:49:56,256 --> 00:49:59,434
whatever. Call if you need more details, right.

795
00:49:59,472 --> 00:50:02,758
And then you can validate who it is. And I had to reassure them

796
00:50:02,784 --> 00:50:06,174
that was okay. And then I was working with a team

797
00:50:06,212 --> 00:50:09,646
from India recently, and I was explaining to them, it's okay, you're not

798
00:50:09,668 --> 00:50:13,674
being impolite in certain cultures. They're concerned

799
00:50:13,802 --> 00:50:17,310
about being impolite with the way they design their software.

800
00:50:19,190 --> 00:50:22,286
And I haven't had to assure american teams,

801
00:50:22,318 --> 00:50:25,906
they're like, obviously it's fine, right? But it's forced into

802
00:50:26,008 --> 00:50:29,446
certain cultures to act a certain way the same, I don't know if

803
00:50:29,468 --> 00:50:32,934
you've ever read the book drift into failure, but they talk

804
00:50:32,972 --> 00:50:36,774
about how in Korea there's certain cultures that are different than in other

805
00:50:36,812 --> 00:50:41,126
countries, and the copilot just doesn't question the pilot.

806
00:50:41,238 --> 00:50:44,474
And so when some things were happening. Yeah,

807
00:50:44,512 --> 00:50:48,042
exactly. And so it's also with AI. I wonder

808
00:50:48,096 --> 00:50:51,114
if the way things are coded, designed, responded to,

809
00:50:51,152 --> 00:50:55,294
et cetera will be based on different cultures. And with

810
00:50:55,332 --> 00:50:59,034
women it's a lot cultural rather than our actual anatomy

811
00:50:59,082 --> 00:51:02,494
that's making us act differently. It's that we're expected to act a certain way.

812
00:51:02,532 --> 00:51:05,486
And if we don't act that way society gets all upset with us and tells

813
00:51:05,518 --> 00:51:09,554
us we're bossy or whatever, right? And so this culture thing,

814
00:51:09,592 --> 00:51:13,042
I'd be very curious to see what AI makes of code from

815
00:51:13,096 --> 00:51:17,186
different countries, different classes of people depending upon the

816
00:51:17,208 --> 00:51:20,422
place that you live, et cetera. I'd love to see the difference between

817
00:51:20,476 --> 00:51:24,006
indian programmers, canadian programmers and maybe south american

818
00:51:24,108 --> 00:51:27,738
programmers. That's super interesting because part of the thing with the

819
00:51:27,744 --> 00:51:31,990
airlines walls that certain spoken languages

820
00:51:32,150 --> 00:51:35,082
have different kinds of deferential speak.

821
00:51:35,216 --> 00:51:38,826
And the case studies there are super interesting. And there too if

822
00:51:38,848 --> 00:51:42,394
you've got english native speakers as your programmers

823
00:51:42,442 --> 00:51:46,602
versus non native english speakers as your programmers.

824
00:51:46,746 --> 00:51:50,110
This sounds like somebody's phd project right here. I don't know if anyone

825
00:51:50,180 --> 00:51:54,558
out there listening is looking for a thesis, but I'd

826
00:51:54,574 --> 00:51:57,922
like to read it. I think it'd be super interesting. Yeah, definitely.

827
00:51:57,976 --> 00:52:01,650
The book seems very interesting. It was a very interesting book

828
00:52:01,720 --> 00:52:05,206
about how many tiny little things where

829
00:52:05,228 --> 00:52:09,026
we drift just slightly off course years at a time, then becomes

830
00:52:09,058 --> 00:52:12,294
a major failure. And I've definitely seen this

831
00:52:12,332 --> 00:52:15,814
with large organizations. I don't have

832
00:52:15,852 --> 00:52:19,358
any answer for the coding

833
00:52:19,394 --> 00:52:23,322
side, but if you're interested to see how men

834
00:52:23,376 --> 00:52:26,742
and women respond in incident

835
00:52:26,806 --> 00:52:30,458
bridges, I have some interesting data. Happy to share.

836
00:52:30,544 --> 00:52:35,054
It was really fascinating for me to see how

837
00:52:35,092 --> 00:52:38,234
they play differently. That's kind of warm up. I won't open that topic

838
00:52:38,282 --> 00:52:41,662
here this walls, but it's very interesting.

839
00:52:41,796 --> 00:52:46,066
That's where I think open source projects are

840
00:52:46,168 --> 00:52:49,726
great because it collaborates developers technically

841
00:52:49,758 --> 00:52:53,460
that are sitting from all around the globe. So it's going to be a

842
00:52:54,870 --> 00:52:58,962
rexed of commits from different countries.

843
00:52:59,026 --> 00:53:01,654
But again, there is always the maintainer who will approve it.

844
00:53:01,692 --> 00:53:05,942
So there's always one guy sitting and approving or

845
00:53:06,076 --> 00:53:10,086
merging things that has been built by other developers. But at least open source

846
00:53:10,198 --> 00:53:14,022
is a way of encouraging

847
00:53:14,086 --> 00:53:17,322
people from very

848
00:53:17,376 --> 00:53:21,900
far locations to start contributing and be involved and

849
00:53:24,190 --> 00:53:27,486
have an opportunity to work for larger organizations that they may not

850
00:53:27,508 --> 00:53:30,974
have in the past. I think that's very exciting as well.

851
00:53:31,012 --> 00:53:34,322
So if we're going to wrap up now, could each one of you

852
00:53:34,376 --> 00:53:37,950
give sort of like a key takeaway from this conversation

853
00:53:38,030 --> 00:53:44,434
that you'd like the audience to think about or remember as

854
00:53:44,472 --> 00:53:47,814
they summarize? The topics we talked about covered a lot of

855
00:53:47,852 --> 00:53:51,266
grounds. Yeah, we covered

856
00:53:51,298 --> 00:53:55,574
a lot of things. That's the challenge. I would say that if

857
00:53:55,612 --> 00:54:02,154
I start, I would say your

858
00:54:02,192 --> 00:54:05,546
projects are getting more complex, so you

859
00:54:05,568 --> 00:54:09,286
cannot be an expert on everything. So relying

860
00:54:09,318 --> 00:54:12,682
on people that have significant expertise

861
00:54:12,746 --> 00:54:16,254
that will make the project successful is a key

862
00:54:16,292 --> 00:54:19,806
driver. Otherwise you will be lost in

863
00:54:19,828 --> 00:54:23,630
the middle of the forest looking for an exit.

864
00:54:24,610 --> 00:54:28,114
Yeah, I think too is like remembering that the things that you're doing are

865
00:54:28,152 --> 00:54:31,026
ultimately in service of your eventual customer.

866
00:54:31,128 --> 00:54:34,690
And that is easy to lose sight of if you're deep in the back end

867
00:54:34,760 --> 00:54:38,226
and your stuff doesn't necessarily get touched

868
00:54:38,258 --> 00:54:42,134
by their greasy little fingers. But there's plenty of things that

869
00:54:42,252 --> 00:54:46,246
we do there in service of making sure the customer experience at

870
00:54:46,268 --> 00:54:49,766
the end of the day is as good as it can be with the resources

871
00:54:49,798 --> 00:54:53,466
that we have and not introducing extra complexity if

872
00:54:53,488 --> 00:54:56,826
we don't have to, if it's not in service of the customer experience

873
00:54:56,928 --> 00:55:01,754
and making that better. My favorite

874
00:55:01,802 --> 00:55:05,210
part of DevOps is how much it increases

875
00:55:05,290 --> 00:55:09,038
security and how much it increases. So, like, a huge

876
00:55:09,124 --> 00:55:12,666
thing in security is availability and reliability,

877
00:55:12,858 --> 00:55:15,934
and DevOps just kind of supercharged that.

878
00:55:15,972 --> 00:55:19,322
And especially now we have platform engineering.

879
00:55:19,386 --> 00:55:23,346
And so many. I just feel like we're moving more and more towards

880
00:55:23,528 --> 00:55:26,674
making sure our services are always available and of

881
00:55:26,712 --> 00:55:30,934
higher quality with better integrity. And so as

882
00:55:30,972 --> 00:55:34,246
much as sometimes people are like, oh, we're doing this to serve the

883
00:55:34,268 --> 00:55:37,800
customer more, I'm just like, secretly in the back. I'm like, yeah.

884
00:55:38,330 --> 00:55:42,122
So I'm really happy about a lot of the things all of you hamed because

885
00:55:42,176 --> 00:55:45,882
I feel like we're all working towards the same goal and

886
00:55:46,016 --> 00:55:49,402
everyone in DevOps cares more about that than we ever

887
00:55:49,456 --> 00:55:53,210
did before with software development, from my perspective,

888
00:55:53,370 --> 00:55:57,118
I think, is really reminding ourselves that

889
00:55:57,204 --> 00:56:01,360
now software is in

890
00:56:01,890 --> 00:56:05,982
all aspects of human life and not being available

891
00:56:06,116 --> 00:56:09,434
and failure can have big consequences. So operations

892
00:56:09,562 --> 00:56:12,560
and keeping the software is running is really important.

893
00:56:13,410 --> 00:56:17,234
And almost like we, we should feel that burden

894
00:56:17,362 --> 00:56:20,680
in our shoulders, not forget it.

895
00:56:22,890 --> 00:56:26,534
Cool. Great. Okay, well, thank you everyone for

896
00:56:26,572 --> 00:56:30,086
coming today. This was great. It was so awesome meeting all of you.

897
00:56:30,188 --> 00:56:31,814
It's really good conversation. Yeah,

