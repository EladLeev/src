1
00:00:23,930 --> 00:00:27,302
Hey everyone, this is Matt Schillerstrom. Today I'm going to be talking

2
00:00:27,356 --> 00:00:31,906
to you about revolutionizing software development by integrating chaos engineering

3
00:00:31,938 --> 00:00:36,230
and feature flags for enhanced reliability and agile response.

4
00:00:36,890 --> 00:00:40,578
I'm currently a product manager for feature flags at Harness,

5
00:00:40,674 --> 00:00:43,926
the modern software delivery platform. But prior to this I

6
00:00:43,948 --> 00:00:47,622
was a product manager at Gremlin for Chaos Engineering. I worked

7
00:00:47,676 --> 00:00:50,602
at Target Corporation out of Minneapolis, Minnesota,

8
00:00:50,666 --> 00:00:54,634
building out their Chaos engineering program and at a nuclear power plant,

9
00:00:54,682 --> 00:00:57,630
ensuring that we're safe and reliable.

10
00:00:58,770 --> 00:01:02,506
The opportunity I'd like to talk about is with software delivery.

11
00:01:02,618 --> 00:01:06,000
Imagine if your development cycle looked like

12
00:01:06,370 --> 00:01:10,146
know. Your development team confidently pushes code to production to

13
00:01:10,168 --> 00:01:14,370
solve business outcomes and customer needs. Your customers use

14
00:01:14,440 --> 00:01:18,134
software. The customers give feedback to the product they

15
00:01:18,172 --> 00:01:21,746
love, and business responds with new ideas to tests.

16
00:01:21,938 --> 00:01:25,602
The development team solves problems and tests new feature

17
00:01:25,666 --> 00:01:29,206
flags. Get feedback right, and everyone is happy and

18
00:01:29,228 --> 00:01:33,210
the business continues to grow and respond to the change in the customer needs

19
00:01:33,280 --> 00:01:37,066
and business outcomes. Now, I probably wouldn't be talking to

20
00:01:37,088 --> 00:01:40,566
you today if this is what your software delivery lifecycle looked like.

21
00:01:40,688 --> 00:01:43,310
All green and happy path, right?

22
00:01:43,460 --> 00:01:47,130
There's many issues that exist today just with releasing

23
00:01:47,290 --> 00:01:50,730
code to production and even before that with testing,

24
00:01:50,810 --> 00:01:54,834
right? But I want you to know there's some open source solutions that

25
00:01:54,872 --> 00:01:59,010
exist today provided by the Linux foundation through the CNCF,

26
00:02:01,110 --> 00:02:04,926
the cloud native Compute foundation such as Lipnis

27
00:02:04,958 --> 00:02:09,126
Chaos, which is donated by harness and

28
00:02:09,228 --> 00:02:12,514
open feature, which is a feature flagging open source

29
00:02:12,562 --> 00:02:16,262
tool as well. Now taking a step

30
00:02:16,316 --> 00:02:19,720
back, my experience has always been around

31
00:02:20,190 --> 00:02:23,546
understanding how systems work. And Andy Stanley, who's a

32
00:02:23,568 --> 00:02:27,126
pastor and a podcaster, says it best when if you don't

33
00:02:27,158 --> 00:02:30,986
know why it's working, when it's working, you won't know how to fix it when

34
00:02:31,008 --> 00:02:33,580
it breaks. And if you think about,

35
00:02:34,910 --> 00:02:38,366
you know, at 02:00 in the morning when an incident happens, or when

36
00:02:38,388 --> 00:02:42,094
you're releasing software, you have to think about how to fix it,

37
00:02:42,132 --> 00:02:46,014
right? You don't always know how to respond. And that's where practicing

38
00:02:46,062 --> 00:02:49,454
chaos engineering and using feature flags

39
00:02:49,502 --> 00:02:52,894
help you learn and understand the behavior

40
00:02:52,942 --> 00:02:56,978
of your system. Such that you can be confident when you release software,

41
00:02:57,154 --> 00:03:01,538
such that you can also know how to respond to something proactively

42
00:03:01,714 --> 00:03:05,846
when it breaks. A recent exercise I took

43
00:03:06,028 --> 00:03:09,366
was around this opportunity, but I took it

44
00:03:09,388 --> 00:03:12,954
with my team and I said, what if an incident happened? Let's just talk

45
00:03:12,992 --> 00:03:16,678
through it. Let's not even run a chaos experiment. Let's just get a mirror

46
00:03:16,694 --> 00:03:21,206
board or a paper and write it out. So in this diagram,

47
00:03:21,318 --> 00:03:24,238
take a 30,000 foot view, right?

48
00:03:24,404 --> 00:03:27,454
You have that green happy path, and you have a red

49
00:03:27,492 --> 00:03:31,006
column of variety of different types of incidents, whether it was

50
00:03:31,028 --> 00:03:34,282
a network outage or a disk failure or

51
00:03:34,356 --> 00:03:37,634
just something else, you name it. But if you look at this,

52
00:03:37,752 --> 00:03:40,866
all the yellow boxes here are things that a

53
00:03:40,888 --> 00:03:44,802
development team has to respond to or do before

54
00:03:44,856 --> 00:03:48,914
they get back on those green squares of software development happy path,

55
00:03:48,962 --> 00:03:52,934
right? So if an outage happens, your pager goes

56
00:03:52,972 --> 00:03:56,086
off or your customer notifies you, and then you have to look at a

57
00:03:56,108 --> 00:03:59,990
dashboard, then you're responding, then you're fixing,

58
00:04:00,070 --> 00:04:04,506
you're testing, you're troubleshooting, you're doing all these things

59
00:04:04,688 --> 00:04:08,490
when in reality you could have proactively tested this in the past,

60
00:04:08,560 --> 00:04:09,180
right?

61
00:04:11,470 --> 00:04:15,086
Aligning into that a little bit more, I asked my team, what are

62
00:04:15,108 --> 00:04:19,530
some of the things that happen when that incidents

63
00:04:19,610 --> 00:04:22,946
occurs, right? And often we related this to just like what

64
00:04:22,968 --> 00:04:25,618
happens when you release code to production, right?

65
00:04:25,784 --> 00:04:29,474
So thinking about this, like support teams get

66
00:04:29,512 --> 00:04:33,774
involved, ops teams, multiple development teams, security database

67
00:04:33,822 --> 00:04:37,022
teams, they're all trying to help resolve that incident,

68
00:04:37,086 --> 00:04:40,214
right? So basically that feature release that was

69
00:04:40,252 --> 00:04:43,826
supposed to make your business more productive and your customer happy now becomes

70
00:04:43,858 --> 00:04:47,650
an incident rather than just like a simple deploy and release,

71
00:04:47,810 --> 00:04:51,458
right? So all these things are occurring, which is interesting,

72
00:04:51,564 --> 00:04:54,378
right? Because you don't think about all these things.

73
00:04:54,544 --> 00:04:58,054
You get used to it, right? Like you get trained and you have muscle

74
00:04:58,102 --> 00:05:01,278
memory on how to respond to incidents, and you normalize the

75
00:05:01,284 --> 00:05:05,034
fact here. But let's lean to the business impact

76
00:05:05,082 --> 00:05:08,442
of all of this. So let's talk about cloud costs,

77
00:05:08,506 --> 00:05:11,886
right? So what impacts the bottom line?

78
00:05:12,068 --> 00:05:15,358
Cloud costs. But why does cloud costs

79
00:05:15,454 --> 00:05:19,522
increase? Right? Like, incidents happen so folks have to

80
00:05:19,656 --> 00:05:23,262
provision more servers and more workloads to respond

81
00:05:23,326 --> 00:05:26,280
and catch up to the recovery of the system.

82
00:05:27,450 --> 00:05:31,202
Speed and velocity also impact the bottom line for businesses

83
00:05:31,266 --> 00:05:34,998
as far as how fast you're delivering the right solution to

84
00:05:35,004 --> 00:05:38,698
your customer. I like to talk about churn and training

85
00:05:38,784 --> 00:05:42,582
and onboarding of new developers or existing

86
00:05:42,646 --> 00:05:46,102
teammates that are just learning a new system. But the inefficiency

87
00:05:46,166 --> 00:05:48,634
around that affect the bottom line.

88
00:05:48,832 --> 00:05:52,478
Risk, obviously, like how risk adverse your company

89
00:05:52,564 --> 00:05:56,174
is or your customer is, and then being

90
00:05:56,212 --> 00:05:59,966
too reliable, right? Like you don't necessarily need to be 100%

91
00:06:00,068 --> 00:06:03,246
reliable or even five nines or four nines, right?

92
00:06:03,268 --> 00:06:06,660
You just need to be reliable for that customer experience,

93
00:06:07,510 --> 00:06:11,122
for that business outcome. You're trying to solve some

94
00:06:11,176 --> 00:06:14,210
interesting facts. So here in 2023,

95
00:06:14,360 --> 00:06:18,390
we saw cloud infrastructure spending increase by 23%,

96
00:06:18,540 --> 00:06:22,114
which highlights the need for that effective cost management strategies

97
00:06:22,162 --> 00:06:26,418
within DevOps and site reliability engineering practices.

98
00:06:26,594 --> 00:06:30,986
We also see an increase in cloud costs in 2024,

99
00:06:31,088 --> 00:06:34,202
simply from gen AI services, right.

100
00:06:34,256 --> 00:06:37,882
More and more new companies are starting and more companies

101
00:06:37,936 --> 00:06:42,334
are investing in this technology, but they're quick to

102
00:06:42,372 --> 00:06:46,266
use it, right? So they're over provisioning workloads

103
00:06:46,298 --> 00:06:49,680
and servers just to support the business cases that they need.

104
00:06:50,610 --> 00:06:54,206
Another business impact here is velocity, or lack

105
00:06:54,238 --> 00:06:58,194
thereof, but continuous delivery isn't good enough,

106
00:06:58,392 --> 00:07:01,714
right? So CI CD gets you

107
00:07:01,752 --> 00:07:05,514
so far, but it ends at the production deployment.

108
00:07:05,662 --> 00:07:10,130
And what I like to get at here is there's risk in large deployments

109
00:07:10,290 --> 00:07:12,630
that a feature flags can solve.

110
00:07:13,290 --> 00:07:17,126
Currently with continuous delivery. Like one bad feature equals a

111
00:07:17,148 --> 00:07:20,566
full rollback of a system. There might be 15 features

112
00:07:20,598 --> 00:07:23,674
within that, right? Deploy and release are

113
00:07:23,712 --> 00:07:27,994
the same. Developers don't have that control in

114
00:07:28,032 --> 00:07:31,878
production that they want. They're babysitting that deployment out

115
00:07:31,904 --> 00:07:35,374
there and babysitting the testing and kind of nervous to

116
00:07:35,412 --> 00:07:39,214
deploy it to prod because it's also releasing to customers,

117
00:07:39,332 --> 00:07:42,910
right? So then the production issues affect all the users

118
00:07:43,410 --> 00:07:46,706
and you can't resolve the issue well in prod, right? So you

119
00:07:46,728 --> 00:07:50,594
have to roll back everything. And then ultimately once you

120
00:07:50,632 --> 00:07:53,618
get going with CI CD, you have that diminishing return,

121
00:07:53,704 --> 00:07:57,842
right? So the slow cumbersome deployments, lack of production

122
00:07:57,906 --> 00:08:01,254
governance, and then you get more tech and rework, right?

123
00:08:01,372 --> 00:08:04,994
So where we see that as an industry with software delivery is reduced

124
00:08:05,042 --> 00:08:08,122
velocity, you have increased risk and

125
00:08:08,176 --> 00:08:11,900
ultimately poor developer experience, which I care deeply about.

126
00:08:12,350 --> 00:08:16,234
Right? So again, just to repeat, like the big deployments and

127
00:08:16,272 --> 00:08:20,310
rollbacks equal more rework and less features.

128
00:08:20,470 --> 00:08:24,270
And then no control, production means the deployment must be perfect,

129
00:08:24,420 --> 00:08:28,186
right? So again, CI CD helps us get there. But now you're

130
00:08:28,218 --> 00:08:31,520
worried about that release being perfect for your customer.

131
00:08:31,890 --> 00:08:35,294
And then the poor developer experience is just tightly coupled.

132
00:08:35,342 --> 00:08:38,930
Deploy and release adds stress and toil to the developer.

133
00:08:39,430 --> 00:08:43,650
But now let's talk about reliability and resilience with the business impact.

134
00:08:44,150 --> 00:08:47,446
So common Kubernetes, failure modes that exist today,

135
00:08:47,628 --> 00:08:52,258
system instability, resource exhaustion, resource contention,

136
00:08:52,354 --> 00:08:56,338
configuration errors, scaling issues, these all exist

137
00:08:56,434 --> 00:09:00,426
in Kubernetes, which is supposed to be a self healing system, right? But the

138
00:09:00,448 --> 00:09:04,662
applications you deploy on Kubernetes might not survive

139
00:09:04,726 --> 00:09:09,270
these instabilities, right? And that's where these resiliency

140
00:09:09,350 --> 00:09:13,086
patterns are being used in code and infrastructure today

141
00:09:13,188 --> 00:09:17,438
to handle those failures gracefully, either degrading the experience

142
00:09:17,604 --> 00:09:20,846
or giving a warning message to users. But what

143
00:09:20,868 --> 00:09:25,050
I'm seeing in the industry is that lack of testing,

144
00:09:25,130 --> 00:09:28,802
right? And when I bring up chaos engineering and

145
00:09:28,856 --> 00:09:32,226
proactively testing your system, people kind of laugh at it, right?

146
00:09:32,248 --> 00:09:35,790
They don't see it as a priority. But what I like to speak about

147
00:09:35,880 --> 00:09:39,670
is technology and standards change. And similar to

148
00:09:39,740 --> 00:09:43,250
this 56 years ago, child, car seats have evolved.

149
00:09:43,410 --> 00:09:47,142
And what seemed okay then is not humorous now. So looking

150
00:09:47,196 --> 00:09:50,442
back five years from now, we might be like, of course,

151
00:09:50,496 --> 00:09:53,770
chaos engineering is required for all this testing, right?

152
00:09:53,840 --> 00:09:57,610
It's silly to not think you have to do anything proactively.

153
00:09:58,430 --> 00:10:02,060
And when I try to box these failure modes in,

154
00:10:02,670 --> 00:10:06,318
I always like looking at this type of a table, right, where we talk about

155
00:10:06,484 --> 00:10:10,400
known failure modes or unknown failure modes. But these are all things

156
00:10:10,850 --> 00:10:14,626
and questions that I like to ask my team around why

157
00:10:14,648 --> 00:10:18,514
chaos engineering can help answer these questions, right? Like, what are my single

158
00:10:18,712 --> 00:10:22,420
points of failure? Where does my system tip over?

159
00:10:22,790 --> 00:10:26,798
What happens when a Kubernetes pod restarts? Or does

160
00:10:26,824 --> 00:10:30,566
my system scale appropriately during peak traffic? Did I

161
00:10:30,588 --> 00:10:34,454
configure my dashboard correctly? Does my paging system work?

162
00:10:34,572 --> 00:10:38,114
These are all questions that you should have. And if you're not doing chaos

163
00:10:38,162 --> 00:10:41,782
engineering, you're not going to know the answer. And that's where integrating

164
00:10:41,846 --> 00:10:45,386
chaos engineering and feature flags helps you.

165
00:10:45,568 --> 00:10:48,790
So with this, I have a software release workflow,

166
00:10:48,870 --> 00:10:52,810
and this is where you can really integrate chaos engineering and feature flags.

167
00:10:52,970 --> 00:10:56,254
So for step one, think about this. Devs write

168
00:10:56,292 --> 00:11:00,510
their code, but any changes are put behind a feature flag,

169
00:11:01,010 --> 00:11:04,674
right? And the value there is that you can deliver code on time,

170
00:11:04,872 --> 00:11:07,970
test features for impact. Step two,

171
00:11:08,120 --> 00:11:11,426
DevOps releases the code to production, and they can

172
00:11:11,448 --> 00:11:15,478
test in production, and nothing has changed, right? But the value there is that you

173
00:11:15,484 --> 00:11:18,102
can deploy on time every time,

174
00:11:18,236 --> 00:11:21,570
no change to your process and test safe failure.

175
00:11:21,730 --> 00:11:25,254
Then, step three, product managers can decide who gets

176
00:11:25,292 --> 00:11:28,954
the new feature and who doesn't. And the value there

177
00:11:28,992 --> 00:11:32,330
is that control release variations, and you don't roll back,

178
00:11:32,400 --> 00:11:35,754
you just turn the flag off. Step four,

179
00:11:35,952 --> 00:11:39,466
product and development. Decide what to iterate on.

180
00:11:39,568 --> 00:11:42,858
And this is faster and more collaborative with feature flags,

181
00:11:42,874 --> 00:11:46,586
right? And the value there is that you can iterate on features faster

182
00:11:46,698 --> 00:11:50,880
and have higher feature quality, right? So it's this continued process

183
00:11:51,250 --> 00:11:54,490
of integrating feature flags and chaos engineering

184
00:11:54,570 --> 00:11:57,838
into your development process. And again,

185
00:11:58,004 --> 00:12:01,854
tools that you can use for this are open feature and

186
00:12:01,892 --> 00:12:05,366
litmus chaos. So today, I hope

187
00:12:05,388 --> 00:12:08,722
you understand that integrating chaos engineering and feature flags

188
00:12:08,786 --> 00:12:12,754
enhances your reliability in software and response.

189
00:12:12,882 --> 00:12:16,322
If you need to contact me, please reach out to me on LinkedIn,

190
00:12:16,466 --> 00:12:20,034
and I'm happy to engage in a conversation with you to help make your journey

191
00:12:20,082 --> 00:12:23,846
in software liability safer and ultimately more fun.

192
00:12:24,028 --> 00:12:24,902
All right, thanks,

