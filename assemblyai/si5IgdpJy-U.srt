1
00:00:25,410 --> 00:00:30,920
Our name.

2
00:01:53,910 --> 00:01:57,458
Hello and welcome to this talk on how to implement a developer security

3
00:01:57,544 --> 00:02:01,314
operations program. I'm Evan Gertis. I'd love

4
00:02:01,352 --> 00:02:04,434
to start this talk out by just asking everyone, how do you feel today?

5
00:02:04,552 --> 00:02:07,986
I hope you're feeling well. Here are the five things that I want you to

6
00:02:08,008 --> 00:02:11,826
walk away from this talk with. Number one, automated scanning removes the

7
00:02:11,848 --> 00:02:15,566
need for manual labor. Number two, when application security reviews

8
00:02:15,598 --> 00:02:19,258
are executed properly, they increase accountability, but they require a security

9
00:02:19,344 --> 00:02:23,354
champion. Number three, strong vulnerability reports are more

10
00:02:23,392 --> 00:02:27,126
easily accepted when they are supported with easy to read metrics from baracode

11
00:02:27,158 --> 00:02:30,986
dashboards and JFrog XR reports. Number four, penetration tests

12
00:02:31,018 --> 00:02:34,538
fill in the gaps where automated scanning fails to catch vulnerabilities.

13
00:02:34,714 --> 00:02:37,838
Number five, the results of the

14
00:02:37,924 --> 00:02:41,786
penetration tests need to be supported with systematic logging.

15
00:02:41,978 --> 00:02:45,870
So why did the IT team set up their remote office

16
00:02:45,940 --> 00:02:48,450
on the beach? Seems cloudy.

17
00:02:49,270 --> 00:02:52,100
Ask yourself, why are you here?

18
00:02:53,110 --> 00:02:56,194
Prepare your mind for an extreme paradigm shift and let

19
00:02:56,232 --> 00:02:59,766
go of any preconceived notions that you previously held. What I plan to

20
00:02:59,788 --> 00:03:03,414
propose will destroy any of the accepted ideas that you once thought to be

21
00:03:03,452 --> 00:03:06,886
true. Imagine, what if we could give

22
00:03:06,908 --> 00:03:10,394
people a pill to get them to do

23
00:03:10,432 --> 00:03:13,690
their jobs and execute successfully?

24
00:03:14,350 --> 00:03:17,766
How you do anything is how you do everything. Proper leadership comes down to planning,

25
00:03:17,798 --> 00:03:21,146
accountability and commitment. This is what worked for

26
00:03:21,168 --> 00:03:24,746
me. Maybe you have different tooling, but the concept is still

27
00:03:24,768 --> 00:03:28,330
the same. You need to find the right tools to help you succeed.

28
00:03:28,490 --> 00:03:31,966
You do not need to do it this way. By following this process, you will

29
00:03:31,988 --> 00:03:35,266
be able to convey your results such that they will be received like a

30
00:03:35,288 --> 00:03:38,578
seasoned salt hitting your manager's tongue. I'm going to present to

31
00:03:38,584 --> 00:03:39,940
you what worked for me.

32
00:03:41,750 --> 00:03:45,566
We inspire your teams to take accountability. Our process uses the right tools

33
00:03:45,598 --> 00:03:49,366
to get people to take action. Our process is based on research from

34
00:03:49,388 --> 00:03:52,786
the two most referenced papers on devsecops from connected

35
00:03:52,818 --> 00:03:56,390
papers. We think we know culture,

36
00:03:56,810 --> 00:04:00,374
but we live in a world where the norms diet information in silos.

37
00:04:00,502 --> 00:04:02,794
And as Peter F. Drucker once said,

38
00:04:02,992 --> 00:04:06,010
culture a strategy for breakfast.

39
00:04:06,670 --> 00:04:10,650
How many of you have sat in a meeting with a liar?

40
00:04:11,230 --> 00:04:14,846
How many of you sat in a meeting with a micromanager? They can

41
00:04:14,868 --> 00:04:18,810
barely do their jobs, and yet they're going to tell you how to do yours.

42
00:04:18,970 --> 00:04:22,574
There's a reason they say crimes often come back to their teachers. It's easy

43
00:04:22,612 --> 00:04:26,218
to catch a lion tiger by their toes. These types can

44
00:04:26,244 --> 00:04:29,666
barely keep their stories straight from one day to the next. They don't have the

45
00:04:29,688 --> 00:04:32,642
common sense necessary for leading a team.

46
00:04:32,776 --> 00:04:36,674
This process does not make your employees into leaders, it inspires them

47
00:04:36,712 --> 00:04:40,246
to lead. We all know that most people can't do their jobs and

48
00:04:40,268 --> 00:04:43,526
as Benjamin Franklin so eloquently put it, always taking out

49
00:04:43,548 --> 00:04:46,726
of the meal tub, but never putting back into it. And what's worse is that

50
00:04:46,748 --> 00:04:49,660
it's both a technology and a people issue.

51
00:04:50,110 --> 00:04:53,674
So, have you heard of shift left? If you

52
00:04:53,712 --> 00:04:56,460
have, are you doing it the right way?

53
00:04:57,390 --> 00:05:00,586
Right now, there is a high demand for infosec leaders who can

54
00:05:00,608 --> 00:05:03,978
pass the torch. And Devsecops is a new field.

55
00:05:04,144 --> 00:05:07,822
The ground has barely been broken in. There aren't any standards in place that present

56
00:05:07,876 --> 00:05:11,934
a synergistic combination of people in process. So we can go ahead and pause here.

57
00:05:12,132 --> 00:05:15,602
Right configuration management it's been

58
00:05:15,656 --> 00:05:18,786
one of the biggest headaches for security engineers. How many of you have stared at

59
00:05:18,808 --> 00:05:21,220
a vim config file for 3 hours?

60
00:05:23,190 --> 00:05:27,442
Here's how we can address these issues. Provide process, implement structure, and finally

61
00:05:27,576 --> 00:05:30,754
lead our team. So, do you want to win win? Then clap

62
00:05:30,802 --> 00:05:32,966
if you want to win, win. Please stand. If you want to win, win.

63
00:05:32,988 --> 00:05:35,830
And if you're a real firewalker, go ahead and pound your chest.

64
00:05:37,050 --> 00:05:40,940
We make firewalkers. Take a second.

65
00:05:41,470 --> 00:05:45,066
Ask yourself, when was the last time

66
00:05:45,248 --> 00:05:48,330
you felt like your boss showed humility?

67
00:05:48,990 --> 00:05:52,974
Other processes do not care about your feelings. We convert your

68
00:05:53,012 --> 00:05:56,558
security teams into firewalkers to give your business an edge so

69
00:05:56,564 --> 00:05:59,566
that you can land and expand, I. E.

70
00:05:59,668 --> 00:06:03,134
We take you from being interested to

71
00:06:03,172 --> 00:06:05,410
a mature devsecops capability.

72
00:06:06,950 --> 00:06:10,530
Our process cares about your feelings.

73
00:06:11,670 --> 00:06:15,054
At the end of the talk, I'd love to give you a more detailed overview

74
00:06:15,102 --> 00:06:18,466
of the training presented here. I want you all to walk away

75
00:06:18,488 --> 00:06:21,846
from this talk with an understanding of the five key points that we covered at

76
00:06:21,868 --> 00:06:25,586
the beginning of this presentation. And if you want help implementing

77
00:06:25,618 --> 00:06:29,142
this, this is where I come in. As you can see, team members

78
00:06:29,196 --> 00:06:32,294
need to be involved in the early stages of the process. We need the right

79
00:06:32,332 --> 00:06:34,874
tools and the right people working on the right things at the right time,

80
00:06:34,912 --> 00:06:38,586
supported by the right reporting. The details of these reports matter more than

81
00:06:38,608 --> 00:06:41,866
the reports themselves, and they need to show where we are going, how we're going

82
00:06:41,888 --> 00:06:44,478
to get there, what needs to be done, and how we will know when we

83
00:06:44,484 --> 00:06:48,126
have arrived. The distinguishing characteristic between our work

84
00:06:48,148 --> 00:06:52,886
and the two most referenced papers that describe approaches towards implementing

85
00:06:52,938 --> 00:06:56,382
devsecops is that not only did we implement

86
00:06:56,446 --> 00:06:59,730
a pipeline, but our process leverages the human

87
00:06:59,800 --> 00:07:03,694
element. Most organizations miss out on this aspect. The weakest

88
00:07:03,742 --> 00:07:07,586
element in any process is the human, and we provide the appropriate structure

89
00:07:07,618 --> 00:07:11,686
to get individuals to take accountability for their

90
00:07:11,788 --> 00:07:15,126
work. As you can see, you need a

91
00:07:15,148 --> 00:07:18,794
champion. These things are more

92
00:07:18,832 --> 00:07:21,962
than just a technology issue. They're a people and

93
00:07:22,016 --> 00:07:25,450
technology issue. Why are these papers important?

94
00:07:25,600 --> 00:07:28,950
Because they emphasize that we need a bridge.

95
00:07:29,110 --> 00:07:33,470
We need more than just technology. We need firewalkers.

96
00:07:34,450 --> 00:07:38,078
It's simple. A process and a team

97
00:07:38,244 --> 00:07:41,598
make a better dream. How would you like to be

98
00:07:41,764 --> 00:07:43,470
80% more efficient?

99
00:07:46,130 --> 00:07:49,666
A process gets a big dog's attention by bubbling problems up to

100
00:07:49,688 --> 00:07:52,898
the top without having to say anything. I walk through the fire and the

101
00:07:52,904 --> 00:07:56,094
flame. I dealt with difficult individuals, and I humbly

102
00:07:56,142 --> 00:07:59,446
set aside my agenda to hear what they had to say. And the key to

103
00:07:59,468 --> 00:08:02,966
influencing others is to listen. In order for our teams to

104
00:08:02,988 --> 00:08:06,790
be successful, we need to be able to establish common ground.

105
00:08:07,530 --> 00:08:10,954
We have to get team members to work with each

106
00:08:10,992 --> 00:08:14,220
other so that we can influence organizational change.

107
00:08:15,630 --> 00:08:19,034
Once we can show progress, instead of telling everyone what we are

108
00:08:19,072 --> 00:08:22,854
doing, it will become clear that things are moving forward. Too many managers

109
00:08:22,902 --> 00:08:25,834
fail to realize that the best way to influence a team is by showing,

110
00:08:25,882 --> 00:08:29,114
not telling, we have the technology. But the key is to build security champions

111
00:08:29,162 --> 00:08:33,442
so they can go on to lead. Others either get top shelf tooling or

112
00:08:33,496 --> 00:08:36,130
suffer the consequences of trying to cut corners.

113
00:08:36,470 --> 00:08:39,666
Let's face it, what's worth paying for

114
00:08:39,768 --> 00:08:42,980
is worth paying for. End of story.

115
00:08:43,510 --> 00:08:46,310
Our process leverages the best tooling.

116
00:08:48,010 --> 00:08:49,160
It's simple.

117
00:08:50,490 --> 00:08:53,922
Passion, accountability, clear communication,

118
00:08:54,066 --> 00:08:57,880
execution. These are the four

119
00:08:58,190 --> 00:09:01,500
things that make an effective team.

120
00:09:02,350 --> 00:09:05,500
We've got the Neosporin for your security needs.

121
00:09:06,430 --> 00:09:09,542
We're going to cover Veracode, burbsuite compliance,

122
00:09:09,606 --> 00:09:13,726
elasticsim, JFrog X ray, and a custom application security

123
00:09:13,828 --> 00:09:17,854
review. Here is what I'd like you to walk away from this section with.

124
00:09:18,052 --> 00:09:21,598
Our process uses a combined approach of static application

125
00:09:21,684 --> 00:09:24,634
security testing, SAS, dynamic application security testing,

126
00:09:24,682 --> 00:09:28,402
dask and container scanning. Then we use executive dashboards to support

127
00:09:28,456 --> 00:09:32,002
our claims. The combination of the tools and dashboards is one of the best

128
00:09:32,056 --> 00:09:35,910
ways to articulate our results to upper management.

129
00:09:36,250 --> 00:09:39,734
We take you from chaos to clarity. Here you can

130
00:09:39,772 --> 00:09:44,646
see an organization with over 254

131
00:09:44,748 --> 00:09:48,418
Jackson databind vulnerabilities sitting in their repository.

132
00:09:48,594 --> 00:09:52,154
And then, just after six months of

133
00:09:52,192 --> 00:09:55,898
using this program, not only are those vulnerabilities gone, but all the

134
00:09:55,904 --> 00:09:59,130
other ones that you saw there are gone too, and it continues to decrease.

135
00:09:59,950 --> 00:10:04,198
First step adversity is the foundation of strength.

136
00:10:04,294 --> 00:10:07,406
And if you aren't first, you're last. You have to set the

137
00:10:07,428 --> 00:10:10,894
tone for your team. I did this myself, and I made it look easy because

138
00:10:10,932 --> 00:10:14,610
truly nobody wants to lead. We all know that success breeds success.

139
00:10:14,680 --> 00:10:18,194
And if you don't know, now you know, you have to

140
00:10:18,232 --> 00:10:21,700
define your champions. However,

141
00:10:22,950 --> 00:10:26,530
it takes more than just talk. The devil is in the details.

142
00:10:27,750 --> 00:10:30,838
The key to a good security report is being able to show the

143
00:10:30,844 --> 00:10:34,454
details of a security scan. Static application security testing will

144
00:10:34,492 --> 00:10:37,666
allow you to pinpoint the flaws that are plaguing your applications.

145
00:10:37,778 --> 00:10:41,222
The next step is to show developers the flaws so they can take the responsibility

146
00:10:41,286 --> 00:10:44,714
for fixing their vulnerabilities. And when you go into that meeting, you need to show

147
00:10:44,752 --> 00:10:48,060
the results and say nothing.

148
00:10:49,630 --> 00:10:53,710
Let the silence consume the room so they know you are serious.

149
00:10:54,930 --> 00:10:57,520
You want the results to speak for themselves.

150
00:10:59,010 --> 00:11:02,080
Simple. Go to the platform,

151
00:11:03,110 --> 00:11:06,770
select scans, analysis, and static analysis.

152
00:11:07,350 --> 00:11:10,946
Simply just using static analysis isn't enough. We have

153
00:11:10,968 --> 00:11:14,254
to use a combined approach of dynamic application security testing and static

154
00:11:14,302 --> 00:11:18,262
application security testing to convey meaningful results. Combined together, they actually

155
00:11:18,316 --> 00:11:21,426
produce something worthwhile. A simple overview of dynamic

156
00:11:21,458 --> 00:11:25,314
application security testing just shows that you create the dynamic scan,

157
00:11:25,442 --> 00:11:29,146
you configure it, you run the scan, you view the results, and then

158
00:11:29,168 --> 00:11:31,130
your developers fix the flaws.

159
00:11:32,590 --> 00:11:36,220
Now again,

160
00:11:36,910 --> 00:11:40,370
it's simple. Click scans analysis,

161
00:11:40,550 --> 00:11:43,310
dynamic scans, and launch the scan.

162
00:11:44,850 --> 00:11:48,000
The container is a foundational layer in any application.

163
00:11:48,450 --> 00:11:52,186
We have to bake security into applications by implementing container scanning.

164
00:11:52,218 --> 00:11:55,322
With bare code container scanning, your team can catch the third party vulnerabilities

165
00:11:55,386 --> 00:11:58,786
in your application. Then developers just need to click the

166
00:11:58,808 --> 00:12:02,306
fix button in the platform to see the detailed instructions on how to fix the

167
00:12:02,328 --> 00:12:05,918
issue. Here's one line of code. Throw it in a bash

168
00:12:05,934 --> 00:12:09,986
script. Run it. Done. The purpose behind implementing

169
00:12:10,018 --> 00:12:13,190
veracode dashboards is to show upper management the results of the security

170
00:12:13,260 --> 00:12:16,774
program. The dashboards will help executives understand where we

171
00:12:16,812 --> 00:12:20,166
are in the certification process, as well as the vulnerabilities that are plaguing

172
00:12:20,198 --> 00:12:21,370
our applications.

173
00:12:22,990 --> 00:12:26,694
So why are we doing any of this? It's to influence

174
00:12:26,742 --> 00:12:29,670
team accountability, and using this process we can show progress.

175
00:12:29,750 --> 00:12:32,954
Real leaders show they don't tell we're raising

176
00:12:33,002 --> 00:12:36,606
firewalkers. Burp suite is a

177
00:12:36,628 --> 00:12:40,206
sword for security engineers. It is a man in the

178
00:12:40,228 --> 00:12:43,498
middle attack platform, and we can use this tool to analyze

179
00:12:43,514 --> 00:12:47,058
and infiltrate web traffic. The only things you need to know

180
00:12:47,144 --> 00:12:51,422
are the burp proxy, burp scanner, burp repeater, burper intruder.

181
00:12:51,566 --> 00:12:55,266
We can use this custom pen testing workflow to find vulnerabilities that the

182
00:12:55,288 --> 00:12:58,778
SAS and dast miss. The Burp proxy

183
00:12:58,814 --> 00:13:02,390
is an effective way for one to perform reconnaissance on an application.

184
00:13:02,540 --> 00:13:05,846
This is one of the first steps in executing a great penetration test.

185
00:13:05,948 --> 00:13:09,194
The proxy allows us to capture requests being made to

186
00:13:09,232 --> 00:13:12,746
the application. But guess what? You got to

187
00:13:12,768 --> 00:13:16,966
learn how to crawl before you ball. The Burp suite scanner

188
00:13:17,078 --> 00:13:21,018
is an effective tool that will allow us to crawl an application so

189
00:13:21,024 --> 00:13:25,074
that we can define the scope of our penetration test. We can download

190
00:13:25,142 --> 00:13:28,778
a PDF report generated from the Burp suite scanner that will allow us to examine

191
00:13:28,874 --> 00:13:32,526
what is wrong with our application. It will provide us with the specific details that

192
00:13:32,548 --> 00:13:36,034
are necessary for conducting a proper penetration test and then simply just use these

193
00:13:36,072 --> 00:13:39,410
findings and give them topper management to support your claims.

194
00:13:40,710 --> 00:13:44,194
The burp repeater is a tool that can be used for

195
00:13:44,232 --> 00:13:47,822
intercepting requests and then modifying them with a custom payload

196
00:13:47,886 --> 00:13:51,030
so that we can attack. The key

197
00:13:51,100 --> 00:13:53,750
is using the intruder.

198
00:13:54,330 --> 00:13:57,286
The burp intruder can be used for attacking an application.

199
00:13:57,388 --> 00:14:00,850
It allows us to execute an automated attack against websites that we

200
00:14:00,860 --> 00:14:04,250
can rinse and repeat successful attacks against them. And if the attack

201
00:14:04,320 --> 00:14:07,946
doesn't work, then we can always iterate through another set of

202
00:14:07,968 --> 00:14:11,654
attacks again. And as you can see here, I am popping

203
00:14:11,702 --> 00:14:15,182
SQL injection and I'll do it again. And I'll do it again until

204
00:14:15,236 --> 00:14:18,762
the cows come home. Here's an example of a custom payload

205
00:14:18,826 --> 00:14:21,120
being built and running an attack.

206
00:14:22,130 --> 00:14:24,820
So why is this important?

207
00:14:25,670 --> 00:14:28,530
We want to influence team accountability,

208
00:14:28,870 --> 00:14:32,322
and using this process, we can show progress. Real leaders show

209
00:14:32,376 --> 00:14:36,390
they don't tell compliance.

210
00:14:37,210 --> 00:14:40,120
Most organizations don't even have anything in place.

211
00:14:40,490 --> 00:14:44,466
We implemented full scale cloud security coverage for a mid sized

212
00:14:44,498 --> 00:14:48,514
organization, and we used a free compliance framework in terraform infrastructure

213
00:14:48,562 --> 00:14:52,106
as code to achieve this. This exercise is perfect for

214
00:14:52,128 --> 00:14:55,482
a new security engineer. The center for Internet Security

215
00:14:55,536 --> 00:14:59,450
Foundation's Benchmark is a great compliance policy to start out with. It provides specific

216
00:14:59,520 --> 00:15:03,518
instructions on how to audit and secure systems, and it's helpful for entry security

217
00:15:03,684 --> 00:15:06,650
engineers who need to create a security program from scratch.

218
00:15:06,730 --> 00:15:10,240
The instructions are easy to read, and it's free.

219
00:15:10,690 --> 00:15:14,186
As one of my greatest mentors once said, you can build a river

220
00:15:14,218 --> 00:15:18,098
in a desert. So let me take you from this desert to

221
00:15:18,264 --> 00:15:22,018
filebeat pre configured dashboards. Here you can see all of the

222
00:15:22,024 --> 00:15:25,346
instances this organization is running. We have cloud trail as well,

223
00:15:25,368 --> 00:15:28,978
so we're monitoring the API. Oh yeah, that SQL

224
00:15:28,994 --> 00:15:32,882
injection I was popping, that won't happen on my watch because we have systematic

225
00:15:32,946 --> 00:15:36,406
logging to support the penetration tests. You can

226
00:15:36,428 --> 00:15:40,246
try to hide your bugs, hide your flaws, and hide your vulnerabilities, but we're secured

227
00:15:40,358 --> 00:15:43,754
everything up in here. The first step here

228
00:15:43,792 --> 00:15:47,446
is selecting that compliance framework. And as I said, you can't

229
00:15:47,478 --> 00:15:50,666
go wrong with the center for Security Operations Benchmark because

230
00:15:50,688 --> 00:15:54,350
it's free to start out with, why wouldn't you pick it?

231
00:15:54,500 --> 00:15:58,542
We can use the standard AWS resources to manage access control

232
00:15:58,596 --> 00:16:02,234
for an organization. The AWS terraform provider has specific terraform

233
00:16:02,282 --> 00:16:05,502
resources for managing infrastructure associated with AWS

234
00:16:05,566 --> 00:16:09,954
IM. Amazon S three is

235
00:16:09,992 --> 00:16:14,226
also a big part of this. It's a storage management service that

236
00:16:14,248 --> 00:16:17,762
can help us store data, such as Amazon load balancer

237
00:16:17,826 --> 00:16:21,154
ALB access logs, which can be queried either using Amazon

238
00:16:21,202 --> 00:16:24,834
Athena or leveraged as a part of the pre built Filebeat

239
00:16:24,882 --> 00:16:28,986
AWS module that I just showed you. Elasticstack can

240
00:16:29,008 --> 00:16:32,218
be used as a security information event management system,

241
00:16:32,384 --> 00:16:36,730
a SIM for monitoring an organization's cloud resources.

242
00:16:37,070 --> 00:16:40,810
To get started with this, we need to implement logging with cloud trail.

243
00:16:41,230 --> 00:16:44,750
Once we have that configured, we can move into elasticsim.

244
00:16:45,090 --> 00:16:48,814
We can take advantage of the AWS filebeat module along with the center

245
00:16:48,852 --> 00:16:52,686
for Internet Security Operations Benchmark, the CIS Foundation's benchmark, to create

246
00:16:52,708 --> 00:16:55,906
a set of dashboards that allow us to monitor all the cloud resources that an

247
00:16:55,928 --> 00:16:59,250
organization is using. The entire configuration can be implemented using standard

248
00:16:59,320 --> 00:17:02,478
configuration files and deployed with terraform

249
00:17:02,574 --> 00:17:06,230
from the command line interface. Why is this important?

250
00:17:06,380 --> 00:17:09,186
Because we want to influence accountability,

251
00:17:09,378 --> 00:17:13,990
and using this process we can show progress. Real leaders show

252
00:17:14,140 --> 00:17:17,446
they don't tell here's what I'd like you to walk

253
00:17:17,468 --> 00:17:21,034
away from this section with. X ray is a tool that is

254
00:17:21,072 --> 00:17:24,774
used to scan your builds and the specific way that we use x ray reports

255
00:17:24,902 --> 00:17:28,474
influences accountability. Our process leverages x

256
00:17:28,512 --> 00:17:32,270
ray vulnerability reports in a simple way that can be used by any organization.

257
00:17:33,810 --> 00:17:37,326
As one of my mentors always said, you can

258
00:17:37,348 --> 00:17:41,950
build a river in a desert. We can make something out of nothing. Peter Thiel

259
00:17:42,630 --> 00:17:45,954
zero to one, this is an example of

260
00:17:45,992 --> 00:17:50,162
a shift left pipeline. So I

261
00:17:50,216 --> 00:17:53,940
asked you, are you doing it the right way?

262
00:17:55,270 --> 00:17:59,480
You might be, but here is a perfect example.

263
00:18:00,170 --> 00:18:04,438
This code could all go out to production without any proper security.

264
00:18:04,604 --> 00:18:08,146
It could be Uber. The code could go out and get hacked

265
00:18:08,178 --> 00:18:11,180
and then become the next biggest press release. However,

266
00:18:11,790 --> 00:18:15,034
security has been pushed forward in the pipeline. This is

267
00:18:15,072 --> 00:18:18,666
a perfect example of shift left. In this case, we have moved the

268
00:18:18,688 --> 00:18:22,494
security forward in the pipeline, preventing code from going out to

269
00:18:22,532 --> 00:18:25,840
production. Not only that,

270
00:18:26,450 --> 00:18:30,174
here's an example of a vulnerability report that

271
00:18:30,212 --> 00:18:33,486
can be handed to management with the specific

272
00:18:33,588 --> 00:18:37,134
fixes that need to be done. And we can stop these builds

273
00:18:37,182 --> 00:18:40,386
before they go out into production, preventing your company from

274
00:18:40,408 --> 00:18:45,010
becoming the next Uber. When we are communicating with upper management,

275
00:18:46,150 --> 00:18:49,794
we want to provide the proper data to support our progress.

276
00:18:49,922 --> 00:18:53,910
It's all about reporting. We can use an x ray report

277
00:18:53,980 --> 00:18:57,794
to generate vulnerability reports to show third party vulnerabilities

278
00:18:57,842 --> 00:19:01,046
associated with an application, and these reports can be downloaded in a PDF

279
00:19:01,078 --> 00:19:04,794
format so that they can be distributed to the right team members. That's the key

280
00:19:04,832 --> 00:19:08,860
we're showing. We're not telling. So first,

281
00:19:10,270 --> 00:19:14,046
let's be honest. You don't want to do this the hard way,

282
00:19:14,228 --> 00:19:17,710
and if you don't have the appropriate numbers and statistics to support

283
00:19:17,780 --> 00:19:21,710
your claims, no one's going to believe you. Nobody trusts anyone

284
00:19:21,780 --> 00:19:25,026
anymore. And these results are easy to read and

285
00:19:25,048 --> 00:19:28,020
they're easy to fix. It's simple.

286
00:19:28,470 --> 00:19:31,220
JFrog has the best support in the world.

287
00:19:32,070 --> 00:19:35,220
Between JFrog and Veracode, you really can't go wrong.

288
00:19:36,710 --> 00:19:40,086
The first step is initializing x ray. We have

289
00:19:40,108 --> 00:19:43,634
to configure a scan using a standard Jenkins pipeline

290
00:19:43,682 --> 00:19:47,574
script, and this can be done with an x ray plugin. The first step

291
00:19:47,612 --> 00:19:51,046
is ensuring that we've configured the proper build info before we launch

292
00:19:51,158 --> 00:19:55,050
the analysis on the code. So the specific

293
00:19:55,120 --> 00:19:58,106
build info that we want to make sure is set correctly are the arguments for

294
00:19:58,128 --> 00:20:02,394
the RT build info function. These include the server id, the URL,

295
00:20:02,522 --> 00:20:05,962
username and password. After we've successfully

296
00:20:06,026 --> 00:20:09,566
initialized the build, the next step is publishing the build info to the

297
00:20:09,588 --> 00:20:13,374
artifactory repo. We want to make sure that the builds are available for team

298
00:20:13,412 --> 00:20:16,766
members to have access, and each of these builds should be clearly

299
00:20:16,798 --> 00:20:19,570
visible in artifactory repo for a given organization.

300
00:20:20,630 --> 00:20:23,922
Then we want to configure a report. One of the most important

301
00:20:23,976 --> 00:20:27,410
aspects of this process is generating report. The report provides the specific

302
00:20:27,480 --> 00:20:30,742
details on the status of the builds that we're analyzing. They provide

303
00:20:30,796 --> 00:20:34,518
the specific steps for remedying the vulnerabilities associated with the application

304
00:20:34,604 --> 00:20:38,246
so that developers do not have to waste time trying to figure out how to

305
00:20:38,268 --> 00:20:41,306
fix vulnerabilities and management can just look at the report.

306
00:20:41,488 --> 00:20:45,014
This provides the perfect situational awareness and context for having a serious

307
00:20:45,062 --> 00:20:49,306
conversation about what needs to be done. So why

308
00:20:49,328 --> 00:20:53,262
are we doing this? Again, we need to influence team

309
00:20:53,316 --> 00:20:56,778
accountability, and using this process we can show progress.

310
00:20:56,874 --> 00:21:00,080
Real leaders show they don't tell.

311
00:21:01,010 --> 00:21:05,114
We have a strategic application security review that leverages

312
00:21:05,162 --> 00:21:08,674
research, proven leadership techniques, and our methods can be implemented in any

313
00:21:08,712 --> 00:21:12,434
situation to get individuals to take accountability for their work. If we were able to

314
00:21:12,472 --> 00:21:16,406
automate the entire management aspect of these meetings, and we

315
00:21:16,428 --> 00:21:20,870
have the data that shows that they lead to positive outcomes.

316
00:21:21,450 --> 00:21:24,694
You can build a river in a desert, something from

317
00:21:24,732 --> 00:21:27,622
nothing. Here are the results of these questions.

318
00:21:27,756 --> 00:21:31,046
As you can see, we've identified a security champion. We've reached

319
00:21:31,078 --> 00:21:35,206
a new certification level. We're consistently scanning. We implemented docker container

320
00:21:35,238 --> 00:21:38,474
scanning. Let's go down to what's happening next. Vulnerabilities either

321
00:21:38,512 --> 00:21:41,546
need to be addressed by mitigation or they need

322
00:21:41,568 --> 00:21:45,274
to be fixed and guidance on these vulnerabilities would be provided as necessary.

323
00:21:45,402 --> 00:21:48,926
But we're going to stop the new vulnerabilities from being introduced and we

324
00:21:48,948 --> 00:21:52,286
can see what was used to get there, why we're doing it,

325
00:21:52,388 --> 00:21:56,330
and who is going to be helping to get the work done. This is

326
00:21:56,340 --> 00:21:59,602
an example of automated ticketing. It's fully self service. People are taking

327
00:21:59,656 --> 00:22:03,374
responsibility for their work and they're not wasting time in meetings.

328
00:22:03,502 --> 00:22:05,810
How much time are you spending in meetings?

329
00:22:06,710 --> 00:22:10,454
So you have to identify a ticketing system. We need a way to

330
00:22:10,492 --> 00:22:14,342
provide auditing and traceability for work that has been completed and

331
00:22:14,396 --> 00:22:17,686
the work that needs to be done. Selecting a good ticketing system is the

332
00:22:17,708 --> 00:22:20,914
first step in assuring cross team collaboration.

333
00:22:20,962 --> 00:22:24,074
It allows everyone to see what each other is working on so

334
00:22:24,112 --> 00:22:28,198
that projects are completed and deadlines are met. We want to establish

335
00:22:28,374 --> 00:22:31,850
clearly defined goals that show what we are trying to achieve.

336
00:22:32,190 --> 00:22:35,914
What has been done a key aspect of this is documentation.

337
00:22:35,962 --> 00:22:39,466
It's critical. Without an accurate record of what has been done, we won't

338
00:22:39,498 --> 00:22:42,926
know what needs to be changed to improve for the future. And by providing a

339
00:22:42,948 --> 00:22:46,846
consistent record of application security reviews, teams will be able to coordinate

340
00:22:46,878 --> 00:22:50,434
with each other so that work gets done on time. The primary purpose of

341
00:22:50,472 --> 00:22:53,742
application security reviews is to provide a healthy discussion

342
00:22:53,806 --> 00:22:57,858
about the status of an organization's security objectives. It's recommended that

343
00:22:57,864 --> 00:23:01,142
these reviews take place on a weekly basis so that the team

344
00:23:01,196 --> 00:23:04,946
consistently moves forward. They can be scheduled either using Microsoft Teams,

345
00:23:04,978 --> 00:23:08,278
Zoom, Google, hangouts. The important aspect is that they are recorded and

346
00:23:08,284 --> 00:23:11,686
the meeting minutes are distributed before and after the meeting.

347
00:23:11,798 --> 00:23:15,514
When the team meets, everyone should read the previous reviews meeting minutes

348
00:23:15,632 --> 00:23:19,062
and they are prepared to answer the specific questions that each member

349
00:23:19,126 --> 00:23:22,746
of the team is responsible for answering. And when you start that meeting,

350
00:23:22,778 --> 00:23:25,360
you start with a question. Each meeting is recorded,

351
00:23:27,410 --> 00:23:31,550
so we need to provide a way for

352
00:23:31,620 --> 00:23:35,182
automating this ticketing. That means

353
00:23:35,236 --> 00:23:38,434
a fully automated solution for task management. The days of manually going

354
00:23:38,472 --> 00:23:41,858
in and assigning tasks are over. This gives teams the flexibility to work on

355
00:23:41,864 --> 00:23:44,714
their priorities without having to waste precious time in meetings.

356
00:23:44,862 --> 00:23:48,470
Ask yourself, how much time are you spending in meetings?

357
00:23:49,050 --> 00:23:52,198
Wouldn't you prefer to spend your time getting the important

358
00:23:52,284 --> 00:23:57,254
things done? The added benefit of

359
00:23:57,292 --> 00:24:00,666
using automated ticketing is that we still retain the records of

360
00:24:00,688 --> 00:24:03,020
what has been done and what needs to be done in the future.

361
00:24:05,070 --> 00:24:08,890
Have you ever lost a great leader?

362
00:24:10,530 --> 00:24:14,270
There are five key questions that

363
00:24:14,340 --> 00:24:18,510
every member is responsible for answering. These are research

364
00:24:18,580 --> 00:24:22,090
proven questions that come straight from Bob Moore, CMMC MCC

365
00:24:22,170 --> 00:24:25,842
president of effectiveness, Incorporated. The simple program

366
00:24:25,896 --> 00:24:29,634
that we've outlined utilizes these questions to take a midsize organization from

367
00:24:29,672 --> 00:24:33,134
a nonexistent security program to a veracode level three certified

368
00:24:33,182 --> 00:24:36,702
partner with fully automated remediation supported

369
00:24:36,766 --> 00:24:40,694
by full scale security information event management monitoring with

370
00:24:40,732 --> 00:24:44,678
proper infrastructure as code resources to meet the guidelines as set forth in the center

371
00:24:44,764 --> 00:24:47,110
for Internet Security Foundation's benchmark.

372
00:24:48,350 --> 00:24:51,914
If you'd like these questions, please message me after

373
00:24:51,952 --> 00:24:55,260
the presentation. Why?

374
00:24:56,190 --> 00:24:57,580
Why is this important?

375
00:25:00,820 --> 00:25:04,612
We are influencing accountability, and using this process

376
00:25:04,666 --> 00:25:07,510
we can show progress. Real leaders show they don't tell.

377
00:25:09,640 --> 00:25:13,376
All right, let's take a victory lap.

378
00:25:13,568 --> 00:25:16,308
As one of my greatest mentors always said, you can build a river in a

379
00:25:16,314 --> 00:25:19,876
desert. Here we go. We've got our software composition

380
00:25:19,908 --> 00:25:24,260
analysis in Veracode. This platform will allow us to see all the third party vulnerabilities.

381
00:25:24,340 --> 00:25:28,168
And then here we have our full scale devsecops pipeline with all the

382
00:25:28,174 --> 00:25:31,476
pain shifted to the left forward in the pipeline as opposed to after

383
00:25:31,518 --> 00:25:35,064
the pipeline. So that way you don't become the next Uber or equifax

384
00:25:35,112 --> 00:25:38,588
or whatever company is being hacked these days. It's very important that you do not

385
00:25:38,594 --> 00:25:41,516
let your code go out into production with a bunch of vulnerabilities. Otherwise you will

386
00:25:41,538 --> 00:25:45,452
definitely make it into the news. Here is an example of the automated

387
00:25:45,516 --> 00:25:49,376
security ticketing that we have set up for application security reviews. This is

388
00:25:49,398 --> 00:25:52,256
an example of the ticket with all the details. As you can see,

389
00:25:52,278 --> 00:25:55,892
the details here matter because it gives the developer the ability to go fix

390
00:25:55,946 --> 00:25:59,296
the vulnerability without any issue, without having to go to a meeting

391
00:25:59,328 --> 00:26:03,124
or wasting a security engineer's time. Here's an example of

392
00:26:03,162 --> 00:26:06,968
the Veracode score. This Veracode score is an indicator of how

393
00:26:07,134 --> 00:26:10,484
well the security is set up in the Veracode

394
00:26:10,532 --> 00:26:13,956
platform. From a security perspective, they can use these results

395
00:26:13,988 --> 00:26:17,336
to go speak to customers in sales and say we

396
00:26:17,358 --> 00:26:21,292
actually take our security seriously. This organization went from a 58, which means

397
00:26:21,426 --> 00:26:24,796
extremely hackable, to 94. Here we have

398
00:26:24,818 --> 00:26:28,152
an example of the elearning curriculum. As I said, a key aspect

399
00:26:28,216 --> 00:26:32,252
of team management is having the effective learning

400
00:26:32,306 --> 00:26:36,304
component available for developers. And this is a custom curriculum that was designed based

401
00:26:36,342 --> 00:26:39,888
on half a dozen conversations with the development team. Here we

402
00:26:39,894 --> 00:26:42,916
have the pre configured filebeat dashboards. As you can see, you can see all of

403
00:26:42,938 --> 00:26:46,340
the organization's resources in the cloud.

404
00:26:46,490 --> 00:26:49,936
And these dashboards also allow you to monitor the APIs.

405
00:26:50,128 --> 00:26:53,636
Again, nobody's hacking this application. And the security engineer has

406
00:26:53,658 --> 00:26:57,444
the added benefit that they can actually support their penetration tests

407
00:26:57,492 --> 00:27:01,240
with the systematic logging from the security information event

408
00:27:01,310 --> 00:27:04,436
management system. You can see that SQL

409
00:27:04,468 --> 00:27:08,552
injection is being popped right here. Added benefit.

410
00:27:08,696 --> 00:27:11,756
The custom penetration testing workflow utilizes the results from

411
00:27:11,778 --> 00:27:15,800
the static application secured scan to execute successful penetration

412
00:27:15,880 --> 00:27:19,896
tests. As you can see, this developer was naive enough to actually let SQL

413
00:27:19,928 --> 00:27:23,504
injection go into their code. And so the next step here is to take

414
00:27:23,542 --> 00:27:26,320
these results and then go pop them with burp suite.

415
00:27:27,700 --> 00:27:31,920
Those results that we saw at the beginning with over 254 vulnerabilities from Jackson databine,

416
00:27:32,280 --> 00:27:35,604
pretty much gone down to nothing. So use

417
00:27:35,642 --> 00:27:38,976
it or lose it. Here's container

418
00:27:39,008 --> 00:27:41,812
scanning we can see set up in the veracode platform,

419
00:27:41,946 --> 00:27:45,552
right? This is automated. It's scanning all the applications.

420
00:27:45,616 --> 00:27:48,616
The security engineer does not have to go in there. What this does is it

421
00:27:48,638 --> 00:27:52,472
provides all the results in the platform, one centralized location for developers and security

422
00:27:52,526 --> 00:27:56,228
engineers to work together to reach meaningful results and help their organization

423
00:27:56,324 --> 00:27:59,230
reach the level of security maturity that they want to be at.

424
00:28:00,560 --> 00:28:04,284
This trend here shows that with consistent scanning, what we

425
00:28:04,322 --> 00:28:07,628
noticed was the vulnerabilities in

426
00:28:07,634 --> 00:28:10,620
the application went down because the results were so overwhelming.

427
00:28:12,000 --> 00:28:15,644
This is an example of the container scanning portion of the veracode

428
00:28:15,692 --> 00:28:19,708
platform. As you can see, there's over 19 microservices here being monitored.

429
00:28:19,804 --> 00:28:22,892
The ones that have Red X's on them mean that they're actually vulnerable.

430
00:28:22,956 --> 00:28:26,180
All a developer has to do is go into this platform, click on the service

431
00:28:26,250 --> 00:28:29,716
that'll take them to veracode, and then they click on the fix button from

432
00:28:29,738 --> 00:28:33,296
the veracode platform. And then they can see the specific instructions

433
00:28:33,408 --> 00:28:36,712
on how to fix the vulnerability. It's very simple

434
00:28:36,846 --> 00:28:40,536
and it's easy for the developer to

435
00:28:40,558 --> 00:28:44,456
schedule these application security reviews. As I said, you could use whatever you like.

436
00:28:44,558 --> 00:28:47,656
Simple Google Hangout will do. All you have to do is set it up so

437
00:28:47,678 --> 00:28:51,256
it recurs on a weekly basis. This is an example of the Veracode

438
00:28:51,288 --> 00:28:54,956
dashboard. As you can see, there's 1675

439
00:28:54,978 --> 00:28:58,552
vulnerabilities remaining. But over 1547 vulnerabilities were closed.

440
00:28:58,616 --> 00:29:02,316
And in this organization, all of the high severity to high vulnerabilities

441
00:29:02,348 --> 00:29:04,320
were removed immediately.

442
00:29:05,940 --> 00:29:09,250
Now, as I said,

443
00:29:10,260 --> 00:29:13,540
prepare your minds for a paradigm shift.

444
00:29:14,440 --> 00:29:18,228
I'm now going to show you an invisibility cloak for

445
00:29:18,234 --> 00:29:19,060
the Internet.

446
00:29:23,080 --> 00:29:24,390
Now you see it,

447
00:29:39,280 --> 00:29:42,716
now you don't. The icon is spinning here. What you're

448
00:29:42,748 --> 00:29:46,464
seeing here is someone accessing the devsecops pipeline that we

449
00:29:46,502 --> 00:29:50,752
described. What is happening here

450
00:29:50,806 --> 00:29:54,272
is we're taking it off the Internet. So not only does this provide the proper

451
00:29:54,326 --> 00:29:57,568
security for all of your code to be pushed to production in a secure fashion,

452
00:29:57,664 --> 00:30:01,520
it's also guarded from the Internet. It's wrapped up in an invisibility

453
00:30:01,600 --> 00:30:04,340
cloak using a zero trust client.

454
00:30:07,460 --> 00:30:10,150
For more information, please reach out to me.

455
00:30:11,160 --> 00:30:14,256
So do you want the benefits of implementing

456
00:30:14,288 --> 00:30:17,556
this program? Do you want to save time and money? If you want to take

457
00:30:17,578 --> 00:30:21,588
your organization to a mature devsecops capability, then here's my contact

458
00:30:21,674 --> 00:30:25,112
information. I'm happy to offer you a free sample of content. Also,

459
00:30:25,246 --> 00:30:28,936
I'm happy to discuss your specific needs in a separate information session. We will

460
00:30:28,958 --> 00:30:32,776
do everything for you. You don't have to spend time worrying about management.

461
00:30:32,888 --> 00:30:36,492
You can focus on the more important things. There's never

462
00:30:36,546 --> 00:30:40,060
enough time. Thank you for yours.

463
00:30:40,640 --> 00:30:44,480
Scan this QR code to access more information related to

464
00:30:44,630 --> 00:30:48,416
my contact. To show a token of

465
00:30:48,438 --> 00:30:51,792
your gratitude, tweet at Evan Gertis at comp 42.

466
00:30:51,926 --> 00:30:54,796
Hashtag success. Hashtag entrepreneurship.

467
00:30:54,988 --> 00:30:58,816
Hashtag comp 42. Subscribe to me on YouTube for

468
00:30:58,838 --> 00:31:02,230
more content. Again, thank you. I'm humbled by this opportunity.

469
00:31:02,760 --> 00:31:06,084
Wouldn't be here if it wasn't for all these great mentors and

470
00:31:06,122 --> 00:31:09,764
wonderful people who have helped me out in my life. Here are the

471
00:31:09,802 --> 00:31:13,248
references to the research papers that were used. Again, reach out to me.

472
00:31:13,274 --> 00:31:16,084
I'm happy to provide you with the slides and the links to these papers.

473
00:31:16,132 --> 00:31:19,512
These are a combination of the two most referenced papers on

474
00:31:19,566 --> 00:31:23,496
implementing a devsecops pipeline from connected papers. Here are all

475
00:31:23,518 --> 00:31:26,956
the resources. These resources provide the getting started guide so anyone can take

476
00:31:26,978 --> 00:31:28,910
this program and go do it on their own.

477
00:31:30,000 --> 00:31:33,756
This is a continuation of this. So again, please see me after the

478
00:31:33,778 --> 00:31:37,776
session. Message me and I'm happy to share these with you. Thank you.

479
00:31:37,958 --> 00:31:41,248
There are any questions. I appreciate your time.

480
00:31:41,414 --> 00:31:44,160
This has been a wonderful opportunity. My name is Evan Gertis.

481
00:31:45,220 --> 00:31:48,736
I'm a Devsecops engineer. I graduated from the

482
00:31:48,758 --> 00:31:52,652
University of North Carolina at Chapel Hill with a bachelor's in science and physics

483
00:31:52,716 --> 00:31:56,256
and the Allen Paulson College of Engineering at Georgia Southern University with a master's in

484
00:31:56,278 --> 00:32:00,152
computer science. I'm a certified terraform associate developer in

485
00:32:00,206 --> 00:32:04,280
electrical and computer engineer, and I'm a certified security plus

486
00:32:04,350 --> 00:32:06,550
information security professional. Thank you.

