1
00:00:25,570 --> 00:00:29,362
Hi, I'm Oliver, welcome to my talk about DevOps automation

2
00:00:29,426 --> 00:00:32,982
with Go. So I've been a software engineer for more than 20 years

3
00:00:33,116 --> 00:00:36,566
and I discovered go back in 2017 and I

4
00:00:36,588 --> 00:00:40,390
immediately fell in love with it. It's a great language to write, but especially

5
00:00:40,540 --> 00:00:44,278
to read when you have a large code base to get into. I've been

6
00:00:44,284 --> 00:00:47,330
the lead developer at Restorepoint since 2019.

7
00:00:47,490 --> 00:00:51,054
Restorepoint is the name of our company, but also so of our

8
00:00:51,092 --> 00:00:54,586
main product, which is a network automation device backup

9
00:00:54,618 --> 00:00:58,074
and restore solution. It's all written as a go monolith,

10
00:00:58,122 --> 00:01:01,514
so we have a single binary which is highly

11
00:01:01,562 --> 00:01:05,114
concurrent. We have our own scheduler, HTTP server,

12
00:01:05,162 --> 00:01:08,222
FTP server, TFTP server, a lure environment,

13
00:01:08,286 --> 00:01:12,210
et cetera, et cetera. And all this runs inside

14
00:01:12,280 --> 00:01:15,814
a Linux environment which we tightly control.

15
00:01:15,932 --> 00:01:19,174
So most of our customers run it on premise or in their own

16
00:01:19,212 --> 00:01:23,254
cloud, and it's updated either

17
00:01:23,372 --> 00:01:26,850
manual or automatic by an update server.

18
00:01:26,930 --> 00:01:31,026
So we currently have around 120,000 lines of go,

19
00:01:31,148 --> 00:01:34,454
not counting comments, plus roughly

20
00:01:34,502 --> 00:01:38,342
2.8 million from external libraries. And we use GitLab

21
00:01:38,406 --> 00:01:42,334
for our whole development lifecycle. So how does our

22
00:01:42,372 --> 00:01:45,626
DevOps look like? So we have three different release

23
00:01:45,658 --> 00:01:48,878
versions. We have two target environments. We do

24
00:01:48,964 --> 00:01:52,654
weekly production releases. We could actually release every day if we wanted to,

25
00:01:52,692 --> 00:01:55,982
but most of our customers prefer a weekly release.

26
00:01:56,046 --> 00:01:59,886
So we released in the middle of the week. But we do our development

27
00:01:59,918 --> 00:02:03,010
releases internally. They are released whenever there's a change.

28
00:02:03,080 --> 00:02:07,106
So that's continuous. And we have multiple internal

29
00:02:07,138 --> 00:02:10,854
tools that make our lives easier. And as you can see down

30
00:02:10,892 --> 00:02:14,838
here in that image, that is how our pipeline looks

31
00:02:14,924 --> 00:02:18,314
at the moment. So one of our internal tools is

32
00:02:18,352 --> 00:02:21,930
the release API, which avoids us having to

33
00:02:22,000 --> 00:02:25,382
copy the build artifacts from our build server

34
00:02:25,446 --> 00:02:29,690
to the update server. So it's a tightly controlled

35
00:02:30,510 --> 00:02:34,238
solution and it's used by multiple of our products,

36
00:02:34,404 --> 00:02:37,966
and it's a single binary service as well. And so it

37
00:02:37,988 --> 00:02:42,000
has two sides. So the build server sends a call

38
00:02:43,250 --> 00:02:46,606
by a post of course, and it sends

39
00:02:46,718 --> 00:02:50,562
the final build artifacts as a TGZ, it md five

40
00:02:50,616 --> 00:02:54,254
sums the TGZ and then sends additional metadata.

41
00:02:54,302 --> 00:02:57,398
So down here I've copied the call that

42
00:02:57,404 --> 00:03:00,582
we actually sent to our server. As you can see, there's a

43
00:03:00,636 --> 00:03:04,214
lot of additional metadata, doesn't apply for all

44
00:03:04,332 --> 00:03:08,386
products, for most of them. And then there's a shared secret between the build

45
00:03:08,428 --> 00:03:11,894
server and the release API, so that the release API

46
00:03:11,942 --> 00:03:15,718
will only react to calls that contain that shared secret.

47
00:03:15,814 --> 00:03:20,006
And then on the receiving side, so the release API

48
00:03:20,198 --> 00:03:23,934
receives that post request that I mentioned checks that all

49
00:03:23,972 --> 00:03:27,598
required metadata fields for a product have been passed, checks the

50
00:03:27,604 --> 00:03:30,766
shared secret, of course. And then it writes the

51
00:03:30,788 --> 00:03:33,866
file that's been passed and calculates the MD five sum

52
00:03:33,898 --> 00:03:37,806
at the same time, which is quite a nice trick

53
00:03:37,838 --> 00:03:42,082
you can do in go by using a t reader. And if the

54
00:03:42,216 --> 00:03:45,694
calculate MD five sum is not the same as the one that has been sent

55
00:03:45,752 --> 00:03:49,414
in the request, then the release is also

56
00:03:49,612 --> 00:03:53,030
aborted. And once all the checks are done,

57
00:03:53,100 --> 00:03:56,534
then the metadata is written to an end file as well as the

58
00:03:56,572 --> 00:04:00,246
TGZ, and then it's passed to an individual release

59
00:04:00,278 --> 00:04:03,514
script based on the product. And this is a single

60
00:04:03,552 --> 00:04:08,118
binary service, as I mentioned, and it's

61
00:04:08,214 --> 00:04:11,858
maybe 100 lines of code and it's a really nice, like it's

62
00:04:11,894 --> 00:04:15,454
one of the powers of Go in my opinion, that you can actually

63
00:04:15,652 --> 00:04:19,338
write a web server and very few lines.

64
00:04:19,514 --> 00:04:23,018
Another tool that we have is the Freshdesk GitLab bridge.

65
00:04:23,114 --> 00:04:26,630
So for our first line support we use Freshdesk.

66
00:04:26,810 --> 00:04:30,414
And as developers we only deal with issues in GitLab

67
00:04:30,542 --> 00:04:34,706
and our support engineers decide when to escalate issues

68
00:04:34,808 --> 00:04:38,146
to us as developers. And we've written

69
00:04:38,178 --> 00:04:42,146
a temper monkey script around that which injects a button into the freshdesk

70
00:04:42,178 --> 00:04:45,714
UI. So it's quite easy to trigger that escalation

71
00:04:45,762 --> 00:04:49,154
process. And it will copy all comments from Freshdesk

72
00:04:49,202 --> 00:04:52,502
and all attachments into an issue in GitLab.

73
00:04:52,566 --> 00:04:56,314
And it avoids creating duplicates as well. And also make sure that

74
00:04:56,352 --> 00:05:00,314
both sides have a link so you know which ones have been

75
00:05:00,352 --> 00:05:04,220
escalated and which ones are not. I can show that real quick.

76
00:05:04,750 --> 00:05:08,270
So this is a video that I took just, you can see that button

77
00:05:08,340 --> 00:05:11,886
over here. This is the injected button, and it will ask you

78
00:05:11,908 --> 00:05:15,278
if you really want to do this. And then it will copy the files from

79
00:05:15,364 --> 00:05:19,380
a freshdesk and will create a GitLab issue

80
00:05:19,750 --> 00:05:23,074
out of the freshdesk issue. And that's quite

81
00:05:23,112 --> 00:05:26,998
a neat way for us to deal with customer support

82
00:05:27,084 --> 00:05:30,982
without having to expose the whole team to

83
00:05:31,036 --> 00:05:34,690
all custom issues. Not all of them are related to development.

84
00:05:34,850 --> 00:05:38,486
And also this is a single binary service as

85
00:05:38,508 --> 00:05:42,074
well. And then we have another tool which we call

86
00:05:42,112 --> 00:05:45,514
the automatic version check. It warns us because we have

87
00:05:45,552 --> 00:05:48,918
more than one production release, we have three, actually. It warns

88
00:05:48,934 --> 00:05:52,634
us if we are trying to merge mismatched versions. So if

89
00:05:52,672 --> 00:05:56,206
I want to say, as you can see here in the screenshot, we have

90
00:05:56,228 --> 00:05:59,774
a five three one version and a five four version. When trying to

91
00:05:59,812 --> 00:06:03,406
merge that, then I get this warning as

92
00:06:03,428 --> 00:06:07,054
a comment and the way it works with merge requests internally

93
00:06:07,182 --> 00:06:10,930
you cannot merge a merge request unless you have resolved all issues,

94
00:06:11,080 --> 00:06:14,894
like all discussions on a merge request. So this will keep the merch request

95
00:06:14,942 --> 00:06:18,070
from being or accidentally merged. This works

96
00:06:18,140 --> 00:06:22,162
by a webhook. So this is also a service that's running on a server.

97
00:06:22,226 --> 00:06:25,842
And GitLab basically sends all merge requests,

98
00:06:25,986 --> 00:06:29,062
or like signals, all merge requests via webhook

99
00:06:29,126 --> 00:06:32,986
to this endpoint. And then we use the GitLab API to

100
00:06:33,008 --> 00:06:36,842
check the version of the source and target branch. And then

101
00:06:36,976 --> 00:06:41,162
we have an additional thing for automating our

102
00:06:41,216 --> 00:06:44,926
development workflow. So GitLab has

103
00:06:44,948 --> 00:06:49,274
these things called boards, and you can use different statuses,

104
00:06:49,322 --> 00:06:53,150
which are labels in GitLab. And these labels,

105
00:06:54,770 --> 00:06:58,402
we use them for everything, for the area of

106
00:06:58,456 --> 00:07:01,774
the product it applies to, if it's a UI

107
00:07:01,822 --> 00:07:05,494
or an API issue, if it's a fresh dust ticket for example, but also for

108
00:07:05,532 --> 00:07:08,822
process. So our GitLab issues always

109
00:07:08,876 --> 00:07:12,662
go through that stage from open to to do

110
00:07:12,716 --> 00:07:16,082
to in development to in review to test to testing,

111
00:07:16,226 --> 00:07:19,994
and then eventually they get closed. And we just make sure

112
00:07:20,032 --> 00:07:23,834
that we automatically transition issues when

113
00:07:23,872 --> 00:07:27,306
a merge request is opened. So the only thing a developer has to do is

114
00:07:27,328 --> 00:07:31,066
to actually mention the number of GitLab issue in

115
00:07:31,088 --> 00:07:34,974
their merge request, and then the ticket will automatically be

116
00:07:35,092 --> 00:07:38,826
set to be in review. And when the merge request is merged, then it's changed

117
00:07:38,858 --> 00:07:42,446
to test. And this really reduces the

118
00:07:42,468 --> 00:07:46,286
amount of manual updates that we have to do, because as developers

119
00:07:46,318 --> 00:07:50,194
we tend to always forget these things. But it's nice to have

120
00:07:50,312 --> 00:07:53,794
our issues in the right state so it's clear where we

121
00:07:53,832 --> 00:07:57,330
are, what the progress is, et cetera. And then another

122
00:07:57,400 --> 00:08:00,726
thing that because we have a highly concurrent piece of software with

123
00:08:00,748 --> 00:08:04,950
a lot of lines of code, so we from time to time have data

124
00:08:05,020 --> 00:08:09,014
races and go has this nice way

125
00:08:09,052 --> 00:08:12,614
of allowing you to detect race conditions, so it will see if a variable

126
00:08:12,662 --> 00:08:16,106
is read and written to at the same time. And therefore all

127
00:08:16,128 --> 00:08:19,782
of our internal development builds have race condition detection enabled,

128
00:08:19,846 --> 00:08:23,194
which is bit of a performance, or it has a performance

129
00:08:23,242 --> 00:08:27,674
impact. So I think it increases cpu

130
00:08:27,722 --> 00:08:31,662
usage by, I can't remember, but it definitely

131
00:08:31,716 --> 00:08:36,222
takes more cpu cycles, but especially memory, I think it doubles the memory usage.

132
00:08:36,366 --> 00:08:40,254
So we only do this for development builds internally.

133
00:08:40,382 --> 00:08:44,354
And the reason why we have to do this is because most of our

134
00:08:44,472 --> 00:08:48,434
race conditions, they happen whenever a certain code pass is

135
00:08:48,472 --> 00:08:52,178
hit. And we have course fixed

136
00:08:52,274 --> 00:08:56,102
all the low hanging fruit, but there's always something left

137
00:08:56,156 --> 00:08:59,906
somewhere and also sometimes it's library code. So we have discovered

138
00:09:00,018 --> 00:09:03,526
quite a lot of race conditions in external libraries and then reported

139
00:09:03,558 --> 00:09:07,542
that as well. And so we have a lot of internal boxes

140
00:09:07,606 --> 00:09:10,846
that replicate all the common usage scenarios that we have,

141
00:09:10,868 --> 00:09:15,610
and they run twenty four seven, and then they write race condition

142
00:09:15,770 --> 00:09:20,350
error messages into their log files. And then we run this

143
00:09:20,420 --> 00:09:23,954
race condition check tool once every day on

144
00:09:23,992 --> 00:09:28,562
these individual machines. And then if

145
00:09:28,616 --> 00:09:32,478
a race condition is found in logs, then it will automatically

146
00:09:32,574 --> 00:09:35,650
create an GitLab issue for each entry. And if

147
00:09:35,720 --> 00:09:39,426
an entry already exists, then it will add a comment

148
00:09:39,458 --> 00:09:42,726
instead to keep the issue fresh. So I copied here an

149
00:09:42,748 --> 00:09:46,214
example of how that looks like in a log. So it starts with

150
00:09:46,252 --> 00:09:49,562
warning, colon data, race, that's the start

151
00:09:49,696 --> 00:09:53,782
marker. And then it usually goes like right at blah blah

152
00:09:53,926 --> 00:09:57,754
memory address and go routine, number, number something, and then the

153
00:09:57,792 --> 00:10:00,826
code, the function where this occurs, this is what we

154
00:10:00,848 --> 00:10:04,014
use as the title, then everything below. So between

155
00:10:04,052 --> 00:10:08,094
the start and the end marker we put into the issue, and this

156
00:10:08,132 --> 00:10:12,206
ends up looking like this. So I had to blur, of course, the details for

157
00:10:12,228 --> 00:10:15,842
obvious reasons, but it will basically show this,

158
00:10:15,976 --> 00:10:19,570
it shows where it occurred, where the write was,

159
00:10:19,720 --> 00:10:23,474
where the previous write was, where a read was, and it

160
00:10:23,512 --> 00:10:27,330
will automatically label it with the race conditions tag,

161
00:10:27,410 --> 00:10:30,758
which is important. So we can actually see if

162
00:10:30,844 --> 00:10:33,798
that this was an actual race condition problem. Yeah,

163
00:10:33,964 --> 00:10:37,254
and that's a really nice solution for that.

164
00:10:37,372 --> 00:10:41,402
And then we have another tool which is for

165
00:10:41,456 --> 00:10:44,810
automatic library versioning. So we have roughly 20

166
00:10:44,880 --> 00:10:49,018
internal libraries that are being used by different products,

167
00:10:49,184 --> 00:10:52,846
and these are consumed via go modules, of course,

168
00:10:52,948 --> 00:10:56,446
and go like semantic version tags. So when

169
00:10:56,468 --> 00:11:00,574
you do a go get and then you say the name of the library or

170
00:11:00,692 --> 00:11:04,126
the URL of the library, and then add and then the version

171
00:11:04,158 --> 00:11:07,746
tag. And we built a tool around that,

172
00:11:07,848 --> 00:11:12,142
which is a job that's run on the individual libraries

173
00:11:12,286 --> 00:11:15,374
CI CD pipeline. It's a tag job,

174
00:11:15,512 --> 00:11:19,414
and it will basically, whenever the master branch of

175
00:11:19,532 --> 00:11:23,522
the library is updated, it will tag the library automatically

176
00:11:23,586 --> 00:11:27,846
using the last commit message as the description

177
00:11:27,878 --> 00:11:32,234
of the tag, and increases the patch level of the

178
00:11:32,272 --> 00:11:35,754
previous tag, and therefore create a new

179
00:11:35,792 --> 00:11:39,786
version which then can be used in the

180
00:11:39,808 --> 00:11:43,354
product that is using the library. And it will make sure that it will

181
00:11:43,472 --> 00:11:46,974
either increment any existing tags, or if

182
00:11:47,012 --> 00:11:50,526
no tags exist, then it will just create a new one. Yeah, and this is

183
00:11:50,548 --> 00:11:54,014
it. So this is how we automate our own DevOps

184
00:11:54,062 --> 00:11:57,714
at Restorepoint. And I have

185
00:11:57,752 --> 00:12:01,780
to do a shameless plug at the end, of course. So we are hiring in

186
00:12:02,310 --> 00:12:05,726
either remote UK or EU, and our pitch

187
00:12:05,758 --> 00:12:09,606
is of course, if you're tired of the same old go microservice on

188
00:12:09,628 --> 00:12:12,518
Kubernetes pitch, then maybe have a chat with us.

189
00:12:12,684 --> 00:12:16,018
As I explained, we ship an on premise go monolith wrapped

190
00:12:16,034 --> 00:12:19,254
in a Linux box every week and our customers love it.

191
00:12:19,372 --> 00:12:22,770
And yeah, we're looking for driven and analytical

192
00:12:22,850 --> 00:12:26,294
software engineers, ideally with go experience. But we

193
00:12:26,332 --> 00:12:30,026
can also consider you if you are really experienced

194
00:12:30,098 --> 00:12:33,806
in another language and you want to cross train because Go

195
00:12:33,828 --> 00:12:37,774
is relatively easy to pick up. Yeah. So please come

196
00:12:37,812 --> 00:12:41,120
and talk to either me or hit our careers page.

197
00:12:41,490 --> 00:12:42,220
Thank you very much.

