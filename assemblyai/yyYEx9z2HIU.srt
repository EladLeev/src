1
00:00:27,650 --> 00:00:31,302
Hello everyone, my name is Fakundo and today we will talk about

2
00:00:31,356 --> 00:00:35,046
incremental static regeneration. First of

3
00:00:35,068 --> 00:00:39,266
all, I want to introduce myself. I'm Facundo Giuliani from Buenos

4
00:00:39,298 --> 00:00:43,222
Aires, Argentina. I'm a developer relations engineer at

5
00:00:43,276 --> 00:00:46,578
Storyblock. I'm also an odd serial ambassador,

6
00:00:46,674 --> 00:00:50,010
a prism ambassador and a clothingary media developer expert.

7
00:00:50,050 --> 00:00:53,630
It if you want to talk about any of these services

8
00:00:53,780 --> 00:00:57,502
or tools, or if you want to talk about any other thing,

9
00:00:57,636 --> 00:01:01,774
you can contact me. My website is fjuliani.com

10
00:01:01,892 --> 00:01:06,190
and I'm on Twitter. My handle is fakundosurdo.

11
00:01:06,710 --> 00:01:10,686
So first of all I wanted to define

12
00:01:10,718 --> 00:01:14,498
what a static web page is. It is a web page

13
00:01:14,584 --> 00:01:18,054
that is delivered to the user's browser exactly as

14
00:01:18,092 --> 00:01:22,182
it's stored. So we can have a web page that

15
00:01:22,236 --> 00:01:26,402
has an HTML file, CsS file and JavaScript

16
00:01:26,466 --> 00:01:30,506
file that we will call it static page.

17
00:01:30,608 --> 00:01:34,282
If we are delivering the same files to all the users that

18
00:01:34,336 --> 00:01:38,010
visit our website no matter any condition.

19
00:01:38,510 --> 00:01:41,774
This doesn't mean that the content of the page ISR

20
00:01:41,812 --> 00:01:45,502
going to be static. I mean we can have interactions and

21
00:01:45,556 --> 00:01:48,814
dynamism, but we will use that

22
00:01:48,932 --> 00:01:52,490
or we will generate this using JavaScript,

23
00:01:52,650 --> 00:01:56,434
but the files that we are going to deliver to all the users that are

24
00:01:56,472 --> 00:01:59,060
visiting our website will be the same.

25
00:02:00,230 --> 00:02:03,570
Different is the case of the dynamic web pages,

26
00:02:04,230 --> 00:02:08,562
which are web pages where some of the content is generated dynamically

27
00:02:08,706 --> 00:02:12,146
when needed. So depending on the user

28
00:02:12,178 --> 00:02:15,074
that is visiting our website or other conditions,

29
00:02:15,202 --> 00:02:19,238
we will generate HTML content dynamically

30
00:02:19,414 --> 00:02:23,114
on the fly and we will return that to the

31
00:02:23,152 --> 00:02:27,194
user as if it were an HTML page

32
00:02:27,312 --> 00:02:30,140
that was statically stored on the website.

33
00:02:30,770 --> 00:02:34,606
The user won't know that we have

34
00:02:34,708 --> 00:02:38,638
two main methods of rendering this

35
00:02:38,724 --> 00:02:42,110
dynamically generated HTML content.

36
00:02:42,260 --> 00:02:45,966
One of these methods is the server sites rerendering,

37
00:02:46,158 --> 00:02:50,654
where the HTML content is generated by the web server

38
00:02:50,782 --> 00:02:54,702
and return it to the user as if it were an

39
00:02:54,856 --> 00:02:58,406
HTML file. But on the other hand, we have

40
00:02:58,428 --> 00:03:01,794
the client side rendering where the HTML

41
00:03:01,842 --> 00:03:06,210
content ISR rendered directly in the browser using JavaScript.

42
00:03:06,370 --> 00:03:10,518
So this will be the example of a react application, for instance,

43
00:03:10,694 --> 00:03:14,278
where we have JavaScript code being executed

44
00:03:14,374 --> 00:03:18,502
in the user's browser and generating HTML

45
00:03:18,566 --> 00:03:22,126
content dynamically. So we can choose

46
00:03:22,228 --> 00:03:25,486
these types of rerendering HTML content if we

47
00:03:25,508 --> 00:03:29,280
want to generate it dynamically, let's say.

48
00:03:30,290 --> 00:03:33,954
But let's go back to the static web page because even

49
00:03:33,992 --> 00:03:37,826
though this was the first type of web pages that we were

50
00:03:37,848 --> 00:03:40,850
able to create on the instance,

51
00:03:41,350 --> 00:03:45,366
they have some cool benefits that we can

52
00:03:45,468 --> 00:03:49,174
identify and that we can get advantage of even

53
00:03:49,292 --> 00:03:52,710
in these times in these years. For instance,

54
00:03:53,210 --> 00:03:57,614
static web page isr fast because we are delivering static assets

55
00:03:57,762 --> 00:04:01,274
to the users without doing any kind of

56
00:04:01,312 --> 00:04:05,094
processing or any dynamic generation

57
00:04:05,222 --> 00:04:09,030
of content. The static web pages are cheap

58
00:04:09,110 --> 00:04:12,030
because we will need sites, sorry,

59
00:04:12,100 --> 00:04:15,562
web servers that will store these static

60
00:04:15,626 --> 00:04:19,086
assets and deliver them to the users without doing

61
00:04:19,188 --> 00:04:22,538
any process. Or we don't need any calculus to

62
00:04:22,564 --> 00:04:27,060
be executed so they can only

63
00:04:27,990 --> 00:04:31,826
store the files and deliver them to the users that are visiting our

64
00:04:31,848 --> 00:04:35,118
websites. The static web pages are

65
00:04:35,144 --> 00:04:38,838
easier to maintain because as any other file system

66
00:04:38,924 --> 00:04:42,566
we can move sites from one side to the other.

67
00:04:42,748 --> 00:04:46,482
They are more secure because we are not executing

68
00:04:46,546 --> 00:04:49,962
code on the flight, so we don't have to worry about

69
00:04:50,096 --> 00:04:53,370
securing any kind of code execution.

70
00:04:54,110 --> 00:04:58,490
They are easy to scale because adding more storage

71
00:04:58,830 --> 00:05:03,354
space to our web servers we will be able to scale

72
00:05:03,482 --> 00:05:07,006
the static websites that we are working on. So for

73
00:05:07,028 --> 00:05:10,062
instance, if we have a blog and

74
00:05:10,116 --> 00:05:13,826
we are creating more and more articles and blog posts in

75
00:05:13,848 --> 00:05:17,666
our website, just adding more storage space to

76
00:05:17,688 --> 00:05:21,950
the web server will help us to scale

77
00:05:22,030 --> 00:05:25,402
our website. And they are stable

78
00:05:25,486 --> 00:05:29,170
because as we are not executing code or doing operations

79
00:05:29,250 --> 00:05:33,474
on the flight, the visitors will only have to download

80
00:05:33,522 --> 00:05:36,978
the files to their browsers and will browse

81
00:05:37,074 --> 00:05:40,730
the website. So that will make our website

82
00:05:40,800 --> 00:05:44,810
to work more stable. So having

83
00:05:44,880 --> 00:05:48,730
all these benefits in mind, a new concept

84
00:05:50,130 --> 00:05:54,926
was created. The concept of static sites generation which

85
00:05:54,948 --> 00:05:58,062
ISR compiling and rerendering a web application

86
00:05:58,196 --> 00:06:02,662
at build time, generating static assets like HTML,

87
00:06:02,746 --> 00:06:05,090
JavaScript and CSS files.

88
00:06:05,910 --> 00:06:09,890
So we will have a project

89
00:06:10,040 --> 00:06:12,980
with a templating engine.

90
00:06:13,750 --> 00:06:17,174
Depending on the programming language that we want to use, we can

91
00:06:17,212 --> 00:06:21,474
have different templates that we can use and besides these templates,

92
00:06:21,522 --> 00:06:25,126
we will have data sources like APIs that

93
00:06:25,148 --> 00:06:28,554
we can consume, headless CMS or

94
00:06:28,592 --> 00:06:32,278
content management systems. We can have databases,

95
00:06:32,454 --> 00:06:36,282
we can have processes that are being executed and based

96
00:06:36,336 --> 00:06:39,942
on these operations and these data sources and these

97
00:06:40,016 --> 00:06:43,518
templates, we will run a build process using

98
00:06:43,604 --> 00:06:46,974
a static site generator and we will

99
00:06:47,012 --> 00:06:50,894
generate static assets that are going to be

100
00:06:51,012 --> 00:06:53,700
my website, I mean my static website.

101
00:06:54,070 --> 00:06:58,014
So we can work with different tools,

102
00:06:58,142 --> 00:07:01,474
modern tools to create our projects and our

103
00:07:01,512 --> 00:07:05,154
websites and generate static assets as if it

104
00:07:05,192 --> 00:07:08,966
were a static sites like the ones that we

105
00:07:08,988 --> 00:07:11,400
created in the said.

106
00:07:12,410 --> 00:07:16,246
So there are different static site generators that we

107
00:07:16,268 --> 00:07:19,306
can use and there are a lot of options in the market

108
00:07:19,408 --> 00:07:23,434
depending on the framework or the programming language that you want to use

109
00:07:23,632 --> 00:07:28,102
today. I will focus on next JS which is a react

110
00:07:28,166 --> 00:07:31,830
framework that allows creating user interfaces,

111
00:07:31,990 --> 00:07:35,630
static pages and server side rendered pages.

112
00:07:36,850 --> 00:07:40,362
So we can create different pages

113
00:07:40,426 --> 00:07:44,442
using react components and all the features that react offers

114
00:07:44,506 --> 00:07:48,642
us. And next JS offers a page based

115
00:07:48,776 --> 00:07:52,718
way of working. So we will have one JavaScript file

116
00:07:52,814 --> 00:07:56,214
per page in our website or we can work

117
00:07:56,252 --> 00:07:59,554
with dynamic roots that one JavaScript

118
00:07:59,602 --> 00:08:02,934
file will generate multiple pages. Like for

119
00:08:02,972 --> 00:08:06,930
instance we can create one JavaScript file with nextjs

120
00:08:07,010 --> 00:08:10,346
code to generate all the blog posts that we

121
00:08:10,368 --> 00:08:13,654
can have in our blog

122
00:08:13,702 --> 00:08:17,050
site and we can use static site

123
00:08:17,120 --> 00:08:20,634
generation to generate all these

124
00:08:20,672 --> 00:08:23,674
static assets at build time. So we will

125
00:08:23,712 --> 00:08:27,280
have all the blog generated and it will be

126
00:08:27,810 --> 00:08:31,546
all static assets like HTML files, JavaScript files

127
00:08:31,578 --> 00:08:35,470
and CSS files and we can deploy that to the web server.

128
00:08:35,630 --> 00:08:39,310
So we will have our website using static

129
00:08:39,390 --> 00:08:43,038
assets, but we created it using JavaScript

130
00:08:43,134 --> 00:08:45,810
and a react framework like netjs.

131
00:08:46,410 --> 00:08:49,830
What is cool about nextjs is that it also

132
00:08:49,900 --> 00:08:53,554
offers other takes of rendering and generating HTML

133
00:08:53,602 --> 00:08:57,570
content like server side rendering or client side rerendering

134
00:08:57,650 --> 00:09:01,474
as we mentioned before. And it also offers API

135
00:09:01,522 --> 00:09:05,434
roots that we can use as serverless functions, for instance to

136
00:09:05,472 --> 00:09:08,874
execute an API, an operation and return information

137
00:09:08,992 --> 00:09:12,634
to our pages that we can use to render HTML

138
00:09:12,682 --> 00:09:15,994
content. And it also has a fast refresh

139
00:09:16,042 --> 00:09:19,934
on develop environment. So if we are working locally and we are

140
00:09:19,972 --> 00:09:23,230
working with the static sites generation mode,

141
00:09:23,310 --> 00:09:27,534
we don't have to wait to generate the static asset whenever

142
00:09:27,582 --> 00:09:31,282
we are making or applying a change to our

143
00:09:31,336 --> 00:09:34,942
code, we will have it automatically

144
00:09:35,006 --> 00:09:37,860
updated in our browser while we are working.

145
00:09:38,950 --> 00:09:42,294
Another cool thing that Nextjs offers is that

146
00:09:42,332 --> 00:09:46,054
we can work with the different types of rendering in

147
00:09:46,092 --> 00:09:50,154
a page level. So we can have some pages that are generated at

148
00:09:50,192 --> 00:09:53,622
build time using static site generation

149
00:09:53,766 --> 00:09:57,446
and other pages that can be generated using server

150
00:09:57,478 --> 00:10:01,342
side rendering or client side rerendering, all living in the same

151
00:10:01,396 --> 00:10:04,682
project in the same website. So for instance

152
00:10:04,746 --> 00:10:08,430
in the case of the blog, we can create the home

153
00:10:08,500 --> 00:10:11,822
page and probably the latest ten

154
00:10:11,876 --> 00:10:16,894
blog posts at build time as a static pages

155
00:10:17,022 --> 00:10:21,502
and we can have the older blog posts that probably will be visited

156
00:10:21,646 --> 00:10:25,630
by less users to be generated using

157
00:10:25,720 --> 00:10:28,550
server side rendering or client side rendering.

158
00:10:29,050 --> 00:10:32,934
If we want to offer the same experience in all the

159
00:10:32,972 --> 00:10:36,582
blog posts that we have in our website or our

160
00:10:36,636 --> 00:10:40,218
blog site, we can generate all of them using

161
00:10:40,304 --> 00:10:43,500
static site generator at build time.

162
00:10:44,110 --> 00:10:48,058
But here comes a problem. Because the process

163
00:10:48,144 --> 00:10:51,920
of generating the static assets takes some time

164
00:10:52,290 --> 00:10:55,486
and if our website is

165
00:10:55,668 --> 00:10:58,906
getting bigger and bigger with more and more pages,

166
00:10:59,018 --> 00:11:02,414
this build time will increase more and

167
00:11:02,452 --> 00:11:06,594
more. So in the case that we want to add a new blog post

168
00:11:06,712 --> 00:11:10,818
to our platform, or in the case that we want to edit one page

169
00:11:10,984 --> 00:11:14,974
to our website. If we want to generate

170
00:11:15,022 --> 00:11:19,030
all the static assets at build time, this process will take

171
00:11:19,100 --> 00:11:22,626
longer and longer. And besides

172
00:11:22,658 --> 00:11:25,538
that, there is a concept that is called atomic deployment,

173
00:11:25,634 --> 00:11:29,222
which means that if we are using static site generation,

174
00:11:29,366 --> 00:11:32,598
we have to generate all the static assets

175
00:11:32,694 --> 00:11:36,774
that we need at build time without errors.

176
00:11:36,902 --> 00:11:40,282
If there's any error in the middle of the process or

177
00:11:40,336 --> 00:11:43,950
if there isr a page that we are not generating statically,

178
00:11:44,290 --> 00:11:48,250
we will roll back all the process and we won't deploy

179
00:11:48,330 --> 00:11:51,950
this version of the website. This is done so

180
00:11:52,020 --> 00:11:55,582
we don't break the compatibility between the different pages

181
00:11:55,646 --> 00:11:59,582
and we don't have different pages or different versions of the pages

182
00:11:59,726 --> 00:12:03,554
living at the same time. So we

183
00:12:03,592 --> 00:12:07,386
have our blog or for example our ecommerce

184
00:12:07,438 --> 00:12:11,014
platform and we are increasing more and more products to the

185
00:12:11,052 --> 00:12:15,074
ecommerce platform and we are building the whole website whenever

186
00:12:15,122 --> 00:12:18,586
we add a new product or whenever we change something related to a

187
00:12:18,608 --> 00:12:22,314
product. And this build time is getting longer and longer and

188
00:12:22,352 --> 00:12:26,090
longer. And that's something that probably won't work for our

189
00:12:26,160 --> 00:12:29,306
scenario. So to solve this problem,

190
00:12:29,488 --> 00:12:33,054
NextJs now offers a new feature which

191
00:12:33,092 --> 00:12:35,870
is called incremental static regeneration.

192
00:12:38,050 --> 00:12:41,502
This feature enables developers to use static site

193
00:12:41,556 --> 00:12:44,706
generation on a per page basis without

194
00:12:44,808 --> 00:12:47,460
having to rebuild the entire site.

195
00:12:48,710 --> 00:12:52,494
So we will have the build process of the static

196
00:12:52,542 --> 00:12:56,114
site generator running for the first time

197
00:12:56,232 --> 00:12:59,570
and we will generate the version one of our pages,

198
00:12:59,650 --> 00:13:02,834
let's say after we generate all the pages

199
00:13:02,882 --> 00:13:06,610
that we need, we will deploy them to the web server

200
00:13:06,690 --> 00:13:10,106
and we will cache the first version of

201
00:13:10,128 --> 00:13:13,946
these pages. We will have a

202
00:13:13,968 --> 00:13:17,434
property called Revalidate that we can set in a

203
00:13:17,552 --> 00:13:21,118
steroids value so we can set for instance 60

204
00:13:21,204 --> 00:13:25,386
steroids. In that period of time, all the users

205
00:13:25,418 --> 00:13:29,054
that visit our website will see the version that

206
00:13:29,092 --> 00:13:32,110
is cached of the pages, the first version.

207
00:13:32,630 --> 00:13:36,082
But if a visitor comes to our website and

208
00:13:36,136 --> 00:13:40,062
wants to visit a certain page after this revalidate

209
00:13:40,126 --> 00:13:44,542
time, nextjs will display

210
00:13:44,606 --> 00:13:47,938
the version one of the page, the one that is cached

211
00:13:48,034 --> 00:13:52,886
but in the background will execute a

212
00:13:52,908 --> 00:13:57,000
build process to regenerate only this page

213
00:13:57,390 --> 00:14:01,722
in the background, generate a new version and after

214
00:14:01,776 --> 00:14:05,910
that deploy that to the web server and cache this version.

215
00:14:06,070 --> 00:14:09,594
So all the following users that will visit this

216
00:14:09,632 --> 00:14:12,320
page will see this version two of the page.

217
00:14:13,170 --> 00:14:16,958
So in case that we are editing the content of this page

218
00:14:17,044 --> 00:14:20,350
or we fix the typo or we are adding some more content

219
00:14:20,420 --> 00:14:24,714
to the page. This is a cool feature because

220
00:14:24,772 --> 00:14:28,594
we don't need to reveal the complete site. We will

221
00:14:28,632 --> 00:14:32,146
have this revalidate time to work for us and to

222
00:14:32,168 --> 00:14:35,620
generate the new version of the page when we need it.

223
00:14:36,950 --> 00:14:40,242
So this offers us or

224
00:14:40,296 --> 00:14:44,806
disallowed us to have faster bills because

225
00:14:44,988 --> 00:14:48,342
in case that we want to generate just a set

226
00:14:48,396 --> 00:14:52,310
of static pages, or we can work with a higher

227
00:14:52,380 --> 00:14:56,266
cache so we can cache all the static assets of

228
00:14:56,288 --> 00:14:59,910
our website and generate all of them at build time,

229
00:15:00,080 --> 00:15:03,566
and after that generate one page at a

230
00:15:03,588 --> 00:15:06,800
time when it's needed, just when it's needed.

231
00:15:07,170 --> 00:15:10,766
This is cool that we can link this property

232
00:15:10,868 --> 00:15:14,322
to a headless CMS. So in case that we have a team

233
00:15:14,456 --> 00:15:18,222
of content editors working on our blog post for instance,

234
00:15:18,286 --> 00:15:22,066
or the content of our website and they are making changes.

235
00:15:22,248 --> 00:15:26,046
We don't have to run the build process whenever they

236
00:15:26,088 --> 00:15:30,120
apply a new change or whenever they create new content.

237
00:15:30,490 --> 00:15:34,454
We will just run the build process per page and

238
00:15:34,492 --> 00:15:37,898
when needed, I mean when a visitor comes to our website

239
00:15:37,984 --> 00:15:40,060
after this revalidate time.

240
00:15:41,870 --> 00:15:45,786
One other thing that incremental static regeneration offers is

241
00:15:45,808 --> 00:15:49,494
that the pages that are generated are persisted

242
00:15:49,622 --> 00:15:53,322
between deployments. So if we deploy new version

243
00:15:53,386 --> 00:15:56,874
of our website, we will persist

244
00:15:56,922 --> 00:16:00,362
the pages that we generated before using incremental static

245
00:16:00,426 --> 00:16:04,500
regeneration. This is a problem that we have to

246
00:16:04,870 --> 00:16:08,322
evaluate because we are breaking the atomic deployment doing

247
00:16:08,376 --> 00:16:12,398
this. I mean we will have pages of different versions

248
00:16:12,494 --> 00:16:16,310
living at the same time, but probably this is something that can

249
00:16:16,380 --> 00:16:19,782
help and we can solve a certain scenario using

250
00:16:19,836 --> 00:16:21,750
incremental static regeneration.

251
00:16:23,050 --> 00:16:27,094
I will show you a quick demo so you can see how each one of

252
00:16:27,132 --> 00:16:29,580
these rendering methods works.

253
00:16:30,350 --> 00:16:34,298
So what I'm going to do is go to this project,

254
00:16:34,384 --> 00:16:38,730
this page that I created a title and three features.

255
00:16:40,110 --> 00:16:44,186
We can see that I'm using a

256
00:16:44,208 --> 00:16:48,270
nextjs application that is running locally in my computer and

257
00:16:48,340 --> 00:16:52,270
I'm having the same content which will

258
00:16:52,340 --> 00:16:56,750
return the same page using three different methods of rendering,

259
00:16:56,910 --> 00:17:00,498
server side rendering, static site generation and

260
00:17:00,584 --> 00:17:02,770
incremental static regeneration.

261
00:17:03,430 --> 00:17:07,214
So we can see that this page is using server side

262
00:17:07,272 --> 00:17:11,538
rendering which is the content. This content is generated

263
00:17:11,714 --> 00:17:15,494
for every visitor that we will have in our website. I mean

264
00:17:15,612 --> 00:17:19,002
every user that code to our website, we will

265
00:17:19,056 --> 00:17:22,938
execute the code to generate the HTML content

266
00:17:23,104 --> 00:17:24,060
for them.

267
00:17:25,950 --> 00:17:29,930
Besides that we will have the static site generation method

268
00:17:30,510 --> 00:17:33,902
where we have here the same content. But this was

269
00:17:33,956 --> 00:17:37,326
generated at build time. When I run a build process

270
00:17:37,428 --> 00:17:41,214
at the beginning to generate the static assets with this

271
00:17:41,252 --> 00:17:45,154
example, probably you can see the benefit, but this

272
00:17:45,192 --> 00:17:49,406
page will load faster because we are not rendering any content on the flight

273
00:17:49,598 --> 00:17:52,610
like we did with the server side rendering.

274
00:17:53,270 --> 00:17:57,074
And finally we will display incremental static

275
00:17:57,122 --> 00:18:00,742
regeneration where this pages was

276
00:18:00,796 --> 00:18:04,694
generated at build time also. But if we run

277
00:18:04,732 --> 00:18:08,274
it again we have the revalidate feature running. But again

278
00:18:08,332 --> 00:18:11,450
as I didn't change any content you can see any

279
00:18:11,520 --> 00:18:15,082
change here. What I'm going to do now

280
00:18:15,216 --> 00:18:18,140
is show you the code of my application.

281
00:18:18,750 --> 00:18:21,854
This is a neck JS project. I don't want to go

282
00:18:21,892 --> 00:18:25,886
super deep into the folder structure of nextjs and

283
00:18:25,908 --> 00:18:29,162
how Nextjs works, but this is the boilerplate

284
00:18:29,226 --> 00:18:32,834
that nextjs generates when we

285
00:18:32,872 --> 00:18:36,738
execute create next app using

286
00:18:36,904 --> 00:18:39,220
npm in our local computer.

287
00:18:40,230 --> 00:18:44,034
So what we have here isr a pages folder and

288
00:18:44,072 --> 00:18:47,414
each one of these is the URL that we

289
00:18:47,452 --> 00:18:50,674
were visiting in the example that I just displayed.

290
00:18:50,802 --> 00:18:54,806
And these ones are Javascript files you

291
00:18:54,828 --> 00:18:58,426
can see with dynamic roots. We are

292
00:18:58,448 --> 00:19:01,610
using the slugs for the dynamic roots.

293
00:19:02,110 --> 00:19:05,674
So what we are doing in this particular case is for

294
00:19:05,712 --> 00:19:10,054
server side rerendering we have the main function here

295
00:19:10,192 --> 00:19:14,282
which is the one that generates the markup for our pages.

296
00:19:14,426 --> 00:19:18,206
We have some react components here that are

297
00:19:18,388 --> 00:19:22,126
using some story, that code from

298
00:19:22,308 --> 00:19:25,838
our headless cms which in this case is a storyblok.

299
00:19:25,854 --> 00:19:29,922
And I will show you storyblok in a couple of minutes and

300
00:19:29,976 --> 00:19:33,906
we are bringing information from the headless cms to render it

301
00:19:34,008 --> 00:19:37,830
on the page. So we have this main

302
00:19:37,900 --> 00:19:41,938
function that will generate the markup and we have a get server

303
00:19:41,954 --> 00:19:45,154
sites props function that is executed whenever

304
00:19:45,202 --> 00:19:48,986
a user visits our website. So in

305
00:19:49,008 --> 00:19:53,286
this code what we are doing is setting a slug variable

306
00:19:53,398 --> 00:19:56,986
with the home value because we are going to bring all

307
00:19:57,008 --> 00:20:01,438
the information related to the home page and well

308
00:20:01,524 --> 00:20:05,342
setting some parameters that we will send to the headless cms and

309
00:20:05,396 --> 00:20:09,054
using the storyblock client to get all the information

310
00:20:09,172 --> 00:20:12,478
related to that story. One story

311
00:20:12,564 --> 00:20:15,810
in storyblock is like a page, let's say.

312
00:20:15,880 --> 00:20:19,394
So we are bringing all the data, all the content for that

313
00:20:19,432 --> 00:20:23,554
page. We are returning that as a story and

314
00:20:23,592 --> 00:20:27,094
this return is going to the main function and

315
00:20:27,132 --> 00:20:30,274
using the story that we are sending to generate

316
00:20:30,322 --> 00:20:32,680
the content related to that story.

317
00:20:33,290 --> 00:20:36,754
We will execute this function for every user

318
00:20:36,802 --> 00:20:40,570
that visits our website. On the other hand,

319
00:20:40,720 --> 00:20:44,422
the static site generation version

320
00:20:44,486 --> 00:20:48,042
of the page is using the same main

321
00:20:48,096 --> 00:20:51,006
function. You can see that it's exactly the same,

322
00:20:51,108 --> 00:20:54,602
but we have a gets static props method

323
00:20:54,746 --> 00:20:58,094
or function that ISR executed at build time. When we run

324
00:20:58,132 --> 00:21:01,806
the static site generation process you

325
00:21:01,828 --> 00:21:05,138
can see that we are doing something very similar

326
00:21:05,224 --> 00:21:08,450
here. We are bringing all the data related to

327
00:21:08,520 --> 00:21:11,906
a certain story using the storyblok client and

328
00:21:11,928 --> 00:21:15,334
we return that to the main function. But the thing

329
00:21:15,372 --> 00:21:19,394
is, how do we identify which pages

330
00:21:19,442 --> 00:21:22,902
we want to render at build time. So to do that

331
00:21:22,956 --> 00:21:26,310
next, Js offers another function which is called

332
00:21:26,380 --> 00:21:29,930
get static paths. So what we are doing here

333
00:21:30,000 --> 00:21:33,834
is defining the logic that will generate the list of

334
00:21:33,872 --> 00:21:37,622
pages of pages that we want to generate

335
00:21:37,686 --> 00:21:41,440
at build time and generate the static assets related to them.

336
00:21:42,530 --> 00:21:46,238
As my project has only one page which is the home page,

337
00:21:46,324 --> 00:21:50,302
we are sending like a list of paths but with only

338
00:21:50,356 --> 00:21:54,114
one value which is home. So with this

339
00:21:54,152 --> 00:21:58,034
list we execute the get static props function

340
00:21:58,152 --> 00:22:01,346
for every value of this list and we will

341
00:22:01,368 --> 00:22:05,146
generate the markup. Finally, the incremental

342
00:22:05,198 --> 00:22:08,598
static regeneration page ISR,

343
00:22:08,684 --> 00:22:12,326
the main function is exactly the same and you will see

344
00:22:12,348 --> 00:22:16,262
that it's very similar to the one of the static site

345
00:22:16,316 --> 00:22:19,894
generation. Here we are doing exactly the same and

346
00:22:19,932 --> 00:22:23,194
here is very similar. But we are setting this

347
00:22:23,232 --> 00:22:27,210
property fallback to blocking and we are adding the revalidate

348
00:22:27,630 --> 00:22:30,890
value that we saw before in the slide

349
00:22:31,050 --> 00:22:34,026
and we are setting that to 10 seconds.

350
00:22:34,218 --> 00:22:37,630
So when a user visits our website after

351
00:22:37,700 --> 00:22:41,246
10 seconds we'll run the build process in the

352
00:22:41,268 --> 00:22:44,900
background to generate a new version of the page.

353
00:22:45,910 --> 00:22:49,474
So let's see in this example what happens if

354
00:22:49,512 --> 00:22:52,802
I edit the content of the page.

355
00:22:52,936 --> 00:22:56,606
So let's go to storyblok which is the headless CMS.

356
00:22:56,798 --> 00:23:00,594
And you can see that. Well, Storyblok offers a visual editor,

357
00:23:00,642 --> 00:23:04,822
a real time visual editor that we can use to using

358
00:23:04,956 --> 00:23:08,662
the code of our application. You can see that it's pointing to my local

359
00:23:08,716 --> 00:23:12,058
host. We can on the flight do some changes

360
00:23:12,144 --> 00:23:15,466
and see how it's going to look like. So I can change

361
00:23:15,568 --> 00:23:19,594
this feature test and we can see that how

362
00:23:19,632 --> 00:23:23,070
it's going to look like without applying any change

363
00:23:23,140 --> 00:23:26,650
to the real content that we are consuming

364
00:23:26,730 --> 00:23:29,498
in our production instance, for instance.

365
00:23:29,674 --> 00:23:33,454
But if I click on Save, we are applying

366
00:23:33,502 --> 00:23:36,994
these changes to the draft version of

367
00:23:37,032 --> 00:23:40,914
our steroids or the content of our page of our

368
00:23:40,952 --> 00:23:44,670
website. So we have all the features

369
00:23:44,750 --> 00:23:48,342
that say now feature test. So I will

370
00:23:48,396 --> 00:23:51,718
go back to my example and I will first

371
00:23:51,804 --> 00:23:54,760
render the server side rendering page.

372
00:23:55,850 --> 00:23:59,594
What is happening? We are displaying the new content because we are

373
00:23:59,632 --> 00:24:03,750
rerendering this content for each time a user visits

374
00:24:03,830 --> 00:24:07,466
our web page. But on the other hand, if I

375
00:24:07,488 --> 00:24:10,926
use static site generation, we will see that we

376
00:24:10,948 --> 00:24:14,542
are seeing the old content because

377
00:24:14,676 --> 00:24:17,914
this page was generated at build time and I didn't

378
00:24:17,962 --> 00:24:21,680
run the build process again. So we have the version that was

379
00:24:22,130 --> 00:24:25,746
generated before as a static asset. So we

380
00:24:25,768 --> 00:24:29,700
don't notice that a change was applied to the content of the pages

381
00:24:30,950 --> 00:24:35,878
using incremental static regeneration we

382
00:24:35,964 --> 00:24:39,254
will see that we are displaying the old content

383
00:24:39,452 --> 00:24:41,720
that was generated at build time,

384
00:24:43,450 --> 00:24:47,510
like if it weren't edited or updated.

385
00:24:47,870 --> 00:24:51,370
But on the background we are executing a build

386
00:24:51,440 --> 00:24:55,306
process just for this pages. So I

387
00:24:55,328 --> 00:24:58,874
mean this visitor won't notice the changes or will

388
00:24:58,912 --> 00:25:03,038
see the old version of the page. But if I refresh the page

389
00:25:03,124 --> 00:25:06,622
here I will see the new content and I am seeing

390
00:25:06,676 --> 00:25:09,982
the version two of the page, let's say. And this will

391
00:25:10,036 --> 00:25:13,602
happen for all the following users that visit this

392
00:25:13,656 --> 00:25:17,566
web page, always considering

393
00:25:17,598 --> 00:25:21,266
the revalidate property and the value of this property

394
00:25:21,368 --> 00:25:24,340
that we set in the code of our application.

395
00:25:26,410 --> 00:25:30,230
So with this demo, I hope it's now clear

396
00:25:30,300 --> 00:25:33,398
for you how incremental static regeneration works.

397
00:25:33,564 --> 00:25:38,002
If you want to learn more about it, you can go to the Nextjs official

398
00:25:38,066 --> 00:25:41,846
website. They have an e commerce platform demo that

399
00:25:41,868 --> 00:25:45,814
you can take a look using incremental static regeneration. Or if

400
00:25:45,852 --> 00:25:49,302
you want to learn more about NextJs, they have a really

401
00:25:49,356 --> 00:25:53,262
cool learning platform that you can follow and learn other

402
00:25:53,316 --> 00:25:57,390
features from this very cool framework.

403
00:25:58,450 --> 00:26:01,710
So thank you very much. I hope you enjoyed the talk

404
00:26:01,860 --> 00:26:03,278
and see you there.

