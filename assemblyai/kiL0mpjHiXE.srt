1
00:00:23,050 --> 00:00:26,398
Hi everyone, my name is Alexander Gozenka, and today

2
00:00:26,484 --> 00:00:30,466
I'm going to talk about front end architecture,

3
00:00:30,578 --> 00:00:34,630
in particular about splitting the monolith.

4
00:00:35,210 --> 00:00:38,440
But before we start, just a few words about myself.

5
00:00:39,770 --> 00:00:43,238
I have more than seven years of commercial

6
00:00:43,334 --> 00:00:45,770
experience in front end development.

7
00:00:46,590 --> 00:00:50,220
Now I lead the development of a large fintech application.

8
00:00:50,670 --> 00:00:54,830
And recently I started talking about architecture,

9
00:00:55,330 --> 00:00:58,926
front end architecture. And of course this is a

10
00:00:58,948 --> 00:01:02,414
really complex these. So it needs to reveal step by

11
00:01:02,452 --> 00:01:06,466
step. So today I'm going to talk about

12
00:01:06,568 --> 00:01:09,710
problems of monoliths applications.

13
00:01:09,870 --> 00:01:13,714
Or maybe monolithic application doesn't have problems. So we'll talk

14
00:01:13,752 --> 00:01:18,426
about it today. Then I'll

15
00:01:18,478 --> 00:01:22,086
show you six ways how you can split your

16
00:01:22,108 --> 00:01:25,414
monolith to reduce complexity of your

17
00:01:25,452 --> 00:01:27,990
application, to make it more modular.

18
00:01:28,490 --> 00:01:32,090
And after that we will summarize and find out

19
00:01:32,160 --> 00:01:34,700
when which method is best to use.

20
00:01:35,150 --> 00:01:36,860
So let's start.

21
00:01:38,110 --> 00:01:41,226
First of all, we need to understand the

22
00:01:41,248 --> 00:01:44,090
difference between two approaches,

23
00:01:44,170 --> 00:01:47,774
monolithic and microservices. When you

24
00:01:47,812 --> 00:01:51,694
use monoliths architecture, you are

25
00:01:51,732 --> 00:01:55,530
using a single module that works autonomously

26
00:01:55,610 --> 00:01:59,426
independent of other application. For example, you have to

27
00:01:59,448 --> 00:02:03,042
do list. And in

28
00:02:03,176 --> 00:02:06,898
web page you will show only this to do list,

29
00:02:06,984 --> 00:02:11,462
this to do list stored in its

30
00:02:11,516 --> 00:02:15,382
own repo and deployed by

31
00:02:15,436 --> 00:02:19,190
its own. So this is a single module.

32
00:02:19,690 --> 00:02:22,802
Microservices approach is when you have

33
00:02:22,876 --> 00:02:27,370
several independent from each other, small low

34
00:02:27,440 --> 00:02:30,090
couplet and easily modified module.

35
00:02:31,070 --> 00:02:33,790
Just imagine the same to do list.

36
00:02:33,860 --> 00:02:37,982
But at these web page you also have

37
00:02:38,116 --> 00:02:41,786
footer and header, and footer

38
00:02:41,818 --> 00:02:45,566
and header is independent application, so we can

39
00:02:45,668 --> 00:02:48,914
deploy it independently of each

40
00:02:48,952 --> 00:02:52,770
other. So this is microservices approach and

41
00:02:52,840 --> 00:02:57,070
one of the main questions of this speech

42
00:02:57,230 --> 00:03:01,286
monolith is it bad or no? To answer

43
00:03:01,468 --> 00:03:04,934
on this question, let's take

44
00:03:04,972 --> 00:03:08,882
a look at this chart. On the x axis

45
00:03:09,026 --> 00:03:13,178
we have the lines of code which represents the size

46
00:03:13,264 --> 00:03:16,746
and complexity of our project. On the

47
00:03:16,848 --> 00:03:20,058
y axis we see these cost to line.

48
00:03:20,144 --> 00:03:24,350
This is development and maintenance. It means

49
00:03:24,500 --> 00:03:27,774
not just initial cost of writing line of code,

50
00:03:27,892 --> 00:03:31,150
but also maintaining it, updating it,

51
00:03:31,300 --> 00:03:34,574
and ensuring it remains functional and efficient in

52
00:03:34,612 --> 00:03:37,890
our growing application. Now,

53
00:03:38,040 --> 00:03:41,700
there are two distinct curves here.

54
00:03:42,390 --> 00:03:45,570
The blue curve is microservices.

55
00:03:47,110 --> 00:03:50,498
This starts relatively flat, but begins

56
00:03:50,594 --> 00:03:54,550
to rise gradually as lines of code increase.

57
00:03:55,210 --> 00:03:59,174
In the early stages of these project, its cost might be

58
00:03:59,212 --> 00:04:02,954
higher due to the setup required for

59
00:04:02,992 --> 00:04:07,114
individual services. However, as the projects grow,

60
00:04:07,232 --> 00:04:09,930
the cost increases only gradually.

61
00:04:10,510 --> 00:04:14,042
This is because with microservices we can isolate

62
00:04:14,106 --> 00:04:18,126
problems, scale services independently and

63
00:04:18,228 --> 00:04:22,346
deploy them separately so complexity

64
00:04:22,538 --> 00:04:25,950
doesn't increase dramatically.

65
00:04:26,390 --> 00:04:30,050
The yellow curve is monolithic approach.

66
00:04:30,550 --> 00:04:33,022
Initially, it's pretty cost effective.

67
00:04:33,166 --> 00:04:36,740
Everything is in one place

68
00:04:37,830 --> 00:04:39,960
and it's easy to manage.

69
00:04:40,490 --> 00:04:44,342
But as the lines of code increase, you can

70
00:04:44,476 --> 00:04:47,320
see a sharp uptick in the cost.

71
00:04:47,690 --> 00:04:51,634
This emblematic of these challenges in scaling

72
00:04:51,682 --> 00:04:56,090
and maintaining these monolithic application. As it grows,

73
00:04:57,710 --> 00:05:01,258
every change impacts these entire

74
00:05:01,344 --> 00:05:05,630
system, making it increasingly challenging

75
00:05:07,010 --> 00:05:10,990
to manage and update. In summary,

76
00:05:11,330 --> 00:05:15,134
while monoliths architecture might seem cost

77
00:05:15,172 --> 00:05:19,154
effective for small and medium projects, as application

78
00:05:19,272 --> 00:05:23,582
grows, the benefits of microservices architecture

79
00:05:23,646 --> 00:05:27,026
become apparent in terms of

80
00:05:27,128 --> 00:05:29,960
both development and maintenance cost.

81
00:05:30,410 --> 00:05:34,738
So what we can see from this chart

82
00:05:34,834 --> 00:05:38,502
in summary, first point, monolith is not

83
00:05:38,556 --> 00:05:42,620
bad. It's a really good decision when you have small or medium application.

84
00:05:43,310 --> 00:05:46,954
And second, monolith is not bad until

85
00:05:47,072 --> 00:05:51,340
a certain point. And there is another

86
00:05:51,790 --> 00:05:55,582
main question, how to recognize this point

87
00:05:55,716 --> 00:05:59,342
after which microservices will be

88
00:05:59,396 --> 00:06:00,590
cost effective.

89
00:06:03,650 --> 00:06:08,142
To say the truth, it's a really subjective

90
00:06:08,206 --> 00:06:11,842
feeling, but I have four main

91
00:06:11,896 --> 00:06:15,058
triggers to recognize it.

92
00:06:15,224 --> 00:06:18,500
First one, it's long

93
00:06:18,890 --> 00:06:22,360
builds and CI pipelines. For example,

94
00:06:22,810 --> 00:06:26,790
your CI pipelines needs several hours,

95
00:06:26,860 --> 00:06:29,880
for example 6 hours, it's too much.

96
00:06:31,230 --> 00:06:35,302
Second one, it's rapidly increasing code base complexity.

97
00:06:35,446 --> 00:06:38,778
And because of this breaking project

98
00:06:38,864 --> 00:06:42,826
entry threshold, for example, when you

99
00:06:42,928 --> 00:06:46,766
can efficiently onboard on your project

100
00:06:46,868 --> 00:06:49,230
only senior developers,

101
00:06:50,290 --> 00:06:54,446
it's like a call. And last one

102
00:06:54,548 --> 00:06:57,858
when more than five people working on the project.

103
00:06:57,944 --> 00:07:01,986
This is the most subjective point because I know a project when

104
00:07:02,088 --> 00:07:05,700
for example 15 people working with it and

105
00:07:06,470 --> 00:07:10,150
it's a really good in monolithic approach.

106
00:07:11,850 --> 00:07:15,190
But over time this value may increase.

107
00:07:16,090 --> 00:07:19,958
And just imagine you found

108
00:07:20,044 --> 00:07:23,660
all this trigger in your application and you decide to

109
00:07:24,510 --> 00:07:28,262
reduce your code complexity to split

110
00:07:28,326 --> 00:07:32,140
your monolith. How you can do it?

111
00:07:32,670 --> 00:07:36,110
Let's take a look at first way

112
00:07:36,260 --> 00:07:38,510
and it is iframe.

113
00:07:39,330 --> 00:07:43,230
It is the oldest and the most time tested method.

114
00:07:43,570 --> 00:07:47,890
It was released in 1997 and

115
00:07:47,960 --> 00:07:52,430
it's kind of first implementation of front end microservices

116
00:07:52,510 --> 00:07:56,126
from the last century and now doesn't

117
00:07:56,158 --> 00:08:00,002
lose revelance. Especially useful on simple sites.

118
00:08:00,066 --> 00:08:03,638
For example landing page when you need to

119
00:08:03,724 --> 00:08:06,870
embed some modules, for example maps.

120
00:08:08,330 --> 00:08:11,766
Next way is using Nginx or another proxy

121
00:08:11,798 --> 00:08:16,310
server. This is the most controversial and nonobvious

122
00:08:16,390 --> 00:08:20,714
way it is implemented. Simply some

123
00:08:20,752 --> 00:08:24,174
pages of your application will be laid on a

124
00:08:24,212 --> 00:08:27,360
separate bundle with the help of

125
00:08:27,970 --> 00:08:32,400
proxy server and load it as a separate application.

126
00:08:33,250 --> 00:08:36,080
Of course there are many disadvantages here.

127
00:08:36,470 --> 00:08:39,982
There are drawdowns in performance, we load

128
00:08:40,046 --> 00:08:44,062
entire bundle again and again. These main advantages

129
00:08:44,206 --> 00:08:49,254
of single page application, we just lose it and

130
00:08:49,452 --> 00:08:53,974
code duplication and something more. But there

131
00:08:54,012 --> 00:08:58,198
are cases when this approach makes sense to use.

132
00:08:58,364 --> 00:09:02,250
For example when you move from one

133
00:09:02,320 --> 00:09:06,362
framework to another, the old pages will be within old

134
00:09:06,416 --> 00:09:10,426
application and one and

135
00:09:10,608 --> 00:09:14,560
new pages with new application within

136
00:09:15,010 --> 00:09:19,034
another. Over time the old application will lose pages

137
00:09:19,082 --> 00:09:22,494
and the new one, on the contrary, will increase until the

138
00:09:22,532 --> 00:09:26,058
only one remains. Third way is using

139
00:09:26,164 --> 00:09:29,570
web components. This is a very

140
00:09:29,640 --> 00:09:33,810
interesting tool that allow us native

141
00:09:34,390 --> 00:09:37,170
use of the component approach.

142
00:09:38,330 --> 00:09:41,974
On this slide you can see an example of

143
00:09:42,012 --> 00:09:45,734
using web components and it's very similar

144
00:09:45,932 --> 00:09:49,800
to class components in react, doesn't it?

145
00:09:51,150 --> 00:09:54,682
Of course there have many advantages like full

146
00:09:54,736 --> 00:09:58,010
encapsulation of styles and logic,

147
00:09:58,430 --> 00:10:02,700
native browser support and cross platform.

148
00:10:04,610 --> 00:10:07,902
You can create only one web component and using

149
00:10:08,036 --> 00:10:12,270
it inside react angular view

150
00:10:12,340 --> 00:10:16,658
applications. But why

151
00:10:16,824 --> 00:10:20,754
didn't it get popular? Because we

152
00:10:20,792 --> 00:10:24,110
use react angular libraries

153
00:10:24,270 --> 00:10:27,662
and frameworks not only because of the component

154
00:10:27,726 --> 00:10:32,562
approach, but also because of their APIs like decorators,

155
00:10:32,626 --> 00:10:35,590
hooks, context, et cetera.

156
00:10:36,170 --> 00:10:40,406
Moreover, popular frameworks have a large infrastructure and

157
00:10:40,508 --> 00:10:42,330
a wide market penetration.

158
00:10:44,190 --> 00:10:48,102
Next way to split your monolith is using NPM,

159
00:10:48,166 --> 00:10:51,674
not package manager. This method is

160
00:10:51,712 --> 00:10:55,626
the most common and in most cases

161
00:10:55,738 --> 00:10:59,802
it is the best for you. This approach is ideal

162
00:10:59,866 --> 00:11:03,198
as a first step before using

163
00:11:03,284 --> 00:11:06,706
micro frontends. That is,

164
00:11:06,808 --> 00:11:11,170
you can first split application into several NPM packages

165
00:11:11,510 --> 00:11:15,010
and these turn these packages into

166
00:11:15,080 --> 00:11:18,210
independent frontends or micro front ends.

167
00:11:20,570 --> 00:11:23,734
With advantages I can say

168
00:11:23,852 --> 00:11:26,930
of NPM, it's disadvantages,

169
00:11:27,010 --> 00:11:30,790
sorry, difficult to debugging.

170
00:11:31,950 --> 00:11:35,878
Just imagine you want to lock and console

171
00:11:35,974 --> 00:11:38,410
some value from your NPM package.

172
00:11:39,150 --> 00:11:43,260
To do it you need to add your code,

173
00:11:43,730 --> 00:11:47,374
create a build of this package, substitute this build in the

174
00:11:47,412 --> 00:11:51,790
host package, run host package, host application and

175
00:11:51,860 --> 00:11:55,646
only after that you can see your

176
00:11:55,748 --> 00:11:59,410
output in console. Also it's

177
00:11:59,830 --> 00:12:02,740
complication of the release cycle. For example,

178
00:12:03,990 --> 00:12:07,694
you just need firstly to release

179
00:12:07,742 --> 00:12:10,758
your NPM package. After that

180
00:12:10,844 --> 00:12:14,326
you upgrade these version in your host package in

181
00:12:14,348 --> 00:12:19,250
your host application and only after that you can deploy

182
00:12:19,330 --> 00:12:23,066
your host application. But there are

183
00:12:23,088 --> 00:12:26,566
many pros. There are many advantages of using node

184
00:12:26,598 --> 00:12:29,818
packet manager NPM like

185
00:12:29,984 --> 00:12:34,362
ease of implementation, versioning and pipeline

186
00:12:34,426 --> 00:12:37,822
acceleration. You just don't need to

187
00:12:37,956 --> 00:12:41,838
run all tests in your every

188
00:12:41,924 --> 00:12:45,782
NPM package when you deploy your host

189
00:12:45,866 --> 00:12:50,030
application. The last two methods

190
00:12:50,110 --> 00:12:54,050
are realization of micro front ends.

191
00:12:54,550 --> 00:12:58,002
The conception of micro frontends is shown on

192
00:12:58,056 --> 00:12:59,080
these screen.

193
00:13:00,890 --> 00:13:04,678
It's when you can use different

194
00:13:04,764 --> 00:13:07,702
application inside a host one.

195
00:13:07,836 --> 00:13:11,670
And this different application may be written

196
00:13:13,050 --> 00:13:16,082
on different frameworks using different libraries

197
00:13:16,146 --> 00:13:20,950
and deployed independently. So single

198
00:13:21,020 --> 00:13:24,926
spa or single spa, it's a kind

199
00:13:24,948 --> 00:13:29,870
of realization of micro front ends and this

200
00:13:29,940 --> 00:13:34,590
approach has several peculiarities.

201
00:13:35,090 --> 00:13:39,410
First, one single spy has a container

202
00:13:40,230 --> 00:13:43,586
within which we register application and

203
00:13:43,688 --> 00:13:47,714
can use them as a separate independent application within a

204
00:13:47,752 --> 00:13:51,590
single page. It also allows

205
00:13:51,930 --> 00:13:57,586
us to use application lifecycle method like loaded

206
00:13:57,698 --> 00:13:59,510
mount unmount.

207
00:14:01,150 --> 00:14:04,634
And it also allows us to

208
00:14:04,672 --> 00:14:08,998
set a config that will control which rotors,

209
00:14:09,174 --> 00:14:11,820
which applications should be loaded on.

210
00:14:12,350 --> 00:14:17,534
And the last one is

211
00:14:17,652 --> 00:14:20,510
webpack five module Federation.

212
00:14:23,330 --> 00:14:26,674
You can use this method only

213
00:14:26,792 --> 00:14:30,414
within webpack five. Even you are using webpack

214
00:14:30,462 --> 00:14:33,806
four on your project you couldn't use modal

215
00:14:33,838 --> 00:14:37,234
Federation plugin, so these is you should

216
00:14:37,272 --> 00:14:40,178
to know before choosing this way.

217
00:14:40,344 --> 00:14:43,766
Also using modal federation you can

218
00:14:43,788 --> 00:14:47,830
cache libraries so you don't need to load.

219
00:14:48,330 --> 00:14:51,866
For example react ten times. If you

220
00:14:51,968 --> 00:14:55,962
use ten react application, each application

221
00:14:56,096 --> 00:14:59,882
has its own entry point in which we

222
00:14:59,936 --> 00:15:03,778
say what it exports. It's like a realization

223
00:15:03,894 --> 00:15:07,840
of public API which is a really good

224
00:15:10,210 --> 00:15:13,822
design pattern. Unlike a single

225
00:15:13,876 --> 00:15:17,634
spot. It allows us to

226
00:15:17,672 --> 00:15:21,586
use not only the entire application but also

227
00:15:21,688 --> 00:15:23,460
its modules. For example,

228
00:15:24,790 --> 00:15:28,430
you can use only selectors from

229
00:15:28,600 --> 00:15:32,550
another applications, not whole application, only selectors.

230
00:15:33,210 --> 00:15:37,110
And let's summarize all these six ways

231
00:15:37,180 --> 00:15:41,106
to split your monolith and

232
00:15:41,228 --> 00:15:44,380
where you can choose each other.

233
00:15:46,270 --> 00:15:49,766
Choose them let's start with iframe.

234
00:15:49,958 --> 00:15:53,462
IFrame is really good when you need to

235
00:15:53,536 --> 00:15:57,950
embed a model into a site without using heavy frameworks.

236
00:15:58,450 --> 00:16:01,710
For example to embed maps,

237
00:16:02,850 --> 00:16:06,942
map model module on your landing

238
00:16:07,086 --> 00:16:10,802
or composition of several simple application.

239
00:16:10,936 --> 00:16:14,734
For example, you have independent sidebar

240
00:16:14,782 --> 00:16:18,366
with several links and you

241
00:16:18,408 --> 00:16:22,246
can use just iframe tag to

242
00:16:22,348 --> 00:16:26,086
embed it on your application. Even if your application

243
00:16:26,188 --> 00:16:27,590
is really complex.

244
00:16:29,370 --> 00:16:32,882
Proxy server is good in transition period

245
00:16:32,946 --> 00:16:38,874
from one framework to another if

246
00:16:39,072 --> 00:16:42,810
you don't want to bother with micro front end

247
00:16:42,960 --> 00:16:46,682
and you're ready to sacrifice performance

248
00:16:46,746 --> 00:16:50,730
in a short of time. Web components

249
00:16:50,890 --> 00:16:54,400
are good for you if you

250
00:16:54,770 --> 00:16:58,782
don't have binding to the infrastructure of any framework

251
00:16:58,926 --> 00:17:02,802
or you

252
00:17:02,856 --> 00:17:06,174
want to make a cross platform components,

253
00:17:06,222 --> 00:17:09,320
for example UI kit for entire company.

254
00:17:10,570 --> 00:17:13,970
NPM is a great decision

255
00:17:14,130 --> 00:17:18,114
if you want to reduce your code base and you don't

256
00:17:18,162 --> 00:17:20,870
want to bother with micro frontends.

257
00:17:21,370 --> 00:17:25,418
And what about micro frontends single spa? It's a

258
00:17:25,424 --> 00:17:28,854
good decision when you need to combine

259
00:17:28,902 --> 00:17:32,666
several application on different frameworks or

260
00:17:32,848 --> 00:17:36,490
you want to get involved in the application lifecycle

261
00:17:36,570 --> 00:17:40,362
like mounted, unmounted, loaded and et cetera.

262
00:17:40,506 --> 00:17:44,122
Or you want to link application to a specific Ural.

263
00:17:44,186 --> 00:17:47,454
For example on itone ural we load this application,

264
00:17:47,572 --> 00:17:51,234
on another ural URL we

265
00:17:51,432 --> 00:17:55,790
load another application and the last method

266
00:17:55,870 --> 00:17:59,800
is using code federation in webpack five.

267
00:18:00,730 --> 00:18:04,294
This is great decision when you want to

268
00:18:04,332 --> 00:18:08,114
optimize the bundle size. For example, do not load

269
00:18:08,162 --> 00:18:10,280
or react for every application.

270
00:18:11,290 --> 00:18:15,878
If your application uses react and you use

271
00:18:15,964 --> 00:18:19,286
webpack five. So that's all for now.

272
00:18:19,468 --> 00:18:22,630
I hope this information will help you write

273
00:18:22,700 --> 00:18:25,360
efficient and maintainable code.

274
00:18:26,290 --> 00:18:28,302
And have a good day.

