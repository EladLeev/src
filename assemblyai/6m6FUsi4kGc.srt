1
00:00:17,770 --> 00:00:22,000
Speed. Safety. Development experience,

2
00:00:23,010 --> 00:00:26,534
fearless concurrency. These are

3
00:00:26,572 --> 00:00:29,666
all things that you associate with programs written in rust.

4
00:00:29,858 --> 00:00:33,202
How about somewhere buzzwords? Words like elegant?

5
00:00:33,346 --> 00:00:36,966
Oh, that's a good one. I'm Zeeso and I'm going

6
00:00:36,988 --> 00:00:40,262
to share the gory details of how my blog works and why people often

7
00:00:40,316 --> 00:00:43,830
mistake it for a static website. Buckle up and kick back.

8
00:00:43,900 --> 00:00:48,194
We're going to learn about the Internet today. I'm Zeeso.

9
00:00:48,322 --> 00:00:52,430
You've probably seen my blog on that orange website or that other orange website.

10
00:00:52,580 --> 00:00:56,174
I also study philosophy and have been writing a novel. I work

11
00:00:56,212 --> 00:01:00,046
at Tailscale as the archmage of infrastructure and I do developer relations.

12
00:01:00,228 --> 00:01:04,290
My blog is somehow one of the best resources for learning Nix and Nixos.

13
00:01:04,870 --> 00:01:08,482
This talk will contain opinions about website design and the like.

14
00:01:08,616 --> 00:01:12,370
These opinions are my own and are not the opinions of my employer.

15
00:01:13,110 --> 00:01:16,466
Websites are social constructs. There are only servers that

16
00:01:16,488 --> 00:01:20,114
speak this weird HTTP protocol and then sometimes spit out a markup

17
00:01:20,162 --> 00:01:23,686
language called HTML. If you're lucky. This HTML is

18
00:01:23,708 --> 00:01:27,010
then understood by very principal humans or web browsers,

19
00:01:27,090 --> 00:01:30,394
and then it all gets transformed into roughly what the writer or designer wants

20
00:01:30,432 --> 00:01:34,214
it to look like. I write all my posts for the blog

21
00:01:34,262 --> 00:01:38,086
in Markdown in emacs. Sometimes I do brain

22
00:01:38,118 --> 00:01:42,426
dumping or initial drafting in Apple notes on my MacBook or iPad,

23
00:01:42,618 --> 00:01:46,110
but it all gets into emacs eventually for publication.

24
00:01:47,570 --> 00:01:51,994
This markdown has some front matter in YaML, this has metadata

25
00:01:52,042 --> 00:01:56,074
like tags, the series, it is in stream recordings

26
00:01:56,122 --> 00:02:00,130
related to posts and when it is scheduled to be posted publicly.

27
00:02:00,470 --> 00:02:03,778
This is all used by the templates to make sure that I can't forget to

28
00:02:03,784 --> 00:02:07,438
put it in articles, but the main focus is

29
00:02:07,464 --> 00:02:10,838
on the contents of the post, the words I type out.

30
00:02:11,004 --> 00:02:14,386
In the process, I've organically grown my own custom markdown

31
00:02:14,418 --> 00:02:17,570
dialect on top of a markdown parser named Comrac.

32
00:02:17,730 --> 00:02:21,306
Comrac is made by a friend and it is the most important part of this

33
00:02:21,328 --> 00:02:24,666
website. However, over the

34
00:02:24,688 --> 00:02:28,954
years I've found that vanilla Markdown just isn't good enough for my needs.

35
00:02:29,152 --> 00:02:32,666
I've grown features out on my blog that require more fancy

36
00:02:32,698 --> 00:02:36,266
things like the conversation snippets and the newly added aigenerated

37
00:02:36,298 --> 00:02:40,154
hero images. At first, I just implemented

38
00:02:40,202 --> 00:02:44,382
a hacky markdown extension. It applied the conversation

39
00:02:44,446 --> 00:02:47,682
snippet logic to anything that matches a markdown link

40
00:02:47,736 --> 00:02:49,650
with a weird URL scheme.

41
00:02:50,310 --> 00:02:53,666
Unfortunately, that ended up not scaling well

42
00:02:53,768 --> 00:02:56,966
as the conversation snippets got more complicated, like when

43
00:02:56,988 --> 00:03:00,566
I need to add links. So I brought in

44
00:03:00,588 --> 00:03:04,214
a library called law underscore HTML. I use

45
00:03:04,252 --> 00:03:07,494
this to transform my custom HTML elements into

46
00:03:07,532 --> 00:03:11,046
a bunch of other HTML using a bank of templates.

47
00:03:11,238 --> 00:03:15,114
This allows me to write markdown with occasional HTML for the things

48
00:03:15,152 --> 00:03:18,650
markdown can't express. Then I can rely on my blog engine

49
00:03:18,720 --> 00:03:22,080
to translate those short codes to what people see on the site.

50
00:03:23,170 --> 00:03:26,814
In my blog, I use a templating engine called ruct that

51
00:03:26,852 --> 00:03:30,126
takes a weird meta syntax on top of HTML and then

52
00:03:30,148 --> 00:03:33,626
spits out rust code. This means that when you load

53
00:03:33,658 --> 00:03:37,506
a page like my homepage, you're hitting a function that renders that homepage to a

54
00:03:37,528 --> 00:03:40,654
string buffer. That string buffer is what my website throws

55
00:03:40,702 --> 00:03:44,020
back into the void, and hopefully it all comes back to you on your end.

56
00:03:45,050 --> 00:03:48,840
As a side effect of doing all this, it happens fast.

57
00:03:49,370 --> 00:03:53,186
Really fast. So fast that it's faster

58
00:03:53,218 --> 00:03:56,646
than a static website. Turns out serving things out

59
00:03:56,668 --> 00:04:00,234
of ram is very fast. And when

60
00:04:00,272 --> 00:04:04,074
I say fast, I mean that I have tried so hard

61
00:04:04,192 --> 00:04:08,186
to find some static file server that could beat what my site does.

62
00:04:08,368 --> 00:04:11,966
I tried really hard. I compared my

63
00:04:11,988 --> 00:04:14,522
site to nginx, Openrest,

64
00:04:14,666 --> 00:04:18,154
Tengen, Apache, Go standard library,

65
00:04:18,282 --> 00:04:22,014
warp in rust, axum in rust, and finally a go

66
00:04:22,052 --> 00:04:25,806
standard library HTTP server that had the site data compiled

67
00:04:25,838 --> 00:04:29,506
into ram. None of them were faster saved the

68
00:04:29,528 --> 00:04:33,234
precompiled Go binary, which was like 200

69
00:04:33,272 --> 00:04:37,126
megabytes and not viable for my needs. It was

70
00:04:37,148 --> 00:04:40,882
a hilarious benchmarking session. I have accidentally

71
00:04:40,946 --> 00:04:44,374
created something that is so efficient that it is hard to

72
00:04:44,412 --> 00:04:48,322
express how fast it is. Things is efficient

73
00:04:48,386 --> 00:04:52,330
and fast, but the syntax of ruct is awful.

74
00:04:52,670 --> 00:04:56,026
I have to specify the types of my code in the template itself.

75
00:04:56,208 --> 00:05:00,206
I have to be sure that the automatically generated template code is importing any

76
00:05:00,228 --> 00:05:02,990
of the non default traits I need. It works,

77
00:05:03,060 --> 00:05:06,030
but it kind of sucks.

78
00:05:07,730 --> 00:05:10,800
So I've been playing with mod instead.

79
00:05:11,410 --> 00:05:15,418
Mod is a procedural macro library that lets you transform

80
00:05:15,514 --> 00:05:18,750
its own domain specific language into HTML

81
00:05:18,830 --> 00:05:22,974
at compile time. You can make your components normal rust

82
00:05:23,022 --> 00:05:26,990
functions I use mod for all of my short codes,

83
00:05:27,070 --> 00:05:30,278
and I've been slowly converting my site over to use it.

84
00:05:30,444 --> 00:05:33,240
It's pretty great, you should check it out.

85
00:05:34,410 --> 00:05:37,682
One of the biggest things you see me use these for is the little conversation

86
00:05:37,746 --> 00:05:41,942
snippets that I have in blog posts. This was originally created

87
00:05:42,006 --> 00:05:45,242
to absolutely dunk on homophobes that were angry that someone

88
00:05:45,296 --> 00:05:48,346
put furry art in an information security blog post,

89
00:05:48,528 --> 00:05:52,598
but this also lets me experiment with a more socratic dialogue style for

90
00:05:52,624 --> 00:05:55,982
helping to explain things in more detail. I now

91
00:05:56,036 --> 00:05:59,466
write everything with this style and have to go back and edit

92
00:05:59,498 --> 00:06:03,460
it out for the work blog. My coworkers can confirm this.

93
00:06:05,030 --> 00:06:09,310
This flexibility also lets me add things like hero images

94
00:06:09,390 --> 00:06:13,026
generated with AI. I use these to help make my post more

95
00:06:13,048 --> 00:06:16,614
visually interesting. I'm still refining my style and

96
00:06:16,652 --> 00:06:20,118
trying to make things better, but I'm just absolutely

97
00:06:20,204 --> 00:06:21,590
terrible at CSS.

98
00:06:23,770 --> 00:06:27,574
One of my favorite parts of how this site works is something that will probably

99
00:06:27,612 --> 00:06:31,606
make the theoretical computer scientists in the crowd start crying.

100
00:06:31,798 --> 00:06:35,894
When my blog loads everything from the disk into ram, it stores all the posts

101
00:06:35,942 --> 00:06:39,706
in the moral equivalent of a linked list. When you, as a

102
00:06:39,728 --> 00:06:43,054
reader, look at one of my posts, it's doing a big o of n

103
00:06:43,092 --> 00:06:46,654
lookup on potentially every one of my posts to figure out which post

104
00:06:46,692 --> 00:06:50,906
to display. Normally, this would be terrifying,

105
00:06:51,018 --> 00:06:54,746
especially with the amount of traffic my blog gets, as represented by this

106
00:06:54,788 --> 00:06:58,194
handy graph here. You'd think that something that

107
00:06:58,232 --> 00:07:01,906
does a lookup on potentially every post, in the worst case for

108
00:07:01,928 --> 00:07:06,094
the most common thing on the biggest data set, would make performance

109
00:07:06,222 --> 00:07:09,606
terrifyingly slow. You'd also think that

110
00:07:09,628 --> 00:07:13,154
with the amount of traffic that I get, it would be an active

111
00:07:13,202 --> 00:07:15,640
detriment and I'd be trying to remove it.

112
00:07:16,810 --> 00:07:20,406
However, this is when I play my trap card.

113
00:07:20,588 --> 00:07:24,662
When you look at the analytics, you can see that the most frequently read article

114
00:07:24,726 --> 00:07:28,086
is the most recently posted one. This means that it's

115
00:07:28,118 --> 00:07:31,814
not actually a big o of n lookup. Most of the time it's constant

116
00:07:31,862 --> 00:07:35,066
time complexity. In theory, things design is the

117
00:07:35,088 --> 00:07:38,366
terrifying type of thing that you'd normally find out after you accepted a

118
00:07:38,388 --> 00:07:42,106
job offer and had your first day of work, but in practice it's

119
00:07:42,138 --> 00:07:45,778
fine. It is a bit weird though, and I may need to rethink this in

120
00:07:45,784 --> 00:07:49,058
the future, but this is scaled to almost 300 posts for now,

121
00:07:49,144 --> 00:07:53,010
so I think it's okay. When my site

122
00:07:53,080 --> 00:07:56,702
starts up, it reads every post from the disk into RAm.

123
00:07:56,846 --> 00:08:00,318
Rust makes that really easy. With Tokyo, I can

124
00:08:00,344 --> 00:08:03,350
schedule a bunch of jobs and then wait for them all to finish.

125
00:08:03,500 --> 00:08:06,678
This lets me spread the loadout to every cpu core so that the

126
00:08:06,684 --> 00:08:10,582
posts can load up to twelve times as fast as they would if everything

127
00:08:10,636 --> 00:08:14,042
was done iteratively. Once it's done loading them,

128
00:08:14,096 --> 00:08:17,850
it sorts them and then puts them into the list for the blog's data structures.

129
00:08:18,190 --> 00:08:21,274
I can do things in one line of rust and it would be something like

130
00:08:21,312 --> 00:08:24,622
50 lines of go. Rust allows me to have

131
00:08:24,676 --> 00:08:28,174
a lower cognitive complexity because I can just

132
00:08:28,212 --> 00:08:32,106
rely on things being taken care of for me instead of having to reinvent

133
00:08:32,138 --> 00:08:36,286
the wheel all the time. I things in high level logic

134
00:08:36,398 --> 00:08:40,194
and let the compiler take care of the lower level details of making

135
00:08:40,232 --> 00:08:42,420
it work. It's great.

136
00:08:45,030 --> 00:08:48,694
Can amusing part of all of this loading things into

137
00:08:48,732 --> 00:08:52,390
ram stuff means that my website is actually

138
00:08:52,460 --> 00:08:56,066
stateless. This allows me to move it around to any server

139
00:08:56,098 --> 00:08:59,210
I want very easily in case something very bad

140
00:08:59,280 --> 00:08:59,900
happens.

141
00:09:02,110 --> 00:09:05,914
I can also take all this data in RAM and then transform it into

142
00:09:05,952 --> 00:09:09,830
whatever kind of feed I want. I currently support RSS,

143
00:09:09,990 --> 00:09:13,566
Atom and JSON feed so that you can subscribe to my blog with

144
00:09:13,588 --> 00:09:15,680
whatever reader you normally use.

145
00:09:16,930 --> 00:09:20,458
JSON feed allows for custom extensions, and I have played

146
00:09:20,474 --> 00:09:23,902
with one that gives you some of the extra metadata in my front matter

147
00:09:23,956 --> 00:09:26,180
that isn't exposed in JSON feed itself.

148
00:09:27,030 --> 00:09:30,866
Normally, this doesn't show much of anything useful. It's where

149
00:09:30,888 --> 00:09:34,450
I put things like the Twitch and YouTube links associated with a post,

150
00:09:34,600 --> 00:09:37,906
the link to the slides and talk pages, or the name of the blog

151
00:09:37,938 --> 00:09:41,314
post series, if one exists. I don't know if anyone uses

152
00:09:41,362 --> 00:09:44,434
these, but I've been starting to use them for some of my internal pipeline.

153
00:09:44,482 --> 00:09:47,866
Things I mentioned my

154
00:09:47,888 --> 00:09:51,802
website was stateless, right? Turns out

155
00:09:51,936 --> 00:09:54,060
that's not totally the case.

156
00:09:54,750 --> 00:09:57,834
It's mostly stateless, sure, but it also

157
00:09:57,872 --> 00:10:01,360
has a stateful component that organically grew to meet my needs.

158
00:10:02,290 --> 00:10:06,094
This stateful component sort of started out as a personal API for

159
00:10:06,132 --> 00:10:09,934
other things. I named it me after the Toky Pona word

160
00:10:09,972 --> 00:10:13,346
for me. I use this daily to track some

161
00:10:13,368 --> 00:10:16,706
personal things, but it became really useful once I found

162
00:10:16,728 --> 00:10:20,418
the indie web concept of posse publish on

163
00:10:20,504 --> 00:10:23,650
your site syndicate elsewhere.

164
00:10:25,110 --> 00:10:29,350
This concept allows me to post things on my blog and then have something else

165
00:10:29,420 --> 00:10:32,674
take over to announce those posts on Twitter and Mastodon.

166
00:10:32,722 --> 00:10:36,406
With messages like this, everything is

167
00:10:36,428 --> 00:10:42,214
automated. I don't have to lift a finger except

168
00:10:42,342 --> 00:10:45,846
for Patreon. Patreon's API doesn't

169
00:10:45,878 --> 00:10:49,146
allow you to generate posts, and sometimes I can

170
00:10:49,168 --> 00:10:52,782
forget to link the post to my patrons. I'm trying to get better

171
00:10:52,836 --> 00:10:56,602
about this, but I would really love to just hand this over to a machine

172
00:10:56,666 --> 00:10:59,040
and stop having to care about it.

173
00:11:01,250 --> 00:11:04,590
The other major thing I use things for is web mentions.

174
00:11:04,750 --> 00:11:08,210
Web mentions are kind of like app mentions or Twitter,

175
00:11:08,710 --> 00:11:11,970
but it's generalized for any website on the Internet.

176
00:11:12,310 --> 00:11:15,774
It's another indie web protocol that a surprising number of websites

177
00:11:15,822 --> 00:11:19,750
support. Along with bridges for things like Twitter and Mastodon,

178
00:11:20,170 --> 00:11:23,462
me receives and stores all of the web mentions I get.

179
00:11:23,596 --> 00:11:27,046
When my site starts up, it reaches out to me and gets a list

180
00:11:27,068 --> 00:11:31,186
of web mentions for every post it loads into memory. This means that there's

181
00:11:31,218 --> 00:11:34,586
potentially some delay from you sending the web mention to it showing up on my

182
00:11:34,608 --> 00:11:37,434
blog, but in practice that's okay.

183
00:11:37,632 --> 00:11:40,682
I would like it to be faster, but that would mean having to move

184
00:11:40,736 --> 00:11:43,978
the web mentions database into my main blog app, and I don't

185
00:11:43,994 --> 00:11:46,606
know if I'm ready to do that or not because it would make moving my

186
00:11:46,628 --> 00:11:48,910
website around a lot more complicated.

187
00:11:51,490 --> 00:11:55,422
So I mentioned on my blog before that I host everything on one big Nixos

188
00:11:55,486 --> 00:11:59,314
server. Now, this means that I would be able to store things

189
00:11:59,352 --> 00:12:02,514
on that server fairly durably. But I also have

190
00:12:02,552 --> 00:12:05,938
mentioned that my site is stateless and it farms out its state to

191
00:12:05,944 --> 00:12:10,114
a stateful microservice. You may be wondering something like why

192
00:12:10,152 --> 00:12:13,686
would you do that to yourself? I have a good reason for it, but in

193
00:12:13,708 --> 00:12:16,726
order to explain why, I want to take a moment to trace over the history

194
00:12:16,828 --> 00:12:20,706
of my website's hosting. Heroku's free

195
00:12:20,748 --> 00:12:24,874
tier was one of the things I used to break into tech when I

196
00:12:24,912 --> 00:12:28,538
started my job in Mountain View and got my former domain name.

197
00:12:28,624 --> 00:12:31,440
I was likely using Heroku to host that website.

198
00:12:32,930 --> 00:12:37,134
I don't have notes from back then, I'm going off of my gut feeling and

199
00:12:37,332 --> 00:12:39,870
some projects that I have on GitHub.

200
00:12:41,570 --> 00:12:45,234
At that point, my website was a showcase of my ability to write

201
00:12:45,272 --> 00:12:48,238
things using a web framework called lapis.

202
00:12:48,414 --> 00:12:51,874
You can think of it as rails for Lua built into the side

203
00:12:51,912 --> 00:12:55,506
of Nginx. This variant of my website was in

204
00:12:55,528 --> 00:12:58,198
use for a few years until I rewrote it in late 2016.

205
00:12:58,204 --> 00:13:01,446
A huge part of

206
00:13:01,468 --> 00:13:05,302
how that website worked was that it parsed the markdown for each post every

207
00:13:05,356 --> 00:13:08,550
time the page loaded. This let me edit and test

208
00:13:08,620 --> 00:13:11,894
things very quickly, which made writing posts and previewing

209
00:13:11,942 --> 00:13:15,914
them in real time possible. I didn't fix this

210
00:13:15,952 --> 00:13:18,938
before my first article got to the front page of Hacker News,

211
00:13:19,104 --> 00:13:22,814
which meant that my website was a bit slow, but it did

212
00:13:22,852 --> 00:13:25,310
survive the load, barely.

213
00:13:26,450 --> 00:13:30,190
After that, I set up a cache server named Olegdb.

214
00:13:30,850 --> 00:13:34,266
Olegdb is a key value store written in c by some

215
00:13:34,308 --> 00:13:38,100
friends, and it is a joke about mayonnaise that has been taken way too far.

216
00:13:38,710 --> 00:13:41,746
I used Olegdb in my website to cache the

217
00:13:41,768 --> 00:13:44,420
rendered HTML for each markdown post.

218
00:13:45,350 --> 00:13:49,066
When you loaded a page, it made another request to the OlegDb

219
00:13:49,118 --> 00:13:52,806
server to grab the contents from the cache. This was faster than

220
00:13:52,828 --> 00:13:56,166
parsing the markdown on every pages load, and it ended up

221
00:13:56,188 --> 00:13:59,446
being the thing that made my site survive the wrath of Hacker

222
00:13:59,478 --> 00:14:02,970
News. Some time

223
00:14:03,040 --> 00:14:07,178
after my site was deployed on Heroku, I moved it over to a server running

224
00:14:07,264 --> 00:14:11,414
docku. Docku is a self hostable heroku

225
00:14:11,462 --> 00:14:15,594
clone that lets you run a heroku like environment with Docker on a server

226
00:14:15,642 --> 00:14:18,794
you own and operate. I've used docku

227
00:14:18,842 --> 00:14:21,966
for years since, and for a very long time. It was the first thing I

228
00:14:21,988 --> 00:14:24,960
reached to when trying to deploy anything to the cloud.

229
00:14:25,410 --> 00:14:29,026
It's got templates for spinning up basically any database you

230
00:14:29,048 --> 00:14:32,226
could think of at the time, and it was trivial to just spin up

231
00:14:32,248 --> 00:14:36,120
infra when I went to experiment and kill it off when I was done,

232
00:14:36,650 --> 00:14:39,510
no additional cost required.

233
00:14:40,890 --> 00:14:45,106
I was very price sensitive back then. Being able to host many apps

234
00:14:45,138 --> 00:14:48,506
on the same $5 per month server was a

235
00:14:48,528 --> 00:14:52,042
huge advantage compared to hosting one app on one $5

236
00:14:52,096 --> 00:14:53,660
per month Heroku app.

237
00:14:56,110 --> 00:15:00,010
I've also been a member of the Go community slack since it was founded.

238
00:15:00,450 --> 00:15:04,330
Time and time again answering helping

239
00:15:04,410 --> 00:15:07,870
people with Go, I had seen people

240
00:15:07,940 --> 00:15:11,230
wanting an example of a web application that used the Go standard

241
00:15:11,300 --> 00:15:14,734
library as its framework, and there was no really good example for

242
00:15:14,772 --> 00:15:19,150
it. I had also reached a performance optimization

243
00:15:19,230 --> 00:15:22,734
point where I didn't know how to make my site on lapis run faster,

244
00:15:22,862 --> 00:15:26,166
so I kind of got nerd sniped and decided to rewrite my site in

245
00:15:26,188 --> 00:15:30,050
Go. The first iteration

246
00:15:30,130 --> 00:15:33,960
used a Go backend with purescript and react on the front end.

247
00:15:34,490 --> 00:15:38,494
This worked for some time, but after I realized that my target audience

248
00:15:38,562 --> 00:15:42,634
uses weird browsers that don't support Javascript sometimes I

249
00:15:42,672 --> 00:15:46,406
removed the client side rendering entirely and I had the server spit

250
00:15:46,438 --> 00:15:49,900
out HTML to the client like a traditional website.

251
00:15:50,670 --> 00:15:54,026
This allowed me to survive hacker news hugs of death gracefully

252
00:15:54,138 --> 00:15:57,840
and is why I started putting everything into ram in the first place.

253
00:15:58,370 --> 00:16:01,950
The Go port of my website handled the load like a champ.

254
00:16:03,970 --> 00:16:07,646
This is also when I started putting everything into one giant linked

255
00:16:07,678 --> 00:16:11,586
list. It was so much faster than using a cache server, but the

256
00:16:11,608 --> 00:16:15,198
main downside was that it made the site slower to start up.

257
00:16:15,384 --> 00:16:17,800
At the time it wasn't a practical issue.

258
00:16:19,770 --> 00:16:23,400
I admit my blog is an exceptional use case.

259
00:16:24,330 --> 00:16:28,330
My website gets a lot more traffic than you could possibly imagine.

260
00:16:28,670 --> 00:16:31,980
It usually gets more than 100gb per month.

261
00:16:32,750 --> 00:16:36,582
This is really impressive because my site mostly contains

262
00:16:36,646 --> 00:16:38,410
text and small images.

263
00:16:39,870 --> 00:16:43,802
When my articles get popular, they get very popular

264
00:16:43,946 --> 00:16:48,334
very fast, and then that starts people looking at other pages. On my website

265
00:16:48,532 --> 00:16:52,158
I have really unique performance requirements. The number on

266
00:16:52,164 --> 00:16:55,182
the slide is the number of times I've been on the front page of news

267
00:16:55,236 --> 00:16:59,646
aggregators or have made other posts that have gone viral.

268
00:16:59,838 --> 00:17:03,426
At nearly 300 posts written. This means that my posts have

269
00:17:03,448 --> 00:17:06,542
a less than one out of ten chance of getting a lot of page views

270
00:17:06,606 --> 00:17:09,766
in a very short amount of time. So I need to be sure that the

271
00:17:09,788 --> 00:17:13,718
website code runs as fast as it can for the most common use of

272
00:17:13,724 --> 00:17:17,286
the most common routes. At one point, my blog was

273
00:17:17,308 --> 00:17:20,938
starting to get loaded enough that it started to make my docker server fall over

274
00:17:21,104 --> 00:17:24,310
from plain text, HTML responses and RSS

275
00:17:24,390 --> 00:17:28,060
replies. Something had to give.

276
00:17:28,670 --> 00:17:32,074
So in a moment of weakness, I made a pact

277
00:17:32,122 --> 00:17:35,882
with the devil. I put my blog

278
00:17:35,946 --> 00:17:39,806
on Kubernetes as a part of me learning how to use Kubernetes for

279
00:17:39,828 --> 00:17:43,534
work. I'm a very hands on person. I need

280
00:17:43,572 --> 00:17:46,546
a local copy of things in order to really feel like I understand how to

281
00:17:46,568 --> 00:17:50,318
use them. So I decided to commission

282
00:17:50,334 --> 00:17:53,998
a freight train to mail a letter and I set up a Kubernetes cluster

283
00:17:54,014 --> 00:17:57,938
with digitalocean. This worked

284
00:17:58,024 --> 00:18:01,014
pretty great once I got past the initial teething issues,

285
00:18:01,212 --> 00:18:04,566
and it worked for a long time. I was disappointed by

286
00:18:04,588 --> 00:18:08,078
how many alpha components I needed to serve web apps reliably.

287
00:18:08,274 --> 00:18:11,818
I was able to do continuous deployment using GitHub actions and it

288
00:18:11,824 --> 00:18:15,398
made my blog minimal effort. At most, I was focused

289
00:18:15,414 --> 00:18:18,730
on writing. Publishing was relegated to the machines,

290
00:18:21,010 --> 00:18:24,206
however, sometimes it blew up and when

291
00:18:24,228 --> 00:18:27,360
it did, it was worse than when the single server blew up.

292
00:18:28,210 --> 00:18:31,790
I didn't have access to root on the servers.

293
00:18:32,290 --> 00:18:35,826
I had just enough apps on the Kubernetes cluster that I

294
00:18:35,848 --> 00:18:39,246
couldn't scale the cluster up and down to unbreak

295
00:18:39,278 --> 00:18:42,754
issues. Sometimes a file system mount would get

296
00:18:42,792 --> 00:18:45,986
stuck and I didn't have a reboot that sucker button to

297
00:18:46,008 --> 00:18:50,070
unstuck it. When that happened, my git server would stop working.

298
00:18:50,220 --> 00:18:53,458
This is a very annoying thing to debug while you should be focusing

299
00:18:53,474 --> 00:18:57,174
on your day job. After a while I

300
00:18:57,212 --> 00:19:00,726
gave up. Then I got nerd sniped again

301
00:19:00,748 --> 00:19:04,634
with Nixos. With Nixos I could just directly specify what

302
00:19:04,672 --> 00:19:08,634
should run and where I had power beyond what

303
00:19:08,672 --> 00:19:11,982
mere mortals could attain. With Docker and

304
00:19:12,036 --> 00:19:15,870
Kubernetes alone, I could shape the

305
00:19:15,940 --> 00:19:19,790
universe of the applications in question and then proceed with

306
00:19:19,860 --> 00:19:23,726
that. Instead of trying to kit Bosch things into shape based on overly

307
00:19:23,758 --> 00:19:27,758
generic tools, I could just use Nginx

308
00:19:27,854 --> 00:19:31,970
to route to the Unix socket. And then I did not

309
00:19:32,040 --> 00:19:35,574
have to care about the overly generic Turing complete Yaml hell

310
00:19:35,612 --> 00:19:39,026
that is Kubernetes. I think it's

311
00:19:39,058 --> 00:19:42,422
pretty great, but I'm a Vtuber, so take my

312
00:19:42,476 --> 00:19:45,110
opinions with an appropriately sized grain of salt.

313
00:19:46,890 --> 00:19:50,350
The biggest thing that you can take away from this is that dynamic

314
00:19:50,370 --> 00:19:53,786
web apps can be very fast, especially if they are

315
00:19:53,808 --> 00:19:56,906
built to purpose. If you keep your goals in mind as

316
00:19:56,928 --> 00:20:00,058
you develop things out. It'll do everything you need

317
00:20:00,144 --> 00:20:03,562
very quickly. My blog

318
00:20:03,626 --> 00:20:07,386
stands on the shoulders of giants. Every one of these people gets a special shout

319
00:20:07,418 --> 00:20:10,590
out for helping either make my blog or this talk shine.

320
00:20:11,010 --> 00:20:16,510
Thanks. You all really help more than you can imagine and

321
00:20:16,580 --> 00:20:20,206
thank you for watching. I'm going to stick around in the chat to

322
00:20:20,228 --> 00:20:24,078
answer any questions I haven't answered already. If I miss your question,

323
00:20:24,164 --> 00:20:27,558
or if you really want an answer to my question outside of the

324
00:20:27,564 --> 00:20:30,982
chat, please email it to how I made blog at

325
00:20:31,036 --> 00:20:34,550
zserve us. I'll have a written version of this talk,

326
00:20:34,620 --> 00:20:38,118
including my slides, a recording of the talk, and everything

327
00:20:38,204 --> 00:20:41,702
I said today on my blog. Soon. If you have questions,

328
00:20:41,836 --> 00:20:45,174
please speak up. I love answering them and I am more than

329
00:20:45,212 --> 00:20:48,710
happy to take the time to give a detailed answer. Be well,

330
00:20:48,780 --> 00:20:48,900
all.

