1
00:00:24,090 --> 00:00:27,590
Hi everyone, and thank you for joining my session.

2
00:00:28,330 --> 00:00:32,402
I'm super excited to walk you through building resilient

3
00:00:32,466 --> 00:00:35,270
systems with serverless web development.

4
00:00:39,720 --> 00:00:43,844
I am Olumide Akinremi and I work

5
00:00:43,882 --> 00:00:46,260
as a technical team lead at Sabi.

6
00:00:49,640 --> 00:00:54,184
In this discussion, we are going to talk about chaos

7
00:00:54,272 --> 00:00:57,150
engineering. Chaos on the front end,

8
00:00:57,840 --> 00:01:01,660
building resilient systems and auto and failures.

9
00:01:02,800 --> 00:01:05,500
First, what is chaos engineering?

10
00:01:07,460 --> 00:01:11,372
I know a lot of people might have asked about chaos

11
00:01:11,436 --> 00:01:14,080
engineering and some of its advantage,

12
00:01:14,420 --> 00:01:17,872
but it's important to have a quick breakdown of

13
00:01:17,926 --> 00:01:21,284
chaos engineering and why it is so important

14
00:01:21,402 --> 00:01:25,792
to software engineering. So Wikipedia

15
00:01:25,856 --> 00:01:30,272
defined chaos engineering as the discipline of experimenting

16
00:01:30,336 --> 00:01:33,412
on a system in order to build confidence

17
00:01:33,476 --> 00:01:36,920
in the system's capability to withstand turbulence

18
00:01:37,260 --> 00:01:41,610
condition in production. So basically

19
00:01:42,140 --> 00:01:45,230
you have systems and it's important to

20
00:01:46,560 --> 00:01:49,900
build for scenarios whereby your system will fail.

21
00:01:50,320 --> 00:01:54,312
All systems are bound to fail at any point. Your AWS

22
00:01:54,376 --> 00:01:58,304
server, your azure deployment, or your

23
00:01:58,342 --> 00:02:02,256
services. Everything will fail at some point.

24
00:02:02,438 --> 00:02:06,444
But what is important is building confidence

25
00:02:06,492 --> 00:02:09,490
in your system when a failure happened.

26
00:02:09,880 --> 00:02:13,440
And this can only be done by ensuring

27
00:02:13,520 --> 00:02:16,756
you are prepared for this scenario and know what

28
00:02:16,778 --> 00:02:21,764
to do in this scenario. More like seeing

29
00:02:21,962 --> 00:02:25,284
the issue before it happened or knowing

30
00:02:25,332 --> 00:02:29,160
that this is going to happen and you are prepared for this situation

31
00:02:29,310 --> 00:02:33,208
rather than not being prepared at all. And then when it happened,

32
00:02:33,294 --> 00:02:38,196
you have no idea of why your system fail to

33
00:02:38,238 --> 00:02:41,950
see chaos engineering as having a car

34
00:02:42,640 --> 00:02:46,030
and you decide to go on a road trip with your friend.

35
00:02:46,880 --> 00:02:50,096
And on the road trip there are a lot of failures that

36
00:02:50,198 --> 00:02:53,440
might happen, just like running out of gas,

37
00:02:53,860 --> 00:02:57,308
having a spare tire. Having a spare

38
00:02:57,324 --> 00:03:01,088
tire is important because you can have a flat tire on

39
00:03:01,094 --> 00:03:05,332
the road. So all these things

40
00:03:05,386 --> 00:03:08,816
you should consider on the road trip, the kind of failure

41
00:03:08,848 --> 00:03:12,152
that might happen on your road trip and trying

42
00:03:12,206 --> 00:03:15,608
to prepare ahead

43
00:03:15,694 --> 00:03:19,208
for this kind of failure. So things

44
00:03:19,294 --> 00:03:23,128
are bound to happen in the tech world,

45
00:03:23,294 --> 00:03:26,988
maybe as we speak, someone's system is currently

46
00:03:27,074 --> 00:03:30,492
down and trying to resolve it. This happens

47
00:03:30,626 --> 00:03:32,670
like every single time.

48
00:03:33,920 --> 00:03:37,356
So it's smart to find a

49
00:03:37,378 --> 00:03:40,592
fix to the problem before they arrive because

50
00:03:40,646 --> 00:03:44,256
they can cause trouble and give you

51
00:03:44,278 --> 00:03:47,948
a hard time to deal with when they pop up. So it's

52
00:03:47,964 --> 00:03:51,940
more like checking your car to ensure that this car

53
00:03:52,090 --> 00:03:55,508
can take me on this road trip. And if different

54
00:03:55,594 --> 00:03:58,724
situation occur, I have

55
00:03:58,922 --> 00:04:01,952
the writing in place to ensure that I keep moving,

56
00:04:02,026 --> 00:04:04,570
I don't get stranded at this point.

57
00:04:06,220 --> 00:04:09,370
So let's talk about chaos on the front end.

58
00:04:10,300 --> 00:04:14,120
The front end is a very crazy environment

59
00:04:15,280 --> 00:04:18,600
because a lot of all these failures are not dependent

60
00:04:18,680 --> 00:04:22,488
on you as a front end engineer

61
00:04:22,664 --> 00:04:27,410
or as a full stock engineer, they are dependent on different

62
00:04:28,100 --> 00:04:32,576
situation which are

63
00:04:32,758 --> 00:04:35,900
not in your control. So imagine

64
00:04:35,980 --> 00:04:41,076
that you have an application whereby the

65
00:04:41,098 --> 00:04:44,820
front end is supposed to, sorry, the back end is supposed to return you some

66
00:04:44,890 --> 00:04:48,036
data that you are going to use to

67
00:04:48,058 --> 00:04:52,288
render for a particular page,

68
00:04:52,474 --> 00:04:56,132
but at some point the server goes down, the back end can't

69
00:04:56,276 --> 00:04:59,576
return those data that you need and then

70
00:04:59,678 --> 00:05:03,530
everything is building. The user can't see anything in your application,

71
00:05:04,240 --> 00:05:07,340
the user complain and as a result you

72
00:05:07,410 --> 00:05:10,780
might lose some users.

73
00:05:11,440 --> 00:05:15,164
As a result you might get some call from your

74
00:05:15,202 --> 00:05:18,816
CTO or your CEO that the applications is

75
00:05:18,838 --> 00:05:22,610
not working, or in fact like the customer support team or

76
00:05:23,300 --> 00:05:26,450
users generally leaving feedback on the application,

77
00:05:27,140 --> 00:05:31,300
this is not working, this is crap. So it's

78
00:05:32,120 --> 00:05:35,952
important to deliberately introducing

79
00:05:36,016 --> 00:05:39,988
issues into your front end application to observe potential problems

80
00:05:40,074 --> 00:05:43,530
and assess how your application respond to this.

81
00:05:44,380 --> 00:05:48,504
And have at the back of your mind that it's important

82
00:05:48,622 --> 00:05:52,664
to have a lot of things in place for your

83
00:05:52,702 --> 00:05:57,020
front end application because this is where the user sees

84
00:05:57,520 --> 00:06:01,372
and this is where they interact on

85
00:06:01,426 --> 00:06:04,956
how they interact with your system. The user are not going

86
00:06:04,978 --> 00:06:08,592
to see the back end application, they see

87
00:06:08,726 --> 00:06:12,610
your front end application and they interact with it and

88
00:06:13,060 --> 00:06:17,756
different situation can make you lose users.

89
00:06:17,948 --> 00:06:22,112
If your app fails to render on the initial

90
00:06:22,176 --> 00:06:25,636
load, user complains and leave. If they click on

91
00:06:25,658 --> 00:06:28,420
a particular CTA and is not responsive,

92
00:06:29,240 --> 00:06:33,336
they give you some feedback that it's not working. I click on this button,

93
00:06:33,438 --> 00:06:37,572
nothing happened. In fact, if the user have some network

94
00:06:37,636 --> 00:06:41,704
connectivity issue and it

95
00:06:41,742 --> 00:06:45,100
times out when making a particular request,

96
00:06:45,920 --> 00:06:49,724
they complain that oh, this doesn't work just

97
00:06:49,762 --> 00:06:52,792
because you didn't undo those failures

98
00:06:52,856 --> 00:06:57,890
and faults. So it's important to

99
00:06:58,900 --> 00:07:02,112
building with chaos engineering in mind and

100
00:07:02,166 --> 00:07:05,852
trying to catch and fix issue before they arise.

101
00:07:05,916 --> 00:07:09,684
Be prepared for a situation like

102
00:07:09,722 --> 00:07:15,248
that. So introducing

103
00:07:15,424 --> 00:07:19,236
additional features to your front end

104
00:07:19,338 --> 00:07:23,480
or your code generally doesn't make it resilience.

105
00:07:24,060 --> 00:07:29,044
In fact, it might add potential risks

106
00:07:29,172 --> 00:07:31,770
an issue to failure in the application,

107
00:07:32,300 --> 00:07:35,676
because adding new features means that there

108
00:07:35,698 --> 00:07:39,870
are more features or more

109
00:07:40,240 --> 00:07:43,884
user interacting with your system and

110
00:07:43,922 --> 00:07:47,324
in that case they can try to interact

111
00:07:47,372 --> 00:07:50,930
with the new feature you built and

112
00:07:51,540 --> 00:07:54,240
the one they are trying to use before is broken.

113
00:07:55,460 --> 00:07:59,170
So it's important to be prepared for

114
00:07:59,480 --> 00:08:03,764
situations where this happened and be

115
00:08:03,802 --> 00:08:07,636
ahead of the users. And another important

116
00:08:07,738 --> 00:08:11,216
point is the front end poses greater

117
00:08:11,248 --> 00:08:15,288
challenges compared to every other environment because

118
00:08:15,374 --> 00:08:19,450
of different thing we need to deal with.

119
00:08:20,220 --> 00:08:21,960
Javascript engines,

120
00:08:22,460 --> 00:08:24,680
plugins, accessibility,

121
00:08:25,840 --> 00:08:27,880
styling, latency,

122
00:08:28,040 --> 00:08:31,310
viewport, all of these are

123
00:08:32,640 --> 00:08:35,070
not 100% in your control,

124
00:08:36,240 --> 00:08:39,724
but they are things you should be prepared for imagine

125
00:08:39,772 --> 00:08:43,776
an application that works end to

126
00:08:43,798 --> 00:08:47,324
end on chrome, mobile, responsive born,

127
00:08:47,372 --> 00:08:50,672
Internet Explorer or Mozilla. A particular feature

128
00:08:50,736 --> 00:08:54,260
doesn't work the way it should just because the

129
00:08:54,330 --> 00:08:58,324
JavaScript engine or the browser doesn't support

130
00:08:58,442 --> 00:09:01,920
a particular style that you've used or a particular

131
00:09:02,090 --> 00:09:06,856
function that you've used. So it's important to have

132
00:09:07,038 --> 00:09:10,376
tested or be ahead of the

133
00:09:10,398 --> 00:09:14,264
users in situations like that to ensure that it works

134
00:09:14,382 --> 00:09:15,800
on all browsers.

135
00:09:17,820 --> 00:09:21,656
So let's talk about handling failures and building resilient

136
00:09:21,688 --> 00:09:26,140
systems in a serverless web development.

137
00:09:26,820 --> 00:09:31,068
So take a look at this diagram.

138
00:09:31,164 --> 00:09:35,330
This is a music streaming platform

139
00:09:36,020 --> 00:09:40,144
that have an authentication service, a movie

140
00:09:40,192 --> 00:09:43,110
service, a recommendation struct service,

141
00:09:44,680 --> 00:09:48,244
then a service that keep track of your

142
00:09:48,282 --> 00:09:52,664
watch history. And this is connected to a catch so

143
00:09:52,702 --> 00:09:56,264
you can see it really fast compared to

144
00:09:56,302 --> 00:09:58,440
others that need to connect to the database.

145
00:09:59,340 --> 00:10:02,632
So the database on the other end feeds like

146
00:10:02,686 --> 00:10:06,172
all other services, because the

147
00:10:06,226 --> 00:10:10,200
authentication needs to go to database to retrieve

148
00:10:10,360 --> 00:10:14,284
user information. So I believe this is like a

149
00:10:14,322 --> 00:10:18,848
basic microservice that most

150
00:10:18,934 --> 00:10:23,504
people use. Then we have a front end service that

151
00:10:23,542 --> 00:10:27,232
talks to whatever front end services that you

152
00:10:27,286 --> 00:10:30,884
built. We can be react application

153
00:10:31,082 --> 00:10:34,070
angular application or a mobile app.

154
00:10:34,760 --> 00:10:38,836
So at this point think of a situation

155
00:10:38,938 --> 00:10:41,430
where your database goes down,

156
00:10:42,140 --> 00:10:45,832
meaning that none of this service will

157
00:10:45,886 --> 00:10:48,730
be able to talk to the front end service.

158
00:10:50,140 --> 00:10:53,704
So your react application angular application and

159
00:10:53,742 --> 00:10:57,304
your mobile application suffers from this threat,

160
00:10:57,432 --> 00:11:01,020
or a situation where your authentication service

161
00:11:01,090 --> 00:11:04,476
is down, meaning that users won't be

162
00:11:04,498 --> 00:11:07,616
able to log in. So we

163
00:11:07,638 --> 00:11:11,536
can talk about different scenarios of other services

164
00:11:11,638 --> 00:11:14,880
going down and what will happen. But what is important

165
00:11:14,950 --> 00:11:18,480
here is knowing what

166
00:11:18,550 --> 00:11:22,980
we fail and handling the failure.

167
00:11:23,320 --> 00:11:26,950
So if your authentication service goes down, for example,

168
00:11:28,680 --> 00:11:32,424
you need to think about how your system is

169
00:11:32,462 --> 00:11:37,144
going to work. Does my application depend on

170
00:11:37,182 --> 00:11:39,770
the authentication service to fully function?

171
00:11:42,220 --> 00:11:46,256
So based on your answer then you should decide

172
00:11:46,308 --> 00:11:49,836
how you are going to build and react to this failure. If your

173
00:11:49,858 --> 00:11:53,564
authentication service goes down then the user should still

174
00:11:53,602 --> 00:11:57,276
be able to access the application and still stream

175
00:11:57,308 --> 00:12:03,712
movies and see the recommendation part

176
00:12:03,766 --> 00:12:07,244
of the application because your applications is not solely dependent

177
00:12:07,292 --> 00:12:11,728
on this service, because it's a microservice

178
00:12:11,824 --> 00:12:14,580
which every service are dependent.

179
00:12:16,200 --> 00:12:19,910
So with this you can kind of do some

180
00:12:21,080 --> 00:12:25,092
testing scenario in terms of kiosk engineering

181
00:12:25,156 --> 00:12:29,028
to simulate

182
00:12:29,124 --> 00:12:32,408
each services and see how

183
00:12:32,494 --> 00:12:36,350
your system depend on them as a whole and try to

184
00:12:36,800 --> 00:12:40,430
react to those failures that might happen.

185
00:12:40,960 --> 00:12:44,510
We will talk about some tools that can be used to

186
00:12:45,760 --> 00:12:49,584
implement this chaos engineering we've been

187
00:12:49,622 --> 00:12:53,552
talking about to kind of simulate failures and

188
00:12:53,606 --> 00:12:55,810
know how your system react to it.

189
00:12:57,220 --> 00:13:00,708
But overall, it's important to understand how your system

190
00:13:00,794 --> 00:13:04,324
works and knowing what fail and how they will

191
00:13:04,362 --> 00:13:07,764
feel and finally how you react to

192
00:13:07,802 --> 00:13:11,188
them. Next, let's take a

193
00:13:11,194 --> 00:13:14,570
deep dive into a LinkedIn use case.

194
00:13:15,420 --> 00:13:19,348
So we have this LinkedIn profile,

195
00:13:19,524 --> 00:13:23,476
and in this profile we have different views.

196
00:13:23,668 --> 00:13:27,412
We have the user profile section, we have the feed

197
00:13:27,476 --> 00:13:31,272
section, we have the recent activity session,

198
00:13:31,336 --> 00:13:34,604
and we have the post section. In each of this

199
00:13:34,642 --> 00:13:38,770
session, in each of this section we have

200
00:13:41,940 --> 00:13:45,170
the views and they do different things.

201
00:13:45,620 --> 00:13:49,484
So all these little views are what

202
00:13:49,542 --> 00:13:53,830
form this is a profile page and

203
00:13:54,200 --> 00:13:57,780
a lot of personalization happening here in terms of

204
00:13:57,850 --> 00:14:01,830
recommended or suggested posts to follow.

205
00:14:02,760 --> 00:14:06,428
Also the recent

206
00:14:06,464 --> 00:14:09,480
activities that this profile has performed,

207
00:14:10,060 --> 00:14:13,450
then the user can follow.

208
00:14:14,640 --> 00:14:18,492
So in this page. So let's take

209
00:14:18,546 --> 00:14:19,470
for example,

210
00:14:21,760 --> 00:14:24,972
we can retrieve, just like I blowed out this,

211
00:14:25,026 --> 00:14:28,944
this is supposed to be the user profile picture and

212
00:14:28,982 --> 00:14:32,876
then the username of who you want to follow. Then let's

213
00:14:32,908 --> 00:14:36,610
think about a situation whereby we can retrieve that information.

214
00:14:38,420 --> 00:14:41,844
Is it really necessary to show the

215
00:14:41,882 --> 00:14:45,700
follow button or to tell the user to follow this profile

216
00:14:46,120 --> 00:14:49,956
because they can't see the information

217
00:14:50,058 --> 00:14:51,430
about what to follow?

218
00:14:53,180 --> 00:14:56,712
So it's important to know this

219
00:14:56,846 --> 00:15:00,890
little detail to know how you react to this.

220
00:15:01,500 --> 00:15:04,780
So that's why I'm thinking

221
00:15:04,850 --> 00:15:09,464
also because it is irrelevant

222
00:15:09,512 --> 00:15:13,548
to show this follow button if

223
00:15:13,714 --> 00:15:17,128
the user can see the profile picture and

224
00:15:17,154 --> 00:15:21,136
the name of who to follow, because it's confusing. And at this point

225
00:15:21,318 --> 00:15:24,624
the user will be kind

226
00:15:24,662 --> 00:15:27,360
of concerned that I don't even know who I'm following.

227
00:15:28,420 --> 00:15:32,130
So that is one way to

228
00:15:33,220 --> 00:15:37,604
undo failures for

229
00:15:37,642 --> 00:15:43,000
this account. Another way to do that is knowing

230
00:15:43,820 --> 00:15:47,448
what depends or how your system

231
00:15:47,534 --> 00:15:51,396
depends on each other, or each section depends

232
00:15:51,428 --> 00:15:55,084
on each other. So the most important bit of

233
00:15:55,122 --> 00:15:58,510
this page, based on

234
00:15:59,040 --> 00:16:03,036
your application or based on what you are building for

235
00:16:03,058 --> 00:16:06,892
your own use case. But for this use case, the most important part

236
00:16:06,946 --> 00:16:10,844
of this application is this user profile, which is

237
00:16:10,882 --> 00:16:15,024
here because this user profile, it's what

238
00:16:15,222 --> 00:16:19,330
makes us know or what makes the back end know,

239
00:16:20,020 --> 00:16:23,650
the recommendation of who you want to follow,

240
00:16:24,100 --> 00:16:27,312
the suggested posts you want to read, and the recent

241
00:16:27,376 --> 00:16:31,350
activity. So in situations like

242
00:16:33,580 --> 00:16:37,540
we can't see or retrieve the user profile,

243
00:16:37,620 --> 00:16:41,416
then it's irrelevant to show any of

244
00:16:41,438 --> 00:16:45,416
this information because we don't have any user

245
00:16:45,448 --> 00:16:49,384
profile here, meaning that it's irrelevant

246
00:16:49,432 --> 00:16:53,224
to display any of this information. So our page can fail

247
00:16:53,272 --> 00:16:57,680
gracefully to not confuse the user any further.

248
00:16:58,500 --> 00:17:02,544
But then if we can view the user profile and

249
00:17:02,582 --> 00:17:07,280
then we can retrieve other information about

250
00:17:07,430 --> 00:17:13,456
the suggested post. To follow who

251
00:17:13,478 --> 00:17:17,060
to retro recent activity. We can still

252
00:17:17,130 --> 00:17:20,756
display information on this page because what

253
00:17:20,778 --> 00:17:24,136
is important to the user or what is most important to the

254
00:17:24,158 --> 00:17:28,120
user, it's currently being displayed.

255
00:17:28,460 --> 00:17:31,464
So with this example,

256
00:17:31,582 --> 00:17:35,212
we can better streamline what

257
00:17:35,266 --> 00:17:38,780
we want the user to see at any point based

258
00:17:38,850 --> 00:17:42,684
on the failure that might

259
00:17:42,722 --> 00:17:44,430
happen from our back end.

260
00:17:48,350 --> 00:17:52,038
So I said focus on what to fail

261
00:17:52,134 --> 00:17:56,586
and how it should fail. So just focus

262
00:17:56,688 --> 00:17:58,140
on your application,

263
00:17:59,950 --> 00:18:03,182
think about what is going to fail and

264
00:18:03,236 --> 00:18:06,766
ensure you know and you are prepared for how it is going

265
00:18:06,788 --> 00:18:09,680
to fail if such failure happen.

266
00:18:12,130 --> 00:18:15,774
So these are tools that we can

267
00:18:15,812 --> 00:18:19,374
use to create chaos. So these are the ones

268
00:18:19,412 --> 00:18:23,534
that I've created that can help you

269
00:18:23,572 --> 00:18:27,730
create chaos in your application and like failure

270
00:18:27,810 --> 00:18:31,846
for your application. Thank you

271
00:18:31,868 --> 00:18:35,526
for listening and let me know if you have

272
00:18:35,548 --> 00:18:39,094
any questions. You can reach me on LinkedIn or

273
00:18:39,132 --> 00:18:42,440
Twitter if you have any questions for me.

274
00:18:42,970 --> 00:18:43,540
Bye everyone.

