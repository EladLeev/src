1
00:01:28,850 --> 00:01:32,534
Everybody. Happy to virtually meet you all in

2
00:01:32,572 --> 00:01:35,910
this event. I am Raghulakshmi

3
00:01:36,410 --> 00:01:39,994
from Psi twenty four seven and I will be sharing

4
00:01:40,082 --> 00:01:44,494
some tips on how you optimize your operations and

5
00:01:44,612 --> 00:01:48,798
container lifecycle management. Most of us are

6
00:01:48,884 --> 00:01:52,806
having our products moving to the cloud or adopting

7
00:01:52,858 --> 00:01:56,398
the container model and I've

8
00:01:56,414 --> 00:01:59,380
been in the industry for the past 22 years.

9
00:01:59,990 --> 00:02:04,322
Based on my experience, I'm here to share some

10
00:02:04,376 --> 00:02:07,480
tips. Let's get started.

11
00:02:08,410 --> 00:02:12,578
So before I get into the actual container lifecycle

12
00:02:12,674 --> 00:02:17,262
adoption and the industry stats on what are the various

13
00:02:17,426 --> 00:02:21,482
technologies that are being used and how you can go about

14
00:02:21,536 --> 00:02:25,306
with the operations and optimizing, I would like to

15
00:02:25,328 --> 00:02:29,274
start off with the evolution with

16
00:02:29,312 --> 00:02:32,430
a short history of how things have evolved in the past.

17
00:02:32,580 --> 00:02:35,806
From what it was 20 years ago when I started as

18
00:02:35,828 --> 00:02:39,502
a product software developer to what it is today.

19
00:02:39,636 --> 00:02:42,880
Everything revolves around application building.

20
00:02:43,510 --> 00:02:46,834
So how has the application architecture itself has

21
00:02:46,872 --> 00:02:49,730
evolved? Just a quick introduction.

22
00:02:50,950 --> 00:02:54,958
So it's all around client server architecture.

23
00:02:55,134 --> 00:02:58,870
So you have a server component, you have a client component and how they

24
00:02:58,940 --> 00:03:02,854
interact. So this is how a typical client server architecture used

25
00:03:02,892 --> 00:03:06,214
to be, possibly two decades ago.

26
00:03:06,332 --> 00:03:09,482
We have a server component in the back end

27
00:03:09,616 --> 00:03:13,082
and then the client, sometimes the client is also within

28
00:03:13,136 --> 00:03:16,682
the on premise system running in one corner of your

29
00:03:16,816 --> 00:03:20,034
office premise and you connect with your server.

30
00:03:20,102 --> 00:03:22,800
That's how client server architecture typically was.

31
00:03:23,170 --> 00:03:26,254
Then with Web 20,

32
00:03:26,452 --> 00:03:29,774
the cloud, when it started picking up where all along that

33
00:03:29,812 --> 00:03:33,614
time from, the web was only considered a medium of consuming

34
00:03:33,662 --> 00:03:37,646
content. But with Web 20, the web was also considered

35
00:03:37,678 --> 00:03:41,602
a medium of contributing content. People started writing their own

36
00:03:41,656 --> 00:03:45,362
content and uploading it. People started taking

37
00:03:45,416 --> 00:03:49,078
videos and photos and uploading it. So there are lot of content on

38
00:03:49,084 --> 00:03:53,858
the cloud and they're needed tools for collaborative

39
00:03:54,034 --> 00:03:57,506
working environment. So with Web 20, the client server

40
00:03:57,538 --> 00:04:01,450
architecture changed to the server can be anywhere

41
00:04:01,790 --> 00:04:05,226
in the cloud and then clients can connect from across the

42
00:04:05,248 --> 00:04:08,586
globe. So that was the transformation that happened. And then

43
00:04:08,688 --> 00:04:11,834
with cloud picking up the public cloud servers,

44
00:04:11,962 --> 00:04:15,600
there are various providers who are able to give the service.

45
00:04:15,970 --> 00:04:19,226
The cloud services behind started picking

46
00:04:19,258 --> 00:04:22,814
up cloud servers, public cloud servers, but people did not

47
00:04:22,852 --> 00:04:26,610
or the businesses did not completely move to the public cloud.

48
00:04:26,760 --> 00:04:30,434
There were some operations which still remain on premise even

49
00:04:30,472 --> 00:04:34,126
today. There are on premise solutions that are still being followed

50
00:04:34,158 --> 00:04:37,780
in businesses. So it became a hybrid model.

51
00:04:38,170 --> 00:04:41,526
I can have a mix of public cloud as well

52
00:04:41,548 --> 00:04:45,126
as private cloud and still communicate and collaborate and work together

53
00:04:45,228 --> 00:04:49,058
as a system. So that is the model that is predominantly followed

54
00:04:49,154 --> 00:04:52,826
even today. So this is how the evolution has been. And if

55
00:04:52,848 --> 00:04:57,082
I have to put it, in another terminology, another way of representing it.

56
00:04:57,216 --> 00:05:01,006
What used to be a monolith architecture where even though you

57
00:05:01,028 --> 00:05:04,990
have different components, you have the user interface component, you have the business

58
00:05:05,060 --> 00:05:09,898
logic, you have data access layer and then the database

59
00:05:09,994 --> 00:05:13,810
layer as different components. All of them

60
00:05:13,960 --> 00:05:17,138
acted as one monolith system.

61
00:05:17,304 --> 00:05:20,674
If there is a failure, the entire system fails. So that

62
00:05:20,712 --> 00:05:24,762
was the monolith architecture. So from monolith architecture

63
00:05:24,926 --> 00:05:28,210
things have challenges to microservices architecture,

64
00:05:28,290 --> 00:05:31,378
where each of these, be it your business logic,

65
00:05:31,474 --> 00:05:35,282
or your data accessing layer, or your caching layer,

66
00:05:35,346 --> 00:05:39,202
or your authorization and authentication layer, or your payment

67
00:05:39,276 --> 00:05:42,810
gateway layer, each of them can be run on its own

68
00:05:42,880 --> 00:05:46,534
in a small container. Each of them can be spawned,

69
00:05:46,662 --> 00:05:50,330
you can work on it, you can deploy, you can

70
00:05:50,400 --> 00:05:53,630
bring that down. All that can be done independently,

71
00:05:54,050 --> 00:05:58,106
but all of this still work as a one system. So that's

72
00:05:58,138 --> 00:06:01,662
the transformation from monolith architecture to microservices is

73
00:06:01,716 --> 00:06:05,298
what the industry is moving towards. And one step

74
00:06:05,384 --> 00:06:08,610
ahead of this or the next thing that is happening

75
00:06:08,680 --> 00:06:11,906
is the serverless, I don't even want to

76
00:06:11,928 --> 00:06:15,166
have any server layer. I will just be having functions

77
00:06:15,198 --> 00:06:18,914
for all of these components that I'm talking about but still come

78
00:06:18,952 --> 00:06:22,390
up with an application. So all of this we are talking with respect to building

79
00:06:22,460 --> 00:06:25,590
applications because that's what is at the end of the day where the

80
00:06:25,660 --> 00:06:29,138
business logic is there. I don't even want

81
00:06:29,164 --> 00:06:33,206
to own the server. I will just have functions and completely deploy

82
00:06:33,238 --> 00:06:37,146
my application. Using function as a service is something that is picking up

83
00:06:37,248 --> 00:06:40,798
which the organizations and businesses are moving towards.

84
00:06:40,884 --> 00:06:44,478
So from monolith to microservices to serverless is the

85
00:06:44,564 --> 00:06:48,830
other way of putting that journey of the application evolution.

86
00:06:49,250 --> 00:06:53,386
So with all this in place, what are the typical various

87
00:06:53,498 --> 00:06:57,586
layers that are there in any cloud architecture? We are talking about application

88
00:06:57,688 --> 00:07:01,358
development in a cloud. So what are the various layers?

89
00:07:01,454 --> 00:07:04,786
There are four layers. There are many layers, but I have categorized them

90
00:07:04,808 --> 00:07:08,214
as four layers. And the topmost is the end user layer which

91
00:07:08,252 --> 00:07:11,474
comprises of your web browsers, your mobile applications

92
00:07:11,522 --> 00:07:15,286
or your tablets, using which your customers connect to

93
00:07:15,308 --> 00:07:19,014
the underneath application layer which is nothing but software

94
00:07:19,062 --> 00:07:22,854
as a service. So there are many such software

95
00:07:22,902 --> 00:07:26,298
as a service model vendors available which actually

96
00:07:26,384 --> 00:07:29,738
host the business logic. If you are a business owner, you have

97
00:07:29,744 --> 00:07:33,214
to be worried more about this software as a service model where

98
00:07:33,252 --> 00:07:37,438
actually your business logic is hosted and leave the rest to.

99
00:07:37,604 --> 00:07:41,614
If you are using public clouds you can leave the rest to the vendors on

100
00:07:41,652 --> 00:07:45,550
whom you are deployments. So that's the application layer

101
00:07:45,630 --> 00:07:49,218
and underneath is your platform layer which is again platform as a

102
00:07:49,224 --> 00:07:52,622
service model which comprises of your caching servers,

103
00:07:52,686 --> 00:07:55,986
your SQL databases, NoSQL databases,

104
00:07:56,098 --> 00:08:00,242
queues, microservices, all of this comprises the platform layer

105
00:08:00,306 --> 00:08:03,638
and there are vendors to give platform as a service model.

106
00:08:03,804 --> 00:08:07,582
And underneath the bottom most is your infrastructure layer

107
00:08:07,666 --> 00:08:10,582
which comprises of physical servers, virtual servers,

108
00:08:10,646 --> 00:08:14,054
cloud servers, your load balancer, firewall, router switch,

109
00:08:14,102 --> 00:08:17,606
the entire network, all of them form the infrastructure

110
00:08:17,638 --> 00:08:21,318
layer. Again, infrastructure as a service is a model that is

111
00:08:21,344 --> 00:08:25,146
available. So why am I talking about all these four layers

112
00:08:25,178 --> 00:08:29,002
and why is it important? In a cloud architecture,

113
00:08:29,146 --> 00:08:32,720
even though you are mostly worried about only your application,

114
00:08:33,750 --> 00:08:37,346
the person has to know the IT administrator or the

115
00:08:37,368 --> 00:08:40,302
application owner or the developer, the DevOps,

116
00:08:40,366 --> 00:08:44,130
SRE, whatever role you talk them about you name,

117
00:08:44,280 --> 00:08:47,894
you have to have a complete picture of what is happening in

118
00:08:47,932 --> 00:08:51,398
all these layers. So the end to end visibility across

119
00:08:51,484 --> 00:08:55,062
all these layers is important because we are talking about

120
00:08:55,116 --> 00:08:58,230
things in the cloud. If something goes wrong, your website

121
00:08:58,300 --> 00:09:01,946
or your application is down, the downtime could be anywhere in

122
00:09:01,968 --> 00:09:05,094
this layer. It could be because of an ISP

123
00:09:05,142 --> 00:09:08,314
problem in your end user layer, or it could be

124
00:09:08,352 --> 00:09:11,882
because of a router or a particular port in a particular

125
00:09:11,936 --> 00:09:15,614
switch is not working in your infrastructure layer. The problem could be

126
00:09:15,652 --> 00:09:19,166
anywhere or in your application. The line of code, there is a bug in your

127
00:09:19,188 --> 00:09:22,874
code which is causing an indefinite looping or it could be in your database

128
00:09:22,922 --> 00:09:26,354
layer where the connection has not been closed properly. We can

129
00:09:26,392 --> 00:09:29,842
attribute to n number of factors that can be a reason for

130
00:09:29,896 --> 00:09:33,506
something going wrong in your cloud architecture. Being in the

131
00:09:33,528 --> 00:09:36,914
cloud, you cannot have any downtime. So such being the case,

132
00:09:37,032 --> 00:09:40,086
what are we going to do? How are we going to manage so end to

133
00:09:40,108 --> 00:09:44,054
end visibility across all these layers is important. And let's look

134
00:09:44,092 --> 00:09:47,726
at where does this container architecture

135
00:09:47,778 --> 00:09:51,082
and what are the important things that we need to know of when we move

136
00:09:51,136 --> 00:09:54,460
to the containerized microservice architecture world.

137
00:09:55,470 --> 00:09:59,210
So kubernetes, let's look at some quick stats.

138
00:09:59,630 --> 00:10:03,294
So I've been reading through some articles to know the adoption of

139
00:10:03,332 --> 00:10:07,482
kubernetes and there was an article from VMware

140
00:10:07,546 --> 00:10:11,454
that talked about the state of kubernetes. And there was this article in

141
00:10:11,492 --> 00:10:15,198
2020 and again a survey was down done and

142
00:10:15,284 --> 00:10:18,766
2021 there were stats that were put up. So I'm just giving a comparison

143
00:10:18,798 --> 00:10:22,910
of these two. So organizations that use kubernetes in production

144
00:10:22,990 --> 00:10:27,190
has grown from 59% in 2020% to 65%.

145
00:10:27,260 --> 00:10:30,854
So we are seeing predominantly more and more organizations that

146
00:10:30,892 --> 00:10:34,838
are using kubernetes not just for their development but also

147
00:10:34,924 --> 00:10:38,954
for their production. And organizations also

148
00:10:38,992 --> 00:10:42,794
say the beauty of kubernetes is it can be deployed even on

149
00:10:42,832 --> 00:10:46,602
premise or it can be deployments in multi cloud and still work

150
00:10:46,656 --> 00:10:50,774
together. So people who are having monolith architecture

151
00:10:50,822 --> 00:10:54,494
in their on premise, who cannot afford to move to any cloud have

152
00:10:54,532 --> 00:10:58,126
also started using kubernetes so that it

153
00:10:58,148 --> 00:11:01,886
can be gradually moved to the cloud or it can work in sync with

154
00:11:01,908 --> 00:11:05,726
their public cloud deployment as well. So the organizations that are

155
00:11:05,748 --> 00:11:09,026
deploying kubernetes in on premise, it was 64% in

156
00:11:09,048 --> 00:11:12,706
2020, but slowly with things moving to the cloud, the on

157
00:11:12,728 --> 00:11:17,846
premise deployment is reducing. But still there

158
00:11:17,868 --> 00:11:20,930
is enough adoption for kubernetes and on premise.

159
00:11:21,090 --> 00:11:24,898
And there have been people who the important challenge

160
00:11:24,994 --> 00:11:28,858
that if you have to talk about in moving to any or particularly the

161
00:11:28,944 --> 00:11:32,662
Kubernetes technology is lack of experience and expertise

162
00:11:32,726 --> 00:11:36,474
has been quoted as the top deployment challenge and

163
00:11:36,592 --> 00:11:39,814
the stats have proven that that lack

164
00:11:39,862 --> 00:11:43,710
of experience and expertise is gradually coming down because people

165
00:11:43,780 --> 00:11:47,786
are appreciating the importance on gaining

166
00:11:47,818 --> 00:11:51,582
that expertise slowly. But still there is a long way to go.

167
00:11:51,636 --> 00:11:55,570
That's why there are still 65% of people who feel that lack of experience

168
00:11:55,640 --> 00:11:58,802
and expertise is the top challenge. So moving

169
00:11:58,856 --> 00:12:02,094
along and to talk about the benefits from kubernetes

170
00:12:02,142 --> 00:12:05,330
based on this same survey that was done,

171
00:12:05,480 --> 00:12:09,074
58% of people have felt that usage of kubernetes

172
00:12:09,122 --> 00:12:12,546
have helped them in improving the resource utilization. So resource

173
00:12:12,578 --> 00:12:16,646
utilization there is also another study that states that

174
00:12:16,828 --> 00:12:21,050
when we move to the cloud there are lot of unused resources

175
00:12:21,550 --> 00:12:25,878
and there are lot of almost 30% of resources are being wasted.

176
00:12:25,974 --> 00:12:30,118
So that being the case, Kubernetes helps in improving your resource utilization

177
00:12:30,214 --> 00:12:33,386
and 46% of people have felt that it is shortening

178
00:12:33,418 --> 00:12:36,782
your software development lifecycle. We are moving towards

179
00:12:36,836 --> 00:12:39,594
the agile model and we want to do quicker releases.

180
00:12:39,722 --> 00:12:43,402
The shortening of software development lifecycle is important

181
00:12:43,476 --> 00:12:46,706
for your business needs and 41% of

182
00:12:46,728 --> 00:12:49,794
people have felt containerized. This monolith application

183
00:12:49,912 --> 00:12:53,374
is possible using Kubernetes because it has the advantage

184
00:12:53,422 --> 00:12:57,142
of having an on premise setup as well 48%

185
00:12:57,196 --> 00:13:00,642
have felt that it has eased their application upgrades and maintenance.

186
00:13:00,706 --> 00:13:05,334
It's easy for you to do it in deployment and

187
00:13:05,372 --> 00:13:09,590
28% of people feel that it has reduced the public cloud cost

188
00:13:09,740 --> 00:13:13,526
because it can be a combo. And when using Kubernetes have helped

189
00:13:13,558 --> 00:13:17,146
them to reduce their public cloud cost, 39% have

190
00:13:17,168 --> 00:13:20,522
felt that it has enabled their move to the cloud because people

191
00:13:20,576 --> 00:13:25,114
thought that they will not be able to move to the cloud otherwise and kubernetes

192
00:13:25,162 --> 00:13:28,734
helped them in moving to the cloud. So these are all some of the benefits

193
00:13:28,852 --> 00:13:32,346
which are. I've just taken one survey. There are many articles

194
00:13:32,378 --> 00:13:35,826
that talks about the benefits and the challenges as well. So if

195
00:13:35,848 --> 00:13:39,506
you have to put all these benefits in one diagram with

196
00:13:39,528 --> 00:13:42,738
respect to using the Kubernetes. Kubernetes is one of

197
00:13:42,744 --> 00:13:46,238
the containerized model which people are adopting

198
00:13:46,414 --> 00:13:49,734
more and more. It's because it's very portable and

199
00:13:49,772 --> 00:13:53,414
flexible model. It's simple. I've just categorized them

200
00:13:53,452 --> 00:13:56,786
and put it as points here. You can have it in multicloud

201
00:13:56,818 --> 00:14:01,194
deployment. You need not be just stuck with only one cloud vendor because

202
00:14:01,232 --> 00:14:04,746
it is multicloud. It's easy for you to change the vendor in

203
00:14:04,768 --> 00:14:08,458
case you want to change. And you can also have a local

204
00:14:08,544 --> 00:14:12,414
model on premise. Kubernetes model also is possible

205
00:14:12,612 --> 00:14:17,150
scaling when we take cloud and when we take containerization,

206
00:14:17,570 --> 00:14:21,006
easy scaling, faster scaling is possible and it

207
00:14:21,028 --> 00:14:24,894
is a reliable solution and it's open source. Open source. The beauty of any

208
00:14:24,932 --> 00:14:28,978
open source technology is you get a lot of help from other

209
00:14:29,064 --> 00:14:32,498
experts who will be able to help you if you face any problem,

210
00:14:32,664 --> 00:14:36,274
and they are the market leaders. So these are some of the benefits which

211
00:14:36,312 --> 00:14:39,494
people have seen and we are also seeing when we

212
00:14:39,532 --> 00:14:43,282
want to move our monolith architecture to the containerized

213
00:14:43,346 --> 00:14:46,806
world, particularly the Kubernetes model. Now let's look

214
00:14:46,828 --> 00:14:50,586
at some of the challenges. What are the, we saw lack of expertise as

215
00:14:50,608 --> 00:14:54,554
the top challenge that was quoted in the survey. Let me also

216
00:14:54,672 --> 00:14:57,914
cite some of the challenges based on our interaction with

217
00:14:57,952 --> 00:15:01,382
some of our customers and based on how we ourselves

218
00:15:01,446 --> 00:15:05,258
have been the challenges that we faced when we moved

219
00:15:05,354 --> 00:15:08,958
our setup to the container model. So let's look at some of

220
00:15:08,964 --> 00:15:13,082
the challenges. These are not in any particular order, but these are predominantly

221
00:15:13,146 --> 00:15:17,170
the major challenges that are being faced. And first is the

222
00:15:17,240 --> 00:15:21,774
lack of expertise because we don't know what is happening underneath.

223
00:15:21,822 --> 00:15:25,662
You have to understand the technology and understand the deployment

224
00:15:25,726 --> 00:15:29,126
clearly. That is when you will be able to do the

225
00:15:29,148 --> 00:15:32,706
configuration correctly. So that is the challenge that people are facing

226
00:15:32,818 --> 00:15:36,710
because human mind is more like we are stuck with or

227
00:15:36,780 --> 00:15:39,962
we are comfortable with what we know and we don't want

228
00:15:40,016 --> 00:15:44,054
to come out of it and learn new things and adopt

229
00:15:44,102 --> 00:15:47,674
ourselves with the latest technologies. That's an hindrance that

230
00:15:47,792 --> 00:15:51,434
pretty much many people face and that

231
00:15:51,472 --> 00:15:54,862
is the major challenge that is being faced. But we can see people

232
00:15:54,916 --> 00:15:58,026
are coming out of their comfort zone and trying to become expert

233
00:15:58,058 --> 00:16:01,198
because that's how you can be at least

234
00:16:01,284 --> 00:16:05,134
on the go in this technical world. So that is the major challenge,

235
00:16:05,182 --> 00:16:08,466
which industries are facing. Getting the proper expertise in

236
00:16:08,488 --> 00:16:12,354
the people is the major challenge. And the other important challenge is

237
00:16:12,392 --> 00:16:16,002
the deployment complexities. Even though

238
00:16:16,056 --> 00:16:19,314
the microservice architecture, the container containers,

239
00:16:19,442 --> 00:16:23,014
each one can be spawned, deployed on its own. These all look very

240
00:16:23,052 --> 00:16:27,202
simple, but the complexity lies in the actual deployment

241
00:16:27,266 --> 00:16:30,874
and managing and monitoring them to the outside world. It is

242
00:16:30,912 --> 00:16:34,582
very simple. It's a cool thing to do it in an architectural diagram,

243
00:16:34,646 --> 00:16:38,346
but the actual deployments people know who are working on it will

244
00:16:38,368 --> 00:16:42,198
know the deployment complexities. So that's again another challenge.

245
00:16:42,374 --> 00:16:46,238
And there are lot of monitoring that you need to do around there too,

246
00:16:46,324 --> 00:16:49,614
because it is being on the cloud, you have to make sure that all your

247
00:16:49,652 --> 00:16:53,246
key performance metrics are being monitoring. All of

248
00:16:53,268 --> 00:16:56,658
the components have to be up and running all the time, and they have

249
00:16:56,664 --> 00:17:00,686
to be performing very quickly, have quicker turnaround

250
00:17:00,718 --> 00:17:04,434
and response times. That is when you will be able to have

251
00:17:04,472 --> 00:17:08,038
your production setup up and running and configuring them,

252
00:17:08,124 --> 00:17:11,766
automating them, applying some configuration rules. So you

253
00:17:11,788 --> 00:17:15,222
have to monitor all of them using the right tools. And that's again

254
00:17:15,276 --> 00:17:18,534
another challenge. People usually neglect that part

255
00:17:18,652 --> 00:17:22,198
and deploying it in the cloud. Once you take it to production

256
00:17:22,294 --> 00:17:25,914
later on, when you face a problem, it will be very challenging to find

257
00:17:25,952 --> 00:17:29,146
out where the problem is for which tools will really help.

258
00:17:29,328 --> 00:17:32,766
And the other important challenge is security. Being in

259
00:17:32,788 --> 00:17:36,734
the cloud, configuring things properly, making sure that one

260
00:17:36,772 --> 00:17:40,142
user's data is not visible to the other user. And you

261
00:17:40,196 --> 00:17:44,314
make sure that security is taken care at all the layers in your cluster

262
00:17:44,362 --> 00:17:48,254
architecture, be it in your pod or in your node, or in your cluster,

263
00:17:48,302 --> 00:17:51,934
in your service, all of them is important. From your database

264
00:17:51,982 --> 00:17:55,818
design to how you deploy, how you show it in your client,

265
00:17:55,934 --> 00:17:59,282
security plays a major role. And that's again, another challenge.

266
00:17:59,346 --> 00:18:02,914
And complying with all the compliances based on the geographical

267
00:18:02,962 --> 00:18:06,438
region is another challenge. And this,

268
00:18:06,524 --> 00:18:09,900
we have seen few people say this, and we have also felt this.

269
00:18:10,510 --> 00:18:14,300
Even though it might look like everything is taken care,

270
00:18:15,550 --> 00:18:19,158
sometimes it feels that it is like a black box and we don't

271
00:18:19,174 --> 00:18:22,298
have control of the underlying

272
00:18:22,394 --> 00:18:25,982
framework. So loss of control has been cited as few

273
00:18:26,036 --> 00:18:29,120
challenges, or one of the challenge by few people.

274
00:18:29,650 --> 00:18:32,958
And the other challenge is the scaling cost.

275
00:18:33,124 --> 00:18:36,546
Scalability is an advantage. We saw that in the benefits as

276
00:18:36,568 --> 00:18:40,782
well, but you have to do it rightly. Not that every deployment

277
00:18:40,846 --> 00:18:44,466
or everything that you do have

278
00:18:44,488 --> 00:18:48,322
to be taken to the cloud or have to be taken to the containerized

279
00:18:48,386 --> 00:18:51,960
world. Do not try to do things because somebody else is doing

280
00:18:52,490 --> 00:18:55,590
your application is different, your environment is different,

281
00:18:55,660 --> 00:18:58,970
your customers are different. You have to really

282
00:18:59,040 --> 00:19:02,858
evaluate if you really have to move towards a containerized option

283
00:19:02,944 --> 00:19:06,826
itself. You end up converting everything to

284
00:19:06,848 --> 00:19:10,954
the container architecture just because that's the latest technology. Sometimes it

285
00:19:10,992 --> 00:19:15,306
might backfire and it might cost you heavily. So depending

286
00:19:15,338 --> 00:19:18,606
on what is the need, you might want to sometimes have it

287
00:19:18,628 --> 00:19:22,826
in your local on premise itself or have it in a fixed server

288
00:19:22,938 --> 00:19:26,466
instead of going for an auto scaling environment. Or you have to go for

289
00:19:26,488 --> 00:19:30,354
an auto scaled environment based on your requirement. So it's based

290
00:19:30,392 --> 00:19:34,066
on the application and the functionality that it does. The technology

291
00:19:34,168 --> 00:19:37,522
has to be chosen. Lot of time people struggle just because

292
00:19:37,576 --> 00:19:41,046
it's the latest technology, adopt that and then find out

293
00:19:41,068 --> 00:19:44,610
that it's going to cost them more. And that's again another challenge.

294
00:19:44,690 --> 00:19:48,626
So these are some major challenges that I wanted to bring

295
00:19:48,668 --> 00:19:51,866
it to you and let's look at the

296
00:19:51,888 --> 00:19:55,526
monitoring needs. How do we overcome the challenges?

297
00:19:55,638 --> 00:19:59,530
Most of the challenges, be it your scaling cost or your monitoring needs

298
00:19:59,600 --> 00:20:03,326
or your deployment configurations, most of them

299
00:20:03,428 --> 00:20:07,102
that I talked about can be taken care of with the

300
00:20:07,156 --> 00:20:10,542
help of tools and with monitoring needs. And when we talk about

301
00:20:10,596 --> 00:20:15,114
monitoring needs, this is a typical Kubernetes architecture

302
00:20:15,162 --> 00:20:18,462
that comprises of your entire cluster, the node

303
00:20:18,526 --> 00:20:22,146
and then your kubelet and pod. And this is how it

304
00:20:22,168 --> 00:20:25,778
is and you need to make sure that all of them are up and running.

305
00:20:25,864 --> 00:20:29,746
So when we talk about monitoring, I would like to associate the monitoring

306
00:20:29,778 --> 00:20:33,254
into these three pillars of observability that we call the first

307
00:20:33,292 --> 00:20:37,394
one is metrics. In metrics in Kubernetes,

308
00:20:37,442 --> 00:20:40,694
what are the things that you have to take care of then? I will just

309
00:20:40,732 --> 00:20:44,346
give a quick overview because the pillars of observability itself can be talked at

310
00:20:44,368 --> 00:20:47,498
length. So when we talk about metrics, that's the

311
00:20:47,504 --> 00:20:51,094
first pillar of observability. The key metrics are availability.

312
00:20:51,222 --> 00:20:54,974
The different components that we saw, be it your node or your

313
00:20:55,012 --> 00:20:58,560
pod or your cluster, all of them have to be up and running.

314
00:20:58,930 --> 00:21:02,814
99.99% 59. Uptime is what

315
00:21:02,852 --> 00:21:05,986
the industry expects. Make sure they are up and running.

316
00:21:06,168 --> 00:21:10,302
That's one of the important metric. And the second important metric

317
00:21:10,366 --> 00:21:14,146
is performance. There is no point in having all

318
00:21:14,168 --> 00:21:17,542
the components up and running if they are going to be performing very,

319
00:21:17,596 --> 00:21:20,882
very slow. So make sure all those components

320
00:21:20,946 --> 00:21:24,770
are doing their work in a high speed environment

321
00:21:24,850 --> 00:21:28,374
because that's the industry expectation. Nobody has the

322
00:21:28,412 --> 00:21:31,626
time or patience to sit and look through pages that are

323
00:21:31,648 --> 00:21:34,950
going to take forever to load. We just move on to the next pages.

324
00:21:35,030 --> 00:21:38,634
We just move on to the next service or the application, make sure your

325
00:21:38,672 --> 00:21:42,166
kubernetes, all your layers are performing very good

326
00:21:42,208 --> 00:21:45,562
for which tools are important. So when we talk about metrics,

327
00:21:45,626 --> 00:21:49,198
availability and performance are the important metrics that have to

328
00:21:49,204 --> 00:21:52,762
be taken care. And the second pillar is traces.

329
00:21:52,906 --> 00:21:56,420
So in traces, what does trace mean? You know,

330
00:21:57,190 --> 00:22:00,366
your applications that is deployed is taking some 10 seconds

331
00:22:00,398 --> 00:22:03,874
to load. You need to know exactly where it is taking more

332
00:22:03,912 --> 00:22:07,842
time. And in a distributed architecture, in a containerized environment,

333
00:22:07,986 --> 00:22:11,750
each of these containers can be spawned and spawned.

334
00:22:12,490 --> 00:22:15,462
It can do its function and destroyed on its own.

335
00:22:15,596 --> 00:22:18,950
So in that situation, how do you know which

336
00:22:19,020 --> 00:22:22,378
node is taking more time, which line of code is taking more time?

337
00:22:22,464 --> 00:22:25,658
So that is the trace tracing to the exact line of code that

338
00:22:25,664 --> 00:22:29,386
is causing issue. So that is tracing across all the application

339
00:22:29,488 --> 00:22:33,150
platforms that is available and that's what traces will give you.

340
00:22:33,220 --> 00:22:37,360
So in a distributed architecture, where each of these containers or

341
00:22:38,370 --> 00:22:42,474
each of this can be written in its own language too, your authentication

342
00:22:42,522 --> 00:22:45,758
service can be written in a different language, your payment service can be in a

343
00:22:45,764 --> 00:22:49,890
different language. But still, if there is a problem, you must be able to track

344
00:22:49,960 --> 00:22:53,202
and trace to the line of code. And that is what is

345
00:22:53,256 --> 00:22:56,770
trace. And the third pillar is logs.

346
00:22:57,510 --> 00:23:00,822
It's all distributed architecture. And when anything goes

347
00:23:00,876 --> 00:23:04,610
wrong, we have to go for debugging. We have to look at the logs.

348
00:23:04,690 --> 00:23:08,626
And it is not possible for the IT administrator to take remote

349
00:23:08,658 --> 00:23:12,362
control of each of the distributed architecture the system

350
00:23:12,416 --> 00:23:15,834
is deployed in and look at what is happening in each of the log

351
00:23:15,872 --> 00:23:19,898
files. So you need to collect all those logs, process it

352
00:23:19,984 --> 00:23:23,086
and store it in such a way it is easy for you to query and

353
00:23:23,108 --> 00:23:26,442
see where the problem is. So converting your unstructured

354
00:23:26,506 --> 00:23:29,850
data into a structured data is what is log management.

355
00:23:29,930 --> 00:23:33,466
And that's the third pillar for observability.

356
00:23:33,578 --> 00:23:36,750
So putting all these three together, metrics, traces,

357
00:23:36,830 --> 00:23:40,786
logs, make sure the tool that you are trying to use has all

358
00:23:40,808 --> 00:23:44,482
these three complete so that you can rely on that

359
00:23:44,536 --> 00:23:48,014
tool. Let me quickly give some sample screenshots

360
00:23:48,062 --> 00:23:51,382
of what all you need to look at in a monitoring solution. The health

361
00:23:51,436 --> 00:23:54,614
dashboard has to be there, be it your node or your pod or your

362
00:23:54,652 --> 00:23:58,246
services. How many of them are up and how many of them are down.

363
00:23:58,348 --> 00:24:01,782
What are the top cpu intensive pods? Top memory intensive

364
00:24:01,926 --> 00:24:05,306
pods, all of these in a health dashboard is important.

365
00:24:05,488 --> 00:24:09,126
Inventory. Once you give one particular cluster

366
00:24:09,158 --> 00:24:13,290
detail, you must be able to get all your nodes, pods, your deployments,

367
00:24:13,370 --> 00:24:16,734
endpoints, replica sets, how many services are there and

368
00:24:16,772 --> 00:24:20,542
what are their availability and performance. The inventory dashboard is important.

369
00:24:20,676 --> 00:24:24,238
And the business view, the infrastructure view of

370
00:24:24,404 --> 00:24:28,338
the nodes and the cluster, the nodes and pods to show you exactly

371
00:24:28,424 --> 00:24:32,462
where the problem is. And that's about the metrics.

372
00:24:32,526 --> 00:24:35,714
This is about the traces to show you the line of code that is having

373
00:24:35,752 --> 00:24:39,362
issue and about the log management. Collecting all your kubernetes

374
00:24:39,426 --> 00:24:42,742
containers and nodes logs and looking

375
00:24:42,796 --> 00:24:46,086
at them in one place, just log type equal to container logs. You must

376
00:24:46,108 --> 00:24:49,034
be able to get all the logs that have been collected so that you can

377
00:24:49,072 --> 00:24:52,454
find where and what is the problem. Matic node.

378
00:24:52,582 --> 00:24:56,540
So these are some things that you have to look for and

379
00:24:56,990 --> 00:25:00,458
those are for monitoring, not just monitoring. Sometimes you

380
00:25:00,464 --> 00:25:03,818
may have to take some actions because you know there is a

381
00:25:03,824 --> 00:25:07,086
problem, you may have to do some action on it and your

382
00:25:07,108 --> 00:25:10,286
tool must be able to help. You have some nodes and pods and your

383
00:25:10,308 --> 00:25:14,250
pod is continuously failing or unable to restart. What do you do manually?

384
00:25:14,330 --> 00:25:17,666
You have to manually reboot, which is time consuming. You have to

385
00:25:17,688 --> 00:25:21,426
take remote control and do it in a manual way instead. You must

386
00:25:21,448 --> 00:25:25,310
be able to write some scripts which does automatically

387
00:25:25,390 --> 00:25:29,206
the reboot and associate it with the threshold profile. When you

388
00:25:29,228 --> 00:25:32,566
see that the pod's cpu is increasing, you must be

389
00:25:32,588 --> 00:25:36,582
able to, or when your pod is not responding continuously for

390
00:25:36,636 --> 00:25:40,242
three times or five times, do a restart. Such actions

391
00:25:40,306 --> 00:25:43,914
should be possible. Another example is when your cpu is high,

392
00:25:44,032 --> 00:25:47,354
you may want to free up some resources. Again, you can write some

393
00:25:47,392 --> 00:25:51,434
script and you can associate that with your threshold. When your cpu's node

394
00:25:51,482 --> 00:25:54,654
cpu is greater than 90%, go and clean up the

395
00:25:54,692 --> 00:25:57,982
process which will reduce the cpu. All those

396
00:25:58,036 --> 00:26:02,330
manual things that you usually do should be automated

397
00:26:02,490 --> 00:26:06,234
using the scripts and associating it with those

398
00:26:06,292 --> 00:26:09,826
actions. And see if your tool that you're selecting has all this so

399
00:26:09,848 --> 00:26:13,986
that it makes it easy for you. In your live deployment. When you identify a

400
00:26:14,008 --> 00:26:17,794
problem, half of the problem, once you have identified and you want to make

401
00:26:17,832 --> 00:26:21,554
some corrections, they have to be done automatically so that it is seamless

402
00:26:21,602 --> 00:26:25,138
for the end user and your end users are not impacted

403
00:26:25,234 --> 00:26:28,786
because of these problems in the system. So finding

404
00:26:28,818 --> 00:26:32,746
out a right tool and monitoring using the right tool is what

405
00:26:32,768 --> 00:26:36,010
is important. Those could address

406
00:26:36,080 --> 00:26:39,946
your challenges. In addition, when you are looking for such tools, you can choose any

407
00:26:39,968 --> 00:26:43,550
tool for your monitoring needs. In addition to the challenges

408
00:26:44,450 --> 00:26:48,330
that we discussed and in addition to the pillars of observability

409
00:26:48,410 --> 00:26:51,806
that we discussed, which you have to look for, I would say you have to

410
00:26:51,828 --> 00:26:55,234
look for additionally three more things. I call it as look for

411
00:26:55,272 --> 00:26:59,086
ice. I stands for integration, c for customization

412
00:26:59,198 --> 00:27:03,586
and e for extension. So I'll just quickly tell what this is.

413
00:27:03,768 --> 00:27:07,554
All of us, when we are having our deployments, we will have some in

414
00:27:07,592 --> 00:27:11,046
house metrics that are being collected. So the tool that you are selecting should

415
00:27:11,068 --> 00:27:14,294
have the integrability option so that you can do

416
00:27:14,332 --> 00:27:18,642
all your import export in a seamless manner. It shouldn't be a data silos.

417
00:27:18,706 --> 00:27:22,106
You have to integrate everything and you must be able to view. Sometimes you may

418
00:27:22,128 --> 00:27:25,306
want to export it to export your alert to some

419
00:27:25,328 --> 00:27:29,162
third party that you are already using. All those import export options

420
00:27:29,216 --> 00:27:32,298
should be available. APA options should be available. See if the

421
00:27:32,304 --> 00:27:35,642
tool supports such things. That is the integrability

422
00:27:35,786 --> 00:27:39,118
customization. I don't want to use whatever you are giving out

423
00:27:39,124 --> 00:27:42,302
of the box. I may want to change the color, I may want to change

424
00:27:42,356 --> 00:27:46,162
the text. I may want to do some other operations based

425
00:27:46,216 --> 00:27:50,418
on my need. See if the tool is having such customizability options

426
00:27:50,584 --> 00:27:53,650
and extensibility API support.

427
00:27:53,800 --> 00:27:57,678
I don't want drag and drop and build your own dashboard.

428
00:27:57,854 --> 00:28:01,334
We are living in this era of citizen coders where people don't want to

429
00:28:01,372 --> 00:28:04,786
take out of the box whatever is given. Give me the flexibility

430
00:28:04,898 --> 00:28:08,770
to do things of my own is what is expected

431
00:28:08,850 --> 00:28:12,394
in this generation, kids. So the tool that you are

432
00:28:12,432 --> 00:28:16,362
using, you are building, or the tool that you are planning to use should

433
00:28:16,416 --> 00:28:19,626
have this extensibility option, but at the same time it

434
00:28:19,648 --> 00:28:22,958
has to work. It's not that I can extend, but it will not work.

435
00:28:23,044 --> 00:28:27,386
So make sure it is extensible. So look for ice integration,

436
00:28:27,578 --> 00:28:31,066
integrability, customizability and extensibility.

437
00:28:31,178 --> 00:28:34,510
So there are many tools in the market. Psi twenty four seven

438
00:28:34,580 --> 00:28:38,178
is one such tool. It's an aipowered full stack monitoring tool

439
00:28:38,264 --> 00:28:41,394
that lets you take care of all your monitoring needs in

440
00:28:41,432 --> 00:28:44,946
one single console. I talked about the various layers. So from

441
00:28:44,968 --> 00:28:48,706
your end user layer to your infrastructure layer, we have monitoring

442
00:28:48,738 --> 00:28:51,682
for all the needs. You can also monitor your containers,

443
00:28:51,746 --> 00:28:55,446
be it your docker containers or your kubernetes. Monitoring for all

444
00:28:55,468 --> 00:28:59,322
of them is available. On top of all this, we do have

445
00:28:59,456 --> 00:29:02,454
alerting, reporting and integrations dashboards.

446
00:29:02,502 --> 00:29:06,490
All of that is possible. And site twenty four seven

447
00:29:06,560 --> 00:29:10,300
is hosted on Zoho's data center. So we do have our

448
00:29:10,830 --> 00:29:14,266
data centers, our own data centers, ten different data centers

449
00:29:14,298 --> 00:29:17,726
in five different regions. So depending on your region, you can

450
00:29:17,748 --> 00:29:21,162
choose the data center. We have it in US, Europe, China,

451
00:29:21,226 --> 00:29:24,526
India and Australia. Your data will reside within the

452
00:29:24,548 --> 00:29:28,462
geographical boundaries of that particular data center that you are selecting.

453
00:29:28,606 --> 00:29:31,794
Being a cloud provider, we do take privacy, security and

454
00:29:31,832 --> 00:29:35,646
compliance very seriously and get all the certifications that are required.

455
00:29:35,758 --> 00:29:39,106
So we have been in the industry. Zoho has been in the industry for the

456
00:29:39,128 --> 00:29:43,154
past 25 years. Site 24/7 as a product has been in the industry

457
00:29:43,202 --> 00:29:46,550
for close to 15 years now. So we are a mature product

458
00:29:46,620 --> 00:29:50,300
in the market. Just feel free to try it out and see for yourself.

459
00:29:50,910 --> 00:29:54,266
I would like to finish off with

460
00:29:54,288 --> 00:29:57,674
a small snippet from this book. This is one of my

461
00:29:57,712 --> 00:30:01,514
favorite books. I'm sure many of you would have read this book if

462
00:30:01,552 --> 00:30:04,926
not the book. I'm sure many of you would be aware of

463
00:30:04,948 --> 00:30:08,862
this golden circle. Start with a why, why, how and what.

464
00:30:08,916 --> 00:30:12,798
I want you to apply this in anything and everything that you do

465
00:30:12,964 --> 00:30:16,274
in business as well. So you should start

466
00:30:16,312 --> 00:30:19,618
with your why the purpose, the five y technique why am I

467
00:30:19,624 --> 00:30:23,374
doing this? Do I really have to move to a cloud native

468
00:30:23,502 --> 00:30:27,366
technology? My system is already working fine. So what

469
00:30:27,388 --> 00:30:30,866
are the pros and cons in moving to adopting

470
00:30:30,898 --> 00:30:34,614
a kubernetes or any other container orchestration for that matter?

471
00:30:34,732 --> 00:30:38,518
So ask your five whys. Depending on your application

472
00:30:38,684 --> 00:30:41,866
and if you really know it is the reason, you will get the

473
00:30:41,888 --> 00:30:45,146
purpose. That is when you have to go ahead with

474
00:30:45,168 --> 00:30:48,938
the next of how and what you have to do. So start with your why.

475
00:30:49,024 --> 00:30:52,570
Once you are clear with your why, how is just the process

476
00:30:52,720 --> 00:30:55,934
how you want to monitor what tool you want to use. You want to build

477
00:30:55,972 --> 00:30:59,134
your own tool or use some third party tool available. That's all

478
00:30:59,172 --> 00:31:03,486
in the process. If you are clear with your why and choosing the right things

479
00:31:03,588 --> 00:31:07,458
in how to do the result, what is the end result?

480
00:31:07,544 --> 00:31:11,074
You will definitely be successful in whatever you're doing. Keep that

481
00:31:11,112 --> 00:31:14,434
in mind. Don't do things just because somebody else

482
00:31:14,472 --> 00:31:18,214
is doing. Everybody's requirements is different. So depending on your

483
00:31:18,252 --> 00:31:21,446
application, depending on your customers, you have to choose what

484
00:31:21,468 --> 00:31:25,778
you want to do. So key takeaways from this session.

485
00:31:25,954 --> 00:31:30,006
The three important points we just talked about the evolution of application

486
00:31:30,108 --> 00:31:34,358
architecture itself, how things have moved from monolith to microservices to serverless,

487
00:31:34,454 --> 00:31:38,710
and all about kubernetes, some stats, some trends and benefits and challenges,

488
00:31:38,790 --> 00:31:41,878
and the monitoring needs and how and what are the things

489
00:31:41,904 --> 00:31:45,978
that you need to monitor. And PSi 24/7 itself is an aipowered

490
00:31:45,994 --> 00:31:49,630
full stack monitoring tool that can help you monitor your entire

491
00:31:49,780 --> 00:31:53,546
infrastructure from top to bottom, from your end user

492
00:31:53,578 --> 00:31:57,426
layer to your infrastructure layer, including the application and the platform

493
00:31:57,528 --> 00:32:01,426
layer. So I'll just finish off with this one quote. This is my

494
00:32:01,608 --> 00:32:05,006
favorite quote, one of my favorite quotes.

495
00:32:05,118 --> 00:32:08,526
This is called the Red Queen's quote and this comes

496
00:32:08,568 --> 00:32:10,710
in the book Alice in Wonderland.

497
00:32:11,690 --> 00:32:15,026
I did not read this book when I was a child, but I remember reading

498
00:32:15,058 --> 00:32:18,220
it for my children. So the quote goes like this,

499
00:32:18,670 --> 00:32:22,986
you have to be running as fast as you can in

500
00:32:23,008 --> 00:32:26,874
order to stay in the same place and

501
00:32:27,072 --> 00:32:30,206
if you want to make any progress, you have

502
00:32:30,228 --> 00:32:34,378
to run twice as fast as you can. This is generally applicable

503
00:32:34,474 --> 00:32:38,480
for individuals or for our business too.

504
00:32:38,930 --> 00:32:42,430
Most of the time we are living in this world

505
00:32:42,500 --> 00:32:45,890
where the technology is evolving in a very fast

506
00:32:45,960 --> 00:32:49,266
manner, so if we don't keep ourselves updated we will be

507
00:32:49,288 --> 00:32:52,462
outdated. So this is applicable for individuals

508
00:32:52,526 --> 00:32:56,242
as well as for business. So at Zoho at site 24/7

509
00:32:56,296 --> 00:33:00,006
we make sure that we adopt all the latest technologies and pass that

510
00:33:00,028 --> 00:33:03,894
benefit to customers. I'm sure as users you also would

511
00:33:03,932 --> 00:33:06,550
want to do that. Keep yourself updated.

512
00:33:08,410 --> 00:33:11,434
Thank you so much for your time. I hope I

513
00:33:11,472 --> 00:33:15,850
was able to give few tips on what you need to do in your container

514
00:33:16,190 --> 00:33:19,722
world. You can reach me in any of the social

515
00:33:19,776 --> 00:33:23,626
media platform or through email. And for anything related to

516
00:33:23,648 --> 00:33:27,006
the product you can write to either. You can write to me or to the

517
00:33:27,028 --> 00:33:31,146
support email Id that is available here. I didn't get into the product details.

518
00:33:31,258 --> 00:33:34,686
We will arrange an on one session and we can arrange for a

519
00:33:34,868 --> 00:33:38,766
demonstration if required. We do have a free version that is available and

520
00:33:38,788 --> 00:33:42,558
we do have what is that? Six months free subscriptions that

521
00:33:42,564 --> 00:33:45,654
are available for you to try it out and see. So feel free

522
00:33:45,692 --> 00:33:48,806
to reach out to us and enjoy the rest of the session in the

523
00:33:48,828 --> 00:33:50,820
event. Have a nice day. Thank you.

