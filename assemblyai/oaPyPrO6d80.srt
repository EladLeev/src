1
00:00:17,370 --> 00:00:21,290
Hello friends. I hope you are doing well and you're healthy

2
00:00:21,370 --> 00:00:25,346
and you're keeping safety. So I'm Abisheks

3
00:00:25,378 --> 00:00:28,710
Doshi and today's talk is on block or you can manage blocks

4
00:00:28,780 --> 00:00:32,534
of your app app with blocks. So first of all,

5
00:00:32,652 --> 00:00:36,466
who am I exactly? I am a Google developer

6
00:00:36,498 --> 00:00:40,122
expert for Dart and Flutter. I am also a Google

7
00:00:40,176 --> 00:00:44,262
mentor. So basically I mentor individuals

8
00:00:44,326 --> 00:00:48,214
as well as startups to migrate to flutter or learn flutter.

9
00:00:48,342 --> 00:00:51,834
I am also Flutter vulsar organizer, co organizer

10
00:00:51,882 --> 00:00:55,434
of Flutter India and I have been working in Flutter

11
00:00:55,482 --> 00:00:59,850
since almost past three years now and professionally

12
00:00:59,930 --> 00:01:03,194
I am a senior flutter engineer at Somnia

13
00:01:03,242 --> 00:01:06,622
Software. I've been writing event tech articles on Flutter

14
00:01:06,686 --> 00:01:09,730
since past six to one year,

15
00:01:09,800 --> 00:01:13,314
six months to one year now. So yeah, you can say

16
00:01:13,352 --> 00:01:15,910
that I'm suitable for taking this session.

17
00:01:16,890 --> 00:01:19,400
So what is flutter exactly?

18
00:01:19,770 --> 00:01:22,854
And why is it trending so much? So first of all,

19
00:01:22,892 --> 00:01:27,062
Flutter was released in around 2018 and

20
00:01:27,116 --> 00:01:30,630
it is developed by Google and it is a UI toolkit

21
00:01:30,710 --> 00:01:34,422
that supports multiple platforms like Android,

22
00:01:34,486 --> 00:01:37,574
iOS, Web, macOS, Windows, Fuchsia OS,

23
00:01:37,702 --> 00:01:40,906
Linux embedded systems,

24
00:01:41,018 --> 00:01:44,686
et cetera. And it is trending because one of

25
00:01:44,708 --> 00:01:48,574
the reason is it is open source and it has

26
00:01:48,612 --> 00:01:51,680
a large community support and it is easy to use.

27
00:01:52,470 --> 00:01:56,114
So coming to today's topic, what are the points

28
00:01:56,152 --> 00:01:59,634
for discussion then? So first we would see what is state,

29
00:01:59,752 --> 00:02:03,534
what is state management, why state management

30
00:02:03,582 --> 00:02:06,938
is needed, and if we need state management,

31
00:02:06,974 --> 00:02:10,866
then what is block exactly? And some terminologies related to block.

32
00:02:10,978 --> 00:02:14,038
And then if time permits we would be doing live coding or I

33
00:02:14,044 --> 00:02:18,022
would show you the code. So first

34
00:02:18,076 --> 00:02:21,354
of all, what is state? So in flutter, everything is

35
00:02:21,392 --> 00:02:24,934
widget. Widget, you can say is a smallest

36
00:02:24,982 --> 00:02:28,346
form of UI that you can show on the screen. If you

37
00:02:28,368 --> 00:02:32,106
are from web development background, you can compare widget as a tag.

38
00:02:32,218 --> 00:02:36,234
So in web development we have button as a tag. In flutter

39
00:02:36,282 --> 00:02:40,074
we have different kinds of buttons,

40
00:02:40,122 --> 00:02:43,710
has a widgets, raised button, elevated button, text button,

41
00:02:43,780 --> 00:02:47,662
et cetera. So in the same way, every widget

42
00:02:47,726 --> 00:02:51,342
would be having a state. Or you can say every widget has properties,

43
00:02:51,486 --> 00:02:54,914
or the properties of a widget considers to be a

44
00:02:54,952 --> 00:02:57,974
state. Now let's suppose you have a text field.

45
00:02:58,092 --> 00:03:01,654
So the text that you enter becomes the state of

46
00:03:01,692 --> 00:03:05,174
that particular text field. So every properties related to that

47
00:03:05,212 --> 00:03:08,934
widget becomes the state. And the state can

48
00:03:08,972 --> 00:03:12,938
be independent. The state can be dependent on one another.

49
00:03:13,104 --> 00:03:17,098
It is also possible to have a single state in the entire application.

50
00:03:17,264 --> 00:03:20,422
It is also possible to have a single state in a one particular

51
00:03:20,496 --> 00:03:24,510
widget or one particular file. Based on how you manage your state

52
00:03:24,580 --> 00:03:27,710
or based on how you lay out your UI.

53
00:03:28,050 --> 00:03:31,678
Also, it is possible to manipulate the state

54
00:03:31,844 --> 00:03:35,394
throughout the lifecycle. So yeah, when you're handling with

55
00:03:35,432 --> 00:03:38,180
state or when you are working with state,

56
00:03:38,710 --> 00:03:41,874
you should keep in mind that there are

57
00:03:41,912 --> 00:03:45,922
chances that you might face issues or

58
00:03:45,976 --> 00:03:49,590
your app can crash if the state is not managed properly.

59
00:03:51,210 --> 00:03:55,314
So what is the role of state then and how is it useful?

60
00:03:55,442 --> 00:03:59,434
So basically there are three points that we can consider for

61
00:03:59,472 --> 00:04:03,194
the state. That is, information about widget can

62
00:04:03,232 --> 00:04:06,554
rebuild UI whenever we need and gives control over

63
00:04:06,592 --> 00:04:10,974
the entire lifecycle of the widget. Now going deeper with

64
00:04:11,012 --> 00:04:14,990
the state object, we can access the information about

65
00:04:15,060 --> 00:04:18,622
that particular widget, or we can even access the information

66
00:04:18,756 --> 00:04:21,978
about the widgets, about the parent widget.

67
00:04:22,074 --> 00:04:25,646
So yeah, state is the information that can be read synchronously

68
00:04:25,758 --> 00:04:29,214
when the widget is built, it holds the properties of the widget.

69
00:04:29,262 --> 00:04:33,570
So as I said, state can be considered as the properties of the widget

70
00:04:34,310 --> 00:04:37,240
and we can access that properties with the state.

71
00:04:37,770 --> 00:04:41,266
So second point is it can rebuild UI

72
00:04:41,298 --> 00:04:44,962
whenever we need. So basically state object is responsible

73
00:04:45,026 --> 00:04:48,474
for rebuilding your UI. That's the reason we call set state.

74
00:04:48,672 --> 00:04:50,650
We have a set state method,

75
00:04:55,790 --> 00:04:59,862
we have a set state method that updates

76
00:04:59,926 --> 00:05:03,822
your UI or recalls or rebuilds your

77
00:05:03,876 --> 00:05:07,262
UI. And the third point is gives control over

78
00:05:07,316 --> 00:05:11,242
lifecycle. State can change during the lifetime of the widget.

79
00:05:11,306 --> 00:05:14,498
If you don't utilize it properly, you can

80
00:05:14,584 --> 00:05:17,682
have adverse effect on your app. Basically your app

81
00:05:17,736 --> 00:05:20,622
can crash, you can have memory,

82
00:05:20,686 --> 00:05:22,370
lets, et cetera, et cetera.

83
00:05:23,910 --> 00:05:26,454
So now what is state management then?

84
00:05:26,572 --> 00:05:30,690
Basically has the name suggests managing the state properly

85
00:05:30,770 --> 00:05:34,598
so that you don't face any issues in your app

86
00:05:34,764 --> 00:05:37,720
and you can rebuild your UI whenever you need.

87
00:05:39,770 --> 00:05:43,546
Then why state management? Why is it needed? Or why is

88
00:05:43,568 --> 00:05:46,810
it a really hot topic in flutter? So if data

89
00:05:46,880 --> 00:05:50,526
changes or new data is being added, then and only then the request to

90
00:05:50,548 --> 00:05:54,462
the server will be sent. So for example, let's suppose you

91
00:05:54,516 --> 00:05:58,506
want to update your UI

92
00:05:58,618 --> 00:06:03,214
when your API call is successful. So in

93
00:06:03,252 --> 00:06:06,814
this case data management will be important because let's

94
00:06:06,862 --> 00:06:10,354
say you call the API, it takes time to get the

95
00:06:10,392 --> 00:06:13,954
data and then you want to update the UI. Or let's say

96
00:06:14,152 --> 00:06:17,598
when the app is being hit, you want to show a loader so

97
00:06:17,624 --> 00:06:21,266
that the user gets to know that the API

98
00:06:21,298 --> 00:06:24,566
is being hit, the data is being fetched, and then you

99
00:06:24,588 --> 00:06:28,006
can update the UI. So in this case, state management is important.

100
00:06:28,108 --> 00:06:31,194
State management helps to centralize and make the

101
00:06:31,232 --> 00:06:35,274
maintenance of code very easy. Also improves the quality of code by

102
00:06:35,312 --> 00:06:39,114
reducing the code size and making it more readable as well.

103
00:06:39,312 --> 00:06:42,826
Let's take an example. Let's suppose that you have an

104
00:06:42,848 --> 00:06:45,982
application where there are only two screens, page one and page

105
00:06:46,036 --> 00:06:49,358
two. Now you want to pass data from page one to page two.

106
00:06:49,444 --> 00:06:52,906
It becomes very easy, right? You can pass it when you navigate

107
00:06:52,938 --> 00:06:56,618
to page two. But what if you have a screen? What if

108
00:06:56,644 --> 00:06:59,906
you have an app? These, there are five pages and you

109
00:06:59,928 --> 00:07:03,726
want to pass data from page one to page five. So you can't

110
00:07:03,758 --> 00:07:07,174
pass the data from page one to page two to three to four to five,

111
00:07:07,212 --> 00:07:10,466
right? You have to pass data from page one to directly

112
00:07:10,498 --> 00:07:13,938
to page five. So in these case, state management helps.

113
00:07:14,034 --> 00:07:18,294
State management basically will help you to allow excess

114
00:07:18,342 --> 00:07:20,780
of data wherever you want.

115
00:07:23,230 --> 00:07:27,066
So what is block then? Basically, state management can be

116
00:07:27,088 --> 00:07:31,130
implemented using many techniques. One is block

117
00:07:31,290 --> 00:07:34,826
provider Riverpod Redux Rxdart.

118
00:07:34,938 --> 00:07:38,670
Many such packages are available for implementing state

119
00:07:38,740 --> 00:07:42,850
management, and one of that is block. Basically block stands for business

120
00:07:42,920 --> 00:07:47,118
logic components. Block basically uses the concept of inherited widget.

121
00:07:47,214 --> 00:07:50,514
Not only block, but any state management package that

122
00:07:50,552 --> 00:07:54,318
you check will use inherited widget concept.

123
00:07:54,494 --> 00:07:58,294
We can implement blocks using stream and sync, but we

124
00:07:58,332 --> 00:08:02,066
already have a package called flutter, underscore block, which is a wrapper of stream

125
00:08:02,098 --> 00:08:02,950
and sync.

126
00:08:05,210 --> 00:08:08,730
So there are a few terminologies related to block,

127
00:08:09,310 --> 00:08:12,934
which is event, state block provider, block builder,

128
00:08:12,982 --> 00:08:16,938
blocks listener and block consumer. We'd go through them one by one.

129
00:08:17,104 --> 00:08:19,878
So first is event.

130
00:08:20,064 --> 00:08:23,726
Now what exactly do you mean by event? Event you

131
00:08:23,748 --> 00:08:27,600
can say is a class or

132
00:08:28,130 --> 00:08:32,222
a trigger that you pass through the block and

133
00:08:32,276 --> 00:08:35,966
based on that block manages the data. So let's

134
00:08:35,998 --> 00:08:40,194
suppose you are having a login functionality, Google sign

135
00:08:40,232 --> 00:08:43,586
in, let's say. So what your app would be

136
00:08:43,608 --> 00:08:47,154
doing is on the UI part, it adds an event or

137
00:08:47,192 --> 00:08:51,126
sends an event to the block. Let's suppose the name of the event is

138
00:08:51,148 --> 00:08:54,722
Google sign. In event it sends the event to the blocks,

139
00:08:54,866 --> 00:08:58,954
blocks matches that event or takes that event. And from

140
00:08:58,992 --> 00:09:02,860
that basically you can also pass parameters like

141
00:09:03,550 --> 00:09:07,066
any user id, email id, et cetera, et cetera to the

142
00:09:07,088 --> 00:09:10,894
event. So block would take that parameters, it would

143
00:09:10,932 --> 00:09:14,094
process that parameters, or it would process based

144
00:09:14,132 --> 00:09:17,678
on that data, maybe an API call

145
00:09:17,764 --> 00:09:21,934
or anything that you want. And once

146
00:09:21,972 --> 00:09:25,634
the process has been successfully completed, it would send

147
00:09:25,672 --> 00:09:28,990
a successful state to the UI, back to the UI.

148
00:09:29,070 --> 00:09:31,780
If it fails, it will send a failure state.

149
00:09:32,710 --> 00:09:36,610
So to summarize, we can say that event is something

150
00:09:36,680 --> 00:09:40,246
that you send from UI to block, and state is something that

151
00:09:40,268 --> 00:09:42,870
you send from block to UI.

152
00:09:43,290 --> 00:09:46,838
Now what is block provider. Then basically blocks provider is a

153
00:09:46,844 --> 00:09:50,582
widget that provides the instance of your blocks to the widget

154
00:09:50,646 --> 00:09:54,326
tree. Now the normal practice is to wrap

155
00:09:54,358 --> 00:09:57,882
the material app that is the root of our widget root of our

156
00:09:57,936 --> 00:10:01,766
application with the block provider and provide the blocks

157
00:10:01,798 --> 00:10:05,502
to the entire widgets tree. But this would create a single state for the entire

158
00:10:05,556 --> 00:10:09,034
widget tree. Now if you want to have multiple instances

159
00:10:09,082 --> 00:10:13,150
of the same block, it would be good to wrap the page root

160
00:10:13,230 --> 00:10:17,022
root of the page with block provider. Next is block

161
00:10:17,086 --> 00:10:20,882
builder. Basically block builder is responsible for

162
00:10:20,936 --> 00:10:24,782
rebuilding your UI. Block builder is a widget that

163
00:10:24,936 --> 00:10:28,530
matches state and rebuilds these UI

164
00:10:28,610 --> 00:10:32,134
based on the state that is available from the

165
00:10:32,172 --> 00:10:36,822
block. Block listener is something same

166
00:10:36,876 --> 00:10:40,562
to block builder, but it doesn't rebuild your UI,

167
00:10:40,626 --> 00:10:44,214
it just listens to states and performs some action. So let's suppose

168
00:10:44,262 --> 00:10:47,722
you want to navigate to a page. Navigate to home page. When Google

169
00:10:47,776 --> 00:10:52,006
sign in is successful then you would use block listener because you're not rebuilding

170
00:10:52,038 --> 00:10:56,094
your UI, you are navigating to a different page. But let's suppose you

171
00:10:56,132 --> 00:10:59,406
want to rebuild your UI. You want to show something

172
00:10:59,588 --> 00:11:02,970
different on your UI based on success rate of the

173
00:11:02,980 --> 00:11:06,238
Google sign in, then you would be using block builder.

174
00:11:06,414 --> 00:11:09,854
Now what is block consumer then? Basically block consumer

175
00:11:09,902 --> 00:11:12,910
is block builder plus blocks listener.

176
00:11:13,070 --> 00:11:16,334
Block builder, the combination of block builder and block listener.

177
00:11:16,382 --> 00:11:19,846
Basically when you need to use both, when you want

178
00:11:19,868 --> 00:11:23,906
to process some data on the UI part as well as rebuild your UI,

179
00:11:24,018 --> 00:11:27,510
it is preferable to use block consumer.

180
00:11:27,850 --> 00:11:31,354
So I hope these terminologies are clear because these are

181
00:11:31,392 --> 00:11:34,060
the base of blocks, you can say.

182
00:11:34,990 --> 00:11:38,634
So yeah, enough of talk. Now let's check

183
00:11:38,672 --> 00:11:43,014
some work these. So basically whenever

184
00:11:43,062 --> 00:11:47,254
we create an application, our first,

185
00:11:47,392 --> 00:11:51,822
or you can say our basic app

186
00:11:51,876 --> 00:11:56,020
that we have is counter application.

187
00:11:56,870 --> 00:12:00,178
So what we are doing right now is

188
00:12:00,344 --> 00:12:04,334
to have the counter application to update

189
00:12:04,382 --> 00:12:07,190
the counter application into block.

190
00:12:11,020 --> 00:12:14,216
So I hope the vs code is visible and

191
00:12:14,398 --> 00:12:17,130
let me zoom a bit.

192
00:12:18,700 --> 00:12:19,450
Yeah,

193
00:12:21,680 --> 00:12:25,624
okay, so there is one class called main dart

194
00:12:25,672 --> 00:12:29,276
which just provides my home page.

195
00:12:29,378 --> 00:12:33,184
So you can see here we have the block provider and I have

196
00:12:33,222 --> 00:12:36,416
provided the counter blocks to my home page. Now what

197
00:12:36,438 --> 00:12:40,384
is inside the counterblock? So what

198
00:12:40,422 --> 00:12:43,904
counterblock does is it

199
00:12:44,022 --> 00:12:47,680
maps the event to state. This is the older version of block.

200
00:12:47,840 --> 00:12:51,876
The newer version has very simple code. But yeah, basically the

201
00:12:51,898 --> 00:12:55,300
concept remains same. It maps the event to state.

202
00:12:55,450 --> 00:12:58,628
So if event is counterevent increment,

203
00:12:58,804 --> 00:13:02,810
then yield the state with an incremented value.

204
00:13:06,540 --> 00:13:11,036
So what is the event then? Basically it's just an NM where

205
00:13:11,218 --> 00:13:14,396
we have added an increment part. Now in

206
00:13:14,418 --> 00:13:17,756
the home part you can see I have created a

207
00:13:17,778 --> 00:13:22,076
variable for counter blocks and

208
00:13:22,178 --> 00:13:25,810
inside the build method I have initialized it.

209
00:13:26,500 --> 00:13:30,192
This can be done even in your init state as well.

210
00:13:30,326 --> 00:13:34,130
Basically we are providing the instance of blocks from the parent

211
00:13:34,600 --> 00:13:36,180
to this variable.

212
00:13:38,520 --> 00:13:42,084
Now the code is pretty simple. You can see just 43

213
00:13:42,122 --> 00:13:44,996
lines of code with all the formatting and stuff.

214
00:13:45,178 --> 00:13:49,192
So the scaffold and everything remains same.

215
00:13:49,326 --> 00:13:53,064
What I have done here is in the body part I have

216
00:13:53,102 --> 00:13:57,032
added a block builder and in that return

217
00:13:57,086 --> 00:14:00,936
a text widget which displays the state. Now the state is

218
00:14:00,958 --> 00:14:04,396
just an integer value over here, but we can have multiple states

219
00:14:04,498 --> 00:14:08,684
based on our use case. Now when the user clicks on

220
00:14:08,882 --> 00:14:12,760
the button, the floating action button, a counterblock

221
00:14:12,840 --> 00:14:16,272
event is being added over here. So you can see in the entire

222
00:14:16,326 --> 00:14:20,000
application set, state is not used, which means that

223
00:14:20,150 --> 00:14:23,680
I am not rebuilding the UI using setstate.

224
00:14:24,260 --> 00:14:28,032
So I hope the code looks good and it's

225
00:14:28,096 --> 00:14:29,270
pretty simple.

226
00:14:32,360 --> 00:14:36,148
I guess the code is very simple

227
00:14:36,234 --> 00:14:39,720
for the counter blocks. But yeah, when your application goes

228
00:14:39,790 --> 00:14:43,304
in bigger size it is possible that you would get

229
00:14:43,342 --> 00:14:47,480
confused with all the blocks, elements, event, state, et cetera, et cetera.

230
00:14:51,920 --> 00:14:56,924
Basically that was it. But the

231
00:14:57,042 --> 00:15:00,908
work that we have, you can see you saw that

232
00:15:00,994 --> 00:15:05,020
the code was very less to just update

233
00:15:05,100 --> 00:15:10,144
these counter application with

234
00:15:10,182 --> 00:15:14,370
the block part. So yeah,

235
00:15:14,840 --> 00:15:18,148
if you have any questions, feel free to ask.

236
00:15:18,314 --> 00:15:22,468
I hope you learned something new and

237
00:15:22,634 --> 00:15:25,904
feel free to connect with me on Instagram, Twitter,

238
00:15:25,952 --> 00:15:30,176
LinkedIn, GitHub, Medium, et cetera.

239
00:15:30,368 --> 00:15:34,650
And the username remains same, that is Abisheks Doshi 26.

240
00:15:35,580 --> 00:15:39,064
Yeah, you can read my articles on medium and

241
00:15:39,102 --> 00:15:42,712
these also username remains same Abisheks Doshi 26 so

242
00:15:42,766 --> 00:15:46,184
you can go abhishek Doshi 26 medium.com

243
00:15:46,302 --> 00:15:49,240
for my medium articles, I guess.

244
00:15:49,310 --> 00:15:53,020
Thank you so much for joining today's session

245
00:15:53,180 --> 00:15:56,624
and I hope you learned something and I hope that you

246
00:15:56,662 --> 00:16:00,176
stay safe and maybe migrate to flutter as

247
00:16:00,198 --> 00:16:01,390
well. Thank you so much.

