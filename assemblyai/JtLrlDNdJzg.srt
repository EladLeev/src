1
00:00:00,330 --> 00:00:03,454
Hi everybody, thanks for coming. I'm very

2
00:00:03,492 --> 00:00:06,974
excited to be here. The title of my talk

3
00:00:07,012 --> 00:00:09,950
is postmortem culture learning from failure.

4
00:00:10,690 --> 00:00:14,110
Nice to meet you. I am jodinignino. I work

5
00:00:14,180 --> 00:00:17,550
as DevOps engineer for Awa Digital Labs, a company

6
00:00:17,620 --> 00:00:21,326
in Colombia that provides technology and innovation service for

7
00:00:21,348 --> 00:00:24,966
our banking group. And also I am

8
00:00:25,108 --> 00:00:28,578
engineering advocate in my country. There are photos

9
00:00:28,674 --> 00:00:30,760
of my coworkers and my company.

10
00:00:33,050 --> 00:00:36,534
And before starting, I would

11
00:00:36,572 --> 00:00:40,822
like to tell you about my hometown,

12
00:00:40,886 --> 00:00:44,742
Garagoa. I am from Garagua. Garagoa is a town located

13
00:00:44,806 --> 00:00:48,810
in the Bojaka department in Colombia. And Garagua

14
00:00:49,890 --> 00:00:54,766
means behind the healing Chipcha language and it

15
00:00:54,788 --> 00:00:58,714
is a town located in Bojaka department in Colombia.

16
00:00:58,842 --> 00:01:02,250
Since I can remember each December 16

17
00:01:02,410 --> 00:01:06,494
people in Garagoa celebrates the end of the year with a postmortem.

18
00:01:06,622 --> 00:01:10,222
So the postmortem is called the death

19
00:01:10,286 --> 00:01:13,554
of the sadness. And in this ceremony, people evaluate their

20
00:01:13,592 --> 00:01:17,094
actions in the last year and make resolutions for the

21
00:01:17,132 --> 00:01:20,726
new year. So this celebration made

22
00:01:20,748 --> 00:01:24,438
me wonder if we are doing postmortems in our life,

23
00:01:24,524 --> 00:01:27,942
in our daily life, why software engineers don't

24
00:01:28,006 --> 00:01:32,102
practice postmortems after an incident. According to the survey

25
00:01:32,166 --> 00:01:35,766
applied to 45 engineers

26
00:01:35,878 --> 00:01:39,770
in my country, software engineering don't practicing

27
00:01:40,130 --> 00:01:42,400
postmortems. In this case, for example,

28
00:01:43,090 --> 00:01:46,462
just 40% of them read

29
00:01:46,516 --> 00:01:50,254
a postmortem and 60% of them

30
00:01:50,372 --> 00:01:54,130
don't practice postmortems in their jobs.

31
00:01:54,710 --> 00:01:58,354
So knowing there is a problem, in the next 15

32
00:01:58,472 --> 00:02:02,820
minutes I am going to talk about postmortems. I am going to try to explain

33
00:02:03,430 --> 00:02:06,486
why we don't write postmortem culture.

34
00:02:06,588 --> 00:02:09,906
I will explain why we can use chaos engineering,

35
00:02:09,938 --> 00:02:13,670
a chaos game days in order to promote this practice

36
00:02:14,490 --> 00:02:18,940
in companies. And finally, I am sharing our

37
00:02:19,390 --> 00:02:23,674
journey in my company, trying to implement this

38
00:02:23,712 --> 00:02:27,462
practice in our daily life and trying to promote

39
00:02:27,526 --> 00:02:30,490
chaos engineering in our jobs.

40
00:02:31,330 --> 00:02:35,246
So let me start with some definitions about what

41
00:02:35,268 --> 00:02:39,418
is a postmortem. Postmortem. According to the site reliability

42
00:02:39,514 --> 00:02:43,358
engineering. If you remember the book of Google,

43
00:02:43,524 --> 00:02:47,186
a postmortem is a

44
00:02:47,208 --> 00:02:51,810
written record with the details that

45
00:02:51,880 --> 00:02:55,830
happened after an incident. And according Pedro Daddy,

46
00:02:56,810 --> 00:03:00,690
a postmortem is a register

47
00:03:00,770 --> 00:03:03,970
of what happened after the postmortem.

48
00:03:04,130 --> 00:03:08,314
However, there is a definition I like more that is an

49
00:03:08,352 --> 00:03:11,930
answer for these two questions and what

50
00:03:12,000 --> 00:03:14,860
went wrong and how do we learn from it.

51
00:03:15,630 --> 00:03:19,530
So probably you remember these two postmortem culture. First one,

52
00:03:19,600 --> 00:03:23,102
written by GitLab documented an incident in which

53
00:03:23,156 --> 00:03:26,666
an engineer drop a database in production.

54
00:03:26,778 --> 00:03:30,286
So it lets us several hour outages and the

55
00:03:30,308 --> 00:03:33,906
second one details one of

56
00:03:33,928 --> 00:03:37,726
the most critical outages in AWS in February

57
00:03:37,918 --> 00:03:41,758
2017. And this document

58
00:03:41,854 --> 00:03:45,570
explained how they overcome a failure

59
00:03:45,650 --> 00:03:47,890
in the s three service in Virginia.

60
00:03:48,050 --> 00:03:51,750
And it has a huge impact

61
00:03:52,730 --> 00:03:56,310
in many websites. So if the companies

62
00:03:56,460 --> 00:04:00,694
such AWS and GitLab are practicing

63
00:04:00,742 --> 00:04:03,820
postmortems, why we don't do it?

64
00:04:04,270 --> 00:04:08,550
So according to the same survey, the most common persons

65
00:04:08,630 --> 00:04:12,480
include ignorance and culture. According this,

66
00:04:13,330 --> 00:04:16,574
55% of people said that they

67
00:04:16,612 --> 00:04:20,622
don't know what is a postmortem and a second group think

68
00:04:20,676 --> 00:04:24,838
that writing postmortem is an activity for DevOps engineer

69
00:04:24,874 --> 00:04:29,326
and operations engineers. But if they are software developers,

70
00:04:29,518 --> 00:04:33,460
why to write postmortems? So this

71
00:04:34,230 --> 00:04:37,750
answers was studied by

72
00:04:37,820 --> 00:04:41,718
Adrian Hosky and John Osbo, who concluded that the

73
00:04:41,804 --> 00:04:45,730
lack of accountability is related

74
00:04:45,810 --> 00:04:50,170
with a blameful culture. So John Osbo

75
00:04:50,670 --> 00:04:53,610
analyzed the five y methods,

76
00:04:54,430 --> 00:04:58,678
one of the most famous techniques to write postmortems.

77
00:04:58,774 --> 00:05:02,974
According to his work, this technique is

78
00:05:03,012 --> 00:05:07,146
not a proper way to promote a blameless culture.

79
00:05:07,258 --> 00:05:10,990
Asking why conduct? To answer another question,

80
00:05:11,140 --> 00:05:15,138
the question is who? No why? Which is almost

81
00:05:15,224 --> 00:05:18,466
every case is irrelevant. It is common to

82
00:05:18,488 --> 00:05:22,034
find postmortem culture conclude with

83
00:05:22,072 --> 00:05:25,494
root causes like this in which a human is

84
00:05:25,532 --> 00:05:28,310
tagged and blamed for the incident.

85
00:05:30,010 --> 00:05:33,554
Now we know that there is a culture

86
00:05:33,602 --> 00:05:37,510
of blaming and how can we change it? How can we

87
00:05:37,660 --> 00:05:41,350
pass from these sentences to a

88
00:05:41,420 --> 00:05:44,890
culture where the failure is promoted?

89
00:05:45,790 --> 00:05:49,094
Our proposal is with chaos engineering. Chaos engineering

90
00:05:49,142 --> 00:05:52,742
is the discipline of practicing or injecting

91
00:05:52,806 --> 00:05:56,686
failures on production in order to reveal the winners in

92
00:05:56,708 --> 00:06:00,638
the systems. This definition is available in the website

93
00:06:00,724 --> 00:06:04,174
of principles of chaos and with a Chaos

94
00:06:04,222 --> 00:06:07,714
game day. Chaos game day. They are an

95
00:06:07,752 --> 00:06:10,894
easy way to introduce

96
00:06:10,942 --> 00:06:15,186
engineering teams to this practice. So in

97
00:06:15,208 --> 00:06:18,626
this exercise we have three roles, a master of

98
00:06:18,648 --> 00:06:22,198
disaster, first on call person and the team

99
00:06:22,284 --> 00:06:25,554
the engineering team. In this exercise, a master

100
00:06:25,602 --> 00:06:29,258
of disaster decides, often in secret, what sort of

101
00:06:29,264 --> 00:06:32,586
failure the system should undergo. With the

102
00:06:32,608 --> 00:06:36,150
team guided in one room, physical or virtual,

103
00:06:36,230 --> 00:06:39,414
the master of disaster declares a start of the incident

104
00:06:39,542 --> 00:06:42,190
and start the attack.

105
00:06:42,340 --> 00:06:46,574
And one member of the team who

106
00:06:46,692 --> 00:06:50,190
ask a person

107
00:06:50,260 --> 00:06:54,122
called person try to see, triage and mitigate

108
00:06:54,186 --> 00:06:58,058
whatever the failure that a master of disaster has caused

109
00:06:58,234 --> 00:07:01,582
easily. After that, the idea

110
00:07:01,636 --> 00:07:05,720
is the team analyze and understand the

111
00:07:06,170 --> 00:07:10,038
failure and provide a solution for them. And they even finish

112
00:07:10,124 --> 00:07:14,166
when the team write a postmortem that

113
00:07:14,188 --> 00:07:17,930
is a Chaos game day. So what it does means

114
00:07:18,000 --> 00:07:21,958
in the practice, what are the activities involved

115
00:07:22,054 --> 00:07:26,262
in this? Planning a game day involves

116
00:07:26,326 --> 00:07:30,278
a lot of work because if we are planning

117
00:07:30,374 --> 00:07:33,530
this event, probably we have to create an agenda.

118
00:07:33,610 --> 00:07:37,006
We have to define what are the events involved in

119
00:07:37,028 --> 00:07:40,202
them. So after that we have to define the users,

120
00:07:40,266 --> 00:07:44,162
define who is the master of disaster, who is the first

121
00:07:44,216 --> 00:07:47,522
on call person and who are part

122
00:07:47,656 --> 00:07:51,682
of the team. And in a third activity, the idea

123
00:07:51,736 --> 00:07:54,974
is to send communications in order to keep contact with

124
00:07:55,032 --> 00:07:58,726
the people involved in the event. And after that we

125
00:07:58,748 --> 00:08:02,482
have to design the experiment, because chaos

126
00:08:02,546 --> 00:08:06,370
engineering follow a scientific

127
00:08:06,450 --> 00:08:10,310
method. So the next activity is design the experiment.

128
00:08:10,390 --> 00:08:13,398
And finally, we have to provision hardware,

129
00:08:13,494 --> 00:08:16,314
software, chaos attackers, chaos agents,

130
00:08:16,432 --> 00:08:19,750
for example, chaos Toolkit or Gremlin

131
00:08:19,830 --> 00:08:23,070
in this part. And finally, we have to provide an observability

132
00:08:23,490 --> 00:08:27,434
tool, because we need to have a vision of what's

133
00:08:27,482 --> 00:08:31,674
happening during the year. So although Gremlin

134
00:08:31,802 --> 00:08:35,230
and Chaos IQ have done a great work generating

135
00:08:37,430 --> 00:08:41,522
and contributions, tutorials, documents, experience for

136
00:08:41,576 --> 00:08:45,294
doing chaos game days, the reality is that planning

137
00:08:45,342 --> 00:08:47,810
a chaos game day is an activity,

138
00:08:48,150 --> 00:08:52,578
takes a long context. On average, a person spends

139
00:08:52,674 --> 00:08:55,974
90 days planning a game day.

140
00:08:56,172 --> 00:08:59,654
So probably we don't have

141
00:08:59,772 --> 00:09:03,446
time to have a lunch. That is

142
00:09:03,468 --> 00:09:07,174
it. So in order to reduce these times in digital

143
00:09:07,222 --> 00:09:10,602
labs, in my company, we designed a tool

144
00:09:10,656 --> 00:09:14,346
to reduce these times and we are working in the implementation.

145
00:09:14,458 --> 00:09:18,906
So it is a view of Gabeta. Gabeta means in english toolbox.

146
00:09:19,018 --> 00:09:23,454
So it is a view that includes four layers with

147
00:09:23,652 --> 00:09:27,970
activities, separates for them. And in the first layer we have

148
00:09:28,120 --> 00:09:32,414
the roles and the users involved. In the event, we have the master of disaster,

149
00:09:32,462 --> 00:09:35,854
the persons called person, and the team who are accessing

150
00:09:35,902 --> 00:09:40,018
to Gabeta, probably using a web browser

151
00:09:40,194 --> 00:09:43,654
or a mobile device. Why a mobile device? Because the

152
00:09:43,692 --> 00:09:47,814
chaos game days are exercise in which people is relaxed and

153
00:09:47,852 --> 00:09:52,082
with food, music. So probably some activities

154
00:09:52,146 --> 00:09:55,386
of deep is easier with

155
00:09:55,408 --> 00:09:59,014
a mobile. So these persons are accessing

156
00:09:59,062 --> 00:10:02,102
to Gabeta to the core gaweta. In the second layer,

157
00:10:02,246 --> 00:10:06,522
Gaweta is implemented with Go and it is using terraform

158
00:10:06,586 --> 00:10:10,574
in order to provision the infrastructure required to

159
00:10:10,612 --> 00:10:15,550
the event. So in the third layer, we have five

160
00:10:15,700 --> 00:10:19,300
layers for managing the Chaos game day. If you remember,

161
00:10:19,990 --> 00:10:23,646
we have activities for planning these events.

162
00:10:23,758 --> 00:10:27,022
So in this case we have a planner in order

163
00:10:27,096 --> 00:10:31,110
to have a tool to plan the event. So the idea

164
00:10:31,180 --> 00:10:34,486
is to have the possibility to use different tools in

165
00:10:34,508 --> 00:10:38,250
this case. So in this case, I are using Google

166
00:10:38,320 --> 00:10:42,074
calendar. But if you want to use another tool, it is

167
00:10:42,112 --> 00:10:46,506
possible. So in the second supplier we

168
00:10:46,528 --> 00:10:49,834
have tools to send communications. For example, you can

169
00:10:49,872 --> 00:10:53,562
use a slack or push notification for the mobile devices.

170
00:10:53,706 --> 00:10:57,146
So in a terror supplier we have a terraform.

171
00:10:57,258 --> 00:11:00,602
Terraform has the responsibility to provision

172
00:11:00,666 --> 00:11:03,922
the infrastructure required for the event. So in this case,

173
00:11:03,976 --> 00:11:06,974
probably we need a cloud provider,

174
00:11:07,022 --> 00:11:10,594
for example AWS or GCP. We need

175
00:11:10,632 --> 00:11:14,622
a chaos agent. In this case we are using Gremlin or chaos

176
00:11:14,686 --> 00:11:18,662
toolkit anyway. And finally we need an observability tool.

177
00:11:18,716 --> 00:11:21,954
In this case we are using datadoc

178
00:11:22,002 --> 00:11:25,106
but you can use new relic

179
00:11:25,138 --> 00:11:29,242
or any others. So finally we

180
00:11:29,296 --> 00:11:34,534
need two tools in order to provide infrastructure

181
00:11:34,582 --> 00:11:37,818
to write a postmortem and document the actions in

182
00:11:37,824 --> 00:11:41,486
the next steps because the idea is to provide in

183
00:11:41,508 --> 00:11:45,022
this case with Jira, provide tickets or

184
00:11:45,076 --> 00:11:48,442
user stories in order to avoid a similar incident

185
00:11:48,506 --> 00:11:51,840
in the future. So finally we have the system.

186
00:11:52,470 --> 00:11:56,194
So probably you remember this kind

187
00:11:56,232 --> 00:11:57,650
of architectures.

188
00:11:59,270 --> 00:12:04,194
Gaweta at this moment is using this architecture for

189
00:12:04,232 --> 00:12:08,310
provide the features mentioned and in the last slide. So in this case

190
00:12:08,380 --> 00:12:11,670
we are using a hexagonal architecture.

191
00:12:12,250 --> 00:12:16,258
The hexagonal architectures use three concepts,

192
00:12:16,354 --> 00:12:20,662
the core domain in the center of the hexagon and adapters

193
00:12:20,726 --> 00:12:25,062
and ports in order to communicate the external work with the internal

194
00:12:25,126 --> 00:12:28,970
core. So it is a view of Gabeta

195
00:12:29,550 --> 00:12:32,894
using this architecture. In this case we have

196
00:12:32,932 --> 00:12:37,290
in the core handlers in order to manage the activities

197
00:12:37,370 --> 00:12:41,294
involved in the Chaos game day. So in this case we are using

198
00:12:41,492 --> 00:12:45,394
a handler for plan the event and

199
00:12:45,432 --> 00:12:49,746
I am using another handler to manage the

200
00:12:49,768 --> 00:12:53,134
communicator in order to send communications and reminders

201
00:12:53,182 --> 00:12:57,478
to the participants. And I have a handler to manage

202
00:12:57,644 --> 00:13:01,286
terraform in order to provision the infrastructure required for this.

203
00:13:01,388 --> 00:13:05,494
And finally we are using two

204
00:13:05,532 --> 00:13:09,482
handlers to document and register in the backlog. The next

205
00:13:09,536 --> 00:13:14,090
action, the responsibility of Gabeta orchestrates

206
00:13:15,310 --> 00:13:19,130
these handlers and we are using another

207
00:13:19,200 --> 00:13:22,574
concept, the adapters, in order to have the possibility to

208
00:13:22,612 --> 00:13:26,330
implement these interfaces using different technologies.

209
00:13:26,410 --> 00:13:30,058
So in this case, for example, we are using Google suite

210
00:13:30,234 --> 00:13:33,650
for planning the event. But if you can use,

211
00:13:33,800 --> 00:13:37,314
I don't know, outlook or any other tool that is

212
00:13:37,352 --> 00:13:40,834
possible using this concept adapters and

213
00:13:40,872 --> 00:13:44,866
interface and using a core with the

214
00:13:44,888 --> 00:13:47,720
responsibility to orchestrate them.

215
00:13:48,410 --> 00:13:53,206
So let

216
00:13:53,228 --> 00:13:57,830
me show a video with the mockups for Gaweta.

217
00:13:58,830 --> 00:14:07,334
So I think that it's

218
00:14:07,382 --> 00:14:12,126
possible to see the yeah,

219
00:14:12,228 --> 00:14:16,186
in this case I am using the master of disaster credentials

220
00:14:16,218 --> 00:14:19,680
to access Gaeta. Gaweta at this moment is

221
00:14:20,210 --> 00:14:23,806
a web application, provides the functionalities as

222
00:14:23,828 --> 00:14:27,406
a service. So the first thing probably you want

223
00:14:27,428 --> 00:14:30,862
to do in Gaeta is define what are the adapters.

224
00:14:30,926 --> 00:14:34,974
In this case, for example, we are using Google suite for

225
00:14:35,032 --> 00:14:38,374
planning the event and

226
00:14:38,492 --> 00:14:42,210
we are using slack for sending communications.

227
00:14:42,370 --> 00:14:46,006
But as I mentioned, it is possible to use

228
00:14:46,108 --> 00:14:50,022
another tool if you are providing an implementation

229
00:14:50,086 --> 00:14:53,530
for the interface in this case. So we are using terraform

230
00:14:54,270 --> 00:14:57,498
and the concept related with infrastructure as a code in

231
00:14:57,504 --> 00:15:00,858
order to provision the tools required

232
00:15:00,954 --> 00:15:04,922
to run the event. And finally we are using confluence

233
00:15:04,986 --> 00:15:08,446
and Jira for documenting and providing the

234
00:15:08,468 --> 00:15:11,934
next steps after the Chaos game

235
00:15:11,972 --> 00:15:16,750
they finish. So now

236
00:15:16,820 --> 00:15:20,994
we have a view of the home page for

237
00:15:21,032 --> 00:15:24,594
a master of disaster who is planning the event. So in this

238
00:15:24,632 --> 00:15:28,406
case gawa in the top bar we have four options

239
00:15:28,508 --> 00:15:32,646
to manage the event. So we have a first option to plan

240
00:15:32,828 --> 00:15:36,566
the event. What does it mean

241
00:15:36,748 --> 00:15:39,210
that we have to define the agenda?

242
00:15:40,270 --> 00:15:45,306
We have to define the agenda. Probably this text in

243
00:15:45,328 --> 00:15:49,254
this text field will be transformed by Gaweta in activities

244
00:15:49,382 --> 00:15:53,134
in Google Calendar for example. In a second part we have the

245
00:15:53,172 --> 00:15:57,002
possibility to define who is the master of disaster,

246
00:15:57,066 --> 00:16:00,858
who is the users and who is the persons called. We have to define

247
00:16:00,874 --> 00:16:04,498
the users before because we have to send communications or

248
00:16:04,504 --> 00:16:09,794
to send reminders to the participants before

249
00:16:09,912 --> 00:16:13,394
the chaos game day start. So in a

250
00:16:13,432 --> 00:16:17,154
second option we have the possibility to define

251
00:16:17,202 --> 00:16:20,614
or to provision the infrastructure required to run the Chaos game

252
00:16:20,652 --> 00:16:24,898
day. So in this case we are uploading a terraform

253
00:16:25,074 --> 00:16:29,030
file because terraform offers the possibility to define

254
00:16:29,530 --> 00:16:34,002
using the concept providers in terraform define

255
00:16:34,066 --> 00:16:37,274
what are the cloud providers. If we are

256
00:16:37,312 --> 00:16:41,530
using for example AWS, we have to define a TF file

257
00:16:41,610 --> 00:16:45,646
for terraform with this definition. So in

258
00:16:45,668 --> 00:16:49,162
this case the file allows to define

259
00:16:49,226 --> 00:16:51,950
for example if you are using AWS,

260
00:16:52,390 --> 00:16:55,970
datadoc and gremlin for attack the application.

261
00:16:56,120 --> 00:16:59,906
So in that option we have the possibility to create

262
00:17:00,088 --> 00:17:03,202
or design the experiment. Remember that

263
00:17:03,256 --> 00:17:08,694
the intention in the chaos game day is to

264
00:17:08,732 --> 00:17:13,458
design the experiment. So in this case I am registered

265
00:17:13,634 --> 00:17:16,694
the application name, the observability tool,

266
00:17:16,892 --> 00:17:21,482
the hypothesis for the experiment and

267
00:17:21,536 --> 00:17:25,420
in this case for example I am trying to test if

268
00:17:27,310 --> 00:17:31,750
the histrix configuration and the sequel breaker pattern

269
00:17:31,830 --> 00:17:35,214
works in this architecture. So in the

270
00:17:35,252 --> 00:17:38,480
next option we have the possibility to chaos

271
00:17:39,010 --> 00:17:43,040
any attack in this case

272
00:17:43,350 --> 00:17:46,946
during these ten minutes. And finally

273
00:17:47,128 --> 00:17:50,702
we have the possibility to define what is the blast

274
00:17:50,766 --> 00:17:54,420
radius. And also we have the possibility to add

275
00:17:54,810 --> 00:17:58,726
some notes and the idea is when the experiment is

276
00:17:58,908 --> 00:18:02,360
defined, launch the attack during the event.

277
00:18:03,770 --> 00:18:06,360
And in a final option,

278
00:18:09,450 --> 00:18:14,300
in a final option we have the possibility to see

279
00:18:14,670 --> 00:18:18,746
the postmortem and the actions provided by your team during the

280
00:18:18,768 --> 00:18:23,120
event. So yeah,

281
00:18:24,930 --> 00:18:28,400
that is so slow. Did you click on that?

282
00:18:29,730 --> 00:18:32,754
Probably yeah. That is

283
00:18:32,792 --> 00:18:36,174
a view of a postmortem

284
00:18:36,222 --> 00:18:39,746
provided by Gaweta and it is a post mortem prepilled by

285
00:18:39,768 --> 00:18:44,194
Gaweta and that is the responsibility to the team to

286
00:18:44,232 --> 00:18:48,534
complete them. But that is an example of Gaweta could

287
00:18:48,732 --> 00:18:52,806
do by the team providing a template of

288
00:18:52,828 --> 00:18:56,674
a postmortem inspiring in this case with the KSIQ

289
00:18:56,802 --> 00:18:58,810
template for postmortems.

290
00:19:00,430 --> 00:19:04,186
So, to close, I would

291
00:19:04,208 --> 00:19:07,942
like to share the conclusions of signire

292
00:19:08,086 --> 00:19:11,502
is the author of this classical book, a really

293
00:19:11,556 --> 00:19:15,770
good book. So the field guide to understanding

294
00:19:15,850 --> 00:19:19,706
human error. And Sidney

295
00:19:19,738 --> 00:19:23,118
Decker told us to see the world with a different

296
00:19:23,204 --> 00:19:26,334
view in which the human are not the cause of

297
00:19:26,372 --> 00:19:30,014
the problems. If something goes wrong and

298
00:19:30,052 --> 00:19:34,046
a human is involved, it is a symptom of a

299
00:19:34,068 --> 00:19:37,654
deeper trouble. Notice a cause of them. So that

300
00:19:37,692 --> 00:19:40,710
is all. Thanks for coming. Thanks for listening.

301
00:19:41,850 --> 00:19:45,302
They are my social networks if you want to

302
00:19:45,356 --> 00:19:48,934
contact me. Thank you and welcome in Colombia. Welcome in Carago. Thank you.

303
00:19:48,972 --> 00:19:49,540
Thank you very much.

