1
00:00:26,850 --> 00:00:30,758
Hello. Happy to have you with me today. My name is

2
00:00:30,764 --> 00:00:34,230
Mihaelaroxana Ghidersa. I'm a software engineer and

3
00:00:34,380 --> 00:00:38,054
besides being passionate about software and technology,

4
00:00:38,252 --> 00:00:41,622
I also like to combine it with this public

5
00:00:41,676 --> 00:00:45,558
speaking area and more like in the area

6
00:00:45,644 --> 00:00:49,602
of sharing my experiences,

7
00:00:49,666 --> 00:00:53,882
gather, bring from other people's experiences

8
00:00:53,946 --> 00:00:57,566
and things like this just to shape content

9
00:00:57,668 --> 00:01:00,910
that I can share in presentations

10
00:01:01,250 --> 00:01:05,226
as I'm doing today. So I really want to take to the organizers

11
00:01:05,258 --> 00:01:08,370
for having me. I feel honored to be part of such an amazing

12
00:01:08,440 --> 00:01:12,066
lineup of speakers. First of all, I got to say that

13
00:01:12,088 --> 00:01:15,940
this time is not going to be so much about technical stuff.

14
00:01:16,310 --> 00:01:19,586
I'm not going to give you the perspective on the best architects.

15
00:01:19,698 --> 00:01:23,430
Actually, I think this is a toxic tree that we have sometimes because

16
00:01:23,500 --> 00:01:26,930
we think that it's always about the technical knowledge.

17
00:01:27,090 --> 00:01:30,250
We need to just stop for a minute,

18
00:01:31,790 --> 00:01:34,998
put aside our rules, positioning levels,

19
00:01:35,094 --> 00:01:39,674
never ending processes, and just look at a team and

20
00:01:39,872 --> 00:01:43,146
use the expertise that we have at hand and the knowledge

21
00:01:43,178 --> 00:01:45,470
to see the shape of the current context.

22
00:01:46,370 --> 00:01:50,000
Developers are real people. I know it's hard to

23
00:01:50,530 --> 00:01:53,954
understand it, but they are real people. So we need so much

24
00:01:53,992 --> 00:01:57,314
to take care of teams, dynamics and how we actually

25
00:01:57,432 --> 00:02:01,300
build the product in the end, how we collaborate in building that product.

26
00:02:03,030 --> 00:02:07,154
My feeling is that when it comes to technical

27
00:02:07,202 --> 00:02:10,466
matters, we find a lot of resources on the Internet, so it's

28
00:02:10,498 --> 00:02:13,320
easier to actually work with that part,

29
00:02:14,570 --> 00:02:17,786
easier than working with the way

30
00:02:17,808 --> 00:02:21,354
we interact at team level, the way we

31
00:02:21,472 --> 00:02:23,210
shape team dynamics.

32
00:02:24,990 --> 00:02:28,586
But before that, I want to let something very clear from the

33
00:02:28,608 --> 00:02:32,046
beginning, beyond delivering a presentation, I'm here to

34
00:02:32,068 --> 00:02:36,106
contribute to creating better teams and better project. And I'm

35
00:02:36,138 --> 00:02:39,534
also extremely interested in learning from you and your

36
00:02:39,572 --> 00:02:42,786
experience. So just join me in

37
00:02:42,808 --> 00:02:47,010
this discussion. So what is architecture

38
00:02:47,670 --> 00:02:50,660
when it comes to clearly defining what architecture is?

39
00:02:51,590 --> 00:02:54,954
Along the way I found many interpretations and definitions,

40
00:02:55,022 --> 00:02:58,230
many of them confusing abstractions.

41
00:03:01,450 --> 00:03:05,154
The more I gain,

42
00:03:05,202 --> 00:03:09,034
more knowledge I encounter also some that

43
00:03:09,072 --> 00:03:12,060
were more, let's say, more simple and on point.

44
00:03:12,590 --> 00:03:16,390
But the general feeling was that they were pretty abstract

45
00:03:16,470 --> 00:03:21,054
for a developer that is in the beginning of

46
00:03:21,172 --> 00:03:22,750
his or her career.

47
00:03:25,570 --> 00:03:29,166
So beside all those definitions, abstract or

48
00:03:29,348 --> 00:03:33,674
whatsoever, I think that architects

49
00:03:33,722 --> 00:03:36,642
is a base structure upon which we build. Step by step,

50
00:03:36,776 --> 00:03:40,210
one component after another, we create relationship between

51
00:03:40,280 --> 00:03:44,500
them. Of course high level, we are talking about the high level.

52
00:03:45,530 --> 00:03:49,314
Consider that all this structure

53
00:03:49,362 --> 00:03:52,870
and decisions regarding this structure are being

54
00:03:52,940 --> 00:03:56,918
made while taking in consideration the whole picture of the product.

55
00:03:57,084 --> 00:04:01,142
So when I'm talking whole picture, I'm not talking only technical matters,

56
00:04:01,206 --> 00:04:05,158
I'm also talking about feedback

57
00:04:05,254 --> 00:04:09,850
and perspective for more stakeholders.

58
00:04:10,990 --> 00:04:14,426
Another important aspect to discuss now that we've

59
00:04:14,458 --> 00:04:18,362
opened the discussion about architecture, is that in many cases

60
00:04:18,426 --> 00:04:22,186
it is confused with design. And this makes me think that it's

61
00:04:22,218 --> 00:04:25,666
another consequence of the fact that we have this tendency of

62
00:04:25,688 --> 00:04:28,818
defining everything in a very abstractions way from one

63
00:04:28,904 --> 00:04:33,122
level of

64
00:04:33,176 --> 00:04:36,782
experience. So, as already discussed,

65
00:04:36,846 --> 00:04:40,562
architects is a structure. It's a blueprint that defines

66
00:04:40,626 --> 00:04:44,146
our high level units, the way they interact,

67
00:04:44,258 --> 00:04:48,220
the way they evolve, and so on. On the other hand,

68
00:04:49,070 --> 00:04:52,234
system design shapes things more at code level,

69
00:04:52,352 --> 00:04:56,060
the way each

70
00:04:56,430 --> 00:05:00,006
class evolves, the propose of each

71
00:05:00,048 --> 00:05:04,174
element, and so on. Having a strong system design

72
00:05:04,292 --> 00:05:08,430
helps the development team be more efficient and organized in terms of

73
00:05:08,500 --> 00:05:12,566
understanding what are the responsibilities of some functions,

74
00:05:12,698 --> 00:05:16,338
some modules, some classes, what they can

75
00:05:16,424 --> 00:05:20,098
and can't do, and so on. All of this is possible

76
00:05:20,184 --> 00:05:24,034
by identifying a systems design so we can later

77
00:05:24,152 --> 00:05:28,294
decide maybe what kind of design patterns we should use

78
00:05:28,492 --> 00:05:31,974
in certain contexts. Extending the

79
00:05:32,012 --> 00:05:33,880
discussion a bit about design.

80
00:05:35,450 --> 00:05:41,370
Well, actually, design and architecture, I really liked how

81
00:05:41,440 --> 00:05:45,718
Grady Bach nicely talks about how architecture represents

82
00:05:45,894 --> 00:05:49,098
the significant design decisions that shape a system

83
00:05:49,184 --> 00:05:52,142
where significance is measured by the cost of change,

84
00:05:52,276 --> 00:05:55,898
how nicely put and how nicely

85
00:05:56,074 --> 00:05:59,600
having into consideration this cost.

86
00:06:00,370 --> 00:06:04,494
And we will also discuss about cost and impact.

87
00:06:04,542 --> 00:06:08,530
But basically, if it's just to simplify everything,

88
00:06:08,680 --> 00:06:12,510
significant decisions are architects, everything else is designed.

89
00:06:12,670 --> 00:06:16,482
His words. Later on, we will go a bit deeper also

90
00:06:16,536 --> 00:06:21,846
in the decision making subject. But before I

91
00:06:21,868 --> 00:06:25,314
just want to conclude that simply says software architecture

92
00:06:25,442 --> 00:06:29,306
is focused on the entire system. Software design focuses on

93
00:06:29,408 --> 00:06:32,090
more specific levels.

94
00:06:33,790 --> 00:06:37,642
Since I'm coding people, I also

95
00:06:37,696 --> 00:06:41,120
like this presentation from Simon Brown that

96
00:06:41,730 --> 00:06:45,354
he's saying that architectural decisions are the ones that you cannot

97
00:06:45,402 --> 00:06:48,314
reverse without a high degree of effort.

98
00:06:48,442 --> 00:06:51,754
You can't change an architectural decision in an afternoon.

99
00:06:51,802 --> 00:06:56,018
So just think about this when you make your own change

100
00:06:56,104 --> 00:07:00,210
in the future in the architecture, or maybe

101
00:07:00,280 --> 00:07:01,460
also in the code,

102
00:07:02,950 --> 00:07:06,690
but precisely because we can change a decision

103
00:07:06,770 --> 00:07:10,514
related to architecture in an afternoon, the first step in architects

104
00:07:10,562 --> 00:07:13,762
software is about understanding what is significant

105
00:07:13,826 --> 00:07:14,760
and why.

106
00:07:17,050 --> 00:07:20,634
Because when we

107
00:07:20,672 --> 00:07:25,318
focus very much on code, on how to follow some well tested approaches

108
00:07:25,494 --> 00:07:29,260
and just check our tasks and

109
00:07:31,090 --> 00:07:34,506
feel happy about the fact that we've just finished

110
00:07:34,538 --> 00:07:37,994
a day, well, sometimes we ignore architecture

111
00:07:38,042 --> 00:07:41,870
and think that it's not important. What we miss is the actual

112
00:07:41,940 --> 00:07:45,730
understanding that there are actually some very important benefits

113
00:07:45,880 --> 00:07:50,286
of getting the big picture. You get to understand how components

114
00:07:50,318 --> 00:07:51,970
in the system should interact.

115
00:07:55,130 --> 00:07:59,286
You get to understand the responsibility of

116
00:07:59,468 --> 00:08:03,622
the components, the impact that each

117
00:08:03,756 --> 00:08:07,174
component has, and very important,

118
00:08:07,292 --> 00:08:11,834
the cost in time of the changes that I'm going

119
00:08:11,872 --> 00:08:16,054
to do. Having an overview on the architectural dynamics helps

120
00:08:16,102 --> 00:08:17,980
answering questions like this.

121
00:08:19,390 --> 00:08:23,280
Above all, I really dare to say

122
00:08:23,650 --> 00:08:27,386
that the scalability

123
00:08:27,578 --> 00:08:30,560
to predict change, it's extremely important.

124
00:08:31,730 --> 00:08:35,182
And you know how Darwin's theory

125
00:08:35,246 --> 00:08:39,154
says that the species that survives the

126
00:08:39,192 --> 00:08:42,722
longest is not the strongest one, but the one that adapts better to change?

127
00:08:42,776 --> 00:08:45,954
Well, if Darwin would have worked in software development,

128
00:08:46,082 --> 00:08:49,430
I think that he would have stated that the system that survives longer

129
00:08:49,500 --> 00:08:53,606
is not the system that has

130
00:08:53,628 --> 00:08:57,926
the strongest banners of things like this, but the

131
00:08:57,948 --> 00:09:01,174
system that has an architects that is able to predict and adapt

132
00:09:01,222 --> 00:09:05,286
better to change. So the best solution is to build an architecture

133
00:09:05,318 --> 00:09:09,482
that anticipates change and evolution in a cost efficient way.

134
00:09:09,616 --> 00:09:13,146
And this is something that as developers we can't

135
00:09:13,178 --> 00:09:16,958
ignore. So just take your heads out of the ide

136
00:09:17,124 --> 00:09:19,070
and let's continue the discussion.

137
00:09:21,010 --> 00:09:24,962
So we are discussing before about how

138
00:09:25,096 --> 00:09:29,140
we lose perspective and just

139
00:09:31,030 --> 00:09:33,330
give importance to only some pieces.

140
00:09:34,150 --> 00:09:37,510
Other times we get stuck into the mindset that we have to just

141
00:09:37,660 --> 00:09:40,982
mind our own business, do our

142
00:09:41,036 --> 00:09:44,278
job, focus on the things that we have in the

143
00:09:44,444 --> 00:09:48,140
job description and not concern about

144
00:09:49,150 --> 00:09:52,554
things like architects. This is a very

145
00:09:52,592 --> 00:09:56,474
wrong way of looking at things because guess what, we are

146
00:09:56,512 --> 00:09:59,290
building upon that architects.

147
00:09:59,630 --> 00:10:03,626
And there are so many benefits to having a look from above at what you're

148
00:10:03,658 --> 00:10:07,022
working. I will give you my perspective in a moment

149
00:10:07,076 --> 00:10:11,614
that I just stepped a bit away from the id and

150
00:10:11,652 --> 00:10:14,740
this was because some things were not clear

151
00:10:15,190 --> 00:10:18,866
and I became frustrated at

152
00:10:18,888 --> 00:10:22,542
some point because I wasn't understand

153
00:10:22,686 --> 00:10:27,080
some of the things that I had to do. So I just looked up

154
00:10:27,610 --> 00:10:31,720
and tried to see exactly what is happening. I started asking questions

155
00:10:32,170 --> 00:10:35,960
and suddenly instead of just complaining about problems

156
00:10:36,490 --> 00:10:40,380
that we were having in the system, I started looking for

157
00:10:40,830 --> 00:10:44,218
solutions and trying things in order to make things work.

158
00:10:44,304 --> 00:10:47,498
So I was able to see where some technical guidance might be

159
00:10:47,504 --> 00:10:51,230
needed, where I wasn't having

160
00:10:51,300 --> 00:10:54,986
the knowledge to actually give an opinion or maybe to understanding

161
00:10:55,018 --> 00:11:00,160
what is happening in the system. But I was always also

162
00:11:00,770 --> 00:11:04,418
able to visualize component interactions at a high level

163
00:11:04,504 --> 00:11:08,194
and it changed the way

164
00:11:08,392 --> 00:11:12,078
I looked at things. We changed my perspective

165
00:11:12,254 --> 00:11:16,040
and I actually started liking my job more.

166
00:11:18,970 --> 00:11:23,046
If you ever had the situations like this, I'm sure you understand that

167
00:11:23,068 --> 00:11:26,678
you just have this drive of doing things because

168
00:11:26,844 --> 00:11:30,460
now everything just makes sense. I felt that.

169
00:11:31,870 --> 00:11:36,074
And besides this

170
00:11:36,112 --> 00:11:39,174
pleasure, by having this mindset switch,

171
00:11:39,222 --> 00:11:42,974
I was able to quit some of the teams that

172
00:11:43,012 --> 00:11:47,146
I've grown to believe in time, such as, okay, software architecture

173
00:11:47,178 --> 00:11:50,286
is inflexible and forever like someone said it

174
00:11:50,308 --> 00:11:54,146
in the beginning and that's it. Or the architect is not

175
00:11:54,168 --> 00:11:58,194
my problem, is an architect's problem. So I'm just going to go

176
00:11:58,232 --> 00:12:02,126
deal with my task or architecture is not about coding.

177
00:12:02,318 --> 00:12:06,034
Like architects just discuss business stuff and that's it.

178
00:12:06,072 --> 00:12:09,158
They don't look at the code, they don't care what we are doing in the

179
00:12:09,164 --> 00:12:12,854
code. And I'm pretty sure that at least one

180
00:12:12,892 --> 00:12:16,610
of this, it was part of your career,

181
00:12:16,690 --> 00:12:19,500
you had it at some point.

182
00:12:20,750 --> 00:12:24,186
But more important is to discuss them and break the

183
00:12:24,208 --> 00:12:28,234
toxic cycle. And as

184
00:12:28,272 --> 00:12:31,390
the discussion will evolve, you will see that

185
00:12:31,460 --> 00:12:34,894
we'll just destroy them one by

186
00:12:34,932 --> 00:12:38,458
one. And by being able to destroy

187
00:12:38,474 --> 00:12:42,270
them one by one, we have to think about this person

188
00:12:42,340 --> 00:12:45,774
that seems to be sometimes maybe in the traditional way of doing

189
00:12:45,812 --> 00:12:50,142
things, seemed to be like the God of architecture.

190
00:12:50,286 --> 00:12:52,290
So what is it? An architect,

191
00:12:54,070 --> 00:12:57,382
independently of what we are about to discuss or how often

192
00:12:57,436 --> 00:13:01,174
the role of an architect is pretty

193
00:13:01,372 --> 00:13:05,142
easy to confuse you. I really

194
00:13:05,196 --> 00:13:08,970
think that you don't become architect only by receiving a promotion.

195
00:13:10,270 --> 00:13:13,050
There is a strong need for evolution.

196
00:13:13,550 --> 00:13:16,490
Gradually working with some situations,

197
00:13:17,070 --> 00:13:19,370
growing the expertise,

198
00:13:19,950 --> 00:13:23,358
gaining the attitude in time, that will help you faces the role as

199
00:13:23,364 --> 00:13:27,246
it comes. Because this role ones both with challenges and a

200
00:13:27,268 --> 00:13:30,942
lot of decision making at the same time, I feel that

201
00:13:30,996 --> 00:13:34,590
there has been an evolution within this role,

202
00:13:34,750 --> 00:13:38,322
as I was saying, from a traditional way of doing things

203
00:13:38,376 --> 00:13:41,170
to a more like hipster style,

204
00:13:41,750 --> 00:13:45,578
more open and relaxed

205
00:13:45,614 --> 00:13:48,726
approach. So we are going to put in balance why we

206
00:13:48,748 --> 00:13:51,480
should implement certain approaches over others.

207
00:13:53,370 --> 00:13:57,362
For the longest time, as I was saying, it seemed that the architects

208
00:13:57,426 --> 00:14:00,570
is, besides the fact that we can define the role,

209
00:14:01,150 --> 00:14:04,140
we weren't able to define the role that good.

210
00:14:04,670 --> 00:14:08,422
It seemed also like you can't touch the architect.

211
00:14:08,486 --> 00:14:11,866
He's just standing in there doing very important decisions

212
00:14:11,898 --> 00:14:16,190
and you are just staying in front of the ide and coding.

213
00:14:17,010 --> 00:14:21,022
And I'm not exaggerating because I've been

214
00:14:21,076 --> 00:14:24,386
part of a team where I think it was my

215
00:14:24,408 --> 00:14:27,954
first project ever and I've been in that team for

216
00:14:27,992 --> 00:14:29,540
like over a year.

217
00:14:30,790 --> 00:14:34,338
And I don't know

218
00:14:34,424 --> 00:14:38,162
who the architect was. I never met him, I never interacted,

219
00:14:38,226 --> 00:14:42,102
I never. Nothing about the architect and also

220
00:14:42,156 --> 00:14:45,720
about the architecture. It was like we were so

221
00:14:47,370 --> 00:14:51,274
just doing things in our tasks and that's it. So you can understand that

222
00:14:51,312 --> 00:14:55,578
in the moment when I changed to another team and

223
00:14:55,664 --> 00:15:00,006
the architects was standing like the

224
00:15:00,048 --> 00:15:03,626
desk next to me and he was so open to discussion

225
00:15:03,658 --> 00:15:08,718
and always being involved without

226
00:15:08,804 --> 00:15:12,946
actually being part

227
00:15:12,968 --> 00:15:17,060
of the development team directly, and he was just open

228
00:15:17,830 --> 00:15:22,130
for discussion. He was there for the people that needed

229
00:15:22,200 --> 00:15:26,198
him, but he was building his

230
00:15:26,364 --> 00:15:29,494
things also, and he was just

231
00:15:29,532 --> 00:15:33,080
available when we needed to discuss some things that were important.

232
00:15:35,050 --> 00:15:36,040
So, yeah,

233
00:15:38,030 --> 00:15:42,246
although we have all sorts

234
00:15:42,278 --> 00:15:45,786
of situations like this, for me, this kind

235
00:15:45,808 --> 00:15:50,540
of switch helped me to actually

236
00:15:51,550 --> 00:15:55,198
understand the difference between a title and a role. And this is

237
00:15:55,204 --> 00:15:58,302
the first thing that I want to discuss, the fact

238
00:15:58,356 --> 00:16:01,806
that the architecture is not being built

239
00:16:01,988 --> 00:16:06,370
by one person only. We need to just quit this mindset

240
00:16:06,790 --> 00:16:10,274
that the architect architects the architecture. As I was saying,

241
00:16:10,312 --> 00:16:14,146
one of the myths that we are discussing before, I'm not saying that

242
00:16:14,168 --> 00:16:17,354
teams shouldn't have someone clearly ones a role,

243
00:16:17,502 --> 00:16:21,094
but somewhere in time, any team member can come with

244
00:16:21,132 --> 00:16:24,738
ideas and insights that can impact the current state of architects.

245
00:16:24,834 --> 00:16:28,070
This is what I mean by a flexible collaboration,

246
00:16:29,150 --> 00:16:32,474
a flexible role that stands in collaboration actually.

247
00:16:32,672 --> 00:16:36,220
Then of course, again,

248
00:16:36,830 --> 00:16:40,274
for the longest time, the feeling was that the architect

249
00:16:40,422 --> 00:16:43,694
has to know it all and has to own

250
00:16:43,812 --> 00:16:47,600
the whole stack. And I was thinking like, oh my God,

251
00:16:48,770 --> 00:16:52,982
every technology and every detail. That is preposterous.

252
00:16:53,146 --> 00:16:56,738
Why would anyone ever want to have such

253
00:16:56,824 --> 00:17:01,170
pressure and would ever consider taking

254
00:17:01,240 --> 00:17:04,354
this role? Who would ever

255
00:17:04,472 --> 00:17:08,054
be good enough for this role if the

256
00:17:08,092 --> 00:17:10,870
requirements are so unrealistic?

257
00:17:11,450 --> 00:17:15,142
Well, how about we usually use

258
00:17:15,196 --> 00:17:18,658
the technical expertise of the team while raising

259
00:17:18,674 --> 00:17:22,486
the teams, taking part in the development process,

260
00:17:22,588 --> 00:17:26,394
either by pair programming, doing some

261
00:17:26,432 --> 00:17:29,740
code reviews, just looking from time to time to

262
00:17:30,910 --> 00:17:34,954
what is happening in the code base, gives you the smallest effort,

263
00:17:35,002 --> 00:17:38,910
gives you an idea about whether or not your architects perspectives

264
00:17:39,330 --> 00:17:42,818
are grounded in reality. The sooner you have this kind

265
00:17:42,824 --> 00:17:43,810
of feedback,

266
00:17:46,870 --> 00:17:50,770
the sooner you can ensure that you work on the evolution

267
00:17:51,110 --> 00:17:54,770
of an architects that is actually implementable,

268
00:17:55,370 --> 00:17:59,458
that works with real life scenarios, and it can be implemented

269
00:17:59,474 --> 00:18:03,942
by real people. Then we have the third point that

270
00:18:04,076 --> 00:18:08,026
the architect used to in the traditional way

271
00:18:08,048 --> 00:18:11,820
of doing things, the architect was defining and actually

272
00:18:12,430 --> 00:18:16,490
taking care that the architecture stays like that. And I was thinking

273
00:18:16,560 --> 00:18:20,066
like, I can't believe that we need architects.

274
00:18:20,118 --> 00:18:23,914
Police. Is architecture

275
00:18:24,042 --> 00:18:27,600
something so fixed and hard to implement that it needs someone to

276
00:18:28,050 --> 00:18:32,426
guard it? But how about understanding

277
00:18:32,458 --> 00:18:36,738
the system, combining this understanding with

278
00:18:36,904 --> 00:18:41,090
collaboration and feedback, as we were previously discussing,

279
00:18:42,150 --> 00:18:49,266
and create a more grounded

280
00:18:49,298 --> 00:18:52,834
in reality system, a system that is understood

281
00:18:52,882 --> 00:18:56,806
by the team, and a

282
00:18:56,828 --> 00:19:00,298
system that the team is actually able to build

283
00:19:00,384 --> 00:19:04,170
and understand why it is important to build in a certain way,

284
00:19:04,240 --> 00:19:08,022
why it is important to enforce some approaches, some best practices,

285
00:19:08,086 --> 00:19:14,510
some patterns and things like this. So definitely architect,

286
00:19:14,850 --> 00:19:18,810
as we are saying, it's a flexible role. An architects

287
00:19:18,890 --> 00:19:22,846
uses the technical expertise of the team while also growing

288
00:19:22,878 --> 00:19:26,322
the team and with the team. And of course

289
00:19:26,456 --> 00:19:28,420
the architect understands the system,

290
00:19:29,430 --> 00:19:33,474
keeps high

291
00:19:33,512 --> 00:19:37,714
level mindset, but also looks at a developer's perspective

292
00:19:37,762 --> 00:19:41,654
and tries to see if his objectives and

293
00:19:41,692 --> 00:19:46,870
his vision is actually understood

294
00:19:47,630 --> 00:19:50,940
and implementable in the end.

295
00:19:52,510 --> 00:19:56,490
So now we can consider that some of the myths were invalidated

296
00:19:56,910 --> 00:20:00,422
and we will discuss later

297
00:20:00,576 --> 00:20:03,470
even more details to bring some light.

298
00:20:03,540 --> 00:20:08,974
But right now I want to go a bit and

299
00:20:09,012 --> 00:20:13,054
discuss about two approaches when it comes to the architect

300
00:20:13,102 --> 00:20:17,982
role. One is leadership

301
00:20:18,046 --> 00:20:22,180
over management and how we are actually

302
00:20:22,870 --> 00:20:26,722
placing this role. And the other one is expertise

303
00:20:26,786 --> 00:20:30,054
over knowing it, everything. And somehow on this part

304
00:20:30,092 --> 00:20:32,630
we already touched some details.

305
00:20:34,330 --> 00:20:38,066
If there is something that you remember from

306
00:20:38,108 --> 00:20:41,706
this talk about your architect and maybe something that

307
00:20:41,728 --> 00:20:45,066
you can just look at your architect and see if he's doing that,

308
00:20:45,168 --> 00:20:48,540
please make these two things. That's something.

309
00:20:49,550 --> 00:20:53,550
So let's discuss the first ones, which is leadership goes

310
00:20:53,620 --> 00:20:57,690
over management. There's a difference between management and leadership.

311
00:20:57,850 --> 00:21:01,294
Management is a lot about tasks, very specific

312
00:21:01,492 --> 00:21:04,820
steps, achieving the end goal, which is not a bad thing.

313
00:21:05,190 --> 00:21:08,340
On the other part though, leadership is about people,

314
00:21:08,790 --> 00:21:13,010
who you are, how you get to those people, how you inspire them,

315
00:21:13,160 --> 00:21:16,120
how open are you to those people.

316
00:21:16,970 --> 00:21:20,150
I really think that an architect should be a leader.

317
00:21:20,730 --> 00:21:24,054
A leader that has a very good overview, that has

318
00:21:24,092 --> 00:21:27,942
experience in a lot of areas and that

319
00:21:27,996 --> 00:21:31,830
can give insights both functional and nonfunctional.

320
00:21:32,990 --> 00:21:36,426
He actually has the responsibility to grow the

321
00:21:36,448 --> 00:21:39,500
team in the end.

322
00:21:41,090 --> 00:21:44,334
And maybe something that,

323
00:21:44,532 --> 00:21:48,382
again, I've seen in teams, and it seems

324
00:21:48,436 --> 00:21:51,726
that it's not clear, is that each member of the

325
00:21:51,748 --> 00:21:56,146
team has a

326
00:21:56,168 --> 00:21:59,070
certain level of knowledge. So as an architects,

327
00:21:59,230 --> 00:22:01,860
you have in the moment that you approach a team,

328
00:22:02,390 --> 00:22:05,846
you have to find a way, a common language in

329
00:22:05,868 --> 00:22:09,206
order to make sure that everyone understand what

330
00:22:09,228 --> 00:22:12,486
you are trying to enforce in the team.

331
00:22:12,668 --> 00:22:16,134
So everyone in the development teams needs to see the

332
00:22:16,172 --> 00:22:19,558
essence of software architecture, the consequences

333
00:22:19,654 --> 00:22:22,842
of not thinking about it. Before we start talking about things

334
00:22:22,896 --> 00:22:24,860
like, you know,

335
00:22:28,590 --> 00:22:35,246
the way we evaluate people and the

336
00:22:35,268 --> 00:22:39,114
way we evaluate performance and other things and language

337
00:22:39,162 --> 00:22:43,140
and things like this, we have to understand the consequences of

338
00:22:44,470 --> 00:22:47,618
our work. And to be honest,

339
00:22:47,704 --> 00:22:51,394
some recent events that I witnessed showed me that

340
00:22:51,592 --> 00:22:55,490
people really need to be in touch with the architects.

341
00:22:56,010 --> 00:22:59,654
People really need to be

342
00:22:59,692 --> 00:23:03,400
able to ask the architect about some of the decisions to understand

343
00:23:05,610 --> 00:23:08,930
what is happening. And I've seen this in one of the teams that I

344
00:23:08,940 --> 00:23:11,370
worked with where we barely,

345
00:23:12,430 --> 00:23:16,170
this is another team, it's not the first team that I was telling you about.

346
00:23:16,320 --> 00:23:19,786
We barely interacted with the architect. So until the

347
00:23:19,808 --> 00:23:23,514
moment that I just, I'm very persistent.

348
00:23:23,562 --> 00:23:27,214
So I just went to him and asked

349
00:23:27,252 --> 00:23:30,080
for explanations and things like this. Well,

350
00:23:31,010 --> 00:23:34,686
in the moment that I did this and the moment that we actually received

351
00:23:34,718 --> 00:23:37,890
some answers and things like this, the team expressed,

352
00:23:38,470 --> 00:23:42,094
the rest of the team also expressed the need of understanding the context

353
00:23:42,142 --> 00:23:45,814
and how important is and how they

354
00:23:45,852 --> 00:23:48,680
don't see what exactly they are building.

355
00:23:50,410 --> 00:23:54,326
At the end of the day, what is the result as

356
00:23:54,348 --> 00:23:58,346
a whole. So we don't usually talk

357
00:23:58,368 --> 00:24:02,220
about the soft side of being a software architect, even though

358
00:24:02,990 --> 00:24:06,780
it's so important. I felt it and I'm sure that

359
00:24:07,390 --> 00:24:11,040
a lot of you also felt it. If there are

360
00:24:11,410 --> 00:24:15,086
any in there that were just fine. Well, with the

361
00:24:15,108 --> 00:24:18,640
situation when I had for you, it means that

362
00:24:19,170 --> 00:24:22,898
you had a real leader in that. But in

363
00:24:22,904 --> 00:24:26,290
the real world, an architect's role is both worrying about the important

364
00:24:26,360 --> 00:24:30,420
technical decisions, but also he has to lead,

365
00:24:31,350 --> 00:24:33,090
give the team a direction.

366
00:24:33,670 --> 00:24:37,400
Collaborate coach we are basically

367
00:24:37,850 --> 00:24:41,042
talking about a full time leadership role.

368
00:24:41,186 --> 00:24:47,174
So yeah, soft skills are extremely important and

369
00:24:47,212 --> 00:24:51,370
I'm just going to insist on this only once

370
00:24:51,440 --> 00:24:55,606
more. A team with the same view and that finds

371
00:24:55,638 --> 00:24:59,450
it easy to collaborate, is more engaged and delivers both

372
00:24:59,520 --> 00:25:03,114
quality and quantity. So team dynamics

373
00:25:03,162 --> 00:25:07,162
are so important and the architect

374
00:25:07,306 --> 00:25:10,800
has a very important part in all this process.

375
00:25:11,410 --> 00:25:14,580
Then we discuss about the expertise of our knowing it all.

376
00:25:15,830 --> 00:25:19,940
We were discussing already, owning the whole stack is not

377
00:25:20,390 --> 00:25:23,698
possible, more like users, also the expertise of

378
00:25:23,704 --> 00:25:28,406
the team. And I

379
00:25:28,428 --> 00:25:32,642
think that the real skill

380
00:25:32,706 --> 00:25:36,546
of an architect is not mastering the whole stack and knowing

381
00:25:36,578 --> 00:25:40,220
it everything and being the best of the best and things like this. I think

382
00:25:41,150 --> 00:25:45,722
it needs to have some

383
00:25:45,776 --> 00:25:49,226
background in software development. Yes, but the most important I think is

384
00:25:49,248 --> 00:25:52,990
the ability to switch between code and implementation details

385
00:25:54,130 --> 00:25:57,262
and the architects big picture. Because yes,

386
00:25:57,316 --> 00:26:00,490
as an architect you should own best practices, approaches,

387
00:26:00,570 --> 00:26:04,546
overview and design and patterns that bring more value to some

388
00:26:04,568 --> 00:26:09,026
of the technologies in order to choose the right technology or

389
00:26:09,208 --> 00:26:12,722
in order to just go with the project

390
00:26:12,776 --> 00:26:16,646
in the right direction. But when it comes to keeping an

391
00:26:16,668 --> 00:26:20,920
eye on details, low level code, I think it's true

392
00:26:22,010 --> 00:26:25,654
value exists in using the technical expertise of the team.

393
00:26:25,772 --> 00:26:29,980
The software architectural can sometimes even for one

394
00:26:31,230 --> 00:26:35,702
idea, be of another team member. We just need to create trustful

395
00:26:35,846 --> 00:26:39,494
and a trustful

396
00:26:39,542 --> 00:26:42,586
environment. An environment where we can collaborate,

397
00:26:42,698 --> 00:26:47,534
where people can express their ideas and show

398
00:26:47,572 --> 00:26:52,222
their expertise, be confident enough to show

399
00:26:52,276 --> 00:26:56,340
what they know and learn on the process.

400
00:26:57,910 --> 00:27:01,058
So being an architects is challenging and takes a

401
00:27:01,064 --> 00:27:04,466
lot of knowledge and experience. At the same time, you dont need to be

402
00:27:04,488 --> 00:27:07,942
an expert in any particular area of software development to become

403
00:27:07,996 --> 00:27:11,442
one. It is better to have a wide

404
00:27:11,506 --> 00:27:16,018
understand of software development and be able to communicate your knowledge effectively

405
00:27:16,194 --> 00:27:18,790
while being backed up by best practices.

406
00:27:19,150 --> 00:27:22,586
I find it important to know that you don't have to be the God of

407
00:27:22,608 --> 00:27:25,878
the technology stack in order to become an architect.

408
00:27:26,054 --> 00:27:30,414
I find it useful to have a big

409
00:27:30,452 --> 00:27:34,426
picture, to have emotional

410
00:27:34,458 --> 00:27:37,978
intelligence and also coaching. So it's

411
00:27:37,994 --> 00:27:41,390
a very good combination of technical and soft skills.

412
00:27:42,470 --> 00:27:45,794
More specific, I really

413
00:27:45,832 --> 00:27:50,046
find that there are some general set of skills that embody the architect

414
00:27:50,078 --> 00:27:54,414
role, like being pragmatic

415
00:27:54,462 --> 00:27:57,030
when it comes to requirements and constraints.

416
00:28:00,650 --> 00:28:04,406
Being able, and this is something that is being built in time and

417
00:28:04,428 --> 00:28:08,002
with experience of being able to know where you can take a risk

418
00:28:08,066 --> 00:28:11,834
and where you can't take a risk, and be

419
00:28:11,872 --> 00:28:16,090
able to make some decisions regarding

420
00:28:16,910 --> 00:28:20,522
design. Be very careful in the moment

421
00:28:20,576 --> 00:28:24,314
that you have to make some decisions. If you gain some technical depth,

422
00:28:24,362 --> 00:28:27,726
well, how you are going to manage that technical depth, like keep track of

423
00:28:27,748 --> 00:28:31,150
that, because at some point it might get so hard to manage

424
00:28:31,220 --> 00:28:34,834
and the architectural vision might be

425
00:28:34,872 --> 00:28:38,740
so damaged that you can't do much about it.

426
00:28:41,350 --> 00:28:44,926
And also the combination with the other soft skills

427
00:28:44,958 --> 00:28:49,954
that we've discussed, such as keeping

428
00:28:50,002 --> 00:28:53,110
close with the team, be a leader,

429
00:28:54,170 --> 00:28:58,140
inspire people, grow, raise people, and try to

430
00:28:59,070 --> 00:29:02,598
be the best influence

431
00:29:02,694 --> 00:29:05,850
in the team and keep everyone aligned.

432
00:29:08,910 --> 00:29:12,618
We were talking before about taking risks,

433
00:29:12,714 --> 00:29:16,574
making some decisions. Well, each project that I ever worked on has

434
00:29:16,612 --> 00:29:20,382
evolves in time. Requirements changed because maybe

435
00:29:20,436 --> 00:29:24,110
of the competition. So they had to change the main features

436
00:29:24,270 --> 00:29:28,494
or you have to be creative

437
00:29:28,542 --> 00:29:32,338
because some new technologies and trends appeared. And yeah,

438
00:29:32,504 --> 00:29:36,614
you need to stay up to date sometimes when it brings value to

439
00:29:36,652 --> 00:29:40,534
your product. Maybe some stakeholders change

440
00:29:40,572 --> 00:29:47,094
the way they look at features and they

441
00:29:47,132 --> 00:29:50,854
change the perspective, they change what they wanted, they try

442
00:29:50,892 --> 00:29:54,810
to want to try something different,

443
00:29:54,880 --> 00:29:59,206
where sooner or later, depending on the context and domain,

444
00:29:59,398 --> 00:30:02,814
something is going to change. What we need is to

445
00:30:02,852 --> 00:30:06,254
actually think in terms of building tolerance to

446
00:30:06,292 --> 00:30:09,454
change in the system. Observe where and what

447
00:30:09,492 --> 00:30:13,698
kind of changes appear, iterations, and this way

448
00:30:13,864 --> 00:30:17,906
you can expect these kind of changes and be prepared to meet them.

449
00:30:18,088 --> 00:30:22,386
That's why we are doing so much analyzing, because I

450
00:30:22,408 --> 00:30:26,010
really liked this idea from Jane's

451
00:30:26,030 --> 00:30:29,430
clear, with saying no and yes

452
00:30:29,500 --> 00:30:32,806
and how no is a choice and yes is

453
00:30:32,828 --> 00:30:36,242
a responsibility. Because every time we assume a final decision,

454
00:30:36,386 --> 00:30:40,682
we are also saying no to some more

455
00:30:40,736 --> 00:30:44,346
details that we might receive in time

456
00:30:44,528 --> 00:30:48,154
in the future. Details that

457
00:30:48,192 --> 00:30:51,802
might be significant and might help us make

458
00:30:51,856 --> 00:30:56,334
a more informed decision that

459
00:30:56,372 --> 00:31:00,106
once you committed to something, you already decided how that future block

460
00:31:00,138 --> 00:31:04,030
of time will be spent and how the product and the architecture of structure

461
00:31:04,110 --> 00:31:07,662
will evolve. So be very careful

462
00:31:07,726 --> 00:31:09,940
in what exactly you invest.

463
00:31:14,390 --> 00:31:15,940
Just think about it.

464
00:31:18,250 --> 00:31:22,006
So making decisions concerning architectural aspects is

465
00:31:22,028 --> 00:31:25,186
a very sensitive aspect because those decisions

466
00:31:25,218 --> 00:31:28,258
have a huge impact. And one of the best practices in

467
00:31:28,284 --> 00:31:32,300
software development is to avoid making decisions until the very last moment.

468
00:31:32,910 --> 00:31:37,530
Because, yeah, especially in architecture, there is a high level of uncertainty.

469
00:31:38,510 --> 00:31:42,378
So a good strategy in order to be prepared

470
00:31:42,394 --> 00:31:45,770
to make commitment is gathering a lot of feedback.

471
00:31:45,930 --> 00:31:49,310
If we talk about an existing system. But yeah,

472
00:31:49,460 --> 00:31:53,650
dont get lost in details and accept

473
00:31:53,990 --> 00:31:57,682
there are some parts of the

474
00:31:57,736 --> 00:32:02,914
project that you are just discovering time and that

475
00:32:02,952 --> 00:32:07,362
is okay, but also especially for the existing products,

476
00:32:07,496 --> 00:32:11,480
accept when you made a bad decision in the past and

477
00:32:12,170 --> 00:32:16,406
just change the perspective. Accept that maybe some

478
00:32:16,428 --> 00:32:18,140
parts of the systems can be,

479
00:32:19,550 --> 00:32:23,050
you can rethink of them and give them another shape.

480
00:32:24,190 --> 00:32:28,086
A better strategy for delaying commitments

481
00:32:28,278 --> 00:32:32,762
and making decisions when developing complex is not actually delaying

482
00:32:32,826 --> 00:32:36,718
the commitment, but more like always

483
00:32:36,804 --> 00:32:41,402
build your system in terms of evolvable

484
00:32:41,466 --> 00:32:45,202
structures. Like always keep in mind that you need

485
00:32:45,256 --> 00:32:49,474
some degree of some

486
00:32:49,512 --> 00:32:53,186
capacity for change into the

487
00:32:53,208 --> 00:32:57,126
system. So keep your system open to

488
00:32:57,148 --> 00:32:58,600
change in the future.

489
00:33:03,130 --> 00:33:07,000
Now I would like to point that

490
00:33:07,390 --> 00:33:10,714
becoming a software architect is not something that you

491
00:33:10,752 --> 00:33:14,250
become automatically, as we discussed, it's a role,

492
00:33:15,870 --> 00:33:18,906
even though it's not easy to strictly define it,

493
00:33:18,928 --> 00:33:20,250
just as architecture.

494
00:33:21,810 --> 00:33:24,960
What a coincidence. Well,

495
00:33:26,210 --> 00:33:30,574
we actually can

496
00:33:30,612 --> 00:33:34,350
agree on the fact that the road to coding an architect is full of challenges

497
00:33:34,430 --> 00:33:38,130
and experiences and expertise and confidence, and we just build

498
00:33:38,200 --> 00:33:41,620
upon that in order to be ready for the,

499
00:33:43,670 --> 00:33:47,494
as I was mentioning before, the challenges and

500
00:33:47,532 --> 00:33:51,190
the decisions that you are about to

501
00:33:51,260 --> 00:33:54,754
take. So you have to be ready for the role. You can just be named

502
00:33:54,802 --> 00:33:57,240
an architect just like that.

503
00:33:58,670 --> 00:34:02,390
But from what we've discussed, maybe with some exceptions,

504
00:34:02,470 --> 00:34:06,234
architecture is a part of the development process, part that

505
00:34:06,272 --> 00:34:09,958
later is taken over and implemented.

506
00:34:10,054 --> 00:34:13,482
Actually in the team architects is not about forgetting about

507
00:34:13,536 --> 00:34:16,762
implementation details and getting drawn in abstractions,

508
00:34:16,906 --> 00:34:19,470
but about keeping them balanced.

509
00:34:20,130 --> 00:34:23,294
Sometimes maybe you put more accent in one side, sometimes maybe

510
00:34:23,332 --> 00:34:26,994
the accent goes on another side. I think that you become

511
00:34:27,032 --> 00:34:30,274
a good architect when you are able to slightly move from one

512
00:34:30,312 --> 00:34:34,146
to the other. And I

513
00:34:34,168 --> 00:34:37,622
was able to witness this and I was very

514
00:34:37,676 --> 00:34:41,142
inspired of an architect that did something

515
00:34:41,196 --> 00:34:45,474
like this. So in the end, software architecture

516
00:34:45,522 --> 00:34:49,420
is all about understanding how the system works as a whole.

517
00:34:49,790 --> 00:34:53,526
And since we are discussing

518
00:34:53,558 --> 00:34:57,766
in here about duties and professional

519
00:34:57,798 --> 00:35:01,266
duties, I think that on one side the developers

520
00:35:01,318 --> 00:35:04,602
should cross the line and break the rules

521
00:35:04,666 --> 00:35:09,086
and be curious and always check on how

522
00:35:09,108 --> 00:35:12,506
you ended up with doing what you're doing in the code and how your

523
00:35:12,548 --> 00:35:17,138
code complements the structure of the system. Then also

524
00:35:17,304 --> 00:35:20,980
the architect should break the rules and

525
00:35:22,070 --> 00:35:25,586
make more informed and reality oriented

526
00:35:25,618 --> 00:35:29,526
decisions. Then we

527
00:35:29,548 --> 00:35:33,206
are talking about, okay, but can

528
00:35:33,308 --> 00:35:37,240
actually every developer be an architects or what's the deal? How we are going to

529
00:35:37,550 --> 00:35:40,954
grow to that role? Because I've received this question before.

530
00:35:41,152 --> 00:35:41,900
Well,

531
00:35:46,350 --> 00:35:49,942
it's not an easy road and sometimes you might be thinking,

532
00:35:50,016 --> 00:35:54,030
okay, but if it's not something clearly defined

533
00:35:55,090 --> 00:35:58,286
and the collaboration with a

534
00:35:58,308 --> 00:36:01,680
team is so strong,

535
00:36:03,750 --> 00:36:08,354
couldn't we just use self organizing teams and just get

536
00:36:08,392 --> 00:36:12,258
it over with? This architects troll and whatever we are

537
00:36:12,424 --> 00:36:16,374
discussing. Well, I don't agree with

538
00:36:16,492 --> 00:36:20,022
that part. I think that an architects in a system that

539
00:36:20,076 --> 00:36:23,874
evolves and a system that in times adds

540
00:36:23,922 --> 00:36:27,566
up complexity, it's important to insist

541
00:36:27,618 --> 00:36:31,978
and have this role defined and have

542
00:36:32,144 --> 00:36:36,426
a person with the responsibility of the role because the

543
00:36:36,448 --> 00:36:37,980
team components, it changes.

544
00:36:40,450 --> 00:36:43,630
Every team member has a different level of engagement.

545
00:36:46,050 --> 00:36:48,720
You need someone that keeps things on track.

546
00:36:49,250 --> 00:36:53,106
You need someone that stays engaged with the product that we

547
00:36:53,128 --> 00:36:56,578
are building. Because if you

548
00:36:56,744 --> 00:37:00,034
are doing things right and you are keeping the

549
00:37:00,072 --> 00:37:03,774
relationship with the team and also with the other stakeholders

550
00:37:03,822 --> 00:37:07,254
and try to manage

551
00:37:07,372 --> 00:37:10,840
all this context well,

552
00:37:13,690 --> 00:37:17,634
the results are visible

553
00:37:17,762 --> 00:37:21,226
and an architects is important in the team. If we

554
00:37:21,248 --> 00:37:24,634
are discussing maybe a product that just needed some

555
00:37:24,832 --> 00:37:28,266
structure in the beginning, a product that is not that complex, that is

556
00:37:28,288 --> 00:37:31,530
not evolving that much, the architects

557
00:37:31,610 --> 00:37:35,840
can be like someone that maybe just from time to time

558
00:37:38,050 --> 00:37:41,406
goes into the teams, or maybe in the beginning gives a

559
00:37:41,428 --> 00:37:46,420
structure and that's it. If it's a very simple

560
00:37:48,310 --> 00:37:51,540
product that does not evolve in time, it's just fine.

561
00:37:52,870 --> 00:37:56,694
From my perspective whatsoever, the process of becoming an

562
00:37:56,732 --> 00:38:00,038
architect is not a very well defined, as I was saying,

563
00:38:00,204 --> 00:38:03,750
we don't have like the ten steps of becoming an architect.

564
00:38:04,730 --> 00:38:08,186
No, you can just look at the

565
00:38:08,208 --> 00:38:09,740
ones that you have near you,

566
00:38:11,230 --> 00:38:14,982
undertake some parts of the software architects

567
00:38:15,046 --> 00:38:18,860
role, architect role without actually

568
00:38:22,530 --> 00:38:25,790
losing the perspective that you have as a developer.

569
00:38:26,770 --> 00:38:32,094
Just try to contribute. Look at

570
00:38:32,132 --> 00:38:35,426
what maybe the closest architect is coding or

571
00:38:35,608 --> 00:38:39,506
the closest, most senior person that you have

572
00:38:39,608 --> 00:38:45,782
and try to do it step by step, even though maybe

573
00:38:45,836 --> 00:38:49,094
your goal is not to become

574
00:38:49,132 --> 00:38:53,400
an architect, it's just to become a professional with more

575
00:38:53,850 --> 00:38:57,662
like go to the next level. It's also okay to look at someone's

576
00:38:57,746 --> 00:39:01,226
journey and just go and ask,

577
00:39:01,328 --> 00:39:05,114
okay, what have you done to actually work

578
00:39:05,152 --> 00:39:08,474
in this role and what should I do?

579
00:39:08,512 --> 00:39:11,786
And things like this. So your evolution

580
00:39:11,818 --> 00:39:13,150
is your responsibility.

581
00:39:16,210 --> 00:39:21,870
So go ask well

582
00:39:21,940 --> 00:39:26,290
about this. I think we've discussed how important it is to actually

583
00:39:26,440 --> 00:39:29,860
change perspective, change roles from time to time.

584
00:39:30,790 --> 00:39:34,226
I really think that as an architect, you need

585
00:39:34,248 --> 00:39:38,114
to understand the concept of the application from a developer's

586
00:39:38,162 --> 00:39:42,230
perspective and take more informed and realistic decisions.

587
00:39:43,530 --> 00:39:46,886
And this way, by having clear what

588
00:39:46,908 --> 00:39:50,566
they are building, also the team will understand the impact and the importance of

589
00:39:50,588 --> 00:39:54,650
their work. And yeah, we'll trust you more, but also they will be more

590
00:39:54,720 --> 00:39:58,474
motivated and engaged with the product in the end because they are able to

591
00:39:58,512 --> 00:40:00,090
see the whole picture.

592
00:40:01,490 --> 00:40:04,606
So yeah, I don't

593
00:40:04,628 --> 00:40:08,266
think that coders should just code and the architect

594
00:40:08,298 --> 00:40:10,990
should be concerned only with the architecture.

595
00:40:12,550 --> 00:40:16,786
Sometimes it's good to just change the

596
00:40:16,808 --> 00:40:21,230
revolves and wear someone else's shoes

597
00:40:21,310 --> 00:40:24,642
just to see how we can impact their

598
00:40:24,696 --> 00:40:28,278
work. Although we discussed a

599
00:40:28,284 --> 00:40:33,426
lot about the best ways to do things, there always appears

600
00:40:33,538 --> 00:40:37,014
a gap between the development team and the architect. Unless the

601
00:40:37,052 --> 00:40:42,182
effort is mutual and

602
00:40:42,236 --> 00:40:47,114
both parts the

603
00:40:47,152 --> 00:40:50,542
effort, you can't make things work other way.

604
00:40:50,596 --> 00:40:54,030
Software development is a team activity and in the end even

605
00:40:54,100 --> 00:40:57,200
unintentional. We help each other grow.

606
00:40:58,290 --> 00:41:01,982
For the developers that are thinking

607
00:41:02,036 --> 00:41:06,334
maybe about taking the role of an architect or just wanting

608
00:41:06,382 --> 00:41:10,034
to step up to the next level, don't be

609
00:41:10,072 --> 00:41:14,034
afraid to look outside your daily task. Try to understand the

610
00:41:14,072 --> 00:41:16,920
context of the product.

611
00:41:17,770 --> 00:41:21,046
When you don't understand something, speak up.

612
00:41:21,228 --> 00:41:24,438
When you have maybe something

613
00:41:24,524 --> 00:41:27,800
to some solution idea,

614
00:41:28,110 --> 00:41:33,146
share it, try to get feedback on that and

615
00:41:33,248 --> 00:41:38,586
always ask to be

616
00:41:38,608 --> 00:41:42,574
involved in the decision making. If again you

617
00:41:42,612 --> 00:41:46,046
have a perspective and some arguments for the

618
00:41:46,068 --> 00:41:48,698
ideas that you are promoting.

619
00:41:48,794 --> 00:41:52,894
Architecture is not an esoteric concept, but it's not an easy

620
00:41:53,012 --> 00:41:56,962
road either. And one step at a time, you can grow

621
00:41:57,016 --> 00:42:00,946
in the direction that you find interesting. Always surround yourself with people that

622
00:42:00,968 --> 00:42:05,274
are better than you. See how they approach certain areas,

623
00:42:05,422 --> 00:42:09,302
read their code, look at the decision and see

624
00:42:09,436 --> 00:42:16,402
or think about how would you have decided

625
00:42:16,546 --> 00:42:22,934
in your case it

626
00:42:22,972 --> 00:42:24,550
then for the architect?

627
00:42:25,930 --> 00:42:29,934
Well, don't be so you

628
00:42:30,012 --> 00:42:35,706
so obsessed

629
00:42:35,738 --> 00:42:40,654
with your solution, except that you are also doing some

630
00:42:40,692 --> 00:42:42,270
bad decisions.

631
00:42:44,450 --> 00:42:48,914
Stay close to the team and collaborate with the team from

632
00:42:48,952 --> 00:42:52,418
time to time. Get your hands dirty, because when it comes to building the

633
00:42:52,424 --> 00:42:55,170
right architecture and for the right context,

634
00:42:56,170 --> 00:42:57,880
I came to learn that.

635
00:42:59,610 --> 00:43:03,480
Actually I came to learn this the hard way, that it's important

636
00:43:04,250 --> 00:43:07,710
to have the architects state engaged

637
00:43:07,730 --> 00:43:11,980
with a team. The value this approach brings in terms of

638
00:43:12,590 --> 00:43:17,402
feedback and collaboration and instant click

639
00:43:17,456 --> 00:43:21,070
when it comes to some solutions is incredible.

640
00:43:21,410 --> 00:43:24,686
On the other side is the best way to keep the team aware about the

641
00:43:24,708 --> 00:43:28,682
technical vision and the architects

642
00:43:28,746 --> 00:43:32,586
direction and you don't

643
00:43:32,618 --> 00:43:35,840
have to be 100% involved in the code.

644
00:43:37,010 --> 00:43:40,466
Do some pad programming, look a

645
00:43:40,488 --> 00:43:44,418
bit from time to time in the code base. Whatever works for you.

646
00:43:44,584 --> 00:43:47,110
Just don't get lost in abstraction.

647
00:43:49,530 --> 00:43:53,366
Being a developer is not easy. Right. And being an architect is

648
00:43:53,388 --> 00:43:57,080
definitely not easy either. What I really believe in

649
00:43:57,530 --> 00:44:00,390
is the amazing benefit.

650
00:44:02,090 --> 00:44:05,526
Benefit? Yeah, of every development

651
00:44:05,558 --> 00:44:07,930
teams considering architecture.

652
00:44:08,670 --> 00:44:12,170
Failing to do this just brings inconsistencies,

653
00:44:12,330 --> 00:44:16,254
integration issues, code base that is

654
00:44:16,292 --> 00:44:20,218
hard to understand and to extend.

655
00:44:20,394 --> 00:44:24,606
And yeah, just not mentioning a lot of the quality attributes

656
00:44:24,638 --> 00:44:28,526
that we should enforce. Just becoming harder

657
00:44:28,558 --> 00:44:31,170
and harder to maintaining as the system evolves.

658
00:44:32,230 --> 00:44:35,830
I'll finish by leaving you with two ideas for developers,

659
00:44:39,690 --> 00:44:42,966
think globally, understand the whole

660
00:44:43,068 --> 00:44:47,190
picture and try to implement in the details

661
00:44:47,770 --> 00:44:50,950
towards that big picture.

662
00:44:51,290 --> 00:44:55,206
And for the architects, we'll work on

663
00:44:55,228 --> 00:44:58,966
the abstractions. But please, from time to

664
00:44:58,988 --> 00:45:02,190
time, just give an eye to the details, to the code base,

665
00:45:02,260 --> 00:45:06,734
collaborate with the team and just

666
00:45:06,772 --> 00:45:10,686
try it. And maybe later give

667
00:45:10,708 --> 00:45:14,046
me a sign on LinkedIn or Twitter and tell

668
00:45:14,068 --> 00:45:17,022
me how it went that for you. Thank you very much.

669
00:45:17,076 --> 00:45:19,100
And let's see if there are any questions.

