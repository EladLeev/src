1
00:01:54,010 --> 00:01:57,514
Hi, I'm sure you've seen the introductory video already, but I'm Francesco.

2
00:01:57,562 --> 00:02:01,194
I'm 15. I'm a student pen tester, student web developer,

3
00:02:01,242 --> 00:02:05,170
and today I just wanted to generally go through the importance of integrating security measures

4
00:02:05,290 --> 00:02:08,710
throughout development. Now I'll be going through some well known security

5
00:02:08,780 --> 00:02:12,454
vulnerabilities, primarily in web development, and I'll also just really

6
00:02:12,492 --> 00:02:15,526
quickly demonstrate them in Kali. So to start off with, I just wanted to talk

7
00:02:15,548 --> 00:02:18,834
about input sanitization and specifically xss.

8
00:02:18,962 --> 00:02:22,458
I'm also going to be talking about SQL, but for now I just wanted to

9
00:02:22,464 --> 00:02:25,594
talk about cross site scripting and how we can exploit these

10
00:02:25,632 --> 00:02:29,174
unsanitized input fields, whether it's with reflected XSS,

11
00:02:29,302 --> 00:02:32,614
stored xss, or any other type of xss.

12
00:02:32,742 --> 00:02:35,930
So to understand how XSS can lead to compromised accounts,

13
00:02:36,010 --> 00:02:39,534
I'm just showing you a really quick snippet of some code that should

14
00:02:39,572 --> 00:02:42,830
be vulnerable, even though it's probably not. But I'm going to show it anyway

15
00:02:42,900 --> 00:02:46,234
just to kind of understand how these logic works behind XSS.

16
00:02:46,362 --> 00:02:49,598
So to give a little bit of context, what this code is meant

17
00:02:49,614 --> 00:02:53,490
to do, or the general model of this website is to just store

18
00:02:53,560 --> 00:02:57,534
comments that users can post. And here we can actually see the user comment

19
00:02:57,582 --> 00:03:00,662
variable which I now filled in with just some HTML saying

20
00:03:00,716 --> 00:03:04,454
hi just as a proof of concept. And I've also created a function to

21
00:03:04,492 --> 00:03:07,602
handle the request which takes in a URL and an input.

22
00:03:07,666 --> 00:03:11,030
And here we can see that we're making a post request to these designated

23
00:03:11,110 --> 00:03:14,438
URL passing in the input and to call the function we're

24
00:03:14,454 --> 00:03:17,654
just giving it a locally hosted API route

25
00:03:17,702 --> 00:03:20,582
that leads to comments and giving in the user comment.

26
00:03:20,726 --> 00:03:24,106
And if these input truly is not sanitized in the front end or

27
00:03:24,128 --> 00:03:27,566
the backend, then as a response these text high will be

28
00:03:27,588 --> 00:03:30,846
displayed on the user's page. And moving on from the code here we can see

29
00:03:30,868 --> 00:03:34,634
a really quick flow diagram which actually displays a malicious payload

30
00:03:34,682 --> 00:03:38,302
as opposed to the high in HTML. And what this payload

31
00:03:38,366 --> 00:03:42,046
actually does is it tries to render an image which we know it definitely won't

32
00:03:42,078 --> 00:03:45,470
because the source is given as x, which is just invalid.

33
00:03:45,550 --> 00:03:49,334
So it will inevitably call this on error function, which in turn makes

34
00:03:49,372 --> 00:03:52,566
a request to the attacker's ip, giving the attacker the

35
00:03:52,588 --> 00:03:55,686
cookies of whoever views the web page. Now obviously for

36
00:03:55,708 --> 00:03:58,966
this to work, the attacker would have to have a web server hosted, but this

37
00:03:58,988 --> 00:04:02,582
is just to generally show how it would work. Now, to test XSS

38
00:04:02,646 --> 00:04:06,250
on a vulnerable website, I've loaded up owasp zoo shop

39
00:04:06,400 --> 00:04:09,626
which basically is just a training tool for hackers. And here

40
00:04:09,648 --> 00:04:13,246
we can see that we have a search bar. And since we know that this

41
00:04:13,268 --> 00:04:17,850
input is not sanitized, we could try run something like a h one tag

42
00:04:18,010 --> 00:04:21,390
saying hi like we showed in the code and

43
00:04:21,460 --> 00:04:25,486
just closing it and it should return high. Now we

44
00:04:25,508 --> 00:04:28,498
know it's vulnerable to XSS because it actually displayed high.

45
00:04:28,584 --> 00:04:31,106
But if we wanted to just test a range, we could try to test a

46
00:04:31,128 --> 00:04:34,622
h two, which makes it smaller,

47
00:04:34,686 --> 00:04:38,594
or a h four even makes it even smaller.

48
00:04:38,642 --> 00:04:43,320
Or if we wanted we could just do a p tag right

49
00:04:43,770 --> 00:04:47,186
here and it got bigger.

50
00:04:47,218 --> 00:04:50,618
But you get the point. Now another thing you could do is you could test

51
00:04:50,784 --> 00:04:53,718
if the website will run JavaScript,

52
00:04:53,894 --> 00:04:57,958
which you could just test by doing script and typing

53
00:04:58,134 --> 00:05:01,638
like Cert and giving it something. But I'm

54
00:05:01,654 --> 00:05:04,906
not going to do that because in this case it doesn't work. Now going back

55
00:05:04,928 --> 00:05:07,646
to the presentation, this really shows us that we really need to make sure that

56
00:05:07,668 --> 00:05:11,322
all of our inputs are sanitized. And to further show the extent of the damages

57
00:05:11,386 --> 00:05:15,086
that an unsanitized input could cause, I'm going to show

58
00:05:15,188 --> 00:05:17,462
how these can lead to SEO,

59
00:05:17,626 --> 00:05:20,980
which the general concept is the same.

60
00:05:21,430 --> 00:05:25,460
They're both based off an unsanitized input and

61
00:05:26,230 --> 00:05:29,910
injecting something in that input field. In this case,

62
00:05:29,980 --> 00:05:34,614
the only thing is that we're going to inject an SQL query, whether it's a

63
00:05:34,812 --> 00:05:37,890
union select or whether it's just a dump. The users,

64
00:05:38,050 --> 00:05:41,138
there's a lot more you can do with SQL in my opinion, than you can

65
00:05:41,164 --> 00:05:45,306
with XSS. And here I just displayed an example that you could use

66
00:05:45,488 --> 00:05:49,226
if this password field was indeed vulnerable. And for this to work over

67
00:05:49,248 --> 00:05:53,126
here, we need to make sure that the email is actually correct in the database

68
00:05:53,158 --> 00:05:56,398
and it actually exists. Otherwise we need to flip these parameters and we need to

69
00:05:56,404 --> 00:05:59,966
hope that the email field is also injections. And to show how this would look

70
00:05:59,988 --> 00:06:03,710
like on the code base, we could just see that it's actually selecting all

71
00:06:03,780 --> 00:06:07,298
from users, where email equals this

72
00:06:07,464 --> 00:06:10,738
and password equals or one equals one and comment the rest of the

73
00:06:10,744 --> 00:06:13,954
code. Now we need this quotation mark here at the start because

74
00:06:13,992 --> 00:06:17,070
it actually closes the password variable,

75
00:06:17,230 --> 00:06:20,406
allowing us to actually put SQL statements after it.

76
00:06:20,508 --> 00:06:23,974
Now once again we're back on the OASP gshop. And just

77
00:06:24,012 --> 00:06:27,334
to test that same thing, and just to test that it works,

78
00:06:27,372 --> 00:06:31,642
you can try the same thing on the login maybe whatever at

79
00:06:31,776 --> 00:06:34,460
Gmail, whatever.

80
00:06:35,070 --> 00:06:39,210
And password or one

81
00:06:39,280 --> 00:06:43,014
equals one comment. Now I dont think

82
00:06:43,072 --> 00:06:46,266
this will actually work for now. Yeah. Invalid email or password

83
00:06:46,298 --> 00:06:50,266
because this is not a valid email. But if we don't

84
00:06:50,298 --> 00:06:54,306
know the email, we could always just try to

85
00:06:54,328 --> 00:06:57,982
put that statement here or one equals

86
00:06:58,046 --> 00:07:01,442
one comment, the rest of the code and literally whatever

87
00:07:01,496 --> 00:07:04,180
over here. And if we log in,

88
00:07:05,190 --> 00:07:09,106
we have admin at juice shop. Now. Just signing

89
00:07:09,138 --> 00:07:12,466
into someone's account is really the least you could do with an SQL injection

90
00:07:12,498 --> 00:07:15,826
vulnerability. If you really wanted to, you could go on SQL

91
00:07:15,858 --> 00:07:19,270
map and fully dump the database contents,

92
00:07:19,350 --> 00:07:22,714
which actually I might show if we go here on

93
00:07:22,752 --> 00:07:26,902
this DVWA. Go on SQL

94
00:07:26,966 --> 00:07:30,170
injection. I might need to load.

95
00:07:31,170 --> 00:07:35,962
Okay, so I have burp suite loaded. I'll just intercept

96
00:07:36,026 --> 00:07:40,026
the traffic here and user

97
00:07:40,058 --> 00:07:43,098
id one or whatever. Yeah.

98
00:07:43,124 --> 00:07:46,900
So here's a request. So I might actually use this request to

99
00:07:47,510 --> 00:07:51,380
put this into SQL map. I'm just going to copy the cookie that we need

100
00:07:52,390 --> 00:07:56,374
right here and bring

101
00:07:56,412 --> 00:07:58,978
it over here so we could do SQL map,

102
00:07:59,074 --> 00:08:02,040
tacu the link.

103
00:08:02,490 --> 00:08:06,550
And I've already done this, so just

104
00:08:06,620 --> 00:08:10,470
add in the cookie just in case it changed.

105
00:08:10,630 --> 00:08:13,914
It didn't for some reason. But yeah, we're just going

106
00:08:13,952 --> 00:08:17,900
to enumerate these database like this

107
00:08:18,910 --> 00:08:22,366
and we can see that we have DBWA and information

108
00:08:22,468 --> 00:08:26,400
schema. And if we wanted to, we can just select the

109
00:08:27,490 --> 00:08:30,586
DVWA and then enumerate

110
00:08:30,618 --> 00:08:34,690
the tables. We have guest book and users.

111
00:08:35,510 --> 00:08:37,970
We just go for users,

112
00:08:39,030 --> 00:08:40,050
users.

113
00:08:42,310 --> 00:08:46,790
And I didn't dump it columns

114
00:08:48,970 --> 00:08:52,374
and say we wanted the password or user id

115
00:08:52,412 --> 00:08:56,226
or anything. We could just go here and then select which column

116
00:08:56,258 --> 00:08:59,366
we want. In this case password dump. Since I've already done this,

117
00:08:59,388 --> 00:09:03,110
we have everything here. And then we actually have the MD five hash

118
00:09:03,270 --> 00:09:06,682
which you could just try crack. I'm sure it's probably going to be some simple

119
00:09:06,736 --> 00:09:10,634
hashes to crack because it's a vulnerable website. But yeah, this really shows

120
00:09:10,672 --> 00:09:14,160
the extent of SQL injections and how they can really damage your business.

121
00:09:14,930 --> 00:09:19,242
Now moving on from SQL injections, I just wanted to talk about broken authentication,

122
00:09:19,386 --> 00:09:22,762
which in my opinion is not as bad as SQL injections,

123
00:09:22,906 --> 00:09:26,194
but it still can cause a lot of damage and it's just a bad look

124
00:09:26,232 --> 00:09:28,340
to have any of these vulnerabilities anyway.

125
00:09:29,190 --> 00:09:33,006
Now with broken authentication, there's actually several types

126
00:09:33,038 --> 00:09:36,226
of it. For example, there's insecure cookies, which is what we're going to talk

127
00:09:36,248 --> 00:09:39,766
about. Now. There's unsafe password policy, which is when you allow your

128
00:09:39,788 --> 00:09:43,526
user to pick whatever password he or she wants, even if it's just like

129
00:09:43,548 --> 00:09:47,346
a three character password, which can be easily crackable. Now on the more serious

130
00:09:47,378 --> 00:09:51,046
side of broken authentication, there's also no request restrictions,

131
00:09:51,158 --> 00:09:54,742
which is probably one of the worst ones because it lets

132
00:09:54,886 --> 00:09:59,034
any user make a limited amount of requests to these

133
00:09:59,072 --> 00:10:03,030
login or sign up field for example, which just allows them to brute force

134
00:10:03,110 --> 00:10:06,046
these password of any users they want and they can just leave it running.

135
00:10:06,148 --> 00:10:09,406
Now you can easily change the amount of requests that you want a user to

136
00:10:09,428 --> 00:10:13,214
make per hour, for example on the back end. So that should really

137
00:10:13,252 --> 00:10:17,250
just be a quick fix. And moving on to unhashed passwords, this is also

138
00:10:17,320 --> 00:10:20,786
pretty serious because if you're storing user passwords in

139
00:10:20,808 --> 00:10:23,966
plain text in the database, say in your MySQL database

140
00:10:23,998 --> 00:10:27,814
or your MongoDB database, because by doing so you can allow the

141
00:10:27,852 --> 00:10:31,154
effects of any other vulnerabilities such as SQL

142
00:10:31,202 --> 00:10:34,486
injection to be way worse. Because now if someone can perform an

143
00:10:34,508 --> 00:10:38,594
SQL injection on your website and instead of receiving passed

144
00:10:38,642 --> 00:10:42,150
MD five passwords, they just receive plain text passwords,

145
00:10:42,230 --> 00:10:45,674
then the purpose of making a really complicated and hard

146
00:10:45,712 --> 00:10:49,654
to crack password just gets defeated. Now even with this broken authentication,

147
00:10:49,702 --> 00:10:52,822
it should be really simple to just encrypt users passwords.

148
00:10:52,886 --> 00:10:56,714
For example, you can use bcryptjs if you're using a node JS

149
00:10:56,762 --> 00:11:00,526
backend to easily encrypt these passwords and that should at least increase your

150
00:11:00,548 --> 00:11:04,090
security by a bit. So yeah, all of these types of broken authentication,

151
00:11:04,170 --> 00:11:07,506
they all have their respective solution down here. But moving on

152
00:11:07,528 --> 00:11:11,522
to the insecure cookie type of broken authentication, we can see here that

153
00:11:11,576 --> 00:11:14,830
we have a cookie called privilege with a value of user.

154
00:11:14,910 --> 00:11:17,986
Now the reason as to why this isn't optimal is because anyone can

155
00:11:18,008 --> 00:11:20,706
just change the value of the cookies as something really predictable,

156
00:11:20,818 --> 00:11:24,642
say admin for example, which if you're having this type of cookie

157
00:11:24,786 --> 00:11:28,246
structure, then you probably have a value for admin that

158
00:11:28,268 --> 00:11:31,626
might lead to a dashboard, for example. Now the point is that you should just

159
00:11:31,648 --> 00:11:34,966
not have insecure cookies like this and instead just make unique

160
00:11:34,998 --> 00:11:38,694
cookies to anyone that visits the website, say with JWT

161
00:11:38,742 --> 00:11:42,334
cookies, or just anything that's encrypted and unique for each user so

162
00:11:42,372 --> 00:11:46,634
that an attacker can't just guess another user's cookie. Now carrying

163
00:11:46,682 --> 00:11:50,298
on, I also wanted to mention directory exploits and specifically

164
00:11:50,394 --> 00:11:54,394
local file inclusion vulnerabilities because these are really simple to exploit

165
00:11:54,442 --> 00:11:58,146
and cause basically anyone can dump the contents of the Linux machine hosting the

166
00:11:58,168 --> 00:12:01,554
web server. Now here I've just included the most common example of

167
00:12:01,592 --> 00:12:05,486
vulnerable PHP code, which basically just takes in any directory

168
00:12:05,518 --> 00:12:09,286
from the user and displays its contents. Now to showcase how we

169
00:12:09,308 --> 00:12:12,982
can exploit it, I just took a screenshot of a random domain which just shows

170
00:12:13,036 --> 00:12:16,806
the vulnerable parameter lang where we can replace en,

171
00:12:16,908 --> 00:12:20,018
where presumably it's for language, but basically we

172
00:12:20,044 --> 00:12:23,530
can just replace en with any directory and basically

173
00:12:23,600 --> 00:12:27,258
we can just use path traversal to escape the directory that we're currently in

174
00:12:27,344 --> 00:12:30,618
and to get to for example Etsy shadow

175
00:12:30,714 --> 00:12:34,606
or Etsy password and once again to exploit it. I'm just

176
00:12:34,628 --> 00:12:38,494
going to go back to this DVWA find

177
00:12:38,612 --> 00:12:42,030
file inclusion and I need to

178
00:12:42,180 --> 00:12:44,610
turn off intercept on burp suite.

179
00:12:46,390 --> 00:12:50,098
Yes, and I need to also turn it off here.

180
00:12:50,264 --> 00:12:54,094
And yeah, here we have just an example of the vulnerable

181
00:12:54,142 --> 00:12:56,760
parameter, which in this case is page.

182
00:12:57,210 --> 00:13:01,240
And if we just type for example

183
00:13:04,490 --> 00:13:10,570
here to just escape the directory Etsy password.

184
00:13:11,870 --> 00:13:15,594
These are the contents of the root user and if you wanted to

185
00:13:15,632 --> 00:13:19,190
crack it you should go to Etsy shadow.

186
00:13:19,350 --> 00:13:23,658
And I dont know why nothing loads here, but usually

187
00:13:23,744 --> 00:13:28,394
to crack it you need to unshadow the contents of the password

188
00:13:28,442 --> 00:13:32,398
and shadow and then you can crack the hash that way. And also

189
00:13:32,484 --> 00:13:36,434
aside from just displaying shadow or password, one thing that

190
00:13:36,552 --> 00:13:40,274
you could do is in here you could just put the link to

191
00:13:40,472 --> 00:13:44,114
your local server hosting a reverse shell and then

192
00:13:44,152 --> 00:13:48,174
that turns into RFI where you actually get a remote

193
00:13:48,222 --> 00:13:52,022
shell on the website. So this should really show that you should really

194
00:13:52,076 --> 00:13:55,574
be careful when you write code. And if you're not sure about something

195
00:13:55,612 --> 00:13:59,826
just comment it out and leave it for later or at least before pushing

196
00:13:59,858 --> 00:14:03,386
the branch, get a pen test done on it. There's many ways that you

197
00:14:03,408 --> 00:14:07,270
can just check that your website is relatively secure

198
00:14:07,350 --> 00:14:10,266
before you actually push it, which I'm actually going to talk about later on.

199
00:14:10,368 --> 00:14:13,914
So yeah, like I said, we're going to be going over some prevention methods and

200
00:14:13,952 --> 00:14:17,402
what we can do to generally make our website secure.

201
00:14:17,466 --> 00:14:21,054
But it's not just websites, this can also be relevant to your servers or whatever

202
00:14:21,092 --> 00:14:24,834
you want to keep secure. So one thing that I actually found useful was

203
00:14:24,872 --> 00:14:28,482
listening to your package manager. Now the first

204
00:14:28,536 --> 00:14:32,494
two screenshots are actually react and anytime you do NPMI

205
00:14:32,542 --> 00:14:36,366
or NPM install to install any new package basically just highlights

206
00:14:36,398 --> 00:14:39,766
anything it wants you to take a look at, which most of the

207
00:14:39,788 --> 00:14:42,966
time it's probably nothing important,

208
00:14:43,148 --> 00:14:46,454
but the times that it can be something serious, it might be worth taking

209
00:14:46,492 --> 00:14:50,102
a look at it and checking with your senior developer.

210
00:14:50,166 --> 00:14:53,402
Now about checking with your senior developer. Just getting

211
00:14:53,456 --> 00:14:56,790
code reviews done in general are really useful.

212
00:14:56,950 --> 00:15:01,066
Again to make sure that your inputs are sanitized, that you don't have some LFI

213
00:15:01,098 --> 00:15:04,234
vulnerabilities or just some basic mistakes that junior

214
00:15:04,282 --> 00:15:07,774
developers can make, even seniors, that can lead to

215
00:15:07,812 --> 00:15:11,246
serious vulnerabilities. Now most companies already have

216
00:15:11,348 --> 00:15:14,714
a system of code reviews in place, but if your company doesn't

217
00:15:14,762 --> 00:15:18,146
already have these code reviews in place, it might be worth bringing that up.

218
00:15:18,248 --> 00:15:21,950
And another thing aside from Code reviews is just updating your libraries.

219
00:15:22,030 --> 00:15:26,574
For example, Apache had vulnerabilities before where they had some serious Tomcat

220
00:15:26,622 --> 00:15:30,134
version vulnerabilities. I can't remember exactly which, but I remember

221
00:15:30,172 --> 00:15:33,826
some black box that I did involve some Tomcat vulnerabilities

222
00:15:33,938 --> 00:15:37,426
which you could just easily exploit with metasploit. They had a bunch of modules

223
00:15:37,458 --> 00:15:40,966
on that, and for another vulnerability there was these Grafana

224
00:15:40,998 --> 00:15:44,618
path reversal exploit that was found. So yeah,

225
00:15:44,704 --> 00:15:48,058
it's really important that you make sure that all your libraries are updated, that you

226
00:15:48,064 --> 00:15:51,974
get these code reviews done, and that you also listen to your package manager.

227
00:15:52,022 --> 00:15:55,194
Now if your company can't afford the correct employees to do

228
00:15:55,232 --> 00:15:58,462
code reviews, you could always just go open source. But also

229
00:15:58,516 --> 00:16:01,246
going open source you just kind of have to hope that there's going to be

230
00:16:01,268 --> 00:16:05,118
more good people trying to help you with your code than bad people

231
00:16:05,204 --> 00:16:08,546
trying to craft exploits for your website or whatever it is

232
00:16:08,568 --> 00:16:12,574
that you're developing. Now I probably mentioned this before, but you should most likely

233
00:16:12,622 --> 00:16:15,794
get a pen test scheduled before publishing a new

234
00:16:15,832 --> 00:16:19,106
branch. Now again, most companies do have systems like

235
00:16:19,128 --> 00:16:22,374
this in place where they have full time pen testers, where every time a new

236
00:16:22,412 --> 00:16:25,574
branch is supposed to get passed before it actually gets pushed to the public,

237
00:16:25,692 --> 00:16:29,126
they have pen testers check it and make sure that everything's secure. But what

238
00:16:29,148 --> 00:16:32,650
if you just don't have money for a pen tester? You're just a small

239
00:16:32,720 --> 00:16:36,234
business. Well, in that case, the best thing I could

240
00:16:36,272 --> 00:16:39,670
recommend is just to use these surface level vulnerability

241
00:16:39,750 --> 00:16:42,922
scanners like Nessus or whatever

242
00:16:42,976 --> 00:16:46,926
it is, to just generate a user friendly chart or

243
00:16:47,028 --> 00:16:50,126
list of all these vulnerabilities that you may have. So in here you can see

244
00:16:50,148 --> 00:16:53,310
I listed out NMap, which is probably one of the more

245
00:16:53,380 --> 00:16:56,606
advanced ones out of all of these because this is something that you

246
00:16:56,628 --> 00:16:59,666
need to do on the command line and you need to kind of learn all

247
00:16:59,688 --> 00:17:02,686
the companies for it. But if you just search up how to do a script

248
00:17:02,718 --> 00:17:06,322
can on Nmap, that should give you a rough idea on

249
00:17:06,376 --> 00:17:09,858
how secure website is. And aside from NMap, there's Nessus, which is

250
00:17:09,864 --> 00:17:13,014
really user friendly. Once you get it set up, all you need to do is

251
00:17:13,052 --> 00:17:16,646
just select what type of scan you want and it will perform it for

252
00:17:16,668 --> 00:17:20,330
you. Once it's done, it will give you a list of all the possible

253
00:17:20,400 --> 00:17:23,914
vulnerabilities that you may have. And while we're talking about

254
00:17:24,032 --> 00:17:27,882
vulnerability scanners, I also wanted to mention Openvas. It's like

255
00:17:27,936 --> 00:17:31,290
Nessus, but way more thorough. It has way more

256
00:17:31,360 --> 00:17:35,262
vulnerabilities to check. It generally takes way longer, but it's really worth

257
00:17:35,316 --> 00:17:39,038
the time and effort that you put into getting an Openvascan set up.

258
00:17:39,124 --> 00:17:43,146
Now if you know that you've recently set up a reverse proxy

259
00:17:43,258 --> 00:17:46,866
or a web application firewall like Cloudflare, then you should probably

260
00:17:46,968 --> 00:17:50,962
take a look at security trails, tiny and zoomai and going

261
00:17:51,016 --> 00:17:54,754
in order. Security trail just checks if you've had

262
00:17:54,872 --> 00:17:58,430
the actual IP of your server leaked. And it also lists out

263
00:17:58,440 --> 00:18:01,558
all the MX emails, a lot of information that it can pick up on the

264
00:18:01,564 --> 00:18:05,254
website. And Tinye and Zumai, they're both really similar. They're really

265
00:18:05,292 --> 00:18:08,934
powerful search engines that once again help

266
00:18:08,972 --> 00:18:12,598
you see if you've had the actual ip of your website leaked.

267
00:18:12,694 --> 00:18:16,458
And I've actually used Zoomi and security trails for a pen test I've done

268
00:18:16,544 --> 00:18:20,086
where I actually was able to find the actual ip

269
00:18:20,198 --> 00:18:23,450
of the web server, which was probably really lucky.

270
00:18:23,530 --> 00:18:27,166
But it just goes to show that these tools are really easy to

271
00:18:27,188 --> 00:18:30,698
use yet really effective. I also forgot to mention Mascan,

272
00:18:30,794 --> 00:18:34,206
which is just an ip port scanner, just to make sure that

273
00:18:34,228 --> 00:18:37,714
there's no ports that you don't want open. Like you might have an FTP port

274
00:18:37,752 --> 00:18:41,346
open that you don't want. You might have an SSH port open that you don't

275
00:18:41,368 --> 00:18:45,250
want. Just generally making sure that the ports that you have open

276
00:18:45,320 --> 00:18:48,534
are the ports that you need to have the website running. And that just really

277
00:18:48,572 --> 00:18:51,378
limits the attack vectors that are available for attackers.

278
00:18:51,554 --> 00:18:55,318
Now this is a really important one. Setting up an ACL is

279
00:18:55,404 --> 00:18:58,200
one of the things that you definitely do want.

280
00:18:58,730 --> 00:19:02,086
And here you're actually seeing a real screenshot

281
00:19:02,198 --> 00:19:05,466
of a pen test I did where I

282
00:19:05,488 --> 00:19:08,470
actually had to blur out the ip because I don't want that to be leaked.

283
00:19:08,630 --> 00:19:12,058
But yeah, basically I was trying to access a MySQL server or a

284
00:19:12,064 --> 00:19:15,486
MySQL server. And on the third line you can

285
00:19:15,508 --> 00:19:19,374
see that my ip was not allowed to connect to that MySQL server because

286
00:19:19,412 --> 00:19:22,446
of the ACL that they had set up. And in the diagram you can actually

287
00:19:22,468 --> 00:19:26,930
see that my ip tried to contact the server and it was rejected.

288
00:19:27,270 --> 00:19:30,818
But another ip that might be in the

289
00:19:30,984 --> 00:19:34,354
ACL list was actually accepted and was able to get through.

290
00:19:34,472 --> 00:19:37,766
So it might be really worth implementing this. And the last thing

291
00:19:37,788 --> 00:19:41,890
I wanted to talk about was how you could prevent lateral movement

292
00:19:42,050 --> 00:19:45,286
and what this is. It's basically once an

293
00:19:45,308 --> 00:19:49,042
attacker gets a foothold on one machine that was easy to exploit,

294
00:19:49,106 --> 00:19:52,842
whether they use LFI to get remote control execution or

295
00:19:52,896 --> 00:19:56,294
anything that could get them remote control access to one machine.

296
00:19:56,422 --> 00:20:00,154
What we're trying to do here is we're trying to prevent lateral movement from taking

297
00:20:00,192 --> 00:20:04,474
place so they can access the more important machines. And generally this is overlooked

298
00:20:04,522 --> 00:20:08,554
because most people don't think that attacks are going to get into one machine

299
00:20:08,602 --> 00:20:12,554
anyway. But it's usually that one vulnerable machine that allows the attackers

300
00:20:12,682 --> 00:20:16,350
to get access to everything else using privilege escalation.

301
00:20:16,430 --> 00:20:19,854
And here you can actually see that I'm showing a terminal

302
00:20:19,902 --> 00:20:23,342
picture of a. I believe that's linpie's output,

303
00:20:23,486 --> 00:20:27,826
which, in red, it highlights all the directories that

304
00:20:27,928 --> 00:20:31,606
might be worth taking a look at, because they

305
00:20:31,628 --> 00:20:35,318
might be that one thing that allows for privilege escalation to take place in

306
00:20:35,324 --> 00:20:38,834
order to get access to all the other machines. And the leaks framework

307
00:20:38,882 --> 00:20:43,338
is actually just one of the tools that attackers can use to perform

308
00:20:43,424 --> 00:20:47,178
lateral movement and get that privilege escalation done.

309
00:20:47,264 --> 00:20:50,614
There's a really popular one called bloodhound, which is way more in depth.

310
00:20:50,662 --> 00:20:53,806
It actually displays a whole map of

311
00:20:53,828 --> 00:20:57,018
the entire network of everything it could find. It's just generally

312
00:20:57,114 --> 00:21:00,974
way more in depth and just highlights absolutely everything that even

313
00:21:01,012 --> 00:21:04,126
has a chance of getting you that rc on the next machine. So,

314
00:21:04,148 --> 00:21:07,598
yeah, that should really just show the importance of integrating security

315
00:21:07,684 --> 00:21:11,258
measures throughout development. You really want to make sure that all your inputs

316
00:21:11,274 --> 00:21:14,998
are sanitized, that you don't have some LFI vulnerabilities. And it's not just

317
00:21:15,044 --> 00:21:18,678
vulnerabilities that I displayed in this presentation. It's just a

318
00:21:18,684 --> 00:21:21,862
bunch of CVE vulnerabilities that you really want to look out for,

319
00:21:21,916 --> 00:21:25,078
since it can really cause a lot of damage. So, yeah, with that being said,

320
00:21:25,164 --> 00:21:28,246
thanks for listening. If you have any questions, you can email me on

321
00:21:28,268 --> 00:21:30,610
my proton mail, or you can just contact me through LinkedIn.

