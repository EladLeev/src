1
00:00:17,610 --> 00:00:20,958
Everyone stop what you're doing and put down the Javascript. We're going to show you

2
00:00:20,964 --> 00:00:24,314
how you can level up with the fundamentals of web development. I'm Colby Fayock,

3
00:00:24,362 --> 00:00:27,346
I'm the one hug, BB and Kylo Ren over there. I work on the UX

4
00:00:27,378 --> 00:00:30,358
and front end side of things at element 84. You can find me pretty much

5
00:00:30,364 --> 00:00:33,046
anywhere on the web by just googling my name as I'm the only one in

6
00:00:33,068 --> 00:00:35,878
the world. We're going to start with the story here we have two people at

7
00:00:35,884 --> 00:00:39,026
the beginning of their career. On the left we have Mark. He's a jolly fellow,

8
00:00:39,058 --> 00:00:42,226
he likes the color red. And on the right we have Luke. He's Mark's brother,

9
00:00:42,258 --> 00:00:44,758
he's more of a green kind of guy. Both of our friends are trying to

10
00:00:44,764 --> 00:00:47,526
switch their careers and they're going to give coding a try. So they both try

11
00:00:47,548 --> 00:00:50,606
to find a boot camp to dive right in. First we have Mark. Mark found

12
00:00:50,628 --> 00:00:54,094
this cool bootcamp that promises to make you a JavaScript ninja. Better yet,

13
00:00:54,132 --> 00:00:57,386
it only takes one month. They make sure they teach you the most popular frameworks

14
00:00:57,418 --> 00:01:00,986
available right now. This will make you super marketable. Trend we have Luke.

15
00:01:01,098 --> 00:01:04,174
Luke took a little bit of a different route. He found the course that takes

16
00:01:04,212 --> 00:01:07,050
a little bit longer, but he'll know how to build a whole website with just

17
00:01:07,060 --> 00:01:10,962
HTML and CSS. He'll also learn some Javascript, but they didn't promises any specific

18
00:01:11,016 --> 00:01:14,146
framework. Both of youre friends decide to submit their resume for a job at

19
00:01:14,168 --> 00:01:17,726
Oneup Inc. It's a junior front end dev position. The description

20
00:01:17,758 --> 00:01:20,706
for both of them is a near perfect fit. Luckily they both get a call

21
00:01:20,728 --> 00:01:23,766
back for a code challenge. Once they get on a call they'll find out that

22
00:01:23,788 --> 00:01:27,366
their task is to take this mockup and transform it into a website. They'll have

23
00:01:27,388 --> 00:01:30,630
about 45 minutes to do this and then afterwards they'll talk about their work.

24
00:01:30,700 --> 00:01:33,702
Not too bad, right? So first up is Mark. This is easy for Mark,

25
00:01:33,756 --> 00:01:36,518
he just got but of boot camp where he learned how to use react and

26
00:01:36,524 --> 00:01:39,966
the job posting says they want react so that's perfect. Then he'll use

27
00:01:40,028 --> 00:01:43,498
it to build a challenge. He can also use some CSS and JavaScript.

28
00:01:43,594 --> 00:01:46,846
He recently read a little bit about that and it should be pretty easy to

29
00:01:46,868 --> 00:01:50,606
integrate for a quick win. Then we have Luke. He again also takes a little

30
00:01:50,628 --> 00:01:54,026
bit different of a route. The website looks pretty simple, right? So he thinks

31
00:01:54,058 --> 00:01:56,926
he can do it with some plain old HTML, layer on a little bit of

32
00:01:56,948 --> 00:02:00,618
Css and that should do the trick. So let's compare the solutions. See, Mark didn't

33
00:02:00,634 --> 00:02:03,578
really get super far. He only got a little bit. He only got the title.

34
00:02:03,674 --> 00:02:07,346
Luke seemed to get pretty far. It's not perfect, some mismatched colors and sizes,

35
00:02:07,378 --> 00:02:10,694
but it's a good start. So what happened with Mark? Let's just say that Mark

36
00:02:10,732 --> 00:02:13,830
didn't have a great interview. First, Mark tried to get a react app going.

37
00:02:13,900 --> 00:02:17,666
He forgot that he needed to configure a package manager in order to install react.

38
00:02:17,778 --> 00:02:20,838
Okay, so moving past that, he thinks he figured it out. He was able to

39
00:02:20,844 --> 00:02:24,182
quickly look up an example. He can add some external scripts to load react.

40
00:02:24,246 --> 00:02:27,514
Now he can get moving, but dang, that can't load in the browser. That's not

41
00:02:27,552 --> 00:02:30,902
native Javascript. Great. So he figured out that he can include Babel.

42
00:02:30,966 --> 00:02:33,706
With that he can add the Babel type to the script, and now he can

43
00:02:33,728 --> 00:02:37,002
use JSX. He's in business. But oh man, we're still getting an error.

44
00:02:37,066 --> 00:02:40,238
Let's check the react docs quick again. All right, he needs to wrap it and

45
00:02:40,244 --> 00:02:43,646
create element. Awesome. So that should work. And it does. So now we

46
00:02:43,668 --> 00:02:46,906
can start getting moving on the website. So Mark adds his header and it renders

47
00:02:46,938 --> 00:02:50,126
and we're making progress. But then he realizes that he needs to add styles to

48
00:02:50,148 --> 00:02:53,038
make it look right. He can't install it from NPM. So again he's being to

49
00:02:53,044 --> 00:02:56,166
have to look for an external link again. But oh no. By the time that

50
00:02:56,188 --> 00:02:59,494
he actually found a solution, he ran out of time. He spent so much time

51
00:02:59,532 --> 00:03:02,278
debugging this setup that he never actually had a lot of time to build the

52
00:03:02,284 --> 00:03:05,606
site. On the other hand, Luke broke out his favorite text editor just

53
00:03:05,628 --> 00:03:08,774
like Mark did. But instead of trying to deal with the packages, he just started

54
00:03:08,812 --> 00:03:12,110
with some basic HTML to create a header. He knew he was able to throw

55
00:03:12,130 --> 00:03:15,446
together a few HTML elements. He used the header and the nav tags,

56
00:03:15,478 --> 00:03:19,046
and nice and semantic for the content. He added a main tag, an image

57
00:03:19,078 --> 00:03:22,470
and some text. Figured he could use some CSS to position it all correctly.

58
00:03:22,550 --> 00:03:25,050
So he did. He added some styles to make it look right.

59
00:03:25,120 --> 00:03:28,494
Flexbox makes this nice and easy to do. So he flexed the header, flex the

60
00:03:28,532 --> 00:03:31,710
body content, flexbox, all the things, and he was good to go.

61
00:03:31,780 --> 00:03:34,622
And with all of that, Luke ended up with a lot more progress than Mark.

62
00:03:34,676 --> 00:03:37,854
So of course he landed the job. He had something to talk about over those

63
00:03:37,892 --> 00:03:41,466
last 15 minutes. He went over why he chose Flexbox, why he used the header

64
00:03:41,498 --> 00:03:44,334
and the nav tags. He talked, but what he could have done next to fix

65
00:03:44,372 --> 00:03:47,650
some of that style. On the other hand, Mark was still stuck at the beginning.

66
00:03:47,730 --> 00:03:50,726
He didn't have much to talk about. He was stuck trying to fumbling around with

67
00:03:50,748 --> 00:03:54,246
the project with react. The truth of this is that the story is

68
00:03:54,268 --> 00:03:57,586
only slightly exaggerated. I didn't use real names or likeness,

69
00:03:57,698 --> 00:04:01,834
but this situation happens exactly like this quite often. Of course,

70
00:04:01,872 --> 00:04:05,894
someone super experienced with react might not have hit these same roadblocks, but I've personally

71
00:04:05,942 --> 00:04:10,086
sat through interviews watching candidates struggle through these exact same types of challenges,

72
00:04:10,198 --> 00:04:14,378
and this situation isn't unique to react. This is pretty much any JavaScript framework.

73
00:04:14,474 --> 00:04:17,950
But job seekers come into can interview wanting to impress everyone

74
00:04:18,020 --> 00:04:21,374
by using the latest, coolest tools, and I totally don't blame them,

75
00:04:21,412 --> 00:04:25,194
but they only set themselves up for failure. And while every company, every candidate,

76
00:04:25,242 --> 00:04:28,866
and every interview are each unique, there's a common thread. It's easy to want

77
00:04:28,888 --> 00:04:32,466
to jump in and learn exciting new tools, and that's not even necessarily a

78
00:04:32,488 --> 00:04:35,778
bad thing. Part of why I love what I do is because it's fun.

79
00:04:35,864 --> 00:04:39,166
It's the kind of thing that keeps me inspired. But dealing with an interview

80
00:04:39,198 --> 00:04:42,534
is stressful in the first place. And while not every interview is going to wind

81
00:04:42,572 --> 00:04:46,294
up like that, we can set ourselves up with a good foundation which will

82
00:04:46,332 --> 00:04:49,458
let us have a better understanding of the tools that we're working with. So we're

83
00:04:49,474 --> 00:04:52,246
going to talk about how we can level up, we're going to talk about why

84
00:04:52,268 --> 00:04:54,854
these things can make a difference, and we're going to learn some cool tricks along

85
00:04:54,892 --> 00:04:58,566
the way. So we'll start with HTML. I would imagine most of us have at

86
00:04:58,588 --> 00:05:01,706
least heard of HTML before, but what exactly is it? If you didn't

87
00:05:01,738 --> 00:05:05,694
know, it stands for hypertext markup language. It's the essential building block of all

88
00:05:05,732 --> 00:05:08,766
website, and it has been since probably before most of us have

89
00:05:08,788 --> 00:05:11,886
even heard of HTML. A lot of us probably don't have to write this by

90
00:05:11,908 --> 00:05:15,118
hand anymore, given react and other libraries do it for us.

91
00:05:15,204 --> 00:05:18,482
But this is the basic skeleton of a web page. We have our doc type

92
00:05:18,536 --> 00:05:22,034
HTML tag head and body with a simple h one. We're probably more

93
00:05:22,072 --> 00:05:25,998
familiar with this, though. The actual skeleton of our page gets abstracted away. We define

94
00:05:26,014 --> 00:05:29,506
our page pretty much only by the content, so instead of our HTML in our

95
00:05:29,528 --> 00:05:32,834
head, we might only see that h one. The cool thing about react and JSX

96
00:05:32,882 --> 00:05:35,894
though, is we can really write any HTML we want. For the most part,

97
00:05:35,932 --> 00:05:39,286
it's going to be valid. This isn't groundbreaking, but it sets the tone for some

98
00:05:39,308 --> 00:05:42,882
of the points ahead, but ultimately JSX gets compiled down to HTML,

99
00:05:42,946 --> 00:05:46,186
the same HTML that we can write by hand. We just now have tooling to

100
00:05:46,208 --> 00:05:49,546
provide us with a better way and more efficient way to generate it. So that

101
00:05:49,568 --> 00:05:53,318
Gatsby app that you spun up, yeah, that's creating a bunch of HTML. Next we'll

102
00:05:53,334 --> 00:05:56,302
talk a little bit about CSS. A lot of us probably know that as the

103
00:05:56,356 --> 00:06:00,042
magic that the web design team creates. I've actually heard backend developers

104
00:06:00,106 --> 00:06:03,274
say that they're afraid to touch it. So what exactly is CSS?

105
00:06:03,402 --> 00:06:06,798
CSS stands for cascading style sheets. We have a simple example here,

106
00:06:06,884 --> 00:06:10,338
setting the color to red like Mark's outfit, changing the font size and making all

107
00:06:10,344 --> 00:06:13,746
the letters uppercase, and bringing this into a react we have a few options.

108
00:06:13,848 --> 00:06:17,310
Personally, I'm still a fan of writing my CSS outside of my Javascript.

109
00:06:17,390 --> 00:06:20,386
I like to supercharge it with SAS, but I know a lot of people like

110
00:06:20,408 --> 00:06:23,606
to write their CSS in their JavaScript, and there's a ton of libraries out there

111
00:06:23,628 --> 00:06:26,614
to do just that. But similar to the HTML we saw before, this all gets

112
00:06:26,652 --> 00:06:30,374
compiled down to our basic CSS. Regardless of the type of tool we use,

113
00:06:30,412 --> 00:06:33,930
whether it's SAS or CSS and JS, this is ultimately what we get.

114
00:06:34,000 --> 00:06:37,546
The only difference is how it's served, whether it's an external link, embedded or

115
00:06:37,568 --> 00:06:40,250
in line. And though a lot of this might not be new to people,

116
00:06:40,320 --> 00:06:43,514
aside from the gasp I heard when I said that I write my CSS outside

117
00:06:43,552 --> 00:06:46,654
of my Javascript, but it's important to understand the foundation and

118
00:06:46,692 --> 00:06:49,934
how these basic things work. Like did you know that the browser has actually

119
00:06:49,972 --> 00:06:53,422
fixed the HTML for you? This can be really helpful, especially when starting

120
00:06:53,476 --> 00:06:56,626
out, but it can also be confusing if youre don't really understand what's going on.

121
00:06:56,728 --> 00:06:59,902
Like here, you can't nest a div inside of a paragraph tag.

122
00:06:59,966 --> 00:07:03,458
Particularly you can't nest another block level element inside of

123
00:07:03,464 --> 00:07:06,994
a paragraph tag. So the browser tries to fix this for us, but this actually

124
00:07:07,032 --> 00:07:10,770
messes up our intent. Here we were expecting the div to also be purple,

125
00:07:10,850 --> 00:07:14,514
but because the browser fixes it, it pulls the div outside of the paragraph

126
00:07:14,562 --> 00:07:17,986
tag and the paragraph style no longer cascades. Or that in CSS

127
00:07:18,098 --> 00:07:21,474
the vertical padding is actually relative to the width. Ignore the jankiness

128
00:07:21,522 --> 00:07:24,794
while trying to show the animation here, but we can take advantage of this

129
00:07:24,832 --> 00:07:28,726
little quirk. Sometimes your best option is to use a background image,

130
00:07:28,838 --> 00:07:31,974
but the tricky thing with that is that it can't scale the width and height

131
00:07:32,022 --> 00:07:35,338
easily like we can an actual image. Instead, what we can do is set the

132
00:07:35,344 --> 00:07:38,446
height to zero, which is a little bit strange. But then we can use the

133
00:07:38,468 --> 00:07:42,366
width divided by the height and percentage form to set a vertical padding. So this

134
00:07:42,388 --> 00:07:45,978
way, no matter the width, the height will always be the correct ratio.

135
00:07:46,074 --> 00:07:48,866
So what's the point I'm trying to get with all this? While those things are

136
00:07:48,888 --> 00:07:52,126
handy, to know, those two things alone won't make you a better developer.

137
00:07:52,238 --> 00:07:55,554
But what I'm getting at is understanding your tooling from a more

138
00:07:55,592 --> 00:07:58,770
fundamental level will help you level up your game. So how can we do that?

139
00:07:58,840 --> 00:08:02,086
The first thing we can apply this to is SEO. Many of us probably have

140
00:08:02,108 --> 00:08:05,078
heard of this in one form of another, but might not understand what it is.

141
00:08:05,164 --> 00:08:08,802
SEO stands for search engine optimization. It can be super complex

142
00:08:08,866 --> 00:08:12,058
with keyword research and strategy, but we're going to focus on this stuff that we

143
00:08:12,064 --> 00:08:15,466
can control as developers. So our ultimate goal with SEO is to

144
00:08:15,488 --> 00:08:19,002
present our content in a way that makes it easy for search engines like Google

145
00:08:19,056 --> 00:08:22,250
to understand. The most important part here is content,

146
00:08:22,400 --> 00:08:25,854
but it also includes the tags you use to present that content and

147
00:08:25,892 --> 00:08:29,146
metadata you use to make it look right in the search. Most websites

148
00:08:29,178 --> 00:08:32,046
have a healthy mix of different ways for people to get to their site.

149
00:08:32,148 --> 00:08:35,694
Some might be ad traffic, others social media. But there's also people trying

150
00:08:35,732 --> 00:08:39,378
to look for something in a search engine who could potentially find your site at

151
00:08:39,384 --> 00:08:42,994
the top of that list. This helps bring in more traffic, which could ultimately help

152
00:08:43,032 --> 00:08:46,414
your website or company grow. Like here. Aside from the free codecamp

153
00:08:46,462 --> 00:08:49,794
article, my traffic from my website pulls in the most from organic

154
00:08:49,842 --> 00:08:53,714
search. Of course, my modest blog doesn't really get the most traffic on the Internet,

155
00:08:53,762 --> 00:08:56,790
but how you create your page matters. For example,

156
00:08:56,860 --> 00:09:00,562
if your website is a bunch of images with no alts or text anywhere,

157
00:09:00,626 --> 00:09:03,558
how is Google going to be able to know what your website's about? So what

158
00:09:03,564 --> 00:09:06,866
can we do better? Well, we can try to be more conscious about the HTML

159
00:09:06,898 --> 00:09:10,586
we use when creating website. More often than not, it doesn't take much more effort

160
00:09:10,618 --> 00:09:13,454
to use a different and more meaningful tag. One thing you can try to do

161
00:09:13,492 --> 00:09:16,814
is maintain a logical page outline for your website. You shouldn't have every

162
00:09:16,852 --> 00:09:19,790
single one of your titles as an h one. That's not helping anybody.

163
00:09:19,940 --> 00:09:22,878
But similar to what you would see in a bloke, you can organize your content

164
00:09:22,964 --> 00:09:26,298
h one through h six. What this does is queue the search engines

165
00:09:26,314 --> 00:09:29,918
to the hierarchy of your website it's helping to answer what information belongs

166
00:09:29,934 --> 00:09:33,358
under what title. Here we have two examples of image tags. The top one doesn't

167
00:09:33,374 --> 00:09:36,578
have any alt value, but our bottom one has a description of what's happening in

168
00:09:36,584 --> 00:09:38,974
the image. What do you think is more likely to show up on a Google

169
00:09:39,032 --> 00:09:42,406
search? By providing that alt value, we're letting Google know what

170
00:09:42,428 --> 00:09:45,922
that image is. It's adding more content value to the page and ultimately

171
00:09:45,986 --> 00:09:49,542
helping us in our searches somewhat. Similarly, anchor tags are important

172
00:09:49,596 --> 00:09:52,634
for how Google reads your page. It might be easy to tack in a read

173
00:09:52,672 --> 00:09:56,234
more link after a paragraph, but when search engines crawl your page,

174
00:09:56,352 --> 00:09:59,386
they look at what the text is to try to find out more context about

175
00:09:59,408 --> 00:10:03,238
that link. Using the same text everywhere like read more isn't really helping.

176
00:10:03,334 --> 00:10:06,718
Instead, we can add links to the descriptive parts of our page with the

177
00:10:06,724 --> 00:10:10,366
text that we already have. We can make it easier for Google to understand those.

178
00:10:10,468 --> 00:10:13,166
And if you go to your website and click around and you look at the

179
00:10:13,188 --> 00:10:16,478
words in the browser tab, does it say the same thing for every single page?

180
00:10:16,564 --> 00:10:20,194
The tag that controls this is the title tag, and it's more important than just

181
00:10:20,232 --> 00:10:23,826
the browser tab. This is what controls the text that shows up on Google.

182
00:10:23,928 --> 00:10:27,374
Google's getting pretty smart at adding context about the pages, but chances

183
00:10:27,422 --> 00:10:31,142
are it's not going to consider your links as valuable if every single page

184
00:10:31,196 --> 00:10:34,694
shows with the same name of your blog instead of what the page is about.

185
00:10:34,812 --> 00:10:38,594
Next, we'll talk about accessibility. And accessibility is probably one of the more meaningful

186
00:10:38,642 --> 00:10:42,338
points here. A good high level summary of what accessibility is is how usable your

187
00:10:42,364 --> 00:10:45,706
website or app is. For all types of people, this is regardless of

188
00:10:45,728 --> 00:10:49,062
any type of disability. So that means can someone with a being disability

189
00:10:49,126 --> 00:10:52,346
still use your website? Each of us as developers, are responsible for

190
00:10:52,368 --> 00:10:55,994
how our creations are being used. The World Health Organization estimates

191
00:10:56,042 --> 00:10:59,374
that 15% of the world has some sort of disability that's over

192
00:10:59,412 --> 00:11:02,894
prone billion people. Okay, so the whole world isn't going to be using my

193
00:11:02,932 --> 00:11:06,466
site, but how about those 2400 users that visit my website so far

194
00:11:06,488 --> 00:11:10,478
this year? Just hypothetically, if 15% of those people had disabilities,

195
00:11:10,574 --> 00:11:14,002
that's over 360 people. That's still a lot of people.

196
00:11:14,136 --> 00:11:17,746
Imagine websites for businesses like ecommerce that make money from their website,

197
00:11:17,848 --> 00:11:21,254
or websites that people need to help them live. These are

198
00:11:21,292 --> 00:11:25,362
real people who can't use your website because nobody paid attention to it. For businesses,

199
00:11:25,426 --> 00:11:28,898
that's a loss of money. But for people's needs, that's a prescription that they're

200
00:11:28,914 --> 00:11:32,406
having trouble building. We should all take responsibility for the work that we

201
00:11:32,428 --> 00:11:34,906
create. It's just the right thing to do. So what can we do to help

202
00:11:34,928 --> 00:11:37,786
our neighbors and friends? Well, we can try to learn about the different types of

203
00:11:37,808 --> 00:11:41,226
disabilities that people face when using the web. We can try to be conscious about

204
00:11:41,248 --> 00:11:44,486
the decisions we make. Just like SEO, more often than not,

205
00:11:44,528 --> 00:11:47,802
it doesn't take much more of an effort, if at all, to develop with accessibility

206
00:11:47,866 --> 00:11:51,754
in mind. Remember that page outline from before while optimizing for SEO.

207
00:11:51,802 --> 00:11:54,894
By using proper semantic HTML, you're actually helping your screen

208
00:11:54,932 --> 00:11:58,398
readers understand the hierarchy of your website. As a screen reader is

209
00:11:58,404 --> 00:12:01,426
moving up and down the page, it's able to jump over sections that somebody might

210
00:12:01,448 --> 00:12:04,834
not be interested in. Imagine this is going to be really difficult if every single

211
00:12:04,872 --> 00:12:08,114
one of your headings is an h one. So remember our image alt example from

212
00:12:08,152 --> 00:12:12,370
before. See a thread here. A lot of times when we write proper semantic HTML,

213
00:12:12,450 --> 00:12:15,414
we're going to end up providing value in more ways than just one. Here.

214
00:12:15,452 --> 00:12:19,046
If a screen rater lands on one of our images, the person will actually

215
00:12:19,068 --> 00:12:21,698
be able to get to hear what the image is about. It's just another low

216
00:12:21,724 --> 00:12:25,574
effort way to help everyone experience our websites. Lists are also a practical

217
00:12:25,622 --> 00:12:29,082
use of HTML that's used across the web. But far too often I see

218
00:12:29,136 --> 00:12:32,406
code that's logically a list and they're not using HTML list elements.

219
00:12:32,518 --> 00:12:35,706
Next time you create a navigation for your app, don't use a bunch of divs,

220
00:12:35,738 --> 00:12:39,294
use the actual HTML list elements. This will help assistive technology

221
00:12:39,412 --> 00:12:42,938
actually assist the people who's using it, and they're not going to be much harder

222
00:12:42,954 --> 00:12:46,094
to style. Set your style and your list element to none and

223
00:12:46,132 --> 00:12:50,046
you're practically where you were with a div. Buttons are also another important aspect.

224
00:12:50,158 --> 00:12:53,298
While you can get by with a div, there's a lot more to do to

225
00:12:53,304 --> 00:12:56,514
get that to a place where it becomes usable. And oftentimes when I see people

226
00:12:56,552 --> 00:13:00,294
using a div, they don't take that into consideration. With a div, you get nothing

227
00:13:00,332 --> 00:13:03,666
by default, but with a button, while you typically override

228
00:13:03,698 --> 00:13:06,886
it, you get some styles that make it look like a button. You get

229
00:13:06,908 --> 00:13:10,546
a CSS cursor that makes it look clickable. You get an HTML

230
00:13:10,578 --> 00:13:13,818
element that people can use with their keyboard by tabbing and hitting enter.

231
00:13:13,904 --> 00:13:17,434
And did you know that by default, when nested inside of a form, a button

232
00:13:17,472 --> 00:13:20,774
will actually submit a form all by its own? This is handy for a variety

233
00:13:20,822 --> 00:13:24,518
of things, like not having to worry about setting up specific event handlers

234
00:13:24,534 --> 00:13:28,046
when trying to submit your form. The point though is that along with the rest

235
00:13:28,068 --> 00:13:31,246
of HTML I went over, this isn't much more difficult to use.

236
00:13:31,348 --> 00:13:34,778
We just need to become a little bit youre conscious about the HTML we're

237
00:13:34,794 --> 00:13:37,738
using and get in the habit of starting to use it. And lastly, we'll talk

238
00:13:37,764 --> 00:13:41,122
about simplicity. So what do I actually mean by simplicity? We don't always need

239
00:13:41,176 --> 00:13:44,306
extravagant solutions to get our code to work the way we want it to.

240
00:13:44,408 --> 00:13:48,398
Sometimes there's a simpler way to do things that we're struggling to do with JavaScript.

241
00:13:48,494 --> 00:13:51,650
This is probably an exaggerated example of the padding top solution.

242
00:13:51,730 --> 00:13:54,822
Hopefully I got the math in there a bit right, but it shows the difference

243
00:13:54,876 --> 00:13:58,482
on how some CSS can replace all that Javascript logic. Bonus.

244
00:13:58,546 --> 00:14:02,006
At least in this case it's likely to be more performant and bug free.

245
00:14:02,108 --> 00:14:05,386
Now there's absolutely value in learning by doing. If you want to use

246
00:14:05,408 --> 00:14:09,194
a bunch of complex tools to build your blog, that's a great low risk way

247
00:14:09,232 --> 00:14:12,714
to learn those tools. I even encourage it. It's a way to try new things

248
00:14:12,752 --> 00:14:16,254
and learn without actually breaking things. I lost count of the amount

249
00:14:16,292 --> 00:14:19,806
of times that I rebuilt my website before I settled on my current simple one.

250
00:14:19,908 --> 00:14:23,662
But from a work perspective, whether it's a client or from your company's website,

251
00:14:23,796 --> 00:14:27,054
try to think about the solutions in terms of what it will solve. Is that

252
00:14:27,092 --> 00:14:30,706
extra Javascript worth the additional load it's going to take in the browser? How much

253
00:14:30,728 --> 00:14:33,426
time am I going to really save with these tools? So what are some ways

254
00:14:33,448 --> 00:14:36,818
that we can keep things simple? You don't need to rewrite the HTML spec

255
00:14:36,904 --> 00:14:40,114
every time you want to add a new component. More often than not, the Javascript

256
00:14:40,162 --> 00:14:43,826
you write means that the more JavaScript you ship, which can impact the performance

257
00:14:43,858 --> 00:14:47,254
of your app, use what we already have. It's also less work like

258
00:14:47,292 --> 00:14:51,058
here you can use the data list element, which provides a basic autocomplete

259
00:14:51,074 --> 00:14:54,234
feature for an input. You also don't need JavaScript to create a really

260
00:14:54,272 --> 00:14:57,638
simple loading animation that you might see on some of your favorite websites.

261
00:14:57,734 --> 00:15:01,834
Using some CSS we can use a gradient and animation to create this effect.

262
00:15:01,952 --> 00:15:04,890
It's just this small civic here. Better yet, we have it as a class,

263
00:15:04,960 --> 00:15:08,206
which we can extend to any element on our page. And while sometimes we need

264
00:15:08,228 --> 00:15:11,786
to maintain the state of our components, sometimes we don't. If we're only maintaining

265
00:15:11,818 --> 00:15:15,546
that state to style, we can instead use a checked attribute on our input

266
00:15:15,578 --> 00:15:18,866
to change how it looks. Here we're simply showing different text depending on if

267
00:15:18,888 --> 00:15:22,434
the input is checked or not using pure cSS if I asked you before seeing

268
00:15:22,472 --> 00:15:25,506
this how you would make some text responsive, how many of you would jump right

269
00:15:25,528 --> 00:15:29,554
into Javascript? We can actually do this quite nicely with some simple css here

270
00:15:29,592 --> 00:15:32,966
I'm setting the font size of our h one to ten viewport width. It might

271
00:15:32,988 --> 00:15:36,022
look a little choppy in the slides between saving it out as a gif and

272
00:15:36,076 --> 00:15:39,926
presenting it, but I promise you it's buttery smooth that way. It scales really

273
00:15:39,948 --> 00:15:43,626
nice and evenly inside of our browser. Bonus if it gets too small, we can

274
00:15:43,648 --> 00:15:46,854
set some media query breakpoints and keep it all within our css.

275
00:15:46,982 --> 00:15:50,054
And as much as there's some practical good things about the fundamentals,

276
00:15:50,182 --> 00:15:54,022
people are also building out some awesome things with just some HTML and CSS.

277
00:15:54,166 --> 00:15:57,214
This is important because it helps remind us what we can do with what's already

278
00:15:57,252 --> 00:16:00,734
out there. It's important because it helps us keep pushing the boundaries of

279
00:16:00,772 --> 00:16:04,426
what we can do with native tools. There's massive work underway with CSS.

280
00:16:04,538 --> 00:16:07,506
If you haven't heard of Houdini yet, you should definitely look it up. And this

281
00:16:07,528 --> 00:16:11,058
is beyond the tools that we already have. I believe the progress wouldn't be happening

282
00:16:11,144 --> 00:16:14,478
if we just didn't, as developers keep constantly pushing these tools.

283
00:16:14,574 --> 00:16:17,934
So it can be important to have constraints that promote creativity

284
00:16:17,982 --> 00:16:21,206
where you least expect it. Like a trend on codepen to try to come up

285
00:16:21,228 --> 00:16:24,242
with some pure CSS solutions. It's not just challenging,

286
00:16:24,306 --> 00:16:27,890
it's fun. Like it seems like all the talk about cake is breaking the Internet.

287
00:16:27,970 --> 00:16:31,606
So Adam put together this pen that makes anything into cake. The only Javascript in

288
00:16:31,628 --> 00:16:34,874
this pen is to upload an image, but once it's uploaded, the rest is

289
00:16:34,912 --> 00:16:38,026
HTML and CSS. That gives you this effect. When you hover over the

290
00:16:38,048 --> 00:16:41,414
image, it splits open for you to take a piece. Or this pen from Lynn.

291
00:16:41,462 --> 00:16:45,454
It's a CSS only collector's cabinet. I love all the incredible detail put into

292
00:16:45,492 --> 00:16:49,386
it, and you can keep looking around and finding new things. Elad made a coronavirus

293
00:16:49,418 --> 00:16:52,846
game. You're able to fight the pandemic by clicking each virus. There's no

294
00:16:52,868 --> 00:16:57,102
Javascript in here at all, it's all CSS. Elad uses some inputs and

295
00:16:57,156 --> 00:17:00,906
makes the CSS loops to create different animations. This gives us our virus

296
00:17:00,938 --> 00:17:03,486
with the ability to interact. And I have to include one of my own,

297
00:17:03,508 --> 00:17:06,614
right? I immediately haven't picked up a code pen in a while. This thing's actually

298
00:17:06,652 --> 00:17:09,830
six years old, but the story goes, I was watching alien for the first time,

299
00:17:09,900 --> 00:17:13,126
and I stopped watching it because of the title scene. That's because I ended up

300
00:17:13,148 --> 00:17:16,326
spending the rest of the time trying to recreate it in CSS, and I still

301
00:17:16,348 --> 00:17:19,238
have yet to watch it. But just to clarify, I know there's a little bit

302
00:17:19,244 --> 00:17:22,394
of JavaScript in there and it's just to provide the handy restart button,

303
00:17:22,512 --> 00:17:26,406
but it was fun and challenging and it might not be practical for every solution,

304
00:17:26,518 --> 00:17:29,930
but I can apply this to other work like micro animations and

305
00:17:30,000 --> 00:17:33,894
providing delightful animations in my work. So now that you're all inevitably

306
00:17:33,942 --> 00:17:37,274
inspired, how can we get back to the basics and learn some of the fundamentals?

307
00:17:37,402 --> 00:17:40,510
Freecodecamp is a huge community of learners who are trying to teach themselves

308
00:17:40,580 --> 00:17:44,826
to code. They have some great courses, free of course, and that starts with responsive

309
00:17:44,858 --> 00:17:47,506
web design. It's a great place to begin if you want to start digging into

310
00:17:47,528 --> 00:17:51,198
an actual course. Egghead also has a huge library of lessons and courses.

311
00:17:51,294 --> 00:17:54,814
You can learn anything from accessibility to full blown apps. All the instructors

312
00:17:54,862 --> 00:17:57,970
I've worked with there are super smart and really great at helping others learn.

313
00:17:58,040 --> 00:18:00,630
YouTube also has a ton of great content that's ready to watch.

314
00:18:00,700 --> 00:18:04,070
Freecodecamp even has their own channel there. But there's a lot of individual content

315
00:18:04,140 --> 00:18:07,878
creators like me who are posting amazing stuff every single day.

316
00:18:07,964 --> 00:18:11,078
And similar to YouTube, Twitch has a ton of great content, and it seems like

317
00:18:11,084 --> 00:18:14,618
there's another awesome developer that's starting their own streaming channel every single day.

318
00:18:14,704 --> 00:18:17,702
You can get a live walkthrough of how they build these things, and bonus,

319
00:18:17,766 --> 00:18:20,470
you can hop in, chat and maybe ask a question or two if you're stuck.

320
00:18:20,550 --> 00:18:24,470
And Codepen. I feel like Codepen really changed the game with CSS proof of concepts.

321
00:18:24,550 --> 00:18:27,786
It's incredible to see what you can find browsing around. And it's not just HTML

322
00:18:27,818 --> 00:18:31,022
and CSS, there's a ton of really advanced JavaScript work,

323
00:18:31,076 --> 00:18:33,966
and best of all, you have the code immediately that you can fork and start

324
00:18:33,988 --> 00:18:37,006
playing around with. So how are you feeling after all of that? I still hope

325
00:18:37,028 --> 00:18:40,106
you're inspired. There's a ton you can do without diving headfirst

326
00:18:40,138 --> 00:18:43,646
right into JavaScript. If you take all these things into consideration, you're not

327
00:18:43,668 --> 00:18:46,374
only going to be better off as a developer over youre not only going to

328
00:18:46,412 --> 00:18:49,606
help yourself by avoiding over engineering solutions, which can

329
00:18:49,628 --> 00:18:52,866
typically bring on more stress, but you're also going to help yourself bring more traffic

330
00:18:52,898 --> 00:18:56,054
to your projects and help others use them. And that's it. If you want more,

331
00:18:56,092 --> 00:18:59,526
you can find me at Colby Fayock everywhere. I put out weekly tutorials and

332
00:18:59,548 --> 00:19:02,900
videos and also tweet out some links to my resources from this talk. Thanks everybody.

