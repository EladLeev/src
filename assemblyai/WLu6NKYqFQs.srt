1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,578
time feedback into the behavior of your distributed systems

3
00:00:09,674 --> 00:00:13,614
and observing changes sections errors in real

4
00:00:13,652 --> 00:00:16,746
time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:48,074
Conf 42

7
00:00:48,112 --> 00:00:51,354
Javascript thank you so much for coming to my talk today.

8
00:00:51,392 --> 00:00:54,398
My name is Griffin Zahal at Kale and I'm excited to talk to all of

9
00:00:54,404 --> 00:00:57,870
you about building a browser based metaverse with Babylonjs.

10
00:00:58,370 --> 00:01:01,918
I am a developer advocate at Dolbyio where I work a lot in

11
00:01:01,924 --> 00:01:06,106
the audiovisual space, including live streaming video production, post processing

12
00:01:06,138 --> 00:01:09,394
of audio, and we're going to be talking a little bit about some

13
00:01:09,432 --> 00:01:12,946
of the stuff that I've been working on and learning about as I've been

14
00:01:12,968 --> 00:01:15,826
kind of going through this journey where we're going to be kind of taking a

15
00:01:15,848 --> 00:01:19,234
look at 3d environment and game development all

16
00:01:19,272 --> 00:01:22,534
within javascript. So let's talk a little bit about

17
00:01:22,572 --> 00:01:25,638
the agenda about what's going on first. So I'm going to start off talking a

18
00:01:25,644 --> 00:01:29,158
little bit about what is Babylonjs in the first place. Then we're going to

19
00:01:29,164 --> 00:01:32,458
go into a couple of different examples where we're going to get started, we're going

20
00:01:32,464 --> 00:01:35,946
to see some code, we're going to get building, and this is all going

21
00:01:35,968 --> 00:01:39,926
to start with a hello world, then talking about some 30 assets and concepts,

22
00:01:40,038 --> 00:01:43,530
and we're going to continue on further in areas like animating characters,

23
00:01:43,610 --> 00:01:47,082
adding videos directly inside of our textures, adding live streaming

24
00:01:47,146 --> 00:01:50,846
directly within our web based game environments, adding spatial audio and

25
00:01:50,868 --> 00:01:55,042
perception, and then starting to wrap things up with some examples, learning more

26
00:01:55,096 --> 00:01:59,010
in areas like that. So without any further ado, let's get started

27
00:01:59,080 --> 00:02:02,578
talking about Babylon JS so Babylonjs is

28
00:02:02,584 --> 00:02:06,338
a JavaScript based library for 3d graphics rendering. Traditionally this is in

29
00:02:06,344 --> 00:02:10,134
the game development space, but it isn't limited to game developments at all.

30
00:02:10,172 --> 00:02:13,606
It's used for proof of concept, you have 3d models and

31
00:02:13,628 --> 00:02:17,560
it all uses HTML five and WebGL to kind of power everything together.

32
00:02:18,010 --> 00:02:21,738
This is very good for cross platform game development where if it

33
00:02:21,744 --> 00:02:24,954
can run in a web browser with HTL five and

34
00:02:24,992 --> 00:02:27,770
Webgl, it can run Babylonjs.

35
00:02:28,350 --> 00:02:31,946
So any kind of environments with the Internet connection or even

36
00:02:31,968 --> 00:02:35,278
just having local files, being able to do it with a localhost server is going

37
00:02:35,284 --> 00:02:38,286
to be able to run it and it is Microsoft backed. So a lot of

38
00:02:38,308 --> 00:02:42,398
engineers who actually worked on Microsoft environments started

39
00:02:42,484 --> 00:02:45,634
working on this where we've seen a lot of uses in education,

40
00:02:45,752 --> 00:02:49,070
blockchain, data visualization and others among

41
00:02:49,150 --> 00:02:52,578
the game production areas in the first place.

42
00:02:52,744 --> 00:02:56,542
So what we see in the image over on the right is the actual Babylonjs

43
00:02:56,686 --> 00:03:00,166
environment. So this is the playground that Babylon is

44
00:03:00,268 --> 00:03:03,862
able to let you access directly within the browser. You can update the code

45
00:03:03,916 --> 00:03:07,346
live and see the models change directly on there and see all the different environments

46
00:03:07,458 --> 00:03:09,814
you're able to save them. And we're going to be taking a look at that

47
00:03:09,852 --> 00:03:13,786
in a little bit. So here are some examples of

48
00:03:13,808 --> 00:03:16,986
some stuff that was built on Babylonjs. We can see a

49
00:03:17,008 --> 00:03:20,886
couple of big ones. So the top left over here has Minecraft

50
00:03:20,918 --> 00:03:24,602
that was recreated directly in Babylon Js. I know Microsoft acquired Mojang,

51
00:03:24,666 --> 00:03:27,914
so doesn't surprise me that much that it was built directly

52
00:03:27,962 --> 00:03:30,974
on there. But we can see a couple of other ones like Temple Run was

53
00:03:31,012 --> 00:03:34,458
built in Babylon. We have some shooter games

54
00:03:34,474 --> 00:03:38,702
over here, some pachinko stuff going on. Space invaders recreated in a 3d environment,

55
00:03:38,766 --> 00:03:42,818
which is pretty cool as well as some non game related things. So this

56
00:03:42,984 --> 00:03:46,546
center right bottom one over here is a

57
00:03:46,568 --> 00:03:50,278
map interface where people started taking a globe and kind of tried to

58
00:03:50,284 --> 00:03:53,778
Google Earthify Babylon Js to be used in the web browser

59
00:03:53,794 --> 00:03:56,918
as a proof of concept. And another one that's also really cool in

60
00:03:56,924 --> 00:04:00,406
my opinion, is this lower right one over here is an

61
00:04:00,428 --> 00:04:03,818
art gallery that somebody implemented directly in Babylon Js which kind

62
00:04:03,824 --> 00:04:07,526
of starts talking about the whole metaverse vibe where especially in this remote

63
00:04:07,558 --> 00:04:11,386
world where I'm giving you this talk remotely in the first place, a lot of

64
00:04:11,408 --> 00:04:14,334
people are trying to kind of come up with ways for people to kind of

65
00:04:14,372 --> 00:04:18,158
display their exhibitions live via the

66
00:04:18,164 --> 00:04:22,122
Internet. And Babylonjs is kind of a foolproof one that doesn't require

67
00:04:22,186 --> 00:04:25,578
use of very strong tools and hardware

68
00:04:25,674 --> 00:04:27,954
that you need to kind of be able to render all this in the first

69
00:04:27,992 --> 00:04:31,282
place. So let's start off with hello

70
00:04:31,336 --> 00:04:35,090
world. And for this I'm going to go over to the browser and this

71
00:04:35,160 --> 00:04:38,642
is a website called Playground Babylon Js over here.

72
00:04:38,696 --> 00:04:42,086
This is what happens exactly when you load it. This is the hello world that

73
00:04:42,108 --> 00:04:45,254
they give you from loading their playground. You have the code

74
00:04:45,292 --> 00:04:48,934
ide over on the left and you have the actual 3d environment to play with

75
00:04:48,972 --> 00:04:52,814
on the right. And this whole code mesh

76
00:04:52,882 --> 00:04:56,454
is what you're actually seeing being rendered over here. This is an NPM package.

77
00:04:56,502 --> 00:04:59,866
So of course you need to make sure that you're importing everything properly. But on

78
00:04:59,888 --> 00:05:03,502
the playground it does all that for you in the background. So all

79
00:05:03,556 --> 00:05:06,698
of the juice that comes from starting Babylon js

80
00:05:06,794 --> 00:05:10,058
comes from this function over here. Create scene.

81
00:05:10,154 --> 00:05:13,566
And create scene is how we're determining what we actually want to be

82
00:05:13,588 --> 00:05:16,802
rendered how we want everything to be controlled. Every single

83
00:05:16,856 --> 00:05:20,754
thing, essentially that Babylon is going to work with needs to be within this

84
00:05:20,792 --> 00:05:24,386
function. So that we can actually establish the scene. So the first

85
00:05:24,408 --> 00:05:28,114
thing we're doing is we're creating a scene. It's a basic scene object.

86
00:05:28,312 --> 00:05:32,274
No meshes. Just letting us actually have an environment

87
00:05:32,322 --> 00:05:35,526
to work directly in. And you can see that we're defining it by taking a

88
00:05:35,548 --> 00:05:39,298
variable scene. And we're assigning it to a new Babylonjs scene. And what's

89
00:05:39,314 --> 00:05:43,138
really cool about this is that because Babylon is a package that we're

90
00:05:43,154 --> 00:05:46,886
able to manage. It will let you autofill a lot of these as you

91
00:05:46,908 --> 00:05:50,318
kind of see fit. So these are known kind of modules that being to be

92
00:05:50,324 --> 00:05:54,206
able to automatically put in. So new Babylon scene engine is going to use

93
00:05:54,228 --> 00:05:57,278
the Babylon engine to create a new scene for us. And this scene is going

94
00:05:57,284 --> 00:06:00,398
to be where we're going to be able to put everything directly on. Next we

95
00:06:00,404 --> 00:06:03,502
have the camera where we're going to be able to determine how we actually

96
00:06:03,556 --> 00:06:07,294
want to view the scene. As kind of the viewer

97
00:06:07,342 --> 00:06:10,914
looking inside of this environment. You need to determine how

98
00:06:10,952 --> 00:06:14,142
you're actually seeing it. So what we're doing over here is we're using Babylon

99
00:06:14,206 --> 00:06:17,842
free camera. And we're using something called a vector three over here. And a vector

100
00:06:17,906 --> 00:06:22,022
three is essentially the XYZ coordinates that are going to allow you to

101
00:06:22,076 --> 00:06:25,666
determine where in the three plane of existence

102
00:06:25,778 --> 00:06:29,478
we want the camera to be established. And is going

103
00:06:29,484 --> 00:06:32,218
to be the origin. The center of it, it goes into positive. It goes to

104
00:06:32,224 --> 00:06:35,754
negative. It goes into decimal values. So that you can place things exactly where

105
00:06:35,792 --> 00:06:38,826
you want it to be. So you can kind

106
00:06:38,848 --> 00:06:42,346
of see over here with camera set target vector 30 is

107
00:06:42,368 --> 00:06:46,010
going towards the origin. It's a nice little kind of speedway

108
00:06:46,090 --> 00:06:49,786
to go to that area. And we can kind of change the location

109
00:06:49,818 --> 00:06:52,714
of all these things as well. So if we go back over to the vector

110
00:06:52,762 --> 00:06:55,198
three over here and we say, I don't want this at negative ten. I want

111
00:06:55,204 --> 00:06:58,818
this at negative 15. I can then click this play button over at the top.

112
00:06:58,904 --> 00:07:02,606
And you're being to see we're zoomed out a little bit more. I can revert

113
00:07:02,638 --> 00:07:06,290
it back to ten and click play. And we're back to where we started.

114
00:07:06,440 --> 00:07:09,922
This is going to allow us to kind of play with

115
00:07:09,976 --> 00:07:13,542
just where we're starting, where things are going on. But you don't have to

116
00:07:13,596 --> 00:07:16,886
kind of play and rerender every single time you want it to happen. Where we

117
00:07:16,908 --> 00:07:20,922
can use camera attached control over here. This function to

118
00:07:21,056 --> 00:07:24,406
let us move the camera dynamically. So instead of having the camera

119
00:07:24,438 --> 00:07:28,026
be a fixed object. We can determine its position

120
00:07:28,128 --> 00:07:31,386
a little bit differently as we move along. So this one is

121
00:07:31,408 --> 00:07:35,454
allowing it to be attach control canvas. True is attaching the

122
00:07:35,492 --> 00:07:38,894
control of the camera to the canvas itself. So what this means

123
00:07:38,932 --> 00:07:42,942
is that we can click and drag our mouse on the canvas. And that

124
00:07:42,996 --> 00:07:46,730
is what's going to control the canvas. Based on the mouse movements.

125
00:07:46,890 --> 00:07:50,674
We are moving the canvas to move the camera. So you can also

126
00:07:50,712 --> 00:07:54,366
change it to move via the keyboard. Or if you attach a game controller,

127
00:07:54,398 --> 00:07:58,126
you can use the joysticks like you would in that area. It's very dynamic

128
00:07:58,158 --> 00:08:01,046
on how you're going to be able to make it happen. Next we have the

129
00:08:01,068 --> 00:08:04,262
lights. And lights are very important because without lights, you won't be able to see

130
00:08:04,316 --> 00:08:07,558
anything. Kind of think about it as the sun

131
00:08:07,724 --> 00:08:11,034
in earth. Where if there wasn't for the sun, you can't see anything.

132
00:08:11,152 --> 00:08:14,566
So this one we're using a hemispheric light. There's a few different types

133
00:08:14,598 --> 00:08:18,602
of light sources. That have kind of different ways

134
00:08:18,656 --> 00:08:22,314
that they radiate themselves out. Hemispheric light

135
00:08:22,352 --> 00:08:25,018
is one of the more common ones. Especially if you're trying to kind of emulate

136
00:08:25,034 --> 00:08:28,506
the sun where we're creating it. And once again, we are positioning

137
00:08:28,538 --> 00:08:32,058
it on so directly overhead.

138
00:08:32,154 --> 00:08:35,518
And we can also determine, say, want to

139
00:08:35,524 --> 00:08:39,422
indeterminate area. So we can make it 00:11 rerender

140
00:08:39,486 --> 00:08:42,418
and you're going to see the light now is at a slightly different position on

141
00:08:42,424 --> 00:08:45,966
the sphere that we have over there. It is completely dynamic

142
00:08:45,998 --> 00:08:50,070
and customizable. Where you can also create functions to make that change

143
00:08:50,140 --> 00:08:53,398
along the way as well. So light intensity is going to

144
00:08:53,404 --> 00:08:56,946
determine how much luminosity that light has. It's going to get lighter

145
00:08:56,978 --> 00:09:00,374
and darker. Default is one. So we can change it back to one

146
00:09:00,412 --> 00:09:04,118
from 0.7. And it's going to make it a lot brighter.

147
00:09:04,294 --> 00:09:08,118
If you have actual color in that. It's going to make different saturation values

148
00:09:08,134 --> 00:09:11,142
and all that. This is just a gray, uncolored surface.

149
00:09:11,286 --> 00:09:15,182
And then we also have the shapes where we are

150
00:09:15,316 --> 00:09:18,622
determining a shape right here, a sphere. So that we can actually

151
00:09:18,676 --> 00:09:22,110
determine what it looks like. You do want to put in the position of everything

152
00:09:22,180 --> 00:09:25,754
as well. It will default to the origin. But we can also determine

153
00:09:25,802 --> 00:09:29,106
what the sphere is actually being to look like. So sphere itself,

154
00:09:29,208 --> 00:09:32,994
the object has some subparameters that we're going to be putting directly into

155
00:09:33,032 --> 00:09:36,434
it. You'll notice that all these different things are

156
00:09:36,472 --> 00:09:39,554
going to give you a name, it's going to give you a position

157
00:09:39,672 --> 00:09:42,806
or some other sub options. And then it's going to tell you which scene you

158
00:09:42,828 --> 00:09:45,766
want to but it into. We're all putting it into the scene variable that we

159
00:09:45,788 --> 00:09:49,318
started directly with at the very beginning. But we can also take a look at

160
00:09:49,324 --> 00:09:51,846
some of these optional parameters. And if you hover over them, it's going to give

161
00:09:51,868 --> 00:09:55,338
you a little bit of a hint about what it actually is looking for.

162
00:09:55,424 --> 00:09:59,018
So the diameter two is pretty self explanatory. It determines how big you want it

163
00:09:59,024 --> 00:10:02,810
to be. We can make the sphere bigger by making the diameter equal to five.

164
00:10:02,880 --> 00:10:05,998
It's going to be a lot bigger. And we can revert it back

165
00:10:06,004 --> 00:10:09,230
to two, make it smaller. But what's also very interesting

166
00:10:09,300 --> 00:10:12,542
is that this is graphics rendering in 3d.

167
00:10:12,596 --> 00:10:16,046
So you're going to have to determine how you're building this in the first place.

168
00:10:16,148 --> 00:10:20,094
The number of segments allow us to determine how many kind of polygons

169
00:10:20,222 --> 00:10:23,634
you want it to be made out of. Kind of, if you think about that.

170
00:10:23,672 --> 00:10:26,734
So 32, we have a pretty realistic sphere.

171
00:10:26,782 --> 00:10:30,582
If we zoomed in a lot, you would definitely be able to see some hard

172
00:10:30,636 --> 00:10:33,974
edges instead of completely smooth and round surface. But we can actually

173
00:10:34,012 --> 00:10:37,634
make this look a lot more blocky if we reduce the amount of segments.

174
00:10:37,682 --> 00:10:40,822
So if we move from 32 to 16, we're going to start

175
00:10:40,876 --> 00:10:43,882
be seeing a little bit more of a fuzzy outline. But we can also go

176
00:10:43,936 --> 00:10:47,366
even lower to something like two. And you're going to be noticing it's

177
00:10:47,398 --> 00:10:50,826
extremely blocky right now. And this is going

178
00:10:50,848 --> 00:10:54,534
to be easier on the rendering engine, whether you have a sulfur or hardware

179
00:10:54,582 --> 00:10:58,202
renderer going in and over that, and also allows you to kind of customize

180
00:10:58,266 --> 00:11:01,566
a little bit about how things look directly in that way. But let's say

181
00:11:01,588 --> 00:11:05,474
you don't want to work with sphere in the first place. Babylonjs does

182
00:11:05,512 --> 00:11:08,690
have pre built objects that you might want to build directly in.

183
00:11:08,760 --> 00:11:12,450
So instead of create sphere, I can say let's create

184
00:11:12,600 --> 00:11:13,570
a cube.

185
00:11:15,910 --> 00:11:19,702
That is not the function name. We can do create box.

186
00:11:19,836 --> 00:11:23,142
That's the name. And that is going to allow

187
00:11:23,196 --> 00:11:27,014
us once I correct the

188
00:11:27,052 --> 00:11:30,726
text over here. So once we remove all the sphere

189
00:11:30,758 --> 00:11:34,394
specific stuff going on over there, and we move all

190
00:11:34,432 --> 00:11:38,234
the sphere to a box, we can then click play and we

191
00:11:38,272 --> 00:11:41,866
will then get a box instead. Additionally, we also

192
00:11:41,888 --> 00:11:45,086
have the ground section over here, which is just determining this

193
00:11:45,188 --> 00:11:48,510
kind of rectangular plane over here.

194
00:11:48,580 --> 00:11:51,882
That's just another object that we have over there that we're determining as the ground,

195
00:11:51,946 --> 00:11:55,182
you can determine the size and the scene the same way you would with everything

196
00:11:55,236 --> 00:11:58,122
else. It does not need to be a square. It can be a rectangle,

197
00:11:58,186 --> 00:12:00,478
it can be a circle. It can be whatever you want it to be.

198
00:12:00,564 --> 00:12:04,458
Now that we've gone through some of the introductory hello world that Babylon playground presents

199
00:12:04,474 --> 00:12:07,554
us, we can go and talk a little bit about some of the introductory concepts

200
00:12:07,602 --> 00:12:11,138
that we just learned about. So the main method that we have is create scene

201
00:12:11,234 --> 00:12:14,594
where this is where we generate objects like our cameras, our planes,

202
00:12:14,642 --> 00:12:18,386
our lights and our meshes. Where we use functions like mesh builder,

203
00:12:18,418 --> 00:12:21,826
free camera and hemispheric light to be able to determine these objects

204
00:12:21,858 --> 00:12:25,194
that we're placing directly into our scene. If we want to determine the

205
00:12:25,232 --> 00:12:28,394
position where it's actually all happening within our scene, we want to use

206
00:12:28,432 --> 00:12:31,766
vector threes so that we can define the XYZ coordinates of these objects

207
00:12:31,798 --> 00:12:35,546
that are all relative to the scene. And then we have autocompletions given directly

208
00:12:35,578 --> 00:12:39,566
within the NPM package so that if you're using an IDE like vs code that

209
00:12:39,588 --> 00:12:43,374
supports them, you're able to get a little bit of help on actually building it

210
00:12:43,412 --> 00:12:47,138
without needing to know every single function, revisit the

211
00:12:47,144 --> 00:12:50,418
docs, cross reference everything and start all the way over there.

212
00:12:50,504 --> 00:12:54,002
So with 3d assets and concepts, we're able to expand on these hello

213
00:12:54,056 --> 00:12:57,266
world concepts a little bit further, where we can do things like changing the

214
00:12:57,288 --> 00:13:01,122
colors of the objects, or we can even directly load files

215
00:13:01,186 --> 00:13:04,566
where if you have an artist, for example, where you're building a lot

216
00:13:04,588 --> 00:13:08,402
of these assets and models in a program like Maya,

217
00:13:08,466 --> 00:13:12,134
where you have a professional actually working on them, instead of trying to create

218
00:13:12,172 --> 00:13:15,466
a bunch of boxes and spheres and putting them all together for what you want

219
00:13:15,488 --> 00:13:18,762
it to look like in the first place, you can directly put it in

220
00:13:18,896 --> 00:13:22,362
with that mesh itself. You don't have to kind of worry about

221
00:13:22,416 --> 00:13:25,866
needing to develop it all to yourself. We've been able to use the mouse camera,

222
00:13:25,898 --> 00:13:29,470
navigation, and you can even do things like switch scenes directly within

223
00:13:29,540 --> 00:13:32,926
the environment that you have. This also includes areas like

224
00:13:32,948 --> 00:13:36,498
VR and AR experiences, which we'll get into a little bit. But first,

225
00:13:36,584 --> 00:13:40,386
let's go back into the playground where we have this model that

226
00:13:40,408 --> 00:13:44,338
we were able to download directly from the Babylonjs community,

227
00:13:44,424 --> 00:13:48,342
where you can see it's this very detailed skull that an artist made. So instead

228
00:13:48,396 --> 00:13:52,134
of needing to kind of put together all these different meshes, we're able

229
00:13:52,172 --> 00:13:55,814
to just directly upload something and kind of use it as

230
00:13:55,852 --> 00:13:59,126
we want, look around, kind of see all the different angles of it

231
00:13:59,148 --> 00:14:02,258
and play with it in our own workshop. We can even take

232
00:14:02,284 --> 00:14:05,306
a look at another example we have over here where we're able to take our

233
00:14:05,328 --> 00:14:09,302
click and drag controls and make it even more kind of advanced,

234
00:14:09,366 --> 00:14:13,130
where we can click and drag any of these different shapes and

235
00:14:13,200 --> 00:14:16,814
move them where we want them to be. We have added color directly to them

236
00:14:16,852 --> 00:14:20,206
and we're able to kind of expand the scene and the light to fit our

237
00:14:20,228 --> 00:14:24,014
needs a little bit. This also includes some tools that are very useful for

238
00:14:24,052 --> 00:14:27,514
the actual process of building, where if we click on this debug

239
00:14:27,562 --> 00:14:30,274
section, we have a couple of new menus that we're able to take a look

240
00:14:30,312 --> 00:14:33,634
at. We are able to see the scene where we can see all the different

241
00:14:33,672 --> 00:14:37,746
materials that we've worked with. So we have all the different objects in these

242
00:14:37,768 --> 00:14:41,366
kind of different colored ones where we can see the actual position. We can

243
00:14:41,388 --> 00:14:45,698
see all these different class objects where we can determine textures,

244
00:14:45,794 --> 00:14:48,950
lighting and all of that directly within a debug menu.

245
00:14:49,030 --> 00:14:52,026
But if we click this gear icon in the inspector area,

246
00:14:52,128 --> 00:14:55,382
we can also do things within Babylon like take screenshots,

247
00:14:55,446 --> 00:14:58,730
record videos, make gifs,

248
00:14:59,070 --> 00:15:02,554
even export these directly. So if you wanted to save this

249
00:15:02,592 --> 00:15:05,866
object and load it somewhere else, you're able to do that directly

250
00:15:05,898 --> 00:15:09,306
within Babylon itself. If we go over to the original playground

251
00:15:09,338 --> 00:15:12,878
that we worked with as well, we've made some customizations. And one cool thing that

252
00:15:12,884 --> 00:15:16,274
you can do over there is the save icon over here is

253
00:15:16,312 --> 00:15:20,354
going to let you kind of create like a little demo thing where once

254
00:15:20,392 --> 00:15:24,562
we save it, you're going to notice that we have a new

255
00:15:24,696 --> 00:15:28,226
little hex code over here on the top menu, which is going

256
00:15:28,248 --> 00:15:32,054
to allow us to save and reload this anywhere that we want. So we can

257
00:15:32,092 --> 00:15:35,986
save this customization that we made directly to this workspace. So if I refresh

258
00:15:36,018 --> 00:15:40,214
this page right now, you're going to be able to actually see this once

259
00:15:40,252 --> 00:15:44,042
again exactly the way that we left it. And you can share this with anybody

260
00:15:44,096 --> 00:15:47,722
you want. So if you've made some customizations, or if you've made your own custom

261
00:15:47,856 --> 00:15:51,258
Babylonjs playground scene, you can share it with anybody that you

262
00:15:51,264 --> 00:15:54,586
want in that scene. Or you can download it just the way that we shared

263
00:15:54,618 --> 00:15:57,914
over here and be able to upload it as its own Babylon environment

264
00:15:57,962 --> 00:16:01,486
in the first place. Going back over to talking about VR and

265
00:16:01,508 --> 00:16:05,310
AR experiences, that's not something that Babylonjs prevents you from doing

266
00:16:05,380 --> 00:16:08,946
any. It actually has a lot of built in support for VR headsets where you

267
00:16:08,968 --> 00:16:12,686
can actually try out a lot of these different playground examples on your Google cardboard

268
00:16:12,718 --> 00:16:16,246
device. If you have one of those still, and even has support for

269
00:16:16,268 --> 00:16:19,606
WebXR frameworks, which is update and

270
00:16:19,628 --> 00:16:22,866
replacement to WebVR, which actually means that you can develop games

271
00:16:22,898 --> 00:16:26,850
and experiences in the metaverse for Oculus Valve Index,

272
00:16:27,010 --> 00:16:30,566
HTC Vive headsets, and you can even check

273
00:16:30,588 --> 00:16:33,994
out the documentation on how you might want to build that yourself. Taking a look

274
00:16:34,032 --> 00:16:38,118
at what that actually looks like. We have the community demos

275
00:16:38,134 --> 00:16:41,446
over here where we can take a look at some of the different meshes.

276
00:16:41,558 --> 00:16:45,114
So this one for example, you can see the playground has its own hex

277
00:16:45,162 --> 00:16:48,446
code that it's playing with over here. And what they are doing

278
00:16:48,628 --> 00:16:52,110
is they have the textures that they are actually

279
00:16:52,180 --> 00:16:55,682
importing directly from different web URLs. So you can see that this

280
00:16:55,736 --> 00:16:59,586
asset is stored as a GitHub texture that they have in their

281
00:16:59,608 --> 00:17:03,342
git, which is just being referenced via the Internet.

282
00:17:03,406 --> 00:17:06,706
The beauty of HTML five, it works very similarly where if

283
00:17:06,728 --> 00:17:10,018
you have a model you want to import with all the textures involved

284
00:17:10,034 --> 00:17:13,046
directly in it, you can take a look at it. And here we

285
00:17:13,068 --> 00:17:16,754
have a much more detailed environment where these textures

286
00:17:16,802 --> 00:17:20,430
are very detailed. You can see we have a nice background going on that's

287
00:17:20,450 --> 00:17:23,894
in a 3d space. We have a very detailed

288
00:17:23,942 --> 00:17:27,686
bottle with a drop shadow, but you can see kind of the light source

289
00:17:27,718 --> 00:17:31,018
is over here. This table is basically the

290
00:17:31,024 --> 00:17:34,126
same thing we had with the plane over there. We're just taking a little

291
00:17:34,148 --> 00:17:37,534
bit more detail and care into the objects that we're directly putting in.

292
00:17:37,652 --> 00:17:41,214
And on the VR side, we have another example from the playground over

293
00:17:41,252 --> 00:17:44,640
here where somebody took this car.

294
00:17:45,410 --> 00:17:49,186
I think it's the DeLorean if I recall correctly. And they allow

295
00:17:49,208 --> 00:17:52,094
you to do a VR experience as a sample. So you see this little VR

296
00:17:52,142 --> 00:17:56,142
goggles button over here. If I was viewing this via a Google cardboard,

297
00:17:56,206 --> 00:17:59,782
which I'm not, but you can kind of see where it's coming from,

298
00:17:59,916 --> 00:18:04,086
you would be able to view this entire environment in that 3d kind

299
00:18:04,108 --> 00:18:06,920
of space via that headset itself over there.

300
00:18:07,370 --> 00:18:11,030
Of course, I'm not streaming from a VR headset, so you might

301
00:18:11,180 --> 00:18:14,106
be a little bit disoriented the same way that I was. But it's very cool

302
00:18:14,128 --> 00:18:16,842
to know that a lot of that is directly built in. And if we look

303
00:18:16,896 --> 00:18:20,220
at kind of what's happening, they're using create default VR experience.

304
00:18:20,590 --> 00:18:24,282
Looks like this is an older example that's a little bit deprecated,

305
00:18:24,346 --> 00:18:28,714
where we highly recommend that you take a look at the actual documentation

306
00:18:28,762 --> 00:18:32,542
of Babylon for the updated ways of doing it. Though this one does still work

307
00:18:32,596 --> 00:18:36,386
as we saw before. It's just very easy for you

308
00:18:36,408 --> 00:18:39,790
to take your 3d environment and directly put it inside of that metaverse.

309
00:18:39,950 --> 00:18:43,650
So continuing on with our presentation, let's talk a little bit

310
00:18:43,720 --> 00:18:47,138
more about the animation section of everything,

311
00:18:47,304 --> 00:18:50,598
where we have a lot of static scenes that we've already seen.

312
00:18:50,684 --> 00:18:54,150
Everything has been rendered, and we've just been looking around the render.

313
00:18:54,810 --> 00:18:58,818
You don't have to keep everything static. You have the ability to use render loops

314
00:18:58,834 --> 00:19:02,566
to modify models so that they are updating live without needing

315
00:19:02,598 --> 00:19:05,734
to keep on rerendering your scene over and over and over again manually.

316
00:19:05,862 --> 00:19:09,242
So this can be done with the scene on before

317
00:19:09,296 --> 00:19:12,666
render observable, where this will do kind

318
00:19:12,688 --> 00:19:16,334
of just a loop within the render function itself. So it's always looking for

319
00:19:16,372 --> 00:19:19,998
some type of input or some type of action to determine whether it

320
00:19:20,004 --> 00:19:23,818
should start or stop doing that new render. So this can

321
00:19:23,844 --> 00:19:27,214
be done for moving characters. This is useful

322
00:19:27,262 --> 00:19:31,102
for actually physically moving them, or making them do different emotes,

323
00:19:31,166 --> 00:19:35,114
or have idle animations. You can assign this to key presses

324
00:19:35,262 --> 00:19:38,594
within your keyboard or controller of movements,

325
00:19:38,722 --> 00:19:42,626
mice, or even getting creative like head trackers,

326
00:19:42,818 --> 00:19:46,162
you can attach it to any type of input

327
00:19:46,226 --> 00:19:50,102
that your device would be able to recognize. It's fair

328
00:19:50,156 --> 00:19:53,738
game for all this. So this example over here has

329
00:19:53,824 --> 00:19:56,618
what we have going on with this model.

330
00:19:56,704 --> 00:20:00,058
So you can see we already have an idle animation going on over here.

331
00:20:00,144 --> 00:20:03,760
But I can use my keyboard to make her move,

332
00:20:04,130 --> 00:20:07,710
turn, and I can even press a button to make her dance.

333
00:20:08,130 --> 00:20:12,026
So this is all directly within one instance. You notice

334
00:20:12,138 --> 00:20:15,278
that we're not manually rerendering anything. I'm not clicking a

335
00:20:15,284 --> 00:20:19,170
play button over and over again. So it allows you to do exactly

336
00:20:19,240 --> 00:20:22,898
what you might expect to do from a game in that same action where

337
00:20:22,984 --> 00:20:26,546
everything is live, it's moving, it's not going to just be a static workspace

338
00:20:26,578 --> 00:20:31,298
that we have going on over here. This expands even further

339
00:20:31,474 --> 00:20:36,070
with using videos as textures where yes,

340
00:20:36,140 --> 00:20:39,238
videos can be pre recorded, but still allows you to take

341
00:20:39,324 --> 00:20:43,066
an actual 3d environment and then overlay video directly on

342
00:20:43,088 --> 00:20:46,598
it. This also enables things like audio directly on it. And it's

343
00:20:46,614 --> 00:20:50,262
all based on HTML five. So it works very similar to a typical video container.

344
00:20:50,326 --> 00:20:53,222
But instead of a video container just being a static,

345
00:20:53,286 --> 00:20:57,086
flat video, we use it as a texture for an object. So we

346
00:20:57,108 --> 00:21:01,002
can put it directly onto a plane, we can put it onto

347
00:21:01,066 --> 00:21:05,040
a cube, a box, a sphere, somebody's head. If we want to actually

348
00:21:05,350 --> 00:21:09,186
emulate what somebody's head is going to directly look like where we

349
00:21:09,208 --> 00:21:12,626
can put in different sections that you would be able to in HTML as

350
00:21:12,648 --> 00:21:15,806
well. With playing, pausing and assigning

351
00:21:15,838 --> 00:21:19,574
those two buttons that you can directly interact with as well on

352
00:21:19,692 --> 00:21:23,206
the space itself. You don't need to assign everything to a key binding. You can

353
00:21:23,228 --> 00:21:27,270
put it as a user interface component within your browser as

354
00:21:27,340 --> 00:21:31,094
well. So we can see an example of this once again in this

355
00:21:31,212 --> 00:21:34,618
workspace that we've already created where we have these couple of video

356
00:21:34,704 --> 00:21:37,686
objects where we can open up a menu and we can see these different buttons

357
00:21:37,718 --> 00:21:40,778
that we made where I can click on play and it should be able to

358
00:21:40,784 --> 00:21:44,198
play the video for us. I think my audio is turned off right

359
00:21:44,224 --> 00:21:48,366
now to avoid any feedback. But you can see we're playing the video and we

360
00:21:48,388 --> 00:21:52,126
can also pause the video on demand, replay it, mute it. If there

361
00:21:52,148 --> 00:21:55,306
was audio playing right now. Oh, there it is. It may not

362
00:21:55,348 --> 00:21:58,786
even exist at all. You can pause it once again and

363
00:21:58,808 --> 00:22:02,626
you can notice that if we look around the environment, we have it

364
00:22:02,648 --> 00:22:06,034
showing on both sides of what is actually going on

365
00:22:06,072 --> 00:22:09,266
in here. And what we can do is we can take a look about how

366
00:22:09,288 --> 00:22:12,914
this is actually built. So I'm going to go into a vs code instance

367
00:22:12,962 --> 00:22:15,686
that we have going on over here where we can take a look at this

368
00:22:15,708 --> 00:22:18,966
main js kind of document that we have. So we

369
00:22:18,988 --> 00:22:21,618
can see that we're just assigning a lot of different variables. But then we have

370
00:22:21,644 --> 00:22:25,322
the create scene function that we saw before where we're taking

371
00:22:25,376 --> 00:22:28,502
a look at kind of the typical things where we have the camera,

372
00:22:28,566 --> 00:22:31,850
we're attaching the control of the camera, we're saying where the camera is,

373
00:22:32,000 --> 00:22:35,566
but when we actually want to place the video itself, we want to make sure

374
00:22:35,588 --> 00:22:38,974
that the video is properly in scale. So most videos these

375
00:22:39,012 --> 00:22:42,974
days come at a 16 x nine aspect ratio, but sometimes it's too

376
00:22:43,012 --> 00:22:46,306
big and it's going to take way too much power to be able

377
00:22:46,328 --> 00:22:50,226
to render that. So we can scale it down by just taking that 16 x

378
00:22:50,248 --> 00:22:53,906
nine ratio and then creating a scale ratio that we

379
00:22:53,928 --> 00:22:57,026
want to either multiply or divide by so that we can get

380
00:22:57,048 --> 00:23:00,566
the proper size that we want the video to actually be as

381
00:23:00,588 --> 00:23:04,166
a part of the box that we have. Then for the plane options, we want

382
00:23:04,188 --> 00:23:07,478
to set the height and width that we have already determined over there,

383
00:23:07,564 --> 00:23:10,886
as well as determine the side orientation. So by default it's not

384
00:23:10,908 --> 00:23:14,474
being to appear on every single side of a mesh. So we can use

385
00:23:14,592 --> 00:23:18,282
this double side helper function from Babylon itself to actually

386
00:23:18,336 --> 00:23:21,546
put it on both sides of that box and see it the way that you

387
00:23:21,568 --> 00:23:24,686
would want it to be. Then we finally call that video mesh that we have

388
00:23:24,708 --> 00:23:28,138
over here with video plane. Mesh is mesh builder. We're creating a plane

389
00:23:28,234 --> 00:23:31,594
and we are putting in the actual objects and scene directly

390
00:23:31,642 --> 00:23:35,374
in them, where we're then taking the video feed as

391
00:23:35,412 --> 00:23:39,218
a local file we have and letting the video actually

392
00:23:39,384 --> 00:23:42,722
be placed on side with some more helper functions over here.

393
00:23:42,776 --> 00:23:46,546
So we're creating a video material and texture as the function over here.

394
00:23:46,648 --> 00:23:49,750
And then we're placing it directly on side of that video object

395
00:23:49,820 --> 00:23:52,646
that we have, determining if we want it to loop, if we want it to

396
00:23:52,668 --> 00:23:56,674
autoplay, and then also adding pause functions directly

397
00:23:56,722 --> 00:24:00,326
on there so that it doesn't kind of just play immediately as

398
00:24:00,348 --> 00:24:03,626
we go on there. We just have it playing when we want to play it

399
00:24:03,648 --> 00:24:07,514
by clicking the button itself. A lot of this is additional helper functions so

400
00:24:07,552 --> 00:24:11,258
that you can kind of see it all happen altogether on that first place.

401
00:24:11,424 --> 00:24:14,238
We are talking about the metaverse forever, and I don't think it would be that

402
00:24:14,244 --> 00:24:17,706
much of a metaverse if we only had pre recorded videos. So let's

403
00:24:17,738 --> 00:24:21,754
also talk a little bit about adding live streaming as video textures.

404
00:24:21,882 --> 00:24:25,106
So Dolby IO live streaming allows you to be able

405
00:24:25,128 --> 00:24:28,882
to stream live content in extremely low latency, where we are no longer

406
00:24:29,016 --> 00:24:32,610
limited to existing video files. We're able to

407
00:24:32,680 --> 00:24:35,970
actually broadcast videos in real time.

408
00:24:36,120 --> 00:24:40,210
So you would do the typical things about acquiring an API credential

409
00:24:40,290 --> 00:24:44,038
at Dolby, where you can get one for free, where instead of assigning the

410
00:24:44,044 --> 00:24:47,554
source object to the video file, we can assign it to the stream URL

411
00:24:47,602 --> 00:24:51,366
that we have received from Dolby, which enables real time broadcasting directly

412
00:24:51,398 --> 00:24:55,034
in metaverses, which we've seen a lot of very good use cases for in live

413
00:24:55,072 --> 00:24:58,442
events, concerts, lectures, the live

414
00:24:58,496 --> 00:25:02,042
sports scene, auctions, kind of, it goes on

415
00:25:02,096 --> 00:25:05,294
for a while. So we can take a look once

416
00:25:05,332 --> 00:25:09,610
again at the sample that we have over here. And if I switch

417
00:25:09,690 --> 00:25:13,102
from video to stream, you're going to notice that the videos

418
00:25:13,156 --> 00:25:16,366
disappear. And that's because our stream hasn't started yet. Over at our Dolby

419
00:25:16,398 --> 00:25:19,854
creating dashboard I can click on start right here. It's taking my live camera feed.

420
00:25:19,902 --> 00:25:23,330
Hello, let's mute the microphone.

421
00:25:24,230 --> 00:25:28,174
We can now see that I'm being streamed live in Babylon over here.

422
00:25:28,232 --> 00:25:32,054
So it is the same feed. You can take a look. It is

423
00:25:32,092 --> 00:25:36,002
using those same objects. But now I'm able to put everything directly

424
00:25:36,066 --> 00:25:39,498
inside of the stream. I'm not sure how well it's going to do the

425
00:25:39,584 --> 00:25:42,938
capture difference between the camera you see over on the

426
00:25:42,944 --> 00:25:46,954
top over there and the camera that you see here in

427
00:25:46,992 --> 00:25:50,362
Babylon. But hopefully it should be broadcasting pretty quickly

428
00:25:50,416 --> 00:25:53,238
to you and we can take a look at how this is all working once

429
00:25:53,264 --> 00:25:56,798
again in our code. This is the same exact file over here, but if

430
00:25:56,804 --> 00:26:00,462
we go a little but lower down where we're doing things like

431
00:26:00,516 --> 00:26:04,094
determining the GUI buttons and doing some parsing and

432
00:26:04,132 --> 00:26:07,186
all of that over there. But what we can do over here is we look

433
00:26:07,208 --> 00:26:10,802
at the stream button over here, we're able to then access the video

434
00:26:10,856 --> 00:26:13,954
texture in a different way, where we're setting the URL equal to the

435
00:26:13,992 --> 00:26:17,814
streaming URL that we have determined in our Dolby API key,

436
00:26:17,932 --> 00:26:21,202
and we are determining that we want to switch the video texture

437
00:26:21,266 --> 00:26:24,610
over to that. The magic happens in our helper

438
00:26:24,690 --> 00:26:28,310
function over here in streaming js, where we're actually taking

439
00:26:28,380 --> 00:26:32,066
in our credentials. Don't bother copying these, I'm going to rotate

440
00:26:32,098 --> 00:26:35,226
them as soon as I finish this video. But we can look a little bit

441
00:26:35,248 --> 00:26:38,058
further down in terms of how this is actually being done,

442
00:26:38,144 --> 00:26:41,418
where we're setting the video texture and then we're adding the stream based on

443
00:26:41,424 --> 00:26:45,246
the texture itself going on over here, where it's functioning essentially the

444
00:26:45,268 --> 00:26:48,238
exact same as that texture video that we have,

445
00:26:48,324 --> 00:26:51,866
but just accepting a live feed via a URL. Once again, the beauties

446
00:26:51,898 --> 00:26:55,934
of using an HTML five interface. It is the same kind of

447
00:26:55,972 --> 00:26:59,186
code as long as it's accepted in your web browser. There is no reason why

448
00:26:59,208 --> 00:27:03,282
Babylonjs isn't able to accept it itself. So we're taking the token to

449
00:27:03,336 --> 00:27:06,994
authenticate, and then we're changing the view appropriately and broadcasting it and

450
00:27:07,032 --> 00:27:10,930
changing the texture appropriately, as well as doing some error handling

451
00:27:11,010 --> 00:27:14,486
directly within there. So we can see an example about how

452
00:27:14,668 --> 00:27:18,582
one of our customers actually has gone a little bit further than this with

453
00:27:18,636 --> 00:27:22,106
one of the customers we have called Red Pill VR, where I'm going to

454
00:27:22,128 --> 00:27:25,866
mute the video so that this doesn't kind of get too loud and

455
00:27:25,888 --> 00:27:29,066
feedbacky. But you can see that they've taken our live streaming and

456
00:27:29,088 --> 00:27:32,198
turned it into a metaverse based DJ experience.

457
00:27:32,384 --> 00:27:36,238
We were able to see that they have the DJ actually being recorded

458
00:27:36,324 --> 00:27:39,882
live, but they've implemented him into this metaverse

459
00:27:39,946 --> 00:27:43,162
where there's an audience that's able to listen directly

460
00:27:43,306 --> 00:27:47,226
live. So that if he, for example, is trying to engage

461
00:27:47,258 --> 00:27:50,466
the crowd by saying, hey, how are you all doing? It only takes a couple

462
00:27:50,488 --> 00:27:53,666
of milliseconds for it to actually reach the people on the other side who are

463
00:27:53,688 --> 00:27:57,566
experiencing this live concert in this live event built directly

464
00:27:57,678 --> 00:28:01,254
within here, as opposed to the couple of seconds it might take in traditionally based

465
00:28:01,292 --> 00:28:04,742
creating, which I find to be really cool. And there's no reason

466
00:28:04,796 --> 00:28:08,214
why you wouldn't be able to build a very similar experience within Babylonjs and

467
00:28:08,252 --> 00:28:11,866
even incorporating the 3d headset experiences on there, so that

468
00:28:11,888 --> 00:28:15,626
you might be able to actually see what's going on in as real time as

469
00:28:15,648 --> 00:28:19,482
possible. So continuing on with the metaverse based

470
00:28:19,536 --> 00:28:22,694
theme, you also have the ability to add in spatial

471
00:28:22,742 --> 00:28:26,730
audio via Dolby as well, where you might want to add in live communication

472
00:28:26,810 --> 00:28:30,030
within your game or your metaverse environment, which you can do

473
00:28:30,100 --> 00:28:33,994
with an audio based SDK where you can add in real time communications.

474
00:28:34,122 --> 00:28:37,682
I'm not going to be going over any code or experiences directly within

475
00:28:37,736 --> 00:28:41,234
this, but just know that there are a lot of web

476
00:28:41,272 --> 00:28:44,898
based ways that you're able to do live communications between different people. And putting it

477
00:28:44,904 --> 00:28:47,922
directly in a game would be no different. The same way that you might experience

478
00:28:47,976 --> 00:28:51,142
that in a multiplayer video game that you'd be playing with your friends.

479
00:28:51,276 --> 00:28:54,786
You can add in different spatial audio areas so that you're

480
00:28:54,818 --> 00:28:58,198
actually able to take the position of where you see somebody directly in

481
00:28:58,284 --> 00:29:01,686
the plane that we have in Babylon Js and hearing

482
00:29:01,718 --> 00:29:05,146
them from that direction. In that direction only instead of hearing everybody from

483
00:29:05,168 --> 00:29:08,602
every different direction all at once, you're able to actually

484
00:29:08,656 --> 00:29:12,314
more realistically hear people as you might in real life.

485
00:29:12,512 --> 00:29:16,106
Once again, we have a customer example of this. If you visit Odyssey stream,

486
00:29:16,138 --> 00:29:19,310
if you want to see an example of it, but just know that this is

487
00:29:19,380 --> 00:29:23,294
just kind of typical, taking the positions of objects within Babylonjs and

488
00:29:23,332 --> 00:29:27,194
feeding them into different sdks so you can actually see and hear

489
00:29:27,252 --> 00:29:31,410
that relative positioning that goes on over there to

490
00:29:31,480 --> 00:29:34,606
wrap things up. This is really just the tip of the iceberg

491
00:29:34,638 --> 00:29:38,102
when it comes to Babylon Js, where if you want to

492
00:29:38,156 --> 00:29:44,370
kind of see a workshop that we have done, you can visit Bitlymetaverseworkshop

493
00:29:44,450 --> 00:29:47,766
for self paced workshop. If you want to go more in depth on some of

494
00:29:47,788 --> 00:29:51,126
these experiences and actually kind of go further with all

495
00:29:51,148 --> 00:29:54,934
of that. It's an open source GitHub repository, which I really highly

496
00:29:54,982 --> 00:29:58,618
recommend you all check out. But also definitely make sure that you check out the

497
00:29:58,624 --> 00:30:01,530
community resources like Babylonjs community,

498
00:30:01,680 --> 00:30:05,262
as well as Docs at Dolbyio if you want to start incorporating some live

499
00:30:05,316 --> 00:30:09,214
streaming or video communication directly on there, I'm going to

500
00:30:09,252 --> 00:30:12,686
make sure to show off the Batlon JS documentation right now so

501
00:30:12,708 --> 00:30:16,046
that you all know where it is, how to find it, and also just

502
00:30:16,068 --> 00:30:20,030
kind of how to get started yourself. It's all just very well organized

503
00:30:20,110 --> 00:30:23,406
and very useful where you can even see the examples

504
00:30:23,438 --> 00:30:26,558
of the playground that they let you go and directly play directly with. So it's

505
00:30:26,574 --> 00:30:30,374
not a traditional documentation. And you can also see the workshop that I

506
00:30:30,412 --> 00:30:34,226
reference right here as a GitHub repository which you can then clone

507
00:30:34,338 --> 00:30:37,798
and then run as an interactive kind of

508
00:30:37,884 --> 00:30:41,366
documentation git repository that you're able

509
00:30:41,388 --> 00:30:44,966
to play directly with and create your own environment right there. So thank

510
00:30:44,988 --> 00:30:48,214
you so much for kind of listening and attending my

511
00:30:48,252 --> 00:30:51,870
talk. Hope you enjoyed it. If you have any questions,

512
00:30:51,940 --> 00:30:55,146
please feel free to tweet me down at the bottom you'll see my Twitter handle.

513
00:30:55,178 --> 00:30:58,494
It is at being of the Griffin and I'd love to see what you build

514
00:30:58,532 --> 00:31:01,886
in Babylon. If you have any questions or

515
00:31:01,908 --> 00:31:04,826
if you just want to show off something, I'd love to see your playground links.

516
00:31:04,858 --> 00:31:08,174
Please tweet those at me or just kind of say

517
00:31:08,212 --> 00:31:11,566
hi. I always want to meet more of you. Thanks for showing up and hope

518
00:31:11,588 --> 00:31:12,410
you enjoyed the conversation.

