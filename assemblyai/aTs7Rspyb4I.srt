1
00:00:27,650 --> 00:00:30,870
Hi, this is Oliver. I'd like to welcome you to our

2
00:00:31,020 --> 00:00:34,534
chaos Engineering circus show. If you now

3
00:00:34,572 --> 00:00:38,274
think. Whoa, whoa, wait. Circus? What circus?

4
00:00:38,402 --> 00:00:42,054
I was thinking this is about chaos engineering. Sit back

5
00:00:42,092 --> 00:00:45,206
and relax. I assure you are in the right talk.

6
00:00:45,308 --> 00:00:48,902
It's all about chaos engineering today. So why are we talking today

7
00:00:48,956 --> 00:00:53,610
about chaos engineering? Yeah. Simple answer. We do chaos engineering

8
00:00:53,770 --> 00:00:56,926
for over a year now, and we would like to share

9
00:00:57,028 --> 00:01:00,510
our experiences. And there's always a long story. Our it

10
00:01:00,580 --> 00:01:04,410
systems are historically grown up to a point where we

11
00:01:04,420 --> 00:01:07,986
had to renew them, so the support is discontinued. We had a lot

12
00:01:08,008 --> 00:01:11,454
of brain drain. Some ancient technologies like CobOl,

13
00:01:11,502 --> 00:01:15,006
and the systems are not cloud ready. Now we

14
00:01:15,048 --> 00:01:18,530
have a brand new maintainable platform and the possibility

15
00:01:18,610 --> 00:01:21,574
to roll out stable features and changes within hours,

16
00:01:21,692 --> 00:01:24,760
worthless weeks or months.

17
00:01:26,170 --> 00:01:30,730
But that comes at a cost. We have more teams,

18
00:01:31,550 --> 00:01:35,290
new technologies, new processes, and of course,

19
00:01:35,360 --> 00:01:39,180
the old monolithic world still plays a big part for now.

20
00:01:40,050 --> 00:01:42,430
New challenges everywhere.

21
00:01:43,650 --> 00:01:47,674
So in this talk, we focus on the implementation and operation of chaos

22
00:01:47,722 --> 00:01:51,274
engineering and how we integrate chaos engineering in our daily

23
00:01:51,322 --> 00:01:54,766
work. On our chaos engineering

24
00:01:54,798 --> 00:01:57,954
journey, we took a lot of detours. We made errors and

25
00:01:57,992 --> 00:02:00,770
had burdens and hazards.

26
00:02:02,150 --> 00:02:05,718
So we talk about how we get on track again in the hope

27
00:02:05,804 --> 00:02:09,110
that you will not being caught by our mistakes.

28
00:02:10,570 --> 00:02:13,880
But what's this circus thing now?

29
00:02:14,490 --> 00:02:17,886
Were we see parallels between the organization and operation

30
00:02:18,018 --> 00:02:21,402
of a circus and how software development might

31
00:02:21,456 --> 00:02:24,982
be organized. Please let us know afterwards

32
00:02:25,046 --> 00:02:28,010
if you also see some analogies.

33
00:02:28,590 --> 00:02:32,038
Well, who is Deutsche Bahn and what is Deutsche

34
00:02:32,054 --> 00:02:34,830
Banfatrip? Let me give you some context.

35
00:02:35,490 --> 00:02:39,338
Deutsche Bahn is the biggest train operating group in Germany. And Deutsche

36
00:02:39,354 --> 00:02:42,790
Bahn Fatrip is the interface between the customer and his train ticket.

37
00:02:42,890 --> 00:02:46,306
Basically, we sell train tickets. And for

38
00:02:46,328 --> 00:02:49,938
that reason, we develop software systems to support

39
00:02:50,024 --> 00:02:53,474
that. Customers can

40
00:02:53,512 --> 00:02:57,058
buy tickets over multiple channels, vending machines,

41
00:02:57,154 --> 00:03:00,840
mobile applications, online, and of course, in person,

42
00:03:01,770 --> 00:03:05,622
when were is no pandemic. We sell a couple of million tickets per

43
00:03:05,676 --> 00:03:09,274
day. Now you know what we are doing.

44
00:03:09,472 --> 00:03:13,754
And let's look about today's topics so

45
00:03:13,792 --> 00:03:15,850
how the show evolved.

46
00:03:16,590 --> 00:03:19,834
This is about the roots of our historical systems and what kind of

47
00:03:19,872 --> 00:03:23,422
systems we have now. The next point,

48
00:03:23,476 --> 00:03:26,942
we try to discuss the point if Chaos engineering is

49
00:03:26,996 --> 00:03:30,702
some sort of a magic band which turns every system into a super

50
00:03:30,756 --> 00:03:35,254
robust and resilient platform. And we talk about fire drills.

51
00:03:35,402 --> 00:03:38,590
Fire drills are practiced everywhere. On ships.

52
00:03:38,750 --> 00:03:42,706
The firefighters do fire drills, of course, and in

53
00:03:42,728 --> 00:03:46,302
the circus. So why don't

54
00:03:46,366 --> 00:03:50,294
do fire drills? In the development, we call

55
00:03:50,332 --> 00:03:53,494
a fire drill. In the context of Chaos engineering, a game day.

56
00:03:53,612 --> 00:03:57,106
We explain later the concepts behind game days and other chaos engineering

57
00:03:57,138 --> 00:04:00,666
practices. And there's always a reason not

58
00:04:00,688 --> 00:04:04,854
to do things. Here we talk about the most frequent and absurdly excuses

59
00:04:04,982 --> 00:04:09,434
and how we react on them and the

60
00:04:09,472 --> 00:04:12,682
most painful experiences. Why we are rolling out chaos

61
00:04:12,746 --> 00:04:16,560
engineering at Davy for clear is the last topic we cover in this talk.

62
00:04:17,090 --> 00:04:20,814
So, chaos engineering, what is it? So basically it

63
00:04:20,852 --> 00:04:24,242
states that chaos engineering makes my system

64
00:04:24,296 --> 00:04:28,126
capable to withstand turbulent conditions in production.

65
00:04:28,318 --> 00:04:32,174
So that sounds great. Why don't do everybody chaos

66
00:04:32,222 --> 00:04:35,380
engineering then? Well, that's a good question.

67
00:04:36,010 --> 00:04:39,474
What I know is the value that chaos

68
00:04:39,522 --> 00:04:43,234
engineering gives to us. It helps us to discover unknown

69
00:04:43,282 --> 00:04:46,546
technical debt depth that we were not aware

70
00:04:46,578 --> 00:04:50,294
of. It helps us proving and verifying our nonfunctional

71
00:04:50,342 --> 00:04:53,610
requirements. And it lowers

72
00:04:54,190 --> 00:04:57,834
time to recovery and increases the time

73
00:04:57,872 --> 00:05:01,854
between failure. For proving the success of

74
00:05:01,892 --> 00:05:05,530
chaos engineering, we advise to measure these metrics

75
00:05:05,610 --> 00:05:08,734
from the beginning. Finally,

76
00:05:08,852 --> 00:05:12,606
by the adoption of chaos engineering, we gain more resilience and

77
00:05:12,628 --> 00:05:16,066
robustness as well as a better understanding of the process

78
00:05:16,168 --> 00:05:19,090
in case of failure. And now let's start.

79
00:05:19,160 --> 00:05:22,340
Welcome to the show. Let's have a look at the actors now.

80
00:05:22,710 --> 00:05:26,066
Yes, these were the old times, monolithic age.

81
00:05:26,248 --> 00:05:29,554
The show was well known and no surprises for the audience.

82
00:05:29,682 --> 00:05:33,286
This show was very production. We only had one or two.

83
00:05:33,308 --> 00:05:36,950
Lets painted blue and a sign that state websphere.

84
00:05:37,530 --> 00:05:41,158
This was very sturdy and durable. Yeah, the last decades.

85
00:05:41,254 --> 00:05:44,794
But the surrounding parts of the system were much older and

86
00:05:44,832 --> 00:05:49,126
programmed in languages, which I either haven't heard of or treated

87
00:05:49,158 --> 00:05:53,210
the name a fairy tale. So with this setup,

88
00:05:53,370 --> 00:05:56,942
we could not fulfill the demand of

89
00:05:56,996 --> 00:06:00,990
the new audience because

90
00:06:01,060 --> 00:06:04,674
it took us three months or longer to change a show

91
00:06:04,712 --> 00:06:08,882
or introduce a new act. The audience requests 24/7

92
00:06:08,936 --> 00:06:12,530
shows today or even multiple shows in parallel.

93
00:06:13,670 --> 00:06:17,080
But on the other side, operations loved the show.

94
00:06:17,530 --> 00:06:20,466
It was very stable and known. No surprises.

95
00:06:20,658 --> 00:06:24,102
In contrast to business and developers, they want change,

96
00:06:24,236 --> 00:06:27,510
they want new features delivered to the show.

97
00:06:27,660 --> 00:06:31,418
Of course at a motor and cadence. So business has the

98
00:06:31,424 --> 00:06:35,562
money. So this is how our show looks like

99
00:06:35,616 --> 00:06:38,486
today. Now we have more tents,

100
00:06:38,678 --> 00:06:42,254
24/7 shows, even multiple of them

101
00:06:42,292 --> 00:06:46,286
in parallel. And best of all, shows are updated while they

102
00:06:46,308 --> 00:06:49,680
are running. What we have done to support that,

103
00:06:50,370 --> 00:06:53,614
we changed everything in our software

104
00:06:53,662 --> 00:06:56,946
delivery process. We moved to

105
00:06:56,968 --> 00:07:00,946
a cloud ready technology check stack. We scaled up the

106
00:07:00,968 --> 00:07:04,254
number of teams we used some sort of domain

107
00:07:04,302 --> 00:07:08,754
driven expects to separate our concerns. Continuous delivery

108
00:07:08,802 --> 00:07:12,374
and continuous deployment enabled us to change the

109
00:07:12,412 --> 00:07:16,466
show while it is running. Our quality assurance

110
00:07:16,578 --> 00:07:20,722
had a mind change from manual testing procedures

111
00:07:20,786 --> 00:07:24,102
which took a lot of time towards fully automatic

112
00:07:24,166 --> 00:07:27,914
testing. Also new processes were set

113
00:07:27,952 --> 00:07:32,014
up to support these changes. For example to

114
00:07:32,052 --> 00:07:35,866
have a new incident processes and operation

115
00:07:35,978 --> 00:07:39,578
procedures. So having a powerful

116
00:07:39,674 --> 00:07:43,422
CI CD cannon which allows you to shoot features

117
00:07:43,486 --> 00:07:46,290
directly into production systems,

118
00:07:46,710 --> 00:07:51,214
imagine what could happen if you change the actors jiggling

119
00:07:51,342 --> 00:07:54,290
to can source within the git commit.

120
00:07:54,710 --> 00:07:57,720
So the question is, what could possibly go wrong?

121
00:07:58,330 --> 00:08:01,718
Well, they did. The first feature we released on

122
00:08:01,724 --> 00:08:05,158
our new platform was KCI, also known as

123
00:08:05,244 --> 00:08:08,614
comfort check in. Well, this nice little

124
00:08:08,652 --> 00:08:12,106
feature allows you to check in at a seat in a train and you will

125
00:08:12,128 --> 00:08:15,946
not be bothered by the conductor asking for your ticket. Now you

126
00:08:15,968 --> 00:08:19,370
have quality time while traveling by train. Have a nap.

127
00:08:20,450 --> 00:08:24,302
This was the first feature which connects the new platform and the old

128
00:08:24,356 --> 00:08:27,582
agent monolithic. Guess what happened

129
00:08:27,636 --> 00:08:30,080
at Friday 05:00 p.m.. Yeah,

130
00:08:30,530 --> 00:08:33,714
the new feature went silently down.

131
00:08:33,912 --> 00:08:37,538
Customers start complaining online. Social media

132
00:08:37,624 --> 00:08:40,260
teams weekend was moving far away.

133
00:08:41,510 --> 00:08:44,706
So what chaos happened here? No time

134
00:08:44,728 --> 00:08:48,310
for analysis. Restart the services and cross fingers.

135
00:08:48,650 --> 00:08:52,440
Yes, we are online again. Pooh. Services started working,

136
00:08:53,130 --> 00:08:56,406
but the error has had side

137
00:08:56,428 --> 00:08:59,690
effects and was not only affecting the new feature KCI.

138
00:09:00,190 --> 00:09:07,180
We encountered a cascading error and

139
00:09:07,550 --> 00:09:11,850
customers could no more download their already bought tickets anymore.

140
00:09:12,010 --> 00:09:15,680
This was a serious problem and a bad thing.

141
00:09:16,370 --> 00:09:20,160
At Friday 05:00 p.m. People usually want to get home by train

142
00:09:20,530 --> 00:09:24,654
as a result. So more complaints, more headlines

143
00:09:24,702 --> 00:09:27,490
about the issue on big newspaper websites.

144
00:09:28,230 --> 00:09:31,922
Well, this time we did not make it to the primetime news.

145
00:09:32,056 --> 00:09:35,638
This time, the only reason for that was

146
00:09:35,724 --> 00:09:39,254
that the incident managers did a great job coordinating the

147
00:09:39,292 --> 00:09:43,522
fixes of the issue. But uncomfortable

148
00:09:43,586 --> 00:09:47,634
questions were asked. Concerns regarding our new platform were

149
00:09:47,692 --> 00:09:51,466
expressed from all directions. The most important

150
00:09:51,568 --> 00:09:55,258
question was asked. Maybe you guess what the most important

151
00:09:55,344 --> 00:09:58,620
question is. I bet you know it.

152
00:09:59,550 --> 00:10:02,442
Yeah. Who is responsible for the outage?

153
00:10:02,586 --> 00:10:05,914
Who is the guilty guy? So a big force mortem

154
00:10:05,962 --> 00:10:10,000
revealed it very efficiently. Well, job done.

155
00:10:11,490 --> 00:10:15,454
But maybe we asked the wrong question because only

156
00:10:15,492 --> 00:10:19,330
knowing who is responsible will not prevent us from future outage.

157
00:10:20,310 --> 00:10:24,034
It's more about asking why did we

158
00:10:24,072 --> 00:10:26,790
fail instead of who's responsible.

159
00:10:27,370 --> 00:10:30,760
Yeah, this was a process we had to learn.

160
00:10:31,130 --> 00:10:34,354
As a quick fix, we have added the adjective

161
00:10:34,402 --> 00:10:37,774
blameless in front of postmortems. Yeah, conditions,

162
00:10:37,842 --> 00:10:40,860
improvement already started. Remember,

163
00:10:41,630 --> 00:10:44,826
we have had changed everything. Technology,

164
00:10:45,008 --> 00:10:49,050
culture, responsibilities, and of course the processes

165
00:10:50,830 --> 00:10:54,654
and aside effect. We have this monolithic system which

166
00:10:54,692 --> 00:10:59,040
is still running and which is operated completely different.

167
00:11:01,250 --> 00:11:04,786
So maybe something has to

168
00:11:04,808 --> 00:11:08,658
change. That's what we all agreed on.

169
00:11:08,744 --> 00:11:11,460
But where should we start?

170
00:11:11,990 --> 00:11:15,554
What has to change? Mike will

171
00:11:15,592 --> 00:11:19,382
tell you about some of the ideas we came up with. Thanks, Ollie. Yeah.

172
00:11:19,436 --> 00:11:22,822
Well, so we put our heads together and if you're a big company,

173
00:11:22,876 --> 00:11:26,866
you have many experiments and they all know something. So architecture,

174
00:11:26,898 --> 00:11:30,614
for example, was asking for more governance, and the developers

175
00:11:30,662 --> 00:11:34,710
were asking for more coverage, and Ops was asking for better tracking,

176
00:11:34,870 --> 00:11:38,394
quality assurance, for better documentation. And, well,

177
00:11:38,512 --> 00:11:42,206
overall, it was kind of chaos. But at some

178
00:11:42,228 --> 00:11:45,774
point we agreed on that we need more tests. And these

179
00:11:45,812 --> 00:11:48,954
tests were called technical approval or technical acceptance

180
00:11:49,002 --> 00:11:52,126
tests. So we introduced them.

181
00:11:52,228 --> 00:11:56,110
And, well, you may be asking, do we need more of those tests?

182
00:11:56,270 --> 00:12:00,020
Well, we didn't know better, so we introduced them

183
00:12:00,630 --> 00:12:03,470
because we thought they will fit our goals,

184
00:12:03,550 --> 00:12:07,094
which were basically getting faster with lets errors and a better

185
00:12:07,132 --> 00:12:10,754
ux. So basically making the customers more happier.

186
00:12:10,882 --> 00:12:13,590
And to explain a little bit more about those tests,

187
00:12:13,930 --> 00:12:16,822
here's a slide deck that outlines it pretty well.

188
00:12:16,876 --> 00:12:20,134
So we introduced those.

189
00:12:20,332 --> 00:12:23,498
And what you have to know is in our organization, we have a

190
00:12:23,504 --> 00:12:27,206
gap between Devon Ops. In fact, they are different departments.

191
00:12:27,398 --> 00:12:30,934
And I will come back to the two tests outlined on the slide

192
00:12:30,982 --> 00:12:34,286
in our first game day story later on. But here you can basically see how

193
00:12:34,308 --> 00:12:37,726
that worked. So the developers were doing all the

194
00:12:37,748 --> 00:12:41,514
performance testing, and at some point they threw

195
00:12:41,562 --> 00:12:45,742
over the artifact to Ops and they were doing a rolling update

196
00:12:45,806 --> 00:12:49,042
and tested whether that works or not. And we thought,

197
00:12:49,096 --> 00:12:52,434
well, that will help. And the idea was simple. I mean,

198
00:12:52,472 --> 00:12:55,758
right before going into production, these tests will make sure the

199
00:12:55,784 --> 00:13:00,040
deployed services work and Ops will obviously take care of these

200
00:13:00,890 --> 00:13:04,470
because we thought they have a high interest that stuff works in production.

201
00:13:04,810 --> 00:13:08,134
Well, let me say that much. That didn't really

202
00:13:08,172 --> 00:13:11,466
work out either. So this time we

203
00:13:11,488 --> 00:13:14,746
thought, well, something has to change. And I mean, this time for real.

204
00:13:14,928 --> 00:13:18,522
So we did what every good company does and we asked

205
00:13:18,576 --> 00:13:22,622
ourselves, what would Netflix do? Right? And that

206
00:13:22,676 --> 00:13:26,350
sounds mad, I know, but let's look at it. We do have

207
00:13:26,420 --> 00:13:29,614
lets microservices, point taken. But we still have

208
00:13:29,652 --> 00:13:32,682
them. So the complexity is probably not too different.

209
00:13:32,836 --> 00:13:36,862
You have to solve similar problems. Why Netflix?

210
00:13:36,926 --> 00:13:40,542
Well, because compared to on Prem, Netflix noticed

211
00:13:40,606 --> 00:13:44,754
at some point that different things are important with microservices in the cloud.

212
00:13:44,872 --> 00:13:48,534
So Netflix developers practices and methods, you all know that

213
00:13:48,572 --> 00:13:51,958
chaos engineering to mitigate those problems. Well,

214
00:13:52,044 --> 00:13:55,746
and that led to a higher stability of the whole system. I know we're

215
00:13:55,778 --> 00:13:59,046
not Netflix, but let's take this graph here,

216
00:13:59,068 --> 00:14:02,682
for example. This is a part of the system.

217
00:14:02,816 --> 00:14:06,474
It's only the teams. So there are many more microservices below

218
00:14:06,512 --> 00:14:10,042
that. And as you can see, it's a big older now it's like one

219
00:14:10,096 --> 00:14:12,910
year old. It's not a death star, right?

220
00:14:12,980 --> 00:14:16,160
But the problems are looking the same.

221
00:14:16,690 --> 00:14:20,334
We have a complex technical system. And the funny thing here

222
00:14:20,372 --> 00:14:23,818
is, I mean, it's a complex technical system, but there is

223
00:14:23,844 --> 00:14:26,862
also a complex social system behind this with many teams,

224
00:14:26,926 --> 00:14:30,238
different responsibilities, slightly different approaches,

225
00:14:30,414 --> 00:14:33,394
a different culture in every team a little bit at least,

226
00:14:33,512 --> 00:14:36,754
and a different experience. And even though we

227
00:14:36,792 --> 00:14:40,674
decided to have guidelines for all the teams, like build robustness

228
00:14:40,722 --> 00:14:43,894
and resilience, how would you even test that? So we thought,

229
00:14:43,932 --> 00:14:47,526
well, chaos monkey to the rescue, right on the shoulder of

230
00:14:47,548 --> 00:14:50,518
giants. Let's use the chaos monkey for kubernetes.

231
00:14:50,694 --> 00:14:54,506
And we even got operations to agree on that. So we

232
00:14:54,528 --> 00:14:57,930
put the monkeys to good use and fired kavoom.

233
00:14:58,270 --> 00:15:01,470
So without knowing much, we deployed the monkeys.

234
00:15:01,810 --> 00:15:05,230
And I tell you, they did a great job.

235
00:15:05,380 --> 00:15:08,526
They killed ports and containers in one of

236
00:15:08,548 --> 00:15:11,680
our gazillion environments. But to be honest,

237
00:15:12,450 --> 00:15:15,220
we didn't really know what we were doing.

238
00:15:16,790 --> 00:15:19,438
A fool with a tool is still a fool.

239
00:15:19,614 --> 00:15:23,102
And that's how we felt. Yeah, it ended in tears

240
00:15:23,166 --> 00:15:27,238
once again because the microservices were not prepared and

241
00:15:27,324 --> 00:15:30,710
we started way too big. But what do you guess?

242
00:15:30,780 --> 00:15:34,694
What's the worst? Yeah, the worst was nobody noticed really.

243
00:15:34,812 --> 00:15:38,582
So we didn't have the observability to even detect the errors.

244
00:15:38,726 --> 00:15:42,698
So something went wrong and the teams were

245
00:15:42,784 --> 00:15:46,970
upset that something is not working. But we had no observability.

246
00:15:47,310 --> 00:15:51,006
What was going wrong here? So we

247
00:15:51,028 --> 00:15:54,218
were not prepared. We didn't do our homework,

248
00:15:54,394 --> 00:15:58,270
we didn't communicate enough. We didn't have

249
00:15:58,420 --> 00:16:02,126
the needed observability. Without much of

250
00:16:02,148 --> 00:16:04,740
a plan, we did really dangerous things.

251
00:16:07,110 --> 00:16:10,946
We felt like chaos Engineering has won the worst initiative of

252
00:16:10,968 --> 00:16:15,070
the year award. There was only one last chance

253
00:16:15,240 --> 00:16:18,722
to recover, do our homework

254
00:16:18,786 --> 00:16:22,086
and start over at the drawing board. So let's have

255
00:16:22,108 --> 00:16:25,106
a look about the site from Rosmeitz.

256
00:16:25,138 --> 00:16:29,226
What is chaos engineering about? So here we

257
00:16:29,248 --> 00:16:33,114
didn't think plan or experiments, so we just

258
00:16:33,152 --> 00:16:37,322
deployed. We violated every principle of

259
00:16:37,376 --> 00:16:40,794
chaos engineering. So we started over again with chaos

260
00:16:40,842 --> 00:16:44,254
engineering. Well, that sounds great. So what do

261
00:16:44,292 --> 00:16:47,614
we really need to do that? All these

262
00:16:47,652 --> 00:16:50,510
monkeys and tools need new cages.

263
00:16:50,850 --> 00:16:54,594
And of course we need someone who

264
00:16:54,632 --> 00:16:57,842
can train and keep

265
00:16:57,896 --> 00:17:01,358
track of these tools. So we need specialized trainers.

266
00:17:01,454 --> 00:17:04,546
Get a bunch of consultants to develop excel based

267
00:17:04,648 --> 00:17:08,894
meal and training plans. Yes, get all departments

268
00:17:08,942 --> 00:17:12,790
at the roundtable and design a process that printed out

269
00:17:12,860 --> 00:17:16,326
hardly fits on the walls of a meeting room. So this

270
00:17:16,348 --> 00:17:19,174
is really essential. And of course,

271
00:17:19,292 --> 00:17:22,822
what cost, nothing is no good. So open the treasure

272
00:17:22,886 --> 00:17:26,230
chest and bring a big stop stop, Ollie.

273
00:17:26,390 --> 00:17:28,860
I don't think you will need all of.

274
00:17:31,790 --> 00:17:35,214
I mean, let's focus on what we maybe really

275
00:17:35,252 --> 00:17:38,654
need. I think you just need to start doing

276
00:17:38,692 --> 00:17:42,160
chaos engineering. And what do I mean by that?

277
00:17:42,610 --> 00:17:46,434
Basically, first of all, you have to pick an aspect of the system you

278
00:17:46,472 --> 00:17:49,634
want to experiments on, right? And then you

279
00:17:49,672 --> 00:17:52,590
plan your experiment, you prepare your environment,

280
00:17:52,750 --> 00:17:56,674
traffic monitoring, access rights, all that stuff. And then you measure the steady

281
00:17:56,722 --> 00:18:00,630
state, monitor your system and conduct the experiment.

282
00:18:00,970 --> 00:18:03,986
Essentially break something and document your findings.

283
00:18:04,098 --> 00:18:07,410
And as you can see, I didn't talk about budgets, new cages

284
00:18:07,490 --> 00:18:10,700
or trainers. It's basically about doing it.

285
00:18:11,230 --> 00:18:14,826
So how does it look like? Well, this is

286
00:18:14,848 --> 00:18:18,026
an actual screenshot from one of our earlier game days. And as

287
00:18:18,048 --> 00:18:21,580
you can see, there are many different departments in one room,

288
00:18:22,670 --> 00:18:26,430
which is one of the biggest value of a game day in our opinion already,

289
00:18:26,580 --> 00:18:29,918
because you have ops there, architecture, you can see Ollie and

290
00:18:29,924 --> 00:18:33,466
me, there is business operations and developers.

291
00:18:33,578 --> 00:18:37,694
And someone who took the photo, which I think was also a developer,

292
00:18:37,742 --> 00:18:41,106
is also a developer. So then, as you can see,

293
00:18:41,128 --> 00:18:43,700
I mean, let's come back to our little first game day story.

294
00:18:44,150 --> 00:18:47,426
Well, our first experiment was let's do a rolling

295
00:18:47,458 --> 00:18:51,142
update, but with load. And the funny thing

296
00:18:51,196 --> 00:18:54,994
was we had a development team there and ops

297
00:18:55,042 --> 00:18:58,186
people and people there,

298
00:18:58,368 --> 00:19:02,300
several people there had more experience actually

299
00:19:02,990 --> 00:19:06,854
like 20 or more years in development or operations.

300
00:19:06,982 --> 00:19:10,346
So we all were pretty confident that nothing will go

301
00:19:10,368 --> 00:19:13,438
wrong. And we asked them beforehand whether they think

302
00:19:13,524 --> 00:19:17,006
if we will find any problems. And they all agreed that

303
00:19:17,028 --> 00:19:20,186
we will not find anything. So we designed the experiment,

304
00:19:20,298 --> 00:19:24,046
rolling update on the load. So we basically just combined

305
00:19:24,158 --> 00:19:28,126
the slides we showed you before, like the performance testing

306
00:19:28,158 --> 00:19:31,106
and the rolling update. And what do you get happened?

307
00:19:31,288 --> 00:19:35,054
Well, it ended almost in tears. The error

308
00:19:35,102 --> 00:19:38,274
rate was about 100% for 15 minutes.

309
00:19:38,392 --> 00:19:41,334
And to be honest, it was quite depressing for all of us.

310
00:19:41,532 --> 00:19:45,222
We expected some errors, but not a complete failure in broken services.

311
00:19:45,356 --> 00:19:47,510
And even though we used an orchestra,

312
00:19:48,410 --> 00:19:52,594
like the big kubernetes thing, you probably all know we didn't

313
00:19:52,642 --> 00:19:55,960
expect that the service went down for 15 minutes,

314
00:19:56,810 --> 00:20:00,266
but that was also good. I mean, it was a wake

315
00:20:00,298 --> 00:20:03,066
up call for everyone. On a side note,

316
00:20:03,098 --> 00:20:07,338
after that we never had any problems to get the buy in from management.

317
00:20:07,434 --> 00:20:10,800
So we just showed them that there is something wrong and that

318
00:20:11,970 --> 00:20:15,026
there are hidden problems. Well, what happened,

319
00:20:15,208 --> 00:20:18,846
you guessed, because we have this gap between dev and ops.

320
00:20:18,878 --> 00:20:21,810
They never tested to update the service under load.

321
00:20:22,230 --> 00:20:26,194
They just deployed it without load on a test environment and did

322
00:20:26,232 --> 00:20:29,560
a rolling update. And in retrospective this.

323
00:20:29,930 --> 00:20:33,986
Well, we could have known, I guess, but we didn't. So chaos engineering revealed

324
00:20:34,018 --> 00:20:37,510
that, and we learned something. And this is a big value

325
00:20:37,580 --> 00:20:41,034
already. So what's the value of chaos engineering? Well,

326
00:20:41,152 --> 00:20:44,250
it increases cross team communication to reduce friction.

327
00:20:44,590 --> 00:20:48,202
So we use a game tape to gather many teams in order

328
00:20:48,256 --> 00:20:52,050
to validate functional and non functional requirements. And we asked ourselves,

329
00:20:52,230 --> 00:20:55,918
what would the customer see if we break this or that?

330
00:20:56,004 --> 00:21:00,174
It helps you verify the non functional requirements, basically. And even

331
00:21:00,212 --> 00:21:03,822
if they're not really fixed, you can still guess the most important ones,

332
00:21:03,876 --> 00:21:07,934
I guess. Next thing on the list, you will find the unknown technical

333
00:21:07,982 --> 00:21:11,458
depth, right? The technical depth you don't know right now.

334
00:21:11,544 --> 00:21:14,690
The technical depth you know is the technical depth you have

335
00:21:14,760 --> 00:21:17,874
in your jira or your issue tracker. But the real

336
00:21:17,912 --> 00:21:21,798
value is to find the value to find the technical depth that your customers

337
00:21:21,884 --> 00:21:25,714
will find. So if they click on something and your whole system breaks.

338
00:21:25,842 --> 00:21:29,546
Spoiler usually on Saturdays, it reduces the

339
00:21:29,568 --> 00:21:33,446
time to recovery, because if you practice

340
00:21:33,558 --> 00:21:37,130
failure, you will know what to do. You're not stressed.

341
00:21:37,870 --> 00:21:40,698
And by that also, I mean if you mitigate issues,

342
00:21:40,784 --> 00:21:44,910
or if you're able to mitigate issues, you will increase the time between failure and

343
00:21:44,980 --> 00:21:49,006
which for us, increases the overall resilience of the system, which is

344
00:21:49,028 --> 00:21:52,426
good. Let's talk a bit about tooling. What tools

345
00:21:52,458 --> 00:21:55,300
could you use? Well, basically,

346
00:21:55,750 --> 00:21:59,710
you should invest in a great application performance monitoring solution.

347
00:21:59,870 --> 00:22:03,154
You could use instana, but any other solution in that space

348
00:22:03,192 --> 00:22:06,994
is good too. In the beginning. Well, we mostly

349
00:22:07,042 --> 00:22:09,750
use Pumbaa and chaos monkey for spring boot.

350
00:22:10,490 --> 00:22:14,594
At some point it makes sense to look at more sophisticated

351
00:22:14,642 --> 00:22:18,338
tooling and automation right now. Were evaluating

352
00:22:18,434 --> 00:22:22,034
steadybit, but you could also go for Gremlin or any other open

353
00:22:22,092 --> 00:22:25,706
source platform which will help you. But this is only a small part

354
00:22:25,728 --> 00:22:28,902
of the tooling you could use. So there is a good list on GitHub.

355
00:22:29,046 --> 00:22:32,586
Awesome. Chaos engineering. So go there, check out the links.

356
00:22:32,778 --> 00:22:37,022
There's also information on how to start with chaos engineering and other stuff.

357
00:22:37,156 --> 00:22:40,686
So, well, we have all the protective gear in place.

358
00:22:40,788 --> 00:22:44,626
Everybody's informed and everybody's there, as you

359
00:22:44,808 --> 00:22:47,970
have seen. But we still had problems to get started.

360
00:22:48,120 --> 00:22:51,506
So let's look about these five top five excuses not

361
00:22:51,528 --> 00:22:54,958
to start with chaos engineering. Number five,

362
00:22:55,144 --> 00:22:58,600
go live. Within a few days, you are messing up the test plan.

363
00:22:58,970 --> 00:23:02,440
So yes, we are having crunch time.

364
00:23:02,810 --> 00:23:05,858
Please do chaos engineering in the next release.

365
00:23:06,034 --> 00:23:09,686
So integrate to cope with that excuses.

366
00:23:09,878 --> 00:23:13,594
So maybe you have to integrate chaos engineering into

367
00:23:13,632 --> 00:23:17,862
the test plan. Or even better, shift left and integrate

368
00:23:17,926 --> 00:23:21,518
chaos engineering into your daily development process.

369
00:23:21,684 --> 00:23:25,614
In any case, keep talking and make QA a friend.

370
00:23:25,812 --> 00:23:29,070
They are on the same side. Everybody wants a

371
00:23:29,220 --> 00:23:33,094
stable system and convinced that chaos

372
00:23:33,162 --> 00:23:36,642
engineering may have experiments which can be real

373
00:23:36,696 --> 00:23:40,066
tests in the future. So this is a win win situation.

374
00:23:40,248 --> 00:23:43,860
Just keep on talking to QA. Number four,

375
00:23:44,230 --> 00:23:48,262
we don't have enough access rights. Yeah, often this

376
00:23:48,316 --> 00:23:51,010
actually means that there is a technical gap.

377
00:23:51,170 --> 00:23:54,694
People often do not know where to find the

378
00:23:54,732 --> 00:23:58,570
information and this is indicating

379
00:23:59,870 --> 00:24:03,370
that they are not aware of how to access the systems.

380
00:24:04,830 --> 00:24:08,986
Maybe you can ask questions like have

381
00:24:09,008 --> 00:24:13,614
you tried access the development database? And often

382
00:24:13,812 --> 00:24:17,200
the developers say, oh, well, I can

383
00:24:17,890 --> 00:24:21,534
if you show me. And did you even try it?

384
00:24:21,652 --> 00:24:24,258
Of course you have to try it.

385
00:24:24,424 --> 00:24:28,206
Often these problems disappear when talking and discussing with Ops.

386
00:24:28,318 --> 00:24:32,050
Number three, we can't think of any good experiment

387
00:24:32,710 --> 00:24:35,842
that are useful to us. Whoa. Yeah,

388
00:24:35,896 --> 00:24:39,086
this is an alarm. Your effort in implementation

389
00:24:39,118 --> 00:24:42,598
clear. Operating chaos engineering was not enough. You have

390
00:24:42,604 --> 00:24:46,342
to find out the reasons. Maybe the team just

391
00:24:46,396 --> 00:24:50,262
don't know or is ignorant to chaos engineering.

392
00:24:50,406 --> 00:24:54,054
So give them more coaching and explain the goals from adopting chaos

393
00:24:54,102 --> 00:24:57,274
engineering. It's also in their mind try

394
00:24:57,312 --> 00:25:01,006
to push the experiments to reflect use cases instead of

395
00:25:01,028 --> 00:25:04,826
thinking only technical aspects like DNS or rolling

396
00:25:04,858 --> 00:25:08,302
updates. So give them other formats for game

397
00:25:08,356 --> 00:25:12,240
days. Maybe red teaming is something

398
00:25:12,950 --> 00:25:16,814
they do like more and supply

399
00:25:16,862 --> 00:25:20,510
standard experiments so they can derive their own experiments

400
00:25:20,670 --> 00:25:24,322
from them. Number one. Number two,

401
00:25:24,456 --> 00:25:27,846
sorry, there's no time because right now we

402
00:25:27,868 --> 00:25:31,042
are only doing features. We take care of technical

403
00:25:31,106 --> 00:25:35,542
things later. This is a nice one because

404
00:25:35,596 --> 00:25:39,206
the use cases, technical and non functional requirements

405
00:25:39,318 --> 00:25:43,706
are inherently connected. Dividing them is not

406
00:25:43,728 --> 00:25:47,306
a good idea. Sometimes the developers will be

407
00:25:47,328 --> 00:25:50,910
forced to make this decision or this distinction.

408
00:25:51,570 --> 00:25:54,926
So insistence that everybody knows what

409
00:25:54,948 --> 00:25:59,646
will happen when you accumulate too

410
00:25:59,828 --> 00:26:02,350
many technical debt,

411
00:26:03,110 --> 00:26:07,090
it gets poisoned and will eventually be ignored until

412
00:26:07,160 --> 00:26:11,010
they hit you in production. This approach is very, very risky.

413
00:26:11,670 --> 00:26:15,686
There are many reasons for that. What we often see

414
00:26:15,868 --> 00:26:20,502
is that product owners are

415
00:26:20,556 --> 00:26:24,354
more like backlog managers than a person who feels

416
00:26:24,402 --> 00:26:28,818
responsible for the whole product lifecycle. Number one,

417
00:26:29,004 --> 00:26:32,362
we would love to do chaos engineering, but the product

418
00:26:32,416 --> 00:26:36,998
owner is not prioritizing it. Remember the last argument

419
00:26:37,094 --> 00:26:40,734
about the job of a product owner? Well, the product owner might have

420
00:26:40,772 --> 00:26:44,782
opposing aims and maybe he is

421
00:26:44,836 --> 00:26:48,190
measured by the cadence or count of

422
00:26:48,260 --> 00:26:52,278
delivered features. Sadly, the product stability

423
00:26:52,474 --> 00:26:56,322
suffers from this approach and often this is

424
00:26:56,456 --> 00:26:59,682
pushed by management. But that's another story.

425
00:26:59,816 --> 00:27:03,294
To mitigate his or her possible fear

426
00:27:03,342 --> 00:27:07,174
and uncertainty, stress out the value of

427
00:27:07,212 --> 00:27:11,160
chaos engineering for the product. For example,

428
00:27:11,770 --> 00:27:15,734
show them the value of chaos engineering by doing at

429
00:27:15,772 --> 00:27:19,914
least one game day which has a small scope and

430
00:27:19,952 --> 00:27:23,690
in addition, recruit expectations and

431
00:27:23,760 --> 00:27:27,558
or security as a driving lever or force.

432
00:27:27,734 --> 00:27:30,894
Regardless of the excuses, we did manage to

433
00:27:30,932 --> 00:27:34,800
host some game days and do some chaos engineering. So more than

434
00:27:35,730 --> 00:27:40,526
80 game days done up today and

435
00:27:40,708 --> 00:27:44,814
more important, the number of production relevant weaknesses.

436
00:27:44,942 --> 00:27:50,434
So about 120 plus these

437
00:27:50,472 --> 00:27:54,270
will not hit us in production anymore and we gained

438
00:27:54,350 --> 00:27:58,134
enough trust to host the first game day in our

439
00:27:58,172 --> 00:28:01,462
production environment. Yeah, this is great. What we are very

440
00:28:01,516 --> 00:28:05,510
proud of is the fact that multiple teams

441
00:28:05,850 --> 00:28:09,066
hosted hosting their own game days.

442
00:28:09,248 --> 00:28:13,050
Yeah, that's a great success. And also

443
00:28:13,120 --> 00:28:16,886
we started other game day formats, red teaming,

444
00:28:16,998 --> 00:28:21,262
wheel of misfortune, playing the incident process and

445
00:28:21,396 --> 00:28:25,214
what was very useful to us is having a place where all

446
00:28:25,252 --> 00:28:28,686
our documentation about our experiments will be

447
00:28:28,708 --> 00:28:32,254
collected and be accessible for everyone. And this

448
00:28:32,292 --> 00:28:36,100
helps teams to get ideas for new experiments as well as

449
00:28:36,470 --> 00:28:39,502
the possibility to share their findings.

450
00:28:39,646 --> 00:28:43,006
Because problems are often the same regarding

451
00:28:43,038 --> 00:28:45,730
health checks, DNS rolling updates,

452
00:28:46,150 --> 00:28:49,700
all this stuff and build up community,

453
00:28:50,070 --> 00:28:53,526
promote the finding of the month. Have a place where teams can talk

454
00:28:53,548 --> 00:28:57,270
about chaos engineering and share their experiences,

455
00:28:57,630 --> 00:29:00,902
write some blog articles, record podcast,

456
00:29:01,046 --> 00:29:05,354
all this will help to make chaos engineering more visible and

457
00:29:05,472 --> 00:29:09,002
success. Let's get to our top five

458
00:29:09,056 --> 00:29:11,918
learnings. First of all, people,

459
00:29:12,004 --> 00:29:15,406
processes and practices are key factors. You have to

460
00:29:15,428 --> 00:29:19,002
talk, talk, basically communicate with stakeholders,

461
00:29:19,066 --> 00:29:22,446
get them together in game days to test the system and to

462
00:29:22,468 --> 00:29:25,970
learn more about it. Don't just deploy the chaos monkey,

463
00:29:26,310 --> 00:29:30,178
tooling is the least of your problems. We started

464
00:29:30,264 --> 00:29:33,838
with a pretty simple game day and from that we continued.

465
00:29:33,934 --> 00:29:37,046
More importantly is to share your findings with others so they

466
00:29:37,068 --> 00:29:40,406
can learn from them too. It took us half a

467
00:29:40,428 --> 00:29:44,066
year till we even thought about automating some of our experiments,

468
00:29:44,178 --> 00:29:47,480
and that was around after 50 game days.

469
00:29:47,930 --> 00:29:51,018
Well, remember, basically pre match optimization is the root of

470
00:29:51,024 --> 00:29:54,410
all evil. So start small and aim for production.

471
00:29:55,630 --> 00:29:58,810
Well, we started with the technical system and the social

472
00:29:58,880 --> 00:30:01,870
system came later, but it depends.

473
00:30:02,690 --> 00:30:06,046
Most important is to start where nobody's heard.

474
00:30:06,228 --> 00:30:09,790
Usually that's in development or in a testing or staging environment.

475
00:30:10,770 --> 00:30:14,426
But don't forget you're aiming for production. Otherwise chaos imaging

476
00:30:14,458 --> 00:30:18,274
doesn't really make sense at some point. Don't be afraid to bug people. Don't get

477
00:30:18,312 --> 00:30:21,858
discouraged. Well, what we did, we organized the

478
00:30:21,864 --> 00:30:25,150
first game days. We moderated them, took care of the documentation,

479
00:30:25,230 --> 00:30:28,614
we invited the people basically to make it as easy

480
00:30:28,652 --> 00:30:32,114
as possible for the participants, research allies

481
00:30:32,162 --> 00:30:35,750
like operations and q a quality

482
00:30:35,820 --> 00:30:38,982
assurance. And what that means is,

483
00:30:39,036 --> 00:30:42,666
well, take the plunge if you have to. There are jobs that

484
00:30:42,688 --> 00:30:45,994
nobody wants to do. But if you want chaos engineering in your big

485
00:30:46,032 --> 00:30:49,146
organization, to be a part of

486
00:30:49,168 --> 00:30:52,814
the daily life, well, then you maybe have to take the plunge and stay

487
00:30:52,852 --> 00:30:55,950
positive about it. And most important,

488
00:30:56,100 --> 00:30:59,360
for us, at least, is don't get eaten by the process line.

489
00:31:00,210 --> 00:31:03,954
At some point, other departments want a piece of the cake. As soon as

490
00:31:03,992 --> 00:31:07,694
chaos engineering is successful, quality assurance

491
00:31:07,742 --> 00:31:11,362
wanted to make specific experiments mandatory. So they

492
00:31:11,416 --> 00:31:15,186
asked us whether we could always do them in game days, like making a

493
00:31:15,208 --> 00:31:18,998
checklist screen. And we hate checklists, so this is bad,

494
00:31:19,084 --> 00:31:23,126
we thought, because game day experiments should

495
00:31:23,148 --> 00:31:26,566
be self driven by the participating teams, because they know best what

496
00:31:26,588 --> 00:31:30,818
they need. Right. So this is how we came to hate checklists.

497
00:31:30,994 --> 00:31:34,534
There are better alternative solutions because one

498
00:31:34,572 --> 00:31:37,480
fits them all often doesn't make sense.

499
00:31:38,170 --> 00:31:41,646
Well, and one last thing. There are

500
00:31:41,668 --> 00:31:45,514
no excuses. Even big organizations

501
00:31:45,562 --> 00:31:48,830
can do chaos engineering if they want to. It's just a matter

502
00:31:48,900 --> 00:31:51,902
of time, especially if you're going into the cloud.

503
00:31:52,036 --> 00:31:55,854
So what do we want from you? Well, last but

504
00:31:55,892 --> 00:31:59,834
not least, invite your team to your first game day. Share your findings

505
00:31:59,882 --> 00:32:02,830
with other teams, go out and do chaos engineering.

506
00:32:03,330 --> 00:32:03,982
Thank you.

