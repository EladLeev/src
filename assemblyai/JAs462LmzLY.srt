1
00:00:25,090 --> 00:00:29,014
Me. Hello. Hi. Conf 42.

2
00:00:29,132 --> 00:00:32,486
Hi. Thank you so much for coming. It's so great

3
00:00:32,508 --> 00:00:36,600
to be here. It's like our second Conf 42. Yeah, it's a second

4
00:00:37,130 --> 00:00:39,400
of 42, I guess. I don't know.

5
00:00:42,090 --> 00:00:46,230
Yeah. So thank you very much for coming. I'm Shimon. I'm Noah.

6
00:00:47,210 --> 00:00:50,974
And yeah, let's get straight to it. So what are we going to talk

7
00:00:51,092 --> 00:00:54,922
about today? Today we're going to talk centralized policy

8
00:00:54,986 --> 00:00:57,470
management at scale. Scale.

9
00:00:59,490 --> 00:01:03,246
But first let's talk about us. So my name

10
00:01:03,268 --> 00:01:05,658
is Nael Barki, I'm a fullstack developer.

11
00:01:05,754 --> 00:01:09,266
I'm checkwriter and also one

12
00:01:09,288 --> 00:01:13,214
of the leaders of GitHub Israel community, which is the largest GitHub

13
00:01:13,262 --> 00:01:16,626
community in the whole universe. Amazing. And my name is

14
00:01:16,648 --> 00:01:19,846
Shimon, I'm one of the co founders and the CEO of the Tree. I'm an

15
00:01:19,868 --> 00:01:23,266
AWS community hero and I live and breathe DevOps

16
00:01:23,298 --> 00:01:26,278
and infrastructure and this is why we're here.

17
00:01:26,444 --> 00:01:29,814
So today we're going to talk about how to manage centralized

18
00:01:29,862 --> 00:01:33,930
policy at scale. We're going to show it to you in the eyes

19
00:01:34,000 --> 00:01:38,010
of a Kubernetes administrator that tries to manage

20
00:01:38,080 --> 00:01:41,594
the policies for the organization. But I think it can be applied not

21
00:01:41,632 --> 00:01:45,294
only for Kubernetes if you're a serverless organization or any other

22
00:01:45,332 --> 00:01:48,794
organization. So what we do in the trees,

23
00:01:48,842 --> 00:01:52,734
we see a lot of organizations that deal with policies because we

24
00:01:52,772 --> 00:01:56,034
help prevent misconfigurations from

25
00:01:56,072 --> 00:01:59,794
reaching production and this is what we do and policies is

26
00:01:59,832 --> 00:02:03,314
how we roll and we have an open source CLI that

27
00:02:03,352 --> 00:02:06,914
runs policies and we just passed 5000 GitHub

28
00:02:06,962 --> 00:02:09,510
stars. Yeah. Woohoo.

29
00:02:10,090 --> 00:02:13,622
Yeah. So we're really happy but let's get into it.

30
00:02:13,756 --> 00:02:17,186
So today we want to talk about how to avoid

31
00:02:17,378 --> 00:02:19,770
this misconfigurations.

32
00:02:20,510 --> 00:02:23,898
Yeah. And I really like to say that as a developer at a

33
00:02:23,904 --> 00:02:27,402
datree, what I do, we do

34
00:02:27,456 --> 00:02:30,634
policies for a living. But what I do is not only to

35
00:02:30,672 --> 00:02:34,446
understand about Kubernetes, how it works and what are the policies that

36
00:02:34,468 --> 00:02:37,726
we want, it's also to understand how you can blow up your

37
00:02:37,748 --> 00:02:40,960
own cluster. So I really understand

38
00:02:41,970 --> 00:02:45,858
why organization needs the centralized policies and this

39
00:02:45,864 --> 00:02:49,122
is what we are going to talk today. And the real question,

40
00:02:49,176 --> 00:02:53,202
the main question is how you can prevent the next

41
00:02:53,256 --> 00:02:57,222
misconfiguration, the next production outage. And after

42
00:02:57,276 --> 00:02:59,720
a lot of thinking, a lot of thinking,

43
00:03:00,730 --> 00:03:04,950
100 postmortems, if you saw that talk,

44
00:03:05,100 --> 00:03:08,998
we summed it up into three major steps.

45
00:03:09,174 --> 00:03:12,362
So step number one or step number

46
00:03:12,416 --> 00:03:16,166
zero? Actually the first step, how many fingers

47
00:03:16,198 --> 00:03:20,540
does a developer have 4012.

48
00:03:23,890 --> 00:03:28,430
So step number the first step is meet OPA.

49
00:03:29,730 --> 00:03:33,934
It's your policy engine. OPA is a general proposed

50
00:03:33,982 --> 00:03:38,142
policy engine. It gives services the ability to decouple

51
00:03:38,206 --> 00:03:42,274
decision making logic from policy enforcement. You can

52
00:03:42,392 --> 00:03:46,482
basically think about OPA like a super engine. You can write your policies

53
00:03:46,546 --> 00:03:50,226
into it, you can publish your policies into it. So whenever

54
00:03:50,258 --> 00:03:53,522
you execute it with every input

55
00:03:53,586 --> 00:03:56,886
JSON input, OPA will

56
00:03:57,068 --> 00:04:00,746
check if it violates any one

57
00:04:00,768 --> 00:04:05,450
of your policies that you published. You can talk to it using API

58
00:04:07,230 --> 00:04:11,126
or importing it as a library, and it will evaluate the business logic

59
00:04:11,158 --> 00:04:14,782
of whether it should allow a policy to pass or not.

60
00:04:14,916 --> 00:04:18,206
Yeah, and there are many different use cases, not just to

61
00:04:18,228 --> 00:04:21,454
check core configuration, there are many authorization use

62
00:04:21,492 --> 00:04:25,106
cases that are being used with OPA and the other things.

63
00:04:25,288 --> 00:04:28,850
Yeah, but the real beauty of OPA, the real magic behind

64
00:04:28,920 --> 00:04:32,290
OPA is that OPA enables you to

65
00:04:32,360 --> 00:04:36,354
offload and unify all your decision making logic

66
00:04:36,402 --> 00:04:40,438
into a dedicated server. Yeah. So you can decouple your

67
00:04:40,604 --> 00:04:44,422
business logic from your application logic from your

68
00:04:44,476 --> 00:04:48,546
decision making of whether a user can perform an action of delete,

69
00:04:48,578 --> 00:04:52,266
let's say. So you offload it to a different service that does all

70
00:04:52,288 --> 00:04:56,138
of this calculation, and then you don't need to build this

71
00:04:56,224 --> 00:04:59,810
logic of policies inside every one of your microservices.

72
00:04:59,990 --> 00:05:04,110
Yeah. And this really empowers

73
00:05:05,330 --> 00:05:09,662
admins in the organization to have control over

74
00:05:09,716 --> 00:05:13,086
their system. Yep. So moving forward,

75
00:05:13,268 --> 00:05:16,446
by the way, I'll just say that OPA is part of the CNCF

76
00:05:16,478 --> 00:05:20,354
foundation. It is a graduated projects. We really recommend doing

77
00:05:20,392 --> 00:05:23,646
that and using it. Yeah. So to use OPA,

78
00:05:23,678 --> 00:05:27,074
it's very simple. First you need to integrate with OPA

79
00:05:27,122 --> 00:05:30,614
and you can use OPA as an embedded package inside your

80
00:05:30,652 --> 00:05:33,894
project. If you're using the Golang language or as

81
00:05:33,932 --> 00:05:37,826
a host demoing, you write your policies in regular

82
00:05:37,858 --> 00:05:41,094
language. We'll talk about later. And you query OPA

83
00:05:41,142 --> 00:05:44,614
by sending an HTTP request with the input

84
00:05:44,662 --> 00:05:48,186
and OPA will do the rest. Or you can call it as

85
00:05:48,208 --> 00:05:51,280
a library and just call it directly. Yeah,

86
00:05:52,130 --> 00:05:55,642
and this is can example of the regular language. It's a declarative

87
00:05:55,706 --> 00:05:59,022
language. It's very easy to learn from

88
00:05:59,076 --> 00:06:02,654
experience, I'll tell you that. And this is can example of

89
00:06:02,692 --> 00:06:06,974
a policy written in Orba which violates if deployment

90
00:06:07,022 --> 00:06:10,434
resource have the app label. It's very

91
00:06:10,472 --> 00:06:14,146
straightforward, you can mark

92
00:06:14,248 --> 00:06:17,662
my word. Yeah, it's a nice declarative language

93
00:06:17,726 --> 00:06:21,414
and there aren't many loops and

94
00:06:21,452 --> 00:06:24,246
stuff like that. It's like what you see is what you get. This is,

95
00:06:24,268 --> 00:06:28,866
I guess what they tried to do? Yeah, it's more like SQL than Javascript,

96
00:06:28,978 --> 00:06:32,780
I always like to say. But let's move forward to step number

97
00:06:33,390 --> 00:06:37,050
one which is define your policies.

98
00:06:37,470 --> 00:06:40,826
Cool. So defining the policies is very important. So I

99
00:06:40,848 --> 00:06:44,506
remember when I was an engineering manager for 400 developers

100
00:06:44,618 --> 00:06:47,806
and one developer made a mistake and it propagated to

101
00:06:47,828 --> 00:06:51,866
production and we had an outage and it's okay, it happens. I also make mistakes

102
00:06:51,898 --> 00:06:55,066
all the time. But I thought to myself what can we do,

103
00:06:55,108 --> 00:06:58,980
how can we prevent the next outage? And for me

104
00:06:59,590 --> 00:07:03,266
we tried sending emails and stuff like that, which obviously doesn't work.

105
00:07:03,368 --> 00:07:07,314
So we said okay, we need some sort of framework, some sort of guardrails so

106
00:07:07,352 --> 00:07:11,094
everyone will work by them and we call them policies. Number one,

107
00:07:11,132 --> 00:07:14,342
you need to define what are your policies. For example, make sure

108
00:07:14,396 --> 00:07:17,874
that every kubernetes workload has a memory limit and cpu

109
00:07:17,922 --> 00:07:21,734
limit and has a liveness probe and readiness probe. And every docker container

110
00:07:21,782 --> 00:07:25,034
has a health check. So that's a policy. And now you want

111
00:07:25,072 --> 00:07:28,314
all of your microservices to follow this policy. So number one,

112
00:07:28,352 --> 00:07:31,850
define the policy. Let's say all workloads should have memory limits.

113
00:07:31,930 --> 00:07:35,694
And number two, define a granular policy. So just

114
00:07:35,732 --> 00:07:39,706
having a top level thing that tries to narrow

115
00:07:39,738 --> 00:07:43,214
everything down, I don't think it's good enough because let's say you put a four

116
00:07:43,252 --> 00:07:46,766
gigabyte memory limit, but then you have can AI workload

117
00:07:46,798 --> 00:07:50,258
that needs 50gb. So start from the top as

118
00:07:50,344 --> 00:07:53,838
broad policies and then go deeper and deeper to more granular

119
00:07:53,934 --> 00:07:57,758
policies. Amazing. So now that you have defined

120
00:07:57,774 --> 00:08:00,930
the policies in your organization and you know what you want to enforce,

121
00:08:01,010 --> 00:08:04,646
the real question is how you integrate the policies inside your pipeline. And this

122
00:08:04,668 --> 00:08:07,898
is very crucial. I really want you to think about where in

123
00:08:07,904 --> 00:08:10,250
the pipeline you want to enforce the policies.

124
00:08:13,150 --> 00:08:16,666
This decision will affect the developers and the DevOps engineers in

125
00:08:16,688 --> 00:08:20,702
your organization. So the first option would be to

126
00:08:20,756 --> 00:08:23,310
integrate the policies in the CI pipeline.

127
00:08:25,810 --> 00:08:28,986
If you want to enforce those policies in the CI

128
00:08:29,018 --> 00:08:32,506
pipeline we really recommend you to

129
00:08:32,548 --> 00:08:35,902
use conftest which is also built on top of OPA.

130
00:08:36,046 --> 00:08:39,710
So conftest is can open source library which helps

131
00:08:39,790 --> 00:08:43,614
writing tests again any structures filed XML,

132
00:08:43,662 --> 00:08:47,226
JSON Docker, pretty much anything yaml.

133
00:08:47,278 --> 00:08:50,646
Of course as I said before, it's built on top of

134
00:08:50,668 --> 00:08:54,614
OPA. So all the policies should be written in Rego. And another

135
00:08:54,732 --> 00:08:58,282
amazing thing about, really awesome thing about confidence is that

136
00:08:58,336 --> 00:09:02,170
it allows you to push and pull your policies into docker registries.

137
00:09:02,510 --> 00:09:05,882
It's not only about containers anymore and to use

138
00:09:05,936 --> 00:09:09,030
conftest really straightforward,

139
00:09:09,110 --> 00:09:13,098
you need to download conftest, write the policies in Rego,

140
00:09:13,274 --> 00:09:18,410
and then execute that policy according

141
00:09:18,570 --> 00:09:22,382
onto a specific file using the conftest test

142
00:09:22,436 --> 00:09:26,190
command. And as you can see here, and you will see the violation

143
00:09:26,270 --> 00:09:27,170
output.

144
00:09:29,110 --> 00:09:32,526
Yeah, you can really think about it as a unit testing

145
00:09:32,558 --> 00:09:36,370
library. And as you can see here, we used GitHub action

146
00:09:36,450 --> 00:09:40,466
just to hook conftest into our pipeline.

147
00:09:40,578 --> 00:09:44,102
We used Docker pool to pull conftest and then

148
00:09:44,156 --> 00:09:48,214
we ran conftest test with

149
00:09:48,252 --> 00:09:50,938
this path and pretty much that's it.

150
00:09:51,104 --> 00:09:54,714
This is conftest straightforward? Yeah, very simple. I really

151
00:09:54,752 --> 00:09:57,946
like conftest as a developer. It made me a lot of sense.

152
00:09:58,128 --> 00:10:01,554
But what if we want to integrate our policies

153
00:10:01,622 --> 00:10:04,894
in the cluster? Yeah, so I'm a big believer in

154
00:10:04,932 --> 00:10:08,714
shift left and I believe we as developers,

155
00:10:08,762 --> 00:10:12,218
we want to find problems as soon as possible in the pipeline.

156
00:10:12,394 --> 00:10:16,058
But then still sometimes you want to make sure that your runtime is

157
00:10:16,084 --> 00:10:19,762
also secure. And I don't know, maybe someone cubectl something

158
00:10:19,816 --> 00:10:23,346
into your cluster or I don't know what. So if you want to make sure

159
00:10:23,368 --> 00:10:27,270
that your policies are also enforced and checked

160
00:10:27,930 --> 00:10:31,666
on the runtime environment on your Kubernetes cluster,

161
00:10:31,778 --> 00:10:35,378
you can use Gatekeeper. And Gatekeeper is a great utility,

162
00:10:35,474 --> 00:10:38,938
also part of the open policy agent

163
00:10:39,104 --> 00:10:42,490
GitHub project, and it uses the

164
00:10:42,560 --> 00:10:46,134
admission controller Webhook of Kubernetes.

165
00:10:46,262 --> 00:10:50,102
And it is much like the operating system webhook. So imagine

166
00:10:50,166 --> 00:10:53,966
you're an operating system, there is a process trying to run,

167
00:10:54,068 --> 00:10:57,790
then the operating system calls the antivirus and asks him hey Mr.

168
00:10:57,860 --> 00:11:01,214
Antivirus, can this executable run? And then it

169
00:11:01,252 --> 00:11:05,606
tells them yes or no. So it's the same thing. So you Kubectl

170
00:11:05,738 --> 00:11:09,806
apply a resource to Kubernetes. Then this webhook

171
00:11:09,838 --> 00:11:13,954
admission controller calls Gatekeeper. Gatekeeper runs a policy check

172
00:11:14,072 --> 00:11:18,434
and says you cannot push this, it does not have memory limit.

173
00:11:18,562 --> 00:11:22,290
Go fix your deployment. And then it rejects

174
00:11:22,370 --> 00:11:26,502
the deployment and then the developer has to fix it. And this way

175
00:11:26,636 --> 00:11:29,530
you achieve a runtime protection. Yeah,

176
00:11:29,600 --> 00:11:33,340
Gatekeeper has a lot of other options that you can

177
00:11:33,790 --> 00:11:37,514
configure. You can have it on audit mode, you could have it on test

178
00:11:37,552 --> 00:11:41,120
mode, it's really cool, it's really cool project.

179
00:11:43,890 --> 00:11:47,390
So how does it work? So you define a constraint

180
00:11:47,890 --> 00:11:51,294
template, which then checks for, it says

181
00:11:51,332 --> 00:11:54,990
like okay, for every resource that comes in we have a constraint. For example,

182
00:11:55,140 --> 00:11:58,194
this talks about labels and it's very

183
00:11:58,232 --> 00:12:01,650
simple. I won't go line up by line with you, but you say like basically

184
00:12:01,720 --> 00:12:05,634
check for metadata tag and see if there is a label and then

185
00:12:05,752 --> 00:12:09,126
some sort of label. Let's say you want to have a cost center, so you

186
00:12:09,148 --> 00:12:12,482
want to have a namespace and a label for every resource.

187
00:12:12,626 --> 00:12:16,054
And then what happens is that once you apply that,

188
00:12:16,252 --> 00:12:19,378
then you write a policy and you

189
00:12:19,484 --> 00:12:22,874
send a resource to it. And then you say,

190
00:12:22,912 --> 00:12:26,278
okay, this resource and this policy with the constraint,

191
00:12:26,374 --> 00:12:30,342
can this be applied to the cluster or should it be rejected?

192
00:12:30,486 --> 00:12:33,790
And this is how it works. So it's very simple. Yeah,

193
00:12:33,860 --> 00:12:37,134
but it's not the same policy. I mean, if you

194
00:12:37,252 --> 00:12:40,474
decide that you want to use both Gatekeeper and conftest,

195
00:12:40,522 --> 00:12:43,982
you will have to write the same policies, almost the same policies.

196
00:12:44,046 --> 00:12:47,778
One for Gatekeeper and the cluster will store

197
00:12:47,944 --> 00:12:50,530
those policies and one for conf test. Yeah,

198
00:12:50,600 --> 00:12:54,510
so both of them are written in Rego. They're almost identical.

199
00:12:54,590 --> 00:12:57,954
They're a bit different. And if it's in gatekeeper,

200
00:12:58,002 --> 00:13:01,414
gatekeeper will run inside of your Kubernetes cluster and it will

201
00:13:01,452 --> 00:13:04,914
be there. But you can almost use the same policies.

202
00:13:05,042 --> 00:13:09,194
Yeah, but you have it like twice. You have two

203
00:13:09,232 --> 00:13:12,746
instances of the same policy. Okay,

204
00:13:12,848 --> 00:13:16,202
amazing. So using

205
00:13:16,256 --> 00:13:19,942
conftest and using key gatekeeper, you can practically protect

206
00:13:20,016 --> 00:13:22,906
yourself, protect the entire pipeline.

207
00:13:23,098 --> 00:13:26,586
Totally. So it's great. You integrate it directly

208
00:13:26,618 --> 00:13:30,526
within your source control and you can be projects from dev to

209
00:13:30,548 --> 00:13:33,966
production. Yeah. So the next step is how

210
00:13:33,988 --> 00:13:36,580
do you control, review and monitor what you've done?

211
00:13:37,910 --> 00:13:41,118
For instance, as I said, we're in my previous role,

212
00:13:41,214 --> 00:13:44,462
so we had 400 engineers and like 1000 git repos.

213
00:13:44,526 --> 00:13:47,782
So let's say you define the policy which is by itself,

214
00:13:47,916 --> 00:13:51,286
you need to think like, which policy do we want? Which policies can

215
00:13:51,308 --> 00:13:55,320
there be? And then you need to integrate it into each one of

216
00:13:55,770 --> 00:13:58,966
your builds. But then let's say

217
00:13:58,988 --> 00:14:01,850
I want to make a change and I want to introduce a new policy.

218
00:14:01,920 --> 00:14:04,758
So what do I do? I open 1000 pull requests.

219
00:14:04,934 --> 00:14:08,054
So if I'm using raw

220
00:14:08,102 --> 00:14:12,090
solutions like gatekeeper and conf test, this is exactly

221
00:14:12,160 --> 00:14:15,642
what you need to do. If you use solutions like the tree,

222
00:14:15,706 --> 00:14:19,294
it comes built in. But just so you know, it is

223
00:14:19,332 --> 00:14:22,814
important to be able to dynamically change the policy. It is

224
00:14:22,852 --> 00:14:26,786
important, number two, to have full control and visibility into

225
00:14:26,888 --> 00:14:30,702
which policies ran on, which resource, what was rejected,

226
00:14:30,766 --> 00:14:33,838
what was passed, what is your status. So it's

227
00:14:33,854 --> 00:14:37,190
sort of like having a command and control solution.

228
00:14:37,530 --> 00:14:41,240
And those are the things that don't really come

229
00:14:41,770 --> 00:14:45,286
built in with OPA and Gatekeeper and conftest. And this

230
00:14:45,308 --> 00:14:49,894
is what the tree is complementary about. So we

231
00:14:49,932 --> 00:14:53,674
come with predefined battle tested rules that you can just use

232
00:14:53,712 --> 00:14:57,034
out of the box. You can write custom rules, and you can

233
00:14:57,072 --> 00:15:00,838
also have an enterprise grade control and management so

234
00:15:00,864 --> 00:15:04,522
you can oversee everything that happens and dynamically assign

235
00:15:04,586 --> 00:15:07,998
other policies and change them on the

236
00:15:08,004 --> 00:15:11,406
fly without having to change the code itself. So how does

237
00:15:11,428 --> 00:15:14,722
it work, Noah? This is

238
00:15:14,776 --> 00:15:18,034
really straightforward. All you need to do is to

239
00:15:18,072 --> 00:15:22,020
install the tree and execute the tree test

240
00:15:22,950 --> 00:15:26,614
with the path of the files that you want to test, and the tree will

241
00:15:26,652 --> 00:15:30,034
show a full output with guidelines to how to solve

242
00:15:30,082 --> 00:15:34,470
every violation and where that violation occurred.

243
00:15:34,890 --> 00:15:38,230
As you can see here. And it's free,

244
00:15:38,300 --> 00:15:42,614
it's an open source, and since it's my teammates and

245
00:15:42,812 --> 00:15:46,278
mine code, I encourage you to submit a

246
00:15:46,284 --> 00:15:49,366
pull request and

247
00:15:49,388 --> 00:15:51,840
we'll try to get to it in time because it,

248
00:15:52,690 --> 00:15:55,886
but we promise we read everything. Yeah.

249
00:15:56,068 --> 00:15:59,614
Cool. So thank you very much, Noah. Thank you very much.

250
00:15:59,652 --> 00:16:02,394
Iman. Thank you very much. Thank you. Conf 42 bye.

