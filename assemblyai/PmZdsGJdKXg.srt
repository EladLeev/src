1
00:01:54,010 --> 00:01:57,258
Hey everybody, welcome to my talk. Stop committing your secrets.

2
00:01:57,354 --> 00:02:00,862
Get hooks to the rescue here at Comp 42 death sec

3
00:02:00,916 --> 00:02:04,126
ops 2022. So, I'm Dwayne, I live

4
00:02:04,148 --> 00:02:07,846
in Chicago, been a developer advocate since 2016, and you can

5
00:02:07,868 --> 00:02:10,646
find me on Twitter at mcDwayne. I'm happy to talk to you about anything we

6
00:02:10,668 --> 00:02:13,634
talk about today and other stuff besides, like improv,

7
00:02:13,682 --> 00:02:17,122
karaoke, and rock and roll. I work for a company called GitGuardian.

8
00:02:17,186 --> 00:02:20,346
They'll come up later in this talk as well. But we are a

9
00:02:20,448 --> 00:02:24,646
security platform mostly concerned with secret detection,

10
00:02:24,758 --> 00:02:28,554
secret sprawl detection and remediation, as well as infrastructure as

11
00:02:28,592 --> 00:02:31,470
code and some other areas as we progressed.

12
00:02:32,370 --> 00:02:36,240
Really what we're talking about today is the eternal battle of

13
00:02:36,610 --> 00:02:40,030
cat and mouse game, of hackers trying to get at your data

14
00:02:40,180 --> 00:02:43,258
and your information. One of the ways that

15
00:02:43,284 --> 00:02:46,878
they have to get in is through finding hard coded

16
00:02:46,894 --> 00:02:50,766
secrets laying around. And just to put this in perspective,

17
00:02:50,878 --> 00:02:54,466
a few case studies here. Uber, they got

18
00:02:54,488 --> 00:02:58,520
owned by a teenage hacker earlier in 2022.

19
00:02:59,210 --> 00:03:02,626
He phished for initial access rights,

20
00:03:02,738 --> 00:03:06,054
then immediately found a lot of hard

21
00:03:06,092 --> 00:03:09,626
coded credentials in Powershell scripts. Then he went to the New York Times and said,

22
00:03:09,648 --> 00:03:13,210
hey, look what I did. Toyota. They had

23
00:03:13,280 --> 00:03:16,460
a secret data server key

24
00:03:16,910 --> 00:03:21,434
in a public repo by accident for about five years because

25
00:03:21,472 --> 00:03:24,206
a subcontractor pushed something public that shouldn't have been public.

26
00:03:24,308 --> 00:03:27,230
296,000 customers have been affected.

27
00:03:27,650 --> 00:03:31,774
Samsung, 160 gigs of stolen data. And when

28
00:03:31,812 --> 00:03:36,226
that was pushed out to public, it was discovered that over 6000 keys for

29
00:03:36,328 --> 00:03:40,114
API keys, passwords, credentials, over 6000 secrets had been hard

30
00:03:40,152 --> 00:03:43,506
coded throughout their code base. No proof that it

31
00:03:43,528 --> 00:03:47,346
did lead to a second data breach reported

32
00:03:47,378 --> 00:03:51,400
in September. But odds are it didn't help things.

33
00:03:52,010 --> 00:03:54,440
AstraZeneca, this is a very recent case.

34
00:03:54,810 --> 00:03:58,930
They pushed hard coded credentials to a test environment,

35
00:03:59,090 --> 00:04:03,366
and then through user error, they're calling it actual patient

36
00:04:03,398 --> 00:04:06,010
data, ended up on that test environment.

37
00:04:06,670 --> 00:04:09,866
It's kind of a nexus of a lot of bad things happening at

38
00:04:09,888 --> 00:04:13,774
once. The credentials were exposed for over a year. We're not sure

39
00:04:13,812 --> 00:04:17,098
at this point in time, as of this recording, exactly the ramifications

40
00:04:17,114 --> 00:04:20,510
of this and exactly how many customers were affected.

41
00:04:21,010 --> 00:04:23,790
You can have the best security set up in the world and the best security

42
00:04:23,860 --> 00:04:27,554
teams, but if you just leave those keys out there, it's pretty easy

43
00:04:27,592 --> 00:04:30,786
to get in. And we probably wouldn't do

44
00:04:30,808 --> 00:04:34,466
this. That's a little bit of a silly example. Whatever's behind that door can't be

45
00:04:34,488 --> 00:04:38,838
that valuable. Like maybe staplers or binders or, I don't know,

46
00:04:39,004 --> 00:04:42,438
but while we don't do this, developer advocate

47
00:04:42,524 --> 00:04:46,246
do this, and not for malicious reasons, we need to test to

48
00:04:46,268 --> 00:04:50,490
see if that API endpoint is up. We need to test if that credential actually

49
00:04:50,560 --> 00:04:54,486
works. So we hard code it and if we immediately

50
00:04:54,518 --> 00:04:56,460
take it back out then there's no issue.

51
00:04:57,070 --> 00:05:00,810
And the problem is though that we do leave these in

52
00:05:00,880 --> 00:05:04,750
and by the time we think to take them out, it's far too late.

53
00:05:05,090 --> 00:05:08,910
Far too late mean that we've already shared it out there on GitHub or

54
00:05:08,980 --> 00:05:12,240
GitLab or wherever our remote servers are.

55
00:05:13,030 --> 00:05:16,530
In 2021 we found at GitGuardian we found over 6

56
00:05:16,600 --> 00:05:20,062
million keys or credentials

57
00:05:20,206 --> 00:05:24,034
secrets just laying in public repos. This is a

58
00:05:24,072 --> 00:05:27,346
huge increase over the previous year. We put this

59
00:05:27,368 --> 00:05:29,846
out in a state of secrets for our report. You can read this if you

60
00:05:29,868 --> 00:05:33,606
want. The disturbing thing here is that

61
00:05:33,708 --> 00:05:36,694
this is actually increased year over year.

62
00:05:36,892 --> 00:05:40,454
We're finding about three out of every thousand commits contain something

63
00:05:40,572 --> 00:05:43,738
that shouldn't probably be in there, some kind of secret. And this is just in

64
00:05:43,744 --> 00:05:47,418
the public. So who's responsible for all this? Well,

65
00:05:47,504 --> 00:05:51,590
ultimately everyone is. If you touch the software development lifecycle,

66
00:05:51,750 --> 00:05:55,246
you are responsible for making sure your secrets don't end

67
00:05:55,268 --> 00:05:58,960
up in the wrong place. And if it's just the security team,

68
00:05:59,570 --> 00:06:02,714
we're never going to win this fight, even in the best organizations.

69
00:06:02,762 --> 00:06:06,226
Alex ray from Hacker one tells us it's 100 to one.

70
00:06:06,328 --> 00:06:10,034
The security team is outnumbered by developers. So we

71
00:06:10,072 --> 00:06:13,474
really need to shift it to the developers who are at the forefront of this

72
00:06:13,512 --> 00:06:17,346
battle. But do it with a tool they already have access to that they

73
00:06:17,368 --> 00:06:20,222
already love. Developers love and hate git,

74
00:06:20,286 --> 00:06:23,766
but we use it day in and day out. I say almost all developers there

75
00:06:23,788 --> 00:06:27,526
with the asterisks, last time I checked it was like 93.6% of all

76
00:06:27,548 --> 00:06:31,080
developers touch git on a daily basis. And git's awesome.

77
00:06:31,530 --> 00:06:34,282
But it doesn't make your code more or less secure in and of itself.

78
00:06:34,336 --> 00:06:37,770
It's the stupid content tracker. It does what it does exceptionally well.

79
00:06:37,920 --> 00:06:41,590
It does give you a way to add some security.

80
00:06:41,760 --> 00:06:45,466
Git ignore please use git ignore files. Tell Git

81
00:06:45,498 --> 00:06:48,378
to ignore certain types of files or certain paths,

82
00:06:48,554 --> 00:06:51,726
and then we can start storing our access keys in

83
00:06:51,748 --> 00:06:55,230
places like secrets JSon or AWS file

84
00:06:55,310 --> 00:06:58,962
directories, places that we're never going to check into

85
00:06:59,096 --> 00:07:02,290
our source control. And if we

86
00:07:02,360 --> 00:07:05,758
combine that with things like Hashicorp vault or Azure key vaults,

87
00:07:05,774 --> 00:07:08,740
I'm just throwing out two names, not trying to plug either.

88
00:07:09,110 --> 00:07:12,646
But then we don't need to hard code secrets anymore and we can prevent them

89
00:07:12,668 --> 00:07:15,814
from getting into our source control in a perfect world.

90
00:07:15,852 --> 00:07:19,286
That's the end of the talk and we go about our day. But we

91
00:07:19,308 --> 00:07:22,554
solve this problem of hard coding secrets and we solve the data that

92
00:07:22,592 --> 00:07:25,340
says this is a growing problem, not a shrinking one.

93
00:07:26,830 --> 00:07:30,406
So I personally don't believe that. The issue is that we've tested

94
00:07:30,438 --> 00:07:34,686
a secret. We have to test secrets. We just have to. Sometimes the

95
00:07:34,708 --> 00:07:38,014
problem is that we forget to take them back out and then we push those

96
00:07:38,052 --> 00:07:40,400
secrets somewhere and then we have a bad time.

97
00:07:41,170 --> 00:07:45,330
In theory you clean remove a secret from a pushed

98
00:07:45,670 --> 00:07:48,820
commit, but it's not easy,

99
00:07:50,150 --> 00:07:54,174
can be downright painful in a number of ways. One, just physically figuring

100
00:07:54,222 --> 00:07:57,806
out where all that secret went to what all branches,

101
00:07:57,918 --> 00:08:01,078
but also you got to talk to your team now. You're going to need to

102
00:08:01,084 --> 00:08:04,694
rotate keys somewhere. Someone's going to have to stop what they're doing and

103
00:08:04,732 --> 00:08:07,910
go deal with this now. And no one's going to look good in that process.

104
00:08:08,060 --> 00:08:10,998
Again, painful. What we need is a robot.

105
00:08:11,094 --> 00:08:14,294
A robot that reliably, every time we try to commit a secret,

106
00:08:14,342 --> 00:08:17,706
just stops us. And Git gives us a way to build

107
00:08:17,728 --> 00:08:20,758
that robot. And again, developers love git.

108
00:08:20,854 --> 00:08:24,330
So here we go. Git hooks

109
00:08:24,930 --> 00:08:28,398
is an automation platform built into Git that I think is

110
00:08:28,564 --> 00:08:32,160
wildly underused out there. We can use it for so many awesome things,

111
00:08:32,530 --> 00:08:36,314
but at the heart of it git hooks is this.

112
00:08:36,452 --> 00:08:39,682
You can build your own contraptions that when git does a thing, it will fire

113
00:08:39,736 --> 00:08:42,820
off one of your scripts. That's pretty much it.

114
00:08:43,190 --> 00:08:46,418
There are 17 hooks available. Go over to githooks.com,

115
00:08:46,504 --> 00:08:50,214
bookmark that. It's a great resource for building all sorts of cool

116
00:08:50,252 --> 00:08:53,302
things with GitHub. But the ones we're really concerned about

117
00:08:53,356 --> 00:08:56,822
are stopping us from making the commit in the first place. Those are those

118
00:08:56,876 --> 00:09:01,020
pre commit hooks. And additionally, from the

119
00:09:01,630 --> 00:09:04,966
server perspective, from our git remote perspective,

120
00:09:05,078 --> 00:09:09,050
whoever owns that can stop those commits from even getting there in the first place.

121
00:09:09,200 --> 00:09:12,842
Because we can start using pre receive hooks to say, well,

122
00:09:12,896 --> 00:09:16,734
if a secret is hard coded in here, don't even let it on board,

123
00:09:16,852 --> 00:09:18,720
let's just stop it where it is.

124
00:09:19,730 --> 00:09:23,402
And git comes with examples for all this. Unfortunately,

125
00:09:23,466 --> 00:09:27,582
they're really kind of hard to parse if you're not familiar with git

126
00:09:27,646 --> 00:09:30,846
very deeply like revparse, and you don't

127
00:09:30,878 --> 00:09:35,106
have the exact use case that Linus, Torval or gitster do to

128
00:09:35,208 --> 00:09:38,194
manage a large project. Fortunately, though,

129
00:09:38,312 --> 00:09:41,206
scripts are just scripts you can make it do anything. You can write it,

130
00:09:41,228 --> 00:09:44,406
whatever language you prefer, whatever scripting language you can

131
00:09:44,508 --> 00:09:48,646
access in your environments. This is actually something I do in my

132
00:09:48,748 --> 00:09:52,246
personal projects. I make my git logs

133
00:09:52,278 --> 00:09:55,706
tell me jokes. So when I do git commits, they spit out

134
00:09:55,728 --> 00:09:59,402
a dad joke at me. Props to Ed Thompson for building

135
00:09:59,456 --> 00:10:03,218
this into git dad and giving the code open source.

136
00:10:03,414 --> 00:10:06,830
So an ideal solution would look like this. If we're building that robot,

137
00:10:07,410 --> 00:10:10,494
every time I go to make a commit, every time I

138
00:10:10,532 --> 00:10:13,934
go to push that commit around, we should have

139
00:10:13,972 --> 00:10:17,038
something check to see if a credential is in there, if a secret is in

140
00:10:17,044 --> 00:10:20,546
there. If it is, throw an error and don't let me make that

141
00:10:20,568 --> 00:10:23,490
commit. You can build this yourself.

142
00:10:23,640 --> 00:10:27,218
Nothing to stop you. If you got enough time and patience. Git grep is

143
00:10:27,224 --> 00:10:30,082
a great way to go about it. Grep is awesome. You got to know Regex,

144
00:10:30,146 --> 00:10:32,838
but you can make it look for any kind of pattern here. This is what

145
00:10:32,844 --> 00:10:36,370
an AWS access key pattern

146
00:10:36,450 --> 00:10:40,310
looks like. It's 20 characters long and it contains all caps and nums.

147
00:10:41,450 --> 00:10:45,034
You can just make password equals is a pattern you're looking

148
00:10:45,072 --> 00:10:48,666
for. And yeah, sure enough, it will catch those things. The problem though is

149
00:10:48,688 --> 00:10:52,062
if you build it, then you have to build it and

150
00:10:52,116 --> 00:10:56,078
maintain it and deal with false positives and

151
00:10:56,244 --> 00:10:59,978
know what allowed and what's not allowed and start dealing

152
00:10:59,994 --> 00:11:03,306
with all of the fine tuning

153
00:11:03,338 --> 00:11:07,154
of it. And then to spread this to your team, to evangelize your team,

154
00:11:07,272 --> 00:11:10,786
good luck. But hey, you're not the only

155
00:11:10,808 --> 00:11:14,398
person facing this. There's a lot of other people have already tried building solutions

156
00:11:14,414 --> 00:11:17,438
for this and I'm going to talk about a few of them today. Open source

157
00:11:17,534 --> 00:11:20,786
to the rescue. Because open source is awesome and everybody should be using open source

158
00:11:20,818 --> 00:11:24,630
tools wherever they can. I firmly believe so.

159
00:11:24,700 --> 00:11:28,502
There's a lot of them. If you just Google solutions for this, for stop

160
00:11:28,556 --> 00:11:32,578
committing hard coded secrets, prevent hard coded secrets, open source,

161
00:11:32,674 --> 00:11:34,954
you're going to find a lot of solutions. I'm going to talk about the big

162
00:11:34,992 --> 00:11:38,394
three that I think are the big three from my point of view

163
00:11:38,432 --> 00:11:41,306
in the world. And there are ways to.

164
00:11:41,488 --> 00:11:45,134
Some tools have built in ways to do this through

165
00:11:45,172 --> 00:11:48,302
their proprietary offerings, but we're not going to talk about those

166
00:11:48,356 --> 00:11:51,578
today. The big three, I think are AWS labs

167
00:11:51,674 --> 00:11:55,502
has git secrets. It lets you triple check before you make the commit.

168
00:11:55,646 --> 00:11:58,770
Anything that is an AWS looking secret,

169
00:11:59,430 --> 00:12:02,574
you can extend it and people have extended it, but it does require

170
00:12:02,622 --> 00:12:06,110
a good amount of knowledge of regex and specifically the patterns

171
00:12:06,190 --> 00:12:10,466
you want to look for. So if you're using Google Cloud or Azure DevOps,

172
00:12:10,578 --> 00:12:13,958
you're going to want to know what those patterns look like pretty intimately to be

173
00:12:13,964 --> 00:12:17,986
able to adopt it to your use case. And again, people have extended

174
00:12:18,018 --> 00:12:21,846
it, so go out and definitely take a look at it if you're just

175
00:12:21,868 --> 00:12:25,978
getting started with this, but that's where it stops. It triple checks those

176
00:12:26,144 --> 00:12:29,882
before commit and then you're done. Shuffle hog is a name you probably run

177
00:12:29,936 --> 00:12:34,090
into. It is an open source framework, mostly known for their GitHub

178
00:12:34,170 --> 00:12:38,666
action integration, but they do have a pre commit hook integration,

179
00:12:38,778 --> 00:12:42,206
but it does require you to use the pre commit framework, which is

180
00:12:42,228 --> 00:12:45,794
awesome. It's an awesome framework, it's open source, it's cool, but it is

181
00:12:45,832 --> 00:12:49,810
required. And also just some people

182
00:12:49,880 --> 00:12:52,942
report that it's high false positives. Your mileage may vary.

183
00:12:53,006 --> 00:12:56,034
I'm not here to give any judgment about it, just reporting what I have found

184
00:12:56,072 --> 00:12:59,400
from my research. I've never actually used truffle hog in production myself.

185
00:12:59,930 --> 00:13:03,478
Gitguardian makes GG shield, which can be used

186
00:13:03,564 --> 00:13:07,062
at the pre commit level, the pre push level,

187
00:13:07,196 --> 00:13:10,826
and the pre receive hook level to make

188
00:13:10,848 --> 00:13:14,554
sure you're not passing around those commits if they do get

189
00:13:14,592 --> 00:13:18,218
hard coded in. Now, it does require a GitGuardian account,

190
00:13:18,304 --> 00:13:21,802
which is a platform you can use for free.

191
00:13:21,856 --> 00:13:25,322
For personal and open source use. There is an API limit to that,

192
00:13:25,376 --> 00:13:29,146
a thousand calls a month. So if you're doing a lot of commits, this isn't

193
00:13:29,178 --> 00:13:32,526
free, but for most people it's going to probably be free, especially if

194
00:13:32,548 --> 00:13:36,002
you're working on open source projects. And I like it,

195
00:13:36,056 --> 00:13:39,826
partially because it checks for 350 known patterns and

196
00:13:39,848 --> 00:13:43,794
you can extend it. But again, extending it means regex fun.

197
00:13:43,992 --> 00:13:46,498
So what does this look like in action? I'm not going to go through all

198
00:13:46,504 --> 00:13:50,850
of them. They all pretty much look the same at the end. After installing

199
00:13:50,930 --> 00:13:53,894
and configuring, all of them are straightforward to do.

200
00:13:53,932 --> 00:13:57,286
I must say, pre commit hook setup is the only one that threw a

201
00:13:57,308 --> 00:14:01,526
little bit tricky at me. Other than that they're all pretty straightforward

202
00:14:01,718 --> 00:14:04,860
to get going, but they all do the same thing.

203
00:14:06,270 --> 00:14:09,654
You hard code a secret somewhere, in this case a Yaml file,

204
00:14:09,782 --> 00:14:13,294
and I go to commit it. And in this case Gitguardian is the one

205
00:14:13,332 --> 00:14:16,714
saying, hey, we found a secret here, and just stops.

206
00:14:16,762 --> 00:14:20,366
It fails. And that's the

207
00:14:20,388 --> 00:14:23,614
mission. That's what hooks is doing for me

208
00:14:23,652 --> 00:14:27,550
every time. I personally don't worry about hard coding secrets anymore,

209
00:14:27,630 --> 00:14:30,514
because if I accidentally do, I'm not even going to commit it in the first

210
00:14:30,552 --> 00:14:34,146
place. So in conclusion, don't hard code your

211
00:14:34,168 --> 00:14:37,738
secrets. If you do end up hardcoding

212
00:14:37,774 --> 00:14:41,366
secrets, don't commit those secrets. And the best way

213
00:14:41,388 --> 00:14:45,618
to do that is just use some automation and some off the shelf tools.

214
00:14:45,794 --> 00:14:49,062
I love open source, and you should too.

215
00:14:49,196 --> 00:14:53,186
So I've been Dwayne, I'm a developer advocate,

216
00:14:53,218 --> 00:14:57,318
have been since 2016. Hit me up on Twitter for any of

217
00:14:57,484 --> 00:15:02,286
the questions you have because, well, this is pre recorded and yeah,

218
00:15:02,308 --> 00:15:04,542
you can reach me out there. And thanks again for coming to my talk.

219
00:15:04,596 --> 00:15:08,350
Stop committing your secrets. Get hooks to the rescue here at comp 42

220
00:15:08,420 --> 00:15:09,900
devsecops 2022.

