1
00:00:27,730 --> 00:00:31,954
Hi everybody, thank you for joining me today. Today we're going to talk about CSP.

2
00:00:32,082 --> 00:00:35,334
How is it broken? What can we do to fix it?

3
00:00:35,372 --> 00:00:38,582
Or at least just demystify some of it? My name is

4
00:00:38,636 --> 00:00:42,566
Amir Shaked. I work at perimeterx. I did

5
00:00:42,588 --> 00:00:46,182
the R D there, software engineer for many years,

6
00:00:46,236 --> 00:00:50,382
R D leader for a few as well and building

7
00:00:50,436 --> 00:00:54,506
things with good people. And this talk we're going to talk a bit about breaking

8
00:00:54,538 --> 00:00:58,270
and building things and how they come together when we're talking, but CSP.

9
00:00:58,930 --> 00:01:02,558
So let's begin with these story. And I love to

10
00:01:02,564 --> 00:01:05,982
begin with stories. The story here is I wanted to enable

11
00:01:06,046 --> 00:01:09,074
CSP on my website. I read and

12
00:01:09,112 --> 00:01:12,270
understood the full meaning of all the directives that the implementations,

13
00:01:12,350 --> 00:01:15,922
the CSP two, CSP three, all the variances

14
00:01:15,986 --> 00:01:19,686
in the standard. I added the header to the website with

15
00:01:19,708 --> 00:01:23,798
a report only option and started

16
00:01:23,884 --> 00:01:28,018
getting traffic into some lambda

17
00:01:28,034 --> 00:01:31,850
functions that consumed all the reports.

18
00:01:32,190 --> 00:01:35,594
About a day later I went over the reports. It was very

19
00:01:35,632 --> 00:01:39,306
clear which report is what. I marked all the resources that are

20
00:01:39,488 --> 00:01:42,640
related to our website and updated these policy.

21
00:01:43,090 --> 00:01:47,034
I switched the policy to block policy which basically means no reporter

22
00:01:47,082 --> 00:01:50,366
what's blocking policy and I

23
00:01:50,388 --> 00:01:54,058
had zero issues. The website worked flawlessly

24
00:01:54,154 --> 00:01:57,742
and without any problem or anything

25
00:01:57,876 --> 00:02:01,406
crashing, no support call to say some part of the website stopped

26
00:02:01,438 --> 00:02:05,022
working somehow and I think nobody ever

27
00:02:05,096 --> 00:02:09,542
said that story when it comes to CSP. I've talked to many people

28
00:02:09,596 --> 00:02:14,054
in the industry who tried to use this really

29
00:02:14,092 --> 00:02:17,754
positive standard with good intentions, but everybody had

30
00:02:17,792 --> 00:02:21,786
some kind of issue along the way trying to improvements it in

31
00:02:21,808 --> 00:02:25,338
their website. More common case

32
00:02:25,504 --> 00:02:29,206
that we have seen is on several

33
00:02:29,238 --> 00:02:32,526
websites is a case where they're getting some call from

34
00:02:32,548 --> 00:02:36,062
their credit card company or another vendor. They're working on mostly the credit

35
00:02:36,116 --> 00:02:40,090
cards company telling them that there was a breach.

36
00:02:40,250 --> 00:02:43,754
Credit cards were stolen from their websites and when they're

37
00:02:43,802 --> 00:02:47,886
doing the deep dive, usually with some consultant

38
00:02:47,918 --> 00:02:51,842
when doing the deep dive trying to identify where and what and

39
00:02:51,896 --> 00:02:55,298
how the breach was made, they end up finding that actually there

40
00:02:55,304 --> 00:02:58,466
was no direct breach to the site, but a breach

41
00:02:58,498 --> 00:03:01,894
to a third party vendor. And that vendor was responsible and

42
00:03:01,932 --> 00:03:05,286
it was basically injecting additional code on

43
00:03:05,308 --> 00:03:09,558
the front end and sending data to some new destination.

44
00:03:09,734 --> 00:03:12,966
Now in practice, this is something that CSP

45
00:03:13,078 --> 00:03:17,018
by design should have stopped. And yet time and

46
00:03:17,024 --> 00:03:20,626
time again we see these cases happening on websites

47
00:03:20,758 --> 00:03:24,174
where even though that should have been in place and

48
00:03:24,212 --> 00:03:26,798
CSP in some cases was in place,

49
00:03:26,964 --> 00:03:30,206
still the attack vector succeeded and data was

50
00:03:30,228 --> 00:03:35,550
exfilterated from the site and

51
00:03:35,700 --> 00:03:39,954
we touched on a few points on why even though you have CSP you

52
00:03:39,992 --> 00:03:44,130
don't usually have it all the way and where are gaps

53
00:03:44,630 --> 00:03:48,526
and problems with that. So just

54
00:03:48,568 --> 00:03:52,226
in these word what is CSP? And I'm going to do a short technical session

55
00:03:52,258 --> 00:03:55,686
here on what is CSP and how it's actually being used and

56
00:03:55,708 --> 00:03:58,938
works. So CSP is a policy. First of

57
00:03:58,944 --> 00:04:02,442
all that's important to remember. It's a policy which

58
00:04:02,496 --> 00:04:05,180
adds another layer of security to the site,

59
00:04:06,510 --> 00:04:09,894
mostly to protect from XSS and data

60
00:04:09,952 --> 00:04:14,142
injection and data existration to different

61
00:04:14,196 --> 00:04:18,960
domains. First introduced by the way all the way back in 2004.

62
00:04:19,570 --> 00:04:23,242
But since 2013 went these

63
00:04:23,316 --> 00:04:28,098
multiple iterations of the common standard

64
00:04:28,184 --> 00:04:32,114
that we have today that we see today on many websites, with the

65
00:04:32,152 --> 00:04:35,620
final version of version three

66
00:04:36,250 --> 00:04:40,070
pretty close to being finished. So it's a very late draft

67
00:04:40,890 --> 00:04:44,850
and version two is the one most commonly used today in websites

68
00:04:44,930 --> 00:04:47,960
with CSP. So how does it work?

69
00:04:48,330 --> 00:04:52,122
Basically you have an HTTP header that you add on the

70
00:04:52,176 --> 00:04:55,626
back end and you have two of those. And we're going to touch on

71
00:04:55,648 --> 00:05:00,310
the difference. The header says that you have in

72
00:05:00,320 --> 00:05:04,062
this example what we have here. So we have default source saying self,

73
00:05:04,116 --> 00:05:08,410
default source, self mean by default sources

74
00:05:08,490 --> 00:05:12,602
of different elements can come from the domain itself, the parent

75
00:05:12,676 --> 00:05:16,722
domain that serve the website scripts can come

76
00:05:16,776 --> 00:05:21,010
from two destinations, self and these cDNJs net

77
00:05:21,080 --> 00:05:24,306
another network. And if these is any kind

78
00:05:24,328 --> 00:05:28,086
of validation, the report URL where data should

79
00:05:28,108 --> 00:05:31,106
go is the top level domain CSP logging.

80
00:05:31,138 --> 00:05:34,774
So that's these destination that will receive all the reports of

81
00:05:34,812 --> 00:05:38,610
all violations happening on the front end on different users

82
00:05:38,690 --> 00:05:42,298
to the CSP policy that we defined here. And then we

83
00:05:42,304 --> 00:05:46,294
have in the HTML page two elements, the image and the script.

84
00:05:46,422 --> 00:05:50,198
And both will work. The image will load because it's coming from on

85
00:05:50,224 --> 00:05:53,502
the default source and these script will load because

86
00:05:53,556 --> 00:05:57,550
it's allowed as a script source on that specific directive.

87
00:05:57,970 --> 00:06:01,278
Now if somehow in some way the

88
00:06:01,364 --> 00:06:03,550
last element here would have been added,

89
00:06:06,630 --> 00:06:10,306
the directives that we had would make that forbidden and

90
00:06:10,328 --> 00:06:14,500
we would have been receiving a report saying cdnjs.com

91
00:06:15,850 --> 00:06:18,630
try to be accessed and to load a script.

92
00:06:21,450 --> 00:06:23,640
So where is the problem with that?

93
00:06:24,570 --> 00:06:28,406
Once you go into specifications, the problem is

94
00:06:28,508 --> 00:06:31,594
they're not fully defined. And even though going

95
00:06:31,632 --> 00:06:35,402
back here to this example, most of the directives are

96
00:06:35,536 --> 00:06:39,546
very well defined in what they should do and shouldn't do. It's still an

97
00:06:39,568 --> 00:06:43,166
RFC, it's still something that every browser need to improvements on their

98
00:06:43,188 --> 00:06:46,430
own. And nothing here says what should be the report. And I'm going to

99
00:06:46,500 --> 00:06:50,446
show example of where everything has all

100
00:06:50,468 --> 00:06:53,694
the variations. So what a report holds. For example,

101
00:06:53,892 --> 00:06:57,422
every browser can decide what they want to push into reports.

102
00:06:57,486 --> 00:07:00,702
We do see an improvement there with more considerations,

103
00:07:00,766 --> 00:07:04,354
but again there are variances that we've seen with

104
00:07:04,392 --> 00:07:07,734
different browsers reporting the same violation when to

105
00:07:07,772 --> 00:07:11,382
report. Another interesting point, should I report only once?

106
00:07:11,436 --> 00:07:14,760
Should I report every time per session, per page?

107
00:07:15,370 --> 00:07:19,450
And that leads to a lot of inconsistency and affects

108
00:07:21,150 --> 00:07:24,220
how the system that you're using can learn from that.

109
00:07:26,270 --> 00:07:29,558
Implementation itself may be lacking in different browsers.

110
00:07:29,654 --> 00:07:33,118
We're going to touch on one example for a specific

111
00:07:33,204 --> 00:07:37,258
CVE, but there are a lot of other cases where the browsers don't implement

112
00:07:37,354 --> 00:07:41,374
that complicated RFC as it should and

113
00:07:41,412 --> 00:07:44,846
it's usage dependent and that can be abused. And we're going to do a deep

114
00:07:44,878 --> 00:07:48,530
dive to an example of why by design

115
00:07:48,600 --> 00:07:51,986
there is a flaw in the concept of policy and

116
00:07:52,008 --> 00:07:55,462
a whitelist. So let's start with numbers.

117
00:07:55,516 --> 00:07:58,440
I think numbers talk better than anything else.

118
00:07:59,210 --> 00:08:03,080
It's a standard that was been existing since 2012,

119
00:08:03,930 --> 00:08:07,674
how much is it used, how often it is

120
00:08:07,712 --> 00:08:11,580
and how everybody are using it. So this data is based on

121
00:08:12,270 --> 00:08:15,834
information that I extracted from

122
00:08:15,872 --> 00:08:19,660
HTTP archives going over their scans on the past

123
00:08:20,190 --> 00:08:24,286
two years. Excellent data source if you want to research how

124
00:08:24,308 --> 00:08:27,866
the web changes and behaves over time, by the way. So an excellent data source

125
00:08:27,898 --> 00:08:32,122
to use. And what we have here is scan domains

126
00:08:32,186 --> 00:08:36,010
over time and show it with the mouse.

127
00:08:36,090 --> 00:08:39,534
So we have can domains over time. So that gives us the reference

128
00:08:39,582 --> 00:08:43,698
point of how many domains are being tested. And what we can see is

129
00:08:43,784 --> 00:08:47,414
that content security policy is actually

130
00:08:47,612 --> 00:08:51,874
being uses more and more over time, which signifies

131
00:08:51,922 --> 00:08:55,874
a positive trend until you're starting to dive into the details

132
00:08:55,922 --> 00:08:59,594
and you see what's the difference. So we

133
00:08:59,632 --> 00:09:02,890
see a great adoption of other security headers.

134
00:09:03,550 --> 00:09:07,050
You can see the list here on the left,

135
00:09:07,120 --> 00:09:10,338
on the right, sorry, which different security headers

136
00:09:10,534 --> 00:09:13,310
were found on those scans.

137
00:09:13,890 --> 00:09:19,166
And we

138
00:09:19,188 --> 00:09:22,666
see that CSP is behind adopted on the rise

139
00:09:22,698 --> 00:09:25,650
as more or lets about 10% of the websites.

140
00:09:26,870 --> 00:09:30,414
So it looks like a positive trend. But when you would deep

141
00:09:30,462 --> 00:09:34,190
dive to see what's actually being used along these different directives

142
00:09:34,270 --> 00:09:37,826
for CSP, these are the numbers that pop up when you're

143
00:09:37,938 --> 00:09:41,254
inspecting. So we had 690,000 domains that

144
00:09:41,292 --> 00:09:44,262
actually used CSP at all,

145
00:09:44,396 --> 00:09:46,950
out of 4 million websites,

146
00:09:47,370 --> 00:09:50,710
sorry, 6 million websites that were scammed.

147
00:09:51,310 --> 00:09:54,890
And the first, these are actually

148
00:09:55,040 --> 00:09:59,174
just a replacement of obsolete security headers

149
00:09:59,222 --> 00:10:04,666
that were common before. So the frame ancestors simply

150
00:10:04,698 --> 00:10:08,880
says, do you allow the browser to load your website

151
00:10:09,330 --> 00:10:12,998
in a frame or not. That's one upgrade insecure.

152
00:10:13,114 --> 00:10:16,782
Again, replacement says that for previous

153
00:10:16,846 --> 00:10:20,146
security header, mentioning that the

154
00:10:20,168 --> 00:10:24,002
traffic should only be HTTPs. So don't allow HTTP traffic to the parent

155
00:10:24,056 --> 00:10:27,398
domain only HTTPs traffic and block mixed content.

156
00:10:27,484 --> 00:10:31,062
So again an additional layer on that only the follow

157
00:10:31,116 --> 00:10:34,662
up if you're going to default source where it's actually getting

158
00:10:34,716 --> 00:10:39,982
interesting, actually use more complicated

159
00:10:40,066 --> 00:10:43,738
directives and trying to actually use the policy of where data

160
00:10:43,824 --> 00:10:47,658
should be loaded from or sent to. And that's only 17%

161
00:10:47,824 --> 00:10:50,060
out of the 620.

162
00:10:50,850 --> 00:10:54,446
That means a much lower number actually

163
00:10:54,548 --> 00:10:58,158
implementing CSP and trying to get all the value

164
00:10:58,244 --> 00:11:01,662
out of these directives. And that's a very

165
00:11:01,716 --> 00:11:05,346
sad data point. And I think a really big part

166
00:11:05,368 --> 00:11:09,506
of it is some of the reasons that we're going to talk on later on

167
00:11:09,608 --> 00:11:13,614
on the difference between the concept,

168
00:11:13,662 --> 00:11:16,966
which is great, and the difficulties in implementing it

169
00:11:17,068 --> 00:11:21,240
which makes it very hard to be uses out there.

170
00:11:22,330 --> 00:11:34,704
So and

171
00:11:34,762 --> 00:11:38,296
I'll give one example, diving into the directives themselves that we

172
00:11:38,318 --> 00:11:41,924
see being used in the wild here is one example. You see the default

173
00:11:41,972 --> 00:11:45,516
source and there is a very big difference between the

174
00:11:45,538 --> 00:11:49,388
two options here. What you see on the top one is on

175
00:11:49,474 --> 00:11:53,548
this one is on their website, allowing on

176
00:11:53,554 --> 00:11:56,712
these default source any unsafe eval,

177
00:11:56,776 --> 00:12:00,232
meaning any script can use eval and basically

178
00:12:00,306 --> 00:12:03,616
run any code you want and any inline code in the

179
00:12:03,638 --> 00:12:07,168
page. That basically means that between these two options anything can run on

180
00:12:07,174 --> 00:12:10,580
the page. You didn't really enable any additional security

181
00:12:10,650 --> 00:12:13,252
layer, you're allowing everything to run on the page.

182
00:12:13,386 --> 00:12:16,804
That's the worst kind. On the far left

183
00:12:16,922 --> 00:12:21,440
of the security spectrum you have actually nonsense

184
00:12:21,520 --> 00:12:25,176
of the hash of the script itself that should be allowed to

185
00:12:25,198 --> 00:12:28,584
run and that's great if you're using

186
00:12:28,622 --> 00:12:32,568
that feature. That means that only specific scripts can run

187
00:12:32,654 --> 00:12:36,188
and inline scripts can run and not everything. So being a

188
00:12:36,194 --> 00:12:40,204
very strict great option, but very few websites actually

189
00:12:40,242 --> 00:12:43,836
use that one. Besides that

190
00:12:43,938 --> 00:12:47,900
we've seen again deep diving into the data from actual websites,

191
00:12:47,980 --> 00:12:51,344
really poor usage and I was looking for common

192
00:12:51,462 --> 00:12:54,688
directives being used and there should be around 30

193
00:12:54,774 --> 00:12:58,384
and I found over 700 with some really

194
00:12:58,582 --> 00:13:02,196
mind blowing examples here. I don't understand this, go for it. But then all

195
00:13:02,218 --> 00:13:05,732
kinds of just bad implementations. I don't know if it's in

196
00:13:05,786 --> 00:13:09,508
policy or the web servers, but it's really sad if somebody

197
00:13:09,594 --> 00:13:13,296
actually tried to use the policy and then broke

198
00:13:13,328 --> 00:13:16,090
it with invalid information in the policy itself.

199
00:13:17,180 --> 00:13:20,952
If you're trying to use it, please I beg you, uses something like

200
00:13:21,006 --> 00:13:24,328
this link here, the CSP evaluator by Google, which is

201
00:13:24,414 --> 00:13:28,600
really good, and save yourself the trouble of having

202
00:13:28,750 --> 00:13:32,716
worked so hard to create a policy and then having it be

203
00:13:32,738 --> 00:13:37,020
unavailable to websites because it has bugs in these configuration.

204
00:13:39,120 --> 00:13:42,416
Okay, so we talked a bit about the policy. Let's talk about the

205
00:13:42,438 --> 00:13:46,288
reports. I have a policy in place. I want to dissect the reports and understand

206
00:13:46,374 --> 00:13:50,550
them and the data isn't normalized at all.

207
00:13:51,480 --> 00:13:54,772
These two links here are actually fascinating when you

208
00:13:54,906 --> 00:13:58,356
inviting you to go and browse into them and you will see different types of

209
00:13:58,378 --> 00:14:02,532
examples of reports coming in from

210
00:14:02,666 --> 00:14:06,904
websites. And these reason is you will get violations from

211
00:14:06,942 --> 00:14:10,424
a lot of stuff which are unrelated to the website. And that can be very

212
00:14:10,462 --> 00:14:14,456
causing when you're trying to understand you see some two

213
00:14:14,478 --> 00:14:18,044
or three reports of some domain and you can't find

214
00:14:18,082 --> 00:14:21,404
how it's related to the website itself. And that could very well

215
00:14:21,442 --> 00:14:24,552
be coming from somewhere else, say extensions, ads,

216
00:14:24,616 --> 00:14:27,996
web proxies, both injecting code into the page,

217
00:14:28,178 --> 00:14:31,712
completely irrelevant to the policy and the website you actually

218
00:14:31,766 --> 00:14:35,372
build. So you need to find a way to reduce

219
00:14:35,436 --> 00:14:38,652
all that noise and focus only on the interesting reports.

220
00:14:38,796 --> 00:14:42,050
One way of doing that is by numbers.

221
00:14:42,580 --> 00:14:46,720
If the number of reports per incident

222
00:14:46,800 --> 00:14:50,852
per domain, for examples, is low or too low,

223
00:14:50,986 --> 00:14:54,456
it might be a good indication that it's noise and you can ignore that and

224
00:14:54,478 --> 00:14:57,364
focus only on the high number of reports.

225
00:14:57,492 --> 00:15:00,170
That's one example that you can use.

226
00:15:02,220 --> 00:15:05,480
But again, very interesting examples and I invite you to

227
00:15:05,550 --> 00:15:08,956
go through them. I didn't want to do that, waste our session for

228
00:15:08,978 --> 00:15:11,980
that. And these last is browser misalignment.

229
00:15:12,480 --> 00:15:16,236
That's actually a very big issue and you should be aware of that.

230
00:15:16,338 --> 00:15:19,520
Different browsers do different things. This is

231
00:15:19,590 --> 00:15:22,896
the latest information that I have might have changed a

232
00:15:22,918 --> 00:15:26,432
long time because the browsers are always updating the way they

233
00:15:26,486 --> 00:15:29,904
report. But from our last

234
00:15:29,942 --> 00:15:33,504
these, we saw that these kind of differences, I'll highlight

235
00:15:33,552 --> 00:15:36,804
only key ones for chrome. If you have a repetitive call

236
00:15:36,842 --> 00:15:39,430
to a blocked resource, you only get one report.

237
00:15:40,280 --> 00:15:43,850
For Firefox you will get repeating reports. So that's different.

238
00:15:45,580 --> 00:15:49,604
With Safari, you might get only the truncated

239
00:15:49,732 --> 00:15:53,368
top level domain and not the full blocked uri, which you might

240
00:15:53,374 --> 00:15:56,844
have wanted the full uri to see more information. So these

241
00:15:56,882 --> 00:16:00,508
kinds of differences make it very different to analyze the reports that

242
00:16:00,514 --> 00:16:04,588
you're getting between browsers. And like we saw here, between other

243
00:16:04,674 --> 00:16:08,876
things that might create noise leading

244
00:16:08,908 --> 00:16:12,396
to a problem of essentially log spamming.

245
00:16:12,508 --> 00:16:15,856
There is no validation, there is no validation on who is sending the

246
00:16:15,878 --> 00:16:19,508
data. And anybody can push information

247
00:16:19,594 --> 00:16:23,040
into your system on supposed violations.

248
00:16:23,120 --> 00:16:27,140
It could be even fake reports hitting directly

249
00:16:27,800 --> 00:16:32,756
your API and reporting fake CSP

250
00:16:32,788 --> 00:16:36,104
violations only to try and game your

251
00:16:36,142 --> 00:16:39,924
system. If you have say an automatic system that automatically

252
00:16:39,972 --> 00:16:44,056
whitelists domains per number of occurrences, somebody can

253
00:16:44,078 --> 00:16:48,040
try and use that and create some adversarial

254
00:16:48,120 --> 00:16:51,736
machine learning concept of tricking the system to whitelist

255
00:16:51,768 --> 00:16:55,596
a domain. Haven't seen that yet, but definitely a

256
00:16:55,618 --> 00:16:59,680
concept that is out there being discussed.

257
00:17:01,140 --> 00:17:04,496
Okay, another thing is

258
00:17:04,598 --> 00:17:08,352
it has an implementations gaps like everything. In this case

259
00:17:08,406 --> 00:17:12,416
you can see the cves over time with different browsers,

260
00:17:12,528 --> 00:17:16,672
specifically mentioning CSP and the various implementations

261
00:17:16,736 --> 00:17:20,004
that it has in browsers. And I want to touch

262
00:17:20,042 --> 00:17:23,604
on one specific CVE that we discovered and reported

263
00:17:23,652 --> 00:17:27,050
on about a year ago, and that is

264
00:17:27,660 --> 00:17:33,160
this one. So using the above policy,

265
00:17:33,310 --> 00:17:37,624
which seems very strict, objects can be loaded from nowhere

266
00:17:37,672 --> 00:17:41,288
and child from nowhere, and scripts only from the parent domain.

267
00:17:41,384 --> 00:17:44,680
And the trick here is we define

268
00:17:45,180 --> 00:17:49,180
a URL obviously coming from an unauthorized location,

269
00:17:49,340 --> 00:17:53,120
and we're creating can element and doing child

270
00:17:53,190 --> 00:17:58,544
append with that element. And the script runs and

271
00:17:58,582 --> 00:18:01,268
it doesn't run, sorry. And these script doesn't run.

272
00:18:01,434 --> 00:18:05,652
But if you're running the same thing this

273
00:18:05,706 --> 00:18:10,096
way this call will succeed and will be evaluated

274
00:18:10,288 --> 00:18:13,544
and these code will be loaded into the page. Why is

275
00:18:13,582 --> 00:18:17,224
that? Because of the complexities of how

276
00:18:17,422 --> 00:18:20,250
the engine, browsers engine works,

277
00:18:21,260 --> 00:18:25,368
and it's quite complicated to create a very bulletproof system.

278
00:18:25,534 --> 00:18:29,064
So this is an example where even though you had a very strict

279
00:18:29,112 --> 00:18:33,212
policy, we found a way where the code

280
00:18:33,266 --> 00:18:37,550
were still running and loaded, even though it should have been running.

281
00:18:38,480 --> 00:18:42,320
That CB has been reported, has been closed. But it's just an example where

282
00:18:42,390 --> 00:18:45,536
even though you think you have a very strict policy, there might

283
00:18:45,558 --> 00:18:50,260
be a bug in the browsers itself, causing it to be irrelevant.

284
00:18:51,400 --> 00:18:55,280
An interesting point to make. Websites that loaded,

285
00:18:55,360 --> 00:18:59,616
that used these nonsense for the timeline scripts

286
00:18:59,728 --> 00:19:03,080
were not vulnerable to this bug because they were

287
00:19:03,150 --> 00:19:07,128
restricting inline scripts to come only from those

288
00:19:07,294 --> 00:19:11,544
known hashes, which is why this

289
00:19:11,582 --> 00:19:15,244
works on some websites and not on other websites that were more

290
00:19:15,282 --> 00:19:16,590
strict in their policy.

291
00:19:18,560 --> 00:19:22,012
The point to make here is that a very strict policy,

292
00:19:22,066 --> 00:19:26,140
a very good policy, might also protect you from potential bugs

293
00:19:26,580 --> 00:19:28,480
in the browser's implementation.

294
00:19:29,940 --> 00:19:32,752
So what can possibly go wrong with these policy?

295
00:19:32,886 --> 00:19:37,632
We've talked a lot about different aspects of

296
00:19:37,686 --> 00:19:40,580
CSP, the implementation, the configuration,

297
00:19:42,520 --> 00:19:46,884
but there is a core issue with the concept of a policy that

298
00:19:46,922 --> 00:19:50,036
makes it vulnerable, and I want to touch on that because it's a very interesting

299
00:19:50,138 --> 00:19:54,856
one. In this research we

300
00:19:54,878 --> 00:19:58,424
took a different approach. We said, and this is over time, let's look

301
00:19:58,462 --> 00:20:01,668
at the most common allowed targets. Whatever it's

302
00:20:01,684 --> 00:20:05,276
coming from, the script, the default, the object, whatever it

303
00:20:05,298 --> 00:20:08,716
is, these are the common allowed targets. And we

304
00:20:08,738 --> 00:20:12,540
can see here a specific domain coming repeatedly

305
00:20:12,960 --> 00:20:16,604
Google Analytics on the different variations on

306
00:20:16,642 --> 00:20:20,396
March 2000 and went it was more common. It was common on June

307
00:20:20,428 --> 00:20:23,170
2021 it was way more common.

308
00:20:24,340 --> 00:20:28,524
And we said okay, let's pick these top one the most commonly whitelisted

309
00:20:28,572 --> 00:20:31,988
domain on website and let's think

310
00:20:32,154 --> 00:20:35,764
what can we do with it and how can we game the concept and

311
00:20:35,802 --> 00:20:39,684
abuse the CSP policy simply because that domain is

312
00:20:39,722 --> 00:20:43,450
whitelisted? And it's a fascinating one

313
00:20:43,980 --> 00:20:47,496
once you have a safe list, if the safe list is

314
00:20:47,598 --> 00:20:51,048
a generic destination where everybody can create an account

315
00:20:51,134 --> 00:20:54,932
in, nothing really protects you from sending

316
00:20:54,996 --> 00:20:59,032
different kinds of information. And point to make here for Google Analytics

317
00:20:59,176 --> 00:21:02,620
is we added this code into the website

318
00:21:02,690 --> 00:21:06,444
that had CSP with a very strict policy

319
00:21:06,562 --> 00:21:09,660
but had Google Analytics allowed.

320
00:21:09,820 --> 00:21:13,584
And essentially what this means is that we

321
00:21:13,622 --> 00:21:18,050
can send information to any id that we want

322
00:21:19,300 --> 00:21:23,172
to show you here where it is. So the

323
00:21:23,226 --> 00:21:27,124
tid, we basically can define any id that we want to send

324
00:21:27,162 --> 00:21:30,564
the information to, which will allow us to see

325
00:21:30,602 --> 00:21:34,712
the information sent on our dashboard of Google Analytics and not

326
00:21:34,766 --> 00:21:38,808
another dashboard. And example here is you saw the code

327
00:21:38,974 --> 00:21:42,200
collecting the information and sending it and you can see it here,

328
00:21:42,270 --> 00:21:45,596
very simple. In the Google Analytics dashboard we have

329
00:21:45,618 --> 00:21:48,792
the hash, we can dehash it, we have the username and the password

330
00:21:48,856 --> 00:21:52,428
being sent from a website that had a

331
00:21:52,434 --> 00:21:54,940
policy but allowed Google Analytics.

332
00:21:57,360 --> 00:22:00,844
The next these was let's try to protect it,

333
00:22:00,882 --> 00:22:05,056
maybe by query programs or something else. How can we at

334
00:22:05,078 --> 00:22:08,320
least improve the system? So wouldn't this be nice if we could have said

335
00:22:08,390 --> 00:22:12,164
ok, you can connect to Google Analytics, but only to a specific

336
00:22:12,282 --> 00:22:15,876
target id, not any target id. And then you can protect the

337
00:22:15,898 --> 00:22:19,830
system but you can't. And the quote from

338
00:22:21,000 --> 00:22:24,088
the RFC basically says the exact point

339
00:22:24,174 --> 00:22:27,796
query strings have no impacts they're not being matched

340
00:22:27,828 --> 00:22:31,160
on, meaning you can't add that layer of protection.

341
00:22:32,140 --> 00:22:35,848
And we are focusing here on Google Analytics.

342
00:22:35,944 --> 00:22:39,500
But it's important to remember, if we go back

343
00:22:39,650 --> 00:22:43,612
to this list, there are other domains here which simply pick

344
00:22:43,666 --> 00:22:47,696
the top one and said can anybody create an

345
00:22:47,718 --> 00:22:51,152
account, in this case a completely free account, and use that

346
00:22:51,206 --> 00:22:55,200
to exfiltrate information simply because it was whitelisted.

347
00:22:55,620 --> 00:22:58,720
But other domains here are easily,

348
00:22:59,800 --> 00:23:03,632
easily applicable for them as well, simply because the way the concept

349
00:23:03,696 --> 00:23:06,736
works of the safe

350
00:23:06,768 --> 00:23:10,196
list, and it's not just

351
00:23:10,218 --> 00:23:13,384
a theory. We published a post about

352
00:23:13,422 --> 00:23:16,936
the method in June 17 and just

353
00:23:16,958 --> 00:23:20,104
a few days later, other security vendors found

354
00:23:20,222 --> 00:23:24,056
that specific usage being used in the

355
00:23:24,078 --> 00:23:30,204
wild by attackers to exfiltrate information and

356
00:23:30,242 --> 00:23:34,600
basically abuse that layer of protection coming from CSP.

357
00:23:34,760 --> 00:23:38,604
So think about it. We added all the layers of protection,

358
00:23:38,732 --> 00:23:42,320
we configured a very strict policy, we made sure it is working

359
00:23:42,390 --> 00:23:45,996
properly. But the basic flaw

360
00:23:46,108 --> 00:23:50,132
is that one domain that we uses is a generic domain that

361
00:23:50,186 --> 00:23:53,540
anybody can open an account on, top level domain,

362
00:23:53,880 --> 00:23:57,856
and that allows anybody to bypass all the protection

363
00:23:57,888 --> 00:24:00,180
that we're trying to add with CSP.

364
00:24:01,320 --> 00:24:04,168
Basically, it's crazy if you think about it now,

365
00:24:04,254 --> 00:24:08,344
one would claim that it

366
00:24:08,382 --> 00:24:11,530
might be valid, but where did the code come from?

367
00:24:13,100 --> 00:24:16,284
So they might be able to abuse the destination, but can

368
00:24:16,322 --> 00:24:19,308
they abuse the source of the data?

369
00:24:19,474 --> 00:24:22,844
And that's an interesting point to be

370
00:24:22,882 --> 00:24:26,476
made. A very common Tac vector would

371
00:24:26,498 --> 00:24:29,936
be to target an open destination that

372
00:24:29,958 --> 00:24:34,012
you're using and replace their code. It could be a third party vendor

373
00:24:34,076 --> 00:24:36,480
that you're using that you already whitelisted.

374
00:24:37,700 --> 00:24:41,116
It could be obsolete domains. And these are

375
00:24:41,158 --> 00:24:44,352
examples that we've seen, domains that were whitelisted.

376
00:24:44,416 --> 00:24:48,244
And because it's a whitelist policy, you don't get reports of the part

377
00:24:48,282 --> 00:24:52,112
of the policy not being used. So you had a vendor,

378
00:24:52,176 --> 00:24:56,244
maybe a startup that you tested and you worked with, you added

379
00:24:56,292 --> 00:24:59,960
them, you tried to see how it works,

380
00:25:00,030 --> 00:25:03,864
maybe even uses them for a while. They closed the domain, might even be

381
00:25:03,902 --> 00:25:07,244
up for sale, but you did not

382
00:25:07,282 --> 00:25:11,548
remove it from your policy. Because of the way these process works between

383
00:25:11,714 --> 00:25:15,420
say DevOps and front end development

384
00:25:16,240 --> 00:25:19,996
or whoever actually added it, it could be even somebody from the marketing

385
00:25:20,028 --> 00:25:23,084
team and these domain

386
00:25:23,132 --> 00:25:26,752
has been open for purchase and somebody could take over

387
00:25:26,806 --> 00:25:30,192
it. So we saw examples of domains being whitelisted

388
00:25:30,256 --> 00:25:34,964
that are no longer valid. But even

389
00:25:35,002 --> 00:25:37,812
taking can example from earlier this year,

390
00:25:37,866 --> 00:25:41,284
2021 where Cloudflare had

391
00:25:41,482 --> 00:25:45,012
a bug was discovered in the CDNJs network

392
00:25:45,156 --> 00:25:49,064
that allowed an arbitrary person to

393
00:25:49,102 --> 00:25:52,664
come in and replace code with any library that

394
00:25:52,702 --> 00:25:55,480
sits on the CDN.

395
00:25:55,840 --> 00:25:59,004
That means that these risk there

396
00:25:59,042 --> 00:26:02,796
was that anybody could create a hijack and replace the code. And if

397
00:26:02,818 --> 00:26:06,236
you're loading libraries from that specific destination, you could

398
00:26:06,258 --> 00:26:09,932
have been exposed potentially to such a risk. Now that vulnerability

399
00:26:09,996 --> 00:26:13,456
was discovered and closed. So it's not actively a

400
00:26:13,478 --> 00:26:18,144
risk, but there are other such cdns and

401
00:26:18,182 --> 00:26:21,296
vendors that everybody are using that are always at risk.

402
00:26:21,408 --> 00:26:25,188
So the point to make here is

403
00:26:25,354 --> 00:26:28,916
both destinations are at risk because of the way the policy is

404
00:26:28,938 --> 00:26:32,004
defined with the whitelist. So somebody can come in

405
00:26:32,042 --> 00:26:35,336
through an allowed service and send exerted information

406
00:26:35,438 --> 00:26:38,090
to another allowed service. In the policy.

407
00:26:40,140 --> 00:26:44,600
So where it went wrong, it went wrong because

408
00:26:44,750 --> 00:26:48,424
first of all, managing a policy, it's hard. It doesn't

409
00:26:48,472 --> 00:26:52,204
always hold in today's modern web apps with these rate

410
00:26:52,322 --> 00:26:56,044
of changes and things being added and basic things

411
00:26:56,082 --> 00:26:59,600
of abusing the safe list to inject

412
00:26:59,940 --> 00:27:03,424
code and extract information simply breaks the entire

413
00:27:03,542 --> 00:27:06,876
concept that sits behind CSP, kind of rendering

414
00:27:06,908 --> 00:27:09,924
it invalid, which is a very bad using.

415
00:27:10,122 --> 00:27:12,470
So how can we make the best of it?

416
00:27:15,080 --> 00:27:18,900
Well, in coming to look at this problem,

417
00:27:19,050 --> 00:27:22,884
one would say it's a terrible idea, don't use

418
00:27:22,922 --> 00:27:26,452
CSP, there is no value in it. So I wouldn't go that far,

419
00:27:26,586 --> 00:27:30,324
but I gave examples. But once you understand the gaps,

420
00:27:30,372 --> 00:27:34,116
the potential gaps, you understand that CSP is a good layer

421
00:27:34,148 --> 00:27:37,724
of protection that you should add what you should use it for,

422
00:27:37,922 --> 00:27:40,780
but it's not these holy grail. It doesn't stop everything.

423
00:27:40,930 --> 00:27:44,572
So you shouldn't count on it as the only thing that will protect you

424
00:27:44,626 --> 00:27:48,220
against access or data injection

425
00:27:48,300 --> 00:27:51,792
or data exfiltration from the front

426
00:27:51,846 --> 00:27:54,770
end of the page.

427
00:27:57,220 --> 00:28:00,492
So a few would say tips

428
00:28:00,556 --> 00:28:04,772
on how to make the best of it. So filtering the report is definitely something

429
00:28:04,826 --> 00:28:08,276
that you should do and not spend your was your

430
00:28:08,298 --> 00:28:11,460
time going over all the violations?

431
00:28:11,980 --> 00:28:15,204
A b testing the policy a wonderful concept.

432
00:28:15,332 --> 00:28:18,552
One way to reduce the risk of having

433
00:28:18,686 --> 00:28:22,456
obsolete domains in the policy is doing a b

434
00:28:22,478 --> 00:28:26,476
test on the report only policy.

435
00:28:26,658 --> 00:28:30,028
So you could have a very strict report

436
00:28:30,114 --> 00:28:33,544
only policy, constantly adding and removing

437
00:28:33,592 --> 00:28:36,956
domains from the list. And if you see that

438
00:28:36,978 --> 00:28:41,010
you have a domain that you don't get any reports on, that means that

439
00:28:41,380 --> 00:28:44,736
it's not being used anymore. That means you can remove it from the

440
00:28:44,758 --> 00:28:48,656
strict blocking policy, because if you're not getting reports and this allows you

441
00:28:48,678 --> 00:28:52,116
to test if a specific domain is being used or

442
00:28:52,138 --> 00:28:55,364
not without damaging the experience of the users. So that

443
00:28:55,402 --> 00:28:59,172
allows you to keep a very clean and lean domain list

444
00:28:59,306 --> 00:29:03,780
in. The policy has

445
00:29:03,930 --> 00:29:07,424
different levels of strict policy for different pages.

446
00:29:07,552 --> 00:29:11,252
A sensitive page page with purchase login,

447
00:29:11,316 --> 00:29:15,070
things like that is definitely a place to have a very strict policy

448
00:29:15,680 --> 00:29:19,864
and also reduce the number of libraries

449
00:29:19,912 --> 00:29:23,964
that you have there. The Google Analytics was an example. Let's not have

450
00:29:24,002 --> 00:29:27,424
it in a specific page that has

451
00:29:27,462 --> 00:29:31,376
a risk of

452
00:29:31,478 --> 00:29:34,956
that specific link that we discussed. And if you don't have it, then you reduce

453
00:29:34,988 --> 00:29:39,072
the risk altogether. And you can limit the problem

454
00:29:39,206 --> 00:29:42,836
for specific pages with that PiI that

455
00:29:42,858 --> 00:29:48,084
you're trying to protect, not necessarily the entire website clean

456
00:29:48,122 --> 00:29:51,204
up every once in a while. That connects very well to the third point of

457
00:29:51,242 --> 00:29:54,728
how you can actually do it. Always consider

458
00:29:54,814 --> 00:29:58,804
adding additional layers of security, such as the nons and the hashes

459
00:29:58,932 --> 00:30:02,248
for the inline scripts and the external scripts. Again,

460
00:30:02,414 --> 00:30:06,268
it could sound very difficult and a lot of work, but if you limit that

461
00:30:06,354 --> 00:30:10,156
to sensitive pages then

462
00:30:10,258 --> 00:30:14,220
the work is much smaller and it's very specific,

463
00:30:14,370 --> 00:30:18,560
so it's more manageable. I would say for a modern web app with multiple

464
00:30:19,140 --> 00:30:22,656
components going back

465
00:30:22,678 --> 00:30:26,652
to being the same thing, context aware. And the last thing I really wish

466
00:30:26,796 --> 00:30:30,096
anyone here in this forum, especially with

467
00:30:30,118 --> 00:30:33,708
this conference, the conference two focusing on JavaScript and I don't

468
00:30:33,724 --> 00:30:36,916
know how much you want you like security, but it's a big part of what

469
00:30:36,938 --> 00:30:40,356
you can do with it on the front end. So contribute to

470
00:30:40,378 --> 00:30:43,944
the CSP three with comments and I think any improvement can make

471
00:30:43,982 --> 00:30:47,748
this better. And that's

472
00:30:47,764 --> 00:30:51,496
it. A few takeaways just to consider in

473
00:30:51,518 --> 00:30:55,068
mind. So we talked but skimmers in a brief those

474
00:30:55,154 --> 00:31:00,024
using the javascript to inject content and steal

475
00:31:00,072 --> 00:31:04,056
data from the website. It's an increasing

476
00:31:04,168 --> 00:31:08,152
risk and you should take it in mind when you're adding and removing libraries

477
00:31:08,216 --> 00:31:11,704
into your website, specifically JavaScript libraries,

478
00:31:11,832 --> 00:31:16,296
that CSP is not a silver bullet and we've covered very extensively

479
00:31:16,408 --> 00:31:19,952
why and that you should have the checklist

480
00:31:20,016 --> 00:31:23,856
for your own site, what you should do and which resources are critical.

481
00:31:23,968 --> 00:31:27,204
Yes or no. These are the three things I want you to take from this

482
00:31:27,242 --> 00:31:30,532
session, and I will have be able to answer

483
00:31:30,586 --> 00:31:34,308
questions on the discord or you can reach out to

484
00:31:34,314 --> 00:31:36,470
me if you want later on.

485
00:31:37,480 --> 00:31:38,470
Thank you,

