1
00:00:00,410 --> 00:00:06,174
Jamaica. Make a real

2
00:00:06,212 --> 00:00:10,618
time feedback into the behavior of your distributed systems and observing

3
00:00:10,714 --> 00:00:14,538
changes exceptions errors in real time allows

4
00:00:14,554 --> 00:00:18,858
you to not only experiment with confidence, but respond instantly

5
00:00:18,954 --> 00:00:20,560
to get things working again.

6
00:00:24,610 --> 00:00:47,142
Close hi

7
00:00:47,196 --> 00:00:51,134
everyone, thank you so much for watching my session at

8
00:00:51,252 --> 00:00:54,990
Conf 42 Javascript 2022

9
00:00:55,060 --> 00:00:58,846
edition. Today I'm going to talk to you about how to create

10
00:00:58,948 --> 00:01:01,630
Slack apps with Boltjs.

11
00:01:02,690 --> 00:01:06,862
So my name is Alba Rivas, am a developer advocate

12
00:01:06,926 --> 00:01:10,574
at Salesforce and here you have my contact details

13
00:01:10,702 --> 00:01:14,100
in case that you want to ask me anything later.

14
00:01:15,210 --> 00:01:19,122
I need to include this slide because Salesforce

15
00:01:19,186 --> 00:01:23,126
is a publicly traded company and it just means

16
00:01:23,228 --> 00:01:27,422
that you should make purchasing decisions based on the functionality

17
00:01:27,506 --> 00:01:31,210
that is currently available. And with that,

18
00:01:31,280 --> 00:01:35,302
let's start by giving a quick introduction

19
00:01:35,366 --> 00:01:38,598
about Salesforce. What is Salesforce?

20
00:01:38,694 --> 00:01:42,062
Well, Salesforce is a company, of course,

21
00:01:42,196 --> 00:01:46,026
but the company has a CRM that helps

22
00:01:46,058 --> 00:01:49,360
you manage your relationship with your customers,

23
00:01:49,810 --> 00:01:53,138
with your partners and much more.

24
00:01:53,224 --> 00:01:57,378
Right? It includes applications for sales,

25
00:01:57,544 --> 00:02:01,186
service, marketing, commerce and more.

26
00:02:01,288 --> 00:02:04,740
And it's also an app development platform.

27
00:02:05,450 --> 00:02:09,650
So it happens that last year Salesforce

28
00:02:09,730 --> 00:02:12,950
acquired Slack. I'm sure that some

29
00:02:13,020 --> 00:02:16,742
of you are familiar with Slacks is

30
00:02:16,796 --> 00:02:20,266
an enterprise messaging platform in

31
00:02:20,288 --> 00:02:25,194
which you can strengthen your collaboration within

32
00:02:25,232 --> 00:02:28,970
your employees, with your customers, as well

33
00:02:29,120 --> 00:02:32,554
with your partners, and anyone involved

34
00:02:32,682 --> 00:02:36,570
in your ecosystem, in your company ecosystem.

35
00:02:36,730 --> 00:02:40,270
So Slack has a lot of great

36
00:02:40,420 --> 00:02:45,482
default features already implemented to strengthen

37
00:02:45,546 --> 00:02:49,614
collaboration. But third party

38
00:02:49,662 --> 00:02:54,034
vendors or solo developers can create custom

39
00:02:54,232 --> 00:02:58,178
applications over Slack to extend

40
00:02:58,274 --> 00:03:01,894
that native functionality. There are already

41
00:03:02,012 --> 00:03:05,778
great integrations out there. There are integrations

42
00:03:05,874 --> 00:03:09,750
for Google Drive, there are integrations for GitHub

43
00:03:09,910 --> 00:03:13,754
and many, many more. So today what

44
00:03:13,792 --> 00:03:17,642
I'm going to do is to explain to you how to

45
00:03:17,696 --> 00:03:21,230
create one of these integrations.

46
00:03:22,210 --> 00:03:25,326
Really. We are going to create a custom app and we

47
00:03:25,348 --> 00:03:28,240
are going to start by demoing the app.

48
00:03:29,570 --> 00:03:32,634
The app that we have created is called

49
00:03:32,772 --> 00:03:36,034
ready to fly. Ready to fly allows you

50
00:03:36,072 --> 00:03:39,390
to create, approve and reject

51
00:03:39,550 --> 00:03:43,314
travel approval requests that are stored in

52
00:03:43,352 --> 00:03:47,526
Salesforce right away from slacks on

53
00:03:47,548 --> 00:03:51,062
the screen, we can see slack on the left hand side and

54
00:03:51,116 --> 00:03:53,160
salesforce on the right hand side.

55
00:03:54,330 --> 00:03:58,298
In my case, for simplicity, I used Salesforce as

56
00:03:58,384 --> 00:04:02,790
the backend. But you can use any platform or database

57
00:04:02,870 --> 00:04:06,522
of your choice. So here on the right hand side I have some

58
00:04:06,576 --> 00:04:10,254
travel approval requests. Salesforce is where

59
00:04:10,292 --> 00:04:13,774
we store that information and we can see that those

60
00:04:13,812 --> 00:04:17,838
travel approval requests have an origin and start and

61
00:04:17,924 --> 00:04:21,614
end date. So our app is going to

62
00:04:21,652 --> 00:04:25,346
show those travel approval requests on slack. And the first thing

63
00:04:25,368 --> 00:04:29,346
that we need to do is to authorize with Salesforce because

64
00:04:29,448 --> 00:04:32,866
travel approval requests belong to a

65
00:04:32,888 --> 00:04:36,774
user. We need to map the Salesforce user to

66
00:04:36,812 --> 00:04:40,582
the slacks user somehow. This is something that

67
00:04:40,636 --> 00:04:44,466
is particular to my use case and that you can skip

68
00:04:44,578 --> 00:04:48,220
if you are working with a different platform.

69
00:04:48,670 --> 00:04:52,170
So now I've authorized correctly. And on the left

70
00:04:52,240 --> 00:04:55,862
hand side we can see the travel approval

71
00:04:55,926 --> 00:04:59,562
requests that belong to my user that were created by

72
00:04:59,616 --> 00:05:03,630
my user, Alba Rivas. So now

73
00:05:03,780 --> 00:05:07,594
what we are going to do is to take a look at our second tab

74
00:05:07,642 --> 00:05:10,670
in which we can see the travel request to review.

75
00:05:10,820 --> 00:05:14,654
It happens that I'm a manager of other users

76
00:05:14,702 --> 00:05:18,846
and I can approve or react the travel request

77
00:05:18,958 --> 00:05:22,130
that those users have created.

78
00:05:26,060 --> 00:05:29,550
Yeah, I successfully approved one of them.

79
00:05:30,240 --> 00:05:33,836
Okay, so from my travel request screen I

80
00:05:33,858 --> 00:05:36,936
can also create a new travel request.

81
00:05:37,128 --> 00:05:40,572
So what I'm going to do is to say that I want to go

82
00:05:40,626 --> 00:05:43,440
from Heiway to New Zealand.

83
00:05:44,660 --> 00:05:47,970
I am going to pick an arbitrary date,

84
00:05:48,500 --> 00:05:52,644
I'm going to indicate the estimated cost and

85
00:05:52,682 --> 00:05:56,820
I'm going to pick the approver. The approver

86
00:05:57,160 --> 00:06:00,740
is my manager and that approver list is

87
00:06:00,810 --> 00:06:04,180
being populated also from Salesforce.

88
00:06:06,700 --> 00:06:10,884
Great. So our travel request has been successfully created

89
00:06:11,012 --> 00:06:15,320
and I can take a look at it in Salesforce.

90
00:06:18,720 --> 00:06:22,968
Now let's try to start an interaction

91
00:06:23,144 --> 00:06:26,232
from Salesforce instead of from slacks.

92
00:06:26,376 --> 00:06:30,060
We can do that by changing the status

93
00:06:30,140 --> 00:06:33,212
of my newly created approval request.

94
00:06:33,356 --> 00:06:38,140
So let's imagine for a second that I am the manager

95
00:06:38,300 --> 00:06:42,304
and let's approve this request. And yeah, we receive

96
00:06:42,352 --> 00:06:46,208
a notification on Slack saying that my travel request

97
00:06:46,304 --> 00:06:50,068
has been approved. So with

98
00:06:50,234 --> 00:06:54,172
this app we've been able to reduce

99
00:06:54,256 --> 00:06:58,296
context switching and improve the productivity of

100
00:06:58,318 --> 00:07:02,360
the users that are working with approvals on

101
00:07:02,430 --> 00:07:06,072
Slack. Great. So now let's take a look at how

102
00:07:06,126 --> 00:07:08,920
Slack apps work behind the scenes.

103
00:07:09,080 --> 00:07:12,684
Normally everything starts with the interaction of a

104
00:07:12,722 --> 00:07:16,280
user. A user types something on Slack.

105
00:07:16,360 --> 00:07:20,270
A user responds to a message, something like that.

106
00:07:21,060 --> 00:07:24,400
So normally when you create Slack app,

107
00:07:24,550 --> 00:07:27,868
you define which events

108
00:07:28,044 --> 00:07:31,600
do you want slacks to publish.

109
00:07:31,940 --> 00:07:36,304
And those events are going to represent the interactions that the user

110
00:07:36,432 --> 00:07:39,812
does. So for instance, let's imagine that

111
00:07:39,866 --> 00:07:43,552
our user has written a message. That means that the Slack

112
00:07:43,616 --> 00:07:47,432
servers are going to publish the

113
00:07:47,566 --> 00:07:51,524
message. Events follow a JSON

114
00:07:51,572 --> 00:07:54,712
format and in an event you can find

115
00:07:54,766 --> 00:07:58,056
all the relevant information for that interaction.

116
00:07:58,248 --> 00:08:02,556
And the way in which you implement the

117
00:08:02,578 --> 00:08:05,944
business logic for your app is by creating

118
00:08:05,992 --> 00:08:09,240
a custom client app in which you

119
00:08:09,330 --> 00:08:12,624
listen to those events. So normally when you

120
00:08:12,662 --> 00:08:16,668
receive an event, you execute some business logic,

121
00:08:16,764 --> 00:08:20,828
right? And when our business logic finishes

122
00:08:21,004 --> 00:08:24,656
normally, you will want to go back to slack

123
00:08:24,768 --> 00:08:27,808
and inform the user somehow.

124
00:08:27,904 --> 00:08:31,984
That the business logic finished executing.

125
00:08:32,112 --> 00:08:35,172
We do that by using another app,

126
00:08:35,236 --> 00:08:38,984
which is the web API through which we

127
00:08:39,022 --> 00:08:42,904
can take action on slacks. We can post a message and

128
00:08:42,942 --> 00:08:46,500
we can do many more things. So in summary,

129
00:08:46,580 --> 00:08:50,620
there are two APIs that you need to interact with

130
00:08:50,690 --> 00:08:54,012
when you are working with Slack on your

131
00:08:54,146 --> 00:08:57,672
applications. One is the events API,

132
00:08:57,736 --> 00:09:00,864
which is subscription based and it's going to fire

133
00:09:00,982 --> 00:09:04,672
those events to which your app

134
00:09:04,726 --> 00:09:08,592
is subscribed. Some examples are the message

135
00:09:08,726 --> 00:09:12,384
event that we saw before, or the reaction added

136
00:09:12,432 --> 00:09:15,684
event, or the user join event

137
00:09:15,802 --> 00:09:19,510
that is fired when a user joins a Slack channel.

138
00:09:19,960 --> 00:09:23,776
And then we have the web API which allows

139
00:09:23,808 --> 00:09:27,672
you to take action on Slack. It allows you to post

140
00:09:27,726 --> 00:09:31,816
messaging, to add reactions to messaging, and also if

141
00:09:31,838 --> 00:09:35,688
you need to query some information you can do it through the web

142
00:09:35,774 --> 00:09:38,796
API. Here at the bottom I leave you

143
00:09:38,898 --> 00:09:43,068
the URL in which you can find the documentation for

144
00:09:43,154 --> 00:09:44,620
those APIs.

145
00:09:45,680 --> 00:09:49,492
So if you pay attention to the previous slide,

146
00:09:49,576 --> 00:09:53,616
you see that there is an icon on the

147
00:09:53,798 --> 00:09:57,500
right hand side block, the one that requests your client

148
00:09:57,580 --> 00:10:01,708
app, and that icon represents something

149
00:10:01,814 --> 00:10:05,088
called boltjs. Boltjs is a framework

150
00:10:05,184 --> 00:10:09,728
that you can use to interact with these two APIs

151
00:10:09,904 --> 00:10:13,924
more easily. Boltjs is written in

152
00:10:13,962 --> 00:10:17,640
JavaScript, Python and Java right,

153
00:10:17,790 --> 00:10:22,036
and it abstracts you from the implementation details

154
00:10:22,068 --> 00:10:25,460
of those APIs. It also follows

155
00:10:25,540 --> 00:10:29,352
a very intuitive and readable listener pattern

156
00:10:29,416 --> 00:10:33,084
that allows you to listen for those events and

157
00:10:33,122 --> 00:10:37,084
to respond to them when you need to. And also

158
00:10:37,202 --> 00:10:41,212
I have to share that it's maintained

159
00:10:41,356 --> 00:10:44,412
by the slack developer relation teams,

160
00:10:44,556 --> 00:10:47,724
which means that it always incorporates

161
00:10:47,852 --> 00:10:50,000
the latest features.

162
00:10:51,300 --> 00:10:55,652
So in our case what we did was to create

163
00:10:55,786 --> 00:10:59,024
a node JS application that uses

164
00:10:59,072 --> 00:11:02,192
the JavaScript version of the Boltjs framework,

165
00:11:02,336 --> 00:11:05,560
and I'm running that app on Heroku.

166
00:11:06,780 --> 00:11:11,716
Amazing. So something else to highlight

167
00:11:11,828 --> 00:11:15,300
is that when you interact with the web API

168
00:11:15,460 --> 00:11:19,132
normally, because you want to update this black

169
00:11:19,186 --> 00:11:22,956
application UI, to say to the customer, yeah,

170
00:11:23,058 --> 00:11:26,604
your operation was successful, or this is the

171
00:11:26,642 --> 00:11:29,890
data that you needed, something like that, right?

172
00:11:30,340 --> 00:11:33,664
You can use plain text, but also you

173
00:11:33,702 --> 00:11:37,420
can send more advanced

174
00:11:37,500 --> 00:11:41,480
surfaces and you create those surfaces

175
00:11:41,660 --> 00:11:44,820
using something called blockit.

176
00:11:45,240 --> 00:11:49,812
So blockit is a framework to create uis in

177
00:11:49,946 --> 00:11:53,524
slack and is a framework in

178
00:11:53,562 --> 00:11:57,364
which you can use JSON to define the different slacks

179
00:11:57,412 --> 00:12:00,724
that are part of a piece of UI.

180
00:12:00,852 --> 00:12:05,396
And there is something great that I love called blockkit

181
00:12:05,428 --> 00:12:10,352
builder. This is the URL app slack.com Slash blockkitbuilder

182
00:12:10,436 --> 00:12:14,492
that you can use to create your

183
00:12:14,546 --> 00:12:17,630
blockit code without having to remember

184
00:12:18,080 --> 00:12:21,916
every single block syntax.

185
00:12:22,028 --> 00:12:25,600
So for instance here on the left hand side there are

186
00:12:25,670 --> 00:12:29,424
different elements that you can drag and drop into

187
00:12:29,542 --> 00:12:33,044
this area here and the blocky code on the right

188
00:12:33,082 --> 00:12:36,804
hand side is going to be auto generated so

189
00:12:36,842 --> 00:12:41,300
you don't have to take care of that. I love these tools.

190
00:12:42,120 --> 00:12:45,704
These surfaces that you create with blockkit can

191
00:12:45,742 --> 00:12:49,652
be sent to slack through the web API

192
00:12:49,796 --> 00:12:53,384
and can be rendered on a

193
00:12:53,422 --> 00:12:57,340
mobile for instance, or in a message or also

194
00:12:57,490 --> 00:13:00,924
in your application home tab. And this is

195
00:13:00,962 --> 00:13:04,572
what we are using exactly in ready

196
00:13:04,626 --> 00:13:08,188
to fly. Fantastic. So now let's take a

197
00:13:08,194 --> 00:13:11,536
look at the code. This is the

198
00:13:11,558 --> 00:13:13,760
code for ready to fly.

199
00:13:14,980 --> 00:13:18,656
In this force app folder is where you are going to

200
00:13:18,678 --> 00:13:22,480
find all the code for the Salesforce part of the app.

201
00:13:22,550 --> 00:13:26,116
But I'm not going to focus on that. I'm going to focus

202
00:13:26,218 --> 00:13:29,412
rather on the Nodejs app,

203
00:13:29,546 --> 00:13:32,884
which is my purpose for today's talk.

204
00:13:33,002 --> 00:13:36,376
So if you want to take a look at that app code

205
00:13:36,478 --> 00:13:39,864
is on the app ready to fly folder. This is a

206
00:13:39,902 --> 00:13:43,572
regular node app in which the app js

207
00:13:43,636 --> 00:13:47,076
file is the entry point and in that app

208
00:13:47,118 --> 00:13:50,524
js file you can find the imports from

209
00:13:50,562 --> 00:13:54,412
the Slack boltjs module. Those are

210
00:13:54,466 --> 00:13:58,540
the classes and modules that we are going to use to start

211
00:13:58,610 --> 00:14:02,576
our app. And if you take a look at this

212
00:14:02,678 --> 00:14:05,776
specific file, I have a bunch of lines, but this is

213
00:14:05,798 --> 00:14:09,344
just because I'm integrating with Salesforce. If you want to

214
00:14:09,382 --> 00:14:13,416
use the bold JS framework without Salesforce,

215
00:14:13,468 --> 00:14:16,240
then you are going to have just a few lines.

216
00:14:16,400 --> 00:14:20,352
Let me highlight some of the lines that are relevant

217
00:14:20,416 --> 00:14:24,156
to you. So first of all, here we are initializing

218
00:14:24,208 --> 00:14:27,720
the app and this is something I imported from Boltjs.

219
00:14:29,420 --> 00:14:33,544
Next we are registering some listeners and

220
00:14:33,582 --> 00:14:38,288
then we start the app by running boldapp.

221
00:14:38,404 --> 00:14:41,500
Start in a port of your choice.

222
00:14:42,160 --> 00:14:45,948
So this is basically how the entry point

223
00:14:46,034 --> 00:14:49,760
for the application is written. Now you can see here

224
00:14:49,830 --> 00:14:53,600
that I have a group of folders. This is because

225
00:14:53,670 --> 00:14:57,404
I'm following a structure that was recommended

226
00:14:57,452 --> 00:15:00,800
by the slack developing relations team.

227
00:15:00,870 --> 00:15:05,060
It's an opinionated structure in which our code is divided

228
00:15:05,640 --> 00:15:09,380
into different folders depending on what

229
00:15:09,450 --> 00:15:12,548
it is used for. So for instance, we have

230
00:15:12,634 --> 00:15:16,424
the listeners folder in which I have the definition of all the

231
00:15:16,462 --> 00:15:20,296
listeners for the different interactions that the user may perform

232
00:15:20,398 --> 00:15:23,592
on the Slack app. I also have

233
00:15:23,646 --> 00:15:27,192
a user interface folder

234
00:15:27,256 --> 00:15:30,668
in which I have the definition of those

235
00:15:30,834 --> 00:15:34,024
surfaces that I'm posting to slack.

236
00:15:34,152 --> 00:15:37,852
Remember I do that thanks to blockkit. And well,

237
00:15:37,906 --> 00:15:41,248
I have other folders that are more

238
00:15:41,334 --> 00:15:44,960
specific to the interaction that we do with Salesforce.

239
00:15:45,300 --> 00:15:49,036
So let's take a look at one of the listeners. For instance,

240
00:15:49,228 --> 00:15:52,292
this app home open listener is

241
00:15:52,346 --> 00:15:56,912
the code that will execute when the user opens

242
00:15:57,056 --> 00:16:01,172
the home page of our app. Remember that

243
00:16:01,226 --> 00:16:05,064
when I'm on that home page, what happens is that my

244
00:16:05,102 --> 00:16:08,532
application brings my travel approval request

245
00:16:08,596 --> 00:16:12,136
from Salesforce, right? And this is

246
00:16:12,238 --> 00:16:16,244
exactly the logic that executes. So let's

247
00:16:16,292 --> 00:16:20,356
take a look at this callback, the code that executes

248
00:16:20,468 --> 00:16:24,412
when the user opens the homepage. And here what

249
00:16:24,466 --> 00:16:28,636
happens is that we are doing an authorization with Salesforce using

250
00:16:28,738 --> 00:16:32,016
some special code for that, and then we

251
00:16:32,038 --> 00:16:34,988
are querying for our travel request.

252
00:16:35,084 --> 00:16:38,108
As I told you, this is the way in which we query Salesforce,

253
00:16:38,124 --> 00:16:41,784
but you could do exactly the same with a postgres

254
00:16:41,932 --> 00:16:46,212
or any other kind of database. So once

255
00:16:46,266 --> 00:16:49,936
that we have queried those travel approval

256
00:16:49,968 --> 00:16:53,188
requests from Salesforce, we need to format them

257
00:16:53,274 --> 00:16:56,632
into a format that's understood by

258
00:16:56,686 --> 00:16:59,640
slacks. And that format is blockit.

259
00:17:00,460 --> 00:17:04,004
The way in which I first created that blockit

260
00:17:04,052 --> 00:17:07,180
code was mocking it through that

261
00:17:07,250 --> 00:17:11,288
blockkit builder web page that I referenced

262
00:17:11,384 --> 00:17:14,350
before. But once you do that,

263
00:17:15,440 --> 00:17:19,076
you have two options. You can hard code the blockkit

264
00:17:19,128 --> 00:17:22,864
code here directly, or if you are

265
00:17:22,982 --> 00:17:27,152
using nodejs, there is a very nice

266
00:17:27,286 --> 00:17:30,864
open source library called Slack block builder which

267
00:17:30,902 --> 00:17:34,512
is maintained by the slacks community with

268
00:17:34,566 --> 00:17:38,388
which you can create that blockkit code like in a more

269
00:17:38,554 --> 00:17:42,276
robust way using something similar

270
00:17:42,378 --> 00:17:44,740
to the Swift UI syntax.

271
00:17:45,420 --> 00:17:49,352
So once you have that created, look that here we

272
00:17:49,406 --> 00:17:53,284
convert to JSON because this is the format

273
00:17:53,332 --> 00:17:57,020
that we are really expecting to send to

274
00:17:57,090 --> 00:18:00,204
slacks. Then once we have done that, what we do

275
00:18:00,242 --> 00:18:04,460
is to use the web API to send that

276
00:18:04,610 --> 00:18:08,060
JSOn to slack and post it

277
00:18:08,210 --> 00:18:11,984
into the app homepage by using the

278
00:18:12,022 --> 00:18:15,680
web API. Remember, we use first

279
00:18:15,750 --> 00:18:19,196
the events API to listen to the app home opened

280
00:18:19,228 --> 00:18:23,328
event. And finally we respond updating

281
00:18:23,424 --> 00:18:27,220
that homepage UI by using the web API.

282
00:18:28,680 --> 00:18:32,404
And of course we only refresh the screen for

283
00:18:32,442 --> 00:18:36,360
the relevant slack user, the one that made

284
00:18:36,510 --> 00:18:39,832
the event fire. All the code for

285
00:18:39,886 --> 00:18:43,540
this app is available at this URL.

286
00:18:43,620 --> 00:18:47,512
Here on the readme you will find instructions on how to

287
00:18:47,646 --> 00:18:51,404
set it up. So I recommend you to go there, clone the

288
00:18:51,442 --> 00:18:55,516
app and try it out yourself. If you want to take a look at more

289
00:18:55,698 --> 00:18:59,112
apps, more sample code, you can go to

290
00:18:59,186 --> 00:19:02,800
this official Slack samples URL.

291
00:19:03,380 --> 00:19:07,056
And finally, I wanted to highlight that today

292
00:19:07,158 --> 00:19:11,136
everything that I shared was regarding the

293
00:19:11,238 --> 00:19:14,950
currently generally available platform

294
00:19:15,320 --> 00:19:18,784
and way of creating slack apps.

295
00:19:18,912 --> 00:19:22,964
But there is something else that Slack have been working

296
00:19:23,162 --> 00:19:27,040
on, which is like a new version, a new generation

297
00:19:27,120 --> 00:19:30,440
of the Slacks development platform. They have done that

298
00:19:30,510 --> 00:19:34,104
in collaboration with Dino. And if you want to take

299
00:19:34,142 --> 00:19:38,028
a look at that new Slack development platform

300
00:19:38,114 --> 00:19:42,088
which is currently in beta. You can do that at app

301
00:19:42,184 --> 00:19:44,430
slack.com slash future.

302
00:19:46,240 --> 00:19:50,320
Finally, I want to share some resources. I didn't build

303
00:19:50,390 --> 00:19:54,288
this app myself, I did it with some colleagues and

304
00:19:54,374 --> 00:19:59,020
they live streamed some avoiding

305
00:19:59,180 --> 00:20:02,964
of the app. So if you are the kind of person who likes live

306
00:20:03,002 --> 00:20:06,708
streaming, I recommend you to take a look at those

307
00:20:06,794 --> 00:20:09,696
chapters here on the first resource.

308
00:20:09,888 --> 00:20:13,296
Also, I created a series of blog posts

309
00:20:13,408 --> 00:20:16,840
explaining all the details of the app. That is

310
00:20:16,910 --> 00:20:20,536
what you can find on the second resource. And finally,

311
00:20:20,638 --> 00:20:25,176
we have a project on trailhead. Trailhead is our learning

312
00:20:25,278 --> 00:20:28,732
platform, is a gamified platform

313
00:20:28,866 --> 00:20:32,376
in which you have tutorials to learn everything about Salesforce

314
00:20:32,408 --> 00:20:35,788
development and also now Slack development. So I recommend

315
00:20:35,874 --> 00:20:38,830
you to go there and check it out.

316
00:20:39,200 --> 00:20:43,016
Finally, if you want to connect with Salesforce developers,

317
00:20:43,128 --> 00:20:46,652
you can do that in our website. You can

318
00:20:46,706 --> 00:20:49,800
follow us on Twitter and also Facebook,

319
00:20:49,880 --> 00:20:53,284
LinkedIn and YouTube. It. Thank you very

320
00:20:53,322 --> 00:20:56,884
much for watching my session and I hope

321
00:20:57,002 --> 00:20:58,464
that you enjoyed.

