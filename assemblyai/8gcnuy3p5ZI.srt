1
00:00:38,930 --> 00:00:42,386
Thank you for joining us today. We're here to explore the role

2
00:00:42,418 --> 00:00:46,118
of GitHub as a platform engineer platform. We'll take you

3
00:00:46,124 --> 00:00:50,106
from the traditional code DevOps world, through the collaborative DevOps

4
00:00:50,178 --> 00:00:54,078
environments to the forward looking platform engineering world.

5
00:00:54,244 --> 00:00:57,422
Today, we will show you how GitHub is not

6
00:00:57,476 --> 00:01:02,106
just a repository, but a key factor in building robust,

7
00:01:02,218 --> 00:01:05,954
scalable and efficient platform engineering solutions through

8
00:01:05,992 --> 00:01:09,570
the use of GitHub actions let me begin with a small

9
00:01:09,640 --> 00:01:12,994
story. Not too long ago, the CEO of the

10
00:01:13,032 --> 00:01:16,950
company approached both my boss and me, asking us

11
00:01:17,020 --> 00:01:21,366
to set up a VM for him. This task took some time,

12
00:01:21,468 --> 00:01:25,074
and during the process he asked about the possibility of automating

13
00:01:25,122 --> 00:01:28,786
this process. He expressed the desire not to rely

14
00:01:28,818 --> 00:01:32,298
on us every time he needed to update the code or deploy a

15
00:01:32,304 --> 00:01:35,642
new vm, as most of the times we were busy with other

16
00:01:35,696 --> 00:01:39,030
projects. In response to his inquiry,

17
00:01:39,110 --> 00:01:42,334
we developed a solution and today I will be

18
00:01:42,372 --> 00:01:46,094
presenting it to you. Depending on the size of the

19
00:01:46,132 --> 00:01:49,582
company, your infrastructure needs can

20
00:01:49,636 --> 00:01:54,062
be met by the project's own developers, a team of sysadmins

21
00:01:54,126 --> 00:01:57,378
or a team of DevOps engineers. I will illustrate the

22
00:01:57,384 --> 00:02:01,054
evolution of each approach, guiding you from a code DevOps

23
00:02:01,102 --> 00:02:04,986
world to a platform engineer environment swiftly.

24
00:02:05,118 --> 00:02:08,274
All of this will be achieved while ensuring that everything is checked

25
00:02:08,322 --> 00:02:12,326
into GitHub. Not too long ago,

26
00:02:12,428 --> 00:02:16,006
companies heavily relied on sysadmins, who are responsible for

27
00:02:16,028 --> 00:02:19,154
deploying and maintaining everything. Typically,

28
00:02:19,282 --> 00:02:23,078
this is admins employed scripts, repositories with key files,

29
00:02:23,174 --> 00:02:27,238
config files, and documentation to set up requested resources.

30
00:02:27,414 --> 00:02:30,906
This manual process consume a significant amount of time

31
00:02:31,008 --> 00:02:34,826
involving handson configuration, going through documentation,

32
00:02:34,938 --> 00:02:38,702
and so on. We are all aware that everything we

33
00:02:38,756 --> 00:02:42,918
do in a manual way often led to problems or omitted

34
00:02:42,954 --> 00:02:46,238
details. With incorporation of cloud providers,

35
00:02:46,334 --> 00:02:49,102
certain tasks became easier,

36
00:02:49,246 --> 00:02:53,134
but spinning up a VM and configuring it often involved

37
00:02:53,182 --> 00:02:55,986
clicking options and going through a web console.

38
00:02:56,098 --> 00:02:59,350
This consumed a lot of time and was prone to errors.

39
00:03:00,250 --> 00:03:04,242
The evolution of sysadmins bought us to DevOps engineers

40
00:03:04,386 --> 00:03:07,874
and DevOps to the adoption of infrastructure as

41
00:03:07,932 --> 00:03:10,810
code tools such as terraform and ansible.

42
00:03:11,150 --> 00:03:15,066
This transition improved the establishment of standards and

43
00:03:15,088 --> 00:03:18,970
the automation of repetitive tasks through code implementation.

44
00:03:19,390 --> 00:03:23,002
However, managing the code, configuring variables,

45
00:03:23,066 --> 00:03:27,006
and adjusting settings for specific scenarios proved to

46
00:03:27,028 --> 00:03:30,746
be time consuming. While these tools accelerated

47
00:03:30,858 --> 00:03:34,642
repetitive deployments, they weren't easy to adjust for each

48
00:03:34,696 --> 00:03:38,142
environment. Most of the times, customization was required

49
00:03:38,206 --> 00:03:41,954
after finished initial deployments required time to set

50
00:03:41,992 --> 00:03:45,718
up, but subsequent repetition streamlined the process,

51
00:03:45,884 --> 00:03:49,302
making newer deployments quicker and maintenance more

52
00:03:49,356 --> 00:03:52,886
straightforward. Nevertheless, even with the

53
00:03:52,908 --> 00:03:57,122
addition of automated pipelines and configuration management tools.

54
00:03:57,186 --> 00:04:00,490
Some manual intervention remain necessary.

55
00:04:01,470 --> 00:04:04,778
After performing these repetitive tasks across

56
00:04:04,864 --> 00:04:08,614
numerous repositories, we developed a tool to automate

57
00:04:08,662 --> 00:04:12,926
this process, minimizing manual intervention and saving time.

58
00:04:13,108 --> 00:04:16,414
This open source tool we created aimed to

59
00:04:16,452 --> 00:04:20,474
eliminate as much manual effort as possible while offering

60
00:04:20,522 --> 00:04:23,838
flexibility to adapt to individual user requirements.

61
00:04:24,014 --> 00:04:27,714
To achieve this, we integrated popular infrastructure as code

62
00:04:27,752 --> 00:04:31,650
tools, incorporated automation scripts, included pre

63
00:04:31,720 --> 00:04:35,970
and post hooks to execute scripts, and encapsulated

64
00:04:36,050 --> 00:04:39,606
everything within a docker container to eliminate the need

65
00:04:39,628 --> 00:04:43,240
to install anything, reducing compatibility issues.

66
00:04:43,690 --> 00:04:47,678
The result is speedops, a tool designed to automate deployments

67
00:04:47,794 --> 00:04:51,478
adjustable to specific needs, maintaining simplicity

68
00:04:51,574 --> 00:04:54,650
throughout the process. However,

69
00:04:54,800 --> 00:04:58,934
there were still some requirements, such as defining config files

70
00:04:58,982 --> 00:05:02,222
and structuring the repository in a certain way.

71
00:05:02,356 --> 00:05:06,314
After that was done, it required pulling the code and executing

72
00:05:06,362 --> 00:05:10,506
it with a docker engine. This is where GitHub actions played

73
00:05:10,538 --> 00:05:14,282
a crucial role for us. We incorporated scripts

74
00:05:14,346 --> 00:05:18,306
into our actions to generate the necessary elements for Bitovi to

75
00:05:18,328 --> 00:05:22,066
work out of the box, allowing customization through the

76
00:05:22,088 --> 00:05:26,050
workflow inputs. This approach effectively separated

77
00:05:26,130 --> 00:05:30,178
the end user from the code while maintaining transparency

78
00:05:30,354 --> 00:05:33,254
for those curious enough to inspect it.

79
00:05:33,452 --> 00:05:37,422
Furthermore, you will find that within our actions, we provide a variable

80
00:05:37,506 --> 00:05:40,986
for obtaining an artifact containing the ansible and the

81
00:05:41,008 --> 00:05:44,458
terraform code. The beauty of it all is that everything

82
00:05:44,544 --> 00:05:47,190
you perform happens within your repository,

83
00:05:47,350 --> 00:05:51,098
ensuring traceability while keeping your repository free

84
00:05:51,184 --> 00:05:54,522
of unwanted artifacts like scripts and

85
00:05:54,576 --> 00:05:58,618
terraform code. And this is how GitHub transformed

86
00:05:58,634 --> 00:06:01,278
into a platform engineering platform for us.

87
00:06:01,444 --> 00:06:04,606
And we are here to share this journey and of course the

88
00:06:04,628 --> 00:06:07,310
CEO satisfaction with you. However,

89
00:06:07,460 --> 00:06:11,006
if you're like me, you might be wondering if Bitovi

90
00:06:11,038 --> 00:06:14,354
is essential for this setup. The answer is no.

91
00:06:14,552 --> 00:06:17,926
It plays a pivotal role in our story and for many of

92
00:06:17,948 --> 00:06:21,382
our actions, but it's not mandatory. In fact,

93
00:06:21,516 --> 00:06:25,110
some of our top GitHub actions don't use it at all.

94
00:06:25,260 --> 00:06:28,374
What we want to share the most in this talk is

95
00:06:28,412 --> 00:06:32,054
the experience we had transitioning to everything GitHub

96
00:06:32,102 --> 00:06:35,494
action and the tools we created during this growth

97
00:06:35,622 --> 00:06:38,986
so that you can leverage on a knowledge to get you to a

98
00:06:39,008 --> 00:06:42,640
platform engineering world in little to no time.

99
00:06:43,090 --> 00:06:46,800
But in the end, it's all about the end user experience.

100
00:06:47,890 --> 00:06:51,210
From the DevOps engineer perspective, the action

101
00:06:51,290 --> 00:06:54,738
yaml defines the inputs and outputs the

102
00:06:54,904 --> 00:06:58,990
action will take and generate. The action specifies

103
00:06:59,070 --> 00:07:02,146
the steps to run and the logic behind it.

104
00:07:02,248 --> 00:07:05,714
Just like a regular script, each step could

105
00:07:05,752 --> 00:07:09,750
involve executing a command, running a script, or even calling another

106
00:07:09,820 --> 00:07:13,510
action. This provides a wrapper for the infrastructure as code

107
00:07:13,580 --> 00:07:16,914
tools and an isolation layer for the developer,

108
00:07:17,042 --> 00:07:21,370
it only exposes the inputs and outputs you define.

109
00:07:21,870 --> 00:07:24,918
If you're familiar with terraform, this might ring

110
00:07:24,934 --> 00:07:29,014
a bell. It looks a lot like handling inputs and outputs

111
00:07:29,062 --> 00:07:30,830
in a terraform module.

112
00:07:32,530 --> 00:07:36,394
Shifting to a developer perspective, in your repo,

113
00:07:36,442 --> 00:07:40,766
you could have one or multiple workflows already

114
00:07:40,868 --> 00:07:44,082
created based on your needs. You might be running

115
00:07:44,136 --> 00:07:48,206
some syntax checks or some code matrix checks.

116
00:07:48,398 --> 00:07:52,066
Adding one workflow to deploy your code to an

117
00:07:52,088 --> 00:07:55,374
easy to instance is as easy as adding

118
00:07:55,422 --> 00:07:58,870
another workflow and setting the correct inputs.

119
00:07:59,690 --> 00:08:02,854
You know that you could trigger all of them at the same time. You could

120
00:08:02,892 --> 00:08:05,970
create subsequent steps based on results.

121
00:08:06,130 --> 00:08:10,090
The possibilities with GitHub actions are endless.

122
00:08:11,870 --> 00:08:15,254
Now, taking the broader view, the platform engineer

123
00:08:15,302 --> 00:08:18,742
can outline the entire necessary infrastructure

124
00:08:18,806 --> 00:08:22,518
using various actions. In the illustrated diagram,

125
00:08:22,614 --> 00:08:26,494
we present an example of an environment based

126
00:08:26,612 --> 00:08:30,094
strategy. In this particular case, there are three

127
00:08:30,132 --> 00:08:34,210
repositories, each corresponding to a distinct environment.

128
00:08:34,950 --> 00:08:38,702
Say you have a dev environment. In your dev environment,

129
00:08:38,766 --> 00:08:42,350
you can designate a workflow for every resource

130
00:08:42,510 --> 00:08:46,642
that you need, providing a clear and an organized

131
00:08:46,706 --> 00:08:50,486
approach to managing infrastructure for all of

132
00:08:50,508 --> 00:08:54,722
your environment. You can then copy that complete environment,

133
00:08:54,866 --> 00:08:59,174
adjust the required variables, and set up another environment

134
00:08:59,302 --> 00:09:03,130
in just minutes. That way, you could have the same things

135
00:09:03,200 --> 00:09:07,526
in development, QA, and production really easily.

136
00:09:07,718 --> 00:09:10,550
These workflows can be configured with manual triggers,

137
00:09:10,630 --> 00:09:14,254
scheduled runs, et cetera. You could, of course,

138
00:09:14,292 --> 00:09:18,480
take another approach. This is just an example of how we achieved it.

139
00:09:19,490 --> 00:09:22,894
In the upcoming slides, I'll show you some example of our actions and

140
00:09:22,932 --> 00:09:27,026
demonstrate how simple it is to deploy various components by setting up

141
00:09:27,048 --> 00:09:31,134
a workflow. As you can see from the screenshots,

142
00:09:31,262 --> 00:09:35,042
deploying your project to GitHub pages takes only a few

143
00:09:35,096 --> 00:09:38,694
lines of code. We try to make the dev experience as

144
00:09:38,732 --> 00:09:42,530
simple as possible with our actions. If some adjustments

145
00:09:42,610 --> 00:09:46,630
should be made, you might find what you're looking for in one

146
00:09:46,700 --> 00:09:49,110
of the many exposed inputs.

147
00:09:49,530 --> 00:09:53,386
Digging deeper into the storybook to GitHub pages actions, you will

148
00:09:53,408 --> 00:09:56,854
see that the main goal we had was to simplify and reduce

149
00:09:56,902 --> 00:10:00,766
the steps into a single line, wrapping up some tasks that

150
00:10:00,788 --> 00:10:04,430
we did repeatedly and assuming some default values

151
00:10:04,930 --> 00:10:08,682
in some cases. For some developers, knowing all of these steps

152
00:10:08,746 --> 00:10:10,990
was really tough and really complicated.

153
00:10:12,130 --> 00:10:15,854
One of our goals as platform engineers was to automate

154
00:10:15,902 --> 00:10:19,474
these tasks with simple solutions. By the

155
00:10:19,512 --> 00:10:23,182
way, if you're interested in more details about how to deploy

156
00:10:23,246 --> 00:10:27,350
storybook to GitHub pages, please check their official documentation.

157
00:10:28,890 --> 00:10:32,790
Now let's shift to a more interesting and complex deployment.

158
00:10:33,290 --> 00:10:37,014
One of the things we didn't like about reusing terraform code was

159
00:10:37,052 --> 00:10:40,602
the fact that we had to manually set a lot of variables each

160
00:10:40,656 --> 00:10:43,850
time, so we needed something more dynamic.

161
00:10:44,510 --> 00:10:47,910
We solved the dynamic part by using the repository

162
00:10:47,990 --> 00:10:51,162
specifics, say the repo name or branch,

163
00:10:51,306 --> 00:10:53,950
as inputs for the variables.

164
00:10:54,290 --> 00:10:57,658
We kept the rest with some same defaults.

165
00:10:57,834 --> 00:11:01,134
That way you can get your resource up and running

166
00:11:01,252 --> 00:11:04,800
with little to no intervention in just a few minutes.

167
00:11:05,410 --> 00:11:08,658
But let's say you want a different instance size. If you want to

168
00:11:08,664 --> 00:11:12,286
add a proxy to a database, expose a port, et cetera,

169
00:11:12,398 --> 00:11:16,370
you can easily change that by adjusting just an input variable.

170
00:11:16,810 --> 00:11:20,902
We went through the process of creating one action for each particular needed

171
00:11:20,956 --> 00:11:23,350
we had during our work assignments,

172
00:11:23,850 --> 00:11:27,794
but in order to produce what we needed in less time, we created

173
00:11:27,842 --> 00:11:31,274
a common code for all of our actions. That way we

174
00:11:31,312 --> 00:11:34,634
reused a lot of code and reduced the time

175
00:11:34,672 --> 00:11:36,170
to add new ensures.

176
00:11:37,710 --> 00:11:41,182
This is a summary of what we produce in just a few

177
00:11:41,236 --> 00:11:45,386
months of work. This allows any user

178
00:11:45,498 --> 00:11:48,574
from a dev to a DevOps to

179
00:11:48,612 --> 00:11:52,538
assist admin to freely deploy and automate the resources

180
00:11:52,634 --> 00:11:56,782
with little to no interventions in just minutes instead

181
00:11:56,836 --> 00:12:00,126
of days. This is what we wanted to show as

182
00:12:00,148 --> 00:12:03,770
platform engineers how we simplified and accelerated

183
00:12:03,850 --> 00:12:07,400
deployments of on enhancing the end user experience.

184
00:12:08,250 --> 00:12:10,020
That's it. Thanks for watching.

