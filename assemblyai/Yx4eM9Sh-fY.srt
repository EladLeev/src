1
00:00:34,450 --> 00:00:37,826
Hello friends. My name is Ala Shiban and I'm the co founder of a startup

2
00:00:37,858 --> 00:00:41,474
called Klotho, enabling teams to write universal backend

3
00:00:41,522 --> 00:00:44,946
code that runs anywhere. I led teams in the visual studio

4
00:00:44,978 --> 00:00:48,434
at Microsoft and more recently led the cloud services.org

5
00:00:48,482 --> 00:00:52,302
at Ride Games. I'm going to walk you through the state of infrastructurefromcode from

6
00:00:52,356 --> 00:00:56,042
code in 2023, starting with what is infrastructure

7
00:00:56,106 --> 00:00:59,886
from code? How does it compare to infrastructurefromcode as code

8
00:00:59,988 --> 00:01:02,810
and the leading approaches and tools in the space?

9
00:01:02,900 --> 00:01:06,770
Infrastructure from code, or IFC, is a broad term around

10
00:01:06,840 --> 00:01:10,734
tools that analyze application code to infer the cloud resources

11
00:01:10,782 --> 00:01:14,014
the application needs, and then creates and maintains

12
00:01:14,062 --> 00:01:17,782
them without you having to manually define them. What that means

13
00:01:17,836 --> 00:01:21,862
is that the tools are able to take application code with some

14
00:01:21,916 --> 00:01:25,634
or no metadata, process it, and create a deployable

15
00:01:25,682 --> 00:01:28,954
cloud version of it. What does the name mean and how is it different from

16
00:01:28,992 --> 00:01:32,582
infrastructure as code? Infra as code or IAC

17
00:01:32,726 --> 00:01:36,550
refers to tools that allow developers or cloud engineers to describe

18
00:01:36,630 --> 00:01:39,894
infrastructure. You write templates or actual code,

19
00:01:40,032 --> 00:01:44,522
terraform, pulumi or similar, that describes lambdas or kubernetes clusters,

20
00:01:44,586 --> 00:01:47,802
IAM policies, API gateways, how they interconnect

21
00:01:47,946 --> 00:01:51,502
sqs or Kafka queues and is loosely aligned with using

22
00:01:51,556 --> 00:01:54,830
these resources using an injected configuration

23
00:01:54,910 --> 00:01:58,770
or environment variable. And while the name infrastructurefromcode from code sounds

24
00:01:58,840 --> 00:02:02,686
similar, it means something quite different. It refers to tools

25
00:02:02,718 --> 00:02:06,546
that automatically infer the needed infrastructure components

26
00:02:06,658 --> 00:02:10,450
from application code. Here's an example from one of the tools.

27
00:02:10,610 --> 00:02:14,214
The application code is a plain Python app that

28
00:02:14,252 --> 00:02:17,890
uses the Redis SDK and fast API web framework.

29
00:02:18,050 --> 00:02:21,702
And once the tool is run on that code, it generates an API gateway,

30
00:02:21,766 --> 00:02:25,354
a lambda to run the code, an elasticache instance to back

31
00:02:25,392 --> 00:02:28,762
the SDK usage in the code that includes vpcs and

32
00:02:28,816 --> 00:02:32,754
policies. The things that are needed to make this deployable and runnable.

33
00:02:32,822 --> 00:02:36,254
And depending on the tool, you're able to swap out technologies without

34
00:02:36,292 --> 00:02:40,446
changing the application code. Nowhere did it say Lambda. Looking at

35
00:02:40,468 --> 00:02:44,622
it from an aspirational point of view, what these tools enable is

36
00:02:44,676 --> 00:02:48,894
writing universal backend code that runs on different target platforms

37
00:02:48,942 --> 00:02:52,606
with varying runtime characteristics, different clouds,

38
00:02:52,638 --> 00:02:55,934
different underlying services on prem, different architectures,

39
00:02:56,062 --> 00:02:59,474
and they're able to adapt as requirements change.

40
00:02:59,592 --> 00:03:03,474
What problems does it solve, though? How rich would you be IFC? You got $1

41
00:03:03,522 --> 00:03:06,662
every time somebody promised you a tool that lets you focus

42
00:03:06,716 --> 00:03:10,106
on the business logic and not the infrastructure. And if you've been in the

43
00:03:10,128 --> 00:03:14,022
industry for long enough, you've seen this never ending cycle.

44
00:03:14,166 --> 00:03:17,718
VMS service oriented architectures microservices,

45
00:03:17,814 --> 00:03:21,706
containers, mesos, serverless, and now kubernetes.

46
00:03:21,818 --> 00:03:26,554
Focusing on the business logic comes with a really expensive asterisk

47
00:03:26,682 --> 00:03:30,650
associated with it, because there's a lot that goes into building back ends,

48
00:03:30,730 --> 00:03:34,506
lots to learn and set up. This list wouldn't surprise you unless

49
00:03:34,538 --> 00:03:38,322
you look at number 14 that's not usually there, and the list goes on.

50
00:03:38,456 --> 00:03:42,414
Research we've conducted shows that only 63% of engineering capacity

51
00:03:42,462 --> 00:03:46,034
in midsized companies is dedicated to feature development.

52
00:03:46,162 --> 00:03:49,026
Because of this and related enabling efforts,

53
00:03:49,138 --> 00:03:52,726
and then requirements change and you're asked to be

54
00:03:52,748 --> 00:03:55,158
able to run the application on a different cloud,

55
00:03:55,324 --> 00:03:58,722
AWS, azure, GCP, add fault tolerance

56
00:03:58,786 --> 00:04:03,238
or multi region support, switch from something to kubernetes,

57
00:04:03,414 --> 00:04:06,922
integrate the serverless code with the existing architecture, or maybe

58
00:04:06,976 --> 00:04:10,326
split that growing service into two, or actually combine

59
00:04:10,358 --> 00:04:13,758
those three into one to save some cost. And that new service that Hema is

60
00:04:13,764 --> 00:04:17,774
building needs GRPC for even lower latency infrastructure from

61
00:04:17,812 --> 00:04:20,894
code aspires to enable universal backend code,

62
00:04:21,012 --> 00:04:24,750
developers only write application code, and infra platform teams

63
00:04:24,830 --> 00:04:28,478
set tech standards and ensure feature teams adhere

64
00:04:28,494 --> 00:04:31,502
to them. They work together, but independently.

65
00:04:31,646 --> 00:04:34,750
There are four dominant approaches to realizing this aspiration.

66
00:04:34,830 --> 00:04:38,290
In the SDK approach, a custom SDK is introduced

67
00:04:38,370 --> 00:04:42,338
that developers use in their code. The IFC tool would analyze

68
00:04:42,434 --> 00:04:46,194
how the service code interacts and uses that SDK,

69
00:04:46,322 --> 00:04:49,690
and then infers the infrastructure from that. Introducing a custom

70
00:04:49,760 --> 00:04:53,446
SDK makes inferring usage from code more predictable

71
00:04:53,558 --> 00:04:56,806
and tailored to work well for the scenarios it was designed

72
00:04:56,838 --> 00:05:00,926
for. But it also means the SDK is always one

73
00:05:00,948 --> 00:05:04,586
step behind in leveraging new underlying cloud features.

74
00:05:04,698 --> 00:05:08,474
The use of a new platform specific SDK requires developers

75
00:05:08,522 --> 00:05:12,666
to learn and make use of those libraries. However, they have

76
00:05:12,708 --> 00:05:16,594
the potential of unlocking unique capabilities only they can offer.

77
00:05:16,712 --> 00:05:19,966
This comes at a cost of sacrificing the breadth

78
00:05:19,998 --> 00:05:23,822
and depth of features that popular community driven libraries

79
00:05:23,966 --> 00:05:27,986
may offer. In the programming language approach, a new programming

80
00:05:28,018 --> 00:05:31,394
language is introduced that is cloud centric. They introduce language

81
00:05:31,442 --> 00:05:35,218
constructs that would otherwise be difficult to do in existing programming languages.

82
00:05:35,314 --> 00:05:38,694
Interactivity or distributed computing constructs cloud be more

83
00:05:38,732 --> 00:05:41,638
readily implemented or integrated into the language,

84
00:05:41,734 --> 00:05:45,414
making the process simpler and more intuitive for software developers.

85
00:05:45,542 --> 00:05:48,234
There are a few tradeoffs with that approach, though.

86
00:05:48,352 --> 00:05:51,866
Software developers have to commit to learning a new language, which means

87
00:05:51,888 --> 00:05:55,726
that they can't reuse the expertise they built over the years with existing ecosystems and

88
00:05:55,748 --> 00:05:59,598
tools. Starting a new programming language also means that you have

89
00:05:59,604 --> 00:06:02,906
to start a new ecosystem for that language or have stellar

90
00:06:02,938 --> 00:06:06,438
interoperability with supported and interoperable languages.

91
00:06:06,554 --> 00:06:10,114
That has failed in many occasions but also succeeded in others. Like with

92
00:06:10,152 --> 00:06:14,114
typeScript, there's an organizational cost as well where you need to hire people with

93
00:06:14,152 --> 00:06:17,686
that expertise in mind, and it's much easier to finding developers that

94
00:06:17,708 --> 00:06:21,634
know Golang, Python, C sharp, Java. The annotations approach

95
00:06:21,682 --> 00:06:24,934
relies on encode annotations, which either leverage the

96
00:06:24,972 --> 00:06:28,678
existing programming language constructs, open source libraries frameworks in

97
00:06:28,684 --> 00:06:32,618
the code, or expect more metadata inside of the annotations themselves.

98
00:06:32,784 --> 00:06:36,122
Those tools have to depend on static analysis to an even

99
00:06:36,176 --> 00:06:40,134
greater extent because they don't have a custom SDK or a purposefully

100
00:06:40,182 --> 00:06:43,206
crafted programming language that has those constructs

101
00:06:43,238 --> 00:06:47,034
built in. For example, in the node JS world is to annotate an event emitter

102
00:06:47,162 --> 00:06:50,634
with a pub sub capability, turning it into a distributed mechanism

103
00:06:50,682 --> 00:06:53,798
for passing messages around. But from the developer perspective,

104
00:06:53,914 --> 00:06:57,074
developers are still interacting with an event system.

105
00:06:57,272 --> 00:07:00,910
This would then be backed by SNS, SQS, Kafka.

106
00:07:00,990 --> 00:07:04,386
It doesn't really matter, because that becomes the implementation detail of

107
00:07:04,408 --> 00:07:08,134
the IFC tool. The trade off, however, is the expanding need for

108
00:07:08,172 --> 00:07:11,698
the tooling to understand existing and growing sets of libraries, languages,

109
00:07:11,794 --> 00:07:15,986
design patterns, clouds and underlying services. The dimensionality

110
00:07:16,018 --> 00:07:19,274
of the problem becomes potentially too large and not having

111
00:07:19,312 --> 00:07:23,034
an SDK to lean on or complement it. The temptation to

112
00:07:23,072 --> 00:07:26,314
grow the annotation system until it becomes a full

113
00:07:26,352 --> 00:07:29,642
fledged DSL or language is ever there,

114
00:07:29,776 --> 00:07:32,842
which requires developers to then understand the annotation system

115
00:07:32,896 --> 00:07:36,298
and processor, and often work around it manually when it breaks.

116
00:07:36,394 --> 00:07:39,674
The last one is more of a hybrid between a few of the approaches.

117
00:07:39,722 --> 00:07:43,278
You could have an SDK with some annotation systems to simplify that process,

118
00:07:43,364 --> 00:07:47,246
or annotations that have more metadata in them, but expand existing

119
00:07:47,278 --> 00:07:50,946
programming language interfaces or some variation on that

120
00:07:50,968 --> 00:07:53,810
spectrum. Here's a list of the dominant players in this space.

121
00:07:53,960 --> 00:07:57,378
We'll compare them based on these dimensions, and we'll talk about why they're important.

122
00:07:57,544 --> 00:08:01,590
Starting with the license there's a strong desire from the developer operator community

123
00:08:01,660 --> 00:08:05,282
to have more open source tools, which gives you a degree of certainty

124
00:08:05,346 --> 00:08:08,854
about its future, all the way down to being source available or

125
00:08:08,892 --> 00:08:12,694
closed source. As you can see, many of the solutions are already open source,

126
00:08:12,822 --> 00:08:16,358
although a few who are generally more a SaaS offering

127
00:08:16,454 --> 00:08:20,102
are either closed source or source available programming languages.

128
00:08:20,246 --> 00:08:24,490
One or two languages. The majority support one language,

129
00:08:24,650 --> 00:08:28,974
with a couple that focus on multilanguage support and

130
00:08:29,172 --> 00:08:32,890
a few that are introducing their own languages. What is the developer interface?

131
00:08:32,970 --> 00:08:37,054
Different tools and startups are taking the SDK approaches. Others are leaning

132
00:08:37,102 --> 00:08:40,766
towards the framework or language approach, with security. Most startups

133
00:08:40,798 --> 00:08:44,034
and tools are leveraging the fact that they have this reasoning in

134
00:08:44,072 --> 00:08:47,826
static time about how the applications are constructed

135
00:08:48,018 --> 00:08:51,554
to generate policies based on the dependency graphs,

136
00:08:51,682 --> 00:08:55,430
so you get least privileged permissions through IAM or similar

137
00:08:55,500 --> 00:08:58,358
policy engines without have to manually creating them.

138
00:08:58,444 --> 00:09:02,522
Infrastructure as code support is important for teams that already have platforms and either

139
00:09:02,576 --> 00:09:05,942
want to introduce IFC into the existing platforms

140
00:09:06,006 --> 00:09:10,118
or integrate it into an IFC based workflow.

141
00:09:10,214 --> 00:09:13,822
It provides infrastructurefromcode teams the ability to customize and

142
00:09:13,956 --> 00:09:18,094
tailor the output to the organizational needs that they have,

143
00:09:18,292 --> 00:09:22,266
reusing a lot of the terraform or infrast code templates they've

144
00:09:22,298 --> 00:09:26,034
already generated. This ties into configurability and not the high level one

145
00:09:26,072 --> 00:09:29,646
which most of those tools have configuration for. But how do you configure

146
00:09:29,678 --> 00:09:33,714
the lower level pieces? Do you use custom configurations or

147
00:09:33,832 --> 00:09:37,530
specifications, or do they allow for using infrastructure

148
00:09:37,550 --> 00:09:41,826
as code as the mechanism to configure the generated resources,

149
00:09:41,938 --> 00:09:45,234
bypassing any for a spec hosting model. Some are PaaS

150
00:09:45,282 --> 00:09:49,046
only, and you get the same trade offs of having a PaaS versus IAS or

151
00:09:49,068 --> 00:09:52,330
a self hosted solution. On the other end, it's completely

152
00:09:52,400 --> 00:09:56,298
self hosted where it generates IAC or the elements for

153
00:09:56,304 --> 00:10:00,406
you to deploy, and some do both, backing technologies like compute

154
00:10:00,438 --> 00:10:04,326
or storage. Some support on demand computing or serverless

155
00:10:04,518 --> 00:10:08,286
versus always on compute like Kubernetes. Then there's the next

156
00:10:08,308 --> 00:10:11,754
layer of technologies that the IFC tools

157
00:10:11,882 --> 00:10:15,786
target. Some are proprietary, especially ones that are more

158
00:10:15,828 --> 00:10:19,634
closed source or SaaS versions. You don't know what they're using

159
00:10:19,672 --> 00:10:23,138
behind the scenes. Others are preselected, meaning it's a specific

160
00:10:23,224 --> 00:10:27,362
stack that they use as part of the implementation. For instance, API gateway

161
00:10:27,426 --> 00:10:30,898
with postgres, DynamoDB, Kubernetes,

162
00:10:31,074 --> 00:10:34,274
Lambdas, GRPC, and sQs.

163
00:10:34,402 --> 00:10:38,014
Others are adaptable, meaning that the technologies are interchangeable.

164
00:10:38,082 --> 00:10:41,738
Technology can be swapped out for another being able to switch out

165
00:10:41,824 --> 00:10:45,606
GRPC with Linkerd or lambdas with kubernetes

166
00:10:45,718 --> 00:10:49,146
without affecting application code. Cloud portability support

167
00:10:49,248 --> 00:10:52,554
most support one cloud, others are prioritizing multi cloud

168
00:10:52,592 --> 00:10:55,914
support. Here's a matrix with the distillment of all the IFC tools

169
00:10:55,962 --> 00:10:59,726
and the characteristics of each. You can find it on Cloud dev,

170
00:10:59,828 --> 00:11:03,098
IFC, and many more resources there. How does this relate to

171
00:11:03,124 --> 00:11:06,594
existing infrastructurefromcode and platform teams? What we see happening

172
00:11:06,712 --> 00:11:10,434
is that the infrastructure teams will continue describing more

173
00:11:10,472 --> 00:11:13,874
custom and organization specific infrastructure as code

174
00:11:13,912 --> 00:11:17,794
or terraform in the cases that they matter, and then provide an IFC

175
00:11:17,842 --> 00:11:21,430
tool that translates developer code to cloud

176
00:11:21,500 --> 00:11:25,174
versions of it that is integrated and deployed with the

177
00:11:25,212 --> 00:11:29,174
tooling that the infrastructurefromcode team set, and by having this IFC tool

178
00:11:29,212 --> 00:11:32,950
in the middle, it allows them to ensure and enforce policies across

179
00:11:33,020 --> 00:11:37,106
the company based on teams or organizations or individuals

180
00:11:37,218 --> 00:11:40,846
or types of technologies. The infrastructure from code, movement or

181
00:11:40,868 --> 00:11:44,206
approach wants to help you break free from the cycle of the mundane to

182
00:11:44,228 --> 00:11:47,374
work on challenges that nobody else is and only you can.

183
00:11:47,492 --> 00:11:50,986
So check out cloud dev IFC to find all the resources

184
00:11:51,018 --> 00:11:54,766
and tools. Try one out and join us on discord and continue the

185
00:11:54,788 --> 00:11:56,220
conversation. Have a great day.

