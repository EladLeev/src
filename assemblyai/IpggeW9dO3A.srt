1
00:00:26,370 --> 00:00:30,198
Hello everyone, I am Kalyan Prasad and I'm going to talk about

2
00:00:30,284 --> 00:00:33,110
financial network analysis using Python.

3
00:00:33,850 --> 00:00:37,142
Thank you so much for joining my talk and

4
00:00:37,196 --> 00:00:40,040
I am really so excited to be here today.

5
00:00:41,050 --> 00:00:44,662
Some cheap marketing. I am a self taught data scientist and

6
00:00:44,716 --> 00:00:48,566
analytics manager. Yeah, of course I'm a community person.

7
00:00:48,668 --> 00:00:52,622
I love being involved with different communities and I try to help those

8
00:00:52,676 --> 00:00:56,586
communities as much as I can. Currently I'm associated

9
00:00:56,618 --> 00:01:00,394
with following organizations called Pycon India, Pycon Hyderabad,

10
00:01:00,442 --> 00:01:04,082
Hyde, PI and humans for AI where I perform different

11
00:01:04,136 --> 00:01:09,122
roles and responsibilities. In all of these organizations I

12
00:01:09,176 --> 00:01:13,230
always love to give back to community, so I always look for an opportunities

13
00:01:13,310 --> 00:01:16,822
to share my knowledge and I also do

14
00:01:16,876 --> 00:01:20,422
mentoring in hackathons and also in other

15
00:01:20,476 --> 00:01:23,558
community activities. So these are my

16
00:01:23,644 --> 00:01:26,758
social platforms. Feel free to follow

17
00:01:26,844 --> 00:01:30,374
or connect to me and in case if you have any feedback

18
00:01:30,422 --> 00:01:34,186
or suggestions or anything for me, feel free to

19
00:01:34,208 --> 00:01:38,300
write me. I'll be responding to each and every message

20
00:01:38,910 --> 00:01:42,554
that's pretty much about me. So here is the outline

21
00:01:42,602 --> 00:01:46,634
for today's talk. We'll start understanding history and graph.

22
00:01:46,762 --> 00:01:50,778
Then we'll talk about what are networks and how we can construct

23
00:01:50,874 --> 00:01:54,766
the network structure. And then we'll see the financial evolution

24
00:01:54,878 --> 00:01:58,862
networks. And then we'll try to understand the power of an importance

25
00:01:58,926 --> 00:02:02,094
of python graph. And then we'll straightaway

26
00:02:02,142 --> 00:02:06,134
see some actions on financial network analysis with

27
00:02:06,252 --> 00:02:10,146
two different case studies. So without any further delays,

28
00:02:10,178 --> 00:02:11,640
let's get started.

29
00:02:14,570 --> 00:02:17,866
History and graph as we all

30
00:02:17,888 --> 00:02:21,910
know that data visualizations is a powerful way to simplify

31
00:02:21,990 --> 00:02:25,100
and interpret the underlying patterns in the data.

32
00:02:26,190 --> 00:02:29,750
The use of graphs is one such visualization technique

33
00:02:29,830 --> 00:02:33,294
and it is incredibly useful and help business for

34
00:02:33,332 --> 00:02:36,574
making better data driven decisions. Now,

35
00:02:36,612 --> 00:02:39,646
what exactly the graphs are? In order to

36
00:02:39,668 --> 00:02:43,698
understand the concept of graphs, we first need to understand the concept called

37
00:02:43,784 --> 00:02:47,602
graph theory. So here I'll be quickly talking about

38
00:02:47,656 --> 00:02:51,166
the origin of graph theory to get a better understanding

39
00:02:51,198 --> 00:02:55,682
of graphs. Graphs were first introduced

40
00:02:55,746 --> 00:02:59,746
in the 18th century by swiss mathematician called Leonard

41
00:02:59,858 --> 00:03:03,382
Euler. So here's the one has

42
00:03:03,436 --> 00:03:06,866
attempt and ultimate solution to the famous coins

43
00:03:06,898 --> 00:03:10,186
with Mitch problem which you are seeing here are

44
00:03:10,288 --> 00:03:13,398
generally referred as an origin of graph theory.

45
00:03:13,574 --> 00:03:17,158
So we'll try to understand what exactly the Coinsburg

46
00:03:17,174 --> 00:03:21,582
bridge problem is and how Euler has solved that problem and

47
00:03:21,636 --> 00:03:24,670
how the origin of graph theory has been raised.

48
00:03:25,410 --> 00:03:29,274
So first things first. So Coinsburg

49
00:03:29,322 --> 00:03:33,470
bridge has four main areas and seven bridges.

50
00:03:34,130 --> 00:03:38,034
The question asked here was pretty straightforward. Can you

51
00:03:38,072 --> 00:03:42,420
cross each bridge only once and return to the starting points?

52
00:03:43,110 --> 00:03:46,662
So while you are creating bridge, you should keep two things

53
00:03:46,716 --> 00:03:49,958
in mind. First one is you should not

54
00:03:50,044 --> 00:03:53,766
uncross any bridge. Second is

55
00:03:53,868 --> 00:03:57,000
each bridge should not be crossed more than once.

56
00:03:57,710 --> 00:04:00,954
So, Euler insight for this

57
00:04:00,992 --> 00:04:04,374
problem here has the only relevant data is main areas

58
00:04:04,422 --> 00:04:07,974
and bridges connecting them, meaning that Ehler

59
00:04:08,022 --> 00:04:11,850
recognized the relevant constraints are four main areas

60
00:04:11,930 --> 00:04:15,262
and seven bridges. Then he has

61
00:04:15,316 --> 00:04:18,654
drawn a first visual representation of a modern graph which

62
00:04:18,692 --> 00:04:22,582
you can see here. So this graphs basically represents

63
00:04:22,666 --> 00:04:26,590
a set of points which are known as nodes

64
00:04:26,750 --> 00:04:30,500
that connected to set of connecting lines which are known as.

65
00:04:32,310 --> 00:04:36,402
So this was the problem and this was these insight he has shared.

66
00:04:36,546 --> 00:04:40,610
Later, after experimenting with multiple graph, with alternating

67
00:04:40,690 --> 00:04:44,822
the number of nodes and edges, Eulera has abstracted this

68
00:04:44,876 --> 00:04:48,362
problem and created a very generic rule case

69
00:04:48,416 --> 00:04:51,514
on the nodes and relationships that apply to

70
00:04:51,552 --> 00:04:55,260
any connecting system which you can see here.

71
00:04:56,430 --> 00:05:00,746
So you can see the nodes and relationships that can be applied to any connecting

72
00:05:00,778 --> 00:05:04,206
system. So from there, the origin of graph theory has

73
00:05:04,228 --> 00:05:07,354
been demanded for decades. In modern

74
00:05:07,402 --> 00:05:12,074
times, graph algorithm, graph applications and graph

75
00:05:12,122 --> 00:05:15,998
analytics has been booming and exploiting

76
00:05:16,094 --> 00:05:18,020
in multiple industries. Now.

77
00:05:19,750 --> 00:05:23,250
Now, what are networks? Network data

78
00:05:23,320 --> 00:05:26,854
are generated when we consider relationship between two or more

79
00:05:26,892 --> 00:05:29,954
entities in the data, like highways, connections,

80
00:05:30,002 --> 00:05:33,542
cities or friendship between people or their

81
00:05:33,596 --> 00:05:37,978
phone calls. In recent times, a huge number of

82
00:05:38,064 --> 00:05:42,262
network data are being generated and analyzed in multiple

83
00:05:42,326 --> 00:05:45,654
fields. For example, in sociology,

84
00:05:45,782 --> 00:05:49,510
there is a huge interest in analyzing block networks

85
00:05:49,590 --> 00:05:53,482
which can be built based on the citation to look for the discussion

86
00:05:53,546 --> 00:05:56,910
in the structure between political correlations.

87
00:05:57,890 --> 00:06:03,266
Networks has been extensively studied in

88
00:06:03,288 --> 00:06:07,234
the graph theory, an area of mathematics. So networks are known as

89
00:06:07,272 --> 00:06:10,946
a graph in mathematics. In a

90
00:06:10,968 --> 00:06:14,734
nutshell, networks is a system with nodes connected

91
00:06:14,782 --> 00:06:18,182
by linkages. A node can be a

92
00:06:18,236 --> 00:06:21,366
person, firm, industry, or even a

93
00:06:21,388 --> 00:06:24,386
geographical area. Correspondingly,

94
00:06:24,498 --> 00:06:28,810
different types of relationships are represented as linkages.

95
00:06:30,030 --> 00:06:33,110
Each nodes and edges can hold specific properties

96
00:06:33,190 --> 00:06:36,170
which describe its characteristics.

97
00:06:36,910 --> 00:06:40,394
Don't worry if you are not able to catch what exactly the

98
00:06:40,432 --> 00:06:44,046
node is or what exactly the edges and how they

99
00:06:44,068 --> 00:06:47,230
can hold specific properties and all those stuff.

100
00:06:47,380 --> 00:06:51,342
I'll try to explain all these things with an interesting example

101
00:06:51,476 --> 00:06:52,750
in the next slide.

102
00:06:55,270 --> 00:06:58,690
As I mentioned earlier, that network consists of

103
00:06:58,760 --> 00:07:01,726
two main items, nodes and edges,

104
00:07:01,838 --> 00:07:06,802
which generally form a network or graph networks

105
00:07:06,866 --> 00:07:09,910
are also associated with a metadata,

106
00:07:10,250 --> 00:07:13,714
meaning that networks can hold some metadata

107
00:07:13,762 --> 00:07:17,786
with them. Now let's try to understand the

108
00:07:17,808 --> 00:07:21,340
network structure with some interesting example.

109
00:07:23,070 --> 00:07:26,890
So the best part of any conference is

110
00:07:26,960 --> 00:07:30,602
all about networking. Either it can be a physical

111
00:07:30,666 --> 00:07:34,094
conference or a virtual conference. We all

112
00:07:34,132 --> 00:07:38,126
love to do networking. Do you agree with me or not? I'm sure you

113
00:07:38,148 --> 00:07:40,750
will definitely agree with this statement.

114
00:07:43,010 --> 00:07:47,186
In a conference we all love to do networking. We all love to connect people.

115
00:07:47,288 --> 00:07:51,486
We all love to build relationship friendships. So considering

116
00:07:51,518 --> 00:07:54,766
the same conference example. So I'll

117
00:07:54,798 --> 00:07:57,266
try to explain this network structure.

118
00:07:57,458 --> 00:08:00,166
So let's say that Kalyan and Mark,

119
00:08:00,348 --> 00:08:03,814
who are two friends and these are

120
00:08:03,852 --> 00:08:07,126
connected on 20 been January 2022 at

121
00:08:07,228 --> 00:08:11,414
conference conference. So the nodes here are the Kalyan

122
00:08:11,462 --> 00:08:15,066
and mark, and they also have

123
00:08:15,088 --> 00:08:18,486
a metadata associated, which are stored

124
00:08:18,518 --> 00:08:22,006
as a key value pair back to python

125
00:08:22,038 --> 00:08:25,330
dictionaries, where we have a key value pairs.

126
00:08:25,430 --> 00:08:28,746
So the key, these are the age and location,

127
00:08:28,858 --> 00:08:33,474
and the values here are the number and the country and

128
00:08:33,512 --> 00:08:38,014
the conference friendship is represented as a line between nodes.

129
00:08:38,142 --> 00:08:41,810
And it also has a metadata associated with data,

130
00:08:41,880 --> 00:08:45,686
which is known as a date, which meaning that the date

131
00:08:45,788 --> 00:08:48,790
when we actually first connected.

132
00:08:49,290 --> 00:08:52,566
So this is

133
00:08:52,588 --> 00:08:56,370
how our friendship has been built through conflict

134
00:08:56,450 --> 00:09:00,670
network. So that is why I named it as confirm

135
00:09:00,770 --> 00:09:04,666
network. So, coming to the exact point

136
00:09:04,688 --> 00:09:08,582
of a networks structure here, this is exactly how we define

137
00:09:08,726 --> 00:09:12,574
the network structure for any problem when we are

138
00:09:12,612 --> 00:09:16,480
dealing with network analysis in real time.

139
00:09:16,930 --> 00:09:20,366
I hope you got a

140
00:09:20,388 --> 00:09:22,830
better understanding on the network structure.

141
00:09:24,930 --> 00:09:28,286
So here are some real time examples of

142
00:09:28,308 --> 00:09:33,090
a network analysis. First is social networks

143
00:09:34,390 --> 00:09:37,894
like Facebook, Instagram, Twitter. So in

144
00:09:37,932 --> 00:09:41,110
social networks, we model the relationship between

145
00:09:41,180 --> 00:09:44,674
people, for example, we try to identify

146
00:09:44,722 --> 00:09:48,282
these influences in social media, and we model the relationship

147
00:09:48,416 --> 00:09:51,974
between those influences. So those sort of analysis

148
00:09:52,022 --> 00:09:56,134
we do in social networks when it comes to biological

149
00:09:56,182 --> 00:09:59,834
network. So in a human disease network, we study that when

150
00:09:59,872 --> 00:10:03,680
two diseases are linked, at least if they share,

151
00:10:04,370 --> 00:10:07,322
if they try to share at least one common gene.

152
00:10:07,386 --> 00:10:11,070
So those kind of studies we do in human network analysis,

153
00:10:11,570 --> 00:10:14,866
when it comes to financial networks, we study the

154
00:10:14,888 --> 00:10:18,654
correlation between stock based on their daily prices

155
00:10:18,702 --> 00:10:22,574
or any other parameters. And there are also many other examples

156
00:10:22,622 --> 00:10:26,040
in different domains. So all of these

157
00:10:26,410 --> 00:10:30,262
complex network analysis can be understanding better if we

158
00:10:30,316 --> 00:10:34,454
see through the lens of a network. So I

159
00:10:34,492 --> 00:10:38,570
believe that with this, you got a pretty fair

160
00:10:38,640 --> 00:10:41,174
understanding and connection about graphs,

161
00:10:41,222 --> 00:10:44,250
theory, networks and data science.

162
00:10:45,870 --> 00:10:49,910
So next we have is indicators. So, indicators are

163
00:10:50,000 --> 00:10:52,750
very much important in network analysis.

164
00:10:54,050 --> 00:10:57,930
The crucial thing in network analysis is to identify

165
00:10:58,010 --> 00:11:01,706
the important nodes in a network. This is known

166
00:11:01,738 --> 00:11:05,266
as measuring the centrality network. So the

167
00:11:05,288 --> 00:11:09,026
centrality aims to identify the most important node in

168
00:11:09,048 --> 00:11:11,220
a network. So in a simple terms,

169
00:11:13,590 --> 00:11:17,170
how central our node is within patent graph.

170
00:11:17,330 --> 00:11:21,026
So different nodes could be considered as important depending

171
00:11:21,058 --> 00:11:23,830
upon how importance it is defined.

172
00:11:24,410 --> 00:11:28,070
And centrality also has a different flavor and

173
00:11:28,140 --> 00:11:31,414
each flavors become. Each flavor defines the importance

174
00:11:31,462 --> 00:11:35,174
of a node in a different way, which leads to an inequity

175
00:11:35,222 --> 00:11:39,302
of measuring centrality. So some of the most commonly

176
00:11:39,366 --> 00:11:43,118
and often used in real time

177
00:11:43,284 --> 00:11:47,230
flavors are degree centrality, closeness centrality between

178
00:11:47,300 --> 00:11:50,830
a centrality. I'll quickly talk about

179
00:11:50,900 --> 00:11:53,934
all these flavors. Again, I'm not

180
00:11:53,972 --> 00:11:57,442
going into in detail about each of these flavors because it

181
00:11:57,496 --> 00:12:01,166
goes again beyond the scope of the stock degree

182
00:12:01,198 --> 00:12:04,318
centrality. So as the name mentioned, that a nodes

183
00:12:04,334 --> 00:12:07,314
node with a higher degree has a higher centrality,

184
00:12:07,442 --> 00:12:10,690
meaning that the higher the degree of a node

185
00:12:10,770 --> 00:12:14,760
these more important it is in graph. So that is why we call it

186
00:12:15,610 --> 00:12:19,430
most connecting node closeness centrality.

187
00:12:19,510 --> 00:12:24,060
So this centrality calculates the

188
00:12:24,670 --> 00:12:28,694
shortest path between all nodes and assigns

189
00:12:28,742 --> 00:12:31,886
a score for each node based on the

190
00:12:31,908 --> 00:12:35,214
sum of its shortest path. So it is a

191
00:12:35,332 --> 00:12:39,326
fastest communicating node. And finally,

192
00:12:39,428 --> 00:12:42,826
between a centrality measure the number of times a

193
00:12:42,868 --> 00:12:46,526
node lies on the shortest path between other nodes

194
00:12:46,638 --> 00:12:50,654
and it represents the degree of which nodes stands

195
00:12:50,702 --> 00:12:54,698
between each other. So this is the most influential nodes

196
00:12:54,894 --> 00:12:58,758
in a graph. So that's all about

197
00:12:58,924 --> 00:13:03,286
indicators. And next is the

198
00:13:03,308 --> 00:13:06,678
most awaiting and important topic in our talk,

199
00:13:06,764 --> 00:13:11,122
which is a financial evolution. Networks financial

200
00:13:11,186 --> 00:13:16,140
networks analysis been on the research agenda since the financial crisis of 2008.

201
00:13:16,510 --> 00:13:19,922
So the crisis has played a huge role

202
00:13:20,006 --> 00:13:22,830
in leveraging the understanding of a financial network.

203
00:13:23,410 --> 00:13:27,342
So after 2008 crisis, many economists have

204
00:13:27,396 --> 00:13:31,534
come around to the view the very network architecture of

205
00:13:31,572 --> 00:13:35,790
a financial systems plays a central role in shaping

206
00:13:35,870 --> 00:13:39,410
system risk. In fact, many of

207
00:13:39,480 --> 00:13:43,010
ensuing policy actions has been motivated from

208
00:13:43,080 --> 00:13:46,422
these insights. So as a result of

209
00:13:46,476 --> 00:13:49,654
those insights, network science concepts has

210
00:13:49,692 --> 00:13:53,670
been cross applied to finance field after 2008

211
00:13:53,740 --> 00:13:57,554
crisis. From there, financial networks has got

212
00:13:57,612 --> 00:14:01,910
into a full swing and it has then become an active topic

213
00:14:01,990 --> 00:14:05,610
not only in data science, but also in finance.

214
00:14:06,750 --> 00:14:10,782
There are some major areas of interest and applications for the study

215
00:14:10,836 --> 00:14:14,394
of financial networks. For example, interbank networks,

216
00:14:14,442 --> 00:14:18,094
stock correlation networks, agent based models, and there are also many

217
00:14:18,132 --> 00:14:21,450
other different applications in financial networks.

218
00:14:21,610 --> 00:14:25,342
So in our talks, we are dealing with stock correlation

219
00:14:25,406 --> 00:14:29,042
networks. So we'll see the stock correlation networks in real

220
00:14:29,096 --> 00:14:33,154
time. And there are also several studies and research has

221
00:14:33,192 --> 00:14:37,174
been conducted for studying the stock correlation network. And the

222
00:14:37,212 --> 00:14:41,062
research and studies are still on and they're also trying

223
00:14:41,116 --> 00:14:44,882
to find out even more better techniques

224
00:14:44,946 --> 00:14:48,362
for studying the stock correlation networks. So far,

225
00:14:48,416 --> 00:14:51,626
the stock correlation network has proven its efficiency in

226
00:14:51,648 --> 00:14:54,870
predicting market movement, which is a very positive

227
00:14:54,950 --> 00:14:58,890
news and great in financial networks.

228
00:14:59,870 --> 00:15:03,582
Now, as we all know, that financial data is a very

229
00:15:03,636 --> 00:15:06,894
complex data. So how we actually deal with

230
00:15:06,932 --> 00:15:10,302
this complex data or know how we build

231
00:15:10,356 --> 00:15:13,140
better networks with this financial data.

232
00:15:13,670 --> 00:15:17,342
So this is where the power of Python

233
00:15:17,406 --> 00:15:20,754
graphs come into the picture. Now,

234
00:15:20,872 --> 00:15:23,986
why Python? So Python is a

235
00:15:24,008 --> 00:15:28,870
general purpose and high level programming language whose

236
00:15:30,170 --> 00:15:33,350
design philosophy emphasize nodes, readability,

237
00:15:33,850 --> 00:15:37,730
clear syntax, dynamic typing and

238
00:15:37,820 --> 00:15:41,990
strong online community and numerous libraries

239
00:15:42,150 --> 00:15:45,866
and fast prototyping. And it

240
00:15:45,888 --> 00:15:49,210
also has expressive features. So that is why

241
00:15:49,280 --> 00:15:52,606
Python is so powerful. Now in

242
00:15:52,628 --> 00:15:56,670
order to create a powerful graphs, we need to have a software.

243
00:15:57,010 --> 00:16:00,650
So network X is a very good software,

244
00:16:00,730 --> 00:16:05,330
a high productive software for doing a complex network analysis.

245
00:16:06,310 --> 00:16:10,210
And this software is very flexible where

246
00:16:10,360 --> 00:16:14,066
in roots can be a hashable subjects in Python. So it

247
00:16:14,088 --> 00:16:18,070
can be a text, images or XML records

248
00:16:18,650 --> 00:16:22,518
and it just can be an arbitrary data. So maybe it can

249
00:16:22,524 --> 00:16:26,038
be a weights or no realtime change data.

250
00:16:26,204 --> 00:16:30,134
So this software is a treasure true of a graph algorithm,

251
00:16:30,182 --> 00:16:34,026
meaning that we can build many standard graph algorithm and

252
00:16:34,048 --> 00:16:39,142
we can solve many complex problems with this software.

253
00:16:39,286 --> 00:16:42,720
And it is very easy to use.

254
00:16:43,890 --> 00:16:47,946
So I think I have given enough download

255
00:16:48,058 --> 00:16:51,242
on theoretical part. Let's straightaway

256
00:16:51,306 --> 00:16:55,262
jump into action to see some real time financial

257
00:16:55,326 --> 00:16:58,930
network analysis. Let me quickly

258
00:16:59,080 --> 00:17:02,050
switch to my code notebook.

259
00:17:06,410 --> 00:17:10,262
Okay. All right, so here is my

260
00:17:10,316 --> 00:17:11,350
code notebook.

261
00:17:14,810 --> 00:17:18,414
So here is a code notebook which I have created

262
00:17:18,482 --> 00:17:22,406
for this demonstration. So considering

263
00:17:22,438 --> 00:17:25,962
the time constraint, so I have executed the entire code.

264
00:17:26,096 --> 00:17:29,690
But don't worry, I'll explain each and every point in the code so that

265
00:17:29,760 --> 00:17:32,750
you'll get a better understanding of this concept.

266
00:17:33,090 --> 00:17:37,658
So installed a couple of libraries to satisfy this demonstration.

267
00:17:37,754 --> 00:17:41,354
So installed network x. And I've also installed Yahoo

268
00:17:41,402 --> 00:17:45,490
finance to crawl some data from Yahoo finance.

269
00:17:46,790 --> 00:17:50,018
So basically this notebook has been categorized into

270
00:17:50,104 --> 00:17:54,334
two sections. In the first section we'll take some sample stocks

271
00:17:54,382 --> 00:17:58,198
and do basic network analysis. In the

272
00:17:58,204 --> 00:18:02,226
second section we'll take some asset prices and we'll deep

273
00:18:02,258 --> 00:18:06,566
dive into financial network analysis and

274
00:18:06,748 --> 00:18:10,646
build some interesting visuals. And we'll

275
00:18:10,678 --> 00:18:14,006
find out some interesting insights from those visuals.

276
00:18:14,198 --> 00:18:17,658
So let's start with these section one now.

277
00:18:17,744 --> 00:18:21,342
So as usual, we have imported necessary subjects here.

278
00:18:21,396 --> 00:18:25,054
So a couple of libraries have imported and then I'm loading my

279
00:18:25,092 --> 00:18:28,666
data here. So for the first equity,

280
00:18:28,858 --> 00:18:32,954
so I created a variable called ticker here. And then I'm

281
00:18:33,002 --> 00:18:36,426
creating a ticker object and passing a ticker called Tesla.

282
00:18:36,458 --> 00:18:40,066
So these equity, with the first equity which I've selected here

283
00:18:40,088 --> 00:18:43,666
is a Tesla. So once I execute this,

284
00:18:43,768 --> 00:18:47,398
we got a ticker object for Tesla. So with this ticker object,

285
00:18:47,484 --> 00:18:50,920
we can access the entire information related to.

286
00:18:52,570 --> 00:18:55,650
So I've created a variable again, the Tesla,

287
00:18:55,730 --> 00:18:59,302
and then I'm passing my

288
00:18:59,356 --> 00:19:02,454
ticket object and I want to access these

289
00:19:02,492 --> 00:19:05,794
institutional holders of the Tesla. So once I execute

290
00:19:05,842 --> 00:19:09,930
this, there we got institutional holders

291
00:19:10,050 --> 00:19:12,640
and its shares and the values of the.

292
00:19:14,370 --> 00:19:17,518
So all these companies are the institutional holders of

293
00:19:17,524 --> 00:19:21,006
the Tesla. So meaning that all these companies

294
00:19:21,108 --> 00:19:24,446
have some part of ownership in Tesla

295
00:19:24,478 --> 00:19:27,874
stock. Now next, what I'm doing is

296
00:19:27,912 --> 00:19:31,662
I'm adding a new column to my data frame which represented

297
00:19:31,726 --> 00:19:33,380
the ticker symbol of.

298
00:19:34,810 --> 00:19:38,822
So the reason behind for adding these company column is

299
00:19:38,956 --> 00:19:42,870
for easy mapping purpose when we build a network graphs,

300
00:19:44,170 --> 00:19:49,946
let's say. So what I mean exactly here is for

301
00:19:49,968 --> 00:19:54,714
example if BlackRock is holding so much of this

302
00:19:54,752 --> 00:19:58,698
much of shares and it has this much of a value and

303
00:19:58,784 --> 00:20:02,574
this company is mapped to Tesla. So for

304
00:20:02,612 --> 00:20:06,314
that kind of understanding level. So I'm creating a company column

305
00:20:06,362 --> 00:20:10,094
here. So this is our clear data frame on

306
00:20:10,132 --> 00:20:13,662
the Tesla stock. Next I'm taking another equity

307
00:20:13,726 --> 00:20:17,010
under stock. So this time I'm selecting Google

308
00:20:17,080 --> 00:20:20,500
stock here. So again I have created a ticker object

309
00:20:21,270 --> 00:20:25,326
for Google. And then again I'm requesting

310
00:20:25,358 --> 00:20:28,866
the institutional holds of the Google. And again I'm

311
00:20:28,898 --> 00:20:32,918
also adding the company column to this Google

312
00:20:33,004 --> 00:20:37,062
so that we got a clear entire

313
00:20:37,116 --> 00:20:41,450
data frame of the institutional holders of Google and its respective

314
00:20:42,190 --> 00:20:45,878
cool. So then next what I'm doing is I'm combining

315
00:20:45,894 --> 00:20:50,330
these two data frames. So I'm combining both Tesla and Google

316
00:20:50,400 --> 00:20:53,490
data frames with pandas concrete

317
00:20:53,510 --> 00:20:57,098
function. So I create a variable called combined and I'm

318
00:20:57,114 --> 00:21:00,826
calling a pandas concrete function. I'm passing these two data frames.

319
00:21:00,938 --> 00:21:04,450
So once I executed this so that we got can entire

320
00:21:04,520 --> 00:21:08,142
data frame of both Google and Tesla and its respective

321
00:21:08,206 --> 00:21:11,506
institutional. So far it

322
00:21:11,528 --> 00:21:15,394
is good. So we'll start with the basics

323
00:21:15,442 --> 00:21:18,200
of network analysis here.

324
00:21:20,250 --> 00:21:23,670
So I've created a variable called p and

325
00:21:23,740 --> 00:21:26,982
then I'm passing a function here called nx from

326
00:21:27,036 --> 00:21:30,970
underscore pandas edge list. So network X has a pretty

327
00:21:31,040 --> 00:21:34,790
handy function when we are dealing with the data frame

328
00:21:34,870 --> 00:21:38,442
which is called nx from underscore panels edge list where

329
00:21:38,496 --> 00:21:42,522
I'm passing my data frame and I'm also giving my source

330
00:21:42,586 --> 00:21:46,426
and also giving my target here. The source here is institutional

331
00:21:46,458 --> 00:21:49,726
folders and the target here is a company. So we

332
00:21:49,748 --> 00:21:53,694
want to map against each company

333
00:21:53,812 --> 00:21:56,030
and its institutional folders.

334
00:21:56,790 --> 00:22:00,382
So once I executed this, we got a network graph

335
00:22:00,446 --> 00:22:04,190
object here and you can also see the nodes

336
00:22:04,270 --> 00:22:08,146
in our graphs. So the nodes here are the Tesla.

337
00:22:08,258 --> 00:22:11,874
The node here is these Tesla and its respective institutional

338
00:22:11,922 --> 00:22:15,554
holders. Respective institutional holders of the Tesla.

339
00:22:15,682 --> 00:22:19,290
And if you also see the edges and you can also see

340
00:22:19,360 --> 00:22:22,454
the Tesla. And the vanguard

341
00:22:22,502 --> 00:22:25,798
is for TeSLa. And the vanguard is also for booming.

342
00:22:25,894 --> 00:22:29,622
So these are the edges list of these our graph.

343
00:22:29,766 --> 00:22:33,482
So finally we'll plot our network graph. So network

344
00:22:33,546 --> 00:22:36,926
X has a function for plotting is

345
00:22:36,948 --> 00:22:40,526
an exit draw. These we need to pass the edges list which we

346
00:22:40,548 --> 00:22:44,980
have created, which is called p. And I'm also passing a labels called

347
00:22:45,750 --> 00:22:49,278
true, which means that I want labels to be showcased

348
00:22:49,374 --> 00:22:53,426
on my graph. So once I plot this,

349
00:22:53,528 --> 00:22:57,134
you can see that you can see a network

350
00:22:57,182 --> 00:23:00,926
graph here. So we got our nodes

351
00:23:00,958 --> 00:23:05,654
and engines. But what we can do is for

352
00:23:05,692 --> 00:23:09,850
me it is very easy to understand what are nodes and what are edges

353
00:23:10,190 --> 00:23:14,234
in this graph. But if I show you this

354
00:23:14,272 --> 00:23:17,706
point of time, maybe if I show you or maybe any

355
00:23:17,808 --> 00:23:21,454
person who is just looking at these first time of this

356
00:23:21,492 --> 00:23:25,562
graphs so he don't understand what are nodes and what are edges

357
00:23:25,706 --> 00:23:29,146
in this graph. So for that, what I'm

358
00:23:29,178 --> 00:23:32,814
doing is I'll make this plot much clearer by adding

359
00:23:32,862 --> 00:23:36,590
colors here. So I'm adding colors.

360
00:23:36,670 --> 00:23:39,860
So for that what I'm doing is I've created an empty list

361
00:23:40,870 --> 00:23:44,482
called colors where I'm quickly doing a

362
00:23:44,536 --> 00:23:48,246
loop here that whether if my

363
00:23:48,268 --> 00:23:52,774
combined data friend company has values, then I

364
00:23:52,812 --> 00:23:55,894
want that to be a red color and it should be appended to my

365
00:23:55,932 --> 00:23:59,658
color list. Otherwise it should be showcased as a green.

366
00:23:59,824 --> 00:24:02,938
So again we are plotting this

367
00:24:03,104 --> 00:24:07,306
final plot draw function where I'm passing my

368
00:24:07,408 --> 00:24:11,114
edge list labels. This time I'm also passing these

369
00:24:11,152 --> 00:24:14,766
node colors because we have correlated a list here, colors. So I'm passing the

370
00:24:14,788 --> 00:24:18,542
node colors equal to colors. So once I execute this code,

371
00:24:18,596 --> 00:24:22,734
you can see that. So our nodes are in

372
00:24:22,772 --> 00:24:26,066
red colors. So nodes here are the Google and Tesla, and our

373
00:24:26,088 --> 00:24:29,426
edges are all the institutional holders. So you

374
00:24:29,448 --> 00:24:33,374
can clearly see that TeSLa and its respective institutional holders,

375
00:24:33,502 --> 00:24:36,866
Google and its respective institutional holders.

376
00:24:37,058 --> 00:24:40,834
So with this, what we can do is we can also further expand

377
00:24:40,882 --> 00:24:44,534
our analysis by identifying who are

378
00:24:44,572 --> 00:24:48,442
the majority institutional holders in Tesla or

379
00:24:48,496 --> 00:24:51,834
Google. And we can also do some

380
00:24:51,872 --> 00:24:55,194
correlation and compare between

381
00:24:55,232 --> 00:24:58,794
the institutional holders. And we can also identify the top five

382
00:24:58,832 --> 00:25:02,750
or non top ten institutional holders in Tesla or

383
00:25:02,820 --> 00:25:05,726
Google. For example, if you see here,

384
00:25:05,908 --> 00:25:12,510
Tesla is holding the management group LLP and LLP,

385
00:25:12,850 --> 00:25:16,122
but the management group LLP institutional

386
00:25:16,186 --> 00:25:19,474
may not be these top five or top ten. So you can identify those

387
00:25:19,512 --> 00:25:22,990
kind of insights if you further expand your analysis.

388
00:25:23,150 --> 00:25:27,222
But for now, we keep things simple. And my

389
00:25:27,276 --> 00:25:30,694
main objective for this section is to show you

390
00:25:30,892 --> 00:25:34,166
how we can do basic network analysis with

391
00:25:34,188 --> 00:25:35,830
the financial stock.

392
00:25:37,950 --> 00:25:41,466
But definitely what I can suggest you is you can definitely give

393
00:25:41,488 --> 00:25:45,146
it a shot and try

394
00:25:45,168 --> 00:25:49,034
to analyze some interesting insights from

395
00:25:49,072 --> 00:25:52,638
these graphs. So with this, I'll conclude my

396
00:25:52,804 --> 00:25:56,174
first section part. And then now

397
00:25:56,212 --> 00:25:59,950
we'll jump into our second section

398
00:26:04,310 --> 00:26:07,554
in this section. So we're taking

399
00:26:07,672 --> 00:26:11,026
these ETF prices, which are nothing but SS prices over a

400
00:26:11,048 --> 00:26:14,062
period of time, and we dive into financial network

401
00:26:14,126 --> 00:26:18,022
analysis and we'll come through with

402
00:26:18,156 --> 00:26:21,874
very meaningful visuals and insights from those network

403
00:26:21,922 --> 00:26:24,982
graphs, as usual. Again,

404
00:26:25,036 --> 00:26:28,540
I've imported can suspect libraries here for this

405
00:26:28,990 --> 00:26:32,362
case. And the objective from this data set

406
00:26:32,416 --> 00:26:36,118
is to identify the correlation between asset classes.

407
00:26:36,214 --> 00:26:39,290
And so for that, in order to achieve that,

408
00:26:39,360 --> 00:26:43,450
we need to analyze and visualize the relationship between our

409
00:26:43,520 --> 00:26:48,618
asset classes. So, which we'll be doing now, and you'll

410
00:26:48,634 --> 00:26:52,474
see it in a while. So again, I am loading

411
00:26:52,522 --> 00:26:55,922
the data here. So I created a label, sorry,

412
00:26:55,976 --> 00:26:59,570
variable called ETF, where I'm reading my data,

413
00:26:59,720 --> 00:27:03,380
asset price data, and once I execute this,

414
00:27:03,910 --> 00:27:07,746
so I'll got my ETF prices

415
00:27:07,858 --> 00:27:11,686
here. So ETF is nothing but can exchange traded fund.

416
00:27:11,788 --> 00:27:15,554
So it is an indicator of a security. So ETF

417
00:27:15,602 --> 00:27:18,850
may including different type of investment

418
00:27:18,930 --> 00:27:22,870
securities. Like it includes stocks, it includes

419
00:27:22,950 --> 00:27:25,206
bonds, it includes commodities,

420
00:27:25,398 --> 00:27:28,634
currencies, or also some type

421
00:27:28,672 --> 00:27:30,720
of different investments as well.

422
00:27:32,690 --> 00:27:36,282
All those kind of securities assets

423
00:27:36,346 --> 00:27:39,120
are included in exchange rate fund data.

424
00:27:41,570 --> 00:27:45,774
If you see here, we have a 40 columns and 1013

425
00:27:45,822 --> 00:27:49,774
rows, meaning that we have 40 different asset classes

426
00:27:49,902 --> 00:27:53,934
and we have a 1013 rows for each asset

427
00:27:53,982 --> 00:27:57,142
class. Okay, cool. So next is

428
00:27:57,196 --> 00:28:00,966
we are converting these time to eight subjects. So often when

429
00:28:00,988 --> 00:28:03,240
we are dealing with a timesheet data,

430
00:28:04,890 --> 00:28:09,062
we first initially need to check that our

431
00:28:09,116 --> 00:28:12,474
date is in these right data type and we need to

432
00:28:12,512 --> 00:28:17,594
set the date as

433
00:28:17,632 --> 00:28:20,842
an index. So this is exactly what I'm doing here.

434
00:28:20,896 --> 00:28:24,638
So I'm creating efs date these again

435
00:28:24,724 --> 00:28:28,554
passing a function called PD two underscore datatime

436
00:28:28,602 --> 00:28:32,350
function where I'm converting the

437
00:28:32,500 --> 00:28:35,422
date column from an object which is in a string format,

438
00:28:35,486 --> 00:28:39,234
and I'm converting that to date time object and

439
00:28:39,272 --> 00:28:42,574
then I'm setting the date column as an index.

440
00:28:42,622 --> 00:28:49,382
So once I execute this, so you can see here that now

441
00:28:49,436 --> 00:28:53,202
the date is can index and we can see all our asset classes.

442
00:28:53,346 --> 00:28:56,840
Cool. And if you want to understand

443
00:28:58,910 --> 00:29:02,042
what is the start and end period of our data,

444
00:29:02,176 --> 00:29:05,834
you can see that our data starts from no

445
00:29:05,952 --> 00:29:09,366
11th January 2013 and it ends

446
00:29:09,398 --> 00:29:12,746
with December 10,

447
00:29:12,858 --> 00:29:14,270
2017.

448
00:29:16,530 --> 00:29:19,726
We have asset prices for

449
00:29:19,828 --> 00:29:23,454
this period. Cool. So next,

450
00:29:23,492 --> 00:29:27,678
what we are doing is we are converting into lock daily returns.

451
00:29:27,854 --> 00:29:31,906
So what is a log return? What do you mean by log return? So it

452
00:29:31,928 --> 00:29:36,230
is a way of calculating the rate of return on investment

453
00:29:38,330 --> 00:29:42,306
before we actually proceed. For calculating

454
00:29:42,418 --> 00:29:46,630
correlation matrix and comparing correlation between assets,

455
00:29:47,050 --> 00:29:50,938
we actually first need to convert our asset prices into

456
00:29:51,024 --> 00:29:54,154
daily log return. So the reason behind for

457
00:29:54,192 --> 00:29:58,234
doing it

458
00:29:58,272 --> 00:30:01,290
allows us to compare the expected return

459
00:30:01,360 --> 00:30:05,434
between two assets much easily. So that is the reason why we are converting

460
00:30:05,482 --> 00:30:08,974
our no asset prices into daily log return.

461
00:30:09,172 --> 00:30:13,310
So what I'm doing is I'm creating an empty data frame for log

462
00:30:13,460 --> 00:30:17,006
written these what I'm doing is we want

463
00:30:17,028 --> 00:30:20,830
to calculate daily log return on each asset.

464
00:30:21,190 --> 00:30:24,546
So what I'm doing is I'm quickly looping each columns in

465
00:30:24,568 --> 00:30:28,534
my data frame and calculating a daily log written in

466
00:30:28,572 --> 00:30:32,040
my data frame. And finally what I'm using is

467
00:30:33,770 --> 00:30:37,158
finally I'm passing all the daily log returns to my

468
00:30:37,324 --> 00:30:41,174
log written data frame. So once if I execute

469
00:30:41,222 --> 00:30:44,700
this, you can see that we got a

470
00:30:45,950 --> 00:30:49,526
daily log written values for all our asset classes.

471
00:30:49,638 --> 00:30:53,654
So you can see that different daily log written

472
00:30:53,702 --> 00:30:57,386
values for all our asset classes. Cool. Now we are good to proceed

473
00:30:57,418 --> 00:31:01,498
for calculating correlation matrix. So I've

474
00:31:01,514 --> 00:31:05,106
created a variable called correlation matrix. And what we are

475
00:31:05,128 --> 00:31:09,362
doing is these, we are doing a pairwise correlation by

476
00:31:09,416 --> 00:31:12,450
using a built in pandas function called core.

477
00:31:13,990 --> 00:31:18,562
So I am calling my log written data frame and then I'm

478
00:31:18,706 --> 00:31:22,742
passing a function called core. So once I execute this,

479
00:31:22,876 --> 00:31:27,230
so you can see the correlation values

480
00:31:27,410 --> 00:31:31,242
of our asset classes instead of looking

481
00:31:31,296 --> 00:31:34,458
at this correlation values instead of looking at this number.

482
00:31:34,544 --> 00:31:38,422
So let's try to visualize this correlation matrix

483
00:31:38,486 --> 00:31:42,474
and try to understand the

484
00:31:42,512 --> 00:31:44,490
insights through division.

485
00:31:45,970 --> 00:31:49,374
So has we all know that the traditional way

486
00:31:49,412 --> 00:31:53,406
of visualizing the correlation matrix is usually

487
00:31:53,508 --> 00:31:57,154
heat map. So this is exactly how I do in real time.

488
00:31:57,192 --> 00:32:00,846
So when comparing correlation matrix, simply I plot through the heat

489
00:32:00,878 --> 00:32:04,078
map and I try to analyze the correlations

490
00:32:04,254 --> 00:32:08,390
which are positive and which are negative correlations. So that's exactly

491
00:32:08,460 --> 00:32:11,398
how I do. So I did the same thing here.

492
00:32:11,564 --> 00:32:16,646
So written some HTML styling for

493
00:32:16,668 --> 00:32:20,886
my cluster map. So what I'm doing is I've taken a cBond cluster map

494
00:32:20,998 --> 00:32:25,194
which visualize the matrix as a heat map and it also

495
00:32:25,312 --> 00:32:29,206
identifies the cluster

496
00:32:29,238 --> 00:32:33,082
of our assets so that we can see that which assets

497
00:32:33,146 --> 00:32:36,714
are similar to each other. So we can clearly see that which assets

498
00:32:36,762 --> 00:32:39,710
are behaving are close or similar to each other.

499
00:32:39,780 --> 00:32:43,860
So we'll see that here

500
00:32:45,350 --> 00:32:47,460
once I plot this,

501
00:32:47,990 --> 00:32:52,354
so we can clearly see that we

502
00:32:52,392 --> 00:32:56,034
got our cluster heat map on correlation between ETF

503
00:32:56,082 --> 00:32:57,270
price returns.

504
00:33:00,330 --> 00:33:02,280
So first things first.

505
00:33:02,970 --> 00:33:06,770
So the heat map is color coded

506
00:33:06,850 --> 00:33:09,946
here and you can see

507
00:33:10,048 --> 00:33:13,994
the dark blue color which is highlighting here indicates that

508
00:33:14,032 --> 00:33:17,622
there's a strong correlation where the correlation

509
00:33:17,686 --> 00:33:21,306
equals to value equals to one. And the yellow

510
00:33:21,338 --> 00:33:25,402
color here clearly highlights that it is uncorrelated.

511
00:33:25,466 --> 00:33:30,366
Where the correlation value equals to zero and the

512
00:33:30,388 --> 00:33:33,614
color with the red, it is a negative correlation

513
00:33:33,662 --> 00:33:37,362
where the correlation value equals to minus one.

514
00:33:37,496 --> 00:33:41,154
And if you also observe this meat map, we can

515
00:33:41,192 --> 00:33:45,140
see some interesting insights here. For example,

516
00:33:46,630 --> 00:33:51,022
ETFs like ETF assets like EwI,

517
00:33:51,166 --> 00:33:54,840
EWQ, Em, EWJ are

518
00:33:55,370 --> 00:33:58,746
all these are highly correlated and

519
00:33:58,848 --> 00:34:01,994
you can see that they are close to each other.

520
00:34:02,192 --> 00:34:06,870
Just like if you can also see that EWB

521
00:34:06,950 --> 00:34:10,842
and NLU, so all these are strongly correlated

522
00:34:10,906 --> 00:34:14,638
assets. And if you see

523
00:34:14,724 --> 00:34:18,766
the ETF like Pxx which

524
00:34:18,788 --> 00:34:22,254
is another ETF asset, where you can

525
00:34:22,292 --> 00:34:26,622
see that it is negatively correlated into equities

526
00:34:26,686 --> 00:34:30,274
here, negative correlated into equities. And if you

527
00:34:30,312 --> 00:34:33,534
also look at that FxY

528
00:34:33,582 --> 00:34:36,610
currency here, FXC which is japanese,

529
00:34:36,770 --> 00:34:41,190
you can also see the japanese currency which is moving

530
00:34:41,260 --> 00:34:44,918
into the opposite direction here. And you

531
00:34:44,924 --> 00:34:48,678
can also see that all these are riskier

532
00:34:48,854 --> 00:34:52,410
asset classes. Riskier asset classes.

533
00:34:54,510 --> 00:34:58,390
The heat map here is conveying one dimension

534
00:34:58,470 --> 00:35:02,702
information. We are

535
00:35:02,756 --> 00:35:06,094
only able to see the distance of these

536
00:35:06,292 --> 00:35:08,430
correlation between assets,

537
00:35:10,050 --> 00:35:14,018
but if we want to see how

538
00:35:14,104 --> 00:35:18,178
the volatility between assets and

539
00:35:18,264 --> 00:35:22,050
how the analyzed return between asset class are performing,

540
00:35:22,710 --> 00:35:26,046
so we are not able to find such things in this heat

541
00:35:26,078 --> 00:35:29,762
map. So what we can do here is we'll

542
00:35:29,826 --> 00:35:33,574
take all these insights and findings from

543
00:35:33,612 --> 00:35:37,762
this heat map and we'll further investigate

544
00:35:37,906 --> 00:35:41,730
these findings and insights

545
00:35:41,890 --> 00:35:45,382
with network graphs, and we'll try to build some meaningful

546
00:35:45,446 --> 00:35:49,194
visuals and find insights in a more

547
00:35:49,392 --> 00:35:53,230
meaningful way. Let's see

548
00:35:53,300 --> 00:35:54,480
those things now.

549
00:35:58,290 --> 00:36:02,302
Next we'll see the financial network analysis using network tech.

550
00:36:02,356 --> 00:36:06,066
So as I mentioned, that non networks is one of the most

551
00:36:06,168 --> 00:36:10,430
popular python library for doing complex network analysis.

552
00:36:10,590 --> 00:36:14,306
So in order to analyze correlations in

553
00:36:14,328 --> 00:36:17,880
a network, so we need to convert our

554
00:36:18,250 --> 00:36:22,054
correlation matrix into an edge list so

555
00:36:22,092 --> 00:36:25,922
that we can easily create graphs and compare the correlation.

556
00:36:25,986 --> 00:36:30,774
So what I'm doing here is I'm converting the correlation

557
00:36:30,822 --> 00:36:34,038
matrix into can edges list and renaming the column. So created

558
00:36:34,054 --> 00:36:37,302
a variable called edges where I'm converting through converting

559
00:36:37,366 --> 00:36:41,182
my correlation matrix and resetting its index as well,

560
00:36:41,236 --> 00:36:44,826
and then also renaming the columns. So I'm

561
00:36:44,858 --> 00:36:48,254
giving different nodes for our asset classes, first one,

562
00:36:48,292 --> 00:36:50,970
SS two and correlation,

563
00:36:51,130 --> 00:36:54,594
and then finally if we execute this.

564
00:36:54,712 --> 00:36:58,802
So you can see that our edge list data

565
00:36:58,856 --> 00:37:03,374
frame here. So the nodes here are asset

566
00:37:03,422 --> 00:37:07,630
classes, and the connection between nodes which are known as edges,

567
00:37:07,790 --> 00:37:12,040
are these numeric value, which is a correlation value here,

568
00:37:13,850 --> 00:37:17,240
and these values are corresponding to the correlation between their

569
00:37:18,090 --> 00:37:20,280
respective paid nodes here.

570
00:37:21,930 --> 00:37:25,434
So we have successfully created an edges list now. So with

571
00:37:25,472 --> 00:37:28,890
this address we can create a graph

572
00:37:30,910 --> 00:37:34,826
I'm creating a variable called g, as you have seen earlier

573
00:37:34,858 --> 00:37:38,666
in the first section about this function called x from underscore

574
00:37:38,698 --> 00:37:42,960
pandas edges list, which is a function which takes

575
00:37:45,110 --> 00:37:48,946
function which helps us to create a graph from

576
00:37:49,048 --> 00:37:52,834
the edge list. So these, I'm passing my edges list here,

577
00:37:52,952 --> 00:37:56,762
which is known as edges, and I'm also passing my source and target.

578
00:37:56,926 --> 00:38:00,402
This is true. I'm also passing the sources

579
00:38:00,466 --> 00:38:03,718
here, the target edges attribute, which is a correlation here.

580
00:38:03,804 --> 00:38:07,602
And if you look at the information of our graphs here,

581
00:38:07,676 --> 00:38:11,786
so our graph contains 39 nodes and 741

582
00:38:11,808 --> 00:38:15,194
edges, meaning that we

583
00:38:15,232 --> 00:38:20,298
have 39 asset classes and these

584
00:38:20,464 --> 00:38:24,634
741 connections for those asset

585
00:38:24,682 --> 00:38:28,922
classes. Now let's visualize

586
00:38:28,986 --> 00:38:32,438
our network. What I'm doing is I'm

587
00:38:32,554 --> 00:38:36,418
creating a subplots here, creating a subjects here,

588
00:38:36,504 --> 00:38:40,434
and also passing some maplot properties. Probably you can

589
00:38:40,472 --> 00:38:44,500
break it when you export the documentation and also

590
00:38:44,870 --> 00:38:48,698
creating layouts here. So I'm creating a different layouts

591
00:38:48,734 --> 00:38:53,154
here and I want all these layouts

592
00:38:53,202 --> 00:38:56,662
to be plotted on my graph separately. So for that

593
00:38:56,716 --> 00:38:59,658
I am quickly writing a conditional statement here.

594
00:38:59,824 --> 00:39:04,646
And then I'm calling my network plotting

595
00:39:04,678 --> 00:39:08,166
function which is nx draft. I am passing my edges

596
00:39:08,198 --> 00:39:11,614
list and I'm also passing the labels here and

597
00:39:11,652 --> 00:39:14,910
also giving the nodes size. I'm also giving a node color.

598
00:39:14,980 --> 00:39:19,310
So probably you can check all these nodes colors and edit colors

599
00:39:22,210 --> 00:39:25,810
in the documentation page or maybe you can find it in Google

600
00:39:25,880 --> 00:39:29,278
has well, and giving a layout

601
00:39:29,374 --> 00:39:33,230
and also giving can access here. And I'm also giving a title

602
00:39:33,390 --> 00:39:37,314
for each of the layouts. And once I execute

603
00:39:37,362 --> 00:39:41,080
this, you can see

604
00:39:42,570 --> 00:39:46,454
the four different layout plots on each

605
00:39:46,492 --> 00:39:49,514
of these graph. So let me quickly show you

606
00:39:49,552 --> 00:39:52,906
this. So you

607
00:39:52,928 --> 00:39:56,838
can see that we got a circular layout, we got a random layout,

608
00:39:56,934 --> 00:40:01,210
and we got a string layout, and we also got a spec layout.

609
00:40:02,850 --> 00:40:06,826
All these plots look pretty fancy if you observe

610
00:40:06,858 --> 00:40:10,302
them and they looks pretty fancy, but they

611
00:40:10,356 --> 00:40:13,998
actually fail to convey the information which we are actually

612
00:40:14,084 --> 00:40:17,230
looking from our network graph. So the main

613
00:40:17,300 --> 00:40:21,200
thing which we are looking in our network graphs is

614
00:40:22,130 --> 00:40:25,590
to be able to identify the correlation in

615
00:40:25,740 --> 00:40:29,426
between assets. But these plots are actually failing

616
00:40:29,458 --> 00:40:32,914
to failing or fail to showcase

617
00:40:32,962 --> 00:40:36,454
them. Exactly. So what we can do is we can

618
00:40:36,492 --> 00:40:40,454
improve these plots. We can improve these plots by taking certain steps

619
00:40:40,502 --> 00:40:44,746
and approaches so that we

620
00:40:44,768 --> 00:40:48,406
can build a meaningful network graph. And so we'll

621
00:40:48,438 --> 00:40:54,154
see how we can do that. Now firstly,

622
00:40:54,202 --> 00:40:57,534
I'm removing edges. So I really want to cut these

623
00:40:57,572 --> 00:41:01,310
unwanted edges in the graph so that I know my graph shows

624
00:41:01,380 --> 00:41:04,906
more meaningful information. So for that, in order to remove

625
00:41:04,938 --> 00:41:08,658
the edges. What I'm using is I'm giving a minimum correlation point

626
00:41:08,824 --> 00:41:12,818
to remove the edges in the graph. So the point here is the 0.5

627
00:41:12,984 --> 00:41:16,742
which I'm taking. And then again I'm creating a new edge list

628
00:41:16,796 --> 00:41:20,182
here where I'm passing my edges source and

629
00:41:20,236 --> 00:41:24,118
target as well. And then I'm creating a list to store

630
00:41:24,204 --> 00:41:27,846
the remote edges here. So maybe you can also use it

631
00:41:27,868 --> 00:41:32,026
in. But again I'm creating here I

632
00:41:32,048 --> 00:41:36,060
want to store everything in these remote list.

633
00:41:36,830 --> 00:41:40,214
So for that what I'm doing is I'm quickly looping through

634
00:41:40,272 --> 00:41:44,414
my edge list and finding out the correlation which are below

635
00:41:44,532 --> 00:41:48,126
my correlation point. So if my absolute

636
00:41:48,228 --> 00:41:51,520
correlation is less than my given point,

637
00:41:52,050 --> 00:41:55,598
I want all the edges to be

638
00:41:55,764 --> 00:41:58,990
appended to this remove list. Then.

639
00:41:59,140 --> 00:42:02,834
And finally what I'm doing is I'm adding all the removed edges to

640
00:42:02,872 --> 00:42:06,802
this remove edges. So if we execute

641
00:42:06,866 --> 00:42:09,958
this, you can see that total

642
00:42:10,044 --> 00:42:13,286
530 edges were removed. So if

643
00:42:13,308 --> 00:42:16,594
you see earlier that we have 741 edges

644
00:42:16,642 --> 00:42:20,346
in the graphs, now we have only five. So we

645
00:42:20,368 --> 00:42:23,610
have removed 530 edges from our graph.

646
00:42:24,110 --> 00:42:28,262
So we have removed all unnecessary edges from the graph.

647
00:42:28,406 --> 00:42:32,266
So you'll get to see that when we

648
00:42:32,288 --> 00:42:34,090
plot final pictures.

649
00:42:35,410 --> 00:42:39,150
Next, what I'm doing is I'm doing some styling here. So why

650
00:42:39,220 --> 00:42:42,834
I'm, the reason behind for doing styling is to

651
00:42:42,872 --> 00:42:46,386
show my plot more meaningful. So the styling these

652
00:42:46,408 --> 00:42:50,626
is not here to show give you some fancy stuff. So it

653
00:42:50,648 --> 00:42:55,380
is more to show you some meaningful stuff

654
00:42:56,250 --> 00:42:59,894
in the vision. So for that what I'm doing

655
00:42:59,932 --> 00:43:03,602
is I've written simple custom functions

656
00:43:03,666 --> 00:43:07,266
here in order to avoid and creating multiple lines

657
00:43:07,298 --> 00:43:10,906
of code. First thing is I have

658
00:43:11,008 --> 00:43:15,062
quickly defined a function called selecting color where I'm passing a correlation

659
00:43:15,126 --> 00:43:19,274
parameter. If a correlation is less than or

660
00:43:19,312 --> 00:43:22,574
equal to zero, I want my color

661
00:43:22,612 --> 00:43:26,942
to be written as a red, otherwise it should be green. Then again,

662
00:43:27,076 --> 00:43:29,950
same with selecting thickness,

663
00:43:30,290 --> 00:43:33,566
selecting the thickness in the nodes and edges. So what I'm doing is I'm passing

664
00:43:33,598 --> 00:43:37,294
a parameter of correlation, giving the parameters

665
00:43:37,342 --> 00:43:41,310
called benchmark thickness scaling factor. And I'm written

666
00:43:41,390 --> 00:43:45,010
that I want to return it as

667
00:43:45,160 --> 00:43:48,706
benchmark thickness into absolute correlation. Then it should be an

668
00:43:48,728 --> 00:43:52,006
exponential to the scaling factor. So all

669
00:43:52,028 --> 00:43:55,654
these correlations you'll get to understand when you see

670
00:43:55,692 --> 00:43:59,446
the final plot. So don't get confused or scared

671
00:43:59,478 --> 00:44:01,420
by looking at all these things.

672
00:44:02,110 --> 00:44:05,734
And same with the node size as well. So I've written

673
00:44:05,862 --> 00:44:09,306
custom function for node size as well. Cool. So let me

674
00:44:09,328 --> 00:44:13,578
execute these then. Next we are identifying

675
00:44:13,594 --> 00:44:17,550
the positive and negative correlation. So it is important to identify

676
00:44:18,050 --> 00:44:21,466
which assets are positively correlated and which assets are negatively

677
00:44:21,498 --> 00:44:24,914
correlated in our asset classes. So in order

678
00:44:24,952 --> 00:44:28,482
to identify those positive and negative correlations. So h

679
00:44:28,536 --> 00:44:32,146
colors will be help us two selecting because they will help

680
00:44:32,168 --> 00:44:36,438
us to select defining upon the positive whether it is a positive or

681
00:44:36,524 --> 00:44:40,294
negative correlation. So for that what I'm doing here is

682
00:44:40,332 --> 00:44:43,654
I have created an empty list called

683
00:44:43,692 --> 00:44:47,750
edges color and edge width. Then where I'm

684
00:44:49,130 --> 00:44:52,618
written a conditional statement called where for key

685
00:44:52,784 --> 00:44:57,130
value in our Nx get attributes

686
00:44:57,950 --> 00:45:01,590
correlation items. So if this condition is satisfied,

687
00:45:01,670 --> 00:45:05,342
I want my select color values to be appended two

688
00:45:05,396 --> 00:45:09,230
this edge color. So the select color is nothing but the custom

689
00:45:09,300 --> 00:45:13,086
function which we have written here. So I'm passing the same custom function value

690
00:45:13,188 --> 00:45:16,786
and so this shouldn't be appended if this condition is satisfied to

691
00:45:16,808 --> 00:45:20,094
this edges color. The same goes with a selective thickness.

692
00:45:20,142 --> 00:45:23,938
So it will be automatically appended to this edge with

693
00:45:24,104 --> 00:45:28,280
list if this condition is satisfied. And finally,

694
00:45:28,810 --> 00:45:31,986
I'm also doing the same thing for node

695
00:45:32,018 --> 00:45:36,486
size, so assigning the node side depending upon the number of connections, making that

696
00:45:36,668 --> 00:45:39,020
these more number of a connection we have,

697
00:45:40,110 --> 00:45:43,500
the size of a node will be that much big and

698
00:45:45,150 --> 00:45:48,678
it shows that how much number of strong correlations

699
00:45:48,774 --> 00:45:52,046
it has. So you'll see that has, well,

700
00:45:52,148 --> 00:45:56,494
you'll see that as well when we go to visual same

701
00:45:56,532 --> 00:46:00,302
thing. So let me execute this one. And now

702
00:46:00,356 --> 00:46:03,602
it's time for our final graph. So we have taken different

703
00:46:03,656 --> 00:46:07,714
steps. So in order to improve our final graphs, let's see whether this

704
00:46:07,832 --> 00:46:11,890
will definitely help us to identify our

705
00:46:11,960 --> 00:46:15,666
goal or we are able to draw some meaningful insights from

706
00:46:15,688 --> 00:46:17,300
overnight paragraph or not.

707
00:46:19,770 --> 00:46:23,506
Again, creating a fixed size here and passing

708
00:46:23,538 --> 00:46:27,926
a font size and then calling my product function

709
00:46:28,028 --> 00:46:31,814
with I'm passing my parameter and also passing a layout.

710
00:46:31,862 --> 00:46:35,594
This time I want only the circular layout here and

711
00:46:35,712 --> 00:46:39,654
given node labels and given the node sizes,

712
00:46:39,782 --> 00:46:43,760
nodes size list which we have created above here,

713
00:46:44,130 --> 00:46:47,886
the list which we have created same goes with the edge color,

714
00:46:47,988 --> 00:46:51,614
same goes with the edges width as well. So passing these same the

715
00:46:51,652 --> 00:46:54,878
list which we have created here, passing the same here.

716
00:46:55,044 --> 00:46:58,898
And then I'm creating a title price correlation since

717
00:46:59,064 --> 00:47:02,558
we are understanding the correlations.

718
00:47:02,734 --> 00:47:05,814
And so once I execute this one,

719
00:47:05,852 --> 00:47:11,382
you can see

720
00:47:11,436 --> 00:47:15,042
that price correlation

721
00:47:15,106 --> 00:47:18,826
graph. So let's try to understand what all the changes we

722
00:47:18,848 --> 00:47:22,362
have made in this

723
00:47:22,496 --> 00:47:25,702
graph comparatively with what we have seen above.

724
00:47:25,846 --> 00:47:30,010
So firstly, I have removed these edges with the weak correlations

725
00:47:30,510 --> 00:47:34,526
and we have kept only the edges which have strong and

726
00:47:34,548 --> 00:47:37,934
significant correlations. And secondly, we have

727
00:47:38,052 --> 00:47:42,590
also added colors to indicate the positive and negative correlation.

728
00:47:43,490 --> 00:47:47,166
So all the positive correlations are in a green color and all the negative

729
00:47:47,198 --> 00:47:50,514
correlations are in a red color. So, which you can see here, the green color

730
00:47:50,552 --> 00:47:54,450
indicates positive correlation and the red color indicates the

731
00:47:54,520 --> 00:47:57,894
negative correlation. Here we can also see

732
00:47:57,932 --> 00:48:01,282
the relative strength of a correlation between nodes.

733
00:48:01,346 --> 00:48:05,222
And we have also adjusted these size

734
00:48:05,276 --> 00:48:08,760
of a node, which represented the number of

735
00:48:09,210 --> 00:48:12,680
strong correlations between the nodes with.

736
00:48:13,370 --> 00:48:16,906
So for example, if you

737
00:48:16,928 --> 00:48:20,494
see that VGT vanguard has vanguard size

738
00:48:20,532 --> 00:48:23,614
is pretty big and it has quite a

739
00:48:23,652 --> 00:48:26,602
strong correlations with others in the network.

740
00:48:26,746 --> 00:48:30,110
And if you also look at dia,

741
00:48:31,010 --> 00:48:34,530
which these, the node size is also big, where it also has

742
00:48:34,600 --> 00:48:38,258
some strong correlations. And same goes with ebod here

743
00:48:38,344 --> 00:48:42,194
and same goes with xlk here. So all

744
00:48:42,232 --> 00:48:45,746
these are strong correlations in the networks, comparatively with

745
00:48:45,768 --> 00:48:49,574
these others in the network. And if

746
00:48:49,612 --> 00:48:52,806
you also look at the graph, if you also look at

747
00:48:52,828 --> 00:48:56,354
the graph, majority are strongly

748
00:48:56,402 --> 00:49:00,710
correlated. So most of the asset classes are here are strongly correlated.

749
00:49:00,870 --> 00:49:04,934
And if you also observe the small nodes,

750
00:49:04,982 --> 00:49:08,970
like for example GDx

751
00:49:09,890 --> 00:49:13,946
or XLU or Fxf, so all these are different etfs,

752
00:49:14,138 --> 00:49:16,874
they are negatively correlated with other assets.

753
00:49:16,922 --> 00:49:20,762
So all these are negatively correlated with other assets.

754
00:49:20,906 --> 00:49:24,830
The only thing which we are not able to figure out

755
00:49:24,980 --> 00:49:28,578
from this, which assets are similar

756
00:49:28,664 --> 00:49:31,598
to each other in terms of correlation to nodes.

757
00:49:31,694 --> 00:49:34,754
So this is the only thing which we are not able to

758
00:49:34,792 --> 00:49:38,454
figure it out in this network. So for

759
00:49:38,492 --> 00:49:42,146
that, in order to identify that, what we can do is we can further improve

760
00:49:42,178 --> 00:49:46,274
this visual by taking a different layout approach.

761
00:49:46,322 --> 00:49:52,250
So let's see that now here

762
00:49:52,320 --> 00:49:56,460
what I'm doing is I'm taking a layout called

763
00:49:56,910 --> 00:49:59,450
Fretcherman Rainbow dayout.

764
00:50:01,390 --> 00:50:05,558
Basically, this layout will basically cluster

765
00:50:05,734 --> 00:50:09,626
this layout. What I will do is this layout basically cluster

766
00:50:09,658 --> 00:50:13,634
the nodes which are strongly correlated to each other. And it

767
00:50:13,672 --> 00:50:18,370
allows us to identify these group of assets with similar properties.

768
00:50:18,870 --> 00:50:22,050
So let's see how it showcase now.

769
00:50:22,120 --> 00:50:25,966
So I'm calling an x raw function, where I'm

770
00:50:25,998 --> 00:50:30,260
passing my parameter x list and this time

771
00:50:30,630 --> 00:50:34,226
I'm giving a fetch membrane goal layout and restaurant.

772
00:50:34,258 --> 00:50:38,010
Other parameters remain the same, which we have seen. But so

773
00:50:38,080 --> 00:50:39,980
once I execute this,

774
00:50:43,550 --> 00:50:47,210
you can clearly see that how

775
00:50:47,280 --> 00:50:50,622
it has clustered the nodes which has

776
00:50:50,676 --> 00:50:53,854
a strong correlation between each other.

777
00:50:53,972 --> 00:50:58,222
And we can also see that it has clearly identified these

778
00:50:58,276 --> 00:51:00,990
group of assets with similar properties.

779
00:51:02,390 --> 00:51:05,774
For example, if you take GLD,

780
00:51:05,822 --> 00:51:09,454
which is commodity, it has been successfully

781
00:51:09,502 --> 00:51:12,722
grouped with similar properties. And same goes

782
00:51:12,776 --> 00:51:16,514
with, for example BND, which is all

783
00:51:16,552 --> 00:51:21,910
these bond etfs, which have been successfully grouped with respective

784
00:51:22,650 --> 00:51:26,630
similar properties. And same goes with here

785
00:51:26,700 --> 00:51:30,506
it is a group of. So this is quite a

786
00:51:30,528 --> 00:51:34,758
large group of cluster of equities and it has been successfully

787
00:51:34,854 --> 00:51:37,770
mapped with their similar properties.

788
00:51:40,670 --> 00:51:44,010
This is pretty cool, but the only

789
00:51:44,080 --> 00:51:47,774
glitch in this entire visual is so

790
00:51:47,812 --> 00:51:51,770
the labels, these are overlapping in these large cluster

791
00:51:51,930 --> 00:51:55,186
group assets. And we can also see that we

792
00:51:55,208 --> 00:51:58,606
are not able two see these nodes

793
00:51:58,638 --> 00:52:01,986
as well, clearly because they are quite packed. So what

794
00:52:02,008 --> 00:52:05,922
we can do is we can quickly improve this visual

795
00:52:05,986 --> 00:52:09,186
by taking an approach method

796
00:52:09,218 --> 00:52:12,150
called minimum spanning tree.

797
00:52:12,970 --> 00:52:16,210
So what exactly is a minimum spanning tree?

798
00:52:16,290 --> 00:52:19,978
So these minimum spanning tree is a very famous and often

799
00:52:20,064 --> 00:52:23,594
used in financial network analysis. So what

800
00:52:23,632 --> 00:52:27,258
exactly these minimum spanning. So minimum spanning tree. So what exactly the

801
00:52:27,264 --> 00:52:30,506
minimum spanning tree will do? So minimum spanning

802
00:52:30,538 --> 00:52:34,186
tree will minimize these edges in the graph

803
00:52:34,298 --> 00:52:38,094
edges and it reduces all the clutter it years

804
00:52:38,132 --> 00:52:42,262
that it removes all the clutters in the network.

805
00:52:42,426 --> 00:52:45,886
So we'll see how our minimum spanning tree

806
00:52:45,918 --> 00:52:50,142
help us to identify our insight

807
00:52:50,206 --> 00:52:52,930
or help us to identify our goal.

808
00:52:54,470 --> 00:52:58,434
So these, I'm creating a minimum spanning tree here. Again, I'm adding

809
00:52:58,482 --> 00:53:02,546
colors to my minimum spanning tree and then I'm creating

810
00:53:02,578 --> 00:53:05,974
my minimum spanning these here and calling my

811
00:53:06,012 --> 00:53:10,122
plotting function. And the best part here

812
00:53:10,176 --> 00:53:13,180
is networks has a built in function,

813
00:53:13,870 --> 00:53:17,366
built in function which calculates minimum spanning

814
00:53:17,398 --> 00:53:20,890
tree for us. So here I'm passing building function here and

815
00:53:20,960 --> 00:53:24,714
passing labels. And layout is again feature mandatory

816
00:53:24,762 --> 00:53:28,254
layout because this

817
00:53:28,292 --> 00:53:31,774
layout help us to identify the group

818
00:53:31,812 --> 00:53:34,974
of assets with the similar properties here and we can

819
00:53:35,012 --> 00:53:38,610
quickly identify the correlation with this layout.

820
00:53:38,950 --> 00:53:42,994
So I'm using the same thing here, install other parameters remain the same

821
00:53:43,112 --> 00:53:44,660
given the title here.

822
00:53:48,970 --> 00:53:52,534
Now you can clearly see that how

823
00:53:52,572 --> 00:53:56,546
it has been removed the clutches. And so our minimum spanning

824
00:53:56,578 --> 00:54:00,874
these looks more readable and it

825
00:54:00,912 --> 00:54:04,422
has successfully removed these unnecessary edges

826
00:54:04,486 --> 00:54:08,154
and unwanted nodes from our graph. And it is more

827
00:54:08,192 --> 00:54:11,706
readable now. Now you can clearly see the group of cluster

828
00:54:11,738 --> 00:54:15,182
of equities here with the similar properties and

829
00:54:15,236 --> 00:54:18,542
same with our commodities bonds and

830
00:54:18,596 --> 00:54:23,454
also currencies here structure

831
00:54:23,502 --> 00:54:27,410
is very clear and we have successfully

832
00:54:27,990 --> 00:54:32,142
able to identifies

833
00:54:32,206 --> 00:54:35,654
the correlation between assets. And we have also seen the group

834
00:54:35,692 --> 00:54:39,270
of assets with these similar properties with

835
00:54:39,340 --> 00:54:43,362
our graphs. So with this I'll conclude

836
00:54:43,426 --> 00:54:47,254
my section two part and to

837
00:54:47,292 --> 00:54:50,570
summarize the things. So in this talk we have seen

838
00:54:50,640 --> 00:54:55,210
that how the history and graphs

839
00:54:55,950 --> 00:54:59,674
have been came to the picture. And we have seen what are networks and

840
00:54:59,712 --> 00:55:03,840
how two define the network structure. And we have also been how the

841
00:55:05,810 --> 00:55:09,742
financial network evolution came into the picture. And we also

842
00:55:09,796 --> 00:55:13,214
understood why the power of Python graphs, why network

843
00:55:13,262 --> 00:55:17,634
X and why Python is so powerful for

844
00:55:17,672 --> 00:55:21,810
doing the complex network analysis and coming

845
00:55:21,880 --> 00:55:26,230
to hands on part, we have seen two sections. In first section

846
00:55:27,130 --> 00:55:31,478
we have done some basic network analysis on financial data,

847
00:55:31,644 --> 00:55:34,946
and in these second section we have taken the ETF

848
00:55:34,978 --> 00:55:38,370
prices and we have deep dived into our network analysis

849
00:55:38,450 --> 00:55:42,870
where we have seen the asset correlation. Initially, we have seen the asset correlation

850
00:55:42,950 --> 00:55:46,442
with our heat map, and we have find out some

851
00:55:46,496 --> 00:55:49,734
interesting insights and issues in the heat map.

852
00:55:49,782 --> 00:55:53,882
And we have further investigated and further

853
00:55:53,946 --> 00:55:57,514
investigated and analyzed with our network graphs.

854
00:55:57,562 --> 00:56:01,374
And we have also seen some potential issues with

855
00:56:01,412 --> 00:56:05,182
our fancy graphs and where we have improved

856
00:56:05,246 --> 00:56:09,822
those fancy graphs by taking certain steps

857
00:56:09,966 --> 00:56:13,842
and different approaches. And finally, we have

858
00:56:13,896 --> 00:56:19,080
seen that finally we have seen that

859
00:56:19,690 --> 00:56:24,530
different layout approaches, two identifies

860
00:56:24,610 --> 00:56:28,346
to gain our final core, where we

861
00:56:28,368 --> 00:56:32,742
have seen that correlation between our asset classes and what are the positive

862
00:56:32,806 --> 00:56:34,250
and negative correlations?

863
00:56:35,790 --> 00:56:39,114
And we have seen remove the

864
00:56:39,152 --> 00:56:42,414
unnecessary edges. And we have also seen the group of

865
00:56:42,452 --> 00:56:45,694
assets with similar properties. So all

866
00:56:45,732 --> 00:56:49,950
these things have been achieved through our network graphs

867
00:56:50,370 --> 00:56:53,780
with the power of Python and Network X.

868
00:56:54,310 --> 00:56:57,662
Yeah, so that's all I have in my plate

869
00:56:57,726 --> 00:57:01,330
today. And let me quickly jump to my

870
00:57:01,400 --> 00:57:04,990
slides here. So these are some of the

871
00:57:05,080 --> 00:57:08,834
great references if you want to study about network analysis

872
00:57:08,882 --> 00:57:12,294
and graph theory. So feel free to check them out.

873
00:57:12,412 --> 00:57:15,986
And I really appreciate

874
00:57:16,178 --> 00:57:19,734
you all for being patient and listening my talk.

875
00:57:19,852 --> 00:57:23,494
And if you have any questions, feel free to

876
00:57:23,692 --> 00:57:27,190
ping me on the platform. I'll be addressing each and every

877
00:57:27,260 --> 00:57:30,846
question. And thank you so much for having me

878
00:57:30,868 --> 00:57:32,782
today. Have a great day.

