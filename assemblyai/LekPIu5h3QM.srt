1
00:00:20,010 --> 00:00:23,406
Hello there. Good morning, good afternoon, good evening. Whenever you

2
00:00:23,428 --> 00:00:27,974
may be watching this, I'm excited to speak to you today on

3
00:00:28,012 --> 00:00:32,034
my talk called nuclear rust fission powered code for the modern

4
00:00:32,082 --> 00:00:35,874
world. I am John Darrington.

5
00:00:35,922 --> 00:00:40,170
I work for the Idaho National Laboratory. Here in Idaho,

6
00:00:40,590 --> 00:00:43,690
we have a laboratory.

7
00:00:44,030 --> 00:00:46,950
The land we own is roughly the size of Rhode island.

8
00:00:47,110 --> 00:00:51,018
We were behind the first city in America powered

9
00:00:51,034 --> 00:00:53,790
with nuclear power. That was Arco, Idaho,

10
00:00:54,610 --> 00:00:59,022
and we have been working for a long time with

11
00:00:59,076 --> 00:01:02,954
nuclear energy and nuclear fuel, seeing what behaves,

12
00:01:03,002 --> 00:01:06,706
what misbehaves, and working in that realm for

13
00:01:06,728 --> 00:01:10,834
a very long time. And I'm excited to talk to you today about our

14
00:01:10,872 --> 00:01:14,386
experience with the rust programming language and some

15
00:01:14,408 --> 00:01:18,258
of the reasons why we chose rust and we went that direction.

16
00:01:18,434 --> 00:01:21,554
So just a little bit about myself. My name is John Darrington

17
00:01:21,602 --> 00:01:25,542
again. I'm the lead architect for the digital engineering department at

18
00:01:25,676 --> 00:01:28,874
the Idaho Idaho National Laboratory,

19
00:01:28,912 --> 00:01:32,218
work primarily with data management and work in

20
00:01:32,224 --> 00:01:36,538
the digital twin and digital transformation spaces. I've also

21
00:01:36,704 --> 00:01:40,582
been working primarily on a data management warehouse,

22
00:01:40,646 --> 00:01:43,678
or data lake, more of data Lake at

23
00:01:43,684 --> 00:01:47,706
this point, called deep links, and other various tools in that ecosystem.

24
00:01:47,898 --> 00:01:51,502
I've been a software developer for over ten years, been working

25
00:01:51,556 --> 00:01:55,306
in that realm, as well as just working with data management overall.

26
00:01:55,498 --> 00:01:58,546
So let's get started with the fun stuff. This is the

27
00:01:58,568 --> 00:02:01,714
preliminaries we have to get this out of the way. But let's start talking

28
00:02:01,752 --> 00:02:05,140
about the fun, or in this case,

29
00:02:05,510 --> 00:02:08,920
not so fun. If you were watching the news

30
00:02:09,450 --> 00:02:13,766
back in 2011, you would maybe

31
00:02:13,868 --> 00:02:17,094
recognize this image, and the scale of it might be a little hard to see.

32
00:02:17,132 --> 00:02:20,986
You can see there's a truck off here to the

33
00:02:21,008 --> 00:02:24,170
left here, a big crane truck.

34
00:02:25,710 --> 00:02:29,846
This is one of the outbuildings of the. Or not the outbuildings.

35
00:02:29,958 --> 00:02:33,546
One of the buildings of the Fukushima power plant.

36
00:02:33,738 --> 00:02:38,250
And in 2011, a 15 meters high tsunami

37
00:02:38,330 --> 00:02:42,518
disabled the power supply on three of the Dai Chi reactors.

38
00:02:42,714 --> 00:02:45,874
All three of them largely melted in the first three days, and it took

39
00:02:45,912 --> 00:02:49,810
until December to reach an official shutdown condition.

40
00:02:50,630 --> 00:02:54,946
Now, why do I start with a

41
00:02:54,968 --> 00:02:58,120
nuclear accident, so to speak,

42
00:02:58,890 --> 00:03:02,182
for talking about rust and talking about our experience

43
00:03:02,316 --> 00:03:05,414
with rust? Well, I think it's a little bit easy. So no

44
00:03:05,452 --> 00:03:09,066
industry is immune from accidents, but all industries learn from them.

45
00:03:09,168 --> 00:03:12,634
There have been three major accidents in the nuclear world

46
00:03:12,752 --> 00:03:16,486
that we kind of refer back to three Mile Island,

47
00:03:16,678 --> 00:03:19,690
Fukushima, and, of course, Chernobyl.

48
00:03:22,130 --> 00:03:25,742
In every industry, there are accidents, and hopefully we learn from

49
00:03:25,796 --> 00:03:29,246
those accidents. And programming, to be honest, is more

50
00:03:29,268 --> 00:03:31,790
than an industry. It affects all these other industries.

51
00:03:32,450 --> 00:03:35,858
In and of itself, and hopefully we learn from them. And I think that's kind

52
00:03:35,864 --> 00:03:39,106
of where we get with rust. But let me

53
00:03:39,128 --> 00:03:42,782
talk a little bit about where our department and where inl

54
00:03:42,846 --> 00:03:46,742
kind of finds itself in the nuclear industry. So this is

55
00:03:46,796 --> 00:03:50,040
the state of software industry in the nuclear world.

56
00:03:51,290 --> 00:03:55,046
We are very risk averse for obvious reasons. I mean, it makes sense.

57
00:03:55,148 --> 00:03:58,474
We're dealing with nuclear power, nuclear energy, things that could

58
00:03:58,512 --> 00:04:02,518
go very spectacularly awry, as we've seen with Chernobyl,

59
00:04:02,614 --> 00:04:06,566
and affect millions of people and cause untold

60
00:04:06,598 --> 00:04:10,406
damage. So we are very risk averse

61
00:04:10,518 --> 00:04:13,914
in this industry. We want to make sure that what we're doing is safe.

62
00:04:13,962 --> 00:04:17,374
We want to make sure that it obviously comes in with

63
00:04:17,412 --> 00:04:20,926
budget, but mainly it has to do a lot

64
00:04:20,948 --> 00:04:25,106
with safety and making sure that we're doing the right things. Because of

65
00:04:25,128 --> 00:04:28,622
that change is slow. We're so adverse to risk

66
00:04:28,686 --> 00:04:32,130
that we worry about changing things too

67
00:04:32,200 --> 00:04:34,740
rapidly and moving too far forward.

68
00:04:35,350 --> 00:04:38,706
And so that kind of change is slow. It has to go through committees.

69
00:04:38,738 --> 00:04:42,102
It has to go through the nuclear regulatory committee for

70
00:04:42,156 --> 00:04:43,990
even running simple reactors.

71
00:04:46,010 --> 00:04:49,634
It takes a while to get things moving. And in the same vein,

72
00:04:49,682 --> 00:04:53,354
again, committees, everything's done by committee. It feels like we

73
00:04:53,392 --> 00:04:56,966
have committees for software and cyber control. And it's

74
00:04:56,998 --> 00:05:00,506
not bad things. That's what I hope to get through. It's not necessarily that

75
00:05:00,528 --> 00:05:03,934
they're bad, but everyone in the committee has their

76
00:05:03,972 --> 00:05:07,214
own goals, has their own experiences, and that can cause things

77
00:05:07,252 --> 00:05:11,354
to be extremely slow. Again, risk averse change is slow. We find ourselves

78
00:05:11,482 --> 00:05:15,030
in that industry, in just the software that we're dealing

79
00:05:15,050 --> 00:05:18,500
with. And there's a very set way of doing things.

80
00:05:18,950 --> 00:05:22,658
We've done this for years. It's been safe. We're not going to change it.

81
00:05:22,824 --> 00:05:25,966
We're using this same exact microcontroller.

82
00:05:26,078 --> 00:05:29,494
Weve used it for 20 years. Nothing's happened.

83
00:05:29,612 --> 00:05:32,678
It must be safe. We're going to continue to use it. And it's hard to

84
00:05:32,684 --> 00:05:36,086
push up against that because you're trying to introduced either new

85
00:05:36,108 --> 00:05:40,182
technologies, new paradigms, and if something's worked

86
00:05:40,236 --> 00:05:43,478
for 20 years, that doesn't necessarily mean it's better. It just means it's

87
00:05:43,494 --> 00:05:47,494
worked for 20 years. And who knows that there might be a catastrophic failure

88
00:05:47,542 --> 00:05:50,686
in the future. But again, it's a set way of doing things. And we

89
00:05:50,708 --> 00:05:54,154
have to push up against that. Ancient protocols.

90
00:05:54,202 --> 00:05:57,470
We are dealing with ancient network protocols,

91
00:05:57,810 --> 00:06:02,502
ancient communication protocols between microcontrollers

92
00:06:02,666 --> 00:06:07,010
and facilities. And so we have to

93
00:06:07,160 --> 00:06:10,674
find technologies and

94
00:06:10,712 --> 00:06:13,730
things that work in these ancient setups.

95
00:06:14,150 --> 00:06:17,490
So again, this is where we find ourselves in the industry.

96
00:06:17,650 --> 00:06:22,040
So this is the original slide that I put together in 2022

97
00:06:22,490 --> 00:06:26,674
about why we felt the need to introduce a new programming

98
00:06:26,722 --> 00:06:30,862
language, especially in the department.

99
00:06:31,026 --> 00:06:34,602
At inL, for one, we have our

100
00:06:34,656 --> 00:06:37,834
deep links data warehouse. We were using a high

101
00:06:37,872 --> 00:06:41,034
level programming language and we needed lower level

102
00:06:41,072 --> 00:06:44,426
programming language than we typically use. We were looking at embedding

103
00:06:44,458 --> 00:06:47,934
it or using either webassembly or putting it

104
00:06:47,972 --> 00:06:51,978
closer edge compute. We weve using a lot of node js,

105
00:06:52,074 --> 00:06:55,838
and that's really not good for long term use by a department,

106
00:06:56,014 --> 00:07:00,130
mainly because it has some performance issues. Again, it's cpu bound,

107
00:07:00,550 --> 00:07:04,350
a single threaded great async for I o operations.

108
00:07:04,430 --> 00:07:08,310
But if you're doing complex computations, no chances is definitely

109
00:07:08,380 --> 00:07:12,182
not the right tool. And so again, that leads to a lack of

110
00:07:12,316 --> 00:07:16,630
well adopted scientific computing, at least at the lab. And runtime requirements.

111
00:07:16,970 --> 00:07:20,954
We have a lot of python, and while in use, again it

112
00:07:20,992 --> 00:07:24,246
has a runtime, so it's not available for all deployment

113
00:07:24,278 --> 00:07:28,074
pathways, especially on microcontrollers, or on

114
00:07:28,112 --> 00:07:31,526
things that have either need to be very lightweight like DAs

115
00:07:31,638 --> 00:07:35,502
data acquisition systems, or things that can't have

116
00:07:35,556 --> 00:07:39,550
Python's bloated runtime on top of it. And yes there's Python, and yes there's whole

117
00:07:39,620 --> 00:07:43,118
bunches of directions we can go there, but those are complex. And trying to

118
00:07:43,124 --> 00:07:45,954
get data scientists to use that can be really difficult.

119
00:07:46,152 --> 00:07:50,238
Performance is a concern for issues not covered by internal c libraries.

120
00:07:50,334 --> 00:07:53,954
I think we've all seen that meme with

121
00:07:53,992 --> 00:07:57,570
the really high performance speed car and says Python. And then it

122
00:07:57,640 --> 00:08:01,046
zooms the picture out and it's Python on top of

123
00:08:01,068 --> 00:08:04,578
this tow truck. That's C and C Plus plus. And that's

124
00:08:04,594 --> 00:08:08,658
kind of what we're talking about. And then again, Python is extremely permissive and allows

125
00:08:08,674 --> 00:08:12,554
the easy introduced of bugs. And if anyone's worked with either university code

126
00:08:12,752 --> 00:08:17,210
or code coming in from data scientists, they're not software engineers.

127
00:08:18,110 --> 00:08:21,914
Well, even software engineers make mistakes, but these

128
00:08:21,952 --> 00:08:25,646
people just want to make sure something works and so they'll get it working.

129
00:08:25,748 --> 00:08:29,022
And regardless of whether it's going to have bugs or not,

130
00:08:29,076 --> 00:08:33,200
and the language doesn't care, it's not going to try to make them do that.

131
00:08:33,570 --> 00:08:37,474
We had to make a conscious decision that's a constant in any

132
00:08:37,512 --> 00:08:41,300
industry. You have to make decisions before they're made for you.

133
00:08:42,470 --> 00:08:47,526
We looked at C Plus plus, but the tooling is difficult to learn and

134
00:08:47,548 --> 00:08:51,414
can cause issues. And then we were looking for safety and

135
00:08:51,452 --> 00:08:55,160
lower weve languages are necessary for operational control.

136
00:08:56,090 --> 00:08:59,434
Why are we looking at operational control? Well, that's a good

137
00:08:59,472 --> 00:09:02,954
question. And the answer is, because we are trying to

138
00:09:02,992 --> 00:09:07,110
build digital twin. And a digital twin

139
00:09:07,190 --> 00:09:11,222
is basically a digital representation of a physical

140
00:09:11,286 --> 00:09:14,686
asset that eventually, and you kind

141
00:09:14,708 --> 00:09:17,614
of can't see the level seven here. It's a little cut off by my face,

142
00:09:17,652 --> 00:09:21,082
but the level seven is artificial intelligence and automated

143
00:09:21,146 --> 00:09:24,654
design optimization. And so weve trying to build this digital

144
00:09:24,702 --> 00:09:28,834
representation of a physical asset that would eventually control

145
00:09:28,952 --> 00:09:32,770
the physical asset or have some kind of a feedback loop back

146
00:09:32,840 --> 00:09:36,994
into the physical asset. And so if we're trying to build digital twins

147
00:09:37,042 --> 00:09:40,694
of nuclear reactors, well, then we need to

148
00:09:40,732 --> 00:09:45,026
deal with safe and performant languages,

149
00:09:45,218 --> 00:09:48,790
because we are dealing with, again, nuclear reactors

150
00:09:49,130 --> 00:09:52,666
and trying to build these digital twins. And again, you can go

151
00:09:52,688 --> 00:09:55,578
through a little bit and look at these different levels of digital twins as you

152
00:09:55,584 --> 00:09:58,794
go through. Don't worry too much about that.

153
00:09:58,832 --> 00:10:02,794
Just understand, again, it's a digital asset or a digital representation

154
00:10:02,842 --> 00:10:06,030
of a physical asset that will eventually,

155
00:10:06,690 --> 00:10:09,754
it can predict things about the physical asset. It can interact

156
00:10:09,802 --> 00:10:13,246
with the physical asset. It has feedback loops with the physical

157
00:10:13,278 --> 00:10:16,660
asset. And so it can have a lot of those combinations and changes.

158
00:10:18,950 --> 00:10:22,482
Roughly 70%. And this is why

159
00:10:22,616 --> 00:10:27,094
safety matters. And I took this from otka.com.

160
00:10:27,292 --> 00:10:30,998
70% of all cves at Microsoft are memory safety issues.

161
00:10:31,084 --> 00:10:34,514
Two thirds of Linux kernel security vulnerabilities

162
00:10:34,562 --> 00:10:36,120
come from memory safety issues.

163
00:10:37,610 --> 00:10:40,854
Android has a bunch of vulnerabilities that are safety

164
00:10:40,902 --> 00:10:44,618
issues. An analysis of that, my favorite one is

165
00:10:44,704 --> 00:10:47,574
this last one of zero days that were discovered being exploited in the wild,

166
00:10:47,622 --> 00:10:51,642
found that more than 80% of the exploited vulnerabilities

167
00:10:51,706 --> 00:10:55,280
were because of memory safety issues. And so

168
00:10:57,490 --> 00:11:01,134
if our stick was

169
00:11:01,252 --> 00:11:05,118
dangerous security issues and vulnerabilities

170
00:11:05,214 --> 00:11:09,394
in control software or just bad

171
00:11:09,592 --> 00:11:12,834
run states or, sorry, bad states in the piece

172
00:11:12,872 --> 00:11:16,210
of software, then our carrot was memory safety

173
00:11:16,290 --> 00:11:19,574
was, hey, we can potentially get

174
00:11:19,612 --> 00:11:23,046
rid of an entire class of bugs if

175
00:11:23,068 --> 00:11:26,402
we can find some way to ensure memory

176
00:11:26,466 --> 00:11:29,894
safety for our software programs and for what we're trying

177
00:11:29,932 --> 00:11:33,370
to build. And so this led us to one

178
00:11:33,440 --> 00:11:36,646
obvious conclusion. And I mean, you're listening to the rust conference,

179
00:11:36,678 --> 00:11:40,060
so obviously I think you're coming to the same conclusion that we came into.

180
00:11:41,630 --> 00:11:44,910
We put together a few different languages and kind of pitted them against

181
00:11:44,980 --> 00:11:48,654
each other. And the one that came out to be a clear winner for

182
00:11:48,692 --> 00:11:51,934
our use case was Rust. Now, again,

183
00:11:51,972 --> 00:11:55,474
this is the original slide from 2022, so not all this might be

184
00:11:55,512 --> 00:11:59,570
correct. I wanted to maintain my original look at Rust

185
00:12:00,150 --> 00:12:03,986
for the department and the area and the Idaho national lab so

186
00:12:04,008 --> 00:12:07,606
that you could get a glimpse into exactly what

187
00:12:07,628 --> 00:12:11,302
we were looking at and what we thought about it before we even started using

188
00:12:11,356 --> 00:12:15,080
it. And without having spent tons of time researching it,

189
00:12:16,010 --> 00:12:19,706
I talked about the idea that it was sponsored by Mozilla because we

190
00:12:19,728 --> 00:12:23,340
were concerned about long term usage and support.

191
00:12:23,950 --> 00:12:27,466
Again, statically typed and compiled language. This part

192
00:12:27,488 --> 00:12:30,870
was really important to us. Can target a lot of different chipsets and different oss.

193
00:12:30,950 --> 00:12:34,234
You can even in some cases run it without an operating

194
00:12:34,282 --> 00:12:37,534
system as long as you have a memory allocator. So it made sense,

195
00:12:37,732 --> 00:12:41,386
the no garbage collector and the compiler enforcing that memory

196
00:12:41,418 --> 00:12:45,214
safety. Again, the carrot and the stick, and our carrot was memory

197
00:12:45,262 --> 00:12:48,834
safety. I could

198
00:12:48,872 --> 00:12:52,306
have made an entire few other slides on this

199
00:12:52,408 --> 00:12:55,250
if I wanted to and talk about memory safety.

200
00:12:56,150 --> 00:13:00,166
I really appreciated the lean standard library large package ecosystem with

201
00:13:00,188 --> 00:13:03,206
a centralized package manager. That's one of the reasons we didn't want to go with

202
00:13:03,228 --> 00:13:06,534
C. Why there are package managers for C.

203
00:13:06,652 --> 00:13:10,218
There is nothing as standardized it feels like to me,

204
00:13:10,304 --> 00:13:13,734
and I might be wrong. Again, this is the original

205
00:13:13,782 --> 00:13:16,922
slide, but this one just jumps out at you.

206
00:13:17,056 --> 00:13:20,286
Concurrency model built in now, we did talk a little bit

207
00:13:20,308 --> 00:13:23,758
about its complex and much steeper learning curve, and we'll talk a little bit

208
00:13:23,764 --> 00:13:27,582
about our experience with it. But with

209
00:13:27,636 --> 00:13:30,954
complexity comes powerful

210
00:13:31,002 --> 00:13:35,022
features. The reason it's so complex is because it does have powerful features,

211
00:13:35,086 --> 00:13:39,220
generics, abstractions, pattern matching, trait system,

212
00:13:39,590 --> 00:13:43,362
macros. So, I mean, there's a lot of power behind it,

213
00:13:43,416 --> 00:13:46,594
and I wanted to make sure that we understood that, yes, it's complex, yes,

214
00:13:46,632 --> 00:13:50,418
it has a steeper learning curve, but it has a lot of powerful features.

215
00:13:50,514 --> 00:13:54,070
We talked a lot about the community. We care

216
00:13:54,140 --> 00:13:56,934
a lot about our developers here at INL. So we want to make sure that

217
00:13:56,972 --> 00:14:00,786
they feel like it's an easy setup and an easy way to get

218
00:14:00,828 --> 00:14:04,314
working. And probably the most important piece on

219
00:14:04,352 --> 00:14:07,462
here for me at the time was the interop with other languages,

220
00:14:07,526 --> 00:14:11,482
and I say excellent. And again, this is the original slide from 2022.

221
00:14:11,616 --> 00:14:14,954
Now that we have actually introduced Rust

222
00:14:15,002 --> 00:14:18,618
with Python C sharp node,

223
00:14:18,714 --> 00:14:21,742
I can tell you it's not bad. It could be better,

224
00:14:21,796 --> 00:14:25,406
it could be worse. But in a lot of cases, there are powerful

225
00:14:25,438 --> 00:14:29,086
libraries out there already to make these interops a lot easier

226
00:14:29,118 --> 00:14:32,974
to deal with. I've successfully written various Python

227
00:14:33,022 --> 00:14:36,386
modules and node modules and even a C sharp

228
00:14:36,418 --> 00:14:39,990
package in rust under the hood.

229
00:14:40,330 --> 00:14:42,920
And so it is possible it does work.

230
00:14:43,450 --> 00:14:46,726
And we've done a lot of work in Rust since we

231
00:14:46,748 --> 00:14:50,966
started this in 2022 1st kind

232
00:14:50,988 --> 00:14:54,910
of our bread and butter of the department is the deep links

233
00:14:55,010 --> 00:14:58,842
open source data lake. We have time series and tabular data

234
00:14:58,896 --> 00:15:01,862
support in there. Originally it was almost pure node js,

235
00:15:01,926 --> 00:15:04,986
and you can already see a problem with dealing with data lakes with an ETL

236
00:15:05,018 --> 00:15:09,422
pipeline and doing node js. They wanted to unify the

237
00:15:09,476 --> 00:15:12,942
languages at the lab in use at this place,

238
00:15:12,996 --> 00:15:15,614
and node was kind of picked because they had to do a front end and

239
00:15:15,652 --> 00:15:18,914
they wanted to make sure that it was a full stack developer. So we started

240
00:15:18,952 --> 00:15:22,930
to use a lot of node JS, and originally it was just pure node js.

241
00:15:23,510 --> 00:15:27,378
We introduced Rust three months after that initial slide

242
00:15:27,394 --> 00:15:29,590
and initial discussions.

243
00:15:30,250 --> 00:15:34,146
And what we introduced was a postgres fast loader

244
00:15:34,178 --> 00:15:37,754
module for tabular and time series data to more

245
00:15:37,792 --> 00:15:41,494
quickly load that into a timescaledb

246
00:15:41,542 --> 00:15:45,242
backed postgres cluster. And it was

247
00:15:45,296 --> 00:15:49,286
patterned after TimescaledB's own concurrent

248
00:15:49,478 --> 00:15:53,226
postgres loader. We were able to write this in

249
00:15:53,328 --> 00:15:56,874
Rust and have it implemented as a native node module.

250
00:15:56,922 --> 00:15:59,358
So we were able to use it in the same code base without having to

251
00:15:59,364 --> 00:16:02,814
stand up a separate service or proxying it

252
00:16:02,852 --> 00:16:06,066
or figuring out anything like that. It just natively works out

253
00:16:06,088 --> 00:16:10,258
of the box. Right now we are

254
00:16:10,344 --> 00:16:14,306
in a massive refactor of deep links where Rust is going to drive our new

255
00:16:14,408 --> 00:16:18,326
tabular and time series data support, and we are integrating with a

256
00:16:18,348 --> 00:16:21,378
technology called Delta Lake. If you haven't heard of Delta Lake,

257
00:16:21,474 --> 00:16:24,594
I highly recommend you look it up. It basically allows

258
00:16:24,722 --> 00:16:28,326
acid transactions on hard storage for time series

259
00:16:28,358 --> 00:16:32,134
and tabular data like Parquet files. Just acid transactions

260
00:16:32,182 --> 00:16:35,580
and parquet files on hard storage. It's fantastic. And we're using

261
00:16:35,950 --> 00:16:39,910
Rust to drive that. We are working on backing

262
00:16:39,990 --> 00:16:43,286
our open source graph technology

263
00:16:43,408 --> 00:16:47,086
with Redis graph in order to make that fast. And we have

264
00:16:47,108 --> 00:16:50,446
a loader that will load snapshots of the graph at any

265
00:16:50,468 --> 00:16:53,818
point in time into redis. And weve written that in

266
00:16:53,844 --> 00:16:57,346
rust again, and we are looking at integrating a

267
00:16:57,368 --> 00:17:00,898
large language model, particularly llama rs if you can look it up.

268
00:17:01,064 --> 00:17:04,482
And it's the rewrite of llama C

269
00:17:04,616 --> 00:17:08,850
in rust, and we are looking at integrating it again

270
00:17:08,920 --> 00:17:12,806
into Deeplinks'core code base. And all

271
00:17:12,828 --> 00:17:16,310
of this is possible because of Rust.

272
00:17:17,050 --> 00:17:20,426
We've done several other things. One is

273
00:17:20,448 --> 00:17:24,570
a program called Serval. It was a websocket multiplayer game server used

274
00:17:24,640 --> 00:17:28,554
to fuel or not fuel, used to

275
00:17:28,592 --> 00:17:31,606
back our multiplayer

276
00:17:31,638 --> 00:17:35,134
game sessions for our digital twin. So we use uni

277
00:17:35,252 --> 00:17:38,366
a lot in house to represent these models in a 3d

278
00:17:38,388 --> 00:17:42,074
space and let users interact with them using Microsoft

279
00:17:42,122 --> 00:17:45,938
HoloLens using other tools. And so we wanted to

280
00:17:46,024 --> 00:17:50,146
let users interact with other users. And so we've created this

281
00:17:50,328 --> 00:17:54,370
websocket multiplayer game server to make that a reality

282
00:17:54,890 --> 00:17:59,042
again. Drives the AR VR multiplayer integrations

283
00:17:59,106 --> 00:18:03,122
as well as the multiplayer integration for our deep links viewer.

284
00:18:03,266 --> 00:18:07,094
For

285
00:18:07,132 --> 00:18:10,714
personally was creating a deep links loader which is both a Python and a c

286
00:18:10,752 --> 00:18:13,914
sharp module for caching time series and tabular data

287
00:18:13,952 --> 00:18:17,286
from Deeplinks locally. Letting data scientists

288
00:18:17,398 --> 00:18:21,106
work with deep links in Python in a more easy fashion.

289
00:18:21,158 --> 00:18:24,846
Letting us pull it down into a duckdb database to

290
00:18:24,868 --> 00:18:28,254
let them query with SQL to their heart's content without having to

291
00:18:28,292 --> 00:18:31,994
slam the data lake with requests

292
00:18:32,042 --> 00:18:35,746
over and over and again. Leverages DuckDB and right now we use

293
00:18:35,768 --> 00:18:39,694
it in a lot of our machine learning and our artificial intelligence pipelines

294
00:18:39,742 --> 00:18:43,218
here at ino. And again, none of this would be possible

295
00:18:43,304 --> 00:18:47,218
without Rust. This year we

296
00:18:47,384 --> 00:18:50,758
finally hit the big time in dealing with Rust. We finally had the

297
00:18:50,764 --> 00:18:54,146
opportunity to do what we wanted to do since we started discussing

298
00:18:54,178 --> 00:18:57,190
Rust and why we wanted to use Rust.

299
00:18:57,690 --> 00:19:01,210
This is the AGN 201 nuclear reactor.

300
00:19:02,030 --> 00:19:05,226
It is rated for producing five watts of electricity. It is

301
00:19:05,248 --> 00:19:08,278
hosted at the Idaho State University in Pocatello,

302
00:19:08,294 --> 00:19:12,026
Idaho. And we, Idaho,

303
00:19:12,058 --> 00:19:15,774
Idaho, Idaho National Laboratory, were asked to create

304
00:19:15,892 --> 00:19:19,002
a digital twin of this nuclear reactor.

305
00:19:19,066 --> 00:19:22,734
Now, if you remember back to the levels of the digital twin, we have

306
00:19:22,772 --> 00:19:26,222
things like real time analytics integrations and then eventually

307
00:19:26,286 --> 00:19:29,010
a feedback loop into this reactor.

308
00:19:30,070 --> 00:19:33,730
Now, while we did not complete the full feedback loop because

309
00:19:33,800 --> 00:19:37,910
of nuclear regulatory committee

310
00:19:39,610 --> 00:19:43,382
regulations and rules, we were able to basically get

311
00:19:43,436 --> 00:19:47,286
all the way up to that point and demonstrate that we could in fact,

312
00:19:47,468 --> 00:19:51,020
potentially control the reactors with this safe program.

313
00:19:51,550 --> 00:19:54,966
And so we built a system with deep

314
00:19:54,998 --> 00:19:58,986
links at its core and a lot of rust. So we have

315
00:19:59,008 --> 00:20:02,222
down in this operations portion here, we have to get the live

316
00:20:02,276 --> 00:20:06,938
asset data from the nuclear reactor. We wrote a program called Jester.

317
00:20:07,114 --> 00:20:10,942
It is a rust file watcher and

318
00:20:11,076 --> 00:20:14,722
data acquisition tool for pulling in data from data

319
00:20:14,776 --> 00:20:19,006
acquisition systems, reading it in and sending it off to the Deeplinks

320
00:20:19,198 --> 00:20:22,386
data link. And again, that was written in rust. We had

321
00:20:22,408 --> 00:20:25,970
a very tiny machine with tiny

322
00:20:26,870 --> 00:20:30,594
specifications to work with. This is not a very powerful machine.

323
00:20:30,642 --> 00:20:34,614
And so Rust allowed us to make something that was performant and that could

324
00:20:34,652 --> 00:20:37,846
fit in the resource constraints that we had and then be able to

325
00:20:37,868 --> 00:20:42,166
send that over the network to the Deeplinks data lake.

326
00:20:42,358 --> 00:20:45,706
That data lake drove machine learning and

327
00:20:45,728 --> 00:20:49,434
artificial intelligence. We passed that data out into

328
00:20:49,632 --> 00:20:53,006
basically Jupyter notebooks, and these Jupyter notebooks are

329
00:20:53,028 --> 00:20:56,826
using that deep links loader that I talked about for pulling in time series

330
00:20:56,858 --> 00:21:00,286
data from deep links in a better manner than just

331
00:21:00,388 --> 00:21:04,066
constantly hitting the database. And then we built a

332
00:21:04,088 --> 00:21:07,650
program around paper mill and around others to

333
00:21:07,720 --> 00:21:11,406
control the execution of Jupyter

334
00:21:11,438 --> 00:21:15,634
notebooks and the code that our data scientists put together to

335
00:21:15,752 --> 00:21:19,222
run anomaly detection, to run all sorts of different

336
00:21:19,276 --> 00:21:23,618
algorithms on this data, to see all sorts of different things about this reactor.

337
00:21:23,714 --> 00:21:27,206
And again, this is all facilitated by the use of

338
00:21:27,308 --> 00:21:31,606
rust. And then that data gets shoved back into deep links,

339
00:21:31,718 --> 00:21:35,354
and it goes out into this

340
00:21:35,392 --> 00:21:39,210
area here, where we have a live model and human interaction. We have

341
00:21:39,360 --> 00:21:42,190
an AR and VR headset that is, again,

342
00:21:42,260 --> 00:21:45,646
using the same deep links loader technology,

343
00:21:45,828 --> 00:21:49,326
but as a C sharp module written in

344
00:21:49,348 --> 00:21:52,826
Rust to drive our AR VR,

345
00:21:52,938 --> 00:21:55,934
and we have that running on a HoloLens headset.

346
00:21:56,062 --> 00:22:00,350
So, again, Rust was able to target this and work on HoloLens.

347
00:22:00,510 --> 00:22:03,726
It was fantastic. It made everything easy. I didn't

348
00:22:03,758 --> 00:22:07,910
have to write, or we didn't have to write the code

349
00:22:08,060 --> 00:22:11,606
five times in five different languages to make it work. We were able

350
00:22:11,628 --> 00:22:15,554
to maintain a much smaller workforce

351
00:22:15,602 --> 00:22:19,174
to accomplish this main goal. Our bet

352
00:22:19,212 --> 00:22:22,326
paid off. So we launched the AGN 201 digital twin

353
00:22:22,358 --> 00:22:25,946
in less than six months of development time.

354
00:22:26,048 --> 00:22:29,366
Now, granted, we had a lot of the work done with the data lake,

355
00:22:29,558 --> 00:22:33,370
but again, we still had to write the data acquisition system,

356
00:22:33,440 --> 00:22:37,018
we had to write the machine learning portion, we had to write the loader,

357
00:22:37,114 --> 00:22:40,446
and we were able to do that in six months. Now, this does

358
00:22:40,468 --> 00:22:43,886
not include the rust ramp up time, and I know that is

359
00:22:43,908 --> 00:22:47,522
a concern of a lot of developers, but I have seen that,

360
00:22:47,576 --> 00:22:51,090
in all honesty, people pick up rust fairly quickly when

361
00:22:51,160 --> 00:22:54,370
they are motivated and they have a problem to solve.

362
00:22:54,710 --> 00:22:58,358
You can't expect your developers, and you can't expect those that work for you to

363
00:22:58,364 --> 00:23:02,150
pick up rust in a weekend, or expect

364
00:23:02,220 --> 00:23:05,814
them to pick it up when you don't have, or when you haven't handed them

365
00:23:05,852 --> 00:23:08,840
problems to solve and things to work on.

366
00:23:09,290 --> 00:23:13,046
We maintain speed and accuracy of the data by using native modules in Rust.

367
00:23:13,158 --> 00:23:16,426
So the speed of getting that data off the

368
00:23:16,448 --> 00:23:19,994
data acquisition system into machine learning and then back to the end

369
00:23:20,032 --> 00:23:23,226
user was extremely important. And then the accuracy of

370
00:23:23,248 --> 00:23:25,966
that data that we had no drops, or that we were able to maintain those

371
00:23:25,988 --> 00:23:29,822
drops and buffer and send, and we were able to accomplish all of that

372
00:23:29,956 --> 00:23:33,074
with Rust. And then this one is my

373
00:23:33,112 --> 00:23:37,166
favorite. I believe that we demonstrated the ability for rust

374
00:23:37,358 --> 00:23:41,570
to eventually become part of nuclear control instruments and paradigms.

375
00:23:42,390 --> 00:23:46,610
We now have a working digital twin that is functional accurate,

376
00:23:46,690 --> 00:23:50,326
safe, and hopefully we can demonstrate that.

377
00:23:50,348 --> 00:23:54,134
Hey, we have new technology that we should

378
00:23:54,252 --> 00:23:58,158
utilize in dealing with nuclear reactors.

379
00:23:58,354 --> 00:24:01,402
Lessons learned. The big one is,

380
00:24:01,456 --> 00:24:05,366
again, find what drives management and those that make the big decisions

381
00:24:05,478 --> 00:24:09,110
and use those to drive your adoption of rust.

382
00:24:09,190 --> 00:24:12,846
Drive your innovation. Have a game plan,

383
00:24:13,028 --> 00:24:16,510
but leave wiggle room for all the people that you have

384
00:24:16,580 --> 00:24:19,790
working for you working in rust to experiment and try

385
00:24:19,860 --> 00:24:23,870
their own things, and again, give them a problem to solve.

386
00:24:24,030 --> 00:24:27,122
Let them prototype early and quickly and often,

387
00:24:27,256 --> 00:24:30,962
and you'll be amazed about

388
00:24:31,016 --> 00:24:34,190
what you can develop and what you can create with Rust.

389
00:24:34,350 --> 00:24:37,910
My experience in dealing with rust in the nuclear world

390
00:24:37,980 --> 00:24:40,150
has been nothing but positive.

391
00:24:42,010 --> 00:24:45,218
There are hitches. There are little ugly spots.

392
00:24:45,314 --> 00:24:49,306
We talk about the asynchronous implementation in Rust that

393
00:24:49,328 --> 00:24:52,682
could use some work. We talk about libraries that

394
00:24:52,736 --> 00:24:56,058
are rough to use. We talk about the trace system, which can be

395
00:24:56,064 --> 00:24:59,574
difficult to understand sometimes, and proc

396
00:24:59,622 --> 00:25:03,114
macros. But we have so many good tools

397
00:25:03,162 --> 00:25:08,062
now. We have so many good resources that

398
00:25:08,196 --> 00:25:11,914
it doesn't, again, give them problems to solve.

399
00:25:11,962 --> 00:25:15,166
And you'll see your individual developers and those

400
00:25:15,188 --> 00:25:19,134
working in Rust just continue to excel and continue to

401
00:25:19,172 --> 00:25:23,406
use this language in a powerful way.

402
00:25:23,588 --> 00:25:26,774
Thank you so much for the opportunity to talk to you today. I really hope

403
00:25:26,812 --> 00:25:30,194
that you enjoyed this presentation. I really hope it's

404
00:25:30,242 --> 00:25:34,294
encouraged you to pick up Rust, see what it can do for you, because I

405
00:25:34,332 --> 00:25:38,118
promise you, in whether it's 510,

406
00:25:38,204 --> 00:25:41,814
15 years from now, Rust will be involved in

407
00:25:41,852 --> 00:25:45,366
nuclear energy and it will be making the world a

408
00:25:45,388 --> 00:25:45,940
safer place.

