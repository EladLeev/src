1
00:00:25,410 --> 00:00:30,920
Our name

2
00:01:52,710 --> 00:01:56,306
you hello there and thank you so much for joining me

3
00:01:56,328 --> 00:02:00,162
here at Conf 42 integrating cloud native security

4
00:02:00,296 --> 00:02:03,842
into the SRE culture. It's really great to be here.

5
00:02:03,896 --> 00:02:07,186
I hope you're enjoying the conference so far. Now,

6
00:02:07,288 --> 00:02:11,054
my name is Anis Oles. I'm the open source developer advocate at acro

7
00:02:11,102 --> 00:02:14,594
security and in this talk I want to

8
00:02:14,712 --> 00:02:18,266
speak about the overlap between site reliability engineering and

9
00:02:18,288 --> 00:02:21,562
cloud native security. How can both benefit from each

10
00:02:21,616 --> 00:02:25,766
other? How can we integrate cloud native security tools best practices

11
00:02:25,958 --> 00:02:29,354
into our site reliability engineering? Now,

12
00:02:29,392 --> 00:02:33,402
last year I was actually working as SRE in between positions

13
00:02:33,466 --> 00:02:37,166
as developer advocate. I'm also a

14
00:02:37,188 --> 00:02:40,846
CNCF ambassador since 2021 and

15
00:02:40,868 --> 00:02:44,494
I have a YouTube channel that you can see here where I talk about cloud

16
00:02:44,532 --> 00:02:48,066
native tools and trend tutorials on how to set them up, how to

17
00:02:48,088 --> 00:02:52,018
use them most effectively. And I have a weekly DevOps newsletter where I

18
00:02:52,024 --> 00:02:55,486
share amazing content from across the space with the

19
00:02:55,528 --> 00:02:59,474
community. So if you are curious, do check those resources

20
00:02:59,522 --> 00:03:03,350
out. You can find all of the links at my twitter.

21
00:03:04,010 --> 00:03:07,654
I also have a puppy. She's just five months old

22
00:03:07,692 --> 00:03:10,694
and she might make a little bit of noise in the background, so I apologize

23
00:03:10,742 --> 00:03:14,054
for that. She's making up for it by being super adorable.

24
00:03:14,102 --> 00:03:17,386
However. Now, last year when I was working

25
00:03:17,408 --> 00:03:20,666
with SRE, the SRE team at

26
00:03:20,688 --> 00:03:23,958
the startup was just about setting up all of the practices

27
00:03:24,134 --> 00:03:26,640
and the SRE culture within the company.

28
00:03:27,250 --> 00:03:30,942
And this is a slide taken from our Kubecon talk

29
00:03:30,996 --> 00:03:34,686
that a manager of mine and I gave in

30
00:03:34,788 --> 00:03:37,730
2021 at Kubecon North America.

31
00:03:38,070 --> 00:03:41,646
And we basically talked about the different Kubernetes operators

32
00:03:41,678 --> 00:03:45,498
that we were using across our infrastructure.

33
00:03:45,694 --> 00:03:49,400
And the infrastructure was very dynamic and very

34
00:03:50,010 --> 00:03:53,894
complex, let's say, because we had basically

35
00:03:54,012 --> 00:03:57,110
several superclusters across different regions across the world,

36
00:03:57,180 --> 00:04:00,506
Frankfurt, New York, London, you name it.

37
00:04:00,608 --> 00:04:04,134
And basically what we had there were compute

38
00:04:04,182 --> 00:04:07,318
racks, and those compute racks were our supercluster.

39
00:04:07,414 --> 00:04:10,534
And in those compute racks we have compute nodes,

40
00:04:10,582 --> 00:04:14,286
and you can see them depicted here as these drawings that these

41
00:04:14,308 --> 00:04:17,774
are all compute nodes and the details will

42
00:04:17,812 --> 00:04:21,242
matter here. But basically tenant clusters, customer clusters

43
00:04:21,306 --> 00:04:24,626
would then be scheduled on those compute nodes within. So we

44
00:04:24,648 --> 00:04:28,398
would have clusters within a large supercluster.

45
00:04:28,494 --> 00:04:32,462
And as you can imagine, you need very advanced

46
00:04:32,526 --> 00:04:36,174
observability tools to get the necessary

47
00:04:36,222 --> 00:04:39,510
insights to understand what is going on. Where, for example,

48
00:04:39,580 --> 00:04:43,574
if a tenant cluster is stuck in some state and

49
00:04:43,612 --> 00:04:46,966
you need to repair it manually, you kind of need to kick it, you need

50
00:04:46,988 --> 00:04:51,340
to know how to identify those tenant clusters right in the

51
00:04:51,950 --> 00:04:55,434
easiest and fastest way possible the thing

52
00:04:55,472 --> 00:04:59,500
is, at the time we were talking a lot about our operator design and

53
00:04:59,950 --> 00:05:03,366
about our observability tools, but we weren't really talking about cloud

54
00:05:03,408 --> 00:05:07,114
native security. So before we go into cloud native

55
00:05:07,162 --> 00:05:10,266
security, I want to talk a little bit more about the SRE culture.

56
00:05:10,298 --> 00:05:14,126
I mentioned that we were really focusing on establishing an SRE culture

57
00:05:14,318 --> 00:05:18,718
and that really focused

58
00:05:18,734 --> 00:05:22,334
on these different areas. The first one is continuous improvement.

59
00:05:22,462 --> 00:05:26,418
You don't want to keep the state of your services the same, even though

60
00:05:26,504 --> 00:05:30,530
things might be working. You want to continuously improve your setup

61
00:05:30,610 --> 00:05:34,440
and the tooling that you have in place to gain insights on your services.

62
00:05:34,970 --> 00:05:37,590
And that's also related to embracing risk.

63
00:05:38,030 --> 00:05:42,566
Of course you want to keep the risk profile low and not deploy

64
00:05:42,598 --> 00:05:47,014
something that might bring out all your infrastructure accidentally.

65
00:05:47,142 --> 00:05:50,590
But ultimately it's a balance between both, because without

66
00:05:50,660 --> 00:05:55,066
embracing risk and taking new step in advancing

67
00:05:55,178 --> 00:05:58,878
your tooling, you can't really improve the tooling itself

68
00:05:58,964 --> 00:06:02,918
and it will slowly deteriorate. Then the other thing is analyze

69
00:06:03,034 --> 00:06:06,690
learnings, analyze your failures and

70
00:06:06,760 --> 00:06:10,526
learn from them. We had lots of incidences

71
00:06:10,718 --> 00:06:14,274
in the early times, so we had

72
00:06:14,312 --> 00:06:18,102
lots of incidences and varying in all times

73
00:06:18,156 --> 00:06:21,574
of severity and degree. We were using tools that at

74
00:06:21,612 --> 00:06:24,360
a scale that haven't been used to that scale before.

75
00:06:24,890 --> 00:06:28,550
So we encountered some really, some edge cases.

76
00:06:28,890 --> 00:06:31,562
So a lot of times we had to sit down with the other companies,

77
00:06:31,616 --> 00:06:35,402
with the other projects and really analyze what has happened. So both

78
00:06:35,456 --> 00:06:38,714
the projects, well, both our company, but also the projects can learn

79
00:06:38,752 --> 00:06:42,346
from that. And the last thing is autonomy. It was my

80
00:06:42,368 --> 00:06:46,154
first SRE role where I had experience in the cloud native

81
00:06:46,202 --> 00:06:50,106
space. I didn't have experience working with production environments,

82
00:06:50,298 --> 00:06:53,614
but I received a lot of autonomy. And I think that was really beneficial to

83
00:06:53,652 --> 00:06:57,102
have that trust and focus within the team. So that's ultimately

84
00:06:57,166 --> 00:07:00,546
what the SRE culture is about. To me. I know

85
00:07:00,568 --> 00:07:04,338
it's different across different teams. You will have different implementations and similar,

86
00:07:04,504 --> 00:07:07,874
but this is kind of what you can think of when you think about the

87
00:07:07,912 --> 00:07:11,526
SRE culture. What is devsecops? Usually I

88
00:07:11,548 --> 00:07:14,774
ask people what devsecops is, but then people are really

89
00:07:14,812 --> 00:07:18,146
shy and really, this is a conference about devsecops.

90
00:07:18,178 --> 00:07:21,354
So I think that everybody has kind of an idea of what

91
00:07:21,392 --> 00:07:25,114
devsecops is. So just think to yourself, okay, this is what I think about

92
00:07:25,232 --> 00:07:28,554
when I hear devsecops. Some people might think about

93
00:07:28,592 --> 00:07:32,014
buzzwords, some people might have specific terminology in mind.

94
00:07:32,132 --> 00:07:36,094
Now I think about integrating security into all of our business functions by

95
00:07:36,132 --> 00:07:38,590
empowering people and creating accountability.

96
00:07:39,330 --> 00:07:42,674
And every word here is kind of, I carefully picked every

97
00:07:42,712 --> 00:07:46,834
word here. So we want to incorporate security into every

98
00:07:46,872 --> 00:07:51,086
business functions, whether that's administration or engineering. Because ultimately,

99
00:07:51,198 --> 00:07:54,882
if everybody's empowered to take ownership of their part

100
00:07:54,936 --> 00:07:58,774
of what they are working with, right, then you can cover all

101
00:07:58,892 --> 00:08:02,594
areas within the business. So it's really about empowering

102
00:08:02,642 --> 00:08:06,262
people to take that ownership, to know what they are supposed to do,

103
00:08:06,396 --> 00:08:10,070
how they can do it, how they can ask for help and similar.

104
00:08:10,220 --> 00:08:13,386
And then when things go wrong,

105
00:08:13,488 --> 00:08:16,986
if they happen or don't happen both ways, if things go good, but also if

106
00:08:17,008 --> 00:08:21,258
things go bad, you then bet, then you can create accountability and

107
00:08:21,424 --> 00:08:24,826
have productive, more productive conversations, right? It's not about finger pointing,

108
00:08:24,858 --> 00:08:28,538
it's about having more productive outcomes in the end. So that's

109
00:08:28,554 --> 00:08:32,602
what devsecops is all about to me, to really

110
00:08:32,676 --> 00:08:36,722
make things happen across the business by

111
00:08:36,856 --> 00:08:41,202
shared ownership. So next

112
00:08:41,256 --> 00:08:44,260
thing, if you're working with anything away from this talk,

113
00:08:45,430 --> 00:08:48,914
it should be that SRE practice and security practices

114
00:08:48,962 --> 00:08:52,710
have a really tight overlap. Ultimately, when we define what healthy services

115
00:08:52,780 --> 00:08:56,406
look like, we should also define what secure services look like,

116
00:08:56,428 --> 00:08:59,994
because only secure services are

117
00:09:00,032 --> 00:09:03,834
healthy services. So that's basically what this

118
00:09:03,872 --> 00:09:06,540
talk is boiling down to.

119
00:09:06,990 --> 00:09:10,442
When I moved from my work as

120
00:09:10,496 --> 00:09:14,058
SRE back into developer advocacy for open source

121
00:09:14,074 --> 00:09:17,946
tools at Aqua Security, I realized that there's such a strong overlap

122
00:09:17,978 --> 00:09:21,514
between both and it just doesn't make sense to completely decouple

123
00:09:21,562 --> 00:09:25,860
them. And I know in many businesses you will have a separate security team.

124
00:09:27,830 --> 00:09:30,962
That's a great thing, right? But at the same time, we should

125
00:09:31,016 --> 00:09:34,222
also see, okay, how can different areas

126
00:09:34,286 --> 00:09:37,682
benefit from each other, and how can we make, for example, something like integrating

127
00:09:37,746 --> 00:09:41,222
security as easy as possible? So the idea is,

128
00:09:41,276 --> 00:09:44,694
start with, if you have an SRE team, if you have people focused on

129
00:09:44,732 --> 00:09:46,840
observability, start with those.

130
00:09:48,650 --> 00:09:51,814
So here SRE, some additional goals that you might have within

131
00:09:51,852 --> 00:09:54,694
your SRE team that are also security goals,

132
00:09:54,822 --> 00:09:58,506
or they're tightly coupled, let's say. So when we

133
00:09:58,528 --> 00:10:02,086
focus about how we can scale our services, we also have to talk

134
00:10:02,128 --> 00:10:05,902
about how can we keep those services secure over time as they become

135
00:10:05,956 --> 00:10:09,406
more complex, as we scale up and down our services based

136
00:10:09,428 --> 00:10:12,670
on demand, our replicas, if they scale,

137
00:10:14,050 --> 00:10:17,646
then we also have to talk about, okay, how can we keep those secure?

138
00:10:17,838 --> 00:10:21,262
The next thing is visibility. Within your observability

139
00:10:21,326 --> 00:10:24,926
tools, you obviously want to gain visibility, insights into what's deployed,

140
00:10:24,958 --> 00:10:28,178
where, how is it deployed, who deployed it, when was it deployed,

141
00:10:28,354 --> 00:10:32,466
how is it interacting with other services? Is it maybe causing failure

142
00:10:32,498 --> 00:10:36,306
in other services? And similar. Those are all questions and topics related

143
00:10:36,338 --> 00:10:39,674
to visibility. Now, when you are getting started with cloud

144
00:10:39,712 --> 00:10:43,126
native security, you want to focus on security scanning,

145
00:10:43,158 --> 00:10:46,874
you want to focus on getting more insights into the

146
00:10:46,912 --> 00:10:50,554
security posture of your services. And all those is also contributing to

147
00:10:50,592 --> 00:10:53,942
how do we gain more visibility into those different areas.

148
00:10:54,086 --> 00:10:57,374
The next thing is reduce noise. And torial, there's something I'm going to talk

149
00:10:57,412 --> 00:11:00,506
about in a little bit more, which is called vulnerability fatigue,

150
00:11:00,618 --> 00:11:04,642
and which basically means that you're bombarded with

151
00:11:04,696 --> 00:11:08,242
security issues and you can't keep up with fixing them or taking

152
00:11:08,296 --> 00:11:11,874
care of all of them. So within your

153
00:11:11,912 --> 00:11:15,410
cloud of security, you want to focus on the most

154
00:11:15,480 --> 00:11:19,078
productive and the most efficient information

155
00:11:19,164 --> 00:11:22,600
that you can take actionable steps from.

156
00:11:23,450 --> 00:11:27,394
Similarly, within your SRE team, you might have thousands,

157
00:11:27,442 --> 00:11:31,430
thousands of logs that you can't filter through, obviously manually.

158
00:11:31,590 --> 00:11:35,574
So similar to that, you want to have processes,

159
00:11:35,622 --> 00:11:38,906
workflows, but also tools in place that help you to reduce that, all that

160
00:11:38,928 --> 00:11:42,890
noise. The next thing is automation. Automation is great for

161
00:11:42,960 --> 00:11:46,522
different aspects. It's making our lives obviously easier.

162
00:11:46,586 --> 00:11:49,726
But I'm going to talk a bit about the downsides of automation and what we

163
00:11:49,748 --> 00:11:53,650
have to be careful about when we do automation for

164
00:11:53,800 --> 00:11:57,778
SOE work, for observability tools, but also for cloud native security.

165
00:11:57,944 --> 00:12:00,530
The last thing is what I already mentioned, ownership,

166
00:12:01,030 --> 00:12:04,450
communication is key for both areas.

167
00:12:05,110 --> 00:12:09,190
So here SRE, some of the more practical items that SRE just

168
00:12:09,340 --> 00:12:12,854
what a lot of SOE teams do, what we can also

169
00:12:12,892 --> 00:12:16,166
adapt for our cloud native security. Getting started with

170
00:12:16,188 --> 00:12:19,710
cloud native security, the first one is investing in runbooks and documentation.

171
00:12:19,890 --> 00:12:23,622
So when we define how to respond to different types of incidents,

172
00:12:23,766 --> 00:12:27,974
when to escalate an incident, what steps to take during an incident,

173
00:12:28,102 --> 00:12:31,434
the same thing we can do for any security

174
00:12:31,552 --> 00:12:35,614
issues that we might have within our tooling. So we

175
00:12:35,652 --> 00:12:39,146
could, for example, define okay, if there's a critical vulnerability, what steps

176
00:12:39,178 --> 00:12:42,846
have to happen, who has to take those steps in similar then

177
00:12:42,948 --> 00:12:46,562
the other items. SRE really also something that can be

178
00:12:46,696 --> 00:12:50,338
adapted for both teams. If you have different teams, if you

179
00:12:50,344 --> 00:12:54,242
have security teams or people focus on security versus people

180
00:12:54,296 --> 00:12:58,654
focused on site reliability engineering, or you can integrate

181
00:12:58,702 --> 00:13:02,326
one into the other. So here SRE, some of

182
00:13:02,348 --> 00:13:06,070
the tools that we used in that startup that I mentioned

183
00:13:06,140 --> 00:13:09,418
where I was working, SRe. So the observability tools are

184
00:13:09,424 --> 00:13:13,770
really like your standard stack, I would say. With Grafana and Prometheus Jaeger,

185
00:13:14,350 --> 00:13:17,946
we tried to install temple. We used Grafana Loki for

186
00:13:17,968 --> 00:13:21,610
logs. For management, we mainly used helm and terraform.

187
00:13:21,690 --> 00:13:25,774
It was very much helm terraform focus and

188
00:13:25,812 --> 00:13:29,338
then we used GitLab CI CD pipelines.

189
00:13:29,434 --> 00:13:33,550
But we talked a lot about these different tools and the different integrations

190
00:13:33,630 --> 00:13:36,526
and installation of those different tools.

191
00:13:36,558 --> 00:13:39,630
However, we didn't talk about security tools.

192
00:13:39,710 --> 00:13:43,060
That's like something we didn't really talk about. We had at some point,

193
00:13:44,390 --> 00:13:47,766
I mean, we were following security best practices, right? Like, don't think we

194
00:13:47,788 --> 00:13:51,430
were not. But at some point we had an intern

195
00:13:51,500 --> 00:13:55,126
who was a university student who was helping us

196
00:13:55,148 --> 00:13:58,502
implement tools such as Kubebench

197
00:13:58,566 --> 00:14:01,180
from Aqua Security as well. Now,

198
00:14:01,630 --> 00:14:05,974
just quickly mentioning every tool that I showcase

199
00:14:06,022 --> 00:14:09,286
here from Aqua, these are all Aqua's open source

200
00:14:09,318 --> 00:14:12,606
tools. I am not promoting any enterprise tools in

201
00:14:12,628 --> 00:14:16,366
this talk. So you

202
00:14:16,388 --> 00:14:19,434
don't have to sign up. It's all used for free on GitHub.

203
00:14:19,562 --> 00:14:21,600
You're not sending us any data. Similar.

204
00:14:22,290 --> 00:14:25,794
So since there is so little conversation about how we

205
00:14:25,832 --> 00:14:29,266
can actually get started with cloud native security, for example

206
00:14:29,368 --> 00:14:32,962
in your SRE team and similar,

207
00:14:33,096 --> 00:14:36,760
I've thought about okay, here are different steps that you can take.

208
00:14:37,130 --> 00:14:40,274
It's one approach, right? There are different approaches.

209
00:14:40,322 --> 00:14:43,666
This might be one approach. So we're

210
00:14:43,698 --> 00:14:47,382
going to focus as security scanner. As our main

211
00:14:47,436 --> 00:14:50,858
security tool, we're going to focus on Trivi. Trivi is an all in one security

212
00:14:50,944 --> 00:14:54,218
scanner. All in one because it can scan all of

213
00:14:54,224 --> 00:14:58,470
those different scan targets. It also has s Bom

214
00:14:58,550 --> 00:15:01,802
functionality features and cloud

215
00:15:01,856 --> 00:15:05,274
provider account scanning, starting with AWS. It also can do

216
00:15:05,312 --> 00:15:09,114
in cluster scanning of running workflows. So it's a very, very versatile

217
00:15:09,162 --> 00:15:13,230
tool that's focused on different users and different workflows.

218
00:15:13,570 --> 00:15:17,598
So step one in our ten step journey

219
00:15:17,694 --> 00:15:21,234
is understanding your need. That's really important because if you have no

220
00:15:21,272 --> 00:15:24,530
idea what you're actually aiming for, then you don't know what to look out for,

221
00:15:24,600 --> 00:15:28,086
right? So our need will be influenced before we can

222
00:15:28,108 --> 00:15:32,130
define our need. We have to be aware of the influencing

223
00:15:32,210 --> 00:15:36,006
factors on that, on our goals, on what

224
00:15:36,028 --> 00:15:39,494
we actually need to accomplish. So the first

225
00:15:39,532 --> 00:15:42,890
one is the size of our team, right? If you are working as an individual

226
00:15:42,960 --> 00:15:46,630
contributor, the needs for the different tools

227
00:15:46,790 --> 00:15:50,630
and the way that you need to integrate security tooling

228
00:15:50,710 --> 00:15:54,494
and practices will be different. If you're working within a large scale team,

229
00:15:54,612 --> 00:15:57,440
the next thing is the industry you're already working with.

230
00:15:57,890 --> 00:16:01,166
Is it a highly regulated industry that requires you to choose

231
00:16:01,268 --> 00:16:04,350
specific tools, work with a specific

232
00:16:04,420 --> 00:16:08,162
stack? Or are you working for a startup where it just makes things work

233
00:16:08,216 --> 00:16:11,906
in the best way possible with the tools available, then the

234
00:16:11,928 --> 00:16:15,106
type of technologies you're working with, it's also related to the

235
00:16:15,128 --> 00:16:18,914
integrating that are available. Do you need to have a custom setup with your

236
00:16:18,952 --> 00:16:22,134
custom on premise infrastructure that

237
00:16:22,252 --> 00:16:25,698
your need will be quite different to somebody who's managing

238
00:16:25,714 --> 00:16:29,770
can open source project for example, or managing,

239
00:16:33,470 --> 00:16:36,394
I don't know, a small retail website.

240
00:16:36,512 --> 00:16:40,114
Right then the company goals and leadership.

241
00:16:40,262 --> 00:16:44,046
A lot of times security, whether to acquire the skills or

242
00:16:44,068 --> 00:16:47,530
the tools, is related to having budgets and expertise,

243
00:16:47,610 --> 00:16:51,214
right? It's usually something that people keep

244
00:16:51,412 --> 00:16:55,262
as last thing to do to take care of, which is obviously

245
00:16:55,316 --> 00:16:58,946
an issue. But yeah, it's one of the factors that you want to

246
00:16:58,968 --> 00:17:02,094
take into account. It doesn't mean when you want to get started with cloud native

247
00:17:02,142 --> 00:17:05,858
security and integrating cloud native security, it doesn't mean you need to have a

248
00:17:05,864 --> 00:17:08,774
budget and expertise already available within your team.

249
00:17:08,892 --> 00:17:12,594
It just means that that is one of the factors that can influence

250
00:17:12,642 --> 00:17:16,646
which tools you're using in the end. Now tools will

251
00:17:16,668 --> 00:17:19,974
differ in different ways. That's also something you want to keep in mind. The first

252
00:17:20,012 --> 00:17:23,322
one is the installation. Different tools are installed differently. A lot of the

253
00:17:23,376 --> 00:17:26,774
cloud native security scanners are used as CLI tools,

254
00:17:26,822 --> 00:17:30,646
so you use them either in your local terminal or in your CI CD

255
00:17:30,678 --> 00:17:34,422
pipeline. Other tools come as Kubernetes operators

256
00:17:34,486 --> 00:17:37,914
and other Kubernetes resources and can be installed within your cluster.

257
00:17:38,042 --> 00:17:41,374
Now you want to be worried about the tools that do something within

258
00:17:41,412 --> 00:17:45,038
your cluster because security scanners will need lots

259
00:17:45,054 --> 00:17:48,626
and lots of privileges within your cluster to perform proper security

260
00:17:48,728 --> 00:17:51,906
scanning. So whenever you are signing up to a

261
00:17:51,928 --> 00:17:55,170
tool and you give it access to your cluster,

262
00:17:55,670 --> 00:17:58,634
you want to be mindful of what is it actually doing within your cluster,

263
00:17:58,702 --> 00:18:02,034
who's getting that data from those scans versus

264
00:18:02,082 --> 00:18:05,318
if you install, for example, an open source Kubernetes operator within your

265
00:18:05,324 --> 00:18:09,058
cluster and it performs just the scans within your cluster and the reports

266
00:18:09,074 --> 00:18:12,394
and resources of the scans are only available within the cluster. Then you know

267
00:18:12,432 --> 00:18:15,530
it's really contained there within your existing environment.

268
00:18:15,950 --> 00:18:19,450
Next thing is scan coverage. We get lots of questions

269
00:18:19,520 --> 00:18:22,878
in trivia, in the project issues and so on,

270
00:18:23,044 --> 00:18:26,766
where people asking why does this scan from Trivi differ from

271
00:18:26,788 --> 00:18:30,346
that can from another tool? And basically Trivi

272
00:18:30,378 --> 00:18:34,058
has a trivia database which is a separate project under the Aqua open source

273
00:18:34,074 --> 00:18:37,390
umbrella and it's pulling from different data sources,

274
00:18:37,550 --> 00:18:41,106
for example, list of vulnerabilities. Then the next thing

275
00:18:41,128 --> 00:18:44,706
is on how tools differ in quite a significant way is the

276
00:18:44,728 --> 00:18:47,470
number of integrations and the type of integrations available,

277
00:18:47,640 --> 00:18:50,482
especially if you're going with an open source security scanner.

278
00:18:50,546 --> 00:18:53,350
You want to be mindful of the integrations that are available,

279
00:18:53,500 --> 00:18:56,962
so more mature scanners will have more integrations

280
00:18:57,026 --> 00:19:00,780
available. Usually the last thing is the focus.

281
00:19:01,150 --> 00:19:04,778
Different tools are focused on different people, different type of audiences. Some might

282
00:19:04,784 --> 00:19:07,930
be focused on security professionals, others are focused on engineers.

283
00:19:08,670 --> 00:19:12,830
So here is can example of need

284
00:19:12,900 --> 00:19:16,506
driven development from device engineering

285
00:19:16,538 --> 00:19:19,886
blog. They basically detailed how they changed their security

286
00:19:19,988 --> 00:19:23,374
scanning to gain better insight into the security posture of their

287
00:19:23,412 --> 00:19:26,754
services. And here are the four goals that they want to accomplish with

288
00:19:26,792 --> 00:19:30,574
that change. The first one is assign ownership of vulnerabilities.

289
00:19:30,702 --> 00:19:33,714
They wanted to have people, different people within the team,

290
00:19:33,832 --> 00:19:37,714
take ownership of different vulnerabilities. So actually somebody,

291
00:19:37,912 --> 00:19:42,066
it's going to be somebody's job to take care and fix that vulnerability.

292
00:19:42,258 --> 00:19:45,430
The next thing is they want to have a global view of the security state

293
00:19:45,500 --> 00:19:48,918
of services. And that's very important because only if you have

294
00:19:48,924 --> 00:19:52,566
a global view, that's not helpful to analyze

295
00:19:52,598 --> 00:19:55,706
specific services, right? And to fix specific service, but only

296
00:19:55,728 --> 00:20:00,022
if you have a global view, you can then see how

297
00:20:00,176 --> 00:20:03,418
other changes, wider changes, for example in your workflows.

298
00:20:03,514 --> 00:20:06,762
Adopting other tools, external tools, has an impact

299
00:20:06,906 --> 00:20:10,602
on your overall security posture.

300
00:20:10,746 --> 00:20:13,770
Then they want to develop dashboards for different users and requirements,

301
00:20:13,850 --> 00:20:17,938
and that's more related to breaking down the security issues

302
00:20:18,024 --> 00:20:21,586
related to specific services. And they want to overcome difficult to

303
00:20:21,608 --> 00:20:25,870
use in different uis. A lot of times in the cloud native ecosystem, whenever you're

304
00:20:25,950 --> 00:20:29,510
using a new tool, you're adopting a new workflows

305
00:20:29,850 --> 00:20:33,682
and you're adopting a new UI and interface and frameworks,

306
00:20:33,746 --> 00:20:37,510
and that takes time to first of all get used to them, to learn

307
00:20:37,580 --> 00:20:41,846
your way around it, and you will always then have to do something separate

308
00:20:41,878 --> 00:20:45,222
to what you have already been doing. So they wanted to integrate

309
00:20:45,286 --> 00:20:49,114
their tools, their tooling, their security tools into their existing workflows. To have

310
00:20:49,152 --> 00:20:52,414
just this one thing

311
00:20:52,452 --> 00:20:56,046
to go to. Then step two, once we

312
00:20:56,068 --> 00:20:58,160
know what we actually want to do,

313
00:20:59,730 --> 00:21:04,094
what we want to achieve, and how different tools differ and

314
00:21:04,132 --> 00:21:07,538
so on, and what factors we have to keep in mind, we want to choose

315
00:21:07,624 --> 00:21:10,930
a cloud native security scanner. Now here

316
00:21:11,000 --> 00:21:15,006
is a list of different cloud native open source security scanners

317
00:21:15,038 --> 00:21:18,630
in the space. And they SRE focused on different types of scanning. For example,

318
00:21:18,700 --> 00:21:22,774
some SRE just focused on vulnerability scanning, others are focused on infrastructure as

319
00:21:22,812 --> 00:21:27,042
code misconfiguration scannings. Others are compliance scans.

320
00:21:27,186 --> 00:21:30,518
Now compliance scans, for example, would likely more

321
00:21:30,604 --> 00:21:34,454
be used by security professionals versus in cluster

322
00:21:34,502 --> 00:21:38,166
scans might also then be used by cluster admins.

323
00:21:38,358 --> 00:21:43,130
As you can see, trivia is really across those different areas

324
00:21:43,790 --> 00:21:46,986
since it's an all in one security scanner. It does lots

325
00:21:47,018 --> 00:21:50,126
of different things, but if you just need vulnerability scanning, you might want to

326
00:21:50,148 --> 00:21:54,130
consider, for example, another tool that focuses on vulnerability scanning.

327
00:21:54,550 --> 00:21:58,178
And here's the list. Now once we have

328
00:21:58,264 --> 00:22:01,902
looked at the different scanners, in our case we're going with trivia

329
00:22:02,046 --> 00:22:05,474
because I'm familiar with trivia. We want to set it up

330
00:22:05,512 --> 00:22:09,186
and make sure everything is running properly. And sometimes you

331
00:22:09,208 --> 00:22:12,886
might go with one scanner and then you set it

332
00:22:12,908 --> 00:22:15,686
up and you play around with it and you realize it's not the right tool

333
00:22:15,788 --> 00:22:18,838
either because the workflow is not intuitive for you or

334
00:22:18,924 --> 00:22:22,122
something is just not working and it's completely fine to go back to step two

335
00:22:22,176 --> 00:22:25,786
and be like, okay, we actually want to use a different scanner now.

336
00:22:25,808 --> 00:22:29,130
In our case we're using trivia now we want to make sure it's working

337
00:22:29,200 --> 00:22:32,606
properly. So the first thing is identify the best installation options.

338
00:22:32,708 --> 00:22:36,026
Also trivia comes in different installation options. Now I usually go with helm

339
00:22:36,058 --> 00:22:39,834
installation inside of my cluster in addition to having automated

340
00:22:39,882 --> 00:22:43,406
CI CD pipeline scanning, then you want to decide

341
00:22:43,438 --> 00:22:46,766
upon a different configuration. For example, if you're

342
00:22:46,798 --> 00:22:50,574
using trivia in combination with observability tools such as Prometheus,

343
00:22:50,622 --> 00:22:53,860
you have to configure some parts slightly different.

344
00:22:55,030 --> 00:22:58,694
You then want to test those custom configurations and

345
00:22:58,732 --> 00:23:02,038
ensure that it's working properly with all tools that it's supposed to

346
00:23:02,044 --> 00:23:05,234
work with. So for example, if you have some niche

347
00:23:05,282 --> 00:23:08,440
cases where trivia is supposed to perform,

348
00:23:09,130 --> 00:23:13,398
I don't know, a thousand vulnerability

349
00:23:13,494 --> 00:23:16,060
scans of different containers, right?

350
00:23:17,870 --> 00:23:21,126
And then on a regular basis, something like that, like some really edge

351
00:23:21,158 --> 00:23:24,302
case, you want to test it out in a small

352
00:23:24,356 --> 00:23:27,966
environment first before and that's with every tool, right? You want to

353
00:23:27,988 --> 00:23:31,870
test out your specific edge case in a small environment before

354
00:23:31,940 --> 00:23:34,690
you implement it in a large scale environment.

355
00:23:35,990 --> 00:23:39,454
Now here is an overview, very simplified overview of a Kubernetes

356
00:23:39,502 --> 00:23:43,566
cluster, how that might look like once you installed trivia,

357
00:23:43,678 --> 00:23:47,246
the first thing is you have like maybe an application namespace

358
00:23:47,278 --> 00:23:51,206
with all your application related resources. Then you have a monitoring namespace with

359
00:23:51,228 --> 00:23:54,406
your Prometheus Grafana, other observability tools and

360
00:23:54,428 --> 00:23:57,906
then you have your trivia system namespace with the trivia operator. Now the trivia

361
00:23:57,938 --> 00:24:01,494
operator is that part of trivia that does continuous in cluster

362
00:24:01,542 --> 00:24:03,530
scanning of your running workloads.

363
00:24:05,470 --> 00:24:08,934
In addition to that, you could then also use trivia, the CLI

364
00:24:08,982 --> 00:24:12,486
tool in your CSCD pipeline or also on your developer

365
00:24:12,518 --> 00:24:16,394
machines. The beautiful thing is if everything is a Kubernetes resource,

366
00:24:16,442 --> 00:24:20,286
you can then use the same processes across your stack. So for

367
00:24:20,308 --> 00:24:23,946
example, here you can use the same processes if everything is a Helmchart

368
00:24:23,978 --> 00:24:27,506
processes Grafana as a Helmchart to view operators and Helmchart you can

369
00:24:27,528 --> 00:24:31,294
deploy and manage those applications through the same processes,

370
00:24:31,422 --> 00:24:34,866
which is really nice, really handy. So here's what you

371
00:24:34,888 --> 00:24:37,990
will then see inside of your trivia system namespace.

372
00:24:38,970 --> 00:24:42,466
Now alongside the trivia

373
00:24:42,498 --> 00:24:45,762
operator you will then have also several kubernetes,

374
00:24:45,826 --> 00:24:49,798
custom resource definitions, deployed crds

375
00:24:49,894 --> 00:24:53,418
and they basically extend the Kubernetes API to

376
00:24:53,504 --> 00:24:56,250
allow for custom security scans.

377
00:24:56,830 --> 00:25:00,086
So here we have the metrics of our different security scans.

378
00:25:00,198 --> 00:25:04,126
Trivia does vulnerability scans of any container image it

379
00:25:04,148 --> 00:25:07,866
finds inside of your cluster. It does exposed secret scans.

380
00:25:07,898 --> 00:25:11,166
Are there any exposed secrets within your cluster then?

381
00:25:11,268 --> 00:25:14,650
Is there any RBAC misconfigured,

382
00:25:14,810 --> 00:25:17,726
any role based access control that should be changed?

383
00:25:17,758 --> 00:25:21,294
Maybe. And then it also does config audit scans.

384
00:25:21,422 --> 00:25:24,946
Now the thing is, things might change dynamically and

385
00:25:24,968 --> 00:25:28,342
it shouldn't. And inside of your cluster, right, like people might change things

386
00:25:28,396 --> 00:25:32,386
around manually, they might try out things, they might deploy set containers

387
00:25:32,418 --> 00:25:35,942
to debug things. I don't know what your company or team does,

388
00:25:35,996 --> 00:25:39,866
right? But trivia will then identify any misconfigurations that

389
00:25:39,888 --> 00:25:44,074
are present within your cluster of those newly set up resources and

390
00:25:44,112 --> 00:25:47,946
can alert you on those. Now these

391
00:25:47,968 --> 00:25:51,866
SRE, just the metrics from

392
00:25:51,888 --> 00:25:55,066
the security scans, from the security reports, the security reports

393
00:25:55,098 --> 00:25:59,198
itself, they are just other Kubernetes resources. They are yammer manifests, the security

394
00:25:59,284 --> 00:26:02,878
reports and you can read them like Yaml manifests. And then because they

395
00:26:02,884 --> 00:26:06,738
are yama manifests, they are kubernetes resources to security

396
00:26:06,824 --> 00:26:10,370
reports. You can export them. For example, you can get the metrics out

397
00:26:10,440 --> 00:26:13,838
and then you can integrate them to your observability stack.

398
00:26:13,934 --> 00:26:16,698
That's the next step, setting up a dashboard.

399
00:26:16,814 --> 00:26:20,390
So we have Grafana Prometheus installed, we have our security

400
00:26:20,460 --> 00:26:24,002
tools installed. It's time to set up a nice dashboard.

401
00:26:24,146 --> 00:26:28,026
This is the dashboard created by the community where we have

402
00:26:28,128 --> 00:26:31,642
a summary of our different vulnerabilities and

403
00:26:31,696 --> 00:26:34,906
they are broken down in severity. So in total we

404
00:26:34,928 --> 00:26:38,170
have 175 vulnerabilities in our cluster.

405
00:26:38,750 --> 00:26:42,090
Now you can also see all of the other metrics

406
00:26:42,250 --> 00:26:45,470
directly through a dashboard as well in Grafana.

407
00:26:45,810 --> 00:26:49,518
And basically by breaking out those different

408
00:26:49,604 --> 00:26:53,086
vulnerabilities into different categories, it then makes it easier to

409
00:26:53,108 --> 00:26:56,626
identify the different types of vulnerabilities that

410
00:26:56,648 --> 00:27:00,626
you have. Now the next thing is, what you might think

411
00:27:00,728 --> 00:27:04,546
already be thinking about is how do you avoid vulnerability? Hell, because if

412
00:27:04,568 --> 00:27:08,086
you have 175 different vulnerabilities, how do

413
00:27:08,108 --> 00:27:11,400
you go about addressing them, how do you go about managing them? Those are,

414
00:27:12,970 --> 00:27:16,770
I'm not swearing, those are a lot of vulnerabilities

415
00:27:16,850 --> 00:27:20,646
here, right? That we can't manage all

416
00:27:20,668 --> 00:27:23,906
at once. Here's a screenshot from Alex Jones

417
00:27:23,938 --> 00:27:28,906
on Twitter saying I just give up and I

418
00:27:28,928 --> 00:27:32,522
just give up and die. No, then difficult sentence.

419
00:27:32,586 --> 00:27:36,346
Anyway, so he scanned

420
00:27:36,378 --> 00:27:39,626
a research, I don't know what type of research he actually scanned, but he scanned

421
00:27:39,658 --> 00:27:43,118
a research with sneak and found

422
00:27:43,204 --> 00:27:47,054
over 550 different vulnerabilities. And they are broken

423
00:27:47,102 --> 00:27:51,150
down in critical, high, medium and low as well. But still there's

424
00:27:51,230 --> 00:27:55,182
lots of vulnerabilities you can't look at 550 vulnerabilities

425
00:27:55,246 --> 00:27:58,874
or similar, right? Doesn't work. So here are some practical

426
00:27:58,942 --> 00:28:02,450
steps that you can take. First one is ignore all but critical vulnerabilities.

427
00:28:02,530 --> 00:28:05,830
He only has three critical vulnerabilities that's easy to address.

428
00:28:05,900 --> 00:28:09,030
Just take care of the critical vulnerabilities first, and then

429
00:28:09,180 --> 00:28:12,566
look in a more productive way at the rest. Don't scan

430
00:28:12,598 --> 00:28:15,946
everything at once. I don't know if they scan just one resource or if you

431
00:28:15,968 --> 00:28:19,466
scan multiple resources, but there's really no need to scan everything at

432
00:28:19,488 --> 00:28:23,020
once. Just scan the most critical workloads first.

433
00:28:23,410 --> 00:28:27,146
Filter by vulnerabilities with known fixture trivia allows

434
00:28:27,178 --> 00:28:30,574
you easily, with an additional flag to just specify that you only want to see

435
00:28:30,612 --> 00:28:34,034
vulnerabilities that already have a fix available. So you could

436
00:28:34,072 --> 00:28:37,314
go ahead and do that. Just look

437
00:28:37,352 --> 00:28:41,406
at those vulnerabilities first, then filter vulnerabilities

438
00:28:41,438 --> 00:28:45,154
by team and by application. Really make them team and application specific. Give them

439
00:28:45,192 --> 00:28:48,566
context. Give them meaning that they are not just like a line of text of

440
00:28:48,588 --> 00:28:51,686
something that's wrong with any resources, right? That's ultimately what

441
00:28:51,708 --> 00:28:55,346
you don't want to have. And that's also related to device engineering blog

442
00:28:55,378 --> 00:28:58,822
post needs, right? So next

443
00:28:58,876 --> 00:29:02,162
thing, step six, what are metrics without alerts?

444
00:29:02,306 --> 00:29:05,622
The thing is, and this is related to what I said earlier about automation,

445
00:29:05,686 --> 00:29:08,458
that I want to talk a little bit more about automation after I take a

446
00:29:08,464 --> 00:29:10,410
sip of coffee.

447
00:29:12,530 --> 00:29:15,470
Sorry, my throat is still a bit messed up from a cold.

448
00:29:16,210 --> 00:29:19,818
So basically, when we define

449
00:29:19,834 --> 00:29:23,626
our deployment resources, you need to define your deployment resources to deploy

450
00:29:23,658 --> 00:29:27,182
your application, right? That's a necessity. Otherwise your application is not deployed,

451
00:29:27,246 --> 00:29:30,750
it's not working, customers can't access it, customers are unhappy,

452
00:29:30,910 --> 00:29:35,234
right? You don't want that. So the thing is,

453
00:29:35,352 --> 00:29:39,538
you then need to obviously define those deployment resources. But the same doesn't

454
00:29:39,554 --> 00:29:43,426
hold true for security, right? You don't need to define

455
00:29:43,618 --> 00:29:47,746
how you scan your resources, you don't need to define like scan

456
00:29:47,778 --> 00:29:51,298
coverage. I don't know, all those things related to security you don't

457
00:29:51,314 --> 00:29:54,666
need to do to deploy your application, to have it working to make customers

458
00:29:54,768 --> 00:29:58,218
happy. Customers are only unhappy when things go wrong in the security

459
00:29:58,304 --> 00:30:01,370
world, right? Like when their data is ultimately exposed.

460
00:30:01,710 --> 00:30:06,638
So it's not a necessity for engineers, for anyone

461
00:30:06,724 --> 00:30:10,078
operating an application, operating a business to actually take care of the

462
00:30:10,084 --> 00:30:13,822
security of that. I mean, most of the services that you use online, you probably

463
00:30:13,876 --> 00:30:17,506
don't know what kind of critical vulnerabilities are within, and you

464
00:30:17,528 --> 00:30:20,834
shouldn't have to care about that. That's something for the business to care

465
00:30:20,872 --> 00:30:24,914
about. But that's exactly why you want to set

466
00:30:24,952 --> 00:30:28,550
up alerts and make your vulnerabilities scream at you,

467
00:30:28,620 --> 00:30:31,750
right? Give them a voice, make them,

468
00:30:31,900 --> 00:30:34,760
set them up in such a way that you cannot ignore them.

469
00:30:35,290 --> 00:30:39,206
So once you do that, you can correlate

470
00:30:39,238 --> 00:30:43,882
metrics. So, for example, if you have a new critical vulnerability here,

471
00:30:43,936 --> 00:30:45,690
new vulnerabilities introduced,

472
00:30:47,310 --> 00:30:50,650
we can then correlate that dashboard from our vulnerabilities,

473
00:30:50,730 --> 00:30:54,222
from our misconfiguration issues that went up with our

474
00:30:54,276 --> 00:30:58,126
deployment dashboards and see, okay, how do those, what happened

475
00:30:58,228 --> 00:31:01,354
in our cluster, there's a new deployment,

476
00:31:01,402 --> 00:31:04,506
there's a new replica set, okay, that caused

477
00:31:04,538 --> 00:31:08,210
the vulnerabilities to go up to have more inside of the cluster.

478
00:31:08,630 --> 00:31:11,778
Step eight is some additional tips that you can do,

479
00:31:11,864 --> 00:31:15,106
and some are iterating on the previous ones that I already mentioned. First one is

480
00:31:15,128 --> 00:31:17,806
assign ownership, really make it somebody's responsibility.

481
00:31:17,998 --> 00:31:22,054
And ideally, the person who's already managing that resource should look at its

482
00:31:22,092 --> 00:31:25,378
vulnerabilities. Don't introduce tools, many new tools

483
00:31:25,394 --> 00:31:28,646
at once. That's something lots of people want to do when they get started with.

484
00:31:28,668 --> 00:31:32,090
For example, cloud native security is implemented everywhere and everything

485
00:31:32,160 --> 00:31:35,078
at once, and that's complete overload,

486
00:31:35,254 --> 00:31:38,426
and people are likely not going to be able to adapt to

487
00:31:38,448 --> 00:31:41,986
those new processes. The next thing is utilize existing workflows,

488
00:31:42,038 --> 00:31:45,166
platforms and processes. Utilize it as much as

489
00:31:45,188 --> 00:31:49,120
possible because it makes it easier for people to actually look at the security

490
00:31:49,810 --> 00:31:53,186
reports. In that case, step nine is optimize based on what

491
00:31:53,208 --> 00:31:56,802
works for your team. A lot of times we can follow

492
00:31:56,856 --> 00:32:00,162
the initial setup, follow whatever company said,

493
00:32:00,216 --> 00:32:04,626
but ultimately every application will

494
00:32:04,648 --> 00:32:07,782
be differently deployed depending on your environment. A lot of times when I get questions

495
00:32:07,836 --> 00:32:10,934
about trivia operator specifically and its

496
00:32:10,972 --> 00:32:11,830
deployment,

497
00:32:14,650 --> 00:32:19,626
I cannot answer those questions before I get more information on

498
00:32:19,648 --> 00:32:23,386
your setup, on your environment, on your needs, on all

499
00:32:23,408 --> 00:32:27,114
those different pipes that play a role right because

500
00:32:27,232 --> 00:32:30,734
ultimately my answer will defer based on how

501
00:32:30,772 --> 00:32:34,266
your setup looks like and what applications you're

502
00:32:34,298 --> 00:32:38,062
already using in simulam. So there's really no one thing

503
00:32:38,196 --> 00:32:42,190
works for everybody. And step ten

504
00:32:42,340 --> 00:32:46,098
downstop at security scanning there sre lots of different types of

505
00:32:46,184 --> 00:32:48,820
security tools in the cloud native space.

506
00:32:49,510 --> 00:32:53,154
So for example, Tracy is a runtime security and forensic tool that

507
00:32:53,192 --> 00:32:56,402
analyzes events on the node level.

508
00:32:56,536 --> 00:33:00,134
So it can basically, while Chevy can scan any

509
00:33:00,172 --> 00:33:03,590
misconfigurations once they have happened inside of your cluster,

510
00:33:04,410 --> 00:33:07,766
Tracy can detect if somebody uses a misconfiguration to do something they

511
00:33:07,788 --> 00:33:11,274
shouldn't do. Those are the main differences. So here you can see just

512
00:33:11,312 --> 00:33:15,098
a dashboard of its different logs. Now you would want to obviously

513
00:33:15,264 --> 00:33:19,882
filter them more in different ways to actually then have

514
00:33:19,936 --> 00:33:23,306
actionable steps to those logs. Because over 2000 logs,

515
00:33:23,338 --> 00:33:27,120
that's nothing you can really follow up on.

516
00:33:27,650 --> 00:33:31,054
And here sre some of the resources used the

517
00:33:31,092 --> 00:33:35,354
blog post from wise Engineering on their application security journey.

518
00:33:35,482 --> 00:33:38,686
Then on the AG for open source YouTube channel we have lots of different tutorials

519
00:33:38,718 --> 00:33:42,546
to get started with. Here's the trivia GitHub repository and the

520
00:33:42,568 --> 00:33:46,146
trivia operator repository. If you Google trivia trivia operator, you should

521
00:33:46,168 --> 00:33:50,120
find it as well. And here's a demo project that I've been using

522
00:33:50,570 --> 00:33:53,846
on GitHub as well, and you can find us on

523
00:33:53,868 --> 00:33:57,186
slack if you have any questions about this presentation,

524
00:33:57,378 --> 00:34:01,222
about anything I said, or about trivia and other

525
00:34:01,276 --> 00:34:03,990
projects within the aqua ecosystem.

526
00:34:04,650 --> 00:34:08,406
Now, I hope we have some time for questions. Otherwise, thank you so much

527
00:34:08,508 --> 00:34:12,046
for attending my talk. I hope you have can amazing rest of your day and

528
00:34:12,068 --> 00:34:13,006
to see you soon.

