1
00:01:15,410 --> 00:01:29,346
Saudi

2
00:01:29,378 --> 00:01:32,454
2022. My name is Handoyo Sutanto. I am the CEO of

3
00:01:32,492 --> 00:01:35,766
Lyrid. I'm so excited to be here today as this is

4
00:01:35,788 --> 00:01:39,238
my first time speaking at Cloud native and let me tell you

5
00:01:39,244 --> 00:01:43,198
a little bit about my self I'm a software engineer solution platform

6
00:01:43,284 --> 00:01:47,022
engineer by true father of two and prior to starting

7
00:01:47,076 --> 00:01:50,650
Lyrid I was a director of platform engineering.

8
00:01:50,810 --> 00:01:54,814
I have spent more than 15 years building cloud solution from the ground

9
00:01:54,862 --> 00:01:59,234
up. I build everything from a data center infrastructure to

10
00:01:59,272 --> 00:02:03,506
a globally available applications and web services and

11
00:02:03,528 --> 00:02:07,110
two years ago I started lit as an idea on how

12
00:02:07,180 --> 00:02:11,026
to seamlessly integrate and deploy cloud infrastructure

13
00:02:11,218 --> 00:02:14,882
using cloud agnostic technology while breaking

14
00:02:14,946 --> 00:02:18,826
any reliance on any one cloud vendor. So in this talk

15
00:02:18,928 --> 00:02:22,422
we will walk you through on what it takes to build a scalable

16
00:02:22,486 --> 00:02:25,802
solution, applications or web services that

17
00:02:25,856 --> 00:02:28,490
utilizes cloud agnostic design principle,

18
00:02:28,830 --> 00:02:32,810
the four keys engineering decisions that we took to make it happen and

19
00:02:32,880 --> 00:02:36,334
what is the outcome for us. And by the end of this talk

20
00:02:36,452 --> 00:02:40,314
you will learn about the pros and cons of going cloud agnostic

21
00:02:40,442 --> 00:02:43,950
and have more actionable tips on how to implement

22
00:02:44,110 --> 00:02:47,282
cloud agnostic in your organization. If you learn anything

23
00:02:47,336 --> 00:02:51,074
interesting, please tag me at hondus Twitter and

24
00:02:51,112 --> 00:02:54,642
use the Con 42 hashtag. Let's start with

25
00:02:54,696 --> 00:02:57,170
what does it mean to be cloud agnostic?

26
00:02:57,830 --> 00:03:01,606
By its most basic definition, a cloud computing is

27
00:03:01,628 --> 00:03:05,334
the delivery of services such as compute, databases and

28
00:03:05,372 --> 00:03:08,854
networking over the Internet, offering faster

29
00:03:08,902 --> 00:03:12,730
delivery and innovation to vendors like Google Cloud,

30
00:03:12,880 --> 00:03:15,660
Microsoft Azure and Amazon Web Services.

31
00:03:16,510 --> 00:03:19,210
But what does it mean to be cloud agnostic?

32
00:03:19,890 --> 00:03:23,514
By definition, cloud agnostic is a strategic

33
00:03:23,562 --> 00:03:27,086
process of using two or more public cloud for

34
00:03:27,108 --> 00:03:31,450
your workload. Generally, before going cloud agnostic,

35
00:03:31,610 --> 00:03:34,802
companies are restricted to one cloud vendor during their app

36
00:03:34,856 --> 00:03:39,150
development and challenge with keeping the operational costs

37
00:03:39,230 --> 00:03:42,850
low while maintaining scalability and availability.

38
00:03:43,670 --> 00:03:47,654
While there are many reasons cloud agnostic can be great for

39
00:03:47,692 --> 00:03:51,718
your business, youll first want to determine your specific

40
00:03:51,804 --> 00:03:55,446
business needs. Let's walk through its benefit. The first one we

41
00:03:55,468 --> 00:03:58,438
want to mention is that cloud agnostic creates freedom.

42
00:03:58,614 --> 00:04:02,134
With Cloudagnostic, you're in control of all your tools,

43
00:04:02,262 --> 00:04:05,882
making, tailoring and feature pairing seamless for

44
00:04:05,936 --> 00:04:09,814
all your business needs. At Lyrid, our tooling

45
00:04:09,862 --> 00:04:13,802
enables the deployment of user solutions in any cloud environment.

46
00:04:13,946 --> 00:04:16,830
Depending on the business needs of our partners,

47
00:04:17,330 --> 00:04:20,666
we give our users the freedom to access the tools

48
00:04:20,698 --> 00:04:24,322
and the features they need whenever they please. Now, the second

49
00:04:24,376 --> 00:04:28,450
benefit that we want to mention, cloudagnostic provides you with choices

50
00:04:29,270 --> 00:04:32,942
as region, offering prices and all important factors

51
00:04:33,006 --> 00:04:36,742
when it comes to choosing cloud providers. Implementing cloud

52
00:04:36,796 --> 00:04:40,434
agnostic mindset. Youll will be able to make informed executions

53
00:04:40,482 --> 00:04:44,514
on these factors and many, many more. It grants

54
00:04:44,562 --> 00:04:48,178
flexibility to meet all your needs, whether it's financial,

55
00:04:48,354 --> 00:04:52,134
functional or performance based. Having multiple

56
00:04:52,182 --> 00:04:55,434
providers to depend on is critical in such a

57
00:04:55,472 --> 00:04:59,462
changing it environment. This flexibility

58
00:04:59,606 --> 00:05:03,274
is also apparent in solutions portability and streamlining

59
00:05:03,322 --> 00:05:06,734
migration process. The third one we want to mention is that it

60
00:05:06,772 --> 00:05:10,590
lets you scale when it's needed. Contrary to common

61
00:05:10,660 --> 00:05:14,414
belief, this type of platform making scaling

62
00:05:14,462 --> 00:05:18,530
so much easier, especially for complex enterprise applications.

63
00:05:18,870 --> 00:05:22,482
Youll infrastructure scales with your solution without

64
00:05:22,536 --> 00:05:25,800
the need to configure or write a new code.

65
00:05:26,170 --> 00:05:29,602
We've been doing this and we've been helping our partners leverage

66
00:05:29,666 --> 00:05:33,606
Kubernetes auto scaling solutions with some benefits of

67
00:05:33,628 --> 00:05:36,674
this including automatic application management,

68
00:05:36,802 --> 00:05:40,294
a decrease in engineering maintenance and significant

69
00:05:40,342 --> 00:05:43,898
executions in overall costs. Fourth one,

70
00:05:43,984 --> 00:05:46,650
it provides long term savings.

71
00:05:47,230 --> 00:05:50,446
Cloudagnostic strategy lets you lower long

72
00:05:50,468 --> 00:05:53,390
term costs without forfeiting data efficiency.

73
00:05:54,130 --> 00:05:57,806
The flexibility of savings multiple cloud platform under your

74
00:05:57,828 --> 00:06:01,342
belt allows you to switch providers or even

75
00:06:01,396 --> 00:06:05,060
see service with a provider if a better deal comes along.

76
00:06:05,430 --> 00:06:08,914
Now let's take a deeper dive into what

77
00:06:08,952 --> 00:06:13,086
are key decisions when it comes to going cloud agnostic development.

78
00:06:13,278 --> 00:06:16,614
And before you start coding a single line of code,

79
00:06:16,732 --> 00:06:20,578
the first point is that youll technology stack matters.

80
00:06:20,754 --> 00:06:23,926
Pick the right technologies and as an

81
00:06:23,948 --> 00:06:27,766
engineer, your goal is to deliver a timely solution

82
00:06:27,798 --> 00:06:30,010
to the stakeholder within budgets.

83
00:06:30,430 --> 00:06:34,282
Consider your executions, compute, storage, database and

84
00:06:34,336 --> 00:06:38,490
network as the lifeblood of your application infrastructure.

85
00:06:39,550 --> 00:06:43,470
Make sure you know what you're putting into your lifeblood and

86
00:06:43,540 --> 00:06:47,102
choose the one that are not restricted to your

87
00:06:47,156 --> 00:06:50,910
application. One of the biggest value

88
00:06:50,980 --> 00:06:54,786
proposition that cloud company have is the ability to create

89
00:06:54,888 --> 00:06:58,322
any infrastructure with extremely low

90
00:06:58,376 --> 00:07:01,086
costs that bypass the barrier of entry.

91
00:07:01,278 --> 00:07:05,186
However, some of these services implement technology stack that does

92
00:07:05,208 --> 00:07:07,480
not exist on any other cloud platform.

93
00:07:08,250 --> 00:07:12,182
A good example of this is database that only run on certain

94
00:07:12,236 --> 00:07:16,326
cloud vendors. These services provide the most seamless integration to

95
00:07:16,348 --> 00:07:21,062
their services. However, they also have the least migrable

96
00:07:21,126 --> 00:07:23,930
database services to other cloud providers.

97
00:07:24,590 --> 00:07:28,166
So I like to start small with bring your own distributed

98
00:07:28,198 --> 00:07:30,598
database and then extend.

99
00:07:30,774 --> 00:07:34,254
Choosing this technology doesn't mean that you'll compromise in

100
00:07:34,292 --> 00:07:38,714
scale in the future. So we pick technologies that can expand seamlessly

101
00:07:38,762 --> 00:07:42,046
with no downtime and some of these open source technology with

102
00:07:42,068 --> 00:07:45,394
high availability and redundancy options are the way to go

103
00:07:45,432 --> 00:07:48,802
here. And there are many technologies that is built

104
00:07:48,856 --> 00:07:52,146
on top of that and that can ensure that your data can

105
00:07:52,168 --> 00:07:55,714
also be distributed across many cloud platforms. Once you

106
00:07:55,752 --> 00:07:59,734
start putting your solutions together, you'll want to

107
00:07:59,772 --> 00:08:03,126
make sure you start with abstraction on libraries that you

108
00:08:03,148 --> 00:08:06,374
think youll need to be migrated or run on multiple platform.

109
00:08:06,572 --> 00:08:10,422
So my next point will be use abstraction library

110
00:08:10,566 --> 00:08:14,134
as much as possible. An abstraction pattern

111
00:08:14,182 --> 00:08:18,134
library is a code that is common in solution development that allows

112
00:08:18,182 --> 00:08:21,982
developers to interact with a system using a more

113
00:08:22,036 --> 00:08:25,326
generic interface and one example of

114
00:08:25,348 --> 00:08:29,310
this is using object relational mapping or ORM.

115
00:08:29,650 --> 00:08:33,570
ORM itself is a programming technique for converting data between

116
00:08:33,640 --> 00:08:37,486
type system using object oriented programming language.

117
00:08:37,678 --> 00:08:41,582
Some of the example if you use Prisma for node JS,

118
00:08:41,726 --> 00:08:44,894
SQL alchemy for Python or entity framework

119
00:08:44,942 --> 00:08:48,786
for. Net you have used these types of abstraction

120
00:08:48,978 --> 00:08:52,466
and at layerit we use ORM and other abstraction

121
00:08:52,498 --> 00:08:56,246
databases layer for our messaging use system as well.

122
00:08:56,348 --> 00:08:59,782
For our job distribution for Google, pubsub, AWSQ,

123
00:08:59,846 --> 00:09:03,706
SWS, SQS and Redis we have been able to

124
00:09:03,728 --> 00:09:07,002
convert between cloud services for some of our service that

125
00:09:07,056 --> 00:09:10,294
requires a more global distribution and on

126
00:09:10,352 --> 00:09:14,254
premise deployment in an instant. So once

127
00:09:14,292 --> 00:09:17,200
you have built a concept and have a running application,

128
00:09:18,770 --> 00:09:22,046
what do you have to do next and for the next

129
00:09:22,148 --> 00:09:25,826
key decisions that we actually have to build is we would like you

130
00:09:25,848 --> 00:09:30,082
to embrace the distributed architectures and

131
00:09:30,136 --> 00:09:34,210
design for replaceable and migratable microservices.

132
00:09:34,970 --> 00:09:38,242
For cloud solution deployment, we recommend utilizing

133
00:09:38,306 --> 00:09:41,698
distributed computing because it embraces redundancy

134
00:09:41,794 --> 00:09:45,682
as well as high availability. Modern development

135
00:09:45,746 --> 00:09:49,034
has always advocated for smaller component that can be

136
00:09:49,072 --> 00:09:53,130
easily run on any system with a distributed storage system

137
00:09:53,200 --> 00:09:56,490
continuously making data copies, allowing a great deal

138
00:09:56,560 --> 00:10:00,034
of flexibility around costs, time to recovery,

139
00:10:00,102 --> 00:10:04,282
durability and more. They are extremely tolerant

140
00:10:04,346 --> 00:10:07,930
to compared failures. Outright distributed architectures

141
00:10:08,010 --> 00:10:11,742
have become more standardized in the developer world with the help

142
00:10:11,796 --> 00:10:15,790
of a massive cloud adoption, along with the wide adoption of technologies

143
00:10:15,950 --> 00:10:19,566
like docker containers during development?

144
00:10:19,758 --> 00:10:23,282
Ask yourself these questions. Can this same code

145
00:10:23,336 --> 00:10:27,070
or API run on another cloud platform? If not,

146
00:10:27,160 --> 00:10:30,902
why is that? What do you have to do to mitigate before

147
00:10:30,956 --> 00:10:34,502
you're going to production? And for the last keys

148
00:10:34,556 --> 00:10:38,778
engineering decision that we made to be a cloud agnostic company

149
00:10:38,944 --> 00:10:43,260
is to build and keep up with your migration plan.

150
00:10:44,030 --> 00:10:47,802
At this point you have all your solutions in place

151
00:10:47,936 --> 00:10:51,014
and are probably only using one deployment

152
00:10:51,062 --> 00:10:54,782
region and cloud services for your application. So the next

153
00:10:54,836 --> 00:10:58,590
thing is to come up with your plan b, a high level

154
00:10:58,660 --> 00:11:02,254
option to adopt a cloud migration strategy with one or more

155
00:11:02,292 --> 00:11:05,762
cloud vendors in order to quicken workload and data

156
00:11:05,816 --> 00:11:08,978
migration to another cloud. However,

157
00:11:09,144 --> 00:11:12,834
this option can be costly at first and may not be critical to running

158
00:11:12,872 --> 00:11:16,434
your business executions initially. But if you build

159
00:11:16,472 --> 00:11:19,766
your solution using the first predecisions above, we can

160
00:11:19,788 --> 00:11:23,810
always start small and design a manageable plan and identify

161
00:11:23,890 --> 00:11:27,750
important pieces that can be easily migrated. As you're running your solution,

162
00:11:28,330 --> 00:11:31,962
pick a target cloud vendor or technology to migrate to and

163
00:11:32,016 --> 00:11:35,978
test and run youll migration once a month or so.

164
00:11:36,144 --> 00:11:39,306
We like to put ourselves as a case study on a

165
00:11:39,328 --> 00:11:43,230
company that implements all those four key decisions.

166
00:11:43,970 --> 00:11:47,690
We would like to show our current technology stack infrastructures

167
00:11:47,850 --> 00:11:51,440
and with this we were able to automate, design,

168
00:11:51,810 --> 00:11:55,502
control and distribute our platform to multiple cloud

169
00:11:55,556 --> 00:11:59,250
vendor. As we mentioned earlier in the talk,

170
00:11:59,320 --> 00:12:03,060
we chose Kubernetes as the base of our platform.

171
00:12:03,510 --> 00:12:06,930
Kubernetes is an open source container orchestration

172
00:12:07,010 --> 00:12:10,294
system for automating, software deployment, scaling and

173
00:12:10,332 --> 00:12:14,198
management and for storage and data.

174
00:12:14,364 --> 00:12:17,914
MongoDB and Minio are our go to internal database and

175
00:12:17,952 --> 00:12:21,322
storage. They both are excellent open

176
00:12:21,376 --> 00:12:25,718
source technology that can provide the flexibility to be distributed anywhere

177
00:12:25,894 --> 00:12:29,482
along with redundancy and availability and

178
00:12:29,536 --> 00:12:33,470
backups that are required for us to run our operations.

179
00:12:34,530 --> 00:12:38,266
For database redundancy we rely on building MongoDB

180
00:12:38,298 --> 00:12:42,598
container instance inside all the Kubernetes cluster that we maintain.

181
00:12:42,794 --> 00:12:46,690
This is to build a globally distributed read only cache.

182
00:12:47,030 --> 00:12:50,926
This proved to be very benefits for our end users

183
00:12:50,958 --> 00:12:54,434
experience and something that is crucial for

184
00:12:54,472 --> 00:12:58,546
us is the ability to distribute our jobs and build

185
00:12:58,578 --> 00:13:01,942
and deployment globally. This scenario we use Google

186
00:13:01,996 --> 00:13:05,250
Pubsub as one of our job distribution infrastructure,

187
00:13:05,410 --> 00:13:09,354
but internally we can easily switch between Google Pubsub to

188
00:13:09,392 --> 00:13:12,714
a self hosted redis pub sub for

189
00:13:12,752 --> 00:13:16,506
our development. These are the base of our

190
00:13:16,528 --> 00:13:20,066
infrastructure that runs our platform and with this we have created

191
00:13:20,118 --> 00:13:24,026
a distributed deployment engine along with an API layer

192
00:13:24,138 --> 00:13:28,030
that connects with outside services to create a public

193
00:13:28,100 --> 00:13:31,646
cloud compute abstraction. So we

194
00:13:31,668 --> 00:13:35,058
made our platform with a goal so that it's easier for anyone

195
00:13:35,144 --> 00:13:38,046
to build using these same four principle.

196
00:13:38,158 --> 00:13:41,954
So let us show you how you can accomplish this in a quick demo of

197
00:13:41,992 --> 00:13:46,206
our platform. In this demo I will show how alert uses

198
00:13:46,238 --> 00:13:49,126
these four keys and where they show up in our platform.

199
00:13:49,308 --> 00:13:52,694
Our platform is free for everyone to try what I'm doing here, so just sign

200
00:13:52,732 --> 00:13:56,022
up and log into it and let's deploy alert pre made

201
00:13:56,076 --> 00:14:00,326
cloud agnostic application. The technology on

202
00:14:00,348 --> 00:14:03,802
what you pick here matters and these are some of the example of

203
00:14:03,856 --> 00:14:06,986
application that we have published the template on GitHub to

204
00:14:07,008 --> 00:14:10,538
help accelerate your development. Feel free to check back in

205
00:14:10,544 --> 00:14:13,838
the future for more pre built templates, but for today

206
00:14:13,924 --> 00:14:17,440
I will deploy a next JS application into our platform

207
00:14:18,050 --> 00:14:21,614
and what this does is that it will create a clone of

208
00:14:21,652 --> 00:14:25,138
our pure next JS code that does not contain any

209
00:14:25,304 --> 00:14:28,574
cloud library or signature. So let's click deploy

210
00:14:28,622 --> 00:14:32,286
here and what happened in the background here is that the template

211
00:14:32,318 --> 00:14:35,714
is copied into our minio backend object storage and

212
00:14:35,752 --> 00:14:39,430
we start to distribute the build jobs across our cluster.

213
00:14:39,770 --> 00:14:43,446
I think youll pretty familiar with some of these logs that these

214
00:14:43,468 --> 00:14:46,754
are built container build jobs on our distributed

215
00:14:46,802 --> 00:14:50,742
docker container engines that lives inside our cluster.

216
00:14:50,886 --> 00:14:54,374
The distribution of the jobs is handled by Google Pubsub,

217
00:14:54,422 --> 00:14:58,122
but it's also working on Redis pubsub for our clients that

218
00:14:58,176 --> 00:15:01,206
requires more security in their environment.

219
00:15:01,398 --> 00:15:04,574
Now once the build is complete, our platform will

220
00:15:04,612 --> 00:15:08,320
start the distribution of the code to the public cloud vendor that we support.

221
00:15:08,690 --> 00:15:12,334
This is where our platform does the heavy lifting of creating and

222
00:15:12,372 --> 00:15:16,034
configuring the appropriate public cloud services. Without the

223
00:15:16,072 --> 00:15:19,650
need for you to know a lot about AWS, Google Cloud

224
00:15:19,720 --> 00:15:23,742
or even Kubernetes. We create our cloud specific deployments

225
00:15:23,806 --> 00:15:27,190
and abstract approximates to you so that

226
00:15:27,340 --> 00:15:30,454
you only need to focus on what's important to you, which is your

227
00:15:30,492 --> 00:15:33,814
application. And when this is

228
00:15:33,852 --> 00:15:37,366
done we provide you with alert API endpoint and this is

229
00:15:37,388 --> 00:15:40,886
a publicly available HTTP endpoint that is running an API

230
00:15:40,918 --> 00:15:44,362
gateway into the execution of all

231
00:15:44,416 --> 00:15:48,346
the deployed application services. Let's open it and check our

232
00:15:48,368 --> 00:15:52,134
splash page if it's working. And by default this only runs

233
00:15:52,182 --> 00:15:55,534
in our layered cloud platform. I will show how to set

234
00:15:55,572 --> 00:15:59,050
a policy to this endpoint so that it utilizes other clouds.

235
00:15:59,130 --> 00:16:02,830
But let's download the code to take a deeper dive into the next JS code.

236
00:16:02,980 --> 00:16:06,658
And I extracted and opened the folder in visual studio code

237
00:16:06,744 --> 00:16:10,066
and you can already see the structure of the code right here.

238
00:16:10,248 --> 00:16:14,062
Other than our definition file, we are not requiring you to download

239
00:16:14,126 --> 00:16:17,966
any packages that are cloud specific. The package JSON

240
00:16:17,998 --> 00:16:21,414
file shows that this is a pure next JS application and

241
00:16:21,452 --> 00:16:24,994
the only file that's required for us is our alert definition

242
00:16:25,042 --> 00:16:28,840
file that tells the platform on how to build and pack the services.

243
00:16:29,370 --> 00:16:32,794
Now if you know a little bit about next JS, the code structure is

244
00:16:32,832 --> 00:16:36,518
pretty standard with styles public and pages folder.

245
00:16:36,694 --> 00:16:40,474
And in this code we added an API endpoint that can

246
00:16:40,512 --> 00:16:44,206
show the current next JS node JS version as

247
00:16:44,228 --> 00:16:47,566
well as the unique environment of Lyrid that

248
00:16:47,588 --> 00:16:51,182
can return which cloud environment that is currently running on.

249
00:16:51,316 --> 00:16:54,946
Now let's get back into our UI to set the policy and for

250
00:16:54,968 --> 00:16:58,114
deployment and execution. But before that we

251
00:16:58,152 --> 00:17:01,890
need you to set the credential that will be used under youll cloud

252
00:17:01,960 --> 00:17:05,474
account. This is an IAM role to be configured in your cloud

253
00:17:05,512 --> 00:17:08,562
account and our documentation provides a list of permission

254
00:17:08,626 --> 00:17:11,800
that you will need to set in order to interact with alert platform.

255
00:17:12,490 --> 00:17:16,710
Now we can set the executions platform to all in which

256
00:17:16,860 --> 00:17:21,226
it will run the service on any cloud and this policy to

257
00:17:21,248 --> 00:17:24,662
create a distributed application on all public cloud vendors.

258
00:17:24,806 --> 00:17:28,346
In this page you can also set different regions for Google

259
00:17:28,448 --> 00:17:31,610
and AWS. This will be the region used

260
00:17:31,680 --> 00:17:35,374
to deploy the first service in that cloud and

261
00:17:35,412 --> 00:17:38,670
the closer it is to the bulk of youll user, the better your user experience

262
00:17:38,740 --> 00:17:42,410
will be. Let's jump back into the web browser and check the endpoint

263
00:17:42,490 --> 00:17:46,002
and let's execute the version. Get endpoint and zoom a bit

264
00:17:46,056 --> 00:17:49,698
here. As I refresh really fast you can

265
00:17:49,704 --> 00:17:53,374
see that it is load balancing between AWS, Google and our own Kubernetes

266
00:17:53,422 --> 00:17:56,486
cluster. Congratulations, you have successfully created a

267
00:17:56,508 --> 00:18:00,246
migrable and distributed application. Now let's do a

268
00:18:00,268 --> 00:18:03,794
quick check what we deploy on AWS by going to your AWS

269
00:18:03,842 --> 00:18:07,426
lambda page. And now let's

270
00:18:07,458 --> 00:18:11,286
check on the monitors and let's

271
00:18:11,318 --> 00:18:14,140
do the same thing over in Google Cloud.

272
00:18:15,070 --> 00:18:18,554
Now keep that in mind that everything you see running in our platform is also

273
00:18:18,592 --> 00:18:22,766
running inside our Kubernetes platform that we maintain and we are working on

274
00:18:22,788 --> 00:18:25,870
the ability to connect also to your own

275
00:18:26,020 --> 00:18:30,090
clusters. There are additional things that you have to put into consideration

276
00:18:30,170 --> 00:18:34,354
when you're implementing a cloud agnostic solutions and

277
00:18:34,392 --> 00:18:37,970
the first being security and compliance.

278
00:18:38,950 --> 00:18:42,514
I often get asked how do youll make all these

279
00:18:42,552 --> 00:18:46,310
solutions secure? And one of the

280
00:18:46,380 --> 00:18:50,006
issues that often come up in multiple cloud environment is that you

281
00:18:50,028 --> 00:18:53,606
can no longer rely on one cloud security

282
00:18:53,708 --> 00:18:57,270
mechanism anymore. So in this scenario,

283
00:18:57,710 --> 00:19:01,286
zero trust security becomes a very important concept

284
00:19:01,318 --> 00:19:04,906
for us. This is a security model

285
00:19:05,088 --> 00:19:08,358
where you never trust and always verify.

286
00:19:08,534 --> 00:19:12,110
Devices should never be trust by default even

287
00:19:12,180 --> 00:19:16,014
if they are connected to a permission network such as corporate lan or

288
00:19:16,132 --> 00:19:20,254
previously verified certificate and HTTPs on

289
00:19:20,292 --> 00:19:23,950
everything is always a good first step to secure your communication

290
00:19:24,110 --> 00:19:28,142
between machines. We build and use multiple Kubernetes

291
00:19:28,206 --> 00:19:32,206
native servers that integrate with Cert manager. Let's encrypt

292
00:19:32,318 --> 00:19:35,622
to authenticate and verify communications between

293
00:19:35,756 --> 00:19:39,334
all our production machines and some implement other

294
00:19:39,372 --> 00:19:42,530
security measures such as active container scanning,

295
00:19:42,690 --> 00:19:46,034
hardening, role based authentication

296
00:19:46,082 --> 00:19:49,898
for the Kubernetes cluster that we maintain and many many more.

297
00:19:50,064 --> 00:19:53,526
The second consideration is the integration costs.

298
00:19:53,718 --> 00:19:57,130
Adding more deployment environment into the platform will

299
00:19:57,200 --> 00:20:00,700
cost us some more development time.

300
00:20:01,090 --> 00:20:05,146
Just remember, even if they are providing the same technologies,

301
00:20:05,338 --> 00:20:09,402
there are always little differences on how one cloud vendor delivers

302
00:20:09,466 --> 00:20:13,342
its solution. One example that we encountered here is our Kubernetes

303
00:20:13,406 --> 00:20:17,294
AWS deployment development. We noticed that the load balancer

304
00:20:17,342 --> 00:20:21,342
uses Kubernetes ingress services, uses public DNS

305
00:20:21,406 --> 00:20:25,010
instead of public ips. Monitoring is also

306
00:20:25,080 --> 00:20:28,918
a very cloud specific function that can be a bit challenging to create,

307
00:20:29,084 --> 00:20:33,666
specifically one that spans on any cloud infrastructures.

308
00:20:33,778 --> 00:20:37,474
And in order to overcome this we utilize Prometheus Grafana for our

309
00:20:37,532 --> 00:20:41,254
infrastructure metrics. Considering that runs within our internal

310
00:20:41,302 --> 00:20:44,410
environment ecosystem. During our platform development,

311
00:20:45,550 --> 00:20:50,022
we made sure every part of our infrastructure ecosystem

312
00:20:50,086 --> 00:20:53,274
is ready to be fed into our Prometheus infrastructure.

313
00:20:53,322 --> 00:20:56,702
Considering this is where we made our decision on where

314
00:20:56,756 --> 00:21:00,526
and how to automate our infrastructure expansion. All the

315
00:21:00,548 --> 00:21:04,626
data that is coming into our Prometheus platform and

316
00:21:04,648 --> 00:21:08,926
just like databases and storage executions, there are other infrastructure monitoring tools

317
00:21:08,958 --> 00:21:12,802
that spans multiple cloud vendors and able to run on

318
00:21:12,856 --> 00:21:16,242
any cloud infrastructure. Just like everything else in the world,

319
00:21:16,376 --> 00:21:19,862
nothing is perfect, not even cloud agnostic. Now cloud

320
00:21:19,916 --> 00:21:23,730
agnostic is seen by many as the future for cloud computing

321
00:21:23,810 --> 00:21:28,254
and while there are benefits, you should also consider these drawbacks.

322
00:21:28,402 --> 00:21:32,074
The first is being that it does increase complexity to your

323
00:21:32,112 --> 00:21:35,802
system and one disadvantage is that by

324
00:21:35,856 --> 00:21:39,722
gaining flexibility and features, your solution can

325
00:21:39,776 --> 00:21:43,098
become more complex and require more management.

326
00:21:43,274 --> 00:21:47,294
Portable solution and technology support come at

327
00:21:47,332 --> 00:21:50,766
the price of increasing complexity. Now keep that

328
00:21:50,788 --> 00:21:54,526
in mind. The second is that you have to consider is that there is

329
00:21:54,548 --> 00:21:57,934
a slightly higher upfront cost that youll may incur in your development.

330
00:21:58,062 --> 00:22:02,094
Now, while cloud agnostic does have the potential to save you money exponentially,

331
00:22:02,142 --> 00:22:05,650
in the future, you will face a slightly higher upfront cost.

332
00:22:05,800 --> 00:22:09,606
These come from various things like when you're not utilizing some of

333
00:22:09,628 --> 00:22:13,090
the feature of a certain platform, but you need the properties

334
00:22:13,170 --> 00:22:16,214
of the others. These can potentially add to the price,

335
00:22:16,332 --> 00:22:20,314
and data transfer costs can also become more

336
00:22:20,352 --> 00:22:23,526
expensive. With the cloud agnostic approach, sometimes you'll

337
00:22:23,558 --> 00:22:27,526
face unexpected data transfer which can be also confusing

338
00:22:27,558 --> 00:22:31,162
to predict. However, all these additional costs are manageable.

339
00:22:31,226 --> 00:22:34,606
If you set your budgeting accordingly and you

340
00:22:34,628 --> 00:22:38,622
have to quickening your development, you'll want to take the time

341
00:22:38,676 --> 00:22:42,046
to examine your organization's need to determine if a

342
00:22:42,068 --> 00:22:45,874
cloud agnostic approach is beneficial to your need. And in

343
00:22:45,912 --> 00:22:49,966
conclusion, there are many benefits to going cloud agnostic

344
00:22:49,998 --> 00:22:54,034
for youll company. But just like everything else, you have to tailor and

345
00:22:54,072 --> 00:22:58,150
evaluate the pros and cons specific to your company's need.

346
00:22:58,300 --> 00:23:01,910
And just let's recap the four key decision design

347
00:23:01,980 --> 00:23:05,874
principle that we ran to make our platform cloud agnostic.

348
00:23:06,002 --> 00:23:09,738
And they are number one, as picking technologies that you

349
00:23:09,744 --> 00:23:13,306
can control. Number two, we use abstraction libraries as

350
00:23:13,328 --> 00:23:17,750
much as possible. Number three, we embrace the distribution architectures

351
00:23:17,830 --> 00:23:22,042
and design for migrable microservices. Number four,

352
00:23:22,176 --> 00:23:25,938
we build and keep up our migration plans

353
00:23:26,054 --> 00:23:30,158
and we have followed these four key design principles to build our platform

354
00:23:30,324 --> 00:23:34,158
and we here at Lyrid use this platform to help companies

355
00:23:34,324 --> 00:23:38,218
to build their solution using the same cloud agnostic principles.

356
00:23:38,314 --> 00:23:41,738
So let us know if you have any question, concern or comments.

357
00:23:41,834 --> 00:23:45,254
We're hanging out at the discord channel. Feel free

358
00:23:45,292 --> 00:23:49,298
to say hi to us or email us. Email me at htanto

359
00:23:49,314 --> 00:23:53,458
at lyrid IO or drop me a message on my Twitter and LinkedIn.

360
00:23:53,554 --> 00:23:57,046
Thank you so much for watching my presentation and we hope you learn a

361
00:23:57,068 --> 00:24:00,050
thing or two about building cloud agnostic solutions.

