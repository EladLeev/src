1
00:00:26,210 --> 00:00:29,458
Hello everyone, my name is Gajendra Deshpande.

2
00:00:29,634 --> 00:00:33,126
I am working as assistant professor at Institute of Technology.

3
00:00:33,228 --> 00:00:37,350
I also run a startup called Eyesec Cyber Security Solutions Private Limited.

4
00:00:38,170 --> 00:00:41,474
Today I will be presenting a talk security security considerations packaging Python

5
00:00:41,522 --> 00:00:45,286
packaging let us see

6
00:00:45,308 --> 00:00:50,346
the outline. So in today's talk I'll be discussing about importance

7
00:00:50,378 --> 00:00:54,666
of secure package and vulnerabilities in Python package index.

8
00:00:54,858 --> 00:00:59,258
Then we will see some tools such as bandit safety and Semgrep.

9
00:00:59,354 --> 00:01:02,714
So Bandit is used for identifying common security issues in Python.

10
00:01:02,762 --> 00:01:06,030
Code safety is used for checking the dependency

11
00:01:06,450 --> 00:01:10,498
vulnerabilities and Samgrep is for static analyzer. Then finally

12
00:01:10,584 --> 00:01:14,286
I will conclude talk with general guidelines for secure

13
00:01:14,318 --> 00:01:16,310
coding practices in Python.

14
00:01:18,090 --> 00:01:21,414
Now on this slide you can see that the tob index for

15
00:01:21,452 --> 00:01:24,886
Python. So recently you might have seen that Python has

16
00:01:24,908 --> 00:01:28,238
reached the number one position in tob

17
00:01:28,434 --> 00:01:31,658
index. So Tob is nothing, but it's a

18
00:01:31,664 --> 00:01:36,490
website which ranks programming languages as per their popularity.

19
00:01:36,910 --> 00:01:41,340
Now let us also see some other surveys, say for example in

20
00:01:42,030 --> 00:01:45,250
static workflow survey,

21
00:01:45,350 --> 00:01:49,818
Python has ranked third after JavaScript and HTML

22
00:01:49,994 --> 00:01:53,582
or CSS. If we see here Javascript and HTML or CSS,

23
00:01:53,646 --> 00:01:57,010
they are not really the programming languages

24
00:01:57,590 --> 00:02:00,100
or the things which Python can do.

25
00:02:00,870 --> 00:02:04,750
Then next is on GitHub stats.

26
00:02:04,910 --> 00:02:08,102
That's on jitter IO here. Also you can see that

27
00:02:08,236 --> 00:02:12,146
Python is ranked third in terms of number of active

28
00:02:12,178 --> 00:02:16,150
repositories. Now if you see all these factors,

29
00:02:16,810 --> 00:02:20,282
no doubt it shows that Python is one of the most

30
00:02:20,336 --> 00:02:23,414
popular programming languages or scripting languages

31
00:02:23,462 --> 00:02:26,700
in the world today. So this popularity itself

32
00:02:27,790 --> 00:02:31,434
has created a problem for Python because many of the hackers

33
00:02:31,482 --> 00:02:35,440
are targeting Python. Now let's see

34
00:02:37,250 --> 00:02:41,530
the security issues and some misconceptions related to open source

35
00:02:41,690 --> 00:02:44,734
software. So there's a misconception

36
00:02:44,782 --> 00:02:48,322
about security of open source software. The major

37
00:02:48,376 --> 00:02:51,762
reason people cite is that the code is open

38
00:02:51,816 --> 00:02:55,686
source. Because code is open source, everything is

39
00:02:55,868 --> 00:02:59,462
open, the folder structure is known. So they say

40
00:02:59,516 --> 00:03:03,350
that this open source structure or

41
00:03:03,500 --> 00:03:07,494
this information openly available makes

42
00:03:07,532 --> 00:03:11,314
it vulnerable. But generally, open source software are secure

43
00:03:11,362 --> 00:03:14,838
by design. Okay, so by default

44
00:03:15,014 --> 00:03:17,820
or by design, Python is secure by design.

45
00:03:18,270 --> 00:03:22,362
Say WordPress is secure by design. Any content management software,

46
00:03:22,426 --> 00:03:26,478
open source software are secure. The problem

47
00:03:26,564 --> 00:03:30,670
is when people start using unsecure third party packages

48
00:03:31,650 --> 00:03:35,922
and security issues are mostly due to the understanding or

49
00:03:35,976 --> 00:03:39,250
lack of understanding of secure coding principles.

50
00:03:40,070 --> 00:03:44,594
So that is because these

51
00:03:44,632 --> 00:03:48,342
open source softwares mostly allow third

52
00:03:48,396 --> 00:03:51,574
party or any person to create their own

53
00:03:51,612 --> 00:03:55,106
packages and integrate into the existing software.

54
00:03:55,298 --> 00:03:58,986
Now the problem lies with the developer because he or

55
00:03:59,008 --> 00:04:02,106
she may not be aware of

56
00:04:02,128 --> 00:04:05,866
the secure coding principles. So that's why

57
00:04:05,968 --> 00:04:09,734
we say that the Python or any open source software is secure, but the vulnerabilities

58
00:04:09,782 --> 00:04:13,066
may be present in packages. So most of the times this

59
00:04:13,088 --> 00:04:16,846
is the case. But again, I'm not saying that the

60
00:04:16,868 --> 00:04:20,366
vulnerabilities will not be there in the original software, they will be there. But there

61
00:04:20,388 --> 00:04:24,430
is a very huge community which is constantly monitoring

62
00:04:24,590 --> 00:04:27,614
the different aspects, including the security aspects,

63
00:04:27,742 --> 00:04:31,106
and they are continuously fixing the

64
00:04:31,288 --> 00:04:35,018
security issues. Apart from that, there will be bug bounty programs

65
00:04:35,134 --> 00:04:38,840
which will help you to identify the issues and fix them.

66
00:04:39,690 --> 00:04:43,874
Now, importance of a secure package so insecure package

67
00:04:43,922 --> 00:04:48,330
will make your application vulnerable and prone to external

68
00:04:49,070 --> 00:04:52,230
threats. We don't know what kind of vulnerability

69
00:04:52,310 --> 00:04:57,946
is present in the package. Sometimes the

70
00:04:57,968 --> 00:05:01,274
package may be insecure because the developer

71
00:05:01,402 --> 00:05:04,778
has not fixed those issues, or many times it's

72
00:05:04,794 --> 00:05:09,002
a hacker or a cracker who might have issued,

73
00:05:09,146 --> 00:05:12,758
who might have introduced these vulnerabilities

74
00:05:12,874 --> 00:05:15,780
purposefully to extract the information.

75
00:05:16,550 --> 00:05:20,482
So compromised and unauthorized disclosure of information may result

76
00:05:20,536 --> 00:05:24,740
into personal and company reputation and

77
00:05:25,130 --> 00:05:29,026
money. So unsecured code may damage the systems

78
00:05:29,058 --> 00:05:32,566
of users, and also sometimes it

79
00:05:32,588 --> 00:05:36,194
may lead to physical damage. So because of these reasons,

80
00:05:36,242 --> 00:05:40,502
you need to scan your package, scan your environment,

81
00:05:40,646 --> 00:05:43,994
and ensure that only secure packages are

82
00:05:44,032 --> 00:05:48,170
installed. Now let us see some news articles

83
00:05:48,990 --> 00:05:52,074
which have been published and which have highlighted

84
00:05:52,122 --> 00:05:55,774
the security issues in the PYPI index. So first

85
00:05:55,812 --> 00:05:59,626
one you can see other portsfigure has published

86
00:05:59,658 --> 00:06:03,694
an article which highlights the dependency confusion or attack mounted

87
00:06:03,742 --> 00:06:07,774
via PYPI repository and that exposes

88
00:06:07,902 --> 00:06:11,374
flawed packages installer behavior. Then similarly

89
00:06:11,422 --> 00:06:14,954
JFrog has written an article which detects

90
00:06:15,022 --> 00:06:19,410
malicious PYPI packages stealing credit cards

91
00:06:19,570 --> 00:06:23,880
information of users and injecting the malicious code.

92
00:06:25,050 --> 00:06:29,274
Then Developer.com also

93
00:06:29,312 --> 00:06:35,190
writes an article and cites that there are many PyPI python

94
00:06:35,270 --> 00:06:38,970
repositories which consists of vulnerabilities.

95
00:06:39,890 --> 00:06:43,722
Then there is a blog article which identifies

96
00:06:43,866 --> 00:06:47,754
potential remote code execution in PYPI

97
00:06:47,882 --> 00:06:52,518
index. Then also supply chain flaws

98
00:06:52,554 --> 00:06:54,530
have been found in the Python packages.

99
00:06:57,110 --> 00:07:00,690
Now let us see some tools which will

100
00:07:00,760 --> 00:07:04,434
help us to identify the vulnerabilities which have been

101
00:07:04,472 --> 00:07:08,146
shown in our previous slides, but they are just the examples.

102
00:07:08,178 --> 00:07:11,160
There are many other vulnerabilities present.

103
00:07:12,170 --> 00:07:15,990
Now what's the bandit? Bandit is a tool designed to

104
00:07:16,060 --> 00:07:19,420
find common security issues in the Python code.

105
00:07:20,030 --> 00:07:23,722
Now what it does is it processes each

106
00:07:23,776 --> 00:07:27,446
file, builds the abstraction text tree from it, and runs

107
00:07:27,478 --> 00:07:30,914
appropriate plugins against abstraction text tree

108
00:07:30,982 --> 00:07:34,526
nodes. Once bandit has finished scanning all the

109
00:07:34,548 --> 00:07:38,190
files, it generates a report. You can

110
00:07:38,260 --> 00:07:42,014
install it using pip three command, so you can say

111
00:07:42,052 --> 00:07:45,442
pip three install bandit and to run it against

112
00:07:45,496 --> 00:07:49,474
any code repository, you can use bandit minutes r switch and

113
00:07:49,512 --> 00:07:52,626
specify the code path. It can be a local path, it can

114
00:07:52,648 --> 00:07:55,906
be a remote path. Now how

115
00:07:55,928 --> 00:07:59,494
to use it? You can run bandit against your

116
00:07:59,532 --> 00:08:03,094
project code just by specifying the code path and the minus r

117
00:08:03,132 --> 00:08:07,762
switch. So as I have said, it can be your folder

118
00:08:07,826 --> 00:08:11,942
project folder on your local machine, or it can be a remote folder

119
00:08:12,006 --> 00:08:13,930
such as GitHub repository.

120
00:08:14,990 --> 00:08:18,342
Then you can also run bandit with a specific profile.

121
00:08:18,486 --> 00:08:21,742
Say for example we want to check bandit whether

122
00:08:21,796 --> 00:08:25,534
there is a shell injection. So minus p

123
00:08:25,572 --> 00:08:29,326
switch can be used to specify a particular profile. So in

124
00:08:29,348 --> 00:08:33,018
this example we are checking all the files under

125
00:08:33,204 --> 00:08:36,446
examples folder and we are checking

126
00:08:36,478 --> 00:08:39,780
whether the shell injection vulnerability is present.

127
00:08:40,950 --> 00:08:44,890
Then you can also run bandit with a standard input.

128
00:08:44,990 --> 00:08:48,834
So in that case you can just supply

129
00:08:48,882 --> 00:08:53,190
the file to bandit command.

130
00:08:54,490 --> 00:08:57,946
Now bandit also allows specifying the path of

131
00:08:57,968 --> 00:09:02,090
a baseline report to compare against using the baseline argument.

132
00:09:02,750 --> 00:09:06,714
So that can be done by specifying minus b switch and

133
00:09:06,752 --> 00:09:10,254
the baseline. So this is very

134
00:09:10,292 --> 00:09:13,870
useful for ignoring the known vulnerabilities that you believe

135
00:09:13,940 --> 00:09:17,754
are non issues, especially whenever

136
00:09:17,802 --> 00:09:21,162
you are performing testing.

137
00:09:21,306 --> 00:09:24,850
So one such example is specifying a clear text

138
00:09:24,920 --> 00:09:28,818
password in a unit test, and sometimes

139
00:09:28,904 --> 00:09:32,766
also you can ignore some known warnings. Then to generate

140
00:09:32,798 --> 00:09:36,546
a baseline report, simply run bandit with the output

141
00:09:36,578 --> 00:09:40,994
format set to JSON. So that is JavaScript

142
00:09:41,042 --> 00:09:45,650
object notation. And note here that only JSON

143
00:09:45,810 --> 00:09:50,010
formatted files are accepted as a baseline and output file

144
00:09:51,310 --> 00:09:55,146
to a path specified. Then you

145
00:09:55,168 --> 00:09:58,794
can also write tests. So these

146
00:09:58,832 --> 00:10:03,638
tests are custom tests and

147
00:10:03,664 --> 00:10:07,070
this also allows you to extend the functionality of bandit and

148
00:10:07,140 --> 00:10:10,542
you can also write custom tests. Now to write a test,

149
00:10:10,676 --> 00:10:13,946
the first step is to identify a vulnerability to build

150
00:10:13,988 --> 00:10:17,582
a test for and create a new file in examples folder

151
00:10:17,646 --> 00:10:20,690
that contains one or more cases for that vulnerability.

152
00:10:21,830 --> 00:10:25,734
Then consider the vulnerability you are testing for and mark the

153
00:10:25,772 --> 00:10:29,750
function with one or more of the appropriate decorators.

154
00:10:30,090 --> 00:10:33,766
So you can use decorators such as add checks, call add

155
00:10:33,788 --> 00:10:38,330
checks, import and import from and add checks string.

156
00:10:38,830 --> 00:10:42,346
Then create a new Python source file to contain your

157
00:10:42,528 --> 00:10:46,186
test. Then the function that

158
00:10:46,208 --> 00:10:49,866
you create should take parameter context. So this context is

159
00:10:49,888 --> 00:10:53,520
nothing but the instance of a context class you can query for

160
00:10:53,890 --> 00:10:56,750
information about the current element being examined.

161
00:10:57,090 --> 00:11:00,126
You can also get the raw abstraction textory node for more

162
00:11:00,148 --> 00:11:03,982
advanced use cases. So this information you can specify

163
00:11:04,046 --> 00:11:07,406
in context py file extend your bandit

164
00:11:07,438 --> 00:11:11,540
configuration file as needed to support your new test.

165
00:11:11,990 --> 00:11:15,158
Then execute bandit against the test file you defined in

166
00:11:15,164 --> 00:11:19,506
the examples folder and ensure that it detects the vulnerability.

167
00:11:19,698 --> 00:11:23,542
Then consider variations on how this vulnerability might

168
00:11:23,596 --> 00:11:26,934
present itself and extend the example file and

169
00:11:26,972 --> 00:11:29,210
test the function accordingly.

170
00:11:31,550 --> 00:11:35,066
Now bandit comes with several plugins and these plugins are

171
00:11:35,088 --> 00:11:39,078
grouped into several groupings and each grouping

172
00:11:39,174 --> 00:11:41,740
is given can id.

173
00:11:42,850 --> 00:11:46,960
So there are seven series starting from B one

174
00:11:47,330 --> 00:11:50,590
series to B seven xx series.

175
00:11:50,930 --> 00:11:54,878
So in B one series, miscellaneous tests are included.

176
00:11:54,974 --> 00:11:58,706
In B two series application or framework misconfiguration tests are

177
00:11:58,728 --> 00:12:03,010
included. Then in B three series blacklist

178
00:12:04,150 --> 00:12:07,778
calls are included. In B four series blacklist imports

179
00:12:07,794 --> 00:12:11,314
are included. Then in B five xx series,

180
00:12:11,362 --> 00:12:15,510
cryptography related tests are included and in B six series injection

181
00:12:17,390 --> 00:12:20,906
test plugins are included. And finally in B seven xx that

182
00:12:20,928 --> 00:12:24,250
is, cross site scripting tests are included.

183
00:12:24,990 --> 00:12:28,106
So on this slide you can see some of

184
00:12:28,128 --> 00:12:32,270
the plugins. Banded test plugins have been specified.

185
00:12:32,610 --> 00:12:35,680
Say for example B 10 one is the assert used,

186
00:12:36,050 --> 00:12:39,760
B 10 two is execute used.

187
00:12:40,290 --> 00:12:44,286
Now if you see here, B 10 three deals

188
00:12:44,318 --> 00:12:47,522
with whether it checks whether

189
00:12:47,656 --> 00:12:52,066
bad file permissions are set. Then v 10 five

190
00:12:52,248 --> 00:12:55,746
checks with whether hard coded

191
00:12:55,778 --> 00:12:59,560
bind all interfaces. Then there are some

192
00:13:00,570 --> 00:13:04,582
tests such as 105106 and 10

193
00:13:04,636 --> 00:13:08,202
seven. They deal with the passwords, then 10

194
00:13:08,256 --> 00:13:12,010
deal 10 eight checks whether it's a temporary directory,

195
00:13:13,230 --> 00:13:16,314
and v one 10 checks for

196
00:13:16,352 --> 00:13:20,118
try accept pass. That is

197
00:13:20,304 --> 00:13:23,786
it check whether proper exceptional

198
00:13:23,978 --> 00:13:26,640
cases have been taken care.

199
00:13:28,130 --> 00:13:31,440
Then there is something called as

200
00:13:32,050 --> 00:13:35,922
flask debug true which is identified with b 20

201
00:13:35,976 --> 00:13:39,042
one. So it checks whether your

202
00:13:39,096 --> 00:13:42,866
flask application debug parameter is set to true.

203
00:13:43,048 --> 00:13:46,898
Note here that in production environment it has to be set to false.

204
00:13:47,074 --> 00:13:50,674
If you set it to true, then hackers can perform some malicious

205
00:13:50,722 --> 00:13:54,566
operations and it may generate some errors and

206
00:13:54,668 --> 00:13:58,266
you know that usually errors also disclose some information about the

207
00:13:58,288 --> 00:14:01,754
system and this information can be used to

208
00:14:01,792 --> 00:14:05,580
carry out further attacks. Then b 50 one

209
00:14:06,030 --> 00:14:09,290
checks whether there are certifications with no validation.

210
00:14:09,630 --> 00:14:13,630
Then b 502503 and 50 four

211
00:14:13,780 --> 00:14:17,630
deal with the SSL, that is secure sockets layer.

212
00:14:18,210 --> 00:14:21,946
They check whether it has a bad version or bad defaults

213
00:14:21,978 --> 00:14:25,486
or no version is specified. Then similarly

214
00:14:25,518 --> 00:14:29,026
there is b 50 five which checks whether the cryptographic key

215
00:14:29,048 --> 00:14:33,554
is weak. Then 50 seven

216
00:14:33,752 --> 00:14:37,510
checks ssh no host key verification.

217
00:14:38,410 --> 00:14:41,974
Then similarly there are some things

218
00:14:42,012 --> 00:14:45,718
such as subprocess without shell equals true.

219
00:14:45,884 --> 00:14:48,394
Any other function with shell equals true,

220
00:14:48,592 --> 00:14:52,342
right? Then start process with a shell start process with no shell,

221
00:14:52,406 --> 00:14:55,740
start process with partial path, and so on.

222
00:14:56,430 --> 00:14:58,250
Then it also check.

223
00:14:59,870 --> 00:15:01,530
Then it also checks.

224
00:15:04,270 --> 00:15:08,090
Yeah, so are there any hardcore SQL expressions?

225
00:15:08,250 --> 00:15:12,720
Then Linux commands white card injection. Then b six 10

226
00:15:13,030 --> 00:15:17,934
and six one one they check with Django's

227
00:15:17,982 --> 00:15:21,938
parameters whether the Django's extra field is used whether it

228
00:15:21,944 --> 00:15:26,434
is raw SQl is used now note here that raw

229
00:15:26,482 --> 00:15:30,470
SQL generally enables you to perform SQL injection attacks,

230
00:15:30,810 --> 00:15:34,786
but that can be taken care in Django

231
00:15:34,818 --> 00:15:38,202
by query parameterization which happens

232
00:15:38,256 --> 00:15:41,530
by default. But sometimes

233
00:15:41,680 --> 00:15:45,802
you may also need to require to

234
00:15:45,856 --> 00:15:48,730
write custom query.

235
00:15:50,210 --> 00:15:53,630
So in that case you may have to use raw SQl.

236
00:15:54,770 --> 00:15:58,206
Okay then similarly the last one that

237
00:15:58,228 --> 00:16:01,070
is b 70 three that is Django mark safe.

238
00:16:02,450 --> 00:16:05,826
So these are the test plugins which you can use depending on

239
00:16:05,928 --> 00:16:09,662
which kind of application you have written, whether it is a plain python

240
00:16:09,726 --> 00:16:13,694
application, or it's a flask application, or it's a Django

241
00:16:13,742 --> 00:16:18,470
application. The next is safety

242
00:16:19,690 --> 00:16:23,682
command. So safety checks your installed dependencies

243
00:16:23,746 --> 00:16:27,366
for known security vulnerabilities. So by default it

244
00:16:27,388 --> 00:16:31,134
uses open Python vulnerability database safety Db,

245
00:16:31,282 --> 00:16:35,334
but can be upgraded to use PyAp IO safety

246
00:16:35,382 --> 00:16:38,186
API using the key option.

247
00:16:38,368 --> 00:16:42,560
It supports Python 3.5 and above. So you can install

248
00:16:43,490 --> 00:16:46,926
safety command or safety module by

249
00:16:47,028 --> 00:16:51,194
Pip install safety command for testing purpose

250
00:16:51,242 --> 00:16:53,890
you can also install insecure package.

251
00:16:54,230 --> 00:16:59,534
So it's really insecure, just used for demonstrating

252
00:16:59,582 --> 00:17:02,914
the working of safety command. So you can install

253
00:17:02,952 --> 00:17:05,650
it by saying Pip install insecure package.

254
00:17:06,490 --> 00:17:10,294
Now to check your currently selected virtual environment for

255
00:17:10,332 --> 00:17:12,870
dependencies with known security vulnerabilities,

256
00:17:13,370 --> 00:17:16,950
you can simply run safety and check command.

257
00:17:17,550 --> 00:17:21,030
Now you can also check the packages

258
00:17:21,110 --> 00:17:24,762
which have been specified in requirements txt file whether there are any

259
00:17:24,896 --> 00:17:28,554
dependency vulnerabilities. So that you can

260
00:17:28,592 --> 00:17:32,454
do by specifying minus r switch

261
00:17:32,502 --> 00:17:34,670
and the requirements txt file.

262
00:17:35,890 --> 00:17:40,010
So the command will be safety check minus r requirements txt.

263
00:17:40,170 --> 00:17:43,310
Then you can also read the input from the standard input.

264
00:17:43,730 --> 00:17:46,862
So for example there's a requirements

265
00:17:46,926 --> 00:17:50,274
txt file which contains the list of python modules so

266
00:17:50,312 --> 00:17:54,606
that we are displaying using a cat command, but we are not only displaying

267
00:17:54,638 --> 00:17:58,274
it, we are just passing the output of cat command to the safety

268
00:17:58,322 --> 00:18:00,710
command on the standard input.

269
00:18:01,210 --> 00:18:04,934
Then you can also use pip freeze command. So what

270
00:18:04,972 --> 00:18:08,140
this pip freeze command does is it check the present

271
00:18:08,830 --> 00:18:13,446
virtual environment or all the modules which have been installed

272
00:18:13,558 --> 00:18:16,918
by Pip command in the present virtual environment,

273
00:18:17,094 --> 00:18:21,206
and that output can be passed

274
00:18:21,238 --> 00:18:24,190
as an input to safety check command on the standard input.

275
00:18:24,530 --> 00:18:28,478
Then you can also check for specific packages. For example

276
00:18:28,564 --> 00:18:32,960
here we are checking whether the insecure package version 0.1

277
00:18:33,650 --> 00:18:37,974
is safe or has it contained

278
00:18:38,042 --> 00:18:40,930
some security vulnerabilities.

279
00:18:43,030 --> 00:18:47,030
Now this is how you can run so safety

280
00:18:47,930 --> 00:18:51,590
space then check so it shows the

281
00:18:51,660 --> 00:18:55,414
packages on my system. It has checked for 221

282
00:18:55,452 --> 00:18:58,486
packages and it has shown which

283
00:18:58,508 --> 00:19:02,726
are all the packages which have been installed

284
00:19:02,758 --> 00:19:06,042
and which are the affected versions say for example if you consider white

285
00:19:06,096 --> 00:19:09,546
noise package, then it says that 4.1.2

286
00:19:09,568 --> 00:19:14,654
is the installed version and the affected versions are greater than 4.1.3.

287
00:19:14,852 --> 00:19:18,606
So to solve this issue you can upgrade the package so

288
00:19:18,628 --> 00:19:22,846
you can install 4.1.3 or higher versions and

289
00:19:22,948 --> 00:19:24,510
this issue will be solved.

290
00:19:26,070 --> 00:19:29,774
Now I have run this command once again after installing insecure

291
00:19:29,822 --> 00:19:33,646
package and now you can see here that it shows that it has checked

292
00:19:33,678 --> 00:19:37,702
222 packages on my system. And now one more

293
00:19:37,756 --> 00:19:41,286
package has been identified with the vulnerability that

294
00:19:41,308 --> 00:19:45,430
is insecure package. Now the version installed is 0.1.0

295
00:19:45,580 --> 00:19:48,906
and the affected version it says that version is less than

296
00:19:48,928 --> 00:19:52,374
0.2.0. Okay, so the solution

297
00:19:52,422 --> 00:19:55,994
is to upgrade the package. The next

298
00:19:56,032 --> 00:19:59,734
is safety db. So safety Db is a database

299
00:19:59,782 --> 00:20:03,370
of known security vulnerabilities in Python packages.

300
00:20:03,870 --> 00:20:07,358
The data is made available by Piup IO and

301
00:20:07,524 --> 00:20:11,040
synced with this repository once per month.

302
00:20:11,410 --> 00:20:14,762
So most of the entries are found by filtering CVE,

303
00:20:14,826 --> 00:20:18,834
that is, database of common vulnerabilities and

304
00:20:18,872 --> 00:20:22,526
considerations, and change logs for certain keywords

305
00:20:22,558 --> 00:20:26,286
and then manually reviewing them. The list is not a denial

306
00:20:26,318 --> 00:20:29,910
list or package to be avoided. Okay, so this is a very very important

307
00:20:29,980 --> 00:20:34,098
statement. Just because it is appearing in Pyap IO's

308
00:20:34,274 --> 00:20:37,894
insecure package list, it doesn't mean that you should avoid

309
00:20:37,942 --> 00:20:39,500
it. Okay,

310
00:20:40,830 --> 00:20:45,450
so you have to visit the list

311
00:20:45,520 --> 00:20:49,466
and see which version is affected and use

312
00:20:49,488 --> 00:20:53,130
the upgraded version or see what is the vulnerability

313
00:20:53,210 --> 00:20:56,590
and then decide whether to use it or not to use it

314
00:20:56,740 --> 00:21:00,346
because you will also find some of the most popular packets

315
00:21:00,378 --> 00:21:03,870
also in the list. Okay, so you can install

316
00:21:04,020 --> 00:21:07,662
safety db by using

317
00:21:07,716 --> 00:21:11,490
Pip command. Now safety db usage.

318
00:21:12,230 --> 00:21:16,050
So as I have said, you can visit this URL that is Pypi

319
00:21:16,130 --> 00:21:19,698
GitHub IO safety URL

320
00:21:19,874 --> 00:21:22,390
to see the list of insecure Python packages.

321
00:21:23,450 --> 00:21:26,914
Now to use in the program there are two JSON

322
00:21:26,962 --> 00:21:30,682
files. One is insecure JSON file which contains the package name

323
00:21:30,736 --> 00:21:34,140
and just the insecure releases as a plain text.

324
00:21:34,990 --> 00:21:38,234
It doesn't give you any additional information such

325
00:21:38,272 --> 00:21:42,154
as description. But if you want description then you can go for insecure

326
00:21:42,202 --> 00:21:45,742
underscore full JSON file which

327
00:21:45,796 --> 00:21:49,038
consists of cv description and URLs and the

328
00:21:49,044 --> 00:21:52,846
relevant part of the change log. So you

329
00:21:52,868 --> 00:21:56,722
can install safety db. We have already seen it.

330
00:21:56,776 --> 00:22:00,322
Now in order to use it in a program, you can

331
00:22:00,376 --> 00:22:04,034
import by saying from

332
00:22:04,072 --> 00:22:07,922
safety and score Db import insecure and insecure full. Depending on your requirement,

333
00:22:07,986 --> 00:22:11,750
you can use the appropriate file.

334
00:22:13,370 --> 00:22:16,150
SafetyDB also has some tools,

335
00:22:17,290 --> 00:22:20,982
so first one is the safety CI which is a deep GitHub integration

336
00:22:21,046 --> 00:22:25,046
that is available on Pyap IO. It checks your commits

337
00:22:25,078 --> 00:22:28,714
and pull requests. Then safety is a command line tool that

338
00:22:28,752 --> 00:22:32,458
checks virtual environments and requirement

339
00:22:32,634 --> 00:22:36,366
files either locally or on a CI server. We have

340
00:22:36,388 --> 00:22:39,486
already seen some examples. Then you can

341
00:22:39,508 --> 00:22:42,598
also check for Django environment.

342
00:22:42,794 --> 00:22:47,058
So it's a package for Django that wants you in admin area

343
00:22:47,144 --> 00:22:50,690
if your installed Django release is insecure.

344
00:22:51,670 --> 00:22:54,994
And similarly there is safety bar application which is

345
00:22:55,112 --> 00:22:59,494
macOS menu bar application which is in just

346
00:22:59,612 --> 00:23:02,854
alpha version and it gives very minimal information.

347
00:23:03,052 --> 00:23:06,950
Then there is something called pre commit hook by Lucas Simmons.

348
00:23:07,390 --> 00:23:10,934
It checks your python

349
00:23:10,982 --> 00:23:14,090
dependencies against safety DB.

350
00:23:14,590 --> 00:23:18,246
Then there is pip and check relies

351
00:23:18,278 --> 00:23:22,014
on safety and safety DB to check for known vulnerabilities in

352
00:23:22,052 --> 00:23:25,614
locked components. Now let us see the

353
00:23:25,652 --> 00:23:29,482
final tool. That's a Samgrep. It's an open source static

354
00:23:29,546 --> 00:23:33,774
analyzer. It works on 17 plus languages such as Python,

355
00:23:33,822 --> 00:23:36,420
Go, Java, Ruby, typescript and so on.

356
00:23:36,870 --> 00:23:40,194
And it also works with legacy languages. It is not

357
00:23:40,232 --> 00:23:44,322
controlled by any vendors. Thousand plus

358
00:23:44,456 --> 00:23:47,846
rules have been written by the community members

359
00:23:48,028 --> 00:23:51,462
and it enables you to write your own rules and

360
00:23:51,516 --> 00:23:55,110
rules look similar to code results available

361
00:23:55,180 --> 00:23:58,954
in the terminal editor or CI CD. It addresses OS top

362
00:23:58,992 --> 00:24:02,470
ten issues such as SQL injection,

363
00:24:02,550 --> 00:24:06,358
broken authentication and so on, insecure serialization,

364
00:24:06,454 --> 00:24:09,786
and so on. Then it eradicates classes of

365
00:24:09,808 --> 00:24:13,514
bugs by enforcing code guardrails at every stage of the development

366
00:24:13,562 --> 00:24:17,674
workflow. Then it also helps you to hunt vulnerabilities

367
00:24:17,722 --> 00:24:21,482
by iteratively exploring a code base with lightweight queries

368
00:24:21,626 --> 00:24:25,226
and a repl workflow. So I have mentioned the URL

369
00:24:25,258 --> 00:24:29,186
of a playground that is Samrep dev

370
00:24:29,288 --> 00:24:33,086
editor. You can visit this and select the language as Python and start exploring

371
00:24:33,118 --> 00:24:36,810
it. There are some default examples

372
00:24:36,910 --> 00:24:40,694
or built in examples are available. Start exploring it and if

373
00:24:40,732 --> 00:24:43,954
you just go to YouTube and search for Samgrep tutorial,

374
00:24:44,002 --> 00:24:47,726
you'll find a lot of very good tutorials

375
00:24:47,778 --> 00:24:51,900
available and they help you to write

376
00:24:54,270 --> 00:24:58,250
or they help you to explore more on Samgrep.

377
00:24:59,470 --> 00:25:02,030
Finally, let's see some general guidelines.

378
00:25:02,450 --> 00:25:05,594
If you are a package maintainer, then ensure that the package

379
00:25:05,642 --> 00:25:09,578
you are maintaining is secure and practice secure coding.

380
00:25:09,754 --> 00:25:14,002
As an application developer, follow secure coding principles while

381
00:25:14,056 --> 00:25:17,358
writing code. Then use tools

382
00:25:17,374 --> 00:25:21,090
to check vulnerabilities before using them in your projects.

383
00:25:21,670 --> 00:25:24,050
Periodically scan your environment,

384
00:25:24,970 --> 00:25:30,310
that is, even after upgrading it, because the new packages

385
00:25:31,690 --> 00:25:34,866
may come up with new vulnerabilities.

386
00:25:34,978 --> 00:25:38,650
It's possible. Or you might have installed a new package

387
00:25:39,230 --> 00:25:42,810
which might have some vulnerabilities.

388
00:25:43,230 --> 00:25:46,790
Then sign and verify packages using PGP keys.

389
00:25:46,950 --> 00:25:50,330
Then use twine for improved security and testability,

390
00:25:51,970 --> 00:25:54,954
then you can also scan packages before upgrading,

391
00:25:55,082 --> 00:25:58,334
so scanning packages after upgrading is also

392
00:25:58,372 --> 00:26:02,394
recommended. Then ensure that you install code from trusted

393
00:26:02,442 --> 00:26:06,250
source, such as the official repository or the correct repository.

394
00:26:06,330 --> 00:26:09,470
Don't install packages from untrusted source,

395
00:26:09,970 --> 00:26:14,254
okay? Such as nulled ones.

396
00:26:14,452 --> 00:26:18,214
They may contain vulnerabilities or the

397
00:26:18,252 --> 00:26:21,110
code has been modified by the attackers.

398
00:26:23,050 --> 00:26:25,220
Thank you everyone for listening to my talk.

