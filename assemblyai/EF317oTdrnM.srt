1
00:00:17,850 --> 00:00:21,242
Hi. In my talk from XML to compose,

2
00:00:21,386 --> 00:00:25,302
I'll be discussing my journey of transforming an existing large

3
00:00:25,356 --> 00:00:27,830
Android app to jetpack compose.

4
00:00:28,650 --> 00:00:32,098
I'm Ahmed Tikiwa, senior senior senior senior

5
00:00:32,194 --> 00:00:35,490
senior software engineer. Android am based in Cape Town,

6
00:00:35,570 --> 00:00:39,290
South Africa. The first question we'd ask is,

7
00:00:39,360 --> 00:00:42,582
why compose? Most Android development,

8
00:00:42,646 --> 00:00:45,850
including my own, include defining layouts using

9
00:00:45,920 --> 00:00:49,766
at least one XML file. This XML

10
00:00:49,798 --> 00:00:53,674
file will then contain a tree of UI widgets constituting

11
00:00:53,722 --> 00:00:55,550
an Android view hierarchy.

12
00:00:56,930 --> 00:01:00,142
For example, you'd have a constraint layout, and within

13
00:01:00,196 --> 00:01:04,202
that you'd have a text view and a button. If the user

14
00:01:04,266 --> 00:01:07,298
interacts with the screen, for example,

15
00:01:07,464 --> 00:01:10,834
this would result in a change in the app state, and thus a need

16
00:01:10,872 --> 00:01:14,126
for the UI hierarchy to be updated to display

17
00:01:14,238 --> 00:01:17,446
the current data representing the change state.

18
00:01:17,628 --> 00:01:21,462
However, to update the UI, a function such as find

19
00:01:21,516 --> 00:01:26,050
view by id is used to go through the hierarchy tree,

20
00:01:26,210 --> 00:01:29,606
and the internal state of the node, which is the UI

21
00:01:29,638 --> 00:01:33,450
widget, is updated through functions such as set

22
00:01:33,520 --> 00:01:37,722
text or add child. This manual change

23
00:01:37,776 --> 00:01:41,274
of the UI widget is very error prone, for example,

24
00:01:41,392 --> 00:01:44,894
trying to set a value to a node that has already been

25
00:01:44,932 --> 00:01:48,874
removed from the UI, thus resulting in an unintended

26
00:01:48,922 --> 00:01:52,414
exception. The more views that are part of the application, the higher

27
00:01:52,452 --> 00:01:55,090
the level of maintenance and complexity.

28
00:01:55,750 --> 00:01:59,666
Jetpack compose, on the other hand, was created with the

29
00:01:59,688 --> 00:02:03,666
intent to simplify the above and instead accelerate the way in

30
00:02:03,688 --> 00:02:06,806
which we develop our uis using less code

31
00:02:06,908 --> 00:02:10,806
and benefiting from a list of powerful tools all in

32
00:02:10,828 --> 00:02:14,594
Kotlin. In other words, no more XML

33
00:02:14,642 --> 00:02:18,022
defined layouts, which are referred to as the imperative

34
00:02:18,086 --> 00:02:21,686
approach. Rather, your views are now defined

35
00:02:21,718 --> 00:02:25,542
in the Kotlin code, referred to as the declarative approach,

36
00:02:25,606 --> 00:02:28,410
meaning you now describe your UI.

37
00:02:30,290 --> 00:02:34,110
So what are other companies saying about compose?

38
00:02:35,490 --> 00:02:39,386
At Monzo, it's much easier to trace through code when it's

39
00:02:39,418 --> 00:02:43,170
all written in the same language, which is Kotlin and often the same

40
00:02:43,240 --> 00:02:46,706
file. Rather than jumping back and forth between Kotlin and

41
00:02:46,728 --> 00:02:50,334
XML at Twitter, our theming

42
00:02:50,382 --> 00:02:53,874
layer is vastly more intuitive and legible. We've been able to

43
00:02:53,912 --> 00:02:57,410
accomplish within a single kotlin file what otherwise

44
00:02:57,490 --> 00:03:00,934
extended across multiple XML files that were

45
00:03:00,972 --> 00:03:04,530
responsible for attribute definitions and assignments

46
00:03:04,610 --> 00:03:08,310
via multiple layered theme overlays.

47
00:03:10,030 --> 00:03:12,970
So when was Jetpack Compose introduced?

48
00:03:14,910 --> 00:03:18,586
I first heard about Jetpack Compose and it was announced as a

49
00:03:18,608 --> 00:03:22,146
preview by Google at Google IO in 2019.

50
00:03:22,148 --> 00:03:25,806
And this is what Karen had to

51
00:03:25,828 --> 00:03:29,006
say at the time. One of the areas we

52
00:03:29,028 --> 00:03:32,302
never solved was UI we really wanted to look

53
00:03:32,356 --> 00:03:35,906
at. How could you make it super simple to develop

54
00:03:36,008 --> 00:03:40,030
UI and this is what Leland Richardson

55
00:03:40,190 --> 00:03:43,634
felt would happen. What I think is once people start seeing

56
00:03:43,672 --> 00:03:47,320
compose in action, it really becomes a delightful thing to program.

57
00:03:49,370 --> 00:03:53,078
Of course, as any developer, I was excited as I

58
00:03:53,084 --> 00:03:56,486
was already using Jetpack libraries extensively as part

59
00:03:56,508 --> 00:04:00,460
of my development, with now a shiny new

60
00:04:00,830 --> 00:04:04,314
library being added to accelerate or speed up my

61
00:04:04,352 --> 00:04:08,090
development with even less code. Though I was excited,

62
00:04:08,590 --> 00:04:12,542
I was also trying not to feel overwhelmed at the prospect of learning

63
00:04:12,596 --> 00:04:16,362
a whole new way of writing UI, as the imperative

64
00:04:16,426 --> 00:04:19,760
approach was what I was used to for many years.

65
00:04:20,690 --> 00:04:24,318
Also, due to time constraints, I also delayed learning jepky

66
00:04:24,334 --> 00:04:27,842
compose until recently. So how did I actually

67
00:04:27,896 --> 00:04:31,634
learn it? I started learning jepky compose through the

68
00:04:31,672 --> 00:04:35,206
course on the Android Developers website, which takes you

69
00:04:35,228 --> 00:04:39,010
through step by step into understanding the inner workings of compose

70
00:04:39,090 --> 00:04:41,858
from thinking in compose. The basics,

71
00:04:42,034 --> 00:04:44,322
navigation, theming,

72
00:04:44,466 --> 00:04:48,778
animation, integrating into existing apps, all of this through

73
00:04:48,864 --> 00:04:52,010
articles, videos and codelabs.

74
00:04:52,510 --> 00:04:56,458
The course also has a short quiz at the end to test your

75
00:04:56,544 --> 00:05:00,034
understanding of compose and includes a Jetpack compose

76
00:05:00,102 --> 00:05:04,074
badge which will be added to your developer profile on successful

77
00:05:04,122 --> 00:05:08,320
completion of the quiz. In addition to this,

78
00:05:08,930 --> 00:05:12,702
because I'm a visual learner and with a desire to

79
00:05:12,756 --> 00:05:16,462
thoroughly understand Jepper compose, I went through two paid

80
00:05:16,516 --> 00:05:19,714
Jetpack compose courses on Udemy. This approach is

81
00:05:19,752 --> 00:05:22,962
of course totally optional. You don't have to do this, but the extra

82
00:05:23,016 --> 00:05:26,098
visual tutorials help me. The first was a

83
00:05:26,104 --> 00:05:29,746
short course by Kathleen Gita, which is Jetpack

84
00:05:29,778 --> 00:05:32,710
compose crash course for Android with Kotlin,

85
00:05:33,210 --> 00:05:37,154
and the second and a more extensive course by Paolo Dichone,

86
00:05:37,282 --> 00:05:41,146
which covers the Kotlin fundamentals for those who either need a

87
00:05:41,168 --> 00:05:45,590
refresher or are new to Kotlin, and a series of different apps

88
00:05:45,750 --> 00:05:49,142
which are all part of this curriculum to help solidify

89
00:05:49,206 --> 00:05:52,942
the compose concepts and how all the components fit

90
00:05:52,996 --> 00:05:57,274
together coupled with state management. Once I was done with my learnings

91
00:05:57,322 --> 00:06:00,814
mentioned above, my desire was to now implement compose into

92
00:06:00,852 --> 00:06:04,370
my existing Android app. Up next tv series manager

93
00:06:07,030 --> 00:06:10,306
so I creators up next tv series manager in

94
00:06:10,328 --> 00:06:13,906
2015, a passion project of mine and has been in

95
00:06:13,928 --> 00:06:17,622
production since then and available on Google

96
00:06:17,676 --> 00:06:22,066
Play Store for download. The app boasts the following screens

97
00:06:22,258 --> 00:06:25,942
a dashboard screen which shows a schedule of shows that

98
00:06:25,996 --> 00:06:29,538
aired the previous day, the current day, and the next day provided

99
00:06:29,554 --> 00:06:33,446
by the TV Maze API. A search screen allowing

100
00:06:33,478 --> 00:06:36,778
the user to search for shows with the results displayed in a

101
00:06:36,784 --> 00:06:40,538
clickable list of cards with data provided

102
00:06:40,554 --> 00:06:44,702
by the TV Maze API an

103
00:06:44,836 --> 00:06:49,310
explore screen showing the currently popular

104
00:06:49,650 --> 00:06:53,166
trending and most anticipated shows provided by

105
00:06:53,188 --> 00:06:57,170
the trackit API a show detail screen

106
00:06:57,320 --> 00:07:01,138
showing a summary of the show, its cost information,

107
00:07:01,304 --> 00:07:05,182
a ratings breakdown provided by trackit, as well as previous

108
00:07:05,246 --> 00:07:09,170
and next episode information provided by TV Maze.

109
00:07:10,010 --> 00:07:13,078
Then it also has a list of seasons which is

110
00:07:13,164 --> 00:07:16,614
a screen on its own for particular show, displayed in a list

111
00:07:16,652 --> 00:07:20,890
of clickable cards with data provided by the TV Maze API.

112
00:07:21,790 --> 00:07:25,034
Then there is a list of episodes for that

113
00:07:25,072 --> 00:07:28,502
particular season displayed as well in the list of clickable cards

114
00:07:28,566 --> 00:07:31,710
with data also provided by the tvmaze API.

115
00:07:32,050 --> 00:07:36,014
Then finally there is a trackit account screen which displays one

116
00:07:36,052 --> 00:07:39,040
of two screens, whether you are logged in or out,

117
00:07:39,410 --> 00:07:43,234
and if the user is logged in, their list of up

118
00:07:43,272 --> 00:07:46,210
next favorite it shows will be displayed.

119
00:07:47,990 --> 00:07:51,810
So adopting compose choosing the right approach

120
00:07:52,470 --> 00:07:55,486
what makes Jetpack compose so powerful

121
00:07:55,518 --> 00:07:58,722
is that it caters not only to developers creating new apps,

122
00:07:58,786 --> 00:08:02,786
but also to developers who have existing apps and would like to include

123
00:08:02,818 --> 00:08:06,306
compose into it. What makes the latter a possibility

124
00:08:06,418 --> 00:08:10,234
is the concept of interoperability. What this

125
00:08:10,272 --> 00:08:14,090
means is that jetpack compose code can live side by side

126
00:08:14,160 --> 00:08:16,970
with XML based code. With that said,

127
00:08:17,120 --> 00:08:19,930
adoption can be done in one of two ways,

128
00:08:20,000 --> 00:08:22,800
according to the Android Developers website.

129
00:08:25,010 --> 00:08:28,558
The first is called the bottom

130
00:08:28,644 --> 00:08:32,682
up approach, which starts by migrating smaller

131
00:08:32,746 --> 00:08:36,274
UI elements on the screen like a button or

132
00:08:36,312 --> 00:08:40,162
a text view, followed by its view group elements until everything

133
00:08:40,216 --> 00:08:43,954
is converted to composable functions. Then you

134
00:08:43,992 --> 00:08:47,846
have got the top down approach which starts by migrating the

135
00:08:47,868 --> 00:08:51,058
fragments or view containers like a frame layout,

136
00:08:51,154 --> 00:08:54,582
constraint layout, or recycler view, followed by the

137
00:08:54,636 --> 00:08:58,650
smaller UI elements on the screen. So the reason

138
00:08:58,720 --> 00:09:02,186
interoperability is emphasized is

139
00:09:02,208 --> 00:09:06,202
because Google understands that overhauling the application can be a very

140
00:09:06,256 --> 00:09:10,214
expensive exercise, and so introducing compose into an existing

141
00:09:10,262 --> 00:09:13,718
app should be done step by step over a period of

142
00:09:13,744 --> 00:09:17,006
time. Migrating an app to compose takes time, and that

143
00:09:17,028 --> 00:09:20,442
is the case for my app up next tv series manager,

144
00:09:20,586 --> 00:09:24,558
where there are still paths that still need to be migrated to compose,

145
00:09:24,654 --> 00:09:28,818
such as the compose navigation. Currently, I'm currently using

146
00:09:28,984 --> 00:09:32,434
Jetpack navigation to navigate between my

147
00:09:32,472 --> 00:09:36,150
screens, so I will be migrating as well. In the future

148
00:09:36,220 --> 00:09:39,846
to compose navigation. I will now show how I

149
00:09:39,868 --> 00:09:43,222
leverage the power of interoperability for every screen.

150
00:09:43,276 --> 00:09:47,094
Were my approach was a screen by screen approach were

151
00:09:47,132 --> 00:09:50,602
I converted each screen layout to

152
00:09:50,656 --> 00:09:51,450
compose.

153
00:09:53,950 --> 00:09:56,940
So what does interoperability look like?

154
00:09:57,870 --> 00:10:01,562
Each of my fragments has an XML

155
00:10:01,626 --> 00:10:04,954
layout view associated with it. Some screens

156
00:10:05,002 --> 00:10:08,538
also have an additional layout for recycler view items

157
00:10:08,634 --> 00:10:12,698
used by their respective adapters. As this is

158
00:10:12,724 --> 00:10:16,562
a gradual migration to compose where I'm going screen by screen,

159
00:10:16,696 --> 00:10:20,066
I will be completely removing fragment files in

160
00:10:20,088 --> 00:10:24,622
the future, so not right now, and have compose navigation,

161
00:10:24,766 --> 00:10:28,642
where navigation will be from composable screen to composable

162
00:10:28,706 --> 00:10:33,350
screen, as opposed to my current fragment to fragment navigation.

163
00:10:35,210 --> 00:10:38,538
Then compose view makes it possible

164
00:10:38,624 --> 00:10:41,910
to introduce compose UI into an existing

165
00:10:41,990 --> 00:10:45,114
XML layout. The compose view

166
00:10:45,152 --> 00:10:48,522
acts as a container to host the compose UI content,

167
00:10:48,656 --> 00:10:52,986
thus making it possible for Android views to coexist

168
00:10:53,098 --> 00:10:56,990
with compose UI in the same XML file.

169
00:10:59,730 --> 00:11:02,646
So in my view or views,

170
00:11:02,698 --> 00:11:06,034
rather I removed all the Android views, which are

171
00:11:06,072 --> 00:11:09,454
the text views, recycler views, nestor scroll

172
00:11:09,502 --> 00:11:11,650
view, constraint layout,

173
00:11:12,150 --> 00:11:15,526
linear progress indicator, and released them

174
00:11:15,548 --> 00:11:16,920
with compose view.

175
00:11:18,490 --> 00:11:21,922
Once the app makes use of compose navigation,

176
00:11:21,986 --> 00:11:24,870
then the need for compose view will become redundant.

177
00:11:25,690 --> 00:11:29,058
So this is how my layout looks. I removed all the

178
00:11:29,084 --> 00:11:32,758
other layouts and all I have is the compose view which acts

179
00:11:32,774 --> 00:11:36,154
as a container, and the compose or the

180
00:11:36,192 --> 00:11:39,750
compose UI content will be then injected into it

181
00:11:39,920 --> 00:11:41,390
by jetpack compose.

182
00:11:43,970 --> 00:11:47,726
Then this is how my fragment looks. So within there,

183
00:11:47,748 --> 00:11:50,846
I reference compose view with data binding. So as

184
00:11:50,868 --> 00:11:54,386
you can see there binding composecontainer apply.

185
00:11:54,568 --> 00:11:58,882
And that's how I'm referencing my compose view, which is in my

186
00:11:58,936 --> 00:12:02,798
layout. Then, according to the documentation,

187
00:12:02,894 --> 00:12:06,214
by default, whenever the view is detached from

188
00:12:06,252 --> 00:12:09,698
the window, compose disposes of the composition.

189
00:12:09,874 --> 00:12:13,222
Compose UI view types such as compose and

190
00:12:13,276 --> 00:12:17,358
abstract compose view use a view composition strategy

191
00:12:17,474 --> 00:12:21,494
that defines this behavior. So, to ensure unintended

192
00:12:21,542 --> 00:12:26,054
behavior, and to ensure that compositions are disposed of automatically

193
00:12:26,102 --> 00:12:29,958
when not needed. For example, when the screen is not in play,

194
00:12:30,144 --> 00:12:34,270
then you need to use set view composition strategy,

195
00:12:34,690 --> 00:12:38,474
which is required without adding

196
00:12:38,522 --> 00:12:42,678
this set view composition strategy, my app actually crashed.

197
00:12:42,794 --> 00:12:46,802
So within set view composition strategy, I'm defining the strategy as

198
00:12:46,936 --> 00:12:51,022
viewcompositionstrategy dispose on view tree lifecycle

199
00:12:51,086 --> 00:12:55,170
destroyed. That is the composition strategy that I'm defining.

200
00:12:55,770 --> 00:12:58,726
Then the set content,

201
00:12:58,908 --> 00:13:02,934
which is a composable, takes in a

202
00:13:02,972 --> 00:13:06,914
composable function as a parameter. In this case, it's the theme

203
00:13:06,962 --> 00:13:10,170
definition MDC theme, as you see

204
00:13:10,240 --> 00:13:13,526
there. So MDC theme is also another composable,

205
00:13:13,718 --> 00:13:17,434
and this is actually created by a

206
00:13:17,472 --> 00:13:21,274
library which I added into my up next tv series

207
00:13:21,322 --> 00:13:25,054
manager, which allows me to leverage the power of

208
00:13:25,092 --> 00:13:28,894
material design within my app that

209
00:13:28,932 --> 00:13:32,202
is not yet fully migrated to jetpack compose.

210
00:13:32,346 --> 00:13:36,302
So it allows you to basically use your existing theme.

211
00:13:36,446 --> 00:13:40,354
It basically reads all your existing theme elements and

212
00:13:40,392 --> 00:13:43,586
converts them into what Jetpack compose is then going to be

213
00:13:43,608 --> 00:13:46,806
using from a material design point of view. So it will create

214
00:13:46,908 --> 00:13:50,706
the theme KT file, which it needs, the color KT file,

215
00:13:50,738 --> 00:13:54,470
the type KT file, all these files that it needs

216
00:13:54,620 --> 00:13:58,454
in order for it to leverage the power of material design within

217
00:13:58,492 --> 00:14:01,654
jetpack compose. So all of this is done in the background,

218
00:14:01,782 --> 00:14:05,674
and then once I fully migrate, I can then create my

219
00:14:05,712 --> 00:14:09,066
own material design files and then

220
00:14:09,088 --> 00:14:12,894
I will no longer need the MDC theme adapter in order to do

221
00:14:12,932 --> 00:14:17,146
that. And so within the MDC theme, it also takes the compose

222
00:14:17,338 --> 00:14:20,606
and the composable in this case is search screen,

223
00:14:20,708 --> 00:14:24,334
which is a composable that I creators and I'm passing to MDC

224
00:14:24,382 --> 00:14:27,906
theme. So basically MDC theme takes in

225
00:14:27,928 --> 00:14:31,282
a composable and whatever composable is contained within

226
00:14:31,336 --> 00:14:35,026
it will now have the material design theme applied to it,

227
00:14:35,208 --> 00:14:38,582
which is very nice. And so within my search screen, I am

228
00:14:38,636 --> 00:14:42,134
passing in the nav controller. As I said, I'm using

229
00:14:42,172 --> 00:14:45,426
the current jetpack navigation, so I'm passing

230
00:14:45,458 --> 00:14:48,666
in my nav controller into it to allow my composable to be

231
00:14:48,688 --> 00:14:51,370
able to perform the navigation functions.

232
00:14:54,350 --> 00:14:58,042
So breaking down the changes, the screen changes starting

233
00:14:58,096 --> 00:15:01,398
with the search screen. Okay,

234
00:15:01,584 --> 00:15:05,242
so Jetpack compose is built around composable

235
00:15:05,306 --> 00:15:08,554
functions, and within these functions you can define your app's

236
00:15:08,602 --> 00:15:12,254
UI programmatically by describing the UI of

237
00:15:12,292 --> 00:15:16,398
your app, how it should look, and provide the data necessary

238
00:15:16,574 --> 00:15:20,514
to be displayed. You therefore no longer have to focus on the

239
00:15:20,552 --> 00:15:24,654
process of the UI's construction, which is initializing

240
00:15:24,702 --> 00:15:27,798
an element or attaching it to a parent and so on. You don't need

241
00:15:27,804 --> 00:15:31,654
to worry about that. So in

242
00:15:31,692 --> 00:15:35,574
my case, I'm using my

243
00:15:35,612 --> 00:15:39,850
focus on this particular screen. There is updating

244
00:15:40,750 --> 00:15:44,166
the input area so where the user will be typing

245
00:15:44,198 --> 00:15:48,022
in their search query as well as the search results

246
00:15:48,086 --> 00:15:51,914
list. So I'll be focusing on the search result item.

247
00:15:51,962 --> 00:15:55,694
So building a composable for a search result item and

248
00:15:55,732 --> 00:15:59,422
then displaying the list of

249
00:15:59,476 --> 00:16:02,786
composable items that I would have created. So that will

250
00:16:02,808 --> 00:16:06,446
be my focus on this particular screen. Then I'm

251
00:16:06,478 --> 00:16:10,482
going to be removing the recycler view adapter, the view

252
00:16:10,536 --> 00:16:14,674
holder, and the item layout. So basically getting

253
00:16:14,712 --> 00:16:19,014
rid of all of that and leveraging the power of compose to

254
00:16:19,052 --> 00:16:23,302
display this particular screen. So having an input area and

255
00:16:23,356 --> 00:16:25,240
having the list displayed there.

256
00:16:26,170 --> 00:16:29,654
So this is the composable that I then created

257
00:16:29,702 --> 00:16:33,706
for the search screen that you saw in the previous slide. So you

258
00:16:33,728 --> 00:16:37,020
have there a function called search screen,

259
00:16:37,390 --> 00:16:41,520
and I created this function to represent my entire screen

260
00:16:42,930 --> 00:16:46,270
and this screen there,

261
00:16:46,340 --> 00:16:50,830
or this function rather is annotated by at composable.

262
00:16:51,730 --> 00:16:55,166
And this is how you define your composables.

263
00:16:55,278 --> 00:16:58,786
This is how you tell compose that this particular function

264
00:16:58,888 --> 00:17:02,610
is actually a composable and it's going to represent certain

265
00:17:02,680 --> 00:17:06,850
things with regards to compose. So compose,

266
00:17:06,930 --> 00:17:10,386
as I said is built around composable functions. It allows

267
00:17:10,418 --> 00:17:14,374
you to define your app's UI, provide data to be displayed. No more

268
00:17:14,412 --> 00:17:16,920
focus on UI construction process.

269
00:17:18,110 --> 00:17:22,746
So back to the search screen. So you've got the

270
00:17:22,768 --> 00:17:26,250
function there which I created called search screen.

271
00:17:26,400 --> 00:17:30,150
Notice my naming convention. So because

272
00:17:30,240 --> 00:17:33,774
this composable represents an entire screen,

273
00:17:33,892 --> 00:17:37,278
I decided to name it to

274
00:17:37,444 --> 00:17:41,002
add screen there at the end and notice

275
00:17:41,066 --> 00:17:43,986
how it starts off with a capitalized search.

276
00:17:44,088 --> 00:17:47,874
This is the norm within compose to actually have

277
00:17:47,912 --> 00:17:51,358
capitalized function names

278
00:17:51,534 --> 00:17:54,754
for your compose. Then for

279
00:17:54,792 --> 00:17:58,662
dependency injection I use hilt in my app. And because my

280
00:17:58,716 --> 00:18:01,862
view models are hilt view models, I can then

281
00:18:01,916 --> 00:18:05,494
pass hilt view model as you see there to allow my

282
00:18:05,532 --> 00:18:08,710
view model to be provided to the compose.

283
00:18:09,370 --> 00:18:13,478
And then the hilt view model call is part of the hilt navigation

284
00:18:13,574 --> 00:18:17,370
compose dependency which I've added to my

285
00:18:17,440 --> 00:18:21,270
project. Then because my app

286
00:18:21,360 --> 00:18:25,038
uses live data from the view model,

287
00:18:25,124 --> 00:18:28,334
so the data in my view model is live data is

288
00:18:28,372 --> 00:18:31,854
being returned as live data. I can then transform that live

289
00:18:31,892 --> 00:18:35,582
data value into state using observer

290
00:18:35,646 --> 00:18:39,934
state. So one thing to bear in mind is that composables

291
00:18:40,062 --> 00:18:44,098
rely on state in order for them to be

292
00:18:44,184 --> 00:18:48,106
composed or built on the screen or compose.

293
00:18:48,158 --> 00:18:51,734
So the process of recomposition is xmlbased on state,

294
00:18:51,852 --> 00:18:55,526
so reacting to certain states. So in this case I've got two

295
00:18:55,548 --> 00:18:58,726
state variables which are the search results list as well

296
00:18:58,748 --> 00:19:03,290
as the is loading state variables.

297
00:19:04,350 --> 00:19:07,962
So every time there would be a new value posted into the live

298
00:19:08,016 --> 00:19:10,830
data, the return state will be updated,

299
00:19:11,490 --> 00:19:15,262
causing recomposition of every state value

300
00:19:15,396 --> 00:19:19,262
usage when I migrate up next

301
00:19:19,316 --> 00:19:22,698
navigation to compose navigation, I will then use a

302
00:19:22,724 --> 00:19:26,050
scaffold layout which automatically provides slots for

303
00:19:26,120 --> 00:19:29,486
the top bar, the bottom app bar. For now I'm

304
00:19:29,518 --> 00:19:33,694
using what is called a surface layout or a surface composable,

305
00:19:33,822 --> 00:19:37,202
which basically is just a material surface where you can add things

306
00:19:37,256 --> 00:19:40,914
on it. And in this case I'm then defining that this surface,

307
00:19:40,962 --> 00:19:44,406
I want it to occupy the entire screen using what is called a

308
00:19:44,428 --> 00:19:48,506
modifier. And these modifiers allow you to basically

309
00:19:48,688 --> 00:19:52,358
define properties such as padding or clickability.

310
00:19:52,534 --> 00:19:56,202
You can basically append these to

311
00:19:56,256 --> 00:19:59,986
your composables to be able to allow to customize

312
00:20:00,038 --> 00:20:04,250
them, look in a certain way or behave in a certain way. So modifiers

313
00:20:04,330 --> 00:20:06,606
are great when it comes to that.

314
00:20:06,788 --> 00:20:10,794
So when I migrate

315
00:20:10,842 --> 00:20:13,738
to jetpack to compose navigation,

316
00:20:13,834 --> 00:20:17,106
rather then I'm going to replace surface with what

317
00:20:17,128 --> 00:20:21,058
is called the scaffold composable. So the

318
00:20:21,144 --> 00:20:24,418
scaffold composable, like I said, will then allow me to have the top bar and

319
00:20:24,424 --> 00:20:27,574
the bottom app bar. And so right now,

320
00:20:27,612 --> 00:20:31,430
because I'm not using the compose toolbar or the compose bottom

321
00:20:31,500 --> 00:20:34,754
app bar, I'm then making use of surface

322
00:20:34,802 --> 00:20:38,726
rather and then migrating it once I've migrated

323
00:20:38,758 --> 00:20:42,090
to jetpack compose navigation.

324
00:20:43,470 --> 00:20:46,826
All right, so here you will

325
00:20:46,848 --> 00:20:51,610
see that within my surface I'm also defining a column,

326
00:20:51,770 --> 00:20:55,822
and the column is basically a composable that allows your

327
00:20:55,876 --> 00:20:59,854
views or your composables which are contained within it to

328
00:20:59,892 --> 00:21:03,794
be arranged vertically so they're from

329
00:21:03,832 --> 00:21:05,060
top to bottom.

330
00:21:07,270 --> 00:21:11,214
Right? Then within my column I'm also defining

331
00:21:11,342 --> 00:21:15,314
a composable called a box. So I

332
00:21:15,352 --> 00:21:18,614
basically want to add a linear progress indicator, but in order

333
00:21:18,652 --> 00:21:22,438
to ensure that the list does not jump or shift position

334
00:21:22,524 --> 00:21:25,766
on the screen, when the linear progress indicator is removed from the

335
00:21:25,788 --> 00:21:28,982
screen, I rather want to display the linear progress

336
00:21:29,046 --> 00:21:32,870
indicator on top of the list. That way when it disappears,

337
00:21:33,030 --> 00:21:36,314
the list remains in its position, it doesn't shift or

338
00:21:36,352 --> 00:21:40,302
jump. To achieve this, I use the box

339
00:21:40,356 --> 00:21:44,314
composable, which is the equivalent of a frame layout. In the imperative

340
00:21:44,362 --> 00:21:47,694
approach, the box composable allows views to

341
00:21:47,732 --> 00:21:50,000
be on top of each other.

342
00:21:52,870 --> 00:21:56,402
Then within the box composable I have my

343
00:21:56,456 --> 00:21:59,906
custom composable called search area. So this is a

344
00:21:59,928 --> 00:22:03,534
composable that I created as well as the linear

345
00:22:03,582 --> 00:22:06,982
progress indicator which is only displayed if the is

346
00:22:07,036 --> 00:22:09,320
loading state is set to true.

347
00:22:11,290 --> 00:22:16,418
Right then for this particular composable.

348
00:22:16,594 --> 00:22:20,502
Before I explain what is going on here, there is one important concept

349
00:22:20,566 --> 00:22:24,266
which is very critical to composables and

350
00:22:24,288 --> 00:22:28,170
this is the convert of state hoisting, which is the process

351
00:22:28,240 --> 00:22:31,306
of moving state all the way up to the caller

352
00:22:31,418 --> 00:22:35,162
in that way ensuring that composables are as stateless

353
00:22:35,306 --> 00:22:39,038
as possible. In my case, the caller is search

354
00:22:39,204 --> 00:22:42,702
screen and the composables below it

355
00:22:42,756 --> 00:22:46,146
need to hoist the state up to it as much as

356
00:22:46,168 --> 00:22:49,854
possible. There are times however, where state hoisting

357
00:22:49,902 --> 00:22:53,154
isn't always possible. However, it is best practice to

358
00:22:53,192 --> 00:22:56,726
make composables as stateless as possible. So as a

359
00:22:56,748 --> 00:23:00,694
general rule of thumb, state comes down, the composables and

360
00:23:00,732 --> 00:23:04,130
events go up. When composables are stateless

361
00:23:04,210 --> 00:23:07,706
it also makes them easier to reuse. So my

362
00:23:07,728 --> 00:23:11,526
search area composable will represent the text field for entering

363
00:23:11,558 --> 00:23:15,834
the search query as well as the search results. It accepts three

364
00:23:15,872 --> 00:23:19,020
parameters, the search results list

365
00:23:19,630 --> 00:23:23,502
which is a list of show

366
00:23:23,556 --> 00:23:26,794
search model and then two function arguments

367
00:23:26,842 --> 00:23:30,030
which are on text submit and on result click.

368
00:23:30,180 --> 00:23:34,170
These are events that the composable will respond to and hoist

369
00:23:34,250 --> 00:23:37,730
up. The responsibility to the caller of search area

370
00:23:37,800 --> 00:23:40,194
to decide what to do with that event.

371
00:23:40,392 --> 00:23:43,762
Ontech submit will be invoked when the user has

372
00:23:43,816 --> 00:23:47,206
entered the search query. This event is then hoisted up

373
00:23:47,228 --> 00:23:50,518
from search form composable. Then on result

374
00:23:50,604 --> 00:23:54,246
click is then an event. When the user clicks on one

375
00:23:54,268 --> 00:23:58,362
of the search result items, then this event is hoisted up from

376
00:23:58,416 --> 00:24:01,130
the search result list composable.

377
00:24:02,590 --> 00:24:05,866
Then here's what my search form composable that

378
00:24:05,888 --> 00:24:09,542
I created looks like. It has a mutable state variable

379
00:24:09,606 --> 00:24:13,342
called search query state. In order to ensure that this state

380
00:24:13,396 --> 00:24:16,666
survives the activity or process recreation

381
00:24:16,858 --> 00:24:20,762
using the saved instance state mechanism

382
00:24:20,906 --> 00:24:23,570
I use remember saveable.

383
00:24:23,910 --> 00:24:27,890
Now the user's query will be remembered in a state variable.

384
00:24:28,790 --> 00:24:32,642
My search form compose makes use of

385
00:24:32,696 --> 00:24:36,210
a search input field composable,

386
00:24:36,370 --> 00:24:40,710
which is a compose I created as a simple wrapper around

387
00:24:40,780 --> 00:24:44,774
the material outline text field which I will show

388
00:24:44,812 --> 00:24:48,698
in the next slide. The state

389
00:24:48,784 --> 00:24:52,394
variable search query state is then used

390
00:24:52,512 --> 00:24:57,914
in the input field to then

391
00:24:57,952 --> 00:25:01,770
used in the input field. Initially the value will be an empty

392
00:25:01,930 --> 00:25:05,166
value because that's how I initialize it

393
00:25:05,188 --> 00:25:08,666
there. So it's an empty string on the start. Then when the user

394
00:25:08,698 --> 00:25:12,414
types a value, the on value change event is

395
00:25:12,452 --> 00:25:16,194
invoked and then the search query state value is updated and

396
00:25:16,232 --> 00:25:19,406
remembered. So continuing

397
00:25:19,438 --> 00:25:22,674
on with breaking down the changes. So this is now in my

398
00:25:22,712 --> 00:25:25,800
search screen where I have my search input field.

399
00:25:27,290 --> 00:25:30,982
My search input field composable looks like this.

400
00:25:31,116 --> 00:25:34,454
As you can see it calls a material outline text field.

401
00:25:34,572 --> 00:25:38,338
Passing it the input label, the value state

402
00:25:38,444 --> 00:25:41,846
which is a mutable state variable of type string,

403
00:25:41,958 --> 00:25:45,834
and when the outline text fields onvalue change is

404
00:25:45,872 --> 00:25:49,206
invoked, then that event is passed ups containing

405
00:25:49,238 --> 00:25:51,470
the new value of type string.

406
00:25:52,690 --> 00:25:56,042
My search results list composable

407
00:25:56,106 --> 00:26:00,286
takes two parameters, the list to be displayed and

408
00:26:00,308 --> 00:26:04,094
a function argument which will be the onclick event containing

409
00:26:04,142 --> 00:26:08,242
the search result item. Search result list

410
00:26:08,376 --> 00:26:12,018
then makes use of the lazy column which is the equivalent of

411
00:26:12,024 --> 00:26:15,814
the recycler view but more powerful under the hood. It's very

412
00:26:15,852 --> 00:26:19,062
nice. Also with this no

413
00:26:19,116 --> 00:26:22,374
requirement for adapters, viewholders and so

414
00:26:22,412 --> 00:26:26,370
on. Lazy column and its other counterpart lazy

415
00:26:26,450 --> 00:26:30,546
row simply take a list and inside the lambda

416
00:26:30,578 --> 00:26:33,670
which is referred to as the lazy item scope,

417
00:26:33,830 --> 00:26:37,702
and then define which composable represents the column or row

418
00:26:37,766 --> 00:26:41,482
for that list. Similar to when you would create an XML

419
00:26:41,546 --> 00:26:45,674
layout for a viewholder. This time you create a composable that represents

420
00:26:45,722 --> 00:26:49,342
that column or row. So there

421
00:26:49,396 --> 00:26:52,686
the list and the on click the parameters that are being passed

422
00:26:52,718 --> 00:26:53,380
to it.

423
00:26:55,990 --> 00:26:59,746
All right, so in

424
00:26:59,768 --> 00:27:03,854
the previous slide where I showed the search screen composable,

425
00:27:03,982 --> 00:27:07,186
I didn't show the full implementation until I

426
00:27:07,208 --> 00:27:10,726
had covered the above. In order to make things clearer. First this is

427
00:27:10,748 --> 00:27:14,706
the full call for the search area composable where a list is passed

428
00:27:14,738 --> 00:27:18,314
to it and when the search area composable's on

429
00:27:18,352 --> 00:27:21,482
result click event is invoked. Search screen will then

430
00:27:21,536 --> 00:27:25,558
call the nav controller as part of the Jetpack Navigation library

431
00:27:25,734 --> 00:27:28,140
to navigate to the show details screen.

432
00:27:29,550 --> 00:27:33,742
Then when the on tick submit event is invoked by search area,

433
00:27:33,876 --> 00:27:37,454
search screen will then notify the view model that the ticks has

434
00:27:37,492 --> 00:27:40,720
been submitted, passing in the query itself.

435
00:27:41,570 --> 00:27:44,290
So here are the before and afters.

436
00:27:45,430 --> 00:27:48,994
So we'll start off with the

437
00:27:49,032 --> 00:27:52,146
search fragment. So with the search fragment. As you can

438
00:27:52,168 --> 00:27:55,394
see there on the left hand side I

439
00:27:55,432 --> 00:27:59,510
showed it in a previous slide where you've got that layout there, the input field

440
00:27:59,580 --> 00:28:03,394
and the results coming in at the bottom. And this is all purely xml,

441
00:28:03,442 --> 00:28:07,238
this is all designed within XML using a recycler view,

442
00:28:07,324 --> 00:28:11,018
an adapter view holder and so forth. Then on

443
00:28:11,024 --> 00:28:15,130
the right hand side I created a search screen composable and

444
00:28:15,200 --> 00:28:18,362
this is how it all comes out. So within

445
00:28:18,416 --> 00:28:21,918
my search screen composable, I've got search area

446
00:28:22,084 --> 00:28:25,934
which then takes in the search form composable and

447
00:28:25,972 --> 00:28:29,630
the search results list composable and

448
00:28:29,700 --> 00:28:33,938
this is how it's all laid out. As you can see, my search screen

449
00:28:34,024 --> 00:28:37,362
consists of smaller composables that all

450
00:28:37,416 --> 00:28:41,426
then help build up the whole screen as a whole, which is

451
00:28:41,608 --> 00:28:44,974
the norm or the convert or the best practice

452
00:28:45,022 --> 00:28:48,338
when it comes to creating composables. Try to make your composables

453
00:28:48,354 --> 00:28:52,166
as small as possible so that you can then reuse them to build a

454
00:28:52,188 --> 00:28:56,594
whole screen. Then on the dashboard

455
00:28:56,642 --> 00:28:59,986
fragment this is how it's

456
00:29:00,018 --> 00:29:03,306
all laid out with my three columns there or

457
00:29:03,328 --> 00:29:07,114
three rows rather. So you've got the shows that aired yesterday, today, and then

458
00:29:07,152 --> 00:29:10,380
below it will be the shows that are airing the next day.

459
00:29:10,770 --> 00:29:14,458
And all of this again was designed using XML.

460
00:29:14,634 --> 00:29:18,826
And then I created a dashboard screen composable.

461
00:29:19,018 --> 00:29:22,834
And dashboard screen composable consists of a

462
00:29:22,872 --> 00:29:26,926
shows row composable which I created. And my shows row

463
00:29:26,958 --> 00:29:31,250
compose uses the lazy row composable allowing

464
00:29:31,750 --> 00:29:35,402
my cards there to be displayed in a horizontally

465
00:29:35,486 --> 00:29:39,378
scrolling list. Whereas a lazy column allows

466
00:29:39,394 --> 00:29:43,778
you to scroll vertically, lazy row allows you to scroll horizontally.

467
00:29:43,954 --> 00:29:47,830
So I've got two composables. One composable there

468
00:29:47,900 --> 00:29:51,850
shows row which takes in a list and displays the list in a

469
00:29:51,920 --> 00:29:56,134
horizontal list format. And as you can see I'm using that same composable

470
00:29:56,262 --> 00:29:59,318
basically reusing the reuse concept.

471
00:29:59,414 --> 00:30:02,618
And I'm reusing it for the shows that aired yesterday,

472
00:30:02,714 --> 00:30:06,990
the shows that are airing today, and below it the shows that are airing tomorrow.

473
00:30:08,130 --> 00:30:11,310
Then on the explore fragment again

474
00:30:11,380 --> 00:30:15,106
also fully designed in XML, on the right hand

475
00:30:15,128 --> 00:30:18,754
side is the composable version of that where

476
00:30:18,872 --> 00:30:23,170
I created explore screen composable. And within explore screen

477
00:30:23,240 --> 00:30:26,994
composable I've got trending shows row composable which

478
00:30:27,032 --> 00:30:30,806
uses the lazy row to display my list horizontally. And then

479
00:30:30,828 --> 00:30:34,326
I've got popular shows row which also uses lazy row and

480
00:30:34,348 --> 00:30:37,486
then below it I've got most anticipated shows row

481
00:30:37,538 --> 00:30:41,530
which also uses lazy row to display the items.

482
00:30:42,590 --> 00:30:46,570
Then I've got show detail fragment on the left hand side

483
00:30:46,640 --> 00:30:50,554
again also fully developed using XML. And then

484
00:30:50,592 --> 00:30:54,294
this is the composable version

485
00:30:54,342 --> 00:30:58,160
of that. So there at the top there you've got

486
00:30:59,170 --> 00:31:02,926
the image which is a backdrop image. And then there's the title has well

487
00:31:02,948 --> 00:31:06,226
as the status of whether the show is running or not. So all of that

488
00:31:06,248 --> 00:31:09,390
is contained within the composable backdrop and title.

489
00:31:09,550 --> 00:31:12,478
And that is one contained compose.

490
00:31:12,654 --> 00:31:16,054
And then below it you find poster and

491
00:31:16,092 --> 00:31:19,734
metadata composable which I created for that little

492
00:31:19,772 --> 00:31:23,650
poster thumbnail as well as the metadata when it airs

493
00:31:23,730 --> 00:31:27,830
the genres and that attribution there. And then below

494
00:31:27,900 --> 00:31:31,334
it with the synopsis of the show. I'm just using the material

495
00:31:31,382 --> 00:31:34,650
design text composable to display my summary,

496
00:31:35,310 --> 00:31:37,898
then continuing on with the show details screen.

497
00:31:38,064 --> 00:31:41,478
So I've got a button there for seasons

498
00:31:41,494 --> 00:31:44,942
which allows the user to navigate to the seasons fragment. I've got the show

499
00:31:44,996 --> 00:31:48,202
cost and I've got the next episode and previous episode

500
00:31:48,266 --> 00:31:51,978
information below it. And this is the composable version

501
00:31:52,074 --> 00:31:56,046
of that where it's got show detailed

502
00:31:56,078 --> 00:31:59,474
buttons. So basically I created a composable that will have house those

503
00:31:59,512 --> 00:32:03,422
buttons there so I can add and remove buttons from that one composable

504
00:32:03,486 --> 00:32:07,190
with ease. And then I've got a composable called show cost

505
00:32:07,260 --> 00:32:10,918
list which will then display the cost using a

506
00:32:10,924 --> 00:32:14,774
lazy row, so scrolling horizontally. And then were got a composable called

507
00:32:14,812 --> 00:32:18,034
previous episode which has got the previous episode information,

508
00:32:18,172 --> 00:32:22,054
so previous episode title as well as the synopsis

509
00:32:22,102 --> 00:32:25,754
of that episode and the same thing for next episode which I call

510
00:32:25,792 --> 00:32:29,926
next episode which is a separate composable continuing

511
00:32:29,958 --> 00:32:33,674
on with the show details screen. Then you've got the previous episode

512
00:32:33,722 --> 00:32:37,754
information and then you've got ratings there at the bottom. So these ratings

513
00:32:37,802 --> 00:32:42,046
come from the trackit API for that particular show.

514
00:32:42,228 --> 00:32:45,518
And this is how I created it in compose. So I've

515
00:32:45,534 --> 00:32:49,230
got my composable which is previous episode composable

516
00:32:49,390 --> 00:32:53,294
and then below it I've got the track it rating summary compose

517
00:32:53,342 --> 00:32:57,174
which I created, which allows me to lay things out as you see

518
00:32:57,212 --> 00:33:01,094
there. So it's a combination of a text view, two text

519
00:33:01,132 --> 00:33:04,982
views as well has a linear progress indicator which

520
00:33:05,036 --> 00:33:08,854
allows me to create those ratings there that you see there with the ten

521
00:33:08,972 --> 00:33:12,682
and going a certain percentage. So I can basically define a certain

522
00:33:12,736 --> 00:33:16,246
percentage and display it like that. So this is a component

523
00:33:16,278 --> 00:33:20,134
that I created and now which I can just easily include there

524
00:33:20,192 --> 00:33:22,480
into my compose screen.

525
00:33:24,450 --> 00:33:28,458
Then this is the show seasons episodes fragment

526
00:33:28,554 --> 00:33:32,518
on the left hand side. And this is how it looks completely designed

527
00:33:32,554 --> 00:33:36,702
in xml. And this is its composable counterpart,

528
00:33:36,846 --> 00:33:40,702
so fully created using compose. I've got my section heading

529
00:33:40,766 --> 00:33:44,194
text which is a composable I created basically.

530
00:33:44,392 --> 00:33:47,826
Now all my heading ticks are customized or

531
00:33:47,848 --> 00:33:51,654
at least standard across the app. All I just do is just call

532
00:33:51,692 --> 00:33:55,206
section heading text. I pass the ticks I want to show and they all come

533
00:33:55,228 --> 00:33:58,426
out in the same way that I want them to.

534
00:33:58,608 --> 00:34:03,174
And then I've got show season episodes composable

535
00:34:03,302 --> 00:34:07,590
which uses lazy column to display those cards vertically

536
00:34:07,670 --> 00:34:11,226
from top to bottom. And each card is represented

537
00:34:11,258 --> 00:34:16,590
by show season episodes episode card composable.

538
00:34:19,090 --> 00:34:22,394
So this is a trackit

539
00:34:22,442 --> 00:34:25,966
account fragment screen which is displayed

540
00:34:25,998 --> 00:34:29,570
when the user is currently logged in. So they will see their

541
00:34:29,640 --> 00:34:33,502
favorite shows there as listed there. And this is the composable

542
00:34:33,566 --> 00:34:36,934
counterpart of that same screen. So you've got the

543
00:34:36,972 --> 00:34:40,882
composable section heading text and then below it the composable

544
00:34:40,946 --> 00:34:45,234
favorites list which uses lazy vertical grid

545
00:34:45,362 --> 00:34:49,746
which is another type of composable that allows you to display your

546
00:34:49,868 --> 00:34:53,306
items in a grid format, which is very nice.

547
00:34:53,488 --> 00:34:57,226
So I was able to achieve same layout on the left but using a

548
00:34:57,248 --> 00:35:00,794
composable called lazy vertical grid. And then each item

549
00:35:00,842 --> 00:35:04,154
within the lazy vertical grid is represented by list poster

550
00:35:04,202 --> 00:35:07,390
card composable which I created.

551
00:35:08,770 --> 00:35:12,686
So what still needs to be updated or convert? So the first

552
00:35:12,708 --> 00:35:16,706
thing is the toolbar, as you can see there. Up next, tv series manager at

553
00:35:16,728 --> 00:35:21,086
the top there that needs to be updated to be a compose version

554
00:35:21,118 --> 00:35:24,434
of toolbar. Then the bottom app bar also needs

555
00:35:24,472 --> 00:35:29,014
to be migrated and then just

556
00:35:29,052 --> 00:35:30,950
go back to the previous slide.

557
00:35:33,770 --> 00:35:38,220
So what I also need to update here is

558
00:35:40,910 --> 00:35:44,554
the navigation section of things. So I basically need to use

559
00:35:44,592 --> 00:35:48,266
compose navigation. I need to remove all the fragment files and I need

560
00:35:48,288 --> 00:35:52,250
to use scaffold instead of surface. Then I need to replace

561
00:35:52,330 --> 00:35:56,618
all my observer state calls

562
00:35:56,714 --> 00:36:00,526
with mutable state observation instead. Then I

563
00:36:00,548 --> 00:36:03,906
would like to add animations to up next as

564
00:36:03,928 --> 00:36:07,266
whole make things pretty, make things move smoothly and

565
00:36:07,288 --> 00:36:10,046
nicely. And also, that's also another aspect of compose.

566
00:36:10,158 --> 00:36:13,522
Compose makes animations completely simple,

567
00:36:13,656 --> 00:36:17,590
or at least simpler than the previous iteration with the imperative approach.

568
00:36:18,410 --> 00:36:21,954
And then I also want to add tests for my composables.

569
00:36:22,002 --> 00:36:25,894
Very important. And compose actually downs have this

570
00:36:26,092 --> 00:36:30,250
available where you can actually create tests for your composables.

571
00:36:32,190 --> 00:36:34,330
So in terms of resources,

572
00:36:35,790 --> 00:36:39,146
so there's the official compose documentation and this is

573
00:36:39,168 --> 00:36:43,630
where you'll find it. Developer Android Jetpack compose

574
00:36:44,770 --> 00:36:48,266
and then the official compose course, which I mentioned earlier,

575
00:36:48,298 --> 00:36:53,150
which I did, you can find it on developer Android compose,

576
00:36:53,730 --> 00:36:56,110
pathwayscompose,

577
00:36:58,710 --> 00:37:02,578
and then compose layout basics, which basically

578
00:37:02,664 --> 00:37:05,926
allows you to understand how things are laid out. If you want

579
00:37:05,948 --> 00:37:13,778
a deeper understanding of all of that, you can find that developer Android.com japakomposelayoutbasics

580
00:37:13,954 --> 00:37:17,662
and then the state existing,

581
00:37:17,826 --> 00:37:21,270
which I mentioned earlier, which is an important concept

582
00:37:21,350 --> 00:37:24,442
within compose. This is where you'll find

583
00:37:24,496 --> 00:37:28,522
it there then in terms of the code.

584
00:37:28,656 --> 00:37:31,786
Up next, tv series manager is now available as an

585
00:37:31,808 --> 00:37:35,502
open source project. Before it was closed source, but now I have made it

586
00:37:35,556 --> 00:37:39,294
an open source project. You can view the code I mentioned within this

587
00:37:39,332 --> 00:37:42,866
entire presentation and more. So basically to understand how I

588
00:37:42,888 --> 00:37:46,158
did things. And I follow the MVvM

589
00:37:46,334 --> 00:37:49,874
pattern and you can see how I basically set that all

590
00:37:49,912 --> 00:37:53,474
up from my repository using room,

591
00:37:53,592 --> 00:37:57,750
as well as having my remote data source and then

592
00:37:57,900 --> 00:38:01,398
having my view model, fetching that information

593
00:38:01,564 --> 00:38:05,010
and then passing that over to my composables.

594
00:38:05,090 --> 00:38:09,014
So all of that code you'll be able to see in more detail as

595
00:38:09,052 --> 00:38:12,586
I was not able to show that in greater detail due to the

596
00:38:12,608 --> 00:38:16,314
time constraints of this presentation. But you can feel free to

597
00:38:16,352 --> 00:38:19,930
check out the repository there in a branch called feature,

598
00:38:22,930 --> 00:38:26,414
adding all my changes there. I will make

599
00:38:26,452 --> 00:38:30,334
these live once I feel I'm satisfied with the overall look and

600
00:38:30,372 --> 00:38:33,934
feel of compose. And contributions are

601
00:38:33,972 --> 00:38:37,202
welcome from the community. So if you'd like to contribute to this

602
00:38:37,256 --> 00:38:40,626
open source project, please feel free to do so.

603
00:38:40,808 --> 00:38:44,660
Please just read the readme and the contribution guidelines for more information.

604
00:38:47,130 --> 00:38:52,022
And that is it. That is the end of my presentation again.

605
00:38:52,076 --> 00:38:56,146
I'm Ahmed Tekua. I'm a senior software engineer specializing

606
00:38:56,178 --> 00:39:00,146
in Android at Luno and you can find me on Twitter

607
00:39:00,338 --> 00:39:01,670
at Ahmeds.

608
00:39:03,870 --> 00:39:07,206
And it has been a pleasure showing

609
00:39:07,238 --> 00:39:10,870
you my migration, my journey of migrating,

610
00:39:10,950 --> 00:39:14,654
my up next tv series manager to jetpack Compose. And I

611
00:39:14,692 --> 00:39:18,446
hope that you will try it within your apps. Just know that

612
00:39:18,548 --> 00:39:23,438
take things step by step, which is really important, and sometimes

613
00:39:23,524 --> 00:39:26,914
it might feel like you are writing a lot

614
00:39:27,112 --> 00:39:30,930
of code in order to create a composable. But just remember

615
00:39:31,080 --> 00:39:34,450
that if you create your composables in such a way that you can reuse them,

616
00:39:34,520 --> 00:39:37,522
you won't have to rewrite most of your compose,

617
00:39:37,586 --> 00:39:40,934
you can actually just reuse them in another screen, which will

618
00:39:40,972 --> 00:39:44,390
actually make your development much quicker and much easier.

619
00:39:45,210 --> 00:39:49,350
And just know that the community is available for any questions

620
00:39:49,500 --> 00:39:52,966
or queries that you might have. You can also feel free to reach out

621
00:39:52,988 --> 00:39:57,254
to me on Twitter if you have any questions or concerns. And thank

622
00:39:57,292 --> 00:39:59,460
you so much for having me.

