1
00:01:54,170 --> 00:01:58,186
Hello everyone and thank you all for watching my session on debugging

2
00:01:58,218 --> 00:02:01,726
Shodinger's app at Comp 42. So amazing to be

3
00:02:01,748 --> 00:02:05,046
here and I look forward to geeking out with you all today. My name,

4
00:02:05,108 --> 00:02:08,870
developer Steve. I'm one of the senior senior developer advocate, the migo.

5
00:02:09,290 --> 00:02:12,774
I'm going to talk about more about my background in a moment,

6
00:02:12,972 --> 00:02:16,598
but first, some housekeeping. Hello from the past.

7
00:02:16,684 --> 00:02:20,460
First of all, hello from the past. Hope you are all well.

8
00:02:20,910 --> 00:02:24,522
Also, as we go through the presentation, please drop any

9
00:02:24,576 --> 00:02:28,282
comments, questions and emojis into the chat, if there is one,

10
00:02:28,416 --> 00:02:32,218
or reach out to me on social media. I always love connecting

11
00:02:32,234 --> 00:02:33,920
to folks and geeking out.

12
00:02:35,090 --> 00:02:38,750
Yeah. With that in mind, I do have

13
00:02:38,900 --> 00:02:42,286
one thing to cover before we do get underway. And that is I have a

14
00:02:42,308 --> 00:02:45,658
disclaimer and it has an asterisk, which makes it even more of a disclaimer.

15
00:02:45,754 --> 00:02:48,866
But the disclaimer is I love tech jokes and

16
00:02:48,888 --> 00:02:51,234
I have a whole bunch of them. There's a couple that will be coming up

17
00:02:51,272 --> 00:02:54,926
during this presentation. I always love opening with them though, because it's

18
00:02:54,958 --> 00:02:58,274
important that we all keep smiling. This is an open source joke,

19
00:02:58,322 --> 00:03:01,894
so please make sure you share it amongst everyone. But how do

20
00:03:01,932 --> 00:03:05,960
fallen trees check for errors? Thinking music

21
00:03:06,570 --> 00:03:10,026
via log files? There we go. I didn't say they were

22
00:03:10,048 --> 00:03:13,814
good jokes, but all the same, please share, share amongst

23
00:03:13,862 --> 00:03:17,626
the community and just someone that you may

24
00:03:17,648 --> 00:03:20,902
know that just needs to smile on, well,

25
00:03:20,976 --> 00:03:24,670
anytime at all. Don't even need a reason. Anyway. Hello again,

26
00:03:24,740 --> 00:03:28,366
my name is developer Steve. I'm the senior developer advocate at

27
00:03:28,388 --> 00:03:31,742
Lumigo. I've been a developer advocate for

28
00:03:31,796 --> 00:03:34,654
many, many years now. And also writing code.

29
00:03:34,852 --> 00:03:37,986
Three times as long as that. No, twice as long as that. Yeah,

30
00:03:38,008 --> 00:03:41,874
I'll have to do my math anyway, for a long time, let's say.

31
00:03:41,992 --> 00:03:45,214
But funny story, I've been doing developer advocacy.

32
00:03:45,262 --> 00:03:48,178
That's not a funny story, but kind of is because I have a whole bunch

33
00:03:48,194 --> 00:03:51,382
of tech jokes. Anyway, I've been a developer advocate for many,

34
00:03:51,436 --> 00:03:54,934
many years now. And as such,

35
00:03:54,972 --> 00:03:58,422
I've been able to connect, been fortunate enough to connect to many tech

36
00:03:58,476 --> 00:04:02,106
communities throughout the world. And one of my

37
00:04:02,128 --> 00:04:05,754
favorite things is just being able to geek out and learn new things

38
00:04:05,792 --> 00:04:09,850
and share what I know and just help the communities do

39
00:04:10,000 --> 00:04:14,366
awesome things and all the amazing work that they do. But one

40
00:04:14,388 --> 00:04:17,680
of the things, I've done loads and loads of events through that as well.

41
00:04:18,130 --> 00:04:21,002
Over the years, people started calling me developer Steve.

42
00:04:21,066 --> 00:04:24,366
It's my social media. Like, I've been using it on social media for quite some

43
00:04:24,388 --> 00:04:27,826
time now, but so much so when I got married in 2018

44
00:04:27,848 --> 00:04:31,886
and we combined our surnames, but Kuchin

45
00:04:31,918 --> 00:04:35,726
is my married name. When I legally changed my name, I thought everyone's

46
00:04:35,758 --> 00:04:38,998
just been calling me it. I wonder if I can legally change my name to

47
00:04:39,004 --> 00:04:42,166
that. So turns out you can, and I did, and it's now

48
00:04:42,188 --> 00:04:46,326
my middle name. So, yeah, there you go. That was

49
00:04:46,348 --> 00:04:49,926
the funny story. But like I said, I've been

50
00:04:49,948 --> 00:04:53,594
coding for many, many years now. Back in the days of Cube Basic, for those

51
00:04:53,632 --> 00:04:56,250
that remember it on an Atari 800 excel.

52
00:04:56,830 --> 00:05:00,086
Taught myself Cubasic, which, well, I mean, as the name suggests,

53
00:05:00,118 --> 00:05:03,402
it was fairly basic, but being relatively new to code

54
00:05:03,456 --> 00:05:07,514
myself, it did take some time to, well, understand the fundamentals

55
00:05:07,562 --> 00:05:10,942
on how the language worked and then what could be done with it.

56
00:05:11,076 --> 00:05:14,666
You actually needed a lot of, just as an FYI, for those that haven't

57
00:05:14,698 --> 00:05:19,250
encountered it before, you needed a lot of basic to do, well, anything basic,

58
00:05:19,590 --> 00:05:23,438
which, well, I guess that's called that for a reason, right? Humble beginnings

59
00:05:23,454 --> 00:05:26,914
of the industry and also my developersteve Coochin story.

60
00:05:27,112 --> 00:05:31,046
But over the years, I've then gone on to work through a

61
00:05:31,068 --> 00:05:34,914
number of digital agencies, which I always loved because literally

62
00:05:34,962 --> 00:05:39,318
organized chaos. And you have to take all sorts of requirements in zero time

63
00:05:39,484 --> 00:05:42,858
and build out all sorts of applications in

64
00:05:42,944 --> 00:05:46,554
zero time as well, and then support them beyond deployment. Whole other

65
00:05:46,592 --> 00:05:49,686
story and whole other talk right there. Shout out to anyone that is in digital

66
00:05:49,718 --> 00:05:53,594
agency world, because it is literally, well, this is literally organized chaos

67
00:05:53,642 --> 00:05:56,160
sometimes. And hopefully that is not you.

68
00:05:56,930 --> 00:06:00,654
But one thing I

69
00:06:00,692 --> 00:06:04,082
took away from many projects as

70
00:06:04,136 --> 00:06:09,234
such is scaling applications is

71
00:06:09,272 --> 00:06:12,740
fundamental in the very early stages of any application.

72
00:06:13,190 --> 00:06:16,446
And so you might be building that application for only ten users

73
00:06:16,478 --> 00:06:19,942
now, but you have to build small now,

74
00:06:20,076 --> 00:06:23,846
but with big ideas later. And by that I mean you have to build

75
00:06:23,868 --> 00:06:27,206
out your application so that it can scale as the application

76
00:06:27,308 --> 00:06:30,634
adoption and the scalability is required as the

77
00:06:30,672 --> 00:06:34,220
app grows out. And if you think about it, that application

78
00:06:34,590 --> 00:06:38,246
that you're deploying now, or even that project that you're

79
00:06:38,278 --> 00:06:42,266
starting now with that idea, or that very early client stage

80
00:06:42,378 --> 00:06:46,094
project has to build for scale as the

81
00:06:46,132 --> 00:06:50,062
application requirements grow and also as its user base

82
00:06:50,116 --> 00:06:53,518
grows as well. That in a sense

83
00:06:53,604 --> 00:06:56,642
is, I mean, that's tech debt in a nutshell right there.

84
00:06:56,696 --> 00:07:00,274
Because that application, if you pick

85
00:07:00,312 --> 00:07:03,874
that up as either a new dev or go back

86
00:07:03,912 --> 00:07:07,730
to a project that you've already started building, but building with that scalability

87
00:07:07,810 --> 00:07:11,042
in mind is fundamental to the application's longevity.

88
00:07:11,106 --> 00:07:14,966
And to avoid that

89
00:07:14,988 --> 00:07:19,122
whole tech debt and, or as I like to think of it, future proofing

90
00:07:19,186 --> 00:07:22,634
for your future self. Now, the flip side of this is,

91
00:07:22,672 --> 00:07:26,266
and weve all been here too, is dealing with what I call the

92
00:07:26,288 --> 00:07:29,562
Friday night rule. The Friday night rule is something

93
00:07:29,616 --> 00:07:33,550
that came about from all the hackathons I've done over the years, which is

94
00:07:33,700 --> 00:07:37,470
developers and teams sort of asking which language should we build,

95
00:07:37,540 --> 00:07:41,166
this particular function or this particular idea in? And so for

96
00:07:41,188 --> 00:07:44,660
me, sort of going back to digital agency days, in particular,

97
00:07:45,350 --> 00:07:49,394
having the Friday night rule, which is half a game into

98
00:07:49,512 --> 00:07:53,218
a particular online streaming game or game not streaming game,

99
00:07:53,304 --> 00:07:56,402
a particular game you might be playing going,

100
00:07:56,536 --> 00:07:59,542
you might be halfway through a game and all of a sudden you get that

101
00:07:59,596 --> 00:08:03,286
alert saying applications down, or there's an

102
00:08:03,308 --> 00:08:06,518
issue, there's a problem with that deployed thing needs to

103
00:08:06,524 --> 00:08:10,122
be fixed ASAP. Being able to avoid that

104
00:08:10,176 --> 00:08:14,294
is, well, the fundamental goal when it comes to deploying

105
00:08:14,342 --> 00:08:18,154
applications and keeping them stable and more importantly, keeping our end

106
00:08:18,192 --> 00:08:21,920
users happy as well. Just going back to

107
00:08:22,530 --> 00:08:25,946
the Friday night rule too, with which language

108
00:08:25,978 --> 00:08:29,646
should I use? I've always loved Python for many reasons, but in

109
00:08:29,668 --> 00:08:33,214
particular it's versatility and heavy lifting. And by that I mean

110
00:08:33,252 --> 00:08:37,380
like, I've used it previously and it's fundamentally great for

111
00:08:37,830 --> 00:08:41,774
these things and a whole bunch more. But game development, application development,

112
00:08:41,822 --> 00:08:44,994
of course, being able to build things out super quickly on

113
00:08:45,112 --> 00:08:48,722
very robust and matured ecosystem and framework

114
00:08:48,786 --> 00:08:52,386
tools and libraries, et cetera. Shout out to all the folks that help maintain

115
00:08:52,418 --> 00:08:56,182
and contribute to those too. And please contribute back wherever you can,

116
00:08:56,236 --> 00:09:00,150
because it keeps all our applications

117
00:09:00,310 --> 00:09:03,530
contributing back, keeps all our applications happy and,

118
00:09:03,600 --> 00:09:07,302
well, our end users happy too. That's always important. Anyway, game development

119
00:09:07,366 --> 00:09:10,794
is definitely one of the versatile

120
00:09:10,842 --> 00:09:15,114
things that I've used Python for previously, API development

121
00:09:15,162 --> 00:09:18,800
as well. Given its Python's versatility and also

122
00:09:20,210 --> 00:09:24,030
being a heavy lifting language, well, I consider it to be heavy lifting.

123
00:09:24,370 --> 00:09:27,618
It can handle a whole bunch of tasks that you can throw at

124
00:09:27,624 --> 00:09:30,766
it, particularly in the API space. And I do love APIs.

125
00:09:30,878 --> 00:09:34,986
That's a whole other talk on its own, right. Just speaking volumes

126
00:09:35,038 --> 00:09:38,822
to its heavy lifting nature. Data sciences, I mean,

127
00:09:38,956 --> 00:09:41,990
very commonly used for any sort of analytical,

128
00:09:42,490 --> 00:09:46,626
any analytical heavy lifting. And I've previously

129
00:09:46,658 --> 00:09:50,278
spent ten years as a data analyst. So Python was

130
00:09:50,364 --> 00:09:53,746
definitely one of my go

131
00:09:53,788 --> 00:09:57,642
to tools in my toolkit to be able to build out

132
00:09:57,776 --> 00:10:01,354
any manner of reporting, but also analytical understanding

133
00:10:01,402 --> 00:10:05,262
on huge data sets. It's always great for web,

134
00:10:05,316 --> 00:10:09,518
of course, Django. Shout out to Django and one

135
00:10:09,524 --> 00:10:12,282
of the application components we're going to be looking at today.

136
00:10:12,436 --> 00:10:16,050
Flask for light demos and light application

137
00:10:16,200 --> 00:10:19,794
building. Flask is one of my total favorites to use

138
00:10:19,992 --> 00:10:22,290
and one of my all time favorites,

139
00:10:22,630 --> 00:10:26,194
micropython in IoT use as well,

140
00:10:26,232 --> 00:10:29,406
which is really cool. Actually, something I wanted to mention here that I've

141
00:10:29,438 --> 00:10:33,302
used it for previously. This one time I bought a new coffee table and

142
00:10:33,436 --> 00:10:36,166
looked at it and thought, wow, that looks like a really big iPad. I should

143
00:10:36,188 --> 00:10:39,206
put 300 led addressable leds in it.

144
00:10:39,308 --> 00:10:42,702
And so I did, using micropython ASB

145
00:10:42,866 --> 00:10:46,694
32 and you can change the color of the lights,

146
00:10:46,742 --> 00:10:50,246
which is amazingly cool. Also you can use Python,

147
00:10:50,278 --> 00:10:53,326
of course, on the back end of this too, to be able to do all

148
00:10:53,348 --> 00:10:56,910
the amazing coloring that you can see in this GIF here,

149
00:10:56,980 --> 00:11:00,990
which is always a fun project to do.

150
00:11:01,140 --> 00:11:05,842
Anyway, sort of going back to building

151
00:11:05,896 --> 00:11:09,234
for scalability. And this is where sort of something I've been

152
00:11:09,272 --> 00:11:12,340
thinking about a lot lately, how application

153
00:11:12,870 --> 00:11:16,322
deployment doesn't stop beyond that initial deployment.

154
00:11:16,466 --> 00:11:19,670
Because as developers, DevOps and technologists,

155
00:11:20,410 --> 00:11:24,034
monitoring and sort of tracing and observing applications

156
00:11:24,082 --> 00:11:27,754
beyond deployment is equally as important. And if we

157
00:11:27,792 --> 00:11:31,158
think of Schrodinger's rules of observability,

158
00:11:31,254 --> 00:11:36,170
for example, which is essentially a thought experiment

159
00:11:36,830 --> 00:11:40,542
around quantum superposition, in that

160
00:11:40,676 --> 00:11:44,320
if you aren't observing something, it is both

161
00:11:45,170 --> 00:11:49,038
not happening and happening at the same time, because that

162
00:11:49,124 --> 00:11:52,574
particular element isn't being observed. If we apply that same

163
00:11:52,612 --> 00:11:56,842
logic to application development, if you aren't observing and monitoring

164
00:11:56,906 --> 00:12:00,660
that deployed application, then it both has errors and

165
00:12:01,190 --> 00:12:04,846
doesn't have errors at the same time because you're not observing

166
00:12:04,878 --> 00:12:08,146
it to know that it's not having errors. So therefore it must also have errors

167
00:12:08,178 --> 00:12:11,094
too, which always hurts my head thinking about,

168
00:12:11,212 --> 00:12:14,754
but you know what I mean, like, unless you're observed these applications

169
00:12:14,802 --> 00:12:18,466
beyond deployment, you don't know whether an error

170
00:12:18,498 --> 00:12:21,818
is being thrown, and perhaps a user on the other side of

171
00:12:21,824 --> 00:12:26,060
that error assumes that that's the way the application is supposed to work.

172
00:12:26,510 --> 00:12:29,354
As the end users of multiple of application,

173
00:12:29,552 --> 00:12:33,518
it's always something I see, where there might be a little button

174
00:12:33,604 --> 00:12:37,486
that you click and a certain thing happens quickly, but then it's redirected to

175
00:12:37,508 --> 00:12:40,986
another screen. You can spot that as developer,

176
00:12:41,018 --> 00:12:44,674
as a developer, and be able to go, oh, that error is being

177
00:12:44,712 --> 00:12:48,110
thrown. Perhaps they don't know that that is actually occurring.

178
00:12:48,270 --> 00:12:52,382
These are those type of instances where observability, monitoring and tracing

179
00:12:52,526 --> 00:12:56,106
is able to help you identify that beyond deployed

180
00:12:56,158 --> 00:12:59,894
and to make sure, well, fundamentally, that if

181
00:12:59,932 --> 00:13:03,398
those things are happening, you can cater for them in the application

182
00:13:03,564 --> 00:13:07,266
and be able to continue to refine your deployed

183
00:13:07,298 --> 00:13:10,970
app to make sure your users are kept happy and the application

184
00:13:11,040 --> 00:13:14,582
is kept happy too. Additionally, that could be using resources

185
00:13:14,646 --> 00:13:18,570
that it's costing you money essentially as well. So always be

186
00:13:18,640 --> 00:13:21,742
always something to be mindful of. Of course,

187
00:13:21,796 --> 00:13:25,898
building these apps locally, there's a number of ways to identify

188
00:13:25,994 --> 00:13:30,014
and spot issues inside code, and as

189
00:13:30,052 --> 00:13:34,094
devs we fundamentally do it as well. So in using

190
00:13:34,132 --> 00:13:37,946
the core Python frameworks, for example, core debugging, weve got

191
00:13:37,988 --> 00:13:41,426
things like print logging, warning and PDB that's able

192
00:13:41,448 --> 00:13:45,486
to identify, you can use to basically output breakpoints

193
00:13:45,518 --> 00:13:49,330
or certain highlighted parts of the code to be able to identify

194
00:13:49,410 --> 00:13:52,886
issues as they're occurring. There's also libraries as well,

195
00:13:52,908 --> 00:13:56,086
a multitude of libraries like pprint, which I

196
00:13:56,108 --> 00:13:59,286
always love to do more extensive sort of output

197
00:13:59,318 --> 00:14:03,114
of issues and find things before

198
00:14:03,152 --> 00:14:06,262
my users find them and before they surface in production,

199
00:14:06,326 --> 00:14:09,594
because nobody wants that, particularly us

200
00:14:09,632 --> 00:14:12,510
maintaining and deploying said applications.

201
00:14:13,570 --> 00:14:17,518
Of course, our ides often use

202
00:14:17,684 --> 00:14:21,680
the same aforementioned methods to be able to surface those inside

203
00:14:23,090 --> 00:14:26,306
ides as you're building, but these applications as well. So like

204
00:14:26,328 --> 00:14:30,146
vs code, eclipse for example, all have built in mechanisms to identify this

205
00:14:30,168 --> 00:14:33,486
sort of stuff. So that brings

206
00:14:33,518 --> 00:14:36,486
us to the first demo, because I thought we'd look at some ways to be

207
00:14:36,508 --> 00:14:39,830
able to output and identify

208
00:14:40,410 --> 00:14:43,862
issues. And that's essentially what Schrodinger's app,

209
00:14:43,916 --> 00:14:47,426
Python app does, is simulate these errors

210
00:14:47,458 --> 00:14:51,514
so we can see and understand as developers how

211
00:14:51,552 --> 00:14:54,794
you can identify and trace and monitor and will

212
00:14:54,832 --> 00:14:57,610
keep your app nice and happy and healthy.

213
00:14:58,110 --> 00:15:01,754
It also brings us to another tech joke

214
00:15:01,802 --> 00:15:05,434
potentially, but this is a Python one and you can see it on screen sponsors,

215
00:15:05,482 --> 00:15:10,030
but what do you call eight bits in Python? A snake bite.

216
00:15:12,930 --> 00:15:16,398
But yeah, this application, and I'll have the GitHub link for this at

217
00:15:16,404 --> 00:15:20,354
the end of the talk so you can try it for yourself. Also, always looking

218
00:15:20,392 --> 00:15:24,082
for contributors too. So if you've got something you want added to the application,

219
00:15:24,216 --> 00:15:28,086
please open a pull request, but by all means try it for yourself.

220
00:15:28,188 --> 00:15:30,454
There's two demos we'll be doing today,

221
00:15:30,572 --> 00:15:34,374
spoilers. The first one I'm running locally to look at

222
00:15:34,412 --> 00:15:38,294
some of the output from the application, and the second

223
00:15:38,332 --> 00:15:41,690
one I've containerized and deployed to ecs, but we'll get

224
00:15:41,760 --> 00:15:43,660
into that in a little bit as well.

225
00:15:44,430 --> 00:15:47,782
Essentially, the app itself is built using Flask.

226
00:15:47,846 --> 00:15:51,530
I like flask. I need to make that as a meme. I like flask.

227
00:15:52,610 --> 00:15:55,978
Flask is great shout, but to that community I'm

228
00:15:55,994 --> 00:16:00,830
using alchemy on the back end to do some very basic databasing.

229
00:16:01,250 --> 00:16:05,154
Didn't have a lot of complex databasing needs for it. So yeah,

230
00:16:05,352 --> 00:16:09,006
it's pretty light. And then there's a handful

231
00:16:09,038 --> 00:16:12,162
of routes to get us started. Actually there's a few other ones,

232
00:16:12,216 --> 00:16:16,082
but these are some basic ones to get started. And this is a to do

233
00:16:16,136 --> 00:16:20,062
application. So I can enter to do items and then interact

234
00:16:20,126 --> 00:16:23,378
really, really easily just using some basic flask routes.

235
00:16:23,474 --> 00:16:26,966
Like get a list of to does, post a list

236
00:16:26,988 --> 00:16:30,780
of to dos, update and delete as well.

237
00:16:32,190 --> 00:16:35,722
Yeah, that's the fundamentals of it. There's a couple of other little

238
00:16:35,776 --> 00:16:39,146
fun ones that I've thrown in just to do more of that testing and sort

239
00:16:39,168 --> 00:16:42,938
of understanding of how errors handled

240
00:16:43,034 --> 00:16:46,206
not only through the infrastructure that the application is

241
00:16:46,228 --> 00:16:50,506
running on, but then also how your application can handle

242
00:16:50,538 --> 00:16:54,446
such things, and then also spotting and being able to identify

243
00:16:54,638 --> 00:16:59,140
these errors and warnings as they're flagged through.

244
00:17:00,310 --> 00:17:03,986
This does bring us to the first demo. So this is the

245
00:17:04,008 --> 00:17:07,078
application running locally. I actually don't have

246
00:17:07,084 --> 00:17:10,726
it running at the moment. There we go. Kick that off. Let's make sure.

247
00:17:10,828 --> 00:17:14,614
Yes, all running. Okay, so this

248
00:17:14,652 --> 00:17:18,770
is the app. Like I said, there's a bunch of really basic routes

249
00:17:18,850 --> 00:17:21,420
like add, which is handled through a post,

250
00:17:21,790 --> 00:17:24,300
the basic get, which will get the list of,

251
00:17:24,830 --> 00:17:28,602
make sure that's running, that'll get the list of to dos from

252
00:17:28,656 --> 00:17:32,474
the database, and then being able to see the output

253
00:17:32,522 --> 00:17:36,714
of all the routes being called and interacted

254
00:17:36,762 --> 00:17:39,646
with, which is also super important too,

255
00:17:39,748 --> 00:17:43,098
particularly locally development. But then we'll look at

256
00:17:43,124 --> 00:17:45,860
how that works on the cloud side of things in 1 minute.

257
00:17:47,030 --> 00:17:50,498
So if I create my first route, you can see

258
00:17:50,504 --> 00:17:52,100
in the terminal window there,

259
00:17:55,590 --> 00:17:58,886
it's basically showing the route being called and then the response from it

260
00:17:58,908 --> 00:18:02,550
as well. So from the flask server that's running, you can see

261
00:18:02,620 --> 00:18:06,120
that my HTTP status 200, everything's okay.

262
00:18:07,210 --> 00:18:10,646
We can interact with that a number of ways. So that there's

263
00:18:10,678 --> 00:18:14,380
an update route which basically just

264
00:18:15,070 --> 00:18:18,790
changes that particular database to do entry listing.

265
00:18:18,870 --> 00:18:22,970
It changes a status flag on it so that it

266
00:18:23,040 --> 00:18:25,882
changes the status type. And as you can see, it's finished, not finished,

267
00:18:25,946 --> 00:18:29,280
then triggers as well. And of course we can delete that as well.

268
00:18:29,730 --> 00:18:32,800
Now, I do have some fun things.

269
00:18:33,110 --> 00:18:36,354
Fun to do, special to does built into this as well

270
00:18:36,392 --> 00:18:40,178
for testing. So playing on the Schrodinger's cat

271
00:18:40,344 --> 00:18:44,306
paradigm, I have cat as a special

272
00:18:44,408 --> 00:18:47,814
task item. So you can see there the cat buttons now

273
00:18:47,852 --> 00:18:51,574
appeared as part of the cat entry listing. So if I click that now

274
00:18:51,692 --> 00:18:55,526
what that'll do is incrementally start to go through the

275
00:18:55,548 --> 00:18:59,034
400 HTTP statuses. So that just

276
00:18:59,072 --> 00:19:03,082
threw a, should have been a 400.

277
00:19:03,216 --> 00:19:07,382
And if I click that again, that will then start to iterate

278
00:19:07,446 --> 00:19:10,742
through different HTTP

279
00:19:10,806 --> 00:19:14,410
statuses as well. So it'll actually be throwing.

280
00:19:16,430 --> 00:19:20,058
Why is that not. There we go. Now it's throwing a 400. I don't

281
00:19:20,074 --> 00:19:23,706
know why I think there was a redirect stock there. Anyway, this is why tracing

282
00:19:23,738 --> 00:19:26,734
is important and monitoring, because you're able to identify this particular,

283
00:19:26,852 --> 00:19:30,498
this type of stock that should have thrown, yeah, there's a 401.

284
00:19:30,584 --> 00:19:34,114
All right, now it's working. See I can use tracing to

285
00:19:34,152 --> 00:19:37,086
basically delve into that a little bit further. You can see now it's like there's

286
00:19:37,118 --> 00:19:40,834
a 402, there's a 403, so it's just going to incrementally

287
00:19:40,882 --> 00:19:44,280
shift through those. And as a deployed application,

288
00:19:44,650 --> 00:19:48,326
this helps me understand how my application

289
00:19:48,428 --> 00:19:52,406
will not only handle these, but how these errors appear in the infrastructure

290
00:19:52,438 --> 00:19:56,090
that I'm deployed on as well. And in this setup it's fairly easy

291
00:19:56,160 --> 00:20:00,090
because well it's local and I can see what's going on. So if I do,

292
00:20:00,160 --> 00:20:03,498
the other one I can do is HTTPstat and I'm

293
00:20:03,514 --> 00:20:06,842
going to use HTTP status

294
00:20:06,906 --> 00:20:09,998
418, one of my favorites, rarely used

295
00:20:10,084 --> 00:20:13,422
other than, well, other than in applications like this.

296
00:20:13,556 --> 00:20:17,342
But 418 is I'm a teapot as a HTTP

297
00:20:17,406 --> 00:20:20,866
status, which is totally one of my favorites because it doesn't really mean anything but

298
00:20:20,888 --> 00:20:24,318
it's fun for testing and you can see that I've

299
00:20:24,494 --> 00:20:28,482
basically was able to throw HTTP status 418 and

300
00:20:28,536 --> 00:20:32,022
well I kind of knew what was causing it because well I caused it to

301
00:20:32,076 --> 00:20:35,382
happen, which is fairly easy.

302
00:20:35,436 --> 00:20:38,886
Also, first demo works era well it

303
00:20:38,908 --> 00:20:42,486
didn't work because it broke but then it somehow fixed

304
00:20:42,518 --> 00:20:45,962
itself. But anyway I think that was a caching issue inside the browser I'm pretty

305
00:20:46,016 --> 00:20:49,642
sure. But let's just try that quickly

306
00:20:49,776 --> 00:20:50,460
again.

307
00:20:52,990 --> 00:20:56,526
401. Yeah, see now it's working. I reckon that was

308
00:20:56,548 --> 00:21:00,334
a caching issue because I hit a particular HTTP status which was

309
00:21:00,532 --> 00:21:04,734
one of the not caching ones or do ignore

310
00:21:04,782 --> 00:21:08,430
ones. So yeah anyway, fix now. Hurrah. See Tracy,

311
00:21:08,510 --> 00:21:12,450
so easy. It's so helpful anyway and switch back to the deck

312
00:21:13,590 --> 00:21:17,174
and special mention here too. So that was like working the application

313
00:21:17,292 --> 00:21:20,966
locally. But of course deploying to a cloud is a whole other story

314
00:21:21,148 --> 00:21:25,362
because that application once deployed may not necessarily

315
00:21:25,426 --> 00:21:29,254
be able to see what is happening behind the scenes as easily

316
00:21:29,302 --> 00:21:33,002
as what weve able to there. Although all those

317
00:21:33,056 --> 00:21:36,198
times that I've dug through so many fervor

318
00:21:36,214 --> 00:21:40,286
logs to find that one needle in that haystack to figure out

319
00:21:40,308 --> 00:21:44,366
what's going on with my application, the amount of hair that you pulled, like doing

320
00:21:44,468 --> 00:21:47,854
that whole exercise. Special mention here

321
00:21:47,892 --> 00:21:53,386
too, to all those times where you've

322
00:21:53,418 --> 00:21:56,820
got that error appearing in a deployed application,

323
00:21:57,270 --> 00:22:01,090
but you fundamentally, even to yourself, come back to that whole

324
00:22:01,240 --> 00:22:05,234
but it was working on my machine. I've been here so many times, like having

325
00:22:05,272 --> 00:22:09,030
that error that we just had happen, which may have been an at happy accident.

326
00:22:09,610 --> 00:22:12,822
Having that one error occur locally is completely different

327
00:22:12,876 --> 00:22:16,770
to having that happen on not only cloud infrastructure,

328
00:22:16,850 --> 00:22:20,570
but deployed cloud native application infrastructure.

329
00:22:20,910 --> 00:22:24,406
And by that I mean when a cloud has a multitude

330
00:22:24,438 --> 00:22:28,314
of services that your application will use as

331
00:22:28,352 --> 00:22:31,430
part of a holistic application deployment,

332
00:22:31,590 --> 00:22:35,358
you might have a multiple of services connected now that are working

333
00:22:35,444 --> 00:22:38,730
completely fine, or at least behind the scenes,

334
00:22:38,890 --> 00:22:42,480
seemingly aren't throwing any errors and seem to be working okay.

335
00:22:42,790 --> 00:22:46,626
But as we all know, as the industry changes

336
00:22:46,728 --> 00:22:50,034
and continues to grow, a lot of these

337
00:22:50,072 --> 00:22:53,858
applications not only get new functions and new

338
00:22:53,944 --> 00:22:57,622
approaches to how they work, but they may change without

339
00:22:57,676 --> 00:23:01,414
you realizing and potentially cause issues with

340
00:23:01,452 --> 00:23:04,918
your deployed application. Also, again, going back to

341
00:23:04,924 --> 00:23:08,666
the Friday night rule where you half a game in, you get that

342
00:23:08,688 --> 00:23:12,140
message come through on that messaging app saying hey,

343
00:23:12,510 --> 00:23:15,430
something's down, something's not right, something's broken.

344
00:23:15,590 --> 00:23:19,750
Murphy's law suggests that it's probably going to happen in the most inconvenient

345
00:23:19,910 --> 00:23:23,294
time possible, either half a game in

346
00:23:23,332 --> 00:23:26,794
on a Friday night or at 02:00 a.m., granted,

347
00:23:26,842 --> 00:23:29,840
it's probably going to be both, baby, as well.

348
00:23:30,290 --> 00:23:32,640
We've all been there, we've all had that happen.

349
00:23:33,810 --> 00:23:37,220
This is weve distributed tracing is able to help with this because

350
00:23:38,390 --> 00:23:42,082
you can take a multitude of services consumed by your

351
00:23:42,216 --> 00:23:45,906
being consumed by your application, or running and empowering

352
00:23:45,938 --> 00:23:49,602
your application and get a nice holistic

353
00:23:49,666 --> 00:23:53,554
map traceable map of how those transactions interact

354
00:23:53,602 --> 00:23:57,174
with each of those different services. And if you think about

355
00:23:57,212 --> 00:24:00,534
it like being able to sort of navigate

356
00:24:00,582 --> 00:24:05,094
that maze of multiple application sort of resource usage

357
00:24:05,222 --> 00:24:09,450
across a single transaction, it sort of simplifies

358
00:24:09,870 --> 00:24:14,140
the mapping of your application and its footprint across that cloud native service.

359
00:24:15,650 --> 00:24:18,942
What's really important and really fun here though, is that

360
00:24:18,996 --> 00:24:22,618
one error that appears on the most inconvenient Murphy's

361
00:24:22,634 --> 00:24:26,354
law moment. You can then trace really easily as part of your

362
00:24:26,392 --> 00:24:29,380
holistic application map, which is really, really cool.

363
00:24:30,150 --> 00:24:33,614
Additionally, thanks to some industry

364
00:24:33,662 --> 00:24:36,366
standard approaches to tracing, monitoring and logging,

365
00:24:36,398 --> 00:24:40,242
now you're able to also do that agentlessly

366
00:24:40,306 --> 00:24:43,414
as well, and by that I mean, and we've all been

367
00:24:43,452 --> 00:24:47,058
here too. You don't need to run an additional service anymore

368
00:24:47,154 --> 00:24:50,902
on server infrastructure or cloud infrastructure

369
00:24:50,966 --> 00:24:55,114
to be able to monitor and map the

370
00:24:55,152 --> 00:24:59,094
full end tracing of those transactions across the multiple

371
00:24:59,142 --> 00:25:02,414
of cloud native application services as well.

372
00:25:02,612 --> 00:25:06,526
So you're able to get that holistic sort of application

373
00:25:06,628 --> 00:25:10,558
map and do it in an agentless approach and get

374
00:25:10,644 --> 00:25:13,490
that nice application cloud native footprint.

375
00:25:14,150 --> 00:25:17,906
Yes, agentless. And this

376
00:25:17,928 --> 00:25:20,514
is in part two, like I said, like I was saying, we were around the

377
00:25:20,552 --> 00:25:24,002
industry standard approach to a new

378
00:25:24,056 --> 00:25:27,894
approach called Open Telemetry, which open

379
00:25:27,932 --> 00:25:31,158
telemetry has been around, not only been around since

380
00:25:31,244 --> 00:25:35,158
2019, but it's actually part of the cloud Native Cloud

381
00:25:35,244 --> 00:25:39,066
foundation as well, which is really cool because it takes a

382
00:25:39,088 --> 00:25:42,854
vendor neutral approach, a vendor neutral open resources approach

383
00:25:42,902 --> 00:25:46,518
to observability across application metrics,

384
00:25:46,614 --> 00:25:50,426
frameworks and that whole community

385
00:25:50,528 --> 00:25:53,950
industry standard approach, which is fundamentally great

386
00:25:54,100 --> 00:25:57,278
because it means you don't need to get vendor locked in with

387
00:25:57,284 --> 00:26:01,262
your observability solution. And that is super important because friends

388
00:26:01,316 --> 00:26:04,654
don't let friends get vendor neutral locked in. Vendor locked in,

389
00:26:04,692 --> 00:26:07,280
rather vendor neutral for the win. Yeah,

390
00:26:08,770 --> 00:26:12,354
open telemetry. I won't go into this too much, but open telemetry is quite

391
00:26:12,392 --> 00:26:16,226
extensive. The open telemetry group have an

392
00:26:16,248 --> 00:26:19,590
amazing community, have some amazing write ups,

393
00:26:20,010 --> 00:26:23,522
a multitude of blog posts, and they're always looking for contributors

394
00:26:23,586 --> 00:26:26,854
to the project as well. They actually have a slack group too,

395
00:26:26,892 --> 00:26:30,474
of anyone looking to get involved or to connect

396
00:26:30,512 --> 00:26:34,102
to the community monitor as well. But essentially

397
00:26:34,166 --> 00:26:37,706
open telemetry, even the

398
00:26:37,808 --> 00:26:41,166
instrumentation or libraries that can

399
00:26:41,188 --> 00:26:44,442
connect into your application, all vendor neutral,

400
00:26:44,586 --> 00:26:48,110
all industry standard. So you can take these and connect

401
00:26:48,180 --> 00:26:51,434
to whatever monitoring solutions you want, including some open source

402
00:26:51,482 --> 00:26:54,886
ones or some auto trace,

403
00:26:54,938 --> 00:26:58,546
auto magical ones even, that we'll be looking at in

404
00:26:58,568 --> 00:27:02,254
a little bit as well. But it takes that industry standard approach

405
00:27:02,382 --> 00:27:05,874
across the multiple frameworks and multiple languages and

406
00:27:05,992 --> 00:27:09,334
standardizes it, which is great. I'm saying

407
00:27:09,372 --> 00:27:13,046
that as somebody that has not only run and deployed a

408
00:27:13,068 --> 00:27:16,406
number of services and cloud native applications over the years,

409
00:27:16,508 --> 00:27:20,486
but has also spent many hours delving through a

410
00:27:20,508 --> 00:27:24,166
multitude of logs looking for that one error that sometimes you just don't

411
00:27:24,198 --> 00:27:27,210
find, and you still have to figure out what your application is doing

412
00:27:27,360 --> 00:27:29,740
or what your application was trying to be doing.

413
00:27:31,230 --> 00:27:34,446
Special mention here, too, and I've already mentioned it once, but you can never say

414
00:27:34,468 --> 00:27:38,000
it enough times, but this is completely

415
00:27:38,370 --> 00:27:41,914
the open telemetry community, all open source,

416
00:27:41,962 --> 00:27:45,202
including all the amazing instrumentations you can see on the screen

417
00:27:45,256 --> 00:27:48,562
here too. So please, where possible,

418
00:27:48,696 --> 00:27:52,562
please make sure you are contributing back when you can

419
00:27:52,616 --> 00:27:56,146
as well. And so, Lumigo, one thing

420
00:27:56,168 --> 00:27:59,766
we always do is not only try and contribute back where we can to the

421
00:27:59,788 --> 00:28:03,910
open telemetry community, but we also support a number of our own open

422
00:28:03,980 --> 00:28:07,378
source, open telemetry traces as well,

423
00:28:07,484 --> 00:28:10,678
which sometimes you need alongside auto instrumentation,

424
00:28:10,774 --> 00:28:14,266
depending on how you're auto tracing or

425
00:28:14,288 --> 00:28:17,354
how you're tracing your particular application. So,

426
00:28:17,392 --> 00:28:20,266
two languages that I wanted to mention here,

427
00:28:20,368 --> 00:28:23,994
of course, Python, because we're at a Python conference, and then there's this other language

428
00:28:24,042 --> 00:28:27,902
which I won't talk about, but both of these

429
00:28:27,956 --> 00:28:31,038
are completely open resources. We're always looking

430
00:28:31,204 --> 00:28:35,342
for contribs and ideas on how we can build

431
00:28:35,396 --> 00:28:38,866
these out and make them not only more robust, but a lot easier to use.

432
00:28:38,968 --> 00:28:42,034
We're going to be looking at one of those in a moment as well,

433
00:28:42,072 --> 00:28:45,262
because they're really easy to set up and very easy to.

434
00:28:45,416 --> 00:28:48,662
Very easy to deploy. Just quickly

435
00:28:48,716 --> 00:28:52,486
on that too. And again, going back to the previous slide where I

436
00:28:52,508 --> 00:28:56,262
said, please contribute where you can, but I

437
00:28:56,316 --> 00:28:59,378
live in rural Australia and I have sheep,

438
00:28:59,474 --> 00:29:02,870
so I affectionately called one lambda recently,

439
00:29:02,950 --> 00:29:05,914
because Lambda to lamb. I've always wanted to call a lamb that, and I now

440
00:29:05,952 --> 00:29:09,322
have a lamb, but Lambda to lamb thanks you in advance for

441
00:29:09,376 --> 00:29:12,998
contributing stars. And this is me holding said Lambda. Oh, isn't he

442
00:29:13,024 --> 00:29:16,782
cute? He's actually a lot heavier now. This was only a couple of months

443
00:29:16,836 --> 00:29:21,178
old, and he's about seven months old now, so probes

444
00:29:21,194 --> 00:29:24,898
are not picking him up anymore. This is what happens when your lambdas get

445
00:29:25,064 --> 00:29:28,526
put on too much weight. It's probably a whole other joke

446
00:29:28,558 --> 00:29:32,590
there. These are really because of the industry standard approach

447
00:29:32,670 --> 00:29:35,746
to open telemetry. And again, going back to the vendor

448
00:29:35,778 --> 00:29:39,720
neutral approach as well. These are super easy to configure and install.

449
00:29:40,650 --> 00:29:44,040
I mean, you can use PIP with Python, you just use PiP to install

450
00:29:45,050 --> 00:29:48,902
the tracer library. Drop a reference into code.

451
00:29:48,956 --> 00:29:52,182
I'm going to show you what that is in a moment. Configure some environmental

452
00:29:52,246 --> 00:29:56,630
variables, because friends don't let friends hard code environmental

453
00:29:56,710 --> 00:29:58,940
things that can be environmental variables anyway,

454
00:29:59,470 --> 00:30:03,402
namely hotel underscore service, underscore name and Lumigo

455
00:30:03,546 --> 00:30:06,720
token tracer values as well.

456
00:30:07,970 --> 00:30:11,294
This version of the demo, I've taken the same application and

457
00:30:11,332 --> 00:30:15,182
containerized it and put it into ecs,

458
00:30:15,246 --> 00:30:19,300
essentially, yeah. And also

459
00:30:19,990 --> 00:30:24,014
I've got a different to do command set up to demonstrate

460
00:30:24,062 --> 00:30:26,390
interaction with sqs,

461
00:30:28,250 --> 00:30:31,414
simple queue service and how that

462
00:30:31,452 --> 00:30:34,982
can fit into tracing to give you a better view of

463
00:30:35,036 --> 00:30:37,160
what your application is doing as well.

464
00:30:38,590 --> 00:30:42,314
So with that in mind, let's take a look at

465
00:30:42,352 --> 00:30:45,994
a demo, a second demo. So like I

466
00:30:46,032 --> 00:30:49,478
said, I'm using the Lumigo

467
00:30:49,494 --> 00:30:52,794
open telemetry tracer, which you can see has been imported

468
00:30:52,842 --> 00:30:56,922
there. Alongside that I've got come environmental variables

469
00:30:56,986 --> 00:31:00,878
set in this next demo, namely a

470
00:31:00,884 --> 00:31:04,914
whole bunch of keys and secret accesses, region name

471
00:31:05,032 --> 00:31:08,942
and send queue URL for the AWS SQS

472
00:31:09,006 --> 00:31:12,542
service which is part of this application. And of course I've

473
00:31:12,606 --> 00:31:16,750
also made sure that I can handle

474
00:31:16,830 --> 00:31:19,878
those values not being set which is on inside the app. But we'll have

475
00:31:19,884 --> 00:31:23,080
the link at the end, so stay tuned for that one. You can try yourself.

476
00:31:24,570 --> 00:31:28,898
That's basically it. So just to be clear to the Lumigo

477
00:31:28,914 --> 00:31:31,930
tracer or the open telemetry tracer that I'm using here,

478
00:31:32,080 --> 00:31:35,594
that is it. Other than calling the library in, I'm not adding any

479
00:31:35,632 --> 00:31:38,746
additional code because I don't need to. That's pretty

480
00:31:38,768 --> 00:31:41,870
much it. So it just runs inside the application and

481
00:31:42,020 --> 00:31:45,774
sends all those traces through. So this

482
00:31:45,812 --> 00:31:50,158
is the ECS application I have running the container as application.

483
00:31:50,324 --> 00:31:53,746
It's pretty much the same as we saw before.

484
00:31:53,928 --> 00:31:57,620
I'll just refresh that so I can send through

485
00:31:59,030 --> 00:32:02,980
a bunch of basic path invocations which then

486
00:32:03,430 --> 00:32:08,550
will get surfaced inside our tracing service.

487
00:32:08,700 --> 00:32:12,406
So I have free tier Lumigo running here and as

488
00:32:12,428 --> 00:32:15,506
you can see, it's already been tracing. I'm just going to refresh

489
00:32:15,538 --> 00:32:19,898
that screen. It's already been tracing the

490
00:32:19,984 --> 00:32:24,234
cluster and the app that I've got deployed there by

491
00:32:24,272 --> 00:32:28,346
default. And all I've had to do to get to for

492
00:32:28,528 --> 00:32:31,754
this screen to happen, this monitoring to happen is just

493
00:32:31,792 --> 00:32:35,306
connect the two platforms, which takes a second,

494
00:32:35,408 --> 00:32:39,390
it's a couple of screens to go through as part of the free tier setup.

495
00:32:40,210 --> 00:32:43,866
What that library does is then add additional trace

496
00:32:43,898 --> 00:32:47,620
information as part of the application running. So if I click,

497
00:32:48,150 --> 00:32:51,586
I can click through to the application and see all the

498
00:32:51,608 --> 00:32:54,718
application screen and see some more details about the cluster that's

499
00:32:54,734 --> 00:32:58,130
running. But then if I click on see traces,

500
00:32:58,290 --> 00:33:01,526
because I've got that tracer library running, I'll then be able

501
00:33:01,548 --> 00:33:05,174
to see more detailed information about what's happening

502
00:33:05,292 --> 00:33:09,046
behind the scenes. So you can see the services that

503
00:33:09,068 --> 00:33:12,374
I just, or the routes that I just called just

504
00:33:12,412 --> 00:33:16,038
then are then already creating invocation data

505
00:33:16,124 --> 00:33:20,070
to come through the surface inside the open telemetry monitoring.

506
00:33:20,450 --> 00:33:24,560
Now I can level that up a little bit more by not only using

507
00:33:25,650 --> 00:33:29,262
one of the functions that we were looking at in the last demo.

508
00:33:29,396 --> 00:33:33,694
So if I click can again, it's going to start throwing a bunch of 400

509
00:33:33,812 --> 00:33:37,440
errors like it did before. Hopefully this time

510
00:33:40,550 --> 00:33:44,066
maybe was almost going to throw something. I think it's because it was

511
00:33:44,088 --> 00:33:47,286
a 402. Yeah, there we go. That's a 403. I can

512
00:33:47,308 --> 00:33:50,546
even do stats 418,

513
00:33:50,658 --> 00:33:54,934
which is I'm a teapot. It's definitely

514
00:33:55,052 --> 00:33:58,858
getting unhappy with I'm a teapot. So we will bail from

515
00:33:58,864 --> 00:34:02,954
that one. Let's go. So like

516
00:34:02,992 --> 00:34:07,622
I said, I have this other one set up that does SQS creates,

517
00:34:07,686 --> 00:34:10,938
essentially sends messages through to

518
00:34:11,024 --> 00:34:14,830
sqs as similar to what we've already been doing as well.

519
00:34:14,980 --> 00:34:18,334
So if I do meow, I then get a meow button and that

520
00:34:18,372 --> 00:34:22,222
will then start sending messages through meow one, meow two,

521
00:34:22,276 --> 00:34:25,726
meow three to the sqs queue that I've

522
00:34:25,758 --> 00:34:28,994
got set up. And you can see there, it looks

523
00:34:29,032 --> 00:34:33,202
to be working. But again, going back to the idea of Schrodinger's thought

524
00:34:33,256 --> 00:34:37,090
experiment, it appears to be working on the front end

525
00:34:37,160 --> 00:34:41,094
that I can see as an end user, but I don't necessarily know

526
00:34:41,132 --> 00:34:45,000
that what it's doing on the back end because weve got that distributed cloud,

527
00:34:45,530 --> 00:34:49,580
that approach to deployment, that distributed application.

528
00:34:50,590 --> 00:34:54,154
So if we go back to our explore, in fact, let's go

529
00:34:54,192 --> 00:34:57,674
to transactions, the transactions tab, you can

530
00:34:57,712 --> 00:35:01,466
see here there's some errors or some invocations which

531
00:35:01,488 --> 00:35:05,440
have started to appear from the stuff we've been doing inside our application.

532
00:35:05,810 --> 00:35:09,486
So you can see here there's two entries for 401. 402 is being

533
00:35:09,508 --> 00:35:13,074
thrown as part of the errors we're simulating. And then up

534
00:35:13,112 --> 00:35:16,606
here, those meow to does

535
00:35:16,638 --> 00:35:19,922
that we were just creating are actually picking up

536
00:35:19,976 --> 00:35:23,746
additional traits, information not only from our sort

537
00:35:23,768 --> 00:35:27,554
of base application, but any services that they then interact

538
00:35:27,602 --> 00:35:30,920
with as well. So you can see here the flask application,

539
00:35:31,370 --> 00:35:35,238
all this great information that appears in it is then also

540
00:35:35,404 --> 00:35:38,486
showing as part of the transaction that was happening,

541
00:35:38,668 --> 00:35:42,060
showing a connection straight into sqs as well,

542
00:35:42,510 --> 00:35:46,410
which is really handy when you start to think about really large

543
00:35:46,480 --> 00:35:50,334
applications and the footprint they can have across a

544
00:35:50,372 --> 00:35:53,614
multitude of services, not only within the same cloud,

545
00:35:53,732 --> 00:35:58,510
but associated services to like sending sms, sending emails,

546
00:35:58,930 --> 00:36:02,886
or if you're dealing with an e commerce application, also transactional

547
00:36:02,938 --> 00:36:07,218
systems like square for stripe for example, and how

548
00:36:07,304 --> 00:36:10,894
those services interact. And for ecommerce

549
00:36:10,942 --> 00:36:14,798
applications, you totally want to be monitoring for this sort of activity

550
00:36:14,894 --> 00:36:18,902
because you want to make sure that again, everything's working on the back end and

551
00:36:18,956 --> 00:36:23,334
your users are having the best possible application experience they

552
00:36:23,372 --> 00:36:25,446
can. So anyway,

553
00:36:25,548 --> 00:36:29,100
hurrah. The demo number two worked

554
00:36:30,430 --> 00:36:33,526
I'm almost out of time, so I'm just going to wrap

555
00:36:33,558 --> 00:36:35,420
up with a few more slides here.

556
00:36:36,750 --> 00:36:40,042
Just some takeaways to close on,

557
00:36:40,096 --> 00:36:43,422
but always be building for scale or aps as I

558
00:36:43,476 --> 00:36:46,810
like to think of it from the initial onset.

559
00:36:46,890 --> 00:36:50,286
Make sure you're building with that scale and growth mindset for

560
00:36:50,308 --> 00:36:53,634
your application in mind and making sure that everything

561
00:36:53,752 --> 00:36:57,298
will handle minimal users now, maximum users later,

562
00:36:57,384 --> 00:37:01,380
with a little refactor in between. Always be future proofing yourself.

563
00:37:02,470 --> 00:37:06,238
Rinse, repeat and refine. Just make sure again that you're

564
00:37:06,414 --> 00:37:10,150
identifying issues that occur and also ways that you can

565
00:37:10,220 --> 00:37:14,214
always improve your application because it's going to make that experience so much

566
00:37:14,252 --> 00:37:17,606
better and make your application run smoother as well.

567
00:37:17,788 --> 00:37:21,142
And most importantly, make sure you trace and monitor everything

568
00:37:21,196 --> 00:37:24,662
you possibly can to make sure everything's working as it

569
00:37:24,716 --> 00:37:28,422
potentially should. Nodejs available on here

570
00:37:28,476 --> 00:37:31,934
on my GitHub as well so so please go check

571
00:37:31,972 --> 00:37:34,474
that out. Always looking for contributes,

572
00:37:34,522 --> 00:37:38,026
stars and comments. So please reach out on socials

573
00:37:38,058 --> 00:37:41,680
if you have any issues or anything you wanted to add.

574
00:37:42,290 --> 00:37:45,738
Just lastly, please always remember to use your tech superpowers

575
00:37:45,754 --> 00:37:49,340
for good and be excellent to each other. Thank you very much.

