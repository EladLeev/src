1
00:00:30,850 --> 00:00:34,354
Hello everyone, and thank you for joining me for today's talk. My name is Travis

2
00:00:34,402 --> 00:00:37,970
Rodgers. I'm a developer relations engineer over at Teleport,

3
00:00:38,050 --> 00:00:41,494
where we provide identity native infrastructure access

4
00:00:41,612 --> 00:00:45,858
for engineers and machines. Now, the title of my talk today is replacing

5
00:00:45,954 --> 00:00:49,978
privileged users with automated, just in time access requests.

6
00:00:50,114 --> 00:00:54,618
Now, we could start this off with some history or with a bunch of definitions,

7
00:00:54,714 --> 00:00:58,158
but instead I'm going to start off with an end state in mind,

8
00:00:58,244 --> 00:01:02,394
an ideal end state for replacing privileged

9
00:01:02,442 --> 00:01:06,498
users with automated just in time access requests. There's going to

10
00:01:06,504 --> 00:01:10,146
be four parts to these ideal state. We'll talk in detail

11
00:01:10,248 --> 00:01:14,066
about those four parts, and then I'll move to a practical example

12
00:01:14,248 --> 00:01:18,658
of what this would look like using the open source solutions teleport.

13
00:01:18,754 --> 00:01:21,606
If all that sounds good, let's go ahead and get started.

14
00:01:21,708 --> 00:01:25,126
So what is this ideal scenario? So there's four

15
00:01:25,148 --> 00:01:29,478
parts to it. Number one, everyone has a least privileged

16
00:01:29,574 --> 00:01:33,590
policy. Number two, the ability to elevate

17
00:01:33,670 --> 00:01:37,690
privilege upon request and approval. Number three,

18
00:01:37,840 --> 00:01:41,822
this elevated privilege needs to be just in time or

19
00:01:41,876 --> 00:01:45,342
temporary, not perpetual. And then finally,

20
00:01:45,476 --> 00:01:48,810
there needs to be automation in place to ease this workflow.

21
00:01:48,890 --> 00:01:52,366
These are the four parts of this ideal scenario. So for

22
00:01:52,388 --> 00:01:55,410
now, let's take a deeper look at these four.

23
00:01:55,560 --> 00:01:59,970
All right. Number one, everyone with a least privilege policy.

24
00:02:00,120 --> 00:02:03,906
So the principle of least privilege means giving a user account

25
00:02:04,008 --> 00:02:07,638
or process only the privileges which are essential to perform

26
00:02:07,724 --> 00:02:10,818
its intended function. So there are two groups.

27
00:02:10,834 --> 00:02:14,850
These, there's privileged users and there's privileged users.

28
00:02:14,930 --> 00:02:18,454
This principle can be applied to both groups. Just because

29
00:02:18,492 --> 00:02:22,058
you're a privileged user doesn't mean you should have blanket access

30
00:02:22,144 --> 00:02:26,170
to everything. So, privileged users, now we do need

31
00:02:26,240 --> 00:02:30,054
some privileged users. Someone has to create your account as a new employee,

32
00:02:30,102 --> 00:02:33,818
right? Someone has to grant you a role or set you up can active directory.

33
00:02:33,914 --> 00:02:37,086
And that person often has privileged access to do

34
00:02:37,108 --> 00:02:40,394
so, allowing them to do so. These are it managers,

35
00:02:40,442 --> 00:02:43,798
these are system admins, database admins, security teams,

36
00:02:43,834 --> 00:02:47,218
et cetera. But again, this doesn't necessarily mean that

37
00:02:47,224 --> 00:02:51,086
they need blanket access to everything available. Access that they don't

38
00:02:51,118 --> 00:02:55,070
use regularly could be requested on an as needed basis

39
00:02:55,150 --> 00:02:58,738
and approved by other admins granting that approval.

40
00:02:58,914 --> 00:03:02,834
For example, there could be a super admin role, not a super admin

41
00:03:02,882 --> 00:03:06,706
account or super admin user, but a role that could be assumed

42
00:03:06,738 --> 00:03:10,102
temporarily for duties above the access of these privileged

43
00:03:10,166 --> 00:03:14,438
users. Maybe these could be a role for production Kubernetes clusters

44
00:03:14,534 --> 00:03:18,106
that no one has but would need to requests in order to

45
00:03:18,128 --> 00:03:21,926
access. This would dramatically shrink the attack surface for

46
00:03:21,968 --> 00:03:25,322
production clusters I mean, no one has that access unless

47
00:03:25,386 --> 00:03:28,638
requests temporarily, but we'll talk more about that later.

48
00:03:28,804 --> 00:03:32,878
As far as nonprivileged users, we can define this as users without

49
00:03:32,964 --> 00:03:36,718
administrative privileges. They have very specific roles assigned

50
00:03:36,814 --> 00:03:40,654
according to the principle of least privilege in relation to their titles

51
00:03:40,702 --> 00:03:43,982
or duties. So overall, in both of these examples,

52
00:03:44,046 --> 00:03:47,462
we're eliminating blanket super users with everyone

53
00:03:47,596 --> 00:03:51,494
abiding by the principle of least privilege. All right,

54
00:03:51,532 --> 00:03:54,642
number two in this ideal scenario is the ability

55
00:03:54,706 --> 00:03:58,770
to elevate privilege upon request and approval.

56
00:03:58,930 --> 00:04:02,058
So this could be assuming a role temporarily, like a

57
00:04:02,064 --> 00:04:05,306
super user role or a particular role set up

58
00:04:05,328 --> 00:04:09,094
for production clusters or whatever. This can also be accessing

59
00:04:09,142 --> 00:04:12,858
some very particular piece of infrastructure temporarily, like a server,

60
00:04:12,954 --> 00:04:16,126
a kubernetes cluster, or a database. And there are

61
00:04:16,148 --> 00:04:20,014
two parts to this. So number one, a request is made.

62
00:04:20,132 --> 00:04:24,094
An engineers requests access to a role or resource. And number

63
00:04:24,132 --> 00:04:27,858
two, the request is approved. Another engineer with the

64
00:04:27,864 --> 00:04:31,154
rights to approve these requests will approve. Maybe only

65
00:04:31,192 --> 00:04:34,786
a certain group can do the approving. There's flexibility in that. So there's two

66
00:04:34,808 --> 00:04:38,194
parts to it. There's the requester, and then there's the approver

67
00:04:38,322 --> 00:04:42,054
with RBAC that can decide who has the ability to do either

68
00:04:42,092 --> 00:04:46,082
one of those. And number three, in our ideal scenario,

69
00:04:46,146 --> 00:04:49,994
is that this elevated privilege needs to be just in time or

70
00:04:50,032 --> 00:04:54,422
temporary, not perpetual. So there should be no standing privilege

71
00:04:54,486 --> 00:04:58,410
or broad user access privileges that are always on.

72
00:04:58,560 --> 00:05:01,798
Access for a resource or role is often granted permanently

73
00:05:01,894 --> 00:05:05,614
and painted with a broad brush. I mean, it takes time

74
00:05:05,652 --> 00:05:09,454
to figure out the exact pieces that a user needs to elevate. So why

75
00:05:09,492 --> 00:05:13,294
not just grant the whole group out of convenience, right? You've done it.

76
00:05:13,332 --> 00:05:16,866
I've done jit. I mean, as engineers, often we don't know exactly what that

77
00:05:16,888 --> 00:05:20,978
person needs, so we just give them more access than they really need.

78
00:05:21,064 --> 00:05:24,766
In addition, this access can come in the form of keys or passwords

79
00:05:24,798 --> 00:05:27,846
to an account or resource or some other form of

80
00:05:27,868 --> 00:05:31,122
shared secret that's passed around between engineers.

81
00:05:31,266 --> 00:05:34,406
Think about a Pim key or a kubeconfig. Oh,

82
00:05:34,428 --> 00:05:37,830
you need admin access. Just use mine for now. But instead,

83
00:05:37,980 --> 00:05:41,820
an elevated access should be a just in time access.

84
00:05:42,510 --> 00:05:45,814
Just in time access is these way to enforce the principle

85
00:05:45,862 --> 00:05:49,126
of lease privilege, ensuring that users and service accounts

86
00:05:49,158 --> 00:05:53,118
are one, given the minimum amount of access needed

87
00:05:53,204 --> 00:05:56,990
or required, and number two, only granted that access

88
00:05:57,140 --> 00:06:00,234
temporarily. And then finally, the fourth

89
00:06:00,282 --> 00:06:03,646
piece of this ideal scenario would be to have automation in

90
00:06:03,668 --> 00:06:07,522
place to ease these workflow. Now, without automation of some sort,

91
00:06:07,576 --> 00:06:10,914
we have a big annoyance. Instead of someone putting in a request for some

92
00:06:10,952 --> 00:06:14,802
privileged escalation and having to wait for it to get process and

93
00:06:14,856 --> 00:06:18,106
probably trying to have to reach out or tag someone to look at it sooner

94
00:06:18,158 --> 00:06:21,894
than later and then multiplying that by 20 engineers a day. We need

95
00:06:21,932 --> 00:06:25,026
instead to make JIT easier to approve these requests.

96
00:06:25,138 --> 00:06:28,546
If we have to continually monitor tickets coming in for requests,

97
00:06:28,658 --> 00:06:32,138
we can't get our own work done. We need to automate this at

98
00:06:32,144 --> 00:06:35,462
least partially to ease this workflow. And I say partially

99
00:06:35,526 --> 00:06:39,354
because the whole security of it all required that it be approved by others

100
00:06:39,392 --> 00:06:42,966
on the team. Years ago I was an SRE and I got put

101
00:06:43,008 --> 00:06:46,282
temporarily on a developer project as a developer,

102
00:06:46,426 --> 00:06:50,222
and when I initially tried to build my dev environment, I ran into issues

103
00:06:50,356 --> 00:06:53,966
with not being able to access files in Azure storage and

104
00:06:53,988 --> 00:06:57,586
we had to create ticketed with the SRE team to get access to

105
00:06:57,608 --> 00:07:01,234
that azure storage. And don't ask me why sres are supposed to do

106
00:07:01,272 --> 00:07:05,026
this, but they're the ones to contact in these setting. On this particular

107
00:07:05,128 --> 00:07:08,386
contract that I was on, we were supposed to reach out to the sres and

108
00:07:08,408 --> 00:07:11,686
they would grant us access, but it would often take them days to

109
00:07:11,708 --> 00:07:14,966
get to the ticket. And if you tried to reach out directly, there would be

110
00:07:14,988 --> 00:07:18,774
pushback. Rightly so. Sres, I understand, and often

111
00:07:18,812 --> 00:07:22,618
they would settle with just giving you blanket access to the resource that you needed

112
00:07:22,704 --> 00:07:26,906
instead of trying to figure out the particulars of your place on

113
00:07:26,928 --> 00:07:29,782
that project. And again, that's out of convenience.

114
00:07:29,846 --> 00:07:32,970
Like I don't really know what you're supposed to have or what your teammates have,

115
00:07:33,040 --> 00:07:37,054
but I'll just give you admin access for now, and for now turns into

116
00:07:37,172 --> 00:07:40,926
perpetually. And this happened over and over as I got further into

117
00:07:40,948 --> 00:07:44,346
the project and it was a real pain, but automation

118
00:07:44,458 --> 00:07:47,506
could have eased that pain. So that's number four,

119
00:07:47,608 --> 00:07:51,106
have automation in place to ease this workflow. So we have

120
00:07:51,128 --> 00:07:54,686
these four requirements. Let me go over them again. Everyone with the least privileged

121
00:07:54,718 --> 00:07:58,406
policy, the ability to elevate privilege upon request and

122
00:07:58,428 --> 00:08:02,642
approval. This elevated privilege needs to be just in time or temporary,

123
00:08:02,786 --> 00:08:05,926
not perpetual. And there needs to be automation in place to

124
00:08:05,948 --> 00:08:09,250
ease this workflow. Now, before we move forward, I can

125
00:08:09,260 --> 00:08:13,414
hear your objection. Okay, it goes something like this. Bad actors

126
00:08:13,462 --> 00:08:17,014
can still get access to privileged user accounts and break havoc

127
00:08:17,142 --> 00:08:20,806
just because there isn't blanket super user access, and regardless

128
00:08:20,838 --> 00:08:25,258
of just in time access, it doesn't mean that a privileged account can't get hacked.

129
00:08:25,354 --> 00:08:28,526
And you're absolutely right. However,

130
00:08:28,708 --> 00:08:32,526
this is why the concept of identity is so important when it

131
00:08:32,548 --> 00:08:36,226
comes to access in general. So let me take a minute to

132
00:08:36,248 --> 00:08:39,390
talk about identity. Now, with true identity,

133
00:08:39,470 --> 00:08:43,314
like biometrics, you can get rid of passwords and secrets and

134
00:08:43,352 --> 00:08:47,358
API keys in anything that can be shared or impersonated.

135
00:08:47,534 --> 00:08:51,494
Think about a password and how it's supposed to link identity, but it's not

136
00:08:51,532 --> 00:08:55,382
true identity though, as it can be shared or stolen or users

137
00:08:55,436 --> 00:08:58,706
by someone else. Just because it's my username and password

138
00:08:58,818 --> 00:09:02,314
doesn't necessitate that it's actually me. And if someone gets

139
00:09:02,352 --> 00:09:05,770
my password or secret and they authenticate with it,

140
00:09:05,840 --> 00:09:08,858
then they're authorized to access what I have access to,

141
00:09:08,944 --> 00:09:12,346
and the audit trails falsely show me performing

142
00:09:12,378 --> 00:09:15,546
those tasks in any shared secret,

143
00:09:15,658 --> 00:09:19,630
granting access to standing privilege is dangerous, and this often

144
00:09:19,700 --> 00:09:23,690
happens where an engineer shares his admin access with another engineer,

145
00:09:23,770 --> 00:09:26,946
whether a kubeconfig or a PIM key or some other form of

146
00:09:26,968 --> 00:09:30,254
secret, so that they can perform administrative duties.

147
00:09:30,382 --> 00:09:34,034
And this is normally for convenience reasons. If there is no

148
00:09:34,072 --> 00:09:37,374
secret at all, and we are forced to prove identity,

149
00:09:37,502 --> 00:09:40,994
then we can successfully use RBAC and just

150
00:09:41,032 --> 00:09:44,626
in time access for privileged access. And this isn't

151
00:09:44,658 --> 00:09:48,374
just for users, but also for machines. Machines need

152
00:09:48,412 --> 00:09:52,154
an identity as well. And with all this being said, let's bring

153
00:09:52,192 --> 00:09:56,170
it all together with an open source identity native infrastructure access

154
00:09:56,240 --> 00:09:59,834
platform called teleport. And before we get to the just in

155
00:09:59,872 --> 00:10:03,646
time access part of teleport and that demonstration, let me just explain to you

156
00:10:03,668 --> 00:10:06,814
a little bit about what teleport is. So,

157
00:10:06,852 --> 00:10:10,394
teleport allows you to access all of your infrastructure in one central

158
00:10:10,442 --> 00:10:14,862
location, and it does so by deploying this identity aware proxy.

159
00:10:14,926 --> 00:10:18,482
So this is the teleport proxy. From here,

160
00:10:18,616 --> 00:10:22,654
users and service accounts will provide identity

161
00:10:22,782 --> 00:10:26,578
to gain access to this proxy. And that's done via

162
00:10:26,674 --> 00:10:30,582
web authent. So, biometrics service keys, it also

163
00:10:30,636 --> 00:10:34,530
integrates with your SSO solution. And the teleport proxy

164
00:10:34,610 --> 00:10:38,154
comes required with an RBAC system. So you're able

165
00:10:38,192 --> 00:10:41,754
to provide roles to decide who has access to

166
00:10:41,792 --> 00:10:44,966
what infrastructure. So you can access databases,

167
00:10:45,158 --> 00:10:48,294
servers, windows, desktops, kubernetes, clusters,

168
00:10:48,342 --> 00:10:52,106
and web applications. Intelliport has a built in certificate

169
00:10:52,138 --> 00:10:55,422
authority that issues short lived certificates to

170
00:10:55,476 --> 00:10:58,926
access this infrastructure. So in this entire setup, there are

171
00:10:58,948 --> 00:11:02,314
no passwords, keys, or secrets that can be shared.

172
00:11:02,442 --> 00:11:06,358
There's short lived certificates, there's an RBAC system deciding

173
00:11:06,394 --> 00:11:10,590
who has access to what. And to access this identity aware proxy,

174
00:11:10,670 --> 00:11:14,066
you have to prove your identity and let me actually log in and

175
00:11:14,088 --> 00:11:17,346
show you what this looks like. So here I'm at the login screen.

176
00:11:17,528 --> 00:11:21,298
And I have different ways to log in, but I'm

177
00:11:21,314 --> 00:11:24,466
just going to log in via a GitHub SSO setup.

178
00:11:24,658 --> 00:11:28,626
So I'm going to click GitHub and this is going to issue me a certificate

179
00:11:28,658 --> 00:11:32,314
to access this proxy for 12 hours. Once inside,

180
00:11:32,432 --> 00:11:35,866
I have a role that allows me everything, pretty much. So here are

181
00:11:35,888 --> 00:11:41,784
all of my servers. I can connect to a server from

182
00:11:41,822 --> 00:11:45,320
within teleport. I have applications,

183
00:11:47,100 --> 00:11:50,664
I can do the same thing here. I can launch the application. I have

184
00:11:50,702 --> 00:11:54,424
kubernetes clusters, I have databases and

185
00:11:54,462 --> 00:11:58,092
I have desktops. So as an engineer, you log

186
00:11:58,146 --> 00:12:01,896
in and you can access all of your infrastructure from one central location.

187
00:12:02,008 --> 00:12:05,500
If I go to management, you'll see we do that via roles.

188
00:12:06,160 --> 00:12:09,872
So if I go to this cube access role, you'll see that I have access

189
00:12:09,926 --> 00:12:13,436
to all Kubernetes clusters, because you can assign labels to clusters

190
00:12:13,548 --> 00:12:17,184
and then roles based on the labels. So these two stars mean

191
00:12:17,222 --> 00:12:20,432
I have access to everything, all labels. So there's a complete

192
00:12:20,486 --> 00:12:24,448
RBAc system, there's an auditing system. So here's the audit log of who's

193
00:12:24,544 --> 00:12:27,568
logging in, what certificates are being issued,

194
00:12:27,664 --> 00:12:31,248
et cetera. But we're here to talk about just in time access, right? So I'm

195
00:12:31,264 --> 00:12:34,810
going to log into my own cluster that has that set up already.

196
00:12:37,260 --> 00:12:41,204
So here's the login to another cluster that I have set up for this demonstration.

197
00:12:41,332 --> 00:12:44,852
And I would normally just go passwordless and touch my fingerprint reader,

198
00:12:44,916 --> 00:12:47,868
but since my computer's closed up, I'm going to go back and put in a

199
00:12:47,874 --> 00:12:53,276
password. So, Travis admin and

200
00:12:53,298 --> 00:12:58,384
then I'm going to touch my security key as a second factor and

201
00:12:58,422 --> 00:13:01,552
I'm logged in now, just in time access, of course,

202
00:13:01,606 --> 00:13:04,512
is not exclusive by any means to teleport. However,

203
00:13:04,646 --> 00:13:08,412
teleport provides a complete, secure, and frictionless solution

204
00:13:08,476 --> 00:13:11,876
to your engineers to access their infrastructure and

205
00:13:12,058 --> 00:13:15,236
has this just in time access fully integrated with it.

206
00:13:15,338 --> 00:13:18,596
So, taking a look again at our ideal state, let's compare this with

207
00:13:18,618 --> 00:13:22,276
what teleport offers. So number one, teleport has a built

208
00:13:22,298 --> 00:13:25,416
in RBAC system to configure least privileged policy

209
00:13:25,518 --> 00:13:29,460
for users. Number two, teleport provides the ability

210
00:13:29,540 --> 00:13:33,076
to elevate privilege upon request and approval.

211
00:13:33,268 --> 00:13:36,684
Number three, these elevated privilege requests are just

212
00:13:36,722 --> 00:13:40,776
in time and they're not perpetual. And then four, teleport integrates

213
00:13:40,808 --> 00:13:43,720
with tools like Slack, Pagerduty, et cetera,

214
00:13:43,800 --> 00:13:47,324
to provide automation conf 42 ease the workflow of

215
00:13:47,362 --> 00:13:50,828
requests and approvals, and we're going to look at all of that now, so we're

216
00:13:50,844 --> 00:13:54,128
going to look at three examples here. Number one, we're going

217
00:13:54,134 --> 00:13:58,588
to look at a simple role based access example with open source teleport.

218
00:13:58,684 --> 00:14:01,956
So let's say we have a user named Bob who's on the security team.

219
00:14:02,058 --> 00:14:05,364
He often needs access to the Kubernetes dev cluster a couple of times

220
00:14:05,402 --> 00:14:09,124
a week to run scans. In fact the project manager also

221
00:14:09,162 --> 00:14:12,464
needs periodic access as well. But due to internal

222
00:14:12,512 --> 00:14:16,296
hypothetical reasons, we don't want to grant either team permanent access

223
00:14:16,398 --> 00:14:19,940
to our cluster. So what we can do is assign them a role

224
00:14:20,020 --> 00:14:23,944
that allows them to request access to the Kubernetes dev cluster for

225
00:14:23,982 --> 00:14:27,804
a short time. So let's imagine Bob on the security team needs an hour

226
00:14:27,842 --> 00:14:30,460
or two to work on the Kubernetes dev cluster.

227
00:14:31,360 --> 00:14:34,956
So if you look at Kubernetes you'll see that there's a cluster called minicube Dev.

228
00:14:35,058 --> 00:14:38,960
This is the cluster that Bob is looking to access for a couple of hours.

229
00:14:39,110 --> 00:14:42,736
So if we go to management and find Bob here,

230
00:14:42,838 --> 00:14:46,304
we see that Bob has a role called Jit Kubernetes dev

231
00:14:46,342 --> 00:14:49,590
admin. If we look at what that role does,

232
00:14:52,200 --> 00:14:55,552
that role allows whoever has it to request

233
00:14:55,616 --> 00:14:58,916
access to this Kubernetes dev admin role. Whoever has this

234
00:14:58,938 --> 00:15:02,388
role is allowed to request access to this particular

235
00:15:02,474 --> 00:15:06,104
role. So Bob has that, he should be good to go and

236
00:15:06,142 --> 00:15:09,272
able to request access to that role. And we're going to use

237
00:15:09,326 --> 00:15:13,652
the terminal for this teleport has a CLI

238
00:15:13,716 --> 00:15:17,316
called the TSH CLI to do this. It also has a tcuddle

239
00:15:17,348 --> 00:15:20,924
CLI for administrative duties which we'll see in a minute. So first

240
00:15:20,962 --> 00:15:25,004
we have to log in as Bob. So Bob opens his computer and he

241
00:15:25,042 --> 00:15:28,736
opens up his terminal and he's going to log in and then request access

242
00:15:28,918 --> 00:15:32,956
to this Kubernetes cluster. So Tsh login,

243
00:15:33,148 --> 00:15:36,396
we'll put the proxy address, auth is local and the user

244
00:15:36,428 --> 00:15:38,130
is Bob hit return.

245
00:15:39,640 --> 00:15:42,980
Bob will punch in his password and touch his security key

246
00:15:43,050 --> 00:15:48,010
as a second and

247
00:15:48,080 --> 00:15:52,122
you'll see here you're logged into the proxy as these

248
00:15:52,176 --> 00:15:55,706
Bob has these roles, Kubernetes is enabled but he doesn't

249
00:15:55,738 --> 00:15:58,926
have access to any clusters. And you can see

250
00:15:58,948 --> 00:16:02,394
that by doing TSH cubels. What Kubernetes

251
00:16:02,442 --> 00:16:06,558
clusters does Bob have access to? Right now Bob has access to

252
00:16:06,644 --> 00:16:10,786
no users. So what Bob wants to do is to request access,

253
00:16:10,888 --> 00:16:14,946
a just in time access request for this cluster. So in

254
00:16:14,968 --> 00:16:18,078
order for Bob to request access to this role or this

255
00:16:18,104 --> 00:16:22,578
cluster, he just needs to type in TSh request

256
00:16:22,754 --> 00:16:26,086
create and then for the roles flag the role that

257
00:16:26,108 --> 00:16:29,574
he wants to request Kubernetes dev admin in giving

258
00:16:29,612 --> 00:16:33,146
the reason, the reason he gave is fixing a pod error. So this is all

259
00:16:33,168 --> 00:16:36,554
he needs to do to request just in time access to that

260
00:16:36,592 --> 00:16:42,626
role. So he'll hit enter creating

261
00:16:42,658 --> 00:16:46,502
request and the request is created. It's currently

262
00:16:46,556 --> 00:16:50,134
pending and it's waiting for request approval. By default

263
00:16:50,182 --> 00:16:53,994
this command will block until the request is approved. To submit this request without

264
00:16:54,032 --> 00:16:57,530
waiting for approval though, just add the no wait

265
00:16:57,600 --> 00:17:01,674
flag. But what we'll do now is the administrator

266
00:17:01,722 --> 00:17:05,226
can now go to the terminal where teleport's hosted

267
00:17:05,338 --> 00:17:09,702
and can do a let me see which tcuddle we're going to use these tcuddle

268
00:17:09,786 --> 00:17:13,570
ClI now so pseudo and I'm going to do the full path here

269
00:17:13,640 --> 00:17:17,278
user local I'm

270
00:17:17,294 --> 00:17:21,730
going to do the full path here user local been

271
00:17:22,470 --> 00:17:26,530
tcuttle and just do a request ls

272
00:17:26,690 --> 00:17:30,514
to see what requests are in the queue. And there's currently the request that Bob

273
00:17:30,562 --> 00:17:34,954
put in and it's currently pending and

274
00:17:34,992 --> 00:17:38,870
as an administrator you can approve it. And I'm going to make this smaller

275
00:17:38,950 --> 00:17:41,690
so that we can see this get approved.

276
00:17:48,710 --> 00:17:52,978
So what you'll do to approve it is just tcuddle requests

277
00:17:53,074 --> 00:17:56,450
approve and then the id of the request.

278
00:17:56,530 --> 00:18:00,294
So I'm just going to copy this id of the request and paste it

279
00:18:00,332 --> 00:18:03,798
here and hit return to approve

280
00:18:03,814 --> 00:18:08,102
JIT. And over here you'll see approval received, getting updated certificates.

281
00:18:08,246 --> 00:18:12,346
Now you'll see that Bob has a

282
00:18:12,368 --> 00:18:16,330
role of Kubernetes dev admin and it's only good for 51

283
00:18:16,400 --> 00:18:19,806
more minutes. He put the requests in, it was good

284
00:18:19,828 --> 00:18:23,326
for an hour, now it's only good for 51 more minutes. So now he

285
00:18:23,348 --> 00:18:27,822
can do tsh cube ls to

286
00:18:27,876 --> 00:18:31,566
view his available clusters and that cluster should now be available mini Cube

287
00:18:31,598 --> 00:18:35,198
dev and he can do tsh Cube login mini

288
00:18:35,214 --> 00:18:39,006
Cube dev to log into the cluster and run Kubectl

289
00:18:39,038 --> 00:18:42,566
commands. Kubectl get pods all should give us

290
00:18:42,588 --> 00:18:46,646
these pods and after

291
00:18:46,748 --> 00:18:50,530
50 more minutes this elevated request or privileged

292
00:18:50,610 --> 00:18:54,754
access will be gone. The administrator can also deny this request

293
00:18:54,802 --> 00:18:57,802
with a reason. They can put a reason like hey, we're currently in the process

294
00:18:57,856 --> 00:19:01,066
of doing a cluster upgrade deny and Bob will see

295
00:19:01,088 --> 00:19:04,682
where he's denied that access. So that's the first example. The second

296
00:19:04,736 --> 00:19:08,270
example is an automated, more advanced role based access

297
00:19:08,340 --> 00:19:11,818
example with enterprise teleport in Slack.

298
00:19:11,994 --> 00:19:15,450
So this gets much better in the enterprise version of teleport

299
00:19:15,530 --> 00:19:19,274
where this can also be managed in the UI and integrated with Slack.

300
00:19:19,402 --> 00:19:22,574
So in this scenario let's imagine that one of our project managers,

301
00:19:22,622 --> 00:19:25,998
Alice, often needs access to the Kubernetes dev cluster.

302
00:19:26,094 --> 00:19:29,294
So let's log in as Alice. I'm going to go over here Alice

303
00:19:29,342 --> 00:19:32,854
PM project manager. I'm going to put in a password and touch

304
00:19:32,892 --> 00:19:38,054
my security key and

305
00:19:38,092 --> 00:19:42,194
you'll see that Alice has access to like nothing. There's no servers, no applications,

306
00:19:42,242 --> 00:19:45,574
no databases, no Kubernetes clusters. But she

307
00:19:45,612 --> 00:19:49,066
often needs access to this Kubernetes cluster. So instead of having

308
00:19:49,088 --> 00:19:52,730
to use the CLI she can use the UI here so she can go to

309
00:19:52,800 --> 00:19:56,470
access requests. And it's this simple, just click on new request

310
00:19:56,630 --> 00:20:00,814
and she has a role that allows her to requests access to

311
00:20:00,852 --> 00:20:04,714
this Kubernetes dev admin role just like we saw with Bob.

312
00:20:04,842 --> 00:20:07,578
So all she needs to do is click add to request,

313
00:20:07,754 --> 00:20:10,770
proceed to request, and then she can put in a reason,

314
00:20:10,920 --> 00:20:14,578
need to update a pod or something like that.

315
00:20:14,744 --> 00:20:18,402
And when she submits the requests, instead of someone having

316
00:20:18,456 --> 00:20:21,762
to check the review requests here, which is also available

317
00:20:21,816 --> 00:20:25,186
in the UI, we're going to get an automated message on Slack.

318
00:20:25,298 --> 00:20:29,314
So your team is using Slack. There's a group of administrators

319
00:20:29,362 --> 00:20:32,946
or whoever that can approve these requests that's going to see that come

320
00:20:32,988 --> 00:20:36,506
through in slack just like this. So she's going to

321
00:20:36,528 --> 00:20:39,786
submit the request and here

322
00:20:39,808 --> 00:20:42,540
in slack we're going to see something pop up.

323
00:20:43,470 --> 00:20:46,790
You have a new request, here's the iD, here's the cluster.

324
00:20:46,870 --> 00:20:50,954
The user is Alice PM. The role she's requesting is this Kubernetes

325
00:20:51,002 --> 00:20:54,746
Dev admin role. And the reason is that she needs to update a pod.

326
00:20:54,858 --> 00:20:58,354
Now me as an administrator, all I need to do is click on this

327
00:20:58,392 --> 00:21:01,826
link and I see

328
00:21:01,848 --> 00:21:04,450
the review here and I can say yeah, that's fine,

329
00:21:04,520 --> 00:21:08,226
approved, have at it and

330
00:21:08,328 --> 00:21:11,798
submit review. And I've approved the

331
00:21:11,804 --> 00:21:16,194
request. You'll see that updated. Also here in Slack status

332
00:21:16,242 --> 00:21:20,214
is now approved and Alice falls. She has to do

333
00:21:20,252 --> 00:21:24,086
now is go back to listings, check her review requests.

334
00:21:24,118 --> 00:21:27,382
And now that it's approved she can just click assume roles.

335
00:21:27,526 --> 00:21:30,902
To assume the role, that privileged role.

336
00:21:30,966 --> 00:21:34,694
So click assumed roles and you'll see here kubernetes

337
00:21:34,742 --> 00:21:38,206
dev admin role assumed and expires in 56 minutes.

338
00:21:38,388 --> 00:21:42,366
So this just in time. Access is much better in

339
00:21:42,388 --> 00:21:45,754
the enterprise version of teleport. It's still available in open source,

340
00:21:45,802 --> 00:21:49,134
it's fully functional, but we get to use

341
00:21:49,172 --> 00:21:52,686
the UI for these and the integration with Slack.

342
00:21:52,798 --> 00:21:56,162
And again this role runs out in 56 minutes. It's just

343
00:21:56,216 --> 00:22:00,798
in time. Now the third and final scenario here is an example of resource

344
00:22:00,894 --> 00:22:04,806
based access. So in the first two examples that was role based.

345
00:22:04,908 --> 00:22:09,206
So you request access to a role and you get whatever that role allows you.

346
00:22:09,308 --> 00:22:13,394
Well, in these scenario we have resource based access requests.

347
00:22:13,522 --> 00:22:17,402
So let's imagine that we have a contractor that just needs periodic access

348
00:22:17,456 --> 00:22:21,050
to one of our servers. Okay. Just needs periodic access

349
00:22:21,120 --> 00:22:24,186
to one of the servers. So I'm going to log out as Alice. We're done

350
00:22:24,208 --> 00:22:27,518
with her. And let's log in as Tim

351
00:22:27,604 --> 00:22:30,826
contractor. He's a contractor

352
00:22:30,858 --> 00:22:34,510
that just needs access to one of the servers.

353
00:22:40,030 --> 00:22:43,770
So you'll see this contractor signs in. He has access to nothing,

354
00:22:43,920 --> 00:22:47,678
nothing here, but he needs access to one of the servers. Now in this example

355
00:22:47,764 --> 00:22:51,262
we're still requests a role, but the user doesn't need to know anything about

356
00:22:51,316 --> 00:22:54,846
roles or RBAC controls used under the hood. They just see the

357
00:22:54,868 --> 00:22:58,290
resources they're allowed to access. But just to let you know how this works,

358
00:22:58,360 --> 00:23:02,334
if I go to management and users, you'll see that Tim contractor

359
00:23:02,382 --> 00:23:06,360
has a resource requester role. So if we take a look at that,

360
00:23:07,770 --> 00:23:11,602
this role actually allows all of the resources

361
00:23:11,746 --> 00:23:15,078
that an access role can access.

362
00:23:15,244 --> 00:23:19,242
So you're not requests a role, you're requesting access to

363
00:23:19,296 --> 00:23:22,780
resources that a role can access.

364
00:23:23,470 --> 00:23:27,046
So we have a role in here called access and it actually allows

365
00:23:27,078 --> 00:23:30,270
you access to everything. But we'll see in the case of Tim

366
00:23:30,340 --> 00:23:33,646
here, when he goes to access requests, we'll see

367
00:23:33,668 --> 00:23:37,146
that he can access particular resources.

368
00:23:37,258 --> 00:23:40,494
So applications, databases, whatever we

369
00:23:40,532 --> 00:23:44,514
want access to a server. So let's go to servers. There's two that

370
00:23:44,552 --> 00:23:48,002
this access role allows you to access. So Tim

371
00:23:48,056 --> 00:23:51,780
is able to request access to individual resources this way.

372
00:23:53,030 --> 00:23:56,674
So let's say this is the server he needs add to request,

373
00:23:56,802 --> 00:24:00,214
proceed to request, just need

374
00:24:00,252 --> 00:24:03,446
to update the server. And when I

375
00:24:03,468 --> 00:24:07,222
submit this again, it's going to come through Slack and it's going to notify that

376
00:24:07,276 --> 00:24:11,126
team that's allowed to approve it. So submit

377
00:24:11,158 --> 00:24:14,902
request and open slack. And we see we have a new requests.

378
00:24:15,046 --> 00:24:18,246
Here's the iD, the cluster users, Tim contractor.

379
00:24:18,278 --> 00:24:21,434
These role is the access. And the reason is just

380
00:24:21,472 --> 00:24:25,774
need to update the server. So again you click on the link and

381
00:24:25,812 --> 00:24:29,840
me as an approver, I can say sure, let's approve it,

382
00:24:30,290 --> 00:24:32,880
go for it and submit review.

383
00:24:33,490 --> 00:24:37,150
And if we go back to Tim, go back to listings

384
00:24:37,230 --> 00:24:39,490
and Tim can then assume the role.

385
00:24:40,310 --> 00:24:44,286
And for this one he has 12 hours. That one wasn't set. So by default

386
00:24:44,318 --> 00:24:48,006
you get 12 hours and he can then go to his servers. There's his

387
00:24:48,028 --> 00:24:51,334
server and he can log right

388
00:24:51,372 --> 00:24:56,310
into it. And let's run a few commands. Ls PWD

389
00:24:57,290 --> 00:25:00,826
exit and what's neat about teleport, just to add

390
00:25:00,848 --> 00:25:04,838
to this, is that it has a full audit logging capability

391
00:25:04,934 --> 00:25:08,586
here. So you can go to audit log and you can

392
00:25:08,608 --> 00:25:12,974
see who logged in. Tim Contractor has

393
00:25:13,012 --> 00:25:17,054
an issued certificate, started a session, and that

394
00:25:17,172 --> 00:25:20,362
server that we just logged into, you can actually playback

395
00:25:20,426 --> 00:25:24,100
that session. So if I click on this, I can see exactly what Tim did,

396
00:25:27,750 --> 00:25:30,770
which is great for auditing and compliance reasons.

397
00:25:31,430 --> 00:25:35,106
So everything that comes through this proxy is also audited with

398
00:25:35,128 --> 00:25:38,386
all sessions having the ability to be played

399
00:25:38,418 --> 00:25:41,894
back. So for more information about access requests, you'll see

400
00:25:41,932 --> 00:25:44,946
here we have documentation on role requests,

401
00:25:45,058 --> 00:25:49,066
resource requests, and then the open source role requesting that I

402
00:25:49,088 --> 00:25:52,614
did in the first example. There's also more access request

403
00:25:52,662 --> 00:25:55,574
plugins. We have Slack, mattermost teams, Jira,

404
00:25:55,622 --> 00:25:59,302
Pagerduty, email, and Discord. In addition,

405
00:25:59,366 --> 00:26:03,230
the teleport API allows developers to define custom access

406
00:26:03,300 --> 00:26:06,538
workflows using a program language of their choice.

407
00:26:06,714 --> 00:26:10,110
So with just in time access, you can move away from

408
00:26:10,180 --> 00:26:13,758
super privileged accounts. You can see that everyone abides by

409
00:26:13,764 --> 00:26:17,162
the principle of least privilege and can request any privileged

410
00:26:17,226 --> 00:26:20,586
access easily with automation in solutions

411
00:26:20,618 --> 00:26:24,074
like teleport. If you had any questions during this presentation,

412
00:26:24,202 --> 00:26:29,640
feel free to email me your questions at travis rogers@teleport.com

413
00:26:30,090 --> 00:26:33,286
also, check out our community slack. We're very active there. We can

414
00:26:33,308 --> 00:26:36,022
answer your questions@teleport.com.

415
00:26:36,076 --> 00:26:39,286
Slash Slack and slash Labs will take you to

416
00:26:39,308 --> 00:26:43,638
our interactive labs where you can try our product hands on.

417
00:26:43,804 --> 00:26:46,420
Hope you enjoyed the presentation and have a great day.

