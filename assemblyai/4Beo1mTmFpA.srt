1
00:01:54,270 --> 00:01:58,098
Hello everybody. Thank you for attending my talk. My name is Audrey Long

2
00:01:58,264 --> 00:02:01,554
and today we're going to talk about keeping your enemies close and your

3
00:02:01,592 --> 00:02:04,706
secrets closer. So a little

4
00:02:04,728 --> 00:02:07,954
bit about me. I'm senior security software engineer engineer at

5
00:02:07,992 --> 00:02:11,358
Microsoft. I have my master's degree in cybersecurity

6
00:02:11,454 --> 00:02:15,410
from the Johns Hopkins University. I have my bachelor's degree in computer

7
00:02:15,480 --> 00:02:19,094
science from the University of Cincinnati. I'm a diversity

8
00:02:19,142 --> 00:02:22,410
and inclusion ambassador here at my job at Microsoft,

9
00:02:22,830 --> 00:02:27,046
and I like to play pc games. Some fun facts about me I'm

10
00:02:27,078 --> 00:02:30,682
a moderator for korean food forum and I think a hot dog

11
00:02:30,736 --> 00:02:33,390
should absolutely be classified as a sandwich.

12
00:02:33,890 --> 00:02:37,454
So let's get into the crux of this talk. Today we're going to be talking

13
00:02:37,492 --> 00:02:40,766
about security tooling, and this slide demonstrates some of the

14
00:02:40,788 --> 00:02:45,054
repercussions of not practicing good security hygiene. Data breaches,

15
00:02:45,102 --> 00:02:48,530
unfortunately, are not uncommon. There are around 30,000

16
00:02:48,600 --> 00:02:52,066
attacks on websites per day, which a data breach can

17
00:02:52,088 --> 00:02:55,418
have a significant effect on both a company's public image

18
00:02:55,454 --> 00:02:58,834
and their customers welfare. Many of these are easily

19
00:02:58,882 --> 00:03:02,786
preventable by introducing secure code hygiene into pipelines,

20
00:03:02,978 --> 00:03:06,374
and it's a serious issue with a total cost of

21
00:03:06,412 --> 00:03:10,474
$6 trillion worldwide, which was sourced from 2001

22
00:03:10,512 --> 00:03:13,786
study of cybersecurity ventures. However,

23
00:03:13,888 --> 00:03:17,882
credential scanning could be a potential solution that we can easily introduce into

24
00:03:17,936 --> 00:03:21,242
any kind of pipelines environments, both development prod

25
00:03:21,306 --> 00:03:25,230
testing and any kind of pipeline really to

26
00:03:25,300 --> 00:03:29,038
ensure that we have secure code hygiene before

27
00:03:29,124 --> 00:03:30,430
reach of production,

28
00:03:32,950 --> 00:03:36,690
let's talk a little bit about some common security missteps.

29
00:03:37,270 --> 00:03:41,954
Stored test passwords can allow an adversary to glean significant information

30
00:03:42,152 --> 00:03:45,874
on password structure and requirements. Not practicing

31
00:03:45,922 --> 00:03:49,954
secure development can also generate more openings for adversaries,

32
00:03:50,082 --> 00:03:53,990
which could include finding out significant information about your

33
00:03:54,060 --> 00:03:57,830
system and finding those passwords that we accidentally add into

34
00:03:57,900 --> 00:04:01,514
public repositories. Storing sensitive information in open

35
00:04:01,552 --> 00:04:05,574
source repository, though, can lead to insights from malicious

36
00:04:05,622 --> 00:04:08,874
activities because they allow for adversaries to see how the code

37
00:04:08,912 --> 00:04:11,790
base functions and which vulnerabilities can be exploited.

38
00:04:13,010 --> 00:04:16,366
Reuse of passwords is also very common, especially in

39
00:04:16,388 --> 00:04:19,726
IoT devices, so we need to make sure that we scrub any

40
00:04:19,748 --> 00:04:23,422
of those configuration files before we accidentally publish those to

41
00:04:23,476 --> 00:04:27,346
any kind of open source repository. Trying to tack on security

42
00:04:27,448 --> 00:04:30,258
at the end of a project is unfortunately very common.

43
00:04:30,424 --> 00:04:33,826
However, we need to be more vigilant about shifting security to the left during

44
00:04:33,848 --> 00:04:37,426
the requirements phase. If we shift in early enough,

45
00:04:37,528 --> 00:04:41,186
we could hopefully mitigate against a lot of these bad hygiene

46
00:04:41,218 --> 00:04:45,510
practices that we see so much in open source and in projects worldwide.

47
00:04:48,170 --> 00:04:51,786
Let's talk a little bit about resiliency. How do we improve the

48
00:04:51,808 --> 00:04:56,358
security of our applications? By adopting an adversarial mindset.

49
00:04:56,534 --> 00:05:00,426
This can help tease out prime attack vectors and entry points into our applications

50
00:05:00,458 --> 00:05:04,554
and systems, build countermeasures, and develop mitigation strategies

51
00:05:04,602 --> 00:05:08,586
to address and identify risks. We could use threat

52
00:05:08,618 --> 00:05:11,726
modeling exercises as an example to help tease out

53
00:05:11,748 --> 00:05:15,022
these risk factors and develop mitigation strategies.

54
00:05:15,166 --> 00:05:17,886
Sometimes this is left off of the developers table.

55
00:05:17,998 --> 00:05:22,034
Unfortunately, however, I think that we can be more vigilant in including these

56
00:05:22,072 --> 00:05:25,090
practices in any kind of DevOps environment.

57
00:05:25,510 --> 00:05:28,866
We also need to build countermeasures and develop mitigation strategies

58
00:05:28,898 --> 00:05:32,658
to address some of the identified risk from threat modeling activities,

59
00:05:32,834 --> 00:05:36,610
and we could do that also in a Devsecops continuous integration

60
00:05:36,690 --> 00:05:40,506
and implementation strategy. We also need

61
00:05:40,528 --> 00:05:44,230
to implement security tooling available as to remove accessible secrets

62
00:05:44,310 --> 00:05:47,546
and make security easy and accessible. A lot of the

63
00:05:47,568 --> 00:05:51,366
times we see security as very difficult and stringent,

64
00:05:51,478 --> 00:05:55,214
which makes it so developers don't like to introduce some of these hygiene and best

65
00:05:55,252 --> 00:05:58,766
practices into their pipelines or into their development strategies. So we

66
00:05:58,788 --> 00:06:02,782
as security engineers, or just engineers in general, need to make security easy

67
00:06:02,836 --> 00:06:06,802
to use and easy to understand. So it's not just something

68
00:06:06,856 --> 00:06:10,130
that's burdensome for anyone to take on any kind of security tasks.

69
00:06:11,350 --> 00:06:14,766
We also need to integrate security practices at the beginning

70
00:06:14,798 --> 00:06:18,486
of the project lifecycle. In the long run, baking in security is

71
00:06:18,508 --> 00:06:21,926
going to be way more cost effective than tacking it in at

72
00:06:21,948 --> 00:06:25,942
the end. So why is this important to my team? So my

73
00:06:25,996 --> 00:06:29,706
organization close here at Microsoft is comprised of

74
00:06:29,728 --> 00:06:32,726
many software engineers compared to security engineers,

75
00:06:32,838 --> 00:06:36,810
and I know here in the devsecops world that's very common for others

76
00:06:36,880 --> 00:06:40,826
amongst security engineers. Both software and security engineers need

77
00:06:40,848 --> 00:06:44,574
to have some understanding on how some of the industry best

78
00:06:44,612 --> 00:06:48,286
practices are leveraged within each organization so that we can

79
00:06:48,308 --> 00:06:51,406
both be on the same page. There is a need for tooling which should be

80
00:06:51,428 --> 00:06:54,910
easy to understand and easy to use for developers.

81
00:06:55,410 --> 00:06:58,626
The tooling also needs to be modular so they can be swapped in as they

82
00:06:58,648 --> 00:07:02,386
are created and updated. And modularity is also very important

83
00:07:02,488 --> 00:07:06,414
not only for security, but for devsecops and for software

84
00:07:06,462 --> 00:07:10,166
engineering best practices as well. Lots of the times we see libraries and

85
00:07:10,188 --> 00:07:13,366
modules go out of date, we need to make sure that we're using the

86
00:07:13,388 --> 00:07:16,678
highest and the most stringent modules that we

87
00:07:16,684 --> 00:07:20,266
can find. Security is also dynamic, so we

88
00:07:20,288 --> 00:07:23,914
need to have scalable and dynamic solutions as well.

89
00:07:24,032 --> 00:07:27,786
But sometimes solutions are hard to research, hard to create, and definitely hard

90
00:07:27,808 --> 00:07:31,878
to maintain. There's two areas of software insecurity, and they

91
00:07:31,904 --> 00:07:35,520
tend to be very siloed without much explicit understanding between the two.

92
00:07:36,370 --> 00:07:39,566
To remedy this, we as a security field need to

93
00:07:39,588 --> 00:07:43,674
shift left both in the requirements phase as security engineers

94
00:07:43,802 --> 00:07:47,666
to inhabit the software engineering space to better understand and

95
00:07:47,688 --> 00:07:51,010
work directly with software engineers and the projects that they work on.

96
00:07:51,160 --> 00:07:54,986
These learnings could tend to lead to discovery and prevention of attack vectors

97
00:07:55,038 --> 00:07:58,566
within software projects. Now let's talk

98
00:07:58,588 --> 00:08:01,910
a bit about developers. So what exactly is

99
00:08:01,980 --> 00:08:05,590
developers? Essentially, it's the addition of security

100
00:08:05,660 --> 00:08:09,226
layer over the normal DevOps pipelines, so tools that

101
00:08:09,248 --> 00:08:12,902
take the place of the SEC portion of developers

102
00:08:13,046 --> 00:08:16,954
can be created to address many security concerns. With the development process,

103
00:08:17,152 --> 00:08:20,298
we can ensure that developers don't allow secrets gaps in

104
00:08:20,304 --> 00:08:24,270
their pipelines by implementing such tools early on in their development phases.

105
00:08:24,610 --> 00:08:28,874
We also can allow for the ability for continuous monitoring and fixing those pipelines

106
00:08:28,922 --> 00:08:32,818
whenever we find any kind of mitigations against

107
00:08:32,904 --> 00:08:37,650
any type of alerting that happens throughout these observability features.

108
00:08:38,470 --> 00:08:42,546
Due to its automated nature, it can help address

109
00:08:42,648 --> 00:08:45,650
risks without significantly impeding development.

110
00:08:46,090 --> 00:08:49,830
And that's the beauty of Devsecops. We are continuously improving and

111
00:08:49,900 --> 00:08:53,574
continuously developing new practices. This allows for

112
00:08:53,612 --> 00:08:57,090
continuous enforcement of good security practices throughout development.

113
00:08:57,250 --> 00:09:00,890
Devsecops is a step in the right direction to bridge the gap between security

114
00:09:00,960 --> 00:09:04,474
and software. However, more needs to happen. Is there

115
00:09:04,512 --> 00:09:09,050
a single tool that can handle all security scenarios in any kind of DevOps pipelines?

116
00:09:10,110 --> 00:09:13,790
No, there isn't. There is no single tool

117
00:09:13,860 --> 00:09:17,214
to cover all the bases. Many tools are needed to

118
00:09:17,252 --> 00:09:20,574
cover all the scenarios. Static code analysis dynamic code

119
00:09:20,612 --> 00:09:24,286
analysis infrastructure as code credential scanning container

120
00:09:24,318 --> 00:09:28,418
scanning, open source scanning. The list just keeps going on and on and on,

121
00:09:28,504 --> 00:09:32,626
especially when we keep continuously maturing in the

122
00:09:32,648 --> 00:09:35,380
way of development and of security.

123
00:09:35,910 --> 00:09:39,414
However, my team and I have created and we'll go more into

124
00:09:39,452 --> 00:09:42,790
this and a demo later on into this. Talk about a tool,

125
00:09:42,860 --> 00:09:46,550
the detect secrets tool. Now, first and foremost, I don't want to

126
00:09:46,620 --> 00:09:50,498
sell a tool. That's not what the point of this conversation is

127
00:09:50,524 --> 00:09:54,106
about. The point of this conversation is to showcase that we need

128
00:09:54,128 --> 00:09:57,946
to scale and make dynamic tools depending on our scenarios and with our

129
00:09:57,968 --> 00:10:02,330
customers, what they need. And making easy harnesses

130
00:10:03,150 --> 00:10:06,814
to better adapt and grow tool sets throughout when we need them

131
00:10:06,852 --> 00:10:10,400
and plug and play them when we need them as well, is really important.

132
00:10:10,930 --> 00:10:14,246
So what my team and I did is we wrapped Yelp detect

133
00:10:14,298 --> 00:10:18,020
secrets. So Yelp was an open source tool

134
00:10:18,470 --> 00:10:21,714
which could find any kind of secrets within the code

135
00:10:21,752 --> 00:10:25,810
base, and we took that tool and wrapped it with an Azure DevOps

136
00:10:25,890 --> 00:10:29,106
open source visual studio marketplace extension.

137
00:10:29,298 --> 00:10:31,830
And we did those for a few reasons.

138
00:10:32,570 --> 00:10:36,754
First and foremost, we did it to make it easier to integrate

139
00:10:36,882 --> 00:10:40,294
a credential scanner into a Azure DevOps pipelines.

140
00:10:40,422 --> 00:10:44,234
And we did it to ensure that the

141
00:10:44,272 --> 00:10:47,802
coding and integrity within our development crew was always

142
00:10:47,856 --> 00:10:51,366
going to have credential scanning to snuff out any accidental

143
00:10:51,398 --> 00:10:55,882
secrets that were going to be included into the code base. Open source reliability,

144
00:10:55,946 --> 00:10:59,054
which allows quicker detection of shortcomings in the code

145
00:10:59,092 --> 00:11:02,766
base as well. So not only do we need to

146
00:11:02,788 --> 00:11:06,894
find proper tools for the job, but we need to understand the tooling vulnerabilities

147
00:11:06,942 --> 00:11:10,926
to configure them properly into the code base. Too many times a security engineer

148
00:11:10,958 --> 00:11:14,642
will unbox a tool and just let the default configuration do the job.

149
00:11:14,776 --> 00:11:17,758
Is this good enough for security and for our developers?

150
00:11:17,854 --> 00:11:21,606
I don't think so. Before we get into

151
00:11:21,628 --> 00:11:25,206
the demo, let's talk a little bit about the reusable architecture of the

152
00:11:25,228 --> 00:11:29,154
code that was created. So my team and I have created a reusable foundation

153
00:11:29,202 --> 00:11:32,806
to plug and play command line scanning tools that are needed throughout many projects

154
00:11:32,838 --> 00:11:36,106
that we work on. So the need to

155
00:11:36,128 --> 00:11:39,914
be scalable and dynamic is crucial for success. So we

156
00:11:39,952 --> 00:11:44,194
work with many different customers throughout many different engagements

157
00:11:44,262 --> 00:11:47,662
or projects throughout the year. So we always need to

158
00:11:47,716 --> 00:11:50,830
be vigilant about what tools are out there and what we can create

159
00:11:50,900 --> 00:11:54,786
quickly and easily for our customers and developers to use. The need to

160
00:11:54,808 --> 00:11:58,558
be scalable is very important, especially dynamic.

161
00:11:58,734 --> 00:12:02,526
The overall tooling architecture here reads as follows.

162
00:12:02,638 --> 00:12:05,394
The first and foremost thing we need to do is we need to do some

163
00:12:05,432 --> 00:12:08,834
research over some tooling, figure out which is the right

164
00:12:08,872 --> 00:12:12,326
tool for the job. A lot of the times there's lots of tools out there.

165
00:12:12,348 --> 00:12:15,958
There's new tools that get released like every week it feels like.

166
00:12:16,044 --> 00:12:18,566
So we need to figure out which tool is going to be best for us

167
00:12:18,588 --> 00:12:22,022
and our customer, then we need to grab the inputs from the configuration

168
00:12:22,086 --> 00:12:25,862
file. Having a good understanding on the optimal configuration

169
00:12:25,926 --> 00:12:29,498
to run a tool is really important. I don't want to

170
00:12:29,504 --> 00:12:32,618
preach to the choir, but there are a million and one ways to run a

171
00:12:32,624 --> 00:12:36,142
tool, especially if there's so many different command line arguments that you can give it.

172
00:12:36,196 --> 00:12:39,290
So understanding which one's the optimal one for you and your crew

173
00:12:39,370 --> 00:12:42,978
would be really important to figure out. And then we need

174
00:12:42,984 --> 00:12:46,690
to execute the desired scanning Cli so that we

175
00:12:46,760 --> 00:12:50,946
do get that optimal solution. After that,

176
00:12:51,048 --> 00:12:54,654
what our tooling and foundation does is ingests

177
00:12:54,702 --> 00:12:58,194
the scanning report and it converts it so that it's easily ingestible

178
00:12:58,242 --> 00:13:01,590
by the Azure DevOps pipelines dashboard.

179
00:13:02,090 --> 00:13:05,766
And then we generate a report based on those results so

180
00:13:05,788 --> 00:13:09,346
that we could also look through it easier instead of seeing it spit

181
00:13:09,378 --> 00:13:12,826
out on the command line, for example. And then another thing that we

182
00:13:12,848 --> 00:13:16,486
did that's really novel and interesting in this talk is craft the pipelines

183
00:13:16,518 --> 00:13:20,678
code to easily introduce those findings into the Azure DevOps backlog.

184
00:13:20,774 --> 00:13:23,966
So this one's really important because a lot of the times you

185
00:13:23,988 --> 00:13:27,246
will see pipelines perhaps break or

186
00:13:27,348 --> 00:13:30,622
fail, and we sometimes don't get around

187
00:13:30,676 --> 00:13:34,402
to fixing it. Well, we kind of gave you an option here to

188
00:13:34,536 --> 00:13:37,982
include it into a backlog so you could see what jobs

189
00:13:38,046 --> 00:13:41,220
also failed, why it failed, and always have a record

190
00:13:41,910 --> 00:13:45,298
for you and yourself to review later on.

191
00:13:45,464 --> 00:13:48,934
All right, let's go a little bit into the demo now. All right,

192
00:13:48,972 --> 00:13:52,806
so here is the detect secrets credential scanner that

193
00:13:52,828 --> 00:13:56,258
my team and I made. It's a visual studio marketplace extension

194
00:13:56,354 --> 00:13:59,842
so that we could easily ingest it into Azure developers pipelines.

195
00:13:59,986 --> 00:14:03,850
And that was kind of the, a lot of the customers that we work with

196
00:14:03,920 --> 00:14:07,814
like to use Azure developers pipelines. We also work with GitHub

197
00:14:07,942 --> 00:14:11,562
a lot, but in this scenario, we couldn't find a really good free,

198
00:14:11,696 --> 00:14:15,566
in this case credential scanner to be used for a customer

199
00:14:15,668 --> 00:14:19,422
that really needed it in a jiffy. So that's kind of the use

200
00:14:19,476 --> 00:14:23,230
case and the purpose of this project. And like I said

201
00:14:23,300 --> 00:14:26,754
before, I'm not trying to sell you a tool here. Instead I'm trying to sell

202
00:14:26,792 --> 00:14:30,030
you an idea, which is we need to make scalable tools

203
00:14:30,110 --> 00:14:33,330
that can be easily ingested into pipelines so that we

204
00:14:33,400 --> 00:14:37,062
can progress and move development crews further along instead

205
00:14:37,116 --> 00:14:41,650
of pushing them back. So for this credential scanner,

206
00:14:41,810 --> 00:14:44,434
as I said, we wrapped Yelp detect secrets.

207
00:14:44,562 --> 00:14:47,766
And the overview isn't really much to

208
00:14:47,788 --> 00:14:50,966
see here, other than the fact that this is just like a nice little landing

209
00:14:50,998 --> 00:14:54,474
page for anyone to come and actually download this tool. Right now.

210
00:14:54,512 --> 00:14:58,086
It's actually not available for anyone to download publicly.

211
00:14:58,198 --> 00:15:00,300
However, that will be changing here soon.

212
00:15:02,210 --> 00:15:05,870
Now, before I get into the tool, I really wanted to showcase to you

213
00:15:05,940 --> 00:15:09,690
what I'm going to be scanning for this tool demonstration.

214
00:15:09,850 --> 00:15:13,746
So it's called OASP webgoat. And I would highly recommend

215
00:15:13,848 --> 00:15:17,746
this website or this application for really anyone who wants to do

216
00:15:17,768 --> 00:15:21,374
some kind of tool discovery. So what this is is Oauth

217
00:15:21,422 --> 00:15:24,766
foundation. They have created this bad,

218
00:15:24,888 --> 00:15:30,258
vulnerable application, and it's

219
00:15:30,274 --> 00:15:34,182
a really great playground for us as security engineers also to

220
00:15:34,236 --> 00:15:38,146
kind of do some tooling testing to see what kind of vulnerabilities do

221
00:15:38,188 --> 00:15:40,842
some of these tools actually pick up.

222
00:15:40,976 --> 00:15:44,186
And owasp Webgoat is definitely one that I'd like

223
00:15:44,208 --> 00:15:47,706
to use as a nice little playground to

224
00:15:47,728 --> 00:15:50,970
test tools. And if anyone is looking for

225
00:15:51,120 --> 00:15:54,398
something else, I would definitely recommend using this to do

226
00:15:54,404 --> 00:15:56,430
any kind of security tooling testing.

227
00:15:58,690 --> 00:16:02,126
All right, now, before we get into it, I just wanted to showcase to you

228
00:16:02,308 --> 00:16:05,358
what the user inputs actually look like for this tool.

229
00:16:05,524 --> 00:16:08,946
So my team and I did a lot of research in all

230
00:16:08,968 --> 00:16:12,674
of the inputs for the tool, and from those

231
00:16:12,712 --> 00:16:16,226
research and that inputs we can determine what we actually want our users to

232
00:16:16,248 --> 00:16:20,214
be configured with. So that was kind of interesting in this regard

233
00:16:20,412 --> 00:16:23,654
to figure out what would be something that's really simple, a really

234
00:16:23,692 --> 00:16:27,602
simple UI, just for our users to really have a good understanding on

235
00:16:27,676 --> 00:16:31,558
how to use this tool without getting completely buried

236
00:16:31,654 --> 00:16:35,020
with a bunch of perhaps cumbersome information.

237
00:16:36,190 --> 00:16:39,546
So I'm not going to really go that deep into any of

238
00:16:39,568 --> 00:16:43,226
these configuration details other than the fact that we try

239
00:16:43,248 --> 00:16:46,526
to make it simple where I say, hey, where would you like the code to

240
00:16:46,548 --> 00:16:49,978
be scanned? Otherwise it'll default to scanning the whole repository,

241
00:16:50,074 --> 00:16:53,410
unless you wanted to just scan a certain section of the repository.

242
00:16:53,830 --> 00:16:58,146
We allowed a word list, which in this case is

243
00:16:58,248 --> 00:17:01,506
called, in older terms we

244
00:17:01,528 --> 00:17:05,234
called them blacklists and whitelists. However, we'd like to

245
00:17:05,272 --> 00:17:08,802
step away from that language and like to use more inclusive language

246
00:17:08,866 --> 00:17:12,694
such as allow list, disallow list, or in Yelp's case they like to use

247
00:17:12,732 --> 00:17:16,246
the word list to use as one of

248
00:17:16,268 --> 00:17:19,718
those allow lists. So we can skip over

249
00:17:19,804 --> 00:17:23,226
some of those false positives that any kind of tool will find.

250
00:17:23,328 --> 00:17:26,694
And that's really important to also include in any of your tooling

251
00:17:26,742 --> 00:17:31,110
if you decide to make them in the pipeline, because there will be false positives.

252
00:17:31,270 --> 00:17:34,350
Unfortunately, I've not been personally a tool

253
00:17:34,420 --> 00:17:37,854
which hasn't picked up on a false positive. If you definitely have

254
00:17:37,892 --> 00:17:42,270
found one, let me know. I'm really interested to hear what you guys have recommended,

255
00:17:42,690 --> 00:17:46,046
but if anything, also calling it

256
00:17:46,068 --> 00:17:49,954
a word list, allow list, disallow list. If there's anything from this talk

257
00:17:49,992 --> 00:17:53,166
you take, I hope it would be to help change that language because it starts

258
00:17:53,198 --> 00:17:56,886
with you. And we also gave an

259
00:17:56,908 --> 00:18:00,662
option to treat warnings or treat findings as warnings instead

260
00:18:00,716 --> 00:18:03,720
of failures. I think this is really interesting,

261
00:18:04,330 --> 00:18:07,994
as a security engineer to really allow our users to

262
00:18:08,112 --> 00:18:11,834
kind of skip over this. However, I think it's really important that

263
00:18:11,872 --> 00:18:15,594
we make our tooling available for any kind of person who wants to use

264
00:18:15,632 --> 00:18:21,018
it excuse

265
00:18:21,034 --> 00:18:24,686
me. All right,

266
00:18:24,708 --> 00:18:27,774
now here is what the output will actually look like once you run it into

267
00:18:27,812 --> 00:18:28,830
your pipeline.

268
00:18:31,730 --> 00:18:35,620
So for OWASP, we have about 150

269
00:18:36,550 --> 00:18:40,354
secrets that are contained into this repository, which is another

270
00:18:40,392 --> 00:18:44,420
reason why I really like this repository, because it showcases also

271
00:18:44,950 --> 00:18:48,020
just how good some of these tooling can actually be.

272
00:18:50,070 --> 00:18:53,080
Sorry. Okay,

273
00:18:54,730 --> 00:18:58,870
now another thing about this tool, as you can see, is we ingested the reporting

274
00:19:00,010 --> 00:19:03,638
from the command line into this Azure DevOps dashboard. So we

275
00:19:03,644 --> 00:19:06,970
can see line by line, what actually was

276
00:19:07,040 --> 00:19:10,810
picked up from the scanner. And this is really interesting

277
00:19:10,880 --> 00:19:13,454
and cool to kind of see it like this, because we could go ahead and

278
00:19:13,492 --> 00:19:16,702
make bugs as well. So if you go up here, you could create

279
00:19:16,756 --> 00:19:20,238
any kind of a bug. So we could say this was

280
00:19:20,324 --> 00:19:22,160
for the demo,

281
00:19:24,050 --> 00:19:27,554
save and close it, and then it's going to just show up right in your

282
00:19:27,592 --> 00:19:28,530
backlog.

283
00:19:31,350 --> 00:19:32,980
Excuse me, so sorry.

284
00:19:34,790 --> 00:19:38,022
This is for the demo. Oops, I clicked on the wrong one. But whatever,

285
00:19:38,156 --> 00:19:40,840
here you go. And then it'll actually showcase you that.

286
00:19:41,610 --> 00:19:45,046
It'll link out to that

287
00:19:45,068 --> 00:19:49,026
issue that we found, too. So making

288
00:19:49,068 --> 00:19:53,338
sure that making a tool to give you that backlog report

289
00:19:53,424 --> 00:19:57,830
is really interesting and something that we found in our organization

290
00:19:57,910 --> 00:20:01,162
to be the most beneficial in regards to actually solving anything.

291
00:20:01,296 --> 00:20:05,626
Now, let's talk a little bit about some forward thinking. So smarter secrets

292
00:20:05,658 --> 00:20:09,710
detection through the use of more advanced scanning methods and algorithms,

293
00:20:10,450 --> 00:20:14,180
as well as security research, will advance and progress throughout the years.

294
00:20:14,550 --> 00:20:17,842
Advanced entropy engines to better generate streams which

295
00:20:17,896 --> 00:20:21,426
closely resemble secrets and more integrated security tooling are needed to

296
00:20:21,448 --> 00:20:24,994
make security easier. Machine learning models are also

297
00:20:25,032 --> 00:20:28,610
very significant to reduce the number of false positives detected.

298
00:20:28,770 --> 00:20:32,834
Simple models do exist currently. However, more robust models

299
00:20:32,882 --> 00:20:36,246
in the future will need to be made with more advanced learning so that

300
00:20:36,268 --> 00:20:40,022
we can bypass more of those false positives. Also, secure code

301
00:20:40,076 --> 00:20:42,970
pipelines would be integrated by default.

302
00:20:43,310 --> 00:20:47,018
Adding more tools to our security toolbox is also going to be very

303
00:20:47,104 --> 00:20:50,538
forward looking, and a lot of the times I do get on some of these

304
00:20:50,624 --> 00:20:54,638
engagements with really smart engineers, and I still don't see security

305
00:20:54,724 --> 00:20:58,698
being integrated into all the pipelines, which is bothersome.

306
00:20:58,874 --> 00:21:01,774
All right, let's talk a little bit about evolution. So,

307
00:21:01,812 --> 00:21:05,246
software and security need to continue to become a union, both on the development

308
00:21:05,278 --> 00:21:09,182
side of the house and the security side. There needs to be better integration

309
00:21:09,246 --> 00:21:11,970
between security and software at all levels of development.

310
00:21:13,510 --> 00:21:17,158
Security landscape is always changing, and as such, we need to be dynamic in our

311
00:21:17,164 --> 00:21:20,562
security practices. We need to develop and scale

312
00:21:20,626 --> 00:21:23,974
security practices, solutions and tooling to generate more

313
00:21:24,012 --> 00:21:28,134
secure standards across every single industry. Security research and

314
00:21:28,172 --> 00:21:32,006
findings are also very siloed from each other. We as a community need to do

315
00:21:32,028 --> 00:21:35,698
a better job at letting others know about some of the tooling practices

316
00:21:35,794 --> 00:21:38,870
and vulnerabilities that we've been finding within our projects.

317
00:21:39,450 --> 00:21:42,526
And that's it. Thank you guys so much for listening to my talk.

318
00:21:42,628 --> 00:21:46,462
Please connect with me on LinkedIn. You can see use the QR code

319
00:21:46,516 --> 00:21:49,614
or you can go to that URL. But thank you so much

320
00:21:49,652 --> 00:21:51,900
and I appreciate everyone listening. Thank you.

