1
00:00:17,530 --> 00:00:19,850
Welcome to this Javascript session.

2
00:00:20,010 --> 00:00:23,950
Canvas pixel manipulation beauty comes slowly.

3
00:00:24,530 --> 00:00:28,198
This Conf 42 talk is basically

4
00:00:28,284 --> 00:00:32,066
a coding session, which I call pseudo

5
00:00:32,098 --> 00:00:35,720
live coding session because, well, it's pre recorded

6
00:00:36,250 --> 00:00:40,010
and it will deal with the Javascript canvas API

7
00:00:41,390 --> 00:00:44,714
and in the second part with the

8
00:00:44,752 --> 00:00:48,326
usage of web workers to ease user interactions

9
00:00:48,438 --> 00:00:51,694
when there's a lot of computations to

10
00:00:51,732 --> 00:00:55,534
do. So these are learnings I

11
00:00:55,572 --> 00:00:59,546
had on a personal project called Mosaics,

12
00:00:59,738 --> 00:01:03,186
which transforms a

13
00:01:03,208 --> 00:01:06,654
map into a color

14
00:01:06,782 --> 00:01:10,674
map with kind of mosaic delimited by

15
00:01:10,712 --> 00:01:14,930
roads. I'm Victor.

16
00:01:15,370 --> 00:01:20,070
I'm a lead developer at Theodo company

17
00:01:20,140 --> 00:01:23,234
based in Paris. Well, as for the Paris

18
00:01:23,282 --> 00:01:26,930
office. So where exactly in Paris

19
00:01:27,010 --> 00:01:30,726
is Theodo based? So you

20
00:01:30,748 --> 00:01:34,380
can have a look at this beautiful map on maposeic.com.

21
00:01:34,910 --> 00:01:38,394
Maybe you can recognize Paris map if

22
00:01:38,432 --> 00:01:41,662
I zoom a little bit. Well,

23
00:01:41,716 --> 00:01:45,520
Theodo is kind of here,

24
00:01:46,050 --> 00:01:49,790
so it takes a few seconds to compute it.

25
00:01:49,940 --> 00:01:53,374
We'll discuss it later, but after a few seconds

26
00:01:53,422 --> 00:01:55,970
we have a beautiful mosaic.

27
00:01:58,550 --> 00:02:02,478
Towns are beautiful, but such is the countryside,

28
00:02:02,654 --> 00:02:05,330
such as this town in Borgoin.

29
00:02:06,650 --> 00:02:10,230
This is actually the place where I had the id

30
00:02:10,380 --> 00:02:14,626
during the containment to draw automatically

31
00:02:14,738 --> 00:02:18,458
maps delimited by roads. So I

32
00:02:18,464 --> 00:02:23,514
was doing it by hand and that's how I

33
00:02:23,552 --> 00:02:28,922
looked at the canvas. So our

34
00:02:28,976 --> 00:02:32,190
goal today is to build this

35
00:02:32,340 --> 00:02:34,910
mosaic from scratch.

36
00:02:36,610 --> 00:02:40,110
In order to do so, I have a small project

37
00:02:40,180 --> 00:02:44,050
running on localhost, a small react app

38
00:02:44,200 --> 00:02:47,746
that displays a map on the left and on

39
00:02:47,768 --> 00:02:50,894
the right. We are going to progressively

40
00:02:50,942 --> 00:02:53,330
build our mosaic.

41
00:02:54,970 --> 00:02:58,600
So let's have a look at the code. I have a

42
00:02:59,130 --> 00:03:02,390
react app with typescript,

43
00:03:02,730 --> 00:03:07,390
and here is a component called canvas demo that renders

44
00:03:07,570 --> 00:03:11,450
on the left the mapbox container,

45
00:03:12,510 --> 00:03:16,154
and on the right the mosaic container that we're going

46
00:03:16,192 --> 00:03:20,018
to fill. So what exactly is Mapbox?

47
00:03:20,134 --> 00:03:24,062
Mapbox is a great library that

48
00:03:24,116 --> 00:03:28,110
allows you to build a maps. Just calling

49
00:03:28,260 --> 00:03:33,314
Mapbox map a new object that

50
00:03:33,352 --> 00:03:36,494
is initialized with the container.

51
00:03:36,622 --> 00:03:41,154
I pass the reference of the container a

52
00:03:41,192 --> 00:03:44,290
style. So here the style is a satellite maps,

53
00:03:45,130 --> 00:03:48,822
a zoom level between zero and 22,

54
00:03:48,876 --> 00:03:52,642
I think, and a center to initialize

55
00:03:52,706 --> 00:03:56,646
the map with. So here I put

56
00:03:56,748 --> 00:04:00,874
a random longitude latitude so that we are

57
00:04:00,992 --> 00:04:03,580
able to travel a little bit.

58
00:04:04,270 --> 00:04:08,042
And when the map is rendered, I call this

59
00:04:08,096 --> 00:04:11,950
unrender function that console log renders

60
00:04:12,370 --> 00:04:16,446
and stop the loading the

61
00:04:16,468 --> 00:04:18,030
loading indicator.

62
00:04:22,630 --> 00:04:25,570
So if I refresh,

63
00:04:26,070 --> 00:04:29,570
you can see that there are a couple of, couple of renders.

64
00:04:30,310 --> 00:04:34,290
Okay, so our first steps

65
00:04:34,970 --> 00:04:39,190
for pixels manipulation, we are going to first paint a rectangle,

66
00:04:40,250 --> 00:04:44,166
then access the rectangle pixels. We're going

67
00:04:44,188 --> 00:04:48,202
to paint the pixels randomly we're going to

68
00:04:48,256 --> 00:04:52,202
set the size to look like the map box size,

69
00:04:52,336 --> 00:04:56,010
copy its pixels, apply a transformation,

70
00:04:56,350 --> 00:05:00,554
and then we'll apply the area detection

71
00:05:00,602 --> 00:05:04,026
algorithm to paint the mosaics. So let's

72
00:05:04,058 --> 00:05:06,750
first add this rectangle.

73
00:05:11,170 --> 00:05:15,426
So I initialize a constant with

74
00:05:15,448 --> 00:05:19,140
the canvas element that I get by id.

75
00:05:20,870 --> 00:05:23,730
So this is a reference to this id,

76
00:05:23,880 --> 00:05:26,850
a canvas HTML element.

77
00:05:29,690 --> 00:05:32,950
Then I need to access its context. Okay,

78
00:05:33,020 --> 00:05:36,760
so there are a couple of different contexts available

79
00:05:37,390 --> 00:05:40,330
and I'm using the 2d context.

80
00:05:42,030 --> 00:05:45,606
And then the mosaic context is possibly

81
00:05:45,638 --> 00:05:47,610
null. So if it is null,

82
00:05:50,130 --> 00:05:52,640
let's just return. Okay.

83
00:05:53,010 --> 00:05:56,926
Then I say, okay, I want you to fill with the

84
00:05:56,948 --> 00:06:01,230
style color magenta and fill a rectangle

85
00:06:02,470 --> 00:06:05,842
at the initial position. So top

86
00:06:05,896 --> 00:06:10,078
left corner with the canvas

87
00:06:10,254 --> 00:06:14,100
dimensions. So how does it look?

88
00:06:14,630 --> 00:06:18,786
Well, we have a beautiful, very beautiful magenta

89
00:06:18,818 --> 00:06:22,226
rectangle with the canvas

90
00:06:22,258 --> 00:06:26,326
default size actually. So 300

91
00:06:26,428 --> 00:06:29,500
by 150 pixels. Okay,

92
00:06:29,950 --> 00:06:33,194
so that's a good first step. Then we're going

93
00:06:33,232 --> 00:06:36,922
to look at the pixels because

94
00:06:36,976 --> 00:06:40,654
this is an image. So we

95
00:06:40,692 --> 00:06:44,560
should be able to see what this is composed of.

96
00:06:46,690 --> 00:06:50,062
So the mosaidata is actually

97
00:06:50,196 --> 00:06:54,154
the context on the context. I call this method

98
00:06:54,202 --> 00:06:57,714
guest image data with the top left

99
00:06:57,752 --> 00:07:00,740
corner and the size of the data I want.

100
00:07:01,830 --> 00:07:05,038
Okay, so if we

101
00:07:05,064 --> 00:07:06,280
console log it,

102
00:07:08,170 --> 00:07:11,080
what do we get? Okay,

103
00:07:11,850 --> 00:07:15,830
image data. So you see there is three properties

104
00:07:17,770 --> 00:07:20,810
and we're console logging the data directly.

105
00:07:25,040 --> 00:07:28,124
Okay, so we have an array of numbers,

106
00:07:28,322 --> 00:07:32,924
actually eight clamped numbers.

107
00:07:33,042 --> 00:07:37,650
So clamped means that they're between zero and 255.

108
00:07:38,260 --> 00:07:43,520
And actually each pixel

109
00:07:43,880 --> 00:07:48,336
is composed of four numbers, the RGB

110
00:07:48,528 --> 00:07:52,630
and a values. So that's what I put here.

111
00:07:54,360 --> 00:07:57,956
So our pixels are indexed

112
00:07:57,988 --> 00:08:01,784
from top left to bottom right. The first

113
00:08:01,822 --> 00:08:05,096
pixel is this one. And each pixel is

114
00:08:05,118 --> 00:08:08,960
composed of four numbers. Okay, so magenta

115
00:08:09,060 --> 00:08:12,190
is a mix between blue and red.

116
00:08:14,720 --> 00:08:18,632
Okay, so having that, let's paint

117
00:08:18,696 --> 00:08:22,290
the pixels. So we're going to paint them

118
00:08:24,340 --> 00:08:25,440
randomly.

119
00:08:29,860 --> 00:08:44,320
So this size is not defined canvas

120
00:08:44,980 --> 00:08:49,080
width and height canvas.

121
00:08:53,980 --> 00:09:00,984
And let's iterate over the data of

122
00:09:01,022 --> 00:09:05,992
the data. And at

123
00:09:06,046 --> 00:09:08,330
each pixel index I,

124
00:09:09,580 --> 00:09:12,924
we assign random pixel

125
00:09:12,972 --> 00:09:16,320
value, a random number

126
00:09:16,390 --> 00:09:19,664
between zero and 255. And then

127
00:09:19,702 --> 00:09:24,676
once we have this, we need to apply to

128
00:09:24,698 --> 00:09:28,756
the context, the new image data with

129
00:09:28,778 --> 00:09:30,900
the put image data method.

130
00:09:35,240 --> 00:09:38,456
Okay, so now you can see that

131
00:09:38,478 --> 00:09:42,484
we have kind of mosaic,

132
00:09:42,532 --> 00:09:46,772
actually a lot of pixels with random columns.

133
00:09:46,836 --> 00:09:50,440
And each time the map box renders,

134
00:09:50,600 --> 00:09:54,860
map renders, we have a new computation.

135
00:09:55,440 --> 00:09:58,588
So maybe I could just display the console here.

136
00:09:58,754 --> 00:09:59,470
Okay,

137
00:10:02,740 --> 00:10:07,152
now we want to set the same size as

138
00:10:07,206 --> 00:10:11,340
for the mapbox shape.

139
00:10:11,500 --> 00:10:15,316
So we need here to access

140
00:10:15,418 --> 00:10:18,710
the mapbox canvas. Okay,

141
00:10:19,160 --> 00:10:22,548
so the same way we're going to use

142
00:10:22,634 --> 00:10:26,716
a mapbox context, which this time will not be the 2d context,

143
00:10:26,768 --> 00:10:30,436
but instead the Webgl context because mapbox

144
00:10:30,468 --> 00:10:33,956
uses webgl API and we'll

145
00:10:33,988 --> 00:10:38,312
set our mosaics canvas width and height with the

146
00:10:38,446 --> 00:10:42,380
drawing buffer width and height of the mapbox context.

147
00:10:45,280 --> 00:10:48,536
Okay, so we'll

148
00:10:48,568 --> 00:10:50,110
need to do this before.

149
00:10:52,420 --> 00:10:56,610
And the map is actually the object we just

150
00:10:57,380 --> 00:10:58,850
constructed here.

151
00:11:01,620 --> 00:11:07,836
So we need to pass a maps to our function map

152
00:11:07,948 --> 00:11:10,450
gl dot map object.

153
00:11:11,220 --> 00:11:14,688
Okay, so the same way this context may

154
00:11:14,774 --> 00:11:18,680
not be it presence.

155
00:11:23,500 --> 00:11:24,250
Okay,

156
00:11:27,820 --> 00:11:31,550
so what do we got here? We got actually a huge

157
00:11:33,600 --> 00:11:36,732
canvas that is twice the desired size.

158
00:11:36,866 --> 00:11:40,252
This is because on

159
00:11:40,306 --> 00:11:43,724
retina screens mapbox renders twice

160
00:11:43,772 --> 00:11:46,640
as much as pixels per directions.

161
00:11:47,140 --> 00:11:51,410
So actually I need to fix the CSS size

162
00:11:53,960 --> 00:11:58,070
to access the CSS size here.

163
00:12:01,720 --> 00:12:06,870
So if I put a width of let's say 644,

164
00:12:09,340 --> 00:12:11,450
it's not going to make it.

165
00:12:15,020 --> 00:12:19,516
Okay, now we're good. So we need to do it in

166
00:12:19,538 --> 00:12:28,376
the code. So that's

167
00:12:28,408 --> 00:12:30,110
why I use this.

168
00:12:33,700 --> 00:12:37,500
So I use the style property of our HTML

169
00:12:37,660 --> 00:12:41,276
elements and I set it to a string

170
00:12:41,468 --> 00:12:45,670
necessarily with the size divided by two.

171
00:12:49,480 --> 00:12:52,836
So you see that the width of the canvas must not

172
00:12:52,858 --> 00:12:57,524
be confended with

173
00:12:57,562 --> 00:12:59,770
the style width property.

174
00:13:00,860 --> 00:13:04,250
Okay, so it started looking nice.

175
00:13:05,580 --> 00:13:09,328
What do we have to do now? So we are going to copy mapbox

176
00:13:09,364 --> 00:13:13,144
pixels. So in order to copy mapbox pixels

177
00:13:13,272 --> 00:13:17,390
we need to get Mapbox pixels. So actually

178
00:13:18,400 --> 00:13:21,700
we're going to use the Webgl

179
00:13:21,800 --> 00:13:27,650
API before

180
00:13:28,900 --> 00:13:32,892
or after this? Yeah, actually I don't

181
00:13:32,956 --> 00:13:34,630
need to console like this.

182
00:13:35,640 --> 00:13:38,950
Okay, so I construct a new

183
00:13:40,200 --> 00:13:43,540
int number array of the correct

184
00:13:43,610 --> 00:13:47,288
size. So width times height times four

185
00:13:47,454 --> 00:13:50,840
because each pixel has four coordinates.

186
00:13:51,660 --> 00:13:55,428
And to write the pixels in this array

187
00:13:55,524 --> 00:13:59,464
I need to call the read pixels method on the mapbox

188
00:13:59,512 --> 00:14:03,900
context with initial positions,

189
00:14:04,720 --> 00:14:08,524
the size and some other constants and also

190
00:14:08,562 --> 00:14:12,288
the reference to my constant. Okay, so now

191
00:14:12,374 --> 00:14:16,864
I have the mapbox pixels so I'm able to

192
00:14:16,902 --> 00:14:17,810
copy them.

193
00:14:32,440 --> 00:14:36,176
Okay, nice. So it's

194
00:14:36,208 --> 00:14:40,128
not actually done yet in Shemando

195
00:14:40,144 --> 00:14:43,648
Taranel because you see Shemanda Taranell

196
00:14:43,664 --> 00:14:47,784
here is written on the opposite side.

197
00:14:47,902 --> 00:14:51,960
This is because the mapbox, the Webgl convention

198
00:14:52,040 --> 00:14:55,550
started in the bottom left.

199
00:14:55,920 --> 00:14:59,500
So we need to apply some transformation

200
00:14:59,840 --> 00:15:03,728
to our pixels. So here I wrote some

201
00:15:03,814 --> 00:15:06,736
utils to be able to do that.

202
00:15:06,838 --> 00:15:11,360
So it considers that we have an x and y axis

203
00:15:11,700 --> 00:15:15,652
and each index position can allow

204
00:15:15,706 --> 00:15:20,532
us to find the x and y point

205
00:15:20,666 --> 00:15:24,150
position. So basically

206
00:15:24,600 --> 00:15:27,816
when we start to find a

207
00:15:27,838 --> 00:15:31,208
transformation from one canvas to the other,

208
00:15:31,374 --> 00:15:35,204
I have the I position in the index

209
00:15:35,252 --> 00:15:39,088
position in the mosaic reference,

210
00:15:39,204 --> 00:15:42,350
I convert it into an x and y point.

211
00:15:43,280 --> 00:15:47,368
Then this point in the mapbox canvas

212
00:15:47,544 --> 00:15:50,712
is just the same, but with a transformation

213
00:15:50,776 --> 00:15:54,610
on the y axis. And then with this

214
00:15:55,540 --> 00:16:00,624
calculus I get the

215
00:16:00,662 --> 00:16:04,720
map box index, pixel index.

216
00:16:05,300 --> 00:16:08,610
So I just need to call this

217
00:16:09,540 --> 00:16:16,480
little functional

218
00:16:16,860 --> 00:16:17,610
it.

219
00:16:21,500 --> 00:16:25,160
Okay, then I get the mapbox pixel index.

220
00:16:38,620 --> 00:16:42,700
So now we recreate,

221
00:16:42,860 --> 00:16:46,640
so that we could completely paint

222
00:16:47,060 --> 00:16:50,944
access the pixels of a

223
00:16:50,982 --> 00:16:54,630
map. So we are going to apply our

224
00:16:55,080 --> 00:16:57,220
detection algorithm.

225
00:16:58,280 --> 00:17:02,340
So let's describe a bit this detection algorithm.

226
00:17:02,760 --> 00:17:08,040
So the source is basically binary color image

227
00:17:08,380 --> 00:17:12,216
and the target is going to be a

228
00:17:12,238 --> 00:17:15,540
colorful image.

229
00:17:15,620 --> 00:17:19,212
So I have to detect three areas here in this

230
00:17:19,266 --> 00:17:22,940
image. So how do we do? We iterate over

231
00:17:23,010 --> 00:17:26,716
all pixels of the image and we make

232
00:17:26,738 --> 00:17:29,916
sure we delimit the contour of

233
00:17:29,938 --> 00:17:33,920
the image. So this is a zoom.

234
00:17:34,340 --> 00:17:39,120
Well, not actually a zoom, but yeah, with very big pixels

235
00:17:40,420 --> 00:17:44,224
our source. And we'll iterate from

236
00:17:44,262 --> 00:17:48,168
top left to bottom right with this eye

237
00:17:48,204 --> 00:17:51,396
index. And we are going

238
00:17:51,418 --> 00:17:54,390
to detect first this black area.

239
00:17:54,760 --> 00:17:58,112
So the source color is black and we want a target

240
00:17:58,176 --> 00:18:00,840
color of Xiong.

241
00:18:02,220 --> 00:18:06,580
And we call this routine paint area which push

242
00:18:06,740 --> 00:18:10,380
the index in a stack, in a two visit stack.

243
00:18:11,120 --> 00:18:14,152
And while this stack is not empty,

244
00:18:14,296 --> 00:18:17,692
it pops an element and

245
00:18:17,746 --> 00:18:19,580
paints this element.

246
00:18:22,980 --> 00:18:26,816
Then it

247
00:18:26,838 --> 00:18:29,760
looks at the neighbors of this element.

248
00:18:30,100 --> 00:18:32,812
So there is one at east, south,

249
00:18:32,956 --> 00:18:36,496
southwest and north, and the west

250
00:18:36,528 --> 00:18:39,190
and north pixel are not considered here.

251
00:18:39,800 --> 00:18:43,124
And if the neighbor color is

252
00:18:43,162 --> 00:18:44,310
of the same color,

253
00:18:46,440 --> 00:18:50,180
which is black, it pushes it

254
00:18:50,250 --> 00:18:53,764
in the two visit stack. So it will push here the south

255
00:18:53,812 --> 00:18:57,752
pixels. And once the

256
00:18:57,806 --> 00:19:01,084
stack is empty, Webgl have this

257
00:19:01,122 --> 00:19:02,780
first area painted.

258
00:19:04,000 --> 00:19:07,864
Then it takes the next pixel,

259
00:19:07,992 --> 00:19:11,196
well that we haven't visited. So each time we

260
00:19:11,218 --> 00:19:15,584
visit a pixel, we also mark it as visited and

261
00:19:15,622 --> 00:19:18,690
it paints the white area the same way.

262
00:19:19,540 --> 00:19:23,392
Then these two pixels have already been

263
00:19:23,446 --> 00:19:27,684
visited. So the next pixel will be this one and

264
00:19:27,722 --> 00:19:30,528
the target color this time will be burgundy,

265
00:19:30,624 --> 00:19:34,390
which is Bordeaux. And here we go.

266
00:19:35,240 --> 00:19:40,730
So I just need to call

267
00:19:41,980 --> 00:19:43,560
this transformer.

268
00:19:45,420 --> 00:19:47,050
Instead of doing this,

269
00:19:50,000 --> 00:19:53,180
I have a class canvas data transformer,

270
00:19:54,080 --> 00:19:58,056
which is actually the implementation of the previously described

271
00:19:58,088 --> 00:20:00,350
algorithm, which has,

272
00:20:01,620 --> 00:20:04,844
well, is contrasted with a source pixel array,

273
00:20:04,892 --> 00:20:08,960
a target pixel array, a size, and it

274
00:20:09,030 --> 00:20:12,284
generalizes a visited pixel

275
00:20:12,332 --> 00:20:15,796
sex. The paint target data is

276
00:20:15,818 --> 00:20:19,632
the main method and it will do what I previously

277
00:20:19,696 --> 00:20:23,750
described. Okay, for each area

278
00:20:24,200 --> 00:20:27,400
that we have not visited, it calls the pen current

279
00:20:27,470 --> 00:20:32,600
area method, which initialize

280
00:20:33,500 --> 00:20:36,200
this tag, et cetera.

281
00:20:37,020 --> 00:20:37,770
Okay,

282
00:20:39,920 --> 00:20:43,950
let's look for example at the method adjacent points.

283
00:20:45,280 --> 00:20:48,636
This is the method that gives the

284
00:20:48,658 --> 00:20:51,672
neighbor of a point.

285
00:20:51,746 --> 00:20:55,068
So for each point, each point has four neighbors,

286
00:20:55,164 --> 00:20:57,520
southeast, west and north.

287
00:20:58,340 --> 00:21:02,336
Okay, so having this, we'll call

288
00:21:02,518 --> 00:21:04,320
the transformer method,

289
00:21:05,400 --> 00:21:08,470
paint target data.

290
00:21:09,160 --> 00:21:12,852
And now what we have from our

291
00:21:12,906 --> 00:21:16,416
transformer, we can get the

292
00:21:16,538 --> 00:21:18,280
target pixel array.

293
00:21:19,820 --> 00:21:22,410
So actually put image data,

294
00:21:22,780 --> 00:21:26,116
receives an image data. So actually it's the image

295
00:21:26,148 --> 00:21:33,470
data that we need to pass here and

296
00:21:34,320 --> 00:21:37,836
we need to set. Actually we cannot set

297
00:21:37,858 --> 00:21:41,368
it like this. We cannot assign data to a value because it's

298
00:21:41,384 --> 00:21:45,360
a read only property. So we use the set method.

299
00:21:50,420 --> 00:21:51,170
Okay,

300
00:21:54,840 --> 00:21:56,710
let's look at it.

301
00:21:59,160 --> 00:22:03,924
It's working even with this

302
00:22:03,962 --> 00:22:05,670
shape, which is quite nice.

303
00:22:11,190 --> 00:22:14,686
So we have a threshold, although it doesn't

304
00:22:14,718 --> 00:22:18,702
work very well with full colored

305
00:22:18,766 --> 00:22:22,902
images because we just have a threshold to detect white

306
00:22:22,956 --> 00:22:28,646
areas. So that's why I'm using now another

307
00:22:28,748 --> 00:22:32,722
style for our Mapbox mile maps,

308
00:22:32,786 --> 00:22:35,958
which is a road style that I customized.

309
00:22:36,054 --> 00:22:39,660
So that's what is really nice with Mapbox is that

310
00:22:41,630 --> 00:22:46,134
there is an application tile

311
00:22:46,182 --> 00:22:48,240
studio or something. Yeah.

312
00:22:50,690 --> 00:22:53,950
Where you can customize your map styles.

313
00:22:55,410 --> 00:22:59,550
And this is the one I created

314
00:22:59,910 --> 00:23:05,714
to be able to render the

315
00:23:05,752 --> 00:23:08,962
map. So actually we're facing here,

316
00:23:09,016 --> 00:23:12,690
I'm facing some user interaction

317
00:23:13,130 --> 00:23:16,774
problems because all the computation is

318
00:23:16,812 --> 00:23:20,614
taken by

319
00:23:20,652 --> 00:23:23,394
my algorithm and it blocks the UI.

320
00:23:23,442 --> 00:23:26,954
So with difficulties here,

321
00:23:27,072 --> 00:23:30,394
I want to drag, but I can't get

322
00:23:30,432 --> 00:23:33,450
it. So even if I want to see the Kamarg,

323
00:23:33,950 --> 00:23:37,014
I'm going to have a lot of troubles to do this.

324
00:23:37,152 --> 00:23:40,080
So that leads me to the second part of this talk,

325
00:23:40,530 --> 00:23:44,074
which is how to ease user

326
00:23:44,122 --> 00:23:46,510
interaction with a web worker.

327
00:23:50,870 --> 00:23:54,914
So we want to run the process of the

328
00:23:54,952 --> 00:23:58,322
algorithm in a web worker. So why do we want

329
00:23:58,376 --> 00:23:58,980
this?

330
00:24:01,590 --> 00:24:04,934
Web workers are a simple means for web content to run

331
00:24:04,972 --> 00:24:08,546
scripts in background threads. That's perfect. The worker

332
00:24:08,578 --> 00:24:12,790
thread can perform tasks without interfering with the user interface.

333
00:24:13,930 --> 00:24:16,620
Okay, so basically, how does it work?

334
00:24:18,670 --> 00:24:22,758
Basically we initialize a worker with a file

335
00:24:22,934 --> 00:24:26,506
and we send on

336
00:24:26,528 --> 00:24:30,030
the worker side, we have an on message function

337
00:24:30,180 --> 00:24:33,802
that listens to messages, do the jobs,

338
00:24:33,866 --> 00:24:36,430
and then pass the result to the main thread.

339
00:24:38,450 --> 00:24:42,050
Okay, so the problem is

340
00:24:42,120 --> 00:24:45,522
for us is that we cannot use this for me,

341
00:24:45,576 --> 00:24:49,490
actually, I cannot use this directly because webpack

342
00:24:50,550 --> 00:24:54,134
is going to build the application and the URL is

343
00:24:54,172 --> 00:24:57,734
not going to be available anymore. So that's why

344
00:24:57,772 --> 00:25:00,950
I need to use a worker loader.

345
00:25:01,690 --> 00:25:06,346
So worker loader is a webpack module that

346
00:25:06,368 --> 00:25:09,450
I already installed in my node modules.

347
00:25:12,110 --> 00:25:12,860
Okay.

348
00:25:15,710 --> 00:25:19,486
So I just need to import the

349
00:25:19,508 --> 00:25:23,454
worker with this syntax. And actually this syntax is to

350
00:25:23,492 --> 00:25:28,522
make webpack understand to load the file with the worker

351
00:25:28,586 --> 00:25:32,066
loader. So what

352
00:25:32,088 --> 00:25:36,270
I also had to do is to eject my create react

353
00:25:36,350 --> 00:25:40,130
app to be able to

354
00:25:40,200 --> 00:25:43,430
override webpack configuration.

355
00:25:43,770 --> 00:25:47,778
So that's what I did and this is what my config

356
00:25:47,874 --> 00:25:51,394
looks like. So I'm using customize.

357
00:25:51,442 --> 00:25:55,258
Correct. But it's basically the same syntax as the

358
00:25:55,264 --> 00:25:57,500
one we just saw. Okay,

359
00:25:59,550 --> 00:26:01,820
so I'll import.

360
00:26:03,470 --> 00:26:07,538
Okay, we also have in this documentation

361
00:26:07,734 --> 00:26:12,074
a typescript hint that indicates

362
00:26:12,122 --> 00:26:15,502
you to declare a new module so that web

363
00:26:15,636 --> 00:26:19,750
worker is understood by typescript.

364
00:26:19,930 --> 00:26:23,794
Okay, so this

365
00:26:23,832 --> 00:26:27,940
is where my custom typing is.

366
00:26:28,550 --> 00:26:32,760
I have here a paintworker that

367
00:26:35,370 --> 00:26:39,894
initialize. Well, there's a constant that

368
00:26:39,932 --> 00:26:43,800
we call the on message method on.

369
00:26:44,250 --> 00:26:48,074
And when we receive a message, I will console log the

370
00:26:48,112 --> 00:26:48,700
message.

371
00:26:51,860 --> 00:26:57,152
So new

372
00:26:57,206 --> 00:27:14,770
worker. And the URL is it.

373
00:27:18,100 --> 00:27:22,156
So our worker is paint

374
00:27:22,188 --> 00:27:25,810
worker. Okay. And const

375
00:27:26,280 --> 00:27:29,780
worker, new worker.

376
00:27:33,160 --> 00:27:35,510
That's what we're supposed to do.

377
00:27:36,760 --> 00:27:42,390
Yeah, you'll need this because

378
00:27:43,960 --> 00:27:47,444
there's a rule added by create react

379
00:27:47,492 --> 00:27:52,952
app that

380
00:27:53,006 --> 00:27:57,416
doesn't want you to use this syntax because they

381
00:27:57,438 --> 00:28:01,290
don't want to be bound to webpacks actually.

382
00:28:01,980 --> 00:28:06,050
So that's why to ignore next line.

383
00:28:07,380 --> 00:28:11,010
Okay, is there any

384
00:28:12,980 --> 00:28:16,516
log? No, because we haven't passed any message to

385
00:28:16,538 --> 00:28:20,420
our walker. So before we do all this transformation,

386
00:28:21,240 --> 00:28:22,870
we'll pass a message.

387
00:28:25,400 --> 00:28:27,590
Work on this please.

388
00:28:29,020 --> 00:28:33,896
And Webgl listen to the

389
00:28:33,918 --> 00:28:34,840
response.

390
00:28:48,480 --> 00:28:51,740
The worker received the message, which is a message

391
00:28:51,810 --> 00:28:55,250
event with the data. Work on this piece

392
00:28:56,420 --> 00:29:01,984
and in the other side we

393
00:29:02,022 --> 00:29:05,244
receive the response.

394
00:29:05,292 --> 00:29:08,436
Got it? Okay, so now we're going to be

395
00:29:08,458 --> 00:29:12,516
able to put this in

396
00:29:12,538 --> 00:29:19,384
our walker so

397
00:29:19,422 --> 00:29:25,304
it's not the maps box pixels, so work

398
00:29:25,342 --> 00:29:29,332
on our data. We're going to initialize

399
00:29:29,396 --> 00:29:32,410
it with the data we want.

400
00:29:35,180 --> 00:29:40,344
Okay. And this is actually an object with

401
00:29:40,382 --> 00:29:43,696
the type I created and.

402
00:29:43,758 --> 00:29:47,650
Yeah, sorry,

403
00:29:53,460 --> 00:29:57,184
worker payload. Yeah, worker payload

404
00:29:57,232 --> 00:30:00,150
is an object with what I need here.

405
00:30:00,840 --> 00:30:04,756
And we're going to use it in

406
00:30:04,778 --> 00:30:08,180
our class, in our constructor,

407
00:30:12,520 --> 00:30:16,840
so there is no event anymore.

408
00:30:19,950 --> 00:30:23,418
Okay. And then when I call the transformer paint

409
00:30:23,434 --> 00:30:26,542
target data, I will pass the

410
00:30:26,596 --> 00:30:31,230
data that was just painted.

411
00:30:33,090 --> 00:30:36,770
Okay. And here I need,

412
00:30:36,840 --> 00:30:38,500
instead of doing this,

413
00:30:41,030 --> 00:30:44,530
I'm going to call the worker with the payload

414
00:30:50,890 --> 00:30:54,150
and target pixel array will be

415
00:30:54,300 --> 00:30:57,880
the mosaic data, the data.

416
00:30:58,490 --> 00:31:02,862
The source pixel array will be the walker,

417
00:31:02,946 --> 00:31:08,522
the mapbox pixels and

418
00:31:08,576 --> 00:31:11,670
the size of the canvas.

419
00:31:11,830 --> 00:31:15,582
And we'll post this

420
00:31:15,636 --> 00:31:18,974
payload and on the

421
00:31:19,012 --> 00:31:23,040
reception so it's the same data which

422
00:31:23,570 --> 00:31:31,134
is a worker response type UIT

423
00:31:31,262 --> 00:31:35,474
array I

424
00:31:35,512 --> 00:31:38,670
can console receives.

425
00:31:38,830 --> 00:31:42,774
And then we'll set the Masai data to this

426
00:31:42,812 --> 00:31:50,714
new data we just received and

427
00:31:50,752 --> 00:31:54,042
then put image data, the new image data and

428
00:31:54,096 --> 00:31:58,220
set is loading inside the on message function.

429
00:32:00,270 --> 00:32:01,020
Okay,

430
00:32:03,730 --> 00:32:13,768
reorder to type our

431
00:32:13,854 --> 00:32:19,164
magenta pixel and

432
00:32:19,202 --> 00:32:22,844
you see that the UI is not

433
00:32:22,882 --> 00:32:26,396
blocked anymore. However, there is

434
00:32:26,418 --> 00:32:29,020
a lot of render that are triggered.

435
00:32:33,940 --> 00:32:37,484
The worker previously is doing jobs

436
00:32:37,532 --> 00:32:41,716
that are outdated. So to prevent this I

437
00:32:41,738 --> 00:32:45,376
can terminate the worker job each time I'm

438
00:32:45,408 --> 00:32:47,060
about to do a new render.

439
00:32:49,800 --> 00:32:53,284
So this aborts the

440
00:32:53,322 --> 00:32:57,370
worker and it's also killed it. So I need to recreate it.

441
00:33:01,100 --> 00:33:04,680
That's why I want it to be a variable.

442
00:33:07,600 --> 00:33:11,868
Okay, and now you see that the worker is not

443
00:33:12,034 --> 00:33:15,900
doing any unnecessary renders.

444
00:33:19,860 --> 00:33:23,524
This is the only message response I

445
00:33:23,562 --> 00:33:27,476
received. Okay, so now

446
00:33:27,658 --> 00:33:31,860
we are done with our beautiful mosaic.

447
00:33:34,300 --> 00:33:37,864
As for a conclusion, as you can see,

448
00:33:37,902 --> 00:33:41,880
my solution is quite slow,

449
00:33:42,300 --> 00:33:46,372
so the algorithm is quite long

450
00:33:46,526 --> 00:33:50,424
to compute. So for example, for the 5 million pixels

451
00:33:50,552 --> 00:33:54,124
I have on my full

452
00:33:54,162 --> 00:33:58,092
screen, it takes up to 5

453
00:33:58,146 --> 00:34:02,720
seconds, so it's very long indeed.

454
00:34:06,350 --> 00:34:10,138
So how could I improve this? So first I asked myself,

455
00:34:10,224 --> 00:34:13,862
why does mapbox map render

456
00:34:13,926 --> 00:34:17,502
so quickly? So first they apply only

457
00:34:17,556 --> 00:34:21,150
on layers, so they have a background, for example.

458
00:34:21,300 --> 00:34:24,826
Then they apply a layer of road, then a layer

459
00:34:24,858 --> 00:34:29,010
of forest, so they don't need to fill the whole image

460
00:34:31,670 --> 00:34:33,250
pixel by pixel.

461
00:34:35,110 --> 00:34:38,814
And then they use the Webgl API which allows you to

462
00:34:38,872 --> 00:34:42,902
draw shapes very efficiently thanks

463
00:34:42,956 --> 00:34:44,390
to vertex arrays.

464
00:34:48,250 --> 00:34:51,930
So maybe I could inspire

465
00:34:52,590 --> 00:34:56,426
with this with a new algorithm. Algorithm that would

466
00:34:56,608 --> 00:35:01,062
follow the road with the GPS

467
00:35:01,126 --> 00:35:05,878
coordinates and find the intersections

468
00:35:05,974 --> 00:35:09,766
to delimit the area's vertexes

469
00:35:09,878 --> 00:35:13,466
and then apply a layer with these

470
00:35:13,568 --> 00:35:15,954
vertexes. Another,

471
00:35:16,112 --> 00:35:19,794
another option. I asked

472
00:35:19,832 --> 00:35:24,034
myself why a software like Photoshops is

473
00:35:24,072 --> 00:35:28,180
so fast to detect areas. And one

474
00:35:28,490 --> 00:35:31,686
hypothesis is that it uses all the

475
00:35:31,708 --> 00:35:35,014
capabilities of the operating system.

476
00:35:35,212 --> 00:35:38,360
So I would like to try to

477
00:35:40,410 --> 00:35:44,634
run my process with binary instructions which

478
00:35:44,672 --> 00:35:48,518
can be compiled with webassembly

479
00:35:48,694 --> 00:35:51,702
and maybe it could improve.

480
00:35:51,846 --> 00:35:55,660
Well, it would be interesting to see the gain with this,

481
00:35:56,110 --> 00:36:00,326
so if you have any suggestion, don't hesitate

482
00:36:00,518 --> 00:36:04,410
to contact me. So I put my email

483
00:36:04,480 --> 00:36:08,766
address here. Thank, thanks a lot for your attention

484
00:36:08,878 --> 00:36:11,954
and I hope you'll do

485
00:36:11,992 --> 00:36:15,470
some great drawing with the canvas API.

