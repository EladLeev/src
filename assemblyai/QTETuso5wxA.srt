1
00:02:14,690 --> 00:02:18,126
Hi everyone, thank you so much for joining me. Writing code is

2
00:02:18,148 --> 00:02:21,774
something that we learn, right? But managing a project end to end,

3
00:02:21,892 --> 00:02:25,514
probably not that much. In this talk I'll show my journey of migrating

4
00:02:25,562 --> 00:02:28,942
an entire R D code base from BitBucket Cloud to

5
00:02:28,996 --> 00:02:32,382
self hosted GitLab on my own. But with help of people

6
00:02:32,436 --> 00:02:36,582
along the way, of course, planning, implementation and handoffs. I'll share

7
00:02:36,636 --> 00:02:39,954
best practices for managing a technical project with a lot of takeaways

8
00:02:40,002 --> 00:02:44,150
that you could adopt so your project will be handled smoothly and successfully.

9
00:02:44,490 --> 00:02:48,226
So first of all, hi, my name is Hila Fish. I'm a senior DevOps engineer

10
00:02:48,258 --> 00:02:51,990
and I work for weeks. I have 15 years of experience in the tech industry,

11
00:02:52,070 --> 00:02:55,740
which really allowed me to ee that. The DevOps culture is

12
00:02:56,270 --> 00:02:59,210
what helps companies achieve great things.

13
00:02:59,360 --> 00:03:03,098
I also help organize conferences in Israel, DevOps days Tel

14
00:03:03,114 --> 00:03:06,506
Aviv, and Statscraft monitoring conference.

15
00:03:06,698 --> 00:03:09,806
I'm a mentor in courses and communities for women in

16
00:03:09,828 --> 00:03:13,198
tech and other communities. And I'm a lead singer in a

17
00:03:13,204 --> 00:03:16,500
cover band. As you can see this picture, which is a lot of fun.

18
00:03:16,950 --> 00:03:20,814
Okay, so this project took in total from planning

19
00:03:20,862 --> 00:03:24,722
to implementation and handoffs and the whole works. It took one month

20
00:03:24,776 --> 00:03:28,214
and a half to complete. Is it a lot? Yeah, no, you tell

21
00:03:28,252 --> 00:03:32,546
me after seeing this presentation. So the project structure

22
00:03:32,658 --> 00:03:36,166
looks like that. First, I started out with planning what

23
00:03:36,188 --> 00:03:39,318
to think about things to consider, foresee bottlenecks

24
00:03:39,334 --> 00:03:42,474
and tackle them upfront as much as possible, of course,

25
00:03:42,592 --> 00:03:46,374
deadlines, et cetera. Then the implementation phase,

26
00:03:46,502 --> 00:03:50,006
making sure that GitLab is up and running, and also integrations

27
00:03:50,118 --> 00:03:53,418
for doing stuff with GitLab,

28
00:03:53,514 --> 00:03:57,214
Jenkins and Jira, and other aspects like

29
00:03:57,252 --> 00:04:01,562
security aspects, backup and restores, handling expected blockers,

30
00:04:01,626 --> 00:04:05,360
and also leave room for the unexpected, which is very, very important.

31
00:04:06,130 --> 00:04:09,522
Next up, I continued to the training for the R D department because

32
00:04:09,576 --> 00:04:12,946
this tool was completely new to them. So I needed to make sure

33
00:04:12,968 --> 00:04:17,234
that they get familiarized with

34
00:04:17,272 --> 00:04:20,454
working with GitLab because I wanted to make sure that I

35
00:04:20,492 --> 00:04:23,862
don't spring it up on them and they can really be

36
00:04:23,996 --> 00:04:27,462
sure they know what they're doing before the actual

37
00:04:27,516 --> 00:04:30,746
migration. So this step was pretty important to

38
00:04:30,768 --> 00:04:34,060
make sure that they are feeling comfortable with it.

39
00:04:34,750 --> 00:04:38,458
And then documentation and handoffs. I always leave

40
00:04:38,544 --> 00:04:41,406
documentation behind with anything that I do,

41
00:04:41,508 --> 00:04:45,242
but in this case it was extra crucial

42
00:04:45,306 --> 00:04:48,718
because fun fact, I left the company that I

43
00:04:48,804 --> 00:04:52,640
did this project for shortly after finishing the project,

44
00:04:53,330 --> 00:04:57,010
of course I raised the flag that before even the project started,

45
00:04:57,080 --> 00:05:00,722
I raised the flag that I'm planning to live. And then they said

46
00:05:00,856 --> 00:05:04,722
that they want me to do it anyway. So that's why

47
00:05:04,776 --> 00:05:08,014
I knew that I have to make sure that the documentation

48
00:05:08,062 --> 00:05:11,286
is flawless in my opinion. Of course I can't really tell,

49
00:05:11,388 --> 00:05:15,078
but I really wanted to make sure that I leave everything behind

50
00:05:15,164 --> 00:05:19,414
in a way that they can handle GitLab and not

51
00:05:19,452 --> 00:05:22,410
feel hopeless, right? Because I don't want them to feel like oh,

52
00:05:22,480 --> 00:05:26,314
Hila left now what are we going to do, right? So this

53
00:05:26,432 --> 00:05:30,006
phase was very important. I'm going to drill

54
00:05:30,038 --> 00:05:33,982
down to every aspect in this structure during

55
00:05:34,036 --> 00:05:37,502
this presentation, so we will talk about it a little bit later.

56
00:05:37,636 --> 00:05:41,610
And hovering above everything was the project ongoing statuses.

57
00:05:41,770 --> 00:05:45,474
Because I have managers and the managers want to see

58
00:05:45,592 --> 00:05:49,106
what are the deadlines and really follow up on

59
00:05:49,128 --> 00:05:52,706
what's going on. So throughout the project I

60
00:05:52,728 --> 00:05:56,126
push the notifications about anything that happens and blockers

61
00:05:56,158 --> 00:05:59,160
and stuff like that. We will speak about it also later on.

62
00:05:59,610 --> 00:06:02,726
Okay, so I mentioned planning, but actually there

63
00:06:02,748 --> 00:06:06,774
was a pre planning phase. So when

64
00:06:06,812 --> 00:06:10,546
I got the task, I first started asking questions to understand the scope

65
00:06:10,578 --> 00:06:14,234
of the project. So what is my deadline? If I know the deadline, I can

66
00:06:14,272 --> 00:06:17,318
organize my time and make priorities accordingly.

67
00:06:17,494 --> 00:06:21,414
Why are we doing this? Migrating? Because there are several

68
00:06:21,542 --> 00:06:25,214
reasons why. Doing a migration, we want to move from on

69
00:06:25,252 --> 00:06:29,166
premise to cloud. We want to move from SaaS solution to

70
00:06:29,188 --> 00:06:32,782
a self hosted one or any other internal reason.

71
00:06:32,916 --> 00:06:36,526
So this question is very important because I want to make sure the

72
00:06:36,548 --> 00:06:40,322
project process and outcome is according to the managing needs and

73
00:06:40,376 --> 00:06:44,466
requirements. And if I don't know why we're doing it, I wouldn't know if

74
00:06:44,568 --> 00:06:47,878
what I'm trying to achieve and the way I'm achieving it

75
00:06:47,964 --> 00:06:51,320
really works. So that's why I asked this question

76
00:06:51,770 --> 00:06:55,254
and then I planned accordingly. And any

77
00:06:55,292 --> 00:06:58,770
limitations do we need to do things in a certain way?

78
00:06:58,940 --> 00:07:02,598
For example, GitLab has two offerings,

79
00:07:02,774 --> 00:07:06,726
omnibus, which is the VM installation and helm release

80
00:07:06,758 --> 00:07:10,042
for the Kubernetes deployment. So if I knew that,

81
00:07:10,096 --> 00:07:14,270
for example, my company didn't utilize kubernetes at all,

82
00:07:14,340 --> 00:07:18,046
then I assume I would go with VM installation because I

83
00:07:18,068 --> 00:07:21,520
wouldn't want to introduce entirely new

84
00:07:23,430 --> 00:07:26,974
technology along with new tool for SCM.

85
00:07:27,022 --> 00:07:30,594
Right? Two changes at once.

86
00:07:30,712 --> 00:07:34,606
So I had some not really concerns,

87
00:07:34,638 --> 00:07:37,566
but I really wanted to make sure that if we have any limitations,

88
00:07:37,678 --> 00:07:41,506
I need to know about them upfront so I can plan accordingly.

89
00:07:41,698 --> 00:07:45,286
And speaking of plan accordingly, a goal without a plan is

90
00:07:45,308 --> 00:07:48,982
just a wish, right? So we really need to make sure that we plan ahead

91
00:07:49,116 --> 00:07:52,326
so we can know what we are going to execute.

92
00:07:52,438 --> 00:07:55,434
So once I felt like I have enough information to go on.

93
00:07:55,552 --> 00:07:59,020
Then I created a high level plan.

94
00:07:59,470 --> 00:08:02,540
So this was the plan and it's nice, right?

95
00:08:03,410 --> 00:08:07,102
But a plan is great for me, the executor of the plan,

96
00:08:07,236 --> 00:08:10,714
but the management wants milestones and due dates.

97
00:08:10,762 --> 00:08:13,982
This is how they can measure progress and convey status in a clear

98
00:08:14,036 --> 00:08:17,714
manner. So that's why I've taken the plan that you can see here and

99
00:08:17,752 --> 00:08:21,742
converted it to be actionable and measurable with setting up milestones

100
00:08:21,806 --> 00:08:25,922
and due dates. So let's go over each one telephone code.

101
00:08:26,056 --> 00:08:30,466
This was the step and the first step because this was the, let's say prerequisite

102
00:08:30,498 --> 00:08:34,134
for anything else telephone call to create the project for

103
00:08:34,172 --> 00:08:37,302
GitLab, I say project. We had two

104
00:08:37,356 --> 00:08:40,806
because we had Dev and production. I've deployed

105
00:08:40,838 --> 00:08:44,278
GitLab on the production environment for the actual source control management

106
00:08:44,374 --> 00:08:48,246
and also deployed on dev environment for two purposes.

107
00:08:48,358 --> 00:08:51,706
One to try out upgrades on Dev first to

108
00:08:51,728 --> 00:08:55,562
see if nothing breaks, but also let dev personnel

109
00:08:55,626 --> 00:08:58,574
play with it whenever they want to be familiar with the tool,

110
00:08:58,612 --> 00:09:02,446
but also to work on their own mini dev projects before taking them to

111
00:09:02,468 --> 00:09:05,966
the production instance. So also for the migration phase to play

112
00:09:05,988 --> 00:09:09,498
out with the tool and be familiar with it. But also if I upgrade

113
00:09:09,514 --> 00:09:13,154
it to version X and this version brought some

114
00:09:13,192 --> 00:09:16,694
new features with it, they can play with the new features on dev and then

115
00:09:16,812 --> 00:09:19,842
come knowledgeable to the pod instance.

116
00:09:19,986 --> 00:09:23,186
So everything that was related to the GitLab deployment

117
00:09:23,378 --> 00:09:26,934
was done in this phase. Terraform was

118
00:09:26,972 --> 00:09:31,030
utilized to create the projects and also the GitLab deployment

119
00:09:32,090 --> 00:09:35,354
and everything just covered in that phase because

120
00:09:35,472 --> 00:09:38,506
this was the prerequisite. Next up we had the

121
00:09:38,528 --> 00:09:41,994
networking troubleshooting. So since networking

122
00:09:42,042 --> 00:09:45,086
was handled by a different team, I automatically added a

123
00:09:45,108 --> 00:09:48,734
slot, dedicated slot for troubleshooting, since it involves other

124
00:09:48,772 --> 00:09:52,186
people, aka potential bottlenecks.

125
00:09:52,218 --> 00:09:55,914
Right? So it doesn't mean that the network troubleshooting

126
00:09:55,962 --> 00:10:00,094
was restricted only to this phase. I had to troubleshoot issues throughout

127
00:10:00,142 --> 00:10:03,794
the project, but I tried to map every source destination I could and

128
00:10:03,832 --> 00:10:07,714
have it all checked on this phase. Then the next milestone

129
00:10:07,762 --> 00:10:10,966
is GitLab up and running. We want to make

130
00:10:10,988 --> 00:10:14,626
sure that everything is up and running and we can use GitLab.

131
00:10:14,818 --> 00:10:18,926
This phase included a DNS name certificate

132
00:10:19,058 --> 00:10:22,666
and SAML integration. Then the

133
00:10:22,688 --> 00:10:25,942
next milestone was first a bear repo migration.

134
00:10:26,086 --> 00:10:29,980
I used the GitLab migration feature that allowed me to import

135
00:10:31,410 --> 00:10:35,294
repositories from BitBucket to GitLab. I had

136
00:10:35,332 --> 00:10:38,654
some issues with it, open ticket photosupport and stuff like that.

137
00:10:38,692 --> 00:10:42,400
So it took some time. Not that a lot, but still.

138
00:10:42,850 --> 00:10:46,242
And this milestone really talks about getting to the point

139
00:10:46,296 --> 00:10:49,426
where the repo is migrated to GitLab and

140
00:10:49,448 --> 00:10:53,454
I can pull it, push to it and the whole thing related

141
00:10:53,502 --> 00:10:55,730
to repository management.

142
00:10:56,310 --> 00:10:59,446
The next milestone is the peripheral info backups and

143
00:10:59,468 --> 00:11:02,998
monitoring. So I made sure that I can backup everything.

144
00:11:03,084 --> 00:11:07,826
And when I say everything, I really mean everything. Full system repo

145
00:11:07,858 --> 00:11:11,206
backup and branch backup and also not only backups.

146
00:11:11,238 --> 00:11:14,618
I tested out the restores full system

147
00:11:14,704 --> 00:11:18,202
repo and branch because I wanted to make sure that if

148
00:11:18,336 --> 00:11:22,606
something happens, they know what to do. At that time the

149
00:11:22,708 --> 00:11:25,966
restores wasn't really covered as well as

150
00:11:25,988 --> 00:11:29,738
it could be in the GitLab documentation. So I created a procedure

151
00:11:29,914 --> 00:11:32,846
of how to do the restores step by step,

152
00:11:32,948 --> 00:11:36,594
because when something bad happens we

153
00:11:36,632 --> 00:11:40,114
want to know exactly what to do because it's stressful as

154
00:11:40,152 --> 00:11:43,886
it is. So I created part of the documentation that I created

155
00:11:43,918 --> 00:11:48,642
later on included also the restore procedure.

156
00:11:48,786 --> 00:11:52,520
And also I dealt with the monitoring here. So system

157
00:11:52,890 --> 00:11:56,514
monitoring and application monitoring, the GitLab metrics.

158
00:11:56,642 --> 00:11:59,766
And in this phase I tried to close any loose ends regarding

159
00:11:59,798 --> 00:12:03,930
networking issues that I had until now. SSH and HTTPs

160
00:12:04,590 --> 00:12:08,540
tested throughout from several sources and stuff like that.

161
00:12:09,230 --> 00:12:13,162
The next milestone was a second repo migration and pipeline.

162
00:12:13,226 --> 00:12:17,118
So we had repositories that just you need to

163
00:12:17,124 --> 00:12:20,894
work with them as is. But we had repositories that Jenkins did

164
00:12:20,932 --> 00:12:24,942
stuff on them, right, pause it and then created

165
00:12:25,006 --> 00:12:28,866
or built docker images from files there, right. So I

166
00:12:28,888 --> 00:12:32,782
want to make sure that this whole ordeal

167
00:12:32,846 --> 00:12:36,174
works. So in this phase I set up the Jenkins

168
00:12:36,222 --> 00:12:39,614
integration and the configurations needed on Jenkins

169
00:12:39,662 --> 00:12:43,222
side and GitLab side. I can talk about

170
00:12:43,276 --> 00:12:47,110
it alone in a separate talk because

171
00:12:47,260 --> 00:12:50,380
there were several settings that needed to be done.

172
00:12:50,750 --> 00:12:54,406
So in this phase I really just wanted to make sure that the pipeline

173
00:12:54,438 --> 00:12:58,490
works and tested fully against GitLab repository.

174
00:12:58,830 --> 00:13:02,298
The next milestone was continuous migration,

175
00:13:02,394 --> 00:13:06,110
because in parallel to everything that I'm going to

176
00:13:06,180 --> 00:13:09,594
say here is that migration continued. So I divided

177
00:13:09,642 --> 00:13:13,566
the repositories to teams, so it was coordinated with each team

178
00:13:13,748 --> 00:13:17,374
when their repositories will get migrating. But in parallel

179
00:13:17,422 --> 00:13:21,410
I did also other things like training for my team

180
00:13:21,480 --> 00:13:24,834
that needed to maintain GitLab, but also for the R D

181
00:13:24,872 --> 00:13:28,758
that needs to use it. So I gave them initial intro

182
00:13:28,844 --> 00:13:32,914
on make features and stuff like that, and the gradual login.

183
00:13:32,962 --> 00:13:36,386
So GitLab used, the implementation

184
00:13:36,418 --> 00:13:40,486
that we used was some integration that when a user performs

185
00:13:40,518 --> 00:13:44,106
an initial login, then the user entity gets created on

186
00:13:44,128 --> 00:13:47,514
GitLab. So that was another way to

187
00:13:47,552 --> 00:13:51,034
tell them on the training for everyone that was on the

188
00:13:51,072 --> 00:13:55,114
call and on the meeting to hey please log into

189
00:13:55,152 --> 00:13:59,178
the system, play with it and stuff like that so your user will get created.

190
00:13:59,274 --> 00:14:02,794
And then once the user got created then I could set up the permissions

191
00:14:02,842 --> 00:14:05,986
based on the folder structure. I will mention it also later on.

192
00:14:06,088 --> 00:14:09,794
So everything that was really progressing towards the

193
00:14:09,832 --> 00:14:13,570
actual usage of GitLab was done in this phase.

194
00:14:14,310 --> 00:14:17,446
And the last milestone is that migration is

195
00:14:17,468 --> 00:14:21,574
fully done. I finished walking and

196
00:14:21,612 --> 00:14:24,726
doing the documentation and handoffs and the whole walks and I can

197
00:14:24,748 --> 00:14:28,898
tell you under the migration done section that the back

198
00:14:28,924 --> 00:14:32,426
end repo was the most big one

199
00:14:32,528 --> 00:14:35,802
and the import took time because I tested out on the dev

200
00:14:35,856 --> 00:14:39,094
instance and I saw that their import took several

201
00:14:39,142 --> 00:14:43,486
hours. So I knew that I

202
00:14:43,508 --> 00:14:46,862
don't want to disrupt the R and D in that way

203
00:14:46,916 --> 00:14:50,190
and let them paralyze them for

204
00:14:50,260 --> 00:14:53,954
several hours because whenever I did the migration of

205
00:14:53,992 --> 00:14:57,154
each repository I told them

206
00:14:57,192 --> 00:15:01,918
that hey, in order to avoid sync issues you can't push to BitBucket

207
00:15:02,094 --> 00:15:05,630
while I'm doing the migration. So since this repository

208
00:15:05,710 --> 00:15:09,640
took several hours then I knew that I want to

209
00:15:10,570 --> 00:15:13,926
make sure that they can work flawlessly. So that's why I did this

210
00:15:13,948 --> 00:15:17,574
migration on a weekend, and weekend on

211
00:15:17,612 --> 00:15:20,722
Israel is Friday and Saturday,

212
00:15:20,866 --> 00:15:22,920
so it was a happy Sunday after.

213
00:15:25,050 --> 00:15:28,454
Yeah, that's basically about that. And again finishing

214
00:15:28,502 --> 00:15:31,886
documentation and handles and all this stuff. So this was the

215
00:15:31,908 --> 00:15:36,030
entire plan. I also added some stuff that I knew later

216
00:15:36,100 --> 00:15:39,822
on after the fact, but this was the plan and

217
00:15:39,876 --> 00:15:43,874
this was what detailed and explained and what

218
00:15:43,912 --> 00:15:48,002
I showcased to my managers before

219
00:15:48,056 --> 00:15:51,700
I actually started to work on this project.

220
00:15:52,870 --> 00:15:56,446
So for everything regarding related

221
00:15:56,478 --> 00:16:00,562
to the planning, I created a planning doc that consists of the milestones

222
00:16:00,626 --> 00:16:04,082
that I just showed you and extra sections.

223
00:16:04,146 --> 00:16:07,282
I decided to put them all on this planning doc

224
00:16:07,346 --> 00:16:10,962
because I want to have one place that have all aspects referenced.

225
00:16:11,106 --> 00:16:14,794
So first steps, a mapping of needed steps both on my

226
00:16:14,832 --> 00:16:18,234
side or on other teams so I can lay it all

227
00:16:18,272 --> 00:16:21,862
out and see what can be done in parallel and what should be done Asap

228
00:16:21,926 --> 00:16:25,374
to reduce bottlenecks later on. To do

229
00:16:25,412 --> 00:16:28,766
section was out of scope, high level tasks, things to

230
00:16:28,788 --> 00:16:31,850
do and remember after this project is finished.

231
00:16:32,010 --> 00:16:35,406
Read more so I read a lot of documentation of GitLab and

232
00:16:35,428 --> 00:16:39,106
I saw some stuff that we should dwell on it later on

233
00:16:39,128 --> 00:16:42,418
and we should get back to it because it's not important

234
00:16:42,504 --> 00:16:46,334
right now, but it is important in general. So these kind of things I wrote

235
00:16:46,382 --> 00:16:49,734
under the Read more section and things

236
00:16:49,772 --> 00:16:53,222
to think about. So considerations for annual audits and stuff

237
00:16:53,276 --> 00:16:56,866
like that and some more things to add for the planning doc

238
00:16:56,898 --> 00:17:00,060
because why not? Some addendums that I added were

239
00:17:00,510 --> 00:17:04,090
report issues that I've encountered both on GitLab side

240
00:17:04,160 --> 00:17:08,294
and internal issues. I of course listed them on separate

241
00:17:08,342 --> 00:17:12,122
Jira tickets, but again, it's a centralized place to see any issues

242
00:17:12,176 --> 00:17:16,146
that we have that could potentially endanger the project's timeline.

243
00:17:16,198 --> 00:17:19,534
So that's why I put it here for my managing to view it

244
00:17:19,572 --> 00:17:23,470
here. And I also added some more appendices so access

245
00:17:23,540 --> 00:17:27,034
mapping inbound and outbound accessibility to the current

246
00:17:27,092 --> 00:17:30,642
BitBucket hosting so we can make sure they are open for

247
00:17:30,696 --> 00:17:34,146
the self hosted GitLab offering as well. I marked what

248
00:17:34,168 --> 00:17:37,634
was open, so it was both a place to check for status and have

249
00:17:37,672 --> 00:17:40,946
audit for what is needed. I added those in the GitHub documentation

250
00:17:40,978 --> 00:17:44,454
that I created later on, but during the project it was

251
00:17:44,492 --> 00:17:48,006
a good thing to have that, especially for keeping track of

252
00:17:48,028 --> 00:17:51,710
what is still needed to be done. The LDAP groups defined

253
00:17:51,730 --> 00:17:55,450
in the SAML offering to allow access to the self hosted GitLab was also mentioned

254
00:17:55,520 --> 00:17:59,530
here, and main repositories and CI pipelines to track progress of

255
00:17:59,600 --> 00:18:02,490
what I already migrated and whatnot.

256
00:18:03,150 --> 00:18:06,570
This was something that was added by my manager. He felt

257
00:18:06,650 --> 00:18:10,366
the need to add it, so conf 42 ease his mind. I went along and

258
00:18:10,388 --> 00:18:13,390
marked completed on those that were migrated.

259
00:18:13,910 --> 00:18:18,050
Okay, so we talked about the planning, right, which is

260
00:18:18,200 --> 00:18:22,114
extensive as it is. But I think that we really need to take

261
00:18:22,152 --> 00:18:25,858
a minute to talk about another important

262
00:18:25,944 --> 00:18:29,250
aspect of managing a project, which is communication.

263
00:18:29,410 --> 00:18:33,062
So as you can see here, the most important thing

264
00:18:33,116 --> 00:18:37,014
in communication is hearing what isn't said. Since I worked

265
00:18:37,052 --> 00:18:40,858
on this project alone, it was crucial to update my managers on

266
00:18:40,864 --> 00:18:44,074
the status so they can report back to their managers and to

267
00:18:44,112 --> 00:18:47,770
show them that I'm progressing according to the needed timelines.

268
00:18:48,110 --> 00:18:51,766
So I had weekly meetings to update my managing

269
00:18:51,798 --> 00:18:55,306
on the progress, but also I created ad hoc meetings

270
00:18:55,418 --> 00:18:59,182
with updates on blockers. So either issues that I needed their

271
00:18:59,236 --> 00:19:02,890
attention and help to escalate, or just an FYI,

272
00:19:03,050 --> 00:19:06,786
this is how I'm handling it, if you're okay with it. Cool. This is just

273
00:19:06,808 --> 00:19:10,434
an FYI. Me and my managers created zero tickets for

274
00:19:10,552 --> 00:19:14,482
really everything, and I've written detailed updates and current

275
00:19:14,536 --> 00:19:18,226
stats on each one. I created more tickets if

276
00:19:18,248 --> 00:19:22,194
there were more things to code along the way, and also tickets for other teams

277
00:19:22,322 --> 00:19:25,462
to do things that I need, like set up

278
00:19:25,516 --> 00:19:29,514
networking and provide us signed certificates and stuff like that so they can

279
00:19:29,712 --> 00:19:33,718
run with it in parallel, and then we can reduce bottlenecks.

280
00:19:33,814 --> 00:19:37,706
The other thing that I'm saying here is basically to convey the

281
00:19:37,728 --> 00:19:40,810
message that information is power, right?

282
00:19:40,880 --> 00:19:44,442
And information, when delivered properly without overbearing

283
00:19:44,506 --> 00:19:48,126
the recipient with details, which is important, can help

284
00:19:48,308 --> 00:19:52,346
ease the decision managing process and deliver a feeling of stability

285
00:19:52,458 --> 00:19:55,986
and allow your ongoing independence. Running the project, which is

286
00:19:56,008 --> 00:19:59,218
very very important, especially when you are working on a project

287
00:19:59,304 --> 00:20:02,962
alone and ongoing project takes

288
00:20:03,016 --> 00:20:06,786
patience, and patience when planning things go wrong and when you

289
00:20:06,808 --> 00:20:10,806
wait for other teams to do their work. So we

290
00:20:10,828 --> 00:20:14,502
need this patience, but we also need to think about

291
00:20:14,636 --> 00:20:17,426
hey, this takes too much, maybe we need to escalate.

292
00:20:17,538 --> 00:20:20,874
So this is also another aspect of

293
00:20:20,992 --> 00:20:23,914
communication that I want to tell here.

294
00:20:24,032 --> 00:20:27,418
And last but not least, I had

295
00:20:27,504 --> 00:20:31,250
a meeting with the R D team leaders to prepare them for the migrating

296
00:20:31,270 --> 00:20:34,858
and explain what is going to happen. Plus involve

297
00:20:34,874 --> 00:20:38,574
them in the folder structure decision because how I divided the

298
00:20:38,612 --> 00:20:42,062
repositories, I created a folder structure and each

299
00:20:42,116 --> 00:20:45,514
folder had the repositories related

300
00:20:45,562 --> 00:20:49,634
to that team and then the permissions were set up in the folder level.

301
00:20:49,752 --> 00:20:53,074
So since the R D team leaders are

302
00:20:53,112 --> 00:20:57,054
the code owners, I wanted to involve them in the folder structure

303
00:20:57,102 --> 00:21:00,694
decision as I wanted their inputs, but also which is

304
00:21:00,892 --> 00:21:04,886
something that is very important. I wanted to get them on

305
00:21:04,908 --> 00:21:09,014
board because I didn't want to code from the outside, from external way

306
00:21:09,052 --> 00:21:12,406
and say hey, this is what I'm going to do and that's

307
00:21:12,438 --> 00:21:16,074
that. No, I want them to feel

308
00:21:16,112 --> 00:21:20,122
that they are with me on this, right? So that's why

309
00:21:20,176 --> 00:21:24,014
I involve them in the decision and basically want them to be on

310
00:21:24,052 --> 00:21:27,406
board and feel that they have a say, which is very

311
00:21:27,588 --> 00:21:31,198
important as well. Okay, so let's talk a bit about

312
00:21:31,284 --> 00:21:34,926
the implementation. So we decided to go with

313
00:21:34,948 --> 00:21:38,014
the Kubernetes GitLab deployment and I used

314
00:21:38,052 --> 00:21:41,938
their helm chart which you can see here, we use terraform for everything,

315
00:21:42,024 --> 00:21:45,858
for the infrastructure and deployment. So I had to

316
00:21:46,024 --> 00:21:49,478
incorporate Dell Helm chart in our terraform code base

317
00:21:49,644 --> 00:21:53,174
and GitLab was totally new to me. I didn't know

318
00:21:53,212 --> 00:21:56,806
GitLab at all before that project, so I really had to

319
00:21:56,908 --> 00:22:00,826
rely on documentation a lot since my

320
00:22:00,848 --> 00:22:04,282
tight schedule didn't really allowed me enough time to

321
00:22:04,336 --> 00:22:07,782
play with the system and do some trial and error. So documentation

322
00:22:07,846 --> 00:22:09,930
was very important in this aspect.

323
00:22:10,830 --> 00:22:13,738
But also since I had a tight schedule,

324
00:22:13,834 --> 00:22:17,934
I knew that I had to exercise some

325
00:22:17,972 --> 00:22:20,862
judgment and say okay, this is a must read right now,

326
00:22:20,916 --> 00:22:24,674
but this could wait. And that's why I put it in the section of

327
00:22:24,872 --> 00:22:28,978
read more in the planning doc. So documentation is

328
00:22:28,984 --> 00:22:32,850
very important and the documentation was what allowed me to

329
00:22:33,000 --> 00:22:37,074
choose some aspects of implementation as well.

330
00:22:37,272 --> 00:22:40,674
So only because of the implementation of the documentation,

331
00:22:40,722 --> 00:22:44,198
sorry, I decided to use DB version X which was

332
00:22:44,284 --> 00:22:48,066
not a DB version that was default in the chart to prevent

333
00:22:48,098 --> 00:22:51,770
later maintenance because they were that using that version will

334
00:22:51,920 --> 00:22:55,194
a allow me to upgrade to

335
00:22:55,232 --> 00:22:58,634
version 14 which we used. And it also

336
00:22:58,672 --> 00:23:02,154
supports backward compatibility which is awesome for me. So only

337
00:23:02,192 --> 00:23:05,438
because I read the documentation I knew that this is possible. So that's why I

338
00:23:05,444 --> 00:23:09,214
did it. Another aspect is that I haven't implemented the

339
00:23:09,252 --> 00:23:13,002
high availability feature because it wasn't Ga yet, it wasn't

340
00:23:13,066 --> 00:23:15,790
in a general availability state.

341
00:23:15,940 --> 00:23:19,746
So I toggled in this telephone code. I set it

342
00:23:19,768 --> 00:23:23,234
up to false, but I wrote a comment saying that please check it

343
00:23:23,272 --> 00:23:27,022
later on because as sres we know that high availability

344
00:23:27,086 --> 00:23:30,680
is very important, especially for something crucial like

345
00:23:31,290 --> 00:23:34,866
managing code base. So I just added a comment

346
00:23:34,898 --> 00:23:38,310
saying that please check it out later on and once it is g eight

347
00:23:38,380 --> 00:23:41,734
please enable this feature. And why I didn't enable

348
00:23:41,782 --> 00:23:45,974
it before because I don't want to rock the boat too much and introduce

349
00:23:46,022 --> 00:23:49,814
instability to the environment about monitoring.

350
00:23:49,862 --> 00:23:54,026
So monitoring wasn't really baked for their kubernetes offering.

351
00:23:54,058 --> 00:23:57,562
So I basically did it myself. I went through the metrics documentation

352
00:23:57,626 --> 00:24:01,280
and added dashboard according to what I thought was important

353
00:24:01,970 --> 00:24:06,162
and alerts based on those metrics. And also fun

354
00:24:06,216 --> 00:24:10,066
fact, GitHub changed their official documentation due to

355
00:24:10,088 --> 00:24:13,134
an issue we raised during the implementation.

356
00:24:13,182 --> 00:24:16,930
So they said on the documentation that

357
00:24:17,000 --> 00:24:20,086
set up limits, ABC and stuff like that, and that's that.

358
00:24:20,268 --> 00:24:23,334
And then I set up the limits and we had some

359
00:24:23,372 --> 00:24:27,666
issues. So that's why they changed the documentation and wrote

360
00:24:27,778 --> 00:24:31,466
something like for your own discretion and you

361
00:24:31,488 --> 00:24:35,386
need to test it out first and stuff like that. So it was nice

362
00:24:35,488 --> 00:24:38,966
to know that we had an impact on the GitLab official

363
00:24:38,998 --> 00:24:42,650
documentation. Okay, let's talk a bit about

364
00:24:42,720 --> 00:24:46,494
the training for the R D. Right? So GitLab was

365
00:24:46,532 --> 00:24:50,234
a new tool for the R D department. They didn't know GitLab

366
00:24:50,282 --> 00:24:54,138
at all. Also the glossary is different. They are used to pull requests

367
00:24:54,154 --> 00:24:57,822
and now they need to think about merge request because it was actually a category

368
00:24:57,886 --> 00:25:01,266
in GitLab. In the UI it was

369
00:25:01,288 --> 00:25:04,610
called merge request. So if you're not used to it, you could just

370
00:25:04,680 --> 00:25:08,258
overlook it when you're working with the UI.

371
00:25:08,354 --> 00:25:11,766
So they need to really be familiar with

372
00:25:11,788 --> 00:25:15,014
the tool. And basically I didn't want

373
00:25:15,052 --> 00:25:19,078
to spring it up on them and expect them to feel comfortable using

374
00:25:19,244 --> 00:25:22,794
GitLab from day one. So that's why I had

375
00:25:22,832 --> 00:25:26,314
a training session to go over the basics of

376
00:25:26,352 --> 00:25:29,946
GitLab. So the GitLab usage and main features and basically have

377
00:25:29,968 --> 00:25:33,358
them be familiar with the tool before they actually need to start using it.

378
00:25:33,444 --> 00:25:36,778
I also encourage them to play with GitLab itself on the dev environment

379
00:25:36,874 --> 00:25:40,238
and that way they can really feel safe that

380
00:25:40,324 --> 00:25:43,806
once on the doomsday they know what

381
00:25:43,828 --> 00:25:47,650
to do. I also created a GitLab onboarding doc

382
00:25:48,150 --> 00:25:52,146
with explanations how to change their local repocopy to work with

383
00:25:52,168 --> 00:25:55,282
the remote repo URL of GitLab. So yeah,

384
00:25:55,336 --> 00:25:58,806
you can find it online. But I really wanted to give

385
00:25:58,828 --> 00:26:02,134
them the sense of support, especially since they

386
00:26:02,172 --> 00:26:05,414
used to be each time something happened

387
00:26:05,452 --> 00:26:08,150
with BitBucket we said yeah BitBucket,

388
00:26:08,970 --> 00:26:11,818
our hands have died, we can't do anything about it.

389
00:26:11,904 --> 00:26:15,654
But since now we are using self hosted GitLab,

390
00:26:15,702 --> 00:26:19,500
everything is on us, right? So I wanted to give them the sense of support

391
00:26:20,190 --> 00:26:23,934
and know that anything that they need, we are here for

392
00:26:23,972 --> 00:26:28,254
them. So this document helped me do it because even I

393
00:26:28,292 --> 00:26:32,110
instructed them how to change the report. This was the first step

394
00:26:32,260 --> 00:26:35,910
towards this sense of support. And also in spirit

395
00:26:35,930 --> 00:26:39,282
of sense of support, I created a dedicated slack channel for the R

396
00:26:39,336 --> 00:26:42,930
D to ask questions and raise bugs and get support

397
00:26:43,000 --> 00:26:46,466
for all GitLab related issues. And I also put

398
00:26:46,488 --> 00:26:49,606
the GitLab issues that I've opened or found during the

399
00:26:49,628 --> 00:26:52,918
implementation that are relevant for them as a pinned message

400
00:26:53,004 --> 00:26:56,854
in the channel so they could follow up or escalate if

401
00:26:56,892 --> 00:27:00,866
needed and upvote the issues and stuff like that. So that's

402
00:27:00,978 --> 00:27:04,506
about the planning for the R D. So we talked

403
00:27:04,528 --> 00:27:08,250
about the R D. Let's talk a bit about my team, right? Because I

404
00:27:08,320 --> 00:27:12,210
am leaving the company. But even if I didn't left the company, I don't

405
00:27:12,230 --> 00:27:16,734
want to let them feel or

406
00:27:16,772 --> 00:27:20,302
think that hey, this is GitLab stuff. So only Heli is managing me.

407
00:27:20,356 --> 00:27:23,754
No, I wanted to make sure that they are not hopeless

408
00:27:23,802 --> 00:27:28,062
and they know that they can manage it as much as me. So the competition

409
00:27:28,126 --> 00:27:31,742
was really I think that I covered everything that I could possibly

410
00:27:31,806 --> 00:27:35,666
think of, from how to deploy a new version of GitLab to how

411
00:27:35,688 --> 00:27:39,430
to manage and replace certificates and the summer integration

412
00:27:39,930 --> 00:27:43,526
and what information to provide to GitLab support when you

413
00:27:43,548 --> 00:27:46,946
open a ticket for them. So you would avoid the ping pong

414
00:27:46,978 --> 00:27:50,154
and get the fast resolution as fast

415
00:27:50,192 --> 00:27:54,122
as possible. So everything that I could I covered in this

416
00:27:54,176 --> 00:27:58,154
documentation and I did the handoff with training

417
00:27:58,272 --> 00:28:02,266
to go over documentation and answer the questions because I

418
00:28:02,288 --> 00:28:05,886
really want to make sure that they feel at ease and they know what to

419
00:28:05,908 --> 00:28:09,230
do once I leave the company and they can take it

420
00:28:09,300 --> 00:28:13,150
from there. Okay, so I talked

421
00:28:13,220 --> 00:28:16,674
about a lot of things, right? Planning and implementation and

422
00:28:16,712 --> 00:28:20,386
things specific to GitLab, things not specific to

423
00:28:20,408 --> 00:28:24,706
GitLab and stuff like that. So let's see

424
00:28:24,888 --> 00:28:28,686
what in general we can learn from this whole ordeal

425
00:28:28,798 --> 00:28:33,126
that really for me it was hectic, one month and a half for everything

426
00:28:33,228 --> 00:28:36,294
was pretty tight and I had a lot of things to consider.

427
00:28:36,412 --> 00:28:40,086
So let's see what I learned from it. And maybe it's stuff

428
00:28:40,108 --> 00:28:43,420
that you can take from it for your project as well.

429
00:28:43,870 --> 00:28:47,606
So planning is a must, especially for long term project.

430
00:28:47,638 --> 00:28:51,066
You have to plan ahead, understand the company's needs and why

431
00:28:51,088 --> 00:28:55,194
this project is important and use this information to try and foresee

432
00:28:55,242 --> 00:28:59,082
any bottlenecks and plan how you are going to tackle them upfront.

433
00:28:59,226 --> 00:29:02,606
Derive deadlines based on all information that

434
00:29:02,628 --> 00:29:06,466
you gathered and then execute accordingly. Because if you structure your

435
00:29:06,488 --> 00:29:10,370
plan, then it will help you achieve things in a timely manner and

436
00:29:10,440 --> 00:29:14,606
literally progress according to plan updates.

437
00:29:14,638 --> 00:29:18,334
And collaboration matters. It doesn't matter if you're working on a project

438
00:29:18,392 --> 00:29:22,722
alone or with others, you should always involve and bring the stakeholders

439
00:29:22,786 --> 00:29:26,358
up to speed. Other managing or team leaders that are

440
00:29:26,444 --> 00:29:30,454
affected by this project and stuff like that, including regular updates and

441
00:29:30,492 --> 00:29:33,814
raising flags on issues and

442
00:29:33,932 --> 00:29:37,402
brainstorming and collaboration matters .2 so

443
00:29:37,456 --> 00:29:41,194
it's always best to showcase the technical implementation you're planning to your

444
00:29:41,232 --> 00:29:44,366
team members and manager, first of all to

445
00:29:44,388 --> 00:29:48,014
make them familiarize themselves with the project or

446
00:29:48,052 --> 00:29:51,262
with the system because they need to support it later on,

447
00:29:51,396 --> 00:29:55,626
but also to see if they have remarks and brave aspects

448
00:29:55,658 --> 00:29:59,218
that you might have not thought of. So we want

449
00:29:59,224 --> 00:30:02,434
to make sure that the implementation that we have will be as best

450
00:30:02,472 --> 00:30:06,718
and suitable for your use case as possible. So that's why brainstorming

451
00:30:06,734 --> 00:30:08,850
and collaboration really matters.

452
00:30:09,690 --> 00:30:13,030
Trade offs are a given. You will always have a lot of things to consider

453
00:30:13,100 --> 00:30:16,806
and take into account. I really had a lot of things to

454
00:30:16,988 --> 00:30:20,290
think about and juggle and decide.

455
00:30:20,370 --> 00:30:24,726
This is important. Right now this is not important. So deadlines

456
00:30:24,758 --> 00:30:28,442
and mandatory and nice to have implementations and a lot of things

457
00:30:28,576 --> 00:30:31,962
you need to make sure you execute based on that because

458
00:30:32,016 --> 00:30:35,166
yeah, it's fun to play with the cool features that the

459
00:30:35,188 --> 00:30:38,894
UI offers, but if you're under a tight schedule, you should focus on

460
00:30:38,932 --> 00:30:40,640
what matters. Right now,

461
00:30:41,010 --> 00:30:44,598
documentation really is key, both documentation

462
00:30:44,634 --> 00:30:48,878
that you read while implementing technical and logical aspects of the projects.

463
00:30:48,974 --> 00:30:52,962
So it will help you take the right decisions and also defend those

464
00:30:53,016 --> 00:30:57,010
decisions whenever needed, but also the documentation that you leave behind

465
00:30:57,080 --> 00:31:00,930
because you want to make sure you share your knowledge and preserve the knowledge

466
00:31:01,010 --> 00:31:04,280
because you don't want to be single point of failure, right?

467
00:31:04,650 --> 00:31:08,262
You want to be able to go to a vacation and not have a call

468
00:31:08,316 --> 00:31:11,078
saying, hey, we have an issue with GitLab, please help. Right?

469
00:31:11,244 --> 00:31:14,060
So the quotation is very important,

470
00:31:14,430 --> 00:31:18,298
and that's why I think that it should be given

471
00:31:18,384 --> 00:31:22,442
the priority that it deserves. And finally, last but really

472
00:31:22,496 --> 00:31:25,806
not least, change is hard when people are used

473
00:31:25,828 --> 00:31:29,034
to working in a certain way. You need to take that into consideration

474
00:31:29,082 --> 00:31:32,670
when you plan your project, especially if it's a migration project.

475
00:31:32,740 --> 00:31:36,474
So you need to make sure you leave time for training and familiarization

476
00:31:36,602 --> 00:31:39,726
with the tool. So thank you. I know that

477
00:31:39,748 --> 00:31:43,294
I spoke at times fast, and I covered a lot of things because

478
00:31:43,332 --> 00:31:46,902
I really believe in giving value. So if you have any

479
00:31:46,956 --> 00:31:50,518
other questions about managing a technical project or specific

480
00:31:50,604 --> 00:31:54,534
questions about GitLab implementation, you're more than welcome

481
00:31:54,652 --> 00:31:58,246
to reach out by mail, LinkedIn, or Twitter, and I'll be more than

482
00:31:58,268 --> 00:31:59,860
happy to help you. Thank you.

