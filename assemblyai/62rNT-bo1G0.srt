1
00:00:27,890 --> 00:00:31,574
Hello. Hello and welcome to my tab, the best code reviews before we even

2
00:00:31,612 --> 00:00:34,274
start, I want to tell you that there is also an entry on my blog

3
00:00:34,322 --> 00:00:38,102
discussing these ideas. So if you want to

4
00:00:38,156 --> 00:00:40,934
share your thoughts, you can find me not only on social media, but you can

5
00:00:40,972 --> 00:00:43,958
also comment on that blog. Just a few words about me before we begin.

6
00:00:44,044 --> 00:00:47,046
My name is Victorenta. I'm a Java champion and I am deeply in love with

7
00:00:47,068 --> 00:00:50,478
refactoring, sequential design and unit testing. I even founded a

8
00:00:50,484 --> 00:00:53,742
community in which to have a place where to share my passion about this.

9
00:00:53,796 --> 00:00:57,370
It's called Buckley Software craftsmanship Community and it's currently one of the biggest

10
00:00:57,450 --> 00:01:00,398
developer communities in my country. Feel free to join us if you want. We are

11
00:01:00,404 --> 00:01:03,566
on meetup and I'm trying to engage every month with people in the

12
00:01:03,588 --> 00:01:07,166
community to discuss different topics regarding these things that

13
00:01:07,188 --> 00:01:10,366
I really love. I have a website. On my website you can find a collection

14
00:01:10,398 --> 00:01:13,938
of my best talks, the blog and my trainings because that's what I do for

15
00:01:13,944 --> 00:01:18,030
a living. I am an independent trainer, teaching of course, Java, the Java

16
00:01:18,110 --> 00:01:22,322
standard, technical stuff like spring hibernate, functional programming and Java performance,

17
00:01:22,386 --> 00:01:26,646
plus thumbprints that don't have anything to do with Java in particular, but I

18
00:01:26,668 --> 00:01:29,526
do it like design pattern, spring or the new index. Exactly the things that I

19
00:01:29,548 --> 00:01:32,706
love. I have the great pleasure to also be

20
00:01:32,748 --> 00:01:35,946
discussing with hundreds and hundreds of teams throughout the world. In case

21
00:01:35,968 --> 00:01:39,466
you want to contact me for joining, here's my website and you should know

22
00:01:39,488 --> 00:01:42,766
that I'm also on social media. The easiest way to reach me out is on

23
00:01:42,788 --> 00:01:46,394
Twitter. Right? So how do we start coding?

24
00:01:46,442 --> 00:01:49,502
How do one learn to program? Don't really learn to program

25
00:01:49,556 --> 00:01:53,022
by talking to others. By chatting to others? No, the only

26
00:01:53,076 --> 00:01:56,782
way we ever learn to program is by locking ourselves

27
00:01:56,846 --> 00:02:00,546
up in our room and begging our head on the keyboard for

28
00:02:00,568 --> 00:02:04,354
hours and hours, many painful nights. This is the default way that

29
00:02:04,392 --> 00:02:07,702
people start learning. But you see, then you come to work

30
00:02:07,756 --> 00:02:11,046
and the first thing you realize is that you have a team.

31
00:02:11,148 --> 00:02:14,630
And then after you managed to make it work,

32
00:02:14,700 --> 00:02:18,422
ehoo, you've done your job, you've done your task, then your

33
00:02:18,476 --> 00:02:21,480
lead or someone from your team called you for a code review.

34
00:02:22,010 --> 00:02:25,242
The first time you ever hear this, you're like confused. What do you mean?

35
00:02:25,296 --> 00:02:28,106
What does it mean to have a code review? Mean like someone else will look

36
00:02:28,128 --> 00:02:31,226
on my code. But why? You have to realize that we as

37
00:02:31,248 --> 00:02:35,354
a professional have this tendency of being not the most social beings

38
00:02:35,402 --> 00:02:38,218
that you can ever find, because this is how education pushes.

39
00:02:38,314 --> 00:02:41,882
This is how education builds us, basically, like, we learn programming

40
00:02:41,946 --> 00:02:45,774
alone. So then the first time you realize that you want material and you should

41
00:02:45,812 --> 00:02:49,118
work together, you're like, what? But then you go to the code review,

42
00:02:49,204 --> 00:02:52,446
and I don't want to go into details about the first code review that you

43
00:02:52,468 --> 00:02:55,942
will ever get, but let's push time forward. For four

44
00:02:55,996 --> 00:02:59,174
years, you are already coding and you have a spec. You receive the event,

45
00:02:59,212 --> 00:03:01,606
you have received a spec, right? The first thing you do, I hope you at

46
00:03:01,628 --> 00:03:04,786
least read it, 20% of it at least. Then you start coding,

47
00:03:04,818 --> 00:03:08,038
right? How do you read? How do you really do your job? You copy it

48
00:03:08,044 --> 00:03:11,738
from there, copy from there, from stack, overflow, google a bit, copy some code that

49
00:03:11,744 --> 00:03:14,780
you've seen there. Then maybe after several hours after,

50
00:03:15,390 --> 00:03:19,418
you have this feeling that you've seen that method doing

51
00:03:19,504 --> 00:03:23,450
pretty much what you want right now. You've seen that method several days ago,

52
00:03:23,520 --> 00:03:26,574
but where was that? You can't find it. And what do you do? Yeah,

53
00:03:26,612 --> 00:03:30,302
you end up to be pasting a bit of code and so on, and the

54
00:03:30,356 --> 00:03:33,902
feeling that you don't really remember what's there,

55
00:03:33,956 --> 00:03:37,566
but you make it work maybe several hours after you find the method

56
00:03:37,598 --> 00:03:41,326
that you were looking for. But then it's harder

57
00:03:41,358 --> 00:03:45,070
to adjust what you do. You leave it like that. What the heck? It's safer

58
00:03:45,150 --> 00:03:48,594
to leave it like that. And this keeps going

59
00:03:48,632 --> 00:03:51,526
for several hours, maybe days, and at the end, and in the end, you think

60
00:03:51,548 --> 00:03:55,222
you're done, but deep down inside, you know that it's not quite the best work

61
00:03:55,276 --> 00:03:58,834
you could ever do, right? And then someone else on the team, let's imagine

62
00:03:58,882 --> 00:04:02,442
your lead, will call you for a code reviews. You know what will follow,

63
00:04:02,496 --> 00:04:06,426
you anticipate what will come next. So then from

64
00:04:06,448 --> 00:04:10,186
now on, let me switch to the best code review I ever

65
00:04:10,288 --> 00:04:13,802
saw that I ever took part of. It's amazing. One of

66
00:04:13,936 --> 00:04:17,738
my old friends, Aline, with his name, with one of the older,

67
00:04:17,834 --> 00:04:22,462
more than 15 years of experience, one of the most experienced developers in

68
00:04:22,516 --> 00:04:25,918
his company, and he was conducting such code reviews. Like I will describe for

69
00:04:25,924 --> 00:04:28,786
you now, when Ali called you for a code review, he will invite you to

70
00:04:28,808 --> 00:04:32,734
sit here to have a seat. Arm chair, a very comfortable chair he kept

71
00:04:32,782 --> 00:04:35,602
right next to him. He was not sitting on that. He was sitting on some

72
00:04:35,656 --> 00:04:39,362
chair, like, not very comfy. But this is the chair for the person

73
00:04:39,416 --> 00:04:42,646
who was coming to for a code review. And then he offered you some tea

74
00:04:42,748 --> 00:04:46,918
if you didn't fancy. Probably he will offer you some chocolate or whatever he

75
00:04:46,924 --> 00:04:50,290
knows that you love. When you were sipping your tea,

76
00:04:50,380 --> 00:04:54,314
he jumps right straight to the code and it's clear that he already was

77
00:04:54,352 --> 00:04:58,122
looking at that code for a while before calling you. And he

78
00:04:58,176 --> 00:05:01,834
starts by suggesting different ideas. Different. How about

79
00:05:01,872 --> 00:05:04,170
doing that little improvement? And you say,

80
00:05:04,240 --> 00:05:08,126
yeah, that's a good idea. And then immediately after Alim does it,

81
00:05:08,148 --> 00:05:11,118
typing it in front of you, he was Alphabet to mention. He was one of

82
00:05:11,124 --> 00:05:14,890
the fastest coders I ever had the honor to work with and very, very bright,

83
00:05:15,050 --> 00:05:18,546
with great vision before it could be implemented, and so

84
00:05:18,568 --> 00:05:22,366
on and so on. Different improvements, you would agree, because they were typically good ideas.

85
00:05:22,398 --> 00:05:25,346
You just didn't follow that in that perspective. But then at some point he would

86
00:05:25,368 --> 00:05:28,838
suggest something that, what about this other change? Then you say,

87
00:05:28,924 --> 00:05:32,454
I'm not really convinced. Right after Ali makes sure

88
00:05:32,492 --> 00:05:35,926
that you really understood what he

89
00:05:35,948 --> 00:05:38,870
was saying with the benefits of his suggestion,

90
00:05:40,730 --> 00:05:44,346
when he's absolutely sure that you got what he meant, then if

91
00:05:44,368 --> 00:05:47,766
you still don't agree, he said, okay, just lie to him so he wouldn't

92
00:05:47,798 --> 00:05:51,846
push hard. He shouldnt try to convince you about his opinions,

93
00:05:51,958 --> 00:05:55,582
if I may say so, the experience was a very interesting

94
00:05:55,636 --> 00:05:59,454
one. And this kept going for several minutes, maybe 15 minutes,

95
00:05:59,492 --> 00:06:03,614
maybe even half an hour, up to a point in which the code was almost

96
00:06:03,732 --> 00:06:07,390
ready to be pushed. Almost. The tests weren't yet fixed.

97
00:06:07,470 --> 00:06:10,866
Yeah, he commented out several parts of the code, but the main idea was clear

98
00:06:10,888 --> 00:06:14,642
for you, was crystal clear for you. And along the way, along those

99
00:06:14,696 --> 00:06:18,790
little refactoring steps, as he cleaned up the code here, it became apparent

100
00:06:19,370 --> 00:06:22,706
that refactoring, that bigger refactoring,

101
00:06:22,738 --> 00:06:26,310
that deeper refactoring that you thought you saw

102
00:06:26,380 --> 00:06:29,574
right before finishing your task, there was this idea that

103
00:06:29,612 --> 00:06:32,986
popped in your head. What about that? You couldn't really see

104
00:06:33,008 --> 00:06:36,666
the big picture. But now following those little refactorings of

105
00:06:36,688 --> 00:06:39,626
Aline, it's crystal clear. And you see it right there in front of you.

106
00:06:39,648 --> 00:06:42,282
That's the change that you need to do. You need to break that path into

107
00:06:42,336 --> 00:06:46,094
and split that in separate. It's now obvious. So you are like,

108
00:06:46,132 --> 00:06:49,674
okay, okay, Aleen, go do that and we'll finish. Arlene tries

109
00:06:49,722 --> 00:06:53,150
to start sketching that thing that you suggest and

110
00:06:53,220 --> 00:06:58,002
sees that you are now full of that

111
00:06:58,136 --> 00:06:59,940
joy of discovery. Yeah,

112
00:07:01,350 --> 00:07:05,442
that's what I was about to discover several hours ago. And then.

113
00:07:05,496 --> 00:07:09,446
Exactly then, exactly when you were

114
00:07:09,468 --> 00:07:12,950
begging to Aline, please commit, please commit. I will continue from here. Exactly then.

115
00:07:13,020 --> 00:07:16,982
Exactly then Aleen reverts everything, reverse everything

116
00:07:17,036 --> 00:07:21,020
and tells you, no, you do it. Can you imagine the energy that

117
00:07:22,190 --> 00:07:25,398
with which you leave that little discussion

118
00:07:25,414 --> 00:07:28,906
of yours. Yeah, you're like, come on, I've seen it done in

119
00:07:28,928 --> 00:07:32,650
front of my eyes. I can do this. And you do it from scratch again

120
00:07:32,720 --> 00:07:36,666
yourself this time. Okay. You don't remember all the little steps Alin performed.

121
00:07:36,698 --> 00:07:40,186
Okay. Okay. You miss some of the little steps, but the big picture

122
00:07:40,218 --> 00:07:43,326
is there and you end up doing that bigger refactoring that

123
00:07:43,348 --> 00:07:46,798
you wanted to do. It takes you several hours. Yeah, there are best to adjust.

124
00:07:46,894 --> 00:07:50,126
There are a little bit more complexity in there. But yeah, you managed

125
00:07:50,158 --> 00:07:53,490
to make it yourself. Now let's put all this,

126
00:07:53,560 --> 00:07:56,994
first of all, I want to .1 thing. Do you realize what Aleen just did

127
00:07:57,032 --> 00:08:01,062
when he saw that code review was too complex to solve in little lines of

128
00:08:01,196 --> 00:08:05,046
comments or an email? What he did called you up for

129
00:08:05,068 --> 00:08:08,750
a little ad hoc per programming session because nothing best a pair

130
00:08:08,770 --> 00:08:12,314
programming. However, how would you do that in this time?

131
00:08:12,352 --> 00:08:14,810
Imagine that your code reviews, reviews keeps,

132
00:08:15,390 --> 00:08:18,474
doesn't start his camera. What happens

133
00:08:18,512 --> 00:08:21,882
is that you stare for those minutes to his profile image, which is this.

134
00:08:21,936 --> 00:08:25,318
What do you feel as the reviewee of the guy who was the author

135
00:08:25,334 --> 00:08:28,686
of the code when you are talking to a dog because the reviewer doesn't want

136
00:08:28,708 --> 00:08:31,726
to start up his camera. That's not fair, right? So the first thing you do,

137
00:08:31,828 --> 00:08:34,978
the first thing you do, you start up video for any complex code review that

138
00:08:34,984 --> 00:08:38,894
you have to perform. You use nonverbal gestures, you use mimic,

139
00:08:39,022 --> 00:08:42,894
because this way you can make things softer. You can convey

140
00:08:42,942 --> 00:08:46,354
your hesitation about some topic. You can be very firm on other

141
00:08:46,392 --> 00:08:50,226
topics. You can interact you as a reviews can see the

142
00:08:50,248 --> 00:08:53,702
reactions of your reviews. You can see his hesitation. So any code review,

143
00:08:53,756 --> 00:08:57,126
any complex code review that you have to perform these days, please, please start up

144
00:08:57,148 --> 00:09:00,780
your video call and be very attentive to the face of the one who.

145
00:09:01,390 --> 00:09:04,474
Very attentive. Now, what is a bit,

146
00:09:04,672 --> 00:09:08,458
there's one interesting thing here. What is the goal of a code review? What is

147
00:09:08,464 --> 00:09:11,530
the attitude with which you should start code review?

148
00:09:11,680 --> 00:09:15,886
What are you after? You the code reviewer. Let's assume you

149
00:09:15,908 --> 00:09:19,914
shouldn't be looking for errors. You shouldn't start off reviewing

150
00:09:19,962 --> 00:09:23,774
code with this attitude of, oh, I know, I will find some

151
00:09:23,812 --> 00:09:26,980
terrible bug in there. That's not the point. That's not the point.

152
00:09:27,830 --> 00:09:31,634
What you should strive instead is to understand, because the code review

153
00:09:31,752 --> 00:09:35,470
is actually a best of readability, of understandability,

154
00:09:35,550 --> 00:09:38,902
how easy it is for me to understand that. That's the ultimate test. Someone else

155
00:09:38,956 --> 00:09:42,422
who looks at that code and has to understand it. So you should strive on

156
00:09:42,476 --> 00:09:46,502
understanding that finding bugs or

157
00:09:46,556 --> 00:09:49,846
holes in the implementation is just a side effect. Your focus as a

158
00:09:49,868 --> 00:09:53,514
code reviews is understanding. You're basically learning the solution. And also

159
00:09:53,552 --> 00:09:56,874
for the reviewee, your goal is also to learn something from

160
00:09:56,912 --> 00:10:00,346
this review. Now, there will be some recurring topics in

161
00:10:00,448 --> 00:10:03,834
those code reviews, some things that you find yourself telling over

162
00:10:03,872 --> 00:10:07,262
and over again. What would you do with them? A bit strange to repeat yourself

163
00:10:07,316 --> 00:10:10,750
every time. But one typical idea, one good idea,

164
00:10:10,820 --> 00:10:14,754
is to include those in what I call a team design meeting. Now I

165
00:10:14,792 --> 00:10:18,222
see, unfortunately very few teams doing on a regular basis

166
00:10:18,286 --> 00:10:22,782
such meetings. What is a team design meeting? It's not retrospective

167
00:10:22,926 --> 00:10:26,290
in its perfect sense. It's not a project

168
00:10:26,360 --> 00:10:29,954
grooming session, although it might be somehow related. No, it's a meeting

169
00:10:30,002 --> 00:10:33,330
focused just on design, on coding styles and practices

170
00:10:33,410 --> 00:10:36,594
and ideas. And that's a perfect place to raise

171
00:10:36,642 --> 00:10:40,166
up the topics that were discovered or

172
00:10:40,188 --> 00:10:43,658
debated during the past several code code reviews. So every time

173
00:10:43,744 --> 00:10:47,274
you see the reviewer that there is a topic which the others

174
00:10:47,312 --> 00:10:50,954
in the team might benefit, what I will do is I will extract from that

175
00:10:50,992 --> 00:10:54,320
code, from that code sample. That's a thing that makes it interesting,

176
00:10:54,690 --> 00:10:58,094
that is really worthy of being shared. And maybe doing

177
00:10:58,132 --> 00:11:01,374
it during a brown bag session, or even doing these official team

178
00:11:01,412 --> 00:11:04,578
design meetings of 30 minutes 1 hour every two weeks, I would share

179
00:11:04,744 --> 00:11:08,642
that code sample, that distilled code sample with

180
00:11:08,696 --> 00:11:12,286
others, maybe from other teams including, and share my findings

181
00:11:12,318 --> 00:11:15,650
and debate them. Debate it with. That's a place to discuss

182
00:11:15,800 --> 00:11:19,206
the recurring topic so that everyone can have the chance to

183
00:11:19,308 --> 00:11:22,690
say his opinion and share thoughts about that. Unfortunately,

184
00:11:22,770 --> 00:11:26,438
however, there are many code reviews. You do find some terrible issues

185
00:11:26,604 --> 00:11:29,782
like comparing string with equal with equal equal. Or comparing long

186
00:11:29,916 --> 00:11:33,718
the rapper class, right? Long big big L L comparing them with equal equal,

187
00:11:33,814 --> 00:11:37,530
which is terrible. What the heck? What's happening now?

188
00:11:37,680 --> 00:11:41,502
You have to realize one thing. You was a code reviewer. You are by

189
00:11:41,556 --> 00:11:45,246
definition frustrated. You are from start supposed to

190
00:11:45,268 --> 00:11:49,406
understand the thoughts of another designer to reverse engineer their train of

191
00:11:49,428 --> 00:11:53,274
thought. You are by default in a passive aggressive

192
00:11:53,322 --> 00:11:57,562
stance. You are by default in a stance of being overwhelmed

193
00:11:57,706 --> 00:12:00,498
in a sense, or at least, I don't know, annoyed by the code that you

194
00:12:00,504 --> 00:12:03,954
have to understand. It's not your code. It's not your thoughts in there.

195
00:12:03,992 --> 00:12:07,090
So when you are in this stance and you find a terrible issue,

196
00:12:07,160 --> 00:12:10,794
many people just explode. What's wrong with you? Who hired

197
00:12:10,862 --> 00:12:14,006
you? Don't ever do that. If something that you never expected him to do

198
00:12:14,028 --> 00:12:17,318
that, please grant him a second chance. Call him, let him look at the code

199
00:12:17,404 --> 00:12:20,934
maybe help him a bit and let him discover the issue. Don't say

200
00:12:20,972 --> 00:12:24,506
much, give him a second shot. Now there are some cases in

201
00:12:24,528 --> 00:12:28,282
which the author because it's new to the team or is just maybe

202
00:12:28,416 --> 00:12:32,382
inexperienced. In that case, you should not hesitate to switch to a more guided review

203
00:12:32,436 --> 00:12:35,966
style like a more teaching style. And when

204
00:12:35,988 --> 00:12:39,982
you see a horror finding like a terrible issue, you should

205
00:12:40,036 --> 00:12:43,502
talk to the author and see

206
00:12:43,556 --> 00:12:46,242
his reaction. If you didn't expect that,

207
00:12:46,296 --> 00:12:49,602
then that's a place where you should insist. Dive more in

208
00:12:49,656 --> 00:12:52,866
and see and explain the issues. Oh, and one last thing.

209
00:12:53,048 --> 00:12:56,402
Never confuse opinions of fact. Never. You as a reviewer,

210
00:12:56,466 --> 00:13:00,530
try to force your reviewee

211
00:13:00,610 --> 00:13:03,734
into your mindset, into your coding style. You have

212
00:13:03,772 --> 00:13:07,026
different minds. Not a developer writes the identical code. You shouldn't

213
00:13:07,058 --> 00:13:11,180
write the identical code. But it's hard really to know what our opinions are.

214
00:13:12,990 --> 00:13:16,394
You have to be very experienced to know what are the things

215
00:13:16,592 --> 00:13:19,946
which really impede the maintainability of the code, which are the things

216
00:13:19,968 --> 00:13:23,254
that you really annoy you. Which are the things which cause bugs

217
00:13:23,302 --> 00:13:26,414
or cause issues with understanding the code and focus on those.

218
00:13:26,452 --> 00:13:29,966
Don't mind if whether he accepts the constant or not from

219
00:13:30,148 --> 00:13:33,374
typically there are so many examples of not very

220
00:13:33,412 --> 00:13:36,798
relevant coding guidelines. If you now to summarize a

221
00:13:36,804 --> 00:13:40,446
bit, there are some practical tips for some more technical tips for the reviewee

222
00:13:40,478 --> 00:13:43,838
for the author. Now of course, work hard, but work hard until you're

223
00:13:43,854 --> 00:13:46,590
proud of it, until you are really very proud,

224
00:13:46,670 --> 00:13:49,926
until that code becomes worth being added to your cv as

225
00:13:49,948 --> 00:13:52,806
a code set. And of course, never forget to run sonar with it. Before you

226
00:13:52,828 --> 00:13:56,738
commit code, there are some tools which should check for the trivial

227
00:13:56,914 --> 00:14:00,266
scenarios or errors or bugs. Ask for infined code reviews for

228
00:14:00,288 --> 00:14:03,990
those more complex because the whole discussion was only about complex

229
00:14:04,070 --> 00:14:07,590
features, complex stories that require complex code reviews.

230
00:14:07,670 --> 00:14:11,126
For those complex development efforts, ask for in flight

231
00:14:11,158 --> 00:14:15,214
reviews, ask for the personnel more senior developer probably to

232
00:14:15,252 --> 00:14:18,986
throw an eye on some code that you have right now on your development

233
00:14:19,018 --> 00:14:22,462
branch. Let's say in your feature branch. Ask for intermediate code review.

234
00:14:22,516 --> 00:14:25,910
Then do micro commits, very short, tiny microcommits,

235
00:14:25,930 --> 00:14:29,906
several lines of code, several classes maybe that is. And always, always make

236
00:14:29,928 --> 00:14:33,138
sure that you commit large scale refactoring that

237
00:14:33,144 --> 00:14:36,386
you've done with automatic refactoring tool like intelligent. It gives

238
00:14:36,408 --> 00:14:39,202
you to rename a package that will impact thousands of classes.

239
00:14:39,266 --> 00:14:42,946
Maybe commit those separately from the other places

240
00:14:42,978 --> 00:14:46,866
that you've manually edited, the boolean conditions, or all those places

241
00:14:46,898 --> 00:14:50,066
that can easier that are easier

242
00:14:50,098 --> 00:14:53,706
to cause bug because you can keep the attention of your reviewer to

243
00:14:53,728 --> 00:14:57,626
what really matters, to the places in which you use your brain to some

244
00:14:57,808 --> 00:15:02,240
large scale automatic refactor. I mean, these are very unlikely to break. And also

245
00:15:03,650 --> 00:15:06,874
sketch a little diagram, a little supporting diagram.

246
00:15:06,922 --> 00:15:15,118
There are several tools you can use for that. There is one which is a

247
00:15:15,124 --> 00:15:19,138
whiteboard that you can write on and you can write it collaboratively. You can basically

248
00:15:19,224 --> 00:15:22,958
share this to other teams and you can write it together. Or there are UML

249
00:15:23,054 --> 00:15:27,118
websites that you can basically describe the UML

250
00:15:27,294 --> 00:15:31,046
in a text and then you can generate the UML diagram based on

251
00:15:31,068 --> 00:15:34,550
that text document a bit. The more complex things

252
00:15:34,620 --> 00:15:38,294
that you submit for review. Now, in general, some code

253
00:15:38,332 --> 00:15:41,878
review tips. Be kind and be humble on both sides. You as a reviewer and

254
00:15:41,884 --> 00:15:45,306
you as a reviews, never make it or take it. You might face at some

255
00:15:45,328 --> 00:15:48,682
point some reviewer which is very aggressive for any reason

256
00:15:48,736 --> 00:15:52,380
that might be. Don't take it personal, never take it. Always focus on learning.

257
00:15:52,830 --> 00:15:56,030
What have I learned? How did it help me become better?

258
00:15:56,100 --> 00:15:59,726
Have a constructive attitude and again focus on learning. There are a lot of

259
00:15:59,748 --> 00:16:02,842
distracted opinions and if you have doubts,

260
00:16:02,906 --> 00:16:06,638
submit that idea, that discussion to a good design or

261
00:16:06,644 --> 00:16:10,302
to a brown box question. Ask the opinion of the other developer.

262
00:16:10,366 --> 00:16:14,242
And also something that Zalin did sometimes allow imperfect code

263
00:16:14,296 --> 00:16:18,294
to be accept imperfect code. He found more

264
00:16:18,332 --> 00:16:21,782
important to keep that developer from on his side,

265
00:16:21,836 --> 00:16:25,222
to maintain a positive attitude towards

266
00:16:25,276 --> 00:16:28,930
that developer as opposed to imposing his coaching style.

267
00:16:29,010 --> 00:16:32,398
Bruce Toby do tolerate imperfect. And of course Aleen

268
00:16:32,434 --> 00:16:36,406
had different expectations. If someone very experienced submitted

269
00:16:36,438 --> 00:16:39,722
some garbage, he wouldn't scream of course. But if someone less

270
00:16:39,776 --> 00:16:42,890
experienced would submit the same thing, he kindly,

271
00:16:42,970 --> 00:16:46,286
softly might even actually get to accept some of them.

272
00:16:46,468 --> 00:16:50,286
Because it's more important to keep a team straight than to have the best

273
00:16:50,468 --> 00:16:53,726
coding style. And of course, keep in mind

274
00:16:53,748 --> 00:16:57,582
that petrolming is always better. It's a bi directional communication redirectional learning

275
00:16:57,636 --> 00:17:02,586
channel. So always keep whenever

276
00:17:02,618 --> 00:17:05,878
you face a complex coding again

277
00:17:05,964 --> 00:17:09,366
and do find me on the social media. My social channels are on

278
00:17:09,388 --> 00:17:11,814
the website in case you want to reach me. Thanks a lot, have a nice

279
00:17:11,852 --> 00:17:12,130
conference.

