1
00:00:34,850 --> 00:00:38,594
Hi all and welcome to this presentation regarding managing

2
00:00:38,642 --> 00:00:42,406
secrets with confidence. A comprehensive guide to using Hashicorp vault in

3
00:00:42,428 --> 00:00:46,146
Kubernetes clusters let me introduce myself. I'm Alain Lompo.

4
00:00:46,178 --> 00:00:50,030
I'm a senior software developer. I'm a DevOps and I'm security consultant in

5
00:00:50,060 --> 00:00:53,354
the public sector. I've been working with software development technologies

6
00:00:53,402 --> 00:00:57,114
for 20 years now. I've been doing also training and consulting.

7
00:00:57,242 --> 00:01:00,426
Let's see our agenda. First we'll be talking about handling

8
00:01:00,458 --> 00:01:04,234
sensitive resources in Kubernetes. Then I will introduce briefly

9
00:01:04,282 --> 00:01:08,030
Hashicorp vault and after that we'll deep dive into its architecture

10
00:01:08,190 --> 00:01:11,790
before seeing how we can integrate vault with Kubernetes.

11
00:01:11,950 --> 00:01:15,534
And then we'll see some real world scenarios. After that I will do some demos

12
00:01:15,582 --> 00:01:19,074
and we'll wrap it up. First, let's talk about handling

13
00:01:19,122 --> 00:01:22,646
sensitive resources. When it comes to handling sensitive resources in

14
00:01:22,668 --> 00:01:26,550
Kubernetes clusters, there are a few questions we need to ask ourselves.

15
00:01:26,970 --> 00:01:30,874
First, what are we to store and then what

16
00:01:30,912 --> 00:01:35,158
tools are available to do that? How are the assets stored

17
00:01:35,254 --> 00:01:38,726
and how do the application access the stored assets?

18
00:01:38,918 --> 00:01:42,906
In terms of types of sensitive resources, we can talk about credentials

19
00:01:42,938 --> 00:01:44,986
such as password API keys,

20
00:01:45,098 --> 00:01:48,810
certificates such as TLS and GPG keys,

21
00:01:48,970 --> 00:01:52,806
or also application configurations such as runtime arguments.

22
00:01:52,938 --> 00:01:56,802
Of course, depending on our application, there may be many

23
00:01:56,856 --> 00:02:00,770
more various data that

24
00:02:00,840 --> 00:02:03,790
are considered sensitive in our particular context.

25
00:02:03,950 --> 00:02:07,286
Regarding storing sensitive information, we should ask

26
00:02:07,308 --> 00:02:11,202
ourselves what are the available secret management storage solutions?

27
00:02:11,346 --> 00:02:15,202
How is sensitive asset intended to be used, what application framework

28
00:02:15,266 --> 00:02:19,414
is being used and what are the options for injecting external

29
00:02:19,462 --> 00:02:23,494
configurations? When it comes to kubernetes, the natural default

30
00:02:23,542 --> 00:02:26,966
is to think of using Kubernetes secrets resource since it's

31
00:02:26,998 --> 00:02:29,210
included in every Kubernetes distribution,

32
00:02:30,990 --> 00:02:34,334
but it provide only some form of protection since

33
00:02:34,452 --> 00:02:38,302
the values are not encrypted, but instead they are simply base 64

34
00:02:38,436 --> 00:02:42,522
encoded, which means that anybody that can access them can also decode

35
00:02:42,586 --> 00:02:46,354
them. To create a Kubernetes secret resource in

36
00:02:46,392 --> 00:02:50,306
a Kubernetes cluster I can use a manifest like the following and

37
00:02:50,328 --> 00:02:53,986
use a tool like Kubectl to create it into

38
00:02:54,088 --> 00:02:57,762
my cluster. Now let's introduce Hashicorp Vault.

39
00:02:57,906 --> 00:03:01,314
Hashicorp Vault is one of the solutions out there for managing

40
00:03:01,362 --> 00:03:05,158
sensitive information. It's one

41
00:03:05,164 --> 00:03:09,014
of my favorite for various reasons. First, Hashicorp Vault

42
00:03:09,062 --> 00:03:12,486
is a very popular open source platform that helps

43
00:03:12,518 --> 00:03:17,034
us manage secret it helps us store these secrets, centralize its

44
00:03:17,232 --> 00:03:21,102
access control, as well as ensure compliance with various other

45
00:03:21,156 --> 00:03:24,574
security standards. In terms of its

46
00:03:24,612 --> 00:03:28,394
high level features, I can say that it simplifies secret

47
00:03:28,442 --> 00:03:32,486
management. It helps protect sensitive data. We can integrate it with various

48
00:03:32,538 --> 00:03:35,646
cloud and infrastructure platforms. It provides also a unified

49
00:03:35,678 --> 00:03:39,490
and secure solution for secret management. Now let's see.

50
00:03:39,560 --> 00:03:43,458
Hashicorp Vault architecture this

51
00:03:43,544 --> 00:03:46,798
present slide shows the main component of

52
00:03:46,824 --> 00:03:50,146
Hashicorp vault, and we'll first talk about the encryption

53
00:03:50,178 --> 00:03:53,270
layer called the barrier. When Hashicorp vault start,

54
00:03:53,340 --> 00:03:56,726
it tries to write to the storage backend, but since the

55
00:03:56,748 --> 00:04:01,142
storage backend is outside the barrier, it is considered untrusted.

56
00:04:01,206 --> 00:04:04,490
Therefore, the data must

57
00:04:04,560 --> 00:04:08,038
first be encrypted before being written to the storage backend,

58
00:04:08,214 --> 00:04:12,250
so that even if the storage backend is compromised,

59
00:04:13,890 --> 00:04:17,520
the hacker may not be able to use

60
00:04:18,210 --> 00:04:21,550
these compromised data, since they will remain encrypted until

61
00:04:21,620 --> 00:04:24,930
vault itself decrypt them at the start.

62
00:04:25,000 --> 00:04:28,814
Vault find itself in a sealed set and it must be unsealed before any operation

63
00:04:28,862 --> 00:04:32,674
can be performed on it. Unsealing vault is done by

64
00:04:32,712 --> 00:04:35,250
providing the unsealed keys.

65
00:04:35,770 --> 00:04:39,222
At initialization, Vault generates an encryption key. It's used to protect

66
00:04:39,276 --> 00:04:40,600
all vault data,

67
00:04:43,050 --> 00:04:46,518
and the encryption key itself is protected by a root key that is

68
00:04:46,524 --> 00:04:49,926
stored alongside all the other vault data. But it's encrypted

69
00:04:49,958 --> 00:04:53,466
itself by another mechanism called the unsealed key.

70
00:04:53,648 --> 00:04:58,022
This unsealed key is handled using Xiaomi's secret sharing algorithm,

71
00:04:58,166 --> 00:05:01,914
in which the unsealed key is splitted in a certain number of

72
00:05:01,952 --> 00:05:05,594
shards, among which there's a required amount of this shard

73
00:05:05,642 --> 00:05:09,406
that are needed in order to reconstruct the unsealed key

74
00:05:09,508 --> 00:05:13,006
and use it to decrypt the root key. Once that

75
00:05:13,028 --> 00:05:16,866
is done and vaults retrieve the encryption key, it secrets the

76
00:05:16,888 --> 00:05:20,722
data in the storage backend. It enters then in an

77
00:05:20,776 --> 00:05:24,082
unsilled state, and once it's in the unsealed state,

78
00:05:24,136 --> 00:05:28,194
it can load the configured audit device authentication method

79
00:05:28,242 --> 00:05:31,654
and secret engines. Let's see then how to

80
00:05:31,692 --> 00:05:35,346
secure the audit device. The authentication method, and the secret engines.

81
00:05:35,458 --> 00:05:39,650
They are all sensitive components.

82
00:05:39,730 --> 00:05:43,166
They are stored in vaults, and that means they are protected by ACL,

83
00:05:43,298 --> 00:05:46,838
and any change to them will be tracked by audit logs,

84
00:05:46,934 --> 00:05:50,038
and only users with permission can modify them.

85
00:05:50,224 --> 00:05:53,450
Now, let's talk about the role of the core component

86
00:05:53,610 --> 00:05:57,120
of hashicorp vaults. Among others,

87
00:05:57,650 --> 00:06:01,342
it process the traffic between

88
00:06:01,396 --> 00:06:04,638
the API and the other component of the system,

89
00:06:04,804 --> 00:06:08,142
but it's also enforced access control list, and it ensures

90
00:06:08,206 --> 00:06:11,902
audit logging is done. In terms of authentication mechanism,

91
00:06:11,966 --> 00:06:15,214
vaults is very flexible and present

92
00:06:15,352 --> 00:06:18,760
various authentication mechanisms such as using

93
00:06:20,410 --> 00:06:24,034
login and password, using GitHub, using app role,

94
00:06:24,082 --> 00:06:28,154
using LDAP, et cetera. Vault use policies in

95
00:06:28,192 --> 00:06:32,150
order to grant access to protected sensitive

96
00:06:32,230 --> 00:06:36,182
information, and these policies

97
00:06:36,246 --> 00:06:39,766
actually are simply named access control list rules.

98
00:06:39,878 --> 00:06:43,238
For example, we have the root policy, that's a built in policy, and it

99
00:06:43,264 --> 00:06:47,210
permit access to all resources. We can create any number of policies,

100
00:06:47,290 --> 00:06:50,414
and it allows us a fine grained control over the

101
00:06:50,452 --> 00:06:54,066
various paths that we are trying to protect. Vault operates also in

102
00:06:54,088 --> 00:06:58,018
an allowed access mode, which means that any access to

103
00:06:58,104 --> 00:07:01,506
a specific path will be denied unless there's an

104
00:07:01,528 --> 00:07:04,900
explicit policy granting the required access.

105
00:07:05,290 --> 00:07:09,814
Client tokens are the default and preferred mechanism for

106
00:07:09,932 --> 00:07:13,794
authentication used by Vault, and once a request

107
00:07:13,842 --> 00:07:18,174
has been authenticated, client token

108
00:07:18,322 --> 00:07:21,834
will be generated and it will be associated with

109
00:07:21,872 --> 00:07:25,558
it. Also a list of policies, as well as the user identity,

110
00:07:25,734 --> 00:07:29,194
through which the user can then in his

111
00:07:29,232 --> 00:07:32,766
subsequent request, access the

112
00:07:32,788 --> 00:07:35,674
sensitive information he would like to retrieve.

113
00:07:35,802 --> 00:07:39,306
Therefore, the client token is used for making future requests

114
00:07:39,418 --> 00:07:43,022
in an approach similar to the authentication

115
00:07:43,086 --> 00:07:46,180
cookies used in web application.

116
00:07:46,630 --> 00:07:50,190
But client token may also have an associate lease,

117
00:07:50,270 --> 00:07:53,678
which means that they may need to be renewed

118
00:07:53,694 --> 00:07:57,254
periodically to avoid invalidation. Talking a bit

119
00:07:57,292 --> 00:08:00,710
about the request authorization flow,

120
00:08:02,490 --> 00:08:06,150
the authentication request will be made by providing the client token,

121
00:08:06,490 --> 00:08:09,930
and the client token will be used to verify that client.

122
00:08:10,590 --> 00:08:14,540
That way, it can be ensured that the request is authorized and

123
00:08:16,030 --> 00:08:19,990
the associate policies will be used to

124
00:08:20,160 --> 00:08:23,534
authorize the client request. Now let's talk about the

125
00:08:23,572 --> 00:08:27,546
secret engine. The secret engine is a very flexible component

126
00:08:27,578 --> 00:08:31,406
of hashicorp vault. It's used to store and to

127
00:08:31,508 --> 00:08:34,320
encrypt sensitive data.

128
00:08:35,810 --> 00:08:39,490
In terms of its function. It receives a set of data, it will process

129
00:08:39,560 --> 00:08:42,594
them, and it will return a certain result.

130
00:08:42,792 --> 00:08:47,006
It can cover various tasks,

131
00:08:47,198 --> 00:08:50,946
but at its core it will be used to return the secrets.

132
00:08:51,058 --> 00:08:54,214
And once it returns a secret, the core will register it

133
00:08:54,332 --> 00:08:57,654
with the expiration manager. It may attach a lease id

134
00:08:57,692 --> 00:09:01,046
to it, and the client will use this lease id to renew or revoke

135
00:09:01,078 --> 00:09:04,934
their secrets. If the client ever allowed that lease

136
00:09:04,982 --> 00:09:08,566
to expire, the expiration manager will automatically

137
00:09:08,678 --> 00:09:12,254
revoke that secret. Let's see now.

138
00:09:12,372 --> 00:09:15,230
The audit broker and the audit devices.

139
00:09:15,650 --> 00:09:19,326
We talk about them in relationship with the core because the

140
00:09:19,348 --> 00:09:23,054
core will log the request and response to the audit broker, and thus

141
00:09:23,102 --> 00:09:26,610
they will be distributed to the various configured audit devices.

142
00:09:27,270 --> 00:09:31,026
In terms of other vaults activities outside

143
00:09:31,128 --> 00:09:34,366
of the request flow that we have seen, the core performs

144
00:09:34,398 --> 00:09:37,594
specific background activities such as list management,

145
00:09:37,742 --> 00:09:41,142
but it also handles specific partial failure case by using

146
00:09:41,196 --> 00:09:44,550
writehead logging with a rollback manager. But this is something

147
00:09:44,620 --> 00:09:48,238
completely transparent to the user. It's done within the core. Now let's

148
00:09:48,274 --> 00:09:51,574
talk about various aspects of integrating vault

149
00:09:51,622 --> 00:09:54,826
with Kubernetes and first, why is it important to

150
00:09:54,848 --> 00:09:57,686
consider that first, because containers are ephemeral,

151
00:09:57,798 --> 00:10:01,790
they are not the best place to store and manage their own secrets.

152
00:10:03,330 --> 00:10:06,794
Vault provide the possibility to centralize the secret

153
00:10:06,842 --> 00:10:10,302
management. It offers access control

154
00:10:10,356 --> 00:10:13,582
and auditing and it offers also integration with other tools.

155
00:10:13,646 --> 00:10:17,186
And there are various approaches to integrating vault, each one with their

156
00:10:17,208 --> 00:10:20,434
own benefits and limitation. Globally speaking,

157
00:10:20,552 --> 00:10:24,462
when I consider using vaults to secure sensitive

158
00:10:24,526 --> 00:10:27,986
information, I'm considering

159
00:10:28,178 --> 00:10:32,166
a use case where a

160
00:10:32,188 --> 00:10:35,926
given application can provide access to sensitive information to

161
00:10:35,948 --> 00:10:41,034
its users. But first, this sensitive information should

162
00:10:41,072 --> 00:10:45,078
be stored by the security team or other privileged user

163
00:10:45,174 --> 00:10:48,666
in Hashicorp vaults and then when the user make a

164
00:10:48,688 --> 00:10:52,602
request to the sensitive information, his credentials,

165
00:10:52,666 --> 00:10:56,654
his claims might be verified, the application will

166
00:10:56,692 --> 00:11:01,450
access Hashicorp vault and request to receive the secrets presenting

167
00:11:01,610 --> 00:11:05,810
the claims of the credentials of this user. Once they are verified,

168
00:11:07,270 --> 00:11:10,674
the application will be granted the access and the user can

169
00:11:10,712 --> 00:11:14,226
access the sensitive information he was looking for.

170
00:11:14,408 --> 00:11:18,478
In terms of integration of Hashicorp vault with Kubernetes Hashicorp

171
00:11:18,494 --> 00:11:22,790
Vault can also function as a KMS key management server

172
00:11:23,210 --> 00:11:26,738
through the help of an adapter that presents itself as a Hashicorp vaults

173
00:11:26,834 --> 00:11:30,282
KMS plugin for Kubernetes. Other than that,

174
00:11:30,336 --> 00:11:34,438
one of the common ways to using Hashicorp vault

175
00:11:34,614 --> 00:11:37,946
to inject secret into pod is through the

176
00:11:38,048 --> 00:11:42,302
Hashicorp vault agent injector that

177
00:11:42,356 --> 00:11:46,106
will be used to mutate an existing

178
00:11:46,138 --> 00:11:49,934
Kubernetes pod and inject into it

179
00:11:49,972 --> 00:11:53,642
a sidecar container that will be responsible

180
00:11:53,706 --> 00:11:56,906
for handling access to the secrets from Hashicorp

181
00:11:56,938 --> 00:12:00,466
fault. This is very interesting because this allows for

182
00:12:00,488 --> 00:12:03,762
example a legacy application to be able

183
00:12:03,816 --> 00:12:07,510
to have its secret management

184
00:12:08,170 --> 00:12:12,146
handled by Hashicorp vault even without being aware of Hashicorp vault

185
00:12:12,178 --> 00:12:16,162
itself. Now let's talk a bit about Kubernetes authentication

186
00:12:16,226 --> 00:12:19,666
backend. They are used to enable pod and service to authenticate

187
00:12:19,698 --> 00:12:23,210
with vault and so to be able to

188
00:12:23,280 --> 00:12:28,182
obtain secret dynamically after their authorization

189
00:12:28,246 --> 00:12:32,414
have been verified and in this case a

190
00:12:32,452 --> 00:12:35,280
token will be returned upon success.

191
00:12:37,490 --> 00:12:41,434
This following slide presents a bit what type of command

192
00:12:41,482 --> 00:12:45,342
I could use as security manager

193
00:12:45,406 --> 00:12:49,726
to enable authentication Kubernetes authentication

194
00:12:49,918 --> 00:12:53,410
with Hashicorp vaults as well as to configure

195
00:12:54,890 --> 00:12:58,722
its endpoint. Among the benefit of using Kubernetes

196
00:12:58,786 --> 00:13:00,150
authentication backend,

197
00:13:02,090 --> 00:13:06,834
there will be no more need for manual token distribution among

198
00:13:06,882 --> 00:13:09,990
ports as well as manual token management.

199
00:13:10,150 --> 00:13:14,122
I could access a tight control of access based

200
00:13:14,176 --> 00:13:18,166
on ports, identity and permission and I have a seamless integration

201
00:13:18,198 --> 00:13:21,642
with Kubernetes. It is also possible to confidence

202
00:13:21,706 --> 00:13:25,630
automatic token renewal and I can manage

203
00:13:25,700 --> 00:13:29,722
my secrets in a secure and scalable fashion in a Kubernetes

204
00:13:29,786 --> 00:13:33,642
environment. Now let's talk about using custom resource

205
00:13:33,706 --> 00:13:36,934
definition, which is one of the important aspect.

206
00:13:37,002 --> 00:13:40,610
Also related to integrating Hashicorp vault with Kubernetes.

207
00:13:41,830 --> 00:13:46,450
Custom resource definition are a way to specify additional

208
00:13:46,530 --> 00:13:50,374
resources into the Kubernetes API so

209
00:13:50,412 --> 00:13:54,402
that I can use these additional resources

210
00:13:54,466 --> 00:13:59,210
along with classic resource used in standard Kubernetes API.

211
00:13:59,710 --> 00:14:03,034
Not only can I create new custom resources, but I can

212
00:14:03,072 --> 00:14:06,922
also modify them and in this case through the

213
00:14:06,976 --> 00:14:10,958
operator it will detect the change event and

214
00:14:11,124 --> 00:14:14,814
will adjust the current state. Otherwise in case

215
00:14:14,852 --> 00:14:19,402
of conflicts it will launch

216
00:14:19,466 --> 00:14:23,378
a reconciliation process. This is an example of

217
00:14:23,464 --> 00:14:26,626
custom resource definition that may look a bit

218
00:14:26,728 --> 00:14:30,882
more complicated, but based on simple things like

219
00:14:30,936 --> 00:14:34,370
managing my server and archiving

220
00:14:35,210 --> 00:14:39,762
these actions, the benefits of using custom resource definition

221
00:14:39,906 --> 00:14:43,910
is simply that they are native Kubernetes integration.

222
00:14:44,330 --> 00:14:48,122
They are configured declaratively, they offer

223
00:14:48,176 --> 00:14:51,450
scalability as well as extensibility. All right,

224
00:14:51,520 --> 00:14:55,034
now let's see a bit of world scenarios that we could

225
00:14:55,072 --> 00:14:59,290
use with Hashicorp vaults. We actually

226
00:14:59,360 --> 00:15:02,654
have a lot of possible scenarios. I just

227
00:15:02,692 --> 00:15:05,934
selected a few that are relevant to what

228
00:15:05,972 --> 00:15:09,674
I'm doing currently. One of them will be storing

229
00:15:09,722 --> 00:15:13,134
application secrets. Another could be integrating

230
00:15:13,182 --> 00:15:17,374
with Kubernetes service accounts so as to grant

231
00:15:17,422 --> 00:15:20,930
this service account dynamic

232
00:15:21,270 --> 00:15:25,090
configured access to sensitive resources.

233
00:15:25,770 --> 00:15:29,922
Another scenario would be centralizing secret

234
00:15:29,986 --> 00:15:33,798
management through a centralized secret store

235
00:15:33,964 --> 00:15:37,722
that could be used with various teams without

236
00:15:37,776 --> 00:15:41,862
any interference and without any risk of secrets

237
00:15:41,926 --> 00:15:45,562
leaking. Another option will be to implement role based

238
00:15:45,616 --> 00:15:49,082
access control for Kubernetes secrets. Other than that,

239
00:15:49,136 --> 00:15:53,440
I can provide secrets to legacy app using Hashicorp vault and

240
00:15:54,610 --> 00:15:58,074
vault agent injector approach with sidecar containers.

241
00:15:58,202 --> 00:16:01,406
Or I could use Hashicorp vaults to manage SSI key

242
00:16:01,428 --> 00:16:05,330
for Kubernetes clusters as well as integrating with

243
00:16:05,400 --> 00:16:09,042
other security and compliance tools. Now let's see

244
00:16:09,096 --> 00:16:12,706
a simple demo of injecting secrets into a

245
00:16:12,728 --> 00:16:16,070
pod with hashicorp vault. So because

246
00:16:16,140 --> 00:16:19,958
the steps of my demos are

247
00:16:20,124 --> 00:16:24,482
a bit extensive, I have simply created

248
00:16:24,546 --> 00:16:28,490
slide of the demos instead of doing everything manually.

249
00:16:29,390 --> 00:16:33,370
So the first step of this demo will be to enable

250
00:16:35,070 --> 00:16:39,098
a secret engine on my Hashicorp vault server. I could do it with

251
00:16:39,184 --> 00:16:42,554
the following command vault secrets

252
00:16:42,602 --> 00:16:46,106
enable and I give a pass. Everything is a pass with hashicorp vaults.

253
00:16:46,218 --> 00:16:50,286
In this case my pass is internal and the

254
00:16:50,308 --> 00:16:55,126
secret engine is Kvv

255
00:16:55,258 --> 00:16:58,370
two. And in case of success I have a message

256
00:16:58,440 --> 00:17:02,062
that looks like the following. Next I would create a secrets

257
00:17:02,126 --> 00:17:06,038
at a specific path and here I can see that I'm using

258
00:17:06,124 --> 00:17:09,974
vault kv put and I give the path to my

259
00:17:10,012 --> 00:17:14,038
secret and since it's a key value secret engine

260
00:17:14,204 --> 00:17:18,050
I can then give the various keys and the values.

261
00:17:18,210 --> 00:17:21,446
In this case the first key is username, the value db

262
00:17:21,478 --> 00:17:25,066
read only username. The second key is password and the value is

263
00:17:25,088 --> 00:17:28,614
db secret password once I have created the secret

264
00:17:28,662 --> 00:17:32,486
I can verify that the secret has been effectively created

265
00:17:32,678 --> 00:17:36,074
using vault kv get and I give the

266
00:17:36,112 --> 00:17:39,790
pod and it will give me various information

267
00:17:39,940 --> 00:17:43,534
but at the end I will see the

268
00:17:43,572 --> 00:17:47,214
state of my keys and values and I could

269
00:17:47,332 --> 00:17:51,166
verify that both the username and the password has

270
00:17:51,188 --> 00:17:54,362
been effectively created to confidence

271
00:17:54,426 --> 00:17:59,090
kubernetes authentication I have similar commands

272
00:17:59,170 --> 00:18:02,722
vault enable kubernetes to enable using Kubernetes

273
00:18:02,786 --> 00:18:06,614
authentication and then I could use vault write

274
00:18:06,812 --> 00:18:10,774
give it part to the configuration where I could configure

275
00:18:10,822 --> 00:18:14,506
the Kubernetes host. Once I've done that I

276
00:18:14,528 --> 00:18:18,314
need to create a policy that

277
00:18:18,352 --> 00:18:22,482
will grant certain number of capabilities.

278
00:18:22,566 --> 00:18:25,726
In this case I just need read capabilities to be able to read the

279
00:18:25,748 --> 00:18:29,054
secret at the specified part so it will

280
00:18:29,092 --> 00:18:32,790
look like what we see in this slide.

281
00:18:32,970 --> 00:18:37,330
Vault policy write then I specify

282
00:18:37,830 --> 00:18:40,914
the name of the policy that I want to

283
00:18:40,952 --> 00:18:44,434
write inside I have which pad should

284
00:18:44,472 --> 00:18:48,286
be the target of this policy and which capabilities I'm

285
00:18:48,318 --> 00:18:51,750
giving. In this case only the read capability.

286
00:18:52,250 --> 00:18:56,230
After I've done that I will create a Kubernetes authentication role

287
00:18:56,650 --> 00:19:00,822
and I define the role using odd Kubernetes

288
00:19:00,886 --> 00:19:04,042
role internal app pad and

289
00:19:04,096 --> 00:19:07,226
what's important in the role is as we can see what

290
00:19:07,248 --> 00:19:11,022
I have highlighted here to which service account

291
00:19:11,156 --> 00:19:14,874
it is bound. The service account is called internal

292
00:19:14,922 --> 00:19:18,366
app and to which namespace we'll be using the

293
00:19:18,388 --> 00:19:21,626
default namespace and then which policies

294
00:19:21,738 --> 00:19:25,620
are associated with this role. The internal policy

295
00:19:26,150 --> 00:19:29,620
that we created. Internal app policy that we created before.

296
00:19:30,230 --> 00:19:34,174
Now what I need to do is to create the corresponding service account defined

297
00:19:34,222 --> 00:19:37,494
here as internal app. So I could

298
00:19:37,532 --> 00:19:40,998
use Kubectl to create that service

299
00:19:41,084 --> 00:19:44,806
account and once this is done I could

300
00:19:44,988 --> 00:19:49,180
test it on a simple application like what we see right here,

301
00:19:49,550 --> 00:19:53,274
my demo app. And what we could notice with this demo app

302
00:19:53,312 --> 00:19:56,794
is I'm using a service account name the

303
00:19:56,832 --> 00:19:59,660
service account given before internal app.

304
00:19:59,970 --> 00:20:03,280
So I can see now that I have created the demo app,

305
00:20:03,890 --> 00:20:07,502
its container is running alongside the

306
00:20:07,556 --> 00:20:12,634
other vault containers, the vault server here

307
00:20:12,772 --> 00:20:16,926
with name vault zero and the agent injector.

308
00:20:17,118 --> 00:20:21,394
Now let's inject secrets into the

309
00:20:21,432 --> 00:20:24,578
pod. To do that I will patch my

310
00:20:24,664 --> 00:20:28,902
previous deployment using this

311
00:20:28,956 --> 00:20:32,470
new manifest. And all we can see here

312
00:20:32,540 --> 00:20:35,794
is that by in dispatching I'm simply adding

313
00:20:35,922 --> 00:20:46,826
a bunch of annotations that are all prefixed with hashicorp.com

314
00:20:47,008 --> 00:20:50,686
and then I have various properties associated with this

315
00:20:50,788 --> 00:20:54,138
prefix agent injects through which role I'm

316
00:20:54,154 --> 00:20:58,366
using internal app and then I give the part to

317
00:20:58,548 --> 00:21:01,674
the secret. I use Kubectl

318
00:21:01,722 --> 00:21:05,522
patch to patch my previous deployment with this

319
00:21:05,576 --> 00:21:09,074
new manifest and then I can verify that the

320
00:21:09,112 --> 00:21:12,898
secret can now be accessed. All right,

321
00:21:12,984 --> 00:21:14,500
last but not least,

322
00:21:17,130 --> 00:21:21,442
Hashicorp vault can also be used in the context

323
00:21:21,506 --> 00:21:25,650
of CI CD pipelines.

324
00:21:25,810 --> 00:21:29,930
And as you can see here, it's used in combination with various other tools

325
00:21:30,510 --> 00:21:33,610
such as GiT,

326
00:21:34,750 --> 00:21:38,582
as well as sealed secrets and Argo CD

327
00:21:38,646 --> 00:21:42,606
that are used generally in

328
00:21:42,628 --> 00:21:46,090
the GitHub's approach or in CI CD pipelines.

329
00:21:46,250 --> 00:21:49,326
In this case, all we are trying

330
00:21:49,348 --> 00:21:52,754
to do is use

331
00:21:52,792 --> 00:21:56,626
seal secrets tool to encrypt the

332
00:21:56,648 --> 00:22:00,290
secrets before storing them in my repositories.

333
00:22:00,870 --> 00:22:03,950
And once these changes are done to the repositories,

334
00:22:04,030 --> 00:22:08,194
Argo CD will be able to detect the change and trigger the pipelines.

335
00:22:08,322 --> 00:22:11,906
And we can see that one step here is doing is it applies

336
00:22:11,938 --> 00:22:16,594
and decrypt the secrets. And then the secrets will be stored

337
00:22:16,642 --> 00:22:20,138
in vault and then they will be consumed over half the tp and

338
00:22:20,144 --> 00:22:24,346
they will be injected with CSI driver into the port

339
00:22:24,528 --> 00:22:28,054
so that at the end the port can receive

340
00:22:28,102 --> 00:22:31,822
the secrets in an automated fashion to

341
00:22:31,876 --> 00:22:35,678
wrap it up. I would say Hashicorp vaults is really a very interesting

342
00:22:35,764 --> 00:22:39,454
secret management platform

343
00:22:39,652 --> 00:22:43,650
for handling sensitive secret for kubernetes,

344
00:22:43,990 --> 00:22:47,874
not only for Kubernetes but as well as for other platform.

345
00:22:47,992 --> 00:22:52,414
It integrates very well with various

346
00:22:52,462 --> 00:22:56,386
platforms, it integrates very well with kubernetes.

347
00:22:56,578 --> 00:23:00,934
It allows us to

348
00:23:00,972 --> 00:23:04,966
perform secret management for various scenarios, not only what we have seen in

349
00:23:04,988 --> 00:23:09,474
this presentation, but many more use cases such as database

350
00:23:09,522 --> 00:23:12,822
credentials or certificate management and many more.

351
00:23:12,876 --> 00:23:16,326
So I will simply say I really enjoy using this

352
00:23:16,348 --> 00:23:20,606
platform and I will encourage you to try it and

353
00:23:20,628 --> 00:23:21,740
then thank you very much.

