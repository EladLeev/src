1
00:00:47,890 --> 00:00:51,034
Hi everyone, I'm Stefania Chaplin, a solutions architect

2
00:00:51,082 --> 00:00:55,786
at GitLab and I'm going to talk about implementing true devsecops

3
00:00:55,898 --> 00:00:59,838
with people, processes and technology a

4
00:00:59,844 --> 00:01:03,642
little bit. About me I'm Stefania Chaplin, I'm a solutions architect.

5
00:01:03,706 --> 00:01:07,054
I've been in the devsecops space for a very long time. You can

6
00:01:07,092 --> 00:01:10,398
find me on my different handles or email. I used to be

7
00:01:10,404 --> 00:01:13,706
a python developer. I'm part of OWAsp dev silos.

8
00:01:13,818 --> 00:01:16,690
When I'm not doing tech stuff, I quite like yoga,

9
00:01:16,770 --> 00:01:20,722
tropical plants, and I'm a big advocate for diversity

10
00:01:20,786 --> 00:01:23,574
in technology. But enough about me.

11
00:01:23,772 --> 00:01:27,334
So people, processes and technology,

12
00:01:27,452 --> 00:01:31,146
if you think of it as overlapping Venn diagram. So when

13
00:01:31,168 --> 00:01:34,266
we have people and process, what we end up

14
00:01:34,288 --> 00:01:37,942
with is we can scale. So if you think about manufacturing

15
00:01:38,006 --> 00:01:41,482
and services, they have a fairly standardized process. For example,

16
00:01:41,536 --> 00:01:44,750
if you're going to get a McDonald's, you're probably going to receive a similar

17
00:01:44,820 --> 00:01:47,918
service depending on where you are in the world,

18
00:01:48,004 --> 00:01:51,966
maybe different products, but that's a different story. When we

19
00:01:51,988 --> 00:01:55,610
have people and technology, that means we can innovate.

20
00:01:55,690 --> 00:01:58,914
So if we think about the World Wide Web and what it looked like in

21
00:01:58,952 --> 00:02:03,182
1994 to 2004 to 2014,

22
00:02:03,326 --> 00:02:06,838
it was very, very different. And it was a great combination of people,

23
00:02:06,924 --> 00:02:11,110
technology and innovation. The final one,

24
00:02:11,180 --> 00:02:14,040
when we have the bottom two, process and technology,

25
00:02:14,490 --> 00:02:18,454
this is where we can automate. So if we look at all the

26
00:02:18,492 --> 00:02:22,186
AI, machine learning, how we take our technology and

27
00:02:22,208 --> 00:02:25,642
we give it a process, all of a sudden we can get things done

28
00:02:25,696 --> 00:02:29,574
a lot faster. So what happens when you're

29
00:02:29,622 --> 00:02:33,310
missing certain elements? So for example, maybe you're not fast

30
00:02:33,380 --> 00:02:37,294
enough, maybe you've got a good process, good people,

31
00:02:37,412 --> 00:02:41,360
but maybe you're not using processes and technology efficient enough and you're not

32
00:02:41,970 --> 00:02:45,490
automating. If you're not efficient enough,

33
00:02:45,560 --> 00:02:49,154
then this probably means that you haven't quite standardized your people

34
00:02:49,192 --> 00:02:52,194
and process. So maybe you haven't found a way to scale yet.

35
00:02:52,312 --> 00:02:55,438
And okay, you're scaling, you're automating,

36
00:02:55,614 --> 00:02:58,530
but maybe you're not creating value.

37
00:02:58,680 --> 00:03:02,306
So this is where the people in technology is missing, and maybe you're lacking

38
00:03:02,338 --> 00:03:05,686
the innovation. So these are all things to think about as you think

39
00:03:05,708 --> 00:03:09,446
about your people, process and technology in

40
00:03:09,468 --> 00:03:12,982
terms of business impact. There's some great books I'd recommend.

41
00:03:13,116 --> 00:03:16,998
So Jean Kim, first the Phoenix project, then the recent sequel,

42
00:03:17,014 --> 00:03:20,910
the Unicorn project. And what we can see is improved

43
00:03:21,570 --> 00:03:25,406
information flow. We also have an increase in

44
00:03:25,428 --> 00:03:28,958
other areas. For example, culture. I talk about culture a

45
00:03:28,964 --> 00:03:32,810
lot because in terms of DevOps devsecops.

46
00:03:32,970 --> 00:03:36,546
It's not about a tool changing. You could buy all the tools and all

47
00:03:36,568 --> 00:03:40,066
the platforms in the world. If you haven't changed your culture and

48
00:03:40,088 --> 00:03:43,186
you're still operating in silos, you're going to have a little

49
00:03:43,208 --> 00:03:46,962
bit of a problem, similar with job satisfaction,

50
00:03:47,106 --> 00:03:50,146
identity of users, well, of employees,

51
00:03:50,258 --> 00:03:54,370
because ultimately you want to reduce the team burnout. Because if you're lacking

52
00:03:54,530 --> 00:03:58,610
scale, innovation or automation, people are probably

53
00:03:58,780 --> 00:04:02,890
potentially getting burnt out. There's going to be frustration.

54
00:04:03,470 --> 00:04:06,566
And once you start to fix this, you're going to get lower levels

55
00:04:06,598 --> 00:04:10,026
of deployment. And I say pain because it

56
00:04:10,048 --> 00:04:13,710
can be a bit painful sometimes, getting from code

57
00:04:13,780 --> 00:04:17,294
to production and also unplanned work. So when I mean

58
00:04:17,332 --> 00:04:20,506
this, I mean the red alerts, the firefighting,

59
00:04:20,618 --> 00:04:23,982
the problems that can arise when you have a very segregated

60
00:04:24,046 --> 00:04:26,786
tool chain and a lack of unison with people,

61
00:04:26,888 --> 00:04:30,210
processes and technology. So what we're looking

62
00:04:30,280 --> 00:04:33,954
for is software delivery performance and

63
00:04:33,992 --> 00:04:38,022
also organizational performance as well. I think the Unicorn project

64
00:04:38,076 --> 00:04:40,998
is a really good example of this. If you haven't read it, I would recommend

65
00:04:41,084 --> 00:04:44,710
it, because in the example, the protagonist,

66
00:04:45,530 --> 00:04:48,386
she joins a new team which is struggling.

67
00:04:48,498 --> 00:04:52,406
She's just trying to do a build, and that's a significant

68
00:04:52,438 --> 00:04:56,342
portion of the book. Just the process of her, like chasing

69
00:04:56,406 --> 00:04:59,980
support tickets, trying to find what scripts to run,

70
00:05:00,590 --> 00:05:04,858
the mix of languages, scripts, executables, et cetera.

71
00:05:04,954 --> 00:05:08,814
So if you have a culture or a process similar to

72
00:05:08,852 --> 00:05:12,534
that, you're going to end up with potentially a lot of frustration

73
00:05:12,682 --> 00:05:16,466
and lower software delivery and organizational performance than you

74
00:05:16,488 --> 00:05:20,846
would hope for. So Devsecops

75
00:05:20,958 --> 00:05:24,970
is transforming how companies deliver

76
00:05:25,070 --> 00:05:28,774
software. So when I say that, what I'm really

77
00:05:28,812 --> 00:05:32,946
talking about, security, changing vulnerabilities,

78
00:05:33,058 --> 00:05:36,178
everybody's favorite job, right? I used to be developer.

79
00:05:36,194 --> 00:05:39,466
I've worked in security a long time. I'm going to

80
00:05:39,488 --> 00:05:42,620
present to you two examples. So number one,

81
00:05:43,070 --> 00:05:47,894
what happens when you find 10,000 vulnerabilities

82
00:05:48,022 --> 00:05:51,162
at the end of your software development lifecycle?

83
00:05:51,226 --> 00:05:54,490
So maybe going into production,

84
00:05:54,570 --> 00:05:57,854
maybe it's in production, maybe it's just as you're about

85
00:05:57,892 --> 00:06:00,350
to hit deploy, when you're already behind schedule,

86
00:06:00,850 --> 00:06:04,298
behind budget, behind. Maybe there's a bit of tension

87
00:06:04,314 --> 00:06:07,422
in the room that's not when you want to discover these vulnerabilities,

88
00:06:07,486 --> 00:06:11,426
because especially if you've got any higher criticals, that could definitely be a

89
00:06:11,448 --> 00:06:14,820
showstopper. So I'm going to present to you another opportunity.

90
00:06:15,370 --> 00:06:19,570
What about if you empower each developer

91
00:06:19,650 --> 00:06:23,014
to deal with each one at the point

92
00:06:23,052 --> 00:06:26,834
where it's introduced, be proactive give developers

93
00:06:26,882 --> 00:06:30,106
the opportunity to play around, maybe in their

94
00:06:30,128 --> 00:06:34,314
own feature branch. Maybe they discover they're introducing a vulnerable library and

95
00:06:34,352 --> 00:06:38,406
then maybe they just upgrade. Maybe they use a different library,

96
00:06:38,518 --> 00:06:41,918
but having it as shifted left as possible,

97
00:06:42,084 --> 00:06:45,454
empowering your developers, a lot better I would

98
00:06:45,492 --> 00:06:48,910
say, than dealing with all of your problems right at the very

99
00:06:48,980 --> 00:06:52,318
end. So why do this?

100
00:06:52,404 --> 00:06:56,274
It's not just about the culture burnout, the happy

101
00:06:56,312 --> 00:06:59,938
fuzzy feelings that we as developer and security operations want

102
00:06:59,944 --> 00:07:02,900
to feel when we deploy. It's also about the cost.

103
00:07:03,430 --> 00:07:06,754
This comes from NIST, which is the

104
00:07:06,872 --> 00:07:10,166
very popular framework for security, and what

105
00:07:10,188 --> 00:07:13,734
we can see the cost to remediate. So say if we find a problem in

106
00:07:13,772 --> 00:07:17,366
requirements, maybe we're doing some threat modeling. That's going to be fairly easy.

107
00:07:17,468 --> 00:07:20,934
Well, easy, quick or easy to fix, because maybe we haven't quite

108
00:07:20,972 --> 00:07:24,970
started with still, we're still requirements gathering. Similarly, as you're coding,

109
00:07:25,710 --> 00:07:29,514
it's fairly easy to make code changes before you've started the

110
00:07:29,552 --> 00:07:33,342
development process. Once you start getting into

111
00:07:33,396 --> 00:07:36,362
testing, which is normally when we find vulnerabilities,

112
00:07:36,506 --> 00:07:40,266
that's going to still fixable. But what you can see in this chart

113
00:07:40,298 --> 00:07:44,338
with production, it's very expensive to fix in production. And also if

114
00:07:44,344 --> 00:07:48,786
you're fixing stuff in production, it means it's already out there. So your

115
00:07:48,808 --> 00:07:52,530
application and your business is vulnerable. So it's definitely

116
00:07:52,600 --> 00:07:56,520
worth taking a shift left approach to security.

117
00:07:57,770 --> 00:08:01,494
So what it doesn't mean because you

118
00:08:01,532 --> 00:08:04,694
don't want to look like this poor woman here, hand in your

119
00:08:04,732 --> 00:08:08,246
eyes, which I'm sure everyone has those days, but hopefully

120
00:08:08,278 --> 00:08:11,450
not with dead suck ups. So there's a lot

121
00:08:11,520 --> 00:08:14,630
of misconceptions and a couple of myths.

122
00:08:14,710 --> 00:08:18,170
So what we are not asking for, we do not

123
00:08:18,240 --> 00:08:21,726
want to disrupt workflow. So if

124
00:08:21,748 --> 00:08:25,614
you're asking developers to run scans outside of

125
00:08:25,652 --> 00:08:29,646
their existing workflow, that's going to cause a problem because you want to make

126
00:08:29,668 --> 00:08:32,480
it as seamless and transitional as possible.

127
00:08:32,850 --> 00:08:36,446
Similarly, expecting developers to understand what tools

128
00:08:36,478 --> 00:08:40,206
to run, when and how to interpret the results. This is a big knowledge

129
00:08:40,238 --> 00:08:43,874
gap we see because the way that developers DevOps talk

130
00:08:43,912 --> 00:08:48,366
and the way that they prioritize versus security and the lexicon

131
00:08:48,398 --> 00:08:51,160
that they use, there can be miscommunication sometimes.

132
00:08:52,410 --> 00:08:56,102
So when we think about security, this is kind of the old

133
00:08:56,156 --> 00:08:59,338
school approach and you can kind of see a loop. If we start at

134
00:08:59,344 --> 00:09:03,222
the top left at the repository, we commit, do CI

135
00:09:03,366 --> 00:09:06,618
merge, CD deploy, maybe you have a

136
00:09:06,624 --> 00:09:10,186
test environment, do some dynamic application security testing or

137
00:09:10,208 --> 00:09:13,582
maybe on the infrastructure, then the security team come along

138
00:09:13,636 --> 00:09:17,886
and then they're like right, here's your list of problems you

139
00:09:17,908 --> 00:09:21,454
can dismiss or create. The issue goes into the ticketing system

140
00:09:21,492 --> 00:09:24,786
and back to the development team. But you can see here,

141
00:09:24,968 --> 00:09:28,910
security is an afterthought and security as an afterthought

142
00:09:29,070 --> 00:09:32,418
is never a good idea because we really want to be

143
00:09:32,504 --> 00:09:35,010
releasing secure applications.

144
00:09:35,930 --> 00:09:38,870
So a more modern workflow,

145
00:09:39,290 --> 00:09:43,094
similar, same component, slightly different order. We have

146
00:09:43,132 --> 00:09:46,614
our repository on the top left, we commit our code, then it goes

147
00:09:46,652 --> 00:09:50,810
into the CI system. We have something called a review

148
00:09:50,880 --> 00:09:53,818
app. This is an ephemeral instance, which means you can do,

149
00:09:53,904 --> 00:09:57,606
a developer can do dynamic application security testing

150
00:09:57,718 --> 00:10:00,570
as part of their feature branch,

151
00:10:01,150 --> 00:10:04,686
what this also means, so they can do well, not only das a lot

152
00:10:04,708 --> 00:10:08,494
of other security that I'm going to talk about, but this gives the developer the

153
00:10:08,532 --> 00:10:12,174
chance to dismiss or create the issue, but they

154
00:10:12,212 --> 00:10:15,454
have a lot more control. If you think about as well the number of developers

155
00:10:15,502 --> 00:10:19,214
to security, you've got a lot more developers.

156
00:10:19,262 --> 00:10:23,326
If we could make every developer 1% better in security all of a sudden

157
00:10:23,358 --> 00:10:27,394
that would be a massive improvement. So now

158
00:10:27,512 --> 00:10:31,106
once you've got your CI and you have your merge request, so maybe you're merging

159
00:10:31,138 --> 00:10:35,078
back to your feature branch, CD will come along security team

160
00:10:35,164 --> 00:10:38,490
and at that point you have significantly lowered the number

161
00:10:38,560 --> 00:10:41,946
of potential vulnerabilities being released and you're able to

162
00:10:41,968 --> 00:10:44,570
deploy in a much safer manner.

163
00:10:45,310 --> 00:10:48,550
So advantages for the developer.

164
00:10:48,630 --> 00:10:52,666
So a couple of contextual, what do I mean by this? So within CI

165
00:10:52,698 --> 00:10:56,762
CD, everyone's accountable. For example, you could have a merge request

166
00:10:56,826 --> 00:11:00,494
pipeline for each developer. So this means that

167
00:11:00,532 --> 00:11:03,838
you've got your sandbox, you have the ability to play around, but you're

168
00:11:03,854 --> 00:11:08,702
not necessarily, I'm going to say polluting the main branch congruent

169
00:11:08,766 --> 00:11:12,018
with DevOps processes, so it gives you the chance to

170
00:11:12,024 --> 00:11:15,262
iterate. DevOps is very much about iterating.

171
00:11:15,406 --> 00:11:19,474
So if you can test with every code change, you can immediately

172
00:11:19,522 --> 00:11:22,822
see the cause and effect. So instead of on the first diagram where

173
00:11:22,876 --> 00:11:26,262
I might not know there's problems for a while, if we do

174
00:11:26,316 --> 00:11:29,686
take a more devsecops approach, we can integrated

175
00:11:29,718 --> 00:11:33,462
a lot faster. Similarly, having it integrated

176
00:11:33,526 --> 00:11:36,074
with DevOps tools, whether you're creating issues,

177
00:11:36,192 --> 00:11:40,394
autoremediation, you can get production feedback and efficient

178
00:11:40,442 --> 00:11:44,174
and automated. So what you're trying to do is

179
00:11:44,212 --> 00:11:48,154
eliminate work wherever possible, reduce context

180
00:11:48,202 --> 00:11:52,080
switching because no one wants context switching no matter who you are.

181
00:11:52,470 --> 00:11:56,610
And finally, less tracking and triaging because you've got more value added security

182
00:11:56,760 --> 00:12:00,354
and you have it at the right time. So really simplicity and

183
00:12:00,392 --> 00:12:03,790
integration win advantages

184
00:12:03,870 --> 00:12:07,186
for security. So there's some automation,

185
00:12:07,298 --> 00:12:11,618
it's consistent. They've also got earlier visibility into risks

186
00:12:11,714 --> 00:12:15,602
and remediation. If you could have a imagine

187
00:12:15,666 --> 00:12:18,946
this, you could have a development pipeline,

188
00:12:19,058 --> 00:12:22,610
you could get security results into there. You could then have a security

189
00:12:22,700 --> 00:12:25,894
dashboard where you could see all that might be going on in the pipelines,

190
00:12:25,942 --> 00:12:29,786
but mainly in the main branch. And then when you do create issues, you can

191
00:12:29,808 --> 00:12:33,450
see who's working on what. So it's really about visibility

192
00:12:33,530 --> 00:12:36,922
with this. When you get visibility, you can also potentially

193
00:12:36,986 --> 00:12:41,578
have predictable costs, because even if you have more testing, more testing,

194
00:12:41,674 --> 00:12:44,846
you're going to uncover your problem. You want to shift that left and that makes

195
00:12:44,868 --> 00:12:48,814
it a lot cheaper. So there's also reduced friction with development

196
00:12:48,862 --> 00:12:52,418
because you are empowering them and you can also give competitive feedback to

197
00:12:52,424 --> 00:12:56,022
the development. Maybe you want to give them a bit of security training as part

198
00:12:56,076 --> 00:12:57,880
of that ticket, for example.

199
00:12:59,050 --> 00:13:02,562
So what we have here is an example pipeline.

200
00:13:02,626 --> 00:13:06,546
So this could be as part of, for example, a merge

201
00:13:06,578 --> 00:13:10,086
request. A developer has an idea, they're going to write some code,

202
00:13:10,188 --> 00:13:13,786
they then create a feature branch, and then what they can do

203
00:13:13,888 --> 00:13:16,854
is as part of that, have all of these different scans.

204
00:13:16,902 --> 00:13:20,426
So I mentioned dynamic application security testing earlier. You can

205
00:13:20,448 --> 00:13:24,094
have static code analysis, looking at the written code,

206
00:13:24,212 --> 00:13:27,658
software, competitive analysis, looking at all the open source

207
00:13:27,834 --> 00:13:32,138
license scanning of that open source, looking for secret detection unit tests,

208
00:13:32,154 --> 00:13:35,746
et cetera. You can have all of that within a

209
00:13:35,768 --> 00:13:39,678
pipeline before a developer has even committed

210
00:13:39,854 --> 00:13:43,390
the code. And security as well can have visibility

211
00:13:43,470 --> 00:13:46,726
of this if they choose to. So what

212
00:13:46,748 --> 00:13:50,502
you end up with, here's my example, you are moving your

213
00:13:50,556 --> 00:13:54,566
security testing as close as possible

214
00:13:54,748 --> 00:13:58,546
to the developer. So as mentioned, developer creates

215
00:13:58,578 --> 00:14:02,086
an issue, create a merge request, so then they have the feature branch,

216
00:14:02,118 --> 00:14:06,150
which you can see along the top, commit the changes, run the pipeline,

217
00:14:06,230 --> 00:14:10,102
have some security scans, and the developer can get the results

218
00:14:10,166 --> 00:14:14,046
and then act on them. And this is all happening

219
00:14:14,148 --> 00:14:18,160
within the feature branch. So once you've done that, you can review,

220
00:14:18,850 --> 00:14:22,570
you can approve the changing and then close the merge request.

221
00:14:22,650 --> 00:14:25,826
And all of a sudden all of your amazing code is back in the

222
00:14:25,848 --> 00:14:29,454
default branch as secure as possible. So when your CD

223
00:14:29,502 --> 00:14:32,946
pipeline runs, you get some more security scans and

224
00:14:32,968 --> 00:14:36,370
then this all goes to the security dashboard.

225
00:14:37,290 --> 00:14:40,710
So when shift left is done,

226
00:14:40,780 --> 00:14:44,134
well, you can celebrate, as you can

227
00:14:44,172 --> 00:14:48,330
see here. So what does it mean? You can scan

228
00:14:48,670 --> 00:14:52,140
all code every time.

229
00:14:52,910 --> 00:14:55,994
A lot of tools out there, especially historically, maybe they

230
00:14:56,032 --> 00:14:59,370
charged per scan, maybe they charged per app.

231
00:14:59,520 --> 00:15:02,826
The reality is, if you

232
00:15:02,848 --> 00:15:06,942
are pricing per scan for example or per app, it's going to mean less

233
00:15:06,996 --> 00:15:10,526
scans. Whilst if you could can all your code every time with

234
00:15:10,548 --> 00:15:14,590
the incremental changes you could then see if you're introducing vulnerabilities.

235
00:15:15,330 --> 00:15:19,154
You want to make it seamlessly for devs. I used to be one. We like

236
00:15:19,192 --> 00:15:23,186
our tools, we like our idE, we like the tools that we need

237
00:15:23,208 --> 00:15:27,026
to use. Maybe we use handful issue tracking for CI CD, but we

238
00:15:27,048 --> 00:15:30,278
really want to use fewer tools. If a dev could live in their idE,

239
00:15:30,444 --> 00:15:34,006
I promise you we would. So what you really want to

240
00:15:34,028 --> 00:15:37,558
do is you want to combine, you want to have development, security and operations on

241
00:15:37,564 --> 00:15:40,742
the same page, maybe even using the same interface

242
00:15:40,886 --> 00:15:44,746
to have your CI CD, to have your security result,

243
00:15:44,848 --> 00:15:48,214
to have all your permissions hierarchy, just having one interface

244
00:15:48,262 --> 00:15:51,882
for all this and also happy compliance auditors

245
00:15:51,946 --> 00:15:54,240
which I will talk about in a moment.

246
00:15:55,250 --> 00:15:58,910
So compliance, this can be very

247
00:15:58,980 --> 00:16:02,334
important for a number of companies. So we try and make

248
00:16:02,372 --> 00:16:06,130
it as easy as possible. So one

249
00:16:06,280 --> 00:16:09,938
define and manage. So you're probably going to have specific

250
00:16:10,024 --> 00:16:13,534
settings. You're probably going to want to meet specific compliance controls.

251
00:16:13,582 --> 00:16:17,570
Depending on the industry you're in and depending on what compliance is necessary,

252
00:16:18,230 --> 00:16:22,150
you might want to do audit reports so you can export them very easily.

253
00:16:22,650 --> 00:16:25,606
It's a little right click. I can't remember off the top of my head if

254
00:16:25,628 --> 00:16:28,418
it's CSV or I think it's CSV,

255
00:16:28,594 --> 00:16:32,250
but it's very easily done, especially when it comes to compliance.

256
00:16:32,590 --> 00:16:36,310
I'm sure a lot of people have spent a lot of time and effort collating

257
00:16:36,470 --> 00:16:40,002
different results from different tools to produce audit reports.

258
00:16:40,086 --> 00:16:44,426
GitLab have it all in one place and traceability

259
00:16:44,618 --> 00:16:47,870
audit events. So you want to log

260
00:16:48,020 --> 00:16:51,326
everything? I hopefully don't need to tell people the

261
00:16:51,348 --> 00:16:55,286
importance of logging, but especially when it comes to instant

262
00:16:55,338 --> 00:16:59,358
response. If there is a malactor

263
00:16:59,454 --> 00:17:02,926
within your estate, you kind of want to know what they're

264
00:17:02,958 --> 00:17:06,158
doing. So logging and monitoring is an

265
00:17:06,184 --> 00:17:09,446
excellent way of doing this. So what you want to do, you want to have

266
00:17:09,468 --> 00:17:13,474
the traceability audit events and then you can identify adherence

267
00:17:13,602 --> 00:17:17,982
sorry eventify incidents and also adherence

268
00:17:18,066 --> 00:17:22,106
to compliance rules. So in terms

269
00:17:22,208 --> 00:17:25,674
of desired outcomes. So where are we looking to

270
00:17:25,712 --> 00:17:29,446
get to so greater efficiencies

271
00:17:29,558 --> 00:17:33,454
for both security and dev? We have to remember we are

272
00:17:33,492 --> 00:17:36,942
all on the same team. Sometimes it can feel with

273
00:17:36,996 --> 00:17:40,878
development, security and also operations that

274
00:17:41,044 --> 00:17:44,730
we have different language,

275
00:17:44,810 --> 00:17:48,238
different priorities. It can definitely be a case of pointing

276
00:17:48,254 --> 00:17:52,670
the finger and we really want to kind of reduce that. So efficiencies

277
00:17:52,750 --> 00:17:55,938
is a great way to start and then we can start on the digital

278
00:17:56,034 --> 00:17:58,870
and especially cultural transformation.

279
00:17:59,690 --> 00:18:03,622
We also have consistent compliance to policy. As mentioned

280
00:18:03,676 --> 00:18:07,126
in the previous slide, compliance and policy are important,

281
00:18:07,228 --> 00:18:10,986
so being able to adhere to a consistent guideline can

282
00:18:11,008 --> 00:18:15,114
only be good. Thanks. Reduced security

283
00:18:15,312 --> 00:18:19,078
exposure. So back to one of my earlier slides.

284
00:18:19,174 --> 00:18:22,654
Would you rather have ten k of problems at the

285
00:18:22,692 --> 00:18:26,682
end, or maybe one or two problems on each commit

286
00:18:26,746 --> 00:18:29,866
that can then easily be fixed pre commit, allowing developers

287
00:18:29,898 --> 00:18:33,634
to be proactive. What's also worth noting is

288
00:18:33,752 --> 00:18:36,530
with the reduced security exposure,

289
00:18:36,950 --> 00:18:40,980
what are you scanning? How are you changing it?

290
00:18:41,430 --> 00:18:45,154
Are you changing everything? There's a lot of different types of

291
00:18:45,192 --> 00:18:48,674
application security. GitLab. We have something called

292
00:18:48,792 --> 00:18:52,134
DevOps. It's a YamL file for our

293
00:18:52,172 --> 00:18:55,878
CI CD, and you can literally plug and play and you can decide what you

294
00:18:55,884 --> 00:18:59,734
want. So maybe we want SAS and gast and SCA software competitive

295
00:18:59,782 --> 00:19:02,874
analysis for this app, or maybe this one.

296
00:19:02,912 --> 00:19:06,714
We want all of them, and we want secrets protection. So with

297
00:19:06,752 --> 00:19:10,266
this security exposure, it's not only when we're doing the

298
00:19:10,288 --> 00:19:13,038
security, but also what type of security,

299
00:19:13,204 --> 00:19:16,602
and most importantly, what are we doing with the results?

300
00:19:16,666 --> 00:19:20,526
Because I've worked in a few organizations, you might have security,

301
00:19:20,708 --> 00:19:24,286
they produce a big list of reports. Back in the day, it was probably even

302
00:19:24,308 --> 00:19:27,874
on paper, and then give it to developers. They might

303
00:19:27,912 --> 00:19:31,886
look through, okay, the first five or four positives, and then that pile

304
00:19:31,918 --> 00:19:35,166
of paper goes into the bin. That's not what we're

305
00:19:35,198 --> 00:19:38,806
looking to do. We want to empower developers, we want to lower our

306
00:19:38,828 --> 00:19:42,870
overall security exposure, and we want to give visibility so that

307
00:19:42,940 --> 00:19:46,722
developers and security can interact within the same interface

308
00:19:46,786 --> 00:19:49,846
to see what each other are doing, to make sure the bugs are being fixed

309
00:19:49,878 --> 00:19:52,810
and given opportunity to communicate and collaborate.

310
00:19:53,390 --> 00:19:56,682
And what happens with this?

311
00:19:56,816 --> 00:20:00,214
You end up with predictable costs.

312
00:20:00,342 --> 00:20:02,170
So as I mentioned earlier,

313
00:20:03,810 --> 00:20:07,038
you don't want to have a cost per scan or cost per app. You want

314
00:20:07,044 --> 00:20:10,414
to be able to have your whole devsecops interface in one

315
00:20:10,452 --> 00:20:14,522
platform. Predictable costs with all your security scanning

316
00:20:14,666 --> 00:20:18,546
within the pipeline and also integrated within as well, which can

317
00:20:18,568 --> 00:20:21,906
lead to much more predictable costs. And when I say this, I also

318
00:20:21,928 --> 00:20:25,646
mean cost of tool chain, cost of scan, but also if you've

319
00:20:25,758 --> 00:20:29,942
taken all the steps I've described and you've reduced your security exposure, guess what?

320
00:20:29,996 --> 00:20:33,750
Your costs if touching all the woods, if something bad

321
00:20:33,820 --> 00:20:37,662
does happen, that can also have a massive cost in terms of brand impact,

322
00:20:37,826 --> 00:20:41,660
et cetera. So how do we get there?

323
00:20:42,030 --> 00:20:45,750
Scan results, allow developers

324
00:20:45,830 --> 00:20:48,998
give them their security information and do it when they're

325
00:20:49,014 --> 00:20:53,386
committing code. So really take that shift left approach,

326
00:20:53,578 --> 00:20:57,678
you also want to have a robust set of application

327
00:20:57,764 --> 00:21:01,182
security testing capabilities. So I spoke about that a few minutes

328
00:21:01,236 --> 00:21:04,778
ago. In terms of, I should know the number. I think I know GitLab

329
00:21:04,794 --> 00:21:08,046
would do about seven or eight different types of security scanning,

330
00:21:08,078 --> 00:21:11,730
all just within a pipeline as we're producing an application. And this could be

331
00:21:11,800 --> 00:21:15,206
whether you're producing a Java app, a swift app,

332
00:21:15,228 --> 00:21:18,790
or even provisioning terraform as well. With this,

333
00:21:18,860 --> 00:21:22,338
you want to have your security policies automatically applied

334
00:21:22,434 --> 00:21:25,746
and exceptions documented.

335
00:21:25,858 --> 00:21:28,838
So what this means is when you're looking at your apps, for example, you might

336
00:21:28,844 --> 00:21:31,786
have a hierarchy, you might have your tier one apps, you might be a little

337
00:21:31,808 --> 00:21:35,674
bit stricter with what you allows out in production versus potentially lower

338
00:21:35,712 --> 00:21:39,366
tier apps or internal. If you are using incumbent

339
00:21:39,398 --> 00:21:43,066
scanners, you want to have those integrated. And as I've

340
00:21:43,098 --> 00:21:47,370
mentioned, just one cost, regardless of number of scans

341
00:21:47,530 --> 00:21:51,374
and apps scanned. So coming

342
00:21:51,492 --> 00:21:55,380
back to my people, process and technology,

343
00:21:56,070 --> 00:21:59,566
when you have people and process you can scale

344
00:21:59,758 --> 00:22:03,522
when you have people, technology you can innovate and process,

345
00:22:03,576 --> 00:22:07,174
and technology you can automate. When you have all three,

346
00:22:07,292 --> 00:22:10,758
that's when you can drive true business value.

347
00:22:10,844 --> 00:22:14,466
And what I mean by that, you can improve

348
00:22:14,498 --> 00:22:18,098
your operational efficiencies, you can reduce your security

349
00:22:18,204 --> 00:22:22,330
and compliance risk and fundamentally deliver better

350
00:22:22,400 --> 00:22:26,106
software faster. And what this means is, if you

351
00:22:26,128 --> 00:22:29,850
have an idea, maybe you speak to a customer, someone in your product

352
00:22:29,920 --> 00:22:33,518
team, you have an idea, okay, how quickly

353
00:22:33,684 --> 00:22:37,646
can we deliver that idea for our customer and outperform our

354
00:22:37,668 --> 00:22:41,930
competitors? How quickly can we improve our software based on feedback?

355
00:22:42,010 --> 00:22:46,000
How quickly can we iterate? How can we drive true business value?

356
00:22:47,650 --> 00:22:50,910
So thank you so much for listening.

357
00:22:51,250 --> 00:22:55,074
My name is Stefania, I work at Git.

358
00:22:55,162 --> 00:22:58,646
You can find me on these different handles. Please feel free to connect with

359
00:22:58,668 --> 00:23:01,846
me. This is also part of QCon. So thank you so

360
00:23:01,868 --> 00:23:05,282
much for hosting and whether this is live or watching the recording.

361
00:23:05,346 --> 00:23:08,838
Thank you everyone for listening and look forward to catching up in

362
00:23:08,844 --> 00:23:09,060
the future.

