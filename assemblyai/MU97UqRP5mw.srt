1
00:00:00,250 --> 00:00:04,830
Are you an SRE, a developer,

2
00:00:06,610 --> 00:00:10,014
a quality engineer who wants to tackle the challenge of

3
00:00:10,052 --> 00:00:13,534
improving reliability in your DevOps? You can enable your

4
00:00:13,572 --> 00:00:16,510
DevOps for reliability with chaos native.

5
00:00:16,930 --> 00:00:19,530
Create your free account at Chaos native.

6
00:00:19,610 --> 00:01:17,014
Litmus Cloud hi.

7
00:01:17,052 --> 00:01:21,074
Welcome to our talk. This is reducing trauma in organizations

8
00:01:21,122 --> 00:01:24,866
with slos and chaos engineering. My name is Mandy Walls.

9
00:01:24,898 --> 00:01:28,594
I am a DevOps advocate at pager Duty. And I'm Julie Gunderson,

10
00:01:28,642 --> 00:01:31,978
a senior reliability advocate at Gremlin. And Mandy and

11
00:01:31,984 --> 00:01:35,370
I are really excited to be here with you today because we

12
00:01:35,440 --> 00:01:38,666
actually both worked together at Pagerduty and

13
00:01:38,688 --> 00:01:42,382
now at different organizations. We really see ways that

14
00:01:42,436 --> 00:01:45,902
you can combine some of these practices to make for

15
00:01:45,956 --> 00:01:49,470
really reliable organizations. So, Mandy, awesome.

16
00:01:49,540 --> 00:01:53,190
Yeah, thanks, Julie. Yeah. One of the things we talk about at Pagerduty

17
00:01:53,210 --> 00:01:56,734
we call full service ownership, and it's about focusing

18
00:01:56,782 --> 00:02:00,354
on the reliability of services that your

19
00:02:00,392 --> 00:02:04,370
team creates once they get into their production life,

20
00:02:04,440 --> 00:02:08,230
whatever that is, if it's internal production or external customers or

21
00:02:08,300 --> 00:02:11,638
whatever that is. So part of knowing how your services

22
00:02:11,724 --> 00:02:14,950
are performing. Mandi setting goals around

23
00:02:15,020 --> 00:02:19,050
that performance is really a key to keeping all of your users happy,

24
00:02:19,120 --> 00:02:21,850
whether they are external customers or internal customers.

25
00:02:22,000 --> 00:02:25,626
So we're going to talk about using tools like

26
00:02:25,728 --> 00:02:29,802
service level indicators and service level objectives and

27
00:02:29,936 --> 00:02:33,466
how they can help you focus on what your users need. And then adding

28
00:02:33,498 --> 00:02:36,686
to that, using chaos engineering practices to make

29
00:02:36,708 --> 00:02:40,574
sure you're hitting those goals as you're working on your service and as you're making

30
00:02:40,612 --> 00:02:44,562
those improvements. One of the things that we often talk about

31
00:02:44,616 --> 00:02:48,354
is the cost of downtime. So downtime costs money,

32
00:02:48,472 --> 00:02:51,666
quantifiable and unquantifiable costs as

33
00:02:51,688 --> 00:02:55,186
well. I mean, on the quantifiable costs, you've got your revenue. So you can just

34
00:02:55,208 --> 00:02:59,090
talk to your accounting or your sales folks or employee production,

35
00:02:59,430 --> 00:03:03,490
that customer chargebacks, and breaching those slos,

36
00:03:03,570 --> 00:03:07,494
that's where we really want to focus this talk on.

37
00:03:07,532 --> 00:03:11,034
But just so that the other things don't get lost, we also

38
00:03:11,072 --> 00:03:15,594
want to remember the unquantifiable costs, such as brand defamation and

39
00:03:15,712 --> 00:03:19,578
employee attrition. And so with that, Mandy, why don't

40
00:03:19,584 --> 00:03:23,870
you kick us off with some information on slos? Slos and SlIs.

41
00:03:24,370 --> 00:03:28,026
Yeah. So a lot of vocabulary on this one. So let's

42
00:03:28,058 --> 00:03:31,134
just set some baseline so we'll go to the next

43
00:03:31,172 --> 00:03:34,618
slide there. We're not going to talk too much about slas.

44
00:03:34,714 --> 00:03:38,190
That's sort of the realm of lawyers, right?

45
00:03:38,340 --> 00:03:41,426
If you've worked for a software vendor like both of us do,

46
00:03:41,528 --> 00:03:45,074
you probably have some slas that your legal team and maybe

47
00:03:45,112 --> 00:03:48,646
your insurance company and a bunch of other people get together to set,

48
00:03:48,748 --> 00:03:52,102
so that it's part of the contractual agreement between

49
00:03:52,156 --> 00:03:55,554
your company and your customers. And there might be places

50
00:03:55,602 --> 00:03:59,490
where there's, like Julie mentioned, chargebacks or some kind of remuneration

51
00:03:59,570 --> 00:04:03,194
for outages and things like that. That's beyond what most

52
00:04:03,232 --> 00:04:06,826
of our SRe kind of practitioners can get into. So we're going

53
00:04:06,848 --> 00:04:10,554
to focus on the other pieces of this. So the first one here is our

54
00:04:10,592 --> 00:04:13,840
indicators. Our service level indicators are

55
00:04:14,770 --> 00:04:18,382
the metrics that we're going to work towards. The things that we're going to figure

56
00:04:18,436 --> 00:04:22,126
out how important they are to our users and where they

57
00:04:22,148 --> 00:04:25,778
need to be. And then our objectives are going to be the parts of those

58
00:04:25,864 --> 00:04:29,054
metrics that we can set goals for. They're going to be the places

59
00:04:29,102 --> 00:04:33,262
where we know beyond a certain point we're going to start losing

60
00:04:33,326 --> 00:04:36,998
users. So we're looking at sort of the tolerance level

61
00:04:37,084 --> 00:04:40,246
for where we can experiment and

62
00:04:40,268 --> 00:04:43,430
push a little bit of risk and still keep the customer

63
00:04:43,500 --> 00:04:44,520
base happy.

64
00:04:47,290 --> 00:04:50,550
So then we have the rest of the time,

65
00:04:50,620 --> 00:04:54,234
right, we think about, okay, well, we've got some

66
00:04:54,272 --> 00:04:57,498
sort of uptime. That's kind of what we're measuring against. We will have some

67
00:04:57,584 --> 00:05:01,306
sort of goals that we're going to set. And the rest of that, whatever's left

68
00:05:01,408 --> 00:05:04,526
out of the pie, is going to be our air budget. And you can kind

69
00:05:04,548 --> 00:05:07,722
of SRE from this sort of silly diagram.

70
00:05:07,786 --> 00:05:11,326
The pie chart is 99%, things are good,

71
00:05:11,428 --> 00:05:14,174
and 1% is our sort of wiggle room,

72
00:05:14,292 --> 00:05:18,082
that place where we're able to maybe try

73
00:05:18,136 --> 00:05:21,700
something out. We're not sure it's going to work 100%,

74
00:05:22,230 --> 00:05:25,782
or it might be a little bit out of range for what our goals actually

75
00:05:25,836 --> 00:05:29,014
are. But it gives you this place to

76
00:05:29,212 --> 00:05:32,738
measure yourself against your goals and implement

77
00:05:32,834 --> 00:05:36,438
changes in a way that you're still preserving your customer

78
00:05:36,524 --> 00:05:40,546
experience. So it gives you a measurement for maybe

79
00:05:40,588 --> 00:05:44,186
you need to improve things, like removing services from

80
00:05:44,208 --> 00:05:47,546
load balancers before you restart them, or using blue green deploys or

81
00:05:47,568 --> 00:05:51,354
all these kinds of things to maintain this sort of air budgets goal

82
00:05:51,402 --> 00:05:55,322
that you set for yourself, for things. And when we add chaos

83
00:05:55,386 --> 00:05:58,842
engineering into the mix, we can look at this SRE

84
00:05:58,906 --> 00:06:02,142
pyramid this comes from, you know,

85
00:06:02,196 --> 00:06:05,502
you really start with the monitoring and observability, right?

86
00:06:05,556 --> 00:06:09,342
Just like what Mandy was talking about with the SLos and the Slis.

87
00:06:09,486 --> 00:06:12,866
And then you move into that incident response, and then when

88
00:06:12,888 --> 00:06:16,222
we get to the post incident analysis. So let's say you've had an incident.

89
00:06:16,286 --> 00:06:19,926
Now, you've run a blameless post mortem on it. One of the things that you

90
00:06:19,948 --> 00:06:23,270
want to do is then obviously work towards those

91
00:06:23,340 --> 00:06:27,522
fixes that you have. You want to actually have an internal

92
00:06:27,666 --> 00:06:30,902
time that you've agreed to as a team to work

93
00:06:30,956 --> 00:06:34,058
towards remediation efforts so that those incidents don't occur again.

94
00:06:34,144 --> 00:06:37,274
But then you want to test that, Mandi. So you want to repeat those

95
00:06:37,312 --> 00:06:40,922
incidents with chaos engineering, and you want to automate that

96
00:06:40,976 --> 00:06:44,286
so that you can make sure that those fixes have worked and that

97
00:06:44,308 --> 00:06:47,546
they continue to work, and then to your testing

98
00:06:47,578 --> 00:06:51,582
and release procedures. You want to bring your chaos engineering practices into that.

99
00:06:51,716 --> 00:06:55,698
And then you move to capacity planning and development, and then product,

100
00:06:55,784 --> 00:06:59,806
which, again, goes back to where Mandy was talking about with error

101
00:06:59,838 --> 00:07:03,474
budgets and setting those in. And so

102
00:07:03,592 --> 00:07:07,174
then we go ahead and talk about kind of how we center on that customer

103
00:07:07,292 --> 00:07:11,830
experience. Yeah, really, Julie, the whole point of the whole exercise is

104
00:07:11,980 --> 00:07:15,990
about keeping your users happy. Right. We're looking for the things

105
00:07:16,140 --> 00:07:19,530
that they care about. And if we go to the next slide,

106
00:07:20,110 --> 00:07:23,686
we have to figure out what users

107
00:07:23,718 --> 00:07:28,150
actually care about. Right. You might have users that are really sensitive

108
00:07:28,230 --> 00:07:32,254
to slow loading pages. You might have users that are sensitive to

109
00:07:32,292 --> 00:07:35,966
large payloads on mobile because maybe their

110
00:07:35,988 --> 00:07:39,278
mobile traffic is too heavy for what their connectivity is.

111
00:07:39,364 --> 00:07:43,166
There might be lots of different behaviors that they have, and you want

112
00:07:43,188 --> 00:07:47,058
to be able to test that and take a look at it for what

113
00:07:47,064 --> 00:07:49,890
the user behavior looks like. Well, and Mandi, we've seen it, too,

114
00:07:49,960 --> 00:07:53,442
with the state of X, Y and Z

115
00:07:53,496 --> 00:07:57,210
reports and multiple reports. We've seen. We've seen it in our Gremlin

116
00:07:57,230 --> 00:08:00,946
reports, in the pagerduty reports that users, they won't

117
00:08:00,978 --> 00:08:04,454
wait. Now, that app or website takes a long

118
00:08:04,492 --> 00:08:08,422
time to load. They're out of there, and they're onto a competitor who's really

119
00:08:08,476 --> 00:08:10,994
built that user experience in. Yeah,

120
00:08:11,052 --> 00:08:14,090
absolutely. So we're looking at maybe

121
00:08:14,160 --> 00:08:17,882
there's a place where certain user behaviors only

122
00:08:17,936 --> 00:08:21,958
apply when folks SRe logged in, or maybe they have different behavior when they're

123
00:08:22,054 --> 00:08:26,110
sort of a guest. Maybe there are certain things that are super important,

124
00:08:26,180 --> 00:08:30,906
like your search function and your shopping cart. But maybe management

125
00:08:30,938 --> 00:08:34,690
or updating of billing information isn't quite as important

126
00:08:34,760 --> 00:08:38,290
because people aren't using it all the time. So you're really looking for the things

127
00:08:38,360 --> 00:08:41,650
that people are really gravitating to

128
00:08:41,720 --> 00:08:45,522
or using a lot in your applications and the

129
00:08:45,576 --> 00:08:49,554
behaviors that they really want to have.

130
00:08:49,592 --> 00:08:53,346
Be fast, right? Like thinking about, like Jolene mentioned, people are

131
00:08:53,368 --> 00:08:56,774
going to leave, right there's certain places like, okay,

132
00:08:56,812 --> 00:09:00,246
I'm not going to change my bank if their app is SLos, but if I'm

133
00:09:00,278 --> 00:09:03,882
shopping for something or I'm looking for some music or something like that,

134
00:09:04,016 --> 00:09:07,034
if you're not responsive, I'm going somewhere else,

135
00:09:07,152 --> 00:09:07,820
right.

136
00:09:10,430 --> 00:09:13,822
So some of the things that you might find that your users care about,

137
00:09:13,876 --> 00:09:17,454
right? No errors on your main page or some

138
00:09:17,492 --> 00:09:20,974
module loads first. And you can actually see this as

139
00:09:21,012 --> 00:09:24,830
a user. As you're floating around the Internet

140
00:09:25,190 --> 00:09:28,734
and you pull up a site, you can notice which modules

141
00:09:28,782 --> 00:09:32,658
load first. YouTube is very obvious, right? The video

142
00:09:32,744 --> 00:09:36,302
player goals and then the rest of the page builds around it.

143
00:09:36,376 --> 00:09:39,990
Because that video load and that actual

144
00:09:40,060 --> 00:09:43,542
video itself is the main part of the experience. So when you're thinking

145
00:09:43,596 --> 00:09:46,822
about that for your own services, how the page

146
00:09:46,876 --> 00:09:50,550
loads, the pieces that build in, where they come from, how long they take,

147
00:09:50,620 --> 00:09:53,914
all part of your user experience. So lots of things to think

148
00:09:53,952 --> 00:09:57,514
about when you're working with your users and what they care about. You might

149
00:09:57,552 --> 00:10:01,354
actually have to ask them about the

150
00:10:01,392 --> 00:10:05,434
things that they care about. Sometimes that's things that we tend

151
00:10:05,482 --> 00:10:08,858
to forget. We want to develop things for ourselves that we think our users

152
00:10:08,874 --> 00:10:12,254
are going to love, right? But then upon releasing it, we find

153
00:10:12,292 --> 00:10:15,486
out that our users are not using that new feature and they're using some random

154
00:10:15,518 --> 00:10:19,570
thing that we thought nobody would like. And it's just really

155
00:10:19,640 --> 00:10:22,340
understanding that user experience.

156
00:10:23,110 --> 00:10:26,742
Definitely. And there's lots of things that you probably already have

157
00:10:26,796 --> 00:10:30,566
in your metrics that sre important but not

158
00:10:30,748 --> 00:10:34,486
primary to your user experience. Like some stuff is going to

159
00:10:34,508 --> 00:10:37,618
be maybe early warning, right? Cpu utilization,

160
00:10:37,714 --> 00:10:41,858
memory allocation, those things are super important in

161
00:10:41,884 --> 00:10:44,954
that they will impact user experience down the road.

162
00:10:45,072 --> 00:10:48,634
But you want to broaden your definition of the things that you want to look

163
00:10:48,672 --> 00:10:51,934
at. As you're setting these slis, you're looking for the

164
00:10:51,972 --> 00:10:55,422
actual behavioral aspects of your application,

165
00:10:55,556 --> 00:10:59,438
of your services. When they hit the user. User has no idea

166
00:10:59,524 --> 00:11:03,038
that your cpu utilization is at 85%. They just know

167
00:11:03,124 --> 00:11:06,390
that your queries are slow, like they're not getting their searches back when they're searching

168
00:11:06,410 --> 00:11:10,046
in your site. So thinking about what the user experience is and how that's

169
00:11:10,078 --> 00:11:13,826
going to translate into the metrics that you're collecting and what metrics you might have

170
00:11:13,848 --> 00:11:17,042
to add is another super important step of the whole

171
00:11:17,096 --> 00:11:20,726
exercise. And then that's kind of how we talk about, like we talk

172
00:11:20,748 --> 00:11:24,086
a lot about metrics. And some people get a little bit scared when it comes

173
00:11:24,108 --> 00:11:27,806
to chaos engineering because maybe they don't have a ton of baseline metrics,

174
00:11:27,858 --> 00:11:31,514
right? And that's okay, because you can actually

175
00:11:31,632 --> 00:11:35,414
use chaos engineering, which is practices injecting

176
00:11:35,462 --> 00:11:39,494
failure into your systems to understand and to validate

177
00:11:39,542 --> 00:11:43,694
your monitoring. Mandi, your metrics. And so when we want

178
00:11:43,732 --> 00:11:47,006
to know, okay, our slos, our slis, are they

179
00:11:47,028 --> 00:11:50,110
right? We can go ahead

180
00:11:50,180 --> 00:11:53,754
and practice that. We can imagine what that

181
00:11:53,812 --> 00:11:57,282
customer experience is going to look like. Let's say

182
00:11:57,336 --> 00:12:01,010
if the email server goes down. So I check out,

183
00:12:01,080 --> 00:12:04,462
I purchase my item, but I don't get that immediate feedback

184
00:12:04,526 --> 00:12:07,990
as a customer with that email confirmation,

185
00:12:08,570 --> 00:12:11,974
that's okay. Was I still able to check out? Was I still

186
00:12:12,012 --> 00:12:15,814
able to complete my purchase? Were those things able to

187
00:12:15,852 --> 00:12:19,322
happen within the set defined timeline that we

188
00:12:19,376 --> 00:12:22,662
have agreed to? So we want to inject

189
00:12:22,726 --> 00:12:26,326
that failure proactively so that we can validate.

190
00:12:26,518 --> 00:12:30,026
Are these objectives that we have set, are they the

191
00:12:30,048 --> 00:12:34,634
right ones for our team? Are they what we should be holding the expectations

192
00:12:34,762 --> 00:12:38,400
to, and that goals along to the customer experience?

193
00:12:38,930 --> 00:12:41,694
And so, Mandi, talk to us a little bit about that.

194
00:12:41,892 --> 00:12:45,662
Yeah, there's a bit of a place where before

195
00:12:45,716 --> 00:12:49,810
you embark on this journey, right. There's some

196
00:12:49,880 --> 00:12:53,906
operational maturity that you'll want to have in place before

197
00:12:54,008 --> 00:12:57,378
you go down the path to these slis and your slos. So some of

198
00:12:57,384 --> 00:13:01,174
the things we've already talked about around user experience and those

199
00:13:01,212 --> 00:13:04,406
kinds of things, you want to already have in your pocket, right? You want

200
00:13:04,428 --> 00:13:08,106
to have a good idea of the impact of things

201
00:13:08,208 --> 00:13:12,106
like new features or changes or

202
00:13:12,208 --> 00:13:15,546
degradations and how users are responding to those. And you

203
00:13:15,568 --> 00:13:19,014
also want to have the mechanics via your chaos

204
00:13:19,062 --> 00:13:22,598
engineering tools to be able to work with that. So you want to have

205
00:13:22,704 --> 00:13:26,494
a lot of telemetry already available, right? You might have open

206
00:13:26,532 --> 00:13:30,442
source or commercial solutions or whatever it is, but you're going to be collecting

207
00:13:30,586 --> 00:13:34,094
your user facing metrics, right? That's going to give you perspective on

208
00:13:34,132 --> 00:13:37,554
what users are experiencing throughout your services.

209
00:13:37,672 --> 00:13:41,266
You might have a set of synthetic monitors that are going to tell you

210
00:13:41,448 --> 00:13:45,394
the things you know about the things you know, right? That's the place where

211
00:13:45,512 --> 00:13:49,042
you've already sort of pre populated what needs to be known

212
00:13:49,106 --> 00:13:53,126
about those potential components. You probably have some logging set

213
00:13:53,148 --> 00:13:55,954
up so that you're tracking things on a post hoc basis,

214
00:13:56,082 --> 00:13:59,862
so that you can collate behaviors and other

215
00:13:59,996 --> 00:14:03,306
events as they happen throughout the ecosystem. So it's a good

216
00:14:03,328 --> 00:14:06,550
place to do that. You get all the text on it, get all the timestamps,

217
00:14:06,630 --> 00:14:10,010
all that fun stuff, and then you can

218
00:14:10,160 --> 00:14:14,046
kind of put those two together with a tracing tool. Gives you

219
00:14:14,228 --> 00:14:17,994
a place to start dealing with the complexity, especially if you've got a wide

220
00:14:18,042 --> 00:14:21,566
distributed system. If you've got a monolith, you might already be

221
00:14:21,588 --> 00:14:25,450
in a good enough place, right? You can kind of cheat a little bit

222
00:14:25,620 --> 00:14:29,746
because things aren't moving around a whole lot. But if you do have a

223
00:14:29,768 --> 00:14:33,586
widely distributed ecosystem, you're going to want to have some tracing so that

224
00:14:33,608 --> 00:14:37,046
you can follow user requests throughout all of your

225
00:14:37,068 --> 00:14:40,534
services. And then observability tools are going to help

226
00:14:40,572 --> 00:14:44,230
you underpin all of these components, give you a more complete

227
00:14:44,300 --> 00:14:47,714
picture of the ecosystem.

228
00:14:47,842 --> 00:14:51,394
In a more generic sense, it helps you sort of tag

229
00:14:51,442 --> 00:14:55,062
down to the unknown unknown. So things that you weren't expecting, because you're

230
00:14:55,126 --> 00:14:59,034
poking sort of that black box of your software with some inputs and

231
00:14:59,072 --> 00:15:03,578
seeing what pops out the other side. And that gives you a lot more ability

232
00:15:03,674 --> 00:15:07,162
to say, okay, this user behavior is indicative

233
00:15:07,226 --> 00:15:12,430
of this set of requests and this set of otherwise

234
00:15:13,170 --> 00:15:16,926
sort of hidden back end requests and things like that.

235
00:15:17,028 --> 00:15:20,066
So I can know then as these users come in with

236
00:15:20,088 --> 00:15:23,586
this particular use case and behavior, they're going to hit all of these things and

237
00:15:23,608 --> 00:15:27,430
I can start tracking those down for my Slis and my slos.

238
00:15:28,010 --> 00:15:31,766
Another good place where unfortunately, Julie and I have

239
00:15:31,788 --> 00:15:35,094
both sort of seen places where folks don't exactly

240
00:15:35,212 --> 00:15:38,930
have a really good picture of all their dependencies.

241
00:15:39,010 --> 00:15:42,922
And this is super important. You want to be able to know your

242
00:15:42,976 --> 00:15:46,246
services, what they're consuming. You want to know if they're eating

243
00:15:46,278 --> 00:15:50,166
bad stuff. Right? And if you've got a back end dependency

244
00:15:50,278 --> 00:15:54,558
that its slo is really low,

245
00:15:54,724 --> 00:15:58,414
your services can't have a more stringent requirement if

246
00:15:58,452 --> 00:16:01,482
your back ends aren't up to performing to that requirement.

247
00:16:01,546 --> 00:16:05,394
So it gives you a place to really start thinking about other

248
00:16:05,432 --> 00:16:09,570
teams that you're working with, things that you can do more defensively.

249
00:16:09,910 --> 00:16:13,282
Maybe you can red button something when it goes

250
00:16:13,336 --> 00:16:16,774
out of your range for tolerance and those kinds of things. Mandi,

251
00:16:16,812 --> 00:16:20,630
doing some more advanced techniques to protect your service

252
00:16:20,780 --> 00:16:23,906
from things that aren't up to your requirements.

253
00:16:24,018 --> 00:16:27,782
Well, and another thing too is sometimes you don't realize that

254
00:16:27,836 --> 00:16:31,222
there is a service that's actually a critical path.

255
00:16:31,366 --> 00:16:34,934
You may think it's not. This is not a critical path. If the redis

256
00:16:34,982 --> 00:16:38,714
cart goes down, we're fine, right? But then when

257
00:16:38,752 --> 00:16:42,554
you test and when you're purposefully injecting this failure,

258
00:16:42,602 --> 00:16:46,522
you might find a critical path that all of a sudden makes you realize

259
00:16:46,586 --> 00:16:49,822
you need to redefine your slos based

260
00:16:49,876 --> 00:16:53,166
on that. Absolutely. Let's take

261
00:16:53,188 --> 00:16:56,854
a look at, like, it's going to look like math,

262
00:16:56,922 --> 00:17:00,466
right? So if we go to the next slide there, we've got kind of

263
00:17:00,488 --> 00:17:04,254
a generic model for goals, right? You have your service level indicator,

264
00:17:04,382 --> 00:17:08,770
which is going to be some text, and then you have your service level objective,

265
00:17:08,850 --> 00:17:11,718
which is going to be kind of some numbers, probably.

266
00:17:11,884 --> 00:17:15,974
And then we've got a period of time which is represented by T.

267
00:17:16,172 --> 00:17:19,862
And our SlI is going to be the number of

268
00:17:19,996 --> 00:17:23,546
good things that happen divided by the number of all the

269
00:17:23,568 --> 00:17:27,066
things that happened. And we're going to multiply by 100 to get

270
00:17:27,088 --> 00:17:31,002
a percentage. And then our error budgets are going to be whatever's left

271
00:17:31,056 --> 00:17:34,490
over. So if I'm going to say, okay, my service level indicator

272
00:17:34,570 --> 00:17:38,366
for 500 errors on my main page is 99%,

273
00:17:38,468 --> 00:17:41,934
then my error budget is 1% of those requests can

274
00:17:41,972 --> 00:17:45,170
be out of that range before my customers start to get really

275
00:17:45,240 --> 00:17:48,370
unhappy. And we have some examples on the next slide

276
00:17:49,270 --> 00:17:52,466
of how these numbers sort of fit together, right?

277
00:17:52,648 --> 00:17:55,998
The bigger the pool of events, the more wiggle

278
00:17:56,014 --> 00:17:59,430
room you can kind of get, right? At the same percentage points.

279
00:17:59,500 --> 00:18:03,218
It's just math, right? So at 100,000 events,

280
00:18:03,314 --> 00:18:07,030
if I have 99,000 good events, that means I can have 1000

281
00:18:07,100 --> 00:18:10,246
events where maybe I'm trying something different out, maybe I'm

282
00:18:10,278 --> 00:18:13,578
doing some experimentation, but I know that I have that

283
00:18:13,664 --> 00:18:17,690
air budget, that sort of wiggle room to do a bit of things

284
00:18:17,760 --> 00:18:20,774
that maybe sre outside our goal parameters,

285
00:18:20,902 --> 00:18:24,814
and our users are going to cope with those in

286
00:18:24,852 --> 00:18:28,734
an okay way. They're going to be more tolerant. Yeah. So I know

287
00:18:28,772 --> 00:18:32,286
that none of us expected a math lesson today,

288
00:18:32,388 --> 00:18:35,220
so thanks for that, Mandy, but really,

289
00:18:35,670 --> 00:18:39,726
reliability is obviously very important to organizations

290
00:18:39,758 --> 00:18:43,634
now, so. Right. We're perfect 100% of the time. Our web

291
00:18:43,672 --> 00:18:46,726
requests have zero milliseconds of latency all the time.

292
00:18:46,828 --> 00:18:50,214
Right. But not necessarily not in the

293
00:18:50,252 --> 00:18:54,450
real world. So that's why we talk about slos,

294
00:18:54,530 --> 00:18:57,814
slos, Slis. So maybe we have an SLA that

295
00:18:57,852 --> 00:19:01,274
90% of the web requests have a web latency of

296
00:19:01,312 --> 00:19:04,346
500 milliseconds for the month, or then that's when the

297
00:19:04,368 --> 00:19:08,458
customer gets their money back, then we have

298
00:19:08,544 --> 00:19:11,962
set a buffer in now for our slO, we've got

299
00:19:12,016 --> 00:19:16,474
a 95% slo. So we've got this 5% buffer

300
00:19:16,522 --> 00:19:19,854
between our SLA and our slO, and that's what we can use to play

301
00:19:19,892 --> 00:19:23,374
with. That's what we can use to experiment with. That's where we can start

302
00:19:23,412 --> 00:19:27,074
getting creative with maybe new features that we want to release to

303
00:19:27,112 --> 00:19:30,930
our customers. But it's really important that we are staying within

304
00:19:31,000 --> 00:19:35,042
those ranges that we have set for our

305
00:19:35,096 --> 00:19:38,774
organization. And so when we kind of look at this

306
00:19:38,892 --> 00:19:42,214
in play, here's a little bit of kind of a

307
00:19:42,252 --> 00:19:45,814
scenario that you can run through, right? So you can look

308
00:19:45,852 --> 00:19:49,434
at the SLO scenario in staging. You can do that

309
00:19:49,472 --> 00:19:53,334
with gremlin. Maybe an instance downtime occurs,

310
00:19:53,382 --> 00:19:57,654
right? Datadog is picking up that instance, they're calculating

311
00:19:57,702 --> 00:20:00,870
it, and then pagerduty is firing off that alert,

312
00:20:00,950 --> 00:20:04,270
letting you know that that SLO has been

313
00:20:04,420 --> 00:20:08,110
breached. So these are ways that you can put all of these things

314
00:20:08,180 --> 00:20:11,754
together to use the goals that sre at your disposal

315
00:20:11,882 --> 00:20:15,746
to make sure that you are maintaining those not only

316
00:20:15,848 --> 00:20:19,634
contractual organizations that you have, but that customer

317
00:20:19,752 --> 00:20:23,474
experience. Yeah. One thing to remember, though,

318
00:20:23,512 --> 00:20:27,250
as you're working on these, is that while your SLA

319
00:20:27,330 --> 00:20:30,470
is your public facing customer contract,

320
00:20:30,970 --> 00:20:34,214
that thing that the lawyers put together for you,

321
00:20:34,332 --> 00:20:37,606
your slos and your slos are really for

322
00:20:37,628 --> 00:20:41,734
you. They're for your team to work against and to budget

323
00:20:41,782 --> 00:20:45,786
and prioritize for. They're not meant to be a cudgel or any

324
00:20:45,808 --> 00:20:49,242
kind of punishment because we don't want to disincentivize people

325
00:20:49,296 --> 00:20:52,846
from making changes, making changes, shipping features, getting all

326
00:20:52,868 --> 00:20:56,046
that stuff out there for our customers is how we get

327
00:20:56,068 --> 00:20:59,454
more users. It's how we provide them with delightful things.

328
00:20:59,572 --> 00:21:03,294
So we don't want to punish people or beat them over the

329
00:21:03,332 --> 00:21:06,658
head with their slO if they're not beating it.

330
00:21:06,744 --> 00:21:10,622
However, it is a good place to revisit

331
00:21:10,686 --> 00:21:13,970
after a post mortem or talk about during a review.

332
00:21:14,120 --> 00:21:17,106
Where are we on the air budget for this quarter? Where are we on the

333
00:21:17,128 --> 00:21:21,574
air budget for this particular feature? So that you can

334
00:21:21,772 --> 00:21:25,458
be really conscientious about the changes that you're making and the work that you're

335
00:21:25,474 --> 00:21:28,954
doing and how it impacts your users. Yeah, we've seen

336
00:21:28,992 --> 00:21:33,034
it where some organizations will stop releasing new

337
00:21:33,072 --> 00:21:36,346
features if they're getting close to that. Right. When you're looking at

338
00:21:36,368 --> 00:21:39,850
that overall math equation and you know you're close

339
00:21:39,920 --> 00:21:43,558
to breaching, you're going to say, okay, we're going to pause and

340
00:21:43,584 --> 00:21:47,246
we're going to work on the reliability of what we have now. We're not going

341
00:21:47,268 --> 00:21:50,494
to make any more changes so that you can make

342
00:21:50,532 --> 00:21:54,174
sure that you're keeping up with what

343
00:21:54,212 --> 00:21:58,190
your goals are. And you can also then use chaos engineering

344
00:21:58,270 --> 00:22:02,366
to test out the new features and to make sure that you're focusing

345
00:22:02,398 --> 00:22:05,826
on those slos. So some people say that you

346
00:22:05,928 --> 00:22:09,154
can only do chaos engineering in production. That's the only way.

347
00:22:09,192 --> 00:22:11,318
So if you're not doing in production, you might as well just not do it

348
00:22:11,324 --> 00:22:14,502
at all. And that is absolutely not true.

349
00:22:14,556 --> 00:22:18,322
I mean, we've had experiences where we've practiced chaos engineering,

350
00:22:18,386 --> 00:22:21,698
in tabletop experiments where we're just writing ideas

351
00:22:21,714 --> 00:22:24,314
on a piece of paper. Mandy, Mandi had some fun with that at one of

352
00:22:24,352 --> 00:22:27,626
the summits a little while back. But you

353
00:22:27,648 --> 00:22:31,066
can actually adopt the practice in development, right? So if

354
00:22:31,088 --> 00:22:35,214
you think about it, you're architecting for failure. You're keeping that in mind,

355
00:22:35,412 --> 00:22:39,098
Mandi. You can get confident then testing and development,

356
00:22:39,194 --> 00:22:42,158
and then you can move to staging, and then you can start small,

357
00:22:42,244 --> 00:22:46,014
and you can expand your blast radius as you are releasing these

358
00:22:46,052 --> 00:22:49,262
new features. And then finally you can move on to production,

359
00:22:49,326 --> 00:22:53,026
and you can start small with these experiments, and then you can increase the

360
00:22:53,048 --> 00:22:56,242
magnitude, you can increase the blast radius. So,

361
00:22:56,296 --> 00:22:59,622
in all reality, this is just how we do development, right?

362
00:22:59,676 --> 00:23:03,634
You don't actually have to overthink it. You just want to work iteratively

363
00:23:03,682 --> 00:23:07,254
like you would with code, move up your environments like you

364
00:23:07,292 --> 00:23:10,860
would with code. We all know how to do this.

365
00:23:13,920 --> 00:23:17,148
And so, Mandi, I'm going to pass it to you to talk a

366
00:23:17,154 --> 00:23:20,824
little bit about working with upstream dependencies. Yeah, upstream dependencies

367
00:23:20,872 --> 00:23:24,640
can be tough, right? If there sre things that are owned by your organization,

368
00:23:25,220 --> 00:23:28,624
you might have some ability to put some

369
00:23:28,662 --> 00:23:31,984
pressure on your colleagues and other business units to say, look,

370
00:23:32,022 --> 00:23:36,016
man, users really love this thing that we're consuming

371
00:23:36,048 --> 00:23:40,084
off of you, but you're not up to what they're expecting. You can have

372
00:23:40,122 --> 00:23:43,664
those kinds of discussions when you have external dependencies.

373
00:23:43,712 --> 00:23:47,316
You have third party pieces looking to see if

374
00:23:47,338 --> 00:23:50,800
they even publish what they're going to

375
00:23:50,890 --> 00:23:54,308
present to you if they've got published Slos, if it's something that you're

376
00:23:54,324 --> 00:23:57,368
buying, and they have a contractual SLA looking at those,

377
00:23:57,454 --> 00:24:00,344
because then you're going to use that as part of your own math to say,

378
00:24:00,382 --> 00:24:03,484
well, service a is reliant on service b,

379
00:24:03,522 --> 00:24:06,984
and service b can only ship us this particular availability.

380
00:24:07,112 --> 00:24:11,164
We can't be better than that, right? If you want to be better

381
00:24:11,202 --> 00:24:14,924
than that, you have to think about defensively coding around bad performance,

382
00:24:15,052 --> 00:24:18,880
looking at turning things off, or taking

383
00:24:18,950 --> 00:24:22,930
things out of the user experience if they're not performing. So really

384
00:24:23,700 --> 00:24:27,256
looking at it from the user's perspective

385
00:24:27,308 --> 00:24:30,996
to say, would they rather not see something than have

386
00:24:31,018 --> 00:24:34,256
it be slow? Or do I need to look at alternatives?

387
00:24:34,288 --> 00:24:37,572
Do I need to consume this from another provider? And really being

388
00:24:37,626 --> 00:24:40,884
proactive about, and I love the term defensive coding,

389
00:24:40,932 --> 00:24:44,424
too. Because that's really what we're thinking about. Again, kind of going

390
00:24:44,462 --> 00:24:47,592
back to that architecting for failure. And I know we mentioned this

391
00:24:47,646 --> 00:24:51,288
earlier, so I'm just briefly going to touch on using chaos engineering

392
00:24:51,304 --> 00:24:54,536
to validate those dependencies and those critical paths.

393
00:24:54,728 --> 00:24:58,460
But there are specific attacks that you can run, so maybe

394
00:24:58,530 --> 00:25:02,428
you can inject some latency since slos are time sensitive.

395
00:25:02,524 --> 00:25:06,432
Let's see what happens if

396
00:25:06,486 --> 00:25:10,332
this application is required for my application to serve its core

397
00:25:10,396 --> 00:25:14,450
function. Because again, we want to serve our customers.

398
00:25:14,900 --> 00:25:18,240
And even though an application might continue to work in some capacity,

399
00:25:18,320 --> 00:25:22,148
it might not be the capacity that supports the goals that we have

400
00:25:22,234 --> 00:25:25,796
set for ourselves. Absolutely. And that

401
00:25:25,818 --> 00:25:29,384
comes into things like unplanned work as well. Right. Your incidents can

402
00:25:29,422 --> 00:25:32,196
indicate that work needs to be done on your reliability.

403
00:25:32,308 --> 00:25:35,380
Right. Your slos and your error budgets,

404
00:25:35,540 --> 00:25:39,176
you really need to make them part of your post mortem process.

405
00:25:39,358 --> 00:25:42,872
You can sit down and say, we had this particular incident

406
00:25:42,936 --> 00:25:46,524
happen, this is what we blew out of our air budget for this particular

407
00:25:46,642 --> 00:25:49,368
service. And then you can make that decision.

408
00:25:49,544 --> 00:25:53,512
What work needs to be done in our next sprint to prioritize

409
00:25:53,576 --> 00:25:56,832
fixing this thing. How is it going to affect our air budget going forward?

410
00:25:56,966 --> 00:26:00,544
Can we even ship new things for the duration of this

411
00:26:00,582 --> 00:26:04,532
time period if we're far beyond our

412
00:26:04,586 --> 00:26:08,164
air budget based on the last incident planning around those

413
00:26:08,202 --> 00:26:11,908
things? Focusing on the user experience is

414
00:26:12,074 --> 00:26:15,872
a real downstream tool of setting these goals,

415
00:26:15,936 --> 00:26:19,850
these objectives with your indicators, so that you can really plan

416
00:26:20,380 --> 00:26:23,576
defensively for the change that you need to make to

417
00:26:23,598 --> 00:26:27,044
make the whole experience better. So your lifecycle

418
00:26:27,092 --> 00:26:29,992
is going to be, you start with your user behavior,

419
00:26:30,136 --> 00:26:34,264
you look for your reliability, your performance

420
00:26:34,312 --> 00:26:38,108
metrics, Mandi, the things that your users care about. Then we're going

421
00:26:38,114 --> 00:26:41,544
to set all of our goals, Mandi, our slis and establish

422
00:26:41,592 --> 00:26:45,264
our slos. And we're going to work over time keeping those

423
00:26:45,302 --> 00:26:49,116
slos in the green. Right. And with that, we're going to practice

424
00:26:49,148 --> 00:26:52,828
our chaos engineering. We introduce a new feature.

425
00:26:52,924 --> 00:26:56,864
It's going to go through testing. It may also go through chaos testing

426
00:26:56,912 --> 00:26:59,936
as well, so that we know that it's not pushing

427
00:26:59,968 --> 00:27:03,428
our service out of tolerance for what our users expect from us.

428
00:27:03,514 --> 00:27:07,016
Right. So it's a maturity process. So make

429
00:27:07,038 --> 00:27:10,596
sure you're prioritizing the user

430
00:27:10,628 --> 00:27:14,536
experience first. That's the whole reason we're going through the whole process.

431
00:27:14,718 --> 00:27:18,532
You're going to quantify what's good and bad via

432
00:27:18,596 --> 00:27:21,576
your experiences. Work with your error budgets.

433
00:27:21,608 --> 00:27:25,996
That's really just to tell your team where you are on

434
00:27:26,018 --> 00:27:30,200
your time frame and then it all feeds back into work prioritization

435
00:27:30,360 --> 00:27:34,044
and how you prioritize work and organize

436
00:27:34,092 --> 00:27:37,824
it there. And if they're not working for you anymore, change them.

437
00:27:38,022 --> 00:27:42,130
And so we've got some great resources for you.

438
00:27:42,500 --> 00:27:46,720
There's the talks that you can find at Slos comp, Google's SRE book.

439
00:27:46,790 --> 00:27:50,404
It's available online if you haven't read it. It's an amazing book.

440
00:27:50,442 --> 00:27:53,796
I haven't read it cover to cover yet. It's one of my working through kind

441
00:27:53,818 --> 00:27:55,300
of like Lord of the Rings.

442
00:27:59,320 --> 00:28:03,124
You can also check out Gremlin for free if you go to SlOS

443
00:28:03,172 --> 00:28:06,036
buttons so that you can practice with chaos engineering.

444
00:28:06,068 --> 00:28:08,984
But Mandy, I just realized we didn't tell people how to get a hold of

445
00:28:09,022 --> 00:28:13,290
us. So you can find me on Twitter at

446
00:28:14,460 --> 00:28:19,784
Gund and Mandy, I'm lnxch and

447
00:28:19,822 --> 00:28:23,104
so thank you for taking the time to hang out with us

448
00:28:23,142 --> 00:28:26,720
today and hopefully your trauma is a little bit reduced.

449
00:28:27,140 --> 00:28:28,750
Yeah, thanks very much.

