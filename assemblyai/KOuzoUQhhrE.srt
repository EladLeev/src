1
00:00:23,150 --> 00:00:26,894
Hello everyone, my name is Dmitrii Ivashchenko and I'm a software engineer

2
00:00:26,942 --> 00:00:30,186
at Mygames and this talk. We'll look at these

3
00:00:30,208 --> 00:00:33,226
differences between WebGL and soon to

4
00:00:33,248 --> 00:00:37,062
be released Web GPU and learn how to prepare your projects

5
00:00:37,126 --> 00:00:41,222
for this transition. Let's begin by exploring the timeline

6
00:00:41,286 --> 00:00:44,538
of WebGL and WebGPU, as well as the current state of

7
00:00:44,544 --> 00:00:48,458
the WebGPU. WebGL, similar to other technologies,

8
00:00:48,554 --> 00:00:52,554
has a history that dates back to the past. These desktop

9
00:00:52,602 --> 00:00:56,242
version of OpenGL debuted way back in 1990.

10
00:00:56,296 --> 00:01:00,498
These in 2011, WebgL 10

11
00:01:00,584 --> 00:01:03,650
was released as the first stable version of WebGL.

12
00:01:04,070 --> 00:01:07,142
It was based on OpenGlas 20,

13
00:01:07,276 --> 00:01:09,880
which was introduced in 2007.

14
00:01:10,490 --> 00:01:13,634
This release allowed web developers to incorporate

15
00:01:13,682 --> 00:01:16,802
videographics into web browsers without requiring

16
00:01:16,866 --> 00:01:19,706
any extra plugins. In 2017,

17
00:01:19,728 --> 00:01:23,738
a new version of WebGL was introduced called

18
00:01:23,824 --> 00:01:27,702
WebGL 20. This version was released

19
00:01:27,766 --> 00:01:32,018
six years after the initial version and was based on Openjlas

20
00:01:32,134 --> 00:01:35,760
30, which was released in 2012.

21
00:01:36,210 --> 00:01:40,410
WebGL 20 came with several improvements and new features,

22
00:01:40,490 --> 00:01:44,466
making it even more capable of producing powerful treaty graphics on

23
00:01:44,488 --> 00:01:47,806
the web. Lately, there has been a growing

24
00:01:47,838 --> 00:01:51,042
interest in new graphics API that

25
00:01:51,096 --> 00:01:54,530
offer developers more control and flexibility,

26
00:01:55,030 --> 00:01:58,530
and three notable APIs. Here are Vulcan,

27
00:01:58,610 --> 00:02:01,026
direct, these to twelve, and Metal.

28
00:02:01,218 --> 00:02:04,786
Together, these three APIs create a foundation

29
00:02:04,898 --> 00:02:08,926
for Web GPU. Vulcan, developed by the Kronos

30
00:02:08,978 --> 00:02:12,698
Group, is a cross platform API that provides developers with

31
00:02:12,784 --> 00:02:16,170
lower level access to the graphics resource hardware.

32
00:02:16,670 --> 00:02:19,862
This allows for high performance applications

33
00:02:19,926 --> 00:02:23,406
with better control over graphics hardware direct these

34
00:02:23,428 --> 00:02:27,242
D twelve, created by Microsoft, is exclusively for Windows

35
00:02:27,306 --> 00:02:31,274
and Xbox and offers developers deeper control over graphics

36
00:02:31,322 --> 00:02:35,106
resources. Metal, an exclusive API for

37
00:02:35,128 --> 00:02:39,186
Apple devices, was designed by Apple with maximum performance in

38
00:02:39,208 --> 00:02:42,498
mind on their hardware. WebGPU has been

39
00:02:42,504 --> 00:02:46,674
making significant progress lately. It's expanded to platforms

40
00:02:46,722 --> 00:02:50,726
like Mac, Windows and Chrome OS and available in

41
00:02:50,748 --> 00:02:55,030
Chrome 130 and H 130 versions.

42
00:02:55,610 --> 00:02:59,126
Linux and Android support is expected to be added

43
00:02:59,158 --> 00:03:02,378
soon. There are several engines that either

44
00:03:02,464 --> 00:03:06,198
support or are experimenting with WebGPU.

45
00:03:06,374 --> 00:03:09,318
Babylon JS fully supports WebGPU,

46
00:03:09,414 --> 00:03:12,800
while these JS currently has experimental support.

47
00:03:13,330 --> 00:03:17,630
Blake Canvas is still in development, but its future looks promising.

48
00:03:18,290 --> 00:03:21,882
Unity made an announcement of early and experimental

49
00:03:21,946 --> 00:03:28,610
web GPU support in Alpha version 2023.2 and

50
00:03:28,760 --> 00:03:32,334
cost creator 3.6.2 officially supports

51
00:03:32,382 --> 00:03:36,406
web GPU and finally construct is

52
00:03:36,428 --> 00:03:40,262
currently only supported in Chrome version 130

53
00:03:40,396 --> 00:03:44,150
or later on Windows, macOS and Chrome OS machines.

54
00:03:44,650 --> 00:03:49,010
Taking this into consideration, it seems like wise

55
00:03:49,090 --> 00:03:52,854
move to start transitioning towards web GPU or at least preparing

56
00:03:52,902 --> 00:03:56,406
projects for a future transition. Let's take a closer

57
00:03:56,438 --> 00:04:00,410
look at some of the code pieces of the API.

58
00:04:00,750 --> 00:04:04,446
This won't be comprehensive, but WebGL touch on all

59
00:04:04,468 --> 00:04:08,094
the most important bits. The GPU adapter is

60
00:04:08,132 --> 00:04:12,318
a pivotal component. Adapters represent the

61
00:04:12,404 --> 00:04:15,730
gpus. The device can be axed.

62
00:04:17,510 --> 00:04:21,890
This can be even software based like Swift shader,

63
00:04:22,230 --> 00:04:26,158
and typically it returns one adapter at a time.

64
00:04:26,344 --> 00:04:30,098
However, you can specify an adapter based on certain criteria,

65
00:04:30,194 --> 00:04:32,840
like power performance, low power,

66
00:04:33,210 --> 00:04:37,714
and it provides a snapshot of the GPU specifications

67
00:04:37,842 --> 00:04:41,030
such as vendor Nvidia architecture, tuning,

68
00:04:41,190 --> 00:04:44,854
and furthermore it outlines the features and limits

69
00:04:44,902 --> 00:04:48,490
of the capable to the GPU device.

70
00:04:49,070 --> 00:04:52,266
The GPU device plays a central role.

71
00:04:52,458 --> 00:04:56,590
It serves as a main interface for the API.

72
00:04:57,250 --> 00:05:00,538
This company is responsible for creating resources

73
00:05:00,634 --> 00:05:03,870
such as textures, buffers and pipelines.

74
00:05:04,550 --> 00:05:08,606
It comes equipped with GPU queue

75
00:05:08,718 --> 00:05:13,198
to carry out comments, and functionally it's

76
00:05:13,374 --> 00:05:17,418
quite akin to WebGL rendering contexts.

77
00:05:17,614 --> 00:05:22,150
Webgl extensions are roughly equivalent to those in WebGPU.

78
00:05:22,730 --> 00:05:26,294
However, they are not universally supported across all

79
00:05:26,332 --> 00:05:30,106
systems. Each adapter provides a list of available

80
00:05:30,208 --> 00:05:33,674
extensions to activate them. They must

81
00:05:33,712 --> 00:05:37,802
be specified when requesting the device. There are

82
00:05:37,856 --> 00:05:41,370
numerical constraints on GPU capabilities.

83
00:05:42,110 --> 00:05:45,594
Baseline exists that every web

84
00:05:45,632 --> 00:05:49,674
GPU implementation must meet. The adapter

85
00:05:49,722 --> 00:05:53,814
indicates the actual limits of the system. By default,

86
00:05:53,962 --> 00:05:57,602
only these limits are active unless specified during

87
00:05:57,656 --> 00:06:01,298
the device request. WebGPU enables rendering to

88
00:06:01,304 --> 00:06:05,790
the canvas after creation. It needs configuration

89
00:06:05,870 --> 00:06:09,570
to link with device. Multiple canvases

90
00:06:09,650 --> 00:06:14,002
can share the same device, and they can be reconfigured

91
00:06:14,066 --> 00:06:17,206
as necessary. It supplies a

92
00:06:17,308 --> 00:06:21,066
texture for rendering and there

93
00:06:21,088 --> 00:06:24,118
are several resource types in web GPU.

94
00:06:24,294 --> 00:06:27,734
First, we have the GPU buffer. It defines

95
00:06:27,782 --> 00:06:30,906
the size and its usage. It can

96
00:06:30,928 --> 00:06:34,510
be used from uniforms, vertices, indices and general

97
00:06:34,580 --> 00:06:37,914
data. Next is the GPU

98
00:06:37,962 --> 00:06:43,310
texture. It designates dimensions as

99
00:06:43,380 --> 00:06:47,570
along with size maps, samples, formats and usage.

100
00:06:48,150 --> 00:06:51,266
Then there is a GPU texture view.

101
00:06:51,448 --> 00:06:55,458
It is a subset of a texture used for sampling or

102
00:06:55,544 --> 00:06:58,802
as rendering targets. You can specify

103
00:06:58,866 --> 00:07:02,440
its use as a cube map, array, texture, and more.

104
00:07:03,130 --> 00:07:07,398
The GPU sampler is also important. It dictates these

105
00:07:07,564 --> 00:07:10,250
textures, filtering and wrapping behavior.

106
00:07:10,910 --> 00:07:14,454
It's crucial to note that all these resources

107
00:07:14,502 --> 00:07:17,638
maintain a fixed shape post creation.

108
00:07:17,814 --> 00:07:20,970
However, their content can be modified.

109
00:07:21,490 --> 00:07:24,910
The device comes with a default GPU queue.

110
00:07:25,410 --> 00:07:28,974
Currently, it's the only queue available for use.

111
00:07:29,092 --> 00:07:32,720
However, future API versions might offer more options.

112
00:07:33,510 --> 00:07:36,946
This queue is essential for submitting comments to

113
00:07:36,968 --> 00:07:40,446
the GPU. Additionally, it features

114
00:07:40,558 --> 00:07:43,934
useful helper functions. These assist

115
00:07:43,982 --> 00:07:47,478
in writing to buffers and textures, and these are

116
00:07:47,484 --> 00:07:51,522
the simplest method to update the content of these resources.

117
00:07:51,666 --> 00:07:55,110
It's highly recommended to make use of them. To record

118
00:07:55,180 --> 00:07:58,954
GPU comments, start by creating GPU comment encoder from

119
00:07:58,992 --> 00:08:02,874
your device. This allows you to transfer data between buffers and

120
00:08:02,912 --> 00:08:06,026
textures. You can then initiate render or

121
00:08:06,048 --> 00:08:09,146
compute passes. Once you're done,

122
00:08:09,248 --> 00:08:12,510
it generates the CPU comment buffer.

123
00:08:12,850 --> 00:08:16,590
Remember, comment buffer remains inactive until they are

124
00:08:16,660 --> 00:08:20,266
queued, and once a comment buffer

125
00:08:20,298 --> 00:08:24,358
is submitted, it can be reused.

126
00:08:24,554 --> 00:08:28,542
Passes play a significant role in GPU operations. A render

127
00:08:28,606 --> 00:08:32,050
pass can utilize GPU render pipelines.

128
00:08:32,470 --> 00:08:36,370
It binds to vertex or index buffers,

129
00:08:36,730 --> 00:08:40,166
issues, draw calls, and write to one or

130
00:08:40,188 --> 00:08:43,426
multiple textures. On the other hand, a compute

131
00:08:43,458 --> 00:08:47,442
pass taps into GPU compute pipelines.

132
00:08:47,586 --> 00:08:50,630
It's responsible for issuing dispatch calls.

133
00:08:50,790 --> 00:08:54,774
It's essential to note that when a pass is active, you can't

134
00:08:54,822 --> 00:08:57,626
record other comment types. However,

135
00:08:57,728 --> 00:09:01,122
both render and compute passes have capability

136
00:09:01,206 --> 00:09:04,542
to set bind groups. Initially, a render pass

137
00:09:04,596 --> 00:09:07,870
requires you to provide details about its

138
00:09:07,940 --> 00:09:12,010
attachments. This includes these output designation

139
00:09:12,090 --> 00:09:15,570
and methods to load and save these. Here,

140
00:09:15,640 --> 00:09:19,842
the clearing of data types take place. It's also where

141
00:09:19,896 --> 00:09:23,826
you establish multi sample results, ensuring accuracy at

142
00:09:23,848 --> 00:09:27,842
the past. Conclusion now let's explore the main high level

143
00:09:27,896 --> 00:09:31,122
differences when beginning to work with GraphQL APIs,

144
00:09:31,186 --> 00:09:34,310
the first step is to initialize the main object for interaction.

145
00:09:34,650 --> 00:09:38,686
This process has some differences between WebGL and WebGPu,

146
00:09:38,738 --> 00:09:42,518
which can cause some issues in both systems. In WebGL,

147
00:09:42,614 --> 00:09:46,086
this object is called context and represent these interface

148
00:09:46,118 --> 00:09:49,526
for drawing on an HTML five canvas element.

149
00:09:49,718 --> 00:09:53,178
Obtaining this context is quite easy, but it's

150
00:09:53,194 --> 00:09:56,990
important to note that it's tied to a specific canvas.

151
00:09:57,890 --> 00:10:01,386
This means that if you need to render on multiple

152
00:10:01,418 --> 00:10:03,950
canvases, you will need multiple contexts.

153
00:10:04,630 --> 00:10:08,414
WebGPU introduces a new concept called device.

154
00:10:08,542 --> 00:10:12,386
The device represents a gpu abstraction that you will

155
00:10:12,408 --> 00:10:15,586
interact with. The initialization process is

156
00:10:15,608 --> 00:10:19,414
a bit more complex than in webgl, but it provides more

157
00:10:19,452 --> 00:10:23,126
flexibility. One advantage of this model is that one

158
00:10:23,148 --> 00:10:26,306
device can render on multiple canvases, or even none.

159
00:10:26,498 --> 00:10:30,154
This provides additional flexibility, allowing for one device to control

160
00:10:30,192 --> 00:10:33,050
rendering on multiple windows or contexts.

161
00:10:33,950 --> 00:10:37,066
Buffer management in both APIs looks the same.

162
00:10:37,168 --> 00:10:41,222
However, in WebGPu, once a buffer is created, its size

163
00:10:41,296 --> 00:10:44,922
and destination are fixed. It's also worth noting

164
00:10:44,986 --> 00:10:49,546
that don't bind the desired buffer.

165
00:10:49,738 --> 00:10:53,766
Instead, it simply passed as an argument.

166
00:10:53,898 --> 00:10:58,386
This approach can be found throughout the whole API for

167
00:10:58,408 --> 00:11:01,790
shaders. The big change is that WebGL

168
00:11:01,870 --> 00:11:05,326
uses GLSL and WebGPU uses a new shader

169
00:11:05,358 --> 00:11:08,802
language called WGSL. It's designed to

170
00:11:08,856 --> 00:11:12,466
cross compile nicely to the various Buchanan's preferred shader

171
00:11:12,498 --> 00:11:16,130
variants. Note that in WGSL,

172
00:11:16,210 --> 00:11:19,974
the fragment and vertex shaders can be part of the same shader

173
00:11:20,022 --> 00:11:23,850
as long as they have different function names.

174
00:11:25,790 --> 00:11:29,142
This can be very convenient. WebGL and WebGPU

175
00:11:29,206 --> 00:11:33,246
are two distinct methods for managing and organizing the

176
00:11:33,268 --> 00:11:37,290
graphic pipeline. In WebGL, the primary emphasis

177
00:11:37,370 --> 00:11:41,086
is on the shader program, which is combined vertex and

178
00:11:41,108 --> 00:11:44,506
fragment shaders to determine how vertices are

179
00:11:44,548 --> 00:11:48,338
transformed and how each pixel is colored. To create a

180
00:11:48,344 --> 00:11:51,742
program in WebGL, you need to follow simple steps.

181
00:11:51,886 --> 00:11:55,406
Just write and compile a shader code for source

182
00:11:55,438 --> 00:11:59,206
code for shaders. Attach these compiled shaders to the

183
00:11:59,228 --> 00:12:03,058
program and these link them. Activate the program before rendering

184
00:12:03,154 --> 00:12:06,262
and transmit data to activated program. That's all?

185
00:12:06,316 --> 00:12:09,862
Yeah. This process provides flexible control over

186
00:12:09,916 --> 00:12:13,566
graphics, but can be complicated and prone to errors,

187
00:12:13,618 --> 00:12:17,606
particularly for large and complex projects. When developing

188
00:12:17,638 --> 00:12:21,130
graphics for the web, it's essential to have a streamlined and efficient process,

189
00:12:21,280 --> 00:12:25,150
and in web GPU it's achieved through the use of a pipeline.

190
00:12:25,650 --> 00:12:29,578
The pipeline replaces these need for separate programs

191
00:12:29,674 --> 00:12:33,498
and includes not only shaders, but also

192
00:12:33,604 --> 00:12:37,314
other critical information that's established as state

193
00:12:37,432 --> 00:12:41,742
in WebGL. Creating a pipeline in WebGPU

194
00:12:41,806 --> 00:12:45,898
may seem more complicated initially, but it offers

195
00:12:46,014 --> 00:12:49,110
greater flexibility and modularity. The process

196
00:12:49,180 --> 00:12:52,546
involves three key steps. First, you must define

197
00:12:52,578 --> 00:12:56,374
the shader by writing compiling the shader source code just

198
00:12:56,412 --> 00:12:59,946
as you would in WebGL. Second, you create these

199
00:12:59,968 --> 00:13:03,802
pipeline by combining the shader and other rendering parameters into

200
00:13:03,856 --> 00:13:08,490
adhesive unit. Finally, you must activate the pipeline before rendering.

201
00:13:08,910 --> 00:13:12,042
Compared to WebGL, WebGpu encapsulates

202
00:13:12,106 --> 00:13:16,170
more aspects of rendering into a single object. This approach

203
00:13:16,250 --> 00:13:19,466
creates a more predictable and error resistant

204
00:13:19,498 --> 00:13:22,986
process. Instead of managing shaders and rendering

205
00:13:23,018 --> 00:13:26,894
states separately, everything is combined into one pipeline

206
00:13:26,942 --> 00:13:30,642
object. By following these steps, developer can

207
00:13:30,776 --> 00:13:34,530
create optimized and efficient graphics for the web with ease.

208
00:13:35,430 --> 00:13:38,646
Finally, we get to drawing again.

209
00:13:38,748 --> 00:13:42,706
WebGPU looks more complex, but that's

210
00:13:42,738 --> 00:13:44,760
actually in this case,

211
00:13:46,970 --> 00:13:50,582
we are more explicit about setting up render

212
00:13:50,646 --> 00:13:54,106
target, whereas WebGl there is a

213
00:13:54,128 --> 00:13:58,438
default one, but during the actual rendering,

214
00:13:58,534 --> 00:14:02,670
web GPU avoids setting up the

215
00:14:02,820 --> 00:14:07,230
vertex attribute layout because that's part of the pipeline.

216
00:14:07,810 --> 00:14:11,054
Let's now compare uniforms in WebGL and

217
00:14:11,092 --> 00:14:14,946
WebGPU uniforms, variables offer constant data

218
00:14:15,048 --> 00:14:18,690
that can be accessed by all shader instances.

219
00:14:20,790 --> 00:14:25,214
With basic WebGL, we can set uniform variables

220
00:14:25,262 --> 00:14:28,754
directly via API calls. However, this approach

221
00:14:28,802 --> 00:14:32,866
is straightforward, but necessities multiple API calls

222
00:14:32,898 --> 00:14:35,926
for each uniform variable. With these

223
00:14:35,948 --> 00:14:39,802
advent of WebGL, two developers are now able to group

224
00:14:39,856 --> 00:14:44,198
uniform variables into buffers, a highly efficient alternative

225
00:14:44,374 --> 00:14:48,314
to using separate uniform shaders, and by

226
00:14:48,352 --> 00:14:52,586
consolidating different uniforms into a larger structure. Using uniform buffers,

227
00:14:52,698 --> 00:14:56,670
all uniform data can be transmitted to the GPU advance,

228
00:14:57,250 --> 00:15:00,910
leading to reduced API calls and superior performance.

229
00:15:02,850 --> 00:15:07,082
In these case of webGl, two subsets

230
00:15:07,146 --> 00:15:10,530
of a large uniform buffers can be bound through a special

231
00:15:10,600 --> 00:15:13,838
API call known as bind buffer range.

232
00:15:14,014 --> 00:15:17,874
Similarly, in web GPU, dynamic uniform buffers offsets

233
00:15:17,922 --> 00:15:21,014
are utilized for the same purpose. Eleven is the

234
00:15:21,052 --> 00:15:25,302
passing of a list of offsets when invoking the setbind group

235
00:15:25,356 --> 00:15:29,126
API. This level of flexibility and optimization has

236
00:15:29,148 --> 00:15:33,142
made uniform buffers a valuable tool for developers looking to optimize

237
00:15:33,206 --> 00:15:36,682
their WebGL and WebGPU projects. A better

238
00:15:36,736 --> 00:15:40,870
method is available through Webgpu. Instead of supporting individual

239
00:15:41,040 --> 00:15:44,830
uniform variables, work is exclusively done through

240
00:15:44,900 --> 00:15:48,878
uniform buffers. Loading data in one

241
00:15:48,964 --> 00:15:52,910
large block is preferred by modern gpus instead of

242
00:15:53,060 --> 00:15:57,226
many small ones. Rather than recreating

243
00:15:57,258 --> 00:16:00,914
and rebiding small buffers each time, creating one

244
00:16:00,952 --> 00:16:04,162
large buffer is using different part width for

245
00:16:04,216 --> 00:16:07,970
different row calls can significantly increase performance,

246
00:16:08,130 --> 00:16:12,086
while WebGL is more imperative resetting global state with each

247
00:16:12,108 --> 00:16:14,920
call and striving to be as simple as possible.

248
00:16:15,290 --> 00:16:18,638
WebGPU aims to be more object oriented and focused

249
00:16:18,674 --> 00:16:22,570
on resource reuse, which leads to efficiency.

250
00:16:23,310 --> 00:16:26,774
Although transitioning from WebgL to WebGpu

251
00:16:26,822 --> 00:16:30,730
may seem difficult due to differences in methods,

252
00:16:31,490 --> 00:16:35,354
starting with transition to Webgl two as an immediate

253
00:16:35,402 --> 00:16:39,482
step can simplifies our work. Transitioning from WebGL

254
00:16:39,546 --> 00:16:43,654
to WebGPU involves modifying both API and shaders.

255
00:16:43,802 --> 00:16:47,182
The WGSL specification facilitates a seamless

256
00:16:47,246 --> 00:16:50,926
and intuitive transition while ensuring optimal efficiency and performance

257
00:16:51,038 --> 00:16:54,802
for contemporary gpus. I have an example shader for

258
00:16:54,856 --> 00:16:57,990
texture that uses GLSL and WGSL.

259
00:16:58,570 --> 00:17:02,134
GLSL serves as a connection between web

260
00:17:02,172 --> 00:17:04,630
gpu and these native APIs.

261
00:17:05,210 --> 00:17:09,646
Although WGSL appears to be more worthy

262
00:17:09,778 --> 00:17:13,050
than GLSL, the format is still recognizable.

263
00:17:13,470 --> 00:17:17,526
The following tables display a comparison between the basic and metrics

264
00:17:17,558 --> 00:17:20,730
data types found in GLSL and WGSL.

265
00:17:21,090 --> 00:17:24,654
Moving from GLSL to WGSL indicates a

266
00:17:24,772 --> 00:17:28,634
preference for these more stringent typing and clear specification

267
00:17:28,682 --> 00:17:32,014
of data sizes, resulting in better code

268
00:17:32,052 --> 00:17:35,614
legibility and lower chains to make

269
00:17:35,652 --> 00:17:39,394
mistakes. The meta declaring structures has

270
00:17:39,432 --> 00:17:43,086
been altered with these addition of explicit

271
00:17:43,118 --> 00:17:46,378
syntax for declaring fields in WGSL structures.

272
00:17:46,574 --> 00:17:50,050
This highlights the need for improved clarity

273
00:17:50,130 --> 00:17:53,190
and simplification of data structures and shaders.

274
00:17:53,850 --> 00:17:58,034
By altering the syntax of function in WGSL, it promotes a unified

275
00:17:58,082 --> 00:18:01,718
approach to declarations and return values,

276
00:18:01,814 --> 00:18:05,180
which results in more consistent and predictable code.

277
00:18:05,630 --> 00:18:09,466
If you are working with WGSL, you'll notice that some of

278
00:18:09,488 --> 00:18:13,338
the built in GLSL functions have different names

279
00:18:13,434 --> 00:18:16,910
or have been replaced. This is actually helpful because

280
00:18:16,980 --> 00:18:20,830
it simplifies the function names and make them more intuitive.

281
00:18:21,410 --> 00:18:25,022
This will make it easier for developers who are familiar

282
00:18:25,086 --> 00:18:28,210
with these graphic APIs to transition to WGSL

283
00:18:28,550 --> 00:18:32,110
if you are planning to convert your WebGL projects

284
00:18:32,190 --> 00:18:35,746
to WebGPu, there are a lot of tools available that

285
00:18:35,848 --> 00:18:40,130
can automate the process of converting GLSL to WGSL,

286
00:18:40,290 --> 00:18:43,554
and one such tool is Naga. It's a rust

287
00:18:43,602 --> 00:18:47,698
library that can be used to convert GLSL to WGSL,

288
00:18:47,874 --> 00:18:51,562
and best of all, it can be even used

289
00:18:51,616 --> 00:18:55,210
right from your browser with the help of webassembly.

290
00:18:55,950 --> 00:18:59,750
Now, let's talk about some differences in conventions

291
00:18:59,830 --> 00:19:03,086
between WebGL and WebGPu. Specifically, we will

292
00:19:03,108 --> 00:19:07,310
go over the disparities in textures, viewport and clip spaces.

293
00:19:07,730 --> 00:19:11,182
When you migrate, you may come across an unexpected issue

294
00:19:11,316 --> 00:19:14,702
where u images are flipped. This is a common

295
00:19:14,756 --> 00:19:18,554
problem for those who have moved. Implications from OpenGL

296
00:19:18,602 --> 00:19:22,334
to direct OpenGL and WebGL images

297
00:19:22,382 --> 00:19:25,586
are usually loaded so that the first pixel is on

298
00:19:25,608 --> 00:19:29,106
the bottom left corner. However, many developers load images

299
00:19:29,138 --> 00:19:32,354
starting from the top left corner, which results in flipped

300
00:19:32,402 --> 00:19:36,086
images. Directory D and metal systems, on the other hand,

301
00:19:36,188 --> 00:19:40,566
use the upper left corner as a start point for textures.

302
00:19:40,758 --> 00:19:44,634
The developers of WebGPU have decided to follow this

303
00:19:44,672 --> 00:19:48,282
practice since it's appear to be more straightforward approach for most

304
00:19:48,336 --> 00:19:52,038
developers. If your WebGL code selects

305
00:19:52,134 --> 00:19:55,818
pixels from the frame buffer, it's important to keep in mind that

306
00:19:55,904 --> 00:19:59,626
WebGpU uses a different coordinate system to adjust.

307
00:19:59,658 --> 00:20:03,310
For this, you may need to apply a straightforward y

308
00:20:03,380 --> 00:20:07,170
equal one minus y operation to correct these coordinates.

309
00:20:07,590 --> 00:20:11,474
If a developer encounters a problem where objects are

310
00:20:11,512 --> 00:20:14,450
disappearing or being clipped too soon,

311
00:20:14,600 --> 00:20:18,710
it may be due to differences in the depth domain.

312
00:20:19,850 --> 00:20:23,302
WebGL and Webgpu have different

313
00:20:23,356 --> 00:20:26,360
definitions of the depth range of the clip space,

314
00:20:27,210 --> 00:20:31,206
while WebGl uses a range from minus one to one, WebgpU uses

315
00:20:31,238 --> 00:20:34,582
a range from zero to one, which is similar to other graphics APIs

316
00:20:34,646 --> 00:20:37,690
like direct to D, Metal and Vulcan.

317
00:20:38,190 --> 00:20:41,834
This definition was made based on advantages of

318
00:20:41,872 --> 00:20:45,166
using the range from zero to one that were discovered while working with

319
00:20:45,188 --> 00:20:48,442
our graphics APIs. The projection matrix

320
00:20:48,506 --> 00:20:52,142
is primarily responsible for transforming a position of your

321
00:20:52,196 --> 00:20:55,966
model into a clip space. One useful way

322
00:20:55,988 --> 00:20:59,166
to make adjustments to a code is to ensure that the projection

323
00:20:59,198 --> 00:21:02,738
matrix generates outputs ranging from zero to one. This can be

324
00:21:02,744 --> 00:21:07,038
achieved by implementing certain functions available in libraries like GL matrix,

325
00:21:07,134 --> 00:21:09,640
such as the perspective co function.

326
00:21:10,170 --> 00:21:13,350
Other metrics operations also offer

327
00:21:13,420 --> 00:21:17,350
comparable functions that you can utilize in the event

328
00:21:17,420 --> 00:21:20,822
you're working with an existing matrix projection

329
00:21:20,886 --> 00:21:24,298
and that can be modified. Yeah, there is still a

330
00:21:24,304 --> 00:21:27,926
solution. You can transform the projection matrix

331
00:21:28,038 --> 00:21:31,530
to fit the zero to one range by applying another

332
00:21:31,600 --> 00:21:35,134
matrix that modifies these range before

333
00:21:35,252 --> 00:21:38,714
the projection matrix. This pre multiplication technique

334
00:21:38,762 --> 00:21:42,334
can be an effective way to adjust the range of your projection matrix to fit

335
00:21:42,372 --> 00:21:45,674
your needs. Now let's discuss some tips

336
00:21:45,722 --> 00:21:48,910
and tricks of working in this web GPU.

337
00:21:49,750 --> 00:21:53,330
First of all, of course, minimize the number of

338
00:21:53,400 --> 00:21:57,382
pipelines you use. The more pipelines you use, the more

339
00:21:57,436 --> 00:22:00,840
states which you have and the less performance it result.

340
00:22:02,250 --> 00:22:05,814
It may be not trivial depending on where your

341
00:22:05,852 --> 00:22:10,346
assets come from. Creating a pipeline and

342
00:22:10,448 --> 00:22:14,266
then immediately using it it works but

343
00:22:14,368 --> 00:22:17,782
don't do it. Yeah, just create functions,

344
00:22:17,846 --> 00:22:21,566
return immediately and it start work on

345
00:22:21,588 --> 00:22:25,130
a different thread when you use it. The queue execution

346
00:22:25,210 --> 00:22:28,926
needs to wait for pending pipeline creation to finish.

347
00:22:29,108 --> 00:22:32,640
This causes a significant junk. Make sure you

348
00:22:33,590 --> 00:22:36,260
leave some time between create and first use,

349
00:22:37,350 --> 00:22:40,958
or even better, use the Create pipeline async variants.

350
00:22:41,134 --> 00:22:44,946
The promise resolves when the pipeline is ready to

351
00:22:44,968 --> 00:22:49,134
use without any styling. Render bundles

352
00:22:49,182 --> 00:22:52,562
are prerecorded partial reusable render

353
00:22:52,626 --> 00:22:56,786
passes. They can contain most rendering

354
00:22:56,818 --> 00:23:00,010
comments, except for things like setting the viewport.

355
00:23:00,830 --> 00:23:04,426
They can be replayed as part of

356
00:23:04,448 --> 00:23:08,422
an actual render passes later on. Render bundles

357
00:23:08,486 --> 00:23:12,266
can be executed alongside regular render passes comments.

358
00:23:12,458 --> 00:23:16,650
The render pass state is reset to defaults

359
00:23:16,730 --> 00:23:20,794
before and after every bundle execution, primarily for reducing

360
00:23:20,842 --> 00:23:24,526
JavaScript overheat or drop in. So GPU performance is

361
00:23:24,548 --> 00:23:29,118
the same either way. So transitioning to

362
00:23:29,284 --> 00:23:33,262
web GPU is more than just switching graphic APIs.

363
00:23:33,406 --> 00:23:36,702
It is a step towards the future of web graphics,

364
00:23:36,766 --> 00:23:40,654
combining successful features and practices from various graphics

365
00:23:40,702 --> 00:23:44,610
APIs. These migrations requires

366
00:23:45,030 --> 00:23:48,554
thorough understanding of technical and philosophical changes,

367
00:23:48,712 --> 00:23:52,586
but the benefits are really significant. So thank you for your

368
00:23:52,608 --> 00:23:55,320
attention and I hope you enjoy the conference. See you.

