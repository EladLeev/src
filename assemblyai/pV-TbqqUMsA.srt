1
00:00:25,490 --> 00:00:28,854
My name is Zac, Zac Hatfielddodds, and I'm giving a talk called stop

2
00:00:28,892 --> 00:00:32,482
writing tests for comp 42. Now, this might be provocative,

3
00:00:32,546 --> 00:00:36,214
given that I do in fact want you to continue testing youll code,

4
00:00:36,332 --> 00:00:39,766
but it's provocative for a reason. Before we get into it, I want

5
00:00:39,788 --> 00:00:42,902
to start with an australian tradition that we call an acknowledgment of country.

6
00:00:43,036 --> 00:00:46,486
And in particular, thats means that I want to acknowledge that the land I'm giving

7
00:00:46,508 --> 00:00:50,478
this talk from in Canberra, Australia, was originally and still is, land of the

8
00:00:50,484 --> 00:00:54,574
Nanowell people who have been living here for tens of thousands of years, working lands,

9
00:00:54,612 --> 00:00:57,982
learning, and acknowledge that these land that I'm living on was

10
00:00:58,036 --> 00:01:01,114
never actually seeded. It was settled and colonized.

11
00:01:01,242 --> 00:01:04,926
But back to testing. I'm giving a talk about testing, and as part of

12
00:01:04,948 --> 00:01:08,226
that, I should probably tell you what I mean by testing. I mean the

13
00:01:08,248 --> 00:01:11,650
activity where youll run your code to see what it does.

14
00:01:11,800 --> 00:01:15,458
And importantly, this excludes a number of other useful techniques to

15
00:01:15,464 --> 00:01:19,330
make sure your code does the right thing, like linting or auto formatting,

16
00:01:19,410 --> 00:01:23,346
like code review or getting enough sleep, or perhaps even coffee.

17
00:01:23,458 --> 00:01:26,662
And specifically, the activity that is testing usually means

18
00:01:26,716 --> 00:01:30,006
we choose some inputs to run our code on. We run the

19
00:01:30,028 --> 00:01:33,126
code, we check that it did the right thing, and then we repeat

20
00:01:33,158 --> 00:01:36,474
as needed. And in the very old days that might have been, or for

21
00:01:36,512 --> 00:01:40,442
some problems. Now, we still automate repeat as needed.

22
00:01:40,576 --> 00:01:43,718
So you do it all manually the first time, and then you record that in

23
00:01:43,744 --> 00:01:47,034
a script, and you can run it with something like unit test or pytest.

24
00:01:47,162 --> 00:01:50,574
But all of the other parts of this process are usually

25
00:01:50,692 --> 00:01:54,126
totally manual. We choose inputs by hand, we decide what

26
00:01:54,148 --> 00:01:57,534
to run by hand. We write assertions for

27
00:01:57,572 --> 00:02:01,054
a particular input or giving a particular output.

28
00:02:01,182 --> 00:02:05,154
So let's see what else we could automate. And we're going to use the example,

29
00:02:05,352 --> 00:02:08,978
thanks to my friend David, not of reversing a list twice.

30
00:02:09,154 --> 00:02:12,774
We're going to use the example of sorting a list. Sorting is

31
00:02:12,812 --> 00:02:17,000
a classic algorithm, and you've probably all sorted things a few times yourself.

32
00:02:17,370 --> 00:02:21,046
So our classic sorting tests might look something like this. We say

33
00:02:21,068 --> 00:02:23,962
that if we sort a list of integers, one, two, three,

34
00:02:24,016 --> 00:02:27,814
we get one, two three. So we're checking that started things stay sorted.

35
00:02:27,942 --> 00:02:31,466
Or if we sort a list of floating point numbers, we get the

36
00:02:31,488 --> 00:02:35,018
same sorted list, but the elements are floats. This time, because we haven't actually changed

37
00:02:35,034 --> 00:02:38,974
the elements lands, we'll check that we can sort things that aren't numeric as

38
00:02:39,012 --> 00:02:42,942
well. In order to avoid repeating ourselves, we might use a parameterized test.

39
00:02:43,076 --> 00:02:46,626
This makes it much easier to add more examples later as they come up in

40
00:02:46,648 --> 00:02:50,338
our regression testing, or if bugs are reported by customers. It's a

41
00:02:50,344 --> 00:02:53,538
little uglier, but it does help scale out our test suite to

42
00:02:53,544 --> 00:02:57,662
more examples. My real question though is, is this actually automated?

43
00:02:57,726 --> 00:03:00,466
We've had to think of every input and every output,

44
00:03:00,578 --> 00:03:03,766
and in particular we've had to come up with the outputs pretty

45
00:03:03,788 --> 00:03:06,950
much by hand. We've just written down what we know the right answer should be.

46
00:03:07,020 --> 00:03:10,762
But what if we don't know what the right answer should be? Well, one option

47
00:03:10,816 --> 00:03:14,566
would be we can compare our sort function to a trusted

48
00:03:14,598 --> 00:03:17,706
sort function. Maybe we have the one from before the

49
00:03:17,728 --> 00:03:21,242
refactoring, or the single threaded version, or a very

50
00:03:21,296 --> 00:03:24,202
simple bubble sort, for example, that we're confident is correct,

51
00:03:24,256 --> 00:03:27,454
but is too slower to use in production. If we don't even have that,

52
00:03:27,492 --> 00:03:30,846
though, all is not lost. We don't have the known good version, but we

53
00:03:30,868 --> 00:03:34,638
can still check for particular errors, and this test will

54
00:03:34,724 --> 00:03:38,238
raise an exception if we ever return a list which is not sorted.

55
00:03:38,414 --> 00:03:41,966
The problem is that it just checks that the output

56
00:03:41,998 --> 00:03:45,650
is sorted, not that it's the correct sorted list. And as an example,

57
00:03:45,720 --> 00:03:49,022
I would point out that the empty list is always in order.

58
00:03:49,176 --> 00:03:52,866
So if we don't want to allow the empty list as a super fast performance

59
00:03:52,898 --> 00:03:57,346
optimization, we might want to check thats we have the same size of output

60
00:03:57,378 --> 00:04:00,442
as we had of the input. And additionally we'll check that we have the right

61
00:04:00,496 --> 00:04:04,138
elements by checking that we have the same set of elements in the output as

62
00:04:04,144 --> 00:04:08,140
we did in the input. Now this isn't quite perfect.

63
00:04:08,670 --> 00:04:12,166
First, it only works for lists where the arguments

64
00:04:12,198 --> 00:04:15,726
are hashable. Thats is, we can put them in a set that's basically fine for

65
00:04:15,748 --> 00:04:19,006
now, but it also permits an evil implementation where

66
00:04:19,028 --> 00:04:23,102
if I had the list one two one, I could sort it by

67
00:04:23,156 --> 00:04:26,926
replacing it with the list one two two. So I've actually changed one of the

68
00:04:26,948 --> 00:04:30,478
elements, but because it was a duplicate of one element, and it's now a duplicate

69
00:04:30,494 --> 00:04:33,698
of a different element, the test would still pass. To deal with that,

70
00:04:33,784 --> 00:04:37,234
we could check that by the mathematical definition,

71
00:04:37,362 --> 00:04:40,194
the output is a permutation of the input.

72
00:04:40,322 --> 00:04:44,390
Now this is a complete test. These only problem is it's super

73
00:04:44,460 --> 00:04:48,134
slow for large lists, and so our final enhancement is

74
00:04:48,172 --> 00:04:51,654
to use the collections counter class. So we're not just checking that we have

75
00:04:51,692 --> 00:04:54,986
the same number and the same set of elements, but that we have

76
00:04:55,008 --> 00:04:58,266
the same number of each element in the output as in the

77
00:04:58,288 --> 00:05:01,670
input. And so we've just invented what's called propertybased testing.

78
00:05:01,750 --> 00:05:05,086
The two properties of the function that we want to test are that when you

79
00:05:05,108 --> 00:05:09,194
sort a thing, the output is in order and thats the outputs

80
00:05:09,242 --> 00:05:12,478
has the same elements as the input list. And so these are

81
00:05:12,484 --> 00:05:15,902
the two properties of the sorting function lands if we test them. This actually

82
00:05:15,956 --> 00:05:19,394
is the complete definition of sorting. If we take an input list and we return

83
00:05:19,432 --> 00:05:23,586
can output with the same elements in ascending or at lets nondescending order,

84
00:05:23,688 --> 00:05:27,026
then we've sorted it. I don't want to go too far though, like this

85
00:05:27,048 --> 00:05:31,554
is a fine test, and it's actually pretty rare to have a complete specification

86
00:05:31,602 --> 00:05:35,094
where you can list out and test every single property. And unless someone is like

87
00:05:35,132 --> 00:05:38,818
deliberately trying to sneak something past youll test suite, which code review should catch,

88
00:05:38,914 --> 00:05:42,426
this kind of test is going to do really well too. But in

89
00:05:42,448 --> 00:05:45,898
this example we've still got kind of one last problem,

90
00:05:46,064 --> 00:05:49,814
which is we still have to come up with the arguments,

91
00:05:49,862 --> 00:05:53,866
the inputs to our test somehow. And that means that

92
00:05:54,048 --> 00:05:57,566
however carefully we think of our inputs, we're not going

93
00:05:57,588 --> 00:06:00,778
to think of anything for our tests that we didn't think of when we wrote

94
00:06:00,794 --> 00:06:04,206
the code in the first place. So what we need is some way

95
00:06:04,228 --> 00:06:07,314
to have the computer or a random number generator come

96
00:06:07,352 --> 00:06:10,526
up with examples for us, and then we can use our existing

97
00:06:10,558 --> 00:06:14,686
property based tests. And that's exactly what my library hypothesis

98
00:06:14,718 --> 00:06:18,642
is for. It lets you specify what kind of inputs the test

99
00:06:18,696 --> 00:06:22,342
function should have. Lands. Then youll write the test function that should pass for every

100
00:06:22,396 --> 00:06:26,054
input. So using that exact same test body that we've had here, we can say

101
00:06:26,092 --> 00:06:29,638
that if our argument, that is our input, is either

102
00:06:29,724 --> 00:06:33,402
a list of some mix of integers and floating point numbers,

103
00:06:33,536 --> 00:06:37,366
or a list of strings, we can't sort a list of mixed strings

104
00:06:37,398 --> 00:06:40,570
and numbers because we can't compare those in python, but we can sort

105
00:06:40,640 --> 00:06:44,414
either kind of list then run the same tests. If you

106
00:06:44,452 --> 00:06:48,522
do run this though, the test will actually fail. And it will fail,

107
00:06:48,586 --> 00:06:51,822
because not a number compares unequal to itself.

108
00:06:51,956 --> 00:06:54,910
It's always false, no matter what the order should be.

109
00:06:54,980 --> 00:06:58,626
And in fact, if you try sorting lists with lands in them, you'll discover that

110
00:06:58,648 --> 00:07:02,226
things get very complicated very quickly. But for

111
00:07:02,248 --> 00:07:05,906
this kind of demo, it's perfectly fine just to say, actually, we don't care

112
00:07:05,928 --> 00:07:09,586
about Nan, that's just not part of the property of sorted that we're testing.

113
00:07:09,698 --> 00:07:13,062
So I think propertybased testing is great, and I want you to get

114
00:07:13,116 --> 00:07:17,142
started. And in order to do that, I've got a foolproof three

115
00:07:17,196 --> 00:07:20,390
point plan for you. The first is just to pip install

116
00:07:20,460 --> 00:07:23,994
hypothesis. It works on any supported version of Python three super

117
00:07:24,032 --> 00:07:27,030
stable these. Second is to havent a skim of the documentation,

118
00:07:27,110 --> 00:07:30,538
and the third is to find lots of bugs and

119
00:07:30,624 --> 00:07:33,790
hopefully profit to make it easier to get started,

120
00:07:33,860 --> 00:07:37,546
though, I've actually developed a tool I call the hypothesis ghostwriting,

121
00:07:37,658 --> 00:07:41,470
where you can get hypothesis to write your tests for you.

122
00:07:41,540 --> 00:07:44,526
Let's have a look at that. First of all, of course you can see the

123
00:07:44,548 --> 00:07:48,066
help text if you ask for it. We've got various options and flags that

124
00:07:48,088 --> 00:07:51,634
you can see, as well as a few suggested things, so let's start by getting

125
00:07:51,672 --> 00:07:55,646
the ghostwriting to produce a sort function for us. Of course there's

126
00:07:55,678 --> 00:07:59,330
no sort built in, so let's look at sort ed instead. The actual

127
00:07:59,400 --> 00:08:02,946
thing you can see here that hypothesis has already noticed two arguments

128
00:08:02,978 --> 00:08:06,390
that we forgot to test in our earlier demo. That is the key function,

129
00:08:06,460 --> 00:08:10,214
and whether or not to sort in reverse order. But the

130
00:08:10,252 --> 00:08:13,446
other thing to note is that it's just said sorted,

131
00:08:13,478 --> 00:08:16,922
so it's just called the function without any assertions in the body of the test.

132
00:08:17,056 --> 00:08:20,090
This is surprisingly useful, but we can do better.

133
00:08:20,160 --> 00:08:23,306
Hypothesis knows about item potence. That is,

134
00:08:23,408 --> 00:08:27,354
if you sort a thing a second time, it shouldn't change anything additional

135
00:08:27,402 --> 00:08:30,826
to sorting the first time. And if we ask hypothesis

136
00:08:30,858 --> 00:08:34,206
to test that, you can see it does indeed check that the result lands,

137
00:08:34,228 --> 00:08:37,794
then the repeat result are equal. That's not the only test

138
00:08:37,832 --> 00:08:40,926
we can write, though. We could check that two functions are equivalent,

139
00:08:41,038 --> 00:08:43,922
and this one is actually pretty useful. If, for example,

140
00:08:44,056 --> 00:08:48,438
you have a multithreaded version compared to a single threaded version before

141
00:08:48,524 --> 00:08:52,594
and after refactoring, or a simple slow version

142
00:08:52,642 --> 00:08:56,306
like perhaps bubble sort compared to a more complicated but faster version.

143
00:08:56,338 --> 00:08:59,894
In production, the classic properties also work too,

144
00:08:59,932 --> 00:09:03,706
so if you have commutative or associative properties, you can write

145
00:09:03,728 --> 00:09:07,082
tests for those. I'll admit, though, these don't tend to come up as often

146
00:09:07,136 --> 00:09:11,018
as what we call round trip properties, which just about everyone has.

147
00:09:11,184 --> 00:09:14,974
If you save data and then load it, and you want the original data back,

148
00:09:15,092 --> 00:09:18,686
you can write a test like this that asserts that if you compress the

149
00:09:18,708 --> 00:09:22,062
data and these decompress it or save it and load it,

150
00:09:22,116 --> 00:09:25,474
you should get exactly the same data youll started with. Back.

151
00:09:25,592 --> 00:09:29,486
This one's crucial because inputs, lands, output and data persistence

152
00:09:29,598 --> 00:09:33,166
tend to cross many abstraction layers, so they're surprisingly error

153
00:09:33,198 --> 00:09:36,694
prone. But also they're surprisingly easy to write really

154
00:09:36,732 --> 00:09:40,754
powerful tests for. So for pretty much everyone I would recommend writing

155
00:09:40,882 --> 00:09:44,774
these round trip tests. Let's look at a more complicated example with

156
00:09:44,812 --> 00:09:48,050
JSOn encoding. With JSON, the input is more

157
00:09:48,060 --> 00:09:51,190
complicated because it's recursive, and frankly

158
00:09:51,270 --> 00:09:55,318
the encoding options are also kind of scarily complicated.

159
00:09:55,494 --> 00:09:58,330
Just look at how many arguments there are here.

160
00:09:58,480 --> 00:10:02,006
Fortunately, we don't actually need to look at all of these, so I've

161
00:10:02,038 --> 00:10:05,534
just trimmed it down and that's going to look like this. So we say,

162
00:10:05,572 --> 00:10:09,434
well, given our object is recursive, so we have none,

163
00:10:09,482 --> 00:10:12,858
or booleans or floats or strings, that's JSON.

164
00:10:12,954 --> 00:10:16,194
Or we have lists of JSON, including the nested lists or

165
00:10:16,232 --> 00:10:19,886
dictionaries of string keys to JSON values,

166
00:10:19,918 --> 00:10:23,214
including maybe nested lets lands dictionaries.

167
00:10:23,342 --> 00:10:27,166
But we've still preserved these other things, so we may or may not disallow

168
00:10:27,198 --> 00:10:30,194
nan. We might or might not check whether we have circular objects.

169
00:10:30,242 --> 00:10:34,150
We might or might not ensure that the output is ASCII instead of UTF eight,

170
00:10:34,300 --> 00:10:37,730
and we might or might not sort the keys in all of our objects.

171
00:10:37,890 --> 00:10:41,686
So these are nice just to let vary, because we're

172
00:10:41,718 --> 00:10:45,114
claiming these should have no impact on the actual body

173
00:10:45,152 --> 00:10:48,826
of the test. Let's see if Pytest agrees with us. This is

174
00:10:48,848 --> 00:10:52,346
pretty simple. We have a test function, we just run it, and we've

175
00:10:52,378 --> 00:10:55,786
been given two distinct failures by hypothesis.

176
00:10:55,898 --> 00:10:59,854
In the first one we've discovered thats of course the floating point,

177
00:10:59,892 --> 00:11:03,530
not a number value is unequal to itself. Yay for

178
00:11:03,540 --> 00:11:07,522
not a number. We'll see more of it later. And as our second

179
00:11:07,656 --> 00:11:11,454
distinct failure, we've discovered that if allow can is false

180
00:11:11,582 --> 00:11:15,854
and we pass infinity, then encoding is actually invalid,

181
00:11:15,902 --> 00:11:19,286
because this is a violation of the strict JSON spec. So I'm going

182
00:11:19,308 --> 00:11:23,542
to fix that. In this case, we'll just say, well, we will always

183
00:11:23,676 --> 00:11:27,014
allow non finite values just for the purpose of this test,

184
00:11:27,132 --> 00:11:30,918
and we'll assume, that is, we'll tell hypothesis to reject the input

185
00:11:31,014 --> 00:11:34,426
if it's not equal to itself. That's like an

186
00:11:34,448 --> 00:11:37,642
extra powerful assert. And then if we run this

187
00:11:37,696 --> 00:11:42,686
version, what do you think we're going to see in

188
00:11:42,708 --> 00:11:46,314
this case? We see that hypothesis finds another failing

189
00:11:46,362 --> 00:11:49,386
example. If you have a list containing Nan,

190
00:11:49,498 --> 00:11:51,840
then it actually compares equal to itself.

191
00:11:52,450 --> 00:11:56,990
This, it turns out, is thanks to a performance optimization in cpython

192
00:11:57,150 --> 00:12:00,782
for list equality. It will compare itself to the other list by identity

193
00:12:00,846 --> 00:12:04,446
first, which allows you to skip the chose in performance of doing deep

194
00:12:04,478 --> 00:12:07,670
comparisons when you don't need to. The only problem

195
00:12:07,740 --> 00:12:11,906
is that can kind of breaks the object model. So I'll

196
00:12:11,938 --> 00:12:15,794
instead do the correct fix, which is to just pass allow Nan

197
00:12:15,842 --> 00:12:19,514
equals false to our input generator. And so this

198
00:12:19,552 --> 00:12:23,414
ensures that we'll just never generate Nan. And with allow Nan equals

199
00:12:23,462 --> 00:12:27,046
just true, we'll also allow non

200
00:12:27,078 --> 00:12:30,810
finite examples and this test finally passes.

201
00:12:31,230 --> 00:12:35,120
All right, back to the talk. If you can't ghostwriting your test,

202
00:12:35,570 --> 00:12:39,198
because for example, you already have a tests suite that you don't just want

203
00:12:39,204 --> 00:12:43,006
to throw out and start over with, then of course we could migrate some

204
00:12:43,028 --> 00:12:47,106
of our tests incrementally. I'm going to walk you through migrating a test

205
00:12:47,208 --> 00:12:50,706
for something that looks a lot like git. And we say if

206
00:12:50,728 --> 00:12:54,142
we create an empty repository lands, check out a new branch,

207
00:12:54,286 --> 00:12:57,598
then that new branch is the name of our active branch.

208
00:12:57,694 --> 00:13:00,246
The idea here is that I want to show you thats you can do this

209
00:13:00,268 --> 00:13:03,686
for kind of business logicy things. And I'm going to say like

210
00:13:03,708 --> 00:13:07,142
the details of how git works are pretty much like business logic. Rather thats

211
00:13:07,196 --> 00:13:10,618
pure algorithmic stuff. But this tests kind

212
00:13:10,624 --> 00:13:14,106
of also leaves me with a bunch of questions like what exactly

213
00:13:14,208 --> 00:13:17,558
are valid names for branches? And does it work for non

214
00:13:17,574 --> 00:13:20,714
empty repositories? So the first thing we can

215
00:13:20,752 --> 00:13:23,838
do is just refactor our test a little to pass in the name of the

216
00:13:23,844 --> 00:13:27,246
branch as an argument to the function. And this just

217
00:13:27,268 --> 00:13:30,814
says semantically it should work for any branch name, not just for new

218
00:13:30,852 --> 00:13:34,202
branch. And then we can refactor thats again to use hypothesis

219
00:13:34,266 --> 00:13:37,570
and say that, well, for any branch name.

220
00:13:37,640 --> 00:13:41,154
And it happens that we'll just generate new branch for now, this test should

221
00:13:41,192 --> 00:13:45,630
pass. And then we could share that logic between multiple tests.

222
00:13:45,790 --> 00:13:49,526
Again, so far we've made no semantic changes at

223
00:13:49,548 --> 00:13:52,902
all to this test function, but the meaning is already a little

224
00:13:52,956 --> 00:13:56,374
clearer to me. Given any valid branch name, this test should

225
00:13:56,412 --> 00:14:00,630
pass. And now it's time to try to improve our branch name strategy.

226
00:14:00,790 --> 00:14:03,974
And as it turns out, git has a pretty complicated

227
00:14:04,022 --> 00:14:07,046
spec for branch names. And then the various hosting

228
00:14:07,078 --> 00:14:10,506
services also put length limits on there are certain things about

229
00:14:10,528 --> 00:14:13,690
printable characters. You can't start or end with a dash,

230
00:14:13,770 --> 00:14:16,974
you can't contain white space, except maybe sometimes youll can.

231
00:14:17,092 --> 00:14:20,794
But we're just going to say for simplicity. Actually, if your branch

232
00:14:20,842 --> 00:14:24,586
name consists of ascii letters only, and it's of a reasonable length,

233
00:14:24,698 --> 00:14:28,418
then the test should pass. And we'll come back and refactor that later

234
00:14:28,504 --> 00:14:32,514
if we decide it's worth it. And now, looking at the body of the test,

235
00:14:32,712 --> 00:14:36,146
this is a decent test, but if we want to clarify that it works for

236
00:14:36,248 --> 00:14:40,054
nonempty repositories as well, we might want to end up something like

237
00:14:40,092 --> 00:14:44,034
this. We say, given any valid branch name and any git repository,

238
00:14:44,162 --> 00:14:48,214
so long as the branch name isn't already a branch. When we check

239
00:14:48,252 --> 00:14:51,466
it out, check out that branch name and create the branch, it becomes the

240
00:14:51,488 --> 00:14:54,502
active branch. So there we are. That's how I'd refactor.

241
00:14:54,646 --> 00:14:58,074
You can run these, of course, in your CI suite or

242
00:14:58,112 --> 00:15:01,338
locally, just as you would for unit tests. But that's not the only thing you

243
00:15:01,344 --> 00:15:04,946
can do with property based testing. You can also use coverage

244
00:15:04,998 --> 00:15:08,654
guided fuzzing as a way to save you from having

245
00:15:08,772 --> 00:15:12,606
to decide what test to run and let the computer work out how

246
00:15:12,628 --> 00:15:16,482
to search for things for a much longer time. Google has this tool called

247
00:15:16,536 --> 00:15:19,758
Etheris, which is a wrapper around lib fuzzer, and it's

248
00:15:19,774 --> 00:15:23,202
designed to run a single function for hours or even days.

249
00:15:23,336 --> 00:15:26,646
This is super powerful. If you have C extensions, for example, it's a great way

250
00:15:26,668 --> 00:15:30,322
to find memory lets or address errors or undefined behavior

251
00:15:30,386 --> 00:15:33,830
using the sanitizers and hypothesis integrates with thats

252
00:15:33,900 --> 00:15:37,782
really well. So you can generate really complex inputs or behavior using

253
00:15:37,836 --> 00:15:41,206
hypothesis and then drive that with a fuzzer. Or if you

254
00:15:41,228 --> 00:15:44,714
want to do that for an entire test suite, I have a tool called

255
00:15:44,752 --> 00:15:49,014
hypofuzz that you can find@hypofuzz.com which is pure python,

256
00:15:49,062 --> 00:15:52,746
so it works on any operating system, not just on Linux, and it runs

257
00:15:52,778 --> 00:15:56,330
all of your tests simultaneously, trying to work out adaptively

258
00:15:56,410 --> 00:16:00,318
which ones are making the fastest progress. Let's have a look at that.

259
00:16:00,404 --> 00:16:03,726
Now, I started this running just before the talk,

260
00:16:03,828 --> 00:16:07,246
and so you can see I've got pretty much the whole test suite

261
00:16:07,278 --> 00:16:10,686
here for a tool of mine called hypothesmith for generating python source

262
00:16:10,718 --> 00:16:13,938
code. And we can see these number of branches or the

263
00:16:13,944 --> 00:16:17,234
coverage generated by each separate test. And you can also see that

264
00:16:17,272 --> 00:16:20,742
they've been running different numbers of examples based on which ones are

265
00:16:20,796 --> 00:16:24,770
fastest, and discovering new inputs or new coverage the quickest.

266
00:16:24,930 --> 00:16:28,342
If we go down here, we can also see that we've actually

267
00:16:28,396 --> 00:16:31,798
discovered a couple of bugs. So this one,

268
00:16:31,964 --> 00:16:36,230
testing ast unpass failed just because as unpass

269
00:16:36,310 --> 00:16:39,510
is a new function and it doesn't exist on this version of Python.

270
00:16:39,590 --> 00:16:43,426
But if we skip that and we go to the testing the black auto formatter,

271
00:16:43,478 --> 00:16:46,926
it seemed to raise an invalid input on this particular,

272
00:16:47,108 --> 00:16:50,718
admittedly pretty weird thing. This is genuinely a new bug to me,

273
00:16:50,804 --> 00:16:54,206
and so I'm going to have to go report that after the talk. You can

274
00:16:54,228 --> 00:16:57,454
also see about how long it took in both the number of inputs lands

275
00:16:57,492 --> 00:17:00,602
in the time, as well as a sort of diverse sample

276
00:17:00,666 --> 00:17:04,560
of the kinds of inputs that hyperfuzz fed to youll function.

277
00:17:05,290 --> 00:17:08,710
All right, so that's pretty much my talk.

278
00:17:08,780 --> 00:17:12,454
I want you to stop writing tests by hand and instead use

279
00:17:12,492 --> 00:17:16,214
hypothesis lands property based testing to come up with the inputs for you to

280
00:17:16,252 --> 00:17:20,210
automatically explore your code, to write your test code, and ultimately

281
00:17:20,290 --> 00:17:24,054
to even decide what tests to be run. These tools together can

282
00:17:24,092 --> 00:17:27,638
make testing both easier and more powerful, and I hope you enjoy using them as

283
00:17:27,644 --> 00:17:28,180
much as I have.

