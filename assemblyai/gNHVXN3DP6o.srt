1
00:00:17,530 --> 00:00:21,230
Hey everybody, my name is Malisha McGregor and

2
00:00:21,300 --> 00:00:24,902
today I'm going to talk to you about making VR more

3
00:00:24,996 --> 00:00:27,590
interesting with JavaScript and brainjs.

4
00:00:28,170 --> 00:00:31,446
So before we jump into that, I want to give you a little bit of

5
00:00:31,468 --> 00:00:35,634
background on me. Right now I am a developer advocate

6
00:00:35,682 --> 00:00:39,702
at Conducto and we're working on these really cool CI CD

7
00:00:39,766 --> 00:00:43,254
tool and data science pipeline tool that'll

8
00:00:43,302 --> 00:00:47,050
make it easier for you to get just all of your apps out,

9
00:00:47,200 --> 00:00:50,542
and it's not using YaML, so there's that.

10
00:00:50,676 --> 00:00:54,382
But if you're interested in more DevOps stuff or

11
00:00:54,436 --> 00:00:58,350
more VR and JavaScript and machine learning, you can also

12
00:00:58,420 --> 00:01:01,550
follow me on Twitter at flipped coding.

13
00:01:01,890 --> 00:01:05,314
So to kind of get things going, let's start

14
00:01:05,352 --> 00:01:09,106
with just a general overview of what we'll be talking about today.

15
00:01:09,288 --> 00:01:13,534
The first thing that we'll cover is just a little bit of background

16
00:01:13,582 --> 00:01:15,250
on virtual reality.

17
00:01:17,050 --> 00:01:20,342
Then we'll talk about making a VR app.

18
00:01:20,396 --> 00:01:24,114
So there will be a little bit of live ish

19
00:01:24,162 --> 00:01:27,858
coding so you can see kind of the approach you

20
00:01:27,884 --> 00:01:30,140
would take to make a real VR app.

21
00:01:31,870 --> 00:01:35,914
Then we'll jump back into the presentation and talk about

22
00:01:36,032 --> 00:01:40,060
a little bit of background on machine learning, neural networks in particular,

23
00:01:41,410 --> 00:01:45,242
and we'll talk about adding machine learning to these VR

24
00:01:45,306 --> 00:01:49,130
app. So we're actually going to apply the neural network

25
00:01:49,210 --> 00:01:53,150
to the VR app we're working on in this presentation.

26
00:01:54,550 --> 00:01:58,210
These we'll go over a few other considerations that usually

27
00:01:58,280 --> 00:02:00,930
get left out of most applications.

28
00:02:01,910 --> 00:02:05,586
And finally, we'll wrap up with just some key takeaways and

29
00:02:05,608 --> 00:02:08,920
things that I really hope you remember and take away from this.

30
00:02:09,850 --> 00:02:13,366
So to jump right into it, let's talk about a

31
00:02:13,388 --> 00:02:17,238
little bit of background on VR. As you all know,

32
00:02:17,324 --> 00:02:21,146
this is a relatively new area of tech.

33
00:02:21,248 --> 00:02:25,030
It's been heavily dependent on the progress of the hardware,

34
00:02:25,190 --> 00:02:29,590
so there aren't a lot of production

35
00:02:29,670 --> 00:02:32,862
code games out there, but there are more than you would think.

36
00:02:32,996 --> 00:02:36,734
It's just newer, so it's taken some time to get

37
00:02:36,772 --> 00:02:40,730
off the ground. But these applications

38
00:02:40,890 --> 00:02:44,590
have such a wide range of industries,

39
00:02:44,670 --> 00:02:48,222
they touch. So you start seeing VR

40
00:02:48,286 --> 00:02:51,986
in medicine, these, they use it to help train med school students.

41
00:02:52,168 --> 00:02:55,170
And of course you've seen it in video games.

42
00:02:55,590 --> 00:03:00,034
My personal favorite VR game is super Hot, so it's

43
00:03:00,162 --> 00:03:03,574
already been there. And then there are other forms of

44
00:03:03,612 --> 00:03:07,774
entertainment. So maybe one day we will all just plug into the Matrix,

45
00:03:07,842 --> 00:03:09,660
but we'll be okay with it.

46
00:03:11,790 --> 00:03:15,594
But what's so interesting about VR for developers in

47
00:03:15,632 --> 00:03:19,414
particular, is that this is a completely new career

48
00:03:19,462 --> 00:03:23,006
path. So if you've been wanting to do something

49
00:03:23,188 --> 00:03:26,942
a little bit more artistic, but you don't want to get into video

50
00:03:26,996 --> 00:03:31,018
games development. This might be a really good alternative

51
00:03:31,114 --> 00:03:35,294
because you'll still get to work with things like assets

52
00:03:35,422 --> 00:03:39,182
and different physics engines.

53
00:03:39,246 --> 00:03:42,610
So it's kind of a way to

54
00:03:42,680 --> 00:03:46,710
get into more of that artistic side of coding,

55
00:03:47,050 --> 00:03:50,230
but you're still using these exact same languages.

56
00:03:52,010 --> 00:03:55,410
And of course, as the hardware keeps improving,

57
00:03:55,570 --> 00:03:59,066
there's going to be a need for more developers, there's going to be a

58
00:03:59,088 --> 00:04:02,380
need for more applications for this kind of technology.

59
00:04:02,750 --> 00:04:06,714
So keep an eye on those Oculus riff headsets or

60
00:04:06,752 --> 00:04:10,478
whatever Google is making at the time, because as

61
00:04:10,564 --> 00:04:14,174
this tech keeps getting pushed forward on the hardware side,

62
00:04:14,292 --> 00:04:17,600
it's going to need the software to support it.

63
00:04:18,930 --> 00:04:22,834
Speaking of which, now is the time that we get

64
00:04:22,872 --> 00:04:26,322
into the code, and I'll kind of walk you through

65
00:04:26,456 --> 00:04:30,222
how we make a VR application with JavaScript,

66
00:04:30,366 --> 00:04:33,310
in particular with the Aframe library.

67
00:04:33,470 --> 00:04:37,238
So before we jump straight in, I want to give you an intro

68
00:04:37,324 --> 00:04:40,982
on this game. It was originally inspired by

69
00:04:41,036 --> 00:04:45,000
Super Hot, and then it took a completely different turn.

70
00:04:45,370 --> 00:04:49,210
Basically we're making a really fancy

71
00:04:49,870 --> 00:04:53,734
search and find game. Like there's objects hidden

72
00:04:53,782 --> 00:04:57,802
throughout this world and the player is supposed to go around and find

73
00:04:57,856 --> 00:05:01,006
them all. With that being said,

74
00:05:01,188 --> 00:05:04,938
let's go ahead and look at some HTML.

75
00:05:05,114 --> 00:05:08,702
I bet you thought we were going to jump straight into javascript, but no,

76
00:05:08,756 --> 00:05:12,414
not yet. So first thing we

77
00:05:12,452 --> 00:05:16,306
have to have this index HTML file because it

78
00:05:16,328 --> 00:05:18,660
is the root file for the project.

79
00:05:19,110 --> 00:05:22,354
And what we're doing here is first

80
00:05:22,472 --> 00:05:26,166
we're importing the Aframe library, so that'll give

81
00:05:26,188 --> 00:05:30,210
us access to all these methods and nice fancy parameters

82
00:05:30,290 --> 00:05:33,958
they have. Then we're importing another

83
00:05:34,044 --> 00:05:37,882
library that's completely optional. This is

84
00:05:37,936 --> 00:05:41,562
just a GitHub repo that some

85
00:05:41,616 --> 00:05:45,802
kind soul put together to make different environments for

86
00:05:45,856 --> 00:05:49,562
Aframe. So if you want to kind of play

87
00:05:49,616 --> 00:05:53,534
around with Aframe before you make these commitment in making an

88
00:05:53,572 --> 00:05:57,514
entire world for it, you might consider using this package

89
00:05:57,562 --> 00:06:01,962
in particular for just some test environments.

90
00:06:02,106 --> 00:06:05,362
So I have nothing to do with it, but it is a really cool

91
00:06:05,416 --> 00:06:09,134
library. And here you'll

92
00:06:09,182 --> 00:06:12,754
see we have a couple of custom scripts that

93
00:06:12,792 --> 00:06:16,194
we'll talk about in due time because they relate

94
00:06:16,242 --> 00:06:17,800
to some of the other things.

95
00:06:19,610 --> 00:06:23,538
But just to jump right into Aframe,

96
00:06:23,714 --> 00:06:27,206
inside of our body tag, we'll have these

97
00:06:27,308 --> 00:06:31,482
other tags that are just a tags, and they're all

98
00:06:31,536 --> 00:06:35,542
representative of different entities that are in Aframe.

99
00:06:35,686 --> 00:06:39,418
So every aframe application will have this,

100
00:06:39,504 --> 00:06:42,462
a scene. And if I minimize this,

101
00:06:42,516 --> 00:06:46,446
you see, these scene contains everything in

102
00:06:46,548 --> 00:06:50,174
our VR world. And what

103
00:06:50,212 --> 00:06:53,858
we do is we add different components to the world.

104
00:06:54,024 --> 00:06:57,662
The first thing we add would be the assets

105
00:06:57,726 --> 00:07:02,002
that we need to use throughout the world. So in this

106
00:07:02,056 --> 00:07:05,306
case, I'm just going to import a few textures,

107
00:07:05,438 --> 00:07:09,014
which really are just images that you apply to

108
00:07:09,052 --> 00:07:12,642
different entities in Aframe.

109
00:07:12,706 --> 00:07:16,274
So you see we got a wood texture, metal, Brickstone,

110
00:07:16,322 --> 00:07:19,930
blah. One thing, I threw this in here

111
00:07:20,000 --> 00:07:23,802
just so you all would get to see it. But you can add

112
00:07:23,856 --> 00:07:27,322
your own music to your VR app. It's pretty easy.

113
00:07:27,376 --> 00:07:30,686
It's just an audio tag and you import the

114
00:07:30,708 --> 00:07:33,520
file from whatever directory is in your project.

115
00:07:34,050 --> 00:07:37,834
This won't play because I figured you guys wouldn't

116
00:07:37,882 --> 00:07:41,438
want to hear some kind of game music over the entire

117
00:07:41,524 --> 00:07:45,346
talk. But the first thing you import in your scene would

118
00:07:45,368 --> 00:07:48,926
be your assets. And that's just so they're

119
00:07:48,958 --> 00:07:53,010
ready for when you start to use these later in this file.

120
00:07:53,590 --> 00:07:57,442
And we're not going to go through every HTML element,

121
00:07:57,506 --> 00:08:01,606
but I want to make sure you understand what's happening with the

122
00:08:01,788 --> 00:08:05,542
Aframe stuff, so we might get really close. The first

123
00:08:05,596 --> 00:08:08,860
thing we're going to look at is this a box.

124
00:08:09,310 --> 00:08:13,082
So this is just a primitive entity that gives us

125
00:08:13,216 --> 00:08:16,906
a box. We have a box in the

126
00:08:16,928 --> 00:08:19,980
world now, and it's got this id,

127
00:08:20,370 --> 00:08:24,046
it's got a height of three. But Aframe is awesome.

128
00:08:24,148 --> 00:08:28,250
So it's 3 meters. All of the units

129
00:08:28,330 --> 00:08:31,534
for height or position or things like that

130
00:08:31,572 --> 00:08:34,802
in aframe are measured in meters. Just so you know,

131
00:08:34,856 --> 00:08:38,260
and aren't confused on what three actually means.

132
00:08:38,790 --> 00:08:42,578
And then the rotation is how the object

133
00:08:42,744 --> 00:08:45,750
is originally configured in the world.

134
00:08:45,900 --> 00:08:49,206
In this case, there's no rotation around the x,

135
00:08:49,388 --> 00:08:53,782
there's 60 degree rotation around the y axis and

136
00:08:53,836 --> 00:08:57,270
a 45 degree rotation around the z axis.

137
00:08:58,590 --> 00:09:02,140
These to show you how we use our

138
00:09:02,510 --> 00:09:06,630
assets, we're applying this wooden texture

139
00:09:06,710 --> 00:09:10,426
to this box. So that means this image

140
00:09:10,458 --> 00:09:14,878
up here will get applied as the surface for

141
00:09:15,044 --> 00:09:18,494
this entity. So all that means is that

142
00:09:18,532 --> 00:09:20,990
the box is going to look like a wooden block.

143
00:09:22,450 --> 00:09:24,900
And then here you'll see the position.

144
00:09:25,270 --> 00:09:29,314
So this is just the initial position that

145
00:09:29,432 --> 00:09:33,038
the entity will be in when the VR app loads.

146
00:09:33,134 --> 00:09:36,662
And again, these are all in meters. So we

147
00:09:36,716 --> 00:09:40,662
are 37 meters in these positive x

148
00:09:40,716 --> 00:09:44,454
direction. It's 1 meter in the

149
00:09:44,492 --> 00:09:48,214
y direction, so that it's not just sitting on these ground.

150
00:09:48,342 --> 00:09:51,930
And these, we have it negative 37

151
00:09:52,000 --> 00:09:55,946
meters in the z direction. So that gives us

152
00:09:56,128 --> 00:10:00,474
how our left, right, front, back positioning

153
00:10:00,522 --> 00:10:04,414
works. And then this is another

154
00:10:04,532 --> 00:10:07,950
attribute. So all of the aframe entities use

155
00:10:08,020 --> 00:10:12,046
attributes, and you won't see this one

156
00:10:12,228 --> 00:10:15,554
maybe all of the time, but it does help when you

157
00:10:15,592 --> 00:10:19,602
need movements that are just going

158
00:10:19,656 --> 00:10:22,878
on in the background. If it adds to the environment,

159
00:10:22,974 --> 00:10:27,554
don't just have things moving because it's cool. Make sure it's something the user

160
00:10:27,682 --> 00:10:30,760
will like or they'll get some use from.

161
00:10:31,370 --> 00:10:34,674
But in this case, all we're doing is making this block

162
00:10:34,722 --> 00:10:37,330
float up and down to show you what it's like.

163
00:10:37,500 --> 00:10:41,306
So we are animating the y position of

164
00:10:41,328 --> 00:10:45,530
the block, and we're moving it from its initial position

165
00:10:45,680 --> 00:10:49,660
to 2.2 meters. And basically

166
00:10:50,210 --> 00:10:53,630
it does this up down movement

167
00:10:54,050 --> 00:10:58,042
over a two second duration, and it does it indefinitely.

168
00:10:58,186 --> 00:11:01,774
So this block is just floating between one and 2.2

169
00:11:01,812 --> 00:11:05,858
meters off the ground. So that's really all you need

170
00:11:06,024 --> 00:11:09,054
for entities in aframe.

171
00:11:09,182 --> 00:11:12,398
Then you can add your own custom attributes,

172
00:11:12,494 --> 00:11:15,826
which is where things get way more interesting. And we'll

173
00:11:15,858 --> 00:11:18,360
talk about this one in just a little bit.

174
00:11:19,370 --> 00:11:22,098
So there's more entities,

175
00:11:22,274 --> 00:11:26,162
blah. You've seen how those work. There's cylinders,

176
00:11:26,306 --> 00:11:30,410
there's a sphere, but there are few

177
00:11:30,480 --> 00:11:33,610
others that would be useful to know about.

178
00:11:33,760 --> 00:11:37,482
So this plane entity, you see, it's just

179
00:11:37,536 --> 00:11:41,782
an a plane. We can use this as

180
00:11:41,856 --> 00:11:45,150
like a sheet in the world.

181
00:11:45,300 --> 00:11:49,342
If you need to put up a message, which of course is what we're doing

182
00:11:49,396 --> 00:11:52,570
with this, or you need to separate things somehow,

183
00:11:52,650 --> 00:11:56,514
a plane might be a good choice. So you see, it has

184
00:11:56,552 --> 00:12:00,142
a height and a width of 2 meters, so it's fairly

185
00:12:00,206 --> 00:12:03,234
large, and that's just where

186
00:12:03,272 --> 00:12:07,000
the position is with respect to the origin of the world.

187
00:12:07,610 --> 00:12:11,030
And inside this plane we have the

188
00:12:11,100 --> 00:12:13,954
base aframe entity.

189
00:12:14,082 --> 00:12:17,190
So when you want to make something super custom,

190
00:12:17,340 --> 00:12:21,114
or you want to have fine grained control over

191
00:12:21,152 --> 00:12:24,906
how your entities work, you might want to just use the a

192
00:12:24,928 --> 00:12:28,460
entity tag. It lets you set everything

193
00:12:28,910 --> 00:12:32,234
just by using attributes, so there are no presets,

194
00:12:32,282 --> 00:12:35,230
but you can build any of the other primitive shapes.

195
00:12:35,810 --> 00:12:39,482
But in this case it's just some text telling

196
00:12:39,546 --> 00:12:42,906
the player what all they need to find throughout

197
00:12:42,938 --> 00:12:46,722
the world. That's it. And just to

198
00:12:46,776 --> 00:12:50,354
wrap up in this file, there are a couple of things that you

199
00:12:50,392 --> 00:12:54,926
really need to know about. The first thing is the environment.

200
00:12:55,038 --> 00:12:59,266
I know you remember me mentioning that particular package earlier,

201
00:12:59,378 --> 00:13:03,046
but you need an environment for your world, or else the

202
00:13:03,068 --> 00:13:06,230
user is just going to be in a white, empty box,

203
00:13:06,300 --> 00:13:10,666
basically. And this environment isn't anything special,

204
00:13:10,848 --> 00:13:14,934
it's just something that came from that package

205
00:13:14,982 --> 00:13:18,838
that we imported earlier. So you can set all of these attributes

206
00:13:18,934 --> 00:13:22,590
based on what we imported and take a look at that library.

207
00:13:22,930 --> 00:13:26,382
But probably the most important thing about

208
00:13:26,436 --> 00:13:29,070
your VR world is the camera.

209
00:13:29,970 --> 00:13:33,874
It's really hard for users to get around your

210
00:13:33,912 --> 00:13:37,342
world or interact with it if they don't

211
00:13:37,406 --> 00:13:40,978
understand what they're looking at. So you want to take into

212
00:13:41,064 --> 00:13:44,786
consideration these point of view that a

213
00:13:44,808 --> 00:13:48,310
user needs to interact with your VR app

214
00:13:48,460 --> 00:13:52,054
the most effectively. In this case,

215
00:13:52,252 --> 00:13:56,278
we have our camera positioned right behind

216
00:13:56,364 --> 00:13:59,590
these user, so when they see the screen,

217
00:13:59,740 --> 00:14:03,674
it just looks like they're looking right in front of them. And the way

218
00:14:03,712 --> 00:14:07,386
we kind of give them some guidance in letting them know they're looking in

219
00:14:07,408 --> 00:14:11,422
front of them is this geometry attribute. We use it

220
00:14:11,476 --> 00:14:15,166
to add just a little black ring to the middle of

221
00:14:15,188 --> 00:14:18,110
the screen that moves around with the camera.

222
00:14:19,250 --> 00:14:22,802
And now I do want to go ahead and show

223
00:14:22,856 --> 00:14:25,460
you all how it works,

224
00:14:26,630 --> 00:14:29,922
but let me make sure I'm running the right

225
00:14:29,976 --> 00:14:33,042
command. There's always that

226
00:14:33,096 --> 00:14:33,700
chance.

227
00:14:36,170 --> 00:14:45,270
Okay, so I think that should be good to go ahead.

228
00:14:45,420 --> 00:14:48,140
Okay, so it is running,

229
00:14:49,790 --> 00:14:53,820
which means I should be able to just pull it up.

230
00:14:57,150 --> 00:15:00,894
Got to get out of that. So now we'll just go

231
00:15:00,932 --> 00:15:04,110
to localhost 80 80.

232
00:15:06,850 --> 00:15:10,638
And this is what the load screen for aframe looks like.

233
00:15:10,804 --> 00:15:14,820
But give it a second and the world will just

234
00:15:15,270 --> 00:15:19,058
appear just like that. So this is

235
00:15:19,144 --> 00:15:22,866
our VR world. And if you see

236
00:15:22,968 --> 00:15:27,042
we have that plane with the text on it, we have this little ring

237
00:15:27,106 --> 00:15:30,070
in the middle that follows the user's camera.

238
00:15:30,490 --> 00:15:34,946
And this is what the environment we chose looks like. So it's

239
00:15:34,978 --> 00:15:38,378
pretty awesome. You can just run around. Oh,

240
00:15:38,544 --> 00:15:42,394
we actually found something sweet. So I'm not going to show

241
00:15:42,432 --> 00:15:46,140
you what that does until we talk about this.

242
00:15:46,830 --> 00:15:50,638
I know you noticed up here we had that found

243
00:15:50,724 --> 00:15:54,750
item attribute and all that does is call this

244
00:15:54,820 --> 00:15:58,142
file. So with aframe you're able

245
00:15:58,196 --> 00:16:02,382
to set just some custom actions and

246
00:16:02,436 --> 00:16:06,146
different things that happen when a user interacts with objects in your

247
00:16:06,168 --> 00:16:10,046
world. And what we've done, this should look pretty familiar,

248
00:16:10,158 --> 00:16:13,950
is we've just gone through and gotten these elements

249
00:16:14,030 --> 00:16:17,526
that are in the world, and basically when

250
00:16:17,548 --> 00:16:21,320
you find it, it will move that object

251
00:16:21,690 --> 00:16:25,654
back to kind of the home base. So once you click on

252
00:16:25,692 --> 00:16:29,526
it, let me show you real quick. So we'll

253
00:16:29,558 --> 00:16:34,090
just go up to the object, go over here and

254
00:16:34,160 --> 00:16:38,170
it's gone. So let's see if we can actually

255
00:16:38,240 --> 00:16:41,662
get back to the main part.

256
00:16:41,796 --> 00:16:45,038
I think this is right. This is a lot. Yeah.

257
00:16:45,124 --> 00:16:49,150
So there it is. You found the metal sphere.

258
00:16:49,730 --> 00:16:53,106
That's it. So it's back here, and you

259
00:16:53,128 --> 00:16:57,282
need to go find everything else. But basically that

260
00:16:57,336 --> 00:17:00,530
custom attribute lets you add different event

261
00:17:00,600 --> 00:17:04,466
listeners to update things in your world. And in

262
00:17:04,488 --> 00:17:08,360
this case, we just want to move everything we find back to the base.

263
00:17:09,370 --> 00:17:13,142
With that being said, we can get back in

264
00:17:13,196 --> 00:17:16,982
here because you've actually made a VR app at this point,

265
00:17:17,116 --> 00:17:20,534
anybody can go interact with that like you're

266
00:17:20,582 --> 00:17:24,010
done. But if you want to be fancy,

267
00:17:24,430 --> 00:17:28,060
you can add some machine learning to it.

268
00:17:29,470 --> 00:17:33,662
So just to give you a little bit of background on machine learning,

269
00:17:33,796 --> 00:17:37,818
we'll go over neural networks. A neural network

270
00:17:37,914 --> 00:17:41,706
is just an algorithm that's used to make predictions.

271
00:17:41,898 --> 00:17:45,214
Honestly, that's all of machine learning. It's algorithms

272
00:17:45,262 --> 00:17:47,220
that make predictions on data.

273
00:17:48,230 --> 00:17:51,634
So a neural network in particular is made of

274
00:17:51,672 --> 00:17:54,910
layers of nodes. So what you see

275
00:17:55,000 --> 00:17:58,534
here is we have a lot of inputs, which are

276
00:17:58,572 --> 00:18:02,614
also called features in machine learning, and each of

277
00:18:02,652 --> 00:18:05,910
those inputs has a particular weight.

278
00:18:06,250 --> 00:18:09,930
The weight assigned to the input determines how

279
00:18:10,000 --> 00:18:13,830
much of an influence that particular input

280
00:18:13,910 --> 00:18:16,330
has on the predicted output.

281
00:18:17,310 --> 00:18:20,714
And usually there are multiple nodes,

282
00:18:20,842 --> 00:18:24,174
which leads to deep learning. So if

283
00:18:24,212 --> 00:18:28,362
you have a neural network with more than one node,

284
00:18:28,506 --> 00:18:31,694
you're doing deep learning. That's really all

285
00:18:31,732 --> 00:18:34,882
it is. Of course, it gets

286
00:18:35,016 --> 00:18:38,334
complicated as you start layering more nodes,

287
00:18:38,382 --> 00:18:41,842
but overall the concept is the exact same.

288
00:18:41,976 --> 00:18:46,054
You have some inputs, these have weight values assigned to

289
00:18:46,092 --> 00:18:50,246
them that dictate how much they influence the output value.

290
00:18:50,428 --> 00:18:55,186
All of that goes through some kind of fancy algorithm,

291
00:18:55,378 --> 00:18:58,614
and then you get an output. So that's

292
00:18:58,662 --> 00:19:01,420
the gist of how neural networks work.

293
00:19:02,910 --> 00:19:06,762
And then we'll talk about the library that I chose to use

294
00:19:06,816 --> 00:19:10,514
for this particular app, and it is brainjs,

295
00:19:10,582 --> 00:19:15,546
which is awesome. And there are a few reasons that I chose this over tensorflow,

296
00:19:15,658 --> 00:19:19,050
because I know that's kind of the standard JavaScript

297
00:19:19,130 --> 00:19:23,134
machine learning library, but brainjs

298
00:19:23,182 --> 00:19:26,674
is way easier to use. If you understand

299
00:19:26,792 --> 00:19:30,562
how to work with objects, arrays and arrays of

300
00:19:30,616 --> 00:19:35,090
objects, you're fine. You can do machine learning with JavaScript

301
00:19:36,010 --> 00:19:39,922
and with brainjs. You don't need as much of a mathematical

302
00:19:39,986 --> 00:19:43,474
background in machine learning as you do with Tensorflow,

303
00:19:43,522 --> 00:19:47,254
because Tensorflow, I will give

304
00:19:47,292 --> 00:19:51,514
it that. It does handle some complex problems

305
00:19:51,632 --> 00:19:55,622
a little bit better, but the syntax

306
00:19:55,686 --> 00:19:59,146
that it uses, it just needs you to have

307
00:19:59,248 --> 00:20:02,510
way more background knowledge than you actually need

308
00:20:02,580 --> 00:20:06,282
to implement a machine learning model. And brainjs

309
00:20:06,346 --> 00:20:09,626
gets rid of all of that. Plus the tutorials

310
00:20:09,658 --> 00:20:12,880
are super straight to the point and easy to understand.

311
00:20:13,910 --> 00:20:17,426
I tried to learn how to use tensorflow, and I got pretty far with

312
00:20:17,448 --> 00:20:21,726
it. I made some models, but it's

313
00:20:21,758 --> 00:20:25,446
a challenge figuring out what a tensor is and

314
00:20:25,548 --> 00:20:29,554
going through these documentation and just understanding

315
00:20:29,602 --> 00:20:32,818
how everything works together and what parameters you're

316
00:20:32,834 --> 00:20:36,950
supposed to put in which methods. Brainjs just doesn't

317
00:20:37,390 --> 00:20:41,318
do that. Again, if you can work with objects,

318
00:20:41,414 --> 00:20:44,714
arrays and arrays of objects, you can do

319
00:20:44,752 --> 00:20:46,570
machine learning in JavaScript.

320
00:20:48,590 --> 00:20:52,394
So part of a machine learning project includes choosing

321
00:20:52,442 --> 00:20:55,822
the features that might arguably be

322
00:20:55,876 --> 00:20:59,930
the most important part because it's going to directly

323
00:21:00,010 --> 00:21:03,714
influence what prediction you give

324
00:21:03,752 --> 00:21:07,118
to a user. So when you're choosing features,

325
00:21:07,214 --> 00:21:10,530
think about what prediction you're trying to make.

326
00:21:10,600 --> 00:21:14,850
So what's going to add the most value for a user?

327
00:21:16,230 --> 00:21:19,380
And then think about how are you going to get this information?

328
00:21:19,770 --> 00:21:23,186
Are you going to buy data? Are you going to ask users

329
00:21:23,218 --> 00:21:26,790
for data? Are you just going to find a way to take it from them?

330
00:21:26,940 --> 00:21:31,610
How do you get the information you need to make these features?

331
00:21:32,590 --> 00:21:36,282
And then again, I can't stress how important this

332
00:21:36,336 --> 00:21:39,674
is. What exactly are you trying to predict with your

333
00:21:39,712 --> 00:21:43,566
information that's going to determine the entire model,

334
00:21:43,668 --> 00:21:48,426
of course, because you'll need to know what inputs

335
00:21:48,458 --> 00:21:52,160
you need to get the prediction you're looking for.

336
00:21:53,090 --> 00:21:56,770
And then this is a fun one, we do these really

337
00:21:56,840 --> 00:22:00,466
cool tech projects, but at the end of the day,

338
00:22:00,648 --> 00:22:03,906
kind of the only thing that matters is will a user care if we make

339
00:22:03,928 --> 00:22:07,842
these update? So you're going through and making this really fancy

340
00:22:07,906 --> 00:22:11,254
machine learning program and it

341
00:22:11,292 --> 00:22:15,282
does all of these cool things and then you deploy it to production

342
00:22:15,346 --> 00:22:19,270
and nobody says anything because they didn't notice,

343
00:22:19,350 --> 00:22:23,098
or they noticed, but they didn't care. Before you spend

344
00:22:23,184 --> 00:22:26,858
the time investing into building a machine learning model,

345
00:22:27,024 --> 00:22:30,638
make sure that the predictions that you're trying to get

346
00:22:30,804 --> 00:22:34,302
are things that people actually need or care about.

347
00:22:34,436 --> 00:22:38,414
So when you're choosing your features, just keep these things in

348
00:22:38,452 --> 00:22:41,790
mind. Oh boy.

349
00:22:41,860 --> 00:22:45,602
Now we get to go back to code and I'll show you

350
00:22:45,656 --> 00:22:49,054
how to integrate machine

351
00:22:49,102 --> 00:22:52,434
learning into a VR application. And all

352
00:22:52,472 --> 00:22:56,534
that is it's just going to be a node server back

353
00:22:56,572 --> 00:23:00,054
end with a few method calls and

354
00:23:00,172 --> 00:23:03,160
maybe one endpoint. That's it.

355
00:23:04,410 --> 00:23:07,494
To get started, you set it up kind of like you would any

356
00:23:07,532 --> 00:23:11,126
other Exprs app, no big difference, except we're

357
00:23:11,158 --> 00:23:15,258
importing the Brainjs library. Keep that in mind.

358
00:23:15,424 --> 00:23:18,730
So set up the Express app, use some stuff

359
00:23:18,800 --> 00:23:22,318
by some comments in case you want to

360
00:23:22,324 --> 00:23:26,686
go look at GitHub. These are all in there. But this

361
00:23:26,708 --> 00:23:30,286
is where it gets interesting, our initial training

362
00:23:30,388 --> 00:23:34,402
data. So what we're trying to predict with this

363
00:23:34,456 --> 00:23:38,446
machine learning model is whether a user

364
00:23:38,558 --> 00:23:42,878
will finish the game or not. And we make this prediction

365
00:23:42,974 --> 00:23:45,682
based on how they're progressing through the game.

366
00:23:45,816 --> 00:23:48,966
So we look at their current location in the

367
00:23:48,988 --> 00:23:52,146
world and we figure out if they've

368
00:23:52,178 --> 00:23:55,794
found an item or not. And we look at how many steps

369
00:23:55,842 --> 00:23:59,702
they've taken. Based on all of these inputs,

370
00:23:59,846 --> 00:24:03,546
we'll be able to predict whether they'll finish the

371
00:24:03,568 --> 00:24:07,386
game or not. So going into a little detail on

372
00:24:07,408 --> 00:24:11,342
these inputs, all this is

373
00:24:11,476 --> 00:24:15,038
an array of objects. That's it.

374
00:24:15,204 --> 00:24:18,682
We have our X, Y and Z location.

375
00:24:18,826 --> 00:24:22,494
For the player. We have a boolean value

376
00:24:22,612 --> 00:24:26,162
or just a discrete value for

377
00:24:26,296 --> 00:24:29,922
whether they found the item or not, or any item or not.

378
00:24:30,056 --> 00:24:33,778
And then just account of how many steps they've taken so far.

379
00:24:33,944 --> 00:24:37,880
So that is it for the training input data.

380
00:24:38,410 --> 00:24:42,278
That's it. And these,

381
00:24:42,364 --> 00:24:46,038
the training output data is honestly not much different.

382
00:24:46,204 --> 00:24:49,674
It's also an array of objects. And in

383
00:24:49,712 --> 00:24:53,114
this case it also has just a discrete value of

384
00:24:53,152 --> 00:24:57,494
whether a player will finish the game or not. The hardest

385
00:24:57,542 --> 00:25:00,974
part will be getting the data and then getting it

386
00:25:01,012 --> 00:25:04,094
into this format. Once you get here,

387
00:25:04,212 --> 00:25:08,222
everything else is pretty easy, which I'm about to show you.

388
00:25:08,356 --> 00:25:12,010
So first thing we need to do is to combine

389
00:25:12,090 --> 00:25:15,266
our training data into one array. And to do

390
00:25:15,288 --> 00:25:18,846
that we'll just use a quick map function and it'll

391
00:25:18,878 --> 00:25:23,250
return this object with both the input and the output.

392
00:25:24,630 --> 00:25:28,246
Then, probably one of the

393
00:25:28,268 --> 00:25:32,182
most fun parts is actually making our

394
00:25:32,236 --> 00:25:35,510
neural network model. As you can see,

395
00:25:35,660 --> 00:25:39,462
it's only one line. That's it. Brainjs makes

396
00:25:39,516 --> 00:25:43,334
it that easy. And I know it sounds like I'm advocating for

397
00:25:43,372 --> 00:25:46,710
brainjs really hard, but I have zero affiliation

398
00:25:46,790 --> 00:25:50,494
with it. I just really like this library, but all

399
00:25:50,532 --> 00:25:54,366
it does is you create a new instance of

400
00:25:54,388 --> 00:25:58,190
a neural network object. For this example,

401
00:25:58,340 --> 00:26:01,694
I've just given it three hidden layers, so that means

402
00:26:01,732 --> 00:26:05,390
it has three of those nodes we were talking about earlier.

403
00:26:05,550 --> 00:26:09,502
And this is the whole model. These is what a neural network

404
00:26:09,566 --> 00:26:13,650
looks like. So the next

405
00:26:13,720 --> 00:26:16,710
fun part is actually training these model,

406
00:26:16,780 --> 00:26:20,054
which is really cool because you

407
00:26:20,092 --> 00:26:24,182
just call a train method and you pass in this

408
00:26:24,236 --> 00:26:27,160
training set that we made up here,

409
00:26:27,610 --> 00:26:31,562
which is just an array of objects. That is all.

410
00:26:31,696 --> 00:26:36,010
So we have a method and can array of objects.

411
00:26:36,350 --> 00:26:39,674
Now we've trained the model and this will run

412
00:26:39,712 --> 00:26:43,646
and give you some stats on how many iterations it

413
00:26:43,668 --> 00:26:47,502
took to converge. What was the error at

414
00:26:47,556 --> 00:26:51,470
each iteration, things like that. So you get an idea

415
00:26:51,540 --> 00:26:55,266
of how accurate your model is and how efficient it

416
00:26:55,288 --> 00:26:58,846
is. Then in here we're

417
00:26:58,878 --> 00:27:02,434
just doing a quick test. It's just logged to the console so

418
00:27:02,472 --> 00:27:06,022
that we know it's working. But this is just

419
00:27:06,076 --> 00:27:09,174
the input data you would give it to get

420
00:27:09,212 --> 00:27:12,742
a prediction. So now that we have our

421
00:27:12,796 --> 00:27:16,022
trained model, we can go ahead and

422
00:27:16,076 --> 00:27:18,646
make our endpoint.

423
00:27:18,838 --> 00:27:22,074
So all this is is just an endpoint to get our

424
00:27:22,112 --> 00:27:25,706
user data. And based on these data,

425
00:27:25,808 --> 00:27:29,750
we return a new item location using

426
00:27:29,920 --> 00:27:33,246
our model.

427
00:27:33,348 --> 00:27:37,262
That's it. So we'll get their data from

428
00:27:37,316 --> 00:27:41,422
a front end request. Then we'll use the data to

429
00:27:41,476 --> 00:27:45,346
just make up some new positions and these we

430
00:27:45,368 --> 00:27:48,020
will return it. That's all.

431
00:27:48,630 --> 00:27:52,610
So that is what it looks like to use this

432
00:27:52,680 --> 00:27:56,534
model in a VR app, but the

433
00:27:56,572 --> 00:28:00,200
actual application of it comes in

434
00:28:01,770 --> 00:28:06,134
here. So we import this user model and

435
00:28:06,252 --> 00:28:09,450
this is just a call to the back end,

436
00:28:09,600 --> 00:28:13,386
like it's a post request. That's all that's in here.

437
00:28:13,488 --> 00:28:16,620
And it'll return where the item should be next.

438
00:28:18,110 --> 00:28:22,458
But this gets applied as another attribute

439
00:28:22,634 --> 00:28:26,718
on this item in particular. No special

440
00:28:26,804 --> 00:28:30,158
reason, just because I like that box these best.

441
00:28:30,324 --> 00:28:33,682
But anyways, so when that

442
00:28:33,736 --> 00:28:38,046
box has been found or it's

443
00:28:38,078 --> 00:28:40,260
been triggered in some way,

444
00:28:41,510 --> 00:28:45,462
this will get called and it will

445
00:28:45,516 --> 00:28:50,166
request that new position from

446
00:28:50,348 --> 00:28:53,574
the machine learning model. And that

447
00:28:53,612 --> 00:28:57,474
gets sent back to the front end and we just change

448
00:28:57,612 --> 00:29:01,226
the position of the objects accordingly. Basically,

449
00:29:01,328 --> 00:29:05,260
the goal of this machine learning algorithm is to

450
00:29:06,190 --> 00:29:09,338
move the objects around the world in such a

451
00:29:09,344 --> 00:29:12,314
way that encourages players to finish the game.

452
00:29:12,432 --> 00:29:15,886
So if they're not doing too great, then we'll move all of the

453
00:29:15,908 --> 00:29:18,862
objects a little bit closer. If they're doing really good,

454
00:29:18,916 --> 00:29:22,298
we'll challenge them some more and move all the objects away.

455
00:29:22,484 --> 00:29:25,694
And this is a really simple application for machine

456
00:29:25,742 --> 00:29:29,300
learning. You could get into bot design and

457
00:29:30,390 --> 00:29:33,858
just changing the entire world if you wanted to.

458
00:29:34,024 --> 00:29:36,180
This is just a quick little intro.

459
00:29:37,750 --> 00:29:41,222
So now we've added some machine learning to the app,

460
00:29:41,276 --> 00:29:44,566
and I hope you understand how that code works. And if

461
00:29:44,588 --> 00:29:48,106
you don't, just shoot me a message on Twitter and I'll send you

462
00:29:48,128 --> 00:29:50,090
the link to the GitHub repo.

463
00:29:51,710 --> 00:29:55,034
So now we can talk about some of the other things you need to

464
00:29:55,072 --> 00:29:59,580
consider. The first thing is the overall user experience.

465
00:30:00,110 --> 00:30:03,070
So when you're making a VR world,

466
00:30:03,140 --> 00:30:06,414
you want your users to feel immersed. You want

467
00:30:06,452 --> 00:30:09,870
it to feel like somewhere they are familiar with,

468
00:30:09,940 --> 00:30:13,394
somewhere that they should be. And to do that, you need

469
00:30:13,432 --> 00:30:16,882
to know what they expect. So that could mean

470
00:30:16,936 --> 00:30:20,754
things like working with the lighting or the camera position,

471
00:30:20,872 --> 00:30:24,594
or picking the right environment. Things like that have

472
00:30:24,632 --> 00:30:28,566
a huge effect on how users interact with

473
00:30:28,588 --> 00:30:31,990
your VR apps. And then

474
00:30:32,060 --> 00:30:36,754
probably my favorite but sadly, most overlooked

475
00:30:36,802 --> 00:30:40,422
area of all programming is just the ethical

476
00:30:40,486 --> 00:30:43,978
use of data. There have been a

477
00:30:43,984 --> 00:30:47,914
lot of questionable uses of data in the past,

478
00:30:48,032 --> 00:30:51,514
and when you get into things as personal as somebody's

479
00:30:51,562 --> 00:30:55,360
location and how they move around a room,

480
00:30:56,370 --> 00:31:00,078
that is some delicate information, and you can do some crazy

481
00:31:00,164 --> 00:31:04,178
things with that, whether you believe it or not. So however

482
00:31:04,264 --> 00:31:07,890
you're getting this data and however you're storing or using

483
00:31:07,960 --> 00:31:12,178
it, make sure that it's ethically sound so that you protect

484
00:31:12,264 --> 00:31:13,700
everybody out here.

485
00:31:15,530 --> 00:31:19,110
Choosing the best algorithm doesn't exist.

486
00:31:19,530 --> 00:31:23,682
If you're doing machine learning, just choose the algorithm

487
00:31:23,746 --> 00:31:27,538
that works best for your problem. Your data is going to

488
00:31:27,564 --> 00:31:30,890
be different. There's going to be different

489
00:31:30,960 --> 00:31:35,114
predictions you're trying to make. So you might

490
00:31:35,152 --> 00:31:38,662
have certain machines that only have cpus

491
00:31:38,726 --> 00:31:42,682
and no gpus that could limit the algorithms

492
00:31:42,746 --> 00:31:46,826
you're going to work with. The best algorithm is whatever's

493
00:31:46,858 --> 00:31:50,286
the best for your case, as long as it

494
00:31:50,468 --> 00:31:53,738
gives you a pretty decent accuracy. Your error rate is

495
00:31:53,764 --> 00:31:57,554
low and it doesn't take too long, you're doing a pretty

496
00:31:57,592 --> 00:32:01,362
good job. But if you're trying to do more

497
00:32:01,416 --> 00:32:05,294
serious machine learning, like you're trying to get into some

498
00:32:05,432 --> 00:32:09,526
heavy onboard hardware processing, you might consider

499
00:32:09,628 --> 00:32:12,882
looking at Python. I've worked with some of those libraries

500
00:32:12,946 --> 00:32:17,614
over the years for slam on autonomous

501
00:32:17,762 --> 00:32:21,178
cars and just like people,

502
00:32:21,264 --> 00:32:24,874
detection from camera data, things like that.

503
00:32:24,992 --> 00:32:28,966
So Python is exceptional for machine learning when you're

504
00:32:28,998 --> 00:32:32,714
starting to get into the heavier applications that Javascript

505
00:32:32,762 --> 00:32:34,960
just can't quite handle as well.

506
00:32:36,770 --> 00:32:40,254
So now we can wrap up, and I

507
00:32:40,292 --> 00:32:43,698
want to make sure you take a couple of things away from this.

508
00:32:43,864 --> 00:32:47,470
The first thing is that it's important to try to combine

509
00:32:47,550 --> 00:32:50,786
multiple areas of tech. Everybody tries to

510
00:32:50,808 --> 00:32:54,078
keep things siloed into different industries

511
00:32:54,174 --> 00:32:57,366
or into different programming professions. There's no

512
00:32:57,388 --> 00:33:00,662
need for that. Put it all together and see what happens.

513
00:33:00,796 --> 00:33:04,070
You'll be really surprised. These interesting things

514
00:33:04,140 --> 00:33:07,806
you can make when you start combining unconventional

515
00:33:07,858 --> 00:33:11,242
fields again,

516
00:33:11,376 --> 00:33:15,574
remember that ethics is important. Like use it when you're

517
00:33:15,702 --> 00:33:18,602
handling data, use it when you're writing code,

518
00:33:18,736 --> 00:33:21,966
use it when you're solving security issues.

519
00:33:22,148 --> 00:33:25,854
Ethics are important in tech, and they do tend to get

520
00:33:25,892 --> 00:33:29,854
overlooked sometimes. So just keep that in the middle

521
00:33:29,892 --> 00:33:33,346
of your mind and

522
00:33:33,448 --> 00:33:37,042
try new stuff. Like Aframe is

523
00:33:37,096 --> 00:33:40,270
such a cool library, but there's also a react

524
00:33:40,350 --> 00:33:43,662
360 library that lets you make VR apps

525
00:33:43,726 --> 00:33:47,222
specifically in react. There's so many

526
00:33:47,276 --> 00:33:51,078
tools out there now that it's hard to say

527
00:33:51,244 --> 00:33:55,254
what's best or which one should be the standard.

528
00:33:55,372 --> 00:33:59,466
So just try out different things and see what works the

529
00:33:59,488 --> 00:34:01,340
best for your application.

530
00:34:03,470 --> 00:34:07,162
And these the most fun part of all of tech

531
00:34:07,296 --> 00:34:11,166
is just to learn things that you're interested in

532
00:34:11,268 --> 00:34:14,942
and things that help solve problems you're having. That's the

533
00:34:14,996 --> 00:34:19,598
best feeling. When you solve a personal problem that

534
00:34:19,764 --> 00:34:23,822
stems from something else you're interested in, it feels

535
00:34:23,886 --> 00:34:28,322
really good. So don't be afraid to learn really

536
00:34:28,456 --> 00:34:32,434
new, seemingly complicated things, because once you get

537
00:34:32,472 --> 00:34:35,774
in there and you start going through docs and you start writing

538
00:34:35,822 --> 00:34:39,622
a little bit of code, you get past hello world. It does get

539
00:34:39,676 --> 00:34:43,378
a lot easier, and that gives you so much more flexibility

540
00:34:43,474 --> 00:34:46,902
on what you can make. So I really hope

541
00:34:46,956 --> 00:34:50,374
that you were able to learn something from this talk, and maybe you'll go

542
00:34:50,412 --> 00:34:54,134
try making a VR app with machine learning. If you do,

543
00:34:54,252 --> 00:34:57,734
just show it to me sometime. Remember, you can find

544
00:34:57,772 --> 00:35:01,454
me on Twitter at flipped coding, so I'd love to hear from

545
00:35:01,492 --> 00:35:05,102
you if you have any comments about the talk, but other than

546
00:35:05,156 --> 00:35:08,140
that, I'm finished. I hope you have a good day.

