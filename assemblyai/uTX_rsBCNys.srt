1
00:00:43,196 --> 00:00:46,822
Two cloud native I'm very happy to be with you today to

2
00:00:46,876 --> 00:00:50,398
share some knowledge, some content, some news about Java in the

3
00:00:50,404 --> 00:00:54,154
cloud native world. My name is Audrey Morice. I work for Red Hat.

4
00:00:54,202 --> 00:00:57,358
And today I will give you the session, your Java code called

5
00:00:57,444 --> 00:01:01,614
native. Ready? A live experience. And why live experience?

6
00:01:01,732 --> 00:01:04,850
Because everything that I'm going to show you starting from now,

7
00:01:04,920 --> 00:01:08,718
it's based on live coding sessions and live coding.

8
00:01:08,894 --> 00:01:12,658
Okay, so I will start by showing a demo.

9
00:01:12,744 --> 00:01:16,274
So it's demo time right now. Okay, I will switch

10
00:01:16,322 --> 00:01:20,600
here to my terminal and I will move here to

11
00:01:21,130 --> 00:01:24,326
my blue green. Yes.

12
00:01:24,508 --> 00:01:28,870
And here OC project Blue

13
00:01:29,030 --> 00:01:32,682
Green Canary. Let me explain

14
00:01:32,816 --> 00:01:36,890
a little bit before it starts. Let me also increase the

15
00:01:36,960 --> 00:01:40,558
size of my phone. Okay, great. What I'm going to

16
00:01:40,564 --> 00:01:44,330
do right now, well, we are talking here about cloud native applications.

17
00:01:44,410 --> 00:01:46,778
When we think about cloud native applications,

18
00:01:46,874 --> 00:01:50,814
we hope, we expect that this application

19
00:01:50,932 --> 00:01:54,078
has some features. Like for example,

20
00:01:54,164 --> 00:01:57,902
what I'm going to show right now, it's what we call servicing

21
00:01:57,966 --> 00:02:01,954
mesh features. What is servicing mesh? It's a layer that

22
00:02:01,992 --> 00:02:05,822
you can have on top of your application that will manage,

23
00:02:05,896 --> 00:02:09,702
that will handle all the traffic in order to provide your

24
00:02:09,756 --> 00:02:13,378
application the security that it needs, the cloud balancing,

25
00:02:13,474 --> 00:02:16,822
the traffic management and other stuff. Okay,

26
00:02:16,876 --> 00:02:19,850
so this demo that I'm going to show you right now,

27
00:02:20,000 --> 00:02:22,458
it's for this matter, okay,

28
00:02:22,624 --> 00:02:25,706
so this is what we call blue green

29
00:02:25,808 --> 00:02:29,338
deployment. So I will open here,

30
00:02:29,504 --> 00:02:33,134
here it is my demo. So if you pay

31
00:02:33,172 --> 00:02:36,798
attention, you will see that my screen is

32
00:02:36,884 --> 00:02:40,446
switching between blue and green. So this is the

33
00:02:40,468 --> 00:02:43,838
same application with two different versions.

34
00:02:43,934 --> 00:02:47,346
One version is a blue version and the other version is

35
00:02:47,368 --> 00:02:50,850
a green version. If I check here my kubernetes,

36
00:02:51,590 --> 00:02:55,494
we will see that I have, so I have

37
00:02:55,532 --> 00:02:59,762
here the blue version of my application and the green version

38
00:02:59,826 --> 00:03:03,174
of my application. Okay. So of course I have a

39
00:03:03,212 --> 00:03:06,054
cloud balancing working in this application.

40
00:03:06,252 --> 00:03:09,734
And each request to the application, the load

41
00:03:09,782 --> 00:03:12,902
balancing is switching between green version

42
00:03:12,966 --> 00:03:16,186
and blue version. Okay. All right, so what I'm going

43
00:03:16,208 --> 00:03:19,514
to do right now is to add a new version for this

44
00:03:19,552 --> 00:03:23,390
application, a Canary version. What I'm going to do is

45
00:03:23,540 --> 00:03:27,914
right now I will deploy the deploy

46
00:03:27,962 --> 00:03:32,350
here the version canary.

47
00:03:32,870 --> 00:03:36,340
Just to explain why we wait a little bit.

48
00:03:37,190 --> 00:03:40,546
I have here tons of scripts as

49
00:03:40,568 --> 00:03:44,226
you just saw, because it will make my

50
00:03:44,248 --> 00:03:48,070
life easier in order to show this demo to you.

51
00:03:48,220 --> 00:03:52,278
You can see that the Canary version is already working. We will

52
00:03:52,364 --> 00:03:56,374
see it on those browser a little bit. Okay. It's already working.

53
00:03:56,492 --> 00:04:00,314
So I have all those scripts just to make my life easier of

54
00:04:00,352 --> 00:04:03,978
course, when you are working in production, you will also

55
00:04:04,064 --> 00:04:07,130
build your own scripts to make your life easier.

56
00:04:07,950 --> 00:04:11,950
But basically what I will do in this few minutes

57
00:04:12,020 --> 00:04:16,110
showing this demo is switching my yaml files

58
00:04:16,530 --> 00:04:20,330
in order to manage the traffic and the route

59
00:04:20,410 --> 00:04:24,110
to my application. Okay, so great. Here I have my

60
00:04:24,180 --> 00:04:27,506
application working with three versions right now. So I

61
00:04:27,528 --> 00:04:30,946
have one version that is blue, one version that is green,

62
00:04:31,048 --> 00:04:34,594
one version that is yellow, the Canary version, and my

63
00:04:34,632 --> 00:04:38,626
load balancer is load balancing the request

64
00:04:38,738 --> 00:04:41,830
between those three versions of the application. Great,

65
00:04:41,900 --> 00:04:45,990
awesome. Right now let's play

66
00:04:46,060 --> 00:04:49,482
with the traffic to this applications. So I will

67
00:04:49,616 --> 00:04:53,638
check my scripts here. So now let's

68
00:04:53,814 --> 00:04:57,766
switch the traffic only to blue version.

69
00:04:57,958 --> 00:05:00,734
Wait some seconds to this.

70
00:05:00,932 --> 00:05:04,782
Okay, now it's done. Let's wait. And now we have just

71
00:05:04,836 --> 00:05:08,634
the blue version of the application being considered

72
00:05:08,682 --> 00:05:11,934
by the load balancing. Okay, so now just the

73
00:05:11,972 --> 00:05:15,230
blue version. Now let's switch to green

74
00:05:15,300 --> 00:05:19,490
version. Wait a few seconds to switch to green

75
00:05:19,560 --> 00:05:23,314
and stick with the green version. And now we

76
00:05:23,352 --> 00:05:26,126
will switch to yellow version,

77
00:05:26,318 --> 00:05:29,922
canary. And now we have just

78
00:05:29,976 --> 00:05:33,430
the anery version. Again, what does it have to do with

79
00:05:33,500 --> 00:05:37,234
cloud native? One of the main aspects of cloud native

80
00:05:37,282 --> 00:05:40,554
application is that you should be able to

81
00:05:40,592 --> 00:05:44,794
make some changes, this is the

82
00:05:44,832 --> 00:05:48,554
right word for this, without downtime to your application.

83
00:05:48,672 --> 00:05:51,914
So you can see that I made three

84
00:05:52,112 --> 00:05:56,302
changes on the routes to my application, the traffic to my application

85
00:05:56,436 --> 00:05:59,950
without downtime. Okay, so the users are still

86
00:06:00,020 --> 00:06:03,278
accessing my application and there is no downtime.

87
00:06:03,374 --> 00:06:06,340
Right. Let's try something else.

88
00:06:08,150 --> 00:06:11,634
Where are you? Great. So now, as you can see

89
00:06:11,672 --> 00:06:15,246
here, I'm using a chrome browser. So what I'm

90
00:06:15,278 --> 00:06:18,854
going to do right now is to change. I will make the

91
00:06:18,892 --> 00:06:22,594
chrome users will stick with the green version

92
00:06:22,722 --> 00:06:26,642
and the Firefox users will stick with canary

93
00:06:26,706 --> 00:06:30,438
version. So we'll change here, the Canary to Firefox,

94
00:06:30,614 --> 00:06:35,334
and let's open a Firefox window

95
00:06:35,382 --> 00:06:38,490
here. Just a second. Great. So,

96
00:06:38,560 --> 00:06:39,180
demo.

97
00:06:41,490 --> 00:06:44,734
Okay, so everything is working? Yes,

98
00:06:44,772 --> 00:06:47,642
it's working. So we are using here Firefox.

99
00:06:47,706 --> 00:06:51,674
Firefox is sticking with the Canary version and the chrome

100
00:06:51,722 --> 00:06:54,978
is sticking with the green version. Right.

101
00:06:55,144 --> 00:06:58,514
Great. I have some other options here,

102
00:06:58,552 --> 00:07:02,318
if I show you, but as we have some limits

103
00:07:02,414 --> 00:07:05,640
of time here, I could, for example,

104
00:07:06,250 --> 00:07:09,942
move everything that everyone that is working with

105
00:07:09,996 --> 00:07:14,038
Android to the Canary version and everything

106
00:07:14,124 --> 00:07:17,430
else. Every other users stick with green.

107
00:07:17,580 --> 00:07:20,982
And here just with iPhone, and here just

108
00:07:21,036 --> 00:07:24,938
with everyone that's using mobile. Okay, so by having

109
00:07:25,024 --> 00:07:28,554
this kind of approach on your architecture and your

110
00:07:28,592 --> 00:07:32,186
application being built using this approach,

111
00:07:32,298 --> 00:07:35,806
you can have all these options and this is a

112
00:07:35,828 --> 00:07:39,006
very simple example, but just to give

113
00:07:39,028 --> 00:07:42,854
you those kind of possibilities that you have. Cloud native

114
00:07:42,922 --> 00:07:46,210
approach when building your application. Okay,

115
00:07:46,360 --> 00:07:49,650
just for starting right now, I will show you

116
00:07:49,720 --> 00:07:53,442
much more code in a few minutes. But here, this is

117
00:07:53,576 --> 00:07:57,062
our first example here, this application is a Java application

118
00:07:57,196 --> 00:08:00,326
using cloud native approach. Good,

119
00:08:00,508 --> 00:08:03,654
let's switch to slides again.

120
00:08:03,852 --> 00:08:07,526
So this was our first demo and just for

121
00:08:07,548 --> 00:08:11,054
you to know me, if you haven't, my name is Elder Moraes,

122
00:08:11,122 --> 00:08:14,902
I work here for Red Hat as a developer

123
00:08:14,966 --> 00:08:18,506
advocate here. I'm in Brazil, I'm brazilian based in

124
00:08:18,528 --> 00:08:22,458
Sao Paulo. This is a QR code for my mailing

125
00:08:22,474 --> 00:08:25,550
list and also the URL if you would like to

126
00:08:25,700 --> 00:08:29,114
receive some content, but Java cloud native microservice

127
00:08:29,162 --> 00:08:32,714
containers kubernetes I share in this list.

128
00:08:32,772 --> 00:08:36,338
Okay, so just subscribe, I will not

129
00:08:36,424 --> 00:08:39,890
send you any spam. Okay. I'm a board

130
00:08:39,960 --> 00:08:43,438
member also at Java, one of the biggest Java

131
00:08:43,454 --> 00:08:46,994
user groups in the world, and I'm also the author of the

132
00:08:47,032 --> 00:08:50,854
Jakarta e cookbook and I'm very happy with this book

133
00:08:50,892 --> 00:08:54,278
because in the first 24 hours it reached the top

134
00:08:54,364 --> 00:08:57,622
one on Amazon United States. So it's a great

135
00:08:57,676 --> 00:09:00,790
book. If you work with Java on enterprise environment,

136
00:09:00,870 --> 00:09:04,534
maybe my book would be helpful for you. And also my mission

137
00:09:04,582 --> 00:09:08,266
here as not only a red hat but as a professional is to

138
00:09:08,288 --> 00:09:11,658
help Java developers around those world to build and deliver

139
00:09:11,754 --> 00:09:14,954
awesome applications, right? So our cloud native

140
00:09:15,002 --> 00:09:19,274
application today we have some stuff. So basically I will use microservice

141
00:09:19,322 --> 00:09:23,182
approach, that's one of the fundamentals of cloud

142
00:09:23,236 --> 00:09:27,518
native application. Not that you have to use microservice

143
00:09:27,534 --> 00:09:30,946
but you should use because some features that I will show

144
00:09:30,968 --> 00:09:34,062
you in a few seconds. Also I will use rest client,

145
00:09:34,126 --> 00:09:37,670
I will use health Shack because your application will

146
00:09:37,740 --> 00:09:41,782
run on some orchestrated environment and by

147
00:09:41,836 --> 00:09:45,670
that it should have some health shack possibilities

148
00:09:46,010 --> 00:09:49,386
for your orchestration being able to manage your

149
00:09:49,408 --> 00:09:53,238
application. Also we will work with metrics for scalability,

150
00:09:53,414 --> 00:09:57,638
we will use reactive both with mutiny and kafka,

151
00:09:57,734 --> 00:10:01,626
and also we will deploy our application using containers and

152
00:10:01,648 --> 00:10:05,102
kubernetes. Okay, and let's move to code time starting

153
00:10:05,156 --> 00:10:08,634
from now we will not see any slides anymore.

154
00:10:08,682 --> 00:10:11,818
Okay, just one last slide in the end of the session.

155
00:10:11,914 --> 00:10:14,770
Amazing. Let's change some stuff here.

156
00:10:14,840 --> 00:10:18,306
I will move here, check if, okay,

157
00:10:18,408 --> 00:10:25,932
so let's forgot

158
00:10:25,996 --> 00:10:26,880
the dash.

159
00:10:29,720 --> 00:10:33,092
Perfect. And also I will switch my

160
00:10:33,146 --> 00:10:36,484
namespace to this one.

161
00:10:36,682 --> 00:10:39,872
If you don't know what I'm doing here, I'm connected

162
00:10:39,936 --> 00:10:43,448
to a Kubernetes cluster that is hosted on the cloud,

163
00:10:43,534 --> 00:10:47,720
in this case on AWS. So I'm really working

164
00:10:47,790 --> 00:10:51,752
in a Kubernetes here so let me just check this

165
00:10:51,886 --> 00:10:55,244
namespace is clean so we are able to move

166
00:10:55,282 --> 00:10:58,828
on. Okay, no resources, so all good here.

167
00:10:58,914 --> 00:11:03,240
Okay so I will build a Java application from scratch

168
00:11:03,320 --> 00:11:06,956
and you will keep adding some features

169
00:11:07,068 --> 00:11:10,972
to help this application to work with the best approaches,

170
00:11:11,036 --> 00:11:14,320
best practice when we talk about cloud

171
00:11:14,390 --> 00:11:17,660
native application, cloud native word cloud native

172
00:11:17,740 --> 00:11:21,312
approach and whatever you name it. I will build

173
00:11:21,446 --> 00:11:24,672
a Java application using Quarkus.

174
00:11:24,816 --> 00:11:29,680
Why Quarkus? Because Quarkus will give me a lot of productivity.

175
00:11:29,840 --> 00:11:33,764
I have a lot of extensions, Quarkus extensions

176
00:11:33,812 --> 00:11:37,832
that will make my life much more easier when

177
00:11:37,886 --> 00:11:41,864
building this cloud native application here today. All right so I

178
00:11:41,902 --> 00:11:45,610
will just open not a comma let's say.

179
00:11:48,640 --> 00:11:52,444
Okay, all good. So it will open

180
00:11:52,562 --> 00:11:56,460
my virtual visual studio code

181
00:11:56,610 --> 00:12:01,072
and I will use can

182
00:12:01,126 --> 00:12:04,624
integration with maven and there is a

183
00:12:04,662 --> 00:12:08,544
feature in this plugin called developer mode.

184
00:12:08,592 --> 00:12:12,964
So by using mVN Quarkus dev, what it

185
00:12:13,002 --> 00:12:17,104
will do right now is to compile my application to bootstrap

186
00:12:17,152 --> 00:12:20,980
this application. So this application will keep running and every

187
00:12:21,050 --> 00:12:24,740
change that I do in this application will be hot deployed.

188
00:12:24,820 --> 00:12:28,952
Okay so once I call this application, all the changes will

189
00:12:29,006 --> 00:12:32,660
reflect on my application, right? So this application started

190
00:12:32,750 --> 00:12:37,070
in 1 second. It's great, especially for a Java application.

191
00:12:37,600 --> 00:12:41,352
Okay so let me tweak

192
00:12:41,416 --> 00:12:45,710
my here and switch to this.

193
00:12:47,040 --> 00:12:48,990
Okay oh good.

194
00:12:49,680 --> 00:12:53,570
So let me show you. Oh good,

195
00:12:54,340 --> 00:12:58,588
great. I will remove the best folder. Don't do that.

196
00:12:58,694 --> 00:13:02,016
Right? I will just do that for those sake

197
00:13:02,048 --> 00:13:06,070
of the time here while we are working on this demo.

198
00:13:06,440 --> 00:13:10,230
But you should not remove the best, right? Okay guys,

199
00:13:10,780 --> 00:13:14,504
what am I going to do right now is to start building this

200
00:13:14,542 --> 00:13:17,960
application. As you said, we have a base

201
00:13:18,030 --> 00:13:21,720
project built when we created this project

202
00:13:21,790 --> 00:13:25,992
using Quarkus. I have even a rest endpoint ready

203
00:13:26,126 --> 00:13:29,612
right here. So I'll call here. Okay as

204
00:13:29,666 --> 00:13:38,784
easy I can change here to hello and

205
00:13:38,822 --> 00:13:41,872
I change this application. And this application was hot,

206
00:13:41,926 --> 00:13:45,184
deployed in 600 milesconds. Okay so

207
00:13:45,222 --> 00:13:47,490
this is very fast.

208
00:13:48,520 --> 00:13:52,500
Okay guys let's build this application because

209
00:13:52,650 --> 00:13:55,510
we are really excited here today.

210
00:13:56,120 --> 00:13:59,796
We'll start by adding some data management in

211
00:13:59,818 --> 00:14:03,652
this application. So by data we'll add some extensions.

212
00:14:03,716 --> 00:14:07,000
So first we will add extensions to work with data.

213
00:14:07,070 --> 00:14:10,552
So JSoNB, JGBC and

214
00:14:10,606 --> 00:14:14,852
hibernate to work with panache. That is the default

215
00:14:14,996 --> 00:14:18,812
data management for. Okay so

216
00:14:18,866 --> 00:14:21,544
let's start building our classes.

217
00:14:21,672 --> 00:14:26,460
First we will add some configurations,

218
00:14:28,400 --> 00:14:29,820
blah blah blah blah.

219
00:14:33,380 --> 00:14:37,084
I will not deep dive in too much details.

220
00:14:37,132 --> 00:14:41,152
My intention here is to give you a bigger picture

221
00:14:41,296 --> 00:14:44,964
of this because it would take hours to

222
00:14:45,002 --> 00:14:48,756
explain every single bit that I'm showing you right now. But I

223
00:14:48,778 --> 00:14:52,456
will give you a whole picture of all the

224
00:14:52,478 --> 00:14:55,860
possibilities that we have with Java in the cloud native

225
00:14:55,940 --> 00:14:59,492
world today, especially when working with quarkus,

226
00:14:59,636 --> 00:15:02,968
I will build this, it will be my

227
00:15:03,054 --> 00:15:06,492
entity. So this first

228
00:15:06,546 --> 00:15:10,028
application I will build here will manage fruits, okay so

229
00:15:10,114 --> 00:15:14,136
I have here first my entity for fruits

230
00:15:14,328 --> 00:15:18,450
and I will build my rest endpoint here,

231
00:15:19,140 --> 00:15:23,372
my resource, the fruit

232
00:15:23,436 --> 00:15:27,168
resource and it will have

233
00:15:27,334 --> 00:15:31,040
a wheel list of course the fruits.

234
00:15:31,200 --> 00:15:35,552
So if I go right now on my terminal

235
00:15:35,696 --> 00:15:39,252
and using this guy, okay so change

236
00:15:39,306 --> 00:15:42,996
detected, 1.5 seconds to do

237
00:15:43,018 --> 00:15:47,428
it hot deploy. Of course my data, my database,

238
00:15:47,524 --> 00:15:48,680
it's empty.

239
00:15:50,140 --> 00:15:54,796
And let's right now add a

240
00:15:54,818 --> 00:15:57,992
new method here to add a new fruit.

241
00:15:58,056 --> 00:16:02,364
Okay so I just created this

242
00:16:02,402 --> 00:16:05,630
method here, I will call this,

243
00:16:07,120 --> 00:16:10,780
I will call this new method by not

244
00:16:10,850 --> 00:16:13,904
hot deploying application because it will do for me in

245
00:16:13,942 --> 00:16:17,264
475 seconds. And now

246
00:16:17,302 --> 00:16:20,500
I have a banana in my database,

247
00:16:22,360 --> 00:16:26,132
okay but I would like to do something more

248
00:16:26,186 --> 00:16:30,340
scalability. So I will add a new file

249
00:16:30,700 --> 00:16:33,752
to this folder here which

250
00:16:33,806 --> 00:16:37,832
will be a import SQl and

251
00:16:37,886 --> 00:16:41,428
add some new fruits to my database

252
00:16:41,604 --> 00:16:45,356
and it will call train. Okay I still have a

253
00:16:45,378 --> 00:16:48,860
banana. Sometimes I need to redeploy.

254
00:16:52,960 --> 00:16:57,164
The good part even if I need to redeploy is that quarkus

255
00:16:57,212 --> 00:17:01,024
will do it really fast. Okay so how

256
00:17:01,062 --> 00:17:04,930
many? 2 seconds, 2.7 seconds. Okay so not

257
00:17:06,340 --> 00:17:09,524
anything at all. Okay so now I have a lot of

258
00:17:09,562 --> 00:17:13,860
data in my database, what I'm going to do right now is

259
00:17:13,930 --> 00:17:17,924
to add a custom finder, okay so because

260
00:17:18,122 --> 00:17:21,960
if you paid attention here I'm using a list

261
00:17:22,030 --> 00:17:25,336
all that is from my entity, okay so

262
00:17:25,358 --> 00:17:28,248
I will add a new finder here,

263
00:17:28,414 --> 00:17:32,392
that is my finder where I will pass

264
00:17:32,526 --> 00:17:36,552
a season and will list fruits based on those season.

265
00:17:36,696 --> 00:17:40,892
So right now we just change our rest

266
00:17:40,946 --> 00:17:44,092
endpoint to be able to

267
00:17:44,146 --> 00:17:48,336
use this new parameter, okay so I have a new parameter here

268
00:17:48,438 --> 00:17:52,224
where I will use to list by season and

269
00:17:52,262 --> 00:17:56,960
I can again run this call

270
00:17:57,030 --> 00:18:00,516
here but for example using summer and now

271
00:18:00,538 --> 00:18:04,260
I have just the fruits that is based on summer.

272
00:18:04,600 --> 00:18:08,564
Now we are good to take this application and

273
00:18:08,602 --> 00:18:12,160
deploy on those cloud deploy on my kubernetes

274
00:18:12,240 --> 00:18:15,496
cluster. So what we're going to do right now is to add a

275
00:18:15,518 --> 00:18:19,092
new extension, two extensions, one is quarkus kubernetes

276
00:18:19,156 --> 00:18:22,864
and the other is quarkus Container image,

277
00:18:22,932 --> 00:18:26,476
okay so one will build the container image and

278
00:18:26,498 --> 00:18:29,400
the other one we should deploy on the Kubernetes.

279
00:18:29,480 --> 00:18:33,132
Okay so we add some new

280
00:18:33,186 --> 00:18:36,480
properties for this application.

281
00:18:36,630 --> 00:18:39,856
So let's switch here. Okay I

282
00:18:39,878 --> 00:18:43,932
will make some changes. This one will be docker

283
00:18:43,996 --> 00:18:47,824
I o. This one will be

284
00:18:48,022 --> 00:18:51,840
elder price. Let's remove these spaces

285
00:18:52,340 --> 00:18:55,860
because YML will not work with spaces.

286
00:18:56,280 --> 00:19:00,384
And right now how can I take this application and

287
00:19:00,522 --> 00:19:04,344
create a containers image and deploy it into the cloud.

288
00:19:04,462 --> 00:19:08,644
It's very, very simple. MvN clean package.

289
00:19:08,772 --> 00:19:12,392
Okay we'll package those application but I will pass one

290
00:19:12,446 --> 00:19:16,380
parameter, quarkus kubernetes

291
00:19:18,320 --> 00:19:21,710
deploy equals true.

292
00:19:23,120 --> 00:19:27,024
Oh I forgot something. Stop. I need

293
00:19:27,062 --> 00:19:30,640
to log on my docker registry.

294
00:19:31,780 --> 00:19:34,896
Okay great, now we

295
00:19:34,918 --> 00:19:38,848
are good to go. So right now it will package

296
00:19:38,864 --> 00:19:42,532
the application, will build the container image and

297
00:19:42,586 --> 00:19:46,640
will deploy this application on my kubernetes

298
00:19:46,720 --> 00:19:49,892
cluster if you don't have any mistakes. All right,

299
00:19:50,026 --> 00:19:54,004
bet me check here. This is the beauty of the live coding session.

300
00:19:54,052 --> 00:19:58,490
We are able to debug the applications. I need to add

301
00:19:59,260 --> 00:20:02,616
one guy here to trust on

302
00:20:02,638 --> 00:20:05,080
the certified certification.

303
00:20:06,860 --> 00:20:09,772
Now I hope we will work.

304
00:20:09,906 --> 00:20:13,820
All right. Okay guys, this is

305
00:20:13,890 --> 00:20:18,272
the real life, on your daily basis you will face

306
00:20:18,406 --> 00:20:21,984
this kind of. Yeah, now we are going. Okay guys,

307
00:20:22,022 --> 00:20:25,696
so it's basically building the image and we'll start the

308
00:20:25,718 --> 00:20:28,832
process of pushing this

309
00:20:28,886 --> 00:20:32,304
container image on my

310
00:20:32,342 --> 00:20:37,152
kubernetes. Okay, so let's watch QBctl

311
00:20:37,216 --> 00:20:38,340
get bots.

312
00:20:40,040 --> 00:20:43,716
Yes. Okay so my application is already running.

313
00:20:43,818 --> 00:20:47,092
Okay. It's really fast because Quarkus

314
00:20:47,236 --> 00:20:51,736
starts really fast. How can we access this application?

315
00:20:51,918 --> 00:20:54,590
I have a service,

316
00:20:58,640 --> 00:21:01,870
let's see the DNS of those application.

317
00:21:02,240 --> 00:21:06,144
Is this guy here. And by experience I

318
00:21:06,182 --> 00:21:09,552
know that we take like one to two minutes to

319
00:21:09,606 --> 00:21:14,800
really respond. Okay but let's check curl

320
00:21:16,180 --> 00:21:17,170
those guy.

321
00:21:20,360 --> 00:21:24,036
Hello. Oh it's working.

322
00:21:24,218 --> 00:21:28,292
Wow, it was really, really fast. Today I

323
00:21:28,346 --> 00:21:30,020
change here to fruit.

324
00:21:35,420 --> 00:21:36,200
Fruit,

325
00:21:38,240 --> 00:21:41,820
wow it's there, it's working. Okay, so sometimes

326
00:21:41,890 --> 00:21:45,660
it takes like one to two minutes but today we were looking, it's already working.

327
00:21:45,730 --> 00:21:49,084
So I took this application I just created on

328
00:21:49,122 --> 00:21:52,432
my machine and deployed on the cloud. Okay of course

329
00:21:52,486 --> 00:21:56,208
we are not done. We still have a lot of stuff to do here

330
00:21:56,294 --> 00:22:00,036
and let's go forward. Right now what we are going to do

331
00:22:00,138 --> 00:22:04,132
is to add some new features to those application. So first

332
00:22:04,266 --> 00:22:07,600
I will add another extension,

333
00:22:07,760 --> 00:22:11,750
the rest client extension and

334
00:22:12,440 --> 00:22:15,976
we have fruits here, but we have just the name and

335
00:22:15,998 --> 00:22:19,624
the season. I would like to add some data to these

336
00:22:19,662 --> 00:22:23,572
fruits and I will do that by using an external

337
00:22:23,636 --> 00:22:27,500
service. So I will connect to this external service

338
00:22:27,650 --> 00:22:32,040
using a rest client. I add the extension

339
00:22:32,120 --> 00:22:36,312
and we'll create some other classes here. So I will create

340
00:22:36,466 --> 00:22:41,328
another class

341
00:22:41,414 --> 00:22:45,004
here to work with. This is the fruit

342
00:22:45,052 --> 00:22:48,608
device. The name of the service that

343
00:22:48,614 --> 00:22:52,790
I will use, it is called fruit device. I will create

344
00:22:54,120 --> 00:22:58,404
another interface that

345
00:22:58,442 --> 00:23:02,632
will be my interface between my local

346
00:23:02,686 --> 00:23:05,080
applications and the remote.

347
00:23:09,820 --> 00:23:13,076
Okay so basically this is the API,

348
00:23:13,188 --> 00:23:16,972
it's an interface, this is the path and this is the

349
00:23:17,026 --> 00:23:20,910
method that I will call on this remote application.

350
00:23:21,440 --> 00:23:25,404
I will add the address of this

351
00:23:25,442 --> 00:23:29,180
application is this guy here? Okay you can check afterwards online.

352
00:23:29,330 --> 00:23:32,896
Printvice.com is where I will get the data that

353
00:23:32,918 --> 00:23:35,810
I need to improve my application.

354
00:23:36,260 --> 00:23:41,860
I will create adto java,

355
00:23:45,000 --> 00:23:48,692
blah blah blah. As I said, I will not

356
00:23:48,746 --> 00:23:52,052
deep dive into too much details to save time

357
00:23:52,106 --> 00:23:56,148
and show you much more stuff than going too much details.

358
00:23:56,244 --> 00:24:01,256
And now I will change my fruity resource in

359
00:24:01,278 --> 00:24:04,424
order to use our new rest client. Okay so

360
00:24:04,462 --> 00:24:08,652
now we are using the fruit device to add some

361
00:24:08,786 --> 00:24:12,632
new data to our fruits. So let's

362
00:24:12,776 --> 00:24:16,844
fall again our

363
00:24:16,882 --> 00:24:21,516
application. So again using summer detected

364
00:24:21,548 --> 00:24:24,896
some changes 1.2 seconds and

365
00:24:24,918 --> 00:24:28,256
now I not only have the fruit name and the

366
00:24:28,278 --> 00:24:32,080
season but I also have carbohydrates and calories.

367
00:24:32,740 --> 00:24:36,144
These two guys here are coming from the fruit device.

368
00:24:36,192 --> 00:24:40,064
So by using my rest client I'm able to connect with remote

369
00:24:40,112 --> 00:24:43,560
applications and get some data and add to my local

370
00:24:43,630 --> 00:24:47,224
application. Great. So moving

371
00:24:47,342 --> 00:24:50,532
on. Now I'm adding some health shack

372
00:24:50,676 --> 00:24:53,720
features to my application.

373
00:24:53,870 --> 00:24:57,356
And why I'm going to do that because as I said in the beginning of

374
00:24:57,378 --> 00:25:01,736
the talk, when our application is hosted on can orchestrated

375
00:25:01,848 --> 00:25:05,196
environment the orchestrator should be able to look

376
00:25:05,218 --> 00:25:09,164
to our application know two stuff. One, your application is

377
00:25:09,202 --> 00:25:12,784
live and two, your application is ready because

378
00:25:12,902 --> 00:25:16,064
if it's not live it will queue the application and create it

379
00:25:16,102 --> 00:25:19,520
again and it's not ready. It will wait until

380
00:25:19,590 --> 00:25:23,860
it's ready. So your application should be able to provide

381
00:25:23,930 --> 00:25:27,168
this kind of information to the orchestrator.

382
00:25:27,264 --> 00:25:31,284
And here we are using kubernetes. So that's how Kubernetes will

383
00:25:31,322 --> 00:25:34,484
manage the application. I just added the

384
00:25:34,522 --> 00:25:38,344
extension for health shack those this application and one cool

385
00:25:38,382 --> 00:25:42,036
stuff I will even open on my browser,

386
00:25:42,228 --> 00:25:45,836
better picture of this, if I

387
00:25:45,858 --> 00:25:50,428
just call here health

388
00:25:50,594 --> 00:25:54,504
it will give me the information because by just adding the extensions

389
00:25:54,632 --> 00:25:58,830
it add the feature to the application. So I didn't need to

390
00:25:59,200 --> 00:26:03,100
code anything but I will because I would like to customize

391
00:26:03,260 --> 00:26:06,624
this health shack feature. So I will create two

392
00:26:06,662 --> 00:26:10,424
probes, one liveness probe and one redness

393
00:26:10,492 --> 00:26:13,830
probe. So let's create them.

394
00:26:14,520 --> 00:26:18,564
So liveness probe and

395
00:26:18,602 --> 00:26:21,940
those liveness probe will just say well I'm alive,

396
00:26:22,620 --> 00:26:26,164
says nothing is not live. Okay. But if it's

397
00:26:26,292 --> 00:26:29,912
working, it will just respond. This guy here and

398
00:26:29,966 --> 00:26:33,752
here you can customize I'm live c 42

399
00:26:33,806 --> 00:26:37,364
for example. And the other guy is the redness probe.

400
00:26:37,412 --> 00:26:41,310
The redness, it's where probably you will add

401
00:26:42,720 --> 00:26:46,908
some rules, some more complexity because

402
00:26:46,994 --> 00:26:50,544
it's what is ready for your application. It could

403
00:26:50,582 --> 00:26:54,016
be to be able to access some database, it could

404
00:26:54,038 --> 00:26:57,360
be to be able to access some other service.

405
00:26:57,510 --> 00:27:01,124
So until you are able to check this, you will

406
00:27:01,162 --> 00:27:04,996
not respond as I'm ready. Okay, but in

407
00:27:05,018 --> 00:27:09,108
this case we are just building a custom example here.

408
00:27:09,194 --> 00:27:13,144
And if I just call this guy again now I have

409
00:27:13,262 --> 00:27:16,904
the specific responses both from

410
00:27:17,102 --> 00:27:20,856
the liveness and from the redness. Okay good.

411
00:27:20,958 --> 00:27:24,676
So we are now our application is connecting with remote

412
00:27:24,708 --> 00:27:28,472
applications. It's giving health check responses.

413
00:27:28,616 --> 00:27:32,940
Now let's add some metrics. Here we

414
00:27:33,010 --> 00:27:37,080
add the quarkus micrometer. Quarkus has integration

415
00:27:37,160 --> 00:27:40,936
with also the microprofile,

416
00:27:41,048 --> 00:27:44,848
but those default today is micrometer for Quarkus but

417
00:27:44,934 --> 00:27:48,204
it still have support for microprofile

418
00:27:48,252 --> 00:27:52,500
metrics. But here today I will show you using micrometer.

419
00:27:56,200 --> 00:27:59,744
Here's the only one that I need to change the pond

420
00:27:59,792 --> 00:28:03,412
file. So I will let

421
00:28:03,466 --> 00:28:05,850
me this guy,

422
00:28:07,100 --> 00:28:11,128
okay, I will create a specific class

423
00:28:11,214 --> 00:28:14,824
to show you how to use

424
00:28:15,022 --> 00:28:16,280
the metrics.

425
00:28:18,640 --> 00:28:23,740
Let's go here new file Java.

426
00:28:24,480 --> 00:28:27,848
And here is my timely resource.

427
00:28:27,944 --> 00:28:31,260
So basically here it will work by using annotation.

428
00:28:31,340 --> 00:28:35,136
So I define it that this

429
00:28:35,238 --> 00:28:38,924
method here is being counted. Okay, so the metric

430
00:28:38,972 --> 00:28:42,464
that we use here is counted and the name of this

431
00:28:42,502 --> 00:28:45,732
metric is time. Now this guy

432
00:28:45,786 --> 00:28:48,470
here I will use by this way.

433
00:28:49,080 --> 00:28:53,056
Great. Let's compile

434
00:28:53,168 --> 00:28:56,408
this application. We're not compiled, just call.

435
00:28:56,494 --> 00:28:59,944
Okay, let's see if it will work

436
00:28:59,982 --> 00:29:02,888
without, okay great.

437
00:29:02,974 --> 00:29:07,184
So took 1.4 seconds

438
00:29:07,252 --> 00:29:10,696
to auto deploy the application. And here we'll

439
00:29:10,728 --> 00:29:14,190
call a few times just to have some data.

440
00:29:14,800 --> 00:29:18,364
And right now I will open as we did with

441
00:29:18,402 --> 00:29:23,356
the help we can did with metrics. So just use here metrics,

442
00:29:23,548 --> 00:29:26,050
voila. Here time.

443
00:29:30,260 --> 00:29:33,364
So here we have that metric that we

444
00:29:33,402 --> 00:29:37,348
created and we know here that we call it 30 times

445
00:29:37,514 --> 00:29:41,492
and we have some other information. Basically it's just

446
00:29:41,546 --> 00:29:45,864
a counted metric. So it's just counting. Okay, so here

447
00:29:45,982 --> 00:29:49,944
you know where it is, deception and so on.

448
00:29:50,142 --> 00:29:53,688
Now the two last

449
00:29:53,854 --> 00:29:57,804
parts of this session, we will start working

450
00:29:57,922 --> 00:30:01,688
with reactive features. So let's

451
00:30:01,784 --> 00:30:05,564
add an extension for rest

452
00:30:05,602 --> 00:30:09,084
easy mutiny that we will use right now.

453
00:30:09,202 --> 00:30:12,336
We will move away from the fruits and

454
00:30:12,358 --> 00:30:16,000
we'll dive into beer. So our application will start

455
00:30:16,070 --> 00:30:19,664
working with beer. We'll create here

456
00:30:19,782 --> 00:30:23,604
a beer class that will

457
00:30:23,642 --> 00:30:26,340
be our kind of entity.

458
00:30:28,680 --> 00:30:31,844
So I have here, actually it's a

459
00:30:31,882 --> 00:30:35,144
pojo. Okay, it's not an entity, but that's fine.

460
00:30:35,342 --> 00:30:38,090
Let's create now a beer service.

461
00:30:42,460 --> 00:30:46,692
Beer service that is our best client for

462
00:30:46,846 --> 00:30:50,780
this service will work with beer.

463
00:30:51,760 --> 00:30:55,036
We will add again another

464
00:30:55,138 --> 00:30:59,304
address for this guy. It's not roots

465
00:30:59,352 --> 00:31:02,080
anymore, now it's API, punk API.

466
00:31:04,020 --> 00:31:06,480
And we'll create a resource,

467
00:31:09,860 --> 00:31:15,540
blah blah blah java.

468
00:31:17,960 --> 00:31:22,436
So this is our service. And pay attention that

469
00:31:22,618 --> 00:31:27,320
as we work with reactive using the mutiny extension,

470
00:31:28,460 --> 00:31:32,104
the producers keep doing the application

471
00:31:32,222 --> 00:31:36,136
JSon. But here on the method, the return is

472
00:31:36,158 --> 00:31:40,140
a mute, okay? That's the kind of return using

473
00:31:40,210 --> 00:31:44,332
by mutiny. Okay? All right. If everything is working,

474
00:31:44,466 --> 00:31:47,724
we should be able right now to call our application.

475
00:31:47,922 --> 00:31:50,770
So let's call here,

476
00:31:53,380 --> 00:31:58,610
let me try again. If not, we will sometimes

477
00:31:59,780 --> 00:32:03,572
took some time to connect to the revolt application to

478
00:32:03,626 --> 00:32:08,052
get the data. But if not, we will just

479
00:32:08,186 --> 00:32:10,790
redeploy. All right?

480
00:32:13,160 --> 00:32:16,916
Yes. Now we have this beautiful list of beer.

481
00:32:16,948 --> 00:32:20,888
I love beer. Okay, so if you love beer as well, maybe you

482
00:32:21,054 --> 00:32:24,484
know what I'm talking about. So we have those remote

483
00:32:24,532 --> 00:32:28,024
service. But right now I'm using a reactive

484
00:32:28,072 --> 00:32:30,990
approach to gather all this data.

485
00:32:31,680 --> 00:32:34,812
And the last part, now we are almost done

486
00:32:34,866 --> 00:32:38,616
here. We will keep doing reactive

487
00:32:38,728 --> 00:32:42,592
approach, but right now using reactive streams with

488
00:32:42,646 --> 00:32:46,396
Kafka. So let's add a Kafka

489
00:32:46,428 --> 00:32:47,650
extension here.

490
00:32:52,420 --> 00:32:55,828
Okay, good. And this application,

491
00:32:55,994 --> 00:33:00,080
now we work it in this session with fruits,

492
00:33:00,240 --> 00:33:03,732
then with beer, now with wine. I do

493
00:33:03,786 --> 00:33:07,684
love wine as well. So let's work with some wine

494
00:33:07,732 --> 00:33:08,330
here.

495
00:33:11,640 --> 00:33:16,004
But boom. We already

496
00:33:16,202 --> 00:33:19,784
also have a audio. This new

497
00:33:19,822 --> 00:33:23,256
application we will work off with prices of

498
00:33:23,278 --> 00:33:26,650
the wine. So let's create a

499
00:33:27,420 --> 00:33:32,030
priced wine class,

500
00:33:35,740 --> 00:33:38,680
okay? And we will create,

501
00:33:38,830 --> 00:33:42,184
we not have a database of course, but we

502
00:33:42,222 --> 00:33:45,836
will create a class called here

503
00:33:45,938 --> 00:33:49,372
wine generator that will help us to guess

504
00:33:49,426 --> 00:33:52,430
what generate wines. Okay,

505
00:33:53,760 --> 00:33:57,520
we will create a resource that

506
00:33:57,590 --> 00:33:59,680
will be our endpoint.

507
00:34:01,540 --> 00:34:02,290
So,

508
00:34:05,140 --> 00:34:06,770
and this guy here,

509
00:34:08,500 --> 00:34:12,164
okay, so we have here the channel that we will connect

510
00:34:12,282 --> 00:34:16,084
on the kafka that is priced wine. The return is

511
00:34:16,122 --> 00:34:20,436
also a mutey as we saw on the last example.

512
00:34:20,618 --> 00:34:24,420
And we will bet the information that are priced

513
00:34:24,500 --> 00:34:28,008
wines. Okay, for doing that,

514
00:34:28,094 --> 00:34:31,160
we will also need, guess what? A Kafka. Okay,

515
00:34:31,230 --> 00:34:35,224
so we will add some new properties

516
00:34:35,272 --> 00:34:39,672
here. I will create a docker compose file

517
00:34:39,816 --> 00:34:43,276
to spin up a kafka on my

518
00:34:43,378 --> 00:34:47,056
machine, my local machine here. So basically we

519
00:34:47,078 --> 00:34:49,040
create this docker compose.

520
00:34:50,260 --> 00:34:54,370
Let's edit this file and I will red

521
00:34:55,140 --> 00:34:58,752
hat we need here. Okay,

522
00:34:58,886 --> 00:35:02,260
let me see basically those example

523
00:35:02,330 --> 00:35:05,892
we work with Kafka zookeeper and a

524
00:35:05,946 --> 00:35:08,980
price generator service that I just created here.

525
00:35:09,130 --> 00:35:12,452
So I will restart

526
00:35:12,516 --> 00:35:15,720
this application, I will split

527
00:35:16,220 --> 00:35:25,140
this guy here compose

528
00:35:25,300 --> 00:35:28,632
app. Okay, so this will spin up

529
00:35:28,766 --> 00:35:31,320
a Kafka on my machine.

530
00:35:34,710 --> 00:35:38,362
I hope everyone is connected right now and

531
00:35:38,456 --> 00:35:42,634
let's try it. I will call this

532
00:35:42,672 --> 00:35:46,134
new service and voila.

533
00:35:46,262 --> 00:35:50,534
I'm using a wine generator to populate my kafka

534
00:35:50,582 --> 00:35:54,430
and getting a list of wine with prices.

535
00:35:55,250 --> 00:35:58,926
All right, good. So well, we did it.

536
00:35:58,948 --> 00:36:02,750
We made it. Okay guys, I'm really help when

537
00:36:02,820 --> 00:36:06,882
things just work. This was our call time so

538
00:36:06,936 --> 00:36:10,126
I would like to end just sharing with you those QR

539
00:36:10,158 --> 00:36:14,322
code and this URL from developers Redhead.com,

540
00:36:14,456 --> 00:36:18,198
our red hat developers program where we share a

541
00:36:18,204 --> 00:36:21,442
lot of content about Java containers, microservice,

542
00:36:21,586 --> 00:36:24,966
kubernetes, all the cloud native related stuff you can

543
00:36:24,988 --> 00:36:28,646
just describe and we will send to you when we

544
00:36:28,668 --> 00:36:32,202
have news about it. Okay, so in the portal there are

545
00:36:32,256 --> 00:36:36,378
a lot of content, all free, all open source. Because everything

546
00:36:36,464 --> 00:36:40,326
that we did, everything that we do on red hat is open source.

547
00:36:40,358 --> 00:36:44,042
Okay? So we are very happy to share all those with

548
00:36:44,096 --> 00:36:47,882
you and just to say goodbye to you. I'm really happy

549
00:36:47,936 --> 00:36:51,738
that you shared your time with me in these few minutes

550
00:36:51,904 --> 00:36:55,346
in this session. I hope you enjoyed and you have here my

551
00:36:55,368 --> 00:36:58,930
twitter. Okay, so you can reach me on Twitter. If you have any questions,

552
00:36:59,080 --> 00:37:02,482
any comments, just please share with me. I will

553
00:37:02,536 --> 00:37:05,922
be very happy to talk to you. See you next

554
00:37:05,976 --> 00:37:08,110
time. Have a great confidence and bye.

