1
00:01:15,066 --> 00:01:45,630
Am

2
00:01:46,410 --> 00:02:11,920
am you?

3
00:02:15,090 --> 00:02:18,574
Hi, I'm Z ISO and today I'm going to talk about

4
00:02:18,612 --> 00:02:22,666
static analysis and how it helps you engineer more reliable systems.

5
00:02:22,858 --> 00:02:26,126
This will help you make it harder for incorrect code to blow up

6
00:02:26,148 --> 00:02:29,726
production at 03:00 a.m. There are a lot of tools out

7
00:02:29,748 --> 00:02:33,278
there that can do this for a variety of languages. However,

8
00:02:33,364 --> 00:02:37,766
I'm going to focus on go because that's what I am in expert in in

9
00:02:37,788 --> 00:02:40,886
this talk, I'll cover the problem space, some solutions you

10
00:02:40,908 --> 00:02:44,754
can apply today, and how you can work with people to engineer more reliable

11
00:02:44,802 --> 00:02:48,370
systems. As I said, I'm Zee.

12
00:02:48,450 --> 00:02:51,866
I'm the archmage of infrastructure at tailscale. I've been an

13
00:02:51,888 --> 00:02:55,126
SRE for several years and I'm moving over into developer

14
00:02:55,158 --> 00:02:58,506
relations. As a disclaimer, this talk may

15
00:02:58,528 --> 00:03:02,250
contain opinions. None of these opinions are my employers.

16
00:03:03,070 --> 00:03:07,082
I'll have a recording of this talk, slides, speaker notes,

17
00:03:07,146 --> 00:03:10,538
and a transcript of it up in a day or two after the conference.

18
00:03:10,714 --> 00:03:14,110
The QR code in the corner of the screen will take you to my blog

19
00:03:16,370 --> 00:03:19,986
when starting to think about a problem, I find it helps to start thinking about

20
00:03:20,008 --> 00:03:23,602
the problem space. This usually means thinking about the problem

21
00:03:23,656 --> 00:03:27,270
at an incredibly high level and all of its related parts.

22
00:03:27,690 --> 00:03:31,846
So let's think about the problem space of compilers at

23
00:03:31,868 --> 00:03:35,670
the highest possible level, a compiler can take literally anything

24
00:03:35,740 --> 00:03:38,950
as input and maybe produce an output.

25
00:03:40,270 --> 00:03:43,146
A compiler's job is to take this anything,

26
00:03:43,328 --> 00:03:46,806
see if it matches a set of rules, and then produce an output

27
00:03:46,838 --> 00:03:50,010
of some kind. In this case,

28
00:03:50,160 --> 00:03:53,486
with the go compiler, this means that the input needs to

29
00:03:53,508 --> 00:03:57,230
match the rules that the Go language has defined in its specification.

30
00:03:58,930 --> 00:04:02,074
This human readable specification outlines

31
00:04:02,122 --> 00:04:06,186
core rules of the Go language. These include

32
00:04:06,218 --> 00:04:09,646
things like every Go file needs to be in a package,

33
00:04:09,758 --> 00:04:13,518
the need to declare variables before using them, what core types

34
00:04:13,534 --> 00:04:17,320
are in the language, how to deal with slices, and more.

35
00:04:18,010 --> 00:04:22,262
However, the specification doesn't define what correct go

36
00:04:22,316 --> 00:04:25,890
code is, it only defines what valid

37
00:04:25,970 --> 00:04:29,702
go code is. This is normal for specifications

38
00:04:29,766 --> 00:04:33,722
of this kind. Ensuring correctness is an active field of research

39
00:04:33,776 --> 00:04:37,114
in computer science that small, scrappy startups like

40
00:04:37,152 --> 00:04:40,300
Google, Microsoft, and Apple struggle with.

41
00:04:42,590 --> 00:04:46,314
As a result of this, though, you can't rely on the compiler

42
00:04:46,362 --> 00:04:50,510
from stopping all incorrect code from being deployed into production.

43
00:04:51,010 --> 00:04:54,640
There's a wide range of errors that will be stopped in the process,

44
00:04:55,010 --> 00:04:57,860
but there are more subtle errors that can squeak by.

45
00:04:58,870 --> 00:05:02,258
This is an example of the kind of error that the go compiler can

46
00:05:02,264 --> 00:05:05,394
catch by itself. If you declare a value as

47
00:05:05,432 --> 00:05:08,262
a string, you can't go put an integer in it.

48
00:05:08,396 --> 00:05:11,720
They are different types, and the compiler will reject it.

49
00:05:13,610 --> 00:05:17,574
I know one of you is out there probably thinking something like what

50
00:05:17,612 --> 00:05:21,926
about rust? What about Hassell? Don't those compilers

51
00:05:22,038 --> 00:05:25,420
have a reputation for making very correct code?

52
00:05:26,830 --> 00:05:30,614
And you know what? That's a good point. There's other languages

53
00:05:30,662 --> 00:05:34,666
that have more strict rules like linear types or explicitly

54
00:05:34,698 --> 00:05:38,538
marking when you poke the outside world. However, the kinds

55
00:05:38,554 --> 00:05:42,298
of errors that are brought up in this talk can still happen in those languages,

56
00:05:42,474 --> 00:05:45,090
even if it's more difficult to do it by accident.

57
00:05:46,230 --> 00:05:49,886
Static analysis on top of your existing compiler lets

58
00:05:49,918 --> 00:05:53,426
you step closer to correctness without going the

59
00:05:53,448 --> 00:05:56,950
maximalist route, like when you port everything to rust.

60
00:05:57,450 --> 00:06:00,870
It's a balance between pragmatism and correctness.

61
00:06:01,450 --> 00:06:05,394
The pragmatic solution and the correct solution are always in conflict,

62
00:06:05,522 --> 00:06:08,040
so you need to find a compromise down the middle.

63
00:06:09,550 --> 00:06:12,906
This is because in general, proving everything is correct with

64
00:06:12,928 --> 00:06:16,810
static analysis is literally impossible.

65
00:06:17,310 --> 00:06:20,554
It takes a theoretically infinite amount of time to tell if

66
00:06:20,592 --> 00:06:23,870
absolutely every facet of the code is correct in every single

67
00:06:23,940 --> 00:06:27,786
way. But we don't

68
00:06:27,818 --> 00:06:30,800
have to be perfect, we have to be good.

69
00:06:31,490 --> 00:06:35,134
And perfect is the enemy of the good. And static analysis

70
00:06:35,182 --> 00:06:38,020
is more moving you towards perfect while being good.

71
00:06:38,790 --> 00:06:41,906
So here are some patterns for things that can be solved with

72
00:06:41,928 --> 00:06:46,106
static analysis in go. They are not releasing

73
00:06:46,158 --> 00:06:50,050
resources that you acquire, making typos

74
00:06:50,130 --> 00:06:52,680
that the compiler can't prove at compile time.

75
00:06:53,290 --> 00:06:56,470
Usually this happens with struct tags,

76
00:06:57,210 --> 00:07:00,342
invalid constants such as time format, strings,

77
00:07:00,486 --> 00:07:03,130
URLs, and regular expressions,

78
00:07:04,430 --> 00:07:08,378
and a wide range of predictable crashes or

79
00:07:08,464 --> 00:07:10,250
very unintended behavior.

80
00:07:12,130 --> 00:07:15,386
These kinds of things are easy to prove and are enabled

81
00:07:15,418 --> 00:07:18,160
by default in govet and static check.

82
00:07:19,650 --> 00:07:23,242
Also, for the record, incorrect code won't explode

83
00:07:23,306 --> 00:07:26,498
instantly upon it being run. The devil is in the

84
00:07:26,504 --> 00:07:30,514
details of how it is incorrect and how those things can pile up to create

85
00:07:30,552 --> 00:07:34,082
issues downstream. Incorrect code can also

86
00:07:34,136 --> 00:07:37,506
confuse you while trying to debug it, which can make you waste

87
00:07:37,538 --> 00:07:39,880
time you could spend doing anything else.

88
00:07:43,210 --> 00:07:46,370
This is an example of Go code that will compile.

89
00:07:46,530 --> 00:07:50,490
It'll likely do what you want, but bit is incorrect.

90
00:07:53,070 --> 00:07:56,774
It is incorrect because the HTTP response

91
00:07:56,822 --> 00:08:00,490
body is read from, but it's never closed

92
00:08:01,470 --> 00:08:04,986
in Go. When you don't close the response body, you will leak

93
00:08:05,018 --> 00:08:08,430
the resources associated with that HTTP connection.

94
00:08:09,170 --> 00:08:12,958
When you close the response body, it will release the connection so that you

95
00:08:12,964 --> 00:08:16,386
can use it for other HTTP actions. If you

96
00:08:16,408 --> 00:08:20,126
don't do this, you can easily run into a state where your server

97
00:08:20,158 --> 00:08:23,810
application will run out of available sockets at 03:00 a.m. And case

98
00:08:25,190 --> 00:08:28,920
you may be tempted to fix it like this.

99
00:08:30,490 --> 00:08:34,086
However, this is incorrect too. Look at

100
00:08:34,108 --> 00:08:37,574
where the defer is called. Let's think about how

101
00:08:37,612 --> 00:08:41,178
the program flow will work. I'm going to translate this into a

102
00:08:41,184 --> 00:08:44,540
diagram of how the computer is going to execute this code.

103
00:08:45,790 --> 00:08:50,038
This flowchart is another way to think about how this program is being executed.

104
00:08:50,214 --> 00:08:53,854
It starts with the HTTP get call on the left side

105
00:08:53,972 --> 00:08:57,534
and flows to either crashing or the

106
00:08:57,572 --> 00:08:59,520
code finishing on the right.

107
00:09:01,650 --> 00:09:05,022
In this case, we start with the HTTP getcall and then

108
00:09:05,076 --> 00:09:07,940
defer, closing the response body to the end of the function.

109
00:09:08,390 --> 00:09:12,034
Then we check to see if there was an error or not. If there

110
00:09:12,072 --> 00:09:15,770
was no error, we can use the response and do something useful,

111
00:09:15,950 --> 00:09:19,378
and then the response body comes automatically due

112
00:09:19,394 --> 00:09:22,840
to the deferred close. Everything works like you'd expect.

113
00:09:24,090 --> 00:09:27,446
However, if there was an error, something different happens.

114
00:09:27,628 --> 00:09:31,842
The error is returned and then the scheduled close call runs.

115
00:09:31,986 --> 00:09:35,898
The close call assumes that the response is valid bit it's not.

116
00:09:36,064 --> 00:09:39,386
This results in the program panicking, which can be a crash at 03:00

117
00:09:39,408 --> 00:09:42,686
a.m. This is the kind of place where static analysis comes

118
00:09:42,708 --> 00:09:45,994
in to save you. Let's take a look at what Go vet

119
00:09:46,042 --> 00:09:47,360
says about this code.

120
00:09:49,810 --> 00:09:53,526
HTTP Get Go line 16 using response

121
00:09:53,578 --> 00:09:57,250
before checking for errors it caught the error.

122
00:09:57,590 --> 00:10:01,170
To fix this, we need to move the defer call to after the error check

123
00:10:01,240 --> 00:10:02,100
like this.

124
00:10:04,710 --> 00:10:08,750
This way the response body is closed after we know that it's usable.

125
00:10:08,910 --> 00:10:12,630
This will work as we expect in production. This is an example

126
00:10:12,700 --> 00:10:16,630
of how trivial errors can be fixed with a little extra tooling without

127
00:10:16,700 --> 00:10:18,790
having to rewrite everything in rust.

128
00:10:20,750 --> 00:10:24,454
If you use Go test, then a large amount of these go vet

129
00:10:24,502 --> 00:10:28,166
checks are run by default. This covers a wide

130
00:10:28,198 --> 00:10:31,754
variety of common issues that have trivial fixes that

131
00:10:31,792 --> 00:10:36,074
help move your code towards the corresponding Go idioms. It's limited

132
00:10:36,122 --> 00:10:39,658
to the subset of checks that aren't known to have false positives.

133
00:10:39,754 --> 00:10:43,306
So if you want more assurance, you will need to run govet or other tools

134
00:10:43,338 --> 00:10:45,380
in your continuous integration step.

135
00:10:46,950 --> 00:10:50,658
And some of you might be thinking, well, if these are so

136
00:10:50,744 --> 00:10:53,780
easy to detect, why doesn't gobuild do this?

137
00:10:54,710 --> 00:10:58,646
This is a good question. I'm personally on the side of the

138
00:10:58,668 --> 00:11:02,040
compiler should aggressively project code as much as possible,

139
00:11:02,570 --> 00:11:06,454
but the reason why this isn't done in Go is because

140
00:11:06,492 --> 00:11:10,054
it's a matter of philosophy. Go is

141
00:11:10,092 --> 00:11:13,580
not a language that wants to make it impossible to write buggy code.

142
00:11:14,110 --> 00:11:17,130
Go just wants to give you tools to make your life easier.

143
00:11:17,950 --> 00:11:21,114
In the Go team's view, they would rather you be able

144
00:11:21,152 --> 00:11:24,606
to compile buggy code than have the compiler reject your code on

145
00:11:24,628 --> 00:11:27,806
accident. This is a result of a

146
00:11:27,828 --> 00:11:31,562
philosophy of trusting that there are gaps between the programmer and production.

147
00:11:31,706 --> 00:11:35,310
During those gaps, there are testing. There's tools like static check

148
00:11:35,460 --> 00:11:39,266
and govet, but most importantly, there's also human review

149
00:11:39,368 --> 00:11:41,730
to catch other trivial errors.

150
00:11:44,150 --> 00:11:47,278
In addition to using govet checks, you can also use

151
00:11:47,304 --> 00:11:50,834
static check with this GitHub action. This will automatically

152
00:11:50,882 --> 00:11:54,438
download, install, and run static check on your code.

153
00:11:54,604 --> 00:11:58,066
Static check catches a wide variety of errors that govet

154
00:11:58,098 --> 00:12:01,526
considers out of scope. Here's can example of a

155
00:12:01,548 --> 00:12:05,530
more complicated problem that static check can catch but govet can't.

156
00:12:08,400 --> 00:12:12,088
The reason why there's a problem here is that go lets you make variables

157
00:12:12,104 --> 00:12:15,664
that are scoped to if statements. This lets you write

158
00:12:15,702 --> 00:12:16,850
code like this.

159
00:12:18,820 --> 00:12:21,970
This is shorthand for writing out something like this.

160
00:12:22,900 --> 00:12:26,500
This does the same thing, but it looks a bit more ugly.

161
00:12:27,240 --> 00:12:30,708
Either way, the error value isn't in scope at

162
00:12:30,714 --> 00:12:33,460
the end of it, so it'll be dropped by the garbage collector.

163
00:12:35,320 --> 00:12:39,284
However, let's also consider the other important part of this snippet

164
00:12:39,412 --> 00:12:43,144
variable shadowing. We have two different

165
00:12:43,182 --> 00:12:47,300
variables named x, and they are different types declared at different places.

166
00:12:47,460 --> 00:12:50,776
To help you tell them apart, I've colored the inner one yellow and

167
00:12:50,798 --> 00:12:54,300
the outer one red. In a type assertion like this,

168
00:12:54,370 --> 00:12:57,960
the red variable is not an int, but the yellow variable

169
00:12:58,040 --> 00:13:00,830
is an int that might have failed to assert down.

170
00:13:01,520 --> 00:13:05,172
If it fails to assert down, then the yellow x variable

171
00:13:05,256 --> 00:13:08,290
will always be can int that will have the value zero.

172
00:13:08,660 --> 00:13:12,176
This is probably not what you want, given that the log call with

173
00:13:12,198 --> 00:13:15,684
the percent sign t format specifier would let you know

174
00:13:15,722 --> 00:13:17,990
what type the red x variable was,

175
00:13:18,920 --> 00:13:22,180
and as a result, when you run this code

176
00:13:22,250 --> 00:13:26,224
you will get an error message that looks like this unexpected

177
00:13:26,272 --> 00:13:30,456
type int. This will confuse the living hell out of you.

178
00:13:30,638 --> 00:13:34,024
The correct fix here is to rename the int version of

179
00:13:34,062 --> 00:13:37,448
x. You could do this in a few ways, but here's a

180
00:13:37,454 --> 00:13:40,628
valid approach. Change the name of

181
00:13:40,654 --> 00:13:42,780
the yellow x to xint.

182
00:13:43,440 --> 00:13:46,636
This will get you the correct result. You would also need to

183
00:13:46,658 --> 00:13:50,236
change the okay branch of the if statement to

184
00:13:50,258 --> 00:13:54,012
use xint instead of x, but this is a fairly easy

185
00:13:54,066 --> 00:13:57,964
thing to fix. There are a bunch of other checks that static

186
00:13:58,012 --> 00:14:01,952
check runs by default. I could easily talk about them for a few hours,

187
00:14:02,086 --> 00:14:08,372
but I'm being to focus on one of the more interestingly subtle checks in

188
00:14:08,426 --> 00:14:12,724
go. Sometimes you need to write your own error types with

189
00:14:12,762 --> 00:14:16,116
go interfaces and their duck typing. Anything that

190
00:14:16,138 --> 00:14:19,624
matches the definition of the error interface is able to be used as

191
00:14:19,662 --> 00:14:20,730
an error value.

192
00:14:23,100 --> 00:14:26,376
I put the definition of the error interface type over to the

193
00:14:26,398 --> 00:14:30,364
side and gave you a link to the go documentation for

194
00:14:30,402 --> 00:14:33,772
it. In this case, our type

195
00:14:33,826 --> 00:14:37,644
failure has an error method, which means that the go compiler can

196
00:14:37,682 --> 00:14:41,944
treat it as an error. Given that the error function

197
00:14:42,082 --> 00:14:45,456
returns a string, that means that our failure type is an

198
00:14:45,478 --> 00:14:46,160
error.

199
00:14:48,260 --> 00:14:52,864
However, something else to keep in mind is that the receiver the

200
00:14:52,902 --> 00:14:56,432
function is a pointer value. Normally this means a few things,

201
00:14:56,486 --> 00:14:59,796
but in this case it means that the receiver may be nil and as a

202
00:14:59,818 --> 00:15:01,940
result the reason may not exist.

203
00:15:03,800 --> 00:15:07,460
Because of this, we can return a nil value of failure

204
00:15:07,820 --> 00:15:10,984
and then when you try to use it from go, it will explode at

205
00:15:11,022 --> 00:15:14,452
runtime panic runtime error

206
00:15:14,516 --> 00:15:19,044
invalid memory address or nil pointer dereference boom,

207
00:15:19,172 --> 00:15:23,532
it crashed. Seg fault this

208
00:15:23,586 --> 00:15:27,630
happens because under the hood each interface value is a box.

209
00:15:28,000 --> 00:15:31,416
The box contains the type of the value in the box and a pointer

210
00:15:31,448 --> 00:15:35,120
to the actual value itself. But this box

211
00:15:35,190 --> 00:15:39,040
will always exist even if the underlying value is nil.

212
00:15:40,020 --> 00:15:43,600
This means that the if error not equals nil check will always return

213
00:15:43,670 --> 00:15:47,296
true. So you will always try to read from the value,

214
00:15:47,478 --> 00:15:51,540
which will always explode because the underlying value is nil.

215
00:15:51,880 --> 00:15:55,156
This is always frustrating when you run into it, but let's see

216
00:15:55,178 --> 00:15:57,850
what static check says when we run it against this code.

217
00:15:59,020 --> 00:16:02,632
Errorbomb go line eleven do work never

218
00:16:02,686 --> 00:16:04,970
returns a nil interface value.

219
00:16:05,900 --> 00:16:09,064
Haza static check rejects it. If this

220
00:16:09,102 --> 00:16:13,144
code was checked into source control and static check was a run in CI,

221
00:16:13,272 --> 00:16:16,524
tests would fail and this would never be allowed to be deployed to

222
00:16:16,562 --> 00:16:19,852
production. The correct version of do work

223
00:16:19,906 --> 00:16:23,676
should look something like this. Note how I changed the failure

224
00:16:23,708 --> 00:16:26,924
case to use an untyped nil. This prevents

225
00:16:26,972 --> 00:16:30,508
the nil value from being boxed into an interface.

226
00:16:30,684 --> 00:16:32,290
This will do the right thing.

227
00:16:33,940 --> 00:16:38,004
This will help you ensure that this kind of code never enters production so

228
00:16:38,042 --> 00:16:41,460
it cannot fail at untold hours of the night while you are sleeping.

229
00:16:42,440 --> 00:16:47,152
As sres, we tend to sleep very little, as is statistically.

230
00:16:47,216 --> 00:16:50,352
We have higher rates of burnout, mind fog, fatigue,

231
00:16:50,416 --> 00:16:54,376
and likelihood of turning into angry, sad people as we do this

232
00:16:54,398 --> 00:16:58,072
job longer and longer, especially if the culture of a company

233
00:16:58,126 --> 00:17:01,450
is broken enough that you end up being on call during sleeping hours.

234
00:17:02,060 --> 00:17:05,276
This is not healthy. It is not sustainable for

235
00:17:05,298 --> 00:17:08,684
us to be woken up at obscene hours of the night because of trivial and

236
00:17:08,722 --> 00:17:12,028
prevents errors. If we get woken up in the middle of

237
00:17:12,034 --> 00:17:15,528
the night, it should be things that are measurably novel and not caused

238
00:17:15,544 --> 00:17:19,090
by errors that should have never been allowed to be deployed in the first place.

239
00:17:20,820 --> 00:17:23,904
I don't think I've heard my pager sound in years by this point.

240
00:17:24,022 --> 00:17:27,910
Bit. The last time I heard it, I almost had a full blown panic attack.

241
00:17:30,040 --> 00:17:33,344
I have been in the kind of place where burnout from my pager

242
00:17:33,392 --> 00:17:36,612
severely affected my health. I'm still

243
00:17:36,666 --> 00:17:40,096
recovering from the after effects of that tour of SRE duty

244
00:17:40,208 --> 00:17:43,976
and this has resulted in me making permanent career changes that I am never

245
00:17:43,998 --> 00:17:47,316
put in that kind of position again. I don't

246
00:17:47,348 --> 00:17:49,850
wish the hell that I've experienced on anyone.

247
00:17:52,060 --> 00:17:55,950
Normally when you're in SRE put into the line of pager fire,

248
00:17:56,400 --> 00:18:01,340
it kind of feels like both options suck.

249
00:18:02,080 --> 00:18:05,916
Fixing production seems like it'll be impossible. Being able

250
00:18:05,938 --> 00:18:09,264
to get more sleep during on call hours seems impossible because

251
00:18:09,302 --> 00:18:12,736
things aren't getting fixed, and with an

252
00:18:12,758 --> 00:18:15,956
SLA for responding to the pager within half an

253
00:18:15,978 --> 00:18:16,550
hour,

254
00:18:19,960 --> 00:18:22,260
it just feels impossible.

255
00:18:24,440 --> 00:18:27,960
Adding static analysis to your continuous integration step

256
00:18:28,030 --> 00:18:32,120
can allow you to walk down a new middle path between these two extremes.

257
00:18:33,340 --> 00:18:35,610
It is not going to be perfect,

258
00:18:36,300 --> 00:18:40,010
however, gradually things will get better.

259
00:18:40,540 --> 00:18:44,124
Trivial errors will be blocked from going into production and

260
00:18:44,162 --> 00:18:46,380
you will be able to sleep easier.

261
00:18:47,280 --> 00:18:51,036
The benefits of being able to rest easier like this are numerous and

262
00:18:51,058 --> 00:18:54,808
difficult to summarize. It could save your relationship with your loved

263
00:18:54,824 --> 00:18:58,544
ones. It could prevent people near you from resenting you.

264
00:18:58,742 --> 00:19:02,496
It could be the difference between a long and happy career, or having to

265
00:19:02,518 --> 00:19:06,436
drop out of tech at 25, burnt out to a crisp and unable to

266
00:19:06,458 --> 00:19:10,324
do much of anything. It could

267
00:19:10,362 --> 00:19:14,384
be the difference between life and an early, uniquely death

268
00:19:14,432 --> 00:19:16,070
from a preventable heart attack.

269
00:19:19,410 --> 00:19:22,946
In talks like these, it's easy to ignore the fact that the people that

270
00:19:22,968 --> 00:19:26,740
are responsible for making sure services are reliable are that

271
00:19:27,190 --> 00:19:30,226
human company culture may

272
00:19:30,248 --> 00:19:33,814
get in the way and there may be a lack of people that are

273
00:19:33,852 --> 00:19:36,230
willing or able to take the pager rotation.

274
00:19:38,250 --> 00:19:41,890
However, when the machines come to take our jobs,

275
00:19:42,050 --> 00:19:44,780
I hope that this is one of the first that they take.

276
00:19:47,150 --> 00:19:50,538
In the meantime, all we can do is get towards a

277
00:19:50,544 --> 00:19:53,946
more sustainable future. The best thing we can do is to

278
00:19:53,968 --> 00:19:57,534
make sure people sleep well without having to worry about being woken up

279
00:19:57,572 --> 00:20:01,114
because of preventable errors that tools like static check can block

280
00:20:01,162 --> 00:20:04,766
from getting into production. If you

281
00:20:04,788 --> 00:20:08,638
use go in production, I highly suggest using static check

282
00:20:08,804 --> 00:20:12,318
if you find it useful. Sponsor Dominic on GitHub

283
00:20:12,494 --> 00:20:15,986
software like this is complicated to develop and the best way to

284
00:20:16,008 --> 00:20:19,886
ensure Dominic can keep developing it is to pay him for his efforts

285
00:20:20,078 --> 00:20:23,830
the better he sleeps, the better you sleep as an SRE.

286
00:20:25,290 --> 00:20:29,030
As for other languages, I'm going to be totally honest.

287
00:20:29,100 --> 00:20:32,790
I don't know what the best practices are. You will have to do research

288
00:20:32,860 --> 00:20:36,266
on this. You may have to work together with other coworkers to

289
00:20:36,288 --> 00:20:38,700
find out what would be the best option for your team.

290
00:20:39,790 --> 00:20:42,570
I will say though, bit is worth the effort.

291
00:20:43,470 --> 00:20:46,874
This helps you make a better product for everyone and it's worth

292
00:20:46,912 --> 00:20:50,320
the teething pains at first. You can do it.

293
00:20:51,570 --> 00:20:54,606
I'm almost at the end, but I wanted to give a special shout out to

294
00:20:54,628 --> 00:20:58,014
all these people who helped make this talk a reality. I also

295
00:20:58,052 --> 00:21:01,186
want to give a special shout out to my coworkers at Tailscale that let me

296
00:21:01,208 --> 00:21:05,090
load shed super hard so that I could focus on making this talk shine.

297
00:21:07,270 --> 00:21:10,354
Thanks for watching. I'll stick around in the chat for

298
00:21:10,392 --> 00:21:13,666
questions, but if I miss your question and you really want an

299
00:21:13,688 --> 00:21:17,678
answer to it, please email it to code 42 SRE

300
00:21:17,774 --> 00:21:21,300
2022 at Zserve us.

301
00:21:21,750 --> 00:21:25,610
I'm happy to answer questions and I enjoy writing up responses.

302
00:21:26,110 --> 00:21:29,240
Have a good rest of the conference. Everyone be well.

