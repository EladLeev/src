1
00:00:00,250 --> 00:00:01,630
Are you an SRE?

2
00:00:03,570 --> 00:00:04,830
A developer?

3
00:00:06,610 --> 00:00:10,014
A quality engineer who wants to tackle the challenge of

4
00:00:10,052 --> 00:00:13,274
improving reliability in your DevOps? You can enable

5
00:00:13,322 --> 00:00:16,510
your DevOps for reliability with chaos native.

6
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native. Litmus Cloud

7
00:01:16,570 --> 00:01:19,954
hi, welcome two my talk about evangelizing the SRE

8
00:01:20,002 --> 00:01:23,570
mindset and building a culture of reliability and ownership.

9
00:01:23,730 --> 00:01:27,174
I'm Christina. I moved to the US from Columbia when I was

10
00:01:27,212 --> 00:01:30,870
seven and I studied at the University of Pennsylvania.

11
00:01:30,950 --> 00:01:34,422
I majored in systems engineering and computer science.

12
00:01:34,566 --> 00:01:38,006
I started my career at Bridgewater Associates. It's a hedge

13
00:01:38,038 --> 00:01:41,486
fund in Connecticut and while I was there I was

14
00:01:41,508 --> 00:01:44,922
building a portfolio analytics platform and an editorial

15
00:01:44,986 --> 00:01:48,826
news site. Afterwards I joined Cortex as a founding

16
00:01:48,858 --> 00:01:52,506
engineer and these second hire and I've been partnering with engineering

17
00:01:52,538 --> 00:01:55,906
leads and sres ever since. Cortex is building a tool to

18
00:01:55,928 --> 00:01:59,838
help teams manage their services and define best practices

19
00:01:59,934 --> 00:02:03,362
across their organizations. So enough about me,

20
00:02:03,416 --> 00:02:06,934
let's actually get into the talk. Today we're going to be covering the

21
00:02:06,972 --> 00:02:10,854
changing role of the SRE at leading technology companies and go through

22
00:02:10,892 --> 00:02:14,806
best practices to enable engineering organizations to

23
00:02:14,828 --> 00:02:18,806
deliver reliable, performant and secure systems.

24
00:02:18,998 --> 00:02:22,426
So how do Sres define theyre role? If you

25
00:02:22,448 --> 00:02:26,218
look at the quote above, you'll see that the focus is

26
00:02:26,304 --> 00:02:29,610
efficiency, scalability, reliability and

27
00:02:29,680 --> 00:02:33,214
systemically delivered solutions. And so how do

28
00:02:33,252 --> 00:02:36,622
engineers define the SRE role? Based on this

29
00:02:36,676 --> 00:02:41,082
quote, you'll see that there's a focus on help with daily technical

30
00:02:41,146 --> 00:02:44,126
challenges, providing tools and metrics,

31
00:02:44,238 --> 00:02:48,850
performance resiliency and management visibility into team performance.

32
00:02:49,350 --> 00:02:53,410
So these definitions are pretty similar. That's great. And obviously

33
00:02:53,480 --> 00:02:56,886
I don't want to overemphasize the findings in the

34
00:02:56,908 --> 00:03:00,998
sample of two quotes. But if you just bear with me for a moment,

35
00:03:01,164 --> 00:03:04,482
you'll see that both sres and engineers emphasize

36
00:03:04,546 --> 00:03:08,902
a focus on efficiency, scalability and reliability.

37
00:03:09,046 --> 00:03:12,410
Let's unpack where these definitions actually differ.

38
00:03:12,560 --> 00:03:16,506
Right. The engineer seems to have a broader definition of the

39
00:03:16,528 --> 00:03:19,802
role than the SRE does in this particular example.

40
00:03:19,936 --> 00:03:22,670
Again, just bear with me with the two quotes.

41
00:03:23,490 --> 00:03:27,582
Both mention visibility into how the system works and fits together,

42
00:03:27,716 --> 00:03:31,610
but the engineer uses the word daily, which I find particularly

43
00:03:31,690 --> 00:03:35,106
interesting. They also mentioned that the

44
00:03:35,128 --> 00:03:38,766
SRE team is a conduit between engineering teams

45
00:03:38,798 --> 00:03:42,898
and management, and that's different.

46
00:03:42,984 --> 00:03:46,722
And that has changed recently. Before when we thought about SRE

47
00:03:46,786 --> 00:03:50,450
teams, we would think of them as these Kubernetes expert or the AWS

48
00:03:50,530 --> 00:03:53,702
expert. Those days are pretty much over.

49
00:03:53,836 --> 00:03:57,710
Today's leading technology companies are empowering sres

50
00:03:57,810 --> 00:04:01,562
to actually level up their engineering organizations and have

51
00:04:01,616 --> 00:04:05,306
impact on how the engineering team works. And what

52
00:04:05,328 --> 00:04:09,194
it means to work together. So what

53
00:04:09,232 --> 00:04:13,578
does it mean to foster a culture of reliability and ownership?

54
00:04:13,754 --> 00:04:17,534
One of the first things that I learned at my first job was who our

55
00:04:17,572 --> 00:04:21,310
systems were for. There I was working for

56
00:04:21,380 --> 00:04:25,790
people. Sorry. There it was for underresourced

57
00:04:25,870 --> 00:04:29,374
state pension funds, for teachers and firefighters who relied

58
00:04:29,422 --> 00:04:33,474
on our system to make allocation decisions that would impact millions of

59
00:04:33,512 --> 00:04:37,074
retirees or sovereign wealth funds charged

60
00:04:37,122 --> 00:04:40,898
with the financial stability and security of nations. Someone turned

61
00:04:40,914 --> 00:04:44,482
that expectation real about my systems. We operated

62
00:04:44,546 --> 00:04:47,746
under the tried and true four nines principles.

63
00:04:47,778 --> 00:04:51,050
That allows for less than an hour of downtime a year.

64
00:04:51,200 --> 00:04:54,586
That's 53 minutes of downtime, to be exact.

65
00:04:54,768 --> 00:04:58,598
The first time that I brought down production, it was a gut wrenching feeling.

66
00:04:58,694 --> 00:05:01,946
I had this in mind, and it absolutely sucked. I knew that

67
00:05:01,968 --> 00:05:05,534
I let down my team. I let down myself, I let

68
00:05:05,572 --> 00:05:09,422
down my manager, but also I let down the analysts at our company using

69
00:05:09,476 --> 00:05:13,442
the tools, and I let down the clients, the people that actually

70
00:05:13,496 --> 00:05:17,058
depend on our systems to make their decisions. One of

71
00:05:17,064 --> 00:05:20,898
the analysts I worked with described poor performance in our application

72
00:05:21,064 --> 00:05:24,686
as being sent into war without a sword.

73
00:05:24,798 --> 00:05:28,246
And so every time it brought down production, that's kind of what I

74
00:05:28,268 --> 00:05:32,214
had in mind. It's that terrible feeling that, you know,

75
00:05:32,252 --> 00:05:35,510
that you let people down, that you

76
00:05:35,580 --> 00:05:39,318
cause the problems, and so what do you do? How do

77
00:05:39,324 --> 00:05:42,742
you handle these situations? Right after the dust

78
00:05:42,806 --> 00:05:46,074
actually settles on these incidents, the app is back

79
00:05:46,112 --> 00:05:50,118
up and running. We've had a day or two to let down our emotions

80
00:05:50,294 --> 00:05:54,046
and just let it all die down. It's super important to get

81
00:05:54,068 --> 00:05:58,078
together and talk about what went wrong, and that's exactly what my team did.

82
00:05:58,244 --> 00:06:01,278
We'd pull up the code that caused issues and ask,

83
00:06:01,444 --> 00:06:04,558
who wrote this? How was it tested?

84
00:06:04,734 --> 00:06:08,722
Should our automated testing have caught this? Who code

85
00:06:08,776 --> 00:06:12,354
reviewed it? Should they have code reviewed it? Were they the right

86
00:06:12,392 --> 00:06:15,826
people to code review? Why wasn't the problem caught in a staging

87
00:06:15,858 --> 00:06:19,826
environment? Why wasn't it caught in post production?

88
00:06:19,938 --> 00:06:23,030
Who released it? Who went through that checklist?

89
00:06:23,690 --> 00:06:27,014
That post validated the release? And we did

90
00:06:27,052 --> 00:06:31,074
this in a way that didn't point fingers or make people feel bad.

91
00:06:31,212 --> 00:06:34,522
The whole point of this process is to bring the teams together

92
00:06:34,656 --> 00:06:37,946
so that you could learn, evolve, and figure out

93
00:06:37,968 --> 00:06:41,210
how to prevent this from happening in the future. People should

94
00:06:41,280 --> 00:06:44,926
worry about letting their customers down, not about getting yelled at by their

95
00:06:44,948 --> 00:06:48,126
boss or having a bad performance review. At the end of the

96
00:06:48,148 --> 00:06:51,070
day, it's all about the customers and your users.

97
00:06:51,410 --> 00:06:55,054
As a junior engineer, knowing how these problems would

98
00:06:55,092 --> 00:06:58,478
be handled when they did occur because we all know that they're

99
00:06:58,494 --> 00:07:02,226
going to occur. You're never bring to write perfect code actually gave me the

100
00:07:02,248 --> 00:07:05,554
space to develop without letting me off the hook or relegating

101
00:07:05,602 --> 00:07:11,654
me to bad tasks that

102
00:07:11,692 --> 00:07:15,670
I maybe didn't want to do. So ask yourself,

103
00:07:15,820 --> 00:07:19,846
does your engineering team know why the application matters?

104
00:07:20,038 --> 00:07:23,450
Are there explicit expectations about uptime?

105
00:07:23,790 --> 00:07:27,194
Do your engineers know how problems are handled in

106
00:07:27,232 --> 00:07:31,126
the organization? If you're not sure about the answers

107
00:07:31,158 --> 00:07:34,474
to any of these questions, or maybe you're not sure

108
00:07:34,512 --> 00:07:38,042
that the junior engineer that just joined your team six months ago knows

109
00:07:38,106 --> 00:07:41,054
in the same way that someone that has been there for two years, it might

110
00:07:41,092 --> 00:07:44,720
be a good time to actually get your team together and talk about this problem

111
00:07:45,410 --> 00:07:48,834
and just make sure that everyone's on the same page. It's even a good thing

112
00:07:48,872 --> 00:07:53,038
to do every couple of months to make sure that expectations haven't changed.

113
00:07:53,134 --> 00:07:55,460
The team is operating as they should.

114
00:07:56,070 --> 00:07:59,830
So how can you apply this to your delivery machine?

115
00:08:00,170 --> 00:08:03,394
The first and most important thing is ownership. If there's

116
00:08:03,442 --> 00:08:06,806
any confusion about who's responsible for what, you have absolutely

117
00:08:06,908 --> 00:08:10,214
no chance. If there's frequent problems with some part of the

118
00:08:10,252 --> 00:08:13,658
system, someone's neck needs to be on the line to fix it.

119
00:08:13,744 --> 00:08:17,510
Who is both empowered to do so and knows that they're responsible

120
00:08:17,590 --> 00:08:21,354
for it. These owner of each piece of the application is

121
00:08:21,392 --> 00:08:24,766
also responsible for making sure that documentation is up to date,

122
00:08:24,868 --> 00:08:28,826
runbooks are clear and easy to follow, and dependencies are well defined.

123
00:08:29,018 --> 00:08:32,078
We all know that writing documentation kind of sucks, but in

124
00:08:32,084 --> 00:08:35,780
a few minutes I'll go through a case study about why this is so important.

125
00:08:38,630 --> 00:08:42,526
With that said, you can also build safeguards around these workflows to keep ship

126
00:08:42,558 --> 00:08:45,890
from shipping. Sres need to go toe to toe with product

127
00:08:45,960 --> 00:08:50,082
managers to make sure that the work required to build a robust

128
00:08:50,146 --> 00:08:53,698
delivery system isn't getting kicked down to the backlog.

129
00:08:53,794 --> 00:08:57,910
It should be prioritized just as much as new features are prioritized.

130
00:08:58,430 --> 00:09:01,994
Finally, when things go wrong, talk about it. Get your

131
00:09:02,032 --> 00:09:05,562
team together, follow the principles of agile and actually have

132
00:09:05,616 --> 00:09:09,306
retros go through what went wrong. You can use

133
00:09:09,488 --> 00:09:13,630
the questions that I went through earlier, go through what the solution was,

134
00:09:13,700 --> 00:09:16,782
go through how you can prevent this problem from happening again,

135
00:09:16,916 --> 00:09:20,682
and make sure you know who was responsible. This retro

136
00:09:20,746 --> 00:09:24,846
and going through these problems should be a mundane part of just day

137
00:09:24,868 --> 00:09:28,066
to day doing business. It should become as much

138
00:09:28,088 --> 00:09:31,634
of a non event as prioritizing Jira tickets. In that

139
00:09:31,672 --> 00:09:35,138
way, your team knows exactly what to expect when things go down.

140
00:09:35,224 --> 00:09:39,190
And again, the point isn't to blame someone.

141
00:09:39,340 --> 00:09:43,026
It's to figure out how to work together better as a team, how to evolve,

142
00:09:43,058 --> 00:09:47,586
and how to prevent these things from happening. So let's

143
00:09:47,618 --> 00:09:48,940
go through a case study.

144
00:09:50,750 --> 00:09:54,154
Say you're the engineer on call. You went

145
00:09:54,192 --> 00:09:57,434
to bed, it's 03:00 a.m. And you get woken up.

146
00:09:57,472 --> 00:10:01,814
It's the middle of these night. You're super groggy, you're tired,

147
00:10:01,942 --> 00:10:05,854
you've been sleeping for a few hours, but it's not enough. And so you

148
00:10:05,892 --> 00:10:09,886
look at this message and you have no idea what it's referring to, what the

149
00:10:09,908 --> 00:10:13,402
service is. You grunt, you grumble

150
00:10:13,466 --> 00:10:16,546
little, and you pull your laptop into bed with you

151
00:10:16,568 --> 00:10:20,050
and open it up. It's 315. It's been 15

152
00:10:20,120 --> 00:10:24,002
minutes since you got the call, and you can't find these service that's down.

153
00:10:24,136 --> 00:10:27,446
You have no idea how to find it. You've never heard of

154
00:10:27,468 --> 00:10:31,142
it. You've looked everywhere you can think of. You keep

155
00:10:31,196 --> 00:10:35,062
looking through the documentation, and you finally find

156
00:10:35,116 --> 00:10:38,582
the service. But there's no documentation about it.

157
00:10:38,636 --> 00:10:42,106
There is no runbook. There's nothing that you know that can

158
00:10:42,128 --> 00:10:45,866
help you get it back up at 345.

159
00:10:45,968 --> 00:10:49,546
You decide that because you can't find the service owner, and you don't know who

160
00:10:49,568 --> 00:10:52,826
to contact in 45 minutes. You just want to go back to

161
00:10:52,848 --> 00:10:56,158
bed. You call a different engineers on your team.

162
00:10:56,324 --> 00:11:00,014
The Mr. Fixit, we all know him. He's the one that gets called every

163
00:11:00,052 --> 00:11:03,474
time there's an incident, every time something goes down. The one you

164
00:11:03,512 --> 00:11:06,562
go to, every time you have questions, Mr.

165
00:11:06,616 --> 00:11:10,226
Fixit answers your call. Thank God. And then

166
00:11:10,328 --> 00:11:13,730
you both work together. He hasn't seen this before,

167
00:11:13,880 --> 00:11:17,558
but he thinks that restarting the app will help. It's happened with similar

168
00:11:17,644 --> 00:11:21,094
services, so that's exactly what you do.

169
00:11:21,292 --> 00:11:24,630
You figure out how to restart the app. You're both there.

170
00:11:24,780 --> 00:11:28,890
You wait for it to come back up, and after

171
00:11:28,960 --> 00:11:32,250
15 minutes of monitoring it, you go back to sleep.

172
00:11:32,830 --> 00:11:36,586
At 10:00 a.m. You log back onto your computer

173
00:11:36,688 --> 00:11:38,460
for your daily stand up.

174
00:11:39,870 --> 00:11:43,294
Everything's up, everything's running. No one realizes that you and Mr.

175
00:11:43,332 --> 00:11:46,590
Fixit were up at 03:00 a.m. Actually solving this.

176
00:11:46,740 --> 00:11:50,686
And in a month, when this all happens again, because there

177
00:11:50,708 --> 00:11:53,934
was no retro, there was no talk about fixing it,

178
00:11:53,972 --> 00:11:56,980
there was no talk about preventing this from happening again.

179
00:11:57,430 --> 00:12:01,122
You're the one on call once again. And this time, when you go to call

180
00:12:01,176 --> 00:12:04,834
Mr. Fixit, he's no longer there. He quit to go

181
00:12:04,872 --> 00:12:08,934
work at a company that actually cares about reliability. He was done

182
00:12:08,972 --> 00:12:11,030
with the 03:00 a.m. Wake up calls.

183
00:12:11,450 --> 00:12:15,142
So not a great scenario, and not one

184
00:12:15,196 --> 00:12:18,054
that personally, I want to be a part of. Right.

185
00:12:18,172 --> 00:12:21,354
So how do we actually take the principles that I

186
00:12:21,392 --> 00:12:24,746
laid out earlier and apply this to how the

187
00:12:24,768 --> 00:12:28,650
incident machine should go and how teams should actually handle this process?

188
00:12:28,800 --> 00:12:32,334
So again, let's reset. Pretend again,

189
00:12:32,452 --> 00:12:35,646
you're the engineer on call. You went to bed, you get

190
00:12:35,668 --> 00:12:39,450
woken up at 03:00 a.m. You're groggy, you're annoyed.

191
00:12:39,610 --> 00:12:43,346
You open up the messages, and you look at

192
00:12:43,368 --> 00:12:46,866
it. You open up your computer, and you go straight to the service

193
00:12:46,968 --> 00:12:51,150
with that name. This time around, there's documentation.

194
00:12:51,310 --> 00:12:55,602
There's a clear process to figure out where

195
00:12:55,656 --> 00:12:59,366
the logs are, where the runbook is, what's going on. So you look

196
00:12:59,388 --> 00:13:02,770
at those logs, you determine that the app needs to be restarted.

197
00:13:02,930 --> 00:13:07,254
You pull up the runbook to do so, and after 45

198
00:13:07,292 --> 00:13:10,458
minutes, the app is back up. Talk about a difference,

199
00:13:10,544 --> 00:13:14,970
right? It's already taking less time than it had in our previous scenario.

200
00:13:15,390 --> 00:13:18,922
Moreover, you didn't call anyone. You didn't have to call Mr.

201
00:13:18,976 --> 00:13:22,510
Fixit this time around. You were able to actually

202
00:13:22,580 --> 00:13:26,110
fix this yourself without necessarily knowing what these service does,

203
00:13:26,180 --> 00:13:29,680
what it is, and having worked on it before,

204
00:13:30,050 --> 00:13:33,938
you go back to bed after monitoring for 15 minutes, and then

205
00:13:34,024 --> 00:13:37,890
at 10:00 a.m. These team responsible for the service gets together

206
00:13:37,960 --> 00:13:41,714
to actually prioritize a fix for the issue so that next time

207
00:13:41,752 --> 00:13:45,326
this happens so that it won't

208
00:13:45,358 --> 00:13:48,742
happen again, and that if it does happen next time, they can

209
00:13:48,796 --> 00:13:52,022
figure out why and what went wrong. But you know that they've tried to fix

210
00:13:52,076 --> 00:13:55,702
it before, so why does this matter?

211
00:13:55,836 --> 00:13:59,414
Obviously, it's bad for morale. It's bad for the engineering

212
00:13:59,462 --> 00:14:03,434
team. You don't want to be woken up at 03:00 a.m. But it also

213
00:14:03,472 --> 00:14:05,820
is super important to the business.

214
00:14:06,190 --> 00:14:09,686
So stripe actually published

215
00:14:09,718 --> 00:14:12,986
a survey in 2018 about engineering

216
00:14:13,018 --> 00:14:16,910
efficiency and its $3 trillion impact on

217
00:14:16,980 --> 00:14:20,798
the global GDP. And so, obviously,

218
00:14:20,884 --> 00:14:24,018
your engineering team will be annoyed by incidents and

219
00:14:24,024 --> 00:14:27,406
the morale will be down, and you should prioritize fixing

220
00:14:27,438 --> 00:14:30,610
it. But in terms of translating this to leadership,

221
00:14:31,830 --> 00:14:35,366
these study found that the average developer spends more

222
00:14:35,388 --> 00:14:39,126
than 17 hours a week dealing with maintenance issues.

223
00:14:39,308 --> 00:14:42,694
That involves 13 hours a week on tech

224
00:14:42,732 --> 00:14:45,960
debt and 4 hours a week on bad code.

225
00:14:46,970 --> 00:14:50,940
And so if you actually translate this into the cost,

226
00:14:51,790 --> 00:14:55,274
you'll see that in the average work week of 40 hours

227
00:14:55,312 --> 00:14:58,906
a week, if you're spending 4 hours on bad code,

228
00:14:59,008 --> 00:15:03,070
that's 9.25% of productivity,

229
00:15:03,890 --> 00:15:08,734
and that equates to $85 billion

230
00:15:08,852 --> 00:15:12,400
a year. And so

231
00:15:12,790 --> 00:15:16,706
let's think of this in the same exact way that

232
00:15:16,808 --> 00:15:20,034
leaders can understand, right? Bad code is

233
00:15:20,072 --> 00:15:24,126
debt, and debt is something that all engineering,

234
00:15:24,238 --> 00:15:27,230
all leaders, regardless of their technical abilities,

235
00:15:27,310 --> 00:15:30,978
understand. We all know that there's a few ways to handle debt.

236
00:15:31,074 --> 00:15:34,726
You can refinance, you can pay the monthly minimum, you can

237
00:15:34,748 --> 00:15:38,134
take out another loan, but eventually the debt collector is always

238
00:15:38,172 --> 00:15:41,654
going to call, and those bills need to be paid. This framing

239
00:15:41,702 --> 00:15:45,126
is exactly what you can use for managers who aren't

240
00:15:45,158 --> 00:15:48,746
technical enough to understand the problems that they're dealing with when you talk

241
00:15:48,768 --> 00:15:52,914
about tech debt. So, practically, as engineers,

242
00:15:52,982 --> 00:15:56,254
we have three approaches that can go into solving these problem.

243
00:15:56,452 --> 00:15:59,786
One, we can pay down the debt slowly over time by carving

244
00:15:59,818 --> 00:16:03,694
out engineering capacity for it. This can mean that you

245
00:16:03,732 --> 00:16:07,118
put 10% of engineering capacity into every sprint

246
00:16:07,214 --> 00:16:11,662
to actually handle tickets. You could also do one ticket per engineer

247
00:16:11,726 --> 00:16:15,534
is a tech debt ticket. And that's a way to slowly carve

248
00:16:15,582 --> 00:16:18,390
out over time and fix on that tech debt.

249
00:16:19,850 --> 00:16:23,926
Option two is you can focus on it. You could dedicate a specific team to

250
00:16:23,948 --> 00:16:27,574
fixing tech debt, or you can dedicate a specific sprint or

251
00:16:27,612 --> 00:16:32,166
time period every quarter to actually eliminate tech debt for all teams.

252
00:16:32,358 --> 00:16:35,020
Personally, I don't think this is a great option.

253
00:16:35,550 --> 00:16:38,954
No team wants to work solely on tech debt. It sucks. We all

254
00:16:38,992 --> 00:16:42,506
want to be working on the features that actually impact clients. We want to

255
00:16:42,528 --> 00:16:46,062
see them use the tools. You want to see that aha moment when they're using

256
00:16:46,116 --> 00:16:48,160
your product and you know that it works.

257
00:16:48,770 --> 00:16:52,414
Moreover, the team who created the tech debt should work on

258
00:16:52,452 --> 00:16:55,726
their tech debt. That's how you learn from it, that's how you improve, and that's

259
00:16:55,758 --> 00:16:59,438
how you start thinking about how to eliminate it in the future as you're

260
00:16:59,454 --> 00:17:02,834
building out new products. And if you

261
00:17:02,872 --> 00:17:06,158
choose to go the route of doing a sprint a quarter,

262
00:17:06,254 --> 00:17:10,006
these problem with that is that you don't want to pause feature development for,

263
00:17:10,028 --> 00:17:13,346
say, two weeks to actually work on tech debt. And there's

264
00:17:13,378 --> 00:17:17,014
always going to be a team that's working on something so critical that

265
00:17:17,052 --> 00:17:20,618
you just can't do that. And so at that point, they're going to

266
00:17:20,624 --> 00:17:23,978
be exempt. It's going to be easy to ignore it for a

267
00:17:23,984 --> 00:17:28,060
few people, and it's not actually bring to necessarily help these situation.

268
00:17:28,750 --> 00:17:32,474
These third option is, obviously you go bankrupt.

269
00:17:32,602 --> 00:17:36,254
And this doesn't mean literally bankrupt, right?

270
00:17:36,372 --> 00:17:40,634
But it could mean a variety of bad outcomes. There could be security breaches,

271
00:17:40,682 --> 00:17:43,774
you could be having lot of downtime rather than

272
00:17:43,812 --> 00:17:46,786
the 1 hour of downtime a year, you could have an hour of downtime a

273
00:17:46,808 --> 00:17:50,814
week. You could also have performance degradation,

274
00:17:50,862 --> 00:17:53,940
which again is almost just as bad as your app being down.

275
00:17:55,190 --> 00:17:59,270
And so basically this is a good framing for people to actually

276
00:17:59,340 --> 00:18:02,546
think about how to handle bad code and how to handle

277
00:18:02,578 --> 00:18:06,550
these tech debt and how to get it prioritized among your engineering leaders

278
00:18:06,890 --> 00:18:10,874
and your organization. So remember,

279
00:18:11,072 --> 00:18:14,522
the simplest and most important takeaway from all of these

280
00:18:14,576 --> 00:18:18,326
should be that you want to create an engineers culture

281
00:18:18,358 --> 00:18:21,742
that cares about the users. And behind the users is the

282
00:18:21,796 --> 00:18:24,320
reliability and stability of the application,

283
00:18:25,010 --> 00:18:28,154
management and teammates who embody these values.

284
00:18:28,282 --> 00:18:31,674
SRE incredibly important good onboarding

285
00:18:31,722 --> 00:18:35,614
for new engineers that makes requirements and expectations explicit

286
00:18:35,662 --> 00:18:39,442
is key that new team members should understand how

287
00:18:39,496 --> 00:18:43,138
incidents are handled and how the onpaul process works, even if

288
00:18:43,144 --> 00:18:46,562
they're not necessarily on it. You hope that in six months

289
00:18:46,616 --> 00:18:49,814
of time theyre will be on it and it won't be a huge thing

290
00:18:49,852 --> 00:18:53,640
to get trained up, rather something that they already know how it works.

291
00:18:54,490 --> 00:18:58,354
Having up to date documentation, run books, easily accessible

292
00:18:58,402 --> 00:19:01,690
logs is key. Obviously my case study

293
00:19:01,760 --> 00:19:04,918
that I did isn't a concrete example, but I'm

294
00:19:04,934 --> 00:19:08,122
SRE. We've all been there, we've all restarted our apps to fix

295
00:19:08,176 --> 00:19:11,706
an incident and these the trickiest

296
00:19:11,738 --> 00:19:15,454
part to navigate here right in a spot where good technology can help

297
00:19:15,572 --> 00:19:18,926
is actually defining ownership, having a place to

298
00:19:18,948 --> 00:19:22,350
store all that documentation and information about services,

299
00:19:22,500 --> 00:19:26,490
and helping map out the dependencies across complex systems.

300
00:19:26,650 --> 00:19:30,618
And that's exactly what Cortex is built to do. I encourage

301
00:19:30,634 --> 00:19:33,438
you to take a look at our website or send me a message and we

302
00:19:33,444 --> 00:19:37,746
can do a quick demo. Um, but we've been helping engineering

303
00:19:37,778 --> 00:19:41,014
teams and SRE teams for a while and the

304
00:19:41,052 --> 00:19:44,760
tool helps you do exactly this.

305
00:19:46,250 --> 00:19:49,526
Thank you. If you want to reach out,

306
00:19:49,548 --> 00:19:51,860
my email is on the screen. Hope you enjoyed the talk.

