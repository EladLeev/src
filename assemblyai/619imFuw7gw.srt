1
00:00:00,250 --> 00:00:01,630
Are youll an SRE,

2
00:00:03,570 --> 00:00:07,358
a developer, a quality

3
00:00:07,444 --> 00:00:11,162
engineer who wants to tackle the challenge of improving reliability

4
00:00:11,226 --> 00:00:15,294
in your DevOps? You can enable your DevOps for reliability with

5
00:00:15,332 --> 00:00:18,654
chaos native. Create your free account at

6
00:00:18,692 --> 00:01:17,030
Chaos native. Litmus Cloud hi,

7
00:01:17,100 --> 00:01:20,338
my name is JJ Asghar and I'm a developer advocate

8
00:01:20,354 --> 00:01:23,720
for IBM Cloud. Hopefully you can hear me and see me

9
00:01:24,090 --> 00:01:27,746
and thank youll so much for having me at Conf 24. I look

10
00:01:27,788 --> 00:01:31,306
forward to this talk. So let's see if I got this right. We'll go

11
00:01:31,328 --> 00:01:34,746
ahead and transition and you should see some slides now.

12
00:01:34,848 --> 00:01:38,570
Wonderful. So yes,

13
00:01:38,720 --> 00:01:41,946
let us continue. Yes, so we

14
00:01:41,968 --> 00:01:45,994
are here to do migrating a monolith to cloud native and some stumbling

15
00:01:46,042 --> 00:01:50,058
blocks you may have not heard about again. Hi IBM JJ, developer advocate

16
00:01:50,074 --> 00:01:53,806
for IBM Cloud. You can reach me at awesome@ibm.com or

17
00:01:53,828 --> 00:01:56,110
find me on Twitter at jjasco.

18
00:01:56,610 --> 00:01:59,906
So your company has finally decided to move

19
00:01:59,928 --> 00:02:03,662
to the cloud native ecosystem. You've landed on containerization

20
00:02:03,726 --> 00:02:06,978
has your first step and you heard all you need to

21
00:02:06,984 --> 00:02:11,426
do is containerize your first app, push it to kubernetes, openshift or nomad,

22
00:02:11,538 --> 00:02:15,254
and the cost savings will just come. Youve done this and well,

23
00:02:15,292 --> 00:02:18,566
things haven't gone as well as you thought they would. What do

24
00:02:18,588 --> 00:02:22,586
you mean our Opex has gone up? Simply said, the promise of containerization or

25
00:02:22,608 --> 00:02:26,058
migrating to the cloud native ecosystem can be a lie if you don't do your

26
00:02:26,064 --> 00:02:30,282
homework. Sadly, most companies don't. And in this talk, I'll explain

27
00:02:30,336 --> 00:02:34,094
a few gotchas that a few enterprises in

28
00:02:34,132 --> 00:02:37,966
the guise of a company called Asgar Labs hit moving towards the

29
00:02:37,988 --> 00:02:42,014
cloud native world. And hopefully you'll learn from their mistakes so

30
00:02:42,132 --> 00:02:45,886
you don't trip down this path that you get closer

31
00:02:45,918 --> 00:02:47,570
to the promise of containerization.

32
00:02:49,990 --> 00:02:53,154
So let's talk about what JJ Asgharlabs JJ Asgharlabs is

33
00:02:53,192 --> 00:02:57,458
just a multinational tech conglomerate with multiple subsidiaries,

34
00:02:57,634 --> 00:03:00,914
also known as a mask for me, not naming

35
00:03:00,962 --> 00:03:04,578
companies outright. So I'll just say Asgar Labs.

36
00:03:04,594 --> 00:03:08,274
And you can imagine it's some fortune company out there. In all seriousness,

37
00:03:08,322 --> 00:03:11,562
it's a collection of different companies that I've just ran into

38
00:03:11,616 --> 00:03:15,498
and the stories that I want to tell to make sure the

39
00:03:15,584 --> 00:03:18,826
companies are kept innocent. And yes, it's a fake company.

40
00:03:18,928 --> 00:03:22,878
It doesn't really exist, though the website. I do actually have my email come of

41
00:03:22,884 --> 00:03:26,234
my test emails from there, but no, and we're not hiring

42
00:03:26,282 --> 00:03:29,470
inferior if you're wondering. It was supposed to be a joke.

43
00:03:32,550 --> 00:03:35,986
So what did ask our labs or what didnt most of these companies think they

44
00:03:36,008 --> 00:03:40,034
need to do. They thought they could take their migration from the physical

45
00:03:40,082 --> 00:03:43,778
data center or colocation to the VMware ecosystem.

46
00:03:43,874 --> 00:03:47,658
So, remember back in the day when the promise of virtualization and you

47
00:03:47,664 --> 00:03:51,254
could be like, hey, instead of four physical machines,

48
00:03:51,382 --> 00:03:54,838
youll could turn it into 16 vms.

49
00:03:54,934 --> 00:03:58,202
With four physical machines becoming a hypervisor of some sort,

50
00:03:58,336 --> 00:04:01,674
they thought they could take that same monolithic concept and

51
00:04:01,712 --> 00:04:05,086
virtualization and just move it to cloud. Native bare metals to

52
00:04:05,108 --> 00:04:08,314
vms is the same as VMS to containers,

53
00:04:08,362 --> 00:04:10,640
right? Like, that's what they thought that we needed to do.

54
00:04:13,030 --> 00:04:15,060
Spoiler alert, it's not.

55
00:04:16,470 --> 00:04:20,226
So where do I come into this conversation? Normally, it's usually after a

56
00:04:20,248 --> 00:04:23,566
few successful migrations that they've

57
00:04:23,598 --> 00:04:27,480
had, which, honestly, I beg to differ that these were successful or not.

58
00:04:28,650 --> 00:04:32,806
It's nowhere near what they thought they could provide or how

59
00:04:32,828 --> 00:04:36,120
much they could have within time and effort and money they spent on it.

60
00:04:36,570 --> 00:04:40,746
I came in as the cloud native person and asked some very simple

61
00:04:40,848 --> 00:04:44,300
but very tough questions to these companies.

62
00:04:45,230 --> 00:04:47,420
Let's go talk about the very first question here.

63
00:04:48,850 --> 00:04:52,938
So let's ask some very straightforward questions, but they're deceptively

64
00:04:53,034 --> 00:04:57,054
hard to answer. First, that question is,

65
00:04:57,172 --> 00:05:01,006
who containerized your app? Was it developers or the

66
00:05:01,028 --> 00:05:05,134
operations team? Was there more than a couple status

67
00:05:05,182 --> 00:05:09,426
meetings? Cough Asgard Labs? Cough supposed

68
00:05:09,448 --> 00:05:12,882
to be a joke between the project teams and then who actually

69
00:05:12,936 --> 00:05:16,534
shipped it? Did you actually work closely together to make

70
00:05:16,572 --> 00:05:20,230
that happen? I mean, was it a completely different team?

71
00:05:20,300 --> 00:05:23,830
Was there a containerization team? I've seen what they call

72
00:05:23,900 --> 00:05:27,414
centers of excellences, where they basically had

73
00:05:27,452 --> 00:05:30,746
a team of people who are supposed to funnel all this

74
00:05:30,768 --> 00:05:34,646
stuff, but they didn't have the same skills that the developers or the questions teams

75
00:05:34,678 --> 00:05:37,866
had. So you need to figure out who actually gave

76
00:05:37,888 --> 00:05:41,178
you that container and built it. I mean, if you're building it yourself and it's

77
00:05:41,194 --> 00:05:44,634
a small team, sure, that's great. But if youre a massive

78
00:05:44,682 --> 00:05:48,650
corporation and you have separation of powers to the extreme,

79
00:05:48,810 --> 00:05:52,366
you need to know what made them decide to do the thing

80
00:05:52,388 --> 00:05:56,242
they did and who they are. That leads into the second question.

81
00:05:56,296 --> 00:05:59,202
It's like, why did you containerize your app?

82
00:05:59,336 --> 00:06:02,914
Honestly ask that question. You should have that answer very

83
00:06:02,952 --> 00:06:06,614
readily. Ask youre teams containerized because they were told

84
00:06:06,652 --> 00:06:10,360
to, not for any other reason than some execs said that

85
00:06:11,210 --> 00:06:14,726
our core software stack needs to now be next gen.

86
00:06:14,908 --> 00:06:18,166
It's the exact same thing I saw at another company where they

87
00:06:18,188 --> 00:06:21,754
were told they needed to be on the cloud, not realizing that

88
00:06:21,872 --> 00:06:25,194
they were taking a massive engineering effort to move to the

89
00:06:25,232 --> 00:06:29,034
cloud. That exact same CIO at a different company

90
00:06:29,152 --> 00:06:31,660
or same personality, I should say personality type.

91
00:06:32,110 --> 00:06:35,838
Personality type. You could tell, read some article saying that

92
00:06:35,844 --> 00:06:38,922
we needed to be next gen so we could get the next group of engineers

93
00:06:38,986 --> 00:06:42,114
to come and play with our technology. So we need to move things.

94
00:06:42,312 --> 00:06:46,274
But why? If you dont actually need

95
00:06:46,312 --> 00:06:50,178
to, you shouldn't need to if you're making money.

96
00:06:50,264 --> 00:06:52,450
Anyway, we'll get deeper into that in a minute.

97
00:06:53,270 --> 00:06:56,742
And where did you deploy or plan on

98
00:06:56,796 --> 00:07:00,470
deploying this containerized app? This spurs from a conversation,

99
00:07:01,050 --> 00:07:04,614
where is the choice of your cloud? Because of some

100
00:07:04,652 --> 00:07:08,098
ela, there's a couple clouds out there that will give you all you can

101
00:07:08,124 --> 00:07:11,386
eat for a first year and then all

102
00:07:11,408 --> 00:07:15,094
of a sudden your costs skyrocket because you didn't realize,

103
00:07:15,142 --> 00:07:18,874
you didn't cap it right. There are other companies like IBM Cloud

104
00:07:18,912 --> 00:07:23,386
of course, that have some really interesting opportunities for enterprises

105
00:07:23,498 --> 00:07:26,686
specifically. We don't do that by the way. We actually

106
00:07:26,868 --> 00:07:29,870
have really good predictive modeling. But that's a different conversation.

107
00:07:32,770 --> 00:07:36,366
Is this cloud the best for your company? Or is this something just forced

108
00:07:36,398 --> 00:07:39,330
upon you? Did you do your homework to actually understand that?

109
00:07:39,400 --> 00:07:42,340
Turns out Cloud A, cloud B, and Cloud C,

110
00:07:42,790 --> 00:07:46,994
they all focus on different things. Maybe you should look at all of them,

111
00:07:47,112 --> 00:07:51,074
or maybe you should put all your eggs in one basket. It really depends.

112
00:07:51,122 --> 00:07:54,934
And you should spend that time to do that work. And believe

113
00:07:54,972 --> 00:07:58,794
it or not, I've actually asked

114
00:07:58,912 --> 00:08:03,174
things question to a rather large conversation.

115
00:08:03,302 --> 00:08:06,570
And I said, so what did you containerize?

116
00:08:06,910 --> 00:08:09,834
And they looked at me like I was crazy.

117
00:08:10,032 --> 00:08:12,460
And then they're like, oh yeah,

118
00:08:13,070 --> 00:08:16,398
we took this war file, might have actually been an ear file now that

119
00:08:16,404 --> 00:08:19,706
I think about it. And we shoved it in a new container and we contain

120
00:08:19,738 --> 00:08:22,800
youre iStar app. And I was just like,

121
00:08:23,570 --> 00:08:26,738
wait, what? You just

122
00:08:26,824 --> 00:08:30,098
took this was file and wrapped it in a container and shoved it

123
00:08:30,104 --> 00:08:33,746
on Kubernetes and wondering why your app isn't doing what you expect it

124
00:08:33,768 --> 00:08:37,750
to do. And they're like, yeah, well, isn't that the whole point of containerization?

125
00:08:38,090 --> 00:08:41,240
And I took a moment and I was like, no,

126
00:08:42,170 --> 00:08:46,086
there's a lot more here. And let's take a quick aside and

127
00:08:46,108 --> 00:08:50,266
talk about some architectural changes that are required as you move towards this.

128
00:08:50,368 --> 00:08:54,282
So yes, containerization, the promise of it is you should be able to take

129
00:08:54,416 --> 00:08:57,690
your app, wrap it up in a container and ship it anywhere.

130
00:08:58,030 --> 00:09:01,582
But there is nuances to this. And I really hope

131
00:09:01,636 --> 00:09:05,934
through this presentation you actually see that

132
00:09:06,132 --> 00:09:10,058
it's not just cut and let's

133
00:09:10,074 --> 00:09:13,426
take, because of course I work at IBM, I need to have

134
00:09:13,448 --> 00:09:16,450
websphere somewhere in my presentation. That's a joke.

135
00:09:17,910 --> 00:09:21,374
But let's take a quick aside and go into these architecturals.

136
00:09:21,422 --> 00:09:24,802
The first one, as our previous Azar labs company,

137
00:09:24,936 --> 00:09:28,326
what they did is do it, a replatform example. They took their

138
00:09:28,348 --> 00:09:32,114
legacy application, which was just basically a war file,

139
00:09:32,242 --> 00:09:35,794
shoved it into a container, in this case from Websphere,

140
00:09:35,922 --> 00:09:40,454
and threw it on the openshift or Kubernetes.

141
00:09:40,582 --> 00:09:43,580
And that's cool. That's a great first step.

142
00:09:43,950 --> 00:09:47,274
Not your final step, your first step, because you need to figure,

143
00:09:47,312 --> 00:09:51,246
make sure that your containerize is fine and you start talking about the

144
00:09:51,268 --> 00:09:55,178
advantages of it. But if you didn't design your architecture

145
00:09:55,274 --> 00:09:58,800
or you didn't rearchitect your application, now basically

146
00:09:59,490 --> 00:10:02,958
you have one big thing of your application, so you don't

147
00:10:02,974 --> 00:10:06,558
take advantage of anything that's inside of Openshift or Kubernetes,

148
00:10:06,734 --> 00:10:10,146
which we'll talk about here in a moment. The next step

149
00:10:10,168 --> 00:10:13,762
is naturally repackaging to microservices, where you start

150
00:10:13,816 --> 00:10:17,186
breaking up your application into a couple of different was files.

151
00:10:17,218 --> 00:10:21,026
For instance, if you see this heard file to two different wires and you shove

152
00:10:21,058 --> 00:10:24,360
it on to Kubernetes or Openshift and you have

153
00:10:25,050 --> 00:10:29,002
your MQ sitting there and your application started talking

154
00:10:29,136 --> 00:10:32,682
a little bit more intelligently to all the things internally inside

155
00:10:32,736 --> 00:10:36,874
of the Kubernetes cluster. And that's really

156
00:10:36,992 --> 00:10:41,126
important. That's the next natural progression. So you've taken your single was

157
00:10:41,168 --> 00:10:45,930
file and now you've taken your little bit more complex

158
00:10:46,010 --> 00:10:49,834
application and you've now put it on Openshift

159
00:10:49,962 --> 00:10:53,358
or Kubernetes. And now you can actually have intercommunication, you can

160
00:10:53,364 --> 00:10:57,298
actually have scaling now, which is nice. So you can scale out your application

161
00:10:57,384 --> 00:11:01,726
layer if you need to or whatever, which makes things much more advantageous.

162
00:11:01,918 --> 00:11:06,118
You start seeing some real ROI on here because now instead of having one

163
00:11:06,204 --> 00:11:10,450
or two or three machines that run youre Webster infrastructure,

164
00:11:10,530 --> 00:11:13,970
now you can actually leverage the cloudiness. And cloudiness

165
00:11:14,050 --> 00:11:18,294
is trademarked, of course, that's another joke and

166
00:11:18,332 --> 00:11:21,820
be able to came out how you need, but you're not quite done yet.

167
00:11:22,270 --> 00:11:25,594
Now we need to talk about refactoring into the strangler pattern. And yes,

168
00:11:25,632 --> 00:11:29,366
I did say the word refactor. And yes, you are going to have to refactor

169
00:11:29,398 --> 00:11:33,546
your application. So now as you take your different was files

170
00:11:33,578 --> 00:11:36,926
and you break them up, now you create them into little microservices and

171
00:11:36,948 --> 00:11:40,634
actually start giving different functions

172
00:11:40,682 --> 00:11:44,290
and different features of your application to

173
00:11:44,440 --> 00:11:47,762
small microservices on containerize inside

174
00:11:47,816 --> 00:11:50,978
of kubernetes or Openshift. This takes time.

175
00:11:51,064 --> 00:11:54,990
This doesn't happen overnight. So when you had that promise of containerization,

176
00:11:55,070 --> 00:11:58,230
of shoving that war file in and calling it a day,

177
00:11:58,380 --> 00:12:02,610
leveraging it with microservices, now you can start taking away complexity

178
00:12:02,690 --> 00:12:06,278
inside of that war file or inside of that job Application I'm just going

179
00:12:06,284 --> 00:12:09,030
to use was as the canonical example.

180
00:12:09,180 --> 00:12:12,806
But you could leverage the scheduler inside of Kubernetes or Openshift

181
00:12:12,838 --> 00:12:16,106
now. Now you don't need a scheduler inside your application. So if you need

182
00:12:16,128 --> 00:12:19,598
to spin out jobs to do other stuff,

183
00:12:19,684 --> 00:12:22,782
you can spin out microservices to do that and giving

184
00:12:22,836 --> 00:12:26,894
those features their own history

185
00:12:27,092 --> 00:12:30,590
and microservice. In turn, you'll be able to

186
00:12:30,660 --> 00:12:34,514
allow things to be rolled out quicker. Because now, instead of you doing that big

187
00:12:34,552 --> 00:12:38,242
bang release of that war file every x number of days

188
00:12:38,296 --> 00:12:42,366
or months or sometimes years, now you can release that microservice

189
00:12:42,478 --> 00:12:46,040
in an intelligent way. But we'll get deeper into that in here in a moment.

190
00:12:47,050 --> 00:12:50,114
So let's talk about some real tangible

191
00:12:50,242 --> 00:12:53,558
architectural advantages and disadvantages of what we just went over.

192
00:12:53,724 --> 00:12:57,506
And first of all, as I just said a moment ago, velocity, or implied

193
00:12:57,538 --> 00:13:01,098
at least, velocity is probably the most important

194
00:13:01,184 --> 00:13:04,806
thing that you get out of this. The ability to focus on their own histories

195
00:13:04,918 --> 00:13:09,002
and scoping the clusters to what you actually need is

196
00:13:09,056 --> 00:13:12,358
great. You actually start seeing real ROI now, you don't

197
00:13:12,374 --> 00:13:15,694
need to have a bunch of machines sitting there in a data center or on

198
00:13:15,732 --> 00:13:19,546
vms on the cloud not doing anything. Now, your Kubernetes cluster

199
00:13:19,578 --> 00:13:22,894
can actually be scoped to what it needs to be. One pod

200
00:13:22,942 --> 00:13:26,434
isn't as good as multiple smaller pods. It's not

201
00:13:26,552 --> 00:13:30,242
like vms anymore. Granted, this does require a higher

202
00:13:30,296 --> 00:13:34,118
level of cooperation between your teams, and you'll need to build more

203
00:13:34,124 --> 00:13:37,686
advanced integration tests, along with most likely a

204
00:13:37,708 --> 00:13:41,206
completely different deployment system and policy system that you have,

205
00:13:41,308 --> 00:13:43,960
but you get some real, real benefits.

206
00:13:44,730 --> 00:13:48,370
So I didn't realize this when I wrote this talk, but the CCB

207
00:13:48,450 --> 00:13:52,026
was a teams that I thought was commonplace, but turns out

208
00:13:52,128 --> 00:13:55,706
it's not. Well, ccbs means change control board.

209
00:13:55,808 --> 00:13:58,922
So, JJ, what do you mean? Our goal is to move away from the change

210
00:13:58,976 --> 00:14:02,602
control board now, at least in some of the enterprises

211
00:14:02,666 --> 00:14:06,362
I've actually personally worked at. The CCB was literally a meeting,

212
00:14:06,426 --> 00:14:09,946
well, not now, but in the day. It was literally

213
00:14:09,978 --> 00:14:13,646
a meeting of the managers, first line managers that would

214
00:14:13,668 --> 00:14:16,654
sit in a room and whenever they had a release,

215
00:14:16,782 --> 00:14:19,954
they would literally put a thumbs up in that room to say,

216
00:14:19,992 --> 00:14:23,346
yes, we can release it at that time. Well at that time I was

217
00:14:23,368 --> 00:14:26,726
the operations guy and I has the privilege of

218
00:14:26,748 --> 00:14:30,774
waking up at three in the morning on a Saturday to release that code.

219
00:14:30,972 --> 00:14:35,254
Needless to say, that was not great. But when

220
00:14:35,292 --> 00:14:38,402
it comes from the enterprise standpoint, it was great. It was wonderful.

221
00:14:38,466 --> 00:14:41,914
Everybody had buy in, everyone actually didnt the thumbs up

222
00:14:41,952 --> 00:14:45,802
to say yes, we should replace it. But inside

223
00:14:45,856 --> 00:14:49,590
the cloud native ecosystem, you can't have that

224
00:14:49,680 --> 00:14:53,566
if you're going to be releasing ten to 15 times,

225
00:14:53,668 --> 00:14:57,022
sometimes n number of times a day,

226
00:14:57,156 --> 00:15:01,054
you can't have a room of middle managers with a thumbs up there.

227
00:15:01,172 --> 00:15:04,786
So you need to recognize that the CCB and that

228
00:15:04,808 --> 00:15:08,706
type of policy still exists today is no

229
00:15:08,728 --> 00:15:11,662
longer like as you move towards this cloud native ecosystem,

230
00:15:11,726 --> 00:15:14,774
you need to get rid of it. If you have these meetings, and I know

231
00:15:14,812 --> 00:15:18,406
some of you do, you need to be sure that they

232
00:15:18,428 --> 00:15:19,590
go by the wayside.

233
00:15:21,210 --> 00:15:23,270
So hey JJ,

234
00:15:24,490 --> 00:15:28,426
aren't we doubling up on like I

235
00:15:28,448 --> 00:15:32,058
have a schedule already build in my app or I

236
00:15:32,064 --> 00:15:34,220
got a load balancer already on my data center.

237
00:15:35,310 --> 00:15:37,990
This already exists on kubernetes.

238
00:15:38,070 --> 00:15:41,498
So why would I do that when

239
00:15:41,504 --> 00:15:45,280
I've already spent all this time and effort to get these knowledge in this space?

240
00:15:45,730 --> 00:15:50,234
Well, youll need to audit and verify that you aren't actually doubling

241
00:15:50,282 --> 00:15:54,210
up work in technology. You're going to have to sit down and really

242
00:15:54,280 --> 00:15:58,162
refactor and architect your application. A great example

243
00:15:58,296 --> 00:16:02,078
was that Azgar Labs had both a scheduler on their Java

244
00:16:02,094 --> 00:16:05,438
stack and they attempted to use kubernetes to schedule pods.

245
00:16:05,614 --> 00:16:08,322
It was kind of weird. It was really, really weird.

246
00:16:08,466 --> 00:16:11,654
But they spent so much time trying

247
00:16:11,692 --> 00:16:16,130
to figure out why when they scheduled

248
00:16:16,290 --> 00:16:20,346
a job to

249
00:16:20,368 --> 00:16:23,994
do, processing or something like that, it would always ever stay inside that

250
00:16:24,032 --> 00:16:27,334
one pod. And because the scheduler for Java

251
00:16:27,382 --> 00:16:30,102
would just spin up another process inside of the pod,

252
00:16:30,246 --> 00:16:33,786
right? And they're like, JJ, we have this three node

253
00:16:33,818 --> 00:16:37,226
cluster, it was a three node cluster at the time, but only one node

254
00:16:37,258 --> 00:16:40,266
is ever actually doing any work. This teams really weird.

255
00:16:40,378 --> 00:16:44,426
Like why is it doing this? And I started digging

256
00:16:44,458 --> 00:16:47,666
into it and I recognized that, oh, well, it turns out the

257
00:16:47,688 --> 00:16:52,242
reason why these are idle is because you're not actually leveraging the scheduler for

258
00:16:52,296 --> 00:16:55,602
kubernetes. So you should spend some time and break

259
00:16:55,656 --> 00:16:59,378
out your scheduler so it creates

260
00:16:59,394 --> 00:17:02,694
other pods so you start overloading or share

261
00:17:02,732 --> 00:17:05,030
the load across the whole closer.

262
00:17:06,350 --> 00:17:12,326
It was a true moment of what's

263
00:17:12,358 --> 00:17:15,946
a good word for it, it was a light bulb moment for that

264
00:17:15,968 --> 00:17:20,026
cluster or the cluster and those people.

265
00:17:20,208 --> 00:17:24,014
But the beauty of it is that actually, not that really

266
00:17:24,052 --> 00:17:27,466
the beauty, more so the challenge is that they still haven't

267
00:17:27,498 --> 00:17:30,846
actually done it because they didn't realize how hard it

268
00:17:30,868 --> 00:17:34,450
was. So arguably they failed at that cloud native

269
00:17:34,870 --> 00:17:38,226
migration and they were like, we have

270
00:17:38,248 --> 00:17:41,746
other priorities. Anyway, long story short, you need to

271
00:17:41,768 --> 00:17:45,474
recognize that there are tooling and

272
00:17:45,512 --> 00:17:48,834
things inside of kubernetes and the cloud native ecosystem

273
00:17:48,882 --> 00:17:52,358
like OpenShift, to be able to handle a lot of things stuff.

274
00:17:52,524 --> 00:17:55,554
Take cloud balancers for instance, right? Like cloud balancers,

275
00:17:55,602 --> 00:17:59,782
they exist, has a software layer

276
00:17:59,926 --> 00:18:03,242
inside of Openshift and kubernetes. And the way the ingress works

277
00:18:03,296 --> 00:18:06,554
and the way that works, are you really going to need can

278
00:18:06,592 --> 00:18:09,814
f five in front of your kubernetes

279
00:18:09,862 --> 00:18:13,262
cluster or your openshift cluster? Now you have to sit down and really

280
00:18:13,316 --> 00:18:15,760
verify and audit what you're doing.

281
00:18:16,530 --> 00:18:19,978
So isn't automation good here? And honestly,

282
00:18:20,074 --> 00:18:23,918
why are things so complicated now, right? Like, come on,

283
00:18:24,084 --> 00:18:26,834
there's a lot going on here. Well, first of all,

284
00:18:27,032 --> 00:18:30,882
of course automation is good here. There's all these moving

285
00:18:30,936 --> 00:18:34,434
parts. You're going to need to leverage automation to make the computers do

286
00:18:34,472 --> 00:18:38,246
the work for you. Humans are error prone, we all know this,

287
00:18:38,348 --> 00:18:42,118
right? I've probably made four mistakes in this talk already, but hopefully you

288
00:18:42,124 --> 00:18:46,966
haven't noticed them. Another joke, hopefully. And you

289
00:18:46,988 --> 00:18:50,634
need to take humans out of the equation. And then

290
00:18:50,832 --> 00:18:54,918
honestly, your app has already probably always been this complicated.

291
00:18:55,094 --> 00:18:58,874
You just now get to see into the complication, if that makes sense.

292
00:18:58,992 --> 00:19:03,242
Youll have to visualize the complexity when you start breaking these things out to microservices.

293
00:19:03,386 --> 00:19:07,054
No longer do you have two or three enterprise architects who

294
00:19:07,092 --> 00:19:11,174
understand how youre whole application works. Now you have a bunch

295
00:19:11,322 --> 00:19:15,198
of people who take care of a bunch of microservices

296
00:19:15,374 --> 00:19:18,642
and they understand how it interacts between

297
00:19:18,696 --> 00:19:19,460
one another.

298
00:19:23,510 --> 00:19:26,130
It helps with remove tribal knowledge.

299
00:19:26,490 --> 00:19:30,866
You'll be able to visualize and start focusing on the different bottlenecks and optimizations

300
00:19:30,898 --> 00:19:34,406
that you can gain from having this knowledge now.

301
00:19:34,588 --> 00:19:37,978
And when you've truly gotten to microservices, you'll be amazed on how

302
00:19:37,984 --> 00:19:41,578
much information you can get on how your application is actually running

303
00:19:41,664 --> 00:19:43,740
and where optimizations can happen.

304
00:19:44,990 --> 00:19:48,906
Not just internal business logic, but external business logic too,

305
00:19:49,008 --> 00:19:52,974
where all of a sudden you may discover that turns out there's no need

306
00:19:53,012 --> 00:19:56,446
for this external API anymore because it turns out we can actually

307
00:19:56,468 --> 00:19:59,630
do this internally or whatever. It opens up

308
00:19:59,700 --> 00:20:03,338
so many things. Having the

309
00:20:03,364 --> 00:20:05,970
shared knowledge is unbelievably powerful.

310
00:20:07,190 --> 00:20:10,466
A great friend of mine said this to me the other day when

311
00:20:10,488 --> 00:20:15,510
I was walking through this talk with him, and it really does focus

312
00:20:15,580 --> 00:20:19,446
everything down when it comes to your monolithic app

313
00:20:19,468 --> 00:20:23,250
and you're moving to microservices. You had an ordinarily,

314
00:20:23,330 --> 00:20:26,498
I can't say the word, an unprofessional speaker. It's embarrassing.

315
00:20:26,674 --> 00:20:30,630
Bull mastiff. And now you have 13 yipping chihuahuas.

316
00:20:31,450 --> 00:20:35,146
Now take a moment and really, really envision that in

317
00:20:35,168 --> 00:20:38,426
your head and you see that big dog. You still got to feed it,

318
00:20:38,448 --> 00:20:42,254
you still got to walk it. Barks really bad

319
00:20:42,292 --> 00:20:45,646
things happen, right? It can take down the postman if

320
00:20:45,668 --> 00:20:49,466
needs be. Now you got 13 yipping chihuahuas,

321
00:20:49,658 --> 00:20:54,046
all 13 of them working on. It might take them that

322
00:20:54,068 --> 00:20:58,066
postman down and you're going to have to feed 13 dogs now. But at

323
00:20:58,088 --> 00:21:02,066
the same time, it's much easier to deal with one chihuahua and

324
00:21:02,088 --> 00:21:05,806
then have 13 happy or twelve others happy compared to one big

325
00:21:05,848 --> 00:21:09,922
dog that you pay all your attention to. It's a really great observation

326
00:21:10,066 --> 00:21:12,790
of moving into the cloud native ecosystem.

327
00:21:13,770 --> 00:21:17,414
And on the flip side, if something goes wrong, just as Ken stole this

328
00:21:17,452 --> 00:21:21,066
quote, I'm stealing this quote from him. It really hits home.

329
00:21:21,168 --> 00:21:24,602
We replaced our monolith with microservices, so every

330
00:21:24,656 --> 00:21:27,498
outage is like a murder mystery. It's true.

331
00:21:27,664 --> 00:21:31,438
Youre going to have to really learn how to work together

332
00:21:31,524 --> 00:21:34,926
as teams to make these things happen. You have to walk through each

333
00:21:34,948 --> 00:21:38,446
process and what it did when more importantly, you have

334
00:21:38,468 --> 00:21:41,950
to create standardized logging and standardized APIs

335
00:21:42,030 --> 00:21:45,554
between the different outages and the teams so

336
00:21:45,752 --> 00:21:48,500
people can understand what actually happened.

337
00:21:49,750 --> 00:21:53,346
It's very challenging and it's something youve really got to spend time and

338
00:21:53,368 --> 00:21:56,260
effort across your whole to do.

339
00:21:57,210 --> 00:22:00,886
So let's talk about some questions you should ask to make sure that

340
00:22:00,908 --> 00:22:04,114
the culture shift can happen. I mentioned the CCB earlier,

341
00:22:04,162 --> 00:22:07,720
and at ask our labs, the CCB become something almost like

342
00:22:08,250 --> 00:22:11,622
something out of almost the Phoenix project. At the beginning,

343
00:22:11,686 --> 00:22:15,146
no one showed up or even if when they did, they engaged and it

344
00:22:15,168 --> 00:22:18,586
just became a burden. Moving to cloud native, you need to

345
00:22:18,608 --> 00:22:21,678
start allowing for self orchestration and

346
00:22:21,684 --> 00:22:25,630
rollouts and updates. You need to lean towards more of the pipelines

347
00:22:26,370 --> 00:22:30,186
and collaborate to get the different widgets out and the different applications

348
00:22:30,218 --> 00:22:33,578
out at the right time. And I mentioned the pipeline because you're

349
00:22:33,594 --> 00:22:37,634
going to have to build that pipeline with a cultural shift that's going to happen.

350
00:22:37,752 --> 00:22:39,810
You'll need CI and CD pipelines.

351
00:22:41,030 --> 00:22:45,326
You need to leverage the standards and linting so you can always make sure that

352
00:22:45,448 --> 00:22:48,150
your come is to your standards.

353
00:22:49,210 --> 00:22:52,614
One of the reasons why go is so easy to read is that the go

354
00:22:52,652 --> 00:22:56,086
format command exists. Go came along with

355
00:22:56,108 --> 00:22:59,162
a standard outside of the box. So at 03:00 a.m.

356
00:22:59,296 --> 00:23:02,906
Now, when something goes horribly wrong, the cloudnative overhead of

357
00:23:02,928 --> 00:23:06,746
reading code and arguing over where a parentheses is

358
00:23:06,848 --> 00:23:11,050
is no longer there. As an operations person reading code

359
00:23:11,200 --> 00:23:14,574
at three in the morning when my pager duty goes

360
00:23:14,612 --> 00:23:18,510
off, I was never happy to try to figure out

361
00:23:18,660 --> 00:23:22,030
why something was there, and I would spend time trying to understand it

362
00:23:22,100 --> 00:23:26,462
instead of just reading it like a book. So having that inside your pipeline,

363
00:23:26,526 --> 00:23:29,746
having formatting standards that everyone agrees on is the way to

364
00:23:29,768 --> 00:23:33,346
write it. And formatting to be able to linting to

365
00:23:33,368 --> 00:23:36,974
force this really does take away a huge amount

366
00:23:37,032 --> 00:23:40,614
of issues down the line. You also

367
00:23:40,652 --> 00:23:43,638
need to learn to collaborate with the other teams. One of the hardest things I

368
00:23:43,644 --> 00:23:47,522
saw at Asgard Labs was to actually deal with the collaboration

369
00:23:47,586 --> 00:23:51,254
between the teams. They had some great propaganda about scrum

370
00:23:51,302 --> 00:23:54,874
teams and tribes and whatnot, but still, people wanted to do things the old

371
00:23:54,912 --> 00:23:58,394
way. Collaboration isn't just status meetings, it's more

372
00:23:58,432 --> 00:24:02,506
than that. It's declaring shared contracts for jobs and responsibilities

373
00:24:02,618 --> 00:24:06,446
with constant communication between teams. Jira tickets can only

374
00:24:06,468 --> 00:24:10,046
get you so far. One of the most successful things I ever saw

375
00:24:10,228 --> 00:24:13,918
at a subsidiary of Asgard Labs was that every sprint,

376
00:24:14,014 --> 00:24:17,986
they switched out one person from one tribe to another in

377
00:24:18,008 --> 00:24:21,486
the global app. This allowed for new challenges and new blood

378
00:24:21,518 --> 00:24:25,010
for each team. So every two weeks, someone new

379
00:24:25,080 --> 00:24:28,482
joins your team with all the different microservices.

380
00:24:28,626 --> 00:24:32,246
So then all of a sudden, you had to train someone new every two

381
00:24:32,268 --> 00:24:35,862
weeks how to get that feature out. And before you knew it,

382
00:24:35,996 --> 00:24:39,914
the amount of on ramping was negligible. The amount

383
00:24:39,952 --> 00:24:43,846
of actual someone coming together and understanding. Oh, it turns out Billy

384
00:24:43,878 --> 00:24:47,066
Bob and Jane Doe over there were working on

385
00:24:47,088 --> 00:24:50,698
something just like this in another Microsoft version. It created this amazing

386
00:24:50,784 --> 00:24:54,954
culture of that. Granted, it was a massive undertaking

387
00:24:55,002 --> 00:24:57,934
to get that going off the ground, and there had to be some really high

388
00:24:57,972 --> 00:25:01,714
up agreements about it, but the amount of velocity for that

389
00:25:01,752 --> 00:25:04,862
company just skyrocketed. It is unbelievably

390
00:25:04,926 --> 00:25:08,178
powerful when you start really, truly learning how to share,

391
00:25:08,264 --> 00:25:12,062
collaborate and move forward. Started contracts and tickets

392
00:25:12,126 --> 00:25:15,874
and things like that, but when you actually sit down and

393
00:25:15,912 --> 00:25:18,530
work together, it's unbelievably powerful.

394
00:25:19,750 --> 00:25:23,046
Escalator observations. Thought they could just buy one more product and call a day.

395
00:25:23,068 --> 00:25:26,566
When it came to visibility monitoring, Nagius wouldn't cut it

396
00:25:26,588 --> 00:25:30,882
anymore. And they learned it the hard way. Sometimes you have to put multiple

397
00:25:30,946 --> 00:25:34,634
applications in visibility only have portions of

398
00:25:34,672 --> 00:25:38,534
your team's what they care about. Those single pane of glass

399
00:25:38,662 --> 00:25:42,406
is a great thing to give your marketing people so they can see the line

400
00:25:42,448 --> 00:25:45,658
that goes up and to the right. But in all seriousness, when you're

401
00:25:45,674 --> 00:25:49,578
actually doing this day in and day out, you're going to need different tooling

402
00:25:49,674 --> 00:25:53,598
for different situations. You're going to have to sit down and realize that

403
00:25:53,684 --> 00:25:56,020
even though some companies say you can do everything,

404
00:25:57,190 --> 00:25:59,698
you're going to need a lot of different ones out there. And youre going to

405
00:25:59,704 --> 00:26:03,106
need people to have expertise in the different technologies too.

406
00:26:03,288 --> 00:26:06,574
As Adley Asgard Labs wanted a single pane of glass.

407
00:26:06,622 --> 00:26:11,014
It's unrealistic. There are too many moving parts in the cloud native ecosystem that

408
00:26:11,132 --> 00:26:14,854
you just don't have that visibility. So you need to work on all

409
00:26:14,892 --> 00:26:17,846
things. It was a huge cultural shift, but again,

410
00:26:17,948 --> 00:26:20,522
as long as you can get that graph that goes up and to the right,

411
00:26:20,656 --> 00:26:23,674
that'll be some of the best monitoring. And if you want to ping me later,

412
00:26:23,712 --> 00:26:25,660
I can finish that joke off.

413
00:26:26,990 --> 00:26:30,374
So how do the economics of the cloud can differ from your data center?

414
00:26:30,512 --> 00:26:34,046
Opex? Yes, and everything can be paid by

415
00:26:34,068 --> 00:26:37,758
a credit card, which is great. Cfos go back and forth about this, but you

416
00:26:37,764 --> 00:26:41,582
need to recognize cfos will start wondering why

417
00:26:41,636 --> 00:26:45,518
expenses are going up. Some love it because assuming

418
00:26:45,614 --> 00:26:50,094
your team can keep a hold of the costs, you can really predictably

419
00:26:50,222 --> 00:26:53,490
understand what your costs are going to be. On the flip side,

420
00:26:53,560 --> 00:26:56,962
you can't depreciate anything that is in the cloud,

421
00:26:57,016 --> 00:27:00,566
which is a little annoying for some cfos. You're going to have to work with

422
00:27:00,588 --> 00:27:04,306
your CFO and your accounting teams to make sure you sit inside. The budgets

423
00:27:04,418 --> 00:27:08,674
has much as operations and sres and DevOps professionals

424
00:27:08,722 --> 00:27:11,782
and people on the operations side don't ever think about budgeting.

425
00:27:11,926 --> 00:27:15,126
At least most of them don't. Don't lie.

426
00:27:15,318 --> 00:27:18,902
You're going to have to sit down and think about it. So I strongly suggest

427
00:27:19,046 --> 00:27:23,674
build up a bridge to your accounting team and respect

428
00:27:23,722 --> 00:27:27,120
what's going on there, because it'll only make life easier in the long run.

429
00:27:28,050 --> 00:27:31,198
Hey JJ, what do you mean that all our support is

430
00:27:31,204 --> 00:27:34,114
now on stack overflow? Well, yeah,

431
00:27:34,152 --> 00:27:38,046
okay, you're right. In a few places it's true, especially if you're

432
00:27:38,078 --> 00:27:41,810
using open source kubernetes. There's no company behind it,

433
00:27:41,880 --> 00:27:45,254
right? There's not. I mean, there's some companies that put into

434
00:27:45,292 --> 00:27:49,206
the ecosystem, but there's no throat to choke. There's companies that

435
00:27:49,228 --> 00:27:52,770
can support you, but when it comes to actual upstream

436
00:27:52,850 --> 00:27:55,990
kubernetes, sorry, I mean,

437
00:27:56,060 --> 00:27:59,354
don't get me wrong, if you're running it on a cloud with aks or

438
00:27:59,392 --> 00:28:03,462
eks or iks for that matter, if you're running Openshift

439
00:28:03,526 --> 00:28:06,826
and you have red hat there, you have some throats to choke if

440
00:28:06,848 --> 00:28:10,366
something goes wrong. But there are some companies out there that want

441
00:28:10,388 --> 00:28:14,286
to leverage fully open source work and you need to start thinking about it.

442
00:28:14,308 --> 00:28:16,830
When you move to the cloud native ecosystem,

443
00:28:17,570 --> 00:28:21,454
the building containers with Docker and then

444
00:28:21,492 --> 00:28:24,786
shipping those containers out, there are some conversations at

445
00:28:24,808 --> 00:28:27,918
this moment right about it that you need to really think about if it's

446
00:28:27,934 --> 00:28:31,618
worth it for your company or not and work towards that.

447
00:28:31,784 --> 00:28:33,540
So keep in mind.

448
00:28:34,390 --> 00:28:37,618
So let's talk about come tangible things so you

449
00:28:37,624 --> 00:28:41,426
can really start with to move forward. There are a ton of technology and software

450
00:28:41,458 --> 00:28:44,422
to help you keep going. The best thing you can do is take a moment

451
00:28:44,476 --> 00:28:47,766
and figure out when you containerized your app, did you

452
00:28:47,788 --> 00:28:51,306
really containerize it or just wrap it in a pod and wash your hands of

453
00:28:51,328 --> 00:28:54,954
it? Have a large conversation on why you did

454
00:28:54,992 --> 00:28:58,118
this. Was it because you didn't

455
00:28:58,134 --> 00:29:01,626
want to be left behind? Or is there an actual reason for you to

456
00:29:01,648 --> 00:29:05,950
move into the cloud native ecosystem? Or is it because you thought you could leverage

457
00:29:06,450 --> 00:29:09,470
some other software out there to make your customers happy?

458
00:29:09,620 --> 00:29:12,466
There's really a lot of options out there and you really need to have these

459
00:29:12,488 --> 00:29:15,778
conversations. So let's talk about a

460
00:29:15,784 --> 00:29:18,974
quick conclusion here. And ideally with masking

461
00:29:19,022 --> 00:29:22,306
all these corporations, I've has an

462
00:29:22,328 --> 00:29:26,446
exposure to Asgard Labs to help me highlight some of the consistent

463
00:29:26,478 --> 00:29:29,942
issues I've found. The best thing you can do is

464
00:29:29,996 --> 00:29:34,070
first ask, do you really need to? And if youll really are committed,

465
00:29:35,450 --> 00:29:38,566
you really should take a beat and look for optimizations instead of

466
00:29:38,588 --> 00:29:41,754
features. This will drive your teams crazy. It'll drive

467
00:29:41,792 --> 00:29:44,906
your executives even crazier because they're going to have to be like, why are we

468
00:29:44,928 --> 00:29:48,778
stopping and not releasing features? You're like, well, we're rearchitecting things.

469
00:29:48,864 --> 00:29:53,550
It's going to take some time and you got to be reasonable about that and

470
00:29:53,620 --> 00:29:55,200
everything. You pay up front,

471
00:29:56,610 --> 00:30:00,318
you'll be able to get dividends for that later on. And if you use a

472
00:30:00,324 --> 00:30:04,062
correct tool for the job, you'll get there. And as

473
00:30:04,116 --> 00:30:07,922
a great friend of mine also said, you wouldn't use a saw

474
00:30:08,056 --> 00:30:11,666
if you needed a hammer or you wouldn't use a hammer when you

475
00:30:11,688 --> 00:30:14,658
needed a saw, right? They both can do the same job.

476
00:30:14,744 --> 00:30:18,306
I mean, you can use a saw to hammer in a nail,

477
00:30:18,418 --> 00:30:21,906
and you can use a hammer to saw a piece of wood

478
00:30:21,938 --> 00:30:25,858
or break a piece of wood apart, but they're

479
00:30:25,874 --> 00:30:30,070
not designed to do that. So when moving to the cloud native ecosystem,

480
00:30:30,150 --> 00:30:33,530
be sure you're choosing the right tool, the right job,

481
00:30:33,600 --> 00:30:35,930
and you'll miss those stumbling blocks.

482
00:30:37,390 --> 00:30:40,362
Thank you so much for your time. And let me go ahead and go back

483
00:30:40,416 --> 00:30:43,580
to the little other screen here.

484
00:30:44,350 --> 00:30:47,958
Thank you. And again at jjasgar on Twitter

485
00:30:48,054 --> 00:30:51,394
and awesome@ibm.com. I really hope for,

486
00:30:51,472 --> 00:30:55,346
I look forward to hopefully seeing you in real life soon. Things so much.

487
00:30:55,528 --> 00:30:55,950
Bye.

