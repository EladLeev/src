1
00:00:20,330 --> 00:00:23,754
Good evening everyone and thanks for joining my talk on leveraging blockchain

2
00:00:23,802 --> 00:00:27,254
for secure and immutable updates in which we're going to see how you can

3
00:00:27,292 --> 00:00:30,818
use blockchain into your OTF firmware

4
00:00:30,914 --> 00:00:34,230
distribution infrastructure to make it more secure.

5
00:00:35,290 --> 00:00:38,306
So a bit about myself, I'm swapil

6
00:00:38,338 --> 00:00:42,050
Shinde. I was previously Google Summer of code mentee at OWAsp,

7
00:00:42,130 --> 00:00:45,846
Mlitch fellow at near protocol and LFX

8
00:00:45,878 --> 00:00:48,220
mentee at Linux kernel mentorship program.

9
00:00:49,390 --> 00:00:52,698
So before moving towards the problem, let's see some stats.

10
00:00:52,874 --> 00:00:56,522
Currently there are 15 billion IoT devices connected IoT

11
00:00:56,586 --> 00:01:00,126
devices as per 2023 report, and it will

12
00:01:00,148 --> 00:01:03,682
going to rise up to 30 billion IoT devices by

13
00:01:03,736 --> 00:01:07,474
2030. So you can see with

14
00:01:07,512 --> 00:01:11,438
this much huge jump in the count considering

15
00:01:11,454 --> 00:01:14,706
the given time frame, there will be a lot

16
00:01:14,728 --> 00:01:17,986
more rise in security attacks cybersecurity attacks

17
00:01:18,018 --> 00:01:21,270
into these devices. So now moving towards

18
00:01:21,420 --> 00:01:25,334
some security attacks that are performed as

19
00:01:25,372 --> 00:01:28,954
per 2022 reports, you can see 77%

20
00:01:29,072 --> 00:01:32,534
increase in firmware blues attacks, which means the attacker

21
00:01:32,582 --> 00:01:36,534
compromises your update infrastructure and injects

22
00:01:36,582 --> 00:01:40,970
malicious code into your firmware and then the firmware is distributed

23
00:01:41,050 --> 00:01:45,214
into your IoT network. The second one is DDoS attack which

24
00:01:45,252 --> 00:01:48,602
means like the attacker performs

25
00:01:48,746 --> 00:01:52,586
distributed denial of service into your centralized

26
00:01:52,698 --> 00:01:56,180
server and then your server won't be able to

27
00:01:56,790 --> 00:02:00,594
serve the firmware updates to your IoT devices. And the third

28
00:02:00,632 --> 00:02:04,194
one is man in the middle attacks which are also increased day

29
00:02:04,232 --> 00:02:07,380
by day like your

30
00:02:07,850 --> 00:02:11,586
wireless connection between your IoT device and your server

31
00:02:11,618 --> 00:02:15,714
can be compromised because it's wireless and the attacker

32
00:02:15,762 --> 00:02:19,110
can spoof in between them and then can

33
00:02:19,180 --> 00:02:22,506
upload malicious code. I've linked the sources, you can

34
00:02:22,528 --> 00:02:25,882
go check out these reports in more detail

35
00:02:25,936 --> 00:02:29,834
for better understanding. So you can see also see a graph in which

36
00:02:29,872 --> 00:02:33,694
you can see IoT device is

37
00:02:33,812 --> 00:02:38,446
more serving in the consumer sector and you

38
00:02:38,468 --> 00:02:41,550
won't be pushing malicious update

39
00:02:42,470 --> 00:02:45,986
to your users. So you have

40
00:02:46,008 --> 00:02:49,294
to make sure that your update infrastructure

41
00:02:49,342 --> 00:02:53,410
is more secure and cannot be compromised easily.

42
00:02:55,210 --> 00:02:58,950
Now you can see there are two types of update

43
00:02:59,290 --> 00:03:03,334
techniques. The first one is like your

44
00:03:03,372 --> 00:03:06,646
IoT device will be connected to using a wire and

45
00:03:06,668 --> 00:03:09,894
then you upload your firmware using that wired

46
00:03:09,942 --> 00:03:13,594
connection which is much more secure. But it is not

47
00:03:13,632 --> 00:03:17,546
that practical because you won't be

48
00:03:17,728 --> 00:03:21,934
calling off all your devices and then updating them

49
00:03:21,972 --> 00:03:25,486
into your service center or giving the

50
00:03:25,508 --> 00:03:28,110
authority to your users to update,

51
00:03:28,850 --> 00:03:33,310
depending on your users to update your IoT devices.

52
00:03:34,290 --> 00:03:37,874
So this is not that practical. So the other way is doing it

53
00:03:37,912 --> 00:03:40,974
wirelessly which is the over the air updates.

54
00:03:41,102 --> 00:03:45,182
And the thing is that it is not that secure because obviously

55
00:03:45,336 --> 00:03:49,042
you are exposing ports, you are exposing wireless connection.

56
00:03:49,186 --> 00:03:54,680
So anyone can attack using

57
00:03:55,450 --> 00:03:58,426
their methods that they will be using.

58
00:03:58,608 --> 00:04:02,630
So you can see there's a potential risk

59
00:04:02,710 --> 00:04:06,362
that chances that your centralized server might

60
00:04:06,416 --> 00:04:10,166
get compromised, which is the worst you can do

61
00:04:10,208 --> 00:04:13,998
because it will be on your company if that happens.

62
00:04:14,164 --> 00:04:17,918
So we will be seeing how this can be solved using

63
00:04:18,004 --> 00:04:21,674
adding a third entity into your firmware update

64
00:04:21,722 --> 00:04:25,966
infrastructure. So let's

65
00:04:25,998 --> 00:04:29,422
see how your firmware update works. Your OTA

66
00:04:29,486 --> 00:04:33,118
works. First thing is you have your firmware

67
00:04:33,214 --> 00:04:36,478
instruction code written in any language,

68
00:04:36,574 --> 00:04:40,326
but mostly it is c or embedded c. So it

69
00:04:40,348 --> 00:04:43,526
is then compiled and linked to a single binary and

70
00:04:43,548 --> 00:04:47,550
then that binary file is uploaded to your OEM cloud server

71
00:04:47,650 --> 00:04:51,686
and then your IoT pulls your firmware update

72
00:04:51,718 --> 00:04:56,374
from that server and then installs

73
00:04:56,502 --> 00:05:00,566
it into itself. So let's

74
00:05:00,598 --> 00:05:03,646
see this in more detail. So the first

75
00:05:03,668 --> 00:05:07,578
thing is your vendor service, which is your company pushes

76
00:05:07,754 --> 00:05:10,906
the binary file to the server and then the server

77
00:05:10,938 --> 00:05:14,500
replies with the location of

78
00:05:15,750 --> 00:05:20,210
that firmware, a binary file. And then you push

79
00:05:22,470 --> 00:05:25,934
MQTT request call to your IoT

80
00:05:25,982 --> 00:05:29,426
devices that okay, there is a newer update, you can pull this update

81
00:05:29,538 --> 00:05:33,334
and you also send the URL for that

82
00:05:33,372 --> 00:05:36,994
update. Then now your IoT device knows where the binary

83
00:05:37,042 --> 00:05:40,906
files of your firmware update lies. Then it will pull

84
00:05:41,008 --> 00:05:44,694
the binary files and your firmware hash

85
00:05:44,742 --> 00:05:48,086
and then it will check if the like you can see in the next slide,

86
00:05:48,118 --> 00:05:51,934
it can check if the hash is valid and based on

87
00:05:51,972 --> 00:05:56,010
that it will make its decision

88
00:05:56,090 --> 00:05:59,306
to either install the new update

89
00:05:59,338 --> 00:06:01,710
or roll back to the previous updates.

90
00:06:03,330 --> 00:06:07,426
So let's see some of the security vulnerabilities that is used to exploit your

91
00:06:07,528 --> 00:06:11,074
OTA infrastructure. So the first one is man in the manual attack in

92
00:06:11,112 --> 00:06:14,894
which you have your IoT device

93
00:06:14,942 --> 00:06:18,614
and you have your OEM server. Then the attacker might try to

94
00:06:18,652 --> 00:06:22,440
spoof in between them because it's a wireless connection. And then

95
00:06:23,210 --> 00:06:26,646
your IoT device will think that okay, this is the original server and

96
00:06:26,668 --> 00:06:30,458
I should pull update from this server and then it

97
00:06:30,544 --> 00:06:34,854
unintentionally downloads the malicious

98
00:06:34,902 --> 00:06:38,410
update and thus compromising the IoT device.

99
00:06:39,470 --> 00:06:42,670
And the second one is distributed denial of service attack

100
00:06:42,740 --> 00:06:46,606
in which the attacker distributedly floods your

101
00:06:46,708 --> 00:06:50,510
server with multiple requests, thus ensuring

102
00:06:50,850 --> 00:06:54,642
your server to fulfill the request of the update from

103
00:06:54,696 --> 00:06:57,890
IoT devices. Trust delaying your IoT updates

104
00:06:59,430 --> 00:07:04,142
obviously that DDoS can be secured

105
00:07:04,206 --> 00:07:07,960
easily by whitelisting the IP addresses, but still

106
00:07:08,490 --> 00:07:11,890
the third one is which is the worst? It is centralized

107
00:07:11,970 --> 00:07:15,794
server got compromised, so now the attacker

108
00:07:15,842 --> 00:07:20,220
has compromised your centralized server and now it has access to

109
00:07:20,590 --> 00:07:24,694
all the functions that you can do to update

110
00:07:24,742 --> 00:07:28,474
your network or your IoT device. And from there

111
00:07:28,592 --> 00:07:32,174
the attacker can easily create a new update and push it

112
00:07:32,292 --> 00:07:36,318
to or even modify the current update and push it to the

113
00:07:36,484 --> 00:07:38,830
network of your Iot devices.

114
00:07:41,780 --> 00:07:45,308
So here you can see we have our vendor organization

115
00:07:45,404 --> 00:07:48,628
which pushes the update to the server and then IoT device will pull the

116
00:07:48,634 --> 00:07:52,336
updates from that server with the update hash.

117
00:07:52,448 --> 00:07:56,176
But this is centralized, why not replace it with blockchain?

118
00:07:56,288 --> 00:07:59,704
So we have the features, or, sorry, the advantages of the

119
00:07:59,742 --> 00:08:03,128
decentralized storage or computing at the same time.

120
00:08:03,214 --> 00:08:06,584
So for those who don't know about what

121
00:08:06,622 --> 00:08:10,556
blockchain is, let me give you a little touch up so that you are

122
00:08:10,578 --> 00:08:13,128
in the same pace for the next slides.

123
00:08:13,304 --> 00:08:16,456
Blockchain is basically a chain of blocks

124
00:08:16,568 --> 00:08:20,056
in which each block contains

125
00:08:20,088 --> 00:08:23,392
a data and plus the hash of that data.

126
00:08:23,526 --> 00:08:27,904
Then the next block will contain the

127
00:08:27,942 --> 00:08:31,532
data of itself and obviously the hash of the previous block.

128
00:08:31,676 --> 00:08:34,972
And if somebody tries to change the data in first block,

129
00:08:35,036 --> 00:08:39,664
then the hash will also be changed in the second block, thus invalidating

130
00:08:39,712 --> 00:08:43,124
your whole chain, like the chain reaction kind of thing.

131
00:08:43,242 --> 00:08:47,636
And basically this is not blockchain, this is just a ledger.

132
00:08:47,748 --> 00:08:52,168
And to make it blockchain, to add a network layer, to add

133
00:08:52,334 --> 00:08:56,056
a consensus mechanism, all this is handled by a piece

134
00:08:56,078 --> 00:08:59,724
of software called node. And this node is

135
00:08:59,762 --> 00:09:03,576
responsible for adding or mining new blocks

136
00:09:03,688 --> 00:09:06,956
to the ledger, or even deleting the

137
00:09:06,978 --> 00:09:09,320
blocks or even modifying the blocks.

138
00:09:09,480 --> 00:09:12,956
But obviously these last two

139
00:09:12,978 --> 00:09:16,524
features are not generally implemented into the blockchain. But you can easily

140
00:09:16,572 --> 00:09:19,792
do that by creating your own blockchain. Since this is just

141
00:09:19,846 --> 00:09:23,456
one node and it is centralized, you can connect it

142
00:09:23,478 --> 00:09:27,140
with multiple nodes. You can use multiple instances of

143
00:09:27,210 --> 00:09:30,804
same nodes. And all these nodes are connected with

144
00:09:30,842 --> 00:09:34,820
each other via a boot node and they are generally

145
00:09:35,160 --> 00:09:39,028
in sync. And this sync is ensuring and secured

146
00:09:39,204 --> 00:09:42,648
by a consensus mechanism, which can be a

147
00:09:42,654 --> 00:09:46,168
proof of work. It can be proof of stake or any other

148
00:09:46,254 --> 00:09:49,870
mechanism that is available out there.

149
00:09:50,240 --> 00:09:54,008
So let's see, if somebody attacks

150
00:09:54,184 --> 00:09:57,836
this first node and changes the data in

151
00:09:57,858 --> 00:10:01,664
this node, then your chain will be invalid and

152
00:10:01,702 --> 00:10:04,748
the node will try to sync the data from other nodes

153
00:10:04,844 --> 00:10:08,704
and other nodes will give the data back

154
00:10:08,742 --> 00:10:12,480
to this chain, and then

155
00:10:12,630 --> 00:10:16,212
this chain will recover automatically from that

156
00:10:16,266 --> 00:10:19,904
invalid insertion. So this is how it generally

157
00:10:19,952 --> 00:10:20,550
works.

158
00:10:23,720 --> 00:10:27,168
Now let's see, like, you know, what is blockchain, let's see why we are

159
00:10:27,194 --> 00:10:30,424
using it. What are the features it is providing us.

160
00:10:30,542 --> 00:10:33,732
So first one is obviously immutable ledger.

161
00:10:33,796 --> 00:10:37,832
So you have the ledger which is immutable and it is being

162
00:10:37,886 --> 00:10:41,644
insured via the blockchain node. And the second

163
00:10:41,682 --> 00:10:46,060
one is smart contract enforcement. So this

164
00:10:46,210 --> 00:10:50,888
smart contract thing is a feature introduced by

165
00:10:51,074 --> 00:10:54,784
Ethereum. It is basically, you can imagine it as a piece

166
00:10:54,822 --> 00:10:58,764
of code, which is responsible for changing

167
00:10:58,812 --> 00:11:02,352
the state of the ledger. And it

168
00:11:02,406 --> 00:11:06,308
acts as a plugin to your blockchain node or

169
00:11:06,474 --> 00:11:09,844
extension to your blockchain node. So how it is done is like

170
00:11:09,882 --> 00:11:13,332
you write a smart contract like

171
00:11:13,386 --> 00:11:17,028
trust or solidity. In Ethereum, you usually do it by solidity,

172
00:11:17,124 --> 00:11:20,344
and then you compile it to bytecode and

173
00:11:20,382 --> 00:11:23,896
then push that bytecode to your blockchain. So now you

174
00:11:23,918 --> 00:11:25,480
have all your functions.

175
00:11:27,260 --> 00:11:30,476
Your instruction that is written there, it is compiled to a bytecode and then

176
00:11:30,498 --> 00:11:33,464
you push it to the blockchain via transaction.

177
00:11:33,592 --> 00:11:36,776
And then the code is stored inside these blocks.

178
00:11:36,888 --> 00:11:40,744
And you can run that code by simply

179
00:11:40,792 --> 00:11:44,448
calling the transaction id of that block with the

180
00:11:44,534 --> 00:11:47,696
function that you want to run, plus the arguments you want to pass.

181
00:11:47,798 --> 00:11:51,116
And then any one of the minor

182
00:11:51,148 --> 00:11:54,544
nodes will take the transaction and

183
00:11:54,582 --> 00:11:59,556
run the code for you and change the state of the blockchain using

184
00:11:59,658 --> 00:12:03,364
the code that is written in that smart contract. So when

185
00:12:03,482 --> 00:12:06,744
the smart contract is run inside a minor node and it changes the state

186
00:12:06,782 --> 00:12:13,092
of the chain, the minor node will obviously circulate

187
00:12:13,156 --> 00:12:16,952
the newer state to all these other nodes. And this is how

188
00:12:17,086 --> 00:12:21,196
the smart contract is generally run into in

189
00:12:21,218 --> 00:12:24,936
the blockchain. So the feature of this smart

190
00:12:24,968 --> 00:12:28,830
contract is that you don't need external entity to

191
00:12:29,680 --> 00:12:32,864
external entity to run your code or to

192
00:12:32,902 --> 00:12:36,800
decide what should be added to the blockchain.

193
00:12:39,300 --> 00:12:42,944
Now the third thing is decentralized security. Obviously you

194
00:12:42,982 --> 00:12:46,768
have decentralized infrastructure in the blockchain

195
00:12:46,864 --> 00:12:50,084
and thus you get decentralized security which is

196
00:12:50,122 --> 00:12:55,796
like you are protected towards DDoS attack, because if

197
00:12:55,818 --> 00:12:59,508
you have thousands and thousands of nodes then it will require

198
00:12:59,684 --> 00:13:03,204
a lot of infrastructure power to the attacker

199
00:13:03,252 --> 00:13:07,304
to attack your

200
00:13:07,342 --> 00:13:11,276
infrastructure. Blockchain infrastructure. And obviously blockchain is

201
00:13:11,458 --> 00:13:14,844
quite slow in nature when you query it.

202
00:13:14,882 --> 00:13:18,620
So obviously it will going to take time to them to complete

203
00:13:18,690 --> 00:13:19,740
one request.

204
00:13:22,000 --> 00:13:25,664
Now let's see how you can implement this into

205
00:13:25,702 --> 00:13:28,944
your infrastructure. In this we will see how you can create your own

206
00:13:28,982 --> 00:13:32,400
blockchain and customize it according to your needs

207
00:13:32,470 --> 00:13:36,148
and then how you can integrate it with your old

208
00:13:36,234 --> 00:13:39,664
OTA infrastructure. So the first part is choosing

209
00:13:39,712 --> 00:13:43,092
a blockchain. In this you have two options.

210
00:13:43,146 --> 00:13:47,296
Like you can either go with public blockchains or private blockchains,

211
00:13:47,408 --> 00:13:51,076
a public blockchain, like if you upload any transaction

212
00:13:51,108 --> 00:13:54,516
to it, any data to it. Then your data will be stored

213
00:13:54,548 --> 00:13:57,992
in the public ledger so that anyone can see your data,

214
00:13:58,046 --> 00:14:01,416
which is not that much secure and you won't be wanting

215
00:14:01,528 --> 00:14:05,768
that thing to happen. So obviously you can create your own private network.

216
00:14:05,864 --> 00:14:09,544
So this can be done by these three options. You can use Ethereum's

217
00:14:09,592 --> 00:14:13,644
geth, which is go Ethereum implementation of Ethereum

218
00:14:13,772 --> 00:14:18,316
node in Golang. You can use that to create your own private

219
00:14:18,348 --> 00:14:22,096
blockchain by changing the Genesis block and the

220
00:14:22,118 --> 00:14:25,520
network ports and running your own internal infrastructure.

221
00:14:25,880 --> 00:14:29,776
Then you can use Hyperledger or polka dot substrate.

222
00:14:29,888 --> 00:14:33,476
So these two are more like frameworks. You can use them to

223
00:14:33,498 --> 00:14:37,556
create your own blockchain. You can write your own consensus mechanism.

224
00:14:37,748 --> 00:14:41,668
You can use the proof of work, consensus mechanism or proof of stake.

225
00:14:41,764 --> 00:14:45,496
So if you go with proof of work, you have to

226
00:14:45,678 --> 00:14:49,130
give much more compute power

227
00:14:49,900 --> 00:14:53,624
and thus you have to pay for your resource

228
00:14:53,672 --> 00:14:57,400
intensive use, which is not what you will be wanting.

229
00:14:57,480 --> 00:15:00,684
It is much more secure. But obviously based on your use

230
00:15:00,722 --> 00:15:03,836
case and your needs, you have to choose your consensus mechanism.

231
00:15:03,948 --> 00:15:08,000
So you can either develop your own or you can use any lightweight

232
00:15:08,420 --> 00:15:12,130
consensus mechanism that compromises over security.

233
00:15:14,760 --> 00:15:17,988
The hyperledger is developed and maintained by the

234
00:15:17,994 --> 00:15:21,952
Linux foundation using the Hyperledger foundation,

235
00:15:22,096 --> 00:15:25,892
and the substrate framework is

236
00:15:25,946 --> 00:15:29,720
developed by Polkadot. So you can go with either of them.

237
00:15:29,870 --> 00:15:33,624
It is totally fine Hyperledger fabric in

238
00:15:33,742 --> 00:15:37,864
that the most common language is Java, and in

239
00:15:37,902 --> 00:15:41,764
Polkadot substrate you have rust. So based on your preference,

240
00:15:41,812 --> 00:15:45,484
you can go with any of them. Okay, so here

241
00:15:45,522 --> 00:15:48,792
I've prepared a block diagram in which we are using Hyperledger fabric

242
00:15:48,856 --> 00:15:52,496
as our main blockchain. And then we have our vendor service and

243
00:15:52,518 --> 00:15:56,176
our IoT device. And all these three things are

244
00:15:56,278 --> 00:15:59,600
running in localhost. That's why you can see the ports,

245
00:16:00,180 --> 00:16:03,984
your IP being mentioned as localhost. So here

246
00:16:04,182 --> 00:16:07,876
the first thing we do is the push call to

247
00:16:07,898 --> 00:16:11,124
the blockchain. And before that we'll be

248
00:16:11,162 --> 00:16:14,964
assuming that we have deployed our smart contract or chain code

249
00:16:15,162 --> 00:16:18,948
in case of Hyperledger fabric. And your smart

250
00:16:18,964 --> 00:16:22,104
contract is deployed to the blockchain with three functions, which is

251
00:16:22,222 --> 00:16:24,330
your push function,

252
00:16:25,980 --> 00:16:28,884
then your verify function, and then your query function.

253
00:16:29,022 --> 00:16:33,720
So the push function can take data like your update

254
00:16:33,880 --> 00:16:37,736
name, your version name, version name for that update,

255
00:16:37,848 --> 00:16:41,196
and your firmware binary hash for

256
00:16:41,218 --> 00:16:44,304
that update. So using push call, you call

257
00:16:44,342 --> 00:16:48,236
that smart contract, the particular function which is push, and then you supply

258
00:16:48,268 --> 00:16:52,652
all these three arguments. Now your hash is stored

259
00:16:52,796 --> 00:16:56,564
into the blockchain. So simultaneously what you do is

260
00:16:56,602 --> 00:17:00,416
you push your binary file

261
00:17:00,608 --> 00:17:03,456
from the centralized server to your IoT device,

262
00:17:03,568 --> 00:17:08,436
and your IoT device will take that binary

263
00:17:08,548 --> 00:17:12,196
file and then calculates it hash. And also assuming

264
00:17:12,228 --> 00:17:16,024
that for this you have to modify the

265
00:17:16,222 --> 00:17:20,648
OTA library for this IoT device

266
00:17:20,744 --> 00:17:23,848
such that it supports calling the blockchain network

267
00:17:23,944 --> 00:17:27,608
or calling RPC or HTTPs endpoints.

268
00:17:27,784 --> 00:17:31,256
So from here, when the it device calculates the

269
00:17:31,298 --> 00:17:35,600
hash of that firmware, it queries the blockchain

270
00:17:36,100 --> 00:17:42,176
using a verify call, and that verify call takes

271
00:17:42,358 --> 00:17:47,136
the parameter which is the hash

272
00:17:47,168 --> 00:17:51,136
of that binary file with the version name that you are uploading.

273
00:17:51,248 --> 00:17:54,852
So now the smart contract will see if

274
00:17:54,906 --> 00:17:58,320
the hash is correct for that particular version and

275
00:17:58,410 --> 00:18:01,976
return if the hash is valid or not. So if it is

276
00:18:01,998 --> 00:18:06,212
invalid, then obviously rest of the things are same. The execution

277
00:18:06,356 --> 00:18:10,296
inside the IoT is same, it will reject the

278
00:18:10,398 --> 00:18:13,900
update and it will revert back to its original, sorry,

279
00:18:13,970 --> 00:18:17,788
the old firmware update. So this is how it works.

280
00:18:17,874 --> 00:18:21,788
You also have a blockchain explorer in which you can see all the blocks

281
00:18:21,804 --> 00:18:25,904
in real time. You can see all the transaction being happening in real time.

282
00:18:26,102 --> 00:18:31,472
So this is the overall infrastructure here

283
00:18:31,526 --> 00:18:34,860
is like the calls that we have

284
00:18:34,870 --> 00:18:38,164
written into the smart contract, so you can see in

285
00:18:38,202 --> 00:18:42,164
more detail and what these calls will be taking

286
00:18:42,202 --> 00:18:45,632
as parameters. So you can see your firmware hash

287
00:18:45,696 --> 00:18:48,916
in verifying the transaction id, then your transaction

288
00:18:48,948 --> 00:18:50,490
attributes and all these things.

289
00:18:52,860 --> 00:18:56,840
So now let's see how strong

290
00:18:56,910 --> 00:19:00,860
it is when somebody tries to attack into

291
00:19:00,930 --> 00:19:04,396
the infrastructure. So I guess the image is not

292
00:19:04,418 --> 00:19:05,580
loading correctly.

293
00:19:07,200 --> 00:19:11,890
Okay, so this image is taken from this

294
00:19:13,780 --> 00:19:17,104
research paper, and it is a very great research paper.

295
00:19:17,142 --> 00:19:20,640
You can read this and it mentions how you can transfer

296
00:19:20,710 --> 00:19:23,956
your infrastructure and add this blockchain to your

297
00:19:23,978 --> 00:19:29,044
OTA. So in the end they have mentioned what

298
00:19:29,082 --> 00:19:33,348
they have performed to check the security

299
00:19:33,434 --> 00:19:37,236
of this infrastructure. So they performed

300
00:19:37,268 --> 00:19:40,964
denial of service and man in the middle attack in the infrastructure.

301
00:19:41,012 --> 00:19:44,776
And they

302
00:19:44,798 --> 00:19:48,570
were unable to perform these two attacks into the system

303
00:19:49,040 --> 00:19:53,564
because if you perform man in the middle attack, then you

304
00:19:53,602 --> 00:19:55,960
upload your invalid,

305
00:19:56,120 --> 00:19:59,768
sorry, the malicious code into that IoT device.

306
00:19:59,864 --> 00:20:03,468
But that IoT device had already written instruction

307
00:20:03,484 --> 00:20:07,532
into the library that you have to query that blockchain

308
00:20:07,596 --> 00:20:11,328
to verify if this hash is

309
00:20:11,414 --> 00:20:15,056
correct for this current update or not,

310
00:20:15,238 --> 00:20:18,630
and obviously deny log service. If somebody

311
00:20:19,640 --> 00:20:24,196
do a DDoS attack, then you

312
00:20:24,218 --> 00:20:27,304
have a time constraint between your updates. Then the update will

313
00:20:27,342 --> 00:20:30,360
obviously fail and will revert back to the old updates.

314
00:20:31,980 --> 00:20:35,224
So they have also

315
00:20:35,262 --> 00:20:39,224
mentioned the performance and scalability vectors and how

316
00:20:39,342 --> 00:20:42,444
this infrastructure performed. So you can read

317
00:20:42,482 --> 00:20:46,760
this. Also you can see this is the Go ethereum implementation.

318
00:20:46,920 --> 00:20:50,892
This is the GitHub URL for it. This is for Hyperledger fabric and

319
00:20:50,946 --> 00:20:53,840
this is for the polka dot substrate.

320
00:20:54,820 --> 00:21:00,348
Now this is the overall explanation

321
00:21:00,444 --> 00:21:03,248
that I have to give.

322
00:21:03,334 --> 00:21:07,076
So yeah, you can also see the sources. You can check out this

323
00:21:07,098 --> 00:21:11,030
PPT and go to these individual sources and

324
00:21:11,800 --> 00:21:15,316
read it in more detail. Okay, so now I'll demonstrate the

325
00:21:15,338 --> 00:21:18,904
project my team is working on for a hackathon for the similar use case of

326
00:21:18,942 --> 00:21:21,892
securing OTA updates using blockchain.

327
00:21:22,036 --> 00:21:26,484
And in this project structure we have code for both vendor

328
00:21:26,532 --> 00:21:30,492
service as well as our chain. And you can see in this build

329
00:21:30,546 --> 00:21:33,736
this update CLI which is the CMD update

330
00:21:33,768 --> 00:21:37,244
CLI. This is our vendor service and this one is

331
00:21:37,282 --> 00:21:41,084
our chain. And our chain is already running because it

332
00:21:41,122 --> 00:21:44,284
takes time to initialize the chain and run it.

333
00:21:44,402 --> 00:21:47,564
And the CMD

334
00:21:47,612 --> 00:21:51,132
update CLI, it is a CLI but it also consists HTTP endpoints

335
00:21:51,196 --> 00:21:54,752
which you can query and do your transactions.

336
00:21:54,896 --> 00:21:59,188
And here you can see this

337
00:21:59,354 --> 00:22:03,424
chain is built using hypersdk which is developed by avalabs.

338
00:22:03,472 --> 00:22:07,370
And you can use Hyperledger as well or other

339
00:22:08,620 --> 00:22:12,056
frameworks also like polka dot substrate. But for this

340
00:22:12,078 --> 00:22:15,636
use case for the hackathon we are building it on hyper

341
00:22:15,828 --> 00:22:19,336
SDK. And here we

342
00:22:19,358 --> 00:22:22,964
can run our build update

343
00:22:23,012 --> 00:22:26,972
CLI chain. Watch just to see

344
00:22:27,026 --> 00:22:30,140
the transaction happening inside the chain.

345
00:22:30,960 --> 00:22:34,480
So okay, it is running and we will also start our server

346
00:22:37,220 --> 00:22:38,240
CLR.

347
00:22:42,740 --> 00:22:46,736
Okay, so now I'll go to my endpoints,

348
00:22:46,768 --> 00:22:53,556
HTTP endpoints and from here we

349
00:22:53,578 --> 00:22:56,544
can query our vendor service.

350
00:22:56,682 --> 00:23:00,104
And also since if you want to do

351
00:23:00,142 --> 00:23:03,416
transaction in the blockchain you should

352
00:23:03,438 --> 00:23:07,752
have a wallet but you cannot implement wallet inside

353
00:23:07,806 --> 00:23:11,708
your IoT device, but you can do it by

354
00:23:11,794 --> 00:23:15,736
creating a separate service which will handle the wallet thing and you can expose

355
00:23:15,768 --> 00:23:19,884
HTTP or RPC endpoints that your IoT device can

356
00:23:20,002 --> 00:23:24,124
call and do the transaction. For ethereum cases

357
00:23:24,172 --> 00:23:27,936
you can do similar with infura which is also the

358
00:23:27,958 --> 00:23:31,760
similar kind of service. And we have built this service inside the

359
00:23:31,910 --> 00:23:36,036
update CLI only. So if

360
00:23:36,058 --> 00:23:39,968
I go here you can see this hyper OTA. This library

361
00:23:40,064 --> 00:23:43,636
we built using elegant OTA which is this

362
00:23:43,658 --> 00:23:46,936
hyper OTA is basically fork of elegant OTA and we

363
00:23:46,958 --> 00:23:51,144
have changed some code to call our chain and

364
00:23:51,182 --> 00:23:54,628
then get the validation of that hash,

365
00:23:54,804 --> 00:23:59,260
binary hash and we will upload this into

366
00:23:59,330 --> 00:24:02,844
our ESP 32 which is here.

367
00:24:02,962 --> 00:24:07,496
Currently it is connected wired connection,

368
00:24:07,608 --> 00:24:11,036
but this wifi is connected to my

369
00:24:11,218 --> 00:24:14,868
home router because we connected this wiredly

370
00:24:14,904 --> 00:24:18,044
because we wanted to see the serial

371
00:24:18,092 --> 00:24:21,810
outputs of whether the update is happening or not.

372
00:24:22,500 --> 00:24:26,390
Okay, now I'll upload the initial code

373
00:24:26,840 --> 00:24:29,110
to my ESP 32.

374
00:24:33,400 --> 00:24:36,260
Okay, so it will take a little bit time.

375
00:24:36,410 --> 00:24:39,736
So till then I'll explain you some

376
00:24:39,758 --> 00:24:43,160
of the parts like how my system works. So here

377
00:24:43,230 --> 00:24:46,984
we'll call the chain with the binary file and then

378
00:24:47,022 --> 00:24:50,956
binary file will be uploaded to your ipfs, to our

379
00:24:50,978 --> 00:24:54,670
IPFS server. So IPFS basically is

380
00:24:55,120 --> 00:24:58,396
the decentralized storage and

381
00:24:58,498 --> 00:25:02,396
you can even in the presentation I explained you that your binary file will

382
00:25:02,418 --> 00:25:05,880
be uploaded to your centralized server. But to add more

383
00:25:05,970 --> 00:25:09,644
extra security layer you can move it to the decentralized storage

384
00:25:09,692 --> 00:25:12,796
so it becomes hard to gain access to that file.

385
00:25:12,828 --> 00:25:16,316
Once you upload that file you cannot change it and then your ipfs

386
00:25:16,348 --> 00:25:19,536
URL of that file will be uploaded to the chain with

387
00:25:19,638 --> 00:25:23,296
the hash of that file. Okay, so our

388
00:25:23,398 --> 00:25:26,370
code is uploaded, I'll just monitor it,

389
00:25:29,960 --> 00:25:35,860
it's reconnected.

390
00:25:58,160 --> 00:26:02,568
Okay, so our ESP 32 is successfully connected to my wifi router

391
00:26:02,664 --> 00:26:06,012
and since it is connected now we can begin

392
00:26:06,066 --> 00:26:09,516
our firmware update. So the first thing is creating a

393
00:26:09,538 --> 00:26:13,024
project inside the chain. So we'll just

394
00:26:13,062 --> 00:26:16,800
call it hyper updates and we'll upload it.

395
00:26:16,950 --> 00:26:20,604
Wait a second. Okay, the response is our transaction

396
00:26:20,652 --> 00:26:25,124
id of this data. So we can just call

397
00:26:25,162 --> 00:26:28,292
the chain using this transaction id and we'll get this data back.

398
00:26:28,426 --> 00:26:32,150
Now we'll create an updates to this transaction id

399
00:26:32,520 --> 00:26:36,104
so that this transaction id is basically

400
00:26:36,222 --> 00:26:40,024
pointing towards our project and our

401
00:26:40,062 --> 00:26:43,450
single project will have multiple updates for that. So that's why

402
00:26:43,900 --> 00:26:46,536
we are pointing it using transaction id,

403
00:26:46,638 --> 00:26:50,216
our device name and our version name with the binary

404
00:26:50,248 --> 00:26:53,612
file. So what we'll do is we'll just change

405
00:26:53,666 --> 00:26:54,670
something here,

406
00:26:59,280 --> 00:27:02,592
okay, we'll change this dot to plus,

407
00:27:02,646 --> 00:27:06,464
which means these consecutive dots will be now

408
00:27:06,502 --> 00:27:09,664
displayed as plus. We will compile it again

409
00:27:09,862 --> 00:27:14,252
and then what I'll do is I'll delete this firmware

410
00:27:14,316 --> 00:27:17,524
file and I'll copy it

411
00:27:17,562 --> 00:27:20,944
from the build. So the build is successful. We'll copy

412
00:27:20,992 --> 00:27:23,990
it and then we'll paste it here,

413
00:27:28,520 --> 00:27:29,670
move it here,

414
00:27:33,320 --> 00:27:37,624
name it to firmware bin. We did this because the

415
00:27:37,662 --> 00:27:40,924
PIO is like hidden directory so we

416
00:27:40,962 --> 00:27:43,784
can't actually see that from our postman.

417
00:27:43,912 --> 00:27:47,256
So now we'll go to documents platform I protection.

418
00:27:47,448 --> 00:27:51,264
Here you can see our binary file. So now we'll just

419
00:27:51,302 --> 00:27:55,760
create an update. And now this will be uploaded to the blockchain.

420
00:27:56,340 --> 00:28:00,400
First the binary file will be uploaded to decentralized storage

421
00:28:00,820 --> 00:28:04,036
which is ipfs. And then the

422
00:28:04,058 --> 00:28:08,132
URL of that binary file will be mapped into our

423
00:28:08,266 --> 00:28:11,556
chain data. And now to

424
00:28:11,658 --> 00:28:15,124
see what is stored inside the chain. We can even see

425
00:28:15,162 --> 00:28:19,080
it from here. You can see this transaction

426
00:28:19,500 --> 00:28:23,624
being happening in our chain and also

427
00:28:23,662 --> 00:28:27,210
we can see it from here by just calling

428
00:28:27,660 --> 00:28:31,496
this endpoint. So you can see this is the ipfs

429
00:28:31,528 --> 00:28:34,924
hash of our binary file. So we can

430
00:28:35,122 --> 00:28:38,844
just go to this hash and download, but we'll not do that here.

431
00:28:39,042 --> 00:28:43,040
And also this is the URL for this repository.

432
00:28:43,460 --> 00:28:47,552
We have our library for ESP 32. We have

433
00:28:47,606 --> 00:28:49,890
our chain code here.

434
00:28:52,500 --> 00:28:55,964
Okay, so now we'll call this endpoint

435
00:28:56,012 --> 00:28:59,460
which is the most important. Here we will add the transaction id of the

436
00:28:59,530 --> 00:29:03,104
update and then IP address of our device.

437
00:29:03,232 --> 00:29:06,576
Currently it is connected to our local host, which is this one.

438
00:29:06,618 --> 00:29:09,944
So we'll just make it like this only

439
00:29:10,062 --> 00:29:13,930
and then we'll just send it. Now if we see here,

440
00:29:15,020 --> 00:29:17,050
you can see the update is happening.

441
00:29:22,140 --> 00:29:26,276
And this was the URL called by our ESP

442
00:29:26,308 --> 00:29:29,450
32 to the vendor service,

443
00:29:29,980 --> 00:29:33,556
sorry, the chain to

444
00:29:33,598 --> 00:29:37,436
get the valid transaction, sorry, the valid hash of

445
00:29:37,458 --> 00:29:40,952
this firmware update. So we pass that hash that we calculated

446
00:29:41,016 --> 00:29:44,828
inside our, inside our ESP 32 and then we

447
00:29:44,994 --> 00:29:49,260
send it to the chain and the response was valid

448
00:29:49,340 --> 00:29:52,624
and it successfully updated. And remember that I

449
00:29:52,662 --> 00:29:57,148
changed this dot to plus and now you can see it is serial

450
00:29:57,244 --> 00:30:02,148
outputting the plus symbol, which means the update is successful and

451
00:30:02,234 --> 00:30:05,844
to demonstrate some attacks. I cannot do that because this is

452
00:30:05,882 --> 00:30:09,076
still in development. But yeah, I cannot attack like

453
00:30:09,098 --> 00:30:12,548
the ipfs easily because my binary file is stored in ipfs.

454
00:30:12,644 --> 00:30:17,690
So I cannot change that. I cannot change any data inside

455
00:30:18,060 --> 00:30:21,080
the blockchain. So it is mostly secured.

456
00:30:23,260 --> 00:30:26,824
And you can obviously read this research paper to

457
00:30:26,862 --> 00:30:30,810
see the attacks that they performed and how

458
00:30:31,500 --> 00:30:35,216
they secured it. So thank you everyone for joining my talk.

459
00:30:35,358 --> 00:30:38,496
And if you still have any questions left, then you can just directly reach out

460
00:30:38,518 --> 00:30:41,884
to me by scanning this QR code you will get all my social handles.

461
00:30:42,012 --> 00:30:46,204
Or you can just directly type your question into the Conf 42 discord server

462
00:30:46,332 --> 00:30:48,590
and hope you enjoy rest of the conference. Thank you.

