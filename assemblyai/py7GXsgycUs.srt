1
00:00:25,810 --> 00:00:29,506
Hello everyone, and welcome to my talk. The enters and exits of Python's

2
00:00:29,538 --> 00:00:33,186
context managers. My name is Mason Egger and I serve the developer

3
00:00:33,218 --> 00:00:36,758
community at Digitalocean. I'm currently a developer advocate there

4
00:00:36,844 --> 00:00:40,566
focusing on DevOps cloud infrastructure and Python. You can

5
00:00:40,588 --> 00:00:43,782
follow me on Twitter at Mason Egger, and if you have any questions about this

6
00:00:43,836 --> 00:00:47,746
talk or anything else, feel free to tweet at me or email me at Mason

7
00:00:47,778 --> 00:00:50,926
at dot co. So let's go ahead and get started.

8
00:00:51,028 --> 00:00:54,910
So who's been writing some Python code and has seen something like this where

9
00:00:54,980 --> 00:00:58,270
they need to open a file and you use the with

10
00:00:58,340 --> 00:01:01,838
open file statement, give it a variable or give it a value

11
00:01:01,924 --> 00:01:05,294
file permission to open and then assign it to a variable and then create

12
00:01:05,332 --> 00:01:09,194
a new variable, maybe called text or input, and say

13
00:01:09,332 --> 00:01:12,834
assign that to the value of the read. So essentially what this code is doing

14
00:01:12,872 --> 00:01:16,434
here is we're reading text out of a file into a variable. This is probably

15
00:01:16,472 --> 00:01:20,194
something that most people here today have seen, and this is actually a really

16
00:01:20,232 --> 00:01:23,298
cool tool in Python that a lot of people don't really talk about. And it's

17
00:01:23,314 --> 00:01:27,334
called the context manager. It's also lovingly called the width block. It's what I've called

18
00:01:27,372 --> 00:01:30,726
it forever until I figured out what they were called. But yes, if you ever

19
00:01:30,748 --> 00:01:34,294
hear someone talk about the width block, they're talking about context managers.

20
00:01:34,422 --> 00:01:38,486
Context managers essentially are a tool built into Python that guarantee

21
00:01:38,598 --> 00:01:42,474
that some operation is performed after a block of code, even in the case of

22
00:01:42,512 --> 00:01:45,886
exception, return or exit and things was basically designed as

23
00:01:45,908 --> 00:01:49,402
kind of a way to give you that try, finally pattern

24
00:01:49,466 --> 00:01:53,034
that we're used to seeing in other programming languages, maybe say Java,

25
00:01:53,082 --> 00:01:56,754
for example. So it was designed to give us this feeling and give us a

26
00:01:56,792 --> 00:02:01,138
simpler way of implementing the try finally, without all of that excess try

27
00:02:01,224 --> 00:02:04,914
indent over, except all of that. So that's what it was used

28
00:02:04,952 --> 00:02:08,194
for. And it essentially allows us to have reusability.

29
00:02:08,322 --> 00:02:12,050
It results in cleaner code and it's considered more pythonic.

30
00:02:12,130 --> 00:02:15,350
So context managers and creating context managers is

31
00:02:15,420 --> 00:02:18,866
very much encouraged by the Python creators, by the Python

32
00:02:18,898 --> 00:02:22,182
community, and it does result in some very well

33
00:02:22,236 --> 00:02:25,482
clean written code, and it just makes it really fun to work with.

34
00:02:25,536 --> 00:02:28,698
So let's talk about context managers. What do we use them for? What is the

35
00:02:28,704 --> 00:02:32,042
purpose of a context manager? Context managers essentially allow

36
00:02:32,096 --> 00:02:35,674
us to spin up and tear down resources in a safe

37
00:02:35,722 --> 00:02:39,834
way. So we know that whenever we open that file with the width

38
00:02:39,882 --> 00:02:42,046
open, we know that it's going to be closed at the end of it.

39
00:02:42,068 --> 00:02:45,710
Once it leaves that scope of that function

40
00:02:45,780 --> 00:02:48,594
of that variable, and that's actually where a lot of the value comes in,

41
00:02:48,632 --> 00:02:51,330
is that we know that we can spin them up and tear them down without

42
00:02:51,400 --> 00:02:54,846
any exceptions stopping our code. So they're very useful for file

43
00:02:54,878 --> 00:02:58,018
management. They're also really useful for socket connections whenever you

44
00:02:58,024 --> 00:03:01,266
need to connect to an outbound socket. I believe the Python networking

45
00:03:01,298 --> 00:03:05,106
libraries use context managers all over the place. They're also good for things like database

46
00:03:05,138 --> 00:03:08,854
connections where you need to be able to establish and disconnect from

47
00:03:08,892 --> 00:03:11,958
the connection, but they're also used in other things like game environments.

48
00:03:12,054 --> 00:03:15,194
If you've ever seen the Python gaming library engine,

49
00:03:15,312 --> 00:03:18,886
PPB, it's basically essentially one giant context

50
00:03:18,918 --> 00:03:22,474
manager. It's a really cool project, but basically whenever you

51
00:03:22,512 --> 00:03:26,222
start up a game, you're like, hey, I want there to be a grid or

52
00:03:26,276 --> 00:03:29,502
a display. Let's go ahead and open that up. And whenever we're done,

53
00:03:29,556 --> 00:03:32,846
whenever we exit that code base, let's exits out, let's tear it all

54
00:03:32,868 --> 00:03:36,714
down. And that's essentially why it uses a context manager. They're also really good

55
00:03:36,772 --> 00:03:39,454
for managing global state. They're good for locking,

56
00:03:39,582 --> 00:03:43,026
mocking and testing. They're very big in mocking and testing. So that way you can

57
00:03:43,048 --> 00:03:46,626
change something really quickly and then change it back, logging and so

58
00:03:46,648 --> 00:03:50,402
much more. There's an infinite amount of things that you could use context

59
00:03:50,466 --> 00:03:54,166
managers for. It's really only just limited to your imagination. So let's talk

60
00:03:54,188 --> 00:03:57,554
about how you actually build a context manager. Now, there's multiple

61
00:03:57,602 --> 00:04:00,578
implementations. We're going to talk about a few of them today. The first one we're

62
00:04:00,594 --> 00:04:04,186
going to talk about is the context manager class implementation. This is where

63
00:04:04,208 --> 00:04:08,074
you implement your context manager as a specific class, and then you would import it

64
00:04:08,112 --> 00:04:11,402
into your code to be used. Basically you implement this

65
00:04:11,456 --> 00:04:14,814
by using what are known as the magic methods, which are methods that are by

66
00:04:14,852 --> 00:04:18,430
default in a class and you can override them to use them. And basically

67
00:04:18,500 --> 00:04:21,694
we're going to use the enter and exit magic methods here to

68
00:04:21,732 --> 00:04:25,586
create a context manager. So if I was to create a context manager, I would

69
00:04:25,608 --> 00:04:29,486
say something like class my context manager, def Dunder

70
00:04:29,518 --> 00:04:32,866
enter self return here. Whenever we go into our

71
00:04:32,888 --> 00:04:36,014
context manager, let's just say, hey, I'm here, I have entered,

72
00:04:36,062 --> 00:04:38,914
and for now let's just pass on the exit. We implement pass,

73
00:04:38,952 --> 00:04:42,214
and it's got a couple more variables. We'll come back to that, but let's just

74
00:04:42,252 --> 00:04:46,130
pass on it for this section. So if we were to import this context manager,

75
00:04:46,210 --> 00:04:49,794
we would basically say with context managers as CM, after we've imported

76
00:04:49,842 --> 00:04:53,178
let's print hello and then print CM. And what we would get here

77
00:04:53,264 --> 00:04:56,422
is we would get the word hello because we are within the context managers.

78
00:04:56,486 --> 00:04:59,802
But we would also get here because this is the thing that

79
00:04:59,856 --> 00:05:03,514
is returned back up. So when we said in our context managers

80
00:05:03,562 --> 00:05:07,162
return here, the value of here was actually stored in the context

81
00:05:07,226 --> 00:05:11,402
manager variable CM. So whenever we actually printed CM,

82
00:05:11,466 --> 00:05:15,178
it was just a string. You could store anything you wanted here to maintain

83
00:05:15,274 --> 00:05:19,342
a kind of record of your context managers. I do believe like the open method

84
00:05:19,406 --> 00:05:23,054
puts the file handle there. So even though once you've exited the context

85
00:05:23,102 --> 00:05:26,194
manager, you will still have access to the file handle if you so choose.

86
00:05:26,312 --> 00:05:30,146
So the enter method is pretty interesting. It's executed

87
00:05:30,258 --> 00:05:33,974
at the very beginning before the width block is even entered. So before it even

88
00:05:34,012 --> 00:05:37,362
gets into the code of say, where we did our print statement,

89
00:05:37,426 --> 00:05:41,434
the enter method is executed. It's a magic method that only takes one

90
00:05:41,472 --> 00:05:44,662
argument, which is self, and it's used to establish connection,

91
00:05:44,726 --> 00:05:48,266
modify system, setup, et cetera. It is however a

92
00:05:48,288 --> 00:05:51,338
really good idea whenever you're using context managers and when

93
00:05:51,344 --> 00:05:54,746
you're creating your own context managers for sure to keep an original copy

94
00:05:54,778 --> 00:05:58,222
of anything system related that you modify so that you can change it back.

95
00:05:58,276 --> 00:06:02,462
So you could here modify and mock the standard out

96
00:06:02,516 --> 00:06:05,966
system. Now if you were to do that and not save it, then however you

97
00:06:05,988 --> 00:06:09,278
did your modification, it would be kind of stuck that way and you'd have no

98
00:06:09,284 --> 00:06:11,966
way of changing it back. So you want to make sure that if you are

99
00:06:11,988 --> 00:06:15,206
going to be modifying any critical things that you want to be able to put

100
00:06:15,228 --> 00:06:18,514
them back when you're done with them, it must return a value that is stored

101
00:06:18,562 --> 00:06:21,846
in the variable specified as as. So the magic method enter

102
00:06:21,948 --> 00:06:25,382
must return something. And whatever variable is specified in as,

103
00:06:25,436 --> 00:06:28,326
which, as we saw in our previous code was the variable CM, it will be

104
00:06:28,348 --> 00:06:31,590
stored there. So an example of this, let's create a class

105
00:06:31,660 --> 00:06:34,506
called, we're going to call it yelling text. But basically what we're going to do

106
00:06:34,528 --> 00:06:38,090
here is we're going to take over standard out and everything

107
00:06:38,160 --> 00:06:41,990
that we do is going to come out in all caps. So we implement

108
00:06:42,070 --> 00:06:45,950
our class, class yelling text and we implement def dunder enter self.

109
00:06:46,020 --> 00:06:49,214
So we're going to import sys so we can modify the standard out.

110
00:06:49,252 --> 00:06:52,398
We're going to say self standard out equals sys, standard out

111
00:06:52,484 --> 00:06:55,966
write. So we're going to just basically have that there. So that

112
00:06:55,988 --> 00:06:59,602
way we have it saved for us and then we're going to say SYs standard

113
00:06:59,656 --> 00:07:02,926
out write equals self yell and then return yelling.

114
00:07:02,958 --> 00:07:06,350
That's the variable that we're going to return back up to the context manager.

115
00:07:06,430 --> 00:07:09,634
We then say def yell is SYs standard out

116
00:07:09,672 --> 00:07:13,286
text upper. So basically we're just going to say we're going to set everything to

117
00:07:13,308 --> 00:07:17,030
uppercase. And whenever someone calls SYs standard out write,

118
00:07:17,100 --> 00:07:20,674
it's going to actually call the yell method instead, which is going to just uppercase

119
00:07:20,722 --> 00:07:23,846
all the text. And then again, we're not going to do anything with the exit

120
00:07:23,878 --> 00:07:26,922
method yet. We're going to get to that in a couple of slides. For example,

121
00:07:26,976 --> 00:07:30,374
if we import this in and then we say with yelling text, we said print

122
00:07:30,422 --> 00:07:33,046
hello, and hello should show up in all caps.

123
00:07:33,158 --> 00:07:36,910
But as a context managers, we expect for it not to continue

124
00:07:36,980 --> 00:07:40,318
yelling after the fact. So what we would like for it to do is

125
00:07:40,324 --> 00:07:43,978
that the I should not be yelling should not be in all caps.

126
00:07:44,154 --> 00:07:47,246
Our output, however, is hello in all caps. But as

127
00:07:47,268 --> 00:07:50,542
you can see, the I should not be yelling is still in all caps.

128
00:07:50,606 --> 00:07:54,322
So we've kind of messed some stuff up here. Now, if we were to continue

129
00:07:54,376 --> 00:07:57,846
with our code, all of our standard out from here on out, everything that was

130
00:07:57,868 --> 00:08:01,522
sent, the SYs standard out write would be in all caps.

131
00:08:01,586 --> 00:08:05,426
And we definitely don't want that. So now we should talk about the exit

132
00:08:05,458 --> 00:08:09,154
context managers method. The exit context manager method is executed

133
00:08:09,202 --> 00:08:12,786
after the body of the width statement. So after all the code within the width

134
00:08:12,818 --> 00:08:16,266
statement has been executed, this is kind of the cleanup. This is what's going

135
00:08:16,288 --> 00:08:19,002
to put everything back the way it needs to be. It's going to close.

136
00:08:19,056 --> 00:08:22,510
File handles close connections. So this has happened after all of the code

137
00:08:22,580 --> 00:08:26,074
within the indentated block is executed, this method

138
00:08:26,122 --> 00:08:29,626
returns a boolean flag indicating if there is any exception

139
00:08:29,658 --> 00:08:33,054
that should be occurred or suppressed. So maybe we

140
00:08:33,092 --> 00:08:36,766
don't want to actually raise the exception. So maybe we're using a

141
00:08:36,788 --> 00:08:40,034
file and we go to close it. The with block goes to close

142
00:08:40,072 --> 00:08:43,106
it and the file doesn't close. This is kind of a problem,

143
00:08:43,208 --> 00:08:46,686
but is this bigger than a problem than the entire program crashing?

144
00:08:46,798 --> 00:08:51,154
Do we want this little method or this little error that surfaces

145
00:08:51,282 --> 00:08:54,854
to basically stop execution? And that's where we get to choose. Like maybe

146
00:08:54,892 --> 00:08:58,146
we handled it in a certain way, maybe they put in some bad input,

147
00:08:58,178 --> 00:09:01,090
but we don't really want to do anything. Maybe we can log it, we can

148
00:09:01,100 --> 00:09:04,438
add some logging information in there, we can do some print statements, but we don't

149
00:09:04,454 --> 00:09:08,426
want this exception to actually crash the whole program. So whenever this

150
00:09:08,448 --> 00:09:12,906
method returns true, it says that the exception is suppressed

151
00:09:13,018 --> 00:09:16,654
if there was any otherwise, the exception will continue to propagate up

152
00:09:16,692 --> 00:09:20,734
until it's either caught or it crashes the entire program. So this

153
00:09:20,772 --> 00:09:23,994
method takes three different arguments, exectype, exec,

154
00:09:24,042 --> 00:09:27,554
val, and traceback. And these are essentially the exec type is

155
00:09:27,592 --> 00:09:30,686
the exception class. So it's the class of the exception that was raised.

156
00:09:30,798 --> 00:09:34,146
The exec val is the specific instance of the

157
00:09:34,168 --> 00:09:37,854
exception that was raised. So whereas the class is a little bit broader, the exception

158
00:09:37,902 --> 00:09:41,878
instance actually might have some data inside of it. Sometimes some of the parameters that

159
00:09:41,884 --> 00:09:45,810
are passed in via the constructor or whatever can be found in execval

160
00:09:45,890 --> 00:09:49,394
arg. So you can kind of dig deep in here to find the exceptions

161
00:09:49,442 --> 00:09:52,618
if you need to. It's not necessary, but you totally could if you wanted to.

162
00:09:52,704 --> 00:09:56,362
You'll know when it's right for you. And then traceback is basically a traceback object,

163
00:09:56,416 --> 00:10:00,090
and this is just the python traceback that was brought up. And if you could

164
00:10:00,160 --> 00:10:03,626
log this somewhere so you could see what's going on program running, but know that

165
00:10:03,648 --> 00:10:06,874
hey, something did break. So yes, this is the exit method,

166
00:10:06,922 --> 00:10:10,142
and basically it's used to put everything back the way we need it.

167
00:10:10,196 --> 00:10:13,694
So an example of this would be let's go back to our yelling text example.

168
00:10:13,812 --> 00:10:17,266
What we can do here is we can say in our exit we

169
00:10:17,288 --> 00:10:20,414
keep the enter and the yell the same. So we still are doing the yelling,

170
00:10:20,462 --> 00:10:24,366
we're still sys selfstandard text upper. But in the exit

171
00:10:24,558 --> 00:10:28,020
we import sys again to make sure if something were to happen,

172
00:10:28,390 --> 00:10:31,266
for some reason the exit method was called before the enters method.

173
00:10:31,298 --> 00:10:34,850
And since we're not importing at the global space in the global namespace,

174
00:10:34,930 --> 00:10:38,166
we need to import it again. I don't know why you would

175
00:10:38,188 --> 00:10:42,198
call the exits before the enter, but it could happen. The good thing is that

176
00:10:42,284 --> 00:10:45,814
re importing libraries in Python has like almost zero performance

177
00:10:45,862 --> 00:10:48,794
hit, because it's just a cache hit. So it shouldn't be a problem. Don't really

178
00:10:48,832 --> 00:10:52,090
worry about it. But what we do is here is we take Sys standard out

179
00:10:52,160 --> 00:10:55,774
write, and we set it back to self standard out, which is the standard

180
00:10:55,892 --> 00:10:59,214
standard out, which is the one that we saved up above. If we had not

181
00:10:59,252 --> 00:11:02,894
done self standard out equals Sys standard out write as

182
00:11:02,932 --> 00:11:06,254
the second line in the enter method, we would not have been able to set

183
00:11:06,292 --> 00:11:09,490
this back. So if we use the exact same example where hello,

184
00:11:09,560 --> 00:11:13,250
I'm yelling text print, hello, I should not be yelling. We do get

185
00:11:13,320 --> 00:11:17,086
exactly what we were expecting, which is that the text is uppercase

186
00:11:17,118 --> 00:11:20,578
for hello, and the text would be lowercase for the I should not be yelling

187
00:11:20,594 --> 00:11:24,598
part. There are exceptions in the exit method, though. So what

188
00:11:24,604 --> 00:11:27,746
do we do with an exception? So if it's true, and this is a statement

189
00:11:27,778 --> 00:11:31,386
from the previous slide, if true is returned, the exception will

190
00:11:31,408 --> 00:11:34,778
be suppressed. Otherwise, the exception will continue to be propagated up.

191
00:11:34,864 --> 00:11:38,634
So let's look at it like this. If we take our exact same one

192
00:11:38,672 --> 00:11:42,394
and we say, if exec type is exception, we print that there was

193
00:11:42,432 --> 00:11:46,154
an exception and we return true. So this is us like handling

194
00:11:46,202 --> 00:11:49,838
the exception. And by us returning true, it says, hey, there was one.

195
00:11:49,924 --> 00:11:53,642
It did come through, but we handled it. So if we look at implementation

196
00:11:53,706 --> 00:11:57,354
code of this, if after we print hello, we just raised a generic

197
00:11:57,402 --> 00:12:00,546
exception. If we had not done this and we had not handled it and

198
00:12:00,568 --> 00:12:04,178
returned true inside of our code, then it would have continued to propagate all the

199
00:12:04,184 --> 00:12:07,762
way up and crash the program. But we did say, hey, if the exec type

200
00:12:07,816 --> 00:12:11,446
is of the class exception. So if we see like any exception class,

201
00:12:11,548 --> 00:12:14,646
we'll say there was an exception, we're going to print it. And as you see

202
00:12:14,668 --> 00:12:18,082
here, it was printed, and then it continued and said, I was not yelling.

203
00:12:18,146 --> 00:12:21,650
So this is exception is really wide. It's a very broad

204
00:12:21,730 --> 00:12:25,082
one. Like it's the parent class of all of them. So it's a little bit

205
00:12:25,136 --> 00:12:27,766
weird to use it here. But you could do this with very specific exceptions.

206
00:12:27,878 --> 00:12:31,286
If there is a file not found exception, then maybe we want to handle

207
00:12:31,318 --> 00:12:34,394
it differently. Maybe we just don't return something or we do something

208
00:12:34,432 --> 00:12:37,386
differently. We don't set things back up the way we want, but we can handle

209
00:12:37,418 --> 00:12:41,418
the exception in there. So yeah, that allows us to handle

210
00:12:41,434 --> 00:12:45,018
it, and then we return up true and we're good. So let's talk about context

211
00:12:45,114 --> 00:12:48,734
managers that take parameters, because as I remember from our previous

212
00:12:48,782 --> 00:12:52,594
slide, when I said in def dunder enter, it can't take a parameter like

213
00:12:52,632 --> 00:12:56,082
self. That's the only parameter that can take. So how do we do something like

214
00:12:56,136 --> 00:13:00,514
the with opened block that we see where we're obviously passing in parameters

215
00:13:00,642 --> 00:13:04,086
to our context managers? Like, how do we do that? The with

216
00:13:04,188 --> 00:13:08,194
context calls in it first. So if you want to pass in parameters,

217
00:13:08,242 --> 00:13:10,998
it actually needs to be parameters into the init function,

218
00:13:11,084 --> 00:13:14,426
the dunder init function of your class. And then what it does is when the

219
00:13:14,448 --> 00:13:17,734
with call happens, it will call the init. If the in exceeds,

220
00:13:17,782 --> 00:13:21,046
then it proceeds to go through the inner code block and exit. So you'll

221
00:13:21,078 --> 00:13:24,826
need to write a constructor if you want to take these parameters. They don't

222
00:13:24,858 --> 00:13:28,720
go as the enter parameters, they just have to be as redundant in it.

223
00:13:29,890 --> 00:13:32,970
So let's write a context manager that takes parameters.

224
00:13:33,050 --> 00:13:36,474
And actually let's go ahead and just re implement the with

225
00:13:36,532 --> 00:13:40,226
open one that we're so accustomed to using. Let's call it

226
00:13:40,248 --> 00:13:43,794
class file open. This is going to be basically almost the exact same

227
00:13:43,832 --> 00:13:47,422
as what we're opening up, but let's say self dot name self dot mode

228
00:13:47,486 --> 00:13:50,838
and then self file handle. These are going to be in our constructor. So we're

229
00:13:50,844 --> 00:13:55,174
going to give it the name which is like myfile txt in the mode read

230
00:13:55,372 --> 00:13:57,750
like rrb rw,

231
00:13:59,530 --> 00:14:03,030
the standard Unix file modes that we typically use.

232
00:14:03,180 --> 00:14:06,114
And then we're going to take those in the init. And then for the dunder

233
00:14:06,162 --> 00:14:09,366
enter we say self file handle equals open,

234
00:14:09,468 --> 00:14:13,534
self name self dot mode. So this is the same opened that we're typically used

235
00:14:13,572 --> 00:14:16,702
to seeing. And this is what we would write if we were writing regular code.

236
00:14:16,756 --> 00:14:19,534
And then we're going to return that file handle so that way the person can

237
00:14:19,572 --> 00:14:22,826
actually use it. And then when we exit we're going to just close that file

238
00:14:22,858 --> 00:14:27,470
handle. And then if we import it in and we say with fileopen

239
00:14:27,550 --> 00:14:31,246
file text read as file handle text equals

240
00:14:31,278 --> 00:14:34,594
fh read. Ours looks almost identical to the one

241
00:14:34,632 --> 00:14:37,998
in the very beginning, except it says file opened instead of open because it's our

242
00:14:38,024 --> 00:14:42,086
own personal class name and everything works exactly the way you would expect it

243
00:14:42,108 --> 00:14:45,446
to. So that's how you implement context managers as

244
00:14:45,468 --> 00:14:48,806
a class. But there is one other way that you can do it. If you

245
00:14:48,828 --> 00:14:53,038
don't want to use a class, you can implement them using context lib

246
00:14:53,074 --> 00:14:56,586
as functions, with a function implementation. So these

247
00:14:56,608 --> 00:15:00,122
can be created by using generators, by using the yield function and

248
00:15:00,176 --> 00:15:03,850
decorators. So the context library and the contextlib

249
00:15:03,930 --> 00:15:07,822
context manager decorator allows you to specify a specific function as

250
00:15:07,876 --> 00:15:11,018
a context manager. And then the way that you specify

251
00:15:11,114 --> 00:15:14,414
what is the enter and what is the exit is the yield. So you use

252
00:15:14,452 --> 00:15:17,582
the yield function to separate them. So if you remember,

253
00:15:17,636 --> 00:15:20,514
like we have our enter and then we would return something and then we would

254
00:15:20,552 --> 00:15:24,066
exit, that return is basically the yield. We're yielding it back up

255
00:15:24,088 --> 00:15:27,906
and then we're waiting and then we go through. So context managers functions that

256
00:15:27,928 --> 00:15:31,014
are using this. So let's go ahead and do one. If we have

257
00:15:31,052 --> 00:15:34,118
a whisper function, which is basically everything that is said is going to be the

258
00:15:34,124 --> 00:15:37,814
opposite of yell. It's going to be quieter. Then let's go ahead and just

259
00:15:37,852 --> 00:15:41,186
decorate this with at Contextlib. Context manager,

260
00:15:41,218 --> 00:15:44,550
we had to import the context library. So we import sys.

261
00:15:44,630 --> 00:15:48,186
We say original write equals sys standard out, right? We're saving that

262
00:15:48,208 --> 00:15:51,610
original one so we can set it back up. We say def whisper write

263
00:15:51,680 --> 00:15:55,102
text. The text that comes in is original write text lower.

264
00:15:55,156 --> 00:15:58,862
So we're just going to lowercase everything. Then we say sys standard out

265
00:15:58,916 --> 00:16:02,094
write is equal to whisper write. So this is all what would go inside of

266
00:16:02,132 --> 00:16:04,890
our enter dunder enters class, and then we yield,

267
00:16:04,970 --> 00:16:08,466
whisper. And then this whisper is actually what's going to be put into that

268
00:16:08,488 --> 00:16:11,966
variable. So we've yielded. Now we are done with the intersection,

269
00:16:12,078 --> 00:16:15,586
and then when we're done within the block, it's going to come back in and

270
00:16:15,608 --> 00:16:19,198
it's going to basically resume after the yield, and it's going to set the

271
00:16:19,224 --> 00:16:23,094
original right back. So if we do that, we say print, this should

272
00:16:23,132 --> 00:16:26,690
be whispered in all caps, and then print things should not. This is not whispered.

273
00:16:26,770 --> 00:16:30,958
And as we see that it did do it, we were able to lowercase

274
00:16:30,994 --> 00:16:34,426
the code that was inside the context manager and then set everything back the way

275
00:16:34,448 --> 00:16:38,710
we expected to. So context managers can also be implemented

276
00:16:38,790 --> 00:16:42,010
with the function just using a try, finally. So by doing a try, finally,

277
00:16:42,080 --> 00:16:45,562
this allows you to handle the exceptions. So it's our same function. We're still decorating,

278
00:16:45,626 --> 00:16:48,766
we're still setting up whisper right, saving the old one. But what we do is

279
00:16:48,788 --> 00:16:52,526
the first thing we try to do is yield whisper. Now, if any

280
00:16:52,628 --> 00:16:56,114
code inside of our block throws an exception, it will be caught by this

281
00:16:56,152 --> 00:16:59,486
try. And when that happens, if we raise an exception, we can catch

282
00:16:59,518 --> 00:17:02,834
that exception and then handle that exception. And then finally

283
00:17:02,952 --> 00:17:06,514
when we do our finally block, that allows us to set everything back

284
00:17:06,552 --> 00:17:10,386
to being right. So instead of where with our other class implementation, we returned

285
00:17:10,418 --> 00:17:13,510
true and it was handled. Otherwise, we're basically using the try,

286
00:17:13,580 --> 00:17:17,014
except finally block here to handle the exception ourself without

287
00:17:17,052 --> 00:17:20,406
having to have that class. If we do the exact same thing, this should be

288
00:17:20,428 --> 00:17:23,754
whispered. We're going to raise an exception. And then we say, this is not

289
00:17:23,792 --> 00:17:27,610
whispered. Essentially what happens is this should be whispered. Now look,

290
00:17:27,680 --> 00:17:31,862
this is interesting. The exception inside of my block is exception

291
00:17:31,926 --> 00:17:35,214
happened, but as you can see with a capital e. But this one right here

292
00:17:35,252 --> 00:17:38,542
is lowercase. What happened here is we have not set things

293
00:17:38,596 --> 00:17:42,142
back to the way they were, so it isn't set

294
00:17:42,196 --> 00:17:45,234
back yet. And then we go to our finally this is not

295
00:17:45,272 --> 00:17:48,942
whispered and then we're good. So I hope you enjoyed

296
00:17:49,006 --> 00:17:52,494
this talk today. This is an overview of context

297
00:17:52,542 --> 00:17:56,082
managers. Really, this is actually about all there is to the base

298
00:17:56,136 --> 00:17:59,374
of the context manager. What you choose to do with them can be as complicated

299
00:17:59,422 --> 00:18:02,566
as you want, but with a context manager, the only things you really have to

300
00:18:02,588 --> 00:18:06,370
worry about are the enter the exit and handling of the exceptions.

301
00:18:06,530 --> 00:18:09,718
It's not a very complex python feature, but is definitely

302
00:18:09,804 --> 00:18:13,622
a very powerful one that is really useful and I hope

303
00:18:13,676 --> 00:18:16,298
that you get to play around with them, you get to have some fun with

304
00:18:16,304 --> 00:18:19,178
them, and I hope that you'll start to incorporate them into your python code.

305
00:18:19,264 --> 00:18:22,742
Every example that's on this presentation is on GitHub,

306
00:18:22,806 --> 00:18:25,894
so you can download at Mason context

307
00:18:26,022 --> 00:18:29,566
managers sample code and you will be able to run all of my

308
00:18:29,588 --> 00:18:32,398
examples, play around with them, change them all you want.

309
00:18:32,564 --> 00:18:35,966
Follow me on Twitter mason Egger if you want to hear more from me,

310
00:18:35,988 --> 00:18:38,462
if you want to see when I'm doing other presentations, if you have any questions

311
00:18:38,516 --> 00:18:41,902
and you want to tweet at me, please feel free. I love answering everyone's questions

312
00:18:42,036 --> 00:18:45,606
and if you're looking for an ebook, something to

313
00:18:45,628 --> 00:18:48,806
learn Python with. If you're new to Python, Digitalocean has a how to

314
00:18:48,828 --> 00:18:52,118
code in Python ebook that is amazing. That was written by some

315
00:18:52,124 --> 00:18:55,238
of our amazing developer educators and you go to dot co

316
00:18:55,324 --> 00:18:58,626
slash ebook Python and you can get a free book that teaches

317
00:18:58,658 --> 00:19:01,846
you how to do Python. Thank you very much for your time today. Thank you

318
00:19:01,868 --> 00:19:04,198
very much for attending my talk and I hope you enjoy the rest of the

319
00:19:04,204 --> 00:19:04,690
conference.

