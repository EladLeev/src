1
00:00:28,050 --> 00:00:31,110
Hi there, my name's Tammy and I'm here to speak to you about

2
00:00:31,180 --> 00:00:34,598
chaos Engineering. When the network breaks. You can

3
00:00:34,604 --> 00:00:38,786
reach me via email tammy@gremlin.com at gremlin,

4
00:00:38,818 --> 00:00:42,582
I work as a principal site reliability engineer. I've been here for

5
00:00:42,636 --> 00:00:46,294
three and a half years. I get to do a lot of chaos engineering as

6
00:00:46,332 --> 00:00:49,834
a way to proactively avoid outages and downtime.

7
00:00:50,002 --> 00:00:54,426
Previously I worked at Dropbox as a site reliability engineering

8
00:00:54,458 --> 00:00:57,982
manager for databases, block storage, and code

9
00:00:58,036 --> 00:01:01,962
workflows. One of my really proud achievements

10
00:01:02,026 --> 00:01:05,394
was being able to get a ten x reduction in incidents in three

11
00:01:05,432 --> 00:01:09,502
months, which was awesome. And it was through doing chaos engineering.

12
00:01:09,566 --> 00:01:12,590
You can also find me on Twitter tammy xbryant.

13
00:01:12,670 --> 00:01:15,938
One of the biggest problems these days is that every system

14
00:01:16,024 --> 00:01:20,322
is becoming a distributed system that makes things really complicated.

15
00:01:20,466 --> 00:01:23,894
You see a lot of folks with faces like this whenever they join a new

16
00:01:23,932 --> 00:01:27,438
company and there's a distributed system, or if they're

17
00:01:27,474 --> 00:01:31,638
just trying to add something new. So what is chaos engineering?

18
00:01:31,734 --> 00:01:35,674
Thoughtful, planned experiments designed to reveal the weaknesses in our

19
00:01:35,712 --> 00:01:39,322
systems. We inject chaos proactively instead

20
00:01:39,376 --> 00:01:43,642
of dreading the unknown. This is a really cool example from Netflix.

21
00:01:43,786 --> 00:01:47,166
You can see here on the top. This is when things are all

22
00:01:47,188 --> 00:01:51,194
going great. Everything tools awesome. There's a nice hero banner

23
00:01:51,322 --> 00:01:54,606
to promote, something in particular so that

24
00:01:54,628 --> 00:01:57,922
folks could easily click play on it. You can see there's that big red play

25
00:01:57,976 --> 00:02:02,386
button there, and then you can see some other items that you could continue watching.

26
00:02:02,568 --> 00:02:06,274
And then if you look below, this is what it looks like if

27
00:02:06,312 --> 00:02:09,746
there's something wrong with that hero that you'd like

28
00:02:09,768 --> 00:02:13,366
to be able to showcase. So say, for example, maybe there's a problem with the

29
00:02:13,388 --> 00:02:16,774
file. There was like file corruption. Or maybe you need to take it down because

30
00:02:16,812 --> 00:02:20,902
there was some type of issue in the back end could be business related legal

31
00:02:20,966 --> 00:02:24,106
compliance, like sign off. Sometimes you need to

32
00:02:24,128 --> 00:02:27,546
be able to remove things and roll them back. So instead of having a

33
00:02:27,568 --> 00:02:31,070
big x button or having some type of really

34
00:02:31,140 --> 00:02:34,670
bad under experience making things not load,

35
00:02:35,170 --> 00:02:38,986
showing like a loading screen, instead what we're doing is we're gracefully

36
00:02:39,098 --> 00:02:42,254
failing and we're showing like a nice,

37
00:02:42,372 --> 00:02:46,302
clean, simple look on the bottom screen where we just hide the hero

38
00:02:46,366 --> 00:02:49,918
completely. So the under doesn't even know that anything's broken.

39
00:02:50,094 --> 00:02:53,826
So how do you create a chaos engineering scenario? First off,

40
00:02:53,928 --> 00:02:57,894
form a hypothesis, then baseline your metrics if you

41
00:02:57,932 --> 00:03:01,734
can. I really recommend getting started by having some slos and

42
00:03:01,772 --> 00:03:05,234
slis per service. Consider the blast radius.

43
00:03:05,362 --> 00:03:08,566
Determine what chaos you'd like to inject, for example,

44
00:03:08,668 --> 00:03:12,726
latency. Or maybe you'll make something unavailable using a black hole.

45
00:03:12,838 --> 00:03:16,186
Run your chaos engineering scenario. Measure the results of your

46
00:03:16,208 --> 00:03:19,290
chaos engineering scenario, then find and fix issues

47
00:03:19,360 --> 00:03:23,174
or scale the blast radius of the scenario. Often folks

48
00:03:23,222 --> 00:03:27,626
ask me, how do I pick where to start? Though I really recommend identifying

49
00:03:27,658 --> 00:03:31,134
your top five critical services first. I don't really like the idea

50
00:03:31,172 --> 00:03:34,538
of going for low hanging fruit because in the world of SRE,

51
00:03:34,634 --> 00:03:38,578
that's not impactful. You need to focus on fixing the issues

52
00:03:38,664 --> 00:03:42,290
that impact your customers. If you've got every single customer

53
00:03:42,360 --> 00:03:46,050
impacted by one issue, you've got to fix that rather than just fixing

54
00:03:46,130 --> 00:03:49,430
a small, tiny issue that only impacts, say, for example,

55
00:03:49,500 --> 00:03:53,510
one customer. And maybe that customer is a lower

56
00:03:53,580 --> 00:03:57,506
cost customer, for example, or a customer that you're

57
00:03:57,538 --> 00:04:01,046
not trying to target with a new campaign. Something like that.

58
00:04:01,148 --> 00:04:04,794
So what you really need to do is figure out what your top five

59
00:04:04,832 --> 00:04:08,426
critical services are. I like to ask folks if you could say that

60
00:04:08,448 --> 00:04:11,210
now tell me, what are your top five critical services?

61
00:04:11,360 --> 00:04:15,086
Often folks aren't really sure, and if you ask different people within the

62
00:04:15,108 --> 00:04:18,574
same organization, you'll get different answers. Butow we really want to

63
00:04:18,612 --> 00:04:22,682
understand across an entire company, what are the top five most critical

64
00:04:22,746 --> 00:04:25,922
services? Then choose one of these critical services.

65
00:04:26,056 --> 00:04:29,934
So, for example, I'll give you three different types of critical

66
00:04:29,982 --> 00:04:33,486
services that you'll often see. One is monitoring and alerting

67
00:04:33,518 --> 00:04:36,754
or observability. That's definitely a critical service.

68
00:04:36,952 --> 00:04:41,666
The next is cash, for example, redis or memcache.

69
00:04:41,778 --> 00:04:45,734
And then a third, for example would be payments. Another one

70
00:04:45,772 --> 00:04:49,414
that you may be thinking about databases. That's another critical

71
00:04:49,462 --> 00:04:53,226
service. Next up, step three, whiteboard the

72
00:04:53,248 --> 00:04:57,174
service with your team. Then step four, select the scenario

73
00:04:57,222 --> 00:05:01,254
that you'd like to run. For example, maybe you'll validate

74
00:05:01,302 --> 00:05:06,290
monitoring and alerting. Maybe you'll validate autoscaling.

75
00:05:06,310 --> 00:05:09,646
Works as expected. Maybe youll figure out what happens if

76
00:05:09,668 --> 00:05:13,374
a dependency is unavailable using a black hole attack. Or maybe

77
00:05:13,412 --> 00:05:17,358
you'll use a shutdown attack or a black hole attack to trigger hosts

78
00:05:17,374 --> 00:05:20,098
or container failure. Then step five,

79
00:05:20,264 --> 00:05:24,050
determine the magnitude, the number of servers, and the length of time.

80
00:05:24,200 --> 00:05:27,714
So what is the value of chaos engineering? To me, there are

81
00:05:27,752 --> 00:05:30,966
so many different ways that you can get value from chaos engineering. And I think

82
00:05:30,988 --> 00:05:34,454
it's a really great, most important, one of the most

83
00:05:34,492 --> 00:05:37,894
important things for an SRE to do. I say this because for

84
00:05:37,932 --> 00:05:41,350
me, it's been the number one way that I've been able to reduce incidents,

85
00:05:41,430 --> 00:05:45,338
avoid downtime, and it's super impactful in a

86
00:05:45,344 --> 00:05:48,746
really short amount of time and you don't need tons of people to make it

87
00:05:48,768 --> 00:05:52,174
happen. It's really nice and proactive compared to other types of work

88
00:05:52,212 --> 00:05:55,610
that you can do. For example, automation,

89
00:05:55,770 --> 00:05:58,974
building completely automated systems that don't involve any

90
00:05:59,012 --> 00:06:02,878
humans, that takes years of work often, and it

91
00:06:02,884 --> 00:06:06,714
takes a lot of engineering effort and often there's actually a lot of failures

92
00:06:06,762 --> 00:06:09,906
that come because of the automation. So to me this is a great way to

93
00:06:09,928 --> 00:06:13,538
first reduce issues before you do all of that automation work

94
00:06:13,624 --> 00:06:16,120
because automation is just going to uncover more problems.

95
00:06:16,570 --> 00:06:20,006
So what are some of the values? First off, find your

96
00:06:20,028 --> 00:06:23,190
monitoring gaps, reduce signal to noise. Next,

97
00:06:23,260 --> 00:06:25,778
validate upstream and downstream dependencies.

98
00:06:25,954 --> 00:06:29,010
Thirdly, train your teams fire drills,

99
00:06:29,170 --> 00:06:32,966
making sure that folks know who needs to do what when they get paged.

100
00:06:33,078 --> 00:06:36,886
Inject chaos, inject real failure to then trigger real alerts

101
00:06:36,918 --> 00:06:40,278
to specific folks on different teams. And fourthly,

102
00:06:40,374 --> 00:06:43,886
get a good night's sleep. Being up at 02:00 a.m. Having to get

103
00:06:43,908 --> 00:06:47,854
paged and resolve an incident, that's not good. We want to reduce that

104
00:06:47,892 --> 00:06:51,118
with chaos engineering. Something else I wanted to talk about

105
00:06:51,204 --> 00:06:54,422
is MTTD. This is one of my secrets.

106
00:06:54,506 --> 00:06:57,870
So my personal favorite metric is MTTD

107
00:06:57,950 --> 00:07:01,586
and focusing on improving meantime to detection. I care about

108
00:07:01,608 --> 00:07:05,518
it so much that I wrote a book on it with some friends for O'Reilly,

109
00:07:05,614 --> 00:07:09,694
some friends from LinkedIn, Twitter, Amazon. We got together

110
00:07:09,832 --> 00:07:13,686
and we put down all of our best practice ideas and principles for

111
00:07:13,708 --> 00:07:16,566
how you can do this and share that in this book. So check that out

112
00:07:16,588 --> 00:07:20,354
for sure. Why do I care about mean times of detection?

113
00:07:20,482 --> 00:07:23,846
Because, for example, if it takes you a week to detect an incident

114
00:07:23,958 --> 00:07:27,274
and five minutes to resolve it, it still means that it took

115
00:07:27,312 --> 00:07:30,426
you a week and five minutes to fix the issue. For a customer,

116
00:07:30,528 --> 00:07:34,178
that's bad. The slower your time to detection is, the worse

117
00:07:34,214 --> 00:07:37,882
the impact is for the customer. So if you focus on mean time to detection,

118
00:07:37,946 --> 00:07:41,226
you can get in there faster and you can resolve issues faster.

119
00:07:41,338 --> 00:07:45,154
Now let's dive into network chaos. Today I want to share some

120
00:07:45,192 --> 00:07:49,042
demos. We're going to be using a demo web

121
00:07:49,096 --> 00:07:52,766
application that's an ecommerce store. I'm going to show you three different kinds

122
00:07:52,798 --> 00:07:56,066
of demos. One is a black hole attack. We'll be doing this

123
00:07:56,088 --> 00:07:59,954
on the had service. Second is a black hole of the recommended

124
00:08:00,002 --> 00:08:03,330
products. And thirdly is a packet loss

125
00:08:03,410 --> 00:08:07,186
attack, where we'll actually be injecting packet loss into the cart.

126
00:08:07,298 --> 00:08:10,198
One of the main things that I like to think about at the start of

127
00:08:10,204 --> 00:08:14,550
this is use a scientific method and determine a hypothesis.

128
00:08:14,710 --> 00:08:17,898
So if we make the black hole, if we run a black hole attack and

129
00:08:17,904 --> 00:08:21,758
make the ad service unavailable, we think like nothing really that bad will happen.

130
00:08:21,844 --> 00:08:24,590
It should gracefully degrade. We should have no outages.

131
00:08:24,930 --> 00:08:28,718
That should just disappear. If we blackhole recommended products,

132
00:08:28,884 --> 00:08:32,362
also, we shouldn't have any outages. Everything should gracefully degrade.

133
00:08:32,426 --> 00:08:35,738
We just wouldn't see recommended products. You know, like when you're on Amazon

134
00:08:35,834 --> 00:08:38,738
and you see other things that they recommend that you should buy based on what

135
00:08:38,744 --> 00:08:41,918
youre already bought, it should just disappear and you shouldn't even notice if it's

136
00:08:41,934 --> 00:08:45,490
not there. If we inject packet loss into the cart, we expect

137
00:08:45,560 --> 00:08:49,622
that we shouldn't actually lose any items and our cart should

138
00:08:49,756 --> 00:08:53,026
remain intact during this attack. We don't

139
00:08:53,058 --> 00:08:56,658
want the cart to drop items. We don't want the cart

140
00:08:56,674 --> 00:08:59,926
to not allow us to add extra items. We should still be able to use

141
00:09:00,028 --> 00:09:03,514
our cart. So first off, what we want to do, like we talked

142
00:09:03,552 --> 00:09:07,258
about before, is drop a whiteboard of our architecture. So you

143
00:09:07,264 --> 00:09:10,686
can see here for this demo application, the hipster shop,

144
00:09:10,788 --> 00:09:14,702
we've got twelve services. Which of these services matter most

145
00:09:14,756 --> 00:09:18,234
to our customers? The cart service, the checkout

146
00:09:18,282 --> 00:09:21,386
service, the payment service, shipping.

147
00:09:21,578 --> 00:09:24,766
Which ones do we think? So let's think about it

148
00:09:24,788 --> 00:09:28,146
like this. What can we remove from the critical path and what do we have

149
00:09:28,168 --> 00:09:31,362
to keep? There are a few things here that look really important.

150
00:09:31,496 --> 00:09:35,026
Definitely the checkout service, the payment service. We want

151
00:09:35,048 --> 00:09:38,546
to understand, like what items are going where with the shipping service.

152
00:09:38,728 --> 00:09:42,742
There's also a cash that looks pretty important. Cart service looks important too.

153
00:09:42,796 --> 00:09:46,454
Product, catalog service, that's probably important. So this, to me,

154
00:09:46,492 --> 00:09:50,186
looks like the architecture of what we would need to keep.

155
00:09:50,288 --> 00:09:53,366
And you can see I've removed a few of the different items.

156
00:09:53,558 --> 00:09:56,666
So if we look back, I remove the email service,

157
00:09:56,768 --> 00:10:00,650
currency service, recommendation service, which recommends products.

158
00:10:00,800 --> 00:10:03,038
So those are a few of the things that we think are not in the

159
00:10:03,044 --> 00:10:05,790
critical path. But everything here is in the critical path.

160
00:10:06,130 --> 00:10:10,170
And the little boxes with emojis,

161
00:10:10,330 --> 00:10:14,480
those are items that are even more critical for the user, like the payment service.

162
00:10:14,850 --> 00:10:18,450
So getting out of the critical path is good. Always remember this,

163
00:10:18,600 --> 00:10:21,922
if you are in the critical path as a critical path service team

164
00:10:22,056 --> 00:10:25,522
and you own a critical service, then you're going to have youre eyes

165
00:10:25,576 --> 00:10:28,898
on you and more things that you need to pass. More checks,

166
00:10:28,994 --> 00:10:32,840
more compliance. So we've got seven critical services.

167
00:10:33,210 --> 00:10:37,142
One thing that we want to think about, based on our hypothesis, is does

168
00:10:37,196 --> 00:10:40,806
black holing a noncritical path service cause unexpected failures

169
00:10:40,838 --> 00:10:44,390
for critical services. So based on our initial

170
00:10:44,550 --> 00:10:48,586
scenario that we want to run and our hypothesis, we think that if we

171
00:10:48,608 --> 00:10:51,510
make the recommended product service unavailable,

172
00:10:51,590 --> 00:10:55,294
we shouldn't have any issues. If that service is not found,

173
00:10:55,412 --> 00:10:59,630
we think the path should be okay. Another thing we might want to think about,

174
00:10:59,780 --> 00:11:03,374
like we talked about initially, is does injecting some type

175
00:11:03,412 --> 00:11:06,894
of network impact, like packet loss in the cart service, cause us to lose

176
00:11:06,942 --> 00:11:09,758
data, like for example, our customer cart items?

177
00:11:09,854 --> 00:11:13,934
Another thing that you might think here is where are youre data backups and restores?

178
00:11:14,062 --> 00:11:17,166
We seem to only have a redis cache. You know that feeling

179
00:11:17,198 --> 00:11:20,338
when you've been shopping for ages, you've added all these items to your cart and

180
00:11:20,344 --> 00:11:23,862
then suddenly your entire cart gets wiped and you have to go and re add

181
00:11:23,916 --> 00:11:27,014
all of those items to the cart. It's annoying for the user and it's also

182
00:11:27,052 --> 00:11:29,830
really bad for the organization.

183
00:11:30,250 --> 00:11:34,426
All righty, so now let's get started with our first real demo.

184
00:11:34,608 --> 00:11:38,154
We're going to do a black hole attack on the ad service. So this means

185
00:11:38,192 --> 00:11:42,174
we're going to make the ad service unavailable. So this is our

186
00:11:42,372 --> 00:11:46,266
demo application. Here you can see if I click on vintage camera

187
00:11:46,298 --> 00:11:48,800
lets. And now I scroll down.

188
00:11:49,810 --> 00:11:53,086
This is the recommended product section. Other products you

189
00:11:53,108 --> 00:11:56,274
might like. And then here's the ad service. So,

190
00:11:56,392 --> 00:11:59,460
advertisement Film camera for sale, 50% off.

191
00:11:59,910 --> 00:12:03,454
I can then click on that link and it takes me to the film camera.

192
00:12:03,502 --> 00:12:06,990
And then it has another ad for that film camera for sale.

193
00:12:07,150 --> 00:12:10,486
If I go to a different product like the terrarium, you can

194
00:12:10,508 --> 00:12:14,102
see that there's an ad down here that says airplanes for sale. Buy two,

195
00:12:14,156 --> 00:12:17,366
get third one free. So we think we should still be able to

196
00:12:17,388 --> 00:12:21,014
use this site. Click on an item, scroll down.

197
00:12:21,132 --> 00:12:24,486
But we think this will probably be gone. This box here, the advertisement

198
00:12:24,518 --> 00:12:27,866
box, based on our hypothesis, but we do think we should still be able

199
00:12:27,888 --> 00:12:31,194
to add items to cart. See, we've added this

200
00:12:31,232 --> 00:12:35,286
item and now we have usd 70 22

201
00:12:35,328 --> 00:12:39,166
as our total cost. We should be able to check that out and

202
00:12:39,188 --> 00:12:42,206
see that the order is complete. So now what we want to do is we

203
00:12:42,228 --> 00:12:46,002
want to run that black hole attack. So this is our baseline good state everything

204
00:12:46,056 --> 00:12:49,362
tools. Nice. So we can see that here the had

205
00:12:49,416 --> 00:12:53,486
service. Now I'm going to go and say scenario,

206
00:12:53,678 --> 00:12:57,378
new scenario, black hole

207
00:12:57,554 --> 00:12:59,000
add service.

208
00:13:02,170 --> 00:13:06,550
So we think that this should be graceful. No outage,

209
00:13:07,710 --> 00:13:10,490
website still functions.

210
00:13:11,470 --> 00:13:14,986
Ads are hidden. That's what we expect to

211
00:13:15,008 --> 00:13:19,002
happen. That's our hypothesis. So now what we want to do is

212
00:13:19,056 --> 00:13:23,040
click over here on Kubernetes and then search for

213
00:13:24,210 --> 00:13:27,802
the Kubernetes service. We've selected our cluster

214
00:13:27,866 --> 00:13:31,278
Kubernetes cluster group. Now I'm

215
00:13:31,284 --> 00:13:34,654
going to go over to the ad service. I just type that in based

216
00:13:34,692 --> 00:13:38,162
on our architecture diagram. And you can see here it selected the deployment for ad

217
00:13:38,216 --> 00:13:42,146
service and the pod and the

218
00:13:42,168 --> 00:13:45,426
replica set for ad service. So we've got that there

219
00:13:45,608 --> 00:13:49,174
and we can see that across our two hosts. So we've got

220
00:13:49,212 --> 00:13:53,142
two hosts. It actually only has one pod across

221
00:13:53,196 --> 00:13:56,578
all of them. So that's already interesting from a reliability perspective.

222
00:13:56,674 --> 00:14:00,290
It's not going to fail over gracefully because we only have one pod.

223
00:14:00,450 --> 00:14:03,642
If we did have two pods, then potentially, yeah,

224
00:14:03,696 --> 00:14:07,398
we wouldn't see an issue at all if we were just going to black hole

225
00:14:07,414 --> 00:14:11,930
one of the pods. So now what I'm going to do is scroll down,

226
00:14:12,080 --> 00:14:15,566
click network, and go to black hole. Do this

227
00:14:15,588 --> 00:14:18,830
for 60 seconds. I don't need to do anything in particular extra,

228
00:14:18,900 --> 00:14:23,038
but I could do something more granular, like say, I only want to impact traffic

229
00:14:23,054 --> 00:14:26,574
to these IP addresses. I only want to impact

230
00:14:26,622 --> 00:14:30,194
these specific remote ports. So traffic going from here

231
00:14:30,232 --> 00:14:33,726
to somewhere else or local ports impact

232
00:14:33,838 --> 00:14:37,686
outgoing and incoming traffic to and from these local ports. Or I could drop down

233
00:14:37,708 --> 00:14:40,902
and select specific providers. All right,

234
00:14:40,956 --> 00:14:44,760
let's add that to our scenario. Click save.

235
00:14:46,250 --> 00:14:49,346
Now let's run it. So this is a cool live

236
00:14:49,388 --> 00:14:51,900
demo. We'll actually be able to see this in real time.

237
00:14:53,390 --> 00:14:56,858
So now I'm starting to run this and we'll see what happens.

238
00:14:57,024 --> 00:15:00,230
It's currently running. Let's pull that up.

239
00:15:00,400 --> 00:15:03,760
Pending is the first state that youll see it in.

240
00:15:06,370 --> 00:15:09,520
All righty. Let's see. We'll go back over to our site.

241
00:15:10,050 --> 00:15:13,790
I'm going to leads this open. You can see here. I've got that there.

242
00:15:13,860 --> 00:15:17,154
Let's refresh the page. You can see now

243
00:15:17,192 --> 00:15:20,686
the ad service has disappeared. So it was there before, now it's

244
00:15:20,718 --> 00:15:24,094
gone. But let's check everything else still works. If I click on film

245
00:15:24,142 --> 00:15:27,638
camera, no ad service is there. But I

246
00:15:27,644 --> 00:15:29,510
can add an item to my cart.

247
00:15:31,770 --> 00:15:34,520
Great. And now I can place my order.

248
00:15:38,110 --> 00:15:40,730
Add a home barista kit to my cart.

249
00:15:44,670 --> 00:15:48,090
And I can place my order. All right,

250
00:15:48,160 --> 00:15:51,514
excellent. Everything looks good. So I would say that that

251
00:15:51,552 --> 00:15:54,926
actually passed. So what we can do here is we know

252
00:15:54,948 --> 00:15:58,014
that it passed already. So we can halt that scenario. We can say,

253
00:15:58,052 --> 00:16:01,310
yes, it passed. No incidents uncover and yeah,

254
00:16:01,380 --> 00:16:04,450
can incident was mitigated. No issues. Graceful.

255
00:16:07,590 --> 00:16:10,914
All right, so we've stopped that scenario because everything

256
00:16:10,952 --> 00:16:14,020
was good and we saved our results into the system.

257
00:16:14,790 --> 00:16:19,214
So that's awesome. That's a really good example of a successful chaos engineering

258
00:16:19,262 --> 00:16:22,838
experiment. And we could think there what else might we do to this system to

259
00:16:22,844 --> 00:16:26,294
make it even better? We could make it that you could fail over to

260
00:16:26,332 --> 00:16:29,834
a different pod. Since there's only one make the ad services still work.

261
00:16:29,872 --> 00:16:33,610
If one of them is not available, that could be a future experiment.

262
00:16:36,430 --> 00:16:39,786
So some other different experiments that we can run now

263
00:16:39,808 --> 00:16:43,726
let's blackhole the recommended product service. So what

264
00:16:43,748 --> 00:16:46,238
we want to do is go back over here,

265
00:16:46,404 --> 00:16:49,920
recommended products is things section here, other products you might like.

266
00:16:51,410 --> 00:16:55,326
So I'm just going to reload that page. You can see here

267
00:16:55,348 --> 00:16:58,498
the ad service is now back and we see our recommended product section. So we

268
00:16:58,504 --> 00:17:01,490
think it should be the same. This section should just disappear.

269
00:17:02,790 --> 00:17:06,470
All right, so let's go scenarios, new scenario

270
00:17:08,330 --> 00:17:12,040
black hole recommended products,

271
00:17:18,910 --> 00:17:20,170
no outage.

272
00:17:25,230 --> 00:17:32,206
And let's find it over here in Kubernetes youll

273
00:17:32,228 --> 00:17:33,920
can see we've selected it.

274
00:17:35,250 --> 00:17:39,690
Network black hole. Leave it for 60 responds.

275
00:17:39,850 --> 00:17:42,830
Add to scenario, save the scenario.

276
00:17:43,670 --> 00:17:45,140
Now let's run it.

277
00:17:46,630 --> 00:17:51,060
Okay, so we're just going to be blackhalling the recommended products

278
00:17:51,430 --> 00:17:54,690
service. It's currently in the status of pending.

279
00:17:56,550 --> 00:17:59,958
Looks like there's an issue. So I'm trying to click on vintage typewriter and

280
00:17:59,964 --> 00:18:03,206
it's just trying to load but it's not allowing me to get to

281
00:18:03,228 --> 00:18:06,626
that page. I've just got it loading. I'm kind of stuck

282
00:18:06,658 --> 00:18:09,974
here. Clicked on film camera, same thing.

283
00:18:10,012 --> 00:18:13,906
Nothing's happening. Let me try and add something to my cart.

284
00:18:14,098 --> 00:18:17,642
Oh, that's not working either. So there's definitely

285
00:18:17,696 --> 00:18:20,860
an issue here. I'm going to try and go back to the home page.

286
00:18:21,310 --> 00:18:25,210
Okay, so I can get to the home page. Can I click on an item?

287
00:18:25,550 --> 00:18:28,894
No. So the only thing that I can do right now, the only thing

288
00:18:28,932 --> 00:18:31,966
functioning is enabling me to go to the home page. Let's see if I can

289
00:18:31,988 --> 00:18:34,914
get to the cart. No,

290
00:18:35,032 --> 00:18:38,754
can get to the cart either. So this page is

291
00:18:38,792 --> 00:18:42,354
basically not working at all. This website is not working at all.

292
00:18:42,552 --> 00:18:44,740
I can't really do anything much.

293
00:18:45,750 --> 00:18:49,126
I can't get to my cart. I can't add items. So we would consider this

294
00:18:49,148 --> 00:18:52,326
to be an outage. The website's just not working at all.

295
00:18:52,348 --> 00:18:56,018
It's not enabling us to make any purchases. So we're

296
00:18:56,034 --> 00:18:59,626
not going to be fulfilling anything from any customer. So that's definitely a

297
00:18:59,648 --> 00:19:02,906
bad example. So let's say, all right, we know that this is

298
00:19:02,928 --> 00:19:07,014
not good. Let's halt it. No it failed. A potential

299
00:19:07,062 --> 00:19:10,082
incident was uncovered and the incident

300
00:19:10,166 --> 00:19:11,630
was not mitigated.

301
00:19:13,330 --> 00:19:17,440
So let's say full outage website

302
00:19:18,930 --> 00:19:22,946
not working at all to

303
00:19:23,048 --> 00:19:27,010
process orders or navigate.

304
00:19:29,510 --> 00:19:30,610
All righty.

305
00:19:34,390 --> 00:19:36,040
Click save there.

306
00:19:38,010 --> 00:19:41,666
So that was a bad example. Now that I've halted

307
00:19:41,698 --> 00:19:45,862
it, let's just check. Everything's still good. Yep. So really

308
00:19:45,916 --> 00:19:49,378
easy, quick way to be able to test what happens if you blackhole a

309
00:19:49,404 --> 00:19:53,260
service. Obviously there's some type of issue with hard coding that

310
00:19:53,630 --> 00:19:56,858
blackhalling this recommended product service breaks the entire website.

311
00:19:56,944 --> 00:20:00,170
Obviously we don't want that. That's really bad. All righty.

312
00:20:01,150 --> 00:20:04,720
So we've saved our results into the system and we said

313
00:20:05,090 --> 00:20:08,366
it was supposed to be graceful with no outage. But actually the result was

314
00:20:08,388 --> 00:20:12,960
a full outage website wasn't working to process orders and we couldn't navigate either.

315
00:20:17,830 --> 00:20:21,780
So we learned a lot from doing that scenario and experiment too.

316
00:20:24,150 --> 00:20:25,700
Now let's see,

317
00:20:28,950 --> 00:20:32,118
the last one that we want to run is a packet loss attack on the

318
00:20:32,124 --> 00:20:36,274
cart service. So let's go over and do that. All righty,

319
00:20:36,402 --> 00:20:38,920
so now we're going to do youre packet loss attack.

320
00:20:39,470 --> 00:20:43,606
Let's go over there. Okay, so here's my shopping

321
00:20:43,638 --> 00:20:47,114
cart. You can see I've actually got 21 items in my cart right

322
00:20:47,152 --> 00:20:50,918
now that I've added ten bikes, one record player,

323
00:20:51,014 --> 00:20:52,990
ten vintage camera lenses.

324
00:20:53,810 --> 00:20:57,246
Let's just add one more airplane. Now what I want to

325
00:20:57,268 --> 00:21:01,150
do is create a new scenario and we're going to call this

326
00:21:01,300 --> 00:21:04,594
packet lost to cart 80%. And we think this

327
00:21:04,632 --> 00:21:07,010
should be actually graceful.

328
00:21:08,070 --> 00:21:11,810
No cart items lost.

329
00:21:14,950 --> 00:21:18,518
Let's go over to Kubernetes and then select

330
00:21:18,684 --> 00:21:21,510
the cart. All right,

331
00:21:21,580 --> 00:21:25,462
cool. Now we'll go to network black hole and run

332
00:21:25,516 --> 00:21:29,850
a black hole attack. We're going to add that to our scenario, save the scenario

333
00:21:31,710 --> 00:21:33,020
and run it.

334
00:21:35,790 --> 00:21:39,034
Okay. So as that starts to get set up right now it's in

335
00:21:39,072 --> 00:21:42,286
pending. We want to go over here and let's see. It should be starting to

336
00:21:42,308 --> 00:21:45,280
run now. All right. Hasn't run yet.

337
00:21:47,410 --> 00:21:51,226
Still in pending. All right. Now there's

338
00:21:51,258 --> 00:21:54,506
some issues. I'm clicking on metal camping mug and it's not letting me load

339
00:21:54,538 --> 00:21:58,258
anything. Clicking on city bike. Nothing happening there. I'm going

340
00:21:58,264 --> 00:22:01,378
to go and click on the online boutique logo at the top to see if

341
00:22:01,384 --> 00:22:03,140
I can get back to the home page. No,

342
00:22:04,630 --> 00:22:08,006
I've got 22 items in my cart though. It still says but

343
00:22:08,028 --> 00:22:09,830
I can't actually go to my cart.

344
00:22:13,930 --> 00:22:18,040
So we do look like we're stuck here. This is definitely another outages situation.

345
00:22:18,410 --> 00:22:21,962
So packet loss to the cart service is causing the entire site

346
00:22:22,016 --> 00:22:25,466
to be unusable. So that's not what we

347
00:22:25,488 --> 00:22:29,206
expected. And then we also now got this 500 error. And we have logs

348
00:22:29,238 --> 00:22:32,560
visible to all users, which is also really not good.

349
00:22:33,010 --> 00:22:35,440
So obviously a lot of things that we learned there.

350
00:22:37,010 --> 00:22:40,522
So what happens here is gremlin is going to abort that attack because it realized

351
00:22:40,586 --> 00:22:44,382
there's a problem and we'll say no, it failed.

352
00:22:44,526 --> 00:22:48,222
A potential incident was uncovered and the incident was not mitigated.

353
00:22:48,366 --> 00:22:51,810
So we got a 500 services error.

354
00:22:53,830 --> 00:22:57,878
I'm going to actually copy this over

355
00:22:57,964 --> 00:23:02,374
into our system to store those results and

356
00:23:02,412 --> 00:23:05,926
click save so we can actually save the error message

357
00:23:06,028 --> 00:23:08,220
and refer back to that later on.

358
00:23:09,550 --> 00:23:13,500
So, yeah, that was not a good situation, but we did learn a lot.

359
00:23:16,910 --> 00:23:20,334
So now, in summary, these are the three different types of

360
00:23:20,372 --> 00:23:21,710
experiments we ran.

361
00:23:23,410 --> 00:23:27,450
First, black holing leads. That was awesome. Graceful degradation,

362
00:23:27,530 --> 00:23:31,774
just like Netflix. Number two, black holing recommended products

363
00:23:31,892 --> 00:23:35,474
major incident not good. Have to do some work to figure

364
00:23:35,512 --> 00:23:39,038
out what the hard coded issues are there between dependencies.

365
00:23:39,214 --> 00:23:42,642
Packet loss to the cart gave us a 500

366
00:23:42,696 --> 00:23:46,326
error, but looks like

367
00:23:46,348 --> 00:23:50,214
we didn't have any data loss to our cart. Let's just

368
00:23:50,252 --> 00:23:52,230
go and check that to confirm.

369
00:23:55,450 --> 00:23:58,902
CArT has 22 items still in it, so no data loss.

370
00:23:58,966 --> 00:24:00,380
So we're all good there.

371
00:24:04,910 --> 00:24:05,820
All right,

372
00:24:08,110 --> 00:24:10,778
so here are some questions you want to ask yourself at the end of all

373
00:24:10,784 --> 00:24:14,378
of your chaos engineering work. Was it expected?

374
00:24:14,554 --> 00:24:17,834
Did we uncover unknown side effects? Was it detected?

375
00:24:17,962 --> 00:24:21,786
We can ensure that our monitoring is correctly configured. Was it mitigated?

376
00:24:21,898 --> 00:24:25,060
Did our systems gracefully degrade like in the first example?

377
00:24:25,830 --> 00:24:29,506
Did we fix the issues? Whether it's code config or process,

378
00:24:29,688 --> 00:24:33,438
can we automate this? We can regularly then run past failures

379
00:24:33,534 --> 00:24:36,846
as exercises to prevent the drift back into failure.

380
00:24:37,038 --> 00:24:40,358
And let's share our results. Prepare an executive summary of what you

381
00:24:40,364 --> 00:24:44,200
learned and what you fixed. You can find this blog post about

382
00:24:44,650 --> 00:24:48,306
what I recommend that you write on the Gremlin website. Internal Chaos

383
00:24:48,338 --> 00:24:51,622
Engineering report ten x reduction in incidents what kind of charts

384
00:24:51,686 --> 00:24:55,754
use? How to explain it to folks? It's really important to share that story.

385
00:24:55,952 --> 00:25:00,266
I also recommend that you join the chaos engineering slack. Go to gremlin.com

386
00:25:00,368 --> 00:25:03,502
slack and as a summary, what should you do next?

387
00:25:03,636 --> 00:25:07,198
Pick one service or application to practice CE on form a

388
00:25:07,204 --> 00:25:11,274
hypothesis. Baseline your metrics. Set client centric slos and slis

389
00:25:11,322 --> 00:25:15,234
per service. Consider the blast radius. Determine what chaos to

390
00:25:15,272 --> 00:25:18,878
inject. Run your chaos engineering scenario. Measure the results

391
00:25:18,894 --> 00:25:22,306
of your chaos engineering scenario. Find and fix issues, or scale the

392
00:25:22,328 --> 00:25:25,666
blast radius of the scenario. This is what I recommend as

393
00:25:25,688 --> 00:25:29,074
you ramp up all of your work when you're doing chaos

394
00:25:29,122 --> 00:25:32,146
engineering. Start by making sure your agents are correctly

395
00:25:32,178 --> 00:25:35,446
installed onboard a team to be able to help work

396
00:25:35,468 --> 00:25:39,142
with you. Run your first scenario. We also offer

397
00:25:39,276 --> 00:25:42,522
Gremlin bootcamps, which are a really cool way to get trained up. Those are free.

398
00:25:42,576 --> 00:25:46,202
Go to gremlin.com bootcamps, then automate your

399
00:25:46,256 --> 00:25:50,026
chaos engineering run game days as a team,

400
00:25:50,208 --> 00:25:53,646
do some scheduled attacks, actually meet with your

401
00:25:53,668 --> 00:25:57,534
executive team to share those results, and then integrate with your

402
00:25:57,572 --> 00:26:01,534
CI CD. So you're actually using chaos engineering more as

403
00:26:01,572 --> 00:26:05,118
a shift left practice. If you go to gremlin.com

404
00:26:05,204 --> 00:26:08,906
bootcamps, you'll find all of the 101 introduction to Chaos engineering

405
00:26:08,938 --> 00:26:12,122
as well as 201 automation CI CD,

406
00:26:12,186 --> 00:26:15,926
the more advanced topics, and go to Gremlin blog to

407
00:26:15,948 --> 00:26:20,054
hear about the Gremlin Chaos champion program. There are lots of amazing people doing

408
00:26:20,092 --> 00:26:23,830
work in this space. Thank you so much for coming along to my talk.

409
00:26:23,900 --> 00:26:26,886
Really appreciate it. You can find me on Twitter if you want to ask me

410
00:26:26,908 --> 00:26:29,540
any questions. Tammy X. Bryant thank you.

