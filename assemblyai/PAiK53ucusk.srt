1
00:00:25,410 --> 00:00:29,250
Hey everyone, so glad to be here in this cool conference

2
00:00:29,410 --> 00:00:33,366
speaking about the way that my team is developing in

3
00:00:33,388 --> 00:00:37,606
the day to day with calling, sharing with you the

4
00:00:37,628 --> 00:00:41,062
experience that we have in the way that we are working on local

5
00:00:41,116 --> 00:00:44,146
development. So before we starting, let me introduce

6
00:00:44,178 --> 00:00:47,574
myself. My name is Matan Cohen and I'm software development team lead

7
00:00:47,612 --> 00:00:51,374
lead at the production platform in Wix and my team is called Dev

8
00:00:51,412 --> 00:00:55,230
Extra production. We are responsible for the dev experience

9
00:00:55,380 --> 00:00:59,690
of the production engineers in the group. We are responsible for some automation

10
00:00:59,850 --> 00:01:03,694
and make the life easier. Ciscds and a bunch of other

11
00:01:03,732 --> 00:01:07,646
stuff before that. I've been in Walkme also for several

12
00:01:07,678 --> 00:01:11,250
other years now. The agenda for today is that we're going to discuss

13
00:01:11,320 --> 00:01:15,414
about Skaffold and Scaffold is this amazing tool made by Google

14
00:01:15,532 --> 00:01:18,514
for local Kubernetes development.

15
00:01:18,642 --> 00:01:22,358
And we're going to discuss about it of course today. And we're going

16
00:01:22,364 --> 00:01:26,546
to discuss also about two great integrations that Scaffold

17
00:01:26,578 --> 00:01:30,278
have, which is helm and Basel, helm for deployment

18
00:01:30,454 --> 00:01:33,786
and Basel as a builder. And we're going to discuss this as

19
00:01:33,808 --> 00:01:37,034
well. Now let's start from

20
00:01:37,152 --> 00:01:41,226
discussing about local development in general. Now I

21
00:01:41,248 --> 00:01:45,134
know that every team or company doesn't really matter, have its own

22
00:01:45,172 --> 00:01:48,718
way how to develop. But in my point of view

23
00:01:48,884 --> 00:01:52,094
you must take into consideration three things. When you

24
00:01:52,132 --> 00:01:55,394
are thinking about the way that you are going to use the tools, you must

25
00:01:55,432 --> 00:01:58,686
have velocity, good experience and a fast feedback

26
00:01:58,718 --> 00:02:03,380
loop. Now if you would put it on a scala between,

27
00:02:03,910 --> 00:02:07,474
the way you are working is exactly like production or

28
00:02:07,512 --> 00:02:11,222
nothing like production. You can think about it in a very general

29
00:02:11,356 --> 00:02:14,150
way in those four options.

30
00:02:14,300 --> 00:02:17,862
First of all, you can run your code just via test. You are running this

31
00:02:17,916 --> 00:02:21,642
exact code that you wrote with the test and you want to

32
00:02:21,696 --> 00:02:25,450
see if it's working or not. A second option is running

33
00:02:25,520 --> 00:02:29,002
the service now. It can be a binary, it can be a dockerized stuff,

34
00:02:29,136 --> 00:02:32,240
whatever, but you are running all the service now.

35
00:02:32,690 --> 00:02:36,080
Something that it's more like production can be like

36
00:02:36,530 --> 00:02:39,806
dockerizing all the environment. When you

37
00:02:39,828 --> 00:02:43,934
want to work on your environment, you are going to work with your

38
00:02:43,972 --> 00:02:47,630
service and maybe some external dependencies like database or message queues

39
00:02:47,710 --> 00:02:50,290
and other stuff. And the Thor option,

40
00:02:50,440 --> 00:02:53,794
it's running all the services with all the stuff with

41
00:02:53,912 --> 00:02:57,526
local full integration, maybe the environment variables would be a little

42
00:02:57,548 --> 00:03:00,870
bit different. Now, when we thought

43
00:03:00,940 --> 00:03:04,182
about which way we should take in order

44
00:03:04,236 --> 00:03:08,566
to develop in Golang in our local development experience,

45
00:03:08,748 --> 00:03:12,186
we wanted to take into those three points that we

46
00:03:12,208 --> 00:03:15,590
discussed about velocity, good experience and fast feed the clue.

47
00:03:15,670 --> 00:03:19,926
But also we want to make it as much as possible like production.

48
00:03:20,038 --> 00:03:23,434
And now this is where Skaffold helped us with

49
00:03:23,472 --> 00:03:26,898
this concept. What is Skaffold? Actually Skaffold

50
00:03:26,934 --> 00:03:30,846
is a local development Kubernetes tool that

51
00:03:30,868 --> 00:03:34,320
you are using in order to run your services.

52
00:03:34,770 --> 00:03:38,406
And basically what it does scuffled

53
00:03:38,458 --> 00:03:42,178
is watching your files and every change that you are made

54
00:03:42,344 --> 00:03:46,506
it's going to continuously deploying

55
00:03:46,638 --> 00:03:50,914
to your local Kubernetes cluster. Now it can be a remote Kubernetes

56
00:03:50,962 --> 00:03:54,374
cluster but today we're going to see it like just

57
00:03:54,412 --> 00:03:57,518
from local Kubernetes cluster in Docker for Mac.

58
00:03:57,714 --> 00:04:01,738
And actually what it does is pay attention that

59
00:04:01,824 --> 00:04:05,418
you changed your service and then is doing

60
00:04:05,584 --> 00:04:09,034
a very fast build of the docker image and it

61
00:04:09,072 --> 00:04:12,558
pushes to your Kubernetes cluster and we're going to see it

62
00:04:12,644 --> 00:04:16,446
in a second. Now when you finish it's automatically clean up

63
00:04:16,468 --> 00:04:20,074
for you. This concept that's called continuous development.

64
00:04:20,122 --> 00:04:24,146
Now I've seen it in several places and

65
00:04:24,168 --> 00:04:28,206
it's like a general concept continuous development.

66
00:04:28,398 --> 00:04:31,918
But this concept, the way that I'm

67
00:04:32,094 --> 00:04:35,254
taking this phrase is to you want to

68
00:04:35,292 --> 00:04:39,062
work continuously when you are developing and get this

69
00:04:39,116 --> 00:04:42,546
fast feedback loop inside the Kubernetes cluster

70
00:04:42,578 --> 00:04:46,214
and you constantly deploying your code and getting

71
00:04:46,252 --> 00:04:49,740
the feedback. So let's see the first demo

72
00:04:50,110 --> 00:04:53,466
very very fast. Let's take a look how scaffold can

73
00:04:53,488 --> 00:04:56,218
help us with a local development experience.

74
00:04:56,384 --> 00:04:59,866
Now before the demo I have installed several stuff. First of

75
00:04:59,888 --> 00:05:03,470
all I installed Docker for Mac and I enabled kubernetes.

76
00:05:03,890 --> 00:05:07,898
Also you can install scaffold very easily with brew, install Skaffold.

77
00:05:07,994 --> 00:05:11,722
And last thing, I installed a Google cloud extension

78
00:05:11,786 --> 00:05:15,954
on my vs code and you can use it also

79
00:05:16,072 --> 00:05:19,826
in Intellij. Okay guys, so as I said before the

80
00:05:19,848 --> 00:05:23,890
talk, I have installed Docker on the machine docker for Mac and

81
00:05:23,960 --> 00:05:27,730
also I enabled kubernetes.

82
00:05:27,890 --> 00:05:31,874
Here I enabled kubernetes. Now let's see scuffled

83
00:05:31,922 --> 00:05:35,494
in action. Now in order to have this quick

84
00:05:35,532 --> 00:05:39,354
template of how scuffled is working, let me

85
00:05:39,392 --> 00:05:42,620
open this cloud code new application.

86
00:05:43,150 --> 00:05:46,778
This is an extension that also was made by Google just to

87
00:05:46,864 --> 00:05:51,178
download a template. So it will be Kubernetes application

88
00:05:51,264 --> 00:05:55,454
of course and we want to have a go guest list. So let

89
00:05:55,492 --> 00:05:59,280
me open this one. Let's give it a sec.

90
00:06:00,850 --> 00:06:04,518
You can see on the bottom right that it's

91
00:06:04,554 --> 00:06:08,318
downloading. Now this is the template

92
00:06:08,414 --> 00:06:13,394
and this is basically a

93
00:06:13,432 --> 00:06:17,406
very simple skaffold project. Now this

94
00:06:17,448 --> 00:06:21,462
skaffold project, as you can see here, have two main

95
00:06:21,596 --> 00:06:24,902
artifacts, which is the backend and the front end.

96
00:06:24,956 --> 00:06:28,394
And if you would go to the Kubernetes manifest, you would see also there is

97
00:06:28,432 --> 00:06:31,580
MongoDB and what scuffle does.

98
00:06:32,990 --> 00:06:37,180
The way that scuffle is working is that you have two

99
00:06:37,950 --> 00:06:42,894
main parts inside scuffle. You have the

100
00:06:42,932 --> 00:06:46,314
build and the deploy. Now the build case

101
00:06:46,442 --> 00:06:50,126
is in the build phase. You need to point where are

102
00:06:50,148 --> 00:06:53,618
your artifacts. Now you are pointing on the back end and the front end.

103
00:06:53,704 --> 00:06:57,234
Cool. Now in order to deploy those artifacts you need to

104
00:06:57,272 --> 00:07:00,994
point on the Kubernetes manifest which

105
00:07:01,032 --> 00:07:03,490
is in the Kubernetes manifest directory.

106
00:07:03,910 --> 00:07:08,246
So in order to unscaffle and see all

107
00:07:08,268 --> 00:07:12,242
the magic, you just need to do scaffold dev and then Scaffold

108
00:07:12,306 --> 00:07:15,862
will start running and building

109
00:07:15,916 --> 00:07:19,786
the artifacts. And also it will deploy to

110
00:07:19,808 --> 00:07:23,914
my local Kubernetes cluster. So let's give it a second and

111
00:07:23,952 --> 00:07:27,980
you can see that those back end and front end

112
00:07:28,350 --> 00:07:32,560
services are being built now became,

113
00:07:33,810 --> 00:07:37,066
now you can see that it's actually building because it's the first time it's

114
00:07:37,098 --> 00:07:40,074
actually building from those containers,

115
00:07:40,202 --> 00:07:44,014
those images, sorry. And then it will deploy the

116
00:07:44,052 --> 00:07:48,034
containers to my local Kubernetes cluster. Now we are

117
00:07:48,072 --> 00:07:52,514
waiting for the deployment to stabilize. Let's give it a second because

118
00:07:52,552 --> 00:07:56,482
it's the first time, it's taking a little bit more time, but next time

119
00:07:56,536 --> 00:07:59,160
it will have catch of course, and it will be very fast.

120
00:08:00,170 --> 00:08:01,800
Let's give it one more second.

121
00:08:04,970 --> 00:08:09,082
Okay, now we can see the logs. We can see that we have

122
00:08:09,136 --> 00:08:12,746
the backend and the front end logs. And also we

123
00:08:12,768 --> 00:08:16,506
can see that MongoDB already deployed. So we can see

124
00:08:16,528 --> 00:08:20,442
it. I have Lance which is local id

125
00:08:20,496 --> 00:08:23,914
for Kubernetes. And you can see in the pods that we have now go

126
00:08:23,952 --> 00:08:27,566
gasp. Backend, front end and Mongodb. And everything is

127
00:08:27,588 --> 00:08:31,870
working. Now let's run on the browser localhost,

128
00:08:33,750 --> 00:08:37,694
which is the service that the front end is listening.

129
00:08:37,742 --> 00:08:40,942
And then we can see that we have this, my guestbook.

130
00:08:41,006 --> 00:08:44,290
So now we can run post

131
00:08:44,360 --> 00:08:47,286
guest book and then you can see that it works.

132
00:08:47,388 --> 00:08:53,746
Now let's

133
00:08:53,778 --> 00:08:57,414
see what scuffle gives us actually. Now if I'm going

134
00:08:57,452 --> 00:09:01,434
to change, for example, you can see here that the

135
00:09:01,472 --> 00:09:05,226
name of the app is called my guestbook. And if

136
00:09:05,248 --> 00:09:08,762
I want to change this, let's search

137
00:09:08,816 --> 00:09:13,262
for this one, my guest book, let's call it Conf

138
00:09:13,396 --> 00:09:16,990
42 guestbook. Now you would see that

139
00:09:17,060 --> 00:09:20,782
stuffel noticed that just

140
00:09:20,836 --> 00:09:24,878
the front end need to be built and it

141
00:09:24,964 --> 00:09:28,082
automatically rebuild our

142
00:09:28,136 --> 00:09:31,534
front end and it's already been deployed to our Kubernetes

143
00:09:31,582 --> 00:09:34,994
cluster. Now if I would go to lens you would see that now

144
00:09:35,032 --> 00:09:38,926
we have a new pod with a new front end production.

145
00:09:38,968 --> 00:09:45,862
It was very fast, I don't know if you catched it. And actually now

146
00:09:45,916 --> 00:09:49,878
we have a new application

147
00:09:50,044 --> 00:09:53,494
with a new deployment and we can refresh. And now we have conf

148
00:09:53,532 --> 00:09:57,130
fourty two. Now we change just the front end. Now let's do something

149
00:09:57,280 --> 00:09:59,260
a little bit different.

150
00:10:00,750 --> 00:10:04,026
Let's add a back end stuff or a method in

151
00:10:04,048 --> 00:10:07,706
the main review. Now let's

152
00:10:07,738 --> 00:10:11,520
see the handlers here. And you can see that it's using this

153
00:10:12,690 --> 00:10:15,620
HTTP handler. So let's create another one.

154
00:10:16,630 --> 00:10:18,930
Let's call it, let's have a ping.

155
00:10:20,230 --> 00:10:24,274
Okay now

156
00:10:24,312 --> 00:10:28,180
you can see that it's automatically paying

157
00:10:29,910 --> 00:10:34,134
to build and it's rebuild for every change that I'm doing.

158
00:10:34,332 --> 00:10:38,040
So let's do this function called

159
00:10:38,810 --> 00:10:42,310
ping and let's just

160
00:10:42,460 --> 00:10:49,998
return second it.

161
00:10:50,044 --> 00:10:56,200
It's

162
00:11:08,320 --> 00:11:12,700
now let's give it a second and

163
00:11:12,770 --> 00:11:14,540
let it finish to be deployed.

164
00:11:16,740 --> 00:11:19,836
And that's it. Now we can do bingo

165
00:11:19,868 --> 00:11:22,640
tooling and it will work as expected.

166
00:11:29,260 --> 00:11:32,828
Okay now it's worked. We can see that probably

167
00:11:32,994 --> 00:11:36,476
it took a second for the service to be stabilized and

168
00:11:36,498 --> 00:11:40,476
that's it. Now it's been redeployed. So the

169
00:11:40,498 --> 00:11:43,796
thing is that when I'm working with scaffold it's

170
00:11:43,848 --> 00:11:47,436
always rebuild the environment that I'm

171
00:11:47,468 --> 00:11:50,704
working. It doesn't really matter if it's front end code or

172
00:11:50,742 --> 00:11:54,096
back end code and even kubernetes stuff. So if

173
00:11:54,118 --> 00:11:57,572
I would go here and I would go to the front end service for example,

174
00:11:57,706 --> 00:12:01,104
and I would change it from 80

175
00:12:01,152 --> 00:12:04,390
80 to for example 3000.

176
00:12:05,320 --> 00:12:08,856
It will also will pay attention to that and it

177
00:12:08,878 --> 00:12:11,560
will be very fast deployed.

178
00:12:11,980 --> 00:12:15,236
You could see that because it was not a change in the artifact.

179
00:12:15,268 --> 00:12:19,080
It was like amazingly fast.

180
00:12:19,230 --> 00:12:22,750
So if I would go now to the browser it

181
00:12:24,000 --> 00:12:26,750
should not be worried. Just a step.

182
00:12:29,360 --> 00:12:32,808
It took it a second to pay attention to

183
00:12:32,834 --> 00:12:34,930
it. Now we can change it to 3000.

184
00:12:36,100 --> 00:12:37,570
What I've done here.

185
00:12:41,060 --> 00:12:43,952
Oh I changed the back end. Sorry for that.

186
00:12:44,086 --> 00:12:46,390
Let's change the front end.

187
00:12:47,800 --> 00:12:51,508
Okay, now it will be, now it will

188
00:12:51,594 --> 00:12:54,804
work. Just one

189
00:12:54,842 --> 00:12:55,430
sec.

190
00:13:03,100 --> 00:13:06,650
And now it's working on local 3000.

191
00:13:07,660 --> 00:13:11,404
And probably you are asking yourself, I can't hear

192
00:13:11,442 --> 00:13:15,196
you but how

193
00:13:15,218 --> 00:13:19,436
can I debug inside

194
00:13:19,538 --> 00:13:23,420
scaffold? Because there is part of the local

195
00:13:23,490 --> 00:13:26,284
experience is to have a great debug skill.

196
00:13:26,412 --> 00:13:29,824
Now you can do

197
00:13:29,942 --> 00:13:33,228
also with Skaffold a remote debug inside the Kubernetes cluster.

198
00:13:33,244 --> 00:13:36,192
And let's see how it looks like you can see you have run on kubernetes.

199
00:13:36,256 --> 00:13:39,876
By the way, if you would go to the vs code, you can check

200
00:13:40,058 --> 00:13:44,390
the configuration. So let's run on kubernetes now.

201
00:13:45,320 --> 00:13:49,508
It will redeploy a new pod

202
00:13:49,604 --> 00:13:52,890
in order to do the remote debugging. So yes,

203
00:13:54,780 --> 00:13:58,616
and I'm going to wait for a second to

204
00:13:58,638 --> 00:14:00,250
wait it to work.

205
00:14:04,170 --> 00:14:07,382
Now it's building the front end again and

206
00:14:07,436 --> 00:14:09,990
it will deploy to my local Kubernetes cluster.

207
00:14:12,910 --> 00:14:16,558
Okay, cool. It's finished with the front end. Now it's building the

208
00:14:16,644 --> 00:14:17,440
back end.

209
00:14:20,930 --> 00:14:24,574
In the meanwhile I would go to the front end app and

210
00:14:24,612 --> 00:14:26,400
let's search for the post.

211
00:14:27,970 --> 00:14:31,314
Let's debug the post process and run from the front end to the back

212
00:14:31,352 --> 00:14:33,940
end. So I would go to the back end as well.

213
00:14:34,630 --> 00:14:40,770
And let's search for the post message

214
00:14:40,840 --> 00:14:44,706
handprint. So I created two breaks.

215
00:14:44,738 --> 00:14:50,582
Now I'm waiting for scuffled for the first time to

216
00:14:50,636 --> 00:14:53,890
build those remote debugging containers,

217
00:14:53,970 --> 00:14:57,466
pods. So we're going to

218
00:14:57,488 --> 00:15:00,890
wait until it's going to say that it was finished.

219
00:15:03,950 --> 00:15:05,740
Let's give it another second.

220
00:15:15,220 --> 00:15:18,492
Okay, now we are doing the mapping

221
00:15:18,556 --> 00:15:22,176
inside the remote debugging and

222
00:15:22,278 --> 00:15:25,584
hopefully now everything will be working. Now let's try

223
00:15:25,782 --> 00:15:30,000
to add something here. Post yesbook

224
00:15:31,060 --> 00:15:34,550
and the debug didn't started yet. Let's see why.

225
00:15:38,330 --> 00:15:39,560
Let's try again.

226
00:15:42,270 --> 00:15:45,642
Okay. And now you can see that I'm on the front end

227
00:15:45,696 --> 00:15:49,114
app and I have a breakpoint and

228
00:15:49,152 --> 00:15:53,398
now I can jump over the lines and debug

229
00:15:53,494 --> 00:15:57,486
like I wanted to. And if I would go play I

230
00:15:57,508 --> 00:16:00,814
would go to the backend app as you can see now, giving me

231
00:16:00,852 --> 00:16:05,182
the ability to do a debugging cross

232
00:16:05,246 --> 00:16:07,300
microservices, which is amazing.

233
00:16:09,590 --> 00:16:13,074
And this is one of the things that SafO gives

234
00:16:13,112 --> 00:16:16,978
me on my local experience working

235
00:16:17,064 --> 00:16:17,940
with. Go.

236
00:16:19,990 --> 00:16:22,900
Cool. So let's continue.

237
00:16:25,030 --> 00:16:28,326
I'm just playing up the stuff and also in

238
00:16:28,348 --> 00:16:32,806
the terminal here and clean up everything when

239
00:16:32,828 --> 00:16:36,634
you are finishing with coupled is

240
00:16:36,672 --> 00:16:40,186
cleaning up for you. So it's very tools. You can see that everything is

241
00:16:40,208 --> 00:16:42,380
clean when I finish.

242
00:16:43,070 --> 00:16:46,866
Cool. Actually what scuffled

243
00:16:46,918 --> 00:16:50,574
gave us, the way scuffled works

244
00:16:50,692 --> 00:16:54,106
is it's pluggable. Now I don't

245
00:16:54,138 --> 00:16:58,206
know if you notice, but the parts in the scuffled yaml

246
00:16:58,238 --> 00:17:02,162
file are very easy to

247
00:17:02,216 --> 00:17:06,082
extend. For example, if you want to use another build

248
00:17:06,136 --> 00:17:10,078
tool, it's like Skaffold gives you the ability

249
00:17:10,254 --> 00:17:13,362
to choose which build tool you want to use.

250
00:17:13,416 --> 00:17:17,110
Now you can use the local docker demo that you have, like I just did.

251
00:17:17,260 --> 00:17:21,586
But you can use other ways to build your artifacts,

252
00:17:21,618 --> 00:17:25,354
like Bazel for example. And we're going to see it later on.

253
00:17:25,552 --> 00:17:29,146
Also, it gives you a few options how

254
00:17:29,168 --> 00:17:33,126
you want to deploy your artifacts

255
00:17:33,158 --> 00:17:36,686
through the Kubernetes that you are using now. It can be in Kubectl like we

256
00:17:36,708 --> 00:17:40,286
just saw, but we can use helm for example. And we're going to discuss this

257
00:17:40,308 --> 00:17:43,150
as well. So scaffold is very pluggable,

258
00:17:44,290 --> 00:17:48,034
which you can use it in different places, in different

259
00:17:48,072 --> 00:17:52,366
teams in other ways, which is very useful.

260
00:17:52,558 --> 00:17:55,874
Now let's say that you have this microservice that you are working

261
00:17:55,912 --> 00:17:59,270
on, but you need an external dependency, for example, you need the message

262
00:17:59,340 --> 00:18:02,966
box or you need for example a

263
00:18:02,988 --> 00:18:06,566
mysql database or something like that. And this

264
00:18:06,588 --> 00:18:09,270
is where helm getting into the picture.

265
00:18:09,870 --> 00:18:13,674
Now we're going to discuss how we can use helm to

266
00:18:13,712 --> 00:18:18,090
integrate with Skaffold in order to help us in the deployment phase.

267
00:18:18,670 --> 00:18:22,358
So what is helm in general? Helm is

268
00:18:22,384 --> 00:18:26,862
the Kubernetes package manager that

269
00:18:26,916 --> 00:18:30,414
is commonly used when you are using

270
00:18:30,452 --> 00:18:33,150
Kubernetes. Actually what it means,

271
00:18:33,300 --> 00:18:36,926
like you can do NPM, install something or

272
00:18:36,948 --> 00:18:40,694
use other package managers like Nugget and C sharp or pin Python

273
00:18:40,762 --> 00:18:44,178
doesn't really matter. You can use helm for kubernetes. So you

274
00:18:44,184 --> 00:18:47,574
can do like helm install MySQl. And then

275
00:18:47,612 --> 00:18:51,394
you have MySQl in your Kubernetes

276
00:18:51,442 --> 00:18:55,382
cluster, which is very cool. This is a very high level of

277
00:18:55,436 --> 00:18:59,494
helm. Now let's see how Helm can

278
00:18:59,532 --> 00:19:03,206
integrate with scuffled and how easy it is

279
00:19:03,388 --> 00:19:06,410
working with scuffled and Helm.

280
00:19:07,710 --> 00:19:11,562
By the way, for those of you who don't know helm, there is something called

281
00:19:11,616 --> 00:19:15,050
Helm Hub, which you change the name to Artifact hub.

282
00:19:15,210 --> 00:19:19,146
And here you can search for all the artifacts

283
00:19:19,178 --> 00:19:22,654
that you want to install via helm. For example, we're going to go

284
00:19:22,692 --> 00:19:26,180
for PostgreSQL for example.

285
00:19:26,550 --> 00:19:32,494
And you can see here if you want to use Helm,

286
00:19:32,542 --> 00:19:36,318
you can just do helm repo edit for this repo

287
00:19:36,334 --> 00:19:40,230
and then you can do helm installed for example, for that.

288
00:19:40,380 --> 00:19:44,086
So now let's write this in

289
00:19:44,108 --> 00:19:47,602
our Skaffold project that we just created.

290
00:19:47,746 --> 00:19:51,434
So I'm returning to the project that we

291
00:19:51,472 --> 00:19:55,322
just saw. And now we can inside

292
00:19:55,376 --> 00:19:58,746
the Skaffold here, let's have another file. Let's call

293
00:19:58,768 --> 00:20:01,660
it Skaffold services,

294
00:20:02,290 --> 00:20:06,526
yaml for example. And here I

295
00:20:06,548 --> 00:20:10,254
have an extension here for writing and stuff.

296
00:20:10,372 --> 00:20:12,720
It's also the cloud code.

297
00:20:14,210 --> 00:20:18,014
Now I would go for shuffled

298
00:20:18,062 --> 00:20:22,046
Helm deployment and you can see that it gave me a cool template

299
00:20:22,078 --> 00:20:26,034
out of the box. So let's remove all of this

300
00:20:26,152 --> 00:20:29,526
for now. And the chart path would

301
00:20:29,548 --> 00:20:32,966
be. No, the values, I don't need those values as

302
00:20:32,988 --> 00:20:36,790
well. And also I don't need this build artifact.

303
00:20:37,210 --> 00:20:41,240
I just want to have here box

304
00:20:43,850 --> 00:20:47,626
and the chart path will be. Let's take it

305
00:20:47,648 --> 00:20:48,540
from here.

306
00:20:50,830 --> 00:20:54,138
I already done this before the talk,

307
00:20:54,224 --> 00:20:57,918
so after you run it, it will be very easy to use. So we're going

308
00:20:57,924 --> 00:21:02,666
to use it here. And we should say that this chart is denote.

309
00:21:02,858 --> 00:21:06,386
So let's say true. Now in

310
00:21:06,408 --> 00:21:09,618
order to use it, we can just run

311
00:21:09,704 --> 00:21:13,838
skaffold. Now I will not run Skaffold

312
00:21:13,854 --> 00:21:17,060
dev this time. Now I will just do.

313
00:21:19,270 --> 00:21:22,358
Now we can use scuffled run. Now the difference between

314
00:21:22,444 --> 00:21:25,794
scuffle dev and scuffled run is scuffled dev is like watching your files,

315
00:21:25,842 --> 00:21:28,870
but scuffled run is not watching your files.

316
00:21:29,210 --> 00:21:32,666
It's like one time deployment. So you

317
00:21:32,688 --> 00:21:37,340
can do scaffold run to Skaffold services.

318
00:21:41,230 --> 00:21:46,430
Skaffold service yaml

319
00:21:47,170 --> 00:21:51,278
minus f. If you are not using scuffle yaml, we must

320
00:21:51,444 --> 00:21:56,510
pass the minus fuffle

321
00:21:58,450 --> 00:21:59,920
run minus f.

322
00:22:01,830 --> 00:22:05,646
And now you would see that scuffled is using helm to deploy

323
00:22:05,678 --> 00:22:08,894
this service to my local Kubernetes cluster.

324
00:22:09,022 --> 00:22:12,390
Now you can see that this is a regular helmet install

325
00:22:12,460 --> 00:22:16,278
if you're familiar with it. And what can actually

326
00:22:16,364 --> 00:22:20,258
reduce is actually connecting

327
00:22:20,434 --> 00:22:24,298
to this very easily. And for example,

328
00:22:24,384 --> 00:22:27,562
if we want to have a few other stuff,

329
00:22:27,616 --> 00:22:31,066
let's say for example that I'm using Kafka, for example,

330
00:22:31,248 --> 00:22:35,002
so I can have here Kafka and I

331
00:22:35,056 --> 00:22:39,322
think it would be kafta again. And also if you are using redis,

332
00:22:39,466 --> 00:22:43,006
you can do this as well. I mean, you should change

333
00:22:43,028 --> 00:22:46,338
the parameters and pass maybe a different

334
00:22:46,424 --> 00:22:49,762
port or you want to have some reverse proxy for the

335
00:22:49,816 --> 00:22:53,666
URL or something, but you get the idea. So here

336
00:22:53,768 --> 00:22:56,500
you can have redis for example.

337
00:22:58,730 --> 00:23:02,278
And if I would run Skaffold run again, now I'm going

338
00:23:02,284 --> 00:23:05,846
to have Redis Kafka and process like

339
00:23:05,948 --> 00:23:09,334
very easily, which is giving me so much

340
00:23:09,372 --> 00:23:13,274
power when I'm working locally. So if I would

341
00:23:13,312 --> 00:23:17,878
check this inside lens, you would see that Kafka

342
00:23:17,974 --> 00:23:21,974
is starting and zookeeper as well, and also Redis

343
00:23:22,102 --> 00:23:25,454
master and redisplay. Of course you must do some fine

344
00:23:25,492 --> 00:23:30,366
tuning to the parameters that you are passing. But this

345
00:23:30,388 --> 00:23:34,154
is the general idea of how scuffled integrating with helm,

346
00:23:34,282 --> 00:23:38,402
which can help us a lot in the

347
00:23:38,536 --> 00:23:43,122
way we are working with

348
00:23:43,176 --> 00:23:47,506
external stuff. Now let's clean everything here.

349
00:23:47,688 --> 00:23:51,174
We can run scuffled instead of run. We can run

350
00:23:51,292 --> 00:23:55,218
scuffle delete. Scuffle delete

351
00:23:55,314 --> 00:23:59,110
minus f scuffle.

352
00:24:02,350 --> 00:24:06,554
Cool. Now it will clean up everything and you will see that all

353
00:24:06,592 --> 00:24:10,122
the things here are going to be removed in a few

354
00:24:10,176 --> 00:24:14,442
seconds. You can see that the pods are

355
00:24:14,576 --> 00:24:17,130
terminating and we finished.

356
00:24:18,050 --> 00:24:22,142
Cool. So after we saw how

357
00:24:22,196 --> 00:24:25,554
Skaffold is integrating with helm, let's check

358
00:24:25,592 --> 00:24:29,346
out another amazing tool called Bazel and

359
00:24:29,368 --> 00:24:32,340
how it's integrating with staff. Now,

360
00:24:32,950 --> 00:24:36,734
Bazel in general is agnostic

361
00:24:36,782 --> 00:24:40,054
build tool and also by google. And I think

362
00:24:40,092 --> 00:24:43,270
in Google, internally in Google, it's called Bazel.

363
00:24:43,850 --> 00:24:47,494
And what actually Bazel gives us is

364
00:24:47,532 --> 00:24:51,330
this very efficient way that it builds

365
00:24:51,410 --> 00:24:54,470
the artifacts. And we're going to see it in a few seconds.

366
00:24:54,630 --> 00:24:57,978
In very general idea, you're going

367
00:24:57,984 --> 00:25:01,514
to have on each directory, a basel file that you can

368
00:25:01,552 --> 00:25:05,086
connect between the artifacts, each directory having its own

369
00:25:05,108 --> 00:25:09,226
bazel file. And then when you want to build the artifact,

370
00:25:09,338 --> 00:25:12,666
it's building it very efficiently.

371
00:25:12,778 --> 00:25:16,274
And in the tree that you can see here, it has a cache for

372
00:25:16,312 --> 00:25:19,698
each layer in the tree, meaning that if you already

373
00:25:19,784 --> 00:25:22,850
have it cached, Bazel will not build it again.

374
00:25:23,000 --> 00:25:26,386
And we are using Basel a

375
00:25:26,408 --> 00:25:30,020
lot in wix. And for example, there are some

376
00:25:30,790 --> 00:25:34,866
groups that most of the groups in wix on the back end using Scala.

377
00:25:34,978 --> 00:25:39,414
And when they moved to Basel, it changed the

378
00:25:39,452 --> 00:25:42,522
time that they are doing the CI of building

379
00:25:42,576 --> 00:25:46,010
all the artifacts and the cv from hours to minutes.

380
00:25:46,160 --> 00:25:49,322
So it's amazing in a very

381
00:25:49,376 --> 00:25:53,614
large monorepos and big

382
00:25:53,652 --> 00:25:57,440
repos. So the things we're going to discuss

383
00:25:58,130 --> 00:26:02,878
now is that what buzzer gives us in

384
00:26:02,884 --> 00:26:07,250
the local dev experience, why it's helpful. So let's say that we have

385
00:26:07,400 --> 00:26:11,506
two services, right? We have service one and service two. Very easy.

386
00:26:11,688 --> 00:26:15,794
Now, service one is dependent on very

387
00:26:15,912 --> 00:26:19,554
simple sum package, and service two is dependent

388
00:26:19,602 --> 00:26:22,950
on some and more packages.

389
00:26:23,290 --> 00:26:26,520
Now, if I'm changing just service one,

390
00:26:26,890 --> 00:26:30,434
so we saw that before, Skaffold already knows

391
00:26:30,562 --> 00:26:34,426
to change service one now. And if I change service two

392
00:26:34,528 --> 00:26:37,834
again, it will rebuild service two and

393
00:26:37,872 --> 00:26:41,862
redeploy. But what's going to happen if I'm

394
00:26:41,926 --> 00:26:45,680
changing the dependencies of those services,

395
00:26:46,210 --> 00:26:49,422
how skaffold or any other tools is

396
00:26:49,476 --> 00:26:53,386
known, which service you need to build. So, for example, if I'm

397
00:26:53,418 --> 00:26:57,026
changing the mole package, so of course I

398
00:26:57,048 --> 00:27:01,186
need to build just service two. And if

399
00:27:01,208 --> 00:27:05,314
I'm changing the code of the sum package, then I should

400
00:27:05,512 --> 00:27:10,242
rebuild service one and service two. And because

401
00:27:10,296 --> 00:27:14,454
of the power of Bazel, Bazel knows because of all

402
00:27:14,492 --> 00:27:18,374
the targets, which packages and services I

403
00:27:18,412 --> 00:27:21,754
should build in the local

404
00:27:21,792 --> 00:27:24,986
development. And this has improved dramatically the

405
00:27:25,008 --> 00:27:28,266
local experience of the

406
00:27:28,288 --> 00:27:31,690
way that I'm working. So, let's see in action,

407
00:27:32,130 --> 00:27:35,742
skaffold and Basel together. Okay, so let's see how

408
00:27:35,796 --> 00:27:39,866
Skaffold is integrating with Bazel.

409
00:27:40,058 --> 00:27:44,000
So, before the demo I created, this very simple project

410
00:27:44,610 --> 00:27:48,654
includes Basel and Skaffold.

411
00:27:48,782 --> 00:27:52,322
So let's see how this project tools like we have again,

412
00:27:52,376 --> 00:27:55,986
this skaffold file, which contains the main parts, which is

413
00:27:56,008 --> 00:28:00,126
build and deploy, and the deploy is

414
00:28:00,248 --> 00:28:03,702
via Kubectl and the build. Now,

415
00:28:03,756 --> 00:28:06,790
as you can see here, it's made via buzzword.

416
00:28:07,450 --> 00:28:11,340
Now let's open the directories and see

417
00:28:12,030 --> 00:28:15,686
what this project contains. So, as we saw in the slide,

418
00:28:15,718 --> 00:28:19,482
we have two services and two packages. Which service one is

419
00:28:19,536 --> 00:28:22,410
dependent on the sum package.

420
00:28:23,170 --> 00:28:26,622
Very easy. One and service two. It depends on

421
00:28:26,676 --> 00:28:30,126
mold and sum. Now, as you can

422
00:28:30,148 --> 00:28:33,914
see here, each directory holds a bazel file, which declare

423
00:28:33,962 --> 00:28:37,380
the targets inside the directory. You can see here,

424
00:28:38,230 --> 00:28:41,490
we will not cover it in this talk, but in general,

425
00:28:41,560 --> 00:28:47,854
you are not writing those bazel files. It's generating with generating

426
00:28:47,902 --> 00:28:52,902
it for you. Now, if I want to run this

427
00:28:52,956 --> 00:28:56,294
project, we will do as we've done before, stuff like that. As you can see

428
00:28:56,332 --> 00:28:59,538
here, the service one and service two already

429
00:28:59,724 --> 00:29:01,690
been in the cache,

430
00:29:03,070 --> 00:29:06,922
and that's it. They have been deployed. Now, if I change

431
00:29:06,976 --> 00:29:08,220
in service one,

432
00:29:10,990 --> 00:29:14,762
we know that just service one needs to be redeployed.

433
00:29:14,826 --> 00:29:18,442
So you can see here that service one is now rebuild

434
00:29:18,506 --> 00:29:22,302
and will redeploy again. But what's going to happen?

435
00:29:22,436 --> 00:29:25,966
And it's going to change the dependency,

436
00:29:26,078 --> 00:29:30,014
the modules, and this is where Bazel

437
00:29:30,142 --> 00:29:33,842
can help us and in other places in the local

438
00:29:33,896 --> 00:29:37,654
experience, of course. So let's change this

439
00:29:37,692 --> 00:29:40,918
package here,

440
00:29:41,084 --> 00:29:44,822
and let's see what's happening. Because service one

441
00:29:44,876 --> 00:29:48,290
and service two is dependent on this package.

442
00:29:48,450 --> 00:29:51,706
Scaffold knows to build them. And this is

443
00:29:51,728 --> 00:29:55,340
where Basel gives the strength to scaffold in this situation.

444
00:29:56,190 --> 00:29:59,734
And if I would change the multiply,

445
00:29:59,862 --> 00:30:03,550
for example, you would see

446
00:30:03,700 --> 00:30:07,354
that only service two that rely

447
00:30:07,402 --> 00:30:10,650
on the multiple packages

448
00:30:10,810 --> 00:30:14,650
will be changed. And this gives

449
00:30:14,740 --> 00:30:18,542
a lot of strength to scaffold

450
00:30:18,686 --> 00:30:21,140
and to the local development experience.

451
00:30:21,670 --> 00:30:25,614
So with Skaffold, it feels like you're writing coin

452
00:30:25,662 --> 00:30:29,250
production. I mean, if before people worked with

453
00:30:29,320 --> 00:30:32,526
dockerizing their environments in order to be like production,

454
00:30:32,558 --> 00:30:36,478
now we can actually work with Netflix and helm

455
00:30:36,574 --> 00:30:40,378
and some other tools that can make my local experience else

456
00:30:40,544 --> 00:30:44,054
like production, which give me a lot of strength.

457
00:30:44,182 --> 00:30:46,620
So thank you very much for your time.

458
00:30:47,950 --> 00:30:51,446
You can ask me questions on Twitter.

459
00:30:51,638 --> 00:30:55,226
I will be glad to answer. And that's it. Thank you

460
00:30:55,248 --> 00:30:55,594
very much,

