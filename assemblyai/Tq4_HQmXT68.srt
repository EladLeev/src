1
00:01:41,810 --> 00:01:45,614
Hello everyone, I'm really happy to be here. Really happy

2
00:01:45,652 --> 00:01:49,162
to talk to you all and let's enjoy this session,

3
00:01:49,226 --> 00:01:51,440
this conference, and let's start.

4
00:01:52,130 --> 00:01:55,630
So in this session I would like to talk with you

5
00:01:55,700 --> 00:01:59,102
about the next topic, how to build low cost

6
00:01:59,156 --> 00:02:01,950
CSD solution on top of AWS.

7
00:02:02,370 --> 00:02:06,854
Okay, this talk will describe my

8
00:02:06,892 --> 00:02:09,080
own story and my own experience.

9
00:02:10,010 --> 00:02:13,730
And you can take it from here to wherever

10
00:02:13,810 --> 00:02:17,480
you want. You will see what I achieved here and

11
00:02:18,350 --> 00:02:22,006
what were my issues through my journey.

12
00:02:22,198 --> 00:02:23,740
So before we start,

13
00:02:26,270 --> 00:02:30,038
I would like to introduce myself. So, my name is Valera

14
00:02:30,054 --> 00:02:34,314
Bronson. As I said before, I am head of DevOps at Memphis

15
00:02:34,362 --> 00:02:37,870
dev Memphisdev. It's an open source real time

16
00:02:37,940 --> 00:02:41,582
data processing platform. Okay, in short, what we

17
00:02:41,636 --> 00:02:45,806
do, we are building a full ecosystem for in upstreaming

18
00:02:45,838 --> 00:02:49,074
use cases. You can read more in our website.

19
00:02:49,272 --> 00:02:53,554
I am 31 years old, married with two wonderful kids,

20
00:02:53,752 --> 00:02:57,026
more than ten years in it world.

21
00:02:57,128 --> 00:03:00,834
Okay. Through my career I study as a Linux

22
00:03:00,882 --> 00:03:04,658
administrator, storage administrator consultant,

23
00:03:04,754 --> 00:03:07,282
senior consultant, solution architect,

24
00:03:07,346 --> 00:03:10,854
and where I am today, ahead of DevOps at Memphisdev.

25
00:03:10,982 --> 00:03:14,442
Okay, so enough about myself,

26
00:03:14,576 --> 00:03:18,294
let's start with the story. Okay, this is my Jenkins

27
00:03:18,342 --> 00:03:23,374
story and I will try to explain

28
00:03:23,492 --> 00:03:27,278
it and tell it in the best way. Hope it will be

29
00:03:27,444 --> 00:03:30,750
clear. So how did it start? Okay,

30
00:03:30,820 --> 00:03:34,418
we are startup and when we started

31
00:03:34,504 --> 00:03:37,758
we want to do it quick and dirty.

32
00:03:37,854 --> 00:03:41,458
Okay, that's the exact explanation. Quick.

33
00:03:41,624 --> 00:03:45,206
We need to run fast to do AWS much

34
00:03:45,228 --> 00:03:47,958
as possible in a small amount of time.

35
00:03:48,124 --> 00:03:51,382
So in some point we looked

36
00:03:51,436 --> 00:03:54,710
for an automation tool, some CI CD tool,

37
00:03:54,860 --> 00:03:57,750
and our specific request.

38
00:03:58,110 --> 00:04:01,900
With our specific request we understood that Jenkins can be

39
00:04:06,990 --> 00:04:10,140
the best and quick and dirty solution. Okay,

40
00:04:10,530 --> 00:04:13,338
so we want Jenkins,

41
00:04:13,514 --> 00:04:16,894
we install it, and we're starting to use it without

42
00:04:17,012 --> 00:04:20,766
any deep dive, without any deep dive configurations and

43
00:04:20,788 --> 00:04:24,270
so on. Just as it is, let's use it.

44
00:04:24,420 --> 00:04:28,018
And in the first time it works good.

45
00:04:28,104 --> 00:04:31,842
Okay. But through our

46
00:04:31,896 --> 00:04:35,182
journey we understood

47
00:04:35,246 --> 00:04:38,514
that the initial setup is not working so

48
00:04:38,552 --> 00:04:41,800
well, the build taken so much more time,

49
00:04:42,490 --> 00:04:46,486
the disk getting full too quick.

50
00:04:46,588 --> 00:04:50,314
So we started to upgrade our

51
00:04:50,432 --> 00:04:53,770
Jenkins instance. And then we came

52
00:04:53,840 --> 00:04:57,114
to what I call Jenkins ninja, a really,

53
00:04:57,152 --> 00:05:00,206
really powerful instance with a lot of

54
00:05:00,228 --> 00:05:05,226
cpu, a lot of ram that can do a lot of workloads,

55
00:05:05,418 --> 00:05:09,422
heavy workloads in the same time. But through

56
00:05:09,476 --> 00:05:13,186
the time we get to

57
00:05:13,208 --> 00:05:16,702
the new issues, to the new obstacles that we need to solve

58
00:05:16,846 --> 00:05:18,420
and what we found,

59
00:05:20,310 --> 00:05:23,778
what was bothering me as a DevOps engineer in

60
00:05:23,784 --> 00:05:27,670
the company, and what I wanted to achieve

61
00:05:28,170 --> 00:05:31,766
in the future. So let's start. The first

62
00:05:31,868 --> 00:05:35,234
issue is of course single point of failure,

63
00:05:35,362 --> 00:05:38,522
you can understand it by yourself. Okay? I have only

64
00:05:38,576 --> 00:05:42,506
one machine, only one instance, and how much it

65
00:05:42,528 --> 00:05:45,930
can be powerful as far as

66
00:05:46,000 --> 00:05:49,500
I want, but still, it's one. And when

67
00:05:50,450 --> 00:05:53,950
something unexpected happened during the build

68
00:05:54,020 --> 00:05:57,630
of one of the pipelines, it will affect all the rest.

69
00:05:57,780 --> 00:06:02,174
And it's okay when it happened in day to day work,

70
00:06:02,292 --> 00:06:06,126
but it's less okay when it happens,

71
00:06:06,228 --> 00:06:10,066
when you are in the middle of the release and you are pushing your comes

72
00:06:10,168 --> 00:06:13,906
to the production, to the customers. Okay? So we

73
00:06:13,928 --> 00:06:17,670
don't want this scenario to happen.

74
00:06:17,820 --> 00:06:22,614
We need to think how

75
00:06:22,652 --> 00:06:25,560
to be more,

76
00:06:26,810 --> 00:06:30,394
how to, sorry, excuse me. We don't want this

77
00:06:30,432 --> 00:06:34,170
single point of failure happen. That's it. That's the point. Okay?

78
00:06:34,240 --> 00:06:38,758
And when we have only one Jenkins instance,

79
00:06:38,854 --> 00:06:42,522
we cannot run build in a parallel

80
00:06:42,586 --> 00:06:45,790
way. No parallelism, okay?

81
00:06:45,940 --> 00:06:48,800
And it's obvious,

82
00:06:49,650 --> 00:06:53,966
in case we have some build that will take all our resources,

83
00:06:54,158 --> 00:06:58,178
there will be no resources for other builds. And you

84
00:06:58,184 --> 00:07:01,810
can take it to every scenario. You want

85
00:07:01,960 --> 00:07:05,734
mongodb that catch the port, and another build

86
00:07:05,772 --> 00:07:09,974
that use another mongodb instance cannot run

87
00:07:10,012 --> 00:07:13,494
on the same node because the port is already in

88
00:07:13,532 --> 00:07:15,640
use, and so on.

89
00:07:17,050 --> 00:07:20,710
And as you can understand, the first two

90
00:07:20,780 --> 00:07:24,802
points already lead us to the third one. We need monitoring,

91
00:07:24,866 --> 00:07:28,440
and we need to monitor everything, and we need to be

92
00:07:28,810 --> 00:07:32,238
with the eyes on the product

93
00:07:32,404 --> 00:07:36,174
every day, every single moment, because with this

94
00:07:36,212 --> 00:07:40,074
Jenkins instance is production

95
00:07:40,122 --> 00:07:44,180
for us. For me, as a DevOps engineer in the company,

96
00:07:49,190 --> 00:07:53,154
I need to have it up and running all the time,

97
00:07:53,352 --> 00:07:57,046
and I don't want to do this kind of job on

98
00:07:57,068 --> 00:08:00,566
my daily basis. I want to be sure that my Jenkins is running

99
00:08:00,668 --> 00:08:04,520
all the time, no matter what, okay? And of course,

100
00:08:05,690 --> 00:08:09,530
we are growing, and the bill is growing with us.

101
00:08:09,680 --> 00:08:13,354
Okay? So now when we understand

102
00:08:13,552 --> 00:08:17,114
what are the problems, let's see how

103
00:08:17,232 --> 00:08:20,682
we can solve them and what we want to achieve. So,

104
00:08:20,736 --> 00:08:23,966
first of all, I want to be high available. I want to

105
00:08:23,988 --> 00:08:28,190
be sorry. Ha. All the time. All the time, no matter

106
00:08:28,260 --> 00:08:31,946
what. In case one of the pipelines is killing

107
00:08:31,978 --> 00:08:35,906
my node, I want to kill this node and run the pipeline on

108
00:08:35,928 --> 00:08:38,370
another node without any regrets,

109
00:08:41,110 --> 00:08:44,274
without any thought about what. Maybe I have

110
00:08:44,312 --> 00:08:47,814
something on this particular node that I need for my next build. I don't care.

111
00:08:47,932 --> 00:08:51,606
I want to destroy it and create another one. This is a

112
00:08:51,628 --> 00:08:55,334
chain in my perspective, okay? In this specific scenario, I want

113
00:08:55,372 --> 00:08:59,382
to run parallel, I want faster build. I want to reduce

114
00:08:59,446 --> 00:09:03,590
time to market. I want to run AWS, much aws parallel

115
00:09:03,670 --> 00:09:07,946
as I can, as my setup can

116
00:09:08,048 --> 00:09:11,862
afford. If I need to run four builds,

117
00:09:11,926 --> 00:09:15,486
then do the same. I want to run four builds in

118
00:09:15,508 --> 00:09:19,374
the same time. I don't want to wait until each

119
00:09:19,412 --> 00:09:22,558
one of them is end and then run the second one, the third one,

120
00:09:22,644 --> 00:09:28,420
the fourth one. Okay? I don't want it. I want in parallel another

121
00:09:29,190 --> 00:09:31,730
goal that I wanted to achieve.

122
00:09:32,390 --> 00:09:36,006
Eventually we achieve this. I want

123
00:09:36,028 --> 00:09:39,314
to run a dedicated compute node per pipeline

124
00:09:39,362 --> 00:09:43,080
type per pipeline logic. Okay, I'll explain.

125
00:09:43,850 --> 00:09:47,766
Imagine yourself, I have one pipeline that perform

126
00:09:47,868 --> 00:09:51,798
all the workloads, that are massive workloads

127
00:09:51,814 --> 00:09:55,498
that have a lot of throughput, a lot of cpu usage and drum and

128
00:09:55,504 --> 00:09:59,062
so on. But on the other hand, on a daily basis

129
00:09:59,126 --> 00:10:02,878
I have some cron jobs that push data to databases or get

130
00:10:02,964 --> 00:10:05,870
some backup from my GitHub repositories.

131
00:10:06,450 --> 00:10:11,082
I don't need those kind of highperformance

132
00:10:11,146 --> 00:10:14,946
machine from the first pipeline to

133
00:10:14,968 --> 00:10:19,170
be involved in the second pipeline. The second pipeline can be run on

134
00:10:19,240 --> 00:10:22,574
some free tier, maybe t two micro t three medium

135
00:10:22,622 --> 00:10:26,422
or something like that. Okay? So I want some kind of

136
00:10:26,476 --> 00:10:29,542
logic that will see which pipeline I

137
00:10:29,596 --> 00:10:33,574
run, and after that trigger the proper

138
00:10:33,692 --> 00:10:37,414
instance into that pipeline and you will see

139
00:10:37,452 --> 00:10:40,806
how we achieve this. And of course the build.

140
00:10:40,908 --> 00:10:44,134
Okay, so let's talk a little more

141
00:10:44,172 --> 00:10:47,674
about the build. You can make all the calculation I did

142
00:10:47,712 --> 00:10:51,470
here by yourself. You have AWS

143
00:10:51,810 --> 00:10:55,374
calculator pricing calculator, and you can use it

144
00:10:55,412 --> 00:10:59,626
and see the numbers by yourself. But let's take my scenario,

145
00:10:59,818 --> 00:11:03,806
scenario number one, before the optimization, my instant type.

146
00:11:03,908 --> 00:11:07,598
I eventually came to 32 vcpus and

147
00:11:07,684 --> 00:11:09,870
64 ram.

148
00:11:11,010 --> 00:11:14,474
And the next step was already 64 vcpu.

149
00:11:14,522 --> 00:11:19,526
I needed this machine because my

150
00:11:19,548 --> 00:11:22,854
pipelines took all the

151
00:11:22,892 --> 00:11:26,550
cpus and all the run from the server on each run,

152
00:11:26,620 --> 00:11:29,814
in each run, in each build. Okay, so this

153
00:11:29,852 --> 00:11:34,294
machine was on demand. And I will explain why the

154
00:11:34,332 --> 00:11:39,654
Jenkins, the Jenkins ninja run on

155
00:11:39,692 --> 00:11:43,566
it's monthly usage. Okay, and aws, you can see this

156
00:11:43,588 --> 00:11:47,294
is my estimated cost and that time before

157
00:11:47,412 --> 00:11:50,766
I jump to the next level, to the next instance, type the

158
00:11:50,788 --> 00:11:53,790
664 vcpus. I didn't want it.

159
00:11:53,940 --> 00:11:57,790
So this why we started to find to looking for another solution.

160
00:11:58,130 --> 00:12:01,342
And you can ask why not

161
00:12:01,396 --> 00:12:04,766
onspot instances and okay, these are

162
00:12:04,788 --> 00:12:09,110
the numbers for the onspot instances. But you know the merfilow,

163
00:12:09,690 --> 00:12:13,478
when you need it, it will happen. And I mean when you are in the

164
00:12:13,484 --> 00:12:15,960
middle of the release and something happened,

165
00:12:16,970 --> 00:12:20,182
your machine will be destroyed. Because in

166
00:12:20,236 --> 00:12:23,882
some reason this spot instance is there for

167
00:12:24,016 --> 00:12:27,974
someone else. Okay, it will happen in the middle of your release.

168
00:12:28,022 --> 00:12:32,494
Believe me, this is how Merfield low works. And I

169
00:12:32,532 --> 00:12:35,280
was there okay. You don't want to be there.

170
00:12:35,970 --> 00:12:39,806
So this is my scenario, scenario number one, before the

171
00:12:39,828 --> 00:12:43,554
optimization. And this is the numbers. Okay, let's go.

172
00:12:43,672 --> 00:12:47,346
So now when we have some background and we

173
00:12:47,368 --> 00:12:51,214
understand what are the issues and what was the goals

174
00:12:51,262 --> 00:12:55,102
that we want to achieve, let's talk about the solution

175
00:12:55,166 --> 00:12:58,994
itself. So before we dig into solution in the architecture,

176
00:12:59,042 --> 00:13:05,190
I want you to see, to show you some

177
00:13:05,260 --> 00:13:08,682
diagram. Okay, let's say it like this, how I

178
00:13:08,816 --> 00:13:13,238
change the Jenkins ninja into the Jenkins ninjas.

179
00:13:13,414 --> 00:13:17,270
Okay? So now I have only one instance,

180
00:13:17,350 --> 00:13:20,650
the Jenkins ninja that will coordinate

181
00:13:21,330 --> 00:13:24,270
all the others agent, all the other ninjas.

182
00:13:25,650 --> 00:13:29,054
The master Jenkins will say them what

183
00:13:29,092 --> 00:13:32,586
to do and which pipeline to run in each and

184
00:13:32,628 --> 00:13:35,954
every minute. Okay? So let's see how

185
00:13:35,992 --> 00:13:40,002
to get there, how it works. Imagine yourself,

186
00:13:40,136 --> 00:13:44,222
you are starting your day. You are logging

187
00:13:44,286 --> 00:13:47,878
into your Jenkins Ui. Choose the pipeline you need

188
00:13:47,884 --> 00:13:51,318
to run and click on build now. Okay. In a

189
00:13:51,324 --> 00:13:55,030
regular scenario, build now will trigger the pipeline and it will start

190
00:13:55,100 --> 00:13:58,506
running on the same instance. Okay, my scenario is working

191
00:13:58,608 --> 00:14:01,910
like this. Build now will trigger the relevant

192
00:14:01,990 --> 00:14:05,834
fleet group. Okay, fleet free group.

193
00:14:06,032 --> 00:14:09,546
I will show you later in the short demo how it looks and

194
00:14:09,568 --> 00:14:13,294
what I mean to, but in two words.

195
00:14:13,492 --> 00:14:17,422
I have a fleet for every

196
00:14:17,556 --> 00:14:21,150
pipeline group that I want to

197
00:14:21,300 --> 00:14:24,994
divide between them, okay? And you will see right now how it

198
00:14:25,032 --> 00:14:28,574
works. The relevant fleet group will trigger

199
00:14:28,622 --> 00:14:32,286
the easy to flip plugin. Okay. And the easy to flip plugin knows

200
00:14:32,318 --> 00:14:35,414
how to connect to aws and how to

201
00:14:35,452 --> 00:14:39,526
run the auto scaling group. There I

202
00:14:39,548 --> 00:14:43,240
have number of auto scaling groups and each one of them

203
00:14:43,610 --> 00:14:47,326
that was triggered will run the relevant

204
00:14:47,458 --> 00:14:50,934
launch template. In this template we can configure

205
00:14:50,982 --> 00:14:54,454
this instance type, network consideration,

206
00:14:54,502 --> 00:14:58,170
security groups and so on. But something to mention

207
00:14:58,240 --> 00:15:02,070
and it's important, you don't need to choose one specific

208
00:15:02,160 --> 00:15:06,474
instance type. And this is the beauty in this solution. Okay, you can configure

209
00:15:06,602 --> 00:15:10,410
in the auto scaling group, you can configure a group of instance

210
00:15:10,490 --> 00:15:13,762
types that suits you, that can

211
00:15:13,896 --> 00:15:17,746
perform the workload you need,

212
00:15:17,928 --> 00:15:22,914
and the auto scaling group will choose them automatically in

213
00:15:22,952 --> 00:15:26,578
case one of them is not available in that specific

214
00:15:26,664 --> 00:15:30,710
time. I don't know since we are using spot instances and

215
00:15:30,780 --> 00:15:34,502
it can happen that some kind of instance is not available in

216
00:15:34,556 --> 00:15:38,022
the specific time you need it. So the auto scaling group

217
00:15:38,076 --> 00:15:41,686
will choose another one and you will not feel it. Okay, your pipeline

218
00:15:41,718 --> 00:15:44,986
will starting. So we choose the launch template. We choose the

219
00:15:45,008 --> 00:15:48,682
instance type we are starting the user data scripts. They are part

220
00:15:48,736 --> 00:15:52,094
of the launch template. The user data scripts are

221
00:15:52,212 --> 00:15:56,606
as simple as that. Are the prerequisites for our build.

222
00:15:56,788 --> 00:16:00,830
If I need during my build libraries for

223
00:16:00,980 --> 00:16:04,446
node js or I need to install some specific version

224
00:16:04,478 --> 00:16:08,446
of Java, I will do all of these prerequisites

225
00:16:08,478 --> 00:16:12,530
in the user data script. So when the EC two node is coming

226
00:16:12,600 --> 00:16:16,680
up, it's coming up, it already have

227
00:16:17,050 --> 00:16:21,270
all the prerequisites. I want it to be there so

228
00:16:21,340 --> 00:16:25,014
the pipeline can start immediately. Okay, so after we

229
00:16:25,052 --> 00:16:28,114
finish the data script, all the prerequisites,

230
00:16:28,242 --> 00:16:31,894
we'll raise up a flag at the status

231
00:16:31,942 --> 00:16:35,782
is okay. And our Ec two instances,

232
00:16:35,846 --> 00:16:39,194
sorry, the Jenkins agents are running, they are up

233
00:16:39,232 --> 00:16:42,842
and running. When our master,

234
00:16:42,906 --> 00:16:47,242
our coordinator see that this flag is based

235
00:16:47,306 --> 00:16:51,502
up, it can start the pipeline. So we have some

236
00:16:51,556 --> 00:16:55,300
kind of another path to get

237
00:16:56,470 --> 00:16:59,954
to the pipeline to be started. But you can

238
00:16:59,992 --> 00:17:03,474
see all the additional value that you get from

239
00:17:03,512 --> 00:17:07,766
this process. So you

240
00:17:07,788 --> 00:17:11,186
will ask, okay, now we are using auto

241
00:17:11,218 --> 00:17:15,106
scaling groups and launch templates and ac two instances

242
00:17:15,218 --> 00:17:18,646
instead of only one Jenkins. So what are the numbers?

243
00:17:18,748 --> 00:17:22,314
Where is the build? Okay, so what we have now, now we

244
00:17:22,352 --> 00:17:25,594
have scenario number two after the

245
00:17:25,632 --> 00:17:31,678
optimization. In this particular example,

246
00:17:31,844 --> 00:17:34,702
I will use for you the same instance type.

247
00:17:34,756 --> 00:17:38,894
Okay. Aws I used before 32 vcpus 64

248
00:17:38,932 --> 00:17:42,222
ram. But this time

249
00:17:42,276 --> 00:17:46,558
it's spot instance that launched with the SG

250
00:17:46,654 --> 00:17:50,882
auto scaling group. But the interesting part of it,

251
00:17:51,016 --> 00:17:55,402
on a day to day basis I have zero instances

252
00:17:55,486 --> 00:17:59,046
up. Okay, it's important if before

253
00:17:59,148 --> 00:18:02,546
this optimization we had one Jenkins fat

254
00:18:02,578 --> 00:18:06,278
Jenkins huge machine with a lot of power running

255
00:18:06,364 --> 00:18:10,562
all the time. Twenty four seven for all month, for all year. Let's say,

256
00:18:10,636 --> 00:18:14,422
let's go there. Now we have zero instances

257
00:18:14,486 --> 00:18:18,406
up day to day, and you will see how it reflects

258
00:18:18,438 --> 00:18:22,800
into the numbers. I'm taking here some

259
00:18:23,170 --> 00:18:27,006
assumptions for the calculations, but they are from the

260
00:18:27,028 --> 00:18:30,462
real world. You can understand. Let's say I

261
00:18:30,516 --> 00:18:34,002
have four peaks in a month. Okay, I have a

262
00:18:34,056 --> 00:18:37,220
release or comes build every week,

263
00:18:38,950 --> 00:18:42,402
and I have some massive workloads in this time.

264
00:18:42,536 --> 00:18:46,454
Let's say every pick like this will

265
00:18:46,572 --> 00:18:50,422
use all of the instances in

266
00:18:50,476 --> 00:18:54,134
this auto scaling group. For this

267
00:18:54,172 --> 00:18:57,000
example, I choose five spot instances. Okay,

268
00:18:57,950 --> 00:19:01,594
let's make this assumption for a second.

269
00:19:01,712 --> 00:19:05,450
But from my real world I use only two or three maybe,

270
00:19:05,520 --> 00:19:08,298
and it's not for 4 hours.

271
00:19:08,384 --> 00:19:11,838
But I'm taking you to the limit over here.

272
00:19:12,004 --> 00:19:15,470
So each instance will have 4 hours

273
00:19:15,540 --> 00:19:18,730
of intensive workload during the peak.

274
00:19:18,890 --> 00:19:22,738
Okay, so you can see this is the

275
00:19:22,744 --> 00:19:26,494
estimated cost. You can multiply it by the number of instances,

276
00:19:26,542 --> 00:19:30,434
but it's much lower from

277
00:19:30,472 --> 00:19:34,370
the previous one. From the $1,000 for one Jenkins machine.

278
00:19:34,710 --> 00:19:38,022
And yes, that's a lot. That's a lot.

279
00:19:38,156 --> 00:19:42,022
Imagine yourself as a growing company when every

280
00:19:42,076 --> 00:19:45,430
month you multiply your

281
00:19:45,580 --> 00:19:48,520
workload on the pipelines, on the build,

282
00:19:49,070 --> 00:19:52,586
the $1,000 that we started in the beginning today,

283
00:19:52,688 --> 00:19:55,786
after six months, after a year,

284
00:19:55,968 --> 00:19:59,114
it can be multiplied by two or three

285
00:19:59,152 --> 00:20:02,622
or five or ten. And you will understand how

286
00:20:02,676 --> 00:20:06,206
this number is so big and so important

287
00:20:06,308 --> 00:20:10,286
to us. Okay. The one who

288
00:20:10,308 --> 00:20:14,190
is still listening will ask, okay, it's unfair.

289
00:20:14,850 --> 00:20:18,142
You are talking about the spot machines,

290
00:20:18,206 --> 00:20:22,238
but all this time, you still have the Jenkins instance

291
00:20:22,334 --> 00:20:25,606
up and running. And yes, you are right. But now my

292
00:20:25,628 --> 00:20:29,560
Jenkins coordinator is a different instance type.

293
00:20:30,650 --> 00:20:35,174
It's not free, but it costs me much

294
00:20:35,212 --> 00:20:39,094
less. Okay. It's a t free medium. And honestly,

295
00:20:39,142 --> 00:20:43,094
I can take the t three micro if I want one cpu

296
00:20:43,142 --> 00:20:46,330
and two ram, because on a daily basis, this machine,

297
00:20:46,750 --> 00:20:50,134
the only thing it's doing is

298
00:20:50,192 --> 00:20:53,470
only run the plugins and be a coordinator to

299
00:20:53,540 --> 00:20:57,902
point to the right fleet and

300
00:20:57,956 --> 00:21:01,662
redirect the pipeline to the right agent in this

301
00:21:01,716 --> 00:21:05,054
fleet. That's all. And the estimated cost

302
00:21:05,092 --> 00:21:08,000
is, of course, is $45 in a month.

303
00:21:08,690 --> 00:21:12,158
Once again, there are theoretical numbers,

304
00:21:12,324 --> 00:21:15,766
but I can say from my own experience, there are

305
00:21:15,788 --> 00:21:19,926
the numbers I saw before the

306
00:21:19,948 --> 00:21:23,334
optimization. And after the optimization, our bill

307
00:21:23,532 --> 00:21:27,190
reduced significantly. So after

308
00:21:27,260 --> 00:21:31,580
we saw all of this theoretical, let's say,

309
00:21:31,950 --> 00:21:35,386
information, let's go to the Jenkins itself

310
00:21:35,488 --> 00:21:39,770
and you will see how it works. So, this is my Jenkins,

311
00:21:40,190 --> 00:21:44,730
and for this session, I prepared two pipelines.

312
00:21:45,070 --> 00:21:48,990
One pipeline name is big ec two.

313
00:21:49,060 --> 00:21:52,510
The second one is small ec two. They do the same. Okay. They take some

314
00:21:52,580 --> 00:21:55,540
GitHub repository and back it up.

315
00:21:55,990 --> 00:21:58,900
But one of the pipelines will use.

316
00:21:59,350 --> 00:22:02,862
And you can see over here, sorry. One of the pipelines,

317
00:22:02,926 --> 00:22:06,630
the small one will use the Jenkins small footprint

318
00:22:07,130 --> 00:22:10,454
Sg. And the second one will use. The big

319
00:22:10,492 --> 00:22:13,654
one will use the Jenkins fleet Sg. Okay. The names are

320
00:22:13,692 --> 00:22:17,030
not so aligned, but it's important

321
00:22:17,100 --> 00:22:20,366
to understand the Jenkins fleet SG.

322
00:22:20,418 --> 00:22:23,814
The first one is for my big workloads,

323
00:22:23,862 --> 00:22:27,622
for my massive pipelines that will run all the build,

324
00:22:27,686 --> 00:22:31,230
all the e two e tests, and create images,

325
00:22:32,930 --> 00:22:38,122
destroy images, and so on and so on and so on. These builds

326
00:22:38,266 --> 00:22:42,346
will use the auto

327
00:22:42,378 --> 00:22:46,290
scaling group that have the launch template with the

328
00:22:46,440 --> 00:22:50,430
huge instance type. Okay, as I saw before, 32 cpus,

329
00:22:50,510 --> 00:22:53,842
it can be 64 cpus. Whatever I want. The second

330
00:22:53,896 --> 00:22:57,718
one is for the cron jobs, for the

331
00:22:57,884 --> 00:23:02,162
backup processing. I don't want to trigger

332
00:23:02,226 --> 00:23:05,814
these massive instances for those small kind

333
00:23:05,852 --> 00:23:09,354
of jobs. I want to use something t two micro or t two free

334
00:23:09,392 --> 00:23:13,046
medium. The small instances, one cpu, two cpu,

335
00:23:13,078 --> 00:23:16,730
that's enough for me. I don't care if this particular job

336
00:23:16,800 --> 00:23:19,660
will take two minutes or three minutes.

337
00:23:20,290 --> 00:23:25,534
It's okay for me, but I do care how

338
00:23:25,572 --> 00:23:29,102
much money, what is the difference

339
00:23:29,236 --> 00:23:32,510
in the cost of those two instances? And you have the difference,

340
00:23:32,580 --> 00:23:36,754
you can realize it. So now we have the

341
00:23:36,792 --> 00:23:39,874
big one, I assume. I want

342
00:23:39,912 --> 00:23:43,762
to. Okay, I want to show you how it works. That the big ac

343
00:23:43,816 --> 00:23:47,574
two pipeline will run on this particular

344
00:23:47,772 --> 00:23:53,730
node and the small will trigger a new machine,

345
00:23:53,810 --> 00:23:58,946
a new node in my auto scaling group. So let's

346
00:23:58,978 --> 00:24:02,314
run them and see. As you can understand, the big

347
00:24:02,352 --> 00:24:05,850
one will take much more time. That's why it's already here.

348
00:24:06,000 --> 00:24:09,322
But the small one, I believe we can see it in

349
00:24:09,376 --> 00:24:13,294
minute or two how it starts. So I will run both

350
00:24:13,332 --> 00:24:16,638
of them, I repeat myself, they do the same.

351
00:24:16,724 --> 00:24:20,782
Okay, but one of them will trigger the small group

352
00:24:20,836 --> 00:24:23,586
as a fleet and the second one will trigger the big one.

353
00:24:23,688 --> 00:24:27,394
So while we're waiting for it to

354
00:24:27,432 --> 00:24:31,070
start, I want to show you how it's configured. And it's configured.

355
00:24:31,230 --> 00:24:34,418
It's a really simple process. Okay,

356
00:24:34,584 --> 00:24:38,286
you need to install the plugin. This is to fleet plugin we showed

357
00:24:38,318 --> 00:24:42,738
before. And then you go to the manage comes

358
00:24:42,834 --> 00:24:46,134
configure clouds and from here you can see

359
00:24:46,172 --> 00:24:50,374
your Amazon configuration. Okay. In this setup

360
00:24:50,422 --> 00:24:53,946
I use AWs, so you see the Amazon ec two fleet. You can

361
00:24:53,968 --> 00:24:58,326
check in your cloud provider how to create those fleets

362
00:24:58,438 --> 00:25:02,830
and the configuration is really simple. The name of the fleet

363
00:25:03,970 --> 00:25:08,058
in this section you will see the credentials

364
00:25:08,154 --> 00:25:11,758
and after that every basic information

365
00:25:11,844 --> 00:25:15,074
you need to enter it. What region I want to

366
00:25:15,112 --> 00:25:18,818
run into, what's the name of this auto scaling group? And one

367
00:25:18,904 --> 00:25:22,914
specific section I want to show to you is if

368
00:25:22,952 --> 00:25:26,774
you remember from the diagram I had this okay flag that

369
00:25:26,812 --> 00:25:30,054
everything is okay and we can start run. And this is how

370
00:25:30,092 --> 00:25:33,798
implemented. It's a prefix start agent command that I run

371
00:25:33,884 --> 00:25:38,150
before the Jenkins starting start the pipeline and

372
00:25:38,300 --> 00:25:41,682
it repeats itself every 5 seconds

373
00:25:41,746 --> 00:25:45,226
if I remember right. And check if this flag is

374
00:25:45,248 --> 00:25:48,410
raised up. It's just simple as that.

375
00:25:48,480 --> 00:25:52,910
Okay, this one, the first fleet,

376
00:25:53,250 --> 00:25:57,434
and this is one, the second one, the small one, the same credentials,

377
00:25:57,482 --> 00:26:01,006
the same configuration, but the auto scaling group is

378
00:26:01,108 --> 00:26:05,380
different. Okay, fine. Now I want to show you

379
00:26:05,750 --> 00:26:09,570
the auto scaling group in AWS

380
00:26:09,990 --> 00:26:17,318
here I've already filtered two

381
00:26:17,404 --> 00:26:20,614
sg that I use here, the small one and

382
00:26:20,652 --> 00:26:24,806
the big one, and you can see that the

383
00:26:24,828 --> 00:26:28,678
configuration is different. The small one I

384
00:26:28,684 --> 00:26:31,830
need maximum of two instances,

385
00:26:31,910 --> 00:26:35,366
but in the big one I want to go up to the five instances

386
00:26:35,478 --> 00:26:39,050
on daily basis, the desired capacity and the min capacity are

387
00:26:39,120 --> 00:26:41,680
zero. Remember it, zero.

388
00:26:42,770 --> 00:26:45,374
That's the catch in this story. Okay,

389
00:26:45,572 --> 00:26:49,054
so now we can see that. Okay,

390
00:26:49,172 --> 00:26:52,686
already one instance is up and

391
00:26:52,788 --> 00:26:56,082
our build I assume is starting

392
00:26:56,136 --> 00:26:58,994
to run right now. And yes,

393
00:26:59,112 --> 00:27:02,930
the big one is already finished and the small one started right now.

394
00:27:03,000 --> 00:27:06,100
And when will it will finish?

395
00:27:06,410 --> 00:27:10,134
The instance that was triggered will destroy itself

396
00:27:10,252 --> 00:27:13,974
in two or three minutes. Just like that I have

397
00:27:14,012 --> 00:27:17,080
another cron jobs and they will run the same way.

398
00:27:18,650 --> 00:27:21,714
They will trigger the auto scaling group. The instance,

399
00:27:21,842 --> 00:27:23,720
easy to instance will get up,

400
00:27:24,090 --> 00:27:27,574
process all the logic and go down.

401
00:27:27,772 --> 00:27:31,662
That's it. Okay guys, I hope you enjoyed it

402
00:27:31,716 --> 00:27:36,110
and thank you very much for attending my session.

403
00:27:36,930 --> 00:27:40,718
If you have any questions or you need some additional information,

404
00:27:40,884 --> 00:27:43,742
feel free to contact me in my email.

405
00:27:43,876 --> 00:27:47,966
Valera at Memphis dev feel free to contact me on any

406
00:27:48,148 --> 00:27:52,478
social network you are using and

407
00:27:52,644 --> 00:27:54,380
enjoy the conference. Thank you very much.

