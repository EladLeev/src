1
00:00:25,730 --> 00:00:29,426
My name is Vince Lesa. I'm a solutions architect working for AWS.

2
00:00:29,538 --> 00:00:33,094
I help customers being successful in AWS for a year and a half.

3
00:00:33,212 --> 00:00:36,870
In this talk I would like to show you how you can build applications

4
00:00:37,610 --> 00:00:41,446
using go with AWS CDK and how to deploy them to

5
00:00:41,468 --> 00:00:43,880
your AWS account. So let's get started.

6
00:00:45,530 --> 00:00:48,706
Okay, let's start at the beginning. It stands

7
00:00:48,738 --> 00:00:52,810
with manual deployments where we use like wikis and playbooks

8
00:00:52,970 --> 00:00:56,190
which were sometimes outdated. Or you actually ask

9
00:00:56,260 --> 00:01:00,778
someone to click your infrastructure through the AWS console

10
00:01:00,874 --> 00:01:04,426
and if something needs to be changed it would hard to see who to approach

11
00:01:04,458 --> 00:01:07,954
for that and what was actually done into your AWS account.

12
00:01:08,152 --> 00:01:11,614
The next track was actually a bit better. It was scripting

13
00:01:11,662 --> 00:01:15,458
things in Bash and it worked very well

14
00:01:15,544 --> 00:01:18,770
until the complexity was too big because

15
00:01:18,840 --> 00:01:23,314
Bash was not really designed to build complex deployment

16
00:01:23,362 --> 00:01:27,302
frameworks and it was usually hard to maintain. So it started working quite

17
00:01:27,356 --> 00:01:30,322
well until it grow and become more bigger.

18
00:01:30,466 --> 00:01:34,262
Usually the advisor was like hey, it worked the last time, so don't touch

19
00:01:34,316 --> 00:01:38,738
it. An important next step. What has been taken is the use of cloudformation

20
00:01:38,834 --> 00:01:42,714
or terraform. It was like those infrastructure

21
00:01:42,762 --> 00:01:46,778
provisioning engines would actually hide the complexity

22
00:01:46,874 --> 00:01:50,074
of things like state management, but also include features

23
00:01:50,122 --> 00:01:53,310
like rollbacks or error management or drift detection.

24
00:01:53,470 --> 00:01:57,650
And actually it allowed developers to describe their infrastructure

25
00:01:57,990 --> 00:02:02,066
in a declarative way and hand it

26
00:02:02,088 --> 00:02:05,570
over to the engine which start deploying the resources

27
00:02:07,130 --> 00:02:10,440
on the account. Actually, the ease of use

28
00:02:11,050 --> 00:02:15,350
increased the adoption of infrastructure and code among companies

29
00:02:15,420 --> 00:02:18,238
and enterprises and in the development communities.

30
00:02:18,434 --> 00:02:22,426
This actually led to growth in size of

31
00:02:22,448 --> 00:02:26,106
the templates, which eventually made it harder to

32
00:02:26,128 --> 00:02:29,654
maintain because it's hard to maintain

33
00:02:29,702 --> 00:02:33,306
growing sizes of decorative files like JSON

34
00:02:33,338 --> 00:02:37,342
and JAML. And you can imagine that

35
00:02:37,396 --> 00:02:40,240
also got into some problems.

36
00:02:40,850 --> 00:02:44,722
So the next idea was to use generators, which actually

37
00:02:44,776 --> 00:02:48,334
allows you to write code, transform that, and generate

38
00:02:48,462 --> 00:02:51,826
JSON and demo documents from classes and

39
00:02:51,848 --> 00:02:55,358
methods you already know in programming languages. And on top of

40
00:02:55,384 --> 00:02:58,194
that they came new tools such as AWS,

41
00:02:58,242 --> 00:03:02,006
CDK and Pulumi, which actually provide you with a set

42
00:03:02,028 --> 00:03:05,282
of tools and framework to create custom abstractions

43
00:03:05,346 --> 00:03:09,094
and cloud infrastructure. So let's take a look at AWS

44
00:03:09,142 --> 00:03:13,018
CDK. The AWS Cloud development Kit is an

45
00:03:13,024 --> 00:03:16,394
open source development framework to model and provision your

46
00:03:16,432 --> 00:03:19,686
cloud infrastructure resources using the programming

47
00:03:19,718 --> 00:03:23,834
languages you already know and love. So you can do this with different programming

48
00:03:23,882 --> 00:03:27,002
languages like Python, typescript, Java,

49
00:03:27,066 --> 00:03:30,814
C sharp, JavaScript and Fair.

50
00:03:30,852 --> 00:03:34,766
And recently you can also use go which is currently in preview.

51
00:03:34,958 --> 00:03:38,846
With CDK you will be much faster than with the previous tools

52
00:03:38,878 --> 00:03:42,782
because you can work with familiar languages and concepts

53
00:03:42,926 --> 00:03:46,674
like classes and methods without you have to switch in context.

54
00:03:46,802 --> 00:03:50,226
You also have all the tools and support from programming

55
00:03:50,258 --> 00:03:53,922
languages such as autocomplete, inline documentation, testing,

56
00:03:53,986 --> 00:03:58,054
linting, and use of a debugger by actually writing your

57
00:03:58,092 --> 00:04:02,138
code within the ide you already know and love. The most important

58
00:04:02,224 --> 00:04:05,926
part is that you're able to build abstractions and components of infrastructure

59
00:04:05,958 --> 00:04:09,414
and applications, and we provide many sane

60
00:04:09,462 --> 00:04:12,686
default values, so there's no need for you to

61
00:04:12,708 --> 00:04:16,654
read a lot of documentation to get started quickly and

62
00:04:16,692 --> 00:04:20,286
also in a safe way. And of course, many of these default values can

63
00:04:20,308 --> 00:04:23,614
be adjusted to your needs. So let's take a look

64
00:04:23,652 --> 00:04:27,106
of the components that AWS CDK access of so first we have the

65
00:04:27,128 --> 00:04:30,594
core framework, we have the AWS construct library and

66
00:04:30,632 --> 00:04:34,222
we have the command line interface. So with the core framework

67
00:04:34,286 --> 00:04:37,906
you can create and structure apps that contain one or

68
00:04:37,928 --> 00:04:41,394
multiple stacks. The stack is a logical unit of infrastructure

69
00:04:41,442 --> 00:04:45,334
which contain multiple resources and is mapped 101

70
00:04:45,372 --> 00:04:48,886
to a cloud formation stack. It's a good practice to divide the resources

71
00:04:48,918 --> 00:04:53,142
into stacks that have different lifecycles and you will create one stack of network

72
00:04:53,206 --> 00:04:56,810
infrastructure such as VPC, another stack which

73
00:04:56,880 --> 00:05:00,666
have like a container cluster using eks or

74
00:05:00,768 --> 00:05:04,814
the elastic container service. Or you have another stack which actually is

75
00:05:04,852 --> 00:05:08,410
the application that runs on top of the cluster. The AWS

76
00:05:08,490 --> 00:05:12,282
Construct library is a set of components which is crafted by AWS

77
00:05:12,426 --> 00:05:16,814
to create resources for specific services. This helps you to decouple libraries

78
00:05:16,862 --> 00:05:19,842
and use only the dependencies that you need in your project.

79
00:05:19,976 --> 00:05:23,922
It also builds with best practices and security considerations to provide

80
00:05:23,976 --> 00:05:28,178
good development experience, ease of use and a fast installation cycles.

81
00:05:28,274 --> 00:05:31,602
The CDK CLI help you to interact with the code framework

82
00:05:31,666 --> 00:05:35,110
and to initialize project structures, inspect differences between

83
00:05:35,180 --> 00:05:38,978
deployments and also deploy easily towards your

84
00:05:39,004 --> 00:05:42,138
AWS accounts. So let's take a look at an example.

85
00:05:42,304 --> 00:05:46,342
Here's where we create a new VPC, an ECS cluster

86
00:05:46,406 --> 00:05:50,186
building applications with the application load balancer by just providing the

87
00:05:50,208 --> 00:05:54,218
name of the Docker image from Docker Hub and a number of maximal availability

88
00:05:54,314 --> 00:05:58,074
zones of a VPC. And that's it. Nothing more than this CDK

89
00:05:58,122 --> 00:06:02,582
would generate more than 800 rows of cloud formation template

90
00:06:02,746 --> 00:06:06,686
with separate VPC subnet, Internet gateway routing

91
00:06:06,718 --> 00:06:10,782
tables, application load balancer, the Fargate cluster

92
00:06:10,926 --> 00:06:15,010
service and task definitions. So in total like 37

93
00:06:15,080 --> 00:06:18,786
resources with just these amount of line of codes.

94
00:06:18,978 --> 00:06:22,646
Now let's see how we can use a developers flow of CDK and

95
00:06:22,668 --> 00:06:25,874
how we can actually ship this code to our AWS

96
00:06:25,922 --> 00:06:30,090
accounts. So we start a project by executing the CDK in it,

97
00:06:30,240 --> 00:06:33,690
and it will actually generate a project structure

98
00:06:34,030 --> 00:06:37,366
for a specific programming language and we can start creating

99
00:06:37,398 --> 00:06:40,678
our apps and stacks and the constructs

100
00:06:40,694 --> 00:06:44,398
and resources that are needed. Once we have created the project,

101
00:06:44,564 --> 00:06:47,982
we can actually build it already by using

102
00:06:48,116 --> 00:06:51,454
Go build. Or if you're using typescript you could use

103
00:06:51,492 --> 00:06:54,910
NPM run build, but this is the next step.

104
00:06:54,980 --> 00:06:58,574
You're now able to build your application with the code that has been provisioned.

105
00:06:58,702 --> 00:07:02,450
Then we need to synthesize our code to cloudformation templates and

106
00:07:02,520 --> 00:07:06,174
you can do this by running CDK synth and this will actually generate

107
00:07:06,222 --> 00:07:09,526
the cloudformation templates and the assets needed and

108
00:07:09,548 --> 00:07:12,774
that will be bundled in something called a cloud assembly. Before we

109
00:07:12,812 --> 00:07:17,170
deploy, we can actually inspect what to change if we deploy the cloud assembly

110
00:07:17,330 --> 00:07:20,070
and which resources will be deleted,

111
00:07:20,150 --> 00:07:24,026
will be updated, or will be created. We can

112
00:07:24,048 --> 00:07:27,974
do this by using CDK diff and finally with CDK

113
00:07:28,022 --> 00:07:32,910
deploy we can push the changes to cloudformation and

114
00:07:32,980 --> 00:07:36,574
from there the service will create all the cloud resources necessary into

115
00:07:36,612 --> 00:07:41,210
your AWS account. So let's take a look at the CDK constructs.

116
00:07:41,370 --> 00:07:45,442
So CDK includes the AWS construct library which

117
00:07:45,496 --> 00:07:49,342
contains construct representing AWS resources. And this library

118
00:07:49,406 --> 00:07:53,150
includes constructs that represent all resources available on AWS.

119
00:07:53,230 --> 00:07:56,338
For example, the S three bucket class represents an

120
00:07:56,344 --> 00:07:59,634
Amazon s three bucket and the dynamodb table

121
00:07:59,682 --> 00:08:02,914
class represents a dynamodb table. With this library

122
00:08:02,962 --> 00:08:05,938
is the starting point for you to create resources.

123
00:08:06,114 --> 00:08:10,298
And one of the big advantages is to have composition of the services

124
00:08:10,464 --> 00:08:13,814
that represents like complex infrastructure like networking

125
00:08:13,862 --> 00:08:17,206
setup or creating clusters or databases. And let's

126
00:08:17,238 --> 00:08:20,714
take a look at the various levels of constructs and how you can actually use

127
00:08:20,752 --> 00:08:24,090
them. So constructs are organized in three different levels.

128
00:08:24,250 --> 00:08:27,566
A level one are constructs that automatically generated from

129
00:08:27,588 --> 00:08:30,814
cloud formation resource specification. So this is a one to one

130
00:08:30,852 --> 00:08:33,650
mapping between classes and AWS resources.

131
00:08:34,150 --> 00:08:37,742
Level two are higher level service constructs and actually represents

132
00:08:37,806 --> 00:08:41,502
resources such as s three buckets or on VPC

133
00:08:41,646 --> 00:08:45,286
and including other resources. So it can be a composition of

134
00:08:45,308 --> 00:08:48,840
multiple that still be tied to one service.

135
00:08:49,450 --> 00:08:53,014
So these constructs are simpler and require fair little

136
00:08:53,052 --> 00:08:56,210
input to generate complex cloud formation templates,

137
00:08:56,370 --> 00:09:00,378
and they can have many defaults and opinions already baked into them.

138
00:09:00,544 --> 00:09:04,566
Level three are opinionated abstractions that are created by AWS,

139
00:09:04,678 --> 00:09:08,086
for instance ECS servers with an application load

140
00:09:08,118 --> 00:09:12,302
balancer and a VPC. But you can also see

141
00:09:12,356 --> 00:09:16,106
level three constructs in third party libraries provided

142
00:09:16,138 --> 00:09:19,486
by the community or your own set of libraries that you want

143
00:09:19,508 --> 00:09:23,018
to distribute into your organization. And this is the level where you're

144
00:09:23,034 --> 00:09:26,538
using to create your own obstructions that can be reduced. So let's

145
00:09:26,554 --> 00:09:29,726
take a look closer look to a level one construct.

146
00:09:29,918 --> 00:09:33,890
So with a low level one construct you actually have direct

147
00:09:33,960 --> 00:09:38,066
access to the generated cloud formation elements. And this provides

148
00:09:38,178 --> 00:09:41,842
control, but also requires the knowledge about the properties

149
00:09:41,906 --> 00:09:45,494
of the resource specification. All fields are optional in here and

150
00:09:45,612 --> 00:09:49,458
CDK tries to generate properties where it can, such as names or well

151
00:09:49,484 --> 00:09:53,226
defined defaults. So as you can see over here it says a

152
00:09:53,248 --> 00:09:57,114
new c event bucket. So usually level one constructs are

153
00:09:57,152 --> 00:10:00,170
prefixed with c event which stands for cloudformation.

154
00:10:00,590 --> 00:10:04,882
And in this case we can give it the name mybucket

155
00:10:04,966 --> 00:10:08,240
and we can also specify the bucket name over here.

156
00:10:08,690 --> 00:10:12,378
A level two contract can generate more complex structures

157
00:10:12,474 --> 00:10:16,306
so they can contain multiple resources, but they are still in

158
00:10:16,328 --> 00:10:19,730
scope of the specific service. So with a single line of code

159
00:10:19,880 --> 00:10:23,950
we can actually create a VPC that stands two availability

160
00:10:24,030 --> 00:10:27,554
zones which include four subnets

161
00:10:27,682 --> 00:10:31,826
and have more than 65,000 ips split

162
00:10:31,858 --> 00:10:35,798
at equality. We have can Internet gateway, route tables and everything.

163
00:10:35,884 --> 00:10:39,174
And it's actually all what you need for a fully

164
00:10:39,222 --> 00:10:42,858
configured VPC according to the AWS security

165
00:10:42,944 --> 00:10:46,506
best practices. Anyone who actually build a VPC for scratch and

166
00:10:46,528 --> 00:10:49,994
cloudformation, I think you can relate. Challenging it is to

167
00:10:50,112 --> 00:10:53,614
set this up and how long it takes and how much of lines of

168
00:10:53,652 --> 00:10:57,166
code you actually need to do this in a declarative way.

169
00:10:57,348 --> 00:11:01,082
And with just this one line of code. New VPC,

170
00:11:01,146 --> 00:11:04,974
everything is for you, ready to set up, ready for you and

171
00:11:05,012 --> 00:11:08,514
set up with the default values and for

172
00:11:08,552 --> 00:11:12,510
you actually to deploy resources into this VPC.

173
00:11:12,670 --> 00:11:16,386
Then we also have level three constructs which are like composition of

174
00:11:16,408 --> 00:11:20,230
multiple resources across different services. This is the example

175
00:11:20,300 --> 00:11:23,778
that you actually have seen before where we're going to create an application load

176
00:11:23,794 --> 00:11:27,698
balancer with the corresponding security groups, task definitions,

177
00:11:27,794 --> 00:11:31,618
the listeners, but it also creates the Fargate servers

178
00:11:31,794 --> 00:11:36,380
together with the iron rules and policies needed for the service and

179
00:11:36,750 --> 00:11:40,954
for the logging. It creates the log groups and the task definitions just

180
00:11:40,992 --> 00:11:44,330
by providing the two parameters. That's the acs cluster

181
00:11:44,410 --> 00:11:48,378
and the name of the Docker image from the public docker repository.

182
00:11:48,474 --> 00:11:52,206
And this actually shows how powerful level three constructs can be and

183
00:11:52,228 --> 00:11:56,270
how you can create your own abstractions that you can share publicly

184
00:11:56,350 --> 00:11:59,486
or privately within your organization.

185
00:11:59,678 --> 00:12:03,454
So now let's take a look on how we can deploy

186
00:12:03,502 --> 00:12:07,302
our own go application using CDk and using

187
00:12:07,356 --> 00:12:10,550
CDk with go. So what we're going to do is deploy

188
00:12:11,050 --> 00:12:14,406
something like a URL shortener which has

189
00:12:14,428 --> 00:12:17,586
been written in go and will be deployed as a lambda

190
00:12:17,618 --> 00:12:21,642
function. We're going to expose this lambda function to the outside world using

191
00:12:21,696 --> 00:12:24,906
API gateway for which the user can interact with.

192
00:12:25,088 --> 00:12:28,854
And URL shortener also needs the storage to translate

193
00:12:28,902 --> 00:12:33,274
between the shortened URL to the original.

194
00:12:33,322 --> 00:12:36,346
And for that we're going to use a dynamodb table.

195
00:12:36,458 --> 00:12:40,346
So let's take a look. Okay, let's now deploy

196
00:12:40,378 --> 00:12:43,730
our go application using CDk on AWS.

197
00:12:44,150 --> 00:12:49,038
First things first, we need to install the Cdk CLI

198
00:12:49,134 --> 00:12:52,654
and we can do that by using NpM. So what we do is Npm

199
00:12:52,702 --> 00:12:56,306
install Cdk and this will install the

200
00:12:56,328 --> 00:13:00,134
CLI. And for there you can use the Cdk command to

201
00:13:00,172 --> 00:13:03,314
init your application. So what we're going to do say Cdk,

202
00:13:03,362 --> 00:13:07,014
init, add languages, go, you can also

203
00:13:07,052 --> 00:13:10,794
provide other languages, but as this is in go talk, we're actually

204
00:13:10,832 --> 00:13:14,554
going to use go in this way. So let's execute it.

205
00:13:14,752 --> 00:13:18,666
And the Cdk CLI will actually create a

206
00:13:18,688 --> 00:13:22,000
bunch of files for us. And from now actually

207
00:13:22,850 --> 00:13:27,082
all files are there. And we can now do something called like Cdk

208
00:13:27,146 --> 00:13:31,134
synth which actually will synthesize the

209
00:13:31,172 --> 00:13:34,638
code that has been created to generate cloudformation.

210
00:13:34,814 --> 00:13:38,354
And we can actually look at this output by using this

211
00:13:38,392 --> 00:13:39,410
sync command.

212
00:13:42,020 --> 00:13:45,440
So if you're familiar with AWS cloudformation, you actually

213
00:13:45,510 --> 00:13:48,792
see come quite familiar.

214
00:13:48,956 --> 00:13:52,196
And the demo resource that

215
00:13:52,218 --> 00:13:55,444
it actually creates is an SMS topic. But we're going to change

216
00:13:55,482 --> 00:13:59,480
that for application of course. So let's look at the files that has been created.

217
00:14:00,620 --> 00:14:04,564
So AWS, you can see it creates a Gomod file

218
00:14:04,612 --> 00:14:08,452
and Cdk json, it initializes a git repository

219
00:14:08,516 --> 00:14:12,520
for you with a readme. And I think the file that we are mostly interested

220
00:14:12,590 --> 00:14:15,320
is in the CDK go file.

221
00:14:15,980 --> 00:14:19,628
And over here, this is actually the infrastructures code that

222
00:14:19,634 --> 00:14:23,596
we're going to use. So let's look

223
00:14:23,618 --> 00:14:27,468
at a file and what's in it. As you can see there's a bunch

224
00:14:27,484 --> 00:14:31,212
of imports. There is a structure

225
00:14:31,276 --> 00:14:33,520
created for the stack properties.

226
00:14:34,340 --> 00:14:36,980
There's a function to new up a new stack.

227
00:14:38,520 --> 00:14:42,036
And as you can see over here, there's already the topic that has

228
00:14:42,058 --> 00:14:44,740
been created by the initialize command.

229
00:14:45,720 --> 00:14:49,264
There's a main entry point. And basically what's in that main entry

230
00:14:49,312 --> 00:14:52,344
point is the creation of a new app,

231
00:14:52,542 --> 00:14:56,056
the creation of the stack which will be assigned to

232
00:14:56,078 --> 00:14:59,444
the app, and then the app synth which actually generates

233
00:14:59,492 --> 00:15:03,196
the lambda function. There's also some ways for you to

234
00:15:03,218 --> 00:15:06,364
use different environments by specifying the

235
00:15:06,402 --> 00:15:10,156
environment over here. But this is not something that

236
00:15:10,178 --> 00:15:14,092
we're going to do now. So let's go back to the code that we're going

237
00:15:14,146 --> 00:15:18,288
to put in to deploy our application. So let's remove this.

238
00:15:18,454 --> 00:15:21,824
If we look at our architecture, the first thing that we want to create is

239
00:15:21,862 --> 00:15:25,980
a dynamodb table. So to save you some time

240
00:15:26,070 --> 00:15:29,572
of looking at me typing, I've copied in

241
00:15:29,626 --> 00:15:33,296
some of the code that's needed to create a dynamodb

242
00:15:33,328 --> 00:15:37,172
table. So we create a variable called table and

243
00:15:37,226 --> 00:15:40,836
we say AWS dynamodb new table

244
00:15:40,948 --> 00:15:44,810
and we provide in stack, that's the stack that we're going

245
00:15:45,340 --> 00:15:48,010
to use. Then we provide a name.

246
00:15:49,900 --> 00:15:53,324
In this example the name is table and

247
00:15:53,522 --> 00:15:57,516
as you can see the string is in GSI string. The reason for

248
00:15:57,538 --> 00:16:01,516
this is because we also want to manipulate the

249
00:16:01,538 --> 00:16:04,956
strings from other resources. So you can see

250
00:16:04,978 --> 00:16:09,036
an example later on. And for this we actually have to provide string

251
00:16:09,068 --> 00:16:13,330
type pointers and this is how we're going to do that. And the last

252
00:16:13,860 --> 00:16:17,328
argument that we provide is the table properties. And one of

253
00:16:17,334 --> 00:16:21,220
the things that we need to have in the table properties is the partition key.

254
00:16:21,370 --> 00:16:25,280
The partition key contains of a name of type slug

255
00:16:25,440 --> 00:16:29,584
and it has this type attribute string. You can also provide other attribute

256
00:16:29,632 --> 00:16:32,760
types like binary and number.

257
00:16:32,910 --> 00:16:36,664
As you can see, because I'm using go in this

258
00:16:36,702 --> 00:16:40,504
editor, I have all the intelligence that I needed to

259
00:16:40,542 --> 00:16:43,660
discover how to create this AWS resources here.

260
00:16:43,810 --> 00:16:47,340
So now we have created our table, we want to create our

261
00:16:47,410 --> 00:16:51,790
lambda function. So for our lambda function we are using

262
00:16:52,400 --> 00:16:56,652
a construct, the go function which is in the package aws

263
00:16:56,716 --> 00:17:00,144
lambda go. So as you can see over here we

264
00:17:00,182 --> 00:17:03,404
say new go function. We also provide the stack

265
00:17:03,532 --> 00:17:06,996
and the name which will be function and the properties to

266
00:17:07,018 --> 00:17:10,564
go from properties. What we provide over

267
00:17:10,602 --> 00:17:13,812
here is the entry which is actually our

268
00:17:13,866 --> 00:17:17,696
go application. It's called go URL. So what we're

269
00:17:17,728 --> 00:17:21,032
going to do is actually copy this application into

270
00:17:21,086 --> 00:17:25,224
our project. So copy code

271
00:17:25,262 --> 00:17:26,200
your role.

272
00:17:29,420 --> 00:17:33,644
And if we look at the application, it's just a plain go application

273
00:17:33,762 --> 00:17:37,564
that you already know on how to create. There's a

274
00:17:37,602 --> 00:17:41,052
main package, we created some

275
00:17:41,106 --> 00:17:44,690
commands and the API is using

276
00:17:46,820 --> 00:17:50,828
actually with two calls that you can do. One is to create a URL

277
00:17:50,924 --> 00:17:54,064
which returns slack to us and the other one

278
00:17:54,102 --> 00:17:57,456
is actually accessing the URL and that will return a

279
00:17:57,478 --> 00:18:00,372
redirect permanently to where the slug is done.

280
00:18:00,426 --> 00:18:03,796
And for the storage we're using dynamodb. So what we're going

281
00:18:03,818 --> 00:18:07,284
to do is actually deploy this application over here by using

282
00:18:07,322 --> 00:18:10,788
a lambda function we point to the application by

283
00:18:10,874 --> 00:18:14,408
specifying in the entry. Of course, our application

284
00:18:14,494 --> 00:18:18,056
need to know which dynamodb table it should actually write

285
00:18:18,158 --> 00:18:22,212
the URLs to. For this we're using environment variables

286
00:18:22,276 --> 00:18:26,056
and we can do it like this. So we provide a map

287
00:18:26,088 --> 00:18:29,756
of the type string with a point string. The name will be

288
00:18:29,778 --> 00:18:33,896
dynamodb table and we reference the table

289
00:18:34,008 --> 00:18:37,216
which we created before and we reference the table name to

290
00:18:37,238 --> 00:18:40,944
that, meaning that the table name will be

291
00:18:40,982 --> 00:18:44,416
generated over here by this construct and

292
00:18:44,438 --> 00:18:48,272
the name of the table that will be generated will be actually provided

293
00:18:48,336 --> 00:18:51,764
to the environment variable. This way you actually make things

294
00:18:51,802 --> 00:18:56,048
in code and if things are changing, it automatically change with it in the lambda

295
00:18:56,064 --> 00:18:59,296
function later on. Okay, now our lambda

296
00:18:59,328 --> 00:19:02,824
function needs to be able to access the table to read and

297
00:19:02,862 --> 00:19:06,424
write table entries to that. On AWS we use something

298
00:19:06,542 --> 00:19:09,752
called identity and access management, where we provide

299
00:19:09,806 --> 00:19:13,676
a role towards a lambda function which has the permissions to do

300
00:19:13,698 --> 00:19:18,060
that. And normally in best practices to use least privileged,

301
00:19:18,560 --> 00:19:22,300
normally you have to create this role, you have assigned the privileges

302
00:19:22,640 --> 00:19:26,160
to that role and you have to assign that role to the function.

303
00:19:26,310 --> 00:19:30,016
With CDK there are actually some convenient methods for you

304
00:19:30,038 --> 00:19:34,000
to help. So what you can do is say table

305
00:19:34,500 --> 00:19:37,892
and then grant read write

306
00:19:37,946 --> 00:19:42,164
data, and then we can actually put

307
00:19:42,202 --> 00:19:45,156
in the resource that we want to grant this permissions to,

308
00:19:45,258 --> 00:19:49,076
which is the handler. So this will actually take care of all those

309
00:19:49,098 --> 00:19:52,760
things like creating the IM role, assigning the policies

310
00:19:53,420 --> 00:19:57,560
with the permissions to actually read the right data to the table.

311
00:19:57,900 --> 00:20:01,232
So now we want the API gateway be created

312
00:20:01,316 --> 00:20:04,888
that actually proxies the requests coming through the API gateway

313
00:20:04,984 --> 00:20:08,648
to our go application. So what we're

314
00:20:08,664 --> 00:20:12,860
going to create is something called an

315
00:20:12,930 --> 00:20:16,512
integration, and that integration will be

316
00:20:16,566 --> 00:20:20,316
a new lambda proxy integration. We provided

317
00:20:20,348 --> 00:20:24,028
some properties. One is the handler

318
00:20:24,204 --> 00:20:28,084
which points to the function handler and that

319
00:20:28,122 --> 00:20:31,444
we just created previously. The other one

320
00:20:31,482 --> 00:20:35,744
is that we have to provide the version one of the payload

321
00:20:35,792 --> 00:20:39,136
format provided by the API gateway. API gateway fee

322
00:20:39,168 --> 00:20:42,632
two has a new payload format only

323
00:20:42,686 --> 00:20:46,280
the lambda go library still is on version one.

324
00:20:46,350 --> 00:20:49,864
So that's why we say that the payload format should be version one.

325
00:20:50,062 --> 00:20:53,224
And then once we have created this integration,

326
00:20:53,352 --> 00:20:57,032
we actually provide this integration to an HTTP

327
00:20:57,096 --> 00:21:00,716
API which is in the AWS API gateway fee too.

328
00:21:00,818 --> 00:21:04,188
And again here we provide a stack, we provided a

329
00:21:04,194 --> 00:21:07,536
name called API and we gave it to the properties to

330
00:21:07,558 --> 00:21:11,484
say that the default integration will be the lambda

331
00:21:11,612 --> 00:21:14,976
integration that we provided before. So we

332
00:21:14,998 --> 00:21:18,292
now have all the resources created AWS. You know, if you create

333
00:21:18,346 --> 00:21:21,844
an API gateway, the URL that you're going to invoke is

334
00:21:21,882 --> 00:21:25,316
actually generated by the API gateway and we want

335
00:21:25,338 --> 00:21:27,460
to make use of that URL.

336
00:21:28,120 --> 00:21:32,216
So what we're going to do is actually output that URL back

337
00:21:32,318 --> 00:21:36,024
once we're creating the stack. So how you can do that is

338
00:21:36,062 --> 00:21:40,580
you can do like AWS CDK.

339
00:21:40,740 --> 00:21:44,452
We say new can, which stands for cloud formation

340
00:21:44,516 --> 00:21:47,916
output. Again, we provide, the stack provided a name which will

341
00:21:47,938 --> 00:21:51,864
be the API URL. And we say that the output props

342
00:21:51,912 --> 00:21:54,720
value will be the API URL.

343
00:21:58,430 --> 00:22:01,242
So this is basically all the code that we have to write.

344
00:22:01,376 --> 00:22:05,526
Now let's deploy this to our aws

345
00:22:05,638 --> 00:22:09,214
and let's see if we can get it

346
00:22:09,252 --> 00:22:09,840
running.

347
00:22:13,540 --> 00:22:17,360
Okay, in order to deploy using Cdk, what we type here is

348
00:22:17,430 --> 00:22:21,536
Cdk deploy and

349
00:22:21,558 --> 00:22:24,656
what it will do, it will execute our code, it will synthesize it

350
00:22:24,678 --> 00:22:28,196
towards cloud formation and it will actually

351
00:22:28,378 --> 00:22:32,256
start deploying our code to our AWS

352
00:22:32,288 --> 00:22:35,540
account. It starts building the assets.

353
00:22:37,100 --> 00:22:40,872
And over here it's going to ask because our code

354
00:22:40,926 --> 00:22:44,552
contains some changes to the security scheme. So it comes to create

355
00:22:44,606 --> 00:22:47,800
IAM roles and change policies. So it actually

356
00:22:47,870 --> 00:22:51,868
will ask you if you want to deploy these changes, just an extra

357
00:22:51,954 --> 00:22:55,416
level of security. This case it's

358
00:22:55,448 --> 00:22:58,540
okay. So we say yes, you can now see

359
00:22:58,610 --> 00:23:02,316
the Cdk stack starts deploying and it will start with creating

360
00:23:02,348 --> 00:23:06,124
the cloudformations change set and push it towards the cloudformation

361
00:23:06,172 --> 00:23:09,484
API. Now let's wait for the cloud formation

362
00:23:09,532 --> 00:23:11,600
stack to be deployed.

363
00:23:17,830 --> 00:23:20,870
Here's the table. It creates the IM rules.

364
00:23:28,840 --> 00:23:32,676
Okay, now the stack has been deployed and it returned to me the

365
00:23:32,698 --> 00:23:35,912
API URL. So let's start using

366
00:23:35,966 --> 00:23:39,370
this URL, see if our application now works.

367
00:23:40,300 --> 00:23:46,584
So using this curl command we say curl we

368
00:23:46,622 --> 00:23:49,630
provide an application Json content type.

369
00:23:50,000 --> 00:23:54,216
Let's put in the URL that just has been shown

370
00:23:54,248 --> 00:23:57,948
to us. So as you

371
00:23:57,954 --> 00:24:01,840
can see, it returns to me the slack that has been generated.

372
00:24:03,140 --> 00:24:06,736
Also what was the original URL. So now we can

373
00:24:06,758 --> 00:24:10,544
actually use this slack by user going to

374
00:24:10,582 --> 00:24:11,170
the,

375
00:24:18,980 --> 00:24:24,146
then we paste in the slack and

376
00:24:24,168 --> 00:24:27,750
AWS you do. So you see, now it returns and move permanently

377
00:24:28,970 --> 00:24:32,738
towards that euro, meaning that our API that

378
00:24:32,764 --> 00:24:36,634
we have deployed our go application is working.

379
00:24:36,832 --> 00:24:40,570
So now you have seen how easy it could be to deploy your go application

380
00:24:40,720 --> 00:24:44,442
using CDk with go from the

381
00:24:44,576 --> 00:24:48,094
ide you already know and just the number

382
00:24:48,132 --> 00:24:51,760
of lines you needed to deploy this type of application.

383
00:24:52,370 --> 00:24:56,606
AWS also provides something called AWS solution constructs which

384
00:24:56,628 --> 00:25:00,034
are like architecture patterns for you, available as open

385
00:25:00,072 --> 00:25:03,486
source extensions for CDK. It helps

386
00:25:03,518 --> 00:25:07,454
you to assemble production ready workloads

387
00:25:07,582 --> 00:25:10,994
according to the best practices that we provide for

388
00:25:11,032 --> 00:25:15,462
such solutions. So this is a growing library of best practices and

389
00:25:15,516 --> 00:25:19,174
you can filter to find the right solutions which matches your use

390
00:25:19,212 --> 00:25:22,614
case. So I recommend you to take a look

391
00:25:22,732 --> 00:25:26,234
and see if they can actually work for your solutions as well.

392
00:25:26,352 --> 00:25:29,910
CDK is an open ecosystem, so we have a public roadmap

393
00:25:29,990 --> 00:25:33,546
to show what features are prioritized by customer feedback and we

394
00:25:33,568 --> 00:25:36,986
are happy to have many contributions from the community and would

395
00:25:37,008 --> 00:25:40,766
like to love to have your voice in this future

396
00:25:40,868 --> 00:25:44,782
development of the tool. There are also many other resources that you can be found

397
00:25:44,916 --> 00:25:49,154
around CDK, like the awesome CDK repository which

398
00:25:49,192 --> 00:25:52,322
is like a collection of third party level three

399
00:25:52,376 --> 00:25:55,806
construct libraries. There's also something called CDK patterns

400
00:25:55,838 --> 00:26:00,142
and feel free to inspect how others are building service compositions.

401
00:26:00,286 --> 00:26:03,446
So there are plenty of resources out there if you want to get started with

402
00:26:03,468 --> 00:26:07,126
CDK, such as the CDK workshop which

403
00:26:07,148 --> 00:26:10,598
is a workshop that guides you step by step

404
00:26:10,764 --> 00:26:14,130
in how you can use CDK to deploy your applications.

405
00:26:14,290 --> 00:26:18,182
There's also CDK examples to show you some example implementations

406
00:26:18,246 --> 00:26:21,754
using CDK and many more. Feel free

407
00:26:21,792 --> 00:26:25,106
to drop into our GitHub channel or look us up at the GitHub

408
00:26:25,158 --> 00:26:28,654
repository where you can create issues but

409
00:26:28,692 --> 00:26:32,320
also pull requests and interact with the team if you need

410
00:26:33,010 --> 00:26:36,986
certain features added to the framework.

411
00:26:37,098 --> 00:26:41,022
There also are community resources out there like the CDK patterns.

412
00:26:41,166 --> 00:26:45,310
Also something that's nice to mention is CDK eighty s which is CDK

413
00:26:45,390 --> 00:26:48,846
to generate Kubernetes manifest files

414
00:26:49,038 --> 00:26:52,162
so you can also share them

415
00:26:52,296 --> 00:26:55,554
among your organization and have the same benefits that you see

416
00:26:55,592 --> 00:26:59,330
also for AWS resources but then tailored to kubernetes.

417
00:26:59,670 --> 00:27:02,858
For this, I would like to thank you listening to my talk.

418
00:27:02,984 --> 00:27:06,698
Hopefully CDK is a tool that's something for

419
00:27:06,784 --> 00:27:10,426
you to look into and enjoy the rest of your

420
00:27:10,448 --> 00:27:11,480
conference. Thank you.

