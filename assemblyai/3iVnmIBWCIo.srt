1
00:00:27,490 --> 00:00:30,594
Welcome everybody. Today we will learn how modern

2
00:00:30,642 --> 00:00:33,894
browser APIs can enhance our web projects and help us

3
00:00:33,932 --> 00:00:37,366
to think and design features in a new way. As we

4
00:00:37,388 --> 00:00:40,546
will see, many of these APIs have the goal to close the feature gap

5
00:00:40,578 --> 00:00:44,214
with the native apps, allowing to deliver a richer experience to our

6
00:00:44,252 --> 00:00:47,954
users and offer functionalities that were so far precluded

7
00:00:48,002 --> 00:00:51,870
to web applications and available only of native apps.

8
00:00:52,450 --> 00:00:56,110
I will show you several demos and of course all the code

9
00:00:56,180 --> 00:00:59,486
behind each of the API that we present. However,

10
00:00:59,588 --> 00:01:02,994
I will focus more on live examples in order

11
00:01:03,032 --> 00:01:06,126
to keep this talk more entertaining and dynamic,

12
00:01:06,318 --> 00:01:09,826
but also because I left many comments in

13
00:01:09,848 --> 00:01:12,946
the code so it's very easy to follow along.

14
00:01:13,128 --> 00:01:16,774
Now, if looking at the picture, you're wondering whether

15
00:01:16,812 --> 00:01:19,842
we can launch a space rocket with our browser,

16
00:01:19,986 --> 00:01:23,702
well, the answer is not completely yet, or at least

17
00:01:23,756 --> 00:01:26,870
I would not try it with Internet Explorer eleven.

18
00:01:28,090 --> 00:01:31,626
But that said, JavaScript went to the space this

19
00:01:31,648 --> 00:01:34,390
is the Dragon two console using Chromium,

20
00:01:34,470 --> 00:01:37,450
JavaScript and C Plus plus for the Tetch command.

21
00:01:37,950 --> 00:01:41,546
The Dragon is the first spacecraft with the touch screens.

22
00:01:41,658 --> 00:01:45,630
The interface makes extensive users of web components and the custom

23
00:01:45,700 --> 00:01:48,000
reactive framework. Of course,

24
00:01:49,490 --> 00:01:53,134
as you can see, we can still have some hardware buttons

25
00:01:53,182 --> 00:01:57,538
and toggle in order to do

26
00:01:57,624 --> 00:02:01,026
the most critical operations. However,

27
00:02:01,128 --> 00:02:04,866
even if with our web project we don't plan to go to the

28
00:02:04,888 --> 00:02:08,566
space, still we can benefit from browser APIs and we

29
00:02:08,588 --> 00:02:12,642
will shortly see how before proceeding,

30
00:02:12,706 --> 00:02:15,986
just a couple of words about me my name is Francesco

31
00:02:16,018 --> 00:02:19,606
Leardini and I work as a senior consultant and angular trainer

32
00:02:19,638 --> 00:02:23,242
at Trivadis. Trivadis is an IT consultancy company

33
00:02:23,376 --> 00:02:27,558
based in Switzerland and covering a wide set of technologies.

34
00:02:27,734 --> 00:02:30,502
Even though I work as a full stack engineer,

35
00:02:30,566 --> 00:02:33,534
having net and C sharp as my backend side,

36
00:02:33,652 --> 00:02:37,466
I have a special interest about web technologies like progressive

37
00:02:37,498 --> 00:02:40,846
web apps, angular and in general modern web.

38
00:02:41,028 --> 00:02:45,054
But enough about me. Without further ado, let's start our API

39
00:02:45,102 --> 00:02:49,134
journey now. The first API

40
00:02:49,182 --> 00:02:53,166
we will see is the page visibility API. It provides events

41
00:02:53,198 --> 00:02:57,750
we can listen to in order to know when the document changes visibility.

42
00:02:59,050 --> 00:03:02,758
When the user minimize, for example,

43
00:03:02,844 --> 00:03:06,754
the page or a new browser tab is open. This API

44
00:03:06,802 --> 00:03:10,854
will trigger an event so that we can query the document

45
00:03:10,902 --> 00:03:14,698
object in order to know precisely whether that

46
00:03:14,784 --> 00:03:18,010
page is hidden or is visible.

47
00:03:18,510 --> 00:03:21,774
We can think practical scenarios of usage of this

48
00:03:21,812 --> 00:03:25,150
API when we have, for example,

49
00:03:25,220 --> 00:03:28,606
a carousel with some rotating products that we want to

50
00:03:28,628 --> 00:03:32,640
present our users, and we can stop

51
00:03:34,230 --> 00:03:37,582
the carousel from presenting the next item

52
00:03:37,646 --> 00:03:41,038
if the page is minimized, for example, or not visible.

53
00:03:41,214 --> 00:03:45,022
Another case could be a client application constantly

54
00:03:45,086 --> 00:03:48,962
or regularly pulling data from the server in order to fetch fresh

55
00:03:49,026 --> 00:03:52,502
new records. We can stop it until the page

56
00:03:52,556 --> 00:03:56,354
is visible again in order to optimize the network traffic.

57
00:03:56,482 --> 00:04:00,730
And this is particularly important for mobile users.

58
00:04:01,630 --> 00:04:05,450
Let's see then. Now our first demo

59
00:04:05,520 --> 00:04:09,002
APIs and at the end of the talk

60
00:04:09,056 --> 00:04:12,314
I will provide you the URL for the GitHub

61
00:04:12,362 --> 00:04:16,574
repo. It's the API that we will use

62
00:04:16,612 --> 00:04:20,826
is made with angular and angular materials,

63
00:04:20,858 --> 00:04:24,594
but all the browser API that we will see

64
00:04:24,632 --> 00:04:28,546
today, they are absolutely framework agnostic. Therefore you can use in

65
00:04:28,568 --> 00:04:31,550
react, vue, js or even vanilla JavaScript.

66
00:04:31,630 --> 00:04:33,940
They all work without any problem.

67
00:04:36,170 --> 00:04:39,878
Every section of each API that we will

68
00:04:40,044 --> 00:04:43,158
discover and describe is composed by a short

69
00:04:43,244 --> 00:04:47,774
description eventually. For the APIs that are still experimental,

70
00:04:47,842 --> 00:04:52,550
it's described if you have to use HTTPs eventually

71
00:04:52,710 --> 00:04:56,454
and enable in chrome some flags

72
00:04:56,502 --> 00:05:00,314
in order to make it working, then there is the core of the

73
00:05:00,352 --> 00:05:04,074
demo itself in the central part and at the bottom there is a browser

74
00:05:04,122 --> 00:05:07,998
compatibility section, also very important because, and you

75
00:05:08,004 --> 00:05:11,498
will see especially for the other more experimental APIs,

76
00:05:11,594 --> 00:05:14,894
it will tell you how bright and widely

77
00:05:15,022 --> 00:05:19,342
users and covered is this API for the different browser.

78
00:05:19,406 --> 00:05:22,782
In this case, page visibility API is not the newest

79
00:05:22,846 --> 00:05:28,550
API and therefore is widely supported

80
00:05:28,970 --> 00:05:32,438
for the demo. We have a video that for us is extremely important

81
00:05:32,524 --> 00:05:36,486
and we want that our users won't lose even a frame of it.

82
00:05:36,588 --> 00:05:40,060
Therefore when we are here we can let it

83
00:05:41,630 --> 00:05:42,860
joining it.

84
00:05:45,470 --> 00:05:48,570
When we changing visibility,

85
00:05:48,910 --> 00:05:52,986
our application detects that the document

86
00:05:53,018 --> 00:05:56,318
page is not visible anymore and here for the sake of a

87
00:05:56,324 --> 00:06:00,286
demo I made, so that the title also reflects this state.

88
00:06:00,388 --> 00:06:04,098
So the video is on pause when I go back again,

89
00:06:04,184 --> 00:06:08,350
then to the previous page, the API will trigger

90
00:06:08,430 --> 00:06:12,626
an event that now the document is visible again and the

91
00:06:12,648 --> 00:06:16,614
video will automatically play again from exactly the

92
00:06:16,732 --> 00:06:18,440
second we left it.

93
00:06:21,050 --> 00:06:25,430
So this is a simple case how we can implement

94
00:06:25,930 --> 00:06:29,670
in a real case how we can implement this API,

95
00:06:29,830 --> 00:06:34,060
the code behind and this is also a very positive and

96
00:06:34,510 --> 00:06:37,834
nice thing is that it's very easy to implement this

97
00:06:37,872 --> 00:06:40,922
API. Now, leaving aside,

98
00:06:40,986 --> 00:06:45,482
as I said, all the boilerplate about the angular framework,

99
00:06:45,626 --> 00:06:49,502
it's very simple. The logic we have

100
00:06:49,556 --> 00:06:53,026
a video element whose I get a

101
00:06:53,048 --> 00:06:57,502
reference through a video element template

102
00:06:57,646 --> 00:07:00,898
variable that I can get in the component side

103
00:07:00,984 --> 00:07:04,820
and I can use at this level in the class

104
00:07:05,130 --> 00:07:08,498
so that I can listen for a document visibility

105
00:07:08,594 --> 00:07:12,182
change event. And then when this event

106
00:07:12,236 --> 00:07:15,894
occurs I can query the document object and see

107
00:07:15,932 --> 00:07:19,226
whether it's hidden or not and then apply the

108
00:07:19,248 --> 00:07:23,050
logic I want. In this case I stop or

109
00:07:23,200 --> 00:07:27,398
I pause or I play again the video according to the visibility

110
00:07:27,494 --> 00:07:30,910
of the document. Very simple here down

111
00:07:30,980 --> 00:07:34,330
we just changing the title, but this is not really relevant.

112
00:07:34,410 --> 00:07:37,600
It's just for the purpose of the demo.

113
00:07:42,370 --> 00:07:45,598
Screen wakelock API is a very cool API.

114
00:07:45,694 --> 00:07:49,086
Actually one of my favorite to save battery.

115
00:07:49,118 --> 00:07:53,234
Mobile devices typically go on

116
00:07:53,272 --> 00:07:56,622
sleep mode or idle after a specific timeout.

117
00:07:56,686 --> 00:07:59,974
Could be 15 30 seconds in most of cases, or if

118
00:08:00,012 --> 00:08:03,346
you set it for a longer period. Of course, even 1 minute

119
00:08:03,538 --> 00:08:07,190
on my phone though is typically 15 seconds.

120
00:08:08,350 --> 00:08:11,926
The screen Wakelock API provides a way to prevent

121
00:08:11,958 --> 00:08:15,034
the device from dimming and locking the screen.

122
00:08:15,232 --> 00:08:19,626
This is very important for web applications that

123
00:08:19,728 --> 00:08:23,822
have to provide some content through the web app

124
00:08:23,956 --> 00:08:28,074
because allows to keep the screen locked and always active

125
00:08:28,122 --> 00:08:31,902
while displaying its content. Or another case

126
00:08:31,956 --> 00:08:35,394
is a cooking web application. Provide some kind

127
00:08:35,432 --> 00:08:38,738
of recipe or steps that the user has to follow.

128
00:08:38,904 --> 00:08:43,682
And this is as you can imagine, very important.

129
00:08:43,816 --> 00:08:47,654
If we have to use our ends, for example for

130
00:08:47,692 --> 00:08:51,430
some parts of the recipe and to keep

131
00:08:51,500 --> 00:08:54,918
the screen always active and not locked. Think about if you

132
00:08:54,924 --> 00:08:58,458
are in a situation like this and all in a sudden the screen

133
00:08:58,544 --> 00:09:01,980
goes dim and idle and you have to unlock it when

134
00:09:02,350 --> 00:09:06,140
your hands are in that stage. Not very nice.

135
00:09:08,590 --> 00:09:12,206
For this demo I will use my phone

136
00:09:12,308 --> 00:09:15,840
because of course I cannot use my desktop for that.

137
00:09:17,970 --> 00:09:21,486
And I will mirror it so that we can

138
00:09:21,508 --> 00:09:25,822
have side by side my phone here mirrored

139
00:09:25,886 --> 00:09:29,678
and the desktop version aside, I chose

140
00:09:29,854 --> 00:09:34,206
specifically for this API this recipe

141
00:09:34,238 --> 00:09:38,134
that is extremely long. Not because the recipe is good,

142
00:09:38,172 --> 00:09:42,194
I never tried, but because to give a real taste

143
00:09:42,242 --> 00:09:47,286
or a real case of very

144
00:09:47,388 --> 00:09:51,322
long and with multisteps recipe that we have to follow and use our

145
00:09:51,376 --> 00:09:55,094
ends to bake it and to prepare it. So let's

146
00:09:55,142 --> 00:09:58,602
imagine we start cooking and I leave my phone there.

147
00:09:58,736 --> 00:10:02,378
In the meantime I go on explaining about the API.

148
00:10:02,474 --> 00:10:05,806
The API works only on secure connections and

149
00:10:05,908 --> 00:10:09,550
we need user interactions in order to

150
00:10:09,620 --> 00:10:13,126
enable and to get a lock, a sentinel

151
00:10:13,178 --> 00:10:16,862
lock. We can see in the meantime that now my phone got dim.

152
00:10:16,926 --> 00:10:20,594
So let's imagine we have our dirty hands and this

153
00:10:20,632 --> 00:10:23,140
is the case. Not very nice,

154
00:10:24,390 --> 00:10:29,282
but if we explicitly

155
00:10:29,426 --> 00:10:33,698
say to keep the user locked through this API

156
00:10:33,794 --> 00:10:38,066
now we'll go on talking and we will see that without interacting

157
00:10:38,098 --> 00:10:41,866
with my phone, the phone will stay active. And so we can

158
00:10:41,968 --> 00:10:45,754
always keep going on with

159
00:10:45,792 --> 00:10:49,434
the recipe. Of course, probably we have to scroll down a little bit,

160
00:10:49,472 --> 00:10:52,798
but we can always use the tip of our notes for that.

161
00:10:52,884 --> 00:10:56,400
It's much easier than having to unlock completely the phone.

162
00:10:56,930 --> 00:11:00,730
So as I said that we need to get the Sentinel unlock

163
00:11:00,890 --> 00:11:05,054
and I also provide another checkbox

164
00:11:05,182 --> 00:11:09,220
once the first one is checked to say that we wanted to

165
00:11:09,590 --> 00:11:13,858
get the lockback if we navigate again

166
00:11:13,944 --> 00:11:17,250
to the page, because when we lose

167
00:11:17,330 --> 00:11:21,318
the focus or when we navigate somewhere else, we lose this

168
00:11:21,484 --> 00:11:25,302
wake lock sentinel. But doing

169
00:11:25,356 --> 00:11:29,626
this we can instruct and implement some custom logic that we can

170
00:11:29,808 --> 00:11:33,798
request it again if the user asked like that explicitly

171
00:11:33,894 --> 00:11:36,698
and then automatically re enable it.

172
00:11:36,784 --> 00:11:40,650
So for the users it will be completely transparent.

173
00:11:41,410 --> 00:11:44,762
As you can see the screen didn't dim,

174
00:11:44,826 --> 00:11:48,222
so I now interact with it, but all the time

175
00:11:48,276 --> 00:11:52,254
that passed so far the screen didn't go on

176
00:11:52,292 --> 00:11:55,874
idle. So it's very interesting for these kind of

177
00:11:55,992 --> 00:12:00,386
scenarios. And as

178
00:12:00,408 --> 00:12:03,300
we can see in the template is very simple.

179
00:12:05,110 --> 00:12:08,466
When the checkbox change its state, we invoke the lock

180
00:12:08,498 --> 00:12:12,230
enable change method. What this does it

181
00:12:12,300 --> 00:12:16,374
toggle the

182
00:12:16,412 --> 00:12:20,470
sentinel state and we can, if not enabled

183
00:12:20,550 --> 00:12:24,202
we can request the wakelock. Otherwise we

184
00:12:24,256 --> 00:12:27,734
release it. To request Wakelock we invoke the request

185
00:12:27,782 --> 00:12:31,706
method of course on the Wakelock object and we pass the

186
00:12:31,728 --> 00:12:35,102
screen parameter. This at the moment is the only value

187
00:12:35,156 --> 00:12:38,254
we can pass. In the past there was also a system value,

188
00:12:38,372 --> 00:12:42,222
but this has been removed and that from this moment on

189
00:12:42,276 --> 00:12:45,570
our screen will be locked and dim.

190
00:12:46,630 --> 00:12:49,602
If we move away.

191
00:12:49,736 --> 00:12:54,002
I can eventually, but this part is only for demo

192
00:12:54,136 --> 00:12:58,066
purposes, to show through this sentinel active variable,

193
00:12:58,178 --> 00:13:01,766
to show in the UI the state of our sentinel, so we

194
00:13:01,788 --> 00:13:05,046
can listen eventually to a release event in

195
00:13:05,068 --> 00:13:09,062
order to know whether the unlock has been released, when we navigate

196
00:13:09,126 --> 00:13:12,986
somewhere else or when we

197
00:13:13,088 --> 00:13:16,714
navigate completely away from our application. Of course we can

198
00:13:16,832 --> 00:13:20,026
release all the resources in the NG and

199
00:13:20,048 --> 00:13:23,822
destroy hook and here for example we release the lock as well.

200
00:13:23,956 --> 00:13:27,214
And this is done by invoking the release method on

201
00:13:27,252 --> 00:13:30,842
the lock sentinel object that we got initially.

202
00:13:30,986 --> 00:13:34,754
So very simple yet very powerful to implement this

203
00:13:34,792 --> 00:13:38,446
kind of functionalities.

204
00:13:38,558 --> 00:13:42,642
Like for example if we have to provide a cook application,

205
00:13:42,776 --> 00:13:47,074
web application ambient

206
00:13:47,122 --> 00:13:50,978
light API is still a very experimental APIs,

207
00:13:51,074 --> 00:13:55,222
but I think is really interesting because it might

208
00:13:55,356 --> 00:13:58,982
make us think already to some new scenarios and new capabilities

209
00:13:59,046 --> 00:14:03,494
that we can use to leverage new functionalities

210
00:14:03,622 --> 00:14:07,926
on web applications, especially on mobile phones

211
00:14:07,958 --> 00:14:11,600
or at least devices that are capable of

212
00:14:12,610 --> 00:14:16,286
reading the light level around the

213
00:14:16,308 --> 00:14:19,946
device itself. The ambient light sensor

214
00:14:20,058 --> 00:14:24,050
interface is a part of the sensor APIs collection

215
00:14:24,390 --> 00:14:27,858
and gives information about the light

216
00:14:27,944 --> 00:14:31,474
registered by the target device, and then we can use

217
00:14:31,512 --> 00:14:33,460
this within our application.

218
00:14:35,130 --> 00:14:40,482
Again, for this APIs

219
00:14:40,546 --> 00:14:48,934
I will use my phone and as you can see already in

220
00:14:48,972 --> 00:14:53,242
the browser compatibility section is not exactly well

221
00:14:53,296 --> 00:14:57,514
supported yet. It's still experimental. Plus we need

222
00:14:57,632 --> 00:15:00,782
an extra flag in Chrome to be enabled in order

223
00:15:00,836 --> 00:15:04,960
to use it. But still, let's see how does it work

224
00:15:06,930 --> 00:15:10,720
if now with the phone I go close to

225
00:15:11,410 --> 00:15:14,946
my lamp or my window. So as source of light we can

226
00:15:14,968 --> 00:15:18,754
see that the light level increases or

227
00:15:18,872 --> 00:15:22,834
decreases according to how far or how strong is the light.

228
00:15:23,032 --> 00:15:26,920
Now if I slowly go away from it until

229
00:15:27,450 --> 00:15:30,498
the specific threshold is reached,

230
00:15:30,674 --> 00:15:34,502
we can see that the live level, for example is 50 or now even

231
00:15:34,556 --> 00:15:38,742
dimmed is 50, and then the whole interface

232
00:15:38,806 --> 00:15:41,434
will automatically switch into,

233
00:15:41,552 --> 00:15:44,854
let's say dark mode. This is the feature I implemented

234
00:15:44,902 --> 00:15:49,098
by using the light level

235
00:15:49,184 --> 00:15:52,878
around the phone. There are for sure many other

236
00:15:52,964 --> 00:15:56,590
cool scenarios of usage of this, but I found this

237
00:15:56,660 --> 00:16:00,320
could be quite interesting. So the possibility of

238
00:16:01,010 --> 00:16:04,354
giving our users exactly as it

239
00:16:04,392 --> 00:16:08,606
was also for the Google Maps

240
00:16:08,798 --> 00:16:12,066
native app so that we can switch if we are

241
00:16:12,088 --> 00:16:15,638
in a gallery, for example, automatically the application switch in the night mode or

242
00:16:15,644 --> 00:16:19,606
in dark mode, and we can provide exactly through our web application

243
00:16:19,788 --> 00:16:23,510
exactly. We can offer the same functionalities.

244
00:16:25,370 --> 00:16:30,038
Again, it's very simple to implement this API.

245
00:16:30,134 --> 00:16:34,102
It's always good when we use these APIs,

246
00:16:34,166 --> 00:16:38,582
especially experimental one, to prove if these are supported

247
00:16:38,726 --> 00:16:42,494
by our browser or not, and eventually to provide a message if

248
00:16:42,532 --> 00:16:45,806
not, or if available some fallback or

249
00:16:45,828 --> 00:16:50,622
otherwise simply silently ignore the functionality so

250
00:16:50,676 --> 00:16:54,846
we can read the ambient light by creating

251
00:16:54,878 --> 00:16:59,266
a new instance of the ambient light sensor object.

252
00:16:59,448 --> 00:17:02,750
Once we have this sensor instance,

253
00:17:02,910 --> 00:17:05,862
we can listen on errors, of course,

254
00:17:05,916 --> 00:17:09,334
especially if we didn't provide permissions for

255
00:17:09,372 --> 00:17:12,870
it. Then if granted, we can

256
00:17:12,940 --> 00:17:15,990
try again to read again the ambient light,

257
00:17:16,060 --> 00:17:20,726
and if the user provided so granted permission

258
00:17:20,758 --> 00:17:23,798
for that, we can start done reading.

259
00:17:23,974 --> 00:17:25,980
And then here for example,

260
00:17:26,510 --> 00:17:30,906
while we start reading

261
00:17:31,098 --> 00:17:35,514
with a start method, we can keep on lively

262
00:17:35,642 --> 00:17:39,338
reading the new values and then act accordingly.

263
00:17:39,434 --> 00:17:42,646
In this case, after we start reading light values,

264
00:17:42,698 --> 00:17:46,482
I constantly react by

265
00:17:46,536 --> 00:17:50,050
invoking an update theme method and passing the

266
00:17:50,200 --> 00:17:53,554
illuminance value. This illuminance value gives

267
00:17:53,592 --> 00:17:57,142
us an idea of how bright or

268
00:17:57,196 --> 00:18:00,614
how dark is the area or room around the

269
00:18:00,652 --> 00:18:03,926
devices. I used these values as threshold. Of course you

270
00:18:03,948 --> 00:18:07,640
can go much more specific, but broadly speaking,

271
00:18:07,950 --> 00:18:12,054
between ten and 50 is a dark or not well illuminated

272
00:18:12,102 --> 00:18:15,850
environment, and then above this level

273
00:18:15,920 --> 00:18:19,046
is a normal or even a bright environment.

274
00:18:19,238 --> 00:18:22,718
Therefore you can even use different values in order

275
00:18:22,724 --> 00:18:26,458
to provide even more specific or advanced scenarios.

276
00:18:26,554 --> 00:18:30,414
But for this example it was enough

277
00:18:30,532 --> 00:18:33,522
to check whether it was a dark environment or not,

278
00:18:33,656 --> 00:18:37,022
and then simply switch to bright

279
00:18:37,086 --> 00:18:40,866
or dark mode accordingly. That's it. Very simple,

280
00:18:40,968 --> 00:18:44,146
and yet could be very

281
00:18:44,248 --> 00:18:47,954
interesting to provide some functionalities that are indeed nowadays

282
00:18:48,002 --> 00:18:53,506
are still quite innovative. And new file

283
00:18:53,538 --> 00:18:57,090
system assets is another very interesting API

284
00:18:57,170 --> 00:19:00,538
because it offers a new way to manipulate files in

285
00:19:00,544 --> 00:19:04,106
the local file system and provide in this way a

286
00:19:04,128 --> 00:19:07,898
much better user experience because it offer

287
00:19:07,984 --> 00:19:11,882
the same functionality that is given or provided through a native

288
00:19:11,946 --> 00:19:15,518
app. When we wanted to

289
00:19:15,604 --> 00:19:18,926
save a file or apply the changes to

290
00:19:18,948 --> 00:19:22,542
that file, we don't have to download it and save to a specific new

291
00:19:22,596 --> 00:19:26,706
location every time we want to edit or edit its content, but we

292
00:19:26,728 --> 00:19:30,466
can apply the changes straight and dirtily to it. We can

293
00:19:30,488 --> 00:19:34,610
even implement an autosave functionality that gets

294
00:19:34,680 --> 00:19:37,510
automatically triggered, maybe with a timeout.

295
00:19:38,410 --> 00:19:41,874
This system assets API offers two methods.

296
00:19:41,922 --> 00:19:45,522
One is called show open file Picker

297
00:19:45,586 --> 00:19:49,066
and another is a show save file picker. Of course, as the

298
00:19:49,088 --> 00:19:53,770
name suggests, once we invoke these files, it trigger

299
00:19:54,590 --> 00:19:58,058
a file picker dialog to open or save a

300
00:19:58,064 --> 00:20:01,786
file, respectively. Once a

301
00:20:01,808 --> 00:20:05,034
file is open, we get an API.

302
00:20:05,162 --> 00:20:09,086
Through this API we get a file handle object we can use to

303
00:20:09,108 --> 00:20:12,850
interact with the file itself, getting for example information about the

304
00:20:12,920 --> 00:20:16,340
size or the name extension and so on.

305
00:20:16,870 --> 00:20:20,290
And typically we want to keep somewhere

306
00:20:20,630 --> 00:20:24,878
a reference to this file handle so that we can reuse it to

307
00:20:25,064 --> 00:20:28,950
save the changes that we did to the file straight

308
00:20:29,770 --> 00:20:33,510
to the physical file itself without having to trigger

309
00:20:35,370 --> 00:20:38,842
this picker dialogue or file dialogue again

310
00:20:38,896 --> 00:20:42,506
and again. Let's see now in action. How does

311
00:20:42,608 --> 00:20:45,894
it work? This is our file system assets

312
00:20:45,942 --> 00:20:49,754
API demo, and it's a typical case where we

313
00:20:49,792 --> 00:20:53,242
have, for example, to create a text file.

314
00:20:53,306 --> 00:20:57,518
We don't want to save it with a file save

315
00:20:57,684 --> 00:21:01,934
dialog every time and overwrites and overwrites the

316
00:21:01,972 --> 00:21:06,338
file more and more again. So let's say welcome

317
00:21:06,504 --> 00:21:09,698
conf 42 and then we want

318
00:21:09,784 --> 00:21:13,362
save as invoke. We want to save somewhere. Let's say

319
00:21:13,416 --> 00:21:17,462
we want to save to a new file we call conf 42.

320
00:21:17,516 --> 00:21:21,078
Txt and we save it. We can see

321
00:21:21,164 --> 00:21:24,758
on the top right of

322
00:21:24,844 --> 00:21:29,286
the browser that a new icon appeared that grants

323
00:21:29,398 --> 00:21:33,580
the read permission and also

324
00:21:34,110 --> 00:21:37,114
read and write because we create a brand new.

325
00:21:37,232 --> 00:21:41,134
So this explicitly gives read and

326
00:21:41,172 --> 00:21:45,390
write permissions to edit the file.

327
00:21:45,810 --> 00:21:48,640
And we can see this reflected here.

328
00:21:49,170 --> 00:21:53,598
Now if we edit this file,

329
00:21:53,694 --> 00:21:58,370
we can see also we have a new button, just save edited

330
00:21:59,430 --> 00:22:04,094
and I click save. These changes is already applied

331
00:22:04,142 --> 00:22:08,070
to the file itself thanks to this file ender that keeps this

332
00:22:08,220 --> 00:22:12,102
connection open to our file. This is very cool. We didn't have to open

333
00:22:12,156 --> 00:22:15,462
again the file dialog for that.

334
00:22:15,596 --> 00:22:18,838
And to prove that, let's say we go back in

335
00:22:18,844 --> 00:22:22,650
the home, I go back here. So brand new page and I open

336
00:22:22,720 --> 00:22:26,554
now the same file we created. So conf 42.

337
00:22:26,592 --> 00:22:29,930
Txt. When I open it, we can see that the content

338
00:22:30,000 --> 00:22:35,662
that we in the new content that we added before has

339
00:22:35,716 --> 00:22:39,546
been reflected as indeed

340
00:22:39,578 --> 00:22:43,006
it was saved correctly. And we have

341
00:22:43,108 --> 00:22:46,990
on the top always the information with the icon that

342
00:22:47,060 --> 00:22:50,766
we can edit this file. So very nice to

343
00:22:50,788 --> 00:22:54,142
give really a new set of possibilities to

344
00:22:54,196 --> 00:22:56,870
our applications.

345
00:22:58,250 --> 00:23:00,806
So looking at the code,

346
00:23:00,908 --> 00:23:04,326
everything starts when we depend,

347
00:23:04,428 --> 00:23:08,758
when we save a file. Let's say we create a brand new file

348
00:23:08,934 --> 00:23:12,362
and we click on save. The file handle in this case

349
00:23:12,416 --> 00:23:16,220
has not been created. Therefore we

350
00:23:17,070 --> 00:23:20,650
invoke the save as method. The save as

351
00:23:20,720 --> 00:23:24,278
method tries to get the handle

352
00:23:24,374 --> 00:23:28,560
itself and the etle itself is given back from

353
00:23:29,090 --> 00:23:32,478
these respectively, these methods that I mentioned before.

354
00:23:32,564 --> 00:23:36,382
So the show save file, richer or otherwise

355
00:23:36,446 --> 00:23:40,126
if we have just to open it, is the show open file picker.

356
00:23:40,158 --> 00:23:44,530
If we want to open a file and not save a new file

357
00:23:44,890 --> 00:23:49,014
when we save it, or when we provide

358
00:23:49,132 --> 00:23:53,458
options for the file dialogue, we can of course provide a description

359
00:23:53,554 --> 00:23:57,518
which kind of accepted extension

360
00:23:57,634 --> 00:24:01,146
we want to allow and so on. But the

361
00:24:01,168 --> 00:24:05,046
cool thing is that now once we get back this file

362
00:24:05,078 --> 00:24:08,778
handle and we keep it in

363
00:24:08,784 --> 00:24:12,286
the context of our application, so it's up

364
00:24:12,308 --> 00:24:16,190
here. Then let's imagine we changing

365
00:24:16,260 --> 00:24:19,902
the content of the file and we click on save. So not save

366
00:24:19,956 --> 00:24:23,620
as if we click on save that

367
00:24:23,990 --> 00:24:27,182
the file we can check the file handle is existing.

368
00:24:27,246 --> 00:24:31,954
Yes. In that case we go straight to

369
00:24:31,992 --> 00:24:35,806
update the content using this file handle.

370
00:24:35,918 --> 00:24:40,230
So create a writable and the rest is just a normal write

371
00:24:40,300 --> 00:24:44,294
to file code. So the cool thing is to keep in mind

372
00:24:44,332 --> 00:24:48,266
is this file handle and the possibility that it opens for

373
00:24:48,288 --> 00:24:51,850
us. So kind of keeping an open

374
00:24:51,920 --> 00:24:55,222
connection to the instance of the physical

375
00:24:55,286 --> 00:24:58,794
file and then allow us to push all

376
00:24:58,832 --> 00:25:02,762
the saves and the changes straight

377
00:25:02,906 --> 00:25:04,480
to the file itself.

378
00:25:07,910 --> 00:25:11,182
Web share is also another cool API.

379
00:25:11,326 --> 00:25:15,154
It allows to share an object with a text content, a title

380
00:25:15,202 --> 00:25:19,190
and a URL using the device native content sharing capabilities

381
00:25:19,770 --> 00:25:23,266
let's imagine native apps like Twitter,

382
00:25:23,378 --> 00:25:26,698
Facebook, WhatsApp, but also email

383
00:25:26,784 --> 00:25:31,146
or text messaging and other

384
00:25:31,248 --> 00:25:35,178
native apps that allow to receive content and so

385
00:25:35,264 --> 00:25:38,710
share specific content through the app

386
00:25:38,800 --> 00:25:42,490
itself. At least one of these three properties.

387
00:25:42,570 --> 00:25:45,966
So title, text or body text or URL must

388
00:25:45,988 --> 00:25:50,058
be defined. But it's best practice to define them all anytime

389
00:25:50,234 --> 00:25:54,258
because we don't know which application the user at the end will choose.

390
00:25:54,424 --> 00:25:57,650
If a text application like WhatsApp for example,

391
00:25:57,800 --> 00:26:01,954
the title might not be that important. But if

392
00:26:02,152 --> 00:26:05,774
an email app is chosen instead then the title

393
00:26:05,822 --> 00:26:09,026
is used automatically as can email subject.

394
00:26:09,138 --> 00:26:13,074
Therefore we have always to provide and define

395
00:26:13,122 --> 00:26:17,370
always if possible of course, always the three properties.

396
00:26:18,030 --> 00:26:21,994
Let's see now how does it look like? It's interesting to

397
00:26:22,112 --> 00:26:25,930
see that Chrome recently allowed also

398
00:26:26,000 --> 00:26:29,326
on the desktop version the

399
00:26:29,348 --> 00:26:33,374
possibility to use this web

400
00:26:33,412 --> 00:26:35,920
share API. Now if I click on it,

401
00:26:36,850 --> 00:26:40,160
the desktop detects some

402
00:26:40,610 --> 00:26:45,154
applications that are capable of interact or

403
00:26:45,192 --> 00:26:48,338
use this API. A few months ago or

404
00:26:48,424 --> 00:26:51,460
in some previous version of Chrome this was not possible.

405
00:26:52,710 --> 00:26:56,246
I will throw for the demo use my phone because I think

406
00:26:56,268 --> 00:27:00,134
it's more interesting. So here there are the

407
00:27:00,172 --> 00:27:04,066
two cocktail or the two recipes

408
00:27:04,098 --> 00:27:07,274
for the cocktail that I prefer. And let's imagine I want to

409
00:27:07,312 --> 00:27:10,666
share it with some friend of mine. So we can provide the

410
00:27:10,688 --> 00:27:14,074
typical share icon to say okay, this content

411
00:27:14,272 --> 00:27:17,702
is shareable through some APIs, some native

412
00:27:17,766 --> 00:27:21,326
apps. Here for example, I have a list that are

413
00:27:21,508 --> 00:27:24,826
and I can even choose more, but I have a list of applications

414
00:27:24,858 --> 00:27:28,282
that could accept these shared

415
00:27:28,346 --> 00:27:32,174
objects. I take WhatsApp for example and select one

416
00:27:32,212 --> 00:27:36,290
contact. We can already see at the bottom that there is this

417
00:27:36,440 --> 00:27:40,770
object that is going to be shared and if I click on send

418
00:27:40,920 --> 00:27:44,338
I can send to the target contact, a title

419
00:27:44,434 --> 00:27:48,262
we can see and then body text and

420
00:27:48,316 --> 00:27:51,990
eventually at the bottom URL. So a very easy

421
00:27:52,060 --> 00:27:56,098
way to share content and to provide some more engagement for

422
00:27:56,204 --> 00:27:59,594
our web applications. Let's see now how does

423
00:27:59,632 --> 00:28:02,780
it look or how we can create it.

424
00:28:03,310 --> 00:28:07,642
So our share object,

425
00:28:07,776 --> 00:28:11,226
first of all we can define as we say title,

426
00:28:11,258 --> 00:28:14,350
text and URL. And there is even a second

427
00:28:14,420 --> 00:28:17,950
level web share that allows to share also

428
00:28:18,020 --> 00:28:19,950
files for example images.

429
00:28:20,690 --> 00:28:24,702
But that said the APIs is extremely

430
00:28:24,766 --> 00:28:28,670
simple, we just have to invoke the share method

431
00:28:28,750 --> 00:28:32,994
over the navigator object. Of course if the

432
00:28:33,032 --> 00:28:36,358
share API is allowed and this

433
00:28:36,444 --> 00:28:40,166
will prompt this share dialogue for

434
00:28:40,188 --> 00:28:44,120
us as we saw before. And then the users can pass

435
00:28:44,650 --> 00:28:48,982
the specific object that we can define here to the target

436
00:28:49,126 --> 00:28:52,330
or chosen web application.

437
00:28:52,480 --> 00:28:53,740
Native app sorry,

438
00:28:56,910 --> 00:29:01,210
contact richer this is also very experimental,

439
00:29:01,290 --> 00:29:05,402
but also discloses a wide set of potentialities

440
00:29:05,466 --> 00:29:09,118
for web applications because assessing the devices contact

441
00:29:09,204 --> 00:29:13,186
list so far has been always precluded to web application

442
00:29:13,288 --> 00:29:16,878
and it was a peculiarity of only native apps.

443
00:29:16,974 --> 00:29:20,610
But thanks to contact Picker API, we can now select

444
00:29:20,680 --> 00:29:24,866
contacts from the device list and use them within the context

445
00:29:24,978 --> 00:29:29,186
of a web application. We can extract properties

446
00:29:29,298 --> 00:29:32,758
from the contact list like the name, the email address,

447
00:29:32,844 --> 00:29:37,234
a phone number, the city address and

448
00:29:37,292 --> 00:29:41,146
an icon. Of course if these are all provided and then

449
00:29:41,168 --> 00:29:44,774
we can use this according how we want within the context

450
00:29:44,822 --> 00:29:48,554
of our web applications. Again, since we

451
00:29:48,592 --> 00:29:52,318
assess sensitive data, not only there

452
00:29:52,324 --> 00:29:56,602
are some prerequisites that have to be fulfilled similar to other APIs

453
00:29:56,746 --> 00:29:59,966
like must be a secure connection. So we have to

454
00:29:59,988 --> 00:30:04,094
use HTTPs and we can use this API

455
00:30:04,142 --> 00:30:07,586
only after has been triggered or by

456
00:30:07,608 --> 00:30:11,890
the user. So a click or a specific user interaction.

457
00:30:13,190 --> 00:30:16,886
Let's see how does it look like. Of course in

458
00:30:16,908 --> 00:30:21,366
this case we can show that since it's not available on

459
00:30:21,388 --> 00:30:25,480
the browser, I can grade out or

460
00:30:27,150 --> 00:30:30,506
I can simply inform the user that for that

461
00:30:30,528 --> 00:30:33,994
browser is not available, it's not

462
00:30:34,032 --> 00:30:37,290
possible to use it. But let's look again

463
00:30:37,360 --> 00:30:42,174
at my phone and in here we can share

464
00:30:42,212 --> 00:30:46,430
API just checked, no contact pick in here, it's working.

465
00:30:46,580 --> 00:30:50,350
So if I click on the select list, we can have a list

466
00:30:50,420 --> 00:30:54,334
of all our users.

467
00:30:54,462 --> 00:30:58,306
And then if I choose one and I click or I

468
00:30:58,328 --> 00:31:03,474
select in it, I can extract this information from

469
00:31:03,512 --> 00:31:06,806
my contact list and I can use within the context of

470
00:31:06,908 --> 00:31:10,760
the web application. Here we can see we have

471
00:31:11,210 --> 00:31:15,142
first name, last name, I have an icon, eventually the

472
00:31:15,276 --> 00:31:18,874
full address and the country if available. Okay, of course

473
00:31:18,912 --> 00:31:22,780
this is a test content, so the data,

474
00:31:23,390 --> 00:31:26,762
it's all there, but sometimes cannot be always

475
00:31:26,816 --> 00:31:30,602
defined. So you should plan or design your UI

476
00:31:30,666 --> 00:31:33,838
that might be, that is not always available, all the information.

477
00:31:33,924 --> 00:31:37,680
So in order to avoid that the UI might break.

478
00:31:39,410 --> 00:31:42,754
Bad news is that the browser compatibility for this

479
00:31:42,792 --> 00:31:45,918
API is not exactly wide

480
00:31:46,014 --> 00:31:49,534
yet. It works mainly with Android browser,

481
00:31:49,662 --> 00:31:53,970
opera mobile and

482
00:31:54,040 --> 00:31:57,782
of course Chrome for Android. So we still have to wait

483
00:31:57,916 --> 00:32:01,638
a little bit in order to make it working on a

484
00:32:01,644 --> 00:32:05,206
wide set of browser. But still we can use it

485
00:32:05,308 --> 00:32:08,822
in some cases in order to provide some enhanced

486
00:32:08,886 --> 00:32:11,850
functionalities or scenarios to our users.

487
00:32:12,910 --> 00:32:16,314
Vibration API is our last API for this

488
00:32:16,352 --> 00:32:20,122
session and is quite interesting because again it allows

489
00:32:20,186 --> 00:32:23,646
to interact with the hardware of

490
00:32:23,668 --> 00:32:27,466
the device. Of course only if the target device,

491
00:32:27,498 --> 00:32:30,490
for example a phone or a tablet,

492
00:32:30,570 --> 00:32:34,734
allows it to vibrate. Probably a desktop

493
00:32:34,782 --> 00:32:37,780
or a laptop probably does not allow that.

494
00:32:38,870 --> 00:32:42,574
As we said, it gives the possibility to our web applications

495
00:32:42,622 --> 00:32:47,160
to interact with the vibration hardware and maybe

496
00:32:47,850 --> 00:32:51,426
disclose some interesting scenarios.

497
00:32:51,458 --> 00:32:55,254
Like for example we might provide a tactile feedback when

498
00:32:55,292 --> 00:32:58,794
it's needed. For example, if it's a web game,

499
00:32:58,992 --> 00:33:02,966
some explosion occur, then the device vibrate,

500
00:33:03,078 --> 00:33:06,090
or if the users has

501
00:33:06,160 --> 00:33:10,766
some errors in a form, then we

502
00:33:10,788 --> 00:33:14,858
can provide some visual

503
00:33:15,034 --> 00:33:18,350
errors and also eventually let it vibrate.

504
00:33:18,850 --> 00:33:22,210
We can pass an array of values, an integer to

505
00:33:22,280 --> 00:33:26,242
the vibrate method of the navigator object and each

506
00:33:26,296 --> 00:33:29,886
value tells respectively for how many milliseconds

507
00:33:29,918 --> 00:33:33,694
the device must vibrate and how many milliseconds should

508
00:33:33,752 --> 00:33:37,286
pose. Therefore we

509
00:33:37,308 --> 00:33:41,714
can create any kind of vibration pattern using these alternate

510
00:33:41,762 --> 00:33:45,186
values of vibration and pose respectively.

511
00:33:45,298 --> 00:33:47,180
But let's see how does it work?

512
00:33:50,510 --> 00:33:54,154
Vibration? Yeah, in ear, but I will not go

513
00:33:54,192 --> 00:33:58,442
through because I won't spoil it. I will let it play with it. Once you

514
00:33:58,496 --> 00:34:03,034
assess the repo

515
00:34:03,082 --> 00:34:06,654
I make a quiz so there are very few steps with some

516
00:34:06,692 --> 00:34:09,806
simple questions and if you answer in

517
00:34:09,828 --> 00:34:13,866
a correct way then it will have three short vibrations.

518
00:34:13,978 --> 00:34:16,978
Your device of course you have to do it most probably with the phone in

519
00:34:16,984 --> 00:34:20,354
order to make it working. If you

520
00:34:20,392 --> 00:34:23,802
provide the wrong answer then it will be just a unique

521
00:34:23,886 --> 00:34:28,086
long vibration. This also could be another scenario where we can

522
00:34:28,188 --> 00:34:32,262
provide some more interesting or

523
00:34:32,316 --> 00:34:35,586
entertaining features to our quiz

524
00:34:35,698 --> 00:34:39,082
or web app according to the case

525
00:34:39,136 --> 00:34:42,666
of course, and as we say that the implementation is

526
00:34:42,688 --> 00:34:46,870
extremely simple because we just create eventually

527
00:34:46,950 --> 00:34:50,094
a specific pattern and according to how the

528
00:34:50,132 --> 00:34:54,254
answer was so correct or not, we can invoke and

529
00:34:54,292 --> 00:34:57,242
use one or the other pattern.

530
00:34:57,306 --> 00:35:01,194
So wrong or correct pattern and

531
00:35:01,252 --> 00:35:04,862
then the only thing we have to do is to invoke

532
00:35:04,926 --> 00:35:08,660
the vibrate method using the specific

533
00:35:09,270 --> 00:35:13,902
pattern chosen over the navigator object.

534
00:35:14,056 --> 00:35:17,334
This is all what we need to do. And of course it

535
00:35:17,372 --> 00:35:20,854
works only if the phone or

536
00:35:20,892 --> 00:35:24,882
the device is having or is proposing

537
00:35:24,946 --> 00:35:28,794
or providing a vibration hardware for that and

538
00:35:28,832 --> 00:35:32,890
this concludes our browser API collection.

539
00:35:33,630 --> 00:35:36,826
Here you can find the GitHub repo URL where

540
00:35:36,848 --> 00:35:40,522
you can find the demo and the code itself, plus some

541
00:35:40,576 --> 00:35:44,502
links to social media like Twitter and the dove to portal

542
00:35:44,566 --> 00:35:48,086
where I wrote some articles, especially about progressive web APIs,

543
00:35:48,118 --> 00:35:51,902
angular and some of the modern web APIs that we discussed

544
00:35:51,966 --> 00:35:56,030
tonight. I hope you enjoyed this session

545
00:35:56,110 --> 00:35:59,982
and I could provide some new hints, especially show some APIs

546
00:36:00,046 --> 00:36:03,234
that maybe you were not aware of. That said,

547
00:36:03,352 --> 00:36:06,466
thank you very much again for your attention and I

548
00:36:06,488 --> 00:36:07,682
hope you enjoyed it.

