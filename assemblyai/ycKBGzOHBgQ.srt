1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:07,338
all from the comfort of a remote workplace?

3
00:00:07,514 --> 00:00:11,294
Andela has matched thousands of technologists across the globe to their

4
00:00:11,332 --> 00:00:14,494
next career adventure. We're empowering new

5
00:00:14,532 --> 00:00:18,714
talent worldwide, from Sao Paulo to Egypt and Lagos

6
00:00:18,762 --> 00:00:22,186
to Warsaw. Now the future of work is yours

7
00:00:22,218 --> 00:00:25,686
to create. Anytime, anywhere. The world is

8
00:00:25,708 --> 00:00:29,190
at your fingertips. This is Andela.

9
00:01:12,950 --> 00:01:16,790
Hello, everyone. Thank you for joining my talk. So I'm Jerve.

10
00:01:17,210 --> 00:01:21,122
I'm going to talk today about successful. Go for successful,

11
00:01:21,186 --> 00:01:24,822
successful microservices architecture. Few years ago, when I joined my current

12
00:01:24,876 --> 00:01:28,822
company, the team was working on we

13
00:01:28,876 --> 00:01:32,586
had almost monolithic architecture and they

14
00:01:32,608 --> 00:01:36,022
were using a programming language

15
00:01:36,086 --> 00:01:39,466
called Scala. So then we

16
00:01:39,488 --> 00:01:43,070
decided to make the transition using go and

17
00:01:43,140 --> 00:01:46,570
building a proper microservices architecture software.

18
00:01:46,730 --> 00:01:50,286
So the aim of my talk is not so

19
00:01:50,308 --> 00:01:54,306
much about praising go or the

20
00:01:54,328 --> 00:01:58,180
microservices architecture, but it's more about talking

21
00:01:59,430 --> 00:02:02,626
about the journey and what

22
00:02:02,728 --> 00:02:05,010
we learned through that journey.

23
00:02:05,430 --> 00:02:08,290
So very briefly,

24
00:02:08,630 --> 00:02:12,354
about myself. So I'm Jerve. I'm a senior

25
00:02:12,402 --> 00:02:15,590
software engineer. I'm based in London.

26
00:02:16,410 --> 00:02:19,866
The company I work for is called smart numbers and I

27
00:02:19,888 --> 00:02:22,090
joiners them in 2019.

28
00:02:22,830 --> 00:02:26,902
So we are a software company specializing

29
00:02:26,966 --> 00:02:30,880
telecommunication. So we deal with things like

30
00:02:31,410 --> 00:02:35,870
fraud prevention, call management, telecoms migration

31
00:02:36,610 --> 00:02:40,366
or mobile solution and so on. So if you want more detail,

32
00:02:40,468 --> 00:02:43,460
you have the website there, the link.

33
00:02:45,990 --> 00:02:49,170
Myself, I'm part of the fraud prevention team.

34
00:02:49,320 --> 00:02:53,150
So I'm working on fraud prevention products. So as you can imagine,

35
00:02:53,230 --> 00:02:56,678
we have quite a weird and

36
00:02:56,844 --> 00:03:00,150
strong constraint because we're dealing with telephony,

37
00:03:01,130 --> 00:03:04,694
especially latency. So we'll come back to that a

38
00:03:04,732 --> 00:03:07,590
few times through the presentation.

39
00:03:08,030 --> 00:03:11,594
And if you have any question or

40
00:03:11,632 --> 00:03:15,660
any comments or feedback for me, you have on the

41
00:03:16,270 --> 00:03:20,438
right for you, I think. Yeah, you have on these right my twitter,

42
00:03:20,534 --> 00:03:24,142
and you also have the link to my YouTube channel where

43
00:03:24,196 --> 00:03:27,742
I'm trying to teach go the basics, giving you

44
00:03:27,796 --> 00:03:31,326
tricks, tips, teaching you design patterns and these

45
00:03:31,348 --> 00:03:35,434
kind of things. So that's for me. So now let's

46
00:03:35,482 --> 00:03:37,966
dive into the subject. So,

47
00:03:38,068 --> 00:03:42,210
microservices, obviously, I said a few minutes ago

48
00:03:42,280 --> 00:03:46,610
that I don't want to spend too much time in praising microservices,

49
00:03:46,690 --> 00:03:50,546
but I'd like you to understand what's a microservices

50
00:03:50,658 --> 00:03:55,030
architecture and also what are the caveats

51
00:03:55,610 --> 00:03:58,060
of using one of those.

52
00:03:58,670 --> 00:04:03,450
So to set the scene properly,

53
00:04:03,950 --> 00:04:07,930
I'm going to have to compare it with a monolith architecture.

54
00:04:08,590 --> 00:04:11,974
So no disrespect for a monolith architecture.

55
00:04:12,022 --> 00:04:15,982
So it worked very well for a few years it

56
00:04:16,036 --> 00:04:19,806
still work in certain eases, but now the trend is

57
00:04:19,828 --> 00:04:22,426
more into microservices for some reason,

58
00:04:22,548 --> 00:04:26,706
for agile and so on. So the

59
00:04:26,728 --> 00:04:29,954
cliche of a monolith, so you have a monolith on the left.

60
00:04:30,152 --> 00:04:33,838
So usually a monolith is like a gigantic mono

61
00:04:33,854 --> 00:04:37,590
service, years and years of code accumulated.

62
00:04:37,930 --> 00:04:41,474
It's using a single database with a horrific schema,

63
00:04:41,522 --> 00:04:45,126
difficult to migrate. And this kind of stuff, it's usually in

64
00:04:45,148 --> 00:04:48,894
a single version control repo into a single GitHub.

65
00:04:49,042 --> 00:04:53,020
So it means that you have to have a strong discipline in using

66
00:04:54,110 --> 00:04:58,054
GitHub. Like you have to use branches and you have to do rebase,

67
00:04:58,182 --> 00:05:01,486
you have to do commit, pull requests and all

68
00:05:01,508 --> 00:05:05,946
this drama. So usually it's

69
00:05:05,978 --> 00:05:09,454
quite difficult to extend and maintain, and it's not

70
00:05:09,492 --> 00:05:13,106
such a nice dev experience. So as

71
00:05:13,128 --> 00:05:15,458
opposed two that we have on the right,

72
00:05:15,624 --> 00:05:19,390
successful, successful microservices architecture, the name suggests,

73
00:05:19,550 --> 00:05:23,582
instead of having this mono blockers, we have multiple

74
00:05:23,646 --> 00:05:27,094
services communicating with each

75
00:05:27,132 --> 00:05:31,298
other. So usually a microservice is like an autonomous,

76
00:05:31,394 --> 00:05:36,038
meaningful service representing business

77
00:05:36,124 --> 00:05:39,594
unit. They can have these own

78
00:05:39,632 --> 00:05:43,130
database and they are in their own GitHub.

79
00:05:44,270 --> 00:05:49,306
So the advantages of that are

80
00:05:49,408 --> 00:05:53,418
that they are easily testable on their own. You can upgrade

81
00:05:53,434 --> 00:05:57,610
these on their own. So if you want to upgrade a component, a library,

82
00:05:57,690 --> 00:06:01,566
on one service, you can do that and it won't impact the

83
00:06:01,588 --> 00:06:05,386
other services. Your schema

84
00:06:05,418 --> 00:06:08,610
is simple because you have tinier databases

85
00:06:09,430 --> 00:06:12,738
and if you have let's say

86
00:06:12,904 --> 00:06:16,454
four colleagues in your team,

87
00:06:16,652 --> 00:06:20,054
and it means that they can work independently on four

88
00:06:20,092 --> 00:06:23,526
different services in different repo without stepping on each

89
00:06:23,548 --> 00:06:27,350
other toes. So you have quite of autonomous.

90
00:06:27,710 --> 00:06:31,334
So it usually translates into a faster

91
00:06:31,382 --> 00:06:34,874
release deployment or a better dev

92
00:06:34,912 --> 00:06:36,250
experience overall.

93
00:06:39,890 --> 00:06:43,326
So that's on paper, that's on theory. But obviously I'm here to talk to

94
00:06:43,348 --> 00:06:47,390
you about the caveats of this pattern.

95
00:06:48,450 --> 00:06:52,960
So I took a screenshot for you about

96
00:06:53,270 --> 00:06:57,890
a screenshot of our microservices.

97
00:06:58,550 --> 00:07:01,710
So we are using AWS, Amazon,

98
00:07:01,790 --> 00:07:05,742
Amazon Services. So this is x ray, which is a

99
00:07:05,896 --> 00:07:09,778
monitoring tracing tool. So the dots

100
00:07:09,954 --> 00:07:13,654
represent services and databases or

101
00:07:13,692 --> 00:07:17,266
any entry points. So you can see visually

102
00:07:17,378 --> 00:07:20,010
straight away it's complexity.

103
00:07:20,670 --> 00:07:24,906
So here we are introducing a lot of complexity between

104
00:07:25,088 --> 00:07:27,610
the services in term of communication.

105
00:07:28,190 --> 00:07:32,186
And we are also introducing what we call cognitive load,

106
00:07:32,378 --> 00:07:35,614
meaning that it's a lot to take on for one

107
00:07:35,652 --> 00:07:38,990
single person or for a team, as in if you have

108
00:07:39,060 --> 00:07:42,506
100 services, it's not

109
00:07:42,548 --> 00:07:46,322
humanly possible to remember what each single service is

110
00:07:46,376 --> 00:07:48,660
doing or responsible for.

111
00:07:50,150 --> 00:07:53,394
Then secondly, you are increasing the

112
00:07:53,432 --> 00:07:56,786
overall latency of your those architecture.

113
00:07:56,818 --> 00:07:59,954
If you're not careful, it's simply

114
00:08:00,002 --> 00:08:03,510
because you can have a service calling another service calling over

115
00:08:03,580 --> 00:08:06,774
multiple services. And as

116
00:08:06,812 --> 00:08:10,938
I told you, I'm working for a telephony company. So if a person

117
00:08:11,024 --> 00:08:14,666
is trying to contact emergency services,

118
00:08:14,768 --> 00:08:18,730
you can't wait forever to process the call. And then

119
00:08:18,800 --> 00:08:22,922
lastly I mentioned that it was easily extendable,

120
00:08:22,986 --> 00:08:27,006
maintainable, yes and no. Because if

121
00:08:27,028 --> 00:08:30,906
you have a service sending a request,

122
00:08:30,938 --> 00:08:34,722
two another service and you want to change, you want to

123
00:08:34,776 --> 00:08:38,546
remove or you want to add another

124
00:08:38,648 --> 00:08:42,290
property on those request response.

125
00:08:43,030 --> 00:08:46,414
It's quite a bit of gymnastic because you don't want to introduce

126
00:08:46,462 --> 00:08:50,338
break and change and you might not aware if you change the response

127
00:08:50,354 --> 00:08:54,200
of one service you can think about these service

128
00:08:55,210 --> 00:08:58,994
consuming it, but then you might forget others. So it becomes

129
00:08:59,042 --> 00:09:02,906
really complex. And it's even more complex if you

130
00:09:02,928 --> 00:09:06,934
have multiple environments. Like you have a dev environment, you have a UAT environment,

131
00:09:06,982 --> 00:09:10,394
you have a pro environment, you want to propagate this

132
00:09:10,432 --> 00:09:13,674
chain smoothly without breaking anything. So it's

133
00:09:13,722 --> 00:09:18,442
quite a lot of scheduling. Also maintainable?

134
00:09:18,586 --> 00:09:22,658
Yes and no, because I

135
00:09:22,664 --> 00:09:25,620
said earlier, they are upgradable on their own.

136
00:09:26,550 --> 00:09:30,194
That's true, but let's say you are using a common library for each

137
00:09:30,232 --> 00:09:34,750
single of them, and that library requires

138
00:09:34,910 --> 00:09:38,566
a security patch. If you have 100 services,

139
00:09:38,668 --> 00:09:41,874
you're going to have to propagate those patch

140
00:09:41,922 --> 00:09:44,230
security 100 times, unfortunately.

141
00:09:48,590 --> 00:09:52,490
So obviously any programming language could help

142
00:09:52,560 --> 00:09:56,220
solving mitigating those problems or would have those problems.

143
00:09:57,150 --> 00:10:00,478
But the goal of this talk is how do we make the

144
00:10:00,484 --> 00:10:04,254
most of go to tackle them? Right, let's see how we can use

145
00:10:04,372 --> 00:10:06,560
go the most efficiently possible.

146
00:10:07,650 --> 00:10:11,502
So our first challenge was three

147
00:10:11,556 --> 00:10:15,346
years ago when we had call start problem with

148
00:10:15,368 --> 00:10:18,210
our serverless functions with Scala.

149
00:10:18,630 --> 00:10:22,786
So a serverless function is a programmatic function where

150
00:10:22,968 --> 00:10:25,650
your cloud provider takes care of hosting,

151
00:10:25,730 --> 00:10:29,686
managing and provisioning your infrastructure, and then

152
00:10:29,708 --> 00:10:32,040
you just execute your code.

153
00:10:33,050 --> 00:10:36,374
The problem with that is when

154
00:10:36,412 --> 00:10:40,566
you want to invoke your function, your cloud provider has to

155
00:10:40,748 --> 00:10:44,566
download your code and then start your new execution environment as shown on

156
00:10:44,588 --> 00:10:48,342
the diagram. So this existing time is your call

157
00:10:48,396 --> 00:10:52,510
start and, and then your code executes.

158
00:10:53,490 --> 00:10:57,354
And the duration, the length

159
00:10:57,402 --> 00:11:01,006
of a call start depends on three factors. So first

160
00:11:01,028 --> 00:11:04,910
one is the language. Unfortunately some languages

161
00:11:06,450 --> 00:11:10,178
take longer than others, these the package size.

162
00:11:10,264 --> 00:11:14,590
So it depends if your language is natively.

163
00:11:14,750 --> 00:11:18,626
Once compile is natively more voluminous

164
00:11:18,738 --> 00:11:22,562
than others, and also if you're using bigger dependencies

165
00:11:22,626 --> 00:11:26,280
or more dependencies. So obviously if you're using

166
00:11:26,890 --> 00:11:30,506
more packages or dependency, the longer is going to be your

167
00:11:30,528 --> 00:11:34,410
cost because you have to download those dependencies

168
00:11:34,750 --> 00:11:38,570
and also doesn't matter

169
00:11:38,640 --> 00:11:42,154
here in our case, but it also depends if it's in a private network

170
00:11:42,202 --> 00:11:45,774
or not. I'll put a link for you here. It's only

171
00:11:45,812 --> 00:11:49,758
about AWS, the Amazon services about

172
00:11:49,924 --> 00:11:52,350
call starts. It's a really good article.

173
00:11:53,510 --> 00:11:56,290
So the problem we face and what we saw,

174
00:11:56,360 --> 00:12:00,046
so we had awful call start with scanner.

175
00:12:00,158 --> 00:12:04,254
So Scala is part of the JVM language

176
00:12:04,302 --> 00:12:07,986
family, so it compiles to Java

177
00:12:08,018 --> 00:12:11,554
byte machine, Java code byte machine,

178
00:12:11,602 --> 00:12:15,094
sorry. And so we had call

179
00:12:15,132 --> 00:12:18,970
start of one to 2 seconds and then our code executing.

180
00:12:21,390 --> 00:12:24,922
So that was not acceptable for our

181
00:12:24,976 --> 00:12:29,222
constraint, our product, because you can wait forever

182
00:12:29,286 --> 00:12:33,226
for a call to be processed. And you

183
00:12:33,248 --> 00:12:37,114
can imagine in that scenario that we had a

184
00:12:37,152 --> 00:12:40,526
scala function calling another scalar function. So it means that you

185
00:12:40,548 --> 00:12:44,206
could hit a chain of call starts,

186
00:12:44,398 --> 00:12:47,620
which is a really awful experience for the customer.

187
00:12:48,390 --> 00:12:51,678
So then we makes a trial,

188
00:12:51,774 --> 00:12:55,054
we tried a Golemba and it was

189
00:12:55,112 --> 00:12:59,094
much much better. So we had a call start of millisecond and then

190
00:12:59,292 --> 00:13:03,174
your function execution. So that

191
00:13:03,212 --> 00:13:06,582
makes sense because go binaries are really

192
00:13:06,636 --> 00:13:10,054
lightweight, so therefore the provisioning,

193
00:13:10,182 --> 00:13:13,238
when your cloud provider is downloading your code it's

194
00:13:13,334 --> 00:13:20,050
much quicker. So then that's why the consists

195
00:13:20,150 --> 00:13:23,534
are much much tinier with go.

196
00:13:23,732 --> 00:13:27,514
So that was a first success for our microservices,

197
00:13:27,642 --> 00:13:31,854
especially for the latency. So we decided to make the

198
00:13:31,892 --> 00:13:34,260
full transition to Golang basically.

199
00:13:37,110 --> 00:13:40,514
Second point is Golang is

200
00:13:40,552 --> 00:13:43,874
quite a well supported and popular language. So it seems

201
00:13:43,912 --> 00:13:46,520
a bit simple and trivial to say that,

202
00:13:47,690 --> 00:13:52,950
but it does have an impact. So let me explain because

203
00:13:53,020 --> 00:13:56,614
it's quite a well known language now and it

204
00:13:56,652 --> 00:14:00,140
was already three years ago. So you often have

205
00:14:00,590 --> 00:14:04,746
sdks available. So we use aws, but it's available

206
00:14:04,848 --> 00:14:08,234
for Google and for Asia and

207
00:14:08,272 --> 00:14:13,262
other probably. And as

208
00:14:13,316 --> 00:14:16,782
we had to make the transition we had to

209
00:14:16,836 --> 00:14:19,630
write services from scratch.

210
00:14:19,970 --> 00:14:22,954
So for instance we had to write HTTP server,

211
00:14:23,002 --> 00:14:27,854
graphql server, we had to write test to generate mock mocks,

212
00:14:27,902 --> 00:14:31,662
we had to encrypt, to hash, we had to talk to a database,

213
00:14:31,726 --> 00:14:35,538
we had to services as request response. So none

214
00:14:35,554 --> 00:14:39,960
of us had experience in go and

215
00:14:42,010 --> 00:14:45,958
we had plenty of tutorials available, a ton of tutorials available,

216
00:14:46,124 --> 00:14:48,540
which made our life really easy.

217
00:14:51,310 --> 00:14:54,762
So then yeah, these ecosystem was and

218
00:14:54,816 --> 00:14:58,726
still is extremely alive.

219
00:14:58,918 --> 00:15:02,714
And we have a supported community and it's a living language,

220
00:15:02,842 --> 00:15:06,222
it's really well used. So it

221
00:15:06,276 --> 00:15:09,934
means that the services we wrote three

222
00:15:09,972 --> 00:15:14,030
years ago still beneficiate from updates, from improvements.

223
00:15:15,110 --> 00:15:20,658
It's a bit of a teaser, but we had a

224
00:15:20,664 --> 00:15:24,690
few months, a couple of years ago go modules

225
00:15:25,510 --> 00:15:29,630
for these dependency management we had generic

226
00:15:29,710 --> 00:15:33,686
like a few days ago, so it really does help

227
00:15:33,868 --> 00:15:38,140
in building high quality services.

228
00:15:40,990 --> 00:15:44,826
So my next points is quite a bit

229
00:15:44,848 --> 00:15:47,980
of a continuity of my previous point,

230
00:15:48,350 --> 00:15:51,726
but more in detail. So go is quite

231
00:15:51,748 --> 00:15:55,790
a well designed language. So here you have all the standard

232
00:15:55,860 --> 00:15:58,880
libraries built in when you download go,

233
00:15:59,810 --> 00:16:03,246
I think it's worth mentioning because all of that, as I

234
00:16:03,268 --> 00:16:06,706
said, is inbuilt. Like when you install go, you have all

235
00:16:06,728 --> 00:16:10,622
of that ready to be used and you don't have to download

236
00:16:10,766 --> 00:16:13,780
any external dependency or this kind of stuff.

237
00:16:14,630 --> 00:16:17,954
So worth mentioning, you have the crypto for hashing

238
00:16:18,082 --> 00:16:21,382
or to salt or the secret and this kind of stuff,

239
00:16:21,516 --> 00:16:24,946
you have these encoding library for JsON marshalling and marshalling.

240
00:16:24,978 --> 00:16:28,070
You have the amazing errors package,

241
00:16:28,150 --> 00:16:30,966
very simple but really effective.

242
00:16:31,158 --> 00:16:35,542
Have the formatting library, you have the OS library

243
00:16:35,686 --> 00:16:37,930
for manipulating files,

244
00:16:39,950 --> 00:16:44,174
you have string manipulation, you have the sync library for the

245
00:16:44,372 --> 00:16:47,520
existing group, the Mutex and these kind of things.

246
00:16:47,970 --> 00:16:50,670
And you also have the really good time library,

247
00:16:51,170 --> 00:16:54,706
really well built. So a

248
00:16:54,728 --> 00:16:58,466
bit of comparison here you have

249
00:16:58,648 --> 00:17:02,590
for instance JavaScript. When you want to use TAM, you have to download

250
00:17:02,750 --> 00:17:06,818
external library like moment or momentum

251
00:17:06,914 --> 00:17:10,754
or date or date fn

252
00:17:10,802 --> 00:17:12,120
or something like that.

253
00:17:14,490 --> 00:17:18,054
Also the testing framework. So the testing framework

254
00:17:18,102 --> 00:17:21,980
is actually a better example. So when you want to test

255
00:17:22,350 --> 00:17:26,710
your code with JavaScript, you have a ton of libraries,

256
00:17:26,870 --> 00:17:30,234
can't really remember, but you have mocha, you have

257
00:17:30,272 --> 00:17:33,950
Chinese Sinan, you have cypress perpetual

258
00:17:34,450 --> 00:17:37,642
js. It's not uniformized,

259
00:17:37,706 --> 00:17:41,054
it's not like inbuilt. Whereas in Go, if you want to

260
00:17:41,092 --> 00:17:45,634
write go and you want to test your

261
00:17:45,672 --> 00:17:49,154
code straight away, you have a ready two be

262
00:17:49,192 --> 00:17:52,830
used library dependencies management.

263
00:17:52,990 --> 00:17:56,102
So we started with an external tool

264
00:17:56,156 --> 00:18:01,030
called depth. But fortunately enough in Go 1.13

265
00:18:01,930 --> 00:18:04,962
the dev introduced Go modules,

266
00:18:05,026 --> 00:18:09,334
or Go mod, called Go mod. So it's just fantastic

267
00:18:09,382 --> 00:18:14,186
tool which just work. So you

268
00:18:14,208 --> 00:18:17,706
can add a dependency, you can download them, you can initiate a

269
00:18:17,728 --> 00:18:20,826
file, it's just proper dependency management

270
00:18:20,938 --> 00:18:24,990
available to you when you download go. So that's fantastic.

271
00:18:25,410 --> 00:18:29,230
All right, some libraries worth mentioning,

272
00:18:30,530 --> 00:18:34,018
obviously you could use only standard

273
00:18:34,104 --> 00:18:37,998
libraries to build your pieces of software,

274
00:18:38,174 --> 00:18:42,626
like you could write from scratch a

275
00:18:42,648 --> 00:18:45,686
library on your own to generate graphql server or this kind

276
00:18:45,708 --> 00:18:49,570
of stuff. But turns out that you really have good library

277
00:18:49,650 --> 00:18:53,298
out there, really well maintained, really well tested,

278
00:18:53,474 --> 00:18:58,154
and it really helped us in our journey to build high

279
00:18:58,192 --> 00:19:01,386
quality services. So the

280
00:19:01,488 --> 00:19:04,758
first two are testing libraries. So Gomega

281
00:19:04,774 --> 00:19:08,202
and Ginkgo. So these are matcha assertion library and BDD test

282
00:19:08,256 --> 00:19:11,534
framework. And these, the third one

283
00:19:11,572 --> 00:19:15,098
is really important because when you're writing microservices

284
00:19:15,194 --> 00:19:18,474
you have a lot of common parts

285
00:19:18,602 --> 00:19:21,520
used by your different services.

286
00:19:22,390 --> 00:19:27,490
So then the solution for that is to write common

287
00:19:27,560 --> 00:19:31,378
library that you can share between your services.

288
00:19:31,544 --> 00:19:35,940
So those kind of libraries are

289
00:19:36,330 --> 00:19:41,138
codec serialization

290
00:19:41,234 --> 00:19:44,918
framework or these kind of things. Or they can be

291
00:19:45,084 --> 00:19:48,618
models to share between service to ensure that you are using

292
00:19:48,704 --> 00:19:52,454
the correct request, the correct contracts

293
00:19:52,502 --> 00:19:55,850
between them. So you want to do that

294
00:19:55,920 --> 00:19:59,580
smoothly. So you have to have a tool

295
00:19:59,890 --> 00:20:03,866
which can properly distribute

296
00:20:03,978 --> 00:20:07,850
tag version your library for that. So Gorilla releaser

297
00:20:07,930 --> 00:20:11,790
is a really nice binaries builder then.

298
00:20:11,940 --> 00:20:15,602
Lastly, I thought it was worth

299
00:20:15,656 --> 00:20:18,610
mentioning this GraphQl server generator.

300
00:20:18,950 --> 00:20:23,490
So it just works out of the box and from

301
00:20:23,640 --> 00:20:27,270
GraphQl schema it's generating

302
00:20:28,170 --> 00:20:31,334
a full server ready to deploy. So it

303
00:20:31,372 --> 00:20:34,902
really smooth the experience, the dev experience and really help us

304
00:20:34,956 --> 00:20:38,330
to deliver value quicker.

305
00:20:40,030 --> 00:20:43,706
A very quick special mention to Golan. So Golan is

306
00:20:43,728 --> 00:20:47,226
an did. It's part of the Jetbrain family.

307
00:20:47,328 --> 00:20:51,390
So you probably know Intellij.

308
00:20:54,930 --> 00:20:57,770
I know that ids are quite controversial,

309
00:20:57,850 --> 00:21:01,274
but if you're familiar with the Dreadbrain

310
00:21:01,322 --> 00:21:05,074
ids, you can go pretty quickly with Golan, with all the

311
00:21:05,272 --> 00:21:06,820
shortcuts and stuff.

312
00:21:08,390 --> 00:21:12,594
So the learning here about the tooling is because you

313
00:21:12,632 --> 00:21:16,022
have so go is well

314
00:21:16,076 --> 00:21:20,130
built and you have really good libraries

315
00:21:20,210 --> 00:21:23,782
available. So the tooling is really excellent. So that makes the dev

316
00:21:23,836 --> 00:21:28,082
experience really solid. And for our microservices

317
00:21:28,146 --> 00:21:31,820
it means you build faster and you build with high quality.

318
00:21:32,270 --> 00:21:35,546
And overall it's just really enjoyable to write go at the

319
00:21:35,568 --> 00:21:39,098
end of the day. All right, so my last point

320
00:21:39,184 --> 00:21:43,646
is quite an interesting one. It's about the

321
00:21:43,668 --> 00:21:48,254
new joiner experience. So for

322
00:21:48,452 --> 00:21:52,318
a person new to go, or maybe his

323
00:21:52,404 --> 00:21:55,940
or her first language or second,

324
00:21:57,430 --> 00:22:01,454
Golang is quite easy to learn. So you have very few keywords

325
00:22:01,502 --> 00:22:04,610
and the syntax is quite explicit.

326
00:22:05,590 --> 00:22:09,766
So just in a few weeks you

327
00:22:09,788 --> 00:22:14,018
can already understand and you can already contribute

328
00:22:14,114 --> 00:22:17,718
massively. Two, the team. So that's

329
00:22:17,734 --> 00:22:21,194
really good. And also even after a few

330
00:22:21,232 --> 00:22:24,986
years, if you still have appetite for

331
00:22:25,008 --> 00:22:28,694
challenges, you can always find subjects,

332
00:22:28,742 --> 00:22:32,554
topics to deal with, like garbage

333
00:22:32,602 --> 00:22:36,606
collection, or understand how the concurrency model works, all these kind

334
00:22:36,628 --> 00:22:40,366
of things. So in

335
00:22:40,388 --> 00:22:44,354
our team, just a few months after embracing the

336
00:22:44,392 --> 00:22:48,194
Go universe, one junior member of our team did

337
00:22:48,232 --> 00:22:51,860
a presentation. Two, the whole engineering department about go.

338
00:22:52,470 --> 00:22:55,300
That was a massive success.

339
00:22:57,690 --> 00:23:01,926
So at the bottom I put two links, two resources that

340
00:23:02,108 --> 00:23:05,414
I like, I'm time to comes go back

341
00:23:05,452 --> 00:23:09,046
there to just check some pieces

342
00:23:09,078 --> 00:23:13,034
of knowledge. So the first one is a tour of go and the second one

343
00:23:13,072 --> 00:23:17,386
is go by example. So Golang is really

344
00:23:17,568 --> 00:23:20,934
beginner friendly. So it's immediately rewarding

345
00:23:20,982 --> 00:23:24,480
for them. But also from the mentor side,

346
00:23:25,170 --> 00:23:29,070
as you can build a solid base and you can consolidate

347
00:23:29,970 --> 00:23:33,858
very crucial and important concepts like

348
00:23:33,944 --> 00:23:37,954
solid principle, clean code, and you can also build

349
00:23:37,992 --> 00:23:40,610
on that eases even further concepts.

350
00:23:42,710 --> 00:23:46,502
So for our microservices, it means

351
00:23:46,556 --> 00:23:49,640
that for a junior point of view,

352
00:23:50,010 --> 00:23:53,842
you don't spend much time on struggling,

353
00:23:53,906 --> 00:23:57,080
on learning a new language, but you can also focus

354
00:23:58,030 --> 00:24:02,714
on the overall architecture and try to understand the

355
00:24:02,752 --> 00:24:06,074
place of a service in the whole fleet of

356
00:24:06,112 --> 00:24:06,700
services.

357
00:24:10,370 --> 00:24:14,160
All right, so now I'd like to just

358
00:24:14,530 --> 00:24:18,430
contrast all those advantages with some limitations.

359
00:24:19,250 --> 00:24:23,182
So the very first limitation

360
00:24:23,246 --> 00:24:27,374
with go that we face was how to organize

361
00:24:27,422 --> 00:24:31,330
our folders and packages. So on the left you have these

362
00:24:31,400 --> 00:24:34,562
traditional organization, the old fashioned way,

363
00:24:34,696 --> 00:24:38,662
MVC model, view controller. So we started with

364
00:24:38,716 --> 00:24:42,498
that. We had a package called controller with all the controllers.

365
00:24:42,674 --> 00:24:46,134
Then we had a package called services.

366
00:24:46,332 --> 00:24:50,342
Then we had all our services and was gigantic

367
00:24:50,406 --> 00:24:53,626
package, not so much meaningful, and so

368
00:24:53,648 --> 00:24:55,930
on and so on. You had views, models,

369
00:24:56,750 --> 00:25:01,280
and we just agreed on

370
00:25:01,650 --> 00:25:05,562
a better organization, which per context. So context

371
00:25:05,626 --> 00:25:09,230
here does not mean go context.

372
00:25:09,650 --> 00:25:13,450
So context is more like a logical unit,

373
00:25:13,530 --> 00:25:17,722
like you have on the right, the order context,

374
00:25:17,786 --> 00:25:21,886
where you have everything about order and then

375
00:25:21,988 --> 00:25:24,800
everything about customer, and so on and so on.

376
00:25:25,370 --> 00:25:29,254
And we also found out

377
00:25:29,292 --> 00:25:33,142
that having too much level of nesting didn't work

378
00:25:33,196 --> 00:25:37,174
either. So what we tend to do usually is

379
00:25:37,212 --> 00:25:40,666
to have only one level of death, like you can

380
00:25:40,688 --> 00:25:44,186
see on these, right? Or at most two

381
00:25:44,208 --> 00:25:47,180
level of def, of nesting. Sorry.

382
00:25:50,450 --> 00:25:54,938
So it really help us by organizing

383
00:25:55,034 --> 00:25:59,326
those packaging in meaningful context to

384
00:25:59,508 --> 00:26:03,330
identify common packages and extract them as common library,

385
00:26:03,750 --> 00:26:07,314
or to do not misidentify them.

386
00:26:07,432 --> 00:26:12,290
Do not extract something where it's not necessary.

387
00:26:13,190 --> 00:26:17,254
And then the tooling did the rest, as I told you, with that go

388
00:26:17,292 --> 00:26:21,602
release library, the second limitation

389
00:26:21,666 --> 00:26:26,114
we face. So here, it's not necessarily impacting

390
00:26:26,162 --> 00:26:30,278
our microservices, but I thought it was worth mentioning.

391
00:26:30,454 --> 00:26:33,930
So the first caveat was the pointer

392
00:26:34,270 --> 00:26:38,140
problem. So I'm going two, take a really

393
00:26:39,890 --> 00:26:43,774
controversial shortcut here. But usually you

394
00:26:43,812 --> 00:26:47,646
use pointer if you want to mutate something or

395
00:26:47,748 --> 00:26:51,760
if your struct is too heavy to be passed around.

396
00:26:52,210 --> 00:26:54,690
So in that case you use pointer.

397
00:26:56,230 --> 00:26:59,394
So then we had a few problems with that. So first is

398
00:26:59,432 --> 00:27:02,546
like, it's a bit daunting for someone who

399
00:27:02,568 --> 00:27:05,702
has never seen pointer in his or

400
00:27:05,756 --> 00:27:06,600
her life.

401
00:27:09,450 --> 00:27:13,122
So we just took the decision

402
00:27:13,186 --> 00:27:16,390
to avoid punters

403
00:27:17,310 --> 00:27:21,180
like the plague, basically. So we try to

404
00:27:22,350 --> 00:27:27,020
do it more in a functional programming way.

405
00:27:27,390 --> 00:27:30,746
So let's try to avoid mutate things, and let's

406
00:27:30,778 --> 00:27:34,574
try to do not use pointer in our struct if it's not

407
00:27:34,612 --> 00:27:38,878
necessary, because we had a bit of a drama where

408
00:27:38,964 --> 00:27:42,822
we had a pointer, a misuse,

409
00:27:42,906 --> 00:27:46,414
and we broke prod once, so that was terrible,

410
00:27:46,542 --> 00:27:50,158
so we didn't do that again. And then about interfaces.

411
00:27:50,254 --> 00:27:54,114
So sometimes the concept of implicit interfaces are

412
00:27:54,232 --> 00:27:58,040
also called the typing. It's quite difficult for a beginner to understand.

413
00:27:59,130 --> 00:28:02,120
So about the future,

414
00:28:03,290 --> 00:28:07,062
what else could we do with go in order

415
00:28:07,116 --> 00:28:11,850
to have even better successful Microservices

416
00:28:12,910 --> 00:28:16,346
architecture? Wrote a tiny user story there. So as a Go

417
00:28:16,368 --> 00:28:19,706
software engineer, I want to write infrastructure in

418
00:28:19,728 --> 00:28:23,146
go, deployment pipeline in go, my task runner

419
00:28:23,178 --> 00:28:26,842
in go, and even writing go to generate my documentation.

420
00:28:26,986 --> 00:28:29,418
So then I don't write awful yaml.

421
00:28:29,594 --> 00:28:32,326
So here it's a bit of a joke,

422
00:28:32,458 --> 00:28:36,082
yes and no, because go

423
00:28:36,136 --> 00:28:39,666
is such an efficient language which brings so

424
00:28:39,688 --> 00:28:43,826
much high quality to the services that

425
00:28:43,928 --> 00:28:48,214
you'd like to have that resilience, that kind of quality level

426
00:28:48,412 --> 00:28:52,230
for everything around. So that would be the dream.

427
00:28:54,570 --> 00:28:58,614
Second point is about protobuff. So protocol

428
00:28:58,662 --> 00:29:01,930
buffer. So we are a bit late in the game,

429
00:29:02,000 --> 00:29:05,350
so we don't have that implemented at the minute

430
00:29:05,430 --> 00:29:07,290
in our architecture.

431
00:29:07,950 --> 00:29:12,490
So protobuff is about serialization

432
00:29:12,570 --> 00:29:15,886
of structured data. As you can see, you can do

433
00:29:15,908 --> 00:29:19,470
it in go. So here

434
00:29:19,540 --> 00:29:23,614
it would help, we believe it would help to propagate

435
00:29:23,662 --> 00:29:27,474
any changes between our services, because it can

436
00:29:27,512 --> 00:29:31,458
do validate schema validation and these kind of

437
00:29:31,624 --> 00:29:35,134
fancy things. And it's also very lightweight and very

438
00:29:35,192 --> 00:29:38,982
efficient in term of latency. So that's something

439
00:29:39,116 --> 00:29:41,480
on our to do list.

440
00:29:43,850 --> 00:29:47,010
Another things on our to do list is the generics.

441
00:29:47,090 --> 00:29:52,570
So just a few days ago go 1.18

442
00:29:52,910 --> 00:29:56,554
did release these generics, finally. So it's ready to be

443
00:29:56,592 --> 00:29:59,660
used. So who knows what we're going to found.

444
00:30:00,510 --> 00:30:02,330
So in conclusion,

445
00:30:03,810 --> 00:30:07,930
we saw that successful, successful microservices architecture, really good pattern,

446
00:30:08,090 --> 00:30:11,806
but unfortunately you have to be careful about two points. So the

447
00:30:11,828 --> 00:30:14,660
first one was these complexity between your services,

448
00:30:15,590 --> 00:30:18,626
and the second one was the latency that you

449
00:30:18,648 --> 00:30:23,026
could introduce in your services. So then we

450
00:30:23,048 --> 00:30:27,158
also saw that go was really helping to ease those pain points.

451
00:30:27,244 --> 00:30:31,634
So first one was excellent performances,

452
00:30:31,762 --> 00:30:35,590
the library binaries, the language speed,

453
00:30:36,010 --> 00:30:39,862
and then you have the tooling available because

454
00:30:39,916 --> 00:30:43,320
it's quite a popular language, you have a lot of

455
00:30:44,090 --> 00:30:48,198
good tooling available, a lot of tutorials and so on.

456
00:30:48,364 --> 00:30:51,454
So overall providing a

457
00:30:51,492 --> 00:30:53,920
really good developer experience.

458
00:30:55,410 --> 00:30:59,054
And then who knows, maybe there will be even more

459
00:30:59,092 --> 00:31:02,206
go features in these future to even make the

460
00:31:02,228 --> 00:31:03,360
experience better.

461
00:31:04,850 --> 00:31:08,494
So thank you for watching. Hi,

