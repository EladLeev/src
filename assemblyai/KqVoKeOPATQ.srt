1
00:00:38,930 --> 00:00:42,502
Hello. Hello. My name is Maria and

2
00:00:42,556 --> 00:00:47,042
today I'm going to talk about architecting for resilience

3
00:00:47,186 --> 00:00:50,070
strategies for fault tolerance systems.

4
00:00:50,370 --> 00:00:54,670
It is important to mention before we are going into details

5
00:00:55,490 --> 00:00:58,734
that it's not enough to design the

6
00:00:58,772 --> 00:01:02,930
system, you also need to maintain it and

7
00:01:03,000 --> 00:01:05,742
to have proper tools to maintain it properly.

8
00:01:05,886 --> 00:01:09,650
Otherwise ever if you are doing best possible system

9
00:01:09,720 --> 00:01:10,340
design,

10
00:01:13,110 --> 00:01:16,934
your system still might fail. So today in

11
00:01:16,972 --> 00:01:20,470
my talk, I will touch both

12
00:01:20,540 --> 00:01:23,446
those aspects. Yeah.

13
00:01:23,548 --> 00:01:27,634
So let's go into detail then and

14
00:01:27,772 --> 00:01:32,026
first thing, let's review type of failures that

15
00:01:32,128 --> 00:01:36,490
we might face while designing while dealing with fault tolerance systems.

16
00:01:37,070 --> 00:01:41,420
First and most obvious one, hardware, it's like

17
00:01:42,350 --> 00:01:45,920
is hard drive is failing or something like this.

18
00:01:46,930 --> 00:01:51,342
Second is network. It is like when our servers are fine

19
00:01:51,476 --> 00:01:55,780
but connection between them or to them are not good.

20
00:01:56,470 --> 00:02:00,178
Another thing is human error and

21
00:02:00,344 --> 00:02:03,620
this is happening quite often.

22
00:02:04,390 --> 00:02:08,278
I would say also any possible

23
00:02:08,444 --> 00:02:11,106
natural disasters like tsunami,

24
00:02:11,218 --> 00:02:15,462
flood or lighting, it might looks

25
00:02:15,516 --> 00:02:21,002
like low probability, but depends of our

26
00:02:21,056 --> 00:02:24,700
requirements. We might need to take care about it also.

27
00:02:25,310 --> 00:02:28,650
And another thing is security breaches.

28
00:02:30,450 --> 00:02:33,982
Okay, so we define type

29
00:02:34,036 --> 00:02:37,902
of failures and after that what

30
00:02:37,956 --> 00:02:40,670
I suggest to think about is requirements.

31
00:02:41,170 --> 00:02:45,826
And here we need to ask ourselves a

32
00:02:45,848 --> 00:02:48,530
question and answer to it honestly.

33
00:02:49,990 --> 00:02:53,860
Do we really want to protect ourselves from all possible

34
00:02:55,050 --> 00:02:57,000
failures that's going to happen?

35
00:02:58,490 --> 00:03:01,320
Do we really need fault tolerance system?

36
00:03:02,330 --> 00:03:06,114
Because building, because in ideal

37
00:03:06,162 --> 00:03:09,286
world when we have unlimited amount of resources,

38
00:03:09,398 --> 00:03:12,106
unlimited amount of time,

39
00:03:12,208 --> 00:03:16,060
unlimited amount of engineers to work on our system,

40
00:03:16,510 --> 00:03:21,690
we can design really perfect system, but in real world those

41
00:03:21,760 --> 00:03:25,390
things are limited. And so

42
00:03:25,460 --> 00:03:28,720
we will need to prioritize what

43
00:03:29,090 --> 00:03:32,320
type of failures we are going to take care of first,

44
00:03:32,790 --> 00:03:36,340
what we want

45
00:03:37,110 --> 00:03:41,170
from our system and is it really required and

46
00:03:41,240 --> 00:03:44,130
is it really worth it from business perspective?

47
00:03:45,450 --> 00:03:49,446
Also, one thing I suggest to do from the

48
00:03:49,468 --> 00:03:52,694
context of system requirements is just list

49
00:03:52,812 --> 00:03:57,422
all the system features and prioritize

50
00:03:57,506 --> 00:04:01,994
them against each other. Like let

51
00:04:02,032 --> 00:04:06,220
me give you an example here. Like for example,

52
00:04:06,750 --> 00:04:11,214
let's say we have online shop and if our customers

53
00:04:11,332 --> 00:04:14,894
can't like online shop, food delivery and if

54
00:04:14,932 --> 00:04:18,318
our customers can't check out, it's probably a

55
00:04:18,324 --> 00:04:21,486
big problem. People can't order food, business is just

56
00:04:21,508 --> 00:04:24,290
stopped. But for example,

57
00:04:24,440 --> 00:04:28,434
if search is

58
00:04:28,472 --> 00:04:32,066
not working or if suggestions for search

59
00:04:32,248 --> 00:04:35,702
is not working, is it the

60
00:04:35,756 --> 00:04:39,320
same severity of the problem compared to

61
00:04:40,170 --> 00:04:43,702
checkout problem. And I

62
00:04:43,756 --> 00:04:47,974
suggest to range this and it

63
00:04:48,012 --> 00:04:51,910
will help to prioritize the effort and understand

64
00:04:52,060 --> 00:04:56,202
which part of the system we need to duplicate and

65
00:04:56,336 --> 00:05:00,162
which is not because as I said, we don't have unlimited resources

66
00:05:00,326 --> 00:05:06,400
and defining our requirements is important here okay,

67
00:05:07,490 --> 00:05:10,750
now let's talk a bit about tools.

68
00:05:11,490 --> 00:05:15,810
And first thing is monitoring.

69
00:05:16,230 --> 00:05:20,254
Monitoring is important because without monitoring

70
00:05:20,302 --> 00:05:24,434
you wouldn't be able to understand if your system is

71
00:05:24,472 --> 00:05:28,518
actually working or not. And you

72
00:05:28,604 --> 00:05:32,338
don't only want monitoring, you have automatic detection

73
00:05:32,434 --> 00:05:36,614
there. And it

74
00:05:36,652 --> 00:05:40,694
means that you will need to set up threshold, deal with false

75
00:05:40,742 --> 00:05:44,026
positives and so on and so on. It actually

76
00:05:44,128 --> 00:05:48,154
might take time, but if

77
00:05:48,192 --> 00:05:51,354
we want to have fault tolerance systems, we need automatic

78
00:05:51,402 --> 00:05:55,262
detection because we can't just sit whole day and night and

79
00:05:55,316 --> 00:05:59,502
watching on the dashboards. Next thing

80
00:05:59,556 --> 00:06:02,800
is testing. Testing is important.

81
00:06:03,830 --> 00:06:08,238
Everybody understands this, but I think it's worth to repeat.

82
00:06:08,414 --> 00:06:11,854
And if we are talking from about fault tolerance

83
00:06:11,902 --> 00:06:15,702
system from that perspective, there are

84
00:06:15,756 --> 00:06:20,390
several things I like to mention. Like first is testing environment.

85
00:06:21,210 --> 00:06:25,026
We need testing environment as identical

86
00:06:25,138 --> 00:06:28,746
to production as possible. Like some small copy of

87
00:06:28,768 --> 00:06:30,700
the cluster or something like this.

88
00:06:32,910 --> 00:06:36,582
Because we don't want to touch production,

89
00:06:36,726 --> 00:06:40,182
but we want to do our testing

90
00:06:40,246 --> 00:06:43,402
as have run

91
00:06:43,456 --> 00:06:47,040
all our test environment as close to production as possible.

92
00:06:50,530 --> 00:06:54,874
I would say invest into test environment. Another thing is stress

93
00:06:54,922 --> 00:06:59,120
testing. And while

94
00:06:59,730 --> 00:07:04,402
ET is from fault tolerance, it's also important. And like

95
00:07:04,456 --> 00:07:08,280
for example, if we are talking about online shop

96
00:07:08,890 --> 00:07:12,454
again and if we are talking about Black Friday, we need to make

97
00:07:12,492 --> 00:07:15,686
sure that our system will withstand all

98
00:07:15,708 --> 00:07:19,334
the load and stress. Testing is something that can

99
00:07:19,452 --> 00:07:22,890
identify in and define different bottlenecks.

100
00:07:23,630 --> 00:07:26,822
And another thing I found, it's rarely

101
00:07:26,886 --> 00:07:29,846
mentioned, but it's worth to mention.

102
00:07:29,968 --> 00:07:33,274
Test your tools. Test that your monitoring

103
00:07:33,322 --> 00:07:37,594
system is actually monitoring, test that your recovery

104
00:07:37,642 --> 00:07:40,080
script is actually working.

105
00:07:41,010 --> 00:07:44,222
Your tools is something that what you

106
00:07:44,276 --> 00:07:48,458
will rely on. And yeah,

107
00:07:48,644 --> 00:07:52,450
invest into your tools. In this case we are going to the next point like

108
00:07:52,520 --> 00:07:56,182
about tools and I would say here,

109
00:07:56,236 --> 00:07:59,750
invest into your tools and invest into

110
00:07:59,820 --> 00:08:03,062
automation. Automate as many

111
00:08:03,116 --> 00:08:07,302
things as possible. And of course think

112
00:08:07,356 --> 00:08:10,826
about auto recovery and how you

113
00:08:10,848 --> 00:08:14,266
can deal if, I don't know, database is corrupted and

114
00:08:14,288 --> 00:08:18,438
you need to switch to the backup. Can it be automated?

115
00:08:18,534 --> 00:08:22,350
How it can be automated? Invest into

116
00:08:22,420 --> 00:08:26,570
this and invest into runbooks and documentation.

117
00:08:26,730 --> 00:08:30,426
Documentation is important in general, but runbooks

118
00:08:30,538 --> 00:08:33,906
is something that when you have

119
00:08:33,928 --> 00:08:37,310
a disaster going on and you need to fix system ASAP,

120
00:08:37,470 --> 00:08:41,154
you don't really want time to spend looking

121
00:08:41,272 --> 00:08:45,086
for some specific command, trying to recall how

122
00:08:45,208 --> 00:08:49,286
many parameters for this specific function.

123
00:08:49,468 --> 00:08:52,790
Or if you have new engineer joined recently.

124
00:08:54,410 --> 00:08:57,110
Yeah, they might not know all the details.

125
00:08:57,450 --> 00:09:01,286
And when you need to do something, a sub run books

126
00:09:01,398 --> 00:09:02,570
is helpful.

127
00:09:05,550 --> 00:09:09,526
And next thing is chaos engineering.

128
00:09:09,638 --> 00:09:13,166
Chaos engineering is a practice when you

129
00:09:13,188 --> 00:09:16,362
are injecting some errors

130
00:09:16,426 --> 00:09:20,190
and failures in the system to see how it will recover.

131
00:09:21,090 --> 00:09:24,626
And all big companies doing this and they

132
00:09:24,648 --> 00:09:28,750
are doing this for one reason, because it is useful.

133
00:09:28,910 --> 00:09:32,514
It helps to identify some problems that was

134
00:09:32,552 --> 00:09:36,534
not obvious before and fix it.

135
00:09:36,732 --> 00:09:40,582
And because cows engineering is

136
00:09:40,636 --> 00:09:43,910
like controlled process.

137
00:09:44,060 --> 00:09:47,754
For example, if you're doing something that causing your system to

138
00:09:47,792 --> 00:09:51,580
fail, you can roll back it. Roll it back.

139
00:09:54,430 --> 00:09:59,482
Let me give you an example. If you have a system that

140
00:09:59,536 --> 00:10:03,162
distributed among three data centers but designed

141
00:10:03,226 --> 00:10:06,510
to work with two data centers,

142
00:10:07,490 --> 00:10:11,102
good test can be is if one data

143
00:10:11,156 --> 00:10:14,530
center is disconnected and check

144
00:10:14,600 --> 00:10:18,050
if system is working. This is like

145
00:10:18,120 --> 00:10:20,660
one of the examples that can be done.

146
00:10:22,070 --> 00:10:25,090
And next thing is incremental rollout.

147
00:10:26,250 --> 00:10:29,350
This thing is going to protect us if we have some problems

148
00:10:29,420 --> 00:10:32,614
with our build in the

149
00:10:32,652 --> 00:10:37,158
software. Because idea

150
00:10:37,244 --> 00:10:40,650
there is to roll out to a small

151
00:10:40,720 --> 00:10:44,460
percentage of the users and

152
00:10:45,310 --> 00:10:48,986
wait for some time depends on your system

153
00:10:49,088 --> 00:10:53,054
and on feedback. And if

154
00:10:53,172 --> 00:10:56,430
all the metrics are okay, roll out

155
00:10:56,500 --> 00:11:00,480
more to other people, to other users and

156
00:11:01,010 --> 00:11:03,460
rollout will take longer in this case.

157
00:11:03,910 --> 00:11:07,394
But if we have some critical bug in

158
00:11:07,432 --> 00:11:11,300
our system, it will save us on it. It will be detected on

159
00:11:12,710 --> 00:11:16,550
smaller amount of people and system would not go down fully.

160
00:11:17,610 --> 00:11:21,618
Okay, so we've talked about tools

161
00:11:21,714 --> 00:11:26,120
and processes and let's talk about system design.

162
00:11:27,630 --> 00:11:31,722
And here are some concepts that you

163
00:11:31,776 --> 00:11:35,446
should keep in mind when designing fault

164
00:11:35,478 --> 00:11:39,402
tolerance system. And first

165
00:11:39,456 --> 00:11:43,086
of all architecting. Make sure

166
00:11:43,188 --> 00:11:46,926
it is modular and that it

167
00:11:46,948 --> 00:11:50,270
is distributed. Like for example,

168
00:11:50,420 --> 00:11:54,094
if we are talking about different data centers, system should be designed

169
00:11:54,142 --> 00:11:58,114
in the way too, in specific way and that it

170
00:11:58,152 --> 00:12:01,700
is scalable. Yeah, our favorite Black Friday example.

171
00:12:03,910 --> 00:12:07,446
Another thing to keep in mind is

172
00:12:07,548 --> 00:12:10,738
dependency management and single point of failure.

173
00:12:10,914 --> 00:12:14,914
And here I would suggest such exercise

174
00:12:14,962 --> 00:12:19,420
that after you will finish all system design,

175
00:12:19,790 --> 00:12:22,220
draft design for your system,

176
00:12:23,470 --> 00:12:27,146
look on it and ask yourself what's going

177
00:12:27,168 --> 00:12:31,162
to happen if each of the components are going down.

178
00:12:31,216 --> 00:12:34,366
Like what's going to happen if database down, what's going

179
00:12:34,388 --> 00:12:37,502
to happen is this part is down. What's going to happen

180
00:12:37,556 --> 00:12:40,560
is that process is going down.

181
00:12:40,930 --> 00:12:45,554
And the answer should be that it

182
00:12:45,592 --> 00:12:49,620
would be okay. If the answer is system

183
00:12:50,230 --> 00:12:53,922
all system is going down, it means you probably will

184
00:12:53,976 --> 00:12:59,510
need to find something

185
00:12:59,660 --> 00:13:03,458
and to think of some possible ways of recovery

186
00:13:03,554 --> 00:13:07,094
or duplication there or something like

187
00:13:07,132 --> 00:13:09,820
this. So yeah,

188
00:13:10,830 --> 00:13:14,038
make sure that all your dependencies,

189
00:13:14,134 --> 00:13:17,322
all dependencies of your system are taken

190
00:13:17,376 --> 00:13:20,694
care of. And I'm not only talking about internal

191
00:13:20,742 --> 00:13:24,350
dependencies, I'm also talking about external.

192
00:13:24,690 --> 00:13:26,960
Because for example,

193
00:13:27,810 --> 00:13:30,590
if you're using some external API,

194
00:13:31,730 --> 00:13:34,770
think what's going to happen is this API started

195
00:13:34,840 --> 00:13:38,162
to return errors. Are your system

196
00:13:38,296 --> 00:13:41,860
still going to work or not?

197
00:13:42,710 --> 00:13:46,662
And yet take care and design you and try to design

198
00:13:46,716 --> 00:13:50,630
your system in a way that it wouldn't fail.

199
00:13:51,370 --> 00:13:55,046
Another concept is graceful degradation and

200
00:13:55,148 --> 00:13:58,826
failover. And failover is then we

201
00:13:58,848 --> 00:14:02,314
are talking that some process is down.

202
00:14:02,512 --> 00:14:06,138
We have duplicate of this process that is taking it

203
00:14:06,304 --> 00:14:07,930
and serving the request.

204
00:14:11,970 --> 00:14:15,566
But graceful degradation is quite

205
00:14:15,668 --> 00:14:19,760
interesting. I find as quite interesting concept. It's when

206
00:14:21,890 --> 00:14:24,210
some parts of your system are failing,

207
00:14:25,350 --> 00:14:29,540
users still able to use it. They just might have

208
00:14:29,990 --> 00:14:33,220
reduced experience, user experience.

209
00:14:34,230 --> 00:14:39,366
And like for example, if your

210
00:14:39,468 --> 00:14:43,650
system is running out of memories and request

211
00:14:43,730 --> 00:14:47,834
is too heavy, you might consider to

212
00:14:47,872 --> 00:14:51,594
provide for your system that your system will at that point

213
00:14:51,632 --> 00:14:56,620
like return some simplified version of the request and

214
00:14:57,070 --> 00:15:00,122
it still will work. Maybe, I don't know,

215
00:15:00,176 --> 00:15:02,300
results would not be as nice,

216
00:15:05,410 --> 00:15:09,374
but still a system will still work and thing

217
00:15:09,492 --> 00:15:13,938
what to pay attention to here

218
00:15:14,024 --> 00:15:17,358
is like adaptive UI.

219
00:15:17,454 --> 00:15:20,340
If your system is partially working.

220
00:15:21,030 --> 00:15:24,642
Like for example, if we are talking about

221
00:15:24,776 --> 00:15:28,614
online shop and for each item you

222
00:15:28,652 --> 00:15:33,910
have button like find similar that is showing similar items.

223
00:15:35,050 --> 00:15:39,180
If this feature is not working, consider what you want to do with this button.

224
00:15:40,030 --> 00:15:43,354
Do you want to gray it out? Do you want to

225
00:15:43,392 --> 00:15:47,114
hide it? And what

226
00:15:47,152 --> 00:15:51,090
do you want to show to your users if some parts

227
00:15:51,110 --> 00:15:52,640
of the system is not working?

228
00:15:54,450 --> 00:15:58,650
Okay, next concept

229
00:15:58,730 --> 00:16:00,350
is diversity.

230
00:16:03,910 --> 00:16:08,130
Usually like running different systems, different technologies,

231
00:16:08,870 --> 00:16:13,186
different clouds might be a problem because

232
00:16:13,288 --> 00:16:16,934
it is more maintenance. But if we are

233
00:16:16,972 --> 00:16:20,614
talking about fault tolerance, it might

234
00:16:20,652 --> 00:16:24,054
be beneficial. And let me give you an

235
00:16:24,092 --> 00:16:27,570
example. We have some company and

236
00:16:27,660 --> 00:16:31,594
we have internal resources and internal chat for that company.

237
00:16:31,792 --> 00:16:35,340
But for some reason internal resources going down,

238
00:16:35,950 --> 00:16:39,690
what's going to happen? People and employees

239
00:16:40,130 --> 00:16:43,726
would not be able to communicate with each

240
00:16:43,748 --> 00:16:47,422
other to actually recover system. In this

241
00:16:47,476 --> 00:16:51,182
case it is important to have

242
00:16:51,236 --> 00:16:55,074
some backup channel and to

243
00:16:55,112 --> 00:16:59,710
make sure that employees can communicate

244
00:16:59,790 --> 00:17:03,300
and prepare recovery plan and to restore the system.

245
00:17:04,150 --> 00:17:08,246
And for example, some other example is that if

246
00:17:08,268 --> 00:17:12,680
you're running your servers in your system in some cloud,

247
00:17:13,130 --> 00:17:16,840
maybe you want to duplicate something in another one,

248
00:17:17,470 --> 00:17:21,180
in another type of cloud. I mean not only another data center.

249
00:17:21,550 --> 00:17:25,610
Yes, it will give you additional overhead,

250
00:17:26,670 --> 00:17:30,654
but it will protect you from

251
00:17:30,772 --> 00:17:35,038
the cases, some edge cases, and this specific cloud

252
00:17:35,124 --> 00:17:38,160
will go down. Okay,

253
00:17:38,770 --> 00:17:42,994
and here's redundancy. Probably main

254
00:17:43,112 --> 00:17:46,980
topic for fault tolerance system. It's like

255
00:17:48,390 --> 00:17:52,338
redundancy is like duplication of the part of the system

256
00:17:52,424 --> 00:17:55,814
to withstand any problems.

257
00:17:56,012 --> 00:17:59,602
And here, let's see what kind of redundancy

258
00:17:59,666 --> 00:18:03,606
we might have so we

259
00:18:03,628 --> 00:18:07,662
can have hardware redundancy. It's like raid

260
00:18:07,746 --> 00:18:11,034
well known or hot standby. It's like when

261
00:18:11,072 --> 00:18:14,454
we have another server totally

262
00:18:14,502 --> 00:18:16,620
identical to the first one.

263
00:18:18,030 --> 00:18:21,054
If first going down another second one,

264
00:18:21,092 --> 00:18:24,430
taking all the work software,

265
00:18:25,330 --> 00:18:28,138
we can have like process replication.

266
00:18:28,314 --> 00:18:31,886
Again, if process is going down, another one is serving the

267
00:18:31,908 --> 00:18:35,614
request and we have inversion programming

268
00:18:35,662 --> 00:18:40,290
like if we have critical system and this

269
00:18:40,360 --> 00:18:44,382
critical system might be implemented in several

270
00:18:44,446 --> 00:18:48,102
ways using different programming language or something

271
00:18:48,156 --> 00:18:54,438
like this. And when we need to get

272
00:18:54,524 --> 00:18:58,506
the output of this system we are actually comparing the results of

273
00:18:58,528 --> 00:19:02,678
all the implementations. And if it's not identical

274
00:19:02,854 --> 00:19:06,410
it means somewhere there is an error, somewhere.

275
00:19:07,550 --> 00:19:11,580
Next thing is network. It's like some

276
00:19:12,430 --> 00:19:16,222
backup network paths. If main thrust is going down,

277
00:19:16,276 --> 00:19:20,574
we switch into the backup data.

278
00:19:20,772 --> 00:19:24,420
Mirroring is when we have

279
00:19:26,230 --> 00:19:29,730
a database identical to the first

280
00:19:29,800 --> 00:19:33,410
one with all the data

281
00:19:33,480 --> 00:19:37,030
in sync and the first goes going down, we switch into the second

282
00:19:37,100 --> 00:19:40,306
one and data backups, of course backups

283
00:19:40,338 --> 00:19:44,166
as you're always useful and geographical, of course we can

284
00:19:44,188 --> 00:19:47,870
have geographical redundancy, it's multidimensional

285
00:19:47,890 --> 00:19:51,434
center deployment. Or maybe you ever want

286
00:19:51,472 --> 00:19:54,250
to deploy it in different countries,

287
00:19:54,830 --> 00:19:59,050
it's up to you. Remember about tsunami

288
00:19:59,710 --> 00:20:03,086
and here in the end I wanted to

289
00:20:03,108 --> 00:20:07,806
mention a few cases that happened,

290
00:20:07,908 --> 00:20:11,966
really happened. And that I found really interesting because it

291
00:20:11,988 --> 00:20:14,818
is something that you think what's the probability of this?

292
00:20:14,904 --> 00:20:18,722
Is it really going to possible? And actually yes.

293
00:20:18,776 --> 00:20:21,650
When we are talking about fault tolerance systems,

294
00:20:23,190 --> 00:20:27,400
sometimes we need to think about very

295
00:20:27,850 --> 00:20:31,670
low probable problems things and

296
00:20:31,820 --> 00:20:35,522
like first is Google. On 13th

297
00:20:35,586 --> 00:20:40,134
August 2015, four successful

298
00:20:40,182 --> 00:20:43,498
lighting strikes hits Google

299
00:20:43,584 --> 00:20:47,994
Data center. And another example

300
00:20:48,112 --> 00:20:51,614
is Twitter and Instagram both had some

301
00:20:51,652 --> 00:20:55,530
problems on July 14,

302
00:20:55,690 --> 00:20:59,230
2022. But for

303
00:20:59,300 --> 00:21:03,070
both of totally unrelated reasons,

304
00:21:03,150 --> 00:21:07,042
totally independent systems still

305
00:21:07,096 --> 00:21:10,674
goes down. So what's the probability of

306
00:21:10,712 --> 00:21:14,100
this? It is pretty low, but it's happened.

307
00:21:14,710 --> 00:21:19,190
And something that happened recently is

308
00:21:19,260 --> 00:21:22,770
that a lot of descriptions of items in Amazon been replicated

309
00:21:22,850 --> 00:21:26,230
with. I apologize but I can't fulfill this request.

310
00:21:26,730 --> 00:21:30,438
It happened just a few days ago and it happened because

311
00:21:30,524 --> 00:21:33,974
people automated descriptions of their

312
00:21:34,012 --> 00:21:37,782
items using chat GBT. But yeah,

313
00:21:37,916 --> 00:21:41,438
external APIs. It is something we

314
00:21:41,524 --> 00:21:44,720
talked about. It's been mentioned.

315
00:21:45,730 --> 00:21:49,920
Okay, so I will stop here.

316
00:21:50,610 --> 00:21:53,854
I hope it was useful for you.

317
00:21:53,972 --> 00:21:55,520
Thank you for your time,

