1
00:00:25,410 --> 00:00:30,920
Our name

2
00:01:52,630 --> 00:01:55,794
you. Hi, my name is

3
00:01:55,832 --> 00:01:59,326
Joylynn Kirui. I'm senior cloud security advocate advocate

4
00:01:59,438 --> 00:02:02,722
in Microsoft. And today I'll be taking you

5
00:02:02,776 --> 00:02:06,178
through the art of defensive programming. So a

6
00:02:06,184 --> 00:02:09,794
little bit of stats here. We are

7
00:02:09,832 --> 00:02:13,870
seeing that around 68% of companies say that their ceos

8
00:02:13,950 --> 00:02:17,478
demand DevOps and security teams not to do anything that's

9
00:02:17,534 --> 00:02:21,258
slows down the business. So this leads to around 52% of companies

10
00:02:21,344 --> 00:02:24,070
sacrificing cybersecurity for speed.

11
00:02:24,150 --> 00:02:28,134
57% of Ops team pushing back on security best practices

12
00:02:28,262 --> 00:02:31,920
44% of developers are actually not trained on

13
00:02:32,530 --> 00:02:36,542
coding securely. And this also comes from

14
00:02:36,596 --> 00:02:40,190
a result of having adopting

15
00:02:41,330 --> 00:02:44,994
a lot of open source code as well, because you're seeing

16
00:02:45,032 --> 00:02:48,930
80% to 90% of the code in your application comes from

17
00:02:49,000 --> 00:02:52,478
open source. And if you don't take into consideration

18
00:02:52,574 --> 00:02:56,054
the amount of security vulnerabilities that is in

19
00:02:56,092 --> 00:02:59,334
the open source software that we are using,

20
00:02:59,452 --> 00:03:03,398
then we are introducing security vulnerabilities into our

21
00:03:03,564 --> 00:03:07,078
coding environment. So a

22
00:03:07,084 --> 00:03:10,570
little bit of test as well there. We are saying that we have around

23
00:03:10,640 --> 00:03:14,294
570 times more developers than security researchers.

24
00:03:14,422 --> 00:03:17,820
In that case, it's almost impossible to have

25
00:03:18,270 --> 00:03:21,802
one to one equivalent in terms of pushing

26
00:03:21,866 --> 00:03:25,502
and evaluating security, all the code that's actually

27
00:03:25,556 --> 00:03:28,894
being built by developers. That's why it's quite important for

28
00:03:28,932 --> 00:03:32,202
us to go in and do a lot of automation

29
00:03:32,266 --> 00:03:36,478
as well. So other sources of security vulnerabilities

30
00:03:36,654 --> 00:03:40,126
that we are seeing are unchecked

31
00:03:40,158 --> 00:03:44,126
dependencies. And then we have also employee errors.

32
00:03:44,238 --> 00:03:47,574
This includes exposed access tokens and

33
00:03:47,612 --> 00:03:51,974
safe code patterns. One thing that I have learned from this

34
00:03:52,092 --> 00:03:56,082
journey as well is that in most cases, developers actually push

35
00:03:56,146 --> 00:03:59,718
code and they know that they're actually pushing vulnerabilities

36
00:03:59,814 --> 00:04:03,818
code. In most cases, they already know that there's a

37
00:04:03,824 --> 00:04:07,126
vulnerabilities in their code. As we had earlier,

38
00:04:07,158 --> 00:04:11,026
we have 570 times more developers than security researchers.

39
00:04:11,158 --> 00:04:14,734
And damage is usually exponentially greater when it

40
00:04:14,772 --> 00:04:19,120
is found in production than in

41
00:04:19,490 --> 00:04:21,930
development during the development lifecycle.

42
00:04:22,090 --> 00:04:26,194
So why do we have to shift security left? So the

43
00:04:26,232 --> 00:04:29,634
importance of shifting security left is

44
00:04:29,672 --> 00:04:33,282
because to get the developer cloud against new

45
00:04:33,336 --> 00:04:36,886
threat types, the answer is always to shift security left and

46
00:04:36,908 --> 00:04:41,266
to leverage cloud native security as well. So shifting

47
00:04:41,298 --> 00:04:44,770
left helps enterprises find and remediate vulnerabilities

48
00:04:44,850 --> 00:04:47,906
earlier and across the development lifecycle.

49
00:04:48,018 --> 00:04:52,134
In this case, enterprises that extend security to development

50
00:04:52,262 --> 00:04:55,466
reduce security instance by 80%.

51
00:04:55,648 --> 00:04:58,442
And this is not just a reduction event.

52
00:04:58,576 --> 00:05:02,446
There's also a financial component. It costs 60 times more to

53
00:05:02,468 --> 00:05:06,554
fix a security defect in production than in development.

54
00:05:06,682 --> 00:05:10,606
So blending security and development together within the

55
00:05:10,628 --> 00:05:14,430
development workflow remains a challenge for many enterprises.

56
00:05:14,590 --> 00:05:18,622
So while more enterprises are starting their transformations,

57
00:05:18,766 --> 00:05:22,146
there are still 62% of enterprises that have yet to

58
00:05:22,168 --> 00:05:25,874
integrate security into the development phase. So let's

59
00:05:25,922 --> 00:05:29,666
dive into how security fits

60
00:05:29,698 --> 00:05:33,154
into the development lifecycle. So each stage of the development

61
00:05:33,202 --> 00:05:36,742
lifecycle has unique security components that when

62
00:05:36,796 --> 00:05:40,358
used together help prevent threats at all critical

63
00:05:40,454 --> 00:05:43,366
junction. So for the commit stage,

64
00:05:43,478 --> 00:05:47,062
it's important to start with a focus on threat modeling

65
00:05:47,206 --> 00:05:51,226
and understanding the threat landscape to grasp the overall risk

66
00:05:51,338 --> 00:05:55,294
of what you are looking to bring to execution in

67
00:05:55,332 --> 00:05:59,706
code. So in the thought of having defensive

68
00:05:59,818 --> 00:06:03,466
programming, the first component is usually that's

69
00:06:03,498 --> 00:06:07,258
very important, especially during the commit

70
00:06:07,354 --> 00:06:11,346
is doing threat modeling. It's trying to evaluate and

71
00:06:11,368 --> 00:06:15,490
see, okay, what threat vectors can be used by a hacker to compromise your system

72
00:06:15,640 --> 00:06:18,982
during the design stage. So at least you can scope out and say okay,

73
00:06:19,036 --> 00:06:22,898
so these are the areas, these are the endpoints that would be public facing

74
00:06:22,994 --> 00:06:26,354
and these are the threats that would be faced in this API

75
00:06:26,402 --> 00:06:29,894
that's actually publicly exposed.

76
00:06:30,022 --> 00:06:34,198
And then you can be able to now think of ways of defending

77
00:06:34,294 --> 00:06:37,722
against those threat vectors from being

78
00:06:37,776 --> 00:06:41,578
exploited. So you need to employ a range of IDE security

79
00:06:41,664 --> 00:06:45,086
plugins as well and pre commit hooks to

80
00:06:45,108 --> 00:06:48,906
make sure that the code you're generating adheres to security standards.

81
00:06:49,018 --> 00:06:52,538
So during the pre commit stage, you also have to make sure that you have

82
00:06:52,644 --> 00:06:56,834
secure coding standards in place for your organization that

83
00:06:56,872 --> 00:06:59,506
your developers are adhering to.

84
00:06:59,688 --> 00:07:03,314
So I'll give a brief about some of the

85
00:07:03,352 --> 00:07:06,854
secure coding standards that should be adhered to

86
00:07:06,972 --> 00:07:09,938
in a defensive programming environment.

87
00:07:10,114 --> 00:07:14,322
On basis this ten would be equated

88
00:07:14,466 --> 00:07:17,818
for an environment for any developer where we are

89
00:07:17,824 --> 00:07:21,078
always talking about input validation.

90
00:07:21,254 --> 00:07:25,350
Make sure that you never trust what a user is inputting. That's why we're

91
00:07:25,430 --> 00:07:28,150
looking at checking the data length,

92
00:07:28,310 --> 00:07:31,726
validating the character sets, using restrictions as

93
00:07:31,748 --> 00:07:35,198
well. Another security coding standard that we

94
00:07:35,284 --> 00:07:39,274
have to make sure that we are checking is managing authentication

95
00:07:39,322 --> 00:07:42,926
and passwords. We are making sure that least you're

96
00:07:42,958 --> 00:07:46,190
using TLS client authentication,

97
00:07:46,350 --> 00:07:49,634
you're using the correct authentication and authorizations as

98
00:07:49,672 --> 00:07:53,266
well, and you're not transmitting passwords in the

99
00:07:53,288 --> 00:07:56,910
clear, you're making sure that you're transmitting passwords securely.

100
00:07:57,070 --> 00:08:00,850
So this is a key concept that should be followed by all developers

101
00:08:00,930 --> 00:08:04,642
in terms of managing authentication and passwords. And for passwords,

102
00:08:04,706 --> 00:08:09,046
make sure that you're using a secure vault like Azure

103
00:08:09,078 --> 00:08:12,966
key vault to store your credentials

104
00:08:12,998 --> 00:08:16,618
as well. So a third security best practice that you

105
00:08:16,624 --> 00:08:20,006
can follow is to make sure that you're always sanitizing your

106
00:08:20,048 --> 00:08:23,866
data fast, and then you send that input to other systems

107
00:08:23,898 --> 00:08:27,678
as well. So you can use a whitelist to

108
00:08:27,764 --> 00:08:32,094
allow a particular data is

109
00:08:32,132 --> 00:08:36,606
actually allowed, or a blacklist, or you can use escape inputs

110
00:08:36,638 --> 00:08:40,674
to keep things safe as well. Another concept that you should

111
00:08:40,712 --> 00:08:44,434
follow for secure coding is adopting the principle of

112
00:08:44,472 --> 00:08:48,066
least privilege. If someone should not

113
00:08:48,088 --> 00:08:52,034
have access to something, they should not only have access to what they are required

114
00:08:52,082 --> 00:08:55,746
to have. So this is where we need to validate permissions

115
00:08:55,778 --> 00:08:59,286
as much as possible. Another concept for secure coding that

116
00:08:59,308 --> 00:09:02,746
we have to follow in the art of defensive programming is

117
00:09:02,768 --> 00:09:06,106
to make sure that you have an architecture in place where

118
00:09:06,128 --> 00:09:10,182
you have to make sure that you're using secure

119
00:09:10,246 --> 00:09:14,226
architecture. We have several like the OWaSp

120
00:09:14,278 --> 00:09:18,240
secure architecture practice that are available for you to view.

121
00:09:18,930 --> 00:09:23,086
So you need to make sure that for every organization you have secure

122
00:09:23,118 --> 00:09:27,234
architecture and design that all developers follow.

123
00:09:27,432 --> 00:09:31,122
The 6th that I would say is to deny access

124
00:09:31,256 --> 00:09:33,650
by default for all systems.

125
00:09:34,070 --> 00:09:37,734
These are talking about zero trust in

126
00:09:37,772 --> 00:09:41,654
almost all levels of your infrastructure as well.

127
00:09:41,772 --> 00:09:46,326
And we also have to make sure that we are keeping that

128
00:09:46,348 --> 00:09:49,638
you have very many layers of defense. So this is where we're

129
00:09:49,654 --> 00:09:53,706
talking about adding several layers of

130
00:09:53,808 --> 00:09:57,510
protecting your application, protecting your data, protecting your APIs,

131
00:09:57,590 --> 00:10:01,446
protecting your containers, making it very hard for hackers

132
00:10:01,478 --> 00:10:04,970
to actually compromise your system in terms of also

133
00:10:05,120 --> 00:10:08,634
natural segregation, in terms of the kind of environment

134
00:10:08,682 --> 00:10:12,160
that you are building, that the developers are building

135
00:10:12,470 --> 00:10:16,014
is also secure. Another concept

136
00:10:16,062 --> 00:10:20,034
for secure coding that we have to follow is make sure that

137
00:10:20,232 --> 00:10:23,906
you secure the kind of environment and working

138
00:10:24,008 --> 00:10:27,906
communication that you have. So you have to make sure that you're

139
00:10:27,938 --> 00:10:30,738
using strong encryption.

140
00:10:30,914 --> 00:10:34,950
You protect your databases as well. We make sure that you sign your code before

141
00:10:35,020 --> 00:10:38,578
releasing it. And another one that we have to

142
00:10:38,604 --> 00:10:42,310
follow is to check the quality of your code and follow coding standards.

143
00:10:42,390 --> 00:10:45,930
We have to make sure that you have a good peer review

144
00:10:46,080 --> 00:10:50,098
of your code before pushing

145
00:10:50,134 --> 00:10:53,614
that code, before you commit the code as well.

146
00:10:53,732 --> 00:10:57,406
So this is quite an important concept in

147
00:10:57,428 --> 00:11:02,154
terms of defensive programming, whereby you take into account threat

148
00:11:02,202 --> 00:11:04,826
modeling, IDE security plugin,

149
00:11:04,938 --> 00:11:08,942
precommit hooks, security coding standards,

150
00:11:09,086 --> 00:11:13,250
peer review as well. So for today,

151
00:11:13,320 --> 00:11:17,174
we are actually going to go through a way of you

152
00:11:17,212 --> 00:11:20,822
as a developer integrating Codeql as an

153
00:11:20,876 --> 00:11:24,806
IDE security plugin and identifying security vulnerabilities on

154
00:11:24,828 --> 00:11:28,122
the go. Another key concept that we

155
00:11:28,176 --> 00:11:31,626
follow is running

156
00:11:31,728 --> 00:11:35,254
static and dynamic analysis. So another aspect of securing

157
00:11:35,302 --> 00:11:38,890
the developer workflow is through assessing our

158
00:11:38,960 --> 00:11:42,122
own created code. So one of the ways to check our

159
00:11:42,176 --> 00:11:45,726
code is with static and dynamic analysis. So it is best to

160
00:11:45,748 --> 00:11:49,614
use a combination of these techniques to make sure that the findings are

161
00:11:49,652 --> 00:11:53,310
prioritized in the right way. So static analysis

162
00:11:53,390 --> 00:11:56,830
examines the code base and finds potential vulnerabilities

163
00:11:56,910 --> 00:12:01,134
that may be present in the code being created. And dynamic

164
00:12:01,182 --> 00:12:05,406
analysis reviews running code and runs simulated attacks

165
00:12:05,438 --> 00:12:09,202
on the code base itself. So that's why we talk about SAS

166
00:12:09,266 --> 00:12:12,802
as well as DAS. And I'm sure we have several

167
00:12:12,866 --> 00:12:16,322
other sessions that are covering on SAS and DAs.

168
00:12:16,466 --> 00:12:20,314
But for today our main area of focus

169
00:12:20,432 --> 00:12:24,502
will be on code scanning using CodeqL.

170
00:12:24,646 --> 00:12:28,506
CodeqL allows your team to treat code as data and it

171
00:12:28,528 --> 00:12:32,702
enables them to create their own queries in addition to the standard community

172
00:12:32,836 --> 00:12:36,414
powered queries. For today we

173
00:12:36,452 --> 00:12:40,474
are going to see how we can be able to use the community powered

174
00:12:40,522 --> 00:12:44,258
security queries on your code to find security

175
00:12:44,344 --> 00:12:48,100
vulnerabilities when you are using your IDE.

176
00:12:48,470 --> 00:12:53,140
We'll dive right into the demo.

177
00:12:53,510 --> 00:12:57,590
So I will practically show you how to use CodeQL

178
00:12:58,010 --> 00:13:01,750
on your ide to identify security vulnerabilities

179
00:13:02,490 --> 00:13:06,200
using the community built queries for security,

180
00:13:06,810 --> 00:13:09,980
which I will just show you here.

181
00:13:10,510 --> 00:13:14,922
So you can see we have all

182
00:13:14,976 --> 00:13:19,194
these security cwas and

183
00:13:19,232 --> 00:13:23,098
they're named coding to the particular ids.

184
00:13:23,274 --> 00:13:27,642
So you can go in and query any of these available queries

185
00:13:27,706 --> 00:13:31,454
against your code base to

186
00:13:31,492 --> 00:13:35,774
see if it's actually vulnerable. So CodeqL

187
00:13:35,822 --> 00:13:39,106
is an open source static application security

188
00:13:39,208 --> 00:13:43,138
tool. It allows users to also write

189
00:13:43,224 --> 00:13:47,442
queries to find bugs not only for security vulnerabilities,

190
00:13:47,506 --> 00:13:51,318
but also any kind of bug from their source code.

191
00:13:51,484 --> 00:13:55,430
So how do you get started with

192
00:13:55,580 --> 00:13:59,786
CodeQL? So when you are in your ide you

193
00:13:59,808 --> 00:14:04,038
can go to your extensions, go to your marketplace

194
00:14:04,214 --> 00:14:08,460
extensions and search for CodeQL and

195
00:14:09,970 --> 00:14:12,590
make sure that you install the plugin.

196
00:14:13,810 --> 00:14:17,146
In my case it's already installed,

197
00:14:17,338 --> 00:14:20,782
but it's as simple as that. Going into the

198
00:14:20,916 --> 00:14:24,514
extensions marketplace and making sure that you

199
00:14:24,552 --> 00:14:28,050
have the extension installed.

200
00:14:28,390 --> 00:14:32,162
And then the thing with

201
00:14:32,216 --> 00:14:36,598
CodeQL, it analyzes your code in terms of

202
00:14:36,764 --> 00:14:40,182
a database. So you need to

203
00:14:40,236 --> 00:14:44,726
generate a database for your code. So the

204
00:14:44,748 --> 00:14:48,298
way I usually do it is through

205
00:14:48,464 --> 00:14:52,026
since I'm using Windows operating system here you

206
00:14:52,048 --> 00:14:56,154
can go to GitHub and then there

207
00:14:56,192 --> 00:14:59,334
is a folder that is zipped

208
00:14:59,382 --> 00:15:03,322
for CodeQl which you can extract

209
00:15:03,386 --> 00:15:06,590
for your windows, for your Linux,

210
00:15:06,930 --> 00:15:10,974
for your macOS as well. And once you

211
00:15:11,012 --> 00:15:14,354
extract them, you can be able to add them to

212
00:15:14,392 --> 00:15:18,702
path and make sure that you are able to run CodeQL

213
00:15:18,766 --> 00:15:21,662
CLI from your machine.

214
00:15:21,806 --> 00:15:24,770
So once you're able to run CodeQL CLI,

215
00:15:25,450 --> 00:15:28,998
you just clone the code

216
00:15:29,084 --> 00:15:32,470
that you want to review or to research

217
00:15:32,540 --> 00:15:36,086
on. It might be from GitHub as well.

218
00:15:36,188 --> 00:15:39,842
And then what you do, you build a

219
00:15:39,996 --> 00:15:44,778
database for that particular project.

220
00:15:44,944 --> 00:15:48,870
So you run a code like CodeQL database

221
00:15:48,950 --> 00:15:53,130
create, and then you give it a database name and you specify

222
00:15:53,210 --> 00:15:56,826
the language of that particular project that you're

223
00:15:56,858 --> 00:16:00,634
using. So in this example, if we are using Java,

224
00:16:00,762 --> 00:16:03,460
so it will be CodeQL database create.

225
00:16:04,950 --> 00:16:09,650
Then you give it like Webgood language Java.

226
00:16:09,990 --> 00:16:13,970
So it will take a bit of time just for it to build a database.

227
00:16:14,390 --> 00:16:18,914
And then once

228
00:16:18,952 --> 00:16:23,154
it creates a compressed file like

229
00:16:23,192 --> 00:16:26,834
it's database, what you do, you come back to your visual

230
00:16:26,882 --> 00:16:30,262
studio. There will be this extension

231
00:16:30,406 --> 00:16:33,514
for CodeQL. You come there and

232
00:16:33,552 --> 00:16:37,222
then you add a database.

233
00:16:37,286 --> 00:16:41,150
You add the database here. So I had already added

234
00:16:41,490 --> 00:16:45,534
this particular database. We've already

235
00:16:45,572 --> 00:16:49,086
mentioned before that CodeQL will analyze your code

236
00:16:49,188 --> 00:16:53,140
in terms of database. So if you're running like

237
00:16:54,550 --> 00:16:58,226
marketing application that's based

238
00:16:58,248 --> 00:17:01,220
on Java, so what CodeQL will do,

239
00:17:01,750 --> 00:17:05,702
it will wrap that up and present

240
00:17:05,756 --> 00:17:10,310
it in terms of a database. So you add it here under databases.

241
00:17:11,290 --> 00:17:15,030
And then what you do, because you want to use

242
00:17:15,100 --> 00:17:19,370
the community built queries, you go to GitHub

243
00:17:21,870 --> 00:17:25,580
repo and then you use that

244
00:17:26,110 --> 00:17:29,926
code already. You clone that

245
00:17:30,048 --> 00:17:33,470
into your visual studio and then you can be able to run

246
00:17:33,540 --> 00:17:38,494
all those queries that are already built from

247
00:17:38,532 --> 00:17:41,790
the community against your code. Remember,

248
00:17:41,860 --> 00:17:45,474
in this case, your code is in

249
00:17:45,512 --> 00:17:49,486
quotes database. So in this particular instance,

250
00:17:49,678 --> 00:17:54,002
what I wanted to run against my code

251
00:17:54,136 --> 00:17:57,346
was to check for cross site scripting

252
00:17:57,378 --> 00:17:58,390
vulnerabilities.

253
00:18:00,330 --> 00:18:04,886
What happens is I

254
00:18:04,908 --> 00:18:08,602
had this open already. So you will find that

255
00:18:08,736 --> 00:18:13,018
you have this particular file, this particular

256
00:18:13,184 --> 00:18:19,050
query for SQL injection

257
00:18:20,210 --> 00:18:24,014
that's already available, but also have all these other

258
00:18:24,132 --> 00:18:27,866
queries that check for particular common weakness

259
00:18:27,978 --> 00:18:31,694
enumerations. So for today

260
00:18:31,812 --> 00:18:35,870
we will cover CWE

261
00:18:36,030 --> 00:18:39,966
79. So we want to see if our code is actually vulnerable

262
00:18:40,078 --> 00:18:44,050
to cross site scripting. So it's as easy as

263
00:18:44,120 --> 00:18:47,474
going into that folder

264
00:18:47,602 --> 00:18:51,110
and checking for the query language for XSS.

265
00:18:51,530 --> 00:18:55,650
So what you do, you go to XSS query language

266
00:18:55,810 --> 00:19:00,854
and then you right click and run

267
00:19:00,892 --> 00:19:04,426
the queries in the selected files. So it will

268
00:19:04,448 --> 00:19:07,722
take some bit of time just to scroll through all

269
00:19:07,776 --> 00:19:11,470
your lines of code to check for this particular

270
00:19:11,540 --> 00:19:14,618
cross site scripting vulnerabilities.

271
00:19:14,794 --> 00:19:18,106
And then what it does, once it's finished,

272
00:19:18,218 --> 00:19:21,694
this is what it will give. It will give you all

273
00:19:21,732 --> 00:19:26,130
the lines that are actually vulnerable.

274
00:19:27,030 --> 00:19:31,140
So let's run that once again. So right click

275
00:19:31,670 --> 00:19:35,334
and say codeql run

276
00:19:35,372 --> 00:19:39,094
queries. So you'll give it a few minutes just for

277
00:19:39,132 --> 00:19:43,062
it to scroll through and see which

278
00:19:43,116 --> 00:19:46,760
particular lines of code is actually vulnerable. So remember,

279
00:19:47,210 --> 00:19:52,294
you don't have to only use this security queries,

280
00:19:52,422 --> 00:19:56,454
you can build your own as well. So you might be coding

281
00:19:56,502 --> 00:20:00,414
and then you notice that I actually did something wrong

282
00:20:00,452 --> 00:20:03,982
and then you want to see okay, what other

283
00:20:04,036 --> 00:20:08,094
code have I pushed that actually has this running

284
00:20:08,212 --> 00:20:11,678
or has this particular vulnerability? So as you

285
00:20:11,684 --> 00:20:15,170
can see here, there will be a pop up on the bottom

286
00:20:15,240 --> 00:20:19,410
right, just checking for running the queries.

287
00:20:57,340 --> 00:21:01,480
So after a few minutes the XSS

288
00:21:02,460 --> 00:21:06,060
query will have run through your whole code

289
00:21:06,210 --> 00:21:10,376
and given you the lines of code that are actually vulnerable.

290
00:21:10,488 --> 00:21:13,788
So as you can see here, it tells you that

291
00:21:13,874 --> 00:21:17,570
cross site scripting vulnerability due to a user provided value.

292
00:21:17,940 --> 00:21:21,184
So when you go to that particular line, it will tell you

293
00:21:21,222 --> 00:21:24,736
that you need to change this. So as you

294
00:21:24,758 --> 00:21:28,630
can see, it's very important to make sure that you're using

295
00:21:29,560 --> 00:21:32,720
IDE security plugins whenever you're coding

296
00:21:32,800 --> 00:21:35,972
to make sure you identify the security vulnerabilities as early

297
00:21:36,026 --> 00:21:39,300
on as possible, even before you commit your code.

298
00:21:39,450 --> 00:21:43,620
And as well as having secure coding

299
00:21:43,700 --> 00:21:47,396
standards set in place. I've seen events

300
00:21:47,428 --> 00:21:51,320
whereby you only have a checklist only for the developers

301
00:21:52,380 --> 00:21:57,004
to follow four

302
00:21:57,042 --> 00:22:00,328
lists to do or to adhere to whenever they're coding.

303
00:22:00,424 --> 00:22:04,028
But it's also important to have regular security training for

304
00:22:04,034 --> 00:22:08,572
the developers, as well as having security champions

305
00:22:08,716 --> 00:22:12,128
among the developers who will advocate for the

306
00:22:12,134 --> 00:22:15,212
others to take security seriously,

307
00:22:15,276 --> 00:22:19,380
and as well as being quite intentional about training them.

308
00:22:19,530 --> 00:22:22,820
Every so often in the past, what I've done

309
00:22:22,890 --> 00:22:26,852
is at least once a month you have all hands

310
00:22:26,906 --> 00:22:30,488
for developers to make sure that they are

311
00:22:30,574 --> 00:22:33,636
up to date with security best practices.

312
00:22:33,828 --> 00:22:37,416
And every so often for security champions, at least

313
00:22:37,438 --> 00:22:40,650
you have them on a more regular basis as well.

314
00:22:43,440 --> 00:22:46,750
So maybe some call to action as well.

315
00:22:47,280 --> 00:22:52,616
You can go to aka Ms devsecopsolutions

316
00:22:52,728 --> 00:22:55,984
and get to know some of

317
00:22:56,022 --> 00:22:59,772
the solutions that are available on Azure as well as GitHub

318
00:22:59,916 --> 00:23:03,680
for your complete end to end Devsecops journey.

319
00:23:04,260 --> 00:23:08,304
We have very many tools there available, including Microsoft

320
00:23:08,352 --> 00:23:12,224
Defender for DevOps, also some tools

321
00:23:12,272 --> 00:23:15,524
available for container security as well in terms of

322
00:23:15,562 --> 00:23:19,556
infrastructure as code, and a

323
00:23:19,578 --> 00:23:23,368
lot is available there as well. So if you want to learn around

324
00:23:23,534 --> 00:23:28,184
Codeql you can go to codeql GitHub.com.

325
00:23:28,382 --> 00:23:31,544
There are very many docs that are available. You can

326
00:23:31,582 --> 00:23:36,184
see ways of integrating or installing

327
00:23:36,232 --> 00:23:39,644
the codeQL extension by yourself, and how

328
00:23:39,682 --> 00:23:43,276
you can go about and querying the

329
00:23:43,298 --> 00:23:46,896
community security queries against your code to make sure

330
00:23:46,918 --> 00:23:49,840
that to find out if you're actually vulnerable.

331
00:23:50,420 --> 00:23:54,304
So on top of using CodeQL on your IDE,

332
00:23:54,422 --> 00:23:59,412
you can also use it as part of GitHub advanced security in

333
00:23:59,466 --> 00:24:03,044
GitHub. So this is available as well for

334
00:24:03,082 --> 00:24:06,100
both public and private repos.

335
00:24:07,160 --> 00:24:11,016
So if you have your public repo, you can go to the security tab and

336
00:24:11,038 --> 00:24:14,772
make sure that you have security scanning enabled

337
00:24:14,916 --> 00:24:19,012
and as well as dependable enabled dependency scanning enabled.

338
00:24:19,076 --> 00:24:22,468
So GitHub advanced security will cover your code scanning

339
00:24:22,564 --> 00:24:25,892
and as well as your credential scanning and as well as your dependency

340
00:24:25,956 --> 00:24:29,624
scanning, and it will still

341
00:24:29,662 --> 00:24:33,480
use CodeQL to scan for your code

342
00:24:33,550 --> 00:24:37,072
security vulnerabilities. That's it

343
00:24:37,126 --> 00:24:41,344
for the day. You can catch me on Twitter at

344
00:24:41,462 --> 00:24:44,704
Jolene Underscore kirui. In case you have any questions,

345
00:24:44,822 --> 00:24:48,796
you can link with me on LinkedIn as well using Joylynn

346
00:24:48,828 --> 00:24:52,256
Kirui, and I'm very happy to answer all your

347
00:24:52,278 --> 00:24:53,950
questions. Thank you very much.

