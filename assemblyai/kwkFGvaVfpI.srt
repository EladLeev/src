1
00:00:39,010 --> 00:00:42,786
This talk today is called declarative everything, a githubs

2
00:00:42,818 --> 00:00:46,470
and automation based approach to building efficient developer platforms.

3
00:00:47,450 --> 00:00:50,958
Before diving in too deep, let's understand what a

4
00:00:50,964 --> 00:00:55,162
developer platform even is. On the right hand side over here we have production

5
00:00:55,226 --> 00:00:58,638
ish things. On the production side,

6
00:00:58,724 --> 00:01:02,426
obviously, there's the true production environment. 100% of the traffic

7
00:01:02,458 --> 00:01:05,410
that that receives is usually from external users.

8
00:01:06,070 --> 00:01:09,682
There might also be staging, which might get a

9
00:01:09,736 --> 00:01:13,746
small percentage of the production traffic. And again, all of this depends on

10
00:01:13,768 --> 00:01:16,834
how the organization has implemented various blue

11
00:01:16,882 --> 00:01:20,946
green type of environments. So yeah, the traffic

12
00:01:20,978 --> 00:01:24,306
split depends on how that's configured. On the non production

13
00:01:24,338 --> 00:01:27,250
side of the house, we have various different environments.

14
00:01:27,410 --> 00:01:30,846
Development is usually one of the biggest ones that engineers get to interact

15
00:01:30,898 --> 00:01:34,650
with on a day to day basis. This might be a local

16
00:01:34,720 --> 00:01:38,314
development environment. On a local workstation, it might be a remote machine that an

17
00:01:38,352 --> 00:01:41,310
engineer normally sshes into, so on and so forth.

18
00:01:42,050 --> 00:01:45,854
Then there's CI CD. The goal for that is

19
00:01:46,052 --> 00:01:49,930
that environment normally serves two types of usages.

20
00:01:50,090 --> 00:01:53,806
One is from the various authors of all of the features and changes that

21
00:01:53,828 --> 00:01:57,502
are being proposed. The other is from our colleagues who are teammates

22
00:01:57,566 --> 00:02:01,022
who get to review the code and see the outputs of the various

23
00:02:01,086 --> 00:02:04,834
test executions. Then we have our classes of

24
00:02:04,872 --> 00:02:08,922
pre production environments, which aren't really production, but are production

25
00:02:09,006 --> 00:02:12,466
ish in the sense that it might be something for our QA teams

26
00:02:12,498 --> 00:02:16,482
to work off of, or a dev environment, which is an environment

27
00:02:16,626 --> 00:02:20,110
shared by multiple engineers to perform various types

28
00:02:20,130 --> 00:02:23,862
of end to end testing. A user acceptance testing environment

29
00:02:23,926 --> 00:02:27,418
might also be in that bucket, which is a

30
00:02:27,424 --> 00:02:30,894
place where a product manager, for example, might go to make sure the

31
00:02:30,932 --> 00:02:34,574
definition of done as was outlined in whatever product

32
00:02:34,772 --> 00:02:38,110
document has been implemented appropriately.

33
00:02:40,850 --> 00:02:44,434
We talked a little bit about a developer platform.

34
00:02:44,552 --> 00:02:48,446
Now let's talk about the developer workflows, and then we'll try to converge

35
00:02:48,478 --> 00:02:51,950
the both of them together. A dev workflow normally

36
00:02:52,110 --> 00:02:56,386
includes, and I'll use the terminologies SDLC and

37
00:02:56,488 --> 00:02:59,794
software development lifecycle interchangeably. They are essentially

38
00:02:59,842 --> 00:03:03,426
the same thing. The SDLC includes two parts. One is the inner

39
00:03:03,458 --> 00:03:07,522
loop and the outer loop. The inner loop is when the engineer is actively

40
00:03:07,586 --> 00:03:11,260
building something, which is the dev happening inside of an IDE.

41
00:03:11,950 --> 00:03:15,446
Some local testing might happen. Then as an engineer,

42
00:03:15,478 --> 00:03:19,082
we might push this branch up somewhere to get it deployed into

43
00:03:19,136 --> 00:03:23,018
some environment where we can do our end to end testing. And out there

44
00:03:23,104 --> 00:03:26,510
we can start to identify some issues. If there are any issues,

45
00:03:26,580 --> 00:03:30,606
goes back into dev and that loop continues till the engineer is happy with

46
00:03:30,628 --> 00:03:34,254
their implementation. To meet the definition of done once

47
00:03:34,292 --> 00:03:37,602
all of that's good goes into code review again, if everything

48
00:03:37,656 --> 00:03:41,310
looks fine over there, we'll move forward into the CI CD stage.

49
00:03:41,470 --> 00:03:45,278
If it's not, it goes back into dev, goes back into the inner loop

50
00:03:45,294 --> 00:03:48,500
of the SDLC, changes keep getting implemented, so on and so

51
00:03:49,750 --> 00:03:52,882
on the other side, the code review, that's the start of the outer loop.

52
00:03:52,946 --> 00:03:56,274
Hit CI CD after that, and then pre production and then prod.

53
00:03:56,402 --> 00:04:00,006
In every single one of these stages, if there's something that goes wrong,

54
00:04:00,108 --> 00:04:03,226
we go back into dev, which is the start of the inner loop of the

55
00:04:03,248 --> 00:04:06,982
SDLC. Otherwise, we just keep going forward into the next stage

56
00:04:07,046 --> 00:04:10,682
till we hit production, which is when our software is going and

57
00:04:10,736 --> 00:04:14,554
serving live humans. On the right hand side,

58
00:04:14,592 --> 00:04:17,438
it's just a different way of looking at the inner and the outer loop of

59
00:04:17,444 --> 00:04:21,374
the SDLC, where the inner loop, as I covered, was the repl of

60
00:04:21,412 --> 00:04:25,070
software development, which is the read well print loop.

61
00:04:25,410 --> 00:04:28,814
Once things are fine, we end up using git as our context

62
00:04:28,862 --> 00:04:32,738
transfer mechanism. We push a branch for code review, for example,

63
00:04:32,824 --> 00:04:35,742
and then it hits the outer loop of the SDLC,

64
00:04:35,886 --> 00:04:39,286
goes through that entire loop, and then it'll go into some sort of a

65
00:04:39,308 --> 00:04:42,566
pre production environment. Staging might be called a pre

66
00:04:42,588 --> 00:04:46,006
prod environment, or a part of the production infrastructure, depending on

67
00:04:46,028 --> 00:04:48,540
how the organization is usually set up.

68
00:04:49,790 --> 00:04:53,398
Next, I'm an engineer.

69
00:04:53,494 --> 00:04:57,958
I've been given a ticket. I need to ultimately get this change into production.

70
00:04:58,134 --> 00:05:01,878
What are the workflows that happen underneath? I will

71
00:05:01,984 --> 00:05:05,680
get the latest version of the source code, pull main,

72
00:05:06,850 --> 00:05:10,346
do a git chatout, b new user table if that's the ticket,

73
00:05:10,378 --> 00:05:13,486
I'm working on t 1234, and then I pull up

74
00:05:13,508 --> 00:05:16,882
my id, get my local dev end set

75
00:05:16,936 --> 00:05:20,578
up. After that, I might wait for my id to index a

76
00:05:20,584 --> 00:05:23,966
little bit, and then I start coding. Once some code has gotten

77
00:05:23,998 --> 00:05:27,746
written, I might do some form

78
00:05:27,768 --> 00:05:31,266
of local verification, might push it to an environment

79
00:05:31,298 --> 00:05:34,514
of some sort to be able to perform some level of end to end testing.

80
00:05:34,642 --> 00:05:38,198
And one theme across this today will be a

81
00:05:38,204 --> 00:05:41,578
lot of the content I cover will be more applicable to the

82
00:05:41,584 --> 00:05:45,126
microservice side of the house, although some of these constructs

83
00:05:45,158 --> 00:05:48,170
should be applicable to monolith architectures as well.

84
00:05:48,320 --> 00:05:51,914
So now I've done some testing, the feature seems

85
00:05:51,952 --> 00:05:55,706
to be working. I'll write some unit and some integration tests, and then once I'm

86
00:05:55,738 --> 00:05:59,360
satisfied with the definition I've done, send it out for a code review.

87
00:06:00,050 --> 00:06:03,342
My colleague, my teammate, will read the code. They'll check

88
00:06:03,396 --> 00:06:06,406
how CI was running for the tests I just implemented.

89
00:06:06,458 --> 00:06:09,714
They'll also make sure that older tests haven't broken as a result

90
00:06:09,752 --> 00:06:13,166
of menu change. Then a diligent code reviewer

91
00:06:13,198 --> 00:06:16,594
might also try to get this into a preview environment of some sort, right?

92
00:06:16,712 --> 00:06:20,440
To check how the functionality, et cetera, is working. If everything looks good,

93
00:06:20,810 --> 00:06:24,390
approval if there's feedback, you send it. And again,

94
00:06:24,460 --> 00:06:27,878
it's the same inner loop of the SDLC till things look good.

95
00:06:27,964 --> 00:06:31,660
After things look good, the engineer can merge the change into main.

96
00:06:32,270 --> 00:06:35,690
As soon as that merge action happens, tests run.

97
00:06:35,840 --> 00:06:39,334
If things are looking good, engineer can move it into pre prod,

98
00:06:39,382 --> 00:06:43,934
do some more testing, things are good, deploy to staging more

99
00:06:43,972 --> 00:06:47,402
testing, things are good, move it to prod. That's normally

100
00:06:47,466 --> 00:06:50,746
the day to day workflow of getting a change into production.

101
00:06:50,938 --> 00:06:54,194
Now, which parts of this can benefit from

102
00:06:54,232 --> 00:06:57,762
automation? I have it bolded in this image over here. The code and id

103
00:06:57,816 --> 00:07:00,926
process, right? Checking out the latest branch,

104
00:07:01,038 --> 00:07:04,546
or checking out pulling the latest main,

105
00:07:04,648 --> 00:07:08,382
getting into a new branch, making sure id is indexed. All the dev environment

106
00:07:08,446 --> 00:07:11,062
stuff is set up. All of my dependencies are there.

107
00:07:11,196 --> 00:07:14,614
That's a bunch of developer toil and friction that can probably benefit from

108
00:07:14,652 --> 00:07:18,706
automation testing in an environment. Can an engineer automatically get an environment

109
00:07:18,738 --> 00:07:22,298
to test in that is just based on whatever branch that they are operating on?

110
00:07:22,464 --> 00:07:26,486
So those are bits directly automation can help for unit

111
00:07:26,518 --> 00:07:29,658
and integration testing. I know there's a lot of work happening in the

112
00:07:29,664 --> 00:07:33,054
AI realm today, still very early, but maybe computers can also help

113
00:07:33,092 --> 00:07:37,120
us write some tests and also help with the code review process.

114
00:07:37,970 --> 00:07:41,674
Usually we all have automated tests running in CI

115
00:07:41,722 --> 00:07:45,746
already. As soon as a certain branch is put up for review or

116
00:07:45,768 --> 00:07:48,942
a request to merge domain on the functionality,

117
00:07:49,006 --> 00:07:52,402
checking the functionality in your preview environment. That's another area where

118
00:07:52,536 --> 00:07:56,290
automation can help significantly and when tests are passing

119
00:07:56,370 --> 00:08:00,242
approval has been given by a teammate

120
00:08:00,386 --> 00:08:04,306
automatically, we should be able to merge things into main, run those tests

121
00:08:04,338 --> 00:08:05,830
in an automated fashion,

122
00:08:06,650 --> 00:08:10,250
automatically provision a pre production environment, run tests in there.

123
00:08:10,320 --> 00:08:13,770
If things are good, get in the staging, so on and so forth.

124
00:08:14,510 --> 00:08:17,526
So now we talked about dev platforms,

125
00:08:17,558 --> 00:08:20,982
we talked about developer workflows, how changes get into production.

126
00:08:21,046 --> 00:08:25,086
Now Gitops, what is Gitops? Githubs at

127
00:08:25,108 --> 00:08:28,286
its core, you might have noticed we

128
00:08:28,308 --> 00:08:31,658
were talking about creating a bunch of infrastructure in various stages

129
00:08:31,754 --> 00:08:34,210
as we were trying to get a change into prod.

130
00:08:35,030 --> 00:08:39,102
Gitops is just trying to drive a configuration

131
00:08:39,166 --> 00:08:43,134
backed approach to codify various of the DevOps

132
00:08:43,182 --> 00:08:47,010
best practices which can be applied to infrastructure automation

133
00:08:47,990 --> 00:08:51,906
using this. Many companies call these golden paths

134
00:08:52,098 --> 00:08:56,274
the ultimate rationale behind all of this is standardization will fundamentally

135
00:08:56,322 --> 00:09:00,058
improve the developer experience, and by

136
00:09:00,224 --> 00:09:03,754
removing humans from having to

137
00:09:03,792 --> 00:09:07,526
make a variety of these almost menial decisions,

138
00:09:07,558 --> 00:09:11,546
to go and tear down environments, create new environments, et cetera. Automation can

139
00:09:11,568 --> 00:09:15,054
help us reduce costs to kill environments when they are not actively being

140
00:09:15,092 --> 00:09:18,030
used, for example. How can this be achieved?

141
00:09:18,850 --> 00:09:22,410
Some sort of configuration that lives right alongside your source code,

142
00:09:22,580 --> 00:09:26,590
your app logic, business logic is living in source.

143
00:09:26,750 --> 00:09:31,006
Why can't all of the supporting logic around codifying

144
00:09:31,038 --> 00:09:34,546
stages of the SDLC also not live alongside it?

145
00:09:34,728 --> 00:09:38,674
And ultimately, why this matters is concept CI

146
00:09:38,722 --> 00:09:42,706
existed for continuous integration, right? How can we have repeated

147
00:09:42,898 --> 00:09:46,706
automation happening every time we merge? A new change test, get run, et cetera,

148
00:09:46,738 --> 00:09:50,534
et cetera. Because it fundamentally helps us improve

149
00:09:50,582 --> 00:09:53,866
our development and deployment times. So that's why

150
00:09:53,888 --> 00:09:57,434
Gitops is important. Now, we talked

151
00:09:57,472 --> 00:10:00,494
about environment multiple times in the last three,

152
00:10:00,532 --> 00:10:04,154
four odd slides. What is an environment at its core?

153
00:10:04,202 --> 00:10:08,826
An environment needs to have whatever runtime

154
00:10:08,938 --> 00:10:12,522
requirements or dependencies an application needs. It could be something

155
00:10:12,596 --> 00:10:16,850
as simple as having a go compiler available,

156
00:10:17,000 --> 00:10:19,540
or something that can execute a process,

157
00:10:20,470 --> 00:10:23,810
a binary as a process. It might need

158
00:10:23,960 --> 00:10:27,234
access to some sort of dev test, et cetera.

159
00:10:27,282 --> 00:10:30,966
Data might need access to some form of downstream services.

160
00:10:31,148 --> 00:10:34,950
Might need upstream services as well. If I'm trying to, for example,

161
00:10:35,020 --> 00:10:38,406
test an API gateway change to make sure that

162
00:10:38,428 --> 00:10:42,330
the website still functions correctly also needs to be accessible to a human

163
00:10:42,400 --> 00:10:45,946
so that they can either test the environment or actually access it to figure

164
00:10:45,968 --> 00:10:49,642
out what's going wrong. Depending on the use case,

165
00:10:49,776 --> 00:10:53,534
if it's a production environment, obviously it shouldn't be isolated from

166
00:10:53,572 --> 00:10:57,694
prod. But if it's a non production environment, some level of isolation from

167
00:10:57,732 --> 00:11:01,294
production is important. Depending again on

168
00:11:01,332 --> 00:11:04,562
how the environment is being used, it might need some form of source code,

169
00:11:04,616 --> 00:11:08,910
build tools, your IDe, and various other developer specific tooling,

170
00:11:08,990 --> 00:11:12,466
and depending on when you're using it. Again, if it's a

171
00:11:12,488 --> 00:11:16,510
prod environment or a staging environment, that's usually a shared tenancy construct.

172
00:11:16,670 --> 00:11:21,190
But if it's my local development workstation, that's a dedicated tenancy construct.

173
00:11:21,530 --> 00:11:25,158
So ultimately, we'd like to get to a world where whatever configuration that we are

174
00:11:25,164 --> 00:11:29,194
storing alongside our source code that can give us environments that are

175
00:11:29,232 --> 00:11:33,114
well tuned and essentially configured appropriately for

176
00:11:33,152 --> 00:11:38,330
whatever stage of the SDLC that we are currently in testing,

177
00:11:39,230 --> 00:11:44,218
testing, debugging, et cetera, all of these are angles

178
00:11:44,314 --> 00:11:47,754
at verifying that the software we are now proposing

179
00:11:47,882 --> 00:11:51,450
or making a change to is fundamentally

180
00:11:51,530 --> 00:11:55,634
not causing regressions anywhere, and it's meeting the appropriate definitions of

181
00:11:55,672 --> 00:11:59,806
done testing

182
00:11:59,998 --> 00:12:06,422
at its core exists for just

183
00:12:06,476 --> 00:12:09,160
one core reason is acceptance criteria. Right?

184
00:12:11,290 --> 00:12:14,694
The product document that I received as an engineer has some

185
00:12:14,732 --> 00:12:18,310
form of features and functionality that it aims to establish.

186
00:12:19,210 --> 00:12:22,422
Has my implementation achieved them all? And I'm primarily,

187
00:12:22,486 --> 00:12:25,974
again, because I mentioned I'm going to focus more on the microservices

188
00:12:26,022 --> 00:12:29,398
side of the house. Again, this is also applicable to monoliths,

189
00:12:29,414 --> 00:12:33,246
but I'm taking more of an emphasis on services and not libraries and

190
00:12:33,268 --> 00:12:36,446
modules over here. The reason for that is oftentimes a

191
00:12:36,468 --> 00:12:41,022
database doesn't live on the same machine as

192
00:12:41,076 --> 00:12:44,514
where our application is running. So a network call is happening

193
00:12:44,552 --> 00:12:48,414
to either talk to a database or to a downstream service, or how upstream

194
00:12:48,462 --> 00:12:52,558
services are talking to me. So functionality, we covered

195
00:12:52,574 --> 00:12:56,114
that. On the interoperability side, I'm calling various

196
00:12:56,162 --> 00:13:00,150
downstream services, usually as part of any feature.

197
00:13:00,650 --> 00:13:04,626
Am I calling those systems appropriately? Am I breaking any API

198
00:13:04,658 --> 00:13:08,520
patterns? Is the latencies that I experience,

199
00:13:09,710 --> 00:13:13,146
is it something that's acceptable to my end users or

200
00:13:13,168 --> 00:13:16,298
my target end users? And ultimately on the

201
00:13:16,304 --> 00:13:19,674
confidence side of the house, which is why again, let's go.

202
00:13:19,712 --> 00:13:23,166
Testing exists. Is this change that

203
00:13:23,188 --> 00:13:26,762
I'm introducing right now? Will it cause future production

204
00:13:26,826 --> 00:13:30,430
deployments to be more error prone? Will it cause more

205
00:13:30,500 --> 00:13:34,770
alerts to go to our on call? Has the feature really been implemented

206
00:13:36,630 --> 00:13:40,660
in the simplest and the most resilient way possible?

207
00:13:43,190 --> 00:13:46,866
So normally when we talk about we

208
00:13:46,888 --> 00:13:50,274
have source code right on the left hand side. I've kind of tried to represent

209
00:13:50,322 --> 00:13:53,826
this as a Monorepo structure. All of these primitives

210
00:13:53,858 --> 00:13:57,646
apply just as cleanly to if a company has multiple smaller

211
00:13:57,698 --> 00:13:59,450
repos like micro repos,

212
00:14:00,990 --> 00:14:04,140
every microservice comes out of its own repo. Doesn't matter.

213
00:14:05,710 --> 00:14:09,402
You can see various libraries, modules, et cetera, all of it live

214
00:14:09,456 --> 00:14:13,086
together. There's some software that runs in the middle which will

215
00:14:13,108 --> 00:14:16,746
ultimately cause some form of artifacts

216
00:14:16,778 --> 00:14:20,334
to get built. For example, a docker container, an OCI image of some

217
00:14:20,372 --> 00:14:23,614
sort that then gets sent to our

218
00:14:23,652 --> 00:14:27,146
production workload management system or software,

219
00:14:27,338 --> 00:14:30,846
which gets us to go and run this latest version

220
00:14:30,878 --> 00:14:34,286
of a certain artifact and it runs it, and then all of our systems

221
00:14:34,318 --> 00:14:38,550
go and talk to each other. So how

222
00:14:38,620 --> 00:14:44,018
does this software actually end up in production? Normally I'll

223
00:14:44,034 --> 00:14:47,946
just use a couple of Kubernetes examples, but this is applicable to

224
00:14:47,968 --> 00:14:50,330
any sort of runtime.

225
00:14:51,630 --> 00:14:55,158
Kubernetes has these deployment yamls or helm charts, et cetera.

226
00:14:55,254 --> 00:14:59,126
Ultimately I push a new branch somewhere, or if it's

227
00:14:59,158 --> 00:15:03,214
a new change in the main branch, a new Docker image might get

228
00:15:03,252 --> 00:15:07,194
built. This image gets pushed into a container

229
00:15:07,242 --> 00:15:10,474
registry somewhere a field is updated

230
00:15:10,522 --> 00:15:13,440
in my helm chart, which is normally in the source code.

231
00:15:13,890 --> 00:15:17,458
This field is probably going to say like this is the

232
00:15:17,464 --> 00:15:21,346
latest version of this image, and then the helm chart gets applied against my

233
00:15:21,368 --> 00:15:24,754
production Kubernetes cluster. At that

234
00:15:24,792 --> 00:15:28,454
point in time the Kubernetes cluster knows okay, I need to pull this image down

235
00:15:28,492 --> 00:15:32,278
from this appropriate container registry. I pull that down, get it

236
00:15:32,284 --> 00:15:33,720
deployed, stuff works.

237
00:15:35,370 --> 00:15:39,074
Now we covered the Prod deployment

238
00:15:39,122 --> 00:15:42,774
process. What is preprod? Preprod normally involves engineers,

239
00:15:42,822 --> 00:15:46,106
as they were saying, pushing their branches somewhere, having the CD system go

240
00:15:46,128 --> 00:15:49,814
and deploy that change into a shared tenancy pre production environment

241
00:15:49,862 --> 00:15:53,486
of some sort. These are great for

242
00:15:53,508 --> 00:15:56,826
the most part till I'll

243
00:15:56,858 --> 00:16:00,766
give an example. I am working on a front end change. Bob is

244
00:16:00,788 --> 00:16:03,966
working on an API gateway update. Sally is going and running

245
00:16:03,988 --> 00:16:07,346
a database migration. When I push my front end

246
00:16:07,368 --> 00:16:10,786
change into the pre prod environment and I suddenly see an issue related to

247
00:16:10,808 --> 00:16:14,190
a database migration pop up in the error logs.

248
00:16:14,350 --> 00:16:17,662
That didn't happen because of me. A GitHub

249
00:16:17,726 --> 00:16:20,614
based approach, as we can see on the right hand side over here, can let

250
00:16:20,652 --> 00:16:24,022
us get into a world where ephemeral preproduction environments are just

251
00:16:24,076 --> 00:16:27,590
coming up, where each of our changes gets tested in isolation.

252
00:16:28,650 --> 00:16:32,058
And finally, when all of the changes land up in

253
00:16:32,064 --> 00:16:35,434
the main branch, similar tests can also be run to make

254
00:16:35,472 --> 00:16:38,966
sure the current state of the main branch is pretty healthy.

255
00:16:38,998 --> 00:16:43,046
It's green, but during our non

256
00:16:43,078 --> 00:16:46,726
production in the dev processes, being forced to share a pre

257
00:16:46,768 --> 00:16:50,446
production environment with all of our colleagues again leads to a lot of

258
00:16:50,468 --> 00:16:51,710
developer friction.

259
00:16:53,910 --> 00:16:58,478
Now images normally

260
00:16:58,654 --> 00:17:01,954
in CI we don't regularly go and

261
00:17:01,992 --> 00:17:05,938
spin up our own version of a full tenancy cluster of

262
00:17:05,944 --> 00:17:09,400
some sort where proper end to end testing is happening.

263
00:17:10,090 --> 00:17:13,926
There can be some cases where images get built and this is

264
00:17:13,948 --> 00:17:17,382
just a little spec on how something like that might happen,

265
00:17:17,516 --> 00:17:20,966
but ultimately it just boils down to check out the latest

266
00:17:20,998 --> 00:17:25,206
source code, make sure all of your relevant credentials

267
00:17:25,238 --> 00:17:28,426
are set up for whatever container registry you're using,

268
00:17:28,528 --> 00:17:32,640
build the image, push it there, and then finally call

269
00:17:33,010 --> 00:17:37,166
whoever your workload management system is. In this case it's a Kubernetes example.

270
00:17:37,348 --> 00:17:40,894
Call it with the latest version of this image that's in this

271
00:17:40,932 --> 00:17:44,354
registry and kubernetes are instructed to please

272
00:17:44,392 --> 00:17:45,780
go and apply these changes.

273
00:17:47,830 --> 00:17:51,298
And in this world in the CI CD process that

274
00:17:51,304 --> 00:17:54,754
I just talked through normally in our

275
00:17:54,792 --> 00:17:58,866
tests we might have configuration to set up some four environment wherein

276
00:17:58,898 --> 00:18:02,434
tests are run and every engineer then has to verify

277
00:18:02,482 --> 00:18:05,894
that the test failures are not environment related. If there are test

278
00:18:05,932 --> 00:18:09,590
failures, of course, they need to make sure that it's only related to the changes

279
00:18:09,660 --> 00:18:12,982
that they have introduced, because environment

280
00:18:13,046 --> 00:18:16,742
related changes again, in this world, the DevOps team is the one that's normally

281
00:18:16,806 --> 00:18:21,146
responsible for making sure the environment is left in the pristine state and

282
00:18:21,168 --> 00:18:23,646
the Githubs world that we talk about, which is what you can see on the

283
00:18:23,668 --> 00:18:27,354
right hand side, the test suite gets instantiated,

284
00:18:27,482 --> 00:18:31,354
ephemeral environment comes up all backed by configuration

285
00:18:31,402 --> 00:18:35,106
that lives right alongside my source code. So if I didn't change any

286
00:18:35,128 --> 00:18:38,894
of my environment, config in source, the ephemeral environment

287
00:18:38,942 --> 00:18:42,210
that comes up, that's a golden path.

288
00:18:42,790 --> 00:18:46,002
In that environment, we know for sure that the only

289
00:18:46,056 --> 00:18:49,346
changes that are going in at that point in time are the changes that I've

290
00:18:49,378 --> 00:18:53,382
implemented for my feature. So when I run the test now,

291
00:18:53,516 --> 00:18:56,886
all failures should only be happening because of my changes

292
00:18:56,988 --> 00:19:00,378
and nothing related to the underlying infra. This is

293
00:19:00,384 --> 00:19:04,006
where DevOps can essentially further add superpowers

294
00:19:04,038 --> 00:19:07,702
their capabilities. DevOps teams can just by having configuration

295
00:19:07,766 --> 00:19:11,206
wherein whatever golden path they want to attain codified

296
00:19:11,318 --> 00:19:15,006
left in source code, every engineer just goes and spins up their own version of

297
00:19:15,028 --> 00:19:19,040
it in the code review process. Again, it's very similar.

298
00:19:19,490 --> 00:19:22,960
Oftentimes engineers, whoever the reviewer is,

299
00:19:23,410 --> 00:19:27,022
need to make sure that the changes that we are reviewing,

300
00:19:27,166 --> 00:19:31,330
nothing is failing because of underlying infra issues or

301
00:19:31,400 --> 00:19:35,220
nothing is succeeding because of potential underlying infra issues as well.

302
00:19:36,310 --> 00:19:40,134
So as a result, preview environments, et cetera, everything can be very

303
00:19:40,172 --> 00:19:43,846
ephemeral. Just come up. I make my changes. When changes get

304
00:19:43,868 --> 00:19:47,160
merged into main, all of the infrastructure that was spun up

305
00:19:47,550 --> 00:19:50,090
just gets deleted automatically.

306
00:19:51,310 --> 00:19:54,982
So Dev and CI stages, they will normally

307
00:19:55,046 --> 00:19:58,330
resort to using Docker for many of these functionalities.

308
00:19:58,670 --> 00:20:02,602
You can see over here, the r has

309
00:20:02,656 --> 00:20:06,234
gotten cut off due to my screenshot. I apologize for that. But ultimately

310
00:20:06,362 --> 00:20:09,786
you can see like these are all just Docker compose files.

311
00:20:09,978 --> 00:20:13,150
If a developer, for example, needs a MySQL database,

312
00:20:13,490 --> 00:20:17,214
we'll normally not go to AWS for example, and spin up an RTS database

313
00:20:17,262 --> 00:20:21,310
just for that. Just use Docker to do our basic feature

314
00:20:21,390 --> 00:20:24,718
functionality testing and this usually suffices

315
00:20:24,814 --> 00:20:27,894
for dev. But as we get closer to CI and

316
00:20:27,932 --> 00:20:31,686
the other stages of the SDLC, that's where having more

317
00:20:31,868 --> 00:20:34,934
production symmetric infrastructure might be more

318
00:20:34,972 --> 00:20:38,614
helpful in weeding out bugs and getting a better sense of latencies,

319
00:20:38,662 --> 00:20:42,250
et cetera, et cetera, as a user would experience when

320
00:20:42,320 --> 00:20:44,170
interacting with a prod environment.

321
00:20:46,190 --> 00:20:50,314
So now why does all

322
00:20:50,352 --> 00:20:52,720
of this automation, why is it important?

323
00:20:53,730 --> 00:20:57,374
How exactly does it improve our developer experience? So, on the left

324
00:20:57,412 --> 00:21:00,378
hand side over here, let's take a normal dev loop.

325
00:21:00,554 --> 00:21:03,230
I write code, I build, compile,

326
00:21:03,650 --> 00:21:07,234
I run it, inspect to see if everything works fine,

327
00:21:07,432 --> 00:21:11,246
make a commit, move on. Let's say as an engineer,

328
00:21:11,278 --> 00:21:14,740
I'm working 6 hours a day. That's about, what, 360 minutes?

329
00:21:15,270 --> 00:21:19,538
This entire loop takes about five minutes to run. So out of 360,

330
00:21:19,624 --> 00:21:23,110
I can do this about 72 times in a day. So 360

331
00:21:23,180 --> 00:21:26,774
over five on the right hand side, as soon as we go into

332
00:21:26,812 --> 00:21:29,480
this microservice containerized world,

333
00:21:30,010 --> 00:21:33,438
we get to this. Like, we do our code, we do our builds,

334
00:21:33,474 --> 00:21:37,494
and then there's the container bailed, et cetera. All of the container

335
00:21:37,542 --> 00:21:40,780
ergonomics come in, and that's pretty time consuming sometimes.

336
00:21:41,150 --> 00:21:44,654
And ultimately, you can see that five minute loop for getting the same

337
00:21:44,692 --> 00:21:48,014
task done is now taking nine minutes. And because we

338
00:21:48,052 --> 00:21:51,498
were working 360 minutes a day, which was our assumption,

339
00:21:51,594 --> 00:21:55,438
now, 360 over nine is about 40 iterations. So on

340
00:21:55,444 --> 00:21:58,514
the left hand side, I could do 72 iterations. On the right,

341
00:21:58,552 --> 00:22:02,990
I can only do 40, which is actually a 45% degradation,

342
00:22:03,070 --> 00:22:06,446
which can take a significant amount of time away from the inner loop

343
00:22:06,478 --> 00:22:07,780
of the development process.

344
00:22:09,590 --> 00:22:13,206
So this dev workflow that we had talked about in the past, like the one

345
00:22:13,228 --> 00:22:16,630
you see on the left, is the traditional dev workflow for all of us.

346
00:22:16,780 --> 00:22:20,022
Pull latest code, set up local n, wait for the id

347
00:22:20,076 --> 00:22:23,178
to index, write code, do all of that testing, et cetera, et cetera. It's a

348
00:22:23,184 --> 00:22:27,434
long loop on the right hand side. Taking this Githubs based model,

349
00:22:27,632 --> 00:22:31,690
it can actually, when we want to do dev, just get an environment,

350
00:22:32,270 --> 00:22:35,422
immediately hook our id into it. Everything has already

351
00:22:35,476 --> 00:22:38,286
been set up for us. I don't have to wait around for anything. I just

352
00:22:38,308 --> 00:22:42,362
do all of my testing. I know that this is a completely dedicated environment

353
00:22:42,426 --> 00:22:46,980
wherein Bob and Sally's changes, et cetera, none of it's going to influence me.

354
00:22:48,150 --> 00:22:51,906
All of the issues that I discover have to be fundamentally related to

355
00:22:51,928 --> 00:22:55,518
the code I just wrote. So now when I'm sending

356
00:22:55,534 --> 00:22:59,394
my code for a code review, I have much more confidence

357
00:22:59,442 --> 00:23:03,286
that things are going to work to spec and in

358
00:23:03,308 --> 00:23:06,758
the CI CD to pre production workflows. If there are some changes on the

359
00:23:06,764 --> 00:23:09,994
main branch that need to get tested, some of that stuff is getting pushed later

360
00:23:10,032 --> 00:23:13,638
in the pipeline. It's not going and impacting every single engineer

361
00:23:13,734 --> 00:23:15,900
every time they are trying to write code again.

362
00:23:17,710 --> 00:23:20,880
So the dev purposes, right.

363
00:23:21,890 --> 00:23:25,390
Normally, whenever we are developing a feature,

364
00:23:25,730 --> 00:23:29,406
service dependencies are normally pretty isolated. Sure, we have

365
00:23:29,428 --> 00:23:33,406
our id running somewhere. But wouldn't it be great, like on

366
00:23:33,428 --> 00:23:37,170
the right hand side, you can see the red circle calls the green

367
00:23:37,240 --> 00:23:40,340
circle, which calls the pink looking circle over there.

368
00:23:41,190 --> 00:23:45,154
If we could get a workflow replicated wherein that red

369
00:23:45,272 --> 00:23:48,466
was actually calling green, which is currently running inside my

370
00:23:48,488 --> 00:23:52,006
id with my debugger connected to it, that would let

371
00:23:52,028 --> 00:23:55,894
me have much greater confidence of the software I was building, because I know

372
00:23:55,932 --> 00:23:59,046
what the longer request chains are going to look like, and I know exactly how

373
00:23:59,068 --> 00:24:02,300
my changes are going to function with respect to them.

374
00:24:03,070 --> 00:24:06,266
So there are various ways of looking at it, right? The green one

375
00:24:06,288 --> 00:24:09,882
I was just showing you in the previous slide. It's an example when my

376
00:24:09,936 --> 00:24:13,486
service or my feature exists in the middle of a

377
00:24:13,508 --> 00:24:15,470
long microservice call chain.

378
00:24:16,210 --> 00:24:20,078
Similarly, if I'm testing something at the start of a call chain or at

379
00:24:20,084 --> 00:24:24,098
the end of a call chain, again, having access

380
00:24:24,184 --> 00:24:27,826
to a production like environment, wherein all of

381
00:24:27,848 --> 00:24:31,022
the network calls, et cetera, are seamlessly handled,

382
00:24:31,086 --> 00:24:34,466
for me, under nape, wherein the only thing that

383
00:24:34,488 --> 00:24:37,606
is under test is the change that I'm working on.

384
00:24:37,788 --> 00:24:41,602
That would help engineers get to having a lot more confidence

385
00:24:41,666 --> 00:24:44,726
a lot faster in the SDLC, right? While they are in the

386
00:24:44,748 --> 00:24:45,670
inner loop,

387
00:24:48,490 --> 00:24:52,106
instead of having to discover issues after it hits the outer loop, go back into

388
00:24:52,128 --> 00:24:55,818
the inner loop. Because that context switching, right? That's the most important

389
00:24:55,904 --> 00:24:58,570
and expensive part for us software engineers.

390
00:25:00,110 --> 00:25:04,542
So ultimately, to wrap up takeaways as

391
00:25:04,596 --> 00:25:08,526
engineers, we all know that issues will always be easier to fix when

392
00:25:08,548 --> 00:25:11,806
it's got way before production. The fastest would

393
00:25:11,828 --> 00:25:14,786
be when we were writing the code in the first place, the first time we

394
00:25:14,808 --> 00:25:18,354
are writing that line of code. One way in which this can

395
00:25:18,392 --> 00:25:22,210
be achieved is by using a very Gitops backed

396
00:25:22,950 --> 00:25:26,494
access to having production symmetric or production

397
00:25:26,542 --> 00:25:29,746
like environments for every stage of the SDLC as I'm

398
00:25:29,778 --> 00:25:33,510
writing my code. And why this is important is

399
00:25:33,660 --> 00:25:37,574
different stages of the SDLC when they are configured differently, it all adds to

400
00:25:37,612 --> 00:25:42,050
different bits of developer friction, ruins the dev organics.

401
00:25:42,210 --> 00:25:45,826
So at its core, taking a GitHub based approach would also remove

402
00:25:45,858 --> 00:25:49,590
the drift between these various stages of the SDLC. So,

403
00:25:49,660 --> 00:25:53,454
yeah, thank you. Thanks for listening to my talk. And I work at this

404
00:25:53,492 --> 00:25:56,974
company called Devzero, where we are trying to operationalize various things

405
00:25:57,012 --> 00:26:00,718
that we discussed in this talk today. If you're interested

406
00:26:00,804 --> 00:26:04,094
in checking out how any of these things can be applied to

407
00:26:04,132 --> 00:26:08,990
your day to day engineering workflows, check us out at www. Dot devzerode.

408
00:26:11,410 --> 00:26:11,820
Thank you.

