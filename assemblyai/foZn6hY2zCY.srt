1
00:00:34,770 --> 00:00:38,726
Hello. Welcome to my presentation where you will learn how you

2
00:00:38,748 --> 00:00:42,534
can be one step ahead of the competition using AWS step

3
00:00:42,572 --> 00:00:46,386
functions my name is Oscar Neumann and I'm a solutions architect

4
00:00:46,418 --> 00:00:49,998
at AWS, and I want to walk you through how you

5
00:00:50,044 --> 00:00:53,834
can use step functions to build modern applications

6
00:00:53,882 --> 00:00:57,726
in the cloud. But let's talk about serverless first. Why would you

7
00:00:57,748 --> 00:01:00,080
want to invest in a serverless application?

8
00:01:01,330 --> 00:01:04,954
Well, I think this quote from Werner Vogel sums it up pretty nicely.

9
00:01:05,082 --> 00:01:08,754
Your design time budget is finite, so any time you can spend on

10
00:01:08,792 --> 00:01:12,002
writing business logic is obviously a win for you.

11
00:01:12,136 --> 00:01:15,586
And serverless services help you a lot with that. But there's

12
00:01:15,618 --> 00:01:19,430
much more to serverless than just AWS lambda.

13
00:01:20,650 --> 00:01:24,120
We have serverless services at all layers of the application.

14
00:01:24,570 --> 00:01:28,490
So for example, we have Fargate as a compute service,

15
00:01:28,640 --> 00:01:32,282
we have s three as a data store, and many other

16
00:01:32,336 --> 00:01:35,942
services that surround lambda, for example for messaging,

17
00:01:36,006 --> 00:01:39,194
orchestration, storage and compute. And we see

18
00:01:39,232 --> 00:01:43,310
that when these services come together, you really start to gain all the advantages.

19
00:01:44,210 --> 00:01:48,250
But now let's look a bit at orchestration. Why would we need orchestration

20
00:01:48,330 --> 00:01:51,470
in a modern app? Well,

21
00:01:51,620 --> 00:01:55,522
obviously you know that lambdas are stateless functions that

22
00:01:55,576 --> 00:01:59,006
exist in the cloud, but there aren't many apps

23
00:01:59,038 --> 00:02:02,274
with only one function, one entry point, one module, or one

24
00:02:02,312 --> 00:02:06,294
component. So there's more than one function.

25
00:02:06,492 --> 00:02:10,086
In fact, there will be lots of functions usually,

26
00:02:10,268 --> 00:02:12,280
and they talk to each other.

27
00:02:15,290 --> 00:02:19,250
And in fact applications, serverless or not, they also have databases,

28
00:02:19,330 --> 00:02:22,630
right? So the functions also talk to a database.

29
00:02:22,790 --> 00:02:26,570
And in the cloud, I noticed that a lot of them

30
00:02:26,640 --> 00:02:30,086
also have queues of one kind or another. So they also

31
00:02:30,128 --> 00:02:33,614
talk to queues. And some of the lambda functions might

32
00:02:33,652 --> 00:02:37,374
also connect to servers. And this is now what an

33
00:02:37,412 --> 00:02:40,080
actual modern serverless app might look like.

34
00:02:42,930 --> 00:02:46,094
And you notice that these arrows also have different colors,

35
00:02:46,142 --> 00:02:50,654
because there are lots of different ways for functions and serverless components

36
00:02:50,782 --> 00:02:54,158
to talk with each other and control each other or orchestrate

37
00:02:54,254 --> 00:02:58,566
each other. So let's talk about what

38
00:02:58,588 --> 00:03:02,280
we can do with functions when we have more than one.

39
00:03:04,010 --> 00:03:07,502
So maybe I want to sequence two tasks,

40
00:03:07,586 --> 00:03:11,990
so a comes before b, or I want to retry

41
00:03:12,150 --> 00:03:16,534
failed tasks, or I want to maybe catch

42
00:03:16,582 --> 00:03:20,638
an event or catch an error message, or I want to

43
00:03:20,804 --> 00:03:24,446
execute functions or tasks concurrently. Or I

44
00:03:24,468 --> 00:03:27,614
want to do a choice based on the outcome of

45
00:03:27,652 --> 00:03:31,678
one functions, or I want to run different

46
00:03:31,764 --> 00:03:35,506
tasks in parallel. So how could we

47
00:03:35,528 --> 00:03:39,086
do that? Well, you could coordinate

48
00:03:39,118 --> 00:03:43,598
by a method call and just link the functions together. That's not terrible,

49
00:03:43,774 --> 00:03:47,266
but that doesn't give you like modular, independent functions

50
00:03:47,298 --> 00:03:50,786
that do one thing well, you could also chain

51
00:03:50,818 --> 00:03:53,110
the functions after each other.

52
00:03:53,260 --> 00:03:57,240
So yeah, one function invokes the other

53
00:03:57,690 --> 00:04:02,220
and you do it synchronously, but, well, that doesn't really scale that good

54
00:04:03,390 --> 00:04:06,602
because it might want to call another and so on.

55
00:04:06,736 --> 00:04:10,422
So you do it asynchronously, which is maybe a better design,

56
00:04:10,576 --> 00:04:14,462
but then you get really hard. Error handling and

57
00:04:14,516 --> 00:04:18,506
finding out about errors even requires extra assembly.

58
00:04:18,698 --> 00:04:22,342
What you could also do is coordinate by a database

59
00:04:22,506 --> 00:04:26,494
so you can track the state of your function and write it into a database

60
00:04:26,542 --> 00:04:30,850
like DynamoDB or other relational databases.

61
00:04:32,070 --> 00:04:36,034
And you could use SQL for transactions. People are using this

62
00:04:36,072 --> 00:04:39,880
and they get good results. But once again, there's still a lot of work.

63
00:04:40,490 --> 00:04:43,270
What also could work is the coordination by queues,

64
00:04:43,930 --> 00:04:48,140
which is another approach to pass your state and

65
00:04:48,990 --> 00:04:52,650
control it through queues or streams. Once again,

66
00:04:52,800 --> 00:04:56,666
this involves lot of bookkeeping. The function that

67
00:04:56,688 --> 00:05:00,198
reads the queue gets a failure and you need to catch and rewrite

68
00:05:00,214 --> 00:05:03,626
the state back into queue.

69
00:05:03,738 --> 00:05:06,874
And if you want a timeout or retry,

70
00:05:07,002 --> 00:05:10,574
then you're going to have to do that yourself. So what's the

71
00:05:10,612 --> 00:05:15,010
solution now? How do you orchestrate these serverless applications?

72
00:05:17,510 --> 00:05:21,106
Well, business workflows are rarely sequential from start to

73
00:05:21,128 --> 00:05:25,210
finish, so you have multiple decision paths and multiple

74
00:05:25,310 --> 00:05:29,174
steps for processing and need to handle failure. So you

75
00:05:29,212 --> 00:05:32,706
need to isolate tasks into logical components

76
00:05:32,818 --> 00:05:36,626
and centralize the orchestration into workflow. And that's

77
00:05:36,658 --> 00:05:39,960
where AWs dev function comes in to help you.

78
00:05:40,490 --> 00:05:42,890
So what's AWS dev functions?

79
00:05:43,710 --> 00:05:47,606
Well, first of all, it's a serverless workflow orchestration service that's

80
00:05:47,638 --> 00:05:51,158
offered by AWS. A workflow

81
00:05:51,174 --> 00:05:55,418
in step functions is built using a state machine. It is composed

82
00:05:55,514 --> 00:05:59,294
of steps which we call states, and it moves from

83
00:05:59,332 --> 00:06:02,894
one state to another via state transition. It's written

84
00:06:02,942 --> 00:06:06,370
using our Amazon states language or ASL,

85
00:06:06,870 --> 00:06:11,570
which you can think of like assembly for the workflow,

86
00:06:11,910 --> 00:06:16,100
and you can use it to orchestrate multiple AWS services.

87
00:06:16,470 --> 00:06:20,342
But how do you now build these workflows? Well, there are multiple ways

88
00:06:20,396 --> 00:06:23,846
to do it. You could do it using the drag and drop a

89
00:06:23,868 --> 00:06:28,166
workflow studio editor. You could just write your own JSON

90
00:06:28,278 --> 00:06:32,886
or do it using CDK or DSDK in Python.

91
00:06:33,078 --> 00:06:36,534
Then you can visualize your workflow and finally execute

92
00:06:36,582 --> 00:06:40,314
and monitor it. Now let's look at an example.

93
00:06:40,432 --> 00:06:44,414
So I have this example image processing workflow where

94
00:06:44,452 --> 00:06:47,690
I want to first make a thumbnail, then identify

95
00:06:47,770 --> 00:06:50,650
features in the image and store the image metadata.

96
00:06:50,730 --> 00:06:53,870
For example, I have this picture of mountains,

97
00:06:54,030 --> 00:06:57,666
which also contains people and snow and I want to

98
00:06:57,688 --> 00:07:01,540
identify that. So how would a state machine look like for that?

99
00:07:02,070 --> 00:07:05,314
So we could use different state types for

100
00:07:05,352 --> 00:07:08,914
that. First we have the start which is the entry

101
00:07:08,962 --> 00:07:12,374
point for this workflow. Then we have maybe

102
00:07:12,412 --> 00:07:15,910
a lambda function that extracts the image metadata.

103
00:07:16,330 --> 00:07:20,054
Then we could do a type check based on the image extraction

104
00:07:20,102 --> 00:07:24,294
metadata. If the image is not supported, we fail

105
00:07:24,422 --> 00:07:28,246
this workflow. If it's supported, we store the metadata

106
00:07:28,358 --> 00:07:32,174
and then go into a parallel execution we call

107
00:07:32,292 --> 00:07:36,206
recognition to recognize what is in the image and to

108
00:07:36,228 --> 00:07:39,390
generate a thumbnail. Then we add the text

109
00:07:39,460 --> 00:07:44,050
once recognition is complex and end this workflow,

110
00:07:45,590 --> 00:07:49,970
let's look at the state language. How do you write these states in JSon?

111
00:07:50,870 --> 00:07:54,514
Here's an example how to do that. And there's also really

112
00:07:54,552 --> 00:07:57,986
good documentation and this online builder where you can drag

113
00:07:58,018 --> 00:08:01,590
and drop and edit these. So you don't really need to know

114
00:08:01,660 --> 00:08:05,686
all the document, all the annotations for

115
00:08:05,708 --> 00:08:09,090
that. So let's look at some state types.

116
00:08:09,250 --> 00:08:12,698
Youll have seen most of these in the talk already, but there are also a

117
00:08:12,704 --> 00:08:16,714
few additional ones. For example like the map state with which

118
00:08:16,752 --> 00:08:20,338
you can process an array using the state machine.

119
00:08:20,534 --> 00:08:24,126
Also there are other helping states like paths where

120
00:08:24,148 --> 00:08:27,914
you can transform inputs into another output

121
00:08:28,042 --> 00:08:31,262
and feed it into the next state. But what

122
00:08:31,316 --> 00:08:34,110
services do integrate into step functions?

123
00:08:35,110 --> 00:08:38,446
Well, there are a bunch of services that integrates into step functions

124
00:08:38,478 --> 00:08:41,314
and there are multiple types of integrations available.

125
00:08:41,512 --> 00:08:44,926
So let's look at the triggers. First, you can trigger

126
00:08:44,958 --> 00:08:48,774
the step function workflow, for example using a lambda function. You can

127
00:08:48,812 --> 00:08:52,182
also directly trigger it with API gateway or using

128
00:08:52,236 --> 00:08:56,354
an event and eventbridge or using another step functions workflow.

129
00:08:56,482 --> 00:09:00,570
Also you can trigger it from a code pipeline or using IoT rules

130
00:09:01,390 --> 00:09:04,970
from looking at the step function inside. There are also different

131
00:09:05,040 --> 00:09:09,050
integration types. There are some optimized integrations

132
00:09:09,390 --> 00:09:12,890
which provide additional functionality and UI elements

133
00:09:12,970 --> 00:09:16,586
in workflow studio. So you can directly integrate

134
00:09:16,618 --> 00:09:20,254
some AWS services, but there are

135
00:09:20,292 --> 00:09:24,690
no performance benefits over SDK integrations, it's just optimized.

136
00:09:25,270 --> 00:09:29,170
Then there are SDK integrations which allow you to call

137
00:09:29,240 --> 00:09:32,754
over 200 AWS services directly from

138
00:09:32,792 --> 00:09:35,682
within the step function. And yeah,

139
00:09:35,736 --> 00:09:39,046
basically you still need to write less code because you don't need

140
00:09:39,068 --> 00:09:43,362
to write a lambda function to call this API. You can do it directly

141
00:09:43,426 --> 00:09:46,662
in your serverless workflow. Then there are different

142
00:09:46,716 --> 00:09:50,342
integration patterns. So for example request

143
00:09:50,406 --> 00:09:53,626
response where step functions will wait for

144
00:09:53,648 --> 00:09:57,180
the HTTP response and then progress to the next state.

145
00:09:58,110 --> 00:10:01,594
And also you can run a job synchronously so

146
00:10:01,632 --> 00:10:04,718
you can call service and have step functions wait for the

147
00:10:04,724 --> 00:10:08,346
job to complete. The same is true for waiting

148
00:10:08,378 --> 00:10:11,754
for callback. So you can basically asynchronously

149
00:10:11,882 --> 00:10:15,806
call a step and then wait for the task

150
00:10:15,838 --> 00:10:19,298
token. And once the token is returned with the

151
00:10:19,304 --> 00:10:22,894
payload, it continues. So now let's

152
00:10:22,942 --> 00:10:26,582
take a look how you can handle and modify data

153
00:10:26,716 --> 00:10:29,190
within a workflow. In step functions.

154
00:10:29,770 --> 00:10:33,218
So you have input and output processing.

155
00:10:33,314 --> 00:10:36,502
So as a step function receive AWS

156
00:10:36,556 --> 00:10:40,426
input. It's usually in the JSON format and it

157
00:10:40,448 --> 00:10:44,330
passes this input to the first state in the workflow.

158
00:10:44,990 --> 00:10:49,254
Then the individual states receive the JSON as input

159
00:10:49,382 --> 00:10:53,258
from the previous state and pass JSON as output

160
00:10:53,354 --> 00:10:58,480
to the next state here.

161
00:10:59,090 --> 00:11:02,566
Then the output of the workflow's last state becomes

162
00:11:02,618 --> 00:11:04,820
the final execution result.

163
00:11:07,510 --> 00:11:12,318
ASL now has different tools to manipulate

164
00:11:12,414 --> 00:11:15,986
these inputs between the states. So let's look

165
00:11:16,008 --> 00:11:20,054
at the anatomy of a state and what you can do to modify this

166
00:11:20,092 --> 00:11:23,666
input. So of course, first you have the state input,

167
00:11:23,778 --> 00:11:27,090
and this state input is passed to the task.

168
00:11:27,250 --> 00:11:31,610
Now you can start to modify this input in the task already before

169
00:11:31,680 --> 00:11:35,254
executing the task. So first there's the input

170
00:11:35,302 --> 00:11:39,542
path and all these paths. They use the JSON path

171
00:11:39,606 --> 00:11:43,246
syntax to modify and select a

172
00:11:43,268 --> 00:11:46,958
portion from the JSON input or from the result.

173
00:11:47,124 --> 00:11:51,370
And the path is a string that begins with dollar sign and identifies

174
00:11:51,450 --> 00:11:54,114
nodes within the JSON text.

175
00:11:54,312 --> 00:11:57,602
So with the input path you can select

176
00:11:57,736 --> 00:12:01,346
a portion of the state's input. Then you

177
00:12:01,368 --> 00:12:05,210
have the parameters field, which allows you to create a collection

178
00:12:05,310 --> 00:12:08,550
of key value pairs that are passed

179
00:12:09,130 --> 00:12:12,966
as an input. Then you

180
00:12:12,988 --> 00:12:16,422
can call the AWS service integration, such AWS,

181
00:12:16,476 --> 00:12:20,570
a lambda function invocation, or an activity worker.

182
00:12:21,310 --> 00:12:25,290
And you can filter these using

183
00:12:25,360 --> 00:12:29,180
the JSON path expression AWS the input again.

184
00:12:31,170 --> 00:12:33,946
Then you get the result selector.

185
00:12:34,138 --> 00:12:38,026
So you can now use the result from the integration

186
00:12:38,218 --> 00:12:42,000
and filter from that again,

187
00:12:42,390 --> 00:12:46,274
and then you can put that result back into your

188
00:12:46,312 --> 00:12:50,718
state input using the result path. You can either overwrite

189
00:12:50,894 --> 00:12:54,820
the input at all or just append to it

190
00:12:55,530 --> 00:12:59,154
in a certain node. Then you have the output

191
00:12:59,202 --> 00:13:02,422
path after the final result and that

192
00:13:02,556 --> 00:13:05,506
becomes the state output.

193
00:13:05,538 --> 00:13:06,120
Finally.

194
00:13:09,930 --> 00:13:14,086
So let's look at the different states,

195
00:13:14,188 --> 00:13:17,750
which I just mentioned in detail again.

196
00:13:17,900 --> 00:13:21,206
So first we have the input path. As I mentioned,

197
00:13:21,308 --> 00:13:25,334
it allows you to filter and select the portion of this JSON

198
00:13:25,382 --> 00:13:28,794
state input to use. And yeah,

199
00:13:28,832 --> 00:13:32,394
here's an example where we select, for example,

200
00:13:32,592 --> 00:13:36,846
the numbers field three, four using dollar sign

201
00:13:37,028 --> 00:13:40,554
numbers. Then we have the items

202
00:13:40,602 --> 00:13:44,222
path. That's a field in the map state which

203
00:13:44,276 --> 00:13:46,990
allows you to select an array in the input.

204
00:13:47,350 --> 00:13:50,660
So here we select words as an example.

205
00:13:51,750 --> 00:13:55,422
Then we have parameters, the parameters

206
00:13:55,566 --> 00:13:59,386
field creates again the collection of key value pairs

207
00:13:59,438 --> 00:14:02,258
that's passed as an input to the service integration.

208
00:14:02,434 --> 00:14:06,626
So for example, we can add static values

209
00:14:06,658 --> 00:14:10,054
here like just a string, or we select the

210
00:14:10,092 --> 00:14:14,154
first or the second number from an

211
00:14:14,192 --> 00:14:17,498
array as an example. Then we have the result

212
00:14:17,584 --> 00:14:21,450
selector. The result selector allows you to filter

213
00:14:21,790 --> 00:14:25,294
and construct a new JSON object

214
00:14:25,492 --> 00:14:29,194
using the task result. So for example, we have the task

215
00:14:29,242 --> 00:14:34,094
output which is sum seven, and we select the

216
00:14:34,132 --> 00:14:37,714
sum field and add a static value. And then we have

217
00:14:37,752 --> 00:14:41,438
the result. Then we have the result path.

218
00:14:41,614 --> 00:14:45,794
As I mentioned, you can now add this result to

219
00:14:45,912 --> 00:14:49,894
your JSON node from the input from

220
00:14:49,932 --> 00:14:53,240
the original input, or you can also override it.

221
00:14:53,690 --> 00:14:57,234
Then we have the output path where you can filter

222
00:14:57,282 --> 00:15:01,800
the final result before it becomes a state output again.

223
00:15:03,790 --> 00:15:07,500
Yes. So let's look at the context object.

224
00:15:08,910 --> 00:15:12,300
You can also get some context information

225
00:15:12,750 --> 00:15:16,990
from the step function's execution outside of the state input

226
00:15:17,650 --> 00:15:21,342
using dollar dollar execution. And then you can

227
00:15:21,396 --> 00:15:25,006
for example get the id from the execution or

228
00:15:25,028 --> 00:15:28,638
the start time, which is useful in many cases.

229
00:15:28,734 --> 00:15:32,274
Just that youre heard of it already. Then there are also

230
00:15:32,312 --> 00:15:36,450
some intrinsic functions which you can use to modify

231
00:15:36,790 --> 00:15:40,758
the inputs in the state already. So for example,

232
00:15:40,844 --> 00:15:44,600
you can format a string, you convert it from

233
00:15:45,610 --> 00:15:49,334
escaped string to jSon, or from json to

234
00:15:49,372 --> 00:15:53,334
string and do multiple things. There are also some more intrinsic

235
00:15:53,382 --> 00:15:55,340
functions which are not listed here.

236
00:15:56,190 --> 00:15:59,846
So now let's go to the different workflow types

237
00:15:59,958 --> 00:16:03,018
of a step function. One is the standard

238
00:16:03,104 --> 00:16:06,720
workflow type and one is the express workflow type.

239
00:16:07,410 --> 00:16:10,160
So what is the difference between those two?

240
00:16:10,930 --> 00:16:14,170
It always depends on the use case which you are trying to implement,

241
00:16:14,250 --> 00:16:17,746
obviously. So standard workflows are

242
00:16:17,768 --> 00:16:22,350
good, for example for it automation report generation, order processing,

243
00:16:22,510 --> 00:16:25,746
or payment and billing processing, just to name a few.

244
00:16:25,848 --> 00:16:29,262
And express workflows are more like for

245
00:16:29,336 --> 00:16:33,190
event driven microservice orchestrations or APIs

246
00:16:33,530 --> 00:16:37,110
that need fast response. There are also

247
00:16:37,180 --> 00:16:40,966
different limitations that come with these different

248
00:16:41,068 --> 00:16:45,002
workflow types. So for example, the standard workflow can

249
00:16:45,056 --> 00:16:49,162
run much longer, while the exprs function can

250
00:16:49,216 --> 00:16:52,506
process much more events and functions at

251
00:16:52,528 --> 00:16:56,166
the same time. So yeah, it always depends

252
00:16:56,198 --> 00:17:00,014
on the use case what youre trying to achieve. But now let's look at

253
00:17:00,052 --> 00:17:03,230
some best practices and workflow patterns which you can

254
00:17:03,300 --> 00:17:06,950
use to integrate serverless workflows and step functions.

255
00:17:07,130 --> 00:17:11,374
So one easy one is of course error handling.

256
00:17:11,502 --> 00:17:15,102
So you can catch errors which can be thrown

257
00:17:15,166 --> 00:17:18,242
for example by a lambda function or by

258
00:17:18,296 --> 00:17:21,922
another integration. So you can then transition

259
00:17:21,986 --> 00:17:25,490
to a different stage if you catch an error

260
00:17:25,650 --> 00:17:27,880
which is unexpected for example.

261
00:17:29,210 --> 00:17:32,598
Then you can also retry

262
00:17:32,694 --> 00:17:35,670
with errors. So if one task fails,

263
00:17:35,750 --> 00:17:39,466
youll can just try it again to reduce the complex of

264
00:17:39,488 --> 00:17:43,254
your workflows. Youll can also have child workflows.

265
00:17:43,382 --> 00:17:46,830
So from one task you can call another step

266
00:17:46,900 --> 00:17:50,526
function and wait for it to finish and then continue in your

267
00:17:50,548 --> 00:17:53,760
main step function. That makes it easy to build

268
00:17:54,690 --> 00:17:57,150
more complex step functions.

269
00:17:58,070 --> 00:18:01,870
Let's look at some more use cases where you could use step functions

270
00:18:02,030 --> 00:18:05,266
well. You could use it for data processing, it security and

271
00:18:05,288 --> 00:18:09,358
automation, machine learning, or microservice orchestration.

272
00:18:09,534 --> 00:18:13,346
You as a developer might also be questioning what tools

273
00:18:13,378 --> 00:18:16,486
you can use to work with step functions. So let's look

274
00:18:16,508 --> 00:18:20,870
at developer tooling. So as I mentioned, there's workflow studio

275
00:18:21,210 --> 00:18:24,646
which is like a low code visual workflow designer

276
00:18:24,678 --> 00:18:28,326
for drag and drop, and it helps you to generate

277
00:18:28,438 --> 00:18:33,094
these RSL. It has three different sections,

278
00:18:33,222 --> 00:18:36,938
one where you can browse through the states, then you have the canvas

279
00:18:37,034 --> 00:18:40,714
and on the right hand in the inspector panel you can configure

280
00:18:40,762 --> 00:18:43,950
the different state. However,

281
00:18:44,020 --> 00:18:47,794
as a developer you might be using visual studio code, so there's also

282
00:18:47,832 --> 00:18:51,022
a plugin for it where you can build the state machines

283
00:18:51,086 --> 00:18:55,074
locally, visualize them, and also execute them

284
00:18:55,112 --> 00:18:58,834
on your local machine. Of course, you can

285
00:18:58,872 --> 00:19:02,294
also use your favorite infrastructure as code to build

286
00:19:02,332 --> 00:19:05,542
these workflows, like the serverless application model or

287
00:19:05,596 --> 00:19:09,414
CDK. As I mentioned, it's possible to

288
00:19:09,452 --> 00:19:13,754
also run these workflow locally using step functions local,

289
00:19:13,872 --> 00:19:18,214
which you can just download and install and run it on your local development

290
00:19:18,262 --> 00:19:22,250
environment and mock the SDK service integrations

291
00:19:22,910 --> 00:19:26,222
let's talk about a few best practices when

292
00:19:26,276 --> 00:19:30,286
using step functions. As I mentioned, working records from

293
00:19:30,308 --> 00:19:33,040
a use case, choose the right workflow type,

294
00:19:33,490 --> 00:19:37,070
then use timeouts to avoid stuck functions.

295
00:19:37,830 --> 00:19:40,530
Finally, when you have larger payloads,

296
00:19:41,030 --> 00:19:44,930
store the file in s three and then just pass the file handle.

297
00:19:45,750 --> 00:19:49,966
Also avoid reaching history quota and handle lambda service exceptions.

298
00:19:50,078 --> 00:19:53,090
For example, when your lambda function gets throttled,

299
00:19:53,510 --> 00:19:57,566
try to handle that exception also in your workflow.

300
00:19:57,758 --> 00:20:00,846
In closing, I have some more useful resources

301
00:20:00,878 --> 00:20:05,210
for you where you can play around with step functions.

302
00:20:06,030 --> 00:20:09,386
And please reach out to me. Feel free to connect with me on

303
00:20:09,408 --> 00:20:12,746
LinkedIn and I'm happy also to answer any of your

304
00:20:12,768 --> 00:20:16,474
questions. So thank you very much for listening and looking forward

305
00:20:16,512 --> 00:20:16,922
to seeing.

