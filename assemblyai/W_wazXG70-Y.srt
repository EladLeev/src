1
00:00:27,810 --> 00:00:30,726
Hi everybody, we are really excited to be here.

2
00:00:30,828 --> 00:00:34,502
Thank you very much for attending. The title of our talk is

3
00:00:34,556 --> 00:00:38,194
security the cloud empowering developers to practice

4
00:00:38,242 --> 00:00:41,174
security chaos engineering. Nice to meet you.

5
00:00:41,212 --> 00:00:44,390
We are Yury Nio and Jonathan Hill. We work as

6
00:00:44,460 --> 00:00:48,338
cyber liability engineers for AdL Digital Labs,

7
00:00:48,434 --> 00:00:52,382
a company in Colombia at provides technology and innovation services.

8
00:00:52,516 --> 00:00:56,346
We are chaos engineering advocates. We are promoting the adoption

9
00:00:56,378 --> 00:01:00,282
of this discipline in our country. Cloud platforms are facing

10
00:01:00,346 --> 00:01:04,410
security issues that are frequently a matter for security engineers,

11
00:01:04,490 --> 00:01:08,346
not for developers. As a result, security is rather has

12
00:01:08,388 --> 00:01:12,622
separate from development. Today we are talking about security Chaos

13
00:01:12,686 --> 00:01:16,238
Engineering, a novel discipline that offers a methodology

14
00:01:16,334 --> 00:01:19,606
to bring two developers to leverage the power of security

15
00:01:19,708 --> 00:01:22,534
in their roles. They are the topics for today.

16
00:01:22,652 --> 00:01:26,342
Jonathan will provide a foundation about cloud and security.

17
00:01:26,476 --> 00:01:30,214
He is going to show some keys from the well architected

18
00:01:30,262 --> 00:01:33,802
framework. I am going to explore the integration between

19
00:01:33,936 --> 00:01:37,210
software development, reliability and security.

20
00:01:37,360 --> 00:01:40,770
At this point I am going to analyze why developers don't

21
00:01:40,790 --> 00:01:44,650
include security topics in their activities. With this context,

22
00:01:44,730 --> 00:01:49,002
I am going to present a novel practice name security chaos engineering.

23
00:01:49,066 --> 00:01:53,050
Finally, Jonathan is going to show us how democratizing

24
00:01:53,130 --> 00:01:56,590
security between software developers. He is going to show

25
00:01:56,660 --> 00:02:00,626
us the benefits from the distributed, immovable and

26
00:02:00,648 --> 00:02:03,854
ephemeral framework based on security chaos engineering.

27
00:02:03,902 --> 00:02:07,302
So go ahead Jonathan. Thank you Yuri for this

28
00:02:07,356 --> 00:02:11,350
big resume. Hi everyone, my name is Jonathan.

29
00:02:11,690 --> 00:02:15,222
I talk about the cloud and security and

30
00:02:15,356 --> 00:02:19,194
something is scenarios. We start talking about

31
00:02:19,232 --> 00:02:22,806
the frame architecture. This script

32
00:02:22,918 --> 00:02:26,282
from AWS could be, you know this

33
00:02:26,336 --> 00:02:29,466
slide that talks about the

34
00:02:29,568 --> 00:02:33,070
architecture, about the excellence of premiums, about the security

35
00:02:33,220 --> 00:02:34,670
or reliability,

36
00:02:35,650 --> 00:02:39,470
performance and cost optimization in these

37
00:02:39,620 --> 00:02:43,106
big steps that define every cloud.

38
00:02:43,208 --> 00:02:46,322
You need to know about how to work

39
00:02:46,376 --> 00:02:50,494
the security in everything that you need to adopt,

40
00:02:50,622 --> 00:02:54,238
right? Then we talk about bigger

41
00:02:54,334 --> 00:02:58,194
cloud providers especially that is

42
00:02:58,392 --> 00:03:00,878
starting with AWS.

43
00:03:01,054 --> 00:03:04,518
AWS talking about the implementation Strong

44
00:03:04,604 --> 00:03:08,790
Identity foundation that talks about the implement

45
00:03:08,870 --> 00:03:12,854
principle of least privilege and enforce separation

46
00:03:12,902 --> 00:03:16,854
of duties with appropriate authorization for each interaction.

47
00:03:16,982 --> 00:03:20,742
With AWS resources centralized identify

48
00:03:20,886 --> 00:03:24,710
management and IAM use to eliminate reliance

49
00:03:24,790 --> 00:03:28,462
and long term static credentials, right? The next

50
00:03:28,596 --> 00:03:31,966
enable traceability monitoring everything

51
00:03:32,068 --> 00:03:35,890
that you need that you do in your cloud.

52
00:03:36,040 --> 00:03:40,146
It's a very needed to

53
00:03:40,328 --> 00:03:44,306
define in your infrastructure, right? And the next

54
00:03:44,488 --> 00:03:48,450
apply the security in all layers. In AWS

55
00:03:48,530 --> 00:03:51,346
you have a VPC subnets,

56
00:03:51,538 --> 00:03:56,002
easy to instance Astri bucket.

57
00:03:56,146 --> 00:03:59,974
You could define in all these steps

58
00:04:00,022 --> 00:04:03,770
security in your IAMS group,

59
00:04:03,840 --> 00:04:07,994
security in your security group that allows who

60
00:04:08,192 --> 00:04:10,990
grant access for these resources.

61
00:04:13,250 --> 00:04:17,482
Next one, talk about the automate security alert.

62
00:04:17,626 --> 00:04:21,422
Yeah, best practices for security could be

63
00:04:21,556 --> 00:04:25,490
is when you try to automaticate ADL

64
00:04:25,560 --> 00:04:30,018
things that are out of security then if you make

65
00:04:30,104 --> 00:04:33,474
this something you could

66
00:04:33,512 --> 00:04:36,360
be better in your security, right?

67
00:04:37,210 --> 00:04:41,586
Protect data and transit and rest. It's very careful

68
00:04:41,778 --> 00:04:46,486
if you manage data

69
00:04:46,668 --> 00:04:50,186
very sensitive correct.

70
00:04:50,368 --> 00:04:54,330
And the next one prepare for security events then training

71
00:04:54,400 --> 00:04:58,346
your team, trying your people

72
00:04:58,448 --> 00:05:02,094
that know who is security and how to security

73
00:05:02,292 --> 00:05:06,014
and what is my business and how to the security could

74
00:05:06,052 --> 00:05:10,462
be based my business, right. Because with

75
00:05:10,516 --> 00:05:15,406
security you have a very big problem

76
00:05:15,588 --> 00:05:19,010
if your reputation it's involved in some of

77
00:05:19,080 --> 00:05:22,894
security cases and then practice

78
00:05:22,942 --> 00:05:26,786
that. And the next one talk about the Azure

79
00:05:26,978 --> 00:05:30,470
security then talk about

80
00:05:30,620 --> 00:05:34,854
the defense indeed protect your information from

81
00:05:34,892 --> 00:05:38,950
beginning from installing the U walls who access for

82
00:05:39,020 --> 00:05:42,854
this data. It's very important define who

83
00:05:42,972 --> 00:05:47,270
access from these objects in Azure

84
00:05:47,770 --> 00:05:52,174
cloud and the next entity management benefits

85
00:05:52,292 --> 00:05:55,902
of single sign on then manage

86
00:05:56,036 --> 00:06:01,434
all your access with controls,

87
00:06:01,482 --> 00:06:05,534
with AD, with your active

88
00:06:05,582 --> 00:06:09,726
directory, with your company directory.

89
00:06:09,838 --> 00:06:13,074
That's very good practices to access for

90
00:06:13,112 --> 00:06:16,930
this cloud. The next talking

91
00:06:17,000 --> 00:06:20,802
about the infrastructure protection defined equals that

92
00:06:20,856 --> 00:06:24,694
AWS defined in deep how to protect

93
00:06:24,892 --> 00:06:28,502
all things that exist in this ecosystem.

94
00:06:28,646 --> 00:06:32,438
That's a very nice practices encryption encrypt

95
00:06:32,534 --> 00:06:36,998
your data in res in transit

96
00:06:37,094 --> 00:06:40,606
that it's very nice to have to do in

97
00:06:40,628 --> 00:06:45,230
your infrastructure network security can

98
00:06:45,300 --> 00:06:48,718
grant whole access for your data,

99
00:06:48,804 --> 00:06:52,786
whole access from your application and how

100
00:06:52,808 --> 00:06:56,306
to apply some control of security that

101
00:06:56,408 --> 00:07:00,590
it's very nice to include in every part of jute software

102
00:07:00,750 --> 00:07:04,610
application security defined from requirement gathering

103
00:07:05,050 --> 00:07:08,802
training your people to generate these requirements

104
00:07:08,946 --> 00:07:12,706
for the application that you generate. It's very safe

105
00:07:12,738 --> 00:07:16,102
from this beginning. Yeah and last

106
00:07:16,156 --> 00:07:19,980
one talking about the GCP security talking about

107
00:07:20,830 --> 00:07:24,550
from these stages that define implement

108
00:07:24,630 --> 00:07:28,374
the least privilege with identity and authorization controls

109
00:07:28,422 --> 00:07:31,898
that it's same but in other words

110
00:07:31,984 --> 00:07:35,954
that defined in others cloud infrastructure

111
00:07:36,102 --> 00:07:39,802
providers building a ledger security approach implement

112
00:07:39,866 --> 00:07:44,042
security at each level in your application infrastructure applying

113
00:07:44,106 --> 00:07:48,446
and defense in deep approach use the fiatrogenist

114
00:07:48,478 --> 00:07:52,206
product to limit access and use the encryption,

115
00:07:52,318 --> 00:07:56,298
right. Automate deployment of sensitive tasks

116
00:07:56,494 --> 00:08:01,622
if you have tasks from your data from

117
00:08:01,756 --> 00:08:05,798
generate reports cloud be needed to

118
00:08:05,964 --> 00:08:10,218
generate some automatic tasks that the people

119
00:08:10,304 --> 00:08:13,946
don't execute these scripts could be because

120
00:08:14,128 --> 00:08:17,498
if the people access to these scripts access

121
00:08:17,584 --> 00:08:21,054
to the data it is very difficult control if

122
00:08:21,092 --> 00:08:24,766
you don't have a very granularity of

123
00:08:24,788 --> 00:08:28,158
these controls then if you have a very

124
00:08:28,324 --> 00:08:31,646
automated deployment you have a

125
00:08:31,668 --> 00:08:35,620
very automated this task. It's very

126
00:08:35,990 --> 00:08:39,202
nice to have because your security is

127
00:08:39,256 --> 00:08:42,590
better. Automate deployment of safety tasks

128
00:08:42,750 --> 00:08:46,310
they are talking about implement securing monitoring

129
00:08:49,850 --> 00:08:53,138
in all cloud providers define

130
00:08:53,234 --> 00:08:56,950
how did you deploy some things about the

131
00:08:57,100 --> 00:09:00,586
infrastructure about your application then if you

132
00:09:00,608 --> 00:09:04,666
define could be pipelines for generate these

133
00:09:04,768 --> 00:09:08,486
resources for my application for my substructure

134
00:09:08,598 --> 00:09:13,094
for my business objectives could be to define

135
00:09:13,142 --> 00:09:17,102
some task task protect

136
00:09:17,236 --> 00:09:21,502
these steps in all things from

137
00:09:21,556 --> 00:09:24,722
security. That's right. And with that you

138
00:09:24,776 --> 00:09:28,562
generate best practice for all your model that

139
00:09:28,616 --> 00:09:32,162
you define in your infrastructure and your business.

140
00:09:32,296 --> 00:09:36,382
Thank you Jonathan. Cloud computing models presented by Jonathan

141
00:09:36,446 --> 00:09:40,642
are dynamic and complex which make difficult detecting threats

142
00:09:40,706 --> 00:09:44,486
and consequently to pronounsticate cyber attacks. As a result,

143
00:09:44,588 --> 00:09:47,694
different systems are designed to respond to failures

144
00:09:47,762 --> 00:09:51,446
in quite different ways. In the absence of an adversary,

145
00:09:51,558 --> 00:09:54,790
systems often fail safe. Failsafe behavior

146
00:09:54,870 --> 00:09:58,234
can lead the two obvious security vulnerabilities to

147
00:09:58,272 --> 00:10:02,202
defend against an adversary who might explode a power

148
00:10:02,256 --> 00:10:05,694
failure, we could design the door to fail secure and

149
00:10:05,732 --> 00:10:10,218
remain cloud when not power. These primary reliability

150
00:10:10,314 --> 00:10:13,842
risks are not malicious in nature, for example about

151
00:10:13,896 --> 00:10:17,230
software update or a physical device failure.

152
00:10:17,310 --> 00:10:20,702
In the other side, security risks come from adversaries

153
00:10:20,766 --> 00:10:24,638
who are actively trying to exploit system vulnerabilities.

154
00:10:24,734 --> 00:10:28,182
When designing for reliability, we assume that

155
00:10:28,236 --> 00:10:31,954
some things go wrong at some point. When designing

156
00:10:32,002 --> 00:10:35,334
for security, I think it's different because we must

157
00:10:35,452 --> 00:10:39,434
assume that an adversary could be trying to make things go

158
00:10:39,472 --> 00:10:43,670
wrong at any point. Both security and reliability

159
00:10:43,750 --> 00:10:47,434
and concern with confidentially integrity and

160
00:10:47,472 --> 00:10:51,262
availability of our systems. But they view these

161
00:10:51,316 --> 00:10:55,294
properties through different lens. They have traditionally been

162
00:10:55,332 --> 00:10:59,054
confidence fundamental attributes of

163
00:10:59,092 --> 00:11:02,786
secure systems. The key difference between the

164
00:11:02,808 --> 00:11:06,542
two viewpoints is the presence or lack of a malicious

165
00:11:06,606 --> 00:11:10,910
adversary. A reliable system must not breach confidentially

166
00:11:10,990 --> 00:11:14,942
accidentally, while a secure system must prevent an

167
00:11:15,016 --> 00:11:18,454
active adversary from accessing, tampering with or

168
00:11:18,492 --> 00:11:22,534
destroying confidential data. Confidentially integrity and

169
00:11:22,572 --> 00:11:26,054
availability and related with

170
00:11:26,092 --> 00:11:29,242
these two concepts reliability and security.

171
00:11:29,376 --> 00:11:33,222
According to Google, reliability is the most important feature

172
00:11:33,286 --> 00:11:36,582
of our systems. Considering this, for reaching

173
00:11:36,646 --> 00:11:40,146
this they must have to securing. Probably you are wondering

174
00:11:40,198 --> 00:11:44,474
where to begin integrating security and reliability principles

175
00:11:44,522 --> 00:11:47,774
into your systems. The first and the most important

176
00:11:47,892 --> 00:11:51,210
step is securing security and reliability

177
00:11:51,290 --> 00:11:54,862
issues is to educate develop. However, even the best

178
00:11:54,916 --> 00:11:59,182
training engineers can make stages mistakes, security experts

179
00:11:59,246 --> 00:12:02,578
can write insecure code and sres can miss

180
00:12:02,664 --> 00:12:06,126
reliability issues. Considering that it's difficult to keep

181
00:12:06,168 --> 00:12:09,590
the many considerations and trade off involved in building

182
00:12:09,660 --> 00:12:13,478
a culture based on secure and reliability systems in mind,

183
00:12:13,644 --> 00:12:17,222
we started making an evaluation of the situation in our

184
00:12:17,276 --> 00:12:20,986
company. So we apply a survey between developers with

185
00:12:21,008 --> 00:12:24,794
the aim to know how much they know about security

186
00:12:24,912 --> 00:12:28,314
and what is their perception about the importance of

187
00:12:28,352 --> 00:12:32,174
this topic. We interviewed 130 engineers in

188
00:12:32,212 --> 00:12:35,742
ADL, of which the 25% were

189
00:12:35,796 --> 00:12:40,058
software architects, 16% say they were front end engineers

190
00:12:40,154 --> 00:12:43,726
and 60% were back DevOps engineer and

191
00:12:43,908 --> 00:12:47,682
just two or 3% say

192
00:12:47,736 --> 00:12:51,102
they were full stack and quality engineers respectively,

193
00:12:51,166 --> 00:12:54,242
although we were expecting that a percent of them

194
00:12:54,296 --> 00:12:58,006
didn't show interest in security topics to the first questions

195
00:12:58,108 --> 00:13:01,874
do you have interest in security topics? Almost 15 didn't

196
00:13:01,922 --> 00:13:05,606
have interest on those topics. That is an important person if

197
00:13:05,628 --> 00:13:09,686
we consider that the group is mostly composed

198
00:13:09,878 --> 00:13:13,066
of backend engineers. Tools is an online

199
00:13:13,168 --> 00:13:16,950
community that produce freely available articles,

200
00:13:17,030 --> 00:13:20,774
methodologies, documentation, tools and technologies

201
00:13:20,822 --> 00:13:24,942
in the field of web application security. It is a great reference that

202
00:13:24,996 --> 00:13:28,942
ADL DevOps engineer in building of a digital solution should

203
00:13:28,996 --> 00:13:32,190
know. So we consider could make sense to ask about

204
00:13:32,260 --> 00:13:35,394
its practice. To our surprise, the percentage of

205
00:13:35,432 --> 00:13:39,026
people who didn't practice AWAPs except one third of

206
00:13:39,048 --> 00:13:42,926
the responders about static analyze static analyze

207
00:13:42,958 --> 00:13:46,454
is about analyzing and understanding computer

208
00:13:46,572 --> 00:13:50,322
programs by inspecting their source code without executing

209
00:13:50,386 --> 00:13:53,526
or running them. Static analyzers parts the

210
00:13:53,548 --> 00:13:57,314
source code and build an internal representation of the programs

211
00:13:57,362 --> 00:14:01,254
that is suitable for automated analyze. This approach

212
00:14:01,302 --> 00:14:04,810
can discover potential box in source code, but also

213
00:14:04,880 --> 00:14:09,210
it is a great tool to discover software vulnerabilities, preferably before

214
00:14:09,280 --> 00:14:13,054
the code is checked or deployed in production. To the

215
00:14:13,092 --> 00:14:15,850
question do you run a static analyze?

216
00:14:15,930 --> 00:14:19,690
23% of developers don't have security steps

217
00:14:19,770 --> 00:14:23,970
enabled in pipelines. This group includes

218
00:14:24,310 --> 00:14:28,482
five software architects, 14 backend engineers and only one

219
00:14:28,536 --> 00:14:32,510
front end engineer. 100 people have security integrated

220
00:14:32,590 --> 00:14:35,718
in the continuous integration continuous deployment process.

221
00:14:35,804 --> 00:14:39,426
Finally, we ask them about the tools

222
00:14:39,458 --> 00:14:42,610
that they integrated into their development environment.

223
00:14:42,690 --> 00:14:46,274
In ADL, our Jenkins pipeline run steps for measuring

224
00:14:46,322 --> 00:14:50,106
the quality of the code using sonar. That is the reason for

225
00:14:50,128 --> 00:14:53,914
the first value, 49 of them use sonar. But when we

226
00:14:53,952 --> 00:14:57,782
ask by tools or plugins for identifying vulnerabilities

227
00:14:57,846 --> 00:15:01,710
in the dependencies of the code, the values are low. Just three

228
00:15:01,780 --> 00:15:05,198
people use black doc and two use

229
00:15:05,284 --> 00:15:08,862
sneak. Finally, just one people or one person

230
00:15:08,996 --> 00:15:13,030
use fortify Amberco

231
00:15:13,130 --> 00:15:16,786
two tools for building secure software fast finding security

232
00:15:16,888 --> 00:15:21,330
issues early and fix them. It is our conclusion of this survey,

233
00:15:21,910 --> 00:15:26,200
14% of engineers don't show interest in security issues.

234
00:15:26,890 --> 00:15:30,280
That is really really important because it

235
00:15:31,130 --> 00:15:34,838
imposes us a challenge. Motivate and create

236
00:15:34,924 --> 00:15:38,374
culture about security between software developers group of

237
00:15:38,412 --> 00:15:42,282
people is molecule formers vacation engineers. That is an important thing

238
00:15:42,336 --> 00:15:46,122
to think about this and we need to motivate them

239
00:15:46,256 --> 00:15:49,898
and we need to generate motivation stages for them.

240
00:15:49,984 --> 00:15:53,610
So let me move another section of this presentation.

241
00:15:53,770 --> 00:15:57,582
It is clear that we have a problem from the development which can

242
00:15:57,636 --> 00:16:00,894
be extrapolated to the cloud. Considering that there are

243
00:16:00,932 --> 00:16:04,670
a group of people who don't show interest in security topics,

244
00:16:04,750 --> 00:16:08,786
the most probable is that an exploited vulnerability is only a

245
00:16:08,808 --> 00:16:12,622
matter of time. Software development is a dynamic profession.

246
00:16:12,766 --> 00:16:16,038
Source code change daily and once in a while.

247
00:16:16,124 --> 00:16:19,730
So that's the way the local development environments

248
00:16:19,810 --> 00:16:24,050
needs to be set up. There are many benefits of integrating

249
00:16:24,130 --> 00:16:27,522
security in the development process. We have to

250
00:16:27,596 --> 00:16:30,954
rethink how developers sce the cloud in

251
00:16:30,992 --> 00:16:34,940
terms of software development and adoption. In the early days,

252
00:16:35,390 --> 00:16:39,030
we performed the software development lifecycle stages

253
00:16:39,110 --> 00:16:43,690
offline and on premise. If you remember where developers

254
00:16:43,770 --> 00:16:47,962
use their computers has terminals to access early versions

255
00:16:48,026 --> 00:16:51,454
of the worldwide web, helping them find answers to

256
00:16:51,492 --> 00:16:54,654
problems. All right, so far, thanks to Internet software

257
00:16:54,702 --> 00:16:58,462
as a service, solutions quickly bought significant

258
00:16:58,606 --> 00:17:02,498
security vulnerabilities. Nowadays, Digital Reliance Trust,

259
00:17:02,584 --> 00:17:06,354
open business have served to how to important secure

260
00:17:06,402 --> 00:17:10,294
software development lifecycle is for business, customers and

261
00:17:10,332 --> 00:17:14,242
society. A common security box can lead to catastrophic

262
00:17:14,306 --> 00:17:18,154
breaches if undetected. A 2019 study

263
00:17:18,272 --> 00:17:21,798
found out of 32 web applications,

264
00:17:21,894 --> 00:17:25,706
82% of vulnerabilities were located in the application

265
00:17:25,808 --> 00:17:29,942
called itself. Hackers can attack users

266
00:17:30,006 --> 00:17:33,162
in night out of ten web applications.

267
00:17:33,306 --> 00:17:36,746
Attacks include redirecting users to a hacker

268
00:17:36,778 --> 00:17:39,914
controller resource, stealing credentials

269
00:17:39,962 --> 00:17:43,470
in phishing attacks and infecting computers with malware.

270
00:17:43,550 --> 00:17:47,780
Unauthorized access to application is possible on

271
00:17:48,550 --> 00:17:52,050
30% of sites. In 2019, full control

272
00:17:52,120 --> 00:17:55,894
of the system cloud be obtained of 16% of web

273
00:17:55,932 --> 00:17:59,074
applications on 8% of systems,

274
00:17:59,122 --> 00:18:02,600
full control of the web application server allow

275
00:18:03,930 --> 00:18:08,490
attacking the local network. On average, each systems contain

276
00:18:09,070 --> 00:18:12,842
22 vulnerabilities on which forward of

277
00:18:12,896 --> 00:18:16,438
high severity it is a fact we need to secure

278
00:18:16,534 --> 00:18:20,430
and guarantee reliability. Code to date

279
00:18:20,500 --> 00:18:23,902
has lead to the growth chaos engineers where

280
00:18:23,956 --> 00:18:28,122
resilience is built into code by designing and methodology.

281
00:18:28,266 --> 00:18:31,742
Security should be front of mind both security

282
00:18:31,876 --> 00:18:36,402
engineers and developers. That is a fact. That is our conclusion of

283
00:18:36,456 --> 00:18:40,258
this first part. Organizations must offer training

284
00:18:40,344 --> 00:18:44,722
and sculpture internally. What can we do if

285
00:18:44,776 --> 00:18:48,934
there are developers don't like security? Has I

286
00:18:48,972 --> 00:18:52,582
mentioned in the survey we have a proposal here.

287
00:18:52,716 --> 00:18:56,434
Use security chaos engineers Security chaos Engineering

288
00:18:56,482 --> 00:18:59,794
is the identification of security controls failures

289
00:18:59,842 --> 00:19:03,354
through proactive experiments to build confidence in

290
00:19:03,392 --> 00:19:07,526
the system's ability to defend against malicious conditions

291
00:19:07,558 --> 00:19:11,594
in production. This definition was promoted in this book, Security Chaos

292
00:19:11,642 --> 00:19:14,846
Engineering, published in April of the last year.

293
00:19:14,948 --> 00:19:18,702
I have highlighted six words that

294
00:19:18,756 --> 00:19:22,640
are valuable in the definition provided by Aaron security

295
00:19:22,950 --> 00:19:26,514
failures experiments and it is super important

296
00:19:26,632 --> 00:19:29,982
because this discipline is based on the scientific method,

297
00:19:30,046 --> 00:19:33,854
confidence and defense because it is about to achieve

298
00:19:33,902 --> 00:19:37,522
resilience and lastly production because the theory

299
00:19:37,586 --> 00:19:41,458
says that we should run experiments on production environment,

300
00:19:41,554 --> 00:19:45,542
although it should not be necessarily so, we can expect

301
00:19:45,676 --> 00:19:49,394
traditional teaching methods such as classroom

302
00:19:49,442 --> 00:19:52,962
based learning to change our developers mindset

303
00:19:53,026 --> 00:19:56,986
on secure coding. Gamified developer programs are

304
00:19:57,008 --> 00:20:00,478
a great way to engage developers and actively test

305
00:20:00,564 --> 00:20:04,622
their secure coding skills. Chaos game days are based on game days

306
00:20:04,756 --> 00:20:08,670
and now I am going to provide some definitions

307
00:20:09,010 --> 00:20:12,622
related to that. A definition from AWS says

308
00:20:12,676 --> 00:20:15,970
that game days are an interactive team based

309
00:20:16,040 --> 00:20:20,002
learning exercises designed to give players a

310
00:20:20,056 --> 00:20:23,794
chance to put their skills to the test in a real world,

311
00:20:23,832 --> 00:20:27,974
gamified, risk free environment. Most importantly, they are

312
00:20:28,012 --> 00:20:31,570
an extremely fun way to learn more about the potential

313
00:20:31,650 --> 00:20:35,382
of a technology as a form of game days. Chaos game days

314
00:20:35,436 --> 00:20:38,970
is a practice event that can take a whole day.

315
00:20:39,040 --> 00:20:42,090
It usually requires only a few hours.

316
00:20:42,240 --> 00:20:45,770
The goal of a game day is to practice how you,

317
00:20:45,840 --> 00:20:49,690
your team or your supporting systems deal with the

318
00:20:49,760 --> 00:20:53,658
real world turbulent conditions. That is the objective for this practice.

319
00:20:53,754 --> 00:20:56,794
So it is a framework provided by rules.

320
00:20:56,842 --> 00:21:00,014
Miles the framework has three phases, before,

321
00:21:00,132 --> 00:21:03,922
during and after during. Before we pick

322
00:21:03,976 --> 00:21:07,554
a hypothesis, pick an style, decide who

323
00:21:07,672 --> 00:21:11,218
where went the event was wrong.

324
00:21:11,304 --> 00:21:13,140
So after that,

325
00:21:14,710 --> 00:21:18,614
during the durian phase, the tech decitation is the

326
00:21:18,652 --> 00:21:22,134
objective of this part. And other activities include take

327
00:21:22,172 --> 00:21:25,686
adept bread, communicate, visit dashboards in the

328
00:21:25,708 --> 00:21:29,282
observability tools, analyze data, propose solutions

329
00:21:29,346 --> 00:21:32,858
and apply it and solve the incident. And finally the

330
00:21:32,944 --> 00:21:36,966
last has is for writing a post mortem. So in this phase

331
00:21:36,998 --> 00:21:40,254
we analyze what happened, what is the impact of

332
00:21:40,292 --> 00:21:44,090
the incident, what is the duration, what is the resolution

333
00:21:44,170 --> 00:21:48,190
time and what are the action systems included here.

334
00:21:48,340 --> 00:21:52,570
So let me talk about

335
00:21:52,660 --> 00:21:56,466
some examples for practicing security chaos engineering in

336
00:21:56,488 --> 00:21:59,970
a game day. One experiment for it

337
00:22:00,040 --> 00:22:03,794
is introduce laryncy on security controls. Drop a

338
00:22:03,832 --> 00:22:07,778
folder like iron escape will do in non production

339
00:22:07,874 --> 00:22:11,410
software secret clear text disclosure disable

340
00:22:11,490 --> 00:22:14,630
service seven login permission collisions provide

341
00:22:14,700 --> 00:22:18,822
permissions collisions for example in AWS AP gateway

342
00:22:18,886 --> 00:22:22,586
shutdown create an

343
00:22:22,608 --> 00:22:26,186
encrypted three bucket or finally

344
00:22:26,288 --> 00:22:29,866
disable multifactor authentication impact of security chaos in

345
00:22:29,888 --> 00:22:33,840
general in previous slide we're talking about the chaos and how to

346
00:22:34,370 --> 00:22:37,614
this practices cloud be generate more value in

347
00:22:37,652 --> 00:22:41,242
your teams and generate some practices in our teams.

348
00:22:41,306 --> 00:22:45,598
And then now we're talking about how to our teams

349
00:22:45,694 --> 00:22:49,646
could be generate this value. These objectives

350
00:22:49,838 --> 00:22:53,010
with using chaos and what could

351
00:22:53,080 --> 00:22:56,258
be generate this impact in our teams.

352
00:22:56,354 --> 00:23:00,758
Right then could be one big

353
00:23:00,924 --> 00:23:04,230
problem with this part is

354
00:23:04,300 --> 00:23:08,154
because you needed to talk a

355
00:23:08,192 --> 00:23:12,314
long amount of data to resume and

356
00:23:12,432 --> 00:23:15,578
correlation generate some patterns about this data.

357
00:23:15,664 --> 00:23:20,210
You could be based bigquery use some other strategy

358
00:23:20,310 --> 00:23:23,930
from your cloud and how to this cloud generate

359
00:23:24,010 --> 00:23:27,518
this pattern. For me that's not easy to

360
00:23:27,604 --> 00:23:31,310
use, but you can use and define what

361
00:23:31,380 --> 00:23:35,278
useful and what not useful for my

362
00:23:35,444 --> 00:23:39,678
cloud provider use this summer a lot of resources

363
00:23:39,774 --> 00:23:43,762
that you can define and how to all

364
00:23:43,816 --> 00:23:47,542
part of the cloud generate this part for me that

365
00:23:47,596 --> 00:23:51,218
I not needed to generate very big tools.

366
00:23:51,314 --> 00:23:55,234
I can use some of IIA to generate

367
00:23:55,282 --> 00:23:58,650
this part of my data that I have

368
00:23:58,720 --> 00:24:01,462
in my storage.

369
00:24:01,606 --> 00:24:04,794
Then how to correlate these logs and how to

370
00:24:04,832 --> 00:24:08,458
generate some part of my job more

371
00:24:08,544 --> 00:24:12,426
easeful. Right. And the next slide we're

372
00:24:12,458 --> 00:24:17,774
talking about the impact. What is the impact about my

373
00:24:17,812 --> 00:24:21,760
teams? What happened with my teams talking about

374
00:24:23,750 --> 00:24:28,226
what is the most big importance with

375
00:24:28,328 --> 00:24:31,906
your requirements gathering and architecture design

376
00:24:32,008 --> 00:24:35,654
for security. This one has the part of focus from

377
00:24:35,692 --> 00:24:39,174
your software cycle. Because you

378
00:24:39,212 --> 00:24:43,462
can prepare your people and generate some plans to

379
00:24:43,596 --> 00:24:47,614
this part. But if your architecture

380
00:24:47,762 --> 00:24:52,634
or the person that company your

381
00:24:52,752 --> 00:24:56,394
business don't generate this value for the

382
00:24:56,432 --> 00:24:58,380
company it's very difficult.

383
00:25:00,510 --> 00:25:04,314
That view from all team. Because all

384
00:25:04,352 --> 00:25:07,902
part of the team it's very important in

385
00:25:07,956 --> 00:25:12,720
all part of the software. And you need to

386
00:25:13,350 --> 00:25:15,746
generate this value for your team,

387
00:25:15,848 --> 00:25:19,662
right. Then you need to generate plans

388
00:25:19,726 --> 00:25:23,314
to capacitate your people and how to these people cloud

389
00:25:23,352 --> 00:25:26,742
be topics like

390
00:25:26,796 --> 00:25:31,186
a herd and generate these requirements

391
00:25:31,298 --> 00:25:35,138
the correct way. Right. Then we'll

392
00:25:35,154 --> 00:25:38,794
be talking about the continuous testing about this

393
00:25:38,832 --> 00:25:42,634
team that it's very important. But first focus

394
00:25:42,752 --> 00:25:46,154
obviously is the customers

395
00:25:46,272 --> 00:25:49,926
and the new features that generate with the value from the

396
00:25:49,968 --> 00:25:53,882
customers. But the second focus that generates

397
00:25:53,946 --> 00:25:58,542
for this team is the security how to the security play

398
00:25:58,596 --> 00:26:02,190
a big important part

399
00:26:02,260 --> 00:26:06,542
of this SCE. Because that team

400
00:26:06,676 --> 00:26:10,114
will be generate more requirements for my

401
00:26:10,232 --> 00:26:13,618
development team than my business.

402
00:26:13,784 --> 00:26:17,618
Because if my team from

403
00:26:17,784 --> 00:26:23,234
QA could generate these plans,

404
00:26:23,362 --> 00:26:26,726
some tests that generate could be

405
00:26:26,828 --> 00:26:30,066
some issues. The security could

406
00:26:30,108 --> 00:26:34,042
be my development team is more stronger when

407
00:26:34,096 --> 00:26:37,690
generate more software development for my customer then

408
00:26:37,760 --> 00:26:40,686
it's a very big part of my team.

409
00:26:40,788 --> 00:26:44,046
But it's important every parts of

410
00:26:44,068 --> 00:26:47,760
the team. Obviously it's very important. But if you

411
00:26:48,450 --> 00:26:52,014
generate focus in this part, the other

412
00:26:52,052 --> 00:26:55,682
part in your team generate this because that

413
00:26:55,736 --> 00:26:59,986
current generate all the teams in the

414
00:27:00,008 --> 00:27:01,700
thought for developers, right.

415
00:27:03,670 --> 00:27:06,980
An opportunity to involve business. An example

416
00:27:07,750 --> 00:27:10,914
asking if a low that

417
00:27:11,112 --> 00:27:14,738
lodging could be generating more from one browser

418
00:27:14,914 --> 00:27:18,586
cloud be it's a one off part that more or

419
00:27:18,608 --> 00:27:22,220
less than the

420
00:27:22,990 --> 00:27:26,774
other ways that the attacker could be generate

421
00:27:26,902 --> 00:27:30,686
some waste to this part.

422
00:27:30,788 --> 00:27:35,742
And in that part you need to involve your

423
00:27:35,796 --> 00:27:38,720
customer in these requirements, right.

424
00:27:39,330 --> 00:27:43,006
We highly import of secure dependencies in time on software

425
00:27:43,038 --> 00:27:47,182
design and implementation. If you define

426
00:27:47,246 --> 00:27:51,410
in your team, in your software team that use

427
00:27:51,560 --> 00:27:55,334
open source library it's very carefully because you

428
00:27:55,372 --> 00:27:58,646
needed to generate security for that. Yeah.

429
00:27:58,748 --> 00:28:02,840
It could be the develop security use

430
00:28:03,450 --> 00:28:07,650
open source library that generates some

431
00:28:07,820 --> 00:28:11,114
part of holes in

432
00:28:11,152 --> 00:28:14,874
my software and it's very difficult to identify when your

433
00:28:14,912 --> 00:28:19,190
software is in production. But if you generate

434
00:28:19,350 --> 00:28:22,826
part of this definition of how to

435
00:28:22,848 --> 00:28:27,070
security these dependencies and how to generate

436
00:28:28,290 --> 00:28:32,014
some scan about this library, you generate more value from your

437
00:28:32,052 --> 00:28:36,018
customers and AdL value that you generate with your developer team,

438
00:28:36,104 --> 00:28:40,290
right? That it's a very nice form

439
00:28:40,360 --> 00:28:44,290
to generate this impact.

440
00:28:45,530 --> 00:28:49,080
Talking about some recommendations that

441
00:28:49,610 --> 00:28:53,362
in AdL we generate with jury

442
00:28:53,426 --> 00:28:57,526
and all security teams that it's a very important in

443
00:28:57,548 --> 00:29:00,630
this moment, right? Use algorithm to prepare

444
00:29:00,710 --> 00:29:05,050
sensitive data. Use algorithm that use highest

445
00:29:06,350 --> 00:29:13,760
encryption keys, not 256

446
00:29:14,210 --> 00:29:16,960
keys, could be in 1000.

447
00:29:18,210 --> 00:29:22,080
Generate your popular algorithm that

448
00:29:22,470 --> 00:29:26,014
it's easy to decipherate

449
00:29:26,142 --> 00:29:29,474
for your team. Could be if your

450
00:29:29,512 --> 00:29:33,620
team of security is very mature, could be generate some

451
00:29:35,050 --> 00:29:38,182
algorithms to protect your

452
00:29:38,236 --> 00:29:42,166
data. If you have this part of your

453
00:29:42,188 --> 00:29:46,194
teams, very nice because it's part of the software

454
00:29:46,242 --> 00:29:49,750
too. Don't leave clear data in logs.

455
00:29:50,670 --> 00:29:54,346
Some developers use clear data to debug the

456
00:29:54,368 --> 00:29:59,660
application, but in production it's very other

457
00:30:00,130 --> 00:30:04,094
way and it's very painful because if

458
00:30:04,132 --> 00:30:08,750
you leave clear data in logs,

459
00:30:09,890 --> 00:30:13,234
if these logs was stolen, you have

460
00:30:13,272 --> 00:30:16,722
a big problem, right? Then could

461
00:30:16,776 --> 00:30:21,234
be used more or less data

462
00:30:21,352 --> 00:30:24,846
included with the logs from your developer team

463
00:30:24,968 --> 00:30:28,658
if needed. Debugging in production exists

464
00:30:28,754 --> 00:30:32,840
other ways to generate this debugging and how to your application

465
00:30:33,690 --> 00:30:37,574
use production for

466
00:30:37,692 --> 00:30:40,210
your developers,

467
00:30:40,370 --> 00:30:44,074
right. Use MFA for

468
00:30:44,112 --> 00:30:47,546
critical application actions. Multifactor authentication is a

469
00:30:47,568 --> 00:30:50,830
very useful for your actions

470
00:30:51,170 --> 00:30:55,610
not only for login. You can use this strategy

471
00:30:55,690 --> 00:30:59,646
for generate more secure approach in your

472
00:30:59,668 --> 00:31:03,454
software, right? Use a long short life effective

473
00:31:03,502 --> 00:31:07,330
links for documents to be delivered. If you generate

474
00:31:08,470 --> 00:31:11,890
some PDF from your customers, could be generated

475
00:31:13,030 --> 00:31:17,766
long time from these documents of

476
00:31:17,948 --> 00:31:21,986
OTP. One access from these documents

477
00:31:22,178 --> 00:31:25,926
and that's it. Remote frontier storage. That is a

478
00:31:25,948 --> 00:31:30,170
good practice because you don't have to generate all

479
00:31:30,240 --> 00:31:33,946
things of this PDF. Or could be other strategy is generate a

480
00:31:33,968 --> 00:31:37,226
hash. When the hash is get it from

481
00:31:37,248 --> 00:31:40,950
your customer, the system automatically generates a PDF.

482
00:31:41,030 --> 00:31:44,410
The customer download it and you remove from your storage

483
00:31:44,490 --> 00:31:47,694
and that's it. You don't storage this

484
00:31:47,732 --> 00:31:50,878
data because it's very sensitive and it's a

485
00:31:50,884 --> 00:31:54,342
very hard way to storage and maintain

486
00:31:54,506 --> 00:31:58,414
names. This data, right. Uses session

487
00:31:58,462 --> 00:32:02,020
management from front kinds cloud be in this part

488
00:32:03,190 --> 00:32:06,834
separately more your application generate

489
00:32:06,882 --> 00:32:10,726
back end generate front end. If you can put some

490
00:32:10,828 --> 00:32:14,120
more layers from your application from

491
00:32:15,050 --> 00:32:20,026
your front and your back end because you

492
00:32:20,128 --> 00:32:24,502
generate difficult patterns from your hackers that it's

493
00:32:24,566 --> 00:32:27,926
very hard way to generate some attacks

494
00:32:27,958 --> 00:32:32,030
from your application. Then if you use this

495
00:32:32,180 --> 00:32:35,902
strategy, you secure more your application,

496
00:32:36,036 --> 00:32:39,690
right. Do not use cookies and process storage.

497
00:32:39,850 --> 00:32:43,394
Could be if you use storage and

498
00:32:43,432 --> 00:32:47,010
use cookies could be not put in there.

499
00:32:47,160 --> 00:32:51,454
Some sensitive data could be put just session

500
00:32:51,502 --> 00:32:55,406
id could be put list of products or

501
00:32:55,448 --> 00:32:59,154
list of access from my role.

502
00:32:59,282 --> 00:33:03,320
But no sensitive data because it's very hard

503
00:33:04,170 --> 00:33:07,994
took from the computer's customers

504
00:33:08,112 --> 00:33:11,946
this data and replace that, right. And if

505
00:33:12,048 --> 00:33:15,910
an attacker take these cookies or storage

506
00:33:16,070 --> 00:33:20,762
from browser it's very difficult remove

507
00:33:20,826 --> 00:33:24,814
that and the customers are very painful because

508
00:33:25,012 --> 00:33:28,666
the customer generate new user neo password

509
00:33:28,778 --> 00:33:32,254
generate some control that could

510
00:33:32,292 --> 00:33:35,822
be disheartened. And it's very painful for him

511
00:33:35,876 --> 00:33:39,038
to make all software activities

512
00:33:39,134 --> 00:33:42,706
auditable. If you have a software with all

513
00:33:42,808 --> 00:33:46,738
action of detail, it's very nice because you identify

514
00:33:46,914 --> 00:33:50,258
what the customer is doing in your software.

515
00:33:50,434 --> 00:33:54,002
In this way you can define

516
00:33:54,146 --> 00:33:59,150
what happened if what customer access to unexplored

517
00:33:59,170 --> 00:34:02,586
link and what try to access to this link.

518
00:34:02,688 --> 00:34:05,450
Because then later, right.

519
00:34:05,600 --> 00:34:09,414
Then you need to define this auditable

520
00:34:09,542 --> 00:34:13,190
from generate some alerts, generate some patterns

521
00:34:13,270 --> 00:34:16,970
from your customers and how to define

522
00:34:17,130 --> 00:34:20,240
it's not a pattern from your customer, right.

523
00:34:21,170 --> 00:34:24,514
Perform vulnerability scan of the software. Talking about

524
00:34:24,552 --> 00:34:28,162
the dependencies is a good way to generate this

525
00:34:28,216 --> 00:34:31,010
part. Another part.

526
00:34:31,160 --> 00:34:34,770
Enable CI and CD steps. If you have in this moment

527
00:34:34,840 --> 00:34:37,894
from delivery for your customers from

528
00:34:37,932 --> 00:34:42,690
your application, you need to enable

529
00:34:42,770 --> 00:34:46,520
these steps from security. That's very nice

530
00:34:46,890 --> 00:34:51,482
in your application because you

531
00:34:51,616 --> 00:34:56,310
could be generating some politics

532
00:34:56,470 --> 00:34:59,714
about from the software about the roles

533
00:34:59,862 --> 00:35:03,390
about how to deploy, about how to secure

534
00:35:03,810 --> 00:35:07,214
my artifacts, my application and how

535
00:35:07,252 --> 00:35:10,910
to generate this very secure in

536
00:35:10,980 --> 00:35:14,702
these steps. That is a very previous from generating

537
00:35:14,766 --> 00:35:17,838
software in production, right. Use a hard info

538
00:35:17,854 --> 00:35:22,386
validation of software elements could be used

539
00:35:22,488 --> 00:35:26,510
this hashing from your artifactory repository

540
00:35:26,670 --> 00:35:29,598
that generate juratifactor.

541
00:35:29,774 --> 00:35:33,574
Put in your artifactory repository with the has when

542
00:35:33,612 --> 00:35:37,094
you download check if the hashes change

543
00:35:37,132 --> 00:35:40,426
it. And that's a very easy control

544
00:35:40,528 --> 00:35:44,698
to your repository and your artifacts that generate too,

545
00:35:44,784 --> 00:35:48,374
right. Generate container

546
00:35:48,422 --> 00:35:51,760
image in secure way. You could be used

547
00:35:53,730 --> 00:35:57,598
less access

548
00:35:57,684 --> 00:36:01,178
strategy of minimum of privilege from these containers

549
00:36:01,274 --> 00:36:05,138
that it's very long way

550
00:36:05,224 --> 00:36:08,930
to your containers, but it's the good way from

551
00:36:09,000 --> 00:36:12,654
your customers and your application. Because you don't

552
00:36:12,702 --> 00:36:16,086
have to generate these containers with

553
00:36:16,108 --> 00:36:20,134
the root access because don't need it. The application

554
00:36:20,252 --> 00:36:24,178
really don't need it root element with your environment.

555
00:36:24,274 --> 00:36:28,074
Because if one application needed that, it could

556
00:36:28,112 --> 00:36:31,978
be redefined how to access from some resources in

557
00:36:31,984 --> 00:36:35,260
the container or from your resources, right.

558
00:36:35,710 --> 00:36:40,082
Separate environments from applications and separate

559
00:36:40,166 --> 00:36:43,578
database too. It's a very useful

560
00:36:43,754 --> 00:36:47,578
this part if you have a production environment,

561
00:36:47,674 --> 00:36:51,342
development environment, QA environment. It's a very

562
00:36:51,396 --> 00:36:55,582
easy part. If you separate

563
00:36:55,646 --> 00:36:59,730
and isolate this environment from each one other.

564
00:36:59,880 --> 00:37:03,122
That's a very nice and very good

565
00:37:03,256 --> 00:37:06,854
way to generate this securing right. Then if

566
00:37:06,892 --> 00:37:10,722
you separate for less just production

567
00:37:10,786 --> 00:37:13,750
and other environments. In other part is right.

568
00:37:13,900 --> 00:37:18,470
Because you could be generate some with this strategy.

569
00:37:18,630 --> 00:37:22,266
Because I don't have a lot of money that it's a

570
00:37:22,288 --> 00:37:26,266
good way and some part to start with that

571
00:37:26,448 --> 00:37:30,146
use security blocking user unsuccessful attempts.

572
00:37:30,278 --> 00:37:33,520
If you detect that your customers

573
00:37:34,050 --> 00:37:38,270
logging from three, four, five attempts

574
00:37:38,690 --> 00:37:41,786
fail it, you could be blocked. Because it's

575
00:37:41,818 --> 00:37:45,598
a very good practice and your customers is very

576
00:37:45,684 --> 00:37:48,894
grateful for you. Because you can

577
00:37:49,012 --> 00:37:52,846
send email advice about

578
00:37:53,028 --> 00:37:56,662
your user has been blocking about some

579
00:37:56,716 --> 00:38:01,110
attempts that could be done generate and this alert

580
00:38:01,690 --> 00:38:04,818
for your customer. I'm very grateful

581
00:38:04,914 --> 00:38:09,078
because it's a nice alert and

582
00:38:09,244 --> 00:38:11,460
that's it. Right. Thank you.

