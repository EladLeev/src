1
00:00:23,260 --> 00:00:27,520
CMS stands for content management system and

2
00:00:27,590 --> 00:00:30,772
this is a type of software that covers

3
00:00:30,836 --> 00:00:34,872
all the applications for modification and

4
00:00:34,926 --> 00:00:38,376
creation of digital content. The evolution of

5
00:00:38,398 --> 00:00:42,030
the CMS is at the same time the evolution of the web.

6
00:00:42,560 --> 00:00:46,476
So let's explore together how new

7
00:00:46,498 --> 00:00:50,092
paradigm, new technologies and even new devices have

8
00:00:50,146 --> 00:00:53,804
changed the web ecosystem landscape. Hi,

9
00:00:54,002 --> 00:00:57,688
my name is Juan Felipe Gomez. I'm from Medellin, Colombia.

10
00:00:57,864 --> 00:01:01,296
And since I started in this world

11
00:01:01,478 --> 00:01:05,420
in web development, I faced with this term of CMS.

12
00:01:05,580 --> 00:01:09,220
So I just want to share some of my experience with you.

13
00:01:09,370 --> 00:01:13,536
You can find me on my social network as Gomez one FA

14
00:01:13,728 --> 00:01:17,728
and first of all, I want to say thank you to Mari because he encouraged

15
00:01:17,744 --> 00:01:21,208
me to do this presentation. And just by the record,

16
00:01:21,294 --> 00:01:25,128
this is my first time as a speaker. Let's talk a

17
00:01:25,134 --> 00:01:28,404
little bit about the beginnings of the web. The World Wide

18
00:01:28,452 --> 00:01:32,476
Web started with static sites that provide content

19
00:01:32,658 --> 00:01:34,940
without database queries.

20
00:01:35,680 --> 00:01:39,096
These sites consumed minimal computing resources,

21
00:01:39,208 --> 00:01:42,030
resulting in fast loading times.

22
00:01:42,880 --> 00:01:46,224
This speed was due to the absence of

23
00:01:46,262 --> 00:01:48,560
a complex backend.

24
00:01:50,180 --> 00:01:54,192
It was in the middle of 1990s

25
00:01:54,246 --> 00:01:57,796
as the Internet popularities rose and the

26
00:01:57,818 --> 00:02:01,920
website started to require more frequent updates.

27
00:02:02,080 --> 00:02:05,830
When we saw the first CMS products,

28
00:02:06,600 --> 00:02:10,916
however, all those were proprietary and closed source,

29
00:02:11,108 --> 00:02:14,696
which was typically for that era. But in

30
00:02:14,718 --> 00:02:18,084
the early 2000s, we saw the emergence of open resources

31
00:02:18,132 --> 00:02:22,220
CMS alternative, like WordPress, Drupal or Joomla.

32
00:02:23,280 --> 00:02:26,110
In the case of WordPress, for example,

33
00:02:28,000 --> 00:02:31,400
it counts with a set of plugins,

34
00:02:31,560 --> 00:02:35,488
templates and many other tools that allow users to create

35
00:02:35,574 --> 00:02:39,612
website without knowing CMS

36
00:02:39,756 --> 00:02:41,280
or HTML.

37
00:02:44,180 --> 00:02:48,260
The rise of the open source is

38
00:02:48,330 --> 00:02:52,580
consistent with the development of the lamb infrastructure.

39
00:02:53,080 --> 00:02:55,664
Lamb means Linux, Apache,

40
00:02:55,712 --> 00:02:59,540
MySQL and either PHP,

41
00:02:59,620 --> 00:03:03,364
Python or Perl. This new structure

42
00:03:03,492 --> 00:03:07,716
marked the beginning of the monolithic web development, which facilitates

43
00:03:07,828 --> 00:03:11,088
the creation of dynamic websites.

44
00:03:11,284 --> 00:03:15,464
These websites uses database queries to provide unique

45
00:03:15,512 --> 00:03:18,984
content for different users, and as a consequence

46
00:03:19,032 --> 00:03:22,776
of this, the previous models of static sites

47
00:03:22,888 --> 00:03:26,370
began to fade. Now,

48
00:03:27,380 --> 00:03:30,876
let's discuss why to choose CMS.

49
00:03:30,988 --> 00:03:34,930
What is this important? And basically

50
00:03:35,620 --> 00:03:38,984
it's because it allows non technical

51
00:03:39,052 --> 00:03:43,110
people like content creators, to manage their content

52
00:03:43,480 --> 00:03:46,100
without advanced technical skills.

53
00:03:46,520 --> 00:03:50,164
So CMS allow the control for both the

54
00:03:50,202 --> 00:03:54,324
appearance and the content from a

55
00:03:54,362 --> 00:03:57,530
panel that is easily accessible to everyone.

56
00:03:58,300 --> 00:04:02,092
For example, let's imagine that you are food

57
00:04:02,146 --> 00:04:06,030
blogger amateur, and you want to share your experience with the world.

58
00:04:06,560 --> 00:04:10,044
So in the beginning of the web you would have needed

59
00:04:10,162 --> 00:04:13,892
extensive HTML or CMS knowledge

60
00:04:14,056 --> 00:04:18,130
or hire a developer if you want to

61
00:04:18,500 --> 00:04:22,272
build your website. But just

62
00:04:22,326 --> 00:04:26,344
with the help of a CMS, you can create, design and publish

63
00:04:26,412 --> 00:04:29,220
your website just with a few clicks,

64
00:04:30,040 --> 00:04:33,616
this level of accessibility has opened

65
00:04:33,648 --> 00:04:35,860
up the web to a broader audience.

66
00:04:36,600 --> 00:04:39,992
Now anyone with a passion and something

67
00:04:40,046 --> 00:04:43,610
to share can create their online platform.

68
00:04:44,540 --> 00:04:48,184
And this democratization of the web has led to a

69
00:04:48,222 --> 00:04:51,290
richer and more diverse online world.

70
00:04:53,040 --> 00:04:56,556
The mobile web came up and there was a

71
00:04:56,578 --> 00:04:59,944
new paradigm. And the monolithic CMS

72
00:05:00,072 --> 00:05:04,288
wasn't suited for serving content to diverse access

73
00:05:04,374 --> 00:05:07,936
device, often requiring different version of

74
00:05:07,958 --> 00:05:11,452
the website, typically simplified for mobile

75
00:05:11,516 --> 00:05:15,810
users. Some devices and

76
00:05:16,440 --> 00:05:19,584
IoT and devices such as Mars phones,

77
00:05:19,632 --> 00:05:24,052
gaming consoles or voice assistants like Alexa just

78
00:05:24,106 --> 00:05:27,780
further complicated this problem. The need

79
00:05:27,850 --> 00:05:31,668
for an omnichannel delivery became

80
00:05:31,764 --> 00:05:35,092
so evident. So now Disney

81
00:05:35,156 --> 00:05:38,440
concept has emerged, the headless CMS.

82
00:05:39,420 --> 00:05:43,752
And this is basically the separation, the backend

83
00:05:43,896 --> 00:05:47,676
from the dont end and what

84
00:05:47,698 --> 00:05:51,032
it's going to be new here. We are going to consume

85
00:05:51,176 --> 00:05:55,116
the content through an API. So this is very important

86
00:05:55,218 --> 00:05:59,024
because the backend is going to provide all

87
00:05:59,062 --> 00:06:03,040
the data through an API and can be accessed

88
00:06:03,380 --> 00:06:07,044
by any device. So it would be

89
00:06:07,082 --> 00:06:10,784
available for a smartwatch, a gaming

90
00:06:10,832 --> 00:06:13,620
console or even IoT devices.

91
00:06:16,200 --> 00:06:19,672
Also, it's important to highlight that

92
00:06:19,726 --> 00:06:23,540
this headless is not tied to a specific framework.

93
00:06:23,620 --> 00:06:27,380
So we can use our preferred framework

94
00:06:27,460 --> 00:06:30,696
like React or VOO to develop

95
00:06:30,798 --> 00:06:32,460
our user interface.

96
00:06:34,160 --> 00:06:37,150
Now what a headless CMS look like.

97
00:06:37,760 --> 00:06:41,580
So if we see it from a non technical perspective,

98
00:06:42,560 --> 00:06:45,680
for example our web visitor,

99
00:06:46,020 --> 00:06:49,632
we can see that there's not going to be a perceived difference.

100
00:06:49,766 --> 00:06:53,004
The traditional cms and the headless cms

101
00:06:53,132 --> 00:06:55,330
are going to look like the same.

102
00:06:56,120 --> 00:06:59,392
But if we see it from a technical

103
00:06:59,456 --> 00:07:03,584
user perspective, the main difference is that we're going to consume

104
00:07:03,632 --> 00:07:07,236
the content from an API. And this is the

105
00:07:07,258 --> 00:07:10,840
main difference that we are going to consume

106
00:07:11,260 --> 00:07:14,564
as a service. Now a new term

107
00:07:14,612 --> 00:07:18,856
has emerged and this is Jamstack, and it doesn't refer to

108
00:07:18,878 --> 00:07:22,060
a specific set of technologies.

109
00:07:22,400 --> 00:07:26,540
This is more definition set,

110
00:07:26,610 --> 00:07:30,796
an attempt to give a name to a set of widely used

111
00:07:30,898 --> 00:07:34,316
architectural practices. So let's

112
00:07:34,348 --> 00:07:37,730
zoom it out and see what exactly it is.

113
00:07:39,300 --> 00:07:42,992
So this is basically what Jamstack means.

114
00:07:43,126 --> 00:07:47,012
The J stands for Javascript, which is going

115
00:07:47,066 --> 00:07:51,396
to be our preferred language because it's front end oriented and

116
00:07:51,498 --> 00:07:55,092
we're going to be allowed it to use our

117
00:07:55,146 --> 00:07:58,016
preferred framework such as react,

118
00:07:58,208 --> 00:08:01,080
SBLD, angular or VuE,

119
00:08:01,580 --> 00:08:04,708
and the a stand for APIs,

120
00:08:04,884 --> 00:08:08,024
which is the way that we are going to consume our services.

121
00:08:08,142 --> 00:08:12,152
And here we can find some services as of

122
00:08:12,206 --> 00:08:15,432
zero cloudinary stripe or

123
00:08:15,486 --> 00:08:18,620
WordPress. And you will see that WordPress is

124
00:08:18,690 --> 00:08:22,588
just one of our services that

125
00:08:22,754 --> 00:08:26,064
we can consume. And finally we have

126
00:08:26,102 --> 00:08:30,000
the m that stands for the static size

127
00:08:30,070 --> 00:08:34,524
generators that will assist us in the prebuilding

128
00:08:34,572 --> 00:08:38,340
of our web page on markup.

129
00:08:39,080 --> 00:08:42,724
And maybe the most important thing here is that for

130
00:08:42,762 --> 00:08:46,288
a long time all the efforts were focused on the backend.

131
00:08:46,384 --> 00:08:50,376
But we have what we have now. It's a modular stack on

132
00:08:50,398 --> 00:08:53,448
the client side. This means that

133
00:08:53,534 --> 00:08:57,496
we're moving away from being monolithic to create an

134
00:08:57,518 --> 00:09:00,920
architecture based more on microservices.

135
00:09:02,480 --> 00:09:06,168
So now this image can give us a picture

136
00:09:06,344 --> 00:09:10,588
of what Jamstack ecosystem is

137
00:09:10,754 --> 00:09:13,952
and all the services and products

138
00:09:14,006 --> 00:09:17,056
that we have available. So as you

139
00:09:17,078 --> 00:09:21,250
can see, we have many tools to develop

140
00:09:22,660 --> 00:09:27,012
our applications. And finally I

141
00:09:27,066 --> 00:09:30,484
want to share some resources with

142
00:09:30,522 --> 00:09:35,040
you if you are starting with this approach

143
00:09:35,200 --> 00:09:38,532
of building application, which is pretty interesting.

144
00:09:38,666 --> 00:09:42,680
And the first one that I want to show you is this of

145
00:09:42,750 --> 00:09:46,168
bursell that we have here. If you go

146
00:09:46,174 --> 00:09:49,288
to Versaille and you go to the template section, you're going

147
00:09:49,294 --> 00:09:51,320
to find a lot of templates.

148
00:09:51,920 --> 00:09:55,788
And let's check for example here. If we

149
00:09:55,954 --> 00:09:59,644
select here CMS and then we

150
00:09:59,682 --> 00:10:03,388
have many examples of website, I'm going to choose this one.

151
00:10:03,554 --> 00:10:07,776
And the first thing that you're going to see here is that you

152
00:10:07,798 --> 00:10:11,456
can see the online demo here which is deployed now

153
00:10:11,558 --> 00:10:16,000
in Bercel. And you can go to the repository

154
00:10:16,360 --> 00:10:19,684
which is incredible because you can download this

155
00:10:19,722 --> 00:10:23,652
code, you can run it locally and start

156
00:10:23,706 --> 00:10:27,412
to analyze the code. I'm one of the person

157
00:10:27,466 --> 00:10:30,872
that thinks that one of the better ways to learn

158
00:10:31,006 --> 00:10:34,810
is reading others people's code and

159
00:10:35,980 --> 00:10:39,656
this is just incredible. And the next resource is the

160
00:10:39,678 --> 00:10:43,500
next JS application is the next JS page in the

161
00:10:43,570 --> 00:10:47,004
section of learn. And as you know,

162
00:10:47,042 --> 00:10:50,536
NextJs is considered the react

163
00:10:50,648 --> 00:10:55,040
framework and it's powered by Bursell and

164
00:10:55,110 --> 00:10:59,488
you're going to find a lot of resources here. The first one is this course

165
00:10:59,654 --> 00:11:02,864
about next JS which

166
00:11:02,902 --> 00:11:07,140
is 16 chapters. And you can learn all about Netjs.

167
00:11:07,480 --> 00:11:11,316
And you're also going to find this react foundation course

168
00:11:11,418 --> 00:11:15,190
if you need it. But what I want to show you

169
00:11:15,560 --> 00:11:19,656
also is those resources down here

170
00:11:19,838 --> 00:11:22,936
that for example they have building e

171
00:11:22,958 --> 00:11:26,760
commerce sites with next JS and Shopify. This one is with

172
00:11:26,830 --> 00:11:29,636
headless WordPress and net JS.

173
00:11:29,828 --> 00:11:35,624
And all those things are following this

174
00:11:35,662 --> 00:11:37,320
jam architecture.

175
00:11:38,860 --> 00:11:42,410
Okay, so that was all and

176
00:11:42,780 --> 00:11:46,464
I hope you have enjoyed this talk and I

177
00:11:46,502 --> 00:11:47,950
see you for the next time.

