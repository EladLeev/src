1
00:00:20,570 --> 00:00:23,854
During the presentation, I will talk about using Go for

2
00:00:23,892 --> 00:00:27,414
automation and ad advertise Goyek. Goyek is

3
00:00:27,452 --> 00:00:31,522
used to create build automation in Go as opposed to many other tools.

4
00:00:31,586 --> 00:00:35,282
Goyek is just a go library with API inspired

5
00:00:35,346 --> 00:00:38,810
by testing Cobra flag HTTP packages.

6
00:00:39,470 --> 00:00:43,290
However, I really think that my presentation will be interesting

7
00:00:43,440 --> 00:00:46,742
even for those not interested in yet another automation

8
00:00:46,806 --> 00:00:50,554
tool. Here is the agenda. First, I will tell a few words about

9
00:00:50,592 --> 00:00:54,906
automation. They will demonstrate free tools that can be used for automating.

10
00:00:55,018 --> 00:00:58,590
In the end, I'm going to share with you my subjective conclusions.

11
00:00:58,930 --> 00:01:02,254
During development, you format code, run unit tests, generate code,

12
00:01:02,292 --> 00:01:05,618
deploy, et cetera. You want to have these things automated for sake of

13
00:01:05,624 --> 00:01:09,310
continuous integration, continuous deployment, basically automating

14
00:01:09,390 --> 00:01:12,718
your daily routine stuff for the sake

15
00:01:12,734 --> 00:01:16,466
of this presentation so that I can demonstrate the automation tools.

16
00:01:16,498 --> 00:01:20,054
By example, we will have a

17
00:01:20,092 --> 00:01:24,150
simple build workflow for a Go repository.

18
00:01:24,890 --> 00:01:28,078
We'll have an all target

19
00:01:28,194 --> 00:01:31,626
which will basically contain the whole build workflow as it

20
00:01:31,648 --> 00:01:35,190
will depend on FMT and test targets.

21
00:01:35,350 --> 00:01:39,274
Then the FMT target will simply run go FMT for

22
00:01:39,312 --> 00:01:42,794
all the packages and this target will be imported

23
00:01:42,842 --> 00:01:45,710
as it can be used by multiple repositories.

24
00:01:46,370 --> 00:01:49,534
Test target will run unit tests and

25
00:01:49,572 --> 00:01:53,990
generate code coverage even if any test fails.

26
00:01:54,170 --> 00:01:58,014
All of the code is hosted on a GitHub repository,

27
00:01:58,142 --> 00:02:01,554
so you can look at it at any time you want.

28
00:02:01,752 --> 00:02:05,702
We will start our journey by looking at make

29
00:02:05,756 --> 00:02:09,522
file is the facto standard for automating builds

30
00:02:09,586 --> 00:02:12,726
in go. Let's look at the

31
00:02:12,748 --> 00:02:15,320
simple build pipeline created in make.

32
00:02:16,570 --> 00:02:19,722
Let's start by running make which

33
00:02:19,776 --> 00:02:22,806
executes the default make target the default

34
00:02:22,838 --> 00:02:26,266
make target prints the usage. Let's run

35
00:02:26,368 --> 00:02:29,786
the old target. As we can see,

36
00:02:29,808 --> 00:02:33,422
it executes the dependencies. It run

37
00:02:33,476 --> 00:02:37,054
FMT and then test which had failed. We see

38
00:02:37,092 --> 00:02:43,954
that the go test had failed, but still the

39
00:02:43,992 --> 00:02:47,762
HTML code coverage report has been

40
00:02:47,896 --> 00:02:49,460
created here.

41
00:02:51,670 --> 00:02:55,366
Let's look at the make file which contains the definition of

42
00:02:55,388 --> 00:02:56,790
the make targets.

43
00:03:00,730 --> 00:03:04,838
The first line is a declaration that

44
00:03:04,924 --> 00:03:08,794
the common make file should be included. We'll look

45
00:03:08,832 --> 00:03:12,300
into that a little bit later. We have the

46
00:03:12,910 --> 00:03:16,314
all target which is the build pipeline which depends on the

47
00:03:16,352 --> 00:03:20,226
FMT and test targets. Here's the definition

48
00:03:20,278 --> 00:03:24,350
of the test target. It's a script,

49
00:03:24,850 --> 00:03:29,818
a bash script, which first declares

50
00:03:29,914 --> 00:03:33,298
a variable exit which is equal to zero in

51
00:03:33,304 --> 00:03:37,202
the beginning. Then it runs go test with code

52
00:03:37,256 --> 00:03:41,406
coverage, and if it fails, it assigns

53
00:03:41,518 --> 00:03:45,394
to the exit its exit

54
00:03:45,442 --> 00:03:51,718
code so that the

55
00:03:51,724 --> 00:03:55,286
HTML coverage report can be generate later and finally

56
00:03:55,388 --> 00:03:59,180
exits with the code assigned here

57
00:03:59,630 --> 00:04:03,210
or with zero if the go test had passed.

58
00:04:06,030 --> 00:04:10,586
Now let's look at the command at

59
00:04:10,608 --> 00:04:13,950
the go mk file.

60
00:04:14,450 --> 00:04:22,926
We are setting that the default shell is bash, so it

61
00:04:22,948 --> 00:04:26,162
is more probable that it will work on other creating systems. For example,

62
00:04:26,216 --> 00:04:29,678
macOS zsh is often the default shell.

63
00:04:29,854 --> 00:04:33,746
We are setting the default goal which is the default target as

64
00:04:33,768 --> 00:04:37,830
help. And help is a magic target

65
00:04:39,370 --> 00:04:43,778
which basically prints

66
00:04:43,794 --> 00:04:47,286
the usage based on the comments which

67
00:04:47,308 --> 00:04:50,634
are added to the targets. The comments needs to

68
00:04:50,672 --> 00:04:53,914
be defined as the

69
00:04:53,952 --> 00:04:57,622
double bash characters. We have a reusable

70
00:04:57,686 --> 00:05:01,038
print target function which says which function

71
00:05:01,124 --> 00:05:05,850
is executed and then we are having some reusable

72
00:05:06,010 --> 00:05:09,822
targets. And here we have the definition of the FMT target which

73
00:05:09,876 --> 00:05:11,950
executes go FMT.

74
00:05:19,030 --> 00:05:21,940
What are the challenges when using make?

75
00:05:23,350 --> 00:05:27,310
Writing complex logic is hard for anything more complex.

76
00:05:27,390 --> 00:05:30,662
I always need to look at docs, I need to look up at some

77
00:05:30,716 --> 00:05:34,454
recipes, look at some make targets which I already was

78
00:05:34,492 --> 00:05:38,454
using, or I need to use stack overflow or basically Google

79
00:05:38,572 --> 00:05:41,398
some stuff. Also,

80
00:05:41,484 --> 00:05:45,194
I do not like the bugging bash nor make which is often like

81
00:05:45,232 --> 00:05:46,890
print into the console.

82
00:05:48,910 --> 00:05:52,550
At last. It's not easy to create automation in bash at make

83
00:05:52,640 --> 00:05:56,430
that works on Linux, macOS and

84
00:05:56,500 --> 00:05:57,310
Windows.

85
00:06:00,370 --> 00:06:03,714
When I was starting to learn Go, I heard that some

86
00:06:03,752 --> 00:06:07,426
sres prefer writing go apps instead of bash scripts for

87
00:06:07,448 --> 00:06:11,730
compatibility, maintainability and reusability reasons.

88
00:06:12,390 --> 00:06:15,750
Most Go programs using the standard library work

89
00:06:15,820 --> 00:06:19,110
perfectly on all supported operating systems.

90
00:06:19,850 --> 00:06:23,074
Moreover, I prefer debugging go programs rather than bash

91
00:06:23,122 --> 00:06:26,454
scripts or make targets in other language. It is

92
00:06:26,492 --> 00:06:29,754
quite popular to use its own ecosystem for

93
00:06:29,792 --> 00:06:34,006
automation. As far as I know, everything started with rabbi's

94
00:06:34,038 --> 00:06:38,038
rake, but now Java has gradle, net has nuke,

95
00:06:38,134 --> 00:06:41,754
etc. Therefore, I wanted to explore the possibility

96
00:06:41,882 --> 00:06:44,480
of creating build pipelines in Go.

97
00:06:46,850 --> 00:06:49,978
The first thing which I found was mage.

98
00:06:50,154 --> 00:06:54,082
Mage is a makerake like tool using go.

99
00:06:54,216 --> 00:06:58,034
You write plain old goat functions and mage is automatically using

100
00:06:58,072 --> 00:07:01,170
them as make file write runnable targets.

101
00:07:03,510 --> 00:07:07,014
It's time to look at mage. Let's run it by

102
00:07:07,052 --> 00:07:11,894
executing go run mage go as

103
00:07:11,932 --> 00:07:14,630
previously for make we see the usage.

104
00:07:15,450 --> 00:07:17,590
Let's run the old target.

105
00:07:23,270 --> 00:07:27,598
As previously, we can see that the test has been executed,

106
00:07:27,774 --> 00:07:31,666
have been executed, and we have the HTML report

107
00:07:31,848 --> 00:07:32,930
generated.

108
00:07:35,350 --> 00:07:39,640
However, we have no information what test had failed and we have no information

109
00:07:40,010 --> 00:07:43,974
what target had failed. Therefore we

110
00:07:44,012 --> 00:07:46,890
need to run mage inverbose mode.

111
00:07:51,470 --> 00:07:55,900
Now the output is similar to make file to make

112
00:07:57,390 --> 00:08:00,666
let's look at mage go which we are

113
00:08:00,688 --> 00:08:02,140
running using go run.

114
00:08:05,170 --> 00:08:10,930
It's just a wrapper script on mage main which

115
00:08:11,000 --> 00:08:14,962
executes mage. There are two ways

116
00:08:15,016 --> 00:08:18,542
of using or executing mage.

117
00:08:18,606 --> 00:08:22,286
One is using this wrapper mage go

118
00:08:22,408 --> 00:08:26,358
file. The benefit of it is that thanks to

119
00:08:26,364 --> 00:08:27,830
the Go modules,

120
00:08:29,690 --> 00:08:33,366
we'll make sure that all developers are using the

121
00:08:33,388 --> 00:08:37,178
same version of mage. The other way is to install

122
00:08:37,264 --> 00:08:39,100
the mage CLA app.

123
00:08:42,590 --> 00:08:47,262
Mage works magically by

124
00:08:47,396 --> 00:08:50,746
finding the targets defined in mage

125
00:08:50,778 --> 00:08:55,182
files which are required to use to

126
00:08:55,236 --> 00:08:58,842
have the mage go build tags.

127
00:08:58,986 --> 00:09:02,610
So these two lines are required. Then we have

128
00:09:02,680 --> 00:09:06,146
regular go code. We have no regular imports, and here we have

129
00:09:06,168 --> 00:09:09,694
the magical mage import which basically includes

130
00:09:09,742 --> 00:09:13,478
all the mage targets defined in demo common

131
00:09:13,564 --> 00:09:16,840
package which we will look at later.

132
00:09:19,450 --> 00:09:22,950
Here is the definition of the all target.

133
00:09:23,450 --> 00:09:26,774
The targets are defined as an export as exported

134
00:09:26,822 --> 00:09:30,060
functions. In Mage we have an information

135
00:09:30,590 --> 00:09:34,314
that we are depending on the

136
00:09:34,352 --> 00:09:38,320
FMT target from the command package and on test

137
00:09:39,170 --> 00:09:42,970
target from this package. This is the definition

138
00:09:43,050 --> 00:09:47,390
of the test target. It returns an error because it can fail.

139
00:09:48,210 --> 00:09:51,490
We are using the sh package

140
00:09:51,830 --> 00:09:56,194
provided by mage here and

141
00:09:56,232 --> 00:10:00,258
it executes go test and go tool cover to

142
00:10:00,344 --> 00:10:03,586
run tests and execute test coverage. We are

143
00:10:03,608 --> 00:10:07,206
using errors joined from the Gostanta library to make sure to return an

144
00:10:07,228 --> 00:10:10,710
error if any of those two execution failed.

145
00:10:13,370 --> 00:10:16,950
Here is the definition of the common build targets.

146
00:10:17,110 --> 00:10:20,950
This is a simple definition

147
00:10:21,110 --> 00:10:24,794
of FMT target. Let me

148
00:10:24,832 --> 00:10:28,462
share with you the issues that I have with mage. For me,

149
00:10:28,516 --> 00:10:32,266
mage is too magical. The target

150
00:10:32,458 --> 00:10:36,542
discovery requires the magical build tags and because

151
00:10:36,596 --> 00:10:39,986
of that you often lose the intellisense in

152
00:10:40,008 --> 00:10:44,254
your id like vs code or goend. It's also recording

153
00:10:44,302 --> 00:10:48,334
the magical import commands which you need to add before importing

154
00:10:48,382 --> 00:10:51,810
the packages which contains the reusable

155
00:10:52,170 --> 00:10:55,734
targets. It also has

156
00:10:55,772 --> 00:10:58,902
some gotchas. Debugging is hard.

157
00:10:59,036 --> 00:11:02,998
Even the author admitted that he is debugging by printing stuff to

158
00:11:03,004 --> 00:11:07,422
the output, like in make concurrency.

159
00:11:07,506 --> 00:11:11,130
Logging is tricky when you're running concurrently many

160
00:11:11,200 --> 00:11:12,170
targets,

161
00:11:14,910 --> 00:11:19,230
the logs are not synchronized, and also without

162
00:11:19,300 --> 00:11:23,374
the verbose mode you do not get a lot of information in

163
00:11:23,412 --> 00:11:26,798
the output and when the

164
00:11:26,884 --> 00:11:30,446
things are failing in no verbose mode you get almost no information.

165
00:11:30,548 --> 00:11:34,130
So as we had seen in the example, we have, for example, no information which

166
00:11:34,200 --> 00:11:37,620
target had failed. At last,

167
00:11:38,390 --> 00:11:42,182
the API surface of the sh package is huge and

168
00:11:42,316 --> 00:11:45,942
I always had trouble which function

169
00:11:45,996 --> 00:11:50,742
I should run. There are functions like run

170
00:11:50,876 --> 00:11:54,626
run, v run with v run with et cetera, et cetera.

171
00:11:54,738 --> 00:11:58,234
And the API is so big that it

172
00:11:58,272 --> 00:12:01,242
makes hard to know which ones should be used.

173
00:12:01,296 --> 00:12:04,666
And even if you know what you should use, then the readability is

174
00:12:04,688 --> 00:12:08,080
a problem. When you read a code

175
00:12:08,770 --> 00:12:10,640
that was written some time ago,

176
00:12:13,570 --> 00:12:17,434
I felt that something was wrong and I could do something easier,

177
00:12:17,482 --> 00:12:20,914
simpler, more idiomatic. It took me one

178
00:12:20,952 --> 00:12:23,570
year to create initial version of Goyek,

179
00:12:24,470 --> 00:12:27,794
so after many long nights I thought that it

180
00:12:27,832 --> 00:12:32,050
should be a library. As libraries tend to be more usable and flexible.

181
00:12:36,170 --> 00:12:39,910
The tasks and targets should look like unit tests.

182
00:12:41,450 --> 00:12:45,414
Registering the targets can be done similar to registering

183
00:12:45,462 --> 00:12:49,414
Cobra commands. Parsing arguments

184
00:12:49,542 --> 00:12:53,782
should be leveraging the flag packages package and extensibility

185
00:12:53,846 --> 00:12:57,450
could be done similar to HTTP middleware's pattern.

186
00:12:58,990 --> 00:13:03,294
Now let me introduce to Goyek, let's run

187
00:13:03,332 --> 00:13:05,600
it by executing Go run build.

188
00:13:06,530 --> 00:13:10,206
As previously, you see the usage of the goyek.

189
00:13:10,318 --> 00:13:14,306
We have the information which tasks are available, but also we have the information

190
00:13:14,488 --> 00:13:18,366
which flags you can use. As usual,

191
00:13:18,558 --> 00:13:20,450
let's run the old target.

192
00:13:26,380 --> 00:13:29,976
When something is failing and you're not running in various mode,

193
00:13:30,008 --> 00:13:33,176
you have the same experience like when using go tests.

194
00:13:33,288 --> 00:13:37,692
So you just got the information that the test task

195
00:13:37,756 --> 00:13:42,560
had failed and you had the output from this one task.

196
00:13:44,260 --> 00:13:47,616
If you want similar experience to the make file, you just

197
00:13:47,638 --> 00:13:51,300
run it in verbose mode like for go test and you have the information

198
00:13:51,450 --> 00:13:53,220
of the whole execution.

199
00:13:57,320 --> 00:14:01,512
Let's look at how everything is defined. The build

200
00:14:01,566 --> 00:14:06,010
pipeline is defined in build folder and the

201
00:14:07,420 --> 00:14:11,544
main function contains an execution of

202
00:14:11,582 --> 00:14:14,830
a convenient boot main function.

203
00:14:16,960 --> 00:14:20,430
The boot package contains, I hope

204
00:14:21,760 --> 00:14:25,544
it's an extension of GOIC main which defines some reusable

205
00:14:25,592 --> 00:14:29,760
flags and configures the flow basically in a convenient way.

206
00:14:29,830 --> 00:14:33,596
So basically it is a set of commonly used middlewares

207
00:14:33,628 --> 00:14:37,360
and flags which are used when you're using

208
00:14:37,510 --> 00:14:39,460
Goyek for a build pipeline.

209
00:14:41,000 --> 00:14:42,790
If we look at all,

210
00:14:44,280 --> 00:14:47,524
it contains the definition of the

211
00:14:47,642 --> 00:14:51,860
all tasks and the definition looks similar

212
00:14:52,010 --> 00:14:56,008
to the definition of a cobra command. So we have a name all,

213
00:14:56,094 --> 00:15:00,184
we have the usage and we have also listed the dependencies of

214
00:15:00,222 --> 00:15:02,570
this task which is FMT and test.

215
00:15:03,840 --> 00:15:07,196
If we look at the test definition, we can

216
00:15:07,218 --> 00:15:11,020
see an action which is similar concept

217
00:15:12,160 --> 00:15:15,676
to a unit test. When you have

218
00:15:15,698 --> 00:15:20,224
the testing t so you here we have the definition of

219
00:15:20,262 --> 00:15:23,984
the task action which executes go

220
00:15:24,022 --> 00:15:27,884
test and go to cover to generate HTML

221
00:15:27,932 --> 00:15:31,124
report. The CMD exec is

222
00:15:31,162 --> 00:15:34,768
a convenient function for running commands

223
00:15:34,864 --> 00:15:38,164
in a shell like way. When you

224
00:15:38,202 --> 00:15:41,880
use CMD exec and test and

225
00:15:41,950 --> 00:15:45,656
the execution will fail, it will mark

226
00:15:45,758 --> 00:15:50,200
the task as failed, but it will continue the execution.

227
00:15:50,940 --> 00:15:52,600
So under the hood,

228
00:15:54,960 --> 00:15:58,460
under the hood it's just logging the execution

229
00:15:58,880 --> 00:16:03,064
and logging and using error

230
00:16:03,192 --> 00:16:05,550
to report a problem.

231
00:16:09,600 --> 00:16:13,568
Reusing reusing task is simple.

232
00:16:13,734 --> 00:16:17,840
We simply have a package demo

233
00:16:17,910 --> 00:16:21,652
task which contains the definition of

234
00:16:21,706 --> 00:16:25,620
an FMT task

235
00:16:26,440 --> 00:16:29,936
which is defined as FMT usage.

236
00:16:29,968 --> 00:16:33,160
Go FMT and is just executing go FMT.

237
00:16:37,260 --> 00:16:40,772
One of the big benefits of using Goyek

238
00:16:40,916 --> 00:16:45,820
is that intellisense is working because

239
00:16:45,890 --> 00:16:49,288
it doesn't use any build tags. Also because it's

240
00:16:49,304 --> 00:16:53,260
a regular go application, you can

241
00:16:53,410 --> 00:16:57,090
easily debug anything. So I can put a breakpoint here,

242
00:16:57,540 --> 00:17:06,810
I can press f five another

243
00:17:06,880 --> 00:17:12,894
breakpoint which I put and we can see that here. Now it

244
00:17:12,932 --> 00:17:16,126
has not failed because it was running fine, but if we

245
00:17:16,148 --> 00:17:19,294
step it's running executing go

246
00:17:19,332 --> 00:17:24,882
test, we need to wait a moment and

247
00:17:24,936 --> 00:17:29,074
now we see that the task is failing. We see that

248
00:17:29,272 --> 00:17:33,090
the value of the failed has changed and

249
00:17:33,160 --> 00:17:36,130
probably if we looked at the output,

250
00:17:36,470 --> 00:17:40,500
I just need to find

251
00:17:41,350 --> 00:17:45,160
it was debug console. Yeah, we received the output here

252
00:17:46,090 --> 00:17:48,070
so we can continue the execution.

253
00:17:49,370 --> 00:17:53,354
So as we can see, we can debug. We have problems and we can use

254
00:17:53,392 --> 00:17:57,370
intellisense during development, which is very convenient.

255
00:18:00,350 --> 00:18:03,726
It was just a teaser. I hope you enjoy it and I encourage you to

256
00:18:03,748 --> 00:18:06,974
check out more because Goyek is more powerful than

257
00:18:07,012 --> 00:18:10,762
just that. You can add middlewares, create reusable,

258
00:18:10,826 --> 00:18:13,562
customizable, build pipelines, customize creating,

259
00:18:13,626 --> 00:18:17,026
integrate with viper and any package, and I encourage you to

260
00:18:17,048 --> 00:18:20,674
check out the repository for documentation and see the

261
00:18:20,712 --> 00:18:25,186
examples. I especially encourage you to look

262
00:18:25,368 --> 00:18:29,110
at how Goyek is dog fooding its

263
00:18:29,180 --> 00:18:32,150
own functionalities for its own build pipeline.

264
00:18:33,370 --> 00:18:36,498
Here there's another quick example of usage.

265
00:18:36,594 --> 00:18:41,626
You can see that in the output you see in

266
00:18:41,648 --> 00:18:45,114
the locks. You can see the file name

267
00:18:45,232 --> 00:18:49,066
and line number and it's very

268
00:18:49,088 --> 00:18:52,106
helpful during debugging. And GOIC is very

269
00:18:52,128 --> 00:18:55,354
useful when you have a little more, little even a little more complex

270
00:18:55,402 --> 00:18:58,458
logics, like if statements for loops,

271
00:18:58,554 --> 00:19:02,606
you can use a helper to mark

272
00:19:02,708 --> 00:19:06,322
some functions as helpers. Then this function

273
00:19:06,376 --> 00:19:10,180
will be not printed when logging and

274
00:19:12,870 --> 00:19:16,446
it's really easy to debug and develop like regular boring

275
00:19:16,478 --> 00:19:19,670
go code. Let me summarize the presentation.

276
00:19:20,650 --> 00:19:25,686
I still use make not

277
00:19:25,708 --> 00:19:29,046
only for Gil repositories, but for non go repositories as

278
00:19:29,068 --> 00:19:32,854
well. For stuff like automating, setup of kubernetes, local clusters,

279
00:19:32,902 --> 00:19:35,930
protobuff validation. Usually for automating simple

280
00:19:36,000 --> 00:19:39,750
things I do not state make is bad, it's just complex,

281
00:19:39,910 --> 00:19:43,102
maybe even some aspects more complex than go.

282
00:19:43,236 --> 00:19:47,310
Moreover, I find doing complex things in make not straightforward.

283
00:19:50,210 --> 00:19:54,206
Regarding mage, the good thing it requires go. It has community,

284
00:19:54,308 --> 00:19:58,034
a lot of stars, and I know a lot of repositories are using it.

285
00:19:58,152 --> 00:20:01,934
But it has gotchas that are annoying me and they're annoying

286
00:20:01,982 --> 00:20:05,154
me so much that personally I was never using it in

287
00:20:05,192 --> 00:20:09,078
production. GoiC also requires go.

288
00:20:09,164 --> 00:20:13,126
It's a library instead of a framework with AK inspired by

289
00:20:13,148 --> 00:20:17,030
popular go packages, and I hope it's more idiomatic.

290
00:20:18,570 --> 00:20:20,550
It's simply yet extensible,

291
00:20:21,370 --> 00:20:25,858
and it works very well with your Ed and I use it in production

292
00:20:25,954 --> 00:20:28,440
and the behavior is similar to go test,

293
00:20:30,970 --> 00:20:33,854
but and if you like it,

294
00:20:34,052 --> 00:20:37,230
make a shout out. Feel free to try it,

295
00:20:37,380 --> 00:20:40,814
and any feedback is more than welcome. Here are

296
00:20:40,852 --> 00:20:44,126
some hyperlinks. Feel me to ask questions.

297
00:20:44,228 --> 00:20:47,694
I'm open to any feedback and thank you very much for your time

298
00:20:47,732 --> 00:20:51,100
and your attention. I hope you enjoyed the talk. Thank you. See you later.

