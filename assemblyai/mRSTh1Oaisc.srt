1
00:00:23,210 --> 00:00:27,114
Hi and welcome to my session about crafting sport activity series

2
00:00:27,162 --> 00:00:29,990
using Nodejs together with OpenAI.

3
00:00:31,610 --> 00:00:35,686
Today we are diving to the journey through the

4
00:00:35,708 --> 00:00:38,790
sport activity suggestion service using OpenAI.

5
00:00:39,210 --> 00:00:43,530
All generation will be based on our indicators.

6
00:00:44,270 --> 00:00:47,450
Let's jump into the lineup and we'll see

7
00:00:47,520 --> 00:00:48,460
what's there.

8
00:00:51,870 --> 00:00:55,578
First of all, we're going to jump into the small introduction, we're going

9
00:00:55,584 --> 00:00:59,546
to talk a little bit about OpenAI. We're going to set up our NodeJs

10
00:00:59,658 --> 00:01:03,646
application. We will check how to connect and how

11
00:01:03,668 --> 00:01:06,422
to do this connection, how to do prompting,

12
00:01:06,506 --> 00:01:10,754
messaging, what's the difference in the role. We will check the

13
00:01:10,952 --> 00:01:14,754
options, the body, how to look

14
00:01:14,792 --> 00:01:19,098
like this connection and how we actually can get those suggestions

15
00:01:19,294 --> 00:01:22,582
from OpenAI. And then

16
00:01:22,636 --> 00:01:26,614
we will crafting up everything together and finally we

17
00:01:26,652 --> 00:01:29,830
do some conclusions and we will discuss

18
00:01:29,900 --> 00:01:33,834
about the possibilities. So as

19
00:01:33,872 --> 00:01:37,434
I said, we are going to build an

20
00:01:37,472 --> 00:01:42,522
application which will be able to send

21
00:01:42,576 --> 00:01:46,430
to us daily sports activities based

22
00:01:46,500 --> 00:01:50,906
on our indicators. So let's

23
00:01:50,938 --> 00:01:54,446
take a look on the schema and in order to better understand

24
00:01:54,548 --> 00:01:58,258
how it's going to work. So the service is designed to provide

25
00:01:58,344 --> 00:02:02,610
users activity based on the indicators and

26
00:02:02,680 --> 00:02:06,370
last activity, it's like a circle of the data.

27
00:02:06,520 --> 00:02:10,098
You accomplished activity, next time asking

28
00:02:10,184 --> 00:02:13,106
for a new one AI analyze it.

29
00:02:13,288 --> 00:02:17,314
Your data and service sends to client the results

30
00:02:17,362 --> 00:02:20,946
with new sport activity with plan how to do

31
00:02:20,988 --> 00:02:25,574
that? Okay, so there is a variation

32
00:02:25,622 --> 00:02:29,046
of sport activities. To refine the AI suggestions

33
00:02:29,158 --> 00:02:33,494
for users, we will compile an extensive list

34
00:02:33,552 --> 00:02:37,086
of variation of sport activities. This list will

35
00:02:37,108 --> 00:02:40,720
be provided to OpenAI API in message.

36
00:02:41,090 --> 00:02:44,718
The AI will leverage this information and will take

37
00:02:44,804 --> 00:02:49,890
from the list the activity what

38
00:02:50,040 --> 00:02:54,062
feeds based on indicators and last activity.

39
00:02:54,206 --> 00:02:58,210
So literally you get the last

40
00:02:58,280 --> 00:03:01,558
activity, you have your indicators and

41
00:03:01,644 --> 00:03:04,280
you get the suggestion based on that information.

42
00:03:04,970 --> 00:03:07,910
So as I said,

43
00:03:07,980 --> 00:03:11,946
we're going to use an OpenAI. By utilizing OpenAI technology we

44
00:03:11,968 --> 00:03:17,078
can access powerful analytics tool that examine

45
00:03:17,174 --> 00:03:20,182
user input such as a lifestyle,

46
00:03:20,326 --> 00:03:24,182
height, weight to generate custom tailored

47
00:03:24,246 --> 00:03:27,566
activity plans specifically for the user. The benefit of

48
00:03:27,588 --> 00:03:31,482
using OpenAI in our case lies in the sophisticated

49
00:03:31,546 --> 00:03:35,914
algorithms which can be trained. As we want to

50
00:03:35,972 --> 00:03:39,506
start to building our service, we should first define the

51
00:03:39,528 --> 00:03:43,218
scope of activities and use data point

52
00:03:43,384 --> 00:03:46,900
that are relevant to our application.

53
00:03:47,270 --> 00:03:50,242
So we going to use,

54
00:03:50,296 --> 00:03:54,082
as I say before, nodejs. We have to accomplish that connection.

55
00:03:54,146 --> 00:03:57,782
So that's what we plan to do. To employ Nodejs in

56
00:03:57,836 --> 00:04:03,802
conjunction with Expressgs which

57
00:04:03,856 --> 00:04:07,754
will weve as a web application framework to

58
00:04:07,792 --> 00:04:11,270
manage routing controllers, modeling and communication

59
00:04:11,430 --> 00:04:15,394
database. We're going to use nextgs.

60
00:04:15,542 --> 00:04:19,262
So before to jump into the code to check it out.

61
00:04:19,316 --> 00:04:22,526
How we going to deal with all of the stuff? We have to set up

62
00:04:22,548 --> 00:04:26,482
our OpenAI account.

63
00:04:26,616 --> 00:04:29,458
For that you have to go to OpenAI.com,

64
00:04:29,544 --> 00:04:33,458
create your organization in order to obtain the

65
00:04:33,624 --> 00:04:37,810
API key. So there is going to be an API

66
00:04:38,410 --> 00:04:42,258
account where you can set up all of this stuff and then finally you're

67
00:04:42,274 --> 00:04:46,630
going to get your open

68
00:04:46,780 --> 00:04:49,974
API key, right. So in this

69
00:04:50,012 --> 00:04:53,846
case weve going to dive into the setup node

70
00:04:53,878 --> 00:04:57,786
JS service itself and for

71
00:04:57,808 --> 00:05:01,194
that in my

72
00:05:01,232 --> 00:05:06,140
case I'm just using the create node JS application and

73
00:05:06,510 --> 00:05:11,342
I'm going to use the framework Express. This will

74
00:05:11,396 --> 00:05:15,066
generate for me necessary files to build my node JS

75
00:05:15,098 --> 00:05:18,290
service. So let's take a look on the schema.

76
00:05:18,710 --> 00:05:21,940
How exactly going to look like our application.

77
00:05:22,470 --> 00:05:25,970
Well so our source of

78
00:05:26,120 --> 00:05:29,842
data going to be on postgres. We're going to set the user

79
00:05:29,906 --> 00:05:33,846
indicators and activities. Activities is like a history

80
00:05:33,948 --> 00:05:37,986
of the list of activities of user.

81
00:05:38,098 --> 00:05:41,618
Also indicators have to belongs to the user

82
00:05:41,794 --> 00:05:45,786
in order to get this request to bouncegres we're going to use the

83
00:05:45,968 --> 00:05:50,474
next JS but

84
00:05:50,672 --> 00:05:55,454
in front of all of this we're going to use the exprs JS which

85
00:05:55,492 --> 00:06:00,890
is going to as I say before handle our routing responses

86
00:06:01,050 --> 00:06:05,600
and to generation of data.

87
00:06:05,970 --> 00:06:09,638
We're going to use OpenAI to handle

88
00:06:09,754 --> 00:06:12,798
session of the user. We're going to use redis.

89
00:06:12,974 --> 00:06:16,834
We're not going to focus so much for that because this is not topic about

90
00:06:16,872 --> 00:06:19,880
this. We're going just a little bit touch that part.

91
00:06:20,650 --> 00:06:23,798
But first of all before we

92
00:06:23,884 --> 00:06:27,062
generate in order to

93
00:06:27,116 --> 00:06:31,054
install everything, let's take a look. What's the stack of dependency

94
00:06:31,122 --> 00:06:34,746
we're going to have in our package JSon. There's going to

95
00:06:34,768 --> 00:06:39,830
be as I say next postgres

96
00:06:39,910 --> 00:06:43,334
Regis what we're going to use in my case I'm using a validator,

97
00:06:43,462 --> 00:06:46,990
just validate login user and sign up.

98
00:06:47,060 --> 00:06:50,814
But this is the COVID of the authentication part but

99
00:06:50,932 --> 00:06:54,634
which is very important. We are going to use the OpenAI package

100
00:06:54,762 --> 00:06:57,954
nodejs. You have to just install it and we

101
00:06:57,992 --> 00:07:01,842
can start using it. Right. So you can see this over

102
00:07:01,896 --> 00:07:04,626
here. This is version four for now.

103
00:07:04,728 --> 00:07:09,926
And now we

104
00:07:09,948 --> 00:07:13,826
have to create an Env file and this is the stack

105
00:07:13,858 --> 00:07:17,382
of my

106
00:07:17,516 --> 00:07:21,334
variables. And as you can see here that I'm

107
00:07:21,382 --> 00:07:24,874
using open API key over here.

108
00:07:25,072 --> 00:07:28,682
And that open API key will be

109
00:07:28,736 --> 00:07:33,886
provided to the combination of open

110
00:07:33,988 --> 00:07:37,440
AI package. Well now

111
00:07:38,130 --> 00:07:41,534
how the structure of this application has to look

112
00:07:41,572 --> 00:07:44,638
like we have a user which has

113
00:07:44,804 --> 00:07:48,890
as I said indicators and activities based

114
00:07:48,980 --> 00:07:53,410
on those indicators which is weight,

115
00:07:54,070 --> 00:07:59,286
height, lifestyle and

116
00:07:59,468 --> 00:08:03,286
last activities. What been accomplished last activity. It can

117
00:08:03,308 --> 00:08:07,414
be running on a distance and

118
00:08:07,452 --> 00:08:11,194
stuff like that. Based on this information. We have to

119
00:08:11,232 --> 00:08:15,450
provide this information to OpenAI.

120
00:08:15,950 --> 00:08:19,194
OpenAI will generate that information to us and

121
00:08:19,312 --> 00:08:22,586
that's how we're going to get a new sport activity for today.

122
00:08:22,688 --> 00:08:26,462
It's actually not specifically for today because route will

123
00:08:26,516 --> 00:08:30,030
allow us to generate

124
00:08:30,370 --> 00:08:33,854
the data. Depends when we want it.

125
00:08:33,892 --> 00:08:37,314
It depends of the client. Like I want this daily or

126
00:08:37,352 --> 00:08:40,770
I can just get this by weeks or by month.

127
00:08:40,920 --> 00:08:44,526
But anyway we're always going to look on the indicators

128
00:08:44,558 --> 00:08:48,226
and activities. But how are we going to

129
00:08:48,248 --> 00:08:52,482
do this? The whole flow on the request, right. So request

130
00:08:52,546 --> 00:08:56,034
for the sport activity of course will go through the identification

131
00:08:56,162 --> 00:09:00,102
plus Regis, Regis will help to us with

132
00:09:00,156 --> 00:09:04,300
cache. Then we're going to get user from

133
00:09:04,830 --> 00:09:08,442
where we can get the last activity together

134
00:09:08,496 --> 00:09:12,490
with indicators. Then we will build based on

135
00:09:12,560 --> 00:09:16,254
this data information a prompt. That prompt will

136
00:09:16,292 --> 00:09:19,710
go to the request to open API.

137
00:09:21,010 --> 00:09:24,446
OpenAI API. And then that's how

138
00:09:24,468 --> 00:09:28,290
we're going to get the response with result of

139
00:09:28,440 --> 00:09:31,922
sport activity before to dive into

140
00:09:31,976 --> 00:09:36,094
this stuff, how we're going to generate

141
00:09:36,142 --> 00:09:39,734
our prompt. Let's briefly take a look on the next setup how I

142
00:09:39,772 --> 00:09:45,346
built it. So this is the connection to database

143
00:09:45,538 --> 00:09:49,446
with different environments. So that's how we can get

144
00:09:49,628 --> 00:09:53,370
our data from Db and here

145
00:09:53,520 --> 00:09:57,194
by migrations files. From next we can

146
00:09:57,232 --> 00:10:00,230
see how structured our tables.

147
00:10:00,390 --> 00:10:03,818
In our case we're going just to have very simple user which going to

148
00:10:03,824 --> 00:10:06,986
have first name, last name with a username and email. We just

149
00:10:07,008 --> 00:10:10,798
need this for sign up. So because that's service

150
00:10:10,884 --> 00:10:14,574
application going to have that users and that user going

151
00:10:14,612 --> 00:10:18,180
to have each of them going to have indicators. It's just one

152
00:10:19,030 --> 00:10:22,226
row in the table for belongs to the user. Where we're going

153
00:10:22,248 --> 00:10:24,942
to store our age, weight, height,

154
00:10:25,006 --> 00:10:28,622
lifestyle. And based

155
00:10:28,696 --> 00:10:31,890
on this information we're going to do those generations.

156
00:10:32,050 --> 00:10:35,446
So here also weve going

157
00:10:35,468 --> 00:10:39,462
to store as I say as a history of the

158
00:10:39,516 --> 00:10:43,560
activities of the user. Here you can see how

159
00:10:44,810 --> 00:10:48,170
was the data we're going to use. That's going to be activity type.

160
00:10:48,320 --> 00:10:52,150
The activity type is actually list of activities.

161
00:10:52,230 --> 00:10:55,854
This is the constant of the list of

162
00:10:55,892 --> 00:10:59,920
activities and duration which

163
00:11:01,410 --> 00:11:05,850
has to be duration of

164
00:11:06,020 --> 00:11:09,634
how long that activity have been accomplished during

165
00:11:09,752 --> 00:11:15,666
which time in

166
00:11:15,688 --> 00:11:19,430
order to start build our service we going to use

167
00:11:19,580 --> 00:11:22,950
some base abstract model which

168
00:11:23,020 --> 00:11:26,726
going to deal for us in

169
00:11:26,748 --> 00:11:30,134
order to request data from database. So this is

170
00:11:30,172 --> 00:11:33,802
the base model and based it on

171
00:11:33,856 --> 00:11:37,690
a base model. We're going to build our nodejs

172
00:11:38,030 --> 00:11:42,042
for indicators for user and for

173
00:11:42,176 --> 00:11:44,974
activities. So user model,

174
00:11:45,172 --> 00:11:49,118
extending the base model and we

175
00:11:49,204 --> 00:11:52,750
have to assign the table name which is users.

176
00:11:53,250 --> 00:11:57,090
And from against that table we're going

177
00:11:57,160 --> 00:12:00,834
to be able to create user find by email or find by

178
00:12:00,872 --> 00:12:04,558
username. So that part we will simplify

179
00:12:04,654 --> 00:12:08,020
in order just to reuse those models across our

180
00:12:08,410 --> 00:12:12,294
controllers. So the

181
00:12:12,332 --> 00:12:15,958
same approach with indicator model

182
00:12:16,124 --> 00:12:21,270
when we able to find all indicators

183
00:12:22,570 --> 00:12:26,390
by user id or updating by user id.

184
00:12:26,460 --> 00:12:30,322
So all of this methods is actually leveraging

185
00:12:30,386 --> 00:12:34,238
these indicators through this model.

186
00:12:34,404 --> 00:12:38,574
And we can deal like that with

187
00:12:38,612 --> 00:12:42,254
database. So activity model, absolutely the same. We just

188
00:12:42,292 --> 00:12:47,760
have to find the activity by

189
00:12:48,390 --> 00:12:50,770
using this method.

190
00:12:53,430 --> 00:12:57,422
Now slowly we can arrive to the initial

191
00:12:57,486 --> 00:13:00,758
point where

192
00:13:00,844 --> 00:13:04,790
our application is starting. So very easy one,

193
00:13:04,860 --> 00:13:09,430
we just going to start our application, we identify the router

194
00:13:10,250 --> 00:13:13,354
and we do this connection to

195
00:13:13,392 --> 00:13:18,534
radius. And literally that's it. So let's

196
00:13:18,582 --> 00:13:22,070
briefly take a look on the radius. It's just a plain setup.

197
00:13:22,150 --> 00:13:25,454
We have to create a client. We do this

198
00:13:25,492 --> 00:13:28,526
connection to radius using our

199
00:13:28,628 --> 00:13:32,186
env variables and I'm just reuse

200
00:13:32,218 --> 00:13:35,926
that and I create the class for radius

201
00:13:35,978 --> 00:13:41,330
in order just to simplify the communications request

202
00:13:41,670 --> 00:13:45,442
to radius in order for example to set session or get

203
00:13:45,496 --> 00:13:50,382
session or delete session. Right. And middleware

204
00:13:50,446 --> 00:13:54,366
actually looks also pretty straightforward.

205
00:13:54,478 --> 00:13:57,974
There is nothing specific

206
00:13:58,092 --> 00:14:03,014
ones like we have jot tokens and

207
00:14:03,052 --> 00:14:06,534
we have a secret and that's how we deal

208
00:14:06,572 --> 00:14:10,266
with middleware. So that means like when

209
00:14:10,288 --> 00:14:14,262
we using for example postman we have to provide the

210
00:14:14,416 --> 00:14:18,170
first of all we have to sign up. Then we're going to get the token,

211
00:14:18,250 --> 00:14:21,840
we have to use bearer token and

212
00:14:23,090 --> 00:14:27,838
then we can start using our endpoints

213
00:14:28,014 --> 00:14:31,780
in order to get our suggests from

214
00:14:32,310 --> 00:14:35,890
AI. Here are the list of routes.

215
00:14:36,470 --> 00:14:40,830
So as I said, we deal with authentication

216
00:14:40,910 --> 00:14:45,400
router and we're using the out middle bar where

217
00:14:45,850 --> 00:14:49,062
we have all of these checks in order to provide

218
00:14:49,116 --> 00:14:52,826
to us the data about user. Of course we can

219
00:14:52,928 --> 00:14:56,218
have an access to the session in order to get all of data

220
00:14:56,304 --> 00:15:00,746
regarding the user. And you

221
00:15:00,768 --> 00:15:04,240
can see in the end that we able to

222
00:15:04,690 --> 00:15:08,538
get the suggestions by the suggests

223
00:15:08,714 --> 00:15:12,480
and by the slash indicator. We have to

224
00:15:13,010 --> 00:15:17,694
be able to update our indicators,

225
00:15:17,742 --> 00:15:21,330
depends on the user. Okay, so now

226
00:15:21,400 --> 00:15:25,220
let's try to understand

227
00:15:25,750 --> 00:15:29,720
what's the expectations we have from the application.

228
00:15:32,970 --> 00:15:36,054
Here we have a get request to

229
00:15:36,092 --> 00:15:39,282
the API with a suggests.

230
00:15:39,346 --> 00:15:43,274
And that suggests will have to

231
00:15:43,312 --> 00:15:49,882
send to us a JSon which

232
00:15:49,936 --> 00:15:54,318
with this JSon we have to be able to deal on

233
00:15:54,404 --> 00:15:58,000
our other client side application. Let's say

234
00:15:59,170 --> 00:16:03,626
we can assume that this is going to be some react

235
00:16:03,658 --> 00:16:07,598
native application or even on

236
00:16:07,764 --> 00:16:11,442
iwatch you can get this application and we can deal

237
00:16:11,496 --> 00:16:15,666
with this JSon right. So in this case as

238
00:16:15,688 --> 00:16:19,606
you can see we have an activity type which cycling the

239
00:16:19,628 --> 00:16:23,110
duration have to be 45 minutes. This number

240
00:16:23,180 --> 00:16:26,534
in minutes. So weve expecting something like that.

241
00:16:26,652 --> 00:16:30,374
We have to have a description how exactly it

242
00:16:30,412 --> 00:16:33,546
has to happen. Then we

243
00:16:33,648 --> 00:16:37,402
have to check how much

244
00:16:37,456 --> 00:16:41,366
we have to consume our water during this activity.

245
00:16:41,558 --> 00:16:45,274
And here you can see also

246
00:16:45,392 --> 00:16:48,720
an explanation why we need to do this. Okay.

247
00:16:49,170 --> 00:16:53,390
And as you can see the cycling is great activity choose for

248
00:16:53,540 --> 00:16:57,646
you as a provides both and

249
00:16:57,668 --> 00:17:01,202
so on and so on. So this explanation actually based

250
00:17:01,256 --> 00:17:05,442
it on the last activity. So maybe

251
00:17:05,496 --> 00:17:09,206
explanation can be depends of like you

252
00:17:09,228 --> 00:17:13,398
did nothing previously and this is going to be like explain like hey

253
00:17:13,564 --> 00:17:17,382
you did nothing last

254
00:17:17,436 --> 00:17:20,646
time. And let's start from running for

255
00:17:20,668 --> 00:17:24,522
example. And we have an array of plan like

256
00:17:24,656 --> 00:17:28,314
how we have to start this exercise, how we have

257
00:17:28,352 --> 00:17:32,250
to deal with this exercise during the way and how we have to finish

258
00:17:32,320 --> 00:17:36,822
that. So here's a bit different activity

259
00:17:36,886 --> 00:17:41,230
type by just showing like these responses from postman.

260
00:17:41,650 --> 00:17:44,846
This is another activity skiing. In the

261
00:17:44,868 --> 00:17:49,054
same way we have to deal with the skiing 16 minutes duration

262
00:17:49,102 --> 00:17:52,274
is after duration we deal with

263
00:17:52,312 --> 00:17:56,146
the subscription. How much water consume has to be in

264
00:17:56,168 --> 00:18:00,070
milliliters. And explanation like

265
00:18:00,140 --> 00:18:04,226
you can see here for example based it on your previous activity

266
00:18:04,338 --> 00:18:07,926
of crossfeed. That means that guy previously has a

267
00:18:07,948 --> 00:18:11,270
crossfeed and now he's creating the scheme.

268
00:18:12,270 --> 00:18:18,006
Some of you may be thinking like hey what's

269
00:18:18,038 --> 00:18:22,602
the region or what's the weather that

270
00:18:22,656 --> 00:18:25,934
user having right now? Maybe it's a

271
00:18:25,972 --> 00:18:29,406
summer but AI generating to us key.

272
00:18:29,508 --> 00:18:33,454
Of course you can customize as

273
00:18:33,492 --> 00:18:37,426
you want. Your suggests depends of prompting and this is

274
00:18:37,448 --> 00:18:41,806
the part that's going to be next one. But let's

275
00:18:41,918 --> 00:18:46,500
dive into this communication between back and the client and

276
00:18:47,830 --> 00:18:51,702
how it can work on the application itself with this

277
00:18:51,756 --> 00:18:55,778
timers. For example as I said we have a get request with a suggestion

278
00:18:55,874 --> 00:18:59,494
and bumps. Json just does responds with this

279
00:18:59,532 --> 00:19:03,558
sport activity to the client. So timer

280
00:19:03,654 --> 00:19:07,674
actually invoke this API call

281
00:19:07,792 --> 00:19:11,814
and then that's how we can get back to this sport activity.

282
00:19:11,942 --> 00:19:15,342
And the same way in the indicator. Hey I need just

283
00:19:15,396 --> 00:19:19,294
to update my indicator because my weight is

284
00:19:19,492 --> 00:19:23,246
changed and the lifestyle actually a

285
00:19:23,268 --> 00:19:27,346
little bit changed depends of this activities what

286
00:19:27,368 --> 00:19:31,140
we accomplishing. And now

287
00:19:31,910 --> 00:19:35,230
we have to start configure

288
00:19:35,310 --> 00:19:39,030
our OpenAI in node Js and everything

289
00:19:39,100 --> 00:19:42,790
is super simple. We just have to provide

290
00:19:42,860 --> 00:19:46,710
the open API key to the class

291
00:19:46,780 --> 00:19:49,958
OpenAI and

292
00:19:50,124 --> 00:19:54,278
we able to reuse this OpenAI instance

293
00:19:54,454 --> 00:19:57,500
and in the controller, as you can see,

294
00:19:58,990 --> 00:20:05,102
literally all magic happens right over here. So get

295
00:20:05,156 --> 00:20:09,118
suggestion controller having

296
00:20:09,204 --> 00:20:13,198
this indicator, we asking from

297
00:20:13,284 --> 00:20:16,800
indicator model by the user id

298
00:20:17,490 --> 00:20:20,850
and we asking for the last activity

299
00:20:21,830 --> 00:20:25,598
by the user id. And that's

300
00:20:25,694 --> 00:20:29,620
how by the indicator and last activity we got result

301
00:20:30,470 --> 00:20:34,226
and result actually has

302
00:20:34,248 --> 00:20:38,070
to be set that we have to set that result

303
00:20:38,220 --> 00:20:41,386
also for the activity using activity model we have

304
00:20:41,408 --> 00:20:45,398
to just insert what the activity has been accomplished.

305
00:20:45,574 --> 00:20:49,210
Of course this is not ideal. I'm just showing the barrett

306
00:20:50,830 --> 00:20:54,394
just a base model how we can deal with this.

307
00:20:54,512 --> 00:20:57,914
Of course we have to insert the

308
00:20:58,032 --> 00:21:01,566
activity of the real accomplished. And we

309
00:21:01,588 --> 00:21:05,150
can check it actually with a communication with a client

310
00:21:06,310 --> 00:21:10,530
to get some statistic from iwatch

311
00:21:11,910 --> 00:21:15,934
in such way only after that we can save insert

312
00:21:15,982 --> 00:21:19,346
something to the activity.

313
00:21:19,458 --> 00:21:22,742
But now it's just like very

314
00:21:22,796 --> 00:21:26,726
simple, bare enough information how

315
00:21:26,748 --> 00:21:29,400
we have to deal with this, right?

316
00:21:30,170 --> 00:21:33,478
Because we are generating our

317
00:21:33,564 --> 00:21:38,202
activity, based it on the last activity and

318
00:21:38,256 --> 00:21:41,610
we're just sending this result for now. So pretty

319
00:21:41,680 --> 00:21:45,360
simple. And the most important thing,

320
00:21:46,210 --> 00:21:49,840
how we have to do this communication against open

321
00:21:50,450 --> 00:21:52,510
AI API.

322
00:21:54,530 --> 00:21:59,058
First of all, we have to build our system

323
00:21:59,144 --> 00:22:02,594
prompt. There is two

324
00:22:02,632 --> 00:22:08,194
things. What we have to understand that when

325
00:22:08,232 --> 00:22:12,834
we send a message to the completion, we dealing

326
00:22:12,962 --> 00:22:16,246
with the different roles. I will explain you a little bit

327
00:22:16,268 --> 00:22:19,586
later, what's the difference between those roles. But previously

328
00:22:19,618 --> 00:22:22,922
we have to generate set up our

329
00:22:22,976 --> 00:22:26,300
prompts. Okay, so in my case,

330
00:22:27,390 --> 00:22:31,062
I provided the detailed

331
00:22:31,126 --> 00:22:34,334
explanation in my

332
00:22:34,372 --> 00:22:38,106
prompt for the system prompt,

333
00:22:38,298 --> 00:22:41,582
what exactly we are expecting from

334
00:22:41,636 --> 00:22:44,990
response from AI, what kind of

335
00:22:45,060 --> 00:22:48,686
response has to be, as you can see that I'm

336
00:22:48,718 --> 00:22:53,310
telling that I'm expecting to get a JSOn

337
00:22:53,470 --> 00:22:56,878
and I'm listing all of those items in JSon,

338
00:22:56,974 --> 00:23:00,806
like how it has to look like, okay. And as you can see

339
00:23:00,828 --> 00:23:04,374
that activity type is actually, this is the list

340
00:23:04,412 --> 00:23:07,602
of, it's just an array of activities.

341
00:23:07,746 --> 00:23:11,754
I'm just sorting them and just provide here to this

342
00:23:11,792 --> 00:23:16,250
file. And this is how we can set up system prompt and

343
00:23:16,400 --> 00:23:20,394
tell to AI what

344
00:23:20,432 --> 00:23:24,314
exactly weve expecting from AI as a response.

345
00:23:24,442 --> 00:23:27,600
And here you can see the last activity message,

346
00:23:28,930 --> 00:23:32,606
which means that if last activity exists at all,

347
00:23:32,708 --> 00:23:36,238
we have to provide this as a parameter, as a user

348
00:23:36,254 --> 00:23:39,726
prompt. User has his own indicators,

349
00:23:39,838 --> 00:23:44,526
actually activity also has a part of indicator

350
00:23:44,638 --> 00:23:48,094
and that's how we're dealing with AI.

351
00:23:48,142 --> 00:23:51,926
Weve telling like hey, system has

352
00:23:51,948 --> 00:23:55,750
to return me adjacent with that kind of structure.

353
00:23:56,090 --> 00:23:59,814
Base it on indicators. Base it on something. What we want to

354
00:23:59,852 --> 00:24:03,142
tell like hey, base it on these indicators.

355
00:24:03,206 --> 00:24:07,610
Please tell me what I have to do and

356
00:24:07,760 --> 00:24:11,114
all of these parts we have to provide to the

357
00:24:11,312 --> 00:24:14,870
completions as a

358
00:24:14,880 --> 00:24:19,034
messages. And you can see here role

359
00:24:19,082 --> 00:24:23,280
system, we provide that content system prompt, which is

360
00:24:24,290 --> 00:24:27,986
that message where we are telling how

361
00:24:28,008 --> 00:24:31,474
we have to, what we're expecting from

362
00:24:31,512 --> 00:24:35,490
AI, and a content for as a user prompt

363
00:24:36,150 --> 00:24:40,066
where we are providing our indicators. So let's

364
00:24:40,098 --> 00:24:47,266
a little bit take a look on the setup

365
00:24:47,378 --> 00:24:51,400
of this completion. Okay, so what is this?

366
00:24:51,770 --> 00:24:55,046
Messages. Messages is

367
00:24:55,068 --> 00:24:58,954
the context of conversation with the eye. Messages are

368
00:24:58,992 --> 00:25:02,970
like the back and forth text between you

369
00:25:03,040 --> 00:25:06,480
and the AI. So each message

370
00:25:06,850 --> 00:25:10,542
has a role to tell the eye who is speaking.

371
00:25:10,676 --> 00:25:14,574
Okay, so as I said, if the

372
00:25:14,612 --> 00:25:17,706
role is user, it's like the message is

373
00:25:17,748 --> 00:25:21,522
coming from a person using the eye, asking a question or

374
00:25:21,576 --> 00:25:25,074
making a statement. If the role is system, it's a special kind

375
00:25:25,112 --> 00:25:29,750
of message that gives the eye instructions or

376
00:25:29,900 --> 00:25:33,218
information about how to behave,

377
00:25:33,314 --> 00:25:36,406
but it's not part of the conversation itself. Right.

378
00:25:36,508 --> 00:25:40,550
If the role is assistant, there can be another role is assistant.

379
00:25:40,910 --> 00:25:45,018
It's the AI own message

380
00:25:45,104 --> 00:25:47,898
or responses. Okay,

381
00:25:48,064 --> 00:25:51,494
so what you can see here, the temperature,

382
00:25:51,622 --> 00:25:55,374
0.9. Okay, so I will explain a bit that part as

383
00:25:55,412 --> 00:25:59,214
well. So temperature is a way of

384
00:25:59,332 --> 00:26:02,858
controlling how creative

385
00:26:02,954 --> 00:26:07,058
or surprising the AI responses are.

386
00:26:07,224 --> 00:26:11,422
If the temperature is low, the AI replies

387
00:26:11,486 --> 00:26:15,310
will be more predictable and safer.

388
00:26:15,470 --> 00:26:17,460
If the temperature is higher,

389
00:26:19,370 --> 00:26:22,742
the AI is more likely to give you

390
00:26:22,876 --> 00:26:26,210
unique and more unexpected responses.

391
00:26:26,290 --> 00:26:29,686
Okay, and the

392
00:26:29,788 --> 00:26:33,674
model itself, the model actually is the version of the

393
00:26:33,712 --> 00:26:37,402
AI you are talking to. Just like

394
00:26:37,456 --> 00:26:40,950
your phone has different models with a variation

395
00:26:41,030 --> 00:26:44,686
of features, AI has different models that can

396
00:26:44,708 --> 00:26:49,920
do different things, right? So some

397
00:26:50,610 --> 00:26:53,630
are smarter or more creative.

398
00:26:55,090 --> 00:26:59,010
In my case, GPT 3.5 turboids are more cheaper

399
00:26:59,990 --> 00:27:03,634
and more stable model, which we can use now,

400
00:27:03,832 --> 00:27:07,970
I could say like it's more cheaper even. But anyway, we already

401
00:27:08,040 --> 00:27:12,006
can deal with this model and get a

402
00:27:12,028 --> 00:27:15,398
good result. Okay, and also I

403
00:27:15,404 --> 00:27:21,000
would like to mention another

404
00:27:21,630 --> 00:27:25,354
key which is going, it could be as

405
00:27:25,392 --> 00:27:28,842
a combination max tokens. It's not over here,

406
00:27:28,896 --> 00:27:32,550
but you can set up Max tokens,

407
00:27:32,710 --> 00:27:36,778
which means the maximum numbers of pieces

408
00:27:36,874 --> 00:27:40,334
of text in the AI is allowed to

409
00:27:40,372 --> 00:27:43,854
generate in its response. Okay, so you can

410
00:27:43,892 --> 00:27:47,778
think of a token as a single word or

411
00:27:47,944 --> 00:27:51,518
punctuation mark. Okay, so Max token

412
00:27:51,614 --> 00:27:55,700
sets a limit on how long the AI response can be.

413
00:27:56,630 --> 00:28:00,934
Well, suggestion controller has

414
00:28:00,972 --> 00:28:01,720
to be,

415
00:28:04,490 --> 00:28:07,798
as I said, construct a

416
00:28:07,804 --> 00:28:11,418
little bit different. It's just a presentation of how we're going to

417
00:28:11,424 --> 00:28:14,586
get this result each time. When I get the result,

418
00:28:14,688 --> 00:28:18,298
I'm creating immediately from result

419
00:28:18,384 --> 00:28:21,606
activity type, as the last one was, there but it doesn't

420
00:28:21,638 --> 00:28:25,134
mean that it's really accomplished. Of course

421
00:28:25,172 --> 00:28:28,974
it has to be in a different way, but in terms

422
00:28:29,012 --> 00:28:33,040
of presentation it's in such way

423
00:28:34,210 --> 00:28:37,906
and indicators have to be updated from

424
00:28:38,008 --> 00:28:41,502
result from the client actually. So we have to update

425
00:28:41,566 --> 00:28:45,458
hi to say like hey I'm doing

426
00:28:45,624 --> 00:28:49,938
a bit different, my lifestyle has changed and I have to update

427
00:28:50,114 --> 00:28:53,574
my indicators. I have, I think different

428
00:28:53,772 --> 00:28:57,778
weight and those indicators will affect

429
00:28:57,874 --> 00:29:01,070
for the next activity what you're going to accomplish

430
00:29:01,170 --> 00:29:04,634
next time. So we sense from

431
00:29:04,672 --> 00:29:08,582
client the indicators, updating indicators, then they're

432
00:29:08,726 --> 00:29:12,106
getting the activity. And then based on

433
00:29:12,128 --> 00:29:14,906
this information we got back the sport activity.

434
00:29:15,098 --> 00:29:18,702
And for update indicator we have another

435
00:29:18,756 --> 00:29:22,542
controller where we have to just as usual deal

436
00:29:22,596 --> 00:29:26,194
with indicator model. We have to update by user id and

437
00:29:26,232 --> 00:29:30,802
set those indicators updates right

438
00:29:30,856 --> 00:29:34,382
away. And from database

439
00:29:34,446 --> 00:29:40,654
perspective I'm using postgres. You can see the list

440
00:29:40,712 --> 00:29:44,374
of activities here. You can see the activity type has

441
00:29:44,412 --> 00:29:48,054
been accomplished with the specific duration, there is a user id

442
00:29:48,172 --> 00:29:51,938
and there is a history of when it's been

443
00:29:52,124 --> 00:29:53,290
accomplished.

444
00:29:56,990 --> 00:30:01,354
Now it's like finally this

445
00:30:01,392 --> 00:30:05,402
session was about the open AI

446
00:30:05,466 --> 00:30:09,600
integration, how we can deal with these prompt messages and so on.

447
00:30:10,290 --> 00:30:14,094
You can find this project and to check and play around by

448
00:30:14,132 --> 00:30:17,774
yourself. From my personal GitHub account you can

449
00:30:17,812 --> 00:30:21,774
just get the pull up AI server and run

450
00:30:21,812 --> 00:30:25,546
it by yourself and play around. And of course previously

451
00:30:25,578 --> 00:30:29,720
you have to set up your OpenAI account

452
00:30:30,250 --> 00:30:33,110
and get the API key.

453
00:30:33,260 --> 00:30:36,582
So thank you so much for

454
00:30:36,636 --> 00:30:39,060
the attention and see you.

