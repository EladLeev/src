1
00:00:25,410 --> 00:00:28,520
You. Hello.

2
00:00:28,890 --> 00:00:33,046
Welcome to Conf 42. Today I

3
00:00:33,068 --> 00:00:36,130
will be talking about modular approaches

4
00:00:36,210 --> 00:00:39,750
of structuring react and redux apps

5
00:00:40,570 --> 00:00:43,858
and a little bit about me. My name is Sergi,

6
00:00:43,954 --> 00:00:47,094
I'm from Ukraine. I have been working as a web

7
00:00:47,132 --> 00:00:50,798
developer for about 1010 years

8
00:00:50,884 --> 00:00:55,002
more and I work with different technologies

9
00:00:55,066 --> 00:00:58,634
and platforms, but last time I worked mostly

10
00:00:58,682 --> 00:01:01,546
with front end and with react.

11
00:01:01,738 --> 00:01:05,954
I'm really a fan of JavaScript so I

12
00:01:05,992 --> 00:01:09,410
participate in different events and

13
00:01:09,480 --> 00:01:13,294
I write articles about it and also I conduct JavaScript

14
00:01:13,342 --> 00:01:16,674
courses sometimes and also I like table

15
00:01:16,722 --> 00:01:19,190
tennis, fishing and traveling.

16
00:01:20,570 --> 00:01:24,760
First of all, let me introduce a little bit

17
00:01:25,770 --> 00:01:28,300
what we will be talking about today.

18
00:01:28,830 --> 00:01:32,538
And I will start from talking

19
00:01:32,624 --> 00:01:36,134
a little bit why good structure of redux

20
00:01:36,182 --> 00:01:40,258
application is important and about state management

21
00:01:40,454 --> 00:01:43,994
problem at all. What is wrong with common approaches

22
00:01:44,042 --> 00:01:48,282
in redux applications? We will check what is dax

23
00:01:48,346 --> 00:01:52,390
and reducks, what is redux toolkit,

24
00:01:52,490 --> 00:01:55,650
and a little bit about testing of Daxis.

25
00:01:58,390 --> 00:02:02,590
What is problem with state management?

26
00:02:02,750 --> 00:02:06,402
State management in modern front

27
00:02:06,456 --> 00:02:10,070
end applications is quite a common problem for

28
00:02:10,140 --> 00:02:14,214
different frameworks and libraries, but especially

29
00:02:14,332 --> 00:02:17,350
it's a problem in react ecosystem.

30
00:02:18,350 --> 00:02:21,754
I think that one of the reasons why we

31
00:02:21,792 --> 00:02:24,650
have the state management problem in react,

32
00:02:25,630 --> 00:02:29,260
it's because we have different types of state.

33
00:02:29,710 --> 00:02:33,626
First of all, we have components. Local state is the simplest

34
00:02:33,658 --> 00:02:36,682
state. And today, using hooks,

35
00:02:36,746 --> 00:02:40,698
we can have local state in functional components.

36
00:02:40,794 --> 00:02:44,320
And also of course we can have local state in

37
00:02:45,090 --> 00:02:47,890
components, class based components.

38
00:02:49,110 --> 00:02:52,914
Next type is components shared state.

39
00:02:53,112 --> 00:02:56,726
And sometimes we need to have a data,

40
00:02:56,908 --> 00:03:01,042
some data that we need to display in different components.

41
00:03:01,186 --> 00:03:05,158
And one of the easiest approaches that people

42
00:03:05,324 --> 00:03:08,554
usually use is to

43
00:03:08,592 --> 00:03:12,730
lift up the data into a common parent and then

44
00:03:12,800 --> 00:03:15,130
pass this data via props.

45
00:03:16,910 --> 00:03:20,510
By the way, today I think you heard about

46
00:03:20,580 --> 00:03:24,094
recoil library, and some

47
00:03:24,132 --> 00:03:27,818
people think today that for such types

48
00:03:27,834 --> 00:03:30,160
of state, recoil can be a good one.

49
00:03:30,690 --> 00:03:33,460
Maybe. By the way,

50
00:03:33,910 --> 00:03:37,234
I had some articles and

51
00:03:37,272 --> 00:03:41,026
presentations about recoil, just check it.

52
00:03:41,048 --> 00:03:46,034
But in Internet. Yeah, thank you. And applications

53
00:03:46,082 --> 00:03:49,702
global state, it's a

54
00:03:49,756 --> 00:03:53,762
main type, I think of the state in our react

55
00:03:53,826 --> 00:03:57,458
applications and usually it can be

56
00:03:57,564 --> 00:04:01,354
an object and quite a big one that contains all

57
00:04:01,392 --> 00:04:05,210
the data from all our applications application.

58
00:04:05,360 --> 00:04:09,050
And we use this data in different components.

59
00:04:10,050 --> 00:04:14,080
And I think that this global state usually

60
00:04:14,610 --> 00:04:16,110
can be splitted.

61
00:04:17,330 --> 00:04:20,810
It contains as well two main parts.

62
00:04:20,970 --> 00:04:24,530
It's a UI state and cache UI state.

63
00:04:24,600 --> 00:04:28,542
It's a data that we use to configure

64
00:04:28,606 --> 00:04:32,418
our application and it's something that we use a

65
00:04:32,424 --> 00:04:36,070
configuration for the look and feel like theme,

66
00:04:36,490 --> 00:04:39,378
and also it's a data that we display.

67
00:04:39,554 --> 00:04:43,286
And what about the cache. Almost all our

68
00:04:43,388 --> 00:04:47,474
modern applications, they do API calls. And when

69
00:04:47,532 --> 00:04:51,498
we retrieve the data, usually we also

70
00:04:51,584 --> 00:04:55,642
store it and

71
00:04:55,696 --> 00:04:59,180
we need to call it cache because it's actually

72
00:04:59,630 --> 00:05:04,446
a cache. And I think that most

73
00:05:04,468 --> 00:05:08,190
of the developers that work with Redux,

74
00:05:09,090 --> 00:05:12,826
we all do such things like API calls

75
00:05:12,858 --> 00:05:16,974
and store the data into our global

76
00:05:17,022 --> 00:05:20,660
state with all the rest of the data.

77
00:05:21,910 --> 00:05:26,310
And right now a lot of developers started

78
00:05:26,380 --> 00:05:30,120
to think that maybe we need to separate this

79
00:05:31,290 --> 00:05:34,390
type of state, I mean cache into separate,

80
00:05:35,370 --> 00:05:40,902
maybe a separate object or separate state

81
00:05:41,036 --> 00:05:44,234
array, and maybe even different

82
00:05:44,432 --> 00:05:47,660
libraries can be used for different types of state.

83
00:05:48,750 --> 00:05:51,786
But today we will be talking about redux.

84
00:05:51,898 --> 00:05:55,018
And some people can say redux

85
00:05:55,114 --> 00:05:56,640
in 2021.

86
00:05:58,210 --> 00:06:02,362
Why? We have a lot of new stuff. Do we really

87
00:06:02,436 --> 00:06:06,180
need redux today? And I should say that we had

88
00:06:07,270 --> 00:06:11,522
several times we had situations when something appeared and

89
00:06:11,576 --> 00:06:15,374
some people said, okay, so now we don't

90
00:06:15,422 --> 00:06:19,474
need Redux anymore. The same thing was with context

91
00:06:19,522 --> 00:06:22,630
API. And I remember a lot of people said,

92
00:06:22,700 --> 00:06:25,954
okay, we don't need redux anymore. We have context API,

93
00:06:26,002 --> 00:06:29,894
but they will run, as we can see here, that context

94
00:06:29,942 --> 00:06:33,626
API, it was set last year that

95
00:06:33,808 --> 00:06:37,450
it cannot replace Redux.

96
00:06:37,790 --> 00:06:41,946
And we

97
00:06:41,968 --> 00:06:45,482
can see today, like here in the

98
00:06:45,536 --> 00:06:49,840
open base, you can check this Openbase website

99
00:06:50,210 --> 00:06:54,130
and they have this ten best react state management libraries

100
00:06:54,470 --> 00:06:57,826
article. And there you

101
00:06:57,848 --> 00:07:01,730
can see the list of most popular

102
00:07:02,150 --> 00:07:05,814
state management libraries in react. And just

103
00:07:05,932 --> 00:07:09,538
check the numbers for redux. So GitHub

104
00:07:09,634 --> 00:07:13,270
stars and weekly downloads, those numbers

105
00:07:13,340 --> 00:07:17,234
are amazing, but in the same time you can see that user

106
00:07:17,282 --> 00:07:19,830
rating is not the highest.

107
00:07:20,590 --> 00:07:23,706
And we all know that a lot of

108
00:07:23,728 --> 00:07:27,146
developers coplained a lot about Redux as

109
00:07:27,168 --> 00:07:30,034
well. But it's still very popular,

110
00:07:30,182 --> 00:07:34,202
why it's popular and why developers

111
00:07:34,266 --> 00:07:38,174
complain about it. I think that most

112
00:07:38,292 --> 00:07:41,310
problem about Redux,

113
00:07:42,390 --> 00:07:45,746
that people usually say it's about its

114
00:07:45,928 --> 00:07:50,258
boil plate. But let's talk

115
00:07:50,424 --> 00:07:53,922
about this a little bit later. At first, a small

116
00:07:53,976 --> 00:07:57,190
disclaimer, Redux,

117
00:07:57,610 --> 00:08:00,886
it's part of our application, it's a

118
00:08:00,908 --> 00:08:04,754
part of the architecture. Actually it's

119
00:08:04,802 --> 00:08:07,830
implementation of the flux architecture. But today

120
00:08:07,900 --> 00:08:11,450
we are talking about the structuring of the application

121
00:08:11,600 --> 00:08:14,906
because we decided that we use flux. If we

122
00:08:14,928 --> 00:08:18,694
use Redux, then we use flux architecture. But we mostly

123
00:08:18,742 --> 00:08:22,400
talk today about structuring the application.

124
00:08:23,810 --> 00:08:28,160
So what is the common problem of

125
00:08:29,170 --> 00:08:32,978
just standard react applications? Here we can see

126
00:08:33,064 --> 00:08:36,702
example of very popular, very common react

127
00:08:36,766 --> 00:08:40,130
redux application. And here we can see

128
00:08:40,200 --> 00:08:43,938
that all redux artifacts, they are

129
00:08:44,024 --> 00:08:47,586
spread it all over application into different folders.

130
00:08:47,778 --> 00:08:51,158
When we start our application, when application is small

131
00:08:51,244 --> 00:08:54,934
and we add redux it looks quite good.

132
00:08:55,052 --> 00:08:59,050
And when we add Redux and such folders,

133
00:08:59,790 --> 00:09:03,434
sometimes we can even think, now my

134
00:09:03,472 --> 00:09:07,146
application looks professional, but later when we

135
00:09:07,168 --> 00:09:11,180
need to maintain and support such

136
00:09:12,270 --> 00:09:15,918
project, it can become a nightmare to support

137
00:09:16,004 --> 00:09:19,646
it. Because just imagine when you need

138
00:09:19,668 --> 00:09:24,034
to add a new entity, you need to create the

139
00:09:24,072 --> 00:09:27,662
same files over and over again in different folders.

140
00:09:27,806 --> 00:09:31,458
If you need to modify files, you need to go to

141
00:09:31,624 --> 00:09:34,974
those files in different folders. If you need to

142
00:09:35,032 --> 00:09:38,918
remove entity, you need to go to different

143
00:09:39,004 --> 00:09:41,830
folders and remove different files.

144
00:09:42,570 --> 00:09:45,222
So this approach scales very bad.

145
00:09:45,356 --> 00:09:48,554
And yeah, it has a lot of

146
00:09:48,592 --> 00:09:52,250
problems. What we can do about

147
00:09:52,320 --> 00:09:55,350
this? First of all, I would like to recall

148
00:09:55,430 --> 00:09:59,098
that we have several approaches for structuring it's function

149
00:09:59,184 --> 00:10:02,654
first and feature first approaches. I think we all

150
00:10:02,692 --> 00:10:06,830
know about them here.

151
00:10:06,900 --> 00:10:10,926
I would like to add that sometimes we can

152
00:10:11,028 --> 00:10:15,570
mix those approaches and

153
00:10:15,640 --> 00:10:19,586
also one very important

154
00:10:19,688 --> 00:10:23,746
moment that we need to think about our application on

155
00:10:23,768 --> 00:10:27,510
the long run. So we need to imagine

156
00:10:28,650 --> 00:10:32,294
what happens if we switch from

157
00:10:32,332 --> 00:10:34,680
react to another library for example,

158
00:10:35,770 --> 00:10:41,690
or if maybe

159
00:10:41,760 --> 00:10:44,620
we will switch from react to react native. Yeah,

160
00:10:45,310 --> 00:10:49,082
then maybe we would be able to

161
00:10:49,136 --> 00:10:53,262
reuse some parts of our application and especially

162
00:10:53,396 --> 00:10:54,910
the state management.

163
00:10:57,890 --> 00:11:01,742
And that's why people started to think that maybe we need

164
00:11:01,796 --> 00:11:05,490
to separate state management from UI and

165
00:11:05,560 --> 00:11:09,166
ideally it can be added

166
00:11:09,198 --> 00:11:10,850
into a shared library.

167
00:11:13,990 --> 00:11:17,558
That's why Eric Rasmussen, he started to think

168
00:11:17,644 --> 00:11:21,382
about problems of Redux. He also

169
00:11:21,436 --> 00:11:25,414
didn't like that we need to add a lot of files in

170
00:11:25,452 --> 00:11:29,546
different folders and only

171
00:11:29,648 --> 00:11:33,002
because we need to import some

172
00:11:33,136 --> 00:11:34,890
actions or reducer.

173
00:11:36,430 --> 00:11:40,326
Ideally he thought that it would be better

174
00:11:40,448 --> 00:11:43,840
to isolate the model,

175
00:11:44,530 --> 00:11:49,066
the state management, our bundle,

176
00:11:49,258 --> 00:11:52,930
and ideally we even can move

177
00:11:53,000 --> 00:11:55,170
this bundle into a shared library.

178
00:11:55,990 --> 00:11:59,998
And here he created

179
00:12:00,094 --> 00:12:03,598
Daxis ducks.

180
00:12:03,774 --> 00:12:07,618
It's a one file that contains

181
00:12:07,794 --> 00:12:10,546
all redux artifacts.

182
00:12:10,738 --> 00:12:13,810
I mean it contains actions, reducers,

183
00:12:13,890 --> 00:12:17,554
action creators, selectors, saga and all of that.

184
00:12:17,692 --> 00:12:21,466
So everything that you have around one

185
00:12:21,568 --> 00:12:25,050
reducer that you need for one reducer you have

186
00:12:25,120 --> 00:12:28,966
in one files. Even tests can be added

187
00:12:28,998 --> 00:12:33,006
directly in this file sometimes.

188
00:12:33,188 --> 00:12:37,070
At first for some people it looked very scary,

189
00:12:37,570 --> 00:12:40,862
but for small applications, when we don't have

190
00:12:40,916 --> 00:12:43,694
a lot of code for those artifacts,

191
00:12:43,822 --> 00:12:47,220
that idea was awesome. When I first

192
00:12:47,590 --> 00:12:51,620
look at this, I liked this and I tried in some

193
00:12:52,790 --> 00:12:56,326
applications and I also proposed this approach to

194
00:12:56,428 --> 00:12:59,734
my colleagues, but they afraid to try this

195
00:12:59,772 --> 00:13:00,600
at first.

196
00:13:03,130 --> 00:13:07,014
Daxis has some rules and when

197
00:13:07,052 --> 00:13:10,554
you follow those rules, then you will

198
00:13:10,592 --> 00:13:14,486
be able to import actions

199
00:13:14,598 --> 00:13:19,130
and reducks. By the way, why docs?

200
00:13:19,550 --> 00:13:23,294
Eric explained it that he thought that

201
00:13:23,332 --> 00:13:27,418
Java has jars and beans. Ruby has gems.

202
00:13:27,594 --> 00:13:31,230
So he just suggested to call those

203
00:13:31,300 --> 00:13:35,250
reducks bundles as Daxis or DAX

204
00:13:35,910 --> 00:13:39,090
as last syllable of

205
00:13:39,160 --> 00:13:40,130
redux.

206
00:13:42,950 --> 00:13:46,534
How we can use docsis. So when we have everything in

207
00:13:46,572 --> 00:13:49,880
one file and we export only

208
00:13:50,330 --> 00:13:53,282
reducers and only actions.

209
00:13:53,426 --> 00:13:56,838
So when we need reducers we

210
00:13:56,924 --> 00:14:00,454
still can just import them directly from

211
00:14:00,492 --> 00:14:04,346
one dux. The same

212
00:14:04,448 --> 00:14:08,650
for actions. When we need actions we also can

213
00:14:08,720 --> 00:14:11,806
import them from the same

214
00:14:11,988 --> 00:14:12,830
duck.

215
00:14:15,410 --> 00:14:19,178
And if you need anything else it's

216
00:14:19,194 --> 00:14:23,140
quite flexible. So you also can

217
00:14:25,270 --> 00:14:29,934
export another artifacts

218
00:14:29,982 --> 00:14:35,220
that you need actions from

219
00:14:35,670 --> 00:14:38,280
the ducks and then you can import them.

220
00:14:39,690 --> 00:14:43,654
Here. I added a few links to different implementation of

221
00:14:43,692 --> 00:14:47,494
Daxis today. Maybe they can look

222
00:14:47,612 --> 00:14:52,038
a little bit outdated, but today

223
00:14:52,124 --> 00:14:55,942
I'm talking about Daxis and I will be talking about

224
00:14:55,996 --> 00:15:00,960
reducks now just to

225
00:15:01,810 --> 00:15:05,642
go through the history of the redux

226
00:15:05,706 --> 00:15:09,054
evolution. And Dax was

227
00:15:09,092 --> 00:15:13,058
the first attempt, as for me, to change

228
00:15:13,144 --> 00:15:17,106
the rules of the game and

229
00:15:17,288 --> 00:15:21,570
after that redux appeared.

230
00:15:22,070 --> 00:15:26,100
The difference between DaX and Redux is that

231
00:15:27,110 --> 00:15:30,934
Dax's modular approach is nice, but it

232
00:15:30,972 --> 00:15:35,330
doesn't work. When we have a lot of code in the same file

233
00:15:35,490 --> 00:15:39,114
then it can be a problem to support such

234
00:15:39,312 --> 00:15:42,726
file. So some people, they proposed

235
00:15:42,838 --> 00:15:46,314
to split the code

236
00:15:46,432 --> 00:15:50,922
from the docs into several files. So here

237
00:15:51,056 --> 00:15:55,050
we can see example of the redux doc.

238
00:15:56,050 --> 00:16:01,470
By the way, the name also just created

239
00:16:01,890 --> 00:16:05,506
to sound like Redux. And here we

240
00:16:05,528 --> 00:16:08,478
can see that in one ducks folder.

241
00:16:08,654 --> 00:16:12,898
Ducks is one of the entities of our application like

242
00:16:12,984 --> 00:16:16,914
user. We can have different files

243
00:16:16,962 --> 00:16:19,826
in this folder like actions, operations,

244
00:16:19,938 --> 00:16:24,166
reducks, selectors, test types, utils and we

245
00:16:24,268 --> 00:16:27,870
export anything that we need from this folder

246
00:16:27,970 --> 00:16:31,802
via index file. Redux also

247
00:16:31,856 --> 00:16:35,420
has some rules that you need to follow.

248
00:16:36,270 --> 00:16:39,590
So like DAC

249
00:16:39,670 --> 00:16:43,694
contains concepts or I call them artifacts that are

250
00:16:43,732 --> 00:16:47,102
related only to one entity like product card

251
00:16:47,156 --> 00:16:50,702
and all of that. It's one doc years. So we should have

252
00:16:50,756 --> 00:16:55,300
index files that exports everything and

253
00:16:55,750 --> 00:16:59,586
we split reducers, selectors, actions and all

254
00:16:59,608 --> 00:17:02,820
of that. We keep them in

255
00:17:03,190 --> 00:17:07,606
separate files. And also this folder can

256
00:17:07,788 --> 00:17:09,800
contain tests. Of course,

257
00:17:11,450 --> 00:17:15,426
here we can see example of types.

258
00:17:15,618 --> 00:17:19,814
They can be the same or similar on

259
00:17:19,852 --> 00:17:23,446
Daxis in reducks, but of

260
00:17:23,468 --> 00:17:27,206
course in Daxis they are edited in the same file

261
00:17:27,238 --> 00:17:30,654
and redux in the separate file. So we can

262
00:17:30,692 --> 00:17:32,830
have actions, operations,

263
00:17:34,530 --> 00:17:37,982
reducers, reducers. By the way, it's the main

264
00:17:38,036 --> 00:17:40,910
part of the redux.

265
00:17:41,810 --> 00:17:44,846
That's why all this approach,

266
00:17:45,038 --> 00:17:48,606
Dax and Redux, they were built around reducers,

267
00:17:48,638 --> 00:17:51,998
as I said, reducers bundles.

268
00:17:52,094 --> 00:17:55,170
So daxes are actually reducer bundles.

269
00:17:56,170 --> 00:17:59,606
Yeah. Also we can have selectors. By the

270
00:17:59,628 --> 00:18:03,462
way, I like to use reselect. I hope you do.

271
00:18:03,596 --> 00:18:04,790
With Redux.

272
00:18:08,190 --> 00:18:11,898
And we of course have index file where we import

273
00:18:11,984 --> 00:18:15,530
and export all the stuff that we need

274
00:18:15,600 --> 00:18:19,180
in other parts of our application.

275
00:18:21,330 --> 00:18:25,370
And about DAX tests for Redux

276
00:18:25,450 --> 00:18:29,162
and DAX, we can easily add tests

277
00:18:29,226 --> 00:18:32,994
directly in the DAX folder and

278
00:18:33,032 --> 00:18:37,342
then all tests that are related to our Redux

279
00:18:37,406 --> 00:18:38,450
artifacts,

280
00:18:40,630 --> 00:18:44,482
they are bundled together with the code that we test,

281
00:18:44,616 --> 00:18:48,182
and it's very scalable. So when we need to add a new

282
00:18:48,236 --> 00:18:51,446
entity, again, we add all the code and we add

283
00:18:51,468 --> 00:18:55,186
the tests in the same folder. And when we need to remove

284
00:18:55,378 --> 00:18:58,794
one entity, we just remove ducks and at

285
00:18:58,832 --> 00:19:02,074
all, we remove ducks with all artifacts and

286
00:19:02,112 --> 00:19:03,980
with tests as well.

287
00:19:05,470 --> 00:19:09,510
And finally, we have a Redux toolkit. Redux toolkit.

288
00:19:09,590 --> 00:19:12,974
I think it's an amazing thing. And as for

289
00:19:13,012 --> 00:19:17,034
me, Redux Toolkit is a logical continuation

290
00:19:17,162 --> 00:19:20,830
of this saga, I mean story with

291
00:19:20,900 --> 00:19:25,230
Daxis. I think that Redux toolkit

292
00:19:25,310 --> 00:19:29,394
slices that we have, they implement exactly

293
00:19:29,512 --> 00:19:32,994
the idea to bundle all the stuff that

294
00:19:33,032 --> 00:19:36,760
we need for one reducer in one place.

295
00:19:37,690 --> 00:19:41,874
Redux toolkit, it has very good documentation,

296
00:19:42,002 --> 00:19:45,394
a lot of different articles and all of that. So you can investigate.

297
00:19:45,442 --> 00:19:48,874
And I think you already use it, most of you already use

298
00:19:48,912 --> 00:19:53,066
this. So I just want to remind a few things that

299
00:19:53,168 --> 00:19:56,822
Redux toolkit has. Redux toolkit

300
00:19:56,886 --> 00:20:01,254
has configure store. It's a helper or

301
00:20:01,312 --> 00:20:04,654
wrapper for create store. It help us

302
00:20:04,772 --> 00:20:08,686
to create store very easily with

303
00:20:08,788 --> 00:20:12,734
one or two, just a few lines of code. And by

304
00:20:12,772 --> 00:20:16,898
default it supports Redux thunk. But usually

305
00:20:16,984 --> 00:20:20,626
I use sagas, so you can easily configure a sagas as

306
00:20:20,648 --> 00:20:24,094
well. And also it supports redux

307
00:20:24,222 --> 00:20:29,010
details extension. It has createred

308
00:20:30,250 --> 00:20:33,938
function, it has create action,

309
00:20:34,034 --> 00:20:37,990
create slice and some additional utilities.

310
00:20:40,270 --> 00:20:43,110
Yeah, just a small summary. Redux,

311
00:20:43,190 --> 00:20:46,250
Redux and Redux toolkit.

312
00:20:46,990 --> 00:20:50,750
As for me, they use the same pattern or approaches

313
00:20:52,130 --> 00:20:56,218
for improving the structure

314
00:20:56,314 --> 00:20:58,958
of the redux application.

315
00:20:59,124 --> 00:21:02,454
React Redux feature

316
00:21:02,522 --> 00:21:05,998
basic separation of the redux code is more flexible

317
00:21:06,094 --> 00:21:09,966
and allows more opportunities for scaling when Cadaway

318
00:21:09,998 --> 00:21:14,018
is growing. But if we are talking

319
00:21:14,104 --> 00:21:17,830
about feature basic separation of the

320
00:21:17,900 --> 00:21:21,478
redux code, not when we are talking about

321
00:21:21,564 --> 00:21:25,190
all react application. So very important thing is

322
00:21:25,260 --> 00:21:28,870
to move all state management

323
00:21:28,950 --> 00:21:32,474
aside. For example, sometimes I

324
00:21:32,512 --> 00:21:36,326
just create redux folder

325
00:21:36,518 --> 00:21:39,820
and then I place all ducks here. There.

326
00:21:41,010 --> 00:21:44,414
Yeah. So redux toolkit provides useful tools and

327
00:21:44,452 --> 00:21:47,118
best practices. And really it is.

328
00:21:47,204 --> 00:21:51,342
So I think many

329
00:21:51,396 --> 00:21:55,006
of you heard that for angular,

330
00:21:55,118 --> 00:21:57,650
when people say about angular,

331
00:21:58,150 --> 00:22:02,434
even about Vue js, that when

332
00:22:02,472 --> 00:22:06,814
newcomers start to work with those frameworks,

333
00:22:06,942 --> 00:22:10,514
they can easily do the correct structure

334
00:22:10,642 --> 00:22:14,966
because they don't have a lot of options. But with

335
00:22:15,148 --> 00:22:19,942
react and Redux we had very

336
00:22:20,076 --> 00:22:23,782
flexible approaches so we could implement

337
00:22:23,846 --> 00:22:27,738
anything so newcomers could

338
00:22:27,824 --> 00:22:31,294
create not very optimal solutions and

339
00:22:31,332 --> 00:22:35,280
structures. But Redux toolkit is exactly

340
00:22:36,050 --> 00:22:40,110
quite opinionated tool for structuring

341
00:22:40,690 --> 00:22:44,866
redux applications. And by

342
00:22:44,888 --> 00:22:49,300
the way how do you structure your Redux app? Please share

343
00:22:50,790 --> 00:22:54,938
by the way here I added a bunch of links

344
00:22:55,134 --> 00:22:58,838
to their articles or comments that

345
00:22:58,844 --> 00:23:02,402
I shared in my talk and also I added

346
00:23:02,466 --> 00:23:06,582
a link to my repository and to

347
00:23:06,636 --> 00:23:10,522
the repository that I created especially for Con

348
00:23:10,576 --> 00:23:14,730
42 and there I added

349
00:23:15,710 --> 00:23:19,820
quite simple basic redux application

350
00:23:20,450 --> 00:23:23,870
and also I created different branches

351
00:23:24,210 --> 00:23:27,450
where I refactorate the basic

352
00:23:27,530 --> 00:23:30,350
application with different approaches.

353
00:23:30,930 --> 00:23:35,834
At first it's improved redux

354
00:23:35,962 --> 00:23:39,950
approaches, then with Daxis, with reducks and

355
00:23:40,100 --> 00:23:43,550
with Redux toolkit.

356
00:23:43,890 --> 00:23:47,638
So if you would like you can check that

357
00:23:47,724 --> 00:23:51,154
repository. I have just quite basic

358
00:23:51,202 --> 00:23:56,210
stuff there but I plan to improve this repository

359
00:23:56,370 --> 00:24:00,630
for better user experience so you can investigate and compare

360
00:24:01,370 --> 00:24:02,580
and thank you.

