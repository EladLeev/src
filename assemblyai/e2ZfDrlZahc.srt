1
00:00:20,250 --> 00:00:23,354
Hey, everyone, welcome to my talk on quantum cybersecurity.

2
00:00:23,482 --> 00:00:26,866
Let's get started. So here's

3
00:00:26,898 --> 00:00:30,258
a quick agenda of what we're going to be covering in this presentation.

4
00:00:30,434 --> 00:00:33,474
First of all, we're going to be covering some classical encryption

5
00:00:33,522 --> 00:00:37,010
methods. These include RSA, ECC,

6
00:00:37,170 --> 00:00:40,134
Diff, Diffie, Hellman or DH, and so on.

7
00:00:40,332 --> 00:00:44,502
Then we're going to have a look at Shore's algorithm. Shore's algorithms

8
00:00:44,566 --> 00:00:48,102
is promising to break these classical encryption methods

9
00:00:48,166 --> 00:00:51,646
that you and I commonly use on the Internet. Today. We'll see

10
00:00:51,668 --> 00:00:55,278
what it's about and how it works. Finally, we're going to

11
00:00:55,284 --> 00:00:58,634
be reviewing some quantum resistant classical encryption

12
00:00:58,682 --> 00:01:02,670
methods that are resistant to quantum attacks, like Shore's algorithm.

13
00:01:03,490 --> 00:01:06,962
So to start off with, what is digital security?

14
00:01:07,096 --> 00:01:10,450
When you talk about securing our data on the Internet, what exactly

15
00:01:10,520 --> 00:01:14,222
does that refer to? Well, digital security is a pretty broad

16
00:01:14,286 --> 00:01:18,210
term, and it's essentially defined by the process of protecting

17
00:01:18,290 --> 00:01:21,586
devices, your data, across the Internet,

18
00:01:21,698 --> 00:01:25,506
and even at rest, let's say, on your computers or otherwise,

19
00:01:25,618 --> 00:01:29,210
from misuse. So in this case,

20
00:01:29,360 --> 00:01:33,318
for this presentation, we won't be covering all of the different aspects

21
00:01:33,334 --> 00:01:37,206
of digital security. Rather, we'll be focusing on cryptography,

22
00:01:37,318 --> 00:01:40,734
because that's where Shore's algorithms promises to cause

23
00:01:40,772 --> 00:01:44,826
a lot of mayhem in classical cryptography. So here's

24
00:01:44,858 --> 00:01:47,150
a quick example of what encryption is.

25
00:01:47,300 --> 00:01:50,654
Encryption is the process of taking data that you

26
00:01:50,692 --> 00:01:54,190
already have and converting it to gibberish

27
00:01:54,270 --> 00:01:57,700
using mathematical formulas. So, as an example,

28
00:01:58,550 --> 00:02:00,050
confidentiality.

29
00:02:05,360 --> 00:02:09,392
So let's talk about encryption. Encryption is the process of taking

30
00:02:09,446 --> 00:02:13,772
your data and encoding it using a mathematical algorithm.

31
00:02:13,916 --> 00:02:17,280
This encoding will ensure that anybody who gets access

32
00:02:17,350 --> 00:02:20,944
to your data won't be able to understand, read it,

33
00:02:20,982 --> 00:02:24,496
or really make any use out of it. And this promotes

34
00:02:24,528 --> 00:02:27,716
confidentiality, confidentiality of your data. So you

35
00:02:27,738 --> 00:02:31,044
can rest at ease knowing that nobody will be able to read or

36
00:02:31,082 --> 00:02:35,256
understand what your data is. So here's an example

37
00:02:35,358 --> 00:02:39,108
of encryption at so here's

38
00:02:39,124 --> 00:02:42,484
an example of encryption at play. This is Dave.

39
00:02:42,612 --> 00:02:45,976
Dave has some data that he wants to encrypt. So what is

40
00:02:45,998 --> 00:02:49,368
he going to do? Well, first of all, he's going to take this document

41
00:02:49,464 --> 00:02:52,620
and encrypt it into some gibberish using

42
00:02:52,690 --> 00:02:56,156
a mathematical formula. Now, once he converts it to

43
00:02:56,178 --> 00:02:59,660
this gibberish, he's going to send this gibberish off

44
00:02:59,810 --> 00:03:03,120
to his friend Alice. Now,

45
00:03:03,190 --> 00:03:06,256
Alice not being able to read any of the data,

46
00:03:06,438 --> 00:03:10,304
she is the intended recipient. So she technically should be able to read it,

47
00:03:10,342 --> 00:03:13,828
but she can't because it's gibberish. So what she's going to do

48
00:03:13,914 --> 00:03:17,972
is she's going to use her key, which is essentially able

49
00:03:18,026 --> 00:03:21,236
to reverse the encryption process and get the

50
00:03:21,258 --> 00:03:24,604
original data that Dave sent. Hence,

51
00:03:24,752 --> 00:03:28,696
this sort of loops back into an entire chain where

52
00:03:28,798 --> 00:03:32,356
you can send encrypted data, and then the receiver

53
00:03:32,388 --> 00:03:35,892
can decrypt it using the key that he or she has.

54
00:03:36,046 --> 00:03:39,544
And so this is essentially one kind of encryption,

55
00:03:39,592 --> 00:03:43,276
but it's a very popular one. And this is basically

56
00:03:43,458 --> 00:03:46,700
what you see on the Internet and

57
00:03:46,850 --> 00:03:50,480
many other data communication methods. This is essentially the process

58
00:03:50,550 --> 00:03:53,936
that's being done. So here

59
00:03:53,958 --> 00:03:58,044
are some examples of encryption methods on the Internet. Some of them include

60
00:03:58,092 --> 00:04:01,760
RSA, or the Rivist, Shamir and Edelman algorithm.

61
00:04:01,840 --> 00:04:05,280
These are the names of the creators who created this algorithms.

62
00:04:05,440 --> 00:04:06,470
There's also.

63
00:04:10,040 --> 00:04:13,696
So some examples of these algorithms include RSA,

64
00:04:13,808 --> 00:04:16,868
or the Rivist, Shamir, and Edelman algorithms,

65
00:04:16,964 --> 00:04:20,836
named after the creators of this algorithm. Some use cases

66
00:04:20,868 --> 00:04:23,748
for this algorithms include web browsers,

67
00:04:23,844 --> 00:04:27,176
emails, vpns, and so on. We also

68
00:04:27,198 --> 00:04:30,264
have another algorithm called the diffie Hellman algorithm,

69
00:04:30,312 --> 00:04:33,944
or Df. This algorithm is commonly used in Internet

70
00:04:33,992 --> 00:04:36,264
protocols like TLS, SSH,

71
00:04:36,392 --> 00:04:40,032
iPsec, and so on. Finally, we have

72
00:04:40,086 --> 00:04:43,020
ECC, or elliptic curve cryptography.

73
00:04:43,180 --> 00:04:45,890
You'll know about this if you research.

74
00:04:48,340 --> 00:04:51,948
You'll know about ECC if you research into bitcoin,

75
00:04:52,044 --> 00:04:55,364
cryptocurrency, hashing, and that kind of stuff, because it's very

76
00:04:55,402 --> 00:04:57,220
commonly used in that industry.

77
00:04:58,520 --> 00:05:03,376
So here's

78
00:05:03,408 --> 00:05:06,708
an example of classical factor finding. So in

79
00:05:06,714 --> 00:05:10,136
this example, we want to find the factors of the number 15.

80
00:05:10,318 --> 00:05:13,592
Well, that sounds pretty easy. It's just three and five,

81
00:05:13,646 --> 00:05:16,808
right? Three times five is 15. There we go.

82
00:05:16,974 --> 00:05:20,424
But remember that we, as humans can do this quite easily,

83
00:05:20,472 --> 00:05:24,076
and it's pretty obvious what the answer is. But for a computer,

84
00:05:24,258 --> 00:05:27,772
while there may be more optimized methods, let's just go with

85
00:05:27,826 --> 00:05:31,232
the generic brute force example. So, a computer,

86
00:05:31,366 --> 00:05:35,090
to be able to find the factors of the number 15,

87
00:05:36,660 --> 00:05:40,144
it's going to have to go through all of the possibilities of

88
00:05:40,182 --> 00:05:44,230
factors that can multiply together to create the number 15.

89
00:05:44,840 --> 00:05:48,656
So once this algorithm brute forces

90
00:05:48,768 --> 00:05:52,384
all of the possibilities. And again, there may be more efficient

91
00:05:52,432 --> 00:05:55,876
algorithms, but for our specific use case, and the

92
00:05:55,898 --> 00:05:58,788
message that I want to convey, it isn't going to change too much. So we're

93
00:05:58,804 --> 00:06:02,296
just going to stick with this one. To find the factors of the

94
00:06:02,318 --> 00:06:07,432
number 15, it's going to take approximately 256

95
00:06:07,566 --> 00:06:11,356
possibilities, and that is a lot of possibilities to go through,

96
00:06:11,458 --> 00:06:15,244
until finally, at some point during those

97
00:06:15,282 --> 00:06:18,428
256 possibilities, the computer will be

98
00:06:18,434 --> 00:06:22,270
able to find the factors of 15, which in this case are three and five.

99
00:06:23,140 --> 00:06:26,156
Right. And here's an example of Shore's algorithm.

100
00:06:26,268 --> 00:06:29,696
Now, this is a massive number, like, what's even going on over here?

101
00:06:29,798 --> 00:06:33,964
Well, this is sort of a common number that's used in RSA encryption,

102
00:06:34,092 --> 00:06:38,420
and you can see how many numbers there are. I believe that's about 150

103
00:06:38,490 --> 00:06:42,196
or maybe even 300. That's a very, very big number. And this is the

104
00:06:42,218 --> 00:06:46,276
sort of number that you'd expect to see in an RSA algorithm.

105
00:06:46,468 --> 00:06:50,084
Now, here are the factors of this number. Again, they're massive.

106
00:06:50,132 --> 00:06:53,592
Right. So how do you actually compute this

107
00:06:53,646 --> 00:06:56,872
using a computer? Because if a computer

108
00:06:56,926 --> 00:07:00,748
were to go through all of the possibilities for this number, there'd be

109
00:07:00,914 --> 00:07:05,084
these many possibilities. That's kind of crazy. So how

110
00:07:05,122 --> 00:07:08,140
are computers meant to do it? Well, it's pretty simple,

111
00:07:08,210 --> 00:07:12,432
actually. They can't. So classical computers can

112
00:07:12,486 --> 00:07:15,456
do this calculation in a reasonable amount of time.

113
00:07:15,558 --> 00:07:19,324
It's a problem. However, quantum computers,

114
00:07:19,452 --> 00:07:22,636
they can. So Shore's algorithm,

115
00:07:22,748 --> 00:07:26,004
what does that actually do? Well, imagine going

116
00:07:26,042 --> 00:07:29,812
through all of these possibilities on a classical computer, one after

117
00:07:29,866 --> 00:07:33,636
the other after the other and so on, until you finally reach the

118
00:07:33,658 --> 00:07:37,668
factors that give you the answer 15. So Shore's algorithms

119
00:07:37,764 --> 00:07:41,192
essentially gives you the possibility to search through all

120
00:07:41,246 --> 00:07:45,256
of these possibilities simultaneously with about

121
00:07:45,358 --> 00:07:48,600
eight qubits or eight quantum bits. And that

122
00:07:48,670 --> 00:07:51,896
is a fascinating thing about Shore's algorithm.

123
00:07:52,088 --> 00:07:55,932
It allows you to go through all of these possibilities with just eight

124
00:07:55,986 --> 00:07:59,468
quantum bits or eight qubits, compared to

125
00:07:59,634 --> 00:08:03,056
doing each of these processes individually with,

126
00:08:03,158 --> 00:08:06,432
let's say, a single bit or a couple of bits for each

127
00:08:06,486 --> 00:08:10,256
possibility and doing them iteratively one by one. But with

128
00:08:10,278 --> 00:08:13,300
Shore's algorithm, you can execute all of them at once,

129
00:08:13,450 --> 00:08:16,164
all of the possibilities, you can test all of them,

130
00:08:16,282 --> 00:08:20,228
and you can do that using just eight qubits, which is

131
00:08:20,314 --> 00:08:21,780
absolutely insane.

132
00:08:22,680 --> 00:08:26,676
So with these number of possibilities to go

133
00:08:26,698 --> 00:08:30,744
through, and that's a lot of possibilities, we really end up with two

134
00:08:30,782 --> 00:08:34,180
options here. Either if we do it classically,

135
00:08:34,340 --> 00:08:38,452
it'll basically take an infinite amount of time, because that's a lot of possibilities

136
00:08:38,516 --> 00:08:42,812
to go through. Or if you would do it using a quantum computer,

137
00:08:42,946 --> 00:08:46,156
and let's assume, let's say, 2000 qubits, it would

138
00:08:46,178 --> 00:08:49,892
take about 9.2 years. It's better than the previous

139
00:08:49,976 --> 00:08:54,416
one. So basically infinity, but it still takes 9.2

140
00:08:54,438 --> 00:08:56,684
years with 2000 qubits.

141
00:08:56,812 --> 00:09:00,096
So that isn't something that we can

142
00:09:00,118 --> 00:09:03,344
still feasibly do. Right. So what about that

143
00:09:03,462 --> 00:09:06,772
authentic estimate that if you had about 20

144
00:09:06,906 --> 00:09:10,436
million qubits and that's a lot of qubits, mind you,

145
00:09:10,618 --> 00:09:14,244
that would take 9 hours to

146
00:09:14,282 --> 00:09:18,500
break an RSA encryption. So 9 hours with

147
00:09:18,570 --> 00:09:22,036
20 million qubits, and if you have, let's say, 2000 qubits,

148
00:09:22,068 --> 00:09:25,384
which is a lot more realistic, it'll take you about 9.2 years.

149
00:09:25,502 --> 00:09:29,216
So, yes, it's better than infinity for sure. But practically

150
00:09:29,348 --> 00:09:33,064
actually, breaking an encryption scheme like this, it won't really retain

151
00:09:33,112 --> 00:09:36,750
any of its benefits after like 9.2 years,

152
00:09:37,360 --> 00:09:41,356
or there'd be a very, very low chance of it. And so a hacker's

153
00:09:41,388 --> 00:09:44,930
motive to do this would basically be gone by then.

154
00:09:45,540 --> 00:09:48,988
So what's the reality of quantum computing

155
00:09:49,004 --> 00:09:51,920
in this day and age? Are these things really possible?

156
00:09:52,070 --> 00:09:55,892
Do we have 2000, 20,000 or 20 million

157
00:09:55,946 --> 00:09:59,492
qubits to actually use? Well, no,

158
00:09:59,626 --> 00:10:03,156
unfortunately, we don't. In fact, we're actually very limited by

159
00:10:03,178 --> 00:10:06,816
the number of qubits that we have. So the reality is that IBM's

160
00:10:06,848 --> 00:10:10,040
biggest machine, just 433 qubits,

161
00:10:11,580 --> 00:10:15,588
we said that it would take 9.2 years for a 2000 qubit machine.

162
00:10:15,684 --> 00:10:18,248
But if we just have 433 qubits,

163
00:10:18,344 --> 00:10:22,056
that's pretty bad. And that's

164
00:10:22,088 --> 00:10:25,150
not the only thing. We have another issue to consider as well.

165
00:10:25,760 --> 00:10:28,110
These machines, they're not perfect.

166
00:10:28,880 --> 00:10:32,924
In fact, they're quite the opposite. They are error prone,

167
00:10:33,052 --> 00:10:36,588
meaning that they get a bunch of errors. Your computing

168
00:10:36,684 --> 00:10:40,016
are not perfect. So the

169
00:10:40,038 --> 00:10:43,948
reality of the situation is that your machines have errors.

170
00:10:44,044 --> 00:10:47,760
They won't compute as fast. If you use error mitigation

171
00:10:47,840 --> 00:10:51,892
or error correction techniques, they may not work as well, or it may

172
00:10:51,946 --> 00:10:55,492
take the extend the time of the computation by a lot, and many

173
00:10:55,546 --> 00:10:58,692
other similar problems as well. You need to keep them under dilution.

174
00:10:58,756 --> 00:11:02,804
Refrigerators at very cold temperatures prevent any sort of environmental

175
00:11:02,852 --> 00:11:06,292
noise. It's a very difficult task to actually remove

176
00:11:06,356 --> 00:11:10,216
or prevent errors in a quantum computer. So the

177
00:11:10,238 --> 00:11:13,768
problems are pretty obvious. The first is scalability due

178
00:11:13,784 --> 00:11:17,256
to noise, right. We have noise from our environment, and that affects

179
00:11:17,288 --> 00:11:20,424
our ability to scale the qubits, because our results would be skewed.

180
00:11:20,472 --> 00:11:22,928
They'd not be as accurate as you want them to.

181
00:11:23,094 --> 00:11:26,576
But if we have error correction, that is in

182
00:11:26,598 --> 00:11:30,416
a problem. The problem is that we don't. So we do

183
00:11:30,438 --> 00:11:33,548
not have very good error correction, error mitigation,

184
00:11:33,724 --> 00:11:37,604
or any of these similar techniques to actually reduce or negate these

185
00:11:37,642 --> 00:11:41,348
errors completely. We do not have these techniques made right now,

186
00:11:41,434 --> 00:11:44,676
and that is why quantum computers, practically on

187
00:11:44,698 --> 00:11:48,170
the hardware side, are so limited in today's day and age.

188
00:11:48,940 --> 00:11:52,788
And this is, well, it's definitely very comforting

189
00:11:52,804 --> 00:11:56,504
to us as users of the Internet and technology

190
00:11:56,622 --> 00:11:59,576
in general. But there's still another problem,

191
00:11:59,678 --> 00:12:03,420
which we have to consider called SNDL, or store

192
00:12:03,490 --> 00:12:06,908
now, decrypt later. So what this basically is, and you might

193
00:12:06,914 --> 00:12:10,864
be able to guess by the name, is hackers take encrypted data

194
00:12:10,982 --> 00:12:14,512
and just simply store it. I mean, you can still get encrypted data

195
00:12:14,566 --> 00:12:18,450
pretty easily by doing packet sniffing or basically

196
00:12:19,220 --> 00:12:23,072
sensing a network for transactions going on and

197
00:12:23,126 --> 00:12:26,212
just storing that encrypted data, even though you can't use it,

198
00:12:26,266 --> 00:12:29,668
at least you can store it, right? So what hackers are planning on doing

199
00:12:29,754 --> 00:12:33,750
is storing a bunch of data, credit card data,

200
00:12:34,120 --> 00:12:37,576
transactional data, RSA data, all of these different kinds of

201
00:12:37,598 --> 00:12:41,530
data. They plan to store them and then decrypt it later

202
00:12:43,180 --> 00:12:46,824
when quantum computers actually come onto the scene, and when they

203
00:12:46,862 --> 00:12:50,552
have that many qubits, when they have that level of error correction,

204
00:12:50,696 --> 00:12:54,236
that is what hackers are planning on doing, which is

205
00:12:54,258 --> 00:12:57,804
obviously very dangerous. So post

206
00:12:57,842 --> 00:13:01,628
quantum encryption algorithms, these guys are here to the rescue.

207
00:13:01,804 --> 00:13:05,804
What are they? Well, NIST, the traditional institute

208
00:13:05,852 --> 00:13:10,044
for Standards and Technology, they've essentially partnered

209
00:13:10,092 --> 00:13:13,788
with researchers all around the globe and held a competition

210
00:13:13,884 --> 00:13:17,264
to find the most efficient post quantum encryption algorithms.

211
00:13:17,312 --> 00:13:20,836
These are classical encryption algorithms that are resistant to

212
00:13:20,858 --> 00:13:25,044
quantum attacks, and they came up with quite a few. So what

213
00:13:25,082 --> 00:13:28,052
are they? Well, the first one is crystals.

214
00:13:28,196 --> 00:13:32,180
Crystals does key encapsulation as well as digital signatures.

215
00:13:32,340 --> 00:13:35,480
And this is pretty much one of the most popular ones,

216
00:13:35,550 --> 00:13:38,504
at least in my opinion, out of the three that we're going to see over

217
00:13:38,542 --> 00:13:41,832
here. It is very robust. It has multiple implementations

218
00:13:41,896 --> 00:13:44,936
or variations that have been implemented.

219
00:13:45,048 --> 00:13:48,556
And to be honest, it is my personal favorite. So the first one is

220
00:13:48,578 --> 00:13:52,492
crystals. Second is Falcon. This is specifically for compact

221
00:13:52,556 --> 00:13:56,016
digital signatures. This increases the

222
00:13:56,038 --> 00:13:59,744
speed it takes to actually implement these digital signatures, the time

223
00:13:59,782 --> 00:14:02,944
it takes to encrypt and decrypt and so on. And it makes

224
00:14:02,982 --> 00:14:06,436
the whole sort of sending process to actually send the

225
00:14:06,458 --> 00:14:09,956
information or the digital signatures or the data from one place to the

226
00:14:09,978 --> 00:14:13,088
other. Since the signatures are a lot more compact, it won't

227
00:14:13,104 --> 00:14:16,564
take as much storage space, and hence the

228
00:14:16,602 --> 00:14:19,764
sending of data. Sending and receiving of data is much quicker.

229
00:14:19,892 --> 00:14:23,416
The final algorithms is sphinx. This is a hash based

230
00:14:23,518 --> 00:14:26,792
digital signature algorithm, pretty similar to the other two as well,

231
00:14:26,846 --> 00:14:29,770
although it does have its unique kinks as well.

232
00:14:30,720 --> 00:14:34,044
So that is the end of my talk. It's a pretty short one,

233
00:14:34,082 --> 00:14:37,928
but I hope you got a good general overview of what quantum cybersecurity

234
00:14:38,024 --> 00:14:41,596
is, what shore's algorithm is, and what all of this holds for

235
00:14:41,618 --> 00:14:45,116
us in the future. I just want to talk a bit about QuAE.

236
00:14:45,228 --> 00:14:48,940
So QuAE is an organization that I'm leading

237
00:14:49,100 --> 00:14:52,496
alongside a few other people here in the UAE, and our mission is

238
00:14:52,518 --> 00:14:55,028
to democratize and advance quantum computing education,

239
00:14:55,194 --> 00:14:58,756
empower individuals from diverse backgrounds to explore, understand and

240
00:14:58,778 --> 00:15:02,928
harness the power of quantum technologies. We are under a bigger organization

241
00:15:03,024 --> 00:15:06,576
called Qworld, which does these same global initiatives.

242
00:15:06,768 --> 00:15:09,848
And you could say broadly what our vision is,

243
00:15:09,934 --> 00:15:12,948
is to create a world where quantum computing is accessible,

244
00:15:13,044 --> 00:15:16,916
understood and harnessed by a broad endeavors community. We envision

245
00:15:16,948 --> 00:15:20,860
a future where quantum technologies revolutionize industries, solve complex problems,

246
00:15:20,930 --> 00:15:24,172
and unlock unprecedented possibilities, whether bad

247
00:15:24,226 --> 00:15:27,468
or good. I mean, it's sort of a mix between the

248
00:15:27,474 --> 00:15:30,844
both, as you could clearly see from this presentation. So our

249
00:15:30,882 --> 00:15:34,812
initiatives, what have we done so far? Well, CODIS HQ, it's a government entity

250
00:15:34,876 --> 00:15:37,916
in the UAE that we've partnered with on multiple

251
00:15:37,948 --> 00:15:41,532
occasions, including this one where we did a quantum computing hackathon

252
00:15:41,596 --> 00:15:45,008
at Zaid University. We also did a

253
00:15:45,094 --> 00:15:48,616
demo of New York University, Abu Dhabi's spinq

254
00:15:48,668 --> 00:15:52,016
quantum computer. This is a two qubit nuclear magnetic resonance,

255
00:15:52,048 --> 00:15:55,236
or NMR, quantum computer. And we did a demo for this for

256
00:15:55,258 --> 00:15:58,680
our community live on Zoom.

257
00:15:59,100 --> 00:16:02,216
And then finally we have regular meetups. This was our

258
00:16:02,238 --> 00:16:05,656
first one on the 31 may, quite recent, actually, at code

259
00:16:05,678 --> 00:16:09,530
is HQ, and we talked about quantum computing, what it holds for the future,

260
00:16:10,300 --> 00:16:13,648
and also taught sort of a bit of Kiskit basics. Kiskit,

261
00:16:13,684 --> 00:16:17,436
it's a library which you can use to program quantum computers. And we

262
00:16:17,458 --> 00:16:20,796
covered a lot of basic quantum computing concepts. It was quite a fun experience in

263
00:16:20,818 --> 00:16:24,112
general. And so I invite all of you guys to join us

264
00:16:24,166 --> 00:16:28,128
for our initiatives. Join us on our discord servers for education

265
00:16:28,214 --> 00:16:31,744
related courses, workshops that we regularly organize. We have

266
00:16:31,782 --> 00:16:35,488
unpaid internships, opportunities to work with amazing researchers around the

267
00:16:35,494 --> 00:16:38,784
globe, and also opportunities for independent funding and

268
00:16:38,822 --> 00:16:42,508
doing your own research and sort of advancing the field of quantum science.

269
00:16:42,604 --> 00:16:45,896
So I invite you guys to join our social souls, and thank you

270
00:16:45,918 --> 00:16:48,420
so much for attending this talk. I hope you enjoy the rest of the conference.

