1
00:00:25,410 --> 00:00:30,920
Our name

2
00:01:52,630 --> 00:01:56,722
you. Hi, I'm Tanya Janca and I

3
00:01:56,776 --> 00:02:00,814
am at Comp 42 and I'm going to talk about adding

4
00:02:00,862 --> 00:02:04,094
Das. Now that's a dynamic application security testing

5
00:02:04,142 --> 00:02:07,502
tool to a CI CD pipeline.

6
00:02:07,646 --> 00:02:11,314
But first I want to tell you a story. So I

7
00:02:11,352 --> 00:02:15,214
added the Das to the CI CD pipeline and Batman says it's

8
00:02:15,262 --> 00:02:18,794
too slow. The this

9
00:02:18,832 --> 00:02:22,374
is very reminiscent for me of when I first started adding

10
00:02:22,422 --> 00:02:25,862
security tools. I wants part of an open source project called Owasp

11
00:02:25,926 --> 00:02:29,306
Devswap, like swappy DevOps. And I

12
00:02:29,328 --> 00:02:33,178
had added a dynamic scanning tool and our app did almost nothing.

13
00:02:33,264 --> 00:02:36,974
And it took nine minutes. And I was like, nine minutes isn't that

14
00:02:37,012 --> 00:02:40,446
long? And my other person that wants working on the project with

15
00:02:40,468 --> 00:02:44,202
me said, tanya, it used to take 1 minute. So you added

16
00:02:44,266 --> 00:02:48,002
900%. And it only worked at nine

17
00:02:48,056 --> 00:02:51,266
minutes when I really rushed it and the app didn't really

18
00:02:51,288 --> 00:02:54,418
do anything. And so as the app build and build, it wants

19
00:02:54,424 --> 00:02:57,206
longer and longer. And he's like, dude, what are you doing? And I was like,

20
00:02:57,228 --> 00:03:00,806
you're right. And so I want to talk about how we

21
00:03:00,828 --> 00:03:04,418
can add dynamic application security testing to a CI

22
00:03:04,434 --> 00:03:08,502
CD pipeline without losing any friends because

23
00:03:08,636 --> 00:03:12,810
I realized if I wanted people to, one, let me do these tests, and two,

24
00:03:12,960 --> 00:03:16,394
not kick me off my open source project. I had to go

25
00:03:16,432 --> 00:03:19,994
faster. And so we're going to talk about how I did that. Okay, so I

26
00:03:20,032 --> 00:03:24,042
am Tanya Jenka. I am also known as she hacks purple.

27
00:03:24,186 --> 00:03:27,806
And yes, that's me on my sweatshirt. I am that nerdy that I wear my

28
00:03:27,828 --> 00:03:31,950
own shirt. I am the director of developer relations and

29
00:03:32,020 --> 00:03:36,142
community at Bright. I am the CEO and founder.

30
00:03:36,206 --> 00:03:39,250
We hack purple, which was acquired by Bright.

31
00:03:40,150 --> 00:03:43,650
Again, I already told you this. I wrote a book called Alice and Bob Learn

32
00:03:43,720 --> 00:03:47,454
Application Security. And I'm actually currently writing

33
00:03:47,502 --> 00:03:51,254
my second book, Alice and Bob learn secure coding. So it's pretty clear that

34
00:03:51,292 --> 00:03:54,626
I'm a big nerd. I advise at some startups.

35
00:03:54,658 --> 00:03:58,006
I've been in it a very long time. It's basically the

36
00:03:58,028 --> 00:04:01,814
only thing I know how to do. And I am a nerd

37
00:04:01,942 --> 00:04:05,514
at large on the Internet. That is basically the main key

38
00:04:05,552 --> 00:04:09,738
takeaway. I'm very excited about the security of software and I do lots of content

39
00:04:09,824 --> 00:04:13,440
and stuff. And when I brush my hair, I can look pretty good.

40
00:04:14,130 --> 00:04:16,730
Okay, so what problems are we solving?

41
00:04:16,890 --> 00:04:20,590
Because this presentation isn't about me. It's about us doing

42
00:04:20,660 --> 00:04:24,298
better. And so insecure software is causing

43
00:04:24,394 --> 00:04:27,618
breaches, data breaches all over the world. You already

44
00:04:27,704 --> 00:04:31,602
know that this is a problem. It was about a $6

45
00:04:31,656 --> 00:04:35,534
billion problem in 2020, and it has only grown since

46
00:04:35,592 --> 00:04:38,726
then. It is a

47
00:04:38,748 --> 00:04:43,026
very big problem. I'll just leave it at that. And so DevOps

48
00:04:43,058 --> 00:04:46,534
has some requirements. So if us security folks want to work with

49
00:04:46,572 --> 00:04:50,126
DevOps teams, which we do, we have to follow their rules.

50
00:04:50,178 --> 00:04:53,930
And so that means when we do tests in a pipeline, I've learned

51
00:04:54,910 --> 00:04:58,566
we need to be accurate. We can't have tons of false positives.

52
00:04:58,678 --> 00:05:03,114
We need to go fast. And whenever possible we

53
00:05:03,152 --> 00:05:07,214
want to automate as much as we can. And the reason for this is

54
00:05:07,252 --> 00:05:10,254
because that's what DevOps is. And it's the first way of dev.

55
00:05:10,292 --> 00:05:14,918
Anyway, you should know this. Okay, so devsecops,

56
00:05:15,114 --> 00:05:18,382
so that's us security folks working in a DevOps environment.

57
00:05:18,446 --> 00:05:21,954
If we want to get it right, there's requirements for that.

58
00:05:22,072 --> 00:05:25,362
So we want to test from multiple angles, not just

59
00:05:25,416 --> 00:05:28,738
one. We want to have good relationships between the security

60
00:05:28,824 --> 00:05:32,434
team and whether you call it the dev team and the ops team, the DevOps

61
00:05:32,482 --> 00:05:36,086
team, the awesome, super cool people that make software, whatever you

62
00:05:36,108 --> 00:05:39,846
call them, where you work, us security folks need to have a good relationship

63
00:05:39,948 --> 00:05:43,350
with them if we want to get our jobs done. And then lastly,

64
00:05:43,430 --> 00:05:46,986
we want to have bugs fixed as soon as we can in

65
00:05:47,008 --> 00:05:52,378
the system development lifecycle. So we don't want to find things at

66
00:05:52,384 --> 00:05:55,678
the end. We want to find things as early as we can so they can

67
00:05:55,684 --> 00:05:59,294
be fixed sooner. When it costs less money, it's less difficult.

68
00:05:59,412 --> 00:06:02,914
And also that makes sure they don't accidentally end up

69
00:06:03,032 --> 00:06:06,414
in production. So what's with the acronyms?

70
00:06:06,462 --> 00:06:09,854
Tanya? So dast stands

71
00:06:09,902 --> 00:06:13,662
for dynamic application security testing.

72
00:06:13,806 --> 00:06:17,982
It's an automated, there's so

73
00:06:18,056 --> 00:06:21,526
bright makes one, but a whole bunch of companies make one. Obviously ours is by

74
00:06:21,548 --> 00:06:25,154
far the best. But basically what dynamic scanners

75
00:06:25,202 --> 00:06:28,578
do is they interact with your application while it's running on

76
00:06:28,604 --> 00:06:31,866
a virtual machine or a container or wherever it's running.

77
00:06:32,048 --> 00:06:36,022
And what it does is it sends requests and responses in an automated

78
00:06:36,086 --> 00:06:38,650
way to try to find vulnerabilities.

79
00:06:39,550 --> 00:06:43,406
Most of them, they'll make you a really nice report. And then at the

80
00:06:43,428 --> 00:06:46,794
end it's like, these are the things that are wrong. This is how we suggest

81
00:06:46,842 --> 00:06:50,750
you fix each one and then we hope you

82
00:06:50,820 --> 00:06:54,506
fix them. And so that is the gist

83
00:06:54,538 --> 00:06:58,260
of what a dynamic scanner does. So why

84
00:06:58,870 --> 00:07:01,794
do we need to do this? So there's lots of different ways you can do

85
00:07:01,832 --> 00:07:05,426
security testing if you can only do one type of test.

86
00:07:05,608 --> 00:07:09,202
I personally always start with Das. One is because it's the first

87
00:07:09,256 --> 00:07:12,518
tool I learned so I was a software developer. I learned how

88
00:07:12,604 --> 00:07:15,926
to scan things. I found it really fun. Honestly, the first time

89
00:07:15,948 --> 00:07:18,806
I got to work and I found all these vulnerabilities, I was like, pew,

90
00:07:18,838 --> 00:07:20,860
pew, pew, pew. I'm a hacker. Yeah.

91
00:07:21,550 --> 00:07:25,306
Immediately went out and bought a black hoodie. I did not. But the

92
00:07:25,328 --> 00:07:28,538
point is that of all the security

93
00:07:28,624 --> 00:07:32,238
testing tools, dast and other

94
00:07:32,324 --> 00:07:35,546
variations of tools that do dynamic testing.

95
00:07:35,658 --> 00:07:38,718
So sometimes there's slightly variations on the

96
00:07:38,724 --> 00:07:42,046
name, but basically, if your app's living on the

97
00:07:42,068 --> 00:07:45,742
Internet, any moron can learn how to use a dast

98
00:07:45,806 --> 00:07:49,426
in, like, an hour or less, point it at your app,

99
00:07:49,528 --> 00:07:52,962
and then find vulnerabilities. And most of us

100
00:07:53,016 --> 00:07:57,110
don't have, like, a shield in front of our app, like a content

101
00:07:57,180 --> 00:08:00,738
delivery network or a waf, a web app firewall

102
00:08:00,834 --> 00:08:04,806
or a rasp, a runtime application

103
00:08:04,908 --> 00:08:08,706
security protection tool. Most of us don't have that. Most apps

104
00:08:08,738 --> 00:08:11,546
on the Internet don't have a shield. And so you can't just say, no,

105
00:08:11,568 --> 00:08:14,762
go away. Stop that. And so if

106
00:08:14,816 --> 00:08:18,362
any moron can learn how to use these very quickly and then are very

107
00:08:18,416 --> 00:08:22,234
able to point it at our systems, I feel we should fix

108
00:08:22,272 --> 00:08:25,774
those bugs first. Other bugs where you require a copy of the

109
00:08:25,812 --> 00:08:29,242
code or you have to have lots and lots of time, et cetera, et cetera.

110
00:08:29,306 --> 00:08:33,246
I still think we should fix those bugs, but not at

111
00:08:33,268 --> 00:08:36,610
the same speed and with the same urgency. And so that's why

112
00:08:36,680 --> 00:08:40,446
dast. So you're at a DevOps conference. So I'm

113
00:08:40,478 --> 00:08:44,402
going to assume that, one, you kind of know what DevOps is.

114
00:08:44,536 --> 00:08:48,402
Two, you're very aware that it is not paying one person

115
00:08:48,536 --> 00:08:52,070
to do two jobs. When my cousin, she's like,

116
00:08:52,220 --> 00:08:55,426
my boss told me, we do DevOps now because the ops guy failed.

117
00:08:55,458 --> 00:08:58,086
Like, he left. And so I have to do both jobs. Now, I didn't get

118
00:08:58,108 --> 00:09:01,706
a raise, but apparently I'm a DevOps engineer. That's not what

119
00:09:01,728 --> 00:09:05,018
we mean, and we all know that. But basically,

120
00:09:05,184 --> 00:09:08,650
DevOps is a more modern way to build software. It's also

121
00:09:08,720 --> 00:09:12,014
about the culture and the way that you work. It's about

122
00:09:12,052 --> 00:09:15,738
having better processes to get things done more efficiently.

123
00:09:15,834 --> 00:09:18,810
It focuses on automation, efficiency,

124
00:09:18,970 --> 00:09:22,730
accuracy, and creating rugged software that delight

125
00:09:22,810 --> 00:09:26,458
our customers. Usually we use a CI CD and a whole bunch

126
00:09:26,474 --> 00:09:29,906
of other cool things like infrastructure as code. But the main point is,

127
00:09:29,928 --> 00:09:33,394
it's a very modern way to build software, and I am all

128
00:09:33,432 --> 00:09:36,802
for this as a security person. So, very briefly,

129
00:09:36,946 --> 00:09:40,566
CI CD means the pipeline software that

130
00:09:40,588 --> 00:09:44,134
we use to test and release DevOps has

131
00:09:44,172 --> 00:09:47,350
requirements. So we want to have efficiency of the entire

132
00:09:47,420 --> 00:09:51,378
system. We want to give fast feedback that's accurate

133
00:09:51,474 --> 00:09:54,986
and that actually gets to the right people. There's no point in having a lot

134
00:09:55,008 --> 00:09:58,522
of feedback that's all wrong or never gets to the person who needs

135
00:09:58,576 --> 00:10:02,670
it. And lastly, continuous learning and improvement.

136
00:10:03,010 --> 00:10:07,070
Last point. Not all security testing needs to be in the pipeline.

137
00:10:07,490 --> 00:10:11,546
Okay, so let's talk strategy for putting a dynamic scanner

138
00:10:11,658 --> 00:10:15,166
into your CI CD. So the first thing you can do is you

139
00:10:15,188 --> 00:10:18,798
can put your dynamic scanner in, you check all the boxes,

140
00:10:18,894 --> 00:10:21,986
you click, let's go. And then you lose all the new

141
00:10:22,008 --> 00:10:25,474
friends you made on the nice DevOps team. All those people

142
00:10:25,512 --> 00:10:29,400
are like, you are no longer invited to coffee time or lunch. You broke everything.

143
00:10:30,170 --> 00:10:33,666
This is a bad plan manually when you're first testing

144
00:10:33,698 --> 00:10:37,094
and playing with it, yes, but in a CI CD you're not going to go

145
00:10:37,132 --> 00:10:40,940
fast if you do that. So let's talk about ways you could do better.

146
00:10:41,630 --> 00:10:45,290
So first, refine your scope using

147
00:10:45,360 --> 00:10:49,990
a Har file. So har stands for HTML archive.

148
00:10:50,150 --> 00:10:53,520
And so whatever the name of your file is, it's har.

149
00:10:54,770 --> 00:10:58,698
When you are going to, let's say you're doing your work in sprints

150
00:10:58,874 --> 00:11:02,714
and you are going to be releasing a feature, this Sprint, another feature.

151
00:11:02,762 --> 00:11:06,766
Next sprint, you could record an Har file, shove it

152
00:11:06,788 --> 00:11:09,874
into your dast, and then immediately it is

153
00:11:09,912 --> 00:11:13,234
like a laser focus and it's only going to test those things and that's it.

154
00:11:13,352 --> 00:11:17,070
If you have a QA team that uses har files for automation,

155
00:11:17,150 --> 00:11:21,206
for instance, let's say they use selenium and they record themselves doing things,

156
00:11:21,308 --> 00:11:25,302
you can just plug that into your dast scanner and it is very, very quick.

157
00:11:25,436 --> 00:11:29,066
So that's one way. Another way I think of that

158
00:11:29,088 --> 00:11:32,394
song. Don't worry, be happy, only test what you want.

159
00:11:32,592 --> 00:11:36,134
So this sounds ridiculous, but most security teams,

160
00:11:36,182 --> 00:11:39,674
especially appsec people, they have certain

161
00:11:39,792 --> 00:11:43,694
things that are the end of the world that are very bad. And we

162
00:11:43,732 --> 00:11:47,854
want to make absolute sure nothing like that gets to production. And then

163
00:11:47,892 --> 00:11:51,482
for everything else, we might say, you know what, that can go in the backlog

164
00:11:51,626 --> 00:11:54,814
or that can be fixed within five days or

165
00:11:54,852 --> 00:11:58,670
whatever, but there are certain things that absolutely cannot go to prod.

166
00:11:58,750 --> 00:12:02,958
And so you just test for those things in the release pipeline

167
00:12:03,054 --> 00:12:06,366
and then you test for everything else, either in another pipeline

168
00:12:06,398 --> 00:12:09,830
that no one's waiting on. You overrun it overnight,

169
00:12:10,170 --> 00:12:13,654
all sorts of other things, but just in the release pipeline, just test

170
00:12:13,692 --> 00:12:17,240
the emergency things. So this is another way that you could do it.

171
00:12:17,930 --> 00:12:20,060
This is the way everyone should do it.

172
00:12:21,470 --> 00:12:24,906
Don't check off the boxes. So uncheck any box for a

173
00:12:24,928 --> 00:12:28,806
technology you're not using. So if you made a super awesome ruby

174
00:12:28,838 --> 00:12:32,474
app that has a NoSQL mongo database

175
00:12:32,522 --> 00:12:35,770
attached to it, you don't need to run WordPress tests,

176
00:12:35,850 --> 00:12:39,018
you don't need to run SQL server tests, you don't

177
00:12:39,034 --> 00:12:42,894
need to run Java tests. So uncheck everything that

178
00:12:42,932 --> 00:12:47,086
doesn't apply to you. And although that won't make it 50% faster,

179
00:12:47,118 --> 00:12:50,142
it'll maybe be 10% or 15% faster.

180
00:12:50,286 --> 00:12:53,746
Every bit of speed helps. Okay,

181
00:12:53,848 --> 00:12:57,526
so those are the three things that I would suggest to start with when

182
00:12:57,548 --> 00:13:00,470
you're tuning your system so it can go faster.

183
00:13:01,050 --> 00:13:05,282
Next, you don't have to put everything in a CI CD

184
00:13:05,426 --> 00:13:08,646
to be doing DevOps. So just because we

185
00:13:08,668 --> 00:13:11,766
have this beautiful, shiny pipeline that has lots of cool tests

186
00:13:11,798 --> 00:13:15,130
and all the cool kids are doing it, does not mean every single

187
00:13:15,200 --> 00:13:18,874
security thing needs to go there. So I'm going to talk about

188
00:13:18,992 --> 00:13:22,446
other ways that you can use a das that's also good,

189
00:13:22,628 --> 00:13:26,046
that respects the rules and processes of the

190
00:13:26,068 --> 00:13:29,886
DevOps team. Okay, so you

191
00:13:29,908 --> 00:13:33,354
could do scheduled automated regular scanning.

192
00:13:33,482 --> 00:13:37,234
You could have a dynamic scan run every Sunday on 100%

193
00:13:37,272 --> 00:13:40,430
of your apps. You come in Monday with a whole bunch of reports.

194
00:13:40,510 --> 00:13:43,602
You prioritize, you put things in backlogs, and you go,

195
00:13:43,656 --> 00:13:47,586
you're like Jira tickets for everyone. I'm Oprah. So you can

196
00:13:47,608 --> 00:13:50,946
do this. And this is not that hard. When I first started,

197
00:13:51,048 --> 00:13:54,006
as soon as I realized scheduling was an option, I'm like, oh, I'm always just

198
00:13:54,028 --> 00:13:56,726
going to schedule this late at night so I don't have to wait on it.

199
00:13:56,748 --> 00:13:59,750
I just arrive in the morning with reports.

200
00:14:00,570 --> 00:14:03,990
Another thing you can do is do a one off or a manual scan.

201
00:14:04,070 --> 00:14:07,354
So last year, one of my clients said, oh, yeah, we're going to buy this

202
00:14:07,392 --> 00:14:10,762
company. Could you just do a two or three hour

203
00:14:10,816 --> 00:14:14,202
assessment of this company's web

204
00:14:14,256 --> 00:14:17,054
app? Because we just need to know if it's a disaster or not. And so

205
00:14:17,092 --> 00:14:20,766
I just ran a couple of scans on it manually and then gave them a

206
00:14:20,788 --> 00:14:24,074
report, and then they could renegotiate the price accordingly

207
00:14:24,122 --> 00:14:27,086
because they knew there were some problems that need to be fixed.

208
00:14:27,278 --> 00:14:30,706
Like whenever you get a tool, the first thing you do is play with it

209
00:14:30,728 --> 00:14:34,386
manually before you put it in a CI CD. But sometimes there

210
00:14:34,408 --> 00:14:38,134
are reasons that you need to do things manually, like contracts or

211
00:14:38,172 --> 00:14:42,150
short term things, et cetera. Guess who use

212
00:14:42,220 --> 00:14:45,622
lots of dast tools? Pen testers. Pen testers use all

213
00:14:45,676 --> 00:14:49,026
sorts of different tools. They do also manual testing,

214
00:14:49,138 --> 00:14:52,534
but they'll come with like an entire toolbox worth of stuff. They'll have like 18

215
00:14:52,582 --> 00:14:56,042
2030 different things that they'll test with because they're trying to find

216
00:14:56,096 --> 00:14:59,658
literally everything that's wrong. And you can't do a pen test in

217
00:14:59,664 --> 00:15:02,778
your pipeline. You just can't automate that. You need a really

218
00:15:02,944 --> 00:15:06,798
super duper, well trained security expert. And so that

219
00:15:06,804 --> 00:15:09,790
is another way that you can use a dynamic scanner.

220
00:15:10,370 --> 00:15:14,254
And if you recall, I said just one tool

221
00:15:14,292 --> 00:15:18,142
is not enough. So I work at bright, we sell dast.

222
00:15:18,206 --> 00:15:21,602
That's awesome. But that's not all you need. You need more.

223
00:15:21,736 --> 00:15:25,622
So other types of security tests I'd like you to think about are

224
00:15:25,756 --> 00:15:29,234
static application security testing. So it analyzes

225
00:15:29,282 --> 00:15:31,880
the code that your team wrote for problems,

226
00:15:32,410 --> 00:15:36,114
software composition analysis, or SCA.

227
00:15:36,242 --> 00:15:39,866
This is where basically they look at all the different components you

228
00:15:39,888 --> 00:15:43,318
have in your app. So nuget packages, ruby gems,

229
00:15:43,414 --> 00:15:47,126
libraries, anything that is code you didn't write, but it's

230
00:15:47,158 --> 00:15:50,678
in your app, it checks that to see if it's known to be

231
00:15:50,704 --> 00:15:54,346
vulnerable. Some of them also tests to see if the way you implemented

232
00:15:54,378 --> 00:15:57,726
it, if the vulnerability is exploitable. And that's new and

233
00:15:57,748 --> 00:16:01,518
very cool. Interactive application security

234
00:16:01,604 --> 00:16:04,766
testing, where you put a binary inside your app and it

235
00:16:04,788 --> 00:16:08,770
tests it from the inside out. Secret scanners, these are super

236
00:16:08,840 --> 00:16:11,998
easy. You just run it over your code base and it tells

237
00:16:12,014 --> 00:16:16,258
you anything that looks like a password or a hash, an API key.

238
00:16:16,424 --> 00:16:19,990
And basically it looks for mistakes. So there's so

239
00:16:20,060 --> 00:16:22,630
many types of testing. There's even more than this.

240
00:16:22,780 --> 00:16:26,354
Although I would start with a dynamic scanner, I wouldn't

241
00:16:26,402 --> 00:16:30,550
stop there and I don't want you to either. And so very briefly,

242
00:16:31,290 --> 00:16:34,826
where do we put a dast in the SDLC so we

243
00:16:34,848 --> 00:16:38,586
can do security regression unit testing with

244
00:16:38,608 --> 00:16:42,474
some dynamic scanners. We could test against our

245
00:16:42,512 --> 00:16:45,614
dev server. So as soon as we are able to deploy code or even in

246
00:16:45,652 --> 00:16:48,974
local host, you can aim a dynamic scanner at that and get some

247
00:16:49,012 --> 00:16:52,366
results. When you're in the testing phase, if you're doing a

248
00:16:52,388 --> 00:16:56,266
pen test or you're just trying it out, you could either automate

249
00:16:56,298 --> 00:16:59,570
it in the CI CD or just run it on full blast manually.

250
00:17:00,070 --> 00:17:03,826
You could have a manual pen test done. You can have it tuned in

251
00:17:03,848 --> 00:17:07,378
your CI CD pipeline from then on. So every new release,

252
00:17:07,554 --> 00:17:11,414
it checks for all those emergency things that are really important to you and then

253
00:17:11,452 --> 00:17:14,418
also scheduled weekly tests.

254
00:17:14,594 --> 00:17:18,066
So these are the places in the CI CD

255
00:17:18,098 --> 00:17:21,574
pipeline that you could add it. But how

256
00:17:21,612 --> 00:17:24,934
does dast feel how does it feel to run a dast?

257
00:17:25,062 --> 00:17:28,746
So I personally feel it's like this for

258
00:17:28,768 --> 00:17:31,846
me. But one of my other friends told me for her, it sort of feels

259
00:17:31,878 --> 00:17:35,086
like this. I know twins and they told me it's sort of like

260
00:17:35,108 --> 00:17:39,262
this because they both do testing. It really depends on the person

261
00:17:39,396 --> 00:17:43,054
because everyone feels differently. But the key takeaway is

262
00:17:43,092 --> 00:17:46,450
that I am ridiculous. Okay, so, conclusion.

263
00:17:47,430 --> 00:17:50,846
It's really important if you're going to put an app on the Internet

264
00:17:50,878 --> 00:17:54,274
that you do security testing. Dynamic security testing is where

265
00:17:54,312 --> 00:17:57,494
I would start. I would like it if you also did it.

266
00:17:57,612 --> 00:18:01,046
Automation is all of our friends. Whatever we can

267
00:18:01,068 --> 00:18:03,560
do to automate more stuff, our life is better.

268
00:18:03,930 --> 00:18:07,302
Dynamic testing in a pipeline must be fast

269
00:18:07,436 --> 00:18:11,206
and it must be accurate. We can do dynamic testing

270
00:18:11,238 --> 00:18:14,326
outside the pipeline and still be DevOps friendly.

271
00:18:14,518 --> 00:18:18,218
We're not disobeying all the DevOps rules. If we do

272
00:18:18,384 --> 00:18:22,382
more testing that's more thorough and slower outside the pipeline. If anything,

273
00:18:22,436 --> 00:18:25,870
we're being more respectful of the DevOps processes.

274
00:18:27,010 --> 00:18:30,234
Other types of testing are still needed to find as many vulnerabilities

275
00:18:30,282 --> 00:18:33,898
as possible to make your app very tough and rugged.

276
00:18:34,074 --> 00:18:37,540
The people at bright we can be a little silly sometimes.

277
00:18:38,950 --> 00:18:42,466
Okay, so I have some resources for you. So, first of

278
00:18:42,488 --> 00:18:46,782
all, I have a podcast. It's called the we Hack Purple podcast.

279
00:18:46,926 --> 00:18:50,678
And we're actually now on season three. I just realized it says season two,

280
00:18:50,764 --> 00:18:54,486
where it's just conversations about application security and how to

281
00:18:54,508 --> 00:18:57,926
make more secure software and what tools exist and what are some

282
00:18:57,948 --> 00:19:01,142
good strategies for this or that. And so it's on YouTube,

283
00:19:01,206 --> 00:19:05,450
or it's on any podcast platform in audio only formats.

284
00:19:05,870 --> 00:19:09,014
Awesome books. So there's the DevOps handbook,

285
00:19:09,062 --> 00:19:12,346
the Phoenix Project, accelerate the Unicorn project, and if

286
00:19:12,368 --> 00:19:15,918
you are at Comp 42s DevOps conference, I have a

287
00:19:15,924 --> 00:19:19,582
feeling you've read those. My book is in here. Me and my mom

288
00:19:19,636 --> 00:19:23,006
both agree it's basically the best book ever. We might be

289
00:19:23,028 --> 00:19:26,702
biased, but I'm not sure. I would like to invite

290
00:19:26,766 --> 00:19:30,050
all of you to join the we hack purple community. So this is an online

291
00:19:30,120 --> 00:19:32,418
community that I founded in early 2020,

292
00:19:32,424 --> 00:19:35,506
and basically we have a

293
00:19:35,528 --> 00:19:39,250
whole bunch of free courses, even courses about this topic,

294
00:19:39,410 --> 00:19:42,854
secure coding, how to secure your infrastructure as code,

295
00:19:42,972 --> 00:19:46,440
cloud security appsec. Anyway, it goes on and on and on,

296
00:19:48,170 --> 00:19:51,466
and it's free for you to join. The next thing is,

297
00:19:51,568 --> 00:19:54,934
every Monday on Twitter I use this hashtag,

298
00:19:54,982 --> 00:19:58,422
cyber mentoring Monday to help people find professional mentors.

299
00:19:58,566 --> 00:20:01,786
If you're a Twitter person, please feel free on Monday to check

300
00:20:01,808 --> 00:20:05,120
this out. And maybe find a professional mentor for yourself.

301
00:20:06,530 --> 00:20:09,946
Bright has a blog that is highly technical. If you're

302
00:20:09,978 --> 00:20:13,178
trying to figure out how to fix something and you're not sure, we probably have

303
00:20:13,204 --> 00:20:17,278
an article on it. And so brightsec.com blog

304
00:20:17,374 --> 00:20:20,686
is a good place to learn more stuff. And then lastly,

305
00:20:20,798 --> 00:20:24,734
me my stuff. That's me. I'm me and I'm

306
00:20:24,782 --> 00:20:28,686
shehackspurple everywhere basically if you look that up that's

307
00:20:28,718 --> 00:20:32,310
definitely me except for shehackspurple dev.

308
00:20:32,380 --> 00:20:36,102
Someone took that and it's not me so that's awkward but also

309
00:20:36,156 --> 00:20:39,170
flattering. Imitation is flattering. So I have a newsletter,

310
00:20:39,250 --> 00:20:43,414
YouTube, all the stuff. And lastly, thank you.

311
00:20:43,532 --> 00:20:46,662
Thank you to the organizers of this conference who worked very,

312
00:20:46,716 --> 00:20:49,982
very hard to make it a success. Thank you you

313
00:20:50,076 --> 00:20:53,790
for giving me your time. There's a lot of cool cat videos

314
00:20:53,860 --> 00:20:57,054
on the Internet and instead you chose me. So thank you.

315
00:20:57,092 --> 00:21:00,410
I'm Tanya Janca and I hope you enjoy the rest of the conference.

