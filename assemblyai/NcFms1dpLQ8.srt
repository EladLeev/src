1
00:00:27,410 --> 00:00:30,818
Hello everyone, thanks for joining the session.

2
00:00:30,994 --> 00:00:34,738
AWS AWS AWS Networking simplified a

3
00:00:34,834 --> 00:00:38,198
comprehensive tour key features my goal today is

4
00:00:38,284 --> 00:00:42,550
of course to cover some of the key components on networking.

5
00:00:43,130 --> 00:00:47,046
Because time is limited, I won't be able to cover all the

6
00:00:47,068 --> 00:00:50,362
network components, but I will try to focus on the core

7
00:00:50,426 --> 00:00:54,254
networking component. So just to set expectation for

8
00:00:54,292 --> 00:00:58,560
the talk today, we are not going to go in depth into application

9
00:00:59,090 --> 00:01:02,494
architecture. We're mostly going to be talking about how can you

10
00:01:02,612 --> 00:01:06,194
understand some of the core networking fundamentals and some

11
00:01:06,232 --> 00:01:09,602
of the features that you can use for your organization or your

12
00:01:09,656 --> 00:01:13,634
personal use. To use the best of AWS. So quick

13
00:01:13,672 --> 00:01:17,026
Introduction my name is Samuel Barufi. I am a senior solutions

14
00:01:17,058 --> 00:01:21,106
architect here with AWS and I focus on supporting

15
00:01:21,138 --> 00:01:24,562
global financial services customers on their cloud journey.

16
00:01:24,706 --> 00:01:27,554
So without further ado, let's get started.

17
00:01:27,692 --> 00:01:31,126
Quick agenda. We're going to quickly talk about global infrastructure

18
00:01:31,158 --> 00:01:34,458
on AWS, some of the components, then we're going

19
00:01:34,464 --> 00:01:38,214
to dive deep into VPC. We're going to talk about VPC

20
00:01:38,262 --> 00:01:42,026
security. After that you're going to actually go to the meat

21
00:01:42,058 --> 00:01:45,370
of the presentation talking about empowering endpoints,

22
00:01:45,450 --> 00:01:48,974
gateways and global connectivity. What are the things you can

23
00:01:49,012 --> 00:01:53,134
use to really extend the capabilities of your AWS

24
00:01:53,182 --> 00:01:57,394
network and also potentially into

25
00:01:57,432 --> 00:02:00,674
your hybrid cloud? And to finalize, we're going to talk

26
00:02:00,712 --> 00:02:03,842
about a new service that was introduced last year,

27
00:02:03,896 --> 00:02:07,490
which is very exciting to simplify service to service connectivity.

28
00:02:07,570 --> 00:02:11,266
This is the one that will talk most about application connectivity

29
00:02:11,378 --> 00:02:15,986
and we're going to end the presentation talking about some of the tools

30
00:02:16,018 --> 00:02:19,626
that can help you operationalize your network, such as how

31
00:02:19,648 --> 00:02:23,734
can you have visibility into tour traffic and how can you monitor your traffic.

32
00:02:23,862 --> 00:02:27,770
So let's quickly talk about global infrastructure on AWS.

33
00:02:28,590 --> 00:02:32,430
So the global infrastructure on AWS is a forever growing

34
00:02:33,250 --> 00:02:36,638
footprint as of today, and this is very important.

35
00:02:36,724 --> 00:02:39,918
This might change in a couple of days, weeks and months.

36
00:02:40,084 --> 00:02:43,326
We have launch and available for you as a

37
00:02:43,348 --> 00:02:47,282
customer to consume 32 different regions across

38
00:02:47,336 --> 00:02:50,914
the globe. AWS you can see on this screen with a total of

39
00:02:50,952 --> 00:02:55,394
102 availability zones and more than 450

40
00:02:55,592 --> 00:02:59,202
points of presence for cloudfront distribution. The latest

41
00:02:59,266 --> 00:03:02,870
region that was made available a couple weeks ago was

42
00:03:02,940 --> 00:03:06,230
Israel. So how does

43
00:03:06,380 --> 00:03:10,134
AWS backbone infrastructure treats fault

44
00:03:10,182 --> 00:03:14,406
tolerance? So it's really important to understand that all regions

45
00:03:14,518 --> 00:03:18,234
are compromised of multiple availability zones for high

46
00:03:18,272 --> 00:03:21,742
availability and scalability. So if you look on this

47
00:03:21,796 --> 00:03:25,422
slide, you have a region within a region, you have

48
00:03:25,476 --> 00:03:28,538
multiple availability zones that are interconnected.

49
00:03:28,634 --> 00:03:32,074
So each region has two independent, fully redundant

50
00:03:32,122 --> 00:03:34,980
transit centers. So that's where the traffic goes.

51
00:03:36,950 --> 00:03:40,910
The transit center connects your region and the AZ

52
00:03:40,990 --> 00:03:45,082
that the region are part of to the bigger AWS

53
00:03:45,166 --> 00:03:49,826
ecosystem network. And each availability zone is highly redundant,

54
00:03:49,938 --> 00:03:53,094
connected to each other within the region. And then

55
00:03:53,132 --> 00:03:57,330
within each availability zone you might have one or more data centers

56
00:03:57,410 --> 00:04:00,998
that has independent power, networking and connectivity capacity.

57
00:04:01,094 --> 00:04:04,454
The data center this is a completely abstract scenario,

58
00:04:04,502 --> 00:04:08,154
but this is just to paint the picture on how, when you actually get

59
00:04:08,192 --> 00:04:12,254
to the real data center, how we are abstracting that for

60
00:04:12,292 --> 00:04:15,886
you as a customer. So now that

61
00:04:15,908 --> 00:04:18,906
we know about the regions, the global infrastructure,

62
00:04:19,018 --> 00:04:22,234
let's talk about the first component, which is Amazon

63
00:04:22,282 --> 00:04:25,370
Virtual private cloud, also known as VPC.

64
00:04:25,530 --> 00:04:29,262
So when you're building a VPC, VPC is the original construct.

65
00:04:29,406 --> 00:04:33,394
So you go to a region, in this example, go to region us east one,

66
00:04:33,512 --> 00:04:37,238
and then you create a VPC. VPC stands for virtual private cloud.

67
00:04:37,324 --> 00:04:41,014
It's your own private cloud. Nobody else has access other than

68
00:04:41,052 --> 00:04:44,486
you and your account within the VPC you

69
00:04:44,508 --> 00:04:48,210
are actually going to be, because VPC is a regional construct,

70
00:04:48,290 --> 00:04:51,818
you are going to choose different availability zones that your VPC are

71
00:04:51,824 --> 00:04:55,542
going to be spanning across. So in this case, just for demonstration,

72
00:04:55,686 --> 00:04:59,126
there are two availability zones, and you see that each availability zone,

73
00:04:59,158 --> 00:05:01,360
we have a specific id for your account.

74
00:05:02,770 --> 00:05:06,734
Then once you have the vpcs and you have the

75
00:05:06,772 --> 00:05:10,318
specific availability zones, you can create subnets within

76
00:05:10,404 --> 00:05:13,854
those availability zones and you can have public subnets

77
00:05:13,902 --> 00:05:17,650
and private subnets. Public subnets means you can actually have

78
00:05:17,800 --> 00:05:21,106
connectivity, both ingress and egress to

79
00:05:21,128 --> 00:05:24,574
the outside world. Private subnets means likely

80
00:05:24,622 --> 00:05:28,774
you are not going to have access to inbound connectivity from

81
00:05:28,812 --> 00:05:32,054
the Internet. So if you have a database, you might want to put that

82
00:05:32,092 --> 00:05:35,286
there. Once you deploy a specific

83
00:05:35,388 --> 00:05:39,030
resource, like in this picture on the public subnet, of course

84
00:05:39,100 --> 00:05:42,854
that resource. Let's talk about EC two. Elastic cloud

85
00:05:42,892 --> 00:05:46,762
compute, which is the virtual machine instance that you have on the cloud,

86
00:05:46,896 --> 00:05:50,886
is actually going to be hosted on a specific data center, on a specific rack

87
00:05:50,918 --> 00:05:53,974
on a specific host. But that is completely abstract

88
00:05:54,022 --> 00:05:57,486
from you, so you don't need to worry about it. You just know that that

89
00:05:57,588 --> 00:06:01,582
EC two is now running on a specific subnet and that subnet is

90
00:06:01,636 --> 00:06:05,278
part of a specific availability zone. And then of course you're

91
00:06:05,294 --> 00:06:09,394
going to have an elastic network interface that connects the EC two

92
00:06:09,512 --> 00:06:12,850
to the network on the subnet and on the VPC.

93
00:06:13,750 --> 00:06:17,774
Now when we talk about an important aspect of networking,

94
00:06:17,822 --> 00:06:21,574
which is IP addressing, let's start with IPV four. How does

95
00:06:21,612 --> 00:06:25,414
that work? So I'm going back to the scenario, or you have a VPC with

96
00:06:25,452 --> 00:06:28,886
two availability zones and two public subnets and two private

97
00:06:28,918 --> 00:06:32,870
subnets. The first thing you need to do is associated

98
00:06:32,950 --> 00:06:37,094
a cider rank. So an IP address block to the VPC.

99
00:06:37,222 --> 00:06:40,170
This case 100 zero is like 16.

100
00:06:41,010 --> 00:06:44,926
Now you go and you slice that big subnet from

101
00:06:44,948 --> 00:06:48,414
the VPC and you decide smaller subnets that

102
00:06:48,452 --> 00:06:52,894
are part of that big VPC subnet into

103
00:06:52,932 --> 00:06:56,446
your small subnet. So public subnet you're

104
00:06:56,478 --> 00:06:59,714
going to have a slash 24 and then the private subnet you're going to have

105
00:06:59,752 --> 00:07:06,550
a slash 24. If you're not familiar with subnets

106
00:07:07,290 --> 00:07:10,774
on IP addresses, the slash after that just

107
00:07:10,812 --> 00:07:14,898
mean the amount of bits that you're going to have available to actually consume

108
00:07:14,994 --> 00:07:19,222
within the subnet. So every single cider

109
00:07:19,286 --> 00:07:23,590
block that you see on the subnets are part of the bigger VPC

110
00:07:23,670 --> 00:07:27,194
cider block. Then when you create

111
00:07:27,312 --> 00:07:30,854
specific resources, in this case demonstrating

112
00:07:30,902 --> 00:07:34,538
on the public subnet, on both public subnets you're

113
00:07:34,554 --> 00:07:38,026
going to have a resource and you're going to have what we call EnI elastic

114
00:07:38,058 --> 00:07:41,418
network interface. That Eni will get an IP

115
00:07:41,514 --> 00:07:45,218
that is part of that specific subnet. So in the first example

116
00:07:45,304 --> 00:07:49,314
on the left, 100 138 is the IP address that

117
00:07:49,352 --> 00:07:53,330
your ECQ has been received. And on the other side 100

118
00:07:53,400 --> 00:07:57,026
200, you can have multiple IP address

119
00:07:57,128 --> 00:08:00,806
in an ENI. And there is some limits that we're not going to talk today,

120
00:08:00,908 --> 00:08:04,710
but you can also have two different enis on an ECQ and they can have

121
00:08:04,780 --> 00:08:08,394
different private IP address. So software we are talking

122
00:08:08,432 --> 00:08:12,218
about private IP address. Another aspect that

123
00:08:12,224 --> 00:08:16,662
is important is vpcs can have secondary cider

124
00:08:16,726 --> 00:08:19,894
blocks. So in this case, let's say we have consumed

125
00:08:19,942 --> 00:08:23,482
most of the first cider block. Because VPC cider

126
00:08:23,546 --> 00:08:27,310
blocks, the primary cider blocks cannot be changed.

127
00:08:27,810 --> 00:08:31,146
You can only add new, so you can have secondary cider

128
00:08:31,178 --> 00:08:35,186
blocks into your VPC. So we've added a new one. And when

129
00:08:35,208 --> 00:08:39,054
you look here, it's interesting to know that when you create subnets

130
00:08:39,102 --> 00:08:42,866
you have IP addresses that are reserved. So the way it

131
00:08:42,888 --> 00:08:46,498
works is the first IP address is also going

132
00:08:46,504 --> 00:08:49,526
to be the network address. So we're not going to be able to use the

133
00:08:49,548 --> 00:08:52,934
first zero network address. The second one will always

134
00:08:52,972 --> 00:08:55,890
be your gateway, the VPC router gateway.

135
00:08:56,050 --> 00:08:59,326
The two and three are reserved. Maybe AWS

136
00:08:59,378 --> 00:09:02,982
will use that for other capabilities in the future. So AWs

137
00:09:03,046 --> 00:09:07,098
reserves that it cannot be consumed by your resources. And the

138
00:09:07,264 --> 00:09:10,826
two five five is always the network broadcast. And it doesn't

139
00:09:10,858 --> 00:09:14,814
matter. Each subnet will follow the same aspect because each

140
00:09:14,852 --> 00:09:18,266
subnet requires these five IP address to be reserved,

141
00:09:18,298 --> 00:09:21,950
and each one will have a specific purpose. Now,

142
00:09:22,020 --> 00:09:25,826
when we talked about public IP address, you can

143
00:09:25,848 --> 00:09:29,326
have public IP address associated, and when I mean public IP

144
00:09:29,358 --> 00:09:32,546
address, I'm talking about IP addresses that are routable on

145
00:09:32,568 --> 00:09:36,514
the Internet different than the IP address we've talked so far. So we

146
00:09:36,552 --> 00:09:39,558
see here on this slide, you have an IP address that have been associated to

147
00:09:39,564 --> 00:09:43,202
an EC two. You can also have elastic

148
00:09:43,266 --> 00:09:46,982
IP addresses where you can reserve a specific IP address

149
00:09:47,036 --> 00:09:51,542
for your account, and the difference is on the public subnet

150
00:09:51,606 --> 00:09:55,386
on the left side. If you're just requesting an IP address on

151
00:09:55,408 --> 00:09:58,966
your instance, but you don't have an elastic IP address association,

152
00:09:59,078 --> 00:10:02,134
it just means that if the instance is terminated,

153
00:10:02,262 --> 00:10:05,438
you are not guaranteed to keep the same IP address.

154
00:10:05,524 --> 00:10:08,890
If you create another instance or you restart that instance,

155
00:10:09,050 --> 00:10:12,394
maybe the IP address might change. But if you have an elastic

156
00:10:12,442 --> 00:10:15,826
IP address, that IP address is reserved for your account and

157
00:10:15,848 --> 00:10:19,774
you can always associate to a specific EC two instance

158
00:10:19,822 --> 00:10:23,454
or change in the future. So highly recommend that we use elastic

159
00:10:23,502 --> 00:10:26,514
IP address. And like I said here,

160
00:10:26,552 --> 00:10:29,446
you can just move okay, I want the IP address this time to be on

161
00:10:29,468 --> 00:10:33,078
this interface. If in the future you want that to be associated to

162
00:10:33,084 --> 00:10:36,360
another elastic network interface, you can definitely do it.

163
00:10:38,010 --> 00:10:41,626
So now let's talk about I-P-V six addressing. So as

164
00:10:41,648 --> 00:10:44,726
we know, I-P-V four s, especially public ipv

165
00:10:44,758 --> 00:10:50,106
four s are very limited, and I-P-V six have been kind

166
00:10:50,128 --> 00:10:53,326
of comes in to provide that solution for

167
00:10:53,348 --> 00:10:57,162
the limit amount of ips we have available. So AWS

168
00:10:57,226 --> 00:11:01,082
is highly supported and provides a lot of recommendations

169
00:11:01,146 --> 00:11:04,926
for customers. To use ipv six, you can run I-P-V

170
00:11:04,948 --> 00:11:08,814
six and I-P-V four s at the same time, also known as global.

171
00:11:08,862 --> 00:11:12,210
So in this scenario we're just going to look how you can add ipv six

172
00:11:12,280 --> 00:11:15,826
into this architecture. So you can go on

173
00:11:15,848 --> 00:11:19,634
your VPC and associated an ipv

174
00:11:19,682 --> 00:11:22,982
six block, which is a 56.

175
00:11:23,036 --> 00:11:26,790
Because now instead of only having 32 bits for your subnet as

176
00:11:26,860 --> 00:11:30,362
I-P-V four have, you have 128. And instead

177
00:11:30,416 --> 00:11:33,734
of just being numeric, it's actually hexadeximal.

178
00:11:33,782 --> 00:11:37,066
So you have many many more IP address. So associate to

179
00:11:37,088 --> 00:11:40,422
your VPC, you'll then associate it to the subnet,

180
00:11:40,486 --> 00:11:42,990
you do these lights again to the subnet,

181
00:11:44,050 --> 00:11:47,598
and then what you can actually do, you can see that some

182
00:11:47,684 --> 00:11:51,006
subnets can only have ipv four address,

183
00:11:51,108 --> 00:11:54,894
some subnets might have both. In this case, you want a

184
00:11:54,932 --> 00:11:58,386
private subnet to actually have an ipv six address,

185
00:11:58,488 --> 00:12:01,906
but the other subnet to not have there might be use cases why

186
00:12:01,928 --> 00:12:05,880
you want to do that. Then when you create an instance you can actually,

187
00:12:06,890 --> 00:12:10,230
if you see here on the left side, the instance can also

188
00:12:10,300 --> 00:12:13,878
receive an ipv six

189
00:12:13,964 --> 00:12:17,910
address that is local to tour subnet and

190
00:12:18,060 --> 00:12:21,306
the same reserved IP addresses that we talked on

191
00:12:21,328 --> 00:12:24,906
I-P-V four are also valid for ipv six. You can

192
00:12:24,928 --> 00:12:29,034
see here the demonstration that will be reserved from

193
00:12:29,152 --> 00:12:32,410
the specific 32 will be reserved.

194
00:12:32,570 --> 00:12:36,366
64 is the VPC router and you can see the example on

195
00:12:36,388 --> 00:12:37,440
the right here.

196
00:12:39,490 --> 00:12:43,360
So continuing here, how does intravpc routing works?

197
00:12:43,730 --> 00:12:46,974
So within the VPC itself, right,

198
00:12:47,012 --> 00:12:50,914
intravPC means just within that single VPC. In this

199
00:12:50,952 --> 00:12:54,260
case, every time you add a specific

200
00:12:55,270 --> 00:12:59,438
subnet to your VPC, by default the route

201
00:12:59,534 --> 00:13:03,126
table that you're going to be associated, that is showing here on the screen is

202
00:13:03,148 --> 00:13:06,706
going to create a local target, meaning it doesn't need to route any traffic,

203
00:13:06,738 --> 00:13:11,034
it's already know because it's within the VPC and

204
00:13:11,152 --> 00:13:14,214
you're going to point all those subnets into this routing table.

205
00:13:14,262 --> 00:13:17,818
So if you need to talk from subnet one to private subnet one,

206
00:13:17,904 --> 00:13:21,626
assuming you have specific security permissions to

207
00:13:21,648 --> 00:13:24,570
do that, route wise you are fine.

208
00:13:24,640 --> 00:13:28,366
Network wise you are fine. Now let's talk about some

209
00:13:28,388 --> 00:13:32,206
of the VPC security components, which is important, right? We talked

210
00:13:32,228 --> 00:13:36,510
about the network layer. Let's talk about what the security network

211
00:13:36,850 --> 00:13:39,220
features of VPC are made available.

212
00:13:40,230 --> 00:13:44,254
So by default security groups are attached to resources

213
00:13:44,302 --> 00:13:48,194
like Ectus and it's very important way for you to decide

214
00:13:48,242 --> 00:13:50,914
what it's allowed for inbound and outbound.

215
00:13:51,042 --> 00:13:54,694
So by default the default security groups will always

216
00:13:54,732 --> 00:13:58,594
be that no traffic from outside, no traffic

217
00:13:58,642 --> 00:14:02,186
will be able to come into resource, but always traffic will be

218
00:14:02,208 --> 00:14:05,722
able to go out of the resource. So that is the default group

219
00:14:05,776 --> 00:14:09,626
rule for a security group. When you

220
00:14:09,648 --> 00:14:12,942
want to provide a web server example, let's say you have an EC two

221
00:14:12,996 --> 00:14:16,654
that is part of a subnet and you want to have maybe

222
00:14:16,692 --> 00:14:19,966
internal or external, whatever that may be, you want to provide

223
00:14:20,068 --> 00:14:23,666
access from a specific port. In this case we are

224
00:14:23,688 --> 00:14:27,506
allowing TCP port 80, which is the HTTP port. And when

225
00:14:27,528 --> 00:14:31,170
you see the source, zero zero means

226
00:14:31,240 --> 00:14:34,610
everybody. Unless you know what you're doing, you should always

227
00:14:34,680 --> 00:14:38,020
avoid to do zero zero because everyone,

228
00:14:38,330 --> 00:14:42,706
even if you have a public, especially when you have a public IP address associated

229
00:14:42,738 --> 00:14:46,630
to that security group, it means everyone will have access to that.

230
00:14:46,700 --> 00:14:50,086
So be careful when you do that. But then you

231
00:14:50,108 --> 00:14:53,242
can also have reference other groups in your

232
00:14:53,296 --> 00:14:56,838
security groups. And this is something not a lot of people are familiar, but it's

233
00:14:56,854 --> 00:15:00,406
a very nice way. So here, let's assume you have a EC

234
00:15:00,438 --> 00:15:04,130
two instance that is a web server and you have a database

235
00:15:04,230 --> 00:15:08,206
that EC two instance that is a database. Each EC two has a

236
00:15:08,228 --> 00:15:11,086
different security group. So we have a web server security group and you have a

237
00:15:11,108 --> 00:15:14,434
database security group. Let's assume you want to

238
00:15:14,472 --> 00:15:18,562
give access from the web server EC two to

239
00:15:18,616 --> 00:15:22,206
actually communicate with the database EC

240
00:15:22,238 --> 00:15:25,486
two. Sorry, yeah, exactly. With the database EC two,

241
00:15:25,608 --> 00:15:29,986
what you do here, instead of actually allowing

242
00:15:30,018 --> 00:15:33,654
from everything, and you could potentially just put

243
00:15:33,692 --> 00:15:36,934
the private IP address of the database security group. But then

244
00:15:36,972 --> 00:15:40,530
if the IP address change or if increase more instances,

245
00:15:40,690 --> 00:15:44,134
it's hard to maintain. What you can do is aws the source.

246
00:15:44,182 --> 00:15:48,454
So if you look on the right here where it says database security group inbound

247
00:15:48,502 --> 00:15:51,918
rules, you are saying please allow the port three three

248
00:15:52,004 --> 00:15:55,614
six on the protocol on the TCP protocol from the

249
00:15:55,652 --> 00:15:59,150
source security group web server. So whatever

250
00:15:59,220 --> 00:16:02,862
resources have this security group associated to will

251
00:16:02,916 --> 00:16:06,002
actually have access to talk to your database. So instead

252
00:16:06,056 --> 00:16:09,182
of putting IP addresses, you can put security groups,

253
00:16:09,246 --> 00:16:11,730
references. And this is very, very helpful.

254
00:16:12,710 --> 00:16:16,754
Another example is self referencing rules.

255
00:16:16,882 --> 00:16:19,970
So let's say you have multiple resources,

256
00:16:20,050 --> 00:16:23,334
ecqs that are using the same security group, and you

257
00:16:23,372 --> 00:16:27,174
actually want to give access across these resources for

258
00:16:27,212 --> 00:16:31,146
them to talk to each other. You can actually do a self reference on

259
00:16:31,168 --> 00:16:34,394
the same group and decide what is the inbound port that

260
00:16:34,432 --> 00:16:38,346
is allowed. So in this case, you just put port

261
00:16:38,448 --> 00:16:41,680
80 and every single resource within this

262
00:16:42,210 --> 00:16:45,470
security group will be able to consume port 80 across

263
00:16:45,540 --> 00:16:48,490
this security group resources.

264
00:16:48,650 --> 00:16:52,186
One thing that is important to be aware with security groups,

265
00:16:52,298 --> 00:16:55,454
it means they are stateful. You only need

266
00:16:55,492 --> 00:16:59,298
to open the port that you require access.

267
00:16:59,384 --> 00:17:02,626
You don't need to think about the port that is coming back.

268
00:17:02,728 --> 00:17:07,330
And the reason why I'm talking about that is you also have another aspect

269
00:17:07,490 --> 00:17:11,250
of security on your network that is talked about network

270
00:17:11,330 --> 00:17:15,122
access control, also known as necklace NeCOs.

271
00:17:15,186 --> 00:17:18,906
Instead of actually being associated to a resource like an

272
00:17:18,928 --> 00:17:23,158
EC two, they are associated at a specific subnet

273
00:17:23,334 --> 00:17:26,410
and different than security groups.

274
00:17:27,150 --> 00:17:30,566
Necos network access control lists are stateless,

275
00:17:30,678 --> 00:17:34,454
meaning if you're allowing something to be accessed,

276
00:17:34,502 --> 00:17:37,182
you need to think about the traffic both ways.

277
00:17:37,316 --> 00:17:40,542
So there is something called the thermal ports. So if you're allowing something

278
00:17:40,596 --> 00:17:44,462
to go on port 80, you need to allow the thermal ports to be

279
00:17:44,596 --> 00:17:47,666
outbound as well. Just a small gotcha that I want you

280
00:17:47,688 --> 00:17:52,206
to know. But with knuckles, you can actually have inbound

281
00:17:52,238 --> 00:17:55,474
and outbound rooms similar to the security groups that

282
00:17:55,512 --> 00:17:58,706
are going to be evaluated at the subnet

283
00:17:58,738 --> 00:18:02,006
level. So you can actually both security groups and

284
00:18:02,028 --> 00:18:05,494
network access control lists work at the same

285
00:18:05,532 --> 00:18:09,046
time simultaneously. One is at the resource level and one is at

286
00:18:09,068 --> 00:18:12,374
the subnet level. So be careful when you're using

287
00:18:12,412 --> 00:18:15,500
necklace. You just want to make sure you know what you're doing.

288
00:18:16,670 --> 00:18:19,946
So we talked about VPCs, VPC securities. Let's just

289
00:18:19,968 --> 00:18:23,354
get a little bit more advanced here on peering

290
00:18:23,402 --> 00:18:26,030
endpoints, gateways and global connectivity.

291
00:18:26,850 --> 00:18:30,314
So first we are going to talk about net Gateway and Internet

292
00:18:30,362 --> 00:18:33,818
gateway. What are the differences between them? So going back to

293
00:18:33,844 --> 00:18:37,454
the example where you have a VPC and you have a VPC

294
00:18:37,502 --> 00:18:40,846
with duoistack, so you have ipv four and a pv

295
00:18:40,878 --> 00:18:44,782
six. Every time you want to have any instance

296
00:18:44,846 --> 00:18:48,674
to communicate to the outside, you need to deploy an Internet

297
00:18:48,722 --> 00:18:52,722
gateway. The Internet gateway is just a resource that easily

298
00:18:52,786 --> 00:18:56,278
you create and you associate to a VPC. So in this case we have an

299
00:18:56,284 --> 00:18:59,050
Internet gateway, it's associated to the VPC.

300
00:18:59,630 --> 00:19:03,322
Then you just have a routing table that

301
00:19:03,376 --> 00:19:06,730
says everything that it needs to go, everything that is not specific.

302
00:19:06,800 --> 00:19:10,578
So zero, zero or column column zero for ipv

303
00:19:10,614 --> 00:19:14,542
six, forward that traffic to the Internet gateway. So everything

304
00:19:14,596 --> 00:19:17,674
that needs to go outside will go to the right Internet

305
00:19:17,722 --> 00:19:21,018
gateway route. So in these cases,

306
00:19:21,194 --> 00:19:24,254
because you have IP addresses that are public,

307
00:19:24,452 --> 00:19:28,510
in this case you have ipv six on the left,

308
00:19:28,580 --> 00:19:31,330
private Subnet will go through the Internet gateway.

309
00:19:31,670 --> 00:19:35,410
Now you can also have net gateway and NATS

310
00:19:35,490 --> 00:19:39,222
stands for network address translations. Net are

311
00:19:39,276 --> 00:19:42,662
specific for ipv six, sorry, ipv four,

312
00:19:42,716 --> 00:19:47,074
mostly ipv four. What net does is allows private

313
00:19:47,122 --> 00:19:50,762
subnets that don't have public IP address to

314
00:19:50,816 --> 00:19:53,690
have outbound. So traffic going out,

315
00:19:53,760 --> 00:19:57,500
connectivity to the ward. So if you look here,

316
00:19:57,950 --> 00:20:00,700
this is the configuration we currently have, right?

317
00:20:02,590 --> 00:20:06,270
And you have deployed. Net gateway. So the net gateway you deploy in a public

318
00:20:06,340 --> 00:20:10,094
subnet because the net gateway needs to have a public IP address

319
00:20:10,212 --> 00:20:13,806
to communicate with the Internet gateway. What you

320
00:20:13,828 --> 00:20:17,810
can do is on your private subnet, you can say everything

321
00:20:17,880 --> 00:20:21,202
that needs to go out to the Internet instead of talking

322
00:20:21,256 --> 00:20:24,754
to the Internet gateway because it cannot talk to the Internet gateway because

323
00:20:24,792 --> 00:20:28,306
the resources on the private subnet do not have public IP

324
00:20:28,338 --> 00:20:32,018
address. I want you to forward the traffic to the Nat gateway

325
00:20:32,114 --> 00:20:36,162
and you deploy Nat gateway across subnets into different availability

326
00:20:36,226 --> 00:20:38,390
zones for redundancy reasons.

327
00:20:39,050 --> 00:20:42,066
And once the traffic goes to the NaT gateway, Nat gateway,

328
00:20:42,098 --> 00:20:45,494
because it has a public IP address, will send the traffic to the Internet gateway.

329
00:20:45,542 --> 00:20:48,602
So in this case, the private subnets are only able to go

330
00:20:48,656 --> 00:20:52,410
outbound, connectivity because the private subnets here

331
00:20:52,480 --> 00:20:55,806
on the right don't have a public IP address. They don't have the

332
00:20:55,828 --> 00:20:58,974
ability to actually receive inbound traffic, which is good

333
00:20:59,012 --> 00:21:02,474
because you want to have security. Let's say you have a database,

334
00:21:02,522 --> 00:21:04,980
you don't want the database to have a public IP address.

335
00:21:05,990 --> 00:21:09,246
So another scenario here, another type of Internet gateway,

336
00:21:09,278 --> 00:21:13,054
and this is very specific, it's called the egress only Internet gateway

337
00:21:13,182 --> 00:21:16,758
because on IPV six we are not doing that. And you can

338
00:21:16,764 --> 00:21:20,066
see that on my left, Private subnet,

339
00:21:20,258 --> 00:21:24,150
I have an IPV six address. If I only

340
00:21:24,220 --> 00:21:28,434
want that IPV six to be able to send traffic outbound.

341
00:21:28,482 --> 00:21:33,018
So egress rather than inbound, I can create an egress only

342
00:21:33,184 --> 00:21:36,534
and then I can associate it into this private subnet.

343
00:21:36,582 --> 00:21:40,058
I can associate it a routing table that says if you need to go out,

344
00:21:40,144 --> 00:21:43,594
use the egress only Internet gateway. What this will

345
00:21:43,632 --> 00:21:47,378
do is block the ability of this IPV

346
00:21:47,414 --> 00:21:51,754
six to receive traffic from the Internet. So you can only initiate traffic

347
00:21:51,802 --> 00:21:55,474
to the Internet, but not traffic coming from the Internet to your

348
00:21:55,512 --> 00:21:58,626
IPV six. This is a very recommended way once you

349
00:21:58,648 --> 00:22:03,330
want to have IPV six on your private subnets and

350
00:22:03,480 --> 00:22:07,186
you can just associate it. So in this case the full solution will

351
00:22:07,208 --> 00:22:10,566
kind of be this, right, you have some subnets, in this

352
00:22:10,588 --> 00:22:14,578
case the public subnets will talk directly to the Internet gateway,

353
00:22:14,674 --> 00:22:18,486
but then you have some subnets in case the private subnets that

354
00:22:18,588 --> 00:22:22,406
in the IPV six will talk to the egress only Internet gateway.

355
00:22:22,438 --> 00:22:26,218
And I-P-V four will talk to the net gateway specifically. So you

356
00:22:26,224 --> 00:22:29,914
can use a combination of these tools to achieve the specific use

357
00:22:29,952 --> 00:22:33,754
case you are trying to do. Now, we talked

358
00:22:33,792 --> 00:22:36,974
about peering and then we talked about

359
00:22:37,012 --> 00:22:40,910
net gateways and Internet gateways. Let's talk about peer

360
00:22:41,410 --> 00:22:44,878
with transit gateway endpoints and other types

361
00:22:44,894 --> 00:22:48,366
of empowering. So let's talk first about VPC

362
00:22:48,398 --> 00:22:52,014
empowering. Let's assume you have a scenario, you have two vpcs,

363
00:22:52,062 --> 00:22:55,778
right? And those vpcs need to talk to each other. So you

364
00:22:55,784 --> 00:22:59,382
have maybe resources that are across vpcs and you want to connect

365
00:22:59,436 --> 00:23:03,186
them together. You can use what we call the VPC peering connection. You literally

366
00:23:03,218 --> 00:23:07,094
just choose a specific VPC and the other VPC, you link them

367
00:23:07,132 --> 00:23:09,660
together, always a one to one relationship.

368
00:23:10,590 --> 00:23:14,122
And then on your routing table on both sides you

369
00:23:14,176 --> 00:23:17,846
specify the IPV four or IPV

370
00:23:17,878 --> 00:23:21,514
six and I-P-V six address that is on the other side

371
00:23:21,632 --> 00:23:25,454
and how you can get there. So in this case, if you want to go

372
00:23:25,492 --> 00:23:28,846
from the VPC on the right and you

373
00:23:28,868 --> 00:23:32,794
want to access the VPC on the left. The IPV

374
00:23:32,842 --> 00:23:35,906
four on the VPC on the left is 100, zero is like

375
00:23:35,928 --> 00:23:39,454
16. And how you get there is going through the peering connection.

376
00:23:39,502 --> 00:23:43,970
In this case it's PCX 1234 address.

377
00:23:44,040 --> 00:23:47,254
So very simple. There is no additional cost, only the

378
00:23:47,292 --> 00:23:51,190
data transfer cost that is associated with VPC peering.

379
00:23:51,610 --> 00:23:55,126
Now there is a challenge with VPC peering. Let's assume you

380
00:23:55,148 --> 00:24:00,226
have one, two, three tour, five vpcs

381
00:24:00,258 --> 00:24:03,994
created. And let's assume each VPC needs to be able to talk to each

382
00:24:04,032 --> 00:24:07,814
other. Now you're getting to the sense that because VPC peerings

383
00:24:07,862 --> 00:24:11,958
are one to one relationship and they cannot hop

384
00:24:12,134 --> 00:24:16,346
over, you need to create. So if you have each VPC,

385
00:24:16,378 --> 00:24:19,514
in this case you need to have four empowering connections attached

386
00:24:19,562 --> 00:24:23,246
to it. That becomes really hard when you have a lot of vpcs

387
00:24:23,278 --> 00:24:27,006
and really hard to maintain. And that's why AWS released

388
00:24:27,038 --> 00:24:31,326
a service called Transit Gateway instead of having that complexity

389
00:24:31,438 --> 00:24:34,578
network of multiple peers. What you

390
00:24:34,584 --> 00:24:38,594
can do, you can create a specific AWS transit gateway

391
00:24:38,722 --> 00:24:42,214
on a specific region. So we're talking about a regional construct here.

392
00:24:42,332 --> 00:24:45,382
And then you can create a single attachment for each

393
00:24:45,436 --> 00:24:49,118
VPC. So you have attachment one goes to VPC

394
00:24:49,154 --> 00:24:52,822
one, attachment three goes to VPC three within a single region.

395
00:24:52,966 --> 00:24:56,246
Then you have different routing tables on the AWS transit

396
00:24:56,278 --> 00:24:59,946
gateway saying that, okay, if VPC one wants to

397
00:24:59,968 --> 00:25:03,466
talk to VPC four, the way it's guest to that traffic is

398
00:25:03,488 --> 00:25:06,746
going by attach number four, or if it wants to talk to VPC

399
00:25:06,778 --> 00:25:09,966
five, it goes to attach number five and so forth. So you can

400
00:25:09,988 --> 00:25:13,966
see here where you can have a centralized routing table that

401
00:25:13,988 --> 00:25:18,002
can aggregate everything together and you can exponentially add

402
00:25:18,056 --> 00:25:21,326
more vpcs and it's just going to be an entry

403
00:25:21,358 --> 00:25:26,146
on your routing table and an attachment. You don't need to have multiple

404
00:25:26,338 --> 00:25:30,566
managements of VPC peering, AWS you had with the VPC example

405
00:25:30,668 --> 00:25:34,754
before. Now, the cool thing about transit

406
00:25:34,802 --> 00:25:38,450
is it also supports multiregion, which is very exciting.

407
00:25:38,610 --> 00:25:41,820
So in the example here, let's assume you have,

408
00:25:43,230 --> 00:25:46,522
let's say you have four regions, you have region one, region two,

409
00:25:46,576 --> 00:25:50,366
region three and region four, and you have a couple of vpcs within the

410
00:25:50,388 --> 00:25:53,934
region and you already have maybe transit gateway deployed within

411
00:25:53,972 --> 00:25:57,802
the region. How about if maybe for a multi

412
00:25:57,946 --> 00:26:00,910
region architecture or maybe Dr. Purpose,

413
00:26:01,490 --> 00:26:05,554
the resources across regions needs to talk to each other. It's not

414
00:26:05,592 --> 00:26:09,166
that hard. With transit gateway, you can create transit

415
00:26:09,198 --> 00:26:12,382
gateway peering attachments, so you can have different transit gateways

416
00:26:12,446 --> 00:26:16,514
across the region that are peered with each other. And then in this scenario

417
00:26:16,562 --> 00:26:20,600
and this diagram that I'm showing, you are actually able to consume across

418
00:26:21,130 --> 00:26:22,390
different regions.

419
00:26:24,330 --> 00:26:28,022
So kind of moving into another aspect is

420
00:26:28,156 --> 00:26:31,290
every time you need to consume. So let's say you have, in this example,

421
00:26:31,360 --> 00:26:34,650
you have this EC two that is sitting on the private subnet.

422
00:26:34,990 --> 00:26:38,570
If I need to access services, AWS services

423
00:26:38,640 --> 00:26:42,390
API, let's say I want to talk to a specific kms

424
00:26:42,470 --> 00:26:45,918
key API. The way it works is by default is you are

425
00:26:45,924 --> 00:26:49,406
going to have an Internet gateway in your VPC because this is

426
00:26:49,428 --> 00:26:52,826
a private resource you need, not gateway. And the traffic

427
00:26:52,858 --> 00:26:55,930
will go as follow. We're going to have the routing tables.

428
00:26:56,010 --> 00:26:59,266
The routing tables will tell, okay, if you want to talk to anything in the

429
00:26:59,288 --> 00:27:02,574
Internet, go through not gateway, not where to go through Internet

430
00:27:02,622 --> 00:27:06,274
gateway, then go through the Internet and then talk to

431
00:27:06,312 --> 00:27:10,150
the public API of these services, let's say the public

432
00:27:10,220 --> 00:27:13,922
API of kms. This is okay and this is the default behavior.

433
00:27:13,986 --> 00:27:17,494
The challenge here is you're sending traffic over the Internet even

434
00:27:17,532 --> 00:27:21,398
though these API calls are encrypted in transit,

435
00:27:21,494 --> 00:27:24,906
it's going through the Internet. There are occasions you do not want to

436
00:27:24,928 --> 00:27:28,154
use the Internet. How can you do that? Well, you can

437
00:27:28,192 --> 00:27:31,946
use something called the VPC endpoints. So what

438
00:27:31,968 --> 00:27:35,614
the VPC endpoints is in the same scenario, you have some services here

439
00:27:35,732 --> 00:27:39,360
that you want to consume. In this example here, some list.

440
00:27:39,810 --> 00:27:43,322
Now what you can do, you can create an interface. There are two types.

441
00:27:43,386 --> 00:27:47,374
First, we're going to talk about the interface endpoint. When you create an interface

442
00:27:47,422 --> 00:27:50,898
endpoint, you choose what service that interface is going to

443
00:27:50,904 --> 00:27:54,420
be able to allow consumption for you.

444
00:27:54,790 --> 00:27:58,114
So let's say this is KMs what the interface

445
00:27:58,162 --> 00:28:01,922
endpoint will do. You create a specific elastic network interface

446
00:28:01,986 --> 00:28:05,234
within your subnet and you can associate your interface

447
00:28:05,282 --> 00:28:08,786
endpoint through multiple subnets. And let's

448
00:28:08,818 --> 00:28:11,994
give the example. You want to go to kms again, but you don't want to

449
00:28:12,032 --> 00:28:15,126
use the Internet. You want to use the AWS backbone

450
00:28:15,238 --> 00:28:18,774
connectivity that never touches the Internet. With interface

451
00:28:18,822 --> 00:28:22,142
endpoint, every time you have a resource that wants to talk

452
00:28:22,196 --> 00:28:25,614
to a specific API or a specific resource on

453
00:28:25,652 --> 00:28:29,134
AWS, you go directly. So the error that you see here

454
00:28:29,172 --> 00:28:32,266
is using the AWS backbone connectivity,

455
00:28:32,378 --> 00:28:36,130
you're not going through the Internet. And in this case here, you don't even

456
00:28:36,200 --> 00:28:40,226
need a net gateway or an Internet gateway because let's assume this

457
00:28:40,328 --> 00:28:43,934
EC two does not require Internet connectivity.

458
00:28:43,982 --> 00:28:47,602
It just requires some API services. On AWS

459
00:28:47,666 --> 00:28:50,946
connectivity, like talking to kms or maybe grabbing

460
00:28:50,978 --> 00:28:53,800
a file from S three. You don't need to do that.

461
00:28:54,410 --> 00:28:58,374
So the solution behind the scenes using private link,

462
00:28:58,492 --> 00:29:01,866
which we will talk in a moment, what private link does, but it's pretty much

463
00:29:01,968 --> 00:29:06,438
doing a magic every time you call a AWS API,

464
00:29:06,614 --> 00:29:10,194
there will be a DNS and you automatically resolve the DNS

465
00:29:10,262 --> 00:29:13,822
into a private IP address rather than resolving it to a public

466
00:29:13,876 --> 00:29:17,086
IP address. But there is

467
00:29:17,108 --> 00:29:20,714
a second type of endpoint that is called the VPC gateway

468
00:29:20,762 --> 00:29:24,666
endpoint. The VPC gateway endpoint only supports

469
00:29:24,698 --> 00:29:27,630
two services, s three and DynamDB.

470
00:29:28,470 --> 00:29:32,302
And the main difference is instead of being an interface endpoint,

471
00:29:32,366 --> 00:29:35,758
meaning creating an elastic network interface on your subnet,

472
00:29:35,854 --> 00:29:39,686
it's deployed at a gateway level of your subnet. So if

473
00:29:39,708 --> 00:29:43,346
you need to talk to S three and Dynamo, you actually have a routing table.

474
00:29:43,458 --> 00:29:47,030
The routing table send the traffic direct, your gateway endpoint and then

475
00:29:47,100 --> 00:29:50,438
the gateway endpoint to talk to S three. There are some pros and

476
00:29:50,444 --> 00:29:54,102
cons on using one another. Interface endpoints has vast

477
00:29:54,166 --> 00:29:57,766
support of services, but there is a cost associated gateway endpoints

478
00:29:57,798 --> 00:30:01,002
have just limited two services and there is no cost associated.

479
00:30:01,066 --> 00:30:04,570
So your miles might vary

480
00:30:04,650 --> 00:30:08,734
depending on your use case. So the

481
00:30:08,772 --> 00:30:12,202
cool thing is you can also create specific endpoint

482
00:30:12,266 --> 00:30:16,082
policies. So on your VPC endpoints you can create a policy to

483
00:30:16,136 --> 00:30:19,250
secure what type of connectivity you want to allow.

484
00:30:19,400 --> 00:30:22,754
This is also known as a resource policy, in this

485
00:30:22,792 --> 00:30:26,226
case VPC endpoint policy. It's following

486
00:30:26,258 --> 00:30:29,826
the same JSON policy, AWS tour identity,

487
00:30:29,938 --> 00:30:34,150
IAM policy. In this example I'm restricting

488
00:30:34,970 --> 00:30:38,490
only once I created an endpoint. And with this

489
00:30:38,560 --> 00:30:42,890
specific JSON policy. What I'm saying is this

490
00:30:42,960 --> 00:30:46,250
allows for any actions, any resources, but only

491
00:30:46,320 --> 00:30:50,102
if the role that is trying to invoke

492
00:30:50,246 --> 00:30:53,986
this specific endpoint is the role that is associating

493
00:30:54,038 --> 00:30:57,454
here. But you can have very fine granular details on how

494
00:30:57,492 --> 00:31:00,830
you actually decide this. So it's just hopefully

495
00:31:01,170 --> 00:31:04,482
you can arm your tool set of more things

496
00:31:04,536 --> 00:31:06,770
that you can do to secure your environment.

497
00:31:07,910 --> 00:31:11,794
Now, private link, right? So private link is the technology that

498
00:31:11,832 --> 00:31:15,874
runs on top of the VPC interface endpoint. The cool thing about private

499
00:31:15,922 --> 00:31:20,006
link is you can create specific solutions for your

500
00:31:20,108 --> 00:31:24,626
like using the same backbone network private connectivity of AWS

501
00:31:24,738 --> 00:31:29,122
if you have consumers that want know consume

502
00:31:29,186 --> 00:31:32,522
services from you. So let's say you are a company, a SaaS company,

503
00:31:32,576 --> 00:31:36,890
whatever it is that you are providing a service and tour customers

504
00:31:37,040 --> 00:31:40,666
which are the vpcs on the left. Once you consume your

505
00:31:40,688 --> 00:31:43,914
service into a private way within AWS,

506
00:31:43,962 --> 00:31:47,854
but you have your account and they have their own account and you have different

507
00:31:47,892 --> 00:31:51,310
vpcs. What you can do is you can create a private link

508
00:31:51,380 --> 00:31:54,918
service which deploys an interface endpoint on the consumer

509
00:31:54,954 --> 00:31:59,006
vpcs, similar as we've seen, the endpoint VPC interface

510
00:31:59,038 --> 00:32:03,106
that I just talked about it. And then you can deploy your application and

511
00:32:03,128 --> 00:32:06,406
the way you do, you just deploy a network cloud balancer and you put your

512
00:32:06,428 --> 00:32:09,526
application behind the network load balancer. So when

513
00:32:09,548 --> 00:32:13,430
the consumer VPC is talking to your application, you actually

514
00:32:13,500 --> 00:32:18,118
be using the interface endpoints and using the private backbone of AWS

515
00:32:18,214 --> 00:32:22,234
to talk to your application. So hopefully you can use this to

516
00:32:22,272 --> 00:32:25,914
really provide better private connectivity for

517
00:32:25,952 --> 00:32:29,606
your customers. So now we're

518
00:32:29,638 --> 00:32:33,246
going to talk. There is one more thing that I'm going to

519
00:32:33,268 --> 00:32:37,194
talk about. It is once you have a global connectivity,

520
00:32:37,242 --> 00:32:40,990
maybe hybrid cloud, what are the options available for you to consume?

521
00:32:41,650 --> 00:32:45,218
So let's talk about hybrid connectivity and DNS. So first we are

522
00:32:45,224 --> 00:32:48,574
going to talk about direct Connect site to site client VPN

523
00:32:48,622 --> 00:32:52,178
and then browse 53. Let's start with direct connect.

524
00:32:52,344 --> 00:32:56,182
Direct Connect allows you to connect your data centers or

525
00:32:56,236 --> 00:33:00,562
offices by literally having a direct cable

526
00:33:00,706 --> 00:33:04,486
connecting you and AWS. So you have a region on AWS and

527
00:33:04,508 --> 00:33:08,530
you have your data center. Then you choose a specific direct location.

528
00:33:08,610 --> 00:33:12,570
There are partners direct connect locations and there are AWS direct

529
00:33:12,640 --> 00:33:16,326
connect locations. There is literally a cable, a fiber

530
00:33:16,358 --> 00:33:19,798
cable, a private fiber cable that will be connected between your customer

531
00:33:19,904 --> 00:33:23,450
router on your data center and the direct connect router.

532
00:33:23,610 --> 00:33:27,626
Then you have resources on your region

533
00:33:27,738 --> 00:33:31,102
and you can actually access privately from

534
00:33:31,156 --> 00:33:34,882
your data center going through the private cable that you run into

535
00:33:34,936 --> 00:33:38,734
direct connect. And then direct connect will connect your specific AWS

536
00:33:38,782 --> 00:33:42,942
account. This is very commonly used when you have a hybrid connectivity

537
00:33:43,006 --> 00:33:46,950
for your specific. And you know,

538
00:33:47,020 --> 00:33:50,518
here you have a direct connect gateway and you

539
00:33:50,524 --> 00:33:54,854
can also with direct Connect gateway you can use one

540
00:33:54,892 --> 00:33:58,278
thing here. What this picture is saying. Like you can have different types of

541
00:33:58,284 --> 00:34:02,474
direct connect. One type of direct connect is just allowing your

542
00:34:02,512 --> 00:34:05,866
data center or corporate office to access a specific

543
00:34:05,968 --> 00:34:10,220
AWS APIs in a private scenario. But you can also

544
00:34:10,610 --> 00:34:14,094
have a direct connect gateway that allows the traffic from

545
00:34:14,212 --> 00:34:17,886
your on premise data centers to connect to the

546
00:34:17,908 --> 00:34:21,514
resources that exist on your AWS

547
00:34:21,562 --> 00:34:25,458
account. So you can see here how this gets

548
00:34:25,624 --> 00:34:29,220
together, right? Like it kind of connects them together. And then

549
00:34:30,710 --> 00:34:33,906
in this case, if you want to encrypt, you can actually put a

550
00:34:33,928 --> 00:34:37,614
VPN on top of that. Because by default the traffic between your data

551
00:34:37,672 --> 00:34:41,138
center and the reconnect, even though they are private, they are not encrypted

552
00:34:41,154 --> 00:34:44,840
by default. So you can put a Ipsec VPN which

553
00:34:46,570 --> 00:34:49,030
this is showing for you that you can achieve.

554
00:34:49,930 --> 00:34:53,974
But now if you don't have a lot of resources

555
00:34:54,022 --> 00:34:56,106
and you don't have a lot of time and you don't require a lot of

556
00:34:56,128 --> 00:34:59,562
bandwidth, you can just use a site to site

557
00:34:59,616 --> 00:35:03,190
VPN. With site to site VPC you have your on premise network, you have

558
00:35:03,200 --> 00:35:06,846
your own router. Then you create a virtual private cloud. On the

559
00:35:06,868 --> 00:35:10,602
cloud you create an iPsec VPN which is using the Internet.

560
00:35:10,666 --> 00:35:14,178
So rather than have a private connectivity, even though it's secure and

561
00:35:14,184 --> 00:35:18,674
encrypt, is actually using the Internet as a way to talk

562
00:35:18,712 --> 00:35:22,194
to your resources. So how

563
00:35:22,232 --> 00:35:26,050
would use. You can actually now put together everything

564
00:35:26,120 --> 00:35:30,006
that I just talked about with transit. So you can have a transgender that has

565
00:35:30,028 --> 00:35:34,150
VPC attachments and then you can have VPAN connectivity

566
00:35:34,730 --> 00:35:38,490
across multiple on premise networks. Let's say you have multiple

567
00:35:38,990 --> 00:35:42,810
private branches or data centers. Instead of having to

568
00:35:42,880 --> 00:35:46,714
connect to each VPC, you can have the transit gateway being the

569
00:35:46,752 --> 00:35:50,906
centralization. So apologies. So the

570
00:35:50,928 --> 00:35:54,442
transit gate will not only solve your problem internally

571
00:35:54,506 --> 00:35:57,280
within AWS, but also for your hybrid cloud.

572
00:35:58,530 --> 00:36:02,206
Now there is another type of VPN which is very specific. It's called the

573
00:36:02,228 --> 00:36:05,842
client VPN. Let's assume you have developers that

574
00:36:05,896 --> 00:36:09,234
want to have access, private access to tour

575
00:36:09,272 --> 00:36:12,594
AWS network running on their laptop. So maybe

576
00:36:12,632 --> 00:36:16,674
they are working remote and you want to provide them the ability to consume

577
00:36:16,722 --> 00:36:20,338
resources that are available within your AWS.

578
00:36:20,434 --> 00:36:24,066
So you deployed a service called the client VPC endpoint.

579
00:36:24,258 --> 00:36:27,586
You can install a software on developers

580
00:36:27,698 --> 00:36:31,690
client laptop and they're going to connect to the client VPN endpoint

581
00:36:32,350 --> 00:36:36,042
and then they're going to have access to tour VPC endpoint. In this case

582
00:36:36,096 --> 00:36:39,626
the ten 10 is 60. I'm just going to take

583
00:36:39,648 --> 00:36:40,780
up a sip of water.

584
00:36:43,310 --> 00:36:46,986
So this is a way you can achieve that. So it's fully managed,

585
00:36:47,018 --> 00:36:50,218
you don't need to do anything. It supports splitting.

586
00:36:50,314 --> 00:36:53,786
So it means that if you only want to send traffic

587
00:36:53,818 --> 00:36:57,498
for the IP address from specific subnets or the whole VPC,

588
00:36:57,594 --> 00:37:01,054
you can support that. Or you can send all the traffic,

589
00:37:01,102 --> 00:37:04,178
even Internet traffic to your account. And you

590
00:37:04,184 --> 00:37:08,178
can also do client authentication using active directory or other types

591
00:37:08,194 --> 00:37:11,942
of federation. And in dance you provide

592
00:37:11,996 --> 00:37:15,206
client to client connectivity. Even like you can actually talk to

593
00:37:15,228 --> 00:37:17,750
each other if you deem necessary.

594
00:37:18,970 --> 00:37:22,218
So how do we bring all together? So in this case we have a

595
00:37:22,224 --> 00:37:25,798
region multiple VPC and you have maybe a couple of data centers.

596
00:37:25,894 --> 00:37:29,206
So here you have a nag gateway. We talked about the Internet

597
00:37:29,238 --> 00:37:32,446
gateway egress only. For IPV six you have

598
00:37:32,468 --> 00:37:35,946
transit gateway connecting different maybe vpcs.

599
00:37:35,978 --> 00:37:39,230
Or you can choose to have a VPC peering endpoint.

600
00:37:40,850 --> 00:37:44,740
You can have specific endpoints if you are consuming specific services,

601
00:37:45,110 --> 00:37:49,666
but then you can have direct connect from your on

602
00:37:49,688 --> 00:37:53,666
premise branch or maybe data center. You can

603
00:37:53,688 --> 00:37:56,930
also have direct connect gateway if you want to access those resources.

604
00:37:57,990 --> 00:38:01,666
Or you can choose to have a VPN site to site connectivity.

605
00:38:01,778 --> 00:38:05,446
So I know this is a lot, but this is to show you that the

606
00:38:05,468 --> 00:38:08,380
capabilities and choices are here for you to choose.

607
00:38:09,870 --> 00:38:13,686
One thing I want to talk about it is DNS quickly. So Amazon route

608
00:38:13,718 --> 00:38:17,254
53 is the DNS service on AWS

609
00:38:17,302 --> 00:38:21,630
and Amazon Route 53 resolver allows

610
00:38:21,970 --> 00:38:25,370
domain name resolutions to be done internally,

611
00:38:25,450 --> 00:38:28,782
kind of super transparently. So all the Amazon provide

612
00:38:28,836 --> 00:38:32,302
dnss, which is the VPC plus two are done

613
00:38:32,356 --> 00:38:36,414
automatically if you choose when you're deploying your architecture.

614
00:38:36,542 --> 00:38:40,206
So you can support DNS host names, you can have private host names.

615
00:38:40,238 --> 00:38:43,534
So when you create an EC two you can have this private hostname.

616
00:38:43,662 --> 00:38:47,026
The reason why your VPC know how to resolve

617
00:38:47,058 --> 00:38:50,774
this is because route 53, so these specific

618
00:38:50,892 --> 00:38:54,454
DNS can be resolved to a specific IP address because

619
00:38:54,492 --> 00:38:57,822
the route 53 resolver for VPC

620
00:38:57,906 --> 00:39:01,526
is available. You can also support resource based private

621
00:39:01,558 --> 00:39:05,530
VPC. So in this case it's using the resource based IP address,

622
00:39:05,680 --> 00:39:09,530
not the DNS with the IP address itself.

623
00:39:09,680 --> 00:39:13,582
You can also resolve public DNS names and

624
00:39:13,636 --> 00:39:17,114
it's as simple as on the VPC you can just decide if you have DNS

625
00:39:17,162 --> 00:39:20,542
host names and DNS resolution enabled. By default those

626
00:39:20,596 --> 00:39:25,210
are enabled. So let's talk about the simplified.

627
00:39:25,290 --> 00:39:28,962
So we talked about a lot of things that are not very specific to

628
00:39:29,016 --> 00:39:32,882
application, but I just want to present to you again to

629
00:39:32,936 --> 00:39:36,946
have that on your toolbox is a service that can simplify server

630
00:39:36,978 --> 00:39:40,294
to service connectivity. The name of this service

631
00:39:40,332 --> 00:39:44,546
is VPC lattice VPC lattice allows

632
00:39:44,578 --> 00:39:48,134
you to have a service mesh for cross

633
00:39:48,182 --> 00:39:51,718
account cross VPC connections without having to managing

634
00:39:51,814 --> 00:39:55,686
peers transit gateways or like being worrying

635
00:39:55,718 --> 00:39:59,526
about overlapping cider ranges with IP address or maybe ipv

636
00:39:59,558 --> 00:40:02,974
six address. It supports a consistent number

637
00:40:03,012 --> 00:40:06,334
of services, compute services like eks, EC two

638
00:40:06,452 --> 00:40:10,190
lambda and elastic compute service elastic container service.

639
00:40:10,260 --> 00:40:13,982
Sorry. By default it works at a layer seven

640
00:40:14,036 --> 00:40:17,694
protocol so you know how to do proper HTTP

641
00:40:17,742 --> 00:40:21,154
routing and so forth. And there is a lot of security being

642
00:40:21,272 --> 00:40:25,166
made available for you so you can centralize the control of your inbound

643
00:40:25,198 --> 00:40:28,690
and outbound traffic for internal communication.

644
00:40:28,850 --> 00:40:32,294
How does that work? Right, so let's say you have two

645
00:40:32,332 --> 00:40:35,794
vpcs and you have a VPC where that VPC,

646
00:40:35,842 --> 00:40:39,158
you have a service that is the parking service and

647
00:40:39,164 --> 00:40:43,560
then you have another VPC that runs. It could be cross account

648
00:40:44,410 --> 00:40:47,754
or it cloud be in the same account and you actually don't want to

649
00:40:47,792 --> 00:40:51,546
create a VPC peering connectivity. You don't want to create a net a

650
00:40:51,568 --> 00:40:54,654
transit gateway, you don't want to create the routings. You just literally want

651
00:40:54,692 --> 00:40:58,718
to give the parking service access to the billing service.

652
00:40:58,884 --> 00:41:02,486
What you can do, you can easily have the VPC lattice

653
00:41:02,538 --> 00:41:06,210
service network deployed across these two VPC and connect

654
00:41:06,280 --> 00:41:10,414
the instance to the VPC lattice service network

655
00:41:10,542 --> 00:41:14,418
that will allow simple cross VPC connectivity without

656
00:41:14,504 --> 00:41:17,730
needing to manage anything that I just talked about previously.

657
00:41:17,810 --> 00:41:21,174
So this is kind of literally a

658
00:41:21,212 --> 00:41:24,418
mindset change on how you can architect your solutions.

659
00:41:24,514 --> 00:41:27,894
Let me give you more examples. Let's say you

660
00:41:27,932 --> 00:41:31,926
want to have different HTTP APIs

661
00:41:32,118 --> 00:41:35,462
and you want to decide specific path basis rules.

662
00:41:35,526 --> 00:41:38,666
So let's say you have a service, again that is a billing service and you

663
00:41:38,688 --> 00:41:42,202
have resources on the VPC and you want to send that

664
00:41:42,336 --> 00:41:46,234
depending on the path you go. So let's say you go with API parking,

665
00:41:46,362 --> 00:41:50,426
you want to send that to a specific VPC that have its own resources

666
00:41:50,538 --> 00:41:54,654
that are managing the parking. Or when you go to API

667
00:41:54,782 --> 00:41:58,466
inventory, you want to send to another VPC. You don't need to

668
00:41:58,488 --> 00:42:01,778
do anything other than creating the routing rules on

669
00:42:01,784 --> 00:42:05,606
the VPC lattice service network. So every time

670
00:42:05,708 --> 00:42:08,786
the service billing will go and talk to API inventory,

671
00:42:08,898 --> 00:42:12,998
the VPC Lida service network will know what to forward

672
00:42:13,084 --> 00:42:15,430
to, in this case the VPC tree.

673
00:42:16,330 --> 00:42:20,294
Another example is granular

674
00:42:20,342 --> 00:42:24,266
ways to secure access to service to service. So you

675
00:42:24,288 --> 00:42:27,594
can actually specify who are

676
00:42:27,632 --> 00:42:30,986
the consumers. In this case the billing. You can say

677
00:42:31,008 --> 00:42:34,686
like you can have multiple services on your service network and

678
00:42:34,708 --> 00:42:38,446
you can decide for example the billing service can only talk to

679
00:42:38,468 --> 00:42:41,854
the parking service, it shouldn't be able to talk to the

680
00:42:41,892 --> 00:42:45,266
inventory. You can create those rules and you can

681
00:42:45,288 --> 00:42:49,374
have a lot of specific rules configured on the VPC lattice

682
00:42:49,422 --> 00:42:52,802
service network saying the billing service only

683
00:42:52,856 --> 00:42:58,306
talks to the parking, not through the inventory. And you can have very complex

684
00:42:58,418 --> 00:43:02,150
and fine grained permissions to achieve what we call

685
00:43:02,220 --> 00:43:05,942
zero trust. So another

686
00:43:05,996 --> 00:43:09,738
thing here that I want to show is to kind of end the presentation is

687
00:43:09,824 --> 00:43:13,446
how can you achieve traffic visibility and monitoring.

688
00:43:13,638 --> 00:43:17,770
So first is VPC flow log. VPC flow logs.

689
00:43:18,110 --> 00:43:21,914
Here you just have an example. Provides all

690
00:43:22,112 --> 00:43:25,770
the VPC data like the traffic. If you enable

691
00:43:25,850 --> 00:43:29,098
the traffic that is going on, your VPC can be logged

692
00:43:29,194 --> 00:43:32,910
on a very specific format so you can have the version, the account

693
00:43:32,980 --> 00:43:36,258
where it's going, what is the IP address, what is the region, what is the

694
00:43:36,264 --> 00:43:40,174
availability, so on and so forth. And then you can actually query

695
00:43:40,302 --> 00:43:44,226
that can be saved on Cloudwatch or can be saved on s three and

696
00:43:44,248 --> 00:43:48,262
you can actually query to see specific. In this example,

697
00:43:48,316 --> 00:43:51,414
it's like, hey, can I tell the connectivity between

698
00:43:51,452 --> 00:43:55,000
these two address, how much bytes have been transferred on this specific

699
00:43:56,090 --> 00:43:59,262
time frame? So you can do that with VPC follow ups.

700
00:43:59,346 --> 00:44:03,194
Highly recommend everyone to enable VPC follow ups because that gives

701
00:44:03,232 --> 00:44:06,714
you the security and ability to inspect what type of

702
00:44:06,752 --> 00:44:09,820
network connectivity have been enabled on your account.

703
00:44:10,990 --> 00:44:14,954
Another interesting feature that you can enable on VPC

704
00:44:15,002 --> 00:44:18,766
is called the traffic mirroring. So traffic mirroring is really important if

705
00:44:18,788 --> 00:44:22,960
you want to do like traffic inspection or any type of security

706
00:44:24,050 --> 00:44:28,014
real time capability, but you don't want to impact the performance

707
00:44:28,062 --> 00:44:31,534
of your current architecture. So what you can do, you can literally

708
00:44:31,582 --> 00:44:34,958
go and enable. In this case, there is no traffic enabled, but you

709
00:44:34,984 --> 00:44:38,614
can enable now a traffic. And once

710
00:44:38,652 --> 00:44:41,350
you enable, so you click to enable the traffic.

711
00:44:41,850 --> 00:44:45,720
What did you do? Every single packet that has been sent

712
00:44:46,490 --> 00:44:50,454
tour specific VPC work properly. But once you enable

713
00:44:50,502 --> 00:44:54,154
VPC traffic mirroring, you can create a monitoring instance. So you can create

714
00:44:54,192 --> 00:44:58,214
your own traffic analyzer using open source traffic analysis

715
00:44:58,262 --> 00:45:01,630
or using AWS traffic mirroring partners.

716
00:45:03,090 --> 00:45:06,986
Every single packet that is sent to your VPC will be replicated

717
00:45:07,098 --> 00:45:10,126
and mirrored into that specific ENi. And then

718
00:45:10,148 --> 00:45:14,174
you can create a lot of specific security inspections in

719
00:45:14,212 --> 00:45:18,362
real time. And that concludes my presentation.

720
00:45:18,506 --> 00:45:22,478
I hope you were able to learn some of the key components. I know

721
00:45:22,564 --> 00:45:26,038
there was a lot that I covered and I kind of went little bit quickly.

722
00:45:26,204 --> 00:45:29,522
If you have any questions, feel free to connect with me on LinkedIn.

723
00:45:29,586 --> 00:45:33,286
My name is Samuel Baruffi. I appreciate your time, thank you so

724
00:45:33,308 --> 00:45:34,050
much and bye.

