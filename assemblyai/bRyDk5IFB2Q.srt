1
00:02:14,930 --> 00:02:18,590
Hi everyone. Welcome to Terraform secured by open policy

2
00:02:18,660 --> 00:02:22,126
agent. Today we're going to talk about adding policy as code

3
00:02:22,228 --> 00:02:25,754
to your infrastructure. As code my name is Peter

4
00:02:25,802 --> 00:02:29,502
Oneill. I am the community advocate for the open policy agent

5
00:02:29,556 --> 00:02:33,146
project. I'm also a digital nomad and contributor

6
00:02:33,178 --> 00:02:36,854
to open source projects. You can find me on on pretty much all social

7
00:02:36,892 --> 00:02:39,910
media platforms with at Peter Oneill Jr.

8
00:02:40,250 --> 00:02:43,986
On today's agenda. First we're going to discuss Terraform and infrastructure

9
00:02:44,018 --> 00:02:47,606
as code. Kind of just how these tools came

10
00:02:47,628 --> 00:02:51,178
about and what they do for us right now. Then we're going to

11
00:02:51,184 --> 00:02:55,126
talk about introducing these concepts into Gitops

12
00:02:55,158 --> 00:02:58,918
best practices and putting them into your CI CD pipeline.

13
00:02:59,094 --> 00:03:02,798
Next we're going to talk about how do we authorize the changes

14
00:03:02,884 --> 00:03:06,410
that are challenging with Terraform and your CI CD pipeline

15
00:03:06,490 --> 00:03:11,150
and how to best control what is happening next.

16
00:03:11,220 --> 00:03:14,974
After this, we're going to talk about decoupling these policies

17
00:03:15,022 --> 00:03:18,770
or decisions in this pipeline so that you're no longer baking

18
00:03:19,190 --> 00:03:21,842
these policies into your services,

19
00:03:21,976 --> 00:03:25,874
but rather having a standalone tool like open policy agent to

20
00:03:25,912 --> 00:03:29,806
handle this decision making. And then lastly,

21
00:03:29,838 --> 00:03:33,574
we're going to talk about securing putting

22
00:03:33,612 --> 00:03:36,834
this whole process together. And what does it look like to have a secure pipeline

23
00:03:36,882 --> 00:03:40,714
with Terraform? Terraform apply secured open policy agent everything

24
00:03:40,752 --> 00:03:44,566
up. We'll show a quick demo of how this all works with Terraform,

25
00:03:44,678 --> 00:03:47,210
Opa and GitHub actions.

26
00:03:47,550 --> 00:03:51,358
So to start, Terraform brought about the idea of

27
00:03:51,444 --> 00:03:55,726
defining your infrastructure as code. And with this idea cause

28
00:03:55,908 --> 00:03:59,946
the concept of moving from an imperative type of programming

29
00:03:59,978 --> 00:04:03,306
languages to a declarative type of programming language.

30
00:04:03,418 --> 00:04:07,438
And so to create a simple analogy here, let's talk about driving

31
00:04:07,534 --> 00:04:11,186
to a destination. When driving to a destination, you can hop in the

32
00:04:11,208 --> 00:04:14,594
car and drive yourself. Think of this as the imperative model where

33
00:04:14,712 --> 00:04:18,310
you choose every twist and turn that you need to do in order to

34
00:04:18,380 --> 00:04:22,118
get to the destination. Or you can do the declarative model

35
00:04:22,204 --> 00:04:25,638
where you choose a destination and then you

36
00:04:25,724 --> 00:04:29,094
call a taxi or a rideshare app and they figure

37
00:04:29,132 --> 00:04:33,526
but the directions, you're no longer in control of the individual twists

38
00:04:33,558 --> 00:04:36,458
and turns, but rather you just want to get to that end state. You want

39
00:04:36,464 --> 00:04:39,994
to get to that destination. So you're declaring that I want to be

40
00:04:40,112 --> 00:04:43,534
at this destination. So imperative is you

41
00:04:43,572 --> 00:04:47,550
decide each twist and turn on how to get there and then declarative is

42
00:04:47,700 --> 00:04:51,822
just wanting to get to the destination and letting the service

43
00:04:51,956 --> 00:04:55,486
handle the rest. So using that same analogy

44
00:04:55,518 --> 00:04:59,234
for driving, we are going to look at the three phases for

45
00:04:59,272 --> 00:05:03,454
deploying infrastructure as code. First, we have the coding phase

46
00:05:03,502 --> 00:05:07,298
where we are writing the terraform manifest files. And so you

47
00:05:07,304 --> 00:05:10,246
can think of this as choosing the destination that we want to go to,

48
00:05:10,348 --> 00:05:14,162
or understanding the full picture of our infrastructure

49
00:05:14,226 --> 00:05:16,760
as we see it in the end state.

50
00:05:17,610 --> 00:05:21,206
And then so knowing what the end state is or the destination,

51
00:05:21,318 --> 00:05:25,114
we can now generate a plan. And so with

52
00:05:25,152 --> 00:05:30,262
this plan, this is very similar to seeing the gps destination

53
00:05:30,326 --> 00:05:34,502
on your smartphone before actually going to that destination

54
00:05:34,566 --> 00:05:37,838
or taking that ride share. So this is seeing the route and each of the

55
00:05:37,844 --> 00:05:41,662
twists and turns. And so with terraform, we're going to see each

56
00:05:41,716 --> 00:05:45,534
of the resources we went to create or modify and then

57
00:05:45,572 --> 00:05:48,900
each of these changes that needs to happen in order to reach the end started.

58
00:05:49,270 --> 00:05:52,706
And once we have this plan and we know the end state, now we

59
00:05:52,728 --> 00:05:56,126
can approve this plan and execute

60
00:05:56,158 --> 00:06:00,774
it. And during the apply phase, when we are executing this plan, if everything

61
00:06:00,972 --> 00:06:04,982
comes according to plan, then there'll be no errors and we'll be exactly

62
00:06:05,036 --> 00:06:08,294
where we need to be. But if there are errors along the way, because the

63
00:06:08,332 --> 00:06:11,446
infrastructure at the time of the plan doesn't match the

64
00:06:11,468 --> 00:06:14,860
current state, this is where those errors will bubble up. And then

65
00:06:15,310 --> 00:06:19,242
when an error occurs, you can either roll back or stop the plan,

66
00:06:19,296 --> 00:06:23,246
or stop the apply where it is in order to fix the problems

67
00:06:23,348 --> 00:06:27,258
and then continue the planned code creation

68
00:06:27,434 --> 00:06:31,070
from the point that you are at. And while

69
00:06:31,140 --> 00:06:35,122
in a dev or test environment, running terraform apply

70
00:06:35,176 --> 00:06:38,402
directly from your laptop may be acceptable. Typically you

71
00:06:38,456 --> 00:06:42,626
will want something a bit more robust once

72
00:06:42,648 --> 00:06:45,786
you are in a shared team or production environment.

73
00:06:45,918 --> 00:06:49,714
And so with that you will want to run your terraform

74
00:06:49,762 --> 00:06:53,282
apply as part of a continuous delivery or continuous

75
00:06:53,346 --> 00:06:57,394
deployment model. So with continuous delivery

76
00:06:57,442 --> 00:07:01,354
or continuous deployment, we went to use the same Gitops best

77
00:07:01,392 --> 00:07:05,002
practices we use for the dev

78
00:07:05,056 --> 00:07:08,598
side on our infrastructure side as well. Right? So with these Gitops

79
00:07:08,614 --> 00:07:11,962
best practices, these are having a single source of truth.

80
00:07:12,026 --> 00:07:15,758
Being a git repo, this is going to be

81
00:07:15,924 --> 00:07:20,506
defining what you want in a declarative language, being Hashicorps HCL.

82
00:07:20,698 --> 00:07:24,314
And then any changes should be versioned. So anytime

83
00:07:24,362 --> 00:07:27,842
you do want to make a modification, this process is going

84
00:07:27,896 --> 00:07:31,380
through a pr in order to show that

85
00:07:32,070 --> 00:07:35,314
the underlying infrastructure is changing. And then this whole

86
00:07:35,352 --> 00:07:38,966
process should be automated so that no

87
00:07:39,148 --> 00:07:42,694
manual changes should happen to your infrastructure, making the

88
00:07:42,732 --> 00:07:46,198
current started different from the version state.

89
00:07:46,364 --> 00:07:50,040
And so with that, let's look a little bit about how this

90
00:07:50,490 --> 00:07:53,786
might look. And so on the left hand side here,

91
00:07:53,808 --> 00:07:57,846
this is going to be when you're actually defining your manifest files and then submitting

92
00:07:57,878 --> 00:08:01,434
them to a repository, doing a git commit or a pr

93
00:08:01,552 --> 00:08:05,214
in order to push this code to a repository. Once this code

94
00:08:05,252 --> 00:08:09,070
is sitting in the repository, there will be some automated

95
00:08:09,650 --> 00:08:13,406
testing that needs to happen. And then once all

96
00:08:13,428 --> 00:08:16,526
the testing has happened, this will generate the plan, and then it's

97
00:08:16,558 --> 00:08:20,306
sitting in a delivery state waiting to be approved and

98
00:08:20,328 --> 00:08:23,890
then deployed. Right? And so going through that authorization step,

99
00:08:23,960 --> 00:08:27,846
which, that manual authorization step, or you

100
00:08:27,868 --> 00:08:31,830
can look at a continuous deployment model where you set up

101
00:08:31,900 --> 00:08:35,670
a more robust testing and policy

102
00:08:35,740 --> 00:08:39,526
suite in the middle so that you can go straight from deploying

103
00:08:39,558 --> 00:08:43,494
your code to a repository to it creating the underlying

104
00:08:43,542 --> 00:08:46,810
infrastructure. And this is where policy comes very important,

105
00:08:46,960 --> 00:08:50,714
so that any changes that you intend to

106
00:08:50,752 --> 00:08:54,366
happen happen as you expect them to happen, so you don't

107
00:08:54,388 --> 00:08:57,882
have any runaway resources or unintentional actors

108
00:08:58,026 --> 00:09:00,320
doing anything that you wouldn't expect.

109
00:09:02,210 --> 00:09:05,854
And speaking of unintentional actors or malicious actors,

110
00:09:05,902 --> 00:09:09,406
right. This shouldn't be the only consideration when thinking about authorization.

111
00:09:09,598 --> 00:09:12,962
Authorization should encompass protecting your resources from

112
00:09:13,016 --> 00:09:16,854
any changes, whether those are intentional or not, malicious or

113
00:09:16,892 --> 00:09:20,582
not. And I think at this point, it's very common to

114
00:09:20,716 --> 00:09:23,878
consider storing secrets in a secrets manager to

115
00:09:23,964 --> 00:09:27,618
protect yourself from unknown users or malicious users.

116
00:09:27,794 --> 00:09:32,090
But even more important is being able to protect

117
00:09:32,160 --> 00:09:35,402
your resources from changes you don't expect to happen. Right?

118
00:09:35,456 --> 00:09:39,462
And so these can be unintentional changes or radical

119
00:09:39,526 --> 00:09:42,646
changes. So you may have an unintentional change where you've

120
00:09:42,678 --> 00:09:46,218
deleted all of the tags from a set of resources without knowing

121
00:09:46,234 --> 00:09:49,326
that you were going to do that. Or you may have a radical change that

122
00:09:49,348 --> 00:09:53,594
has unexpected where you created 1000 containers instead of 100 cause

123
00:09:53,732 --> 00:09:57,970
of a typo, right? And so these types of changes can happen

124
00:09:58,040 --> 00:10:01,570
and can have serious effects to your infrastructure

125
00:10:01,910 --> 00:10:05,618
without the proper guardrails in place set up to

126
00:10:05,704 --> 00:10:09,330
protect it. So speaking of these guardrails,

127
00:10:09,410 --> 00:10:13,046
let's talk about how to enact these guardrails with open policy

128
00:10:13,148 --> 00:10:16,534
agent. So open policy agent, or OPA, is a

129
00:10:16,572 --> 00:10:20,198
general purpose policy engine. And it is general purpose

130
00:10:20,294 --> 00:10:24,310
because it is going to work with any services, not just terraform,

131
00:10:24,390 --> 00:10:28,170
right? Because it is expecting a query or

132
00:10:28,240 --> 00:10:31,418
a question as a JSON blob, and then

133
00:10:31,424 --> 00:10:35,198
it's going to return a response as JSON as well. So this makes

134
00:10:35,284 --> 00:10:39,578
it a very flexible tool when needing to evaluate policies,

135
00:10:39,674 --> 00:10:43,726
right? So you are able to now evaluate these policies separate

136
00:10:43,758 --> 00:10:47,762
from the service that needs the policy evaluation, right? And so

137
00:10:47,896 --> 00:10:51,566
this is a decoupled method where you have decoupled

138
00:10:51,598 --> 00:10:55,442
policies from your service. And so removing these

139
00:10:55,496 --> 00:10:59,000
policies from the service itself

140
00:10:59,530 --> 00:11:03,394
allows you to have more fine grained

141
00:11:03,522 --> 00:11:06,854
control over how the policy over

142
00:11:06,892 --> 00:11:10,314
the specifics of the policy. Right. And so

143
00:11:10,432 --> 00:11:14,300
with OPA, OPA comes paired with a

144
00:11:14,910 --> 00:11:18,486
dedicated policy language called Rego. And so Rego

145
00:11:18,518 --> 00:11:22,730
is purpose built for defining policies. It is also declarative,

146
00:11:22,890 --> 00:11:25,770
much like Terraform's hcl language,

147
00:11:25,930 --> 00:11:29,134
allowing you to follow the same Gitops best

148
00:11:29,172 --> 00:11:33,578
practices that we talked about earlier for storing

149
00:11:33,674 --> 00:11:36,946
these policies in git and making sure that they are

150
00:11:36,968 --> 00:11:40,478
versioned and having an automated deploying of these policies

151
00:11:40,654 --> 00:11:43,986
once they are submitted. Right? And so this is

152
00:11:44,008 --> 00:11:47,894
a nice complement, having your policy as code next to your infrastructure as

153
00:11:47,932 --> 00:11:51,394
code using the same or similar deployment

154
00:11:51,442 --> 00:11:55,446
methods. And with this

155
00:11:55,468 --> 00:11:59,366
model you are able to have full control over the policy development

156
00:11:59,398 --> 00:12:03,274
lifecycle. So you are able to make updates and

157
00:12:03,312 --> 00:12:07,354
changes to your policies separate from the rest of your application and

158
00:12:07,392 --> 00:12:10,970
infrastructure. So anytime you need to modify

159
00:12:11,390 --> 00:12:15,102
what the policies state, you're able to roll these

160
00:12:15,156 --> 00:12:18,314
out without having to restart

161
00:12:18,362 --> 00:12:22,202
services or recreate resources. You can just start enforcing

162
00:12:22,266 --> 00:12:24,400
new policies from that point.

163
00:12:25,090 --> 00:12:28,658
All right, and now let's bring it all together and talk about how

164
00:12:28,744 --> 00:12:31,330
we're going to secure your infrastructure with open policy.

165
00:12:31,400 --> 00:12:34,578
Agent so after you define the manifest files that you

166
00:12:34,584 --> 00:12:38,962
normally would, you may now add in an additional step where developers

167
00:12:39,026 --> 00:12:42,306
or operations folks are using OPA on the command

168
00:12:42,338 --> 00:12:45,926
line in order to check that

169
00:12:46,028 --> 00:12:50,154
their manifest files are valid before they are shipping them out, just giving

170
00:12:50,192 --> 00:12:53,754
them a little bit more confidence in their changes before

171
00:12:53,792 --> 00:12:57,146
they're even submitting them to a git repository. And then you

172
00:12:57,168 --> 00:13:01,146
will submit these manifest files in a pr or

173
00:13:01,168 --> 00:13:04,574
a commit. And then OPA is going to now

174
00:13:04,612 --> 00:13:07,982
be part of your automated testing suite where this is going to be

175
00:13:08,036 --> 00:13:11,086
the crux of your policy enforcement. And this is

176
00:13:11,108 --> 00:13:14,958
where OPA is going to catch

177
00:13:15,134 --> 00:13:19,858
any resources that

178
00:13:19,864 --> 00:13:23,794
are not meeting your organization's policy requirements before they

179
00:13:23,832 --> 00:13:28,630
actually get deploying to the underlying cloud services or hardware.

180
00:13:29,210 --> 00:13:32,790
With that, let's do a quick demo where I'm going to show

181
00:13:32,860 --> 00:13:36,562
how to do some organizations on a terraform

182
00:13:36,626 --> 00:13:38,790
manifest file using OPA.

183
00:13:40,410 --> 00:13:44,074
All right? And so in this demo we have three files. The first

184
00:13:44,112 --> 00:13:47,178
file here is a terraform manifest file. We're going

185
00:13:47,184 --> 00:13:50,746
to be using the Amazon EC two module in order

186
00:13:50,768 --> 00:13:53,370
to create EC two instances.

187
00:13:53,790 --> 00:13:56,858
And then we're going to have two test case here. The first test case we're

188
00:13:56,874 --> 00:14:00,334
going to create 16 resources or 16 instances. The second

189
00:14:00,372 --> 00:14:03,290
one we're going to be creating three. And so the first one will fail.

190
00:14:03,370 --> 00:14:07,170
The second one will pass based on the policy that we have

191
00:14:07,320 --> 00:14:10,686
and so these are just standard AMI

192
00:14:10,718 --> 00:14:14,578
configurations. And so let's pop over to our rego policy

193
00:14:14,664 --> 00:14:17,974
here. In our rego policy, we see that we have set a

194
00:14:18,012 --> 00:14:21,142
blast radius of 30. And what this means is

195
00:14:21,196 --> 00:14:24,662
we are essentially giving weighted values to the different

196
00:14:24,716 --> 00:14:28,694
actions that terraform can perform. If it's going to perform a

197
00:14:28,732 --> 00:14:31,938
delete action, this is going to be weighted at ten. For a create action,

198
00:14:31,954 --> 00:14:35,178
this will be weighted at two. And then for a modify action, this will be

199
00:14:35,184 --> 00:14:39,434
weighted at one. And so remember, for our first test

200
00:14:39,472 --> 00:14:43,246
case, we're going to be creating 16 EC two instances which

201
00:14:43,268 --> 00:14:47,306
will be 32 just above our designated blast radius.

202
00:14:47,498 --> 00:14:51,098
And so that will fail the flow.

203
00:14:51,274 --> 00:14:55,282
And then underneath here, we can see the actual policy.

204
00:14:55,416 --> 00:14:59,090
We can see that by default we're saying authorization is cause,

205
00:14:59,830 --> 00:15:03,282
but we're using the word authorization auth z here.

206
00:15:03,336 --> 00:15:07,054
You can set this to anything. This is just the name of a rule,

207
00:15:07,102 --> 00:15:11,030
just a variable. So this is not defined by Rego. You can define,

208
00:15:11,850 --> 00:15:15,206
accept, deny, anything that works

209
00:15:15,228 --> 00:15:18,486
for your policy. And then underneath that we see the various rules that are

210
00:15:18,508 --> 00:15:20,700
going to do the actual scoring system.

211
00:15:21,950 --> 00:15:25,594
And finally, our last file here is going to be the

212
00:15:25,632 --> 00:15:29,338
GitHub actions file. That's going to be run

213
00:15:29,424 --> 00:15:32,782
once we submit the code to GitHub, right? It's going to check, but the code

214
00:15:32,916 --> 00:15:36,350
install terraform, install OPA and then run

215
00:15:36,420 --> 00:15:39,710
a format init validate plan.

216
00:15:39,860 --> 00:15:43,358
It's going to then convert the terraform plan that's coming out as a

217
00:15:43,364 --> 00:15:47,058
binary file into a JSON file for OPA. And then we're going to

218
00:15:47,064 --> 00:15:51,186
give that JSON file to OPA to evaluate and see

219
00:15:51,208 --> 00:15:55,010
what happens. So with that, let's go over and

220
00:15:55,080 --> 00:15:58,626
look at our terraform manifest file one more time. And let's

221
00:15:58,658 --> 00:16:02,758
say that we are a good dev and we went to actually

222
00:16:02,844 --> 00:16:06,562
check this ourselves beforehand, right? So then we run that terraform

223
00:16:06,626 --> 00:16:10,410
plan, create the binary file, convert the binary files to JSON.

224
00:16:12,030 --> 00:16:15,660
We see that we are creating those 16 resources. And then,

225
00:16:25,570 --> 00:16:29,806
so let's actually get the score here for

226
00:16:29,828 --> 00:16:33,658
that blast radius. We can see that by running OPA eval

227
00:16:33,754 --> 00:16:37,646
against that terraform plan and then comparing that to the regal

228
00:16:37,678 --> 00:16:41,358
policy we have defined in the policy folder, which was the regal file

229
00:16:41,374 --> 00:16:45,534
we just looked at. And then we are looking for the rule

230
00:16:45,582 --> 00:16:49,654
with the name of score. And that is going to give us the actual value

231
00:16:49,692 --> 00:16:53,094
of 32, showing that the weighted value of this change is

232
00:16:53,132 --> 00:16:53,960
32,

233
00:16:57,450 --> 00:17:01,746
which we know will fail this evaluation.

234
00:17:01,938 --> 00:17:05,738
Right? And so with that, let's go ahead and say that we did

235
00:17:05,744 --> 00:17:08,474
not run this check, we didn't know that it was going to create this many

236
00:17:08,512 --> 00:17:10,140
resources and let's submit it anyway.

237
00:17:11,250 --> 00:17:14,480
Let's see blast radius 32.

238
00:17:16,290 --> 00:17:19,614
Send that off. Let's go over to

239
00:17:19,652 --> 00:17:24,094
our browser here. With that

240
00:17:24,292 --> 00:17:27,300
we should see it pop up blast radius 32.

241
00:17:33,010 --> 00:17:36,714
And then this is going to take a little bit of time for GitHub

242
00:17:36,762 --> 00:17:41,170
to set up the container, install terraform, install OPA,

243
00:17:41,510 --> 00:17:44,690
run the terraform formatting commands,

244
00:17:45,430 --> 00:17:48,690
create the plan as we stated, convert it to JSON.

245
00:17:54,800 --> 00:17:58,752
And then once we have that actual plan being

246
00:17:58,806 --> 00:18:02,320
compared to OPa for authorization,

247
00:18:02,660 --> 00:18:06,588
which we can see exited

248
00:18:06,684 --> 00:18:10,316
with a status code of one. So now let's

249
00:18:10,348 --> 00:18:14,196
go back, let's go

250
00:18:14,218 --> 00:18:18,340
back and modify the manifest file to be just three resources.

251
00:18:20,700 --> 00:18:24,170
All right, going back to our code editor here.

252
00:18:25,740 --> 00:18:29,290
Let's comment out this one.

253
00:18:30,300 --> 00:18:33,800
All right. And with that, let's do a,

254
00:18:33,950 --> 00:18:36,556
let's, let's just, just check this one more time.

255
00:18:36,658 --> 00:18:39,740
Locally, create that same output file.

256
00:18:40,960 --> 00:18:44,860
Let's get the score.

257
00:18:45,540 --> 00:18:49,216
Score is now six, which is as expected. And let's run the

258
00:18:49,238 --> 00:18:52,992
local, let's run the local

259
00:18:53,126 --> 00:18:54,000
eval.

260
00:18:57,480 --> 00:19:00,852
Make sure that that is not turning anything. All right, so everything

261
00:19:00,906 --> 00:19:04,384
AWS expected and let's submit it. So blast

262
00:19:04,512 --> 00:19:06,070
radius six,

263
00:19:07,720 --> 00:19:11,800
submit those changes. Let's go back to our browser

264
00:19:16,060 --> 00:19:24,446
and we're

265
00:19:24,478 --> 00:19:27,846
seeing that it is spinning up a new container. So we have to wait

266
00:19:27,868 --> 00:19:30,760
a little bit. So as this happens every single time,

267
00:19:33,530 --> 00:19:37,010
doing all the same checks, spinning up terraform,

268
00:19:37,090 --> 00:19:40,890
creating OPA, running the format commands

269
00:19:47,980 --> 00:19:52,020
and getting down to the bottom here. Terraform validate terraform

270
00:19:52,100 --> 00:19:56,028
plan. We're going to see that it's going to spit out the plan for only

271
00:19:56,194 --> 00:20:00,204
these three resources and

272
00:20:00,242 --> 00:20:07,340
then authorized and

273
00:20:07,410 --> 00:20:10,656
we can see that the job completed and everything is green.

274
00:20:10,758 --> 00:20:14,156
So now we can hand this off to our continuous delivery

275
00:20:14,188 --> 00:20:18,560
or continuous deployment system to finish off creating the resources.

276
00:20:20,760 --> 00:20:24,116
Cool. And with that I'll end the

277
00:20:24,138 --> 00:20:26,660
demo and back to the slideshow.

278
00:20:30,440 --> 00:20:33,876
And in the slideshow you'll see a couple of links here to help you get

279
00:20:33,898 --> 00:20:38,072
started with OPA. Using the OPA exec command, using another

280
00:20:38,126 --> 00:20:42,036
tool that you could use is comes which is built on OPA and Rego

281
00:20:42,148 --> 00:20:44,772
does the same sort of manifest validations.

282
00:20:44,916 --> 00:20:48,412
And then we also have an integration with

283
00:20:48,466 --> 00:20:52,716
AWS cloudformation hooks if you are an AWS shop.

284
00:20:52,818 --> 00:20:56,076
And on the right side you can see a couple of resources to

285
00:20:56,098 --> 00:20:59,564
the Styra Academy, to the OPA docs, and to

286
00:20:59,602 --> 00:21:03,132
Styra free just to get some hands on with

287
00:21:03,186 --> 00:21:06,956
OPA using an

288
00:21:07,058 --> 00:21:10,804
tool. And then lastly link here is the link

289
00:21:10,842 --> 00:21:13,590
to this demo. So with that,

290
00:21:14,520 --> 00:21:18,164
say thank you for joining and I look forward to

291
00:21:18,202 --> 00:21:20,480
connecting with everyone. Hope you have a great rest of your conference.

