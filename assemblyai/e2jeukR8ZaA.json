{"language_code": "en_us", "audio_url": "https://cdn.assemblyai.com/upload/12ace2e2-e249-4b9b-96b7-1aa3939d3f3c", "punctuate": true, "format_text": true, "dual_channel": null, "webhook_url": null, "webhook_auth_header_name": null, "webhook_auth_header_value": null, "audio_start_from": null, "audio_end_at": null, "word_boost": ["adds", "api", "apibased", "applications", "be", "between", "builtin", "by", "can", "case", "classification", "classified", "classify", "client", "clients", "cloudnative", "community solution engineer", "completely", "concepts", "conf fourty two", "consists", "context", "datasets", "enables", "endpoints", "examples", "graphlike", "graphql", "has", "illustrated", "java", "javascript", "keywords", "laura ham", "means", "models", "outofthebox", "pretrained", "prior", "problem", "required", "semi technologies", "solved", "sourcehttpsgithubcomsemitechnologiesweaviate", "started", "stored", "stores", "storing", "takes", "topics", "touched", "traditionally", "underlying", "unstructured", "uses", "using", "vectorization", "vectors", "weaviate", "weaviate outofthebox machine learning models", "weaviatehttpsgithubcomsemitechnologiesweaviate"], "boost_param": "high", "filter_profanity": false, "redact_pii": false, "redact_pii_audio": false, "redact_pii_policies": null, "redact_pii_sub": null, "speaker_labels": false, "speakers_expected": null, "content_safety": false, "content_safety_confidence": null, "iab_categories": false, "custom_spelling": null, "disfluencies": false, "sentiment_analysis": false, "auto_chapters": false, "entity_detection": false, "summarization": true, "summary_model": "informative", "summary_type": "bullets_verbose", "auto_highlights": true, "language_detection": false, "speech_threshold": null, "id": "1ea01400-386e-423c-b02b-64212d58bcb4", "status": "completed", "error": null, "text": "Hi everyone. Welcome to my presentation of the vector search. And in Weaviate, I'm Laura. I am a community solution engineer at semi technologies, and in this presentation I will introduce you to our open source factorsearch engine, Weaviate. First, let's take a look at data, and particularly about unstructured data. Unstructured data are forms of data that are not organized in a predefined manner. Take for example, big pieces of text. We learned that 93% of your data stays unused and is unstructured, and that 80% of businesses don't know how to use their unstructured data in favor of their business. Why is this so difficult? What's so difficult about unstructured data? One thing that is difficult is searching through unstructured data. For example, to answer business questions. Let me give you an example, a simple example of searching through unstructured data. If you want to find information from unstructured text, you will need to use exact matching of keywords to find an answer. If you look, for example, for a wine that fits with your seafood dinner, while wine in your database only tells you that it is good with fish, you will most likely not find this wine. If you instead use a vector search engine like VVA, you can find information in unstructured data based on semantics. Compare this with Google Search. If you ask Google a very abstract question, it might find an answer. The question here, what color of wine is Chardonnay? Is very abstract. Still, Google search finds exactly this answer from a particular data node. So the question is, how does Google find exactly this answer from exactly this data node? And how can we predict the relation between this answer and the question that we asked? And in addition, how can we do this so fast? So the main question here is, yeah, what if you could do the same with your own data in a simple and secure way? So the answer that we case up with is Weaviate. Weaviate is a database that uses machine learning to understand the data that is in it. Weaviate is a cloud native, modular, real time vector search engine that is built to scale your machine learning models. So as I said, weaviate is a vector search engine. So first, let's dive in what vector search actually is. Weaviate stores data as vectors, which are placed in a space in relation to other data objects. Machine learning models are used to compute a vector for each data object and also for each semantic query. So VV eight really takes to understand your data and your queries in more detail. This is how weaviate works with a text factorization module. A pretrained model, for example, a fast text or bird transformer model can compute vectors from known concepts. This is, for example, our daily human language. You can add your own data to a weaviate instance and all this data will be vectorized using these machine learning models and be placed as vectors and with their own data object into weaviate. The data object will then be indexed by the machine learning models and be placed in the high dimensional vector space. Then you can perform, for example, a search query which will also be vectorized using machine learning models of WeAV eight. For example, let's find a wine that fits with seafood. Weaviate computes does its nearest similarity search and find the objects that lies nearest to your search vector. So the answer that lies closest to the vector of this question will be returned. With weaviate, you can do the following tasks with unstructured data. You can search through data, you can discover answers to your specific questions. You can classify and label your data automatically with machine learning models and Weaviate can predict relations in your database. The vector database Weaviate has full crud support for both data and vectors and you can combine vector search and scalar filters, which means you can combine semantic search with traditionally search. It has a graphQL and rEsTful API and weaviate supports multiple data types like text but also images. And this is all possible through Weaviate modules. So modules can be attached to the Weaviate core vector database to enable the features I just described in the previous slide. For example, you can choose to use an image vectorization module to index images and search through these images, but you can also attach a question answering module. You can also attach any transformer NLP model or you can even attach your own machine learning or NLP models. So this allows you to use Weaviate really for scaling your own machine learning models to a production scale as well. So now let's move on to a demo. I will use a data set of news articles for this demo and you can also find this demo data set running on our website. You can go here from any code example, a query example. So over here there's a really simple question or query to first just see what kind of articles we have in this data set. So I can perform a get query to get all the articles. And here I just want to see their titles, their URLs and their word count. And here I get a list in random order of all the articles. So now of course, nothing special or nothing magic is happening here. And just to show you that it is a vectors database, you can also query the whole factor of a data object. So you get the long list of vectors. So now let's only show the title. And as I said, this is just scalar search. So I don't do any machine learning magic here. But now let's take a semantic filter. So for example, let's see if the data set has any articles regarding housing prices. I can perform a near text query and this filter is added by a specific text factorization module. So let's see if there are articles about housing prices. And you can see this is very abstract question. In here, the list of articles is ordered to the relevancy, to the search query. So we have for example something about housing becoming the biggest asset class, something else about housing prices, expensive housing, et cetera. And note that the query using prices is not an exact match of any of the words here in the title. So here you can see that weaviate uses semantics and the context rather than exact matching keywords. We can also ask for how certain we feel is to show certain results. This is called certainty. So here you see that the first result is around 87% certain that it is matching the search query. And then we can also make a filter based on this. So now I will show only results that are above 80% certain. Now you can see that this is a very abstract query and we can also make this a bit more concrete. For example, to see the prices of houses in Greece, this is a bit more concrete. And you can see that there's only one result returned now because we made the query more concrete and this is about Ethene. So yeah, we can see that weaviate matches Greece here with its capital without saying anything about Greece. So as I said, with VV you cannot only store factors, but also it stores the whole data object. So this means you can combine these kind of factor searches with traditional scalar search. And yeah, for example, I will show you this, I will add some properties first. So we have for example each article appearing in a publication. So we can see that this article for example appeared in the Financial Times. This is a graph relation in the database. And now I can takes a scalar filter combining with this already existing factor query. So this is a rare search. So now we can see I'm querying for using prices again and I want the result to appear in this publication, the Economist. So let's see now. So this first result, it's 87% sure this is the title. And we can see that Pearson economist we can also ask questions to weavy eight or to the data in Weaviate if we have a question answering module available or enabled. I can also show this so I will remove the previous filters so I can ask a question also in a filter. For example, what was the monkey doing in the neura link video? And I will not query the certainty here, but I want to see the answer. And the answer here is he was playing mind pong. So if we limit the result to one and we also ask for the summary, this is the summary of the article. So the result is that monkey was playing Mindpong and the answer was found somewhere in this whole summary, which is of course the bit of unstructured text that we have here. Okay, so now let's go back to the presentation. So you can use weaviate for a big variety of use cases due to the flexibility of choosing your own machine learning model or also keeping it very general. So this was my presentation. Thank you for listening and watching. In this presentation you learned that with the open source search factor engine vv eight you can search through unstructured data and in addition you can use to bring your own machine learning models to production skill. Thank you and see you.", "words": [], "utterances": null, "confidence": 0.940235809641535, "audio_duration": 755.0, "webhook_status_code": null, "webhook_auth": false, "summary": "- Weaviate is a cloud native, modular, real time vector search engine. It uses machine learning to understand the data that is in it. You can combine semantic search with traditionally search. It has full crud support for both data and vectors.\n- Weaviate uses semantics and the context rather than exact matching keywords. With VV you can combine these kind of factor searches with traditional scalar search. We can also ask for how certain we feel is to show certain results.\n- You can use weaviate for a big variety of use cases due to the flexibility of choosing your own machine learning model. In this presentation you learned that with the open source search factor engine vv eight you can search through unstructured data. Thank you and see you.", "auto_highlights_result": {"status": "success", "results": [{"count": 6, "rank": 0.09, "text": "vector search", "timestamps": [{"start": 24308, "end": 24814}, {"start": 97328, "end": 98922}, {"start": 156116, "end": 156702}, {"start": 161924, "end": 162414}, {"start": 164932, "end": 165466}, {"start": 271342, "end": 272002}]}, {"count": 8, "rank": 0.09, "text": "Machine learning models", "timestamps": [{"start": 158932, "end": 160202}, {"start": 171918, "end": 173102}, {"start": 203652, "end": 205002}, {"start": 214328, "end": 215118}, {"start": 224904, "end": 226062}, {"start": 258292, "end": 259546}, {"start": 322232, "end": 323406}, {"start": 750948, "end": 752010}]}, {"count": 9, "rank": 0.08, "text": "unstructured data", "timestamps": [{"start": 40480, "end": 41546}, {"start": 41648, "end": 42602}, {"start": 58932, "end": 59870}, {"start": 64472, "end": 65554}, {"start": 68312, "end": 69586}, {"start": 76232, "end": 77362}, {"start": 102452, "end": 103262}, {"start": 246832, "end": 247962}, {"start": 746876, "end": 748038}]}, {"count": 1, "rank": 0.08, "text": "Weaviate stores data", "timestamps": [{"start": 166392, "end": 167554}]}, {"count": 1, "rank": 0.07, "text": "factor searches", "timestamps": [{"start": 539632, "end": 540678}]}, {"count": 1, "rank": 0.07, "text": "multiple data types", "timestamps": [{"start": 281842, "end": 283426}]}, {"count": 2, "rank": 0.07, "text": "Google search", "timestamps": [{"start": 105908, "end": 106654}, {"start": 116488, "end": 117298}]}, {"count": 6, "rank": 0.07, "text": "vectors", "timestamps": [{"start": 167832, "end": 168526}, {"start": 191958, "end": 192326}, {"start": 206212, "end": 206810}, {"start": 269432, "end": 270126}, {"start": 378712, "end": 378986}, {"start": 386988, "end": 387670}]}, {"count": 1, "rank": 0.07, "text": "semantic search", "timestamps": [{"start": 275134, "end": 276022}]}, {"count": 1, "rank": 0.07, "text": "traditional scalar search", "timestamps": [{"start": 541584, "end": 543260}]}, {"count": 2, "rank": 0.07, "text": "unstructured text", "timestamps": [{"start": 79452, "end": 80486}, {"start": 714088, "end": 714962}]}, {"count": 1, "rank": 0.06, "text": "NLP models", "timestamps": [{"start": 317752, "end": 318830}]}, {"count": 1, "rank": 0.06, "text": "Weaviate modules", "timestamps": [{"start": 288028, "end": 289394}]}, {"count": 2, "rank": 0.06, "text": "own machine learning models", "timestamps": [{"start": 322008, "end": 323406}, {"start": 750788, "end": 752010}]}, {"count": 1, "rank": 0.06, "text": "vector search and scalar filters", "timestamps": [{"start": 271342, "end": 273198}]}]}, "content_safety_labels": null, "iab_categories_result": null, "chapters": null, "sentiment_analysis_results": null, "entities": null}