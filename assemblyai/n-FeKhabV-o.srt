1
00:00:00,410 --> 00:00:06,174
Jamaica make a real

2
00:00:06,212 --> 00:00:09,610
time feedback into the behavior of your distributed systems

3
00:00:09,690 --> 00:00:12,538
and observing changes, exceptions,

4
00:00:12,634 --> 00:00:16,746
errors in real time allows youre to not only experiment with confidence

5
00:00:16,858 --> 00:00:20,560
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,034
Close hi

7
00:00:47,072 --> 00:00:51,206
everybody, I'm dave bitter. I'm a developer advocate working at IO in the Netherlands

8
00:00:51,318 --> 00:00:55,646
and today I want to have a look with you at Remix, the new

9
00:00:55,828 --> 00:00:59,114
full stack web framework. So what does remix

10
00:00:59,162 --> 00:01:02,846
do? How does it work? Why should you use it? We're going

11
00:01:02,868 --> 00:01:06,994
to cover everything in the next 35 minutes and have a look together at

12
00:01:07,112 --> 00:01:10,722
web fundamentals, which is always a very good thing to do

13
00:01:10,856 --> 00:01:14,180
between developers. So let's get started.

14
00:01:14,550 --> 00:01:17,698
So remix is a full stack web framework,

15
00:01:17,794 --> 00:01:21,314
emphasis on the web part based on web fundamentals.

16
00:01:21,442 --> 00:01:25,430
So it will have both client and server side

17
00:01:25,500 --> 00:01:29,242
and it's going to try to use web fundamentals to

18
00:01:29,376 --> 00:01:32,634
smartly talk between the two of them and to help

19
00:01:32,672 --> 00:01:36,298
you really leverage the browser, leverage the web as a

20
00:01:36,304 --> 00:01:39,894
platform instead of working against it. But Remix

21
00:01:39,942 --> 00:01:43,754
is also a framework to build over encountered websites.

22
00:01:43,882 --> 00:01:47,854
So this is what somebody tweeted me. I anonymized their data here after

23
00:01:47,892 --> 00:01:51,162
I got so excited about Remix and I shared something on Twitter.

24
00:01:51,306 --> 00:01:55,154
So this is pretty standard. When you post something

25
00:01:55,192 --> 00:01:58,466
on Twitter you will get these comments. But it was an

26
00:01:58,488 --> 00:02:02,114
interesting discussion and a perfect way to add an intro to

27
00:02:02,152 --> 00:02:05,378
my entire talk. So let's call him a

28
00:02:05,384 --> 00:02:09,346
guy on the Internet said well, remix is a framework to build over engineered

29
00:02:09,378 --> 00:02:12,966
websites and you appear to not know the difference between a website,

30
00:02:13,068 --> 00:02:16,706
a place on the Internet with a URL and an app, a standalone

31
00:02:16,738 --> 00:02:19,882
program on a mobile device. And I mean,

32
00:02:19,936 --> 00:02:23,734
I don't blame him. There are two different platforms,

33
00:02:23,782 --> 00:02:25,930
but are they so different nowadays?

34
00:02:26,590 --> 00:02:29,974
Especially since he tweeted this from the Twitter web

35
00:02:30,032 --> 00:02:33,310
app? And the lines between

36
00:02:33,380 --> 00:02:37,438
these websites and applications got so blurry over time

37
00:02:37,604 --> 00:02:41,406
that it's hard to sometimes spot the difference and which pattern should you

38
00:02:41,428 --> 00:02:42,400
use when?

39
00:02:44,850 --> 00:02:48,130
So naturally I reacted and told them, well,

40
00:02:48,280 --> 00:02:51,586
basically remix is actually really good

41
00:02:51,768 --> 00:02:55,386
against over engineering because it goes back to web fundamentals,

42
00:02:55,438 --> 00:02:59,526
right? It's leveraging what the browser already offers for you and

43
00:02:59,548 --> 00:03:03,254
you can then use that to build your website for the platform you're actually

44
00:03:03,292 --> 00:03:05,640
developing on the web.

45
00:03:07,770 --> 00:03:11,178
So basically it's a major shift in how we think

46
00:03:11,264 --> 00:03:14,506
about building for the web. So first we cover all

47
00:03:14,528 --> 00:03:18,506
our bases with web fundamentals, then we use progressive enhancement to

48
00:03:18,528 --> 00:03:21,786
build layer by layer and in the end have a

49
00:03:21,808 --> 00:03:25,566
full blown application where every layer of

50
00:03:25,588 --> 00:03:29,390
progressive enhancement is supported correctly, where we have basically

51
00:03:29,460 --> 00:03:33,166
the good old of the web but then up to par with modern

52
00:03:33,198 --> 00:03:37,122
Ux. Of course

53
00:03:37,176 --> 00:03:40,690
this Twitter beef continued, and I'm still talking about

54
00:03:40,760 --> 00:03:44,526
web apps, there's no such things. Website have a URL, apps are standalone.

55
00:03:44,558 --> 00:03:48,018
Well we covered this of course with the Twitter web app example, but he

56
00:03:48,024 --> 00:03:51,334
says you can try meshing them together and that will inevitably fill

57
00:03:51,532 --> 00:03:54,774
being good at one or the other. And here I sort of kind of

58
00:03:54,812 --> 00:03:58,162
agree, right. If you really try to get all these native

59
00:03:58,226 --> 00:04:01,786
patterns on the web, you might have to do some weird stuff and

60
00:04:01,808 --> 00:04:04,874
it doesn't work well. But what I noticed, what I've been

61
00:04:04,912 --> 00:04:08,202
doing, and people around me is sometimes really

62
00:04:08,256 --> 00:04:11,854
not embracing the platform we are building for which is the web,

63
00:04:11,892 --> 00:04:15,390
which is incredibly powerful and often overlooked.

64
00:04:18,370 --> 00:04:22,490
And naturally you never want to lose an Internet argument.

65
00:04:22,650 --> 00:04:26,660
So yeah, for instance, we have progressive web apps, right, where we can then

66
00:04:27,030 --> 00:04:30,014
have an app, but again, this is an enhancement.

67
00:04:30,062 --> 00:04:33,314
We have a basic layer, we build our website out and then

68
00:04:33,352 --> 00:04:38,102
we can always enhance further. And that's something really

69
00:04:38,156 --> 00:04:42,274
nice that the web offers, of course. But tell me you're frustrated

70
00:04:42,322 --> 00:04:45,718
by all these frameworks without telling me you're frustrated, right?

71
00:04:45,804 --> 00:04:49,518
And I fouls feel the pain. It's every time a new framework pops

72
00:04:49,554 --> 00:04:52,794
up and I wanted to give this talk because

73
00:04:52,832 --> 00:04:57,340
I really believe in remix as a framework, at least what they stand for,

74
00:04:57,790 --> 00:05:01,606
to basically offer you the web fundamentals and then tools

75
00:05:01,638 --> 00:05:04,010
to be up to par with modern Ux.

76
00:05:04,510 --> 00:05:07,774
Because sometimes it feels a bit like this, right? You have that friend who says

77
00:05:07,812 --> 00:05:10,766
well you should totally come to the party, it's going to be great, should see

78
00:05:10,788 --> 00:05:13,822
the lineup and this, and this person is going to be there, it's all good

79
00:05:13,876 --> 00:05:17,714
vibes. And you start thinking like, oh well maybe I need to

80
00:05:17,752 --> 00:05:21,778
really check this out. So this is what new frameworks often look like

81
00:05:21,944 --> 00:05:25,426
or feel like rather. And you get fomo, right? It's like,

82
00:05:25,448 --> 00:05:28,726
oh, am I still relevant if I don't pick up this framework? And I think

83
00:05:28,748 --> 00:05:32,054
that's an inherent thing about all these frameworks, is if

84
00:05:32,092 --> 00:05:35,670
you keep on reinventing the wheel, you have to keep on learning

85
00:05:35,740 --> 00:05:39,362
all these different new patterns. While learning a framework

86
00:05:39,426 --> 00:05:43,546
that uses web fundamentals will give you a solid base to

87
00:05:43,568 --> 00:05:46,646
work on the web in general. And hopefully more frameworks

88
00:05:46,678 --> 00:05:50,502
will pick up on this because usually when you use a framework,

89
00:05:50,566 --> 00:05:53,774
you run into the same issues that you had the last time you used

90
00:05:53,812 --> 00:05:57,934
a new framework. So I have an arbitrary amount of examples here,

91
00:05:57,972 --> 00:06:01,982
like complex state and it's like sure your readme works

92
00:06:02,036 --> 00:06:05,582
perfectly fine, but I got really complex state and I need to keep my data

93
00:06:05,636 --> 00:06:08,978
up to date and there are non standards being used.

94
00:06:09,144 --> 00:06:12,274
And this to me is then where remix comes in by

95
00:06:12,312 --> 00:06:16,198
using the web standards and using that to build around.

96
00:06:16,364 --> 00:06:20,230
So web fundamentals, enhance them with

97
00:06:20,300 --> 00:06:21,510
modern ux.

98
00:06:23,690 --> 00:06:27,426
This is a logo I think we all know, especially during the pandemic.

99
00:06:27,538 --> 00:06:31,274
We spent a lot of time on Microsoft Teams and it

100
00:06:31,312 --> 00:06:34,986
basically replaced every normal communication that we had with each

101
00:06:35,008 --> 00:06:38,778
other, but also our processes in development. So if you work in

102
00:06:38,784 --> 00:06:42,654
an agile environment, you have probably worked with

103
00:06:42,852 --> 00:06:46,458
Microsoft Teams to then do scrum sessions.

104
00:06:46,634 --> 00:06:50,666
Well, those are usually pretty interactive, which is nice about those sessions.

105
00:06:50,858 --> 00:06:53,710
But what we also needed to do was, for instance,

106
00:06:54,210 --> 00:06:57,742
give an effort to new tasks,

107
00:06:57,806 --> 00:07:00,866
right? There's a new task, it's been refined and everything.

108
00:07:00,968 --> 00:07:04,002
And now we say, okay, well I'm going to give it one, three, five,

109
00:07:04,136 --> 00:07:07,666
whatever system you use, we give it so much points and

110
00:07:07,688 --> 00:07:11,958
then we use that for our sprint planning. Well, how we did it now,

111
00:07:12,124 --> 00:07:15,414
because we were all remote, we sort of threw our hands up

112
00:07:15,452 --> 00:07:19,286
in the air, which everything above ten points is really awkward to

113
00:07:19,308 --> 00:07:23,002
do, but spotty connections, people didn't have it

114
00:07:23,056 --> 00:07:26,474
directly in view, so it became all the real

115
00:07:26,512 --> 00:07:30,140
quick, basically. So I was looking at, okay, can we just have an online

116
00:07:30,830 --> 00:07:34,794
application where we can do this? Turns out there are a lot of applications

117
00:07:34,842 --> 00:07:38,302
that allow you to do scrum poker sessions online. But hey,

118
00:07:38,356 --> 00:07:41,470
I'm a developer, I'll build it myself. Right.

119
00:07:41,620 --> 00:07:45,182
And this is a perfect thing to really put remix to the test

120
00:07:45,236 --> 00:07:47,810
because. Yeah, I get it. You go to the remix page,

121
00:07:47,960 --> 00:07:51,086
there's a readme there, it's a super basic dashboard,

122
00:07:51,198 --> 00:07:54,722
which it's amazing at. But can we really put it to the test

123
00:07:54,776 --> 00:07:58,694
and make this basically real time multi user application,

124
00:07:58,892 --> 00:08:02,406
but still on web fundamentals, still with progressive enhancement and

125
00:08:02,428 --> 00:08:05,958
covering all our bases. Is that possible? Let's have a

126
00:08:05,964 --> 00:08:09,298
look. So to build something like this, we have a couple of features

127
00:08:09,314 --> 00:08:12,842
that we need to support. Firstly, you need to be able to create

128
00:08:12,896 --> 00:08:16,074
and join a session. So you need to have some forms where we

129
00:08:16,112 --> 00:08:19,414
can start a new session where we can join

130
00:08:19,462 --> 00:08:22,978
one, give your username, et cetera. Well, naturally you need to cast

131
00:08:23,014 --> 00:08:26,366
a vote or an effort, depending on how you call it in your team

132
00:08:26,468 --> 00:08:29,854
saying, I think this story is worth five

133
00:08:29,892 --> 00:08:33,002
points or eight or whatever. Then when everybody voted,

134
00:08:33,066 --> 00:08:37,038
you want to toggle the visibility so everybody can view what everybody voted

135
00:08:37,134 --> 00:08:41,070
and at the end the admin can clear it around and restart,

136
00:08:41,230 --> 00:08:45,394
put the visibility back to hidden and you do the process again.

137
00:08:45,592 --> 00:08:49,118
So quite a simple app, basically four features,

138
00:08:49,214 --> 00:08:52,694
but can be quite complex to build in the end, if youre going to build

139
00:08:52,732 --> 00:08:55,414
that for the web. So let's have a look at how we can use web

140
00:08:55,452 --> 00:08:56,840
fundamentals for this.

141
00:08:58,490 --> 00:09:01,858
Let's get the party started. So the lineup or the

142
00:09:01,884 --> 00:09:05,866
tech stack for this is well naturally remix. That's the framework of choice that

143
00:09:05,888 --> 00:09:09,594
we're going to look at today. Then I needed to persist some data, right,

144
00:09:09,632 --> 00:09:12,910
youre want to maybe store the session state,

145
00:09:13,060 --> 00:09:15,982
maybe some users. I use superbase for that,

146
00:09:16,036 --> 00:09:19,726
which is basically if you know, Firebase, I think they market themselves

147
00:09:19,828 --> 00:09:23,134
as the firebase alternative. Do it

148
00:09:23,172 --> 00:09:26,714
what you will, but at least I like it for these type of applications.

149
00:09:26,762 --> 00:09:30,546
Short demo, small applications. Finally, we need to

150
00:09:30,728 --> 00:09:33,822
add some styling, make the demo look a bit nicer.

151
00:09:33,966 --> 00:09:38,066
For instance, something like tailwind can help you quickly style

152
00:09:38,098 --> 00:09:41,554
your pages. So that's what I used. I tried to remove

153
00:09:41,602 --> 00:09:45,794
as much of this out of the code examples as I could and simplify

154
00:09:45,842 --> 00:09:48,966
the code examples. But just so you know,

155
00:09:48,988 --> 00:09:52,762
this is the entire text deck. So how does that visually look

156
00:09:52,816 --> 00:09:55,974
if we design it? Well, basically we have this index

157
00:09:56,022 --> 00:09:59,162
page where we can create a new session by giving

158
00:09:59,216 --> 00:10:02,778
our name, or we can join an existing session

159
00:10:02,874 --> 00:10:06,494
where we pass it, the session id that we want to join and

160
00:10:06,612 --> 00:10:10,106
our name there. So basically two forms,

161
00:10:10,298 --> 00:10:13,706
then we have a dynamic session page. So for instance,

162
00:10:13,818 --> 00:10:17,026
session whatever id we put in

163
00:10:17,048 --> 00:10:20,462
there. And this already becomes quite more complex,

164
00:10:20,526 --> 00:10:23,710
right. We need to show some data, we need to add some interactivity

165
00:10:23,790 --> 00:10:27,046
and so on and so on. So these two pages will be the base of

166
00:10:27,068 --> 00:10:30,920
our entire application. And let's see how we can build that.

167
00:10:32,330 --> 00:10:36,262
So if youre ever worked with something like next JS, I think

168
00:10:36,316 --> 00:10:39,874
it's now also in new react router. This will be familiar,

169
00:10:39,922 --> 00:10:43,546
but basically what we use is file based routing where we

170
00:10:43,568 --> 00:10:47,062
have in remix an app folder, where we have a routes

171
00:10:47,126 --> 00:10:50,686
folder. And when I put an index TSX file in there was long

172
00:10:50,708 --> 00:10:54,222
as I export some JSX, I can

173
00:10:54,356 --> 00:10:57,966
go to index HTML and see that page.

174
00:10:58,148 --> 00:11:01,626
Similarly, if we make a folder called session with a file

175
00:11:01,658 --> 00:11:05,118
in there, it will be session whatever file you

176
00:11:05,124 --> 00:11:08,226
put in there. So you notice that I have this little dollar sign and that

177
00:11:08,248 --> 00:11:12,066
is basically remix way of saying, okay, this is a dynamic part

178
00:11:12,088 --> 00:11:15,570
of the URL, this is the session id. So whatever

179
00:11:15,640 --> 00:11:18,914
somebody puts in there, match on that and load this file

180
00:11:18,962 --> 00:11:23,058
and there we can handle our logic. Finally, we have this root TSX,

181
00:11:23,154 --> 00:11:28,882
which is basically the wrapper around the entire application remix,

182
00:11:28,946 --> 00:11:32,986
or rather react router nowadays because they moved it over can do really

183
00:11:33,088 --> 00:11:36,854
cool things with its routing, with nested subroute, with outlets.

184
00:11:36,982 --> 00:11:40,346
Really amazing. You can find all of that in the basic readme of

185
00:11:40,368 --> 00:11:44,000
remix. So please head over there, but be sure to check it out.

186
00:11:45,010 --> 00:11:48,366
So let's dive a bit deeper. The create or join session page as

187
00:11:48,388 --> 00:11:52,830
I call it here. So we have those two forms basically do

188
00:11:52,900 --> 00:11:56,658
similar things, but they both need to be handled. Okay, so how

189
00:11:56,744 --> 00:12:00,034
did we in the past handle a form on the web?

190
00:12:00,232 --> 00:12:03,762
Well, we did something like this. We said well we

191
00:12:03,816 --> 00:12:08,322
have a form with a label and input and a button that submits.

192
00:12:08,466 --> 00:12:12,134
So what you see here is that I actually import something from

193
00:12:12,172 --> 00:12:15,526
remix called form. And what's good to know is that underwater this

194
00:12:15,548 --> 00:12:18,594
will just render a native HTML form

195
00:12:18,652 --> 00:12:23,046
element in your page. So that's great. And we'll

196
00:12:23,238 --> 00:12:26,918
get to see why we actually use this instead of just the native

197
00:12:27,014 --> 00:12:30,618
form element in a bit. And as you notice here,

198
00:12:30,704 --> 00:12:34,702
I don't have any prevent default, no event

199
00:12:34,756 --> 00:12:38,426
listeners, I'm actually just going to say method is post submit

200
00:12:38,458 --> 00:12:42,682
this thing. And in the past this was not ideal because these frameworks,

201
00:12:42,746 --> 00:12:46,286
especially these front end frameworks, when you posted it, well it

202
00:12:46,308 --> 00:12:49,534
had nothing to post to, right? If you just had a create react

203
00:12:49,582 --> 00:12:52,866
app and youre post, there's no server running there, there's nothing

204
00:12:52,888 --> 00:12:56,834
that can handle my post request. So I had to have

205
00:12:56,872 --> 00:13:00,726
an on submit event on the form, prevent the default, then get

206
00:13:00,748 --> 00:13:04,214
the data, get it from the state and add all this logic to

207
00:13:04,412 --> 00:13:08,390
my application which by the way just works when youre have client side Javascript,

208
00:13:09,050 --> 00:13:12,454
which is not ideal because the web is really good at submitting

209
00:13:12,502 --> 00:13:16,266
forms. So let's just submit it. So where do we then handle that?

210
00:13:16,368 --> 00:13:20,042
Well, in that same file. And note that these are simplified code

211
00:13:20,096 --> 00:13:24,046
examples. So I've hidden the JSX here that we just saw.

212
00:13:24,148 --> 00:13:27,854
In the same file I export something which is called an action and

213
00:13:27,892 --> 00:13:31,662
this is basically a server side function. And this server side function

214
00:13:31,796 --> 00:13:35,286
needs to be named action, like exactly action

215
00:13:35,338 --> 00:13:38,802
and be exported. So remix will pick it up. And what

216
00:13:38,856 --> 00:13:42,866
it does is whenever you post something from the front end and

217
00:13:42,888 --> 00:13:46,526
do an actual post request, this function on the server will

218
00:13:46,568 --> 00:13:49,990
be ran. So as you can see here, I dave

219
00:13:50,140 --> 00:13:53,282
a request that's coming in and in that request

220
00:13:53,426 --> 00:13:57,174
there's just form data. Well we get the form data,

221
00:13:57,292 --> 00:14:00,780
we get the username and this is usually when I show this where

222
00:14:01,150 --> 00:14:04,506
older developers say hey oh, that's how I used to do

223
00:14:04,528 --> 00:14:08,474
it. Exactly. And it's still perfectly fine. So here

224
00:14:08,512 --> 00:14:11,774
we then say, okay, I will create a new session id. I use a nice

225
00:14:11,812 --> 00:14:14,906
package called human readable ids because it's a bit nicer

226
00:14:15,018 --> 00:14:18,522
to read those than these gigantic

227
00:14:18,586 --> 00:14:21,790
randomly generated ones. But then I call

228
00:14:21,860 --> 00:14:24,994
something called superbase client. And what's just important for you to know

229
00:14:25,032 --> 00:14:28,434
is that superbase client is just an SDK by

230
00:14:28,472 --> 00:14:31,874
superbase that allows you to talk

231
00:14:31,912 --> 00:14:35,458
with your database. So here we say okay, go to sessions, insert a

232
00:14:35,464 --> 00:14:39,126
new session with this session id, and then something cool happens.

233
00:14:39,228 --> 00:14:42,534
So what we do is say, okay, we need to return something from this

234
00:14:42,572 --> 00:14:46,162
function, always. So what we could return is a redirect

235
00:14:46,226 --> 00:14:50,058
which we import from remix. And that does exactly what you think, it just

236
00:14:50,144 --> 00:14:53,946
redirects the page to whatever you want. So in our case, that might

237
00:14:53,968 --> 00:14:57,530
be nice to redirect to sessionnewsessionid,

238
00:14:58,190 --> 00:15:02,410
but what the remix is really focused on is also your error handling,

239
00:15:02,830 --> 00:15:06,510
which in the readme of remix there's a lot of information there.

240
00:15:06,660 --> 00:15:10,074
But what I use, for instance here is say okay, well, if this superbase

241
00:15:10,122 --> 00:15:13,614
client returns me an error, I don't want to redirect, I want to show what

242
00:15:13,652 --> 00:15:17,090
went wrong. So how do I do that? Well, I just return an object

243
00:15:17,160 --> 00:15:20,546
here to be used. So remix can handle this.

244
00:15:20,568 --> 00:15:24,340
But how do I then actually get that object with the error data?

245
00:15:24,710 --> 00:15:28,070
Well, I use something of remix called the use action data.

246
00:15:28,140 --> 00:15:31,734
And this is a hook that whenever your

247
00:15:31,772 --> 00:15:35,330
action is ran and it returns something, this will be updated

248
00:15:35,490 --> 00:15:39,014
if you have clientside like javascript. So this is where that form package comes

249
00:15:39,052 --> 00:15:42,554
in. So instead of just a regular, which will still work, by the way,

250
00:15:42,592 --> 00:15:46,586
a regular HTML five form, when you submit it,

251
00:15:46,768 --> 00:15:50,086
it does a full request to the back end, it's going to handle your logic,

252
00:15:50,118 --> 00:15:53,766
you're going to return error, it's going to do a full rerender of the page

253
00:15:53,808 --> 00:15:57,342
and you actually see your browser basically refresh the page.

254
00:15:57,476 --> 00:16:00,974
But when you have client side javascript, it can do all of this

255
00:16:01,012 --> 00:16:04,906
on the clientside, right? It can enhance the user experience. It doesn't need to fully

256
00:16:04,938 --> 00:16:08,306
do a reload and be time consuming. No, it can just do it on

257
00:16:08,328 --> 00:16:11,922
the clientside for you. And in that case this action data will also

258
00:16:11,976 --> 00:16:15,794
be filled and the render method will run again and we

259
00:16:15,832 --> 00:16:19,350
can display them. Do whatever you find logical in this case.

260
00:16:19,500 --> 00:16:23,190
But this is a real core concept of how remix works,

261
00:16:23,340 --> 00:16:26,774
which is great because I don't know a lot of frameworks that handle form so

262
00:16:26,812 --> 00:16:30,278
well. So if you know regular old posts,

263
00:16:30,454 --> 00:16:33,738
it's basically that, and underwater remix will enhance the

264
00:16:33,744 --> 00:16:37,100
user experience for you. So that's great.

265
00:16:37,630 --> 00:16:40,730
So progressively enhance with JavaScript.

266
00:16:41,250 --> 00:16:44,782
And I will say that a lot during this

267
00:16:44,836 --> 00:16:48,686
talk and I can already hear you saying yeah,

268
00:16:48,788 --> 00:16:52,814
okay, but all my users do have JavaScript and the point

269
00:16:52,852 --> 00:16:56,210
is not about the user not having JavaScript.

270
00:16:57,190 --> 00:17:00,930
And I like to refer to this tweet from 2012

271
00:17:01,000 --> 00:17:04,894
from Jake Archibald basically saying we don't have non JavaScript

272
00:17:04,942 --> 00:17:08,802
users. No, all your users are non JavaScript users while they're

273
00:17:08,866 --> 00:17:12,534
loading your javascript. That's the first example. So if youre

274
00:17:12,572 --> 00:17:15,382
resources don't load or aren't loaded yet,

275
00:17:15,516 --> 00:17:19,158
if your application doesn't work, what does that say for your user experience?

276
00:17:19,324 --> 00:17:22,422
Right, and we shouldn't so heavily rely on

277
00:17:22,476 --> 00:17:26,106
having this client side JavaScript. So this is while it's loading. But even

278
00:17:26,128 --> 00:17:29,530
if it's loaded, I'm sorry, even if it's loaded,

279
00:17:30,750 --> 00:17:34,650
you're still not but of the woods yet. So I gave this presentation

280
00:17:34,810 --> 00:17:37,726
to a few colleagues and I was talking with one of my colleagues and he

281
00:17:37,748 --> 00:17:41,402
said well Dave, I also built an app with remix

282
00:17:41,546 --> 00:17:45,034
like two months ago, like oh cool, let me see. Then we visited

283
00:17:45,082 --> 00:17:48,882
the page and he hadn't touched it in two months and the

284
00:17:48,936 --> 00:17:52,098
page was just blank. Well, remixes. Of course

285
00:17:52,184 --> 00:17:55,406
you can still do whatever you want, you can still introduce a lot of client

286
00:17:55,438 --> 00:17:58,758
side JavaScript, but what I told him is like well maybe just

287
00:17:58,844 --> 00:18:02,534
turn off your javascript for a second. And suddenly his entire application

288
00:18:02,652 --> 00:18:06,486
worked again, because it just used the server side actions, it just

289
00:18:06,508 --> 00:18:10,374
used the server side routes and used the web. And that's so powerful that

290
00:18:10,412 --> 00:18:13,446
even if your clientside Javascript, which might be error prone,

291
00:18:13,558 --> 00:18:17,114
even if that fouls, you still have hopefully a working application.

292
00:18:17,232 --> 00:18:20,638
I mean you can always run into the issue of having the full white page,

293
00:18:20,724 --> 00:18:24,654
sure, but at least if you put enough on the back

294
00:18:24,692 --> 00:18:27,982
end instead of the front end, you can make your app a bit more

295
00:18:28,036 --> 00:18:31,886
resilient. Okay,

296
00:18:31,988 --> 00:18:34,894
cool. So we had that first form, that was basically it,

297
00:18:34,932 --> 00:18:38,386
that's how you handle forms. And then of course we

298
00:18:38,408 --> 00:18:41,902
have a second form. So I already told you that whenever you submit

299
00:18:41,966 --> 00:18:44,622
and you have an action in that same file or in that same route,

300
00:18:44,686 --> 00:18:47,814
rather the action will pick it up. But what if you have

301
00:18:47,852 --> 00:18:51,414
two files, two forms, sorry, do you then have two

302
00:18:51,452 --> 00:18:53,670
actions? Well no you don't.

303
00:18:54,410 --> 00:18:58,134
So we need to use an alt trick that some

304
00:18:58,172 --> 00:19:01,846
of youre might remember, which is just a hidden input. So for instance

305
00:19:01,878 --> 00:19:05,162
in this hidden input we can say well the form type is

306
00:19:05,216 --> 00:19:08,826
join session. And for the other one we say the form type

307
00:19:08,928 --> 00:19:13,030
is create a session. And then what we can do is when this

308
00:19:13,120 --> 00:19:16,654
information comes in on the action, we can say,

309
00:19:16,692 --> 00:19:20,158
okay, well get that form type from the form data. And then,

310
00:19:20,244 --> 00:19:23,326
well, I made a switch here saying, oh, take the form time,

311
00:19:23,428 --> 00:19:27,186
create session, you should do this, this, and this. Join session, you should do this,

312
00:19:27,208 --> 00:19:30,658
this, and this. So that's an easy trick how we

313
00:19:30,664 --> 00:19:34,434
can basically reuse the same action but for different purposes on that

314
00:19:34,472 --> 00:19:37,686
route, for different forms on that route. And that's it.

315
00:19:37,788 --> 00:19:39,720
This is how simple you can make it.

316
00:19:42,730 --> 00:19:46,742
Okay, so it can handle basic forms. It's really

317
00:19:46,796 --> 00:19:50,394
nice. But of course we need way more if we want to create this real

318
00:19:50,432 --> 00:19:53,546
time interactive web application. So let's have a look at

319
00:19:53,568 --> 00:19:57,494
that dynamic page. Once you join or created a session

320
00:19:57,622 --> 00:20:01,018
where you can actually run the application that looks a

321
00:20:01,024 --> 00:20:03,886
bit like this. And there are a couple of parts here. So first we have

322
00:20:03,908 --> 00:20:07,582
this top bar, and in this top bar we basically want to load some data

323
00:20:07,636 --> 00:20:11,438
and show whether somebody has voted or not. If the

324
00:20:11,604 --> 00:20:15,146
vote visibility is toggled, we might want to show the actual vote

325
00:20:15,178 --> 00:20:18,370
that they did, but otherwise just voted, not voted.

326
00:20:18,870 --> 00:20:22,078
Then we have the core of our interactivity for the user,

327
00:20:22,174 --> 00:20:25,646
which is here. So note that this is the view of an admin

328
00:20:25,758 --> 00:20:29,062
youre can see that by the show votes and the clear votes button

329
00:20:29,116 --> 00:20:33,346
at the bottom, or rather toggles maybe that's

330
00:20:33,378 --> 00:20:37,074
just shown for the actual admin. The rest just sees that grid

331
00:20:37,122 --> 00:20:40,678
of choices. And then in the end we have this

332
00:20:40,764 --> 00:20:44,630
little bit where we say copy invite because of course somebody starts a session

333
00:20:44,710 --> 00:20:48,230
and then you want to share that with your team, maybe in a team's chat

334
00:20:48,310 --> 00:20:51,450
and you want to send a link. So first let's have a look at that

335
00:20:51,520 --> 00:20:54,954
so we can finish up the previous page we looked

336
00:20:54,992 --> 00:20:58,686
at. So of course you can just

337
00:20:58,708 --> 00:21:02,382
copy something from the URL. It's maybe not as nice as a user experience.

338
00:21:02,516 --> 00:21:06,542
So what I did is I said, okay, I'm going to have this little components

339
00:21:06,686 --> 00:21:10,786
which has a button called copy invite. And what does this button do?

340
00:21:10,888 --> 00:21:14,798
Well, basically whatever your domain is on the index

341
00:21:14,894 --> 00:21:18,866
page, it's going to pass a query parameter saying join

342
00:21:18,898 --> 00:21:21,880
session id. Splendid Al 40 in this case.

343
00:21:22,890 --> 00:21:26,578
So when you hit this button, if you are on a mobile device,

344
00:21:26,674 --> 00:21:29,786
well there's something web standard which

345
00:21:29,808 --> 00:21:32,906
is the native share API. So I'm going to check is

346
00:21:32,928 --> 00:21:37,002
that available? Use that and you get

347
00:21:37,056 --> 00:21:40,246
slack and teams and all those chat

348
00:21:40,278 --> 00:21:43,550
tools so we can really leverage whatever phone they use.

349
00:21:43,700 --> 00:21:47,162
If that's not supported. Well then let's have a look whether we have clientside

350
00:21:47,226 --> 00:21:50,910
Javascript because maybe we can then put it

351
00:21:50,980 --> 00:21:55,066
on the clipboard so somebody can paste it and otherwise

352
00:21:55,178 --> 00:21:58,962
this can just be the entire URL that we see on the left and

353
00:21:59,016 --> 00:22:03,266
somebody can manually copy that. Okay, so when somebody goes

354
00:22:03,288 --> 00:22:07,090
back to that index page with the forms, we need to handle basically

355
00:22:07,160 --> 00:22:10,438
this query param. So how do we do that? Well, we're going

356
00:22:10,444 --> 00:22:13,922
to do some starts server side rendering and that's important. It's on the server

357
00:22:13,986 --> 00:22:16,920
side for a better user experience.

358
00:22:17,950 --> 00:22:21,318
So whenever somebody visits

359
00:22:21,414 --> 00:22:24,970
this page with the search Param,

360
00:22:26,030 --> 00:22:30,022
we can basically get it out of there using the use search params.

361
00:22:30,166 --> 00:22:33,246
And why is this important? Because I understand that you

362
00:22:33,268 --> 00:22:36,762
can add a use effect and basically do this manually.

363
00:22:36,826 --> 00:22:40,222
See okay, what are the search parameters? The downside is the use

364
00:22:40,276 --> 00:22:43,706
effect is clientside and what you get then is that it's

365
00:22:43,738 --> 00:22:46,946
going to render this page. Then you're going to check whatever you need

366
00:22:46,968 --> 00:22:50,098
to do and then you're going to maybe update the layout so you

367
00:22:50,104 --> 00:22:53,598
get this flash of content, which is annoying.

368
00:22:53,774 --> 00:22:57,174
We can already do this on the server. So this hook first

369
00:22:57,212 --> 00:23:00,598
runs when this page is rendered on the server. And there we can see okay,

370
00:23:00,684 --> 00:23:03,960
is there a join session id param or not?

371
00:23:04,570 --> 00:23:07,560
Well if it is there,

372
00:23:08,090 --> 00:23:11,962
if you have to join session, you might not want to show the

373
00:23:12,016 --> 00:23:15,274
create a session form, right? Doesn't make

374
00:23:15,312 --> 00:23:19,066
sense. Somebody's intent there is to join a session, not create one.

375
00:23:19,168 --> 00:23:22,346
We'll hide it. Secondly, what we can do

376
00:23:22,368 --> 00:23:25,662
is say in the join existing session youre might already set

377
00:23:25,716 --> 00:23:29,374
the default value there for this input to be that

378
00:23:29,412 --> 00:23:32,400
value. So the user of course doesn't have to type it in.

379
00:23:32,770 --> 00:23:36,494
What we can also then do is say maybe I want to auto

380
00:23:36,542 --> 00:23:40,322
focus on the name input there so the page loads, you will just

381
00:23:40,376 --> 00:23:43,586
see the form and it will look a bit like this.

382
00:23:43,688 --> 00:23:47,298
Yeah, so a bit smarter way of rendering but also enhancing the

383
00:23:47,304 --> 00:23:51,286
user experience. Again, to for instance auto fouls on

384
00:23:51,308 --> 00:23:54,966
this name input, you type your name, you hit enter, which by the

385
00:23:54,988 --> 00:23:58,878
way will work because we use native form submits

386
00:23:59,074 --> 00:24:02,966
and all the logic is executed to basically redirect

387
00:24:02,998 --> 00:24:04,650
you to the page of successful.

388
00:24:06,270 --> 00:24:10,054
Cool. So we talked a lot about posting

389
00:24:10,102 --> 00:24:13,566
data and handling that in the back end and a bit of routing. But of

390
00:24:13,588 --> 00:24:17,530
course a big part of your application is actually displaying data that's

391
00:24:17,610 --> 00:24:21,598
probably stored in the database somewhere. So like this bar on top.

392
00:24:21,764 --> 00:24:24,126
So let's have a look at how you do that.

393
00:24:24,308 --> 00:24:28,130
Unsurprisingly, it looks a lot like that action that we looked at.

394
00:24:28,200 --> 00:24:31,870
So instead of an action you have something called a loader.

395
00:24:31,950 --> 00:24:35,726
And if youre worked with next JS, this is probably fairly

396
00:24:35,758 --> 00:24:39,338
familiar to you because this is sort of like get surropsite

397
00:24:39,374 --> 00:24:43,778
props, right? It's a function that whenever somebody fits a URL,

398
00:24:43,874 --> 00:24:47,654
it's first going to go to the server, it's going to execute this function where

399
00:24:47,692 --> 00:24:51,034
we basically get our data. So in our case

400
00:24:51,072 --> 00:24:54,502
here in the example we get the current session.

401
00:24:54,646 --> 00:24:58,474
If the session doesn't exist, maybe we redirect, we can handle this

402
00:24:58,512 --> 00:25:02,106
however we want, but after that we're going to get everybody's vote

403
00:25:02,138 --> 00:25:05,454
for this session and then return that

404
00:25:05,492 --> 00:25:09,054
data. So how do we now access it with

405
00:25:09,092 --> 00:25:12,046
the use loader data instead of use action data?

406
00:25:12,228 --> 00:25:15,466
So this is the pattern that remix keeps on following.

407
00:25:15,658 --> 00:25:18,786
So the first time it's going to render on the server, this loader data will

408
00:25:18,808 --> 00:25:22,100
be filled with the votes and the session data.

409
00:25:22,630 --> 00:25:26,322
You do render your HTML or JSX accordingly.

410
00:25:26,466 --> 00:25:30,226
And then on the clientside, if you don't

411
00:25:30,258 --> 00:25:34,354
have any use effects or client side Javascript

412
00:25:34,402 --> 00:25:36,520
that needs to be executed, this is it.

413
00:25:39,370 --> 00:25:42,858
Cool. So we can get the latest state from the server basically of the

414
00:25:42,864 --> 00:25:46,170
session and display that. So we need to also

415
00:25:46,240 --> 00:25:49,434
add some interactivity now. So at the start nobody has

416
00:25:49,472 --> 00:25:53,166
voted, but we do wanted to do that. And this is usually

417
00:25:53,268 --> 00:25:57,630
where we tend to reach for client side Javascript.

418
00:25:58,130 --> 00:26:01,870
We see a bunch of buttons, we see

419
00:26:02,020 --> 00:26:05,806
a grid of votes, and it's like oh okay, we'll need state and somebody's

420
00:26:05,838 --> 00:26:09,486
active vote, and I need to keep everything in sync

421
00:26:09,678 --> 00:26:13,186
and whatnot. But even worse, once we

422
00:26:13,208 --> 00:26:16,258
have this clientside Javascript, we need an API to post this to.

423
00:26:16,344 --> 00:26:19,510
Then that API needs to be hosted somewhere.

424
00:26:19,850 --> 00:26:23,494
You might run into stuff with cores, you need

425
00:26:23,532 --> 00:26:26,966
API keys, it gets way more complex, while all I want

426
00:26:26,988 --> 00:26:29,820
to do is just send some data over.

427
00:26:32,030 --> 00:26:36,246
So let's have a dive into that, into these interactive

428
00:26:36,278 --> 00:26:39,914
bits, or rather these microforms as I like to call

429
00:26:39,952 --> 00:26:43,758
them. So let's look at the voting first.

430
00:26:43,844 --> 00:26:47,614
Right here we have this grid and

431
00:26:47,652 --> 00:26:51,146
let's see how we can make this work without client side Javascript. And what's

432
00:26:51,178 --> 00:26:55,374
good to remember is again, it's not about your user not having client side JavaScript,

433
00:26:55,422 --> 00:26:59,234
it's about reducing the complexity of your app. First of all

434
00:26:59,432 --> 00:27:03,102
by having way less client side Javascript that needs to mimic

435
00:27:03,166 --> 00:27:06,738
browser behavior, have less error prone

436
00:27:06,754 --> 00:27:10,374
logic because of that, and really get this solid base in there

437
00:27:10,412 --> 00:27:12,040
and then enhance it.

438
00:27:14,570 --> 00:27:17,862
After that we can have a look at the show votes toggle and the clear

439
00:27:17,916 --> 00:27:21,714
votes toggle. Cool. So looking at that grid,

440
00:27:21,762 --> 00:27:24,698
and I called it a grid on purpose because I didn't want to call it

441
00:27:24,704 --> 00:27:28,106
a radio button group right out of the way. But isn't that what

442
00:27:28,128 --> 00:27:31,502
it is? So isn't it basically here

443
00:27:31,556 --> 00:27:35,710
a field set where we have a bunch of radio inputs

444
00:27:36,370 --> 00:27:40,430
that have the Fibonacci sequence here where you can vote?

445
00:27:40,850 --> 00:27:44,466
And why I'm saying this is because the radio buttons do exactly what

446
00:27:44,488 --> 00:27:49,358
we wanted it to do. You can always just have one active

447
00:27:49,534 --> 00:27:53,394
vote, and when you click a new one, the old one should

448
00:27:53,592 --> 00:27:57,330
go back to not being checked and the new one should be.

449
00:27:57,400 --> 00:28:00,966
So this works really well, it covers everything that we need. So let's just build

450
00:28:00,988 --> 00:28:04,914
it like that then with CSS. And actually you could basically hide

451
00:28:04,962 --> 00:28:08,858
the little radio button, make the nice square and have it light up.

452
00:28:08,944 --> 00:28:12,106
That's all on the CSS part, which a lot of people are familiar with on

453
00:28:12,128 --> 00:28:19,082
how to do that, but underwater it's just this cool.

454
00:28:19,216 --> 00:28:23,098
So one drawback

455
00:28:23,194 --> 00:28:26,974
of going to forms for this is whenever I hit

456
00:28:27,012 --> 00:28:30,254
one of the radio buttons, nothing happens because

457
00:28:30,292 --> 00:28:33,406
we still need to submit it. So I need to have a submit button at

458
00:28:33,428 --> 00:28:37,098
the bottom and then I can post it without any clients or Javascript. But that's

459
00:28:37,114 --> 00:28:40,946
not very nice for my user experience. That's not what we want. So let's have

460
00:28:40,968 --> 00:28:44,530
a look at how we can do that. We can use something that's called

461
00:28:44,600 --> 00:28:48,086
the use submit, and this is something by remix where you can

462
00:28:48,108 --> 00:28:51,254
basically say okay, I want youre to submit this form now,

463
00:28:51,292 --> 00:28:55,238
and I want to submit to the normal action that you

464
00:28:55,404 --> 00:28:58,466
would otherwise. So here I add an on change handler

465
00:28:58,498 --> 00:29:02,202
to this little form where I say when something

466
00:29:02,256 --> 00:29:06,554
changes, just submit it to the back end or to the action rather.

467
00:29:06,752 --> 00:29:09,834
And note that we don't prevent default because we wanted

468
00:29:09,872 --> 00:29:13,726
the default, we just want to submit this thing. Cool. But now

469
00:29:13,748 --> 00:29:17,594
I'm still left with this tiny button which says submit

470
00:29:17,642 --> 00:29:21,114
at the bottom, which is not needed if you have client side JavaScript.

471
00:29:21,242 --> 00:29:24,622
But how am I going to hide it or show it?

472
00:29:24,756 --> 00:29:28,066
Because you basically don't have, for instance client side JavaScript to check

473
00:29:28,088 --> 00:29:31,918
whether you have client side JavaScript and you don't want flickering of your UI.

474
00:29:32,094 --> 00:29:34,770
So don't be scared, we're going to have a look at some CSS.

475
00:29:35,590 --> 00:29:38,566
You can do this in a million ways and probably better ways than I have

476
00:29:38,588 --> 00:29:42,422
it here but just to showcase you can do something like say

477
00:29:42,476 --> 00:29:45,718
okay, I'm going to say set a data attribute on the

478
00:29:45,724 --> 00:29:48,962
body saying there's no Javascript, and then whenever

479
00:29:49,026 --> 00:29:52,234
there is clientside Javascript it's basically going to update the value to

480
00:29:52,272 --> 00:29:56,074
true. So then what we can do in our CSS and we can create some

481
00:29:56,112 --> 00:29:59,306
helper classes like no JavaScript show or no

482
00:29:59,328 --> 00:30:02,686
JavaScript hide. And based on that we can

483
00:30:02,708 --> 00:30:06,046
say well if that attribute is true or false, we're going to show or

484
00:30:06,068 --> 00:30:09,214
hide anything that has this class name.

485
00:30:09,412 --> 00:30:12,926
And I do some trick here with animations and why

486
00:30:12,948 --> 00:30:16,530
do I do that? Well of course we want to give

487
00:30:16,600 --> 00:30:20,402
JavaScript a second to load. So whether you want to hide certain

488
00:30:20,456 --> 00:30:24,194
UI parts, you want to give that check

489
00:30:24,232 --> 00:30:27,618
or basically the clientside said Javascript bundle some time to actually load. So in

490
00:30:27,624 --> 00:30:31,160
this case I just gave it 500 milliseconds and after that

491
00:30:31,530 --> 00:30:35,686
these things will come into effect. So it's a small little trick where

492
00:30:35,788 --> 00:30:39,466
we now have some reusable CSS classes, which is nice to use for youre team

493
00:30:39,568 --> 00:30:43,194
to show or hide specific content for both

494
00:30:43,232 --> 00:30:46,794
use cases. So now we show

495
00:30:46,832 --> 00:30:50,574
manual submit button for the non JavaScript UI using

496
00:30:50,612 --> 00:30:54,334
the CSS. Cool. So these two

497
00:30:54,372 --> 00:30:58,206
action buttons at the bottom. Well how

498
00:30:58,228 --> 00:31:01,854
are those microforms? Well, let's do the

499
00:31:01,892 --> 00:31:05,438
same thing as first we'll just create two forms

500
00:31:05,534 --> 00:31:09,026
which have two inputs which are basically hidden and say

501
00:31:09,208 --> 00:31:12,370
I want to toggle the effort or I want to clear the effort.

502
00:31:13,670 --> 00:31:18,302
This is the only way you can have these buttons

503
00:31:18,446 --> 00:31:22,014
in our forms to have these interactive bits without clients

504
00:31:22,062 --> 00:31:25,506
or JavaScript because the only interactivity that you can actually have is posting

505
00:31:25,538 --> 00:31:28,902
this to the back end. And what we do is

506
00:31:29,036 --> 00:31:32,474
just have these two forms here and then again use

507
00:31:32,512 --> 00:31:36,042
that same trick in that action we're going to check. Okay,

508
00:31:36,096 --> 00:31:39,754
what is the form type? When it's toggle effort you might want to do something

509
00:31:39,872 --> 00:31:43,410
in the database. And with clear effort it's the same and that's

510
00:31:43,430 --> 00:31:47,054
it. I mean it's not much harder than having

511
00:31:47,092 --> 00:31:50,714
an event listener on a button and then having to post to an API.

512
00:31:50,762 --> 00:31:54,434
No, it's just a form that now natively submits a new

513
00:31:54,472 --> 00:31:58,050
handle. Works perfectly fine with or without JavaScript.

514
00:32:00,900 --> 00:32:04,396
Great, so let's Dave a look like every party,

515
00:32:04,508 --> 00:32:08,224
you also Dave a bouncer in front of it saying can you show

516
00:32:08,262 --> 00:32:12,500
me some id? Right, we need to see who

517
00:32:12,570 --> 00:32:16,384
the person is that is actually casting a vote so they can just update

518
00:32:16,432 --> 00:32:20,516
their own. But you also want to know who the

519
00:32:20,538 --> 00:32:24,280
admin is so they can toggle the visibility.

520
00:32:24,620 --> 00:32:28,296
So when I was quickly building this, I just had a query parameter with the

521
00:32:28,318 --> 00:32:31,924
username. But of course you can fill in somebody else's

522
00:32:31,972 --> 00:32:36,200
username and then basically cast a vote for them or become admin,

523
00:32:36,280 --> 00:32:39,852
which is not great. I didn't want my

524
00:32:39,906 --> 00:32:43,068
user to have to do a full sign up because now I just want to

525
00:32:43,074 --> 00:32:46,588
do some scrum poker and who is Dave and why does he want my data

526
00:32:46,674 --> 00:32:50,256
and I don't actually need it. A username is nice to show who is

527
00:32:50,278 --> 00:32:53,536
who, but you can fill in whatever you want. And besides that I just need

528
00:32:53,558 --> 00:32:56,610
some basic information like a unique id.

529
00:32:57,640 --> 00:33:01,910
So what do we Dave on the web that is

530
00:33:02,360 --> 00:33:05,956
accessible on the server where we have our mutation logic and

531
00:33:05,978 --> 00:33:09,096
our data loading logic, and how can we make

532
00:33:09,118 --> 00:33:12,584
it only known basically to you as a user and not

533
00:33:12,622 --> 00:33:16,500
to anyone else? We can use server sessions,

534
00:33:16,660 --> 00:33:19,592
which are really cool, which is nothing new.

535
00:33:19,726 --> 00:33:23,656
Remix offers a couple of helper functions to

536
00:33:23,678 --> 00:33:26,612
get you started. In essence, if you've never worked with it,

537
00:33:26,766 --> 00:33:30,264
basically you can have this unique session

538
00:33:30,312 --> 00:33:33,276
in your browser. You start your browser up, go to this page,

539
00:33:33,458 --> 00:33:37,344
and for this session we can keep track of

540
00:33:37,382 --> 00:33:41,308
you basically. So what we do there is we're

541
00:33:41,324 --> 00:33:43,890
using to save some data for you.

542
00:33:44,900 --> 00:33:48,576
I appreciate that these code examples become a bit tidy,

543
00:33:48,608 --> 00:33:52,580
but just follow along because

544
00:33:52,650 --> 00:33:56,276
this is a very simple part. Basically what I'm doing here is

545
00:33:56,298 --> 00:34:00,360
I'm saying, okay, I have that cookie session and I'm going to set

546
00:34:00,510 --> 00:34:03,912
for this session id that I'm joining. I'm going to set

547
00:34:03,966 --> 00:34:08,090
my user id and my username. User id being a

548
00:34:09,100 --> 00:34:12,856
unique id and a username whatever somebody inputted.

549
00:34:13,048 --> 00:34:16,524
So when we handle the form for create session or

550
00:34:16,562 --> 00:34:19,790
join session, we store that information.

551
00:34:20,400 --> 00:34:23,724
So we can do now is when you're on that dynamic session page,

552
00:34:23,842 --> 00:34:27,084
whenever you want to cast a new vote,

553
00:34:27,132 --> 00:34:30,304
you want to say, okay, I think this

554
00:34:30,342 --> 00:34:33,568
is worth five story points. You're not going

555
00:34:33,574 --> 00:34:37,152
to send along who you are. Well, on the water it will,

556
00:34:37,206 --> 00:34:40,500
but you are not. As a developer, you just say for the current

557
00:34:40,570 --> 00:34:43,830
active session this user wanted to

558
00:34:44,520 --> 00:34:48,884
vote the value of five. So here I can do session get

559
00:34:49,082 --> 00:34:52,504
with that session id and I can basically get the data for you. So your

560
00:34:52,542 --> 00:34:56,200
username, your user id. So this makes sure that I can

561
00:34:56,350 --> 00:34:59,770
just store your vote. And you can never

562
00:35:00,140 --> 00:35:03,676
store somebody else's vote because, well, it's not your session and

563
00:35:03,698 --> 00:35:05,230
you don't even know their id.

564
00:35:06,880 --> 00:35:10,476
Well, you don't know their id. If we make sure that you

565
00:35:10,498 --> 00:35:13,804
don't because you can imagine if we have

566
00:35:13,842 --> 00:35:17,696
these votes and we store these votes and for everybody, we're going to

567
00:35:17,718 --> 00:35:21,036
return this data. These votes will contain everybody's

568
00:35:21,068 --> 00:35:25,216
user id and youre don't want to expose that because it's not needed for everybody.

569
00:35:25,398 --> 00:35:28,692
So what you can do, and that's a real added benefit of these server side

570
00:35:28,746 --> 00:35:32,068
functions here in that loader we say, okay,

571
00:35:32,154 --> 00:35:35,828
I'm just going to check whether I'm an admin and whatnot, but I'm also going

572
00:35:35,834 --> 00:35:38,752
to filter out this votes array.

573
00:35:38,896 --> 00:35:42,664
I'm just going to send back basically somebody's username and the

574
00:35:42,702 --> 00:35:46,488
effort that they gave. So for instance, five or three, but I'm not going

575
00:35:46,494 --> 00:35:49,770
to send back their user id because you don't need it

576
00:35:50,380 --> 00:35:53,896
in the application, so don't show it. We do everything on the server

577
00:35:53,928 --> 00:35:57,470
where it's safe and on the client is as dumb as we can keep it.

578
00:35:59,360 --> 00:36:01,900
We can even make this more secure.

579
00:36:02,640 --> 00:36:06,560
So basically we have this superbase and you can

580
00:36:06,710 --> 00:36:10,416
call to that superbase app. And how

581
00:36:10,438 --> 00:36:13,424
can I make this a bit more secure? Well,

582
00:36:13,462 --> 00:36:17,090
I can really leverage that server side only

583
00:36:17,460 --> 00:36:20,900
mutation part. So what I did is I said, okay,

584
00:36:21,050 --> 00:36:23,956
all my policies in superbase, I'm going to block everything.

585
00:36:24,138 --> 00:36:27,572
Doesn't matter which token, I'm going to block everything. Nothing gets

586
00:36:27,626 --> 00:36:31,352
past this. But I'm also

587
00:36:31,406 --> 00:36:35,092
going to create a server only token which youre can do in Superbase,

588
00:36:35,156 --> 00:36:39,284
which is basically the super token that can bypass

589
00:36:39,332 --> 00:36:43,000
these policies. So I'm going to get this server only token

590
00:36:43,340 --> 00:36:46,988
and what I do is I put it in

591
00:36:46,994 --> 00:36:50,444
my process env, which is a known pattern, I think to the most

592
00:36:50,482 --> 00:36:54,590
of you, but basically saying, okay, this is whatever that secret key is.

593
00:36:54,960 --> 00:36:58,176
And now this was, we just run it on

594
00:36:58,198 --> 00:37:01,408
the server will never expose that key. If you want to

595
00:37:01,414 --> 00:37:04,876
be sure, for every file that you want in remix,

596
00:37:04,988 --> 00:37:08,784
you can say server ts as

597
00:37:08,822 --> 00:37:11,604
a post fix to the file and it will make sure that it can just

598
00:37:11,642 --> 00:37:15,664
run on the server. But it does a good job regardless.

599
00:37:15,792 --> 00:37:19,016
And because we use this just on

600
00:37:19,038 --> 00:37:23,284
the server, I can just call this and we're safe

601
00:37:23,332 --> 00:37:26,120
in our security even more secure.

602
00:37:27,260 --> 00:37:31,220
So it feels a bit slow, right? Because you can imagine

603
00:37:31,380 --> 00:37:34,680
previously youre just hit a button, event listener post an app

604
00:37:34,760 --> 00:37:38,380
and you'd update youre UI. But now we're

605
00:37:38,960 --> 00:37:42,648
submitting a form post that goes to that action. That action

606
00:37:42,664 --> 00:37:45,708
is going to talk to Superbase. Superbase is going to do an update in the

607
00:37:45,714 --> 00:37:48,316
database. Then Superbase is going to say, hey,

608
00:37:48,498 --> 00:37:52,128
it went well. And it's going to come back again to us. Then we're going

609
00:37:52,134 --> 00:37:55,532
to say okay, in our UI we then update

610
00:37:55,596 --> 00:37:59,028
or redirect or whatever you want to and then you see it.

611
00:37:59,114 --> 00:38:02,884
So that is annoying. But it's even youre annoying when

612
00:38:02,922 --> 00:38:06,404
you have basically that grid of options to

613
00:38:06,442 --> 00:38:09,636
vote on. Because when I click that and I have to wait for this

614
00:38:09,658 --> 00:38:13,300
entire round trip before I can get the feedback in the UI.

615
00:38:13,460 --> 00:38:17,016
That's another nice user experience. And I promise you

616
00:38:17,038 --> 00:38:20,696
that we were going to use web fundamentals and enhance them to create

617
00:38:20,718 --> 00:38:23,836
a better user experience. So let's have a look at how we can make that

618
00:38:23,858 --> 00:38:27,292
a bit better. We can use something that's already existing online,

619
00:38:27,346 --> 00:38:31,630
which is called optimistic UI. And the gist of it is saying okay,

620
00:38:32,080 --> 00:38:36,136
I'm very optimistic that my code works. Basically I'm

621
00:38:36,168 --> 00:38:39,340
saying you hit submit, we know what you want to submit,

622
00:38:39,420 --> 00:38:42,800
we're already going to update the UI was if it went successful,

623
00:38:43,380 --> 00:38:46,972
then when the response comes back and it says it is successful,

624
00:38:47,116 --> 00:38:50,596
perfect, we don't need to do anything anymore. Once it says that there's an

625
00:38:50,618 --> 00:38:54,560
error, we need to put it back. This can be a bit cumbersome, but luckily

626
00:38:54,720 --> 00:38:58,100
remix thought about this and added something

627
00:38:58,170 --> 00:39:01,944
called a use transition. And what does a use transition do? Well,

628
00:39:01,982 --> 00:39:06,168
basically it has a transition state and you

629
00:39:06,254 --> 00:39:09,796
have this hook. For instance on your dynamic

630
00:39:09,828 --> 00:39:14,296
session page you listen to the transition state. So whenever

631
00:39:14,408 --> 00:39:17,964
any form on that page is submitting that

632
00:39:18,002 --> 00:39:22,472
transition state updates from idle to submitting doesn't

633
00:39:22,536 --> 00:39:26,124
do just that. So when we listen to it and we say okay,

634
00:39:26,162 --> 00:39:29,312
it's submitting, we can basically access that form data

635
00:39:29,366 --> 00:39:32,784
the same as we did it in the action. We can

636
00:39:32,822 --> 00:39:36,528
already do that here client side. So what we can do

637
00:39:36,614 --> 00:39:40,228
is get the data out of there, maybe add some little bit

638
00:39:40,234 --> 00:39:44,036
of client side state to show the optimistic vote here

639
00:39:44,138 --> 00:39:48,224
and clear it again once it's idling and then we can already update

640
00:39:48,272 --> 00:39:51,576
the UI. So what we basically do is see that we

641
00:39:51,598 --> 00:39:55,016
have on the 8th line we

642
00:39:55,038 --> 00:39:59,112
have active user effort where we basically say use the optimistic vote or

643
00:39:59,166 --> 00:40:02,856
the loader data vote and then use that in

644
00:40:02,878 --> 00:40:07,144
the render logic. And I know I said no client side Javascript

645
00:40:07,192 --> 00:40:10,780
state sure you can have client side state. If you want to enhance it,

646
00:40:10,850 --> 00:40:14,636
it's perfectly fine. But first cover your basis, have everything working

647
00:40:14,738 --> 00:40:18,816
and then see okay, how can I enhance this on the client and

648
00:40:18,838 --> 00:40:22,752
you can do it like this. If my client's Javascript doesn't load or something

649
00:40:22,806 --> 00:40:26,472
breaks, my normal flow will still work. It's a bit slower,

650
00:40:26,556 --> 00:40:27,750
but it will still work.

651
00:40:30,360 --> 00:40:33,540
So one thing I haven't talked about yet is going

652
00:40:33,610 --> 00:40:37,572
real time. And you can imagine if you

653
00:40:37,706 --> 00:40:41,672
first build your application fully real time and then

654
00:40:41,726 --> 00:40:45,384
try to bring it back to one that works

655
00:40:45,422 --> 00:40:48,984
with that client side Javascript. That's really difficult to do by the way,

656
00:40:49,022 --> 00:40:53,028
which is called graceful degradation instead of progressive enhancement.

657
00:40:53,204 --> 00:40:56,972
So how difficult is it now to go real

658
00:40:57,026 --> 00:41:00,284
time with that solid base that we have? So how can I have this

659
00:41:00,322 --> 00:41:03,756
Modern Ux? Because technically I don't need clients at

660
00:41:03,778 --> 00:41:07,596
JavaScript. The user could refresh and get the latest version,

661
00:41:07,708 --> 00:41:11,136
but that's not the nicest, right? There's an admin that's going to toggle the

662
00:41:11,158 --> 00:41:14,704
view, it's going to reset around. So how can

663
00:41:14,742 --> 00:41:18,304
we work with this? Naturally I need clients at Javascript to

664
00:41:18,342 --> 00:41:22,132
have these real time updates, but let's have a look at how

665
00:41:22,186 --> 00:41:26,070
that works. So first I created something which is called,

666
00:41:26,520 --> 00:41:29,864
I call it a use superbase subscription. So what is a

667
00:41:29,902 --> 00:41:33,604
subscription in Superbase? It's basically this little socket

668
00:41:33,652 --> 00:41:37,450
connection to Superbase where you can subscribe on

669
00:41:37,900 --> 00:41:41,256
any change that you want to. So what I

670
00:41:41,278 --> 00:41:45,548
did here is that, okay, I'm going to listen for

671
00:41:45,714 --> 00:41:49,804
any query that somebody passes to this custom hook and

672
00:41:49,842 --> 00:41:53,820
then on, well whether it's a put or delete

673
00:41:54,180 --> 00:41:58,176
post, a get whatever, whenever there's an update I want you to call the

674
00:41:58,198 --> 00:42:01,890
past callback. So great.

675
00:42:03,220 --> 00:42:06,172
In this callback I get the little record that got updated.

676
00:42:06,236 --> 00:42:09,748
So let's say that you updated your vote to eight,

677
00:42:09,834 --> 00:42:13,444
I will get your user which says I

678
00:42:13,482 --> 00:42:16,372
updated this to eight,

679
00:42:16,426 --> 00:42:19,540
please update your UI. So what I did naturally was say okay,

680
00:42:19,610 --> 00:42:22,410
thank you and I'm going to push that through some client side state.

681
00:42:22,780 --> 00:42:26,504
But when you have a lot of people and all

682
00:42:26,542 --> 00:42:29,848
spamming the buttons, you have to sort of trust that it comes in at

683
00:42:29,854 --> 00:42:33,816
the right order. Suddenly I was keeping track of basically

684
00:42:33,918 --> 00:42:37,276
against state and basically a copy of whatever was in the database and I was

685
00:42:37,298 --> 00:42:40,764
trying to keep it up to date and I ran into some issues and then

686
00:42:40,802 --> 00:42:44,028
I thought well no, I already

687
00:42:44,114 --> 00:42:47,804
have the logic to get the latest state out of the database,

688
00:42:47,932 --> 00:42:51,650
basically refreshing my page. Can I just reuse that?

689
00:42:52,500 --> 00:42:55,984
You can. So what do I do now? Instead of

690
00:42:56,022 --> 00:42:59,188
pushing into started, I use the last hook that I want

691
00:42:59,194 --> 00:43:02,596
to show you, which is called the use fetcher. And in

692
00:43:02,618 --> 00:43:06,660
essence what a fetcher does is you can have it

693
00:43:06,730 --> 00:43:09,824
rerun your loader function that you have on your file.

694
00:43:09,952 --> 00:43:14,052
So our loader function give us the latest state. So when somebody visits the URL,

695
00:43:14,196 --> 00:43:17,624
they're going to see the latest state. But then what we can do is call

696
00:43:17,662 --> 00:43:21,096
this fetcher. And then in fetcher it will have a

697
00:43:21,118 --> 00:43:24,524
key called data, which will then be filled or not.

698
00:43:24,562 --> 00:43:27,884
So the first time this page renders fetcher data is

699
00:43:27,922 --> 00:43:32,924
empty. So the loader data will

700
00:43:32,962 --> 00:43:36,416
be used. But when we say, oh, we have

701
00:43:36,438 --> 00:43:40,668
a callback and I'm going to fetcher load, well, my current path,

702
00:43:40,844 --> 00:43:44,652
this fetcher is going to be filled with again the latest

703
00:43:44,796 --> 00:43:48,356
version of the data. So now I'm basically just listening. Hey, there's an

704
00:43:48,378 --> 00:43:52,228
update. Just rerun my logic and have the data there.

705
00:43:52,314 --> 00:43:56,004
But with this simple or statement here, we can say which one

706
00:43:56,042 --> 00:44:00,176
we want to use and that's it. That is the entire

707
00:44:00,298 --> 00:44:03,704
layer of adding real time to this application.

708
00:44:03,902 --> 00:44:07,736
And I'm not that surprised that it is this easy because

709
00:44:07,918 --> 00:44:11,530
I first built this solid base and now I enhance that.

710
00:44:13,420 --> 00:44:16,668
So then you go for a test run. Well, this is me going for a

711
00:44:16,674 --> 00:44:19,916
test run with my team. So on the top right we have the

712
00:44:19,938 --> 00:44:23,292
application and on the left I have my teams call. Well,

713
00:44:23,346 --> 00:44:27,180
naturally, since there are a lot of developers in these meetings,

714
00:44:27,340 --> 00:44:31,090
they're trying to submit the form with things like drop table and

715
00:44:31,780 --> 00:44:35,340
try to see if I screwed up somewhere. Luckily I didn't.

716
00:44:35,420 --> 00:44:39,040
But more importantly, suddenly I had all these people just randomly

717
00:44:39,120 --> 00:44:42,516
selecting votes and tapping it. So really stress testing my system

718
00:44:42,698 --> 00:44:46,496
and my poor free superbase subscription, having all those requests

719
00:44:46,528 --> 00:44:49,748
going on, that was not the best.

720
00:44:49,914 --> 00:44:53,360
So what I did is I throttle it and normally youre

721
00:44:53,370 --> 00:44:56,532
would be like oh, why would you trottle it? You make your application slower.

722
00:44:56,676 --> 00:45:00,424
But we do this in a bit of a smarter way. So we

723
00:45:00,462 --> 00:45:04,300
have this optimistic UI part. So when you click

724
00:45:04,370 --> 00:45:07,884
on for instance, eight, it updates immediately for

725
00:45:07,922 --> 00:45:10,844
you that it takes a while in the back end,

726
00:45:10,882 --> 00:45:15,040
sure. But for you it's instant. So you have this feeling

727
00:45:16,180 --> 00:45:20,220
of an instant update whenever

728
00:45:20,300 --> 00:45:23,536
somebody else pressed on a

729
00:45:23,558 --> 00:45:27,564
vote of, for instance, one. If that takes 1 second before I execute

730
00:45:27,612 --> 00:45:31,300
it, are you really going to notice, do you know exactly

731
00:45:31,370 --> 00:45:34,804
the millisecond somebody pressed on it? So this is how I could just say,

732
00:45:34,842 --> 00:45:38,276
okay, well let's maybe throttle this for my demo and for my free

733
00:45:38,458 --> 00:45:40,360
superbase subscription.

734
00:45:41,260 --> 00:45:44,808
So now me and my team can actually just use this.

735
00:45:44,894 --> 00:45:47,850
And it's been serving us really well for it.

736
00:45:50,060 --> 00:45:53,528
Great. So we looked at a lot,

737
00:45:53,614 --> 00:45:56,664
right, all these little parts and that was the exact intent

738
00:45:56,712 --> 00:46:00,364
of building this application. You have so many of these. We basically had four little

739
00:46:00,402 --> 00:46:03,944
features, but look at how much complexity it even becomes

740
00:46:03,992 --> 00:46:07,256
when you try to keep it simple. And what I want to show

741
00:46:07,298 --> 00:46:10,496
here is that remix isn't just simple forms. And when you talk with

742
00:46:10,518 --> 00:46:13,596
people about remix, they will most likely talk about forms

743
00:46:13,628 --> 00:46:17,420
and having the dashboards and all those standard applications.

744
00:46:17,500 --> 00:46:21,124
But you can see we fouls easily. Just create a real time application.

745
00:46:21,322 --> 00:46:24,548
Not because it's all remix that offers that.

746
00:46:24,634 --> 00:46:28,084
No, it offers this solid base which makes it easy for you to

747
00:46:28,122 --> 00:46:32,090
add it on there, which is how I believe you should always build.

748
00:46:35,420 --> 00:46:39,316
A big benefit was that we basically moved

749
00:46:39,428 --> 00:46:43,384
all the state to the server where we could because

750
00:46:43,422 --> 00:46:46,508
we have the latest state on the server. We don't have all this client side

751
00:46:46,594 --> 00:46:50,264
logic that you need to keep in sync, keep up to date, which suddenly

752
00:46:50,312 --> 00:46:53,448
becomes very complex. And when you dave complex client

753
00:46:53,464 --> 00:46:56,956
side state youre going to introduce something called Redux, which needs a redux

754
00:46:56,988 --> 00:47:00,464
saga, which is going to need, and you run into this gigantic system.

755
00:47:00,662 --> 00:47:04,050
Well, all you had was basically a simple bit of data.

756
00:47:04,580 --> 00:47:08,404
Databases are perfect at keeping the latest state. Just get

757
00:47:08,442 --> 00:47:12,692
that and use these tools to do that and

758
00:47:12,746 --> 00:47:16,212
use web fundamentals. So I said that quite a few times during this

759
00:47:16,266 --> 00:47:20,392
talk and that's really what I want to get

760
00:47:20,446 --> 00:47:24,024
across, that if you use these web fundamentals which are

761
00:47:24,062 --> 00:47:27,976
proven technologies fully optimized for the browser that your

762
00:47:28,078 --> 00:47:31,844
application actually going to run in, really use that,

763
00:47:31,902 --> 00:47:35,340
it's really good at all these things. But then sure,

764
00:47:35,410 --> 00:47:39,340
enhance for modern Ux. So basically do it in that order

765
00:47:39,410 --> 00:47:40,910
instead of the other way around.

766
00:47:42,480 --> 00:47:45,664
Finally, it's not about remix, the framework itself,

767
00:47:45,782 --> 00:47:49,056
which is a weird statement after talking for 35 minutes

768
00:47:49,238 --> 00:47:53,004
about a framework, but it's more the thought behind remix.

769
00:47:53,052 --> 00:47:56,850
Right. It's basically pushing to use

770
00:47:57,380 --> 00:48:00,884
the web was a platform more and that's going to benefit you because

771
00:48:00,922 --> 00:48:04,624
if you pick up a framework like remix and another framework also relies

772
00:48:04,672 --> 00:48:08,224
heavily on web fundamentals, you can really leverage

773
00:48:08,352 --> 00:48:11,592
all your experience and your mental model of how you build it,

774
00:48:11,726 --> 00:48:15,720
but then just learn what is slightly different in the API of that

775
00:48:15,870 --> 00:48:19,124
new framework. So yeah, I'm really excited

776
00:48:19,172 --> 00:48:21,290
to see that we finally are going to,

777
00:48:22,380 --> 00:48:25,672
I feel like a web developer again, basically instead of a JavaScript

778
00:48:25,736 --> 00:48:29,452
engineer, and to really embrace that beautiful platform that

779
00:48:29,506 --> 00:48:32,030
we all know and love and want to build for.

780
00:48:33,520 --> 00:48:37,024
And with that I wanted to say thank you. I hope

781
00:48:37,062 --> 00:48:40,412
I inspired you to try remix

782
00:48:40,476 --> 00:48:44,012
out or think about progressive enhancement or web fundamentals

783
00:48:44,076 --> 00:48:47,892
in general in your application and see where you can

784
00:48:47,946 --> 00:48:51,524
actually apply some of these techniques or really rethink the

785
00:48:51,562 --> 00:48:55,460
way that you build your applications. These are my

786
00:48:55,530 --> 00:48:59,284
socials, so please don't hesitate to reach

787
00:48:59,322 --> 00:49:02,356
out to me. And if you have any questions,

788
00:49:02,538 --> 00:49:06,132
please send me a message and

789
00:49:06,266 --> 00:49:09,396
I will respond right away. And with that, I wanted to say thank

790
00:49:09,418 --> 00:49:11,548
you for your time, and I'll see you next time.

