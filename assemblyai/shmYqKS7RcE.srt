1
00:00:25,170 --> 00:00:29,202
My name is Michael Wehar, and I'm going to tell you about using Python

2
00:00:29,266 --> 00:00:32,120
to build applications for language learning.

3
00:00:33,210 --> 00:00:37,014
So let's jump right in. So I developed this

4
00:00:37,052 --> 00:00:40,310
multiplatform tool called word of the hour,

5
00:00:40,460 --> 00:00:44,470
or wath for short, and it helps you to learn words

6
00:00:44,540 --> 00:00:48,662
in multiple languages. Every hour a vocabulary word

7
00:00:48,716 --> 00:00:52,650
is posted, along with english definitions and translations

8
00:00:52,730 --> 00:00:56,586
into over a dozen languages. Our main goal

9
00:00:56,618 --> 00:01:00,206
with this multiplatform tool is basically

10
00:01:00,388 --> 00:01:04,226
language learning is tough, and we want to provide

11
00:01:04,408 --> 00:01:07,822
some simple content that you can digest on regular

12
00:01:07,886 --> 00:01:11,346
time intervals that will help support you

13
00:01:11,448 --> 00:01:14,210
and motivate you as a language learner.

14
00:01:16,490 --> 00:01:20,018
So as I said, it's supported on many different platforms,

15
00:01:20,194 --> 00:01:23,650
and we currently support web, Android, iOS,

16
00:01:23,810 --> 00:01:27,026
Slack, Roku, Fire, TV, Electron,

17
00:01:27,138 --> 00:01:30,906
and many more platforms. You can see some screenshots of

18
00:01:30,928 --> 00:01:34,566
what wath looks like on these different platforms,

19
00:01:34,678 --> 00:01:38,346
and Roku is one of our most popular platforms where there's an

20
00:01:38,368 --> 00:01:40,090
active screen saver.

21
00:01:42,770 --> 00:01:46,350
So how do we use Python? Python isn't the only

22
00:01:46,420 --> 00:01:50,494
language we use, but it is a very important language to

23
00:01:50,532 --> 00:01:53,934
us. So there's three core areas where we use

24
00:01:53,972 --> 00:01:57,586
Python. The first is word selection. So we

25
00:01:57,608 --> 00:02:01,774
need to select what words are we using to post. So we actually analyze

26
00:02:01,822 --> 00:02:05,206
a data set of over 200,000 words, and we

27
00:02:05,228 --> 00:02:09,318
run various statistical analyses to select

28
00:02:09,404 --> 00:02:12,150
which words should be featured by wath.

29
00:02:12,890 --> 00:02:16,790
So the next area where Python is really important

30
00:02:16,860 --> 00:02:20,570
to us is crowdsourcing. We actually have

31
00:02:20,640 --> 00:02:24,154
this whole system set up where users can

32
00:02:24,192 --> 00:02:27,482
enter crowdsourcing data into Google

33
00:02:27,536 --> 00:02:31,342
sheets, and we'll scrape from those Google sheets and

34
00:02:31,396 --> 00:02:34,766
combine all the data together, and that'll help

35
00:02:34,788 --> 00:02:38,142
us to provide better content in the future. So we've actually

36
00:02:38,196 --> 00:02:41,790
crowdsourced over 35,000 translations.

37
00:02:42,950 --> 00:02:46,366
And the next area is social media posts.

38
00:02:46,558 --> 00:02:50,526
So posting this language content regularly to relevant

39
00:02:50,638 --> 00:02:55,814
social media platforms is an important part of

40
00:02:55,852 --> 00:02:59,830
this tool. So those are the three

41
00:02:59,900 --> 00:03:03,462
areas where Python is really important to us.

42
00:03:03,516 --> 00:03:07,000
And I want to go into a little bit more detail about that.

43
00:03:08,590 --> 00:03:11,802
So with word selection, we start with

44
00:03:11,856 --> 00:03:15,414
over 200,000 words, and we have to generate,

45
00:03:15,542 --> 00:03:19,162
generate these relevant features about those words.

46
00:03:19,296 --> 00:03:23,674
And then we have to do ranking and filtering. We have various processes

47
00:03:23,722 --> 00:03:27,086
for doing that. And some of these features we

48
00:03:27,108 --> 00:03:30,590
generate are based on the frequency dependency between

49
00:03:30,660 --> 00:03:35,026
words, and also context of where that word appears in

50
00:03:35,048 --> 00:03:38,866
different situations. So in order to do

51
00:03:38,888 --> 00:03:42,718
this word selection in Python, we have to do some file IO.

52
00:03:42,814 --> 00:03:46,294
We have to actually read in these data files that contain a lot of

53
00:03:46,332 --> 00:03:50,658
text and language data. We have to build up these dictionaries

54
00:03:50,754 --> 00:03:54,534
where we basically map words to information

55
00:03:54,652 --> 00:03:59,654
about them, and then we have to do various sorting

56
00:03:59,782 --> 00:04:03,782
procedures to basically rank

57
00:04:03,846 --> 00:04:07,274
or filter the words. And we also

58
00:04:07,312 --> 00:04:11,534
use regex. And regex allows us to

59
00:04:11,732 --> 00:04:15,630
basically parse or detect certain patterns

60
00:04:16,450 --> 00:04:19,920
within the data associated with the words.

61
00:04:20,930 --> 00:04:24,980
Okay. And in Python, all of these things are readily available.

62
00:04:26,870 --> 00:04:30,126
So for crowdsourcing, again, we need to do some file

63
00:04:30,158 --> 00:04:34,130
I o. But let's talk a little bit about the crowdsourcing.

64
00:04:34,890 --> 00:04:39,458
So we actually do crowdsourcing for 40 different languages.

65
00:04:39,634 --> 00:04:43,986
And as I said before, we've received over 35,000 crowdsourced

66
00:04:44,098 --> 00:04:47,506
translation submissions from users. And many

67
00:04:47,548 --> 00:04:51,318
of these 35,000 submissions have been edited,

68
00:04:51,414 --> 00:04:54,006
modified, and keep being updated.

69
00:04:54,118 --> 00:04:56,982
So if you include all those updates and edits,

70
00:04:57,046 --> 00:04:59,740
it's many more than 35,000.

71
00:05:01,490 --> 00:05:05,226
And there are two languages where we've

72
00:05:05,258 --> 00:05:08,910
had a really enthusiastic group of users

73
00:05:09,250 --> 00:05:12,966
supporting the crowdsourcing, and that's Portuguese and. Cornish.

74
00:05:13,098 --> 00:05:16,814
But we've had many other languages with users

75
00:05:16,862 --> 00:05:21,054
who are really enthusiastic as well, but didn't quite submit

76
00:05:21,102 --> 00:05:24,386
as much as was submitted for Portuguese and.

77
00:05:24,408 --> 00:05:27,922
Cornish so, again, we use

78
00:05:27,976 --> 00:05:32,194
file IO, where basically we're

79
00:05:32,242 --> 00:05:36,150
reading in all kinds of past data submissions

80
00:05:36,970 --> 00:05:41,530
that act as a sort of basis for some of our translations.

81
00:05:42,110 --> 00:05:45,782
Then we make requests to our Google sheets and various

82
00:05:45,846 --> 00:05:49,930
sources where the crowdsourcing data has been submitted.

83
00:05:51,010 --> 00:05:54,638
And then we actually do some filtering to kind

84
00:05:54,644 --> 00:05:58,446
of verify that the crowdsourced data meets some

85
00:05:58,468 --> 00:06:01,774
basic quality standards. And then we actually

86
00:06:01,812 --> 00:06:04,898
use git to record what changes

87
00:06:04,984 --> 00:06:09,106
have been made and to have a sort of checkpoint we can come back to

88
00:06:09,288 --> 00:06:12,706
to see how the data changed at that point

89
00:06:12,728 --> 00:06:13,540
in time.

90
00:06:15,930 --> 00:06:19,622
All right, so for the social media posts, we post to about

91
00:06:19,676 --> 00:06:23,718
30 different social media pages every hour across

92
00:06:23,804 --> 00:06:27,750
various different social media platforms. And for

93
00:06:27,820 --> 00:06:31,770
just about all of these platforms, we use some kind of API

94
00:06:32,510 --> 00:06:35,660
that allows us to interact with the social media platform.

95
00:06:36,270 --> 00:06:39,658
We also use the WAF API, which I'll talk about in a

96
00:06:39,664 --> 00:06:43,706
bit. Or we use some direct endpoints associated with WAF

97
00:06:43,818 --> 00:06:47,920
to get the current word and the data associated with the current word.

98
00:06:49,010 --> 00:06:52,654
So, actually, right now, we're not

99
00:06:52,692 --> 00:06:56,270
actively using many Python

100
00:06:57,590 --> 00:07:00,850
based APIs to post to social media,

101
00:07:00,920 --> 00:07:04,194
but we have used some in the past. We did have one

102
00:07:04,232 --> 00:07:07,542
platform where we'd actually post images using

103
00:07:07,596 --> 00:07:11,414
Python on an hourly or every

104
00:07:11,452 --> 00:07:14,902
few hour basis. And we also on

105
00:07:14,956 --> 00:07:18,490
Discord, we use a python bot

106
00:07:19,390 --> 00:07:23,210
that we actually post content hourly

107
00:07:23,710 --> 00:07:30,134
with. But some of our other postings

108
00:07:30,182 --> 00:07:33,806
to social media don't actually happen in Python, but they

109
00:07:33,828 --> 00:07:38,046
could. So how would we do this

110
00:07:38,228 --> 00:07:41,342
if there was a new social media page you wanted to post

111
00:07:41,396 --> 00:07:44,820
content to? Well, first,

112
00:07:45,350 --> 00:07:49,342
in the past we've used input arguments to kind of customize

113
00:07:49,486 --> 00:07:52,834
how the post will occur or where the post should be

114
00:07:52,872 --> 00:07:56,134
made. In Python. That's really easy for us to

115
00:07:56,172 --> 00:08:00,918
use input arguments. Also, we need to do some simple

116
00:08:01,004 --> 00:08:04,840
text operations to format our post.

117
00:08:05,450 --> 00:08:09,190
And various social media platforms have restrictions

118
00:08:09,270 --> 00:08:12,986
on what kinds of characters and what

119
00:08:13,008 --> 00:08:16,570
kinds of patterns are allowed to be contained in your posts.

120
00:08:17,310 --> 00:08:21,162
And then we use a social media API

121
00:08:21,226 --> 00:08:24,830
which will allow us to actually submit the post

122
00:08:24,900 --> 00:08:28,126
to that platform and I'll show you in a bit. But we have

123
00:08:28,148 --> 00:08:31,950
the wash API in Python and

124
00:08:32,020 --> 00:08:35,840
we can use that to easily get the current word in its data.

125
00:08:38,290 --> 00:08:41,534
So let me tell you about the wash API. This is what I'm really excited

126
00:08:41,582 --> 00:08:44,610
about to present here at this conference.

127
00:08:45,210 --> 00:08:49,234
The Wath API enables Python developers to include

128
00:08:49,282 --> 00:08:52,966
the current word of the hour along with its english definitions and

129
00:08:53,068 --> 00:08:56,150
translations within their APIs.

130
00:08:56,490 --> 00:09:00,502
You can clone our repo and import the wath API,

131
00:09:00,646 --> 00:09:04,442
and then you can simply just call fetch, and fetch will return

132
00:09:04,496 --> 00:09:07,782
you a dictionary object where there are keys,

133
00:09:07,846 --> 00:09:11,310
word definitions and translations to really simply

134
00:09:11,730 --> 00:09:14,240
get the current data.

135
00:09:15,090 --> 00:09:18,734
So I'm going to show a demo to you, and I hope that you may

136
00:09:18,772 --> 00:09:22,654
follow along and try out this demo yourself so

137
00:09:22,692 --> 00:09:25,698
that maybe you can incorporate word of the hour into some of

138
00:09:25,704 --> 00:09:28,754
your apps. So here

139
00:09:28,792 --> 00:09:32,098
is our public git repo on GitHub.com

140
00:09:32,264 --> 00:09:35,926
and you can take a look at this and whenever you're ready you

141
00:09:35,948 --> 00:09:39,606
can clone this repo. So I

142
00:09:39,628 --> 00:09:44,226
cloned the repo and I opened up the test py file.

143
00:09:44,418 --> 00:09:47,720
That's the code you see on the right here.

144
00:09:48,110 --> 00:09:52,138
And within this test py file you'll see that I first

145
00:09:52,224 --> 00:09:56,154
import wath API and

146
00:09:56,192 --> 00:09:59,786
then I call fetch. And then I

147
00:09:59,808 --> 00:10:03,470
have four tests here. The first

148
00:10:03,540 --> 00:10:07,278
test is to get the current word. The second test

149
00:10:07,364 --> 00:10:11,870
is to check if there's a translation into German.

150
00:10:12,390 --> 00:10:16,850
And the third test is to get all of those translations.

151
00:10:18,070 --> 00:10:22,050
And then the fourth test is to get the definitions.

152
00:10:22,710 --> 00:10:25,380
So let's run the code and see what happens.

153
00:10:28,480 --> 00:10:32,156
Okay, you can see that it actually returned that

154
00:10:32,178 --> 00:10:36,200
the current word is grant. We don't have a german translation,

155
00:10:36,280 --> 00:10:40,300
unfortunately for this word. So hopefully crowdsourcing

156
00:10:40,380 --> 00:10:44,320
might help us to fill in that german translation.

157
00:10:44,740 --> 00:10:48,640
But you can see we have translations into many other languages

158
00:10:48,980 --> 00:10:51,990
and we have some definitions below as well.

159
00:10:52,840 --> 00:10:56,532
So using the Wath API is as simple as that.

160
00:10:56,666 --> 00:11:00,404
You just have to call fetch and then look up the

161
00:11:00,442 --> 00:11:03,572
data points that you want and

162
00:11:03,626 --> 00:11:07,144
you could incorporate this into your web apps or any

163
00:11:07,182 --> 00:11:10,120
type of application you have that's python based,

164
00:11:10,270 --> 00:11:13,930
and you'd be able to share the word of the hour.

165
00:11:14,380 --> 00:11:17,788
Whether you're sharing it just to show what's the word of the hour,

166
00:11:17,874 --> 00:11:21,310
or you have some other kind of language tool,

167
00:11:21,760 --> 00:11:25,740
it can be a great supplement that can help learners.

168
00:11:26,240 --> 00:11:29,070
So I encourage you to try this out for yourself,

169
00:11:29,440 --> 00:11:33,052
and I really appreciate you taking the time to listen to this

170
00:11:33,106 --> 00:11:36,508
talk. Thank you so much, and I hope you

171
00:11:36,514 --> 00:11:39,384
have a great 42 conference.

172
00:11:39,512 --> 00:11:41,168
Okay, bye.

