1
00:00:24,010 --> 00:00:28,006
Everyone, thanks for genius. My name is UTube and

2
00:00:28,028 --> 00:00:31,970
I'll be talking on Githubs in Kubernetes with Algo CD.

3
00:00:32,130 --> 00:00:35,046
So without further ado, let's get into it.

4
00:00:35,228 --> 00:00:38,754
So what is GitHubs? Well, GitHubs is a continuous

5
00:00:38,802 --> 00:00:42,134
delivery strategy. These, our infrastructure and application

6
00:00:42,252 --> 00:00:45,654
configuration are defined as code and

7
00:00:45,692 --> 00:00:49,030
stored in a vision control system like Git. So basically

8
00:00:49,100 --> 00:00:52,218
it uses it as a single source of truth.

9
00:00:52,394 --> 00:00:56,014
And what this means is that whatever is

10
00:00:56,052 --> 00:00:59,738
defined in the Git repository is exactly what is deployed

11
00:00:59,834 --> 00:01:03,870
in these cloud environment. So GitHub allows us to automate

12
00:01:03,950 --> 00:01:07,394
cloud infrastructure using infrastructure as

13
00:01:07,432 --> 00:01:11,150
code and software development best practices

14
00:01:11,310 --> 00:01:15,090
such as git code review and CI CD.

15
00:01:15,670 --> 00:01:18,930
There are a few advantages of well, there are a lot of advantages

16
00:01:19,010 --> 00:01:22,278
of using GitHubs, but we will just outline a few.

17
00:01:22,444 --> 00:01:25,922
First off, it allows us to have faster and safer

18
00:01:25,986 --> 00:01:29,462
deployments, it gives us ease

19
00:01:29,526 --> 00:01:33,206
of performing rollbacks, it allows for traceability

20
00:01:33,398 --> 00:01:36,934
and it makes it easy to eliminate configuration drifts.

21
00:01:37,062 --> 00:01:40,394
There are a lot of Gitops tools out these, but for the purpose

22
00:01:40,442 --> 00:01:43,498
of these talk we will only be focusing

23
00:01:43,514 --> 00:01:47,466
on Algo CD. So Algo CD is a declarative

24
00:01:47,578 --> 00:01:51,306
GitHub's continuous derivative tool for kubernetes.

25
00:01:51,498 --> 00:01:54,866
It is open source and basically

26
00:01:55,048 --> 00:01:59,294
it uses GitHub's principles to deploy applications

27
00:01:59,422 --> 00:02:03,074
into kubernetes clusters. Before we

28
00:02:03,272 --> 00:02:06,920
take a look at exactly how Algo CD works,

29
00:02:07,290 --> 00:02:11,110
let's take a moment to talk about push versus pull deployments.

30
00:02:11,610 --> 00:02:15,318
So in a push deployment strategy, basically you

31
00:02:15,324 --> 00:02:18,762
would have a CI CD pipeline that builds your application and

32
00:02:18,816 --> 00:02:22,278
then updates your Kubernetes cluster

33
00:02:22,374 --> 00:02:25,706
or redeploys or deploys the application into the

34
00:02:25,728 --> 00:02:29,842
cluster. For example, you would have a Jenkins server

35
00:02:30,006 --> 00:02:33,726
as your CI CD build tool. And then

36
00:02:33,908 --> 00:02:37,566
whenever Jenkins builds your application, you need

37
00:02:37,588 --> 00:02:41,166
to give Jenkins access to the cluster in order for you to

38
00:02:41,188 --> 00:02:44,466
perform some Kubectl commands in order to

39
00:02:44,488 --> 00:02:48,302
update your application. But this isn't entirely

40
00:02:48,366 --> 00:02:52,286
safe because let's say your Jenkins server gets hacked,

41
00:02:52,478 --> 00:02:56,054
the hacker would have access to your cluster. So in order

42
00:02:56,092 --> 00:02:59,394
to solve this, that's where the pool deployment

43
00:02:59,442 --> 00:03:03,926
strategy comes in. So basically you would have a

44
00:03:03,948 --> 00:03:07,974
software deployed in your cluster which will pull the git repository

45
00:03:08,022 --> 00:03:13,066
for changes, and if there's a change it

46
00:03:13,088 --> 00:03:16,906
will redeploy the application. So how does ArgoCD works?

47
00:03:17,088 --> 00:03:20,826
ArgoCD is implemented as a Kubernetes controller

48
00:03:20,938 --> 00:03:24,394
and it continuously monitors the applications

49
00:03:24,442 --> 00:03:28,250
running in your cluster and compares it to what is defined in git

50
00:03:28,330 --> 00:03:31,806
repository. So basically it watches a

51
00:03:31,828 --> 00:03:35,474
particular repository for changes, let's say you update the

52
00:03:35,512 --> 00:03:39,150
version of a particular docker deployment

53
00:03:39,230 --> 00:03:42,546
image, so Algo CD will detect that change and

54
00:03:42,648 --> 00:03:46,574
implement the change in the cluster without

55
00:03:46,632 --> 00:03:50,214
you having to do that manually. So any modifications made to the

56
00:03:50,252 --> 00:03:54,326
desired target states in a Gitin repo can be automatically applied and

57
00:03:54,348 --> 00:03:58,146
reflected in these specified target environment.

58
00:03:58,338 --> 00:04:01,962
Let's take a look at some of the features of ArgoCd. So first

59
00:04:02,016 --> 00:04:05,994
off, we have support for multiple config and

60
00:04:06,032 --> 00:04:09,498
templating tools such as customize helm jsonnets and

61
00:04:09,504 --> 00:04:14,014
plain Yaml. So however your application configuration is

62
00:04:14,052 --> 00:04:17,322
defined, be it a helm chart or plain communities,

63
00:04:17,386 --> 00:04:21,920
Yamu manifests, Ago CD is able to generate the correct

64
00:04:22,450 --> 00:04:26,302
manifest from that and deploy that into a cluster.

65
00:04:26,446 --> 00:04:30,558
So with ArgoCd we are able to manage and deploy to multiple clusters.

66
00:04:30,734 --> 00:04:34,606
So you would only need to deploy ArgoCD into a single cluster,

67
00:04:34,718 --> 00:04:38,434
and ago CD handles the deployment into any

68
00:04:38,472 --> 00:04:42,210
other cluster you specify. We also have SSO

69
00:04:42,290 --> 00:04:46,274
integration with GitHub, GitLab, Microsoft, LinkedIn,

70
00:04:46,322 --> 00:04:49,754
et cetera. So by default, ArgoCD comes

71
00:04:49,792 --> 00:04:53,014
with basic authentication using username and password,

72
00:04:53,142 --> 00:04:56,346
but you have the ability to activate single sign on as

73
00:04:56,368 --> 00:05:00,102
well. So in keeping to Gitops practices,

74
00:05:00,246 --> 00:05:04,094
Ago CD allows us to roll back or roll anywhere to any

75
00:05:04,132 --> 00:05:08,046
application configuration committed in Git repository. So basically

76
00:05:08,148 --> 00:05:11,920
you would have the ability to roll back to previous states,

77
00:05:12,630 --> 00:05:16,098
let's say maybe previous commits, that defines a

78
00:05:16,104 --> 00:05:19,620
particular state of your applications. So ago city

79
00:05:20,470 --> 00:05:24,622
comes with a web interface that allows us to visualize the health status

80
00:05:24,686 --> 00:05:28,486
of the resources deployed in your cluster. So let's actually take

81
00:05:28,508 --> 00:05:31,718
a look at what this web interface looks like.

82
00:05:31,884 --> 00:05:35,814
So here we have the ArgocD web UI, and you can see I have

83
00:05:35,852 --> 00:05:39,494
three applications deployed, the CLI app, the declarative app,

84
00:05:39,532 --> 00:05:43,354
and these helm demo. So ago CD detects that one of these

85
00:05:43,392 --> 00:05:46,858
applications is out of sync, which means that what is deployed in the

86
00:05:46,864 --> 00:05:50,998
cluster doesn't match what is specified in the git

87
00:05:51,094 --> 00:05:54,698
repository. And it gives me the option to sync this manually.

88
00:05:54,874 --> 00:05:58,910
But I can also configure ago CD to do this automatically,

89
00:05:59,250 --> 00:06:03,262
and it detects that the declarative app and the helm demo are all

90
00:06:03,396 --> 00:06:06,670
healthy. So here in the ago city web UI

91
00:06:06,750 --> 00:06:10,242
I can do pretty much anything. I can create

92
00:06:10,296 --> 00:06:13,630
new applications, new deployments, I can roll back the deployment,

93
00:06:13,790 --> 00:06:17,038
I can sync application, et cetera.

94
00:06:17,214 --> 00:06:20,790
So ago city also comes with a command line tool,

95
00:06:20,940 --> 00:06:25,062
the Ago CD CLI. And using this we can also create

96
00:06:25,196 --> 00:06:28,598
applications. We can roll back a particular deployment

97
00:06:28,694 --> 00:06:31,340
we can sync after as well. Yeah,

98
00:06:32,190 --> 00:06:35,962
okay, so ago CD also gives us.

99
00:06:36,016 --> 00:06:39,606
Automate enables us to detect configuration drifts

100
00:06:39,638 --> 00:06:43,466
like we said before. So if a particular state

101
00:06:43,648 --> 00:06:47,726
of deprecations deployed in these cluster doesn't match

102
00:06:47,908 --> 00:06:51,934
what's in the Giz repository, ArgoCD detects us as

103
00:06:51,972 --> 00:06:54,906
well. So ago CD.

104
00:06:55,018 --> 00:06:58,746
We also have webhook integration with GitHub basebuckets

105
00:06:58,778 --> 00:07:02,810
and GitLab. And Ago CD allows us to override

106
00:07:02,970 --> 00:07:06,582
certain parameters. Let's say you deployed a helm charts with

107
00:07:06,636 --> 00:07:10,710
algo CD. You would be able to override

108
00:07:11,610 --> 00:07:14,310
these helm values using Algo CD.

109
00:07:15,050 --> 00:07:18,726
Yeah, so that's been my talk. Thanks for listening and

110
00:07:18,748 --> 00:07:19,540
I hope you learned a lot.

