1
00:00:40,930 --> 00:00:44,466
Hi folks, this is me. I'm Matt Jarvis. I'm a senior developer

2
00:00:44,498 --> 00:00:47,554
advocate at Sneak and sneak are a cloud native

3
00:00:47,682 --> 00:00:51,326
application security company. So the story of the

4
00:00:51,348 --> 00:00:54,654
last decade or so in software developed has really seen

5
00:00:54,692 --> 00:00:58,298
the boundaries of what's an application, what is operations,

6
00:00:58,474 --> 00:01:01,914
what constitutes infrastructure? Becoming increasingly

7
00:01:01,962 --> 00:01:05,246
blurred. The old view of the world was that the application was

8
00:01:05,268 --> 00:01:08,674
the only piece under the responsibility of the development team, and all these

9
00:01:08,712 --> 00:01:12,162
other elements of the stack sat under it. Operations with security

10
00:01:12,296 --> 00:01:15,618
usually a step right at the end of the deployed process. But the

11
00:01:15,624 --> 00:01:19,062
world we live in today is one where infrastructure and workloads are almost

12
00:01:19,116 --> 00:01:21,974
completely tied together. Everything's declared as code,

13
00:01:22,092 --> 00:01:25,398
everything's a software development practice, and there's really no difference

14
00:01:25,484 --> 00:01:28,598
between our workload and the computing infrastructure that

15
00:01:28,604 --> 00:01:31,926
goes along with it. And by infrastructure, I don't just mean the underlying

16
00:01:31,958 --> 00:01:35,798
compute technology, but also the configuration and the operational

17
00:01:35,894 --> 00:01:39,386
policies that control those capabilities. And as a community

18
00:01:39,488 --> 00:01:43,458
of practitioners, we've discussed in lots of detail this blurring

19
00:01:43,494 --> 00:01:47,114
and eventual consuming of the boundary between development and operations.

20
00:01:47,242 --> 00:01:50,846
But in lots of cases, we haven't really considered how that impacts on

21
00:01:50,868 --> 00:01:55,034
how we model and how we practice security. In lots of organizations,

22
00:01:55,162 --> 00:01:59,246
security is still considered to be somewhat of an external practice

23
00:01:59,278 --> 00:02:02,446
that exists only when our applications are deployed and operational.

24
00:02:02,558 --> 00:02:06,162
But this is pretty much unworkable in the era of continuous integration,

25
00:02:06,226 --> 00:02:09,714
continuous delivery. As we've seen, development driven

26
00:02:09,762 --> 00:02:13,094
teams now have responsibilities for most of that

27
00:02:13,132 --> 00:02:17,282
deployment stack, and so this gives those teams a much greater responsibility

28
00:02:17,426 --> 00:02:21,002
for ensuring that these things are secure. By the time our code

29
00:02:21,056 --> 00:02:24,726
and our infrastructure is deployed to production, it's really far too late

30
00:02:24,758 --> 00:02:28,586
to deal with the implications of security issues, and we can't slow down that

31
00:02:28,608 --> 00:02:32,174
velocity to introduce security gates in the way that things

32
00:02:32,212 --> 00:02:35,374
used to work, because velocity and time to

33
00:02:35,412 --> 00:02:38,858
market is clearly the differentiator for businesses to succeed.

34
00:02:38,954 --> 00:02:42,362
So that presents us with a set of unique challenges

35
00:02:42,426 --> 00:02:46,878
around security. How do we make sure our applications and our infrastructure are secure

36
00:02:46,974 --> 00:02:50,846
when our working practices are evolving into these super fast delivery

37
00:02:50,878 --> 00:02:54,974
pipelines? Security still matters. And as we've seen repeatedly

38
00:02:55,022 --> 00:02:59,074
over the last few years, security breaches can have a really big impact

39
00:02:59,122 --> 00:03:03,030
on businesses, both from a financial perspective in terms of bottom

40
00:03:03,100 --> 00:03:06,838
line and potential fines, but also on how trusted our customers

41
00:03:06,924 --> 00:03:10,342
see us as. And trust really one of the key metrics for

42
00:03:10,476 --> 00:03:14,394
successful businesses in the cloud era. So let's start by

43
00:03:14,432 --> 00:03:17,642
taking a look at the different classes of things we probably

44
00:03:17,696 --> 00:03:21,306
need to be looking at to ensure that we've got security considered

45
00:03:21,338 --> 00:03:24,426
within our workflows. Firstly, the applications that we're

46
00:03:24,458 --> 00:03:28,446
creating, our workloads and modern applications are usually composed of

47
00:03:28,468 --> 00:03:32,014
a relatively small core of homegrown code, along with

48
00:03:32,052 --> 00:03:36,078
a huge amount of third party, usually open source modules.

49
00:03:36,174 --> 00:03:39,630
And this is great news for application development, because the availability

50
00:03:39,710 --> 00:03:43,294
of modules and library code means we get to develop applications

51
00:03:43,342 --> 00:03:46,466
faster. We have to write less code, and we don't need to

52
00:03:46,488 --> 00:03:50,054
reinvent the wheel all the time by solving the same problems over and over

53
00:03:50,092 --> 00:03:53,442
again. And anyone who develops in Java, in python,

54
00:03:53,506 --> 00:03:57,366
in node, in go, is going to recognize this pattern. And in all

55
00:03:57,388 --> 00:04:01,062
of these ecosystems, the number of vulnerabilities is growing.

56
00:04:01,126 --> 00:04:04,854
And this isn't necessarily because code's getting more insecure,

57
00:04:04,982 --> 00:04:08,774
it can be just because there's more code being written, more libraries,

58
00:04:08,822 --> 00:04:11,982
more modules being written. Maybe we're getting better at working

59
00:04:12,036 --> 00:04:15,262
out what's vulnerable. But in the end, this all means more

60
00:04:15,316 --> 00:04:19,498
opportunities for these vulnerabilities to be exploited.

61
00:04:19,594 --> 00:04:22,958
And when we import something into our code base, it can have a

62
00:04:22,964 --> 00:04:26,862
very large dependency tree, both in terms of direct dependencies

63
00:04:26,926 --> 00:04:30,286
that are the dependencies of the thing that we're importing,

64
00:04:30,318 --> 00:04:33,634
but also indirect dependencies. So dependencies of

65
00:04:33,672 --> 00:04:36,802
dependencies. And so we potentially bring in a huge

66
00:04:36,856 --> 00:04:40,902
amount of other code that we might not even be aware of. And typically over

67
00:04:40,956 --> 00:04:44,802
70% of all security vulnerabilities are found in these indirect

68
00:04:44,866 --> 00:04:48,806
dependencies. So these are the ones that we have much less control over,

69
00:04:48,988 --> 00:04:52,090
and we might not be aware of them at all.

70
00:04:52,160 --> 00:04:55,818
So as an example of that, here's an exploit from the node community.

71
00:04:55,904 --> 00:04:58,138
It was introduced into NPM in 2018,

72
00:04:58,144 --> 00:05:01,674
and this is supposedly a library to parse HTTP

73
00:05:01,722 --> 00:05:05,578
headers, but it's actually a remote code execution exploit.

74
00:05:05,674 --> 00:05:09,850
It's about 40 lines of code to process remote javascript

75
00:05:09,930 --> 00:05:13,626
executed on the server via using specially crafted commands

76
00:05:13,658 --> 00:05:17,998
in the HTTP request. And this was hidden behind a tree of other dependencies,

77
00:05:18,094 --> 00:05:21,246
and it eventually ended up, the direct dependency ended

78
00:05:21,278 --> 00:05:24,802
up being used in mail parser, which has a huge amount of downloads every month.

79
00:05:24,856 --> 00:05:28,130
So it's pretty easy to see how in large developer communities

80
00:05:28,210 --> 00:05:31,414
these kinds of indirect dependencies can be used

81
00:05:31,452 --> 00:05:35,122
to hide exploitable code. So vulnerabilities

82
00:05:35,186 --> 00:05:38,694
in those third party dependencies are super important because they make up

83
00:05:38,732 --> 00:05:42,054
such a large part of our code bases these days. But as I said earlier,

84
00:05:42,102 --> 00:05:45,606
the lines between our application and the container it runs

85
00:05:45,638 --> 00:05:49,814
in are becoming really blurred. The container is the delivery mechanism

86
00:05:49,862 --> 00:05:53,534
for the application. They're typically developed at the same time, usually even

87
00:05:53,572 --> 00:05:57,646
by the same team. So for all intents and purposes, we can consider them the

88
00:05:57,668 --> 00:06:01,578
same thing. The application never exists without that container image.

89
00:06:01,674 --> 00:06:05,766
And like the availability of library code, the huge growth in public container

90
00:06:05,818 --> 00:06:09,726
registries has been great for the ability to run prepackaged

91
00:06:09,758 --> 00:06:13,502
software super easily and for us to consume that in our own infrastructure.

92
00:06:13,566 --> 00:06:16,918
But they are also a big source of vulnerabilities. And when we look at the

93
00:06:16,924 --> 00:06:20,546
container landscape, although best practices are emerging

94
00:06:20,578 --> 00:06:23,846
around things like building minimal containers, there is still a

95
00:06:23,868 --> 00:06:27,698
huge amount of people using containers directly from the upstream repositories.

96
00:06:27,794 --> 00:06:31,546
And lots of these can have very large numbers of vulnerabilities in

97
00:06:31,568 --> 00:06:35,590
them. And we're presented with lots of possibilities for attack vectors.

98
00:06:35,670 --> 00:06:39,190
So it's important that our developers working with container images

99
00:06:39,350 --> 00:06:43,242
understand the scope for introducing vulnerabilities

100
00:06:43,306 --> 00:06:47,134
here. And there's also a long tail taking the path of least resistance by

101
00:06:47,172 --> 00:06:50,382
giving applications containers based on full

102
00:06:50,436 --> 00:06:54,382
operating systems, for example. And when we look at operating systems in general,

103
00:06:54,516 --> 00:06:58,094
the amount of vulnerabilities in base operating systems is really

104
00:06:58,132 --> 00:07:01,698
massively growing. And that's partly because operating systems by design

105
00:07:01,784 --> 00:07:05,182
ship with a lot of software in them. And if we look at operating

106
00:07:05,246 --> 00:07:08,894
systems like that, we can see that they kind of break

107
00:07:08,952 --> 00:07:12,662
the paradigms of containers in the sense that what we want to be doing is

108
00:07:12,716 --> 00:07:16,626
producing an absolutely minimal package for our application. But there's

109
00:07:16,658 --> 00:07:20,342
still a lot of people using these kind of bigger images for

110
00:07:20,396 --> 00:07:23,834
workload deployments. And we can also see that a lot of people don't think

111
00:07:23,872 --> 00:07:27,190
about emerging vulnerabilities once their workloads are in production.

112
00:07:27,270 --> 00:07:30,982
So an image that when it was first deployed, didn't have vulnerabilities

113
00:07:31,046 --> 00:07:34,846
in it, there may be new vulnerabilities that have been discovered since the

114
00:07:34,868 --> 00:07:38,014
image was built. And if you're not looking at containers you already have

115
00:07:38,052 --> 00:07:41,690
in production, then you're never going to find out if they're now vulnerable.

116
00:07:41,770 --> 00:07:45,138
And fixing these things isn't usually very hard.

117
00:07:45,304 --> 00:07:49,966
Over 40% of docker image vulnerabilities can usually be fixed by upgrading

118
00:07:49,998 --> 00:07:53,554
the base image, and around 20% of them can be fixed just by

119
00:07:53,592 --> 00:07:57,438
rebuilding them. A lot of containers will have upgrade steps

120
00:07:57,614 --> 00:08:01,430
in the Docker file, and they'll get run during the build process.

121
00:08:01,580 --> 00:08:05,010
And as we've moved wholesale into cloud and now into kubernetes,

122
00:08:05,090 --> 00:08:08,166
configuration is almost entirely in code, and it's part of our

123
00:08:08,188 --> 00:08:11,350
development workloads. And by configuration we can include

124
00:08:11,430 --> 00:08:15,110
all of our kubernetes, Yaml, our helm charts, our automation,

125
00:08:15,190 --> 00:08:18,550
our terraform, and all of the policies and configuration

126
00:08:18,630 --> 00:08:21,882
that goes alongside that. And this is a massively growing field,

127
00:08:21,936 --> 00:08:24,638
as we can see from the amounts of this kind of code that are in

128
00:08:24,644 --> 00:08:28,046
GitHub now. We're really only just starting to view that as something that we

129
00:08:28,068 --> 00:08:31,886
need to consider from a security perspective. Systems like kubernetes are

130
00:08:31,908 --> 00:08:35,154
increasingly complex. And as we've moved the responsibilities for

131
00:08:35,192 --> 00:08:38,446
delivering that kind of code into our development teams,

132
00:08:38,558 --> 00:08:41,682
there's clearly space for misunderstandings about how things

133
00:08:41,736 --> 00:08:45,854
work. And this can be compounded with things like service meshes, which increase

134
00:08:45,902 --> 00:08:49,046
that complexity even further. And with this much code out

135
00:08:49,068 --> 00:08:52,914
there in public repositories, we can again see the potential risks

136
00:08:52,962 --> 00:08:56,966
of path of least resistance, where we might be using existing code as

137
00:08:57,068 --> 00:09:00,666
templates, when we might not fully understand how that

138
00:09:00,688 --> 00:09:04,074
thing works. And these are all very important in terms

139
00:09:04,112 --> 00:09:07,818
of the security of our environments. This quote from the

140
00:09:07,824 --> 00:09:11,698
open web application security project is a little bit old now, but it still proves

141
00:09:11,734 --> 00:09:15,706
the point that a huge amount of security breaches are coming from misconfigurations

142
00:09:15,818 --> 00:09:19,422
in infrastructure. And most really large exploits over

143
00:09:19,476 --> 00:09:23,310
recent years have been this combination of application level vulnerability

144
00:09:23,470 --> 00:09:26,674
combined with infrastructure configuration, which has then

145
00:09:26,712 --> 00:09:30,498
allowed the attacker to widen the blast radius and

146
00:09:30,584 --> 00:09:33,858
extend the exploit. And as I'm sure most of us

147
00:09:33,944 --> 00:09:37,174
have seen, there's many, many real world examples of this.

148
00:09:37,292 --> 00:09:40,502
Things like cloud credential leakages through

149
00:09:40,556 --> 00:09:43,954
source code repositories, or of Kubernetes clusters infested

150
00:09:44,002 --> 00:09:47,922
with crypto miners. And when we look at this space in terms of kubernetes,

151
00:09:47,986 --> 00:09:51,446
it's important to understand that kubernetes really doesn't give you any guardrails.

152
00:09:51,478 --> 00:09:54,490
It's insecure by default. And this is on purpose.

153
00:09:54,830 --> 00:09:58,186
It's meant to be highly configurable and users are expected to

154
00:09:58,208 --> 00:10:01,446
make these decisions by themselves. By default,

155
00:10:01,478 --> 00:10:05,134
there are no resource limits set. That means a pod can consume as much

156
00:10:05,172 --> 00:10:08,826
resource as the Kubelet will let it. And this has the potential for denial

157
00:10:08,858 --> 00:10:12,494
of service attacks, affecting a much bigger scope than just

158
00:10:12,532 --> 00:10:16,286
a single application. And kubernetes will also quite happily let containers

159
00:10:16,318 --> 00:10:19,902
run as root. And with a huge amount of containers in public registry

160
00:10:19,966 --> 00:10:23,362
still being configuration to run as root, this opens up really big

161
00:10:23,416 --> 00:10:26,866
security implications. A compromised pod running as root has the

162
00:10:26,888 --> 00:10:30,802
potential to escape the container. And so we really need to be limiting the potential

163
00:10:30,866 --> 00:10:34,790
for these kind of attacks. And very few applications actually need root access

164
00:10:34,860 --> 00:10:38,486
in order to run writable file systems. Inside containers is

165
00:10:38,508 --> 00:10:42,134
also a risk point. If that container is then exploited, it allows

166
00:10:42,182 --> 00:10:45,386
an attacker to download new software, make changes to

167
00:10:45,408 --> 00:10:49,030
configuration and generally be able to extend

168
00:10:49,110 --> 00:10:52,382
the access that they've got already. And containers also have access

169
00:10:52,436 --> 00:10:56,286
to the full range of capabilities configured by default in

170
00:10:56,308 --> 00:11:00,654
the container runtime and capabilities. Folks who aren't familiar with them are

171
00:11:00,852 --> 00:11:04,338
kernel level permissions. Many of these granular kind of

172
00:11:04,344 --> 00:11:08,034
permissions won't be required by your application, and having them

173
00:11:08,072 --> 00:11:11,506
turned on just creates additional vectors for attackers to

174
00:11:11,528 --> 00:11:14,622
use should that container be compromised.

175
00:11:14,766 --> 00:11:18,306
So where do we start with all of this in terms of models git driven

176
00:11:18,338 --> 00:11:21,846
workflows? Well, the emerging answer is that we have to shift our security

177
00:11:21,948 --> 00:11:26,194
practices far to the left and embed security into our development

178
00:11:26,242 --> 00:11:30,390
pipeline. So we share that burden of security responsibility across

179
00:11:30,460 --> 00:11:34,006
our development teams. And this is really where this concept of devsecops

180
00:11:34,038 --> 00:11:37,866
comes into play, that we need to integrate security considerations into our

181
00:11:37,888 --> 00:11:41,878
workflows in exactly the same way that we merged development and operations

182
00:11:41,974 --> 00:11:45,802
over the last few years. And where do we start in practice?

183
00:11:45,866 --> 00:11:49,406
Well, the obvious first place is at the developer. We need developers to

184
00:11:49,428 --> 00:11:53,226
have insights immediately into potential security issues tightly

185
00:11:53,258 --> 00:11:56,674
integrated into their workflow, so friction free.

186
00:11:56,792 --> 00:12:00,094
And that means tooling that's available from local command lines,

187
00:12:00,222 --> 00:12:03,954
integrations with ides. So we need to reduce the overhead for

188
00:12:03,992 --> 00:12:08,034
developers to use these kind of tools right at the point they're working before code

189
00:12:08,072 --> 00:12:11,366
even gets anywhere near our repositories. And the tooling we

190
00:12:11,388 --> 00:12:14,454
use has to provide developers with the right information to be able to make

191
00:12:14,492 --> 00:12:17,890
security decisions. Not just lists of cves,

192
00:12:18,050 --> 00:12:22,326
but tools that give us insights into how severe something is, how exploitable

193
00:12:22,358 --> 00:12:25,802
it is, and remediation advice, how do I fix

194
00:12:25,856 --> 00:12:29,546
it? Because that's what really do we care about is how do we go

195
00:12:29,568 --> 00:12:32,766
from the state we're in now to a better state. And as we

196
00:12:32,788 --> 00:12:36,542
saw earlier, we want to be able to look at all of

197
00:12:36,676 --> 00:12:40,174
those classes of things that we're interested in.

198
00:12:40,212 --> 00:12:44,046
So third party dependencies in our code, what's going

199
00:12:44,068 --> 00:12:47,474
on in our container images, and all of that infrastructure code

200
00:12:47,512 --> 00:12:51,234
that we're putting in at this point. And you can do all of this

201
00:12:51,432 --> 00:12:54,994
with sneak for free. So our second touch points

202
00:12:55,032 --> 00:12:58,694
is clearly git itself. Our git repository is now the

203
00:12:58,732 --> 00:13:02,610
single source of truth for everything. So that has to be secure.

204
00:13:02,770 --> 00:13:06,214
Git itself's been pretty secure over the years, and in most

205
00:13:06,252 --> 00:13:09,394
cases folks are using hosted git services like GitHub,

206
00:13:09,442 --> 00:13:13,210
like GitLab for this, which have been also pretty good at security.

207
00:13:13,360 --> 00:13:16,700
But there are definitely some process related things to consider.

208
00:13:17,150 --> 00:13:20,154
By its nature, git can open you up to certain things,

209
00:13:20,272 --> 00:13:23,770
and we need to make sure that our users are aware of where those potential

210
00:13:23,850 --> 00:13:27,406
problem points are. So we will need to be doing things like enforcing two

211
00:13:27,428 --> 00:13:30,974
factor authentication, making sure our users have strong key

212
00:13:31,012 --> 00:13:34,990
security practices and that they're keeping git updated locally.

213
00:13:35,150 --> 00:13:38,194
And exposing private data is always a risk here,

214
00:13:38,232 --> 00:13:42,366
particularly in commit histories or when we're working with repositories,

215
00:13:42,478 --> 00:13:46,226
moving them around. Configuration data really

216
00:13:46,328 --> 00:13:49,794
shouldn't be in git unencrypted, even in local repositories,

217
00:13:49,922 --> 00:13:53,654
for exactly that reason. So we need to help our

218
00:13:53,692 --> 00:13:57,494
users to be able to use things like git ignore for stuff

219
00:13:57,532 --> 00:14:01,150
like that. And it goes without saying that we need strong review processes.

220
00:14:01,250 --> 00:14:05,258
This is really all about the human aspect, making sure that our processes are

221
00:14:05,344 --> 00:14:08,394
correct and that folks understand what they need to do

222
00:14:08,512 --> 00:14:12,026
and where we can. We want to be automating as much as

223
00:14:12,048 --> 00:14:16,014
possible, reducing that friction for being able to do

224
00:14:16,052 --> 00:14:19,482
these things. And we can do that through things like pre commit hooks.

225
00:14:19,626 --> 00:14:23,210
And once we're confident the git is secure, we can start to leverage

226
00:14:23,290 --> 00:14:26,414
automation on every pull request. We want to be

227
00:14:26,452 --> 00:14:29,838
looking for the same issues that we were catching at the local development stage,

228
00:14:29,934 --> 00:14:33,346
but this time these things are obviously going to be automated. And the

229
00:14:33,368 --> 00:14:37,042
key difference is here that because these checks are automated,

230
00:14:37,106 --> 00:14:41,094
we're also monitoring for things that might have changed since a particular piece

231
00:14:41,132 --> 00:14:45,266
of code was committed. Perhaps an upstream

232
00:14:45,458 --> 00:14:48,946
dependency has changed. New vulnerabilities are discovered

233
00:14:48,978 --> 00:14:52,458
all the time, and code that didn't show vulnerabilities when

234
00:14:52,464 --> 00:14:56,138
it was first committed might now have some problems.

235
00:14:56,304 --> 00:14:59,658
So these monitoring scans over time will allow us to

236
00:14:59,664 --> 00:15:03,306
pick things up right in the code repository, where it's relatively low

237
00:15:03,328 --> 00:15:06,846
cost to fix it. And our container registries also kinds of

238
00:15:06,868 --> 00:15:10,298
fall into this category. Nothing's fixed in stone, so an image

239
00:15:10,314 --> 00:15:13,978
that looked fine when it was built might now be vulnerable. If your registry's

240
00:15:13,994 --> 00:15:17,762
got built in scanning, take advantage of that, or use tools that

241
00:15:17,816 --> 00:15:21,138
integrate with your registry. And we need to be scanning on an

242
00:15:21,144 --> 00:15:24,142
ongoing basis. Even if we haven't changed our images,

243
00:15:24,286 --> 00:15:27,734
that base image that we used to base our image on

244
00:15:27,772 --> 00:15:31,922
might have new vulnerabilities. And lots of people aren't rebuilding images unless

245
00:15:32,066 --> 00:15:35,798
things actually change. Another key integration point is our

246
00:15:35,884 --> 00:15:39,926
CI CD systems. And again, we can automate scanning

247
00:15:39,958 --> 00:15:43,686
directly into our build pipelines, and we're

248
00:15:43,718 --> 00:15:46,842
looking for things that may not have changed, but because

249
00:15:46,896 --> 00:15:50,506
we're rebuilding things, we can catch any changes that might be

250
00:15:50,528 --> 00:15:54,174
happening upstream, things that have changed since that code was first

251
00:15:54,212 --> 00:15:58,174
scanned, when it entered the source code repository, and then the final place

252
00:15:58,212 --> 00:16:00,778
we want to be looking is our production environments.

253
00:16:00,954 --> 00:16:04,766
Containers in production, particularly if they don't change, very often, can end

254
00:16:04,788 --> 00:16:09,214
up with vulnerable stages. So we need to be looking both at running containers

255
00:16:09,262 --> 00:16:13,154
and as a double check at new containers being spawned in this space.

256
00:16:13,192 --> 00:16:16,638
We can also take advantage of admission control, perhaps things like

257
00:16:16,664 --> 00:16:20,006
open policy agent to ensure that our policy

258
00:16:20,188 --> 00:16:23,906
security policies are being reflected in the code that's being deployed.

259
00:16:24,018 --> 00:16:27,554
Perhaps we want to double check that our images have been

260
00:16:27,612 --> 00:16:31,226
scanned before they hit production. And we

261
00:16:31,248 --> 00:16:34,554
can actually stop things here from deploying into

262
00:16:34,592 --> 00:16:38,278
our clusters if they don't comply with those policies.

263
00:16:38,454 --> 00:16:43,274
And in the production space, we can also look at emerging

264
00:16:43,322 --> 00:16:47,114
practices around runtime, perhaps looking at anomalous behavior.

265
00:16:47,242 --> 00:16:50,782
And there's lots of emerging tools in that space

266
00:16:50,916 --> 00:16:54,538
which are going to be checking for unusual patterns that might

267
00:16:54,564 --> 00:16:58,290
be happening inside your cluster, which might indicate that

268
00:16:58,440 --> 00:17:02,114
a particular container has been compromised. So the takeaways from

269
00:17:02,152 --> 00:17:05,798
all of this is that we need to shift our security left.

270
00:17:05,964 --> 00:17:09,480
We need to empower our developers to make decisions about security

271
00:17:10,090 --> 00:17:13,894
based on modern tools and modern process. In this

272
00:17:13,932 --> 00:17:17,878
kind of new world, security teams aren't gatekeepers anymore.

273
00:17:17,894 --> 00:17:21,066
With control over deployment, we need

274
00:17:21,088 --> 00:17:24,746
to consider the role of security professionals to be advisors and

275
00:17:24,768 --> 00:17:28,554
toolsmiths, as opposed to gatekeepers. Empowering our

276
00:17:28,592 --> 00:17:32,490
development teams to deliver feature velocity, new features

277
00:17:32,570 --> 00:17:36,350
and new code to production, and therefore delivering business

278
00:17:36,420 --> 00:17:40,030
value and visibility and remediation of security issues

279
00:17:40,100 --> 00:17:44,154
need to be baked in to each stage of our development pipeline.

280
00:17:44,202 --> 00:17:47,614
So we're leveraging automated tooling to scan third

281
00:17:47,652 --> 00:17:50,874
party code, our container images and our infrastructure

282
00:17:50,922 --> 00:17:54,382
code. So thank you for listening. If you're interested

283
00:17:54,436 --> 00:17:57,926
in trying out any of these features in sneak, you can sign up

284
00:17:57,948 --> 00:17:59,410
for free at Sneak IO.

