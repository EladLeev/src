1
00:00:26,930 --> 00:00:31,074
Hello everyone and welcome to my talk. As I mentioned in my introduction,

2
00:00:31,202 --> 00:00:34,994
today I'm going to present Piacere, a research and development

3
00:00:35,042 --> 00:00:37,350
project founded by the European Union.

4
00:00:37,930 --> 00:00:41,474
And Piacere is all about DevsecOps, all about automating

5
00:00:41,522 --> 00:00:45,430
devsecops, all about ensuring that Devsecops is usable

6
00:00:46,010 --> 00:00:49,446
in customers'environment. This presentation has

7
00:00:49,468 --> 00:00:52,682
been prepared by me and Pablo Schibeck.

8
00:00:52,746 --> 00:00:56,638
We are both from seven bullscom and a

9
00:00:56,644 --> 00:01:00,126
little bit about ourselves. So in this project especially, we are

10
00:01:00,148 --> 00:01:03,626
acting as a research and development center in polish center

11
00:01:03,668 --> 00:01:07,586
Badavcheros voyove. We have the status in Poland and in

12
00:01:07,608 --> 00:01:11,314
France as well. And I guess this is

13
00:01:11,432 --> 00:01:15,366
enough about us. Let's get going with the topic of the

14
00:01:15,388 --> 00:01:18,870
presentation. So regarding the devsecops,

15
00:01:19,770 --> 00:01:23,746
quick reminder. So in general this conference is all about devsecops.

16
00:01:23,778 --> 00:01:27,320
So I'm guessing you know what devsecops is,

17
00:01:27,710 --> 00:01:32,474
but a little quote from Gartner's it glossary on

18
00:01:32,512 --> 00:01:35,866
what devsecops is. So Gartner claims Devsecops is

19
00:01:35,888 --> 00:01:39,526
the integration of security into emerging, agile it and DevOps

20
00:01:39,558 --> 00:01:42,640
development as seamlessly and as transparently as possible.

21
00:01:43,410 --> 00:01:47,086
And basically as it goes on. Ideally this is

22
00:01:47,108 --> 00:01:50,526
done without reducing the agility or speed of developers or requiring them to

23
00:01:50,548 --> 00:01:54,158
leave the development toolchain environment. And precisely

24
00:01:54,254 --> 00:01:57,074
this is where Piacere aims to fit in.

25
00:01:57,272 --> 00:02:00,450
As we know, devsecops is hard

26
00:02:00,520 --> 00:02:04,482
in general. So the experience shows that

27
00:02:04,536 --> 00:02:08,630
many companies are struggling to add this sec to DevOps.

28
00:02:09,050 --> 00:02:12,774
Even if they moved already to DevOps. Some companies are still

29
00:02:12,812 --> 00:02:16,886
struggling to move to this more agile, formal DevOps. So that is one part of

30
00:02:16,908 --> 00:02:20,438
the equation. Another part is that adding security to DevOps

31
00:02:20,614 --> 00:02:24,406
is not as easy as it seemed, at least initially

32
00:02:24,598 --> 00:02:29,274
to some. So this is the framework that is going to make

33
00:02:29,312 --> 00:02:32,814
it easier for those companies who struggle with

34
00:02:32,852 --> 00:02:35,310
adding security to their DevOps pipelines.

35
00:02:36,530 --> 00:02:40,158
And a little why

36
00:02:40,324 --> 00:02:44,066
do we need SEC in DevOps? Again, based on

37
00:02:44,088 --> 00:02:47,234
this conference, I guess I don't have to persuade you too

38
00:02:47,272 --> 00:02:50,946
much at least, but a quick slide about that.

39
00:02:51,048 --> 00:02:54,306
So security, security.

40
00:02:54,408 --> 00:02:58,882
So security is important in general. But then if we consider DevOps

41
00:02:58,946 --> 00:03:02,230
and agility that comes from DevOps, when you have

42
00:03:02,300 --> 00:03:05,686
your infrastructure all software defined, you have software that

43
00:03:05,708 --> 00:03:08,310
powers your infrastructure, that powers your software.

44
00:03:10,110 --> 00:03:14,170
Again, you are adding new points to be attacked

45
00:03:14,990 --> 00:03:18,186
in those scenarios, and thus you need security

46
00:03:18,288 --> 00:03:19,980
for your DevOps as well.

47
00:03:21,010 --> 00:03:24,590
Additionally, if you consider the agility, the agility comes

48
00:03:24,660 --> 00:03:28,362
with increased frequency of built and deployment

49
00:03:28,426 --> 00:03:32,110
processes, and this increases the attack surface.

50
00:03:32,470 --> 00:03:36,450
So in general, recent news about the attacks

51
00:03:37,990 --> 00:03:39,650
on the delivery chain,

52
00:03:41,670 --> 00:03:45,426
on the way that we deploy our infrastructure, the way that we deploy,

53
00:03:45,458 --> 00:03:48,838
for example, our containers show how security is important

54
00:03:49,004 --> 00:03:53,014
at this stage as well. And another point

55
00:03:53,132 --> 00:03:57,062
to mention is that heterogeneity of infrastructure is another

56
00:03:57,116 --> 00:04:00,426
risk. So if you consider agility, if you consider the

57
00:04:00,448 --> 00:04:03,994
frequency, if you consider the heterogeneity, then the

58
00:04:04,032 --> 00:04:07,514
security part is a must, in that if you want

59
00:04:07,552 --> 00:04:11,702
your DevOps to be sustainable, to really affect

60
00:04:11,766 --> 00:04:15,646
your business in only a positive way, let's say security

61
00:04:15,748 --> 00:04:19,280
in DevOps is crucial. So devsecops all the way.

62
00:04:20,290 --> 00:04:23,822
And here I introduce piacere. And as I mentioned

63
00:04:23,876 --> 00:04:27,502
the introduction, piacere is actually an acronym.

64
00:04:27,566 --> 00:04:31,970
So it's this very long sentence

65
00:04:32,550 --> 00:04:36,302
being acronymized into piacere. So Pichera is actually programming

66
00:04:36,366 --> 00:04:39,666
trustworthy infrastructure as code in a secure framework.

67
00:04:39,778 --> 00:04:43,154
So the framework itself is supposed to be secure. The framework

68
00:04:43,202 --> 00:04:47,810
is all about the infrastructure as code. So the way we do DevOps normally,

69
00:04:47,970 --> 00:04:51,546
and making sure that this infrastructure as code is

70
00:04:51,568 --> 00:04:54,780
trustworthy so that it is secure as well.

71
00:04:56,110 --> 00:04:59,354
And a quick recap, this is a horizon 2020 project in

72
00:04:59,392 --> 00:05:03,770
software developers call our consortium consists of twelve organizations,

73
00:05:03,850 --> 00:05:07,214
and those range from academia, business and government.

74
00:05:07,412 --> 00:05:10,974
And consortium is led by Technalia and

75
00:05:11,012 --> 00:05:14,418
Technalia is from Spain. So the project started a

76
00:05:14,424 --> 00:05:18,578
year ago. Now that you're watching this video, it has already

77
00:05:18,664 --> 00:05:22,354
been a year since it started. And we at seven

78
00:05:22,392 --> 00:05:25,814
Bluescoscom, we are responsible for the integration part.

79
00:05:25,932 --> 00:05:29,734
So ensuring that everything works in the end, let's say.

80
00:05:29,852 --> 00:05:33,622
And also the part about the Canary sandbox environment, more on that

81
00:05:33,676 --> 00:05:37,614
later. And here about the tools

82
00:05:37,682 --> 00:05:41,340
of Piacere devsecops. So this is probably already

83
00:05:42,910 --> 00:05:46,694
familiar to you, what could be the goals of DevOps

84
00:05:46,742 --> 00:05:50,170
and security in DevOps. So first and foremost is obviously

85
00:05:50,240 --> 00:05:53,626
to develop, build and deploy applications, because otherwise what's

86
00:05:53,658 --> 00:05:57,054
the point of doing this? Then again, as I mentioned,

87
00:05:57,092 --> 00:06:00,350
this heterogeneity, so we are moving

88
00:06:00,420 --> 00:06:03,650
towards the cloud. If someone hasn't moved toward the cloud,

89
00:06:03,720 --> 00:06:07,140
then they are probably going to

90
00:06:08,150 --> 00:06:11,790
hybridizing the environment. So doing something on premises,

91
00:06:11,870 --> 00:06:15,442
doing something in fog, doing something in edge, and also

92
00:06:15,496 --> 00:06:19,078
having those multi cloud deployments when some services are running

93
00:06:19,164 --> 00:06:22,914
in a different crowd from the other services, or even load balancing

94
00:06:23,042 --> 00:06:27,106
the traffic via those multicloud

95
00:06:27,138 --> 00:06:31,078
deployments, similarly maintaining

96
00:06:31,094 --> 00:06:34,426
and figuring the infrastructure, because if you want to get your applications on

97
00:06:34,448 --> 00:06:38,774
something, then this something is the infrastructure. So the infrastructure

98
00:06:38,822 --> 00:06:42,334
is actually the main part of

99
00:06:42,372 --> 00:06:43,870
modeling in piacere.

100
00:06:45,330 --> 00:06:48,414
And with that goes the optimization of the

101
00:06:48,452 --> 00:06:52,142
usage of resources. So the infrastructure resources that are given

102
00:06:52,196 --> 00:06:55,826
to our applications are going to be optimized so that the

103
00:06:55,848 --> 00:06:58,740
optimal set of resources is being used at all times,

104
00:06:59,590 --> 00:07:03,634
as well as given this framework for testing the deployments and

105
00:07:03,672 --> 00:07:07,814
testing the infrastructure in general. And the

106
00:07:07,852 --> 00:07:11,686
final goal is what usually butchers the

107
00:07:11,708 --> 00:07:15,350
security in DevOps, in infrastructure in general,

108
00:07:15,500 --> 00:07:19,034
is the concept of snowflakes. So if

109
00:07:19,072 --> 00:07:22,966
you don't remember what snowflakes is, I urge

110
00:07:22,998 --> 00:07:27,610
you to look it up quickly. But in essence,

111
00:07:28,830 --> 00:07:33,082
Snowflake is a server that was specifically

112
00:07:33,146 --> 00:07:37,454
crafted for some purpose and it

113
00:07:37,492 --> 00:07:40,634
hasn't really gone through some regular procedure.

114
00:07:40,682 --> 00:07:44,770
Let's say in a company it has been manually configured,

115
00:07:46,390 --> 00:07:50,334
for example, to achieve some level of performance, to deploy

116
00:07:50,382 --> 00:07:54,238
some very custom application that is generally not supported

117
00:07:54,334 --> 00:07:57,490
inside an enterprise, and then left as it is,

118
00:07:57,640 --> 00:08:01,270
perhaps some administrator has already moved on to another

119
00:08:01,340 --> 00:08:05,222
company, and then you are left with this snowflake that has been very much

120
00:08:05,276 --> 00:08:09,494
cared for at some point in time, but in general the

121
00:08:09,532 --> 00:08:13,274
time has forgotten about it. And then you've got this conflict drift and

122
00:08:13,312 --> 00:08:16,502
the conflict drift. So anything that you are not expecting,

123
00:08:16,566 --> 00:08:20,146
that you are not monitoring, that you don't know that has drifted

124
00:08:20,198 --> 00:08:23,166
from the great standards that you have set for yourself,

125
00:08:23,348 --> 00:08:27,646
may affect your actual security. So that

126
00:08:27,668 --> 00:08:31,594
is some point to consider and the framework is actually disallowing

127
00:08:31,642 --> 00:08:35,326
you from doing this. So this is discouraged

128
00:08:35,438 --> 00:08:38,994
both in documentation, let's say, as well as

129
00:08:39,032 --> 00:08:42,180
in the approach that is kind of forced on you.

130
00:08:44,150 --> 00:08:46,870
So moving on to the key features of your chair.

131
00:08:48,250 --> 00:08:51,826
So yet again, the integrated security principles

132
00:08:52,018 --> 00:08:55,894
in those DevOps operations. So the development and

133
00:08:56,012 --> 00:08:59,702
the actual deployment as operations agile approach

134
00:08:59,766 --> 00:09:04,166
without losing security level. So that's

135
00:09:04,278 --> 00:09:07,722
the key feature, one of the key features, sandboxing guide to test

136
00:09:07,776 --> 00:09:11,030
the dynamic properties to be deployed infrastructure.

137
00:09:11,190 --> 00:09:14,894
So this created to the cannabis sandbox environment. I'm going to talk about

138
00:09:14,932 --> 00:09:17,040
it more soon as well.

139
00:09:18,050 --> 00:09:21,182
Another important point, and I want to stress this

140
00:09:21,236 --> 00:09:24,974
particular one out as single source of truth. So if

141
00:09:25,012 --> 00:09:28,918
you've been exposed to term such as git ops,

142
00:09:29,034 --> 00:09:32,226
when you are supposed to control all the

143
00:09:32,248 --> 00:09:35,198
config that you have via git repository,

144
00:09:35,294 --> 00:09:38,738
this framework is actually designed to work with that.

145
00:09:38,824 --> 00:09:42,514
So that you have this single source of truth, you have this git

146
00:09:42,562 --> 00:09:45,746
repository when you have all the configs,

147
00:09:45,778 --> 00:09:49,466
when you version them, when you ensure that they

148
00:09:49,488 --> 00:09:54,266
are managed properly, et cetera. So this access control, accountability of

149
00:09:54,288 --> 00:09:57,754
that procedure, this is probably one

150
00:09:57,792 --> 00:10:02,142
of the most important points to take, if anything,

151
00:10:02,276 --> 00:10:06,126
from this presentation. Basically,

152
00:10:06,308 --> 00:10:09,680
if you consider those snowflakes that I have just mentioned,

153
00:10:11,730 --> 00:10:15,074
the way to ensure that you don't end up

154
00:10:15,112 --> 00:10:19,730
with snowflakes is to have procedures to control access

155
00:10:19,800 --> 00:10:23,074
to the actual config that is being deployed. And the best

156
00:10:23,112 --> 00:10:26,878
way that we have as a humanity developed so

157
00:10:26,904 --> 00:10:30,754
far is the usage of version control systems. And nowadays

158
00:10:30,882 --> 00:10:34,390
this is most of the time git knowing that

159
00:10:34,460 --> 00:10:38,466
some folks still using subversion. So if you are using subversion then it's

160
00:10:38,498 --> 00:10:41,738
fine as well because the general principles are the most important ones.

161
00:10:41,824 --> 00:10:45,258
But you know the drill. Another key feature already

162
00:10:45,344 --> 00:10:49,526
mentioned as well regarding the multi cloud approach, cloud agnosticism.

163
00:10:49,638 --> 00:10:53,294
So that we are not fitting into one offer,

164
00:10:53,492 --> 00:10:57,214
for example from Amazon Web services, but we are considering all

165
00:10:57,252 --> 00:11:01,530
the other potential cloud providers,

166
00:11:01,690 --> 00:11:04,958
obviously the major ones like the Microsoft Asia,

167
00:11:05,134 --> 00:11:08,722
like the Google Cloud platform, but also all those

168
00:11:08,776 --> 00:11:13,054
platforms, public clouds with running OpenStack.

169
00:11:13,182 --> 00:11:17,222
So in general the cloud agnosticism is a key feature of petrare and

170
00:11:17,276 --> 00:11:20,854
also important part automatic healing and

171
00:11:20,892 --> 00:11:24,726
optimization. So ensuring that the

172
00:11:24,748 --> 00:11:28,394
infrastructure that has been defined first

173
00:11:28,432 --> 00:11:33,020
of all doesn't drift away from the actual configuration and

174
00:11:34,270 --> 00:11:37,770
is healthy at all the times, and also

175
00:11:37,840 --> 00:11:41,894
proposing optimizations to the way that the infrastructure

176
00:11:41,942 --> 00:11:44,430
scope is defined.

177
00:11:46,690 --> 00:11:50,126
And here is how we are going to go about that.

178
00:11:50,308 --> 00:11:54,626
So as I mentioned, this is quite

179
00:11:54,648 --> 00:11:59,074
a young project. So we are only a year in and

180
00:11:59,272 --> 00:12:03,134
this is some architecture that we have designed

181
00:12:03,182 --> 00:12:06,726
so far for piacere. First of

182
00:12:06,748 --> 00:12:10,886
all, we are going to have some ide for the user where

183
00:12:10,908 --> 00:12:14,822
the user is supposed to actually design the

184
00:12:14,876 --> 00:12:18,722
infrastructure as code, and the infrastructure as code is actually designed

185
00:12:18,786 --> 00:12:23,206
using an intermediary language called Dumml DevOps

186
00:12:23,238 --> 00:12:25,820
modeling language, more on that later as well.

187
00:12:26,270 --> 00:12:29,702
And as you can see on this diagram in the left upper corner,

188
00:12:29,766 --> 00:12:33,406
you have design time. So these are all the parts that are for the

189
00:12:33,428 --> 00:12:37,200
design time. So first of all, as I mentioned, eclipse ide,

190
00:12:38,450 --> 00:12:42,378
very likely this is going to be the web based ide as this is

191
00:12:42,564 --> 00:12:46,414
the most modern one and what most people nowadays

192
00:12:46,462 --> 00:12:50,146
expect to be. So the eclipse chair based

193
00:12:50,168 --> 00:12:54,018
on Eclipse TIA, and in there

194
00:12:54,104 --> 00:12:58,614
you're going to have those modeling tools, the support for the DamL language and

195
00:12:58,652 --> 00:13:02,338
also the interface to the other piacere

196
00:13:02,354 --> 00:13:05,320
tooling so that it is callable from the id itself.

197
00:13:06,970 --> 00:13:10,766
So having the user modeling the doml,

198
00:13:10,898 --> 00:13:14,730
then the ICG, the infrastructure code generator

199
00:13:15,230 --> 00:13:18,970
is used to generate the IAC that could be

200
00:13:19,040 --> 00:13:23,694
actually deployed on the infrastructure as we

201
00:13:23,732 --> 00:13:27,550
generally rely on the existing tooling, for example

202
00:13:27,620 --> 00:13:31,294
terraform for example, ansible to do the hard

203
00:13:31,332 --> 00:13:34,866
job of running the infrastructure as

204
00:13:34,888 --> 00:13:38,014
code, let's say. But the modeling language

205
00:13:38,062 --> 00:13:42,014
has to be. So the designing the modeling language in the domal

206
00:13:42,062 --> 00:13:45,506
has to be converted to that runnable IAC and this

207
00:13:45,528 --> 00:13:49,350
is where ICG comes in. Also, both the DOM model

208
00:13:49,420 --> 00:13:53,078
as well as the generated IAC go into this verification tool.

209
00:13:53,164 --> 00:13:56,950
So the verification tool is a general verification tool as well as security

210
00:13:57,020 --> 00:14:00,514
verification tool. This is where the emphasis is on the static

211
00:14:00,562 --> 00:14:04,426
testing of the generated IAC. More on

212
00:14:04,448 --> 00:14:07,802
that later. As well as I mentioned already,

213
00:14:07,936 --> 00:14:11,606
some git repository tooling. So this is kind of agnostic

214
00:14:11,638 --> 00:14:14,670
what that tooling is. It could be, for example GitLab, it could be something

215
00:14:14,740 --> 00:14:18,302
else, something like Garrett and

216
00:14:18,356 --> 00:14:21,818
Gitia for example, and creating

217
00:14:21,914 --> 00:14:25,300
those pull requests or merge requests, whatever,

218
00:14:26,310 --> 00:14:29,614
with the Domal and IAC that have been verified using the static

219
00:14:29,662 --> 00:14:30,900
verification step.

220
00:14:33,030 --> 00:14:36,840
This all goes into the runtime control that ensures that

221
00:14:39,210 --> 00:14:42,918
the processes relevant to the deployment actually

222
00:14:43,004 --> 00:14:46,914
start and ensure that the flow completes

223
00:14:46,962 --> 00:14:50,534
for that particular deployment. The IAC

224
00:14:50,582 --> 00:14:54,586
executor manager, the IEM is what actually calls the

225
00:14:54,608 --> 00:14:57,766
ansible, the terraform, whatever else to execute

226
00:14:57,878 --> 00:15:01,814
the IAC that was presented to it. Information about

227
00:15:01,872 --> 00:15:05,834
what is being deployed, what has been deployed is stored in the infrastructural

228
00:15:05,882 --> 00:15:09,726
elements catalog. And this is used for

229
00:15:09,748 --> 00:15:13,790
two purposes, as you can see. Well, even free purposes. But two purposes

230
00:15:13,870 --> 00:15:17,380
have already been called out, let's say.

231
00:15:17,910 --> 00:15:21,934
So the infrastructure elements catalog is used as database

232
00:15:21,982 --> 00:15:25,606
for querying from the id. So what are the possible

233
00:15:25,708 --> 00:15:29,590
choices for you as the user? What cloud be deployed?

234
00:15:31,370 --> 00:15:35,106
And then again, the information about what has been deployed

235
00:15:35,138 --> 00:15:37,270
is also saved in this catalog.

236
00:15:38,510 --> 00:15:42,054
So moving on, the flow then moves on to the infrastructure

237
00:15:42,102 --> 00:15:46,970
advisor. The infrastructure advisor sets up monitoring and

238
00:15:47,120 --> 00:15:50,938
analytics. The self healing, the optimization part

239
00:15:51,104 --> 00:15:55,310
of piacere is all in the infrastructure advisor,

240
00:15:56,610 --> 00:16:00,046
and the infrastructure advisor is also connected to

241
00:16:00,068 --> 00:16:03,762
the infrastructure elements catalog. It's actually the third

242
00:16:03,896 --> 00:16:12,674
usage of the infrastructure elements catalog that I've mentioned in

243
00:16:12,712 --> 00:16:16,150
that all the data, all the performance data,

244
00:16:16,220 --> 00:16:19,574
all the information about the state is

245
00:16:19,612 --> 00:16:23,142
stored in the elements catalog for easy

246
00:16:23,196 --> 00:16:26,994
querying. And this easy querying is for the optimizer

247
00:16:27,042 --> 00:16:30,614
part to be able to decide on the optimal

248
00:16:30,662 --> 00:16:33,450
strategy to propose.

249
00:16:35,150 --> 00:16:39,062
And all the others are concerned with the resource

250
00:16:39,126 --> 00:16:43,578
provider. And there are two kinds of resource providers from the PHRA perspective,

251
00:16:43,674 --> 00:16:47,834
the production resource providers. So those that actually exist for some production

252
00:16:47,882 --> 00:16:50,750
purpose, even if you're using it for testing.

253
00:16:52,050 --> 00:16:55,826
This is something that is generally considered to be production like. But there

254
00:16:55,848 --> 00:16:59,570
is also this tooling Canary sandbox environment tooling that is about

255
00:16:59,640 --> 00:17:03,166
provisioning specific kinds of resource providers,

256
00:17:03,198 --> 00:17:06,966
the canary sandbox resource providers, and those are

257
00:17:07,068 --> 00:17:10,242
especially to be used for development and testing

258
00:17:10,306 --> 00:17:12,760
of the generated infrastructure as code.

259
00:17:14,010 --> 00:17:17,560
More on that later as well. So in general,

260
00:17:18,650 --> 00:17:22,098
that's the diagram that's showing how the workflow

261
00:17:22,194 --> 00:17:25,914
of your cherry could be because it's not

262
00:17:25,952 --> 00:17:30,038
there yet as this is only a year in. So we are presenting how we

263
00:17:30,064 --> 00:17:32,800
are thinking about it, but not how it works already.

264
00:17:34,210 --> 00:17:37,840
But this is the general concept and the general view of that.

265
00:17:39,890 --> 00:17:43,138
So we are proposing something else.

266
00:17:43,224 --> 00:17:47,506
We are proposing something else again. And I

267
00:17:47,528 --> 00:17:51,234
bet some of you already know this image from XKCD about

268
00:17:51,272 --> 00:17:55,102
how standards proliferate and well,

269
00:17:55,256 --> 00:17:58,710
we have to really show why

270
00:17:58,780 --> 00:18:02,182
we are doing this instead of just saying that

271
00:18:02,236 --> 00:18:04,120
we have to do this because so,

272
00:18:05,370 --> 00:18:08,922
and our main point is that it hasn't been done yet.

273
00:18:09,056 --> 00:18:12,300
So many companies are struggling, as I mentioned already,

274
00:18:13,070 --> 00:18:16,682
with deciding on the approach to

275
00:18:16,736 --> 00:18:20,720
security in DevOps. There's really no

276
00:18:21,490 --> 00:18:25,274
complete, let's say standard for devsecops

277
00:18:25,402 --> 00:18:29,146
only. Kind of like parts of what piacere

278
00:18:29,178 --> 00:18:32,640
is going to propose are kind of standardized, say.

279
00:18:33,110 --> 00:18:36,782
But other than that, the devsecops is just wide west

280
00:18:36,846 --> 00:18:39,982
nowadays. Still, this is unfortunate

281
00:18:40,046 --> 00:18:43,650
and we are working to change that, to change this perspective.

282
00:18:44,550 --> 00:18:48,906
So first and foremost, this is to be simple and easy way to use devsecops

283
00:18:48,958 --> 00:18:52,578
approach so that you don't have to think too much, so that you don't

284
00:18:52,594 --> 00:18:55,654
have to worry about whether you are doing the devsecops right or

285
00:18:55,692 --> 00:18:59,466
not. We are proposing this as end

286
00:18:59,488 --> 00:19:03,226
to end solution for you. Unified way to build and

287
00:19:03,248 --> 00:19:06,860
deploy into the multi cloud environments already mentioned as well.

288
00:19:07,230 --> 00:19:11,094
Not relying on a single target platform but supporting

289
00:19:11,142 --> 00:19:14,894
all the environments, the ones at the bottom are the ones

290
00:19:14,932 --> 00:19:19,040
that we are thinking about the most at the time

291
00:19:19,570 --> 00:19:23,490
of this project. But in general, the project is going to be extensible.

292
00:19:24,230 --> 00:19:28,674
So if you find a need to

293
00:19:28,712 --> 00:19:32,770
use another resource provider then this is easy to actually

294
00:19:32,840 --> 00:19:36,406
add. So thinking about the other providers that

295
00:19:36,428 --> 00:19:40,194
aren't using OpenStack but are still public resource

296
00:19:40,242 --> 00:19:44,360
providers, cloud resource providers, then this is easy to add later

297
00:19:44,730 --> 00:19:48,746
support for multiple IaC languages so that you

298
00:19:48,768 --> 00:19:52,122
are not bound to a single IAC language. So again,

299
00:19:52,176 --> 00:19:55,626
the extensibility point comes in here. As I

300
00:19:55,648 --> 00:19:58,860
mentioned, the ones that we have considered so far,

301
00:20:00,210 --> 00:20:04,334
we have considered so far include terraform and ansible. But this

302
00:20:04,372 --> 00:20:08,062
could change as well automatic deployment to different cloud

303
00:20:08,116 --> 00:20:11,886
providers so that you don't have

304
00:20:11,908 --> 00:20:16,030
to worry about the details, how to contact the different cloud providers.

305
00:20:16,190 --> 00:20:19,460
This is already abstracted away from you. For you,

306
00:20:19,990 --> 00:20:23,010
automatic optimization of cloud resources.

307
00:20:24,070 --> 00:20:27,766
This is again important that you

308
00:20:27,788 --> 00:20:31,394
are not left alone with the optimization stage.

309
00:20:31,522 --> 00:20:34,630
If you require the optimization.

310
00:20:35,210 --> 00:20:38,406
The way to do it securely is also to

311
00:20:38,428 --> 00:20:42,006
be built in in deputy framework. And finally the

312
00:20:42,028 --> 00:20:45,754
embracement of Githubs with a single source of truth and

313
00:20:45,792 --> 00:20:48,300
streamlined access control. As I mentioned already,

314
00:20:48,750 --> 00:20:52,962
these are the selling points. As for why to go pitcher

315
00:20:53,126 --> 00:20:56,734
with your devsecops and the key

316
00:20:56,772 --> 00:21:00,618
elements, I've already kind of mentioned them, but a quick recap,

317
00:21:00,794 --> 00:21:04,254
those will be now described in much more

318
00:21:04,292 --> 00:21:08,226
detail on the different slides that are coming. So the first

319
00:21:08,248 --> 00:21:11,922
one is devsecops modeling language. So actually this is only

320
00:21:11,976 --> 00:21:15,758
for the D ops or DevOps modeling language. But in general, since we are dealing

321
00:21:15,774 --> 00:21:18,994
with security as well, this is Devsecops modeling

322
00:21:19,042 --> 00:21:22,120
language. Then you've got the verification tool.

323
00:21:22,650 --> 00:21:26,454
As I mentioned, this is both for the security as

324
00:21:26,492 --> 00:21:29,670
well as the formal verification of the DOM and the IAC,

325
00:21:30,250 --> 00:21:33,466
the central DOM and IAC repositories and running control.

326
00:21:33,568 --> 00:21:37,274
So this is actually the git repository I was

327
00:21:37,312 --> 00:21:40,954
mentioning and the random controller that

328
00:21:40,992 --> 00:21:44,758
is providing the general workflow of the petrol

329
00:21:44,774 --> 00:21:48,346
framework. Then we've got the IAC, the IAC executor

330
00:21:48,378 --> 00:21:52,286
manager that actually executes the IAC, the kind of sandbox environment tooling that

331
00:21:52,308 --> 00:21:56,254
is kind of a helper service in here, the infrastructure

332
00:21:56,302 --> 00:22:00,002
elements catalog that contains all the different information still

333
00:22:00,056 --> 00:22:03,602
to be defined as well. So let's wait a couple

334
00:22:03,656 --> 00:22:06,886
of slides more to learn more details about that and the

335
00:22:06,908 --> 00:22:09,974
infrastructure advisor, which is about

336
00:22:10,012 --> 00:22:13,606
the random monitoring. So for the performance and security as well as this

337
00:22:13,628 --> 00:22:17,442
infrastructure optimization platform, and also the bits that are not

338
00:22:17,516 --> 00:22:21,242
shown here will be shown later for the self healing and self

339
00:22:21,296 --> 00:22:24,794
learning of

340
00:22:24,832 --> 00:22:28,502
the data. And all this is integrated

341
00:22:28,566 --> 00:22:31,786
together in the Piazza framework. So as I mentioned, this is

342
00:22:31,808 --> 00:22:35,662
an end to end solution for devsecops. And now

343
00:22:35,716 --> 00:22:39,706
moving on to this first component mentioned. So the Domal, the devsecops

344
00:22:39,738 --> 00:22:43,394
modeling language. So this is where we are going,

345
00:22:43,592 --> 00:22:47,042
cloud agnostic. And the way

346
00:22:47,096 --> 00:22:50,370
that it's phrased in the slide, the cloud agnostic able

347
00:22:50,440 --> 00:22:54,274
language, is because we are allowing the user to actually

348
00:22:54,392 --> 00:22:57,522
ignore this fact. If the user is willing

349
00:22:57,586 --> 00:23:01,174
to use a very specific feature of a

350
00:23:01,212 --> 00:23:04,514
certain cloud provider, and that is not available anywhere

351
00:23:04,562 --> 00:23:09,158
else, or that needs special configuration for that particular provider,

352
00:23:09,254 --> 00:23:13,100
then the user is welcome to do that. This is obviously

353
00:23:13,630 --> 00:23:16,922
blocking the multicloud approach for that

354
00:23:16,976 --> 00:23:20,814
particular part of the IAC, but otherwise there

355
00:23:20,852 --> 00:23:24,334
could be more generality in other parts. So to

356
00:23:24,372 --> 00:23:27,950
achieve that we offer multiple layers of modeling and presentation.

357
00:23:28,530 --> 00:23:31,966
So we are showing this abstract modeling when you

358
00:23:32,068 --> 00:23:35,860
have it, environment agnostic. So for example,

359
00:23:36,230 --> 00:23:40,382
this cloud agnostic and complete level where you have environment

360
00:23:40,446 --> 00:23:44,334
dependent data. Application modeling is minimal.

361
00:23:44,382 --> 00:23:48,190
In here we are focusing on the modeling of the infrastructure.

362
00:23:48,350 --> 00:23:51,570
So digital parts like the complete,

363
00:23:51,650 --> 00:23:55,000
what is to be deployed, how it's connected, what are the security

364
00:23:56,410 --> 00:24:00,220
relevant aspects that's in there. But other than that,

365
00:24:00,990 --> 00:24:04,694
the very detailed like it could be application modeling

366
00:24:04,742 --> 00:24:07,882
is not part of the dummy. The target act

367
00:24:07,936 --> 00:24:11,722
generation is possible and it's into multiple languages,

368
00:24:11,786 --> 00:24:15,194
as I mentioned, terraform ansible, the basic

369
00:24:15,242 --> 00:24:18,398
ones that we are offering at the beginning that we are

370
00:24:18,404 --> 00:24:21,854
thinking about at the moment. And the modeling toolbox is

371
00:24:21,892 --> 00:24:26,180
available in the eclipse id and I mean the web actually the

372
00:24:27,030 --> 00:24:29,940
eclipse share id based on eclipse there.

373
00:24:31,270 --> 00:24:34,946
Okay, so that's for the demo, now for the verification tool.

374
00:24:35,048 --> 00:24:38,706
So as already mentioned, static analysis of the

375
00:24:38,728 --> 00:24:42,246
domino and the generated IAC to verify the

376
00:24:42,268 --> 00:24:45,826
correctness according to select criteria. So it's

377
00:24:45,858 --> 00:24:49,926
also configurable to ignore certain parts

378
00:24:50,038 --> 00:24:54,026
if the user wishes to ignore them. But in general this

379
00:24:54,048 --> 00:24:57,914
is offering a wide range of criteria to

380
00:24:57,952 --> 00:25:02,270
analyze the domain IAC for those formal

381
00:25:02,690 --> 00:25:06,080
correctness as well as the security aspects of that.

382
00:25:06,450 --> 00:25:10,046
And this is to ensure that the IAC and the companies that

383
00:25:10,068 --> 00:25:13,550
are used are free of known vulnerabilities and that they follow

384
00:25:13,620 --> 00:25:17,026
best security practices. So this is what can be

385
00:25:17,048 --> 00:25:20,686
achieved at the static analysis level and this is the tooling

386
00:25:20,718 --> 00:25:24,494
that does specifically that. And this is very much related

387
00:25:24,542 --> 00:25:27,798
to the code generation. So this again

388
00:25:27,964 --> 00:25:31,334
for the time being focuses on ansible and

389
00:25:31,372 --> 00:25:35,122
terraform and is made to be extensible

390
00:25:35,186 --> 00:25:39,814
to support other languages for

391
00:25:39,852 --> 00:25:43,918
this single domain IAC repositories and runtime controller.

392
00:25:44,034 --> 00:25:47,238
Again think repositories like the git repositories

393
00:25:47,334 --> 00:25:50,140
or subversion repositories if that's your thing.

394
00:25:50,510 --> 00:25:53,530
But in general this is about the single four operations.

395
00:25:53,690 --> 00:25:57,194
So pushing to the repository, getting your deployment updated

396
00:25:57,242 --> 00:26:01,118
via that, probably with some procedure like using the

397
00:26:01,284 --> 00:26:04,930
merge request, the pull requests to actually

398
00:26:05,000 --> 00:26:08,642
confirm that the OPS person is willing to

399
00:26:08,696 --> 00:26:12,606
proceed with this change. This allows for the single source

400
00:26:12,638 --> 00:26:15,938
of truth approach where everything infrastructure,

401
00:26:16,114 --> 00:26:20,082
it's all in one place, it's defined there, it can be compared

402
00:26:20,146 --> 00:26:23,400
against the state. This is also

403
00:26:23,930 --> 00:26:27,866
the way that for example kubernetes pursues this, where you

404
00:26:27,888 --> 00:26:31,462
define the desired state and then you can compare against this desired

405
00:26:31,526 --> 00:26:35,514
state. So this movement was

406
00:26:35,552 --> 00:26:38,906
inspired by this, by this

407
00:26:38,928 --> 00:26:42,126
approach in kubernetes, again simplified and

408
00:26:42,148 --> 00:26:46,330
streamlined access control. So control access via repository

409
00:26:46,410 --> 00:26:51,054
permissions and any procedures that

410
00:26:51,092 --> 00:26:53,540
your repository tooling allows you to do,

411
00:26:54,230 --> 00:26:57,586
to verify, to control, to ensure that

412
00:26:57,608 --> 00:27:01,554
the right people are stamping the

413
00:27:01,592 --> 00:27:04,478
change to happen in your infrastructure.

414
00:27:04,654 --> 00:27:08,310
That's all available to you with that approach.

415
00:27:08,970 --> 00:27:12,710
As for the random control, as I mentioned, this is for the workflow

416
00:27:13,210 --> 00:27:16,498
of the general framework and this is based on BPMN.

417
00:27:16,594 --> 00:27:22,058
So the business process model annotation and

418
00:27:22,144 --> 00:27:25,130
this allows for quite an extensible vernacular,

419
00:27:25,470 --> 00:27:29,046
this mostly not to be modified

420
00:27:29,238 --> 00:27:32,414
by the end users of piacere, but it's there,

421
00:27:32,452 --> 00:27:36,538
it's flexible and it allows for further customization

422
00:27:36,634 --> 00:27:40,314
if such it arises. And now on to the IAC

423
00:27:40,362 --> 00:27:43,586
executor manager. IAC executor manager is all about the

424
00:27:43,608 --> 00:27:47,646
execution of IAC, so it has to understand the tooling

425
00:27:47,678 --> 00:27:51,250
that deploys the IAC. So for example the Ansible playbook command,

426
00:27:52,150 --> 00:27:56,090
the terraform comments and outputs

427
00:27:56,110 --> 00:28:00,006
of those comments, and the state that they save, the logs that

428
00:28:00,028 --> 00:28:03,574
they produce. This is all in the IAC executor manager which

429
00:28:03,612 --> 00:28:08,170
understands those. Again, I'll be repeating myself thinking

430
00:28:08,240 --> 00:28:11,946
in this first release about Ansible and terraform, but yet again

431
00:28:12,048 --> 00:28:13,900
being extensible about that.

432
00:28:15,470 --> 00:28:19,890
What's more, it actually is to understand the deployed infrastructure.

433
00:28:19,990 --> 00:28:23,806
So to be able to save this information to

434
00:28:23,828 --> 00:28:28,110
the infrastructure admins catalog that something has been deployed. The infrastructure

435
00:28:28,850 --> 00:28:32,410
as code executor manager is to understand

436
00:28:32,500 --> 00:28:36,226
the deployed infrastructure, understand what has been deployed and where,

437
00:28:36,408 --> 00:28:41,374
what the parameters are, et cetera, that are relevant

438
00:28:41,422 --> 00:28:45,574
for storing in that catalog, as well as

439
00:28:45,612 --> 00:28:49,480
support for reconfiguration scanning is also in the IM.

440
00:28:50,810 --> 00:28:54,406
So reapplying the

441
00:28:54,428 --> 00:28:59,458
ansible pegboards or the terraform terraform configs

442
00:28:59,634 --> 00:29:03,154
and scaling, applying the scaling procedure via

443
00:29:03,202 --> 00:29:05,900
the IM is also in here.

444
00:29:07,150 --> 00:29:11,194
This is also what supported both the actual resource

445
00:29:11,242 --> 00:29:14,714
providers, the production resource providers, as well as the canary environment resource

446
00:29:14,762 --> 00:29:15,710
providers.

447
00:29:19,010 --> 00:29:23,086
So it's like the universal solution for using IAC

448
00:29:23,118 --> 00:29:27,102
infrastructure and secure use of credentials to the target environments.

449
00:29:27,166 --> 00:29:31,794
This is also the part that actually integrates with

450
00:29:31,832 --> 00:29:35,846
your, for example Hashikov's vault where you

451
00:29:35,868 --> 00:29:40,438
store your credentials. And those are obtained by the aims itself,

452
00:29:40,524 --> 00:29:42,070
not the other components.

453
00:29:43,690 --> 00:29:47,858
As for the Canary sandbox environment tooling in

454
00:29:47,884 --> 00:29:51,210
here, we are proposing two tools. One is the provisioner.

455
00:29:51,710 --> 00:29:55,910
So the provisioner is about the deployment of select environments in an opinionated

456
00:29:55,990 --> 00:30:00,006
way. So as most of you may

457
00:30:00,048 --> 00:30:03,998
know, especially OpenStack. But kubernetes as well

458
00:30:04,164 --> 00:30:07,722
could be quite daunting for the deployment

459
00:30:07,786 --> 00:30:11,822
part. And we are proposing an opinionated way

460
00:30:11,876 --> 00:30:14,340
that is deploying the minimal set,

461
00:30:15,590 --> 00:30:19,954
let's say, of those complete that are required to run

462
00:30:20,152 --> 00:30:23,970
applications models specifically for OpenStack and Kubernetes.

463
00:30:24,550 --> 00:30:27,606
So you have this like one click,

464
00:30:27,708 --> 00:30:31,222
one button way to deploy your OpenStack cloud,

465
00:30:31,276 --> 00:30:35,126
your Kubernetes cloud, so that it can be used by

466
00:30:35,148 --> 00:30:38,406
the rest of the framework. So this is mostly for

467
00:30:38,428 --> 00:30:42,310
the testing and development aspect

468
00:30:42,470 --> 00:30:46,394
of the framework. And the other tooling that we are working on and

469
00:30:46,432 --> 00:30:49,626
we are proposing in Piacere is the mock cloud. And the

470
00:30:49,648 --> 00:30:53,594
mock cloud is about the mocked APIs of selected

471
00:30:53,642 --> 00:30:56,320
cloud providers. So like for example,

472
00:30:57,650 --> 00:31:00,874
when you have Amazon and you interact

473
00:31:00,922 --> 00:31:02,480
with Amazon Web services,

474
00:31:04,370 --> 00:31:07,914
you might actually be interested in checking if your infrastructure

475
00:31:07,962 --> 00:31:11,650
as code behaves a certain way without

476
00:31:11,800 --> 00:31:15,154
actually calling the AWS. And there

477
00:31:15,192 --> 00:31:17,878
has been some work in that regard in general public.

478
00:31:17,964 --> 00:31:21,734
But this is what we are going to elaborate more

479
00:31:21,772 --> 00:31:24,966
on in this project as part of

480
00:31:24,988 --> 00:31:28,386
the smoker and in general the Kanai sandbox

481
00:31:28,418 --> 00:31:32,058
environment. As I mentioned, this is for testing of

482
00:31:32,064 --> 00:31:36,282
the dynamic aspects of the deployment. So like the verification tool lives

483
00:31:36,336 --> 00:31:40,470
at the static stage at the design time, but sometimes static

484
00:31:40,550 --> 00:31:43,786
analyzes is not enough. Some bits

485
00:31:43,818 --> 00:31:47,070
could be omitted in that some could be not observable.

486
00:31:47,570 --> 00:31:52,334
And dynamic testing is always closer to

487
00:31:52,372 --> 00:31:55,614
the actual behavior that is going to be observed

488
00:31:55,662 --> 00:32:00,626
in production and

489
00:32:00,728 --> 00:32:03,970
for the infrastructure elements catalog. So like I mentioned,

490
00:32:04,040 --> 00:32:07,394
this is storing all kinds of information. We are calling

491
00:32:07,432 --> 00:32:11,174
this the central storage of local phrase knowledge local

492
00:32:11,292 --> 00:32:15,430
because it's relevant to the deployment of the user.

493
00:32:16,090 --> 00:32:19,354
So it stores both the offers, but it also

494
00:32:19,392 --> 00:32:23,606
stores the historic data. The information that was obtained about the performance metrics,

495
00:32:23,638 --> 00:32:26,810
security metrics of the actual deployments,

496
00:32:28,030 --> 00:32:31,354
and the details on actual deployments as well are all

497
00:32:31,392 --> 00:32:33,550
in the infrastructure elements catalog.

498
00:32:34,850 --> 00:32:38,142
And the infrastructure elements catalog can be used to answer

499
00:32:38,196 --> 00:32:41,840
the questions as to what providers are available, what the offers are

500
00:32:42,450 --> 00:32:45,826
so like for the optimization part, if you are

501
00:32:45,848 --> 00:32:49,294
optimizing for the cost, the way that the PSA framework

502
00:32:49,342 --> 00:32:53,060
knows what the costs are, what the available options are ahead.

503
00:32:53,670 --> 00:32:57,000
This is where infrastructure elements catalog comes in.

504
00:32:57,530 --> 00:33:01,234
As I mentioned already. Yes, it stores the history characteristics

505
00:33:01,282 --> 00:33:05,654
of the offers. So if you are optimizing both against the

506
00:33:05,692 --> 00:33:09,854
cost, optimizing for the cost as well as for the performance characteristics,

507
00:33:09,922 --> 00:33:13,754
because you are interested both in ensuring that your users get

508
00:33:13,872 --> 00:33:16,906
the right levels of SLA and you

509
00:33:16,928 --> 00:33:21,390
are optimizing for the cost because you don't want to overpay for the same performance,

510
00:33:21,810 --> 00:33:25,550
this is also useful information for the optimized

511
00:33:26,690 --> 00:33:31,134
and the optimized. And the monitoring comes

512
00:33:31,172 --> 00:33:35,022
from the infrastructure advisor, and the infrastructure advisor

513
00:33:35,166 --> 00:33:38,654
has those two main parts. The first part is the random monitoring

514
00:33:38,702 --> 00:33:42,222
for performance and security, and the other part is the actual optimization

515
00:33:42,286 --> 00:33:45,926
platform. So the goal of

516
00:33:45,948 --> 00:33:49,234
the monitoring is to collect those metrics and events related

517
00:33:49,282 --> 00:33:50,760
to performance and security,

518
00:33:51,930 --> 00:33:56,070
actually to self learn and self heal from that.

519
00:33:56,220 --> 00:33:59,446
So discovering those small discrepancies

520
00:33:59,638 --> 00:34:02,826
and healing them right away, and also self learning from

521
00:34:02,848 --> 00:34:06,346
the data to discover that certain issues

522
00:34:06,448 --> 00:34:10,830
are going to repeat soon. Like for example from

523
00:34:10,900 --> 00:34:13,870
the data, the last time that you've seen those spikes,

524
00:34:14,690 --> 00:34:18,650
you soon needed another instance to be provisioned.

525
00:34:18,730 --> 00:34:22,030
And this is especially what the self learning is about.

526
00:34:22,100 --> 00:34:25,540
But similarly, the self learning is about the security.

527
00:34:25,910 --> 00:34:29,746
So discovering patterns in how the security

528
00:34:29,848 --> 00:34:33,454
could be violated, what aspects

529
00:34:33,502 --> 00:34:37,494
of the security are relevant to that, is also

530
00:34:37,532 --> 00:34:41,766
in that self learning and the

531
00:34:41,788 --> 00:34:46,738
infrastructure side. So like you probably recognize.

532
00:34:46,834 --> 00:34:50,566
So when you want to monitor something, you need to somehow

533
00:34:50,598 --> 00:34:55,334
access the systems. So this is an approach

534
00:34:55,382 --> 00:34:59,210
with agents. So the agents are actually deployed during the IEM run.

535
00:34:59,280 --> 00:35:02,030
So the IEM gets those additional,

536
00:35:03,490 --> 00:35:07,194
let's say for example ansible playbooks or otherwise,

537
00:35:07,242 --> 00:35:11,086
the infrastructure scope to deploy the actual agents to

538
00:35:11,108 --> 00:35:14,494
be configured with the infrastructure advisor

539
00:35:14,542 --> 00:35:17,300
so that the metrics can be collected from there.

540
00:35:18,150 --> 00:35:21,090
The IOP, as I've mentioned, the platform for the optimization,

541
00:35:22,550 --> 00:35:25,906
it actually computes the optimal

542
00:35:25,938 --> 00:35:29,746
solutions based on those collected metrics. So it collaborates with the infrastructure

543
00:35:29,778 --> 00:35:33,734
elements catalog and

544
00:35:33,932 --> 00:35:37,190
the trade offs that are to be optimized of the cost,

545
00:35:37,260 --> 00:35:40,246
performance, availability, et cetera, style.

546
00:35:40,438 --> 00:35:43,914
So those aspects, and this

547
00:35:43,952 --> 00:35:48,634
is using multi objective optimization based

548
00:35:48,672 --> 00:35:53,866
on machine learning. And that's

549
00:35:53,898 --> 00:35:57,134
it for the optimization side. I guess this was also the

550
00:35:57,172 --> 00:36:01,146
last slide. Yes, I was right. Okay, so that's

551
00:36:01,178 --> 00:36:04,986
it from me for this presentation about piacere. Thank you very much for staying

552
00:36:05,018 --> 00:36:08,238
with me, for listening to me and let's stay in touch.

553
00:36:08,324 --> 00:36:11,440
If you want to reach out to us, this is our website.

554
00:36:12,050 --> 00:36:15,734
If you want to reach out to us for seven boost.com,

555
00:36:15,772 --> 00:36:19,286
our company name is our domain, so you

556
00:36:19,308 --> 00:36:22,374
can find us there. Thank you very much again and see

557
00:36:22,412 --> 00:36:22,806
you.

