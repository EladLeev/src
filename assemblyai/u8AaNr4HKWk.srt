1
00:00:27,410 --> 00:00:30,834
Hello lovely people. My name is Frederic Harper.

2
00:00:30,882 --> 00:00:34,854
I'm a principal developer advocate at Cube first and today

3
00:00:34,972 --> 00:00:38,326
I'm going to talk to you about get shit done the

4
00:00:38,348 --> 00:00:42,246
GitHub's way during the talk. When you watch the

5
00:00:42,268 --> 00:00:45,010
video, please feel free to ping me on Twitter.

6
00:00:45,090 --> 00:00:49,014
I'm at Fr or share screenshot or things

7
00:00:49,052 --> 00:00:52,414
that I've said that youll agree or disagree with. I'm all about

8
00:00:52,532 --> 00:00:56,366
discussing stuff and I don't have the only truth, so please

9
00:00:56,548 --> 00:00:59,886
connect with me. I'm going to be more than happy to talk to you.

10
00:01:00,068 --> 00:01:03,546
So with that said, let's jump

11
00:01:03,578 --> 00:01:07,566
on the talk. We only have 30 minutes together today, so that's

12
00:01:07,598 --> 00:01:11,506
going to be a high level overview. I'm going to try to put as

13
00:01:11,528 --> 00:01:15,394
much content as possible with a little bit of demo so you can

14
00:01:15,432 --> 00:01:18,582
see how it's working and how you can

15
00:01:18,636 --> 00:01:21,030
apply this to your day to day work.

16
00:01:21,180 --> 00:01:24,982
So let's start with maybe something that you already know,

17
00:01:25,036 --> 00:01:28,354
something that you're comfortable with, which is DevOps.

18
00:01:28,402 --> 00:01:31,462
So we are used to DevOps,

19
00:01:31,526 --> 00:01:35,446
or maybe you're starting to learn about DevOps and there's that thing called Gitops

20
00:01:35,478 --> 00:01:39,050
that is there since a little bit now, but still something

21
00:01:39,120 --> 00:01:42,974
a concrete that is quite new for most people starting or even

22
00:01:43,012 --> 00:01:46,474
people that are in their actual cloud native journey.

23
00:01:46,602 --> 00:01:50,058
So when we think about Gitops,

24
00:01:50,234 --> 00:01:54,350
actually, sorry, when we think about DevOps, we put

25
00:01:54,500 --> 00:01:57,794
the application code in git repository most

26
00:01:57,832 --> 00:02:01,822
of the time. And we're going to have that CI CD pipeline who's

27
00:02:01,886 --> 00:02:05,398
going to basically validate our code

28
00:02:05,484 --> 00:02:09,094
and do everything we need and deploy our code

29
00:02:09,212 --> 00:02:12,978
to the cloud to on premises.

30
00:02:13,154 --> 00:02:17,046
Actually that delivery pipeline will put your

31
00:02:17,068 --> 00:02:21,322
application somewhere. So this is the kind of process that we are used

32
00:02:21,376 --> 00:02:25,354
to when it comes to DevOps. The difference now is

33
00:02:25,392 --> 00:02:29,418
that you can also do that with DevOps. But it's an important

34
00:02:29,504 --> 00:02:32,794
part of Githubs is that now we think about infrastructure

35
00:02:32,842 --> 00:02:35,662
as code. So I'm a big fan of infrastructure as code.

36
00:02:35,716 --> 00:02:40,122
Hiac, one of the most popular out there is terraform.

37
00:02:40,266 --> 00:02:44,258
That helps you to do that. And it's basically as it says,

38
00:02:44,344 --> 00:02:48,322
like it's having your infrastructure as code. So youll

39
00:02:48,376 --> 00:02:52,622
write down some code that will create your infrastructure

40
00:02:52,686 --> 00:02:57,938
and you still put this in your git repository. And traditionally

41
00:02:58,114 --> 00:03:02,390
more DevOps way of doing things. You're still going to put your configuration

42
00:03:02,970 --> 00:03:06,386
sometimes in your git repository.

43
00:03:06,498 --> 00:03:09,782
So it's kind of like the industry default way of doing

44
00:03:09,836 --> 00:03:13,674
things. We are familiar with that. It comes easy now

45
00:03:13,712 --> 00:03:17,274
because we've been doing that for a couple of years. And the thing is that

46
00:03:17,312 --> 00:03:21,402
there is some flexibility of doing those because it's a principle

47
00:03:21,466 --> 00:03:25,790
that is not specific just for cloud native application.

48
00:03:25,940 --> 00:03:29,322
You can use that in different type of environment.

49
00:03:29,466 --> 00:03:33,778
But now what we are changing when we move toward GitHubs is

50
00:03:33,864 --> 00:03:37,086
that we're splitting the CI and CD pipeline.

51
00:03:37,198 --> 00:03:41,070
So it's still there, you still have continuous integration,

52
00:03:41,150 --> 00:03:44,654
you can still do whatever you were doing previously

53
00:03:44,702 --> 00:03:48,262
in that part of the pipeline. But there's also another difference

54
00:03:48,396 --> 00:03:52,454
now, instead of having the git repository that push things,

55
00:03:52,572 --> 00:03:55,718
the CI actually the CD part

56
00:03:55,884 --> 00:03:59,554
will grab information, will pull the information from

57
00:03:59,612 --> 00:04:03,494
the git repository, and it becomes

58
00:04:03,542 --> 00:04:06,794
your source of truth. And I will talk a little more

59
00:04:06,832 --> 00:04:10,542
about the difference why it became the source of truth and why it may not

60
00:04:10,596 --> 00:04:13,742
have been. When it comes to DevOps or using

61
00:04:13,796 --> 00:04:17,758
DevOps as your way to manage your application

62
00:04:17,924 --> 00:04:21,360
deployment, the things that

63
00:04:21,730 --> 00:04:24,846
may be something that may not be useful for you when

64
00:04:24,868 --> 00:04:27,870
it comes to GitHubs is that it's really specific for Kubernetes,

65
00:04:27,950 --> 00:04:31,762
because on those pods you're going to have mechanism that

66
00:04:31,816 --> 00:04:35,662
will grab the information from your git repository to always ensure

67
00:04:35,726 --> 00:04:38,854
that you have the latest version on what is

68
00:04:38,892 --> 00:04:42,706
in your source of truth, the git repository. So it's

69
00:04:42,738 --> 00:04:46,630
Gitops in a nutshell. And Gitops really help you to manage,

70
00:04:46,700 --> 00:04:50,314
as I said, cloud native systems with Kubernetes, but in a

71
00:04:50,352 --> 00:04:53,994
declarative way, leveraging git. So it's a tool you

72
00:04:54,032 --> 00:04:57,674
already know and you already use. You can see this as

73
00:04:57,712 --> 00:05:01,526
a branch of DevOps. It's really taking its best practices.

74
00:05:01,718 --> 00:05:05,082
But with the big and cases of having git,

75
00:05:05,146 --> 00:05:09,054
youll source of truth and not the server. So there are some pro and

76
00:05:09,092 --> 00:05:12,174
cons about that. So let me show you

77
00:05:12,292 --> 00:05:17,066
a little bit about a GitHub repository structure

78
00:05:17,258 --> 00:05:21,106
that we're using at Cube first. So let me switch my screen here

79
00:05:21,288 --> 00:05:25,502
and hopefully right now you should see my GitHub

80
00:05:25,646 --> 00:05:29,730
repository. So that was created when I

81
00:05:29,880 --> 00:05:33,286
used the Kubefirst CLI, which is our product, but I'm not here to talk about

82
00:05:33,308 --> 00:05:36,502
it, just to show you one example of

83
00:05:36,556 --> 00:05:40,646
how your GitHubs repository could be structured.

84
00:05:40,758 --> 00:05:44,346
So we have our GitHubs repository here, we have

85
00:05:44,368 --> 00:05:47,962
our registry. Cube first is just because I

86
00:05:48,016 --> 00:05:51,546
call my cluster like that. And you're going to

87
00:05:51,568 --> 00:05:54,670
see there is those yaml file that you may recognize.

88
00:05:55,090 --> 00:05:59,054
Those are basically Kubernetes declaration that

89
00:05:59,092 --> 00:06:03,598
I have in my Githubs repository that's going to be read

90
00:06:03,684 --> 00:06:08,242
by argo CD so we use our go CD in our ecosystem to

91
00:06:08,376 --> 00:06:11,634
install update deploy application on

92
00:06:11,672 --> 00:06:15,622
my cluster. So I have my ML file here

93
00:06:15,756 --> 00:06:18,994
we are using the appsup apps patterns

94
00:06:19,122 --> 00:06:22,226
and here you have different components for different parts

95
00:06:22,258 --> 00:06:24,882
of application that are installed in my cluster.

96
00:06:24,946 --> 00:06:28,578
So my GitHub repository is my source of truth.

97
00:06:28,674 --> 00:06:32,426
If I go back here, I have the terraform folder which is

98
00:06:32,448 --> 00:06:35,898
my infrastructure as code here. So in my case there is kind

99
00:06:35,904 --> 00:06:39,526
of like three parts. So there's a part where our platform lets

100
00:06:39,558 --> 00:06:43,086
you manage youll different git repository that

101
00:06:43,108 --> 00:06:46,878
are associated with your cluster. So in here if I go

102
00:06:46,884 --> 00:06:51,566
and repose tf I

103
00:06:51,588 --> 00:06:54,866
have two git repository that were created for me when I

104
00:06:54,888 --> 00:06:58,542
created my cluster and we use a terraform provider

105
00:06:58,606 --> 00:07:02,178
to manage and create those. If I go back here,

106
00:07:02,264 --> 00:07:05,970
I'm also managing my users directly from

107
00:07:06,120 --> 00:07:09,526
the git repo. And you may say like Fred, it's starting to be a little

108
00:07:09,548 --> 00:07:12,486
bit weird, but bear with me, I'm going to share a little more about the

109
00:07:12,508 --> 00:07:16,786
pros and cons of using that method. So here let's

110
00:07:16,818 --> 00:07:20,394
say I have a developers terraform file and I could

111
00:07:20,432 --> 00:07:24,330
have the developer one user directly by

112
00:07:24,480 --> 00:07:28,630
doing a commit on my git repository.

113
00:07:28,790 --> 00:07:33,046
And also there's a third part for us where we manage different secrets

114
00:07:33,078 --> 00:07:37,134
using Ashicorp vault that are all connected together to

115
00:07:37,252 --> 00:07:40,670
the application that are pre installed on your cluster. So that's just

116
00:07:40,740 --> 00:07:44,762
one way of having or defining the architecture

117
00:07:44,826 --> 00:07:48,626
of your githubs repository. This is what we've done. It's a

118
00:07:48,648 --> 00:07:52,386
culmination of a couple of years of experience and also based on

119
00:07:52,408 --> 00:07:56,486
the needs that we have to build our platform. So everything is

120
00:07:56,508 --> 00:08:00,930
there. It's the source of truth of my Kubernetes cluster

121
00:08:01,010 --> 00:08:04,614
right now. So let's go back to the

122
00:08:04,652 --> 00:08:09,030
slides and about

123
00:08:09,100 --> 00:08:12,938
that now. Okay, I introducing you a little bit

124
00:08:12,944 --> 00:08:16,790
about Githubs. Let me talk to you about the GitHubs principle.

125
00:08:16,870 --> 00:08:20,390
So I show you a little bit how it looks like compared to DevOps,

126
00:08:20,470 --> 00:08:24,270
but there's some principles. So Githubs, it's not a standard

127
00:08:24,420 --> 00:08:27,854
per se, but there is the open Gitops group that is

128
00:08:27,892 --> 00:08:31,566
working on some principle and usually

129
00:08:31,668 --> 00:08:35,550
people, when we talk about Gitops we try to follow those principles.

130
00:08:35,630 --> 00:08:38,770
So the first one is that it needs to be declarative.

131
00:08:39,110 --> 00:08:42,974
A system that is managed by GitHubs must have its desire

132
00:08:43,022 --> 00:08:46,834
state expressed declaratively. So everything should be

133
00:08:46,872 --> 00:08:50,646
in the git repository. It's kid of like another way to

134
00:08:50,668 --> 00:08:54,466
say that it should be version and immutable

135
00:08:54,578 --> 00:08:57,874
I don't know why I struggle with that word in English. So the desired state

136
00:08:58,012 --> 00:09:02,170
is basically stored in a way that enforce immutability.

137
00:09:03,470 --> 00:09:06,714
So the servers are never modified after the

138
00:09:06,752 --> 00:09:10,154
deploy in the sense that you don't go yourself there

139
00:09:10,192 --> 00:09:13,790
and modify stuff. It's version because

140
00:09:13,860 --> 00:09:17,754
you're using git and because you're using git, you retain

141
00:09:17,802 --> 00:09:21,486
a complete version history. So that's kind

142
00:09:21,508 --> 00:09:24,990
of like one of the benefit of GitHubs. It's pull

143
00:09:25,060 --> 00:09:28,240
automatically so you don't have to push information.

144
00:09:28,610 --> 00:09:32,094
It's really, there is software agents that automatically pull the desired

145
00:09:32,142 --> 00:09:35,778
state declaration from the source, and there's benefits for that.

146
00:09:35,864 --> 00:09:39,266
And there's some, maybe not costs, but you

147
00:09:39,288 --> 00:09:42,802
may see some part of it that may not be as beneficial.

148
00:09:42,866 --> 00:09:46,038
So I really want that talk, to be honest about GitHub. So I'm going to

149
00:09:46,124 --> 00:09:49,986
come back just right after about the pro and costs of using the GitHubs

150
00:09:50,018 --> 00:09:53,994
principle, or actually thinking about using GitHubs when

151
00:09:54,112 --> 00:09:57,674
going through your cloud native journey. And the fourth principle is

152
00:09:57,712 --> 00:10:01,226
continuously reconcile. So this is also one of the

153
00:10:01,248 --> 00:10:04,862
pros is that the software agents, because they continuous pull

154
00:10:04,916 --> 00:10:09,418
the information, they observe the actual state of your cluster versus

155
00:10:09,514 --> 00:10:12,926
the desire state that is in your git repository. So it

156
00:10:12,948 --> 00:10:16,626
would always attempt to apply the desired state. Hence the

157
00:10:16,648 --> 00:10:19,278
source of truth is being git.

158
00:10:19,454 --> 00:10:23,362
So there's the benefit about that, that I'm going to talk right

159
00:10:23,416 --> 00:10:27,166
now. So the benefits, when it comes about Githubs, it's really

160
00:10:27,288 --> 00:10:31,490
you're using familiar tools and processes, git, git workflows,

161
00:10:31,570 --> 00:10:34,982
those are the things that you hopefully already know and use

162
00:10:35,036 --> 00:10:38,714
day to day at work. There's also the benefits of infrastructure as

163
00:10:38,752 --> 00:10:42,218
code. Youll have the change history because of

164
00:10:42,224 --> 00:10:45,270
the file versioning, it's easy to revert.

165
00:10:45,350 --> 00:10:49,530
And there is the code change revision processes.

166
00:10:50,110 --> 00:10:53,834
In the best world scenario, you should always never commit

167
00:10:53,882 --> 00:10:57,534
directly on the repository. You should do a pr and someone from

168
00:10:57,572 --> 00:11:00,894
your team, at least one person from your team should review the

169
00:11:00,932 --> 00:11:03,818
changes. So that's really good for accountability.

170
00:11:03,914 --> 00:11:07,282
But also that's really good to be sure that you're not making

171
00:11:07,336 --> 00:11:11,186
some mistakes, because there is someone else who will look at your change.

172
00:11:11,368 --> 00:11:15,418
There's faster deployment and iteration, and it's

173
00:11:15,614 --> 00:11:19,154
easily reproducible because you have the secret

174
00:11:19,202 --> 00:11:22,486
source. Everything is in your git repository. There's also no

175
00:11:22,508 --> 00:11:25,974
cluster drift, which means difference over time

176
00:11:26,092 --> 00:11:29,862
because of server changes. So when we're doing DevOps,

177
00:11:29,926 --> 00:11:33,180
like maybe you had no clusters drift because

178
00:11:34,030 --> 00:11:38,006
everybody was already using your git repository as the source

179
00:11:38,038 --> 00:11:42,074
of truth. But if we want to be honest it's rarely the case.

180
00:11:42,112 --> 00:11:45,774
So sometimes there's an issue on the server side. There is an issue in

181
00:11:45,812 --> 00:11:48,686
something in pods and what are you going to do? You're going to go in

182
00:11:48,708 --> 00:11:52,330
the prod server and you're going to connect with SSH

183
00:11:52,410 --> 00:11:54,938
and you're going to try to fix things and that's going to work and it's

184
00:11:54,954 --> 00:11:58,050
going to be beautiful and you're going to forget about it.

185
00:11:58,200 --> 00:12:02,082
So you have a change that is important for production, that is only

186
00:12:02,136 --> 00:12:06,790
on the production server. But now because everything goes through youll Githubs repository,

187
00:12:07,610 --> 00:12:10,434
everything is there. So there's nothing on the server.

188
00:12:10,562 --> 00:12:14,694
So you're not losing changes. There is no cluster drift as I

189
00:12:14,732 --> 00:12:19,530
said. From my point of view it really brings greater collaboration,

190
00:12:19,870 --> 00:12:23,162
auditability and simplification of access control.

191
00:12:23,296 --> 00:12:26,262
Again always coming back about the source of truth.

192
00:12:26,406 --> 00:12:29,642
I see this as more secure because there is no need

193
00:12:29,696 --> 00:12:32,240
for individual infrastructure access.

194
00:12:33,730 --> 00:12:37,374
There's also no need for your CD pipeline to

195
00:12:37,412 --> 00:12:40,778
have access to your Kubernetes clusters because it's

196
00:12:40,794 --> 00:12:44,082
the other way around. We're not pushing things,

197
00:12:44,136 --> 00:12:47,986
we're pulling things inside the cluster. There is more transparency because all

198
00:12:48,008 --> 00:12:51,460
the git manipulation and as I said,

199
00:12:52,390 --> 00:12:56,246
these agents are running inside the cluster so no need for

200
00:12:56,268 --> 00:12:59,846
the CD to have access to the server. When we

201
00:12:59,868 --> 00:13:03,414
think about Githubs too, there's the cost saving because

202
00:13:03,452 --> 00:13:06,658
there's the automation part versus the manual execution,

203
00:13:06,834 --> 00:13:10,358
deployment testing, easily reverting or rollback

204
00:13:10,454 --> 00:13:13,382
some changes so it's prone to less error.

205
00:13:13,526 --> 00:13:18,726
And as I said, it's also easily revert

206
00:13:18,758 --> 00:13:22,302
like you can easily reproduce and revert also I would

207
00:13:22,356 --> 00:13:25,786
argue that there is some cost saving there and it's

208
00:13:25,818 --> 00:13:30,074
also a great approach for a simple stateless disaster recovery

209
00:13:30,122 --> 00:13:33,754
model because there is no server

210
00:13:33,802 --> 00:13:37,620
state. There is only like the source of truth state.

211
00:13:38,070 --> 00:13:41,794
If I want to be honest there are some challenges or maybe

212
00:13:41,832 --> 00:13:45,230
we could even say some cons when it cases to Gitops.

213
00:13:45,310 --> 00:13:49,094
So the learning curve can be a little bit steep. Especially if you have

214
00:13:49,132 --> 00:13:52,774
no knowledge of Git, if you have no real knowledge of infrastructure as

215
00:13:52,812 --> 00:13:56,726
code or some of the best practices, or maybe you're not

216
00:13:56,748 --> 00:14:01,210
even totally familiar with DevOps approach.

217
00:14:02,670 --> 00:14:05,946
What I see as a benefit, some people could see this as like a

218
00:14:05,968 --> 00:14:09,882
challenger accounts because there's more layer of approval because

219
00:14:09,936 --> 00:14:13,510
everything goes through git. So in cherry, as I said before,

220
00:14:13,680 --> 00:14:18,014
if my team was there they would be like no Fred, don't like when

221
00:14:18,052 --> 00:14:21,246
you commit directly on the repo. Sometimes we do this

222
00:14:21,268 --> 00:14:24,846
in demo and live stream and I'm always complaining and I say

223
00:14:24,868 --> 00:14:27,546
that I'm going to do that in my demo right now just for the sake

224
00:14:27,578 --> 00:14:30,882
of time. But like in a day to day in production, when you work

225
00:14:30,936 --> 00:14:33,874
on your product, you should not do that. So you do a pr, someone will

226
00:14:33,912 --> 00:14:37,494
review your changes at all level, on the infrastructure side,

227
00:14:37,532 --> 00:14:41,314
on the application side, or everything you need to run your cluster.

228
00:14:41,442 --> 00:14:45,302
So it means more approval, but it also

229
00:14:45,356 --> 00:14:49,046
brings all the benefits that I said before. It can be a little bit harder

230
00:14:49,078 --> 00:14:53,034
to customize the process. It's kubernetes centric, as I

231
00:14:53,072 --> 00:14:56,362
was saying before, and things can go

232
00:14:56,416 --> 00:14:59,894
wrong between the source of truth and the CD action.

233
00:14:59,942 --> 00:15:02,846
So it depends on the tech you use.

234
00:15:02,948 --> 00:15:06,842
And you know what, lastly, it's not magic. It doesn't

235
00:15:06,906 --> 00:15:10,334
fix bad practices. So I'm sorry about that.

236
00:15:10,452 --> 00:15:13,998
I know you were maybe hoping for some magic solution. When it comes to Githubs,

237
00:15:14,014 --> 00:15:17,554
it's not the case. So obviously it's just

238
00:15:17,592 --> 00:15:21,266
a tool. But I firmly believe that it's a tool that

239
00:15:21,368 --> 00:15:24,914
really helps you to have

240
00:15:24,952 --> 00:15:28,402
a better cloud native journey and ensure

241
00:15:28,466 --> 00:15:32,134
that your processes in place are helping you moving

242
00:15:32,172 --> 00:15:35,766
forward and be successful in your endeavor. So let

243
00:15:35,788 --> 00:15:38,906
me show you a little bit more how this is exactly

244
00:15:39,008 --> 00:15:43,782
working. So let me go back to my browser

245
00:15:43,846 --> 00:15:47,306
here and you're going

246
00:15:47,328 --> 00:15:51,034
to see here I'm in ergo CD, so it's fine if you

247
00:15:51,072 --> 00:15:54,686
don't really know Argo CD. It's one

248
00:15:54,708 --> 00:15:58,394
of the tools that we really like out there. There's like Flux CD.

249
00:15:58,442 --> 00:16:02,314
There's other tools out there that help you to manage your githubs

250
00:16:02,362 --> 00:16:05,946
and your CD pipeline when it comes to managing githubs.

251
00:16:05,978 --> 00:16:09,886
But we decided to use argu. This is the tool we town, we liked

252
00:16:09,918 --> 00:16:14,174
it. And if I go here and I search for an application called Flappy,

253
00:16:14,302 --> 00:16:18,146
it does not exist and it's normal because it does not exist.

254
00:16:18,258 --> 00:16:22,770
So what I'm going to do here, I'm going to go in my registry folder,

255
00:16:22,930 --> 00:16:27,286
I'm going to go here and I'm going to say I want to add

256
00:16:27,468 --> 00:16:30,838
new file. So had file create new file,

257
00:16:31,014 --> 00:16:35,238
call this flappy Yaml. And I'm going to be lazy.

258
00:16:35,414 --> 00:16:38,746
I have my shortcut here. As you can see, it's a

259
00:16:38,768 --> 00:16:42,442
YAml declaration for an application called Flappy Bird

260
00:16:42,586 --> 00:16:46,734
that's going to take a chart and install a version of

261
00:16:46,852 --> 00:16:50,330
it's basically flappy bird. We rename it to Flappy Q array.

262
00:16:50,410 --> 00:16:54,174
And I have my ingress route here because

263
00:16:54,212 --> 00:16:57,430
I want to be able to access it with flappykara

264
00:16:57,530 --> 00:17:01,330
Q first dev. So if you want to try this at home

265
00:17:01,480 --> 00:17:05,874
I can share your link if you share with me but that link won't

266
00:17:05,922 --> 00:17:09,862
work because I'm doing this on a local clusters on key 3d

267
00:17:09,916 --> 00:17:12,770
right now. So I'm going to do the unthinkable.

268
00:17:12,930 --> 00:17:17,606
I'm going to commit directly on

269
00:17:17,628 --> 00:17:20,070
the main branch. So had flappy,

270
00:17:21,050 --> 00:17:24,454
flappy k ray and I'm going to commit directly

271
00:17:24,502 --> 00:17:27,834
here, I'm going to save that and what I'm going to go

272
00:17:27,872 --> 00:17:31,286
back here so I'm going to refresh CD,

273
00:17:31,478 --> 00:17:36,654
I'm going to go actually youll should have probably check in the

274
00:17:36,692 --> 00:17:40,826
registry before so I'm going to be sure to sync.

275
00:17:40,858 --> 00:17:44,802
So it should sync automatically. I think the default is streaming it, I never remember.

276
00:17:44,936 --> 00:17:48,834
So if I synchronize that I should see at

277
00:17:48,872 --> 00:17:52,338
some point here, oh registry, something is working

278
00:17:52,424 --> 00:17:56,114
here. I should see my flappy key ray here.

279
00:17:56,152 --> 00:17:59,526
It's out of sync so it's syncing right now and

280
00:17:59,708 --> 00:18:03,160
if I give it a little bit of time. So what's happening here?

281
00:18:03,690 --> 00:18:07,014
The applications would be exactly here. So what's happening here is

282
00:18:07,052 --> 00:18:11,418
that flappy is being out of sync. So youll know where I was thinking about

283
00:18:11,584 --> 00:18:16,118
trying to get always the latest state. So Hargo CD

284
00:18:16,294 --> 00:18:19,866
checked my git repository, realized that the

285
00:18:19,888 --> 00:18:23,180
application was deleted. It's not something that should happen.

286
00:18:23,950 --> 00:18:27,806
So sometimes Hargo CD is

287
00:18:27,828 --> 00:18:31,294
doing some weird stuff but the application

288
00:18:31,412 --> 00:18:34,640
will come back right away. So if I

289
00:18:35,090 --> 00:18:39,060
just fire sync again that should be back

290
00:18:39,830 --> 00:18:43,518
and we should see flappy key ray.

291
00:18:43,694 --> 00:18:47,430
I don't know how to. Yeah, flappy here. Something's going to happen here

292
00:18:47,580 --> 00:18:50,360
in a second. It's going to be here.

293
00:18:51,050 --> 00:18:54,614
There we go, flappy now let's go see. So it

294
00:18:54,652 --> 00:18:58,790
should be in the process of being deploying,

295
00:18:59,370 --> 00:19:02,038
going to refresh. That still happening.

296
00:19:02,124 --> 00:19:05,690
It's out of sync. And what I can go here, I can check the diff

297
00:19:05,840 --> 00:19:09,194
and you're going to see that there's a difference. So it's not deployed yet.

298
00:19:09,232 --> 00:19:12,118
There's a lot of difference. But the job of ergo CD,

299
00:19:12,214 --> 00:19:16,890
as I was starting to explain, is that it will check on my git repository,

300
00:19:17,050 --> 00:19:20,574
it will look at the information that is there, it will

301
00:19:20,612 --> 00:19:23,902
compare to what's deployed on my cluster and it

302
00:19:23,956 --> 00:19:27,634
should update the registry. Oh,

303
00:19:27,672 --> 00:19:32,290
what happened here? So it's still syncing and

304
00:19:32,360 --> 00:19:35,862
we should see something. So what's going to happen now? Let me just

305
00:19:35,916 --> 00:19:39,478
go back to the presentation part

306
00:19:39,644 --> 00:19:43,286
and we'll come back to. Oh, actually I

307
00:19:43,308 --> 00:19:47,190
think it's good now. I think he was able to deploy.

308
00:19:47,530 --> 00:19:51,546
If I go here and I access Flappy Kray, it's a

309
00:19:51,568 --> 00:19:55,126
page not found. So what's

310
00:19:55,158 --> 00:19:58,234
happening here? I don't know what's happening here.

311
00:19:58,432 --> 00:20:00,880
Let me check what's happening.

312
00:20:02,050 --> 00:20:05,390
Maybe I made a mistake with my yaml file.

313
00:20:06,050 --> 00:20:09,600
So it's sync. Oh, I know

314
00:20:10,370 --> 00:20:14,100
what's happening. I know what's happening.

315
00:20:15,030 --> 00:20:18,450
This should be good. The chart version,

316
00:20:19,270 --> 00:20:23,010
flappy Kara. If I check the certificate,

317
00:20:23,910 --> 00:20:27,350
should be good. That's out of sync.

318
00:20:27,930 --> 00:20:31,480
There we go. Not sure what happened here.

319
00:20:31,930 --> 00:20:34,950
So now it's syncing, it's installing.

320
00:20:35,530 --> 00:20:40,090
Going to give it a couple of seconds and

321
00:20:40,160 --> 00:20:43,274
everything should be good now. Oh my God.

322
00:20:43,472 --> 00:20:46,906
So little live demo problem.

323
00:20:47,088 --> 00:20:50,970
And now I have my kray application that's been

324
00:20:51,040 --> 00:20:54,902
installed from my argo,

325
00:20:54,966 --> 00:20:58,990
actually from my GitHub server. I shouldn't play and try to explain something because

326
00:20:59,060 --> 00:21:03,474
it's obviously not working. I cannot do the same two

327
00:21:03,512 --> 00:21:07,330
things at the same time. So let me go back to my

328
00:21:07,400 --> 00:21:11,122
talk. So youll see,

329
00:21:11,256 --> 00:21:15,066
you see, I install the application by heading

330
00:21:15,118 --> 00:21:18,674
a Yaml file and argo CD.

331
00:21:18,722 --> 00:21:22,150
Fetch it from the GitHub steps repository, install it,

332
00:21:22,220 --> 00:21:26,262
deploy it with one small hiccup because that was a

333
00:21:26,316 --> 00:21:30,214
quote unquote live demo. So some resources

334
00:21:30,342 --> 00:21:34,540
if you're starting your Githubs journey, there is the

335
00:21:36,750 --> 00:21:39,100
open GitHubs slash project.

336
00:21:39,630 --> 00:21:43,206
This is the open GitHub project or

337
00:21:43,248 --> 00:21:47,134
working group that I was talking before. So really a good place to start to

338
00:21:47,172 --> 00:21:51,502
learn more about the GitHubs principle or to just to get more information about

339
00:21:51,556 --> 00:21:55,410
it. A great repository from weaveworks. It's awesome

340
00:21:55,480 --> 00:21:58,962
GitHub. So if you know the awesome repository that you

341
00:21:59,016 --> 00:22:02,580
usually have on GitHub, there are a bunch of

342
00:22:03,270 --> 00:22:06,514
awesome resources about specific topics. So this one is

343
00:22:06,552 --> 00:22:10,230
a pretty good one too. And youll obviously

344
00:22:10,380 --> 00:22:14,054
I need to say it if you want to replicate and start to play

345
00:22:14,092 --> 00:22:18,054
with Githubs, we have an open source product that is free.

346
00:22:18,252 --> 00:22:22,214
It's available@GitHub.com cube first slash Cube

347
00:22:22,262 --> 00:22:25,626
first, because the name of the project is the name of the company and

348
00:22:25,728 --> 00:22:29,100
youll can try it on AWS Google Cloud,

349
00:22:29,470 --> 00:22:33,226
which is actually in beta right now. But like AWS and Sivo,

350
00:22:33,338 --> 00:22:37,086
they are production ready and we have support for

351
00:22:37,188 --> 00:22:40,798
Google Cloud. Digital vulture, they're in beta right now, but they're going

352
00:22:40,804 --> 00:22:44,158
to get out to beta really soon. And you can also,

353
00:22:44,244 --> 00:22:47,566
if you don't want to go on the cloud right now and pay for resources

354
00:22:47,598 --> 00:22:51,554
to learn about Githubs. We have the key 3d experience that you can

355
00:22:51,592 --> 00:22:54,494
also use locally. You just need to have Docker, desktop,

356
00:22:54,622 --> 00:22:58,566
everything is in the documentation, so feel free to use that. So I

357
00:22:58,588 --> 00:23:01,462
forgot to remove that slide. It's a recording of the talk.

358
00:23:01,516 --> 00:23:05,638
It's not a live conference. But if you have any question,

359
00:23:05,804 --> 00:23:09,526
don't stop there. It's not because you're watching a recording of that talk that you

360
00:23:09,548 --> 00:23:13,038
need to stop there so youll can go on Qfirst IO

361
00:23:13,154 --> 00:23:16,906
slack. We have a GitHubs channel and you don't even have

362
00:23:16,928 --> 00:23:20,026
to use our product. It's just like, if you have questions about Githubs, if you

363
00:23:20,048 --> 00:23:23,770
have question about the things that I've said during my talk, youll go there.

364
00:23:23,840 --> 00:23:27,550
We're just passionate people about the Githubs principle. We're going to help you again,

365
00:23:27,620 --> 00:23:31,434
even if you don't use youll product. We're just that kind of friendly

366
00:23:31,482 --> 00:23:34,862
people. And also, if you don't want to go

367
00:23:34,996 --> 00:23:38,386
in the Slack channel because I don't know, you're afraid that I'm going to try

368
00:23:38,408 --> 00:23:41,874
to sell you how to use our product, you can always contact me,

369
00:23:41,912 --> 00:23:45,822
send me an email, fred at kubefirst IO, ping me on Twitter,

370
00:23:45,966 --> 00:23:49,830
I spend some time there. Or you can even connect

371
00:23:49,900 --> 00:23:53,174
with me on LinkedIn. And if you prefer face to

372
00:23:53,212 --> 00:23:56,566
face, unless you live in Montreal, in Canada, where I

373
00:23:56,588 --> 00:24:00,166
live, where if it's the case, I would be more than happy to go

374
00:24:00,188 --> 00:24:04,086
for coffee with you. But if you don't, we can have like virtual coffee

375
00:24:04,118 --> 00:24:07,862
chat. So you go on Fred devcoffee,

376
00:24:08,006 --> 00:24:11,354
and you're going to have access to my calendar and you can book a

377
00:24:11,392 --> 00:24:14,654
free 30 minutes discussion with me. We can talk about

378
00:24:14,692 --> 00:24:18,846
Githubs. We can talk about anything you want. I'm just

379
00:24:18,948 --> 00:24:22,062
a social person, and if there is a way for you,

380
00:24:22,196 --> 00:24:25,534
for me actually to help you, I'm going to be more than

381
00:24:25,572 --> 00:24:29,086
happy to do that. So on that note, I hope it helps you

382
00:24:29,108 --> 00:24:32,766
to learn a little more about Githubs. And hopefully that's going to

383
00:24:32,788 --> 00:24:36,038
be, and hopefully that's going to

384
00:24:36,044 --> 00:24:39,574
be a principle that you will be able to use in your

385
00:24:39,612 --> 00:24:43,126
day to day at work. So on that note, have a good rest of the

386
00:24:43,148 --> 00:24:43,410
conference.

