1
00:00:17,690 --> 00:00:21,178
Hello everyone, welcome to this session. So today I'm

2
00:00:21,194 --> 00:00:24,494
going to talk about performance. I'm going to talk about how

3
00:00:24,532 --> 00:00:27,782
we can to reduce the

4
00:00:27,836 --> 00:00:31,606
pressure on the main thread and make it

5
00:00:31,788 --> 00:00:34,840
more reliable to work with our application.

6
00:00:36,490 --> 00:00:40,522
So let's move on and see

7
00:00:40,576 --> 00:00:44,554
what we can do today. The idea of this

8
00:00:44,592 --> 00:00:48,460
talk actually came to my mind when I was actually researching about

9
00:00:50,370 --> 00:00:53,834
number of users who are connected to Internet.

10
00:00:53,882 --> 00:00:57,482
And I realized that by maybe 2018 or 19

11
00:00:57,546 --> 00:01:00,974
something, the number of connected people around the

12
00:01:01,012 --> 00:01:04,722
world was 50% of the population of the world.

13
00:01:04,856 --> 00:01:08,958
But however, this year it's actually increasing

14
00:01:09,054 --> 00:01:12,530
to around 60%,

15
00:01:12,600 --> 00:01:16,518
like 10% more. And these numbers is

16
00:01:16,604 --> 00:01:19,958
getting increased every year, right?

17
00:01:20,044 --> 00:01:23,846
So more people are joining to Internet and

18
00:01:24,028 --> 00:01:27,670
in fact many of them join to Internet

19
00:01:28,110 --> 00:01:31,514
or they have already joined the

20
00:01:31,552 --> 00:01:35,580
Internet and use Internet via their mobile phone.

21
00:01:36,430 --> 00:01:40,482
And when it says mobile phone, it immediately

22
00:01:40,566 --> 00:01:43,680
come to my mind that, okay,

23
00:01:44,130 --> 00:01:47,678
then it's not only one type of phone,

24
00:01:47,764 --> 00:01:51,214
it's probably a lot of different type of phones. And some

25
00:01:51,252 --> 00:01:55,314
of them are quite good, quite advanced and

26
00:01:55,432 --> 00:01:58,654
working very fast and some of them doesn't

27
00:01:58,702 --> 00:02:02,606
work very well, right? So they are smartphone

28
00:02:02,718 --> 00:02:06,246
nice looking, but in terms of hardware, they don't have

29
00:02:06,268 --> 00:02:10,166
a good hardware. So in fact we can actually have

30
00:02:10,188 --> 00:02:14,694
an example here. So Nokia Two or Nokia 2.1

31
00:02:14,732 --> 00:02:18,066
in this case and iPhone are two

32
00:02:18,108 --> 00:02:22,646
good smartphones, right? So one of them are quite powerful

33
00:02:22,758 --> 00:02:26,346
and you can run many things without any problem on

34
00:02:26,368 --> 00:02:29,802
that. But another one, Nokia two, although it's very

35
00:02:29,856 --> 00:02:33,710
good phone, cheap and it's running

36
00:02:33,780 --> 00:02:37,118
Android, probably the latest version, it's quite

37
00:02:37,284 --> 00:02:40,910
reasonable. However, it has

38
00:02:41,060 --> 00:02:44,542
not has powerful as iPhone. So you're building

39
00:02:44,596 --> 00:02:47,502
in a web application for both of these phones.

40
00:02:47,646 --> 00:02:51,506
So it is important to test on both of them. So we

41
00:02:51,528 --> 00:02:55,722
don't want to actually give our user this page, the famous unresponsive

42
00:02:55,806 --> 00:02:59,590
page, while we are doing some task.

43
00:03:00,410 --> 00:03:03,682
So this is not only for mobile,

44
00:03:03,746 --> 00:03:07,746
this is also for desktop users. And that's

45
00:03:07,778 --> 00:03:10,714
why actually we are building these days progressive web app,

46
00:03:10,752 --> 00:03:14,134
right? So we want to actually make sure what we are delivering,

47
00:03:14,182 --> 00:03:17,306
we are delivering to our customer as best as possible,

48
00:03:17,488 --> 00:03:21,278
regardless of what type of browser or what type of

49
00:03:21,364 --> 00:03:23,360
hardware they are using, right?

50
00:03:25,170 --> 00:03:28,942
But what we can do, what can we do in this

51
00:03:28,996 --> 00:03:32,782
case? So it is very important for

52
00:03:32,836 --> 00:03:36,434
us to care about our clients and

53
00:03:36,472 --> 00:03:39,646
that's the most important things we have to do as a developer.

54
00:03:39,758 --> 00:03:43,854
Our clients could be an end user client, could be our product manager

55
00:03:43,902 --> 00:03:47,014
or whoever, right? So we need to care about them.

56
00:03:47,052 --> 00:03:50,280
So we need to think about how they are running our application.

57
00:03:51,370 --> 00:03:54,978
So in this talk, what we're

58
00:03:54,994 --> 00:03:58,998
going to do, we're going to actually explore three different possibilities.

59
00:03:59,094 --> 00:04:04,774
Web workers, an old way of handling multithreading

60
00:04:04,822 --> 00:04:08,630
in browsers, but differently

61
00:04:08,710 --> 00:04:12,062
in this talk, and we're going to talk about webassembly and

62
00:04:12,116 --> 00:04:16,030
worklets. So we're going to see what they are,

63
00:04:16,100 --> 00:04:19,914
and I'm going to actually give you practical

64
00:04:20,042 --> 00:04:24,058
tips so how you can use these tools easier,

65
00:04:24,234 --> 00:04:27,682
and I will actually remove this

66
00:04:27,736 --> 00:04:31,234
question in your mind. No, I'm not able to do that. You can

67
00:04:31,272 --> 00:04:35,640
do that, you can use that, we'll see that. But let me introduce myself.

68
00:04:37,370 --> 00:04:40,402
My name is Majid Hajian, I'm based in Oslo.

69
00:04:40,466 --> 00:04:44,626
I'm a software engineer, passionate developer, and in my spare time I'm

70
00:04:44,658 --> 00:04:47,818
doing a lot of conference and meetup organizing. I'm an

71
00:04:47,824 --> 00:04:52,214
instructor, speaking quite a lot, especially about flutter

72
00:04:52,262 --> 00:04:54,730
and PWA and performance.

73
00:04:55,630 --> 00:04:59,334
I'm also author of progressive

74
00:04:59,382 --> 00:05:03,274
web app with angular book, published by apps, and progressive

75
00:05:03,322 --> 00:05:08,538
web apps development, published by Pacpub.

76
00:05:08,634 --> 00:05:12,640
So let's move on. So in fact, when we are talking about

77
00:05:13,090 --> 00:05:16,674
main thread, we know that

78
00:05:16,712 --> 00:05:19,490
in the main thread there are a lot of stuff is happening,

79
00:05:19,640 --> 00:05:23,586
right? So for instance, in the

80
00:05:23,608 --> 00:05:27,874
main thread we have events, so even loops.

81
00:05:27,922 --> 00:05:31,400
For instance we have Javascript execution, we have

82
00:05:31,770 --> 00:05:35,074
styling, we have like layouting in the browser,

83
00:05:35,122 --> 00:05:38,390
we have paint and compositing.

84
00:05:38,890 --> 00:05:42,570
All of these happening in the main thread. And in fact

85
00:05:42,640 --> 00:05:46,762
a few years ago, maybe when the websites were not that

86
00:05:46,816 --> 00:05:50,890
complex, running all of these tasks in the main thread

87
00:05:50,970 --> 00:05:54,586
while it was okay, but these days we are adding

88
00:05:54,618 --> 00:05:58,800
a lot of more APIs to our application,

89
00:05:59,170 --> 00:06:02,798
we are adding a

90
00:06:02,804 --> 00:06:05,562
lot of complex tasks to main thread.

91
00:06:05,626 --> 00:06:08,878
So that's why our main thread is overwhelmed.

92
00:06:08,974 --> 00:06:13,550
So it's a lot of things that we are putting on its shoulder

93
00:06:13,630 --> 00:06:16,900
and sometimes it's getting tired, right.

94
00:06:19,910 --> 00:06:23,526
We are expecting main thread doing all of those tasks and

95
00:06:23,548 --> 00:06:27,742
delivering 60 FPS. So that means scroll

96
00:06:27,826 --> 00:06:32,326
must be very smooth, the website must be interactive,

97
00:06:32,438 --> 00:06:36,570
and no janky frame. Okay? Of course.

98
00:06:36,640 --> 00:06:40,070
But let me do a calculation

99
00:06:40,150 --> 00:06:43,820
here. Do the math. Imagine that

100
00:06:44,290 --> 00:06:48,202
you want to actually run 60 frames

101
00:06:48,266 --> 00:06:51,934
into 1 second, and that means what? The budget that

102
00:06:51,972 --> 00:06:57,010
you have is almost 16.6

103
00:06:57,160 --> 00:07:00,514
milliseconds, right? So what does that mean?

104
00:07:00,552 --> 00:07:04,482
That means with this budget, if you run one

105
00:07:04,536 --> 00:07:08,342
task, similar task on three different phones with three

106
00:07:08,396 --> 00:07:11,974
different hardware spec. So in one

107
00:07:12,012 --> 00:07:15,190
phone you may not reach the budget,

108
00:07:15,610 --> 00:07:19,290
but in another phone you may reach to the budget or maybe

109
00:07:19,360 --> 00:07:22,602
overpass it. So this is very important

110
00:07:22,736 --> 00:07:26,262
then to test what we are going to deliver.

111
00:07:26,406 --> 00:07:30,300
And in fact this is not just about

112
00:07:31,650 --> 00:07:35,690
when actually we are going to add screen Hertz,

113
00:07:35,770 --> 00:07:39,786
like 60,

114
00:07:39,898 --> 00:07:44,062
that's even worse. So that

115
00:07:44,116 --> 00:07:47,182
means like in 90 FPS,

116
00:07:47,326 --> 00:07:51,326
for instance, we have around eleven

117
00:07:51,518 --> 00:07:54,834
milliseconds, or in 120 we have

118
00:07:54,872 --> 00:07:58,370
maybe around eight milliseconds. Like the budget is shrinking

119
00:07:58,450 --> 00:08:02,134
down because we want to actually deliver more

120
00:08:02,172 --> 00:08:06,102
frames and make it more smooth, right? And that brings the

121
00:08:06,156 --> 00:08:08,700
unpredictability on our application.

122
00:08:09,390 --> 00:08:13,578
It runs well in one browser or one desktop or

123
00:08:13,664 --> 00:08:17,306
a screen or device, and it doesn't work properly in

124
00:08:17,328 --> 00:08:20,766
other one. So we want to actually

125
00:08:20,868 --> 00:08:23,966
get rid of this unpredictability and make our

126
00:08:23,988 --> 00:08:26,960
application more predictable, right?

127
00:08:27,730 --> 00:08:31,946
We as a developer are responsible

128
00:08:32,138 --> 00:08:34,100
for doing such a things.

129
00:08:34,630 --> 00:08:38,318
So we need to let our main thread

130
00:08:38,414 --> 00:08:42,066
have enough space and error to just run the

131
00:08:42,088 --> 00:08:45,134
task. And if it's not enough space,

132
00:08:45,272 --> 00:08:49,666
we need to use other tools or other APIs or other threats,

133
00:08:49,778 --> 00:08:54,054
let's say here, to relieve these tasks from

134
00:08:54,172 --> 00:08:57,400
main thread to that other threat, right?

135
00:08:57,710 --> 00:09:01,450
But one of the options, which is

136
00:09:01,520 --> 00:09:05,434
with us since maybe 2012, is stable on

137
00:09:05,472 --> 00:09:09,562
many browsers, like almost all browsers, they support that very

138
00:09:09,616 --> 00:09:13,582
well. It's web workers, right? Web workers are

139
00:09:13,636 --> 00:09:17,440
quite famous, we know them. So web workers works like

140
00:09:18,290 --> 00:09:22,094
almost like a headless version of your browser. It seems

141
00:09:22,132 --> 00:09:25,300
like you're opening a tab, but it's headless, right?

142
00:09:25,910 --> 00:09:28,580
It has some characteristic for sure.

143
00:09:29,670 --> 00:09:33,394
It's isolated. There is no

144
00:09:33,512 --> 00:09:37,218
variable that we can share, it's because it's isolated.

145
00:09:37,314 --> 00:09:41,510
And of course we don't have access to Dom,

146
00:09:44,970 --> 00:09:48,662
they can also run in parallel. So if you have several

147
00:09:48,726 --> 00:09:52,086
cpus core, then browser may decide

148
00:09:52,118 --> 00:09:56,330
to run it in different core at the same time. So then we get

149
00:09:56,400 --> 00:09:59,930
parallelism, right? So let's quickly

150
00:10:00,000 --> 00:10:03,102
look at the web workers. The web worker right? Now,

151
00:10:03,236 --> 00:10:06,986
how it works is that when you instantiate

152
00:10:07,018 --> 00:10:10,174
the web worker, you actually spawning a new

153
00:10:10,212 --> 00:10:13,634
instance of like Javascript engine for instance. So it has

154
00:10:13,752 --> 00:10:17,022
its own event loop or message queue.

155
00:10:17,086 --> 00:10:20,354
It works similar to main thread. And the way that we

156
00:10:20,392 --> 00:10:23,940
work with that is via post messaging, right?

157
00:10:24,390 --> 00:10:27,766
And post messaging could be a string and could be

158
00:10:27,788 --> 00:10:31,782
like something that is actually stopping us to

159
00:10:31,836 --> 00:10:36,050
use this tools,

160
00:10:36,130 --> 00:10:39,850
for instance, for us, right? And why? Because,

161
00:10:40,000 --> 00:10:43,980
well, working with post messaging is not as

162
00:10:45,070 --> 00:10:50,654
interesting as it should be, right? But it

163
00:10:50,692 --> 00:10:54,320
will be very interesting if we can actually see

164
00:10:56,130 --> 00:11:00,062
like a promisified version of this post

165
00:11:00,116 --> 00:11:04,402
messaging system. Let's say for instance, we just call a function from

166
00:11:04,456 --> 00:11:09,010
main thread directly to worker thread

167
00:11:09,430 --> 00:11:12,834
and then it's promised and then we are familiar with

168
00:11:12,872 --> 00:11:16,562
that, right? So this is the way that we work with Javascript

169
00:11:16,626 --> 00:11:19,122
application these days. Quite familiar pattern,

170
00:11:19,186 --> 00:11:22,534
right? So in fact there is

171
00:11:22,572 --> 00:11:25,640
a library that can help to do that.

172
00:11:26,090 --> 00:11:29,450
So comlink is a library from Google developer

173
00:11:30,270 --> 00:11:33,994
team, so that they are making this

174
00:11:34,032 --> 00:11:37,594
post messaging system to use the

175
00:11:37,632 --> 00:11:41,710
proxy and promisify it for us.

176
00:11:41,860 --> 00:11:45,440
So how it works is that it's quite easy.

177
00:11:45,810 --> 00:11:49,694
So imagine that you have your main thread, you just want to instantiate your

178
00:11:49,732 --> 00:11:53,342
worker. You need to wrap actually your worker with

179
00:11:53,396 --> 00:11:57,220
comlink. And once you wrap you can immediately call

180
00:11:57,830 --> 00:12:01,454
the function that you defined in your worker thread.

181
00:12:01,582 --> 00:12:05,186
So in this case, so I have

182
00:12:05,288 --> 00:12:09,174
two function here which I exposed from my

183
00:12:09,212 --> 00:12:12,246
worker thread via come link and now I

184
00:12:12,268 --> 00:12:16,278
can directly call that in my main thread and awaits for that.

185
00:12:16,364 --> 00:12:20,154
And it's because it's just promise and then I can do whatever I want.

186
00:12:20,272 --> 00:12:24,090
Fairly simple, right? It's amazing. So that makes

187
00:12:24,160 --> 00:12:27,834
our life as a developer easier. So we can

188
00:12:27,952 --> 00:12:32,142
just now use web

189
00:12:32,196 --> 00:12:35,946
workers as easy as we are expecting.

190
00:12:36,138 --> 00:12:40,080
So in fact, in this example you'll see that

191
00:12:40,930 --> 00:12:44,286
I have a react application for instance, and I'm

192
00:12:44,318 --> 00:12:48,434
actually spanning a new worker and wrap it with for

193
00:12:48,472 --> 00:12:52,066
instance link. And then I

194
00:12:52,088 --> 00:12:55,266
can actually set state or do something

195
00:12:55,368 --> 00:12:58,998
with my worker. For instance, if I have a sorting function

196
00:12:59,084 --> 00:13:03,046
which takes time because it's just synchronous and I

197
00:13:03,068 --> 00:13:06,294
want to just sort some list and it takes time so I can just

198
00:13:06,332 --> 00:13:09,834
expound this worker and put

199
00:13:09,872 --> 00:13:13,798
this business task to the worker. And once it's

200
00:13:13,814 --> 00:13:17,894
done, I'm just awaiting for that, receiving the respond

201
00:13:18,022 --> 00:13:21,306
or the data sorted data, and then I can

202
00:13:21,328 --> 00:13:24,986
set my state. Of course, remember that once you're

203
00:13:25,018 --> 00:13:28,314
done with your worker, it's nice to terminate

204
00:13:28,362 --> 00:13:32,366
them in order to clean up your stuff.

205
00:13:32,548 --> 00:13:35,978
But you may ask, okay, what kind of

206
00:13:36,004 --> 00:13:39,634
things we can do with worker? You're talking about worker, you made our life

207
00:13:39,672 --> 00:13:42,962
easier with this library, but what can we do? Can I

208
00:13:43,016 --> 00:13:46,886
put everything in worker? Well, the main question

209
00:13:46,988 --> 00:13:50,520
for you when it comes to using web worker is that

210
00:13:51,690 --> 00:13:55,318
does this task, this business logic needs

211
00:13:55,404 --> 00:13:59,362
UI, or if it doesn't need that, then does

212
00:13:59,436 --> 00:14:03,514
this task actually can

213
00:14:03,632 --> 00:14:07,594
be run in another thread and I can wait

214
00:14:07,632 --> 00:14:11,530
for that and then do something with UI.

215
00:14:11,690 --> 00:14:15,790
In fact, my logic of application, my business logic,

216
00:14:16,130 --> 00:14:20,110
my application could go to the other thread and once the data

217
00:14:20,180 --> 00:14:22,640
back I can just change the UI, right?

218
00:14:24,310 --> 00:14:27,714
It's interesting because we can say in this case, main thread is

219
00:14:27,752 --> 00:14:31,102
like a UI thread, you just do your UI

220
00:14:31,166 --> 00:14:35,206
changes manipulation and then you'd run in

221
00:14:35,228 --> 00:14:39,014
a different thread, business logic, right? So one

222
00:14:39,052 --> 00:14:42,534
example for you, probably you're familiar already with

223
00:14:42,572 --> 00:14:45,250
redux pattern, especially if you are for instance,

224
00:14:45,330 --> 00:14:49,466
react developer. So you

225
00:14:49,488 --> 00:14:52,586
have redux. And if you don't know, let me quickly explain.

226
00:14:52,688 --> 00:14:55,846
So you have one global and universal

227
00:14:55,958 --> 00:14:58,300
store, and then that has in an,

228
00:14:59,970 --> 00:15:03,854
in your UI you dispatch some action, and then action goes

229
00:15:03,892 --> 00:15:07,626
to reducer, and reducer synchronously

230
00:15:07,818 --> 00:15:11,680
does some logic, and at the end you get

231
00:15:12,690 --> 00:15:16,654
a new state and then you can actually again update

232
00:15:16,702 --> 00:15:20,066
your UI based on the state, right? This is how it works and

233
00:15:20,088 --> 00:15:23,694
that's synchronous and that's sometimes time consuming

234
00:15:23,742 --> 00:15:27,046
and blocking. So what we can do in

235
00:15:27,068 --> 00:15:30,950
this case, like for instance, we can actually hold off this

236
00:15:31,020 --> 00:15:34,150
reducer and store to our worker thread,

237
00:15:34,490 --> 00:15:38,454
and then we can have a view and action in our

238
00:15:38,492 --> 00:15:41,734
main thread. So simply we are actually holding

239
00:15:41,782 --> 00:15:45,466
off this heavy logic which is blocking our main thread to do

240
00:15:45,488 --> 00:15:48,666
our application to somewhere else. And then we do this.

241
00:15:48,768 --> 00:15:52,646
And then once the reducer does like

242
00:15:52,688 --> 00:15:56,686
a new object of your store, you can get it and update or

243
00:15:56,708 --> 00:16:00,526
manipulate your UI. This is one of the examples, I bet

244
00:16:00,548 --> 00:16:04,546
that you can now think of many other examples in your application

245
00:16:04,648 --> 00:16:07,460
that could do similar things, right?

246
00:16:08,710 --> 00:16:13,634
But the question comes to your mind maybe is that does

247
00:16:13,672 --> 00:16:17,574
it even faster? Like is it faster if

248
00:16:17,612 --> 00:16:20,710
I run this task on a worker thread?

249
00:16:21,450 --> 00:16:25,334
Well, the question is not about is faster or is

250
00:16:25,372 --> 00:16:29,142
it slower? The question is that how more

251
00:16:29,276 --> 00:16:32,746
reliable is your application? Let me give you an example. Let's say this is

252
00:16:32,768 --> 00:16:36,470
your main thread, right? When you actually run a task

253
00:16:36,550 --> 00:16:39,786
on your worklet thread, you need

254
00:16:39,808 --> 00:16:43,070
to take into account you have a little bit of overhead.

255
00:16:43,890 --> 00:16:47,438
The worker thread needs to be spammed and run

256
00:16:47,524 --> 00:16:51,502
and then close and then get back to the main

257
00:16:51,556 --> 00:16:55,330
thread. So you have a little bit of overhead. So in fact

258
00:16:55,400 --> 00:16:59,314
it might not be faster. But what we can say is

259
00:16:59,352 --> 00:17:03,154
that it could be more reliable. So you know

260
00:17:03,192 --> 00:17:06,406
that this heavy logic, which I could run in

261
00:17:06,428 --> 00:17:09,878
that third, it will not block my

262
00:17:09,964 --> 00:17:13,334
UI thread. And in fact, in some of those cases, in the

263
00:17:13,372 --> 00:17:15,842
examples about the phones,

264
00:17:15,906 --> 00:17:18,918
imagine that you have a very limited budget.

265
00:17:19,094 --> 00:17:22,726
So then you cannot actually block your UI

266
00:17:22,758 --> 00:17:26,154
to do even a very small task. Then you can

267
00:17:26,192 --> 00:17:29,530
spound main thread and do your stuff without

268
00:17:29,600 --> 00:17:33,374
blocking your application and gives your user better user experience,

269
00:17:33,492 --> 00:17:37,070
right? This is something that

270
00:17:37,140 --> 00:17:38,720
we really want to do.

271
00:17:40,290 --> 00:17:43,826
But about parallelism, then it might be

272
00:17:43,848 --> 00:17:48,034
even faster. So the measurement is quite difficult, but it

273
00:17:48,072 --> 00:17:51,314
might be even faster. Let's say if

274
00:17:51,352 --> 00:17:55,234
your hardware has, or your

275
00:17:55,272 --> 00:17:59,414
cpu, or your customer device cpu has

276
00:17:59,452 --> 00:18:03,030
several cores, actually these workers can

277
00:18:03,100 --> 00:18:06,898
run in each core

278
00:18:06,994 --> 00:18:10,598
in parallel, and this parallelism makes it even faster.

279
00:18:10,694 --> 00:18:14,410
However, that's very difficult to measure, and that's something

280
00:18:14,480 --> 00:18:17,450
out of our hand as a web developer.

281
00:18:18,430 --> 00:18:21,742
And also in some cases might be that in some

282
00:18:21,796 --> 00:18:24,874
phones, third or fourth

283
00:18:25,002 --> 00:18:28,526
cores are even slower. So we're not

284
00:18:28,548 --> 00:18:32,110
going to talk about details of these cores. But the point

285
00:18:32,180 --> 00:18:35,342
here is that it could even be faster.

286
00:18:35,486 --> 00:18:39,330
However, we want that run

287
00:18:39,400 --> 00:18:42,766
in a different thread, not because it's faster, because it's

288
00:18:42,798 --> 00:18:46,790
more reliable. It makes my application more usable.

289
00:18:47,770 --> 00:18:51,206
So let me give you an example here. So in

290
00:18:51,228 --> 00:18:55,266
this example you see that I'm actually doing a heavy task sorting

291
00:18:55,298 --> 00:18:58,966
my list. It's a real example from an application

292
00:18:59,068 --> 00:19:02,954
that I made. So just copy it into this example for you.

293
00:19:03,072 --> 00:19:07,034
So you see that when I'm actually sorting something, and that's a little bit

294
00:19:07,072 --> 00:19:11,818
heavy, a lot of calculation here, this animation

295
00:19:11,994 --> 00:19:15,482
actually is blocked by that task,

296
00:19:15,546 --> 00:19:18,960
so I'm not able to actually do anything.

297
00:19:20,370 --> 00:19:24,558
The UI is blocked, the main thread is blocked, so it's overwhelmed.

298
00:19:24,734 --> 00:19:27,874
There is no space to breathe right

299
00:19:27,912 --> 00:19:31,778
now. So that's why it's just blocking and animation doesn't work. Let's have

300
00:19:31,784 --> 00:19:35,410
a look at that once more. But once I

301
00:19:35,480 --> 00:19:39,366
do aspounding its worklet and do that business logic in

302
00:19:39,388 --> 00:19:44,050
worker thread and I get the result and refresh animation interaction

303
00:19:44,130 --> 00:19:47,574
click, everything works as smooth as it should work, right?

304
00:19:47,692 --> 00:19:50,940
This is exactly what we like to do in our application.

305
00:19:52,430 --> 00:19:56,122
But is that the only option we have? Web workers? Of course not.

306
00:19:56,256 --> 00:19:59,674
Webassembly is another amazing tools that we can run

307
00:19:59,712 --> 00:20:02,538
into it. And when we are talking about webassembly,

308
00:20:02,634 --> 00:20:06,142
immediately it comes to our mind. C plus plus

309
00:20:06,276 --> 00:20:10,062
C rust. Of course

310
00:20:10,116 --> 00:20:14,458
webassembly purposes that to run different application languages

311
00:20:14,554 --> 00:20:17,954
in the browser. Well, we know that, but we

312
00:20:17,992 --> 00:20:21,762
as a web developer, we like to do

313
00:20:21,816 --> 00:20:24,974
stuff in a way that we are doing. Javascript,

314
00:20:25,022 --> 00:20:28,534
typescript perhaps, right? It might be easier for

315
00:20:28,572 --> 00:20:32,374
us to do that. So in fact, if we have

316
00:20:32,412 --> 00:20:35,574
a tools that we don't need to go through

317
00:20:35,612 --> 00:20:39,462
all of these languages, c, c plus plus rust, et cetera,

318
00:20:39,606 --> 00:20:43,622
and just run our regular typescript javascript

319
00:20:43,686 --> 00:20:47,226
file and then get out webassembly, that might be quite interesting

320
00:20:47,328 --> 00:20:51,120
to us. And some smarter people have done that.

321
00:20:53,970 --> 00:20:57,534
Assembly script actually is a compiler that

322
00:20:57,572 --> 00:21:01,374
has a strict set of subset of actually

323
00:21:01,572 --> 00:21:05,190
typescript, and it compiles to web ASM

324
00:21:05,290 --> 00:21:08,834
or webassembly. So that is amazing. But what does

325
00:21:08,872 --> 00:21:12,254
that mean then when you say strict subset

326
00:21:12,302 --> 00:21:16,422
of typescript? So first

327
00:21:16,476 --> 00:21:19,798
of all, let me tell you that it's quite easy to

328
00:21:19,964 --> 00:21:23,126
get started with Adson Liftsgrip. It's amazing.

329
00:21:23,308 --> 00:21:27,286
So you can just simply download it from NPM and

330
00:21:27,308 --> 00:21:31,610
then you can simply just initialize your

331
00:21:31,760 --> 00:21:36,118
application and then once it's ready you have your typescript

332
00:21:36,294 --> 00:21:40,090
boost entry file and you can write your typescript.

333
00:21:40,610 --> 00:21:44,078
You just simply type a script export do function.

334
00:21:44,244 --> 00:21:48,334
But the only difference is that you cannot use all

335
00:21:48,372 --> 00:21:52,186
the available types in typescript. You can just use webassembly

336
00:21:52,298 --> 00:21:55,646
types and assembly types are shown

337
00:21:55,678 --> 00:21:59,330
in the presentation right here. Once you're familiar with these

338
00:21:59,400 --> 00:22:03,282
types, then the rest is just typescript. So you can just go ahead

339
00:22:03,336 --> 00:22:07,318
and write your functions and do whatever stuff a

340
00:22:07,324 --> 00:22:10,966
lot of other tools or maybe libraries you

341
00:22:10,988 --> 00:22:14,262
can find for assembly script to run other different

342
00:22:14,316 --> 00:22:17,866
things. For instance, I created an example at

343
00:22:17,888 --> 00:22:22,262
the end of the talk hopefully, is that it just encodes

344
00:22:22,326 --> 00:22:26,326
everything from your camera right in the browser

345
00:22:26,438 --> 00:22:30,798
and you capture, record and encode to mp4.

346
00:22:30,964 --> 00:22:34,254
Write everything in the browser without blocking your

347
00:22:34,292 --> 00:22:37,790
UI. No, nothing. So your

348
00:22:37,860 --> 00:22:42,254
application is quite responsibilities. But once

349
00:22:42,292 --> 00:22:45,522
you write your

350
00:22:45,656 --> 00:22:49,074
assembly script and it's done, then what you can do

351
00:22:49,112 --> 00:22:53,250
is you can just simply run a command and build your wasm file.

352
00:22:53,910 --> 00:22:58,434
And more interesting thing here is that when

353
00:22:58,472 --> 00:23:00,950
you're going to use this wASM file,

354
00:23:01,530 --> 00:23:05,606
why I'm saying this is more interesting because if

355
00:23:05,628 --> 00:23:09,130
you have worked with Webassembly and if you are going to use that

356
00:23:09,200 --> 00:23:13,050
without assembly script, you know that using

357
00:23:13,120 --> 00:23:16,666
these VASM files initialization and

358
00:23:16,848 --> 00:23:20,602
execution running and get access to those modules that you export,

359
00:23:20,666 --> 00:23:24,078
it's a bit of work in browser. Even in browser you need

360
00:23:24,084 --> 00:23:27,722
to do some stuff, some steps, but with assembly

361
00:23:27,786 --> 00:23:31,918
loader that's quite actually easy.

362
00:23:32,004 --> 00:23:36,986
So you just import instantiate

363
00:23:37,018 --> 00:23:40,266
a streaming function from loader of assembly

364
00:23:40,298 --> 00:23:43,946
swim and then you pass your vasm file and that's

365
00:23:43,978 --> 00:23:47,330
it. Then you have access to the function that you exposed

366
00:23:47,490 --> 00:23:50,966
and then you can easily use that here. So you see that is

367
00:23:50,988 --> 00:23:54,246
an example here for this function that I wrote and I

368
00:23:54,268 --> 00:23:57,946
just get access to that and I can change my state in

369
00:23:57,968 --> 00:24:02,550
my react application for instance. So let's

370
00:24:02,630 --> 00:24:05,946
actually go ahead and see an example with that.

371
00:24:06,128 --> 00:24:09,878
So imagine that now you are running an application

372
00:24:09,984 --> 00:24:13,374
again with an animation and once you're doing

373
00:24:13,412 --> 00:24:17,358
that without webassembly, the animation will

374
00:24:17,444 --> 00:24:20,782
actually or UI thread is

375
00:24:20,836 --> 00:24:25,222
blocking while when you are doing that in assembly's

376
00:24:25,386 --> 00:24:28,430
webassembly thread then it doesn't block.

377
00:24:28,510 --> 00:24:32,334
So you can simply get a very responsive

378
00:24:32,382 --> 00:24:36,082
application. But one thing that I need

379
00:24:36,136 --> 00:24:39,830
to emphasize here is that it's not like okay,

380
00:24:39,900 --> 00:24:43,174
we have these tools and we have to use it in any way.

381
00:24:43,292 --> 00:24:46,534
No, you need to actually measure what you are

382
00:24:46,572 --> 00:24:50,586
doing. Measurement is very important because what

383
00:24:50,608 --> 00:24:54,726
I can say about Webassembly is that although

384
00:24:54,758 --> 00:24:58,154
webassembly, when we say webassembly, maybe we say

385
00:24:58,192 --> 00:25:01,334
oh, it's quite fast. It might be true it's fast,

386
00:25:01,472 --> 00:25:04,400
but that's not, again, it's not the case.

387
00:25:04,850 --> 00:25:08,686
The most important thing about Webassembly is that it starts in

388
00:25:08,708 --> 00:25:12,286
a reliable path and stay in that pass. So if

389
00:25:12,308 --> 00:25:16,080
it start fast it will probably remain in that pass.

390
00:25:16,390 --> 00:25:19,886
But that's different from Javascript, right? It may be slow

391
00:25:19,918 --> 00:25:23,134
in the beginning, but then Ngin does some trick and magic,

392
00:25:23,182 --> 00:25:26,214
caching, et cetera, and then it makes it faster, right?

393
00:25:26,332 --> 00:25:29,894
So this unpredictability, it's not

394
00:25:30,012 --> 00:25:33,654
good for our application to make it reliable. When we

395
00:25:33,692 --> 00:25:37,430
have main thread, we make our application more reliable.

396
00:25:38,590 --> 00:25:42,282
But that's not the only thing we have these days. We have even

397
00:25:42,336 --> 00:25:45,942
more tools, new tools. We have new APIs

398
00:25:46,086 --> 00:25:49,274
called worklet. And worklet are amazing.

399
00:25:49,392 --> 00:25:52,586
The reason for that is in worklet

400
00:25:52,778 --> 00:25:56,110
it's similar to like web workers,

401
00:25:56,530 --> 00:26:00,190
you have a different thread and what it gives us

402
00:26:00,260 --> 00:26:03,794
is it's giving us a

403
00:26:03,832 --> 00:26:06,638
low level access to the rendering pipeline,

404
00:26:06,734 --> 00:26:09,250
audio or video, graphic.

405
00:26:10,230 --> 00:26:12,660
And that means, well,

406
00:26:13,030 --> 00:26:16,614
I can actually paint or I can render something or

407
00:26:16,652 --> 00:26:20,258
I process some audio without blocking my main thread.

408
00:26:20,354 --> 00:26:24,166
Just by calling this API quite performance, you have

409
00:26:24,188 --> 00:26:28,746
a very low level access to the engine. In the browsers there

410
00:26:28,768 --> 00:26:32,678
are a couple of different types of worklets.

411
00:26:32,774 --> 00:26:36,246
So for paint,

412
00:26:36,438 --> 00:26:40,178
animation, layout, audio, these are the types of worklets.

413
00:26:40,214 --> 00:26:43,550
But the one that I want to actually give you an example

414
00:26:43,700 --> 00:26:48,250
how it works and also it's more stable

415
00:26:48,410 --> 00:26:52,314
in different browsers because workers

416
00:26:52,362 --> 00:26:56,254
are quite new and it's not implemented in many browser

417
00:26:56,302 --> 00:27:00,078
yet. But Houdini or CSS paint API,

418
00:27:00,174 --> 00:27:03,060
Houdini is another name, maybe you're familiar with that.

419
00:27:05,110 --> 00:27:08,738
It has a better actually support in different browsers.

420
00:27:08,754 --> 00:27:11,160
So you may use that right now.

421
00:27:11,850 --> 00:27:15,126
And let me give you an example. Let's say you want to actually paint a

422
00:27:15,148 --> 00:27:18,890
checkboard, right? Okay, do you have different options?

423
00:27:18,960 --> 00:27:22,620
But one option here is that you can actually create

424
00:27:23,630 --> 00:27:27,078
how you want to paint that with this JavaScript file register

425
00:27:27,174 --> 00:27:30,238
or register your paint. This is what you

426
00:27:30,244 --> 00:27:33,440
want to paint, you want to render with graphic engine.

427
00:27:34,130 --> 00:27:35,680
And once you do that,

428
00:27:37,970 --> 00:27:41,486
first you need to check if you have access to

429
00:27:41,508 --> 00:27:45,506
this API or browser has support for this API, right? That is

430
00:27:45,528 --> 00:27:49,058
very important. This is feature detection and it's quite important,

431
00:27:49,144 --> 00:27:52,050
especially when you are building progressive web apps.

432
00:27:52,710 --> 00:27:56,214
Okay, so once you do that, so you

433
00:27:56,252 --> 00:27:59,906
can simply add this JavaScript

434
00:27:59,938 --> 00:28:03,190
file, this registered paint

435
00:28:04,010 --> 00:28:08,162
class into this module. Paints worklet

436
00:28:08,226 --> 00:28:12,218
has a module and then once you do that, then you can paint it.

437
00:28:12,384 --> 00:28:16,074
You can just simply in CSS say paint and then it will paint it.

438
00:28:16,112 --> 00:28:20,620
And how does it look? Then it will look like this.

439
00:28:20,990 --> 00:28:24,622
So simply you can run it and then you get what you are doing

440
00:28:24,676 --> 00:28:28,522
here. So imagine that you have very complex background.

441
00:28:28,586 --> 00:28:32,378
For instance, if you want to do it with JavaScript without

442
00:28:32,484 --> 00:28:36,194
blocking your UI, right? That is the way you

443
00:28:36,232 --> 00:28:40,034
can actually use this right now. And I can give you another example.

444
00:28:40,232 --> 00:28:44,340
Let's say you want to create like

445
00:28:45,210 --> 00:28:49,074
a barcode generator on the fly without blocking UI.

446
00:28:49,122 --> 00:28:52,742
You see the animation here is working smoothly while

447
00:28:52,796 --> 00:28:56,822
I'm actually generating these codes by changing level or

448
00:28:56,876 --> 00:29:01,542
writing my input. This is quite fast and high performance,

449
00:29:01,686 --> 00:29:05,414
no blocking at all. So that's one of the examples

450
00:29:05,462 --> 00:29:09,260
we probably use in our application in our daily work.

451
00:29:10,770 --> 00:29:15,194
Fantastic. So we have several tools

452
00:29:15,242 --> 00:29:18,922
and APIs which makes our coding

453
00:29:18,986 --> 00:29:22,674
style for using threads easier, right? And by

454
00:29:22,712 --> 00:29:26,654
doing that we can actually let our main thread

455
00:29:26,702 --> 00:29:30,494
breathe. Do not put everything on main thread

456
00:29:30,542 --> 00:29:34,130
shoulder because it may be tired. And once

457
00:29:34,200 --> 00:29:37,766
the main thread is tired then it cannot handle all

458
00:29:37,788 --> 00:29:41,682
of the things and it makes you and your client disappointed.

459
00:29:41,826 --> 00:29:46,150
So you can just simply hold off some of these tasks to the

460
00:29:46,300 --> 00:29:50,010
other threads with the different APIs. For instance,

461
00:29:50,910 --> 00:29:54,074
let's embarrass actually the power of these

462
00:29:54,112 --> 00:29:57,994
workers. And by doing that we are

463
00:29:58,032 --> 00:30:01,390
not only making our application more reliable but

464
00:30:01,460 --> 00:30:04,782
also usable. Our user will going to love it,

465
00:30:04,836 --> 00:30:08,302
right? So with that said, thank you

466
00:30:08,356 --> 00:30:10,800
very much for listening to me.

467
00:30:11,570 --> 00:30:15,870
And if you want to get access to the source code and examples,

468
00:30:16,370 --> 00:30:19,534
just go to this link and

469
00:30:19,572 --> 00:30:23,246
download. Or you can watch it online. And if you

470
00:30:23,268 --> 00:30:26,566
have any questions feel free to tweet me.

471
00:30:26,748 --> 00:30:30,520
My message on Twitter is open. You can send me any

472
00:30:31,130 --> 00:30:33,846
question. I'm happy to answer all of that.

473
00:30:34,028 --> 00:30:36,340
So good luck, see you next time.

