1
00:00:25,410 --> 00:00:30,920
Our name

2
00:01:52,630 --> 00:01:55,986
you. Hello everyone, I am

3
00:01:56,008 --> 00:02:00,286
Kalyan Dhokte and welcome to conference 42 devsecops

4
00:02:00,318 --> 00:02:03,534
2022. I am from Cognizant Technology Solutions.

5
00:02:03,662 --> 00:02:06,946
Thanks for joining my session. I am going to talk about a role of

6
00:02:06,968 --> 00:02:10,942
SRE in Devsecops before starting my quick introduction.

7
00:02:11,006 --> 00:02:14,562
I am practice lead and responsible to serve customer for building

8
00:02:14,616 --> 00:02:18,326
highly reliable resilient enterprise systems by implementing

9
00:02:18,358 --> 00:02:21,818
modern digital engineering techniques like SRE and

10
00:02:21,824 --> 00:02:25,930
Devsecops. Let's deep dive into the session.

11
00:02:27,390 --> 00:02:31,354
First we will understand relationship between Devsecops and SRE

12
00:02:31,482 --> 00:02:35,354
if I take a minute to understand about Devsecops. It is integrating

13
00:02:35,402 --> 00:02:38,878
security as a part of your pipeline. As you aware in

14
00:02:39,044 --> 00:02:42,438
DevOps we focuses on continuous integration,

15
00:02:42,634 --> 00:02:46,514
continuous delivery and continuous deployment. So you

16
00:02:46,552 --> 00:02:50,686
make design to deploying all the phases automated.

17
00:02:50,798 --> 00:02:55,086
And now devsecops integrates security as a part of entire lifecycle.

18
00:02:55,198 --> 00:02:58,774
So benefit of Devsecops to detect security much early in

19
00:02:58,812 --> 00:03:02,518
lifecycle. What is Devsecops to do with SRE? Let's understand

20
00:03:02,604 --> 00:03:06,482
that as you know SRE focuses on reliability and resiliency

21
00:03:06,546 --> 00:03:09,894
of the system. It also helps to engineer highly performance,

22
00:03:09,942 --> 00:03:13,466
scalable, fault tolerant applications and help customer to build always on

23
00:03:13,488 --> 00:03:17,146
business. So reliability is also mean that you

24
00:03:17,168 --> 00:03:21,018
are protecting your systems from unauthorized attacks

25
00:03:21,114 --> 00:03:25,098
and you are preventing vulnerabilities, threats and also protecting

26
00:03:25,194 --> 00:03:29,786
customer data and finally managing and maintaining privacy of entire ecosystem.

27
00:03:29,978 --> 00:03:33,726
So for all practical purposes, SRE implements Devsecops

28
00:03:33,758 --> 00:03:37,698
principles and security practices. Let's understand what are the

29
00:03:37,704 --> 00:03:41,534
different principles DevOps and SRE

30
00:03:41,582 --> 00:03:43,970
implements. So eliminate soil,

31
00:03:44,470 --> 00:03:47,826
eliminate silos and also eliminating

32
00:03:47,858 --> 00:03:51,480
toil is one of the important principle. Let's understand

33
00:03:51,850 --> 00:03:55,430
shared responsibility of security and embed security

34
00:03:55,500 --> 00:03:58,902
in development teams accept failure

35
00:03:59,046 --> 00:04:02,986
as normal gradual changes, automate everything and

36
00:04:03,088 --> 00:04:07,078
measure everything. So it is important to reduce

37
00:04:07,174 --> 00:04:10,830
cost of failure by incremental changes and

38
00:04:10,900 --> 00:04:14,634
doing the blameless postmortem, basically adopting

39
00:04:14,682 --> 00:04:18,202
security best practices and creating uniform

40
00:04:18,266 --> 00:04:22,238
security posture. So automation also going to help

41
00:04:22,324 --> 00:04:26,142
to improve reliability and automating. Security monitoring and testing

42
00:04:26,206 --> 00:04:29,294
is one of the important aspect of devsecops.

43
00:04:29,422 --> 00:04:33,442
So SRE helps to enforce robust monitoring of

44
00:04:33,496 --> 00:04:37,240
reliability and security throughout also

45
00:04:37,690 --> 00:04:41,074
making sure SLO, SLI and actionable

46
00:04:41,122 --> 00:04:44,694
alerts are getting triggered for any such.

47
00:04:44,892 --> 00:04:50,326
So our systems are becoming

48
00:04:50,438 --> 00:04:53,990
so evolved beyond human ability

49
00:04:54,150 --> 00:04:57,834
and to mentally understand that model and their

50
00:04:57,872 --> 00:05:01,566
behavior is very difficult. So why

51
00:05:01,588 --> 00:05:05,450
these modern cloud technologies are challenging. So modern

52
00:05:05,610 --> 00:05:09,534
microservice based architecture. Cloud native architecture increases speed of

53
00:05:09,652 --> 00:05:13,174
scale along with complexity with improved cost efficiency,

54
00:05:13,242 --> 00:05:16,466
accelerated innovation, faster time to market and the

55
00:05:16,488 --> 00:05:20,034
ability to scale applications on demand. So in this

56
00:05:20,072 --> 00:05:24,190
case with CI CD DevOps and cloud native microservice architecture,

57
00:05:24,350 --> 00:05:28,338
we are building systems so large and changing so often continuously.

58
00:05:28,354 --> 00:05:32,146
We are changing based on innovations and new features

59
00:05:32,258 --> 00:05:35,558
to deploy a very fast pace to

60
00:05:35,644 --> 00:05:39,146
production. And it's very difficult and very hard to track what

61
00:05:39,168 --> 00:05:41,900
is going on in the system. For example,

62
00:05:43,070 --> 00:05:46,742
Salesforce CRM is having hundreds, thousands of microservices,

63
00:05:46,806 --> 00:05:50,842
which is very difficult to track all these things and which increases

64
00:05:50,906 --> 00:05:55,290
the complexity. So as you increase more features,

65
00:05:55,370 --> 00:05:58,910
adding more features, the complexity also going to increase.

66
00:05:59,730 --> 00:06:03,554
So where does this complexity coming from? So we

67
00:06:03,592 --> 00:06:06,994
are creating and deploying new

68
00:06:07,032 --> 00:06:11,230
features with continuous delivery. Cloud native serverless

69
00:06:11,310 --> 00:06:14,770
architecture, API and microservices service

70
00:06:14,840 --> 00:06:18,582
mesh raise engine. All those are very good to

71
00:06:18,716 --> 00:06:23,282
making sure you are continuously innovating

72
00:06:23,346 --> 00:06:27,122
and continuously deploying new features. But that also increases

73
00:06:27,186 --> 00:06:31,482
the complexity. And then when it goes

74
00:06:31,536 --> 00:06:34,860
in a month and then again it's in the end of the year,

75
00:06:35,470 --> 00:06:39,530
you will see very difficult to manage and maintain that entire

76
00:06:39,680 --> 00:06:43,434
complexity because complexity is continuously also increasing.

77
00:06:43,482 --> 00:06:47,402
As you sre upgrading kubernetes systems,

78
00:06:47,466 --> 00:06:50,878
upgrading cloud services, there are some outages you are

79
00:06:50,884 --> 00:06:54,466
fixing continuous, any related to security related issues.

80
00:06:54,568 --> 00:06:57,806
If there are certain misconfigurations, you are refactoring

81
00:06:57,838 --> 00:07:01,490
code, moving lot many applications to

82
00:07:01,560 --> 00:07:04,654
cloud native and serverless kind of architecture,

83
00:07:04,702 --> 00:07:08,214
changing deployment tools as well. So all those factors going to increase the

84
00:07:08,252 --> 00:07:11,782
complexity. If you want to simplify the complex system, you have to change

85
00:07:11,836 --> 00:07:15,090
it. But in order to changing systems for simplification,

86
00:07:15,170 --> 00:07:19,258
you will be adding additional complexity. And complexity is

87
00:07:19,424 --> 00:07:22,874
how you. It is not easy to simplify and

88
00:07:22,912 --> 00:07:27,242
it is very difficult to understand, but complexity is

89
00:07:27,296 --> 00:07:31,434
more about navigating it. So how you will navigate the complexity,

90
00:07:31,562 --> 00:07:35,086
let's understand that. So security is a

91
00:07:35,108 --> 00:07:39,054
context dependent discipline. And then by deploying all these

92
00:07:39,092 --> 00:07:42,678
devsecops and SRE practices, you could able to navigate

93
00:07:42,714 --> 00:07:46,594
the complexity very easily. So flexibility to

94
00:07:46,632 --> 00:07:50,274
change the system rapidly and then applying security context to

95
00:07:50,312 --> 00:07:53,860
system changes. So you need to understand security is

96
00:07:54,470 --> 00:07:58,758
kind of a stateful kind of nature. Okay, we can see there

97
00:07:58,924 --> 00:08:03,026
is a clear conundrum as developers constantly

98
00:08:03,058 --> 00:08:06,466
implements new features and move towards customer value rapidly.

99
00:08:06,578 --> 00:08:09,782
And in this case security will not move on the same curve.

100
00:08:09,926 --> 00:08:13,974
And then there is a constantly you have to verify security and reliability

101
00:08:14,022 --> 00:08:15,820
is implemented as per design.

102
00:08:17,150 --> 00:08:21,050
So in this case continuous security and reliability

103
00:08:21,130 --> 00:08:24,926
has to be embedded. And then you need to continuously check and

104
00:08:24,948 --> 00:08:28,378
verify that security with the security first mindset

105
00:08:28,474 --> 00:08:31,806
and reliability first mindset. That's very important. You need

106
00:08:31,828 --> 00:08:35,118
to infuse all those things into development,

107
00:08:35,214 --> 00:08:38,466
deliveries and in production. So SRE basically

108
00:08:38,568 --> 00:08:41,986
helping in securing the infrastructure applications when

109
00:08:42,008 --> 00:08:46,406
you deploy into production and then it will help to basically

110
00:08:46,588 --> 00:08:50,466
tracking the availability, SLO, tracking, error budget, all those aspects

111
00:08:50,578 --> 00:08:54,358
which includes automated security monitoring as well. So in

112
00:08:54,364 --> 00:08:58,566
this case you need to combine framework of Devsecops and SRE

113
00:08:58,678 --> 00:09:02,966
and continuous security to address assess for such complex distributed

114
00:09:02,998 --> 00:09:06,374
microservice architecture. Because lot of bad actors

115
00:09:06,422 --> 00:09:10,634
SRE continuously chasing such complex enterprises for

116
00:09:10,672 --> 00:09:14,078
various attacks and the race to defend against

117
00:09:14,164 --> 00:09:17,994
attackers must be accelerated compared

118
00:09:18,042 --> 00:09:21,802
to functional failures. The reliability and security failures

119
00:09:21,946 --> 00:09:25,294
frequently impact entire enterprise systems

120
00:09:25,342 --> 00:09:29,026
and also impact the brand value. Hence special attention is

121
00:09:29,048 --> 00:09:32,686
required for the security and reliability. So there are some trade

122
00:09:32,718 --> 00:09:36,578
offs as well between reliability and security. While redundancy

123
00:09:36,674 --> 00:09:40,946
is going to increase the reliability, it also increases the attack surface.

124
00:09:41,058 --> 00:09:44,358
So reliability and security trade offs with respect to

125
00:09:44,444 --> 00:09:48,054
incident management. So when you want to improve

126
00:09:48,102 --> 00:09:51,690
MTTR and then reliability incidents basically benefits

127
00:09:51,840 --> 00:09:56,090
with the verbose logging while those logs would be again

128
00:09:56,160 --> 00:10:00,300
target for those attackers. So you need to be very careful while

129
00:10:01,010 --> 00:10:04,314
making sure basically striking the balance

130
00:10:04,362 --> 00:10:08,110
between security and reliability. Let's understand

131
00:10:08,180 --> 00:10:12,458
what are the common symptoms for failing devsecops

132
00:10:12,474 --> 00:10:16,094
and SRE models. So one important thing is avoidance

133
00:10:16,142 --> 00:10:20,274
and blame. This is one of the symptoms. Lot of developers and

134
00:10:20,312 --> 00:10:24,674
then teams are saying the security team is blamed for

135
00:10:24,712 --> 00:10:28,486
slowing down the projects, the pipeline entirely getting slowed down

136
00:10:28,508 --> 00:10:32,338
because of the security reviews and project teams are frequently sidestepped

137
00:10:32,354 --> 00:10:34,520
that could try to avoid the security,

138
00:10:35,050 --> 00:10:38,794
slow and ineffective security reviews. Security reviews of new

139
00:10:38,832 --> 00:10:42,742
applications take weeks and then also produce

140
00:10:42,886 --> 00:10:46,540
little actionable information. Bad user experience

141
00:10:47,550 --> 00:10:51,218
basically the user experience for authentication authorizations are sometime

142
00:10:51,254 --> 00:10:54,666
very much inconsistent and then there are gaps in risk

143
00:10:54,698 --> 00:10:58,938
profile as well. So large parts of your technology portfolio

144
00:10:59,034 --> 00:11:02,794
have undiscovered security and vulnerability. And then

145
00:11:02,852 --> 00:11:06,306
all these things increasing the complexity and then the complexity is

146
00:11:06,328 --> 00:11:09,602
becoming very unmanageable. So your vulnerability list

147
00:11:09,656 --> 00:11:13,266
is very large and complex and it is growing rapidly when

148
00:11:13,288 --> 00:11:17,234
you move towards or shifting

149
00:11:17,282 --> 00:11:21,206
more application to the production. So how can I

150
00:11:21,228 --> 00:11:24,774
diagnosis the diagnosis basically need to understand why

151
00:11:24,812 --> 00:11:28,518
these symptoms are. And then basically it is misaligned

152
00:11:28,534 --> 00:11:31,420
teams and reinventing to security.

153
00:11:32,030 --> 00:11:35,542
And then basically reliability wheels. Security and reliability

154
00:11:35,606 --> 00:11:38,666
involved very late in the game and many times there

155
00:11:38,688 --> 00:11:41,050
sre a lot of lack of automation.

156
00:11:41,710 --> 00:11:45,406
So for this revenue is definitely embed security

157
00:11:45,588 --> 00:11:49,166
first mindset and then also reliability in

158
00:11:49,188 --> 00:11:53,138
development teams embed reliability in development teams. So create security

159
00:11:53,224 --> 00:11:56,514
and reliability standards and

160
00:11:56,552 --> 00:12:00,226
accelerate that as well as automations of the security

161
00:12:00,408 --> 00:12:03,598
scans and continuous security testing,

162
00:12:03,694 --> 00:12:07,814
observability and resiliency we need to understand how

163
00:12:08,012 --> 00:12:11,126
we have to make Devsecops is a kind of

164
00:12:11,148 --> 00:12:15,174
healthy operating model. Embed sres into dev

165
00:12:15,212 --> 00:12:19,222
teams to help implement security and reliability consideration

166
00:12:19,286 --> 00:12:22,890
early in the design and development phases.

167
00:12:23,790 --> 00:12:27,370
So let's understand what are the common practices for success

168
00:12:27,440 --> 00:12:31,534
of Devsecops and SRE model. Enhancing DevsecOps operations has

169
00:12:31,572 --> 00:12:35,502
become the SRE's top priority in light of digital transformation and

170
00:12:35,556 --> 00:12:38,266
continuous escalation of attacks.

171
00:12:38,378 --> 00:12:43,226
So all these aspects are very important to making Devsecops

172
00:12:43,258 --> 00:12:47,166
and SRE models successful. Embed security and development, reliability driven

173
00:12:47,198 --> 00:12:50,430
development automations and full stack observability.

174
00:12:50,590 --> 00:12:54,478
So that's going to enhance Devsecops operations

175
00:12:54,654 --> 00:12:58,306
and will be success of the devsecops

176
00:12:58,338 --> 00:13:02,438
and SRE models. So moving into the

177
00:13:02,524 --> 00:13:05,766
modernisation service model devsecops with

178
00:13:05,868 --> 00:13:09,378
unit to embed reliability and security stack. So I

179
00:13:09,404 --> 00:13:12,714
personally believe value stream management to play a big role from

180
00:13:12,752 --> 00:13:16,378
planning to operations along with security and not just a

181
00:13:16,384 --> 00:13:19,850
CI CD pipeline in digital transformation journey. So basically

182
00:13:19,920 --> 00:13:23,326
value stream is a business practice that helps to

183
00:13:23,348 --> 00:13:26,606
identify areas of improvements. Okay. So in

184
00:13:26,628 --> 00:13:30,094
a process to make operations more efficient you need to

185
00:13:30,212 --> 00:13:33,970
drive the business value. So value stream management

186
00:13:34,630 --> 00:13:38,370
will help in security governance,

187
00:13:38,950 --> 00:13:42,450
automations, security dashboard, analytics policy

188
00:13:42,520 --> 00:13:46,270
as a code and pipelines. So from planning design phase to

189
00:13:46,360 --> 00:13:49,734
monitor phase, the security will be embedded right

190
00:13:49,772 --> 00:13:53,922
from the threat modeling you need to implement assessed

191
00:13:53,986 --> 00:13:58,278
SAS DAS as well as chaos security experiments.

192
00:13:58,374 --> 00:14:02,262
So security policy compliance then you need to continuously

193
00:14:02,326 --> 00:14:06,102
schedule some of the audits, fuzzy test, Wafa penetration

194
00:14:06,166 --> 00:14:10,122
testing, automated security monitoring right from the plan

195
00:14:10,176 --> 00:14:13,322
to design all till entire operation,

196
00:14:13,386 --> 00:14:18,074
pre production as well as production, how the security will be implemented

197
00:14:18,122 --> 00:14:21,294
in the production pipeline and then as well as the reliability is

198
00:14:21,332 --> 00:14:25,780
equally important which help to making

199
00:14:26,230 --> 00:14:30,370
Devsecops production pipeline more secure and more reliable.

200
00:14:30,870 --> 00:14:34,686
So combining value stream management with the implementation and expansion

201
00:14:34,718 --> 00:14:38,594
of Devsecops and SI practices is becoming the best of breeder

202
00:14:38,642 --> 00:14:42,550
approach to optimize every stage of deployment,

203
00:14:42,970 --> 00:14:46,230
development and security embedding security

204
00:14:46,300 --> 00:14:49,862
end to end. By having everything in a single pipeline with optimized

205
00:14:49,926 --> 00:14:53,674
value streams and checks and controls for vulnerability and

206
00:14:53,712 --> 00:14:57,606
any kind of misconfiguration, you are going to eliminate

207
00:14:57,718 --> 00:15:01,934
any time consuming manual reviews and help

208
00:15:01,972 --> 00:15:05,486
to accelerate the production pipeline. So here you

209
00:15:05,508 --> 00:15:09,454
need to understand if there are certain shift left and

210
00:15:09,492 --> 00:15:13,114
as well as you are moving some application to cloud and existing,

211
00:15:13,162 --> 00:15:16,834
there are some existing process and tools you need to understand what are those

212
00:15:16,872 --> 00:15:20,526
existing process with respect to people, what kind of skills

213
00:15:20,558 --> 00:15:23,826
are there, what kind of culture, what are the processes available?

214
00:15:23,928 --> 00:15:27,398
Are they implementing policy as a code? What are the

215
00:15:27,404 --> 00:15:30,694
different security practices and then what is the technology?

216
00:15:30,812 --> 00:15:33,990
You can't just start from the

217
00:15:34,060 --> 00:15:37,738
scratch, you can basically learn and document the

218
00:15:37,744 --> 00:15:41,658
existing process, adopt and then adopt and optimize, use those

219
00:15:41,744 --> 00:15:45,178
existing processes and technology and

220
00:15:45,264 --> 00:15:49,478
skill set and then implement devsecops pipeline.

221
00:15:49,654 --> 00:15:53,614
So there are certain automated and

222
00:15:53,652 --> 00:15:57,230
advanced techniques of Devsecops and SRE basically

223
00:15:57,300 --> 00:16:00,746
to automate all your deployment pipeline.

224
00:16:00,858 --> 00:16:04,034
So SREs have also devoted lot of their

225
00:16:04,072 --> 00:16:07,970
time in attention to shifting right basically for

226
00:16:08,040 --> 00:16:11,982
automations security monitoring in production and then giving continuous

227
00:16:12,046 --> 00:16:15,446
feedback and then based on security monitoring data back

228
00:16:15,468 --> 00:16:19,174
to developers. So you need to help and

229
00:16:19,212 --> 00:16:23,234
then support basically automating with this advanced technique

230
00:16:23,282 --> 00:16:27,778
to developers. There are security gates that you can automate

231
00:16:27,954 --> 00:16:32,120
to stop workflow from slowing down

232
00:16:32,570 --> 00:16:36,102
and then basically backing up monitoring and analytics,

233
00:16:36,166 --> 00:16:39,622
monitoring analytics into the pipeline, then automate

234
00:16:39,766 --> 00:16:43,294
close verification checks into

235
00:16:43,332 --> 00:16:46,586
the Devsecops framework, reliability driven

236
00:16:46,698 --> 00:16:49,882
development, code profiling, tool integration,

237
00:16:49,946 --> 00:16:53,706
all these are very important techniques you can

238
00:16:53,748 --> 00:16:57,646
automate and there are certain AI and ML techniques for threat

239
00:16:57,678 --> 00:17:01,262
analysis. So advanced Devsecops framework take advantage of AI

240
00:17:01,326 --> 00:17:05,066
and machine learning techniques to basically to streamline and simplify

241
00:17:05,198 --> 00:17:09,238
speed up the complex devsecops stacks. There are

242
00:17:09,244 --> 00:17:12,886
two examples I would give. One is basically collecting and

243
00:17:12,908 --> 00:17:16,790
analyzing software while users are logging

244
00:17:17,470 --> 00:17:21,002
into the system and then those logging information will

245
00:17:21,056 --> 00:17:24,746
identify which aspect of software with

246
00:17:24,768 --> 00:17:28,858
the bad actors are attempting to target. So this information

247
00:17:28,944 --> 00:17:32,346
will give to the AI ML algorithm and then it can suggest

248
00:17:32,538 --> 00:17:35,998
different code alteration and ads or any

249
00:17:36,084 --> 00:17:40,190
architecture changes is required to proactively identify code vulnerability.

250
00:17:41,010 --> 00:17:44,754
From a testing perspective, code changes can be run

251
00:17:44,792 --> 00:17:48,546
through finely tuned machine learning tools to identify how

252
00:17:48,568 --> 00:17:52,034
a particular change might affect other aspect of the

253
00:17:52,072 --> 00:17:56,114
applications. So these are the examples where you can have AI backed

254
00:17:56,162 --> 00:17:59,670
threat analysis and then you have to making

255
00:17:59,740 --> 00:18:03,666
sure the chaos engineering with respect to security experiments

256
00:18:03,778 --> 00:18:08,174
can be also integrated which will give the automations devsecops pipeline.

257
00:18:08,242 --> 00:18:12,186
With the tools like Gremlin Chaos link cloud strike can

258
00:18:12,208 --> 00:18:15,866
be used. So we'll provide more details in

259
00:18:15,888 --> 00:18:19,846
the case study about the chaos link and then in modernisation side

260
00:18:19,968 --> 00:18:23,886
you need to making sure automated security monitoring and analytics will

261
00:18:23,908 --> 00:18:28,122
be implemented. So tracking or reliability gates and operation excellence

262
00:18:28,186 --> 00:18:31,802
dashboard auto auditing and compliance

263
00:18:31,866 --> 00:18:36,734
tools that streamlines basically a lot of compliance related reporting

264
00:18:36,862 --> 00:18:41,010
and then deployment of the scripts validation. Basically there SRE certain

265
00:18:41,080 --> 00:18:44,286
security context and flags you need to add while deploying

266
00:18:44,318 --> 00:18:48,054
any pods in the Kubernetes and

267
00:18:48,092 --> 00:18:51,670
security policy framework will continuously monitor and

268
00:18:51,740 --> 00:18:55,026
assess that security flags. So overall

269
00:18:55,138 --> 00:18:58,586
these advanced techniques for automation of devsecops and

270
00:18:58,608 --> 00:19:02,646
SRE will provide a lot of cost savings potential. So Devsecops

271
00:19:02,678 --> 00:19:06,540
and basically SRE automation when you complete,

272
00:19:07,070 --> 00:19:11,242
which will help to lower likelihood of any catastrophic cybersecurity

273
00:19:11,306 --> 00:19:15,086
incidents and reduction in number of

274
00:19:15,108 --> 00:19:19,466
operational staff which basically improve your MTTr

275
00:19:19,578 --> 00:19:22,110
and then reduce lot of p one tickets.

276
00:19:22,870 --> 00:19:26,766
So let's understand what is SRE role

277
00:19:26,798 --> 00:19:30,798
in Devsecops according to team topology.

278
00:19:30,974 --> 00:19:34,894
So effective software teams are very essential for any

279
00:19:34,952 --> 00:19:39,110
organization to deliver value continuously and sustainably.

280
00:19:39,530 --> 00:19:43,298
But how do you build the best team for the organizations

281
00:19:43,394 --> 00:19:47,122
and your specific goals with respect to culture,

282
00:19:47,266 --> 00:19:51,162
what kind of skill set you have, what is the leadership and then

283
00:19:51,216 --> 00:19:54,780
all development operation team. So there is a

284
00:19:55,230 --> 00:19:58,454
bridge between Dev and Ops that SRE

285
00:19:58,502 --> 00:20:02,634
is going to help bridging the gaps between operation

286
00:20:02,682 --> 00:20:05,886
and development team. So SRE will help in

287
00:20:06,068 --> 00:20:10,442
reliability and resiliency, kind of features

288
00:20:10,506 --> 00:20:13,554
that has to be prioritized and then it

289
00:20:13,592 --> 00:20:16,914
will help and then basically

290
00:20:17,112 --> 00:20:20,750
automate reliability engineering security observability,

291
00:20:20,910 --> 00:20:24,430
security feedback constantly giving implementing golden signals.

292
00:20:24,590 --> 00:20:27,954
So SRE is going to help into bridging the gap between operations

293
00:20:28,002 --> 00:20:32,102
and development team. The role of SRE is to collaborate, engage in value

294
00:20:32,156 --> 00:20:35,986
added activities and create results that contribute to measurable

295
00:20:36,098 --> 00:20:39,498
reliability improvements. So we understand what

296
00:20:39,504 --> 00:20:45,894
are the different tasks with respect to SRE

297
00:20:45,942 --> 00:20:49,926
role in Devsecops. What are the backlogs? The initial adjustment

298
00:20:49,958 --> 00:20:53,470
to DevsecOps model requires a change in

299
00:20:53,540 --> 00:20:57,246
mindset for developers and sres, but building in

300
00:20:57,268 --> 00:21:01,130
vulnerability detection ahead of app deployment ultimately

301
00:21:01,210 --> 00:21:03,860
lowered their sres around the security.

302
00:21:04,550 --> 00:21:08,350
So SRE tasks in different phases for improving reliability,

303
00:21:08,430 --> 00:21:12,594
resiliency and security. So basically with

304
00:21:12,632 --> 00:21:15,546
respect to security, you need to secure the build pipeline,

305
00:21:15,678 --> 00:21:19,474
secure entire deploying and also runtime protection.

306
00:21:19,602 --> 00:21:24,194
So security side of it is mainly enabling

307
00:21:24,322 --> 00:21:28,486
security code scanning security policy whenever the parts

308
00:21:28,518 --> 00:21:32,966
are running in aks, kubernetes, cluster, configure and validate

309
00:21:33,078 --> 00:21:36,902
deployment scripts for security context. So overall reliability

310
00:21:36,966 --> 00:21:40,798
and dependability consists of seven attributes. And security

311
00:21:40,884 --> 00:21:44,394
is combination of confidentiality, integrity and availability.

312
00:21:44,522 --> 00:21:47,966
So confidentiality is mainly ensuring that the

313
00:21:47,988 --> 00:21:51,326
information is inaccessible to unauthorized people,

314
00:21:51,508 --> 00:21:55,326
commonly enforced through your encryption, ids and password,

315
00:21:55,438 --> 00:21:59,602
and even with the two factor authentication. So integrity is

316
00:21:59,656 --> 00:22:02,946
mainly safeguarding information and system from being

317
00:22:02,968 --> 00:22:06,406
modified by unauthorized people. And of

318
00:22:06,428 --> 00:22:09,926
course availability is ensuring that unauthorized people have access to the

319
00:22:09,948 --> 00:22:11,400
information when needed.

320
00:22:12,970 --> 00:22:18,330
And then safety, resiliency and maintainability is

321
00:22:18,480 --> 00:22:21,980
basically contributing to overall dependability of the system.

322
00:22:23,230 --> 00:22:27,018
So these are some of the tasks and backlogs you

323
00:22:27,024 --> 00:22:30,922
need to continuously implement during every phases

324
00:22:30,986 --> 00:22:34,266
right from the build, deployment and operations with respect

325
00:22:34,298 --> 00:22:38,080
to specific areas of reliability, resiliency and security.

326
00:22:39,170 --> 00:22:45,234
So next is plan

327
00:22:45,272 --> 00:22:49,090
to develop the threat modeling

328
00:22:49,990 --> 00:22:53,154
from all the phases. This is one of the case

329
00:22:53,192 --> 00:22:56,334
study where building security and reliability

330
00:22:56,382 --> 00:23:00,326
in devsecops pipeline. So right from the plan and develop you

331
00:23:00,348 --> 00:23:03,794
start with the threat modeling. So there are certain threat modeling tools

332
00:23:03,842 --> 00:23:07,946
you can implement and then these modeling tools will help to

333
00:23:08,048 --> 00:23:11,734
identify the impact on the design various

334
00:23:11,782 --> 00:23:16,054
design components. IDE security plugins will start on the immediate

335
00:23:16,102 --> 00:23:20,330
code scanning pre commit hooks and then the secure coding standards.

336
00:23:20,750 --> 00:23:24,158
Then commit to code. When you commit the code into

337
00:23:24,324 --> 00:23:27,962
any repository you need to understand what is a secure repository,

338
00:23:28,026 --> 00:23:31,402
are you implementing or not. Then there are static

339
00:23:31,466 --> 00:23:37,330
code analysis, then dynamic

340
00:23:39,510 --> 00:23:42,226
security unit, functional test,

341
00:23:42,328 --> 00:23:45,670
dynamic security testing as well in the build and

342
00:23:45,740 --> 00:23:49,878
test phases, dependency management, secure entire

343
00:23:49,964 --> 00:23:53,010
secure pipeline. So infrastructure scanning,

344
00:23:53,170 --> 00:23:56,760
cloud configuration validation, all those processes are important

345
00:23:57,290 --> 00:24:00,614
right from the plan and develop to operate

346
00:24:00,662 --> 00:24:03,738
phrase. This is the security model, ideal security model.

347
00:24:03,824 --> 00:24:07,894
Apart from that in build and test there are certain plugins

348
00:24:08,022 --> 00:24:11,386
created for this case study is basically YAML

349
00:24:11,418 --> 00:24:14,602
validator and security context schema.

350
00:24:14,746 --> 00:24:17,710
So you will have certain plugins.

351
00:24:18,130 --> 00:24:22,462
In this case it's the azure pipeline. So we have to making

352
00:24:22,516 --> 00:24:26,322
sure while developers are coding the

353
00:24:26,376 --> 00:24:30,910
YAML files, YAML scripts, they are adding the relevant security context

354
00:24:30,990 --> 00:24:36,242
and the security flags so that for example run

355
00:24:36,296 --> 00:24:39,686
as a non root user or you should not have

356
00:24:39,708 --> 00:24:44,710
access to root file system allow privilege,

357
00:24:45,930 --> 00:24:50,042
access should be false. So all those things read

358
00:24:50,096 --> 00:24:53,386
only root file systems. All those flags need to be

359
00:24:53,408 --> 00:24:56,940
checked and validated while you are executing the

360
00:24:57,710 --> 00:25:00,910
Azure pipeline. So continuously

361
00:25:01,570 --> 00:25:05,786
checking that schema and then providing the report directly

362
00:25:05,818 --> 00:25:09,294
to the developers that can be automated as

363
00:25:09,332 --> 00:25:13,594
well. And then before going to the production,

364
00:25:13,722 --> 00:25:17,790
when you are moving your code into non production environment

365
00:25:17,870 --> 00:25:21,618
and also the production environment, there are chaos engineering and security

366
00:25:21,704 --> 00:25:26,022
experiments can be conducted using certain

367
00:25:26,156 --> 00:25:29,730
security experiment tools like chaos, linger and Gremlin

368
00:25:29,810 --> 00:25:33,126
which will help to understand the

369
00:25:33,148 --> 00:25:37,330
complexity. You need to basically navigate the complexity and then

370
00:25:37,500 --> 00:25:41,126
any changes, any turbulence condition arises.

371
00:25:41,318 --> 00:25:45,046
You need to be prepared for that, basically getting giving the confidence

372
00:25:45,158 --> 00:25:48,826
to the developers and operation team.

373
00:25:48,928 --> 00:25:52,462
So secondary vulnerability is one of the

374
00:25:52,596 --> 00:25:56,074
area you can simulate with the fault

375
00:25:56,122 --> 00:25:59,582
injection simulations also

376
00:25:59,636 --> 00:26:01,680
for the reliability side of it.

377
00:26:02,690 --> 00:26:06,194
So when there are relatively easy

378
00:26:06,232 --> 00:26:09,874
and cost effective to resolve those

379
00:26:09,912 --> 00:26:13,906
issues, as a result it greatly reduces the

380
00:26:13,928 --> 00:26:17,846
total cost of deployment and then also the development because

381
00:26:17,868 --> 00:26:21,078
you are identifying those security issues early in

382
00:26:21,084 --> 00:26:24,294
the lifecycle. Also we need to

383
00:26:24,332 --> 00:26:27,926
design certain tools with non security experts

384
00:26:27,958 --> 00:26:32,134
in mind and making threat modeling more easier for developers

385
00:26:32,182 --> 00:26:35,820
by providing clear guidance on creating and analyzing the threat model.

386
00:26:36,910 --> 00:26:40,558
Okay now understand some of these security

387
00:26:40,644 --> 00:26:44,254
policy can be enforced security center like

388
00:26:44,292 --> 00:26:48,302
defender continuously discover new resources and

389
00:26:48,356 --> 00:26:51,950
are being deployed across your workloads and assets,

390
00:26:53,270 --> 00:26:57,038
whether they reconfigured according

391
00:26:57,054 --> 00:27:01,234
to security best practices or not. And then the

392
00:27:01,432 --> 00:27:05,038
tickets are flagged and then you will get the priority list of all the

393
00:27:05,064 --> 00:27:08,834
recommendations. So this is basically enforcing

394
00:27:08,882 --> 00:27:12,438
security policy using security center so it will

395
00:27:12,524 --> 00:27:16,434
understand to help you to know the posture, continuously assess

396
00:27:16,482 --> 00:27:20,026
and identify vulnerabilities, harden those resources and services with

397
00:27:20,048 --> 00:27:23,494
security benchmark and detect and resolve threats

398
00:27:23,542 --> 00:27:25,260
to resources and services.

399
00:27:27,150 --> 00:27:31,190
So the major motivation for chaos engineering with

400
00:27:31,280 --> 00:27:35,450
security experimentation is to gain confidence when systems are exposed

401
00:27:35,610 --> 00:27:38,974
to any real life scenario attacks and that

402
00:27:39,012 --> 00:27:44,542
can be transmitted to any cloud platforms with

403
00:27:44,596 --> 00:27:47,650
various APIs and various attack surfaces.

404
00:27:48,630 --> 00:27:53,134
So there is open source security experimentation tool like a chaos

405
00:27:53,262 --> 00:27:57,000
slinger and then cloud strike. So SRE engineers basically

406
00:27:57,530 --> 00:28:01,302
design security test scenario by

407
00:28:01,356 --> 00:28:05,254
assessing risk based fault vulnerability assessment and then

408
00:28:05,292 --> 00:28:08,506
create the various test scenario. So there

409
00:28:08,528 --> 00:28:11,978
are certain components. One is controller which coordinates the

410
00:28:11,984 --> 00:28:15,846
chaos injection experience then manager which receives the instruction

411
00:28:15,878 --> 00:28:19,014
to conduct attacks based on specified attack modes.

412
00:28:19,142 --> 00:28:22,720
Fault engine that will help to

413
00:28:23,170 --> 00:28:26,394
knowledge on about cloud compliance and best practices.

414
00:28:26,522 --> 00:28:30,570
Fault injector is responsible for implementing the security and fault

415
00:28:30,730 --> 00:28:34,446
against the target cloud assets. Chaos monitor

416
00:28:34,558 --> 00:28:38,466
is an important component which will

417
00:28:38,488 --> 00:28:42,414
continuously monitors and the progress of attacks and early detect

418
00:28:42,542 --> 00:28:46,230
any effects due to fault injection which will basically control

419
00:28:46,300 --> 00:28:50,038
the blast radius. Chaos analyzer analyzes the

420
00:28:50,044 --> 00:28:53,298
scores and generates the report. So possible recommendations

421
00:28:53,474 --> 00:28:57,014
to include for updating any security rules for

422
00:28:57,052 --> 00:29:00,678
security groups. If you are creating any energy rules

423
00:29:00,774 --> 00:29:05,002
that can be added or enhanced because

424
00:29:05,056 --> 00:29:09,610
of understanding after the simulation recommendations

425
00:29:10,210 --> 00:29:15,822
and restriction of access as well as making

426
00:29:15,876 --> 00:29:19,790
sure access control policies are intact. So all these are the

427
00:29:19,860 --> 00:29:23,460
important recommendations can be derived from

428
00:29:24,150 --> 00:29:28,334
chaos engineering experience. So various

429
00:29:28,382 --> 00:29:32,126
test category there are spoofing of user

430
00:29:32,158 --> 00:29:35,942
identity and other entities then tempering the s three

431
00:29:35,996 --> 00:29:40,102
or RDS or redshift kind of a data store privacy breach or

432
00:29:40,156 --> 00:29:43,830
data leaks there are misconfigured default security groups,

433
00:29:44,490 --> 00:29:48,202
denial of service, destroy cloud services configurations and data

434
00:29:48,256 --> 00:29:52,330
store and then elevation of privilege

435
00:29:53,550 --> 00:29:57,046
to basically add some users and assets, account to existing

436
00:29:57,078 --> 00:30:00,622
roles or groups with higher privileges and then check

437
00:30:00,756 --> 00:30:04,238
if are you getting the security alerts or not. Basically checking the security

438
00:30:04,324 --> 00:30:08,286
alerts is important aspect to validate all

439
00:30:08,308 --> 00:30:12,366
those scenarios. Validating baseline security requirements, assign some

440
00:30:12,388 --> 00:30:16,246
public IP to your components and compromise

441
00:30:16,378 --> 00:30:20,098
with the internal resources and then check the security center

442
00:30:20,184 --> 00:30:24,658
is validating and providing the alerts or not so

443
00:30:24,824 --> 00:30:28,526
scenario are also there with respect to plays

444
00:30:28,558 --> 00:30:32,166
of slinger and cloud strike. So one is scenario is

445
00:30:32,188 --> 00:30:35,686
misconfigured port change and s three bucket permission changes. So you have

446
00:30:35,708 --> 00:30:39,098
list of energy and then you need to select those energy

447
00:30:39,264 --> 00:30:42,614
that are tagged with the opt in tag for chaos.

448
00:30:42,742 --> 00:30:46,314
Randomly select any energy and apply random open

449
00:30:46,352 --> 00:30:50,054
or close action based on the port configuration. Chaos linger

450
00:30:50,182 --> 00:30:53,806
will help to apply those configuration changes and then there is

451
00:30:53,828 --> 00:30:57,710
generator components which starts experimenting and performs port

452
00:30:57,780 --> 00:31:01,134
equation and change the port and then you need to track

453
00:31:01,172 --> 00:31:04,350
the changes. Verify events are triggered in security

454
00:31:04,500 --> 00:31:08,098
center alerts or not. So that is one of the scenario that you

455
00:31:08,104 --> 00:31:11,538
can test it and then three bucket permission changes.

456
00:31:11,704 --> 00:31:15,026
You have to create one user new user get a list of all

457
00:31:15,048 --> 00:31:19,110
the buckets in the cloud with respect to AWS or Azure or

458
00:31:19,180 --> 00:31:22,870
GCP. So select random bucket from the set of buckets

459
00:31:23,290 --> 00:31:27,230
in the cloud and configure attack points using these chaos

460
00:31:27,410 --> 00:31:30,758
tools. Then simulate bucket unavailability

461
00:31:30,854 --> 00:31:34,874
by changing bucket ACL from allow to deny and tool

462
00:31:34,912 --> 00:31:38,346
will apply the configurated changes tool starts the

463
00:31:38,368 --> 00:31:42,026
security experience and you will get the real time insights of the

464
00:31:42,048 --> 00:31:45,674
chaos engineering tool set for the experience

465
00:31:45,872 --> 00:31:49,078
and then you can monitor the AWS cloud watch and verify

466
00:31:49,174 --> 00:31:52,060
events are triggered in security center or not.

467
00:31:52,870 --> 00:31:56,814
So there are two things. One is testing

468
00:31:56,942 --> 00:32:00,690
with the penetration testing and all those things. And also it is very important

469
00:32:00,760 --> 00:32:04,206
to making sure you are creating

470
00:32:04,238 --> 00:32:07,446
automated dashboard and continuously monitoring the

471
00:32:07,548 --> 00:32:10,946
security and reliability. So apart

472
00:32:10,978 --> 00:32:14,354
from that you have to create a customized Slo

473
00:32:14,402 --> 00:32:17,826
monitoring dashboards. Use of automated root cause analysis

474
00:32:17,858 --> 00:32:21,882
without the automation it is very difficult to because

475
00:32:21,936 --> 00:32:25,978
lot of data is getting created and then it is very difficult to making sure

476
00:32:26,064 --> 00:32:30,380
pinpointing any component and issues in the production system.

477
00:32:30,690 --> 00:32:34,270
The use of automated root cause analysis is going to use

478
00:32:34,340 --> 00:32:37,706
anomaly detection and suspect ranking. Automated machine

479
00:32:37,738 --> 00:32:41,274
learning is applied using the python,

480
00:32:41,402 --> 00:32:45,266
Skype, skit learn and all those things. So these are the automated dashboard that you

481
00:32:45,288 --> 00:32:49,218
can create and then understand where is the anomaly, identify the

482
00:32:49,224 --> 00:32:52,930
anomaly and detect it very rapidly.

483
00:32:56,730 --> 00:33:00,854
The summary here is the

484
00:33:00,892 --> 00:33:05,318
cultural aspect of SRE to embed security

485
00:33:05,404 --> 00:33:08,598
along with reliability, implement SRE

486
00:33:08,694 --> 00:33:12,694
practices in devsecops like security, chaos engineering, improve organization,

487
00:33:12,742 --> 00:33:16,986
defense and zero trusted network and then making sure

488
00:33:17,088 --> 00:33:20,874
reliability and security integrated into design and deployment

489
00:33:20,922 --> 00:33:24,922
process. You have to making sure eliminate reliability

490
00:33:24,986 --> 00:33:28,698
security related bottlenecks with continuous delivery in a production

491
00:33:28,714 --> 00:33:32,462
pipeline and bridging the gaps with security practices while

492
00:33:32,516 --> 00:33:35,310
ensuring quick and safe deliverables.

493
00:33:35,810 --> 00:33:39,854
Eliminate all the siloed team and with increased collaboration

494
00:33:39,902 --> 00:33:43,454
and shared security responsibility and reliability driven development.

495
00:33:43,502 --> 00:33:46,894
These are the aspect takeaway from this session.

496
00:33:47,022 --> 00:33:50,790
Hope you enjoyed this session and then I will leave with you.

497
00:33:50,940 --> 00:33:55,030
Two quotes so SRE work is like being a part of the world's most

498
00:33:55,100 --> 00:33:59,142
intense pit crew. We change the tires

499
00:33:59,206 --> 00:34:03,658
of a race as it's going 100 mph.

500
00:34:03,744 --> 00:34:07,322
So that's a quote from Andrew from

501
00:34:07,376 --> 00:34:10,570
Sre at Google. And then

502
00:34:10,640 --> 00:34:13,934
another quote is you need to continuously evolve and

503
00:34:13,972 --> 00:34:17,486
change. What's dangerous is not to evolve. That's a quote from

504
00:34:17,508 --> 00:34:20,990
Jeff Bezos. And then it's very important to understand

505
00:34:21,140 --> 00:34:24,000
and then continuously evolve with the new changes.

506
00:34:25,330 --> 00:34:28,922
So thank you very much. Hope you enjoyed this session.

507
00:34:28,986 --> 00:34:32,330
And if any questions, please reach out to me either on LinkedIn,

508
00:34:32,410 --> 00:34:35,990
Twitter and Klokta at

509
00:34:36,060 --> 00:34:38,920
9987 on Discord. Thank you very much.

