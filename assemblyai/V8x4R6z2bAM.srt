1
00:00:23,290 --> 00:00:27,186
Hi everyone, welcome to my my session on how to absorb

2
00:00:27,218 --> 00:00:31,618
your APIs with API gateway and it is plugins.

3
00:00:31,794 --> 00:00:35,926
My name is Babur. I'm a developer advocate for Apache API six.

4
00:00:36,028 --> 00:00:39,586
You can reach out to me on these following social channels

5
00:00:39,698 --> 00:00:43,042
regarding the sessions and feedback. If you have any additional

6
00:00:43,106 --> 00:00:46,806
questions, feel free to drop me. We can jump in, call and discuss

7
00:00:46,988 --> 00:00:50,910
about the restings how you can API

8
00:00:51,250 --> 00:00:55,120
so today we're going to speak about

9
00:00:56,690 --> 00:00:59,918
APIs first because

10
00:01:00,004 --> 00:01:03,802
the APIs nowadays is one of the important core

11
00:01:03,866 --> 00:01:07,966
component on building software, right? And then we

12
00:01:07,988 --> 00:01:11,330
will discuss what is API observability.

13
00:01:11,670 --> 00:01:15,306
And then I will give a short intro recap

14
00:01:15,358 --> 00:01:18,742
how to say about API gateway and how

15
00:01:18,796 --> 00:01:23,074
API gateway can be the central point for observation.

16
00:01:23,202 --> 00:01:26,422
We're going to also have a look,

17
00:01:26,476 --> 00:01:30,426
this kind of section, and also you

18
00:01:30,448 --> 00:01:34,346
will learn what's the Apache API six, and then how to

19
00:01:34,368 --> 00:01:38,554
use Apache API six API gateway for

20
00:01:38,592 --> 00:01:42,394
you to observe your APIs. And we can also dive

21
00:01:42,442 --> 00:01:46,302
into some of the API observability three

22
00:01:46,356 --> 00:01:49,898
pillars like logging, tracing and metrics,

23
00:01:49,994 --> 00:01:53,710
and learn how Apache pay six can

24
00:01:53,860 --> 00:01:58,142
provide this kind of observability

25
00:01:58,286 --> 00:02:01,438
capability. And then at the end we'll

26
00:02:01,454 --> 00:02:04,638
have a small demo on the usage of this Apache

27
00:02:04,654 --> 00:02:08,050
API six API gateway plugins for observability.

28
00:02:08,550 --> 00:02:11,720
So with Z plan, let's get started.

29
00:02:13,610 --> 00:02:17,126
APIs, just three letters, right? By now

30
00:02:17,228 --> 00:02:21,094
we are all familiar with this term API acronym

31
00:02:21,142 --> 00:02:24,554
for application programming interface. We are

32
00:02:24,592 --> 00:02:28,374
living because in very increasingly

33
00:02:28,422 --> 00:02:31,662
API centric world, every service used

34
00:02:31,716 --> 00:02:35,598
today either uses an API or we

35
00:02:35,604 --> 00:02:40,106
can assume that it's API itself, right? And API

36
00:02:40,138 --> 00:02:43,826
is becoming very central in building

37
00:02:43,928 --> 00:02:45,860
and delivering your services.

38
00:02:47,190 --> 00:02:51,314
Also, you know, the success of your services

39
00:02:51,512 --> 00:02:53,890
depends on the integrity,

40
00:02:54,810 --> 00:02:58,210
availability and performance of your APIs.

41
00:02:58,370 --> 00:03:01,942
One of the tactics we usually apply

42
00:03:02,076 --> 00:03:06,082
is to retain all three concerns

43
00:03:06,226 --> 00:03:09,414
in this slide by continuously monitoring

44
00:03:09,462 --> 00:03:12,540
our APIs, right? And for example,

45
00:03:13,070 --> 00:03:16,934
we call it like API monitoring, right? Or traditionally

46
00:03:16,982 --> 00:03:20,750
this API monitoring, sure. I mean it does

47
00:03:20,820 --> 00:03:24,026
help you to stay on top of uptime,

48
00:03:24,218 --> 00:03:26,750
security and the performance.

49
00:03:27,330 --> 00:03:31,178
However, it is limited because traditional

50
00:03:31,274 --> 00:03:34,542
monitoring focuses on tracking

51
00:03:34,686 --> 00:03:38,914
noun unknowns. This means you already know what

52
00:03:38,952 --> 00:03:42,594
to measure, like request per second or

53
00:03:42,712 --> 00:03:46,914
errors per second. And traditional API monitoring

54
00:03:47,042 --> 00:03:50,918
also lets you monitor the system health and

55
00:03:51,004 --> 00:03:54,646
on the other hand, the performance, but cannot help you to

56
00:03:54,748 --> 00:03:58,694
identify and troubleshoot what's exactly causing

57
00:03:58,742 --> 00:04:02,426
the issues. On the other hand,

58
00:04:02,528 --> 00:04:06,170
observability involves analyzing

59
00:04:07,070 --> 00:04:11,166
unknowns versus to now and unknowns. When you

60
00:04:11,268 --> 00:04:15,722
imagine of the monitoring

61
00:04:15,866 --> 00:04:19,134
as monitoring was about kind of measuring things,

62
00:04:19,252 --> 00:04:22,662
but you know how to predict them in advance.

63
00:04:22,746 --> 00:04:26,446
And various observability helps

64
00:04:26,478 --> 00:04:30,082
you to understand how and why do things

65
00:04:30,216 --> 00:04:30,900
happen.

66
00:04:33,910 --> 00:04:37,666
Focus on what you cannot see. We call it unknowns.

67
00:04:37,698 --> 00:04:41,302
Right? Observability is a cool thing to find

68
00:04:41,356 --> 00:04:45,590
out all the unknowns in your APIs.

69
00:04:46,410 --> 00:04:50,370
And what is the API observability? So we know observability

70
00:04:50,450 --> 00:04:54,710
means identifying unknowns unknowns. But API

71
00:04:55,230 --> 00:04:59,130
is all about making your API more observable.

72
00:04:59,630 --> 00:05:03,066
Instead of relying on predetermined

73
00:05:03,178 --> 00:05:06,958
metrics or monitoring or waiting for

74
00:05:07,044 --> 00:05:10,682
the failure to happen, API lets

75
00:05:10,826 --> 00:05:14,850
you dive into the unknown unknowns of your APIs

76
00:05:15,270 --> 00:05:19,022
by observing how they work internally.

77
00:05:19,166 --> 00:05:22,530
And API observability also is ability to understand

78
00:05:22,600 --> 00:05:26,162
the system behavior and investigate

79
00:05:26,226 --> 00:05:30,418
the interactions between your application's components.

80
00:05:30,514 --> 00:05:34,066
It provides for your APIs like tracers,

81
00:05:34,178 --> 00:05:36,230
metrics and loggers.

82
00:05:38,510 --> 00:05:41,866
And nowadays API observability is

83
00:05:41,968 --> 00:05:46,410
already part of every API development

84
00:05:47,310 --> 00:05:51,930
as it addresses many problems related to the API consistency,

85
00:05:52,090 --> 00:05:57,130
real ability and ability to quickly iterate

86
00:05:57,210 --> 00:05:59,550
on new API features.

87
00:06:00,450 --> 00:06:04,030
When you design for full stack observability,

88
00:06:06,050 --> 00:06:09,554
you're getting everything you need, right? To find

89
00:06:09,592 --> 00:06:13,486
the issues catch breaking changes and API

90
00:06:13,518 --> 00:06:18,070
observability is not just used to troubleshoot engineering issues,

91
00:06:18,220 --> 00:06:22,022
but also it can also help

92
00:06:22,076 --> 00:06:25,960
troubleshoot other business and security problems.

93
00:06:26,890 --> 00:06:30,466
As you can see in the next slide, each teams

94
00:06:30,578 --> 00:06:34,330
needs API solubility for the different purposes.

95
00:06:35,230 --> 00:06:38,966
Let's take for engineering, it provides

96
00:06:39,078 --> 00:06:43,374
clear definition on how to implement the APIs for

97
00:06:43,412 --> 00:06:47,102
the product managers to understand adoption and

98
00:06:47,156 --> 00:06:51,818
consumption of your APIs, or the line of businesses

99
00:06:51,994 --> 00:06:55,394
need to see the business value that your

100
00:06:55,432 --> 00:06:59,166
API bringing in areas such as monetization,

101
00:06:59,358 --> 00:07:03,246
customer adoption and new changes opportunities

102
00:07:03,358 --> 00:07:06,982
like when you are establishing new integration or

103
00:07:07,036 --> 00:07:11,160
new business integrating with other APIs, or the

104
00:07:11,530 --> 00:07:15,462
security teams to detect and protect from any

105
00:07:15,516 --> 00:07:19,142
API threats. And here the question rises

106
00:07:19,206 --> 00:07:23,158
like what is the easiest way to make our API observable?

107
00:07:23,254 --> 00:07:26,762
You can ask me. So there are

108
00:07:26,816 --> 00:07:30,570
many solutions, right, in our modern era,

109
00:07:31,330 --> 00:07:35,710
but one of the simplest quick solution

110
00:07:36,370 --> 00:07:40,366
that came into my mind right now is by

111
00:07:40,388 --> 00:07:44,302
using API gateway, right? Because API observability

112
00:07:44,446 --> 00:07:49,170
is a sort of data collection process, API gateway,

113
00:07:49,510 --> 00:07:52,834
you can think of just a framework to

114
00:07:52,872 --> 00:07:56,422
manage your applications in the API world.

115
00:07:56,556 --> 00:08:01,298
Of course, API gateway is further extended with countless

116
00:08:01,394 --> 00:08:05,106
built in plugins to handle other cross cutting concerns.

117
00:08:05,138 --> 00:08:08,726
In addition to API observability like consoles

118
00:08:08,758 --> 00:08:10,460
like authentication, security,

119
00:08:11,150 --> 00:08:14,938
authorization, traffic control and

120
00:08:15,104 --> 00:08:19,114
many more. And most of observability platforms like

121
00:08:19,232 --> 00:08:22,698
promoters skywalking, open telemetry,

122
00:08:22,794 --> 00:08:26,858
and others, they can easily integrate with Apache

123
00:08:26,874 --> 00:08:30,634
API six and then you can leverage these connectors to ingest

124
00:08:30,682 --> 00:08:34,498
the log data from your API gateways to

125
00:08:34,504 --> 00:08:39,122
the further down into

126
00:08:39,176 --> 00:08:42,466
the services that you have, and you

127
00:08:42,488 --> 00:08:46,014
can drive useful metrics from there and

128
00:08:46,072 --> 00:08:49,590
also gain a complete visibility into the usage.

129
00:08:50,570 --> 00:08:54,086
Also you can manage the performance on

130
00:08:54,108 --> 00:08:58,326
the API gateway side and the security of your APIs in

131
00:08:58,348 --> 00:09:02,246
your own environment. I mean, because most

132
00:09:02,268 --> 00:09:06,374
of the modern API gateway providers, they are very

133
00:09:06,492 --> 00:09:09,902
cloud native, you can use them

134
00:09:09,996 --> 00:09:13,994
in every public cloud, or the private cloud, or the hybrid

135
00:09:14,042 --> 00:09:17,726
clouds. So what

136
00:09:17,748 --> 00:09:21,390
is the Apache API six? It is part of

137
00:09:21,460 --> 00:09:24,674
Apache Software foundation, you may already know

138
00:09:24,712 --> 00:09:28,290
the world's largest open source foundation, and I believe

139
00:09:28,360 --> 00:09:31,940
some of you are already part of this community.

140
00:09:32,310 --> 00:09:35,714
And nowadays it's one of the fastest

141
00:09:35,762 --> 00:09:39,570
growing top projects of Apache software Foundation,

142
00:09:39,730 --> 00:09:43,618
like you can think of Apache, Kafka or Cassandra,

143
00:09:43,714 --> 00:09:46,838
Hadoop, Tomcat and so on.

144
00:09:47,004 --> 00:09:51,114
Apache API six provides custom plugin development because

145
00:09:51,152 --> 00:09:55,094
we have some existing plugins and there is possibility

146
00:09:55,222 --> 00:09:58,490
to create a new plugins. You can write

147
00:09:58,560 --> 00:10:02,510
custom plugins in programming language you are very

148
00:10:02,580 --> 00:10:05,550
familiar with, like Java, Python,

149
00:10:05,970 --> 00:10:08,750
Go, Javascript, et cetera.

150
00:10:09,890 --> 00:10:14,210
And also there's another mechanism called plugins orchestration

151
00:10:14,550 --> 00:10:18,322
where you can see the list of

152
00:10:18,456 --> 00:10:22,098
existing plugins on the Apache PS six

153
00:10:22,184 --> 00:10:25,602
Ui dashboard and you can easily

154
00:10:25,746 --> 00:10:29,398
drag and drop the plugins into the drawing board

155
00:10:29,484 --> 00:10:33,202
to combine them, right? And you define some conditions.

156
00:10:33,346 --> 00:10:37,282
For example, as you can see on this scenario,

157
00:10:37,346 --> 00:10:40,702
like we can start with authentication TWT,

158
00:10:40,786 --> 00:10:44,858
and then if authentication successful we can run another

159
00:10:44,944 --> 00:10:48,502
plugin by orchestrating

160
00:10:48,566 --> 00:10:52,714
and by putting them in a row, and also by collecting

161
00:10:52,762 --> 00:10:56,430
this couple of plugins together, you can create your own plugin.

162
00:10:56,770 --> 00:11:00,618
Bringing our attention back to the observability.

163
00:11:00,794 --> 00:11:04,942
We say the core observability breaks down

164
00:11:04,996 --> 00:11:09,494
into three key areas, right? And like structured

165
00:11:09,562 --> 00:11:13,682
blocks, metrics and traces. Let's break

166
00:11:13,736 --> 00:11:17,638
down each pillar of this API observability and

167
00:11:17,724 --> 00:11:21,634
learn how Apache basics plugins can simplify

168
00:11:21,762 --> 00:11:24,998
these tasks. Let's have a look.

169
00:11:25,164 --> 00:11:28,870
Logging or locks logs

170
00:11:28,950 --> 00:11:32,262
are also easy to instrument

171
00:11:32,406 --> 00:11:36,486
and very trivial steps for API observability,

172
00:11:36,598 --> 00:11:41,550
right? Because each API event logged

173
00:11:42,210 --> 00:11:46,106
whenever some kind of API operation is in voic.

174
00:11:46,298 --> 00:11:50,030
And also you can collect some logs to

175
00:11:50,100 --> 00:11:53,534
debug your system. You can gain this analytic

176
00:11:53,582 --> 00:11:57,006
insights into your API activities.

177
00:11:57,198 --> 00:12:01,278
Also they can be used to inspect API calls

178
00:12:01,374 --> 00:12:04,318
in real time for debugging,

179
00:12:04,414 --> 00:12:08,690
auditing and record. Also you can put some time steps

180
00:12:08,770 --> 00:12:12,486
for each logs to identify events that happened

181
00:12:12,588 --> 00:12:15,800
over time. So how

182
00:12:16,570 --> 00:12:19,946
do these logs managed by the

183
00:12:19,968 --> 00:12:23,658
API gateway? Like API six, it provides, for example,

184
00:12:23,744 --> 00:12:26,986
some logger plugins because the

185
00:12:27,008 --> 00:12:30,586
API gateway sits in the middle, right, every request coming into

186
00:12:30,608 --> 00:12:34,518
the API gateway and then this request

187
00:12:34,694 --> 00:12:38,586
sent over to the back end or upstream

188
00:12:38,618 --> 00:12:41,802
services and in the middle means API gateway,

189
00:12:41,866 --> 00:12:46,302
able to collect all the logs and several

190
00:12:46,366 --> 00:12:49,906
logs logging plugins available as you can see

191
00:12:49,928 --> 00:12:53,502
in the picture like HTTP logger, basic logger.

192
00:12:53,566 --> 00:12:57,574
We're going to look also quickly today, or some other

193
00:12:57,612 --> 00:13:01,538
loggers you can see in the screen like error

194
00:13:01,714 --> 00:13:05,478
logger, the Google Cloud logger or kafka logger that

195
00:13:05,564 --> 00:13:09,046
collects kafka event logs and sends to

196
00:13:09,068 --> 00:13:12,662
the kafka clusters. For example

197
00:13:12,796 --> 00:13:15,850
STP logger plugin, as I said,

198
00:13:16,000 --> 00:13:19,954
capable of pushing clock data requests

199
00:13:20,022 --> 00:13:24,430
to HTTP or HTTPs servers

200
00:13:24,930 --> 00:13:28,494
and in a JSON format. Or it

201
00:13:28,532 --> 00:13:32,590
can also send these JSON files to the monitoring tools.

202
00:13:32,950 --> 00:13:37,140
We will look at these monitoring tools later on

203
00:13:37,750 --> 00:13:39,620
or the next. For example,

204
00:13:41,110 --> 00:13:45,178
the second pillar of API survey like metrics

205
00:13:45,294 --> 00:13:48,978
analyzing metrics like metrics, just numeric

206
00:13:49,154 --> 00:13:53,842
representation of data that collected

207
00:13:53,906 --> 00:13:58,214
over intervals of time. You can also aggregate

208
00:13:58,262 --> 00:14:01,450
these metrics into daily or weekly,

209
00:14:01,790 --> 00:14:04,170
maybe monthly frequency,

210
00:14:04,670 --> 00:14:09,014
and run the queries against distributed

211
00:14:09,062 --> 00:14:13,006
systems like elasticsearch. Or sometimes based on

212
00:14:13,028 --> 00:14:16,574
the metrics. You can trigger alerts to

213
00:14:16,612 --> 00:14:20,890
take any action later with action groups.

214
00:14:21,050 --> 00:14:24,178
Once API metrics are collected, you can track

215
00:14:24,264 --> 00:14:27,870
them with metrics tracking tools such as Prometheus.

216
00:14:28,030 --> 00:14:32,014
For this, Apache six provides a Prometheus plugins.

217
00:14:32,142 --> 00:14:36,094
It's capable of fetching all the API metrics

218
00:14:36,142 --> 00:14:39,954
data and you can show these metrics exported

219
00:14:40,002 --> 00:14:43,926
by the plugins on Grafana visually at

220
00:14:43,948 --> 00:14:48,310
the end in the demo section I included. You will also see

221
00:14:48,380 --> 00:14:51,846
how to enable this promatus HTTP

222
00:14:51,878 --> 00:14:55,002
logger plugin. And the last one, but not least one,

223
00:14:55,056 --> 00:14:58,554
is sort of scrabbit pillar is

224
00:14:58,592 --> 00:15:02,426
tracing, or we call it sometimes distributed

225
00:15:02,458 --> 00:15:05,982
tracing. It allows you to understand the life

226
00:15:06,036 --> 00:15:09,790
of request as it traverses your service

227
00:15:09,860 --> 00:15:14,098
networks, allows you to answer questions like

228
00:15:14,184 --> 00:15:17,822
what service has this request touched?

229
00:15:17,886 --> 00:15:24,482
Or how much latency was introduced by

230
00:15:24,536 --> 00:15:28,962
this API request. And for example Zipkin,

231
00:15:29,026 --> 00:15:33,218
one of the tracer plugins

232
00:15:33,314 --> 00:15:36,886
Apache PSX provides. There are other plugins also if

233
00:15:36,908 --> 00:15:40,918
you look at the Apache PSX official website, like skywalking

234
00:15:41,094 --> 00:15:44,940
for example, and let's say

235
00:15:45,470 --> 00:15:49,434
Zipkin also open source project, it also

236
00:15:49,472 --> 00:15:53,646
provides some distributed tracing. You can enable this

237
00:15:53,828 --> 00:15:57,386
Apache Zipkin plugins to collect tracing

238
00:15:57,498 --> 00:16:01,082
and report them to the Zipkin collector

239
00:16:01,226 --> 00:16:04,610
based on the Zipkin API specification.

240
00:16:05,190 --> 00:16:08,770
Or you can visualize it on the Zipkin Ui.

241
00:16:09,830 --> 00:16:13,902
So with enough suratical knowledge

242
00:16:14,046 --> 00:16:18,630
up to now, we can jump into the demo session

243
00:16:19,930 --> 00:16:23,334
about using these three

244
00:16:23,452 --> 00:16:28,002
plugins, HTTP Logger and Zipkin

245
00:16:28,146 --> 00:16:31,962
and Prometheus plugin. Together we

246
00:16:32,096 --> 00:16:36,646
apply this plugin for our existing

247
00:16:36,838 --> 00:16:41,146
ESP net the core web API with API

248
00:16:41,178 --> 00:16:44,990
six we're going to run matt container app

249
00:16:45,140 --> 00:16:48,286
with back end. I mean in the

250
00:16:48,308 --> 00:16:51,358
back end we have product API. Let's say it has a

251
00:16:51,364 --> 00:16:55,460
single endpoint that gets all the product list.

252
00:16:56,070 --> 00:16:59,506
You can assume we have this online market

253
00:16:59,688 --> 00:17:03,700
that lists products on the main page and

254
00:17:04,070 --> 00:17:07,874
this endpoint to get all this product

255
00:17:07,992 --> 00:17:11,334
information or metadata. And then we have

256
00:17:11,372 --> 00:17:15,000
this database just

257
00:17:15,770 --> 00:17:19,274
in memory database we will run also we run

258
00:17:19,312 --> 00:17:22,966
API six and eTCD together with Docker

259
00:17:22,998 --> 00:17:26,662
compose. And then we can configure

260
00:17:26,726 --> 00:17:30,514
this API six upstream

261
00:17:30,662 --> 00:17:33,274
and road for the product API.

262
00:17:33,322 --> 00:17:37,790
Because upstream and road very critical

263
00:17:38,370 --> 00:17:42,754
concepts in API gateway. Upstream means your

264
00:17:42,792 --> 00:17:46,674
backend service. Not only one, it can be more backend services,

265
00:17:46,792 --> 00:17:50,094
right? And also rod

266
00:17:50,142 --> 00:17:54,130
means just set of rules based

267
00:17:54,200 --> 00:17:58,022
on which criteria to

268
00:17:58,076 --> 00:18:01,426
pass these requests to the responsible upstreams.

269
00:18:01,618 --> 00:18:05,462
We can also create this route also in this demo

270
00:18:05,516 --> 00:18:09,830
session and then we will enable for these robot

271
00:18:11,130 --> 00:18:14,570
HTTP logger prompters and zipkin plugins.

272
00:18:14,910 --> 00:18:18,202
All these code samples you can find on my

273
00:18:18,256 --> 00:18:21,946
repo API net Docker

274
00:18:22,138 --> 00:18:26,090
on GitHub. You can check out the branch API observability

275
00:18:26,170 --> 00:18:29,710
branch and you can also see the command line

276
00:18:29,860 --> 00:18:33,650
examples. On my case

277
00:18:33,800 --> 00:18:38,126
I am using Docker

278
00:18:38,158 --> 00:18:41,986
desktop. I can show you here. As you can see

279
00:18:42,088 --> 00:18:46,440
I have a couple of containers running

280
00:18:47,930 --> 00:18:52,710
along with Docker.

281
00:18:53,130 --> 00:18:57,186
Let's say we have API sticks, Prometheus Grafana

282
00:18:57,378 --> 00:19:01,258
and the dashboard API six dashboard also up

283
00:19:01,264 --> 00:19:04,938
and running. And also I have some other like

284
00:19:05,024 --> 00:19:08,666
Zipkin and skywalking UI some

285
00:19:08,688 --> 00:19:12,174
of the containers. But it's not important to run all

286
00:19:12,212 --> 00:19:15,886
these containers. You can just run for example the

287
00:19:15,988 --> 00:19:18,960
one that is in the report.

288
00:19:19,490 --> 00:19:23,040
And now if you open the project

289
00:19:24,210 --> 00:19:27,060
API Net Docker API project,

290
00:19:27,590 --> 00:19:31,620
you can see some folders here,

291
00:19:32,470 --> 00:19:36,374
the folders, I mean like the

292
00:19:36,492 --> 00:19:39,702
API six config files, API six log

293
00:19:39,756 --> 00:19:43,334
files where you can see all the API six

294
00:19:43,452 --> 00:19:46,982
provided access logs or error logs. If something went wrong,

295
00:19:47,036 --> 00:19:50,742
you can dive into the logs and

296
00:19:50,796 --> 00:19:54,314
observe the next. Also I

297
00:19:54,352 --> 00:19:58,700
have this product API just ASP net

298
00:19:59,070 --> 00:20:02,574
project with a docker file also to

299
00:20:02,612 --> 00:20:05,902
run this API. And then I have the

300
00:20:05,956 --> 00:20:10,670
docker compose file that runs all these images

301
00:20:11,010 --> 00:20:14,818
and creates containers together. And the command line

302
00:20:14,904 --> 00:20:18,740
examples here for how to enable all the three

303
00:20:20,710 --> 00:20:24,642
the plugins. Okay, now we can

304
00:20:24,696 --> 00:20:28,374
start as a first step, we can start

305
00:20:28,412 --> 00:20:32,600
with creating upstream for our backend service.

306
00:20:33,050 --> 00:20:36,402
As you can see, I have prepared

307
00:20:36,466 --> 00:20:40,200
all this Carl command example in the code.

308
00:20:40,810 --> 00:20:43,862
For example, Apache API six provides

309
00:20:43,926 --> 00:20:49,514
admin API to interact with all

310
00:20:49,552 --> 00:20:53,174
these upstreams. I mean to manage all the upstreams

311
00:20:53,222 --> 00:20:57,038
or the roles or the services, you can always

312
00:20:57,124 --> 00:21:00,730
hit this admin panel

313
00:21:00,890 --> 00:21:04,110
and for example to create upstream or to create a rod.

314
00:21:04,190 --> 00:21:07,618
In my case I'm creating upstream with the product

315
00:21:07,704 --> 00:21:11,698
API as a backend service. And then

316
00:21:11,864 --> 00:21:15,578
by default we are using just around robin algorithm.

317
00:21:15,694 --> 00:21:19,110
It doesn't matter if you don't put this it will choose around

318
00:21:19,180 --> 00:21:23,014
Robin API six. In our case

319
00:21:23,052 --> 00:21:26,214
we have single node. That's why

320
00:21:26,252 --> 00:21:29,638
we don't have to care about much this

321
00:21:29,804 --> 00:21:33,782
algorithm case. And then if you notice

322
00:21:33,846 --> 00:21:37,382
also each request we're sending

323
00:21:37,446 --> 00:21:40,954
with API key securely to talk to the

324
00:21:40,992 --> 00:21:44,606
admin API. So first thing first, let's create

325
00:21:44,788 --> 00:21:48,560
the first upstream. I will just copy this

326
00:21:49,490 --> 00:21:52,934
common example and then pass to my terminal

327
00:21:53,082 --> 00:21:56,978
and press enter. As you can see now API six

328
00:21:57,144 --> 00:22:01,122
returns out a successful response. It means

329
00:22:01,256 --> 00:22:05,670
everything is good and everything

330
00:22:05,740 --> 00:22:09,030
is good and then our upstream is created.

331
00:22:10,170 --> 00:22:13,190
So once we have upstream created

332
00:22:15,290 --> 00:22:19,110
next we can create a route

333
00:22:20,250 --> 00:22:24,726
with HTTP logger plugin enabler in

334
00:22:24,748 --> 00:22:28,794
the Apache API six you can define the name for

335
00:22:28,832 --> 00:22:32,270
your route and also which HTTP method

336
00:22:35,090 --> 00:22:38,574
you would like to put as a matching criteria or

337
00:22:38,612 --> 00:22:42,742
the Uri which Uri pass heated

338
00:22:42,826 --> 00:22:46,546
and then this request send API stream like kind

339
00:22:46,568 --> 00:22:49,780
of rules. And also you can list

340
00:22:50,230 --> 00:22:53,726
what kind of plugins you would like to enable

341
00:22:53,838 --> 00:22:57,240
for the given URa. In my case

342
00:22:57,770 --> 00:23:01,734
it's saying I would like to enable HTTP logger plugin so

343
00:23:01,772 --> 00:23:05,110
that each time the request receive it,

344
00:23:05,180 --> 00:23:10,802
we log this request and send to this mockwin.org

345
00:23:10,946 --> 00:23:15,310
just HTTP log services. Chris Collard

346
00:23:15,410 --> 00:23:18,970
the logs will be sent to the log server and as you

347
00:23:19,040 --> 00:23:23,246
also see here, I am also showing this upstream id.

348
00:23:23,428 --> 00:23:27,086
It means in previous step we create upstream id. We are

349
00:23:27,108 --> 00:23:30,670
just now referencing bytes unique id

350
00:23:30,820 --> 00:23:34,266
to this upstream. So let's

351
00:23:34,378 --> 00:23:37,746
copy this command and pass to

352
00:23:37,768 --> 00:23:41,518
the terminal as well to enable HTTP logger plugin.

353
00:23:41,694 --> 00:23:46,082
If I bring this example kernel

354
00:23:46,146 --> 00:23:49,910
command example and run this comment

355
00:23:50,330 --> 00:23:53,814
API six return a successful response and

356
00:23:53,852 --> 00:23:57,538
now we can validate if

357
00:23:57,644 --> 00:24:00,918
this plugin is working correctly

358
00:24:01,094 --> 00:24:06,410
we can send request to our API

359
00:24:07,230 --> 00:24:10,794
products endpoint. This is our single endpoint

360
00:24:10,842 --> 00:24:15,534
that just simply returns us the

361
00:24:15,572 --> 00:24:18,846
product list. Like we have only two single products but

362
00:24:18,868 --> 00:24:22,222
we might have more. And now some

363
00:24:22,276 --> 00:24:26,420
logs should be recorded and sent to

364
00:24:26,790 --> 00:24:29,700
our mock server. Let's test it.

365
00:24:30,310 --> 00:24:34,002
If we go to this link and check our

366
00:24:34,056 --> 00:24:37,974
logs provided by API six sent to this

367
00:24:38,092 --> 00:24:41,570
server, I can open my browser

368
00:24:41,650 --> 00:24:44,402
and navigate to mock bin.

369
00:24:44,546 --> 00:24:48,440
It means this is just mock server returning us

370
00:24:49,070 --> 00:24:52,666
this response. But if you do logs it

371
00:24:52,688 --> 00:24:56,090
should show us some kind of logs.

372
00:24:57,550 --> 00:25:00,510
Yeah, let me do log maybe.

373
00:25:00,580 --> 00:25:04,814
Yes, now you can see some of the logs even

374
00:25:04,932 --> 00:25:08,430
a year ago sent. But if you scroll down

375
00:25:08,500 --> 00:25:12,334
and see a few seconds ago some

376
00:25:12,452 --> 00:25:15,060
other logs sent by API six.

377
00:25:15,590 --> 00:25:20,046
And here you can also observe

378
00:25:20,158 --> 00:25:24,420
what are the logs sent by API six. All these

379
00:25:24,890 --> 00:25:29,222
log values. You can also check on the website what

380
00:25:29,276 --> 00:25:33,170
kind of logs usually API six sent to the server, et cetera.

381
00:25:33,330 --> 00:25:37,442
Now we demonstrated like simply how

382
00:25:37,516 --> 00:25:41,318
HTTP logger plugins works, right? We created upstream

383
00:25:41,414 --> 00:25:45,062
and then we created rot. We also map

384
00:25:45,206 --> 00:25:48,874
given rot and upstream together and

385
00:25:48,912 --> 00:25:52,720
we enabled also one plugin. The next maybe

386
00:25:53,410 --> 00:25:57,040
step we can test also the next plugins we have,

387
00:25:57,410 --> 00:26:00,750
let's say promatus plugin. This is also

388
00:26:00,820 --> 00:26:04,802
enabling Prometheus plugin is very similar to the step

389
00:26:04,936 --> 00:26:09,010
with HTTP logger plugin. You need to just define

390
00:26:09,910 --> 00:26:13,758
inside the plugins object this an object the plugins

391
00:26:13,854 --> 00:26:17,640
Prometheus plugin name. We are just

392
00:26:18,410 --> 00:26:22,130
making this Prometheus configuration

393
00:26:22,290 --> 00:26:25,750
as empty. But there are some of the attributes

394
00:26:26,170 --> 00:26:29,542
for promoters plugin you can also define.

395
00:26:29,606 --> 00:26:32,220
You can check them on API six website.

396
00:26:32,750 --> 00:26:37,114
Now I can run this curl command to enable the

397
00:26:37,152 --> 00:26:40,414
Prometheus plugin. I can

398
00:26:40,452 --> 00:26:42,750
just copy this comment,

399
00:26:44,930 --> 00:26:48,366
let me take this command and also pass to my

400
00:26:48,388 --> 00:26:52,890
terminal if I run and press enter, all good.

401
00:26:53,060 --> 00:26:56,500
And now the Prometheus plugin should be

402
00:26:57,190 --> 00:27:01,026
enabled. And then if you return

403
00:27:01,128 --> 00:27:05,206
back to

404
00:27:05,228 --> 00:27:08,934
this example and run, let's say one

405
00:27:08,972 --> 00:27:12,534
more time hit endpoint. I mean our

406
00:27:12,572 --> 00:27:14,710
API products endpoint.

407
00:27:16,650 --> 00:27:19,526
Let me hit one more time. As you can see yeah it's responding.

408
00:27:19,558 --> 00:27:23,178
But what about metrics? We should be

409
00:27:23,184 --> 00:27:26,374
able to see metrics right after we requested

410
00:27:26,422 --> 00:27:29,718
this endpoint. Let's see what kind of metrics API

411
00:27:29,734 --> 00:27:33,434
six collecting to get

412
00:27:33,472 --> 00:27:36,906
these metrics you can navigate to API

413
00:27:36,938 --> 00:27:41,440
six promatusmetrics, but you can change this pass

414
00:27:41,970 --> 00:27:45,150
under Prometheus config file.

415
00:27:46,130 --> 00:27:49,618
Sorry, this is here below.

416
00:27:49,704 --> 00:27:53,902
For example, you can see the metrics pass. You can define

417
00:27:53,966 --> 00:27:58,550
whatever metrics pass you would like to with some targets.

418
00:27:58,890 --> 00:28:02,722
In my case I have one target in config

419
00:28:02,786 --> 00:28:07,350
the API six target. And if I run these metrics

420
00:28:08,350 --> 00:28:11,642
to get some metric comments, you can see

421
00:28:11,696 --> 00:28:15,046
lots of metrics returned by API six like API

422
00:28:15,078 --> 00:28:18,902
six bandwidth, some ETCD modifying indexes

423
00:28:19,046 --> 00:28:22,862
and some latency information. And importantly we

424
00:28:22,916 --> 00:28:27,162
have this API six HTTP status metric

425
00:28:27,226 --> 00:28:30,894
available. That's actually our call when we

426
00:28:30,932 --> 00:28:34,314
did this API products call

427
00:28:34,372 --> 00:28:38,146
and as you can see it's collecting some HTTP code information

428
00:28:38,328 --> 00:28:42,580
and also route number and

429
00:28:43,030 --> 00:28:46,854
code IP address like from which code this

430
00:28:46,892 --> 00:28:50,454
request sent. Also we

431
00:28:50,492 --> 00:28:56,200
can visually see these metrics because

432
00:28:56,730 --> 00:29:00,706
by going to this localhost

433
00:29:00,738 --> 00:29:04,426
1990 targets on your service target because we are

434
00:29:04,448 --> 00:29:06,970
running also a promoters container.

435
00:29:07,390 --> 00:29:10,570
If you go to these targets

436
00:29:12,610 --> 00:29:16,586
you can see I have API

437
00:29:16,618 --> 00:29:19,994
six up and running this promoted metrics

438
00:29:20,042 --> 00:29:23,134
and just local host metrics and

439
00:29:23,172 --> 00:29:26,758
you can see by filtering API six HTTP

440
00:29:26,794 --> 00:29:31,522
status only metrics. Some of the graphs available with

441
00:29:31,576 --> 00:29:35,906
these matching uras how

442
00:29:35,928 --> 00:29:39,654
you see from on the promises ui. But you can also see

443
00:29:39,692 --> 00:29:42,694
these metrics on Grafana in this easiest way.

444
00:29:42,892 --> 00:29:46,326
Most of the developments teams now

445
00:29:46,508 --> 00:29:50,810
use the Grafana as a dashboard.

446
00:29:51,310 --> 00:29:55,942
Now if I navigate

447
00:29:56,006 --> 00:29:59,366
to another local host port where Grafana

448
00:29:59,398 --> 00:30:02,926
dashboard is running, I think it's in 3000.

449
00:30:03,108 --> 00:30:07,662
Here you can see that the Apache API six the

450
00:30:07,716 --> 00:30:12,080
dashboard, whereas some data will be sent

451
00:30:12,530 --> 00:30:15,806
from promoters to the Grafana dashboard.

452
00:30:15,838 --> 00:30:20,130
But here is empty data because we need to configure

453
00:30:21,270 --> 00:30:25,066
by configure some settings

454
00:30:25,198 --> 00:30:28,098
on the Apache six configuration file.

455
00:30:28,274 --> 00:30:31,926
So next, the last one. Let's try

456
00:30:31,948 --> 00:30:36,482
to enable the Zipkin plugins as a tracer

457
00:30:36,626 --> 00:30:40,566
and see how Apache Ps six zipkin

458
00:30:40,598 --> 00:30:44,060
plugin can collect the trace information.

459
00:30:45,070 --> 00:30:49,366
So I can just get this similar configuration

460
00:30:49,478 --> 00:30:53,662
plugin configuration for the zipkin. We can

461
00:30:53,716 --> 00:30:57,962
define the endpoint for this zipkin

462
00:30:58,106 --> 00:31:02,758
API. As you can see I'm giving directly

463
00:31:02,954 --> 00:31:06,866
the IP address of my container. In real

464
00:31:06,968 --> 00:31:10,850
case you should have the IP address of your server

465
00:31:11,350 --> 00:31:15,474
for this metric. The tracers and the same

466
00:31:15,672 --> 00:31:18,980
we are using referencing to upstream id.

467
00:31:19,350 --> 00:31:23,334
I will copy this carol command and let's pass to

468
00:31:23,372 --> 00:31:27,174
the terminal and press enter. Now the

469
00:31:27,292 --> 00:31:30,554
Zipkin plugins is enabled and we

470
00:31:30,592 --> 00:31:34,250
can test it by maybe

471
00:31:34,400 --> 00:31:38,540
sending some kind of API request once again.

472
00:31:41,410 --> 00:31:45,134
And then we can go to for example on the

473
00:31:45,332 --> 00:31:49,214
browser, open the

474
00:31:49,252 --> 00:31:52,898
Zipkin server and see

475
00:31:52,984 --> 00:31:56,370
if we have some kind of tracers available

476
00:31:56,520 --> 00:31:58,980
by the API six server name.

477
00:32:00,230 --> 00:32:04,274
Yeah, if you press run a query in

478
00:32:04,392 --> 00:32:08,134
2 seconds, the query should show

479
00:32:08,172 --> 00:32:12,322
the result. And as you can see, there's one API request

480
00:32:12,386 --> 00:32:15,270
that we did against API products,

481
00:32:15,340 --> 00:32:17,830
endpoint and some here the details,

482
00:32:19,070 --> 00:32:20,890
the tracing details.

483
00:32:22,350 --> 00:32:25,834
Of course here we have single service, but if

484
00:32:25,872 --> 00:32:29,930
you have a couple of services you can see how

485
00:32:30,080 --> 00:32:33,914
tracing works properly. So it

486
00:32:33,952 --> 00:32:37,214
was the last plugin and for today I would

487
00:32:37,252 --> 00:32:41,520
like to show you, but you can now ask the questions like why

488
00:32:42,210 --> 00:32:45,682
you are enabling single plugin at a given

489
00:32:45,736 --> 00:32:49,214
time instead of using all the plugins

490
00:32:49,262 --> 00:32:52,580
together. What if I would like to use three plugins together?

491
00:32:52,950 --> 00:32:57,074
Is it possible? Yes, of course it's possible. You can,

492
00:32:57,112 --> 00:33:00,994
for example this API six enable multiple plugins

493
00:33:01,042 --> 00:33:03,480
together. I have this example also.

494
00:33:04,010 --> 00:33:07,974
Let's say you can run multiple

495
00:33:08,022 --> 00:33:12,394
plugins for the given role just by

496
00:33:12,512 --> 00:33:15,850
defining inside

497
00:33:15,920 --> 00:33:19,702
the plugins object all the plugins you would like to

498
00:33:19,856 --> 00:33:23,722
enable. For example, if I just copy this command

499
00:33:23,786 --> 00:33:26,830
and again this pass to the terminal,

500
00:33:27,410 --> 00:33:31,626
we just simply enabled three plugins together like HTTP,

501
00:33:31,658 --> 00:33:35,540
logger and tracer. And also

502
00:33:36,070 --> 00:33:40,386
the metrics three plugins and

503
00:33:40,408 --> 00:33:44,842
also if you navigate to Apache API six official

504
00:33:45,006 --> 00:33:48,646
website official website let

505
00:33:48,668 --> 00:33:52,870
me bring here on the browser.

506
00:33:53,210 --> 00:33:56,150
Here's API six apache.org.

507
00:33:56,650 --> 00:34:00,250
You can find some documentation under

508
00:34:00,320 --> 00:34:03,738
the plugin session, or you can take a look how to

509
00:34:03,744 --> 00:34:07,638
get started. There are some azure observability plugins

510
00:34:07,814 --> 00:34:11,578
as you can see divided into by tracer and metrics

511
00:34:11,594 --> 00:34:14,894
loggers. Let's say you can find all the logger plugins here and

512
00:34:14,932 --> 00:34:19,114
all the metrics plugins like a data doc or the tracers

513
00:34:19,162 --> 00:34:23,074
like oftentelemetry, also widely used as

514
00:34:23,112 --> 00:34:26,882
a tracer tool. So with

515
00:34:26,936 --> 00:34:30,462
that we are close to finish. Let me jump

516
00:34:30,526 --> 00:34:34,866
into my slides at

517
00:34:34,888 --> 00:34:38,050
the end. As I mentioned earlier,

518
00:34:38,490 --> 00:34:42,406
on the top of observability plugins you can use some of the

519
00:34:42,508 --> 00:34:45,846
plugins API six provides, like for the

520
00:34:45,868 --> 00:34:49,642
traffic management. For example, you can use limit count plugin and

521
00:34:49,696 --> 00:34:54,154
feel free to check out other available plugins on

522
00:34:54,192 --> 00:34:57,820
the Apache API six official website.

523
00:34:58,750 --> 00:35:02,714
Again, thank you a lot to join

524
00:35:02,762 --> 00:35:06,366
me today and I hope

525
00:35:06,388 --> 00:35:10,282
you get some kind of knowledge about observability

526
00:35:10,426 --> 00:35:13,680
and API observability and also how to

527
00:35:15,250 --> 00:35:18,906
make API observable by using API gateways

528
00:35:19,018 --> 00:35:21,534
like open source Apache API six.

529
00:35:21,732 --> 00:35:25,574
So now if you have any questions, feel free

530
00:35:25,612 --> 00:35:28,290
to ask. You can leave in the chat.

