1
00:01:54,090 --> 00:01:57,726
Hi everyone. My name is Joseph Hydrop. I'm a

2
00:01:57,748 --> 00:02:00,938
researcher and software developer at Endolabs.

3
00:02:01,114 --> 00:02:04,978
In this session, I'm going to talk about going beyond metadata

4
00:02:05,034 --> 00:02:08,562
are why we need to think of adapting static analysis

5
00:02:08,626 --> 00:02:12,086
in dependency tools. This talk in general

6
00:02:12,188 --> 00:02:15,510
is largely based on my PhD work, where I've been

7
00:02:15,580 --> 00:02:19,274
adopting static analysis to better understand dependencies and

8
00:02:19,312 --> 00:02:23,340
how we are using third party components in general.

9
00:02:25,150 --> 00:02:28,394
Before we dive into why

10
00:02:28,432 --> 00:02:32,026
we even want to consider static analysis in general, I think

11
00:02:32,048 --> 00:02:35,486
it's a good idea to understand why we are doing

12
00:02:35,668 --> 00:02:39,134
software reuse in the first place. And I think it's always a nice thing

13
00:02:39,172 --> 00:02:42,754
to see what are like the key principles and key

14
00:02:42,792 --> 00:02:46,066
ideas on software reuse. And I happen to

15
00:02:46,088 --> 00:02:49,922
find a very interesting article from the US

16
00:02:49,976 --> 00:02:53,454
Department of Commerce that is a management

17
00:02:53,502 --> 00:02:56,610
guideline to how we should do software reuse.

18
00:02:56,770 --> 00:03:01,106
And in this guideline there are a few core principles

19
00:03:01,138 --> 00:03:04,646
that I found very interesting on how software reuse should

20
00:03:04,668 --> 00:03:06,120
be as an experience.

21
00:03:07,710 --> 00:03:11,206
And there are two principles

22
00:03:11,238 --> 00:03:14,954
that I found very interesting. One was on productivity. And here

23
00:03:14,992 --> 00:03:18,486
we can find that it says reusing well designed,

24
00:03:18,518 --> 00:03:22,910
well developed, and well documented software improves productivity and

25
00:03:23,060 --> 00:03:26,400
reduces software development time, cost and risk. Right?

26
00:03:27,090 --> 00:03:31,066
And then there's the other aspect of software reuse,

27
00:03:31,098 --> 00:03:34,758
which is improvements in the quality of software developed

28
00:03:34,794 --> 00:03:38,654
from well designed, well tested, and well documented reusable software

29
00:03:38,702 --> 00:03:42,258
components. And here we can see that

30
00:03:42,424 --> 00:03:45,454
in general, when we want to use third party components,

31
00:03:45,502 --> 00:03:48,962
right, we would like it. Of course, we want to

32
00:03:49,016 --> 00:03:52,226
reduce software development time, but at the same time, we also want to reduce

33
00:03:52,258 --> 00:03:55,698
risk. And when we are also using third party components,

34
00:03:55,714 --> 00:03:59,386
we also expect them to be well tested, well documented, so that

35
00:03:59,408 --> 00:04:01,994
there is as little friction as possible.

36
00:04:02,112 --> 00:04:05,946
Right? And the

37
00:04:05,968 --> 00:04:09,542
way we have, let's say, implemented these principles,

38
00:04:09,606 --> 00:04:13,120
and that's, I think what many of you are familiar with are

39
00:04:13,970 --> 00:04:17,534
mainly package managers. And here is an example of

40
00:04:17,572 --> 00:04:22,106
using NPM. With NPM directly

41
00:04:22,138 --> 00:04:25,940
from our command line, we can access

42
00:04:26,470 --> 00:04:28,930
thousands of libraries and frameworks.

43
00:04:29,910 --> 00:04:33,614
And whenever we want to use a library

44
00:04:33,662 --> 00:04:37,074
to solve a particular problem, we can directly hit NPM,

45
00:04:37,122 --> 00:04:40,454
install the package name, and it will make

46
00:04:40,492 --> 00:04:43,480
it available to the workspace without any problems.

47
00:04:44,010 --> 00:04:47,782
And then the third part, which also is really nice, is that it's very

48
00:04:47,836 --> 00:04:51,610
easy to publish a package. So if you're developing something

49
00:04:51,680 --> 00:04:55,402
that could be useful for the rest of the world to use, it's very simple

50
00:04:55,456 --> 00:04:59,366
to use these packet managers as a distribution

51
00:04:59,558 --> 00:05:00,300
channel.

52
00:05:02,290 --> 00:05:05,502
And there are, of course,

53
00:05:05,636 --> 00:05:08,990
some problems with using package managers.

54
00:05:09,490 --> 00:05:12,078
And I'm going to highlight some of the problems.

55
00:05:12,164 --> 00:05:16,130
So the first problem when we look at in general,

56
00:05:16,200 --> 00:05:19,726
is that whenever we install a third party

57
00:05:19,838 --> 00:05:23,614
component or library, we often end up importing

58
00:05:23,662 --> 00:05:27,698
not only one, we can be importing ten or even hundreds,

59
00:05:27,794 --> 00:05:32,226
or in some cases even thousands of dependencies.

60
00:05:32,258 --> 00:05:36,374
So for example, in this one here, we can see that it says like

61
00:05:36,492 --> 00:05:40,006
building 194 out of 307 dependencies.

62
00:05:40,038 --> 00:05:44,522
So that is quite a lot. And these

63
00:05:44,576 --> 00:05:48,122
dependency trees are not a simple tree structure, but they're also

64
00:05:48,176 --> 00:05:52,602
quite complex, because sometimes you can even have dependencies

65
00:05:52,666 --> 00:05:56,714
that are from the same library but contain different versions.

66
00:05:56,762 --> 00:06:00,286
So if you see in the figure to the left here, we can

67
00:06:00,308 --> 00:06:03,618
see that it has accepts 1.38, but at the

68
00:06:03,624 --> 00:06:06,590
same time there is also accepts 2.80,

69
00:06:06,750 --> 00:06:10,066
right? And what is like the

70
00:06:10,088 --> 00:06:13,406
other aspect of dependencies in some of the packet

71
00:06:13,438 --> 00:06:17,234
managers, we also have that there are version

72
00:06:17,282 --> 00:06:20,806
ranges. So we have that, for example, if I

73
00:06:20,828 --> 00:06:25,638
install accepts today, I get 1.3.7,

74
00:06:25,804 --> 00:06:29,194
whereas if I do, three days later it's 1.3 point

75
00:06:29,232 --> 00:06:32,646
twelve. So it's constantly changing.

76
00:06:32,678 --> 00:06:36,410
And these are like some of the properties with dependency management,

77
00:06:39,230 --> 00:06:43,242
and then at a more global

78
00:06:43,386 --> 00:06:46,762
ecosystems level, I think whenever

79
00:06:46,826 --> 00:06:50,554
we read the news, we always comes to these headlines

80
00:06:50,602 --> 00:06:55,134
where some hackers manage to hide

81
00:06:55,182 --> 00:06:58,340
some malicious code, for examples like in the event stream tools,

82
00:06:59,590 --> 00:07:03,678
or with the very popular

83
00:07:03,774 --> 00:07:07,826
left pad, where some developers remove

84
00:07:07,858 --> 00:07:11,286
the package, making sure that the

85
00:07:11,308 --> 00:07:15,270
build systems wouldn't work for many other hundreds of thousands of

86
00:07:15,340 --> 00:07:20,186
clients. And these

87
00:07:20,208 --> 00:07:25,546
are lesser like the main type of problems that we find with

88
00:07:25,728 --> 00:07:27,340
package management in general.

89
00:07:29,790 --> 00:07:32,974
So how, or let's say we've been

90
00:07:33,012 --> 00:07:36,766
able to detect or identify these type

91
00:07:36,788 --> 00:07:40,698
of problems. So when it comes to the temporal properties,

92
00:07:40,874 --> 00:07:44,774
as I was saying, that if you're using, for example, the version ranges,

93
00:07:44,842 --> 00:07:48,734
you can easily use something called version pinning or lock files

94
00:07:48,782 --> 00:07:51,986
to ensure that whenever you build a project, you will

95
00:07:52,008 --> 00:07:56,254
make sure that exactly the same set of dependencies will be resolved

96
00:07:56,382 --> 00:08:00,322
every single time, and hopefully also within the same build environment

97
00:08:00,386 --> 00:08:03,734
as well. And for everything else that is

98
00:08:03,772 --> 00:08:07,730
related to, for example like malicious code, I was saying in the previous slide,

99
00:08:07,890 --> 00:08:11,594
or security bugs, or even when it comes to what

100
00:08:11,632 --> 00:08:15,306
are like major changes from one version to another, we have

101
00:08:15,328 --> 00:08:19,714
to rely of tooling. And commonly this could be dependency analyzer

102
00:08:19,862 --> 00:08:24,510
bots or even plugins in dependency management.

103
00:08:25,890 --> 00:08:29,326
And if we typically look like what is like the sort of

104
00:08:29,348 --> 00:08:33,970
workflow when we use a dependency analyzer bot or plugin,

105
00:08:34,310 --> 00:08:37,262
so be it. For example for vulnerabilities, updates,

106
00:08:37,326 --> 00:08:41,540
audits, quality deprecation, whatever the problem is,

107
00:08:41,990 --> 00:08:45,726
we usually try to analyzers the dependency tree,

108
00:08:45,758 --> 00:08:49,334
which we can see like in the middle, and then based

109
00:08:49,372 --> 00:08:52,866
on the package that has a problem, for example, a security vulnerability.

110
00:08:52,978 --> 00:08:57,674
So we can see, for example on the bottom left

111
00:08:57,712 --> 00:09:01,546
corner, or maybe it's on your right corner, we can see that

112
00:09:01,728 --> 00:09:05,338
there's a path from the vulnerable package up all the way to

113
00:09:05,424 --> 00:09:06,410
the client.

114
00:09:08,910 --> 00:09:12,702
But the problem is that we are able

115
00:09:12,756 --> 00:09:16,414
to quickly identify which

116
00:09:16,452 --> 00:09:20,160
packages might be vulnerable. But as we can see

117
00:09:20,610 --> 00:09:23,966
at the end here, that there are a lot of false

118
00:09:23,998 --> 00:09:27,266
positives. And also just by knowing that there

119
00:09:27,288 --> 00:09:31,470
is a problem in a package may not be particularly actionable.

120
00:09:31,550 --> 00:09:35,234
Because some

121
00:09:35,272 --> 00:09:38,962
packages libraries can be relatively large, there might be many APIs,

122
00:09:39,026 --> 00:09:42,050
and if you're just using a small fraction of that package,

123
00:09:42,210 --> 00:09:46,342
you may not in the end be vulnerable. And some warnings are simply not

124
00:09:46,396 --> 00:09:50,570
relevant depending on how you are using a third party library.

125
00:09:53,470 --> 00:09:57,066
So if you see how well we have done based on these

126
00:09:57,248 --> 00:09:59,420
principles from the 1980s,

127
00:10:00,370 --> 00:10:04,682
we could say that with, let's say like package

128
00:10:04,746 --> 00:10:08,670
managers, we're able to quickly reduce software development time,

129
00:10:08,740 --> 00:10:12,830
cost, but perhaps, maybe not with risks.

130
00:10:15,410 --> 00:10:18,974
And so the

131
00:10:19,012 --> 00:10:23,074
question here is like, is this,

132
00:10:23,112 --> 00:10:26,502
let's say like problems that we are having with packet manager? Is it like a

133
00:10:26,556 --> 00:10:29,990
typical classic alert fatigue?

134
00:10:30,890 --> 00:10:34,962
I think not. So the reason why is that metadata

135
00:10:35,026 --> 00:10:38,690
is not source code, and most of the analyzers

136
00:10:38,850 --> 00:10:42,826
base on analyzing metadata. And the

137
00:10:42,848 --> 00:10:46,998
problem here is that it does not really equate with usage.

138
00:10:47,174 --> 00:10:50,734
So how one client or user use a third

139
00:10:50,772 --> 00:10:55,034
party library is very different from how another person or package

140
00:10:55,082 --> 00:10:58,960
might be using a third party library. So it is very different.

141
00:11:02,210 --> 00:11:05,700
And the other rule is that we need to start making

142
00:11:06,070 --> 00:11:09,806
code first class citizens.

143
00:11:09,998 --> 00:11:13,086
And the reason why I'm saying that we need to make the first class citizens

144
00:11:13,118 --> 00:11:16,406
is that if you are just going to report, for example, like in the

145
00:11:16,428 --> 00:11:20,182
dependency tree, that package green version 1.2

146
00:11:20,236 --> 00:11:22,998
is vulnerable. It doesn't really tell much,

147
00:11:23,084 --> 00:11:26,582
but if you, for example, use some type of code

148
00:11:26,636 --> 00:11:30,390
structure, it could be, for example like ast structures,

149
00:11:30,470 --> 00:11:33,850
core graphs, et cetera. I could, for example,

150
00:11:33,920 --> 00:11:37,594
say that, hey, the function like bus

151
00:11:37,712 --> 00:11:42,522
is the one that is vulnerable in this green package one version

152
00:11:42,666 --> 00:11:45,966
two. And if there is a reachable path from

153
00:11:45,988 --> 00:11:49,146
that to, let's say like the main function of the client,

154
00:11:49,338 --> 00:11:52,826
we can clearly see that this client

155
00:11:52,858 --> 00:11:56,370
is impacted by it. But if there aren't, for example,

156
00:11:56,520 --> 00:12:00,722
any reachable paths, it could also be a way for us to conclude that this

157
00:12:00,776 --> 00:12:05,022
package, I mean, this user, is not affected by it. And by

158
00:12:05,096 --> 00:12:08,598
already starting to discuss with code, we are also in a

159
00:12:08,604 --> 00:12:12,194
way making developers, let's say, more involved

160
00:12:12,242 --> 00:12:16,066
on how these alerts or warnings,

161
00:12:16,098 --> 00:12:20,166
et cetera, is actually related to how we are using code.

162
00:12:20,348 --> 00:12:23,898
And discussing around codes also makes discussions, I think,

163
00:12:23,984 --> 00:12:27,546
much more actionable and also much more easier to

164
00:12:27,568 --> 00:12:30,990
understand what is like the efforts needed to

165
00:12:31,060 --> 00:12:34,702
solve a problem or how much of a code is actually

166
00:12:34,756 --> 00:12:39,406
impacted. And one

167
00:12:39,428 --> 00:12:44,346
sort of main concern is that, okay, great. But it's

168
00:12:44,378 --> 00:12:47,214
very expensive to run program analysis tools,

169
00:12:47,262 --> 00:12:51,250
and usually it's not very scalable if you have many dependencies.

170
00:12:51,670 --> 00:12:55,880
And with the example that I had earlier, for example, I was showing that one

171
00:12:56,250 --> 00:12:59,910
package might have like 300 or 500 dependencies.

172
00:13:00,410 --> 00:13:04,086
So the concerns are actually valid, because usually when

173
00:13:04,108 --> 00:13:07,622
we do program analysis, the scope is usually around

174
00:13:07,676 --> 00:13:11,018
the project, right? But now we're expanding that scope to

175
00:13:11,104 --> 00:13:15,340
the entire dependency, which makes it more difficult.

176
00:13:16,190 --> 00:13:19,706
And because I have a bit of an

177
00:13:19,808 --> 00:13:22,926
academic background, I've been doing, let's say like analysis of the

178
00:13:22,948 --> 00:13:27,086
whole rust ecosystem. I was able to build all

179
00:13:27,108 --> 00:13:31,534
the packages that were at least compilable packages in

180
00:13:31,732 --> 00:13:35,426
ten days without much problems. And I think

181
00:13:35,448 --> 00:13:39,394
the major trade off or thing to consider here is that

182
00:13:39,592 --> 00:13:43,406
the ponders is not to really build program analysis

183
00:13:43,438 --> 00:13:46,686
tools that are relatively advanced or resource consuming,

184
00:13:46,718 --> 00:13:50,278
but to aim for something that is lightweight. Because the

185
00:13:50,284 --> 00:13:54,214
main argument I have is that using something lightweight is

186
00:13:54,252 --> 00:13:58,402
probably more, better and more actionable than just looking at metadata declarations

187
00:13:58,466 --> 00:13:59,240
in general.

188
00:14:01,850 --> 00:14:05,414
And there are of course like many questions. Like some

189
00:14:05,452 --> 00:14:09,002
I feel, for example, like, hey, for my dependency tool or

190
00:14:09,056 --> 00:14:12,330
me as a tool maker using program analysis, overkill.

191
00:14:12,490 --> 00:14:16,126
Or like in my product we have a lot of

192
00:14:16,228 --> 00:14:18,880
python Javascript developers. What about them?

193
00:14:19,810 --> 00:14:22,966
Then there's the aspect of false negatives.

194
00:14:23,098 --> 00:14:27,394
My security customer won't be happy about it. So how

195
00:14:27,432 --> 00:14:30,466
do we deal with all these type of questions?

196
00:14:30,568 --> 00:14:33,986
So to answer this, I of

197
00:14:34,008 --> 00:14:37,782
course put my research hat on and started

198
00:14:37,836 --> 00:14:41,350
doing some research. And I think to better sort of understand

199
00:14:41,420 --> 00:14:44,838
these trade offs, I first looked at a

200
00:14:44,844 --> 00:14:48,586
very interesting, simple thing. So what is the difference in the

201
00:14:48,608 --> 00:14:52,086
number of reported dependencies between traditional metadata

202
00:14:52,118 --> 00:14:55,610
based approaches versus program analyzers? Approaches?

203
00:14:56,750 --> 00:15:00,346
And I did this for the

204
00:15:00,448 --> 00:15:03,726
entire rust ecosystem. So if you're very interested to know about the

205
00:15:03,748 --> 00:15:07,310
work down below, there's reference to

206
00:15:07,380 --> 00:15:11,082
this paper that I worked on, and this is based on the rust

207
00:15:11,146 --> 00:15:14,466
ecosystem. So in

208
00:15:14,488 --> 00:15:17,986
the figure we have box plots of

209
00:15:18,168 --> 00:15:21,618
three data sources, and I'm not going to

210
00:15:21,624 --> 00:15:25,942
go into the detail of it, but all

211
00:15:25,996 --> 00:15:29,960
of these data sources report what is

212
00:15:30,490 --> 00:15:33,990
the number of direct dependencies per package. And this

213
00:15:34,060 --> 00:15:38,330
comes from all packages in the rust ecosystem.

214
00:15:38,830 --> 00:15:42,842
And what we can find in general here is that for

215
00:15:42,896 --> 00:15:46,298
networks that are metadata based, that is basically

216
00:15:46,384 --> 00:15:49,722
the crates IO and docsrs data

217
00:15:49,776 --> 00:15:53,722
sources in the figure are about

218
00:15:53,776 --> 00:15:57,262
the same as the prezi, and Pretzi is the one that is the call

219
00:15:57,316 --> 00:16:00,926
based, let's say like representation. So here we can

220
00:16:00,948 --> 00:16:04,480
see that the medians is similar, which means that

221
00:16:04,850 --> 00:16:08,830
the metadata based, let's say like number of direct dependencies,

222
00:16:08,910 --> 00:16:12,820
are closely approximating what

223
00:16:14,390 --> 00:16:18,200
the number of dependencies, like a static analysis tool would do.

224
00:16:18,730 --> 00:16:21,400
So what it is saying is that in general,

225
00:16:22,170 --> 00:16:26,018
if you are just counting, let's say like number of direct dependencies that you're

226
00:16:26,034 --> 00:16:29,674
using in your project, it is highly likely that you are

227
00:16:29,712 --> 00:16:33,580
using also those dependencies in real life as well.

228
00:16:34,990 --> 00:16:38,374
And then when we come to looking at transitive dependencies

229
00:16:38,422 --> 00:16:42,046
for the same data set, we are now seeing that there

230
00:16:42,068 --> 00:16:45,454
is some significant differences between them.

231
00:16:45,492 --> 00:16:48,830
So when we look at the median number of transitive dependencies,

232
00:16:50,130 --> 00:16:53,810
we can find that on average, if you just use

233
00:16:53,880 --> 00:16:56,450
metadata based representation,

234
00:16:57,190 --> 00:17:00,910
you will find that it reports, let's say like 17 dependencies.

235
00:17:00,990 --> 00:17:03,870
Whereas if you look into the usage,

236
00:17:03,950 --> 00:17:07,574
it's about six dependencies with

237
00:17:07,612 --> 00:17:11,394
usage, I mean, like looking at which dependencies

238
00:17:11,442 --> 00:17:13,960
are actually being used in source code.

239
00:17:14,970 --> 00:17:18,426
So indirectly, this also means that we

240
00:17:18,448 --> 00:17:22,186
are roughly not calling or using 60%

241
00:17:22,368 --> 00:17:25,580
of the result transfer dependencies. And we can see that

242
00:17:25,950 --> 00:17:28,380
there's a huge gap between them, right?

243
00:17:30,270 --> 00:17:33,966
So then the question is like, why is there such a huge gap between those

244
00:17:33,988 --> 00:17:37,360
transitive dependencies? So it could either be that

245
00:17:38,450 --> 00:17:42,998
there are some problems with the static analysis tooling,

246
00:17:43,194 --> 00:17:46,562
or actually the static analysis is correct in

247
00:17:46,696 --> 00:17:51,570
making the assessment that there are actually no edges to certain transitive dependencies.

248
00:17:51,990 --> 00:17:56,470
And to understand why this is the case, I manually analyzers

249
00:17:57,290 --> 00:18:01,030
34 dependency relationships to see whether,

250
00:18:01,180 --> 00:18:03,890
where basically they had certain differences,

251
00:18:03,970 --> 00:18:07,474
whether to see if the static analysis is

252
00:18:07,532 --> 00:18:11,654
correct or the metadata based approximation

253
00:18:11,702 --> 00:18:15,610
is correct. And the first,

254
00:18:15,680 --> 00:18:19,354
let's say, like, difference that I found was that in three

255
00:18:19,392 --> 00:18:22,430
of those 34 cases, there were no import statements,

256
00:18:23,490 --> 00:18:27,146
meaning that the dependencies were declared

257
00:18:27,178 --> 00:18:30,990
in the project, but they were actually not imported.

258
00:18:31,410 --> 00:18:35,338
And in the other case, I also found that there

259
00:18:35,364 --> 00:18:39,122
were like, data structures important, but they were actually never used with

260
00:18:39,176 --> 00:18:42,402
used, I mean, like, there were no function calls to it.

261
00:18:42,456 --> 00:18:46,520
They were not even used as argument types or even return times

262
00:18:47,210 --> 00:18:51,414
in the function. So this also shows that if

263
00:18:51,452 --> 00:18:55,398
you use static analysis, right, you can see this information

264
00:18:55,484 --> 00:18:58,954
directly whether something is used or not. Whereas in the other case

265
00:18:59,072 --> 00:19:02,522
where you just look at declaration and manifest data,

266
00:19:02,576 --> 00:19:03,740
you cannot see this.

267
00:19:07,150 --> 00:19:10,946
There were also some other interesting facts,

268
00:19:10,998 --> 00:19:15,390
like for example, we find one case of conditional compilation.

269
00:19:15,810 --> 00:19:19,120
There were also cases of macro libraries and also like

270
00:19:20,210 --> 00:19:23,974
a test dependency that was declared in the runtime

271
00:19:24,042 --> 00:19:27,746
section. And it's important to note that, and this

272
00:19:27,768 --> 00:19:31,774
is probably like a very rust specific finding that not all dependencies are runtime

273
00:19:31,822 --> 00:19:35,398
libraries. Because in the case of rust, for examples,

274
00:19:35,484 --> 00:19:39,590
you would like to maybe generate serialization deserialization

275
00:19:40,570 --> 00:19:44,418
data structures, and you can basically add those annotations

276
00:19:44,514 --> 00:19:48,650
to data structures. And whenever the code is compiled,

277
00:19:48,990 --> 00:19:52,090
all those data structures are automatically generated.

278
00:19:52,510 --> 00:19:55,674
But with those macro libraries, right, they are actually not

279
00:19:55,712 --> 00:19:59,562
really runtime libraries. But if you use look into it

280
00:19:59,696 --> 00:20:03,166
with a dependency tooling, you will not be able to make

281
00:20:03,188 --> 00:20:06,990
that distinction. So it will just show that there is a dependency

282
00:20:07,810 --> 00:20:10,640
from your project to this dependency, right?

283
00:20:13,010 --> 00:20:16,750
And the other thing is with the conditional

284
00:20:16,830 --> 00:20:20,606
compilation. So for example, if you have certain flags

285
00:20:20,638 --> 00:20:24,210
within your code, you can, let's say like if you enable this feature, for example,

286
00:20:24,280 --> 00:20:28,454
if you enable openssl, suddenly like a new code section is

287
00:20:28,492 --> 00:20:32,070
open, and if it's never compiled with that, right,

288
00:20:32,140 --> 00:20:35,750
then you might not be using code related in this code section.

289
00:20:36,970 --> 00:20:40,586
And I think in one case in this code section, certain dependencies were

290
00:20:40,608 --> 00:20:44,282
used, but in reality it was never compiled that way

291
00:20:44,336 --> 00:20:45,530
as a dependency.

292
00:20:48,350 --> 00:20:52,286
And then I think the largest difference that we found was that there

293
00:20:52,308 --> 00:20:55,962
are basically 16 times non reachable transfer dependencies.

294
00:20:56,026 --> 00:20:57,840
And what do we mean with this?

295
00:20:59,570 --> 00:21:03,870
So if you look here, how many dependencies is app version 1.0

296
00:21:03,940 --> 00:21:08,990
using? If you look from a package dependency

297
00:21:09,070 --> 00:21:13,054
network, if you just analyze the dependency relationships,

298
00:21:13,102 --> 00:21:16,130
we can see that app one depends on lib one,

299
00:21:16,200 --> 00:21:19,430
lib one depends on lib two, and lib two depends on lib three,

300
00:21:19,500 --> 00:21:22,440
right? This is what tools would normally report.

301
00:21:23,050 --> 00:21:26,454
If you use static analysis, we can see there is a function called

302
00:21:26,492 --> 00:21:30,646
from foo to bar. So that means that app is using lib

303
00:21:30,678 --> 00:21:34,186
one. And then from bar there is a call to used.

304
00:21:34,288 --> 00:21:37,834
And we can see that lib one is using lib two,

305
00:21:37,872 --> 00:21:41,294
right? But then here we can see that the

306
00:21:41,332 --> 00:21:44,894
whole reachable path from main foo bar goes

307
00:21:44,932 --> 00:21:47,120
to used and terminates it intern.

308
00:21:47,810 --> 00:21:51,002
And here we find that in lib two, which is a transitive

309
00:21:51,066 --> 00:21:54,266
dependency, unused is called used in lib three,

310
00:21:54,308 --> 00:21:57,714
but there is no path that leads from the

311
00:21:57,752 --> 00:22:00,530
app down all the way to lib tree.

312
00:22:00,870 --> 00:22:03,940
And those were the cases that we often found.

313
00:22:04,890 --> 00:22:09,286
And this really shows that context really matter. And if

314
00:22:09,308 --> 00:22:13,026
you think about if you are using, let's say like metadata

315
00:22:13,058 --> 00:22:17,382
based approach, we are directly assuming that all

316
00:22:17,436 --> 00:22:21,066
APIs of all direct dependencies are used, and then at the same time

317
00:22:21,088 --> 00:22:24,460
that all APIs of transitive dependencies are used, right?

318
00:22:24,990 --> 00:22:30,374
But if you see in the figure, right, that lib

319
00:22:30,422 --> 00:22:34,046
two has basically, let's say we can

320
00:22:34,068 --> 00:22:36,960
say like, it has like three APIs or three functions, right?

321
00:22:37,970 --> 00:22:41,214
But only one of those three functions are used, right.

322
00:22:41,332 --> 00:22:44,906
It could be another case where all the functions are used. Then of course lead

323
00:22:44,948 --> 00:22:48,750
three would be used. But it really shows her that context

324
00:22:48,830 --> 00:22:52,594
really matters. And that's something that we are not taking into account when we're using

325
00:22:52,712 --> 00:22:55,570
regular dependency analyzers.

326
00:22:56,890 --> 00:23:00,454
So now to sort of wrap up the

327
00:23:00,492 --> 00:23:04,482
talk, let's look around with the practical

328
00:23:04,546 --> 00:23:06,840
implications. Coming back to the question,

329
00:23:11,550 --> 00:23:14,758
what should we do? Should we use more like program analysis, or shouldn't

330
00:23:14,774 --> 00:23:18,250
we use program analysis when we do dependency analysis?

331
00:23:19,070 --> 00:23:21,470
So when it comes to direct dependencies,

332
00:23:22,450 --> 00:23:26,126
we found that declared dependencies closely estimates a

333
00:23:26,148 --> 00:23:29,134
utilized dependency, meaning that if,

334
00:23:29,172 --> 00:23:32,746
for example, you have use cases where it comes to counting

335
00:23:32,778 --> 00:23:36,722
the number of dependencies or you kind of want to know, are direct

336
00:23:36,776 --> 00:23:40,514
dependencies generally used or not, we found that you

337
00:23:40,552 --> 00:23:43,970
most likely would not need to implement any program analysis.

338
00:23:44,550 --> 00:23:48,406
And other of course benefit is that if you have a very security or

339
00:23:48,428 --> 00:23:51,442
soundness sensitive application where recall

340
00:23:51,506 --> 00:23:55,346
is important, then this also optimizes

341
00:23:55,378 --> 00:23:58,726
for that. But the downside is, which I was

342
00:23:58,748 --> 00:24:01,900
showing in the manual analyzers earlier, is that

343
00:24:02,350 --> 00:24:05,130
it will not be able to understand things like for example,

344
00:24:05,200 --> 00:24:08,394
if there are not missed import statements or

345
00:24:08,432 --> 00:24:11,120
no APIs being used, et cetera, right?

346
00:24:11,650 --> 00:24:15,518
And it can also not eliminate, for example,

347
00:24:15,604 --> 00:24:19,406
dependencies that are unused or had different purposes, like for

348
00:24:19,428 --> 00:24:23,810
example, code generation or being used as a test dependency.

349
00:24:27,270 --> 00:24:30,706
When it comes to transitive dependencies, we are much stronger here on

350
00:24:30,728 --> 00:24:34,850
that. You should probably prefer static analysis over metadata

351
00:24:35,590 --> 00:24:38,440
because, for example,

352
00:24:39,610 --> 00:24:42,646
if you depend on a parser library, for examples,

353
00:24:42,748 --> 00:24:46,550
and some part of the parser library might also depend on

354
00:24:46,620 --> 00:24:50,422
an additional reg x library. If you're not using any

355
00:24:50,476 --> 00:24:54,358
of the reg x functionality for this parcel, right, then you're

356
00:24:54,374 --> 00:24:59,098
not really using the

357
00:24:59,184 --> 00:25:03,040
reg x library. That is the transitive dependency here.

358
00:25:03,410 --> 00:25:06,846
And by looking at how

359
00:25:06,868 --> 00:25:10,382
we're using source code, we can directly understand

360
00:25:10,516 --> 00:25:13,954
what is the general context of how we're using, first the direct

361
00:25:13,992 --> 00:25:17,410
dependencies, but also like the transitive dependencies.

362
00:25:17,750 --> 00:25:21,934
And with applications

363
00:25:21,982 --> 00:25:25,380
having such large dependency trees, it makes a lot of sense

364
00:25:26,810 --> 00:25:29,954
to do more static

365
00:25:30,002 --> 00:25:34,070
analysis to help developers quickly know

366
00:25:34,220 --> 00:25:37,686
which dependency is problematic or not. Because if you have to

367
00:25:37,708 --> 00:25:41,250
manually go through your transitive dependencies, et cetera,

368
00:25:41,330 --> 00:25:44,522
and go through code, like for example,

369
00:25:44,576 --> 00:25:48,054
start from your own code, then you have to go to direct dependencies,

370
00:25:48,102 --> 00:25:52,270
for example, look it up on GitHub. Then further on going to those other

371
00:25:52,340 --> 00:25:55,520
dependency. It becomes a very tedious job.

372
00:25:56,370 --> 00:26:00,814
The only problem that can happen is that there

373
00:26:00,852 --> 00:26:04,066
are false negatives. The reason why

374
00:26:04,088 --> 00:26:07,954
is that static analysis has limitations, which I will talk

375
00:26:07,992 --> 00:26:11,522
in the next slide. But another challenging part

376
00:26:11,576 --> 00:26:14,450
is that with package repositories,

377
00:26:14,790 --> 00:26:19,410
these are not like a set of homogeneous

378
00:26:19,490 --> 00:26:22,582
libraries. These are very diverse libraries where for example,

379
00:26:22,636 --> 00:26:25,830
one library might be, for example, using a lot of

380
00:26:25,900 --> 00:26:29,606
static dispatch, whereas another library might solely

381
00:26:29,638 --> 00:26:33,574
be using different types of dynamic class loading

382
00:26:33,622 --> 00:26:36,966
or dynamic execution, which static analysis

383
00:26:36,998 --> 00:26:40,650
are not able to analyzers well.

384
00:26:40,800 --> 00:26:44,650
And in such cases, if for example, you're only going to analyze

385
00:26:44,810 --> 00:26:49,710
libraries that do a lot of class loading or dynamic

386
00:26:50,210 --> 00:26:54,106
that runs dynamic codes that are not done

387
00:26:54,148 --> 00:26:58,034
at compile time, then it might

388
00:26:58,152 --> 00:27:01,682
make more sense to use like a metadata based analysis because

389
00:27:01,816 --> 00:27:05,646
with static analysis you might not be able to actually capture relationships

390
00:27:05,678 --> 00:27:10,040
between packages and

391
00:27:11,530 --> 00:27:15,320
going to program analysis. As I was saying,

392
00:27:15,690 --> 00:27:19,146
there is this problem of false negatives. So you

393
00:27:19,168 --> 00:27:23,062
have to think about, for example, when it comes to recall.

394
00:27:23,126 --> 00:27:26,490
So if you're going to implement,

395
00:27:27,070 --> 00:27:31,050
for example, a call graph generator for a programming language,

396
00:27:31,490 --> 00:27:35,614
it's important to see what are the language features it

397
00:27:35,652 --> 00:27:38,846
covers. Because for example, in the case of

398
00:27:38,868 --> 00:27:41,950
Java, there are three popular core growth generators.

399
00:27:43,570 --> 00:27:46,850
One of them is like Vala, Opal and suit.

400
00:27:47,190 --> 00:27:50,398
And for example, when it comes to coverage of language features,

401
00:27:50,494 --> 00:27:54,574
like Opal has more coverage because it can handle, for example, Java eleven

402
00:27:54,622 --> 00:27:58,466
features, whereas Vala is not able to do that perfectly

403
00:27:58,498 --> 00:28:01,974
fine. The other thing is

404
00:28:02,012 --> 00:28:05,750
that there are language features that, for example,

405
00:28:05,820 --> 00:28:09,190
does dynamic class loading and dynamic dispatch.

406
00:28:10,270 --> 00:28:15,802
Here we will probably lose, let's say some

407
00:28:15,856 --> 00:28:19,450
precision, but I will still argue that it's better than metadata.

408
00:28:20,910 --> 00:28:24,138
And if you're going to aim for higher precision,

409
00:28:24,234 --> 00:28:28,750
like for example, if we handle dynamic dispatch, we might be linking

410
00:28:29,970 --> 00:28:33,418
a call site to all the implementations that are possible,

411
00:28:33,604 --> 00:28:37,586
that this can be, for example, tens or hundreds, because we

412
00:28:37,608 --> 00:28:41,774
cannot know exactly before at compile

413
00:28:41,822 --> 00:28:45,454
time, which let's say like implementation

414
00:28:45,502 --> 00:28:49,570
will be in box. We basically make the assumption that we link to all implementations,

415
00:28:49,730 --> 00:28:54,230
but there are algorithms that might be able to better

416
00:28:54,300 --> 00:28:57,526
reduce all the implementations. But the problem is

417
00:28:57,548 --> 00:29:01,530
that they might not scale when you start analyzing the entire

418
00:29:01,600 --> 00:29:04,220
dependency tree versus analyzing a project,

419
00:29:05,310 --> 00:29:09,194
and as I was saying before, the scope of analysis of

420
00:29:09,232 --> 00:29:12,614
project and its dependency tree. So you have to be careful

421
00:29:12,662 --> 00:29:16,238
about what type of analysis you would like to do on it.

422
00:29:16,404 --> 00:29:20,126
And the other thing that I was mentioning earlier, that package reports are not

423
00:29:20,148 --> 00:29:22,750
a homogeneous collection of libraries.

424
00:29:23,730 --> 00:29:27,550
The other consideration, for example, when it comes to languages

425
00:29:27,630 --> 00:29:30,766
like Python or JavaScript that are dynamic,

426
00:29:30,958 --> 00:29:33,730
it's very difficult to build a static call graph.

427
00:29:34,150 --> 00:29:38,150
But I would argue that there are some techniques that does like

428
00:29:38,220 --> 00:29:41,874
hybrid analyzers where you do part static analysis,

429
00:29:41,922 --> 00:29:45,602
but you also do part dynamic analysis to kind of create a hybrid

430
00:29:45,666 --> 00:29:49,078
representation of like a

431
00:29:49,084 --> 00:29:54,228
projector and

432
00:29:54,394 --> 00:29:57,972
yeah, that's it for me. I hope you enjoyed the talk,

433
00:29:58,026 --> 00:30:01,972
and if you have any questions or want to reach out to me, feel free

434
00:30:02,026 --> 00:30:03,690
to email to my address.

