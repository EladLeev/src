1
00:00:25,490 --> 00:00:29,842
Hello and welcome to this session of a story of how we accidentally

2
00:00:29,906 --> 00:00:33,458
created a cloud on top of our cloud. My name is Mophi.

3
00:00:33,474 --> 00:00:37,154
I'm a software engineer and developer advocate at IBM. I mostly do container

4
00:00:37,202 --> 00:00:41,106
stuff, collect stickers and write go code. I can be found on the Internet

5
00:00:41,218 --> 00:00:44,598
at mophicodes. So if you have any questions after or just want to connect,

6
00:00:44,684 --> 00:00:48,514
please feel free to find me at mophicodes. So before we start this session,

7
00:00:48,562 --> 00:00:51,934
the first definition that is important for us to understand is

8
00:00:51,972 --> 00:00:55,434
what is a cloud? Cloud is a very overloaded term.

9
00:00:55,482 --> 00:00:58,638
It means a lot of different things, a lot of different people. But for the

10
00:00:58,644 --> 00:01:02,094
purposes of this talk, and given IBM the one giving

11
00:01:02,132 --> 00:01:05,518
this talk, I get to define what cloud is in

12
00:01:05,524 --> 00:01:08,754
the context. So in simplest term, cloud is someone

13
00:01:08,792 --> 00:01:12,478
else's computer. It's on demand and it has a way for users

14
00:01:12,494 --> 00:01:15,902
to access the service. It could be a UI, it could be a CLI.

15
00:01:16,046 --> 00:01:19,426
Most notable clouds that you know has a UI that

16
00:01:19,448 --> 00:01:22,146
you can go and click some buttons also have a CLI. So you have multiple

17
00:01:22,178 --> 00:01:25,846
ways of accessing the cloud, but as long as it has some way, it can

18
00:01:25,868 --> 00:01:29,494
be a cloud. Now let's talk about the problem we

19
00:01:29,532 --> 00:01:33,622
initially started set out to solve. I work for IBM,

20
00:01:33,766 --> 00:01:37,274
we are in developer advocate. We have a cloud that we have

21
00:01:37,312 --> 00:01:41,114
a lot of workshops and other things that run. One of the most cost and

22
00:01:41,152 --> 00:01:44,666
time consuming workshops to run is Kubernetes workshops

23
00:01:44,778 --> 00:01:48,046
and we run quite a few of them. In a given month we do about

24
00:01:48,068 --> 00:01:51,726
ten to 20 of these workshops and that means about two

25
00:01:51,748 --> 00:01:55,322
to four a week in average. And each of this workshop

26
00:01:55,386 --> 00:01:58,846
requires about 30 of this Kubernetes cluster or openshift cluster to be spun

27
00:01:58,878 --> 00:02:02,818
up. It can go these highest we have done is probably 150. The lowest we

28
00:02:02,824 --> 00:02:06,146
have done is probably five or ten. But in average we're looking at about 30

29
00:02:06,168 --> 00:02:09,822
of this Kubernetes cluster, spinning up and spinning down cluster resources.

30
00:02:09,886 --> 00:02:12,966
If you are just like following the UI, it's a manual process, right? You are

31
00:02:12,988 --> 00:02:16,870
clicking buttons, filling in forms, or if you're the CLI, you are just

32
00:02:16,940 --> 00:02:20,546
typing in a command and youll can create one cluster

33
00:02:20,578 --> 00:02:24,102
at a time. Each cluster also requires access to load balancer

34
00:02:24,166 --> 00:02:27,466
and the subnet that we have per data center. There is

35
00:02:27,488 --> 00:02:30,506
a limit of how many cluster you can put on the same subnet. So if

36
00:02:30,528 --> 00:02:33,774
we are trying to spin up 30 kubernetes cluster, we couldn't do all of that

37
00:02:33,812 --> 00:02:37,566
in youll ten because there could be other clusters that running in

38
00:02:37,588 --> 00:02:40,990
the same data center. So we can hit some upper limit.

39
00:02:41,330 --> 00:02:44,738
We can spin up more subnets per data center, but even then we

40
00:02:44,744 --> 00:02:48,190
have an upper limit of how many different Kubernetes cluster

41
00:02:48,270 --> 00:02:51,602
under a single account we can run. And that

42
00:02:51,656 --> 00:02:55,202
limit by default is about few hundred,

43
00:02:55,336 --> 00:02:58,726
about three or 400, I don't know the exact number. But if you

44
00:02:58,748 --> 00:03:02,534
think of normal use case for a single customer that

45
00:03:02,572 --> 00:03:06,006
we have, having three or 400 different Kubernetes cluster is not

46
00:03:06,028 --> 00:03:09,222
as normal. So that the use case we have is

47
00:03:09,356 --> 00:03:13,034
not something we see regularly our customer trying to do. We also

48
00:03:13,072 --> 00:03:16,620
have a limit on how many volumes youll can spin up per data center.

49
00:03:16,990 --> 00:03:20,506
Again, that's a limit we can increase, but in a day to day operation for

50
00:03:20,528 --> 00:03:23,774
a regular customer, Kubernetes clusters, we don't really have to have

51
00:03:23,892 --> 00:03:27,806
that many persistent volume storage attached. Also, when you

52
00:03:27,828 --> 00:03:31,358
are just like spinning up clusters manually or the

53
00:03:31,444 --> 00:03:35,258
cluster admin or account owner is doing that, we don't

54
00:03:35,274 --> 00:03:38,898
really have any way to collect workshop metrics. If a workshop, how many people are

55
00:03:38,904 --> 00:03:42,126
using the workshop, how many people actually users the cluster, how much of the cluster

56
00:03:42,158 --> 00:03:45,300
got used, we have no way of collecting any of that information.

57
00:03:45,670 --> 00:03:49,094
And right now the team that owns the process is

58
00:03:49,132 --> 00:03:52,886
basically two person, right? So it is ten or

59
00:03:52,908 --> 00:03:56,662
20 workshop a month doesn't seem too much, but if you're thinking about all

60
00:03:56,716 --> 00:04:00,066
individual resource that needs to be created and cleaned up, it kind of adds

61
00:04:00,098 --> 00:04:03,546
up to be quite a hefty amount of work. And this two person that

62
00:04:03,648 --> 00:04:07,306
owns these accounts, that's not their full time job to do this. They have

63
00:04:07,328 --> 00:04:10,694
other responsibilities these have to take care of. So how do you go about solving

64
00:04:10,742 --> 00:04:13,934
this problem? There are many ways to solve this, right? Like we

65
00:04:13,972 --> 00:04:17,614
could write a custom code, use something like terraform or

66
00:04:17,652 --> 00:04:21,262
something like ansible, or write some bash script. So there is a number of different

67
00:04:21,316 --> 00:04:25,390
ways we could have done this, but let's talk about the worst possible

68
00:04:25,460 --> 00:04:28,706
way to try to solve this. In my opinion, the worst possible way would

69
00:04:28,728 --> 00:04:31,966
be for every request that comes in, we spin

70
00:04:31,998 --> 00:04:35,490
up these users in the UI, manually give access to the user

71
00:04:35,990 --> 00:04:39,634
in the account, and then do that for every users,

72
00:04:39,682 --> 00:04:43,734
for every workshop, for every cluster. And if we were to go about doing it

73
00:04:43,772 --> 00:04:47,154
this way, between the workshop leader and the owner,

74
00:04:47,202 --> 00:04:50,318
we're talking about about four hour power workshop,

75
00:04:50,434 --> 00:04:53,958
spinning up and spinning down. Even if you're talking about max efficiency

76
00:04:54,054 --> 00:04:57,402
in terms of clicking buttons. Also, this means if you are

77
00:04:57,456 --> 00:05:00,746
trying to assign access during the workshop manually to

78
00:05:00,768 --> 00:05:04,426
individual users, youll are spending a lot of time during the workshop

79
00:05:04,458 --> 00:05:07,134
time to do all those user permission things.

80
00:05:07,252 --> 00:05:10,894
So the actual workshop time would have to be cut short because you

81
00:05:10,932 --> 00:05:15,214
spent too much time giving people access to things. So again in our cloud UI

82
00:05:15,262 --> 00:05:19,006
you can go in and you can select things and select Kubernetes version,

83
00:05:19,118 --> 00:05:23,282
classic VPC or different location. You can select different

84
00:05:23,336 --> 00:05:26,722
size and you can just create one cluster then repeat the process

85
00:05:26,776 --> 00:05:30,246
over and over again for individual each of the clusters. And that

86
00:05:30,268 --> 00:05:34,710
is not scalable and nor it is something that we can do

87
00:05:34,860 --> 00:05:38,470
efficiently and save time. Because if you're spending 4 hours

88
00:05:38,540 --> 00:05:42,478
per workshop as a work account admin, if you have four workshop

89
00:05:42,514 --> 00:05:46,166
that week, you're talking about two full working days just spent on setting

90
00:05:46,198 --> 00:05:49,674
up a workshops and you have actual day jobs. So we can't really do that

91
00:05:49,712 --> 00:05:53,526
and that wouldn't work. These problem with this is again two workdays spent

92
00:05:53,558 --> 00:05:56,506
on the account owner. We are pretty much the upper limit of how many workshops

93
00:05:56,538 --> 00:05:59,854
we can support. Right now we support up to four and that's pretty much

94
00:05:59,892 --> 00:06:02,574
all we could have been able to support. If you are to do it this

95
00:06:02,612 --> 00:06:06,106
way. It's a huge cost center because resources need to be created

96
00:06:06,138 --> 00:06:09,854
earlier and deleted later. Let's say we have a workshop Monday and we're

97
00:06:09,902 --> 00:06:13,186
trying to manually do this. Best case scenario is the person

98
00:06:13,288 --> 00:06:16,734
does it like end of day Friday right now, Saturday and Sunday, the resource

99
00:06:16,782 --> 00:06:19,826
just like sitting there and like accruing cost. We will also

100
00:06:19,848 --> 00:06:22,454
won't be able to do any higher level workshop. Like if you want to do

101
00:06:22,492 --> 00:06:26,066
something like on istio or knative, things like that that requires

102
00:06:26,098 --> 00:06:29,194
installation on top of kubernetes. We don't really have any way

103
00:06:29,232 --> 00:06:33,114
to handle that without going manually, installing more steps and

104
00:06:33,232 --> 00:06:37,466
adding more time into setting up the clusters. So that was

105
00:06:37,568 --> 00:06:40,986
like a no go from probably the get go. We didn't really think of

106
00:06:41,008 --> 00:06:44,666
these as the way to solve this problem. So a passable solution, right? Like let's

107
00:06:44,698 --> 00:06:48,286
say a solution that would work and in many cases this

108
00:06:48,308 --> 00:06:51,694
is a solution that you probably are using and it is

109
00:06:51,732 --> 00:06:55,006
passable. So for the most part if it ain't broke, don't fix it kind

110
00:06:55,028 --> 00:06:58,546
of a thing. So you don't really think of improving that. What I mean by

111
00:06:58,568 --> 00:07:02,238
that is we use a CLI in a bash script update config file

112
00:07:02,254 --> 00:07:05,922
for each workshop request and use the same config file later

113
00:07:05,976 --> 00:07:09,698
to delete the resources and use a GitHub repo for tracking cluster requests.

114
00:07:09,714 --> 00:07:13,286
So we have a GitHub repository where users would come in and say I

115
00:07:13,308 --> 00:07:16,694
need a cluster, I need 20 clusters for that

116
00:07:16,732 --> 00:07:20,882
day for these workshop. So we have a kind of dedicated automation

117
00:07:21,026 --> 00:07:24,426
where we can find what kind of workshops we helped with, how many

118
00:07:24,448 --> 00:07:27,514
resources that needed, and there is a lineage of

119
00:07:27,552 --> 00:07:31,162
what kind of work was done for the workshop. And we also have a simple

120
00:07:31,216 --> 00:07:35,326
web app that handles a user access. So during these workshop time,

121
00:07:35,428 --> 00:07:38,654
user will go to this URL, put in their email address and

122
00:07:38,692 --> 00:07:42,446
automatically will be connected. Their account will be added with

123
00:07:42,468 --> 00:07:45,562
the right permission. So now they can access the Kubernetes cluster.

124
00:07:45,706 --> 00:07:49,106
And this is not bad. And bash script itself is quite

125
00:07:49,128 --> 00:07:52,546
simple, it looks something like this. You load up the

126
00:07:52,568 --> 00:07:56,834
environment file, so now you have all the environment variables and from

127
00:07:56,872 --> 00:08:00,454
there you log in to IBM cloud using the CLI, get access

128
00:08:00,492 --> 00:08:03,926
to the API key. And with the API key now you could either make

129
00:08:03,948 --> 00:08:07,506
a Carl commands like it does here, or you could also talk to the CLI

130
00:08:07,538 --> 00:08:11,390
directly to talk to IBM cloud to access a Kubernetes cluster.

131
00:08:11,490 --> 00:08:15,286
So again, we have multiple ways to handle this and this is the way we're

132
00:08:15,318 --> 00:08:19,062
doing this here. So bash script, it works in many cases.

133
00:08:19,126 --> 00:08:22,518
This is probably the extent a lot of you are going

134
00:08:22,544 --> 00:08:26,046
to go. And depending on how much of an

135
00:08:26,068 --> 00:08:30,362
automation you're looking for, this might be good enough if you're doing something sporadically.

136
00:08:30,426 --> 00:08:33,806
So not always like a full blown software solution is

137
00:08:33,828 --> 00:08:37,550
the best answer, but this is good enough for most cases.

138
00:08:37,710 --> 00:08:40,690
Yeah, sometimes this is the best you need to do and youll don't need to

139
00:08:40,760 --> 00:08:44,350
invent some new ways to do this. The impact

140
00:08:44,510 --> 00:08:48,254
immediately just from a bash script. We saw significant improvement

141
00:08:48,302 --> 00:08:51,974
on previous solution, the cluster access now automated with simple web

142
00:08:52,012 --> 00:08:55,894
app. Right now during the workshop, which we have the most limited amount

143
00:08:55,932 --> 00:08:59,462
of time. We didn't have to worry about wasting time

144
00:08:59,596 --> 00:09:02,906
from the workshop lead or someone who is helping with

145
00:09:02,928 --> 00:09:06,106
the workshop to help individual user that was automated using

146
00:09:06,128 --> 00:09:09,478
a web app, but it's still a manual process. Because you are running a bash

147
00:09:09,494 --> 00:09:12,058
script, your computer has to have be open,

148
00:09:12,224 --> 00:09:15,806
something goes wrong. Usually bash scripts creating you don't really have too many

149
00:09:15,828 --> 00:09:19,098
ways to handle errors. So because it's

150
00:09:19,114 --> 00:09:22,398
a scripts, someone has to go and run it. It's not running on

151
00:09:22,404 --> 00:09:26,750
a cron or anything. Because each request is different, the actual workshop

152
00:09:26,830 --> 00:09:30,146
can scale to a fairly large number of attendees. So that

153
00:09:30,168 --> 00:09:34,366
is an improvement. That was good because it's just a for loop.

154
00:09:34,558 --> 00:09:38,214
The work to spin a five cluster versus 500 cluster was

155
00:09:38,252 --> 00:09:41,702
basically the same except for how long it took. So this was not a bad

156
00:09:41,756 --> 00:09:45,686
solution. And this has served us well

157
00:09:45,868 --> 00:09:49,366
for a fairly long time. And this is where our

158
00:09:49,388 --> 00:09:52,906
current solution comes into play. I am a big believer of go and

159
00:09:52,928 --> 00:09:56,330
I love go programming. And so I thought, you know what, this is something

160
00:09:56,400 --> 00:10:00,074
we can improve upon by building an application that just

161
00:10:00,112 --> 00:10:03,310
automate a lot of these things using go. So the current

162
00:10:03,380 --> 00:10:07,102
solution we have a UI that is pretty

163
00:10:07,156 --> 00:10:10,846
much replicating how our cloud UI looks like and lets you

164
00:10:10,948 --> 00:10:14,458
select all these options yourself. We have an API

165
00:10:14,554 --> 00:10:17,282
to talk to infrastructure that's written in all go.

166
00:10:17,416 --> 00:10:20,606
We have some way to spin up the resources for our purposes

167
00:10:20,638 --> 00:10:24,702
we use AWX. So AWX is an open source version of ansible

168
00:10:24,766 --> 00:10:28,782
tower which is worker or like pipeline runner

169
00:10:28,846 --> 00:10:32,530
kind of a thing that we can run multiple jobs

170
00:10:32,610 --> 00:10:35,794
that youll need to run and finally some way to clean up the resources

171
00:10:35,842 --> 00:10:39,514
for that. We also use the API to talk to the IBM cloud infrastructure and

172
00:10:39,552 --> 00:10:43,114
finally run post provisioning tasks on each cluster. And for that

173
00:10:43,152 --> 00:10:47,370
we also rely heavily on AWX. The UI looks

174
00:10:47,520 --> 00:10:51,210
something like this. So if I were to

175
00:10:51,280 --> 00:10:55,142
look at the same account, I was looking at the

176
00:10:55,216 --> 00:10:58,810
so this is part of the application I created.

177
00:10:58,890 --> 00:11:02,606
And so that's what we mean by accidentally creating a cloud on

178
00:11:02,628 --> 00:11:06,802
top of our cloud. So this has pretty much the same look

179
00:11:06,856 --> 00:11:10,482
and feel to IBM cloud, but this is not part of IBM cloud

180
00:11:10,536 --> 00:11:14,146
itself. And some of the key things that are differentiated from what

181
00:11:14,168 --> 00:11:18,130
IBM cloud offers versus what this does is in this one we can

182
00:11:18,280 --> 00:11:22,038
delete multiple things at the same time as well as when you

183
00:11:22,044 --> 00:11:25,494
go to create new resources. We could actually select how many

184
00:11:25,532 --> 00:11:29,126
cluster we want to create as well as we can select that we

185
00:11:29,148 --> 00:11:32,634
want to deploy these clusters in. I don't know, all our data

186
00:11:32,672 --> 00:11:36,266
centers in the North America zone, right? So all of

187
00:11:36,288 --> 00:11:39,466
a sudden this does a round robin distribution of clusters. So if

188
00:11:39,488 --> 00:11:43,130
you have 300 clusters needs to be created and you don't really care exactly

189
00:11:43,200 --> 00:11:46,986
which data center they're in now you can spin up all 300 cluster,

190
00:11:47,018 --> 00:11:50,686
they will get round robin into different data centers. Now you're not putting too much

191
00:11:50,708 --> 00:11:55,054
load in a single data center for volume or network subnet

192
00:11:55,182 --> 00:11:58,420
and youll can multiple tag, you can also run

193
00:11:58,790 --> 00:12:02,914
select a few of these different services as well as select post

194
00:12:02,952 --> 00:12:06,206
provisioning tasks. We can have post provisioning tasks like installing

195
00:12:06,238 --> 00:12:09,010
knative, installing Openshift,

196
00:12:09,610 --> 00:12:13,046
select a different version here so we can select like cloud pack for

197
00:12:13,068 --> 00:12:16,678
iterations. Cloud native toolkit. These are different software that

198
00:12:16,764 --> 00:12:20,266
we are trying to teach workshops on but previously was very difficult to

199
00:12:20,288 --> 00:12:23,990
do because the post provisioning task of installing that software

200
00:12:24,070 --> 00:12:27,562
takes a fair amount of effort. Now we can automate that using

201
00:12:27,616 --> 00:12:31,354
ansible playbooks. So what's lacking in

202
00:12:31,392 --> 00:12:35,386
this is that in the UI, it's still a manual process. On the UI

203
00:12:35,418 --> 00:12:38,426
side you have to still select some buttons, click some buttons,

204
00:12:38,538 --> 00:12:42,302
fill in some forms, and so weekend and time zones are still a problem.

205
00:12:42,356 --> 00:12:45,954
So if you have a workshop that's Monday, someone still needs to probably do this

206
00:12:45,992 --> 00:12:49,426
on Friday evening. Although the process of doing it

207
00:12:49,448 --> 00:12:53,054
is fairly fast, but we still need to spin it up earlier

208
00:12:53,102 --> 00:12:56,690
than we have to, just because we wouldn't have people working

209
00:12:56,760 --> 00:12:59,998
over the weekend just to spin up some resources. We still don't have

210
00:13:00,024 --> 00:13:03,186
any real metrics collection from the workshop itself. So we spin

211
00:13:03,218 --> 00:13:06,786
up a lot of resources. We get to see at the time when the workshop

212
00:13:06,818 --> 00:13:11,334
is running how many workshops are being used, but we don't really have any persistent

213
00:13:11,382 --> 00:13:13,580
storage for this information.

214
00:13:14,830 --> 00:13:18,906
Out of ten clusters, eight got used, six completed the

215
00:13:18,928 --> 00:13:22,550
workshop and things like that. We also have no way of schedule

216
00:13:22,710 --> 00:13:26,574
creation and deletion of the resources. And this is one of the big ones that

217
00:13:26,692 --> 00:13:30,062
would really help us save a lot of time

218
00:13:30,116 --> 00:13:34,190
and money. Because if you can schedule a cluster to be created 3

219
00:13:34,260 --> 00:13:37,806
hours before the workshop, that by itself probably cuts

220
00:13:37,838 --> 00:13:41,774
down the cost of the workshops by half. But even with what's lacking,

221
00:13:41,822 --> 00:13:44,946
there is a huge impact of this UI makes it easy to

222
00:13:44,968 --> 00:13:49,046
teach anyone to spin up resources. So now it's not only the two person

223
00:13:49,148 --> 00:13:52,582
that owns the account has to do this, anyone now

224
00:13:52,636 --> 00:13:55,766
can just go and click some buttons. It'll take probably five minutes to teach them

225
00:13:55,788 --> 00:13:59,334
how to create resources. Because it's a custom app

226
00:13:59,372 --> 00:14:03,066
written by us, we can also add some retry logic or rate limit to

227
00:14:03,088 --> 00:14:06,138
requests. So if you have for any reason

228
00:14:06,224 --> 00:14:09,798
any of this request to the underlying infrastructure fails,

229
00:14:09,894 --> 00:14:13,834
we could have some cooldown retry to make

230
00:14:13,872 --> 00:14:17,406
sure that we are not overwhelming the amount of cluster we

231
00:14:17,428 --> 00:14:20,714
request. So kind of like in terms of architecture,

232
00:14:20,762 --> 00:14:24,314
this is fairly simple, this is what it looks like. We have the Kubeadmin application

233
00:14:24,452 --> 00:14:27,986
that is both the cluster manager, it's the UI is these

234
00:14:28,008 --> 00:14:31,714
provisioner. We have a notification system of sending email on

235
00:14:31,752 --> 00:14:35,922
error. All of that is a single giant application that

236
00:14:35,976 --> 00:14:39,846
talks to AWX. That's our runner job runner or like

237
00:14:39,868 --> 00:14:43,094
pipeline Runner. And that AWX spins up

238
00:14:43,132 --> 00:14:46,994
a single web app for each of the workshop that we talked about earlier

239
00:14:47,042 --> 00:14:50,554
that gives users access to individual

240
00:14:50,672 --> 00:14:54,362
users for their account. So I mean this is working

241
00:14:54,416 --> 00:14:57,866
solution and this is being used right now for a lot of our

242
00:14:57,888 --> 00:15:01,854
workshops. But what does the next step, next evolution of that looks

243
00:15:01,892 --> 00:15:05,438
like? So the ideal solution and the solution we're currently working

244
00:15:05,524 --> 00:15:09,114
towards making happen is where automated

245
00:15:09,162 --> 00:15:12,670
workshop requests from GitHub to cluster creations with an approval in place.

246
00:15:12,740 --> 00:15:16,062
So right now we have a GitHub internal GitHub repository

247
00:15:16,126 --> 00:15:18,926
where people would come in and request workshops.

248
00:15:19,118 --> 00:15:22,674
What we want to do is process that request using something like

249
00:15:22,712 --> 00:15:26,722
cloud function and automating, create a request

250
00:15:26,786 --> 00:15:30,690
in our Kubeadmin application with some manual approval

251
00:15:30,770 --> 00:15:34,674
so that we make sure that only the approved workshops get resources

252
00:15:34,722 --> 00:15:37,906
created for them. Next is where to schedule creation and deletion

253
00:15:37,938 --> 00:15:41,490
of resources. Because every workshop that we get request for, we have

254
00:15:41,500 --> 00:15:44,346
a time when the workshop is supposed to start and we also have a time

255
00:15:44,368 --> 00:15:47,766
when the workshop ends so we can automatically schedule creation

256
00:15:47,798 --> 00:15:51,482
of these resources few hours prior to the workshop start

257
00:15:51,536 --> 00:15:55,054
time and few hours after the workshop supposed to end.

258
00:15:55,172 --> 00:15:59,034
That way we don't have to have manual intervention and time spent

259
00:15:59,162 --> 00:16:02,926
from our engineers developer automate that are

260
00:16:02,948 --> 00:16:06,914
manually doing this right now. Once we can reach a point where we can

261
00:16:07,032 --> 00:16:10,594
do a lot of automation around this, we can also open this up to other

262
00:16:10,632 --> 00:16:14,654
teams in our and other orgs to run their resource creation

263
00:16:14,702 --> 00:16:18,054
through this. So although this was initially built for

264
00:16:18,092 --> 00:16:21,414
developer advocate, but there are other teams that work directly with

265
00:16:21,452 --> 00:16:25,602
clients and also other teams that work does like these workshops

266
00:16:25,666 --> 00:16:29,462
kind of things and they can now use this tool to create

267
00:16:29,516 --> 00:16:33,370
their resources and clean these up without any manual intervention. So we can

268
00:16:33,440 --> 00:16:36,986
basically serve a lot more people than we currently do. And finally,

269
00:16:37,088 --> 00:16:41,190
ideal solution would give us the proper metrics for workshop

270
00:16:41,270 --> 00:16:44,926
that we run on these accounts. So we want to know if we

271
00:16:45,028 --> 00:16:48,526
did ten workshop what kind of completion rate we

272
00:16:48,548 --> 00:16:51,774
saw from this workshop. This will allow us to see if

273
00:16:51,812 --> 00:16:55,426
we can cut down on amount of resource created by

274
00:16:55,608 --> 00:16:59,006
right sizing the workshop request. If someone is requesting

275
00:16:59,038 --> 00:17:03,294
a 50 cluster for a workshop and we consistently

276
00:17:03,342 --> 00:17:06,318
see they have about 30 people using those clusters,

277
00:17:06,414 --> 00:17:10,054
we can probably right size that to 35 with some buffer for their

278
00:17:10,092 --> 00:17:13,990
workshop the next request that comes so cut down on cost basically.

279
00:17:14,140 --> 00:17:17,846
So the impact. So again, anyone within the can now

280
00:17:18,028 --> 00:17:21,674
be able to use this. So no more dependency on our small team.

281
00:17:21,792 --> 00:17:25,830
They wouldn't be just asking us to spin up these resources,

282
00:17:25,910 --> 00:17:29,642
it will be mostly self served. So we don't have to spend engineering hours

283
00:17:29,776 --> 00:17:33,614
in just doing manual clicking buttons. We wouldn't also need

284
00:17:33,652 --> 00:17:37,962
cycle managing resources because a lot of that we can automate within schedules.

285
00:17:38,106 --> 00:17:41,882
Obviously the big part of it is cost saving, although it's an internal

286
00:17:41,946 --> 00:17:45,506
cost center, but it's still a cost center that we have to

287
00:17:45,608 --> 00:17:48,562
be mindful of. And also, as I said,

288
00:17:48,696 --> 00:17:52,350
we can take better decisions when new workshops and events are considered.

289
00:17:52,430 --> 00:17:55,622
How much resource to automate? And is this

290
00:17:55,676 --> 00:17:59,586
workshop even worth that engineering time spent by the workshop

291
00:17:59,618 --> 00:18:03,702
runner? In many cases. So currently I

292
00:18:03,836 --> 00:18:07,094
did some of the rearchitecting of this system and many

293
00:18:07,132 --> 00:18:10,998
of these are thought of as microservices. But over time we

294
00:18:11,004 --> 00:18:14,682
can even consolidate into bigger services. But as of now,

295
00:18:14,816 --> 00:18:18,314
what you can see here is that these AWX service youll still have

296
00:18:18,352 --> 00:18:22,282
the Cube admin service, but breaking down some of the other responsibilities

297
00:18:22,346 --> 00:18:25,754
into smaller services like provisioner and scheduler

298
00:18:25,802 --> 00:18:29,610
reclaimer, that would be taking care of reclaiming users

299
00:18:29,690 --> 00:18:33,218
back into or deleting the clusters back from the list.

300
00:18:33,304 --> 00:18:36,942
We also have a notifier service that's right now handling

301
00:18:37,086 --> 00:18:40,958
sending notification via email and sending notification

302
00:18:41,054 --> 00:18:44,946
via GitHub, like sending information back to the GitHub issue itself,

303
00:18:45,048 --> 00:18:48,902
but we can update that to also send notification back into

304
00:18:48,956 --> 00:18:52,646
Slack. That's a service we're working on right now. We also have a

305
00:18:52,668 --> 00:18:56,530
cloud function in the works that when a new issue is created,

306
00:18:56,610 --> 00:19:00,630
we can take that information and automatically

307
00:19:00,710 --> 00:19:04,010
create that request into our scheduler.

308
00:19:04,990 --> 00:19:08,202
All of these services are right now being worked on.

309
00:19:08,256 --> 00:19:12,174
They haven't gone public yet, but we are working towards getting that to

310
00:19:12,212 --> 00:19:15,566
work. So why did we make a

311
00:19:15,588 --> 00:19:19,278
cloud? Right? And that is a question. Instead of

312
00:19:19,364 --> 00:19:22,782
using some premade solution or just

313
00:19:22,836 --> 00:19:26,802
sticking with the bash scripts, one of the key reasons is given

314
00:19:26,856 --> 00:19:30,830
we are already a cloud provider, many of these things, we probably could have requested

315
00:19:30,910 --> 00:19:34,578
the cloud team to implement some of those things for us

316
00:19:34,744 --> 00:19:38,146
where it would have helped our team's need. But the features

317
00:19:38,178 --> 00:19:42,674
we needed are not needed by most people, right? Like no one really cares

318
00:19:42,722 --> 00:19:46,738
about scheduling, creation of 50 clusters and deletion

319
00:19:46,754 --> 00:19:50,280
of those 50 clusters, most people don't probably care about also

320
00:19:51,450 --> 00:19:55,322
spinning up hundreds of clusters and spinning them down in a couple of hours

321
00:19:55,376 --> 00:19:58,586
or a couple of days. It doesn't make sense to implement these things in our

322
00:19:58,608 --> 00:20:02,038
public cloud interface. Also, a cloud interface would be easier for us

323
00:20:02,064 --> 00:20:05,850
to use and scale, although it's only for an internal audience.

324
00:20:06,010 --> 00:20:09,534
It's mainly because if you have a nice UI, it would be much

325
00:20:09,572 --> 00:20:12,974
easier to train or educate someone else to use

326
00:20:13,012 --> 00:20:16,606
it. Rather than having like a script or a very custom thing,

327
00:20:16,708 --> 00:20:20,178
they would have to figure out how to run. If it's a UI, they can

328
00:20:20,184 --> 00:20:23,730
just click some buttons and it just works. So should you build

329
00:20:23,800 --> 00:20:27,362
your own cloud interface? Well, the first question

330
00:20:27,416 --> 00:20:31,094
you have to ask is does these cloud youll have does not have an easy

331
00:20:31,132 --> 00:20:34,838
way to do what you need, right? Like if that's the case maybe

332
00:20:35,004 --> 00:20:39,082
do you often find yourself writing custom code to do things in your cloud?

333
00:20:39,216 --> 00:20:42,730
Does other teams do the same things? If you find that six

334
00:20:42,800 --> 00:20:46,458
of the teams in your doing very similar

335
00:20:46,544 --> 00:20:50,406
thing manually or doing some scripting for achieving

336
00:20:50,438 --> 00:20:53,322
the same result, that is something you need to consider.

337
00:20:53,456 --> 00:20:56,586
Finally, do you struggle to keep the resources

338
00:20:56,618 --> 00:20:59,886
in check? If you are using your cloud, you have a lot of resources being

339
00:20:59,908 --> 00:21:03,406
spun up and spun down by individuals and you are either the

340
00:21:03,428 --> 00:21:06,706
cluster owner or the cluster admin and you are struggling to make

341
00:21:06,728 --> 00:21:10,754
sure that you are not overspending or you are not right sizing your

342
00:21:10,792 --> 00:21:14,354
clusters and resources. If the answer to these

343
00:21:14,392 --> 00:21:17,710
questions are yes, then maybe you need to build the

344
00:21:17,720 --> 00:21:20,982
interface to your cloud. And most cloud providers have

345
00:21:21,036 --> 00:21:24,582
very nice API that you can make use of. So you don't really

346
00:21:24,636 --> 00:21:28,066
have to box yourself to say oh yeah, I am a user

347
00:21:28,098 --> 00:21:31,766
of azure cloud and all of a sudden this one thing they don't

348
00:21:31,798 --> 00:21:34,986
provide in their UI or their ClI and now

349
00:21:35,008 --> 00:21:38,634
I can't really do that anymore. You don't want to box yourself that way.

350
00:21:38,672 --> 00:21:42,106
If you find yourself needing to do something over and over again,

351
00:21:42,208 --> 00:21:45,326
it might make sense for you to build an interface on top.

352
00:21:45,508 --> 00:21:49,166
But infrastructure as code first, right? Like if you can

353
00:21:49,268 --> 00:21:52,890
get a lot of this done by using infrastructure as code services

354
00:21:53,060 --> 00:21:56,638
such as terraform, pulumi, ansible, chef or puppet,

355
00:21:56,734 --> 00:22:01,262
or like doing some CI CD things like GitHub actions, Travis Jenkins

356
00:22:01,326 --> 00:22:04,434
Harness, Argo Tecton. If you can get

357
00:22:04,552 --> 00:22:08,230
your whole infrastructure as code, and for the most part,

358
00:22:08,300 --> 00:22:12,466
unless you need something very custom, you can achieve

359
00:22:12,578 --> 00:22:16,514
most of the things just by codifying your entire infrastructure

360
00:22:16,562 --> 00:22:20,060
needs. So once you have done all of that, you still find yourself

361
00:22:20,590 --> 00:22:24,566
needing to do some manual coding or running some scripts

362
00:22:24,678 --> 00:22:28,570
to do things. Yeah, it might be worth like building a cloud yourself.

363
00:22:28,720 --> 00:22:32,586
So rolling out a custom solution should be towards the

364
00:22:32,608 --> 00:22:36,426
bottom of your list. What I mean by that is if you roll

365
00:22:36,458 --> 00:22:39,882
out a custom solution like we have, that is a dependency

366
00:22:39,946 --> 00:22:43,630
you will have to carry on going forward, right? So if

367
00:22:43,700 --> 00:22:47,298
you have the key people writing this code lives,

368
00:22:47,464 --> 00:22:50,718
your company, or things change in your cloud interface

369
00:22:50,814 --> 00:22:54,114
or any number of different things that can happen, all of a sudden you have

370
00:22:54,152 --> 00:22:57,830
this dependency that you have to carry on. So all code

371
00:22:57,900 --> 00:23:01,046
is technical debt. So as little code as you can

372
00:23:01,068 --> 00:23:04,882
own yourself, the less technical debt youll will have long term.

373
00:23:05,026 --> 00:23:09,574
So why should you consider building a cloud. So sometimes reinventing

374
00:23:09,622 --> 00:23:13,466
the wheel is the best way. Although we try to

375
00:23:13,488 --> 00:23:17,046
keep our code and our work dry, we do not repeat

376
00:23:17,078 --> 00:23:20,330
ourselves. But sometimes reinventing the wheel

377
00:23:20,990 --> 00:23:24,586
lets us go in some way that we couldn't go. With all the wheels

378
00:23:24,618 --> 00:23:28,026
that you have in the world, a small script across different teams

379
00:23:28,058 --> 00:23:31,774
and orgs and needs become a big dependency. So if you have

380
00:23:31,812 --> 00:23:35,354
each, let's say your company has two orgs with three teams

381
00:23:35,402 --> 00:23:38,978
each, and each of them are maintained a different script to pretty much do the

382
00:23:38,984 --> 00:23:42,846
same thing. At that point, it might be worth spending some engineering

383
00:23:42,878 --> 00:23:45,954
hours building a tool that does solve the

384
00:23:45,992 --> 00:23:49,362
problem in a more general way for everyone. Most teams

385
00:23:49,426 --> 00:23:53,126
should not have to own cloud resources. So if

386
00:23:53,148 --> 00:23:56,406
you're using public cloud of any kind, and each of the

387
00:23:56,428 --> 00:23:59,734
team kind of are responsible for understanding how different

388
00:23:59,772 --> 00:24:03,354
cloud resources work and how to do things in the cloud,

389
00:24:03,472 --> 00:24:07,210
you are creating this dependency on this cloud which if

390
00:24:07,280 --> 00:24:10,826
down the line you choose to move to a different cloud provider, all of a

391
00:24:10,848 --> 00:24:14,174
sudden a lot of the team members wouldn't understand how to

392
00:24:14,212 --> 00:24:17,258
translate those information between different clouds.

393
00:24:17,354 --> 00:24:20,986
If you were to create a simple interface that only lets

394
00:24:21,018 --> 00:24:24,222
people access the things that are approved in a size

395
00:24:24,276 --> 00:24:27,522
that is approved, all of a sudden, when you move to a different cloud,

396
00:24:27,576 --> 00:24:31,474
you just need to change that interface to talk to the different cloud and

397
00:24:31,512 --> 00:24:35,586
your teams wouldn't have to worry about those kind of changes themselves.

398
00:24:35,768 --> 00:24:39,250
Finally, the last reason the interface of your cloud of your choice

399
00:24:39,330 --> 00:24:42,502
might not have all the answers that you need. Things like

400
00:24:42,636 --> 00:24:46,166
how long has these resource been around? Who is the last person that used

401
00:24:46,188 --> 00:24:49,666
this resource? What other projects are using this resource?

402
00:24:49,858 --> 00:24:53,590
Is this resource approved? How big of this resource is approved?

403
00:24:53,670 --> 00:24:57,274
And all of these different answers might not be available or

404
00:24:57,312 --> 00:25:00,342
be able to add onto your cloud provider's interface.

405
00:25:00,406 --> 00:25:03,466
And if that is something you're looking for, building a wrapper

406
00:25:03,498 --> 00:25:07,230
or interface on top of your cloud might be worth looking into.

407
00:25:07,380 --> 00:25:10,510
So consideration of if you're thinking about building a cloud,

408
00:25:10,580 --> 00:25:14,094
what you should be looking at. So you can always do

409
00:25:14,132 --> 00:25:17,698
more, right? No matter how much you do, you can always do more thing.

410
00:25:17,784 --> 00:25:20,946
So don't do more than necessary. So only do

411
00:25:21,048 --> 00:25:24,914
whatever gets the job done, then look back and see doing

412
00:25:24,952 --> 00:25:28,054
more youll improve or it's just like you are doing more for doing

413
00:25:28,092 --> 00:25:31,650
more sake. Cloud usually has a lot of API

414
00:25:31,730 --> 00:25:35,094
and they can change. So you have to be ready to

415
00:25:35,132 --> 00:25:39,014
update things. As I said, the moment you own, kind of like building

416
00:25:39,052 --> 00:25:42,694
this new interface on top of your existing interface, all of a sudden

417
00:25:42,742 --> 00:25:46,118
you built up some dependency and code debt,

418
00:25:46,214 --> 00:25:49,418
technical debt that you have built up because as your cloud changed, now you have

419
00:25:49,424 --> 00:25:52,554
to update your underlying interface with that solving

420
00:25:52,602 --> 00:25:56,254
the general cloud problem, it's probably going to be more

421
00:25:56,292 --> 00:25:59,982
than you can take on. Solving your and your adjacent team's problem

422
00:26:00,036 --> 00:26:04,094
are enough. Oftentimes youll might be tempted once you get

423
00:26:04,212 --> 00:26:07,954
down this path, to think okay, what if I basically

424
00:26:08,072 --> 00:26:11,614
build a new type of cloud that uses another cloud underneath,

425
00:26:11,742 --> 00:26:15,714
but make it very easy and make it very applicable for everyone.

426
00:26:15,912 --> 00:26:19,750
It is a novel idea, but oftentimes it might be

427
00:26:19,820 --> 00:26:23,186
way more than you need to do, as well as way more than it's

428
00:26:23,218 --> 00:26:26,662
worth your time. Unless you are trying

429
00:26:26,716 --> 00:26:30,274
to create a new product and a new cloud interface based

430
00:26:30,332 --> 00:26:33,994
on some other cloud, that is probably not something you want to spend your

431
00:26:34,032 --> 00:26:37,594
time doing again. Last option always is don't start

432
00:26:37,632 --> 00:26:41,102
with creating the cloud. In our case, we tried a couple of different

433
00:26:41,156 --> 00:26:44,574
things and found things that makes it

434
00:26:44,772 --> 00:26:48,734
not solve our problem as good as rebuilding the cloud did

435
00:26:48,772 --> 00:26:52,698
in our case. So that's when we started kind of like treating

436
00:26:52,714 --> 00:26:56,034
the interface on top of our cloud to do things a little bit easier for

437
00:26:56,072 --> 00:26:59,140
us. So if you were to

438
00:27:00,070 --> 00:27:03,746
start out of the gate, you started with creating the

439
00:27:03,768 --> 00:27:07,302
cloud, I think you will spend a lot more time doing that rather than just

440
00:27:07,356 --> 00:27:10,870
starting with solving the problem any way you can using

441
00:27:10,940 --> 00:27:14,514
ansible, terraform or any number of other things. And eventually

442
00:27:14,562 --> 00:27:18,326
if you find yourself to be stuck on a loop that

443
00:27:18,348 --> 00:27:21,546
you are just redoing the same things but with code now

444
00:27:21,648 --> 00:27:25,338
at that point it might be worth creating some of

445
00:27:25,344 --> 00:27:29,194
these things in code. So at this point we'll tasks

446
00:27:29,232 --> 00:27:32,926
a quick look at some of the code that youll have

447
00:27:32,948 --> 00:27:36,638
done here and that is going to be the end of this

448
00:27:36,804 --> 00:27:39,454
session. First of all,

449
00:27:39,572 --> 00:27:42,946
we have a react front end that sits in the cloud.

450
00:27:43,048 --> 00:27:47,570
That is the UI you would see if you were to go to this URL.

451
00:27:48,470 --> 00:27:52,622
Next, we needed to have some way of handling

452
00:27:52,686 --> 00:27:56,402
user authentication. Luckily we're already building

453
00:27:56,456 --> 00:27:59,378
on top of a cloud so we didn't really have to invent that wheel.

454
00:27:59,474 --> 00:28:03,394
What we could do is just fall back on IBM

455
00:28:03,442 --> 00:28:07,510
cloud for our authentication. So if we have a login with IBM ID

456
00:28:07,660 --> 00:28:11,114
and as a user, if you have an IBM account, youll be able to log

457
00:28:11,152 --> 00:28:14,826
in to the cluster, to the account and

458
00:28:14,848 --> 00:28:18,378
you will be able to access the resources youll actually have access

459
00:28:18,464 --> 00:28:22,042
to on your IBM cloud account. So a big part of

460
00:28:22,176 --> 00:28:25,726
building a cloud is user management and we didn't really have

461
00:28:25,748 --> 00:28:28,240
to do that because again we're already on top of a cloud.

462
00:28:29,010 --> 00:28:32,522
So these UI we access here, we see all the clusters

463
00:28:32,586 --> 00:28:35,906
and such. So the back end of

464
00:28:35,928 --> 00:28:40,274
it is all go. And the way we went about building it,

465
00:28:40,472 --> 00:28:44,114
it's kind of like a monorepo. All the different applications are being

466
00:28:44,152 --> 00:28:47,160
built under the same project as of now.

467
00:28:47,610 --> 00:28:51,590
The biggest part is the web, that is what is Cube admin.

468
00:28:52,730 --> 00:28:56,374
It's basically a back end API rest API that

469
00:28:56,412 --> 00:29:00,266
is built using Echo. And we have all the different endpoints that

470
00:29:00,288 --> 00:29:03,734
we can access and the app just starts

471
00:29:03,782 --> 00:29:07,354
on port 9000 and also serves the react front end from

472
00:29:07,392 --> 00:29:11,214
the back end. So this part of the code we

473
00:29:11,252 --> 00:29:15,438
had to for the most part just look at our

474
00:29:15,524 --> 00:29:19,786
cloud docs. So cloud ibm.com docs

475
00:29:19,978 --> 00:29:24,210
and for each of the endpoints we cared about we

476
00:29:24,280 --> 00:29:26,926
just looked at our cloud docs,

477
00:29:27,118 --> 00:29:30,994
I'm going to look at containers Kubernetes service and

478
00:29:31,032 --> 00:29:36,294
now we can see how

479
00:29:36,332 --> 00:29:40,946
we go about setting

480
00:29:40,978 --> 00:29:43,430
up. I'm looking for API references.

481
00:29:45,050 --> 00:29:48,898
Yeah Kubernetes API service so we have a swagger API

482
00:29:48,994 --> 00:29:52,454
where we can see how to get access to all the clusters.

483
00:29:52,502 --> 00:29:56,730
So this API endpoint gives us access to all the clusters and

484
00:29:56,800 --> 00:30:00,846
our application would for the most part just

485
00:30:01,028 --> 00:30:05,694
be wrapping that endpoint. For example this

486
00:30:05,732 --> 00:30:09,360
one, this API just talks to our

487
00:30:12,130 --> 00:30:15,166
second app function that tasks

488
00:30:15,198 --> 00:30:19,026
to our API and gets us the clusters and we

489
00:30:19,048 --> 00:30:22,914
just make a fetch request to the endpoint, basically talk

490
00:30:22,952 --> 00:30:26,338
to our cloud the same way our cloud interface talks

491
00:30:26,354 --> 00:30:29,718
to as well. And this is similar for most of the

492
00:30:29,724 --> 00:30:31,320
other endpoints that we have.

493
00:30:33,130 --> 00:30:36,214
For the most cloud providers that we have, they would

494
00:30:36,252 --> 00:30:40,054
have decent documentation on how to talk to different endpoints.

495
00:30:40,182 --> 00:30:44,026
If you don't have that available, that might be very

496
00:30:44,048 --> 00:30:47,686
difficult to build a wrapper UI on top. Luckily IBM

497
00:30:47,718 --> 00:30:50,894
cloud does have fairly good documentation for all the different

498
00:30:50,932 --> 00:30:55,066
products we needed to access. So we could build that interface

499
00:30:55,098 --> 00:30:58,474
on top to talk to AWX.

500
00:30:58,602 --> 00:31:04,382
That is another dependency we have. We have this package

501
00:31:04,446 --> 00:31:07,474
we are talking to AWX to and this

502
00:31:07,512 --> 00:31:11,406
is also very similar to what we do for IBM

503
00:31:11,438 --> 00:31:15,018
cloud. We can get list of all these workflow job templates,

504
00:31:15,134 --> 00:31:19,190
we can get job templates and we also can launch a new workflow.

505
00:31:19,850 --> 00:31:23,078
AWX is the

506
00:31:23,164 --> 00:31:26,280
runner for different jobs that we have for

507
00:31:26,810 --> 00:31:30,680
running our actual workload.com.

508
00:31:31,850 --> 00:31:35,766
So we have these playbooks that we have written here and these playbooks

509
00:31:35,798 --> 00:31:40,198
can do a number of different things on top of just creating Kubernetes cluster.

510
00:31:40,294 --> 00:31:44,678
So you could do things like install istio or install knative.

511
00:31:44,774 --> 00:31:48,334
The moment a cluster has been created and install tecton or any

512
00:31:48,372 --> 00:31:51,406
number of different application. And if you want to define a new application, that is

513
00:31:51,428 --> 00:31:55,054
also possible by just writing ansible playbook

514
00:31:55,182 --> 00:31:58,626
and we can run that after the cluster has

515
00:31:58,648 --> 00:32:02,114
been created. So as I said

516
00:32:02,232 --> 00:32:05,326
that we have a number of different steps

517
00:32:05,358 --> 00:32:08,910
we would like to finish to get to our ideal solutions. That's what

518
00:32:08,920 --> 00:32:12,370
we are working towards. And again, this project is open source.

519
00:32:12,530 --> 00:32:16,194
I don't know how useful it would be for your use case if you don't

520
00:32:16,242 --> 00:32:20,338
are already using IBM cloud and need to have very similar functionality,

521
00:32:20,434 --> 00:32:23,990
but if you're trying to look for place where

522
00:32:24,060 --> 00:32:27,814
this kind of work is done, this code base could be useful for your

523
00:32:27,852 --> 00:32:31,498
need that way. With that, end this session

524
00:32:31,594 --> 00:32:35,006
and if you have any more questions, feel free to ask. In any of

525
00:32:35,028 --> 00:32:38,206
the social media platforms, Twitter is probably one of the easiest way

526
00:32:38,228 --> 00:32:41,726
to reach me if you'd want to come back and ask more questions about some

527
00:32:41,748 --> 00:32:45,502
of the decisions we made, decisions we took, some of the more challenges we had

528
00:32:45,556 --> 00:32:49,020
while doing this, more than happy to chat and answer those questions.

