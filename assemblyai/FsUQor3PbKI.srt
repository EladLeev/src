1
00:00:27,330 --> 00:00:31,206
Hello everyone and welcome. I'm really excited to be here. Today we

2
00:00:31,228 --> 00:00:34,626
will go through how we build the platform's product to serve internal

3
00:00:34,658 --> 00:00:38,582
and external customers with high sellers expectation and how we can use

4
00:00:38,636 --> 00:00:42,546
chatops and GitHub bots to boost developer productivity

5
00:00:42,658 --> 00:00:46,482
and services in parallel engineering and non engineering teams in mattermost.

6
00:00:46,626 --> 00:00:50,702
So before do a deep dive we need to understand what is Mattermost as

7
00:00:50,756 --> 00:00:54,798
some concepts are based on Mattermost and Mattermost is

8
00:00:54,804 --> 00:00:58,574
an open source platform that provides secure collaboration for technical and

9
00:00:58,612 --> 00:01:02,014
operational teams. And we'll go right now

10
00:01:02,052 --> 00:01:05,602
through the mattermost cloud story and how we built a

11
00:01:05,736 --> 00:01:09,314
SaaS platform. Back in the days we had an idea to offer

12
00:01:09,352 --> 00:01:13,454
maternals as a SaaS product and built maternals cloud and we initiated

13
00:01:13,502 --> 00:01:16,786
all the software development lifecycle. So right now

14
00:01:16,808 --> 00:01:20,258
we'll go through this lifecycle of maternals cloud and identify

15
00:01:20,354 --> 00:01:24,018
in each phase actually what were the details,

16
00:01:24,194 --> 00:01:26,920
what was happening around that and the decision made.

17
00:01:27,370 --> 00:01:31,306
First we start with a planning try to identify what

18
00:01:31,328 --> 00:01:35,050
is the current team's capacity. Do we need more resources

19
00:01:35,710 --> 00:01:40,186
higher? Do we have the right skill set? Is the team structure the

20
00:01:40,208 --> 00:01:43,838
current team structure enough in the responsibilities? What will be the cost

21
00:01:44,004 --> 00:01:47,840
of the development and running and operating such a platform

22
00:01:48,530 --> 00:01:51,760
and the milestones to launch Matrix cloud?

23
00:01:52,210 --> 00:01:55,742
At that time we had adopted the devs and tops collaboration

24
00:01:55,806 --> 00:01:59,506
model with each team specializing where needed, but also same were

25
00:01:59,528 --> 00:02:03,140
necessary. So there was collaboration between them

26
00:02:03,510 --> 00:02:06,478
and then we passed to the next phase which were the requirements. In this phase,

27
00:02:06,494 --> 00:02:10,146
actually we did a deep dive on to understand what is the

28
00:02:10,168 --> 00:02:13,426
ideal customer profile, who's going to use our product, the features,

29
00:02:13,458 --> 00:02:17,014
the user flows, the slos and the slas. We need to support our

30
00:02:17,052 --> 00:02:20,826
SLA agreements with the customers that we need an incident response that we

31
00:02:20,848 --> 00:02:23,958
need to focus on scalability and performance to host thousands

32
00:02:23,974 --> 00:02:28,502
of workspaces and customers from mattermost

33
00:02:28,566 --> 00:02:32,126
and security and compliance. At that time we realized that

34
00:02:32,148 --> 00:02:36,074
we need to introduce an SRE team and the collaboration

35
00:02:36,122 --> 00:02:39,806
between the dev and SRE happens around operational criteria. So when the

36
00:02:39,828 --> 00:02:43,898
SRE team is happy with the code and the production

37
00:02:43,994 --> 00:02:47,426
and readiness reviews have been approved, then they are able to support it

38
00:02:47,448 --> 00:02:50,974
in production. So we introduced four new teams

39
00:02:51,022 --> 00:02:54,738
based on the requirements and the planning we had. Initially, SRM will be

40
00:02:54,744 --> 00:02:58,006
responsible to build and operate a reliable, scalable, secure and

41
00:02:58,028 --> 00:03:01,362
cost efficient SaaS platform. Automation and tooling

42
00:03:01,426 --> 00:03:05,874
will be actually the team to build the automation, the tools to orchestrate

43
00:03:05,922 --> 00:03:09,130
and manage the fleet of the customer workspaces.

44
00:03:09,790 --> 00:03:13,690
Delivery will be responsible in terms of the CI, CD and all the release

45
00:03:14,030 --> 00:03:18,026
lifecycle and the release cadence for

46
00:03:18,048 --> 00:03:21,654
our cloud customers. And we came with the strategy,

47
00:03:21,702 --> 00:03:24,926
okay, we're going to build a SaaS platform which is going to be used by

48
00:03:24,948 --> 00:03:28,606
customers. They're going to host their maternals workspace in

49
00:03:28,628 --> 00:03:31,998
our managed infrastructure. So we moved to the

50
00:03:32,004 --> 00:03:35,218
design phase and we tried to identify a couple of things there. What will be

51
00:03:35,224 --> 00:03:38,958
the technology stack, the core components, the system architecture,

52
00:03:39,134 --> 00:03:42,690
security controls, the compliance and data stations, the testing.

53
00:03:43,190 --> 00:03:46,660
So a couple of things, and not only this, this is just a high level

54
00:03:47,270 --> 00:03:50,962
and some examples of some decisions were already in AWS

55
00:03:51,106 --> 00:03:54,566
and we decided that we need to use a mana database, RDS Aurora we

56
00:03:54,588 --> 00:03:58,662
decided that we want to use Kubernetes to host easily thousands of

57
00:03:58,716 --> 00:04:02,262
mattermost workspace and customers operate to simplify

58
00:04:02,326 --> 00:04:05,690
the deployment of mattermost workspace customers services on the customer

59
00:04:05,760 --> 00:04:09,338
portal to interact with the customers, the provisioner and the fleet controller, which we're

60
00:04:09,344 --> 00:04:12,060
going to discuss in a few minutes.

61
00:04:12,430 --> 00:04:15,706
So we came up with this high level architecture. So you can see

62
00:04:15,728 --> 00:04:19,006
this is a wholesale platform. And what you can see here is that we have

63
00:04:19,028 --> 00:04:23,434
a command and control kubernetes cluster and a couple of worker kubernetes cluster

64
00:04:23,562 --> 00:04:26,946
which bots actually the customer workspaces. And the

65
00:04:26,968 --> 00:04:30,894
flow starts actually with customers visiting the front end, which is a customer portal,

66
00:04:30,942 --> 00:04:34,462
interact with the customer services, the customer portal and instruct

67
00:04:34,526 --> 00:04:38,194
provisioner actually, which is a central point of management for mattermost

68
00:04:38,242 --> 00:04:42,006
cloud resources to dictate and

69
00:04:42,028 --> 00:04:45,938
command operator in the wartier Kubernetes cluster

70
00:04:46,034 --> 00:04:49,900
to create a mattermost workspace for a specific customer.

71
00:04:50,430 --> 00:04:54,106
And we see also the flip controller which is actually a service possible for

72
00:04:54,128 --> 00:04:57,866
tracking matter most workspaces and making tweaks such

73
00:04:57,888 --> 00:05:01,958
as hibernating or deleting inactive workspaces. So it's

74
00:05:01,974 --> 00:05:05,246
mostly about housekeeping. So as

75
00:05:05,268 --> 00:05:08,846
we discussed few minutes before, we identified also the testing strategy and

76
00:05:08,868 --> 00:05:12,426
we realized that to test the SAS platform at scale, it will need bots

77
00:05:12,458 --> 00:05:15,806
of effort and will be really complex and will be hard automate.

78
00:05:15,838 --> 00:05:19,330
Everything will be cost and efficient because we'll run multiple

79
00:05:20,550 --> 00:05:24,258
workspaces and have daily user and so on,

80
00:05:24,344 --> 00:05:27,574
and will increase the time to market. That's really important for

81
00:05:27,612 --> 00:05:31,298
us to launch mattermost cloud fast. So one of our core

82
00:05:31,314 --> 00:05:35,286
principles in mattermost is to actually use our own product

83
00:05:35,388 --> 00:05:39,014
to complete our mission. And this is actually what

84
00:05:39,052 --> 00:05:42,794
we call, it's doc fooding. Right? So simply explain is

85
00:05:42,832 --> 00:05:46,570
that you will be able to understand exactly

86
00:05:46,640 --> 00:05:50,382
what it's like to use your product and the way that your users do

87
00:05:50,436 --> 00:05:53,470
actually if you use it right. And this is the time

88
00:05:53,540 --> 00:05:57,550
where our motto as a group has been created,

89
00:06:00,770 --> 00:06:04,206
built once and for all. And this

90
00:06:04,228 --> 00:06:07,934
is where actually also defined our mission as a group. The infrastructure

91
00:06:07,982 --> 00:06:11,538
group's mission empowered matter was to provide the SaaS platform as a

92
00:06:11,544 --> 00:06:15,406
product which helps internal and external users by guaranteeing

93
00:06:15,518 --> 00:06:19,130
that we operate an enterprise grade building, building, building, building a

94
00:06:19,150 --> 00:06:22,520
platform with selfserve powers, actually the mission of the group.

95
00:06:23,450 --> 00:06:27,046
So we find our testing strategy and we decided that

96
00:06:27,068 --> 00:06:30,698
we should not over automate and we need to prioritize only the customer

97
00:06:30,784 --> 00:06:34,234
experience and some of the critical paths for automation around

98
00:06:34,352 --> 00:06:37,386
integration. End to end testing and use a

99
00:06:37,408 --> 00:06:40,762
SaaS platform as a golden path to run a dog food.

100
00:06:40,816 --> 00:06:44,058
Actually the platform with testing devs ends, the support

101
00:06:44,144 --> 00:06:47,486
ends and the demo ends. And we will see how we can

102
00:06:47,508 --> 00:06:51,326
do that. So the new strategy actually was to offer the

103
00:06:51,348 --> 00:06:54,846
SaaS platform to two customers, actually the external customers that

104
00:06:54,868 --> 00:06:57,040
were before, and the internal customers,

105
00:06:57,650 --> 00:07:01,566
developers, sales, pH support, Devrel. And let's

106
00:07:01,678 --> 00:07:05,286
think that the internal customers, actually the early adopters, right, they are getting the

107
00:07:05,308 --> 00:07:09,398
latest and the greatest in the whole platform fast.

108
00:07:09,484 --> 00:07:13,830
So we can test whatever we deliver, all the changes we do in

109
00:07:13,900 --> 00:07:17,666
actually a real to identical actually

110
00:07:17,788 --> 00:07:20,890
platform in a test environment.

111
00:07:21,310 --> 00:07:24,774
So the new high level architecture

112
00:07:24,822 --> 00:07:28,234
has been changed a bit. So actually right

113
00:07:28,272 --> 00:07:31,498
now we have the same stuff, but you will see that we will include a

114
00:07:31,504 --> 00:07:34,798
few more things. So we have right now the customer control plane, which is

115
00:07:34,804 --> 00:07:38,206
about the customers interact with the customer portal and in

116
00:07:38,228 --> 00:07:42,030
parallel we have the developers control plane, as you can see

117
00:07:42,100 --> 00:07:45,930
in the left side where engineers interact with GitHub and Mattermost and

118
00:07:46,020 --> 00:07:49,394
with an internal developer platform layer, as you see.

119
00:07:49,512 --> 00:07:53,214
And apart from this we have the non developers control plane where non engineers,

120
00:07:53,262 --> 00:07:57,178
non developers actually use mattermost and interact with the internal developer

121
00:07:57,214 --> 00:08:00,966
platform and they enable all of them to

122
00:08:01,068 --> 00:08:04,742
use such a platform, which is a test

123
00:08:04,796 --> 00:08:08,246
environment and run their own workspaces in

124
00:08:08,348 --> 00:08:12,310
our clusters. So let's start with our developers control plane goals.

125
00:08:12,390 --> 00:08:15,786
We wanted to give them the self services capabilities to be

126
00:08:15,808 --> 00:08:19,014
able to do this by themselves and run test environments

127
00:08:19,142 --> 00:08:22,986
and dev environments actually in the platform. We wanted to

128
00:08:23,008 --> 00:08:26,538
support for staff and for open source contributors. We are an open source

129
00:08:26,554 --> 00:08:30,234
company and we inspect the open source

130
00:08:30,282 --> 00:08:34,370
community a lot. The developer experience

131
00:08:34,520 --> 00:08:38,258
should happen only with the tools we use daily actually. And we

132
00:08:38,264 --> 00:08:42,126
should not introduce something new to increase the cognitive

133
00:08:42,238 --> 00:08:45,826
learning chair. And we wanted to make the platform and

134
00:08:45,848 --> 00:08:49,394
the interaction as much a subject as we can,

135
00:08:49,432 --> 00:08:53,078
actually non developers control plane I

136
00:08:53,084 --> 00:08:56,386
would say there are not much differences there. I would say it's

137
00:08:56,418 --> 00:09:00,390
mostly difference in the sense that we support sales support in Devrel.

138
00:09:00,470 --> 00:09:03,926
Still we have the surface self capabilities, still the user

139
00:09:03,958 --> 00:09:07,706
experience should be with the tools we use daily and abstraction the

140
00:09:07,728 --> 00:09:11,114
SaaS platform should be agnostic. So we wanted

141
00:09:11,152 --> 00:09:13,934
to provide the seamless experience. And as we see there are some common things.

142
00:09:13,972 --> 00:09:17,806
We have mattermost where we collaborate, we communicate and

143
00:09:17,828 --> 00:09:19,840
we talk daily and we use it.

144
00:09:21,090 --> 00:09:26,314
And we use it actually most of our day. So both

145
00:09:26,452 --> 00:09:30,146
groups, developers and non developers, actually they use mattermost. But there

146
00:09:30,168 --> 00:09:33,746
is one more thing which is GitHub, including that, and we want actually to

147
00:09:33,848 --> 00:09:37,506
use the same interface as they had before. So we decided to use for

148
00:09:37,528 --> 00:09:41,438
GitHub the GitHub bots and for Mattermost to use actually that

149
00:09:41,464 --> 00:09:45,094
setups model which we're going to discuss in a few minutes. What is it?

150
00:09:45,292 --> 00:09:48,954
GitHub bots GitHub bots or apps actually are used

151
00:09:48,992 --> 00:09:53,174
to automate and improve workflows. It's a small services which interact

152
00:09:53,222 --> 00:09:56,586
with GitHub webhook events. And for

153
00:09:56,608 --> 00:10:00,246
that reason actually we created a GitHub bot

154
00:10:00,278 --> 00:10:03,606
which is called Spinweek. And what it does actually observes

155
00:10:03,638 --> 00:10:07,102
the GitHub labels in terms of the webhook event and

156
00:10:07,156 --> 00:10:10,670
accordingly deploys mattermost service in mattermost cloud.

157
00:10:10,820 --> 00:10:14,238
So we have different type of test services using the customer portal, through the

158
00:10:14,244 --> 00:10:18,318
CWS, through the customer web services and using provisioner.

159
00:10:18,494 --> 00:10:21,886
So the design level architecture is actually if we do a zoom

160
00:10:21,918 --> 00:10:25,570
in in the IDP right, there is another cluster which is a couple of services

161
00:10:25,640 --> 00:10:29,346
running. Then in this case we see Spinwick and interacts with GitHub. When something is

162
00:10:29,368 --> 00:10:32,950
happening in GitHub, Spinwick actually listens the changes in terms of the labels

163
00:10:34,170 --> 00:10:37,634
of the labels has been added or removed and interacts back

164
00:10:37,692 --> 00:10:41,626
with GitHub to provide the

165
00:10:41,648 --> 00:10:44,986
context back to your user, what exactly is happening, what is the

166
00:10:45,008 --> 00:10:48,954
status and so on. And Spinnywick still actually

167
00:10:49,072 --> 00:10:52,950
interacts with custom server to do what we discuss capability through the custom server

168
00:10:53,030 --> 00:10:56,560
and the other one for provisional, both of them, they will do actually

169
00:10:58,050 --> 00:11:01,994
a test environment, a test workspace in our test worker Kubernetes

170
00:11:02,042 --> 00:11:05,818
clusters. And let's see the self serve

171
00:11:05,834 --> 00:11:09,734
capabilities of Spinweak.

172
00:11:09,802 --> 00:11:13,154
And you can see here there is a pull request which has been

173
00:11:13,192 --> 00:11:16,258
raised right now we want to test in the cloud test server. You can see

174
00:11:16,264 --> 00:11:19,734
in the right side where the arrow actually is placed that

175
00:11:19,772 --> 00:11:23,186
we have a label set up cloud test server or set up hack

176
00:11:23,218 --> 00:11:26,534
cloud test services or set up cloud and CWS test

177
00:11:26,572 --> 00:11:30,166
server actually, all these are actually triggering the flow

178
00:11:30,198 --> 00:11:33,866
we discussed before in the high level architecture where

179
00:11:33,888 --> 00:11:37,226
a cloud server is created. And let's see actually how

180
00:11:37,248 --> 00:11:41,130
the whole interaction happens. So you can see here that I

181
00:11:41,200 --> 00:11:44,462
just added a level which is called setup cloud

182
00:11:44,516 --> 00:11:47,534
test server. So for the experience,

183
00:11:47,652 --> 00:11:51,022
right, and to make clear to the user that something is happening,

184
00:11:51,156 --> 00:11:54,834
Spinnyweeks is replying back with a comment to GitHub and says

185
00:11:54,872 --> 00:11:59,314
that right now we're creating a new Spinnyweek test server using maternals cloud.

186
00:11:59,512 --> 00:12:02,818
A few minutes after, actually 1 minute after,

187
00:12:02,904 --> 00:12:06,978
you will see another comment by Spinweek which says that the mosque services

188
00:12:07,074 --> 00:12:10,902
has been created successfully. Here is the access link and

189
00:12:10,956 --> 00:12:14,774
huge delights the name, the pull

190
00:12:14,812 --> 00:12:18,602
request numbers, and here are the credentials which are common

191
00:12:18,656 --> 00:12:22,858
for everyone to use in

192
00:12:22,864 --> 00:12:27,130
order to be able to log in in your mattermost test server.

193
00:12:27,550 --> 00:12:31,710
But it's not only about creation, of course, it's about also removing

194
00:12:32,290 --> 00:12:35,966
the environment. So if I remove the label, it's going to destroy the

195
00:12:35,988 --> 00:12:40,362
server. If I melt or close the pr, the test server

196
00:12:40,426 --> 00:12:45,070
also is going to be destroyed. And that's

197
00:12:45,150 --> 00:12:48,226
the good thing. Actually, the good part we

198
00:12:48,248 --> 00:12:52,206
won't discuss right now that why you need to have a common SaaS

199
00:12:52,238 --> 00:12:55,670
platform and set up both customers is that

200
00:12:55,740 --> 00:12:59,910
we discussed a few minutes in the high level architecture about the fleet controller.

201
00:13:00,250 --> 00:13:03,334
And let's say that someone has a pull

202
00:13:03,372 --> 00:13:06,518
request which is running for

203
00:13:06,604 --> 00:13:11,020
many days. You have created a test server and

204
00:13:11,390 --> 00:13:14,758
it's there. So imagine that if we have multiple polyquests

205
00:13:14,774 --> 00:13:18,442
which are actually in that state, then we will have

206
00:13:18,496 --> 00:13:21,742
multiple test servers just sitting there and not doing anything.

207
00:13:21,796 --> 00:13:25,150
So the fleet controller is responsible for the housekeeping as

208
00:13:25,220 --> 00:13:29,214
we do with the customer experience,

209
00:13:29,332 --> 00:13:32,750
the same thing. So if there is an activity after a few days,

210
00:13:32,820 --> 00:13:36,514
go to the hibernate state, and if after this hibernate state

211
00:13:36,552 --> 00:13:40,258
there is no activity, it's going to be deleted. So the housekeeping is exactly

212
00:13:40,344 --> 00:13:43,506
the same as we offer to our customers, right when

213
00:13:43,528 --> 00:13:47,154
they do trials. This make the engineers

214
00:13:47,202 --> 00:13:50,918
a bit more hungry and they want to automate a few more things.

215
00:13:51,004 --> 00:13:54,214
So we created another bots which is a thing

216
00:13:54,252 --> 00:13:58,274
which used to automate workflows in GitHub, again using labels,

217
00:13:58,322 --> 00:14:02,326
using slash commands in comments for a pull request,

218
00:14:02,438 --> 00:14:06,058
adding labels for housekeeping into issues in prs and

219
00:14:06,224 --> 00:14:09,546
let's see some examples. So again, it's a self serve and we use the

220
00:14:09,568 --> 00:14:13,466
slash common when someone is coming to mattermost as

221
00:14:13,488 --> 00:14:17,326
an open source contributor and wants actually to contribute to Mattermost, they need

222
00:14:17,348 --> 00:14:20,606
to sign their mattermost contributor agreement and you see

223
00:14:20,628 --> 00:14:23,838
on the left side and the left image that someone has

224
00:14:23,844 --> 00:14:27,586
been raised a pull request and got a comment back which says that you

225
00:14:27,608 --> 00:14:31,534
need to sign actually the mattermost agreement. And once you have signed,

226
00:14:31,582 --> 00:14:35,830
just run slash check CLA to confirm that CLA

227
00:14:36,570 --> 00:14:40,214
is okay and green and you can see that someone has

228
00:14:40,252 --> 00:14:45,074
signed and runs after this in a comment check CLA

229
00:14:45,202 --> 00:14:48,534
and automatically you will see on the right

230
00:14:48,572 --> 00:14:51,880
side that there is a status check which says CLA matter mode is green.

231
00:14:52,430 --> 00:14:56,538
So mother mode has another

232
00:14:56,704 --> 00:15:00,666
option which is update branch. We can just update a pull request with the

233
00:15:00,688 --> 00:15:04,298
latest branch which is targeted to merge. For example, if I'm targeting

234
00:15:04,314 --> 00:15:07,706
main in my pull request, if I run Slash update branch,

235
00:15:07,738 --> 00:15:11,150
I'm going to actually merge the latest changes from main.

236
00:15:11,220 --> 00:15:14,926
And you can see the example here that someone

237
00:15:15,108 --> 00:15:18,398
wrote actually a comment update

238
00:15:18,494 --> 00:15:21,678
branch and this automatically mattermost mode

239
00:15:21,694 --> 00:15:25,202
actually mert all the changes which are included in the main

240
00:15:25,256 --> 00:15:28,926
branch. There are a few other things. There is also

241
00:15:28,968 --> 00:15:31,974
a few other common terry pick which is very handy for us in order to

242
00:15:32,012 --> 00:15:35,126
use releases. So we want pull requests to be

243
00:15:35,148 --> 00:15:38,534
terrific in other multiple branches for bug fixes or

244
00:15:38,572 --> 00:15:41,858
for improvements. We have also slash commands to run end to end tests

245
00:15:41,874 --> 00:15:44,794
which are running in the SAS platform, which is another thing we try to do.

246
00:15:44,832 --> 00:15:47,750
So we have the same SAS platform to run the end to end tests,

247
00:15:47,830 --> 00:15:51,350
and there is an end to end cancel which cancels the end to end

248
00:15:51,360 --> 00:15:54,986
test if something is really slow. There's also the housekeeping

249
00:15:55,018 --> 00:15:58,830
part we discussed. If a pull request

250
00:15:59,170 --> 00:16:02,946
has an activity for a

251
00:16:02,968 --> 00:16:07,220
specific duration actually

252
00:16:07,910 --> 00:16:11,614
automatically, Mattermost will see this pull request and will label

253
00:16:11,662 --> 00:16:14,866
them as state. So it will be easier for us to go through this pull

254
00:16:14,888 --> 00:16:18,600
request and see if something we need to add or something we need to check.

255
00:16:18,970 --> 00:16:22,566
So we discussed few minutes before that, one of our great

256
00:16:22,588 --> 00:16:26,146
mattermost was chatops. Chatops is a collaboration

257
00:16:26,178 --> 00:16:29,766
model that connects people, tools, process and automation into

258
00:16:29,788 --> 00:16:33,914
a transparent workflow. And just to understand what

259
00:16:33,952 --> 00:16:37,750
exactly we talk about, if we're in a communication

260
00:16:37,910 --> 00:16:41,562
platform like Mattermost, right, a collaboration platform without

261
00:16:41,616 --> 00:16:44,846
satos, we need to communicate inside for all the things we do together, even if

262
00:16:44,868 --> 00:16:49,790
we are engineers or non engineers, and use something else to

263
00:16:49,860 --> 00:16:53,214
trigger a workflow or platform tool. So we

264
00:16:53,252 --> 00:16:56,942
tried to make this similarly with chatops. The engineers

265
00:16:57,006 --> 00:17:00,370
and non engineers in a way communicate in chat, and mattermost

266
00:17:00,520 --> 00:17:04,066
can interact with bots and send common to

267
00:17:04,088 --> 00:17:07,630
initiate workflows in the platform tools. So everything happens similarly

268
00:17:07,710 --> 00:17:11,018
in the platform URL, especially for the non engineers.

269
00:17:11,214 --> 00:17:14,840
The non developers control plane is really important as it's the number

270
00:17:15,690 --> 00:17:19,170
one thing they use daily setups with Mattermost.

271
00:17:19,250 --> 00:17:23,022
Actually, we offer a bunch of options to the functionality and customized experience with satos.

272
00:17:23,106 --> 00:17:26,330
There is the slash commands and the plugins. And for our

273
00:17:26,400 --> 00:17:30,054
chase, actually, we built the cloud plugin. The cloud bot

274
00:17:30,102 --> 00:17:33,870
allows the creation and the management of a test end in the SAS platform

275
00:17:34,020 --> 00:17:37,774
directly from mattermost using slash formats from

276
00:17:37,812 --> 00:17:40,782
any channel. Right? You can do this from any channel you are,

277
00:17:40,836 --> 00:17:43,854
or the DM to the bot,

278
00:17:43,902 --> 00:17:47,506
actually, and just a small example, let's say

279
00:17:47,528 --> 00:17:50,882
that we are going to create a conf fourty

280
00:17:50,936 --> 00:17:54,754
two. The cloud create test configurable 42

281
00:17:54,792 --> 00:17:58,582
is the one in which we need to actually to write down in

282
00:17:58,636 --> 00:18:02,722
mattermost, and this will return back to us that installation

283
00:18:02,786 --> 00:18:06,166
has been initiated. You will see an application when it's ready, and you can

284
00:18:06,188 --> 00:18:10,122
see the status of all cloud installation cloud

285
00:18:10,176 --> 00:18:13,786
list. And when everything is ready, the cloudboard will

286
00:18:13,808 --> 00:18:17,078
reply back to you with a DM that then the workspace

287
00:18:17,094 --> 00:18:20,394
has been created that SN is there. This is the access URL actually,

288
00:18:20,512 --> 00:18:24,878
and credentials we can use. And you can see something extra,

289
00:18:25,044 --> 00:18:28,446
which is the part we didn't discuss in

290
00:18:28,468 --> 00:18:32,174
this presentation about the monitoring control plane, where we can offer

291
00:18:32,292 --> 00:18:35,630
a monitoring control plane for everyone, where they can see their

292
00:18:35,700 --> 00:18:38,994
workspace logs and the provisional locks in case if something went

293
00:18:39,032 --> 00:18:42,194
wrong. So we didn't want to stop there.

294
00:18:42,232 --> 00:18:45,966
So we wanted also to offer the capability to be able to configure

295
00:18:45,998 --> 00:18:49,586
and compose your own environment so you can do

296
00:18:49,608 --> 00:18:54,166
a couple of things with a slash cloud. So we're creating another one which

297
00:18:54,188 --> 00:18:57,906
is called Cloudwick and has a specific license. It can generate

298
00:18:57,938 --> 00:19:01,578
some test data. It uses a specific size in terms of resources for

299
00:19:01,584 --> 00:19:05,462
the high availability and a specific file. This gives us an ability

300
00:19:05,526 --> 00:19:08,730
for the support team, for example, or for the sales team,

301
00:19:08,880 --> 00:19:12,478
or for the Devrel team to create different kind of

302
00:19:12,564 --> 00:19:15,726
environments based on the users they want

303
00:19:15,748 --> 00:19:19,038
to make and the use cases they have in the scenarios, right?

304
00:19:19,124 --> 00:19:22,286
So right now, if we go back to

305
00:19:22,308 --> 00:19:26,254
the architecture and focus at least on the part which is the IDP,

306
00:19:26,302 --> 00:19:29,826
right, and how all the control planes are working together,

307
00:19:30,008 --> 00:19:33,374
we still have the control plane, the customer control plane,

308
00:19:33,422 --> 00:19:37,218
where the customers interact and they create their own workspace,

309
00:19:37,314 --> 00:19:41,286
their managed workspace, and the

310
00:19:41,308 --> 00:19:45,222
mattermost workspace. And from the left side we have the two more

311
00:19:45,356 --> 00:19:48,922
control planes, which is the developers control plane and the non developers control

312
00:19:48,976 --> 00:19:53,750
plane, which they use both as an interface mattermost,

313
00:19:53,830 --> 00:19:56,650
and engineers only GitHub.

314
00:19:57,150 --> 00:20:01,434
All of them interact with IDP right seamlessly without knowing

315
00:20:01,482 --> 00:20:05,514
exactly what's happening underneath. And right now we can see, right, that IDP

316
00:20:05,562 --> 00:20:08,762
consists of multiple many services. The Spain

317
00:20:08,906 --> 00:20:11,978
which cut before cloudboard, Mattermost mode,

318
00:20:12,154 --> 00:20:15,966
motherboard is another one. We have a couple of other actually bots

319
00:20:15,998 --> 00:20:19,758
for doing the same thing in small services with GitHub and Mattermost.

320
00:20:19,934 --> 00:20:24,370
And this is actually our internal developer platform story and

321
00:20:24,520 --> 00:20:27,798
the story which relied actually how we built once

322
00:20:27,884 --> 00:20:31,320
and for all, right? For both world's customer and

323
00:20:31,850 --> 00:20:33,510
the internal organization.

324
00:20:34,410 --> 00:20:37,718
Learnings, the flexibility and the

325
00:20:37,724 --> 00:20:41,754
reusability of the same track give us much more confidence to be sure that

326
00:20:41,952 --> 00:20:46,118
what we deliver daily and the changes we had during the whole software development

327
00:20:46,214 --> 00:20:49,842
lifecycle was stable,

328
00:20:50,006 --> 00:20:53,902
was able to perform, identify fast bugs of the issue,

329
00:20:53,956 --> 00:20:57,886
even identify non healthy mattermost

330
00:20:57,988 --> 00:21:01,534
workspaces of the test ends. Because we had the same

331
00:21:01,572 --> 00:21:04,906
mentality of the slos, even in the test infrastructure

332
00:21:05,018 --> 00:21:08,610
and the test trust platform, it was really important

333
00:21:08,680 --> 00:21:12,066
for us and was a good learning that the developer and user experience needs

334
00:21:12,088 --> 00:21:15,666
to be seamless instead of creating

335
00:21:15,698 --> 00:21:19,766
something new and something which is out of

336
00:21:19,788 --> 00:21:23,158
the daily usage of the people that

337
00:21:23,164 --> 00:21:27,314
are going to interact with your platform, run surveys, gather feedback

338
00:21:27,362 --> 00:21:31,034
and listen to your internal and external customers is really important thing. This is how

339
00:21:31,072 --> 00:21:34,602
actually the platform becomes better. And the last

340
00:21:34,656 --> 00:21:38,010
thing which we mentioned also is use your own product.

341
00:21:38,160 --> 00:21:41,502
This is the only way to identify if what you have built

342
00:21:41,556 --> 00:21:45,534
is something actually meaningful for the customers

343
00:21:45,732 --> 00:21:49,118
and if it fits to

344
00:21:49,204 --> 00:21:52,014
your needs and it's something which you can use,

345
00:21:52,052 --> 00:21:55,550
probably customers also can use. Of course this needs

346
00:21:55,620 --> 00:21:59,582
other inputs in terms of feedback, slos and other things.

347
00:21:59,716 --> 00:22:03,774
So that's it. Thanks a lot, have a great rest

348
00:22:03,812 --> 00:22:05,410
of the day and have a great conference.

