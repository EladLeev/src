1
00:00:00,250 --> 00:00:01,630
Are you an sre?

2
00:00:03,570 --> 00:00:04,830
A developer?

3
00:00:06,610 --> 00:00:09,754
A quality engineer who wants to tackle the challenge

4
00:00:09,802 --> 00:00:13,534
of improving reliability in your DevOps? You can enable your

5
00:00:13,572 --> 00:00:16,510
DevOps for reliability with chaos native.

6
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native Litmus Cloud

7
00:01:17,050 --> 00:01:20,866
good morning, good afternoon wherever you are in the world. Welcome to today's

8
00:01:20,898 --> 00:01:24,534
session on HADR options for Microsoft SQL Server on

9
00:01:24,572 --> 00:01:28,946
AWS my name is Asif Mujawar. I'm a senior specialist solutions architect

10
00:01:28,978 --> 00:01:32,566
database here at AWS. So in today's

11
00:01:32,598 --> 00:01:36,666
session, what we're going to cover, we're going to talk about we'll look

12
00:01:36,688 --> 00:01:40,246
at the introduction of SQL Server on AWS, how SQL Server is deployed

13
00:01:40,278 --> 00:01:43,866
on AWS and what are the options we have to deploy SQL Server on AWS.

14
00:01:43,978 --> 00:01:47,726
Then we'll look into the HADR options on AWS for

15
00:01:47,748 --> 00:01:51,146
SQL Server and then we'll look at how to reduce a way to reduce

16
00:01:51,178 --> 00:01:54,766
the SQL server license cost on AWS. So let's

17
00:01:54,798 --> 00:01:58,130
start with the SQL Server on AWS.

18
00:01:58,630 --> 00:02:01,954
SQL Server on AWS typically you can deploy in two

19
00:02:01,992 --> 00:02:05,166
flavors. So you can deploy on the Amazon

20
00:02:05,198 --> 00:02:08,466
RDS for SQL Server which is our managed service offering with the

21
00:02:08,488 --> 00:02:12,246
single click capability and license included instances only.

22
00:02:12,348 --> 00:02:16,374
On the other hand, we have SQL Server on Amazon EC two which is self

23
00:02:16,412 --> 00:02:20,250
managed vm exactly the same way what you currently do on premises

24
00:02:21,390 --> 00:02:25,354
and with the manual high availability and license included, or bring

25
00:02:25,392 --> 00:02:28,586
your own license instances. Now let's just dive a bit

26
00:02:28,608 --> 00:02:32,510
more deeper into what are the options for deployments SQL Server on Amazon

27
00:02:32,850 --> 00:02:36,126
on AWS. So if you

28
00:02:36,148 --> 00:02:39,546
look at the right hand side, SQL Server

29
00:02:39,578 --> 00:02:44,398
on Amazon EC two is basically all

30
00:02:44,484 --> 00:02:48,434
the admin tasks which basically doesn't really

31
00:02:48,632 --> 00:02:51,726
add any value towards your business processes

32
00:02:51,758 --> 00:02:55,614
such as scaling, the habibability, the backups,

33
00:02:55,662 --> 00:02:59,534
the patching, the device install and maintenance and always level patching

34
00:02:59,662 --> 00:03:03,126
and those firefighting issues to maintain the

35
00:03:03,148 --> 00:03:06,934
space or add a space onto the database service,

36
00:03:07,052 --> 00:03:10,182
that's basically what you currently, currently do on premises.

37
00:03:10,246 --> 00:03:13,930
To maintain a SQL server infrastructure is something you will continue

38
00:03:14,000 --> 00:03:17,626
doing. So when it comes to an EC two, what we

39
00:03:17,648 --> 00:03:21,194
will do, the underlying data

40
00:03:21,232 --> 00:03:24,986
center operations of power racking and stacking, the hypervisor

41
00:03:25,018 --> 00:03:28,766
level and the os install and maintenance, that is something will

42
00:03:28,788 --> 00:03:32,718
be offered out of the box on EC two. But whereas everything else

43
00:03:32,804 --> 00:03:36,382
like the OS patching database install,

44
00:03:36,516 --> 00:03:40,062
the database patching, the backups, the hatcha, the scaling,

45
00:03:40,206 --> 00:03:44,254
you need to do that yourself. And this is where RDS

46
00:03:44,302 --> 00:03:48,066
comes into play, where all those undifferentiated heavy lifting

47
00:03:48,098 --> 00:03:51,494
tasks is what we call it at Amazon. When you don't really

48
00:03:51,532 --> 00:03:55,542
add any value to your end user experience in terms of doing

49
00:03:55,596 --> 00:03:59,002
the OS level patching or doing the device install

50
00:03:59,056 --> 00:04:02,570
and maintenance or datalets patching or backups, the ha,

51
00:04:02,640 --> 00:04:06,266
the scaling, all these tasks are taken care for

52
00:04:06,288 --> 00:04:10,182
you on the other side which is Amazon RDS. These comes as

53
00:04:10,256 --> 00:04:13,614
offering as a managed service, so it comes just out of the box for you.

54
00:04:13,732 --> 00:04:17,200
And what that gives you that

55
00:04:17,970 --> 00:04:21,822
basically releases the resources to focus upon business

56
00:04:21,876 --> 00:04:25,026
value tasks and do the high level schema tuning or

57
00:04:25,048 --> 00:04:29,474
schema optimization. So that way the

58
00:04:29,512 --> 00:04:32,626
tasks which are schema tuning and all of that currently on

59
00:04:32,648 --> 00:04:36,854
premises will be the last thing you worry about because you

60
00:04:36,892 --> 00:04:40,530
have the production issues, the patching

61
00:04:40,610 --> 00:04:44,854
or the backups or the space issues to

62
00:04:44,892 --> 00:04:48,550
tackle. Before you get to these tuning issues, what RDS does.

63
00:04:48,620 --> 00:04:52,306
RDS then takes care of everything those

64
00:04:52,348 --> 00:04:56,042
operational issues for you and leave you to focus on those

65
00:04:56,096 --> 00:04:59,738
tuning which directly contributes towards

66
00:04:59,824 --> 00:05:01,340
your end user experience.

67
00:05:04,350 --> 00:05:08,922
So we'll just look at quickly at the features

68
00:05:09,066 --> 00:05:12,734
on both sides. So EC two is supported with

69
00:05:12,772 --> 00:05:16,194
either by Ol or bring your own license or bring your own

70
00:05:16,232 --> 00:05:19,426
software or pre configured AMis that

71
00:05:19,448 --> 00:05:23,426
is basically virtual machines or pre configured options will the

72
00:05:23,448 --> 00:05:27,542
pre configured options will now have as many versions or options supported AWS custom

73
00:05:27,596 --> 00:05:30,120
build solution that you might build yourself.

74
00:05:31,130 --> 00:05:34,822
So at the moment, how many of you have struggled either because

75
00:05:34,876 --> 00:05:38,738
of expenses or just technical challenges in the setting

76
00:05:38,754 --> 00:05:42,554
of multi site high availability option for SQL server instance with

77
00:05:42,592 --> 00:05:45,974
RDS for SQL Server it's as simple as checking as a checkbox

78
00:05:46,102 --> 00:05:50,326
when you launch an Amazon RDS instance to set up multi AZ SQL server

79
00:05:50,358 --> 00:05:53,910
cluster that leverages synchronous replication between AZs

80
00:05:53,990 --> 00:05:57,566
or using devs mirroring, we'll dive into this as we

81
00:05:57,588 --> 00:06:00,766
go along the session. But if

82
00:06:00,788 --> 00:06:03,898
you need a different ha solution like always on or log shipping, then choose

83
00:06:03,924 --> 00:06:08,340
SQL Server on Amazon EC two and these manage that yourself. Both platform

84
00:06:08,870 --> 00:06:12,398
support storage encryption for all Edition using kms

85
00:06:12,494 --> 00:06:16,226
and those of you running Enterprise edition you can use TDE on

86
00:06:16,248 --> 00:06:19,270
both platform that are transparent encryption.

87
00:06:20,250 --> 00:06:24,146
If you need to install third party tools such as Ola Haleigan

88
00:06:24,178 --> 00:06:26,760
scripts for maintenance plan or use,

89
00:06:27,690 --> 00:06:31,002
then run the SQL server on Amazon EC two.

90
00:06:31,056 --> 00:06:34,602
Otherwise RDS will take care of everything

91
00:06:34,656 --> 00:06:38,486
for you and if you want to take advantage of automated patching

92
00:06:38,598 --> 00:06:42,634
then choose Amazon RDS for SQL Server. Otherwise you need to manage those tedious

93
00:06:42,682 --> 00:06:45,840
maintenance tasks yourself with SQL Server on Amazon EC two.

94
00:06:46,930 --> 00:06:51,006
With that folks, let's dive into the HADR options in

95
00:06:51,028 --> 00:06:55,006
a glance. So typically there

96
00:06:55,028 --> 00:06:58,334
are multiple options when it comes to habibability and disaster

97
00:06:58,382 --> 00:07:01,570
recovery. But we can categorize them into three areas.

98
00:07:02,150 --> 00:07:05,806
Let's just say that simple HADR, standard HADR

99
00:07:05,838 --> 00:07:09,026
and machine critical HADR. With these simple HADR, it's the

100
00:07:09,048 --> 00:07:12,390
VM level protection where if you have a failover or a hyper as a level,

101
00:07:12,460 --> 00:07:15,746
then you are protected at the guest level but no protection at the SQL server

102
00:07:15,778 --> 00:07:19,170
or guest os layer. Whereas the standard layer,

103
00:07:19,250 --> 00:07:22,522
standard HADR, we take that into consideration where we'll provide

104
00:07:22,576 --> 00:07:26,166
you the VM level protection plus SQL server

105
00:07:26,198 --> 00:07:29,974
instance level protection. Plus you'll get the guest os

106
00:07:30,022 --> 00:07:33,946
layer protection as well. And with the basic availability groups, you can have the

107
00:07:33,968 --> 00:07:37,354
device level protection as well. Now when it comes to mission critical

108
00:07:37,402 --> 00:07:41,262
HaDR, it's a combination of simple plus standard plus

109
00:07:41,396 --> 00:07:45,614
what you go in there, you go into the device level protection.

110
00:07:45,742 --> 00:07:49,138
Now, what is the different SQL server protection levels we'll cover in

111
00:07:49,144 --> 00:07:52,462
these next slide? But briefly,

112
00:07:52,526 --> 00:07:55,886
it's about what's been protected at what level in

113
00:07:55,928 --> 00:07:59,218
terms of your failures,

114
00:07:59,314 --> 00:08:02,918
like whether it's at the os layer, whether it's a

115
00:08:02,924 --> 00:08:06,754
guest layer or it's a SQL instance layer or the database layer. Now machinery

116
00:08:06,802 --> 00:08:09,100
called HADR will cover everything.

117
00:08:09,470 --> 00:08:13,162
Plus it will give you seconds of RTO with zero

118
00:08:13,216 --> 00:08:16,534
data loss and with the minimum downtime

119
00:08:16,582 --> 00:08:19,850
for plant maintenance and offer

120
00:08:19,920 --> 00:08:21,950
you the horizontal read scaling.

121
00:08:22,850 --> 00:08:26,266
Now let's dive into the protection levels

122
00:08:26,298 --> 00:08:29,914
as we spoke about. So if you look at the VM

123
00:08:29,962 --> 00:08:33,086
level protection or the VM failover that protects you from the

124
00:08:33,108 --> 00:08:37,214
hardware failure at the host itself or

125
00:08:37,252 --> 00:08:40,766
the hypervisor level failures, or if you have a

126
00:08:40,788 --> 00:08:43,710
guest os level failures,

127
00:08:44,690 --> 00:08:48,134
if now if I want to take it to the next

128
00:08:48,172 --> 00:08:51,526
level, that's your VM failure is a simple HaDR. Now if

129
00:08:51,548 --> 00:08:53,206
I want to take it to the next level, or I want to say,

130
00:08:53,228 --> 00:08:56,806
hey, I want to protect my SQL server level failure if my instance is

131
00:08:56,828 --> 00:08:59,926
hunk, how about that? Now that's something that can

132
00:08:59,948 --> 00:09:03,606
be covered with the FCI, these failure cluster instances,

133
00:09:03,638 --> 00:09:07,126
which we'll dive in a slide or two in terms of diving

134
00:09:07,158 --> 00:09:10,870
into what the FCIs and what the options available for you to leverage

135
00:09:10,950 --> 00:09:14,586
the high vability at these cluster level, which is

136
00:09:14,608 --> 00:09:17,854
the failure clustering instances. Now if I want to protect my

137
00:09:17,892 --> 00:09:21,706
databases, so I protected my hardware, I protected

138
00:09:21,898 --> 00:09:25,166
hyperwaza, I protected for the os level and also protected

139
00:09:25,198 --> 00:09:28,734
for SQL server instance level. But what if my database gets hung

140
00:09:28,862 --> 00:09:32,850
or my database itself becomes unfunctional?

141
00:09:34,550 --> 00:09:38,354
Then how about that? So we have the availability groups

142
00:09:38,402 --> 00:09:42,566
or the mirroring that could help you to tackle that

143
00:09:42,588 --> 00:09:46,326
scenario and fail over to the other partner. We'll dive into this

144
00:09:46,508 --> 00:09:49,818
every single option in a deep as we go through

145
00:09:49,824 --> 00:09:53,130
the slide deck. So let's talk about simple

146
00:09:53,200 --> 00:09:56,326
HaDR. Now, simple HADR, we spoke

147
00:09:56,358 --> 00:09:59,850
about VM or guest level failures.

148
00:10:00,270 --> 00:10:03,962
So for example, at the moment onpremises you have the VM

149
00:10:04,026 --> 00:10:06,810
running on SQL server, running on OEM,

150
00:10:06,970 --> 00:10:10,794
that's using the VMDA or VMDK files or the VHDX

151
00:10:10,842 --> 00:10:14,842
or RDM files that are hosted on this Ovsan.

152
00:10:14,906 --> 00:10:18,066
Or if you have done the RDM directly on the SAN, which is presented from

153
00:10:18,088 --> 00:10:21,422
the same location, now you have the hyperwiser level and the hardware

154
00:10:21,486 --> 00:10:26,062
underneath. Now if the hardware

155
00:10:26,126 --> 00:10:29,854
goes down, the hyperwiser has an issue or the VM

156
00:10:29,902 --> 00:10:33,946
fails, then the VM will move v motion

157
00:10:33,998 --> 00:10:38,026
to the other side and it will start running on another

158
00:10:38,128 --> 00:10:41,514
hypervisor or hardware level. So it's like in a v

159
00:10:41,552 --> 00:10:45,130
motion to the other host to cover

160
00:10:45,200 --> 00:10:48,506
yourself upon the underlying hardware failure. And this

161
00:10:48,528 --> 00:10:52,282
is on premises. This is what currently we do onpremises.

162
00:10:52,426 --> 00:10:54,830
How about if I bring it to AWS,

163
00:10:55,650 --> 00:10:59,662
we have a single AZ deployment. It's basically

164
00:10:59,796 --> 00:11:02,974
you have an ABS volume. That's where the EC two instance is

165
00:11:03,012 --> 00:11:06,398
running. And that's basically you have an auto scaling

166
00:11:06,414 --> 00:11:10,386
group. It can scale as the demand grows, or at

167
00:11:10,408 --> 00:11:14,222
the same time you have the auto heal functionality

168
00:11:14,286 --> 00:11:17,422
within the VM. So if something goes wrong with the EC two instance,

169
00:11:17,486 --> 00:11:20,934
it will self heal the

170
00:11:20,972 --> 00:11:24,150
instance itself or it will move within the AZ.

171
00:11:24,570 --> 00:11:28,066
If the instance goes down, the underlying

172
00:11:28,098 --> 00:11:31,414
host has a problem. The EC two instance will move from one host

173
00:11:31,462 --> 00:11:34,330
to the other host like you have vmotion onpremises.

174
00:11:36,750 --> 00:11:40,700
Now let's talk about the backup and restore other simple HaDR options.

175
00:11:41,310 --> 00:11:44,906
Generally speaking, there are two major types of backups.

176
00:11:44,938 --> 00:11:48,698
Those are backing of the entire SQL instance, backing of the individual database,

177
00:11:48,794 --> 00:11:52,174
or that is basically server level backups are usually

178
00:11:52,212 --> 00:11:55,554
the hardware assisted. Using the special storage technologies, you can

179
00:11:55,592 --> 00:11:59,246
snapshot the underlying storage where a SQL server instance stores its files.

180
00:11:59,358 --> 00:12:02,942
Using these snapshots, you can restore a database instance

181
00:12:03,006 --> 00:12:06,754
to the point that you can perform a point in time

182
00:12:06,792 --> 00:12:10,038
when the snapshot was taken. The other type we have, that is

183
00:12:10,044 --> 00:12:13,574
the database level backup is a native SQL server capability and

184
00:12:13,612 --> 00:12:17,366
does not need any special hardware. It can be either full backup of

185
00:12:17,388 --> 00:12:20,858
an entire database or a differential backup that keeps changes

186
00:12:20,944 --> 00:12:24,518
since the previously taken differential or full backup or transaction log backup

187
00:12:24,614 --> 00:12:28,518
which stores the transaction logs and enables replaying those transaction logs

188
00:12:28,614 --> 00:12:32,646
on top of a previously taken full or differential backup. And therefore restores

189
00:12:32,678 --> 00:12:35,360
a database to any point in time.

190
00:12:37,090 --> 00:12:40,186
So let's talk about the two options, what we have when it comes to backup

191
00:12:40,218 --> 00:12:43,626
and restore on premises versus AWS. So at the moment you have a regular backup

192
00:12:43,658 --> 00:12:46,894
plan running on on premises. You can have the same thing on RDS.

193
00:12:47,022 --> 00:12:50,706
On AWS, for example, you can have weekly full

194
00:12:50,808 --> 00:12:53,954
daily differentials and transaction logs. Backup every

195
00:12:53,992 --> 00:12:57,362
15 minutes. You can run the backup on a local

196
00:12:57,416 --> 00:13:00,854
volume, you can do the same thing on AWS, you can run the backup on

197
00:13:00,972 --> 00:13:04,770
EBIS volume, you can move the backups on archived

198
00:13:04,930 --> 00:13:08,418
this is what I currently do on premises. When it comes to AWS, you move

199
00:13:08,444 --> 00:13:13,162
the backups to s three. Now within

200
00:13:13,216 --> 00:13:16,954
s three you have different options available for you to move

201
00:13:16,992 --> 00:13:20,346
your backups. For example, you have retention policies of the backup that you need to

202
00:13:20,368 --> 00:13:23,658
retain for compliance purposes for more than ten years. Now you don't want to stick

203
00:13:23,674 --> 00:13:28,794
that backup into an s three bucket and then pay additional

204
00:13:28,842 --> 00:13:31,866
charge just for having those backups in a standard tier.

205
00:13:31,898 --> 00:13:35,282
Now standard tier will have a premium cost

206
00:13:35,336 --> 00:13:38,818
to it, whereas if you move these backups which are not used,

207
00:13:38,904 --> 00:13:42,878
say for example, my weekly backups get moved

208
00:13:42,974 --> 00:13:46,514
after two weeks into infrequently accessed bucket

209
00:13:46,642 --> 00:13:51,110
because those backups are not going to need it anymore. And after say

210
00:13:51,180 --> 00:13:55,698
six to eight weeks, I will then move those backup into glacier.

211
00:13:55,874 --> 00:13:59,414
So that way I'm not constantly paying the premium

212
00:13:59,462 --> 00:14:03,722
cost to store the backups. It's always moving to the lower

213
00:14:03,776 --> 00:14:06,940
cost tiers as the file goes.

214
00:14:08,910 --> 00:14:13,146
As the time grows or the backup becomes older and older, we just keep shifting

215
00:14:13,178 --> 00:14:17,162
that to the cost effective storage

216
00:14:17,226 --> 00:14:20,974
where possibilities. Basically what

217
00:14:21,012 --> 00:14:24,698
you can do is point it down. Recovery is available using SQL server backups.

218
00:14:24,874 --> 00:14:28,260
You can do the differential backups to diminish the backup time and space.

219
00:14:28,630 --> 00:14:32,302
And some of the best practices are in every time transaction log is cleared,

220
00:14:32,366 --> 00:14:36,246
full backup should be taken and in AWS. I would

221
00:14:36,268 --> 00:14:40,342
rather suggest if you want to do the server level

222
00:14:40,396 --> 00:14:44,630
backups then consider using the VSS enabled EBS snapshots than

223
00:14:44,780 --> 00:14:48,786
looking into the back end of the entire database. Now let's

224
00:14:48,818 --> 00:14:52,086
talk about the backups on RDS. So RDS supports both types

225
00:14:52,118 --> 00:14:55,958
of backups server level as well as SQL server

226
00:14:55,974 --> 00:14:59,686
DB level backups. So when you create an Amazon RDS SQL

227
00:14:59,718 --> 00:15:03,438
instance, it already includes an automated server backups out of

228
00:15:03,444 --> 00:15:06,810
the box. It takes daily snapshot of the entire instance

229
00:15:06,890 --> 00:15:10,654
and by default retains these snapshot for seven days. You could also

230
00:15:10,692 --> 00:15:14,306
configure it to another retention period that works better for your needs

231
00:15:14,488 --> 00:15:17,490
up to 35 days in Amazon RDS,

232
00:15:18,630 --> 00:15:22,398
these are called automated backups, and they are entirely managed by Amazon

233
00:15:22,414 --> 00:15:26,458
RDS. Apart from automated backups, you could also create user initiative

234
00:15:26,494 --> 00:15:30,454
backup. Similar to an automated backups, user initiated backups are also

235
00:15:30,492 --> 00:15:33,474
server level snapshots of the underlying storage blocks.

236
00:15:33,602 --> 00:15:36,978
However, unlike the automated backups, the user initiated

237
00:15:36,994 --> 00:15:40,438
backups are not automatically deleted by Amazon RDS,

238
00:15:40,614 --> 00:15:44,170
even when you delete your entire RDS SQL instance.

239
00:15:44,910 --> 00:15:49,638
Although all associated automated backups are deleted, any user initiated backups

240
00:15:49,814 --> 00:15:53,598
remain available until you explicitly delete them. This is

241
00:15:53,604 --> 00:15:57,262
especially useful if you have compliance requirements that

242
00:15:57,316 --> 00:16:00,878
mandate retention of backups for longer than 35 days.

243
00:16:01,044 --> 00:16:04,686
You could create an automated job that takes user initiated

244
00:16:04,718 --> 00:16:08,094
backups on a regular schedule and deletes expired

245
00:16:08,142 --> 00:16:11,794
backups after a given time, for example, ten years or 15 years or

246
00:16:11,832 --> 00:16:15,506
more. So RDS for SQL Server also automatically

247
00:16:15,538 --> 00:16:19,480
stakes and maintains the transaction lock backups every few minutes.

248
00:16:20,650 --> 00:16:24,546
So what that does, that basically enables you to restore an Amazon RDS

249
00:16:24,578 --> 00:16:28,262
instance to point in time example, you could

250
00:16:28,316 --> 00:16:32,426
use Amazon RDS console to restore a SQL server instance to

251
00:16:32,448 --> 00:16:35,782
a specific time into a new instance.

252
00:16:35,926 --> 00:16:38,630
In this case, RDS spins up a new SQL server instance,

253
00:16:38,710 --> 00:16:42,506
restores last backup from these specified time, and then replays the

254
00:16:42,528 --> 00:16:46,046
transition logs up to a specified point in time. And the end

255
00:16:46,068 --> 00:16:49,402
result is you have an MSSQL server instance with all the databases

256
00:16:49,466 --> 00:16:53,362
restored to specified time. Now, RDS also supports the

257
00:16:53,416 --> 00:16:56,770
native backups for an individual databases.

258
00:16:57,670 --> 00:17:00,894
It allows you to create or restore a full backup,

259
00:17:01,022 --> 00:17:04,398
and these backup files are stored

260
00:17:04,414 --> 00:17:08,362
in an s three bucket. The backup can also be a multifile,

261
00:17:08,446 --> 00:17:12,294
which is especially useful for very large databases since the maximum single object size

262
00:17:12,332 --> 00:17:15,606
in S three is five gig. So when you're backing up

263
00:17:15,628 --> 00:17:20,238
or restoring various large database, the multifile backups

264
00:17:20,274 --> 00:17:23,866
might be the only possible solution. These full backups can be

265
00:17:23,888 --> 00:17:27,318
used to restore SQL server databases on Amazon RDS instance,

266
00:17:27,494 --> 00:17:31,486
or move the databases across RDS instance, or migrate the database off or from

267
00:17:31,588 --> 00:17:33,710
onto onpremises instances.

268
00:17:36,130 --> 00:17:39,886
So that's RDS. Now let's talk about SQL Server on EC two.

269
00:17:40,068 --> 00:17:43,466
On SQL Server on EC two, you are responsible to handle

270
00:17:43,578 --> 00:17:47,346
some of the backup maintenance capabilities that comes as turnkey solution in

271
00:17:47,368 --> 00:17:51,166
RDS. What we looked at however, in AWS, there are still plenty

272
00:17:51,198 --> 00:17:54,020
of options and services enabling you to do that.

273
00:17:54,630 --> 00:17:58,530
Several backups do translate to EBS volume

274
00:17:58,610 --> 00:18:02,214
snapshots, which can be created by invoking single API or through

275
00:18:02,252 --> 00:18:05,602
AWS console. The EBS

276
00:18:05,666 --> 00:18:08,986
snapshots are incremental, meaning only changes since

277
00:18:09,008 --> 00:18:12,358
the last snapshots are captured for subsequent snapshots.

278
00:18:12,454 --> 00:18:16,570
Therefore saving on storage costs and reducing time it takes to snapshot.

279
00:18:18,830 --> 00:18:22,474
EV snapshot are also a point in time, which means Esnapshot

280
00:18:22,522 --> 00:18:26,014
capture all the blocks of associated EBS volumes as

281
00:18:26,052 --> 00:18:29,326
at the exact time when the snapshot was triggered. When you

282
00:18:29,348 --> 00:18:33,214
restore EBS volume from a snapshot, it becomes immediately available for

283
00:18:33,252 --> 00:18:36,994
application to access it. So in this case, it means

284
00:18:37,032 --> 00:18:40,306
you can immediately bring SQL server online after restoring one

285
00:18:40,328 --> 00:18:43,262
or more of its underlying EBbS volumes from a snapshot.

286
00:18:43,406 --> 00:18:46,980
So by default, the restore volumes these underlying blocks from S three

287
00:18:48,070 --> 00:18:51,478
at the first time when the application tries to read the data, read them.

288
00:18:51,564 --> 00:18:54,834
So this means there can be a lag in performance,

289
00:18:54,882 --> 00:18:58,054
while after an EB's volume is restored from

290
00:18:58,092 --> 00:19:01,446
a snapshot, the volume eventually catches up with these nominal

291
00:19:01,478 --> 00:19:04,714
performance. However, you could avoid that

292
00:19:04,752 --> 00:19:07,946
lag by using fast restore snapshot. This feature enables you to get

293
00:19:07,968 --> 00:19:10,650
full performance immediately after restoring volume.

294
00:19:14,190 --> 00:19:17,466
You could also create an AWS level SQL server backups.

295
00:19:17,498 --> 00:19:20,346
It's much more similar to how you do currently on premises.

296
00:19:20,458 --> 00:19:23,738
You could have in AWS you have highly durable and highly

297
00:19:23,754 --> 00:19:27,410
scalable and cost object store. So that is s three

298
00:19:27,480 --> 00:19:30,834
to store the backup files. And these s three gives you high durability and high

299
00:19:30,872 --> 00:19:34,530
availability. And using different storage tiers in s three you can also

300
00:19:34,600 --> 00:19:36,550
cost optimize your backup solution.

301
00:19:38,490 --> 00:19:42,210
You could also use AWS backup to automate server level backups

302
00:19:42,370 --> 00:19:45,666
for SQL server instances. Now AWS backup manages

303
00:19:45,698 --> 00:19:49,542
CBS volume snapshots at regular intervals and you specify

304
00:19:49,606 --> 00:19:53,082
for that you specify. So for example,

305
00:19:53,136 --> 00:19:56,762
you have a consistent tag. So what you need to have

306
00:19:56,896 --> 00:20:00,086
for AWS backups is the consistent tagging

307
00:20:00,118 --> 00:20:03,374
policy across your SQL server instances. Now AWS backups is

308
00:20:03,412 --> 00:20:07,098
simple and easy to use. However, to achieve this consistency for SQL

309
00:20:07,114 --> 00:20:10,446
Server DB level within volume snapshot, the best practice is to

310
00:20:10,468 --> 00:20:13,410
use to use the VSS enabled snapshot.

311
00:20:20,870 --> 00:20:22,690
Now let's talk about the VSS,

312
00:20:23,590 --> 00:20:26,600
the Windows volume Shadow copy service.

313
00:20:27,130 --> 00:20:30,886
It's a solution that orchestrates the os and application access to

314
00:20:30,908 --> 00:20:34,546
underlying I O now enabling crash consistent

315
00:20:34,578 --> 00:20:38,242
snapshot of underlying storage without any application downtime.

316
00:20:38,386 --> 00:20:41,782
SQL Server is VSS aware. Therefore you can use VSS

317
00:20:41,846 --> 00:20:46,054
agent to snapshot the SQL server instances. This is made much easier

318
00:20:46,102 --> 00:20:48,778
for you to run SQL Server on Amazon EC two.

319
00:20:48,944 --> 00:20:52,358
You can use AWS system manager to run a command not only to

320
00:20:52,384 --> 00:20:55,806
install the VSS agent on your SQL server instance, but also to

321
00:20:55,828 --> 00:20:59,614
invoke the entire workflow of flushing the os and

322
00:20:59,652 --> 00:21:03,786
application buffer to the disk. Pausing the I O operation and taking a pointer snapshot

323
00:21:03,818 --> 00:21:07,666
of an EBS volume, then resuming the I O. And all of this what

324
00:21:07,688 --> 00:21:11,106
I just described could be achieved in a matter of

325
00:21:11,128 --> 00:21:14,914
less than 10 seconds and using a single API command through AWS system

326
00:21:14,952 --> 00:21:18,638
manager. Now this run command document creates a snapshot

327
00:21:18,654 --> 00:21:22,214
of all the EBS volumes attached to the target instance. You also have

328
00:21:22,252 --> 00:21:25,458
these option to exclude the root volume as most often the user

329
00:21:25,474 --> 00:21:29,334
database files are stored on the other volumes in case you stripe the EBS

330
00:21:29,382 --> 00:21:32,634
volume across multiple volumes to create a single

331
00:21:32,672 --> 00:21:37,014
file system for SQL Server files. EBS also support crash

332
00:21:37,062 --> 00:21:40,650
consistent multi volume snapshot using a single API command.

333
00:21:42,610 --> 00:21:46,366
So one of the boldest characteristics of the cloud is to

334
00:21:46,548 --> 00:21:49,950
either these large and sometimes

335
00:21:50,020 --> 00:21:53,454
rapidly growing environment at scale. If you have

336
00:21:53,492 --> 00:21:57,246
one or two SQL server instances, you could easily log into each instance,

337
00:21:57,358 --> 00:22:00,674
schedule a backup job via SQL agent,

338
00:22:00,792 --> 00:22:04,094
and somehow manage to transfer the backup files to s three bucket

339
00:22:04,142 --> 00:22:06,818
when they should be where they should be restored and retained.

340
00:22:06,914 --> 00:22:10,962
However, if you have tens and hundreds of even more instances,

341
00:22:11,106 --> 00:22:14,470
scheduling the job on each single instance can alone be

342
00:22:14,540 --> 00:22:18,006
quite onerous. Fortunately though, AWS gives you a

343
00:22:18,028 --> 00:22:21,526
way to efficiently do such tasks at any scale.

344
00:22:21,638 --> 00:22:24,954
So you can use AWS system manager state manager to

345
00:22:24,992 --> 00:22:28,054
schedule a regular backups and also have a backup files

346
00:22:28,102 --> 00:22:31,962
transferred to a target s three bucket. So state manager associations

347
00:22:32,106 --> 00:22:35,866
can target individual instances or all instances

348
00:22:35,898 --> 00:22:39,626
that have a common tag applied to them. For example, you can use hundreds

349
00:22:39,658 --> 00:22:43,466
of UC two instances to have key called SQL Server

350
00:22:43,498 --> 00:22:47,438
backup or message SQL backup and have value of automated

351
00:22:47,534 --> 00:22:50,766
applied to them. Now then using system manager

352
00:22:50,798 --> 00:22:54,194
state manager, you can target all of those instances at once. Combining that

353
00:22:54,232 --> 00:22:57,746
with the system manager maintenance window enables you to ensure the

354
00:22:57,768 --> 00:23:00,998
backup job doesn't disrupt normal business operations and at

355
00:23:01,004 --> 00:23:04,662
the same time, system manager also knows the rate control policies. For example,

356
00:23:04,716 --> 00:23:08,006
you can indicate only few instances should be backed up at one time,

357
00:23:08,108 --> 00:23:11,914
therefore avoiding all devices being impacted by backup jobs at the same

358
00:23:11,952 --> 00:23:15,514
time. Now the system manager can

359
00:23:15,552 --> 00:23:19,158
handle hybrid environment. You can use these same solution to manage your SQL

360
00:23:19,174 --> 00:23:22,818
server instances running on premises or any other cloud steel

361
00:23:22,934 --> 00:23:26,458
that's these video system manager. Now that's

362
00:23:26,474 --> 00:23:30,234
all good about backups. How about restore? So backup

363
00:23:30,282 --> 00:23:33,822
is half story, the other half is the capability to restore these backups.

364
00:23:33,886 --> 00:23:37,694
Every business needs well defined, well rehearsed processes

365
00:23:37,742 --> 00:23:41,810
for taking backups as well as restoring them. So restoration

366
00:23:42,230 --> 00:23:47,746
procedures can also depend on customers

367
00:23:47,848 --> 00:23:51,026
requirements. Basically whether the backup files have to be

368
00:23:51,048 --> 00:23:54,466
restored on an existing instance, whether the backup has wherever the backup

369
00:23:54,498 --> 00:23:58,166
was originally taken, or on a different instance altogether, or entirely

370
00:23:58,198 --> 00:24:01,594
new instance should be created for the purpose of

371
00:24:01,632 --> 00:24:04,714
restoring this backup. All of these can be defined and

372
00:24:04,752 --> 00:24:08,006
automated using AWS system manager automation document.

373
00:24:08,198 --> 00:24:12,222
System manager automation can create new

374
00:24:12,276 --> 00:24:16,414
EC two instance or discover identify an instance on

375
00:24:16,452 --> 00:24:20,666
which the backup should be restored. Then it can invoke the SSM run command

376
00:24:20,778 --> 00:24:24,142
which instructs the target instance to fetch the backup file from S three

377
00:24:24,196 --> 00:24:28,718
and restore on the SQL server. Using a proven and tested automation workflow

378
00:24:28,894 --> 00:24:32,702
is basically eliminating those human errors during an actual time of disaster,

379
00:24:32,766 --> 00:24:36,578
which also reduces the meantime to action and resolution of incidents

380
00:24:36,674 --> 00:24:38,550
or change requests.

381
00:24:41,690 --> 00:24:44,518
Now that was simple Hadr folks so far.

382
00:24:44,684 --> 00:24:48,246
How about standard? Now let's just take it to the next level where we

383
00:24:48,268 --> 00:24:52,310
have covered ourselves from guest level failures or

384
00:24:52,380 --> 00:24:56,582
we doing the traditional backup and restore well tested approach.

385
00:24:56,726 --> 00:25:00,038
Now I want to take you to the next level where I want to talk

386
00:25:00,064 --> 00:25:04,874
about I want to cover myself from the hardware

387
00:25:04,922 --> 00:25:08,622
failures plus the VM guest table failures, plus the

388
00:25:08,676 --> 00:25:12,046
SQL server instances. That's when FCI comes

389
00:25:12,068 --> 00:25:15,458
into play. This is something that Microsoft introduced since SQL 2008.

390
00:25:15,544 --> 00:25:18,610
That's when they came out with failover cluster instances.

391
00:25:19,030 --> 00:25:22,706
So let's look at the typical on premises implementation of

392
00:25:22,728 --> 00:25:26,470
always on failover cluster instances. So typically

393
00:25:27,130 --> 00:25:30,840
you have two nodes. One is online, the other one is

394
00:25:31,210 --> 00:25:35,080
in a hibernate mode or on a standby which is

395
00:25:35,450 --> 00:25:37,430
sharing the same storage,

396
00:25:38,810 --> 00:25:41,394
either that's on a CSV, SMB or NFS.

397
00:25:41,522 --> 00:25:45,660
So it provides you the high vibration of the instance level.

398
00:25:46,110 --> 00:25:49,686
Typically you deploy in a single DC and resilience

399
00:25:49,798 --> 00:25:52,814
against gives you against SQL server instance failures or

400
00:25:52,852 --> 00:25:56,554
the os level failures. Now standard edition

401
00:25:56,602 --> 00:26:00,266
only supports two instances, whereas you can go up to 50 instances

402
00:26:00,298 --> 00:26:04,386
on enterprise. If I

403
00:26:04,408 --> 00:26:07,300
were to do that same thing in AWS cloud,

404
00:26:07,670 --> 00:26:12,142
how would I do that? Now you have the AEBs

405
00:26:12,206 --> 00:26:15,934
volume that can be multi attached to the different instances

406
00:26:15,982 --> 00:26:19,334
at the same time, and you can have the Windows HadR cluster built on top

407
00:26:19,372 --> 00:26:23,590
of those two EC two instances, single AZ usually

408
00:26:23,660 --> 00:26:27,286
sitting in the same subnet. That gives you resilience against

409
00:26:27,308 --> 00:26:31,146
these OS and SQL server instance level failures. And now you can

410
00:26:31,168 --> 00:26:35,062
use a typically network balancer virtual IP for WSC

411
00:26:35,206 --> 00:26:37,210
static IP in the same subnet.

412
00:26:41,310 --> 00:26:44,878
Now let's just take it to the next level, right? I want to

413
00:26:44,884 --> 00:26:48,190
go multi AZ. This is where I'm going to realize more

414
00:26:48,260 --> 00:26:51,758
value because I'm still running into the single point of failures. Like, and if you

415
00:26:51,764 --> 00:26:56,210
look at the single DC deployment, if the entire DC goes down on premises,

416
00:26:56,710 --> 00:26:59,090
I don't have a single point of failure.

417
00:27:00,070 --> 00:27:04,174
Similar sort of thing. If I go to the single AZ deployments into EC

418
00:27:04,222 --> 00:27:07,686
two, I've got a single point of failure. If the AZ goes down,

419
00:27:07,868 --> 00:27:11,590
can't do anything. So hence the reason we normally

420
00:27:12,170 --> 00:27:15,586
recommend customers to think about multi

421
00:27:15,618 --> 00:27:18,806
AZ deployment for mission critical databases where you have lower RT

422
00:27:18,838 --> 00:27:22,538
and RPO and you can't afford a downtime, these databases should be

423
00:27:22,544 --> 00:27:26,646
deployed in a multi AZ deployment. So FCI

424
00:27:26,758 --> 00:27:31,546
or multi AZ again you have the storage

425
00:27:31,658 --> 00:27:36,270
comes out of the box like SMB, these .0 sTd Iscazi

426
00:27:37,010 --> 00:27:41,114
basically what you do is create the multi AZ on a multi subnet.

427
00:27:41,162 --> 00:27:44,714
Resilience gives you the os

428
00:27:44,762 --> 00:27:48,034
level 60 failures or the AZ failures because

429
00:27:48,072 --> 00:27:52,030
of the low latency network. Within the multi AZ architecture,

430
00:27:52,110 --> 00:27:55,822
the stretch cluster is a practical option, provides higher resilience

431
00:27:55,886 --> 00:27:59,406
as compared to on premises. If you're looking at the stretch cluster,

432
00:27:59,438 --> 00:28:03,400
there is a lot of network intricacies that needs to be handled and looked at

433
00:28:03,930 --> 00:28:07,026
before you decide to do a stretch cluster.

434
00:28:07,058 --> 00:28:10,306
I mean I've been bitten myself in the past when I did decide

435
00:28:10,338 --> 00:28:13,434
to do these stretch cluster and then there could be a lot of network level

436
00:28:13,552 --> 00:28:17,078
issues and blips that could cause a false alarm on a SQL

437
00:28:17,094 --> 00:28:20,326
server and SQL server to failure. So hence

438
00:28:20,358 --> 00:28:24,714
the reason most of the time onpremises stretch clusters are

439
00:28:24,832 --> 00:28:28,126
kind of no no practice. But because we

440
00:28:28,148 --> 00:28:31,662
have the low latency multi AZ architecture, implementing on

441
00:28:31,716 --> 00:28:35,006
Multi AZ SQL Server FCI

442
00:28:35,118 --> 00:28:37,490
as a stretch cluster is a possibility.

443
00:28:38,870 --> 00:28:42,610
Now let's take it to the next level. We have something called

444
00:28:42,680 --> 00:28:46,382
a service called FSX for Windows.

445
00:28:46,526 --> 00:28:50,198
This is a file share service that is built and optimized for

446
00:28:50,204 --> 00:28:53,766
the Windows workloads. So you can, rather than having have

447
00:28:53,788 --> 00:28:57,078
a multi attached EBS volume, you can say I'm going to create a

448
00:28:57,244 --> 00:29:00,614
file system which is where I'm going to store all of my data files and

449
00:29:00,652 --> 00:29:04,230
it just becomes an SMB share file share that is attached to a SQL

450
00:29:04,390 --> 00:29:08,246
cluster, the Windows cluster. So you're still going to have the Multi AZ architecture

451
00:29:08,278 --> 00:29:11,958
here where your primary instance is sitting in AZ one, your secondary instance is sitting

452
00:29:11,974 --> 00:29:15,166
in AZ two, and you create the FSX file share and

453
00:29:15,188 --> 00:29:19,354
then provision it. Now the good thing about these file share is you can provision

454
00:29:19,482 --> 00:29:23,010
the throughput AWS compared to what you had in the

455
00:29:23,080 --> 00:29:26,990
EBS volume where you have to configure individual EBS volumes

456
00:29:27,150 --> 00:29:31,022
to configure throughput, whereas here you get collectively

457
00:29:31,086 --> 00:29:34,580
throughput what I need to achieve AWS my entire file store.

458
00:29:35,110 --> 00:29:38,158
That's a good thing about this. And then you can have a witness file share

459
00:29:38,184 --> 00:29:41,846
in AZ three that can keep an eye on the cluster itself to

460
00:29:41,868 --> 00:29:45,490
make sure the cluster fails over and the quorum is protected

461
00:29:45,570 --> 00:29:49,350
for any failures rather than having AZ one taking care of.

462
00:29:49,500 --> 00:29:53,254
So if you have a corum sitting on node

463
00:29:53,302 --> 00:29:56,454
one, then you kind of end up in a split bin scenario,

464
00:29:56,502 --> 00:29:59,658
possibly. So to avoid that you can go into AZ three. That's where the

465
00:29:59,664 --> 00:30:02,974
Windows file share system is. Witness file share is that

466
00:30:03,012 --> 00:30:06,526
could keep an eye on the Cluster gorum and decide to

467
00:30:06,548 --> 00:30:10,686
failure nodes from the primary to secondary in

468
00:30:10,708 --> 00:30:15,198
a timely manner. So folks, that was the FCIs

469
00:30:15,294 --> 00:30:19,454
and the FCI options we have on the SQL server

470
00:30:19,502 --> 00:30:23,042
on AWS. So there's another

471
00:30:23,096 --> 00:30:26,502
way we can achieve the SQL server high availability using

472
00:30:26,556 --> 00:30:30,946
the storage develop options. So storage

473
00:30:30,978 --> 00:30:34,566
Space Direct STD is another Windows technology that allows you to

474
00:30:34,588 --> 00:30:38,114
build and deploy software defined NAS across multiple

475
00:30:38,162 --> 00:30:41,958
instances as a converged or hyper converged model. You can have the SQL

476
00:30:41,974 --> 00:30:45,174
server instance and SDD together, or you have SDD

477
00:30:45,222 --> 00:30:48,966
and a SQL server on different instances. Now it supports these ntfs

478
00:30:48,998 --> 00:30:53,098
and refs and supports up to 16 servers or 400 drives

479
00:30:53,194 --> 00:30:56,830
would scale up to six petabyte. And this is on ABS volumes.

480
00:30:57,570 --> 00:31:01,758
You can do SD on the instance storage as well using

481
00:31:01,844 --> 00:31:04,858
the I three, the D two instances. It's a simple setup,

482
00:31:04,954 --> 00:31:08,894
high performance, up to 200 kiosks because of the underlying nvmes

483
00:31:08,942 --> 00:31:12,366
you're using the instance local store built in resistance for against these disk or server

484
00:31:12,398 --> 00:31:16,230
failures. Now these are ethermal.

485
00:31:19,210 --> 00:31:23,190
So far we covered about high vability. How about my disaster recovery?

486
00:31:24,730 --> 00:31:27,954
High vability will give me the protection around the hardware failures.

487
00:31:28,002 --> 00:31:31,514
What if my entire region goes out? Or what if my entire DC goes

488
00:31:31,552 --> 00:31:35,782
out? What are my disaster recurruption? Backup restore is an option, but backup restore

489
00:31:35,926 --> 00:31:38,410
has got higher rtos and rpos.

490
00:31:39,550 --> 00:31:42,846
What are my options for lower rtos and rpos? So one

491
00:31:42,868 --> 00:31:46,606
of the options traditionally is the lock shipping. So this is

492
00:31:46,628 --> 00:31:49,274
a typical implementation of lock shipping onpremises.

493
00:31:49,402 --> 00:31:53,006
So typically our option for SQL server since back in the days of

494
00:31:53,028 --> 00:31:56,194
SQL 2000, those who are old enough to have worked on it, I'm being

495
00:31:56,232 --> 00:31:59,330
one of them. So with log shipping, it doesn't matter whether

496
00:31:59,400 --> 00:32:02,302
your secondary instance is in the cloud or onpremises.

497
00:32:02,446 --> 00:32:05,618
The secondary database is offline. Restoring the logs received from the

498
00:32:05,624 --> 00:32:09,378
primary. So log shipping has four steps. First, you're backing

499
00:32:09,394 --> 00:32:13,138
up the data on your primary instance. That is basically your transaction

500
00:32:13,154 --> 00:32:16,866
log backups. Secondly, you're shipping or copying that transaction

501
00:32:16,898 --> 00:32:20,154
log backups from the local server or the primary server into

502
00:32:20,192 --> 00:32:24,282
a central file server location. And then basically the

503
00:32:24,416 --> 00:32:27,798
step three is to download that backup file

504
00:32:27,894 --> 00:32:31,174
from the central shared location or file share into the secondary server.

505
00:32:31,222 --> 00:32:34,574
And step four is to apply those transactions or

506
00:32:34,612 --> 00:32:37,550
replay those transaction logs onto the secondary server.

507
00:32:38,290 --> 00:32:42,106
Now you have full control over these jobs. So you can delay

508
00:32:42,138 --> 00:32:45,822
the log copy or log apply to secondary. If you have detected some problem

509
00:32:45,876 --> 00:32:48,702
in the primary and you don't want to apply those logs to a secondary,

510
00:32:48,766 --> 00:32:52,274
you can do so. So you can choose the job schedule as

511
00:32:52,312 --> 00:32:55,746
low as five minutes when the jobs are the

512
00:32:55,768 --> 00:32:59,078
frequency of backups on the primary copy and

513
00:32:59,164 --> 00:33:02,902
copy to secondary and restore. Or you can go AWS has

514
00:33:02,956 --> 00:33:06,390
60 minutes for example in terms of log backup and copy and restore.

515
00:33:07,390 --> 00:33:10,730
It has a direct impact on your RT and RPA.

516
00:33:11,230 --> 00:33:15,194
So be mindful of picking up the schedule. So these best

517
00:33:15,232 --> 00:33:19,466
thing is to when

518
00:33:19,488 --> 00:33:22,714
it cons to copying and applying the secondary,

519
00:33:22,842 --> 00:33:26,654
the logs on the secondary, it gives you that option of mitigating if

520
00:33:26,692 --> 00:33:29,994
there is a corruption or any logical

521
00:33:30,042 --> 00:33:34,046
data that has been deleted, then you can pause it. And then the

522
00:33:34,068 --> 00:33:37,780
only thing that you need to reestablish it, the lock shipping, if you pause it,

523
00:33:41,750 --> 00:33:45,346
cool. So coming into AWS, if you were to do this

524
00:33:45,368 --> 00:33:50,054
setup in AWS, so you have the primarily sitting on

525
00:33:50,092 --> 00:33:52,966
premises and you want to do a lights on. Dr. Then you have a lot

526
00:33:52,988 --> 00:33:56,614
of shipping. So you can use similar sort of thing where

527
00:33:56,652 --> 00:33:59,880
you have the on premises model,

528
00:34:00,250 --> 00:34:03,894
where on premises you're backing up the data pushing

529
00:34:03,942 --> 00:34:07,066
across into an s three bucket. And then we are scoping from the s three

530
00:34:07,088 --> 00:34:10,742
bucket and storing into applying it to an EC two instance.

531
00:34:10,886 --> 00:34:14,506
SQL server running on an EC two. This compute can be very minimal

532
00:34:14,538 --> 00:34:18,494
because all you're doing is restoring the data so it doesn't demand the same

533
00:34:18,612 --> 00:34:21,886
amount of compute as primary. Or you can have

534
00:34:21,908 --> 00:34:25,834
the AWS instance sitting in primary into AWS EC two instance.

535
00:34:25,882 --> 00:34:30,130
Or you can copy the data back into onpremises if you like.

536
00:34:30,280 --> 00:34:33,954
Or you can have a multidr multiregion Dr. Deployment strategy using

537
00:34:33,992 --> 00:34:37,250
lock shipping as well. But if you're in the same region, I would rather

538
00:34:37,320 --> 00:34:40,754
suggest you to do the EBS snapshot, the VSS and EBS

539
00:34:40,802 --> 00:34:44,086
snapshot that is much more quicker and efficient in the

540
00:34:44,108 --> 00:34:47,110
same region to be able to do the disaster recovery.

541
00:34:48,570 --> 00:34:51,830
Now we have another option is cloud NDO. Cloud NDO for

542
00:34:51,900 --> 00:34:55,674
Azadir. Now what

543
00:34:55,712 --> 00:34:59,420
that is basically it's a service. It operates at the block level

544
00:35:00,270 --> 00:35:03,510
as well. AWS, the VM level, it replicates all the blocks in the

545
00:35:03,520 --> 00:35:06,926
VM, including app data files at a block level and it keeps a track of

546
00:35:06,948 --> 00:35:10,494
the block changes into the staging environment. These are

547
00:35:10,612 --> 00:35:14,634
maintained in the EBS volume at the time of Dr. Cloud endure enables

548
00:35:14,682 --> 00:35:18,494
you quickly spin up the instance with all the apps configured

549
00:35:18,542 --> 00:35:21,810
along with its data in your desired region. For example,

550
00:35:21,880 --> 00:35:25,106
SQL Server instance will be up and running along with the data, ready to

551
00:35:25,128 --> 00:35:29,094
accept the connections. And cloud endure for DR is

552
00:35:29,132 --> 00:35:32,530
a paid service for Dr. But when it comes to migration,

553
00:35:32,610 --> 00:35:36,200
it is for free. That's something you need to keep in your mind.

554
00:35:37,690 --> 00:35:41,290
Now let's look at the basic availability groups, right, the AWS,

555
00:35:42,270 --> 00:35:45,482
we looked at the HA in terms of

556
00:35:45,536 --> 00:35:49,750
and the disaster recovery in terms of what SQL Server all the underlying

557
00:35:49,910 --> 00:35:53,690
storage level has to offer. Now there is something called ability groups

558
00:35:53,770 --> 00:35:57,854
which Max have introduced in SQL Server 2012 to

559
00:35:57,892 --> 00:36:01,326
take over the mirroring as mirroring is, as we all

560
00:36:01,348 --> 00:36:04,050
know is deprecated from 2014 onwards.

561
00:36:05,430 --> 00:36:08,706
So what is basic availability groups is basically similar sort

562
00:36:08,728 --> 00:36:11,858
of thing. What you have multi AZ fcis for example,

563
00:36:11,944 --> 00:36:15,618
but it's not really an FCI. The obligatory group runs on

564
00:36:15,624 --> 00:36:19,078
top of these windows failure clustering technology. But in FCI you

565
00:36:19,084 --> 00:36:22,790
have the shared storage with availability groups. You have independent storage

566
00:36:23,370 --> 00:36:27,858
with the basic availability groups that is available in the standard edition.

567
00:36:28,034 --> 00:36:31,398
The only limit is two replicas, primary and secondary.

568
00:36:31,494 --> 00:36:35,446
You can't access your secondary replica, you cannot do a backup on the second replica.

569
00:36:35,478 --> 00:36:37,820
You cannot run any integrity checks or anything.

570
00:36:38,670 --> 00:36:43,120
You cannot upgrade your basic ability groups from say

571
00:36:43,570 --> 00:36:45,630
to an advanced availability groups.

572
00:36:47,330 --> 00:36:49,520
You basically have to drop and re add.

573
00:36:52,530 --> 00:36:55,674
And basic ability groups cannot be part of the distributed ability

574
00:36:55,722 --> 00:36:58,814
groups which we'll cover in the slider two so basic average

575
00:36:58,862 --> 00:37:02,706
group, just think as one database. So in

576
00:37:02,728 --> 00:37:06,082
the availability groups it's just another mirroring setup,

577
00:37:06,146 --> 00:37:10,034
but it's just underlying. We are using the independent storage

578
00:37:10,082 --> 00:37:13,654
copies and a failover clustering technology to be able

579
00:37:13,692 --> 00:37:17,414
to facilitate the failovers from one server to the other

580
00:37:17,452 --> 00:37:20,714
server. And with the basic ability groups you can only have one

581
00:37:20,752 --> 00:37:24,294
database in that availability groups. But whereas

582
00:37:24,422 --> 00:37:28,086
compared to these advanced availability groups,

583
00:37:28,118 --> 00:37:31,338
you have the multiple databases that can be

584
00:37:31,344 --> 00:37:34,622
added in the single ability groups. That's the key difference here

585
00:37:34,676 --> 00:37:38,474
folks. So with that we'll dive into the mission critical HaDR

586
00:37:38,522 --> 00:37:42,926
options. What do I have in terms of if

587
00:37:42,948 --> 00:37:46,418
I want to achieve low RT and RPO? And I want

588
00:37:46,424 --> 00:37:49,746
to cover almost all possible scenarios when it

589
00:37:49,768 --> 00:37:53,010
comes to protecting my SQL server workloads.

590
00:37:53,350 --> 00:37:57,140
So that's when the availability groups comes into play. These are,

591
00:37:57,590 --> 00:38:01,526
like I said, it's introduced in SQL Server 2012 onwards, it has taken over

592
00:38:01,548 --> 00:38:05,346
these mirroring and taken to these next level and combining with the Windows failover

593
00:38:05,458 --> 00:38:09,206
cluster technologies. So let's talk about a pattern of

594
00:38:09,228 --> 00:38:13,382
deployment. So we have what we looked at in the previous slides

595
00:38:13,526 --> 00:38:16,854
with an FCI where we have multi AZ deployment

596
00:38:16,982 --> 00:38:20,658
with the failure cluster instance which was sharing the same storage and the storage

597
00:38:20,694 --> 00:38:24,094
was moving between the AZ. Now with the availability groups you can have

598
00:38:24,132 --> 00:38:28,218
independent storage per AC and SQL

599
00:38:28,234 --> 00:38:31,440
Server is replicating the data at the instance level.

600
00:38:31,810 --> 00:38:35,410
That's basically a synchronous replication with automatic failover

601
00:38:37,270 --> 00:38:40,446
using the same Windows technologies, Windows failover Cluster

602
00:38:40,558 --> 00:38:43,794
and then you get an endpoint available for you to application to connect

603
00:38:43,832 --> 00:38:47,438
it. So when there is a problem on AZ one, you can simply fail over

604
00:38:47,464 --> 00:38:51,446
to AZ two. But the application doesn't notice anything because it's connecting a

605
00:38:51,468 --> 00:38:54,646
listener or a whip. So it's seamless to

606
00:38:54,668 --> 00:38:57,080
just say hey, I was talking to AZ one,

607
00:38:57,530 --> 00:39:01,142
database one. Now instance one, I'm going to AZ

608
00:39:01,206 --> 00:39:04,554
two, instance two, but for the application it still

609
00:39:04,672 --> 00:39:08,620
continue to talk to the database. That's the difference here.

610
00:39:09,310 --> 00:39:12,826
So that's one pattern here. So if you look at this is

611
00:39:12,848 --> 00:39:16,078
a multi AZ within the same region. Let's take it

612
00:39:16,084 --> 00:39:19,454
to next level. I want to go multiregion, how about that?

613
00:39:19,572 --> 00:39:23,434
You can still do that. So you can have your synchronous replication

614
00:39:23,482 --> 00:39:27,250
within the region with the automatic failover between AZ two and AZ three.

615
00:39:27,400 --> 00:39:31,038
But you can add another region and you can create a stretch cluster,

616
00:39:31,134 --> 00:39:35,198
goes across the region and have the transit gate to enable

617
00:39:35,294 --> 00:39:38,294
both accounts within the regions to talk to each other,

618
00:39:38,412 --> 00:39:41,974
get the vpcs communicating to each other. And that

619
00:39:42,012 --> 00:39:45,554
way you can start replicating the data into a secondary

620
00:39:45,602 --> 00:39:49,858
region in Aziban. But this will be asynchronous replication

621
00:39:50,034 --> 00:39:53,010
because you can have only one copy, asynchronous,

622
00:39:53,090 --> 00:39:56,394
asynchronous replica. If you're going

623
00:39:56,432 --> 00:40:00,910
across the region it will be asynchronous and it will be a manual failover.

624
00:40:03,810 --> 00:40:07,006
So that's one pattern. What we

625
00:40:07,028 --> 00:40:10,654
have another pattern, AWS, a distributed availability groups. So what you're going to have,

626
00:40:10,692 --> 00:40:13,950
you're going to have two separate windows failover clusters

627
00:40:14,110 --> 00:40:18,210
in region A and a region B. And between

628
00:40:18,280 --> 00:40:21,698
these nodes they will talk to each other on a

629
00:40:21,704 --> 00:40:25,326
synchronous replication. Now as we looked at in previous

630
00:40:25,358 --> 00:40:29,094
configuration that we have synchronous replication going from Az one to Az two

631
00:40:29,132 --> 00:40:32,438
in a region a. As soon as we introduce another region, it will be an

632
00:40:32,444 --> 00:40:35,654
asynchronous replication with manual failure but

633
00:40:35,692 --> 00:40:38,886
what if I have another cluster which

634
00:40:38,908 --> 00:40:42,434
is sitting in region B? Can I do that? Because in the

635
00:40:42,572 --> 00:40:46,234
previous example we had a one cluster going across the region. Now we are

636
00:40:46,272 --> 00:40:49,526
bringing in two different clusters, so we don't have to worry about stretching the cluster,

637
00:40:49,638 --> 00:40:53,706
stretching the ad objects and all of that. So we'll have two different independent

638
00:40:53,818 --> 00:40:57,680
clusters and these that way

639
00:40:58,050 --> 00:41:01,710
what you're doing here, you're going from primary replica in Aza

640
00:41:02,610 --> 00:41:06,546
in Region A into Region B, Az one as a

641
00:41:06,568 --> 00:41:09,406
forwarder. So that is asynchronously replicated.

642
00:41:09,518 --> 00:41:13,054
But the secondary replica in Region B in Az

643
00:41:13,102 --> 00:41:16,450
two, these synchronously replicate the data

644
00:41:16,520 --> 00:41:19,926
between Az one, region B to a z two

645
00:41:19,948 --> 00:41:24,006
in region B, rather than going all the way back to region A, Az one.

646
00:41:24,108 --> 00:41:28,358
So a replica in Az

647
00:41:28,454 --> 00:41:31,930
one in region B plays the role of forwarder.

648
00:41:32,910 --> 00:41:36,540
So you can fail over between two Az. And then because the

649
00:41:37,630 --> 00:41:41,660
requirements, you might have to run the workloads six months from

650
00:41:42,270 --> 00:41:45,706
Region A, you can run the workloads from region B. So when you fail

651
00:41:45,738 --> 00:41:49,690
over to Region B, you still have that same level of protection

652
00:41:49,850 --> 00:41:53,790
what you had in region A. In the previous example, you only

653
00:41:53,940 --> 00:41:57,154
had protection in region A, but the region B only had one

654
00:41:57,192 --> 00:42:00,930
instance. So that's how you can tackle another

655
00:42:01,000 --> 00:42:04,606
option available for you if you have the requirement to run the workloads

656
00:42:04,638 --> 00:42:07,250
from both regions six monthly.

657
00:42:09,030 --> 00:42:13,538
So let's just go dive into the comparison between AWS

658
00:42:13,554 --> 00:42:17,122
versus FCI. So FCI gives you instance level protection

659
00:42:17,266 --> 00:42:21,142
for H and Dr. Whereas Ag gives you devs level protection

660
00:42:21,206 --> 00:42:24,698
in terms of replication. It's fully automated because in a

661
00:42:24,704 --> 00:42:28,502
way you can have the hardware storage level replication

662
00:42:28,566 --> 00:42:32,814
playing in a play, or your

663
00:42:32,852 --> 00:42:35,550
FCI is basically saying the same storage,

664
00:42:36,050 --> 00:42:39,360
same master databases that can go in across to the other side,

665
00:42:39,810 --> 00:42:43,214
whereas oblivion groups, you'll have to manually replicate the instance level object

666
00:42:43,252 --> 00:42:45,890
like an example, logins and link servers and et cetera.

667
00:42:46,790 --> 00:42:50,530
Scale up and down in FCI is not supported. It's supported, I'm sorry,

668
00:42:50,600 --> 00:42:53,986
because you can add the extra nodes if

669
00:42:54,008 --> 00:42:57,826
you like. On AG, same thing. You can add extra nodes

670
00:42:57,858 --> 00:43:01,186
and extra copies. Apart from the basic

671
00:43:01,218 --> 00:43:04,690
availability groups read scale out FCI

672
00:43:04,770 --> 00:43:07,974
is not available because you can only have one primary and the rest are passive

673
00:43:08,022 --> 00:43:11,846
nodes, whereas the AGs, you have the read replicas

674
00:43:11,878 --> 00:43:16,406
available where you can add reader nodes onto

675
00:43:16,438 --> 00:43:19,974
the enterprises edition, non standard asynchronous

676
00:43:20,022 --> 00:43:23,686
replication. Again, you have the FCI, the block level storage, you can replicate the block

677
00:43:23,718 --> 00:43:27,006
level storage to the other node or other storage, and you can bring up

678
00:43:27,028 --> 00:43:30,480
the storage on the other side and off you go. Whereas on these Ag

679
00:43:30,850 --> 00:43:32,400
it's on the database level.

680
00:43:35,890 --> 00:43:39,618
So you can combine the FCI and Ag in a

681
00:43:39,624 --> 00:43:42,834
one cluster. So some of the things which you need to watch out for is

682
00:43:42,952 --> 00:43:46,210
always on FCI in a single AZ for Ha and Ag

683
00:43:46,280 --> 00:43:49,574
on a second AZ for Dr. You can use the FCI inside

684
00:43:49,612 --> 00:43:52,818
a cluster placement group and AG for a Dr. In a second AZ.

685
00:43:52,994 --> 00:43:56,866
You can use the FCI across multi AZ for HA and averted

686
00:43:56,898 --> 00:44:00,582
groups or ag to the second region for Dr. Or you can use FCI

687
00:44:00,646 --> 00:44:03,130
for HA and Ag for read replicas.

688
00:44:03,790 --> 00:44:08,714
So failover between FCI in an Ag is

689
00:44:08,752 --> 00:44:11,854
always manual in terms of when it comes to Dr. If you combine these

690
00:44:11,892 --> 00:44:15,034
two together, you will not be able to have an automatic failure if you combine

691
00:44:15,082 --> 00:44:16,480
FC and AG together.

692
00:44:18,530 --> 00:44:22,522
So that was all about hivability

693
00:44:22,666 --> 00:44:26,206
and a Dr. On AEC two. Now how about rds,

694
00:44:26,318 --> 00:44:30,046
how things work when it comes to HADR

695
00:44:30,078 --> 00:44:33,314
and RDS? So you

696
00:44:33,352 --> 00:44:37,006
have similar sort of sets up. You have a region and you have three AZ

697
00:44:37,118 --> 00:44:41,042
where app servers are running and you have RDS for SQL server running. In Aza,

698
00:44:41,106 --> 00:44:44,550
for example, all the apps are talking to the AZA.

699
00:44:45,210 --> 00:44:48,602
What if SQL server instance goes down? Now we

700
00:44:48,656 --> 00:44:52,438
have things like health monitor and self recovery

701
00:44:52,454 --> 00:44:56,422
capabilities in a single AZ deployment that will self heal the instance

702
00:44:56,486 --> 00:45:00,486
itself, it comes back on and it starts

703
00:45:00,518 --> 00:45:04,302
working. But what if your entire AZ goes

704
00:45:04,356 --> 00:45:07,486
down and this is where the problem is, you have a single point

705
00:45:07,508 --> 00:45:10,880
of failure. Your application sitting in AZb and a C

706
00:45:11,250 --> 00:45:14,822
can't work anymore because you lost these SQL server sitting in Aza,

707
00:45:14,906 --> 00:45:17,618
not the instance, the entire AZ has gone down.

708
00:45:17,784 --> 00:45:21,250
So you have a single point of failure there to address

709
00:45:21,320 --> 00:45:25,246
that. What we say customers to deploy the SQL server

710
00:45:25,358 --> 00:45:29,222
in multi AZ in RDS setup. So similar

711
00:45:29,276 --> 00:45:33,458
sort of thing. You have the app stalking from different AZ into Aza.

712
00:45:33,554 --> 00:45:37,430
These we create another instance in AZB and

713
00:45:37,500 --> 00:45:42,122
we start replicating the data. Mirroring or always on. Now mirroring is anything

714
00:45:42,176 --> 00:45:45,734
less than SQL Server 2016. Or if you are beyond

715
00:45:45,782 --> 00:45:49,094
so and turn 2017 then you will have the always on groups

716
00:45:49,142 --> 00:45:52,030
available, be it standard or be it enterprise.

717
00:45:55,570 --> 00:45:59,306
So what happens if your secondary fails?

718
00:45:59,498 --> 00:46:03,486
That's these instance level failure. That's fine. Your application is still continuing

719
00:46:03,518 --> 00:46:07,426
to talk to primary service which is sitting in Aza and

720
00:46:07,448 --> 00:46:11,298
it will continue to do so and application wouldn't notice anything. And once the

721
00:46:11,384 --> 00:46:14,730
secondary AZ instance recovers,

722
00:46:14,910 --> 00:46:18,534
it will still start receiving the data from the

723
00:46:18,572 --> 00:46:20,680
primary server as it had before.

724
00:46:23,690 --> 00:46:27,800
Now what happens if the primarily AZ goes down.

725
00:46:29,230 --> 00:46:32,794
That's interesting. Now what's going to happen? You're going to have the

726
00:46:32,832 --> 00:46:36,922
failover kick in. It will fail over from your

727
00:46:36,976 --> 00:46:41,082
primary role to a secondary instance which is sitting in AZP.

728
00:46:41,226 --> 00:46:45,118
Now that takes over AWS, a primary, and then all the application

729
00:46:45,204 --> 00:46:49,066
servers are started pointing to that new primary.

730
00:46:49,258 --> 00:46:52,474
Now here, because you're using the endpoint,

731
00:46:52,602 --> 00:46:56,794
you wouldn't necessarily, your application wouldn't notice anything that has underlying

732
00:46:56,922 --> 00:47:00,354
these episode host or instance have changed. It will just continue to work as

733
00:47:00,392 --> 00:47:03,746
it was working on the failover cluster instances, sorry, the always on

734
00:47:03,768 --> 00:47:07,266
availability pros on EC two or currently on premises with a listener. Similar sort of

735
00:47:07,288 --> 00:47:10,958
thing happens here. It will just simply seamlessly fail over

736
00:47:10,984 --> 00:47:14,262
the applications to these second instance and your application will continue to

737
00:47:14,316 --> 00:47:17,358
work without noticing that instance has been replaced underneath.

738
00:47:17,474 --> 00:47:21,014
And once your primary AZ comes back on or the instance

739
00:47:21,062 --> 00:47:25,366
comes back on, we will replicate the data from AZB

740
00:47:25,478 --> 00:47:28,826
into Aza. So this

741
00:47:28,848 --> 00:47:32,026
is all happen automatically. You don't have to set

742
00:47:32,048 --> 00:47:35,854
up anything with a single click, whereas the options, what we looked at so far

743
00:47:35,892 --> 00:47:38,942
on EC two, those are built and managed by you,

744
00:47:38,996 --> 00:47:42,654
whereas in RDs everything is out of the box. You just

745
00:47:42,692 --> 00:47:46,226
click one button under the hood, we will do all

746
00:47:46,248 --> 00:47:49,986
that automation of creating another instance, backing up

747
00:47:50,008 --> 00:47:53,474
your primary databases, replicating that to secondary instance and

748
00:47:53,512 --> 00:47:56,946
configuring that always on, mirroring on top of it, and these allowing you

749
00:47:56,968 --> 00:48:00,086
to say hey, your database is protected now in the multi AZ. So with

750
00:48:00,108 --> 00:48:04,034
a single click, let's look at the failure timeline.

751
00:48:04,082 --> 00:48:07,570
So when you look at the multi AZ failure timelines on a standard edition

752
00:48:07,650 --> 00:48:11,334
with the Davis mirroring, typically one to two minutes,

753
00:48:11,532 --> 00:48:15,078
and because it has genus propagation,

754
00:48:15,254 --> 00:48:18,380
if you look at the with always on,

755
00:48:18,830 --> 00:48:22,102
it's literally under 10 seconds. Because there is no DNS propagation,

756
00:48:22,166 --> 00:48:25,518
it's simply just switch it over to the other side and off he

757
00:48:25,524 --> 00:48:28,906
goes. So HadR

758
00:48:28,938 --> 00:48:31,674
options, what we looked at so far, we looked at the backup and restore,

759
00:48:31,722 --> 00:48:34,878
we looked at the snapshot, we looked at the lock shipping, we looked at the

760
00:48:34,884 --> 00:48:38,386
storage replica, the cloud India for Rico. Dr. We looked

761
00:48:38,408 --> 00:48:41,534
at the FCIS, we looked at the ags and we looked at the district

762
00:48:41,582 --> 00:48:44,914
AG script. And these are the options available for you

763
00:48:44,952 --> 00:48:48,246
to work on EC two with the backup restore. You can

764
00:48:48,268 --> 00:48:51,974
use that on RDS as well, or RDS itself has an automated backup and

765
00:48:52,012 --> 00:48:56,146
multi AZ for what we looked at in terms of your disaster

766
00:48:56,178 --> 00:48:59,634
recovery ha scenarios. With that folks,

767
00:48:59,682 --> 00:49:03,786
we come to the last topic, which is cloud enables to optimize licensing cost.

768
00:49:03,968 --> 00:49:07,546
How we can help optimizing the licensing cons when it comes to

769
00:49:07,728 --> 00:49:11,482
SQL server deployment. So this is a typical scenario. On premises you have

770
00:49:11,536 --> 00:49:14,746
an enterprise edition SQL server installed in an OLTP

771
00:49:14,778 --> 00:49:18,094
environment and it has got two nodes sitting inside a and site b.

772
00:49:18,212 --> 00:49:21,626
Now in a primary site you have your OLTP

773
00:49:21,658 --> 00:49:25,034
workloads constantly writing the data synchronously replicated to the secondary

774
00:49:25,082 --> 00:49:29,134
ac, and we have opened up the secondary

775
00:49:29,182 --> 00:49:32,930
site for reporting purposes and you're backing up the data

776
00:49:33,000 --> 00:49:36,030
from these. So basically in a nutshell,

777
00:49:36,110 --> 00:49:38,998
as soon as you open up the secondary instance you need to pay for the

778
00:49:39,004 --> 00:49:42,278
licensing for that. So both sites are constantly used,

779
00:49:42,364 --> 00:49:45,522
hence these reason you have licensed both sites.

780
00:49:45,586 --> 00:49:49,094
So say six cons on this side and six

781
00:49:49,132 --> 00:49:52,610
cons on that side. So total twelve cons implementation

782
00:49:52,690 --> 00:49:56,234
with always on ages on premises. Now let's replicate that into

783
00:49:56,352 --> 00:49:59,898
ECT on AWS going to do the

784
00:49:59,904 --> 00:50:02,780
same number of licenses because you have doing the same thing.

785
00:50:03,570 --> 00:50:07,360
There is no improvements on premises in terms of licensing cost.

786
00:50:08,130 --> 00:50:11,614
Now let's go into the change a bit. Now what I say is

787
00:50:11,652 --> 00:50:15,626
basically my OLTP

788
00:50:15,658 --> 00:50:20,062
workloads are coming in the primary, but my secondary instance itself is

789
00:50:20,116 --> 00:50:23,426
passive and it's waiting to take over. But there is no activity on

790
00:50:23,448 --> 00:50:25,986
that instance. So I don't have to pay for the licensing for those. So I

791
00:50:26,008 --> 00:50:29,926
only need six got in

792
00:50:29,948 --> 00:50:33,734
this scenario I can create a snapshot, the VSS snapshot of

793
00:50:33,772 --> 00:50:37,262
the secondary instance and I spin up another instance

794
00:50:37,426 --> 00:50:40,758
from that. That could be enterprise edition or standard edition depending

795
00:50:40,774 --> 00:50:44,314
on what features I need opt in and I can

796
00:50:44,352 --> 00:50:49,194
only pay for this instance when

797
00:50:49,232 --> 00:50:52,190
I use. So it's basically license included instance.

798
00:50:52,690 --> 00:50:57,694
You don't have to pay for licensing from

799
00:50:57,732 --> 00:51:01,118
your own point of view as a license included instance. So you

800
00:51:01,124 --> 00:51:05,230
don't have to pay for extra licensing cons. When you don't use secondary

801
00:51:05,590 --> 00:51:09,010
from going from active to passive replica, it may be possible

802
00:51:09,080 --> 00:51:13,518
to downgrade from enterprise to standard. So it's

803
00:51:13,534 --> 00:51:17,982
basically an option for you to optimize licensing. At the moment you are only onpremises.

804
00:51:18,046 --> 00:51:21,382
In previous model you are using twelve cores. Now you

805
00:51:21,436 --> 00:51:25,222
have an option of downgrading in an instance edition from

806
00:51:25,276 --> 00:51:29,474
enterprise to standard and you're using six for BYOL,

807
00:51:29,602 --> 00:51:32,840
whereas the other instance we're using for reporting or

808
00:51:33,210 --> 00:51:36,726
the OLED workloads. You can spin up the instance when you

809
00:51:36,748 --> 00:51:40,254
need to and that way you can control the cost around

810
00:51:40,292 --> 00:51:44,270
the SQL server licensing or also you can use the license related instances

811
00:51:45,010 --> 00:51:48,174
with that folks that bring me to the end

812
00:51:48,212 --> 00:51:51,742
of my talk. I hope you enjoyed it as much aws I did.

813
00:51:51,796 --> 00:51:54,620
And it was lovely talking to you. Have a good day. Thank you.

