1
00:00:27,250 --> 00:00:30,722
Hello everyone. My name is Mitri Vaishinka and I am a software

2
00:00:30,786 --> 00:00:34,434
engineer at MidAF Games. I specialize in mobile

3
00:00:34,482 --> 00:00:37,762
game and backend system development for over a decade

4
00:00:37,906 --> 00:00:41,186
and I am a member of International Game Developer

5
00:00:41,218 --> 00:00:44,454
association and an author of articles on

6
00:00:44,492 --> 00:00:47,702
medium and Hakunun. And let's talk

7
00:00:47,756 --> 00:00:51,562
about the pillars of our stack that ensure

8
00:00:51,706 --> 00:00:55,150
our operations run smoothly and efficiency.

9
00:00:55,490 --> 00:00:59,386
First on the list is our CI CD organization,

10
00:00:59,578 --> 00:01:03,074
which is the backbone of getting a large development team up

11
00:01:03,112 --> 00:01:06,462
and running handsomely. This setup ensures

12
00:01:06,606 --> 00:01:10,210
that integration and delivery happen seamlessly,

13
00:01:11,350 --> 00:01:15,098
allows for frequent updates without disrupting

14
00:01:15,134 --> 00:01:19,366
these user experience. Next, we focus on

15
00:01:19,548 --> 00:01:23,590
backend infrastructure, preparing it materials for scalability.

16
00:01:24,810 --> 00:01:28,346
As our user base grows, it's crucial to

17
00:01:28,368 --> 00:01:31,786
have backend robust enough to

18
00:01:31,888 --> 00:01:35,478
handle increasing load while maintaining performance.

19
00:01:35,654 --> 00:01:38,954
And finally, let's not forget our

20
00:01:38,992 --> 00:01:42,954
blue green deployment strategies. This method allows

21
00:01:43,002 --> 00:01:46,490
us to release new versions of our software

22
00:01:46,570 --> 00:01:50,270
without having to pause for maintenance or

23
00:01:50,340 --> 00:01:53,922
technical workings. It means zero

24
00:01:53,976 --> 00:01:57,442
downtime and a smoother, more reliable experience for

25
00:01:57,496 --> 00:02:01,906
our users. Altogether, these elements form

26
00:02:02,008 --> 00:02:05,490
an integrated approach to development and deployment,

27
00:02:06,250 --> 00:02:09,734
setting the stage for both agility and

28
00:02:09,772 --> 00:02:12,982
reliability. Let's start with

29
00:02:13,036 --> 00:02:14,950
CI CD organization.

30
00:02:16,650 --> 00:02:20,326
In our technology stack, we've adopted some of the industry's

31
00:02:20,358 --> 00:02:24,278
best practices to measures seamless and efficient deployment

32
00:02:24,454 --> 00:02:27,994
process. We operate under

33
00:02:28,112 --> 00:02:31,150
the infrastructure as a code paradigm,

34
00:02:31,810 --> 00:02:35,806
which allows us to manage and

35
00:02:35,908 --> 00:02:39,786
provision our technological infrastructure through machine

36
00:02:39,818 --> 00:02:43,662
readable definition files. These enabling

37
00:02:43,726 --> 00:02:48,066
rapid deployment and version control for

38
00:02:48,088 --> 00:02:50,750
the sake of environment reproducibility,

39
00:02:50,910 --> 00:02:54,970
particularly for continuous integration and staging, we utilize

40
00:02:55,150 --> 00:02:58,802
containerization techniques. This enhance

41
00:02:58,866 --> 00:03:02,598
both portability and consistency across

42
00:03:02,684 --> 00:03:06,642
all stages of development further bolster

43
00:03:06,786 --> 00:03:10,998
our reacting efforts. We employ an emulator farm

44
00:03:11,094 --> 00:03:15,050
that allows us to simulate various scenarios and environments.

45
00:03:15,390 --> 00:03:19,526
Simplification is a key in our approach as we've

46
00:03:19,558 --> 00:03:23,786
streamlined the deployment of both test and production replay

47
00:03:23,818 --> 00:03:27,120
servers to be as easy a single click.

48
00:03:27,810 --> 00:03:32,346
Finally, we conduct a cohesive suit of checks

49
00:03:32,458 --> 00:03:35,922
at the merge request stage to ensure good quality and

50
00:03:35,976 --> 00:03:39,774
functionality. These practices collectively

51
00:03:39,822 --> 00:03:43,970
contribute to a robust, agile and highly dependable

52
00:03:44,810 --> 00:03:49,814
development ecosystem. So we

53
00:03:49,852 --> 00:03:53,474
use versioning to track changes in our infrastructure

54
00:03:53,522 --> 00:03:57,110
as a code, it promoting us the

55
00:03:57,180 --> 00:04:00,566
ability to revert these previous stages

56
00:04:00,678 --> 00:04:03,770
effortlessly. Typically, we use Git.

57
00:04:05,070 --> 00:04:08,602
Second, automation is at the heart of

58
00:04:08,656 --> 00:04:12,922
our operations. It frees us from manual toil

59
00:04:13,066 --> 00:04:16,110
and allows for agile adaptation.

60
00:04:16,770 --> 00:04:20,554
Third, our use of code for describing

61
00:04:20,602 --> 00:04:24,450
infrastructure guarantees repatability and consistency.

62
00:04:24,870 --> 00:04:28,274
It making transitions from reacting to

63
00:04:28,312 --> 00:04:31,860
production environments seamless and

64
00:04:32,310 --> 00:04:36,470
fourth, our code doubles in our documentation,

65
00:04:36,970 --> 00:04:40,406
it offering transparency in understanding how our

66
00:04:40,428 --> 00:04:43,750
infrastructure is set up and configured.

67
00:04:44,570 --> 00:04:47,870
Fifth, scalability and making adjustments

68
00:04:47,970 --> 00:04:52,182
are straightforward efforts, we simply modify

69
00:04:52,246 --> 00:04:55,158
the code and apply those changes effectively.

70
00:04:55,254 --> 00:04:57,930
Future promoting our infrastructure.

71
00:04:59,070 --> 00:05:04,042
Lastly, our code based approach enhanced collaboration

72
00:05:04,106 --> 00:05:07,818
among team members and enables rapid

73
00:05:07,914 --> 00:05:11,710
responses to ever managing business requirements.

74
00:05:12,950 --> 00:05:16,750
These guiding principles form the cornerstone

75
00:05:16,830 --> 00:05:21,166
of our efficient, reliable and agile

76
00:05:21,358 --> 00:05:23,490
infrastructure management strategies.

77
00:05:26,170 --> 00:05:29,702
So with Timcity, you can store

78
00:05:29,756 --> 00:05:33,110
all your configurations using Kotlin DSL.

79
00:05:33,530 --> 00:05:37,518
With GitLab, you can do the same with YaML,

80
00:05:37,714 --> 00:05:41,814
and GitLab also offers convenience

81
00:05:41,862 --> 00:05:43,930
of performing checks after pushing.

82
00:05:45,870 --> 00:05:49,750
Timcity serves as a linchpin in

83
00:05:49,920 --> 00:05:53,370
our CI CD architecture. It workings several

84
00:05:53,450 --> 00:05:56,474
advantages that streamline our development

85
00:05:56,522 --> 00:05:59,950
and deployment processes. One of its key

86
00:06:00,020 --> 00:06:03,406
strength is seamless integration with a wide

87
00:06:03,438 --> 00:06:06,674
array of version control systems such as

88
00:06:06,712 --> 00:06:09,410
GIT, SVN and Mercurial,

89
00:06:09,910 --> 00:06:13,822
and that ensuring that our development workflow remains

90
00:06:13,886 --> 00:06:17,460
fluid regardless our choice of version control.

91
00:06:18,230 --> 00:06:21,846
Additionally, Teamcity's settings system

92
00:06:21,948 --> 00:06:24,550
is exceptionally flexible.

93
00:06:24,970 --> 00:06:28,406
It allows us to tailor our CI CD

94
00:06:28,438 --> 00:06:32,922
pipelines according to specific needs and conditions that

95
00:06:32,976 --> 00:06:36,966
truly sets it apart. Though it's

96
00:06:36,998 --> 00:06:41,174
a capability for virtualization and distributed

97
00:06:41,222 --> 00:06:44,990
builds, Teamcity dramatically accelerates the

98
00:06:45,060 --> 00:06:49,134
build process by intelligently allocating tasks across

99
00:06:49,252 --> 00:06:53,154
multiple agents, thereby reacting time to

100
00:06:53,192 --> 00:06:55,730
market and enhancing productivity.

101
00:06:56,470 --> 00:07:00,430
These features collectively make Timcity

102
00:07:00,510 --> 00:07:04,290
an invaluable asset in our quest for

103
00:07:04,360 --> 00:07:07,954
more agile, efficient and reliable

104
00:07:08,002 --> 00:07:12,710
touch environment. GitLab runs

105
00:07:13,690 --> 00:07:17,762
series of tasks automatically for your project

106
00:07:17,916 --> 00:07:22,870
every time changes are made. It's ensuring

107
00:07:23,030 --> 00:07:26,602
continuous code testing and readiness for

108
00:07:26,656 --> 00:07:30,054
deployment. GitLab CI allows you to

109
00:07:30,112 --> 00:07:34,670
automate various strategies of the deployment lifecycle,

110
00:07:35,010 --> 00:07:39,230
from code testing to building to deployment to production.

111
00:07:40,690 --> 00:07:44,462
One of its key measures is the ability

112
00:07:44,526 --> 00:07:47,150
to create complex pipelines with multiple,

113
00:07:47,230 --> 00:07:50,962
parallel and sequential tasks. It breaking

114
00:07:51,016 --> 00:07:54,446
GitLab CI, a powerful tool for development

115
00:07:54,478 --> 00:07:58,022
teams configuration is described using

116
00:07:58,076 --> 00:08:01,426
the GitLab UML file

117
00:08:01,618 --> 00:08:05,590
and it's making the setup process transparent and easy

118
00:08:05,660 --> 00:08:09,274
customizable. GitLab CI is closely integrated with

119
00:08:09,312 --> 00:08:12,598
GitLab itself that simplifying these setup,

120
00:08:12,694 --> 00:08:16,810
monitoring and management of all aspects of CI CD

121
00:08:17,710 --> 00:08:20,938
in auto building building are added

122
00:08:21,034 --> 00:08:24,334
for which automatic building is assigned based

123
00:08:24,372 --> 00:08:27,120
on certain continuous for example, based on time.

124
00:08:27,970 --> 00:08:31,834
At the moment of the trigger for automatic

125
00:08:31,882 --> 00:08:35,726
building, critical validation and building of server

126
00:08:35,758 --> 00:08:39,346
configs are carried out first. After that

127
00:08:39,448 --> 00:08:43,394
the services is built and clients for the three

128
00:08:43,432 --> 00:08:47,126
main platforms are also built and after

129
00:08:47,228 --> 00:08:51,990
successful completion of the builds, the server is launched.

130
00:08:52,730 --> 00:08:56,946
After the server is successfully launched, the client

131
00:08:57,058 --> 00:09:01,402
versions are uploaded to the app center so

132
00:09:01,536 --> 00:09:04,970
they can be downloaded lately to devices.

133
00:09:05,710 --> 00:09:09,370
Thus, thanks to autobuilds in the projects,

134
00:09:10,130 --> 00:09:13,486
a fresh client server pair with the

135
00:09:13,508 --> 00:09:17,262
latest changes that have been uploaded appears every

136
00:09:17,316 --> 00:09:20,926
one or 2 hours. Here is

137
00:09:20,948 --> 00:09:25,210
the steps to build a services. First assemble the server configuration.

138
00:09:25,370 --> 00:09:29,042
Then they'll build these server based on these configurations and

139
00:09:29,096 --> 00:09:30,930
finally deploy the server.

140
00:09:32,470 --> 00:09:36,034
This functionality is convenient for testing

141
00:09:36,082 --> 00:09:39,842
new features, fixing bugs, or conducting experiments

142
00:09:39,906 --> 00:09:43,554
in an isolated environment without affecting these main development

143
00:09:43,602 --> 00:09:47,678
process. As a result of the build the server configuration,

144
00:09:47,794 --> 00:09:51,434
server cloud virtual machine are created and these

145
00:09:51,472 --> 00:09:55,254
server is launched. A unique name for a virtual

146
00:09:55,302 --> 00:09:58,940
machine is assigned to each user in team city

147
00:09:59,890 --> 00:10:03,694
and in the client you can select login address from the list

148
00:10:03,732 --> 00:10:05,950
of shards to connect the server.

149
00:10:06,930 --> 00:10:10,560
Created servers are deleted twice a week,

150
00:10:11,010 --> 00:10:14,800
on Thursday night and Saturday night and

151
00:10:15,490 --> 00:10:19,422
these creating a demand servers provide flexibility

152
00:10:19,566 --> 00:10:23,220
and autonomy in the development and testing process.

153
00:10:24,150 --> 00:10:28,534
The development process utilize merge request system

154
00:10:28,652 --> 00:10:31,878
to ensure that individual changes do not break,

155
00:10:31,964 --> 00:10:35,880
build or obstruct these others work.

156
00:10:37,690 --> 00:10:41,218
Developers create a new branch from an updated

157
00:10:41,314 --> 00:10:44,966
develop head, make some comments related

158
00:10:44,998 --> 00:10:48,170
to specific tasks or bugs and these

159
00:10:48,240 --> 00:10:51,470
push these changes to the target branch.

160
00:10:51,810 --> 00:10:55,882
A merge request is these created

161
00:10:56,026 --> 00:10:59,626
either immediately after these first push

162
00:10:59,738 --> 00:11:04,210
or right before merging into develop branch.

163
00:11:04,950 --> 00:11:08,718
The merge request undergoes various automated checks

164
00:11:08,814 --> 00:11:12,494
and possibly manual reviews. Once approved,

165
00:11:12,542 --> 00:11:16,120
the merge request can be automatically merged when

166
00:11:16,650 --> 00:11:18,760
all tests pass,

167
00:11:19,850 --> 00:11:23,190
breaking the developer to move on other tasks.

168
00:11:24,330 --> 00:11:28,542
If can merge request becomes outdated or irrelevant,

169
00:11:28,706 --> 00:11:32,362
it's essential to close it to prevent clutter and

170
00:11:32,416 --> 00:11:35,450
confusion in the list of active merge requests.

171
00:11:36,750 --> 00:11:40,798
The validation system services as an integrated tool

172
00:11:40,884 --> 00:11:44,942
within a unity project for validating assets and

173
00:11:44,996 --> 00:11:48,830
configurations within its interface.

174
00:11:49,170 --> 00:11:52,902
User can execute predefined or custom validators

175
00:11:52,986 --> 00:11:56,594
or selected assets or groups of

176
00:11:56,632 --> 00:12:00,174
assets. Validators examine

177
00:12:00,222 --> 00:12:03,918
specific aspects of can asset to ensure its integrity,

178
00:12:04,014 --> 00:12:07,350
such as broken links. It can be marked as

179
00:12:07,500 --> 00:12:11,494
critical to enforce checks during building

180
00:12:11,532 --> 00:12:14,946
and virtualquest pipelines. Results are displayed

181
00:12:14,978 --> 00:12:19,210
at the bottom of the window and any rows locked in unity.

182
00:12:19,950 --> 00:12:23,850
So the next big part of our CI is

183
00:12:23,920 --> 00:12:27,642
git hooks. These client hooks system

184
00:12:27,776 --> 00:12:31,206
consists of several components including the installer

185
00:12:31,398 --> 00:12:35,114
commit, message, pre commit, post commit, and post rewrite

186
00:12:35,162 --> 00:12:38,814
hooks. Each services a specific function in the

187
00:12:38,852 --> 00:12:42,806
version control workflow. The installer

188
00:12:42,858 --> 00:12:47,230
is a binary that automatically downloads and updates

189
00:12:47,390 --> 00:12:50,622
these hooks from central repository,

190
00:12:50,766 --> 00:12:55,410
placing them in local git hooks directory,

191
00:12:56,170 --> 00:13:00,242
and it also creates scripts to trigger the hooks

192
00:13:00,386 --> 00:13:04,120
and keep them up to date. Commit message

193
00:13:04,650 --> 00:13:09,174
checks the commands attached to the commits precommit

194
00:13:09,222 --> 00:13:13,526
performs a variety of file checks, and postcommit

195
00:13:13,558 --> 00:13:16,774
and posture write mainly handle notifications.

196
00:13:16,822 --> 00:13:20,258
After a commit or rebase operation,

197
00:13:20,454 --> 00:13:24,154
the protected branch hook restricts pushes

198
00:13:24,202 --> 00:13:27,582
to certain branches, essentially making them read

199
00:13:27,636 --> 00:13:30,510
only and preserving these integrity.

200
00:13:31,090 --> 00:13:35,246
The rebase required hook ensures that

201
00:13:35,348 --> 00:13:39,330
before you can push your changes, you must releases to have

202
00:13:39,400 --> 00:13:43,374
the most up to date version of the repository, thus minimizing

203
00:13:43,422 --> 00:13:47,286
conflicts. The new branch name hook validates the

204
00:13:47,308 --> 00:13:50,870
naming convention of new branches.

205
00:13:51,290 --> 00:13:55,106
Lastly, the message content hook enforces standardizer

206
00:13:55,138 --> 00:13:59,254
to commit message through the use of regular

207
00:13:59,302 --> 00:14:03,782
expressions. These tools serve as proactive

208
00:14:03,926 --> 00:14:07,974
measures to maintain a high standard of coding

209
00:14:08,022 --> 00:14:11,546
practices. Now let's dive

210
00:14:11,578 --> 00:14:13,470
in our backend infrastructure.

211
00:14:14,930 --> 00:14:18,654
In the architecture of the platform, a variety of

212
00:14:18,692 --> 00:14:22,646
tools and frameworks are employed to measures efficient

213
00:14:22,698 --> 00:14:27,134
and robust operation. Eclipse Vertex

214
00:14:27,262 --> 00:14:30,974
serves as these backbone for the messaging

215
00:14:31,022 --> 00:14:35,166
system and also provides clustered storage for untamed

216
00:14:35,198 --> 00:14:39,570
data, offering a scalable solution for high speed data handling.

217
00:14:40,390 --> 00:14:43,418
Complementing Vertex is Haslcast,

218
00:14:43,614 --> 00:14:47,286
an in memory data grid that enhances performance and

219
00:14:47,308 --> 00:14:50,682
scalability for data streaming and log

220
00:14:50,736 --> 00:14:54,442
managing by kafka plays a crucial role as a data

221
00:14:54,496 --> 00:14:58,102
broker. It's allowing for real time analysis

222
00:14:58,166 --> 00:15:02,206
and monitoring. On the database side,

223
00:15:02,388 --> 00:15:06,586
PostgreSQL is used to store persistent data that's

224
00:15:06,618 --> 00:15:09,418
offering flexibility in data storage approaches.

225
00:15:09,594 --> 00:15:14,254
Lastly, Ansible is utilized for automating server applications

226
00:15:14,302 --> 00:15:17,870
configuration and it's ensuring

227
00:15:17,950 --> 00:15:22,114
that the platform's diverse services are

228
00:15:22,232 --> 00:15:25,830
seamlessly integrated and easily manageable.

229
00:15:26,490 --> 00:15:29,746
The architecture of the platform consists

230
00:15:29,778 --> 00:15:33,238
of several key components and designed to handle specific

231
00:15:33,324 --> 00:15:37,442
functionalities. The account server is responsible for

232
00:15:37,516 --> 00:15:41,354
user authentication and maintains information regarding all

233
00:15:41,392 --> 00:15:45,286
connected game servers. Next, these game server is a central

234
00:15:45,318 --> 00:15:48,700
hub for all game mechanics, logic and data.

235
00:15:49,390 --> 00:15:53,722
That's ensuring that gameplay experience is consistent

236
00:15:53,786 --> 00:15:57,438
and engaging. And on these

237
00:15:57,524 --> 00:16:01,790
administrative side, game tool web

238
00:16:01,940 --> 00:16:05,662
serves as a comprehensive tool for managing

239
00:16:05,726 --> 00:16:09,970
both player accounts and server settings. Lastly, Game tools

240
00:16:10,040 --> 00:16:13,890
ETL works behind the scenes and final

241
00:16:13,960 --> 00:16:17,310
game logs from Patch Kafka

242
00:16:17,390 --> 00:16:21,382
into Gametool database, thereby enabling robust data

243
00:16:21,436 --> 00:16:23,270
analysis and reporting.

244
00:16:25,610 --> 00:16:29,722
This HTTP server has its own database and

245
00:16:29,776 --> 00:16:33,590
consists of several components. The authentication

246
00:16:33,670 --> 00:16:37,434
component is responsible for user authentication and

247
00:16:37,472 --> 00:16:40,714
distribution among the game servers and their front end

248
00:16:40,752 --> 00:16:45,386
components. The building component process

249
00:16:45,578 --> 00:16:49,402
in game purchases and the game server configuration

250
00:16:49,466 --> 00:16:52,754
component is used to communicate with game

251
00:16:52,792 --> 00:16:56,706
services, announce, maintains and perform

252
00:16:56,808 --> 00:16:58,530
other releases tasks.

253
00:17:00,630 --> 00:17:04,258
The server comprises a cluster of either

254
00:17:04,344 --> 00:17:08,322
physical or logical nodes, each made up of multiple

255
00:17:08,386 --> 00:17:12,290
components and services that interact seamlessly

256
00:17:12,450 --> 00:17:16,022
through a common event bus. At the front

257
00:17:16,076 --> 00:17:19,846
end, we have the front end component responsible

258
00:17:19,878 --> 00:17:23,398
for managing TCP connections and verifying

259
00:17:23,494 --> 00:17:26,010
clients via the account server.

260
00:17:27,070 --> 00:17:31,114
It serves as the main gateway for client

261
00:17:31,162 --> 00:17:34,970
server communication. These dispatcher queues

262
00:17:35,130 --> 00:17:38,522
and delegates clients requests and messages

263
00:17:38,586 --> 00:17:41,600
to the appropriate parts of the system.

264
00:17:42,390 --> 00:17:46,690
Scheduler plays a crucial role in

265
00:17:46,840 --> 00:17:50,802
time sensitive game mechanics, providing time and subscriptions to

266
00:17:50,856 --> 00:17:54,414
various companies. Our DB operation

267
00:17:54,462 --> 00:17:58,546
executor ensures smooth and asynchronous interaction

268
00:17:58,578 --> 00:18:02,390
with databases, while the resource system

269
00:18:02,460 --> 00:18:04,790
holds the configuration for game mechanics.

270
00:18:05,610 --> 00:18:09,242
Moreover, all server activities are

271
00:18:09,376 --> 00:18:12,666
diligently logged by our log system,

272
00:18:12,848 --> 00:18:16,758
which sends these logs to an Apache Kafka

273
00:18:16,774 --> 00:18:19,450
message broker for analysis.

274
00:18:20,770 --> 00:18:24,394
The server also hosts an array of specialized

275
00:18:24,522 --> 00:18:28,270
mechanical components such as these for

276
00:18:28,340 --> 00:18:31,806
missions, quests and mail, making it

277
00:18:31,908 --> 00:18:35,798
a comprehensive and flexible platform for an immersive

278
00:18:35,834 --> 00:18:36,980
gaming experience.

279
00:18:39,510 --> 00:18:42,994
Our game tool is an essential part of our

280
00:18:43,032 --> 00:18:46,866
comprehensive game management ecosystem. It consists

281
00:18:46,978 --> 00:18:50,760
of two pivotal components. First is

282
00:18:51,210 --> 00:18:54,402
game tools ETL, which stands for extract,

283
00:18:54,466 --> 00:18:57,918
transform and load. This component

284
00:18:58,034 --> 00:19:02,682
is responsible for siphoning off game

285
00:19:02,736 --> 00:19:05,462
logs from our Apache Kafka message broker.

286
00:19:05,606 --> 00:19:09,642
Process these logs and then persist these

287
00:19:09,696 --> 00:19:12,990
transformer data into its own dedicated database.

288
00:19:13,570 --> 00:19:16,538
This ensures that we have a streamlined,

289
00:19:16,714 --> 00:19:20,990
reliable repository for game analytics and insights.

290
00:19:21,570 --> 00:19:25,234
The second part is game tools Web,

291
00:19:25,432 --> 00:19:28,754
an administrative tool designed to offer a real

292
00:19:28,792 --> 00:19:31,700
time access to essential services data.

293
00:19:33,350 --> 00:19:37,670
The gaming platform incorporates a range of specialized services

294
00:19:37,820 --> 00:19:39,640
to enhance user experience.

295
00:19:40,570 --> 00:19:44,626
Proton is utilized for PvP and cooperative

296
00:19:44,658 --> 00:19:49,078
gameplay, while little rewards offers

297
00:19:49,174 --> 00:19:52,810
a universal system for storing

298
00:19:53,310 --> 00:19:55,690
and ranking player achievements.

299
00:19:57,070 --> 00:20:00,446
The friend service takes care of the list of

300
00:20:00,468 --> 00:20:02,480
friends and provide referral information.

301
00:20:04,210 --> 00:20:08,030
Each player also has a player profile which

302
00:20:08,180 --> 00:20:11,886
gives a detailed account of their in games activities and

303
00:20:11,908 --> 00:20:16,020
statistics. These replace services is

304
00:20:19,190 --> 00:20:23,550
a tool for store gameplay. Replace additional

305
00:20:23,630 --> 00:20:26,982
functionalities includes mail for in games,

306
00:20:27,036 --> 00:20:30,626
messaging chat for broader social interactions including

307
00:20:30,658 --> 00:20:34,130
group settings, matchmaking for effectively

308
00:20:34,210 --> 00:20:37,314
pairing up players as opponents

309
00:20:37,362 --> 00:20:41,130
or teammates can for organized group

310
00:20:41,200 --> 00:20:45,318
activities, and push notifications to keep players

311
00:20:45,414 --> 00:20:48,646
updated while real time information sent directly

312
00:20:48,678 --> 00:20:49,930
to these devices.

313
00:20:51,070 --> 00:20:54,410
Our current architecture combines

314
00:20:54,830 --> 00:20:58,862
various systems and components coordinated through photon cloud

315
00:20:58,996 --> 00:21:02,314
for real time multiplayer gaming. Photon Cloud

316
00:21:02,452 --> 00:21:05,810
offers low latency data centers worldwide

317
00:21:06,150 --> 00:21:10,030
and its versatility expands to applications

318
00:21:10,110 --> 00:21:13,330
beyond gaming like text and video chat.

319
00:21:15,290 --> 00:21:19,320
Our primary data storage is postgresql because

320
00:21:19,930 --> 00:21:23,574
we find that relational databases are generally more

321
00:21:23,612 --> 00:21:27,554
reliable and easier to validate than other data

322
00:21:27,612 --> 00:21:30,954
storage models. For message brokering, we use

323
00:21:30,992 --> 00:21:34,854
Apache Kafka due to its out of the box horizontal

324
00:21:34,902 --> 00:21:38,394
scaling and high reliability. We also

325
00:21:38,432 --> 00:21:42,042
use Hazelcast as in memory database that integrates

326
00:21:42,106 --> 00:21:45,530
with Vertex, our framework for building reacting

327
00:21:45,610 --> 00:21:50,058
applications. Our stack

328
00:21:50,154 --> 00:21:54,366
includes vertex, which support multiple programming languages and operates

329
00:21:54,558 --> 00:21:57,940
reactor pattern. Despite of its benefits,

330
00:21:58,630 --> 00:22:01,218
vertex can lead to complicated code,

331
00:22:01,304 --> 00:22:05,350
especially if the language are using isn't fully supported by

332
00:22:05,420 --> 00:22:09,398
the framework. In such cases, alternatives like

333
00:22:09,484 --> 00:22:12,150
Quasar project could be considered,

334
00:22:12,570 --> 00:22:16,214
although Quasar wasn't breaking actively maintained when

335
00:22:16,252 --> 00:22:20,090
we began our project in 2017.

336
00:22:21,870 --> 00:22:25,098
For transactional operations, we've created a

337
00:22:25,104 --> 00:22:29,418
custom object that allows linear operations within message

338
00:22:29,504 --> 00:22:33,614
processing. This approach covers most of our use

339
00:22:33,652 --> 00:22:37,226
cases. During testing, we discovered

340
00:22:37,338 --> 00:22:41,386
and reported a log queuing issue in veritex,

341
00:22:41,498 --> 00:22:44,290
which the developers have since addressed.

342
00:22:46,070 --> 00:22:50,318
We monitor performance metrics using primateos

343
00:22:50,414 --> 00:22:53,090
and visualize them using grafana.

344
00:22:53,670 --> 00:22:58,226
This setup helped us fine tune our vertex configuration

345
00:22:58,418 --> 00:23:00,390
and resolve bottlenecks.

346
00:23:01,770 --> 00:23:05,590
Our game cluster is a collection of machines

347
00:23:06,010 --> 00:23:09,150
running instances of vertex and Haslecast,

348
00:23:09,330 --> 00:23:12,410
with each node running various game mechanics.

349
00:23:12,990 --> 00:23:17,530
These mechanics are encapsulated in vertex verticals

350
00:23:17,870 --> 00:23:22,090
which have different tasks like game model loading

351
00:23:22,170 --> 00:23:24,030
or arcade tasks.

352
00:23:25,410 --> 00:23:29,710
To manage all these, we use a comprehensive admin interface.

353
00:23:31,250 --> 00:23:35,518
Scaling for performance is relatively straightforward.

354
00:23:35,694 --> 00:23:39,090
Our current hardware can comfortably support

355
00:23:39,240 --> 00:23:42,926
150,000 users,

356
00:23:43,118 --> 00:23:46,642
and if we reach cpu limitation,

357
00:23:46,706 --> 00:23:50,294
we can add servers to the cluster and our

358
00:23:50,332 --> 00:23:54,674
postgresql setup might be the first bottleneck

359
00:23:54,722 --> 00:23:59,110
in terms of scalability, but different synchronization with

360
00:23:59,180 --> 00:24:02,220
Haslcast can elevate this issue.

361
00:24:03,550 --> 00:24:07,660
Now let's review our blue green deployment process.

362
00:24:08,430 --> 00:24:12,042
So why we choose to employ a blue green deployment

363
00:24:12,106 --> 00:24:15,790
strategies for our operations? This decision to

364
00:24:15,860 --> 00:24:20,414
go with this approach wasn't taken lightly as

365
00:24:20,452 --> 00:24:24,270
it does come with its own set of architectural and operational

366
00:24:24,350 --> 00:24:28,370
costs. However, in our specific context, these advantage

367
00:24:28,790 --> 00:24:31,730
clearly outweighed these expenses.

368
00:24:32,310 --> 00:24:35,350
These are two main reasons behind this decision. First,

369
00:24:35,420 --> 00:24:38,658
and furthermore, downtime is not just inconvenient,

370
00:24:38,754 --> 00:24:42,418
it's expensive. Even a minute

371
00:24:42,514 --> 00:24:46,450
of downtime can have significant financial implications

372
00:24:46,530 --> 00:24:50,310
for us, and the second reason is unique

373
00:24:50,390 --> 00:24:53,398
to our focus on mobile games.

374
00:24:53,574 --> 00:24:57,274
When we publish a new version of our mobile game

375
00:24:57,312 --> 00:25:00,894
client, it needs to go through

376
00:25:00,932 --> 00:25:05,482
a store review process which isn't instantiated

377
00:25:05,546 --> 00:25:07,440
and can take several days.

378
00:25:08,450 --> 00:25:11,774
This means we absolutely need to ability to

379
00:25:11,812 --> 00:25:16,270
support multiple game servers instances concurrently

380
00:25:16,350 --> 00:25:20,226
to align with the release cycles of mobile App

381
00:25:20,248 --> 00:25:23,806
Stores. So these blue green deployment strategy

382
00:25:23,838 --> 00:25:27,606
provides us with the flexibility and reliability we

383
00:25:27,628 --> 00:25:29,590
need to meet our business requirements.

384
00:25:32,410 --> 00:25:35,522
Our setup involves three main elements,

385
00:25:35,666 --> 00:25:39,162
your client and two servers named alpha and

386
00:25:39,216 --> 00:25:43,242
beta. Two objective is to

387
00:25:43,296 --> 00:25:47,078
transition the game traffic seamlessly from alpha to beta,

388
00:25:47,254 --> 00:25:50,574
all while ensuring that players experience zero

389
00:25:50,612 --> 00:25:54,010
interruptions. This discrete migration

390
00:25:54,090 --> 00:25:57,406
process involves not just these game servers and the

391
00:25:57,428 --> 00:26:00,750
clients, but also specialized account server.

392
00:26:01,650 --> 00:26:05,460
The sole role of this account server is to provide a client with

393
00:26:06,070 --> 00:26:09,570
appropriate game server address for connection.

394
00:26:10,310 --> 00:26:14,190
It also keeps track of the services status

395
00:26:14,270 --> 00:26:17,990
which is essential meta information that helps coordinate the switch.

396
00:26:18,330 --> 00:26:22,434
These goal is to make this transition as smooth

397
00:26:22,482 --> 00:26:25,922
as possible so players remain blissfully

398
00:26:25,986 --> 00:26:29,610
unaware that any change has even occurred.

399
00:26:30,990 --> 00:26:34,902
Let's walk through how our game update

400
00:26:34,966 --> 00:26:38,650
system achieves zero downtime, ensuring an

401
00:26:38,800 --> 00:26:41,394
uninterrupted game experience for our players.

402
00:26:41,542 --> 00:26:45,530
Initially, Alpha server is live while beta is stopped.

403
00:26:45,690 --> 00:26:49,370
When a player enters the game, the client contacts the account server

404
00:26:49,450 --> 00:26:52,806
to find out which game server is currently active.

405
00:26:52,938 --> 00:26:57,010
The account server responds with the address of Alpha and

406
00:26:57,080 --> 00:27:00,914
the client connects accordingly. Now, when it's time

407
00:27:00,952 --> 00:27:04,366
to update, Alpha is declared as stopped and battery

408
00:27:04,398 --> 00:27:07,934
is set to life. Alpha then sends

409
00:27:08,062 --> 00:27:11,366
reconnect broadcast to all its

410
00:27:11,388 --> 00:27:15,586
connected clients. On receiving this, the clients reestablished

411
00:27:15,618 --> 00:27:19,478
their contact with the account server

412
00:27:19,654 --> 00:27:22,010
which now provides the address for beta.

413
00:27:22,750 --> 00:27:26,730
The client switches its connection to beta seamlessly,

414
00:27:28,590 --> 00:27:32,350
all without the player noticing any disruption.

415
00:27:33,890 --> 00:27:37,326
Through these coordinated dance between the

416
00:27:37,348 --> 00:27:41,274
account services Alpha and beta, we effectively achieve

417
00:27:41,402 --> 00:27:44,450
zero downtime during server updates.

418
00:27:45,270 --> 00:27:47,890
There are some areas for power enhancements.

419
00:27:48,230 --> 00:27:51,618
First, our quality assurance specialists have expressed the need

420
00:27:51,704 --> 00:27:54,974
for a final testing phase on the new version of the game

421
00:27:55,032 --> 00:27:58,870
services before players are allowed to join. Second,

422
00:27:58,940 --> 00:28:02,262
we want to allow the client to complete certain activities on the same

423
00:28:02,316 --> 00:28:04,870
game server where they target.

424
00:28:05,690 --> 00:28:09,558
To facilitate these improvements, we introduced

425
00:28:09,574 --> 00:28:12,170
a new server status called staging.

426
00:28:12,750 --> 00:28:16,294
During this managing phase, access to the game server

427
00:28:16,342 --> 00:28:19,098
is granted to a select group,

428
00:28:19,264 --> 00:28:22,938
our QA specialists for

429
00:28:23,104 --> 00:28:27,210
organizing final testing, and ordinary players who specify

430
00:28:27,290 --> 00:28:30,270
these preferred game server during the login request.

431
00:28:31,250 --> 00:28:35,074
These added layer of sophistication measures both

432
00:28:35,112 --> 00:28:38,420
quality control and enhanced user experience.

433
00:28:39,830 --> 00:28:43,940
These is how our enhanced game update mechanism works.

434
00:28:44,550 --> 00:28:46,680
As illustrated in the given example,

435
00:28:47,370 --> 00:28:51,714
initially Alpha is live and beta is stopped. With clients

436
00:28:51,762 --> 00:28:55,602
connected to Alpha. The first change occurs

437
00:28:55,666 --> 00:28:59,578
when alpha remains live but better transitions to

438
00:28:59,664 --> 00:29:03,974
a managing status. This allows

439
00:29:04,022 --> 00:29:08,090
our QA team to perform final tests on better while

440
00:29:08,240 --> 00:29:12,026
keeping the bulk of the player traffic on Alpha.

441
00:29:12,218 --> 00:29:14,910
Once beta clears QA,

442
00:29:16,130 --> 00:29:19,950
it becomes live and Alpha switches to managing.

443
00:29:21,730 --> 00:29:25,562
At this juncture, Alpha sends

444
00:29:25,626 --> 00:29:29,390
out a broadcast to connect event. However, if a player

445
00:29:29,470 --> 00:29:34,050
is engaged in activity like battle, the client

446
00:29:34,390 --> 00:29:38,274
has the option to ignore these reconnect

447
00:29:38,322 --> 00:29:42,626
signal and stay on alpha. Finally, when Alpha transitions

448
00:29:42,658 --> 00:29:46,274
to stopped status, any new login

449
00:29:46,322 --> 00:29:50,630
attempts are directed towards beta and

450
00:29:50,780 --> 00:29:54,810
this games offers flexibility for various update scenarios

451
00:29:55,470 --> 00:29:58,902
whenever we are rolling out a completely new game version

452
00:29:58,966 --> 00:30:02,702
or simply pushing updates to fix bugs in

453
00:30:02,756 --> 00:30:07,082
existing version. This ensures both robust

454
00:30:07,146 --> 00:30:10,846
quality assurance and uninterrupted gaming experience for

455
00:30:10,868 --> 00:30:14,322
our players. While having

456
00:30:14,376 --> 00:30:18,062
multiple versions of servers running could technically

457
00:30:18,126 --> 00:30:21,346
allow players who haven't updated their game to

458
00:30:21,448 --> 00:30:26,146
continue player playing, it intricacies complexity.

459
00:30:26,338 --> 00:30:30,358
These need to maintain both forward and backward compatibility across

460
00:30:30,444 --> 00:30:34,274
different system companies like databases or interserver

461
00:30:34,322 --> 00:30:38,246
interactions. And to simplify this, we've adopted

462
00:30:38,278 --> 00:30:40,700
a strict responsive policy.

463
00:30:41,470 --> 00:30:45,274
Client of version X will only connect to server of the same

464
00:30:45,312 --> 00:30:48,700
version X and similar it for version Y.

465
00:30:49,890 --> 00:30:53,550
This approach eliminates the need for double work

466
00:30:53,620 --> 00:30:55,870
in maintaining protocol compatibility.

467
00:30:57,090 --> 00:31:02,042
Within these same version. Server changes are permissible

468
00:31:02,106 --> 00:31:05,398
as long as they don't affect the client and direction

469
00:31:05,434 --> 00:31:09,730
protocol, giving us room for operational flexibility.

470
00:31:10,550 --> 00:31:13,906
As a result of this, the account server now needs

471
00:31:13,928 --> 00:31:17,606
to be aware of game server's version and

472
00:31:17,628 --> 00:31:21,030
these client is required to specify which version of the game

473
00:31:21,100 --> 00:31:23,880
server it wishes to connect to.

474
00:31:24,970 --> 00:31:28,294
These streamlines the system while allowing

475
00:31:28,342 --> 00:31:31,450
us ample space for ongoing improvements.

476
00:31:32,110 --> 00:31:35,574
So version 20 is slated

477
00:31:35,622 --> 00:31:39,334
to replace the existing 10. Once our QA

478
00:31:39,382 --> 00:31:42,590
specialists have given beta the green light,

479
00:31:42,740 --> 00:31:45,710
we initiate what we call a soft update.

480
00:31:46,130 --> 00:31:49,226
During this phase, beta goes live and a fraction

481
00:31:49,258 --> 00:31:52,682
of players gain access to their 2.0

482
00:31:52,756 --> 00:31:56,434
client via their response respective App

483
00:31:56,472 --> 00:31:59,698
Stores. If all goes well,

484
00:31:59,784 --> 00:32:03,762
with no critical bugs, we expanding these to 100%

485
00:32:03,816 --> 00:32:07,254
of the player base. Contrary to

486
00:32:07,372 --> 00:32:11,538
the Bluegreen deployment strategy, the server

487
00:32:11,634 --> 00:32:15,650
from previous version doesn't initiate any connections

488
00:32:15,730 --> 00:32:18,040
when a new version is rolled out.

489
00:32:18,650 --> 00:32:22,886
Now, if any issues surface, we employ these Bluegreen

490
00:32:22,918 --> 00:32:26,266
deployment process to transition players to

491
00:32:26,368 --> 00:32:30,282
third server gamma, which contains the

492
00:32:30,416 --> 00:32:33,302
necessary fixes. Meanwhile,

493
00:32:33,366 --> 00:32:36,986
players on the 10 client can continue a

494
00:32:37,008 --> 00:32:39,150
bare session on Alpha.

495
00:32:39,730 --> 00:32:43,118
Ultimately, we initiate a hard update,

496
00:32:43,214 --> 00:32:47,058
shutting down alpha and halting all 1.0

497
00:32:47,144 --> 00:32:50,370
login attempts. Players are

498
00:32:50,440 --> 00:32:53,890
then prompted to update their clients to continue playing.

499
00:32:55,050 --> 00:32:58,962
This nuanced approach not only ensures a smooth transition,

500
00:32:59,026 --> 00:33:02,310
but also incorporates continuous plans for

501
00:33:02,380 --> 00:33:04,550
unexpected hip rs.

502
00:33:05,850 --> 00:33:09,890
Our server update process has been streamlined to

503
00:33:10,060 --> 00:33:13,830
such an extent that it's

504
00:33:13,910 --> 00:33:18,042
entirely managed by our QS specialists using a straightforward games tool

505
00:33:18,096 --> 00:33:21,482
interface. Here is how it works in a nutshell,

506
00:33:21,626 --> 00:33:25,722
the account server which holds its complete stage

507
00:33:25,866 --> 00:33:29,390
in a database. It's entirely stateless,

508
00:33:29,810 --> 00:33:32,350
making it highly robust and flexible.

509
00:33:34,210 --> 00:33:37,650
QA specialist uses the games tool to instruct the account

510
00:33:37,720 --> 00:33:41,890
server to change beta status from stopped to staging.

511
00:33:43,110 --> 00:33:46,260
This is where a final check take place,

512
00:33:46,790 --> 00:33:50,420
and once beta is confirmed to be live,

513
00:33:51,030 --> 00:33:54,866
these same QS specialist uses game tool to prompt alpha

514
00:33:54,898 --> 00:33:58,678
to send a reconnect signal to all connected clients,

515
00:33:58,854 --> 00:34:02,134
initiating their migration to beta. This approach

516
00:34:02,182 --> 00:34:05,862
offers a simplified, user friendly method for QA specialists

517
00:34:05,926 --> 00:34:08,890
to manage the complex projects of server updates.

518
00:34:09,630 --> 00:34:13,358
That's ensuring a seamless player experience while

519
00:34:13,444 --> 00:34:16,000
maintaining the integrity of our game service.

520
00:34:18,130 --> 00:34:21,614
This approach not only allows us to roll out game

521
00:34:21,652 --> 00:34:25,506
service updates without downtime, but also enables us to quickly

522
00:34:25,688 --> 00:34:28,690
address game mechanics, bugs and optimizations.

523
00:34:29,430 --> 00:34:33,250
Imagine a scenario when a critical error secures during a particular

524
00:34:33,320 --> 00:34:37,622
games activity. Players aren't left at large. These can

525
00:34:37,676 --> 00:34:41,458
still enjoy their aspects of the game while we rapidly deploy

526
00:34:41,474 --> 00:34:45,814
a fix. This ensures that their

527
00:34:45,852 --> 00:34:49,062
next attempt at the original game activity

528
00:34:49,126 --> 00:34:51,820
is likely to be error free,

529
00:34:52,350 --> 00:34:56,154
another advantage that deserves special mention in our ability to

530
00:34:56,192 --> 00:34:58,650
fix client side bugs through the server.

531
00:34:59,790 --> 00:35:03,390
This is critical because updating the mobile client through the App Store

532
00:35:03,460 --> 00:35:06,842
takes time, and that's making client sidebar potentially

533
00:35:06,906 --> 00:35:10,494
more damaging than server side ones. There have

534
00:35:10,532 --> 00:35:14,210
been instances there are minor adjustment to

535
00:35:14,280 --> 00:35:17,906
server responses effectively convinced the

536
00:35:17,928 --> 00:35:21,502
client to behave. While we can

537
00:35:21,566 --> 00:35:25,194
always count on such fortunate outcomes, our blue

538
00:35:25,262 --> 00:35:29,270
green development system remains our safety net even in

539
00:35:29,340 --> 00:35:31,400
the most unexpected of situation.

540
00:35:32,490 --> 00:35:35,270
So let's make some conclusions.

541
00:35:36,330 --> 00:35:39,690
In summary, these three pillars of

542
00:35:39,760 --> 00:35:43,722
our tech stack work in unison to create a

543
00:35:43,776 --> 00:35:47,354
highly effective, agile, and dependable ecosystem for

544
00:35:47,392 --> 00:35:50,906
both deployment and development. First, our CI CD

545
00:35:50,938 --> 00:35:54,874
organizing acts as a spine of our development

546
00:35:54,922 --> 00:35:58,606
structure. It not only integrates a large

547
00:35:58,708 --> 00:36:02,598
team, but also allows for seamless update

548
00:36:02,634 --> 00:36:05,746
without affecting the end users. Second,

549
00:36:05,848 --> 00:36:09,906
our backend infrastructure is flexible, explicitly engineered for

550
00:36:09,928 --> 00:36:13,986
scalability to meet the demands of a growing user base without

551
00:36:14,088 --> 00:36:18,098
sacrificing performance. And finally, our bluegreen

552
00:36:18,114 --> 00:36:21,474
development strategy that measures zero downtime

553
00:36:21,522 --> 00:36:25,174
during software updates, giving our users a

554
00:36:25,212 --> 00:36:27,640
seamless and reliable experience.

555
00:36:28,490 --> 00:36:32,402
Collectively, these pillars establish technology environment

556
00:36:32,546 --> 00:36:36,562
that is both state of the art and extraordinary

557
00:36:36,626 --> 00:36:37,510
reliable.

558
00:36:39,450 --> 00:36:41,740
Thank you for your attention and see you next time.

