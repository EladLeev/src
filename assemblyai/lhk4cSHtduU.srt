1
00:00:20,330 --> 00:00:24,142
So let us start rust code prototyping using

2
00:00:24,196 --> 00:00:28,210
XML or what I shortly name as rust. XmL proto

3
00:00:28,370 --> 00:00:31,942
is inspired by Google protocol buffers. I made this tool

4
00:00:31,996 --> 00:00:35,734
to generate rust code easily from XML data.

5
00:00:35,932 --> 00:00:39,778
I started this project few months after I learned about Rust,

6
00:00:39,954 --> 00:00:43,640
and this I've done to explore more about the language itself.

7
00:00:46,570 --> 00:00:50,218
So first of all, what is a protocol buffer?

8
00:00:50,354 --> 00:00:53,838
So a protocol buffer is an open source, cross platform

9
00:00:53,924 --> 00:00:57,966
project that is used to serialize structured data that

10
00:00:57,988 --> 00:01:01,786
can be transmitted or stored in files. Protobuffs,

11
00:01:01,818 --> 00:01:05,406
however, are much faster than XML and Json.

12
00:01:05,598 --> 00:01:08,882
You can see from the left image an example of how

13
00:01:08,936 --> 00:01:12,306
protobuff is defined. So in this definition we

14
00:01:12,328 --> 00:01:16,260
have person as our object with members name

15
00:01:16,870 --> 00:01:20,982
having string data type id with int 32

16
00:01:21,036 --> 00:01:24,600
data type, and email with string data type.

17
00:01:24,970 --> 00:01:29,100
On the right side we can see how it can be used in the code,

18
00:01:29,470 --> 00:01:33,098
so it builds the person name

19
00:01:33,184 --> 00:01:37,354
John Doe with values 1234

20
00:01:37,392 --> 00:01:41,194
for id, jando for name email

21
00:01:41,312 --> 00:01:44,974
is jdo@xml.com and

22
00:01:45,012 --> 00:01:48,382
then for protocol it used

23
00:01:48,436 --> 00:01:52,110
the function build to generate the structure for

24
00:01:52,180 --> 00:01:56,046
this object John and then afterwards it writes

25
00:01:56,078 --> 00:01:58,610
the object into a file output stream.

26
00:01:59,990 --> 00:02:03,666
In our project, XML structure or

27
00:02:03,688 --> 00:02:06,440
format is used for the prototype instead.

28
00:02:09,290 --> 00:02:12,962
Now RustxmL Proto's main objective

29
00:02:13,026 --> 00:02:16,434
is to create a tool or library that can auto generate

30
00:02:16,482 --> 00:02:19,158
rust code from struct traits,

31
00:02:19,254 --> 00:02:23,034
enum, and other object definitions by modeling them through

32
00:02:23,072 --> 00:02:26,938
XML. There are other auto generating tools for code

33
00:02:27,024 --> 00:02:30,586
that I've encountered, starting from my previous company that I joined

34
00:02:30,698 --> 00:02:34,510
until the current company, but I haven't seen anyone

35
00:02:34,580 --> 00:02:38,046
yet that usages rust language for it and for the

36
00:02:38,068 --> 00:02:40,320
purpose of generating rust code.

37
00:02:42,470 --> 00:02:45,794
So here's a preview or example of how

38
00:02:45,912 --> 00:02:49,010
the XML format is defined for a ROS object.

39
00:02:49,080 --> 00:02:52,734
In my project I will describe the XmL elements

40
00:02:52,862 --> 00:02:57,110
tag names, attribute names, and attribute values

41
00:02:58,170 --> 00:03:01,814
in the later slides. And here

42
00:03:01,852 --> 00:03:05,606
is how to use the Raz XML proto object in a

43
00:03:05,628 --> 00:03:09,418
module. You only have to use import proto macro function

44
00:03:09,504 --> 00:03:13,206
with the object name as a parameter. So we have import underscore

45
00:03:13,238 --> 00:03:16,620
proto with value fubar as our object name.

46
00:03:17,470 --> 00:03:21,066
Now I am going to describe the main or major XML

47
00:03:21,098 --> 00:03:24,826
elements for our object definitions. We have the root

48
00:03:24,858 --> 00:03:29,454
element that needs to be defined as the

49
00:03:29,492 --> 00:03:32,946
prototype. This is ultimately required so as

50
00:03:32,968 --> 00:03:38,158
to set the object name of our structure.

51
00:03:38,334 --> 00:03:42,260
Without this element, the XML data is invalid itself.

52
00:03:42,790 --> 00:03:46,386
Next we have prox prox. I shortly

53
00:03:46,418 --> 00:03:49,938
name it after the procedural macros.

54
00:03:50,114 --> 00:03:53,542
It is literally used to define the procedural macros and

55
00:03:53,596 --> 00:03:57,080
custom macros. Next we have members

56
00:03:57,470 --> 00:04:01,206
tag name members. Like any other object or structured

57
00:04:01,238 --> 00:04:04,666
data, we need member variables. So this we also

58
00:04:04,688 --> 00:04:08,940
have to define through members element. Next we have

59
00:04:09,890 --> 00:04:14,014
includes includes. With this element we can

60
00:04:14,052 --> 00:04:17,966
use or import libraries from external or within the

61
00:04:17,988 --> 00:04:21,402
module. And lastly we have functions

62
00:04:21,546 --> 00:04:25,790
apart from setters, getters and constructors

63
00:04:25,950 --> 00:04:29,954
which are already automatically generated after we run

64
00:04:29,992 --> 00:04:33,140
the rust XML tool.

65
00:04:33,590 --> 00:04:37,080
We can also declare other functions that we intend to use.

66
00:04:37,450 --> 00:04:41,094
If you want to add another function

67
00:04:41,212 --> 00:04:45,000
name, integrate with Fubar or

68
00:04:46,170 --> 00:04:47,400
whatever you want.

69
00:04:49,150 --> 00:04:52,966
Next, let's discuss the attributes

70
00:04:53,078 --> 00:04:56,570
of prototype element.

71
00:04:57,070 --> 00:05:00,470
So in our prototype element we have the attributes name,

72
00:05:00,640 --> 00:05:04,046
which is the object name of our

73
00:05:04,068 --> 00:05:07,902
prototype. This will be also used to name

74
00:05:07,956 --> 00:05:11,802
the module itself. So if you have Fubar,

75
00:05:11,866 --> 00:05:15,770
then our module will name as module

76
00:05:15,930 --> 00:05:19,090
rs rs, our extension file.

77
00:05:19,510 --> 00:05:22,962
Next attribute is class. It defines the

78
00:05:23,016 --> 00:05:26,678
type of our object. So in class

79
00:05:26,764 --> 00:05:29,974
we can define that our object can

80
00:05:30,012 --> 00:05:34,930
be struct enum or trait visibility.

81
00:05:35,090 --> 00:05:39,034
Visibility describes the visibility of our object.

82
00:05:39,232 --> 00:05:41,420
So we can have mod,

83
00:05:42,190 --> 00:05:46,506
which means that our object will

84
00:05:46,528 --> 00:05:49,642
be only allowed to use within the module or

85
00:05:49,696 --> 00:05:53,502
created if you want to use only the

86
00:05:53,556 --> 00:05:56,270
object inside our crate,

87
00:05:56,610 --> 00:06:00,426
external if you want it to be used externally and global,

88
00:06:00,618 --> 00:06:04,002
globally and private, the same as mod

89
00:06:04,136 --> 00:06:07,906
within the module itself. Next we'll discuss the

90
00:06:08,008 --> 00:06:12,130
child elements of includes. So we have includes.

91
00:06:13,030 --> 00:06:16,790
We have these child elements

92
00:06:17,690 --> 00:06:21,400
as the following within will

93
00:06:22,410 --> 00:06:25,762
define that the import module

94
00:06:25,826 --> 00:06:30,266
imported modules comes from within our

95
00:06:30,448 --> 00:06:34,006
crate. Extern describes

96
00:06:34,038 --> 00:06:37,626
that the module we imported is from an

97
00:06:37,648 --> 00:06:40,380
external created. So here is an example.

98
00:06:40,930 --> 00:06:44,890
We have includes tag element,

99
00:06:44,970 --> 00:06:49,486
include and then within that includes you can have a

100
00:06:49,508 --> 00:06:53,362
lot of multiple instances of

101
00:06:53,416 --> 00:06:56,766
within or external. So within FUBAR,

102
00:06:56,798 --> 00:07:00,994
within the module is full bar within and

103
00:07:01,032 --> 00:07:04,254
then for external we have the module fuBAR

104
00:07:04,302 --> 00:07:08,680
external. Now we have to discuss

105
00:07:09,050 --> 00:07:12,070
the attributes of the child elements.

106
00:07:12,410 --> 00:07:15,974
So within or extern we

107
00:07:16,012 --> 00:07:19,402
can define the scope if

108
00:07:19,456 --> 00:07:22,646
defined as all. So all objects in the imported

109
00:07:22,678 --> 00:07:26,058
module can be used independently. However,

110
00:07:26,144 --> 00:07:29,466
if you want to specify which objects you

111
00:07:29,488 --> 00:07:33,022
want to use from the module, you can use objects with

112
00:07:33,076 --> 00:07:37,294
a set of values like object one and

113
00:07:37,332 --> 00:07:41,440
object two. Now let's go to

114
00:07:42,550 --> 00:07:46,034
members and functions. So for members and

115
00:07:46,072 --> 00:07:48,530
functions you have the child elements.

116
00:07:49,030 --> 00:07:52,610
The tag name of the child element within the member can be

117
00:07:52,680 --> 00:07:56,006
any string that referred to a data type.

118
00:07:56,188 --> 00:07:59,942
For this example you have string data type for

119
00:07:59,996 --> 00:08:03,830
object name item. Then you have

120
00:08:03,900 --> 00:08:07,914
u 32 as our data type for object name

121
00:08:07,952 --> 00:08:11,850
pride. So another attribute

122
00:08:12,270 --> 00:08:15,850
or attribute associated with members

123
00:08:15,920 --> 00:08:20,330
and functions is we have visibility

124
00:08:21,250 --> 00:08:24,618
like other visibility values,

125
00:08:24,714 --> 00:08:28,126
we have mod within the mod

126
00:08:28,228 --> 00:08:31,342
created if you want only to use this one

127
00:08:31,396 --> 00:08:35,406
inside the created external if you want to access it externally,

128
00:08:35,598 --> 00:08:38,834
global, globally and private. The same as

129
00:08:38,872 --> 00:08:42,382
mod within the module itself. In functions

130
00:08:42,446 --> 00:08:46,082
there is a sub code that can be defined for parameters.

131
00:08:46,146 --> 00:08:49,766
So we all know that functions or methods have the

132
00:08:49,788 --> 00:08:53,398
parameters or arguments that will be passed from another

133
00:08:53,484 --> 00:08:58,250
instance. So here we are parameters.

134
00:08:58,910 --> 00:09:02,060
The child element of a parameter is

135
00:09:03,390 --> 00:09:07,306
any string that refers to data type. So here

136
00:09:07,408 --> 00:09:10,640
like functions or like members,

137
00:09:11,170 --> 00:09:14,430
we can define the parameters with string

138
00:09:14,930 --> 00:09:19,262
data type u 32 for this example and

139
00:09:19,316 --> 00:09:21,726
any string that refers to data type.

140
00:09:21,908 --> 00:09:25,810
Also we have child attribute name.

141
00:09:25,960 --> 00:09:29,666
This only refers to the name of our argument or

142
00:09:29,688 --> 00:09:31,620
members or parameters actually.

143
00:09:34,070 --> 00:09:38,946
Next slide we have xml

144
00:09:38,978 --> 00:09:41,510
elements for our macros.

145
00:09:42,570 --> 00:09:48,474
There are currently three use

146
00:09:48,672 --> 00:09:52,458
xml elements. For macros we have first

147
00:09:52,544 --> 00:09:56,326
derive, so it defines new inputs

148
00:09:56,358 --> 00:09:59,530
for the derived attribute serdi.

149
00:10:00,050 --> 00:10:04,106
If you are familiar with serialize and deserialize, you can use Serda

150
00:10:04,138 --> 00:10:08,206
to generate implementations of these traits and

151
00:10:08,228 --> 00:10:13,022
then custom. If you have created customized

152
00:10:13,086 --> 00:10:16,834
macros or other macros other than derive and serde, you can

153
00:10:17,032 --> 00:10:20,846
define them under custom XML

154
00:10:20,878 --> 00:10:24,194
element. In procedural macros you can also

155
00:10:24,232 --> 00:10:27,654
indicate a set of traits. So if you want

156
00:10:27,692 --> 00:10:30,934
to use a lot of values inside,

157
00:10:31,052 --> 00:10:34,614
for example derive, you have to define it

158
00:10:34,812 --> 00:10:37,240
by using the attribute set.

159
00:10:38,430 --> 00:10:41,340
Now for our demo code,

160
00:10:42,670 --> 00:10:46,758
here's an example for the XML

161
00:10:46,934 --> 00:10:50,182
prototype I created for

162
00:10:50,256 --> 00:10:54,014
the demo code. We name

163
00:10:54,052 --> 00:10:57,790
it as test Proto XML. Since our object

164
00:10:57,860 --> 00:11:02,474
name is named as test

165
00:11:02,532 --> 00:11:05,794
proto. So here we have prototype as

166
00:11:05,832 --> 00:11:09,970
our root element. Without this you cannot generate

167
00:11:11,190 --> 00:11:14,606
the rust code. Then we have the name attribute

168
00:11:14,718 --> 00:11:18,162
test proto class. So our object type

169
00:11:18,216 --> 00:11:21,186
is Chuck and then the visibility.

170
00:11:21,378 --> 00:11:25,110
This object can only be accessed inside

171
00:11:25,180 --> 00:11:28,970
the crate. After that prototype tag element

172
00:11:29,870 --> 00:11:34,054
we can see the includes. So this imports any module

173
00:11:34,102 --> 00:11:38,060
you want, any module that we want to use inside

174
00:11:39,070 --> 00:11:43,562
our project. So for example we have here external

175
00:11:43,706 --> 00:11:46,830
external name using serde.

176
00:11:47,410 --> 00:11:50,954
So we are using Serde as our module.

177
00:11:51,082 --> 00:11:55,154
Then with object specified as

178
00:11:55,272 --> 00:11:57,966
deserialize and serialize.

179
00:11:58,078 --> 00:12:01,742
Okay, next after includes

180
00:12:01,886 --> 00:12:06,434
we can also define prox I define here prox procedural

181
00:12:06,482 --> 00:12:09,880
macros using derive as

182
00:12:10,570 --> 00:12:13,800
our XmL element and then

183
00:12:14,330 --> 00:12:18,038
inside derive we can define a lot of traits.

184
00:12:18,134 --> 00:12:20,518
For example debug, serialize,

185
00:12:20,614 --> 00:12:24,998
deserialize. Okay lastly

186
00:12:25,094 --> 00:12:29,340
we have members, so we have to

187
00:12:29,870 --> 00:12:32,250
set our members for object struct.

188
00:12:33,170 --> 00:12:37,280
So in our example or in our project we have

189
00:12:37,970 --> 00:12:42,110
string data type for object member

190
00:12:42,550 --> 00:12:46,178
name with visibility external so this can

191
00:12:46,184 --> 00:12:50,046
be accessed externally. String name string

192
00:12:50,078 --> 00:12:53,442
data type for object current for member current

193
00:12:53,496 --> 00:12:57,366
address with visibility crate so this member can only

194
00:12:57,388 --> 00:13:00,694
be accessed inside the crate. And lastly I

195
00:13:00,732 --> 00:13:04,440
32 data type for member id.

196
00:13:04,970 --> 00:13:08,426
So if you don't define the visibility of

197
00:13:08,448 --> 00:13:11,820
the member or any object for example here,

198
00:13:15,390 --> 00:13:19,514
it's not necessarily to

199
00:13:19,552 --> 00:13:23,422
have a visibility attribute. So if it's not defined then

200
00:13:23,556 --> 00:13:26,814
it's automatically within the module only.

201
00:13:27,012 --> 00:13:31,098
So to use our prototype

202
00:13:31,194 --> 00:13:36,002
test proto so it is as

203
00:13:36,056 --> 00:13:39,854
presented. So in main rs

204
00:13:39,902 --> 00:13:44,114
created the main module as main rs we

205
00:13:44,152 --> 00:13:48,550
have first the use proto macro import proto.

206
00:13:48,890 --> 00:13:52,326
You will use this so that we can import

207
00:13:52,428 --> 00:13:55,400
our proto object.

208
00:13:55,930 --> 00:13:59,530
After that we use the macro function import

209
00:13:59,600 --> 00:14:02,566
protocol and then our object name test proto.

210
00:14:02,758 --> 00:14:07,130
Then inside our function name we have print

211
00:14:07,630 --> 00:14:12,030
we print first that we run the demo for test proto

212
00:14:12,530 --> 00:14:16,730
and then we use the constructor

213
00:14:16,810 --> 00:14:20,366
of test proto. So here it is. Now we can

214
00:14:20,388 --> 00:14:24,338
use the generated code object

215
00:14:24,504 --> 00:14:28,542
proto with test proto double

216
00:14:28,606 --> 00:14:32,146
columns new and then you

217
00:14:32,168 --> 00:14:35,570
have our string number Joe Biden

218
00:14:37,530 --> 00:14:41,240
this is for a string name Joe Biden and then current address for

219
00:14:41,610 --> 00:14:45,382
our object is white house. Also string data type

220
00:14:45,516 --> 00:14:49,642
and then id member id is

221
00:14:49,696 --> 00:14:53,434
123-45-6789 so

222
00:14:53,632 --> 00:14:55,900
after that, yes,

223
00:14:56,350 --> 00:15:00,054
here's an example of how we

224
00:15:00,112 --> 00:15:04,746
test assert the values

225
00:15:04,778 --> 00:15:09,006
inside our object so we can use assert equal and

226
00:15:09,028 --> 00:15:12,486
then get the name of our object compared

227
00:15:12,538 --> 00:15:18,274
it to a string Joe Biden. So if

228
00:15:18,312 --> 00:15:21,854
it returns true then it passes,

229
00:15:21,902 --> 00:15:25,666
right? And then if it passes

230
00:15:25,778 --> 00:15:29,382
it will print our string test

231
00:15:29,436 --> 00:15:33,254
case prototype Joe Biden passed. So if

232
00:15:33,292 --> 00:15:36,550
it fails, then it will stop here and skip

233
00:15:37,870 --> 00:15:41,210
the remaining lines.

234
00:15:41,710 --> 00:15:44,890
Next we

235
00:15:45,040 --> 00:15:47,930
also assert equal.

236
00:15:48,430 --> 00:15:52,346
We compare our current address current address with

237
00:15:52,528 --> 00:15:56,126
vestring white House. So if it passes then it

238
00:15:56,148 --> 00:15:59,470
will print that test case two passes with

239
00:15:59,540 --> 00:16:02,400
protocol address as white House.

240
00:16:04,070 --> 00:16:07,682
If it fails, then it will stop here and

241
00:16:07,736 --> 00:16:10,290
skip the remaining lines.

242
00:16:11,030 --> 00:16:14,770
Then next we also compare the id

243
00:16:14,840 --> 00:16:20,070
of our object with a value 123-45-6789

244
00:16:20,220 --> 00:16:23,878
if it passes, then it will print the test case three pass

245
00:16:23,964 --> 00:16:27,762
with proto id 123-45-6789

246
00:16:27,836 --> 00:16:31,098
and if it fails then it will just stop here.

247
00:16:31,264 --> 00:16:35,626
Next, so we have the

248
00:16:35,648 --> 00:16:38,586
constructor, we use the constructor of the generated code.

249
00:16:38,768 --> 00:16:41,854
Next we will use the setters itself.

250
00:16:42,052 --> 00:16:45,726
We can use the setters and getters. I think we already use

251
00:16:45,748 --> 00:16:48,990
the getters setters.

252
00:16:49,330 --> 00:16:53,634
Let's say we change the name from Joe Biden to

253
00:16:53,752 --> 00:16:57,554
Donald Trump so we can use protocol set

254
00:16:57,592 --> 00:17:01,026
underscore name with string Donald Trump.

255
00:17:01,208 --> 00:17:05,294
After that we compare if the

256
00:17:05,432 --> 00:17:09,042
name is already changed with the string

257
00:17:09,106 --> 00:17:12,534
Donald Trump. If it passes, then it will print our

258
00:17:12,572 --> 00:17:15,974
test case for passed with name Donald Trump.

259
00:17:16,092 --> 00:17:19,322
If it fails, then it will stop here.

260
00:17:19,376 --> 00:17:23,082
Yeah, and next we

261
00:17:23,136 --> 00:17:26,460
change the current address of our

262
00:17:27,390 --> 00:17:30,750
object with the string Washington DC.

263
00:17:31,090 --> 00:17:35,022
So next, after that we compare again the

264
00:17:35,076 --> 00:17:39,690
current address of our object with a string Washington Dc

265
00:17:39,850 --> 00:17:44,190
if it passes, then it will print the test case value is passed.

266
00:17:45,970 --> 00:17:49,966
Next we try to change try to

267
00:17:49,988 --> 00:17:53,550
change the name. We try to change the current address. So lastly,

268
00:17:53,890 --> 00:17:57,586
we have to test if our setter

269
00:17:57,618 --> 00:18:01,174
for id also working fine. So we use

270
00:18:01,212 --> 00:18:04,550
the set underscore id to change

271
00:18:04,620 --> 00:18:11,100
the value from 1234-5678-9298-7654-321

272
00:18:11,470 --> 00:18:15,514
and after that we compare. We test

273
00:18:15,632 --> 00:18:19,018
if our id changes from

274
00:18:19,104 --> 00:18:23,326
123-45-6789 to 987-65-4321

275
00:18:23,428 --> 00:18:27,070
so if it passes, then it will print that

276
00:18:27,140 --> 00:18:30,318
test case six passed with proto id the

277
00:18:30,324 --> 00:18:34,320
new value. And if it fails, then it will just

278
00:18:34,690 --> 00:18:38,622
print fail for test assertion. I think

279
00:18:38,676 --> 00:18:42,030
that's it for my presentation.

280
00:18:42,610 --> 00:18:45,940
If you have any questions you can raise. Thank you.

