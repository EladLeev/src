1
00:01:45,690 --> 00:01:48,830
Hello everyone. Thank you so much for joining me today. Myself,

2
00:01:48,900 --> 00:01:52,282
Akshata Sawant and I'm super excited to be with you all at Desiccops.

3
00:01:52,426 --> 00:01:55,854
With that, let's get started. Today in this session were mainly going to learn about

4
00:01:55,892 --> 00:01:58,974
sustainable API management. With that,

5
00:01:59,012 --> 00:02:02,766
our safe harbor statement states that make your purchase and decision based on products which

6
00:02:02,788 --> 00:02:06,486
are available today, not on the forward looking one quick

7
00:02:06,508 --> 00:02:09,938
introduction about myself. So I'm currently working as a developer advocate

8
00:02:09,954 --> 00:02:13,862
at Mulesoft. I've been working on Mulesoft technology for over five years

9
00:02:13,916 --> 00:02:17,378
now and I have been a Mulesoft ambassadorist and also a global

10
00:02:17,394 --> 00:02:21,046
meetup leader. Apart from this, I've written a few technical blogs and

11
00:02:21,068 --> 00:02:24,278
I've been a global speaker. And I've recently published a book named

12
00:02:24,294 --> 00:02:28,262
as Newsop for Salesforce developers which is currently available on Amazon.

13
00:02:28,406 --> 00:02:32,010
You can also connect with me over LinkedIn and Twitter and yeah,

14
00:02:32,080 --> 00:02:35,614
that's it. I also love traveling and photography. So with that,

15
00:02:35,652 --> 00:02:39,134
let's get started. Today were mainly going to discuss about

16
00:02:39,172 --> 00:02:42,318
sustainable API management, the need for it, how we are going

17
00:02:42,324 --> 00:02:45,886
to achieve it, what are the use of capabilities, what is universal API

18
00:02:45,918 --> 00:02:49,330
managing? And we'll also see that along with a quick demo using

19
00:02:49,400 --> 00:02:52,738
different developer personas. So stay tuned. Were all

20
00:02:52,744 --> 00:02:56,834
aware that the use of APIs have increased exponentially. Almost all the organizations

21
00:02:56,882 --> 00:03:00,882
have been adopting APIs and just absolutely resulted into API proliferation

22
00:03:00,946 --> 00:03:04,546
or APIs falling across different ecosystems, different ecosystems

23
00:03:04,578 --> 00:03:08,274
and not only different ecosystem but different platform, different cloud, different environments

24
00:03:08,322 --> 00:03:11,714
and so on like that. So it's actually a good sign that the API,

25
00:03:11,762 --> 00:03:14,826
the use of APIs have increased. But at the same time we need to take

26
00:03:14,848 --> 00:03:18,106
into consideration the issues of the problems that have arising because of

27
00:03:18,128 --> 00:03:21,706
it. The first one would be like limited access and visibility across all

28
00:03:21,728 --> 00:03:24,926
these APIs. As we lack a centralized management ping. We are not

29
00:03:24,948 --> 00:03:28,846
able to manage these APIs. Were not having a full control or

30
00:03:28,868 --> 00:03:31,790
visibility or control basically over all the APIs.

31
00:03:32,210 --> 00:03:35,498
Inconsistency in managing this API is because we are not able

32
00:03:35,524 --> 00:03:39,506
to apply the government policies or security rules across all these APIs as

33
00:03:39,528 --> 00:03:42,900
they are present in silos. And suppose if there is a

34
00:03:43,350 --> 00:03:47,042
change or there is an error which is arising, so it gets difficult to manage

35
00:03:47,096 --> 00:03:50,674
whos APIs or it takes a longer time to debug

36
00:03:50,722 --> 00:03:53,650
or evaluate the APIs as they are present in silos.

37
00:03:53,810 --> 00:03:57,314
So what we are lacking basically here is a centralized management

38
00:03:57,362 --> 00:04:00,690
pain or a sustainable approach towards the management.

39
00:04:00,850 --> 00:04:03,754
Today in this session were mainly going to focus on that, like how do we

40
00:04:03,792 --> 00:04:07,034
achieve the sustainability. So for that we

41
00:04:07,072 --> 00:04:10,582
actually need a new method or a new approach in API management.

42
00:04:10,726 --> 00:04:14,174
And that's where I introduce you to the Universal API management platform.

43
00:04:14,372 --> 00:04:18,074
With universal API management platform, you can actually manage any API

44
00:04:18,122 --> 00:04:21,550
which is deployed or which is built on any system or which is

45
00:04:21,620 --> 00:04:24,834
like, suppose I can give you an easy example. You have mule API which is

46
00:04:24,872 --> 00:04:28,146
deployed on AWS, and you

47
00:04:28,168 --> 00:04:31,426
can also have Microsoft API which is deployed on

48
00:04:31,448 --> 00:04:35,410
some other Azure cloud, basically. So with all these two APIs,

49
00:04:35,990 --> 00:04:39,250
though, they're deployed in different environments or no matter which technology

50
00:04:39,320 --> 00:04:42,866
they're built using, you can still manage them using Universal API

51
00:04:42,898 --> 00:04:46,054
management platform on the endpoint platform. How cool is that?

52
00:04:46,092 --> 00:04:49,446
Right? So today in the session we'll actually see along with the demo as well,

53
00:04:49,468 --> 00:04:52,954
how do we manage it and how do we achieve sustainability. So with

54
00:04:52,992 --> 00:04:56,086
that, let's get ahead. So using universal

55
00:04:56,118 --> 00:04:59,450
API management, you can actually achieve sustainability across the entire

56
00:04:59,520 --> 00:05:02,794
API lifecycle. And it's not just

57
00:05:02,832 --> 00:05:06,046
a product which you're going to get or it's not just something like

58
00:05:06,148 --> 00:05:09,870
you're going to be applying for one particular developer or a particular road

59
00:05:09,940 --> 00:05:13,626
that's going to managing the API. So it's going to be spreading

60
00:05:13,658 --> 00:05:18,462
across the entire API lifecycle and it will be giving you a different approach

61
00:05:18,526 --> 00:05:22,206
towards API management right from the development case till it's deployed,

62
00:05:22,238 --> 00:05:26,002
till it's tested, and also for the management, applying security and everything

63
00:05:26,056 --> 00:05:29,602
of that. In this we have previously seen

64
00:05:29,736 --> 00:05:33,014
universal API management on any point platform. So before

65
00:05:33,052 --> 00:05:36,630
going to the universal API management and what are the different products

66
00:05:36,700 --> 00:05:40,030
we have or the capabilities we have to offer and how do we achieve

67
00:05:40,050 --> 00:05:43,900
sustainability? Before going that, we'll just see what is anypoint platform.

68
00:05:44,270 --> 00:05:47,834
So basically, anypoint platform is the world's number one integration tool.

69
00:05:47,872 --> 00:05:51,274
It's an iPass tool which gives you everything which you

70
00:05:51,312 --> 00:05:55,178
need or basically everything you need for the integration ecosystems.

71
00:05:55,274 --> 00:05:58,414
But you can say that there's a lot more to it than that. You can

72
00:05:58,452 --> 00:06:01,834
actually manage the entire API lifecycle. You have pre built assets,

73
00:06:01,882 --> 00:06:06,254
templates, accelerator which helps you to actually accelerate a speed of development,

74
00:06:06,382 --> 00:06:08,530
giving you a higher return on investments.

75
00:06:09,350 --> 00:06:13,554
And yeah, there are different capabilities, there are different connectors which are available.

76
00:06:13,752 --> 00:06:17,234
It actually gives you a full fledged package and everything to manage under

77
00:06:17,272 --> 00:06:20,642
one roof, one ecosystems. You can also manage APIs,

78
00:06:20,706 --> 00:06:24,166
you can have security, you can do monitoring, you can do everything that is

79
00:06:24,188 --> 00:06:28,134
needed for an API to be a full fledged and in professional way.

80
00:06:28,332 --> 00:06:31,674
So with that, were going to learn what

81
00:06:31,712 --> 00:06:34,966
do we have for universal API management and what do we mean by universal

82
00:06:34,998 --> 00:06:38,182
API management with these three developer personas.

83
00:06:38,246 --> 00:06:41,450
So basically we have Maxi here who's can API developer.

84
00:06:41,870 --> 00:06:45,066
We have Dan who's an API owner, and then we have Sarah who's an API

85
00:06:45,098 --> 00:06:49,018
product manager. So all of these three, they have a different goal to achieve.

86
00:06:49,114 --> 00:06:53,162
And we'll see how do we achieve these goals. Keeping sustainability

87
00:06:53,226 --> 00:06:56,378
on mind. And then yeah,

88
00:06:56,564 --> 00:06:59,746
moving ahead, we have the first one who's Maxi. She wants to build her

89
00:06:59,768 --> 00:07:03,122
new APIs from the scratch and her organization is insisting on using

90
00:07:03,176 --> 00:07:07,214
the design first approach and she wants to catalog her API.

91
00:07:07,262 --> 00:07:10,646
She wants to implement and test these APIs as

92
00:07:10,668 --> 00:07:15,138
well. And then she wants to deploy and monitor her API, her performances.

93
00:07:15,314 --> 00:07:19,142
So let us see, how do we help Maxi to achieve all of this using

94
00:07:19,276 --> 00:07:22,566
anypoint platform, universal API management, and also keeping

95
00:07:22,598 --> 00:07:26,522
sustainability on her mind. Firstly, she can design her API using the Anypoint design

96
00:07:26,576 --> 00:07:29,866
center using which she can design not only the rest APIs, but also the

97
00:07:29,888 --> 00:07:33,834
async APIs and she can design it using the Raml or OAS,

98
00:07:33,882 --> 00:07:37,566
whichever format she's comfortable with. She can

99
00:07:37,588 --> 00:07:41,326
also import any of the API which she has like the pre existing ones and

100
00:07:41,348 --> 00:07:45,386
then start designing. Apart from this, if she's completely new to API

101
00:07:45,418 --> 00:07:49,266
designing and she is not, were about how to go to any

102
00:07:49,288 --> 00:07:52,738
point design center can help her with a guided process which will be

103
00:07:52,824 --> 00:07:56,478
automatically designing APIs for her just based on our instructions.

104
00:07:56,654 --> 00:07:59,746
We'll see that in the demo as well. She can also use

105
00:07:59,768 --> 00:08:03,826
some pre built assets as a help if she wants some help designing the API

106
00:08:03,858 --> 00:08:07,474
or if she wants to fasten her development, she can use some pre existing assets

107
00:08:07,522 --> 00:08:10,934
as well. And if she wants to use any of her favorite,

108
00:08:10,982 --> 00:08:14,310
you can say a VI editor like visual studios,

109
00:08:14,470 --> 00:08:17,946
basically an editor. So she can connect the editor as well with the

110
00:08:17,968 --> 00:08:21,594
Anypoint studio and get her development done. Development of API done.

111
00:08:21,792 --> 00:08:25,574
Now once the development is done, she can also test this API

112
00:08:25,622 --> 00:08:29,182
as the endpoints in the mocking services which we have on anypoint platform.

113
00:08:29,316 --> 00:08:32,154
So that will kind of give her can assurance or a confidence.

114
00:08:32,202 --> 00:08:35,630
But you can say with the help of when it comes to API services,

115
00:08:35,700 --> 00:08:38,706
like how the API is going to be, how the response is going to look

116
00:08:38,728 --> 00:08:42,514
like and so on. After, once the API is done,

117
00:08:42,552 --> 00:08:46,206
I mean once she's done designing her API specifications, she can import this API

118
00:08:46,238 --> 00:08:49,602
into any point studio which is like the Mulesoft's native studio

119
00:08:49,666 --> 00:08:52,854
built on top of Eclipse platform. And she can

120
00:08:52,892 --> 00:08:56,486
actually start with the implementation, implementing the APIs in

121
00:08:56,508 --> 00:09:00,482
form of mule application wherein she can find different connectors

122
00:09:00,546 --> 00:09:03,818
which she, I mean, it's a no code platform, she doesn't have to write the

123
00:09:03,824 --> 00:09:07,642
code from the scratch. She'll be having the pre built connectors and everything to

124
00:09:07,696 --> 00:09:11,206
help her accelerate the process. So let's

125
00:09:11,238 --> 00:09:14,766
head over to anypoint platform and see how we can help Maxi to achieve her

126
00:09:14,788 --> 00:09:18,266
goal. Currently we are in anypoint platform, the Mulesoft unified

127
00:09:18,298 --> 00:09:21,694
solution for entire API management. So using this,

128
00:09:21,732 --> 00:09:25,274
Maxi can actually achieve her goals. She can design an entire API from the scratch,

129
00:09:25,322 --> 00:09:29,346
she can publish it, she can manage the APIs across different environments, and she

130
00:09:29,368 --> 00:09:32,738
can deploy her API on cloud. So let's get started with the

131
00:09:32,744 --> 00:09:36,242
first one which is designing her API. So using the design center,

132
00:09:36,296 --> 00:09:39,778
she can actually design her rest API or an asynchronous API.

133
00:09:39,954 --> 00:09:43,830
You can give some project name as she can design

134
00:09:43,900 --> 00:09:47,518
Raml or an OS. She can also have a guided approach

135
00:09:47,554 --> 00:09:50,890
which will help her throughout the process while creating an API.

136
00:09:51,390 --> 00:09:55,340
And then she can give her API name,

137
00:09:58,990 --> 00:10:02,746
she can select the protocols and the media type. And if you

138
00:10:02,768 --> 00:10:06,314
see towards the right hand side, the code has been developed. It's in Ramble,

139
00:10:06,362 --> 00:10:09,678
you can have it in OS or you can edit it in the

140
00:10:09,684 --> 00:10:13,806
ramble, you can download it, you can have it edited in your favorite code editor

141
00:10:13,838 --> 00:10:17,234
as well. And then she can have a base UrI if she

142
00:10:17,272 --> 00:10:21,522
wants. She can basically have everything just without

143
00:10:21,576 --> 00:10:25,218
writing any of the code, and it will be

144
00:10:25,224 --> 00:10:28,738
auto populated. So it could be like get orders.

145
00:10:28,834 --> 00:10:31,554
And if you can see the protocols methods,

146
00:10:31,682 --> 00:10:35,138
updating the get orders, post orders.

147
00:10:35,234 --> 00:10:38,406
And then once she's done developing her API, she can publish it

148
00:10:38,428 --> 00:10:41,866
to exchange. So exchange is basically the repository where

149
00:10:41,888 --> 00:10:44,314
we have the collection of assets and stuff,

150
00:10:44,512 --> 00:10:47,690
publishing to exchange. You can also have a version control where you can

151
00:10:47,760 --> 00:10:51,094
maintain the assets and the API version and the lifecycle

152
00:10:51,142 --> 00:10:55,354
development stage. So while it's publishing to exchange,

153
00:10:55,402 --> 00:10:58,894
let's have a look at the pre existing APIs and see how we can

154
00:10:58,932 --> 00:11:02,730
apply or how we can start maintaining or achieving sustainability

155
00:11:02,810 --> 00:11:05,390
right from the scratch when we are in the governing stage.

156
00:11:06,930 --> 00:11:10,494
So while we are in the design center, I already have a pre existing API

157
00:11:10,542 --> 00:11:13,794
on which I have applied the security schema and stuff, and I'm making sure

158
00:11:13,832 --> 00:11:17,346
that the API governance policies, the best practices has

159
00:11:17,368 --> 00:11:20,614
been applied. So I have already applied the rule set over here,

160
00:11:20,652 --> 00:11:23,878
a security rule set which states that for any point, security,

161
00:11:23,964 --> 00:11:27,414
best practice and also see in file. So it will ensure that all

162
00:11:27,452 --> 00:11:31,062
this thing, the validations and stuff are being taken care. The rule set,

163
00:11:31,116 --> 00:11:34,822
basically it will ensure that the validation practices, the security and the best practices

164
00:11:34,886 --> 00:11:38,166
are taken care. So if my APR, if I have a new developer

165
00:11:38,198 --> 00:11:41,382
who's trying to violate this validation sort of security best practices,

166
00:11:41,446 --> 00:11:44,526
if they're going to miss out something, my API will be giving me out an

167
00:11:44,548 --> 00:11:48,174
error. So in this case I'm actually ensuring that my security best

168
00:11:48,212 --> 00:11:51,866
practices, the validations and everything is applied. It's in the development stage

169
00:11:51,898 --> 00:11:55,994
and I'm not waiting for it till the end or I'm actually saving

170
00:11:56,052 --> 00:11:59,394
lot more iterations as well. So here

171
00:11:59,432 --> 00:12:02,718
you can see some endpoints, so I can actually try out the endpoints

172
00:12:02,734 --> 00:12:05,778
and see how it will look like what kind of response am I going to

173
00:12:05,784 --> 00:12:08,920
get using the endpoint, using the mocking services.

174
00:12:09,290 --> 00:12:12,706
So here you can see I got a validation error,

175
00:12:12,738 --> 00:12:16,114
a bad request because I had not entered the basic authentication.

176
00:12:16,242 --> 00:12:20,150
So let me give some username password and

177
00:12:20,220 --> 00:12:24,350
then send the API which will give me a proper response as I'm,

178
00:12:24,530 --> 00:12:27,738
it's not actually validating the credentials, but it's making sure that

179
00:12:27,824 --> 00:12:31,050
it's kind of mocking it or it's simulating the response and request.

180
00:12:31,550 --> 00:12:35,494
So yeah, that's the beauty of it. You're actually designing an API simulating

181
00:12:35,542 --> 00:12:38,686
it. You're mocking the API, the response and stuff at

182
00:12:38,708 --> 00:12:42,414
the designing case itself. Moving ahead, let's go ahead to

183
00:12:42,452 --> 00:12:46,242
exchange were we can see how we have the templates and how maxi can

184
00:12:46,296 --> 00:12:50,146
actually leverage the templates to speed up a development process.

185
00:12:50,328 --> 00:12:53,966
So in exchange we have large number of templates which are provided by mulesoft.

186
00:12:53,998 --> 00:12:57,666
It could be templates, example policies, different types of APIs and

187
00:12:57,688 --> 00:13:01,426
stuff. You can also use them as a case to speed up youll development

188
00:13:01,458 --> 00:13:04,566
if you don't want to build something from scratch. So let's go to one of

189
00:13:04,588 --> 00:13:08,326
the APIs, a rest APIs and see how everything is documented or

190
00:13:08,348 --> 00:13:11,558
cataloged at one single place. So I have all information

191
00:13:11,644 --> 00:13:15,290
about a particular endpoint just in documenting it. So this basically

192
00:13:15,360 --> 00:13:18,826
gives me all the information I need to know about an API. I may be

193
00:13:18,848 --> 00:13:22,134
a technical or a non technical person, but still I'm able to easily

194
00:13:22,182 --> 00:13:25,434
understand my API. It acts as my API repository

195
00:13:25,482 --> 00:13:29,118
or an API documentation and I have everything at one single place.

196
00:13:29,284 --> 00:13:32,766
You can also download it and share with external users, or you can give them

197
00:13:32,788 --> 00:13:36,466
access and they can also view it on exchange. So basically you're collaborating with

198
00:13:36,488 --> 00:13:40,542
different developers, different team members and bringing them all to view your APIs,

199
00:13:40,606 --> 00:13:44,206
to view your access assets at one place. So this is anypoint

200
00:13:44,238 --> 00:13:47,586
studio and you can actually design your new application using what you have

201
00:13:47,608 --> 00:13:50,646
built the API which you have built, you can import it, you can get your

202
00:13:50,668 --> 00:13:54,294
API scaffolded and design the application. You do not have to write

203
00:13:54,332 --> 00:13:58,162
the entire code from the scratch if you want to connect to different connectors,

204
00:13:58,226 --> 00:14:02,090
different end systems, basically. So you can just drag and drop any of the connector,

205
00:14:03,150 --> 00:14:06,646
whichever process you want to work with and you can configure the connector

206
00:14:06,678 --> 00:14:10,140
using the configuration details and you're good to go.

207
00:14:10,590 --> 00:14:14,006
So this is anypoint platform Mulesoft native studio

208
00:14:14,038 --> 00:14:17,406
which is built on top of eclipse and you can see how easily you

209
00:14:17,428 --> 00:14:20,734
can design or build youll mail application. All you need to do is

210
00:14:20,772 --> 00:14:23,726
you can import your AML and you can scaffold it. If you want to connect

211
00:14:23,748 --> 00:14:27,086
to different end system, you have different connectors which are available. There are

212
00:14:27,108 --> 00:14:30,674
a few here, but you can import a few more from exchange, like whichever end

213
00:14:30,712 --> 00:14:34,466
system you want to connect into. So suppose I want to connect to Salesforce and

214
00:14:34,488 --> 00:14:39,506
I want to need some batch info. I can just drag

215
00:14:39,538 --> 00:14:43,762
and drop the connector and I can configure it using my salesforce credentials

216
00:14:43,826 --> 00:14:47,110
and then I can test some connections and I'm good to go.

217
00:14:47,180 --> 00:14:50,678
I do not write the code for this from the scratch, the code will

218
00:14:50,684 --> 00:14:54,506
be written for me. So it's basically a no code tool. Youll can perform some

219
00:14:54,528 --> 00:14:57,850
complex logical transformation using database as well.

220
00:14:58,000 --> 00:15:01,254
And yeah, you can do a lot more with it without writing

221
00:15:01,302 --> 00:15:04,730
the entire code. You just have to focus on the integration part.

222
00:15:04,800 --> 00:15:07,646
So we have seen how Maxi was able to build her new APIs from the

223
00:15:07,668 --> 00:15:11,326
scratch. She was able to test her endpoints as well using the mocking services,

224
00:15:11,508 --> 00:15:14,714
and then she can build her new application using the endpoint

225
00:15:14,762 --> 00:15:18,686
studio and also publish her assets to exchange, or use the pre existing assets

226
00:15:18,718 --> 00:15:21,838
from exchange to speed up to development time. So we have Dan who's an API

227
00:15:21,854 --> 00:15:25,222
owner, and his main responsibility is to manage all these APIs, to apply

228
00:15:25,276 --> 00:15:28,898
security policies, best practices, to deploy proxies,

229
00:15:28,994 --> 00:15:33,266
to have monitor his application, monitor the performance, approve SLA

230
00:15:33,298 --> 00:15:36,454
contracts as leaders, and to ensure that all

231
00:15:36,492 --> 00:15:39,766
the governance policies, security policies are well in place.

232
00:15:39,948 --> 00:15:43,482
So let's see how we can help can to achieve all of this using

233
00:15:43,536 --> 00:15:46,890
the mules of anypoint platform using the universal API management.

234
00:15:47,550 --> 00:15:51,286
So firstly, can can manage all the APIs using the anypoint Flex

235
00:15:51,318 --> 00:15:55,306
gateway, which is like the fastest gateway. It's fastest

236
00:15:55,338 --> 00:15:58,666
because it's lightweight and it helps you to manage any application, whether it's

237
00:15:58,698 --> 00:16:02,414
non mule mule application non mule deployed anywhere across any

238
00:16:02,452 --> 00:16:06,402
server. So it's actually the combination of the latest technology

239
00:16:06,536 --> 00:16:10,130
combined with the speed. Apart from this, you can actually manage

240
00:16:10,200 --> 00:16:13,614
all the applications API services on the API manager.

241
00:16:13,742 --> 00:16:17,762
You can apply different policies, different security policies, different schemas,

242
00:16:17,906 --> 00:16:21,206
different governance rules. You can monitor the performance of

243
00:16:21,228 --> 00:16:24,886
API using a custom dashboard, or you can use pre

244
00:16:24,908 --> 00:16:28,902
existing dashboards. You can monitor the performance throughput using the

245
00:16:28,956 --> 00:16:32,266
interactive graphs. Apart from this, you can also have

246
00:16:32,288 --> 00:16:36,074
the API governance which makes sure that you're applying the proper rule sets and

247
00:16:36,112 --> 00:16:38,490
standards best practices to your APIs.

248
00:16:38,990 --> 00:16:42,566
So let's head over again to anypoint platform and see how we can help can

249
00:16:42,598 --> 00:16:45,802
to achieve sustainability and how we can achieve scope.

250
00:16:45,866 --> 00:16:49,018
So currently we are in API governance where we'll see how we apply standards

251
00:16:49,034 --> 00:16:52,682
and best practices to our APIs. We can create some new API profile

252
00:16:52,746 --> 00:16:56,494
and we'll make sure we're applying some security best practices or

253
00:16:56,532 --> 00:17:00,386
standards. I can give it any name like security best

254
00:17:00,488 --> 00:17:03,826
practices and then some description of what

255
00:17:03,848 --> 00:17:06,914
it's doing, and then I can apply some rule sets like any

256
00:17:06,952 --> 00:17:10,546
point best practices or whichever rule sets you want to apply basically to your API.

257
00:17:10,578 --> 00:17:14,246
So I'm selecting these two of them, the endpoint best practices and

258
00:17:14,268 --> 00:17:17,526
the security best practices. I can select some tag if I have

259
00:17:17,548 --> 00:17:21,242
applied, I have applied some securing tags to my APIs as well. I can select

260
00:17:21,296 --> 00:17:24,666
which API I want to apply the rule sets and it's giving me

261
00:17:24,688 --> 00:17:27,478
just one API after applying the filter.

262
00:17:27,654 --> 00:17:31,526
And if there is some error, if the API becomes non

263
00:17:31,558 --> 00:17:35,326
confirmed, it's going to send an email to basically the API publisher or

264
00:17:35,348 --> 00:17:38,670
API contact if there's any available going ahead.

265
00:17:38,740 --> 00:17:42,442
Yeah, I have created this profile, so it will ensure.

266
00:17:42,506 --> 00:17:45,280
So if you see the profile it's currently giving me,

267
00:17:46,290 --> 00:17:49,566
let's see what are the results that we are getting. So basically it's a non

268
00:17:49,598 --> 00:17:53,186
conformant. It has passed some of the, it is still evaluating on

269
00:17:53,208 --> 00:17:56,782
the best practices, but it has passed the authentication best practices.

270
00:17:56,926 --> 00:18:00,262
So if can API is conforming to your standard, it will be giving you

271
00:18:00,316 --> 00:18:02,550
green mark, which is like conformance.

272
00:18:03,530 --> 00:18:07,618
If it is not, like, if it is at risk, if it's not conforming

273
00:18:07,634 --> 00:18:10,774
to the best practices of the security standards, it will be giving you a red

274
00:18:10,812 --> 00:18:14,282
non conformant and an alert will be also sent to you.

275
00:18:14,336 --> 00:18:18,186
Yeah, so there is a few of the security rules that are not passed by

276
00:18:18,208 --> 00:18:21,946
my API, which we had seen previously. So that's how it is giving me a

277
00:18:21,968 --> 00:18:25,502
lot. So out of the two, one of them is like it's good,

278
00:18:25,636 --> 00:18:29,294
the other one is not. So if you previously, if you have

279
00:18:29,332 --> 00:18:32,346
used sonar cube, so you must be aware like how you used to apply coding

280
00:18:32,378 --> 00:18:35,950
best practices and standards and then used to get the bugs or severity

281
00:18:36,030 --> 00:18:39,038
issues as well. Severe, not severe, good. Similarly,

282
00:18:39,054 --> 00:18:43,154
you're applying this thing to API at the development stage, which is actually good because

283
00:18:43,192 --> 00:18:47,118
you're preventing further iterations. Let's go ahead to API manager

284
00:18:47,134 --> 00:18:50,386
and see how we can manage our API. API manager

285
00:18:50,418 --> 00:18:53,814
is actually the one place stop where you can actually manage all

286
00:18:53,852 --> 00:18:57,834
your APIs. So I already have an API instance which I've created over

287
00:18:57,872 --> 00:19:01,386
here for my API and I can

288
00:19:01,408 --> 00:19:05,190
apply some policies. Security policies, not necessarily security policies.

289
00:19:05,270 --> 00:19:08,810
I can have different kinds of policies like quality

290
00:19:08,880 --> 00:19:11,626
of service, compliance, transformation, troubleshooting.

291
00:19:11,738 --> 00:19:15,678
So inside I have already applied a basic authentication policy.

292
00:19:15,764 --> 00:19:19,422
I can have IP allow list, block list,

293
00:19:19,556 --> 00:19:23,262
JSON threat protection, JWT policy, call us

294
00:19:23,316 --> 00:19:26,802
and I can apply it to my API. You can see like already the stuff

295
00:19:26,856 --> 00:19:30,382
has been configured. You can see that already everything has been configured.

296
00:19:30,446 --> 00:19:33,886
You can select the algorithm you want to or JWT

297
00:19:33,918 --> 00:19:36,710
key, you can select all the claims and all and you can just apply.

298
00:19:36,780 --> 00:19:40,934
It's that simple to apply a policy to your API and it

299
00:19:40,972 --> 00:19:44,674
not necessarily be a security policy. You can apply some transformation

300
00:19:44,802 --> 00:19:48,614
or troubleshooting or message logging. You can apply some loggers to your

301
00:19:48,652 --> 00:19:51,958
APIs and you don't have to actually make any changes while it's

302
00:19:51,974 --> 00:19:55,402
in the development stage. You can add like whatever

303
00:19:55,456 --> 00:19:58,490
logs you want to be displayed, you can add them as well.

304
00:19:58,640 --> 00:20:01,814
So you can actually debug or troubleshoot your API

305
00:20:01,862 --> 00:20:03,310
while it's still deployed.

306
00:20:05,330 --> 00:20:08,686
You can have some alerts set for your API which will be sending you out

307
00:20:08,708 --> 00:20:11,818
email if there is anything which is going wrong behind the scenes,

308
00:20:11,914 --> 00:20:15,358
if the response time is like if it doesn't timed out, or if the policy

309
00:20:15,444 --> 00:20:18,706
has been violated. So you can create some alerts, you can

310
00:20:18,728 --> 00:20:22,366
group your APIs into different contracts, youll can have different SLA

311
00:20:22,398 --> 00:20:26,034
tiers like I have set one for incoming traffic which will be

312
00:20:26,072 --> 00:20:29,458
like you can create your own slatrs as well. And apart

313
00:20:29,474 --> 00:20:32,886
from this, let's go ahead and see more about the flex gateway which

314
00:20:32,908 --> 00:20:36,674
we discussed. Let's go to runtime manager. So runtime

315
00:20:36,722 --> 00:20:40,550
manager is actually the place where you're going to have all your APIs

316
00:20:40,890 --> 00:20:44,154
or deployed. Okay, I have deployed a few

317
00:20:44,192 --> 00:20:48,220
APIs, deployment fail, deployment. I have deployed basically on cloud app.

318
00:20:48,910 --> 00:20:52,666
So that's how it is. You can actually manage the state of your

319
00:20:52,688 --> 00:20:55,758
API over here, like where it is deployed, how is the state,

320
00:20:55,844 --> 00:20:59,726
the logs and everything associated to an application basically.

321
00:20:59,828 --> 00:21:02,960
So this is a new application which I have deployed on cloud API,

322
00:21:03,490 --> 00:21:06,994
going ahead to a flex gateway which I had mentioned previously, it is the

323
00:21:07,112 --> 00:21:10,846
fastest gateway. So I can actually create a gateway wherein

324
00:21:11,038 --> 00:21:14,706
I can select my os or environment where I want to host the

325
00:21:14,728 --> 00:21:17,894
gateway. And then there are the steps to

326
00:21:17,932 --> 00:21:21,718
deploy to install the gateway. The Flex gateways are also mentioned

327
00:21:21,884 --> 00:21:25,426
and then you can manage your API instance from using the Flex

328
00:21:25,458 --> 00:21:29,186
gateway. And it's fast, as I mentioned before, because it's

329
00:21:29,218 --> 00:21:32,840
lightweight and it's super easy to configure as well.

330
00:21:33,450 --> 00:21:36,934
Going ahead. So we have seen how we can help Dan to achieve his goal

331
00:21:37,062 --> 00:21:41,034
to apply security best practices standards across his APIs, to monitor his

332
00:21:41,072 --> 00:21:44,206
APIs, to apply some governance rule sets, and see if

333
00:21:44,228 --> 00:21:47,646
the API is conformant or not using the API governance. We have

334
00:21:47,668 --> 00:21:51,006
also seen Flexgateware using which we can manage our APIs and application

335
00:21:51,108 --> 00:21:54,734
on different platforms. So moving ahead, we have

336
00:21:54,772 --> 00:21:58,546
Sarah who is an API product manager. Her main responsibility is

337
00:21:58,568 --> 00:22:02,114
to group the APIs to make them adoptable, available across different

338
00:22:02,232 --> 00:22:05,726
communities, both internal and external. So how rare

339
00:22:05,758 --> 00:22:08,946
it is that you have an API which you have to reuse, built for some

340
00:22:08,968 --> 00:22:11,874
different developers and you're doing it without any hiccups?

341
00:22:12,002 --> 00:22:16,086
That's quite rare, right? So we need to ensure that

342
00:22:16,108 --> 00:22:19,686
we are making the APIs more reusable and more easy to reuse

343
00:22:19,718 --> 00:22:23,180
basically. So let's see how we can help Sara to do this.

344
00:22:24,910 --> 00:22:28,586
So Sarah can use API manager to make sure that

345
00:22:28,608 --> 00:22:32,438
we are grouping the APIs rightly, so that if any other new developer

346
00:22:32,534 --> 00:22:36,666
wants to use the API, he or she can basically use the API manager.

347
00:22:36,778 --> 00:22:40,174
You can also document the API, as we have seen previously in our first

348
00:22:40,212 --> 00:22:43,806
demo, using the anypoint exchange. Or you can make them available to

349
00:22:43,828 --> 00:22:47,778
the other developers community or your own internal community

350
00:22:47,944 --> 00:22:51,170
using the anypoint experience hub in the community manager.

351
00:22:51,670 --> 00:22:55,426
So let's head over to anypoint platform and see how we can engage our

352
00:22:55,448 --> 00:22:59,126
developers and different communities in order to adopt our API and increase the

353
00:22:59,148 --> 00:23:02,646
visibility of APIs. So currently we are in exchange and you can see there

354
00:23:02,668 --> 00:23:06,002
are several assets which are already available to provide by Mulesoft,

355
00:23:06,066 --> 00:23:10,034
different policies, temples and all. You can also go to your organization

356
00:23:10,162 --> 00:23:13,894
data and you can have youll organization API which you have already published

357
00:23:13,942 --> 00:23:17,706
as a repository. You can create your own repository as well. You can share it

358
00:23:17,728 --> 00:23:21,386
with the collaborators, both internal external. So I already have an

359
00:23:21,408 --> 00:23:25,002
API which I had deployed, which I have published to exchange,

360
00:23:25,146 --> 00:23:29,210
and I have also provided some documentation endpoints for this API.

361
00:23:29,370 --> 00:23:33,226
So this is how we are going to help Sarah to achieve sustainability

362
00:23:33,338 --> 00:23:37,026
and achieve her goals basically, which are like creating an

363
00:23:37,048 --> 00:23:40,318
API reusable and making sure that it's been adopted.

364
00:23:40,494 --> 00:23:44,146
So we have provided all the documentation resources for API at

365
00:23:44,168 --> 00:23:47,838
one place. We can also see, we can share this API with the collaborators,

366
00:23:47,934 --> 00:23:51,378
we can make it public as well while maintaining

367
00:23:51,394 --> 00:23:55,314
the versions. You can add the teams with whom you want to share the API

368
00:23:55,362 --> 00:23:58,454
with and you're actually making sure

369
00:23:58,492 --> 00:24:02,954
that both technical and non technical persons are able to use these APIs and

370
00:24:03,152 --> 00:24:06,074
they will be knowing basically what the API consists of.

371
00:24:06,192 --> 00:24:09,994
And you are already exposing your pre existing assets which makes them

372
00:24:10,032 --> 00:24:13,814
more reusable. So you can create more customized experiences

373
00:24:13,862 --> 00:24:18,202
in the endpoint experience hub, API experience Hub and the API community manager.

374
00:24:18,346 --> 00:24:22,334
So that will give you a more customized dashboard, a more fancy way

375
00:24:22,372 --> 00:24:25,534
basically of doing collaborating your

376
00:24:25,572 --> 00:24:28,578
API or making them available to the community. So you have seen how we have

377
00:24:28,584 --> 00:24:32,226
helped Sarah to achieve her goal, that is engaging a community, making her API more

378
00:24:32,248 --> 00:24:35,538
adaptable. So we have done this using the anypoint exchange, but you

379
00:24:35,544 --> 00:24:38,802
can do it similarly or with a more personalized customized experience using

380
00:24:38,856 --> 00:24:42,150
the API experience hub or the API community manager.

381
00:24:42,650 --> 00:24:46,226
So I've seen how universal API managing and endpoint platform helps

382
00:24:46,258 --> 00:24:50,300
us to achieve sustainability. We can have our APIs deployed across

383
00:24:51,790 --> 00:24:55,066
using any technology, at any platform, on any cloud, and we can

384
00:24:55,088 --> 00:24:58,214
still manage them under one roof. This has actually accelerated

385
00:24:58,262 --> 00:25:02,822
a speed of development and ensuring that we have higher return on investments.

386
00:25:02,966 --> 00:25:06,654
Apart from that, we also get modern architectures. We can actually deploy or

387
00:25:06,692 --> 00:25:09,774
use any technologies we want and we can still manage them under a single

388
00:25:09,812 --> 00:25:13,854
platform, on a single roof. And as

389
00:25:13,892 --> 00:25:17,026
we are managing all of these things under one roof, we are making sure that

390
00:25:17,048 --> 00:25:20,450
we're gaining consistency, security and reliability.

391
00:25:20,790 --> 00:25:24,274
And we are also able to exchange our APIs. We are able to

392
00:25:24,312 --> 00:25:27,666
collaborate them with the external users or with the community and

393
00:25:27,688 --> 00:25:30,886
thus making sure that the APIs are adoptable. And we are making sure

394
00:25:30,908 --> 00:25:33,800
that were creating a vibrant ecosystems with the help of that.

395
00:25:34,330 --> 00:25:38,038
So with that we have learned how we are able to sustainable, basically,

396
00:25:38,124 --> 00:25:41,894
what was the need for sustainability and how are we able to achieve sustainable

397
00:25:41,942 --> 00:25:45,254
API management using the universal API management.

398
00:25:45,302 --> 00:25:49,318
And on the endpoint platform we have seen the different offerings

399
00:25:49,494 --> 00:25:53,434
for the universal API management and also how to achieve sustainability.

400
00:25:53,562 --> 00:25:57,178
We have seen to the different developer personas and throughout the EPA

401
00:25:57,194 --> 00:26:00,240
lifecycle how we can achieve sustainability under one roof.

402
00:26:00,850 --> 00:26:04,106
So moving ahead, like what are the next steps? You can join Mulesoft

403
00:26:04,138 --> 00:26:07,614
community and you can participate in different initiatives. You can

404
00:26:07,732 --> 00:26:11,374
learn more from Mulesoft community. You can watch us live on Twitch every

405
00:26:11,412 --> 00:26:15,014
Thursdays and you can also join endpoint platform for free,

406
00:26:15,092 --> 00:26:18,486
the 30 days free trial account. You can try out all of

407
00:26:18,508 --> 00:26:22,086
these resources and the components capabilities which

408
00:26:22,108 --> 00:26:25,110
I've shown you today as well, for free for 30 days.

409
00:26:25,260 --> 00:26:29,106
And yeah, if you guys have any question, you can reach out to me directly

410
00:26:29,138 --> 00:26:32,118
or you can can this QR code. I would be happy to connect with you

411
00:26:32,124 --> 00:26:35,462
all over LinkedIn and Twitter as well. And with that,

412
00:26:35,516 --> 00:26:36,980
thank you so much for joining us today.

