1
00:00:17,530 --> 00:00:20,782
Hey all. Today we're going to be talking about progressive web apps and

2
00:00:20,836 --> 00:00:24,046
more specifically how you can build one from the comfort of your own

3
00:00:24,068 --> 00:00:27,670
home. Because. Because I guess that's the new norm, working from home,

4
00:00:27,740 --> 00:00:31,160
sheltering in place whatever it is going on with you.

5
00:00:31,850 --> 00:00:35,606
So my name is Michael Slotty and I am primarily a

6
00:00:35,628 --> 00:00:39,538
web developer with specifically a background, mostly in

7
00:00:39,564 --> 00:00:42,890
angular. But today's talk isn't an angular focus,

8
00:00:42,960 --> 00:00:46,618
so don't worry about that. I'm actually going to try to cover concepts that are

9
00:00:46,624 --> 00:00:50,430
framework agnostic and also include a little bit

10
00:00:50,500 --> 00:00:54,442
here and there about some framework specific solutions to the concepts

11
00:00:54,506 --> 00:00:57,822
and tooling that I discuss. I also happen

12
00:00:57,876 --> 00:01:02,090
to be a developer program engineer focusing on web infrastructure.

13
00:01:02,250 --> 00:01:06,114
So if you're interested in anything that I discuss today,

14
00:01:06,152 --> 00:01:09,314
I recommend checking out the website that I work on. It's called

15
00:01:09,352 --> 00:01:12,626
Web Dev, which the URL is just web

16
00:01:12,728 --> 00:01:16,094
dev. Besides my love for angular,

17
00:01:16,222 --> 00:01:19,686
I just love the web. I grew up on the web and I

18
00:01:19,708 --> 00:01:24,742
remember what things were like in the

19
00:01:24,796 --> 00:01:27,914
in our modern web environment. I love it.

20
00:01:27,952 --> 00:01:31,734
It's compelling, it's exciting, and we have such incredible

21
00:01:31,782 --> 00:01:35,180
tools to make amazing and compelling experiences for others.

22
00:01:35,870 --> 00:01:39,466
I will also mention

23
00:01:39,648 --> 00:01:43,134
that I do have a mass product. If you're not familiar with

24
00:01:43,172 --> 00:01:46,640
what makes means, mass stands for means as a service.

25
00:01:48,130 --> 00:01:51,966
Just making a hard pitch right there. It's memogram.com.

26
00:01:52,148 --> 00:01:55,460
Check it out, hopefully you like it. Let me know what you think.

27
00:01:56,150 --> 00:01:59,442
And I will finally mention that I behave made

28
00:01:59,496 --> 00:02:03,042
a lot of mistakes, and I mean a lot. So I'm hoping that

29
00:02:03,096 --> 00:02:07,074
maybe I can share some of the painful

30
00:02:07,122 --> 00:02:10,614
things that I had to learn along the way. That way you can avoid making

31
00:02:10,652 --> 00:02:13,960
the same mistakes as you build pwas yourself.

32
00:02:15,930 --> 00:02:19,578
So what exactly is a PWA or

33
00:02:19,584 --> 00:02:27,062
a progressive web app? And that's

34
00:02:27,126 --> 00:02:30,622
not right. I would say it's not

35
00:02:30,676 --> 00:02:34,346
this. What you're seeing here is definitely not what a progressive

36
00:02:34,378 --> 00:02:35,920
web app application should be.

37
00:02:37,010 --> 00:02:40,142
Pwas really are just web

38
00:02:40,196 --> 00:02:43,794
applications that have amazing experiences. And the

39
00:02:43,832 --> 00:02:47,266
reason for that is because they're fast. They're going to respond quickly,

40
00:02:47,368 --> 00:02:50,894
whether that's loading or responding to a user's

41
00:02:50,942 --> 00:02:54,594
interactions. They're integrated because they show up

42
00:02:54,632 --> 00:02:58,514
on a user's home screen and they have access to things like sensors

43
00:02:58,562 --> 00:03:02,626
and Bluetooth and can handle push notifications.

44
00:03:02,818 --> 00:03:06,294
They are reliable because they're going to load instantly and

45
00:03:06,332 --> 00:03:09,660
you're never going to see the dinosaur like we just saw.

46
00:03:10,110 --> 00:03:13,478
And finally, they are engaging.

47
00:03:13,574 --> 00:03:17,334
They feel like a natural app that deserves to be on a user's

48
00:03:17,382 --> 00:03:21,062
device. With these immersive user experiences.

49
00:03:21,206 --> 00:03:24,542
And if ever you doubt your ability to make a web

50
00:03:24,596 --> 00:03:28,238
application like that, I'm telling you that you can. And if you

51
00:03:28,244 --> 00:03:31,534
want, you can just repeat this simple mantra and that's you

52
00:03:31,572 --> 00:03:34,862
spit hot fire at Chappelle jokes.

53
00:03:34,926 --> 00:03:37,710
Anyway. So why pwas?

54
00:03:37,870 --> 00:03:41,294
Well, users spend most of their time in native applications

55
00:03:41,342 --> 00:03:44,610
rather than websites, and that's mostly because

56
00:03:44,680 --> 00:03:48,494
apps end up being more predictable. They're available on a user's home screen,

57
00:03:48,552 --> 00:03:52,694
so it's an easy one touch to get there. And push notifications allow

58
00:03:52,812 --> 00:03:56,326
applications to reengage users back into the app. So maybe

59
00:03:56,348 --> 00:03:59,366
if they haven't opened the app in a while, you can just send them a

60
00:03:59,388 --> 00:04:03,420
notification and that will get them back into using your app or your web experience.

61
00:04:04,510 --> 00:04:07,994
Another important thing is that space on the home

62
00:04:08,032 --> 00:04:10,598
screen is really, really valuable.

63
00:04:10,774 --> 00:04:14,106
Roughly 78% of the time a user spends

64
00:04:14,138 --> 00:04:18,414
on their phone is within their favorite three application. So what

65
00:04:18,452 --> 00:04:22,206
we're really asking for two, be an app on a user's home screen is

66
00:04:22,228 --> 00:04:25,618
a commitment for time and space. And this is especially

67
00:04:25,704 --> 00:04:29,250
important when an average user installs no new

68
00:04:29,320 --> 00:04:32,846
apps a month while they are more likely

69
00:04:32,878 --> 00:04:34,370
to visit websites.

70
00:04:36,250 --> 00:04:39,974
So PWAs are essentially web

71
00:04:40,012 --> 00:04:43,510
applications that provide a near native experience on mobile devices.

72
00:04:44,410 --> 00:04:48,226
I ended up liking this quote, which I think came from the Google Developers website.

73
00:04:48,348 --> 00:04:51,734
But building a high quality progressive web application has incredible

74
00:04:51,782 --> 00:04:55,462
benefits, making it easy to delight your users,

75
00:04:55,526 --> 00:04:59,322
grow engagement and increase conversions. When progressive web app app

76
00:04:59,376 --> 00:05:02,874
criteria are met, Chrome will actually prompt users to add the PWA

77
00:05:02,922 --> 00:05:06,602
to their own home screens. With tools like service workers,

78
00:05:06,666 --> 00:05:10,010
you can send less data on the initial page load

79
00:05:10,090 --> 00:05:13,810
and less data to complete transactions.

80
00:05:14,870 --> 00:05:17,870
With push notifications, you're able to increase engagement,

81
00:05:17,950 --> 00:05:21,902
allowing users to get updates as well as your ability

82
00:05:21,966 --> 00:05:24,500
to re engage users to use your application.

83
00:05:25,030 --> 00:05:28,822
And when users are typically averse to installing apps from the play

84
00:05:28,876 --> 00:05:33,266
or App Store, and rather would visit a website like Facebook,

85
00:05:33,458 --> 00:05:36,966
a lower barrier to entry for a website may be all you need to be

86
00:05:36,988 --> 00:05:41,002
a citizen on their home screen. Native apps start

87
00:05:41,056 --> 00:05:44,214
quickly, work in the background and they work offline.

88
00:05:44,342 --> 00:05:48,042
They have access to all different types of sensors and there's different

89
00:05:48,096 --> 00:05:52,006
versions for different platforms. Web applications

90
00:05:52,198 --> 00:05:56,062
have one incredible benefit though iOS, that they have great reach

91
00:05:56,116 --> 00:05:59,518
because it is one site for every platform and it can

92
00:05:59,524 --> 00:06:03,014
be safe and it can handle a lot of these same features that I discussed.

93
00:06:03,082 --> 00:06:06,754
But we need to introduce these into our web applications to make them feel more

94
00:06:06,792 --> 00:06:10,498
native. So this is an experience

95
00:06:10,584 --> 00:06:14,562
that I think really describes what a good

96
00:06:14,616 --> 00:06:18,760
PWA would look like and this is the Twitter web application.

97
00:06:19,770 --> 00:06:23,618
The application loads thus far. The UI looks almost identical

98
00:06:23,714 --> 00:06:27,254
to that you'd find on the

99
00:06:27,292 --> 00:06:31,306
Play store or App Store. It feels and looks native. I'm able

100
00:06:31,328 --> 00:06:35,114
to attach pictures, it opens up the camera right away, and I'm able to

101
00:06:35,232 --> 00:06:39,450
upload makes. And again, everything looks compelling.

102
00:06:39,950 --> 00:06:43,406
And it's a really good example of what the PWA is

103
00:06:43,428 --> 00:06:46,814
capable of. And a big thing like, one of the big

104
00:06:46,852 --> 00:06:50,654
things that moved me to use the PWA Twitter application rather

105
00:06:50,692 --> 00:06:54,574
than the native application is there was a period of time where I kept both

106
00:06:54,612 --> 00:06:58,434
apps installed on my phone. And when I decided to go

107
00:06:58,472 --> 00:07:02,114
to my installed apps, I looked at them side by side and I

108
00:07:02,152 --> 00:07:05,218
saw how much space they were taking. And in both situations I

109
00:07:05,224 --> 00:07:08,774
saw the number 200 and 5250. But I didn't look hard

110
00:07:08,812 --> 00:07:12,134
enough at it at first. I looked at it

111
00:07:12,172 --> 00:07:15,302
just maybe a few more seconds later, thinking, what's the difference?

112
00:07:15,436 --> 00:07:19,446
And I realized that the Twitter native application, while installed

113
00:07:19,478 --> 00:07:23,510
on my device, was taking roughly 250 megabytes

114
00:07:23,590 --> 00:07:27,114
of storage versus the progressive web app location, which was

115
00:07:27,152 --> 00:07:31,958
taking 250

116
00:07:31,984 --> 00:07:35,690
big of a difference in size. Without any real compromises

117
00:07:35,770 --> 00:07:39,966
in what the application was providing me. I moved to the web application

118
00:07:40,068 --> 00:07:41,760
and I have not looked back.

119
00:07:43,190 --> 00:07:46,354
So let's talk about a simple PWA that

120
00:07:46,392 --> 00:07:50,098
we have. And it's a fairly simple.

121
00:07:50,264 --> 00:07:53,634
It's designed to showcase popular movies. I have it running over

122
00:07:53,672 --> 00:07:57,086
here, and you can see that if you clicked into a movie,

123
00:07:57,118 --> 00:08:00,610
you can view some more information specific to the movie.

124
00:08:00,770 --> 00:08:04,086
And a lot of things it kind of looks like what you might expect a

125
00:08:04,108 --> 00:08:07,958
native Android app to look and feel like. And that's because

126
00:08:08,124 --> 00:08:11,542
it follows material design guidelines for the aesthetic.

127
00:08:11,606 --> 00:08:15,500
And there's a few things under the hood that I do to make the app

128
00:08:16,030 --> 00:08:19,114
behave more quickly and more like a progressive web application.

129
00:08:19,312 --> 00:08:21,974
And that's all fine and dandy,

130
00:08:22,102 --> 00:08:26,106
but does it really qualify as PWA?

131
00:08:26,218 --> 00:08:29,198
And that's a simple thing that we can check. We can test it against a

132
00:08:29,204 --> 00:08:32,286
tool called Lighthouse. And so here's a video of

133
00:08:32,308 --> 00:08:33,650
a lighthouse audit.

134
00:08:44,430 --> 00:08:48,380
Tests are running and

135
00:08:50,670 --> 00:08:54,250
nothing really there, at least not a positive score.

136
00:08:54,670 --> 00:08:58,638
So in a lot of cases, this application isn't really doing

137
00:08:58,724 --> 00:09:02,446
what we need. It's not getting any green check marks saying that, yes, this is

138
00:09:02,468 --> 00:09:05,870
a PWA. And why is that the case?

139
00:09:05,940 --> 00:09:09,486
Well, the first thing is the page isn't responding with the 200 status

140
00:09:09,518 --> 00:09:12,994
code. If we're building a PWA, we might

141
00:09:13,032 --> 00:09:16,514
want to use a service worker. That way this application will work even if

142
00:09:16,552 --> 00:09:19,726
we're disconnected from the Internet. Secondly,

143
00:09:19,838 --> 00:09:23,446
like I said, we'd want to use a service worker, but this web application as

144
00:09:23,468 --> 00:09:26,838
it is now, isn't even registering a service worker that will tell

145
00:09:26,924 --> 00:09:30,566
the browser what pages to load. So our service worker is really

146
00:09:30,588 --> 00:09:34,106
the technology that enables our apps to use many of

147
00:09:34,128 --> 00:09:38,122
the features of Pwas, one of them being

148
00:09:38,256 --> 00:09:41,526
offline. But also with the service worker

149
00:09:41,558 --> 00:09:44,986
we're able to actually add the web app onto a user's

150
00:09:45,018 --> 00:09:47,470
home screen and handle push notifications.

151
00:09:49,410 --> 00:09:53,022
Without the web app manifest file, it doesn't really meet

152
00:09:53,076 --> 00:09:56,826
the requirements for installability. So browsers can actually proactively

153
00:09:56,858 --> 00:10:00,434
prompt users to add their web application to the user's home

154
00:10:00,472 --> 00:10:03,410
screen, which leads to higher engagement.

155
00:10:04,470 --> 00:10:07,922
It's not configured for a custom splash screen, and this is one of those things

156
00:10:07,976 --> 00:10:11,826
that can be set in the web app manifest file. But when you

157
00:10:11,848 --> 00:10:15,558
open Twitter or Facebook on your phone, you end up seeing the Twitter or

158
00:10:15,564 --> 00:10:18,918
Facebook load two go for a quick second while the app loads in.

159
00:10:19,004 --> 00:10:22,794
We can do that with web applications as well. There's other things

160
00:10:22,832 --> 00:10:25,180
about setting the address bar, theme, color,

161
00:10:26,590 --> 00:10:30,678
ensuring that the website still works with JavaScript disabled.

162
00:10:30,774 --> 00:10:34,234
And that last one is actually really important in my opinion. I remember a time

163
00:10:34,272 --> 00:10:38,046
when I worked at a webshop and we were doing a lot

164
00:10:38,068 --> 00:10:41,326
of great work on a client's website, but no

165
00:10:41,348 --> 00:10:44,942
matter what we did, the client repeatedly told us

166
00:10:44,996 --> 00:10:48,414
that the site that we were working on and hosting for them

167
00:10:48,452 --> 00:10:52,180
would not work on their iPhone and legit. We had no idea why.

168
00:10:53,270 --> 00:10:56,306
I will say we were all Android users, so we didn't have that

169
00:10:56,328 --> 00:11:00,254
much experience with iOS. So my boss decided

170
00:11:00,302 --> 00:11:04,194
to do the most reasonable thing, and that was to bias all iPod

171
00:11:04,242 --> 00:11:07,522
touches. We all got iPod touches, not iPhones,

172
00:11:07,666 --> 00:11:10,998
but we weren't able to replicate the issue until one day we actually met with

173
00:11:11,004 --> 00:11:14,474
the client in person. We just looked at her phone to discover she

174
00:11:14,512 --> 00:11:17,786
kept JavaScript disabled on her phone,

175
00:11:17,968 --> 00:11:22,054
and we ended up spending a lot of time and effort trying to troubleshoot

176
00:11:22,102 --> 00:11:26,342
this when we didn't necessarily do anything wrong.

177
00:11:26,496 --> 00:11:30,234
The user didn't do anything wrong too. It's their decision to have JavaScript

178
00:11:30,282 --> 00:11:33,898
disabled, but we could have accounted

179
00:11:33,914 --> 00:11:37,850
for that and we could have provided some sort of experience if JavaScript was disabled,

180
00:11:37,930 --> 00:11:40,882
might not be the full experience, it might just be a warning that hey,

181
00:11:40,936 --> 00:11:44,754
JavaScript is disabled, you might not get the full experience that you expect.

182
00:11:44,952 --> 00:11:48,626
But because we didn't do anything to account for that, the user didn't know what

183
00:11:48,648 --> 00:11:52,098
was wrong with the site. And if you're doing this out in the wild,

184
00:11:52,194 --> 00:11:53,880
they might abandon your site.

185
00:11:55,210 --> 00:11:58,994
As it sounds right now, this application is not fast, it's not integrated,

186
00:11:59,042 --> 00:12:02,774
it's not reliable, and it's not engaging. So one

187
00:12:02,812 --> 00:12:06,058
thing I actually mentioned a little bit earlier was lighthouse. And for those of

188
00:12:06,064 --> 00:12:09,722
you who don't know what Lighthouse is, it's an open source and automated tool

189
00:12:09,776 --> 00:12:13,274
for improving the quality of web pages. You can run it against any

190
00:12:13,312 --> 00:12:17,002
web page, whether it's public or it requires authentication,

191
00:12:17,146 --> 00:12:20,510
and it has audits for things like performance, accessibility,

192
00:12:21,970 --> 00:12:25,454
and whether an application is a PWA and

193
00:12:25,492 --> 00:12:28,686
more. It definitely handles more than that. So you can

194
00:12:28,708 --> 00:12:32,290
actually run lighthouse straight from inside of the chrome devtools.

195
00:12:33,110 --> 00:12:36,546
You can run it as an extension that's available for Chrome and I believe there

196
00:12:36,568 --> 00:12:40,070
iOS a version of this extension available for firefox

197
00:12:40,970 --> 00:12:44,246
and it exists as a NPM module that you can

198
00:12:44,268 --> 00:12:47,798
install and use in your build processes or just as

199
00:12:47,804 --> 00:12:49,080
a command line tool.

200
00:12:55,950 --> 00:12:58,780
So let's make this application better.

201
00:12:59,230 --> 00:13:02,106
And one thing that we really want to do is we want to make sure

202
00:13:02,128 --> 00:13:05,770
that this application is reliable. When something's reliable,

203
00:13:05,850 --> 00:13:10,030
that means there really shouldn't be any surprises like

204
00:13:10,100 --> 00:13:14,046
a chromosaur or dinosaur popping in when a user iOS visiting your

205
00:13:14,068 --> 00:13:18,030
application. So when we talk about being reliable,

206
00:13:18,530 --> 00:13:21,794
when the user launches the web application from the home

207
00:13:21,832 --> 00:13:25,186
screen, we can use service workers to improve this

208
00:13:25,208 --> 00:13:27,934
and what the service worker is going to do. It's going two enable a PWA

209
00:13:27,982 --> 00:13:32,014
to load instantly, regardless of what the network state is. The service

210
00:13:32,072 --> 00:13:35,842
worker is written in javascript and it's kind of like a client side proxy

211
00:13:35,906 --> 00:13:39,766
and puts you in control of things like the cache and

212
00:13:39,788 --> 00:13:42,966
how to respond to resource requests, whether that's post get requests,

213
00:13:42,998 --> 00:13:46,986
makes, et cetera. And so by pre caching key assets and

214
00:13:47,008 --> 00:13:50,534
resources, we can eliminate the dependence of the network,

215
00:13:50,662 --> 00:13:53,766
ensuring that our applications are instantaneous and

216
00:13:53,808 --> 00:13:54,750
reliable.

217
00:13:57,650 --> 00:14:01,342
An example of how that could work is what we have here, and this

218
00:14:01,396 --> 00:14:05,534
is a cache first example, which is ideal if you're building an offline first

219
00:14:05,572 --> 00:14:09,182
experience. So this is how you'd handle a majority of requests. The page

220
00:14:09,236 --> 00:14:12,606
would make the request that would go through the service worker. The service worker

221
00:14:12,638 --> 00:14:16,430
would check the cache. If the resource doesn't exist in the cache,

222
00:14:16,510 --> 00:14:19,770
it'll then go to the network, make the network request,

223
00:14:19,870 --> 00:14:23,734
return it to the page, while also caching that

224
00:14:23,772 --> 00:14:27,154
network request for next time. And there's other strategies

225
00:14:27,202 --> 00:14:30,946
that you can use to implement with your service worker. But introducing

226
00:14:30,978 --> 00:14:34,140
a service worker to your site can be super, super easy.

227
00:14:34,590 --> 00:14:38,266
If you use angular, there's an angular schematic that

228
00:14:38,288 --> 00:14:41,882
you can install and apply to your project with just the command Ng add.

229
00:14:41,936 --> 00:14:45,386
At angular PWA, it ends up adding the

230
00:14:45,408 --> 00:14:48,842
angular service worker and configuring the build to include the service worker.

231
00:14:48,906 --> 00:14:52,234
And there's a lot of other things it'll do to get your application PWA

232
00:14:52,282 --> 00:14:55,278
compliant, but it's a really simple,

233
00:14:55,364 --> 00:14:58,900
easy to do step just from the get go for you.

234
00:14:59,830 --> 00:15:03,422
Another thing is if you use create react app to create react

235
00:15:03,486 --> 00:15:06,974
applications, since 2017, it has included

236
00:15:07,022 --> 00:15:10,146
service worker and PWA support from out the box.

237
00:15:10,248 --> 00:15:13,800
You haven't had to do any configuration or any work to have that.

238
00:15:14,250 --> 00:15:17,894
And finally, also since 2017, the view

239
00:15:17,932 --> 00:15:21,866
CLI has made it easy for you to enable service workers with

240
00:15:21,888 --> 00:15:25,510
the view create command. What you would want to do is manually

241
00:15:25,590 --> 00:15:28,874
select features, and then you would just

242
00:15:28,912 --> 00:15:32,346
enable PWA support and

243
00:15:32,528 --> 00:15:35,690
we can let the default settings for the rest of that stuff work.

244
00:15:35,840 --> 00:15:39,022
Now, customizing configuring your service

245
00:15:39,076 --> 00:15:42,158
worker is something you're going to need to do regardless of what framework you end

246
00:15:42,164 --> 00:15:45,306
up using. And while the platforms can guide

247
00:15:45,338 --> 00:15:49,218
you with what you should and shouldn't do, they can't know everything that you need.

248
00:15:49,384 --> 00:15:53,362
So taking view, for example, you can modify aspects of the service worker by

249
00:15:53,416 --> 00:15:57,042
configuring a PWA property of either your view

250
00:15:57,096 --> 00:16:00,642
config file or a view field inside of the package JSOn.

251
00:16:00,706 --> 00:16:04,662
But something cool with view and react is that the

252
00:16:04,796 --> 00:16:08,690
tooling used to generate the service worker is built on top of a library

253
00:16:08,770 --> 00:16:12,786
called workbox. So workbox

254
00:16:12,898 --> 00:16:16,070
is a library that bakes in a set of best practices

255
00:16:16,150 --> 00:16:20,090
and removes the boilerplate that every developer has to write. When working with service

256
00:16:20,160 --> 00:16:24,006
workers, and it's available on NPM, I invite

257
00:16:24,038 --> 00:16:27,806
you to go tinker with it and take a look at it. And on

258
00:16:27,828 --> 00:16:31,946
web dev we actually host an article about workbox. It's written

259
00:16:31,978 --> 00:16:35,790
by Jeff Posnik. He's part of the Google web

260
00:16:35,860 --> 00:16:39,294
developer relations team and specifically works on workbox

261
00:16:39,342 --> 00:16:43,218
itself. So you can find the article here. I definitely recommend

262
00:16:43,304 --> 00:16:46,558
giving it a read if you want to get a better insight into how workbox

263
00:16:46,654 --> 00:16:50,402
works. But with the service worker, our site

264
00:16:50,456 --> 00:16:53,906
is now definitely reliable. It's going to work offline because we're caching

265
00:16:53,938 --> 00:16:57,318
the key resources and assets in order for the site to work. And it's going

266
00:16:57,324 --> 00:17:00,514
to be a bit faster because with those assets and resources

267
00:17:00,562 --> 00:17:03,766
cached, it doesn't necessarily need to go to the network and wait for server

268
00:17:03,798 --> 00:17:07,034
responses in order to process the

269
00:17:07,072 --> 00:17:10,166
requests. So we're faster,

270
00:17:10,358 --> 00:17:13,846
but we want to be even faster than that. And that's important because the average

271
00:17:13,878 --> 00:17:17,146
load time of mobile sites is roughly 19 seconds on

272
00:17:17,168 --> 00:17:20,846
3g connections. 53% of users will abandon the site

273
00:17:20,868 --> 00:17:24,154
if it takes longer than 3 seconds to load. And once it's loaded,

274
00:17:24,202 --> 00:17:27,694
users expect these sites to be fast. They don't want janky

275
00:17:27,742 --> 00:17:31,250
scrolling or these slow to respond interfaces.

276
00:17:31,590 --> 00:17:35,042
People on average expect the site to load within like 2

277
00:17:35,096 --> 00:17:38,466
seconds, and almost half of people say that waiting on

278
00:17:38,488 --> 00:17:41,622
a page to load is what they dislike the most when

279
00:17:41,676 --> 00:17:44,150
browsing the web on their mobile devices.

280
00:17:44,890 --> 00:17:48,322
Luckily, with their service worker that we configured in the previous section,

281
00:17:48,386 --> 00:17:52,442
we've addressed a lot of these concerns. However, we can still optimize this

282
00:17:52,496 --> 00:17:56,650
initial load, parse, compute and rendering of our web applications,

283
00:17:57,470 --> 00:18:00,762
and that comes with this massive concern that we have.

284
00:18:00,816 --> 00:18:05,258
And that's the cost of the Javascript we're actually running now.

285
00:18:05,344 --> 00:18:09,354
I'm kind of stealing this slide from a friend and an amazing propagandist

286
00:18:09,402 --> 00:18:12,538
for the web who works on the Chrome team adiosmani.

287
00:18:12,714 --> 00:18:16,334
So keep in mind, if we want to be fast at

288
00:18:16,372 --> 00:18:19,134
JavaScript, it has to be downloaded, parsed,

289
00:18:19,182 --> 00:18:23,074
compiled and executed quickly. But not all

290
00:18:23,112 --> 00:18:27,054
bytes weigh the same. A 200 kb JavaScript file

291
00:18:27,102 --> 00:18:30,654
has a very different set of costs than a 200 kilobyte JPEG file,

292
00:18:30,702 --> 00:18:34,866
and this is outside of the raw network transmission times. For both sets of bytes

293
00:18:35,058 --> 00:18:38,214
they might take the same amount of time to download, but when it comes

294
00:18:38,252 --> 00:18:41,234
to processing, we're dealing with very different costs.

295
00:18:41,362 --> 00:18:44,294
A JPEG image may need to be decoded,

296
00:18:44,342 --> 00:18:48,314
rasterized and painted onto the screen, versus a JavaScript bundle that

297
00:18:48,352 --> 00:18:51,926
needs to be downloaded, parsed, compiled, executed. And there's

298
00:18:51,958 --> 00:18:55,680
actually a number of other steps that an engine needs to complete.

299
00:18:56,050 --> 00:18:59,774
Just be aware the costs are not equivalent, and by

300
00:18:59,812 --> 00:19:03,678
remembering that the JavaScript being sent down the wire has two be

301
00:19:03,684 --> 00:19:07,318
computed and rendered out for our spas for single page applications.

302
00:19:07,354 --> 00:19:10,866
Pwas progressive web app this takes time,

303
00:19:11,048 --> 00:19:14,722
but we can actually remove some of this burden off of a user and

304
00:19:14,776 --> 00:19:18,286
these devices and onto our server with server

305
00:19:18,318 --> 00:19:22,066
side rendering. Now luckily, all the major frameworks

306
00:19:22,098 --> 00:19:26,146
have pretty good support for SSR,

307
00:19:26,258 --> 00:19:29,794
and as a front end developer who doesn't want to write a full backend

308
00:19:29,842 --> 00:19:33,194
solution, some of these solutions are really really good.

309
00:19:33,312 --> 00:19:36,746
And there's non first party solutions that streamline the

310
00:19:36,768 --> 00:19:40,054
daunting task of configuring your own SSR environments.

311
00:19:40,182 --> 00:19:44,234
In the react world you have next js, and in

312
00:19:44,272 --> 00:19:48,030
view you have nuxtjs. But again,

313
00:19:48,100 --> 00:19:51,550
assuming you want to take a framework agnostic solution,

314
00:19:51,890 --> 00:19:55,466
you can actually use puppeteer. Puppeteer is a node

315
00:19:55,498 --> 00:19:58,994
library which provides a high level API to control chrome or

316
00:19:59,032 --> 00:20:01,806
chromium over the devtools protocol.

317
00:20:01,998 --> 00:20:05,698
Puppeteer runs headless by default, but can be configured to run

318
00:20:05,784 --> 00:20:09,774
full non headless chrome or chromium. And you can do a lot like generate

319
00:20:09,822 --> 00:20:13,358
screenshots of pages or pdfs. You can run tests in

320
00:20:13,384 --> 00:20:17,254
Chrome or crawl a single page application. And most

321
00:20:17,292 --> 00:20:21,346
importantly, you can use it to generate pre rendered content, I. E server

322
00:20:21,378 --> 00:20:25,270
side rendering lines, workbox. You can find puppeteer

323
00:20:25,350 --> 00:20:28,922
on NPM and this is actually a really simple

324
00:20:28,976 --> 00:20:32,774
implementation of creating a SSR

325
00:20:32,822 --> 00:20:36,510
server with puppeteer. So now

326
00:20:36,580 --> 00:20:40,126
we've built a site that is both reliable and fast,

327
00:20:40,308 --> 00:20:44,554
but we want our application to now be engaging and interactive.

328
00:20:44,682 --> 00:20:48,318
It should feel like a natural app on the device with

329
00:20:48,404 --> 00:20:52,174
an immersive user experience. And Pwas are installable.

330
00:20:52,222 --> 00:20:55,314
They live on a user's home screen without the need of an app or play

331
00:20:55,352 --> 00:20:59,026
store. They offer these immersive full screen experiences with

332
00:20:59,048 --> 00:21:02,374
the help of a web app manifest file, and can

333
00:21:02,412 --> 00:21:06,214
even reengage users with push notifications. Now the web

334
00:21:06,252 --> 00:21:09,606
app manifest allows you to control how your app appears and how

335
00:21:09,628 --> 00:21:13,278
it's launched. You can specify things from home screen icons,

336
00:21:13,394 --> 00:21:16,906
the page to load when an app is launched, and even whether or not

337
00:21:16,928 --> 00:21:20,374
to show that it's running inside of chrome.

338
00:21:20,502 --> 00:21:23,930
And it's actually really easy to do. There's a great

339
00:21:24,000 --> 00:21:27,574
site like Appmanifest, firebaseapp.com,

340
00:21:27,632 --> 00:21:30,734
and I'll actually do this right here for you guys to

341
00:21:30,772 --> 00:21:34,286
see. So here I can just type in the full name of the

342
00:21:34,308 --> 00:21:38,190
application, which I will just call popular movies,

343
00:21:38,690 --> 00:21:41,586
and we can put in the short name, which is the name that will end

344
00:21:41,608 --> 00:21:45,410
up appearing if the full name is too long to show up

345
00:21:45,560 --> 00:21:49,086
the theme color iOS kind of like that color you would see in the status

346
00:21:49,118 --> 00:21:52,706
bar or whatever. And as I'm setting the colors, you can

347
00:21:52,728 --> 00:21:56,326
kind of see the colors changing here, and the background color is the

348
00:21:56,348 --> 00:21:59,654
color of the splash screen. So when the user first opens up the application,

349
00:21:59,772 --> 00:22:02,970
the screen will turn into whatever color this is. I'll just choose

350
00:22:03,040 --> 00:22:06,374
plaque black display mode.

351
00:22:06,422 --> 00:22:10,726
We're going two use full screen mode orientation.

352
00:22:10,838 --> 00:22:14,814
We'll lock it into portrait, though you can allow for

353
00:22:14,852 --> 00:22:17,674
any orientation or lock into landscape.

354
00:22:17,802 --> 00:22:23,694
And finally, I'm just going to click on icon and

355
00:22:23,892 --> 00:22:26,560
I am going to choose this app icon here,

356
00:22:27,350 --> 00:22:30,660
open it, generate this up.

357
00:22:32,790 --> 00:22:36,222
Oh no. Well, this might have been broken

358
00:22:36,286 --> 00:22:39,606
recently, but I am sure this will be up

359
00:22:39,628 --> 00:22:44,806
and running again. I will probably have to pass this information on anyway,

360
00:22:44,908 --> 00:22:48,200
you can generate this nice and easy.

361
00:22:50,650 --> 00:22:53,946
Might be broken for the time being. Hopefully it'll be fixed by the time you

362
00:22:53,968 --> 00:22:57,766
guys are seeing this. Until then, check out this URL to tinker

363
00:22:57,798 --> 00:23:01,770
with the tool. It's a great resource, and once

364
00:23:01,840 --> 00:23:04,954
you have downloaded the zip and gotten the files you need,

365
00:23:05,072 --> 00:23:08,286
there's actually just really little work you need to do. The first thing you need

366
00:23:08,308 --> 00:23:12,122
to do is you need to move the images or the resize

367
00:23:12,186 --> 00:23:16,218
icons into whatever folder that you're storing

368
00:23:16,234 --> 00:23:19,918
your image assets in. And then finally you're just

369
00:23:19,924 --> 00:23:23,102
going to set these two lines here. The first one is manifest,

370
00:23:23,166 --> 00:23:26,286
which is going to point to the manifest JSOn generated, which is going to dictate

371
00:23:26,318 --> 00:23:29,922
how the app experience is going to be. And secondly, the theme color,

372
00:23:29,976 --> 00:23:34,082
which is the cooler of the status bar in chrome or the Chrome bar omnibox

373
00:23:34,146 --> 00:23:35,430
on mobile devices.

374
00:23:37,050 --> 00:23:40,422
With that in mind, with the manifest in place, our app can now

375
00:23:40,476 --> 00:23:44,218
live like a native application on a user's screen. The application

376
00:23:44,304 --> 00:23:47,610
iOS fast integrated, reliable and engaging.

377
00:23:48,510 --> 00:23:51,626
So here is the application with all these things in place,

378
00:23:51,728 --> 00:23:54,382
we're going to run the lighthouse test and we're going to see how this goes.

379
00:23:54,436 --> 00:23:57,726
So I'm going to cross my fingers by kind of know how this

380
00:23:57,748 --> 00:23:58,960
is going to work out.

381
00:24:16,080 --> 00:24:19,308
Well, there we

382
00:24:19,314 --> 00:24:22,800
behave it. That's a lot of green. The application

383
00:24:22,950 --> 00:24:27,168
is doing everything it needs to. We have that green Chuck mark

384
00:24:27,254 --> 00:24:30,576
knowing that our application is a PWA. If you guys want

385
00:24:30,598 --> 00:24:33,744
to check out the application, test it. Check the source code. You can find it

386
00:24:33,782 --> 00:24:37,910
at PWA, O-T-A dev.

387
00:24:38,600 --> 00:24:42,500
If you want to look over the slide deck, you can find it at building

388
00:24:42,570 --> 00:24:46,704
PWA camel casing. It's case sensitive,

389
00:24:46,752 --> 00:24:50,484
so be careful with that. And finally, if you can take anything away

390
00:24:50,522 --> 00:24:54,020
from this talk, I will say no matter how much fun

391
00:24:54,090 --> 00:24:57,788
or how much we all love the chromosome, or hopefully the chromosaur can go the

392
00:24:57,794 --> 00:25:01,208
way of the dinosaur which iOS makes extinct.

393
00:25:01,384 --> 00:25:04,024
Again, thank you. You can find me on the web, on Devto,

394
00:25:04,072 --> 00:25:07,736
LinkedIn, GitHub and Twitter with just my name, Michael Slotty

395
00:25:07,848 --> 00:25:09,240
and Adios.

