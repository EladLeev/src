1
00:00:28,050 --> 00:00:31,954
Hey everybody, my name is Melisha and I'm a developer advocate

2
00:00:32,002 --> 00:00:35,350
at iterative AI. So there I work

3
00:00:35,420 --> 00:00:39,314
on an open source tool called DVC, and it helps

4
00:00:39,362 --> 00:00:43,346
make machine learning projects a lot easier for machine

5
00:00:43,378 --> 00:00:46,918
learning engineers. So check that out if you're interested

6
00:00:47,004 --> 00:00:50,590
in it. But today I'm going to talk to you about

7
00:00:50,660 --> 00:00:54,142
using storybook to maintain your components in

8
00:00:54,196 --> 00:00:58,842
Redwood. So we're going to talk about storybook,

9
00:00:58,986 --> 00:01:03,418
redwood and component driven development today.

10
00:01:03,604 --> 00:01:07,106
If you have any questions about this talk, feel free to

11
00:01:07,128 --> 00:01:10,974
reach out to me on Twitter at flipped coding and I'll

12
00:01:11,022 --> 00:01:12,980
do my best to answer your questions.

13
00:01:14,230 --> 00:01:17,814
So let's just jump right on into it and talk

14
00:01:17,852 --> 00:01:21,622
about component driven development. This is

15
00:01:21,676 --> 00:01:25,014
something that we've all probably been doing in

16
00:01:25,052 --> 00:01:28,522
some way without giving it an official name.

17
00:01:28,656 --> 00:01:31,686
So if you work on the front end in react,

18
00:01:31,798 --> 00:01:35,162
angular view, svelte, whatever your

19
00:01:35,216 --> 00:01:39,254
framework is, you've probably touched some components driven

20
00:01:39,302 --> 00:01:42,670
development. And what this does,

21
00:01:42,740 --> 00:01:45,534
it helps you model your systems better.

22
00:01:45,652 --> 00:01:49,774
So instead of building each page in isolation where

23
00:01:49,812 --> 00:01:52,646
you have all of the components self contained,

24
00:01:52,698 --> 00:01:57,390
there, you're actually building these modular components

25
00:01:57,550 --> 00:02:01,282
that are very loosely coupled that

26
00:02:01,336 --> 00:02:05,018
can handle pretty much any state you throw

27
00:02:05,054 --> 00:02:09,154
at them. So instead of having all of these components

28
00:02:09,202 --> 00:02:13,078
scattered throughout all of these pages that do really

29
00:02:13,244 --> 00:02:16,914
similar stuff, and maybe just passing some props

30
00:02:16,962 --> 00:02:20,534
along would give that component the functionality

31
00:02:20,582 --> 00:02:23,802
that it needs, the styles that it needs, you can

32
00:02:23,856 --> 00:02:27,914
do that with component driven development. And what

33
00:02:27,952 --> 00:02:31,358
that helps you do is since you're building

34
00:02:31,444 --> 00:02:34,798
these really modular pieces of code,

35
00:02:34,964 --> 00:02:38,522
whenever you're working with your data, you don't

36
00:02:38,586 --> 00:02:41,870
have to worry as much about one

37
00:02:41,940 --> 00:02:45,742
particular page. So you have these components

38
00:02:45,806 --> 00:02:49,694
that accept different kinds of props. They already handle

39
00:02:49,742 --> 00:02:53,362
the different states that you need when your data comes

40
00:02:53,416 --> 00:02:57,362
in. So you can reuse all of those components

41
00:02:57,506 --> 00:03:00,246
with whatever data that you need.

42
00:03:00,348 --> 00:03:03,558
You're not locked into just, well,

43
00:03:03,724 --> 00:03:07,330
this is on the user dashboard reporting page,

44
00:03:07,500 --> 00:03:11,242
so I can only use this component because it's the only thing

45
00:03:11,296 --> 00:03:14,506
that handles this data. Instead,

46
00:03:14,688 --> 00:03:18,374
you have a components you can use on that reporting

47
00:03:18,422 --> 00:03:22,922
page and on the settings page and maybe somewhere

48
00:03:22,986 --> 00:03:26,458
else within your app. So one example that we're

49
00:03:26,474 --> 00:03:29,966
going to stick with pretty much the whole time during this talk

50
00:03:30,068 --> 00:03:33,314
is a button, because how many times have

51
00:03:33,352 --> 00:03:36,930
you had crazy things happen with buttons?

52
00:03:37,430 --> 00:03:41,140
So that is where storybook comes in.

53
00:03:41,510 --> 00:03:45,418
This lets you develop your components in isolation,

54
00:03:45,614 --> 00:03:48,614
which is actually pretty awesome,

55
00:03:48,732 --> 00:03:52,694
because what that means is when you come up with

56
00:03:52,732 --> 00:03:56,694
these new states that, let's say our button needs to

57
00:03:56,732 --> 00:04:00,442
have a primary state for when

58
00:04:00,576 --> 00:04:04,406
a user is just looking at a form or they're in a modal

59
00:04:04,438 --> 00:04:08,620
or whatever, and we have a secondary state for,

60
00:04:09,470 --> 00:04:12,446
I don't know, the buttons just in a different state.

61
00:04:12,548 --> 00:04:15,600
And then of course, we have some kind of dark mode button.

62
00:04:16,050 --> 00:04:19,950
You don't necessarily want to have to run your whole

63
00:04:20,020 --> 00:04:23,470
app, change data, call APIs,

64
00:04:23,910 --> 00:04:27,586
or even just go in and manually tweak the

65
00:04:27,608 --> 00:04:30,638
code. So when you're doing your local development,

66
00:04:30,734 --> 00:04:34,434
you put in those weird conditions to get the components to

67
00:04:34,472 --> 00:04:38,002
show how you want them to do. Well, with storybook,

68
00:04:38,066 --> 00:04:42,594
you don't have to do all of the spaghetti code locally.

69
00:04:42,722 --> 00:04:46,310
You can actually just look at your components with

70
00:04:46,380 --> 00:04:49,866
different props applied to them without

71
00:04:49,968 --> 00:04:53,978
having to touch your app at all. So if we have this button

72
00:04:54,064 --> 00:04:57,722
components file, we can develop and see how

73
00:04:57,776 --> 00:05:02,000
that works in absolute isolation from the app.

74
00:05:02,690 --> 00:05:06,800
And something else that storybook helps us do that really

75
00:05:07,410 --> 00:05:10,926
gets overlooked in, well,

76
00:05:11,028 --> 00:05:13,650
almost every part of software, unfortunately,

77
00:05:14,150 --> 00:05:18,018
documentation. You know, when you bring on somebody

78
00:05:18,104 --> 00:05:22,254
new to the team or you're working with components

79
00:05:22,302 --> 00:05:26,200
you haven't seen in a while, it might be hard to remember

80
00:05:27,370 --> 00:05:30,742
the names of the props, what values you can

81
00:05:30,796 --> 00:05:34,406
pass to the props, what that's actually supposed to do to

82
00:05:34,428 --> 00:05:38,234
the component itself, how that might interact with other

83
00:05:38,272 --> 00:05:42,266
things on the page. With storybook, you can

84
00:05:42,448 --> 00:05:46,570
document all of that. You can leave examples of,

85
00:05:46,720 --> 00:05:50,086
let's say, our button components. You can leave examples of it

86
00:05:50,128 --> 00:05:53,454
in different states, show the different props that

87
00:05:53,492 --> 00:05:57,226
you need to set for the different scenarios and data that you'll

88
00:05:57,258 --> 00:06:00,602
be getting. Storybook bundles,

89
00:06:00,666 --> 00:06:04,366
all of this together, you can look at the components

90
00:06:04,398 --> 00:06:07,970
in isolation, and you can document those

91
00:06:08,040 --> 00:06:11,762
components, I guess, in isolation too.

92
00:06:11,896 --> 00:06:15,560
So everything is really neatly put together.

93
00:06:17,530 --> 00:06:21,442
And this is one of the fun parts. When you're

94
00:06:21,506 --> 00:06:24,534
doing components driven development in the first place,

95
00:06:24,652 --> 00:06:27,710
it makes writing tests a lot easier.

96
00:06:27,890 --> 00:06:31,418
But when you're doing it with storybook, you're really

97
00:06:31,504 --> 00:06:36,058
focused on how your component should react with

98
00:06:36,144 --> 00:06:39,226
changes on the page. So again, if we

99
00:06:39,248 --> 00:06:42,782
have our button and we've just loaded in some data,

100
00:06:42,916 --> 00:06:46,560
maybe we need to change the state of that button to

101
00:06:46,930 --> 00:06:50,878
some kind of loading symbol that's a different color.

102
00:06:51,044 --> 00:06:53,826
And then after we have all of the data,

103
00:06:53,928 --> 00:06:58,050
we change it to something else. This is definitely

104
00:06:58,200 --> 00:07:01,522
some kind of functionality you would want to write tests for,

105
00:07:01,576 --> 00:07:04,914
right? So when you already have your

106
00:07:04,952 --> 00:07:08,402
component developed and set up in the way that storybook

107
00:07:08,466 --> 00:07:12,258
needs to run with it, writing your test gets a lot easier

108
00:07:12,354 --> 00:07:16,226
because you can actually test the components

109
00:07:16,258 --> 00:07:19,978
in isolation. You don't need to render the whole page,

110
00:07:20,144 --> 00:07:23,782
make up the fake data call the fake

111
00:07:23,846 --> 00:07:27,654
APIs, unless you know that's part of your test suite.

112
00:07:27,702 --> 00:07:31,518
But if you're just wanting to make sure your buttons are looking right,

113
00:07:31,684 --> 00:07:35,326
it makes it a whole lot easier. Or if you want to make sure that

114
00:07:35,428 --> 00:07:39,502
when data is loading into a certain component that

115
00:07:39,556 --> 00:07:43,018
it updates correctly. This is a great

116
00:07:43,124 --> 00:07:46,450
way to take advantage of storybook for testing.

117
00:07:47,830 --> 00:07:51,790
Now we're going to talk about how you actually use storybook.

118
00:07:51,950 --> 00:07:55,746
So we're going to look at it inside of the redwood framework,

119
00:07:55,858 --> 00:08:00,162
which is honestly just one of my personal favorite frameworks.

120
00:08:00,306 --> 00:08:03,362
And it's a full stack JavaScript framework,

121
00:08:03,506 --> 00:08:07,422
but you could also call it a full stack Jamstack

122
00:08:07,506 --> 00:08:10,922
framework. So I've heard some

123
00:08:10,976 --> 00:08:14,362
comparisons to next, but I think

124
00:08:14,416 --> 00:08:17,882
it's a little better. Maybe that might just

125
00:08:17,936 --> 00:08:21,786
be because I like how much it handles for you out

126
00:08:21,808 --> 00:08:25,106
of the box. So with Redwook,

127
00:08:25,238 --> 00:08:29,242
you have your react front end, you have a graphQl

128
00:08:29,306 --> 00:08:32,726
server for the backend, and you have Prisma

129
00:08:32,778 --> 00:08:36,050
supporting all of your database operations.

130
00:08:36,550 --> 00:08:40,402
So when you create a new Redwood app,

131
00:08:40,536 --> 00:08:44,142
you have a fully functional full stack

132
00:08:44,206 --> 00:08:47,974
app from front end to database. As soon

133
00:08:48,012 --> 00:08:52,022
as you run the app, like you

134
00:08:52,076 --> 00:08:55,734
just create a new project, you run it and

135
00:08:55,772 --> 00:09:00,166
you have this react front end, you have this graphql server,

136
00:09:00,278 --> 00:09:03,910
you have storybook. If you want to add some authentication,

137
00:09:03,990 --> 00:09:07,386
you can do that too. But Redwood just handles a

138
00:09:07,488 --> 00:09:10,854
bunch of stuff for you out of the box, but it doesn't

139
00:09:10,902 --> 00:09:14,494
keep it hidden from you. So you can go in and edit any of the

140
00:09:14,532 --> 00:09:19,102
files. If you go through their docs, you can see how they

141
00:09:19,156 --> 00:09:22,914
structure things and why they do file conventions the way that they

142
00:09:22,952 --> 00:09:26,786
do. But Redwood has all of

143
00:09:26,808 --> 00:09:30,386
this for you, and there are a lot of commands that you

144
00:09:30,408 --> 00:09:34,242
can use to generate code that really

145
00:09:34,296 --> 00:09:37,910
makes development oddly fast. It almost

146
00:09:37,980 --> 00:09:41,766
feels like you're cheating, but at the same time you still have to go

147
00:09:41,788 --> 00:09:45,766
in and change things to fit your business

148
00:09:45,868 --> 00:09:49,226
needs, but it does a

149
00:09:49,248 --> 00:09:53,130
lot. So let's just look at what it's like

150
00:09:53,280 --> 00:09:56,826
to work with a new project in Redwood, and we're going to

151
00:09:56,848 --> 00:10:00,494
focus on making this button component that I've been

152
00:10:00,532 --> 00:10:04,074
talking about this whole time. So I'm

153
00:10:04,122 --> 00:10:07,440
going to switch over to vs code,

154
00:10:09,330 --> 00:10:13,422
and here you see what a fresh Redwood

155
00:10:13,486 --> 00:10:17,570
app looks like. And I've learned from

156
00:10:17,640 --> 00:10:20,946
doing this a few times not to install

157
00:10:21,128 --> 00:10:25,106
the framework live because it

158
00:10:25,128 --> 00:10:28,326
takes a while. So I don't want to have to sit here and ramble for

159
00:10:28,348 --> 00:10:31,970
five minutes while this loads everything in the background.

160
00:10:32,130 --> 00:10:35,302
But if you do want to follow along, you can

161
00:10:35,356 --> 00:10:39,110
type in yarn, create Redwood

162
00:10:39,610 --> 00:10:42,710
app, and if you like typescript,

163
00:10:42,870 --> 00:10:46,474
you can just add this typescript option.

164
00:10:46,672 --> 00:10:50,114
If you don't, it's okay to work with just JavaScript

165
00:10:50,182 --> 00:10:53,438
files. Then the last thing we need to do

166
00:10:53,524 --> 00:10:56,878
is say the name of our app.

167
00:10:57,044 --> 00:11:01,006
So in my case it'll be storybook demo and then

168
00:11:01,028 --> 00:11:04,706
you would hit enter and it'll start making all

169
00:11:04,728 --> 00:11:08,546
of these files for you. So I'm going to delete that out

170
00:11:08,568 --> 00:11:12,622
of the terminal. But once that command finishes

171
00:11:12,686 --> 00:11:16,326
running, you'll see all of these files that I

172
00:11:16,348 --> 00:11:20,086
have over here. But our main focus is going

173
00:11:20,108 --> 00:11:24,054
to be typically on this API folder and

174
00:11:24,092 --> 00:11:27,646
this web folder. So the API folder,

175
00:11:27,778 --> 00:11:31,786
it handles where we connect to our database and make our

176
00:11:31,808 --> 00:11:35,510
schema. It handles how we define

177
00:11:35,590 --> 00:11:39,900
our graphql types and the resolvers that we'll be using.

178
00:11:40,370 --> 00:11:44,922
So everything for our database and graphQl

179
00:11:44,986 --> 00:11:48,410
server happened right here in the API folder.

180
00:11:48,570 --> 00:11:52,062
But where we're going to be focusing today is

181
00:11:52,116 --> 00:11:55,586
the web folder. This handles all of the

182
00:11:55,608 --> 00:11:58,914
front end for us. So this is where all of our

183
00:11:58,952 --> 00:12:02,674
react is. This is where all of our components will be,

184
00:12:02,872 --> 00:12:06,840
but we'll start. I just want to show you that this is

185
00:12:07,530 --> 00:12:11,094
really as cool as I say it is. So I'm going to run the

186
00:12:11,132 --> 00:12:13,720
app before we make any changes.

187
00:12:14,410 --> 00:12:18,314
That way you can see it in the browser when it

188
00:12:18,352 --> 00:12:22,138
finishes doing its stuff

189
00:12:22,224 --> 00:12:22,860
here.

190
00:12:25,790 --> 00:12:30,022
All right, so I'll switch over to my

191
00:12:30,176 --> 00:12:31,230
browser.

192
00:12:35,340 --> 00:12:40,440
It's always so much fun trying to switch between screens.

193
00:12:41,660 --> 00:12:44,490
Let me make sure I got the right button.

194
00:12:46,560 --> 00:12:49,676
Yay. So this is what it looks like when

195
00:12:49,698 --> 00:12:53,870
you run your Redwood app without making any changes at all.

196
00:12:54,240 --> 00:12:58,180
We're using to follow this little recommendation here. And we're

197
00:12:58,200 --> 00:13:01,552
going to make a home page. So I'm going to come back

198
00:13:01,606 --> 00:13:05,568
over to vs code and

199
00:13:05,654 --> 00:13:08,864
show you a Redwood command. So going to keep

200
00:13:08,902 --> 00:13:12,660
the app running in the background and open a new terminal.

201
00:13:13,640 --> 00:13:19,460
And here we're going to run yarn Redwood

202
00:13:20,520 --> 00:13:23,448
generate page.

203
00:13:23,534 --> 00:13:27,624
And we're so creative. So we're just going to call it home and

204
00:13:27,662 --> 00:13:31,640
we're going to assign it to our root URL.

205
00:13:33,660 --> 00:13:37,148
Might need to use the right version of node that always

206
00:13:37,234 --> 00:13:40,444
trips me up, but just going to run

207
00:13:40,482 --> 00:13:43,708
that command now. And what this is going

208
00:13:43,714 --> 00:13:47,876
to do, Redwood, is going to generate these three files

209
00:13:47,928 --> 00:13:51,132
here for us. So if I come over in the web directory

210
00:13:51,196 --> 00:13:54,672
and look under source pages, you'll see this new

211
00:13:54,726 --> 00:13:59,404
home directory. And it's pretty cool because Redwood

212
00:13:59,452 --> 00:14:02,804
makes this test file for you. It makes a

213
00:14:02,842 --> 00:14:06,724
storybook story for you, and it makes the

214
00:14:06,762 --> 00:14:10,372
component for you. It also updates the

215
00:14:10,426 --> 00:14:14,036
routes for you. So anytime you need to add

216
00:14:14,058 --> 00:14:18,036
a new page, you can just run that command and get all of this functionality

217
00:14:18,148 --> 00:14:22,040
for free. But now that you've seen

218
00:14:22,110 --> 00:14:26,600
how we make a new page, I want to show you how this storybook

219
00:14:26,680 --> 00:14:30,284
components looks. Just to give you an idea before we make

220
00:14:30,322 --> 00:14:34,760
our button. So I'm going to run yarn Redwood

221
00:14:34,920 --> 00:14:35,980
storybook.

222
00:14:38,100 --> 00:14:41,456
And yeah, this is using to

223
00:14:41,478 --> 00:14:43,760
start up our storybook server.

224
00:14:46,260 --> 00:14:51,332
So just using to let it finish web

225
00:14:51,386 --> 00:14:52,260
packing.

226
00:14:55,080 --> 00:14:58,608
Perfect. And I'm using to switch

227
00:14:58,784 --> 00:15:00,340
to the browser.

228
00:15:03,220 --> 00:15:07,120
Yes. Okay. This is what storybook

229
00:15:07,200 --> 00:15:10,000
looks like with that home page component.

230
00:15:10,160 --> 00:15:13,924
So let's say you had some particular page.

231
00:15:14,042 --> 00:15:18,436
Maybe it's a report page and you're

232
00:15:18,468 --> 00:15:22,232
only supposed to show certain columns and

233
00:15:22,286 --> 00:15:25,816
tables if a user has a certain set

234
00:15:25,838 --> 00:15:29,148
of permissions. You could use this

235
00:15:29,234 --> 00:15:33,036
storybook page to toggle between

236
00:15:33,138 --> 00:15:36,920
those different states without actually touching

237
00:15:37,000 --> 00:15:40,888
your app here. So all of the changes

238
00:15:41,074 --> 00:15:44,684
that you want to make or the different scenarios

239
00:15:44,732 --> 00:15:48,432
you want to see, you can do that right here in your

240
00:15:48,486 --> 00:15:52,112
story. And now that you've seen

241
00:15:52,166 --> 00:15:55,908
that, let's make our button finally.

242
00:15:56,074 --> 00:15:59,430
And then you'll see how all of this ties together.

243
00:16:00,680 --> 00:16:04,356
So back here in vs code, I'm going to risk it

244
00:16:04,378 --> 00:16:08,072
and open another terminal and hope that I don't forget the other ones are

245
00:16:08,126 --> 00:16:11,860
open. And we're going to run yarn

246
00:16:12,020 --> 00:16:16,516
redwood generate components

247
00:16:16,708 --> 00:16:20,604
and we're finally going to make that button once

248
00:16:20,722 --> 00:16:24,536
I change my node version again. So now we're

249
00:16:24,568 --> 00:16:25,870
going to make that button.

250
00:16:29,740 --> 00:16:32,872
All right. It did something super similar to

251
00:16:32,926 --> 00:16:36,604
our page. Of course, we don't have a new route for the button.

252
00:16:36,722 --> 00:16:40,600
Thankfully, the button doesn't need a route. That would be weird.

253
00:16:40,760 --> 00:16:44,952
But we have those same files. We have this sample

254
00:16:45,016 --> 00:16:48,992
test, we have our story, and then we have the

255
00:16:49,046 --> 00:16:52,544
component itself. Now we're going to get

256
00:16:52,582 --> 00:16:56,044
into where storybook and component driven

257
00:16:56,092 --> 00:16:59,440
development actually matters.

258
00:16:59,600 --> 00:17:03,312
So we've already installed the styled

259
00:17:03,376 --> 00:17:06,996
components library. That's just how I

260
00:17:07,018 --> 00:17:10,710
like to do my styles. You can use Css if you like.

261
00:17:11,420 --> 00:17:14,664
And yeah, I'm going to make

262
00:17:14,702 --> 00:17:18,744
it like this. But I'm going to come down here and

263
00:17:18,782 --> 00:17:21,050
make this styled button.

264
00:17:21,900 --> 00:17:25,052
It's going to be styled button.

265
00:17:25,186 --> 00:17:28,780
I love how creative programming is with the terminology.

266
00:17:30,240 --> 00:17:33,372
And then I'm actually going to cheat a little

267
00:17:33,426 --> 00:17:36,130
and just copy and paste some code in here.

268
00:17:36,740 --> 00:17:40,240
So what we're doing is

269
00:17:40,390 --> 00:17:43,712
taking a prop inside of this

270
00:17:43,766 --> 00:17:47,472
styled button and based on the type

271
00:17:47,526 --> 00:17:51,540
of button we're working with, it'll update the background color

272
00:17:51,610 --> 00:17:55,430
and the text color. For our button,

273
00:17:56,280 --> 00:18:00,020
let me add some components.

274
00:18:01,720 --> 00:18:05,284
I'm not sure why I did the thing with the weird

275
00:18:05,332 --> 00:18:09,096
quotes, but I'm using to fix that because it'll bug me if I

276
00:18:09,118 --> 00:18:12,724
don't. So we are going to just use

277
00:18:12,782 --> 00:18:16,124
double quotes everywhere. But that's pretty much

278
00:18:16,162 --> 00:18:18,908
what's happening here. We have this styled button,

279
00:18:19,074 --> 00:18:21,948
and based on the type of button,

280
00:18:22,114 --> 00:18:26,064
we'll change some colors. So up here in

281
00:18:26,102 --> 00:18:29,664
the actual components, I'm going to

282
00:18:29,862 --> 00:18:33,760
cheat a little bit again and just copy and paste some code

283
00:18:33,830 --> 00:18:38,060
in here. And this is our actual

284
00:18:38,230 --> 00:18:42,820
button. This is it. Maybe I'll

285
00:18:43,560 --> 00:18:47,444
drop it like this just so it looks like we

286
00:18:47,482 --> 00:18:51,128
have a little bit more. But this is it.

287
00:18:51,214 --> 00:18:55,336
This is the button. You see, we're taking in two props here.

288
00:18:55,438 --> 00:18:58,724
We're taking in the type and the label.

289
00:18:58,852 --> 00:19:02,264
So the use case for this would be,

290
00:19:02,382 --> 00:19:06,460
let's say you have a form that a user is filling out when

291
00:19:06,530 --> 00:19:08,750
they're typing in their data.

292
00:19:09,200 --> 00:19:12,668
Maybe you want it to be grayed out or

293
00:19:12,834 --> 00:19:16,752
a different color. You give it a different message telling them they can't save

294
00:19:16,806 --> 00:19:20,336
till they finish the form. You'll pass that type and

295
00:19:20,358 --> 00:19:24,060
that label in. It'll display the text here, and it'll

296
00:19:24,140 --> 00:19:28,212
change the style of the button based

297
00:19:28,266 --> 00:19:31,476
on what type you passed in. Usually, if you

298
00:19:31,498 --> 00:19:34,804
were checking the different states for this button

299
00:19:34,922 --> 00:19:38,852
in the app itself, you would probably have

300
00:19:38,906 --> 00:19:43,112
to manually update the type every time

301
00:19:43,166 --> 00:19:46,552
you want to check the styles. You would probably have

302
00:19:46,606 --> 00:19:51,204
to do some kind of weird local janky

303
00:19:51,252 --> 00:19:56,284
code just so that you could see the

304
00:19:56,322 --> 00:19:59,244
different possibilities for the state of this button.

305
00:19:59,442 --> 00:20:03,548
But with storybook, we have this story

306
00:20:03,634 --> 00:20:07,184
here, and I'm actually just going to go ahead

307
00:20:07,222 --> 00:20:10,530
and delete that out because we really don't need it.

308
00:20:11,300 --> 00:20:15,232
So we're going to import our button like this.

309
00:20:15,366 --> 00:20:19,344
Since we did export it as the default.

310
00:20:19,392 --> 00:20:23,604
Never mind, let me save that and

311
00:20:23,642 --> 00:20:27,072
undo that. So we got a clean component

312
00:20:27,136 --> 00:20:30,304
here. Speaking of which, we're going

313
00:20:30,362 --> 00:20:33,944
to make this components the button.

314
00:20:34,142 --> 00:20:37,908
This is just some storybook

315
00:20:38,084 --> 00:20:42,244
stuff that helps with organizing things and letting

316
00:20:42,292 --> 00:20:46,808
you know what you're working with. If you want to learn more about the particulars,

317
00:20:46,904 --> 00:20:50,540
you should definitely go look at their docs because it will explain

318
00:20:50,610 --> 00:20:53,630
it a little bit better than I will right now.

319
00:20:54,000 --> 00:20:57,250
So with this empty story,

320
00:20:57,940 --> 00:21:00,880
let's make our template.

321
00:21:01,860 --> 00:21:04,960
To make the complete, we'll just make

322
00:21:05,110 --> 00:21:08,932
this template variable where we take in the arguments that we

323
00:21:08,986 --> 00:21:12,352
pass to the button. So with this template,

324
00:21:12,416 --> 00:21:16,400
we're going to be able to pass in all kinds of combinations

325
00:21:16,480 --> 00:21:21,544
of types and labels to see what

326
00:21:21,582 --> 00:21:25,050
this components would look like with these different states.

327
00:21:25,580 --> 00:21:29,450
That is what our template and our args let us do.

328
00:21:29,820 --> 00:21:32,410
So with the template in place,

329
00:21:32,720 --> 00:21:36,220
let's take a look at what it would be like to make

330
00:21:36,290 --> 00:21:39,310
a primary button. Basically,

331
00:21:39,920 --> 00:21:44,060
we are exporting this primary button

332
00:21:44,130 --> 00:21:48,028
that's bound to our template. So primary

333
00:21:48,124 --> 00:21:52,064
is going to take in these arcs to tell the

334
00:21:52,102 --> 00:21:55,648
button what to render. And what that means

335
00:21:55,734 --> 00:21:59,348
is primary is just this button

336
00:21:59,514 --> 00:22:03,204
with these args applied to it. So if I

337
00:22:03,242 --> 00:22:06,612
save this and come back

338
00:22:06,746 --> 00:22:08,420
to storybook,

339
00:22:10,140 --> 00:22:13,720
because I can definitely switch between screens.

340
00:22:15,500 --> 00:22:19,140
All right, so now you see here in our storybook,

341
00:22:19,300 --> 00:22:23,272
we have our button finally, and it's our primary

342
00:22:23,336 --> 00:22:26,844
button. It's not that impressive right

343
00:22:26,882 --> 00:22:30,744
now, but let's add a few more buttons

344
00:22:30,872 --> 00:22:34,830
just so you can see how storybook handles these different states.

345
00:22:35,220 --> 00:22:38,930
I'm going to copy and paste this a couple of times

346
00:22:40,980 --> 00:22:48,628
and I'm going to call this secondary and

347
00:22:48,714 --> 00:22:50,710
update all of this stuff.

348
00:22:52,920 --> 00:22:57,190
And then I'm going to make this the dark button because

349
00:22:58,120 --> 00:23:01,192
almost a lot of apps have dark mode now,

350
00:23:01,246 --> 00:23:05,496
right? So we've updated this

351
00:23:05,678 --> 00:23:09,156
storybook story to have two more buttons

352
00:23:09,268 --> 00:23:12,788
with these different states and now we're going to look at

353
00:23:12,894 --> 00:23:15,180
what happened in our browser,

354
00:23:17,280 --> 00:23:21,436
which you should see these other components down here.

355
00:23:21,618 --> 00:23:24,972
So now you have a quick view at what the secondary button

356
00:23:25,026 --> 00:23:28,432
looks like, what the dark button looks like. It's all

357
00:23:28,486 --> 00:23:32,096
there and you don't have to go in your code and change anything.

358
00:23:32,278 --> 00:23:36,860
You can just come back here to this story and update

359
00:23:37,020 --> 00:23:41,376
whatever you need. So anytime you change this component,

360
00:23:41,488 --> 00:23:45,632
you can come into your story, add the props that documents

361
00:23:45,696 --> 00:23:49,552
the new component and it also shows off how the new component

362
00:23:49,616 --> 00:23:53,236
works. So you get a bunch of benefit just packed

363
00:23:53,268 --> 00:23:56,648
in here. But this is how

364
00:23:56,734 --> 00:24:00,324
storybook is so useful with component driven

365
00:24:00,372 --> 00:24:04,700
development. Just imagine how useful this is with the table.

366
00:24:05,200 --> 00:24:08,620
I can tell you it's pretty useful because those

367
00:24:08,690 --> 00:24:11,980
usually have all kinds of crazy data floating around.

368
00:24:12,130 --> 00:24:16,252
Sometimes you don't have complete data, so there's columns missing.

369
00:24:16,396 --> 00:24:19,612
Maybe you need to render a weird empty

370
00:24:19,676 --> 00:24:23,600
state because of reasons.

371
00:24:24,020 --> 00:24:27,836
And it's hard to test that when you're just doing that

372
00:24:27,878 --> 00:24:31,412
in a running app locally. There's so many things

373
00:24:31,466 --> 00:24:35,540
that you have to tweak in the code to force those changes

374
00:24:35,690 --> 00:24:39,808
onto components that aren't built in isolation,

375
00:24:39,904 --> 00:24:43,464
that it

376
00:24:43,502 --> 00:24:46,904
makes you be extra careful before you push your

377
00:24:46,942 --> 00:24:50,520
code up for a pr review. But that

378
00:24:50,590 --> 00:24:54,990
is what I wanted to teach you all about storybook today.

379
00:24:55,360 --> 00:24:58,700
So I'm going to switch back over to my

380
00:24:58,770 --> 00:25:02,124
slides and tell you how to

381
00:25:02,162 --> 00:25:05,692
add storybook to an existing project. Because maybe

382
00:25:05,746 --> 00:25:09,232
you aren't working with Redwood, maybe you aren't ready to make that

383
00:25:09,286 --> 00:25:13,372
jump and you have some kind of just a regular react

384
00:25:13,436 --> 00:25:16,944
app or whatever you're working with. It's pretty

385
00:25:16,982 --> 00:25:20,880
easy to add storybook. You just run

386
00:25:20,950 --> 00:25:24,612
this command in the root of your project and it'll set up

387
00:25:24,666 --> 00:25:27,764
the storybook configs for you. You can go

388
00:25:27,802 --> 00:25:31,208
through the docs and look at some of the add ons that are there,

389
00:25:31,374 --> 00:25:34,756
but it's pretty easy to just throw

390
00:25:34,788 --> 00:25:37,050
this into any existing project.

391
00:25:37,980 --> 00:25:41,540
That is all you have to do, do those configs

392
00:25:41,620 --> 00:25:45,310
and then debug it, because it's never that easy.

393
00:25:45,840 --> 00:25:49,916
But in theory, you just do this command and

394
00:25:49,938 --> 00:25:53,390
I guess my doggo wanted to join me for the very end.

395
00:25:54,880 --> 00:25:58,096
Well, that's fine, because we are at

396
00:25:58,118 --> 00:26:01,776
the very end, so I just want to wrap up with a

397
00:26:01,798 --> 00:26:06,540
few key takeaways. Components driven development

398
00:26:06,700 --> 00:26:10,404
really does make long term maintenance easier, if for

399
00:26:10,442 --> 00:26:13,536
no other reason. You have your props

400
00:26:13,648 --> 00:26:17,428
in different states documented. So when business

401
00:26:17,514 --> 00:26:21,324
needs change, you can actually see the evolution

402
00:26:21,392 --> 00:26:25,304
of how the components changed. And when you bring on

403
00:26:25,342 --> 00:26:28,616
new people, when you're jumping around projects that are in

404
00:26:28,638 --> 00:26:32,628
your company, or if you're a freelancer and you're just

405
00:26:32,814 --> 00:26:34,910
hopping in all over the place,

406
00:26:35,600 --> 00:26:39,976
having that kind of documentation and that ability

407
00:26:40,088 --> 00:26:43,676
to work on components in isolation makes

408
00:26:43,778 --> 00:26:46,610
projects way more pleasant to work with.

409
00:26:47,940 --> 00:26:51,328
And then Redwood just bootstraps a

410
00:26:51,334 --> 00:26:55,564
bunch of stuff for you. So if you did want to use the GraphQl

411
00:26:55,612 --> 00:26:58,820
server, there's one command that

412
00:26:58,970 --> 00:27:02,340
takes your schema and it literally makes

413
00:27:02,410 --> 00:27:06,116
the whole app for you. Like it makes the

414
00:27:06,138 --> 00:27:10,052
graphQl server, it makes the types, the resolvers on the front

415
00:27:10,106 --> 00:27:14,184
end, it makes the pages and these components, and it fetches the data.

416
00:27:14,382 --> 00:27:17,784
Redwood does a lot, so you should probably just check

417
00:27:17,822 --> 00:27:21,300
it out and then, my favorite,

418
00:27:21,460 --> 00:27:25,100
keep trying new things. There are so

419
00:27:25,170 --> 00:27:29,496
many new tools out here that it's

420
00:27:29,528 --> 00:27:33,064
kind of crazy. Sometimes you don't have to stick

421
00:27:33,112 --> 00:27:36,524
with everything you try. Just take a

422
00:27:36,562 --> 00:27:39,664
look at what's going on and maybe it'll give you some

423
00:27:39,702 --> 00:27:42,832
ideas for things that you're already working on,

424
00:27:42,886 --> 00:27:46,640
or you might get a fresh perspective on some problem

425
00:27:46,710 --> 00:27:50,756
you've been stuck on. And one other thing I

426
00:27:50,778 --> 00:27:54,612
know, sometimes as developers, we're like, oh, I need to build

427
00:27:54,666 --> 00:27:58,230
this from scratch to prove that I'm so good at code.

428
00:27:58,840 --> 00:28:02,080
You really don't. That's the secret.

429
00:28:02,160 --> 00:28:05,864
You really don't have to prove that, because there's so many tools out

430
00:28:05,902 --> 00:28:09,704
here. If you know how to use them and you know what's going on under

431
00:28:09,742 --> 00:28:12,804
the hood, you're fine. Just use the tools.

432
00:28:12,932 --> 00:28:16,088
Don't spend a week trying to make.

433
00:28:16,174 --> 00:28:19,704
Well, if you could make your own framework in a week, that would

434
00:28:19,742 --> 00:28:22,952
be pretty crazy. But just don't waste your time

435
00:28:23,006 --> 00:28:26,496
trying to make a framework when there's a bunch of framework works out here that

436
00:28:26,518 --> 00:28:30,416
you can try, and maybe later, after you've tested everything

437
00:28:30,518 --> 00:28:34,092
out, then you can make your own thing because you see the gaps.

438
00:28:34,236 --> 00:28:37,970
But I digress. Keep trying new stuff.

439
00:28:38,500 --> 00:28:42,128
That's all I have for you. I hope that you learned something.

440
00:28:42,294 --> 00:28:45,664
And again, if you have any questions, feel free to reach

441
00:28:45,702 --> 00:28:48,700
out to me on Twitter at flipped coding.

