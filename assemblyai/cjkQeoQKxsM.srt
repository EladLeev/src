1
00:00:20,010 --> 00:00:23,546
Hi everybody, this is Andrea from Forkbomb and I'm

2
00:00:23,578 --> 00:00:28,390
here to tell you about the Xandrum virtual machine and its ecosystem.

3
00:00:29,210 --> 00:00:32,994
I am on the Xandrum homepage, xandrum.org,

4
00:00:33,122 --> 00:00:37,240
and I'm going to jump to the specs. So I'm scrolling down

5
00:00:38,090 --> 00:00:41,626
here to the specs section and I'm going

6
00:00:41,648 --> 00:00:45,706
to start from the bottom right. So Xandrum is written entirely in

7
00:00:45,728 --> 00:00:49,046
c, meaning that we have binaries command

8
00:00:49,078 --> 00:00:52,814
line for all servers on

9
00:00:52,932 --> 00:00:56,394
all the architectures. We have libraries for Android,

10
00:00:56,442 --> 00:01:00,334
iOS, and we also have a transcompiled version of

11
00:01:00,372 --> 00:01:03,922
Xandrum running as a

12
00:01:03,976 --> 00:01:07,890
Wasp module inside an NPM package,

13
00:01:08,230 --> 00:01:12,466
meaning that Xandrom can also run in the browser or in

14
00:01:12,488 --> 00:01:15,880
an old application. Xandrom can also run

15
00:01:16,330 --> 00:01:19,490
in very small IoT chips

16
00:01:19,570 --> 00:01:24,598
like Cortexm, and we have bindings for most

17
00:01:24,684 --> 00:01:26,920
languages that you can ever need.

18
00:01:27,710 --> 00:01:31,126
Zenroom has a very tiny payload, so the binary

19
00:01:31,158 --> 00:01:35,100
is usually around a megabyte and it usually

20
00:01:35,550 --> 00:01:39,434
needs around 500 k's of ram to do

21
00:01:39,472 --> 00:01:43,098
its computation. It's fully deterministic,

22
00:01:43,194 --> 00:01:46,714
meaning that given the same inputs, you will get the same output

23
00:01:46,762 --> 00:01:50,334
on any platform you run it on, which is crucial for a

24
00:01:50,372 --> 00:01:51,950
blockchain virtual machine.

25
00:01:54,070 --> 00:01:58,142
What can Zendrum do? So, first of all, a lot of cryptography,

26
00:01:58,206 --> 00:02:01,646
meaning a lot of different kind of signatures,

27
00:02:01,758 --> 00:02:04,510
ECDSA used by bitcoin, Ethereum,

28
00:02:04,590 --> 00:02:08,694
EdDSA, schnorr. We can also

29
00:02:08,812 --> 00:02:12,770
do quantum proof signatures using the deletium algorithm,

30
00:02:12,850 --> 00:02:16,434
which is one of the algorithms selected by the NIST

31
00:02:16,482 --> 00:02:20,154
competition this year. And very important, Xandrum can do

32
00:02:20,192 --> 00:02:23,862
a lot of blockchain interoperability for Ethereum,

33
00:02:23,926 --> 00:02:25,340
bitcoin and more.

34
00:02:26,510 --> 00:02:30,354
Zenroom can also do advanced cryptography such as xeonology

35
00:02:30,422 --> 00:02:34,026
proof or offline xeonology proof like ZK

36
00:02:34,058 --> 00:02:38,142
snarks. It can do multi signature w

37
00:02:38,196 --> 00:02:40,640
to receive verifiable credentials and more.

38
00:02:42,550 --> 00:02:45,922
Possibly the most interesting feature of Zen room is that

39
00:02:45,976 --> 00:02:50,194
it can be programmed in can English like

40
00:02:50,392 --> 00:02:54,510
domain specific language inspired by BDD

41
00:02:54,590 --> 00:02:58,214
or Gerkin, which is designed to be

42
00:02:58,332 --> 00:03:01,622
read and written by people with no

43
00:03:01,676 --> 00:03:05,442
programming background. I'm going to scroll

44
00:03:05,506 --> 00:03:10,458
down a

45
00:03:10,464 --> 00:03:13,862
little bit further. So here you have all the latest

46
00:03:13,926 --> 00:03:17,660
downloads for all the platforms, and here you have

47
00:03:18,430 --> 00:03:22,330
instructions to use Xandrum in JavaScript,

48
00:03:22,410 --> 00:03:25,774
Python, along with

49
00:03:25,972 --> 00:03:28,910
bindings for a bunch of different languages.

50
00:03:30,850 --> 00:03:34,126
I will jump to a demonstration

51
00:03:34,238 --> 00:03:38,194
of the Zen code using our online

52
00:03:38,312 --> 00:03:42,020
ide and playground API room.

53
00:03:42,390 --> 00:03:46,386
I'm going to reload the page here, so when you

54
00:03:46,488 --> 00:03:50,214
land on Apirom net you will see something like

55
00:03:50,252 --> 00:03:53,750
this. So you want to start from the examples

56
00:03:55,690 --> 00:03:59,750
here we have an extensive library of examples

57
00:03:59,830 --> 00:04:03,174
to be used as a cookbook to write smart contracts.

58
00:04:03,302 --> 00:04:07,990
So in the beginning you have generic

59
00:04:08,070 --> 00:04:11,230
scripts to do all sort of computation.

60
00:04:11,730 --> 00:04:15,598
Here we have a section for cryptography. So hashes, as you

61
00:04:15,604 --> 00:04:19,150
can see, we can do different kind of hashes as SHA

62
00:04:20,210 --> 00:04:23,270
256 and twelve kdf,

63
00:04:23,450 --> 00:04:27,540
PBKDF, HMac, and we have

64
00:04:27,910 --> 00:04:31,220
currently added a couple more, which we haven't documented yet.

65
00:04:32,950 --> 00:04:36,338
Here you have features

66
00:04:36,434 --> 00:04:40,514
that you can use to create microservices

67
00:04:40,642 --> 00:04:43,880
using the Xenrome ecosystem. I'm going to go back to this.

68
00:04:46,970 --> 00:04:51,014
You have a quantum proof section, so deletium

69
00:04:51,062 --> 00:04:54,810
signature and key exchange mechanisms such as

70
00:04:54,880 --> 00:04:56,570
kyber and interop.

71
00:04:59,550 --> 00:05:02,914
Our Xeonoj proof Zkatesnarx

72
00:05:02,982 --> 00:05:06,638
flows multi signature and

73
00:05:06,724 --> 00:05:10,270
verifiable credentials. So I'm going to jump to

74
00:05:10,420 --> 00:05:13,922
an example that can be easy

75
00:05:13,976 --> 00:05:17,300
to use by most people.

76
00:05:17,990 --> 00:05:21,854
So I'm going to produce ECDSA signatures

77
00:05:21,982 --> 00:05:25,782
of a string and

78
00:05:25,916 --> 00:05:29,814
an array of strings. So this

79
00:05:29,852 --> 00:05:33,158
is what a Zen code script looks like.

80
00:05:33,244 --> 00:05:37,382
The script is divided in three steps. The given step where I

81
00:05:37,436 --> 00:05:40,860
load the data. This step is strictly read only.

82
00:05:41,630 --> 00:05:44,220
In the second step, which is the when step,

83
00:05:44,750 --> 00:05:48,026
all the computation happens. And in the third step, which is the

84
00:05:48,048 --> 00:05:51,966
then step, the data produce in the previous step

85
00:05:52,068 --> 00:05:55,840
is formatted and printed out.

86
00:05:56,530 --> 00:06:00,426
So here I am stating my identity and loading

87
00:06:00,458 --> 00:06:04,594
my key ring, which you can see here. This is

88
00:06:04,712 --> 00:06:09,358
a bunch of private keys that can be used to do cryptography

89
00:06:09,534 --> 00:06:12,994
and bitcoin as

90
00:06:13,032 --> 00:06:17,394
a blockchain. Interoperability. Then I'm loading

91
00:06:17,442 --> 00:06:21,190
a string which is nested inside

92
00:06:21,260 --> 00:06:24,678
the JSON object, and I'm loading an array of

93
00:06:24,684 --> 00:06:28,350
strings which is this. In the one section

94
00:06:28,450 --> 00:06:32,070
I am first creating an ECDSA signature

95
00:06:32,230 --> 00:06:35,594
of the array, which I'm later

96
00:06:35,792 --> 00:06:39,226
renaming, and then I am creating a

97
00:06:39,248 --> 00:06:44,010
signature of the string embedded

98
00:06:44,090 --> 00:06:47,566
in the JSON object. In the last

99
00:06:47,668 --> 00:06:51,950
four lines I am printing out the string,

100
00:06:54,130 --> 00:06:57,138
sorry, the array of strings, the signature of

101
00:06:57,144 --> 00:07:00,626
the array of strings, the string, and then the signature of

102
00:07:00,648 --> 00:07:02,820
the string. When I press run,

103
00:07:05,350 --> 00:07:10,806
the output of Zen proof comes out and this

104
00:07:10,828 --> 00:07:14,422
is the string loaded. This is its ECDSA signature with the

105
00:07:14,476 --> 00:07:17,778
usual RNS formatting.

106
00:07:17,954 --> 00:07:21,210
And the same thing happens for the array. In the bottom

107
00:07:21,280 --> 00:07:24,438
we have a bunch of information about the execution.

108
00:07:24,534 --> 00:07:28,294
So the xenrome version, the git commit,

109
00:07:28,422 --> 00:07:30,560
the curves loaded at the moment,

110
00:07:31,810 --> 00:07:35,594
as well as the memory

111
00:07:35,642 --> 00:07:39,294
usage and the execution time. So very

112
00:07:39,332 --> 00:07:43,106
important to understand is that this smart contract that

113
00:07:43,128 --> 00:07:46,094
I just executed runs here in the browser.

114
00:07:46,142 --> 00:07:50,002
So this application in this situation

115
00:07:50,136 --> 00:07:53,198
it's using zenroom transcompiled

116
00:07:53,214 --> 00:07:57,026
in WASM and embedded into a node package, an NPM

117
00:07:57,058 --> 00:08:00,566
package. So I run it again. You see that the

118
00:08:00,588 --> 00:08:04,326
memory usage is always the same and the execution time is always between 30 and

119
00:08:04,348 --> 00:08:05,670
40 milliseconds.

120
00:08:08,030 --> 00:08:11,734
I want to tell you more about the blockchain

121
00:08:11,782 --> 00:08:15,702
interoperability. To do this, I'm going to jump to the zenroom documentation

122
00:08:15,766 --> 00:08:18,902
page so that zenroom.org

123
00:08:19,046 --> 00:08:22,206
when you start here, you want to scroll down.

124
00:08:22,388 --> 00:08:26,414
We have an extensive documentation of the

125
00:08:26,532 --> 00:08:30,286
Zen code language as well as

126
00:08:30,388 --> 00:08:34,162
how to integrate Xen proof in different

127
00:08:34,216 --> 00:08:37,886
kind of applications. I'm first going to jump

128
00:08:38,078 --> 00:08:41,570
to the Ethereum scenario.

129
00:08:41,910 --> 00:08:45,666
So a scenario is in xen room, an internal

130
00:08:45,698 --> 00:08:49,670
library that can be loaded at runtime

131
00:08:50,490 --> 00:08:53,750
and contains several contains functionalities.

132
00:08:55,210 --> 00:08:58,700
So here I am producing an Ethereum private key.

133
00:08:59,150 --> 00:09:01,660
When I create the Ethereum key,

134
00:09:02,270 --> 00:09:05,820
then I will create the Ethereum public key.

135
00:09:06,590 --> 00:09:08,300
And based on that,

136
00:09:09,550 --> 00:09:12,800
so based on the private key, I'm going to create the Ethereum address.

137
00:09:13,890 --> 00:09:19,678
This is what the script looks like here.

138
00:09:19,764 --> 00:09:23,230
If you scroll down, you will see how to create the transaction

139
00:09:25,750 --> 00:09:28,850
and how to sign the transaction.

140
00:09:30,150 --> 00:09:33,902
And the same thing we can do for Ethereum,

141
00:09:33,966 --> 00:09:37,314
bitcoin, as well as hyperledger fabric, Hyperledger,

142
00:09:37,362 --> 00:09:41,414
Sotooth, Yota and Planet Mint, which is a

143
00:09:41,452 --> 00:09:45,526
new blockchain, a rewriting of big

144
00:09:45,548 --> 00:09:49,034
can DB. You will now wonder what

145
00:09:49,072 --> 00:09:52,906
you can use Xandrum for in this situation.

146
00:09:53,088 --> 00:09:56,700
So using Xandrum, you can

147
00:09:58,270 --> 00:10:02,060
effortlessly build a

148
00:10:02,670 --> 00:10:06,314
browser based multi blockchain wallet.

149
00:10:06,442 --> 00:10:10,874
So imagine metamask supporting bitcoin,

150
00:10:11,002 --> 00:10:14,810
all its derivatives, ethereum and all its derivatives

151
00:10:14,890 --> 00:10:16,560
plus fabric. And so,

152
00:10:19,590 --> 00:10:22,722
and the same wallet can

153
00:10:22,776 --> 00:10:26,722
run in the browser, or you can embed it in a PWA

154
00:10:26,786 --> 00:10:30,182
and have it run in a mobile. And with very

155
00:10:30,236 --> 00:10:34,070
little code modifications, you can also run it on react native

156
00:10:34,410 --> 00:10:37,000
or as a backend application.

157
00:10:38,890 --> 00:10:42,086
So here you have examples on

158
00:10:42,108 --> 00:10:45,286
how to embed Xenro. For example in a node

159
00:10:45,318 --> 00:10:46,730
application, the backend,

160
00:10:50,690 --> 00:10:53,070
how to run it in the browser.

161
00:10:56,690 --> 00:11:00,634
Yeah, so there is an NPM package

162
00:11:00,762 --> 00:11:05,150
called Xen proof, and we have examples

163
00:11:06,690 --> 00:11:10,740
to call Xen proof from Javascript, Python and

164
00:11:11,350 --> 00:11:13,380
other languages as well.

165
00:11:14,230 --> 00:11:17,826
Okay, this was the basics of xandrum. Now I'm going

166
00:11:17,848 --> 00:11:21,858
to jump to the xandrum ecosystem.

167
00:11:21,954 --> 00:11:25,906
So I'm going to jump to the forkbomb on page forkbomb

168
00:11:26,018 --> 00:11:29,094
eU. Here we have

169
00:11:29,292 --> 00:11:33,210
the summary of what I've just told you about the Zenroom stack. This is

170
00:11:33,280 --> 00:11:36,454
again a page about Zenroom. So I'm going to jump

171
00:11:36,502 --> 00:11:40,038
over, I'm going to jump over to Zentswarm.

172
00:11:40,214 --> 00:11:46,160
What is Zentsworm within

173
00:11:46,850 --> 00:11:50,014
the EPSI project?

174
00:11:50,132 --> 00:11:53,726
EPSI stands for european blockchain service infrastructure.

175
00:11:53,838 --> 00:11:57,442
We have developed a swarm of

176
00:11:57,496 --> 00:12:01,220
blockchain oracles technology. So we have

177
00:12:02,390 --> 00:12:06,870
packaged a Zandro microservice

178
00:12:07,690 --> 00:12:11,922
into a node

179
00:12:11,986 --> 00:12:15,880
based application to do

180
00:12:16,490 --> 00:12:18,650
mostly blockchain interoperability.

181
00:12:19,070 --> 00:12:22,442
So the oracle listens to

182
00:12:22,576 --> 00:12:26,650
a blockchain, waits for an event, and when

183
00:12:26,720 --> 00:12:30,714
a certain event is produced, then the oracle

184
00:12:30,842 --> 00:12:34,286
is triggered. A smart contract is executed on the

185
00:12:34,308 --> 00:12:37,486
Oracle, and the oracle can

186
00:12:37,588 --> 00:12:42,186
reply by computing

187
00:12:42,218 --> 00:12:46,258
something, for example for blockchain interoperability or

188
00:12:46,344 --> 00:12:49,250
feeding the blockchain with data from the Internet.

189
00:12:50,470 --> 00:12:53,566
For this, we have also developed a dashboard.

190
00:12:53,758 --> 00:12:57,602
So here you have a screenshot of the list

191
00:12:57,656 --> 00:13:01,800
of oracles active at the moment, and the screenshot was taken.

192
00:13:02,650 --> 00:13:06,470
We have built in monitoring for each oracle.

193
00:13:07,790 --> 00:13:11,306
Something you cannot really see here because the

194
00:13:11,328 --> 00:13:15,542
screenshot is too small, is that when each oracle

195
00:13:15,606 --> 00:13:19,546
goes online, it announces itself to

196
00:13:19,568 --> 00:13:22,734
the network using a w three c did

197
00:13:22,852 --> 00:13:26,366
document, which is something I'm going to go back

198
00:13:26,468 --> 00:13:29,134
on in a second. Okay,

199
00:13:29,332 --> 00:13:33,258
back to the forkbomb u homepage

200
00:13:33,354 --> 00:13:37,150
after xanthworm, I'm going to show you Zantworm storage.

201
00:13:38,850 --> 00:13:42,370
Zantmo storage is a distributed key value

202
00:13:42,440 --> 00:13:46,038
storage for caching and sharding. Something I

203
00:13:46,044 --> 00:13:49,682
didn't mention is that all the code you've seen is open source.

204
00:13:49,746 --> 00:13:53,382
So here you have

205
00:13:53,436 --> 00:13:57,158
the source code of Zanswarm. This is the

206
00:13:57,244 --> 00:14:01,346
source code of densmore storage. And under GitHub.com slash

207
00:14:01,378 --> 00:14:04,582
dine slash zendrum, you find the source code of Xandrum.

208
00:14:04,726 --> 00:14:08,778
So what is densmore storage is a

209
00:14:08,944 --> 00:14:12,554
tarantool based distributed caching

210
00:14:12,602 --> 00:14:15,950
and sharding application that allows you to do

211
00:14:16,100 --> 00:14:20,126
key value storage where both the storage and

212
00:14:20,148 --> 00:14:25,470
the retrieval are based on policies that are coded

213
00:14:25,630 --> 00:14:29,026
in the application. The last thing I

214
00:14:29,048 --> 00:14:32,530
want to show you is our w three CD method.

215
00:14:33,750 --> 00:14:37,378
So we have implemented

216
00:14:37,474 --> 00:14:41,142
our w three CD method initially for the

217
00:14:41,196 --> 00:14:44,550
appsy project. The very first implementation we did

218
00:14:44,620 --> 00:14:48,582
was in order to allow the oracles to identify

219
00:14:48,646 --> 00:14:51,738
themselves, and we're now growing it to be more

220
00:14:51,824 --> 00:14:55,494
generic in order to accommodate human users,

221
00:14:55,622 --> 00:14:59,846
to accommodate web services, or to accommodate objects

222
00:14:59,878 --> 00:15:04,154
of different kinds. Our debut receded method

223
00:15:04,282 --> 00:15:07,662
has a focus on cryptography. So in the w

224
00:15:07,716 --> 00:15:12,202
three did document we have embedded

225
00:15:12,266 --> 00:15:16,194
public keys for all the signatures that

226
00:15:16,312 --> 00:15:20,226
we are capable of working with, including the

227
00:15:20,248 --> 00:15:23,310
quantum proof delithium signature scheme.

228
00:15:23,470 --> 00:15:29,186
And the w three ceded method provides

229
00:15:29,218 --> 00:15:32,454
you blockchain anchoring, meaning that when

230
00:15:32,492 --> 00:15:34,310
a did document is produced,

231
00:15:36,010 --> 00:15:39,878
the did service stores

232
00:15:39,974 --> 00:15:43,722
the did document also on blockchain and it

233
00:15:43,776 --> 00:15:47,094
stores the blockchain

234
00:15:47,142 --> 00:15:51,180
transaction in the did document, meaning that

235
00:15:51,710 --> 00:15:54,858
the validity of the did document

236
00:15:54,954 --> 00:15:58,000
can be checked on blockchain at any time.

237
00:15:59,730 --> 00:16:04,734
Okay, I think that this is all I

238
00:16:04,772 --> 00:16:07,854
will conclude showing you the

239
00:16:07,972 --> 00:16:11,246
GitHub repo of Xandrum. So if

240
00:16:11,268 --> 00:16:15,190
you go here, you do GitHub.com,

241
00:16:15,380 --> 00:16:20,534
dime Sandrum and

242
00:16:20,572 --> 00:16:22,390
here you can follow the development.

243
00:16:25,610 --> 00:16:26,500
Thank you very much.

