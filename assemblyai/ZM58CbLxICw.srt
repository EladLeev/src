1
00:01:54,330 --> 00:01:57,566
Hi, my name is Roman Zhukov and I am from intel. Today we

2
00:01:57,588 --> 00:02:01,050
are going to talk about how to fit SeC into DevOps,

3
00:02:01,130 --> 00:02:05,010
probably without security team. Let me start with a mandatory

4
00:02:05,050 --> 00:02:08,166
disclaimer. Sorry about that guys. Today I'd like to

5
00:02:08,268 --> 00:02:12,002
express my own opinion and my own experience that doesn't necessarily

6
00:02:12,066 --> 00:02:15,826
reflect the official views or opinions of my employer. So I'm

7
00:02:15,858 --> 00:02:19,734
going to just share with you some public examples and cases.

8
00:02:19,862 --> 00:02:23,734
So there is neither confidential information today nor marketing

9
00:02:23,782 --> 00:02:27,162
stuff, only practice. So some

10
00:02:27,216 --> 00:02:30,758
links and names on my slides may seem small, but don't mind it

11
00:02:30,784 --> 00:02:34,986
please. Everything is clickable. My plan is to share slides with organizers

12
00:02:35,018 --> 00:02:38,414
so that you can follow them offline, if you would,

13
00:02:38,612 --> 00:02:41,642
and without any further delay.

14
00:02:41,786 --> 00:02:45,118
Here we go. Let me introduce myself

15
00:02:45,204 --> 00:02:48,750
real quick. I am practices cybersecurity expert

16
00:02:48,830 --> 00:02:52,674
with more than twelve years experience with

17
00:02:52,712 --> 00:02:56,418
the most recent area of my interest in product security and

18
00:02:56,504 --> 00:03:00,466
broader end to end secure development lifecycle

19
00:03:00,658 --> 00:03:03,670
well known as SDL or SDLC.

20
00:03:04,410 --> 00:03:08,874
Formerly I also brought to market new cybersecurity products services,

21
00:03:09,072 --> 00:03:12,598
manage complex security projects, consult firms

22
00:03:12,774 --> 00:03:15,740
like banks, telcos, retail, you name it.

23
00:03:16,590 --> 00:03:21,338
Also, I conduct classes at universities

24
00:03:21,434 --> 00:03:25,754
and private centers. In my spare time I do volleyball.

25
00:03:25,802 --> 00:03:28,842
I'm fond of hiking, running bikes,

26
00:03:28,906 --> 00:03:32,470
swimming, and basically of every single sport

27
00:03:32,570 --> 00:03:34,290
that is easily feasible.

28
00:03:35,830 --> 00:03:40,190
Okay, not for advertising purposes,

29
00:03:40,270 --> 00:03:43,986
but satisfying everybody's curiosity. Probably you

30
00:03:44,008 --> 00:03:47,462
might think why the silicon company talks not only

31
00:03:47,516 --> 00:03:50,770
about hardware, right? Intel and software.

32
00:03:50,850 --> 00:03:54,230
What is all about? Intel actually

33
00:03:54,300 --> 00:03:57,862
DevOps a lot of different proprietary and open source software

34
00:03:57,926 --> 00:04:01,814
products, including actually industry pioneering

35
00:04:01,862 --> 00:04:05,930
confidential computing products like SGX,

36
00:04:06,270 --> 00:04:08,570
Project Amber and ET cetera.

37
00:04:09,970 --> 00:04:14,078
Also we are providing some, as I mentioned,

38
00:04:14,164 --> 00:04:17,166
open source stuff, even in security space.

39
00:04:17,268 --> 00:04:20,960
And I will share with you along with

40
00:04:21,810 --> 00:04:25,698
other open software. So what we do and

41
00:04:25,784 --> 00:04:29,266
what we share with community, actually, maybe you

42
00:04:29,288 --> 00:04:32,722
don't know, but intel over the five

43
00:04:32,776 --> 00:04:36,370
or more years top four contributors to open source

44
00:04:36,450 --> 00:04:40,054
according to open source contributor index. So along with

45
00:04:40,092 --> 00:04:43,446
other respectful companies. So we know how to

46
00:04:43,468 --> 00:04:47,206
do software, we are consuming software, we are running of

47
00:04:47,228 --> 00:04:51,130
course our own devsecops practices. So that's why

48
00:04:51,280 --> 00:04:53,420
we can talk about that.

49
00:04:54,270 --> 00:04:57,862
Okay, let's start with myths breaking.

50
00:04:57,926 --> 00:05:01,246
Actually, I believe if you're for

51
00:05:01,268 --> 00:05:05,802
example, an RND or it professional or SRE or DevOps

52
00:05:05,866 --> 00:05:09,102
engineer, right? You may likely face some concerns about

53
00:05:09,156 --> 00:05:12,706
security or

54
00:05:12,728 --> 00:05:16,546
even struggle with your own company centralized security

55
00:05:16,648 --> 00:05:19,330
team, right? And you know what?

56
00:05:19,400 --> 00:05:23,214
I can't blame you guys for that, because let's say classic

57
00:05:23,262 --> 00:05:26,980
or traditional security approach doesn't really fit well

58
00:05:27,430 --> 00:05:30,882
to software development, to development

59
00:05:30,946 --> 00:05:34,120
departments or it specific companies

60
00:05:35,530 --> 00:05:39,398
that's true. Let's admit it. In all of these areas,

61
00:05:39,494 --> 00:05:43,162
baking security into DevOps actually can

62
00:05:43,216 --> 00:05:46,886
help. Let's see, five myths

63
00:05:46,918 --> 00:05:50,534
as you can see on this slide, right? Security team and their tools

64
00:05:50,582 --> 00:05:54,254
are aliens for RND. I think that

65
00:05:54,292 --> 00:05:57,806
is maybe clear for some of us.

66
00:05:57,908 --> 00:06:00,510
RND has their own KPI, right?

67
00:06:00,580 --> 00:06:04,830
And I heard a lot over

68
00:06:04,900 --> 00:06:08,446
my practices about how can we establish these trade offs

69
00:06:08,478 --> 00:06:12,414
between security and feature development,

70
00:06:12,542 --> 00:06:15,926
et cetera. We don't need to do that. We are going

71
00:06:15,948 --> 00:06:19,478
to make the robust and best quality

72
00:06:19,564 --> 00:06:23,346
products in the world. So this is all connected, no trade offs,

73
00:06:23,378 --> 00:06:27,910
no conflicts. Of course, if you do it properly,

74
00:06:29,470 --> 00:06:33,594
it is yet another vulnerability, right? Why should

75
00:06:33,632 --> 00:06:36,794
I care about that? Nobody will

76
00:06:36,832 --> 00:06:40,334
exploit that. It's not going to work. It's yet

77
00:06:40,372 --> 00:06:44,506
another myth. I mean, the fourth one, security doesn't contain

78
00:06:44,618 --> 00:06:49,040
good metrics or clear value or clear benefits.

79
00:06:50,610 --> 00:06:54,034
It's not true. If you do right security and

80
00:06:54,072 --> 00:06:58,050
you fit SEC into your development and DevOps practices

81
00:06:59,110 --> 00:07:03,026
correctly, so you are going to take these benefits. And the

82
00:07:03,048 --> 00:07:06,574
last one, my lower one, security is boring and unnoticeable

83
00:07:06,622 --> 00:07:09,560
for everybody. It's not truth. Again,

84
00:07:10,330 --> 00:07:13,174
security is really exciting, even for,

85
00:07:13,292 --> 00:07:17,190
let's say, ordinary engineers, not security guys,

86
00:07:17,260 --> 00:07:20,474
because the right security, the proper security is

87
00:07:20,512 --> 00:07:24,726
mostly about the technology, right? Of course it contains

88
00:07:24,758 --> 00:07:28,554
some compliance part, but it's also about technology,

89
00:07:28,672 --> 00:07:32,126
about inventing new things. Please leave me.

90
00:07:32,228 --> 00:07:36,350
Today I'm going to provide you with four, remember this number

91
00:07:36,420 --> 00:07:40,750
with four practical recommendations that could probably close 80%

92
00:07:40,820 --> 00:07:45,090
real could security problems related to development.

93
00:07:46,710 --> 00:07:48,980
Let's talk about benefits,

94
00:07:50,150 --> 00:07:54,014
actually what SAc in DevOps protests and modern development

95
00:07:54,062 --> 00:07:57,640
practices can bring to the business.

96
00:07:58,330 --> 00:08:01,830
This is definitely increasing time to market faster

97
00:08:02,250 --> 00:08:05,506
development. So security, along with all other DevOps

98
00:08:05,538 --> 00:08:09,474
practices, speed up development. It's scaling,

99
00:08:09,522 --> 00:08:13,242
definitely without properly including seC. It also

100
00:08:13,296 --> 00:08:17,094
will be the burden will be the only compliance, and it's not scalable

101
00:08:17,222 --> 00:08:18,330
flexibility.

102
00:08:21,810 --> 00:08:25,566
I will bring you the one example about flexibility a

103
00:08:25,588 --> 00:08:28,030
little bit later. Transparency.

104
00:08:28,690 --> 00:08:32,946
If you automate everything, if you have clear metrics and all this

105
00:08:33,048 --> 00:08:37,246
stuff, it will be transparent and predictable.

106
00:08:37,438 --> 00:08:41,026
And of course it's bringing trust and

107
00:08:41,208 --> 00:08:44,706
positive brand appeal and et cetera. If you are doing

108
00:08:44,888 --> 00:08:46,310
the good practices,

109
00:08:49,850 --> 00:08:51,880
if you support security.

110
00:08:52,890 --> 00:08:56,454
The only one example, I have a lot of examples, but in the sake of

111
00:08:56,492 --> 00:09:00,218
time, I will bring you the only one example of real value of

112
00:09:00,304 --> 00:09:03,366
fitting security into the modern development.

113
00:09:03,478 --> 00:09:07,894
Let's bring up the case study. I think this is kind of common practice

114
00:09:08,022 --> 00:09:11,838
and this is only one story, but we experience a

115
00:09:11,844 --> 00:09:15,822
lot of the similar story, right? The community

116
00:09:15,956 --> 00:09:19,594
unexpectedly discovered a critical vulnerability and extremely

117
00:09:19,642 --> 00:09:22,640
popular third party, right?

118
00:09:24,050 --> 00:09:27,858
Do remember lock for shell. Please rise your hands.

119
00:09:27,944 --> 00:09:31,394
Of course we remember this story. And if

120
00:09:31,512 --> 00:09:35,134
you are actually without DevOps, without security,

121
00:09:35,272 --> 00:09:38,306
properly integrated and automated,

122
00:09:38,498 --> 00:09:42,162
it takes you three days only for inventory.

123
00:09:42,226 --> 00:09:45,474
If you're medium or big company, it's really changing,

124
00:09:45,522 --> 00:09:48,986
right? To understand whether you really have

125
00:09:49,088 --> 00:09:52,762
this lock for j

126
00:09:52,816 --> 00:09:56,518
companies, right? And whether you're affected one week for auto

127
00:09:56,534 --> 00:10:00,478
cycle release, probably if you're a software company or for

128
00:10:00,564 --> 00:10:04,186
updating all your systems, because actually it's

129
00:10:04,218 --> 00:10:07,406
not so one time if you

130
00:10:07,428 --> 00:10:10,990
don't have security in your DevOps practices,

131
00:10:11,490 --> 00:10:15,442
additional surprise, you can find other third practices living

132
00:10:15,496 --> 00:10:17,620
for years in your code, right?

133
00:10:18,790 --> 00:10:22,274
That's a big deal. But with security,

134
00:10:22,392 --> 00:10:26,006
please pay attention at the right side of the slide. With security in

135
00:10:26,028 --> 00:10:29,762
DevOps, it's simple, thanks to implemented

136
00:10:29,826 --> 00:10:33,558
continuous security, right, we understand

137
00:10:33,644 --> 00:10:37,458
all our components so that we store logs,

138
00:10:37,554 --> 00:10:41,802
we can really quickly understand where

139
00:10:41,856 --> 00:10:45,434
we are affected, right? And probably even if we are big

140
00:10:45,472 --> 00:10:49,254
company, we're spending two to three days for out of cycle release

141
00:10:49,302 --> 00:10:52,894
for our software or for our services or whatever. Thanks to

142
00:10:52,932 --> 00:10:56,622
automation, thanks to SEC, properly integrated into

143
00:10:56,676 --> 00:10:59,498
the DevOps, that's a real practice,

144
00:10:59,594 --> 00:11:02,834
real example of benefits that

145
00:11:02,872 --> 00:11:04,900
security can bring up to your business.

146
00:11:06,230 --> 00:11:10,546
The most popular security box guys, this is a

147
00:11:10,568 --> 00:11:15,086
barely fresh statistic this year from

148
00:11:15,128 --> 00:11:18,694
the wear code. Don't really

149
00:11:18,812 --> 00:11:22,514
dig into the graphics, but I just prepared

150
00:11:22,562 --> 00:11:25,720
for you the outcome of this statistic that show

151
00:11:26,090 --> 00:11:29,778
top four most popular security bugs.

152
00:11:29,954 --> 00:11:33,946
I mean, they probably have

153
00:11:33,968 --> 00:11:38,442
been changing a little bit over the year, but anyway, this is again,

154
00:11:38,576 --> 00:11:42,954
buffer overflow. Underflow. We have been talking about that

155
00:11:43,072 --> 00:11:46,202
for over the years, over decades,

156
00:11:46,266 --> 00:11:49,978
maybe error and input handling, crypto implementation.

157
00:11:50,154 --> 00:11:53,954
All of this stuff appears, and appears as a bug, as a security

158
00:11:54,072 --> 00:11:57,700
problems that could lead to the real breaches, that could lead to the

159
00:11:59,030 --> 00:12:03,474
lose of the reputation and et cetera. So SEC

160
00:12:03,592 --> 00:12:08,086
into DevOps can help solve these problems.

161
00:12:08,268 --> 00:12:11,106
How we are going to do that in practice,

162
00:12:11,218 --> 00:12:15,538
right. The first advice,

163
00:12:15,634 --> 00:12:19,954
of course, to build up the full SDL

164
00:12:20,002 --> 00:12:23,978
or SDLC security development lifecycle. All this stuff,

165
00:12:24,064 --> 00:12:28,138
this is heavyweight, but if you're big or

166
00:12:28,224 --> 00:12:32,400
even the medium company, probably you must do that.

167
00:12:33,250 --> 00:12:36,830
For example, modern companies, the industry leaders

168
00:12:38,370 --> 00:12:42,138
like intel, build up their heavyweight systems.

169
00:12:42,234 --> 00:12:45,778
And I encourage you to take a

170
00:12:45,784 --> 00:12:49,294
look at the white paper, which is free, which is accessible supply chain

171
00:12:49,342 --> 00:12:53,342
threats made by senior engineers from intel.

172
00:12:53,406 --> 00:12:57,842
So there's a lot of considerations, including actually DevOps

173
00:12:57,906 --> 00:13:00,950
considerations and practice and recommendations.

174
00:13:03,850 --> 00:13:07,506
You can do that by following the

175
00:13:07,548 --> 00:13:10,410
standards, by following the industry leaders.

176
00:13:11,470 --> 00:13:14,778
It's of course the first thing that comes to

177
00:13:14,944 --> 00:13:18,090
your mind. But remember our topic,

178
00:13:18,590 --> 00:13:23,830
to build security and

179
00:13:23,840 --> 00:13:27,534
security into the DevOps without security team.

180
00:13:27,652 --> 00:13:30,670
So this is probably heavyweight. Still good practice,

181
00:13:31,010 --> 00:13:34,834
but heavyweight because usually when we

182
00:13:34,872 --> 00:13:37,140
start to think about security,

183
00:13:37,910 --> 00:13:40,130
you guys as a developers,

184
00:13:41,670 --> 00:13:45,202
as engineers, not really 100% security

185
00:13:45,336 --> 00:13:47,780
professionals may think, well,

186
00:13:48,630 --> 00:13:51,862
it take me, I don't know, years to

187
00:13:51,916 --> 00:13:55,682
integrate all these practices. I like this diagram

188
00:13:55,746 --> 00:13:59,274
by accelera because it's representing or

189
00:13:59,312 --> 00:14:03,494
summarizing the common 17 devsecops

190
00:14:03,542 --> 00:14:07,190
controls that you may need to implement

191
00:14:07,270 --> 00:14:10,826
to build the, let's say true heavyweight devsecops

192
00:14:10,858 --> 00:14:16,366
process and everything. But the

193
00:14:16,388 --> 00:14:19,630
thing is that small and even medium companies, for example,

194
00:14:19,700 --> 00:14:22,718
often don't have time or resources to do that,

195
00:14:22,804 --> 00:14:25,842
right? To implement all of that stuff.

196
00:14:25,976 --> 00:14:29,986
So I really encourage you to take a look at the

197
00:14:30,168 --> 00:14:33,602
points that really matters. And from my opinion that could

198
00:14:33,656 --> 00:14:37,270
you help to solve up to 18%

199
00:14:37,420 --> 00:14:40,950
of all security related problems or your security

200
00:14:41,020 --> 00:14:43,970
related stuff in your development cycle.

201
00:14:44,130 --> 00:14:48,006
On your flexible development process, you might

202
00:14:48,028 --> 00:14:52,122
ask what to do first, right? With the most valuable quick

203
00:14:52,176 --> 00:14:55,814
wins. That's why let's have a look at the practical recommendations

204
00:14:55,942 --> 00:14:59,590
that doesn't require actually a security team. At the nutshell,

205
00:14:59,670 --> 00:15:03,402
of course, it's good to have fully dedicated security professionals,

206
00:15:03,466 --> 00:15:06,378
but you can implement,

207
00:15:06,474 --> 00:15:11,166
at least at the certain level, these four recommendations without

208
00:15:11,268 --> 00:15:15,262
security team. And you remember what I promised

209
00:15:15,326 --> 00:15:19,346
you, four recommendations, but I lied a little bit.

210
00:15:19,448 --> 00:15:23,060
Sorry about that. Actually it will be

211
00:15:23,990 --> 00:15:26,310
four and plus two bonuses.

212
00:15:27,370 --> 00:15:30,150
In summary, six recommendations.

213
00:15:31,290 --> 00:15:34,630
Let's take an example, the GitHub.

214
00:15:38,510 --> 00:15:42,006
Let's turn back for a sec. These four recommendations

215
00:15:42,198 --> 00:15:46,374
will relate to static analysis, to software

216
00:15:46,422 --> 00:15:50,562
composition analysis, to roles and secrets, and to vulnerabilities

217
00:15:50,646 --> 00:15:54,542
scanning. Again, I pose that

218
00:15:54,676 --> 00:15:57,806
that is very important, at least if

219
00:15:57,828 --> 00:16:01,182
you are starting, because everything else could

220
00:16:01,236 --> 00:16:05,406
follow, right? Okay, let's return to the examples.

221
00:16:05,518 --> 00:16:09,074
These four areas could and should be

222
00:16:09,112 --> 00:16:12,350
covered primarily by your native

223
00:16:12,430 --> 00:16:15,170
development tools that you're really utilizing.

224
00:16:16,170 --> 00:16:19,398
I have been talking over and over again,

225
00:16:19,564 --> 00:16:23,414
like don't try to buy and to

226
00:16:23,452 --> 00:16:27,110
implement a lot of security tools, a lot of security stuff,

227
00:16:27,180 --> 00:16:30,534
of course, that's good. But first of all, please take a look

228
00:16:30,572 --> 00:16:34,470
at the native tools that you probably already have,

229
00:16:34,620 --> 00:16:38,242
right? If you're using GitHub, if you're using GitLab

230
00:16:38,306 --> 00:16:41,994
or other great development

231
00:16:42,042 --> 00:16:46,234
tools, please pay attention to its native

232
00:16:46,362 --> 00:16:49,818
security features. I bring up the GitHub

233
00:16:49,914 --> 00:16:53,474
not for advertising, just for an example. Again,

234
00:16:53,592 --> 00:16:58,046
GitLab and other stuff. They include

235
00:16:58,158 --> 00:17:01,442
their own security embedded features that you're going to use

236
00:17:01,496 --> 00:17:05,810
first, instead of trying to implement something alien,

237
00:17:05,890 --> 00:17:09,890
right? For stack analysis, GitHub has Codeql.

238
00:17:09,970 --> 00:17:13,686
For SCA, it has dependable which is basically a

239
00:17:13,708 --> 00:17:17,046
free and open source renovate bot. This is a

240
00:17:17,068 --> 00:17:20,742
great stuff for checking and automatically updating your

241
00:17:20,796 --> 00:17:24,794
dependencies. For secret scanning, this is yet

242
00:17:24,832 --> 00:17:28,460
another embedded feature and for vulnerability scanning as well.

243
00:17:28,830 --> 00:17:32,142
Part of that is free, especially for open

244
00:17:32,196 --> 00:17:36,170
source. For your open source project, if you are developing

245
00:17:36,250 --> 00:17:39,422
closed source proprietary some

246
00:17:39,476 --> 00:17:42,934
of these features, you need to buy the subscription.

247
00:17:43,002 --> 00:17:46,900
But again, please pay attention to embedded features because

248
00:17:49,350 --> 00:17:53,310
it will save you a lot of time not to try to implement

249
00:17:53,390 --> 00:17:57,462
something external. But firstly pay attention to embedded stuff

250
00:17:57,596 --> 00:18:00,166
that could be done without security team,

251
00:18:00,268 --> 00:18:04,226
especially stuff like dependable stuff like secret

252
00:18:04,418 --> 00:18:07,894
scanning and everything else. I mean

253
00:18:07,932 --> 00:18:12,122
that's simple. That's really simple. I haven't experienced to turn

254
00:18:12,176 --> 00:18:16,314
it on by the small companies

255
00:18:16,512 --> 00:18:20,250
and that cost nothing. I mean in terms of resources.

256
00:18:21,650 --> 00:18:25,406
Another example about open source and free tools. If you

257
00:18:25,508 --> 00:18:29,214
want to leverage not only your

258
00:18:29,252 --> 00:18:32,550
development environment and devsecops

259
00:18:32,650 --> 00:18:36,370
tools, you can use external tools.

260
00:18:36,710 --> 00:18:40,562
But there are a lot of open source stuff that I share with you right

261
00:18:40,616 --> 00:18:43,380
now. Please take it and use it.

262
00:18:44,230 --> 00:18:47,462
I put the asterisks here because

263
00:18:47,596 --> 00:18:51,414
not of this tool is free for everybody and for every case and for

264
00:18:51,452 --> 00:18:54,822
every programming language, but it's still kind of

265
00:18:54,876 --> 00:18:58,906
free for something. For example, Bandit, right? This is

266
00:18:58,928 --> 00:19:02,346
a native tool for scanning Python and this is free.

267
00:19:02,448 --> 00:19:06,698
This is not really static analysis tools, rather scanning for security

268
00:19:06,784 --> 00:19:10,198
practices. But anyway, this is native for languages.

269
00:19:10,294 --> 00:19:13,406
And when you're going to choose static analysis tools to

270
00:19:13,428 --> 00:19:17,114
scan your source code for insecure functions

271
00:19:17,162 --> 00:19:20,414
for all this stuff, I would suggest you to use

272
00:19:20,532 --> 00:19:23,914
the tools that's specifically designed for languages.

273
00:19:24,042 --> 00:19:27,394
I mean even, especially if you are looking for

274
00:19:27,432 --> 00:19:30,642
open source bandit, this is for Python, for example,

275
00:19:30,696 --> 00:19:34,146
rips, this is for PHP, samegraph, it's good for C

276
00:19:34,168 --> 00:19:37,880
sharp, go Java and eT are of course

277
00:19:39,130 --> 00:19:42,278
there are a lot of tools that,

278
00:19:42,364 --> 00:19:44,710
let's say support multilanguage,

279
00:19:48,010 --> 00:19:51,178
but some of them good with only

280
00:19:51,264 --> 00:19:55,002
specific languages. And this is great. I mean, one size

281
00:19:55,056 --> 00:19:58,710
doesn't fit. All right, for software composition

282
00:19:58,870 --> 00:20:03,086
analysis, the blue square on

283
00:20:03,108 --> 00:20:07,434
your screen, there are a lot of great proprietary

284
00:20:07,482 --> 00:20:11,310
tools, but you can use the free stuff. You can use open source stuff.

285
00:20:11,460 --> 00:20:14,674
For example, dependency check dependency track is

286
00:20:14,712 --> 00:20:18,530
fully free for understanding

287
00:20:19,670 --> 00:20:23,186
your bomb software, bullets of materials and

288
00:20:23,208 --> 00:20:26,194
vulnerabilities of your third practices that you're consuming,

289
00:20:26,242 --> 00:20:29,762
that you're integrating to your code for binary

290
00:20:29,826 --> 00:20:33,474
tools. Actually there are lack

291
00:20:33,522 --> 00:20:37,282
of good tools, but we at intel

292
00:20:37,426 --> 00:20:40,490
internally build the CVE binary tool.

293
00:20:40,560 --> 00:20:44,374
CVE checking for CV and we have open sourced

294
00:20:44,422 --> 00:20:47,974
that. Please feel free to use that for secret

295
00:20:48,022 --> 00:20:52,010
scanning. It's also not a big deal. So you can use Gitgarden,

296
00:20:52,090 --> 00:20:55,774
which is proprietary but still have a free plan for

297
00:20:55,812 --> 00:20:59,120
somebody it fits. Git leaks whispers this is free.

298
00:20:59,650 --> 00:21:03,182
Please, you use some special stuff for secret management.

299
00:21:03,246 --> 00:21:06,562
Again, this is all either open source or free.

300
00:21:06,616 --> 00:21:10,900
You can easily integrate that. And again,

301
00:21:12,630 --> 00:21:16,346
I intentionally brought up all of these tools because they're

302
00:21:16,398 --> 00:21:19,990
really easy to be integrated into

303
00:21:20,060 --> 00:21:23,574
your development processes without, let's say,

304
00:21:23,612 --> 00:21:27,606
a lot of specific security knowledge. Again, it's really good

305
00:21:27,788 --> 00:21:31,094
to have security team and to use their experience. But if you don't

306
00:21:31,142 --> 00:21:34,422
have any, these tools could be integrated

307
00:21:34,486 --> 00:21:38,342
because the most of them are really development

308
00:21:38,406 --> 00:21:42,702
centric, not security centric for

309
00:21:42,756 --> 00:21:46,558
vulnerability scanning. Of course we have a lot of free stuff.

310
00:21:46,644 --> 00:21:49,822
It depends on what you're really looking for in terms

311
00:21:49,876 --> 00:21:53,442
of vulnerabilities. But there are a lot of tools still

312
00:21:53,496 --> 00:21:56,866
available, even for free. Okay,

313
00:21:57,048 --> 00:22:00,402
let's switch to the first bonus. This is for

314
00:22:00,456 --> 00:22:04,194
containers and kubernetes. Again, this is small

315
00:22:04,232 --> 00:22:08,150
text on the slide, but it's all clickable so you can follow

316
00:22:08,220 --> 00:22:10,950
the links and check it out offline.

317
00:22:11,850 --> 00:22:15,634
Pretty much everything that we as a developers

318
00:22:15,682 --> 00:22:18,882
build up, guys we offer as a containers,

319
00:22:18,946 --> 00:22:22,234
right? Or even we build our infrastructure based on

320
00:22:22,272 --> 00:22:26,294
containers and use some kind of steering

321
00:22:26,342 --> 00:22:29,846
stuff like kubernetes or Openshift

322
00:22:29,878 --> 00:22:33,600
or whatever. So there are four key

323
00:22:34,050 --> 00:22:37,962
messages I wanted to deliver to you. Don't forget, of course, to secure

324
00:22:38,026 --> 00:22:42,374
your container on Kubernetes stuff. The left side of the slide represents

325
00:22:42,522 --> 00:22:46,754
the answer to the question, what could possibly go wrong in

326
00:22:46,792 --> 00:22:49,714
the container world? A lot of stuff could wrong,

327
00:22:49,832 --> 00:22:53,090
right? Escape from containers, leakages,

328
00:22:53,430 --> 00:22:56,642
escalation of privileges. There are a lot of real

329
00:22:56,696 --> 00:22:59,814
world examples. I don't have time to show all the real

330
00:22:59,852 --> 00:23:03,030
world examples. And it's happened again and again. You know, every single

331
00:23:03,100 --> 00:23:06,018
year we see some major breach,

332
00:23:06,114 --> 00:23:09,478
for example, or data leakage or attack

333
00:23:09,564 --> 00:23:13,306
or whatever, or ransomware even, right? Because of

334
00:23:13,408 --> 00:23:16,458
breaching container stuff. So first of all,

335
00:23:16,544 --> 00:23:19,178
select image responsibly, right?

336
00:23:19,344 --> 00:23:22,958
It's really crucial to understand

337
00:23:23,124 --> 00:23:26,858
what base operation system image you're

338
00:23:26,874 --> 00:23:30,890
going to use. Please pay attention and scrutinize

339
00:23:31,050 --> 00:23:34,594
and figure that out. That probably

340
00:23:34,712 --> 00:23:38,670
it would make sense to use scratch

341
00:23:38,750 --> 00:23:41,778
or barely scratch the operation system,

342
00:23:41,864 --> 00:23:44,820
distros, busybox or whatever.

343
00:23:45,370 --> 00:23:49,110
The second advice is utilize all, of course best practices

344
00:23:50,410 --> 00:23:54,390
when your code, when you write

345
00:23:54,460 --> 00:23:58,594
up your docker files, your configurations use official

346
00:23:58,642 --> 00:24:02,362
docker security guidance, use OASP cheap sheet, for example,

347
00:24:02,496 --> 00:24:05,340
when building containers from docker files, right?

348
00:24:05,710 --> 00:24:09,366
Run scanning tools and intel

349
00:24:09,398 --> 00:24:13,390
tools like headerlint for example, or Trevor or Taber,

350
00:24:13,890 --> 00:24:17,310
which could help you to understand your

351
00:24:17,380 --> 00:24:21,514
configurations. And this is really good, these tools.

352
00:24:21,562 --> 00:24:25,282
I'm going to share you that these tools are used

353
00:24:25,336 --> 00:24:28,542
by the major companies even because as the developers

354
00:24:28,606 --> 00:24:31,010
even we are really professionals,

355
00:24:32,310 --> 00:24:36,134
we don't have enough bandwidth, right? And physical ability to

356
00:24:36,252 --> 00:24:39,222
understand, to figure out all our code,

357
00:24:39,276 --> 00:24:43,138
all our mistakes. Please use this automation.

358
00:24:43,314 --> 00:24:46,994
Again, our today's talk is about how to integrate

359
00:24:47,042 --> 00:24:49,330
SEC into DevOps.

360
00:24:49,490 --> 00:24:53,062
Everything that I'm sharing today is

361
00:24:53,116 --> 00:24:56,710
easily integrated, is easily automated. Each single

362
00:24:56,780 --> 00:24:59,666
tool that's on my slide.

363
00:24:59,698 --> 00:25:03,882
So could be automation inside your pipeline,

364
00:25:04,026 --> 00:25:07,854
right? The next one verify secrets. That is

365
00:25:07,892 --> 00:25:12,486
clear. A lot of examples how secrets

366
00:25:12,538 --> 00:25:16,510
could squeeze into the yaml files container images

367
00:25:16,590 --> 00:25:20,434
through the different layers and then could be exposed to the

368
00:25:20,472 --> 00:25:23,122
public. Tokens, internal information,

369
00:25:23,256 --> 00:25:27,014
passwords, et cetera. Please pay automation to that. And the last

370
00:25:27,052 --> 00:25:30,294
one about containers. Consider runtime security when

371
00:25:30,332 --> 00:25:33,574
you are running your Kubernetes clusters, right?

372
00:25:33,772 --> 00:25:37,770
Use official Kubernetes security guides or openshift security

373
00:25:37,840 --> 00:25:41,660
guides or ranger security guides, right? Depends on

374
00:25:42,830 --> 00:25:46,538
what system are you using. There are

375
00:25:46,544 --> 00:25:49,942
a lot of hardening guides provided by

376
00:25:50,096 --> 00:25:55,534
state, for example NSA or CISA best

377
00:25:55,572 --> 00:25:58,986
practices or whatever. Please do not hesitate

378
00:25:59,098 --> 00:26:02,570
to implement the

379
00:26:02,660 --> 00:26:06,430
policy agent, the service mesh

380
00:26:06,510 --> 00:26:10,930
and everything that already exists

381
00:26:12,470 --> 00:26:16,550
by nature in kubernetes could and

382
00:26:16,620 --> 00:26:19,400
the last one, guys, I wanted to share,

383
00:26:20,570 --> 00:26:24,722
bonus number two, make all artifacts trusted.

384
00:26:24,866 --> 00:26:28,418
That is something that's advanced.

385
00:26:28,594 --> 00:26:31,978
I can say you are going

386
00:26:32,144 --> 00:26:35,578
to do that at the very beginning when you're just thinking

387
00:26:35,664 --> 00:26:39,574
about setting up your devsec ops

388
00:26:39,622 --> 00:26:43,086
environments, right? It's for more major companies. But I

389
00:26:43,108 --> 00:26:46,762
have to mention that because all of these supply chain

390
00:26:46,826 --> 00:26:50,878
problems that we have, really hard companies

391
00:26:50,964 --> 00:26:55,166
around the world, hard customers and users

392
00:26:55,198 --> 00:26:58,898
and et cetera. So what is Salsa? Salsa is

393
00:26:58,904 --> 00:27:02,430
an open framework that help you to understand and justify

394
00:27:02,510 --> 00:27:05,974
originality of every artifact on each

395
00:27:06,012 --> 00:27:09,346
development stage from intake or make source

396
00:27:09,378 --> 00:27:12,950
to build and release, right? And to

397
00:27:13,020 --> 00:27:16,806
achieve that. So basically you need to keep so

398
00:27:16,828 --> 00:27:20,220
called provenance as an example.

399
00:27:20,830 --> 00:27:24,650
At the right side of this slide you can see this

400
00:27:24,800 --> 00:27:28,202
provenance, what is it? It's metadata or

401
00:27:28,336 --> 00:27:32,254
full history about how an artifact was produced at

402
00:27:32,292 --> 00:27:36,030
each stage. The idea is pretty much simple,

403
00:27:36,180 --> 00:27:40,266
right? Keep along with all your artifacts,

404
00:27:40,298 --> 00:27:43,474
all your binaries, all your configurations, all your

405
00:27:43,512 --> 00:27:46,926
stuff that you're producing during your development lifecycle,

406
00:27:47,038 --> 00:27:50,414
from intaking third parties through development,

407
00:27:50,542 --> 00:27:54,846
through packaging, to delivering

408
00:27:54,878 --> 00:27:57,480
your products to the customer or to the world,

409
00:27:57,930 --> 00:28:01,320
keeping the information, the history,

410
00:28:02,490 --> 00:28:05,960
the origination information of all this,

411
00:28:07,050 --> 00:28:11,210
how, when and why and by whom this

412
00:28:11,280 --> 00:28:14,954
artifact was built. So this

413
00:28:14,992 --> 00:28:18,522
is what provenance is

414
00:28:18,576 --> 00:28:24,074
about. Basically the idea is simple implementation

415
00:28:24,202 --> 00:28:27,902
is maybe more hard,

416
00:28:27,956 --> 00:28:31,486
but anyway it's kind of not so big deal as

417
00:28:31,508 --> 00:28:32,080
well.

418
00:28:34,950 --> 00:28:38,514
It's open framework, you can easily find it

419
00:28:38,552 --> 00:28:41,970
by the link and basically achieving salsa level two

420
00:28:42,120 --> 00:28:45,694
level of maturity. It's not a big deal because that means

421
00:28:45,752 --> 00:28:48,722
that for source code you have your version controlled.

422
00:28:48,786 --> 00:28:52,630
Basically, I believe even for small companies you control

423
00:28:52,700 --> 00:28:56,562
your versions, right? So it's just you have these vcs

424
00:28:56,626 --> 00:29:00,140
systems and et cetera for build stuff,

425
00:29:00,830 --> 00:29:04,586
scripted build and build service exist and is in place.

426
00:29:04,688 --> 00:29:07,974
So basically you are not built manually,

427
00:29:08,102 --> 00:29:13,202
right? You have a build system, you have artifactory,

428
00:29:13,286 --> 00:29:17,166
Jenkins or whatever, all these tools in place and all

429
00:29:17,188 --> 00:29:20,250
this automated. And you have all these YAML configurations,

430
00:29:20,330 --> 00:29:24,014
you can check these configurations, everything is under control.

431
00:29:24,132 --> 00:29:28,270
So this is what's all about. And the last one is provenance,

432
00:29:28,350 --> 00:29:31,780
right? This metadata that

433
00:29:32,950 --> 00:29:36,370
you store, you keep with all your artifacts,

434
00:29:36,450 --> 00:29:40,226
it is available, right, for checking.

435
00:29:40,418 --> 00:29:44,502
Provenance is authenticated and

436
00:29:44,556 --> 00:29:49,050
service generated, basically generating automatically.

437
00:29:49,950 --> 00:29:53,770
You of course can and could automatic provenance creation using

438
00:29:53,920 --> 00:29:57,750
Salsa GitHub actions, for example, if you are using GitHub

439
00:29:57,830 --> 00:30:01,650
or easily integrate these tools to your existing

440
00:30:01,750 --> 00:30:05,754
CI CD tools. If you are not using GitHub, for example, if you use Jenkins,

441
00:30:05,802 --> 00:30:09,054
Travis CI or whatever, it's not a problem. You can

442
00:30:09,092 --> 00:30:11,310
integrate into these systems.

443
00:30:12,210 --> 00:30:15,700
That's another great tool, insertoid station tool. You can

444
00:30:16,630 --> 00:30:20,286
attest that and use cosine for generating and verifying

445
00:30:20,318 --> 00:30:23,586
signatures of that stuff. Again, this is kind

446
00:30:23,608 --> 00:30:28,120
of framework and more the idea

447
00:30:28,730 --> 00:30:32,774
that you can take and use and think

448
00:30:32,812 --> 00:30:36,802
about that again, this is idea is pretty trivial.

449
00:30:36,946 --> 00:30:39,978
But if you start to do that,

450
00:30:40,144 --> 00:30:43,462
there will be more trust to your artifacts,

451
00:30:43,526 --> 00:30:47,322
even by yourselves and by your partners, of course your

452
00:30:47,376 --> 00:30:51,230
customers or whatever. And again, that is

453
00:30:51,300 --> 00:30:54,974
all automatable. That's why I bring

454
00:30:55,012 --> 00:30:58,494
it up and would like to pay your attention to this

455
00:30:58,532 --> 00:31:02,410
stuff. It all could be integrated into your DevOps

456
00:31:02,490 --> 00:31:06,642
CI CD pipeline easily and that

457
00:31:06,696 --> 00:31:09,950
helps you to fit sac really easily

458
00:31:10,030 --> 00:31:14,462
to your DevOps practices. To have the full devsecops.

459
00:31:14,606 --> 00:31:18,440
And actually sometimes without really security team.

460
00:31:19,770 --> 00:31:23,510
That's basically pretty much it. I wanted to talk about today.

461
00:31:23,580 --> 00:31:27,400
I hope you learned something useful. Got an idea?

462
00:31:29,050 --> 00:31:32,774
Please do not hesitate to follow all the link and reference I share. That's all

463
00:31:32,812 --> 00:31:36,406
free. And please reach out to me in case if

464
00:31:36,428 --> 00:31:39,990
you have any questions. That was my pleasure folks.

465
00:31:40,450 --> 00:31:44,334
Please enjoy the rest of your day and take

466
00:31:44,372 --> 00:31:44,718
care.

