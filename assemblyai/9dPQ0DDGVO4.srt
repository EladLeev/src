1
00:00:25,490 --> 00:00:29,142
Hello everyone. I'm very happy to be here with you all, even if

2
00:00:29,196 --> 00:00:32,722
remotely. In this talk, we see together how to build various

3
00:00:32,786 --> 00:00:36,902
types of maps from sketch using Django. If you're asking yourself

4
00:00:37,036 --> 00:00:40,966
what type of map we can build with Django, let's see an example

5
00:00:41,068 --> 00:00:44,614
together right away. These maps show mountains, peaks and

6
00:00:44,652 --> 00:00:47,974
spot elevation location. We all use maps like

7
00:00:48,012 --> 00:00:51,822
this every day in web or mobile application. I built

8
00:00:51,876 --> 00:00:55,274
this maps with Django using the free natural herd

9
00:00:55,322 --> 00:00:58,458
geography map data set. In this talk we'll

10
00:00:58,474 --> 00:01:01,966
see together how to build a maps like that. But first

11
00:01:02,068 --> 00:01:05,514
I'll present myself. I'm Paolo Merci and I'm

12
00:01:05,562 --> 00:01:08,990
the CTO of 20 tab, a photonic software

13
00:01:09,070 --> 00:01:12,818
company based in Rome for which I work remotely. I'm a

14
00:01:12,824 --> 00:01:16,734
software engineer and longtime python backend developer.

15
00:01:16,862 --> 00:01:20,406
After using Django for a few years, I became a contributor to

16
00:01:20,428 --> 00:01:23,858
the project. I also really like hiking in the mountains,

17
00:01:23,954 --> 00:01:27,654
so I decided to build a map where I can put all

18
00:01:27,692 --> 00:01:31,450
the points I've reached. I took this photo from the starting

19
00:01:31,520 --> 00:01:34,826
point of my last hike. I was on the

20
00:01:34,848 --> 00:01:38,394
italian Apenines and the sun has not yet

21
00:01:38,432 --> 00:01:41,694
risen. But trust me, in the distance there is the

22
00:01:41,732 --> 00:01:45,054
adriatic sea. The making of this map will

23
00:01:45,092 --> 00:01:48,462
be a bit like this hike. We'll start from an easy

24
00:01:48,516 --> 00:01:51,998
stretch with little slope and then we'll go up

25
00:01:52,084 --> 00:01:55,434
in altitude where things will get more challenging.

26
00:01:55,562 --> 00:01:59,950
But let's start from the basic about web maps a webmap

27
00:02:00,030 --> 00:02:03,358
have many features. It can be static or dynamic.

28
00:02:03,454 --> 00:02:07,394
You can interact with it, or you can only view it. The map

29
00:02:07,442 --> 00:02:11,522
can use raster or vector tiles to represent the surface.

30
00:02:11,666 --> 00:02:15,042
Usually the data is stored in a special database

31
00:02:15,186 --> 00:02:18,358
and a webmap will use a Javascript library

32
00:02:18,454 --> 00:02:21,370
to show data on your web pages.

33
00:02:21,710 --> 00:02:25,274
On Wikipedia regarding webmaps, we can read that.

34
00:02:25,392 --> 00:02:28,966
Webmap is the process of using the maps

35
00:02:29,078 --> 00:02:32,366
delivered by geographic information system on the

36
00:02:32,388 --> 00:02:35,806
Internet. But implementing a geographic information

37
00:02:35,908 --> 00:02:39,038
system from scratch is beyond the scope of this talk.

38
00:02:39,124 --> 00:02:42,854
To do this, as you can imagine, we are going to use Django,

39
00:02:42,922 --> 00:02:46,562
my preferred web framework. The requirements to create

40
00:02:46,616 --> 00:02:49,762
our map with Django are a stable and

41
00:02:49,816 --> 00:02:53,426
supported version of Python and the latest stable version of

42
00:02:53,448 --> 00:02:56,834
Django itself. In my example, I've installed

43
00:02:56,882 --> 00:03:00,742
it in a virtual environment. To create the

44
00:03:00,796 --> 00:03:04,450
mymap project. I switch to my project directory

45
00:03:04,530 --> 00:03:08,742
and then users the start project Django command. The basic files

46
00:03:08,806 --> 00:03:12,390
of our project will be created. After switching

47
00:03:12,470 --> 00:03:16,246
to the MyMap directory, we create our markers

48
00:03:16,358 --> 00:03:19,562
hub with a Django startup command. Again,

49
00:03:19,696 --> 00:03:23,280
all the necessary file will be created for us.

50
00:03:23,650 --> 00:03:27,534
Now we have CTO activate our markers application by

51
00:03:27,572 --> 00:03:31,162
inserting its name in the list of installed apps

52
00:03:31,226 --> 00:03:34,594
in the mymap settings file. At this point we can

53
00:03:34,632 --> 00:03:37,778
proceed CTO insert in the markers views file a

54
00:03:37,784 --> 00:03:41,346
new template view for the page of our map in the

55
00:03:41,368 --> 00:03:44,974
markers template directory. We can now create a template

56
00:03:45,022 --> 00:03:48,562
file for our map. For now we add only usual

57
00:03:48,626 --> 00:03:52,726
boilerplate with a title but without a body content in

58
00:03:52,748 --> 00:03:56,274
the marker's URL file. We must now add the path

59
00:03:56,322 --> 00:04:00,282
to view our map using its template view. As the last

60
00:04:00,336 --> 00:04:03,686
step, we include in turn the URL file

61
00:04:03,718 --> 00:04:07,130
of the marker app in that of the project.

62
00:04:07,280 --> 00:04:10,778
We just made a first view in Django, but it will show a

63
00:04:10,784 --> 00:04:14,254
black page so we can avoid checking the browser content.

64
00:04:14,372 --> 00:04:18,062
And let's move on with something more challenging. I took

65
00:04:18,116 --> 00:04:21,498
this photo after an hour of working in the dark.

66
00:04:21,594 --> 00:04:25,250
You can see the sunrise is in the distance. We are about

67
00:04:25,320 --> 00:04:28,926
to start the high altitude path. As for our hike,

68
00:04:29,038 --> 00:04:33,410
something will begin to been seen in our project as well. In fact,

69
00:04:33,560 --> 00:04:37,602
we'll add a blank maps CTo our page using the leaflet library

70
00:04:37,746 --> 00:04:41,234
leaflet is one of the most used JavaScript

71
00:04:41,282 --> 00:04:45,570
libraries for webmaps. It's a free software and it is a desktop

72
00:04:45,650 --> 00:04:49,334
and mobile friendly. Leaflet is very light, it weighs

73
00:04:49,382 --> 00:04:52,982
less than 40, has a very good documentation

74
00:04:53,046 --> 00:04:57,098
that you can read online. To use leaflet we need to link its

75
00:04:57,184 --> 00:05:00,550
JavaScript and CSS module in our template.

76
00:05:00,630 --> 00:05:04,970
We need also a Div tag with map hashid.

77
00:05:05,410 --> 00:05:08,954
In addition, using the static template tag,

78
00:05:09,082 --> 00:05:12,458
we also link our custom JavaScript and

79
00:05:12,484 --> 00:05:16,322
cases file which we'll now create. We had

80
00:05:16,376 --> 00:05:20,258
our CSS file in the static directory and inside

81
00:05:20,344 --> 00:05:24,034
it we add only the basic rule to show a full

82
00:05:24,072 --> 00:05:27,654
screen map in our JavaScript file. We add

83
00:05:27,692 --> 00:05:31,730
the code to view our map using the defined variables.

84
00:05:31,810 --> 00:05:34,594
We initiate an OpenStreet maps layer.

85
00:05:34,722 --> 00:05:38,322
We hook the newly defined layer to our map.

86
00:05:38,386 --> 00:05:42,250
The last statement users a map view that mostly contain the whole world

87
00:05:42,400 --> 00:05:46,122
with the maximum zoom level possible. We can now

88
00:05:46,176 --> 00:05:49,750
start our Django project with the run server command

89
00:05:49,830 --> 00:05:53,502
and we can finally visit our map page. We just

90
00:05:53,556 --> 00:05:57,534
created an empty map with Django. The result is pretty much what

91
00:05:57,572 --> 00:06:01,920
you see now, a map without markers showing the world.

92
00:06:02,470 --> 00:06:06,034
This photo shows the crossroad at the end of

93
00:06:06,072 --> 00:06:09,982
the first part of my hike, just before a very challenging

94
00:06:10,046 --> 00:06:13,586
uphill stretch design arisen for a

95
00:06:13,608 --> 00:06:16,630
while and the landscape is clearly visible around.

96
00:06:16,780 --> 00:06:20,466
Likewise, after having clearly visualized our map,

97
00:06:20,578 --> 00:06:23,638
we'll now start with a bit more elaborate part,

98
00:06:23,724 --> 00:06:27,106
writing more code to create our marker and display

99
00:06:27,138 --> 00:06:30,550
them. It's time to get to know and activate

100
00:06:30,630 --> 00:06:34,054
Geodjango. The Django Geographic module Django

101
00:06:34,102 --> 00:06:37,866
added the geographic functionality a few years ago in the country

102
00:06:37,968 --> 00:06:40,858
GIS module with specific fields,

103
00:06:40,954 --> 00:06:45,258
multiple database backends, special queries and also admin

104
00:06:45,354 --> 00:06:49,166
integration. Since then, many new useful features have

105
00:06:49,188 --> 00:06:53,322
been added every year until the latest version. Before activating

106
00:06:53,386 --> 00:06:57,630
it, we need to install some represents a mandatory

107
00:06:57,710 --> 00:07:00,930
geodjango requirements is gdal.

108
00:07:01,430 --> 00:07:04,514
It's an OS geo library for

109
00:07:04,552 --> 00:07:08,786
reading and writing raster and vector geospatial data format.

110
00:07:08,898 --> 00:07:13,074
It's released with a free software license and it has a variety

111
00:07:13,122 --> 00:07:16,322
of useful command line for data translation

112
00:07:16,386 --> 00:07:20,102
and processing. To easily install the

113
00:07:20,156 --> 00:07:23,706
gdhel package on a Debian based system,

114
00:07:23,808 --> 00:07:28,230
you can use the apt package manager. For other operating

115
00:07:28,310 --> 00:07:32,650
system, you can read specific instructions in the Django documentation.

116
00:07:32,810 --> 00:07:36,234
We can now activate Geodjango by adding

117
00:07:36,282 --> 00:07:39,934
the contrib GIS module to the solid apps in

118
00:07:39,972 --> 00:07:44,478
our project settings. To use Geodjango correctly,

119
00:07:44,574 --> 00:07:48,402
we need to change our database engine and use one of the

120
00:07:48,456 --> 00:07:52,674
compatible database backend. In this case, we have chosen to

121
00:07:52,712 --> 00:07:56,654
use special SQLite. It's a special extension to SQL

122
00:07:56,702 --> 00:08:00,162
SQLite, the Django default database backend.

123
00:08:00,306 --> 00:08:04,214
It provides vector database functionality and

124
00:08:04,252 --> 00:08:08,266
it's released with a free software license. It has a simple

125
00:08:08,368 --> 00:08:12,502
architecture. A complete database is an ordinary

126
00:08:12,566 --> 00:08:16,490
file as before on a debian based system.

127
00:08:16,640 --> 00:08:20,146
We can install the specialite package using the apt

128
00:08:20,198 --> 00:08:23,694
package manager. Let's add spatialite as

129
00:08:23,732 --> 00:08:27,678
a database backend relating the default engine in our

130
00:08:27,764 --> 00:08:30,922
project settings. We can now define

131
00:08:30,986 --> 00:08:34,386
our marker model to store a location and

132
00:08:34,408 --> 00:08:38,110
a name. Our two fields are both mandatory. The location

133
00:08:38,190 --> 00:08:41,998
is a simple point field and we'll use the name to represent

134
00:08:42,094 --> 00:08:45,686
the model. To easily insert new markers in the

135
00:08:45,708 --> 00:08:49,426
map, we use the Django admin interface. We define

136
00:08:49,458 --> 00:08:52,914
a marker admin class by inerting the Geodjango

137
00:08:52,962 --> 00:08:56,722
admin class which use the OpenStreet maps layer

138
00:08:56,786 --> 00:09:01,270
in its widget. We can now generate a new database migrations

139
00:09:01,350 --> 00:09:04,326
and then apply it to our database.

140
00:09:04,438 --> 00:09:07,914
We also create a new super user to access the

141
00:09:07,952 --> 00:09:11,434
admin interface. After starting the project locally,

142
00:09:11,562 --> 00:09:15,450
we can now start our project with the run server command

143
00:09:15,530 --> 00:09:18,590
and we can visit our admin section.

144
00:09:18,930 --> 00:09:22,126
Here is the page for inserting the markers in

145
00:09:22,148 --> 00:09:25,570
our admin. As you can see, we have a text field

146
00:09:25,640 --> 00:09:29,154
CTO enter the name and a widget that we can use to

147
00:09:29,192 --> 00:09:33,106
manually navigate a map and then manually define our point

148
00:09:33,208 --> 00:09:36,766
in the space. After having created more markers,

149
00:09:36,878 --> 00:09:40,854
we can finally show them in our map. We can do that by

150
00:09:40,892 --> 00:09:44,738
adding the information in our view. Here we are retrieving

151
00:09:44,834 --> 00:09:49,878
all the markers from the database and converting them to Geojson

152
00:09:49,974 --> 00:09:53,786
before adding them to the context of our view.

153
00:09:53,968 --> 00:09:57,798
In our template, we use the JSON

154
00:09:57,894 --> 00:10:01,722
script template tag to securely add our markers

155
00:10:01,786 --> 00:10:05,866
to our page. The JSON script template tag

156
00:10:05,898 --> 00:10:07,920
will generate a code like this.

157
00:10:09,010 --> 00:10:13,194
Let's edit our JavaScript file and store the geojson

158
00:10:13,242 --> 00:10:16,706
in a variable. Starting from this variable we build a

159
00:10:16,728 --> 00:10:20,386
layer for our map and we extract also the

160
00:10:20,408 --> 00:10:23,794
name of the single marker. Finally, we add

161
00:10:23,832 --> 00:10:27,346
the layer in our map by setting the view to contains

162
00:10:27,378 --> 00:10:31,126
all the data. We can now start our project with a

163
00:10:31,148 --> 00:10:34,370
run server command and finally see our markers

164
00:10:34,450 --> 00:10:38,002
in our map. In this map we see the few markers

165
00:10:38,066 --> 00:10:41,562
I uploaded through the admin. They are inside the page

166
00:10:41,616 --> 00:10:44,954
code, but the loading is still fluid and fast. You can

167
00:10:44,992 --> 00:10:49,014
also see the pop up on the marker of the peak I'm

168
00:10:49,062 --> 00:10:52,558
relating toward on this ike. But if we add a

169
00:10:52,564 --> 00:10:56,506
lot more markers to show our maps, loading will be much slower

170
00:10:56,618 --> 00:11:00,254
and leaflet will have a harder time rendering it.

171
00:11:00,372 --> 00:11:03,258
We need a more complex solution.

172
00:11:03,434 --> 00:11:07,166
This photo shows a beautiful landscape that came to

173
00:11:07,188 --> 00:11:10,606
my side. At the end of that challenging climb, the IDS

174
00:11:10,638 --> 00:11:14,414
peaks begin to be seen, but there is a still challenging passage

175
00:11:14,542 --> 00:11:18,786
before reaching the summit. We then continue implementing the final version

176
00:11:18,818 --> 00:11:22,930
of our map. First, let's start using PostGIs

177
00:11:23,090 --> 00:11:27,470
as a new backend engine. Postgis is a PostgreSQL

178
00:11:27,570 --> 00:11:31,590
extension and it's also the best database backend for Geodjango.

179
00:11:31,670 --> 00:11:35,354
It internally integrates spatial data and

180
00:11:35,472 --> 00:11:39,718
has spatialite type index and functions.

181
00:11:39,894 --> 00:11:43,418
In order to use PostGIs as a database backend,

182
00:11:43,514 --> 00:11:47,598
we need to install the Postgres C client library. As before,

183
00:11:47,684 --> 00:11:51,690
you can do it easily with the APT package manager.

184
00:11:51,850 --> 00:11:55,182
We modify the project database setting, adding the

185
00:11:55,236 --> 00:11:58,974
PostGIs engine and the connection parameters

186
00:11:59,102 --> 00:12:03,022
of our postgres database, which you may have locally

187
00:12:03,086 --> 00:12:07,126
or remotely. Python requirements of our project

188
00:12:07,228 --> 00:12:10,626
are increasing and therefore a good practice

189
00:12:10,738 --> 00:12:13,894
is to create a requirements file with the package list.

190
00:12:14,012 --> 00:12:16,994
We'll use Python Postgres database adapter,

191
00:12:17,122 --> 00:12:21,238
Django Rest framework, its geographic addon, and also Django

192
00:12:21,254 --> 00:12:25,190
filter. We install all the Python requirements

193
00:12:25,270 --> 00:12:28,410
using the Python package installer module.

194
00:12:29,150 --> 00:12:32,734
The packages that we'll use directly in the code of our

195
00:12:32,772 --> 00:12:36,266
project are Django Rest framework and its geographic

196
00:12:36,298 --> 00:12:40,046
add on, which we then insert in the list of

197
00:12:40,148 --> 00:12:43,810
style adapts of our project settings.

198
00:12:44,230 --> 00:12:47,858
Let's create a serializer for our marker class

199
00:12:48,024 --> 00:12:52,350
in everything from rest framework JS serializer.

200
00:12:52,430 --> 00:12:55,574
We only have to define the marker model,

201
00:12:55,692 --> 00:12:59,266
the geographical field location, and also the optional

202
00:12:59,298 --> 00:13:02,470
fields to be shown as additional properties.

203
00:13:03,290 --> 00:13:06,854
Our intention is to expose our markers via our

204
00:13:06,892 --> 00:13:11,126
RESTful API, and to do so we define a read only viewset.

205
00:13:11,238 --> 00:13:15,478
We set the location as a field to filter our markers

206
00:13:15,574 --> 00:13:19,018
and then a filter based on bound box.

207
00:13:19,184 --> 00:13:22,666
We also return all our marker instances

208
00:13:22,778 --> 00:13:26,734
without limitation or filters. In the

209
00:13:26,772 --> 00:13:30,414
markers application, we define the URL of

210
00:13:30,452 --> 00:13:34,462
our new endpoint using the Django REST framework default

211
00:13:34,526 --> 00:13:36,770
router to create our path.

212
00:13:37,830 --> 00:13:41,970
Finally, we add to the definition of the

213
00:13:42,040 --> 00:13:46,226
URL of our project, a new path for the API that includes

214
00:13:46,338 --> 00:13:49,960
the path just specified for our markers app.

215
00:13:50,650 --> 00:13:53,874
After finishing our RESTful API,

216
00:13:54,002 --> 00:13:57,846
we move on to update our JavaScript file. As we no

217
00:13:57,868 --> 00:14:01,018
longer have the data preloaded on our page,

218
00:14:01,104 --> 00:14:05,082
we no longer have a way to position the map so that it

219
00:14:05,136 --> 00:14:08,678
contains all the markers we tried to locate the user.

220
00:14:08,774 --> 00:14:12,938
In the positive case, we'll use its location to center the maps.

221
00:14:13,034 --> 00:14:17,034
In the negative case, we locate him on an arbitrary

222
00:14:17,082 --> 00:14:21,294
point in the map with a low zoom level by

223
00:14:21,332 --> 00:14:25,182
no longer loading the marker directly on the page. We therefore

224
00:14:25,246 --> 00:14:29,250
ask our endpoint to return only the markers of

225
00:14:29,320 --> 00:14:33,058
the specific displayed area rest APIs

226
00:14:33,144 --> 00:14:37,094
bank box string to build the marker layer, we ask our

227
00:14:37,132 --> 00:14:41,122
endpoint for data asynchronously and extract the properties

228
00:14:41,186 --> 00:14:45,350
we want to show in the popups. We invoke this flow every time

229
00:14:45,420 --> 00:14:49,562
the users stop moving on the map. And finally

230
00:14:49,696 --> 00:14:53,194
here is our complete map. In this example we can

231
00:14:53,232 --> 00:14:57,734
see how the marker in a specific map area look relating

232
00:14:57,862 --> 00:15:01,654
take place in a very fluid way because the number of cases

233
00:15:01,702 --> 00:15:05,610
occur only when the movement on the map stops and therefore

234
00:15:05,690 --> 00:15:08,926
the data traffic is reduced to the essential as well

235
00:15:08,948 --> 00:15:12,190
as the rendering of the marker carried out by leaflet,

236
00:15:12,530 --> 00:15:15,914
the hike has also reached its final destination.

237
00:15:16,042 --> 00:15:19,778
Unfortunately the view is a bit covered, but we can finally add a

238
00:15:19,784 --> 00:15:23,486
new marker on our map. It was one of the longest hike

239
00:15:23,518 --> 00:15:27,160
I ever made and I hope to be able to do new one soon.

240
00:15:27,930 --> 00:15:31,394
There are also many other features that can be added

241
00:15:31,442 --> 00:15:35,382
in the future, for example markers customization and

242
00:15:35,436 --> 00:15:39,622
popup to show more information marker filtering based on relation

243
00:15:39,686 --> 00:15:43,290
data, the clustering of the marker but in the front end

244
00:15:43,360 --> 00:15:47,418
to improve the visualization and backend to make the loading of data

245
00:15:47,504 --> 00:15:50,810
more efficient, use of geocoding services to add

246
00:15:50,880 --> 00:15:54,446
marker locations starting from the address and so on at the

247
00:15:54,468 --> 00:15:57,854
end of the talk before saying goodbye, I want to share with you some

248
00:15:57,892 --> 00:16:01,418
tips based on my experience as a map developer with Django.

249
00:16:01,514 --> 00:16:04,974
The first one is read the documentation in the Django website.

250
00:16:05,092 --> 00:16:08,514
It's full of information about Geodjango. Read also

251
00:16:08,552 --> 00:16:11,842
the details about geographical queries in the post

252
00:16:11,896 --> 00:16:15,314
JS website. It helps you to understand how

253
00:16:15,352 --> 00:16:18,754
things work at a lower level. Read the source

254
00:16:18,802 --> 00:16:22,022
code of Bot project in GitHub because there is

255
00:16:22,076 --> 00:16:25,494
something you can learn only from the code and finally

256
00:16:25,612 --> 00:16:28,422
search for questions on Stack exchange,

257
00:16:28,566 --> 00:16:32,234
but try to answer them by yourself. Last but

258
00:16:32,272 --> 00:16:35,610
not least, you can also study this presentation because

259
00:16:35,680 --> 00:16:38,970
it is released with a Creative Commons license

260
00:16:39,790 --> 00:16:43,070
in Twentytab, the company I work for. We have

261
00:16:43,140 --> 00:16:47,022
developed many map with Django. You can find more about our open

262
00:16:47,076 --> 00:16:51,210
source project and our patonic work using these contacts.

263
00:16:51,370 --> 00:16:54,846
To find out more about my personal work with Python and

264
00:16:54,868 --> 00:16:58,510
Django, use all my contacts using this QR code.

265
00:16:58,660 --> 00:17:02,000
You can download this presentation from my website.

266
00:17:02,770 --> 00:17:06,130
Thanks again for having me. Enjoy the tool in the conference.

