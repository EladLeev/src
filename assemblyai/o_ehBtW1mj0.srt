1
00:01:28,690 --> 00:01:32,086
Whatever problem you want to solve, these are hundreds of

2
00:01:32,108 --> 00:01:35,686
potential open source tools that can help you. Some are

3
00:01:35,708 --> 00:01:39,480
better, some are worse, but when it comes to security,

4
00:01:40,610 --> 00:01:43,946
you don't want to mess around. We at JIT

5
00:01:44,058 --> 00:01:47,838
build a security platform that leverages open source security

6
00:01:47,924 --> 00:01:51,694
tools in order to figure out the best ones we

7
00:01:51,732 --> 00:01:55,154
needed to go on a tool checking journey. I would

8
00:01:55,192 --> 00:01:58,754
love to share that with you. Hi, my name

9
00:01:58,792 --> 00:02:02,274
is Avi Ram. I'm co founder and chief product officer at

10
00:02:02,312 --> 00:02:06,178
JIT, which is a continuous security platform for developers.

11
00:02:06,354 --> 00:02:10,354
What this means is we help dev organizations build secure

12
00:02:10,402 --> 00:02:14,166
applications from day zero by automating security

13
00:02:14,268 --> 00:02:17,750
plans using open source tool that we have curated.

14
00:02:18,510 --> 00:02:21,754
We have researched and tried hundreds of tools to

15
00:02:21,792 --> 00:02:25,206
choose the best ones for our needs. We tested

16
00:02:25,238 --> 00:02:29,290
the tools on real projects and got real results.

17
00:02:30,850 --> 00:02:34,414
This means that we are very much

18
00:02:34,532 --> 00:02:37,946
familiar with various open source security tools

19
00:02:37,978 --> 00:02:41,390
that the market has to offer and I would like to share

20
00:02:41,460 --> 00:02:45,454
insights with you and generate interest among

21
00:02:45,502 --> 00:02:47,570
you regarding these tools.

22
00:02:51,590 --> 00:02:54,738
There are many properties we use to rank the security

23
00:02:54,824 --> 00:02:58,294
tools. Here are some of them. We want to

24
00:02:58,332 --> 00:03:01,654
see a tool that actually detects what it

25
00:03:01,692 --> 00:03:06,038
should true positive rate high true positive rate

26
00:03:06,204 --> 00:03:09,450
and that it has low ratio of false positive.

27
00:03:10,270 --> 00:03:14,390
We want tools that are easy to use. Their output

28
00:03:14,470 --> 00:03:18,474
makes sense and the tools in general should

29
00:03:18,512 --> 00:03:23,454
be easily integrated into these. CI we

30
00:03:23,492 --> 00:03:27,674
want a tool that is supported by large communities of developers

31
00:03:27,722 --> 00:03:31,162
and that in general is maintained

32
00:03:31,226 --> 00:03:32,750
on a regular basis.

33
00:03:34,870 --> 00:03:38,690
In terms of ownership. We see some advantage

34
00:03:39,910 --> 00:03:43,954
when there is a prestigious company behind a tool

35
00:03:44,152 --> 00:03:47,080
because it creates a standard.

36
00:03:48,890 --> 00:03:53,266
In terms of GitHub stacks, these stacks

37
00:03:53,378 --> 00:03:56,866
are a good indicator that the tool is popular.

38
00:03:56,978 --> 00:04:01,450
We also consider that as one important property and

39
00:04:01,520 --> 00:04:05,690
also licensing. We want tools that are free and we have

40
00:04:05,760 --> 00:04:09,094
some preferences to permissive licenses

41
00:04:09,142 --> 00:04:11,390
such as MIT and Apache.

42
00:04:14,930 --> 00:04:18,046
These are the security categories that we will focus at.

43
00:04:18,148 --> 00:04:21,790
These five, though there are many, I believe

44
00:04:21,940 --> 00:04:25,940
these five categories are a good starting point.

45
00:04:27,590 --> 00:04:30,180
So let's start with dependency check.

46
00:04:31,910 --> 00:04:35,226
The mission of dependency check, also known as SCA

47
00:04:35,278 --> 00:04:38,994
software composition analysis, is to detect publicly

48
00:04:39,042 --> 00:04:42,550
disclosed vulnerabilities in project dependencies like

49
00:04:42,620 --> 00:04:45,510
packages, libraries and so forth.

50
00:04:49,470 --> 00:04:53,062
In our list of contestants, we have three tools

51
00:04:53,126 --> 00:04:56,070
which all of them are good retire, JS,

52
00:04:56,150 --> 00:04:59,494
OS dependency check and NPM audit.

53
00:04:59,622 --> 00:05:03,070
All of them detect code vulnerable dependencies.

54
00:05:04,770 --> 00:05:08,154
We decided to go with OS

55
00:05:08,202 --> 00:05:11,754
dependency check. Yeah, that's because of few reasons.

56
00:05:11,882 --> 00:05:15,822
Usability is super efficacy

57
00:05:15,966 --> 00:05:19,826
is very good, high rate of true positive yeah, there are

58
00:05:19,848 --> 00:05:23,620
comes false positive but very good.

59
00:05:24,550 --> 00:05:26,790
Very good rate of true positive.

60
00:05:28,010 --> 00:05:31,698
It's very easy to use and it's

61
00:05:31,714 --> 00:05:35,606
also very popular tool, so we recommend

62
00:05:35,708 --> 00:05:36,680
using it.

63
00:05:40,830 --> 00:05:44,326
In this example we see that there is a dependency named ADM

64
00:05:44,438 --> 00:05:48,406
zap. It's a JavaScript implementation for Zip, data compression

65
00:05:48,438 --> 00:05:51,566
for node JS and it is used in this

66
00:05:51,588 --> 00:05:55,386
project. The dependency I'm

67
00:05:55,418 --> 00:05:58,842
telling you in advance, the dependency contains vulnerabilities.

68
00:05:58,906 --> 00:06:04,038
So let's see how OS dependency check faces

69
00:06:04,074 --> 00:06:04,660
that.

70
00:06:08,630 --> 00:06:12,434
So you can see these is the output of our dependency check and

71
00:06:12,632 --> 00:06:16,594
it identified that this dependency day ADM

72
00:06:16,642 --> 00:06:20,214
Zip is associated with three cvs with

73
00:06:20,252 --> 00:06:27,974
severity level of critical okay,

74
00:06:28,012 --> 00:06:30,902
let's move on to the next category, which is secret detection.

75
00:06:30,966 --> 00:06:34,934
The mission here is to detect hard coded secrets in various

76
00:06:34,982 --> 00:06:38,262
formats. So this could be password,

77
00:06:38,326 --> 00:06:41,280
ssH keys, AWS credentials and more.

78
00:06:41,810 --> 00:06:45,070
The tools do that by employing regular expressions,

79
00:06:45,730 --> 00:06:50,078
many various regular expressions and

80
00:06:50,164 --> 00:06:52,830
by calculation of entropy.

81
00:06:58,530 --> 00:07:02,266
We compared between three tools git

82
00:07:02,298 --> 00:07:05,886
secrets by AWS labs detect secrets by

83
00:07:05,908 --> 00:07:09,940
Yelp and Gitlix, which is owned by individual

84
00:07:10,470 --> 00:07:13,540
developer. All of them are good and free.

85
00:07:15,110 --> 00:07:18,986
We decided to go with, so we chose

86
00:07:19,038 --> 00:07:22,642
Gitlix. It detects hard coded secrets like password,

87
00:07:22,706 --> 00:07:26,194
API keys and tokens in local and GitHub

88
00:07:26,242 --> 00:07:29,874
repositories, private and public. Some pros

89
00:07:29,922 --> 00:07:33,674
for Gitlix very good detection rate. It's very

90
00:07:33,712 --> 00:07:36,170
easy to integrate to the CI.

91
00:07:37,230 --> 00:07:40,698
It is developed with almost 100

92
00:07:40,784 --> 00:07:44,450
contributors and it provides reporting in various

93
00:07:44,550 --> 00:07:48,154
formats. When compared with the other two tools, we prefer

94
00:07:48,202 --> 00:07:52,174
to go with Gitlix even though the others are good

95
00:07:52,212 --> 00:07:53,040
as well.

96
00:07:57,030 --> 00:08:03,714
So this is an example of a key and

97
00:08:03,752 --> 00:08:07,134
this is the output of Gitlix. You can see that Gitlix identified

98
00:08:07,182 --> 00:08:11,298
these secret and associated with a rule that is called AWS

99
00:08:11,474 --> 00:08:15,366
access token because it obviously matched a

100
00:08:15,388 --> 00:08:19,462
regular expression built

101
00:08:19,516 --> 00:08:23,050
for AWS access token structure.

102
00:08:24,270 --> 00:08:25,020
Okay,

103
00:08:28,350 --> 00:08:31,210
so the next category is terraform scanning.

104
00:08:33,390 --> 00:08:36,906
The mission here is to detect security vulnerabilities,

105
00:08:37,098 --> 00:08:41,146
cloud misconfiguration issues and all that by analyzing

106
00:08:41,178 --> 00:08:44,894
the infrastructure as code, which is very important.

107
00:08:45,092 --> 00:08:48,754
Security capabilities security capability for

108
00:08:48,792 --> 00:08:51,620
those of you who work with infrastructure as code,

109
00:08:55,270 --> 00:08:58,958
we have compared many tools. The top were check by bridge crew,

110
00:08:58,974 --> 00:09:02,914
now Palo Alto Kix by checkmarks and TFSec

111
00:09:02,962 --> 00:09:06,214
by Aqua Security. The good news here is that

112
00:09:06,252 --> 00:09:09,880
all tools are great. They are backed by good companies

113
00:09:10,490 --> 00:09:13,594
and they constantly improve and they do their

114
00:09:13,632 --> 00:09:16,826
job. All of them, by the way, are either MIT or

115
00:09:16,848 --> 00:09:20,266
Apache. Matwizi decided to

116
00:09:20,288 --> 00:09:24,220
go with Kix and

117
00:09:24,530 --> 00:09:28,222
that is for two reasons. First, Kix has

118
00:09:28,276 --> 00:09:32,174
exceptional detection rate that we love and

119
00:09:32,212 --> 00:09:35,758
the other reason is that it includes indication of

120
00:09:35,844 --> 00:09:39,806
severity, which is very useful for prioritization

121
00:09:39,918 --> 00:09:43,586
for DevOps people who are not security experts. So the

122
00:09:43,608 --> 00:09:47,634
indication of severity was for us an

123
00:09:47,672 --> 00:09:50,450
important property of KiCs.

124
00:09:53,370 --> 00:09:57,334
So in this example we have a terraform model where EBS data is

125
00:09:57,372 --> 00:09:59,640
not encrypted, as you can see in this example.

126
00:10:02,350 --> 00:10:05,414
And Kix identifies this misconfiguration and ranks

127
00:10:05,462 --> 00:10:06,730
it as medium,

128
00:10:08,270 --> 00:10:11,494
together with sharing detailed description and guidance

129
00:10:11,622 --> 00:10:16,062
how to fix it see

130
00:10:16,116 --> 00:10:19,950
medium and the relevant description.

131
00:10:24,130 --> 00:10:26,750
Next category is the runtime scanning.

132
00:10:28,310 --> 00:10:32,478
The mission here is detecting vulnerabilities in web applications

133
00:10:32,654 --> 00:10:36,414
while they are running. That includes also API

134
00:10:36,462 --> 00:10:40,006
scanning and it can run in a nonauthenticated code, what we

135
00:10:40,028 --> 00:10:43,638
call black box testing, or authenticated mod,

136
00:10:43,724 --> 00:10:46,230
what we call gray box testing.

137
00:10:48,650 --> 00:10:52,182
The contestants here

138
00:10:52,236 --> 00:10:56,710
were OWASP, Nikto and Arachni.

139
00:10:57,390 --> 00:11:01,366
All these tools can help you evaluate the security of web applications

140
00:11:01,558 --> 00:11:05,102
and each of them has above three k stars so

141
00:11:05,156 --> 00:11:08,350
they do their job and they are popular.

142
00:11:09,090 --> 00:11:12,490
In this category we decided to go with zap.

143
00:11:12,570 --> 00:11:16,282
It's a very popular open source Das

144
00:11:16,346 --> 00:11:20,210
tool. It is container by the Ops Owasp foundation

145
00:11:20,870 --> 00:11:24,642
and has been around over a decade. We chose it over

146
00:11:24,696 --> 00:11:28,734
the others for these reasons. It includes

147
00:11:28,782 --> 00:11:32,054
authenticated and non authenticated web

148
00:11:32,092 --> 00:11:36,134
app scanning. It includes API scanning. It has

149
00:11:36,172 --> 00:11:39,010
good range of features like vulnerability scanning,

150
00:11:39,090 --> 00:11:42,986
fuzzing reporting, and is well supported by a

151
00:11:43,008 --> 00:11:43,980
large community.

152
00:11:46,750 --> 00:11:51,030
In this example, Zap scanned a web application and detected

153
00:11:51,110 --> 00:11:55,658
that the content security policy CSP header

154
00:11:55,754 --> 00:11:58,990
is not present in the server response.

155
00:11:59,330 --> 00:12:03,214
Essentially, the CSP is used to prevent cross site

156
00:12:03,252 --> 00:12:07,470
scripting, click jacking and other code injection stacks.

157
00:12:07,630 --> 00:12:10,980
So it's great that Zap identified it.

158
00:12:18,410 --> 00:12:22,278
And final category for today, container scanning.

159
00:12:22,374 --> 00:12:25,514
The mission here is to detect vulnerabilities from all

160
00:12:25,552 --> 00:12:27,850
sorts in container images.

161
00:12:28,430 --> 00:12:32,554
We reviewed and tested various tools, but two

162
00:12:32,592 --> 00:12:35,934
topped the chart trivy by Aqua and Claire by

163
00:12:35,972 --> 00:12:38,750
quie, now part of red hat.

164
00:12:40,290 --> 00:12:44,110
We decided to go with Trivy due to its efficacy and

165
00:12:44,180 --> 00:12:46,530
easy integrated with the CI.

166
00:12:48,310 --> 00:12:52,382
Here is an example of output when Trivy

167
00:12:52,446 --> 00:12:56,274
was scanning a docker image that

168
00:12:56,312 --> 00:12:59,766
I created based on Debian 11.3.

169
00:12:59,948 --> 00:13:03,590
So you can see that trivy identified

170
00:13:04,250 --> 00:13:06,630
the vulnerable library.

171
00:13:16,860 --> 00:13:20,472
Now let me show you a quick

172
00:13:20,526 --> 00:13:24,556
demo about integrated these five security tools into

173
00:13:24,658 --> 00:13:28,984
the CI pipeline. I'm using GitHub

174
00:13:29,112 --> 00:13:33,676
and GitHub actions and you

175
00:13:33,698 --> 00:13:37,516
can view the demo repository in

176
00:13:37,538 --> 00:13:39,340
this link I created.

177
00:14:10,400 --> 00:14:14,268
So first let's take a look at

178
00:14:14,434 --> 00:14:16,060
the workflow file.

179
00:14:18,580 --> 00:14:21,760
So you can see that the workflow file,

180
00:14:23,060 --> 00:14:26,640
the jobs here are triggered by push.

181
00:14:27,620 --> 00:14:30,948
Okay, and these are five jobs here,

182
00:14:31,114 --> 00:14:34,724
one which deals with secret detection. These we

183
00:14:34,762 --> 00:14:37,830
run Gitlix. The next one,

184
00:14:38,200 --> 00:14:42,250
the dust, the runtime scanning, we use

185
00:14:42,620 --> 00:14:47,684
zap. For the infrastructure code

186
00:14:47,732 --> 00:14:49,960
scanning, we use kics,

187
00:14:51,980 --> 00:14:55,150
for the FCA we use dependency check.

188
00:14:55,760 --> 00:14:59,212
And for container scanning we use

189
00:14:59,266 --> 00:15:00,110
three d.

190
00:15:05,540 --> 00:15:09,024
All these jobs run in parallel whenever I

191
00:15:09,062 --> 00:15:11,970
commit a new change.

192
00:15:12,500 --> 00:15:16,130
So let me do that, I will just

193
00:15:18,120 --> 00:15:19,750
add a space here,

194
00:15:24,840 --> 00:15:26,150
commit a change.

195
00:15:29,160 --> 00:15:44,610
And you see that these workflow kicks in JIT.

196
00:15:45,000 --> 00:15:48,260
So you see that all the jobs run in parallel.

197
00:15:51,930 --> 00:15:55,506
And I see that secret scanner finished.

198
00:15:55,538 --> 00:15:59,766
So if we drill down, we can see that what

199
00:15:59,788 --> 00:16:02,230
we can see that a password,

200
00:16:02,570 --> 00:16:06,634
a secret was detected in

201
00:16:06,672 --> 00:16:10,582
a file named Docker file. The secret

202
00:16:10,646 --> 00:16:14,106
itself does not appear here, but you

203
00:16:14,128 --> 00:16:18,220
can see that JIT gitleaks actually

204
00:16:19,410 --> 00:16:24,334
detect the secret. And now you can see it

205
00:16:24,372 --> 00:16:28,334
gives also the line number, line eight. So if

206
00:16:28,372 --> 00:16:32,142
we'll go to the docker

207
00:16:32,206 --> 00:16:35,140
file, line number eight.

208
00:16:41,050 --> 00:16:41,800
Cool.

209
00:16:49,130 --> 00:16:52,918
So we see that dependency check

210
00:16:53,084 --> 00:16:56,620
also finished. If we drill down, we will see that

211
00:16:57,950 --> 00:17:15,204
the report was uploaded and

212
00:17:15,402 --> 00:17:19,152
show you later on. And container scanning

213
00:17:19,216 --> 00:17:23,540
also finished. So we see the detection of Otrivi

214
00:17:23,620 --> 00:17:24,570
in here,

215
00:17:37,390 --> 00:17:39,100
the dependency check.

216
00:17:40,830 --> 00:17:45,660
This is the dependency check report

217
00:17:48,510 --> 00:17:51,070
that all dependency check created.

218
00:17:55,650 --> 00:18:01,886
And this is the report that's

219
00:18:01,918 --> 00:18:02,850
upgraded.

220
00:18:08,600 --> 00:18:12,176
And let's

221
00:18:12,208 --> 00:18:15,860
see also the infrastructure

222
00:18:16,280 --> 00:18:20,536
scotscanner in here you

223
00:18:20,558 --> 00:18:28,056
can see for example that Kics

224
00:18:28,088 --> 00:18:31,980
found dynamodb table not encrypted, it gave it medium

225
00:18:32,560 --> 00:18:40,770
and provided some details about JIT.

226
00:18:43,300 --> 00:18:47,264
And also the

227
00:18:47,302 --> 00:18:51,360
alerts also appear here as annotations.

228
00:18:54,440 --> 00:18:58,224
Cool. So you have access to this repo,

229
00:18:58,272 --> 00:19:01,990
you can clone it and play with it.

230
00:19:05,740 --> 00:19:08,680
Okay, let's go back to the deck.

231
00:19:12,680 --> 00:19:16,420
Okay. Like you see, there are plenty of excellent open source tools

232
00:19:16,490 --> 00:19:20,856
that can be used. Yes, even for things as important as

233
00:19:20,958 --> 00:19:24,424
security. And it's very possible to build an

234
00:19:24,462 --> 00:19:27,640
entire security program only by using open

235
00:19:27,710 --> 00:19:31,612
source solutions. At JIT we took it into

236
00:19:31,666 --> 00:19:35,452
the next level. We enable users to manage

237
00:19:35,506 --> 00:19:39,724
a security plan and fully automate it

238
00:19:39,842 --> 00:19:42,520
with a continuous security mindset.

239
00:19:42,680 --> 00:19:46,144
We do that in conjunction with providing a

240
00:19:46,182 --> 00:19:49,840
dev native experience by adding comes inside

241
00:19:49,910 --> 00:19:53,712
the pr. So developer can have a great

242
00:19:53,766 --> 00:19:57,664
user experience more than just drilling

243
00:19:57,712 --> 00:20:01,172
down into the output of every

244
00:20:01,306 --> 00:20:04,752
tool in the CI itself. At JIT,

245
00:20:04,816 --> 00:20:08,550
we automate security plans and provide a great

246
00:20:09,000 --> 00:20:10,070
dev experience.

247
00:20:13,560 --> 00:20:17,524
So that's about it for today. I hope

248
00:20:17,562 --> 00:20:21,244
it was interesting for

249
00:20:21,282 --> 00:20:24,556
you and thank you very

250
00:20:24,578 --> 00:20:25,900
much for joining.

