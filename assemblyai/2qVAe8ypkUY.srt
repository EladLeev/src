1
00:00:38,930 --> 00:00:42,514
Hello everyone. Thanks for joining my session. My name is Samuel

2
00:00:42,562 --> 00:00:46,690
Barufi. I am a solutions architect here with AWS.

3
00:00:46,850 --> 00:00:50,686
And for today's presentation I'm going to be talking about how

4
00:00:50,708 --> 00:00:55,150
we can bootstrap eks clusters with EKS blueprint.

5
00:00:56,050 --> 00:00:59,694
A quick agenda on what we're going to go through in the next few

6
00:00:59,732 --> 00:01:03,406
minutes. We're going to start with a high level understanding of

7
00:01:03,428 --> 00:01:07,074
kubernetes and we're going to then move on into a high

8
00:01:07,112 --> 00:01:10,386
level understanding of eks. And that is going to

9
00:01:10,408 --> 00:01:14,366
set the stage for us to talk about what is EKS blueprints,

10
00:01:14,478 --> 00:01:17,702
how EKS blueprints work and why you should

11
00:01:17,756 --> 00:01:21,318
potentially use on your environment. After that, I'm going

12
00:01:21,324 --> 00:01:25,046
to present you with some resources on

13
00:01:25,068 --> 00:01:28,826
how you can get started with EKS blueprints. And if

14
00:01:28,848 --> 00:01:32,010
you want to run a workshop with your team or yourself,

15
00:01:32,160 --> 00:01:35,606
I'm using to provide those links

16
00:01:35,638 --> 00:01:39,514
and that information. And then hopefully I'll finalize the

17
00:01:39,552 --> 00:01:42,714
session with a quick demo just showcasing

18
00:01:42,762 --> 00:01:46,174
an example on how we could use ecas blueprints in your

19
00:01:46,212 --> 00:01:50,574
environment. So let's start the journey of

20
00:01:50,612 --> 00:01:53,460
the presentation of. Okay,

21
00:01:53,830 --> 00:01:57,522
you as an organization or you as an architect have

22
00:01:57,576 --> 00:02:01,170
decided to use kubernetes. Okay, you've heard

23
00:02:01,240 --> 00:02:06,520
Kubernetes is a popular container orchestration platform.

24
00:02:07,050 --> 00:02:09,526
So what comes next? Right?

25
00:02:09,708 --> 00:02:13,462
So a lot of companies and this has become

26
00:02:13,516 --> 00:02:17,414
very popular in the last, I'll say, six to eight

27
00:02:17,452 --> 00:02:20,614
years have decided to use kubernetes. Why do they

28
00:02:20,652 --> 00:02:24,134
decided to use kubernetes? Well, first, there are a couple of reasons.

29
00:02:24,182 --> 00:02:27,482
I mean, there are multiple reasons. We're just going to narrow it down into four

30
00:02:27,536 --> 00:02:30,494
main reasons here. The first one is easy,

31
00:02:30,612 --> 00:02:34,222
it's the isability of use. You have a standard way

32
00:02:34,276 --> 00:02:37,530
that you can declare through YaMl files

33
00:02:37,610 --> 00:02:41,054
and through common APIs that can be

34
00:02:41,092 --> 00:02:44,414
flexible and extensible. You can deploy your applications

35
00:02:44,462 --> 00:02:48,034
and deploy your platform on top of a common ecosystem called

36
00:02:48,072 --> 00:02:52,210
Kubernetes. The great thing about kubernetes is consistency.

37
00:02:53,350 --> 00:02:57,802
It's built on top of common APIs regardless

38
00:02:57,886 --> 00:03:01,814
of where you run. So if you're managing your own Kubernetes clusters on

39
00:03:01,852 --> 00:03:04,914
your on premise environment the way the APIs

40
00:03:04,962 --> 00:03:08,262
of Kubernetes, assuming you are on the same Kubernetes versions,

41
00:03:08,326 --> 00:03:12,010
because each Kubernetes versions will have different API

42
00:03:13,230 --> 00:03:16,262
settings and different APIs availability

43
00:03:16,406 --> 00:03:20,222
as Kubernetes grows as an ecosystem. And of course

44
00:03:20,276 --> 00:03:21,870
the third one is ecosystem,

45
00:03:23,890 --> 00:03:27,002
Kubernetes has been chosen to be the default kubernetes,

46
00:03:27,066 --> 00:03:30,286
the default container orchestrator so there are

47
00:03:30,308 --> 00:03:34,446
hundreds of thousands of solutions across the cloud native compute

48
00:03:34,478 --> 00:03:38,322
foundation ecosystem that can be easily run

49
00:03:38,376 --> 00:03:41,826
on top of Kubernetes. And then I think the best one is the

50
00:03:41,848 --> 00:03:45,650
community. Kubernetes community is

51
00:03:45,720 --> 00:03:49,118
large, big and very helpful. So you are

52
00:03:49,144 --> 00:03:52,534
just building on top of that the skill sets from people that

53
00:03:52,572 --> 00:03:56,630
know containers are likely to involve Kubernetes.

54
00:03:57,470 --> 00:04:01,382
So if you talked about why kubernetes,

55
00:04:01,526 --> 00:04:04,822
let's talk about eks in the cloud. So you've decided

56
00:04:04,886 --> 00:04:08,234
to run your container ecosystem, that is

57
00:04:08,272 --> 00:04:12,506
Kubernetes with AWS. So you can actually use EKS.

58
00:04:12,618 --> 00:04:15,582
EKS stands for elastic Kubernetes service.

59
00:04:15,716 --> 00:04:19,086
It's a managed Kubernetes platform

60
00:04:19,268 --> 00:04:23,218
on the AWS cloud. The great thing about Kubernetes is

61
00:04:23,384 --> 00:04:27,058
you can easily create a clusters and AWS will manage

62
00:04:27,144 --> 00:04:31,154
a lot of those heavy lifting operations for

63
00:04:31,192 --> 00:04:37,046
you. One of them is managing the

64
00:04:37,068 --> 00:04:40,658
cluster platform, right? So when you have the control plane,

65
00:04:40,754 --> 00:04:44,086
the control plane you do not need to manage. AWS will

66
00:04:44,108 --> 00:04:47,722
manage for you. And this slide actually talks about

67
00:04:47,776 --> 00:04:51,546
how AWS manages and gives you that single

68
00:04:51,648 --> 00:04:55,334
control plane API for Kubernetes without you touching

69
00:04:55,382 --> 00:04:57,834
or needing to care about anything else.

70
00:04:57,952 --> 00:05:01,382
So AWS will manage the Kubernetes APIs

71
00:05:01,446 --> 00:05:05,306
for you. We'll create the ETCD data store for you.

72
00:05:05,408 --> 00:05:09,114
You actually replicate the data across multiple availability zones.

73
00:05:09,242 --> 00:05:12,314
So a cluster will be a single tenant cluster

74
00:05:12,362 --> 00:05:16,434
for only you and your account. It provides a highly available API because

75
00:05:16,472 --> 00:05:19,714
it's running across multiple availability zones behind the

76
00:05:19,752 --> 00:05:24,802
scenes. He also provides with a three nine so 99.95%

77
00:05:24,856 --> 00:05:28,454
of SLA you have fully support to

78
00:05:28,492 --> 00:05:32,054
open cases and get help from the AWS support engineers at

79
00:05:32,092 --> 00:05:35,734
any time. And you can scale if your

80
00:05:35,772 --> 00:05:39,126
cluster is growing significantly and the control plane requires

81
00:05:39,158 --> 00:05:42,426
more resource, AWS will automatically behind the

82
00:05:42,448 --> 00:05:46,330
scenes scale up and down different instances to just support

83
00:05:46,400 --> 00:05:49,962
your control plane on Kubernetes. And you also manage your

84
00:05:50,016 --> 00:05:53,306
upgradings from maybe major versions or even minor

85
00:05:53,338 --> 00:05:57,102
versions with patchins. And all that

86
00:05:57,156 --> 00:06:00,894
means is you as a developer or you as an architect don't needed

87
00:06:00,932 --> 00:06:04,670
to worry about the complexity of a control plane kubernetes.

88
00:06:04,750 --> 00:06:08,206
You only actually focus on your applications

89
00:06:08,238 --> 00:06:11,474
and your business value. There are

90
00:06:11,512 --> 00:06:14,610
multiple ways you can run kubernetes on AWS.

91
00:06:15,510 --> 00:06:19,842
Of course, EKS is our managed service platform for kubernetes.

92
00:06:19,986 --> 00:06:23,942
And if you see here what this slide is saying, there are two different

93
00:06:23,996 --> 00:06:27,766
flavors of eks. First is Amazon EKS, which is what

94
00:06:27,788 --> 00:06:31,462
I've just described. And Amazon eks can run across multiple

95
00:06:31,526 --> 00:06:35,302
places on AWS so the first one is of course the AWS

96
00:06:35,366 --> 00:06:39,046
regions that we just talked about it. You can go to us east

97
00:06:39,078 --> 00:06:42,618
one, northern Virginia, and deploy EKS. And eks

98
00:06:42,714 --> 00:06:45,706
should be available across all the regions on AWS.

99
00:06:45,818 --> 00:06:49,178
I think we currently have 32 or 33 different regions

100
00:06:49,354 --> 00:06:53,214
globally. But you can also deploy EKS on local zones

101
00:06:53,262 --> 00:06:56,926
and wavelengths. Those are specific new types

102
00:06:56,958 --> 00:07:00,690
of availability zones you can call that runs maybe

103
00:07:00,760 --> 00:07:04,354
in the specific metro areas or for wavelengths that

104
00:07:04,392 --> 00:07:07,602
will be close to 5g cellular locations.

105
00:07:07,746 --> 00:07:12,322
Also, if you want to run a physical

106
00:07:12,386 --> 00:07:15,954
piece of infrastructure that is called outpost, that AWS

107
00:07:16,002 --> 00:07:20,358
will manage and connect to your AWS infrastructure,

108
00:07:20,454 --> 00:07:24,186
you can actually run eks on top of that. But if

109
00:07:24,208 --> 00:07:27,862
you also want to run eks on your on premise,

110
00:07:27,926 --> 00:07:31,422
or maybe on some other clouds, you can actually use

111
00:07:31,556 --> 00:07:35,614
what we call eks anywhere. So it's a set of

112
00:07:35,812 --> 00:07:40,286
best practice and deployments that help you actually create the

113
00:07:40,308 --> 00:07:44,682
control plane, manage the control plane anywhere else while utilizing

114
00:07:44,746 --> 00:07:48,286
all the common non functionalities of eks.

115
00:07:48,398 --> 00:07:52,366
We're not going to talk about eks anywhere, but we are just displaying

116
00:07:52,398 --> 00:07:55,460
here a capability that is available for you as well.

117
00:07:56,090 --> 00:07:59,590
So moving on our journey, you have chosen EKS for

118
00:07:59,660 --> 00:08:02,870
your Kubernetes clusters. What is next?

119
00:08:02,940 --> 00:08:06,994
Right? Normally in the Kubernetes journey, you choose an orchestrator

120
00:08:07,042 --> 00:08:10,774
for Kubernetes, in this case eks. And then

121
00:08:10,892 --> 00:08:14,362
you need to focus on the data plane, right? So we talk about the control

122
00:08:14,416 --> 00:08:18,314
plane where eks completely takes care for you of that.

123
00:08:18,432 --> 00:08:22,154
Now, the data plane is literally where you're going to be running your pods.

124
00:08:22,202 --> 00:08:25,726
Therefore your applications with eks, there are

125
00:08:25,748 --> 00:08:29,802
a couple of different options that makes it very flexible

126
00:08:29,866 --> 00:08:33,286
for you to choose how you want to run your pods.

127
00:08:33,418 --> 00:08:37,122
So as an administrator, you can choose to run pods on

128
00:08:37,176 --> 00:08:41,934
EC two based containers. So you can actually scale

129
00:08:41,982 --> 00:08:45,666
up and create EC two instances where your pods are going to be running,

130
00:08:45,768 --> 00:08:49,586
or you can choose AWS Fargate, which is a completely serverless

131
00:08:49,698 --> 00:08:53,382
container environment that you don't need to manage. Each pod will create

132
00:08:53,436 --> 00:08:57,398
a specific fargate infrastructure and those are going to

133
00:08:57,404 --> 00:09:00,874
be charged from how long they live and the configuration of

134
00:09:00,912 --> 00:09:03,900
memory and cpu for those. Now,

135
00:09:04,350 --> 00:09:08,486
when you're talking about ECU, there are multiple ways that EKs

136
00:09:08,678 --> 00:09:12,014
allows you to have flexibility for

137
00:09:12,052 --> 00:09:15,918
both cost and performance on how you decide to manage

138
00:09:16,084 --> 00:09:20,110
your data plane of ecgs. So the first one that is very common

139
00:09:20,260 --> 00:09:23,514
known is manage node groups. With manage node groups,

140
00:09:23,562 --> 00:09:26,814
AWS, a part of taking care of the control plane,

141
00:09:26,862 --> 00:09:30,642
will help take care of the data plane as well. That means

142
00:09:30,696 --> 00:09:34,510
that we'll create a scaling group behind the scenes

143
00:09:34,670 --> 00:09:38,466
for a specific instance type and you can have multiple node

144
00:09:38,498 --> 00:09:42,706
groups with different instance types and those specific node

145
00:09:42,738 --> 00:09:46,406
groups can be for specific applications within your clusters. So there

146
00:09:46,428 --> 00:09:50,066
is a lot of flexibility that you can create. Also with managed

147
00:09:50,098 --> 00:09:53,554
node groups it allows you to ease

148
00:09:53,602 --> 00:09:57,366
off upgrade. So when you were upgrading from one version to another version

149
00:09:57,398 --> 00:10:00,570
of Kubernetes, AWS within the manage node groups

150
00:10:00,650 --> 00:10:04,830
can actually help you achieve that ease of upgrade.

151
00:10:05,330 --> 00:10:08,874
Now, when EKS was launched,

152
00:10:08,922 --> 00:10:12,634
manage no group was not a functionality available. The only functionality

153
00:10:12,682 --> 00:10:15,790
available was what we call self managed node groups.

154
00:10:15,870 --> 00:10:19,346
That just means that you will create your no group. Everything you do like

155
00:10:19,368 --> 00:10:22,782
from the alti Scaling group creation and management

156
00:10:22,846 --> 00:10:26,470
from an upgrade is your responsibility as an operator.

157
00:10:27,130 --> 00:10:30,742
There are very few occasions why you should go through and use

158
00:10:30,796 --> 00:10:33,906
a self managed node groups, but in this slide it's just displaying

159
00:10:33,938 --> 00:10:37,142
the capability. And the other

160
00:10:37,196 --> 00:10:41,194
option, which is probably the best option for

161
00:10:41,232 --> 00:10:44,970
everyone to use, is called carpenter. So carpenter is a

162
00:10:45,040 --> 00:10:49,254
open source cluster altiscaler competitor

163
00:10:49,382 --> 00:10:52,650
that can run on eks and other cloud providers

164
00:10:52,730 --> 00:10:55,914
as well. And with that it removes

165
00:10:55,962 --> 00:11:00,110
the idea of a manage node group and just treats your cluster

166
00:11:00,930 --> 00:11:03,998
within a single kind of environment.

167
00:11:04,094 --> 00:11:07,394
And depending on your applications, you can actually

168
00:11:07,512 --> 00:11:10,910
say for this specific application I have these tags,

169
00:11:11,070 --> 00:11:15,140
run these on the spot instances and Carpenter will take care of

170
00:11:16,490 --> 00:11:20,534
with having in mind cost, performance and

171
00:11:20,572 --> 00:11:24,790
availability. Depending on your configuration, Carpenter will take care of that without

172
00:11:24,940 --> 00:11:28,210
you even thinking about managed node groups.

173
00:11:28,290 --> 00:11:31,766
Carpenter a major differential of carpenter versus managed

174
00:11:31,798 --> 00:11:35,254
node group is that with carpenter you can have a polygloth

175
00:11:35,302 --> 00:11:38,602
of different EC two types being spun up at the same

176
00:11:38,656 --> 00:11:42,782
time where node groups, each node group will actually be

177
00:11:42,836 --> 00:11:46,000
forced into a single EC two type

178
00:11:46,930 --> 00:11:50,206
family and so forth. So now that

179
00:11:50,228 --> 00:11:53,726
we know that we have decided into this, right, so we

180
00:11:53,748 --> 00:11:57,234
are going to use, as part of the journey, we're going to use

181
00:11:57,272 --> 00:12:00,418
eks and the eks. This is

182
00:12:00,424 --> 00:12:03,870
the data plane what you're seeing here. We're going to create two managed node groups.

183
00:12:03,950 --> 00:12:07,426
One node group will have an m five instance type and the

184
00:12:07,448 --> 00:12:11,538
other node group we have m six g. So we might be running different types

185
00:12:11,554 --> 00:12:15,334
of applications. And within each managed node group you're going to have two

186
00:12:15,372 --> 00:12:18,978
availability zones where multiple instances are going to be scaled up

187
00:12:19,004 --> 00:12:22,346
and down. And at the same time you can configure applications to be

188
00:12:22,368 --> 00:12:25,450
deployed across this environment.

189
00:12:26,190 --> 00:12:30,054
So when we look in the container journey, we have decided the orchestrator,

190
00:12:30,102 --> 00:12:33,646
we have decided how we're going to do the data plane complete next

191
00:12:33,748 --> 00:12:37,630
is remember, Kubernetes is a platform, it's an ecosystem.

192
00:12:38,050 --> 00:12:41,310
The cluster on itself is not really powerful without

193
00:12:41,380 --> 00:12:45,026
its add ons. So add ons can be anything, right?

194
00:12:45,128 --> 00:12:48,846
If you are familiar with the cloud native Compute Foundation Cloudmap,

195
00:12:48,958 --> 00:12:52,590
if you're not, just Google and take a look. There is no shortage

196
00:12:52,670 --> 00:12:56,118
of amazing tooling that can be deployed within the

197
00:12:56,124 --> 00:12:59,366
Kubernetes ecosystem. But it's really, really hard

198
00:12:59,468 --> 00:13:02,822
to deploy those because there is no guide for how to put

199
00:13:02,876 --> 00:13:06,790
all those two togethers. So continue

200
00:13:06,860 --> 00:13:10,282
the journey. What we've decided is, okay, we have

201
00:13:10,336 --> 00:13:13,974
our cluster, our eks cluster, and we want to deploy

202
00:13:14,022 --> 00:13:17,290
some NgInX proxy, maybe on this

203
00:13:17,360 --> 00:13:20,910
specific managed node group we want to deploy some maybe open

204
00:13:20,980 --> 00:13:25,226
policy agents. In this other node

205
00:13:25,258 --> 00:13:29,246
group we want to use Grafana and Prometrius for our

206
00:13:29,348 --> 00:13:33,022
monitoring and observability. How do we actually get all

207
00:13:33,076 --> 00:13:36,834
those together? Right? So we want to do this, but how do we achieve that

208
00:13:36,952 --> 00:13:40,500
in a very repeatable, easy to manage way?

209
00:13:41,670 --> 00:13:45,346
Again, from the Kubernetes journey, you've decided you've created

210
00:13:45,378 --> 00:13:49,010
that. Let's say you install the cluster add ons manually.

211
00:13:49,090 --> 00:13:52,354
You actually went into each of these like Prometheus,

212
00:13:52,402 --> 00:13:56,402
Grafana, OpA, GitHub repositories,

213
00:13:56,546 --> 00:14:00,214
you learn how to deploy those and you deploy those on your clusters. You probably

214
00:14:00,252 --> 00:14:04,502
spend like a few days or weeks deploying that for a single cluster.

215
00:14:04,566 --> 00:14:07,002
And now it comes day two operations, right?

216
00:14:07,136 --> 00:14:11,040
So what is day two operations? Well, what you need to consider is

217
00:14:11,730 --> 00:14:15,738
which users and which developers will have access for different parts

218
00:14:15,754 --> 00:14:18,846
of your clusters, right? Maybe your cluster is what

219
00:14:18,868 --> 00:14:22,826
we call multitenant cluster, meaning that multiple applications and multiple

220
00:14:22,858 --> 00:14:26,522
teams on your organization are going to be using this cluster.

221
00:14:26,666 --> 00:14:30,302
So now you need to think about it, okay? You have multiple developers

222
00:14:30,366 --> 00:14:33,726
that are going to be assuming a specific developer

223
00:14:33,838 --> 00:14:37,622
role, which therefore we will actually

224
00:14:37,676 --> 00:14:41,874
give proper permission on the Kubernetes. But you might have some temporary users

225
00:14:41,922 --> 00:14:45,554
that might be just be connecting to your cluster

226
00:14:45,602 --> 00:14:49,638
here in a few occasion and sporadic way, but then you

227
00:14:49,644 --> 00:14:53,590
have your platform team which has kind of an admin type of role

228
00:14:53,670 --> 00:14:57,386
that you'll be accessing those. So now need to think

229
00:14:57,408 --> 00:15:00,414
about that as well. On top

230
00:15:00,452 --> 00:15:04,062
of that, hopefully alphas are falling best

231
00:15:04,116 --> 00:15:08,142
practice where you might have different environments and

232
00:15:08,196 --> 00:15:11,834
different clusters for each environment. So what I've just described

233
00:15:11,882 --> 00:15:15,566
here, you should be replicating on your dev environment, you should be replicating on your

234
00:15:15,588 --> 00:15:19,394
test environment, and you should be replicating on the production environment. Now think

235
00:15:19,432 --> 00:15:23,138
about if you're on the platform team or the DevOps team SRE team.

236
00:15:23,224 --> 00:15:28,322
If you need to replicate that across dozens

237
00:15:28,386 --> 00:15:31,938
of kubernetes clusters, it becomes very painful

238
00:15:32,034 --> 00:15:35,734
and it becomes very hard to actually manage that if

239
00:15:35,772 --> 00:15:39,740
you are not using a way of automate that.

240
00:15:40,270 --> 00:15:44,230
And that is the perfect segue for Amazon EKS blueprints

241
00:15:44,390 --> 00:15:48,326
what is Amazon EKS blueprints? So Amazon

242
00:15:48,358 --> 00:15:52,014
EKS Blueprint is an open source framework that

243
00:15:52,052 --> 00:15:56,490
allows you to easily configure and deploy EKS clusters

244
00:15:56,570 --> 00:15:59,806
in an automated and secure way.

245
00:15:59,988 --> 00:16:03,326
So you can choose between, if you have

246
00:16:03,348 --> 00:16:07,038
a preference for infrastructure, that code with terraform or CDK.

247
00:16:07,134 --> 00:16:11,358
There are two flavors of EKS blueprints,

248
00:16:11,454 --> 00:16:15,370
CDK cloud development kit which is using your normal

249
00:16:15,550 --> 00:16:18,290
non programming language like python node,

250
00:16:18,370 --> 00:16:21,762
Javascript Java to actually build infrastructure.

251
00:16:21,826 --> 00:16:26,258
Or you can use Terraform which is a popular open source

252
00:16:26,434 --> 00:16:29,994
infrastructure as a code tool. The great thing about

253
00:16:30,032 --> 00:16:34,010
EKS blueprint, it's based on the best practice from

254
00:16:34,160 --> 00:16:37,580
AWS and the recommendations on how to create

255
00:16:37,950 --> 00:16:42,062
EKS clusters and how to manage EKS clusters from

256
00:16:42,116 --> 00:16:45,626
both a cluster creation, a VPC creation,

257
00:16:45,738 --> 00:16:48,974
a multi team tenant creation, a add

258
00:16:49,012 --> 00:16:52,650
on creation, and also the upgrade of those clusters

259
00:16:52,730 --> 00:16:55,390
and the lifecycle of those clusters.

260
00:16:56,130 --> 00:17:00,046
So with that said, ECAS blueprints also integrated

261
00:17:00,158 --> 00:17:03,634
with your popular Kubernetes tools and services. So this

262
00:17:03,672 --> 00:17:07,234
is where it comes with add ons. The great thing about

263
00:17:07,272 --> 00:17:10,338
EKS blueprint, it's fully extensible and customizable.

264
00:17:10,434 --> 00:17:14,242
If you want to create your own deployments and your own add ons,

265
00:17:14,306 --> 00:17:17,670
you can build on top of this platform that is available

266
00:17:17,740 --> 00:17:21,414
for you. You can leverage again your

267
00:17:21,452 --> 00:17:24,986
preferred tool. I talked about this in a moment ago. You can

268
00:17:25,008 --> 00:17:28,266
use CDK blueprints, EKS blueprints and you can use

269
00:17:28,288 --> 00:17:31,658
terraform EKS blueprints. There are two different repositories

270
00:17:31,754 --> 00:17:35,040
that you can see here as part of

271
00:17:35,490 --> 00:17:38,634
the AWS open source initiative.

272
00:17:38,762 --> 00:17:42,122
If you want to use terraform, you just go on terraform

273
00:17:42,186 --> 00:17:45,474
AWS EkS blueprints if you want to go

274
00:17:45,672 --> 00:17:50,050
on CDK, you just choose the CDK EkS blueprints.

275
00:17:50,870 --> 00:17:55,490
So thinking continue this trajectory.

276
00:17:56,410 --> 00:17:59,862
How does actually EKS blueprints create

277
00:17:59,916 --> 00:18:02,760
a solution for you? So let's just look at that.

278
00:18:03,610 --> 00:18:07,574
So first, EKS blueprint will allow

279
00:18:07,692 --> 00:18:11,226
and help you create your clusters. So everything that comes with

280
00:18:11,408 --> 00:18:14,534
the VPC, the security groups, the cluster

281
00:18:14,582 --> 00:18:17,802
creation, all that will be taken

282
00:18:17,856 --> 00:18:21,866
care for you. And of course it gives you the flexibility to proper configure

283
00:18:21,898 --> 00:18:25,950
those. So you can choose if you want to run Amazon EKs on

284
00:18:26,020 --> 00:18:30,490
bottle rocket operating system or if you want to use Amazon Linux

285
00:18:30,570 --> 00:18:34,206
as the operating system or if you want to use Fargate, you have

286
00:18:34,228 --> 00:18:37,202
the flexibility to mix and match as well.

287
00:18:37,336 --> 00:18:41,442
So once you have the cluster now you want to build and install different

288
00:18:41,496 --> 00:18:44,734
add ons. Maybe you're doing a lot of git ops

289
00:18:44,782 --> 00:18:48,086
and you are using Argo or maybe flux for your

290
00:18:48,108 --> 00:18:52,114
githubs, or you can install those by default and already configure

291
00:18:52,162 --> 00:18:55,846
different repositories where those githubs tooling are

292
00:18:55,868 --> 00:18:59,126
going to be looking for different applications to be deployed.

293
00:18:59,318 --> 00:19:02,854
But you can deploy cluster out scalar

294
00:19:02,902 --> 00:19:06,186
if you're using maybe a managed node group and you really want

295
00:19:06,208 --> 00:19:09,770
to do cluster out scalar on top of your eks.

296
00:19:10,190 --> 00:19:13,582
So this diagram and this image is

297
00:19:13,636 --> 00:19:17,182
very minimalist. There are many many

298
00:19:17,316 --> 00:19:20,606
more add ons that are supported on EKS blueprint and you

299
00:19:20,628 --> 00:19:24,674
can find those on the documentation. They're going to be shared in the

300
00:19:24,712 --> 00:19:26,290
end of this presentation.

301
00:19:27,910 --> 00:19:31,630
The great thing about the installations of add ons

302
00:19:31,710 --> 00:19:35,574
is literally in this example that I'm showing here is just an

303
00:19:35,612 --> 00:19:39,160
example for how you can install for example

304
00:19:39,770 --> 00:19:43,314
the metric server and kubecost. It's literally

305
00:19:43,362 --> 00:19:46,854
two lines to install those add ons on your cluster and

306
00:19:46,892 --> 00:19:50,538
it comes with the best practice. So all the best practice on how you

307
00:19:50,544 --> 00:19:54,918
should enable metric server and how you should install kubecosts

308
00:19:54,934 --> 00:19:58,874
on your clusters just with this specific client are

309
00:19:58,912 --> 00:20:03,354
actually taken care for you. And this is one of the great things about of

310
00:20:03,392 --> 00:20:07,338
course each add on might provide different flexibility

311
00:20:07,434 --> 00:20:11,294
and options if you want to customize. And you can also always fork and

312
00:20:11,332 --> 00:20:15,380
create your own modules on terraform or your own

313
00:20:16,070 --> 00:20:19,294
l choose abstractions objects

314
00:20:19,342 --> 00:20:21,300
on CDK if you feel so.

315
00:20:22,310 --> 00:20:25,922
But then on top of that ECAs blueprint remember also can create

316
00:20:25,976 --> 00:20:29,654
different teams and manage the permission for you. So you can manage the

317
00:20:29,692 --> 00:20:33,270
access and different permissions by always using

318
00:20:33,340 --> 00:20:37,302
infrastructure as a club. So what do we get

319
00:20:37,356 --> 00:20:41,382
with EKS blueprint? First you get cluster management,

320
00:20:41,446 --> 00:20:45,670
so you configure and deploy your EKS clusters

321
00:20:45,750 --> 00:20:49,974
using AWS. Best practice, you can also replicate across

322
00:20:50,032 --> 00:20:53,802
multiple AWS accounts and regions because remember these are just infrastructures

323
00:20:53,866 --> 00:20:57,694
of code that are very easily replicable and you can

324
00:20:57,732 --> 00:21:01,242
create eks clusters with existing vpcs

325
00:21:01,306 --> 00:21:04,830
or actually create

326
00:21:04,900 --> 00:21:07,982
new vpcs if you deem so it also

327
00:21:08,036 --> 00:21:12,398
manages add on. So out of the box integration with very popular

328
00:21:12,574 --> 00:21:16,866
kubernetes add ons and those keeps getting added as

329
00:21:17,048 --> 00:21:20,526
time progress. So you know the specific best practice

330
00:21:20,558 --> 00:21:23,782
for those if you want.

331
00:21:23,836 --> 00:21:26,886
And again you don't need to do everything that is on this list.

332
00:21:27,068 --> 00:21:30,070
Flexibility is something that comes with EKS blueprint,

333
00:21:30,150 --> 00:21:33,962
but if you want to do team management you can actually create distinct things

334
00:21:34,016 --> 00:21:37,734
from both admins application owners developers, SRE,

335
00:21:37,862 --> 00:21:41,402
whatever you deem. You can actually have the flexibility for team

336
00:21:41,456 --> 00:21:45,374
management on top of your EKS clusters and then this

337
00:21:45,412 --> 00:21:49,098
is a little bit more advanced. But if you really want to use workload management,

338
00:21:49,194 --> 00:21:52,526
you can actually leverage Gitops tooling like Flux and

339
00:21:52,548 --> 00:21:56,314
Argo CD to run workloads as you deploy

340
00:21:56,362 --> 00:22:00,274
your kubernetes on top of that. So you can do self service onboarding of new

341
00:22:00,312 --> 00:22:04,606
workloads via pull requests so you as the platform team can create a cluster

342
00:22:04,718 --> 00:22:08,806
can configuration. The GitHub stooling gives a repository for

343
00:22:08,828 --> 00:22:12,934
your application team as soon as they push and do a pr with

344
00:22:12,972 --> 00:22:17,202
a new version. As long as all the Gitops configuration

345
00:22:17,266 --> 00:22:21,050
properly configured with your YAML files for kubernetes,

346
00:22:22,670 --> 00:22:26,170
those tools like Argo CD and Flux are going to continue

347
00:22:26,240 --> 00:22:29,786
to deploy new versions of the application into your cluster. So this

348
00:22:29,808 --> 00:22:33,530
is pretty cool. Now we're getting into the resource

349
00:22:33,610 --> 00:22:37,166
part, right? So like

350
00:22:37,188 --> 00:22:40,714
I said, you can use terraform or cdk depending

351
00:22:40,762 --> 00:22:44,340
on your preference. Here is both

352
00:22:45,270 --> 00:22:48,802
links for the GitHub repository. Remember those are open

353
00:22:48,856 --> 00:22:52,046
source. What I recommend if you're new to EKS blueprints,

354
00:22:52,078 --> 00:22:55,870
there is a nice workshop for eks blueprints for terraform

355
00:22:55,950 --> 00:22:58,930
and a nice workshop for eks blueprints for CDK.

356
00:22:59,010 --> 00:23:02,646
So just click on those links, navigate and

357
00:23:02,668 --> 00:23:06,102
will give you a step by step on how to get started on the different

358
00:23:06,156 --> 00:23:09,530
flavors. One of the great things

359
00:23:09,600 --> 00:23:13,930
is part of the GitHub repository.

360
00:23:14,830 --> 00:23:18,362
EkS blueprints also provides you with

361
00:23:18,496 --> 00:23:21,066
different patterns and different examples.

362
00:23:21,178 --> 00:23:24,702
So you are not kind of on your own to learn

363
00:23:24,756 --> 00:23:28,974
how to create specific eks configurations based

364
00:23:29,012 --> 00:23:33,566
on a specific scenario. So let's say you

365
00:23:33,588 --> 00:23:37,438
want to use eks blueprints to create a fully private eks cluster.

366
00:23:37,534 --> 00:23:41,214
So no VPC with connection to the Internet fully private

367
00:23:41,262 --> 00:23:44,926
within your VPC. Well there is an example that will tell you exactly

368
00:23:45,048 --> 00:23:48,838
with example of terraform and Cdk how to actually do that.

369
00:23:48,924 --> 00:23:53,010
Or if you want to use observability

370
00:23:53,170 --> 00:23:56,966
with adot for application

371
00:23:57,068 --> 00:24:00,746
telemetry, open search for maybe shipping your logs and

372
00:24:00,768 --> 00:24:04,202
manage Prometheus, you can actually go there and

373
00:24:04,256 --> 00:24:08,282
check. So I think there is not a better time to

374
00:24:08,336 --> 00:24:12,174
actually jump into a demo. So what we're going to do now we

375
00:24:12,212 --> 00:24:15,946
are going to jump into my AWS console and I'll

376
00:24:15,978 --> 00:24:19,934
show you a simple example, simple but useful example on

377
00:24:19,972 --> 00:24:24,110
how to use eks blueprints with terraform.

378
00:24:24,450 --> 00:24:27,934
And maybe I'll try to install a different eks add ons

379
00:24:27,982 --> 00:24:32,206
through the terraform template. So see you there and hopefully

380
00:24:32,238 --> 00:24:35,070
it'll be useful for you. Perfect.

381
00:24:35,160 --> 00:24:38,966
So let's dive deep into the demo. What I'm trying to

382
00:24:38,988 --> 00:24:43,746
do here, I will show I have this terraform template

383
00:24:43,858 --> 00:24:47,222
already deployed because it can take 1520

384
00:24:47,276 --> 00:24:51,114
minutes, sometimes more. Josh, you ready to be created? So just going to show you

385
00:24:51,152 --> 00:24:54,266
quickly the terraform template and then I'm going to

386
00:24:54,288 --> 00:24:58,250
try to do a demo, just deploying an application into

387
00:24:58,320 --> 00:25:01,694
my clusters and also installing a different add on into my

388
00:25:01,732 --> 00:25:05,994
cluster. So here we have some variables,

389
00:25:06,042 --> 00:25:09,466
like the region that is being deployed, some providers that I'm

390
00:25:09,498 --> 00:25:12,686
using, like the Kubernetes, the certificates that my

391
00:25:12,708 --> 00:25:16,226
cluster is going to be using some helm configuration. This is all

392
00:25:16,248 --> 00:25:20,110
boilerplate. You can have dynamic

393
00:25:20,190 --> 00:25:23,906
configuration if you wanted, but by default you don't need to change here.

394
00:25:24,008 --> 00:25:27,794
So if you scroll down, you see that the part that really

395
00:25:27,912 --> 00:25:30,854
matters for us is the cluster section. So in this case,

396
00:25:30,892 --> 00:25:35,122
we're starting with the module eks. This is not part of the EKS blueprints,

397
00:25:35,186 --> 00:25:38,570
but it's the official eks terraform module.

398
00:25:38,990 --> 00:25:42,426
We are setting the specific version for

399
00:25:42,448 --> 00:25:45,740
the module, setting the specific version for

400
00:25:46,510 --> 00:25:50,220
my Kubernetes cluster. In this case 1.27.

401
00:25:51,230 --> 00:25:53,950
And then if we scroll a little bit here,

402
00:25:54,100 --> 00:25:57,262
I'm using the VPC that you see that is actually already

403
00:25:57,316 --> 00:26:00,826
being created down below. So I'm creating a new VPC

404
00:26:00,858 --> 00:26:04,770
for my cluster. I'm setting a manage node group of m five

405
00:26:04,840 --> 00:26:08,322
large with a minimum size of one, maximum size

406
00:26:08,376 --> 00:26:11,460
of five and desired size of two.

407
00:26:12,550 --> 00:26:15,778
And down below here is when the things are starting to get a little bit

408
00:26:15,784 --> 00:26:19,126
more interesting. I'm creating add ons. So as part of

409
00:26:19,148 --> 00:26:22,454
my add ons, I am creating some eks add

410
00:26:22,492 --> 00:26:26,054
ons. Those are actually the official eks add

411
00:26:26,092 --> 00:26:29,462
on feature. So like if you go on the console, you'll be able to see

412
00:26:29,516 --> 00:26:32,854
those. So you can enable those through EKs blueprint

413
00:26:32,902 --> 00:26:36,182
as well. In this case, I'm enabling the AWS EBS

414
00:26:36,246 --> 00:26:39,754
CSI. In case I would in the future want to create

415
00:26:39,792 --> 00:26:44,122
some stateful set using EBS. I'd be able to do that core DNS,

416
00:26:44,186 --> 00:26:48,170
VPC, CNI and Kubeproxy. Those are using the most recent

417
00:26:48,250 --> 00:26:52,186
versions for my Kubernetes cluster. And then I'm

418
00:26:52,218 --> 00:26:56,226
adding two more that are not part of the eks add on

419
00:26:56,408 --> 00:26:59,714
official set, which in this case is the metric service and

420
00:26:59,752 --> 00:27:03,266
certificate manager have been deployed automatically by just

421
00:27:03,288 --> 00:27:05,570
setting these specific settings.

422
00:27:06,390 --> 00:27:10,198
The other thing that eks blueprint allows you to do is

423
00:27:10,364 --> 00:27:14,066
the creation of teams. So here I'm creating three different teams

424
00:27:14,098 --> 00:27:17,990
and I just want to quickly explain what those means. So first

425
00:27:18,060 --> 00:27:21,626
I'm creating an admin team. So here you can see that I

426
00:27:21,648 --> 00:27:25,050
have created an admin team and I have this flag set

427
00:27:25,120 --> 00:27:28,938
for true, meaning that this user will actually have access

428
00:27:29,024 --> 00:27:32,986
to anything to do anything on my cluster as an admin.

429
00:27:33,178 --> 00:27:36,634
The other thing I'm doing and creating some dev teams,

430
00:27:36,762 --> 00:27:40,298
just keep in mind that these dev teams creations

431
00:27:40,394 --> 00:27:43,834
are only view only, like they cannot write

432
00:27:43,892 --> 00:27:47,346
anything to my cluster. And this is on purpose. We are trying

433
00:27:47,368 --> 00:27:51,106
to follow here an approach of if you're using GitHubs is

434
00:27:51,128 --> 00:27:54,110
the GitHub pipeline.

435
00:27:54,270 --> 00:27:57,130
Not the pipeline, but githubs tool like Flux, argo,

436
00:27:57,150 --> 00:28:00,850
CD or any other tool that you are using that is actually writing

437
00:28:00,930 --> 00:28:04,534
into your eks cluster. In this case, the dev teams are just

438
00:28:04,572 --> 00:28:08,134
to actually do some namespace configuration and

439
00:28:08,172 --> 00:28:11,814
creating some permissions to

440
00:28:11,852 --> 00:28:15,334
only view the resources. So if you're a developer on one of these teams,

441
00:28:15,382 --> 00:28:18,694
you'd be able to only go and see the resources within your namespace,

442
00:28:18,742 --> 00:28:22,234
right? So if you see here, I'm just setting some labels here, it's saying

443
00:28:22,272 --> 00:28:26,410
for the red team and creating these labels projects to be secret.

444
00:28:26,490 --> 00:28:29,550
For blue, I'm not creating any specific label,

445
00:28:29,890 --> 00:28:33,314
then I'm merging those labels. And by the way, this is all default, you can

446
00:28:33,352 --> 00:28:37,602
copy the configuration. The interesting things are here. So for

447
00:28:37,656 --> 00:28:41,550
each team I'm creating a namespace. So for namespace,

448
00:28:41,630 --> 00:28:44,942
each key which is pretty much each team, I'm creating

449
00:28:45,006 --> 00:28:48,786
a label for my namespace. So it'll be Team blue

450
00:28:48,818 --> 00:28:52,274
and Team red I'm creating some resource quotas

451
00:28:52,322 --> 00:28:56,162
for my namespace. This is really best practice for kubernetes.

452
00:28:56,306 --> 00:29:00,374
When you're creating namespace, you dedicated space for those namespaces

453
00:29:00,502 --> 00:29:04,806
you set also some limit range for your pod,

454
00:29:04,998 --> 00:29:08,362
for persistent volume claying and for the container itself.

455
00:29:08,496 --> 00:29:12,474
And then some tags down below you see some supporting resources.

456
00:29:12,602 --> 00:29:16,458
Literally the supporting resources here are just creating the VPc module

457
00:29:16,634 --> 00:29:20,714
for me and the security groups. So this is already created.

458
00:29:20,762 --> 00:29:24,814
You can see that I have on oregon us west

459
00:29:24,862 --> 00:29:28,370
two, it creates a Kubernetes clusters for me on eks.

460
00:29:28,870 --> 00:29:32,500
And you can see that here on compute I have just two

461
00:29:32,950 --> 00:29:36,422
m five large have been created. If I go and I quickly

462
00:29:36,476 --> 00:29:40,950
show you, if I do Kubectl get

463
00:29:41,100 --> 00:29:44,290
let's do nodes, you'll be able to see those nodes

464
00:29:44,370 --> 00:29:48,046
created if I go and I do kubectl get pods shay

465
00:29:48,098 --> 00:29:52,122
to see all the pods that have been created. Let me just run

466
00:29:52,176 --> 00:29:56,198
this just 1 second while you're updating

467
00:29:56,374 --> 00:30:00,326
so you can see now that I have the CSI already installed

468
00:30:00,358 --> 00:30:04,154
because remember it was an add on. I have the kubeproxy, the metric

469
00:30:04,202 --> 00:30:07,454
server, the cert manage, the Cordians and the

470
00:30:07,492 --> 00:30:11,630
AWS node. So you can see that those things are actually

471
00:30:11,700 --> 00:30:15,154
getting properly configured for me and I

472
00:30:15,192 --> 00:30:19,138
didn't need to do anything. One thing I would like to do now is

473
00:30:19,224 --> 00:30:22,462
I want to create a Nginx deployment,

474
00:30:22,526 --> 00:30:26,702
like a simple Nginx deployment with three pods

475
00:30:26,846 --> 00:30:30,066
on my nodes and actually create an ingress using load

476
00:30:30,098 --> 00:30:34,162
balancer controller. If you saw I don't have load balancer controller

477
00:30:34,226 --> 00:30:37,958
installed on my Eks cluster so I want

478
00:30:37,964 --> 00:30:41,900
to install I'm literally going to uncomment this and I'm going to save

479
00:30:42,270 --> 00:30:46,090
then what I'm going to do is I'm just going to run the terraform again

480
00:30:46,240 --> 00:30:49,834
and hopefully what the terraform will do will install this add on

481
00:30:49,872 --> 00:30:53,678
for me. So let me just quickly

482
00:30:53,844 --> 00:30:57,866
go here, paste this command and apologize

483
00:30:58,058 --> 00:31:01,946
while recording my screen. This terminal

484
00:31:01,978 --> 00:31:06,042
is a little bit slow. Chrome is just not behaving

485
00:31:06,106 --> 00:31:10,034
very well here. So we're just going to give a moment until this

486
00:31:10,072 --> 00:31:17,046
shows on the screen. So now I

487
00:31:17,068 --> 00:31:20,246
have applied my terraform to install the

488
00:31:20,348 --> 00:31:24,082
AWS load balancer controller into my cluster

489
00:31:24,226 --> 00:31:28,134
and hopefully in a couple of seconds, actually minutes

490
00:31:28,252 --> 00:31:31,674
it might take behind the scenes. Actually you saw that

491
00:31:31,712 --> 00:31:35,546
within a couple of seconds it actually got deployed. And if

492
00:31:35,568 --> 00:31:39,254
I go and I check all the pods that have been deployed

493
00:31:39,302 --> 00:31:42,854
on my cluster, hopefully you'll be able to see that. Now the AWS

494
00:31:42,902 --> 00:31:46,538
load balance controller is installed on my cluster.

495
00:31:46,634 --> 00:31:50,010
So let's just wait a few seconds here. Again apologize.

496
00:31:50,090 --> 00:31:53,898
My screen is a little bit slow here but you can see that now I

497
00:31:53,924 --> 00:31:57,346
have the AWS load balancer controller pods that are

498
00:31:57,368 --> 00:32:00,302
part of my add on properly installed.

499
00:32:00,446 --> 00:32:03,874
Now the next thing I want to do is I

500
00:32:03,912 --> 00:32:07,586
have created this simple deployment that is going to be deployed

501
00:32:07,618 --> 00:32:11,750
on team blue. Right now I am on my bash

502
00:32:12,330 --> 00:32:15,894
console, I'm actually an admin. So if you see

503
00:32:15,932 --> 00:32:20,166
here, let me just do kubectl config

504
00:32:20,278 --> 00:32:23,606
1 second kubectl config

505
00:32:23,718 --> 00:32:26,870
if you see here right now I am an admin.

506
00:32:26,950 --> 00:32:30,410
So right now I am actually providing as part of the admin team.

507
00:32:30,480 --> 00:32:34,074
So I'm accessing Kubectl as an admin. So I have a capability

508
00:32:34,202 --> 00:32:37,774
of deploying anything because I'm an admin. So what I would

509
00:32:37,812 --> 00:32:41,134
like to do is deploy this specific deployment that is

510
00:32:41,172 --> 00:32:44,602
just using an Nginx on port 80. It's creating a service

511
00:32:44,676 --> 00:32:48,002
on cluster IP and then finally it's creating an ingress using

512
00:32:48,056 --> 00:32:51,394
the AWS load balancer controller. Behind the scenes you

513
00:32:51,432 --> 00:32:54,914
hopefully create a load balancer for me on AWS and

514
00:32:54,952 --> 00:32:58,850
that load balancer will then forward the traffic

515
00:32:58,930 --> 00:33:02,466
from, you can see here it's an Internet facing load balancer.

516
00:33:02,498 --> 00:33:06,594
So you have a public ip address and then it's actually redirecting

517
00:33:06,642 --> 00:33:10,598
into my service on forward

518
00:33:10,684 --> 00:33:14,474
slash. So what we're going to do now, we're literally going to go

519
00:33:14,512 --> 00:33:17,994
here and you say kubectl apply f and

520
00:33:18,032 --> 00:33:22,002
the name of my file. So behind the scenes

521
00:33:22,166 --> 00:33:25,454
it has actually created those resources on my

522
00:33:25,492 --> 00:33:28,766
namespace called Team Blue. Remember, Team Blue is

523
00:33:28,788 --> 00:33:31,966
a namespace that comes with a dev team. So if I go and

524
00:33:31,988 --> 00:33:36,002
I check here, kubectl get all s team

525
00:33:36,056 --> 00:33:41,234
blue. So right now hopefully you'll be able to see it

526
00:33:41,272 --> 00:33:45,234
created some of those resources. So it created my deployment, it created my

527
00:33:45,272 --> 00:33:49,890
service. And now let's check the ingress Kubectl get ingress

528
00:33:50,230 --> 00:33:51,810
ntimblue.

529
00:33:53,690 --> 00:33:57,538
So you can see here, it actually created my load balancer for

530
00:33:57,564 --> 00:34:01,594
me. So if I go on my console and

531
00:34:01,632 --> 00:34:05,946
I literally go on load balancers and

532
00:34:05,968 --> 00:34:09,734
let's see now it's probably behind the scenes creating my load balancer.

533
00:34:09,782 --> 00:34:13,230
So we're just going to see here you can see

534
00:34:13,380 --> 00:34:16,634
k eight team blue nginx, it's provisioning.

535
00:34:16,762 --> 00:34:20,398
And you'll be able to see that this DNS record here

536
00:34:20,484 --> 00:34:23,886
is exactly the same as the DNS record that

537
00:34:23,908 --> 00:34:27,694
you see on this screen. So we will eight this to get

538
00:34:27,732 --> 00:34:31,474
provisioned. Right. Why we aid. What I want to show

539
00:34:31,512 --> 00:34:34,798
you is right now I am logged as an admin.

540
00:34:34,894 --> 00:34:38,722
I will just change my context to be logged as team

541
00:34:38,776 --> 00:34:42,182
blue user. So I'm going to run

542
00:34:42,236 --> 00:34:45,394
this, this is changing my configuration.

543
00:34:45,442 --> 00:34:49,414
And if I go just give a second, just waiting for

544
00:34:49,532 --> 00:34:53,146
the command here to come back. So if

545
00:34:53,168 --> 00:34:56,826
I go and I check my config, you can see that now I

546
00:34:56,848 --> 00:35:01,094
am a timblow. What is the difference if I try to do Kubectl

547
00:35:01,142 --> 00:35:04,846
get all a. So try to see all the namespaces, you'll see

548
00:35:04,868 --> 00:35:07,680
that these will fail. You'll be like,

549
00:35:09,730 --> 00:35:13,054
you don't have permissions to see everything

550
00:35:13,172 --> 00:35:16,946
on all namespaces because you are a developer only on

551
00:35:16,968 --> 00:35:20,306
Team Blue. So you can see that I got a lot of forbidden. But now

552
00:35:20,328 --> 00:35:24,434
if I try to do Kubectl get pods on the

553
00:35:24,472 --> 00:35:26,710
specific team blue namespace,

554
00:35:27,610 --> 00:35:31,106
you'll be able, hopefully this should return my pods

555
00:35:31,138 --> 00:35:35,414
on Team Blue. So let's just wait a few seconds here.

556
00:35:35,612 --> 00:35:39,174
You can see that. I am able to see that. And if

557
00:35:39,212 --> 00:35:41,530
I want to see for example the ingress,

558
00:35:42,830 --> 00:35:46,934
I can see the ingress, right? So hopefully you'll be able to see the ingress.

559
00:35:47,062 --> 00:35:51,580
I see this ingress. So let's just copy this address here.

560
00:35:51,950 --> 00:35:55,174
Let's actually just copy, let's see if this has finalized.

561
00:35:55,222 --> 00:35:59,402
Provisioning. Since you're provisioning, the load balancer is actually now active.

562
00:35:59,546 --> 00:36:03,722
So it's active. If we go and we check the rules, it's forwarding

563
00:36:03,786 --> 00:36:07,298
port 80 into this target group. And if you

564
00:36:07,304 --> 00:36:10,834
go to look at the target group, you can see that the target group has

565
00:36:10,872 --> 00:36:14,670
all the three pods. Healthy part of my eks

566
00:36:14,750 --> 00:36:18,134
cluster, right? Remember I created deployment. What does this mean?

567
00:36:18,172 --> 00:36:21,606
If I go and I copy this DNS and

568
00:36:21,628 --> 00:36:25,414
I go on HTTP port, I can

569
00:36:25,452 --> 00:36:29,558
see nginx and behind the scenes that is actually redirecting

570
00:36:29,654 --> 00:36:33,146
into my Eks cluster. So that is the demo.

571
00:36:33,248 --> 00:36:37,114
What we've done so far and we achieved in the demo was

572
00:36:37,312 --> 00:36:40,618
I had created a EKS cluster using EKS

573
00:36:40,714 --> 00:36:44,862
blueprints which didn't actually have the

574
00:36:44,916 --> 00:36:48,890
AWS load balancer controller. I easily just uncomment

575
00:36:48,970 --> 00:36:52,846
and redeploy my terraform which behind the scenes it's installed

576
00:36:52,878 --> 00:36:56,718
the load balancer controller. Once installed the load balancer controller,

577
00:36:56,814 --> 00:37:00,846
I deployed my Nginx simple application that uses

578
00:37:00,878 --> 00:37:04,050
the AWS load balancer controller into

579
00:37:04,120 --> 00:37:07,922
my namespace for Teamblue. So I deploy as an admin

580
00:37:07,986 --> 00:37:11,414
because only admin has permissions to deploy. Once it

581
00:37:11,452 --> 00:37:15,378
finished deploying what I went, I changed my roles

582
00:37:15,474 --> 00:37:19,622
into my Kubectl context. Sorry config to

583
00:37:19,676 --> 00:37:22,710
use the development role for Teamblue.

584
00:37:22,870 --> 00:37:25,830
And then I check the ingress controller,

585
00:37:25,910 --> 00:37:29,594
I paste on my browser and hopefully you can all see that

586
00:37:29,632 --> 00:37:33,334
it's actually redirecting. So I just want to say

587
00:37:33,392 --> 00:37:36,814
thanks for people that have tuned in. Hopefully this provides a little bit of

588
00:37:36,852 --> 00:37:41,098
an idea you can just google. For example, if you are interested on terraform

589
00:37:41,194 --> 00:37:44,720
terraform eks get started. You can see here,

590
00:37:45,250 --> 00:37:48,830
if you click here you can see the documentation and if you want

591
00:37:48,900 --> 00:37:51,630
just google eks blueprints,

592
00:37:52,530 --> 00:37:56,006
terraform for example. Workshop. It's part

593
00:37:56,028 --> 00:37:59,414
of my presentation as well. We have the links, but if you want to go

594
00:37:59,452 --> 00:38:03,254
and do a workshop, I highly recommend you do this. If you have any

595
00:38:03,292 --> 00:38:06,742
questions, feel free to reach out on

596
00:38:06,796 --> 00:38:10,150
Twitter or X and also on LinkedIn.

597
00:38:10,650 --> 00:38:13,958
Again, my name is Samuel Baruffi. Thank you so much for the time. Have a

598
00:38:13,964 --> 00:38:14,598
great one.

