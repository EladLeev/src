1
00:01:28,450 --> 00:01:32,146
Hello and welcome to this talk about how Kubernetes can drive SD

2
00:01:32,178 --> 00:01:35,938
one. My name is Alberto Rodriguez Natal, and I'm

3
00:01:35,954 --> 00:01:39,254
a technical leader at the enterprise networking CTO team

4
00:01:39,292 --> 00:01:42,574
at Cisco. My email is on the screen right now,

5
00:01:42,612 --> 00:01:46,046
so feel free to send me a message if you have any questions as you

6
00:01:46,068 --> 00:01:50,442
watch the presentation. So why are we talking about Kubernetes

7
00:01:50,506 --> 00:01:53,520
and SD one today? What is SD one?

8
00:01:54,130 --> 00:01:57,474
You may or may not have heard the concept of SD one before,

9
00:01:57,512 --> 00:02:01,442
but I'm sure that you have heard about wide area networks or one

10
00:02:01,496 --> 00:02:05,770
for short. Those are the kind of networks that interconnect geographically distributed

11
00:02:05,870 --> 00:02:09,986
locations. Think, for instance, an enterprise that may have different branches distributed

12
00:02:10,018 --> 00:02:14,002
geographically, may have some headquarters, may need to connect those branches

13
00:02:14,066 --> 00:02:17,822
to the cloud among themselves, with remote

14
00:02:17,906 --> 00:02:21,866
workers, with IoT devices and so on. So this big network that

15
00:02:21,888 --> 00:02:25,514
expands potentially globally is what usually has

16
00:02:25,552 --> 00:02:29,466
been called the one. So what is SD one now?

17
00:02:29,568 --> 00:02:33,406
Software defined one? Well, software defined one is a

18
00:02:33,508 --> 00:02:37,086
solution or a set of technologies that allows you to build at

19
00:02:37,108 --> 00:02:40,494
one network in a software defined manner, following the pattern of

20
00:02:40,532 --> 00:02:43,934
software defined network, or SDN. In short,

21
00:02:44,052 --> 00:02:47,746
I'm trying to summarize SD one with a single slide here.

22
00:02:47,848 --> 00:02:51,022
In short, we can say that those is all about connecting

23
00:02:51,086 --> 00:02:54,354
any location with any transfer that happens to be

24
00:02:54,392 --> 00:02:57,398
available, providing any service you want to provide,

25
00:02:57,564 --> 00:03:01,254
and focusing on any deployment model that suits your

26
00:03:01,292 --> 00:03:04,850
enterprise, right? So for instance, you have a branch

27
00:03:04,930 --> 00:03:08,554
that you want to connect to the cloud. You may want to use

28
00:03:08,752 --> 00:03:12,474
Internet and mpls line, and you want to apply some

29
00:03:12,512 --> 00:03:16,170
security to that connection. You can apply and

30
00:03:16,240 --> 00:03:19,050
enable all this through an SD one solution.

31
00:03:20,450 --> 00:03:23,710
Now, what is the relationship with Kubernetes?

32
00:03:24,290 --> 00:03:27,866
So let's consider a typical SD

33
00:03:27,898 --> 00:03:31,994
one use case where you have an SD one connection

34
00:03:32,122 --> 00:03:35,794
that connects some users in a branch to some

35
00:03:35,832 --> 00:03:39,986
applications in the cloud. This figure is trying to represent that model

36
00:03:40,088 --> 00:03:42,930
where you have two SD one edges,

37
00:03:43,270 --> 00:03:46,938
each of them closer

38
00:03:46,974 --> 00:03:49,814
to the users or closer to the application,

39
00:03:50,012 --> 00:03:53,574
and you have an SD one controller that is handling these

40
00:03:53,612 --> 00:03:57,898
SD one edges in order to establish an SD one fabric or

41
00:03:57,984 --> 00:04:01,654
an SD one tunnel that connects these two distributed,

42
00:04:01,702 --> 00:04:04,474
these two geographically separated locations. Right?

43
00:04:04,672 --> 00:04:07,882
So why do we care about Kubernetes in this case?

44
00:04:08,016 --> 00:04:11,934
Because that app that shows on the right may

45
00:04:11,972 --> 00:04:15,406
be a Kubernetes app, right? And when

46
00:04:15,428 --> 00:04:19,118
you have Kubernetes, typically what you have is not a single

47
00:04:19,204 --> 00:04:22,994
big monolithic app. Typically what you have is a collection of

48
00:04:23,032 --> 00:04:26,498
services. So even though you

49
00:04:26,584 --> 00:04:30,114
could easily apply optimizations on the

50
00:04:30,152 --> 00:04:33,682
traffic that goes between the branch and the data center

51
00:04:33,736 --> 00:04:37,038
of the cloud via SD one. When you have

52
00:04:37,064 --> 00:04:40,582
a multitude of services, you may want to have different

53
00:04:40,636 --> 00:04:44,534
optimizations and different policies to each of those services so

54
00:04:44,572 --> 00:04:48,762
that you don't look at the traffic as a single green

55
00:04:48,816 --> 00:04:52,650
line, but rather a collection of different lines that

56
00:04:52,720 --> 00:04:56,266
connect to each of these services. So one thing that

57
00:04:56,288 --> 00:05:00,146
we are after here is making SD one aware

58
00:05:00,198 --> 00:05:03,706
of Kubernetes applications, of microservices applications,

59
00:05:03,738 --> 00:05:07,070
right? So that SD one can apply per service,

60
00:05:07,140 --> 00:05:10,686
per microservice a specific optimization. So we end up with

61
00:05:10,708 --> 00:05:14,420
a more colorful deployment as you see here.

62
00:05:16,230 --> 00:05:20,146
The question is how do we achieve that? What can

63
00:05:20,168 --> 00:05:23,906
we do that enables SD one to be aware of

64
00:05:23,928 --> 00:05:27,046
the Kubernetes applications? So this is

65
00:05:27,148 --> 00:05:30,246
an interesting problem because traditionally SD one

66
00:05:30,268 --> 00:05:34,550
and Kubernetes have been like ships in the night. They are deployed

67
00:05:35,210 --> 00:05:39,142
together or like close by. You may have an SD one terminating

68
00:05:39,206 --> 00:05:42,714
right in front of a Kubernetes application, but they have no

69
00:05:42,752 --> 00:05:45,898
idea that the other is behind or after.

70
00:05:45,984 --> 00:05:49,850
Right. However, the fact that today

71
00:05:49,920 --> 00:05:53,294
these two are agnostic to each other doesn't mean that

72
00:05:53,332 --> 00:05:57,678
they need to. So there is a big opportunity here to

73
00:05:57,764 --> 00:06:01,706
make SD one aware of cloud native applications

74
00:06:01,818 --> 00:06:05,154
and then enable this traffic optimization, security and so on,

75
00:06:05,272 --> 00:06:08,660
both in the overlay and underlay of the SD one,

76
00:06:09,110 --> 00:06:12,990
so that you get all the benefits from an SD one deployment

77
00:06:13,070 --> 00:06:17,494
for your cloud native applications. So now

78
00:06:17,692 --> 00:06:21,382
how do we do this? One way to do that is

79
00:06:21,436 --> 00:06:25,026
by something we have called the cloud native SD

80
00:06:25,058 --> 00:06:29,186
one project. So cloud native SD one or CN

81
00:06:29,218 --> 00:06:33,420
one for sort is just an open source project that takes care of this

82
00:06:34,030 --> 00:06:38,342
mapping between applications on the Kubernetes

83
00:06:38,406 --> 00:06:42,174
side with SD one policies on the SD one

84
00:06:42,212 --> 00:06:46,186
side. This is just one way you can make the SD

85
00:06:46,218 --> 00:06:49,626
one aware of kubernetes. You may have SD

86
00:06:49,658 --> 00:06:53,934
one solutions that have some of this already and

87
00:06:54,132 --> 00:06:57,490
they are being more and more aware of kubernetes.

88
00:06:58,070 --> 00:07:01,410
If your SD one solution doesn't have this kind of awareness,

89
00:07:01,750 --> 00:07:04,830
cloud native SD one is a good way to achieve that.

90
00:07:05,000 --> 00:07:08,358
Those end goal at the end is to make

91
00:07:08,444 --> 00:07:12,006
the network aware of these application requirements so

92
00:07:12,028 --> 00:07:15,270
it can dynamically optimize the application performance.

93
00:07:15,850 --> 00:07:19,846
So let's discuss a bit how SCN one work

94
00:07:19,948 --> 00:07:23,718
and let's use it to understand how

95
00:07:23,804 --> 00:07:27,990
SD one can become aware of the cloud native applications.

96
00:07:29,050 --> 00:07:32,526
Let's start from the same picture we

97
00:07:32,548 --> 00:07:35,946
had before. I'm leaving some space because those slide

98
00:07:35,978 --> 00:07:40,106
is going to get populated soon enough. So we have SD

99
00:07:40,138 --> 00:07:43,474
one, we have Kubernetes. Who else will be

100
00:07:43,512 --> 00:07:46,702
here? Well netops and DevOps.

101
00:07:46,846 --> 00:07:50,334
These are those people that is in charge

102
00:07:50,382 --> 00:07:53,858
of either the SD one, the NetOps team, or the

103
00:07:53,864 --> 00:07:57,342
Kubernetes infrastructure and the client applications on the DevOps side.

104
00:07:57,496 --> 00:08:00,838
So these two teams are being to do their best

105
00:08:00,924 --> 00:08:05,014
to make sure that the performance is stellar on

106
00:08:05,132 --> 00:08:08,150
both the network and the application infrastructure.

107
00:08:08,510 --> 00:08:11,946
How we can help these two

108
00:08:11,968 --> 00:08:15,674
teams to integrate better so that the

109
00:08:15,712 --> 00:08:19,642
network plus application perform much

110
00:08:19,696 --> 00:08:23,118
better than they would do on its own. Right? It's on its own.

111
00:08:23,284 --> 00:08:26,606
So let's try to follow the

112
00:08:26,628 --> 00:08:30,494
flow of a clonative application that is

113
00:08:30,532 --> 00:08:33,810
connected to an SD one network, right? So it all

114
00:08:33,880 --> 00:08:37,426
starts with DevOps deploying a

115
00:08:37,448 --> 00:08:41,486
service on Kubernetes, typically with a YAML file

116
00:08:41,678 --> 00:08:46,070
that provides certain metadata

117
00:08:46,490 --> 00:08:50,054
that would be useful for those one things like

118
00:08:50,092 --> 00:08:53,186
okay, this is a service that I'm exposing via

119
00:08:53,378 --> 00:08:56,774
a load balancer type, for instance. And here

120
00:08:56,812 --> 00:09:00,714
are the labels that I'm applying or maybe even some annotations that

121
00:09:00,752 --> 00:09:04,870
I'm adding to the service to the YAML configuration.

122
00:09:05,030 --> 00:09:08,826
So that gives you some information about what the application is about.

123
00:09:09,008 --> 00:09:13,006
That is information that later on the net ops team can use

124
00:09:13,188 --> 00:09:15,950
to map into SD one policies.

125
00:09:16,450 --> 00:09:19,598
So how do we extract this application information

126
00:09:19,684 --> 00:09:22,974
and metadata from Kubernetes? Well, the way can one

127
00:09:23,012 --> 00:09:26,146
does it is by something we call the

128
00:09:26,168 --> 00:09:30,226
CNG one operator that is monitoring for services that have

129
00:09:30,248 --> 00:09:34,146
been deployments in the Kubernetes cluster that are being exposed outside and

130
00:09:34,248 --> 00:09:38,006
is harvesting information about this service, extracting the

131
00:09:38,028 --> 00:09:42,038
labels and annotations and so on so that they can be

132
00:09:42,204 --> 00:09:45,654
made available to those SD one. How we made them available.

133
00:09:45,772 --> 00:09:49,414
Well, what the Syngon operator does is that it introduces that

134
00:09:49,452 --> 00:09:52,986
information in a service registry so that you can go to

135
00:09:53,008 --> 00:09:56,570
the service registry and find information about these applications.

136
00:09:57,470 --> 00:10:01,002
We have a component that we call the can one reader that is reading

137
00:10:01,066 --> 00:10:05,230
this service registry to find information that the CN one operator

138
00:10:05,730 --> 00:10:09,214
has put there. And now since you

139
00:10:09,252 --> 00:10:13,166
need to adapt this information to specific SD

140
00:10:13,198 --> 00:10:16,674
one policies, we have a can one adapter that

141
00:10:16,712 --> 00:10:20,158
is specific to the SD one solution,

142
00:10:20,334 --> 00:10:23,678
right? It speaks those APIs, the particular APIs

143
00:10:23,774 --> 00:10:27,286
that the SD one solution has. And these APIs may be different from vendor to

144
00:10:27,308 --> 00:10:31,494
vendor, right? And it's used to pass information

145
00:10:31,612 --> 00:10:34,690
about the applications to the SD one controller

146
00:10:34,850 --> 00:10:38,338
so that those netops can program some policies

147
00:10:38,434 --> 00:10:42,154
that match the metadata that we found on the application

148
00:10:42,272 --> 00:10:46,454
side. And this is what we need to enable per microservice

149
00:10:46,502 --> 00:10:49,658
specific optimizing on the SD one. So we end up with

150
00:10:49,664 --> 00:10:53,690
those colorful picture that we saw a moment ago. Now I

151
00:10:53,760 --> 00:10:56,846
understand that those is a lot to take in, especially if it is the first

152
00:10:56,868 --> 00:11:00,414
time that you are seeing this. So let's walk through the same

153
00:11:00,452 --> 00:11:03,874
flow but this time with an example. So you see what

154
00:11:03,912 --> 00:11:07,650
we are after here. And for that we're going to use the example

155
00:11:07,720 --> 00:11:11,726
of a video conferencing application. So let's

156
00:11:11,758 --> 00:11:15,454
say that we have deployed a video conference

157
00:11:15,502 --> 00:11:18,726
application on kubernetes and it so happens to

158
00:11:18,748 --> 00:11:22,086
be composed of four microservices. So one for

159
00:11:22,108 --> 00:11:25,686
voice, another for video slice and chat and so on. As you

160
00:11:25,708 --> 00:11:29,846
can imagine, each of these different microservices may have different

161
00:11:29,948 --> 00:11:33,526
requirements in terms of how the network should handle the traffic.

162
00:11:33,638 --> 00:11:37,498
So what can we do here? Well, let's drop all the components that we

163
00:11:37,504 --> 00:11:41,490
have discussed up until now. So we have the net tops, the bob's teams

164
00:11:41,590 --> 00:11:45,418
and then the can one components as well as the SD one controller

165
00:11:45,434 --> 00:11:48,990
and the service registry. So this time we are going to start

166
00:11:49,060 --> 00:11:52,730
from the network perspective and describe

167
00:11:52,810 --> 00:11:56,206
how they can program the SD one to prepare

168
00:11:56,238 --> 00:12:00,130
it to receive the metadata from the applications.

169
00:12:00,470 --> 00:12:03,906
So one thing you have to do is to populate the

170
00:12:03,928 --> 00:12:07,526
same one adapter to the kind of metadata that is expected from

171
00:12:07,548 --> 00:12:11,606
the application. Those can be labels that are being applied to

172
00:12:11,628 --> 00:12:15,830
the services, to the microservices. This could be annotations

173
00:12:16,330 --> 00:12:19,846
that the DevOps add to the YaML files as they

174
00:12:19,868 --> 00:12:23,642
deploy the services. The point here is that this is what

175
00:12:23,696 --> 00:12:27,258
comes from the application. This is the metadata that comes from the application.

176
00:12:27,424 --> 00:12:30,974
So this is what the netops uses to then build some

177
00:12:31,012 --> 00:12:34,878
policies. Now on the SD one controller what we do

178
00:12:35,044 --> 00:12:38,606
is that we create some specific policies to match

179
00:12:38,708 --> 00:12:41,806
that metadata. And here we are

180
00:12:41,828 --> 00:12:46,046
defining four different policies that match the metadata

181
00:12:46,078 --> 00:12:49,714
that we have defined. So for instance for the real time

182
00:12:49,752 --> 00:12:53,474
metadata we define a policy that tries to

183
00:12:53,512 --> 00:12:57,094
optimize for minimal latency and no

184
00:12:57,132 --> 00:13:00,342
drops if possible for let's say

185
00:13:00,396 --> 00:13:04,386
those file transfer kind of metadata,

186
00:13:04,498 --> 00:13:07,446
what we care about is a lot of bandwidth. What we care about is a

187
00:13:07,468 --> 00:13:10,906
lot of bandwidth and again minimizing drops. So you see here

188
00:13:11,008 --> 00:13:14,170
on the slide the different policies that we have defined.

189
00:13:14,750 --> 00:13:18,460
Now this metadata needs to come from the application.

190
00:13:18,910 --> 00:13:22,410
So as we saw before, when the DevOps

191
00:13:22,490 --> 00:13:26,122
deploys the services along with the metadata,

192
00:13:26,266 --> 00:13:30,026
the CN one operator extracts this metadata

193
00:13:30,138 --> 00:13:33,966
and cases it to the service registry so that the CNG reader

194
00:13:33,998 --> 00:13:37,970
can then retrieve the application information along with the metadata.

195
00:13:38,550 --> 00:13:42,318
So the right application is mapped

196
00:13:42,334 --> 00:13:45,570
to the right policy and the flows get again

197
00:13:45,720 --> 00:13:47,880
optimized over the SD one.

198
00:13:48,730 --> 00:13:52,806
So this is an example that shows the kind of

199
00:13:52,828 --> 00:13:56,226
optimizations you can apply on the SD one overlay,

200
00:13:56,338 --> 00:13:59,750
that means on the SD one edges.

201
00:13:59,830 --> 00:14:03,738
So from SD one edge to SD one edge over a certain

202
00:14:03,824 --> 00:14:07,242
underlay network that is typically not

203
00:14:07,296 --> 00:14:11,100
under control of the SD one. Now let's look at another example

204
00:14:11,410 --> 00:14:14,798
where you control not only the overlay but also

205
00:14:14,884 --> 00:14:18,254
the underlay. And we are going to talk about how you can use

206
00:14:18,292 --> 00:14:22,206
that, for instance for bandwidth auto scaling. So in

207
00:14:22,228 --> 00:14:25,906
this cases, we are taking advantage of some

208
00:14:26,008 --> 00:14:29,986
network connectivity providers that nowadays offer APIs to

209
00:14:30,008 --> 00:14:33,394
take advantage of underlay capabilities. So if

210
00:14:33,432 --> 00:14:37,266
you happen to be using and your SD one, one of these providers, you can

211
00:14:37,288 --> 00:14:40,774
optimize both at the overlay with those SD one as well as

212
00:14:40,892 --> 00:14:44,246
on the underlay with one of these providers. And a very

213
00:14:44,268 --> 00:14:48,318
good example to showcase those kind of capabilities

214
00:14:48,514 --> 00:14:52,006
is following the same pattern that Kubernetes follows

215
00:14:52,038 --> 00:14:55,580
in terms of auto scaling. So Kubernetes is very good

216
00:14:56,270 --> 00:15:00,346
to scale applications both horizontally and vertically. Why we

217
00:15:00,368 --> 00:15:03,806
cannot do the same on the network, right? And if you

218
00:15:03,828 --> 00:15:07,600
have the right tools, you can certainly do that on the network as well.

219
00:15:08,130 --> 00:15:12,654
So for this example, we are looking again at this kind

220
00:15:12,692 --> 00:15:16,114
of deployment model. We are adding this

221
00:15:16,152 --> 00:15:19,394
time a connectivity provider in the middle that as

222
00:15:19,432 --> 00:15:22,706
in the previous example, we were agnostic to it. This time we

223
00:15:22,728 --> 00:15:26,046
are interacting with it through an underlay API, through an API

224
00:15:26,078 --> 00:15:29,334
those connectivity provide offers to the SD one.

225
00:15:29,452 --> 00:15:33,000
If we have this in place, and we again

226
00:15:33,370 --> 00:15:36,534
deploy the same tools that we had available to us before,

227
00:15:36,652 --> 00:15:41,206
so that we have this workflow of extracting application metadata

228
00:15:41,318 --> 00:15:45,274
and using it for SD one policies. Now we can

229
00:15:45,312 --> 00:15:49,226
for instance not only extract information about labels and

230
00:15:49,248 --> 00:15:53,502
annotations on the application, we can also extract information about

231
00:15:53,636 --> 00:15:56,974
the number of replicas that a particular application has and

232
00:15:57,012 --> 00:15:59,834
use that on the underlay to scale the bandwidth.

233
00:15:59,962 --> 00:16:03,354
So as the number of replicas grows on the Kubernetes

234
00:16:03,402 --> 00:16:07,806
side, the bandwidth allocated grows as well on

235
00:16:07,828 --> 00:16:11,218
the underlay provider. And not only that, which is even more interesting

236
00:16:11,304 --> 00:16:14,834
is that when the replicas scale down, you can

237
00:16:14,872 --> 00:16:18,866
also scale down the connectivity, the bandwidth

238
00:16:18,898 --> 00:16:22,226
that you have requested. Right? So this translates

239
00:16:22,258 --> 00:16:25,782
into some cost savings to you at the end of the day, which is something

240
00:16:25,836 --> 00:16:29,626
nice that we all are after, I guess. Right? So this

241
00:16:29,648 --> 00:16:33,302
is in general another good example of how enabling

242
00:16:33,366 --> 00:16:37,020
these kind of integrations between the network and the application

243
00:16:37,390 --> 00:16:40,886
can deliver not only optimization in terms of performance,

244
00:16:40,918 --> 00:16:44,734
but also in terms of cost. So, wrapping up we have

245
00:16:44,772 --> 00:16:47,850
discussed several things in this presentation,

246
00:16:48,010 --> 00:16:51,166
but the bottom line is that if you have an

247
00:16:51,188 --> 00:16:54,754
SD one and you are connecting to a Kubernetes cluster through that

248
00:16:54,792 --> 00:16:58,754
SD one. Please make sure that those two talk with another

249
00:16:58,952 --> 00:17:02,946
so that your Kubernetes applications can take advantage of the SD ones of

250
00:17:02,968 --> 00:17:06,566
those one optimizing. Now I want to leave you with

251
00:17:06,588 --> 00:17:09,766
a question right if we have discussed today about

252
00:17:09,868 --> 00:17:13,298
how SD one can learn about Kubernetes metadata,

253
00:17:13,474 --> 00:17:17,126
what about a service mesh metadata? Is there anything we can

254
00:17:17,148 --> 00:17:20,666
do there? We believe that the answer

255
00:17:20,848 --> 00:17:24,650
is yes and we are trying to work

256
00:17:24,720 --> 00:17:27,946
on that front right now. So hopefully you

257
00:17:27,968 --> 00:17:31,414
should see some ideas flowing in the right direction

258
00:17:31,462 --> 00:17:34,958
soon. And yeah, if you want to take a

259
00:17:34,964 --> 00:17:38,686
look at what we have done in the clarity one project, you have

260
00:17:38,868 --> 00:17:42,350
the repo there and you can reach out to me

261
00:17:42,420 --> 00:17:45,870
either via email or you can find me on LinkedIn and

262
00:17:45,940 --> 00:17:49,614
feel free to send me any questions or

263
00:17:49,812 --> 00:17:53,502
feedback on this presentation and that will be it. Yeah,

264
00:17:53,556 --> 00:17:57,330
thanks for your attention and looking forward to the discussion.

