{"language_code": "en_us", "audio_url": "https://cdn.assemblyai.com/upload/8cb8ab47-a059-4a4d-a354-14f5e84bc538", "punctuate": true, "format_text": true, "dual_channel": null, "webhook_url": null, "webhook_auth_header_name": null, "webhook_auth_header_value": null, "audio_start_from": null, "audio_end_at": null, "word_boost": ["ab", "attacks", "between", "breach", "building", "but", "capabilities", "carelessness", "certus cybersecurity", "code", "conf fourty two", "configuration", "continous", "continuous", "cto", "customers", "dast", "defenses", "demands", "deploying", "devops", "enables", "enabling", "equals", "everevolving", "exercises", "externalfacing", "failures", "feedback loop", "gaps", "helps", "iast", "infrastructural", "production", "productions", "protect", "protection", "protective", "remediate", "sast", "sealhealing", "shift up", "speeds", "strives", "swapnil deshmukh", "these", "tools", "ultimately", "units"], "boost_param": "high", "filter_profanity": false, "redact_pii": false, "redact_pii_audio": false, "redact_pii_policies": null, "redact_pii_sub": null, "speaker_labels": false, "speakers_expected": null, "content_safety": false, "content_safety_confidence": null, "iab_categories": false, "custom_spelling": null, "disfluencies": false, "sentiment_analysis": false, "auto_chapters": false, "entity_detection": false, "summarization": true, "summary_model": "informative", "summary_type": "bullets_verbose", "auto_highlights": true, "language_detection": false, "speech_threshold": null, "id": "1699e50f-9c43-4f5e-bc2d-4a84ed42812c", "status": "completed", "error": null, "text": "You. Hi everyone, my name is Swapnil Deshmukh and I'm the CTO and co founder of Certus Cybersecurity. Certus Cybersecurity is a security consulting company and we provide security services to various Fortune 500 companies. And a common theme that we have seen across the board is that we have new terminal logies from a non production network standpoint itself, such as shift left, where all the security continous are being passed over to either developers or are being tool based. And they have a certain set of policies that needs to be adhered to during the entire code of software defined lifecycle. And on the other hand, we have traditional technologies like red teaming exercises that happens in addition to that. Now there is chaos engineering and there is mitre attacks. There are apt relevant exercise as well. So something very narrowly focused than what Mitre would. And the reason for that exercise itself is to not be very intrusive from the testing protective itself, but just to do a pressure test to identify how vulnerable an infrastructure would be. And both technologies in itself, in its own right, are something that we certainly need. But what we see is that there is a gap when it comes to communicating from what learnings we have from shift left perspective, and also the learnings that we have from our red teaming, or from mitral attacks, or from chaos engineering itself. And since there is a gap, the non production tends to have similar set of issues that gets trickled into production itself. And all of these attacks are mostly point in time. And what that means is that if I do my testing today, but if you push the code tomorrow itself, I would not be able to test it because the time has passed from a testing perspective itself. So all of these engagements are not continuous testings per se, they are point in time testing. As a result of that, if after the test has been done, someone pushes a new code to the production for the things that were already validated in non production itself, it tends to have these insecurities again passed over to the production network. As a result of that. We strongly recommend that people must be thinking, should be thinking about how can they integrate continuous feedback between these two silos that we have non production network and production network, and the testing that happens between the two from a security standpoint. And that's what we are proposing from a shift up perspective. So shift up perspective, we are talking about continuous feedback loop. And that feedback loop essentially means that the production network, whenever it's discovering new things from a policy standpoint, that they are updating within their ecosystem itself should automatically get trickled down into non production as the policies that they need to enforce as well. And it could happen in two ways. Either it can have similar infrastructural and the infrastructure talks to each other from an API perspective itself, where these policies get pushed and then these get validated during the non production testing that is performed through pen testing for example, or could be dynamic testing like dast for example. So it gets validated there. If it's application level testing itself, then the non production learnings that they have would get trickled down as a policies into the production. So this talking back and forth itself is what we are proposing. And we have seen that that has been very, very effective for a few of the companies that we have worked with in the past. However, there is a course, there is a journey that company needs to embark whenever they are thinking about integrating DevOps or devsecops, or integrating security and compliance within DevOps pipeline itself. And the journey needs to be first it needs to be done manually so that you can have a lot of historical data about all of these policies, all of the different security controls that one should be considering, and then looking at those policies and translating that into either of the networks to give you an anecdote around it. We had a WAP solution that these company was using and the VAP was obviously automatically updated thing the attack trees. So whenever it will identify that there is a certain set of attacks that is happening, it will look at what are the new regexes, what are the new attack patterns that an adversary is trying to attack them with. And it will, behind the scenes start updating those regex in production and in the non production itself. They did not have the WAF at any given point in time. As a result of that, those policies were never getting updated. However, the application was very resistant against SQLI injections itself or SQL injections because it had its own set of rule sets. One fine day they discovered that Wap was completely misconfigured from a SQL injection standpoint. As a result of that, an adversary had passed through into the application layer directly. Without these, new WAF can directly talk to the application itself and could have tried to perform SQL. Now, fortunately, the company had already thought about it and started integrating that into the application because non production never had the WAF or the luxury of WAF and testing always would have found it. But if you have to set up the shift up properly, then you should mimic the production network as it's so the WAF should have been there, then you can perform two set of testings where you have a test with the WAF and one test without the WAP. And you can see how resilient your application is against SQLI by doing that exercise itself. But then by having both talking same terminology from layer defenses perspective itself, it becomes very easy for us to perform more set of testings when it comes to penetration testing itself and non production. Because even if we take down the run production because these sqlites up, it doesn't have any impact on production. As a result of that, all the learnings that we have during that exercise itself and all the new regexes that it has created, they both should be syncing together on those regexes. As a result of that, the policies would be updated on both ends are supposed to be updated in one there was a company that wasn't doing SQLite properly, very very big name in telco, and in this particular company itself they fortunately had a bug bounty program where we were able to identify a lot of SQLis by just using this as an attack pattern itself. So we were able to penetrate into their WAP regex and directly communicate with it because they never had either shift up or the continuous feedback from their development team itself back to these production. So I hope this concept of integrating chaos engineering and integrating with the learnings that we have from the production itself into non production and vice versa in a continuous fashion would help create a very resilient security system for your company. Me. And if you have any questions or if you want to reach out to us, please do not hesitate in reaching out to our either company which is Certus cybersecurity.com or our email address is info info@certuscyber.com.", "words": [], "utterances": null, "confidence": 0.94707006436042, "audio_duration": 491.0, "webhook_status_code": null, "webhook_auth": false, "summary": "- Certus Cybersecurity provides security services to various Fortune 500 companies. CTO Swapnil Deshmukh says there is a gap when it comes to communicating between non production and production networks. He suggests a continuous feedback loop between the two.", "auto_highlights_result": {"status": "success", "results": [{"count": 2, "rank": 0.1, "text": "non production network", "timestamps": [{"start": 50724, "end": 51754}, {"start": 181340, "end": 182482}]}, {"count": 11, "rank": 0.09, "text": "non production", "timestamps": [{"start": 50724, "end": 51386}, {"start": 125128, "end": 126066}, {"start": 161828, "end": 162346}, {"start": 181340, "end": 182066}, {"start": 208036, "end": 208842}, {"start": 224568, "end": 225226}, {"start": 237708, "end": 238530}, {"start": 319428, "end": 320046}, {"start": 361716, "end": 362266}, {"start": 404208, "end": 404950}, {"start": 465572, "end": 466186}]}, {"count": 6, "rank": 0.09, "text": "production network", "timestamps": [{"start": 50938, "end": 51754}, {"start": 166728, "end": 167694}, {"start": 181618, "end": 182482}, {"start": 182748, "end": 183426}, {"start": 199488, "end": 200214}, {"start": 374008, "end": 374990}]}, {"count": 1, "rank": 0.08, "text": "continuous testings", "timestamps": [{"start": 151072, "end": 151894}]}, {"count": 1, "rank": 0.08, "text": "time testing", "timestamps": [{"start": 153008, "end": 153906}]}, {"count": 1, "rank": 0.08, "text": "application level testing", "timestamps": [{"start": 234658, "end": 235986}]}, {"count": 1, "rank": 0.07, "text": "dynamic testing", "timestamps": [{"start": 229628, "end": 230306}]}, {"count": 1, "rank": 0.07, "text": "pen testing", "timestamps": [{"start": 227228, "end": 227874}]}, {"count": 1, "rank": 0.07, "text": "penetration testing", "timestamps": [{"start": 402848, "end": 403686}]}, {"count": 1, "rank": 0.07, "text": "non production testing", "timestamps": [{"start": 224568, "end": 225954}]}, {"count": 1, "rank": 0.06, "text": "non production network standpoint", "timestamps": [{"start": 50724, "end": 52266}]}, {"count": 1, "rank": 0.06, "text": "new WAF", "timestamps": [{"start": 349424, "end": 349894}]}, {"count": 1, "rank": 0.06, "text": "continuous feedback loop", "timestamps": [{"start": 194080, "end": 195670}]}, {"count": 3, "rank": 0.06, "text": "continuous feedback", "timestamps": [{"start": 177186, "end": 178658}, {"start": 194080, "end": 195206}, {"start": 451908, "end": 452826}]}, {"count": 8, "rank": 0.06, "text": "company", "timestamps": [{"start": 37778, "end": 38454}, {"start": 259908, "end": 260270}, {"start": 296124, "end": 296342}, {"start": 357508, "end": 357790}, {"start": 425224, "end": 425442}, {"start": 434860, "end": 435142}, {"start": 474692, "end": 474966}, {"start": 482716, "end": 483030}]}]}, "content_safety_labels": null, "iab_categories_result": null, "chapters": null, "sentiment_analysis_results": null, "entities": null}