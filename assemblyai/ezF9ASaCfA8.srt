1
00:00:34,450 --> 00:00:37,970
Hello everybody, thanks for joining me to this conference.

2
00:00:38,130 --> 00:00:41,734
For the next 30 minutes we will talk together about

3
00:00:41,772 --> 00:00:45,670
the past, the present, and the future of the HTTP cache.

4
00:00:46,170 --> 00:00:49,622
Let's see together how to accelerate your APIs or your

5
00:00:49,676 --> 00:00:53,694
web writes using only the HTTP features. So first let

6
00:00:53,732 --> 00:00:57,806
me introduce myself. My name is Silver Kombrak. I'm a

7
00:00:57,988 --> 00:01:01,242
freelance goling architect and the creator

8
00:01:01,306 --> 00:01:04,770
of the HTTP cache tool

9
00:01:04,840 --> 00:01:08,718
called Swamp. I'm also a french baguette, so sorry for my baguette

10
00:01:08,734 --> 00:01:12,062
accent. And I'm the maintainer

11
00:01:12,126 --> 00:01:15,474
of the Caddy cache on lure module and

12
00:01:15,512 --> 00:01:19,026
an active open source contributor. By the way, you can find me on GitHub

13
00:01:19,058 --> 00:01:22,466
caching Darkwick and on Twitter searching Darkwick underscore

14
00:01:22,498 --> 00:01:25,686
dev. So we have to go back in time.

15
00:01:25,788 --> 00:01:30,060
Near the end of 1998,

16
00:01:31,150 --> 00:01:35,020
HTTP 10 was released for two years,

17
00:01:35,390 --> 00:01:38,810
but the chaos between each providers, like Google

18
00:01:38,880 --> 00:01:43,360
or Akamai because of HTTP 10

19
00:01:44,450 --> 00:01:48,362
wasn't as extensible as they wanted. So they implemented

20
00:01:48,426 --> 00:01:52,222
some other features on their own way, and it was really

21
00:01:52,276 --> 00:01:58,514
painful to support each provider, all providers with

22
00:01:58,552 --> 00:02:01,982
all of their features and all of their specific features.

23
00:02:02,046 --> 00:02:06,130
So HTTP 1.0 didn't explain in depth

24
00:02:06,290 --> 00:02:10,038
what is a request, a response, an HTTP either,

25
00:02:10,124 --> 00:02:13,654
or a comment in your

26
00:02:13,772 --> 00:02:17,650
HTTP request, for example. And it didn't explain

27
00:02:17,740 --> 00:02:20,890
the way to handle and manage the incoming data

28
00:02:21,040 --> 00:02:24,522
or what is prohibited, and let the providers be

29
00:02:24,576 --> 00:02:29,130
free of the implementation. In June 1999,

30
00:02:29,280 --> 00:02:33,818
Matrix, the first movie was released to theaters.

31
00:02:33,914 --> 00:02:37,454
We discovered Neo and the red

32
00:02:37,492 --> 00:02:39,498
and blue pills. Meanwhile,

33
00:02:39,674 --> 00:02:43,774
webfathers started to write and release

34
00:02:43,822 --> 00:02:47,218
an RFC to standardize. HTTP 1.1

35
00:02:47,304 --> 00:02:51,634
RFC is for request for comments, and it's like a big

36
00:02:51,832 --> 00:02:55,810
budget blog that define how a protocol

37
00:02:55,890 --> 00:02:59,238
must work and

38
00:02:59,404 --> 00:03:03,858
its code is RFC 20 616

39
00:03:04,034 --> 00:03:08,054
or also known as HTTP

40
00:03:08,102 --> 00:03:11,898
1.1 was. It's the very first

41
00:03:11,984 --> 00:03:15,626
RFC to really standardize things. It will define the

42
00:03:15,648 --> 00:03:19,110
grammar. So what's an HTTP eater,

43
00:03:19,190 --> 00:03:22,794
what resource identifier and

44
00:03:22,832 --> 00:03:26,734
on UI that tells one URL must match to one

45
00:03:26,772 --> 00:03:31,274
thing on your server. It will also define what is an HTTP

46
00:03:31,322 --> 00:03:34,610
request, how to build it,

47
00:03:34,760 --> 00:03:38,020
which parts can receive comments, which parts must be

48
00:03:38,710 --> 00:03:42,654
by the server, and it defines most of the HTTP

49
00:03:42,702 --> 00:03:46,306
users always used nowadays. More specifically

50
00:03:46,418 --> 00:03:51,382
in this RFC, there is an interesting part

51
00:03:51,436 --> 00:03:55,426
about the caching in HTTP, and it's

52
00:03:55,458 --> 00:03:59,286
the first try to standards that and it starts with the following

53
00:03:59,318 --> 00:04:02,954
sentence. Caching would be useless if it

54
00:04:02,992 --> 00:04:06,854
didn't significantly improve

55
00:04:06,902 --> 00:04:10,858
performances. That means if your cache server responds slower

56
00:04:10,954 --> 00:04:12,190
than your upstream,

57
00:04:14,850 --> 00:04:19,194
you don't need this cache server.

58
00:04:19,322 --> 00:04:22,926
But nowadays there are some other points

59
00:04:23,028 --> 00:04:27,522
if your cache server is more energy energy

60
00:04:27,656 --> 00:04:29,982
consuming than the upstream,

61
00:04:30,126 --> 00:04:33,998
or is more cost expensive

62
00:04:34,094 --> 00:04:38,326
than the upstream. You may not need a cache server too.

63
00:04:38,508 --> 00:04:42,130
We can't only take in consideration the power and the speed

64
00:04:42,210 --> 00:04:45,494
to serve the data, as it's the first standard,

65
00:04:45,612 --> 00:04:49,114
there are some missing points, like the

66
00:04:49,152 --> 00:04:53,366
following. If a stored

67
00:04:53,398 --> 00:04:57,354
response is not fresh enough, the cache may still return

68
00:04:57,472 --> 00:05:01,814
the response with the appropriated

69
00:05:01,942 --> 00:05:04,080
warning eater first.

70
00:05:05,250 --> 00:05:09,114
Who knew the warning HTTP

71
00:05:09,162 --> 00:05:12,366
either existence to be

72
00:05:12,388 --> 00:05:16,366
honest, I discovered that by reading this rfc,

73
00:05:16,478 --> 00:05:20,370
and I'm pretty sure most of recent applications

74
00:05:20,870 --> 00:05:24,242
doesn't choose that either. But that's a back

75
00:05:24,296 --> 00:05:25,620
order from the past.

76
00:05:27,370 --> 00:05:31,254
And the most weird part is that the cache can return a

77
00:05:31,292 --> 00:05:34,786
not fresh enough response,

78
00:05:34,898 --> 00:05:38,506
so you are free to return a cache response to

79
00:05:38,528 --> 00:05:42,570
your client, even if it's considered as Taylor

80
00:05:44,350 --> 00:05:48,250
the RFC 20 616 introduced

81
00:05:49,070 --> 00:05:53,790
the cache control HTTP Eater and its own directives.

82
00:05:54,210 --> 00:05:57,934
There are the common directives that can be used in the request and

83
00:05:57,972 --> 00:06:01,962
the response context. The wellknown no cache directive

84
00:06:02,026 --> 00:06:05,646
won't use a cache response in the request context, and won't

85
00:06:05,678 --> 00:06:09,970
store the specified response either. In the response context,

86
00:06:11,030 --> 00:06:14,494
the no store directive won't store the upstream

87
00:06:14,542 --> 00:06:17,974
response. The max edge will tell to the

88
00:06:18,012 --> 00:06:22,342
cache server to store that for at most x

89
00:06:22,396 --> 00:06:26,386
seconds in the response context and in the request context,

90
00:06:26,498 --> 00:06:30,150
it should return the cache response only if it's stored

91
00:06:30,230 --> 00:06:34,390
for less than x seconds. The not transform directive

92
00:06:34,470 --> 00:06:37,910
will tell to the cache to not try to transform the request

93
00:06:37,990 --> 00:06:41,422
or the response. Depending the context. It should

94
00:06:41,476 --> 00:06:45,182
not remove or add extra editors and not

95
00:06:45,236 --> 00:06:49,230
try to jzip the response to reduce its

96
00:06:49,300 --> 00:06:53,758
size. The request or the response must stay unchanged.

97
00:06:53,934 --> 00:06:59,214
The HTTP request cache control directive contains

98
00:06:59,262 --> 00:07:03,566
the max tail to explain okay, you can serve a stale response

99
00:07:03,678 --> 00:07:07,574
that means not fresh enough and is

100
00:07:07,612 --> 00:07:11,222
that stale since x

101
00:07:11,276 --> 00:07:14,120
second less than x second.

102
00:07:16,010 --> 00:07:19,494
The Minfresh directive is not really used in production

103
00:07:19,542 --> 00:07:22,522
because it's here to be able to tell to the cache okay,

104
00:07:22,576 --> 00:07:27,610
serve the stored response only if it's stored since

105
00:07:27,680 --> 00:07:31,686
at least x seconds, so you cannot

106
00:07:31,798 --> 00:07:35,626
have a stored response that is fresher

107
00:07:35,658 --> 00:07:39,454
than x second. I don't have the use case for

108
00:07:39,492 --> 00:07:41,280
that I don't know,

109
00:07:42,290 --> 00:07:46,398
and only if cached directive

110
00:07:46,574 --> 00:07:50,450
serves the cached response only if it's present in the storage.

111
00:07:50,790 --> 00:07:54,578
So if your storage was

112
00:07:54,664 --> 00:07:58,146
a storage response, it will serve it even if it's

113
00:07:58,178 --> 00:08:02,146
tail or anything else. The HTTP response cache

114
00:08:02,178 --> 00:08:06,082
control directive contains the public that ensure

115
00:08:06,146 --> 00:08:09,610
the response can be stored by the shared cache,

116
00:08:10,270 --> 00:08:14,460
and opposed to that, the private that can be

117
00:08:14,910 --> 00:08:19,062
stored only by the private caches. Like the browser,

118
00:08:19,206 --> 00:08:22,826
the must and proxy will revalidate

119
00:08:22,858 --> 00:08:26,890
the response with the upstream and if no errors

120
00:08:26,970 --> 00:08:30,878
appears, it will return the stored response to the

121
00:08:30,884 --> 00:08:34,738
client and the fmaxage will manage

122
00:08:34,824 --> 00:08:38,850
the stored duration on shared cache. There is a

123
00:08:38,920 --> 00:08:42,702
last directive named cache extension.

124
00:08:42,846 --> 00:08:46,898
This directive allows the user to add more custom directives

125
00:08:46,994 --> 00:08:50,440
only understood by the cache system itself.

126
00:08:50,890 --> 00:08:54,614
The first example, add the

127
00:08:54,652 --> 00:08:57,510
extension community with the value UCI.

128
00:08:59,310 --> 00:09:03,050
The cache system could increase the

129
00:09:03,120 --> 00:09:07,450
time to live for the response storage

130
00:09:08,030 --> 00:09:10,460
if the value is UCI, for example.

131
00:09:12,930 --> 00:09:16,510
And that's the same for only if my case match

132
00:09:16,660 --> 00:09:20,046
with the given value that

133
00:09:20,068 --> 00:09:24,546
should. So during the summer 2001

134
00:09:24,728 --> 00:09:27,570
major improvement has been made.

135
00:09:27,720 --> 00:09:31,806
That's not the loft winners,

136
00:09:31,918 --> 00:09:34,778
but that's ESI language.

137
00:09:34,974 --> 00:09:38,754
To be honest, this is not a validated rfc,

138
00:09:38,882 --> 00:09:43,254
but it's currently accepted by the w three

139
00:09:43,452 --> 00:09:46,694
C and integrated in most of your

140
00:09:46,732 --> 00:09:50,054
CDN or cache servers. The ESI

141
00:09:50,102 --> 00:09:52,870
language allows the templates,

142
00:09:53,030 --> 00:09:57,046
cache the templates and only request the dynamic parts.

143
00:09:57,158 --> 00:10:01,034
In this example we request the article

144
00:10:01,162 --> 00:10:04,766
HTML content and this page have a

145
00:10:04,788 --> 00:10:07,946
static article and a dynamic header

146
00:10:08,138 --> 00:10:11,754
called user PHP. The ESI

147
00:10:11,802 --> 00:10:16,350
processor here varnish will get from its cache

148
00:10:17,170 --> 00:10:20,770
the article HTML file, parse it,

149
00:10:20,840 --> 00:10:24,930
and will see there is an ESI tag and will process

150
00:10:25,000 --> 00:10:28,446
it. It will send a request to the user PHp

151
00:10:28,478 --> 00:10:33,026
endpoints on the upstream server, grab the response and replace

152
00:10:33,138 --> 00:10:37,254
in the article HTML body the

153
00:10:37,292 --> 00:10:41,258
ASI tag by the user php received value

154
00:10:41,424 --> 00:10:45,242
if you already wrote some HTML, you'll find that

155
00:10:45,296 --> 00:10:48,854
easy to use. And as the tag is not understood

156
00:10:48,902 --> 00:10:52,250
by the browser, it won't be shown to the end user

157
00:10:52,330 --> 00:10:56,110
or display an additional div if it cannot be processed.

158
00:10:58,210 --> 00:11:03,410
So it's really transparent to the user unless

159
00:11:04,230 --> 00:11:08,050
it tries to read the source code of the received

160
00:11:08,790 --> 00:11:13,086
HTML file. Here the ESI include

161
00:11:13,118 --> 00:11:16,738
tag will request the source attribute

162
00:11:16,834 --> 00:11:20,626
here example one HTML

163
00:11:20,818 --> 00:11:24,694
if it throws an error while doing the request this

164
00:11:24,732 --> 00:11:29,834
request, it will request the alternateback example

165
00:11:29,952 --> 00:11:34,234
two HTML and if we set the on

166
00:11:34,272 --> 00:11:38,810
error property with the value continue, it will just ignore

167
00:11:39,550 --> 00:11:43,326
the errors. A more complex one we

168
00:11:43,348 --> 00:11:47,178
can do some try catches the ESI

169
00:11:47,274 --> 00:11:50,942
try will try was its

170
00:11:50,996 --> 00:11:54,734
name the attempt sub block if can error

171
00:11:54,782 --> 00:11:58,414
occurs in this block, it will just process the ESI

172
00:11:58,462 --> 00:12:01,906
accept tag. You can see at

173
00:12:01,928 --> 00:12:05,426
the lines three and seven some ESI

174
00:12:05,458 --> 00:12:08,834
comments that should be removed by the ESI

175
00:12:08,882 --> 00:12:13,030
processor. Even you return them

176
00:12:13,100 --> 00:12:16,374
to the browser. Even if you return them

177
00:12:16,492 --> 00:12:19,802
to the browser, it will only increase the body

178
00:12:19,856 --> 00:12:22,698
size, but your browser won't interpret them,

179
00:12:22,784 --> 00:12:26,934
won't display them, et cetera. You can also load some variables

180
00:12:26,982 --> 00:12:31,054
from the request and more precisely from the request cookies or

181
00:12:31,092 --> 00:12:34,590
request host request path and some

182
00:12:34,740 --> 00:12:37,146
predefined variables.

183
00:12:37,338 --> 00:12:40,778
And using the ESI vars,

184
00:12:40,874 --> 00:12:44,814
sorry, we will generate the image

185
00:12:44,862 --> 00:12:48,658
HTML tag. The computed source will take

186
00:12:48,744 --> 00:12:51,780
the value from the cookie name type.

187
00:12:53,270 --> 00:12:57,222
Imagine we set human as a value in the type

188
00:12:57,276 --> 00:13:00,742
cookie, your source and your alt will

189
00:13:00,796 --> 00:13:04,774
contain and your user, your end user will

190
00:13:04,812 --> 00:13:08,102
see only the computed image HTML tag.

191
00:13:08,246 --> 00:13:11,180
So that's demo time.

192
00:13:14,350 --> 00:13:18,266
So that is demo time to show you a

193
00:13:18,288 --> 00:13:22,110
more complex example and to prove that very powerful.

194
00:13:23,250 --> 00:13:26,366
So I will use caddy was

195
00:13:26,388 --> 00:13:30,170
a proxy. So here is caddy file

196
00:13:30,250 --> 00:13:33,940
here up.

197
00:13:36,790 --> 00:13:40,194
My proxy will be running on the HTTP port.

198
00:13:40,392 --> 00:13:44,882
I said okay that's 80 and the

199
00:13:44,936 --> 00:13:48,934
common HTTP port and

200
00:13:48,972 --> 00:13:52,578
I have some routes that return ESI tags

201
00:13:52,674 --> 00:13:56,470
here I have a server route

202
00:13:57,530 --> 00:14:01,094
to proxy to a server.

203
00:14:01,222 --> 00:14:07,482
The request that will serve also its

204
00:14:07,536 --> 00:14:10,970
own HTML

205
00:14:11,050 --> 00:14:16,046
or HTTP response and

206
00:14:16,148 --> 00:14:19,626
all unmatched pattern

207
00:14:19,818 --> 00:14:22,894
here will

208
00:14:22,932 --> 00:14:26,526
try to load the features and will compute the response

209
00:14:26,558 --> 00:14:30,500
because of the ESI directive in the woodblock here

210
00:14:30,950 --> 00:14:34,562
that's cadify syntax. But it's really easy to understand

211
00:14:34,696 --> 00:14:38,578
and it's easier than the Nginx config

212
00:14:38,674 --> 00:14:41,670
or Apache configuration.

213
00:14:43,690 --> 00:14:47,866
Okay, in the features I

214
00:14:47,888 --> 00:14:51,978
have the complex example here named full

215
00:14:52,144 --> 00:14:55,740
HTML that contains all

216
00:14:56,430 --> 00:15:00,338
ESI tags. We have some variables interpretations,

217
00:15:00,454 --> 00:15:04,142
some include some escaped contents and many

218
00:15:04,196 --> 00:15:07,706
other cases. So if I run the caddy

219
00:15:07,738 --> 00:15:10,800
server here make run,

220
00:15:14,370 --> 00:15:18,254
okay it will take some seconds

221
00:15:18,302 --> 00:15:20,500
to build that, I think.

222
00:15:21,350 --> 00:15:25,146
And it run it here. So my Kg

223
00:15:25,198 --> 00:15:30,040
is running and here make run

224
00:15:30,970 --> 00:15:34,806
server. So it will go in the

225
00:15:34,908 --> 00:15:38,470
middleware and just run main

226
00:15:38,540 --> 00:15:42,234
go for make run server and in Kadi it will

227
00:15:42,272 --> 00:15:46,042
run, make run here make build and

228
00:15:46,096 --> 00:15:50,474
make run. So it will build the ESi

229
00:15:50,522 --> 00:15:53,310
module for KG from the sources.

230
00:15:55,410 --> 00:15:58,910
So I have my two servers

231
00:15:59,250 --> 00:16:03,074
here and if I try

232
00:16:03,112 --> 00:16:07,794
to request it, I can now send

233
00:16:07,912 --> 00:16:11,634
can HTTP request to the servers pass for example.

234
00:16:11,752 --> 00:16:14,980
So httpdomain.com,

235
00:16:15,370 --> 00:16:19,330
that's a local domain. I edited

236
00:16:19,410 --> 00:16:23,366
my host on

237
00:16:23,388 --> 00:16:26,854
my laptop for that. And if

238
00:16:26,892 --> 00:16:30,470
I send on server,

239
00:16:31,770 --> 00:16:35,510
yes I would

240
00:16:35,580 --> 00:16:38,360
like you to use curl for that.

241
00:16:40,130 --> 00:16:43,230
So it returns the readers because

242
00:16:43,380 --> 00:16:46,926
in the main go I'm flushing the

243
00:16:46,948 --> 00:16:50,654
response each time I'm writing something and I

244
00:16:50,692 --> 00:16:55,860
wait 9 seconds in total and

245
00:16:56,390 --> 00:17:02,590
it will take whats HTML

246
00:17:02,670 --> 00:17:07,030
code and we'll pass the ESI include

247
00:17:07,370 --> 00:17:12,054
here, here it's an escaped content

248
00:17:12,252 --> 00:17:16,230
from ESI and I'm removing

249
00:17:16,570 --> 00:17:20,582
this include and I'm using HTTP host

250
00:17:20,646 --> 00:17:24,842
here. So we have that in the response and

251
00:17:24,896 --> 00:17:28,570
the more complex example because here it's

252
00:17:29,310 --> 00:17:33,520
a bit simple I can

253
00:17:34,530 --> 00:17:38,670
say okay, try to load full HTML

254
00:17:39,250 --> 00:17:44,302
and okay,

255
00:17:44,436 --> 00:17:45,120
why?

256
00:17:51,650 --> 00:17:55,782
Okay, it's the

257
00:17:55,836 --> 00:18:02,166
demo effect. I think we

258
00:18:02,188 --> 00:18:03,880
will debug that together.

259
00:18:07,550 --> 00:18:11,610
Why that's

260
00:18:12,110 --> 00:18:16,300
this port here

261
00:18:16,670 --> 00:18:20,766
and if I retry it works.

262
00:18:20,948 --> 00:18:24,830
Okay, so it works and

263
00:18:24,980 --> 00:18:28,240
I have my tags and other things.

264
00:18:30,370 --> 00:18:31,120
Okay,

265
00:18:34,050 --> 00:18:37,822
I think I show you

266
00:18:37,876 --> 00:18:41,342
everything so

267
00:18:41,396 --> 00:18:45,960
I hope you enjoyed the demo. So we

268
00:18:46,570 --> 00:18:52,102
we will jump some years later and

269
00:18:52,156 --> 00:18:56,470
go at the summer 2014.

270
00:18:58,590 --> 00:19:02,314
That's the year the new

271
00:19:02,512 --> 00:19:06,118
Zelda EwOL warriors was released

272
00:19:06,294 --> 00:19:10,134
also. But some

273
00:19:10,192 --> 00:19:14,238
people prefer to write and publish RFC during

274
00:19:14,404 --> 00:19:16,890
their holidays instead of chilling.

275
00:19:17,050 --> 00:19:21,950
And the RFC

276
00:19:23,270 --> 00:19:32,370
724434 2014

277
00:19:32,950 --> 00:19:37,174
sorry as

278
00:19:37,212 --> 00:19:41,030
known as the HTTP one one caching

279
00:19:41,370 --> 00:19:44,694
will add more context and more details and

280
00:19:44,732 --> 00:19:48,094
more use cases to the previous caching RFC

281
00:19:48,162 --> 00:19:50,220
and will invalidate them.

282
00:19:51,470 --> 00:19:54,854
First of all, we got a new HTTP response

283
00:19:54,902 --> 00:19:56,620
eater called age.

284
00:19:57,950 --> 00:20:01,470
The age Eater explicits the number of seconds

285
00:20:02,930 --> 00:20:06,494
the response is stored. The second example should

286
00:20:06,532 --> 00:20:10,142
not occur. It should take the max between your

287
00:20:10,196 --> 00:20:14,018
edge, your either edge and

288
00:20:14,184 --> 00:20:17,460
zero so

289
00:20:18,230 --> 00:20:22,254
it details the cache invalidation.

290
00:20:22,382 --> 00:20:26,214
Imagine you store your getresponse because it has

291
00:20:26,252 --> 00:20:30,434
to contact the database and that's IO consuming, et cetera.

292
00:20:30,562 --> 00:20:33,894
If you build an rest API, you'll have

293
00:20:33,932 --> 00:20:37,586
the same path but only the verb differ to

294
00:20:37,628 --> 00:20:40,666
manage your resource. If you send a

295
00:20:40,688 --> 00:20:43,900
get request on books one, for example,

296
00:20:44,990 --> 00:20:49,260
you will store your response and after that

297
00:20:49,890 --> 00:20:54,682
if you send one of put, post or delete HTTP

298
00:20:54,746 --> 00:20:59,210
request on your resource, you'll have to invalidate your stored getresponse

299
00:20:59,290 --> 00:21:03,918
for this resource id because these HTTP verbs

300
00:21:04,094 --> 00:21:06,450
will alterate your stored resource.

301
00:21:07,750 --> 00:21:11,326
This RFC adds a new HTTP request cache

302
00:21:11,358 --> 00:21:15,490
control directive named Stalewire validate.

303
00:21:16,010 --> 00:21:20,130
This one allows the cache server to serve a stale response

304
00:21:20,210 --> 00:21:24,322
and try to revalidate in the background with the upstream

305
00:21:24,386 --> 00:21:28,140
and store the freshly response and replace the stale one

306
00:21:29,310 --> 00:21:33,242
that ensure client will receive data even

307
00:21:33,296 --> 00:21:37,158
if your upstream is done. Add this leader to every request

308
00:21:37,254 --> 00:21:40,970
when you think it's okay, even if your clients have some stale

309
00:21:41,050 --> 00:21:45,440
data. In June 2022

310
00:21:46,530 --> 00:21:49,914
I was in Greece, but Mark Notingham decided to release

311
00:21:49,962 --> 00:21:54,014
two rfcs to the cache status RFC

312
00:21:54,062 --> 00:21:57,490
and the targeted cache control HTTP Eater

313
00:21:58,550 --> 00:22:02,370
about the cache status Eder.

314
00:22:02,790 --> 00:22:06,374
It defines some useful directives. The first one is

315
00:22:06,492 --> 00:22:09,640
it and I missed that.

316
00:22:12,170 --> 00:22:15,910
You can now detect if it was it

317
00:22:15,980 --> 00:22:19,290
by your cache server or missed

318
00:22:21,310 --> 00:22:24,874
forward. Add more context about the cache server that

319
00:22:24,912 --> 00:22:28,566
forwards the request to the upstream forward statues returns

320
00:22:28,598 --> 00:22:31,950
the statues from the upstream or another cache server.

321
00:22:33,810 --> 00:22:37,674
The TTL shows how many seconds the cache

322
00:22:37,722 --> 00:22:40,510
response will be considered as fresh.

323
00:22:41,570 --> 00:22:44,926
By the way, the edge eater

324
00:22:45,038 --> 00:22:49,410
plus the TTL should be equal to your storage duration

325
00:22:50,550 --> 00:22:55,290
and must be equal to that. The collapsed

326
00:22:55,390 --> 00:22:59,094
directive tell you if the response has been built from one

327
00:22:59,132 --> 00:23:02,646
part of the cache response and the second part from

328
00:23:02,828 --> 00:23:06,342
the upstream. For example the

329
00:23:06,396 --> 00:23:09,526
key give you the stored

330
00:23:09,558 --> 00:23:13,514
key in your cache index and the detail give you

331
00:23:13,552 --> 00:23:17,526
some details from. For example, if it's not stored

332
00:23:17,638 --> 00:23:20,730
because the response storage is unreachable,

333
00:23:22,610 --> 00:23:26,240
so the cache whats you see there is like that.

334
00:23:27,090 --> 00:23:30,974
You have your server cache name if

335
00:23:31,012 --> 00:23:34,580
it's it or not. If it's it,

336
00:23:35,510 --> 00:23:38,530
you have a TTL, you can have the key,

337
00:23:38,600 --> 00:23:39,490
et cetera.

338
00:23:43,750 --> 00:23:47,286
And in the last one example you have the case that

339
00:23:47,308 --> 00:23:49,350
the storage is unreachable.

340
00:23:52,010 --> 00:23:55,862
Now the targeted cache control RFC allow

341
00:23:55,916 --> 00:23:59,740
you to manage automatically the cache control.

342
00:24:00,110 --> 00:24:04,278
Imagine this infrastructure. Your client

343
00:24:04,374 --> 00:24:08,886
would send a request to your servers. His request

344
00:24:09,078 --> 00:24:13,194
goes through the CDN and it will proxy

345
00:24:13,242 --> 00:24:15,786
to your varnish cache server.

346
00:24:15,978 --> 00:24:19,342
It will send the request to your CAD instance that will

347
00:24:19,396 --> 00:24:23,120
transfer to the upstream so

348
00:24:23,730 --> 00:24:27,390
the upstream returns a response

349
00:24:28,130 --> 00:24:31,460
with four headers, the well known cache control,

350
00:24:32,390 --> 00:24:35,906
the CDN cache control, the varnish cache control,

351
00:24:36,008 --> 00:24:40,614
and the KD cache control with

352
00:24:40,652 --> 00:24:45,110
their own duration, their own storage

353
00:24:46,090 --> 00:24:50,106
directive. Imagine you can have

354
00:24:50,208 --> 00:24:54,490
for the CDN cache control private directive,

355
00:25:00,530 --> 00:25:04,254
and the caddy instance will check if

356
00:25:04,292 --> 00:25:07,902
the Caddy cache controller is present and will store

357
00:25:07,956 --> 00:25:11,594
the response for 1 hour. Then varnish

358
00:25:11,642 --> 00:25:15,582
will store for five minutes and the CDN will store

359
00:25:15,636 --> 00:25:19,540
for will store the response for two minutes,

360
00:25:19,990 --> 00:25:23,694
and the client will store that, but won't use it because of the no cache

361
00:25:23,742 --> 00:25:28,178
directive. And if the

362
00:25:28,264 --> 00:25:31,574
wildcard cache control either is

363
00:25:31,612 --> 00:25:35,590
present and interpreted by your cache.

364
00:25:35,930 --> 00:25:39,698
For example, imagine varnish doesn't recognize

365
00:25:39,794 --> 00:25:43,462
the varnish cache control. It should, and it must fall back

366
00:25:43,516 --> 00:25:46,760
on the basic cache control either.

367
00:25:49,370 --> 00:25:53,582
And here our clients will

368
00:25:53,636 --> 00:25:56,830
store it, but won't use it because of the no cache.

369
00:25:59,410 --> 00:26:02,110
Okay, thank you for your attention.

370
00:26:02,610 --> 00:26:06,330
Thank you to the organizers team. Don't hesitate

371
00:26:06,410 --> 00:26:09,662
to ask your question if you have any, and I hope you

372
00:26:09,796 --> 00:26:11,260
found that interesting.

