1
00:00:25,490 --> 00:00:29,234
Hello everybody. Today we'll talk about corning and specify

2
00:00:29,282 --> 00:00:32,280
in my case the corarning by project,

3
00:00:32,650 --> 00:00:36,214
the project called Swap. You have QR code to be able

4
00:00:36,252 --> 00:00:39,670
to retrieve my slides on slides.com.

5
00:00:39,820 --> 00:00:43,606
Before dive into the subject, let me introduce myself and

6
00:00:43,628 --> 00:00:46,866
make my self promotion to you. My name is Steve Combrak.

7
00:00:46,978 --> 00:00:50,206
I'm from really in France. Sorry for my get

8
00:00:50,228 --> 00:00:53,646
accent but I try my best to speak as well as possible. You can

9
00:00:53,748 --> 00:00:57,294
find me on GitHub searching Darkwick and Darkwick underscore dev

10
00:00:57,332 --> 00:01:01,738
or Twitter. I'm creator of a cache system called Swan

11
00:01:01,834 --> 00:01:05,810
Reader in Go, Im Trfik Helper, traffic ambassador

12
00:01:06,710 --> 00:01:09,970
and active open source contributor and

13
00:01:10,040 --> 00:01:14,034
also and freelance too. So after that we

14
00:01:14,072 --> 00:01:17,670
can dive into the beautiful world of

15
00:01:17,740 --> 00:01:21,078
Go and see together. What are the

16
00:01:21,164 --> 00:01:24,374
issues in Go? And I

17
00:01:24,412 --> 00:01:28,518
try to teach you what are the main conflicts

18
00:01:28,614 --> 00:01:32,086
with Go. We will talk about Golang

19
00:01:32,118 --> 00:01:35,178
story because Go is very

20
00:01:35,264 --> 00:01:39,990
young language. It started on 2003

21
00:01:40,160 --> 00:01:44,702
at Google but open sourced on 2009

22
00:01:44,836 --> 00:01:48,110
by Francis McCabe and case Clark.

23
00:01:49,010 --> 00:01:53,018
Google tried his

24
00:01:53,044 --> 00:01:56,962
own language to answer some performances issues.

25
00:01:57,096 --> 00:02:00,818
It's written in c, but you don't have to know

26
00:02:00,904 --> 00:02:05,514
c language to code in Golang. The advantages

27
00:02:05,662 --> 00:02:09,842
of Go is you have one binary

28
00:02:09,906 --> 00:02:13,782
file as output. You can build cross platform for

29
00:02:13,836 --> 00:02:17,320
macOS, Windows and Linux for example.

30
00:02:17,690 --> 00:02:21,594
It's really easy to learn. You can

31
00:02:21,632 --> 00:02:24,986
do multi threading and concurrency really

32
00:02:25,168 --> 00:02:29,020
easily and it's really easy to

33
00:02:29,890 --> 00:02:33,210
learn it because it's not a tricky language.

34
00:02:33,370 --> 00:02:37,600
Here are some software using Go.

35
00:02:38,530 --> 00:02:42,330
The first one is Docker, it's a famous one.

36
00:02:42,500 --> 00:02:45,650
It's the soft to manage

37
00:02:45,720 --> 00:02:49,634
containers for those who doesn't know. And the

38
00:02:49,672 --> 00:02:53,122
second one is Kubernetes for the open

39
00:02:53,176 --> 00:02:56,978
source name and Borg for Google instance.

40
00:02:57,074 --> 00:03:00,470
It's an orchestrator to manage containers.

41
00:03:01,290 --> 00:03:05,426
And you have other software like traffic

42
00:03:05,538 --> 00:03:09,500
or Mercury. But Go is not

43
00:03:10,030 --> 00:03:15,066
really for Ops. And you can do some

44
00:03:15,168 --> 00:03:18,060
web app using Go.

45
00:03:18,430 --> 00:03:22,954
For example Hugo is static

46
00:03:23,002 --> 00:03:26,430
website generator from Markdown and

47
00:03:26,500 --> 00:03:30,110
Yaml configuration file. You can

48
00:03:30,180 --> 00:03:34,562
do fail to ban like using bad

49
00:03:34,616 --> 00:03:38,226
actor and you have

50
00:03:38,248 --> 00:03:42,430
a reverse proxy called Gadi to serve PhP

51
00:03:42,510 --> 00:03:46,166
app or any web app instead of

52
00:03:46,268 --> 00:03:50,870
using Nginx, Apache or any other reverse proxies.

53
00:03:51,530 --> 00:03:55,494
So what is my history with coding? Let me

54
00:03:55,532 --> 00:03:59,926
replace the context. I'm traffic contributor

55
00:04:00,038 --> 00:04:03,354
and traffic user since one four.

56
00:04:03,552 --> 00:04:07,846
I'm also helper and traffic ambassador. So any other names

57
00:04:07,878 --> 00:04:11,194
to describe this? And for those who doesn't know traffic solution

58
00:04:11,242 --> 00:04:14,654
yet, it's a reverse proxy written in go to help

59
00:04:14,692 --> 00:04:18,046
you to manage container architectures. And it's a

60
00:04:18,068 --> 00:04:22,026
container first approach. It's designed to manage containers,

61
00:04:22,218 --> 00:04:25,486
it supports the odd detection deployment,

62
00:04:25,598 --> 00:04:29,742
the scaling, it load balances your request automatically.

63
00:04:29,886 --> 00:04:33,794
Only a specific port for all protocols, then traffic manage

64
00:04:33,832 --> 00:04:37,506
for you the service resolution depending Austin

65
00:04:37,538 --> 00:04:41,362
entry, then it's a pivot point of your infrastructure.

66
00:04:41,506 --> 00:04:44,726
And after months to use this solution, there was

67
00:04:44,748 --> 00:04:49,174
an issue I was facing too. There wasn't any cache

68
00:04:49,222 --> 00:04:52,282
system internally to traffic. Then all

69
00:04:52,336 --> 00:04:56,250
requests would have to resolve the associated service.

70
00:04:56,400 --> 00:04:59,686
Then it took many milliseconds to be done and I searched

71
00:04:59,718 --> 00:05:03,994
after cache system solution but nothing appeared to be as efficient

72
00:05:04,122 --> 00:05:06,746
as I wanted or it was only poc.

73
00:05:06,858 --> 00:05:10,654
So after many nights spent to look after that I decided to create

74
00:05:10,692 --> 00:05:14,638
my first program in go. Because traffic is regional in go two and

75
00:05:14,724 --> 00:05:18,066
it souin good. So this project

76
00:05:18,168 --> 00:05:22,098
called Swan is actually in version one

77
00:05:22,184 --> 00:05:25,602
five two and for the record the release names are

78
00:05:25,656 --> 00:05:29,786
free beer names because I love to drink beers. So we witched

79
00:05:29,838 --> 00:05:33,154
over the 100 stars

80
00:05:33,282 --> 00:05:37,154
and don't forget to leave one because I've got an oversized

81
00:05:37,202 --> 00:05:40,874
ego and I like to view the Stargazers count

82
00:05:40,992 --> 00:05:45,786
growing. So the first thing in go I

83
00:05:45,808 --> 00:05:49,446
have to teach you is that Golang is normalized

84
00:05:49,638 --> 00:05:53,642
through some variable environment

85
00:05:53,706 --> 00:05:56,906
variables like the Gopath.

86
00:05:57,018 --> 00:06:00,174
The Gopath will tell to go, where to

87
00:06:00,212 --> 00:06:03,902
find binaries, where to find your sources,

88
00:06:04,046 --> 00:06:08,078
your dependencies and the normalized

89
00:06:08,254 --> 00:06:12,210
architectures. So under your

90
00:06:12,280 --> 00:06:15,858
Gopath it's normalized architectures.

91
00:06:15,954 --> 00:06:20,390
You have bin folder, PKG folder and

92
00:06:20,540 --> 00:06:24,406
SRC one. And I made a

93
00:06:24,428 --> 00:06:28,106
table to resume what

94
00:06:28,128 --> 00:06:31,894
is the goal of which folder?

95
00:06:32,022 --> 00:06:35,974
So sources contain the readable development

96
00:06:36,022 --> 00:06:39,050
sources with your dependencies.

97
00:06:39,390 --> 00:06:42,570
The PKG contains copackage

98
00:06:42,650 --> 00:06:46,698
objects compiled from SRC directory

99
00:06:46,874 --> 00:06:51,690
and your go source code packages, and your bin

100
00:06:51,850 --> 00:06:55,730
folder contains fully compiled go software based

101
00:06:55,800 --> 00:06:58,770
on PKG objects.

102
00:06:59,590 --> 00:07:02,834
Then after the go path you have your go

103
00:07:02,872 --> 00:07:06,630
route which is the Golang

104
00:07:07,050 --> 00:07:10,760
SDK path. It tells to

105
00:07:11,130 --> 00:07:15,750
go which version it has to use and

106
00:07:15,820 --> 00:07:20,762
you have one of the most

107
00:07:20,816 --> 00:07:24,410
useful environment variable, the goos.

108
00:07:24,830 --> 00:07:28,214
It tells to go which kind of OS

109
00:07:28,342 --> 00:07:31,886
it has to build for. By default it

110
00:07:31,908 --> 00:07:35,546
will use the OST OS.

111
00:07:35,738 --> 00:07:38,842
If you are on macOS it will use Darwin,

112
00:07:38,986 --> 00:07:42,926
on Linux it will use Linux and Windows it

113
00:07:42,948 --> 00:07:46,802
will use Windows. So go OS isn't really

114
00:07:46,936 --> 00:07:50,382
important as standalone environment

115
00:07:50,446 --> 00:07:53,986
variable, but you can combine it with the

116
00:07:54,088 --> 00:07:57,782
goarch to tell Go to build

117
00:07:57,916 --> 00:08:02,310
compile for a specific arch with a specific OS.

118
00:08:02,650 --> 00:08:06,054
With that you can do cross platform

119
00:08:06,172 --> 00:08:09,882
build and build for Windows even

120
00:08:09,936 --> 00:08:14,330
if you are on macOS and Im

121
00:08:14,990 --> 00:08:19,610
64 with an rim laptop.

122
00:08:19,970 --> 00:08:24,174
So you can do some matrix to

123
00:08:24,212 --> 00:08:28,334
build for any os with any possible

124
00:08:28,452 --> 00:08:32,382
architectures, so it will generate over

125
00:08:32,516 --> 00:08:36,290
hundreds binaries, but you'll cover every

126
00:08:36,360 --> 00:08:40,146
system with that. So now we

127
00:08:40,168 --> 00:08:43,906
can go to the next section which is

128
00:08:43,928 --> 00:08:48,022
the live demo. You have QR code and

129
00:08:48,156 --> 00:08:52,194
the plane URL to clone the repository

130
00:08:52,322 --> 00:08:56,262
and practice with us during

131
00:08:56,316 --> 00:09:00,220
this session and learn to develop in Go.

132
00:09:00,990 --> 00:09:04,762
The first thing to do with Go is the

133
00:09:04,816 --> 00:09:08,170
editor. So let's see together how to do

134
00:09:08,240 --> 00:09:11,646
our first Edward. Then we will

135
00:09:11,828 --> 00:09:14,442
deep dive into the language,

136
00:09:14,506 --> 00:09:17,934
complexity and concepts in go.

137
00:09:18,052 --> 00:09:19,600
So let's begin together.

138
00:09:20,770 --> 00:09:23,822
I just cloned the repository.

139
00:09:23,966 --> 00:09:27,874
We have main go file to

140
00:09:27,912 --> 00:09:30,420
tell Go. It is our entry point.

141
00:09:30,870 --> 00:09:34,450
We can run only main packages

142
00:09:34,970 --> 00:09:38,440
with a main function with Go.

143
00:09:39,930 --> 00:09:43,762
So if I try to run my main package,

144
00:09:43,906 --> 00:09:47,866
I can just type go run main go and it

145
00:09:47,888 --> 00:09:51,626
will run my go file. So if I

146
00:09:51,648 --> 00:09:54,810
do that, I'm absolutely doing

147
00:09:54,880 --> 00:09:58,982
nothing in my script. So let's

148
00:09:59,046 --> 00:10:03,470
type simple hello world in the console.

149
00:10:04,050 --> 00:10:08,410
So we have the FMT

150
00:10:08,570 --> 00:10:12,930
package which expose some

151
00:10:13,000 --> 00:10:17,202
methods to be able

152
00:10:17,336 --> 00:10:20,914
to debug our code or print something

153
00:10:21,112 --> 00:10:24,226
in the console. So we

154
00:10:24,248 --> 00:10:31,702
will print with a new line our

155
00:10:31,836 --> 00:10:35,922
hello world. It's a little bit laggy because I'm

156
00:10:35,986 --> 00:10:39,130
recording, so sorry for the

157
00:10:39,200 --> 00:10:42,986
inconvenience. Then if

158
00:10:43,008 --> 00:10:46,218
I save and I run main

159
00:10:46,304 --> 00:10:50,006
go, it prints hello world in the

160
00:10:50,048 --> 00:10:54,190
console. Now we have our first hello world working.

161
00:10:54,340 --> 00:10:58,462
We have hello world in the console, but the

162
00:10:58,516 --> 00:11:02,174
softwares we build with go are not easy

163
00:11:02,292 --> 00:11:06,322
like a simple hello world, and because we want

164
00:11:06,376 --> 00:11:09,710
to make some calculations

165
00:11:09,870 --> 00:11:12,930
or any other operations.

166
00:11:13,270 --> 00:11:16,774
So let's see together an

167
00:11:16,892 --> 00:11:21,154
advanced mode of go. It's go routines.

168
00:11:21,282 --> 00:11:25,234
The Go routines are basically a part of a logical thread.

169
00:11:25,362 --> 00:11:28,506
Then go sits on it to

170
00:11:28,528 --> 00:11:31,370
be as efficient as it is,

171
00:11:31,520 --> 00:11:34,794
because the wall language is built

172
00:11:34,912 --> 00:11:39,002
around the go routines. So let me explain more

173
00:11:39,056 --> 00:11:42,986
precisely, what is it? It's asynchronous,

174
00:11:43,098 --> 00:11:46,574
detached from the main thread. Then if you

175
00:11:46,612 --> 00:11:49,626
kill your main thread, the go routine won't

176
00:11:49,658 --> 00:11:53,474
be able to talk with your terminal or

177
00:11:53,672 --> 00:11:56,930
your instance, the instance

178
00:11:57,350 --> 00:12:00,546
it was called by. So we

179
00:12:00,568 --> 00:12:04,986
have to take care about keeping

180
00:12:05,038 --> 00:12:08,454
the main thread running to be able to get

181
00:12:08,492 --> 00:12:11,862
back the data and be sure the

182
00:12:11,916 --> 00:12:15,446
souin is finished once the

183
00:12:15,468 --> 00:12:18,794
main thread will be closed. So let's see together

184
00:12:18,912 --> 00:12:22,826
how it works. Okay, so now I commented my

185
00:12:23,008 --> 00:12:27,306
hello world print and we can go under

186
00:12:27,408 --> 00:12:30,942
grutins folder and create main go

187
00:12:30,996 --> 00:12:35,246
file. After thats we create a function called

188
00:12:35,348 --> 00:12:39,694
go routines. It will return absolutely nothing.

189
00:12:39,892 --> 00:12:43,806
And we can do a simple loop for

190
00:12:43,908 --> 00:12:47,682
an iterator initialize. Thats zero. We can

191
00:12:47,736 --> 00:12:51,474
tell if it under ten with an

192
00:12:51,512 --> 00:12:55,554
incrementation by one just print

193
00:12:55,602 --> 00:12:59,494
something and it will be

194
00:12:59,692 --> 00:13:03,542
sprintf. Then from the

195
00:13:03,676 --> 00:13:08,730
main thread, the main method iteration

196
00:13:11,070 --> 00:13:15,290
like that and just pass our iteration

197
00:13:15,790 --> 00:13:19,466
and we can tell that we have another

198
00:13:19,568 --> 00:13:23,566
function. This function will be called for example

199
00:13:23,748 --> 00:13:28,414
my detached function like

200
00:13:28,452 --> 00:13:31,120
thats and just copy this.

201
00:13:32,550 --> 00:13:36,500
Or we can tell we will give it

202
00:13:36,870 --> 00:13:41,220
an iterator like thats

203
00:13:41,590 --> 00:13:45,622
and that's it. So to call it

204
00:13:45,756 --> 00:13:49,160
we can tell my detached function,

205
00:13:49,850 --> 00:13:53,640
pass an iterator and we can share our

206
00:13:54,170 --> 00:13:58,314
iterator here between

207
00:13:58,432 --> 00:14:01,946
the detached function and the

208
00:14:01,968 --> 00:14:05,340
main function. But if I do that,

209
00:14:08,430 --> 00:14:12,522
it will be a synchronous was. So the

210
00:14:12,576 --> 00:14:16,638
first will be the detached function. Then after

211
00:14:16,804 --> 00:14:20,990
he finished it will run this part of code,

212
00:14:21,140 --> 00:14:24,926
but we want to run them was a detached

213
00:14:24,958 --> 00:14:28,946
mode and concurrency. So go run main

214
00:14:29,048 --> 00:14:33,300
go we have the main

215
00:14:34,630 --> 00:14:41,358
obviously it,

216
00:14:41,464 --> 00:14:44,994
then we have our detached iterations,

217
00:14:45,122 --> 00:14:48,330
then after that the main iteration.

218
00:14:49,070 --> 00:14:52,842
So to run it as concurrent c just

219
00:14:52,896 --> 00:14:57,786
add the go keyword before our function. Then it

220
00:14:57,808 --> 00:15:01,342
will create a new logical thread and just

221
00:15:01,396 --> 00:15:02,960
run it inside it.

222
00:15:05,490 --> 00:15:09,562
Just run like that. So the main method

223
00:15:09,706 --> 00:15:13,454
iterate ten times, but the

224
00:15:13,492 --> 00:15:17,098
detached one at the time to iterates

225
00:15:17,194 --> 00:15:21,070
only four times because the

226
00:15:21,140 --> 00:15:24,966
go instantiation will take some

227
00:15:25,028 --> 00:15:28,774
microseconds. But during this time as

228
00:15:28,812 --> 00:15:32,102
it in synchronous, our for

229
00:15:32,156 --> 00:15:36,022
loop will be running before the

230
00:15:36,076 --> 00:15:39,546
detached will start. So to

231
00:15:39,568 --> 00:15:43,580
be able to wait this, we could add

232
00:15:44,030 --> 00:15:48,060
a simple time sleep, then tell

233
00:15:48,430 --> 00:15:51,758
okay, you will sleep for 1 second

234
00:15:51,924 --> 00:15:55,626
and I have my iterations,

235
00:15:55,818 --> 00:15:59,050
then it sleep

236
00:15:59,130 --> 00:16:02,874
for 1 second and close the main thread.

237
00:16:02,922 --> 00:16:06,900
So that's why we have our detach method here.

238
00:16:07,510 --> 00:16:11,394
So that's not a really clean way to do

239
00:16:11,432 --> 00:16:15,054
that. If you want to wait for go routines, we have

240
00:16:15,112 --> 00:16:19,458
something from the sync package called weight groups.

241
00:16:19,634 --> 00:16:23,350
And what is a weight group? It's a pool of

242
00:16:23,420 --> 00:16:26,680
go routine and it will tell. Okay,

243
00:16:27,390 --> 00:16:30,700
while all go routines didn't finish,

244
00:16:31,150 --> 00:16:34,714
I will just wait for it. To achieve that

245
00:16:34,832 --> 00:16:39,242
we have to define a variable called wg, for example

246
00:16:39,376 --> 00:16:42,798
for weight group from the sync package and

247
00:16:42,884 --> 00:16:46,174
weight group after thats I

248
00:16:46,212 --> 00:16:50,222
can just tell, okay, my weight group will add

249
00:16:50,356 --> 00:16:54,180
a new asynchronous function and

250
00:16:55,030 --> 00:16:58,850
we can just pass our weight group to

251
00:16:59,000 --> 00:17:00,740
our detached function.

252
00:17:01,750 --> 00:17:05,622
I will group my declarations and

253
00:17:05,756 --> 00:17:09,800
here we want to pass our weight group.

254
00:17:10,170 --> 00:17:13,654
So it will be pointer because we

255
00:17:13,692 --> 00:17:17,518
don't have to copy our weight

256
00:17:17,554 --> 00:17:21,034
group pool. Then we could

257
00:17:21,152 --> 00:17:25,270
do just wg

258
00:17:25,430 --> 00:17:29,242
done. But it's cleaner to

259
00:17:29,376 --> 00:17:32,974
tell before reach the end

260
00:17:33,012 --> 00:17:36,090
of the function. So you can use the keyword

261
00:17:36,170 --> 00:17:40,346
defer to delay the execution

262
00:17:40,458 --> 00:17:45,746
of what we placed after at

263
00:17:45,848 --> 00:17:49,794
the really end of the function. So we

264
00:17:49,832 --> 00:17:53,490
will delay the done, and now

265
00:17:53,560 --> 00:17:58,120
we can pass our reference like that.

266
00:17:58,970 --> 00:18:04,674
And now let's

267
00:18:04,722 --> 00:18:09,286
printf print ln. And that's

268
00:18:09,318 --> 00:18:09,900
it.

269
00:18:12,910 --> 00:18:17,020
But if I do that, it will run and okay,

270
00:18:17,470 --> 00:18:21,214
it won't wait for our detached function

271
00:18:21,412 --> 00:18:25,294
end. And to do that we can do

272
00:18:25,492 --> 00:18:29,662
just wg wait and

273
00:18:29,716 --> 00:18:33,614
just run like that. So we

274
00:18:33,652 --> 00:18:36,900
have the first iteration, the second,

275
00:18:37,270 --> 00:18:43,182
and even if I add some sleeping

276
00:18:43,326 --> 00:18:45,140
here, for example,

277
00:18:48,010 --> 00:18:49,270
millisecond,

278
00:18:50,890 --> 00:18:53,960
and I will do the same thing here.

279
00:18:55,450 --> 00:19:00,362
And here I will sleep for half

280
00:19:00,416 --> 00:19:01,020
second.

281
00:19:05,310 --> 00:19:09,500
And now we have our detached between

282
00:19:09,810 --> 00:19:13,374
main method and everything is running.

283
00:19:13,572 --> 00:19:17,358
And while we don't reach the end of

284
00:19:17,364 --> 00:19:21,566
the function, it won't close the

285
00:19:21,588 --> 00:19:25,922
go routine, so it will wait for it. So now

286
00:19:26,056 --> 00:19:29,582
we've seen the easy was for managing

287
00:19:29,646 --> 00:19:33,502
go routines. But we have another concept

288
00:19:33,566 --> 00:19:37,126
in go called channels. So what is a

289
00:19:37,148 --> 00:19:41,160
channel? A channel is like a pipe between your

290
00:19:41,530 --> 00:19:45,302
main function and your goutins. You can

291
00:19:45,436 --> 00:19:48,418
push and pull data inside it.

292
00:19:48,604 --> 00:19:51,434
You're able to tell okay,

293
00:19:51,552 --> 00:19:55,274
I'm at this step, and if

294
00:19:55,312 --> 00:19:58,330
I send you that, you can do this,

295
00:19:58,480 --> 00:20:01,550
or okay, if I do that, you can close this

296
00:20:01,620 --> 00:20:05,182
or like that. So let's see together

297
00:20:05,316 --> 00:20:09,070
how it works and what are the main

298
00:20:09,220 --> 00:20:12,640
issues. So, now we can

299
00:20:13,110 --> 00:20:15,570
delete our go routines.

300
00:20:17,110 --> 00:20:20,862
I will copy everything except the package

301
00:20:20,926 --> 00:20:24,580
name, thats. And I can

302
00:20:25,690 --> 00:20:29,938
remove this. I will go inside channel folder,

303
00:20:30,034 --> 00:20:34,086
main go and just

304
00:20:34,188 --> 00:20:38,170
pass this. We can

305
00:20:38,320 --> 00:20:42,774
remove references to weight

306
00:20:42,822 --> 00:20:43,420
group,

307
00:20:47,550 --> 00:20:50,220
like that. Like that.

308
00:20:51,410 --> 00:20:55,166
And now I would have to use the channel.

309
00:20:55,268 --> 00:20:58,270
So let's instantiate a channel,

310
00:20:58,420 --> 00:21:02,474
just temporarily channel with make and

311
00:21:02,532 --> 00:21:06,606
it's a channel. And my channel will contain only Internet.

312
00:21:06,798 --> 00:21:10,830
We can pass absolutely anything, the interface

313
00:21:10,990 --> 00:21:15,494
or your type or anything else thats

314
00:21:15,532 --> 00:21:20,982
just for the

315
00:21:21,116 --> 00:21:24,454
behavior. And tell to go, okay, I will send

316
00:21:24,492 --> 00:21:26,520
you that under it, like that.

317
00:21:27,530 --> 00:21:30,906
So in my champ channel I

318
00:21:30,928 --> 00:21:34,940
can push data. So if I try to tell

319
00:21:37,630 --> 00:21:41,134
I want to pursue an

320
00:21:41,172 --> 00:21:44,590
integer, then if I try

321
00:21:44,660 --> 00:21:46,720
to print this,

322
00:21:48,210 --> 00:21:49,920
I can do it like that.

323
00:21:53,430 --> 00:21:56,882
Then it will wait for an incoming value.

324
00:21:57,016 --> 00:22:00,958
So we send it here and it will print

325
00:22:01,054 --> 00:22:04,990
this, and it will print if the channel

326
00:22:05,080 --> 00:22:09,000
is closed or not. And to

327
00:22:09,370 --> 00:22:12,440
block the main thread we can do that.

328
00:22:12,810 --> 00:22:17,630
So while I don't receive value anymore

329
00:22:17,810 --> 00:22:20,598
after this, and after this reading,

330
00:22:20,774 --> 00:22:24,714
I will block the main thread. So we

331
00:22:24,752 --> 00:22:28,700
have to edit our

332
00:22:29,810 --> 00:22:34,282
main function. So that's

333
00:22:34,346 --> 00:22:36,670
not growoutine,

334
00:22:37,970 --> 00:22:43,202
but channel like

335
00:22:43,256 --> 00:22:46,658
that. So if I try to run go, run main

336
00:22:46,744 --> 00:22:51,422
go, it will create a deadlock,

337
00:22:51,566 --> 00:22:55,022
since all go routines are not up

338
00:22:55,096 --> 00:22:58,840
anymore. But to

339
00:22:59,930 --> 00:23:04,086
patch this, I have to use my

340
00:23:04,188 --> 00:23:07,778
channel here it will be an integer

341
00:23:07,874 --> 00:23:16,586
channel and I can defer thats

342
00:23:16,768 --> 00:23:20,380
one will be considered was true.

343
00:23:23,810 --> 00:23:27,758
So I will create a simple function and I

344
00:23:27,844 --> 00:23:31,262
send data in it and I have to pass

345
00:23:31,396 --> 00:23:34,660
my temporarized channel.

346
00:23:37,990 --> 00:23:41,714
I do that I

347
00:23:41,752 --> 00:23:45,800
would be able to read data in it but

348
00:23:47,210 --> 00:23:51,126
it doesn't. But if

349
00:23:51,148 --> 00:23:57,314
I try to read data like that then

350
00:23:57,452 --> 00:24:03,130
I get my one. But here I

351
00:24:03,280 --> 00:24:07,398
don't get any data and all go functions

352
00:24:07,494 --> 00:24:08,730
are stopped.

353
00:24:10,210 --> 00:24:13,582
So we could just move

354
00:24:13,636 --> 00:24:18,894
this and replace the

355
00:24:18,932 --> 00:24:21,040
plane temporal channel.

356
00:24:22,870 --> 00:24:26,914
And to read data in it can get

357
00:24:26,952 --> 00:24:30,900
the value and the open or close

358
00:24:31,830 --> 00:24:35,010
and just debug these values.

359
00:24:39,110 --> 00:24:42,440
And I got true because it's open and

360
00:24:42,890 --> 00:24:47,334
one because I send the

361
00:24:47,372 --> 00:24:49,180
value one in it.

362
00:24:51,230 --> 00:24:54,922
But if I tell okay I will close

363
00:24:55,056 --> 00:24:58,490
my channel here. I don't want to get any

364
00:24:58,560 --> 00:25:02,666
data anymore to be pushed

365
00:25:02,698 --> 00:25:06,174
in it. Im able to do that like

366
00:25:06,212 --> 00:25:09,680
this and I

367
00:25:10,050 --> 00:25:13,854
consider thats this will be longer than

368
00:25:13,892 --> 00:25:16,000
the temporized channel.

369
00:25:17,330 --> 00:25:21,458
When doing that I got zero because

370
00:25:21,544 --> 00:25:24,862
I've got nothing and the default value is

371
00:25:25,016 --> 00:25:28,854
zero for an integer and false because it's not

372
00:25:28,892 --> 00:25:32,422
open anymore. I think

373
00:25:32,476 --> 00:25:36,760
we cover the main part of

374
00:25:37,470 --> 00:25:41,500
the channels now I think we can go

375
00:25:42,590 --> 00:25:47,194
further and go the next step and the

376
00:25:47,232 --> 00:25:51,146
next tips would be the testing

377
00:25:51,338 --> 00:25:55,614
because I came from an environment that

378
00:25:55,732 --> 00:25:58,560
we didn't test really,

379
00:26:00,370 --> 00:26:05,040
we didn't test a lot. So while

380
00:26:06,050 --> 00:26:10,306
I'm discovering Golang, I discovered the

381
00:26:10,328 --> 00:26:14,580
unit testing and go is really well,

382
00:26:16,170 --> 00:26:20,230
it embed the test inside the

383
00:26:20,300 --> 00:26:25,270
language itself. So we could just

384
00:26:25,420 --> 00:26:30,234
comment this. And I

385
00:26:30,272 --> 00:26:33,100
don't have folder containing test,

386
00:26:33,710 --> 00:26:38,522
just create it testing or

387
00:26:38,576 --> 00:26:41,566
just test main go.

388
00:26:41,748 --> 00:26:45,338
So we will have some functions

389
00:26:45,514 --> 00:26:49,614
like two is two,

390
00:26:49,812 --> 00:26:54,210
so it will return a boolean

391
00:26:54,790 --> 00:26:58,530
and here we take an integer

392
00:26:59,750 --> 00:27:05,702
and tell see

393
00:27:05,836 --> 00:27:10,134
if n is equal to two.

394
00:27:10,332 --> 00:27:13,480
And obviously I have to return this

395
00:27:14,330 --> 00:27:16,870
for example Frank,

396
00:27:25,150 --> 00:27:28,714
which will return an integer and return

397
00:27:28,912 --> 00:27:33,454
two plus two. And if

398
00:27:33,492 --> 00:27:37,840
I want to go further I can tell fizz buzz like

399
00:27:38,530 --> 00:27:43,458
so it will take an Internet and

400
00:27:43,544 --> 00:27:47,540
return a string and if n

401
00:27:48,870 --> 00:27:52,274
equal to zero I will return

402
00:27:52,472 --> 00:27:56,040
this n

403
00:27:56,810 --> 00:27:57,830
module.

404
00:28:05,690 --> 00:28:11,054
Here I return unbuzz

405
00:28:11,122 --> 00:28:14,902
and the default

406
00:28:14,966 --> 00:28:17,900
will return buzz for example.

407
00:28:18,830 --> 00:28:22,554
So to test this I have to export

408
00:28:22,602 --> 00:28:27,134
my function. We can create a

409
00:28:27,172 --> 00:28:30,602
go file, your go file underscore

410
00:28:30,666 --> 00:28:33,986
test. And if

411
00:28:34,008 --> 00:28:38,546
we want to create a function to

412
00:28:38,568 --> 00:28:42,610
be tested, generally it's

413
00:28:43,190 --> 00:28:46,454
an exported function and it

414
00:28:46,492 --> 00:28:50,774
will ensure that for

415
00:28:50,812 --> 00:28:54,178
example test frank,

416
00:28:54,354 --> 00:28:57,538
two plus two it will

417
00:28:57,564 --> 00:29:01,706
use testing package and in that we

418
00:29:01,728 --> 00:29:04,342
can have some asserts.

419
00:29:04,406 --> 00:29:08,026
But that's really low level and

420
00:29:08,128 --> 00:29:10,250
you don't have any helpers.

421
00:29:11,570 --> 00:29:15,358
So my function two plus two

422
00:29:15,444 --> 00:29:20,570
will return four. So if Frank

423
00:29:20,730 --> 00:29:24,106
two plus two is

424
00:29:24,148 --> 00:29:27,954
different than four, we will throw an

425
00:29:27,992 --> 00:29:28,610
error,

426
00:29:33,110 --> 00:29:35,640
should return four.

427
00:29:36,970 --> 00:29:38,840
Then if I do that,

428
00:29:40,010 --> 00:29:43,638
it will pass. So just run using an

429
00:29:43,724 --> 00:29:47,670
ide, because I'm a nerd,

430
00:29:48,270 --> 00:29:52,300
not really a nerd. So it will compile and

431
00:29:53,070 --> 00:29:56,806
I'm a noob. That's the good word. Then it's

432
00:29:56,838 --> 00:29:59,740
okay, my tests are green.

433
00:30:01,010 --> 00:30:04,494
And if I enable this and

434
00:30:04,532 --> 00:30:07,678
I say okay, two plus two for me,

435
00:30:07,764 --> 00:30:09,920
should return three,

436
00:30:10,610 --> 00:30:14,306
then it will compile, then the test fail and it

437
00:30:14,328 --> 00:30:17,060
should return four. That's it.

438
00:30:18,710 --> 00:30:22,770
But if you're absolutely sure,

439
00:30:22,920 --> 00:30:26,834
two plus two should return three, so you can

440
00:30:26,952 --> 00:30:31,910
tell to your code, okay, I just return three and

441
00:30:31,980 --> 00:30:36,054
it's okay. So now

442
00:30:36,092 --> 00:30:40,378
we've done this test,

443
00:30:40,544 --> 00:30:45,078
what are the other functions?

444
00:30:45,254 --> 00:30:49,594
Two is two like that.

445
00:30:49,792 --> 00:30:54,478
So it will implement the testing package and

446
00:30:54,644 --> 00:31:00,414
just tell if

447
00:31:00,612 --> 00:31:03,460
hang to these two, three.

448
00:31:05,110 --> 00:31:07,970
So if it returned true here,

449
00:31:08,120 --> 00:31:13,140
it shouldn't, then just show

450
00:31:18,650 --> 00:31:21,080
three is not two.

451
00:31:22,490 --> 00:31:26,040
And I will disable this.

452
00:31:27,870 --> 00:31:31,500
And f for the two,

453
00:31:31,870 --> 00:31:34,650
it will return false,

454
00:31:36,110 --> 00:31:37,900
two should be.

455
00:31:39,710 --> 00:31:42,750
So that's really useless here,

456
00:31:42,820 --> 00:31:46,686
but that's for testing. So it will

457
00:31:46,708 --> 00:31:51,306
test any cases like it's unit

458
00:31:51,338 --> 00:31:55,554
testing. And now we

459
00:31:55,592 --> 00:31:57,650
will test the fizz buzz.

460
00:32:00,070 --> 00:32:04,740
And now we want to run

461
00:32:05,910 --> 00:32:09,926
this, what I've done in Fisburg. So if

462
00:32:09,948 --> 00:32:14,102
I try to return something

463
00:32:14,236 --> 00:32:18,270
like if Fizzburz

464
00:32:18,450 --> 00:32:22,838
from zero, different fizz,

465
00:32:22,934 --> 00:32:27,126
I think if it's different than fizz,

466
00:32:27,318 --> 00:32:30,722
then I can display a narrow

467
00:32:30,806 --> 00:32:31,440
message.

468
00:32:34,130 --> 00:32:37,840
For zero, it should

469
00:32:40,370 --> 00:32:45,646
return fizz. And if

470
00:32:45,748 --> 00:32:49,970
fizz buzz, one return buzz,

471
00:32:50,470 --> 00:32:52,370
no buzz.

472
00:32:53,350 --> 00:32:56,998
Yep. And for two,

473
00:32:57,084 --> 00:32:59,698
it should return buzz.

474
00:32:59,794 --> 00:33:04,440
And for

475
00:33:06,890 --> 00:33:09,030
this, it should return buzz.

476
00:33:10,750 --> 00:33:13,946
And that's it. So if I

477
00:33:13,968 --> 00:33:14,860
run it,

478
00:33:18,110 --> 00:33:22,010
we can see everything, every test path,

479
00:33:22,170 --> 00:33:25,710
and we can run tests like go

480
00:33:25,780 --> 00:33:29,502
test on each

481
00:33:29,556 --> 00:33:32,706
packages and it works. But I

482
00:33:32,728 --> 00:33:35,710
prefer on my ide because it's visual.

483
00:33:35,790 --> 00:33:39,422
And to explain, it's simpler.

484
00:33:39,566 --> 00:33:43,122
So if you want to go further, you have a more

485
00:33:43,176 --> 00:33:47,190
explicit example in the solution.

486
00:33:47,850 --> 00:33:50,680
You will run, what is the word,

487
00:33:51,050 --> 00:33:55,522
a web server, you will send JSon response

488
00:33:55,586 --> 00:33:59,100
and any other things using

489
00:34:00,030 --> 00:34:04,220
what we've seen together, so little

490
00:34:05,230 --> 00:34:09,398
useful tools. For example, for testing, you have gotest

491
00:34:09,494 --> 00:34:13,710
got tool for tooling and for linting and

492
00:34:13,780 --> 00:34:16,670
best practices you have golint.

493
00:34:17,410 --> 00:34:20,894
It will tell you you're so bad,

494
00:34:21,012 --> 00:34:24,674
that's not the right way to do that. And the same

495
00:34:24,712 --> 00:34:28,078
thing for govet, but govet

496
00:34:28,254 --> 00:34:31,634
will under any bad

497
00:34:31,832 --> 00:34:36,070
implementations or not just the

498
00:34:36,140 --> 00:34:39,798
syntax, for example. So here are some

499
00:34:39,884 --> 00:34:42,680
examples using that,

500
00:34:43,850 --> 00:34:46,680
some useful commands, go import,

501
00:34:47,050 --> 00:34:50,794
go FMT, et cetera. But I think you know

502
00:34:50,832 --> 00:34:54,810
already these commands and some

503
00:34:54,960 --> 00:34:59,334
useful links. And thanks to Avelino

504
00:34:59,382 --> 00:35:02,634
for making this repository

505
00:35:02,762 --> 00:35:06,894
exist. It will aggregate the

506
00:35:06,932 --> 00:35:10,414
data related to code language and

507
00:35:10,452 --> 00:35:14,114
if you want to read something you'll find obviously

508
00:35:14,232 --> 00:35:18,050
on this repository. So you have code wars

509
00:35:18,790 --> 00:35:24,270
and coding challenge to change you on catas.

510
00:35:24,350 --> 00:35:28,440
So that's little exercise. It takes around

511
00:35:28,810 --> 00:35:32,726
five or ten minutes to be done and

512
00:35:32,908 --> 00:35:36,902
you can see the other responses when

513
00:35:36,956 --> 00:35:40,860
you find something working and

514
00:35:42,190 --> 00:35:45,740
you can see better comprehensions or

515
00:35:47,710 --> 00:35:49,850
faster script.

516
00:35:50,290 --> 00:35:54,190
And I'm working on other side

517
00:35:54,260 --> 00:35:57,530
projects so im working on Smurf.

518
00:35:57,610 --> 00:36:02,358
That's an open source pen test oriented platform written

519
00:36:02,474 --> 00:36:06,786
in angular for the front end, PHP for the back.

520
00:36:06,968 --> 00:36:11,106
That's a good project to help you to manage your

521
00:36:11,208 --> 00:36:14,126
pen test missions or just pentest.

522
00:36:14,318 --> 00:36:19,190
I created Swan WordPress repository

523
00:36:19,530 --> 00:36:23,602
to be able to manage Swan through WordPress admin

524
00:36:23,746 --> 00:36:27,746
and there is the same thing for Prestashop

525
00:36:27,858 --> 00:36:31,718
created by Luke. So take a look

526
00:36:31,804 --> 00:36:35,894
at this. That's good project especially for

527
00:36:36,012 --> 00:36:40,190
smash and I think I'm done here.

528
00:36:40,380 --> 00:36:43,866
Nah thank you everybody for your attention

529
00:36:44,058 --> 00:36:48,174
and im available to discuss about some

530
00:36:48,212 --> 00:36:51,934
things. So like Gordon Ramsay is saying

531
00:36:52,132 --> 00:36:56,238
thank you so much and thank you to comfort to

532
00:36:56,404 --> 00:36:57,420
organizers team.

