1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:07,358
a developer, a quality

3
00:00:07,444 --> 00:00:11,162
engineer who wants to tackle the challenge of improving reliability

4
00:00:11,226 --> 00:00:14,970
in your DevOps? You can enable your DevOps for reliability

5
00:00:15,050 --> 00:00:19,114
with chaos native. Create your free account at Chaos

6
00:00:19,162 --> 00:01:17,158
native Litmus Cloud everyone,

7
00:01:17,244 --> 00:01:21,122
thank you for joining my session. My name is Mitzvinik and I'm a developer advocate

8
00:01:21,186 --> 00:01:25,442
on the Facebook open source team. Today I'll be talking about legacy systems

9
00:01:25,506 --> 00:01:29,050
and how to fix them. So let's go. Alright, as I said before,

10
00:01:29,120 --> 00:01:32,506
today's presentation is about legacy systems or as I

11
00:01:32,528 --> 00:01:36,410
call things, session fixing broken Windows code team and you.

12
00:01:36,480 --> 00:01:40,570
So let's get started. So what do I do quickly about

13
00:01:40,640 --> 00:01:44,462
myself? As I mentioned, I'm an open source developer advocate. I work with an open

14
00:01:44,516 --> 00:01:47,850
source team where we are empowering diverse communities

15
00:01:47,930 --> 00:01:52,202
through open source technology. You can learn more about us at opensource

16
00:01:52,266 --> 00:01:55,874
facebook.com. I in particular focus on

17
00:01:55,912 --> 00:01:59,762
mobile open source projects like React native, lethal for building

18
00:01:59,816 --> 00:02:01,650
UI frameworks for Android,

19
00:02:02,230 --> 00:02:05,918
image library, image management library called Fresco

20
00:02:06,014 --> 00:02:09,506
or Flipper for mobile debugging and many more other projects.

21
00:02:09,618 --> 00:02:13,426
And obviously I am passionate about open source and contributing

22
00:02:13,458 --> 00:02:17,506
back to the community. Hence I'm giving this talk today and what's

23
00:02:17,538 --> 00:02:21,558
our focus today? From the title alone, it doesn't make much

24
00:02:21,724 --> 00:02:25,686
sense. And here I'd like to explain that. We'll talk about legacy systems,

25
00:02:25,798 --> 00:02:29,066
what these are, why we have them, how to deal with them and when to

26
00:02:29,088 --> 00:02:33,226
even work on them at all. I'll talk about union engineering

27
00:02:33,258 --> 00:02:37,114
and quality, why hybrid engineering has been so important to legacy

28
00:02:37,162 --> 00:02:40,702
systems developments. And just going beyond code,

29
00:02:40,756 --> 00:02:43,934
I'll talk about teams and about you as an engineer,

30
00:02:43,982 --> 00:02:47,410
as an individual, part of the team. All right.

31
00:02:47,480 --> 00:02:50,878
What goes into building software? Building software,

32
00:02:51,054 --> 00:02:54,574
it's code. Obviously it's the team that's

33
00:02:54,622 --> 00:02:58,326
working on the code. It can be your team, it can be open source community,

34
00:02:58,508 --> 00:03:02,578
but also individuals. Teams are consisted of individuals

35
00:03:02,674 --> 00:03:06,050
and we should never forget about it. And these human component,

36
00:03:06,130 --> 00:03:10,086
it all means that human component is essential. It's not just code. We can't

37
00:03:10,118 --> 00:03:13,414
view it. Trying to be objective, completely objective

38
00:03:13,462 --> 00:03:16,758
here. And forget about human component. We can't, especially when we're

39
00:03:16,774 --> 00:03:20,460
talking about legacy code. So making it very personal.

40
00:03:20,770 --> 00:03:24,378
Instead of saying building software, let's talk about building your software,

41
00:03:24,474 --> 00:03:28,720
your project, your application. And so building your code

42
00:03:29,090 --> 00:03:32,554
with your team and with you yourself. How many elements

43
00:03:32,602 --> 00:03:36,014
is that? It's three elements. And what can go wrong?

44
00:03:36,052 --> 00:03:39,186
Right. With your three elements in play, lots of things can

45
00:03:39,208 --> 00:03:42,914
go wrong really quickly. But before going further, I really want to step back

46
00:03:42,952 --> 00:03:46,622
and talk about title for a second, I said fixing broken

47
00:03:46,686 --> 00:03:49,734
windows. What are those broken windows? Why am I even talking about

48
00:03:49,772 --> 00:03:53,234
them in relation to the legacy systems? So broken window theory

49
00:03:53,282 --> 00:03:56,870
is that you're trying to focus and never forget about small

50
00:03:56,940 --> 00:04:00,362
things as part of the big systems in case

51
00:04:00,416 --> 00:04:03,686
of the criminal code as it was initially created

52
00:04:03,718 --> 00:04:07,994
for. If it's a nice neighbourhood with nothing wrong there,

53
00:04:08,192 --> 00:04:11,386
and let's say someone broke a window in a house, and if

54
00:04:11,408 --> 00:04:14,734
that window is not fixed, later on you will see other windows being

55
00:04:14,772 --> 00:04:18,014
broken, maybe some graffiti appearing and other

56
00:04:18,052 --> 00:04:21,630
things happening in the neighborhood. So the important thing is,

57
00:04:21,700 --> 00:04:25,298
was soon as you see something's broken, something cracked, you have to fix it.

58
00:04:25,384 --> 00:04:29,454
And that's why this theory is so important to us, because legacy

59
00:04:29,502 --> 00:04:32,882
systems, they begin to deteriorate the entire system,

60
00:04:32,936 --> 00:04:36,110
the entire application, entire organizations.

61
00:04:36,190 --> 00:04:39,286
And that's why we're talking about this today as if it was

62
00:04:39,308 --> 00:04:42,982
a broken theory applied to software. So why does it matter

63
00:04:43,036 --> 00:04:46,326
though? Broken windows was, I said, can lead to

64
00:04:46,348 --> 00:04:49,718
broken software. And broken software is broken code.

65
00:04:49,804 --> 00:04:53,226
It's broken teams and it's broken you because you're working on that

66
00:04:53,248 --> 00:04:56,394
broken software. And that's what the focus is for today.

67
00:04:56,512 --> 00:05:00,602
Broken software in its elements. Fixing these broken windows of

68
00:05:00,656 --> 00:05:04,814
software is where our focus will be today. And that will ultimately set

69
00:05:04,852 --> 00:05:08,362
our agenda for today. Broken code. Then we'll talk about broken

70
00:05:08,426 --> 00:05:12,426
teams and then we will talk about broken individuals and how basically it

71
00:05:12,468 --> 00:05:16,094
affects us as developers, project managers,

72
00:05:16,142 --> 00:05:19,394
managers, et cetera. So what's number

73
00:05:19,432 --> 00:05:23,074
one? Software grievance that we all can come up with.

74
00:05:23,272 --> 00:05:27,418
Often people would bring up legacy systems. Legacy code, if you were to define

75
00:05:27,454 --> 00:05:31,126
it, is simply code without tests. And I really

76
00:05:31,148 --> 00:05:35,234
like this quote because it's coming from Michael Feathers, who's an authority

77
00:05:35,282 --> 00:05:39,126
in this space. He's written a great book about the topic. And if

78
00:05:39,148 --> 00:05:42,934
I wanted to, let's say, more tests to existing legacy systems,

79
00:05:42,982 --> 00:05:46,582
can I do that? Can I make it non legacy by just adding tests?

80
00:05:46,646 --> 00:05:50,342
It's a catch 22. Meaning to add tests,

81
00:05:50,406 --> 00:05:54,346
you have to refactor your code. More often than not, the legacy

82
00:05:54,458 --> 00:05:58,186
applications you have in place are not easily testable. What it leads

83
00:05:58,218 --> 00:06:01,454
to. To refactor you need tests because

84
00:06:01,492 --> 00:06:05,342
you don't want to regress your application, because you added some automation

85
00:06:05,406 --> 00:06:09,186
around your application. And that's why we

86
00:06:09,208 --> 00:06:12,366
can't just add tests because we need to preserve the behavior.

87
00:06:12,478 --> 00:06:15,634
Nobody cares that you are changing these

88
00:06:15,672 --> 00:06:19,126
feature. Your users ultimately want the same behave that they

89
00:06:19,148 --> 00:06:22,722
used to. These don't care that you might have moved the button slightly

90
00:06:22,786 --> 00:06:26,390
they care that they're still able to log in, don't care about the

91
00:06:26,460 --> 00:06:30,102
requirements, they care about the live product, the production product

92
00:06:30,156 --> 00:06:33,306
that they interacting with. So you behave to switch your

93
00:06:33,328 --> 00:06:36,726
focus from just being an engineer and becoming

94
00:06:36,758 --> 00:06:40,458
a user and trying to comprehend where your focus

95
00:06:40,544 --> 00:06:43,754
should be. And that's why customers care about behavior.

96
00:06:43,802 --> 00:06:47,886
First is what you have to keep in mind throughout this application, throughout this

97
00:06:48,068 --> 00:06:51,674
presentation. So do we just leave the legacy systems?

98
00:06:51,722 --> 00:06:55,474
Since there is a catch 22, you can change them. You can add

99
00:06:55,512 --> 00:06:59,380
tests because you can't refactoring them. And I would obviously say,

100
00:06:59,830 --> 00:07:02,660
I want to say no, but I can't. It's maybe,

101
00:07:03,270 --> 00:07:07,026
or as any contractor would say, it depends. You should always keep in

102
00:07:07,048 --> 00:07:10,798
mind cost of transition, return on investment. Does it worth these

103
00:07:10,824 --> 00:07:14,166
effort of adding tests and refactoring? Maybe the system is

104
00:07:14,188 --> 00:07:18,146
working. If it's not broken, why would you fix it? Popularity contest

105
00:07:18,178 --> 00:07:21,286
is what you want to avoid. A new test framework comes up or

106
00:07:21,308 --> 00:07:24,906
a new program framework comes up. You don't want to just refactor the

107
00:07:24,928 --> 00:07:28,426
whole thing. It's waste of money most often than not. And you

108
00:07:28,448 --> 00:07:32,442
always have to keep in mind nothing is an option. Meaning that when you evaluate

109
00:07:32,506 --> 00:07:36,346
changing something in your application, you always should have an option for let's

110
00:07:36,378 --> 00:07:39,870
do nothing. Can we actually do nothing and compare it against

111
00:07:40,020 --> 00:07:43,566
other options? So what if we want

112
00:07:43,588 --> 00:07:46,606
to change the code? What if we want to fix the legacy systems,

113
00:07:46,638 --> 00:07:50,494
our broken windows? What does it actually mean, changing the code? And don't forget

114
00:07:50,542 --> 00:07:53,166
we are talking about code at this part of the presentation.

115
00:07:53,278 --> 00:07:57,762
Changing the code means working on new features, bug fixes.

116
00:07:57,906 --> 00:08:01,586
It can be design changes or optimizations.

117
00:08:01,778 --> 00:08:05,462
And so if you're changing legacy systems, it's time to change its

118
00:08:05,516 --> 00:08:09,234
legacy status. You don't want to have it as legacy

119
00:08:09,282 --> 00:08:13,558
as not tests code. And that's where I'll bring up the main rules

120
00:08:13,574 --> 00:08:17,094
of legacy. What exactly is legacy code? I gave you one definition,

121
00:08:17,142 --> 00:08:20,470
but there is more to it than just no tests.

122
00:08:20,630 --> 00:08:24,874
You have to keep in mind these chia pet pattern, basically making sure you don't

123
00:08:24,922 --> 00:08:29,066
have these inline code changes to your legacy or like appending

124
00:08:29,098 --> 00:08:32,058
to the existing software just to make it testable.

125
00:08:32,154 --> 00:08:36,142
That won't work. You have to avoid glued patterns, meaning things like

126
00:08:36,196 --> 00:08:39,650
singletones, very non thread safe

127
00:08:40,470 --> 00:08:44,098
way of writing software. It has to be avoided because you can't really

128
00:08:44,184 --> 00:08:47,270
easily test it, meaning it's going to be legacy.

129
00:08:47,610 --> 00:08:50,760
You behave to keep single goal changes in mind,

130
00:08:51,130 --> 00:08:55,254
making a massive pull requests with lots of different changes

131
00:08:55,372 --> 00:08:58,978
in that one pr not going to get you far. And that's

132
00:08:58,994 --> 00:09:02,166
why those changes to the legacy has to happen incrementally.

133
00:09:02,278 --> 00:09:05,594
And don't forget, best is not always the best.

134
00:09:05,792 --> 00:09:09,094
You sometimes have to go for the better. So even if you can't

135
00:09:09,142 --> 00:09:12,630
make an ideal application by rewriting the whole

136
00:09:12,720 --> 00:09:16,106
legacy that you had before, maybe you can go for just changing

137
00:09:16,138 --> 00:09:20,362
a small part of it and making a big difference. Optimize your overall

138
00:09:20,426 --> 00:09:24,146
app. Don't try to move the mountains if you can just move

139
00:09:24,248 --> 00:09:27,730
your house so much slightly. And so the general

140
00:09:27,800 --> 00:09:31,998
guidance when dealing with software with legacy systems is identify sims

141
00:09:32,014 --> 00:09:35,290
or as they basically called, unit of behaviors.

142
00:09:35,390 --> 00:09:38,694
It's the parts of your software that actually responsible for the

143
00:09:38,732 --> 00:09:41,000
things that your users interact with.

144
00:09:41,530 --> 00:09:44,726
Keep in mind the solid pattern. That's a

145
00:09:44,748 --> 00:09:47,966
single responsibility principle, open principle,

146
00:09:48,098 --> 00:09:51,994
and many other ones you can find fairly easily from this

147
00:09:52,032 --> 00:09:55,274
acronym and just keep piling up

148
00:09:55,312 --> 00:09:58,454
things in your toolbox. Ways to deal with legacy

149
00:09:58,582 --> 00:10:02,406
maybe you can delegate. Delegation is a great pattern or builder patterns

150
00:10:02,438 --> 00:10:06,014
for legacy systems. Just make sure you increase your toolbox as

151
00:10:06,052 --> 00:10:09,418
you progress in your career. What if it's not just legacy?

152
00:10:09,594 --> 00:10:12,794
The same general rules apply. Like if you're trying to improve your software

153
00:10:12,842 --> 00:10:16,334
that you can just call something very old, something untested.

154
00:10:16,462 --> 00:10:20,046
The same principles that I've just highlighted, same rules will apply anywhere.

155
00:10:20,078 --> 00:10:24,580
They will improve any part of application you're working with. And so

156
00:10:25,030 --> 00:10:28,882
what people would usually call code smells, it's actually broken

157
00:10:28,946 --> 00:10:32,006
windows. Code smells is basically duplications in

158
00:10:32,028 --> 00:10:35,686
your code and other things that really add complexity to

159
00:10:35,708 --> 00:10:39,386
your overall app and grounds for code smells, or as I would call

160
00:10:39,408 --> 00:10:43,814
them, code cracks. Again, as I said, it's duplicate code length

161
00:10:43,862 --> 00:10:47,894
rule. Basically having a massive if you're talking about Java or object oriented

162
00:10:47,942 --> 00:10:51,370
programming language of your choice, you're talking about massive

163
00:10:51,450 --> 00:10:55,610
one class with no actual object oriented principle

164
00:10:55,690 --> 00:10:59,278
in place. And that will quickly deteriorate your project and

165
00:10:59,364 --> 00:11:02,730
force you to abandon it. Making it legacy Yagni violations,

166
00:11:02,810 --> 00:11:06,186
meaning that you add things just in case you ain't

167
00:11:06,218 --> 00:11:09,374
going to need it in the future, is a great way to write software.

168
00:11:09,422 --> 00:11:13,246
If you write something and you see it's not actually necessary, just delete

169
00:11:13,278 --> 00:11:16,660
it. Your source control might keep that information for the future,

170
00:11:16,970 --> 00:11:19,942
but also comments can deteriorate your code.

171
00:11:19,996 --> 00:11:23,702
Also, if you have a getter function, adding comment was it gets

172
00:11:23,756 --> 00:11:27,122
you something doesn't make much sense. You have to maintain

173
00:11:27,186 --> 00:11:30,502
comments as well, and it can pile up and get unmaintained

174
00:11:30,566 --> 00:11:34,662
very quickly. And it also adds to your brokenness of your software.

175
00:11:34,806 --> 00:11:38,214
And this book by Andrew Hunt and David Thomas pragmatic

176
00:11:38,262 --> 00:11:41,360
programmer has great suggestions how to deal with it,

177
00:11:41,730 --> 00:11:45,422
but overall refactoring guidance that I can provide for

178
00:11:45,556 --> 00:11:49,326
code smells, the field control always go for least number of

179
00:11:49,348 --> 00:11:52,478
responsibilities that your class or your method can have.

180
00:11:52,564 --> 00:11:55,726
Keep it private case of Java don't expose

181
00:11:55,758 --> 00:11:58,978
it too much because exposed things have to be tested very well.

182
00:11:59,144 --> 00:12:02,802
Keep data controlled collections. You can easily change

183
00:12:02,856 --> 00:12:06,242
things in the collection more often than not. And so

184
00:12:06,376 --> 00:12:09,910
you have to encapsulate it, hide it from the outside world

185
00:12:09,980 --> 00:12:13,490
as much as you can, because in that case it's easily testable.

186
00:12:13,570 --> 00:12:17,030
You have to keep things designed by contract, meaning that whatever

187
00:12:17,100 --> 00:12:20,578
you are getting that was you're returning is exactly as

188
00:12:20,604 --> 00:12:24,170
you promise things to do. If you get even

189
00:12:24,240 --> 00:12:27,242
number, you need to make sure you add an even number and you get that

190
00:12:27,296 --> 00:12:30,358
validated before the value is returned.

191
00:12:30,534 --> 00:12:33,918
And keep conditions and states in mind. That's what Java has a

192
00:12:33,924 --> 00:12:37,390
great addition to with optionals where you can really,

193
00:12:37,540 --> 00:12:40,878
instead of just returning null, you can return is it present

194
00:12:40,964 --> 00:12:44,478
or not? You don't have to just deal with nullable values.

195
00:12:44,654 --> 00:12:48,546
And another amazing book to reference refactoring by

196
00:12:48,568 --> 00:12:52,514
Martin Fowler. I really got a lot from it and whenever I

197
00:12:52,552 --> 00:12:55,634
dealt with refactoring of any kind. So that's all

198
00:12:55,672 --> 00:12:59,202
great. And we know now couple refactoring techniques,

199
00:12:59,346 --> 00:13:03,046
but how do we preserve behavior of our software? Because behave was I said

200
00:13:03,068 --> 00:13:06,358
before is the most important thing. So through tests, obviously,

201
00:13:06,444 --> 00:13:09,378
because I said legacy code is the code that's not tested.

202
00:13:09,474 --> 00:13:12,346
So we have to actually find a way to test our software to be able

203
00:13:12,368 --> 00:13:15,754
to change it. So characterization test is what comes to our

204
00:13:15,792 --> 00:13:19,654
rescue. They behavior driven and they are increasing

205
00:13:19,702 --> 00:13:23,114
our confidence. And what I mean by characterization tests,

206
00:13:23,242 --> 00:13:26,878
domain driven tests and domain driven tests are basically

207
00:13:26,964 --> 00:13:30,622
based on principles of domain driven design, which you don't have to know much

208
00:13:30,676 --> 00:13:34,014
about. Most important things are you have to know

209
00:13:34,052 --> 00:13:37,438
your domain, you have to know the thing you're working with. If you're

210
00:13:37,454 --> 00:13:40,946
working on accounting software, you need to know what accounting is all

211
00:13:40,968 --> 00:13:44,734
about, at least some basic concepts. If you're working with taxes,

212
00:13:44,782 --> 00:13:48,210
you need to know exactly what the lingo, what's the acronyms,

213
00:13:48,290 --> 00:13:51,670
what's these general functionalities that people

214
00:13:51,740 --> 00:13:54,838
who are in taxes need to interact with

215
00:13:55,004 --> 00:13:58,054
dog footing. You need to know exactly what you're working with, you need to use

216
00:13:58,092 --> 00:14:01,798
the software you are building, you're trying to respect the boundaries,

217
00:14:01,894 --> 00:14:05,482
basically set the domain you're in and use

218
00:14:05,536 --> 00:14:08,714
the same exact language in your code as you would

219
00:14:08,752 --> 00:14:12,494
when you're just speaking with somebody. And communication is a key, because again, it's all

220
00:14:12,532 --> 00:14:16,234
about communicating with your domain experts.

221
00:14:16,282 --> 00:14:20,158
It doesn't have to be you. It can be anybody from your company, it can

222
00:14:20,164 --> 00:14:23,322
be salespeople, if you're an engineer, your manager, PMS,

223
00:14:23,386 --> 00:14:26,986
et cetera. But is domain driven design useful

224
00:14:27,018 --> 00:14:29,986
in tests? And of course it is. That's why I'm talking about it, right?

225
00:14:30,088 --> 00:14:33,826
The main driven test pyramid, test pyramid as a whole, I'm sure you've heard of

226
00:14:33,848 --> 00:14:37,526
it, has unit tests that are the cheapest to have the

227
00:14:37,548 --> 00:14:40,994
fastest, but they give you the lowest number of the lowest confidence

228
00:14:41,042 --> 00:14:44,674
level in your software integration tests, where you're testing

229
00:14:44,722 --> 00:14:48,406
multiple functions of work, multiple units of work, and end to

230
00:14:48,428 --> 00:14:52,026
end tests where you're actually trying to use and test end to

231
00:14:52,048 --> 00:14:54,714
end scenario that your customers would go through.

232
00:14:54,832 --> 00:14:58,506
But they are the highest price, highly priced, they're hard to

233
00:14:58,528 --> 00:15:02,634
write, maintain, they're the slowest, but they give you the highest confidence

234
00:15:02,682 --> 00:15:06,640
level in overall systems, in overall application that you have.

235
00:15:07,090 --> 00:15:10,430
So the domain driven test pyramid is slightly different.

236
00:15:10,580 --> 00:15:13,842
It has domain enforcing unit tests which follow the same

237
00:15:13,896 --> 00:15:17,394
pattern, cheapest, fastest, lowest fidelity level,

238
00:15:17,512 --> 00:15:21,646
then the component approval tests and end to end task tests,

239
00:15:21,758 --> 00:15:25,058
which are the priciest ones, slowest, but give you the

240
00:15:25,064 --> 00:15:28,406
highest level of confidence. And this pyramid is important to

241
00:15:28,428 --> 00:15:32,194
us because it really helps us to start tackling legacy systems.

242
00:15:32,242 --> 00:15:35,080
That's why I'm spending so much time on this part.

243
00:15:35,450 --> 00:15:38,706
All right, let's look at domain enforcing unit

244
00:15:38,738 --> 00:15:42,246
tests. You behave to test as if you were an auditor,

245
00:15:42,278 --> 00:15:46,154
you have to step away from your code just so much slightly, and see

246
00:15:46,192 --> 00:15:49,722
how the user would see it. It's someone who were to audit your code,

247
00:15:49,856 --> 00:15:53,114
try to write it as if it was your last day, meaning that you write

248
00:15:53,152 --> 00:15:56,766
code as if tomorrow someone else would have to pick it up. So make sure

249
00:15:56,788 --> 00:16:00,046
you document it enough, don't go overboard so they

250
00:16:00,068 --> 00:16:03,502
don't behave to chase you and find you explaining what that single

251
00:16:03,556 --> 00:16:07,294
function is. So make sure you keep that in mind. And invariance.

252
00:16:07,342 --> 00:16:10,654
Approval testing is the actual application of domain enforcing

253
00:16:10,702 --> 00:16:14,766
unit tests. And what I mean by approval testing is that you're

254
00:16:14,798 --> 00:16:18,626
trying to evolve validation as you progress, as your code progresses.

255
00:16:18,738 --> 00:16:22,294
It's requirements driven. It's not just assertions, it's very

256
00:16:22,332 --> 00:16:25,606
different. It's actually you are defining what is correct. You take

257
00:16:25,628 --> 00:16:28,990
in snapshots, for example, is these great example of approval

258
00:16:29,010 --> 00:16:32,566
test. It gives you high level confidence, higher than the regular unit

259
00:16:32,598 --> 00:16:35,434
tests, because they're not just asserting something,

260
00:16:35,552 --> 00:16:39,082
they are actually validated by you, but they are more

261
00:16:39,136 --> 00:16:42,506
pricey, they are more costly than regular unit tests

262
00:16:42,538 --> 00:16:46,538
would be. So talking about the domain enforcing unit tests,

263
00:16:46,634 --> 00:16:50,078
invariant approval testing, they are property based testing. And these are

264
00:16:50,084 --> 00:16:54,334
also schema based testing. For examples of property

265
00:16:54,452 --> 00:16:58,366
based testing, there is a framework called quick theory for Java or JSON

266
00:16:58,398 --> 00:17:01,662
schema validator for schema driven tests. Quick theory

267
00:17:01,726 --> 00:17:04,802
just give you an example. If I were to write a code, it's a very

268
00:17:04,856 --> 00:17:08,200
descriptive name because it will show up in your test report.

269
00:17:08,650 --> 00:17:13,142
You initialize your quick theory class, then you

270
00:17:13,196 --> 00:17:16,450
have basically comparison of all positive,

271
00:17:16,530 --> 00:17:20,362
you get all positive integers and you basically have this simple

272
00:17:20,416 --> 00:17:24,122
operation of combining these and what it gives you is the result saying

273
00:17:24,176 --> 00:17:27,606
you can't just combine integers and expect integers

274
00:17:27,638 --> 00:17:31,466
as a result because there will be overflow.

275
00:17:31,578 --> 00:17:35,166
That's what property falsified after two examples. And it

276
00:17:35,188 --> 00:17:38,526
gives you smallest and other potential falsifying value.

277
00:17:38,708 --> 00:17:42,286
And it basically gives you that adding to positive integers gives

278
00:17:42,308 --> 00:17:45,886
you positive integer. That is incorrect. And that's exactly what approval

279
00:17:45,918 --> 00:17:50,210
testing does. It's not just asserting that true is true or false is false.

280
00:17:50,790 --> 00:17:54,302
All right, component approval test, second level of the pyramid.

281
00:17:54,446 --> 00:17:58,110
That's a couple of examples of those. Text based testing,

282
00:17:58,190 --> 00:18:02,162
snapshot testing, visual testing textback based testing

283
00:18:02,226 --> 00:18:05,474
is the example would be text tests, framework tests

284
00:18:05,522 --> 00:18:09,026
for snapshots and aptly tools for screenshots

285
00:18:09,218 --> 00:18:12,866
or backstop js. If I were to go for open source solution,

286
00:18:12,978 --> 00:18:16,358
apatools also is a great solution if you want to scale your apps

287
00:18:16,534 --> 00:18:20,566
app testing. But backstop js might be a good proof of concept for screenshot

288
00:18:20,598 --> 00:18:23,770
testing and that's what I will showcase. So let's say I have a simple app

289
00:18:23,840 --> 00:18:27,006
where I have a flag and the name of a country I'm in and I

290
00:18:27,028 --> 00:18:30,526
want to switch the country and it gives me Canada. Or to

291
00:18:30,548 --> 00:18:33,674
press it. I specify a test for tablet

292
00:18:33,722 --> 00:18:37,346
and for the phone. I give a quick scenario that go just to the

293
00:18:37,368 --> 00:18:40,866
home page, wait, nothing, and just wait for the selector. And it

294
00:18:40,888 --> 00:18:44,914
gives me these results. It basically takes screenshots and make sure that these

295
00:18:45,032 --> 00:18:49,266
difference is there if it changed. And that's

296
00:18:49,298 --> 00:18:53,702
basically how the screenshots testing is working. And again, it's an approval testing because

297
00:18:53,836 --> 00:18:57,654
you can just run it and expect it to work. You have to approve these

298
00:18:57,692 --> 00:19:01,402
screenshots and say that's what I expect. Maybe now the beginning state is

299
00:19:01,456 --> 00:19:04,934
hello Canada. Maybe in another country it's hello America.

300
00:19:05,062 --> 00:19:08,934
So that's what screenshot testing is. And that's a great example of approval

301
00:19:08,982 --> 00:19:13,126
testing. End to end task tests are a bit more complex

302
00:19:13,318 --> 00:19:16,606
and they are again user centric. Testing behind it

303
00:19:16,628 --> 00:19:19,738
is where you're trying to avoid focus on individual interactions

304
00:19:19,834 --> 00:19:24,002
and you focus on tasks instead

305
00:19:24,056 --> 00:19:27,714
of going through, let's say login flow. You talk about it was

306
00:19:27,832 --> 00:19:31,010
send keys for the username, send keys for the password,

307
00:19:31,510 --> 00:19:34,494
click on submit,

308
00:19:34,622 --> 00:19:38,338
instead you say enter username, enter password.

309
00:19:38,514 --> 00:19:42,534
Those tips in tasks for user to log in rather than going in the

310
00:19:42,572 --> 00:19:46,470
particular interactions for your tests, instead of talking about page

311
00:19:46,540 --> 00:19:50,810
object model, we're talking about screenplay pattern.

312
00:19:51,150 --> 00:19:54,870
An overall conclusion is that you have to focus and keep it on user dimensions.

313
00:19:54,950 --> 00:19:58,554
User dimensions can be different. Web users, they work on

314
00:19:58,592 --> 00:20:01,866
client side and API users, they work on server sides and

315
00:20:01,888 --> 00:20:05,114
that's where your tests have to reside. For web users,

316
00:20:05,162 --> 00:20:09,066
example will be protractor. For angular and for API users,

317
00:20:09,098 --> 00:20:13,022
if you have a rest, API rest assured is a great way to test

318
00:20:13,076 --> 00:20:17,070
your user interactions. User services on the backend.

319
00:20:17,810 --> 00:20:21,374
Alrighty, so we talked about broken code quite extensively.

320
00:20:21,422 --> 00:20:24,514
Now let's look at your team in play and

321
00:20:24,552 --> 00:20:27,538
how it affects working with legacy systems.

322
00:20:27,634 --> 00:20:31,442
Domain driven design that I referenced before. It's all about communication,

323
00:20:31,506 --> 00:20:36,466
so the importance of a team work cannot

324
00:20:36,498 --> 00:20:40,166
be overestimated. Common design pitfalls that

325
00:20:40,188 --> 00:20:43,226
we all face as a team. It's the approach of one

326
00:20:43,248 --> 00:20:47,526
size fits all. We try to have a silver bullet for everything. It's dogmatism,

327
00:20:47,638 --> 00:20:50,522
it has to be by the book and that's how we have to do it.

328
00:20:50,576 --> 00:20:54,414
At a company level. There is no design evolution. Someone else

329
00:20:54,452 --> 00:20:57,674
wrote it, let's not touch that code. And it ultimately

330
00:20:57,722 --> 00:21:01,246
leads to design stagnation. So how do we

331
00:21:01,268 --> 00:21:04,530
tackle these pitfalls? How do we tackle these issues on a team level?

332
00:21:04,600 --> 00:21:08,350
Because ultimately it's what results in broken windows, in broken

333
00:21:08,430 --> 00:21:12,066
systems, domain driven design is how we're dealing with those

334
00:21:12,088 --> 00:21:15,894
common design pitfalls. So let's go one by one.

335
00:21:16,092 --> 00:21:19,858
One size fits all. It's importance of knowing your context.

336
00:21:19,954 --> 00:21:24,290
As I said before dogmatism, you have to use design guidance

337
00:21:24,450 --> 00:21:27,938
rather than just feeling going by the book.

338
00:21:28,124 --> 00:21:31,882
Instead of no design evolution, you have design evolution and just

339
00:21:31,936 --> 00:21:35,386
having stagnation, you're thinking about lifetime of your

340
00:21:35,488 --> 00:21:39,370
application. Great way I've seen people do it is they

341
00:21:39,440 --> 00:21:43,340
have a stamp on. Reevaluate this function

342
00:21:43,710 --> 00:21:47,022
in a couple of years and you set actual timestamp when you have to

343
00:21:47,076 --> 00:21:50,254
reevaluate that. So you know when it expires, you know

344
00:21:50,292 --> 00:21:54,234
these new version of Java comes up with a great optimization. Maybe let's

345
00:21:54,362 --> 00:21:57,790
reevaluate that so context talk about context,

346
00:21:57,870 --> 00:22:01,346
when it comes to context is the idea of ubiquitous language. It's the

347
00:22:01,368 --> 00:22:04,834
idea of speaking the same language whether you're interacting with your customer

348
00:22:04,952 --> 00:22:09,058
or interacting with your code. It's the idea of bound context

349
00:22:09,154 --> 00:22:12,322
and domain segregation. So the idea of ubiquitous

350
00:22:12,386 --> 00:22:15,894
language means that you're basically trying

351
00:22:15,932 --> 00:22:19,546
to make sure that engineers, your tests and your domain experts who

352
00:22:19,568 --> 00:22:23,110
can be your users, your pmS, your salespeople,

353
00:22:23,190 --> 00:22:26,966
they all speak the same language. You don't call your user

354
00:22:26,998 --> 00:22:31,226
class user and test account on tests side.

355
00:22:31,328 --> 00:22:34,442
You have to keep the same naming because it really simplifies

356
00:22:34,506 --> 00:22:37,726
how you communicate, how you have discussion during the meetings or

357
00:22:37,748 --> 00:22:41,114
even code reviews domain segregation,

358
00:22:41,162 --> 00:22:44,226
what it means is that you really know exactly what

359
00:22:44,248 --> 00:22:48,050
you're working with. You're working within your accounting system,

360
00:22:48,120 --> 00:22:51,390
you're working within your logistics

361
00:22:51,470 --> 00:22:54,740
system. Make sure you exactly know what you're working with.

362
00:22:55,270 --> 00:22:59,350
Design guidance that you have to provide to yourself and your users

363
00:22:59,770 --> 00:23:02,950
goes to context mapping. Minimalism and design

364
00:23:03,020 --> 00:23:06,758
by contract that I've covered before. Context mapping is basically,

365
00:23:06,844 --> 00:23:10,854
as I said before, it's exactly what I mentioned in these past of boundaries

366
00:23:10,902 --> 00:23:15,050
of domains is that if you're working with sales context,

367
00:23:15,630 --> 00:23:19,702
the fields that customers might have, it can be different from what support

368
00:23:19,856 --> 00:23:23,918
customer has. So in support, what matters is maybe the phone number,

369
00:23:24,084 --> 00:23:27,326
email, how many cases they had and how

370
00:23:27,348 --> 00:23:30,814
many things they bought in sales they care

371
00:23:30,852 --> 00:23:34,850
about, your tax information, the Social Security number

372
00:23:34,920 --> 00:23:38,514
maybe. So those things have to be separated and

373
00:23:38,552 --> 00:23:42,190
known by you as a developer as you're working with domain experts.

374
00:23:42,270 --> 00:23:45,826
The context mapping basically acts your documentation because it has to

375
00:23:45,848 --> 00:23:49,554
be maintained. Maybe it's maintained automatically by a couple of plugins

376
00:23:49,602 --> 00:23:53,362
for ides of your choice. It acts as a communication

377
00:23:53,506 --> 00:23:57,062
tool because you can talk to your domain experts using

378
00:23:57,116 --> 00:24:00,522
that map and it's really supposed to represent your current state

379
00:24:00,576 --> 00:24:04,474
of your system because then you can deal with it because it's hard to

380
00:24:04,512 --> 00:24:07,546
add tests to legacy systems if you

381
00:24:07,568 --> 00:24:11,446
don't know what its current state is. The galactic

382
00:24:11,478 --> 00:24:14,846
model language actually helps a lot with it. It's the idea that you just

383
00:24:14,868 --> 00:24:18,522
have box line and labels, the complex Umls.

384
00:24:18,666 --> 00:24:22,254
I honestly personally never used it to its full power because

385
00:24:22,292 --> 00:24:26,034
I keep forgetting what boxes are for, what with

386
00:24:26,072 --> 00:24:29,346
just simple box line label approach or as

387
00:24:29,368 --> 00:24:33,234
I said called galactic modeling language, I can describe anything really,

388
00:24:33,432 --> 00:24:36,520
even the context map if I wanted to.

389
00:24:37,050 --> 00:24:40,806
So design guidance, as I mentioned,

390
00:24:40,988 --> 00:24:43,718
important to give and set for yourself.

391
00:24:43,884 --> 00:24:46,946
What's important is to also have strategic decisions.

392
00:24:47,058 --> 00:24:50,826
As a team. You have to collaborate within the team to figure out how to

393
00:24:50,848 --> 00:24:54,358
approach your system, you have to absorb feedback. Whether it's

394
00:24:54,374 --> 00:24:57,958
from your customer, from domain experts, from testers, from the engineers

395
00:24:58,054 --> 00:25:01,894
have to all work together. And really it all comes to having

396
00:25:01,952 --> 00:25:05,434
experience diversity. That's why it's important to have diverse

397
00:25:05,482 --> 00:25:08,730
teams, because everyone brings their backgrounds to the table,

398
00:25:08,810 --> 00:25:11,946
their experiences and helps you to shape your software

399
00:25:11,978 --> 00:25:15,586
and make it much better. And again, as I mentioned before, you have to know

400
00:25:15,608 --> 00:25:18,846
the lifetime of your design. Don't just have an indefinite,

401
00:25:18,958 --> 00:25:22,750
never change class or even the module.

402
00:25:22,910 --> 00:25:26,290
Keep in mind when it might be time for you to revisit it.

403
00:25:26,440 --> 00:25:30,038
So what's the conclusion? Communication is essential in domain driven design

404
00:25:30,124 --> 00:25:34,162
and it's essential with dealing with broken Windows legacy systems.

405
00:25:34,226 --> 00:25:37,558
So what do we do beyond design project planning? If I

406
00:25:37,564 --> 00:25:40,930
were to bring that up? When people say long hanging

407
00:25:41,010 --> 00:25:44,246
fruits are great things to handle, easy things to handle,

408
00:25:44,358 --> 00:25:47,926
they're long hanging for the reason we don't not dealing with them because they're

409
00:25:47,958 --> 00:25:51,050
complex, we've never touched them, we don't know their context.

410
00:25:51,550 --> 00:25:54,574
Dog footing is important to keep in mind.

411
00:25:54,692 --> 00:25:58,746
Also keep in mind Parkinson's law, where the work expands

412
00:25:58,778 --> 00:26:02,382
to fill the time allocated. If you don't have deadlines or you have very far

413
00:26:02,436 --> 00:26:05,810
deadlines like a year from now. It was with a

414
00:26:05,960 --> 00:26:09,362
waterfall approach. Your work might just be

415
00:26:09,496 --> 00:26:13,186
expanding, expanding or as they would call feature creep would be

416
00:26:13,208 --> 00:26:16,774
coming up and coming up. So keep that in mind. And the Conway's law

417
00:26:16,812 --> 00:26:20,374
is very important to us because it basically dictates that your

418
00:26:20,412 --> 00:26:24,626
software represents your organization structure. So you have lots of legacy

419
00:26:24,658 --> 00:26:28,282
code, untested, unmaintained code, probably in your

420
00:26:28,336 --> 00:26:31,130
organization you have something similar going on.

421
00:26:31,200 --> 00:26:35,606
Silos people don't share information. That's what it basically corresponds

422
00:26:35,638 --> 00:26:39,242
to. So regardless, communication in the key, as I said,

423
00:26:39,296 --> 00:26:42,574
and communication, instead of having it synchronous within the team,

424
00:26:42,692 --> 00:26:46,430
try to have a synchronous communication. Don't just always jump on a call,

425
00:26:46,500 --> 00:26:50,542
maybe ping them first. Treat each other's time with

426
00:26:50,596 --> 00:26:54,126
value. Instead of focusing on reach time. How fast someone can

427
00:26:54,148 --> 00:26:57,570
get back to me like within a second, focus on response time.

428
00:26:57,640 --> 00:27:00,830
Can they reply to you within a day? Just set those expectations

429
00:27:00,910 --> 00:27:04,114
with your teammates, because expectations is

430
00:27:04,152 --> 00:27:07,890
what's important. And maybe if you currently working from home

431
00:27:07,960 --> 00:27:11,062
have names to faces, don't just have an avatar, behave your break

432
00:27:11,116 --> 00:27:14,898
face, or at least when you are on a call, have some picture

433
00:27:14,914 --> 00:27:18,646
of yourself so people know who you are. Because when they see humans,

434
00:27:18,838 --> 00:27:22,266
it's been proven by psychology that we actually more sympathetic to

435
00:27:22,288 --> 00:27:25,434
it as well to each other. So it might help,

436
00:27:25,472 --> 00:27:28,922
as you know. Again, what about

437
00:27:28,976 --> 00:27:32,566
human aspect? It's also something we should never forget.

438
00:27:32,678 --> 00:27:35,458
This example I always bring up is by Jeremy Ashkenis.

439
00:27:35,494 --> 00:27:39,166
On one of his posts. He basically was just sharing. And by

440
00:27:39,188 --> 00:27:42,714
the way, Jeremy is a great person in the open source space. He's contributed

441
00:27:42,762 --> 00:27:46,094
greatly with things like coffee script. But anyways,

442
00:27:46,142 --> 00:27:49,250
he posted this nice picture of himself enjoying the sun,

443
00:27:49,320 --> 00:27:52,706
trumpeting the water and someone made this

444
00:27:52,888 --> 00:27:55,122
not so nice comment, I would say,

445
00:27:55,256 --> 00:27:58,678
and it really brings up the idea that you have to be

446
00:27:58,764 --> 00:28:02,658
focused on positive things. There is never a reason to be rude.

447
00:28:02,834 --> 00:28:06,902
The art of unsent letters is what I usually guide myself by is

448
00:28:06,956 --> 00:28:10,098
if you are angry with somebody, write a couple of iterations

449
00:28:10,194 --> 00:28:13,466
of response to them, but don't send these. And maybe on a

450
00:28:13,488 --> 00:28:16,826
fifth response in the fifth email you can actually send

451
00:28:16,848 --> 00:28:20,330
it because it's not as heated as you were initially.

452
00:28:20,750 --> 00:28:24,254
Focus on improvements, maybe not the best when the project is

453
00:28:24,292 --> 00:28:27,678
ended, instead of talking, how do we improve? How do we make better?

454
00:28:27,764 --> 00:28:32,350
Let's celebrate our success that we finish the project and

455
00:28:32,500 --> 00:28:36,320
have proactive feedback. We often give negative feedback or

456
00:28:37,430 --> 00:28:41,138
very infrequently we approach someone and says say,

457
00:28:41,224 --> 00:28:44,660
great job, be proactive in that matter.

458
00:28:45,110 --> 00:28:48,226
And a couple of things that I suggest to learn about this field and

459
00:28:48,248 --> 00:28:51,494
just being kinder to each other. Brad Cannon had a great talk

460
00:28:51,532 --> 00:28:55,234
about kindness on one of the podcasts and there is a changelock episode

461
00:28:55,282 --> 00:28:58,962
on that. So that's all great, but how do we deal with work environment

462
00:28:59,026 --> 00:29:02,330
that we are all interacting with our teammates?

463
00:29:02,910 --> 00:29:06,726
So office and you, I mean, you used to have open offices.

464
00:29:06,918 --> 00:29:10,106
I would say it's not the best thing, but if you're coming back, it might

465
00:29:10,128 --> 00:29:14,042
be different. Office perks, often they're just office bribes. People are

466
00:29:14,176 --> 00:29:17,934
forcing you to go to the office. It ultimately takes away from your time at

467
00:29:17,972 --> 00:29:21,566
work or with your families. We often get the best work done

468
00:29:21,588 --> 00:29:26,030
on these plane we're used to when there was no Internet, no interruptions.

469
00:29:26,190 --> 00:29:30,050
And don't forget that work is just work. Don't work all hours of these day.

470
00:29:30,120 --> 00:29:33,758
Spend some time for yourself and for your family. So the main grievance

471
00:29:33,934 --> 00:29:37,586
with work sometimes, especially in the office, were distractions

472
00:29:37,698 --> 00:29:40,946
at home as well. Mobile devices are often to blame.

473
00:29:41,058 --> 00:29:44,326
Noise interruptions are also a problem. You have to

474
00:29:44,348 --> 00:29:47,654
set up boundaries and getting to the zone is actually very

475
00:29:47,692 --> 00:29:52,214
difficult with all those distractions. So talking about individual distractions

476
00:29:52,262 --> 00:29:56,074
like mobile devices. Before I used to have a phone like this, lots of pop

477
00:29:56,112 --> 00:29:59,334
ups, notifications. Now I have nothing. No pop ups.

478
00:29:59,382 --> 00:30:03,274
Very organized, those. And that's what I would usually go for.

479
00:30:03,472 --> 00:30:06,090
And with mobile devices, can arrange your apps.

480
00:30:06,170 --> 00:30:09,998
Disable all notifications, do not disturb mode all the time,

481
00:30:10,084 --> 00:30:13,582
and put your phone away. It's been proven that if you just put your phone

482
00:30:13,716 --> 00:30:17,266
arm length away from you, you won't be as tempted to

483
00:30:17,288 --> 00:30:21,890
grab it every 1 hour and then, and just check it with no reasoning whatsoever.

484
00:30:22,310 --> 00:30:25,866
Noise control is also important to keep in mind. Meaningless noise,

485
00:30:25,918 --> 00:30:29,446
like a white noise, can be useful. Having some

486
00:30:29,468 --> 00:30:32,738
sound support, like apps like brain FM,

487
00:30:32,834 --> 00:30:36,534
Spotify, or my noise, or whatever you'd like to use to get

488
00:30:36,572 --> 00:30:40,274
into that zone of working. Or noise cancellation,

489
00:30:40,322 --> 00:30:43,702
like earplugs, earmuffs, or noise canceling headphones,

490
00:30:43,766 --> 00:30:47,126
whether it's Bose or something else. And library rules

491
00:30:47,158 --> 00:30:50,186
are also important to set up, especially if you're working at home.

492
00:30:50,368 --> 00:30:54,394
Keep quiet in the library. Have the sync ping

493
00:30:54,442 --> 00:30:58,286
first from your teammates. Don't get them just calling you. Let them

494
00:30:58,308 --> 00:31:01,614
write you a message first and see if you're available to chat. Establish those

495
00:31:01,652 --> 00:31:04,826
office hours when you're in these main expert,

496
00:31:04,858 --> 00:31:08,946
or your expert, especially on the legacy system. Set up

497
00:31:08,968 --> 00:31:12,034
like maybe an hour or two a month or a week or a couple other

498
00:31:12,072 --> 00:31:15,666
week, every other week, so people can come up with

499
00:31:15,688 --> 00:31:18,730
questions and ask you and discuss these rules.

500
00:31:18,750 --> 00:31:22,354
Don't just assume them. Have those expectations set with your teammates

501
00:31:22,402 --> 00:31:25,910
and with your company. So we talked about teams, we talked about code.

502
00:31:25,980 --> 00:31:29,926
Let's get to talking about individuals. And when it comes to individuals

503
00:31:29,958 --> 00:31:34,214
and how broken code and broken teams lead to broken individuals,

504
00:31:34,262 --> 00:31:37,930
I have to talk about stress. And why would we talk about it?

505
00:31:38,000 --> 00:31:41,566
Right? Let's look externally first. There are many examples out these like

506
00:31:41,588 --> 00:31:45,230
from Electronic Arts, this infamous life journal post

507
00:31:45,380 --> 00:31:49,594
from a person who was talking about spouse

508
00:31:49,722 --> 00:31:53,486
who had to work overtime. It was back in 2004. Then there's

509
00:31:53,518 --> 00:31:57,362
another example where Rockstar had quite a few people working

510
00:31:57,416 --> 00:32:01,006
overtime as well. And ultimately people didn't

511
00:32:01,038 --> 00:32:05,314
focus, was didn't spend as much time with their families. Or most

512
00:32:05,352 --> 00:32:09,282
recent that I could find from 2018 was from Brandon,

513
00:32:09,426 --> 00:32:13,478
where people at telltale basically laid them off. Quite a

514
00:32:13,484 --> 00:32:17,154
large number of people. And I really like his statement

515
00:32:17,202 --> 00:32:21,322
that work is ultimately work. Don't forget about yourself.

516
00:32:21,456 --> 00:32:25,094
Don't sacrifice yourself for the work. And there are many more cases,

517
00:32:25,142 --> 00:32:28,470
of course, externally. But what about internally? What about your colleagues,

518
00:32:28,550 --> 00:32:32,106
your family and yourself? Nature is smart when it

519
00:32:32,128 --> 00:32:35,786
comes to stress. Stress has purpose. There was fight or flight

520
00:32:35,818 --> 00:32:39,166
response. Imagine back then when you would run through

521
00:32:39,188 --> 00:32:43,006
the forest, you would try to hunt these prey and

522
00:32:43,028 --> 00:32:46,322
you would see, I don't know, lion. And you either

523
00:32:46,376 --> 00:32:49,826
fight it or you flee. Hopefully you flee because

524
00:32:50,008 --> 00:32:53,714
the lion most likely will eat it. The same

525
00:32:53,752 --> 00:32:57,026
goes for sleep or hunger. We're able to sleep

526
00:32:57,058 --> 00:33:01,282
less when we're chasing our prey or enduring

527
00:33:01,346 --> 00:33:05,142
hunger while again trying to find something to eat to bring home

528
00:33:05,196 --> 00:33:09,554
to our families and things. These makes sense from biological

529
00:33:09,602 --> 00:33:13,818
standpoint. Why do we feel so sad so badly when we are

530
00:33:13,984 --> 00:33:17,462
extremely stressed? The reason is because there are different types of stress.

531
00:33:17,526 --> 00:33:20,918
There is a short term stress and there's long term stress. And long term

532
00:33:20,934 --> 00:33:24,880
you're trying to avoid not sleeping for a day too while you are

533
00:33:25,410 --> 00:33:29,246
preparing for an exam may be fine, but when you're not sleeping for months at

534
00:33:29,268 --> 00:33:32,954
a time, that's really going to make a huge impact

535
00:33:33,002 --> 00:33:36,514
on your health. And the conclusion that you have to incorporate a short

536
00:33:36,552 --> 00:33:40,034
term stress because it's useful and you have to eliminate the long

537
00:33:40,072 --> 00:33:43,374
term stress. And it's important to talk about mental fitness

538
00:33:43,422 --> 00:33:47,250
when it comes to dealing with stressors. Overall mindfulness

539
00:33:47,330 --> 00:33:50,440
comes to mind. It's the idea that you have to clear your mind,

540
00:33:50,810 --> 00:33:54,690
embracing solitude, not being afraid of being alone,

541
00:33:54,850 --> 00:33:58,470
and incorporating meditation as much as you can.

542
00:33:58,620 --> 00:34:01,740
If I were to go one by one with clearing your mind,

543
00:34:02,350 --> 00:34:06,346
it's that currently we have information overload. This talk has

544
00:34:06,368 --> 00:34:09,898
been going for a long time now and you probably already overloaded with a

545
00:34:09,904 --> 00:34:13,806
number of things. I said you have to have this information

546
00:34:13,908 --> 00:34:17,466
dump dealt with as well. So many news cycles,

547
00:34:17,498 --> 00:34:21,114
so many different things coming your way. Even in this conference alone.

548
00:34:21,242 --> 00:34:23,680
You have to know how to deal on what to pick and choose.

549
00:34:24,850 --> 00:34:28,466
You have to have one source of true one place you go to to

550
00:34:28,488 --> 00:34:31,746
save your thoughts, to write your notes and keep your

551
00:34:31,768 --> 00:34:35,186
single focus. Multitasking is overrated. You have to keep

552
00:34:35,208 --> 00:34:39,030
it in mind. And this is a great book to actually reference for dealing with

553
00:34:39,100 --> 00:34:42,674
too many things at once. When it comes to embracing solitude,

554
00:34:42,722 --> 00:34:46,226
I personally found that it's extremely useful having the quiet moments

555
00:34:46,258 --> 00:34:49,846
to yourself. Flow therapy. It's when you are in a sleep,

556
00:34:49,958 --> 00:34:54,010
it's in a sensory deprivation tank. No sound,

557
00:34:54,160 --> 00:34:57,258
no lights, really lets you be with yourself for a

558
00:34:57,264 --> 00:35:00,554
moment, learn about yourself and clear. It basically is to clear

559
00:35:00,592 --> 00:35:04,494
judgments, clear judgments at least. And incorporate meditation. If you've never

560
00:35:04,532 --> 00:35:08,122
dealt with it, there are many ways to learn. There's unguided meditation,

561
00:35:08,186 --> 00:35:11,306
guided active meditation like running. You get in these zone

562
00:35:11,338 --> 00:35:14,490
and you actually relax. But important thing is consistency.

563
00:35:14,570 --> 00:35:18,402
Don't forget about your health, your mental health. And if you have a hard time

564
00:35:18,456 --> 00:35:22,190
starting there is a headspace app repaired meditation or calm.

565
00:35:22,270 --> 00:35:26,382
All those apps, again, help you to learn about this practice.

566
00:35:26,526 --> 00:35:29,846
And if you're skeptical, there is a 10% happier book

567
00:35:29,868 --> 00:35:33,446
by Dan Harris, who experienced some issues in the past and

568
00:35:33,468 --> 00:35:37,286
he found meditation that works for him. But more

569
00:35:37,388 --> 00:35:41,174
sources of work stress that we're dealing with are long hours and productivity

570
00:35:41,222 --> 00:35:44,746
and effectiveness chase. So overwork and long hours,

571
00:35:44,848 --> 00:35:48,362
it's creatures of habits. It's basically working too much,

572
00:35:48,496 --> 00:35:51,382
having unreasonable expectations that we need to avoid.

573
00:35:51,526 --> 00:35:55,398
And this weird math, the reality that you're

574
00:35:55,414 --> 00:35:59,358
thinking you're going to put 150% today, tomorrow you're going to put another 150.

575
00:35:59,444 --> 00:36:03,566
It's not going to work that way. You have 100% to spare. That's all.

576
00:36:03,668 --> 00:36:07,234
If you work today, 150% tomorrow, you can only give 50.

577
00:36:07,432 --> 00:36:10,994
You behave to do hunger by and hungry if you can. But don't go

578
00:36:11,032 --> 00:36:14,398
overboard, because ultimately it leads to regrets.

579
00:36:14,574 --> 00:36:17,140
And if you think you won't have those,

580
00:36:17,590 --> 00:36:20,658
I doubt that, because there is a great book by Brony Ware,

581
00:36:20,754 --> 00:36:24,534
the top five regrets of the dying and anybody who has been

582
00:36:24,572 --> 00:36:28,470
at the death door. She basically collected these five top

583
00:36:28,620 --> 00:36:32,060
regrets, and one of the top ones were working too much.

584
00:36:32,510 --> 00:36:36,326
And again, keeping the productivity and effectiveness chase splitting

585
00:36:36,358 --> 00:36:39,994
hours doesn't really work well. You have to know that you can either have a

586
00:36:40,032 --> 00:36:43,686
60 minutes focused or you're going to be interrupted.

587
00:36:43,718 --> 00:36:47,246
And it's not just 15 times four.

588
00:36:47,428 --> 00:36:49,994
You have to get in the zone, you have to get in the context.

589
00:36:50,042 --> 00:36:53,358
It doesn't code for free. So you have to keep focused

590
00:36:53,534 --> 00:36:57,540
and use benefits like unlimited vacation or

591
00:36:58,470 --> 00:37:01,858
health reimbursements, or buying equipment for yourself,

592
00:37:01,944 --> 00:37:05,954
like bikes. You have to actually use them if your work provides them.

593
00:37:06,152 --> 00:37:09,666
Because ultimately, if you don't go into conferences, if you like the field you're

594
00:37:09,698 --> 00:37:13,542
in, it leads to lost passion. You have to challenge yourself.

595
00:37:13,596 --> 00:37:17,522
Try to learn a new skill. Try to tackle a new language

596
00:37:17,586 --> 00:37:20,778
if you can, programming language if you can, or do it for yourself. Read a

597
00:37:20,784 --> 00:37:24,554
book. Read a fictional book. It really gets you

598
00:37:24,592 --> 00:37:27,722
going. Because if you just set in one way,

599
00:37:27,856 --> 00:37:31,654
it ultimately leads to too much stress. So are there any gotchas?

600
00:37:31,702 --> 00:37:35,034
Yes, these are. Of course, there are some receipt ways to fail.

601
00:37:35,162 --> 00:37:38,478
It's to be dogmatic. Just do it by the book. Jumping in

602
00:37:38,484 --> 00:37:41,994
too fast. It's like running a marathon. Many people can run a marathon

603
00:37:42,042 --> 00:37:45,394
with no training, but after that you won't be able to move for like six

604
00:37:45,432 --> 00:37:48,340
months or something, especially running for six months.

605
00:37:48,870 --> 00:37:52,866
You have to set goals for yourself, realistic goals and fighting your

606
00:37:52,888 --> 00:37:56,900
own nature. Doesn't work either. Try to see what works for you.

607
00:37:57,350 --> 00:38:00,886
Going cold turkey and not eating anything sweet like I'm trying to

608
00:38:00,908 --> 00:38:04,438
deal with, it's not going to work. You have to let yourself have a

609
00:38:04,444 --> 00:38:08,166
cheat days or again, whatever works for you. And this book that

610
00:38:08,188 --> 00:38:12,106
I found very useful for me to find a way around my habits on

611
00:38:12,128 --> 00:38:15,446
the day, on your life. Very handy by Aubrey

612
00:38:15,478 --> 00:38:19,034
Marcos so there is so much information that I talked

613
00:38:19,072 --> 00:38:22,662
about today. Who do we trust? Find a specialist,

614
00:38:22,726 --> 00:38:25,982
talk to a professional, experiment what works for you,

615
00:38:26,036 --> 00:38:29,870
and share your experiences with others. I'm sure you'll find people who can connect

616
00:38:29,940 --> 00:38:33,506
and relate. So to the last point of sharing, though, I skipped a

617
00:38:33,528 --> 00:38:35,970
major part the beliefs.

618
00:38:37,030 --> 00:38:40,542
To stick to your ways to improve

619
00:38:40,606 --> 00:38:44,194
yourself or improve your mental fitness or help yourself,

620
00:38:44,392 --> 00:38:48,678
you have to find inspiration, find purpose. For some people it's health,

621
00:38:48,764 --> 00:38:52,742
some people it's parents, kids know for why

622
00:38:52,796 --> 00:38:57,106
you're doing something. Find your community. And overall,

623
00:38:57,138 --> 00:39:00,010
again, I've talked about so many things, about code,

624
00:39:00,080 --> 00:39:02,918
about teams, about individuals.

625
00:39:03,094 --> 00:39:06,826
It's all about you. Finding what resonates with you throughout this talk.

626
00:39:07,008 --> 00:39:10,490
Taking it back home, try to apply it to your

627
00:39:10,640 --> 00:39:13,918
work, to yourself, and pick and choose.

628
00:39:14,004 --> 00:39:17,230
And so call to action for me is welcome. That change.

629
00:39:17,380 --> 00:39:20,638
Lead by example. Your team will change if you change yourself,

630
00:39:20,724 --> 00:39:24,154
they will see that. Communicate your ideas,

631
00:39:24,202 --> 00:39:27,600
your expectations and experiment. Give it a try.

632
00:39:28,050 --> 00:39:31,646
So connect with me on Twitter, read my

633
00:39:31,668 --> 00:39:34,654
blog, link in or email me directly with any questions. And again,

634
00:39:34,692 --> 00:39:36,340
thank you for your time. Thank you.

