1
00:01:54,270 --> 00:01:57,874
Good evening. My name is Giulio Vienne and today I will

2
00:01:57,912 --> 00:02:01,922
talk about the continuous stream of patches to update our

3
00:02:01,976 --> 00:02:05,806
systems, how it impacts the technological value streams,

4
00:02:05,918 --> 00:02:09,410
and its relation to what is known as technical debt.

5
00:02:10,310 --> 00:02:14,930
Today we leave a change in information technology that

6
00:02:15,000 --> 00:02:18,630
impacts more than security packs,

7
00:02:18,790 --> 00:02:22,314
development, deployment and operations. In other

8
00:02:22,352 --> 00:02:26,250
words, the entire devsecops pipeline.

9
00:02:28,670 --> 00:02:32,218
Critical vulnerabilities are no more a rare

10
00:02:32,314 --> 00:02:35,614
event. Every day a new vulnerability is

11
00:02:35,652 --> 00:02:39,578
discovered in some component part of our systems,

12
00:02:39,754 --> 00:02:43,682
so much that people are waiting for the next major event

13
00:02:43,816 --> 00:02:48,100
to happen this month, December 2022.

14
00:02:48,470 --> 00:02:52,078
Vulnerabilities are limited to the operating systems,

15
00:02:52,174 --> 00:02:55,814
to code written in CE or in assembly. They are

16
00:02:55,852 --> 00:02:58,530
found in all languages and platforms,

17
00:02:58,690 --> 00:03:02,950
and the traditional monthly patching is not enough anymore.

18
00:03:03,530 --> 00:03:07,110
What happens is not developers fault.

19
00:03:07,630 --> 00:03:12,086
Security is a hard problem and tooling is constantly

20
00:03:12,198 --> 00:03:14,380
catching up with new problems.

21
00:03:17,470 --> 00:03:20,338
If it is not developers fault,

22
00:03:20,454 --> 00:03:24,330
clearly this cannot be classified as technical debt,

23
00:03:24,410 --> 00:03:28,094
can it? I hope to convince you

24
00:03:28,212 --> 00:03:31,790
that we enter a new era where we must take into account

25
00:03:31,940 --> 00:03:34,770
the entire application environment.

26
00:03:35,190 --> 00:03:38,258
In the past, with a slow pace of change,

27
00:03:38,424 --> 00:03:41,934
we were able to reckon this work of continuous

28
00:03:41,982 --> 00:03:44,906
update as technical depth.

29
00:03:45,038 --> 00:03:48,280
But today we must bring into the light

30
00:03:48,650 --> 00:03:52,450
and put a different label on it has

31
00:03:52,530 --> 00:03:56,054
jungle savages barbarian may elicit some

32
00:03:56,092 --> 00:03:59,894
smile, but won't help a conversation with engineering,

33
00:03:59,942 --> 00:04:05,178
management and businesses I

34
00:04:05,264 --> 00:04:09,110
organize the content in three moments. In the first section,

35
00:04:09,190 --> 00:04:12,686
I'll focus on the frequency of updates for our system and

36
00:04:12,708 --> 00:04:16,970
applications. In the second part, I propose

37
00:04:17,050 --> 00:04:20,574
some definition for continuous updating that may

38
00:04:20,612 --> 00:04:24,606
help in discussing with management and planning.

39
00:04:24,798 --> 00:04:28,482
Finally, in the third and final section, I will

40
00:04:28,536 --> 00:04:32,254
hint at the engineering behind continuous

41
00:04:32,302 --> 00:04:36,070
updating, what current tools offers and their limits

42
00:04:38,090 --> 00:04:41,490
let's start our journey exploring the current landscape

43
00:04:41,570 --> 00:04:45,766
of updates and patches, a simple

44
00:04:45,868 --> 00:04:49,302
but not simplistic description of any execution environment.

45
00:04:49,366 --> 00:04:53,350
Consider three layers, the operating systems, the application stack,

46
00:04:53,430 --> 00:04:57,318
and the libraries. The operating system is your Linux distribution,

47
00:04:57,414 --> 00:05:00,714
the docker base image and the Windows

48
00:05:00,762 --> 00:05:04,970
installation. Whatever the application stack or runtime

49
00:05:05,130 --> 00:05:08,830
is your node JS interpreter, the Java runtime engine,

50
00:05:08,900 --> 00:05:12,126
the net runtime, the DLL or

51
00:05:12,148 --> 00:05:15,858
shared objects linked to your c executable, and so

52
00:05:15,864 --> 00:05:19,586
on, so forth. Clearly this could be part also of

53
00:05:19,608 --> 00:05:23,234
a docker image, and finally the libraries that may

54
00:05:23,272 --> 00:05:27,634
be statically or linked to your executable.

55
00:05:27,762 --> 00:05:31,202
Some languages like go, they embed the runtime,

56
00:05:31,266 --> 00:05:34,610
the final executable. The runtime version

57
00:05:34,690 --> 00:05:38,330
is so tied to the compiler and linker version.

58
00:05:39,230 --> 00:05:42,714
Each layer has its own independent sources of

59
00:05:42,752 --> 00:05:46,394
updated and patches. Depending on your

60
00:05:46,432 --> 00:05:49,894
architecture and deployment mechanism, each layer

61
00:05:49,942 --> 00:05:56,670
can be updated independently from the others or

62
00:05:56,820 --> 00:06:00,910
they are bundled together in a single deployment unit.

63
00:06:02,870 --> 00:06:06,670
I spent some time researching these sources

64
00:06:06,830 --> 00:06:10,626
of patches, how frequently each layer receives and

65
00:06:10,648 --> 00:06:11,410
updates,

66
00:06:13,350 --> 00:06:16,470
analyzing public repositories and sources.

67
00:06:16,970 --> 00:06:20,470
I found this data for operating systems.

68
00:06:20,970 --> 00:06:25,330
In average, we got patches for the operating systems

69
00:06:25,490 --> 00:06:27,960
every three or four weeks.

70
00:06:31,150 --> 00:06:34,586
Moving to the next layer application runtimes we

71
00:06:34,608 --> 00:06:38,362
can observe more spread between different sources of

72
00:06:38,416 --> 00:06:42,554
data and patches. We must not be deceived

73
00:06:42,602 --> 00:06:46,682
by major or minor releases. The frequency of patches

74
00:06:46,746 --> 00:06:50,894
is substantially higher. It ranges from a

75
00:06:50,932 --> 00:06:54,622
bi weekly patches for the most commonly

76
00:06:54,686 --> 00:06:57,982
used client runtime, which is the Google Chrome

77
00:06:58,046 --> 00:07:02,302
browser, down to the Java SDK,

78
00:07:02,446 --> 00:07:06,934
which usually have three months between

79
00:07:07,132 --> 00:07:10,310
patches. Someone may wonder

80
00:07:10,380 --> 00:07:13,606
why I included MongoDB in this list.

81
00:07:13,788 --> 00:07:17,774
From a practical perspective, any modern application relies

82
00:07:17,842 --> 00:07:20,998
on many different components, databases,

83
00:07:21,094 --> 00:07:24,326
caches, queues, messaging system, et cetera,

84
00:07:24,358 --> 00:07:28,150
et cetera. Their update reflects

85
00:07:28,310 --> 00:07:31,486
the entire application security and behavior, so I

86
00:07:31,508 --> 00:07:35,770
included Mongo as a representative of these other components

87
00:07:35,930 --> 00:07:39,230
just to see how often it gets updated.

88
00:07:41,330 --> 00:07:45,074
The next and third layer are all the

89
00:07:45,112 --> 00:07:48,500
libraries included and linked to the application.

90
00:07:49,430 --> 00:07:52,670
A modern trend is the increased dependency

91
00:07:52,750 --> 00:07:56,950
on third party libraries. I can remember when people

92
00:07:57,020 --> 00:08:00,802
worked in c plus plus they used a couple of libraries,

93
00:08:00,866 --> 00:08:04,306
maybe four, maybe five. Nowadays it's

94
00:08:04,418 --> 00:08:07,882
a lot more common to use

95
00:08:07,936 --> 00:08:11,386
open source libraries instead of buying libraries from a

96
00:08:11,408 --> 00:08:14,826
vendor and has we can see from this chart from

97
00:08:14,848 --> 00:08:19,046
son of type. The trend is hugely increasing

98
00:08:19,158 --> 00:08:22,830
year after year. Every major open

99
00:08:22,900 --> 00:08:26,462
source repositories is registering a

100
00:08:26,516 --> 00:08:30,160
huge amount of increase year over year,

101
00:08:30,770 --> 00:08:34,866
in this case from 2020 to 2021 in

102
00:08:34,888 --> 00:08:38,338
the absolute number of downloads, 50%,

103
00:08:38,504 --> 00:08:42,622
70%, 90% even. This is related

104
00:08:42,686 --> 00:08:46,754
to the language platform, and above

105
00:08:46,802 --> 00:08:50,630
that we have some interesting considerations.

106
00:08:51,530 --> 00:08:55,766
Different runtimes they have a different

107
00:08:55,868 --> 00:08:59,180
number of average libraries. So for example,

108
00:08:59,550 --> 00:09:03,590
JavaScript uses a lot more separate libraries

109
00:09:03,670 --> 00:09:07,098
compared to a Java or a.

110
00:09:07,184 --> 00:09:10,826
Net application. They use a lot less in the

111
00:09:10,848 --> 00:09:14,554
order of tenths compared to a JavaScript application that uses

112
00:09:14,602 --> 00:09:16,590
hundreds of libraries.

113
00:09:18,210 --> 00:09:22,030
The net result is a constant shift of the stack,

114
00:09:23,270 --> 00:09:27,794
all three layers, the need to

115
00:09:27,832 --> 00:09:32,100
protect the entire software stack and the chain that produces it.

116
00:09:32,470 --> 00:09:36,710
So we need to update the software a lot more frequently.

117
00:09:40,250 --> 00:09:44,262
Let's move to the second section and consider what is

118
00:09:44,396 --> 00:09:48,018
technical debt and if the phenomenon that we described

119
00:09:48,114 --> 00:09:51,510
can be defined as

120
00:09:51,580 --> 00:09:55,442
technical debt. We all know that technical

121
00:09:55,506 --> 00:09:59,270
debt is a metaphor. We use the word depth

122
00:09:59,430 --> 00:10:02,602
to better communicate with known technical audience.

123
00:10:02,746 --> 00:10:05,962
The listener may be an expert with a master

124
00:10:06,026 --> 00:10:10,320
in economics, or have a simpler common sense idea.

125
00:10:11,570 --> 00:10:15,054
I put in this slide three definition for

126
00:10:15,092 --> 00:10:18,210
depth. There are

127
00:10:18,360 --> 00:10:22,050
common elements across the definition and these

128
00:10:22,120 --> 00:10:25,862
elements are three and key to

129
00:10:25,916 --> 00:10:29,846
understand what technical debt is compared to the

130
00:10:29,868 --> 00:10:33,554
normal debt. They are the will, the principal

131
00:10:33,602 --> 00:10:35,400
or capital, and the interest.

132
00:10:37,390 --> 00:10:41,238
A person does not enter debt without agreeing

133
00:10:41,334 --> 00:10:45,098
or accepting it, or searching for it.

134
00:10:45,184 --> 00:10:49,750
It is always an act of will to borrow

135
00:10:49,830 --> 00:10:52,400
some money from someone else.

136
00:10:53,250 --> 00:10:56,682
He borrows an exact amount of money, the principal,

137
00:10:56,826 --> 00:11:01,550
for a certain duration of time, more or less rigid,

138
00:11:01,970 --> 00:11:05,234
and part of the contract is the interest to pay as time

139
00:11:05,272 --> 00:11:09,454
passes could be zero interest, or usually it's

140
00:11:09,502 --> 00:11:12,926
more than zero. And debt

141
00:11:12,958 --> 00:11:16,646
can be renegotiated, for example

142
00:11:16,748 --> 00:11:19,350
by delaying some payments.

143
00:11:21,610 --> 00:11:25,794
Moving to the technical debt it was introduced

144
00:11:25,842 --> 00:11:29,106
by Ward Cunningham as an explanation

145
00:11:29,218 --> 00:11:33,054
for a technical problem. So the technical debt

146
00:11:33,122 --> 00:11:37,094
metaphor matches the three core elements

147
00:11:37,142 --> 00:11:40,750
that I described before. The engineering team

148
00:11:40,900 --> 00:11:44,094
knows that a design solution is

149
00:11:44,212 --> 00:11:47,870
suboptimal and which other

150
00:11:47,940 --> 00:11:52,080
solution would be preferable. This is

151
00:11:52,390 --> 00:11:56,366
matching perfectly the wheel element. You don't get technical depth

152
00:11:56,398 --> 00:12:00,354
by chance. The team have

153
00:12:00,392 --> 00:12:03,826
an estimate for a future solution and

154
00:12:03,928 --> 00:12:06,774
for the temporary solution. If not,

155
00:12:06,892 --> 00:12:10,406
they will never choose the worst and

156
00:12:10,508 --> 00:12:13,990
shortcut solution if it's not able to

157
00:12:14,060 --> 00:12:17,678
implement in a lesser time compared

158
00:12:17,714 --> 00:12:21,306
to the other one. So it must be cheaper to

159
00:12:21,328 --> 00:12:25,350
implement. Finally, the capital

160
00:12:25,430 --> 00:12:28,410
element. Oh shite.

161
00:12:28,750 --> 00:12:31,206
Finally, the interest. Shite.

162
00:12:31,398 --> 00:12:35,078
Sorry, shite. Ward Cunningham

163
00:12:35,174 --> 00:12:38,638
introduced debt as an explanation for a technical problem.

164
00:12:38,804 --> 00:12:42,238
The technical depth metaphor matches the three

165
00:12:42,324 --> 00:12:46,494
core elements I described before. The engineering

166
00:12:46,542 --> 00:12:50,398
team knows that a design is suboptimal

167
00:12:50,494 --> 00:12:53,838
and which other solution would be preferable.

168
00:12:54,014 --> 00:12:55,750
This is the will element.

169
00:12:57,530 --> 00:13:01,574
The team has an estimate for the future solution and

170
00:13:01,612 --> 00:13:05,334
for the temporary solution, and they know that

171
00:13:05,372 --> 00:13:08,438
the temporary solution is substantially cheaper

172
00:13:08,534 --> 00:13:12,326
to implement. Otherwise, choosing to take the shortcut

173
00:13:12,358 --> 00:13:15,260
would be an irrational way of thinking.

174
00:13:16,830 --> 00:13:20,206
This estimate to implement the

175
00:13:20,228 --> 00:13:23,518
solution is the capital element. Finally,

176
00:13:23,684 --> 00:13:26,640
what matches the interest?

177
00:13:28,130 --> 00:13:31,774
It is the delays in paying back

178
00:13:31,892 --> 00:13:35,620
the debt. The longer it takes you

179
00:13:36,230 --> 00:13:39,374
to go back and implement

180
00:13:39,502 --> 00:13:43,330
the desired solution instead of the temporary solution,

181
00:13:43,670 --> 00:13:47,670
the harder it becomes, the harder is

182
00:13:47,740 --> 00:13:51,382
to fix the software and maintain and

183
00:13:51,436 --> 00:13:54,694
evolve the software. So this is

184
00:13:54,732 --> 00:13:58,646
like the interest that the amount to payback grows

185
00:13:58,678 --> 00:14:00,140
and grows over time.

186
00:14:04,670 --> 00:14:08,522
Continuous updating is something different from

187
00:14:08,656 --> 00:14:12,410
refactoring. It is a simple adaptation

188
00:14:12,490 --> 00:14:16,698
to the environment. No new domain knowledge

189
00:14:16,794 --> 00:14:21,150
or user feedback require architecting or refactoring.

190
00:14:21,570 --> 00:14:25,234
So which analogy should we use

191
00:14:25,272 --> 00:14:28,770
to explain it? I do not see the three

192
00:14:28,840 --> 00:14:31,810
elements that characterize debt.

193
00:14:32,390 --> 00:14:36,150
Thus I'm suggesting other terms borrowed,

194
00:14:36,650 --> 00:14:40,120
pun intended, from economics. My first

195
00:14:40,570 --> 00:14:44,646
proposal is the term depreciation. It captures the

196
00:14:44,668 --> 00:14:48,262
fact that investment in software is not a constant

197
00:14:48,326 --> 00:14:51,180
value, but decreases over time.

198
00:14:52,510 --> 00:14:56,186
This analogy has a limit and is that

199
00:14:56,288 --> 00:14:59,702
depreciation is an accounting, a fiscal

200
00:14:59,766 --> 00:15:03,194
technique completely disconnected from external

201
00:15:03,242 --> 00:15:07,386
events. So we don't capture the external

202
00:15:07,578 --> 00:15:11,486
push with vulnerabilities that we have

203
00:15:11,588 --> 00:15:15,506
to update software. Another terms

204
00:15:15,688 --> 00:15:19,026
might be inflation. This metaphor has an

205
00:15:19,048 --> 00:15:22,334
advantage over depreciation because it catches

206
00:15:22,382 --> 00:15:25,860
the external elements. Inflation is something that happens

207
00:15:26,390 --> 00:15:30,034
outside your control.

208
00:15:30,232 --> 00:15:33,714
The ratio of the software value changes is

209
00:15:33,752 --> 00:15:37,462
not a constant. There can be periods of high inflation

210
00:15:37,566 --> 00:15:42,102
and this could be resemble

211
00:15:42,246 --> 00:15:45,734
a technology leap or new attack techniques.

212
00:15:45,862 --> 00:15:49,274
So high inflation, the value of my

213
00:15:49,312 --> 00:15:52,842
solution due to these factors and there are period

214
00:15:52,906 --> 00:15:56,286
calm with very low inflation, there are

215
00:15:56,308 --> 00:15:59,594
no big external events and forces us to update

216
00:15:59,642 --> 00:16:01,950
our software very frequently.

217
00:16:03,430 --> 00:16:07,154
Another final way to describe the need

218
00:16:07,192 --> 00:16:11,054
to update constantly is an increase of operational costs

219
00:16:11,102 --> 00:16:14,270
to keep the lights on, the cost to rebuild,

220
00:16:14,350 --> 00:16:18,054
track, store and deploy. In my

221
00:16:18,092 --> 00:16:22,418
opinion, all these ideas operational

222
00:16:22,514 --> 00:16:25,030
costs, technical inflation,

223
00:16:26,410 --> 00:16:30,330
technical devaluation are all

224
00:16:30,400 --> 00:16:34,454
three more effective to explain the continuous update

225
00:16:34,502 --> 00:16:38,490
phenomenon compared to the concept of technical depth,

226
00:16:40,930 --> 00:16:44,522
we reach the third part where we analyze

227
00:16:44,586 --> 00:16:47,790
what continuous update means. In practice,

228
00:16:50,130 --> 00:16:54,450
continuous update is not continuous delivery nor

229
00:16:54,600 --> 00:16:58,494
continuous deployment. The necessity of frequently

230
00:16:58,542 --> 00:17:01,598
updating a system independently

231
00:17:01,694 --> 00:17:06,466
of source code changes necessity.

232
00:17:06,658 --> 00:17:11,394
We must update to prevent attacks frequently

233
00:17:11,522 --> 00:17:14,600
because we probably have to update every day.

234
00:17:15,450 --> 00:17:18,810
If you average what you have seen changes

235
00:17:18,880 --> 00:17:22,586
in operating system level in the runtime in

236
00:17:22,608 --> 00:17:25,930
the libraries we have frequent updates

237
00:17:26,510 --> 00:17:29,974
independently. Means that when there are

238
00:17:30,032 --> 00:17:34,234
no functional changes, we still have to rebuild and redeploy

239
00:17:34,282 --> 00:17:38,398
to production all the patches in the many

240
00:17:38,484 --> 00:17:41,840
other layers which are not our application.

241
00:17:43,590 --> 00:17:47,666
The source code changes excludes the

242
00:17:47,688 --> 00:17:51,506
portion of build and deploy scripts which identifies the

243
00:17:51,528 --> 00:17:55,734
version of dependencies. So these changes

244
00:17:55,852 --> 00:17:59,030
are not considered source code in this definition.

245
00:18:01,530 --> 00:18:04,854
In practice, we can be lucky and have

246
00:18:04,892 --> 00:18:08,970
a monolith application running on a virtual machine.

247
00:18:09,390 --> 00:18:13,430
In this case, it operation is responsible for updating

248
00:18:13,590 --> 00:18:16,682
the operating system and maybe even

249
00:18:16,816 --> 00:18:20,498
the runtime because it's preinstalled on the machine.

250
00:18:20,694 --> 00:18:24,522
So developer and the pipeline

251
00:18:24,586 --> 00:18:28,286
are used only when there is a change in the

252
00:18:28,388 --> 00:18:32,126
libraries, so less frequency of update and

253
00:18:32,148 --> 00:18:35,922
redeploy because we have independence between

254
00:18:35,976 --> 00:18:40,370
layers. But if we consider a microservice architecture,

255
00:18:40,790 --> 00:18:44,094
each service is packaged in a docker image and the docker

256
00:18:44,142 --> 00:18:47,106
image contains all the layers,

257
00:18:47,218 --> 00:18:50,966
application libraries, runtime and operating system. So we

258
00:18:50,988 --> 00:18:54,998
have to redeploy the whole image no matter

259
00:18:55,084 --> 00:18:58,634
which layer we need to patch. This is an

260
00:18:58,672 --> 00:19:02,854
interesting downside of containers. It applies anywhere

261
00:19:02,982 --> 00:19:06,442
immutable infrastructure is implemented, not just

262
00:19:06,496 --> 00:19:10,286
containers. The simplest way to

263
00:19:10,308 --> 00:19:14,890
implement continuous update is to rebuild and redeploy

264
00:19:15,050 --> 00:19:18,800
all your application every single day,

265
00:19:19,170 --> 00:19:23,074
no matter what? This is easy if

266
00:19:23,112 --> 00:19:27,490
your portfolio is just a few application and pipelines,

267
00:19:27,830 --> 00:19:30,914
it clearly does not scale very well for

268
00:19:30,952 --> 00:19:34,986
an enterprise portfolio. The sheer cost of rebuilding

269
00:19:35,118 --> 00:19:38,070
can be huge and impressive.

270
00:19:40,730 --> 00:19:43,830
To do an optimization,

271
00:19:44,490 --> 00:19:48,554
we need to pick up our

272
00:19:48,672 --> 00:19:52,662
software bill of materials and our configuration

273
00:19:52,726 --> 00:19:56,346
items and bring this information together so we

274
00:19:56,368 --> 00:20:00,166
can easily locate which component requires

275
00:20:00,198 --> 00:20:03,502
a rebuild and redeploy. As soon as we

276
00:20:03,556 --> 00:20:07,710
have the information of

277
00:20:07,860 --> 00:20:11,406
what needs to be patched. Could be

278
00:20:11,588 --> 00:20:14,740
a piece of operating system or a library or whatever.

279
00:20:15,430 --> 00:20:18,946
The next logical step to automate the process

280
00:20:19,128 --> 00:20:23,278
is an automatic update of all the references

281
00:20:23,374 --> 00:20:26,962
to the patched component. This could be

282
00:20:27,096 --> 00:20:31,054
build scripts like a Palm XML CS Pro J

283
00:20:31,192 --> 00:20:35,014
packages. JSon for JavaScript could be

284
00:20:35,052 --> 00:20:39,530
the docker files, so the reference to the base images

285
00:20:40,670 --> 00:20:44,026
could be ansible puppet or chef scripts that

286
00:20:44,048 --> 00:20:47,894
are patching operating systems or infrastructure

287
00:20:47,942 --> 00:20:51,250
as code in the form of terraform, cloud formation,

288
00:20:51,350 --> 00:20:54,030
arm templates, scripts.

289
00:20:55,890 --> 00:20:59,486
Finally, we need to kick off

290
00:20:59,588 --> 00:21:03,282
the pipeline. After we patch these

291
00:21:03,416 --> 00:21:07,422
scripts, the pipeline will rebuild

292
00:21:07,566 --> 00:21:11,220
the component, the image, and redeploy it.

293
00:21:12,390 --> 00:21:16,342
Note that in this scenario the normal approval process may

294
00:21:16,396 --> 00:21:20,310
face short you can have a lot

295
00:21:20,460 --> 00:21:24,680
of software to be rebuilt and redeploy thinks of log four j

296
00:21:25,130 --> 00:21:29,286
and you cannot approve 100 different pipelines

297
00:21:29,398 --> 00:21:33,606
in one go. You need something different, some expedite

298
00:21:33,718 --> 00:21:38,330
approval process that will encompass all the impacted components.

299
00:21:40,510 --> 00:21:44,414
Consider what is required to automate the process in full.

300
00:21:44,612 --> 00:21:47,982
This is the flip side of the coin. We need a strong

301
00:21:48,116 --> 00:21:51,806
test harness around the application to guarantee that a

302
00:21:51,828 --> 00:21:56,050
patch will not break any core functionality.

303
00:21:56,630 --> 00:21:59,966
If you have a big portfolio of components

304
00:22:00,078 --> 00:22:03,890
based on the same technology, for example Java,

305
00:22:04,230 --> 00:22:08,610
a single library upgrader can start a buildstorm

306
00:22:09,050 --> 00:22:12,774
with hundreds of build queuing at the same time

307
00:22:12,892 --> 00:22:16,440
and running for hours or more.

308
00:22:17,630 --> 00:22:20,954
This will kill not just

309
00:22:21,072 --> 00:22:25,910
your build infrastructure, but also your production

310
00:22:26,070 --> 00:22:30,542
infrastructure, because you are deploying everything

311
00:22:30,676 --> 00:22:33,040
simultaneously. At the same time,

312
00:22:33,490 --> 00:22:37,710
huge spike in disk, network and cpu usage,

313
00:22:38,770 --> 00:22:42,646
not counting the downtime that user

314
00:22:42,698 --> 00:22:46,418
might suffer. Another side effect might be

315
00:22:46,504 --> 00:22:50,958
the increase of the usage of storage for all the intermediary

316
00:22:51,054 --> 00:22:54,500
artifacts, especially if you're using

317
00:22:54,890 --> 00:22:58,646
the immutable infrastructure pattern. So you are producing a

318
00:22:58,668 --> 00:23:02,326
lot of images, everyday new images for a

319
00:23:02,348 --> 00:23:05,426
lot of applications. The current image

320
00:23:05,458 --> 00:23:09,338
technology is not optimized for frequent and small changes

321
00:23:09,424 --> 00:23:13,654
to images, but this will probably improve

322
00:23:13,782 --> 00:23:17,286
over time. Finally, the increased adoption

323
00:23:17,318 --> 00:23:21,760
of safe languages like rust may

324
00:23:22,210 --> 00:23:25,790
translate that in a few years. Adopting these languages,

325
00:23:26,210 --> 00:23:29,710
we won't see so many security patches,

326
00:23:30,370 --> 00:23:34,174
hopefully. Back to the original

327
00:23:34,222 --> 00:23:37,090
question that gives the title to this speech.

328
00:23:37,670 --> 00:23:41,854
Is technical depth the right metaphor for continuous

329
00:23:41,902 --> 00:23:45,542
update? I think the

330
00:23:45,676 --> 00:23:48,902
answer is a clear no, at least in my

331
00:23:48,956 --> 00:23:52,182
opinion. Technical depth is a great

332
00:23:52,236 --> 00:23:56,150
metaphor for some kind of problems we face while

333
00:23:56,220 --> 00:23:59,754
delivering software. We borrow time when

334
00:23:59,792 --> 00:24:03,706
we judge. Better taking a shortcut than going

335
00:24:03,888 --> 00:24:07,594
through the long way. Nowadays we

336
00:24:07,632 --> 00:24:09,690
face a new phenomenon.

337
00:24:10,130 --> 00:24:14,234
Perfectly working software weakens

338
00:24:14,362 --> 00:24:18,350
over time and need continuous maintenance.

339
00:24:19,090 --> 00:24:22,994
The speed of decay is noticeable much

340
00:24:23,032 --> 00:24:26,642
more similar to inflation. Our money value less and less

341
00:24:26,696 --> 00:24:28,100
as time goes by.

342
00:24:31,030 --> 00:24:34,546
My name is Giulio Vian. I'm italian. I work in

343
00:24:34,568 --> 00:24:37,778
Ireland as a principal engineer for Unum,

344
00:24:37,874 --> 00:24:40,600
a Fortune 500 insurance company.

345
00:24:41,290 --> 00:24:44,674
I post my thoughts on DevOps and some random

346
00:24:44,722 --> 00:24:48,554
topics in my blog. I repost on LinkedIn and

347
00:24:48,592 --> 00:24:52,570
some other media. To prepare this talk.

348
00:24:52,640 --> 00:24:55,994
I researched a number of sources which are listed in the

349
00:24:56,032 --> 00:24:57,530
next three slides.

350
00:24:59,070 --> 00:25:02,542
I won't apologize for the font because it's not meant to be read.

351
00:25:02,596 --> 00:25:06,382
Now you can easily download the deck and follow

352
00:25:06,436 --> 00:25:09,854
the links or any articles or paper that

353
00:25:09,892 --> 00:25:13,982
is linked here from the conference site or

354
00:25:14,036 --> 00:25:15,520
from my own site.

355
00:25:18,930 --> 00:25:22,254
I want to thanks again the sponsor that made

356
00:25:22,292 --> 00:25:26,882
this event possible. I want to thanks the organizer

357
00:25:27,026 --> 00:25:30,278
and I hope you have lot of questions and

358
00:25:30,364 --> 00:25:34,166
we can interrupt and discuss the idea that

359
00:25:34,188 --> 00:25:37,782
I throw to you today. Thanks once

360
00:25:37,836 --> 00:25:41,110
more for staying to the end and hope you enjoy

361
00:25:41,180 --> 00:25:43,380
the content. See you soon.

