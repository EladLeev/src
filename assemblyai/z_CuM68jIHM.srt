1
00:00:34,690 --> 00:00:38,978
Hi, my name is Steve Judd, I'm chief architect at Jetstack.

2
00:00:39,074 --> 00:00:42,920
We're part of Venafi, who are a cybersecurity company,

3
00:00:43,370 --> 00:00:47,080
and we in jetstack provide

4
00:00:47,450 --> 00:00:51,306
customers with cloud native Kubernetes professional

5
00:00:51,338 --> 00:00:55,342
services, and quite frequently that

6
00:00:55,396 --> 00:00:59,182
involves security, implementing security best

7
00:00:59,236 --> 00:01:02,722
practices. And often as a result of this, I find myself

8
00:01:02,776 --> 00:01:06,514
having conversations with security teams about the

9
00:01:06,552 --> 00:01:10,238
best approaches they can take in order to implement

10
00:01:10,334 --> 00:01:14,302
security best practices such as zero trust within Kubernetes

11
00:01:14,366 --> 00:01:18,310
environments. And what this talk is all about

12
00:01:18,380 --> 00:01:22,118
is really zero trust. What it is,

13
00:01:22,284 --> 00:01:26,134
the principles behind it, the challenges and

14
00:01:26,172 --> 00:01:29,258
what kind of tools are available to be able to

15
00:01:29,344 --> 00:01:33,130
deploy these into Kubernetes, clusters and environments.

16
00:01:33,550 --> 00:01:37,466
So first of all, I want to go through a

17
00:01:37,488 --> 00:01:41,502
definition from Forrester about what zero trust really is.

18
00:01:41,636 --> 00:01:44,974
So it starts with an information security model

19
00:01:45,092 --> 00:01:48,906
that denies access to applications and data by default.

20
00:01:49,018 --> 00:01:52,430
So essentially default deny any request.

21
00:01:52,790 --> 00:01:56,446
So it continues with threat prevention is achieved

22
00:01:56,478 --> 00:02:00,862
by granting access only to networks and workloads utilizing

23
00:02:00,926 --> 00:02:04,754
policies. So essentially there will be some policies that

24
00:02:04,792 --> 00:02:08,254
define exactly who and what can access or

25
00:02:08,392 --> 00:02:12,150
a particular resource or execute a particular API.

26
00:02:12,490 --> 00:02:15,666
And exactly how to determine

27
00:02:15,698 --> 00:02:19,958
whether the request meets the sort of policy requirements

28
00:02:20,134 --> 00:02:24,038
is informed by this contextual

29
00:02:24,134 --> 00:02:28,102
risk based verification across users

30
00:02:28,166 --> 00:02:31,966
or their devices. So essentially any request that

31
00:02:31,988 --> 00:02:35,162
comes in, whether it comes from a user, whether it comes from a device,

32
00:02:35,226 --> 00:02:39,230
whether it comes from a service, you need to identify

33
00:02:41,650 --> 00:02:44,594
who that service or that user is,

34
00:02:44,792 --> 00:02:48,018
what permissions they've got, in effect,

35
00:02:48,104 --> 00:02:51,154
whether they're allowed to actually access that

36
00:02:51,192 --> 00:02:53,570
resource or execute that API.

37
00:02:54,970 --> 00:02:58,114
To sum up then in a bit more of a concise

38
00:02:58,162 --> 00:03:02,422
manner, never trust, always verify every

39
00:03:02,476 --> 00:03:05,766
single time. So that's kind

40
00:03:05,788 --> 00:03:09,194
of a brief, this is what zero trust is all about.

41
00:03:09,312 --> 00:03:13,590
But let's talk a bit more about, well, what are the key principles

42
00:03:13,670 --> 00:03:17,514
that underpin zero trust. So first off

43
00:03:17,552 --> 00:03:20,906
we've got the principle of least privilege, and essentially that's

44
00:03:20,938 --> 00:03:24,490
saying you should only give the requester

45
00:03:24,650 --> 00:03:27,934
the access they need to execute the

46
00:03:27,972 --> 00:03:32,240
request that they're trying to make. So as an example,

47
00:03:32,790 --> 00:03:36,430
don't give everyone cluster admin access to your Kubernetes

48
00:03:36,510 --> 00:03:39,646
clusters, because for sure they don't

49
00:03:39,678 --> 00:03:42,370
need it. Secondly,

50
00:03:44,310 --> 00:03:48,006
for each request that's made, you need to establish the

51
00:03:48,028 --> 00:03:51,638
identity of the requester and establish what

52
00:03:51,724 --> 00:03:55,126
permissions they have against that particular resource or

53
00:03:55,148 --> 00:03:58,586
API that they're trying to execute. And this has to be

54
00:03:58,608 --> 00:04:00,810
done on a per request basis.

55
00:04:01,470 --> 00:04:04,794
So as you can tell, identity is quite a

56
00:04:04,832 --> 00:04:07,340
key component of zero trust.

57
00:04:08,110 --> 00:04:11,658
So this isn't talking about just users identity it's

58
00:04:11,674 --> 00:04:14,190
also talking about identities for machines,

59
00:04:15,170 --> 00:04:18,106
machines being servers,

60
00:04:18,218 --> 00:04:21,934
virtual machines, IoT devices and so on.

61
00:04:22,132 --> 00:04:25,970
And typically we do this with X 509 certificates.

62
00:04:26,630 --> 00:04:30,900
And then finally, it's not enough to

63
00:04:31,670 --> 00:04:35,254
establish the identity of the requester and figure out whether

64
00:04:35,292 --> 00:04:38,614
they've got the right permissions. You also need to

65
00:04:38,652 --> 00:04:42,514
start looking at the context within which they're making this request.

66
00:04:42,642 --> 00:04:46,502
So, for example, what location is

67
00:04:46,636 --> 00:04:50,134
this request coming from? And is it usual

68
00:04:50,262 --> 00:04:53,866
for that identity? So in the case of

69
00:04:53,888 --> 00:04:57,514
a user that's based in the United Kingdom, would you

70
00:04:57,552 --> 00:05:01,310
expect them to be making a request from, say, Russia?

71
00:05:02,290 --> 00:05:05,642
So that's what I mean by a context based decision

72
00:05:05,706 --> 00:05:09,470
as well. So essentially,

73
00:05:09,890 --> 00:05:13,726
all of these principles are designed

74
00:05:13,838 --> 00:05:17,122
so that if a malicious actor does

75
00:05:17,176 --> 00:05:20,866
manage to gain access to one of your servers, for example,

76
00:05:21,048 --> 00:05:25,262
then it will prevent them from being able to explore

77
00:05:25,326 --> 00:05:28,886
other parts of your network, other servers or other devices and

78
00:05:28,908 --> 00:05:32,546
so on. So that's what I mean by what we mean by lateral

79
00:05:32,578 --> 00:05:34,150
movement within the network.

80
00:05:35,850 --> 00:05:38,970
Okay, so we've talked about what zero trust

81
00:05:39,040 --> 00:05:42,966
is, and we've talked about the principles that underpin

82
00:05:42,998 --> 00:05:46,940
it. Well, inevitably there are

83
00:05:47,470 --> 00:05:51,242
challenges with introducing a zero trust approach

84
00:05:51,306 --> 00:05:54,478
into any environment. So what I'm going to do is spend a

85
00:05:54,484 --> 00:05:59,118
few minutes talking about exactly what those challenges are within

86
00:05:59,204 --> 00:06:02,000
a kind of cloud native Kubernetes world.

87
00:06:02,950 --> 00:06:04,500
So first of all,

88
00:06:05,990 --> 00:06:10,158
machines are in a network, and by this I mean servers,

89
00:06:10,254 --> 00:06:13,314
devices, services,

90
00:06:13,432 --> 00:06:17,106
workloads, pods, jobs, they're increasing

91
00:06:17,138 --> 00:06:19,960
at an exponentially rapid rate.

92
00:06:20,810 --> 00:06:24,514
And given that all of these need a unique

93
00:06:24,562 --> 00:06:27,990
identity based on an X 509 certificate,

94
00:06:28,590 --> 00:06:32,374
then it's really not practical to do this manually

95
00:06:32,502 --> 00:06:36,218
because we're looking at issuing certificates, renewing them,

96
00:06:36,304 --> 00:06:39,834
revoking them and so on. So really

97
00:06:39,872 --> 00:06:43,166
you need some kind of tool to help you with this. As an example,

98
00:06:43,268 --> 00:06:46,590
venify, provide a tool called TPP,

99
00:06:46,930 --> 00:06:50,026
specifically designed for managing expo VI,

100
00:06:50,058 --> 00:06:53,070
nine certificates. Secondly,

101
00:06:54,470 --> 00:06:57,666
access control. So how do you

102
00:06:57,688 --> 00:07:01,170
define this? At what level? How do you update it?

103
00:07:01,240 --> 00:07:02,820
How do you enforce it?

104
00:07:04,310 --> 00:07:08,166
Thirdly, we've got this idea of shift left security,

105
00:07:08,348 --> 00:07:12,440
which is where you move towards the development team,

106
00:07:13,370 --> 00:07:17,170
more responsibility for implementing

107
00:07:17,250 --> 00:07:20,614
security practices. And genuinely,

108
00:07:20,662 --> 00:07:24,474
it's a good idea, but development teams and other

109
00:07:24,512 --> 00:07:27,786
teams have got competing priorities. So kind of

110
00:07:27,808 --> 00:07:31,006
how do you get some traction with this? How do

111
00:07:31,028 --> 00:07:34,480
you actually achieve this? And then finally

112
00:07:35,250 --> 00:07:38,522
you've got the whole governance and oversight aspect.

113
00:07:38,666 --> 00:07:42,518
So who's responsible for defining these policies,

114
00:07:42,634 --> 00:07:46,050
making sure that they're implemented and enforced?

115
00:07:48,470 --> 00:07:51,650
So now that we've kind of talked around zero

116
00:07:51,720 --> 00:07:55,342
trust, its benefits, and also the challenges

117
00:07:55,486 --> 00:07:58,600
that you're going to face when trying to implement it.

118
00:07:59,050 --> 00:08:02,806
How do we actually go about solving these in

119
00:08:02,828 --> 00:08:06,166
a containerized world? And really what I'm talking about is

120
00:08:06,268 --> 00:08:09,866
within your Kubernetes environments. So first

121
00:08:09,888 --> 00:08:14,122
of all, Kubernetes comes up with or has

122
00:08:14,256 --> 00:08:17,930
a bunch of native features that will help with this zero

123
00:08:18,000 --> 00:08:21,834
trust approach. First of all, it has role

124
00:08:21,882 --> 00:08:25,674
based access control, which can be incredibly

125
00:08:25,802 --> 00:08:29,834
granular and really allow you to very tightly

126
00:08:29,882 --> 00:08:33,426
specify exactly what a workload can do within a

127
00:08:33,448 --> 00:08:37,422
cluster. Secondly, if you've got the right CNI

128
00:08:37,486 --> 00:08:41,474
driver, then you can take advantage of network policies and

129
00:08:41,512 --> 00:08:44,942
these will allow you to define what

130
00:08:45,016 --> 00:08:48,630
pod can talk to, what other pods on what ports.

131
00:08:49,290 --> 00:08:53,366
So as I said, something that many

132
00:08:53,468 --> 00:08:57,046
CNI drivers implement, but not all of them.

133
00:08:57,228 --> 00:08:59,900
And then finally you have pod security.

134
00:09:00,350 --> 00:09:03,494
So that allows you to define

135
00:09:03,542 --> 00:09:07,290
within your pod, manifest the constraints

136
00:09:07,710 --> 00:09:10,880
within which the containers in that pod have to run.

137
00:09:12,210 --> 00:09:15,594
And then as part of that you have a pod

138
00:09:15,642 --> 00:09:19,914
security admission controller which is in charge of enforcing

139
00:09:20,042 --> 00:09:24,254
those policies. So basically if your pod manifest

140
00:09:24,382 --> 00:09:28,158
doesn't contain the right constraints, then this admission controller

141
00:09:28,254 --> 00:09:32,350
will prevent that pod from even being deployed into your Kubernetes

142
00:09:32,430 --> 00:09:35,926
cluster. So as well as the

143
00:09:35,948 --> 00:09:39,158
native features within Kubernetes itself,

144
00:09:39,324 --> 00:09:42,646
there are a whole bunch of add ons which also

145
00:09:42,748 --> 00:09:46,470
provide a whole bunch of additional security related features.

146
00:09:47,770 --> 00:09:51,580
So I'm going to go through three of the most important here.

147
00:09:51,950 --> 00:09:55,242
So first of all, you've got Cert manager, which probably

148
00:09:55,296 --> 00:09:59,642
many of you are aware is basically the de facto tool

149
00:09:59,776 --> 00:10:04,270
for managing x 509 certificates within a Kubernetes cluster.

150
00:10:04,770 --> 00:10:08,106
Then you have a variety of service mesh tools

151
00:10:08,138 --> 00:10:11,854
out there such as Linkerd and istio. They provide

152
00:10:11,972 --> 00:10:15,550
out of the box services like mutual tls

153
00:10:15,630 --> 00:10:19,140
between workloads in your cluster. And they provide

154
00:10:19,510 --> 00:10:23,650
things like traffic policies so

155
00:10:23,800 --> 00:10:27,442
you can enhance, if you like, your network policies

156
00:10:27,586 --> 00:10:30,934
to determine exactly where traffic can go and under

157
00:10:30,972 --> 00:10:34,646
what circumstances. And then finally we've got

158
00:10:34,668 --> 00:10:38,474
these policy based admission controllers like Kiverno and

159
00:10:38,512 --> 00:10:41,754
Gatekeeper, and they allow you to specify very

160
00:10:41,792 --> 00:10:45,274
sophisticated security policies that

161
00:10:45,392 --> 00:10:49,370
all your deployments, your pods, your workloads have to adhere to.

162
00:10:49,520 --> 00:10:53,230
Otherwise these admission controllers will deny access

163
00:10:53,300 --> 00:10:55,630
to these pods being deployed.

164
00:10:58,130 --> 00:11:01,566
So that's great. We've now covered a

165
00:11:01,588 --> 00:11:05,234
whole bunch of features and tools within Kubernetes that will help

166
00:11:05,272 --> 00:11:08,530
with zero trust. But exactly where

167
00:11:08,600 --> 00:11:12,034
then does this shift left security

168
00:11:12,152 --> 00:11:14,580
fit into this? Well,

169
00:11:15,450 --> 00:11:18,806
here's the thing. Security teams deeply understand

170
00:11:18,908 --> 00:11:22,390
what security policies need to be introduced,

171
00:11:22,890 --> 00:11:26,134
what they look like, but they

172
00:11:26,172 --> 00:11:29,242
aren't necessarily the right people for actually

173
00:11:29,296 --> 00:11:33,002
implementing those policies because they

174
00:11:33,056 --> 00:11:37,030
probably don't have the right expertise in terms of Kubernetes

175
00:11:37,110 --> 00:11:41,646
knowledge. And there are probably

176
00:11:41,828 --> 00:11:45,866
better teams, let's say, who will be better placed

177
00:11:45,898 --> 00:11:49,386
to do this implementation work. And I'm

178
00:11:49,418 --> 00:11:53,438
kind of specifically thinking about the platform engineers

179
00:11:53,614 --> 00:11:56,914
and the reason for this is that, well they already

180
00:11:56,952 --> 00:12:00,434
have the Kubernetes expertise and they have

181
00:12:00,472 --> 00:12:04,910
the know how in kind of automating everything

182
00:12:05,000 --> 00:12:07,240
that goes on in your Kubernetes world.

183
00:12:08,330 --> 00:12:11,734
And then finally they already are

184
00:12:11,772 --> 00:12:15,938
deeply familiar with the tools that are being run in their Kubernetes

185
00:12:16,034 --> 00:12:19,434
clusters and the tools that they probably want to

186
00:12:19,472 --> 00:12:23,130
run like Istio or Linkerd or cert manager.

187
00:12:23,790 --> 00:12:27,450
So really what I'm trying to say here is

188
00:12:27,600 --> 00:12:31,054
that although the onus is on the security teams to kind of take

189
00:12:31,092 --> 00:12:33,150
the lead and define the policies,

190
00:12:34,450 --> 00:12:38,170
it's really the platform engineers

191
00:12:38,250 --> 00:12:41,994
folk that are going to be the ones responsible

192
00:12:42,042 --> 00:12:45,274
for implementing and probably enforcing these policies.

193
00:12:45,402 --> 00:12:49,374
So what I'm trying to say here is the

194
00:12:49,412 --> 00:12:52,442
platform teams and the security teams

195
00:12:52,586 --> 00:12:56,370
absolutely need to collaborate on ensuring

196
00:12:56,530 --> 00:13:00,246
that zero trust approaches can be

197
00:13:00,428 --> 00:13:03,350
adopted within Kubernetes clusters.

198
00:13:03,770 --> 00:13:07,206
So that really is the end of my talk,

199
00:13:07,308 --> 00:13:11,046
so I hope you found it informative and enjoy the rest

200
00:13:11,068 --> 00:13:11,570
of the conference.

