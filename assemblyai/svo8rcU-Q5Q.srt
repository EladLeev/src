1
00:00:25,410 --> 00:00:29,606
It? Whose method is it anyway? Anyway, that's the question

2
00:00:29,788 --> 00:00:33,234
that scares a lot of developers

3
00:00:33,362 --> 00:00:36,710
when we talk about multiple inheritance.

4
00:00:38,410 --> 00:00:40,840
If you have a class,

5
00:00:42,250 --> 00:00:45,634
say a class c, that inherits

6
00:00:45,682 --> 00:00:49,394
from classes a and b, then if classes

7
00:00:49,442 --> 00:00:52,634
a and both implement a function, say foo,

8
00:00:52,682 --> 00:00:55,886
because I have no imagination here. Then if

9
00:00:55,908 --> 00:00:59,546
you call c foo, which version of foo

10
00:00:59,578 --> 00:01:01,840
gets called the one on a or the one on b?

11
00:01:02,630 --> 00:01:06,194
That's the trick. It gets more complicated if then

12
00:01:06,232 --> 00:01:09,234
you have a shared parent class,

13
00:01:09,352 --> 00:01:12,626
like just say alpha. And so A and B

14
00:01:12,648 --> 00:01:15,090
both inherit from Alpha.

15
00:01:16,650 --> 00:01:20,390
What if that also defines foo? And so

16
00:01:20,540 --> 00:01:24,914
that gets very complicated, very difficult. We call that the diamond inheritance

17
00:01:24,962 --> 00:01:28,534
pattern, or the deadly diamond of death if you're coming from the Java

18
00:01:28,582 --> 00:01:32,118
world. And it generally just scares the living daylights

19
00:01:32,134 --> 00:01:35,722
out of most developers, especially those who design

20
00:01:35,776 --> 00:01:38,518
languages. So they just don't support multiple inheritance.

21
00:01:38,614 --> 00:01:41,962
Simple Python,

22
00:01:42,026 --> 00:01:45,680
however, is not as afraid of this.

23
00:01:46,290 --> 00:01:49,626
It's quite call right with working with multiple

24
00:01:49,658 --> 00:01:53,198
inheritance. It has some pretty cool patterns for solving it.

25
00:01:53,364 --> 00:01:56,574
And that's what I'm going to be exploring in this talk. How does

26
00:01:56,612 --> 00:02:00,100
Python handle multiple inheritance? It's not as scary as it sounds.

27
00:02:00,470 --> 00:02:03,186
So the explanation I'm going to be giving is coming out of my book,

28
00:02:03,208 --> 00:02:07,060
dead simple Python, which is coming up from no search press, hopefully this year.

29
00:02:08,950 --> 00:02:12,422
Writing a book, getting a book edited takes some time. That's why

30
00:02:12,556 --> 00:02:15,798
if anyone's been following this, the date keeps being pushed out a

31
00:02:15,804 --> 00:02:19,206
little bit. But it's just edits. It is coming anyhow.

32
00:02:19,318 --> 00:02:22,950
So dead simple Python, I explore call the idiomatic

33
00:02:23,030 --> 00:02:26,426
patterns of the Python language why we do things a

34
00:02:26,448 --> 00:02:29,366
certain way, why we call certain things pythonic.

35
00:02:29,558 --> 00:02:33,338
And this knowledge can be really helpful

36
00:02:33,514 --> 00:02:37,038
for writing Python code as Python code.

37
00:02:37,204 --> 00:02:40,880
So whether you've been working in the language for a year or

38
00:02:41,970 --> 00:02:45,230
two days or a decade,

39
00:02:45,310 --> 00:02:48,610
there's probably something here that is going to be insightful.

40
00:02:50,230 --> 00:02:54,114
So the way Python handles this multiple inheritance situation

41
00:02:54,232 --> 00:02:57,290
is through what is called the c three method resolution

42
00:02:57,390 --> 00:03:00,646
order, or c three mro, which frankly sounds like

43
00:03:00,668 --> 00:03:04,978
a droid out of Star wars. Now, the whole point of the C three MRO

44
00:03:05,154 --> 00:03:08,762
is to determine the superclass linearization of

45
00:03:08,816 --> 00:03:12,154
a class, which is just a big fancy term that you can use

46
00:03:12,192 --> 00:03:14,490
to impress people at cocktail parties.

47
00:03:15,310 --> 00:03:19,382
So the superclass linearization is determined

48
00:03:19,446 --> 00:03:22,938
like this. The C three MRO

49
00:03:23,034 --> 00:03:27,470
first looks at the class

50
00:03:27,620 --> 00:03:31,518
that we're figuring out the linearization for. That's going to

51
00:03:31,524 --> 00:03:34,658
be the first item in the linearization. So in this case,

52
00:03:34,744 --> 00:03:38,260
food. Food inherits from object.

53
00:03:38,950 --> 00:03:42,494
So the next thing that goes in the linearization is the thing it inherits

54
00:03:42,542 --> 00:03:45,086
from object. Okay,

55
00:03:45,208 --> 00:03:49,122
that's pretty easy. Now, this is important because Python

56
00:03:49,186 --> 00:03:52,294
uses this superclass linearization to figure out

57
00:03:52,412 --> 00:03:55,858
where a method comes from. Ergo, method, resolution,

58
00:03:55,954 --> 00:03:59,754
order. So let's say we want to call the eat function on

59
00:03:59,792 --> 00:04:03,146
food. We'll call food eat. And Python says, where's the

60
00:04:03,168 --> 00:04:07,030
eat function? It's going to go through the superclass linearization

61
00:04:07,190 --> 00:04:10,474
left to right. Is it on food? No.

62
00:04:10,592 --> 00:04:14,494
Let's check object. If it's still not there, this is when it would say

63
00:04:14,532 --> 00:04:17,886
it can't find the method. As soon as it

64
00:04:17,908 --> 00:04:21,630
encounters that method in any of these classes, it stops looking

65
00:04:21,700 --> 00:04:24,420
and it's good. We'll see that again in a moment.

66
00:04:25,990 --> 00:04:29,486
Let's consider a class pizza. Pizza inherits

67
00:04:29,518 --> 00:04:33,442
from food. So once again we start the

68
00:04:33,576 --> 00:04:36,150
superclass linearization with pizza.

69
00:04:36,890 --> 00:04:41,494
Now we need to merge in the superclass linearization for food,

70
00:04:41,692 --> 00:04:44,726
which is food and object. We just saw that in the

71
00:04:44,748 --> 00:04:48,614
last step. There's two parts to this

72
00:04:48,652 --> 00:04:52,026
list that we are merging in. The head is

73
00:04:52,128 --> 00:04:55,370
food. It's the first item in the list we're merging.

74
00:04:55,950 --> 00:04:59,194
The tail is everything that comes after it. In this case,

75
00:04:59,232 --> 00:05:02,894
object. So we're going to look at the head of

76
00:05:02,932 --> 00:05:04,350
the list we're merging,

77
00:05:05,730 --> 00:05:09,054
which is food, and we can bring that in because

78
00:05:09,092 --> 00:05:12,602
there's a simple rule. If the head does not appear in any

79
00:05:12,676 --> 00:05:16,066
tail, we can bring it in. That'll make more

80
00:05:16,088 --> 00:05:19,250
sense as we go on. Now, once we bring it in,

81
00:05:19,320 --> 00:05:23,410
we remove food from the list to merge.

82
00:05:24,950 --> 00:05:28,278
The new head is object. So we can

83
00:05:28,284 --> 00:05:31,974
bring that in as well, because it doesn't appear in any tail. There is no

84
00:05:32,012 --> 00:05:35,654
tail. So the superclass Linearization for

85
00:05:35,692 --> 00:05:38,280
pizza is pizza, food at object.

86
00:05:39,530 --> 00:05:43,194
Let's look at a sandwich. Sandwich is also food.

87
00:05:43,312 --> 00:05:46,790
Same sort of thing going on. We need to merge in the superclass linearization

88
00:05:46,870 --> 00:05:50,010
for food. So we start out with sandwich,

89
00:05:50,670 --> 00:05:54,174
and then we look at the head of the list we're merging in,

90
00:05:54,212 --> 00:05:57,374
which is food. We can bring that in,

91
00:05:57,492 --> 00:06:00,430
and then we remove it from the linearization to merge.

92
00:06:01,010 --> 00:06:04,420
And the new head is object, which we can also bring in.

93
00:06:05,110 --> 00:06:08,766
The superclass linearization of sandwich is sandwich,

94
00:06:08,878 --> 00:06:13,042
food and object. It's pretty simple so far. Nothing really

95
00:06:13,096 --> 00:06:16,766
surprising. Doesn't make a very good talk if I were to end here. So let's

96
00:06:16,798 --> 00:06:20,694
make it more complicated. How about a calzone? Thank you

97
00:06:20,732 --> 00:06:24,134
to Kevin McCauley for allowing me to use this. This comes from

98
00:06:24,172 --> 00:06:28,140
his Seinfeld 2000 emoji set. So check him out.

99
00:06:30,190 --> 00:06:34,490
So a calzone inherits from both pizza and sandwich.

100
00:06:36,030 --> 00:06:39,482
So we need to merge in the superclass linearizations of

101
00:06:39,536 --> 00:06:43,418
both of those objects. Now we're

102
00:06:43,434 --> 00:06:45,680
going to work from left to right.

103
00:06:48,130 --> 00:06:51,694
The order that we inherit from is very important, and you're going to see this

104
00:06:51,732 --> 00:06:55,726
more and more as we go on. Now, in these two linearizations,

105
00:06:55,758 --> 00:06:59,570
we're merging in. We have two heads,

106
00:06:59,910 --> 00:07:03,614
pizza on the left hand, linearization and sandwich

107
00:07:03,662 --> 00:07:07,014
on the right hand. The rest is

108
00:07:07,052 --> 00:07:10,930
just in the tail. So the tail for the pizza linearization

109
00:07:11,010 --> 00:07:14,230
is food and object, and the tail in the

110
00:07:14,300 --> 00:07:17,240
sandwich linearization is food and object.

111
00:07:18,990 --> 00:07:22,614
Okay, so we start out with calzone in our new linearization,

112
00:07:22,742 --> 00:07:25,580
and we're going to look at the leftmost head,

113
00:07:26,990 --> 00:07:31,210
which is pizza. Now we can bring pizza in because it does not appear

114
00:07:31,290 --> 00:07:35,466
in the tail of any linearization here. No other instances

115
00:07:35,498 --> 00:07:39,354
of pizza. So we're good. Once we bring pizza in, we remove

116
00:07:39,402 --> 00:07:42,110
it from the linearizations to merge.

117
00:07:43,170 --> 00:07:46,386
We now have a new head. So the leftmost head is

118
00:07:46,488 --> 00:07:50,046
food. Well, we can't bring that in because it appears

119
00:07:50,078 --> 00:07:52,910
in the tail of the other linearization,

120
00:07:53,070 --> 00:07:56,822
the one belonging to sandwich. No go.

121
00:07:56,956 --> 00:08:00,280
So now we look at the next leftmost head,

122
00:08:00,650 --> 00:08:03,110
which would be sandwich.

123
00:08:04,330 --> 00:08:07,858
We can bring sandwich in because it doesn't appear in any tails.

124
00:08:08,034 --> 00:08:12,070
Okay, when we bring this in, we're going to go back to the leftmost

125
00:08:12,150 --> 00:08:14,940
head again, which is food.

126
00:08:15,470 --> 00:08:19,402
Now we can bring it in. Why? Because it is the head

127
00:08:19,456 --> 00:08:23,010
in both places. It appears it's the head in what remains

128
00:08:23,030 --> 00:08:26,206
of the linearization for pizza. And it's the head in what

129
00:08:26,228 --> 00:08:29,914
remains of the linearization for sandwich. And it's not in any tails.

130
00:08:30,042 --> 00:08:33,394
So we can bring that in. The new

131
00:08:33,432 --> 00:08:36,994
head in both is object. We bring that in

132
00:08:37,032 --> 00:08:41,214
as well. So the superclass linearization

133
00:08:41,262 --> 00:08:44,510
of calzone is calzone, pizza,

134
00:08:44,590 --> 00:08:46,520
sandwich, food, object.

135
00:08:47,530 --> 00:08:50,934
So if we want to call the eat method here,

136
00:08:51,132 --> 00:08:54,306
Python asks, well, where is the eat method?

137
00:08:54,418 --> 00:08:58,798
We're going to use the superclass linearization. We first look at calzone,

138
00:08:58,994 --> 00:09:02,490
and if we don't find it there, then we look at pizza,

139
00:09:02,910 --> 00:09:06,842
and if we find it there, we're done, we're good. We call

140
00:09:06,896 --> 00:09:10,682
eat on the pizza class and move

141
00:09:10,736 --> 00:09:14,062
on. We will never get to the sandwich eat

142
00:09:14,116 --> 00:09:16,240
method or the one on food.

143
00:09:17,170 --> 00:09:21,242
And this is where it becomes so helpful to understand how this method resolution

144
00:09:21,306 --> 00:09:24,878
order works, because it can clear up a lot of surprises

145
00:09:24,974 --> 00:09:29,774
regarding which method is being called in multiple

146
00:09:29,822 --> 00:09:33,794
inheritance. So we check in

147
00:09:33,832 --> 00:09:35,540
order until we find it.

148
00:09:37,030 --> 00:09:40,338
Okay, let's look at a pizza sandwich.

149
00:09:40,514 --> 00:09:43,718
You know, what a pizza sandwich is. You wake up, you're hungry, and pizza the

150
00:09:43,724 --> 00:09:46,806
night before, you grab two slices, stick something in between maybe,

151
00:09:46,908 --> 00:09:50,698
and just put it together and eat it cold. This is like

152
00:09:50,784 --> 00:09:52,700
the breakfast of champions here.

153
00:09:54,190 --> 00:09:57,594
Okay, so a pizza sandwich inherits from

154
00:09:57,712 --> 00:10:01,162
sandwich and pizza. So basically the same sort

155
00:10:01,216 --> 00:10:05,274
of scenario from before. So we start a new linearization

156
00:10:05,402 --> 00:10:09,102
with pizza sandwich, and then we're going to look at

157
00:10:09,156 --> 00:10:12,810
the lists we need to merge in, or the linearizations we need to merge in.

158
00:10:12,900 --> 00:10:16,690
So the heads here are sandwich and pizza respectively.

159
00:10:18,470 --> 00:10:21,806
So let's look at the leftmost head, which is sandwich, doesn't appear

160
00:10:21,838 --> 00:10:25,814
in any tails. We can bring that in the new

161
00:10:25,852 --> 00:10:28,726
head there. The new leftmost head is food.

162
00:10:28,828 --> 00:10:32,306
Can't bring that in because it's the tail. And the other linearization,

163
00:10:32,498 --> 00:10:36,054
no go. So then we

164
00:10:36,092 --> 00:10:39,766
look at the next head, which is pizza. We can

165
00:10:39,788 --> 00:10:42,810
bring that one in because it doesn't appear in any tails.

166
00:10:43,470 --> 00:10:47,034
We go back to the leftmost head, which is still

167
00:10:47,072 --> 00:10:50,774
food. Now we can bring it in because it's the head in both places,

168
00:10:50,822 --> 00:10:54,574
it's not appearing in any tails. Super good. New leftmost head

169
00:10:54,612 --> 00:10:58,218
is object. We can bring that in because it's ahead in both places.

170
00:10:58,394 --> 00:11:01,962
Superclass linearization of pizza sandwich is pizza sandwich

171
00:11:02,026 --> 00:11:05,380
sandwich, pizza food object. Cool.

172
00:11:05,990 --> 00:11:07,460
Now let's get crazy.

173
00:11:09,270 --> 00:11:12,914
Let's have a calzone pizza sandwich, which really needs

174
00:11:12,952 --> 00:11:13,860
to be a thing.

175
00:11:16,810 --> 00:11:20,114
So we start out with calzone pizza sandwich,

176
00:11:20,162 --> 00:11:24,162
and we're going to need to merge in the superclass linearizations for both calzone

177
00:11:24,226 --> 00:11:27,270
and pizza sandwich. Hang on to your hats.

178
00:11:27,690 --> 00:11:30,966
What are our heads here? We have calzone and we have pizza

179
00:11:30,998 --> 00:11:35,302
sandwich. Okay, so leftmost

180
00:11:35,366 --> 00:11:39,434
head, calzone. It's the only place that shows up. We can bring that in.

181
00:11:39,552 --> 00:11:42,846
The new head is pizza. Can't do that because it's in the

182
00:11:42,868 --> 00:11:46,266
tail of the linearization for pizza sandwich.

183
00:11:46,378 --> 00:11:49,646
Okay, so let's look at the next leftmost head.

184
00:11:49,828 --> 00:11:53,200
Well, that would be pizza sandwich. We can bring that in.

185
00:11:53,650 --> 00:11:56,430
Back to the beginning. Pizza.

186
00:11:56,590 --> 00:11:59,742
Still can't bring it in. How about sandwich?

187
00:11:59,886 --> 00:12:03,330
That's the head in the second list. Can't bring that in

188
00:12:03,400 --> 00:12:05,940
because it is in the tail of the first list.

189
00:12:06,470 --> 00:12:10,338
Now we're at an impasse because we can't bring in pizza

190
00:12:10,434 --> 00:12:15,014
and we can't bring in sandwich. And at this point the c

191
00:12:15,052 --> 00:12:18,554
three mro just blows up and we get type error. Cannot create

192
00:12:18,592 --> 00:12:22,726
a consistent method resolution. And this is why multiple inheritance

193
00:12:22,758 --> 00:12:26,790
scares everybody. But there's thankfully a fairly simple solution

194
00:12:26,870 --> 00:12:30,906
in this case. Remember how

195
00:12:30,928 --> 00:12:34,430
I said that the order of inheritance matters.

196
00:12:34,770 --> 00:12:38,266
Since we know that we need to be using our calzone

197
00:12:38,298 --> 00:12:41,994
and our pizza sandwich classes together, we can change the order that we inherit

198
00:12:42,042 --> 00:12:44,290
from on pizza sandwich.

199
00:12:45,350 --> 00:12:48,562
So instead of inheriting from sandwich and then

200
00:12:48,616 --> 00:12:51,874
pizza, we can inherit from pizza and

201
00:12:51,912 --> 00:12:55,686
then sandwich on the pizza sandwich class,

202
00:12:55,788 --> 00:12:59,686
just like we do with calzone. That is going to

203
00:12:59,788 --> 00:13:03,858
effectively swap these two classes in the linearization.

204
00:13:04,034 --> 00:13:07,590
So we have pizza and sandwich in both cases.

205
00:13:08,350 --> 00:13:11,820
Now this is going to work a lot smoother, so let's try it out.

206
00:13:12,750 --> 00:13:15,738
So check calzone first. We can bring that in.

207
00:13:15,824 --> 00:13:18,010
Great. New head.

208
00:13:18,160 --> 00:13:20,970
Pizza. Can't do that. Next.

209
00:13:21,120 --> 00:13:24,726
Pizza sandwich. Cool. Back to the beginning.

210
00:13:24,838 --> 00:13:28,160
Pizza head. In both places we can bring it in.

211
00:13:28,530 --> 00:13:32,640
Sandwich. Cool. And food and object.

212
00:13:32,950 --> 00:13:36,882
And booyah. So the

213
00:13:36,936 --> 00:13:40,926
superclass linearization for calzone pizza sandwich is now calzone,

214
00:13:40,958 --> 00:13:44,686
pizza sandwich, calzone pizza sandwich pizza

215
00:13:44,798 --> 00:13:47,300
sandwich, food, and object.

216
00:13:47,610 --> 00:13:51,094
Now, a little side note here is that if you're dealing with

217
00:13:51,132 --> 00:13:55,240
very complex multiple inheritance, you can't necessarily just go running around

218
00:13:55,610 --> 00:13:59,894
rearranging things hoping it's going to work. You're going to need to figure this out.

219
00:14:00,092 --> 00:14:03,498
There are some other patterns, which I'm not going to go in, where you can

220
00:14:03,584 --> 00:14:07,850
use another class that just inherits from other classes.

221
00:14:08,190 --> 00:14:11,450
It doesn't have any contents, and you can kind of use that to get around

222
00:14:11,520 --> 00:14:14,814
some problems with multiple inheritance. Raymond Hediger has a really good

223
00:14:14,852 --> 00:14:18,526
article on this called super, considered super. So check

224
00:14:18,548 --> 00:14:21,326
that out if you want to know more about some of this advanced stuff.

225
00:14:21,428 --> 00:14:24,580
But for most uses, this should do.

226
00:14:25,270 --> 00:14:29,122
Now another little note here is what

227
00:14:29,176 --> 00:14:32,740
if we want to explicitly call the eat

228
00:14:33,590 --> 00:14:36,934
method on, say, pizza instead of

229
00:14:36,972 --> 00:14:40,454
calling it on calzone? Well, we can

230
00:14:40,492 --> 00:14:43,826
do that like this. So on calzone pizza

231
00:14:43,858 --> 00:14:46,280
sandwich, I define an eat function,

232
00:14:47,370 --> 00:14:51,610
and the only line of code I need in my eat function is

233
00:14:51,760 --> 00:14:54,986
pizza eat, and then

234
00:14:55,008 --> 00:14:58,086
I pass the self argument explicitly. So I'm

235
00:14:58,118 --> 00:15:02,480
just calling the method I want on the class. I want it to come from

236
00:15:03,010 --> 00:15:07,070
class being something in that superclass linearization.

237
00:15:08,210 --> 00:15:12,222
And I have to pass self explicitly because of course the only time self

238
00:15:12,276 --> 00:15:15,646
is passed implicitly is if you're calling on an object. We're not calling on an

239
00:15:15,668 --> 00:15:18,914
object, we're calling on a class. So we have to pass self

240
00:15:19,032 --> 00:15:22,530
so that we know what instance the method is being called on.

241
00:15:22,680 --> 00:15:26,040
So we just call pizza, eat and pass self.

242
00:15:29,130 --> 00:15:30,870
So where is this even useful?

243
00:15:32,650 --> 00:15:35,906
Well, I think one major place where this can come in handy

244
00:15:35,938 --> 00:15:39,166
is this entire concept of mixins, which is applied

245
00:15:39,218 --> 00:15:43,046
multiple inheritance, and mixins are one of those things you really wind up missing

246
00:15:43,078 --> 00:15:46,794
when you leave Python and go into a no multiple inheritance type

247
00:15:46,832 --> 00:15:50,986
language. So let's consider a

248
00:15:51,008 --> 00:15:54,218
diner. A diner is kind of a neat

249
00:15:54,234 --> 00:15:56,958
place to hang out. You can order food.

250
00:15:57,124 --> 00:16:00,474
You can find coffee sitting in the percolator,

251
00:16:00,522 --> 00:16:03,310
probably hour old, so it's a bit stale. But hey,

252
00:16:03,460 --> 00:16:06,610
it's coffee. Coffee is coffee when you're desperate.

253
00:16:07,910 --> 00:16:11,678
And then you have a coffee shop. Coffee shop. You can get your fancy coffee.

254
00:16:11,774 --> 00:16:15,166
You can get your french press or your caramel macchiato.

255
00:16:15,198 --> 00:16:18,326
That's my thing. Or whatever you like. And they might

256
00:16:18,348 --> 00:16:21,622
have some food there too, but that's not their main gig. Their main thing is

257
00:16:21,676 --> 00:16:25,750
coffee. Now, you could say these are both classes.

258
00:16:26,890 --> 00:16:30,774
More importantly, they're classes that don't inherit from one another, because that doesn't make

259
00:16:30,812 --> 00:16:33,626
any sense. A coffee shop is not a type of diner, and a diner is

260
00:16:33,648 --> 00:16:36,842
not a type of type of coffee shop. Okay, they might

261
00:16:36,896 --> 00:16:40,394
both inherit from restaurant, but they're going to each have some

262
00:16:40,432 --> 00:16:43,580
functionality that is unique to them,

263
00:16:44,130 --> 00:16:47,598
and it doesn't really make sense to figure out where they're going

264
00:16:47,604 --> 00:16:51,086
to share functionality from that parent class. It doesn't make a

265
00:16:51,108 --> 00:16:54,654
lot of sense because of their differences. This is where mixins

266
00:16:54,702 --> 00:16:55,730
come in handy.

267
00:16:57,670 --> 00:17:01,314
So we might have a short order cook working at the diner. He's the one

268
00:17:01,352 --> 00:17:04,420
responsible for making all of that fancy food.

269
00:17:06,330 --> 00:17:10,214
Short order cook needs restaurant data to be able to

270
00:17:10,252 --> 00:17:13,302
work. A cook can't really cook without

271
00:17:13,356 --> 00:17:17,202
having access to the recipes. And of course, the customer orders

272
00:17:17,266 --> 00:17:20,986
and the special of the day, the stuff that the restaurant provides that he could

273
00:17:21,008 --> 00:17:24,598
not possibly know by himself. And the short order cook

274
00:17:24,614 --> 00:17:29,130
produces food for the restaurant.

275
00:17:29,470 --> 00:17:32,254
It really doesn't make a lot of sense to have a short order cook without

276
00:17:32,292 --> 00:17:35,966
a restaurant. But there

277
00:17:35,988 --> 00:17:38,670
he is, happily working in that restaurant.

278
00:17:39,170 --> 00:17:41,630
And then a coffee shop has a barista.

279
00:17:43,190 --> 00:17:45,634
The barista also needs restaurant data,

280
00:17:45,832 --> 00:17:48,590
recipes, customer orders, specials,

281
00:17:48,670 --> 00:17:52,430
same sort of deal. Once again, the barista produces drinks,

282
00:17:52,590 --> 00:17:56,162
but produces drinks specifically for the restaurant.

283
00:17:56,306 --> 00:17:58,918
And as with the short order cook, it doesn't make a lot of sense to

284
00:17:58,924 --> 00:18:02,854
have a barista that is completely separated from a

285
00:18:02,892 --> 00:18:05,430
coffee shop in some fashion.

286
00:18:07,450 --> 00:18:11,094
Now, maybe that coffee shop decides after a while they want to offer some

287
00:18:11,212 --> 00:18:14,682
breakfast food, and so they also hire a short

288
00:18:14,736 --> 00:18:18,186
order cook. And she can do a lot of the same stuff that the short

289
00:18:18,208 --> 00:18:21,482
order cook in the diner does, okay? Actually, she can do all of the same

290
00:18:21,536 --> 00:18:24,398
things that the cook in the diner can.

291
00:18:24,564 --> 00:18:27,646
And it would be helpful to be able

292
00:18:27,668 --> 00:18:31,466
to maintain one copy of the short order cook code shared

293
00:18:31,498 --> 00:18:35,250
between the two instances. This is why we have mixins.

294
00:18:36,870 --> 00:18:40,750
So a mix in is a class that contributes methods

295
00:18:40,830 --> 00:18:44,302
and or attributes, and it can rely on the attributes

296
00:18:44,366 --> 00:18:48,086
and methods of the class that's using the mix in the shorter to cook and

297
00:18:48,108 --> 00:18:52,166
rely on the orders of the customers. But a

298
00:18:52,188 --> 00:18:55,634
mix in is not intended to be to stand alone.

299
00:18:55,682 --> 00:18:59,362
In fact, in many cases you can't even instantiate

300
00:18:59,506 --> 00:19:02,826
a mix in by itself. It's just not intended to be

301
00:19:02,848 --> 00:19:06,860
used alone. It's only intended to be uses by another class.

302
00:19:07,390 --> 00:19:10,886
So youll could say that a mix in is technically a form of

303
00:19:10,928 --> 00:19:15,198
composition. It's just a form of composition that happens to use

304
00:19:15,364 --> 00:19:19,438
inheritance as the means of composing. And if that doesn't completely

305
00:19:19,524 --> 00:19:23,682
blow your mind, then you are a much more

306
00:19:23,736 --> 00:19:27,422
savvy code than I. So this is quite abstract.

307
00:19:27,486 --> 00:19:31,886
So let's do something real with this call. We let's

308
00:19:31,918 --> 00:19:33,700
do a little bit of live coding here.

309
00:19:35,370 --> 00:19:40,358
So I need to start

310
00:19:40,444 --> 00:19:44,454
with, I have my repository set up here, and this is just

311
00:19:44,572 --> 00:19:47,670
your standard repository set up source structure.

312
00:19:48,010 --> 00:19:50,518
Okay. And I'm going to create a new file in here and this is just

313
00:19:50,524 --> 00:19:53,702
going to be my main. Let's start with main. That can be helpful.

314
00:19:53,766 --> 00:19:57,420
So we know where we're going. Get this terminal out of the way for now

315
00:19:58,830 --> 00:20:01,200
and get this out of the way. All right,

316
00:20:02,610 --> 00:20:06,000
so let's just stick the whole shebang in here

317
00:20:07,170 --> 00:20:10,654
and then I'm going to use a library called

318
00:20:10,692 --> 00:20:14,030
click. If you haven't used click, it's really an easy way to

319
00:20:14,100 --> 00:20:17,090
write a command line interface. It's just going to save us a lot of time.

320
00:20:17,240 --> 00:20:21,010
Definitely check it out if you do anything on the command line with Python.

321
00:20:21,350 --> 00:20:25,250
So I'm going to wind up writing a restaurants

322
00:20:26,230 --> 00:20:30,006
class or restaurants module and

323
00:20:30,108 --> 00:20:33,078
it doesn't exist yet, but I'm just going to put it in here because I

324
00:20:33,084 --> 00:20:36,918
know it's going to and I'm going to have diner and a

325
00:20:36,924 --> 00:20:40,250
coffee shop as classes defined in restaurants.

326
00:20:41,310 --> 00:20:44,586
Let's set up a couple of commands. So I

327
00:20:44,608 --> 00:20:48,282
would like to be able to just

328
00:20:48,336 --> 00:20:51,600
have a command called coffee shop.

329
00:20:52,450 --> 00:20:55,680
And let's instantiate a coffee shop here.

330
00:20:58,050 --> 00:21:00,890
Java was one of my favorite coffee shops here in town.

331
00:21:00,970 --> 00:21:05,174
They unfortunately closed because of the pandemic, but they were lovely,

332
00:21:05,322 --> 00:21:07,380
had some really good french press.

333
00:21:08,630 --> 00:21:12,606
Okay, so in a coffee shop you're going to take the order and then you're

334
00:21:12,638 --> 00:21:16,146
going to deliver the orders. I'm obviously oversimplifying it,

335
00:21:16,328 --> 00:21:20,070
but it should work. We also

336
00:21:20,140 --> 00:21:23,286
need a diner, same sort of

337
00:21:23,308 --> 00:21:24,200
deal here.

338
00:21:27,050 --> 00:21:30,234
So I have the owl cafe, which is the other

339
00:21:30,352 --> 00:21:36,746
place I used to hang out, also closed. Now I

340
00:21:36,768 --> 00:21:39,802
don't have any hangouts now. I'm very sad. Okay,

341
00:21:39,856 --> 00:21:44,366
so in a diner as well, you take the order and

342
00:21:44,468 --> 00:21:50,506
then let's just print a new line here and then deliver

343
00:21:50,538 --> 00:21:52,160
the orders. Okay,

344
00:21:53,990 --> 00:21:56,914
so I'm not going to explain this part much. If you want to know what

345
00:21:56,952 --> 00:22:01,346
I'm doing here with click, you can just look

346
00:22:01,368 --> 00:22:05,450
it up on their documentation.

347
00:22:05,630 --> 00:22:15,282
Pretty easy to use. Add these commands in here's.

348
00:22:15,426 --> 00:22:16,120
Okay.

349
00:22:20,350 --> 00:22:22,490
And then your usual invocation.

350
00:22:23,710 --> 00:22:27,706
Okay, nothing surprising there. But the

351
00:22:27,728 --> 00:22:31,614
basic idea is that we need to have two different classes here and they can

352
00:22:31,652 --> 00:22:34,190
both take orders and then deliver orders.

353
00:22:34,610 --> 00:22:36,590
Okay, that's pretty straightforward.

354
00:22:38,210 --> 00:22:42,590
So let's make that restaurants file

355
00:22:46,770 --> 00:22:47,520
do.

356
00:22:49,990 --> 00:22:54,254
All right, so I'm

357
00:22:54,302 --> 00:22:56,998
going to, I'll do that a bit.

358
00:22:57,084 --> 00:23:00,422
Let's start by actually writing this out.

359
00:23:00,476 --> 00:23:04,600
So have a diner here and

360
00:23:09,390 --> 00:23:13,350
we need to initialize it with the name of the establishment,

361
00:23:13,430 --> 00:23:16,970
whatever that happens to be. And I

362
00:23:17,040 --> 00:23:21,310
want to have a default dictionary,

363
00:23:21,810 --> 00:23:25,822
basically just a dictionary of orders. So using the name

364
00:23:25,876 --> 00:23:29,262
of the customer as the key and then a

365
00:23:29,316 --> 00:23:33,282
list of orders. I'm using a default dict here so

366
00:23:33,336 --> 00:23:36,702
that if the customer is not already in the dictionary,

367
00:23:36,766 --> 00:23:40,674
then we can just append anyway. And it's going to start

368
00:23:40,712 --> 00:23:44,834
us out with an empty dictionary or

369
00:23:44,872 --> 00:23:47,942
an empty list. Okay,

370
00:23:47,996 --> 00:23:51,506
so we saw that we have two methods

371
00:23:51,538 --> 00:23:55,058
here that we need. So first we're

372
00:23:55,074 --> 00:23:56,230
going to greet,

373
00:24:00,030 --> 00:24:03,398
get that out of my way. So we're

374
00:24:03,414 --> 00:24:07,420
going to greet the customer and then

375
00:24:10,290 --> 00:24:14,910
call lock it turned on. And then we're going to accept some input,

376
00:24:17,810 --> 00:24:21,200
namely the customer's name. This is what we'll use for storing the order.

377
00:24:23,270 --> 00:24:26,834
And then if

378
00:24:26,872 --> 00:24:29,874
anyone wants to say, hey, he's being stereotypical. No,

379
00:24:29,992 --> 00:24:33,380
the waitress at the owl cafe was very much

380
00:24:33,750 --> 00:24:37,654
what you find into the movies. So she

381
00:24:37,692 --> 00:24:39,030
was fantastic.

382
00:24:40,810 --> 00:24:43,954
And then of course, the important question, do you want coffee?

383
00:24:44,082 --> 00:24:47,814
Which my answer is always, yes. But as you know, in a

384
00:24:47,852 --> 00:24:52,086
coffee shop you can get anything you like, but in a diner

385
00:24:52,278 --> 00:24:55,722
you just get the one thing you can't get, the fancy stuff.

386
00:24:55,776 --> 00:25:00,454
If you ask for a cappuccino or caramel macchiato

387
00:25:00,502 --> 00:25:03,666
or what have you, they're just going to kind of give youll a blink,

388
00:25:03,718 --> 00:25:07,630
look and pour the stuff out of the pod that

389
00:25:07,700 --> 00:25:11,166
they have now they can do the cooking and that's great. They'll do

390
00:25:11,188 --> 00:25:15,058
some awesome food, but they're not going to handle anything

391
00:25:15,144 --> 00:25:16,610
complicated with the coffee.

392
00:25:18,550 --> 00:25:22,020
Okay. And then we have our delivers order, deliver orders here.

393
00:25:26,330 --> 00:25:29,880
So for each of the items in self dot ready.

394
00:25:31,130 --> 00:25:33,560
So all of the stuff that's ready,

395
00:25:34,890 --> 00:25:38,940
I'll just call out here, here's your

396
00:25:40,190 --> 00:25:43,450
order. Let's just put that in lowercase order,

397
00:25:43,520 --> 00:25:46,540
lower name. Okay,

398
00:25:46,990 --> 00:25:50,522
so there's that. So we're going to take the order

399
00:25:50,576 --> 00:25:53,674
from the customer and we're going to deliver the orders. Now, you note I used

400
00:25:53,712 --> 00:25:57,246
a couple of functions I haven't defined yet. I have this brew function for the

401
00:25:57,268 --> 00:26:00,894
coffee and I have this cook function and I'm going to

402
00:26:00,932 --> 00:26:04,494
come back around to those. So I want to get these classes written

403
00:26:04,542 --> 00:26:08,194
first. So now let's write

404
00:26:08,232 --> 00:26:10,610
the coffee shop and see what difference is emerging.

405
00:26:13,350 --> 00:26:16,120
I don't need an empty list. What's wrong with me? Okay,

406
00:26:17,610 --> 00:26:21,654
so I have my coffee shop here and

407
00:26:21,692 --> 00:26:24,998
I have my initializer. Actually, I'm going

408
00:26:25,004 --> 00:26:29,098
to go ahead and just steal this initializer because this one is exactly

409
00:26:29,184 --> 00:26:29,980
the same.

410
00:26:34,510 --> 00:26:37,322
And I know I could have created a restaurant class, but I'm trying to save

411
00:26:37,376 --> 00:26:38,220
time here.

412
00:26:40,770 --> 00:26:44,910
Actually, we use the same welcome

413
00:26:44,980 --> 00:26:47,710
statement, too. So we have a little more typing.

414
00:26:49,730 --> 00:26:58,240
So now we need to get the name of the customer as before it

415
00:26:59,490 --> 00:27:03,022
call. Right. And then a coffee shop,

416
00:27:03,076 --> 00:27:09,878
unlike a diner, is going to want to know, know what

417
00:27:09,964 --> 00:27:13,318
drink you want first. That's the first thing they're going to want to

418
00:27:13,324 --> 00:27:17,974
know. And then they'll ask you about what

419
00:27:18,012 --> 00:27:22,042
you want to eat. Now, yes, I know this user interfaces aren't really very

420
00:27:22,096 --> 00:27:25,526
well thought, but because you can't brew scrambled eggs,

421
00:27:25,558 --> 00:27:28,380
well, you can, but it's going to be a right royal mess.

422
00:27:30,450 --> 00:27:33,360
But I think you can forgive the terrible example. Okay,

423
00:27:35,810 --> 00:27:38,942
so we're going to brew the coffee and

424
00:27:38,996 --> 00:27:41,520
we're going to cook the food.

425
00:27:43,510 --> 00:27:47,422
All right. Now I'm going to deliver

426
00:27:47,486 --> 00:27:51,266
the orders and actually

427
00:27:51,368 --> 00:27:54,580
I can hijack this part as well again,

428
00:27:55,930 --> 00:27:59,640
because that's not changing. And then

429
00:28:00,410 --> 00:28:03,320
they do deliver them a little differently in the coffee shop.

430
00:28:05,690 --> 00:28:09,142
They just kind of yell your name out for

431
00:28:09,196 --> 00:28:12,826
the entire world to hear, which is especially amusing when they get

432
00:28:12,848 --> 00:28:16,214
it wrong. I am one of those people that has a prosaically easy to pronounce

433
00:28:16,262 --> 00:28:20,202
name, at least in many english speaking

434
00:28:20,256 --> 00:28:24,010
countries, but I really feel for my friend Bojan.

435
00:28:24,770 --> 00:28:30,094
Okay, so we

436
00:28:30,132 --> 00:28:34,094
take the order, deliver the orders pretty straightforward. But once again, we're using this

437
00:28:34,132 --> 00:28:37,410
brew and cook methods. So where are these going to come from?

438
00:28:37,560 --> 00:28:41,540
Well, this is where we're going to get into these mix ins here.

439
00:28:42,390 --> 00:28:46,098
So I am going to create a couple of mix ins and

440
00:28:46,184 --> 00:28:48,610
I'm going to create them first and then I'm going to come back and modify

441
00:28:48,690 --> 00:28:52,306
this. So I'll

442
00:28:52,338 --> 00:28:55,734
just create a file called mixins Py. I could call it whatever I want.

443
00:28:55,772 --> 00:28:59,020
Actually, I suddenly changed my mind. I'm going to call it

444
00:28:59,710 --> 00:29:01,370
employees Py.

445
00:29:03,070 --> 00:29:06,726
Okay. Now, typically in python,

446
00:29:06,758 --> 00:29:10,154
we're going to append the word mix in to the name of our class just

447
00:29:10,192 --> 00:29:13,678
to make sure that we know that, okay, this is not a

448
00:29:13,684 --> 00:29:16,894
normal class. You can't just instantiate this. You also

449
00:29:17,012 --> 00:29:20,666
should get in the habit of. You should be documenting

450
00:29:20,698 --> 00:29:24,640
everything, really, but especially mix ins

451
00:29:25,350 --> 00:29:29,250
because it's both going to provide methods and

452
00:29:29,320 --> 00:29:31,170
attributes potentially,

453
00:29:34,390 --> 00:29:36,710
but it also has expectations.

454
00:29:38,650 --> 00:29:39,800
In this case,

455
00:29:52,830 --> 00:29:56,582
we need a self dot ready attribute, which is a dictionary

456
00:29:56,646 --> 00:30:00,070
of key is a string and then

457
00:30:00,080 --> 00:30:03,930
it's a list of strings for the values.

458
00:30:04,090 --> 00:30:07,454
So that is really helpful to document right

459
00:30:07,492 --> 00:30:11,274
up front. So get in the habit of documenting your mix

460
00:30:11,322 --> 00:30:14,660
ins. Document everything, really. Okay,

461
00:30:39,310 --> 00:30:42,940
so we're going to cook the order and then

462
00:30:43,630 --> 00:30:48,026
I'm going to do self ready key

463
00:30:48,128 --> 00:30:52,320
customer, and I'm going to append the order. Now, of course,

464
00:30:55,010 --> 00:30:58,462
my pylance is really not happy with me here

465
00:30:58,516 --> 00:31:01,440
because ready doesn't exist on this class.

466
00:31:01,890 --> 00:31:05,886
And I'm going to tell Pylance basically to eat rocks

467
00:31:05,918 --> 00:31:09,906
because in this case, no, the mix is not going to provide

468
00:31:10,008 --> 00:31:13,060
self ready. That is, again, coming from over here.

469
00:31:14,390 --> 00:31:17,640
So it doesn't have to have it here.

470
00:31:18,010 --> 00:31:21,606
Now, I also need to have a brew function because you can get that

471
00:31:21,708 --> 00:31:24,550
coffee in your diner.

472
00:31:25,930 --> 00:31:29,740
And I'm going to just borrow this again.

473
00:31:31,230 --> 00:31:34,838
So if they want that, just going to pour

474
00:31:35,014 --> 00:31:38,540
drip coffee for store,

475
00:31:39,890 --> 00:31:43,470
nothing fancy. And it doesn't matter

476
00:31:43,540 --> 00:31:47,102
what you put into this. I would like a

477
00:31:47,236 --> 00:31:50,926
tall decaf cappuccino. That's not going to

478
00:31:50,948 --> 00:31:55,950
make a lick of difference. You are still just going to get coffee.

479
00:31:56,470 --> 00:31:57,780
Nothing to it.

480
00:32:00,470 --> 00:32:04,338
Okay, so there's our short order to cook mix in. Now, how do

481
00:32:04,344 --> 00:32:07,846
we use this? Well, over in restaurants we are going

482
00:32:07,868 --> 00:32:13,670
to inherit and

483
00:32:13,740 --> 00:32:16,710
you'll see that I'm importing it from restaurant employees.

484
00:32:17,290 --> 00:32:20,790
So I have my mix in here. I inherit.

485
00:32:20,870 --> 00:32:24,614
But remember, this is composition, technically not inheritance,

486
00:32:24,662 --> 00:32:28,794
because a diner is not a type of short order cook. It has

487
00:32:28,912 --> 00:32:32,474
a short order cook. So that's the one wrinkle with mixins

488
00:32:32,522 --> 00:32:36,206
you kind of have to get in your head. So your diner has

489
00:32:36,228 --> 00:32:40,446
your sort of our cook. Now let's jump back over to employees here

490
00:32:40,628 --> 00:32:47,134
and let's set up our barista mix

491
00:32:47,182 --> 00:32:49,380
in. Same sort of thing here.

492
00:32:53,670 --> 00:32:57,490
Now, we're only providing the brew method with barista,

493
00:32:58,090 --> 00:33:00,600
and I'm going to borrow this again.

494
00:33:02,090 --> 00:33:06,034
Same sort of expectation has to have a self dot ready attribute

495
00:33:06,082 --> 00:33:11,194
on the class using it. So same

496
00:33:11,232 --> 00:33:15,178
call signature and

497
00:33:15,264 --> 00:33:18,940
the same logic for not

498
00:33:19,310 --> 00:33:24,682
doing anything. Then we need to actually brew

499
00:33:24,746 --> 00:33:29,294
the particular order for

500
00:33:29,332 --> 00:33:33,380
the customer and we're going to

501
00:33:35,110 --> 00:33:37,540
append the order.

502
00:33:40,870 --> 00:33:44,546
Now, the type ignore obviously won't work. If you're using flake gate, youll have

503
00:33:44,568 --> 00:33:48,550
to use a different suppression comment for that. Just a note.

504
00:33:48,970 --> 00:33:52,434
All right, so now we have our brew

505
00:33:52,482 --> 00:33:56,146
method for barista mix in. So I'm going to go over here to the coffee

506
00:33:56,178 --> 00:34:02,234
shop, and we're going to incorporate the barista mix in and

507
00:34:02,272 --> 00:34:04,970
make sure I import that here.

508
00:34:05,120 --> 00:34:08,506
Now, we're most of the way there, but there's one problem

509
00:34:08,608 --> 00:34:12,106
still, and that is we have no cook method.

510
00:34:12,298 --> 00:34:15,598
And. Oh, that's right. We need to have that short

511
00:34:15,684 --> 00:34:19,760
order cook. So let's put a short order

512
00:34:21,650 --> 00:34:23,380
cook mix in.

513
00:34:24,790 --> 00:34:28,450
Let's put her in there. So we now have a shorter to cook.

514
00:34:29,190 --> 00:34:32,834
Excellent. Okay, so this should work

515
00:34:32,952 --> 00:34:36,310
if all is typed correctly,

516
00:34:37,690 --> 00:34:40,902
big old scary should work thing. Okay,

517
00:34:40,956 --> 00:34:44,086
I don't see any errors from pylance, so let me

518
00:34:44,108 --> 00:34:47,334
just go into my virtual environment here. And because

519
00:34:47,372 --> 00:34:50,906
I have my setup py done, I can just

520
00:34:51,008 --> 00:34:54,454
install this as an editable

521
00:34:54,582 --> 00:34:57,660
in my virtual environment, which I already have activated here.

522
00:34:58,350 --> 00:35:02,030
Just give that a moment and

523
00:35:02,100 --> 00:35:04,880
it might have to reinstall. Click.

524
00:35:06,290 --> 00:35:10,026
Okay, there we go. So we have restaurant. So I can just invoke restaurant directly

525
00:35:10,058 --> 00:35:14,206
here. And I am going to start by calling

526
00:35:14,308 --> 00:35:17,586
diner. Okay. Welcome to the owl cafe. What's your name?

527
00:35:17,608 --> 00:35:20,802
Jason. What would you like, honey? You know what?

528
00:35:20,856 --> 00:35:24,210
I really like their hash browns. Okay. You want coffee?

529
00:35:25,670 --> 00:35:29,314
Yes. Okay, so here's your coffee and my hash browns.

530
00:35:29,362 --> 00:35:33,014
Now, if I do that again and

531
00:35:33,052 --> 00:35:36,486
I try to do my cappuccino, I'm still going to just

532
00:35:36,508 --> 00:35:39,586
get coffee and note I get the coffee first, and then I get the hash

533
00:35:39,618 --> 00:35:43,078
browns. So that works exactly as I expected

534
00:35:43,094 --> 00:35:46,922
for a diner. Now let's go over to the coffee shop. What's your name?

535
00:35:46,976 --> 00:35:49,900
My name is Jason. What can I get started for youll?

536
00:35:50,590 --> 00:35:53,930
I really want that cappuccino still, I think. And anything to

537
00:35:54,000 --> 00:35:56,960
know. Let's see how your hash browns taste, shall we? Okay.

538
00:35:57,570 --> 00:36:01,054
Well, hey, where's my cappuccino? That's not

539
00:36:01,092 --> 00:36:04,090
right. I just got normal coffee. What's going on?

540
00:36:04,260 --> 00:36:07,890
Well, remember our method resolution order.

541
00:36:08,040 --> 00:36:11,346
If we go over here to restaurants and we look

542
00:36:11,368 --> 00:36:14,766
at coffee shop we have short order cook mix in and barista mix

543
00:36:14,798 --> 00:36:18,774
in. What does that mean for our method resolution order?

544
00:36:18,972 --> 00:36:22,758
We start with the coffee shop and then we look

545
00:36:22,844 --> 00:36:26,310
left to right. Okay, so short order cook

546
00:36:27,390 --> 00:36:32,086
mix in followed by the barista mix in followed

547
00:36:32,118 --> 00:36:35,260
by object, because they don't really inherit from anything.

548
00:36:35,870 --> 00:36:39,180
Okay, well, crud, there's our problem.

549
00:36:39,550 --> 00:36:42,758
So when we call this brew method, it's going to

550
00:36:42,784 --> 00:36:46,398
go through this in order. Does it find it on coffee shop?

551
00:36:46,484 --> 00:36:50,254
No. So how about on short order cook mix in? Yes, as a

552
00:36:50,292 --> 00:36:53,746
matter of fact, it's right here. And this

553
00:36:53,768 --> 00:36:57,314
is why we're only getting coffee. So there's two ways to fix this

554
00:36:57,352 --> 00:37:01,634
problem. First way is

555
00:37:01,752 --> 00:37:05,602
to reverse the order of inheritance, which would

556
00:37:05,656 --> 00:37:09,074
work with just basic simple mixins. Just change the order of inheritance,

557
00:37:09,122 --> 00:37:12,658
barista first, followed by the short order cook. That should be fine, because barista

558
00:37:12,674 --> 00:37:14,630
does not define a cook method.

559
00:37:15,370 --> 00:37:18,902
So if we call for brew, then it's going to go through

560
00:37:18,956 --> 00:37:22,394
here and it's going to find brew there and then it's going to look

561
00:37:22,432 --> 00:37:25,734
for cook and it's going to find it there. So that's

562
00:37:25,782 --> 00:37:28,620
good. That should be fine. Let's try that out.

563
00:37:30,910 --> 00:37:34,670
I still want that cappuccino. Thank you. And hash browns.

564
00:37:35,250 --> 00:37:38,686
Now I get my cappuccino. So that is

565
00:37:38,708 --> 00:37:42,320
the solution there. But what if you're dealing with a more complicated situation?

566
00:37:45,090 --> 00:37:48,626
Perhaps you can't change that order of inheritance. Maybe you

567
00:37:48,648 --> 00:37:51,566
need that just to be able to get that consistent method,

568
00:37:51,598 --> 00:37:54,786
resolution order. You keep getting that error message. We talked,

569
00:37:54,808 --> 00:37:59,254
but earlier then in that case, the solution is

570
00:37:59,292 --> 00:38:03,126
to explicitly call brew on the

571
00:38:03,148 --> 00:38:07,174
method that we want or

572
00:38:07,212 --> 00:38:11,366
on the class that we want. So we have our brew method here in coffee

573
00:38:11,398 --> 00:38:15,850
shop and I'm just going to call baristamixin

574
00:38:16,190 --> 00:38:19,850
brew. I have to pass self explicitly because I'm calling on a class,

575
00:38:19,920 --> 00:38:23,502
not on an instance. And then I pass

576
00:38:23,556 --> 00:38:27,146
an order and customer. Now it's

577
00:38:27,178 --> 00:38:30,414
not going to matter as much. I can put in my name,

578
00:38:30,532 --> 00:38:34,146
I can ask for my cappuccino and I

579
00:38:34,168 --> 00:38:38,098
can get my hash browns. And it still works, even though

580
00:38:38,184 --> 00:38:42,334
short order cook mix in comes first. Why? It's because method

581
00:38:42,382 --> 00:38:45,590
resolution order, we look for brew under coffee shop

582
00:38:45,660 --> 00:38:48,200
first and we find it.

583
00:38:48,810 --> 00:38:52,182
This is called, and it explicitly calls brew on

584
00:38:52,236 --> 00:38:55,942
barista mix in. So we never even reach short order

585
00:38:55,996 --> 00:38:59,954
cook mix in on the method resolution

586
00:39:00,002 --> 00:39:03,914
order. We stop short here and explicitly call what we want.

587
00:39:04,112 --> 00:39:07,786
So that's a very basic idea of what you can do with mixins. And there

588
00:39:07,808 --> 00:39:10,614
are a lot more things you can do with them, they can be very powerful

589
00:39:10,662 --> 00:39:14,746
tool, obviously, as with anything disclaimer

590
00:39:14,858 --> 00:39:18,318
not everything that looks like just because you have

591
00:39:18,324 --> 00:39:21,598
a hammer does not mean everything is a nail. Not everything that looks like a

592
00:39:21,604 --> 00:39:24,994
nail is a nail. So make sure you consider if you

593
00:39:25,032 --> 00:39:28,786
have other options first, because mixins can

594
00:39:28,808 --> 00:39:32,766
also complicate things. Another side note is multiple inheritance

595
00:39:32,798 --> 00:39:36,360
and abstract based classes get really kind of interesting.

596
00:39:37,290 --> 00:39:41,238
So do be aware of that if you're kind of in some

597
00:39:41,244 --> 00:39:44,710
of the more complicated territory, especially if you touch metaclasses with a

598
00:39:44,780 --> 00:39:48,114
50 foot pole. But besides

599
00:39:48,162 --> 00:39:51,538
that, if you have functionality that makes the most

600
00:39:51,564 --> 00:39:54,746
sense as a class, like a short order cook, like a barista, and you want

601
00:39:54,768 --> 00:39:58,086
to be able to share that between multiple classes,

602
00:39:58,278 --> 00:40:01,822
then a mix in can be a really great way of accomplishing that

603
00:40:01,876 --> 00:40:07,422
goal. So that

604
00:40:07,476 --> 00:40:10,640
is whose method it is anyway.

605
00:40:11,090 --> 00:40:15,166
So if you want more of more

606
00:40:15,188 --> 00:40:18,846
content like this, youll can check me out at codemouse 92. Com. You can also

607
00:40:18,868 --> 00:40:22,126
find me all around the Internet as codemouse 92. It's my

608
00:40:22,148 --> 00:40:25,766
ubiquitous username I post, but on Twitter I

609
00:40:25,788 --> 00:40:29,138
can also be found on the dev community and on Freenote IRC.

610
00:40:29,234 --> 00:40:32,774
And of course keep your eyes open for dead simple python coming out hopefully later

611
00:40:32,812 --> 00:40:36,822
this year from Nostarch press. Definitely will be out

612
00:40:36,876 --> 00:40:40,406
before we get

613
00:40:40,428 --> 00:40:44,280
too far into 2022, so keep your eyes out for that.

614
00:40:44,650 --> 00:40:46,820
And thank you very much for watching.

