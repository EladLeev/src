1
00:00:22,970 --> 00:00:26,554
Hey folks, welcome here. Thanks for joining this session.

2
00:00:26,682 --> 00:00:30,550
Today we will learn something about react node js and

3
00:00:30,620 --> 00:00:34,354
how we can create effective videos using just react.

4
00:00:34,482 --> 00:00:38,038
The first time I heard someone saying, hey, you know you can create a

5
00:00:38,044 --> 00:00:41,434
video with react, my reaction was like, what is

6
00:00:41,472 --> 00:00:45,050
this useful? Shall I use? It doesn't make

7
00:00:45,120 --> 00:00:48,202
any sense to me. But today we will

8
00:00:48,256 --> 00:00:52,042
actually see how we can create videos programmatically using

9
00:00:52,096 --> 00:00:55,446
react. As a bonus, we will see how to create a scalable

10
00:00:55,558 --> 00:00:58,686
cloud based rendering farm as well. Before we dive into

11
00:00:58,708 --> 00:01:02,026
the actual content, just a couple of words about me. I'm Alfonso.

12
00:01:02,058 --> 00:01:05,454
I'm a senior developer at Nearform. If youve want, just send

13
00:01:05,492 --> 00:01:09,326
me a connection on LinkedIn. I'm always more than happy to be connected

14
00:01:09,358 --> 00:01:12,638
with interesting people. Let's get started from the ground.

15
00:01:12,734 --> 00:01:15,982
What is a video? We can see a video like a sequence

16
00:01:16,046 --> 00:01:20,034
of images over time, usually third images or 6th images,

17
00:01:20,082 --> 00:01:23,446
really, depending on your video. And then of course we

18
00:01:23,468 --> 00:01:26,934
also have audio tracks. Let's ask ourselves for one

19
00:01:26,972 --> 00:01:30,694
moment, as a developer, am I able to

20
00:01:30,732 --> 00:01:34,586
create an image maybe by doing the screenshot of a

21
00:01:34,608 --> 00:01:38,362
viewport in HTML and make, I don't know, 30 or

22
00:01:38,416 --> 00:01:41,686
60 screenshots per second, while the viewport

23
00:01:41,718 --> 00:01:45,162
is performing some action, like running transitions or

24
00:01:45,216 --> 00:01:49,114
playing a video. In that case, we obtain, for example, 30 images

25
00:01:49,162 --> 00:01:52,590
per second. We just need to find a way to stitch them together,

26
00:01:52,740 --> 00:01:56,706
add an audio on top, and we created our first video. So this

27
00:01:56,728 --> 00:02:00,690
is what we will see today. Usually editing tools are

28
00:02:00,840 --> 00:02:05,410
really complex, really complicated. They have tones of features.

29
00:02:05,750 --> 00:02:09,634
You can do virtually everything with those tools. But today we will do

30
00:02:09,672 --> 00:02:13,602
something way, way simpler. The main tool that we will use is remotion.

31
00:02:13,666 --> 00:02:17,346
Remotion is a react library to make videos programmatically.

32
00:02:17,458 --> 00:02:20,678
When you download remotion, you have a lot of tools. First of

33
00:02:20,684 --> 00:02:24,526
all, you have the remotion library, which expose a few abstractions

34
00:02:24,578 --> 00:02:28,214
that you can use to create your video. Then you have the remotion player,

35
00:02:28,262 --> 00:02:31,594
which is such a cool components because this means that

36
00:02:31,712 --> 00:02:35,406
thanks to this player, we can preview our video live

37
00:02:35,508 --> 00:02:38,734
without the need to render the video. So for

38
00:02:38,772 --> 00:02:42,046
example, we create an animation based on

39
00:02:42,068 --> 00:02:46,110
the color of something, and then we can preview the actual result without

40
00:02:46,180 --> 00:02:49,438
rendering to the user. Then we will also see remote Lambda.

41
00:02:49,454 --> 00:02:53,186
If you're not familiar with lambda, that's not a problem. Lambda is just a

42
00:02:53,208 --> 00:02:56,626
function as a service from AWS. This means that you

43
00:02:56,648 --> 00:03:00,306
can run your functions on the cloud and they will take care of all

44
00:03:00,328 --> 00:03:04,246
the server stuff. How does remotion work under the hood? First of all, we create

45
00:03:04,348 --> 00:03:08,246
our react code. So we create our video with code and we will

46
00:03:08,268 --> 00:03:11,922
see it in a few minutes. Then we use puppeteer

47
00:03:11,986 --> 00:03:15,674
to make screenshots of the viewports. And then we connect all

48
00:03:15,712 --> 00:03:19,322
those images using Ffmpeg and we attach the Audi as well.

49
00:03:19,376 --> 00:03:23,290
What are potential use cases for this tool? First of all, parameterized videos

50
00:03:23,360 --> 00:03:26,798
and we will see it soon. This means that we can have

51
00:03:26,884 --> 00:03:30,766
the same video and we just need to change a few parameters and the

52
00:03:30,788 --> 00:03:34,638
output will change. Then automated video workflows. Let's say that

53
00:03:34,724 --> 00:03:38,126
when we run a GitHub action or when something happens,

54
00:03:38,308 --> 00:03:41,342
we want to create our video based on some parameters

55
00:03:41,406 --> 00:03:45,186
that we pass and we send it on slack through email, we upload it

56
00:03:45,208 --> 00:03:48,850
on YouTube. We can do everything we want. Last but not least,

57
00:03:48,920 --> 00:03:52,374
cloud based videos. Sas, you can create your own tool to

58
00:03:52,412 --> 00:03:56,694
trim videos, adding subtitles. You can visually do

59
00:03:56,812 --> 00:04:00,678
everything with videos thanks to remotion. And then of course you

60
00:04:00,684 --> 00:04:04,202
can offer the tool you created on top of remotion to customers.

61
00:04:04,336 --> 00:04:08,246
Let's now see a quick example of what we can achieve using remotion.

62
00:04:08,358 --> 00:04:12,202
As you can see here we have a video, then we have

63
00:04:12,256 --> 00:04:16,030
this image, then we have this text. Everything is

64
00:04:16,100 --> 00:04:20,426
animated. We have this images slideshow

65
00:04:20,618 --> 00:04:24,106
of course also the images are animated as well. Now you cannot

66
00:04:24,138 --> 00:04:27,614
hear it, but there is this happy birthday song in

67
00:04:27,652 --> 00:04:31,346
the background. Then we have this text and then we have this

68
00:04:31,368 --> 00:04:34,754
fade effect. Of course this was a really simple example, but we can

69
00:04:34,792 --> 00:04:38,734
create videos as complex as we want. And here we have the source

70
00:04:38,782 --> 00:04:42,246
code of our video. If we analyze this source code and we will do

71
00:04:42,268 --> 00:04:46,290
it in a bit, we can see that it is just a simple JavaScript

72
00:04:46,370 --> 00:04:49,494
object. We have the base settings of our project,

73
00:04:49,612 --> 00:04:53,146
like the FPS, the name. Then we have

74
00:04:53,168 --> 00:04:57,270
the timeline. If you're familiar with tools like Davinci Resolve

75
00:04:57,350 --> 00:05:00,650
or Adobe Premiere Pro, you are probably used

76
00:05:00,720 --> 00:05:04,954
to the concept of the timeline. Then inside the timeline you can have multiple

77
00:05:05,002 --> 00:05:09,070
tracks, usually video tracks and audio tracks. Youve can have

78
00:05:09,140 --> 00:05:12,238
multiple video tracks and multiple audio tracks, and inside

79
00:05:12,324 --> 00:05:16,238
each track you can add multiple assets and this is exactly

80
00:05:16,324 --> 00:05:19,790
what we are doing here. Remotion as a tool is really quickly

81
00:05:19,860 --> 00:05:23,202
evolving and it is production ready. So if you want to start using

82
00:05:23,256 --> 00:05:26,738
it, you can just run NPM init video, you can take a

83
00:05:26,744 --> 00:05:29,506
look at the documentation and I promise you that you will have a lot of

84
00:05:29,528 --> 00:05:33,158
fun. Of course we can choose if we want to use remotion itself, or if

85
00:05:33,164 --> 00:05:36,886
we want to create another abstraction on top of remotion and that's what we will

86
00:05:36,908 --> 00:05:40,102
see today. In this schema we have a video

87
00:05:40,156 --> 00:05:43,778
editor tool that we can build, but it is out of scope.

88
00:05:43,954 --> 00:05:47,226
Then this video editing tool will create a

89
00:05:47,248 --> 00:05:51,114
JSON video description. In this case it was a JavaScript object, but we can

90
00:05:51,152 --> 00:05:54,918
use a simple JSON file. Then we will pass this JSON description

91
00:05:55,014 --> 00:05:58,666
to the render engine based on remotion, and as output we will

92
00:05:58,688 --> 00:06:02,110
get a video. All right, so it's time to code. Let's build our

93
00:06:02,180 --> 00:06:05,582
first render engine. If you are interested, by following this link

94
00:06:05,636 --> 00:06:09,090
here, you can clone the project and play with it. We are on vs code.

95
00:06:09,160 --> 00:06:13,074
I already started the project using NPM start and

96
00:06:13,112 --> 00:06:17,154
this started remotion studio. Before we look at the code, I want to spend just

97
00:06:17,192 --> 00:06:20,610
a couple of seconds on remotion studio because I think that is

98
00:06:20,680 --> 00:06:23,862
such a useful tool when youve work with remotion. We say that

99
00:06:23,916 --> 00:06:27,590
working with remotion means writing code to create our video.

100
00:06:27,660 --> 00:06:31,430
How can we know if our code will produce the video that we want?

101
00:06:31,500 --> 00:06:35,326
For this reason, remotion created Remotion Studio inside Remotion Studio

102
00:06:35,378 --> 00:06:38,522
you have this timeline and you can see your video.

103
00:06:38,576 --> 00:06:42,486
You can see the preview of your video. Then you can see all your compositions.

104
00:06:42,518 --> 00:06:46,214
In this case we have just one composition, and we will see what a composition

105
00:06:46,262 --> 00:06:49,886
is in a few moments. Then we have the props that we

106
00:06:49,908 --> 00:06:53,070
will see as well. And we can also render our video

107
00:06:53,140 --> 00:06:57,162
inside remotion. So we just need to click this render button. We can customize

108
00:06:57,226 --> 00:07:00,962
the render settings and when we are happy with the result, we will click on

109
00:07:01,016 --> 00:07:04,322
render videos, but back to the code. Let's see how our

110
00:07:04,376 --> 00:07:08,114
render engine works. It is actually really simple. When we start

111
00:07:08,152 --> 00:07:11,546
inside the root of the project, we can see the composition. The composition

112
00:07:11,598 --> 00:07:15,254
is one of the remotion abstractions. It represents the video that

113
00:07:15,292 --> 00:07:19,218
want to create. Inside the composition youve will put all the sequences,

114
00:07:19,314 --> 00:07:22,550
all the assets, and then from here you can render your video

115
00:07:22,620 --> 00:07:26,714
to the composition. We have to pass a components, a schema if we

116
00:07:26,752 --> 00:07:30,230
want, and some default props. Let's see the component.

117
00:07:30,310 --> 00:07:34,106
This is the timeline component that I created in this case. And as you

118
00:07:34,128 --> 00:07:37,594
can see, we have one main sequence. We can have multiple sequences.

119
00:07:37,642 --> 00:07:41,406
Of course, we are looping through the video tracks because we said before that.

120
00:07:41,508 --> 00:07:45,214
For example, in Adobe premiere Pro you can have multiple video tracks and

121
00:07:45,252 --> 00:07:49,122
multiple audio tracks as well. Then inside each audio track I have

122
00:07:49,176 --> 00:07:52,526
a sequence which contains the name of the audio

123
00:07:52,558 --> 00:07:56,354
track. And then for each asset I have

124
00:07:56,392 --> 00:08:00,242
a specific sequence, and inside the sequence I declare where

125
00:08:00,296 --> 00:08:03,714
the sequence should start and the length

126
00:08:03,762 --> 00:08:07,334
of the sequence in frames. Then inside the sequence I will add my

127
00:08:07,372 --> 00:08:11,202
audio. Of course, the sequence and the audio are remotion abstractions

128
00:08:11,266 --> 00:08:14,646
as well. If you want to learn more about that, just go into the remotion

129
00:08:14,678 --> 00:08:18,358
documentation and you will find everything youve need back on the timeline component.

130
00:08:18,454 --> 00:08:22,620
Let's take just a quick look to the video track. Here we have

131
00:08:23,150 --> 00:08:26,258
the same thing. So we have the sequence, then we have the sequence

132
00:08:26,294 --> 00:08:30,090
for each asset. And then in this case it's slightly more complex

133
00:08:30,170 --> 00:08:33,614
because we can have the asset type based on our premiere pro

134
00:08:33,652 --> 00:08:36,846
example. If you ever use the premiere pro in the

135
00:08:36,868 --> 00:08:40,626
video track, you can add videos, but you can add images and text as

136
00:08:40,648 --> 00:08:44,802
well. So that's exactly what we are doing here. We are adding video

137
00:08:44,856 --> 00:08:48,626
components, but we are adding text, we are adding images. And since you

138
00:08:48,648 --> 00:08:52,166
can literally add everything you want, we are also adding a

139
00:08:52,188 --> 00:08:55,654
CSS container so that you can import your own

140
00:08:55,692 --> 00:08:58,930
CSS. Now let's take just a quick look to the schema.

141
00:08:59,090 --> 00:09:02,678
If youve familiar with Zod. This is a Zod schema

142
00:09:02,774 --> 00:09:06,314
and it represents exactly what we saw before. In fact,

143
00:09:06,352 --> 00:09:10,006
if we go into remotion studio, in the props section,

144
00:09:10,118 --> 00:09:13,610
we can see that we can customize everything about

145
00:09:13,680 --> 00:09:17,534
our video. In theory, we can create new videos directly from this

146
00:09:17,572 --> 00:09:21,262
interface. If you have a simpler schema, you can even create your

147
00:09:21,316 --> 00:09:25,194
own video directly here. So let's say that you are a social media manager,

148
00:09:25,242 --> 00:09:29,474
and every time a football player makes a goal, you want to create

149
00:09:29,592 --> 00:09:32,946
a video for your social media. In that case, here you

150
00:09:32,968 --> 00:09:36,974
can say what is the current score, what is the player

151
00:09:37,022 --> 00:09:40,546
name, and all the information that you need. Then you click on render and

152
00:09:40,568 --> 00:09:44,006
your video is ready to bet uploaded on social media or whatever. I don't want

153
00:09:44,028 --> 00:09:47,190
to go too deep into the code because of course if you are interested,

154
00:09:47,260 --> 00:09:50,870
you can take a look on GitHub. But I'm interested in giving you the main

155
00:09:50,940 --> 00:09:54,194
ideas that youve need to use remotion back to our presentation.

156
00:09:54,242 --> 00:09:57,914
There is just one more thing that we need to address. So how can we

157
00:09:57,952 --> 00:10:01,466
render at scale right now? We saw that we can render one

158
00:10:01,488 --> 00:10:04,698
single video on our computer by installing remotion, and of

159
00:10:04,704 --> 00:10:08,730
course it works. But let's say that we need to produce a massive

160
00:10:08,810 --> 00:10:11,854
amount of videos. How can we do it? Well, in this case,

161
00:10:11,892 --> 00:10:15,390
remotion gives us multiple options. The first one is

162
00:10:15,460 --> 00:10:19,454
render locally, and the second one is rendering on Lambda.

163
00:10:19,502 --> 00:10:23,470
By render locally, we mean just rendering on a machine,

164
00:10:23,550 --> 00:10:27,282
which can be on premise or on cloud or even your own

165
00:10:27,336 --> 00:10:31,006
computer, of course if you need to render at scale. So if you have hundreds

166
00:10:31,038 --> 00:10:34,706
or thousands of job requests, then you will probably have a pool

167
00:10:34,738 --> 00:10:37,926
of machines that will pull your video jobs and you

168
00:10:37,948 --> 00:10:41,702
will have probably an auto scaling as well to manage load. The second

169
00:10:41,756 --> 00:10:45,438
option, which is really cool in my opinion, is rendering on lambda.

170
00:10:45,474 --> 00:10:49,242
This is really cheap, really simple to set up. If you have an AWS account,

171
00:10:49,296 --> 00:10:53,210
it just takes five minutes, more or less. And the results are great because

172
00:10:53,280 --> 00:10:56,974
using parallelization you can render a long video in minutes.

173
00:10:57,092 --> 00:11:01,022
One of the main limitations actually is that on lambda, at least

174
00:11:01,076 --> 00:11:04,606
for what the doc says, you can only render videos that

175
00:11:04,628 --> 00:11:07,966
are less than 30 minutes. That's a limitation of

176
00:11:07,988 --> 00:11:11,586
course. But what you can do, you can have renderer lambda for

177
00:11:11,608 --> 00:11:14,850
all the videos, and if the video is bigger than 30 minutes,

178
00:11:14,920 --> 00:11:18,162
then you can file over to a render locally on a machine. Let's quickly

179
00:11:18,216 --> 00:11:21,454
see on vs code how we can run remotion on lambda.

180
00:11:21,502 --> 00:11:25,078
As I said before, in this case I already made their setup and I

181
00:11:25,084 --> 00:11:29,078
will just show you the script to start the rendering. Here we are importing a

182
00:11:29,084 --> 00:11:32,234
bunch of things from remotion itself. Here I

183
00:11:32,272 --> 00:11:36,634
exported my video configuration, which in this case

184
00:11:36,752 --> 00:11:40,710
is the exact same video, but with Goku instead of SpongeBob.

185
00:11:40,870 --> 00:11:44,246
So we have these props that we are passing to the remotion

186
00:11:44,278 --> 00:11:48,074
lambda. Then we load some environment variables, then we get

187
00:11:48,192 --> 00:11:51,838
our functions. We get the functions that we deployed on AWS because we

188
00:11:51,844 --> 00:11:54,922
need the name of the function and then we just need to call this render

189
00:11:54,986 --> 00:11:58,202
media or lambda method. We will get in, output this render

190
00:11:58,266 --> 00:12:01,682
id and we can use the render id to evaluate what is the current

191
00:12:01,736 --> 00:12:05,106
status. So here we have a while true a simple loop and

192
00:12:05,128 --> 00:12:09,026
we will get the current progress. We will show the progress to the user and

193
00:12:09,048 --> 00:12:12,774
when render finished we will show the user the actual URL of

194
00:12:12,812 --> 00:12:16,134
our video. The video itself, once it's finished, will be stored on

195
00:12:16,172 --> 00:12:19,814
s three. Again, if you are not familiar with AWS, no worries. S three

196
00:12:19,852 --> 00:12:23,494
is just their storage system, so you can see it like

197
00:12:23,532 --> 00:12:26,682
a Google Drive or a Dropbox. And that's all for today.

198
00:12:26,736 --> 00:12:30,838
We covered a lot of topics. I just want to leave you with the challenge.

199
00:12:30,934 --> 00:12:34,326
So if you want, if you have the time, or if you wish

200
00:12:34,358 --> 00:12:38,366
to learn more about remotion, just check out the repo, customize the

201
00:12:38,388 --> 00:12:41,966
project or even the render engine itself and share with us.

202
00:12:41,988 --> 00:12:45,978
Youve first video. Before we jump off, just a couple of words about Nearform.

203
00:12:46,074 --> 00:12:49,262
Nearform is a services company. We are some of the major

204
00:12:49,316 --> 00:12:52,942
contributors to the Nodejs ecosystem. So if you have any

205
00:12:52,996 --> 00:12:57,322
problem with your Nodejs application, or if you want the support of our teams,

206
00:12:57,386 --> 00:13:00,774
just contact us. If you have any questions, feel free to contact me

207
00:13:00,812 --> 00:13:04,214
on my LinkedIn or on the discord server. Still, thanks a lot

208
00:13:04,252 --> 00:13:06,838
for joining the session. It was really fun.

