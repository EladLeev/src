1
00:00:25,410 --> 00:00:29,046
You. Hi everybody. Welcome CTO.

2
00:00:29,068 --> 00:00:32,338
This talk at Conf 42. My name is Liran Haimovitch, and I'm

3
00:00:32,354 --> 00:00:35,766
the CTO and co founder of Rookout. Today I'll be

4
00:00:35,788 --> 00:00:39,494
talking about software understandability and what it means for us as

5
00:00:39,532 --> 00:00:43,282
software engineers. I'm an advocate of modern software methodologies

6
00:00:43,346 --> 00:00:47,058
such as agile, DevOps and Lean, which taught me a lot about understandability

7
00:00:47,154 --> 00:00:51,082
and the importance of that. And before founding, Rookout spent about a decade

8
00:00:51,146 --> 00:00:53,978
doing cybersecurity as a software engineer,

9
00:00:54,074 --> 00:00:57,402
team leader, product manager, and group manager.

10
00:00:57,466 --> 00:01:00,558
Rookout is a platform for live data collection and

11
00:01:00,564 --> 00:01:03,986
debugging, and rookout lets you collect any type of data

12
00:01:04,088 --> 00:01:06,302
on the fly with no extra coding,

13
00:01:06,366 --> 00:01:10,258
redeployments and restarts. Working with engineers or

14
00:01:10,344 --> 00:01:14,354
using rookout to debug various problems to learn more about their

15
00:01:14,392 --> 00:01:18,166
software and CTO get things done, we became exposed the

16
00:01:18,188 --> 00:01:21,590
concept of understandability, and understandability is

17
00:01:21,660 --> 00:01:25,206
so very important. I'm sure many of you software engineers are

18
00:01:25,228 --> 00:01:28,466
familiar with the mundane tasks of the basic

19
00:01:28,498 --> 00:01:32,154
stuff, like read a JSON from file and parse it and

20
00:01:32,192 --> 00:01:35,702
verify it, or solve a data structure.

21
00:01:35,766 --> 00:01:39,210
And those are so basic stuff we've been doing since day one,

22
00:01:39,280 --> 00:01:42,406
since the first lessons in intro to computer sciences.

23
00:01:42,518 --> 00:01:46,030
And yet, if you gain the similar task in a very large system,

24
00:01:46,100 --> 00:01:49,518
in a very complex system, sort a data structure within a

25
00:01:49,524 --> 00:01:52,618
database or within an output, all of a sudden,

26
00:01:52,714 --> 00:01:56,386
the same very simple task can take days or even weeks,

27
00:01:56,488 --> 00:01:59,598
because there are so many intricacies and so many connections,

28
00:01:59,694 --> 00:02:03,106
and quite often what's making it so complex. It's not even

29
00:02:03,128 --> 00:02:06,466
that the task itself is complex or long. It's the fact that

30
00:02:06,488 --> 00:02:09,606
you actually have to spend so much time trying to understand how

31
00:02:09,628 --> 00:02:13,606
to do it, trying to understand where to do it, and trying to understand how

32
00:02:13,628 --> 00:02:17,042
does it comprise with the entire system, and that's understandability.

33
00:02:17,186 --> 00:02:20,666
How do we manage the complexity of the tasks? How do we walk our way

34
00:02:20,688 --> 00:02:25,286
through it? I love this quote by George Bernard Chow where he's saying imagination

35
00:02:25,318 --> 00:02:28,906
is the beginning of creates you imagine what you desire, you will

36
00:02:28,928 --> 00:02:32,298
what you imagine, and at last, you create what you will.

37
00:02:32,384 --> 00:02:36,250
Now, this quote is nowhere true, has much as it is in software engineering.

38
00:02:36,330 --> 00:02:39,566
Imagination is truly the limit for so much of what

39
00:02:39,588 --> 00:02:42,654
we can do. There is so much, it always surprises me how

40
00:02:42,692 --> 00:02:46,658
much we can achieve using software engineering. And yet we get this report

41
00:02:46,744 --> 00:02:50,814
by the DJ who's saying 68 of organizations experience flying

42
00:02:50,862 --> 00:02:54,866
blind or trying slow. So while imagination might be the limit of

43
00:02:54,888 --> 00:02:58,294
what we can do, sometimes we find ourselves achieving it very very

44
00:02:58,332 --> 00:03:01,842
slowly, and that's a big problem. You either fly slow

45
00:03:01,906 --> 00:03:05,126
because you're trying to keep things certain, trying to slowly understand,

46
00:03:05,228 --> 00:03:09,254
or you fly blind without understanding, tracking potentially dangerous

47
00:03:09,302 --> 00:03:12,502
changes without knowing the impact. This is where software

48
00:03:12,566 --> 00:03:15,846
understandability comes into play. The term understandability

49
00:03:15,958 --> 00:03:19,722
we draw from the finance industry, but it was originally about having

50
00:03:19,776 --> 00:03:23,002
service providers such as insurance providers and pensions

51
00:03:23,066 --> 00:03:26,702
funds empower their consumers to read the reports they're sending out.

52
00:03:26,756 --> 00:03:30,206
And drawing upon that definition, we define understandability as

53
00:03:30,228 --> 00:03:33,754
the concept that a system should be presented so that can engineer

54
00:03:33,802 --> 00:03:37,570
can easily comprehend it, essentially how hard or easy it is for you

55
00:03:37,640 --> 00:03:41,282
to understand the system in front of you. Now keep in mind, a software application

56
00:03:41,416 --> 00:03:45,042
is comprehend of many things. Obviously you have source code

57
00:03:45,096 --> 00:03:48,214
and that's the first thing you're going to think of. But there is so much

58
00:03:48,252 --> 00:03:52,326
more that goes into creating an application as it makes into

59
00:03:52,428 --> 00:03:55,910
having the application run. You have the configuration and state whether

60
00:03:55,980 --> 00:03:59,398
it's stored in a database or in a file or anywhere else.

61
00:03:59,484 --> 00:04:02,858
You have the runtime environment, whether it's a cloud environment. Youre have the

62
00:04:02,864 --> 00:04:06,138
various node or Java functions that are running your application.

63
00:04:06,304 --> 00:04:10,138
Are you using spring boot? Are you using micronaut? Are you running within a

64
00:04:10,144 --> 00:04:13,262
weblogic server? There are so many different options,

65
00:04:13,396 --> 00:04:16,990
as I'm sure you arent all well familiar with. Each of those

66
00:04:17,060 --> 00:04:20,750
make a very significant difference to how the same code

67
00:04:20,820 --> 00:04:24,114
plays out. We have the service dependencies, whether it's open

68
00:04:24,152 --> 00:04:27,906
youre and closed source dependencies within our code, or it can be

69
00:04:28,008 --> 00:04:32,014
other dependencies, other microservices within our organization,

70
00:04:32,142 --> 00:04:35,922
or even third party dependencies such as stripe. Potentially most important,

71
00:04:36,056 --> 00:04:39,462
hardest to predict inputs and outputs of the system. Our system

72
00:04:39,516 --> 00:04:43,446
doesn't walk in a void, and the way our clients interact with

73
00:04:43,468 --> 00:04:47,382
it are going to make a huge difference. Think about it. You're seeing an

74
00:04:47,436 --> 00:04:51,818
endpoint that receives JSon as an input. That JSon can be virtually anything,

75
00:04:51,984 --> 00:04:55,366
and only by knowing the expected input of the system can you truly

76
00:04:55,398 --> 00:04:59,242
make sense of the function that handles that input. Only by

77
00:04:59,296 --> 00:05:02,698
truly understand all of those five elements can we understand

78
00:05:02,784 --> 00:05:06,170
our software and operate it and maintain it accordingly.

79
00:05:06,250 --> 00:05:09,694
How do we know if a software is understandable or not? So there are four

80
00:05:09,732 --> 00:05:13,374
criteria we're drawing again from the finance industry. The software has to be

81
00:05:13,412 --> 00:05:16,654
complete. The information we have has to be complete. We need to have full

82
00:05:16,692 --> 00:05:20,270
access, CTO, the source code to input examples and so on and so forth.

83
00:05:20,350 --> 00:05:23,758
We need information to be concise. Just because there are a million lines

84
00:05:23,774 --> 00:05:26,754
of code doesn't mean we can go tough, all of them. We need some sort

85
00:05:26,792 --> 00:05:30,694
of summary, shorter presentations that we can go through. We also need

86
00:05:30,732 --> 00:05:34,278
information to be clear. We need those summaries. We need those

87
00:05:34,364 --> 00:05:37,734
snapshots to be made very clear. We obviously want the full

88
00:05:37,772 --> 00:05:41,174
source code as well to be cleared and documented, and we want

89
00:05:41,212 --> 00:05:44,842
everything to be organized. We want to be able to shift from the short

90
00:05:44,896 --> 00:05:48,506
summary to deeper summaries to the source code itself. We want to be

91
00:05:48,528 --> 00:05:52,186
able to easily shift from source code to input samples that show us how

92
00:05:52,208 --> 00:05:55,918
it's going to be used and to example configuration that shows how it's going to

93
00:05:55,924 --> 00:05:58,942
be configured in production. Once we have documentation on the system,

94
00:05:58,996 --> 00:06:02,190
once we have the information about the system available in a complete,

95
00:06:02,260 --> 00:06:05,774
concise, clear and organized manner, then we can go ahead and say

96
00:06:05,812 --> 00:06:09,874
the system is understandable. You might be wondering about a few other terms out there

97
00:06:09,912 --> 00:06:13,794
that you might have heard that might come to term, so let's think them

98
00:06:13,832 --> 00:06:17,058
through. Understandability is closely related, but it's not

99
00:06:17,144 --> 00:06:20,486
complexity. Obviously a more complex system is going to be harder to

100
00:06:20,508 --> 00:06:23,638
understand, and a less complex system is going to be easier to understand.

101
00:06:23,724 --> 00:06:27,254
And yet at the same time think about this way. I can provide you with

102
00:06:27,292 --> 00:06:30,674
a script that Java application is going to be about reading a file.

103
00:06:30,722 --> 00:06:33,914
I can either provide you with a jar. Ready? Here's the jar. Go ahead and

104
00:06:33,952 --> 00:06:36,906
tell me what it's doing, or I can provide you with the jar and the

105
00:06:36,928 --> 00:06:40,778
youre code and documentation and input examples. Obviously it's going

106
00:06:40,784 --> 00:06:44,410
to be much, much easier to understand the same application with the full package,

107
00:06:44,490 --> 00:06:48,622
even though it's just as complex. Second, we can think about readability youre

108
00:06:48,676 --> 00:06:52,414
we want the source code to be readable of youre. We want the documentation to

109
00:06:52,452 --> 00:06:55,878
be readable. And that's going to have a clear impact, a very big impact

110
00:06:55,914 --> 00:06:59,634
on the clarity criteria which we've just defined. But just because

111
00:06:59,672 --> 00:07:02,990
something is readable doesn't mean it's complete, doesn't mean it's concise,

112
00:07:03,070 --> 00:07:06,706
doesn't necessarily mean it's organized. And there is much beyond readability to

113
00:07:06,728 --> 00:07:10,370
understandability. And last but not least, we have observability.

114
00:07:10,530 --> 00:07:14,214
Observability is a term used often to define how we

115
00:07:14,252 --> 00:07:17,414
monitor the system in production. How do we know if it's up or down,

116
00:07:17,452 --> 00:07:21,030
if it's serving our customers or not? And understandability goes a step

117
00:07:21,100 --> 00:07:24,554
back. It's not about just whether the system is up or down, whether it's working

118
00:07:24,592 --> 00:07:28,006
properly. It's about how it's working, why it's working, and what's

119
00:07:28,038 --> 00:07:32,214
it doing all of those three elements very much interact with understandability

120
00:07:32,342 --> 00:07:35,882
more often than not. By improving complexity, readability and observability,

121
00:07:35,946 --> 00:07:39,214
we're going to improve understandability as well. But that's not always an

122
00:07:39,252 --> 00:07:42,986
option and that's not always the best approach to improve understandability.

123
00:07:43,098 --> 00:07:46,046
How do we go about improving understandability?

124
00:07:46,158 --> 00:07:50,494
There are five key ways I like to point out for improving understandability.

125
00:07:50,622 --> 00:07:54,702
The first, which I kind of briefly touched on, is minimizing complexity

126
00:07:54,766 --> 00:07:57,942
by creating a less complex application that is going to be less to understand,

127
00:07:58,076 --> 00:08:01,526
making everybody lives easier from the first time we were

128
00:08:01,548 --> 00:08:04,950
introduced to software engineers through any experience,

129
00:08:05,100 --> 00:08:08,546
everything we're taught in many ways is but minimizing complexity.

130
00:08:08,658 --> 00:08:11,926
So you start out by cutting back on requirements. The less you have to

131
00:08:11,948 --> 00:08:15,718
do, the less complex it's going to be. This applies to both functional requirements,

132
00:08:15,814 --> 00:08:19,526
what the system is going to do, as well as to nonfunctional requirements, how it's

133
00:08:19,558 --> 00:08:23,214
going to do it, nonfunctional requirements such has availability, security,

134
00:08:23,332 --> 00:08:27,310
performance, arent all going to have a significant impact on complexity as well.

135
00:08:27,380 --> 00:08:30,954
Hire the best developers. Better developers are going to find simpler

136
00:08:31,002 --> 00:08:34,670
solutions to the same problem, reducing the complexity of the solution.

137
00:08:34,750 --> 00:08:38,114
Utilize the highest level building blocks by using cloud,

138
00:08:38,232 --> 00:08:42,094
by using open source software, by using prepared solutions,

139
00:08:42,142 --> 00:08:45,646
you are offloading much of the complexity to somebody else and

140
00:08:45,688 --> 00:08:49,142
creating a simpler, neater solution. Overall with better

141
00:08:49,196 --> 00:08:53,218
abstractions, apply software engineering principles such as encapsulation,

142
00:08:53,314 --> 00:08:56,850
such as abstractions are all there exactly for that purpose,

143
00:08:56,930 --> 00:09:00,694
to minimize complexity and to make it more manageable. And last but not

144
00:09:00,732 --> 00:09:04,506
least, practice agile and DevOps. Build a software step by step to

145
00:09:04,528 --> 00:09:07,974
make sure you only introduce complexity where it's necessary and avoid

146
00:09:08,022 --> 00:09:11,274
over engineering and over planning, while at the same time make sure

147
00:09:11,312 --> 00:09:14,862
to reduce tech debt and keep the system understandable. Keep the system

148
00:09:14,916 --> 00:09:18,782
simple as issues crop up. And by going through all of those five

149
00:09:18,836 --> 00:09:22,334
elements, you're going to minimize complexity. Unfortunately, there is a big

150
00:09:22,372 --> 00:09:25,902
drawback here. All of those are very, fairly easy to do or

151
00:09:25,956 --> 00:09:29,714
fairly straightforward to do when you're developing a new systems, and you can take

152
00:09:29,752 --> 00:09:33,618
all of those into account. But unfortunately, when you were working with an existing system,

153
00:09:33,704 --> 00:09:36,914
one that has been around for 510 or even 20 years,

154
00:09:37,032 --> 00:09:40,674
making those changes is so much harder. I mean, you can't cut back on requirements

155
00:09:40,722 --> 00:09:44,326
on a system that has been written for 20 years, and you can't change the

156
00:09:44,348 --> 00:09:47,814
engineering team who originally wrote it. Naturally, you can and

157
00:09:47,852 --> 00:09:51,474
should strive to make those changes long term, even for existing software.

158
00:09:51,522 --> 00:09:55,546
As long as you're tracking with it. But that's a much harder journey. So what

159
00:09:55,568 --> 00:09:58,726
we can do is we can create knowledge, we can curate knowledge,

160
00:09:58,758 --> 00:10:02,086
we can build the knowledge around what's already there to make it easier

161
00:10:02,118 --> 00:10:05,806
to understand, to make the knowledge accessible. Start out by learning about

162
00:10:05,828 --> 00:10:09,326
the system. Chat with your colleagues. Find previous engineers who

163
00:10:09,348 --> 00:10:12,094
work on the system who formally walked in the system and learn from them.

164
00:10:12,132 --> 00:10:14,926
Buy them a cup of coffee, read through the source code,

165
00:10:15,028 --> 00:10:18,370
go through production, collect has much information as you can.

166
00:10:18,440 --> 00:10:21,922
As you collect this information, make sure to document it, write it down,

167
00:10:21,976 --> 00:10:25,794
record your conversations, whatever it takes, so that both for yourself

168
00:10:25,912 --> 00:10:29,046
and for others, some of that knowledge is going to be captured in a way

169
00:10:29,068 --> 00:10:32,166
that's easier to understand. And then go ahead and share

170
00:10:32,268 --> 00:10:36,066
that information. Give talks, write it, create tutorials,

171
00:10:36,178 --> 00:10:39,554
have meetups, whatever you need to do internally so that knowledge

172
00:10:39,602 --> 00:10:43,066
spreads. And keep in mind that as you share the knowledge, youre probably going

173
00:10:43,088 --> 00:10:46,762
to get feedback, you're going CTo get corrections, youre going CTO get new

174
00:10:46,816 --> 00:10:50,266
insights and you might even get new questions that should be

175
00:10:50,288 --> 00:10:53,562
answered. But over time, as you practice these three steps,

176
00:10:53,626 --> 00:10:57,450
learning, documenting and sharing, you're going to create a body of knowledge.

177
00:10:57,530 --> 00:11:00,954
And this body of knowledge is going to significantly help you handling

178
00:11:01,002 --> 00:11:04,734
that complexity and making things more understandable. Third on our list,

179
00:11:04,772 --> 00:11:08,434
we have development environments. Nothing allows us better to

180
00:11:08,472 --> 00:11:11,634
understand things than blind able to take them apart and put

181
00:11:11,672 --> 00:11:15,982
them back together in a sandbox. Now, development environments have a few important criteria

182
00:11:16,046 --> 00:11:19,426
to make them effective. The first, you have to replicate your tech stack. If youre

183
00:11:19,458 --> 00:11:22,854
using Java twelve in production, which you probably shouldn't because

184
00:11:22,892 --> 00:11:26,278
it's not a long term support version. So let's say Java Eleven. If you're

185
00:11:26,284 --> 00:11:29,986
using Java eleven in production, make youre to use Java Eleven in the development

186
00:11:30,018 --> 00:11:33,418
environment. Don't go for Java 14 or Java eight. They're going

187
00:11:33,424 --> 00:11:36,870
to behave differently. Use the same companies, the same open source,

188
00:11:36,950 --> 00:11:40,826
comprehend the same operating system, use the same database, everything you

189
00:11:40,848 --> 00:11:44,286
can replicate, replicate it. If you can replicate the scale, do that as

190
00:11:44,308 --> 00:11:48,158
well. Second, use high quality test data. We've mentioned it before,

191
00:11:48,244 --> 00:11:51,178
configuration, state, input and output.

192
00:11:51,274 --> 00:11:54,458
The more youre can get them from the production environment,

193
00:11:54,554 --> 00:11:57,234
the better it's going to be for you. The more you're going to learn about

194
00:11:57,272 --> 00:12:00,642
how the system is actually going to operate rather than just running

195
00:12:00,696 --> 00:12:04,514
the code with dummy data and getting results that may or may

196
00:12:04,552 --> 00:12:08,038
not matter. Keep in mind that today, with compliance and security,

197
00:12:08,204 --> 00:12:11,686
using production data for testing and development is a big problem

198
00:12:11,788 --> 00:12:14,998
and there are ways to generate fake data and there

199
00:12:15,004 --> 00:12:18,598
are ways to buy data and create it, but it's a

200
00:12:18,604 --> 00:12:22,026
big problem for many of our customers. And keep in mind that this is not

201
00:12:22,048 --> 00:12:25,126
a one time process. Environments drift as you introduce

202
00:12:25,158 --> 00:12:28,246
new databases to production. As you make upgrades

203
00:12:28,278 --> 00:12:32,026
to production, you have to make those in the development environments as well. As you

204
00:12:32,048 --> 00:12:36,058
create new APIs, you need to make sure those APIs have input examples

205
00:12:36,074 --> 00:12:39,994
has well, the way the software is used changes, you have to adapt the input

206
00:12:40,042 --> 00:12:43,326
samples you use to reflect that as well. And overall, this can be quite

207
00:12:43,348 --> 00:12:46,606
a lot of work, both setting up the development

208
00:12:46,638 --> 00:12:50,030
environment and maintaining it. It can take a lot of effort,

209
00:12:50,110 --> 00:12:54,066
but it's a great tool that will help you improve the understandability of

210
00:12:54,088 --> 00:12:57,298
your software. Next, we have observability tools. As I mentioned,

211
00:12:57,384 --> 00:13:00,886
observability tools show us the state of the system and not so

212
00:13:00,908 --> 00:13:04,806
much exactly what it's doing and why, but it can definitely provide us

213
00:13:04,828 --> 00:13:08,086
with some insights in what's going on that we can use. And so if

214
00:13:08,108 --> 00:13:11,490
your organization uses observability tools such as logging,

215
00:13:11,570 --> 00:13:15,274
tracing, metrics and error tracking, then you should definitely

216
00:13:15,392 --> 00:13:18,650
ask to have access to them so that you'll be able CTO use them.

217
00:13:18,720 --> 00:13:22,234
They're not going to provide you with all the information you need. But often if

218
00:13:22,272 --> 00:13:25,966
you're asking yourself what's happening, a log or a metric or

219
00:13:26,068 --> 00:13:30,154
an exception you can track, that can all provide you with some visibility

220
00:13:30,282 --> 00:13:34,222
into what's going on and help youre make better educated

221
00:13:34,286 --> 00:13:37,410
guests. Now last and definitely not least,

222
00:13:37,480 --> 00:13:40,642
we have tools that are always there to help us

223
00:13:40,696 --> 00:13:44,718
understand our software better. I like to categorize them as understandability

224
00:13:44,814 --> 00:13:48,802
tools, but I guess most of you would categorize them as debuggers.

225
00:13:48,866 --> 00:13:52,374
Traditional debuggers have always been about enabling us to

226
00:13:52,412 --> 00:13:56,322
understand our software. You run your application and then the debuggers

227
00:13:56,386 --> 00:13:59,686
allow you CTO take it step by step and see what's going on. They allow

228
00:13:59,708 --> 00:14:02,662
you to go back and see what's going on. They even allow you to inject

229
00:14:02,726 --> 00:14:06,598
variables, change values, and so you can literally explore

230
00:14:06,614 --> 00:14:09,766
the application as it's running and truly understand its inert.

231
00:14:09,878 --> 00:14:13,786
Unfortunately, traditional debuggers are not so good today

232
00:14:13,888 --> 00:14:17,450
for many of youre environments. If youre working on kubernetes,

233
00:14:17,530 --> 00:14:21,290
if youre working on serverless, if you're working on a very large monolithic applications,

234
00:14:21,370 --> 00:14:24,962
if you want to see what's going on in production, traditional debuggers are

235
00:14:25,016 --> 00:14:28,866
not going to be there for you. Fortunately, next generation debuggers such

236
00:14:28,888 --> 00:14:32,786
as rookout allow you to take the debugger experience and

237
00:14:32,808 --> 00:14:36,814
use it anywhere. Next generation debuggers support debugging

238
00:14:36,862 --> 00:14:40,722
in kubernetes, in serverless, in production, regardless of the scale,

239
00:14:40,786 --> 00:14:44,342
regardless of the size. Using nonbreaking breakpoints, you can go

240
00:14:44,396 --> 00:14:47,750
anywhere you want and see exactly how your code is behaving. Now,

241
00:14:47,820 --> 00:14:51,622
whether you prefer the traditional debuggers or the next generation debuggers,

242
00:14:51,686 --> 00:14:55,062
those are definitely the best options for engineers

243
00:14:55,126 --> 00:14:58,698
looking to quickly understand their software. And I think the biggest benefits of

244
00:14:58,704 --> 00:15:02,026
that is how easy it is to set up youre can get started in a

245
00:15:02,048 --> 00:15:06,042
matter of minutes and get real insight into existing applications

246
00:15:06,106 --> 00:15:09,886
without overly worrying about what's going on. I hope this talk has

247
00:15:09,908 --> 00:15:14,314
been beneficial for you. I hope you learned a bit about the importance of understandability

248
00:15:14,442 --> 00:15:17,646
as well as what can be done to improve it and why you

249
00:15:17,668 --> 00:15:21,406
should care. And I would love to hear from you whether on Twitter or

250
00:15:21,428 --> 00:15:24,950
on GitHub. So please reach out to me and I would love to continue CTO

251
00:15:24,980 --> 00:15:28,260
discussion and maybe show you a bit about truecode. Thank you very much.

