1
00:00:00,410 --> 00:00:06,174
Jamaica make a real

2
00:00:06,212 --> 00:00:09,610
time feedback into the behavior of your distributed systems

3
00:00:09,690 --> 00:00:13,374
and observing changes exceptions errors in

4
00:00:13,412 --> 00:00:16,746
real time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,560
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,290
Close hello

7
00:00:47,360 --> 00:00:50,906
everyone, my name is Roman Boycker and I work as senior,

8
00:00:50,928 --> 00:00:54,030
senior specialist solutions architect serverless AWS.

9
00:00:54,530 --> 00:00:58,458
Today I'm going to talk a little bit how to implement

10
00:00:58,634 --> 00:01:02,618
backend for frontend pattern with different

11
00:01:02,724 --> 00:01:04,740
AWS serverless services.

12
00:01:06,390 --> 00:01:10,178
Let's together remember what it means

13
00:01:10,264 --> 00:01:14,062
and what it is about this backend for frontend

14
00:01:14,126 --> 00:01:19,042
pattern. Essentially it was invented

15
00:01:19,106 --> 00:01:23,714
and suggested by Sam Newman several

16
00:01:23,762 --> 00:01:27,410
years ago, and the idea behind

17
00:01:27,500 --> 00:01:31,002
this pattern is to

18
00:01:31,136 --> 00:01:34,582
provide a certain layer of abstraction

19
00:01:34,646 --> 00:01:38,678
which allows you to build and to consume

20
00:01:38,774 --> 00:01:42,990
data from downstream microservices and

21
00:01:43,060 --> 00:01:47,086
to present it for the frontend how

22
00:01:47,108 --> 00:01:51,546
it looks like. So usually different teams

23
00:01:51,578 --> 00:01:55,506
will develop different types of front ends. It could be

24
00:01:55,608 --> 00:01:59,730
web applications, it could be mobile clients and

25
00:01:59,800 --> 00:02:03,122
those different types of applications. They sometimes

26
00:02:03,256 --> 00:02:06,566
will need different types of data, or they will

27
00:02:06,588 --> 00:02:10,070
need different variations of data depending on different

28
00:02:10,140 --> 00:02:13,958
requirements. If we imagine the situation

29
00:02:14,124 --> 00:02:18,362
that we produce different front

30
00:02:18,416 --> 00:02:21,914
ends, so there probably will be different teams doing

31
00:02:21,952 --> 00:02:25,226
that. So there will be a team producing a

32
00:02:25,408 --> 00:02:29,530
web frontend and a team producing different mobile front ends.

33
00:02:30,370 --> 00:02:34,282
And if we don't implement this back end for front end pattern,

34
00:02:34,426 --> 00:02:38,078
essentially that will mean that those teams will

35
00:02:38,244 --> 00:02:42,240
go directly to different microservices to consume that data.

36
00:02:43,750 --> 00:02:47,620
And this means that those services will

37
00:02:47,990 --> 00:02:51,342
be tightly coupled to the implementation

38
00:02:51,406 --> 00:02:55,118
of those microservices. And if you will need

39
00:02:55,304 --> 00:02:58,806
additional data, probably you will need to write

40
00:02:58,908 --> 00:03:03,094
additional logic on your front end. And essentially it

41
00:03:03,132 --> 00:03:07,378
may mean that you will spend

42
00:03:07,484 --> 00:03:10,602
more time integrating your frontend with different

43
00:03:10,656 --> 00:03:14,298
back end services. And the idea came

44
00:03:14,464 --> 00:03:18,298
here is to implement a simple

45
00:03:18,384 --> 00:03:21,854
layer which we called back end for

46
00:03:21,892 --> 00:03:25,422
frontend on the back end, which will be

47
00:03:25,476 --> 00:03:29,710
responsible for implementing these integrations

48
00:03:30,530 --> 00:03:33,710
and consuming data from different microservices

49
00:03:33,790 --> 00:03:37,026
and then presenting that data to the

50
00:03:37,208 --> 00:03:41,442
front ends. And this brings a lot of benefits

51
00:03:41,576 --> 00:03:45,326
because now the front end team will own this

52
00:03:45,448 --> 00:03:49,090
back end service and they can easily

53
00:03:49,170 --> 00:03:52,962
change it, implement different logic and implement

54
00:03:53,026 --> 00:03:56,770
different presentation for different front ends.

55
00:03:56,930 --> 00:04:00,374
But on the other hand, the frontend

56
00:04:00,492 --> 00:04:05,094
itself will have like one particular endpoint

57
00:04:05,222 --> 00:04:08,790
to connect to and to consume all the necessary

58
00:04:08,870 --> 00:04:12,538
data and to have all the necessary interactions.

59
00:04:12,714 --> 00:04:16,574
It will decouple your frontend from the

60
00:04:16,612 --> 00:04:20,830
back end services and it will allow you to modernize

61
00:04:21,410 --> 00:04:26,500
front ends and change them quickly and

62
00:04:27,430 --> 00:04:31,582
also depending on different requirements,

63
00:04:31,726 --> 00:04:34,914
this web back end for frontend and

64
00:04:34,952 --> 00:04:38,550
mobile back end for frontend may communicate with different

65
00:04:38,620 --> 00:04:42,120
services and store different set of data,

66
00:04:43,930 --> 00:04:47,506
but how you can use and build those backend

67
00:04:47,538 --> 00:04:51,290
for frontend implementations with AWS

68
00:04:51,630 --> 00:04:55,162
and specifically I'm going to talk today more

69
00:04:55,216 --> 00:04:58,906
about serverless implementations because I believe

70
00:04:59,088 --> 00:05:02,826
this is in many cases the most suitable

71
00:05:02,938 --> 00:05:06,778
way of implementing backends for front ends

72
00:05:06,874 --> 00:05:09,886
pattern. First of all,

73
00:05:09,988 --> 00:05:14,226
what does serverless mean to you and

74
00:05:14,408 --> 00:05:19,054
why it breedens additional benefits when you start implementing,

75
00:05:19,182 --> 00:05:22,574
for example, back end for front end solutions

76
00:05:22,622 --> 00:05:26,786
on it. First of all, as it implies,

77
00:05:26,978 --> 00:05:30,854
you don't need to spend a lot of time on managing the

78
00:05:30,892 --> 00:05:34,438
infrastructure to provision it, to patch it,

79
00:05:34,524 --> 00:05:39,094
and to do all the things it is done for you by AWS.

80
00:05:39,222 --> 00:05:42,874
So you can focus more on writing some code

81
00:05:42,992 --> 00:05:47,930
tests, implementing data

82
00:05:48,080 --> 00:05:51,214
storage, and in the

83
00:05:51,252 --> 00:05:54,474
end producing the necessary

84
00:05:54,602 --> 00:05:58,474
functionality faster. Another very important characteristic

85
00:05:58,522 --> 00:06:02,302
of serverless is that of automatic scaling. That means

86
00:06:02,356 --> 00:06:05,906
that essentially you don't need to

87
00:06:05,928 --> 00:06:09,774
think a lot about how your service will scale

88
00:06:09,822 --> 00:06:13,774
under the load, and if you have different spikes

89
00:06:13,822 --> 00:06:17,490
of traffic, how you should implement additional

90
00:06:17,570 --> 00:06:20,854
resources and provision them. It will in many

91
00:06:20,892 --> 00:06:25,080
cases done automatically. And if then

92
00:06:25,450 --> 00:06:29,734
the traffic goes down, the serverless

93
00:06:29,782 --> 00:06:32,714
services will scale down automatically as well.

94
00:06:32,912 --> 00:06:36,742
Another very important thing here is highly

95
00:06:36,806 --> 00:06:40,894
available and secure configurations. Again, because we

96
00:06:40,932 --> 00:06:44,366
as AWS built those services, we already

97
00:06:44,468 --> 00:06:49,098
implement them in a well architected way. We implement

98
00:06:49,194 --> 00:06:52,570
a lot of availability and security best practices

99
00:06:52,650 --> 00:06:56,830
within those services. Of course you will need to think about availability

100
00:06:56,910 --> 00:07:00,322
and security, but at a much higher level.

101
00:07:00,456 --> 00:07:03,826
So you won't be thinking about how to patch, for example

102
00:07:04,008 --> 00:07:07,750
operating system, how to implement

103
00:07:08,730 --> 00:07:12,818
some security controls on the network traffic.

104
00:07:12,914 --> 00:07:16,230
So these things will be done automatically.

105
00:07:16,650 --> 00:07:20,806
And the last but not the least important characteristic

106
00:07:20,838 --> 00:07:24,586
of serverless is that you pay for what you use. So if

107
00:07:24,608 --> 00:07:28,554
you don't consume any serverless services at a given period of

108
00:07:28,592 --> 00:07:32,080
time, you will pay nothing. But again,

109
00:07:32,610 --> 00:07:36,382
it is very important, especially for development and test

110
00:07:36,436 --> 00:07:40,126
environments. So you can have dev environments for

111
00:07:40,148 --> 00:07:43,854
each developer to try things out,

112
00:07:43,972 --> 00:07:48,302
or you can run different tests at a fraction of costs compared

113
00:07:48,366 --> 00:07:52,418
with traditional infrastructure where you will need to provision and

114
00:07:52,584 --> 00:07:55,730
have serverless or containers infrastructure.

115
00:07:57,210 --> 00:08:00,390
But let's look how you can implement.

116
00:08:02,010 --> 00:08:05,634
And essentially we have a big serverless

117
00:08:05,682 --> 00:08:09,142
portfolio which allow you to implement

118
00:08:09,286 --> 00:08:13,174
business logic, to store the data, to implement synchronous

119
00:08:13,222 --> 00:08:17,130
and asynchronous communication between different services,

120
00:08:17,280 --> 00:08:21,710
and implement security and development

121
00:08:22,530 --> 00:08:26,366
features. But let's look how we

122
00:08:26,388 --> 00:08:30,510
can start implementing our backend for frontend with

123
00:08:30,660 --> 00:08:34,606
this set of services. Probably the simplest

124
00:08:34,718 --> 00:08:37,938
and the easiest way of doing that is

125
00:08:38,024 --> 00:08:41,406
to have an API gateway as a frontend door.

126
00:08:41,518 --> 00:08:45,354
Implementing and exposing restful

127
00:08:45,422 --> 00:08:48,726
API for your front end then having a

128
00:08:48,748 --> 00:08:52,418
lambda function or a set of lambda functions,

129
00:08:52,514 --> 00:08:55,734
implementing business logic, implementing different

130
00:08:55,852 --> 00:08:59,974
transformations and a dynamodb

131
00:09:00,022 --> 00:09:04,006
table where you will store all the data necessary

132
00:09:04,198 --> 00:09:07,626
for your particular frontend. But what

133
00:09:07,648 --> 00:09:11,950
is missing here for sure, AWS you remember

134
00:09:12,100 --> 00:09:15,982
you will need to interact with downstream microservices and

135
00:09:16,036 --> 00:09:19,374
get some data out of there. How you can

136
00:09:19,412 --> 00:09:23,310
do that we can have different microservices

137
00:09:23,390 --> 00:09:27,742
running in our back end owned by different teams,

138
00:09:27,886 --> 00:09:31,490
but then we will need a set of event

139
00:09:31,640 --> 00:09:35,998
consumers which will either get the events

140
00:09:36,094 --> 00:09:39,986
in event driven architecture from those microservices,

141
00:09:40,178 --> 00:09:43,494
or going explicitly to

142
00:09:43,532 --> 00:09:46,918
those microservices, querying them and

143
00:09:47,084 --> 00:09:50,490
storing that data into a dynamodB table.

144
00:09:51,390 --> 00:09:54,826
Let's look in the details how you can

145
00:09:55,008 --> 00:09:58,730
approach implementing those event consumers with again

146
00:09:58,800 --> 00:10:02,922
AWS services. The first pattern

147
00:10:02,986 --> 00:10:06,458
we will look into is event driven pattern.

148
00:10:06,554 --> 00:10:10,334
So if your downstream and back

149
00:10:10,372 --> 00:10:14,014
end microservices already using

150
00:10:14,132 --> 00:10:17,730
event driven architectures and producing different events,

151
00:10:18,470 --> 00:10:22,482
probably you will be using Amazon Eventbridge as

152
00:10:22,536 --> 00:10:26,520
event router and those events from

153
00:10:27,130 --> 00:10:31,222
those backend services will be

154
00:10:31,276 --> 00:10:35,074
sent to the event bridge. And in the event bridge

155
00:10:35,122 --> 00:10:38,666
you can define different rules to match a

156
00:10:38,688 --> 00:10:42,140
particular set of the events you are interested in.

157
00:10:42,670 --> 00:10:46,362
And then if those events match those

158
00:10:46,416 --> 00:10:50,258
rules they will be for example directed to a lambda

159
00:10:50,294 --> 00:10:54,830
function. Or again we have different destinations

160
00:10:59,010 --> 00:11:02,458
and for those destinations you can

161
00:11:02,564 --> 00:11:06,370
store those events, process them, change them,

162
00:11:06,520 --> 00:11:10,094
and in the end again store in a dynamodb

163
00:11:10,142 --> 00:11:13,422
table another scenario

164
00:11:13,486 --> 00:11:16,786
you can think of how to populate your dynamodB

165
00:11:16,898 --> 00:11:21,238
table with data from backend services is

166
00:11:21,324 --> 00:11:24,086
to implement a webhook. Again,

167
00:11:24,188 --> 00:11:27,866
when you implement a webhook, usually a webhook is a

168
00:11:27,888 --> 00:11:32,490
quite simple web endpoint

169
00:11:32,990 --> 00:11:36,774
which responds to get or post requests

170
00:11:36,902 --> 00:11:40,890
with some data in them. And the simplest

171
00:11:40,970 --> 00:11:45,230
way how you can do that on AWS is to implement

172
00:11:45,730 --> 00:11:49,662
those endpoint with a lambda function.

173
00:11:49,796 --> 00:11:53,790
But lambda functions, they have additional functionality

174
00:11:53,870 --> 00:11:57,150
added quite recently which is called function URLs.

175
00:11:57,230 --> 00:12:01,006
And this functionality allows you to expose your lambda

176
00:12:01,038 --> 00:12:04,938
function directly via an HTTP endpoint

177
00:12:05,054 --> 00:12:08,854
so you won't be needing an

178
00:12:08,972 --> 00:12:12,754
API gateway here to create such webhooks.

179
00:12:12,882 --> 00:12:17,160
And then you can send that

180
00:12:17,870 --> 00:12:22,486
HTTP endpoint to the teams implementing

181
00:12:22,518 --> 00:12:26,042
this or that microservice and then they will

182
00:12:26,096 --> 00:12:29,910
send HTTP requests, get post

183
00:12:30,000 --> 00:12:33,614
put or whatever you implement and how

184
00:12:33,652 --> 00:12:37,662
you agree with

185
00:12:37,716 --> 00:12:42,190
those teams and send the data to your lambda functions

186
00:12:42,630 --> 00:12:46,210
directly with HTTP requests. And then

187
00:12:46,360 --> 00:12:50,690
again in your lambda functions you can implement additional business logic.

188
00:12:51,190 --> 00:12:54,980
Maybe you will transform those events to another

189
00:12:56,330 --> 00:13:00,294
view, or you can again enrich them by

190
00:13:00,332 --> 00:13:03,766
going to and querying additional microservices in

191
00:13:03,788 --> 00:13:08,026
the back end and then in the end you will again store that

192
00:13:08,128 --> 00:13:10,570
data in a dynamodb table,

193
00:13:12,190 --> 00:13:16,426
another pattern which is quite common.

194
00:13:16,608 --> 00:13:20,554
If the downstream services can't produce events

195
00:13:20,602 --> 00:13:24,238
or can't send HTTP requests in the form of

196
00:13:24,324 --> 00:13:27,662
webhooks, probably they still have some kind of

197
00:13:27,716 --> 00:13:31,454
APIs or interfaces you can query to get

198
00:13:31,572 --> 00:13:35,538
the data for your frontend, but here you

199
00:13:35,544 --> 00:13:39,474
will need some kind of a polling mechanism how

200
00:13:39,512 --> 00:13:44,050
you will initiate connections and query those services

201
00:13:44,470 --> 00:13:48,470
the simplest way to do that is to utilize

202
00:13:48,890 --> 00:13:51,906
Amazon Eventbridge scheduler.

203
00:13:52,018 --> 00:13:55,602
So with a scheduler you can schedule

204
00:13:55,746 --> 00:13:59,478
producing some events and those events will trigger a lambda

205
00:13:59,494 --> 00:14:02,598
function. And again with scheduler you can schedule

206
00:14:02,774 --> 00:14:06,598
events to run periodically, maybe each minute,

207
00:14:06,694 --> 00:14:12,670
each day. You can even create a cron job expressions

208
00:14:13,090 --> 00:14:16,160
and identify how often

209
00:14:16,610 --> 00:14:20,862
those events should trigger. And then

210
00:14:20,996 --> 00:14:24,222
once they trigger they will invoke

211
00:14:24,286 --> 00:14:27,554
a lambda function. And again in that lambda function you can

212
00:14:27,592 --> 00:14:32,510
implement a business logic, a connection to the downstream microservices,

213
00:14:32,670 --> 00:14:36,274
to different APIs. It could be again a rest API,

214
00:14:36,322 --> 00:14:40,166
it could be a GRPC API, it could

215
00:14:40,188 --> 00:14:43,878
be maybe going to a particular queue and

216
00:14:44,044 --> 00:14:47,614
get some messages out of that queue.

217
00:14:47,762 --> 00:14:51,642
Again, depending on the contracts exposed by those

218
00:14:51,696 --> 00:14:55,194
microservices, you will consume that data into a

219
00:14:55,232 --> 00:14:59,050
lambda function and then you will again transform it

220
00:14:59,120 --> 00:15:02,574
or save as it is or in reach by

221
00:15:02,612 --> 00:15:06,014
making additional calls to the additional endpoints and

222
00:15:06,052 --> 00:15:08,830
store that data into a dynamodb table.

223
00:15:09,570 --> 00:15:13,150
So now we already have

224
00:15:13,220 --> 00:15:17,078
quite capable implementation for our backend

225
00:15:17,114 --> 00:15:20,674
for frontend pattern. And yeah, we can

226
00:15:20,712 --> 00:15:24,546
consume and get interesting data

227
00:15:24,648 --> 00:15:28,150
and necessary data for our front end from different

228
00:15:28,220 --> 00:15:31,218
resources from different microservices,

229
00:15:31,394 --> 00:15:34,834
either by schedule or by the webhook,

230
00:15:34,882 --> 00:15:38,906
or implemented an event driven architecture and

231
00:15:39,008 --> 00:15:43,162
all that data is accumulated in our dynamodB table and

232
00:15:43,216 --> 00:15:47,882
then can be consumed through a rest API by

233
00:15:47,936 --> 00:15:52,494
our front ends. But if

234
00:15:52,532 --> 00:15:56,318
we want to go into production for sure we need to think about

235
00:15:56,404 --> 00:16:00,382
additional things like security and observability and

236
00:16:00,436 --> 00:16:04,194
add those features before we

237
00:16:04,392 --> 00:16:07,540
make our service publicly available.

238
00:16:08,470 --> 00:16:12,622
For security. For sure you will need to implement

239
00:16:12,766 --> 00:16:16,402
authentication and authorization in many cases,

240
00:16:16,546 --> 00:16:20,406
and we have a service which is called Amazon Cognita and

241
00:16:20,428 --> 00:16:24,182
your frontend can go there and

242
00:16:24,236 --> 00:16:28,002
present a login form and

243
00:16:28,156 --> 00:16:32,214
your users will log in via Amazon

244
00:16:32,262 --> 00:16:35,942
Cognito. The frontend will get a JIt token

245
00:16:36,006 --> 00:16:39,114
and then you can use that Jit talking to

246
00:16:39,152 --> 00:16:42,602
authenticate into Amazon API gateway.

247
00:16:42,666 --> 00:16:45,898
And API Gateway will check the token

248
00:16:45,994 --> 00:16:50,190
and either provide or deny access to

249
00:16:50,340 --> 00:16:53,874
the endpoint. Another very

250
00:16:53,912 --> 00:16:57,746
important thing, especially when we're talking about

251
00:16:57,848 --> 00:17:01,394
different types of integrations, is that probably

252
00:17:01,512 --> 00:17:06,066
if you go in to query this or that microservice,

253
00:17:06,178 --> 00:17:10,262
you will need to store maybe an API key or some

254
00:17:10,316 --> 00:17:14,262
credentials or other secrets to

255
00:17:14,316 --> 00:17:18,518
interact with those services. And for sure it's

256
00:17:18,614 --> 00:17:21,658
a bad practice to hard code that things.

257
00:17:21,744 --> 00:17:25,546
And you will need some kind of mechanism where you will

258
00:17:25,648 --> 00:17:29,578
securely store all that secrets and

259
00:17:29,664 --> 00:17:33,614
get those secrets only when you issue particular

260
00:17:33,732 --> 00:17:37,006
calls to the downstream services. And for that you

261
00:17:37,028 --> 00:17:40,330
can use AWS secrets manager

262
00:17:40,410 --> 00:17:43,490
service. And another

263
00:17:43,560 --> 00:17:47,534
very important thing when you go into production

264
00:17:47,582 --> 00:17:51,090
is of course observability. Because we want to know

265
00:17:51,160 --> 00:17:54,740
how our service works and

266
00:17:55,290 --> 00:17:59,014
whether there are some issues or not, and we want to

267
00:17:59,052 --> 00:18:02,920
act upon any kind of

268
00:18:04,490 --> 00:18:08,682
problems or things happening with

269
00:18:08,736 --> 00:18:13,290
our services. And for that for sure we need to implement observability.

270
00:18:13,630 --> 00:18:17,290
And again, the simplest way doing that

271
00:18:17,360 --> 00:18:21,038
is to use Cloudwatch and x ray services

272
00:18:21,204 --> 00:18:24,858
and all services like API, Gateway,

273
00:18:24,954 --> 00:18:28,858
Lambda and Dynamodb. They send logs

274
00:18:28,954 --> 00:18:34,002
and metrics to Cloudwatch where you can then go

275
00:18:34,056 --> 00:18:37,858
and look for logs and metrics. And also you can

276
00:18:37,944 --> 00:18:41,362
enable integration between API Gateway and

277
00:18:41,416 --> 00:18:45,022
lambda with x ray. And x ray

278
00:18:45,086 --> 00:18:47,474
allows you to make traces.

279
00:18:47,602 --> 00:18:50,998
So if the request comes to the

280
00:18:51,084 --> 00:18:54,694
API gateway, it will generate a new trace id and

281
00:18:54,732 --> 00:18:58,194
send that information to the x ray and pass that trace

282
00:18:58,242 --> 00:19:01,690
id to a lambda function. Then a lambda function will

283
00:19:01,840 --> 00:19:07,034
make some calls to a dynamodb table or make

284
00:19:07,072 --> 00:19:11,134
some other things, and all that information will

285
00:19:11,172 --> 00:19:14,814
be recorded in an x ray. And then you can get

286
00:19:14,852 --> 00:19:18,542
a trace that this particular request went through,

287
00:19:18,596 --> 00:19:22,758
API gateway lambda function and a dynamodb

288
00:19:22,794 --> 00:19:26,354
table for example. And you can look whether there

289
00:19:26,392 --> 00:19:30,100
were some bottlenecks issues with that request or not.

290
00:19:32,470 --> 00:19:35,702
Another thing I wanted to present you

291
00:19:35,756 --> 00:19:40,182
a little bit in terms of serverless services and

292
00:19:40,316 --> 00:19:44,486
backends for front ends is service called

293
00:19:44,588 --> 00:19:48,554
AWS step functions and how

294
00:19:48,752 --> 00:19:52,234
it can also help you to implement your

295
00:19:52,272 --> 00:19:55,580
back end for front end pattern and

296
00:19:56,670 --> 00:19:59,610
in what scenarios it can be useful,

297
00:20:00,690 --> 00:20:04,094
but at first what step function does.

298
00:20:04,212 --> 00:20:08,202
It is a state meshing which consists

299
00:20:08,266 --> 00:20:11,710
of different states and transitions between those

300
00:20:11,780 --> 00:20:15,842
states and allows you to implement different workflows and

301
00:20:15,896 --> 00:20:19,460
orchestration patterns in your application.

302
00:20:21,670 --> 00:20:25,640
And it has a number of benefits

303
00:20:26,250 --> 00:20:30,834
because it has a visual representation

304
00:20:30,962 --> 00:20:35,526
you can quite easily and fast

305
00:20:35,708 --> 00:20:39,210
build prototypes and integrate with different

306
00:20:39,360 --> 00:20:42,746
services. Again, it has a lot

307
00:20:42,768 --> 00:20:46,214
of built in integrations and you won't

308
00:20:46,262 --> 00:20:50,278
be writing a lot of code for

309
00:20:50,384 --> 00:20:53,710
maybe simple transformations.

310
00:20:55,010 --> 00:20:58,474
For example, if you want to run some actions in parallel,

311
00:20:58,522 --> 00:21:02,286
for example querying different APIs at

312
00:21:02,308 --> 00:21:05,602
the same time. If you want for example have

313
00:21:05,656 --> 00:21:08,770
some scheduled actions timeouts,

314
00:21:09,350 --> 00:21:13,186
it is already built in into step functions, so you

315
00:21:13,208 --> 00:21:17,014
can write much, much less code to

316
00:21:17,052 --> 00:21:19,110
implement those interactions.

317
00:21:20,010 --> 00:21:24,370
And you can use a visual editor

318
00:21:24,450 --> 00:21:28,630
to model your workflows.

319
00:21:28,790 --> 00:21:32,710
And then there's monitoring

320
00:21:32,870 --> 00:21:36,554
features which allows you to see how

321
00:21:36,672 --> 00:21:40,170
those workflows behave.

322
00:21:40,610 --> 00:21:44,842
And let's look at an example how you can utilize

323
00:21:44,906 --> 00:21:48,666
step functions to implement

324
00:21:48,858 --> 00:21:53,730
different workflows for your back ends. For front end applications.

325
00:21:54,790 --> 00:21:58,340
Let's imagine an example case

326
00:21:59,190 --> 00:22:02,242
where we are building a booking service,

327
00:22:02,376 --> 00:22:05,880
and in that booking service we will need to,

328
00:22:06,730 --> 00:22:09,110
for example, book a flight,

329
00:22:10,730 --> 00:22:14,854
hotel, maybe rent a car and

330
00:22:15,052 --> 00:22:17,320
add maybe some additional things.

331
00:22:18,430 --> 00:22:21,994
And we want to

332
00:22:22,032 --> 00:22:25,738
book this travel as a whole.

333
00:22:25,904 --> 00:22:29,050
Because for example, if I can't book a car,

334
00:22:29,200 --> 00:22:32,830
probably I'm not interested in going to Grand Canyon

335
00:22:33,410 --> 00:22:37,162
or I'm not interested in a flight

336
00:22:37,226 --> 00:22:40,558
if I can't book a hotel. But if

337
00:22:40,644 --> 00:22:44,402
I already booked a flight and can't book

338
00:22:44,456 --> 00:22:47,506
a hotel, there should be a mechanism to revert all

339
00:22:47,528 --> 00:22:49,330
the previous steps,

340
00:22:50,390 --> 00:22:53,938
and usually it is implemented with

341
00:22:54,104 --> 00:22:57,240
a saga pattern which

342
00:22:57,930 --> 00:23:04,230
allows you to roll back different actions

343
00:23:04,810 --> 00:23:08,950
and use this sequence

344
00:23:09,030 --> 00:23:12,954
diagram to implement some kind

345
00:23:12,992 --> 00:23:16,250
of a distributed transaction when you

346
00:23:16,320 --> 00:23:20,006
need to interact with different

347
00:23:20,128 --> 00:23:23,886
services. For example, book hotel, flight and

348
00:23:23,988 --> 00:23:27,502
rent a car. And if something goes

349
00:23:27,556 --> 00:23:31,114
wrong at each step of this sequence,

350
00:23:31,242 --> 00:23:35,186
you will need to have a way to revert everything

351
00:23:35,288 --> 00:23:39,426
back. And the sega pattern is an implementation of

352
00:23:39,608 --> 00:23:43,234
such approach. So for

353
00:23:43,272 --> 00:23:47,730
example, if in my workflow book flight

354
00:23:47,890 --> 00:23:51,590
fails, I already booked a hotel, but I

355
00:23:51,740 --> 00:23:56,562
also implemented a cancellation

356
00:23:56,626 --> 00:24:00,886
logic, so rollback

357
00:24:00,918 --> 00:24:04,780
logic to cancel hotel. So once my

358
00:24:05,150 --> 00:24:08,614
book flight call fails, for some reasons,

359
00:24:08,742 --> 00:24:12,938
I can go and cancel hotel

360
00:24:13,114 --> 00:24:16,766
booking. And these workflows you

361
00:24:16,788 --> 00:24:20,750
can easily implement with step functions. And a good thing here

362
00:24:20,820 --> 00:24:25,630
is that step functions can be even integrated

363
00:24:25,710 --> 00:24:30,270
with API gateway, and you can integrate them directly.

364
00:24:30,350 --> 00:24:33,826
So for example, if you want to build some kind of

365
00:24:33,928 --> 00:24:37,830
a workflow for your backend, for frontend

366
00:24:37,980 --> 00:24:42,230
and present some data, accumulated data

367
00:24:42,300 --> 00:24:45,734
from different microservices or orchestrate calls to

368
00:24:45,772 --> 00:24:49,322
different microservices, aggregate some

369
00:24:49,456 --> 00:24:52,666
data and then send it to the front end. You can

370
00:24:52,688 --> 00:24:55,718
do that easily with step functions.

371
00:24:55,814 --> 00:24:59,754
So you can make different calls. Again, you can make

372
00:24:59,792 --> 00:25:03,530
those calls sequentially, or you can make them in parallel.

373
00:25:03,610 --> 00:25:08,298
For example, if you want to just query several

374
00:25:08,394 --> 00:25:11,790
endpoints simultaneously, you can use

375
00:25:11,860 --> 00:25:15,474
parallel execution and then you can get all the

376
00:25:15,512 --> 00:25:19,534
responses back and aggregate them and via

377
00:25:19,582 --> 00:25:23,106
API gateway send the response back to the customer.

378
00:25:23,208 --> 00:25:27,126
So it is quite powerful service and you

379
00:25:27,148 --> 00:25:31,190
can implement different workflows with step functions.

380
00:25:31,770 --> 00:25:36,578
And the good thing, as I mentioned, there's synchronous

381
00:25:36,754 --> 00:25:40,890
invoke mode, so you can use it

382
00:25:41,040 --> 00:25:45,462
for real time or close to real time interaction.

383
00:25:45,526 --> 00:25:49,930
So I make a call step function state mesh and start executing,

384
00:25:51,250 --> 00:25:54,714
get some data and return those data via

385
00:25:54,762 --> 00:25:58,394
API gateway. Or you can also use them asynchronously

386
00:25:58,442 --> 00:26:02,470
so a query comes asynchronous, invocation starts

387
00:26:02,570 --> 00:26:06,180
maybe doing some updates and things

388
00:26:06,630 --> 00:26:10,350
and the response is sent immediately

389
00:26:10,430 --> 00:26:13,634
back to the caller that yeah, we got

390
00:26:13,832 --> 00:26:16,566
your request, we start processing that.

391
00:26:16,668 --> 00:26:20,454
So here you have different ways of

392
00:26:20,492 --> 00:26:22,710
implementing such interactions.

393
00:26:23,930 --> 00:26:28,154
Also, to conclude my talk, I wanted to share a

394
00:26:28,192 --> 00:26:31,482
couple of interesting and useful resources and

395
00:26:31,536 --> 00:26:34,762
links if you want to learn more

396
00:26:34,816 --> 00:26:38,666
about microservices, about different

397
00:26:38,848 --> 00:26:42,634
patterns, well architected

398
00:26:42,682 --> 00:26:46,222
framework and also some sample code

399
00:26:46,356 --> 00:26:49,646
how to implement business logic in a form of

400
00:26:49,668 --> 00:26:53,106
lambda functions with for example typescript which

401
00:26:53,128 --> 00:26:56,962
is quite common language for the front end

402
00:26:57,016 --> 00:27:01,570
developers. There are tons of samples and

403
00:27:01,720 --> 00:27:05,414
things you can utilize to start

404
00:27:05,532 --> 00:27:09,158
developing your serverless back end for front end

405
00:27:09,324 --> 00:27:13,270
applications. And again, you're not limited only

406
00:27:13,340 --> 00:27:17,566
for implementing back end for frontend pattern.

407
00:27:17,618 --> 00:27:20,938
You can use serverless services to

408
00:27:21,024 --> 00:27:24,970
implement any other microservices and even

409
00:27:25,040 --> 00:27:28,474
you can use them to implement back end

410
00:27:28,512 --> 00:27:32,854
for your micro

411
00:27:32,902 --> 00:27:36,734
front end applications. So we have a set

412
00:27:36,772 --> 00:27:40,474
of new articles and examples produced

413
00:27:40,522 --> 00:27:44,190
by my colleagues how to deal with

414
00:27:44,340 --> 00:27:47,934
and how to build micro front ends on AWS as

415
00:27:47,972 --> 00:27:51,966
well. With that thank you very much and again,

416
00:27:52,068 --> 00:27:55,702
if you will have any questions you can reach me on Twitter. Her and

417
00:27:55,756 --> 00:27:59,362
I will be happy to discuss any kind of projects

418
00:27:59,506 --> 00:28:01,810
you have in mind to build on serverless.

