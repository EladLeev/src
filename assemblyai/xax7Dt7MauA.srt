1
00:00:22,970 --> 00:00:26,650
Hey everyone, I'm excited to be talking today about a subject

2
00:00:26,730 --> 00:00:30,566
that's very close to my heart and, and something I've been thinking about for

3
00:00:30,588 --> 00:00:33,894
a while and have been working on. And this is diving into this

4
00:00:33,932 --> 00:00:37,606
question of why browser devtools don't understand

5
00:00:37,708 --> 00:00:41,800
your code. And just to give some background, I've had a lot of experience

6
00:00:42,110 --> 00:00:45,846
and I think many people in the audience are familiar

7
00:00:45,958 --> 00:00:49,690
with these development environments like Visual C Plus plus

8
00:00:49,760 --> 00:00:53,130
code and then these game engines that understand your code,

9
00:00:53,200 --> 00:00:57,322
meaning that while you're devming you have some kind of visual representation or

10
00:00:57,376 --> 00:01:00,126
something in the devtool that really works with your code in the terms of your

11
00:01:00,148 --> 00:01:03,838
code. And conversely, we see when we're working in the web

12
00:01:03,924 --> 00:01:07,082
using JavaScript and typescript to build front ends,

13
00:01:07,146 --> 00:01:10,834
we have tools that don't really understand our code. They do other things.

14
00:01:11,032 --> 00:01:14,514
And in this talk I'm going to be talking about why I think this

15
00:01:14,552 --> 00:01:17,954
has been historically the case. And I'm also going to be talking about

16
00:01:17,992 --> 00:01:22,114
this project that I've been working on recently called Mighty Meld, which aims

17
00:01:22,162 --> 00:01:25,286
to close that gap. So let's get a little bit

18
00:01:25,308 --> 00:01:28,646
into the history. My personal experience when

19
00:01:28,668 --> 00:01:32,034
I started developing early in my career, I was doing Windows

20
00:01:32,082 --> 00:01:35,786
apps and I got used to this Windows form builder where you could build the

21
00:01:35,808 --> 00:01:39,766
UI visually in the devtool and then connect that really elegantly

22
00:01:39,878 --> 00:01:43,382
to code in Xcode. Building iOS

23
00:01:43,446 --> 00:01:46,926
apps, there's this thing called interface builder that I used quite

24
00:01:46,948 --> 00:01:50,798
a bit, which allows you to visually structure your app using

25
00:01:50,884 --> 00:01:54,206
a visual tool and then sort of code at

26
00:01:54,228 --> 00:01:57,730
the same time using a real programming language.

27
00:01:58,230 --> 00:02:02,546
The experience that I think is actually the best in this regard is

28
00:02:02,648 --> 00:02:06,930
what I've experienced with the Unity game engine.

29
00:02:07,080 --> 00:02:10,894
And this is pretty standard practice for game engines.

30
00:02:10,942 --> 00:02:13,654
And I'll just hop right now to this video so we can just get some

31
00:02:13,692 --> 00:02:17,126
visuals of what I kind of think of is like a

32
00:02:17,148 --> 00:02:21,058
kind of peak experience. So basically this video is from game makers

33
00:02:21,074 --> 00:02:24,634
toolkit channel, and they're going to be going

34
00:02:24,672 --> 00:02:27,754
in and basically making a game over screen that appears on their

35
00:02:27,792 --> 00:02:31,546
game. And the way you do this in unity is very

36
00:02:31,568 --> 00:02:35,610
visual and very intuitive and also

37
00:02:35,680 --> 00:02:39,566
very powerful because you can code anything you want in this

38
00:02:39,588 --> 00:02:42,558
system. And as you know, games do a lot of things that require quite a

39
00:02:42,564 --> 00:02:46,842
lot of very real code. And so you basically see here they're

40
00:02:46,906 --> 00:02:50,978
adding a game over text and now they're going to be adding a button

41
00:02:51,144 --> 00:02:55,218
and you just kind of drag these things on, use visual tools to

42
00:02:55,304 --> 00:02:59,106
set them up at no point are you messing with CSS, going back

43
00:02:59,128 --> 00:03:02,502
and forth, hopping through like many text files to size something,

44
00:03:02,556 --> 00:03:05,720
you size it directly, which I think is a great,

45
00:03:06,090 --> 00:03:09,414
I found to be a great experience working here in

46
00:03:09,452 --> 00:03:12,726
this environment. And you can also, if you want to do an

47
00:03:12,748 --> 00:03:15,686
on click handler, you can see here there is no on click handler.

48
00:03:15,718 --> 00:03:18,570
And now they're basically going to go ahead and hop over to the code.

49
00:03:18,720 --> 00:03:21,734
And you see here, everything's in c sharp.

50
00:03:21,862 --> 00:03:25,046
And you can go and add your event handler,

51
00:03:25,078 --> 00:03:28,714
in this case restart game, go ahead and import some deep

52
00:03:28,762 --> 00:03:33,694
unity guts on the scene management as

53
00:03:33,732 --> 00:03:36,158
a package. I'm not sure what it's called in C sharp actually. It's been a

54
00:03:36,164 --> 00:03:40,286
while, but anyway, call this load scene function basically when the callback

55
00:03:40,318 --> 00:03:44,098
is triggered, and now you can go and go to

56
00:03:44,104 --> 00:03:47,700
your on click handler, link it up to that actual piece of code,

57
00:03:49,990 --> 00:03:52,040
and then without all wired up,

58
00:03:52,730 --> 00:03:56,102
you can basically play your game and see it all happening

59
00:03:56,156 --> 00:03:59,446
right there on the screen. And this is what

60
00:03:59,468 --> 00:04:03,254
I think of as a peak development experience. This was my peak

61
00:04:03,302 --> 00:04:06,438
development experience when I worked for Unity.

62
00:04:06,614 --> 00:04:10,266
I didn't work for Unity, sorry, when I was working on a lot

63
00:04:10,288 --> 00:04:13,786
of unity games and some VR projects in

64
00:04:13,808 --> 00:04:17,114
unity as well. And it's really cool actually.

65
00:04:17,152 --> 00:04:20,718
You can even pause the game while you're running it and look at all the

66
00:04:20,804 --> 00:04:24,014
stuff contributing to what you see on screen and understand it

67
00:04:24,052 --> 00:04:28,114
visually in a way that's code aware. And many

68
00:04:28,152 --> 00:04:31,554
years ago I transitioned from Unity to doing web work. And ever since then

69
00:04:31,592 --> 00:04:35,314
I've been asking myself, why can't the web have

70
00:04:35,512 --> 00:04:39,346
something like this, this way of working?

71
00:04:39,528 --> 00:04:42,740
Because the way we work currently in the web is

72
00:04:43,990 --> 00:04:47,606
you get typical view. You have your browser, and of course you have

73
00:04:47,628 --> 00:04:50,646
your vs code or your text editor. But while you're looking at your

74
00:04:50,668 --> 00:04:54,438
app, you have this view, which is the inspect view, the typical chrome devtools

75
00:04:54,534 --> 00:04:57,882
inspect view, firefox. All browsers have something like

76
00:04:57,936 --> 00:05:01,514
this, where you can see the Dom of your app

77
00:05:01,632 --> 00:05:04,870
as you're working on it. And this is certainly useful,

78
00:05:05,030 --> 00:05:09,226
but it's not very close to your code. And as apps

79
00:05:09,258 --> 00:05:12,922
have gotten more and more and more sophisticated, the gap between the Dom

80
00:05:12,986 --> 00:05:16,222
and what's in your code is getting bigger and bigger. In the react world,

81
00:05:16,276 --> 00:05:19,906
we have the react devtools, which show you can actually

82
00:05:19,928 --> 00:05:23,698
show you some of your components, but the react devtools are also something

83
00:05:23,784 --> 00:05:27,026
processed. This is a

84
00:05:27,048 --> 00:05:30,226
bunch of stuff here that I don't see in my code at all. And so

85
00:05:30,248 --> 00:05:34,162
the picture that this devtool shows me isn't really a code accurate

86
00:05:34,306 --> 00:05:37,654
picture. And this has really been

87
00:05:37,692 --> 00:05:41,190
something I've been thinking about for a long time and started working on this project

88
00:05:41,260 --> 00:05:44,486
because I just feel like we can do better in the web. And then you

89
00:05:44,508 --> 00:05:47,754
start to have to ask yourself the central question of this

90
00:05:47,792 --> 00:05:52,122
talk. Why don't we have this yet? Why don't browser devtools understand your

91
00:05:52,176 --> 00:05:55,626
code? And so before I start getting into the way, I think we

92
00:05:55,648 --> 00:05:58,942
could fix this, let's talk a little bit about the history and how this came

93
00:05:58,996 --> 00:06:02,510
to be. If you're an old timer like me, I think

94
00:06:02,580 --> 00:06:05,886
I qualify as one, because I actually remember Dreamweaver when

95
00:06:05,908 --> 00:06:08,706
it came out. And a lot of old timers, when I talk about this,

96
00:06:08,728 --> 00:06:12,274
they say, dreamweaver that failed, can't be done.

97
00:06:12,392 --> 00:06:15,902
And Dreamweaver actually didn't fail. It was a really successful

98
00:06:15,966 --> 00:06:19,394
product in terms of as maybe the first no code

99
00:06:19,432 --> 00:06:22,834
tool, but it didn't achieve its aim of making an environment

100
00:06:22,882 --> 00:06:26,434
where you could go back and forth between a Photoshop like visual

101
00:06:26,482 --> 00:06:30,194
experience and real code editing. And that was what Dreamweaver

102
00:06:30,242 --> 00:06:34,106
was trying to aspire to. What ended up happening in practice is if you

103
00:06:34,128 --> 00:06:37,302
started to make a complex site, you started layering

104
00:06:37,366 --> 00:06:40,106
some javascript and other stuff like that,

105
00:06:40,288 --> 00:06:43,914
and working a lot. In Dreamweaver, the code got progressively more

106
00:06:43,952 --> 00:06:46,826
messy the more you worked in Dreamweaver,

107
00:06:46,938 --> 00:06:50,846
and so it wasn't really suitable for this back and forth between code

108
00:06:50,948 --> 00:06:54,222
and design. And also if you wrote a bunch of code,

109
00:06:54,276 --> 00:06:57,658
Dreamweaver wouldn't necessarily understand it, and things just

110
00:06:57,684 --> 00:07:00,994
kind of fell apart. And so this dream of

111
00:07:01,032 --> 00:07:04,450
having a real synchronicity between a visual tool and code

112
00:07:04,520 --> 00:07:08,034
goes back. This is about 20 years that remeaver goes

113
00:07:08,072 --> 00:07:11,700
back. And a lot of old timers are like, we tried it, it didn't work

114
00:07:12,230 --> 00:07:15,578
and can't be done. Is the corridor

115
00:07:15,774 --> 00:07:19,142
follow one of those? If you start thinking in that way, of course we can

116
00:07:19,196 --> 00:07:22,598
think about things afresh today. But anyway, I dont want to

117
00:07:22,604 --> 00:07:26,522
paint Dreamweaver as too much of a failure, because Dreamweaver was actually a massive success.

118
00:07:26,656 --> 00:07:29,626
They just sunset the project a couple of years ago.

119
00:07:29,808 --> 00:07:33,674
I think it started in the late ninety s, and Dreamweaver was

120
00:07:33,712 --> 00:07:38,142
really the forerunner of a lot of these no code tools and things

121
00:07:38,196 --> 00:07:41,774
like Weebly Wix, squarespace and

122
00:07:41,812 --> 00:07:45,246
webflow. These tools where you can work visually in a visual tool and

123
00:07:45,268 --> 00:07:48,766
generate code. And these have been a tremendous success and are

124
00:07:48,788 --> 00:07:52,434
really great for people who don't know how to code, want to make

125
00:07:52,472 --> 00:07:55,682
something that simple. But of course, as all we know,

126
00:07:55,736 --> 00:07:59,214
we're, I think, pretty much everyone in the audience here, Javascript developer

127
00:07:59,262 --> 00:08:02,982
or in that ecosystem, there are a lot of things that you need code

128
00:08:03,036 --> 00:08:06,242
for. You need certain excellent performance,

129
00:08:06,306 --> 00:08:09,494
you need a little lot of sophistication, you want to bring together a lot of

130
00:08:09,532 --> 00:08:13,174
the third party libraries, you want to connect to your certain microservices

131
00:08:13,222 --> 00:08:16,826
or your CMS layer. Once you enter the world of code, you can do

132
00:08:16,848 --> 00:08:21,366
anything. And when you're building really complex and sophisticated projects,

133
00:08:21,478 --> 00:08:24,922
or maybe smaller projects that need certain things to happen

134
00:08:24,976 --> 00:08:28,654
very well, we turn to code over and over again because these platforms don't give

135
00:08:28,692 --> 00:08:32,206
us the flexibility. So no

136
00:08:32,228 --> 00:08:35,870
code is great. But obviously as developers we want something that works with our code.

137
00:08:35,940 --> 00:08:39,726
And these sort of design to code solutions

138
00:08:39,758 --> 00:08:42,846
haven't been able to go in the other direction.

139
00:08:43,038 --> 00:08:46,626
Another answer that an old timer will tell you, not quite as

140
00:08:46,648 --> 00:08:50,366
old as remover, but shortly thereafter there was this decade

141
00:08:50,398 --> 00:08:53,718
where Flash was driving a lot of the experiences on the web,

142
00:08:53,804 --> 00:08:57,714
and Flash has a flash actually really succeeded at unifying

143
00:08:57,842 --> 00:09:01,366
code and the visuals. And a lot of people who were

144
00:09:01,468 --> 00:09:04,666
building things during that time remember very fondly how amazing it

145
00:09:04,688 --> 00:09:07,914
was to be able to work with an artist and have

146
00:09:07,952 --> 00:09:11,130
this sort of visual tool that could help you develop that also

147
00:09:11,200 --> 00:09:14,414
was tightly connected to your code.

148
00:09:14,612 --> 00:09:18,494
Flash didn't make it through the transition to mobile for

149
00:09:18,532 --> 00:09:21,966
performance reasons. Another thing that's interesting about Flash that

150
00:09:21,988 --> 00:09:25,646
I think is especially pertinent to sort of where

151
00:09:25,668 --> 00:09:29,918
I see some of the challenges of making this kind of devtool is Flash's shortcut.

152
00:09:30,014 --> 00:09:33,122
So Flash did everything in the early days,

153
00:09:33,176 --> 00:09:37,058
you would have a flash movie, and so it's kind of like canvas today,

154
00:09:37,144 --> 00:09:40,306
where you'd have a box where you would be drawing your flash content,

155
00:09:40,488 --> 00:09:43,842
and that's where everything lived. And if you're working in the authoring environment,

156
00:09:43,906 --> 00:09:48,246
you'd be authoring something to live in that box. And that actually

157
00:09:48,428 --> 00:09:52,134
makes things much, much simpler. Flash tried to make the transition

158
00:09:52,182 --> 00:09:56,106
to being sort of anywhere on your web page more

159
00:09:56,128 --> 00:09:59,420
into this document model we see in the web,

160
00:10:00,590 --> 00:10:04,266
and they didn't really succeed with that. There's this thing

161
00:10:04,288 --> 00:10:07,846
called Flex that I use some and was

162
00:10:07,888 --> 00:10:11,086
a little bit successful, but it didn't seem to really have that same kind of

163
00:10:11,108 --> 00:10:14,206
dynamism of just the pure open web with everything,

164
00:10:14,308 --> 00:10:17,682
open standards, all kinds of stuff popping into the page,

165
00:10:17,736 --> 00:10:21,058
being dynamically loaded with different technologies. And so

166
00:10:21,224 --> 00:10:25,278
I think Flash didn't

167
00:10:25,374 --> 00:10:28,226
adequately solve the problem in sort of what we need for the web. So I

168
00:10:28,248 --> 00:10:31,542
think that's kind of why Flash isn't around and why something like Flash hasn't taken

169
00:10:31,596 --> 00:10:34,280
over to provide this for us.

170
00:10:35,610 --> 00:10:39,318
But the third answer to the question and the heart of

171
00:10:39,324 --> 00:10:42,440
my talk is, actually, we can do this. Now,

172
00:10:43,210 --> 00:10:46,522
we might have not had these in the past, but the time is right for

173
00:10:46,576 --> 00:10:50,234
web devtools to start to understand your code and allow

174
00:10:50,272 --> 00:10:55,858
you to work visually with it. And core

175
00:10:55,894 --> 00:10:59,966
to making this work is to have some kind of part

176
00:10:59,988 --> 00:11:03,274
of your code, some visual part of your code for the devtool

177
00:11:03,322 --> 00:11:06,974
to work on. And so this is again, kind of like why

178
00:11:07,012 --> 00:11:10,734
this is easy in other environments and difficult on the web in other environments,

179
00:11:10,782 --> 00:11:14,926
whether it's unity interface builder or flash, you have this scene

180
00:11:14,958 --> 00:11:18,306
file, which is basically this thing that has all the geometry and all

181
00:11:18,328 --> 00:11:21,810
the layout in it, and it's closely tied to the UI.

182
00:11:21,970 --> 00:11:25,526
And the other thing that these environments have going for them is that

183
00:11:25,548 --> 00:11:28,866
they're closed, they're owned by someone like unity, Apple, Adobe,

184
00:11:28,898 --> 00:11:32,134
they own these various environments. And so if you have this

185
00:11:32,172 --> 00:11:35,974
closed environment and a scene file where everything is in these xy

186
00:11:36,022 --> 00:11:39,706
coordinates, it can become pretty easy to then make

187
00:11:39,728 --> 00:11:43,466
it. Well, not just easy, it's natural. It happens over and over and over again

188
00:11:43,568 --> 00:11:46,938
to make a dev tools that acts on that scene file.

189
00:11:47,034 --> 00:11:49,690
The challenges with the web are twofold.

190
00:11:49,770 --> 00:11:52,720
One, what is the scene file for the web?

191
00:11:54,770 --> 00:11:58,174
What dictates what things look like separate from the functionality

192
00:11:58,222 --> 00:12:01,860
on the web? And then the other thing is like, well, the web is

193
00:12:03,270 --> 00:12:06,078
no one controls other standards bodies,

194
00:12:06,254 --> 00:12:09,874
standards bodies and corporate groups and things. But the web is kind

195
00:12:09,912 --> 00:12:13,602
of an open, anarchistic environment

196
00:12:13,666 --> 00:12:17,798
where there's no one dictating how things get dont. And so

197
00:12:17,884 --> 00:12:20,918
sort of back to, before we get into my answer as to why I think

198
00:12:20,924 --> 00:12:24,022
this can be done now, in the whole history of the web, it's been a

199
00:12:24,076 --> 00:12:27,594
constant challenge. And if we look at the evolution of what you could call

200
00:12:27,632 --> 00:12:31,210
the scene file for the web, actually, in the early days of the web,

201
00:12:31,280 --> 00:12:34,762
in Tim Berner's Lee time,

202
00:12:34,816 --> 00:12:38,494
when he was originating the web, there was kind of a scene file. HTML is

203
00:12:38,532 --> 00:12:41,982
a basic visual description, and you could

204
00:12:42,036 --> 00:12:46,250
see devtools working really well on that. Actually, Dreamweaver, if you only have HTML,

205
00:12:46,410 --> 00:12:50,258
is a really pretty good tool because it's pretty one to one with

206
00:12:50,344 --> 00:12:53,586
what you're working on under the hood. The challenge with the web is that very

207
00:12:53,608 --> 00:12:57,154
quickly people started adding CSS and JavaScript to

208
00:12:57,192 --> 00:13:00,594
HTML in order to have functionality, global control of

209
00:13:00,632 --> 00:13:04,086
styles, all the nice things we kind of take for granted now in

210
00:13:04,108 --> 00:13:07,414
like the mid to late ninety s. And that made things

211
00:13:07,452 --> 00:13:10,834
a lot more challenging to separate the visual

212
00:13:10,882 --> 00:13:14,762
layer from the functional layer, to sort of break out a part

213
00:13:14,816 --> 00:13:18,166
of the code that you could kind of see visually and that would relate

214
00:13:18,198 --> 00:13:21,740
to what you saw on the screen while you were running

215
00:13:22,350 --> 00:13:25,614
your site and in the industry. This is I guess

216
00:13:25,652 --> 00:13:29,674
probably mid to late 90s that these things came in. And sometime

217
00:13:29,722 --> 00:13:33,582
around the early to mid aughts, NBC started

218
00:13:33,636 --> 00:13:36,942
to become really a dominant way of thinking

219
00:13:36,996 --> 00:13:40,818
about the web. So thinking about when Ruby on rails appeared and

220
00:13:40,904 --> 00:13:44,654
things like that. Cake, PHP and various NBC

221
00:13:44,702 --> 00:13:48,514
frameworks started to have these template layers that abstract away some

222
00:13:48,552 --> 00:13:52,366
of the visual. And then there were actually like template

223
00:13:52,398 --> 00:13:55,942
builders you could get, but it didn't really get you tools deep into the app

224
00:13:55,996 --> 00:13:59,574
because the templates were very, very shallow visually and not as

225
00:13:59,612 --> 00:14:03,242
connected to what was happening in the rest of the app. And then about

226
00:14:03,376 --> 00:14:06,666
ten years ago, with the advent of react, we got

227
00:14:06,688 --> 00:14:10,154
this thing called JSX. And so

228
00:14:10,272 --> 00:14:14,122
JSX is actually very powerful and very

229
00:14:14,176 --> 00:14:17,406
clean way of separating what appears on

230
00:14:17,428 --> 00:14:21,114
the screen from what doesn't appear on the screen, in a way that's very connected

231
00:14:21,242 --> 00:14:24,490
to functionality and also the sort of component,

232
00:14:24,570 --> 00:14:28,622
the way components work of really bundling together functionality with

233
00:14:28,676 --> 00:14:32,278
display in a way that's building block

234
00:14:32,314 --> 00:14:35,906
like. And so my sort of thinking as to why it's taken so

235
00:14:35,928 --> 00:14:38,098
long for us to really be able to do this on the web has a

236
00:14:38,104 --> 00:14:42,418
lot to do with the time it took for JSX to kind of appear

237
00:14:42,514 --> 00:14:45,846
and get to a point of maturity. And now

238
00:14:45,868 --> 00:14:48,920
that we're here, this kind of thing seems very possible,

239
00:14:49,770 --> 00:14:53,946
and doesn't just seem possible, I've been working with

240
00:14:53,968 --> 00:14:57,434
some people, we've been building this thing called

241
00:14:57,472 --> 00:15:01,926
Mighty Meld, which is a code aware devtool that basically understands

242
00:15:02,038 --> 00:15:05,494
your code. And by your code I mean the JSX

243
00:15:05,542 --> 00:15:08,782
and the style part of your code.

244
00:15:08,916 --> 00:15:11,950
So I'm going to talk a little bit about how this works and

245
00:15:12,100 --> 00:15:16,320
how it all can be done in the sort of open standards world

246
00:15:16,690 --> 00:15:20,098
of the web. But before I talk about how it works, I'm going to

247
00:15:20,104 --> 00:15:23,602
give a brief demo so you can see kind of what it is and get

248
00:15:23,736 --> 00:15:26,530
a feel for Mightymeld.

249
00:15:27,670 --> 00:15:31,480
So let's hop over. I have here

250
00:15:33,130 --> 00:15:36,546
a react project. So it's

251
00:15:36,578 --> 00:15:40,354
basically like standard react project with components.

252
00:15:40,402 --> 00:15:43,958
It's built using shocker UI.

253
00:15:44,054 --> 00:15:47,446
And what I've done to this project is I've added the Mightymeld

254
00:15:47,558 --> 00:15:51,722
runtime. I've set up plugin in

255
00:15:51,776 --> 00:15:54,854
veat and then I've set up this config

256
00:15:54,902 --> 00:15:59,966
file. Actually the installer set this up for me, but it

257
00:15:59,988 --> 00:16:03,258
basically has a command for how to run my dev server.

258
00:16:03,354 --> 00:16:07,486
And then with these things in place, I can do NPX mighty

259
00:16:07,518 --> 00:16:10,974
meld and it'll

260
00:16:11,022 --> 00:16:14,606
pop up in this mighty meld studio.

261
00:16:14,798 --> 00:16:18,958
And here I see my

262
00:16:18,984 --> 00:16:22,280
app running. And so here I can see my app.

263
00:16:23,770 --> 00:16:27,286
And actually I got two versions. Let's close this down for a

264
00:16:27,308 --> 00:16:30,598
second. So my app is actually running here

265
00:16:30,684 --> 00:16:34,010
in Mightymeld and this is just an iframed version

266
00:16:34,750 --> 00:16:38,746
of my app. And so

267
00:16:38,768 --> 00:16:42,554
far this is actually pretty normal way of developing. You can even

268
00:16:42,752 --> 00:16:46,006
use your traditional chrome devtools if you want to

269
00:16:46,048 --> 00:16:49,690
understand what's going on in the Dom or to see the console.

270
00:16:49,850 --> 00:16:53,582
But if I click this edit button, that's where things start to get

271
00:16:53,716 --> 00:16:59,194
interesting. As I click around, I see not

272
00:16:59,252 --> 00:17:03,106
the Dom, but I see actually my code. And so you can

273
00:17:03,128 --> 00:17:06,654
see there's this react tree over here. I'm clicking in the sidebar

274
00:17:06,782 --> 00:17:11,186
component. As I click on different things, the pieces

275
00:17:11,218 --> 00:17:14,870
that drive them highlight, everything is component aware

276
00:17:17,050 --> 00:17:20,854
and also sort of JSX aware. So this is actually being

277
00:17:20,892 --> 00:17:24,154
drawn in a map. And I can at any point

278
00:17:24,192 --> 00:17:27,530
hop over open in editor and basically

279
00:17:27,600 --> 00:17:31,466
see what's going on here. So you see this thing on the left is a

280
00:17:31,488 --> 00:17:34,874
representation of my JSX and includes things

281
00:17:34,912 --> 00:17:38,366
like Navlink's mapping. Every item is this map. And so when I

282
00:17:38,388 --> 00:17:42,286
select this, it's one thing in the JSX and four

283
00:17:42,308 --> 00:17:45,898
things on the screen. As you would expect from the way

284
00:17:46,004 --> 00:17:49,570
it's written, I can also see props

285
00:17:50,390 --> 00:17:54,306
that are put on this same props you see here appear here. So you

286
00:17:54,328 --> 00:17:58,174
can see the props. And for standard props

287
00:17:58,222 --> 00:18:01,222
you get nice drop downs where you can work with things.

288
00:18:01,276 --> 00:18:05,414
And so the first thing that this development environment gives you is

289
00:18:05,452 --> 00:18:09,282
a way of inspecting your app that's code aware.

290
00:18:09,346 --> 00:18:12,466
So you can inspect, you can see what's going on and everything's

291
00:18:12,498 --> 00:18:16,358
phrased in terms of your code. Super useful for hopping

292
00:18:16,374 --> 00:18:19,594
into a new project and trying to understand what component drives what.

293
00:18:19,632 --> 00:18:23,558
And as you can see, as I click around, this is a tv series component.

294
00:18:23,654 --> 00:18:26,942
It has a movie list. I can either drill down this way

295
00:18:27,076 --> 00:18:31,146
or I can drill down that way to drill down deeply into the movie

296
00:18:31,178 --> 00:18:34,846
cards or even like the bookmark icon and see how everything

297
00:18:35,028 --> 00:18:39,038
is put together right here. And so it's

298
00:18:39,054 --> 00:18:42,706
pretty rich inspection experience. From there

299
00:18:42,728 --> 00:18:46,370
I can go and change things around.

300
00:18:46,520 --> 00:18:50,242
So to the extent that things appear as JSX or styles,

301
00:18:50,386 --> 00:18:54,134
they can be edited. So I can call this my

302
00:18:54,172 --> 00:18:57,494
movies and it updates the

303
00:18:57,532 --> 00:19:01,960
app right there. I can duplicate this or

304
00:19:02,650 --> 00:19:06,650
be there twice or delete it. And basically

305
00:19:06,720 --> 00:19:10,314
as I'm doing this, you can then see that these changes are happening to

306
00:19:10,352 --> 00:19:13,618
the source code on my local disk. So it's a devtool flow.

307
00:19:13,734 --> 00:19:16,960
It's just kind of doing the same code updates I would do

308
00:19:17,410 --> 00:19:19,550
if I was typing.

309
00:19:21,650 --> 00:19:25,454
And then you can move things around. Let's say I

310
00:19:25,492 --> 00:19:29,326
wanted to take this and put it above like the title

311
00:19:29,358 --> 00:19:32,594
above this information so I could drag it up here and

312
00:19:32,632 --> 00:19:36,286
it reorders it. And then as I'm building, I can hop

313
00:19:36,318 --> 00:19:40,214
over into drive mode and experience the app and

314
00:19:40,252 --> 00:19:44,006
see how things feel. And then maybe

315
00:19:44,188 --> 00:19:47,782
I notice, oh hey, these are inconsistent. So I can hop back over to

316
00:19:47,836 --> 00:19:51,798
edit mode and move this one up as well

317
00:19:51,884 --> 00:19:55,126
to make it feel consistent because I guess this is a different component,

318
00:19:55,158 --> 00:19:59,258
right? This is the movie trend card and this one is the

319
00:19:59,424 --> 00:20:03,178
movie card. And so basically using this, I can go in and make

320
00:20:03,344 --> 00:20:07,470
changes. And I can also go in and make

321
00:20:07,540 --> 00:20:10,878
changes to styles. I dont know what kind

322
00:20:10,884 --> 00:20:14,686
of style things can we do here? It seems like.

323
00:20:14,708 --> 00:20:18,130
I bet we have, yeah, we have a gap. Like for example,

324
00:20:18,200 --> 00:20:21,378
maybe I want to reduce the gap between these so I

325
00:20:21,384 --> 00:20:23,620
can go ahead and make those, those style changes.

326
00:20:24,790 --> 00:20:28,382
And then we also have some building blocks

327
00:20:28,526 --> 00:20:36,054
set up here along

328
00:20:36,092 --> 00:20:39,494
with the building. What? These building blocks are actually

329
00:20:39,532 --> 00:20:43,066
just little scraps of JSX. And so if

330
00:20:43,088 --> 00:20:44,620
I drag, say,

331
00:20:46,670 --> 00:20:50,906
divider over here, it'll actually add the divider up

332
00:20:50,928 --> 00:20:54,810
here in my page. And so once you have this foundation of understanding the code,

333
00:20:54,880 --> 00:20:59,022
you can start to actually manipulate the code and bring some of that same feel

334
00:20:59,076 --> 00:21:02,686
of these no code builders onto your coded web app.

335
00:21:02,868 --> 00:21:07,006
Whereas you can also mess with the code if

336
00:21:07,028 --> 00:21:10,420
you want. And I'm not going to go too much further into

337
00:21:10,870 --> 00:21:14,626
some of the stuff you can build on top of this foundation. But just to

338
00:21:14,648 --> 00:21:18,298
show you a couple of things, as I had it set up here earlier,

339
00:21:18,494 --> 00:21:21,910
just having multiple views set up

340
00:21:22,060 --> 00:21:25,606
and being able to really see different views at once while

341
00:21:25,628 --> 00:21:28,902
doing your responsive design. And then

342
00:21:29,036 --> 00:21:32,694
also there's some AI set

343
00:21:32,732 --> 00:21:35,942
up. So it's like a natural way to deal with some AI.

344
00:21:36,086 --> 00:21:39,834
Make the background green if you want to change the color

345
00:21:39,872 --> 00:21:43,734
or something like that, you can give some AI

346
00:21:43,782 --> 00:21:47,386
prompts and it'll update your code right there for you. So with

347
00:21:47,408 --> 00:21:50,702
this kind of setup, you can change. And then the other thing you can do

348
00:21:50,756 --> 00:21:53,950
is you can actually make commits. And so if we look at all the

349
00:21:54,020 --> 00:21:57,806
code changes that have been done, this is very different from the typical code generation

350
00:21:57,918 --> 00:22:01,954
experience that I think many of us have maybe

351
00:22:01,992 --> 00:22:06,162
not suffered through for long. But looking at some of these older ways

352
00:22:06,216 --> 00:22:09,874
of doing this, getting a big chunk of generated code is no

353
00:22:09,912 --> 00:22:13,558
fun because this devtool is so

354
00:22:13,724 --> 00:22:17,318
synchronized with your JSX and understand your JSX so well

355
00:22:17,484 --> 00:22:20,646
and your style so well. When it makes code updates, it can actually do it

356
00:22:20,668 --> 00:22:24,362
in a very targeted way, very clean,

357
00:22:24,496 --> 00:22:28,266
surgical updates to your code based on just

358
00:22:28,288 --> 00:22:32,330
the things that you changed.

359
00:22:33,390 --> 00:22:36,906
That's kind of just basically run

360
00:22:36,928 --> 00:22:40,506
through of what mighty meld and how it feels. And now let's

361
00:22:40,538 --> 00:22:44,110
get into the interesting

362
00:22:44,260 --> 00:22:47,794
stuff around how this actually works.

363
00:22:47,912 --> 00:22:51,426
So I think, yeah, I can zoom in here. Yeah, so let

364
00:22:51,448 --> 00:22:54,958
me sort of walk through now. I can't.

365
00:22:55,054 --> 00:22:59,426
There we go. Let's walk through the basic setup

366
00:22:59,618 --> 00:23:03,718
of how this works. So Sweb app

367
00:23:03,804 --> 00:23:07,922
is the app that I'm running here. The envoy

368
00:23:07,986 --> 00:23:12,202
is actually this thing that runs locally. So the envoy is

369
00:23:12,336 --> 00:23:16,106
this thing that basically sits next to your app on your

370
00:23:16,128 --> 00:23:19,290
local machine or wherever your development environment is,

371
00:23:19,440 --> 00:23:22,890
and basically runs your app.

372
00:23:22,960 --> 00:23:26,410
And so when envoy runs your app, it does a few different

373
00:23:26,480 --> 00:23:29,758
things to it. It runs it by executing that command that I showed in

374
00:23:29,764 --> 00:23:33,280
the mighty melt JSon. It also instruments it so that

375
00:23:33,650 --> 00:23:36,834
when in the Dom, we actually can see where things

376
00:23:36,872 --> 00:23:40,274
come from in code. And it also imports a

377
00:23:40,312 --> 00:23:44,306
JavaScript package that basically provides this

378
00:23:44,328 --> 00:23:48,178
thing called the browser API. And so basically fundamental to

379
00:23:48,184 --> 00:23:51,110
the way this works. And this kind of, I think, gets back to that question

380
00:23:51,180 --> 00:23:54,680
of open standards. How do you deal with

381
00:23:55,850 --> 00:23:59,318
everyone running things in so many different ways on the web

382
00:23:59,404 --> 00:24:02,470
and the web being an open platform? And the answer to that is, well,

383
00:24:02,540 --> 00:24:06,010
we let you run your app the way you do. This works with next,

384
00:24:06,080 --> 00:24:08,938
this works with vite, it works with a bunch of other things,

385
00:24:09,104 --> 00:24:13,002
and that we use sort of

386
00:24:13,056 --> 00:24:16,794
things like a plugin and Javascript

387
00:24:16,842 --> 00:24:20,446
to augment that app when it runs. And so we can actually have some very

388
00:24:20,468 --> 00:24:24,240
standardized functionality in that app, even though

389
00:24:24,610 --> 00:24:28,722
you can kind of run it in a myriad of different

390
00:24:28,776 --> 00:24:32,066
ways. And so that's what's responsible for this app

391
00:24:32,248 --> 00:24:36,126
kind of being run and with the necessary things to talk to studio.

392
00:24:36,238 --> 00:24:39,380
And studio is this piece right here, which is,

393
00:24:39,910 --> 00:24:44,198
I guess, depicted over there. Right. And that's basically this

394
00:24:44,364 --> 00:24:47,906
interactive environment. It uses iframes

395
00:24:48,018 --> 00:24:51,814
to load the web app up and then basically uses the browser API to

396
00:24:51,852 --> 00:24:56,010
talk to that app. So if I click on something, it's actually talking to

397
00:24:56,160 --> 00:25:00,330
the browser API to understand what I'm clicking on and

398
00:25:00,400 --> 00:25:04,366
also to sort of get from the instrumented app,

399
00:25:04,468 --> 00:25:07,040
like where it is in code.

400
00:25:07,730 --> 00:25:11,674
And so with that information that allows studio

401
00:25:11,722 --> 00:25:14,160
to kind of run the app and allow me to click.

402
00:25:17,570 --> 00:25:21,086
Let's focus a little bit on the inspection experience before we get into changing

403
00:25:21,118 --> 00:25:24,946
and how things work. Just talking about the inspection experience, I click on

404
00:25:24,968 --> 00:25:28,690
something and because this browser API exists,

405
00:25:29,110 --> 00:25:33,074
I can know what I'm clicking on. And then the studio uses

406
00:25:33,122 --> 00:25:37,014
information provided by this thing called scribe to show this nice

407
00:25:37,052 --> 00:25:40,406
JSX tree and these nice styles. So let's talk a little bit about the

408
00:25:40,428 --> 00:25:45,990
scribe. What does the scribe do? Describe actually shares

409
00:25:46,150 --> 00:25:49,434
code updates. So basically it gets the code

410
00:25:49,472 --> 00:25:53,178
from the envoy. So envoy launches it gives not all the

411
00:25:53,184 --> 00:25:56,954
code, just code that you choose in your config file.

412
00:25:57,082 --> 00:26:00,954
It's the front end code essentially to the scribe, describe processes

413
00:26:01,002 --> 00:26:05,006
it, and then has these representations of the

414
00:26:05,028 --> 00:26:08,206
JSX entities and the components and

415
00:26:08,228 --> 00:26:11,698
the styles and everything and passes those to studio. And so studio kind of

416
00:26:11,704 --> 00:26:15,746
brings the two together. It has all this information coming from scribe, and then

417
00:26:15,928 --> 00:26:19,234
the browser API lets it know what you've been clicking on.

418
00:26:19,272 --> 00:26:22,486
And so that way you can see the JSX and also go up and

419
00:26:22,508 --> 00:26:25,240
down within a component as well.

420
00:26:26,170 --> 00:26:29,974
And so that's basically how studio shows you what

421
00:26:30,012 --> 00:26:33,866
you're clicking on, what you're working on in your live

422
00:26:34,048 --> 00:26:37,546
running app. And then the

423
00:26:37,568 --> 00:26:41,420
next big piece is change. So if I go in and

424
00:26:41,870 --> 00:26:43,020
do a change,

425
00:26:46,110 --> 00:26:49,934
how does that work exactly? Right. So I drag this up here and

426
00:26:49,972 --> 00:26:53,246
it updates on my screen. Also, I see it's updated in my diff.

427
00:26:53,348 --> 00:26:56,560
So how does that work? And that basically

428
00:26:57,510 --> 00:27:01,858
is a communication process where the studio basically

429
00:27:01,944 --> 00:27:06,146
tells the scribe what kind of move you want it to make. And then the

430
00:27:06,168 --> 00:27:09,814
scribe figures out what the new code needs to be and then

431
00:27:09,852 --> 00:27:15,122
passes the code update over to envoy and also passes updated representations

432
00:27:15,186 --> 00:27:18,390
to studio. So studio can actually update this tree.

433
00:27:18,810 --> 00:27:22,418
If I drag this, basically it gets a new tree from scribe

434
00:27:22,434 --> 00:27:25,766
and also updates the code and takes advantage of hot reload

435
00:27:25,878 --> 00:27:29,402
to make the app actually update. So yeah,

436
00:27:29,456 --> 00:27:32,698
new representation goes to studio and also new code goes to envoy, which triggers a

437
00:27:32,704 --> 00:27:36,426
hot reload which causes the app to update. And then you see it

438
00:27:36,608 --> 00:27:40,286
fresh in studio. And then as for the final piece in

439
00:27:40,308 --> 00:27:43,774
terms of being able to make commits, the clean code is here.

440
00:27:43,812 --> 00:27:47,810
And actually if I want, I can load it up in my own local

441
00:27:47,960 --> 00:27:52,306
GitHub or use vs code for

442
00:27:52,488 --> 00:27:55,742
the source control or however I do it traditionally.

443
00:27:55,886 --> 00:27:59,026
My email also has a few commands in to

444
00:27:59,048 --> 00:28:03,398
be able to make a commit. So you

445
00:28:03,404 --> 00:28:07,350
can make commits right here. And basically the way all that works

446
00:28:07,420 --> 00:28:10,966
is by just passing messages through. This part is pretty simple. Just passes a

447
00:28:10,988 --> 00:28:14,406
message through, describe scribe talks to envoy. Since the envoy is

448
00:28:14,428 --> 00:28:18,378
running on the local disk, you can execute git commands and

449
00:28:18,544 --> 00:28:22,346
things of that nature. And so basically these

450
00:28:22,368 --> 00:28:25,902
are how all the pieces come together in order to

451
00:28:26,036 --> 00:28:29,998
basically take the JSX and styles and understand

452
00:28:30,084 --> 00:28:33,166
them from reading the code and then pass that information to the

453
00:28:33,188 --> 00:28:36,586
studio so it can be manipulated. And then as you manipulate

454
00:28:36,618 --> 00:28:40,546
it, the updates then trigger updates all around here. And so

455
00:28:40,728 --> 00:28:43,938
that's essentially how you get a devtool that runs on

456
00:28:43,944 --> 00:28:47,422
the web, understands your code and allows you to inspect

457
00:28:47,486 --> 00:28:50,854
and kind of find your way, get your bearings in your

458
00:28:50,892 --> 00:28:54,680
apps, and also change visual things

459
00:28:55,050 --> 00:28:58,582
visually while of know.

460
00:28:58,636 --> 00:29:02,438
Oh yeah, I have one more picture about this. Yeah. And so this is kind

461
00:29:02,444 --> 00:29:05,786
of how the workflow works in the mighty meld universe. You can still do

462
00:29:05,808 --> 00:29:09,190
everything in vs code the traditional way, and mighty meld

463
00:29:09,350 --> 00:29:13,434
attaches to the visual code as well as little bits of the non visual code.

464
00:29:13,472 --> 00:29:16,110
And I think that's something that might grow over time.

465
00:29:16,260 --> 00:29:19,706
But looking here, like item name or like nav links,

466
00:29:19,738 --> 00:29:23,600
like basically showing you the actual data that you're working with,

467
00:29:25,330 --> 00:29:29,086
I kind of like to do this sometimes here where you

468
00:29:29,108 --> 00:29:29,920
can actually,

469
00:29:34,070 --> 00:29:37,362
you can see here movie category, right. I could change this

470
00:29:37,416 --> 00:29:41,178
to movie year. And you'll see year will appear twice,

471
00:29:41,214 --> 00:29:44,754
right? So there's like some kind of 2019 twice,

472
00:29:44,802 --> 00:29:48,674
some kind of interaction here with the non visual stuff and conditional

473
00:29:48,722 --> 00:29:52,086
rendering and things like that right now. And of

474
00:29:52,108 --> 00:29:55,286
course, sometimes you see things like that appearing

475
00:29:55,318 --> 00:29:59,206
in props and attributes. So right now, there's like a little bit of non

476
00:29:59,238 --> 00:30:02,858
visual code you can kind of see. But it's sort of

477
00:30:02,864 --> 00:30:06,522
thinking here, again, inspired by things like the unique game engine where

478
00:30:06,656 --> 00:30:08,986
they're just times where you're going to want to just be banging out a bunch

479
00:30:09,018 --> 00:30:12,654
of deeper code. And that's best

480
00:30:12,692 --> 00:30:15,994
done in text editors right now, which are also

481
00:30:16,052 --> 00:30:19,586
getting much better with all the new technology that's coming online.

482
00:30:19,768 --> 00:30:23,266
So that's basically how this visual dev workflow happens

483
00:30:23,368 --> 00:30:28,142
and how it seems like historically,

484
00:30:28,206 --> 00:30:31,726
browser devtools haven't understood your code, but it seems like the tides are starting

485
00:30:31,768 --> 00:30:35,510
to turn and it's both possible and seeming more likely that

486
00:30:35,660 --> 00:30:38,918
browser devtools for people who are building things and reacts and

487
00:30:38,924 --> 00:30:42,598
platforms like that are going to be much more code aware and kind

488
00:30:42,604 --> 00:30:45,994
of bringing all of us in the web community having that same

489
00:30:46,032 --> 00:30:49,434
kind of level of experience that unity devs have

490
00:30:49,472 --> 00:30:52,902
and unreal devs have, where you can build the thing, see it visually,

491
00:30:53,046 --> 00:30:56,638
move it around, run your app, pause the

492
00:30:56,644 --> 00:31:00,846
game in the middle, fix things, pick it up again, and basically really

493
00:31:00,948 --> 00:31:05,054
tie it into things. And it's a very exciting thing to be working on and

494
00:31:05,092 --> 00:31:08,654
also very exciting to be doing this on the web because the web actually

495
00:31:08,692 --> 00:31:12,334
has one extremely amazing thing that we've built, which is hot reload

496
00:31:12,462 --> 00:31:15,746
and unity. At least when I was

497
00:31:15,768 --> 00:31:19,314
working on it, didn't have hot reload, and so you couldn't really edit things

498
00:31:19,352 --> 00:31:23,190
on the fly. But because the web allows us

499
00:31:23,340 --> 00:31:26,486
HMR, new technologies around hot reload are coming out all the time.

500
00:31:26,588 --> 00:31:30,246
The web really just allows us to do this and work in a way that

501
00:31:30,268 --> 00:31:34,598
I actually think is even better than what you can achieve with things like

502
00:31:34,764 --> 00:31:37,766
unity. Anyway, thanks so much for your time.

503
00:31:37,948 --> 00:31:41,366
Glad to share this today. And yeah, if you have any thoughts or questions,

504
00:31:41,468 --> 00:31:44,702
my email is right here. Please don't be shy about

505
00:31:44,756 --> 00:31:45,740
reaching out. Thank you.

