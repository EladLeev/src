1
00:00:00,410 --> 00:00:06,126
Jamaica make up real

2
00:00:06,148 --> 00:00:10,618
time feedback into the behavior of your distributed systems and observing

3
00:00:10,714 --> 00:00:14,538
changes exceptions. Errors in real time allows

4
00:00:14,554 --> 00:00:17,914
you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:01:04,766
You good

7
00:01:04,788 --> 00:01:08,066
morning, good afternoon, or good evening based on where you are.

8
00:01:08,248 --> 00:01:11,582
My name is Alemi. I'm a senior developer advocate at Postman.

9
00:01:11,726 --> 00:01:15,602
I'm french, but I actually live in London and I'm here today

10
00:01:15,736 --> 00:01:19,062
to talk about winning friends. It might not be something

11
00:01:19,116 --> 00:01:22,486
that you are looking for, but we kind of see how you

12
00:01:22,508 --> 00:01:24,760
can do that with API first within your company.

13
00:01:26,490 --> 00:01:29,686
This is not a title to hide marketing stuff. I do work at Postman and

14
00:01:29,708 --> 00:01:33,226
I'm going to chat about it on this slide and then just a little bit

15
00:01:33,248 --> 00:01:36,266
at the start. But it's going to be like a high view of what is

16
00:01:36,288 --> 00:01:39,194
API first, but quick talk there.

17
00:01:39,392 --> 00:01:43,760
Postman is an API collaboration platform used by 17 million people,

18
00:01:44,770 --> 00:01:48,222
and the good thing is me working there

19
00:01:48,276 --> 00:01:51,310
means that I get to talk with a lot of people that are using APIs

20
00:01:51,890 --> 00:01:55,194
in different setups, in different sizes,

21
00:01:55,242 --> 00:01:58,814
teams, et cetera, et cetera. So that talk is mostly going to be me sharing

22
00:01:58,862 --> 00:02:01,460
what I've learned from all of these people that I've talked to.

23
00:02:02,230 --> 00:02:05,298
Going back to the talk, the name of the talk is

24
00:02:05,464 --> 00:02:08,440
how, how, how, how to win friends and influence first.

25
00:02:09,850 --> 00:02:12,438
So the same way we have a lot of users, we do have a lot

26
00:02:12,444 --> 00:02:16,520
of people using APIs in general. So we'll go all the way from

27
00:02:17,450 --> 00:02:22,006
when you start off thinking about your API, all the way to implementing

28
00:02:22,038 --> 00:02:26,460
it, et cetera. And the aim of that talk is to show the benefits of

29
00:02:27,230 --> 00:02:32,462
different ways to do it. To do that, I'll go through these five

30
00:02:32,516 --> 00:02:36,286
points. First, what does API first mean? I think

31
00:02:36,468 --> 00:02:39,710
it's very important to define. So we're all talking about the same thing,

32
00:02:39,860 --> 00:02:43,626
the benefits of API first, practical tools and workflows.

33
00:02:43,658 --> 00:02:47,646
And that's where I'm just going to jump back to Postman, but also other tools,

34
00:02:47,758 --> 00:02:51,346
some industry examples and some key points. You might

35
00:02:51,368 --> 00:02:54,766
be wondering what this has to do with chaos engineering.

36
00:02:54,958 --> 00:02:58,006
Hopefully this is going to be cleared out very soon when we keep going through

37
00:02:58,028 --> 00:03:02,038
the talk. But basically we also

38
00:03:02,204 --> 00:03:05,766
want to reduce the number of issues that

39
00:03:05,788 --> 00:03:09,746
can come up later on in your production app using API

40
00:03:09,778 --> 00:03:13,558
first. And you see that in some follow up slides.

41
00:03:13,734 --> 00:03:16,854
So let's start with what does API

42
00:03:16,902 --> 00:03:20,154
first mean to you? Well, it can mean different

43
00:03:20,192 --> 00:03:22,826
things and usually if we were in the live setup, I would be yelling at

44
00:03:22,848 --> 00:03:26,206
you and be like, oh, you, what does it mean? But I'm here

45
00:03:26,228 --> 00:03:29,486
in front of my computer talking to my camera. So the

46
00:03:29,508 --> 00:03:32,794
good thing is we actually have a survey that we do with Postman

47
00:03:32,842 --> 00:03:37,346
and we run it every year. If you're familiar with the state

48
00:03:37,368 --> 00:03:40,786
of cows engineering that Kremlin does, we kind of do the same for the state

49
00:03:40,808 --> 00:03:44,386
of the API and we do it. I think we have

50
00:03:44,408 --> 00:03:49,326
like 28,000 people from the API industry that answer

51
00:03:49,368 --> 00:03:52,070
that survey. So it's a good enough representation.

52
00:03:52,810 --> 00:03:56,226
And that's what we asked them. We asked them, what do you think API

53
00:03:56,258 --> 00:04:00,134
first is? 11% of them were not

54
00:04:00,172 --> 00:04:03,722
sure, and that's actually 2% down from the previous year. So that

55
00:04:03,776 --> 00:04:07,738
is 2021. The previous year was 2020. So more

56
00:04:07,744 --> 00:04:11,742
and more people are aware of it. But even then, in the 89%

57
00:04:11,796 --> 00:04:15,262
left, there's still some different

58
00:04:15,316 --> 00:04:18,554
ways to see what is API

59
00:04:18,602 --> 00:04:22,734
first. So there's defining and designing APIs and schemas before

60
00:04:22,932 --> 00:04:26,878
beginning development, developing APIs before developing the applications

61
00:04:26,894 --> 00:04:30,514
that are going to integrate with it, or very much like going

62
00:04:30,552 --> 00:04:34,046
all the way to the start and defining the business requirements

63
00:04:34,238 --> 00:04:37,270
before even going into defining and designing your API.

64
00:04:38,330 --> 00:04:42,054
I think to define what is API first,

65
00:04:42,092 --> 00:04:45,894
we can go the complete opposite, and the complete opposite of

66
00:04:45,932 --> 00:04:48,860
API first, you would think it's API last,

67
00:04:49,550 --> 00:04:51,980
but we actually call that code first.

68
00:04:53,150 --> 00:04:57,354
It's a workflow that may well be very familiar with you.

69
00:04:57,392 --> 00:05:01,760
Start with the core functionality, so that could be your back end,

70
00:05:02,450 --> 00:05:04,960
you're a booking service,

71
00:05:06,050 --> 00:05:09,742
how do you handle that? And then on top of that, once you have your

72
00:05:09,796 --> 00:05:12,670
booking service that's working, put an API,

73
00:05:13,110 --> 00:05:16,258
slap an API on top, and then you'll have a

74
00:05:16,264 --> 00:05:19,826
web app that's going to come in and plug itself to it.

75
00:05:19,848 --> 00:05:21,330
Start coding the API,

76
00:05:23,830 --> 00:05:27,190
use your core functionality or booking application, et cetera.

77
00:05:29,130 --> 00:05:31,800
But then someone else comes in.

78
00:05:33,050 --> 00:05:36,978
Maybe you want an admin app to handle your bookings, or there's

79
00:05:36,994 --> 00:05:41,274
a mobile app that comes in and you need to change

80
00:05:41,312 --> 00:05:45,158
your core functionality, you need to upgrade your API, add new endpoints,

81
00:05:45,174 --> 00:05:48,698
et cetera. Or maybe you have a completely

82
00:05:48,784 --> 00:05:52,254
different type of service that is going to plug in,

83
00:05:52,292 --> 00:05:55,566
maybe a third party booking, et cetera. And you need an

84
00:05:55,588 --> 00:05:58,718
entirely new API. And as

85
00:05:58,724 --> 00:06:02,494
you can see, there's many use cases here and it's just going to

86
00:06:02,692 --> 00:06:06,386
keep on changing and you'll have to evolve all of the

87
00:06:06,408 --> 00:06:09,918
parts of your app, all of your layers, whether it's the core

88
00:06:09,934 --> 00:06:11,810
functionality, the API, et cetera,

89
00:06:13,350 --> 00:06:16,854
to manage that. So some

90
00:06:16,892 --> 00:06:20,342
companies have transitioned from that to API first,

91
00:06:20,396 --> 00:06:24,006
and one of them is Etsy. What happened with

92
00:06:24,028 --> 00:06:27,640
Etsy is that they had only a website

93
00:06:28,410 --> 00:06:31,814
and then they realized they wanted to create mobile apps on top,

94
00:06:31,852 --> 00:06:34,966
but they had to rebuild everything. So that's Stephanie Schumer

95
00:06:34,998 --> 00:06:37,738
from Etsy. And what she said is all of the code that was built for

96
00:06:37,744 --> 00:06:40,746
the website then had to be rebuilt in our API to be used by our

97
00:06:40,848 --> 00:06:44,394
iOS and Android apps. So basically recreate different APIs

98
00:06:44,442 --> 00:06:48,206
for each of these platforms. And one of

99
00:06:48,228 --> 00:06:50,720
the, I saw that tweet a while back now,

100
00:06:51,810 --> 00:06:55,426
but one of the way that I think really represents that when you have

101
00:06:55,448 --> 00:06:58,834
them disconnected with the code first approach, when you have your

102
00:06:58,872 --> 00:07:02,050
back end, your front end, and then you need to connect them together,

103
00:07:02,200 --> 00:07:05,566
this is what happens. Two parts

104
00:07:05,598 --> 00:07:08,790
that are individually, they are perfect, right?

105
00:07:08,940 --> 00:07:12,294
They work fine. I can walk on that pavement from one

106
00:07:12,332 --> 00:07:15,686
side to the other, but then when I want to switch from one to

107
00:07:15,708 --> 00:07:19,622
the other, there's a disconnect. That's kind of the,

108
00:07:19,756 --> 00:07:22,460
if you go with cut Apifirst, what might happen?

109
00:07:23,310 --> 00:07:26,780
So now let's have a look at the workflow for API first.

110
00:07:27,950 --> 00:07:30,886
In the API, first case, you start with your API.

111
00:07:31,078 --> 00:07:34,550
Surprise, the interface. So you think about who's going to

112
00:07:34,560 --> 00:07:38,494
use it, your products, your customers, typically your

113
00:07:38,532 --> 00:07:41,214
application engineers, they will be the first one to consume it.

114
00:07:41,252 --> 00:07:44,790
So again, like from your web app, admin app, mobile API, et cetera.

115
00:07:44,970 --> 00:07:48,290
But that paves the way for more platforms and services

116
00:07:48,360 --> 00:07:52,066
to connect to it. And because you start with

117
00:07:52,088 --> 00:07:55,766
the API, whenever you start thinking about implementing a new functionality on

118
00:07:55,788 --> 00:07:59,606
top, well, you'll add

119
00:07:59,628 --> 00:08:02,674
it to the API first, and then both parties,

120
00:08:02,722 --> 00:08:05,990
whether it's whoever consumes or ever produces

121
00:08:07,370 --> 00:08:10,920
the backend, they'll evolve at the same time.

122
00:08:11,770 --> 00:08:15,514
So give back cut ApIfirst, you code,

123
00:08:15,712 --> 00:08:19,206
and that's a lower level type of implementation

124
00:08:19,238 --> 00:08:22,926
of codefirst that we're looking at now. You start with the code, you commit your

125
00:08:22,948 --> 00:08:26,462
code to a source repository, people are going to start

126
00:08:26,596 --> 00:08:30,526
integrated with it, then you deploy it. It doesn't have

127
00:08:30,548 --> 00:08:34,690
deploying to production, it can be deploying to a stage environment, et cetera.

128
00:08:36,230 --> 00:08:40,546
And then people can eventually test it, debug it, document it,

129
00:08:40,648 --> 00:08:43,700
and there's a few problems with that.

130
00:08:44,390 --> 00:08:48,242
And this is how you do not make friends. And this is the problems we've

131
00:08:48,306 --> 00:08:53,426
kind of identified with the code. ApIfirst approach bottlenecks,

132
00:08:53,458 --> 00:08:56,934
delay contributors and consumers. And the bottleneck is very

133
00:08:56,972 --> 00:09:01,226
much because you have this one entity at the start, the code, if you

134
00:09:01,248 --> 00:09:04,454
don't add anything to it, all of the other functionalities

135
00:09:04,582 --> 00:09:09,050
are blocked and it's a funnel rather than a lifecycle.

136
00:09:10,430 --> 00:09:13,690
Yeah, I'm not quite sure what's the right word here, but it's jacko.

137
00:09:14,850 --> 00:09:17,850
There's a lot of rework that happens late in the development cycle.

138
00:09:18,010 --> 00:09:20,160
You might be building stuff that no one wants,

139
00:09:20,610 --> 00:09:24,606
you're writing code and then eventually it goes all the way to deploying

140
00:09:24,638 --> 00:09:28,594
it and it was got what people wanted, so maybe

141
00:09:28,792 --> 00:09:32,546
it's not going to be used. The end product might not be well

142
00:09:32,568 --> 00:09:36,114
documented, and the API is constrained by what

143
00:09:36,152 --> 00:09:39,926
you have in the backend. And if someone

144
00:09:40,028 --> 00:09:43,270
wants like a new endpoint, you'll have to rework your backend, et cetera.

145
00:09:44,010 --> 00:09:47,910
In the API first case, you start with your API

146
00:09:48,570 --> 00:09:52,198
and we will see that later. But from just defining your API

147
00:09:52,294 --> 00:09:55,286
using an API definition and different types of specification,

148
00:09:55,398 --> 00:09:59,382
you can already generate a lot of stuff. So you can generate documentation,

149
00:09:59,446 --> 00:10:03,174
you can generate mocks for your front end developers

150
00:10:03,222 --> 00:10:06,126
to start heating and kind of see how they could build the front end.

151
00:10:06,308 --> 00:10:09,966
And you can generate tests as well. You may as well be

152
00:10:09,988 --> 00:10:11,920
able to generate server side code.

153
00:10:14,210 --> 00:10:17,940
There's a few tools that allow you to do that out there. That said,

154
00:10:20,550 --> 00:10:23,874
my background is in software engineering. I do like to write my own code sometimes,

155
00:10:23,912 --> 00:10:27,126
and I do like to know what I'm writing. So some people might

156
00:10:27,148 --> 00:10:31,574
not be confident giving the

157
00:10:31,612 --> 00:10:34,822
tasks to some code generation thing,

158
00:10:34,876 --> 00:10:37,720
but it's there. But once you have that,

159
00:10:39,550 --> 00:10:42,522
you generate code or you write your code,

160
00:10:42,656 --> 00:10:46,298
and now you have your id, you have the environment where

161
00:10:46,304 --> 00:10:50,140
your code lives and you can start

162
00:10:50,510 --> 00:10:54,126
integrating with, and then you have your

163
00:10:54,148 --> 00:10:57,486
tests that run between whatever you design at first and whatever is in

164
00:10:57,508 --> 00:11:01,486
production. And that's a one to one, because you've first thought

165
00:11:01,508 --> 00:11:05,026
about how your API was going to be used by consumers and therefore you

166
00:11:05,048 --> 00:11:08,802
know what you want to build in the backend. So you might already

167
00:11:08,856 --> 00:11:12,434
see a few key differences, and by then

168
00:11:12,552 --> 00:11:14,420
maybe you're already API first,

169
00:11:15,190 --> 00:11:18,600
probably have tons of friends already, because how do you make friends?

170
00:11:19,770 --> 00:11:23,480
By doing earlier validation. So because you start

171
00:11:24,010 --> 00:11:27,640
from the beginning of defining what your API is going to do, you get

172
00:11:28,250 --> 00:11:31,926
feedback much earlier in the development cycle and your team can adapt

173
00:11:31,958 --> 00:11:36,474
to new inputs. If we go all the way to the

174
00:11:36,512 --> 00:11:39,898
cost of it, you can know how much resources you're going

175
00:11:39,904 --> 00:11:44,026
to have to put against it, et cetera. You're decoupling dependencies.

176
00:11:44,218 --> 00:11:48,714
And the point here being there's not that bottleneck anymore

177
00:11:48,842 --> 00:11:52,266
because you have your API defined

178
00:11:52,298 --> 00:11:55,726
somewhere and you can generate all these other items from it, and then your teams

179
00:11:55,758 --> 00:11:59,250
can actually work in parallel developers testers writer

180
00:11:59,990 --> 00:12:03,586
just basing their work on the definition. They can do

181
00:12:03,608 --> 00:12:07,026
their own thing. Obviously this creates

182
00:12:07,058 --> 00:12:10,902
faster growth. The lifecycle is much

183
00:12:10,956 --> 00:12:14,006
faster from when you need a

184
00:12:14,028 --> 00:12:17,726
new endpoint, for example, to deploying

185
00:12:17,778 --> 00:12:21,130
it. Freedom from constraints.

186
00:12:22,110 --> 00:12:26,234
If you focus on the API instead of the code, kind of freeze the

187
00:12:26,272 --> 00:12:29,978
design that's already baked in there. There's a few companies that are

188
00:12:30,064 --> 00:12:33,326
known for the API first approach, but before jumping into that,

189
00:12:33,348 --> 00:12:37,550
I'm going to make the connection with chaos engineering.

190
00:12:37,890 --> 00:12:41,166
You might know, know they do

191
00:12:41,188 --> 00:12:44,690
some chaos engineering stuff and I'm pretty sure they'll be part of that conference.

192
00:12:45,750 --> 00:12:49,118
But from a shorty story of chaos engineering

193
00:12:49,134 --> 00:12:52,926
on their website, this is what they say. Chaos engineering is preventive

194
00:12:52,958 --> 00:12:56,518
medicine. So chaos engineering is a disciplined approach to

195
00:12:56,524 --> 00:13:00,422
identifying failures before they become outages. And this would probably

196
00:13:00,476 --> 00:13:04,066
more apply to when you're in production. But the principle of API

197
00:13:04,098 --> 00:13:07,942
first is the same because you're kind of starting

198
00:13:07,996 --> 00:13:11,098
to already think about how it's going to be implemented, who is going to be

199
00:13:11,104 --> 00:13:12,330
using it, et cetera.

200
00:13:15,070 --> 00:13:18,966
What's the saying in English? Better safe than sorry. That's very much like what's

201
00:13:18,998 --> 00:13:22,940
behind API first. And looking at companies that do that,

202
00:13:23,470 --> 00:13:27,582
there's a few very well known ones. Twitter is very famous at the moment for

203
00:13:27,716 --> 00:13:31,086
handling everything using apifirst. So their new

204
00:13:31,108 --> 00:13:34,706
spaces, API using that, et cetera. Another one that is also

205
00:13:34,888 --> 00:13:38,914
pretty well known in the chaos engineering realm is

206
00:13:38,952 --> 00:13:39,810
Netflix.

207
00:13:41,830 --> 00:13:45,426
Actually. I forgot the name of

208
00:13:45,448 --> 00:13:49,054
the tool that they created, but the main chaos engineering one,

209
00:13:49,192 --> 00:13:52,854
but basically what they've done as well and what allowed them to have that much

210
00:13:52,892 --> 00:13:56,674
flexibility, like in production, et cetera, was moving to API

211
00:13:56,722 --> 00:14:00,214
first. And this is from 2013, which is nine

212
00:14:00,252 --> 00:14:03,594
years from now. I mean, nine years before now, which is

213
00:14:03,632 --> 00:14:07,660
a long time ago. But what they said, or what Ben Christensen said,

214
00:14:08,350 --> 00:14:12,026
a single team should not become a bottleneck, nor need to have expertise on

215
00:14:12,048 --> 00:14:15,882
every client application to create optimized endpoints. Rapid innovations

216
00:14:15,946 --> 00:14:19,658
through fast decoupled development cycles across a wide variety of device types,

217
00:14:19,674 --> 00:14:23,210
and distributed ownership and expertise across teams should be enabled.

218
00:14:23,370 --> 00:14:27,106
And you probably see a lot of similarities between that and

219
00:14:27,128 --> 00:14:30,850
the benefits of apifirst. So you have the rapid innovation cycles,

220
00:14:31,590 --> 00:14:34,370
you have the wide variety of diva slides that are supported,

221
00:14:35,690 --> 00:14:39,320
and then you have the different teams working together.

222
00:14:40,250 --> 00:14:43,334
So yeah, that's what

223
00:14:43,372 --> 00:14:47,286
happens when you go API first. But let's go back at the

224
00:14:47,308 --> 00:14:51,260
different ways we define it. We actually

225
00:14:51,790 --> 00:14:55,914
surveyed something else in that survey. We looked how people

226
00:14:55,952 --> 00:14:59,366
that are actually thinking of themselves as being API first were defining

227
00:14:59,398 --> 00:15:03,130
it. So what came out of that

228
00:15:03,280 --> 00:15:06,606
is that most people were defining API first or

229
00:15:06,628 --> 00:15:10,174
most of the people that were calling themselves as full on API first

230
00:15:10,212 --> 00:15:13,818
because you can be at different stages of that. They were defining

231
00:15:13,834 --> 00:15:17,010
it as defining and designing API and schemas before development.

232
00:15:17,750 --> 00:15:20,900
And that's the definition we're going to go with now.

233
00:15:21,990 --> 00:15:26,710
So let's kind of dig deeper and now look at the different tools and workflows

234
00:15:27,290 --> 00:15:30,360
that can help you achieve API first within your company.

235
00:15:33,050 --> 00:15:36,758
Again, I've said it before, I work at Postman. I'm going to

236
00:15:36,764 --> 00:15:40,154
talk a bit about Postman here. There's other tools out there.

237
00:15:40,272 --> 00:15:44,278
There's actually website called OpenAPi tools

238
00:15:44,454 --> 00:15:47,818
which lists it's meant to be or we

239
00:15:47,824 --> 00:15:50,890
want it to be an exhaustive list. And I say we don't support it.

240
00:15:50,960 --> 00:15:54,346
We're not the ones maintaining it. But it's out there. If you're interested, there's tons

241
00:15:54,378 --> 00:15:56,480
of tools there that you can go and check out.

242
00:15:57,250 --> 00:16:01,118
But main question, you have

243
00:16:01,124 --> 00:16:04,658
a monolith somewhere and you're wondering how do you transform a

244
00:16:04,664 --> 00:16:08,018
clouded API development workflow? There's three things that I'm

245
00:16:08,024 --> 00:16:11,586
going to talk about here, API specifications, and I've mentioned it a bit

246
00:16:11,608 --> 00:16:15,194
before, mock savers and consumer driven contract testing.

247
00:16:15,262 --> 00:16:19,382
The last one is probably going to be one of the most relevant here because

248
00:16:19,516 --> 00:16:22,630
it involves testing things against production.

249
00:16:23,130 --> 00:16:25,670
But let's start with API specifications.

250
00:16:26,410 --> 00:16:29,814
API specifications have can

251
00:16:29,852 --> 00:16:33,370
API specification is the specification you're going to use to define your API.

252
00:16:33,710 --> 00:16:37,162
Once you have defined your API, you have an API definition. So there's different ways,

253
00:16:37,296 --> 00:16:40,346
there's different description format, there's open API B, two,

254
00:16:40,368 --> 00:16:43,978
e, three, there's Raml, graphql, async API. If you're

255
00:16:43,994 --> 00:16:47,966
doing async stuff, there's ton of them out there. So then you

256
00:16:47,988 --> 00:16:51,306
have the document. So that's

257
00:16:51,338 --> 00:16:55,246
the API definition. So that's the description of your specific API.

258
00:16:55,278 --> 00:16:59,010
So if you go back to Twitter, for example, a description of the

259
00:16:59,080 --> 00:17:03,060
Twitter spaces API, and then you have the documentation. So again,

260
00:17:04,070 --> 00:17:07,586
how does an API consumer come in and use your API? Well, you give them

261
00:17:07,608 --> 00:17:11,398
an API reference and it's kind of a guide of how do

262
00:17:11,404 --> 00:17:14,486
you use that API, what you can do with it, what you would

263
00:17:14,508 --> 00:17:16,150
get back from it, et cetera.

264
00:17:18,010 --> 00:17:21,034
Again, if you go through that, that already saves you a lot of time later

265
00:17:21,072 --> 00:17:24,810
on because from the API definition you can generate tons of elements,

266
00:17:26,430 --> 00:17:29,366
tests, documentation,

267
00:17:29,558 --> 00:17:32,926
mock server, et cetera, et cetera. So we kind

268
00:17:32,948 --> 00:17:36,080
of surveyed people as well to see what type of

269
00:17:36,770 --> 00:17:40,334
API specification they were using. And this is a bit of

270
00:17:40,452 --> 00:17:44,260
a heavy one. So on the left you can see the type of

271
00:17:44,950 --> 00:17:49,006
definition of specification. So swagger, open API,

272
00:17:49,038 --> 00:17:52,622
graphql, et cetera. And then by color you have orange,

273
00:17:52,686 --> 00:17:55,780
never heard of it. Yellow is aware but don't use it.

274
00:17:56,710 --> 00:18:00,134
Can blue is use it and

275
00:18:00,172 --> 00:18:03,798
then the dark blue is use it and love it. So JSon schema is

276
00:18:03,804 --> 00:18:06,790
at the top there is the most used, is the most loved.

277
00:18:08,350 --> 00:18:11,674
It is a specification for JSOn. It's not used

278
00:18:11,712 --> 00:18:15,798
to describe the API, but it's still up there and you're

279
00:18:15,814 --> 00:18:18,490
probably using JSon if you're doing anything with APIs.

280
00:18:19,710 --> 00:18:22,750
And then you can see in order it's open API two,

281
00:18:22,820 --> 00:18:25,840
also known as swagger two, open API three,

282
00:18:26,370 --> 00:18:31,306
graphql and then async APIs and other type of async

283
00:18:31,338 --> 00:18:34,750
or lesser used API specification.

284
00:18:35,810 --> 00:18:39,474
This is self reported. So that's when we ask people, and because

285
00:18:39,512 --> 00:18:43,038
it's postman surveying people, it might be BSD

286
00:18:43,054 --> 00:18:45,490
a bit, but also because we are postman,

287
00:18:46,150 --> 00:18:49,718
we have other type of data that we can get just from people that are

288
00:18:49,884 --> 00:18:53,234
doing things in the app. This is our finding.

289
00:18:53,282 --> 00:18:56,486
So it's kind of similar to what you can see in the

290
00:18:56,508 --> 00:19:00,066
previous one, but you can see still a wide

291
00:19:00,098 --> 00:19:03,542
use of open API two, then open API

292
00:19:03,606 --> 00:19:07,420
three, and then in this small thing, in this small yellow one, this wager one,

293
00:19:07,870 --> 00:19:11,322
waddle and raml, which are very minimal

294
00:19:11,386 --> 00:19:15,102
usage. So this is a quick

295
00:19:15,156 --> 00:19:18,266
video of what you can do with open API.

296
00:19:18,298 --> 00:19:22,106
So you have your API

297
00:19:22,138 --> 00:19:25,806
definition here, you can add a different version and you

298
00:19:25,828 --> 00:19:30,114
have automatic validation. So the same way you would have like a

299
00:19:30,152 --> 00:19:33,390
code linter or something like that that warns you of any errors.

300
00:19:33,550 --> 00:19:36,450
You have the same thing for your API definition,

301
00:19:36,870 --> 00:19:40,534
and you can obviously collaborate on this type of stuff. So if

302
00:19:40,572 --> 00:19:43,958
you're within a team, you can tag people and you

303
00:19:43,964 --> 00:19:47,206
can tell them oh, come and check, this is the right way to do it.

304
00:19:47,308 --> 00:19:50,634
And that's the whole earlier validation that we talked

305
00:19:50,672 --> 00:19:54,262
about before. Just as you're defining

306
00:19:54,406 --> 00:19:58,346
your API, you can already ask the other teams what

307
00:19:58,368 --> 00:19:59,820
they would be wanting to see.

308
00:20:03,090 --> 00:20:06,206
Now let's move on to the next tool that you could use.

309
00:20:06,308 --> 00:20:10,430
Mock servers. If you're not familiar with mock servers,

310
00:20:11,490 --> 00:20:14,926
it's basically generating some mock endpoints

311
00:20:14,958 --> 00:20:18,290
for all your API endpoints, but they're live,

312
00:20:18,360 --> 00:20:21,602
anyone can call them. And basically instead

313
00:20:21,656 --> 00:20:25,474
of hitting your production servers or even

314
00:20:25,512 --> 00:20:28,674
a stage server, it's just going to reply with the default

315
00:20:28,722 --> 00:20:32,902
response from the API. And you can define different ways based

316
00:20:32,956 --> 00:20:36,470
on the parameters that are sent with the query, et cetera.

317
00:20:37,130 --> 00:20:40,534
But that's a good way to have your front

318
00:20:40,572 --> 00:20:42,966
end team. A good practice is to have your front end team use the mock

319
00:20:42,998 --> 00:20:46,090
server, heat it, et cetera, while you develop the

320
00:20:46,160 --> 00:20:49,642
backend in parallel. And then once the back end is ready,

321
00:20:49,696 --> 00:20:53,038
you can just kind of swap the URL of the mock servers with the

322
00:20:53,044 --> 00:20:56,558
one from production or sharing. And it should work because

323
00:20:56,724 --> 00:21:00,442
both of them are defined from the same API definition.

324
00:21:00,586 --> 00:21:04,914
So let's have a look how you can generate them. So we mentioned

325
00:21:05,112 --> 00:21:08,542
you have your API definition, just from your API definition.

326
00:21:08,606 --> 00:21:12,258
You can go ahead, say that you want

327
00:21:12,264 --> 00:21:16,214
to generate it from the API definition, give it a name and

328
00:21:16,252 --> 00:21:20,040
then generate it. So give it another name

329
00:21:22,250 --> 00:21:25,910
and then create a mock server. So now this should give you a URL.

330
00:21:26,250 --> 00:21:29,686
And as I mentioned, that's how

331
00:21:29,708 --> 00:21:33,446
it works in postman. All the tools do that gives you a URL.

332
00:21:33,558 --> 00:21:37,318
You can go and start creating that one. So I already had a collection.

333
00:21:37,414 --> 00:21:41,350
So my documentation generated from that API definition

334
00:21:41,510 --> 00:21:45,406
can go ahead, swap the URL that is hitting my local host with

335
00:21:45,428 --> 00:21:49,678
the one of the mock server that I just generated, save it.

336
00:21:49,844 --> 00:21:52,270
And I can hit a live endpoint.

337
00:21:53,090 --> 00:21:56,306
So I can just send that request and I can see that I have

338
00:21:56,328 --> 00:21:58,740
a live endpoint that's sending data back to me.

339
00:22:00,070 --> 00:22:03,570
And now I can send that URL to anyone else in my team

340
00:22:03,720 --> 00:22:07,590
and they'll be able to use that same endpoint,

341
00:22:08,010 --> 00:22:11,782
start creating whatever items they need to create using

342
00:22:11,836 --> 00:22:12,440
that.

343
00:22:14,330 --> 00:22:17,906
So we use that open API spec to generate the mock

344
00:22:17,938 --> 00:22:21,606
server. The testers can start writing tests against it, the writers

345
00:22:21,638 --> 00:22:24,998
can dig in, documenting against it, et cetera. The last workflow

346
00:22:25,014 --> 00:22:29,066
we'll talk about, and this one might

347
00:22:29,088 --> 00:22:32,542
be the most relevant to the chaos engineering folks out there.

348
00:22:32,676 --> 00:22:36,714
Consumer driven contract testing and I'm going to quote

349
00:22:36,762 --> 00:22:40,398
here the principles of Cos engineering, which some of you

350
00:22:40,404 --> 00:22:44,090
may be familiar with. But one

351
00:22:44,100 --> 00:22:47,650
of the first paragraph in there is even when all of the individual services

352
00:22:47,720 --> 00:22:51,394
in a distributed system are functioning properly, the interactions between

353
00:22:51,432 --> 00:22:54,130
the services can cause unpredictable outcomes.

354
00:22:54,470 --> 00:22:57,906
Unpredictable outcomes completed by rare but disruptive real world events

355
00:22:57,938 --> 00:23:01,746
that affect production environments make this distributed system inherently chaotic.

356
00:23:01,938 --> 00:23:05,622
And if this is too long, et cetera. I always

357
00:23:05,676 --> 00:23:09,082
have a meme to explain things

358
00:23:09,136 --> 00:23:12,730
another way. This is a bit outdated now, but basically

359
00:23:12,800 --> 00:23:16,634
consumer driven contract testing is what stops your app

360
00:23:16,672 --> 00:23:20,218
from breaking at the last minute because you have these tests

361
00:23:20,234 --> 00:23:23,674
that are running against your client, et cetera.

362
00:23:23,722 --> 00:23:27,600
Let's jump into it so you can actually understand what I'm talking about

363
00:23:28,690 --> 00:23:31,630
what is consumer driven contract testing.

364
00:23:33,590 --> 00:23:36,820
So the API provider, in that case,

365
00:23:37,270 --> 00:23:41,102
I can be any company, I can be Netflix, it can be Spotify

366
00:23:41,166 --> 00:23:44,766
or whatever, I'll give my consumers

367
00:23:44,878 --> 00:23:48,102
a contract. And that contract is in our example,

368
00:23:48,156 --> 00:23:52,018
the API definition, the consumer.

369
00:23:52,114 --> 00:23:56,070
So any of my users or partner, they write tests against it.

370
00:23:56,220 --> 00:23:59,946
So you can see on the right here, I tell them this

371
00:23:59,968 --> 00:24:03,866
is what my API is, and they tell me using test, this is

372
00:24:03,888 --> 00:24:07,900
how I'm about to use your API. And then the last step is

373
00:24:09,310 --> 00:24:13,390
this creates the contract and we can then test against

374
00:24:13,460 --> 00:24:17,054
it. So me as the provider, whenever I'm going to make

375
00:24:17,092 --> 00:24:20,446
an update to that API definition, I'm going

376
00:24:20,468 --> 00:24:23,610
to run tests from my consumers in my pipeline.

377
00:24:23,770 --> 00:24:27,246
And when I say consumers, this API

378
00:24:27,278 --> 00:24:30,306
consumer can be internal, it can be like a team within my company. It can

379
00:24:30,328 --> 00:24:33,410
be an external team, it can be any external users.

380
00:24:34,310 --> 00:24:37,446
But the point being, if I see that something's break,

381
00:24:37,628 --> 00:24:41,506
well, I can stop the deployment and avoid anything breaking in production.

382
00:24:41,618 --> 00:24:46,374
And that goes back to the preventive medicine thing

383
00:24:46,412 --> 00:24:49,990
that we talked earlier on. So the way we do it at Postman,

384
00:24:50,730 --> 00:24:54,298
each squad, so squad is in charge of different parts of

385
00:24:54,304 --> 00:24:57,420
the app or wider services,

386
00:24:58,030 --> 00:25:01,950
has a blueprint collection based on the API definition.

387
00:25:02,690 --> 00:25:06,746
From that we generate mock servers to have parallel

388
00:25:06,778 --> 00:25:10,254
development from different teams. And then we'll also do

389
00:25:10,292 --> 00:25:13,898
CDC testing between the different squads.

390
00:25:13,914 --> 00:25:17,554
So let's say we have an IM squad, which is in charge of

391
00:25:17,592 --> 00:25:20,370
everything, logging in, et cetera, or permissions.

392
00:25:21,510 --> 00:25:24,846
They'll have all these other squads relying on what they do, and they'll

393
00:25:24,878 --> 00:25:27,878
get their contract, run it as part of their pipelines to make sure they do

394
00:25:27,884 --> 00:25:31,506
not break anything. Now let's

395
00:25:31,538 --> 00:25:35,266
have a look at our last point. What are the key points for becoming API

396
00:25:35,298 --> 00:25:38,806
first? If I've convinced you that you should be apifirst,

397
00:25:38,908 --> 00:25:42,634
if you want to give it a try, or if you're already API first,

398
00:25:42,672 --> 00:25:45,050
but you just want to make sure that you tick all the boxes.

399
00:25:46,350 --> 00:25:49,114
Let's have a look quickly at how we defined it.

400
00:25:49,312 --> 00:25:52,640
There's different meaning. API first development and API first design.

401
00:25:53,890 --> 00:25:57,326
And the way we used during that talk was

402
00:25:57,348 --> 00:26:01,006
the API first design. So it's the designing and

403
00:26:01,028 --> 00:26:05,170
defining my API before. When I think about creating any resources,

404
00:26:05,910 --> 00:26:09,570
benefits of it, again, earlier validation,

405
00:26:10,150 --> 00:26:13,950
decoupling dependencies, faster growth and freedom from constraints.

406
00:26:14,110 --> 00:26:17,334
But one of the things that you may wonder is,

407
00:26:17,452 --> 00:26:20,520
is apifirst for you or is API first for everyone?

408
00:26:21,850 --> 00:26:25,366
Well, tons of services out there. We love

409
00:26:25,388 --> 00:26:29,740
to support multiple platforms and services and devices as well.

410
00:26:30,110 --> 00:26:33,802
So having this API first or

411
00:26:33,856 --> 00:26:37,258
this API in the middle, defining what all the consumers are

412
00:26:37,264 --> 00:26:39,660
going to do is a great way to do it.

413
00:26:41,150 --> 00:26:44,880
And there's a ton more cloud usage out there as well.

414
00:26:45,890 --> 00:26:49,406
And when you're using different cloud providers, what do you look at when

415
00:26:49,428 --> 00:26:52,350
you're going to use the services? You're probably looking at the API.

416
00:26:53,090 --> 00:26:54,960
None of these friends are slowing down.

417
00:26:56,450 --> 00:26:59,954
I don't think anyone is going to tell me wrong unless everything changed between the

418
00:26:59,992 --> 00:27:03,506
recording of that video and when it's being published. But I

419
00:27:03,528 --> 00:27:06,686
don't think these friends are slowing down. That said,

420
00:27:06,808 --> 00:27:10,710
API first, let's say you're just creating an app

421
00:27:10,780 --> 00:27:14,358
for your personal usage, et cetera. It might not be worth the

422
00:27:14,364 --> 00:27:17,474
trouble, but as soon as you have a few

423
00:27:17,532 --> 00:27:19,770
different users, devices, et cetera,

424
00:27:21,630 --> 00:27:24,858
then you probably want to

425
00:27:24,864 --> 00:27:26,220
go for API first.

426
00:27:28,270 --> 00:27:31,230
I'll leave you with two more quotes.

427
00:27:31,810 --> 00:27:35,166
Developers are used to code first, but there

428
00:27:35,188 --> 00:27:39,770
are definitely benefits to moving to that. And that's a quote from Andrew,

429
00:27:39,930 --> 00:27:43,662
whose last name I do not know, who said

430
00:27:43,716 --> 00:27:47,506
API first in organization means that we can think of what is possible rather than

431
00:27:47,528 --> 00:27:50,706
what is not possible. When it comes to providing the best features and

432
00:27:50,728 --> 00:27:53,394
functionality for our product and services to our members,

433
00:27:53,592 --> 00:27:57,990
we no longer have the difficulties of customizations or integrations with systems

434
00:27:58,730 --> 00:28:02,306
and applications. So that's

435
00:28:02,338 --> 00:28:05,906
one. And the other one, which is a much simpler one coming from Kinlane,

436
00:28:05,938 --> 00:28:09,720
the chief evangelist, the postman. It's going to be hard

437
00:28:10,730 --> 00:28:13,000
if you're planning to turn to API first.

438
00:28:13,690 --> 00:28:17,386
That's a big journey, but it's a good one. The benefits are

439
00:28:17,488 --> 00:28:20,778
incredible at the end, but especially if you've been code for us this whole time,

440
00:28:20,864 --> 00:28:23,774
it is going to be hard, but there's tons of tools out there to help

441
00:28:23,812 --> 00:28:27,454
you. There's tons of companies. I'm here if you

442
00:28:27,492 --> 00:28:29,680
have any questions around Apifirst in general.

443
00:28:31,490 --> 00:28:35,394
But as we see every

444
00:28:35,432 --> 00:28:38,846
time we do this survey, we see the usage

445
00:28:38,878 --> 00:28:42,658
of Apifirst growing, we see the knowledge of Apifirst growing. So I

446
00:28:42,664 --> 00:28:46,098
don't think it's going anywhere. The sooner you start,

447
00:28:46,184 --> 00:28:49,426
the better place you'll be and the more friends you'll

448
00:28:49,458 --> 00:28:52,838
make. With that said, if you

449
00:28:52,844 --> 00:28:56,054
want to learn more about API first, we have a website called API first

450
00:28:56,092 --> 00:28:59,290
world that you can go to and check it.

451
00:28:59,360 --> 00:29:02,874
It's a quick novel that kind of goes through very

452
00:29:02,912 --> 00:29:06,314
high level of what is API first

453
00:29:06,352 --> 00:29:09,690
or what is an Apifirst world. It's very light.

454
00:29:09,760 --> 00:29:12,986
Do not expect any very technical details.

455
00:29:13,018 --> 00:29:16,846
It's very much a comic, which actually we can find

456
00:29:16,868 --> 00:29:20,160
it here. Just going to try to show you,

457
00:29:22,210 --> 00:29:25,280
literally just a comic with someone that talks to you.

458
00:29:25,810 --> 00:29:29,200
But yeah, with that said, thank you for watching.

459
00:29:32,210 --> 00:29:35,666
I'm available on most networks. If you find me on LinkedIn

460
00:29:35,698 --> 00:29:39,106
on twitter. So twitter.com slash alemi,

461
00:29:39,138 --> 00:29:42,386
LinkedIn, alemi, etc.

462
00:29:42,578 --> 00:29:45,926
Find me. Ask me any questions if you have any around API first or

463
00:29:45,948 --> 00:29:48,900
just API in general and have a good.

