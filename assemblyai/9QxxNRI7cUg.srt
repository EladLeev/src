1
00:00:38,850 --> 00:00:42,246
Hello and thank you for joining me today. Today my talk is

2
00:00:42,268 --> 00:00:45,394
on end to end testing formerge and why it's the latest

3
00:00:45,442 --> 00:00:49,834
and greatest best practice in continuous integration and continuous deployment.

4
00:00:50,002 --> 00:00:53,882
And I'm going to show you how you can do it by leveraging ephemeral environments

5
00:00:53,946 --> 00:00:56,880
with your CI. All right, let's get started.

6
00:00:57,570 --> 00:01:00,926
So today at Comp 42 DevOps, I wanted to give

7
00:01:00,948 --> 00:01:03,934
a quick outline of what I'm going to talk about. I'm going to start off

8
00:01:03,972 --> 00:01:07,666
with the three main types of automated testing. Then I'm going to go into how

9
00:01:07,688 --> 00:01:11,166
you can get more out of your CI by using it more frequently and testing

10
00:01:11,198 --> 00:01:14,734
more often. And then I'm going to introduce the concept of ephemeral

11
00:01:14,782 --> 00:01:17,890
environments as a vessel for more frequent testing.

12
00:01:20,010 --> 00:01:23,986
So here are the three primary types of automated testing that you'll

13
00:01:24,018 --> 00:01:26,806
run into in your CI, and these are all things that you can do in

14
00:01:26,828 --> 00:01:30,934
your CI, but the question is how often? So unit tests generally

15
00:01:30,982 --> 00:01:34,326
can be run against every commit in PR, just because they're

16
00:01:34,358 --> 00:01:37,898
very simple. They usually just give an input and assert that

17
00:01:37,904 --> 00:01:41,766
it equals to what's returned. Integration tests are

18
00:01:41,808 --> 00:01:45,754
a little bit more complex. They're testing your function against existing

19
00:01:45,802 --> 00:01:49,646
functions and ensuring that the results match. But end to

20
00:01:49,668 --> 00:01:53,038
end tests, which is what our focus is on today,

21
00:01:53,204 --> 00:01:56,570
test entire application workflows, which can be really difficult

22
00:01:56,660 --> 00:01:59,986
because they do require a production like copy of the latest changes to your

23
00:02:00,008 --> 00:02:03,282
code base, which is why end to end tests often

24
00:02:03,336 --> 00:02:07,558
don't get run until your staging environment. That's just often very difficult

25
00:02:07,644 --> 00:02:11,186
to do, to spin up an environment on every single branch,

26
00:02:11,298 --> 00:02:14,680
and most companies do not have the infrastructure for that.

27
00:02:15,930 --> 00:02:19,382
I like to think of CI as more than just a pipeline,

28
00:02:19,446 --> 00:02:22,950
also a principle, as opposed to bundled releases.

29
00:02:23,030 --> 00:02:26,118
You're having frequent smart commits and maybe deployments

30
00:02:26,214 --> 00:02:29,526
every single day. If you're so lucky, you're able to automate

31
00:02:29,558 --> 00:02:32,766
your tests and run them on smaller code changes. You can

32
00:02:32,788 --> 00:02:35,418
also automate things like builds and limits,

33
00:02:35,514 --> 00:02:38,794
and that way you're continuously writing code that's getting merged

34
00:02:38,842 --> 00:02:41,120
to your main branch as soon as possible.

35
00:02:43,570 --> 00:02:47,186
So I wanted to give a quick overview of what the default end to end

36
00:02:47,208 --> 00:02:50,542
testing workflow tends to look like at most organizations.

37
00:02:50,686 --> 00:02:54,734
So oftentimes you're working on a branch and you're developing

38
00:02:54,782 --> 00:02:58,226
to the point at which you're ready to open a PR at

39
00:02:58,248 --> 00:03:01,958
which you'll loop in one of your friends, one of your peers for code review.

40
00:03:02,124 --> 00:03:05,606
They'll check that out, they'll give you any feedback, and then you'll keep

41
00:03:05,628 --> 00:03:09,318
iterating until it's merged to main and deployed to your

42
00:03:09,324 --> 00:03:12,538
staging environment, at which point your end to end tests will

43
00:03:12,544 --> 00:03:15,898
be run against your staging environment. Although they might be run against

44
00:03:15,984 --> 00:03:19,194
instead of just your own PR and your code

45
00:03:19,232 --> 00:03:23,166
changes themselves, they might be run against multiple merged branches from

46
00:03:23,188 --> 00:03:25,150
that day, because who knows,

47
00:03:27,170 --> 00:03:31,054
you might be only testing maybe twice a week. So once

48
00:03:31,092 --> 00:03:34,638
you get back, the QA engineers are going to sift through all

49
00:03:34,644 --> 00:03:38,146
the bugs that were uncovered on the staging environment and send you right back

50
00:03:38,168 --> 00:03:41,762
to the drawing board, at which point you're going to try to fix

51
00:03:41,816 --> 00:03:45,154
those bugs, open a new PR loop in your peer again

52
00:03:45,192 --> 00:03:48,598
for code review, and the process will continue until all the

53
00:03:48,604 --> 00:03:52,294
bugs are eliminated. And so this makes it really

54
00:03:52,332 --> 00:03:56,120
difficult for QA to estimate releases because

55
00:03:57,690 --> 00:04:01,446
you don't know what bugs are going to be uncovered and when they'll be fixed.

56
00:04:01,478 --> 00:04:05,494
And you oftentimes have several days of waiting in between a merge

57
00:04:05,542 --> 00:04:09,034
pull request and a test run.

58
00:04:09,232 --> 00:04:13,246
So there is a solution to

59
00:04:13,268 --> 00:04:16,830
this and it's testing before merge, and there are many benefits

60
00:04:16,900 --> 00:04:19,486
to running your end to end test closer to the PR.

61
00:04:19,668 --> 00:04:23,006
You're identifying issues faster, you're keeping bugs closer to

62
00:04:23,028 --> 00:04:26,206
the developer, and you're limiting context switching. And it

63
00:04:26,228 --> 00:04:29,694
really just enables flow for a developer to be able to run their tests

64
00:04:29,742 --> 00:04:33,394
every time they make a commit and have those bugs be identified right then

65
00:04:33,432 --> 00:04:37,026
and there, and they can just go back and fix them, make that commit

66
00:04:37,138 --> 00:04:40,914
and be absolutely certain before their PR gets merged

67
00:04:40,962 --> 00:04:44,566
that it's entirely bug free. And this is what

68
00:04:44,588 --> 00:04:47,506
the workflow tends to look like. It's a lot faster,

69
00:04:47,618 --> 00:04:50,774
it's much less of a loop

70
00:04:50,822 --> 00:04:54,262
and more of the inner loop is entirely

71
00:04:54,326 --> 00:04:58,342
for debugging. And the outer loop is pretty straightforward

72
00:04:58,406 --> 00:05:02,658
because the only bugs that you tend to run into are your features interacting

73
00:05:02,694 --> 00:05:06,590
with other features on the staging environment. But basically you'll be

74
00:05:06,660 --> 00:05:10,046
developing. You'll open a pull request which will trigger your CI to

75
00:05:10,068 --> 00:05:14,426
run your end to end tests against a fully built ephemeral

76
00:05:14,458 --> 00:05:18,322
environment based on your branch that you're working on. And at

77
00:05:18,376 --> 00:05:21,646
which point it's important to loop in your peer after the tests

78
00:05:21,678 --> 00:05:25,326
have run, because it really shouldn't be their job to uncover any bugs

79
00:05:25,358 --> 00:05:29,314
in your code. They're just really checking for best practices. And then at which point

80
00:05:29,352 --> 00:05:32,790
if there are any bugs, you've solved them, you've passed the code review.

81
00:05:32,860 --> 00:05:36,374
You can merge that to main, deploy it to staging, which again will run

82
00:05:36,412 --> 00:05:40,366
your end to end tests one more time against the multiple merge

83
00:05:40,418 --> 00:05:44,650
features and then you can deploy to production. And this is a much faster,

84
00:05:45,310 --> 00:05:48,986
much faster workflow because it cuts out oftentimes several days

85
00:05:49,008 --> 00:05:52,734
of waiting. And once

86
00:05:52,772 --> 00:05:56,666
you have your feature, it's pretty much in. You're not constantly

87
00:05:56,778 --> 00:06:00,814
iterating and patching it, you feel confident in it.

88
00:06:00,852 --> 00:06:04,942
And you've tested before merge. And so

89
00:06:04,996 --> 00:06:08,062
in order to do this, I touched on this a little bit earlier,

90
00:06:08,126 --> 00:06:11,870
but what you need to do is you need to work with PR environments.

91
00:06:12,030 --> 00:06:15,806
And what you'll do is you'll attach a full stack ephemeral environment

92
00:06:15,838 --> 00:06:19,910
to every pr, and this is going to be based, built based on

93
00:06:19,980 --> 00:06:24,790
the branch that you're working on. And it will be infrastructure identical

94
00:06:25,450 --> 00:06:29,126
to your branch, including the database. It's basically going to

95
00:06:29,148 --> 00:06:32,298
be a copy of production with

96
00:06:32,384 --> 00:06:35,514
a few things simplified, like you'll have less data,

97
00:06:35,552 --> 00:06:38,822
but it will be very realistic. And then against this environment,

98
00:06:38,886 --> 00:06:42,074
you can run all of your tests. You can run any test that you would

99
00:06:42,112 --> 00:06:45,614
against your staging or your production, because you'll be able to run your

100
00:06:45,652 --> 00:06:49,146
unit integration and end to end tests against this environment.

101
00:06:49,338 --> 00:06:51,600
You'll be able to perform code review.

102
00:06:53,890 --> 00:06:57,586
You won't just be looking at the code itself, but you'll be looking at the

103
00:06:57,608 --> 00:07:01,102
code side by side with interacting with the environment

104
00:07:01,166 --> 00:07:04,906
and seeing how your features perform through human testing.

105
00:07:05,038 --> 00:07:08,774
And then what's really nice about these environments is because

106
00:07:08,812 --> 00:07:12,322
they're Gitops enabled, their lifecycle is automated,

107
00:07:12,466 --> 00:07:16,070
so they will automatically shut down upon a merge.

108
00:07:17,050 --> 00:07:20,906
So I just wanted to give a quick demo on using

109
00:07:21,008 --> 00:07:24,794
Cypress end to end tests on an ephemeral environment with

110
00:07:24,832 --> 00:07:28,890
shipyard in GitHub Action's CI workflow.

111
00:07:30,350 --> 00:07:34,730
All right, so here I wanted to show you what it looks like realistically

112
00:07:34,810 --> 00:07:38,634
getting your app set up to run end to end tests before merge

113
00:07:38,762 --> 00:07:41,680
using an ephemeral environment. So here's my application.

114
00:07:42,290 --> 00:07:45,838
You can see that it's built and run using Docker build kit.

115
00:07:45,934 --> 00:07:48,820
Can see the front end and backend services here.

116
00:07:50,070 --> 00:07:53,790
And I define these services in my docker compose file,

117
00:07:53,870 --> 00:07:57,798
which we can look at here under the configure tab. And it parsed out the

118
00:07:57,804 --> 00:08:01,030
services right here. We're going to direct our tests towards

119
00:08:01,100 --> 00:08:04,486
the front end service, and our back end service has a

120
00:08:04,508 --> 00:08:06,200
database attached to it.

121
00:08:07,290 --> 00:08:11,062
And right now we have some nvars that are injected during build

122
00:08:11,116 --> 00:08:14,634
and runtime. And one of the nvars that we're going to pay attention to is

123
00:08:14,672 --> 00:08:17,786
the front end domain for the front end service. And this

124
00:08:17,808 --> 00:08:20,378
is where we're going to point our end to end test. So that will come

125
00:08:20,384 --> 00:08:23,646
in later. We're going to configure our application that way. I'm just going to

126
00:08:23,668 --> 00:08:27,246
show you what it looks like creating an account and

127
00:08:27,348 --> 00:08:30,634
using this application. This was developed by the Cypress

128
00:08:30,682 --> 00:08:34,174
team. It's basically a Venmo clone, and it's a great

129
00:08:34,212 --> 00:08:38,386
way to showcase end to end tests with Cypress. And this

130
00:08:38,408 --> 00:08:41,826
one here we're running in an ephemeral environment. So as we can

131
00:08:41,848 --> 00:08:45,086
see, this is a Venmo clone. It has a few basic features. It has user

132
00:08:45,118 --> 00:08:48,994
settings, you can add multiple bank accounts, it even notifies

133
00:08:49,042 --> 00:08:53,126
you when you've been requested to pay. And since this

134
00:08:53,148 --> 00:08:56,950
is all fake money, we were just going to make a request for $1,000

135
00:08:57,020 --> 00:09:00,562
for lunch just to show the functionality.

136
00:09:00,706 --> 00:09:03,962
So we can see that there are a few main things we can test here,

137
00:09:04,016 --> 00:09:07,414
but I've written a few short Cypress

138
00:09:07,462 --> 00:09:11,338
end to end tests that will just do some basic functionalities just

139
00:09:11,424 --> 00:09:14,826
for this purposes of this demonstration.

140
00:09:15,018 --> 00:09:18,238
So I'm just going to go to my terminal and I'm going to run the

141
00:09:18,244 --> 00:09:21,534
Cypress tests that I've written and we're going to see them

142
00:09:21,572 --> 00:09:25,186
run now. So I configured the app to point the end to end

143
00:09:25,208 --> 00:09:28,258
tests at the ephemeral environment URL, which you

144
00:09:28,264 --> 00:09:31,934
can see right at the top. So it's going to be the environment

145
00:09:31,982 --> 00:09:35,730
that I just showed you. And these tests are super simple.

146
00:09:35,800 --> 00:09:39,526
All they do is they just create a username, create an account, sign in

147
00:09:39,548 --> 00:09:42,978
with that account, and go to user settings.

148
00:09:43,074 --> 00:09:46,566
So years we can see everything's working as it

149
00:09:46,588 --> 00:09:47,160
should.

150
00:09:51,790 --> 00:09:55,022
And I'm just going to populate these fields with an email and a phone number.

151
00:09:55,076 --> 00:09:58,494
And this last part here is just checking to make sure that the save button

152
00:09:58,532 --> 00:10:01,774
is of type submit, which will matter later. All right, so as

153
00:10:01,812 --> 00:10:05,250
expected, all the tests passed, but I want to take this to the next level

154
00:10:05,320 --> 00:10:08,606
and I want to do this entirely in my CI.

155
00:10:08,798 --> 00:10:12,434
So I'm running this. So I forked this copy from Cypress and

156
00:10:12,472 --> 00:10:15,294
I do have a GitHub actions workflow set up.

157
00:10:15,432 --> 00:10:18,342
And what I'm going to do here is I'm going to set this up to

158
00:10:18,396 --> 00:10:20,310
automate my end end tests.

159
00:10:22,410 --> 00:10:25,794
So right here we're using the shipyard GitHub

160
00:10:25,842 --> 00:10:29,830
action, which you can get on GitHub marketplace. And basically

161
00:10:29,900 --> 00:10:32,742
what it does is you go to your GitHub actions,

162
00:10:32,806 --> 00:10:36,106
environment variables, and you set your shipyard API token and

163
00:10:36,128 --> 00:10:39,386
your bypass token. And what it will do is it will take those and it

164
00:10:39,408 --> 00:10:43,306
will auth into your ephemeral environment and it will be able to run

165
00:10:43,328 --> 00:10:46,746
the end to end tests against the environment. So that's a real sample workflow

166
00:10:46,778 --> 00:10:50,030
that we're looking at right now. And it's quite simple.

167
00:10:50,100 --> 00:10:53,050
We're just going to use a custom run command because we only do want to

168
00:10:53,060 --> 00:10:56,498
run that particular end to end test in this case

169
00:10:56,664 --> 00:11:00,286
and that's our custom command there. So that's the exact thing that I ran

170
00:11:00,318 --> 00:11:04,210
in my own terminal and it's going to perform

171
00:11:04,280 --> 00:11:08,214
exactly the same, except this time it will be automated on every commit and

172
00:11:08,252 --> 00:11:11,720
pull request. So here

173
00:11:12,730 --> 00:11:15,590
we're going to see this run, but this is going to take a while.

174
00:11:15,660 --> 00:11:19,058
So in the meantime I want to create a new feature. So right

175
00:11:19,084 --> 00:11:23,686
here I'm just going to change the submit button to a button of type reset

176
00:11:23,878 --> 00:11:27,082
just for testing purposes. And we're going to pretend that it's a cool

177
00:11:27,136 --> 00:11:27,770
feature.

178
00:11:30,770 --> 00:11:34,586
So I'm just going to commit

179
00:11:34,618 --> 00:11:48,312
that in a new branch and

180
00:11:48,366 --> 00:11:49,530
publish that.

181
00:11:56,480 --> 00:12:00,252
And then based on the new branch we're just going to create a new pull

182
00:12:00,306 --> 00:12:03,736
request to the base branch of my forked

183
00:12:03,768 --> 00:12:08,628
repository. We don't want to accidentally send that to Cyprus's repo

184
00:12:08,744 --> 00:12:11,824
and we're just going to pretend that this is a PR for a really cool

185
00:12:11,862 --> 00:12:15,196
new feature that we've added that we do want to run end to end tests

186
00:12:15,228 --> 00:12:18,996
against because we want to make sure that everything is functioning as it

187
00:12:19,018 --> 00:12:23,124
should before we merge it. So very nice thing

188
00:12:23,162 --> 00:12:26,228
about this is we have set up our GitHub actions workflow which is going

189
00:12:26,234 --> 00:12:29,972
to be triggered upon that PR opening and

190
00:12:30,026 --> 00:12:33,204
that will run just like the one that we were previously viewing.

191
00:12:33,332 --> 00:12:36,344
It's going to take a while to run, so let's go back and let's see

192
00:12:36,382 --> 00:12:39,930
how our initial run of the CI workflow is going.

193
00:12:41,740 --> 00:12:45,404
It's been about a minute and a half and we're getting

194
00:12:45,442 --> 00:12:48,780
through the workflow. All right, so I just have this

195
00:12:48,850 --> 00:12:52,184
sped up a little bit, but what it did was it authenticated

196
00:12:52,232 --> 00:12:55,980
into shipyard, it has the necessary

197
00:12:56,060 --> 00:12:59,680
environment variables and now it's running end to end tests against

198
00:12:59,750 --> 00:13:03,008
the environment. And again, this should function identically to how it did in

199
00:13:03,014 --> 00:13:06,516
the terminal because it is just connecting to that environment based on

200
00:13:06,538 --> 00:13:10,500
the URL and bypass token. And the first test passed

201
00:13:12,680 --> 00:13:16,436
and as expected, all the tests have passed. So that's awesome.

202
00:13:16,538 --> 00:13:20,436
And the nice thing about this is now this will happen on every single commit,

203
00:13:20,468 --> 00:13:24,164
so that way you can make sure that your new feature

204
00:13:24,212 --> 00:13:28,136
branches are working. But let's go back and let's see how our

205
00:13:28,158 --> 00:13:31,884
pull request branch is doing so that pull request has built

206
00:13:31,922 --> 00:13:35,340
in a new environment. So we're testing against that new environment environment

207
00:13:35,680 --> 00:13:39,436
separately from the base environment. So I

208
00:13:39,458 --> 00:13:42,648
have this at like eight times speed, just because we don't

209
00:13:42,664 --> 00:13:45,904
want to wait through this, but everything is going as it

210
00:13:45,942 --> 00:13:49,792
should. We're just about to integrate shipyard. All right, that worked.

211
00:13:49,926 --> 00:13:53,004
And we're going to run end to end test against the ephemeral environment.

212
00:13:53,052 --> 00:13:56,992
So again, this is my new feature in a PR environment. And I did change

213
00:13:57,046 --> 00:14:00,768
something that I specifically changed so it would break the end to end tests,

214
00:14:00,944 --> 00:14:04,212
because there is one test that specifically checks that that button

215
00:14:04,266 --> 00:14:08,356
right there is of type submit. So it's struggling here.

216
00:14:08,538 --> 00:14:12,056
And thank goodness we found this out now before merging that

217
00:14:12,078 --> 00:14:15,588
to the staging environment, because we wouldn't want to break staging with failed

218
00:14:15,604 --> 00:14:19,512
tests. So I think it's pretty clear here. I think,

219
00:14:19,646 --> 00:14:23,276
thankfully, in this case, we know exactly what to fix. But before we

220
00:14:23,298 --> 00:14:27,756
do that, we want to go to the PR environment and we want

221
00:14:27,778 --> 00:14:31,656
to do a reset here. So it's

222
00:14:31,688 --> 00:14:35,244
connected to our base environment and they share the same database,

223
00:14:35,372 --> 00:14:39,296
and we want to load a snapshot from the base environment into

224
00:14:39,478 --> 00:14:42,944
the PR environment and we want to make sure

225
00:14:42,982 --> 00:14:46,160
that we reset it to a previous state because we did

226
00:14:46,230 --> 00:14:49,396
create a new user account and we did a few things with the database that

227
00:14:49,418 --> 00:14:52,756
we want to kind of clear from our view, just so we

228
00:14:52,778 --> 00:14:55,972
can start fresh and be running the end to end tests against

229
00:14:56,026 --> 00:14:59,716
the environment with an identical database every single time. So we're

230
00:14:59,748 --> 00:15:02,952
just copying that back there and we are going to

231
00:15:03,006 --> 00:15:06,570
fix this little bug that was uncovered that broke the end to end test,

232
00:15:07,900 --> 00:15:11,790
which is just as simple as changing a button,

233
00:15:13,360 --> 00:15:17,484
and we're going to just push that, commit, and just like that,

234
00:15:17,522 --> 00:15:21,164
it's going to trigger our CI workflow once again, which I

235
00:15:21,202 --> 00:15:23,520
also have at eight times speed.

236
00:15:26,580 --> 00:15:30,288
And right there, we're authenticating into

237
00:15:30,374 --> 00:15:32,240
shipyard into our environment.

238
00:15:39,690 --> 00:15:42,220
All right. And then we have our environment here.

239
00:15:45,890 --> 00:15:49,502
All right. And as expected, the first test passed, but now the moment

240
00:15:49,556 --> 00:15:53,146
of truth, if the next test passed with our fixed

241
00:15:53,178 --> 00:15:53,790
feature.

242
00:15:57,010 --> 00:16:00,506
Again, thank you very much for joining me today. I hope you enjoyed

243
00:16:00,538 --> 00:16:04,206
this presentation and I hope that you learned something new. And if

244
00:16:04,228 --> 00:16:07,654
you have any questions, feel free to email me. Natalie at

245
00:16:07,692 --> 00:16:11,446
shipyard build and I'm more than happy to talk about end to

246
00:16:11,468 --> 00:16:15,074
end testing, ephemeral environments or anything DevOps related.

247
00:16:15,202 --> 00:16:19,382
Always happy to hear questions. I hope you enjoy the rest of comp 42

248
00:16:19,436 --> 00:16:20,500
and have a wonderful day.

