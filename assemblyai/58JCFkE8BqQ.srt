1
00:00:20,730 --> 00:00:24,480
Welcome to my talk about buildings. Well,

2
00:00:25,690 --> 00:00:30,210
let's start explaining what is Golings.

3
00:00:30,370 --> 00:00:34,102
Golings is a tool to help beginners to learn

4
00:00:34,156 --> 00:00:37,542
the programming language by fixing small

5
00:00:37,596 --> 00:00:41,414
problems. This is malpractice. They have

6
00:00:41,452 --> 00:00:44,822
some errors in the problem so

7
00:00:44,876 --> 00:00:48,600
you can compile them before you fix them.

8
00:00:50,370 --> 00:00:54,160
And there are some

9
00:00:54,850 --> 00:00:59,102
other exercise that they are

10
00:00:59,236 --> 00:01:03,554
actually tests. So you need to make

11
00:01:03,592 --> 00:01:06,866
the tests pass so you can go to the next

12
00:01:06,968 --> 00:01:10,990
exercises. The tests are already written

13
00:01:11,150 --> 00:01:15,140
in go. So your task is to

14
00:01:16,330 --> 00:01:19,894
fix the test so you

15
00:01:19,932 --> 00:01:23,830
can remove the comment that I will explain

16
00:01:23,980 --> 00:01:28,026
later. I'm not done and you can go to the next

17
00:01:28,128 --> 00:01:29,050
exercise.

18
00:01:30,430 --> 00:01:34,410
So why I created golings?

19
00:01:35,470 --> 00:01:39,306
Well I created golings because I

20
00:01:39,328 --> 00:01:42,814
believe in fast feedback while learning new

21
00:01:42,852 --> 00:01:46,378
programming language. So go links

22
00:01:46,394 --> 00:01:50,110
like rust links for rust and zig links for zig.

23
00:01:53,110 --> 00:01:56,514
They behave the same way, they work the same

24
00:01:56,552 --> 00:02:00,194
way. You have a tool, a binary that you can

25
00:02:00,232 --> 00:02:04,942
install in your computer, a program and this

26
00:02:05,016 --> 00:02:08,230
programming. You can also

27
00:02:08,300 --> 00:02:11,960
download the list of exercise and

28
00:02:14,650 --> 00:02:18,570
a file that is indexed for all this exercise

29
00:02:19,150 --> 00:02:23,526
and you can run go links to verify

30
00:02:23,638 --> 00:02:27,302
if you check if your exercise

31
00:02:27,366 --> 00:02:31,854
are correct after trying to fix them trying

32
00:02:31,892 --> 00:02:35,854
to fix them. So this

33
00:02:35,892 --> 00:02:38,160
is what Golings is.

34
00:02:39,490 --> 00:02:44,270
Now I will show you the

35
00:02:44,340 --> 00:02:48,202
repository and here you can find Golings

36
00:02:48,266 --> 00:02:51,726
GitHub. So you

37
00:02:51,748 --> 00:02:55,720
have pretty good documentation here

38
00:02:57,610 --> 00:03:01,270
it can guide you installing

39
00:03:01,610 --> 00:03:05,158
the program. You can

40
00:03:05,324 --> 00:03:08,890
install it either by using

41
00:03:08,960 --> 00:03:13,114
the go install comment or finding a

42
00:03:13,312 --> 00:03:17,258
binary for your operating system

43
00:03:17,344 --> 00:03:20,846
and architecture here in

44
00:03:20,868 --> 00:03:22,480
the releases page.

45
00:03:24,930 --> 00:03:28,314
Okay, after downloading

46
00:03:28,362 --> 00:03:31,600
go installing go and

47
00:03:32,470 --> 00:03:37,170
cloning the repository and installing

48
00:03:39,030 --> 00:03:45,446
the golings binary, you can start to

49
00:03:45,468 --> 00:03:47,560
fix all the exercises. Right.

50
00:03:49,210 --> 00:03:53,410
All the exercise can be found in the director

51
00:03:53,490 --> 00:03:56,854
Golings exercises and the top q

52
00:03:56,892 --> 00:04:00,634
one sugar the

53
00:04:00,672 --> 00:04:04,986
file the

54
00:04:05,008 --> 00:04:08,666
file infotomo. It has a list of

55
00:04:08,688 --> 00:04:12,640
all the exercise. They are ordered by the difficult.

56
00:04:13,650 --> 00:04:17,520
So if you start right now,

57
00:04:19,570 --> 00:04:22,658
the range of difficulty of the exercise will

58
00:04:22,664 --> 00:04:26,370
be from the most east to the most hard exercise

59
00:04:26,870 --> 00:04:28,610
to the harder exercises.

60
00:04:30,470 --> 00:04:34,082
Okay, let's try

61
00:04:34,136 --> 00:04:35,170
go links.

62
00:04:36,870 --> 00:04:40,406
Okay, before I

63
00:04:40,428 --> 00:04:44,594
go into the attempt

64
00:04:44,642 --> 00:04:48,410
of fixing some exercise,

65
00:04:50,350 --> 00:04:54,380
I want to give you my thoughts about fast feedback and

66
00:04:55,230 --> 00:04:58,374
a little more detail on why I created the goal links

67
00:04:58,422 --> 00:05:00,250
for the goal language.

68
00:05:01,650 --> 00:05:05,360
I believe in fast feedback because when you

69
00:05:06,610 --> 00:05:10,606
are reading a book, the book has

70
00:05:10,708 --> 00:05:14,414
a lot of theory that is very important

71
00:05:14,532 --> 00:05:18,542
and necessary. But some

72
00:05:18,676 --> 00:05:22,942
books they don't have the fast fit backup

73
00:05:23,006 --> 00:05:24,100
beginner needs.

74
00:05:26,250 --> 00:05:29,990
Sometimes, even if you are experienced programmer,

75
00:05:30,650 --> 00:05:34,070
you know most of the theory behind the programming language.

76
00:05:34,410 --> 00:05:37,798
So you are used

77
00:05:37,884 --> 00:05:42,140
to learning new programming language. So it gets easier with time

78
00:05:43,150 --> 00:05:46,554
and you want fast feedback because you

79
00:05:46,592 --> 00:05:50,218
want to learn faster and you don't

80
00:05:50,234 --> 00:05:54,094
want to get stuck by reading a huge book

81
00:05:54,292 --> 00:05:57,246
before typing some code.

82
00:05:57,428 --> 00:06:01,706
So this is where Ato,

83
00:06:01,738 --> 00:06:05,490
like Golang, shines by

84
00:06:05,560 --> 00:06:09,522
giving you fast feedback. And fast

85
00:06:09,576 --> 00:06:12,914
feedback is something very important to me,

86
00:06:13,032 --> 00:06:16,534
and I believe that it's very important for beginners as

87
00:06:16,572 --> 00:06:20,600
well. Now, how does Goldink work?

88
00:06:21,370 --> 00:06:26,262
When you want to try

89
00:06:26,316 --> 00:06:30,390
gold links, you can run

90
00:06:30,540 --> 00:06:31,750
gold links.

91
00:06:33,470 --> 00:06:39,034
Let's install so I

92
00:06:39,072 --> 00:06:40,720
can copy it here.

93
00:06:44,450 --> 00:06:48,394
Okay, it's installed, it's already cloned,

94
00:06:48,442 --> 00:06:51,742
right? And you can type

95
00:06:51,796 --> 00:06:55,290
go links. Run next. Go link is run. Next is a

96
00:06:55,300 --> 00:06:58,478
comment to run the next exercise that you haven't fixed

97
00:06:58,494 --> 00:06:59,300
it yet.

98
00:07:00,790 --> 00:07:04,094
Now after running the comment,

99
00:07:04,222 --> 00:07:07,474
we can see that it tried to compile

100
00:07:07,522 --> 00:07:08,630
the exercise.

101
00:07:11,130 --> 00:07:15,334
It has an output of the

102
00:07:15,372 --> 00:07:18,070
error of the compiler,

103
00:07:18,590 --> 00:07:21,946
right? It says that there is a syntax error in

104
00:07:21,968 --> 00:07:26,460
your program. It was expected to have

105
00:07:27,070 --> 00:07:30,394
the variable was expected to have

106
00:07:30,432 --> 00:07:34,510
a name. Variables in go have names.

107
00:07:35,410 --> 00:07:39,326
You can declare it either with VAR or

108
00:07:39,428 --> 00:07:42,910
with column before they cosign.

109
00:07:44,950 --> 00:07:48,466
And also you can see that in the end of the

110
00:07:48,488 --> 00:07:51,090
output of the comment,

111
00:07:52,630 --> 00:07:56,740
it tells you if you are stuck trying to fix

112
00:07:57,750 --> 00:08:01,382
in the program, you can ask

113
00:08:01,436 --> 00:08:06,194
a hint to the program and all the hints are declared in the promo

114
00:08:06,242 --> 00:08:10,066
file. So let's ask a heat for the

115
00:08:10,108 --> 00:08:13,674
program. Okay, variables that have

116
00:08:13,712 --> 00:08:17,660
names. Yeah, let's open

117
00:08:18,190 --> 00:08:21,742
the exercise and fix

118
00:08:21,796 --> 00:08:25,822
it so you can go to the next. There's another comment called

119
00:08:25,876 --> 00:08:26,830
Golings.

120
00:08:28,770 --> 00:08:32,754
Golings verify it

121
00:08:32,792 --> 00:08:36,690
runs all the exercise from the first

122
00:08:36,760 --> 00:08:40,434
to the last to

123
00:08:40,552 --> 00:08:47,380
check if you succeed by

124
00:08:48,230 --> 00:08:50,870
fixing all the exercises.

125
00:08:52,010 --> 00:08:55,366
Okay, it stopped it in

126
00:08:55,388 --> 00:08:59,660
the first because you haven't fixed it yet.

127
00:09:00,590 --> 00:09:04,090
Variables. Let's open the

128
00:09:04,160 --> 00:09:07,450
program here and we need a variable.

129
00:09:08,350 --> 00:09:11,342
The printf call here,

130
00:09:11,396 --> 00:09:14,880
it says that it has a message.

131
00:09:15,730 --> 00:09:19,342
The first argument of print chef is

132
00:09:19,476 --> 00:09:22,410
a format string, right? It's a message.

133
00:09:22,580 --> 00:09:26,466
And the next parameters are the variables that must be

134
00:09:26,488 --> 00:09:28,020
interpolated here.

135
00:09:29,590 --> 00:09:33,202
So it says that x has a value,

136
00:09:33,336 --> 00:09:36,786
the value and the format.

137
00:09:36,898 --> 00:09:40,594
It's integer. It's how you represent

138
00:09:40,642 --> 00:09:43,590
an integer when formatting a string.

139
00:09:43,930 --> 00:09:48,134
So we need to add the

140
00:09:48,332 --> 00:09:52,138
axe name here and it will

141
00:09:52,304 --> 00:09:56,634
compile. Let's check go

142
00:09:56,672 --> 00:10:00,102
links. Run next. Okay, it says

143
00:10:00,176 --> 00:10:04,302
we are done and it now

144
00:10:04,356 --> 00:10:08,974
passes the compiler rules and

145
00:10:09,172 --> 00:10:13,390
the programming outputs what we were expecting.

146
00:10:14,790 --> 00:10:18,594
Nice. We can

147
00:10:18,712 --> 00:10:22,900
remove the comment. The comment is what

148
00:10:23,910 --> 00:10:27,640
makes you that?

149
00:10:28,650 --> 00:10:31,986
When we remove the comment, go links

150
00:10:32,018 --> 00:10:35,830
know that we want to go to the next exercise,

151
00:10:36,330 --> 00:10:40,806
right? If you don't remove it here after fixing

152
00:10:40,838 --> 00:10:45,274
the problem, it won't run the

153
00:10:45,312 --> 00:10:49,958
next exercises. So let's remove okay,

154
00:10:50,064 --> 00:10:54,480
now it goes to the second exercise. It tries to compile and

155
00:10:56,930 --> 00:11:00,782
it failed to complete. You now

156
00:11:00,836 --> 00:11:04,754
can ask another hint to

157
00:11:04,792 --> 00:11:07,842
the problem. It says

158
00:11:07,896 --> 00:11:11,890
that we miss a symbol

159
00:11:12,230 --> 00:11:15,830
used to declare initialize variable variables.

160
00:11:16,650 --> 00:11:19,526
Now you can open it here,

161
00:11:19,708 --> 00:11:23,174
right? And you can declare the

162
00:11:23,212 --> 00:11:26,582
variable the right way using

163
00:11:26,636 --> 00:11:30,554
the column and

164
00:11:30,592 --> 00:11:33,770
I can remove it here and run the verify.

165
00:11:35,310 --> 00:11:39,290
It runs the first for the second. It runs all the exercise.

166
00:11:40,450 --> 00:11:42,720
This is how golings work.

167
00:11:44,450 --> 00:11:48,094
Let's add a new exercises to

168
00:11:48,132 --> 00:11:52,202
the Golings repository so it

169
00:11:52,356 --> 00:11:55,330
will go to the main upstream.

170
00:11:56,150 --> 00:12:00,370
Actually go links is a tool that works

171
00:12:00,440 --> 00:12:04,462
with any folder,

172
00:12:04,526 --> 00:12:08,520
with any exercises. We can

173
00:12:08,970 --> 00:12:13,400
have your own exercises. You just need to have

174
00:12:15,450 --> 00:12:20,010
your own thumb file to describe the exercises.

175
00:12:20,990 --> 00:12:25,018
Your own exercises actually. But if you feel like your

176
00:12:25,184 --> 00:12:29,302
exercises will be useful to other beginners,

177
00:12:29,446 --> 00:12:31,630
other students of the language,

178
00:12:33,250 --> 00:12:37,294
I will be very happy to review your pull

179
00:12:37,332 --> 00:12:41,642
request so we can merge it to the upstream

180
00:12:41,706 --> 00:12:44,610
branch. Okay,

181
00:12:44,680 --> 00:12:48,594
let's create a new exercises here.

182
00:12:48,792 --> 00:12:50,660
Struct okay,

183
00:12:53,030 --> 00:12:58,980
we can copy copy this

184
00:13:03,390 --> 00:13:07,418
can copy create a new folder.

185
00:13:07,514 --> 00:13:11,074
Struct three. Now we can

186
00:13:11,112 --> 00:13:13,650
copy the second exercise.

187
00:13:14,790 --> 00:13:16,820
Let's do something similar.

188
00:13:18,790 --> 00:13:19,540
Great.

189
00:13:22,070 --> 00:13:25,960
Okay, let's move it here

190
00:13:26,970 --> 00:13:28,790
it is just a comment.

191
00:13:32,490 --> 00:13:36,650
Let's create an exercise that it

192
00:13:36,720 --> 00:13:39,180
must print the person full name,

193
00:13:40,510 --> 00:13:45,114
right? So we

194
00:13:45,152 --> 00:13:49,242
can change the message here. Person full

195
00:13:49,296 --> 00:13:52,906
name is and use the s

196
00:13:53,008 --> 00:13:56,670
person s. It means that you are

197
00:13:56,740 --> 00:14:00,930
format I string and full name is a string.

198
00:14:02,550 --> 00:14:06,162
Change name replace name

199
00:14:06,216 --> 00:14:10,180
by first name and

200
00:14:11,910 --> 00:14:13,090
surname.

201
00:14:14,570 --> 00:14:16,230
It's also string.

202
00:14:20,970 --> 00:14:25,590
Let's do the structure with the right attributes.

203
00:14:29,450 --> 00:14:33,814
It's not. Let's put my input

204
00:14:33,862 --> 00:14:34,940
my name here.

205
00:14:38,770 --> 00:14:42,414
Well, one of the problems

206
00:14:42,532 --> 00:14:46,494
of any kind of this cool is that the

207
00:14:46,532 --> 00:14:50,390
problem just it just passed

208
00:14:50,410 --> 00:14:54,674
the compiler. It must obey the compiler and

209
00:14:54,712 --> 00:14:58,820
if the compiler is happy,

210
00:14:59,590 --> 00:15:03,574
you will succeed. So we can

211
00:15:03,612 --> 00:15:07,382
add comments to make the person that

212
00:15:07,436 --> 00:15:11,046
is using all links to help

213
00:15:11,148 --> 00:15:15,320
the person to know what

214
00:15:16,190 --> 00:15:21,146
they need to achieve. Like here

215
00:15:21,328 --> 00:15:23,260
it must be.

216
00:15:25,230 --> 00:15:31,440
It must output person

217
00:15:32,130 --> 00:15:35,790
full name is Maurice.

218
00:15:36,770 --> 00:15:37,520
Okay,

219
00:15:40,470 --> 00:15:45,780
let's add this exercise will

220
00:15:46,230 --> 00:15:49,730
be about adding a function to a struct.

221
00:15:50,230 --> 00:16:00,270
So we need to

222
00:16:02,720 --> 00:16:06,168
create the exercises. Added exercises

223
00:16:06,264 --> 00:16:10,510
here. Strep three

224
00:16:11,360 --> 00:16:15,304
actually two. So I can edit

225
00:16:15,432 --> 00:16:18,752
right after the second exercises.

226
00:16:18,776 --> 00:16:23,520
Guys, about structs. Struct three struct

227
00:16:23,600 --> 00:16:31,072
tree since

228
00:16:31,126 --> 00:16:31,970
it is.

229
00:16:36,520 --> 00:16:40,950
Let's add a hint. You can

230
00:16:43,160 --> 00:16:47,930
add a function to a struct by

231
00:16:50,940 --> 00:16:56,488
adding code similar to

232
00:16:56,574 --> 00:16:59,470
the one below.

233
00:17:01,600 --> 00:17:09,822
Funk the something structure

234
00:17:09,886 --> 00:17:12,420
here the something.

235
00:17:14,010 --> 00:17:18,630
I think it's

236
00:17:19,850 --> 00:17:24,806
a good hint to the person so they

237
00:17:24,828 --> 00:17:29,614
can explore in the Internet books

238
00:17:29,762 --> 00:17:31,180
to find the answer.

239
00:17:32,910 --> 00:17:36,940
The something return.

240
00:17:37,630 --> 00:17:41,306
Let's submit it here. We already covered

241
00:17:41,338 --> 00:17:44,798
the function, so they will know that

242
00:17:44,964 --> 00:17:49,550
functions can have return types return

243
00:17:49,620 --> 00:17:52,740
values actually with a type.

244
00:17:54,870 --> 00:17:55,620
Okay,

245
00:17:58,070 --> 00:18:01,570
now let's change this comment,

246
00:18:02,490 --> 00:18:03,240
golings.

247
00:18:10,170 --> 00:18:14,990
There's a way to run a specific exercises,

248
00:18:15,090 --> 00:18:17,660
so let's run it stripped three.

249
00:18:18,990 --> 00:18:23,194
Okay, now it outputs the error and

250
00:18:23,392 --> 00:18:26,490
you can ask a heat for go links.

251
00:18:27,410 --> 00:18:29,870
And now we have a new exercises.

252
00:18:31,330 --> 00:18:36,766
Well, this is golings. I hope you have enjoyed this

253
00:18:36,868 --> 00:18:40,654
talk and if you want to know more about the

254
00:18:40,692 --> 00:18:44,366
project, if you want to know how it works in

255
00:18:44,388 --> 00:18:48,478
details and help with new features or

256
00:18:48,564 --> 00:18:52,274
issues, you can send me DM

257
00:18:52,442 --> 00:18:55,590
on Twitter or find me on GitHub.

258
00:18:56,010 --> 00:18:57,940
And that's all. Thank you.

