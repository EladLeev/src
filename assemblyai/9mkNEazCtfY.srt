1
00:00:27,010 --> 00:00:30,566
Hello everyone, I would like you to welcome to this talk. Today we will

2
00:00:30,588 --> 00:00:33,814
be discussing about feature flags in Terraform. Before we

3
00:00:33,852 --> 00:00:37,234
begin, I would like to introduce myself. I'm Pravesh Sapper

4
00:00:37,282 --> 00:00:40,790
and I've been working in the field of SRV and DevOps for quite some time.

5
00:00:40,940 --> 00:00:44,786
The key topic we'll be discussing today are what are feature flags

6
00:00:44,818 --> 00:00:48,710
and why should you use them? How to implement feature toggles in terraform

7
00:00:49,370 --> 00:00:53,406
and how we can pass feature flag from configuration file and

8
00:00:53,428 --> 00:00:57,338
we'll do a quick demo. So what is terraform?

9
00:00:57,514 --> 00:01:01,882
Terraform is an API driven infrastructure as code tool created by Hashicorp.

10
00:01:01,946 --> 00:01:04,750
It uses declarative language called etc.

11
00:01:05,090 --> 00:01:08,834
As we all know that features have been implemented in software engineering for quite

12
00:01:08,872 --> 00:01:12,354
some time. Let's talk a little bit about them. So what

13
00:01:12,392 --> 00:01:15,714
are feature flags? It is a software engineering technique which

14
00:01:15,752 --> 00:01:19,462
allow you to enable or disable feature without additional code.

15
00:01:19,596 --> 00:01:22,258
They are also known as toggles or switches.

16
00:01:22,434 --> 00:01:25,890
There are various benefits of using feature flags like running rollout

17
00:01:25,970 --> 00:01:29,354
or rollback operation or allowing developer to test code

18
00:01:29,392 --> 00:01:32,566
in control environment. Feature flag are passed

19
00:01:32,598 --> 00:01:36,806
from either configuration file environment variables or dedicated feature flag

20
00:01:36,838 --> 00:01:39,690
management platforms such as launch darkly.

21
00:01:40,110 --> 00:01:43,166
Next we'll discuss about why we should use it in

22
00:01:43,188 --> 00:01:46,602
our infrastructure as code. The first reason is it increases

23
00:01:46,666 --> 00:01:50,222
the flexibility. Feature flag allows granular control over

24
00:01:50,276 --> 00:01:53,918
rollout of changes and can be used to turn specific feature

25
00:01:54,014 --> 00:01:57,742
or functionality on and off for different environment

26
00:01:57,806 --> 00:02:01,282
and different user group. This allows for more efficient and

27
00:02:01,336 --> 00:02:04,738
flexible development, testing and deployment of specific

28
00:02:04,824 --> 00:02:09,122
feature, increasing the flexibility. You can selectively provision resource

29
00:02:09,186 --> 00:02:12,854
based on their environment using feature flags. That is, you can have

30
00:02:12,892 --> 00:02:16,754
a smaller instance on dev but larger more capable instance

31
00:02:16,802 --> 00:02:20,474
on prod. Using feature flag in infrastructure as code it helps to

32
00:02:20,512 --> 00:02:23,866
improve scalability has we know that feature flags can be used

33
00:02:23,888 --> 00:02:27,738
to enable or disable sorting feature or functionality based on current

34
00:02:27,824 --> 00:02:31,114
load on your infrastructure. Now what it does is it

35
00:02:31,152 --> 00:02:34,778
allows us to scale infrastructure up or down as necessary

36
00:02:34,874 --> 00:02:38,238
without need to make changes to the code, hence improving the

37
00:02:38,324 --> 00:02:42,158
scalability. In general, using feature flag we get better control

38
00:02:42,244 --> 00:02:46,194
of over our deployment using techniques such as blue, green or

39
00:02:46,232 --> 00:02:49,566
canary. We can test and validate changes in a controlled

40
00:02:49,598 --> 00:02:52,450
environment and quickly roll back changes if necessary.

41
00:02:53,270 --> 00:02:57,326
It also helps to improve safety by reducing the risk of introducing

42
00:02:57,358 --> 00:03:00,694
breaking changes. This helps to ensure that your infrastructure is

43
00:03:00,732 --> 00:03:03,954
always in a stable and working state. Using feature

44
00:03:04,002 --> 00:03:07,286
flags as part of your infrastructure as code configuration, we are able

45
00:03:07,308 --> 00:03:10,746
to perform effective monitoring and debugging. Let me tell

46
00:03:10,768 --> 00:03:13,718
you why, because if we use feature flag,

47
00:03:13,814 --> 00:03:18,086
we are aware which changes were introduced incrementally and knowledge

48
00:03:18,118 --> 00:03:21,310
of this allows us to isolate specific issue

49
00:03:21,380 --> 00:03:24,794
of feature or functionality, hence improving the debugging.

50
00:03:24,922 --> 00:03:28,494
Let's look into how we can achieve this. The key

51
00:03:28,532 --> 00:03:31,726
player is count meta argument. It allows us to

52
00:03:31,748 --> 00:03:35,314
create a specific resource, a specific number of

53
00:03:35,352 --> 00:03:39,566
identical resources. Here in the example I have a resource block

54
00:03:39,678 --> 00:03:43,122
to create AWS instance. You can see in the count

55
00:03:43,176 --> 00:03:47,346
argument that we are asking terraform to provision four identical

56
00:03:47,538 --> 00:03:51,110
AWS instances. One key thing to remember here is

57
00:03:51,180 --> 00:03:54,726
we can pass zero to count as well, which means

58
00:03:54,828 --> 00:03:58,282
if we set count to zero, then the resource will not be

59
00:03:58,336 --> 00:04:01,898
created at all. Another key player in the story is

60
00:04:01,984 --> 00:04:06,070
conditional expression. Conditional expression in terraform uses

61
00:04:06,150 --> 00:04:09,674
value of a boolean expression to select one of two

62
00:04:09,712 --> 00:04:13,162
values. So using count and conditional expression,

63
00:04:13,226 --> 00:04:17,950
we can implement feature toggles in terraform. Let's look into some implementations.

64
00:04:18,530 --> 00:04:22,270
First we will look into creating environment based feature toggles.

65
00:04:23,170 --> 00:04:26,722
So basically environment based feature toggles are those

66
00:04:26,776 --> 00:04:30,226
kind of feature flags which helps you to toggle between feature based on

67
00:04:30,248 --> 00:04:34,002
the environment you are deploying to. To do that, we will first

68
00:04:34,056 --> 00:04:37,426
create a variable named n and then we will use

69
00:04:37,448 --> 00:04:40,726
that variable along with count and conditional expression in our

70
00:04:40,748 --> 00:04:44,614
resource block. Here I have two resource block one to create a

71
00:04:44,652 --> 00:04:48,406
small or puny Vm and another to create a beefy vm based on

72
00:04:48,428 --> 00:04:52,266
the environment. If the value of n is dev, then the

73
00:04:52,288 --> 00:04:56,166
value of count in puny Vm is set to one and hence smaller Vm

74
00:04:56,198 --> 00:05:00,170
is created. And if the value of n is prod, then the value

75
00:05:00,240 --> 00:05:04,174
of count in beefy Vm is set to three and hence three

76
00:05:04,212 --> 00:05:08,094
instance of BFBM is created. We'll look into this in the

77
00:05:08,132 --> 00:05:11,562
demo as well. Now let's look into how we can create feature

78
00:05:11,626 --> 00:05:14,682
toggles based on specific value to toggle

79
00:05:14,746 --> 00:05:17,954
specific resources. What we can do is similar to the thing

80
00:05:17,992 --> 00:05:21,694
that we discussed before. We will create a local variable to enable

81
00:05:21,742 --> 00:05:25,234
that flag and then pass it to the resource just like we did.

82
00:05:25,272 --> 00:05:28,374
For environment based toggle. The working mechanism is

83
00:05:28,412 --> 00:05:31,382
same, but instead of relying on environment here,

84
00:05:31,436 --> 00:05:35,174
we rely on a specific feature flag to enable or disable creation of that

85
00:05:35,212 --> 00:05:38,982
resource. Another way you can implement feature flag are at module level.

86
00:05:39,116 --> 00:05:42,506
We create a flag for that module and pass it directly to the

87
00:05:42,528 --> 00:05:46,106
module instead of passing it at resource level. This has been

88
00:05:46,128 --> 00:05:50,086
possible after terraform 00:13 which was a good leap forward. The usage

89
00:05:50,118 --> 00:05:53,538
is similar to implementing feature flag in resource. We created

90
00:05:53,574 --> 00:05:57,454
a dedicated flag, but instead of passing to a resource level, we pass

91
00:05:57,492 --> 00:06:00,894
the flag directly to the module and if the flag is set, it will

92
00:06:00,932 --> 00:06:04,366
provision the resource. There are other ways you can use or

93
00:06:04,388 --> 00:06:08,002
leverage feature flag like you could use it for blue green

94
00:06:08,056 --> 00:06:11,426
deployments using floating ip in this lotion. Or if you are

95
00:06:11,448 --> 00:06:14,878
using AWS, you can perform canary release using AWS load

96
00:06:14,894 --> 00:06:18,902
balancer target group. I mean, possibilities are endless. Let's talk

97
00:06:18,956 --> 00:06:22,274
about how to organize these flags. There are various

98
00:06:22,322 --> 00:06:25,586
ways to do this, but first one is defining the feature flag

99
00:06:25,618 --> 00:06:29,430
in local variable. We saw how to do this in our previous slides as well.

100
00:06:29,500 --> 00:06:33,274
We define a flag as part of our local variable and then

101
00:06:33,312 --> 00:06:36,358
use them as needed in other resources or module.

102
00:06:36,454 --> 00:06:40,070
Another way we can organize feature flag is using configuration file.

103
00:06:40,150 --> 00:06:43,854
This is my personal favorite as we can get a complete information

104
00:06:43,972 --> 00:06:47,054
about the infrastructure without having to dig down deep into

105
00:06:47,092 --> 00:06:50,446
variables or terraform configuration file. Here we

106
00:06:50,468 --> 00:06:54,906
define variable in configuration file and then load this variable

107
00:06:55,018 --> 00:06:58,386
into terraform and use it as needed. It's kind

108
00:06:58,408 --> 00:07:02,046
of neat, right? Anyways, let's move on to the demo. Okay, in this demo we'll

109
00:07:02,078 --> 00:07:06,006
be looking into the things that we discussed in the slides. So I have

110
00:07:06,108 --> 00:07:10,274
environment based toggle created which is a variable named

111
00:07:10,322 --> 00:07:13,430
n and I'm passing that n variable to

112
00:07:13,500 --> 00:07:16,402
our droplet. Let's look into the droplet.

113
00:07:16,546 --> 00:07:20,554
So I pass the droplet into the count with

114
00:07:20,592 --> 00:07:24,346
conditional expression saying if the

115
00:07:24,448 --> 00:07:28,134
value of environment is dev then it will provision a smaller vm.

116
00:07:28,182 --> 00:07:32,166
And if the value of environment is broad then it will provision of beefy

117
00:07:32,198 --> 00:07:35,440
vm. Let's run terraform plan and see what happens.

118
00:07:42,050 --> 00:07:45,474
So as you can see that the value of inn was

119
00:07:45,512 --> 00:07:49,438
defaulted to dev and based on that it provisioned puny

120
00:07:49,454 --> 00:07:52,318
vm which can be verified from the output.

121
00:07:52,494 --> 00:07:55,846
But let's see what happens if we override the

122
00:07:55,868 --> 00:07:58,950
value of n to prod.

123
00:08:02,090 --> 00:08:05,894
So as you can see, it detected the environment is

124
00:08:05,932 --> 00:08:09,546
prod and provisioned beefy instance. The another thing that I want to

125
00:08:09,568 --> 00:08:12,854
show you today is the feature flag using configuration

126
00:08:12,902 --> 00:08:16,682
file. So I have two feature flags created here which

127
00:08:16,736 --> 00:08:19,718
provisions the load balancer and provisions the database.

128
00:08:19,894 --> 00:08:21,930
Let's see here in the module.

129
00:08:24,530 --> 00:08:27,626
Basically what I'm doing is to provision

130
00:08:27,738 --> 00:08:31,354
a load balancer. I'm passing count to module

131
00:08:31,402 --> 00:08:35,122
itself. So if the value of provision lb or

132
00:08:35,256 --> 00:08:38,674
value of provision load balancer flag is set to true,

133
00:08:38,792 --> 00:08:42,286
the count will be one and it will provision the load balancer.

134
00:08:42,478 --> 00:08:46,862
So let's set the value of provision

135
00:08:46,926 --> 00:08:50,520
load balancer flags to true and run the code again.

136
00:08:51,610 --> 00:08:54,918
Now we can see it provisioned the load balancer for us. Let's set

137
00:08:55,004 --> 00:08:58,406
the value of database to true as well and run the

138
00:08:58,428 --> 00:09:01,674
code. If I run terraform plan again you can

139
00:09:01,712 --> 00:09:05,660
see it added four resource to change and if you scroll up and see

140
00:09:06,030 --> 00:09:09,626
it has created the database as well. So that's all for the

141
00:09:09,648 --> 00:09:13,146
demo. Before we end the talk, here are the key takeaway I

142
00:09:13,168 --> 00:09:17,258
want to repeat again which are feature flag is a very powerful technique

143
00:09:17,434 --> 00:09:21,146
which has been implemented in software engineering for a long time. I think it's

144
00:09:21,178 --> 00:09:25,070
time we start using it as part of our infrastructure as code as well as

145
00:09:25,140 --> 00:09:28,894
it helps in adding flexibility, scalability and maintainability to

146
00:09:28,932 --> 00:09:32,910
our infrastructure as code. Here's the link to the source code

147
00:09:32,980 --> 00:09:36,422
shown in the demo if you are keen a look and

148
00:09:36,476 --> 00:09:39,574
here are the references I used to prepare the talk.

149
00:09:39,772 --> 00:09:42,966
Thank you for listening. I hope this talk was useful. I would like

150
00:09:42,988 --> 00:09:46,354
to connect with you all and talk more about terraform feature

151
00:09:46,402 --> 00:09:49,654
flags and DevOps in general. Here are the links to my

152
00:09:49,692 --> 00:09:52,770
socials. Thanks again and enjoy the rest of the conference.

