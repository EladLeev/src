1
00:01:28,610 --> 00:01:31,586
Hi everyone, thank you for joining my session.

2
00:01:31,698 --> 00:01:35,506
From ghost assets to infrastructure drift don't

3
00:01:35,538 --> 00:01:36,710
get spooked.

4
00:01:38,650 --> 00:01:42,698
We'll start with a short intro and continue with a reminder

5
00:01:42,794 --> 00:01:45,710
of the concept of infrastructure drift.

6
00:01:46,130 --> 00:01:49,710
We'll cover what Ghost assets are and the top five

7
00:01:49,780 --> 00:01:53,470
ghost assets according to more than 100 AWS

8
00:01:53,550 --> 00:01:56,754
production accounts. We'll continue with what

9
00:01:56,792 --> 00:02:00,654
you can do about ghost assets to prevent some nasty

10
00:02:00,702 --> 00:02:03,220
stuff from happening to your cloud.

11
00:02:05,990 --> 00:02:10,146
My name is Naor Paz. I currently work as director

12
00:02:10,178 --> 00:02:14,066
of product management at Firefly, the cloud asset management

13
00:02:14,098 --> 00:02:18,042
platform for DevOps, site reliability and

14
00:02:18,096 --> 00:02:22,220
cloud engineers driven by infrastructure as code

15
00:02:22,670 --> 00:02:26,246
a bit about myself before joining Firefly,

16
00:02:26,358 --> 00:02:29,546
I worked at f five as a senior product managed in

17
00:02:29,568 --> 00:02:33,674
application security, where I led the web application firewall

18
00:02:33,722 --> 00:02:36,846
product. Before that I worked for

19
00:02:36,868 --> 00:02:40,654
the Office of the Prime Minister of Israel as a security research and

20
00:02:40,692 --> 00:02:44,258
analytics team lead, and before that I served at

21
00:02:44,264 --> 00:02:47,858
unit 8200 doing mainly network security

22
00:02:47,944 --> 00:02:51,662
research and data analytics. So in these past decade,

23
00:02:51,726 --> 00:02:56,006
I've got a mixed background in DevOps cloud security

24
00:02:56,188 --> 00:02:58,470
data and networks.

25
00:03:01,370 --> 00:03:04,802
So what do you need to know to gain some valuable

26
00:03:04,866 --> 00:03:08,698
knowledge from this session? Well, not too much,

27
00:03:08,864 --> 00:03:11,610
but you need to understand the following concepts.

28
00:03:12,270 --> 00:03:15,814
Cloud throughout these session I will mainly

29
00:03:15,862 --> 00:03:19,194
show examples from the most significant public cloud to

30
00:03:19,232 --> 00:03:23,070
date, Amazon Web services or AWS,

31
00:03:23,490 --> 00:03:26,298
but any cloud background is sufficient.

32
00:03:26,474 --> 00:03:30,174
The session is as relevant to Azure, Google Cloud

33
00:03:30,292 --> 00:03:32,910
and other cloud service providers.

34
00:03:33,810 --> 00:03:36,590
Infrastructure as code or IAC.

35
00:03:37,410 --> 00:03:41,086
This session focused on examples from Hashicorp

36
00:03:41,118 --> 00:03:44,842
terraform. Although relevant to Polome,

37
00:03:45,006 --> 00:03:49,426
cloudformation and other IAC technologies,

38
00:03:49,618 --> 00:03:53,330
I recommend understanding state files HCL,

39
00:03:53,410 --> 00:03:56,774
which is Hashicorp configuration language, and some

40
00:03:56,812 --> 00:03:59,450
terminology such as providers.

41
00:04:00,110 --> 00:04:04,154
When I say cloud asset, I usually mean a terraform resource when

42
00:04:04,192 --> 00:04:05,740
it is a managed one.

43
00:04:09,270 --> 00:04:13,190
Infrastructure drift a short reminder, when we manage

44
00:04:13,260 --> 00:04:16,754
cloud assets with terraform or any other infrastructure

45
00:04:16,802 --> 00:04:20,018
as code, we do that for multiple reasons,

46
00:04:20,194 --> 00:04:23,458
speed, consistency, versioning,

47
00:04:23,554 --> 00:04:27,046
documentation, and decreased risk.

48
00:04:27,238 --> 00:04:30,570
The opposite of managing cloud asset with code

49
00:04:30,720 --> 00:04:34,726
is doing it manually through the cloud console or user

50
00:04:34,758 --> 00:04:38,546
interface, what we like to call click Ops,

51
00:04:38,678 --> 00:04:41,390
which stands for click operations.

52
00:04:42,210 --> 00:04:45,722
Infrastructure drift starts when the infrastructure

53
00:04:45,786 --> 00:04:49,498
drifts away from the code. When we want to

54
00:04:49,524 --> 00:04:52,594
make just a small patch here and there,

55
00:04:52,712 --> 00:04:56,386
we tell ourselves that we'll add it to the code later,

56
00:04:56,568 --> 00:04:58,900
but we usually never do.

57
00:04:59,670 --> 00:05:04,270
So we started with a fully managed codified infrastructure.

58
00:05:04,430 --> 00:05:08,742
We used click ops to make just a small patch here and there.

59
00:05:08,876 --> 00:05:12,854
And now our code no longer describes the

60
00:05:12,892 --> 00:05:17,258
actual state of our cloud. When we run terraform plan,

61
00:05:17,344 --> 00:05:20,794
for example, we get a list of all the changes

62
00:05:20,912 --> 00:05:23,930
we've made manually and we're stuck.

63
00:05:24,510 --> 00:05:28,334
We have to decide whether we want to revert everything to the

64
00:05:28,372 --> 00:05:32,442
older codified state or adapt it somehow.

65
00:05:32,586 --> 00:05:36,240
Emerging changing the code to match our manual changed.

66
00:05:37,330 --> 00:05:41,006
These drifts are all about changing existing assets,

67
00:05:41,118 --> 00:05:44,670
which we created from code. This session

68
00:05:44,830 --> 00:05:48,350
focuses on the very existence of those assets,

69
00:05:48,510 --> 00:05:50,180
as you'll see right away.

70
00:05:52,970 --> 00:05:57,122
So what are ghost assets? We have our codified

71
00:05:57,266 --> 00:06:00,534
managed assets created with code using

72
00:06:00,572 --> 00:06:04,362
the terraform apply command. Someone or

73
00:06:04,416 --> 00:06:08,234
something completely removed one or more of

74
00:06:08,272 --> 00:06:11,798
those assets with APIs or clickups,

75
00:06:11,894 --> 00:06:15,194
meaning manually. They now cease to

76
00:06:15,232 --> 00:06:17,440
exist in the cloud.

77
00:06:18,050 --> 00:06:21,706
But because of the fact that they were initially created

78
00:06:21,738 --> 00:06:25,374
with code, they are still in the code itself

79
00:06:25,572 --> 00:06:28,982
and in the state file, which refreshes

80
00:06:29,066 --> 00:06:31,220
once you apply your code again.

81
00:06:32,310 --> 00:06:35,486
These assets are what we call ghost

82
00:06:35,598 --> 00:06:39,230
assets. These can hurt cloud reliability

83
00:06:39,390 --> 00:06:42,854
by causing downtime or production issues,

84
00:06:43,052 --> 00:06:47,126
creating redundant ghosts, and generating security

85
00:06:47,228 --> 00:06:47,880
issues.

86
00:06:51,530 --> 00:06:55,238
Anyway, there are two options. You either

87
00:06:55,324 --> 00:06:58,874
wanted to delete that asset which you no longer need,

88
00:06:59,072 --> 00:07:03,542
and what can happen is that it can be accidentally revived.

89
00:07:03,686 --> 00:07:08,154
It is still in the code, so applying your code will just recreate

90
00:07:08,282 --> 00:07:11,390
that asset again. The other option

91
00:07:11,460 --> 00:07:15,166
is that you did not want to delete it.

92
00:07:15,348 --> 00:07:19,034
You still need it in your cloud deployment, but it was deleted

93
00:07:19,082 --> 00:07:22,754
by mistake and now it is not available when

94
00:07:22,792 --> 00:07:25,918
you need it. It can be a storage backup,

95
00:07:26,014 --> 00:07:29,602
a compute asset such as lambda that can cause

96
00:07:29,656 --> 00:07:33,574
downtime, or a database replica, you name it.

97
00:07:33,772 --> 00:07:37,800
What is most certainly true here is that you have a problem.

98
00:07:40,490 --> 00:07:42,966
As a cloud asset management platform.

99
00:07:43,148 --> 00:07:46,902
Firefly's customers integrate their AWS accounts,

100
00:07:46,966 --> 00:07:49,580
so we have plenty of data to look at.

101
00:07:50,030 --> 00:07:53,354
By looking at only part of them, more than 100,

102
00:07:53,472 --> 00:07:56,702
we get a fascinating sorted list of the top

103
00:07:56,756 --> 00:08:00,814
five ghost asset types. EC two instance a

104
00:08:00,852 --> 00:08:04,350
compute asset, essentially a virtual machine

105
00:08:04,690 --> 00:08:08,622
IAC policy which is all about identity and

106
00:08:08,676 --> 00:08:12,626
access permissions. SqSQ, which is

107
00:08:12,648 --> 00:08:14,820
a managed messaging queuing service.

108
00:08:15,750 --> 00:08:19,854
Cloudwatch metrics alarm an alert configuration

109
00:08:19,982 --> 00:08:23,730
on a cloud metric such as cpu utilization

110
00:08:23,810 --> 00:08:27,330
for an EC two instance or volume write bytes

111
00:08:27,410 --> 00:08:30,902
for an EBS volume and security group,

112
00:08:31,036 --> 00:08:33,350
which is basically a virtual firewall.

113
00:08:35,630 --> 00:08:39,062
So EC two instance is one of the most critical

114
00:08:39,126 --> 00:08:43,206
assets. It is used by almost any AWS

115
00:08:43,318 --> 00:08:47,086
customer for compute again, essentially a

116
00:08:47,108 --> 00:08:50,734
virtual server you can do anything with. It was

117
00:08:50,772 --> 00:08:54,574
also the second service AWS introduced back in

118
00:08:54,612 --> 00:08:58,206
August 2006, 2nd only to the

119
00:08:58,228 --> 00:09:01,746
s three storage service. So what can happen

120
00:09:01,848 --> 00:09:04,958
if an instance is accidentally deleted?

121
00:09:05,134 --> 00:09:08,606
Well, in that situation we mainly

122
00:09:08,638 --> 00:09:12,854
have reliability problems. Imagine we have a multiservice application

123
00:09:12,972 --> 00:09:17,122
deployment. An EC two instance can run its web server,

124
00:09:17,266 --> 00:09:20,402
a backend service, a web data scraper,

125
00:09:20,466 --> 00:09:23,854
and even a database. If this production

126
00:09:23,922 --> 00:09:27,194
instance is suddenly gone, you will definitely

127
00:09:27,312 --> 00:09:31,818
suffer from downtime. Services will not be accessible to customers

128
00:09:31,984 --> 00:09:36,230
or any other type of consumer. It can also

129
00:09:36,320 --> 00:09:40,186
remain undiscovered for days or weeks if it's not a code

130
00:09:40,218 --> 00:09:44,254
service used for any operation. What can happen

131
00:09:44,292 --> 00:09:48,430
if a deleted EC two instance is accidentally revived?

132
00:09:49,090 --> 00:09:52,974
When was the last time you spent up a temporary instance

133
00:09:53,102 --> 00:09:56,514
just to try a new tool, open source or any

134
00:09:56,552 --> 00:10:00,498
other experiment? If you deleted that

135
00:10:00,584 --> 00:10:04,134
managed codified instance manually and

136
00:10:04,172 --> 00:10:07,670
another engineer or team hit the terraform apply,

137
00:10:07,820 --> 00:10:11,446
it will be revived and you will pay for. It can be

138
00:10:11,468 --> 00:10:14,860
anywhere from three to four digits dollars a month.

139
00:10:15,470 --> 00:10:18,666
What about security? In that case, you have an

140
00:10:18,688 --> 00:10:22,310
instance that might be publicly available to the Internet

141
00:10:22,470 --> 00:10:26,422
running old unmaintained, unneeded code.

142
00:10:26,576 --> 00:10:32,218
You know where this goes. A breach IAC

143
00:10:32,314 --> 00:10:35,738
policy is at these core of identity and permissions.

144
00:10:35,914 --> 00:10:39,602
Any user or role can be attached to it and

145
00:10:39,656 --> 00:10:43,442
get its needed permissions, such as writing or

146
00:10:43,496 --> 00:10:46,962
reading from specific services. It is used

147
00:10:47,016 --> 00:10:50,180
for manual and programmatic access.

148
00:10:50,790 --> 00:10:54,446
Managing policies as code have tremendous advantages,

149
00:10:54,638 --> 00:10:58,150
especially when implementing least privileged permissions.

150
00:10:58,730 --> 00:11:01,874
Upon deletion, the role is detached

151
00:11:01,922 --> 00:11:06,534
from any entity attached to it. This means that any permission

152
00:11:06,662 --> 00:11:11,350
granted by the deleted policy is now revoked.

153
00:11:11,510 --> 00:11:15,050
Production processes can closet their ability to write and read

154
00:11:15,120 --> 00:11:18,800
data, and customers can lose access to services.

155
00:11:19,570 --> 00:11:23,530
But what about security? Policies can include

156
00:11:23,610 --> 00:11:27,054
explicit deny statements that are always stronger than

157
00:11:27,092 --> 00:11:31,502
allow statements. They can protect against unauthorized actions

158
00:11:31,646 --> 00:11:35,374
and act as a guardrail that, once removed,

159
00:11:35,502 --> 00:11:39,010
can pose a real threat of excessive permissions.

160
00:11:41,690 --> 00:11:45,046
SQS is Amazon's queuing service,

161
00:11:45,228 --> 00:11:48,840
a central pipe in any meaningful project,

162
00:11:49,850 --> 00:11:53,062
usually connecting between producers who send

163
00:11:53,116 --> 00:11:56,826
messages to it and consumers who read from it

164
00:11:56,928 --> 00:12:01,350
and do something with the data. When accidentally deleted,

165
00:12:01,510 --> 00:12:04,998
it is no longer available for the producers

166
00:12:05,094 --> 00:12:09,214
to send messages and for the consumers to read from,

167
00:12:09,412 --> 00:12:12,942
therefore causing operational damage to any

168
00:12:12,996 --> 00:12:16,926
dependent service, haunting the reliability of data

169
00:12:17,108 --> 00:12:20,990
and halting jobs already in the queue.

170
00:12:24,530 --> 00:12:28,142
The Cloudwatch metric alarm is an elementary

171
00:12:28,206 --> 00:12:31,330
configuration for monitoring cloud assets.

172
00:12:31,750 --> 00:12:35,510
Whether it's the cpu or memory utilization of an EC two

173
00:12:35,580 --> 00:12:39,366
instance that can lead to changed its type

174
00:12:39,468 --> 00:12:42,630
or space in your EBS volume,

175
00:12:44,090 --> 00:12:47,990
the notifications it generates are actionable and essential

176
00:12:48,070 --> 00:12:51,754
for production environments. It's pretty evident that

177
00:12:51,792 --> 00:12:55,334
when such an alarm is deleted, it can cause SLA

178
00:12:55,462 --> 00:12:58,798
service slowdown, SLA problems, of course,

179
00:12:58,884 --> 00:13:05,326
service slowdown and even downtime security

180
00:13:05,428 --> 00:13:09,050
groups are virtual firewalls that control the traffic

181
00:13:09,130 --> 00:13:13,454
that is allowed to reach and leave assets that these are associated

182
00:13:13,502 --> 00:13:16,926
with. When accidentally deleted,

183
00:13:17,038 --> 00:13:21,154
it can remove needed access to a specific asset when

184
00:13:21,192 --> 00:13:24,738
deleted. Because multiple security groups can be assigned

185
00:13:24,754 --> 00:13:28,454
to one asset, it can be

186
00:13:28,492 --> 00:13:31,970
detected late in the game haunting downtime,

187
00:13:32,130 --> 00:13:35,502
although for this type it is a bit harder to accidentally

188
00:13:35,586 --> 00:13:38,794
delete as it is not allowed to delete an

189
00:13:38,832 --> 00:13:42,214
attached security group, whether to a network interface

190
00:13:42,342 --> 00:13:43,610
or an instance.

191
00:13:46,190 --> 00:13:49,386
This table summarizes the asset

192
00:13:49,418 --> 00:13:53,406
types we discussed. Those are just the top five,

193
00:13:53,588 --> 00:13:56,782
and any other deleted type can cause cost,

194
00:13:56,916 --> 00:13:59,840
security and reliability issues.

195
00:14:02,790 --> 00:14:06,180
So what can we do about this?

196
00:14:06,790 --> 00:14:11,890
Well, you should all become your own cloud Ghostbusters

197
00:14:12,650 --> 00:14:16,082
there are several ways to tackle ghost assets

198
00:14:16,226 --> 00:14:18,520
and we will cover just some of them.

199
00:14:21,730 --> 00:14:25,614
There are four categories that we look at when we talk

200
00:14:25,652 --> 00:14:28,450
about taking care of ghost assets.

201
00:14:29,510 --> 00:14:33,250
One is detecting a ghost asset. It means

202
00:14:33,320 --> 00:14:36,686
catching when an asset is deleted somehow

203
00:14:36,798 --> 00:14:39,410
but is still in the state file.

204
00:14:40,090 --> 00:14:43,718
Two, alert is the ability to send

205
00:14:43,804 --> 00:14:47,378
a notification to your favorite shoutout solution

206
00:14:47,474 --> 00:14:50,600
such as slack. Three,

207
00:14:51,050 --> 00:14:54,474
fix means the ability to make a change to your

208
00:14:54,512 --> 00:14:57,850
actual code or run a CLI command.

209
00:14:58,750 --> 00:15:01,878
And for prevention,

210
00:15:02,054 --> 00:15:06,846
prevent means making sure that this never happens in

211
00:15:06,868 --> 00:15:10,462
the first place. We'll start with our

212
00:15:10,516 --> 00:15:14,926
SaaS solution Firefly, for which we have a completely

213
00:15:15,108 --> 00:15:18,514
free tier, no credit card needed.

214
00:15:18,712 --> 00:15:23,150
You can start using it today and it supports the detection,

215
00:15:23,310 --> 00:15:27,006
alerting and fixing of ghost assets.

216
00:15:27,198 --> 00:15:31,154
We'll talk about prevention that can be achieved by spooking

217
00:15:31,202 --> 00:15:34,418
your cloud for any clickups activity.

218
00:15:34,594 --> 00:15:38,102
Although largely theoretical, some teams might

219
00:15:38,156 --> 00:15:42,122
be able to get it done. We'll talk about click

220
00:15:42,176 --> 00:15:46,122
looks an open resources that lets you detect and

221
00:15:46,176 --> 00:15:50,138
alert on ghosts. Finally, we'll mention

222
00:15:50,224 --> 00:15:53,302
drift CTL which helps you detect ghosts

223
00:15:53,366 --> 00:15:54,220
as well.

224
00:15:57,330 --> 00:16:00,974
So this is what these Firefly inventory looks

225
00:16:01,012 --> 00:16:04,766
like. As you can see we have a table with all of

226
00:16:04,788 --> 00:16:08,254
our cloud assets up there. We filtered

227
00:16:08,302 --> 00:16:11,874
to show only ghost assets. We have quite a few

228
00:16:11,912 --> 00:16:15,362
of those. Let's focus on one of them nec two

229
00:16:15,416 --> 00:16:19,410
instance. So these instance

230
00:16:19,490 --> 00:16:22,982
was created with terraform code. It is no

231
00:16:23,036 --> 00:16:26,866
longer in the cloud meaning it was somehow

232
00:16:26,898 --> 00:16:31,590
removed. It is still in the code and in the state file.

233
00:16:33,870 --> 00:16:37,034
As you can see here we have an alerts channel

234
00:16:37,152 --> 00:16:40,662
on slack and we send alerts on ghost

235
00:16:40,726 --> 00:16:44,426
assets so we can immediately know when a codified

236
00:16:44,538 --> 00:16:47,600
managed asset is removed from the cloud.

237
00:16:50,610 --> 00:16:54,414
We can also looks at the asset data and in

238
00:16:54,452 --> 00:16:58,162
the IAC tab see exactly which stack or

239
00:16:58,216 --> 00:17:02,350
state file managed it and which terraform

240
00:17:02,430 --> 00:17:06,146
code created it. When we click on

241
00:17:06,168 --> 00:17:10,230
the code link we will get right

242
00:17:10,380 --> 00:17:12,790
to the code in git.

243
00:17:15,610 --> 00:17:18,774
On the left you can see the resource code

244
00:17:18,892 --> 00:17:22,170
in terraform that created these asset.

245
00:17:22,510 --> 00:17:26,406
And if it was accidentally deleted and we want to revive

246
00:17:26,438 --> 00:17:30,550
it, we can just run the following command terraform

247
00:17:30,630 --> 00:17:34,458
apply minus target AWS instance

248
00:17:34,554 --> 00:17:38,110
which is the type bar three

249
00:17:38,260 --> 00:17:41,120
which is the resource name from the code.

250
00:17:43,410 --> 00:17:46,442
If we want this asset removed from the code,

251
00:17:46,596 --> 00:17:51,054
we click on remove asset code and we instantly

252
00:17:51,182 --> 00:17:55,102
create a pull request to remove these relevant resource

253
00:17:55,166 --> 00:17:59,258
block from our code. Once approved,

254
00:17:59,454 --> 00:18:04,070
this asset will never come back unexpectedly.

255
00:18:06,250 --> 00:18:10,134
Here you can see the pull request on GitHub and

256
00:18:10,172 --> 00:18:12,410
that concludes the first solution.

257
00:18:15,470 --> 00:18:19,660
Well, the ultimate prevention option is to looks your cloud,

258
00:18:20,270 --> 00:18:24,650
meaning disallowing any non read click

259
00:18:24,720 --> 00:18:28,094
offs through the AWS console and

260
00:18:28,132 --> 00:18:32,042
allowing only your infrastructure as code solution

261
00:18:32,186 --> 00:18:35,934
to make changes. This way you make

262
00:18:35,972 --> 00:18:39,246
sure you never have any ghosts or drifted

263
00:18:39,278 --> 00:18:42,658
assets has well. Still, the cost

264
00:18:42,744 --> 00:18:46,034
is relatively high, especially when we

265
00:18:46,072 --> 00:18:49,346
want to make a quick fix manually after a

266
00:18:49,368 --> 00:18:52,914
pagerduty alert woke us up instead of writing

267
00:18:52,962 --> 00:18:56,646
terraform code at 02:00 a.m. But it

268
00:18:56,668 --> 00:18:59,846
is still possible and it's definitely worth a

269
00:18:59,868 --> 00:19:00,440
try.

270
00:19:03,350 --> 00:19:07,038
Click looks is an open resources solution that helps

271
00:19:07,054 --> 00:19:10,930
you detect and alert any clickops actions someone

272
00:19:11,000 --> 00:19:14,858
made in your cloud accounts. It can be provisioned

273
00:19:14,974 --> 00:19:19,542
using AWS control tower for multi account support and

274
00:19:19,596 --> 00:19:23,202
it is basically using cloud trail logs to detect

275
00:19:23,266 --> 00:19:26,690
those actions. You can also alert slack

276
00:19:26,770 --> 00:19:28,730
using a webhook configuration.

277
00:19:29,390 --> 00:19:32,998
Clickops also provide a terraform module

278
00:19:33,094 --> 00:19:36,250
that is used to provide all the needed resources,

279
00:19:36,590 --> 00:19:40,054
including a dedicated lambda. It seems

280
00:19:40,112 --> 00:19:43,198
like a great solution if you are willing to invest

281
00:19:43,284 --> 00:19:46,922
time configuring, monitoring and troubleshooting

282
00:19:46,986 --> 00:19:50,858
it. Drift CTL

283
00:19:50,954 --> 00:19:54,770
is another open source tool that works with state files,

284
00:19:55,270 --> 00:19:58,862
so you don't need any unique cloud deployment,

285
00:19:59,006 --> 00:20:02,942
but you still need to invest the time and automate

286
00:20:03,086 --> 00:20:06,642
using cronjobs or any other automation

287
00:20:06,786 --> 00:20:10,854
to catch ghosts as they happen. If you

288
00:20:10,892 --> 00:20:13,960
want any alerts, you will have to build them yourself.

289
00:20:15,130 --> 00:20:18,762
In addition, I recommend being careful when

290
00:20:18,816 --> 00:20:22,950
handling state files as they might contain sensitive

291
00:20:23,030 --> 00:20:26,886
information when not cleaned and can cause damage

292
00:20:26,998 --> 00:20:28,970
if accidentally changed.

293
00:20:31,890 --> 00:20:36,110
Let's wrap up. Ghosts assets are dangerous.

294
00:20:36,450 --> 00:20:40,094
They have to be detected and fixed. This way

295
00:20:40,132 --> 00:20:44,090
or another, we can prevent redundant costs,

296
00:20:44,250 --> 00:20:48,030
reliability issues and security exposure.

297
00:20:48,690 --> 00:20:52,430
I will end with our favorite blessing at Firefly.

298
00:20:52,770 --> 00:20:56,310
May your infrastructure never drift.

299
00:20:57,770 --> 00:20:58,340
Thank you.

