1
00:01:44,910 --> 00:01:49,070
Welcome to our talk. Today we would be talking on supply chain attacks

2
00:01:49,230 --> 00:01:53,566
focused on NPM attacks and remediation of such supply

3
00:01:53,598 --> 00:01:56,990
chain attack vectors. My name is Dhanish

4
00:01:57,070 --> 00:02:00,862
and I'm a security researcher playing around and working in cybersecurity

5
00:02:00,926 --> 00:02:05,026
for last eight, nine years. And we have done our cybersecurity research

6
00:02:05,128 --> 00:02:08,950
on different open source attack vectors,

7
00:02:09,110 --> 00:02:13,050
especially related to NPM, hard coded secrets

8
00:02:13,950 --> 00:02:17,850
and a lot of other such scenarios.

9
00:02:19,890 --> 00:02:23,646
We also have been invited to conferences like

10
00:02:23,668 --> 00:02:28,266
Blackhead, Sascon and some other global

11
00:02:28,378 --> 00:02:31,934
conferences. So this is the research we

12
00:02:31,972 --> 00:02:35,234
done last year and we are going to present it today to you

13
00:02:35,272 --> 00:02:38,786
guys. First of

14
00:02:38,808 --> 00:02:42,226
all, the disclaimer is that anything that

15
00:02:42,248 --> 00:02:45,958
is presented in this talk is not meant to be illegal, unethical or

16
00:02:45,964 --> 00:02:49,430
malicious in any way, and we expect the same from you.

17
00:02:49,580 --> 00:02:51,640
So keep that in mind.

18
00:02:53,610 --> 00:02:57,222
So first of all, supply chain, traditionally, supply chain means the

19
00:02:57,276 --> 00:03:01,458
involvement or a network of suppliers, raw materials and manufacturers

20
00:03:01,554 --> 00:03:05,302
to produce an end or a final product and then supply

21
00:03:05,446 --> 00:03:08,698
that to the final consumer. That could involve people,

22
00:03:08,784 --> 00:03:12,158
entities, information resources and activities. So this is

23
00:03:12,164 --> 00:03:16,270
the traditional supply chain, right? For example, take an example

24
00:03:16,340 --> 00:03:19,870
of this delicacy, right? If you look at it,

25
00:03:19,940 --> 00:03:23,102
not only the chef made it, but also the involvement

26
00:03:23,166 --> 00:03:26,094
of different ingredients, whether that was butter,

27
00:03:26,222 --> 00:03:29,842
honey, pistachio, other ingredients. If any

28
00:03:29,896 --> 00:03:33,490
of those ingredients go bad, the final

29
00:03:33,560 --> 00:03:37,430
product or the final consumer could be affected.

30
00:03:37,930 --> 00:03:41,090
And same for the car industry.

31
00:03:41,170 --> 00:03:44,390
For example, the car is not manufactured in a single

32
00:03:44,460 --> 00:03:48,538
manufacturing unit. Different parts get outsourced from different

33
00:03:48,704 --> 00:03:52,074
countries, from different factories. So similar is

34
00:03:52,112 --> 00:03:56,726
for the software. Software is not developed

35
00:03:56,758 --> 00:04:00,174
or not coded, you could say in a single in

36
00:04:00,212 --> 00:04:04,650
house team. There are involvement of dependencies, binaries and other components

37
00:04:04,730 --> 00:04:07,498
to prevent the reinvention of the wheel,

38
00:04:07,594 --> 00:04:10,938
right? If we look at this software development

39
00:04:10,954 --> 00:04:14,434
lifecycle, it looks like this and there is

40
00:04:14,472 --> 00:04:18,146
a huge involvement of dependencies into it. And we would

41
00:04:18,168 --> 00:04:22,158
be talking on the risk factors that are linked

42
00:04:22,174 --> 00:04:25,630
to those type of third party dependencies.

43
00:04:25,710 --> 00:04:29,526
And there is a famous proverb that chain is

44
00:04:29,548 --> 00:04:33,286
only as strong as its weakest link. And this is a little bit

45
00:04:33,308 --> 00:04:37,094
of a meme that is going to be very

46
00:04:37,132 --> 00:04:39,690
relevant in the upcoming slides.

47
00:04:41,310 --> 00:04:45,382
So security issues we are going to discuss today would be focused on dependencies

48
00:04:45,446 --> 00:04:48,806
today. So there are different type of supply chain

49
00:04:48,838 --> 00:04:52,266
attacks and different type of supply chain attacks. Scenarios or

50
00:04:52,288 --> 00:04:55,774
possibilities. First of all, if you look at the vulnerabilities, if for example,

51
00:04:55,812 --> 00:04:59,854
if you are going to use a third party code, and what if that code

52
00:05:00,052 --> 00:05:03,422
does have a vulnerability? For example, there was a huge

53
00:05:03,476 --> 00:05:07,090
case of log for shell in the past, right? If you are using a

54
00:05:07,160 --> 00:05:10,558
third party dependency and that third party dependency is vulnerable,

55
00:05:10,654 --> 00:05:14,274
so that vulnerability inherently comes into your own code base,

56
00:05:14,312 --> 00:05:17,618
into your own production application. And then we have a type of

57
00:05:17,624 --> 00:05:22,118
squatting. It's like a mimicking the name of a trustworthy package to

58
00:05:22,204 --> 00:05:26,294
fool or to

59
00:05:26,332 --> 00:05:29,478
trick the developers to trust a malicious package, for example,

60
00:05:29,564 --> 00:05:32,626
right? Then we have repo checking tags,

61
00:05:32,658 --> 00:05:36,106
could claim repost is username. When an actual person changed the name,

62
00:05:36,208 --> 00:05:39,830
it's similar to subdivision takeover. Then we have account takeover.

63
00:05:39,910 --> 00:05:43,454
The focus of this talk would be on account takeover and we would let

64
00:05:43,492 --> 00:05:46,910
you know that how that is effective and how that works,

65
00:05:47,060 --> 00:05:50,478
dependency confusion and the effectiveness of these type of attacks is

66
00:05:50,564 --> 00:05:56,082
that security researcher was able to breach Microsoft, Uber, Apple and Tesla to

67
00:05:56,136 --> 00:05:59,826
make a point, right? And this is another example from

68
00:05:59,848 --> 00:06:03,026
the SS that 500,000 systems were

69
00:06:03,048 --> 00:06:06,354
affected because of our supply chain attack vectors and obviously log four

70
00:06:06,392 --> 00:06:09,926
shell. All of these companies were affected one way or another by

71
00:06:09,948 --> 00:06:13,586
the log for shell. So coming to the node package

72
00:06:13,618 --> 00:06:17,598
manager, actually the node package manager is the world's largest software registry

73
00:06:17,714 --> 00:06:21,082
versus the software registry. Software registry is a platform,

74
00:06:21,216 --> 00:06:24,826
is a solution where third party libraries or

75
00:06:24,848 --> 00:06:28,950
dependencies or code snippets are placed

76
00:06:29,030 --> 00:06:32,458
for others to use in an open source scenario.

77
00:06:32,554 --> 00:06:35,834
And JavaScript is the most used language

78
00:06:35,882 --> 00:06:39,466
for last 910 years according to stack overflow.

79
00:06:39,578 --> 00:06:43,166
And we are going to focus on the Javascript dependencies and

80
00:06:43,188 --> 00:06:46,830
NPM dependencies on this research and this tag vector.

81
00:06:47,350 --> 00:06:51,138
Let's take an example of a package that stays on NPM. If you

82
00:06:51,144 --> 00:06:55,090
look at it, this is a very famous NPM package called exprs.

83
00:06:55,430 --> 00:06:58,882
You can see there are 31 dependencies of it.

84
00:06:58,936 --> 00:07:02,694
Like Express is dependent on 31 dependencies and these

85
00:07:02,732 --> 00:07:05,938
are the dependents. For example, these packages

86
00:07:06,034 --> 00:07:09,770
are dependent on exprs. So what does that essentially mean?

87
00:07:09,920 --> 00:07:15,766
We would have a visualization of that in the future. Slides NPM

88
00:07:15,798 --> 00:07:19,686
packages are used by developers on a regular basis, obviously. And there are maintainers

89
00:07:19,718 --> 00:07:23,322
of those packages who could push out updates. What that essentially

90
00:07:23,386 --> 00:07:27,054
means that any package or a third party dependency or a code

91
00:07:27,092 --> 00:07:31,082
that stays on NPM as a package have a maintainer

92
00:07:31,226 --> 00:07:35,438
or an open source contributor or multiple of those maintainers

93
00:07:35,534 --> 00:07:38,914
that can push out updates and stuff like that. This is

94
00:07:38,952 --> 00:07:42,318
a snapshot or the screenshot from the NPM

95
00:07:42,414 --> 00:07:46,360
from the last year, and we can see that this number of packages were there,

96
00:07:46,730 --> 00:07:50,422
download numbers were huge. So you can get an idea of

97
00:07:50,556 --> 00:07:55,046
how widely the NPM dependencies are being used in

98
00:07:55,068 --> 00:08:01,194
the real world. Let take

99
00:08:01,232 --> 00:08:04,662
an example of the similar same package called Express.

100
00:08:04,726 --> 00:08:08,806
And we would now visualize that how the web of dependencies

101
00:08:08,998 --> 00:08:12,906
looks like. For example, this express is dependent on

102
00:08:13,008 --> 00:08:17,114
a lot of dependencies and those dependencies are dependent on other dependencies

103
00:08:17,162 --> 00:08:20,622
and stuff like that. So if you are using a dependency, you are not only

104
00:08:20,676 --> 00:08:24,270
depending on that, you are depending on a lot of other dependencies, essentially.

105
00:08:24,350 --> 00:08:28,274
And that is basically a supply chain that if any one of those

106
00:08:28,312 --> 00:08:32,770
gets bad, you are going to get affected.

107
00:08:33,190 --> 00:08:35,300
So let's move forward.

108
00:08:36,090 --> 00:08:39,458
As I've already mentioned, there are maintainers on NPM.

109
00:08:39,634 --> 00:08:43,330
And what if the accounts of those maintainers get hacked?

110
00:08:43,490 --> 00:08:47,122
Take an example of a Facebook. There are packages on Facebook.

111
00:08:47,186 --> 00:08:50,714
What if the admin of that page gets hacked, right? Obviously that

112
00:08:50,752 --> 00:08:54,362
page would get affected. And similar to NPM, if the account

113
00:08:54,416 --> 00:08:58,678
of the maintainer of NPM package gets attacked or hacked,

114
00:08:58,774 --> 00:09:02,266
that NPM could get affected, right? If we

115
00:09:02,288 --> 00:09:05,706
look at the possibilities, there are two common possibilities. What if their email addresses

116
00:09:05,738 --> 00:09:09,198
are takeoverable? We would get to that in the future slides. And what

117
00:09:09,204 --> 00:09:12,698
if their passwords are leaked in some breach? In both the cases,

118
00:09:12,794 --> 00:09:16,814
attacker could obviously take over, then pivot out and mess

119
00:09:16,852 --> 00:09:19,620
up with the code. So moving forward,

120
00:09:20,470 --> 00:09:24,722
this is a little bit of a workflow. That package is maintained by maintainer and

121
00:09:24,856 --> 00:09:28,326
those maintainer could make changes as already mentioned, and maintainer accounts are linked with

122
00:09:28,348 --> 00:09:31,526
an email address, like an example of social media and

123
00:09:31,548 --> 00:09:35,126
other accounts. Obviously in NPM there are accounts that are linked to

124
00:09:35,148 --> 00:09:38,426
email addresses and those email addresses are obviously linked to a

125
00:09:38,448 --> 00:09:42,026
domain or a mailbox, for example. So what

126
00:09:42,048 --> 00:09:45,450
if these domains get expired, for example, right?

127
00:09:45,600 --> 00:09:49,794
If the maintainer or developer is using some custom domain.

128
00:09:49,862 --> 00:09:53,358
What if that custom domain gets expired? We would look into the

129
00:09:53,364 --> 00:09:56,750
possibilities. So last

130
00:09:56,820 --> 00:10:00,702
year attacker was able to take over

131
00:10:00,756 --> 00:10:03,790
NPM library that had 6 million downloads.

132
00:10:03,870 --> 00:10:07,906
To make a point on how significant the takeover of

133
00:10:07,928 --> 00:10:11,266
a maintainer email or a maintainer account is on the

134
00:10:11,288 --> 00:10:13,090
security of supply chain.

135
00:10:13,750 --> 00:10:17,670
So let's take an example of a package that has 36,000

136
00:10:17,740 --> 00:10:20,454
dependent projects, for example.

137
00:10:20,652 --> 00:10:23,654
And that package is obviously on a software registry account,

138
00:10:23,692 --> 00:10:27,474
which is NPM. That NPM account have an email address of maintainer

139
00:10:27,522 --> 00:10:30,780
and that email address does have a domain, for example.

140
00:10:31,390 --> 00:10:34,570
Most common ones are Gmail and stuff like that. But look at the

141
00:10:34,640 --> 00:10:37,866
custom domains. What if that

142
00:10:37,888 --> 00:10:41,734
domain gets expired? Obviously, attacker could take over that expired domain

143
00:10:41,862 --> 00:10:45,306
and then that email address and then can reset

144
00:10:45,338 --> 00:10:49,402
the password of the software registry, MPN and then take over a package.

145
00:10:49,546 --> 00:10:53,470
And then those 36,000 projects can get affected.

146
00:10:57,750 --> 00:10:59,940
How the attacker would actually do that.

147
00:11:00,310 --> 00:11:03,666
Attacker would just look at the maintainer of the

148
00:11:03,688 --> 00:11:07,138
package and then pull out all of the

149
00:11:07,144 --> 00:11:10,934
email addresses of the maintainers that is available on NPM and

150
00:11:10,972 --> 00:11:14,530
then would look into the who is data for all the domains of those maintainers

151
00:11:14,610 --> 00:11:17,918
and see how many domains or if any domain

152
00:11:17,954 --> 00:11:21,434
is expired, he would just buy that domain and

153
00:11:21,552 --> 00:11:24,986
yes, claim the mail inbox and just

154
00:11:25,088 --> 00:11:28,902
forget the password on NPM software registry and create malicious

155
00:11:28,966 --> 00:11:32,506
updates of those packages to affect anyone that is using the packages,

156
00:11:32,698 --> 00:11:36,794
right? So last year that attack was on peak

157
00:11:36,842 --> 00:11:40,414
or there was a boom of that attack, but there were

158
00:11:40,452 --> 00:11:44,030
no defensive strategies, even manual or automated

159
00:11:44,370 --> 00:11:48,210
wherever you googled it or stuff like that. So we were able to

160
00:11:48,360 --> 00:11:52,226
be on a spotlight to spread the awareness on how to

161
00:11:52,248 --> 00:11:55,726
find NPM dependencies that are vulnerable to account hijacking.

162
00:11:55,758 --> 00:11:59,206
And you chain secure your ecosystem from that type

163
00:11:59,228 --> 00:12:02,566
of attacks, right? So manually how you

164
00:12:02,588 --> 00:12:05,746
can prevent those? You can prevent those manually by listing

165
00:12:05,778 --> 00:12:08,460
down all the packages that are in your company.

166
00:12:09,310 --> 00:12:12,534
And you could have the log JSon

167
00:12:12,582 --> 00:12:16,406
file package log Json file

168
00:12:16,438 --> 00:12:19,706
and stuff like that to pull out all the packages that are being used in

169
00:12:19,728 --> 00:12:23,774
your project. And then each package for

170
00:12:23,812 --> 00:12:26,974
this command npm view package name here and then maintain an

171
00:12:27,012 --> 00:12:30,718
email here on your maybe personal computer

172
00:12:30,804 --> 00:12:34,206
to find out the maintainers of those packages one by one. If you do that

173
00:12:34,228 --> 00:12:37,006
manually, obviously that is not effective. But yeah,

174
00:12:37,188 --> 00:12:40,786
and then you can just take out all the email addresses and separate out

175
00:12:40,808 --> 00:12:44,066
the domains and then look out the who is data of all the domains of

176
00:12:44,088 --> 00:12:47,330
the packages of the NPM that maintains

177
00:12:47,490 --> 00:12:51,010
that you are using in a project. Right. And then identify

178
00:12:51,170 --> 00:12:52,760
the vulnerable ones.

179
00:12:55,210 --> 00:12:59,782
But that's not effective. So we found out the automated ways because

180
00:12:59,836 --> 00:13:03,514
mostly hundreds of packages are being used by a single organization on a project.

181
00:13:03,632 --> 00:13:07,306
So it's preferable to have some type of a crone job and automation to

182
00:13:07,328 --> 00:13:10,750
do that on a regular basis and not just copy paste

183
00:13:11,570 --> 00:13:15,694
a command and do that manually one by one. So we

184
00:13:15,812 --> 00:13:19,886
scripts a mini tool that you could use in your pipeline to

185
00:13:19,988 --> 00:13:24,098
look for the takeover NPM packages in your code base

186
00:13:24,264 --> 00:13:28,500
to just get rid of them or to just turn off the auto updates or

187
00:13:28,950 --> 00:13:32,740
to be vigilant. In that case you can install that

188
00:13:34,570 --> 00:13:38,022
automation based script from here. And yeah,

189
00:13:38,076 --> 00:13:42,742
use that. You can use this command after

190
00:13:42,796 --> 00:13:46,502
adding your packages and package text file and then

191
00:13:46,636 --> 00:13:49,180
use it to find out the vulnerable ones.

192
00:13:49,950 --> 00:13:53,270
So now getting to the real jewel,

193
00:13:53,430 --> 00:13:57,740
we thought about the thing that how

194
00:13:58,510 --> 00:14:01,930
much is the effect of this

195
00:14:02,000 --> 00:14:05,562
vulnerability? NPM attacks vector on a global level so

196
00:14:05,616 --> 00:14:09,366
what we did, we did gather

197
00:14:09,558 --> 00:14:12,814
packages from different publicly

198
00:14:12,862 --> 00:14:18,580
available sources. All of the packages, essentially around

199
00:14:19,350 --> 00:14:22,862
all of the packages that were available at that time, NPM packages.

200
00:14:23,006 --> 00:14:26,682
And then used our in house servers

201
00:14:26,766 --> 00:14:30,278
and made some scripting and did some research

202
00:14:30,364 --> 00:14:33,874
to find out how many of those packages are actually vulnerable.

203
00:14:34,002 --> 00:14:38,060
And we are talking about millions of packages that we have done the research

204
00:14:39,310 --> 00:14:43,254
gathered from different available sources. So now Hassan

205
00:14:43,302 --> 00:14:46,826
would come and he would present on how we did that and what

206
00:14:46,848 --> 00:14:50,186
we found out. And that's the most exciting part of

207
00:14:50,208 --> 00:14:53,674
this talk. Hassan, can you please come? Yeah, sure.

208
00:14:53,712 --> 00:14:56,510
Dhanish, that was really grateful insights.

209
00:14:56,930 --> 00:15:00,878
Now let me share my screen so we can jump into the research.

210
00:15:00,964 --> 00:15:04,898
Dhanesh, can you give me permissions so that I can share my screen?

211
00:15:05,064 --> 00:15:07,460
Yeah, sure. Yes.

212
00:15:07,910 --> 00:15:11,220
Now you can do that. 1 second.

213
00:15:12,550 --> 00:15:15,726
Okay. Danish, can you see my screen? Yes,

214
00:15:15,768 --> 00:15:19,414
it's perfect. Okay. Amazing. So,

215
00:15:19,452 --> 00:15:23,046
yeah, as Danesh mentioned that we are going to focus on

216
00:15:23,068 --> 00:15:26,226
the at scale research that we have performed. So before I jump

217
00:15:26,258 --> 00:15:29,738
into the research, I just wanted to quickly introduce myself.

218
00:15:29,904 --> 00:15:34,182
I am Khan and I've been a security researcher, security engineer.

219
00:15:34,246 --> 00:15:37,946
I have multiple cvs under my name. I've got a chance to

220
00:15:38,128 --> 00:15:41,454
present the supply chain attacks and its

221
00:15:41,492 --> 00:15:45,822
research into multiple conferences like Black

222
00:15:45,876 --> 00:15:49,390
Hat, the Sascon, Devsecon and other conferences as well.

223
00:15:49,540 --> 00:15:52,790
And I really love to perform mascan

224
00:15:52,890 --> 00:15:56,894
at scale. And this is a QR code for the LinkedIn

225
00:15:56,942 --> 00:15:59,940
if you guys wanted to connect. So, yeah,

226
00:16:00,390 --> 00:16:03,842
about this research. Initially we started with.

227
00:16:03,976 --> 00:16:07,362
At that time of research, we collected all of the NPM packages.

228
00:16:07,506 --> 00:16:11,490
And at that time we have 2.1 million NPM packages

229
00:16:11,570 --> 00:16:15,398
available on the NPM registry. We used

230
00:16:15,484 --> 00:16:19,574
multiple technologies and multiple scripts

231
00:16:19,622 --> 00:16:23,340
to extract the email addresses from these

232
00:16:24,030 --> 00:16:27,734
NPM packages. Because this research was account takeover

233
00:16:27,782 --> 00:16:31,614
vulnerability, as Danish has explained in

234
00:16:31,652 --> 00:16:35,994
his previous slides that we did extracted the email addresses.

235
00:16:36,042 --> 00:16:39,406
So when we started performing the extraction, we came up

236
00:16:39,428 --> 00:16:42,586
with 6.7 million email addresses.

237
00:16:42,778 --> 00:16:46,690
And this is just a graphical representation that

238
00:16:46,760 --> 00:16:50,750
literally shows you from the step one that we collected packages.

239
00:16:50,830 --> 00:16:55,018
And from these packages we collected 6.7 million email addresses.

240
00:16:55,214 --> 00:16:59,186
This is a script, a Python script that has been used and it's publicly

241
00:16:59,218 --> 00:16:59,800
available.

242
00:17:03,130 --> 00:17:07,074
It uses NPM public API to extract the email addresses

243
00:17:07,122 --> 00:17:10,090
from the packages. And of course,

244
00:17:10,240 --> 00:17:13,894
when we extracted that email addresses,

245
00:17:14,022 --> 00:17:17,274
it was really obvious that multiple packages were

246
00:17:17,312 --> 00:17:20,810
being maintained by a single person that has an email address.

247
00:17:20,960 --> 00:17:24,774
So we started sorting out the email addresses and we came up with a

248
00:17:24,832 --> 00:17:27,914
number which is like 600k emails, which are unique

249
00:17:27,962 --> 00:17:31,760
email addresses. So in this representation, you can see,

250
00:17:33,810 --> 00:17:38,014
we collected packages then we extracted email addresses. And from email addresses

251
00:17:38,062 --> 00:17:42,082
we collected the unique number of emails. And then because

252
00:17:42,136 --> 00:17:45,622
we have to look for the expired domains because to

253
00:17:45,676 --> 00:17:49,062
take over an account you have to claim that

254
00:17:49,116 --> 00:17:52,630
expired domain and then you have to register into NPM registry.

255
00:17:55,130 --> 00:17:59,354
We extracted all of the domains from these email addresses and

256
00:17:59,392 --> 00:18:03,210
we found out there were like 132k domains initially

257
00:18:03,550 --> 00:18:04,780
in this research.

258
00:18:05,870 --> 00:18:10,006
Upon finding out the unique domains

259
00:18:10,038 --> 00:18:13,134
we came up with the number one thirty two k and when

260
00:18:13,172 --> 00:18:17,242
we started looking into the expiry we used multiple resources

261
00:18:17,386 --> 00:18:21,674
including APIs and who is extraction of these expired

262
00:18:21,722 --> 00:18:24,914
domain. And we came up with the number 675 domains which

263
00:18:24,952 --> 00:18:28,258
were actually expired domains all over the

264
00:18:28,264 --> 00:18:31,666
NPM registry. From this perspective of

265
00:18:31,688 --> 00:18:35,326
the research we can see we started with the number 2.1 million NBM

266
00:18:35,358 --> 00:18:38,614
packages but now we are going down to 675

267
00:18:38,652 --> 00:18:41,894
domains only. And let me add one more thing

268
00:18:41,932 --> 00:18:45,894
here. This research is going to be a two way research because in

269
00:18:45,932 --> 00:18:49,322
initial phase, in first phase of this research we're going to

270
00:18:49,376 --> 00:18:53,046
extract packages and from packages to we are going to extract expired

271
00:18:53,078 --> 00:18:57,158
domains and when we start doing the reattribution

272
00:18:57,254 --> 00:19:00,746
we're going to attribute those domains with their email addresses and

273
00:19:00,768 --> 00:19:03,770
then we are finally going to identify vulnerable packages.

274
00:19:04,110 --> 00:19:08,062
And a special thanks to one of my colleagues, Yelp for

275
00:19:08,116 --> 00:19:11,754
helping us in finding out the expiration of several

276
00:19:11,802 --> 00:19:13,920
domains and defining the procedure of.

277
00:19:14,530 --> 00:19:18,210
Yeah, this is the whole procedure that we did for the extraction of

278
00:19:18,280 --> 00:19:21,794
the expired domains as

279
00:19:21,832 --> 00:19:25,414
you can see. So now we are onto the part

280
00:19:25,452 --> 00:19:29,334
of the reverse. We can say from

281
00:19:29,372 --> 00:19:32,854
domain attribution to email attribution and then we find out

282
00:19:32,892 --> 00:19:37,550
that there was literally 845 crumbs

283
00:19:37,650 --> 00:19:41,194
of separate unique email addresses that has been used or has been

284
00:19:41,232 --> 00:19:45,350
utilized with these expired domains.

285
00:19:45,510 --> 00:19:49,498
These are just the graphical representation of the complete process

286
00:19:49,664 --> 00:19:53,246
which explains that we started with the packages and then

287
00:19:53,268 --> 00:19:56,558
we went down to the expiration of the domains and

288
00:19:56,564 --> 00:20:00,414
then we started the research from the back and then we

289
00:20:00,452 --> 00:20:04,018
attributed those domains with their email addresses and now we are onto the

290
00:20:04,024 --> 00:20:08,050
path of the attribution with their vulnerable packages.

291
00:20:08,630 --> 00:20:12,046
So before we jump into the conclusion of how many vulnerable

292
00:20:12,078 --> 00:20:16,022
packages we identify, let's look into some stats and some fun

293
00:20:16,076 --> 00:20:19,720
and very impactful stats. So if we divide total

294
00:20:20,970 --> 00:20:24,594
number of email addresses with the unique email addresses

295
00:20:24,642 --> 00:20:28,726
we get the number eleven. This means on average

296
00:20:28,918 --> 00:20:32,406
eleven email addresses are being used in a single NPM

297
00:20:32,438 --> 00:20:36,390
packages. And here in this screenshot

298
00:20:36,470 --> 00:20:40,278
you can see let's look at the first sample.

299
00:20:40,374 --> 00:20:44,718
We can see it's like 3800.

300
00:20:44,884 --> 00:20:48,446
And then we have an email in front of front of it.

301
00:20:48,548 --> 00:20:51,774
This means a single email address has

302
00:20:51,812 --> 00:20:55,022
been utilized in these amount of packages.

303
00:20:55,166 --> 00:20:58,178
So just imagine if this email,

304
00:20:58,264 --> 00:21:01,634
which has a domain, if it gets expired and someone just

305
00:21:01,672 --> 00:21:04,978
claim it, then it's literally going to affect like 3000

306
00:21:05,064 --> 00:21:08,342
plus packages. And if you go last,

307
00:21:08,396 --> 00:21:12,598
in the last number, you can see we have like 9000 plus

308
00:21:12,684 --> 00:21:16,630
on a single email addresses. And this number is literally huge.

309
00:21:16,780 --> 00:21:19,260
So just imagine the impact here,

310
00:21:20,590 --> 00:21:24,010
how much of impact one

311
00:21:24,160 --> 00:21:27,930
expired domain can have on NPM packages.

312
00:21:30,130 --> 00:21:33,850
Another quick math

313
00:21:33,930 --> 00:21:37,822
we can see if we divide this eleven that we extracted before

314
00:21:37,956 --> 00:21:41,406
and we multiply it by 845,

315
00:21:41,508 --> 00:21:45,294
which is actually the number of the unique

316
00:21:45,342 --> 00:21:48,690
email addresses we found, we come up with the number

317
00:21:48,840 --> 00:21:52,610
like 9499. And this actually

318
00:21:52,680 --> 00:21:56,450
represents the total vulnerable packages

319
00:21:56,530 --> 00:22:00,086
that has been found. But when we did the actual

320
00:22:00,188 --> 00:22:04,070
research, we came to know the total number

321
00:22:04,140 --> 00:22:08,726
of vulnerable packages was 2843,

322
00:22:08,828 --> 00:22:12,298
which is really small number. Again,

323
00:22:12,384 --> 00:22:16,266
we know that we started with a huge number which was actually 2.1

324
00:22:16,288 --> 00:22:20,346
million. And now we are come down to the number like 2000 and

325
00:22:20,368 --> 00:22:24,358
something. I mean if you are researching and you're

326
00:22:24,374 --> 00:22:28,110
doing your research and from this perspective of research, you might be thinking,

327
00:22:28,180 --> 00:22:31,262
okay, this research has no impact, the number is very low.

328
00:22:31,316 --> 00:22:34,622
But now let me show you some really good stats

329
00:22:34,686 --> 00:22:38,514
that can show how impactful this research is. So if

330
00:22:38,552 --> 00:22:42,660
we look into the total packages, we had like

331
00:22:43,670 --> 00:22:47,386
2800. And if we look into the dependent

332
00:22:47,438 --> 00:22:51,794
repos, then we can see there are like 250k dependent

333
00:22:51,842 --> 00:22:55,394
repos. These packages have 250k dependent

334
00:22:55,442 --> 00:22:59,590
repos. And as we have talked about, every packages

335
00:22:59,670 --> 00:23:03,306
has multiple dependencies in multiple dependents. So if one

336
00:23:03,328 --> 00:23:07,370
package affected, it's going to affect other ones as well.

337
00:23:07,520 --> 00:23:11,690
If we look about the dependent packages cumulatively

338
00:23:12,110 --> 00:23:15,502
on all of these vulnerable packages, then we come up with the number ninety

339
00:23:15,556 --> 00:23:19,162
three k. And if we look into the folks and contributors,

340
00:23:19,226 --> 00:23:22,362
then the numbers are really astonishing. If we look into the folks,

341
00:23:22,426 --> 00:23:26,434
we come up with the number 400k, which means literally there are 400k

342
00:23:26,472 --> 00:23:29,490
people who have actually cloned these vulnerable packages.

343
00:23:29,990 --> 00:23:34,130
Or when you folks something, it gives you an idea that that code might

344
00:23:34,280 --> 00:23:36,926
get used into the other users computers.

345
00:23:37,038 --> 00:23:40,934
And if you look in the number of contributors, you can see 50k

346
00:23:40,972 --> 00:23:44,406
people are actually contributing in these packages. So the number is huge.

347
00:23:44,508 --> 00:23:48,114
But if you look into the vulnerable packages,

348
00:23:48,242 --> 00:23:51,402
the number, it's 2843. I mean the number is really small.

349
00:23:51,456 --> 00:23:55,066
But when we look into the impact of these, look how many

350
00:23:55,168 --> 00:23:59,034
folks, how many contributors, how many dependents are these packages are

351
00:23:59,072 --> 00:24:03,360
actually affecting right now? So yeah, this is really huge.

352
00:24:05,330 --> 00:24:08,894
There are million of downloads are happening around on

353
00:24:08,932 --> 00:24:12,882
single NPM packages. If we just look into the

354
00:24:13,016 --> 00:24:17,220
other packages, like NPM package and maybe

355
00:24:17,990 --> 00:24:24,420
express package security

356
00:24:27,990 --> 00:24:31,140
packages. You guys see

357
00:24:32,550 --> 00:24:33,300
many?

358
00:24:36,550 --> 00:24:38,570
Some. Hassan,

359
00:24:42,430 --> 00:24:45,770
can you hear me? Yes, I can hear you.

360
00:24:45,840 --> 00:24:49,674
Hello, chain, you hear me? Can you hear me?

361
00:24:49,792 --> 00:24:51,600
Yes, I can. Can you hear me?

362
00:24:53,890 --> 00:24:57,774
Hello, guys. So hold on for now. Hassan would be joining us in one

363
00:24:57,812 --> 00:25:00,590
or two minutes and yes,

364
00:25:00,740 --> 00:25:05,746
then he would be continuing with

365
00:25:05,768 --> 00:25:08,180
the remaining part. So no worries.

366
00:25:09,030 --> 00:25:12,834
Welcome back. Hasan. Yeah, Danish, can you hear me? Yes,

367
00:25:12,872 --> 00:25:16,246
that's perfect. Now let me share my

368
00:25:16,268 --> 00:25:18,600
screen once again so we can continue.

369
00:25:19,690 --> 00:25:22,360
Danish, can you see my screen? Perfect.

370
00:25:23,370 --> 00:25:25,800
This is the slide we have to continue, right?

371
00:25:26,490 --> 00:25:29,526
Yeah. Okay. Amazing. So,

372
00:25:29,548 --> 00:25:33,642
yeah, we were talking about the impact of this research that how

373
00:25:33,776 --> 00:25:37,034
this research can affect. So as you know that in this

374
00:25:37,072 --> 00:25:40,602
research we extracted the

375
00:25:40,656 --> 00:25:44,558
email addresses. But as we know that email addresses actually

376
00:25:44,644 --> 00:25:48,506
can be found in many terms, like dark web dumps or data leaks,

377
00:25:48,618 --> 00:25:51,934
et cetera. So what if these emails have

378
00:25:51,972 --> 00:25:55,186
been into the data breaches and these

379
00:25:55,208 --> 00:25:58,626
are actually being leaked? So just imagine if

380
00:25:58,648 --> 00:26:02,366
these leaked credentials are being actual NPM credentials or GitHub credentials.

381
00:26:02,398 --> 00:26:05,140
So, yeah, the impact is really huge here.

382
00:26:05,830 --> 00:26:09,554
We did not only research NPM. Yes, we also

383
00:26:09,672 --> 00:26:13,014
did a research for ruby gems as well.

384
00:26:13,132 --> 00:26:16,310
We extracted all of these ruby gems.

385
00:26:17,290 --> 00:26:21,130
Initially it was one hundred and sixty k. And for this research

386
00:26:21,200 --> 00:26:24,262
we did not just downloaded all the gems,

387
00:26:24,326 --> 00:26:28,202
we did something different. We started scrapping the

388
00:26:28,336 --> 00:26:31,774
packages that are publicly available on

389
00:26:31,812 --> 00:26:36,030
the Internet. For this, we used multiple resources,

390
00:26:37,250 --> 00:26:41,054
used multiple resources like GitHub, BitBucket, GitLab and other

391
00:26:41,092 --> 00:26:45,026
resources, and scrapped all the public available gems from

392
00:26:45,048 --> 00:26:48,434
the Internet. And this was the process that we have used.

393
00:26:48,472 --> 00:26:51,806
We scraped, we extracted the gems, and then we identified

394
00:26:51,918 --> 00:26:55,414
dependency confusion vulnerability on

395
00:26:55,452 --> 00:26:58,854
these gems. This research has a very tricky part,

396
00:26:58,892 --> 00:27:02,374
because for the extraction and for

397
00:27:02,412 --> 00:27:06,530
the identification of dependency

398
00:27:06,610 --> 00:27:10,566
confusion, we used multiple scripts that are linked

399
00:27:10,598 --> 00:27:15,158
in below, and we utilized several techniques

400
00:27:15,254 --> 00:27:19,354
and we created a vulnerable ruby gem that has been the

401
00:27:19,392 --> 00:27:23,006
part of dependency focused vulnerability. And once we have this

402
00:27:23,028 --> 00:27:26,826
script, the hardest part was to extract or accelerate

403
00:27:26,858 --> 00:27:29,470
the data from the vulnerable gem.

404
00:27:30,370 --> 00:27:34,158
We used multiple techniques, we used Burp collaborator

405
00:27:34,254 --> 00:27:37,794
with, you can see Nslookup, who am I,

406
00:27:37,832 --> 00:27:41,394
and hostname commands. And we extracted as much as information to

407
00:27:41,432 --> 00:27:44,410
collect further exploitation of the packages.

408
00:27:44,590 --> 00:27:47,974
And the fun stuff. And the fun part

409
00:27:48,012 --> 00:27:51,794
of this research, we just tested

410
00:27:51,842 --> 00:27:55,942
a very small chunk of gems. It was like 1700

411
00:27:55,996 --> 00:27:59,494
gems was scanned, and out of these we found out

412
00:27:59,532 --> 00:28:03,354
like 285 gems were vulnerable, which is actually 16%

413
00:28:03,392 --> 00:28:06,682
of the gems were found out vulnerable at that time. So just

414
00:28:06,736 --> 00:28:10,198
imagine like there were total number one hundred and sixty k and we scanned

415
00:28:10,214 --> 00:28:14,142
only 1700. So just imagine this percentage will go more

416
00:28:14,196 --> 00:28:17,978
up and how many other packages could be origins

417
00:28:17,994 --> 00:28:21,440
could be vulnerable right now to dependency confusion attack.

418
00:28:22,150 --> 00:28:26,306
So this is the script that we

419
00:28:26,328 --> 00:28:29,982
have created and used for the identification of dependency

420
00:28:30,046 --> 00:28:34,050
confusion vulnerability. Yeah. So another

421
00:28:34,120 --> 00:28:37,814
tool for another problem for gems, we created this

422
00:28:37,852 --> 00:28:41,634
tool. It's called a gem scanner. If you have dependencies

423
00:28:41,762 --> 00:28:45,330
or gems in your code, you can use this tool. It will identify

424
00:28:45,410 --> 00:28:49,180
vulnerable packages and outdated packages and

425
00:28:50,590 --> 00:28:54,140
it will output on the terminal. Excuse me,

426
00:28:54,510 --> 00:28:58,566
this is just an example of the output

427
00:28:58,598 --> 00:29:01,946
of the tool that has been used. As you guys can see,

428
00:29:01,968 --> 00:29:05,582
we have some labeled with the already

429
00:29:05,636 --> 00:29:09,322
on the latest version and the current version which identifies

430
00:29:09,386 --> 00:29:12,894
that. We have to update these gems. So we

431
00:29:12,932 --> 00:29:16,510
have talked about the problem of account takeover and the vulnerability

432
00:29:16,590 --> 00:29:19,634
and dependency confusion. So what are the solutions to

433
00:29:19,672 --> 00:29:23,426
these problems? First of all, MFA, MFA has

434
00:29:23,448 --> 00:29:27,554
been around for many, many times now. NPM and Even Ruby

435
00:29:27,682 --> 00:29:31,574
maintainers, Ruby gem maintainers are also implementing these

436
00:29:31,692 --> 00:29:35,922
type of protections. They have started this MFA

437
00:29:35,986 --> 00:29:39,686
enabled from the top packages

438
00:29:39,798 --> 00:29:43,542
and now they are actually implementing this to the other packages

439
00:29:43,606 --> 00:29:47,034
as well. Other solutions what we have to use

440
00:29:47,152 --> 00:29:50,374
we literally have to keep an eye on the

441
00:29:50,512 --> 00:29:53,886
latest updates of the packages. We have to keep an eye on

442
00:29:53,908 --> 00:29:57,626
the cvs and the latest security patches

443
00:29:57,658 --> 00:30:01,278
that these dependencies are actually having. We have to

444
00:30:01,364 --> 00:30:05,234
perform manual audits and use automations even

445
00:30:05,272 --> 00:30:08,466
in CI CD pipelines to protect

446
00:30:08,568 --> 00:30:12,594
our infrastructure from these third party code. And what

447
00:30:12,632 --> 00:30:16,802
I prefer is to use some validate checksums

448
00:30:16,866 --> 00:30:20,326
of these packages. So you only know what type of

449
00:30:20,348 --> 00:30:23,926
code you are actually importing in your code. And of

450
00:30:23,948 --> 00:30:28,182
course we have to mature our CI CD pipeline

451
00:30:28,326 --> 00:30:30,730
in our pre commits.

452
00:30:31,310 --> 00:30:34,986
We have to secure development lifecycle as

453
00:30:35,008 --> 00:30:38,362
well. And these are some solutions that

454
00:30:38,416 --> 00:30:43,066
can help you guys. For example, if you are using Ruby

455
00:30:43,098 --> 00:30:47,082
infrastructure, Ruby on Rails MDC, you can use dependable.

456
00:30:47,146 --> 00:30:50,478
With GitHub, you can use

457
00:30:50,564 --> 00:30:54,410
bundler audit, you can use breakman to identify vulnerabilities

458
00:30:54,490 --> 00:30:58,286
in dependencies. If you are using node

459
00:30:58,318 --> 00:31:01,806
js, you can use NPM audit, node js, scan retired

460
00:31:01,838 --> 00:31:05,154
js for the integrity and find

461
00:31:05,192 --> 00:31:08,486
out the vulnerabilities and dependencies, et cetera. And the other

462
00:31:08,508 --> 00:31:12,070
tools obviously can be used as per your infrastructure.

463
00:31:12,650 --> 00:31:15,894
And if you are looking for the commercial solution, we know that

464
00:31:15,932 --> 00:31:19,242
SBOM has been standing out

465
00:31:19,296 --> 00:31:22,854
into the market right now. It's really to the peak

466
00:31:22,902 --> 00:31:26,442
and it's definitely to have an S bomb into

467
00:31:26,496 --> 00:31:30,630
your organization to protect you from such attacks.

468
00:31:30,790 --> 00:31:34,654
And this is one of the SBOM solution that

469
00:31:34,692 --> 00:31:38,334
has been really good into the market and can be

470
00:31:38,452 --> 00:31:42,046
used in your own code as well for the protection from

471
00:31:42,068 --> 00:31:45,826
these open source attacks. And I

472
00:31:45,848 --> 00:31:49,134
was reading the news and I just came to know that it was made compulsory

473
00:31:49,182 --> 00:31:53,106
to have an SBOM solution into your own company. And this

474
00:31:53,208 --> 00:31:56,614
act was being made by no other

475
00:31:56,652 --> 00:32:00,066
than Joe Biden. So, yeah, I think that's

476
00:32:00,178 --> 00:32:02,600
pretty much it about this research.

477
00:32:03,770 --> 00:32:07,462
So if you guys have any questions, you can

478
00:32:07,516 --> 00:32:10,714
reach us out on LinkedIn or any other

479
00:32:10,752 --> 00:32:14,540
platform you would like. Yeah, so that's all from my side.

480
00:32:14,990 --> 00:32:18,422
So, Hassan, can you move to the last slide?

481
00:32:18,486 --> 00:32:22,026
So if anyone want to connect with us, they can just scan

482
00:32:22,058 --> 00:32:25,582
the QR codes. The last slide after this one.

483
00:32:25,716 --> 00:32:29,246
After this one. There's no slide after this one.

484
00:32:29,428 --> 00:32:32,818
Okay, I just updated that

485
00:32:32,904 --> 00:32:36,660
on my slides. Let me just recheck that.

486
00:32:37,350 --> 00:32:40,978
Okay. Let me just share the screen

487
00:32:41,064 --> 00:32:44,386
for the sake of audience. If they want to connect with

488
00:32:44,408 --> 00:32:47,734
us, and they can just do that

489
00:32:47,852 --> 00:32:48,950
effectively.

490
00:32:51,530 --> 00:32:56,066
So if anyone want to connect with us, they can just scan

491
00:32:56,098 --> 00:33:00,098
these QR codes and they can just come to our LinkedIn and

492
00:33:00,284 --> 00:33:04,794
ask any questions or just simply stay

493
00:33:04,832 --> 00:33:08,278
connected. On the left, if you scan

494
00:33:08,294 --> 00:33:11,866
the QR code, you would go to my LinkedIn. And on the right, if you

495
00:33:11,888 --> 00:33:16,794
scan that, you would go to the Hassan's LinkedIn and stay

496
00:33:16,832 --> 00:33:20,682
connected. Okay, Hassan, do you have anything to

497
00:33:20,736 --> 00:33:23,380
share after this one? Actually,

498
00:33:24,470 --> 00:33:28,402
I do have. If anyone

499
00:33:28,456 --> 00:33:32,242
is interested in our upcoming research or the research that we have already

500
00:33:32,296 --> 00:33:35,894
done, we done the

501
00:33:35,932 --> 00:33:39,830
scanning or the at scale research of hard

502
00:33:39,900 --> 00:33:43,362
coded secrets that included

503
00:33:43,426 --> 00:33:47,338
AWS private keys and stripe private keys and a

504
00:33:47,344 --> 00:33:50,966
lot of other private credentials in the open source landscape.

505
00:33:50,998 --> 00:33:54,806
And that included the WordPress plugins, that included NPM

506
00:33:54,838 --> 00:33:58,986
packages. And we actually scanned all

507
00:33:59,008 --> 00:34:02,446
of those packages and all of those plugins for these type

508
00:34:02,468 --> 00:34:06,762
of secrets to find out the mistakes of developers

509
00:34:06,826 --> 00:34:10,638
when they just publish the hard coded secrets in the

510
00:34:10,644 --> 00:34:14,194
public code. So, yeah, stay tuned and you

511
00:34:14,232 --> 00:34:18,674
may be able to look into our research someday in

512
00:34:18,872 --> 00:34:22,226
other conference or maybe this one. Yeah, this is all

513
00:34:22,248 --> 00:34:25,346
from my side. Same. So,

514
00:34:25,368 --> 00:34:29,154
guys, it was really nice to have us into this

515
00:34:29,192 --> 00:34:32,494
session, and I hope you guys find it really productive

516
00:34:32,542 --> 00:34:36,546
and really insightful session. And again, if you have any questions, then feel

517
00:34:36,648 --> 00:34:39,020
free to reaches out. Thank you.

