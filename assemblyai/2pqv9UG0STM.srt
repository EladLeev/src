1
00:00:34,370 --> 00:00:38,514
I'm Doug Sillars, and today I'm going to give a talk about how I'm

2
00:00:38,562 --> 00:00:42,258
using an AI bot, basically Chat GPT

3
00:00:42,434 --> 00:00:44,706
to create DevOps runbook automations.

4
00:00:44,818 --> 00:00:48,626
So building runbooks and automating them and writing

5
00:00:48,658 --> 00:00:52,666
the code with the help of my pair programmer Chat

6
00:00:52,698 --> 00:00:57,034
GPT. So let's just jump right in. The way I think about runbooks

7
00:00:57,082 --> 00:01:00,686
is that in DevOps, is there a checklist? There are checklists of the things that

8
00:01:00,708 --> 00:01:03,886
you need to do to accomplish a task. Whether it's something when there's an

9
00:01:03,908 --> 00:01:07,202
outage, your runbook lists all the things you need to do to bring the system

10
00:01:07,256 --> 00:01:10,414
back online. Or maybe it's just to provision something. You've got a runbook,

11
00:01:10,462 --> 00:01:13,314
blah blah blah blah blah, and at the end you've got it done.

12
00:01:13,512 --> 00:01:17,506
And being someone who works in Devrel, I am really passionate

13
00:01:17,538 --> 00:01:20,966
about documentation. If you're coming in to use a product and

14
00:01:20,988 --> 00:01:25,042
the documentation is not good, it's incredibly frustrating.

15
00:01:25,186 --> 00:01:29,046
The same thing happens internally. If you've got an outage and someone says oh,

16
00:01:29,068 --> 00:01:32,970
we have a runbook for that, and you go through the steps and

17
00:01:33,040 --> 00:01:36,458
the last step doesn't work because the runbook hasn't been updated or it's out

18
00:01:36,464 --> 00:01:40,330
of date or something changed and we didn't update the documentation.

19
00:01:41,070 --> 00:01:44,702
So let's just give an example. You know, one example is

20
00:01:44,756 --> 00:01:48,746
a few weeks ago I was looking at my GitHub data and there's

21
00:01:48,778 --> 00:01:52,366
this great chart showing you how many people have visited your repo and

22
00:01:52,388 --> 00:01:56,254
how many pages they visited every single day. And being

23
00:01:56,292 --> 00:01:59,458
in Devrel, this is data that's really interesting and I don't want it to

24
00:01:59,464 --> 00:02:02,706
be ephemeral up at GitHub. I want to just load this into a database so

25
00:02:02,728 --> 00:02:05,666
that I can keep a history of this over a longer period of time than

26
00:02:05,688 --> 00:02:09,406
it is stored at GitHub. And I can control how I'm displaying

27
00:02:09,438 --> 00:02:13,074
it if I collect this data. And what's really cool is GitHub

28
00:02:13,122 --> 00:02:16,006
has an API. So I was looking at the API and I'm like, this is

29
00:02:16,028 --> 00:02:18,726
going to work. I'm going to take this data, I'm going to suck it into

30
00:02:18,828 --> 00:02:22,346
postgres and that'll have this data. So I

31
00:02:22,368 --> 00:02:26,534
followed all the instructions in the documentation

32
00:02:26,662 --> 00:02:30,074
and of course I got a 403 error that this resource is not

33
00:02:30,112 --> 00:02:33,818
accessible by a personal access token. Of course the documentation

34
00:02:33,914 --> 00:02:37,246
says you need a personal access token. And so I

35
00:02:37,268 --> 00:02:40,926
banged my head against the wall for a couple of days or a couple

36
00:02:40,948 --> 00:02:44,218
of hours, and what I discovered is I didn't

37
00:02:44,234 --> 00:02:47,986
have the right access in my personal access token, so the error message was

38
00:02:48,008 --> 00:02:51,506
just wrong, and I eventually got it working. And now this is getting

39
00:02:51,528 --> 00:02:55,266
sucked into a postgres database every single day. And I can collect this

40
00:02:55,288 --> 00:02:58,930
data, which is really awesome, but we got stuck.

41
00:02:59,090 --> 00:03:02,694
And when you have documentation or you have a runbook, you don't want people

42
00:03:02,732 --> 00:03:06,630
to get stuck, stuck in their runbooks or their checklists.

43
00:03:07,050 --> 00:03:10,602
So another stat that's out there for

44
00:03:10,736 --> 00:03:14,886
cloud native, for SREs, for DevOps, is that the Ops

45
00:03:14,918 --> 00:03:18,554
teams and the application support teams and the SREs are

46
00:03:18,592 --> 00:03:22,310
spending up to 55% of their time just doing stuff.

47
00:03:22,400 --> 00:03:26,014
The stuff that gets into your inbox and you've got to do.

48
00:03:26,212 --> 00:03:29,966
But it isn't the most important things that you need to get

49
00:03:29,988 --> 00:03:33,166
done. Is that manual tedious stuff? And wouldn't it be

50
00:03:33,188 --> 00:03:37,198
great if we could automate some of this away? And so

51
00:03:37,284 --> 00:03:39,826
this is where these run books come into place. Like, if you have a good

52
00:03:39,848 --> 00:03:43,230
runbook, boop, boop, boop, boop, boop, maybe you can finish it faster.

53
00:03:43,310 --> 00:03:46,878
If we can automate some of those steps, then we're getting even a step further.

54
00:03:46,974 --> 00:03:49,702
So there's this great blog post. The URL is down there at the bottom,

55
00:03:49,756 --> 00:03:53,526
and it'll be at the end and it'll be in the slides. But this

56
00:03:53,548 --> 00:03:57,154
guy works for a gambling website. And a gambling

57
00:03:57,202 --> 00:04:00,458
website, if they go down, they're losing money, because really, all a

58
00:04:00,464 --> 00:04:04,682
gambling site is there is to take money from people. And he

59
00:04:04,736 --> 00:04:08,454
found that when he built a thorough library

60
00:04:08,502 --> 00:04:12,030
of runbooks, that all of their issues were getting resolved faster.

61
00:04:12,690 --> 00:04:17,534
He found that escalations were easier because maybe

62
00:04:17,572 --> 00:04:21,040
the knock or the team that was on call could run through

63
00:04:21,810 --> 00:04:25,918
the runbooks before they called the person. So rather than just like calling

64
00:04:26,004 --> 00:04:29,298
Tom, they could try the runbook. Boop, boop, boop, boop, boop, boop, boop. And if

65
00:04:29,304 --> 00:04:31,460
it doesn't work, that last step is call Tom.

66
00:04:33,110 --> 00:04:36,638
He found that hiring new developers and new DevOps

67
00:04:36,734 --> 00:04:39,746
members of the team was easier because if they had

68
00:04:39,768 --> 00:04:42,422
a question, they said, oh, we've got a runbook here. Read how it works.

69
00:04:42,476 --> 00:04:46,070
And they could read how everything is provisioned, how it all runs.

70
00:04:47,450 --> 00:04:51,580
And that just kind of goes into the training, right. If things work right,

71
00:04:52,110 --> 00:04:55,466
then it's easier to train people on how to use it because

72
00:04:55,488 --> 00:04:59,482
you already have everything documented. And then finally, as people

73
00:04:59,536 --> 00:05:03,446
found how useful the runbooks were, once they worked, they kept

74
00:05:03,478 --> 00:05:07,306
at it and they kept updating them. And you never ran into this bad documentation

75
00:05:07,338 --> 00:05:10,734
where the runbook was out of date. And then the next

76
00:05:10,772 --> 00:05:14,210
step is they started automating it. And that was speeding things up even further.

77
00:05:14,630 --> 00:05:17,220
Now, when you read this guy's post,

78
00:05:18,470 --> 00:05:22,242
he got seven months. When he started at the company, his boss gave him seven

79
00:05:22,296 --> 00:05:26,082
months off to focus solely on every single issue, every single

80
00:05:26,136 --> 00:05:29,938
outage, and create a runbook for everything. And then ongoing,

81
00:05:29,954 --> 00:05:33,606
there was this 10% work to keep them going. But by

82
00:05:33,628 --> 00:05:36,966
then the whole team was on board, right, because they found

83
00:05:37,068 --> 00:05:40,326
how great these runbooks were. Now, the thing is,

84
00:05:40,348 --> 00:05:43,834
of course, like very few of us have seven months to do this.

85
00:05:43,952 --> 00:05:47,226
So another approach is from this other blog post here,

86
00:05:47,248 --> 00:05:49,290
which is called do nothing scripting.

87
00:05:50,430 --> 00:05:53,766
It's the key to gradual automation. And his whole goal is

88
00:05:53,888 --> 00:05:57,434
let's open up a notebook, let's say a Jupyter notebook,

89
00:05:57,482 --> 00:06:00,974
or just even a text, a code editor, and just write

90
00:06:01,012 --> 00:06:03,726
out all the steps. These are the steps we need to do. So build the

91
00:06:03,748 --> 00:06:07,486
runbook and then as you get time, automate some

92
00:06:07,508 --> 00:06:10,242
of the steps. So it's like do this manually, do this manually, run this code,

93
00:06:10,296 --> 00:06:14,094
do this manually, do this manually. Run this code. And if you automation

94
00:06:14,142 --> 00:06:17,654
some of those steps as you use the runbook more and more often, you just

95
00:06:17,692 --> 00:06:21,414
automate more and more steps of it and gradually you come to the state where

96
00:06:21,452 --> 00:06:23,750
the runbook becomes fully automation.

97
00:06:25,770 --> 00:06:29,346
I would add one more step here in that if you have all these runbooks,

98
00:06:29,378 --> 00:06:32,746
that's great, but if they're not somewhere where the rest of the team can get

99
00:06:32,768 --> 00:06:35,930
to them, you're still going to be the person who's getting paged.

100
00:06:37,550 --> 00:06:41,002
So let's talk a little bit about unscript and the open

101
00:06:41,056 --> 00:06:44,910
source tooling that we have to help you automate your runbooks.

102
00:06:45,490 --> 00:06:49,006
It's all open source. You can see the URL down here at the bottom of

103
00:06:49,028 --> 00:06:53,082
our GitHub repo, so you can check that out if you're interested. Our open source

104
00:06:53,146 --> 00:06:57,222
runbook automation is built on top of Jupyter notebooks.

105
00:06:57,386 --> 00:07:00,034
And so what's great about that is if you go back to that whole like

106
00:07:00,072 --> 00:07:03,474
do nothing scripting, the whole idea is you can

107
00:07:03,512 --> 00:07:07,618
add text sections in the middle and then you

108
00:07:07,624 --> 00:07:10,774
can add code in between as you want to automate stuff.

109
00:07:10,892 --> 00:07:14,626
The other advantage is these are online, so it's easily to share amongst

110
00:07:14,658 --> 00:07:18,134
the team. In our open source you have a docker image that everyone

111
00:07:18,172 --> 00:07:21,386
can have access to. We also have an enterprise version that is in

112
00:07:21,408 --> 00:07:25,050
the cloud. You've got your text and markdown fields.

113
00:07:25,550 --> 00:07:29,514
As I was alluding to a second ago where you can write down your do

114
00:07:29,552 --> 00:07:33,894
nothing scripting. These are the steps and then in between. And I've minimized

115
00:07:33,942 --> 00:07:36,942
the code here just so that it all fits on the screen. But we've got

116
00:07:36,996 --> 00:07:40,702
automation fields and it's all Python based, so it's pretty straightforward and easy to get

117
00:07:40,756 --> 00:07:44,570
started with. You don't need that seven month kickoff. You can start using your automations

118
00:07:44,650 --> 00:07:47,794
bit by bit when you have a couple of minutes and you can build these

119
00:07:47,832 --> 00:07:49,380
runbooks very, very quickly.

120
00:07:50,470 --> 00:07:54,206
Another great advantage that we have is we have hundreds of pre built actions

121
00:07:54,318 --> 00:07:57,742
that you can just drag into your runbook using AWS,

122
00:07:57,806 --> 00:08:00,850
Google Cloud, Kubernetes, all of the data, lots of databases,

123
00:08:00,930 --> 00:08:04,514
Jira, there's about 30 of them. And we have about 400 actions

124
00:08:04,562 --> 00:08:07,638
that can just be dragged in and used with just wiring it

125
00:08:07,644 --> 00:08:10,866
up to your credentials. So here's

126
00:08:10,898 --> 00:08:13,674
an example runbook, and this is a Kubernetes health check.

127
00:08:13,792 --> 00:08:17,078
And so what we're doing here is the first action is we're

128
00:08:17,094 --> 00:08:20,586
going to list all the pods in our namespace, then we're going to get the

129
00:08:20,608 --> 00:08:24,254
logs. And then I wrote this code here just in Python to

130
00:08:24,292 --> 00:08:27,946
parse the logs and look for warnings in the logs,

131
00:08:27,978 --> 00:08:31,038
right? And then if there's a warning in the logs, we'll post a message to

132
00:08:31,044 --> 00:08:34,146
slack, say hey guys, bound a warning in the logs. Here's what it

133
00:08:34,168 --> 00:08:38,226
is. Here's the pod that's having issues, we can

134
00:08:38,248 --> 00:08:41,346
resolve this. This is the beginning of a

135
00:08:41,368 --> 00:08:45,246
full automation. Maybe then if something happened once

136
00:08:45,288 --> 00:08:48,886
we diagnose that, maybe we could create it to some actions to

137
00:08:48,908 --> 00:08:52,470
auto remediate the issue with that Kubernetes pod.

138
00:08:53,930 --> 00:08:57,926
The cool thing is, when I built this, these three actions right

139
00:08:57,948 --> 00:09:01,546
here are all pre built. Just had to drag them in and wire them

140
00:09:01,568 --> 00:09:05,274
up with the configuration and the credentials to

141
00:09:05,312 --> 00:09:07,530
log into my Kubernetes namespace,

142
00:09:08,910 --> 00:09:12,586
then I had to write this one. This whole runbook is available in

143
00:09:12,608 --> 00:09:15,646
our open source, so if you wanted to use it, you can just use the

144
00:09:15,668 --> 00:09:18,814
entire runbook, it's there. You just have to wire up all the different, the four

145
00:09:18,852 --> 00:09:22,330
different steps here and you can run this on the regular

146
00:09:22,410 --> 00:09:25,614
to see if there's any issues with your Kubernetes

147
00:09:25,742 --> 00:09:29,266
deployments. So let's talk

148
00:09:29,288 --> 00:09:32,514
a bit about these actions. In this screenshot here,

149
00:09:32,552 --> 00:09:36,662
you can see it says 342. We're bordering right at almost 400

150
00:09:36,716 --> 00:09:40,054
right now. So it's growing rapidly and you can

151
00:09:40,092 --> 00:09:43,826
create your own. They're all python, so it's very straightforward.

152
00:09:44,018 --> 00:09:47,714
And if the desired action doesn't exist.

153
00:09:47,762 --> 00:09:51,526
You can write your own, and you can see here, when I took this screenshot

154
00:09:51,558 --> 00:09:55,226
I had 24 that I had written. You can also extend an

155
00:09:55,248 --> 00:09:59,306
existing action. So an example I like to give is we have

156
00:09:59,488 --> 00:10:03,290
an action that will list all the open pull requests at GitHub,

157
00:10:03,710 --> 00:10:07,226
but we don't have one that lists all the closed pull requests.

158
00:10:07,258 --> 00:10:09,662
But if you go into the Python code, you can see where it says open.

159
00:10:09,716 --> 00:10:13,258
You can change that to closed, and you've changed the entire functionality

160
00:10:13,354 --> 00:10:17,394
of the action, and it will now list

161
00:10:17,432 --> 00:10:19,810
all of your closed GitHub repositories.

162
00:10:20,630 --> 00:10:23,762
Or you could create a new action. If there's not one that's close enough,

163
00:10:23,816 --> 00:10:27,506
you might just have to write some Python code to create a new action.

164
00:10:27,618 --> 00:10:31,014
Or you can create a new action and this is where

165
00:10:31,052 --> 00:10:33,190
I started getting ready. With Chat GPT,

166
00:10:34,410 --> 00:10:37,906
you can connect to an external connection. So do something with Jira,

167
00:10:37,938 --> 00:10:42,170
or do something with GitHub, or with Google Cloud or Azure or AWS.

168
00:10:42,670 --> 00:10:46,026
Or you could create one of these glue actions like I did in

169
00:10:46,048 --> 00:10:48,986
the kubernetes where I just took the outputs of the logs and I did some

170
00:10:49,008 --> 00:10:52,218
parsing. Are there any warnings? And then send the message to

171
00:10:52,224 --> 00:10:53,850
slack if there are warnings.

172
00:10:55,470 --> 00:10:58,206
Here are two actions that I wanted to create. I wanted to be able to

173
00:10:58,228 --> 00:11:01,854
tag an EC two instance, and so tagging is a common way for

174
00:11:01,892 --> 00:11:05,534
people to understand what that instance, what that virtual machine is

175
00:11:05,572 --> 00:11:09,214
being used for. And if you have good tagging, then it's

176
00:11:09,262 --> 00:11:12,914
pretty obvious which ones are for production, which ones are for staging, which ones need

177
00:11:12,952 --> 00:11:16,114
to stay up, which ones. It's another way

178
00:11:16,152 --> 00:11:20,370
of managing cost is if a project goes down and this

179
00:11:20,520 --> 00:11:23,506
EC two cluster is tagged with that, you can turn it down and it won't

180
00:11:23,538 --> 00:11:26,966
hurt anything and it'll save the company money. The other one I wanted to do

181
00:11:26,988 --> 00:11:31,446
is I wanted to look to see if all of my Google Cloud virtual machines,

182
00:11:31,558 --> 00:11:35,114
and I wanted to know if they were public or not. You can't go a

183
00:11:35,152 --> 00:11:38,678
week without hearing about some company's

184
00:11:38,854 --> 00:11:42,334
s three buckets or virtual machines being exposed to the Internet and getting

185
00:11:42,372 --> 00:11:45,786
hacked. So if you wanted to write some security runbooks,

186
00:11:45,818 --> 00:11:47,440
this is one way you could do that.

187
00:11:49,330 --> 00:11:52,414
And for my copilots to

188
00:11:52,452 --> 00:11:56,066
help me write these, I thought it would be fun to have Chat GPT help

189
00:11:56,088 --> 00:11:59,010
me out. And if you haven't heard of Chat GPT,

190
00:11:59,670 --> 00:12:03,694
the URL is down there, chat OpenAI.com chat.

191
00:12:03,822 --> 00:12:07,798
And you can log in and you can ask it questions and it

192
00:12:07,804 --> 00:12:10,822
will write poetry for you. It will write essays for your school.

193
00:12:10,876 --> 00:12:14,280
Don't do that because your teachers know and your professors know,

194
00:12:14,650 --> 00:12:18,086
but you could. And it

195
00:12:18,108 --> 00:12:21,642
also writes code. And when I created this talk, we were

196
00:12:21,696 --> 00:12:25,962
doing Chat GPT-3 number

197
00:12:26,016 --> 00:12:29,514
four is coming out in beta right now, and I'm super excited to check out,

198
00:12:29,552 --> 00:12:33,718
but I don't have access yet. So here's

199
00:12:33,734 --> 00:12:37,118
how it works. If you have Chat GPT right here, you can

200
00:12:37,124 --> 00:12:39,594
just ask it a question and you can see, I said, can you write Python

201
00:12:39,642 --> 00:12:43,146
script to add a cost center tag with the value marketing to an EC

202
00:12:43,178 --> 00:12:44,110
two instance?

203
00:12:49,410 --> 00:12:52,800
And Chat GPT comes but, and says, sure, I can do that for you.

204
00:12:54,610 --> 00:12:59,026
And it's

205
00:12:59,058 --> 00:13:02,870
importing boto three, which is the SDK for Python,

206
00:13:03,370 --> 00:13:07,574
for AWS. It sets up your instance id and

207
00:13:07,612 --> 00:13:10,810
it puts a key and a value in a variable

208
00:13:11,150 --> 00:13:13,900
and then makes the API call.

209
00:13:17,960 --> 00:13:20,070
And just like that, here's your code.

210
00:13:25,820 --> 00:13:29,208
I like that it's all commented nicely, and then it also gives you a

211
00:13:29,214 --> 00:13:32,664
description to tell you exactly what it thinks it needs to do to make this

212
00:13:32,702 --> 00:13:33,290
work.

213
00:13:38,320 --> 00:13:42,284
And so there's the code, and I could take that and

214
00:13:42,322 --> 00:13:47,272
take this code and drag it right into my unscript

215
00:13:47,336 --> 00:13:50,656
runbook. And when I ran it,

216
00:13:50,678 --> 00:13:54,256
it didn't work quite right. And the reason for that is when

217
00:13:54,278 --> 00:13:57,504
you create your boto three

218
00:13:57,542 --> 00:14:01,296
client, you also need to put a region in here. And so

219
00:14:01,398 --> 00:14:05,110
like Chat GPT got it this close, like we're almost there.

220
00:14:05,560 --> 00:14:09,076
Of course, the error message told me exactly what was wrong. So then I said,

221
00:14:09,098 --> 00:14:12,660
hey, Chat GPT, doesn't it need a region?

222
00:14:13,900 --> 00:14:17,240
So let's use a variable for the region, and let's give that

223
00:14:17,310 --> 00:14:20,568
region the variable, the value

224
00:14:20,734 --> 00:14:22,490
us west two.

225
00:14:29,670 --> 00:14:34,054
And Chat GPT says, oh yeah, I made a mistake. That's right,

226
00:14:34,252 --> 00:14:35,880
it does require that.

227
00:14:44,410 --> 00:14:48,074
So now we've got the region, and you can see it's setting the region name

228
00:14:48,112 --> 00:14:49,290
equal to region.

229
00:14:53,870 --> 00:14:56,906
And the rest of the code is similar to what we saw in

230
00:14:56,928 --> 00:14:58,060
the first video.

231
00:15:03,390 --> 00:15:05,500
It. And so when we do this,

232
00:15:06,590 --> 00:15:10,170
we can see that the response comes back and we get a 200

233
00:15:10,320 --> 00:15:13,100
response, meaning, okay, it actually worked.

234
00:15:13,550 --> 00:15:16,834
This is super, super cool. What I then did is you can

235
00:15:16,872 --> 00:15:20,450
see I have inputs set for my key,

236
00:15:20,520 --> 00:15:23,714
my value and my region. And that makes it even more

237
00:15:23,752 --> 00:15:27,234
modular. So I have this action. I can feed variables into it,

238
00:15:27,272 --> 00:15:31,026
almost like an API or a microservice, so I can feed the variables

239
00:15:31,058 --> 00:15:35,186
in, and it takes those variables and makes the connection

240
00:15:35,218 --> 00:15:38,230
to EC two and then creates the tags.

241
00:15:39,230 --> 00:15:43,420
And this works. And if you go into unskript today.

242
00:15:44,190 --> 00:15:47,850
This action is there, and it was built using Chat GPT.

243
00:15:49,950 --> 00:15:53,562
You can see now the result. I ran it twice, once with cost center

244
00:15:53,616 --> 00:15:56,046
marketing, and then I added a one and a one just to show that it

245
00:15:56,068 --> 00:15:59,534
happened twice. So it does actually add the key

246
00:15:59,572 --> 00:16:03,166
value pair that you want to your EC two

247
00:16:03,188 --> 00:16:03,950
instance.

248
00:16:06,470 --> 00:16:09,714
So let's walk through how I set this

249
00:16:09,752 --> 00:16:13,490
all up once you have the code written. And what

250
00:16:13,560 --> 00:16:17,362
makes unskript open source so

251
00:16:17,416 --> 00:16:21,270
easy to use is if you create a credential, which is

252
00:16:21,340 --> 00:16:24,600
for AWS, a secret and a secret key,

253
00:16:24,970 --> 00:16:28,386
you can reuse that without knowing what the key or the secret

254
00:16:28,418 --> 00:16:31,986
is by just selecting your aws

255
00:16:32,178 --> 00:16:36,250
whatever variable you give it. And you can select this for all of your actions.

256
00:16:36,830 --> 00:16:40,106
And it'll just run, it'll say, oh, I know which key value to

257
00:16:40,128 --> 00:16:44,062
use, it's stored over here in vault. And now I can run this

258
00:16:44,116 --> 00:16:47,642
action and you can see my variables. I have a region

259
00:16:47,786 --> 00:16:51,662
variable, an instance, and a key value.

260
00:16:51,796 --> 00:16:55,214
And so now by setting these all as variables, I can

261
00:16:55,252 --> 00:16:58,946
run this action and it will tag this instance in

262
00:16:58,968 --> 00:17:02,020
us west two with cost center one and marketing one.

263
00:17:03,910 --> 00:17:07,454
Once you have actions like this created, you can just drag them and drop

264
00:17:07,502 --> 00:17:11,080
them into your Jupyter notebook, and it makes it really, really easy to use.

265
00:17:13,050 --> 00:17:17,286
So then the second one I'm going to build here in this video is

266
00:17:17,388 --> 00:17:21,334
to get all of the Google cloud virtual machines

267
00:17:21,462 --> 00:17:23,210
and then see if they're publicly.

268
00:17:24,990 --> 00:17:28,506
So, you know, I asked this question, and I had to be a little bit

269
00:17:28,528 --> 00:17:32,058
more specific here, because when we build things

270
00:17:32,144 --> 00:17:36,138
here at unscript or with our open source platform,

271
00:17:36,304 --> 00:17:39,274
I want to use the same SDK. And it was using a different SDK.

272
00:17:39,322 --> 00:17:42,702
So I said, hey, can you just make sure that you're using the Google

273
00:17:42,756 --> 00:17:46,334
Cloud project library to do this? And then here's

274
00:17:46,382 --> 00:17:48,450
my project. Here's my region.

275
00:17:54,230 --> 00:17:57,746
Actually. First it says, no, I can't because I don't know

276
00:17:57,768 --> 00:18:00,566
how to do that, but I can't execute the code. But here I can give

277
00:18:00,588 --> 00:18:05,202
you an example code of how it would actually work. And so it institutes

278
00:18:05,266 --> 00:18:08,786
the compute engine client, it sets

279
00:18:08,818 --> 00:18:10,220
the region in the project,

280
00:18:12,110 --> 00:18:15,754
and for all of the vms, it just checks to see

281
00:18:15,872 --> 00:18:19,020
if it's publicly available or not. And if it is publicly available,

282
00:18:20,030 --> 00:18:21,180
print the list.

283
00:18:26,140 --> 00:18:29,352
It says, you install the library, you need to have authentication.

284
00:18:29,496 --> 00:18:33,352
And that's the cool thing about unscript, is we take care of all the authentication

285
00:18:33,496 --> 00:18:36,220
and we take care of the library.

286
00:18:37,440 --> 00:18:40,976
So in summary, runbooks are a form of

287
00:18:40,998 --> 00:18:44,892
internal documentation, they're the checklists that you use when you need to provision

288
00:18:44,956 --> 00:18:48,756
something or when you have an outage. The steps that you need to

289
00:18:48,778 --> 00:18:52,164
do to resolve the issues. When you have good

290
00:18:52,202 --> 00:18:56,928
internal documentation, it improves the outcomes,

291
00:18:57,104 --> 00:19:00,804
right? Just like if you have good documentation, people like this

292
00:19:00,842 --> 00:19:04,824
company has good documentation. They make it really easy to learn. I got started really

293
00:19:04,862 --> 00:19:08,104
easily. If you have good documentation, you have good

294
00:19:08,142 --> 00:19:12,264
outcomes. You're going to lower the mean time to response because step

295
00:19:12,302 --> 00:19:15,976
three isn't working. Oh yeah, we changed something, right? If the stress levels

296
00:19:16,008 --> 00:19:19,484
are already really high, that just moves the

297
00:19:19,682 --> 00:19:23,880
stress levels even higher. They improve your team collaboration.

298
00:19:24,040 --> 00:19:27,036
This isn't working. I built a runbook for that. Try this.

299
00:19:27,138 --> 00:19:30,416
Oh that solved it. Thanks. And then we can automate them. If we can

300
00:19:30,438 --> 00:19:34,016
automate them, then we don't actually ourselves have to go through all

301
00:19:34,038 --> 00:19:37,856
the manual tasks. We can zip through at least a few of those steps because

302
00:19:37,878 --> 00:19:41,536
we've automated it and we let the computer do the repetitive boring

303
00:19:41,568 --> 00:19:45,104
bits by automations,

304
00:19:45,152 --> 00:19:48,276
those steps, we're reducing that toil that day to day,

305
00:19:48,298 --> 00:19:51,624
that sometimes as much as 55% of some professionals times is

306
00:19:51,662 --> 00:19:55,944
just doing the mundane things we need to do to keep everything running.

307
00:19:56,142 --> 00:20:00,164
You could build auto remediations, like if a kubernetes

308
00:20:00,212 --> 00:20:03,364
pod is unhealthy or something. Your vm

309
00:20:03,412 --> 00:20:06,588
is publicly available. You could just make it not publicly available,

310
00:20:06,674 --> 00:20:10,296
right? Hide it. Turn off that ip forwarding,

311
00:20:10,328 --> 00:20:13,736
don't let it access. And it could be automatically remediated.

312
00:20:13,768 --> 00:20:17,116
So we don't have a problem. By increasing

313
00:20:17,148 --> 00:20:20,720
the observability, by testing these things on the regular,

314
00:20:21,060 --> 00:20:23,680
we're going to be alerted if something has changed.

315
00:20:24,340 --> 00:20:27,980
We also have runbooks now in unscript

316
00:20:28,060 --> 00:20:31,648
that look at your cost, spend every single day so you

317
00:20:31,654 --> 00:20:34,996
don't get a surprise AWS bill at the end of the month because you'll get

318
00:20:35,018 --> 00:20:38,564
an alert within 24 hours or maybe 48

319
00:20:38,602 --> 00:20:42,244
hours that hey, your spend went up earlier this week,

320
00:20:42,362 --> 00:20:44,916
did you know that? And you can go back and say, oh yeah, I turned

321
00:20:44,948 --> 00:20:48,410
on a bunch of xlarge machines, I should spin those down now.

322
00:20:49,660 --> 00:20:53,508
So unscript has this neat

323
00:20:53,604 --> 00:20:57,688
niche where we're open source. We're built on top of Jupyter notebooks,

324
00:20:57,704 --> 00:21:01,436
which makes them publicly available to the whole team. They help

325
00:21:01,458 --> 00:21:04,476
you automate. There's hundreds of built in automations to help

326
00:21:04,498 --> 00:21:08,496
you get started really, really quickly, and they help you build these runbooks and

327
00:21:08,518 --> 00:21:12,396
they help you build these runbooks in an automated way. So you're improving your outcomes,

328
00:21:12,428 --> 00:21:15,900
you're lowering your MTTR you're reducing your toil

329
00:21:15,980 --> 00:21:18,240
and you're increasing your observability.

330
00:21:20,020 --> 00:21:23,876
If you use this along with Chat GPT, you get

331
00:21:23,898 --> 00:21:27,840
this prototyping of your automation and that auto while unscript

332
00:21:27,920 --> 00:21:31,796
is really fast to get you to the state where you have a

333
00:21:31,818 --> 00:21:35,924
runbook, once you add Chat GPT in there, you actually get there even faster,

334
00:21:35,972 --> 00:21:39,144
because if you have to write an action, Chat GPT can take

335
00:21:39,182 --> 00:21:43,016
you there, shaving off 80% of the

336
00:21:43,038 --> 00:21:46,300
time, and then you've got your automation even faster.

337
00:21:46,960 --> 00:21:50,268
So with that, thank you so much for watching the talk.

338
00:21:50,434 --> 00:21:55,230
Go check out unscript. We're at Runbooks SH and

339
00:21:55,600 --> 00:21:59,108
while you're there you can see the docker instructions to download

340
00:21:59,144 --> 00:22:02,770
and install it and run it. Give us a star while you're there.

341
00:22:03,540 --> 00:22:08,272
If you want to read more, we have lots of blog posts and documentation@unscript.com.

342
00:22:08,406 --> 00:22:11,684
If you want to play around with Chat GPT, it's a lot of fun.

343
00:22:11,722 --> 00:22:15,350
I recommend it. Chat OpenAI.com

344
00:22:16,280 --> 00:22:20,260
and then the two blog posts I talked about, the guy who built 1800

345
00:22:20,410 --> 00:22:24,096
run books over seven months and then do nothing scripting.

346
00:22:24,128 --> 00:22:25,770
And so those are the links there.

347
00:22:27,500 --> 00:22:31,032
And with that, thank you so much for watching. I'm really happy

348
00:22:31,086 --> 00:22:34,084
to have been a part of the Cloud native 2023 conference.

349
00:22:34,212 --> 00:22:37,896
If you have any questions, feel free to reach out to

350
00:22:37,918 --> 00:22:41,496
me on the discord. I am there so ask me questions.

351
00:22:41,598 --> 00:22:46,204
I would be happy to help with any sort of automation DevOps

352
00:22:46,372 --> 00:22:49,756
runbook sort of questions. Thanks again and I'll

353
00:22:49,788 --> 00:22:51,020
see you in the Discord server.

