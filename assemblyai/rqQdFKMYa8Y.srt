1
00:00:26,610 --> 00:00:30,694
Hi, my name is Maddie Stratton and I'm a staff developer advocate here

2
00:00:30,732 --> 00:00:34,470
at Pulumi, and I am so excited

3
00:00:34,810 --> 00:00:38,342
to be a part of Devsecops here at

4
00:00:38,396 --> 00:00:41,814
Conf 42. We're going to take a little bit to

5
00:00:41,852 --> 00:00:45,478
talk about the journey from DevOps to cloud

6
00:00:45,564 --> 00:00:49,014
engineering, and I appreciate you

7
00:00:49,052 --> 00:00:52,846
taking a little time to walk down this path and maybe

8
00:00:53,028 --> 00:00:56,734
see how things might have changed over

9
00:00:56,772 --> 00:01:00,480
the years. And with that in mind,

10
00:01:01,090 --> 00:01:04,786
before we talk about anything new, I want to talk a little,

11
00:01:04,808 --> 00:01:08,706
but by looking back, let's take a little

12
00:01:08,728 --> 00:01:11,874
bit of a journey to see how we got to where we

13
00:01:11,912 --> 00:01:15,318
are. And maybe that'll help inform what

14
00:01:15,324 --> 00:01:19,320
we could do differently if we kind of think back

15
00:01:20,570 --> 00:01:24,034
at velocity 2009, Paul Hammond

16
00:01:24,082 --> 00:01:27,720
and John Allspa gave a talk called ten deploys a day

17
00:01:28,190 --> 00:01:32,534
DevOps ops cooperation at Flickr. And this was granted

18
00:01:32,582 --> 00:01:35,930
2009. This was fairly revolutionary and as best

19
00:01:36,000 --> 00:01:39,770
we understand it, from unearthing the Arcana,

20
00:01:40,190 --> 00:01:44,654
this tweet from Andrew Clay Schaefer, who Andrew was watching this talk is

21
00:01:44,692 --> 00:01:48,894
the first known use of the term DevOps. Is that important?

22
00:01:49,012 --> 00:01:53,518
Probably not, except that it kind of came, but of this talk.

23
00:01:53,684 --> 00:01:57,182
And likewise, what also happened in 2009,

24
00:01:57,236 --> 00:02:01,282
2009 was a pretty big year for all this stuff in 2009 was

25
00:02:01,336 --> 00:02:05,106
also when Dave Farley and Judge Humble published the

26
00:02:05,128 --> 00:02:08,646
book continuous Delivery, which is still users today when

27
00:02:08,668 --> 00:02:11,654
we talk about these things. So that was 2009. And then also,

28
00:02:11,692 --> 00:02:15,026
finally, Gary Groover published the practices

29
00:02:15,138 --> 00:02:18,534
approach to large scale agile development. This book also

30
00:02:18,572 --> 00:02:21,674
came out in 2009, and there was a book about DevOps. They just didn't call

31
00:02:21,712 --> 00:02:25,500
it that. And so 2009 was really an inflection point.

32
00:02:25,870 --> 00:02:29,050
Another thing that happened in 2009

33
00:02:29,120 --> 00:02:33,274
at that velocity conference, after seeing Paul

34
00:02:33,322 --> 00:02:35,950
and John's talk about Flickr,

35
00:02:37,250 --> 00:02:41,118
Andrew Schaefer, who tweeted that he proposed a birds of a

36
00:02:41,124 --> 00:02:44,122
feather session to say, like we talk about agile system administration.

37
00:02:44,266 --> 00:02:48,110
And one person came to that birds of a feather session, not including Andrew.

38
00:02:48,190 --> 00:02:52,082
And that person was a guy named Patrick Dubois. And later

39
00:02:52,136 --> 00:02:56,002
on, Patrick and Andrew connected and they created an event in

40
00:02:56,056 --> 00:02:59,678
Ghent in Belgium called DevOps Days. And the

41
00:02:59,704 --> 00:03:03,362
reason that it was called DevOps Days is agile system administration

42
00:03:03,426 --> 00:03:06,326
was too long a name for a conference. So if you want to know why

43
00:03:06,348 --> 00:03:08,920
we call it DevOps, that's really why.

44
00:03:09,370 --> 00:03:12,834
But I think it was kind of exciting when we think about this first DevOps

45
00:03:12,882 --> 00:03:16,026
days, it took place in Ghent. If we take a look at

46
00:03:16,048 --> 00:03:19,514
some of the talks that were given there, those could take place at

47
00:03:19,552 --> 00:03:22,894
this conference today. So weve been talking about the same stuff

48
00:03:22,932 --> 00:03:26,346
for a while. The other thing that when we've

49
00:03:26,378 --> 00:03:29,502
looked at how there's been this growth in the

50
00:03:29,556 --> 00:03:33,566
DevOps community, and so much of it comes from these types of community

51
00:03:33,668 --> 00:03:37,730
events, and DevOps comes from the practitioners, from the people that do that,

52
00:03:37,880 --> 00:03:41,902
one thing I think is really interesting is in 2019,

53
00:03:42,046 --> 00:03:45,666
to celebrate the 10th anniversary of the first DevOps days, we did

54
00:03:45,688 --> 00:03:49,366
a DevOps Days in Ghent. And the day before we had a day Zero was

55
00:03:49,388 --> 00:03:53,862
an organizer day, where people who organized DevOps days all over the world came together

56
00:03:53,996 --> 00:03:56,982
to have a little unconference to learn from each other.

57
00:03:57,116 --> 00:04:01,654
So the reason I bring this up is there weve more people attending that organizer

58
00:04:01,702 --> 00:04:05,802
day than attended the very first DevOps days in 2009.

59
00:04:05,856 --> 00:04:09,660
So the movement has really grown, and we can see that over the years.

60
00:04:10,750 --> 00:04:14,298
And why do I bring this up? Why am I talking about DevOps

61
00:04:14,314 --> 00:04:17,486
days? It's not just because I'm the global chair of DevOps Days, and I think

62
00:04:17,508 --> 00:04:20,942
it's a pretty great conference, but it's about these

63
00:04:20,996 --> 00:04:24,606
communities, right? These ideas that we think about when we think about DevOps,

64
00:04:24,638 --> 00:04:28,242
they came from the practitioners. Now talking

65
00:04:28,296 --> 00:04:31,774
about ideas, we, of course, should talk about definitions,

66
00:04:31,822 --> 00:04:35,918
because that's fun. So Donovan

67
00:04:35,934 --> 00:04:39,334
Brown at Microsoft has defined DevOps as the union of

68
00:04:39,372 --> 00:04:42,786
people, process and products to enable continuous delivery

69
00:04:42,818 --> 00:04:46,054
of value to our end users. And I

70
00:04:46,092 --> 00:04:48,950
kind of am into this definition and this explanation of it.

71
00:04:49,020 --> 00:04:51,866
And again, the reason we're talking about definitions is I want to kind of get

72
00:04:51,888 --> 00:04:55,194
us on the same page. So you know where I'm coming from.

73
00:04:55,232 --> 00:04:58,646
And we're talking in a context when we talk about where everything went terribly,

74
00:04:58,678 --> 00:05:01,786
terribly wrong. But yeah,

75
00:05:01,808 --> 00:05:05,546
DevOps is about the people, the process, and the products. It's a bunch

76
00:05:05,578 --> 00:05:08,746
of, you know, put, put Andrew

77
00:05:08,778 --> 00:05:11,566
in a corner a couple years ago and said, andrew, I need you to give

78
00:05:11,588 --> 00:05:15,566
me a definition of DevOps. Andrew is the one who first tweeted

79
00:05:15,598 --> 00:05:19,682
about it and has done a lot of other things, but under

80
00:05:19,736 --> 00:05:23,602
duress. This was the definition Andrew gave me. And you see that

81
00:05:23,736 --> 00:05:27,314
software and human are equivalent in this, which I think is

82
00:05:27,352 --> 00:05:30,382
really, really key. And of know,

83
00:05:30,456 --> 00:05:34,086
I asked Twitter, what is DevOps? Not because if

84
00:05:34,108 --> 00:05:37,720
we know what something isn't, maybe we can reason about what it is.

85
00:05:39,050 --> 00:05:42,742
Hard to say, hard to say. But one thing that's been fairly

86
00:05:42,806 --> 00:05:46,314
commonly accepted when we talk about DevOps is this idea of

87
00:05:46,352 --> 00:05:50,006
columns. You might have heard of this before, and this is an acronym.

88
00:05:50,118 --> 00:05:53,354
This is simply representing some of the principles

89
00:05:53,402 --> 00:05:56,906
that we think about with DevOps. And it's comms and stands

90
00:05:56,938 --> 00:06:00,666
for culture, automation, lean measurement and sharing.

91
00:06:00,778 --> 00:06:04,026
Now, the order of the letters is not significant

92
00:06:04,058 --> 00:06:06,506
other than it spells a word. So if you want to call it clams,

93
00:06:06,538 --> 00:06:09,986
you could, or smolk. But we all sort of say columns. The reason I say

94
00:06:10,008 --> 00:06:13,534
the order doesn't matter is every one of these things is equally

95
00:06:13,582 --> 00:06:16,786
important. And I'm going to break these apart a little

96
00:06:16,808 --> 00:06:21,270
bit and talk about them in the modern thought

97
00:06:21,340 --> 00:06:24,758
around cloud engineering. So I want to dig into them just for a second so

98
00:06:24,764 --> 00:06:28,426
we know what we're talking about and how we compare these tenants. So when

99
00:06:28,448 --> 00:06:32,826
we think about culture, this is sometimes

100
00:06:32,928 --> 00:06:36,986
maybe shortcut is the squishy people stuff, but really it's about how your organization or

101
00:06:37,008 --> 00:06:40,934
how your team operates and how your humans

102
00:06:40,982 --> 00:06:44,826
interact. And the thing to remember about this is, like Lloyd

103
00:06:44,858 --> 00:06:49,018
Taylor said, is you can't directly change culture, but you can change behavior.

104
00:06:49,114 --> 00:06:53,354
And behavior becomes a culture. Your culture is really an expression

105
00:06:53,402 --> 00:06:57,370
of the behaviors, and those behaviors come from incentives,

106
00:06:57,450 --> 00:07:00,926
among other things. So you can't just sort of sit down as a leader,

107
00:07:00,958 --> 00:07:03,634
as a CIO and say, I'm going to change the culture. This is now our

108
00:07:03,672 --> 00:07:06,798
culture, right? You have to influence the behaviors, and the behaviors

109
00:07:06,814 --> 00:07:10,674
are expressed as the culture. When we think about those things and then automation,

110
00:07:10,722 --> 00:07:14,406
this is the one that everybody knows, right? When we think about DevOps, we think

111
00:07:14,428 --> 00:07:17,974
about automation tools and process automation and configuration

112
00:07:18,022 --> 00:07:21,594
management and all that fun stuff. And the

113
00:07:21,632 --> 00:07:25,994
reason that this matters though, besides that, it's fun for

114
00:07:26,032 --> 00:07:29,162
some, value of the word fun is,

115
00:07:29,296 --> 00:07:32,526
as Jez and David said, in continuous delivery. He said,

116
00:07:32,548 --> 00:07:36,090
if you ask experts to do boring and repetitive but technically demanding tasks,

117
00:07:36,170 --> 00:07:39,246
this is the surest way to get it screwed up,

118
00:07:39,348 --> 00:07:42,190
short of depriving them of sleep.

119
00:07:42,850 --> 00:07:46,594
So what we're trying to do here, again, to move at the velocity that we

120
00:07:46,632 --> 00:07:51,346
need to, we need to be redirecting our focus on

121
00:07:51,368 --> 00:07:54,722
the things that require our creativity and our human

122
00:07:54,776 --> 00:07:58,446
adaptive capacity versus things that can be automated.

123
00:07:58,558 --> 00:08:01,846
But automation isn't all of it. It's one of five things. And then we

124
00:08:01,868 --> 00:08:05,126
talk about lean. This was introduced first when

125
00:08:05,148 --> 00:08:08,818
we talked about in 2010, and John Willis and Damon

126
00:08:08,834 --> 00:08:12,566
Edwards first came up with Cams. And then Jez Humble proposed shortly

127
00:08:12,598 --> 00:08:16,054
thereafter to add l for lean. When we think about kind of lean manufacturing

128
00:08:16,102 --> 00:08:19,306
principles, and understandably, this is

129
00:08:19,328 --> 00:08:22,826
not a one to one match, right? You can't run your software organization the

130
00:08:22,848 --> 00:08:26,842
same way that you run an automotive plant. But there are some ideas

131
00:08:26,986 --> 00:08:30,894
that come from the lean movement that are really interesting to us. And one

132
00:08:30,932 --> 00:08:35,114
especially there's several that come in because lean is about reducing waste,

133
00:08:35,162 --> 00:08:38,306
right? So one of the things that we talk about in lean is this idea

134
00:08:38,328 --> 00:08:42,066
of a value stream map, right? And thinking about the value stream. And so if

135
00:08:42,088 --> 00:08:45,426
we think about that in

136
00:08:45,448 --> 00:08:48,594
a tech standpoint, maybe it's from idea to getting

137
00:08:48,632 --> 00:08:52,006
in front of a user, or as John Willis would say, commit the cycle from

138
00:08:52,028 --> 00:08:55,222
commit to cash. We talk about cycle times. This is all part of that value

139
00:08:55,276 --> 00:08:58,566
stream, but it's all the parts that go into that. And this

140
00:08:58,588 --> 00:09:02,614
is not a whole talk about value stream mapping. Steve Pereira, who's at Steve elsewhere

141
00:09:02,662 --> 00:09:06,454
on Twitter, has great content about value stream mapping,

142
00:09:06,502 --> 00:09:10,106
and I'll be dropping some resource links in

143
00:09:10,208 --> 00:09:13,818
the resources for this presentation at the end too,

144
00:09:13,904 --> 00:09:16,862
if you want to learn more about that. But that's really when we're thinking about

145
00:09:16,916 --> 00:09:20,670
how are we looking at ways that we can reduce waste in the process

146
00:09:20,740 --> 00:09:24,654
and look at the entire gestalt of everything and see where these

147
00:09:24,692 --> 00:09:27,678
things happen. And then we think about measurement.

148
00:09:27,854 --> 00:09:31,246
Measuring is really, really key because if we're talking about continuous improvement,

149
00:09:31,278 --> 00:09:34,578
how do we know that we're improving? And oftentimes when

150
00:09:34,584 --> 00:09:38,178
we think about the measures in this perspective, it's not that there's a certain number.

151
00:09:38,264 --> 00:09:41,686
So this is where we kind of think about things like okrs and v two

152
00:09:41,708 --> 00:09:45,286
moms and KPIs and stuff. That's not necessarily the

153
00:09:45,308 --> 00:09:48,194
be all and end all of measurement. It can also just be, is the needle

154
00:09:48,242 --> 00:09:51,786
moving? And is that interesting? They're not necessarily goals or targets to

155
00:09:51,808 --> 00:09:56,118
hit, but they're just ways for us to get an understanding

156
00:09:56,214 --> 00:10:00,380
both from pure performance of the technology part, but also

157
00:10:00,690 --> 00:10:04,302
how are we actually doing with

158
00:10:04,356 --> 00:10:09,002
stuff? And then finally, the s stands

159
00:10:09,066 --> 00:10:12,634
for sharing. And this has a lot to do with just a matter

160
00:10:12,692 --> 00:10:16,670
of getting both. As far as sharing

161
00:10:16,750 --> 00:10:21,342
information in a lot of kind of pathological

162
00:10:21,406 --> 00:10:25,102
or bureaucratic organizations versus

163
00:10:25,166 --> 00:10:28,966
performant ones, there's a lot of information hoarding, because either it can

164
00:10:28,988 --> 00:10:32,786
be when I have this information and someone else doesn't, then that protects

165
00:10:32,818 --> 00:10:36,742
my value. There's also, at a senior level of management, this common

166
00:10:36,796 --> 00:10:40,134
idea of need to know. The reality is, what needs

167
00:10:40,172 --> 00:10:42,618
to be kept from people from need to know is usually a lot smaller than

168
00:10:42,624 --> 00:10:45,798
you think, but it's kind of a form of risk aversion.

169
00:10:45,974 --> 00:10:49,114
But the reality is that the more information we have, the better

170
00:10:49,152 --> 00:10:52,686
we can do our jobs. But also sharing is not

171
00:10:52,708 --> 00:10:56,080
just about that. Sharing is also sharing practices and information.

172
00:10:57,170 --> 00:11:00,794
One really interesting thing when we think about post incident reviews,

173
00:11:00,842 --> 00:11:04,574
so when J Paul Reed did his thesis on how post

174
00:11:04,612 --> 00:11:07,858
mortems are done in large. Actually, one thing he found that I thought was

175
00:11:07,864 --> 00:11:11,326
really interesting is the larger the organization, the less likely teams

176
00:11:11,358 --> 00:11:14,850
were to share the results of their post incident reviews outside

177
00:11:14,920 --> 00:11:18,626
of their team, which perhaps ironically, the larger the

178
00:11:18,648 --> 00:11:21,458
organization, the more necessary because of interdependencies.

179
00:11:21,554 --> 00:11:24,934
So there's a lot of work we can do on sharing. Okay, so these sound

180
00:11:24,972 --> 00:11:28,674
like some like, okay, you're like, this is cool. This is like a revolution.

181
00:11:28,722 --> 00:11:32,666
This is like a cool way to not be jerks to

182
00:11:32,688 --> 00:11:36,438
each other maybe, and move the needle and really be effective

183
00:11:36,614 --> 00:11:40,026
and drive all this stuff. And these were the

184
00:11:40,048 --> 00:11:43,690
principles that weve been talking about in the DevOps movement since

185
00:11:43,760 --> 00:11:46,546
2010, right? That's calms came out in 2010.

186
00:11:46,548 --> 00:11:49,982
And even if you look in 2009, these ideas were all

187
00:11:50,036 --> 00:11:54,158
there. Weve been talking about this for well nigh twelve

188
00:11:54,244 --> 00:11:57,506
years at this point. Right. But we've been doing a lot of

189
00:11:57,528 --> 00:12:01,074
talking. But what happened, that doesn't sound like what

190
00:12:01,112 --> 00:12:04,402
is happening in the discord is actually going on these days.

191
00:12:04,536 --> 00:12:08,246
Right? So we kind of have this thing where it's like

192
00:12:08,268 --> 00:12:11,826
it's all about automation. When you talk about DevOps or DevOps teams and DevOps

193
00:12:11,858 --> 00:12:15,222
engineers, they're automation engineers. And by the way,

194
00:12:15,356 --> 00:12:19,014
I have long since stopped fighting about and being,

195
00:12:19,132 --> 00:12:21,686
you're not going to get me sitting here saying that, don't call yourself a DevOps

196
00:12:21,718 --> 00:12:24,778
engineer or anything like that, because you know what? I'll tell you two reasons why

197
00:12:24,864 --> 00:12:27,340
I don't fight that fight. Number one,

198
00:12:28,510 --> 00:12:32,154
most of the people who have the title DevOps engineer didn't give

199
00:12:32,192 --> 00:12:35,998
that title themselves. So if I'm out here on Twitter talking crap about people with

200
00:12:36,004 --> 00:12:39,086
the title DevOps engineer, the only person that's hurting is the people with those

201
00:12:39,108 --> 00:12:42,318
titles and not the people who came up with them. So I don't do that.

202
00:12:42,404 --> 00:12:45,986
And number two, the title DevOps engineer gets you 20% to

203
00:12:46,008 --> 00:12:48,850
30% more money. So go get paid. I'm all for it.

204
00:12:48,920 --> 00:12:52,530
But that said, we've gotten into this thing where DevOps means

205
00:12:52,600 --> 00:12:56,974
automation. DevOps is scripting,

206
00:12:57,022 --> 00:13:00,594
DevOps is template DevOps. And remember, the a is just

207
00:13:00,632 --> 00:13:03,894
part of, that's one of five, that's maybe one fifth of DevOps. But it's really

208
00:13:03,932 --> 00:13:07,890
become about automation, right? Or it's about Kubernetes,

209
00:13:07,970 --> 00:13:11,274
right? Someone actually, I saw a tweet the other day that said,

210
00:13:11,312 --> 00:13:14,586
are there any conferences that aren't just talks about kubernetes? And yes,

211
00:13:14,608 --> 00:13:18,154
there are, but DevOps all the things is

212
00:13:18,192 --> 00:13:21,774
not container orchestrating all the things, or Kubernetes all the things.

213
00:13:21,812 --> 00:13:25,386
But you might feel like that's where DevOps

214
00:13:25,418 --> 00:13:28,800
equals kubernetes quite often is where we go,

215
00:13:29,170 --> 00:13:33,006
or thankfully, this is kind of fall off a little bit that

216
00:13:33,028 --> 00:13:36,994
it's not about culture. Years ago, there was a very short lived movement for

217
00:13:37,032 --> 00:13:41,134
enterprise DevOps. And one of the kind of loudest

218
00:13:41,182 --> 00:13:44,594
voices in that movement used to say the culture part of DevOps didn't apply

219
00:13:44,632 --> 00:13:47,806
to the enterprise. That, quote, culture was for yogurt.

220
00:13:47,998 --> 00:13:50,818
We know this to not be true, but there still is this thing where it's

221
00:13:50,834 --> 00:13:54,118
like, well, DevOps is the engineering part. There's no people parts of

222
00:13:54,124 --> 00:13:56,726
this. It's not about how we do the work.

223
00:13:56,908 --> 00:14:00,106
And I kind of have

224
00:14:00,128 --> 00:14:04,070
some bad news for you, right, which is DevOps

225
00:14:04,230 --> 00:14:08,074
is being sold to you. That's where we are right now.

226
00:14:08,272 --> 00:14:12,254
And as someone has

227
00:14:12,292 --> 00:14:15,162
said before, you can buy DevOps,

228
00:14:15,306 --> 00:14:18,846
but I can definitely sell it to you by

229
00:14:18,868 --> 00:14:22,398
that. That was me. I'm the one that said that. But I feel like

230
00:14:22,404 --> 00:14:25,826
I've reached the point that I can quote myself in my own talks. I think

231
00:14:25,848 --> 00:14:29,700
I get some kind of cloud leader badge for that.

232
00:14:30,070 --> 00:14:33,666
I'll check on that later. But that's the

233
00:14:33,688 --> 00:14:37,074
thing. We're trying to do a little better though,

234
00:14:37,112 --> 00:14:40,966
right? So we're like, all right, we had DevOps, we kind of talked

235
00:14:40,988 --> 00:14:44,674
about DevOps, and this is about the wall of confusion,

236
00:14:44,722 --> 00:14:48,246
all this stuff. But then we got devsecops. Now we're talking about, I mean,

237
00:14:48,268 --> 00:14:52,566
this is the Devsecops event. So is that portmanteau

238
00:14:52,598 --> 00:14:56,474
a little better? We got security shoved in there now, but that's not.

239
00:14:56,592 --> 00:14:59,146
We have to be more inclusive. What about the business?

240
00:14:59,328 --> 00:15:02,438
Everybody is part of the business, our business goal.

241
00:15:02,454 --> 00:15:05,146
So do we have biz DevOps? But wait. But then we took security up and,

242
00:15:05,168 --> 00:15:08,554
oh, you know what? We need some serverless DevOps because we do DevOps

243
00:15:08,602 --> 00:15:12,078
differently when serverless is involved. Or maybe let's make

244
00:15:12,084 --> 00:15:15,738
sure we really have a big tent. We've got our devsec DB ops ops

245
00:15:15,834 --> 00:15:18,866
because our DB ops people are different than our other ops people. It's a different

246
00:15:18,888 --> 00:15:22,238
kind of ops thing. I don't know. And then of course, we have to DevOps

247
00:15:22,254 --> 00:15:23,250
our DevOps.

248
00:15:26,150 --> 00:15:29,400
That's the thing. Like what? First of all,

249
00:15:31,770 --> 00:15:35,286
I love DevOps and the name is great, but it's really unfortunate because

250
00:15:35,308 --> 00:15:39,306
we feel like we need to express everything through it.

251
00:15:39,408 --> 00:15:43,446
And what this goes to illustrate, if there's

252
00:15:43,478 --> 00:15:46,890
nothing else, now that we're kind of gone through this history.

253
00:15:46,960 --> 00:15:53,390
What have we learned here is that words are hard because

254
00:15:53,460 --> 00:15:56,734
we're trying to express an idea using a

255
00:15:56,772 --> 00:16:00,160
short amount of time. So nuance gets lost in these words.

256
00:16:01,490 --> 00:16:05,460
But don't worry, I have more words for you because that will certainly help.

257
00:16:06,070 --> 00:16:09,234
And what I want to talk about now for the next little bit is this

258
00:16:09,272 --> 00:16:12,642
idea of cloud engineering and cloud

259
00:16:12,696 --> 00:16:13,730
engineering.

260
00:16:16,330 --> 00:16:20,002
One of the ways to think about this is it's employing standard software

261
00:16:20,066 --> 00:16:23,574
engineering practices across, whether it's your infrastructure, it's your app,

262
00:16:23,612 --> 00:16:27,720
Dev, it's your compliance. And this

263
00:16:28,030 --> 00:16:32,006
sounds familiar, maybe, right? This sound a little bit like DevOps,

264
00:16:32,038 --> 00:16:35,642
like software engineers years from web

265
00:16:35,696 --> 00:16:38,950
ops people and security people learn from software engineers.

266
00:16:39,030 --> 00:16:42,286
And it sounds familiar, right? Weren't we trying to

267
00:16:42,308 --> 00:16:46,160
say this before it became all this other stuff?

268
00:16:47,810 --> 00:16:50,958
Because in this sort of cloud first world,

269
00:16:51,044 --> 00:16:55,338
right, we compose our things out of cloud resources

270
00:16:55,434 --> 00:16:59,010
of some kind, right? And we build infrastructure platforms upon them.

271
00:16:59,080 --> 00:17:01,826
And that's where we throw our applications. Maybe we don't throw them, we deploy them.

272
00:17:01,848 --> 00:17:05,206
That's nicer than throwing things. And then we have

273
00:17:05,228 --> 00:17:09,074
to keep them running with our policies or our uppercase or lowercase compliance,

274
00:17:09,122 --> 00:17:13,814
right? The things that we expect. And this

275
00:17:13,852 --> 00:17:17,846
is looking pretty familiar. So when

276
00:17:17,868 --> 00:17:21,466
we kind of break these things down, when I sort of talk, but these,

277
00:17:21,648 --> 00:17:25,706
from DevOps to cloud engineering, building the deploying and managing are sort

278
00:17:25,728 --> 00:17:29,162
of three ways I like to slice them up, right? So if we think about

279
00:17:29,216 --> 00:17:32,438
build. So build sort of might sound like this is

280
00:17:32,464 --> 00:17:35,946
just the writing code part of all of this, but it's about creating

281
00:17:35,978 --> 00:17:38,960
the services and infrastructure that provide,

282
00:17:39,490 --> 00:17:42,942
well, really what our customers and our constituents and our users need.

283
00:17:43,076 --> 00:17:46,334
And like I said, we use cloud resources to build these applications,

284
00:17:46,382 --> 00:17:50,226
then the services and the infrastructure, maybe that's a shared services platform.

285
00:17:50,328 --> 00:17:53,838
So you have a single consistent experience across multiple teams.

286
00:17:53,854 --> 00:17:57,686
Again, it depends on who you are, right? And sort

287
00:17:57,708 --> 00:17:59,640
of when we think about what these are,

288
00:18:02,570 --> 00:18:06,870
we talked about maybe this is composed of shared services platforms.

289
00:18:07,450 --> 00:18:10,650
When we think about reusable infrastructure components,

290
00:18:11,070 --> 00:18:14,838
especially when we think about where you're

291
00:18:14,854 --> 00:18:18,614
not recreating the whole thing and it's not as simple as just Ruby's dry

292
00:18:18,662 --> 00:18:22,202
thing, don't repeat yourself. But about having something

293
00:18:22,256 --> 00:18:26,046
that's, that's sort of understood by a domain expert and then

294
00:18:26,148 --> 00:18:29,294
that's able to be reused, it's building blocks. Hey, this is like how

295
00:18:29,332 --> 00:18:33,186
software works, right? So why can't we do that with our infrastructure too?

296
00:18:33,368 --> 00:18:36,946
It kind of works. And then we can leverage the

297
00:18:36,968 --> 00:18:40,206
ecosystem around those frameworks and tools.

298
00:18:40,238 --> 00:18:44,126
So that's one of the advantages. If you're thinking about tooling

299
00:18:44,158 --> 00:18:47,418
that's using common programming language, that maybe you're writing

300
00:18:47,454 --> 00:18:50,806
this stuff in typescript instead of a bespoke DSL or something like

301
00:18:50,828 --> 00:18:54,662
that, you have all of the ecosystem of go or python or whatever

302
00:18:54,716 --> 00:18:58,706
language that stuff is in, from ides

303
00:18:58,738 --> 00:19:02,358
to testing tools to just common practices. So a lot

304
00:19:02,364 --> 00:19:05,946
of this is about sharing and stuff, right? Okay. So what I'm

305
00:19:05,968 --> 00:19:08,378
going to do here is kind of take this build id. I'm going to do

306
00:19:08,384 --> 00:19:11,754
this for each of our build and deploy and manage and apply how

307
00:19:11,792 --> 00:19:15,646
each of the tenets of columns might apply to that and see how

308
00:19:15,668 --> 00:19:19,200
we can kind of do the layering, right? Like how do these connect,

309
00:19:19,570 --> 00:19:23,266
use that common language. So if we think about the

310
00:19:23,288 --> 00:19:27,074
culture part around build, this is where we talk about focusing on our

311
00:19:27,112 --> 00:19:31,246
differentiator, right? When we're using reusable

312
00:19:31,358 --> 00:19:34,814
shared things, whether they're shared within our organization

313
00:19:34,862 --> 00:19:38,114
or shared with the ecosystem, our organization,

314
00:19:38,242 --> 00:19:41,430
our company, we have a thing that makes us different,

315
00:19:41,580 --> 00:19:45,122
right? And I got news for you. Unless you are like Circle

316
00:19:45,186 --> 00:19:48,470
CI or GitLab or GitHub or someone, it's not

317
00:19:48,540 --> 00:19:51,580
that you're super good at building pipelines, right?

318
00:19:52,670 --> 00:19:56,682
I used to do some work where I had customers that were in

319
00:19:56,816 --> 00:19:59,786
North America, in the public sector, in the US, and I used to say like,

320
00:19:59,808 --> 00:20:03,030
are you the US department of continuous delivery?

321
00:20:03,110 --> 00:20:07,194
No, that's not what you do. Right. So we want to focus on the differentiator,

322
00:20:07,242 --> 00:20:10,670
right? And then the culture part is a common development experience.

323
00:20:10,740 --> 00:20:14,266
So not only, it doesn't mean that every single team in your whole organization is

324
00:20:14,308 --> 00:20:17,874
using the exact same thing, but it does help with that.

325
00:20:17,912 --> 00:20:22,286
Empathy across when we're having similar experiences drives

326
00:20:22,318 --> 00:20:26,034
the empathy, right? So when an automation perspective, these are things like reusable

327
00:20:26,082 --> 00:20:29,686
components help us automate and rebuild. And this,

328
00:20:29,708 --> 00:20:33,382
again, we're leveraging that ecosystem and

329
00:20:33,436 --> 00:20:36,678
all the automation that already exists within that. We don't have to

330
00:20:36,684 --> 00:20:40,770
build new stuff. And this is helping avoid bespoke implementations,

331
00:20:40,850 --> 00:20:43,626
right? How many times you get somewhere and you're like, well, let me take three

332
00:20:43,648 --> 00:20:47,020
months to figure out how we do things here versus like, oh,

333
00:20:47,790 --> 00:20:51,174
this is common within the existing industry or even

334
00:20:51,312 --> 00:20:54,826
within my organization when we think about the principles

335
00:20:54,858 --> 00:20:58,222
of lean, right? Again, we're focusing on value in this

336
00:20:58,276 --> 00:21:02,074
idea, those differentiators. It does help with efficiency,

337
00:21:02,122 --> 00:21:05,574
as a loaded word. It helps with sort of a waste reduction.

338
00:21:05,642 --> 00:21:09,090
But also when we think about continuous improvement as part of that,

339
00:21:09,240 --> 00:21:12,674
it becomes part of our cycle of how we're building these services

340
00:21:12,792 --> 00:21:16,086
and saying where is this kind of coming in from a

341
00:21:16,108 --> 00:21:19,186
measurement perspective is consistency breeds visibility.

342
00:21:19,298 --> 00:21:22,866
And this is a common theme you're going to see repeated

343
00:21:22,898 --> 00:21:26,200
throughout the rest of this talk is

344
00:21:27,290 --> 00:21:30,922
when we're doing things in a similar way, doesn't mean the same way for everything,

345
00:21:30,976 --> 00:21:35,258
but when we're doing things consistently, we have visibility into where

346
00:21:35,344 --> 00:21:39,030
they might differ, and then what needs to be changed.

347
00:21:39,190 --> 00:21:42,314
And then from the sharing perspective, literally the reusable

348
00:21:42,362 --> 00:21:46,026
components. Right? So if I have libraries, I have things like that can reuse.

349
00:21:46,138 --> 00:21:50,254
And just the ecosystem promotes sharing outside, which is

350
00:21:50,292 --> 00:21:54,250
again, that rising tide raises

351
00:21:54,330 --> 00:21:58,066
all boats. And we can learn from existing practices both within the

352
00:21:58,088 --> 00:22:01,890
larger ecosystem, but also just within other parts of our organization.

353
00:22:03,430 --> 00:22:06,914
Hit the wrong arrow key. Sorry about that. Okay, let's talk about the deploy part,

354
00:22:06,952 --> 00:22:10,262
right? I mean, it doesn't count until it's in production. That's for real,

355
00:22:10,316 --> 00:22:14,018
right? Our code and our infrastructure don't really give any value until they're

356
00:22:14,034 --> 00:22:17,718
in front of our customers and users. But we want to do this quality

357
00:22:17,804 --> 00:22:21,466
constant and highly efficient. If it takes us too long or too many

358
00:22:21,488 --> 00:22:25,446
manual steps, we don't have the velocity to get new features

359
00:22:25,478 --> 00:22:29,066
to our customers or also restore service when this happens. So the

360
00:22:29,088 --> 00:22:32,494
thing is, when we apply software engineering practices to our deployment process,

361
00:22:32,612 --> 00:22:35,678
we can ensure that we ship the same way every time.

362
00:22:35,844 --> 00:22:39,326
And it's pretty common. We talk continuous delivery came

363
00:22:39,348 --> 00:22:40,800
out in 2009.

364
00:22:44,450 --> 00:22:48,878
Continuous integration and continuous delivery practices applied to our application software

365
00:22:49,054 --> 00:22:52,418
is fairly common practices now. But we can use those

366
00:22:52,424 --> 00:22:56,602
same principles with our infrastructure. So that means that new and changed infrastructure

367
00:22:56,766 --> 00:23:00,342
resources, they can meet our quality controls and we can track

368
00:23:00,396 --> 00:23:03,922
and understand, especially when we're sort of chasing down that what changed

369
00:23:03,986 --> 00:23:07,474
problem, right? And the value of automation,

370
00:23:07,522 --> 00:23:10,806
our deployment, it's not just about providing tests that make sure that

371
00:23:10,828 --> 00:23:13,514
we do the steps the same way every time.

372
00:23:13,712 --> 00:23:17,514
Regardless of how experienced you are, every one of us

373
00:23:17,552 --> 00:23:20,954
is capable of missing a step or making an error. It's just possible it can

374
00:23:20,992 --> 00:23:24,982
happen, right? And so then we think about checklists,

375
00:23:25,046 --> 00:23:28,874
and I'm going to talk about checklists a bit. But the great thing about checklists,

376
00:23:28,922 --> 00:23:32,058
when I love checklists, is they're even better when a human defines them and they're

377
00:23:32,074 --> 00:23:35,714
run by software. The power of a checklist is defining the

378
00:23:35,752 --> 00:23:39,650
steps, not they're actually running it. So the automation

379
00:23:39,990 --> 00:23:43,026
can express our checklists in code, code that

380
00:23:43,048 --> 00:23:45,890
can be tested, reviewed and managed.

381
00:23:47,690 --> 00:23:51,126
When we kind of think about these ideas, right? We said

382
00:23:51,148 --> 00:23:54,120
it's the same way every time. I mean, every time.

383
00:23:56,010 --> 00:23:59,394
Here's sort of a clue. Like if you have an emergency brake glass.

384
00:23:59,442 --> 00:24:02,874
Oh my God. We don't follow the process when there's an emergency. There's two things

385
00:24:02,912 --> 00:24:06,486
that tells me. Number one is that your process is too slow.

386
00:24:06,518 --> 00:24:10,438
And number two, it means everything is now an emergency. And we

387
00:24:10,464 --> 00:24:13,486
have quality and security checks. So security is just another aspect of

388
00:24:13,508 --> 00:24:16,400
quality when this comes in.

389
00:24:16,770 --> 00:24:20,320
And again, like I said, let's automate those checklists. So,

390
00:24:21,730 --> 00:24:25,166
if we think about how the deploy pieces apply to

391
00:24:25,188 --> 00:24:28,290
the ideas of columns. So from a culture perspective,

392
00:24:28,630 --> 00:24:31,986
having this idea right, it doesn't count unless it's in prod. Like we want to

393
00:24:32,008 --> 00:24:35,230
ship, and we want to ship frequently, so that we can get information.

394
00:24:35,400 --> 00:24:38,662
And we are looking at this as small batches of changes.

395
00:24:38,796 --> 00:24:40,920
And this iterative development idea,

396
00:24:42,970 --> 00:24:47,080
we are not doing these big bang releases because

397
00:24:48,010 --> 00:24:51,722
it's much, much harder to understand not only what changed if something is going wrong,

398
00:24:51,776 --> 00:24:55,402
but if something is going right, why did that something start going

399
00:24:55,456 --> 00:24:59,370
right? Iteration helps us with that which enables for our continuous

400
00:24:59,710 --> 00:25:03,002
improvement, employment improvement. Cool. All right,

401
00:25:03,056 --> 00:25:07,054
so when we think about the automation side of that, right, we think about these

402
00:25:07,092 --> 00:25:10,238
CI CD pipelines. It means we're putting everything through

403
00:25:10,324 --> 00:25:14,126
some pipeline. It doesn't have to be an elaborate pipeline. Your first pipelines can

404
00:25:14,148 --> 00:25:17,314
be, they run no tests. That's the way it's giving

405
00:25:17,352 --> 00:25:20,642
us kind of our glide path and our muscle memory to, that's how we make

406
00:25:20,696 --> 00:25:24,382
changes. And then we can start layering these automated

407
00:25:24,446 --> 00:25:27,926
checks into there where these come in. And checklists are

408
00:25:27,948 --> 00:25:31,494
great. I love mia checklist. So let's automate them, right?

409
00:25:31,532 --> 00:25:35,474
Don't automate their creation. That requires the human creativity and expertise.

410
00:25:35,602 --> 00:25:38,914
But you don't have to tick all the boxes yourself. The robots

411
00:25:38,962 --> 00:25:42,794
can do that. So these

412
00:25:42,832 --> 00:25:46,266
ideas around deployment, these are enabling that fast. The way we think about it

413
00:25:46,288 --> 00:25:50,298
in cloud engineering, this is enabling fast feedback, which helps us see

414
00:25:50,464 --> 00:25:54,462
what's happening in our value stream, right? And it's giving visibility into that

415
00:25:54,516 --> 00:25:57,694
entire supply chain of where all these

416
00:25:57,732 --> 00:26:00,926
places go. And we can find those bottlenecks. So, if we think

417
00:26:00,948 --> 00:26:04,206
about the idea around theory of constraints, the theory of constraints says that

418
00:26:04,228 --> 00:26:07,490
any optimization we make in a process that is not

419
00:26:07,560 --> 00:26:10,786
the largest bottleneck will actually make things worse. So we need to know where those

420
00:26:10,808 --> 00:26:14,174
bottlenecks are. And again, from a measure,

421
00:26:14,222 --> 00:26:17,430
it's that visibility, right? So we're seeing more things,

422
00:26:17,500 --> 00:26:21,010
more information is exposed to us that we are then capturing.

423
00:26:21,170 --> 00:26:24,802
We can think about that cycle time, that value stream,

424
00:26:24,946 --> 00:26:28,114
and it gives us something to understand. Again, there's no magic

425
00:26:28,162 --> 00:26:32,098
number. Just because the cycle time at this organization is this doesn't

426
00:26:32,114 --> 00:26:34,506
mean that's what's right for you, but you need to know what's right for you

427
00:26:34,528 --> 00:26:38,474
and are you hitting it. And again, it's not just about speed, right? It's about

428
00:26:38,512 --> 00:26:42,266
the effective velocity. And from the sharing perspective,

429
00:26:42,298 --> 00:26:45,310
right, it's information that is being shared. If we have,

430
00:26:45,380 --> 00:26:49,166
weve sharing a common approach to our pipelines. From a

431
00:26:49,188 --> 00:26:53,280
shape perspective, weve doing less duplicate work

432
00:26:54,210 --> 00:26:57,450
and it just makes it so much easier. What changed? Because you never know who

433
00:26:57,460 --> 00:27:00,626
needs to touch a thing, right? Or who might be being involved in an

434
00:27:00,648 --> 00:27:03,954
incident or something like that. So it's giving us that understanding of like

435
00:27:03,992 --> 00:27:08,158
here's what happened here. And finally the final sort of tenant

436
00:27:08,334 --> 00:27:12,454
or phase, or I don't really want to call it a phase. Part of

437
00:27:12,492 --> 00:27:16,146
cloud engineering is manage, right? So we can get our stuff into production

438
00:27:16,178 --> 00:27:19,314
and in front of people. But that's not the end. Our customers are constantly

439
00:27:19,362 --> 00:27:22,394
using our services and applications and we have to manage these

440
00:27:22,432 --> 00:27:25,894
resources when they're in use. And from a managed perspective,

441
00:27:25,942 --> 00:27:29,226
it's just sort of making sure that everything is happening the way we expect it

442
00:27:29,248 --> 00:27:32,526
to or that we require. And as it applies to

443
00:27:32,548 --> 00:27:36,826
our applications and services, the visibility across all of our infrastructure allows

444
00:27:36,858 --> 00:27:40,430
everyone on our team, regardless of their role, to have a common

445
00:27:40,500 --> 00:27:44,222
understanding of what's going on. So I'm sure something

446
00:27:44,276 --> 00:27:48,738
that, I mean, we're here at Devsecops, I'm sure you've all heard security

447
00:27:48,824 --> 00:27:51,986
is everyone's job. Well, it's easy to say what that

448
00:27:52,008 --> 00:27:55,374
means in the world of cloud engineering is that we consider security and compliance.

449
00:27:55,422 --> 00:27:59,634
And I talk about lowercase and uppercase compliance, so uppercase is regulatory

450
00:27:59,682 --> 00:28:04,246
policies and lowercase is your organizational policies. But we

451
00:28:04,268 --> 00:28:07,926
consider security and compliance to be closely integrated into our work.

452
00:28:08,108 --> 00:28:11,420
Said before, security is just another aspect of quality.

453
00:28:11,870 --> 00:28:14,540
So if we treat our policy as code,

454
00:28:15,390 --> 00:28:18,474
just like we treat infrastructure as code, our infrastructure as

455
00:28:18,512 --> 00:28:22,134
software, this is a powerful idea because if we express

456
00:28:22,182 --> 00:28:25,354
them as code rather than prose in a document,

457
00:28:25,402 --> 00:28:29,246
then we can apply these policy checks both before and after we deploy our

458
00:28:29,268 --> 00:28:33,022
services and our infrastructure. This also kind of extends that common

459
00:28:33,076 --> 00:28:35,854
vocabulary for collaboration across the teams,

460
00:28:35,902 --> 00:28:39,250
regardless of where you sit in the chart.

461
00:28:40,710 --> 00:28:44,514
The other thing that I like to think about from a managed perspective is that

462
00:28:44,552 --> 00:28:47,494
we need controls in place to allow who can make changes and what they can

463
00:28:47,532 --> 00:28:51,334
change. I mean, you're like, yeah, maddie, I know, right? But why?

464
00:28:51,452 --> 00:28:55,174
Okay, it's not just playing defense, because we

465
00:28:55,212 --> 00:28:58,374
trust our team members to want to do the right thing,

466
00:28:58,492 --> 00:29:01,674
but we need guardrails and controls to ensure that

467
00:29:01,712 --> 00:29:05,226
they are set up to do so. And this means we need

468
00:29:05,248 --> 00:29:08,986
visibility into all the changes that occur, treating our infrastructure just like

469
00:29:09,008 --> 00:29:12,414
we do our source code in version control. Thinking about

470
00:29:12,452 --> 00:29:15,982
versioning our actual infrastructure, not just versioning the code that

471
00:29:16,036 --> 00:29:19,920
deploys our infrastructure. And the thing about having

472
00:29:20,690 --> 00:29:24,914
capability, intentionality around fine grained access controls actually

473
00:29:24,952 --> 00:29:29,300
helps make our team members more successful because they have

474
00:29:29,990 --> 00:29:33,730
more faith and more trust. Right? So again,

475
00:29:33,880 --> 00:29:37,750
we think about the visibility, security being everyone's job. I love

476
00:29:37,900 --> 00:29:41,682
thinking about a common vocabulary because all of that stuff drives empathy.

477
00:29:41,826 --> 00:29:45,362
And the controls and processes enable and enhance,

478
00:29:45,506 --> 00:29:48,986
not just protect, right? So taking us through the

479
00:29:49,008 --> 00:29:52,410
last run through columns here, from a manage perspective,

480
00:29:53,230 --> 00:29:57,082
using common code, common principles around

481
00:29:57,136 --> 00:30:00,878
this really enables collaboration across your,

482
00:30:01,044 --> 00:30:04,794
whether it's software development, whether it's operations, whether it's compliance,

483
00:30:04,922 --> 00:30:06,240
information security,

484
00:30:07,570 --> 00:30:10,986
devsecops, whoever, we're all collaborating

485
00:30:11,018 --> 00:30:14,514
in a way that gets us consistent. And again,

486
00:30:14,552 --> 00:30:17,570
remember, guardrails actually enable confidence.

487
00:30:18,390 --> 00:30:21,726
And this increases a common understanding across disciplines,

488
00:30:21,758 --> 00:30:25,326
which is really what the empathy part that we talk about so much in culture

489
00:30:25,358 --> 00:30:29,166
of DevOps is. That's really what we mean is just have a common understanding,

490
00:30:29,278 --> 00:30:33,090
see where everyone's coming from and what their context is. Right? Sharing context.

491
00:30:33,170 --> 00:30:36,050
Here's the thing about the automation part of all this. Computers can't lie,

492
00:30:36,130 --> 00:30:39,990
right? Tell me how many audits I've been a part of as a sysadmin

493
00:30:40,330 --> 00:30:43,786
for several decades, where the audit was, they asked me

494
00:30:43,808 --> 00:30:47,146
questions. They're like, maddie, every time you deployed this software, did you do

495
00:30:47,168 --> 00:30:50,346
x, y, and z? I'm like, sure I did. Why not? You're just

496
00:30:50,368 --> 00:30:53,226
trusting me, not saying that I would lie on purpose. I might misremember.

497
00:30:53,338 --> 00:30:57,274
But the other thing, again, the gates

498
00:30:57,322 --> 00:31:00,846
put in place that are automated, can't get it.

499
00:31:00,868 --> 00:31:03,806
Come on, just this one time. Do me a favor. My boss is on my

500
00:31:03,828 --> 00:31:08,386
back, right? And then the

501
00:31:08,408 --> 00:31:11,506
process and checks in there enable that trust. And our

502
00:31:11,528 --> 00:31:14,818
policy goes from vague to understandable, right? Instead of it

503
00:31:14,824 --> 00:31:17,254
just sort of being, well, what did you remember we talked about how words are

504
00:31:17,292 --> 00:31:20,866
hard? Okay. All right, cool. So from a lean

505
00:31:20,898 --> 00:31:24,694
perspective, this helps us determine what improvements we

506
00:31:24,732 --> 00:31:28,242
need to make to help increase our safety.

507
00:31:28,386 --> 00:31:32,474
And then we're expressing these value stream changes in code so

508
00:31:32,512 --> 00:31:36,326
we see what's going on with them. From a measurement perspective,

509
00:31:36,518 --> 00:31:40,074
this gives us visibility into current policy. I've heard that infrastructure is code

510
00:31:40,112 --> 00:31:43,930
is executable documentation policy as code is executable

511
00:31:44,090 --> 00:31:47,546
documentation of your policy. So it's much, much easier.

512
00:31:47,578 --> 00:31:51,614
It's not like, okay, well, this is referenced in subsection five, stroke z

513
00:31:51,732 --> 00:31:55,294
of this PDF on this sharepoint that you don't have access to or whatever.

514
00:31:55,332 --> 00:31:59,026
It's like, it's right there. Cool. And it lets us get an instant view of

515
00:31:59,048 --> 00:32:03,074
our current state of compliance. This is really

516
00:32:03,112 --> 00:32:06,722
important. It helps us see when our policy and value collide.

517
00:32:06,786 --> 00:32:10,726
And it doesn't mean that value always trumps policy or vice versa, but we want

518
00:32:10,748 --> 00:32:15,350
to know when that's happening so we can make an appropriate decision.

519
00:32:15,930 --> 00:32:19,146
And finally, the sharing just comes from that

520
00:32:19,168 --> 00:32:23,098
shared vocabulary and also being able to utilize success

521
00:32:23,184 --> 00:32:27,082
patterns wherever those might lie and then sharing that

522
00:32:27,136 --> 00:32:29,340
learning. Right? So when things happen,

523
00:32:30,750 --> 00:32:33,006
we're going to learn something from it. We want to be able to share that

524
00:32:33,028 --> 00:32:36,766
within our organization for people that might not have been directly involved in the

525
00:32:36,788 --> 00:32:40,720
learning opportunity. So when we think about

526
00:32:42,050 --> 00:32:46,174
what DevOps started as and what maybe still

527
00:32:46,212 --> 00:32:49,682
a lot of people hope and dream that it will continue to be.

528
00:32:49,736 --> 00:32:53,474
But compared to what it is, when we think about that, we think about these

529
00:32:53,512 --> 00:32:57,350
ideas of cloud engineering, this is my ask

530
00:32:57,420 --> 00:33:01,080
to you, which is, let's take DevOps back.

531
00:33:01,930 --> 00:33:05,110
Let's make it what it's always supposed to have been about.

532
00:33:05,260 --> 00:33:08,826
We all are clamoring for this, and maybe we'll call it cloud engineering this time

533
00:33:08,848 --> 00:33:12,746
away. Either way, what I want to make

534
00:33:12,768 --> 00:33:16,486
sure we focus on is getting back to these core principles.

535
00:33:16,518 --> 00:33:19,180
That is my challenge to you.

536
00:33:19,890 --> 00:33:23,118
It's been my real pleasure to be a

537
00:33:23,124 --> 00:33:26,506
part of this event. You can find me on Twitter at Matt

538
00:33:26,538 --> 00:33:30,394
Stratton. All these slides and supporting resources

539
00:33:30,442 --> 00:33:33,994
are available at speaking Matty stratton.com. So I've got some supporting

540
00:33:34,042 --> 00:33:37,598
links, some additional reading if you're interested. I have a

541
00:33:37,604 --> 00:33:41,246
podcast called Arrested DevOps. And if you like kind

542
00:33:41,268 --> 00:33:44,558
of silly online game shows about tech, you might want

543
00:33:44,564 --> 00:33:48,470
to tune into DevOps party games, which is another thing that I have there.

544
00:33:48,540 --> 00:33:51,826
So thank you very much. Go ahead and hit me up on Twitter if you've

545
00:33:51,858 --> 00:33:55,622
got any questions, any thoughts on how we can really keep moving things

546
00:33:55,676 --> 00:33:57,620
forward. Thank you.

