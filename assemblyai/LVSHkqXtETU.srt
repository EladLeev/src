1
00:01:54,170 --> 00:01:57,658
Hey, thanks for coming to my session on making software billing

2
00:01:57,674 --> 00:01:59,950
materials, or sboms, actionable.

3
00:02:00,850 --> 00:02:04,818
I'm Ciara Carey. I work in developer relations in cloudsmith

4
00:02:04,954 --> 00:02:09,106
cloud native artifact repository. Prior to that I worked as a software

5
00:02:09,138 --> 00:02:12,582
engineer for over ten years. But it was only since working with

6
00:02:12,636 --> 00:02:16,070
artifact repositories, because they deal with your built

7
00:02:16,140 --> 00:02:19,814
artifacts, they deal with your signing

8
00:02:19,862 --> 00:02:23,546
keys, and they integrate with public repositories. And they have

9
00:02:23,568 --> 00:02:27,482
a good idea about how artifacts are built using

10
00:02:27,536 --> 00:02:31,050
metadata that I really understood the software supply chain.

11
00:02:32,990 --> 00:02:35,770
So today let's talk about that software supply chain.

12
00:02:35,850 --> 00:02:38,762
Let's talk about the threats to your software supply chain.

13
00:02:38,906 --> 00:02:42,042
Let's talk about sboms, your software bill of materials,

14
00:02:42,106 --> 00:02:46,126
as a way to mitigate against those threats. Let's talk about the

15
00:02:46,148 --> 00:02:49,790
practicalities of an sboms, how to generate, host and analyze an

16
00:02:49,860 --> 00:02:53,726
sboms, and let's make them actionable. Let's go through a workflow

17
00:02:53,918 --> 00:02:56,790
and we'll finish off with the future of sboms.

18
00:02:59,530 --> 00:03:02,966
So your software supply chain contains all the steps that go

19
00:03:02,988 --> 00:03:06,354
into developing, deploying your software, including your source

20
00:03:06,402 --> 00:03:08,902
code, your scripts, environmental variables,

21
00:03:08,966 --> 00:03:12,454
ides plugins, your build tools

22
00:03:12,502 --> 00:03:16,810
like your CI CD, your artifact repository, your package managers,

23
00:03:18,270 --> 00:03:21,870
and a big part of it is your third party dependencies.

24
00:03:22,530 --> 00:03:26,126
They can be proprietary, but they're very likely to

25
00:03:26,148 --> 00:03:27,310
be open source.

26
00:03:29,570 --> 00:03:33,322
And here we have that lovely XKcD image which

27
00:03:33,396 --> 00:03:36,754
really highlights open source software, how important it is and

28
00:03:36,792 --> 00:03:39,380
kind of how neglected it is at the same time,

29
00:03:40,550 --> 00:03:44,546
open source is really incredibly positive. Without projects like

30
00:03:44,568 --> 00:03:47,846
Kubernetes, Debian, Nginx, Apache, I could

31
00:03:47,868 --> 00:03:51,938
go on forever. Technological innovation would be painfully slow.

32
00:03:52,034 --> 00:03:55,720
I don't think anybody wants to redo Kubernetes again.

33
00:03:56,410 --> 00:03:59,814
And that's why wherever there's software, there's open source software.

34
00:03:59,862 --> 00:04:03,686
I think a conservative estimate is that over 80% of software contains

35
00:04:03,718 --> 00:04:07,146
open source. So mess apart of

36
00:04:07,168 --> 00:04:10,462
securing your software supply chain means securing your open

37
00:04:10,516 --> 00:04:11,630
source software.

38
00:04:14,850 --> 00:04:18,490
So let's talk about these threats in open source software.

39
00:04:18,650 --> 00:04:22,426
So the different kind of attacks on open source software can

40
00:04:22,468 --> 00:04:26,878
target how you consume your open source software through these public repositories,

41
00:04:26,974 --> 00:04:30,754
like Maven Central for your Java PyPi, for your

42
00:04:30,792 --> 00:04:33,410
Python NPM registry for your node.

43
00:04:34,150 --> 00:04:37,906
And some of the targets include dependency confusion

44
00:04:37,938 --> 00:04:41,702
attacks where attackers can guess or

45
00:04:41,836 --> 00:04:44,690
gain information about your private repositories.

46
00:04:44,850 --> 00:04:48,342
Find out those package names, try to push them to public repos,

47
00:04:48,486 --> 00:04:51,130
and using the mechanism of updating,

48
00:04:51,550 --> 00:04:54,870
they hope that they'll bring in the malware,

49
00:04:54,950 --> 00:04:58,826
repo malware packages into your code base and the

50
00:04:58,848 --> 00:05:02,254
type of attack is type of squatting attacks were they hope

51
00:05:02,292 --> 00:05:05,502
that developers bill make a

52
00:05:05,556 --> 00:05:08,814
typo when they're on their dependency list,

53
00:05:08,852 --> 00:05:12,794
maybe in their requirements text file or something, and they've posted

54
00:05:12,842 --> 00:05:16,194
up a similar sounding package and they hope

55
00:05:16,232 --> 00:05:19,966
that you bring that in. They want to trick you into bringing in malware

56
00:05:19,998 --> 00:05:23,358
into your code base. But the most common source

57
00:05:23,374 --> 00:05:26,514
of attack are critical security vulnerabilities in open

58
00:05:26,552 --> 00:05:30,238
source like Logforshaw, which was a critical vulnerability

59
00:05:30,334 --> 00:05:34,274
found in December of last year in log for J, a really popular

60
00:05:34,322 --> 00:05:37,918
Java package. Another attack was harpled.

61
00:05:38,034 --> 00:05:41,638
This was from 2014 and this vulnerabilities

62
00:05:41,734 --> 00:05:44,986
was in OpenSSL and they both had

63
00:05:45,008 --> 00:05:48,538
a huge impact. So let's talk a

64
00:05:48,544 --> 00:05:51,550
little bit more about critical vulnerabilities in open source.

65
00:05:52,770 --> 00:05:56,234
In a report by Paolo Alto's incident responders

66
00:05:56,282 --> 00:06:00,430
in July of this year, they analyzed over 600 incidents

67
00:06:01,730 --> 00:06:05,502
over the past year and they found that vulnerabilities

68
00:06:05,566 --> 00:06:09,842
in software were the suspected initial access vector in 31%

69
00:06:09,896 --> 00:06:13,906
of cases, second only to phishing. And log for shell was

70
00:06:13,928 --> 00:06:17,570
the most popular open source vulnerability to be used. When you consider

71
00:06:17,640 --> 00:06:22,322
this was in July of last year. Log for Shell was only publicized

72
00:06:22,386 --> 00:06:25,702
in December prior to that, and it became like

73
00:06:25,756 --> 00:06:29,580
the number one attack vector for open source. That's crazy.

74
00:06:31,070 --> 00:06:35,466
And other research from 2020 found that in

75
00:06:35,488 --> 00:06:39,930
2020 the harp lead vulnerabilities was still exploitable

76
00:06:40,270 --> 00:06:43,642
even though a patch was released in 2014.

77
00:06:43,786 --> 00:06:46,942
That kind of shows us that these vulnerabilities in open

78
00:06:46,996 --> 00:06:50,800
source have a very long tail. Well, why is that?

79
00:06:51,650 --> 00:06:55,086
Well, sometimes you're using an open source

80
00:06:55,118 --> 00:06:58,850
package which has been abandoned, and that package,

81
00:06:59,590 --> 00:07:02,882
all those dependencies of that package use obviously

82
00:07:02,936 --> 00:07:06,982
aren't being updated. And that's how these

83
00:07:07,116 --> 00:07:10,758
unpatched open source packages get pulled into your system.

84
00:07:10,924 --> 00:07:14,386
But probably more likely patching. Maybe it isn't

85
00:07:14,498 --> 00:07:18,346
a priority for your organization. Or another very

86
00:07:18,368 --> 00:07:21,814
likely thing is that you don't realize that you're vulnerable.

87
00:07:21,942 --> 00:07:25,770
You're using a dependency of a dependency, and that dependency

88
00:07:26,350 --> 00:07:30,218
is vulnerable and you're actually still exploitable even though it's

89
00:07:30,234 --> 00:07:33,934
a few steps away. So developers need

90
00:07:34,052 --> 00:07:37,870
a tool to help them identify all the components in their software

91
00:07:38,290 --> 00:07:41,070
to keep them up to date with their vulnerabilities.

92
00:07:43,010 --> 00:07:47,730
I want to highlight a software supply chain attacks that really highlighted

93
00:07:48,630 --> 00:07:52,354
this issue to the industry. It was the solar winds attack in,

94
00:07:52,392 --> 00:07:56,582
I think it was December 2020, and it was a big attack on

95
00:07:56,716 --> 00:08:00,278
the software supply chain and it brought a

96
00:08:00,284 --> 00:08:04,630
lot of government agencies, big tech companies at risk.

97
00:08:06,890 --> 00:08:10,102
And after that solar winds attack, the Biden

98
00:08:10,166 --> 00:08:14,086
administration published an executive order to improve the cybersecurity

99
00:08:14,198 --> 00:08:17,366
of the software supply chain. And in that executive

100
00:08:17,398 --> 00:08:20,774
order, they outlined how they realized how important open

101
00:08:20,832 --> 00:08:24,426
source software was to your software supply

102
00:08:24,458 --> 00:08:28,666
chain. And instead of saying, let's pull out all that unsafe

103
00:08:28,698 --> 00:08:32,222
open source, they recognized that was going too far. That open

104
00:08:32,276 --> 00:08:36,370
source is really positive, but they wanted to have ways to make it more secure.

105
00:08:37,590 --> 00:08:41,394
And in that executive order, they mandated that organizations selling to

106
00:08:41,432 --> 00:08:45,354
the US federal government will be required to provide SBoms

107
00:08:45,422 --> 00:08:48,962
software bill of materials. They instructed the NTIA

108
00:08:49,026 --> 00:08:52,742
to come up with a minimum elements of the sboms. And since

109
00:08:52,796 --> 00:08:57,486
then, there's been the log for shell critical

110
00:08:57,538 --> 00:09:01,770
vulnerability. And after that, the White House brought in all the stakeholders,

111
00:09:02,110 --> 00:09:05,850
or many stakeholders, from open

112
00:09:05,920 --> 00:09:09,882
source and from big tech, and they came up with this

113
00:09:09,936 --> 00:09:13,374
ten point mobility plan. There was 150,000,000 that

114
00:09:13,412 --> 00:09:15,680
big tech put behind it.

115
00:09:16,610 --> 00:09:20,782
And one of the ten points was sboms everywhere. They wanted

116
00:09:20,836 --> 00:09:24,590
to improve the tooling and the training around s bombs.

117
00:09:25,510 --> 00:09:29,410
Outside the US, the EU have published a cyber resilience act

118
00:09:29,480 --> 00:09:33,118
in September. And in that was the first mention of sboms.

119
00:09:33,214 --> 00:09:36,482
It'll be a few years before that's consulted on

120
00:09:36,536 --> 00:09:38,150
and enacted.

121
00:09:39,610 --> 00:09:43,058
So I've spent all this time talking about software supply chain.

122
00:09:43,074 --> 00:09:46,914
I've even mentioned sboms, but I haven't really explained them. So your software

123
00:09:46,962 --> 00:09:50,422
bill of materials, or your SBOm lists all the components

124
00:09:50,486 --> 00:09:53,814
contained in a software product that includes

125
00:09:53,862 --> 00:09:57,610
your dependencies and the dependencies dependencies.

126
00:09:57,950 --> 00:10:01,686
Also the version number, the component name and the supplier

127
00:10:01,718 --> 00:10:05,618
name. So an sboms

128
00:10:05,734 --> 00:10:09,294
in a standard readable format is really important. This is what

129
00:10:09,332 --> 00:10:12,866
drives innovation, what drives automation, even. And you

130
00:10:12,888 --> 00:10:16,206
can use this to trigger security alerts. And luckily, the sboms,

131
00:10:16,238 --> 00:10:20,354
we have two great standards, SPDX and Cyclone DX. They're both

132
00:10:20,392 --> 00:10:24,334
great. SPDX leans more into licensing

133
00:10:24,462 --> 00:10:27,910
and Cyclone DX leans more into vulnerabilities management.

134
00:10:29,530 --> 00:10:33,174
So sboms, at their core, answers the question,

135
00:10:33,292 --> 00:10:37,394
what is in my software? And that's really powerful.

136
00:10:37,522 --> 00:10:40,954
When a new vulnerabilities comes out, you can use your sboms to

137
00:10:40,992 --> 00:10:44,742
see if you have that vulnerability

138
00:10:44,806 --> 00:10:45,980
in your code base.

139
00:10:48,990 --> 00:10:52,362
So now let's talk about the practicalities of the

140
00:10:52,416 --> 00:10:55,982
sboms. How do you generate an S bump, host it and

141
00:10:56,036 --> 00:10:57,870
analyze it for vulnerabilities?

142
00:11:00,850 --> 00:11:04,230
So let's start at generating an sboms. So there's loads

143
00:11:04,250 --> 00:11:07,182
of great open source tooling to generate an sboms.

144
00:11:07,246 --> 00:11:11,186
And let's go through the different stages of the software lifecycle that you

145
00:11:11,208 --> 00:11:13,810
can actually generate your sboms.

146
00:11:16,490 --> 00:11:20,386
So you can generate your sboms at your source

147
00:11:20,418 --> 00:11:24,242
code level, so this is really great. It's really shift lefty

148
00:11:24,306 --> 00:11:27,734
very early in the software process where you can create your

149
00:11:27,772 --> 00:11:31,466
sboms, and the problems with it though is that

150
00:11:31,488 --> 00:11:34,954
it tends to be a bit inaccurate, especially around version numbers,

151
00:11:35,072 --> 00:11:39,334
and it mightn't give you the transitive dependencies. So this is the dependencies,

152
00:11:39,382 --> 00:11:41,040
dependencies kind of information.

153
00:11:43,010 --> 00:11:46,666
Another time to generate it is that build time. Now this is the time that's

154
00:11:46,698 --> 00:11:50,174
recommended by the NTIA, and there's some

155
00:11:50,212 --> 00:11:53,826
tooling around it like cyclimds, SPDX, but there's not

156
00:11:53,848 --> 00:11:55,700
an awful lot of tooling around this.

157
00:11:59,990 --> 00:12:03,346
The different systems need to come up with new tooling for

158
00:12:03,368 --> 00:12:06,626
this. Another time to generate an SBoms

159
00:12:06,658 --> 00:12:08,760
is on the built artifact itself.

160
00:12:10,170 --> 00:12:13,894
This might be needed because you might know the

161
00:12:13,932 --> 00:12:17,686
specific source code that this legacy artifact came from. It might

162
00:12:17,708 --> 00:12:20,250
be the only time that you can generate your S bomb,

163
00:12:21,390 --> 00:12:25,574
but it tends to be a bit less accurate. Another time to generate

164
00:12:25,622 --> 00:12:29,500
your S bomb and it has really nice workflows around it, is a

165
00:12:30,190 --> 00:12:34,074
container image, so generated from a container image, and some of the lovely

166
00:12:34,122 --> 00:12:37,562
open source tooling around this includes anchor sift

167
00:12:37,706 --> 00:12:41,374
and aqueous trivia tools. They can both generate an s

168
00:12:41,412 --> 00:12:44,706
bump from a container image. And the positives around that are it

169
00:12:44,728 --> 00:12:48,420
can be really accurate, some of the negatives are

170
00:12:49,270 --> 00:12:52,846
it can be a bit slower, it's a little bit later in the software

171
00:12:52,958 --> 00:12:58,166
development lifecycle. And also if

172
00:12:58,188 --> 00:13:01,394
you build stuff outside of package

173
00:13:01,442 --> 00:13:04,806
managers, it's not as accurate. And then

174
00:13:04,828 --> 00:13:08,758
the last area I'll highlight is generating an sboms

175
00:13:08,774 --> 00:13:13,238
at runtime. For example, using this jbomb

176
00:13:13,254 --> 00:13:17,130
tool which can generate a runtime s bomb for Java projects.

177
00:13:18,190 --> 00:13:21,706
The benefit of generating it at runtime is that

178
00:13:21,808 --> 00:13:25,306
some of the other ways of you emerging sboms will list all the components

179
00:13:25,338 --> 00:13:29,114
in your software which is actually what you want. But the problem is apparently

180
00:13:29,162 --> 00:13:33,034
only like less than 10% of that is actually exploitable.

181
00:13:33,162 --> 00:13:36,386
So for security professionals, you want to know what the

182
00:13:36,408 --> 00:13:40,450
most exploitable 10% is. That's were these runtime software

183
00:13:41,430 --> 00:13:45,860
sboms generators come in, they'll tell you what software is actually running

184
00:13:47,030 --> 00:13:50,278
and even like what SaaS tools are running,

185
00:13:50,364 --> 00:13:54,182
what ports are open and closed. And that will give you a better idea of

186
00:13:54,236 --> 00:13:58,630
what is exploitable because it won't list software that's

187
00:13:58,970 --> 00:14:02,454
not running on your system. What bill

188
00:14:02,492 --> 00:14:06,186
be great is take the best bits of all

189
00:14:06,208 --> 00:14:10,002
the different stages of emerging sboms and create a mega

190
00:14:10,086 --> 00:14:13,806
sboms generator. So super accurate, but then also give you an

191
00:14:13,828 --> 00:14:17,502
idea of what's the most exploitable but

192
00:14:17,636 --> 00:14:19,040
that's not a thing yet.

193
00:14:21,250 --> 00:14:26,590
So now let's talk about how to host your sboms so

194
00:14:26,660 --> 00:14:30,078
container images can use six door tooling to host their

195
00:14:30,164 --> 00:14:33,506
sboms. Six Door is an openssF project that

196
00:14:33,528 --> 00:14:36,674
aims to make it easy for developers to sign, verify and protect

197
00:14:36,712 --> 00:14:40,654
their open source. And Sigstor's co sign projects

198
00:14:40,702 --> 00:14:44,818
allows you to sign images and attach sboms and attestations

199
00:14:44,914 --> 00:14:47,800
to container images and they can be signed as well.

200
00:14:49,390 --> 00:14:53,098
Cloudsmith we integrate with cosign, so you can

201
00:14:53,104 --> 00:14:56,554
do all that stuff using cloudsmith. The best

202
00:14:56,592 --> 00:15:00,526
way to host your non OCI artifacts so just

203
00:15:00,548 --> 00:15:04,522
your random packages. The best practice is not fully understood

204
00:15:04,586 --> 00:15:09,082
yet. You can use databases, sure you can use dependency

205
00:15:09,146 --> 00:15:12,858
tracking or tooling. You can use artifact repositories stored

206
00:15:12,874 --> 00:15:17,198
as a raw file, but the best practice around that it's not fully understood.

207
00:15:17,294 --> 00:15:21,550
I've heard some talk about piggybacking on the OCI container

208
00:15:21,630 --> 00:15:25,038
and OCI artifacts, the way they do it. I'm not sure exactly sure

209
00:15:25,064 --> 00:15:28,360
how that would happen, but let's wait and see.

210
00:15:31,930 --> 00:15:36,934
So let's talk about sboms and the

211
00:15:36,972 --> 00:15:39,770
primary use case of vulnerability management.

212
00:15:44,030 --> 00:15:47,590
So let's look into a bit of terminology or varying vulnerability

213
00:15:47,670 --> 00:15:51,146
management again. So what is a

214
00:15:51,328 --> 00:15:54,726
CVE? A CVE is common vulnerability

215
00:15:54,918 --> 00:15:58,366
explosures and it's basically an id about a

216
00:15:58,388 --> 00:16:02,714
vulnerability, so that you know that you're talking about the same thing with somebody else

217
00:16:02,852 --> 00:16:06,100
in the industry. Another thing is

218
00:16:06,630 --> 00:16:10,878
a vulnerability needs a scoring system. You need to know how exploitable,

219
00:16:10,974 --> 00:16:15,006
how dangerous is this vulnerability? And I'll

220
00:16:15,038 --> 00:16:18,338
talk about two scoring systems here. The CVSS

221
00:16:18,514 --> 00:16:21,942
is a well known one. It's the most popular one

222
00:16:21,996 --> 00:16:25,890
and has scoring system from one to ten, one being the least exploitable

223
00:16:26,050 --> 00:16:29,626
and ten being most severe. And if

224
00:16:29,648 --> 00:16:33,546
you log for shell, for example, that was given a ten out of ten in

225
00:16:33,568 --> 00:16:37,990
the CVSS score. That's because it was easily exploitable.

226
00:16:38,150 --> 00:16:42,942
It was like the remote code execution was

227
00:16:42,996 --> 00:16:46,814
the vulnerability, which is the worst thing that can happen.

228
00:16:46,932 --> 00:16:50,814
And it also was very common, so it got

229
00:16:50,852 --> 00:16:54,590
a really high score. Another scoring system is epss

230
00:16:54,750 --> 00:16:58,258
and that has some predictability in it, predictions on

231
00:16:58,344 --> 00:17:01,730
how likely it is that this vulnerabilities will be exploited.

232
00:17:03,110 --> 00:17:06,626
So you have your scoring systems, you have your id, and then

233
00:17:06,648 --> 00:17:10,246
you need like a database in order to connect them all. And the most

234
00:17:10,268 --> 00:17:13,538
popular database is the national vulnerability database.

235
00:17:13,714 --> 00:17:17,350
And that bill store all the vulnerabilities with the CV.

236
00:17:17,790 --> 00:17:21,226
But of course there's vulnerabilities outside of

237
00:17:21,248 --> 00:17:24,426
that realm. And the big ones are the

238
00:17:24,448 --> 00:17:27,946
security advisories. So different ecosystems will have their

239
00:17:27,968 --> 00:17:31,794
own security advisories like Rust has one Pipi

240
00:17:31,942 --> 00:17:35,646
GitHub and they tend to be earlier in the process.

241
00:17:35,748 --> 00:17:39,550
So before you get a CVE, it might be published to one of these security

242
00:17:39,620 --> 00:17:40,590
advisories.

243
00:17:44,290 --> 00:17:48,158
And I want to mention as well another standard connect to vulnerabilities

244
00:17:48,254 --> 00:17:51,730
management. So this is a new standard and it's a companion piece

245
00:17:51,800 --> 00:17:55,506
to the sboms. It's by the same people, the NTIA, and it's

246
00:17:55,538 --> 00:17:58,690
vulnerability exploitability exchange or VEX,

247
00:17:58,850 --> 00:18:02,806
and it

248
00:18:02,828 --> 00:18:05,490
tries to help. When were talking about false positives,

249
00:18:05,570 --> 00:18:09,478
apparently 90% of vulnerabilities are like not exploitable

250
00:18:09,574 --> 00:18:12,410
and that could be because the software has been patched.

251
00:18:12,910 --> 00:18:16,602
The compiler doesn't load the artifact affected code or

252
00:18:16,656 --> 00:18:20,490
some protections exist in your software to counteract this vulnerability.

253
00:18:20,830 --> 00:18:23,966
And so you might have a software bill of

254
00:18:23,988 --> 00:18:27,374
materials in sboms and you only really want to look

255
00:18:27,412 --> 00:18:32,286
at the top 10%. You want to be able to order by

256
00:18:32,308 --> 00:18:35,678
the worst to the least impactful.

257
00:18:35,854 --> 00:18:39,762
And VEX can be really helpful here, but it's not

258
00:18:39,816 --> 00:18:43,186
really been used in the wild yet. Although the

259
00:18:43,208 --> 00:18:46,598
standard is there, I don't think there's really good workflows around it

260
00:18:46,604 --> 00:18:50,566
yet. So it's very early stages, but it's good to keep

261
00:18:50,588 --> 00:18:51,750
it in the back burner.

262
00:18:55,530 --> 00:18:59,442
So how can an sboms help with vulnerability management?

263
00:18:59,586 --> 00:19:03,994
The primary use case of sboms is to analyze them for vulnerabilities and

264
00:19:04,032 --> 00:19:07,114
to see if any components can be an attack vector for your

265
00:19:07,152 --> 00:19:11,002
software products. Sboms are especially powerful when

266
00:19:11,056 --> 00:19:14,570
critical new vulnerabilities like logj for shell are discovered

267
00:19:14,650 --> 00:19:17,966
and organizations want to know if and where they

268
00:19:17,988 --> 00:19:21,994
are affected. And a good way to do this is continuously scanning

269
00:19:22,042 --> 00:19:25,506
your sboms is a really efficient way to check for

270
00:19:25,528 --> 00:19:27,970
new vulnerabilities in released software.

271
00:19:32,070 --> 00:19:36,146
So let's go into a few workflows and

272
00:19:36,168 --> 00:19:39,846
the workflow I'm going actually just one workflow. The workflow I'm going

273
00:19:39,868 --> 00:19:43,394
to highlight is around container images. It's the most mature

274
00:19:43,442 --> 00:19:46,626
workflow around sboms and vulnerabilities management.

275
00:19:46,738 --> 00:19:50,246
So I'm going to use some open source tooling. Sift and

276
00:19:50,268 --> 00:19:53,926
gripe. Both encore sift can be used to generate

277
00:19:54,038 --> 00:19:57,766
an sboms from a container image. Gripe can be used to analyze

278
00:19:57,798 --> 00:20:01,290
an sboms and it can also analyze container images or file systems.

279
00:20:01,370 --> 00:20:03,950
But here we're going to use it to analyze an sboms.

280
00:20:06,290 --> 00:20:10,554
I'm going to store the s bomb in my cloudsmith container registry

281
00:20:10,602 --> 00:20:14,226
using cosign tooling and then I'm going to finish off with

282
00:20:14,248 --> 00:20:17,378
an action when we find a vulnerability higher than a

283
00:20:17,384 --> 00:20:21,474
certain level. I want to quarantine my

284
00:20:21,512 --> 00:20:23,570
image, and I can do that with Cloudsmith.

285
00:20:25,290 --> 00:20:31,046
So I'm

286
00:20:31,068 --> 00:20:34,566
going to play a video now of this demo. So here we are in

287
00:20:34,588 --> 00:20:37,730
cloudsmith. This is a repository, and you

288
00:20:37,740 --> 00:20:41,286
can see that there's nothing there. Loads of different types

289
00:20:41,318 --> 00:20:46,650
of packages can go into the same repo as their multiformat.

290
00:20:48,350 --> 00:20:51,834
So let's push a docker image to our cloudsmith

291
00:20:51,882 --> 00:20:55,758
repository. It's a ruby image that

292
00:20:55,764 --> 00:20:56,670
I'm pushing.

293
00:20:59,250 --> 00:21:01,390
And if we go back to the repo,

294
00:21:03,110 --> 00:21:06,660
we should see this image being synced up there.

295
00:21:08,390 --> 00:21:12,770
And you can see docker image is just being pushed to cloudsmith.

296
00:21:14,630 --> 00:21:18,374
So that's number one. I've pushed a container image. The next thing

297
00:21:18,412 --> 00:21:22,342
I want to do is to create a

298
00:21:22,396 --> 00:21:26,134
six door key pair to

299
00:21:26,172 --> 00:21:27,910
sign the image.

300
00:21:29,470 --> 00:21:34,154
So I generate a private password for

301
00:21:34,192 --> 00:21:38,630
the private key. And now I have a cosign

302
00:21:38,790 --> 00:21:42,506
public and private key. Now I'm

303
00:21:42,538 --> 00:21:45,966
going to sign the image, and that's being

304
00:21:45,988 --> 00:21:49,450
to be pushed to my container image in a layer,

305
00:21:49,530 --> 00:21:54,002
that signature. If we go in here into

306
00:21:54,056 --> 00:21:58,050
our docker image, we can see that

307
00:21:58,200 --> 00:22:02,286
the signature has been added to a layer in that container

308
00:22:02,318 --> 00:22:05,766
image. So the next thing I

309
00:22:05,788 --> 00:22:10,134
want to do is to generate an sboms using

310
00:22:10,172 --> 00:22:12,790
the sift open source and core tooling.

311
00:22:16,700 --> 00:22:20,524
So you can see here sift docker image name

312
00:22:20,722 --> 00:22:23,100
output in SPDX.

313
00:22:27,300 --> 00:22:29,490
And we'll just wait for it here to complete.

314
00:22:35,270 --> 00:22:38,914
Loaded the image, parasing the image. And now

315
00:22:38,952 --> 00:22:42,638
this is going to be attached to a layer in that oCI

316
00:22:42,734 --> 00:22:43,570
image.

317
00:22:45,990 --> 00:22:49,590
Looks good. Let's check back in the cloudsmith registry.

318
00:23:14,800 --> 00:23:18,968
So here, let's have a look at that s bomb this SPDX

319
00:23:19,064 --> 00:23:19,900
sboms.

320
00:23:26,350 --> 00:23:29,840
There you go. This is the SPDX standard.

321
00:23:32,690 --> 00:23:35,470
And you can see it contains a debian package.

322
00:23:40,230 --> 00:23:44,114
So now let's push this sboms to our

323
00:23:44,152 --> 00:23:46,210
container image using cosign.

324
00:23:52,390 --> 00:23:54,340
And it's going to be signed as well.

325
00:23:59,530 --> 00:24:01,240
Let's go back to our.

326
00:24:03,210 --> 00:24:06,854
There we go. I put in my password. Let's go back

327
00:24:06,892 --> 00:24:08,390
to cloudsmith.

328
00:24:14,560 --> 00:24:18,108
We refresh the page. We should see the sboms in

329
00:24:18,194 --> 00:24:20,860
a layer in this container image.

330
00:24:29,600 --> 00:24:33,336
And now we can actually verify that signed image.

331
00:24:33,528 --> 00:24:35,550
So using the public key.

332
00:24:37,620 --> 00:24:41,712
And that will verify that it's been signed by

333
00:24:41,766 --> 00:24:42,370
me.

334
00:24:46,500 --> 00:24:50,508
Yeah. Signatures were verified against the specified public key.

335
00:24:50,694 --> 00:24:54,976
Cool. So let's extract that payload

336
00:24:55,088 --> 00:24:57,220
from the container image.

337
00:24:59,720 --> 00:25:01,430
And here we use this.

338
00:25:04,200 --> 00:25:06,920
We extract it out there using jquery.

339
00:25:10,940 --> 00:25:14,948
And now we have extracted the signed sboms

340
00:25:15,044 --> 00:25:19,020
from our container image. And now let's generate all the vulnerabilities using

341
00:25:19,090 --> 00:25:20,940
open source tooling. Gripe.

342
00:25:23,040 --> 00:25:26,936
Brilliant. So we've created a vulnerability

343
00:25:27,048 --> 00:25:30,352
JSON file, and we can actually also

344
00:25:30,406 --> 00:25:33,936
push that to our container image in another layer as well.

345
00:25:34,038 --> 00:25:36,640
We can find that as well as an attestation.

346
00:25:40,580 --> 00:25:44,544
So the next thing we want to do in our workflow is to actually quarantine

347
00:25:44,592 --> 00:25:47,590
that image. If there's a vulnerability above a certain level.

348
00:25:49,400 --> 00:25:53,184
And you can see here we are checking

349
00:25:53,232 --> 00:25:56,792
to see if

350
00:25:56,846 --> 00:26:00,052
gripe fails, then we're going to fail and we're going to quarantine

351
00:26:00,116 --> 00:26:01,080
that image.

352
00:26:04,730 --> 00:26:06,760
Were just getting the slug there.

353
00:26:16,830 --> 00:26:20,730
And we're going to quarantine that image programmatically.

354
00:26:21,070 --> 00:26:23,020
Cloudsmith quarantine add.

355
00:26:25,170 --> 00:26:28,606
And that's using the cloudsmith Cli. And so that

356
00:26:28,628 --> 00:26:32,234
means I can't deploy that image to infrastructure

357
00:26:32,282 --> 00:26:36,210
or download it. So there I've showed you a workflow of

358
00:26:36,280 --> 00:26:39,870
how to push an image to cloudsmith.

359
00:26:40,030 --> 00:26:44,162
Generate the s bomb using open source tooling, push that

360
00:26:44,216 --> 00:26:47,542
s bomb and host it on cloudsmith's container registry using

361
00:26:47,596 --> 00:26:51,590
cosign. Grab that sboms extract,

362
00:26:54,170 --> 00:26:57,574
get the sboms payload from

363
00:26:57,612 --> 00:27:01,078
it, check if there's vulnerabilities using gripe open source tooling.

364
00:27:01,174 --> 00:27:04,538
And if the vulnerabilities are above a certain level, I want you to

365
00:27:04,544 --> 00:27:08,460
do something actionable. And were the actionable thing that we've done

366
00:27:09,310 --> 00:27:12,766
is to quarantine the

367
00:27:12,788 --> 00:27:13,550
image.

368
00:27:25,430 --> 00:27:27,780
So now let's talk about future work.

369
00:27:29,110 --> 00:27:33,060
So sboms tooling allows you to,

370
00:27:33,750 --> 00:27:37,046
when a new vulnerabilities comes on board, that you

371
00:27:37,068 --> 00:27:40,178
can use your sboms to find out if you're

372
00:27:40,194 --> 00:27:44,466
vulnerable, if your co base is vulnerable. And it's

373
00:27:44,498 --> 00:27:48,162
great to have workflows around sboms,

374
00:27:48,226 --> 00:27:52,954
but really, that's where a lot of the future work needs to

375
00:27:52,992 --> 00:27:56,678
concentrate on more tooling, better workflows,

376
00:27:56,774 --> 00:28:01,662
so that you can practically bring this into your CI CD and

377
00:28:01,716 --> 00:28:05,774
to use it as a developer, as a

378
00:28:05,972 --> 00:28:10,030
security person, in the development team, as a vendor,

379
00:28:10,370 --> 00:28:12,510
and as an end user.

380
00:28:14,690 --> 00:28:18,542
But you can generate your sboms now using tooling. And I

381
00:28:18,596 --> 00:28:22,206
expect that this tooling is only going to get better. These workflows are only

382
00:28:22,228 --> 00:28:25,006
going to get better. So yeah,

383
00:28:25,108 --> 00:28:29,458
generate your sboms of try to make vulnerabilities

384
00:28:29,554 --> 00:28:33,746
management in open source security software a little bit easier

385
00:28:33,938 --> 00:28:36,726
and yeah, do that. Okay.

386
00:28:36,828 --> 00:28:39,654
Thanks for listening to my session. Talk to you.

