1
00:00:34,930 --> 00:00:38,438
Hello everyone and welcome to my talk where I want to discuss

2
00:00:38,524 --> 00:00:42,594
one three options to have data consistency in a distributed

3
00:00:42,642 --> 00:00:46,114
system and this is an introduction to saga pattern

4
00:00:46,242 --> 00:00:49,622
for distributed transactions. First,

5
00:00:49,676 --> 00:00:53,294
let's recall what is a database transaction and why it is

6
00:00:53,332 --> 00:00:56,874
important. So it is a series of operations

7
00:00:57,002 --> 00:01:00,830
performed as a single unit of work and

8
00:01:00,980 --> 00:01:03,646
it can include business logic checks.

9
00:01:03,838 --> 00:01:07,970
On success will commit all operations to the database,

10
00:01:08,310 --> 00:01:11,710
and on fail it will roll back any completed operations,

11
00:01:11,790 --> 00:01:13,490
keeping data consistent.

12
00:01:14,970 --> 00:01:19,240
This is usually referred as can acid acronym to translate the

13
00:01:19,690 --> 00:01:23,750
requirements for transaction and transactions within

14
00:01:23,820 --> 00:01:27,898
a single service are acid usually, but cross service

15
00:01:27,984 --> 00:01:32,502
data consistency requires a cross service transaction management

16
00:01:32,566 --> 00:01:37,082
strategy. So what is asset first?

17
00:01:37,136 --> 00:01:40,254
Transactions must be atomic, so all

18
00:01:40,292 --> 00:01:44,186
changes to data are performed as if they are a single operation.

19
00:01:44,378 --> 00:01:48,080
That is, all the changes are performed or none of them are.

20
00:01:50,290 --> 00:01:54,098
It's consistent. So data is in a consistent state

21
00:01:54,184 --> 00:01:59,038
when transaction starts and when it ends isolated,

22
00:01:59,214 --> 00:02:02,914
the intermediate state of the transaction is invisible to

23
00:02:02,952 --> 00:02:05,262
other transaction. As a result,

24
00:02:05,416 --> 00:02:09,350
transactions that run currently appear to be serialized

25
00:02:10,490 --> 00:02:14,642
and durable. After transaction successfully completes,

26
00:02:14,786 --> 00:02:18,422
changes to data persist and are not undone

27
00:02:18,566 --> 00:02:21,450
even in the event of a system failure.

28
00:02:23,310 --> 00:02:26,982
So yeah, some information about myself. I'm a software

29
00:02:27,046 --> 00:02:31,382
engineer with eight plus years of experience. I write articles

30
00:02:31,526 --> 00:02:34,570
about exciting back end technologies on medium.

31
00:02:34,730 --> 00:02:38,814
I'm a certified node JS engineer. I also very well

32
00:02:38,852 --> 00:02:42,590
versed in PHP development and DevOps.

33
00:02:45,350 --> 00:02:49,154
Okay, so let's go in a monolithic application

34
00:02:49,272 --> 00:02:53,614
example, when we have a single database, we can write our transaction

35
00:02:53,662 --> 00:02:57,510
with the help of the database tooling that is provided.

36
00:02:57,850 --> 00:03:01,014
And that is all. Modern databases will have

37
00:03:01,052 --> 00:03:05,270
a mechanism to commit and roll back transactions automatically.

38
00:03:05,770 --> 00:03:09,260
So let's review a stock trading application example here,

39
00:03:10,270 --> 00:03:14,006
the front end application on the left will route user request

40
00:03:14,038 --> 00:03:18,890
to our backend service, which is a monolith and

41
00:03:18,960 --> 00:03:22,138
order service will process the request and coordinate

42
00:03:22,154 --> 00:03:26,154
calls to two other different services which are fiat

43
00:03:26,202 --> 00:03:28,720
currency service and stock service.

44
00:03:29,970 --> 00:03:33,526
Fiat service will check if user who is purchasing

45
00:03:33,578 --> 00:03:37,362
a stock has enough balance and the stock service will check

46
00:03:37,416 --> 00:03:40,610
if user who is selling his stock has enough stocks.

47
00:03:40,950 --> 00:03:45,314
And if everything is good, our applications will do.

48
00:03:45,512 --> 00:03:49,046
Or rather, services within one single application will do four

49
00:03:49,068 --> 00:03:53,430
records to the database as a single transaction

50
00:03:54,810 --> 00:03:58,854
and order service will be notified of success and

51
00:03:58,892 --> 00:04:02,886
will call a dependent audit service that will log four audit

52
00:04:02,918 --> 00:04:06,730
trackers to database, one per each performed operation.

53
00:04:09,070 --> 00:04:12,622
Now let's imagine we had a race condition and one of our

54
00:04:12,676 --> 00:04:16,174
customers had not enough funds at the time

55
00:04:16,212 --> 00:04:19,886
when the transaction has started. So this

56
00:04:19,908 --> 00:04:23,506
is very simple to do with a monolithic application because rollback is

57
00:04:23,528 --> 00:04:26,210
handled for us by database.

58
00:04:28,710 --> 00:04:32,546
And in case of an error, our application

59
00:04:32,648 --> 00:04:36,840
can usually just throw an exception and the transaction will be rolled back.

60
00:04:37,930 --> 00:04:41,222
Funds or stock, in this example,

61
00:04:41,356 --> 00:04:45,826
were not transferred and audit

62
00:04:45,858 --> 00:04:49,194
logs were not created. So it's all good and

63
00:04:49,232 --> 00:04:51,610
our database is consistent.

64
00:04:53,790 --> 00:04:57,274
Let's now review this application. But when

65
00:04:57,312 --> 00:05:01,210
it is split into microservices for each of the steps.

66
00:05:01,870 --> 00:05:05,406
First, the order service receives requests from

67
00:05:05,428 --> 00:05:08,430
the customer to purchase some stocks.

68
00:05:10,130 --> 00:05:13,682
Order service will call both fiat currency and stock service.

69
00:05:13,736 --> 00:05:17,090
To request operations with users balances.

70
00:05:17,430 --> 00:05:21,442
After everything went good, order service will ask audit service

71
00:05:21,496 --> 00:05:25,178
to create corresponding audit logs. And the happy path

72
00:05:25,214 --> 00:05:28,466
here looks good, but this design is flawed.

73
00:05:28,498 --> 00:05:31,458
Because if any of the step will fail,

74
00:05:31,634 --> 00:05:35,506
we don't have a way to bring our system back to the consistent

75
00:05:35,538 --> 00:05:38,746
state. And let's review an

76
00:05:38,768 --> 00:05:43,146
example. In this case, our order service was

77
00:05:43,168 --> 00:05:46,662
not unable to connect to the currency

78
00:05:46,726 --> 00:05:49,050
service and confirm the operation.

79
00:05:49,950 --> 00:05:54,190
But the stock service operation executed as usual.

80
00:05:54,690 --> 00:05:58,400
And we have written stock logs to the audit service.

81
00:05:59,090 --> 00:06:02,590
And we actually did transfer stocks from user to user.

82
00:06:03,750 --> 00:06:07,278
But the currency balance has never changed for both users.

83
00:06:07,454 --> 00:06:09,460
So, yeah, we have a problem here.

84
00:06:13,110 --> 00:06:16,902
So, the saga design pattern. It is a way to manage data

85
00:06:16,956 --> 00:06:20,642
consistency across microservices in a distributed transactions

86
00:06:20,706 --> 00:06:24,294
scenarios. And Sega is a sequence of

87
00:06:24,332 --> 00:06:27,490
transactions. That updates each service.

88
00:06:27,580 --> 00:06:30,922
And publishes a message or event to trigger the next

89
00:06:30,976 --> 00:06:34,566
transaction step. If the step fails, the saga

90
00:06:34,598 --> 00:06:38,342
executes compensating transactions. That counteract

91
00:06:38,406 --> 00:06:41,678
the preceding transactions. Let's review an example.

92
00:06:41,764 --> 00:06:45,550
Now, our services are performing actions within a saga pattern.

93
00:06:45,970 --> 00:06:49,498
So first order service pings currency and stock

94
00:06:49,674 --> 00:06:53,230
services. To make transactions for both accounts.

95
00:06:55,110 --> 00:06:58,850
Currency service passes all business logic checks

96
00:06:59,510 --> 00:07:03,234
and creates a transfer record. Then it sends a message over

97
00:07:03,272 --> 00:07:07,206
to Audi service to log this transaction. But the

98
00:07:07,228 --> 00:07:10,530
stock service had an issue and rejected the transfer request.

99
00:07:10,690 --> 00:07:14,050
And after this, the rollback

100
00:07:14,130 --> 00:07:18,150
sequence is initiated with a series of compensating transactions.

101
00:07:18,670 --> 00:07:22,038
So, audit service will mark previous

102
00:07:22,134 --> 00:07:26,106
logs as rejected. And communicate an event to

103
00:07:26,128 --> 00:07:29,740
the currency service. And after that,

104
00:07:30,610 --> 00:07:34,554
currency service creates a compensating transfer between accounts.

105
00:07:34,602 --> 00:07:38,234
And finally notifies the order service. That transaction

106
00:07:38,362 --> 00:07:42,442
was fully rolled back. And there are two

107
00:07:42,516 --> 00:07:46,722
approaches to designing saga transactions. One is

108
00:07:46,776 --> 00:07:49,490
choreography, and the second is orchestration.

109
00:07:51,590 --> 00:07:55,242
So, choreography here on the left is a way to coordinate sagas.

110
00:07:55,326 --> 00:07:59,570
Where participants exchange events without a centralized

111
00:07:59,650 --> 00:08:03,202
point of control. So, with the choreography,

112
00:08:03,266 --> 00:08:06,614
each local transaction publishes events that

113
00:08:06,652 --> 00:08:09,820
trigger local transactions in other services.

114
00:08:11,470 --> 00:08:14,998
Orchestration is a way to coordinate sagas.

115
00:08:15,094 --> 00:08:18,950
Where a centralized controller tells the saga participants.

116
00:08:19,030 --> 00:08:22,346
What local transactions to execute. So the

117
00:08:22,368 --> 00:08:25,994
saga orchestrator handles all the transactions and tells the participants

118
00:08:26,042 --> 00:08:28,830
which operation to perform based on the events.

119
00:08:29,410 --> 00:08:33,570
The orchestrator executes saga request stores and approach the states

120
00:08:33,640 --> 00:08:37,790
of each task and handles failure recovery with compensating

121
00:08:37,870 --> 00:08:41,534
transactions and selecting

122
00:08:41,582 --> 00:08:45,494
can approach will depend on your use case because both

123
00:08:45,532 --> 00:08:47,640
of them have their pros and cons.

124
00:08:50,010 --> 00:08:53,586
So yeah, let's first discover the benefits of choreography

125
00:08:53,618 --> 00:08:57,286
saga pattern. And they

126
00:08:57,308 --> 00:09:00,870
are good for simple workflows that require few participants

127
00:09:00,950 --> 00:09:03,370
and don't need a coordination logic,

128
00:09:05,230 --> 00:09:09,610
doesn't require additional service implementation and maintenance,

129
00:09:09,970 --> 00:09:13,230
and doesn't introduce a single point of failure

130
00:09:13,650 --> 00:09:17,770
since the responsibilities are distributed across all the saga

131
00:09:17,850 --> 00:09:18,910
participants.

132
00:09:21,170 --> 00:09:24,754
Yeah, there are drawbacks for choreography saga pattern, and that

133
00:09:24,792 --> 00:09:28,706
is workflow can become confusing when

134
00:09:28,888 --> 00:09:32,654
adding new steps as it's difficult to track which saga

135
00:09:32,702 --> 00:09:35,830
participant listens to which commands.

136
00:09:36,730 --> 00:09:41,250
There is a risk of cyclic dependencies between saga participants

137
00:09:41,330 --> 00:09:44,310
because they have to consume each hour's commands.

138
00:09:45,130 --> 00:09:48,938
And integration testing can be difficult because

139
00:09:49,024 --> 00:09:52,810
all services must be running to simulate a transaction.

140
00:09:55,710 --> 00:09:59,594
Now, let's review the orchestration pattern and

141
00:09:59,632 --> 00:10:03,354
its benefits. So it's really good for complex

142
00:10:03,402 --> 00:10:07,242
workflows involving many participants or new participants

143
00:10:07,306 --> 00:10:11,706
added over time. It doesn't introduce cyclical

144
00:10:11,738 --> 00:10:16,530
dependencies because orchestrator depends

145
00:10:17,590 --> 00:10:19,330
on the saga participants.

146
00:10:21,270 --> 00:10:24,386
Saga participants don't need to know about commands for

147
00:10:24,408 --> 00:10:28,022
other participants. So there is a clear separation of

148
00:10:28,076 --> 00:10:32,310
concerns and it simplifies business logic.

149
00:10:34,570 --> 00:10:40,266
And yeah, it's suitable when

150
00:10:40,288 --> 00:10:43,642
there is control over every participant in the process and

151
00:10:43,696 --> 00:10:46,410
control over the flow of activities.

152
00:10:48,750 --> 00:10:52,362
And drawbacks are that additional

153
00:10:52,426 --> 00:10:56,106
design complexity requires an implementation of coordination

154
00:10:56,138 --> 00:10:59,214
logic. And there is an additional point of

155
00:10:59,252 --> 00:11:02,650
failure because the orchestrator manages the complete

156
00:11:02,740 --> 00:11:03,650
workflow.

157
00:11:06,790 --> 00:11:10,334
So with the new knowledge, let's refactor our scenario

158
00:11:10,382 --> 00:11:14,610
to use saga pattern with the choreography first approach.

159
00:11:15,050 --> 00:11:18,514
I want to start with how it looks like for happy path

160
00:11:18,562 --> 00:11:21,746
scenario. So our customer requests a new trade

161
00:11:21,778 --> 00:11:25,560
with the order service. In return,

162
00:11:26,490 --> 00:11:30,006
it creates an event called order create and pushes

163
00:11:30,038 --> 00:11:33,862
it to a shared message broker. We have two listeners

164
00:11:33,926 --> 00:11:38,060
for order create event assigned, and they start processing it

165
00:11:39,150 --> 00:11:43,258
when everything is good, all microservices

166
00:11:43,354 --> 00:11:47,434
and they process the operation. They do their corresponding

167
00:11:47,482 --> 00:11:51,054
transactions, and each of the service create an event of its own.

168
00:11:51,092 --> 00:11:55,022
For example, currency transferred and stocks transferred events

169
00:11:55,086 --> 00:11:57,410
and send them to message broker.

170
00:11:59,190 --> 00:12:03,006
Next, we have audit service listening through all the events,

171
00:12:03,038 --> 00:12:05,490
and it creates audit records.

172
00:12:06,630 --> 00:12:10,150
Once everything is done, audit service creates an order complete event.

173
00:12:10,220 --> 00:12:13,798
And finally, this goes to order service telling that everything

174
00:12:13,884 --> 00:12:14,840
went okay.

175
00:12:18,110 --> 00:12:21,894
Let's review a possible failure scenario and how our saga pattern

176
00:12:21,942 --> 00:12:25,340
can roll back across this distributed application.

177
00:12:28,590 --> 00:12:32,090
So order service receives a request for a trade

178
00:12:32,170 --> 00:12:36,494
from a customer and forwards it as usual to currency and

179
00:12:36,532 --> 00:12:37,520
stock services.

180
00:12:39,490 --> 00:12:43,406
Currency service responds fine. Yeah,

181
00:12:43,428 --> 00:12:46,766
it records two transactions and emits a currency transferred

182
00:12:46,798 --> 00:12:50,114
event, which in turn is picked up by

183
00:12:50,152 --> 00:12:53,250
the audit service and audit logs are created.

184
00:12:53,990 --> 00:12:57,362
Meanwhile, the stock service has experienced a voa

185
00:12:57,426 --> 00:13:01,090
in processing and only after some time it responded

186
00:13:01,250 --> 00:13:05,190
that there is not enough stock to trade on one of the accounts.

187
00:13:05,770 --> 00:13:09,980
So stock service will emit an order cancel event.

188
00:13:11,390 --> 00:13:15,226
But we already completed our transaction partially, so we

189
00:13:15,248 --> 00:13:19,034
will have to react to this event and roll back all the changes by

190
00:13:19,072 --> 00:13:23,022
running the compensated transactions only

191
00:13:23,076 --> 00:13:26,400
in the currency service and in our order service.

192
00:13:29,410 --> 00:13:33,830
After that, the order service is notified as well Olaysha

193
00:13:33,850 --> 00:13:37,106
and can respond promptly to customers that the trade did

194
00:13:37,128 --> 00:13:40,786
not happen. So this

195
00:13:40,808 --> 00:13:44,046
is how choreography pattern events map

196
00:13:44,078 --> 00:13:46,790
will look like for our simple implementation.

197
00:13:48,250 --> 00:13:52,294
As you can see, it's only four services, but it's already a complex enough

198
00:13:52,332 --> 00:13:54,840
task to document all of this.

199
00:13:55,610 --> 00:13:59,862
So in the next step, let's review how we can apply the orchestration

200
00:13:59,926 --> 00:14:01,580
pattern to the same application.

201
00:14:04,510 --> 00:14:08,602
Okay, now let's review orchestration saga pattern applied and

202
00:14:08,736 --> 00:14:11,150
we will start with the happy path.

203
00:14:11,810 --> 00:14:15,566
So, communication between services will most likely be with the

204
00:14:15,588 --> 00:14:18,926
help of a message broker again, but all the decisions will

205
00:14:18,948 --> 00:14:21,360
be made in our orchestrator service.

206
00:14:23,750 --> 00:14:26,978
So the order service first emit an order create event.

207
00:14:27,064 --> 00:14:30,750
Orchestrator then notifies currency and stock

208
00:14:30,830 --> 00:14:34,210
services that are required to perform transfer operations.

209
00:14:34,970 --> 00:14:38,706
Once complete, both services report back to orchestrator

210
00:14:38,738 --> 00:14:42,866
that everything is okay and orchestrator sends

211
00:14:42,898 --> 00:14:47,262
an event to audit service for stocks

212
00:14:47,426 --> 00:14:51,178
audit records, and then for currency audit records. And once

213
00:14:51,264 --> 00:14:54,970
everything is reported to ZoC, orchestrator will notify order service,

214
00:14:55,040 --> 00:14:59,242
the transaction is complete and

215
00:14:59,296 --> 00:15:04,366
for an error scenario, let's review this example again.

216
00:15:04,548 --> 00:15:08,640
Order service will emit an order create event.

217
00:15:09,010 --> 00:15:12,714
Orchestrator then notifies both of our currency

218
00:15:12,762 --> 00:15:16,450
and stock services to perform transfer operations

219
00:15:16,870 --> 00:15:20,866
and once complete, both services report back to

220
00:15:20,888 --> 00:15:24,258
orchestrator. The terrafin is okay. Again,

221
00:15:24,344 --> 00:15:28,680
orchestrator sends this to audit service,

222
00:15:29,850 --> 00:15:33,302
but for example, at this time, both transactions do not

223
00:15:33,356 --> 00:15:38,150
pass an audit control and an error response is sent to orchestrator.

224
00:15:39,150 --> 00:15:42,922
Orchestrator will initiate order cancel event for

225
00:15:42,976 --> 00:15:46,154
all operations that already happened and will

226
00:15:46,192 --> 00:15:49,702
wait for confirmation. And finally, it will notify

227
00:15:49,766 --> 00:15:52,830
order service that transaction is cancelled.

228
00:15:56,450 --> 00:16:00,602
So yeah, some things to care about when implementing

229
00:16:00,666 --> 00:16:04,178
saga pattern. So it may initially be a

230
00:16:04,184 --> 00:16:07,474
challenging task as it requires a new way of thinking on

231
00:16:07,512 --> 00:16:11,490
how to coordinate a transaction and maintain data consistency.

232
00:16:12,230 --> 00:16:15,954
The saga pattern is particularly hard to debug and the complexity

233
00:16:16,002 --> 00:16:18,470
grows as participants increase.

234
00:16:19,930 --> 00:16:23,762
Your implementation must be handling a set of potential

235
00:16:23,826 --> 00:16:27,350
transient failures and provide impotence

236
00:16:28,250 --> 00:16:32,070
for reducing side effects and ensuring data consistency.

237
00:16:33,450 --> 00:16:37,462
And it's best to implement observability to monitor and track

238
00:16:37,516 --> 00:16:39,480
the saga workflow right away.

239
00:16:41,490 --> 00:16:45,050
Thank you for watching and good luck with software engineering.

