1
00:00:17,610 --> 00:00:21,502
Good. Everybody, welcome to Conf

2
00:00:21,556 --> 00:00:25,538
42 conference. I am Ahmed Bankole and I'm

3
00:00:25,554 --> 00:00:29,222
going to be talking about building awesome UI applications with

4
00:00:29,276 --> 00:00:32,982
viewjs. Before I continue this talk, I'd like

5
00:00:33,036 --> 00:00:36,914
to explain what this talk is about, what you aim

6
00:00:36,962 --> 00:00:40,554
to get after this, and what you're going

7
00:00:40,592 --> 00:00:42,540
to learn from it.

8
00:00:43,630 --> 00:00:48,218
So I'm using that you might be new

9
00:00:48,304 --> 00:00:52,038
or new to view JS, or you might

10
00:00:52,064 --> 00:00:56,110
just be trying it out for the first time, or you have been using it

11
00:00:56,180 --> 00:01:00,106
for a very long time and you still haven't

12
00:01:00,138 --> 00:01:03,810
gotten the angle v so I'm going to put all that into

13
00:01:03,880 --> 00:01:07,620
just one talk. So it's going to be more of a

14
00:01:08,150 --> 00:01:11,918
talk session rather than a technical workshop

15
00:01:12,014 --> 00:01:15,582
or a practical session.

16
00:01:15,646 --> 00:01:19,318
I mean, so I would like to introduce myself, I would

17
00:01:19,324 --> 00:01:22,546
like to keep it short. I am Ahmed Bankole, I'm a software engineer

18
00:01:22,578 --> 00:01:26,210
from Lagos, Nigeria, and I work at ambiantic

19
00:01:26,290 --> 00:01:29,706
AI where we provide remote care services for

20
00:01:29,728 --> 00:01:34,598
the elderly. So we are just kind of artificial

21
00:01:34,694 --> 00:01:39,162
intelligence company where we provide services

22
00:01:39,296 --> 00:01:42,270
that could help elderly remotely.

23
00:01:42,930 --> 00:01:46,254
That's just about me. And also don't forget to follow me on Twitter at

24
00:01:46,292 --> 00:01:50,080
geeky aimed now let's get to the talk.

25
00:01:50,930 --> 00:01:54,274
View JS, pronounced View Live

26
00:01:54,312 --> 00:01:58,302
View is a popular JavaScript framework for building modern and interactive

27
00:01:58,366 --> 00:02:01,806
web interface. It was developed by Evenew.

28
00:02:01,998 --> 00:02:05,714
Basically Vue is just a framework for building modern and

29
00:02:05,752 --> 00:02:08,754
interactive web interfaces just like any other framework.

30
00:02:08,882 --> 00:02:12,438
But if you take a look at Vue, you'll find that

31
00:02:12,604 --> 00:02:16,582
view provides us the ability not just to write

32
00:02:16,636 --> 00:02:20,634
less JavaScript code, but also the ability to

33
00:02:20,672 --> 00:02:23,820
write less Javascript code and do more,

34
00:02:24,270 --> 00:02:27,862
including design. It also focus on designing

35
00:02:27,926 --> 00:02:31,694
aspect but has a front end developers and the

36
00:02:31,732 --> 00:02:35,422
new trends coming up on design, then you might need to shift from

37
00:02:35,476 --> 00:02:38,810
that doing JavaScript

38
00:02:38,890 --> 00:02:41,950
Dom to doing more of UI,

39
00:02:42,370 --> 00:02:45,746
which is going to UI and UX which is going to be one

40
00:02:45,768 --> 00:02:49,330
of the parts of your job as a frontend developer.

41
00:02:49,910 --> 00:02:53,170
And as you can see, VJs provides reactive data

42
00:02:53,240 --> 00:02:56,774
binding and composable view components with

43
00:02:56,812 --> 00:03:00,118
an API that's easy to understand. So not only you

44
00:03:00,124 --> 00:03:03,782
are writing less codes and doing more, it means

45
00:03:03,836 --> 00:03:07,110
that it actually provides our reactive data

46
00:03:07,180 --> 00:03:10,860
binding. So when we talk of data binding, we're actually talking about

47
00:03:11,230 --> 00:03:15,146
your ability to be able to get data from a

48
00:03:15,168 --> 00:03:18,810
particular element and attach it to the DOM very

49
00:03:18,880 --> 00:03:22,266
easy. So what VJS does is allows

50
00:03:22,298 --> 00:03:26,622
you to be able to build this data from one part of your application to

51
00:03:26,676 --> 00:03:30,394
the DOM, which is the regular HTML with ease,

52
00:03:30,442 --> 00:03:34,190
without having to write a bunch of JavaScript code that

53
00:03:34,260 --> 00:03:36,900
are going to be doing that for you.

54
00:03:37,510 --> 00:03:40,766
One of the things also provides a composable view component,

55
00:03:40,878 --> 00:03:44,354
which means you can be able to interact with these components and

56
00:03:44,392 --> 00:03:48,102
use them all over your application with ease without having

57
00:03:48,156 --> 00:03:51,734
to stress yourself trying to configure it from one place,

58
00:03:51,852 --> 00:03:55,318
one part of UI applications to the other. And finally,

59
00:03:55,404 --> 00:03:59,000
it's easy and understandable, but I'll get to you.

60
00:03:59,390 --> 00:04:03,302
A lot of you might be asking why view JS over react

61
00:04:03,366 --> 00:04:07,926
or angular. I'm not trying to compare Vue with frameworks

62
00:04:07,958 --> 00:04:11,502
like angular or react, I'm just trying to tell you

63
00:04:11,556 --> 00:04:15,582
why they should choose view JS because of one it is

64
00:04:15,636 --> 00:04:18,110
easy to use as a framework.

65
00:04:19,650 --> 00:04:23,330
The first and foremost thing to look out for is

66
00:04:23,480 --> 00:04:27,522
the ability for developers to use the framework to build

67
00:04:27,576 --> 00:04:31,780
project. So if I can be able to use a framework to build project,

68
00:04:33,990 --> 00:04:37,970
I'd rather learn another framework to help me achieve the same purpose.

69
00:04:38,130 --> 00:04:41,446
So view JS provides that ability to be

70
00:04:41,548 --> 00:04:44,774
able to use it in such a way that

71
00:04:44,812 --> 00:04:48,550
is very productive for both you and the company

72
00:04:48,620 --> 00:04:52,490
you work for or what you do. Also, it has great

73
00:04:52,640 --> 00:04:55,626
runtime speed. I'm going to be talking about that later,

74
00:04:55,808 --> 00:04:59,206
but I'll just give maybe a short overview

75
00:04:59,238 --> 00:05:02,874
of it and then it is lean and small when

76
00:05:02,912 --> 00:05:07,534
we're talking of lean and small, we actually reference view JS in

77
00:05:07,572 --> 00:05:11,466
a file, in a single file, which is the view JS file.

78
00:05:11,658 --> 00:05:15,230
So if you're downloading the zip file on GitHub,

79
00:05:15,390 --> 00:05:18,722
we're actually seeing that the file is less

80
00:05:18,776 --> 00:05:21,780
than 16 kb. Basically,

81
00:05:22,150 --> 00:05:25,922
16 kb is for a single view Js

82
00:05:25,986 --> 00:05:29,106
file which is the entire framework cooped

83
00:05:29,138 --> 00:05:32,770
up in one particular file, which is 16

84
00:05:32,850 --> 00:05:35,974
kb kilobytes, which means that

85
00:05:36,012 --> 00:05:39,274
it's very small. It's a very small package that allows you to do

86
00:05:39,312 --> 00:05:43,050
more. So you don't have to worry about large file size,

87
00:05:43,120 --> 00:05:47,046
like including a framework with ten megabytes

88
00:05:47,158 --> 00:05:50,794
on your project which is going to consume space. You just

89
00:05:50,832 --> 00:05:54,550
have to worry about just imputing it

90
00:05:54,640 --> 00:05:58,510
into your project, either through can or

91
00:05:58,580 --> 00:06:02,454
using the file locally in your pc

92
00:06:02,522 --> 00:06:05,730
or computer. It also has a lot of cool features.

93
00:06:06,310 --> 00:06:09,966
I'm going to explain. When we mean cool features,

94
00:06:09,998 --> 00:06:12,770
we actually mean components,

95
00:06:13,110 --> 00:06:18,370
styling, data, building props

96
00:06:19,910 --> 00:06:23,926
states, state management containers, other kind

97
00:06:23,948 --> 00:06:27,398
of cool features that normal framework are supposed

98
00:06:27,484 --> 00:06:31,274
to have. So these are the kind of things that define a framework and

99
00:06:31,392 --> 00:06:35,242
part of the reason why you should choose View jet if you are coming

100
00:06:35,296 --> 00:06:38,570
up into frontend developer in 2020

101
00:06:38,720 --> 00:06:41,614
or probably in the next few years. Also,

102
00:06:41,652 --> 00:06:45,534
it provides a minimal project structure when we talk about

103
00:06:45,572 --> 00:06:49,374
minimal project structure. We're actually talking of the way your UI applications

104
00:06:49,412 --> 00:06:52,826
structured using the view CLI. So let's

105
00:06:52,858 --> 00:06:56,180
say you're not working on a small project using

106
00:06:56,550 --> 00:07:00,290
the JS file. Rather you're working on an enterprise project,

107
00:07:00,360 --> 00:07:03,698
a large project, a complex project that needs to

108
00:07:03,864 --> 00:07:07,518
make use of the view CLI. Just like you have the react CLI,

109
00:07:07,614 --> 00:07:11,026
you have the angular CLI. View also has its own CLI,

110
00:07:11,138 --> 00:07:14,518
and one of the most common things that you might notice in

111
00:07:14,524 --> 00:07:17,906
the View CLI is because of it has a minimal

112
00:07:17,938 --> 00:07:21,606
project structure. And this minimal project structure means that you don't

113
00:07:21,638 --> 00:07:25,222
have lots of directory and folders. It's actually straightforward

114
00:07:25,366 --> 00:07:29,414
if you just a regular project structure should have the source

115
00:07:29,462 --> 00:07:33,374
folder, and inside this source folder you are going to see the

116
00:07:33,412 --> 00:07:36,990
component. When you see the component, you see the assets

117
00:07:37,650 --> 00:07:41,226
and that's pretty much about it. Those are the things that contains

118
00:07:41,258 --> 00:07:45,102
the part of your applications that needs to be run and the

119
00:07:45,156 --> 00:07:48,926
files are saved at those view, which means it provides

120
00:07:48,958 --> 00:07:52,526
its own extension so that I can be able to differentiate between HTML

121
00:07:52,638 --> 00:07:57,666
and view. So you don't have to worry about writing mono

122
00:07:57,778 --> 00:08:01,430
entire syntax just like you write Jxx. So instead

123
00:08:01,500 --> 00:08:06,022
of writing the JxX in react, you could write in view.

124
00:08:06,156 --> 00:08:10,054
And basically this view, you are just writing plain old HTML.

125
00:08:10,182 --> 00:08:13,900
And then you could write some scripts which are related to view.

126
00:08:14,830 --> 00:08:18,314
It's not much and then it's easy to

127
00:08:18,352 --> 00:08:21,866
configure. I don't

128
00:08:21,888 --> 00:08:25,146
think it's actually hard to configure just by installing

129
00:08:25,178 --> 00:08:28,462
it using NPM or yarn. Or you could use local

130
00:08:28,516 --> 00:08:32,254
CDNC, including your project. I don't think it's that much of a

131
00:08:32,292 --> 00:08:35,646
deal to set up on view JS because it doesn't weigh

132
00:08:35,678 --> 00:08:38,420
much, it doesn't cost much, it doesn't consume space,

133
00:08:38,790 --> 00:08:43,010
and it's easy to use and understandable.

134
00:08:43,670 --> 00:08:47,362
Now, like I said, view great View JS Runtime

135
00:08:47,426 --> 00:08:52,198
performance if you take a look at this chart, you're seeing react 20%

136
00:08:52,284 --> 00:08:56,150
angular 35% view 45% well,

137
00:08:56,220 --> 00:08:59,658
these are part of my observation, so I

138
00:08:59,664 --> 00:09:03,622
don't think it's actually what you might observe, but they are part of observation

139
00:09:03,686 --> 00:09:07,610
and personal routine checking. After doing

140
00:09:07,760 --> 00:09:11,238
rigorous testing performance check and researching,

141
00:09:11,334 --> 00:09:14,682
I found out that View has higher runtime speed

142
00:09:14,746 --> 00:09:18,174
than Israel react and

143
00:09:18,212 --> 00:09:22,186
angular. When we're talking about runtime speed, we are talking about loading

144
00:09:22,298 --> 00:09:25,582
time. When you start the application, how fast

145
00:09:25,636 --> 00:09:29,394
can you be able to run and be able to deliver the content in

146
00:09:29,432 --> 00:09:33,026
it? So this is mainly talking about the loading time of your

147
00:09:33,048 --> 00:09:36,274
application when you restart UI applications, how long

148
00:09:36,312 --> 00:09:40,006
does it take for it to be restarted? Or how long does

149
00:09:40,028 --> 00:09:43,686
it take for your application to be up and running and you can see the

150
00:09:43,708 --> 00:09:47,826
chart angular does better than react. That's because react tend

151
00:09:47,858 --> 00:09:51,762
to have more dependencies than the other frameworks, which is angular

152
00:09:51,826 --> 00:09:55,770
and vue. And since Vuegase has a minimal project

153
00:09:55,840 --> 00:09:59,274
structure, it means the runtime speed is going to be

154
00:09:59,312 --> 00:10:02,846
increased by a lot, which means

155
00:10:02,868 --> 00:10:06,250
you're actually getting more runtime speed,

156
00:10:06,330 --> 00:10:09,982
which is good for UI applications. So in

157
00:10:10,036 --> 00:10:14,142
short, View JS has a good runtime speed and a great

158
00:10:14,196 --> 00:10:15,870
optimization technique.

159
00:10:17,570 --> 00:10:21,382
Now let's talk about the UI aspect of View JS.

160
00:10:21,546 --> 00:10:25,138
A lot of you might know View JS, but don't know that

161
00:10:25,224 --> 00:10:27,650
you can actually do a lot with Vue.

162
00:10:28,470 --> 00:10:31,894
Viewjs provides a lot of UI libraries that

163
00:10:31,932 --> 00:10:35,222
you could be able to integrate that won't change your project

164
00:10:35,356 --> 00:10:39,174
directory at all. So let's say you're not the type that loves using

165
00:10:39,212 --> 00:10:43,770
a materialized CSS, or you don't like using bootstrap,

166
00:10:44,350 --> 00:10:47,580
but you just want a

167
00:10:48,110 --> 00:10:51,854
design of its own without including those two

168
00:10:51,892 --> 00:10:55,246
libraries or any other you could use using a

169
00:10:55,268 --> 00:10:58,874
correct variety of these UI libraries I just stated

170
00:10:58,922 --> 00:11:01,994
out, and these are personally and paid from various

171
00:11:02,042 --> 00:11:05,522
websites and they are top rated and used

172
00:11:05,576 --> 00:11:07,300
by a lot of people.

173
00:11:08,870 --> 00:11:12,466
Number one, we have beautify. Beautify is one

174
00:11:12,488 --> 00:11:15,906
of the most popular vue JS UI

175
00:11:15,938 --> 00:11:19,106
library because it provides unpicked

176
00:11:19,218 --> 00:11:23,522
materialized components and buttons

177
00:11:23,586 --> 00:11:27,800
with years and other UI parts of your application.

178
00:11:28,270 --> 00:11:31,766
Basically using beautify you get to create UI components

179
00:11:31,798 --> 00:11:35,260
that are materialized base, just like Google

180
00:11:35,710 --> 00:11:39,194
for example. So these components actually allow

181
00:11:39,232 --> 00:11:42,446
you to be able to configure them in such a way

182
00:11:42,468 --> 00:11:46,480
that you take control of the UI design itself.

183
00:11:47,330 --> 00:11:51,578
And also it also gives good ux experience. Just like flex.

184
00:11:51,674 --> 00:11:55,154
You don't have to worry about writing CSS to position your

185
00:11:55,192 --> 00:11:58,722
flex or your grid. All these are automatically been

186
00:11:58,776 --> 00:12:02,546
set for you using the UI library. Then we

187
00:12:02,568 --> 00:12:06,674
have the view sachs. Basically, view Sachs

188
00:12:06,722 --> 00:12:10,374
allows you to be able to make

189
00:12:10,572 --> 00:12:14,914
uis that are already crafted.

190
00:12:15,042 --> 00:12:19,370
What I mean by uis are already crafted are uis that are

191
00:12:19,440 --> 00:12:23,686
designed by top designers or UI experts.

192
00:12:23,798 --> 00:12:27,638
So all you just have to do is just write a couple of codes

193
00:12:27,814 --> 00:12:32,122
which is going to create specifically designed UI

194
00:12:32,186 --> 00:12:35,280
for you that you can be able to use.

195
00:12:35,810 --> 00:12:38,030
Then we have Quasar.

196
00:12:39,090 --> 00:12:43,362
Quasar is just another UI library and

197
00:12:43,416 --> 00:12:47,502
can also be used as a project, a framework

198
00:12:47,566 --> 00:12:53,186
of its own where you get to design and also build your project on

199
00:12:53,208 --> 00:12:57,542
a particular framework, which is quasar so it's built with view,

200
00:12:57,676 --> 00:13:01,174
but you can actually use it in your project as

201
00:13:01,212 --> 00:13:05,670
a part of your designing. Then we have the elements UI

202
00:13:06,570 --> 00:13:10,250
just like any other UI library. It provides easy to use

203
00:13:10,320 --> 00:13:13,500
and simple UI components for your application.

204
00:13:14,750 --> 00:13:17,962
And now we have the view material. It just

205
00:13:18,016 --> 00:13:22,202
gives you a material look of your website, simple materialized

206
00:13:22,266 --> 00:13:25,818
look of your website, just like materialized CSS

207
00:13:25,994 --> 00:13:29,994
as you all know. And it makes you build source

208
00:13:30,042 --> 00:13:34,414
components that are just like a regular materialized CSS

209
00:13:34,542 --> 00:13:38,194
into your View JS project. Then we

210
00:13:38,232 --> 00:13:41,778
have Vox is another UI framework that you

211
00:13:41,784 --> 00:13:45,826
may all know. And it's just any other regular UI

212
00:13:45,938 --> 00:13:49,414
that you could just integrate because it makes use of part

213
00:13:49,452 --> 00:13:53,510
of bootstrap and some part of materialize to cook up some

214
00:13:53,580 --> 00:13:57,478
handmade UI components that you can be

215
00:13:57,484 --> 00:14:01,574
able to use and design to your taste. We have the buoy

216
00:14:01,622 --> 00:14:05,066
file, we have the I view, you have the mint UI and

217
00:14:05,088 --> 00:14:08,666
you have the bootstrap view. And this bootstrap view is

218
00:14:08,688 --> 00:14:11,786
just Bootstrap. In viewjet, let's say you

219
00:14:11,808 --> 00:14:14,614
are the type that loves using Bootstrap for your work.

220
00:14:14,672 --> 00:14:18,302
Bootstrap tree bootstrap four. You get to use them into your Vjet project

221
00:14:18,356 --> 00:14:21,950
without needing to include it from CDN. You could just install

222
00:14:22,020 --> 00:14:25,726
it locally, or you could use a CD or you

223
00:14:25,748 --> 00:14:29,902
could use a CDN. If you have

224
00:14:29,956 --> 00:14:33,374
access to Internet connection, you could use the CDN to access

225
00:14:33,492 --> 00:14:37,394
Bootstrap view. You get to actually build UI

226
00:14:37,442 --> 00:14:40,674
component based on bootstrap,

227
00:14:40,802 --> 00:14:43,640
whether tree version three or version four.

228
00:14:45,210 --> 00:14:49,126
So this is a typical project directory in

229
00:14:49,148 --> 00:14:53,062
your source folder. Like I said, it provides minimal project structure.

230
00:14:53,206 --> 00:14:56,986
In your source folder we have the views, we don't have the views actually we

231
00:14:57,008 --> 00:15:00,410
have the component and you have the assets.

232
00:15:01,170 --> 00:15:04,478
But the mistake most people make is

233
00:15:04,564 --> 00:15:08,970
actually putting your pages into the components

234
00:15:09,130 --> 00:15:13,150
and that is going to be a lot of problem because of putting

235
00:15:13,220 --> 00:15:16,386
your pages in your component is going to make your application

236
00:15:16,488 --> 00:15:19,826
messy, which is not a good idea, especially when you are

237
00:15:19,848 --> 00:15:23,540
running an enterprise application or a business application,

238
00:15:24,070 --> 00:15:27,990
because you can be able to differentiate if it's a component

239
00:15:28,730 --> 00:15:32,022
that you'll be using a part of UI applications, or if it's a page

240
00:15:32,076 --> 00:15:35,590
that you could use as a standalone component.

241
00:15:36,090 --> 00:15:39,594
So these are two major problems in

242
00:15:39,632 --> 00:15:43,130
the front end as a frontend

243
00:15:43,200 --> 00:15:46,554
developers when using view. So since view

244
00:15:46,592 --> 00:15:50,086
doesn't provide this flexibility for you to be able to

245
00:15:50,128 --> 00:15:53,326
use views, for you to

246
00:15:53,348 --> 00:15:55,950
be able to create pages in your component,

247
00:15:56,930 --> 00:16:00,286
you can use the views folder. You could

248
00:16:00,308 --> 00:16:04,026
just create a views folder and basically this view folder

249
00:16:04,058 --> 00:16:07,742
should hold your pages like your own page, your contact page,

250
00:16:07,796 --> 00:16:11,074
your login page. So storing your pages in

251
00:16:11,112 --> 00:16:14,820
this view rather than your components is going to make

252
00:16:15,510 --> 00:16:19,438
work a lot easier for you rather than taxing.

253
00:16:19,614 --> 00:16:23,800
So as a final developer, you want to make your work look less

254
00:16:24,330 --> 00:16:28,162
stressful because we are going to be working on it a lot and productivity

255
00:16:28,226 --> 00:16:32,454
better. So if you're not productive enough to be able to separate your components

256
00:16:32,502 --> 00:16:36,490
from your pages, there's going to be a huge problem when you eventually

257
00:16:36,990 --> 00:16:40,590
turn into a complex application or you turn into a business

258
00:16:40,660 --> 00:16:44,622
someday. Then in your components you create

259
00:16:44,676 --> 00:16:47,898
another folder called shared. The reason why I'm

260
00:16:47,914 --> 00:16:51,726
talking about this is based on UI and Ux. Ui and

261
00:16:51,748 --> 00:16:55,266
Ux go together, so you can't have a UI without Ux and you can't have

262
00:16:55,288 --> 00:16:59,454
a UX without UI. It's just kind of a bread and better

263
00:16:59,582 --> 00:17:03,410
where you need them to be able to test beta

264
00:17:04,230 --> 00:17:08,466
creating a shared folder the components folder actually hold

265
00:17:08,568 --> 00:17:11,970
your components, like the buttons, components,

266
00:17:12,130 --> 00:17:15,574
your nav bars, your sidebars, those kind of stuff.

267
00:17:15,772 --> 00:17:19,654
But grouping your components

268
00:17:19,702 --> 00:17:23,846
folder to shared a shared directory

269
00:17:24,038 --> 00:17:28,026
what you want your shared directory to do is all components that are

270
00:17:28,048 --> 00:17:29,500
used all over your application.

271
00:17:30,590 --> 00:17:32,700
Components like the navigation bar,

272
00:17:33,070 --> 00:17:35,894
the footer, the sidebar,

273
00:17:36,022 --> 00:17:39,514
adventure, or let's say some icons,

274
00:17:39,562 --> 00:17:42,720
some recapture, some buttons, some contact,

275
00:17:43,090 --> 00:17:46,674
those kind of stuff. If you are going to use them all

276
00:17:46,712 --> 00:17:50,178
through your application, then it's advisable to put them in

277
00:17:50,184 --> 00:17:53,886
your shared folder. By putting them in your shared folder,

278
00:17:53,918 --> 00:17:57,666
you're actually making work easier because you can differentiate

279
00:17:57,778 --> 00:18:01,814
between components that are located for the

280
00:18:01,852 --> 00:18:05,522
dashboard. Take for example for the dashboard or located

281
00:18:05,586 --> 00:18:09,158
for the client area, and then you can know the ones that are used in

282
00:18:09,164 --> 00:18:13,034
your general application. So let's say two, three years

283
00:18:13,072 --> 00:18:16,714
later you come to check out your application. Then you could know where you group

284
00:18:16,752 --> 00:18:20,374
those components. So rather than just opening a component

285
00:18:20,422 --> 00:18:24,026
and seeing a long list, you could go to your shared component

286
00:18:24,138 --> 00:18:26,480
and then see what you're working on.

287
00:18:27,650 --> 00:18:31,726
I guess I'm done with that. And now

288
00:18:31,748 --> 00:18:35,854
let's talk about something more related to

289
00:18:35,892 --> 00:18:39,346
Ux rather than UI. Lazy loading a lot

290
00:18:39,368 --> 00:18:42,914
of you might have heard about lazy loading, lazy loading. And I

291
00:18:42,952 --> 00:18:46,402
found out that lazy loading is one of the things that caused imposter

292
00:18:46,466 --> 00:18:48,710
syndrome among frontend developers.

293
00:18:50,090 --> 00:18:53,926
Well, let it not be because of I'm going

294
00:18:53,948 --> 00:18:57,490
to give it to you. It's going to

295
00:18:57,580 --> 00:19:01,706
make your experience with UI and Ux more

296
00:19:01,888 --> 00:19:05,718
easy to understand. Lazy loading is an optimization

297
00:19:05,814 --> 00:19:09,398
technique that delays the loading time of objects aligned.

298
00:19:09,414 --> 00:19:12,686
For a quicker load time, you might be thinking this might not be

299
00:19:12,708 --> 00:19:16,734
related to UI in any way, but it is because

300
00:19:16,932 --> 00:19:20,574
if you have good UI and your UX is

301
00:19:20,612 --> 00:19:24,414
poor, or let's say your website takes a whole lot

302
00:19:24,452 --> 00:19:28,114
of time to load, then nobody's going to view your UI, nobody's going to care

303
00:19:28,152 --> 00:19:31,234
about your UI because it isn't showing them what they

304
00:19:31,272 --> 00:19:34,834
want, it's delaying the consumer or the

305
00:19:34,872 --> 00:19:38,086
clients. So you can visit a website

306
00:19:38,188 --> 00:19:41,574
and discover that and

307
00:19:41,612 --> 00:19:45,266
discover that the website takes a longer time to load.

308
00:19:45,378 --> 00:19:49,310
So the longer the time it takes to load,

309
00:19:49,410 --> 00:19:53,850
the more frustrated you get about the website and you tend to close

310
00:19:53,920 --> 00:19:57,834
the website or visit it another day.

311
00:19:58,032 --> 00:20:00,800
And if you are the type that,

312
00:20:01,330 --> 00:20:05,374
let's say you just started a business and you

313
00:20:05,412 --> 00:20:08,826
fail to get the consumer

314
00:20:08,858 --> 00:20:12,206
or the customer attention on your website, then you're going to be

315
00:20:12,228 --> 00:20:15,540
losing a lot because your website isn't loading fast enough.

316
00:20:16,470 --> 00:20:20,062
So like I say, lazy loading is an optimization

317
00:20:20,126 --> 00:20:23,698
technique that delays the loading of object. Basically when you

318
00:20:23,784 --> 00:20:26,994
use regular HTML to load your project or your

319
00:20:27,032 --> 00:20:30,770
application, the Dom actually loads

320
00:20:30,850 --> 00:20:34,722
the object. So before your page actually views,

321
00:20:34,866 --> 00:20:37,974
before your page can be able to be viewed in

322
00:20:38,012 --> 00:20:41,594
a formal that the users can be able to view, it has

323
00:20:41,632 --> 00:20:45,066
to go through some tests, it has

324
00:20:45,088 --> 00:20:48,746
to go through the dome. So what you don't do is what

325
00:20:48,768 --> 00:20:51,914
the dome do is it waits until all the objects are fully

326
00:20:51,962 --> 00:20:55,726
prepared and then it views the web page.

327
00:20:55,908 --> 00:20:59,326
So if something caught your dome or something is caught up in the

328
00:20:59,348 --> 00:21:02,958
dome, the more object that is caught up in

329
00:21:02,964 --> 00:21:06,658
the dome, the less the loading time is going to

330
00:21:06,664 --> 00:21:10,818
be. Which means that the more images you add in your website,

331
00:21:10,984 --> 00:21:14,146
the more your website bounds will be

332
00:21:14,168 --> 00:21:17,474
slower. But using lazy loading, we are going to cop this.

333
00:21:17,592 --> 00:21:20,714
So let's take a look at it. So here's a practical

334
00:21:20,782 --> 00:21:24,626
example of lazy loading. So we have the eagle loading, the eager loading,

335
00:21:24,658 --> 00:21:28,246
and we have the lazy loading. Here you can see like

336
00:21:28,268 --> 00:21:31,766
the image in the dinosaur says, downloads three

337
00:21:31,788 --> 00:21:35,770
mb, downloads zero mb. And this is using the native

338
00:21:36,670 --> 00:21:40,618
lazy loading technique in HTML five, which is loading equal

339
00:21:40,714 --> 00:21:44,654
lazy. Doing this actually makes the iframe to be

340
00:21:44,692 --> 00:21:48,320
lazy is an attribute actually, which means it's actually

341
00:21:50,770 --> 00:21:53,550
object and we want to load it lazily,

342
00:21:53,890 --> 00:21:57,374
which means we are preventing the website, we are preventing

343
00:21:57,422 --> 00:22:01,074
the object from delaying the loading of the main website. So while

344
00:22:01,112 --> 00:22:04,334
the website is loading or has been loaded,

345
00:22:04,462 --> 00:22:07,878
the download or the image, the object

346
00:22:07,964 --> 00:22:11,426
keeps on loading until it's done without interrupting

347
00:22:11,458 --> 00:22:14,726
the flow of the website itself. I hope you are

348
00:22:14,748 --> 00:22:18,654
getting this technique. So when you put these attributes,

349
00:22:18,802 --> 00:22:22,614
you actually make work easier

350
00:22:22,662 --> 00:22:25,754
for you as a front end developers. And also you can see

351
00:22:25,792 --> 00:22:29,858
here with lazy loading without lazy loading. So when you do lazy loading

352
00:22:29,974 --> 00:22:33,630
it's going to show the content. First it will show the content

353
00:22:33,700 --> 00:22:37,120
that are available, then it's going to show

354
00:22:38,210 --> 00:22:41,994
sidebar rotating spinning bar a progress

355
00:22:42,042 --> 00:22:45,142
bar that shows that part of your website are loading.

356
00:22:45,306 --> 00:22:51,154
So using this technique it

357
00:22:51,192 --> 00:22:55,058
actually adds part of the website that hasn't been loaded yet

358
00:22:55,144 --> 00:22:58,686
so that I can view some parts that are already below it so that

359
00:22:58,728 --> 00:23:01,926
way it doesn't interrupt the UX of your website or

360
00:23:01,948 --> 00:23:05,622
the UI. So the users get to see what they want to see without

361
00:23:05,676 --> 00:23:09,370
having to wait until the other object is being loaded.

362
00:23:09,790 --> 00:23:13,466
So now let's talk about lazy loading in route in

363
00:23:13,488 --> 00:23:17,578
view js in view JS you could do

364
00:23:17,744 --> 00:23:21,206
lots of techniques to lazy loading.

365
00:23:21,238 --> 00:23:25,390
You could use loser. There are a lot of libraries for using that

366
00:23:25,540 --> 00:23:28,734
lazy loading Javascript, but I'm going to be

367
00:23:28,772 --> 00:23:31,946
giving a brief overview of how to lazy load route.

368
00:23:32,138 --> 00:23:35,966
And you can see this is a regular exe syntax.

369
00:23:36,158 --> 00:23:39,886
And after we imported our view and imported

370
00:23:39,918 --> 00:23:43,630
our router, we are creating a function called lazy load.

371
00:23:43,790 --> 00:23:46,934
And then we're including the view, like I say,

372
00:23:46,972 --> 00:23:50,902
for the page. Basically what we want in the view is to

373
00:23:50,956 --> 00:23:54,806
show that it's the page we want to load and the

374
00:23:54,828 --> 00:23:59,210
function is going to carry a parameter name

375
00:23:59,280 --> 00:24:02,554
view and this parameter is the location or

376
00:24:02,592 --> 00:24:06,714
the component that we want to load in our

377
00:24:06,832 --> 00:24:10,954
application. So we're telling our application to load

378
00:24:11,002 --> 00:24:15,098
this page or lazy load this component.

379
00:24:15,274 --> 00:24:20,414
Then after we do that we are actually putting our return and

380
00:24:20,452 --> 00:24:24,290
then using the return we are importing the

381
00:24:24,440 --> 00:24:28,034
location of the view like we say.

382
00:24:28,152 --> 00:24:32,238
So just like we put here, as we put the lazy load

383
00:24:32,414 --> 00:24:35,918
ohm. So what to attend the application is that whenever

384
00:24:36,014 --> 00:24:39,810
we want to visit the Ohm route, load the component

385
00:24:39,890 --> 00:24:43,830
first before loading the entire application. So I'm actually

386
00:24:43,900 --> 00:24:47,618
going to lazy load, we're going to bring out the component

387
00:24:47,714 --> 00:24:50,970
which is the home page. Want to bring out the home page before

388
00:24:51,040 --> 00:24:54,582
loading the entire page. Because of what Vue

389
00:24:54,646 --> 00:24:58,202
does is that when you load a page you are loading the entire page

390
00:24:58,256 --> 00:25:01,822
which includes the home page, the contact page into one

391
00:25:01,876 --> 00:25:06,014
file. And that is going to contain a lot of data

392
00:25:06,212 --> 00:25:09,934
which is making our application which

393
00:25:09,972 --> 00:25:13,338
is going to make our application a little bit slower. And we

394
00:25:13,364 --> 00:25:18,062
might not want that, especially when you have lots of uis

395
00:25:18,126 --> 00:25:21,586
or lots of objects in your application or images. So what you

396
00:25:21,608 --> 00:25:25,598
want to do is rather than making your application

397
00:25:25,704 --> 00:25:29,222
load all at once, you make your application load bit

398
00:25:29,276 --> 00:25:32,450
by bit. So when we're lazy loading the ohm,

399
00:25:32,530 --> 00:25:36,610
we're only importing the ohm component, which is the ohm

400
00:25:36,770 --> 00:25:40,166
route. So when I click on go to

401
00:25:40,188 --> 00:25:43,878
the ohm route, we're going to lazy load it, which means we're

402
00:25:43,894 --> 00:25:48,074
going to bring out only the home route into one file, rather than

403
00:25:48,112 --> 00:25:51,546
bringing out the whole of our application into one file.

404
00:25:51,738 --> 00:25:55,390
As you can see, I'm guessing this is very understandable.

405
00:25:57,410 --> 00:26:00,958
Well, you could try it out anytime. And if you need more information

406
00:26:01,124 --> 00:26:05,006
about this, send me message on

407
00:26:05,028 --> 00:26:08,638
my email at thegeekyamet@gmail.com and

408
00:26:08,644 --> 00:26:11,822
you could follow me on Twitter. Well,

409
00:26:11,956 --> 00:26:15,686
thank you for listening to this session. I hope you have a good day day,

410
00:26:15,868 --> 00:26:17,960
and I'll see you later.

411
00:26:19,050 --> 00:26:20,920
And next time.

