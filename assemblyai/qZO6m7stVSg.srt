1
00:00:25,410 --> 00:00:28,950
You. Hello everyone, and thanks for having me.

2
00:00:29,020 --> 00:00:32,482
My name is Alex. I'm the co founder and CEO of Stepsize,

3
00:00:32,546 --> 00:00:35,750
where we built a SaaS product to help engineering teams manage

4
00:00:35,820 --> 00:00:39,270
technical deb debt. So last year alone, I interviewed over

5
00:00:39,340 --> 00:00:42,642
300 top software development people about technical

6
00:00:42,706 --> 00:00:45,986
debt, and I've been working on products to help engineering teams ship

7
00:00:46,018 --> 00:00:50,266
better software faster for over five years now and raised millions

8
00:00:50,298 --> 00:00:54,234
of pounds to finance that. In my talk on how to manage technical Deb debt,

9
00:00:54,282 --> 00:00:57,726
I'll share with you all the lessons I learned from these people so

10
00:00:57,748 --> 00:01:01,834
that you can apply them too. First of all, what is tech debt,

11
00:01:01,882 --> 00:01:06,094
and why does it matter? I assume all of you know the metaphor based

12
00:01:06,132 --> 00:01:09,294
on financial debt. There are many definitions for tech debt,

13
00:01:09,342 --> 00:01:13,202
most of which work very well, and this is my attempt at simplifying them.

14
00:01:13,256 --> 00:01:17,006
I say that tech debt is code that you've decided is a liability.

15
00:01:17,198 --> 00:01:20,358
It's all that extra unnecessary work that you need to do to

16
00:01:20,364 --> 00:01:23,746
get your software out the door. And I love this comic by monkey

17
00:01:23,778 --> 00:01:27,142
user, which does a great job at illustrating what tech debt is.

18
00:01:27,276 --> 00:01:30,386
The team is digging that tunnel so fast, but forgot

19
00:01:30,418 --> 00:01:34,026
to get rid of all the rubble they dug out. A bug's causing water to

20
00:01:34,048 --> 00:01:37,754
leak into their tunnel. They're stuck in there because a technical deb these

21
00:01:37,792 --> 00:01:41,274
won't be able to do anything about the bug, and they might even die in

22
00:01:41,312 --> 00:01:44,640
there. That's technical Deb and what it can do to a business.

23
00:01:45,010 --> 00:01:48,094
But let's talk about why tech debt is even a thing.

24
00:01:48,212 --> 00:01:51,630
Why can we never seem to avoid it no matter what we try?

25
00:01:51,780 --> 00:01:55,614
Well, it's because software exists in a world of uncertainty. This quote

26
00:01:55,662 --> 00:01:59,406
by Martin Fowler, who in my opinion wrote the best blog posts

27
00:01:59,438 --> 00:02:02,674
about technical debdet. I encourage you to go read them.

28
00:02:02,872 --> 00:02:06,414
Essentially, tech debt exists because the code that we write to solve

29
00:02:06,462 --> 00:02:10,326
a problem is based on our current understanding of that problem. Now,

30
00:02:10,348 --> 00:02:14,166
it sounds obvious, but let's unpack this a little bit. Even if

31
00:02:14,188 --> 00:02:17,814
the perfect engineers found the perfect solution to a problem and

32
00:02:17,852 --> 00:02:22,330
coded it perfectly, their understanding of the problem will evolve, and quickly.

33
00:02:22,480 --> 00:02:26,314
But left unattended, their code will not evolve. And this

34
00:02:26,352 --> 00:02:29,802
means that our code will soon no longer be appropriate. It happens

35
00:02:29,856 --> 00:02:33,446
all the time and much faster than you might think, especially in a high growth

36
00:02:33,478 --> 00:02:37,086
environment. Now, something else to consider is that it's often the

37
00:02:37,108 --> 00:02:41,038
case that it can take a year of programming on a project before you understand

38
00:02:41,124 --> 00:02:44,302
what these best design approach should have been. That's another

39
00:02:44,356 --> 00:02:48,210
quote by Martin Fowler from his piece on the technical debt quadrant.

40
00:02:48,630 --> 00:02:52,114
However, I've learnt that the best teams in the business do

41
00:02:52,152 --> 00:02:55,346
know how to handle such high uncertainty. Despite all of this,

42
00:02:55,448 --> 00:02:59,358
they use the right tools and processes continuously refactor code that

43
00:02:59,384 --> 00:03:03,222
has accumulated too much cruft and they won't accept Messi code

44
00:03:03,276 --> 00:03:06,934
as technical debt. I want to unpack this last bit a little bit too,

45
00:03:06,972 --> 00:03:10,838
so that we're all on the same page. You may have seen this quadrant before,

46
00:03:11,004 --> 00:03:14,726
and when I say that the best engineers in the business won't accept messy Curtis

47
00:03:14,758 --> 00:03:18,582
technical debt, I mean that they aim for this corner of the quadrant.

48
00:03:18,726 --> 00:03:22,314
Technical debt is not an inherently evil and bad thing, just like

49
00:03:22,352 --> 00:03:26,314
financial debt. It's a tool that we can use to gain leverage and test ideas

50
00:03:26,362 --> 00:03:29,742
faster. Just like financial debt. If we take it on without

51
00:03:29,796 --> 00:03:32,698
being prudent, deliberate and managing it carefully,

52
00:03:32,794 --> 00:03:36,478
it will screw us over and we will go technically bankrupt.

53
00:03:36,654 --> 00:03:40,334
We should never get sloppy and accept any kind of incompetence as acceptable

54
00:03:40,382 --> 00:03:43,826
technical deb debt. We should be aware of the current best practices and

55
00:03:43,848 --> 00:03:47,574
use them. We should write clean, readable code, and we should

56
00:03:47,612 --> 00:03:51,570
know that code left unattended will turn into technical debt.

57
00:03:51,730 --> 00:03:55,442
The best engineers teams in the business have ways to handle the uncertainty

58
00:03:55,506 --> 00:03:59,650
inherent to building software and end up in the top right quadrant.

59
00:03:59,810 --> 00:04:03,674
Now, let's debunk a few myths to summarize the key ideas here.

60
00:04:03,792 --> 00:04:07,594
There's this myth that tech debt is bad and no one should ever take any

61
00:04:07,632 --> 00:04:10,906
on wrong. If you're sending people to

62
00:04:10,928 --> 00:04:14,762
Mars, sure, if you're building software where the cost of failure

63
00:04:14,826 --> 00:04:18,298
isn't high, you can use tech debt as a way to gain extra leverage,

64
00:04:18,394 --> 00:04:22,094
just like financial debt. And just as we discussed, taking on

65
00:04:22,132 --> 00:04:26,222
tech debt prudently and deliberately is fine. And if you have zero tech debt,

66
00:04:26,286 --> 00:04:29,540
you should truly ask yourselves if you're going fast enough.

67
00:04:29,990 --> 00:04:33,794
Also, it's not realistic to have zero tech debt because of

68
00:04:33,832 --> 00:04:37,266
entropy in your code base. That's how Ron parages, who's a vp of

69
00:04:37,288 --> 00:04:40,210
engineering at Carter, told me that he looks at technical deb debt.

70
00:04:40,290 --> 00:04:43,778
He looks at it as entropy in the code base. It never ends and it's

71
00:04:43,794 --> 00:04:47,350
a constant struggle. So adjust your expectations accordingly.

72
00:04:47,770 --> 00:04:51,814
The next myth is about how tech debt is only engineering's

73
00:04:51,862 --> 00:04:55,194
problem. Nope. We'll talk about how

74
00:04:55,232 --> 00:04:58,890
tech debt impacts the whole companys and talk some more about how company

75
00:04:58,960 --> 00:05:02,494
culture, particularly how product managers and engineers work

76
00:05:02,532 --> 00:05:05,790
together, impact a company's approach. These technical debt.

77
00:05:06,370 --> 00:05:09,614
And finally, a lot of people wrongly believe that managing tech

78
00:05:09,652 --> 00:05:13,054
debt properly will slow them down. That's super

79
00:05:13,092 --> 00:05:16,674
duper wrong. If you're managing tech debt successfully, you'll see your

80
00:05:16,712 --> 00:05:20,206
number of bugs go down and velocity go up, and I'll show you how it's

81
00:05:20,238 --> 00:05:23,634
done. At this stage, you might be asking yourself,

82
00:05:23,752 --> 00:05:27,554
but why even bother managing tech debt? Now this is a long

83
00:05:27,592 --> 00:05:31,122
quote, but it basically says that companies who have a strategy for technical debt

84
00:05:31,186 --> 00:05:34,354
will ship 50% faster. And Hugh here doesn't

85
00:05:34,402 --> 00:05:38,262
want to ship 50% faster. That's the stuff of dreams for people building

86
00:05:38,316 --> 00:05:41,754
software. And if you think Gartner don't know what they're talking

87
00:05:41,792 --> 00:05:45,306
about, consider this data point from Stripe, who's arguably the

88
00:05:45,328 --> 00:05:49,434
best company software company out there. They found that

89
00:05:49,472 --> 00:05:52,986
engineers spend 42% of their time fixing

90
00:05:53,018 --> 00:05:56,606
the past rather than building the future. And we

91
00:05:56,628 --> 00:06:00,462
at stepsize decided to carry out our own research and asked several hundred

92
00:06:00,516 --> 00:06:03,838
engineers in our community a simple question. How much faster do

93
00:06:03,844 --> 00:06:07,410
you estimate your company would ship if you had tech debt under control?

94
00:06:07,560 --> 00:06:11,554
The answers will surprise you. Two thirds of respondents said

95
00:06:11,592 --> 00:06:14,834
that they'd ship twice as fast if their companies had tech

96
00:06:14,872 --> 00:06:18,338
debt under control. 15% estimated they'd chip

97
00:06:18,434 --> 00:06:22,038
three times as fast. Now, how the hell can they say that?

98
00:06:22,124 --> 00:06:25,766
Let's unpack this a little bit. Technical deb slows the entire

99
00:06:25,868 --> 00:06:29,354
engineering team down within days or weeks and has

100
00:06:29,392 --> 00:06:32,666
repercussions across the entire business. Check this.

101
00:06:32,688 --> 00:06:36,038
But in software companies, too much tech debt means you'll

102
00:06:36,054 --> 00:06:39,878
get too many bugs, loads of performance issues, and too much downtime.

103
00:06:39,974 --> 00:06:43,150
They'll create more work for QA, more work for the SRE team,

104
00:06:43,220 --> 00:06:46,906
and result in broken slas. All that stuff tallies

105
00:06:46,938 --> 00:06:50,270
up to more customer complaints, which means more work for support,

106
00:06:50,420 --> 00:06:53,578
customer success, and account management. And it all adds

107
00:06:53,594 --> 00:06:56,766
up to unhappy customers. I've heard some version of

108
00:06:56,788 --> 00:07:00,494
this many times. We'd be shipping twice as fast today if we'd handled

109
00:07:00,542 --> 00:07:03,762
tech debt carefully in the past. And I'm sure you've all seen this happen,

110
00:07:03,816 --> 00:07:07,678
too. A feature that you thought would be simple and maybe take a sprint ends

111
00:07:07,694 --> 00:07:11,154
up taking the month or more. Now imagine this at a global

112
00:07:11,202 --> 00:07:14,630
scale. So now hopefully you see why it's imperative to manage

113
00:07:14,700 --> 00:07:18,840
tech debt carefully, and let's talk about how to do just that.

114
00:07:19,290 --> 00:07:22,950
First, it's crucial to understand that technical deb isn't just technical,

115
00:07:23,030 --> 00:07:26,858
it's about people. It's deeply influenced by your company's culture. And I

116
00:07:26,864 --> 00:07:29,942
want to stress that point. So that slide is deliberately blank.

117
00:07:30,006 --> 00:07:33,566
Enjoy it for a few seconds. But to give you an example,

118
00:07:33,668 --> 00:07:37,054
if your engineers are never recognized for paying down

119
00:07:37,092 --> 00:07:40,206
tech debt and it doesn't advance their career. Do you think

120
00:07:40,228 --> 00:07:43,934
they're likely to volunteer to address tech debt? Or if

121
00:07:43,972 --> 00:07:47,554
engineers get reprimanded at these slightest hiccup in the software by people who

122
00:07:47,592 --> 00:07:50,862
don't understand that tech debt can be used for extra leverage?

123
00:07:51,006 --> 00:07:54,290
Do you think they'll take on any tech debt? Clearly no,

124
00:07:54,360 --> 00:07:57,858
they won't. And as we all know, company culture is a

125
00:07:57,864 --> 00:08:01,254
huge topic. But I've gone deep into it and in my opinion, I found the

126
00:08:01,292 --> 00:08:04,374
one cultural characteristic that you should focus on if

127
00:08:04,412 --> 00:08:08,098
you want a healthy code base, and that's ownership.

128
00:08:08,274 --> 00:08:11,274
And I'm not just talking about a hazy concept here.

129
00:08:11,392 --> 00:08:14,634
Microsoft did some great research that we can use to

130
00:08:14,672 --> 00:08:18,106
quantify this and back up our argument. Turns out that

131
00:08:18,128 --> 00:08:22,454
if you analyze your git commit activity to see which percentage of modifications

132
00:08:22,502 --> 00:08:26,106
to each file in your code base were made by the main author

133
00:08:26,138 --> 00:08:29,754
of the code, you'll see that the files with most bugs are the files

134
00:08:29,802 --> 00:08:33,578
where contributors made less than 60% of the edits.

135
00:08:33,754 --> 00:08:37,214
In other words, code ownership is a leading indicator of codebase

136
00:08:37,262 --> 00:08:40,738
health, and you can use it to predict where things will break

137
00:08:40,824 --> 00:08:44,306
and reverse the trend before they do. Now, I want to add a bit of

138
00:08:44,328 --> 00:08:48,354
nuance here so that we can draw these right conclusions. This research does not

139
00:08:48,392 --> 00:08:51,974
suggest that each file in your code base should be owned by one and only

140
00:08:52,012 --> 00:08:55,430
one person, and that they're the only person who can work on it.

141
00:08:55,580 --> 00:08:58,418
That would put your bus factor in the risky zone.

142
00:08:58,514 --> 00:09:02,122
Ownership is a spectrum. It starts with orphan code

143
00:09:02,176 --> 00:09:05,862
all the way on the left, which doesn't have a clear contributor, and therefore

144
00:09:05,926 --> 00:09:09,066
no one is implicitly responsible for its maintenance. This is

145
00:09:09,088 --> 00:09:12,518
a bad spot to be in. All the way to absolute ownership,

146
00:09:12,614 --> 00:09:15,710
where only one person can modify the code in question.

147
00:09:15,860 --> 00:09:18,522
And for each file in your code base, you want to be in the collaborative

148
00:09:18,586 --> 00:09:21,998
ownership zone, where the main contributor made more than 50% of

149
00:09:22,004 --> 00:09:25,114
all edits, but not all of them. And generally

150
00:09:25,162 --> 00:09:29,220
speaking, the code is owned by a specific team, not an individual.

151
00:09:29,670 --> 00:09:32,882
We won't get into it today because we don't have enough time, but think hard

152
00:09:32,936 --> 00:09:36,226
about how you can foster a culture of collaborative ownership in

153
00:09:36,248 --> 00:09:39,686
your development team. It's the best way to maintain a

154
00:09:39,708 --> 00:09:43,746
healthy code base. So you now have a rough idea of the cultural drivers

155
00:09:43,778 --> 00:09:47,426
behind tech debt. Now let's talk about technical debt budgets.

156
00:09:47,538 --> 00:09:51,046
You might have heard about this before. It's the idea that you should

157
00:09:51,068 --> 00:09:54,682
allocate a fixed proportion of your sprint capacity to pay back

158
00:09:54,736 --> 00:09:58,074
technical debt, say 10% to 20% of your

159
00:09:58,112 --> 00:10:01,354
time but how the hell do you come up with that number? Well,

160
00:10:01,392 --> 00:10:04,910
it should change every sprint and it turns, but that it's not important

161
00:10:04,980 --> 00:10:07,502
to explicitly pick out the right number.

162
00:10:07,636 --> 00:10:10,702
Right, but I'll tell you how you can think about

163
00:10:10,756 --> 00:10:14,810
this at step size. We like to think about these technet budgets like SRE

164
00:10:14,890 --> 00:10:18,638
teams think about their site reliability goals. So site reliability

165
00:10:18,734 --> 00:10:21,586
is responsible for keeping software products up and running.

166
00:10:21,688 --> 00:10:25,362
But interestingly, companies like Google don't aim for 100%

167
00:10:25,416 --> 00:10:29,314
uptime. And that's because 99.99% uptime

168
00:10:29,362 --> 00:10:33,302
is enough for their products to appear supremely reliable to real world

169
00:10:33,356 --> 00:10:37,126
humans. And that last 0.1% is

170
00:10:37,228 --> 00:10:41,046
exponentially more difficult to reach and simply isn't worth fighting

171
00:10:41,078 --> 00:10:44,714
for. So consequently, if this allows Google 52

172
00:10:44,752 --> 00:10:48,186
minutes of downtime per year, they'll want to get as close to that number as

173
00:10:48,208 --> 00:10:51,802
possible. Anything less than 52% conf 42 minutes

174
00:10:51,856 --> 00:10:55,898
of downtime is a missed opportunity for taking extra risks and delivering

175
00:10:55,914 --> 00:10:59,406
more ambitious features to their customers faster. So think of your

176
00:10:59,428 --> 00:11:03,306
tech debt budgets like your site reliability budget provided it's

177
00:11:03,338 --> 00:11:06,702
prudent technical debt you're taking on deliberately and you remain

178
00:11:06,766 --> 00:11:10,914
below the maximum amount of tech debt you can tolerate before affecting your customers and

179
00:11:10,952 --> 00:11:14,354
business. You should feel free to take more risks even

180
00:11:14,392 --> 00:11:18,470
if you increase these amount of tech debt, because that's how you'll beat your competitors.

181
00:11:18,810 --> 00:11:22,166
Now this pseudograph summarizes the idea. You want

182
00:11:22,188 --> 00:11:25,654
to hover around the maximum amount of tech debt you'll tolerate. And your

183
00:11:25,692 --> 00:11:28,678
tech debt budget can be in the red. You need to pay some back,

184
00:11:28,764 --> 00:11:32,140
or it can be in the green. You can afford to take on some more.

185
00:11:32,510 --> 00:11:36,506
A simple way to define your tech debt budget is to find the intersection of

186
00:11:36,528 --> 00:11:40,218
things you know you'll work on using your product roadmap and the parts of

187
00:11:40,224 --> 00:11:43,814
your code base that have tech debt, but not outside of it,

188
00:11:43,872 --> 00:11:46,846
right? You pay back the stuff that's inside, not what's outside.

189
00:11:47,028 --> 00:11:50,186
You scope out the work and you'll have your tech debt budget

190
00:11:50,218 --> 00:11:53,422
for your sprint quarter or year if you plan

191
00:11:53,476 --> 00:11:56,926
that prior into the future. And the key idea here is that you

192
00:11:56,948 --> 00:12:00,626
don't need to address all your tech debt right now in one go.

193
00:12:00,728 --> 00:12:03,826
You need to address the debt that's in the way of your key goals for

194
00:12:03,848 --> 00:12:07,714
the quarter of whatever period you've selected. Now let's get

195
00:12:07,752 --> 00:12:11,782
practical and talk about how you can incorporate tech debt management into

196
00:12:11,836 --> 00:12:15,846
your day to day agile development process. And the first question that

197
00:12:15,868 --> 00:12:19,494
you should ask of any tech debt is is it small, medium or

198
00:12:19,532 --> 00:12:23,026
large? I'll define each of them. Small debt is these tech

199
00:12:23,068 --> 00:12:26,214
debt that can be addressed right then and there. When the engineer

200
00:12:26,262 --> 00:12:29,846
spots it in the code and it's understood that it is part of the scope

201
00:12:29,878 --> 00:12:33,274
of the ticket they're working on. It could be refactoring a function,

202
00:12:33,392 --> 00:12:37,118
or a couple of them, or renaming some variables. Whatever it

203
00:12:37,124 --> 00:12:40,494
is, it can be done. Right now, the best way to think about it is

204
00:12:40,532 --> 00:12:43,966
to follow the Boy Scout rule. You always leave the code better than

205
00:12:43,988 --> 00:12:47,186
you found it, and small jobs like these don't require any kind

206
00:12:47,208 --> 00:12:50,402
of planning, and each engineer should feel empowered to fix

207
00:12:50,456 --> 00:12:54,318
this kind of debt without anyone's approval. You see this ownership

208
00:12:54,414 --> 00:12:57,874
coming up again as a key factor. Next we have

209
00:12:57,912 --> 00:13:01,558
the medium pieces of debt. These are the pieces of debt that can

210
00:13:01,564 --> 00:13:05,746
be addressed within a sprint. Usually they should go through the same sprint

211
00:13:05,778 --> 00:13:09,354
planning process as any feature work and be considered just as

212
00:13:09,392 --> 00:13:12,682
rigorously. That's where most engineering and product

213
00:13:12,736 --> 00:13:16,406
development teams fail. I spoke about this with James Rosen,

214
00:13:16,438 --> 00:13:19,994
who's an engineering manager at Everlane, who told me that to

215
00:13:20,032 --> 00:13:23,926
consider how much time PMS spend curating the set of features

216
00:13:23,958 --> 00:13:27,514
to work on, and then to compare this to the amount of time and effort

217
00:13:27,562 --> 00:13:31,278
engineers dedicate to managing these business causes for tech debt. And then

218
00:13:31,284 --> 00:13:34,850
he asked me, is it that surprising that close to zero engineering time

219
00:13:34,920 --> 00:13:38,530
gets allocated to tech debt? Now you

220
00:13:38,600 --> 00:13:42,514
all is good software development people should do that

221
00:13:42,552 --> 00:13:45,954
by asking the right questions and making room for conversations about

222
00:13:45,992 --> 00:13:49,986
technical debt in your agile ceremonies and when planning

223
00:13:50,098 --> 00:13:54,294
right businesses rightly priorities work that delivers value to customers.

224
00:13:54,412 --> 00:13:57,746
And you might think that at first glance, getting rid of tech debt

225
00:13:57,778 --> 00:14:01,334
won't do that. But as we discussed earlier, tech debt

226
00:14:01,382 --> 00:14:04,986
does hinder your capacity to deliver value to the customer in

227
00:14:05,008 --> 00:14:08,586
many ways. So your goal is to identify key tech debt in

228
00:14:08,608 --> 00:14:12,426
the way of key goals. These debt that costs the most engineering

229
00:14:12,458 --> 00:14:16,110
hours and productivity losses, or that causes the most

230
00:14:16,180 --> 00:14:20,334
bugs or other issues that impact your customers. To do

231
00:14:20,372 --> 00:14:24,030
that, you need to document your tech debt and to be clear

232
00:14:24,100 --> 00:14:28,226
about the impact it's having on the business. Only then will you be able to

233
00:14:28,248 --> 00:14:32,094
make a proper business case for any given piece of debt and to prioritize

234
00:14:32,142 --> 00:14:35,794
things properly. And this is where tooling has failed us so far.

235
00:14:35,912 --> 00:14:39,750
As Jake, who's a lead engineer at Uncork, told me,

236
00:14:39,900 --> 00:14:43,126
Jira is a great place to manage projects, but a terrible place to

237
00:14:43,148 --> 00:14:47,266
track and monitor tech debt. Just take a look at your tech debt

238
00:14:47,298 --> 00:14:51,162
epic or backlog, where the 7000 tickets that your engineering team

239
00:14:51,216 --> 00:14:55,002
diligently logged went to die until everyone gave

240
00:14:55,056 --> 00:14:58,342
up on the idea. And code quality tools are helpful

241
00:14:58,406 --> 00:15:01,654
at surfacing one facet of tech debt, but they won't

242
00:15:01,702 --> 00:15:04,734
catch most other types in technical debt. Now,

243
00:15:04,772 --> 00:15:08,014
fortunately, this is the problem that we're solving at step size. We built

244
00:15:08,052 --> 00:15:11,422
an editor first issue tracker that engineers can use to keep track

245
00:15:11,476 --> 00:15:14,400
of tech debt right in the code where it lives.

246
00:15:15,250 --> 00:15:18,426
So you'll want to use these code based

247
00:15:18,468 --> 00:15:21,938
issues that you've tracked to identify this subset of tech debt that's in the way

248
00:15:21,944 --> 00:15:25,618
of your sprint. During sprint planning for each feature, you'll ask,

249
00:15:25,704 --> 00:15:29,494
is there an opportunity to address that debt as part of this feature work?

250
00:15:29,612 --> 00:15:33,206
Or which tech debt could we address to make delivery of this

251
00:15:33,228 --> 00:15:36,982
feature smoother and faster? And then you actually scope out the work.

252
00:15:37,036 --> 00:15:41,126
You import your step size issues into Jira, and you add the relevant

253
00:15:41,158 --> 00:15:44,822
issues to your sprint. You need to have conversations

254
00:15:44,886 --> 00:15:48,602
about tech debt in your usual sprint ceremonies if you want to have a chance

255
00:15:48,656 --> 00:15:52,190
at creating the right culture and managing it properly.

256
00:15:52,770 --> 00:15:56,734
Finally, large debt is the tech debt that cannot be addressed right

257
00:15:56,772 --> 00:16:00,554
then and there, or even in one sprint. The best companies I've interviewed

258
00:16:00,602 --> 00:16:04,266
have quarterly technical planning sessions in which all engineering

259
00:16:04,298 --> 00:16:07,606
and product leadership participate. Engineering managers

260
00:16:07,658 --> 00:16:11,326
are tasked with bringing up large pieces of tech debt that their team leads

261
00:16:11,358 --> 00:16:14,766
have reported to them and to make the business case for the ones they judge

262
00:16:14,798 --> 00:16:18,094
to be the most important ones. To make the business case,

263
00:16:18,152 --> 00:16:21,654
you need to explicitly state which business priorities will be put

264
00:16:21,692 --> 00:16:25,106
at risk by the tech debt in question. So these could be key items

265
00:16:25,138 --> 00:16:29,450
on our feature roadmap security KPIs, like velocity,

266
00:16:29,950 --> 00:16:33,526
much more anything that matters to your business. If the debt

267
00:16:33,558 --> 00:16:36,790
is likely to get worse if left unattended,

268
00:16:36,950 --> 00:16:40,694
you need to explain why, right? So, for example, because many engineers

269
00:16:40,742 --> 00:16:43,538
will ship lots of code in the parts of the code base where the debt

270
00:16:43,574 --> 00:16:47,166
is, and you need to add a guesstimate of how much this

271
00:16:47,188 --> 00:16:50,574
debt will cost to the business, for example, in time, if the main

272
00:16:50,612 --> 00:16:54,014
risk is productivity or bugs, if it's quality or

273
00:16:54,052 --> 00:16:57,362
employee retention, if people just loathe their lives

274
00:16:57,416 --> 00:17:01,022
when they're working on this part of the code base, et cetera, et cetera.

275
00:17:01,166 --> 00:17:04,798
And once leadership has approved each large piece of tech debt,

276
00:17:04,894 --> 00:17:08,242
they can be scheduled onto the roadmap, just like any feature

277
00:17:08,306 --> 00:17:11,634
work would. Now, let's quickly go over the key takeaways

278
00:17:11,682 --> 00:17:15,302
from this session. If you leave with anything, I'd like you to remember

279
00:17:15,356 --> 00:17:18,774
that tech debt is inevitable. It's not that anyone's doing a bad

280
00:17:18,812 --> 00:17:22,026
job. It's due to entropy in the code base, which might as

281
00:17:22,048 --> 00:17:25,386
well be a law of the universe. But importantly, you can

282
00:17:25,408 --> 00:17:28,902
use tech debt to gain extra leverage and beat your competitors.

283
00:17:29,046 --> 00:17:31,930
However, if you manage tech debt carefully,

284
00:17:32,270 --> 00:17:35,646
sorry, if you don't manage it carefully, it will come back to bite you.

285
00:17:35,748 --> 00:17:39,386
And the best way to manage technical deb is to create an engineering

286
00:17:39,418 --> 00:17:43,466
culture of ownership, include tech debt in your agile processes,

287
00:17:43,578 --> 00:17:47,026
and to use step size. So I'll take a few seconds to show

288
00:17:47,048 --> 00:17:50,926
you what step size is about. Companies like Sneak use our editor

289
00:17:50,958 --> 00:17:54,466
first issue tracker to maintain a healthy code base while shipping at

290
00:17:54,488 --> 00:17:57,986
pace. So with step size they can track tank debt directly from the

291
00:17:58,008 --> 00:18:01,634
editor and the issues they create are always linked to the code that they relate

292
00:18:01,682 --> 00:18:04,738
to. So they then use our web app to get an overview of the tank

293
00:18:04,754 --> 00:18:08,086
debt in the code base, prioritize improvements based on what matters to

294
00:18:08,108 --> 00:18:11,414
the business at the moment, and once they've done that, they can

295
00:18:11,452 --> 00:18:15,338
use our dura integration to add them to their sprint and finally fix the

296
00:18:15,344 --> 00:18:19,622
debt that matters. And I'll leave you with these wise words paraphrasing

297
00:18:19,686 --> 00:18:23,614
Arlo Belshi from dig deep tools, who said that ten

298
00:18:23,652 --> 00:18:27,322
x engineers may not exist, but 100 x code causes

299
00:18:27,386 --> 00:18:30,894
certainly do. That's what you're after. By managing tech

300
00:18:30,932 --> 00:18:34,254
debt carefully, you can start using our product for

301
00:18:34,292 --> 00:18:38,074
free on stepsize.com and I encourage you to follow us on Twitter at alexandre

302
00:18:38,122 --> 00:18:41,934
omeyer and at stepsize HQ, where we share the latest and best

303
00:18:41,972 --> 00:18:45,814
content regarding tech debt software maintenance and we like to think these

304
00:18:45,852 --> 00:18:47,778
best memes. Thanks for listening.

