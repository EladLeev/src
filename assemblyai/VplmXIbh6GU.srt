1
00:01:28,690 --> 00:01:32,294
Hello everyone, this is Chester. So I'm happy to meet

2
00:01:32,332 --> 00:01:37,282
you and give a talk about how to create your postgresQl

3
00:01:37,346 --> 00:01:41,434
PostgreSQl distributed secure database ecosystem postgresql

4
00:01:41,482 --> 00:01:45,214
instance. Here is something about myself.

5
00:01:45,332 --> 00:01:48,666
I'm the Trista, the cases co founder

6
00:01:48,698 --> 00:01:52,270
and these CTO. It's my job title,

7
00:01:52,850 --> 00:01:56,910
my area. It's about the distribute built database,

8
00:01:56,990 --> 00:02:01,278
about the data sharding, about the database

9
00:02:01,454 --> 00:02:06,066
AI management platform developing. So I'm a developer

10
00:02:06,178 --> 00:02:09,938
but apart from that I love open source

11
00:02:10,034 --> 00:02:13,430
and also I get involved a lot

12
00:02:13,500 --> 00:02:18,158
in Apache software foundation. I'm the member and incubator

13
00:02:18,354 --> 00:02:23,034
mentor to help to provide some ideas to other

14
00:02:23,152 --> 00:02:27,402
incubator projects. So today my

15
00:02:27,456 --> 00:02:30,586
talk will focus on how to use Apache

16
00:02:30,618 --> 00:02:34,186
sharding Sophia to create your secure

17
00:02:34,298 --> 00:02:37,934
and sharding database ecosystem with

18
00:02:37,972 --> 00:02:39,790
your postgresql.

19
00:02:41,490 --> 00:02:45,666
Well if today you have some question about my talk,

20
00:02:45,768 --> 00:02:49,234
you can contact me on the linking or GitHub or

21
00:02:49,272 --> 00:02:52,162
Twitter any channel you like. Yeah,

22
00:02:52,216 --> 00:02:56,134
so let's get started. So today's content

23
00:02:56,252 --> 00:02:59,526
is just to solve one issue. The issue

24
00:02:59,628 --> 00:03:02,802
that how to create the secure distributed

25
00:03:02,866 --> 00:03:05,800
postgreSQL database system.

26
00:03:06,170 --> 00:03:09,398
But before to import the solution.

27
00:03:09,494 --> 00:03:13,734
I just want to give some background about our postgresql.

28
00:03:13,862 --> 00:03:18,438
Yeah, I guess most application will use the PostgreSQL

29
00:03:18,534 --> 00:03:22,190
in the second part. That means you will create

30
00:03:22,260 --> 00:03:26,122
these cluster with your postgresql. You have the primary

31
00:03:26,186 --> 00:03:29,818
node and one or more replica

32
00:03:29,834 --> 00:03:33,474
nodes to help to improve the availability of

33
00:03:33,512 --> 00:03:37,406
your postgresql instance. Also your replica

34
00:03:37,438 --> 00:03:40,786
nodes can get some or share

35
00:03:40,888 --> 00:03:44,462
some traffic with your primary

36
00:03:44,526 --> 00:03:48,294
nodes, right? That's the standard usage for the

37
00:03:48,332 --> 00:03:51,970
database. But in this classic

38
00:03:52,130 --> 00:03:55,542
structure or architecture of your database we

39
00:03:55,596 --> 00:03:59,222
also can see more needs or requirements

40
00:03:59,366 --> 00:04:02,778
from the modern application or website.

41
00:04:02,944 --> 00:04:06,442
That means like high scalability or high

42
00:04:06,496 --> 00:04:10,726
availability. Also you want to get your readout

43
00:04:10,918 --> 00:04:14,654
as quick as possible and also how

44
00:04:14,692 --> 00:04:18,474
to get the elastic skill out with your growing

45
00:04:18,522 --> 00:04:21,934
up your application and about how to make

46
00:04:21,972 --> 00:04:26,814
your data encrypted and decrypted automatically.

47
00:04:26,942 --> 00:04:30,562
So that's the more needs or new requirements from

48
00:04:30,616 --> 00:04:33,790
the current your database architecture.

49
00:04:33,950 --> 00:04:37,634
So in order to solve such issues I

50
00:04:37,672 --> 00:04:41,654
want to introduce project, open source project or

51
00:04:41,692 --> 00:04:44,966
community to help us to deal with such issues.

52
00:04:45,148 --> 00:04:47,938
That is the Apache sharding Sophia.

53
00:04:48,114 --> 00:04:51,578
So what's the Apache sharding Sophia? Yeah, that's the first

54
00:04:51,664 --> 00:04:54,954
question I give the answer for myself. That is

55
00:04:54,992 --> 00:04:58,762
these ecosystem to transfer any

56
00:04:58,816 --> 00:05:02,590
database into a distributed database system

57
00:05:02,740 --> 00:05:06,394
and enhance these system with like sharding skew

58
00:05:06,442 --> 00:05:10,266
out distributed transaction or SQL audit

59
00:05:10,378 --> 00:05:14,574
or more enhancement features around

60
00:05:14,692 --> 00:05:18,378
this distributed system. Yeah that is definition we're

61
00:05:18,394 --> 00:05:21,794
spoken but actually I will give

62
00:05:21,832 --> 00:05:25,378
more introducing about the features or architectures but

63
00:05:25,464 --> 00:05:28,790
let me first add its community or this data

64
00:05:28,860 --> 00:05:32,710
on GitHub because that is very important for us

65
00:05:32,780 --> 00:05:37,234
to pick up or choose this project if it has a very active

66
00:05:37,282 --> 00:05:41,322
community and that means you can get more help

67
00:05:41,376 --> 00:05:45,142
from this community and that means this community receive

68
00:05:45,206 --> 00:05:50,526
a lot of user cases. So the

69
00:05:50,548 --> 00:05:54,334
same mission you may be met but will be stopped before.

70
00:05:54,452 --> 00:05:57,838
Yeah. So on GitHub, this community

71
00:05:57,924 --> 00:06:02,638
or this project receive more than 15,000

72
00:06:02,724 --> 00:06:06,958
stars and have near

73
00:06:07,044 --> 00:06:10,830
like 318 contributors

74
00:06:10,910 --> 00:06:15,022
now and it released more than 14

75
00:06:15,166 --> 00:06:18,994
variants. That means actually it's active

76
00:06:19,042 --> 00:06:24,306
or diverse or maybe have a lot of user

77
00:06:24,338 --> 00:06:28,166
cases. Right, so that's Apache sharding,

78
00:06:28,198 --> 00:06:31,642
Sophia's community and it's mostly developed by

79
00:06:31,696 --> 00:06:35,194
Java. That means if you interested in

80
00:06:35,232 --> 00:06:38,678
this project or you want to get some helps

81
00:06:38,694 --> 00:06:41,914
from the community or you want to do some contribution to this

82
00:06:41,952 --> 00:06:46,574
community, I guess that maybe is a good project for you to

83
00:06:46,692 --> 00:06:50,574
join in open source area. Yeah, so because this

84
00:06:50,612 --> 00:06:53,874
project has been open source for more

85
00:06:53,912 --> 00:06:58,034
than five years. So I guess it's so

86
00:06:58,072 --> 00:07:02,610
mature for us to create your sharding

87
00:07:02,950 --> 00:07:06,230
Sophia or sharding ecosystem around

88
00:07:06,300 --> 00:07:10,550
your postgreSQL or MySQL users.

89
00:07:10,890 --> 00:07:14,774
And if you want to learn more about

90
00:07:14,812 --> 00:07:18,602
this project, it has a website, Twitter linking any

91
00:07:18,656 --> 00:07:22,038
channel you can pick up. Yeah so that's

92
00:07:22,054 --> 00:07:25,642
these community part, the NAS part we will enter into

93
00:07:25,696 --> 00:07:28,998
the technique or about its feature

94
00:07:29,094 --> 00:07:32,240
or what this project can help us do.

95
00:07:32,610 --> 00:07:35,962
First. It's like the catalog

96
00:07:36,026 --> 00:07:40,190
of this project because this ecosystem

97
00:07:40,530 --> 00:07:44,590
it has many features around your database.

98
00:07:44,750 --> 00:07:48,494
It has two clients or products for user

99
00:07:48,542 --> 00:07:52,900
to choose. Also it support many

100
00:07:53,270 --> 00:07:56,502
traditional dbms. So here

101
00:07:56,556 --> 00:07:59,160
you can see for the feature part,

102
00:08:00,250 --> 00:08:03,314
maybe you want to use a feature like Vrise

103
00:08:03,362 --> 00:08:07,080
building shadow database for your

104
00:08:07,470 --> 00:08:11,606
load test and sharding database gateway,

105
00:08:11,718 --> 00:08:15,782
SQL audit or provides any features

106
00:08:15,846 --> 00:08:19,258
I mentioned here you can just use and by

107
00:08:19,424 --> 00:08:23,214
tell this system that you want to use one of these

108
00:08:23,252 --> 00:08:27,198
features and you can use the distributed SQL or

109
00:08:27,284 --> 00:08:30,878
configuration YaML file to tell this

110
00:08:31,044 --> 00:08:34,414
product or tell this application that

111
00:08:34,532 --> 00:08:38,206
you want to use sharding, you want to use the database gateway.

112
00:08:38,318 --> 00:08:42,158
But today we just focus on sharding and data encryption.

113
00:08:42,254 --> 00:08:45,640
There is the interesting part, I want to mention that

114
00:08:46,170 --> 00:08:50,790
although you will see many of the features but these features,

115
00:08:51,930 --> 00:08:55,894
apparently they are independent but you

116
00:08:55,932 --> 00:08:59,370
can uses some of them together. That means

117
00:08:59,440 --> 00:09:02,602
you can pick up some

118
00:09:02,656 --> 00:09:06,234
features and group these features into a

119
00:09:06,272 --> 00:09:09,990
complete new solution. Yeah. So today because

120
00:09:10,080 --> 00:09:14,990
we want to create a secure and sharding cluster

121
00:09:15,410 --> 00:09:18,426
with sharding Sophia with your postgres instance.

122
00:09:18,538 --> 00:09:22,154
So that means we want to group sharding

123
00:09:22,202 --> 00:09:25,670
and data encryption to create our cluster.

124
00:09:25,850 --> 00:09:29,314
So that's about the features part. The next part I

125
00:09:29,352 --> 00:09:33,010
want to say that this ecosystem or this community

126
00:09:33,160 --> 00:09:36,386
have two clients for you to choose. First one is

127
00:09:36,408 --> 00:09:39,654
sharing Sophia Proxy. Sharding safe proxy like

128
00:09:39,692 --> 00:09:42,946
the gateway or like the proxy,

129
00:09:42,978 --> 00:09:46,680
it can help you do some computing or to

130
00:09:48,350 --> 00:09:51,942
handle ways to manage your traffic over statements

131
00:09:52,006 --> 00:09:56,486
or queries. But you need to independently

132
00:09:56,598 --> 00:10:00,910
deploy it like

133
00:10:01,060 --> 00:10:04,462
the second diagram showed you.

134
00:10:04,596 --> 00:10:08,510
The second part here is the sharding SaFi proxy. The right

135
00:10:08,580 --> 00:10:12,330
column right. You can see you need a server

136
00:10:12,410 --> 00:10:15,502
and to deploy it. And then your

137
00:10:15,556 --> 00:10:20,018
sharding SaFi proxy these end plus your

138
00:10:20,184 --> 00:10:24,402
postgres instance, they can group and

139
00:10:24,456 --> 00:10:27,630
become a distributed database.

140
00:10:27,790 --> 00:10:31,750
Because this sharding surface proxy, it works

141
00:10:31,900 --> 00:10:35,442
as a server. So you can use like a CLI

142
00:10:35,586 --> 00:10:38,642
or some DB admin

143
00:10:38,786 --> 00:10:42,234
tools to connect to the sharding sufficient proxy and

144
00:10:42,272 --> 00:10:45,930
use it as a standard postgres instance or

145
00:10:46,000 --> 00:10:46,810
deserves.

146
00:10:48,830 --> 00:10:52,734
Currently this sharding Sophia proxy supports two

147
00:10:52,852 --> 00:10:57,086
dbms. First, MySQL. That means you

148
00:10:57,108 --> 00:11:00,446
can have a sharing Sophia proxy for

149
00:11:00,548 --> 00:11:04,254
MySQL. Alternatively you can have

150
00:11:04,292 --> 00:11:07,706
the sharing Sophia proxy for PostgreSQL.

151
00:11:07,818 --> 00:11:12,826
It's up to you. So today we will choose PostgreSQL

152
00:11:13,018 --> 00:11:17,282
to become this the storage nodes

153
00:11:17,346 --> 00:11:20,440
of this distributed system.

154
00:11:20,970 --> 00:11:24,690
Another product is sharding Sophia GDBC.

155
00:11:24,770 --> 00:11:28,194
It's a lightweight GDBC driver.

156
00:11:28,322 --> 00:11:32,234
So if you want to use sharding Sophia GDBC, that means

157
00:11:32,432 --> 00:11:36,346
it integrates with your application, your application

158
00:11:36,528 --> 00:11:40,558
and sharding Sophia GDBC will are

159
00:11:40,644 --> 00:11:44,750
deployed in the same machine or server.

160
00:11:45,410 --> 00:11:49,434
But sharding SUV GDBC, it implements

161
00:11:49,562 --> 00:11:52,666
most of these GDBC interface.

162
00:11:52,778 --> 00:11:57,422
That means sharding SUV GDBC can support PostgreSQL,

163
00:11:57,486 --> 00:12:01,230
MySQL, Oracle or SQL server.

164
00:12:01,310 --> 00:12:05,410
Yeah, so it has more sports for your database.

165
00:12:05,830 --> 00:12:10,834
All right, so today, like I

166
00:12:10,872 --> 00:12:14,514
say here, we choose the sharding data encryption

167
00:12:14,562 --> 00:12:17,954
features and choose the sharding field

168
00:12:18,012 --> 00:12:21,466
proxy for PostgreSQL to create

169
00:12:21,568 --> 00:12:24,460
our solution. Yeah. All right,

170
00:12:27,630 --> 00:12:31,406
so before we enter into the introducing of

171
00:12:31,428 --> 00:12:35,294
the solution, I want to give some case about how to

172
00:12:35,332 --> 00:12:39,306
underlying sharding with Sharding Sophia proxy

173
00:12:39,418 --> 00:12:42,822
and data encryption with sharding Sophia proxy.

174
00:12:42,986 --> 00:12:46,930
What's these meaning of such issues? First case

175
00:12:47,000 --> 00:12:50,994
is the sharding, right. In sharding case that means at the

176
00:12:51,032 --> 00:12:55,210
beginning you have the primary node for your postgresql

177
00:12:55,310 --> 00:12:58,774
replicate nodes of your postgresql. But when you

178
00:12:58,812 --> 00:13:01,986
import the sharding Sophia or deploy the sharding

179
00:13:02,018 --> 00:13:05,206
Sophia and all of the calculation just widows to these

180
00:13:05,228 --> 00:13:09,494
sharding Sophia proxy, that means these computing

181
00:13:09,542 --> 00:13:13,574
nodes and the proxy

182
00:13:13,622 --> 00:13:18,250
will do some calculation and to locate

183
00:13:18,910 --> 00:13:23,374
which PostgreSQL or which instance is for

184
00:13:23,492 --> 00:13:27,098
these target SQL or this target statement.

185
00:13:27,274 --> 00:13:31,262
So the Sharding Sophia proxy will help you manage

186
00:13:31,396 --> 00:13:35,262
all of the sharding of this distributed

187
00:13:35,326 --> 00:13:38,770
system. Yeah, but another case about data

188
00:13:38,840 --> 00:13:42,770
encryption. So what's the data encryption? Data encryption

189
00:13:43,110 --> 00:13:48,002
in this case, actually it's not a distributed

190
00:13:48,066 --> 00:13:52,390
system. Right, because you can see here the

191
00:13:52,460 --> 00:13:55,702
application just width one proxy and one

192
00:13:55,756 --> 00:13:59,414
proxy will just wit one PostgreSQL instance.

193
00:13:59,542 --> 00:14:02,762
But it's a feature or function that it can

194
00:14:02,816 --> 00:14:06,700
help to decrypt or encrypt your

195
00:14:08,830 --> 00:14:13,258
privacy information automatically or internally.

196
00:14:13,434 --> 00:14:16,794
Here, like you have a table named these user table

197
00:14:16,922 --> 00:14:20,654
and there is the telephone number column of

198
00:14:20,692 --> 00:14:23,780
this table. So you cannot store

199
00:14:24,150 --> 00:14:27,790
the plain text into your postgresql,

200
00:14:27,870 --> 00:14:31,940
right? So the sharding Sophia can help you to

201
00:14:32,950 --> 00:14:37,294
decrypt this privacy info

202
00:14:37,422 --> 00:14:41,330
and these store it in the postgresql.

203
00:14:41,410 --> 00:14:45,106
So these you can see the cipher text of your telephone

204
00:14:45,138 --> 00:14:48,730
number. Conversely, if your application

205
00:14:48,880 --> 00:14:52,794
want to get the exact plain text of

206
00:14:52,832 --> 00:14:56,458
your telephone number, the sharding SaFI proxy will first

207
00:14:56,544 --> 00:15:00,502
get the target cipher

208
00:15:00,566 --> 00:15:04,254
text and then decrypt the

209
00:15:04,372 --> 00:15:08,702
information and return these

210
00:15:08,756 --> 00:15:12,230
plain text to your end users.

211
00:15:12,410 --> 00:15:16,274
So that's the function of this case. The last one I

212
00:15:16,312 --> 00:15:20,062
just give a mention, that is the database gateway.

213
00:15:20,206 --> 00:15:23,938
Database gateway. That means here

214
00:15:24,024 --> 00:15:27,734
the computing nodes or sharding Sophia proxy, it's like

215
00:15:27,772 --> 00:15:31,542
the I five or like the

216
00:15:31,676 --> 00:15:34,886
NGX. It can help you manage

217
00:15:34,988 --> 00:15:38,630
your traffics or queries or statements.

218
00:15:39,050 --> 00:15:42,554
How? Here you have two

219
00:15:42,752 --> 00:15:47,094
postgres cluster, one of that. These primary

220
00:15:47,142 --> 00:15:50,414
nodes have two replicas. So you

221
00:15:50,452 --> 00:15:54,874
want proxy to automatically split

222
00:15:54,922 --> 00:15:58,720
or share your traffic among this

223
00:15:59,250 --> 00:16:02,746
privacy nodes. And two of the replica nodes,

224
00:16:02,858 --> 00:16:06,322
maybe like 20% of the requirements will

225
00:16:06,376 --> 00:16:10,494
be sent to the first replica, but remaining

226
00:16:10,542 --> 00:16:15,102
18% of the sqls will

227
00:16:15,176 --> 00:16:19,062
visit the second replicas. But nor about

228
00:16:19,116 --> 00:16:23,030
the whole process of the traffic

229
00:16:23,850 --> 00:16:26,950
distribution. Your proxy or

230
00:16:27,020 --> 00:16:31,082
sharding Sophia proxy, just tell him that by

231
00:16:31,136 --> 00:16:35,050
your application about your uses or strategies around

232
00:16:35,120 --> 00:16:39,002
your traffic. Then sharding Sophia can help pass

233
00:16:39,056 --> 00:16:42,766
the SQL and then send the

234
00:16:42,788 --> 00:16:46,638
SQL to the target replica or your

235
00:16:46,724 --> 00:16:50,846
primary nodes. So that's the database gateway case.

236
00:16:51,028 --> 00:16:54,930
But today we just use the sharding plus data

237
00:16:55,000 --> 00:16:58,660
encryption to help us to solve today's issue.

238
00:16:59,030 --> 00:17:02,962
So entering today's case

239
00:17:03,096 --> 00:17:06,718
we just want to create these cluster

240
00:17:06,814 --> 00:17:10,422
distributed cluster. In this cluster you can see that your

241
00:17:10,476 --> 00:17:13,942
application in the top level and these your

242
00:17:13,996 --> 00:17:18,422
application standard. Visit your sharding Sophia proxy.

243
00:17:18,486 --> 00:17:22,230
That means the computing nodes and then the sharding proxy

244
00:17:22,310 --> 00:17:25,754
do some calculation and cases your sql understand

245
00:17:25,872 --> 00:17:29,126
SQL and resend

246
00:17:29,318 --> 00:17:33,214
this SQL or one sql to one of the

247
00:17:33,412 --> 00:17:37,146
Postgresql instance gather without merge

248
00:17:37,258 --> 00:17:40,654
out and then return the final readout to

249
00:17:40,692 --> 00:17:44,034
your application. But here there are two

250
00:17:44,072 --> 00:17:47,630
features mentioned. First it's the sharding

251
00:17:47,710 --> 00:17:50,834
because imagine that your proxy have

252
00:17:50,872 --> 00:17:53,730
the logic table. I mean the logic table,

253
00:17:55,210 --> 00:17:58,854
it's not these physical tables because the actor table or

254
00:17:58,892 --> 00:18:03,382
the physical table located in your two

255
00:18:03,436 --> 00:18:07,110
of the postgresql instance maybe named t

256
00:18:07,180 --> 00:18:10,762
user zero. From t user zero to t

257
00:18:10,816 --> 00:18:14,010
user one. And these same here in demo

258
00:18:14,080 --> 00:18:18,490
ds one, right. So there are two postgresql,

259
00:18:18,910 --> 00:18:23,054
demo ds zero, demo ds one. They all called

260
00:18:23,172 --> 00:18:26,970
storage nodes and the table

261
00:18:27,130 --> 00:18:30,954
actual table located in such postgresql instance.

262
00:18:31,082 --> 00:18:34,430
But for your applications, for your proxy

263
00:18:34,510 --> 00:18:37,730
these are only one table t user, right?

264
00:18:37,800 --> 00:18:41,310
So one table t user,

265
00:18:41,390 --> 00:18:45,470
it's my ping to four actual table or physical

266
00:18:45,550 --> 00:18:48,998
tables. Yeah, so that's the one keeps

267
00:18:49,084 --> 00:18:52,614
the next one is imagine this,

268
00:18:52,652 --> 00:18:56,774
users have the privacy information

269
00:18:56,972 --> 00:19:00,140
telephone number. Yeah, telephone number.

270
00:19:00,670 --> 00:19:04,794
We need to encrypt the plain text

271
00:19:04,992 --> 00:19:08,602
and send the cipher tax

272
00:19:08,736 --> 00:19:12,506
into your postgresql instance. So that's

273
00:19:12,538 --> 00:19:16,254
the encryption feature. So this case you

274
00:19:16,292 --> 00:19:20,094
use sharding and data encryption together. That's the

275
00:19:20,132 --> 00:19:24,194
value of this case. Then how

276
00:19:24,232 --> 00:19:28,290
to achieve that goal or how to create this solution?

277
00:19:28,950 --> 00:19:32,834
Well I gave the basic steps about how

278
00:19:32,872 --> 00:19:36,898
to create that cluster. First you need to prepare

279
00:19:36,994 --> 00:19:41,302
your storage nodes, that is the two

280
00:19:41,356 --> 00:19:44,662
PostgreSQl instance. Second,

281
00:19:44,796 --> 00:19:48,470
you need to deploy one proxy. Also you can deploy

282
00:19:48,550 --> 00:19:52,682
many proxies. You can group a proxies like

283
00:19:52,736 --> 00:19:56,218
the cluster and maybe your case need

284
00:19:56,304 --> 00:20:00,294
more computing nodes, need more

285
00:20:00,432 --> 00:20:04,058
computing power. Then you can deploy

286
00:20:04,234 --> 00:20:07,502
more than one proxy instance to

287
00:20:07,556 --> 00:20:11,054
help you balance all of the traffic from

288
00:20:11,092 --> 00:20:13,570
your application or web cases.

289
00:20:14,070 --> 00:20:17,634
So here in this case we just deploy one.

290
00:20:17,832 --> 00:20:21,026
And third step

291
00:20:21,128 --> 00:20:25,522
is to log in your proxy by the Db

292
00:20:25,586 --> 00:20:30,018
admin tools or GUI or CLI.

293
00:20:30,194 --> 00:20:33,478
Anyway you can visit your proxy or you can

294
00:20:33,564 --> 00:20:38,534
visit your postgresql server because as

295
00:20:38,572 --> 00:20:41,974
I before proxy, it works as

296
00:20:42,012 --> 00:20:45,046
the postgresql server, right?

297
00:20:45,148 --> 00:20:49,174
Yeah. So by step one, two, three you can

298
00:20:49,212 --> 00:20:52,478
create architecture on the

299
00:20:52,564 --> 00:20:56,478
left column and then

300
00:20:56,644 --> 00:21:00,030
that means by step one, two, three you create

301
00:21:00,100 --> 00:21:03,650
a distributed cluster

302
00:21:04,230 --> 00:21:07,890
and next one you need to buy using step

303
00:21:07,960 --> 00:21:12,340
of four five, six to fill this

304
00:21:13,030 --> 00:21:16,814
distribute the cluster with the sharding

305
00:21:16,862 --> 00:21:20,542
rule, sharding strategy, encryption rule,

306
00:21:20,606 --> 00:21:24,722
encrypt strategy or create many table,

307
00:21:24,866 --> 00:21:28,778
many schema, many database on these

308
00:21:28,944 --> 00:21:31,846
empty distributed database.

309
00:21:31,958 --> 00:21:35,930
That's clear, right? But how

310
00:21:36,000 --> 00:21:40,086
to tell these postgres to create like

311
00:21:40,128 --> 00:21:44,590
a sharding table not standard or single table to create more

312
00:21:44,740 --> 00:21:48,254
table with the encryption feature that means you

313
00:21:48,292 --> 00:21:51,982
need to use distributed SQL. Okay, I will give

314
00:21:52,036 --> 00:21:55,458
some details about this part. So by

315
00:21:55,544 --> 00:21:59,362
step four, five, six actually you make

316
00:21:59,416 --> 00:22:03,602
your cluster have the sharding feature, sharding function

317
00:22:03,736 --> 00:22:07,702
and the data encryption function. Though your application

318
00:22:07,836 --> 00:22:11,202
just witted these computing nodes,

319
00:22:11,266 --> 00:22:15,282
just witted the proxy and this distributed

320
00:22:15,346 --> 00:22:19,446
system can help you automatically sharding

321
00:22:19,558 --> 00:22:22,954
data and encrypt your data, decrypt your

322
00:22:22,992 --> 00:22:26,940
data. Yeah. So the step

323
00:22:27,870 --> 00:22:31,902
seven and eight will just give a test

324
00:22:32,036 --> 00:22:35,962
or input or insert some data or records

325
00:22:36,026 --> 00:22:39,806
and to do some test. So the NAS part or

326
00:22:39,828 --> 00:22:43,602
the later part I will give the folks on

327
00:22:43,736 --> 00:22:47,102
step two, how to deploy the proxy instance.

328
00:22:47,246 --> 00:22:51,042
Step five, how to use distributed SQL to create

329
00:22:51,096 --> 00:22:54,994
a sharding rule and encrypted rule. And the last one,

330
00:22:55,192 --> 00:22:59,138
these is some highlight on this part with your digital SQL.

331
00:22:59,234 --> 00:23:02,722
Yeah. So how to deploy your proxy.

332
00:23:02,786 --> 00:23:06,662
There are two ways for you to pick. The first one just uses

333
00:23:06,716 --> 00:23:10,380
these quickstart on sharding Sophia web page.

334
00:23:10,750 --> 00:23:14,490
It's easy, right? But there is a more

335
00:23:14,560 --> 00:23:17,946
efficient way for you to choose that is use the

336
00:23:18,048 --> 00:23:21,734
Sophia ex booting. Sophia ex

337
00:23:21,792 --> 00:23:25,242
boot is developers by the Python language

338
00:23:25,386 --> 00:23:29,246
and it can help you quickly one

339
00:23:29,348 --> 00:23:33,630
command to create your computing nodes

340
00:23:33,710 --> 00:23:36,980
and the governance center together.

341
00:23:37,350 --> 00:23:41,282
So by use these vs boot it can help

342
00:23:41,336 --> 00:23:44,830
you help you quickly create the cluster,

343
00:23:44,910 --> 00:23:49,102
the computing cluster and with one command.

344
00:23:49,246 --> 00:23:52,360
So that's the efficiency of this product.

345
00:23:53,210 --> 00:23:56,706
There are two way for you and I also give your links

346
00:23:56,738 --> 00:24:01,814
for you to visit after you deploy

347
00:24:01,862 --> 00:24:05,402
the sharding Sophia proxy. These next one that you need to learn

348
00:24:05,456 --> 00:24:09,398
and use distributed SQL. So what's

349
00:24:09,414 --> 00:24:13,934
these distributed SQL. When this

350
00:24:14,052 --> 00:24:19,022
word mentioned SQl that means it's a language like

351
00:24:19,076 --> 00:24:22,474
talk about your postgresql. If you want to make

352
00:24:22,532 --> 00:24:25,614
your postgreSQl instance to work like create a schema,

353
00:24:25,662 --> 00:24:29,474
create a database, create a table, you needed to use postgres and

354
00:24:29,512 --> 00:24:33,550
SQL dialect, right? And here distributed SQL,

355
00:24:33,630 --> 00:24:37,542
it's sharding Sophia SQL dialect for

356
00:24:37,596 --> 00:24:41,430
your postgres instance. Maybe you have

357
00:24:41,500 --> 00:24:45,746
other language, other SQL like MySQL

358
00:24:45,858 --> 00:24:49,414
dialect, Oracle dialect. Here it's these

359
00:24:49,452 --> 00:24:53,594
sharding Sophia dialogue card distributed SQL. So you

360
00:24:53,632 --> 00:24:57,178
use PostgreSQL SQL standard SQL to create a

361
00:24:57,184 --> 00:25:01,210
table to create alter

362
00:25:01,290 --> 00:25:04,042
the table or drop your schema.

363
00:25:04,106 --> 00:25:07,934
Yeah, it's very simple, right? But you use SQL to

364
00:25:07,972 --> 00:25:11,994
communicate with your database with your postgres instance

365
00:25:12,122 --> 00:25:15,614
here, the distributed SQL. It's the SQL

366
00:25:15,662 --> 00:25:19,198
like statement. It can help you to communicate

367
00:25:19,294 --> 00:25:23,714
with sharding Sophia. Although sharding Sophia can understand

368
00:25:23,912 --> 00:25:27,774
all the postgreSQL standard SQL

369
00:25:27,902 --> 00:25:32,378
sharding Sophia can also understand Sharding

370
00:25:32,414 --> 00:25:36,258
Sophia SQL dialogue. That means distributed SQL

371
00:25:36,434 --> 00:25:40,490
advanced feature, advanced understanding capability.

372
00:25:42,190 --> 00:25:44,826
But why do you want to uses them?

373
00:25:44,928 --> 00:25:48,570
Because as I said, your sharding Sophia

374
00:25:49,070 --> 00:25:52,110
plus your traditional dbms,

375
00:25:53,730 --> 00:25:58,602
they work together and collaborate

376
00:25:58,666 --> 00:26:03,030
with each other to create distributed

377
00:26:03,130 --> 00:26:07,406
database, cluster or a distributed database.

378
00:26:07,598 --> 00:26:11,026
So if you want to use the database, if you want

379
00:26:11,048 --> 00:26:14,974
to use this distributed base to create some

380
00:26:15,112 --> 00:26:18,546
sharding table or distributed table,

381
00:26:18,658 --> 00:26:22,418
distributed database and distributed schema

382
00:26:22,514 --> 00:26:25,762
or like make these distributed

383
00:26:25,826 --> 00:26:29,590
system have some data encryption SQL

384
00:26:30,350 --> 00:26:33,590
audit or some distributed privileges

385
00:26:33,750 --> 00:26:37,606
this advanced or the enhanced features.

386
00:26:37,718 --> 00:26:40,922
That means you need another language that

387
00:26:40,976 --> 00:26:44,790
distributes SQL to tell this distributed

388
00:26:44,870 --> 00:26:48,174
system. Could you get a point to run while?

389
00:26:48,292 --> 00:26:52,174
Yeah. So you can see some examples of

390
00:26:52,212 --> 00:26:55,554
distributed SQL when you

391
00:26:55,592 --> 00:26:59,090
first give a glance. It's very similar

392
00:26:59,240 --> 00:27:03,086
to your postgres SQL but it's

393
00:27:03,118 --> 00:27:07,254
a little different, right. So you can just log

394
00:27:07,292 --> 00:27:11,094
in by CLI to run this distributed SQL to

395
00:27:11,132 --> 00:27:14,600
help you before you need to

396
00:27:16,170 --> 00:27:19,446
five step five. You need to run distributed SQL

397
00:27:19,478 --> 00:27:23,482
to create a sharding rule and encrypt rule, right? That means to fill

398
00:27:23,536 --> 00:27:27,642
more metadata or create a sharding table in

399
00:27:27,696 --> 00:27:30,682
this cluster database.

400
00:27:30,746 --> 00:27:34,778
Cluster sharding system. Yeah. So that's

401
00:27:34,794 --> 00:27:38,446
these distributed SQL also plus it can help you

402
00:27:38,548 --> 00:27:42,686
manage this cluster here. Like this cases.

403
00:27:42,868 --> 00:27:46,002
Sorry, this case when you

404
00:27:46,056 --> 00:27:49,710
run some of the distributed SQL,

405
00:27:49,790 --> 00:27:54,574
it can also tell you that this sharding

406
00:27:54,622 --> 00:27:58,598
system, it has two

407
00:27:58,684 --> 00:28:02,374
storage nodes and one computer nodes and what

408
00:28:02,412 --> 00:28:05,378
status of each of the nodes.

409
00:28:05,474 --> 00:28:09,190
So use them to manage your

410
00:28:09,340 --> 00:28:13,194
cluster. Yeah, I have no

411
00:28:13,232 --> 00:28:14,060
more time.

412
00:28:19,070 --> 00:28:23,562
All right. I introducing

413
00:28:23,626 --> 00:28:27,774
the distributed SQL and value for these

414
00:28:27,892 --> 00:28:31,022
sharding system. You can see here

415
00:28:31,076 --> 00:28:34,926
like the show instance nodes to show you

416
00:28:35,028 --> 00:28:37,940
that what's these nodes in these system.

417
00:28:38,550 --> 00:28:42,580
And here I give the complete

418
00:28:43,910 --> 00:28:47,800
test example or demo for you to create

419
00:28:48,970 --> 00:28:52,134
this architecture. But I have no

420
00:28:52,172 --> 00:28:54,982
time to introduce them one by one.

421
00:28:55,116 --> 00:28:59,318
So just give you the skeleton

422
00:28:59,414 --> 00:29:04,970
by logging, add the resources

423
00:29:06,350 --> 00:29:09,562
or your storage nodes and then

424
00:29:09,696 --> 00:29:12,826
create the sharding table

425
00:29:12,938 --> 00:29:17,002
by these distributed SQL and insert

426
00:29:17,066 --> 00:29:21,182
some data for testing. And then here

427
00:29:21,316 --> 00:29:24,834
when you run the select statement on

428
00:29:24,872 --> 00:29:29,090
proxy, you will see that all of the logic information

429
00:29:29,240 --> 00:29:32,834
that this T user is a logical table and

430
00:29:32,872 --> 00:29:36,342
you can gather text plane of your telephone number

431
00:29:36,476 --> 00:29:40,514
but when you log in your physical postgresql

432
00:29:40,562 --> 00:29:44,754
instance you will found that all of the telephone

433
00:29:44,802 --> 00:29:48,426
number is encrypted into some

434
00:29:48,528 --> 00:29:52,554
string value. And also when you log

435
00:29:52,592 --> 00:29:56,410
in your actual postgresql you will found that there is

436
00:29:56,480 --> 00:30:00,654
no logic table t user but have one of the

437
00:30:00,772 --> 00:30:04,862
physical or actual table of this t

438
00:30:04,916 --> 00:30:08,670
user named t user zero or t

439
00:30:08,740 --> 00:30:12,922
user two. Yeah so that's the magic of this proxy

440
00:30:12,986 --> 00:30:17,460
or it really helping user to deal with a lot of these

441
00:30:18,630 --> 00:30:22,050
process about the sharding about the SQL audit

442
00:30:23,030 --> 00:30:27,320
et cetera. Yeah so that's these complete case

443
00:30:27,850 --> 00:30:31,286
of today's solution. If you

444
00:30:31,308 --> 00:30:35,090
want to have a these you can just copy and paste

445
00:30:35,250 --> 00:30:38,886
and also if you have any questions you can just contact

446
00:30:38,988 --> 00:30:42,662
me on my twitter or my linking or just

447
00:30:42,716 --> 00:30:46,434
visit the sharding Sophia GitHub and raise

448
00:30:46,482 --> 00:30:50,062
an issue. And also I'm waiting for your pr

449
00:30:50,156 --> 00:30:53,582
maybe if you want to join this community so that's fair

450
00:30:53,636 --> 00:30:54,780
time. See you next time.

