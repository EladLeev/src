1
00:00:37,250 --> 00:00:40,438
I'm excited two be with you here today. My name is Ben Rockwood. I'm the

2
00:00:40,444 --> 00:00:43,986
VP of engineering operations at Mondoo and I'm

3
00:00:44,018 --> 00:00:47,574
glad that you joined us to talk about cloud native posture management for

4
00:00:47,612 --> 00:00:51,710
all. I want to introduces you to two really exciting new

5
00:00:51,780 --> 00:00:55,086
open source projects that I think are

6
00:00:55,108 --> 00:00:57,966
going to have a profound impact on the industry. And I hope to share some

7
00:00:57,988 --> 00:01:01,338
of my thoughts on that with you today. Those projects

8
00:01:01,354 --> 00:01:04,160
are CN query and CNSPeC.

9
00:01:05,490 --> 00:01:10,034
We're in the area of security. And so before we

10
00:01:10,072 --> 00:01:12,802
get into the tools themselves, I just want to talk a little bit about security,

11
00:01:12,856 --> 00:01:16,526
but I want to take it in a different direction than frequently

12
00:01:16,558 --> 00:01:20,306
is done. A lot of times these presentations with anything regarding

13
00:01:20,338 --> 00:01:24,360
security start off with sort of ten minutes worth of talking about why

14
00:01:24,890 --> 00:01:28,006
the world is a dangerous place and all

15
00:01:28,028 --> 00:01:31,240
kinds of statistics. Look, you know that the world is a scary place.

16
00:01:31,850 --> 00:01:35,866
That's already established. I don't need to show you a bunch of slides to tell

17
00:01:35,888 --> 00:01:39,034
you that it's a terrible place, but I want to make you think about

18
00:01:39,072 --> 00:01:43,102
security in a slightly different way than maybe you

19
00:01:43,156 --> 00:01:46,718
have. And I want to make it a lot more, hopefully, practical for you.

20
00:01:46,884 --> 00:01:50,880
So let's talk some terms here. So first,

21
00:01:51,250 --> 00:01:53,140
security. What is security?

22
00:01:54,310 --> 00:01:59,314
It's a term that gets really highly charged and

23
00:01:59,352 --> 00:02:03,086
overweighted sometimes. Security just means that we are protecting

24
00:02:03,198 --> 00:02:06,910
what matters. We have the thing persons,

25
00:02:07,070 --> 00:02:11,046
there's something of value and we want to protect that. And that

26
00:02:11,068 --> 00:02:14,194
can be all manner of things. One of the most important things I would argue

27
00:02:14,242 --> 00:02:16,920
that you want to protect is the work that you do.

28
00:02:17,850 --> 00:02:21,222
You want to secure your infrastructure, you want to secure

29
00:02:21,286 --> 00:02:24,730
your cloud, you want to secure your facilities.

30
00:02:25,310 --> 00:02:28,586
But why is it you just putting locks on doors for the

31
00:02:28,608 --> 00:02:33,070
sake of putting locks on doors? Doing security for security sake

32
00:02:34,370 --> 00:02:38,382
is a tedious task. It's really

33
00:02:38,436 --> 00:02:41,614
fruitless, right? You end up going in circles and

34
00:02:41,652 --> 00:02:45,426
this is where you see security get really weird when

35
00:02:45,448 --> 00:02:49,154
it sort of goes off into this sort of weird place.

36
00:02:49,352 --> 00:02:54,610
Now we want to just think about it a lot more practically. We have things,

37
00:02:54,680 --> 00:02:58,550
we have assets, we have our time that we've

38
00:02:58,970 --> 00:03:02,600
put value into things and services that we provide

39
00:03:02,970 --> 00:03:06,374
to all manner of customers, and we want to protect those

40
00:03:06,412 --> 00:03:10,106
things that we've created from

41
00:03:10,208 --> 00:03:13,994
any form of harm. It doesn't matter whether it comes from a hacker or from

42
00:03:14,032 --> 00:03:18,300
ourselves. We want to protect the things that matter to us.

43
00:03:20,030 --> 00:03:23,406
Compliance is a super important part of

44
00:03:23,588 --> 00:03:27,102
sort of the overall security landscape. But a lot of times

45
00:03:27,156 --> 00:03:31,146
too, we get a little bit nervous about it. We think about people with clipboards

46
00:03:31,178 --> 00:03:34,354
and pointing fingers at us, but we got to

47
00:03:34,392 --> 00:03:38,018
step back and remember, compliance really is about doing

48
00:03:38,104 --> 00:03:41,682
what we say we do. Right? We have

49
00:03:41,736 --> 00:03:45,262
policies. We have procedures. Are we following those procedures?

50
00:03:45,326 --> 00:03:48,914
What's the point of all that? If we're not actually following

51
00:03:48,962 --> 00:03:52,294
the procedures that we've written down, then we need to change the

52
00:03:52,332 --> 00:03:55,606
procedures. The answer to compliance is

53
00:03:55,628 --> 00:03:59,426
not to be afraid that you're going to get punished

54
00:03:59,458 --> 00:04:03,014
or disciplined in some way. What you need to do when you approach compliance

55
00:04:03,062 --> 00:04:06,380
is you need to think about, what do we really need to be doing?

56
00:04:07,310 --> 00:04:09,660
And then let's make sure we're go doing that thing.

57
00:04:10,110 --> 00:04:13,646
Your auditor should really be your friend. They should be coming and letting you

58
00:04:13,668 --> 00:04:17,802
know where you have procedures that maybe are outdated

59
00:04:17,866 --> 00:04:21,486
or ridiculous or just don't apply. Two, your infrastructure. The thing to do there

60
00:04:21,508 --> 00:04:25,390
is not to try and find some way around those things.

61
00:04:25,460 --> 00:04:29,202
It's to simply fix the procedures and the policies. They're yours, after all.

62
00:04:29,256 --> 00:04:32,754
I mean, they're for you and they're for your organization. You should make them your

63
00:04:32,792 --> 00:04:36,930
own. I know that there are regulations

64
00:04:37,290 --> 00:04:41,094
that are mandated in certain industries, and you only

65
00:04:41,132 --> 00:04:44,946
have so much control over those, but a lot of those have more latitude

66
00:04:44,978 --> 00:04:48,014
in them than most people want to accept.

67
00:04:48,162 --> 00:04:51,386
So compliance is really about doing what we

68
00:04:51,408 --> 00:04:53,340
say that we do.

69
00:04:55,550 --> 00:04:59,254
And in the middle of this is posture.

70
00:04:59,382 --> 00:05:02,190
Posture is all about situational awareness.

71
00:05:04,290 --> 00:05:07,600
In our infrastructures, in our day to day,

72
00:05:08,450 --> 00:05:11,946
we have these infrastructures that we've built that, frankly, they're not physical.

73
00:05:11,978 --> 00:05:15,540
We can't go and look at them with our eyes.

74
00:05:16,150 --> 00:05:20,130
These are machines existing in the cloud, in the Internet.

75
00:05:20,950 --> 00:05:24,466
We need to have projects and monitors to allow us to

76
00:05:24,488 --> 00:05:28,934
see inside these things. And they're complex to

77
00:05:28,972 --> 00:05:32,086
some degree. It would be awesome if we were in

78
00:05:32,108 --> 00:05:36,098
a factory and you could just stand on a catwalk

79
00:05:36,194 --> 00:05:39,862
and you could just look over the entire

80
00:05:39,916 --> 00:05:43,274
infrastructure, right? And you could just sort of see everything humming along. It's working,

81
00:05:43,392 --> 00:05:47,514
what's going and what's not. But we don't have that, right. These things

82
00:05:47,552 --> 00:05:51,822
are sort of imaginary. They're virtual. And so we need

83
00:05:51,876 --> 00:05:55,742
to have some ability to observe into this

84
00:05:55,796 --> 00:05:59,486
environment, and that's where posture really comes in. This is one

85
00:05:59,508 --> 00:06:02,910
of the critical things about security

86
00:06:03,060 --> 00:06:06,334
is being able to have an awareness of what's in our environment.

87
00:06:06,382 --> 00:06:10,238
And this is a very different type of monitoring or observability

88
00:06:10,334 --> 00:06:14,290
than we see when we're talking about, say, performance management

89
00:06:15,350 --> 00:06:18,674
or other sort of traditional SRE type monitoring

90
00:06:18,722 --> 00:06:21,926
applications. Where we're really concerned about the performance of the

91
00:06:21,948 --> 00:06:25,640
system. In this case, we're actually interested in a lot more detail

92
00:06:26,410 --> 00:06:29,894
because we need to be able to sort of see every part of our infrastructure

93
00:06:29,942 --> 00:06:34,486
and what is the state of that infrastructure. And more importantly,

94
00:06:34,678 --> 00:06:38,890
is getting to a sense of accuracy.

95
00:06:40,350 --> 00:06:43,658
Now, to segue just for a

96
00:06:43,664 --> 00:06:46,874
second, there are a lot of tools out there. One of the reasons

97
00:06:46,922 --> 00:06:50,526
that posture is a really difficult thing is that when you get

98
00:06:50,548 --> 00:06:53,406
into the security space and you get into the posture management space, there's a ton

99
00:06:53,428 --> 00:06:56,258
of tools out there and a lot of them are really good. I don't want

100
00:06:56,264 --> 00:06:59,422
to badmouth any single tool that's out there. There are a lot of great tools.

101
00:06:59,566 --> 00:07:02,994
The challenge with them is that

102
00:07:03,112 --> 00:07:06,350
they do one thing or one particular

103
00:07:06,440 --> 00:07:09,778
set of things really well. So you might find a really great tool that helps

104
00:07:09,794 --> 00:07:14,214
you out with scanning your AWS infrastructure or

105
00:07:14,332 --> 00:07:18,242
scanning your terraform, or scanning your kubernetes cluster

106
00:07:18,306 --> 00:07:22,198
or your containers. But there's this huge

107
00:07:22,284 --> 00:07:25,946
array of tools you very quickly sort of amass. And then there's this

108
00:07:25,968 --> 00:07:29,226
question of, well, how do you make all those tools work together? Can you make

109
00:07:29,248 --> 00:07:32,160
them work together? Should you even bother trying to make them work together?

110
00:07:35,490 --> 00:07:38,958
It's really challenging, right? And we just don't have time for that.

111
00:07:39,044 --> 00:07:42,234
The reality is that we have jobs we need to do. Most of us don't

112
00:07:42,282 --> 00:07:46,354
have the ability to sit around and sort of build

113
00:07:46,392 --> 00:07:49,906
these incredibly complex tool chains out of a

114
00:07:49,928 --> 00:07:52,946
variety of different tools. So we need something that can sort of cut through the

115
00:07:52,968 --> 00:07:56,626
noise and can simplify. And the way

116
00:07:56,648 --> 00:07:59,830
that we want to do that is through something that's much more extensible.

117
00:08:00,170 --> 00:08:03,910
And the best way to get extensible is to make sure that we're open source

118
00:08:05,610 --> 00:08:08,986
because we really want to get towards assurance. This is

119
00:08:09,008 --> 00:08:12,794
what matters to me very deeply. And Kubernetes and

120
00:08:12,832 --> 00:08:16,010
the cloud native world really bring

121
00:08:16,080 --> 00:08:19,770
a couple of new concepts that are really important, right? The heart of Kubernetes

122
00:08:21,250 --> 00:08:24,510
is this idea of a reconciliation loop, right?

123
00:08:24,660 --> 00:08:28,238
We have these controllers that are sitting there watching all these

124
00:08:28,244 --> 00:08:32,442
things that are happening and it's constantly looking at our desired

125
00:08:32,506 --> 00:08:35,806
state and our found state, right? What do

126
00:08:35,828 --> 00:08:38,750
we want, what do we expect and what is the actual sort of reality?

127
00:08:38,830 --> 00:08:42,180
And then it's rectifying those things, right? It's going to go and put

128
00:08:43,350 --> 00:08:45,640
the real state into the desired state.

129
00:08:48,250 --> 00:08:51,926
This is something that is great in

130
00:08:51,948 --> 00:08:54,600
kubernetes, but we kind of need it everywhere, don't we?

131
00:08:55,690 --> 00:08:59,334
And this is where posture really comes in, is trying to ensure

132
00:08:59,382 --> 00:09:03,420
that we have visibility so that we can actually react when

133
00:09:04,910 --> 00:09:08,154
the infrastructure in every part of our infrastructure is not in the state

134
00:09:08,272 --> 00:09:11,680
which we anticipate that we expect.

135
00:09:12,050 --> 00:09:16,174
And so a little

136
00:09:16,212 --> 00:09:19,786
personal aside, so one of the things that's

137
00:09:19,818 --> 00:09:24,366
been nagging at me for very decades,

138
00:09:24,478 --> 00:09:28,158
right, and all throughout the DevOps movement

139
00:09:28,254 --> 00:09:31,746
and what's come about with sre and cloud native and all

140
00:09:31,768 --> 00:09:35,186
that, nothing's really changed with regards to the fact that while

141
00:09:35,208 --> 00:09:39,074
I have lots of automation tools and I have lots of ways of creating

142
00:09:39,122 --> 00:09:42,646
change, there's not a lot out there and there haven't been really

143
00:09:42,668 --> 00:09:46,150
good models for helping me have some assurance

144
00:09:46,650 --> 00:09:50,106
that the things that I've built are in fact in the state that

145
00:09:50,128 --> 00:09:53,994
I wish they were built. Now, the way that we handled this

146
00:09:54,112 --> 00:09:57,754
in the sort of early DevOps days, DevOps days,

147
00:09:57,792 --> 00:10:01,274
DevOps era was through configuration

148
00:10:01,322 --> 00:10:05,310
management. And we told ourselves an interesting farce,

149
00:10:05,890 --> 00:10:09,486
which is that we're going two define infrastructure as

150
00:10:09,508 --> 00:10:13,838
code and we are going to have a

151
00:10:13,924 --> 00:10:17,266
given state and we're going to go ahead and we're going to deploy that and

152
00:10:17,288 --> 00:10:21,054
it's going to change the infrastructure to meet my desired

153
00:10:21,102 --> 00:10:25,006
state. But the thing is, we don't do that continuously,

154
00:10:25,038 --> 00:10:28,774
right? We didn't have the mechanism in most cases to do that continuously. So we

155
00:10:28,812 --> 00:10:31,506
say, well, how do I know that my infrastructure is the way that I intended

156
00:10:31,538 --> 00:10:35,698
it to be? Well, I'm going to go run my infrastructure

157
00:10:35,714 --> 00:10:38,886
as code. Okay, so you run your

158
00:10:38,908 --> 00:10:42,214
infrastructure as code. Oh, it found a number of things that drift.

159
00:10:42,262 --> 00:10:45,658
Right. We call this configuration drift. And so let's put it

160
00:10:45,664 --> 00:10:49,114
back the way that it's supposed to be. Then we wait some

161
00:10:49,152 --> 00:10:52,506
period of time, an hour, 6 hours a day, and we

162
00:10:52,528 --> 00:10:55,866
run our tool again. Configuration drift, bloop. It puts

163
00:10:55,898 --> 00:10:59,886
it back, right. There needs to

164
00:10:59,908 --> 00:11:03,978
be a more continuous way of being able to audit our infrastructure

165
00:11:04,074 --> 00:11:07,554
to be aware of its current state and whether or not it's in the state

166
00:11:07,592 --> 00:11:09,780
that we desire it to be.

167
00:11:12,630 --> 00:11:15,380
And a lot of this really comes down to peace of mind, right.

168
00:11:16,070 --> 00:11:19,506
When I build a new system, I don't

169
00:11:19,538 --> 00:11:23,030
want to continuously add this operational burden to myself

170
00:11:23,180 --> 00:11:26,678
that I have to constantly remember to go and check something to make sure

171
00:11:26,684 --> 00:11:28,918
that it's the way I intended it to be. I want to be able to

172
00:11:28,924 --> 00:11:31,706
set it and sort of forget it. And that means that I need to be

173
00:11:31,728 --> 00:11:35,386
able to have some mechanism to go back and sort of

174
00:11:35,488 --> 00:11:38,682
watch what the state of that thing is to ensure that

175
00:11:38,736 --> 00:11:42,026
if there were some kind of drift, if it weren't in the

176
00:11:42,048 --> 00:11:45,502
state that it was supposed to be that I would be notified of that now.

177
00:11:45,636 --> 00:11:49,438
What does it have to do with security? If you think about a

178
00:11:49,444 --> 00:11:52,614
lot of security, most security vulnerabilities and whatnot,

179
00:11:52,682 --> 00:11:56,034
security posture issues come down to really two

180
00:11:56,072 --> 00:11:59,374
sort of things. One is running outdated

181
00:11:59,422 --> 00:12:01,940
software, software that's just vulnerable, right?

182
00:12:04,310 --> 00:12:07,666
That's problematic because the bad guys, or anybody who wants to do harm to you,

183
00:12:07,688 --> 00:12:11,542
they're out there just looking for somebody, running old versions of software that they can

184
00:12:11,596 --> 00:12:16,374
exploit. We'd all like to think that most hackers out there are these

185
00:12:16,412 --> 00:12:20,018
people coming up with these really innovative ways to

186
00:12:20,044 --> 00:12:23,814
break into systems. But the reality is, that's not what most hackers

187
00:12:23,862 --> 00:12:27,002
are, right? I mean, that's a security researcher, right?

188
00:12:27,056 --> 00:12:30,810
Most hackers are not that they're opportunistic. They're looking for

189
00:12:30,960 --> 00:12:34,426
things that are out there that have known vulnerabilities that

190
00:12:34,448 --> 00:12:37,598
they can exploit in order to get into the system, or at least get a

191
00:12:37,604 --> 00:12:40,814
little further into the system so that they can find other ways to exploit their

192
00:12:40,852 --> 00:12:44,826
way in. That's one. So certainly vulnerable

193
00:12:44,858 --> 00:12:48,146
software is a problem. We need to be on top of that. We need to

194
00:12:48,168 --> 00:12:51,746
be updating our software and having systems to help us to know when

195
00:12:51,768 --> 00:12:55,586
to update their software. But then the more egregious

196
00:12:55,618 --> 00:12:57,670
one actually is misconfiguration.

197
00:12:58,810 --> 00:13:02,674
You can put the most fancy door lock

198
00:13:02,722 --> 00:13:05,730
on your house. You can get all kinds of cameras,

199
00:13:05,810 --> 00:13:09,430
you can put razor wire, you cloud do all kinds of interesting

200
00:13:09,500 --> 00:13:12,674
and crazy things, but your

201
00:13:12,732 --> 00:13:15,994
biggest threat is your kids leaving the door open, right? I mean,

202
00:13:16,032 --> 00:13:19,098
if the door is open, it doesn't matter how many locks are on that thing.

203
00:13:19,264 --> 00:13:22,666
The door is open. And how many times have

204
00:13:22,688 --> 00:13:26,142
you had somebody maybe do a pen test of your organization, or you ran some

205
00:13:26,196 --> 00:13:29,502
scanners or whatnot, and you just found ports that were just open. Right.

206
00:13:29,636 --> 00:13:33,166
One of the most common ways that ransomware attacks begin

207
00:13:33,268 --> 00:13:34,960
is an open RDP port.

208
00:13:36,870 --> 00:13:40,846
It doesn't matter what security measures

209
00:13:40,878 --> 00:13:44,174
they have in place. I mean, fundamentally, they left the door open. Now, hopefully,

210
00:13:44,222 --> 00:13:47,974
that there are additional layers of security that will

211
00:13:48,012 --> 00:13:51,346
protect against that scenario. But fundamentally, you just left the door

212
00:13:51,378 --> 00:13:54,726
open. That's where you need to start,

213
00:13:54,828 --> 00:13:57,950
right there. What is the state of the machine?

214
00:13:58,050 --> 00:14:01,514
What should your infrastructure look like, and does it

215
00:14:01,552 --> 00:14:05,450
remain in that state? So assurance is

216
00:14:05,520 --> 00:14:09,194
sort of the thing that's really important to me and

217
00:14:09,232 --> 00:14:12,366
why I'm really excited about this approach, because I think it really gets to the

218
00:14:12,388 --> 00:14:16,480
heart of the issue beyond just security

219
00:14:19,010 --> 00:14:22,814
and compliance, but really gets to me

220
00:14:22,852 --> 00:14:26,434
as a practitioner day to day and to my teams, day to day, when we

221
00:14:26,472 --> 00:14:29,554
build something, can we build tests for

222
00:14:29,592 --> 00:14:33,186
it? Can we make sure that it's always in the state that it needs to

223
00:14:33,208 --> 00:14:36,420
be and not rely on something else?

224
00:14:37,830 --> 00:14:41,574
And so I want to introduce you to Cnquery. We have a pair of

225
00:14:41,612 --> 00:14:45,218
tools and the first one here I want to talk about is cnquery.

226
00:14:45,314 --> 00:14:48,726
These tools work together. Cnquery is

227
00:14:48,748 --> 00:14:52,134
a cloud native query tool. It's a graphql interface

228
00:14:52,182 --> 00:14:55,306
to all the things. And when I

229
00:14:55,328 --> 00:14:58,586
say all the things, I mean all the things. That's the extensible part of

230
00:14:58,608 --> 00:15:01,706
it. But there's an important word here,

231
00:15:01,808 --> 00:15:04,846
graphql. And I want to just spend a little bit of time just sort of

232
00:15:04,868 --> 00:15:08,586
digging into this as to what do I mean by graphql.

233
00:15:08,698 --> 00:15:12,778
Hopefully you've heard of GraphQl before. Maybe you've played with it, maybe you haven't,

234
00:15:12,954 --> 00:15:16,354
but it's a really neat way of approaching things. So let's just take a quick

235
00:15:16,392 --> 00:15:19,778
look here. So graphql in

236
00:15:19,784 --> 00:15:23,246
a nutshell. On the left here I have users,

237
00:15:23,358 --> 00:15:26,390
some curly braces and some terms.

238
00:15:26,460 --> 00:15:30,054
So in this case, users is

239
00:15:30,092 --> 00:15:33,814
an object that I'm calling and here

240
00:15:33,852 --> 00:15:38,022
I'm going to provide it some parameters out of that. So these are attributes

241
00:15:38,086 --> 00:15:41,290
that are on this user's object that I want.

242
00:15:41,360 --> 00:15:44,410
I want name, I want uid and I want Shell.

243
00:15:45,230 --> 00:15:49,130
And when I submit that query,

244
00:15:49,550 --> 00:15:53,594
what's going to happen is I'm going to get back the

245
00:15:53,632 --> 00:15:56,638
object the way I sort of defined it here, except all the data is going

246
00:15:56,644 --> 00:16:00,446
to be filled in. So in this case, the object users isn't just

247
00:16:00,468 --> 00:16:04,010
going to return one user, it's got to return a list of users.

248
00:16:04,090 --> 00:16:07,506
So I've got an array of users here and you can see for each of

249
00:16:07,528 --> 00:16:10,978
the elements in that array, I'm only returning the information

250
00:16:11,064 --> 00:16:14,482
that I want here name, Uid and Shell. Right.

251
00:16:14,616 --> 00:16:18,006
And so it's fundamentally kind

252
00:16:18,028 --> 00:16:22,422
of cool that as opposed to say rest,

253
00:16:22,476 --> 00:16:25,686
where one of the real problems was is that you put in a query and

254
00:16:25,868 --> 00:16:29,302
you only had these sort of very vague sort of ways of putting

255
00:16:29,356 --> 00:16:33,034
in requests. And so what you would get is way too much data

256
00:16:33,072 --> 00:16:36,906
out. So we had to come up all kinds of crazy tricks like pagination and

257
00:16:37,008 --> 00:16:40,234
things like that that are just really painful. And in this case

258
00:16:40,272 --> 00:16:43,360
we could just ask for the data that we need to get out.

259
00:16:43,970 --> 00:16:48,106
Okay, so let's look at another example. So here we're

260
00:16:48,138 --> 00:16:51,406
asking for users again, but this time we're actually passing a

261
00:16:51,428 --> 00:16:55,006
method or a function onto this object where so

262
00:16:55,028 --> 00:16:58,130
we're going to do a filter and in this case we're going to filter by

263
00:16:58,200 --> 00:17:01,266
name where the

264
00:17:01,288 --> 00:17:04,786
elements that come back are name equals Ben R. And here I've got my

265
00:17:04,808 --> 00:17:08,358
curly braces again. But you notice here that I'm actually saying star.

266
00:17:08,524 --> 00:17:12,710
So this unsurprisingly will come back with

267
00:17:12,780 --> 00:17:16,360
one element in the list here. Down here

268
00:17:17,210 --> 00:17:20,758
the tabbing is a little bit off, but these are elements on it.

269
00:17:20,924 --> 00:17:24,138
So I get one response back and it's for this

270
00:17:24,224 --> 00:17:27,338
user that matches name Ben R. And you can see

271
00:17:27,344 --> 00:17:30,546
I get a little more data. So this is actually returning all the data that's

272
00:17:30,598 --> 00:17:34,078
available. Okay, so with that

273
00:17:34,164 --> 00:17:37,678
little bit there, hopefully this gets you your eyes attuned to sort

274
00:17:37,684 --> 00:17:41,210
of what two look for here in terms of sort of objects,

275
00:17:41,370 --> 00:17:45,186
methods, ways that we can sort of filter. And then the way

276
00:17:45,208 --> 00:17:49,022
that we're specifying a query. That's the beauty of graphql.

277
00:17:49,086 --> 00:17:51,730
It's very simple and very powerful.

278
00:17:52,630 --> 00:17:55,806
Okay, so let's look at Cnquery

279
00:17:55,838 --> 00:17:59,702
itself. So this is Cnquery and

280
00:17:59,836 --> 00:18:03,494
we're going to run a query here.

281
00:18:03,692 --> 00:18:06,646
This is what we just looked at before, users name. And here you can see

282
00:18:06,668 --> 00:18:10,214
it's returned a list. I'm just looking at the name attribute

283
00:18:10,262 --> 00:18:13,414
for users. So I get root demon bin sys sync.

284
00:18:13,542 --> 00:18:17,530
Cool. So cnquery can go and look at a number of different aspects

285
00:18:18,830 --> 00:18:22,426
of an operating system in this case and pull back all

286
00:18:22,448 --> 00:18:25,690
kinds of data. We can get more complex.

287
00:18:25,770 --> 00:18:29,374
So in this case I'm using Cn query again. I actually can open a

288
00:18:29,412 --> 00:18:32,814
shell. So in this case I'm opening a shell and I'm actually sshing to

289
00:18:32,852 --> 00:18:36,370
a remote host. I'm providing an identity file

290
00:18:36,870 --> 00:18:40,258
in order to do that. And now that I'm connected to it,

291
00:18:40,424 --> 00:18:43,598
I can run a variety of queries against it. In this case I'm

292
00:18:43,614 --> 00:18:47,702
asking for ports and I'm filtering those ports by those which

293
00:18:47,756 --> 00:18:52,242
have the state of listen and the address is not localhost.

294
00:18:52,386 --> 00:18:55,762
And then I'm returning from that address port and protocol.

295
00:18:55,906 --> 00:18:59,478
And here you can see that data coming out. And so you can see

296
00:18:59,564 --> 00:19:02,718
this model is nice and generic.

297
00:19:02,754 --> 00:19:05,878
We can apply it to a variety of different systems.

298
00:19:05,974 --> 00:19:08,998
So one of the things we can do on top of say doing this locally

299
00:19:09,014 --> 00:19:12,954
or in this case doing SSH, is actually provide CNquery

300
00:19:13,002 --> 00:19:16,686
with an inventory list similar to what you would do in ansible. And then

301
00:19:16,708 --> 00:19:20,174
I can actually run this query or any query I want against

302
00:19:20,292 --> 00:19:23,986
my entire fleet. So in this case,

303
00:19:24,088 --> 00:19:27,490
a very simple query like this could really help you go out and find,

304
00:19:27,560 --> 00:19:30,894
say, ports that remain

305
00:19:30,942 --> 00:19:32,740
open that you don't expect to open.

306
00:19:35,030 --> 00:19:38,278
Better than scanning from the outside is scanning from the inside and being

307
00:19:38,284 --> 00:19:41,346
able to look at the host and actually see what ports are there. So there's

308
00:19:41,378 --> 00:19:44,760
all kinds of interesting and powerful capabilities there.

309
00:19:45,850 --> 00:19:49,206
We can scan clouds. So this is CNquery. Again, we're looking

310
00:19:49,228 --> 00:19:52,518
at the shell and we're actually scanning my GCP organization.

311
00:19:52,614 --> 00:19:55,306
I've xed out my id because you don't need to see it.

312
00:19:55,328 --> 00:19:58,618
But in this case I'm running a query here

313
00:19:58,704 --> 00:20:02,426
for Google Cloud. I'm looking at my project and

314
00:20:02,448 --> 00:20:05,966
I'm looking at cloud run and I'm looking at all the cloud run services.

315
00:20:06,068 --> 00:20:09,566
So that returns me back all my cloud run services. And in here I'm just

316
00:20:09,588 --> 00:20:13,038
asking for name and annotations and you can see some of

317
00:20:13,044 --> 00:20:16,410
the annotations that are coming back off those cloud run services. Now I

318
00:20:16,420 --> 00:20:19,666
can do this with every single object within GCP. I can do it with

319
00:20:19,688 --> 00:20:23,842
AWS and I can do it with Azure. So this gives me a

320
00:20:23,896 --> 00:20:28,120
single unified way of looking across a whole different

321
00:20:28,570 --> 00:20:32,082
variety of pieces of my infrastructure in one consistent

322
00:20:32,146 --> 00:20:35,734
way. Then that's the extensibility that

323
00:20:35,772 --> 00:20:39,500
I think is really key and missing from the other tools out there.

324
00:20:41,550 --> 00:20:44,970
So now that we've talked a little bit about CNquery,

325
00:20:45,870 --> 00:20:49,382
we can look at our infrastructure, we can investigate our infrastructure,

326
00:20:49,446 --> 00:20:52,734
we can collect data about our infrastructure. The other side

327
00:20:52,772 --> 00:20:57,290
of this is being able to create and report assertions.

328
00:20:57,450 --> 00:21:00,874
So CNSPEC is the sibling

329
00:21:00,922 --> 00:21:04,258
to CN query. And here we can actually

330
00:21:04,344 --> 00:21:08,354
create assertions using the same types of queries about

331
00:21:08,472 --> 00:21:11,570
any of the assets that we can actually interface with.

332
00:21:11,720 --> 00:21:15,506
So here's looking at users. Again, just to

333
00:21:15,528 --> 00:21:19,314
make this sort of simple, we're in the

334
00:21:19,352 --> 00:21:22,406
C CNSPeC shell has a shell, or you can

335
00:21:22,428 --> 00:21:25,814
run drug commands. And we'll talk about sort of where you would go with this.

336
00:21:25,852 --> 00:21:29,000
Obviously this is for development purposes usually,

337
00:21:29,610 --> 00:21:33,370
but here we can look at users and I can say that I want

338
00:21:33,440 --> 00:21:37,018
none of the elements to be Ben R.

339
00:21:37,104 --> 00:21:40,220
So where would you actually use something like this?

340
00:21:40,910 --> 00:21:44,286
Checking for offboarded employees is a

341
00:21:44,308 --> 00:21:47,982
really good thing to do, right? Don't just look for the employees you have

342
00:21:48,036 --> 00:21:51,614
actually run scans and maintain a list of all

343
00:21:51,652 --> 00:21:55,006
your offboarded users and make sure that you're constantly looking to make sure

344
00:21:55,028 --> 00:21:58,594
that they don't get back in there again. This is the case where you could

345
00:21:58,632 --> 00:22:01,826
be running a really nice automation suite or something like that. But one of your

346
00:22:01,848 --> 00:22:04,980
automation tools or one of your cookbooks, ansible, whatever.

347
00:22:05,510 --> 00:22:09,654
Somewhere in there it still has that user defined, right? And so next time

348
00:22:09,692 --> 00:22:12,459
somebody goes and runs ansible or runs a chef cookbook or something, all of a

349
00:22:12,959 --> 00:22:16,822
sudden the user pops back up, right? Were you looking

350
00:22:16,876 --> 00:22:20,300
for that? No, but you could have actually just created a very simple

351
00:22:21,390 --> 00:22:24,634
set of rules here and used it. So we see

352
00:22:24,672 --> 00:22:28,154
when we get this, instead of getting just the results back,

353
00:22:28,192 --> 00:22:32,102
what we see is that it's failed, right? Because we actually did find

354
00:22:32,256 --> 00:22:35,726
that user, right? Here's another example of the

355
00:22:35,748 --> 00:22:39,786
other side. So here I'm saying users, and I'm looking for records

356
00:22:39,818 --> 00:22:42,602
that contain name Ben R. And in here we get,

357
00:22:42,676 --> 00:22:46,082
okay, so we got one record back that contained that.

358
00:22:46,216 --> 00:22:51,006
And that's what I expected. So okay, this equals, equals we're

359
00:22:51,038 --> 00:22:54,340
making an assertion, right? And so this is

360
00:22:55,270 --> 00:22:58,814
where things really differ between C and query and CnSPeC.

361
00:22:58,872 --> 00:23:01,926
In one case we're looking at infrastructure, we're trying to get data about it.

362
00:23:01,948 --> 00:23:06,070
In the other case we're actually trying to make assertions about that infrastructure.

363
00:23:08,010 --> 00:23:11,014
Here's another one. So we can interface with GitHub.

364
00:23:11,142 --> 00:23:14,346
And in this case, and I

365
00:23:14,368 --> 00:23:17,494
broke this up a little bit so it's a little easier to visually parse.

366
00:23:17,542 --> 00:23:21,686
But here I'm running CNSPEC against GitHub. I'm looking@my.org

367
00:23:21,718 --> 00:23:25,146
so our GitHub organization is called Mondoo HQ.

368
00:23:25,338 --> 00:23:29,710
And the cnquery that I'm running here is looking at the GitHub organizations

369
00:23:30,450 --> 00:23:34,622
object itself. And I'm looking for two factor required enabled equals

370
00:23:34,686 --> 00:23:38,514
true. In this case I

371
00:23:38,552 --> 00:23:42,066
run that query and what I get back is it is true,

372
00:23:42,168 --> 00:23:43,860
it is true that it is true.

373
00:23:46,010 --> 00:23:49,446
This is something that there aren't a lot of great tools, I think,

374
00:23:49,468 --> 00:23:52,230
out there for scanning GitHub.

375
00:23:52,970 --> 00:23:57,858
Furthermore, there's an API, but writing

376
00:23:58,034 --> 00:24:01,930
interfaces for each of these APIs is really challenging. And this is the beauty

377
00:24:02,430 --> 00:24:06,026
of CNquery and CNSPEC is we've abstracted all

378
00:24:06,048 --> 00:24:10,540
those APIs, all those clouds, your operating system

379
00:24:11,390 --> 00:24:14,638
and all kinds of other things in such a way that we can interface with

380
00:24:14,644 --> 00:24:18,526
it in the same way no matter what it is that we're interfacing with.

381
00:24:18,708 --> 00:24:22,154
But while I wanted to show you what the query

382
00:24:22,202 --> 00:24:25,426
syntax looks like, because I'd like

383
00:24:25,448 --> 00:24:28,990
to be practical and I want you two see sort of what's under the hood,

384
00:24:29,070 --> 00:24:31,380
the reality is that's not where you need to start.

385
00:24:32,870 --> 00:24:36,550
We have query packs for CNquery and we have

386
00:24:36,620 --> 00:24:40,338
policies that are ready to use that are over in GitHub.

387
00:24:40,434 --> 00:24:43,542
Right now, and we have a ton of

388
00:24:43,596 --> 00:24:46,642
integrations. So today we have AWS,

389
00:24:46,706 --> 00:24:50,266
GCP, Azure, we have kubernetes and all the different layers of

390
00:24:50,288 --> 00:24:53,974
kubernetes as well. We have Docker, we have Docker

391
00:24:54,022 --> 00:24:58,134
registries, we have vMware, we have GitHub, GitLab, Google workspace,

392
00:24:58,182 --> 00:25:01,402
MS 365, Octa, Slack, Linux, macOS,

393
00:25:01,466 --> 00:25:04,682
Linux. We do Arista. They have APIs.

394
00:25:04,746 --> 00:25:08,910
We cloud talk to the API. We have an interface

395
00:25:09,250 --> 00:25:12,266
for Arista for your network, DNS,

396
00:25:12,298 --> 00:25:15,714
TLS, terraform, vagrant, all kinds of other

397
00:25:15,752 --> 00:25:20,050
things. And the important thing is this is open source, which means anybody

398
00:25:20,120 --> 00:25:24,306
can come and add additional resources to

399
00:25:24,328 --> 00:25:27,746
the host, to the system. So we're

400
00:25:27,778 --> 00:25:32,006
really excited. And when you think about this, think about the layering that

401
00:25:32,028 --> 00:25:36,038
you have here, right, is that we

402
00:25:36,044 --> 00:25:39,918
can scan the kubernetes, we can scan Docker

403
00:25:39,954 --> 00:25:43,386
agent, and then the registries that you're getting containers from, we can

404
00:25:43,568 --> 00:25:46,806
scan the operating systems and we can scan

405
00:25:46,838 --> 00:25:50,654
the clouds on top, right? So we have complete coverage in

406
00:25:50,692 --> 00:25:54,666
one platform. Here's a GitHub repository

407
00:25:54,698 --> 00:25:57,760
for CN query packs. You can download these today,

408
00:25:58,930 --> 00:26:02,906
run scans on them, you can use them as a basis to modify,

409
00:26:03,098 --> 00:26:06,402
same with CN spec. We've got policies for CN spec,

410
00:26:06,456 --> 00:26:09,874
a whole variety of them in GitHub ready for you to go and play

411
00:26:09,912 --> 00:26:12,994
with right now. And so this is

412
00:26:13,032 --> 00:26:16,606
what we think of as extensible security posture

413
00:26:16,638 --> 00:26:20,214
management, XSPM. And the key there is

414
00:26:20,252 --> 00:26:23,846
it's got to be open source, otherwise it can't be extended by anybody.

415
00:26:23,948 --> 00:26:27,170
And it's got to be cloud native. It's got to cover the entire stack,

416
00:26:27,250 --> 00:26:30,700
not just one particular vertical, one cloud,

417
00:26:31,230 --> 00:26:34,266
just kubernetes. It needs to be the

418
00:26:34,288 --> 00:26:38,390
entire stack that is extensible security posture

419
00:26:38,470 --> 00:26:42,518
management. You want to learn more, go to GitHub.com

420
00:26:42,624 --> 00:26:45,866
monduhq. Go get started right now. Start developing,

421
00:26:45,898 --> 00:26:49,150
start downloading, start using. You can learn more@mondoo.com

422
00:26:49,220 --> 00:26:52,960
we would love to talk to you if you want to get together

423
00:26:53,810 --> 00:26:57,326
and learn more. We have a complete platform built on top of it to help

424
00:26:57,348 --> 00:27:00,974
you with reporting and visualization. And I really

425
00:27:01,012 --> 00:27:05,106
appreciate your time. I hope that you can see here an exciting

426
00:27:05,178 --> 00:27:08,358
new era in what we can do in security and thinking about it in a

427
00:27:08,364 --> 00:27:12,054
whole different sort of cloud native way. Come join us

428
00:27:12,092 --> 00:27:15,526
on this journey. So thank you very much. Enjoy the rest of

429
00:27:15,548 --> 00:27:16,050
your conference.

