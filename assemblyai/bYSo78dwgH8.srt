1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:07,338
all from the comfort of a remote workplace?

3
00:00:07,514 --> 00:00:11,086
Andela has matched thousands of technologists across the globe to

4
00:00:11,108 --> 00:00:14,494
their next career adventure. We're empowering new

5
00:00:14,532 --> 00:00:18,094
talent worldwide, from Sao Paulo to Egypt and

6
00:00:18,132 --> 00:00:21,662
Lagos to Warsaw. Now the future of work

7
00:00:21,716 --> 00:00:25,686
is yours to create. Anytime, anywhere. The world is

8
00:00:25,708 --> 00:00:29,190
at your fingertips. This is Andela.

9
00:01:13,350 --> 00:01:17,446
Hi there, my name is Kazgir. I've been calling

10
00:01:17,548 --> 00:01:20,120
go for nearly four years now.

11
00:01:20,890 --> 00:01:24,994
Today I'd like to talk about how go works to bind

12
00:01:25,042 --> 00:01:29,162
a port and listen for the port when starting an

13
00:01:29,216 --> 00:01:32,074
HTTP. HTTP HTTP HTTP HTTP HTTP.

14
00:01:32,192 --> 00:01:35,846
HTTP. HTTP. HTTP. HTTP HTTP server on

15
00:01:35,878 --> 00:01:39,642
random available port inside of standard libraries. Net and

16
00:01:39,696 --> 00:01:43,402
syscall. I hope you'll find it helps

17
00:01:43,466 --> 00:01:47,322
you understand HTTP and TCP programming

18
00:01:47,386 --> 00:01:50,638
in go. First,

19
00:01:50,724 --> 00:01:54,382
let me introduce myself. I am a backend engineer

20
00:01:54,446 --> 00:01:58,494
at autify. Autify is a no code AI

21
00:01:58,542 --> 00:02:01,380
powered software testing automation platform.

22
00:02:02,310 --> 00:02:06,802
You can find me on Twitter. I've been publishing

23
00:02:06,866 --> 00:02:10,054
blogs and presentation materials on this

24
00:02:10,092 --> 00:02:14,200
Twitter account. Please follow me and check it out.

25
00:02:16,410 --> 00:02:19,480
Let me explain autify just a little more.

26
00:02:20,650 --> 00:02:24,422
First, autify allows anyone to automate testing

27
00:02:24,486 --> 00:02:28,486
with a no code solution. Otifi records

28
00:02:28,518 --> 00:02:32,430
the user's action on the service they want to test and

29
00:02:32,500 --> 00:02:34,990
converts it into a test scenario.

30
00:02:35,730 --> 00:02:39,162
Second, AI updates test scenario

31
00:02:39,306 --> 00:02:41,840
accordingly. As the application changes,

32
00:02:42,950 --> 00:02:47,250
it dramatically reduce maintenance cost for the users.

33
00:02:47,910 --> 00:02:51,854
We have two services, autify for web and OT,

34
00:02:51,902 --> 00:02:55,098
five for mobile. We are taking democrats

35
00:02:55,134 --> 00:02:56,040
from you.

36
00:02:58,170 --> 00:03:01,974
Okay, let's get down to the main topic. Let's say

37
00:03:02,012 --> 00:03:05,046
you need to implement an HTTP. HTTP. HTTP. HTTP.

38
00:03:05,068 --> 00:03:08,266
HTTP. HTTP. HTTP. HTTP. HTTP.

39
00:03:08,368 --> 00:03:12,410
HTTP. HTTP. HTTP. HTTP. HTTP. HTTP. HTTP. HTTP. HTTP. HTTP server

40
00:03:12,480 --> 00:03:15,930
on random available port an HTTP server or

41
00:03:16,000 --> 00:03:19,878
HTTP server. In this case,

42
00:03:20,064 --> 00:03:24,320
the code does not specify a port where the servers land.

43
00:03:25,010 --> 00:03:30,138
An HTTP server binds an available port dynamically

44
00:03:30,234 --> 00:03:34,740
and listens to it. How would you implement this?

45
00:03:36,870 --> 00:03:40,434
The answer is straightforward. Here is

46
00:03:40,472 --> 00:03:43,730
a sample code with a minimum number of lines.

47
00:03:45,350 --> 00:03:48,178
Look at the second argument of the.

48
00:03:48,264 --> 00:03:51,560
Net list function. In the second line,

49
00:03:52,490 --> 00:03:55,910
I passed dell to the second argument.

50
00:03:56,410 --> 00:03:59,690
This way, the port assigned changes each

51
00:03:59,760 --> 00:04:03,530
time the server runs. As you see in this slide,

52
00:04:05,390 --> 00:04:09,770
the go document of the. Net package describes the behavior.

53
00:04:10,450 --> 00:04:13,882
If the port in the address parameter is empty

54
00:04:13,946 --> 00:04:17,530
or dell, a port number is automatically

55
00:04:17,610 --> 00:04:21,226
chosen. Some standard libraries

56
00:04:21,338 --> 00:04:25,700
invoke the listen function in this way. For example,

57
00:04:26,150 --> 00:04:29,874
we can use the HTTP test library to start our

58
00:04:29,912 --> 00:04:34,002
server for testing, but internally the

59
00:04:34,056 --> 00:04:37,686
new server function called net listen

60
00:04:37,788 --> 00:04:42,690
function, specifically the new local listener.

61
00:04:42,850 --> 00:04:46,390
An unexported function in the HTTP test

62
00:04:46,460 --> 00:04:49,814
library invokes netlistentcp function with

63
00:04:49,852 --> 00:04:51,080
the port zero.

64
00:04:53,070 --> 00:04:57,094
It's an excellent and easy interface

65
00:04:57,142 --> 00:05:01,050
for us so that you can use this capability easily.

66
00:05:01,570 --> 00:05:05,150
However, what I want to describe in this talk

67
00:05:05,220 --> 00:05:08,810
is the specification and the internal implementation

68
00:05:08,890 --> 00:05:12,400
of the. Net package by leading go code.

69
00:05:13,270 --> 00:05:16,994
Knowing the internal specification will help you

70
00:05:17,112 --> 00:05:20,210
make more profound design decisions.

71
00:05:20,870 --> 00:05:24,434
For example, what kind of infrastructure is

72
00:05:24,472 --> 00:05:27,910
suitable to deploy this HTTP server?

73
00:05:29,370 --> 00:05:32,774
What is the range of network ports that

74
00:05:32,812 --> 00:05:34,390
the server will bind?

75
00:05:36,010 --> 00:05:40,218
This talk will give you the basic knowledge to answer these

76
00:05:40,304 --> 00:05:43,626
questions. Let's have a

77
00:05:43,648 --> 00:05:46,460
look at the signature of netless function.

78
00:05:47,790 --> 00:05:51,214
The first argument network specifying the

79
00:05:51,252 --> 00:05:54,622
network type the network must

80
00:05:54,676 --> 00:05:58,510
be Tcp tcp four, tcp six,

81
00:05:58,660 --> 00:06:01,790
Unix or Unix packet.

82
00:06:02,470 --> 00:06:06,414
Regarding TCP, what you should specify depends

83
00:06:06,462 --> 00:06:10,286
on whether the server instance supports IP version

84
00:06:10,318 --> 00:06:14,050
four or IP version six. TCP four

85
00:06:14,120 --> 00:06:18,146
means IP version four only, and TcP

86
00:06:18,178 --> 00:06:20,920
six means IP version six only.

87
00:06:21,290 --> 00:06:25,234
TcP indicates either IP version four or version

88
00:06:25,282 --> 00:06:28,422
six. Then let's move on.

89
00:06:28,476 --> 00:06:32,682
The inside of. Net listen function here

90
00:06:32,736 --> 00:06:35,990
is a diagram visualizing the relevant

91
00:06:36,070 --> 00:06:40,198
parts. The two main libraries involves.

92
00:06:40,374 --> 00:06:42,810
Net and syscall.

93
00:06:43,570 --> 00:06:46,480
Subsequent slides will provide more detail.

94
00:06:47,810 --> 00:06:51,534
First, the listen function uses a.

95
00:06:51,572 --> 00:06:56,514
Net listen or listen config extract a

96
00:06:56,552 --> 00:07:00,946
helpful tip for your daily go life is that if

97
00:07:00,968 --> 00:07:04,820
you want to pass the context on the application call side,

98
00:07:05,370 --> 00:07:08,600
use listen config instead of listen.

99
00:07:09,210 --> 00:07:12,918
Then next there are listen function of listen

100
00:07:13,004 --> 00:07:16,790
config stack called default resolver

101
00:07:17,530 --> 00:07:20,520
which resolves the network IP address.

102
00:07:22,270 --> 00:07:25,894
Specifically invokes a method resolve

103
00:07:25,942 --> 00:07:29,498
address list. It invokes many

104
00:07:29,584 --> 00:07:34,160
functions, but the following method is relevant for setting the port.

105
00:07:34,770 --> 00:07:39,642
It is lookup port lookup

106
00:07:39,706 --> 00:07:43,554
port looks up the port for

107
00:07:43,592 --> 00:07:46,580
the given network. For example,

108
00:07:47,110 --> 00:07:50,850
if you provide a port zillow to this method,

109
00:07:51,190 --> 00:07:54,594
it returns zillow. It is

110
00:07:54,632 --> 00:07:58,774
an exported function of the. Net library so

111
00:07:58,812 --> 00:08:01,510
that you can check the behavior directly.

112
00:08:02,650 --> 00:08:06,022
The main point is that it does not

113
00:08:06,076 --> 00:08:09,642
specify food port a server will run on,

114
00:08:09,776 --> 00:08:11,740
but leave it at zero.

115
00:08:13,390 --> 00:08:16,822
Next listen invokes a sys listener

116
00:08:16,886 --> 00:08:20,494
that contains listened parameters and

117
00:08:20,532 --> 00:08:24,142
configuration. When the network protocol is

118
00:08:24,196 --> 00:08:28,320
TCP, it invokes the listen TCP function.

119
00:08:29,730 --> 00:08:33,166
Then next listen TcP invokes

120
00:08:33,278 --> 00:08:36,626
net internal socket, which returns a

121
00:08:36,648 --> 00:08:40,558
network file descriptor ready for asynchronous

122
00:08:40,654 --> 00:08:44,690
I O communication using

123
00:08:44,760 --> 00:08:48,406
the network puller. This function

124
00:08:48,508 --> 00:08:52,022
mainly handles low layer handling such

125
00:08:52,076 --> 00:08:55,714
as OS socket types and system calls,

126
00:08:55,762 --> 00:08:59,954
and so on. This code gives sock slim

127
00:09:00,002 --> 00:09:01,480
as a socket type.

128
00:09:02,810 --> 00:09:07,206
OS layer technology, such as a Linux main page defines

129
00:09:07,238 --> 00:09:10,862
several socket types. When you start

130
00:09:10,916 --> 00:09:14,874
an HTTP server, the network type is tcp

131
00:09:15,002 --> 00:09:19,082
and go program uses a socket type SoC stolim,

132
00:09:19,226 --> 00:09:21,920
a stolen oriented socket type.

133
00:09:22,930 --> 00:09:26,026
Otherwise, when you start a UDP server,

134
00:09:26,138 --> 00:09:29,490
it uses a socket type sock d glam.

135
00:09:30,390 --> 00:09:34,100
It is a datagram oriented socket type

136
00:09:34,790 --> 00:09:38,898
like this Google codes that perform network communications

137
00:09:38,994 --> 00:09:42,034
internally select the corresponding

138
00:09:42,082 --> 00:09:45,590
socket type. Then the

139
00:09:45,660 --> 00:09:49,098
internal socket function invokes the function that

140
00:09:49,184 --> 00:09:53,066
bundles necessary system calls according to the

141
00:09:53,088 --> 00:09:56,534
socket type. For example, when the socket

142
00:09:56,582 --> 00:10:00,706
type is SoC stolen, it invokes the listen stolen

143
00:10:00,758 --> 00:10:04,042
function which handles listening to storing

144
00:10:04,106 --> 00:10:07,310
oriented connections such as TCP.

145
00:10:08,210 --> 00:10:11,754
It has been a long journey, but here we'll

146
00:10:11,802 --> 00:10:15,860
get to the heart to answer our original question.

147
00:10:16,630 --> 00:10:20,338
How does go implement to bind one available port?

148
00:10:20,424 --> 00:10:24,446
Dynamically, the function executes

149
00:10:24,558 --> 00:10:27,986
three system calls in order bind,

150
00:10:28,098 --> 00:10:32,082
listen and get sock name bind

151
00:10:32,146 --> 00:10:36,806
assigns a socket address specified by the given address

152
00:10:36,988 --> 00:10:40,134
to the socket referred to by the file

153
00:10:40,182 --> 00:10:43,514
descriptor. Listen marks the

154
00:10:43,552 --> 00:10:47,514
socket referred to by the file descriptor as

155
00:10:47,552 --> 00:10:51,326
a passive socket. That is, the socket is

156
00:10:51,428 --> 00:10:55,518
ready to accept incoming requests using another system

157
00:10:55,604 --> 00:10:59,802
calls. Accept Getsocnab

158
00:10:59,866 --> 00:11:02,000
returns the current socket address.

159
00:11:04,290 --> 00:11:07,934
We got to the answer the rule over random

160
00:11:07,982 --> 00:11:11,362
port is the specification of the binds of

161
00:11:11,416 --> 00:11:15,510
each operating operating system. For example,

162
00:11:15,660 --> 00:11:19,154
if you start a server process on a Linux server,

163
00:11:19,282 --> 00:11:22,374
the system called binds will bind to an

164
00:11:22,412 --> 00:11:25,718
aheminal port. An ahemular port

165
00:11:25,804 --> 00:11:29,258
is also calls a dynamic port, as is a port

166
00:11:29,344 --> 00:11:33,066
that is used for only a short period of the duration of

167
00:11:33,088 --> 00:11:34,730
a communication session.

168
00:11:36,030 --> 00:11:39,770
You can see the port range from the bank specification.

169
00:11:40,210 --> 00:11:44,430
For example, if you use Windows Server 2003,

170
00:11:44,580 --> 00:11:49,038
support range is from 1025

171
00:11:49,124 --> 00:11:51,920
to 5000.

172
00:11:53,650 --> 00:11:57,214
We will learn that when you want to launch HTTP HTTP HTTP

173
00:11:57,252 --> 00:12:00,994
HTTP HTTP HTTP HTTP HTTP server on random available

174
00:12:01,032 --> 00:12:04,642
port. The three things first, you'd better

175
00:12:04,696 --> 00:12:06,790
confirm the bind specification.

176
00:12:07,130 --> 00:12:11,266
Second, you'd better check if your infrastructure

177
00:12:11,298 --> 00:12:15,320
lecturer can use an ehminal port. For example,

178
00:12:15,850 --> 00:12:20,374
suppose you use AWS Fargate, a fully managed container

179
00:12:20,502 --> 00:12:24,970
orchestration service as an infrastructure.

180
00:12:25,390 --> 00:12:29,338
In that case you can't binds a Hemine report because

181
00:12:29,424 --> 00:12:32,320
automatic assign reserves them.

182
00:12:33,410 --> 00:12:36,938
Third, you'd better check the range of a Hemine

183
00:12:36,954 --> 00:12:40,746
report considering a network firewall

184
00:12:40,778 --> 00:12:44,666
setting may be necessary if you use this capability

185
00:12:44,778 --> 00:12:48,222
or remote server. You can see more

186
00:12:48,276 --> 00:12:51,360
detail in this article. Please check it out.

187
00:12:52,050 --> 00:12:54,300
That is for me. Thank you for your watching.

