1
00:00:30,850 --> 00:00:35,126
Hello everyone, this is Trista. So at this

2
00:00:35,308 --> 00:00:39,686
conference I'm going to share this topic, especially around

3
00:00:39,868 --> 00:00:44,230
how to achieve the availability capability,

4
00:00:44,730 --> 00:00:48,706
lack certificate around your database infrastructure

5
00:00:48,898 --> 00:00:51,998
kubernetes. This is something about myself,

6
00:00:52,164 --> 00:00:55,546
actually my area. It's around the databases,

7
00:00:55,658 --> 00:00:59,850
especially the distributed databases, some cloud databases

8
00:01:00,010 --> 00:01:03,426
and kubernetes. So that's why today I

9
00:01:03,448 --> 00:01:07,218
choose this topic as my talk. I will talk the

10
00:01:07,304 --> 00:01:11,886
DBRE database, database reliability

11
00:01:11,998 --> 00:01:16,402
engineering stuff and also about your MySQL

12
00:01:16,466 --> 00:01:20,358
PostgreSQL, all the monolithic databases on

13
00:01:20,364 --> 00:01:23,654
the Kubernetes. Apart from

14
00:01:23,692 --> 00:01:28,554
my job actually I

15
00:01:28,592 --> 00:01:32,390
love the open source. So I'm the Apache member

16
00:01:32,470 --> 00:01:36,374
incubator mentor to help to give some tips

17
00:01:36,422 --> 00:01:40,640
and sessions to the open source community and their project.

18
00:01:42,450 --> 00:01:46,414
Yeah, so that's my background. And now

19
00:01:46,452 --> 00:01:49,642
I'm the co founder and CTo of Sofia Yas,

20
00:01:49,706 --> 00:01:51,600
this startup company.

21
00:01:52,210 --> 00:01:56,034
Sometimes I will post some articles about the startup open

22
00:01:56,072 --> 00:01:59,918
source community, project Apache and databases

23
00:02:00,094 --> 00:02:03,518
distributed system on my linking and Twitter.

24
00:02:03,614 --> 00:02:07,254
So if you have some questions or you want to talk with

25
00:02:07,292 --> 00:02:11,014
me more, please give a look there. Yeah, so let's get

26
00:02:11,052 --> 00:02:15,106
started with today's talk. Today I will first introduce

27
00:02:15,138 --> 00:02:19,690
some of the background about the SRE, SLA and DBRE

28
00:02:20,030 --> 00:02:23,658
and then we will talk more about your

29
00:02:23,744 --> 00:02:27,770
databases on the Kubernetes on the cloud. Give some

30
00:02:27,840 --> 00:02:31,214
solutions and ideas and architectures about the

31
00:02:31,252 --> 00:02:35,790
distributed databases, how to achieve the high scalability,

32
00:02:36,370 --> 00:02:40,122
scalability and elasticity

33
00:02:40,266 --> 00:02:43,854
around all of them. And if I have more

34
00:02:43,892 --> 00:02:47,314
time I will give the demo, this demo, I do it by

35
00:02:47,352 --> 00:02:51,234
myself, but if we have no enough time I will just give

36
00:02:51,272 --> 00:02:55,058
a brave introduction about it. You can just refer

37
00:02:55,144 --> 00:02:58,246
to this PDf file and do it by

38
00:02:58,268 --> 00:03:01,846
yourself. Okay, so the background is

39
00:03:01,948 --> 00:03:05,766
SRE, SLA, DBRE because it's actually the topic of

40
00:03:05,788 --> 00:03:08,890
our conference. Right. So I don't want to give

41
00:03:08,960 --> 00:03:12,842
much more talk about all the concepts. I just want to say

42
00:03:12,896 --> 00:03:16,522
that currently I know that most of the people will

43
00:03:16,576 --> 00:03:19,970
ask that do I do the career

44
00:03:20,070 --> 00:03:24,106
switch or change about my DBA career.

45
00:03:24,298 --> 00:03:30,062
I want to say especially when the big data become

46
00:03:30,116 --> 00:03:33,682
the hot topic and we have more and

47
00:03:33,736 --> 00:03:37,122
more popular distributed system or big

48
00:03:37,176 --> 00:03:41,058
data platform comes out, I guess

49
00:03:41,144 --> 00:03:44,610
it's a good time to consider about our job,

50
00:03:44,680 --> 00:03:47,666
about our DBA and about our data,

51
00:03:47,768 --> 00:03:51,334
all of the stuff. So I

52
00:03:51,372 --> 00:03:55,490
think it's necessary to know more about the DBRE

53
00:03:55,650 --> 00:03:59,090
and how to use your database

54
00:03:59,250 --> 00:04:04,518
experience to provide good SLA

55
00:04:04,694 --> 00:04:08,540
service level agreement to your services and to

56
00:04:09,230 --> 00:04:12,922
the companies, especially the application layer.

57
00:04:12,986 --> 00:04:16,398
Right. But actually when we

58
00:04:16,484 --> 00:04:19,886
consider the SRE or DBRE, I want to

59
00:04:19,908 --> 00:04:24,094
say because the database, it's different from your application

60
00:04:24,212 --> 00:04:27,410
service and all the status services, right?

61
00:04:27,480 --> 00:04:31,550
But databases, you need to consider about the vivid,

62
00:04:31,630 --> 00:04:35,682
the connections data and the persistence

63
00:04:35,746 --> 00:04:39,126
data, the data persistent, right? So you need to

64
00:04:39,148 --> 00:04:42,550
give more specific consider about

65
00:04:42,620 --> 00:04:46,502
your DBRE stuff but they all

66
00:04:46,556 --> 00:04:50,314
share the same, I mean the overlapping area,

67
00:04:50,432 --> 00:04:52,918
especially about the SLA,

68
00:04:53,014 --> 00:04:55,850
SLO and SLI,

69
00:04:56,670 --> 00:05:00,334
yeah. If you want to learn more about all the

70
00:05:00,372 --> 00:05:03,710
ideas, I recommend the following two books.

71
00:05:04,050 --> 00:05:08,234
But today we will just talk about the DBRE's

72
00:05:08,282 --> 00:05:11,998
SLA, I mean the indicator, because no matter

73
00:05:12,084 --> 00:05:15,922
you are the DBRE DBA or

74
00:05:15,976 --> 00:05:19,620
you are the developers, you consider how

75
00:05:20,230 --> 00:05:23,950
mean you have the high SLA

76
00:05:24,030 --> 00:05:28,354
agreement, you commit to your users

77
00:05:28,402 --> 00:05:32,274
and users that you will provide that levels

78
00:05:32,322 --> 00:05:35,058
of service agreement,

79
00:05:35,154 --> 00:05:38,794
right. The quality. So if

80
00:05:38,832 --> 00:05:42,342
we give attention to the DBRE, I mean databases,

81
00:05:42,486 --> 00:05:46,118
SLI, that is the service level indicator,

82
00:05:46,214 --> 00:05:50,990
we use this indicator to watch

83
00:05:51,060 --> 00:05:54,894
or to review that the service quality

84
00:05:55,012 --> 00:05:58,126
or the service level agreement is good or not

85
00:05:58,228 --> 00:06:01,962
for application or for our end user.

86
00:06:02,106 --> 00:06:04,814
Yeah, so this book,

87
00:06:04,852 --> 00:06:08,254
DBRE, this book gives some the good,

88
00:06:08,372 --> 00:06:11,726
I mean the SLA for our databases,

89
00:06:11,918 --> 00:06:14,670
for example, the latency, the throughput,

90
00:06:14,750 --> 00:06:18,210
availability, the scalability or the efficiency

91
00:06:18,370 --> 00:06:21,286
for us to consider about work quality.

92
00:06:21,468 --> 00:06:25,030
But it's a high level indicators

93
00:06:26,250 --> 00:06:30,170
for our production environment. So I just

94
00:06:30,240 --> 00:06:34,390
give them the more practical indicators

95
00:06:34,470 --> 00:06:38,582
around our databases and production

96
00:06:38,646 --> 00:06:40,300
environment. For example,

97
00:06:41,870 --> 00:06:45,134
how to large the tremendous data,

98
00:06:45,252 --> 00:06:48,954
how to provide efficient acquiring answers

99
00:06:49,002 --> 00:06:52,698
to our application, how to do the data security

100
00:06:52,884 --> 00:06:56,862
and do your database cluster

101
00:06:56,926 --> 00:07:00,914
have a good elastic scaling capability or

102
00:07:00,952 --> 00:07:04,706
not and what's your backup and recovery and how

103
00:07:04,728 --> 00:07:08,038
to do the matrix to help us to location the

104
00:07:08,204 --> 00:07:11,654
error or exceptions if it come

105
00:07:11,692 --> 00:07:15,766
out and how to make our infrastructure become

106
00:07:15,868 --> 00:07:19,334
portable and do we have the

107
00:07:19,532 --> 00:07:23,430
good automatical deployment

108
00:07:23,790 --> 00:07:27,114
principles or the method, right?

109
00:07:27,232 --> 00:07:31,146
Yeah. So that's the specific items for our databases

110
00:07:31,258 --> 00:07:35,120
for us to review or

111
00:07:35,650 --> 00:07:39,534
to evaluate the quality of our database service.

112
00:07:39,732 --> 00:07:43,042
So on the right part I also give

113
00:07:43,096 --> 00:07:46,882
some the technique to solve or to reach that

114
00:07:46,936 --> 00:07:50,514
goals. For example, we can use the distributed system,

115
00:07:50,632 --> 00:07:54,142
we can do the data sharding to help our database

116
00:07:54,206 --> 00:07:57,698
infrastructure have the scalability

117
00:07:57,874 --> 00:08:01,990
or electricity and also we can consider to

118
00:08:02,140 --> 00:08:06,086
create more replicas to do the ray rasp bleeding stereotype for

119
00:08:06,188 --> 00:08:09,574
traffic, for vivid to make this database

120
00:08:09,622 --> 00:08:13,514
cluster have the high availability or

121
00:08:13,712 --> 00:08:17,110
can have the higher throughput.

122
00:08:17,270 --> 00:08:21,034
And also we can use some the data encryption,

123
00:08:21,162 --> 00:08:24,718
I mean the open source project to help us to protect

124
00:08:24,804 --> 00:08:29,118
our data. We can create the monitor or metric system

125
00:08:29,284 --> 00:08:33,138
to help do the learning stuff,

126
00:08:33,224 --> 00:08:37,620
right? And also we need to consider, use some

127
00:08:38,070 --> 00:08:41,502
helm or operators, especially on the Kubernetes

128
00:08:41,646 --> 00:08:45,034
to help to provide the out of the box deployment

129
00:08:45,102 --> 00:08:48,070
and all the stuff, I mean the maintaining work.

130
00:08:48,220 --> 00:08:51,602
So that's the techniques I can give to solve

131
00:08:51,666 --> 00:08:55,400
part of the SLI or

132
00:08:55,850 --> 00:08:58,650
the items on the left column.

133
00:08:59,070 --> 00:09:02,170
Yeah, for our databases.

134
00:09:04,190 --> 00:09:07,754
For the end user actually they don't care about all

135
00:09:07,792 --> 00:09:11,534
of the specific indicators or all

136
00:09:11,572 --> 00:09:15,134
of the stuff. They just want to know that the

137
00:09:15,172 --> 00:09:19,118
end user, at the end user they just want to know that your

138
00:09:19,204 --> 00:09:22,640
database service can provide the service

139
00:09:23,650 --> 00:09:27,098
when I do every query range and at the

140
00:09:27,124 --> 00:09:31,362
end user just want to know that do your databases can

141
00:09:31,416 --> 00:09:35,350
provide the efficient query and to

142
00:09:35,420 --> 00:09:39,266
answer my question as soon as possible. So that's

143
00:09:39,298 --> 00:09:42,966
the main point your end user concerned. But for

144
00:09:43,068 --> 00:09:46,722
our DBRe or databases or developers

145
00:09:46,786 --> 00:09:50,250
or DevOps we needed to dive into

146
00:09:50,320 --> 00:09:53,050
to consider the following indicators.

147
00:09:53,550 --> 00:09:56,794
The last part I need to give the

148
00:09:56,912 --> 00:10:00,800
solution for you to solve all of the issues

149
00:10:01,810 --> 00:10:04,910
I mentioned before. I know that

150
00:10:04,980 --> 00:10:08,682
most of you will use the postgreSQl RDs,

151
00:10:08,746 --> 00:10:13,310
MySql, Oracle Sql sqr on your production environment.

152
00:10:13,470 --> 00:10:16,782
But now we enter into the new era,

153
00:10:16,846 --> 00:10:21,202
right? So we need to consider how to use the new solution to

154
00:10:21,256 --> 00:10:24,670
solve the current headaches

155
00:10:24,750 --> 00:10:28,534
about our databases infrastructure. First,

156
00:10:28,652 --> 00:10:32,898
I suggest that you can just use some distributed database

157
00:10:32,994 --> 00:10:37,154
vendor because different databases vendor,

158
00:10:37,202 --> 00:10:41,434
they will solve one or a few headaches of

159
00:10:41,472 --> 00:10:45,322
your databases. So you can give

160
00:10:45,376 --> 00:10:49,290
the details look and do some the research around

161
00:10:49,360 --> 00:10:53,022
all of the database vendor to look. They can

162
00:10:53,076 --> 00:10:56,766
help you solve your headache or not. The second one we

163
00:10:56,788 --> 00:11:00,602
can just consider to use the one stop solution.

164
00:11:00,746 --> 00:11:05,250
You can choose the cloud

165
00:11:05,320 --> 00:11:09,998
vendor. They definitely provide some databases

166
00:11:10,094 --> 00:11:13,634
or big data platform or product for you

167
00:11:13,672 --> 00:11:16,518
to solve. The current issue, a third one,

168
00:11:16,604 --> 00:11:19,734
that's what I want to mention today. I want

169
00:11:19,772 --> 00:11:23,698
to give a new idea about your databases

170
00:11:23,794 --> 00:11:27,186
architecture. And if you don't

171
00:11:27,218 --> 00:11:31,340
want to be locked in

172
00:11:31,710 --> 00:11:35,418
database vendor or the cloud

173
00:11:35,504 --> 00:11:39,270
vendor, maybe you need to consider how to make my database

174
00:11:39,430 --> 00:11:43,358
infrastructure become more flexible and

175
00:11:43,444 --> 00:11:46,970
portable of the stuff and how to leverage

176
00:11:47,130 --> 00:11:50,458
my current databases and infrastructure.

177
00:11:50,554 --> 00:11:54,420
Because I know if you don't have

178
00:11:56,790 --> 00:12:00,354
the specific requirements about your

179
00:12:00,392 --> 00:12:04,030
databases and you don't want to overturn

180
00:12:04,110 --> 00:12:07,286
or change your database infrastructure, right?

181
00:12:07,388 --> 00:12:11,094
So I want to introduce the third options for

182
00:12:11,132 --> 00:12:15,190
you and to help you reach

183
00:12:15,340 --> 00:12:18,482
the following benefits from this new solution.

184
00:12:18,626 --> 00:12:22,246
The first, this solution can help you leverage your existing

185
00:12:22,278 --> 00:12:26,106
databases. I mean, don't do a

186
00:12:26,128 --> 00:12:30,706
big change to your MySQL infrastructure or postgreSQL

187
00:12:30,758 --> 00:12:34,160
database infrastructure and just leverage them,

188
00:12:34,530 --> 00:12:39,386
but can upgrade your current monolithic

189
00:12:39,498 --> 00:12:43,134
database infrastructure to become distributed

190
00:12:43,182 --> 00:12:46,590
one. I mean, to do the data sharding or data encryption,

191
00:12:46,670 --> 00:12:51,278
such good features to make your current monolithic databases

192
00:12:51,374 --> 00:12:55,242
become the distributed one. And also this solution

193
00:12:55,326 --> 00:13:02,486
can give you more the necessary good

194
00:13:02,668 --> 00:13:06,262
features around your database infrastructure. For example,

195
00:13:06,396 --> 00:13:09,734
the SQL fair wall or SQL audit,

196
00:13:09,862 --> 00:13:14,118
the traffic governance or the electricity

197
00:13:14,214 --> 00:13:17,882
capability. Yeah. And last

198
00:13:17,936 --> 00:13:22,010
part you consider, do I leverage all my

199
00:13:22,080 --> 00:13:25,566
favorite postgres or postgraduate databases on the

200
00:13:25,588 --> 00:13:28,814
Kubernetes, right. And also give

201
00:13:28,852 --> 00:13:32,640
you some out of the box deployment way to help you quickly

202
00:13:32,950 --> 00:13:36,322
do some demo to test is okay for you or

203
00:13:36,376 --> 00:13:39,762
not, right? So that's the benefits

204
00:13:39,896 --> 00:13:44,190
from today's topic. The basic

205
00:13:44,270 --> 00:13:48,786
idea comes from the distributed basic architecture.

206
00:13:48,898 --> 00:13:52,694
Because we know that if you want to make a

207
00:13:52,732 --> 00:13:56,482
monolithic architecture become a distributed

208
00:13:56,546 --> 00:14:00,310
one, that means we need to split

209
00:14:00,830 --> 00:14:04,922
big databases or big project

210
00:14:05,056 --> 00:14:08,554
into small one. All of them will

211
00:14:08,672 --> 00:14:13,034
located in different servers or machines,

212
00:14:13,162 --> 00:14:16,298
right? So that means the distributed,

213
00:14:16,474 --> 00:14:19,806
right, because such architecture, I mean the

214
00:14:19,828 --> 00:14:24,290
new architecture can help us to improve the

215
00:14:24,360 --> 00:14:28,274
databases and infrastructure to make it have the

216
00:14:28,472 --> 00:14:32,690
skewing, skew out scalability or elastic capability,

217
00:14:33,110 --> 00:14:36,582
or can help us to manage more and more

218
00:14:36,636 --> 00:14:40,086
tremendous data, right? We cannot just

219
00:14:40,268 --> 00:14:44,022
rely on one server machine to help us

220
00:14:44,076 --> 00:14:47,262
to manage the PB or TB,

221
00:14:47,426 --> 00:14:50,950
the data, especially in this new era.

222
00:14:51,030 --> 00:14:54,362
I mean, every day, every minute, every hours or

223
00:14:54,416 --> 00:14:58,122
end clusters or applications create their data,

224
00:14:58,256 --> 00:15:00,380
right? Yeah.

225
00:15:00,830 --> 00:15:03,920
So look at here,

226
00:15:04,930 --> 00:15:08,602
we want to adopt the distributed database architecture.

227
00:15:08,666 --> 00:15:11,934
That means we split a single one into a lot

228
00:15:11,972 --> 00:15:15,970
of small one, make this architecture have the scalability.

229
00:15:16,710 --> 00:15:20,626
Basically when we speak the distributed database system.

230
00:15:20,808 --> 00:15:25,054
Actually we'll split this single monolithic databases

231
00:15:25,182 --> 00:15:28,638
into two important element elements.

232
00:15:28,734 --> 00:15:31,874
The first one the computing node, the second one

233
00:15:31,912 --> 00:15:35,874
the storage node. A storage node will help us to persist

234
00:15:35,922 --> 00:15:39,930
your data or do the local compute to

235
00:15:40,000 --> 00:15:43,850
get or store the partial data.

236
00:15:44,000 --> 00:15:47,142
But for computing node, their capability

237
00:15:47,286 --> 00:15:50,554
or their function is

238
00:15:50,592 --> 00:15:54,582
to provide the vivid entrance and

239
00:15:54,656 --> 00:15:58,858
do the global computing workflow,

240
00:15:58,954 --> 00:16:03,310
right? And to answer the people's question queries.

241
00:16:03,750 --> 00:16:07,826
So if you gave a look at the MongoDB architecture or

242
00:16:07,848 --> 00:16:11,730
the corporal DB architecture or other one, you will found

243
00:16:11,800 --> 00:16:15,366
that they use the same idea to do

244
00:16:15,388 --> 00:16:18,566
the distributed one.

245
00:16:18,748 --> 00:16:21,958
So we based on this idea and today

246
00:16:22,044 --> 00:16:25,410
I want to leverage your favorite

247
00:16:25,570 --> 00:16:29,126
MySQL or PostgreSQL or SQL server

248
00:16:29,158 --> 00:16:32,406
databases and to make it or update

249
00:16:32,438 --> 00:16:36,742
it to become a distributed one. So here we can leverage

250
00:16:36,886 --> 00:16:40,102
your current databases to make it work

251
00:16:40,176 --> 00:16:44,126
or act as the storage nodes, right? Because the

252
00:16:44,308 --> 00:16:48,110
PostgreSQL people

253
00:16:48,180 --> 00:16:52,378
has used it in many, many of the production environment,

254
00:16:52,474 --> 00:16:56,030
we trust it's stable,

255
00:16:56,850 --> 00:17:00,206
working as a single databases.

256
00:17:00,318 --> 00:17:03,330
And here in this distributed database system,

257
00:17:03,480 --> 00:17:06,726
we will look at. We regard it as one of

258
00:17:06,748 --> 00:17:10,502
the storage node. It can help us persist your data

259
00:17:10,636 --> 00:17:14,534
do the local computing. And here we

260
00:17:14,572 --> 00:17:18,762
just want to import the computing node into

261
00:17:18,896 --> 00:17:22,710
this distributed system. Therefore the computing node,

262
00:17:22,790 --> 00:17:26,518
the new one, plus your current databases,

263
00:17:26,614 --> 00:17:30,622
the PostgreSQL or MySQL databases working

264
00:17:30,676 --> 00:17:33,966
as a storage node will

265
00:17:34,148 --> 00:17:37,790
merge into a distributed database,

266
00:17:38,450 --> 00:17:42,282
right? So who can be the computing

267
00:17:42,346 --> 00:17:45,746
node? That's an open source project. It's the

268
00:17:45,768 --> 00:17:47,570
Apache shirting Sophia.

269
00:17:49,190 --> 00:17:52,994
Apache Shirley. Sophia will give the brief introduction about

270
00:17:53,032 --> 00:17:56,566
it. It's actually a

271
00:17:56,588 --> 00:18:00,994
database engine or database. It's a distributed

272
00:18:01,122 --> 00:18:04,754
database engine or a distributed database proxy,

273
00:18:04,882 --> 00:18:08,726
right? So if you use the sharding

274
00:18:08,758 --> 00:18:11,734
Sophia working as the computing nodes,

275
00:18:11,862 --> 00:18:15,754
then you can see here, the sharding Sophia plus

276
00:18:15,872 --> 00:18:19,722
your postgresQl database cluster will

277
00:18:19,856 --> 00:18:23,710
made up a distributed database system.

278
00:18:23,860 --> 00:18:27,642
So for your application, you just send your quirks

279
00:18:27,706 --> 00:18:31,226
to this proxy or to this distributed database

280
00:18:31,338 --> 00:18:34,370
ending and sharing Sophia.

281
00:18:34,870 --> 00:18:38,290
It can deploy it as a cluster. It can work

282
00:18:38,360 --> 00:18:42,420
as the computing nodes of this distributed system.

283
00:18:44,230 --> 00:18:48,354
It can pretend itself as the database server

284
00:18:48,482 --> 00:18:53,302
to handle all of the queries from

285
00:18:53,356 --> 00:18:57,110
our application. And this

286
00:18:57,180 --> 00:19:01,530
proxy can help us to shard our databases

287
00:19:01,950 --> 00:19:05,130
or shard our data. It can do the

288
00:19:05,200 --> 00:19:09,062
rewriting splitting traffic governance

289
00:19:09,126 --> 00:19:12,694
strategy. That means it's like the database gateway.

290
00:19:12,822 --> 00:19:16,566
You just send your queries to the sharding Sophia. And sharding

291
00:19:16,598 --> 00:19:20,878
Sophia will found out this query, we can send it to

292
00:19:20,964 --> 00:19:24,494
one shard, right? We can send it to the replica

293
00:19:24,542 --> 00:19:27,954
one, right? So sharding Sophia can help you

294
00:19:27,992 --> 00:19:31,502
do the data sharding and rewrite splitting.

295
00:19:31,646 --> 00:19:35,566
And also if one of your postgres crashed,

296
00:19:35,678 --> 00:19:39,418
it can be aware of that status and updated

297
00:19:39,454 --> 00:19:42,614
itself. Therefore your application,

298
00:19:42,812 --> 00:19:45,606
next time your application with it,

299
00:19:45,708 --> 00:19:49,430
this database proxy, sharding Sophia will never

300
00:19:49,580 --> 00:19:54,070
send this query to your crashed instance.

301
00:19:54,150 --> 00:19:57,898
I mean the crashed replica. Right? So you just

302
00:19:57,984 --> 00:20:01,386
to tell sharding Sophia that you want such of

303
00:20:01,408 --> 00:20:05,834
the features and shorting Sophia will work as the distributed computing

304
00:20:05,882 --> 00:20:09,338
nodes or the database server to handle

305
00:20:09,434 --> 00:20:13,882
all of the queries and also can help you handle

306
00:20:13,946 --> 00:20:17,786
the visit the traffic governance,

307
00:20:17,898 --> 00:20:21,166
right? Yeah. So that's the magic or

308
00:20:21,188 --> 00:20:24,430
the function of the sharding Sophia. So when you

309
00:20:24,580 --> 00:20:28,690
use sharding Sophia and your infrastructure,

310
00:20:28,770 --> 00:20:32,760
database infrastructure will from this one become

311
00:20:33,370 --> 00:20:37,638
this one. So before your application, just to

312
00:20:37,804 --> 00:20:41,042
directly visit your postgresql instance,

313
00:20:41,186 --> 00:20:45,142
your application needed to know it's the primary

314
00:20:45,206 --> 00:20:49,078
node, it's a replica node. But later on, if you use sharding

315
00:20:49,094 --> 00:20:52,654
Sophia, you don't need to care about all of

316
00:20:52,692 --> 00:20:55,440
the replica one or primary one.

317
00:20:56,770 --> 00:21:00,090
It's the first shard clusters.

318
00:21:00,170 --> 00:21:03,502
It's the second shard clusters. You don't care about all of the stuff.

319
00:21:03,556 --> 00:21:07,154
Sharding Sophia help you do all the stuff. You just send

320
00:21:07,192 --> 00:21:11,042
your query to Sharding Sophia. Sharding Sophia will deal

321
00:21:11,096 --> 00:21:14,222
with all of the requirements.

322
00:21:14,366 --> 00:21:18,934
Yeah. Therefore it's the function and

323
00:21:18,972 --> 00:21:23,174
I just want to introduce it and tell you how to

324
00:21:23,292 --> 00:21:26,502
use it in your database infrastructure. And second

325
00:21:26,556 --> 00:21:30,518
one, let's give a brief look at its GitHub statistic

326
00:21:30,614 --> 00:21:34,426
because nobody wants to

327
00:21:34,448 --> 00:21:37,850
use the new project. Because you worry about that maybe

328
00:21:37,920 --> 00:21:41,680
one day this project disappeared or

329
00:21:42,770 --> 00:21:46,218
closed sourced, become closed sourced, right? You don't

330
00:21:46,234 --> 00:21:50,126
worry about that. It has been open source for six years

331
00:21:50,228 --> 00:21:54,658
and it's the Apache top level project and

332
00:21:54,744 --> 00:21:58,914
it's already received more than 400

333
00:21:59,032 --> 00:22:02,594
contributors. And we have more than

334
00:22:02,792 --> 00:22:06,438
nearly 18k stars on

335
00:22:06,444 --> 00:22:09,880
the GitHub and already released more than

336
00:22:10,650 --> 00:22:14,006
near 50 times. Right. So it's a

337
00:22:14,028 --> 00:22:17,542
big community, it's a very popular open

338
00:22:17,596 --> 00:22:20,902
source project and their document

339
00:22:21,046 --> 00:22:24,394
and the user cases are so good,

340
00:22:24,512 --> 00:22:27,914
a good quality for you to use it or to know

341
00:22:27,952 --> 00:22:30,470
more about it. Okay,

342
00:22:30,640 --> 00:22:33,946
so the sharding Sophia clients,

343
00:22:34,138 --> 00:22:38,670
as I said before at this page in your application,

344
00:22:38,820 --> 00:22:42,662
just use the databases proxy to visit

345
00:22:42,746 --> 00:22:46,370
your databases. Actually, for this

346
00:22:46,520 --> 00:22:50,174
database proxy, sharding Sophia provides two clients

347
00:22:50,222 --> 00:22:55,194
for you to choose. First one is the driver client.

348
00:22:55,342 --> 00:22:58,674
The second one, it's the proxy client.

349
00:22:58,802 --> 00:23:02,840
So you can base your cases to choose one of them.

350
00:23:03,690 --> 00:23:07,560
For this driver it named Sharding Sophia JDBC. It's just

351
00:23:08,110 --> 00:23:12,380
suited for your Java application

352
00:23:12,750 --> 00:23:16,134
because you can see its name Sharding Sophia GDBC.

353
00:23:16,182 --> 00:23:20,010
It's a lightweight implement of your GDBC

354
00:23:20,690 --> 00:23:24,174
interface. So you just use

355
00:23:24,212 --> 00:23:27,882
this lightweight driver and this lightweight driver

356
00:23:27,946 --> 00:23:31,502
will help you manage your database cluster and do the data

357
00:23:31,556 --> 00:23:35,054
sharding or the react splitting or data encryption.

358
00:23:35,102 --> 00:23:38,782
Such features. And also for your Golong

359
00:23:38,846 --> 00:23:43,070
or rust or other language

360
00:23:43,150 --> 00:23:46,226
development language applications, you can choose the

361
00:23:46,248 --> 00:23:49,634
short and Sophia proxy. Actually you need to deploy short

362
00:23:49,672 --> 00:23:52,934
and Sophia independently. It will really work as

363
00:23:52,972 --> 00:23:56,200
a database server. It can also share

364
00:23:56,650 --> 00:24:00,398
the same features with the Sharding Sophia GDBC

365
00:24:00,514 --> 00:24:04,666
like shard your data, do the data

366
00:24:04,768 --> 00:24:08,742
migration and do the ray ras splitting

367
00:24:08,886 --> 00:24:12,730
and help you do the data encryption,

368
00:24:12,810 --> 00:24:16,542
data masking, SQL audit, all of the good

369
00:24:16,596 --> 00:24:17,550
features.

370
00:24:21,570 --> 00:24:25,398
Here you can see this page. It's indexed

371
00:24:25,434 --> 00:24:29,282
of all of the features and all of the databases this

372
00:24:29,336 --> 00:24:31,010
project supports.

373
00:24:33,110 --> 00:24:36,422
But I know you will consider how

374
00:24:36,476 --> 00:24:40,790
to make this sharding Sophia to

375
00:24:40,860 --> 00:24:44,630
work with such features. The NAS pay part

376
00:24:44,700 --> 00:24:48,230
I will introduce the distributed SQL,

377
00:24:48,970 --> 00:24:52,280
it can help you do the configuration stuff.

378
00:24:53,610 --> 00:24:56,954
So the NAS part I need to introduce the out

379
00:24:56,992 --> 00:25:00,314
of the box deployment, especially on

380
00:25:00,352 --> 00:25:04,010
Kubernetes sharding Sophia on cloud this

381
00:25:04,080 --> 00:25:08,330
ripple here, it can help you quickly deploy

382
00:25:08,410 --> 00:25:11,630
sharding Sophia proxy on the Kubernetes.

383
00:25:12,550 --> 00:25:16,510
One command to deploy every element

384
00:25:16,590 --> 00:25:20,722
of this project and it

385
00:25:20,776 --> 00:25:26,054
can also help you to deploy the

386
00:25:26,252 --> 00:25:29,446
governance center or proxy or

387
00:25:29,628 --> 00:25:33,238
your databases. Currently we support the

388
00:25:33,324 --> 00:25:36,342
postgreSQL databases here,

389
00:25:36,476 --> 00:25:40,038
so it provides

390
00:25:40,054 --> 00:25:43,850
the helm charts and operators to guarantee the high

391
00:25:43,920 --> 00:25:47,174
availability and automatical

392
00:25:47,222 --> 00:25:50,422
deployment and the metrics

393
00:25:50,486 --> 00:25:52,730
such features on the Kubernetes.

394
00:25:53,710 --> 00:25:57,902
So our dymo I will use this

395
00:25:58,036 --> 00:26:01,886
ripple sharding Sophia on cloud to help us quickly

396
00:26:01,988 --> 00:26:06,242
deploy a sharding Sophia clusters and you

397
00:26:06,296 --> 00:26:11,090
can to choose use the RDS working

398
00:26:11,160 --> 00:26:14,286
as the storage node and just like sharding

399
00:26:14,318 --> 00:26:17,654
Sophia unclouded rifle to help you

400
00:26:17,852 --> 00:26:21,458
deploy the sharding Sophia proxies,

401
00:26:21,634 --> 00:26:23,720
right? Because like I said,

402
00:26:25,610 --> 00:26:29,382
one benefit of this solution that you don't be locked

403
00:26:29,446 --> 00:26:33,770
in one cloud because here

404
00:26:33,840 --> 00:26:37,226
you just use this open source project to working as

405
00:26:37,248 --> 00:26:41,022
a computing node of this distributed databases and

406
00:26:41,076 --> 00:26:44,494
it can reach the same qualities as the

407
00:26:44,532 --> 00:26:48,554
distributed system. For example data sharding distributed

408
00:26:48,602 --> 00:26:52,800
transaction, right? Another benefit of the solution that

409
00:26:53,190 --> 00:26:56,542
your storage node or your databases

410
00:26:56,686 --> 00:27:00,226
can be located anywhere. It could be

411
00:27:00,248 --> 00:27:04,190
the RDS on Google Cloud or AWS.

412
00:27:04,350 --> 00:27:08,498
It can be the open source databases

413
00:27:08,674 --> 00:27:12,402
working on your kubernetes cluster.

414
00:27:12,466 --> 00:27:16,280
If you use some the PostgreSQL operator or

415
00:27:17,790 --> 00:27:21,414
PostgreSQL helm charts, you can just deploy

416
00:27:21,462 --> 00:27:24,394
your databases on kubernetes, right? Yeah.

417
00:27:24,432 --> 00:27:30,122
So no matter your database is located where

418
00:27:30,176 --> 00:27:32,250
your database is located,

419
00:27:34,670 --> 00:27:38,154
just like sharding Sophia with it, your storage node,

420
00:27:38,282 --> 00:27:42,250
then your application just visited this

421
00:27:42,420 --> 00:27:47,166
virtual distributed databases and server.

422
00:27:47,278 --> 00:27:51,166
Then you can own this distributed

423
00:27:51,278 --> 00:27:55,382
database system. So that's the flexibility of

424
00:27:55,436 --> 00:28:00,102
this solution. So here my

425
00:28:00,156 --> 00:28:03,990
dymo, I just choose one

426
00:28:04,060 --> 00:28:07,590
popular postgres chart to help me to deploy

427
00:28:08,010 --> 00:28:11,194
postgres instance on kubernetes. Actually you can

428
00:28:11,232 --> 00:28:15,674
just use your current RDS service and I

429
00:28:15,712 --> 00:28:19,254
use the sharding Sophia on cloud ripple to deploy the sharding

430
00:28:19,302 --> 00:28:23,198
Sophia cluster. Then application just

431
00:28:23,284 --> 00:28:27,226
visit your shorting Sophia proxy shorting Sophia cluster

432
00:28:27,418 --> 00:28:31,402
shorting Sophia Proster can help you do the data shorting

433
00:28:31,546 --> 00:28:33,950
and rewriting features.

434
00:28:35,810 --> 00:28:39,710
So you can see here, I mean

435
00:28:39,780 --> 00:28:42,978
use this rifle to deploy all the stuff.

436
00:28:43,144 --> 00:28:46,694
And I want to say here, like I

437
00:28:46,732 --> 00:28:51,334
mentioned before, how to create a sharding table here

438
00:28:51,532 --> 00:28:54,738
I want to introduce the distributed SQL

439
00:28:54,834 --> 00:28:58,774
like this one, create a sharding

440
00:28:58,822 --> 00:29:02,090
table user. This user,

441
00:29:02,670 --> 00:29:06,262
the sharding column of this distributed

442
00:29:06,406 --> 00:29:10,054
table, its user id. And we use

443
00:29:10,112 --> 00:29:14,522
the mod sharding algorithm

444
00:29:14,666 --> 00:29:18,878
to split this logic table single

445
00:29:18,964 --> 00:29:22,798
table into four shards or into

446
00:29:22,884 --> 00:29:24,830
four actual table.

447
00:29:27,090 --> 00:29:31,182
All of the four table will be located

448
00:29:31,326 --> 00:29:35,498
in the first PostgreSQL

449
00:29:35,694 --> 00:29:41,682
group and the second PostgreSQl

450
00:29:41,826 --> 00:29:45,526
group. I mean PostgreSQl cluster. So you

451
00:29:45,548 --> 00:29:49,366
can see here, it's just a SQL

452
00:29:49,478 --> 00:29:53,254
dialect of PostgreSQl

453
00:29:53,302 --> 00:29:56,710
SQl or MySQL SQl or Oracle SQl.

454
00:29:56,790 --> 00:30:00,814
It's just SQl but it's different from your

455
00:30:00,932 --> 00:30:04,640
standard SQL language. It's a new type.

456
00:30:05,170 --> 00:30:09,370
We name it as the distributed

457
00:30:09,450 --> 00:30:13,058
SQL language to help us to create

458
00:30:13,144 --> 00:30:16,542
your sharding database architecture.

459
00:30:16,686 --> 00:30:19,890
That means you just deploy

460
00:30:20,390 --> 00:30:23,614
your postgreSQl databases

461
00:30:23,742 --> 00:30:27,342
and sharding Sophia proxy. And you ran

462
00:30:27,486 --> 00:30:31,586
all of the distributed SQL at sharding

463
00:30:31,618 --> 00:30:35,522
Sophia proxy client at sharding Sophia

464
00:30:35,666 --> 00:30:39,990
proxy. Then it will help you automatically

465
00:30:40,150 --> 00:30:44,698
do the data sharding, right? So that

466
00:30:44,864 --> 00:30:48,874
I mentioned before, if you want the

467
00:30:48,912 --> 00:30:52,938
sharding Sophia to help you do the data sharding

468
00:30:53,034 --> 00:30:57,166
or skewing, skew out or rewrite splitting or

469
00:30:57,268 --> 00:31:01,070
the SQL audit, you can just use the

470
00:31:01,220 --> 00:31:05,874
distributed SQl here and

471
00:31:06,072 --> 00:31:09,582
tell him use the distribute SQL

472
00:31:09,646 --> 00:31:13,026
and it will help you reach the

473
00:31:13,208 --> 00:31:17,062
work with all of the functions I mentioned before.

474
00:31:17,196 --> 00:31:23,158
See here the rewrap splitting function.

475
00:31:23,324 --> 00:31:27,190
We can just tell Charlie Sophia, hey, this one

476
00:31:27,260 --> 00:31:30,738
is the right data source.

477
00:31:30,834 --> 00:31:34,582
This one is the read data source. And we want to use

478
00:31:34,636 --> 00:31:38,998
the random strategy to help our application

479
00:31:39,164 --> 00:31:44,574
to, to do

480
00:31:44,612 --> 00:31:47,342
the rewrite splitting that function,

481
00:31:47,476 --> 00:31:51,802
right. So it will randomly send your query

482
00:31:51,946 --> 00:31:55,854
to the different replicas. For example, if you have the

483
00:31:55,892 --> 00:31:59,938
three replica, all of them can help you

484
00:32:00,104 --> 00:32:03,966
get the readout. And here we use this distributed

485
00:32:03,998 --> 00:32:07,970
SQL to tell Sharding Sophia, hey, you can randomly

486
00:32:08,050 --> 00:32:12,120
send the clusters select queries to different

487
00:32:12,970 --> 00:32:16,694
three replicas. So that's the power of the

488
00:32:16,732 --> 00:32:19,580
distributed SQL, this demo.

489
00:32:20,110 --> 00:32:23,658
I use a lot of the distributed SQL to help us

490
00:32:23,744 --> 00:32:27,338
manage our database clusters and to do and

491
00:32:27,424 --> 00:32:31,090
query and gather readouts from this distributed

492
00:32:31,110 --> 00:32:34,782
system. And if you have time, you can do it by yourself

493
00:32:34,916 --> 00:32:38,954
to do the demonstration. That's all about today's

494
00:32:39,002 --> 00:32:42,830
talk. And if you have any questions you can contact me

495
00:32:42,900 --> 00:32:47,022
here or you can just raise the issue at

496
00:32:47,076 --> 00:32:50,494
the GitHub. I mean the communities are

497
00:32:50,532 --> 00:32:53,950
viewing to answer your question and to help you out.

498
00:32:54,100 --> 00:32:55,590
Yeah, see you next time.

