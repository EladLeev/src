1
00:00:41,730 --> 00:00:45,586
Everyone and welcome to my talk today IBM

2
00:00:45,618 --> 00:00:49,650
here to present to you a topic on exploring stateful

3
00:00:49,730 --> 00:00:53,274
mic services built with open liberty in Kubernetes.

4
00:00:53,402 --> 00:00:57,274
My name is Mary Grygleski and I'm a senior developer advocate

5
00:00:57,322 --> 00:01:01,002
at IBM. You may wonder who is Mary Grygleski?

6
00:01:01,066 --> 00:01:04,366
I'm a developer advocate at IBM. I first started

7
00:01:04,468 --> 00:01:07,906
talking about reactive systems. If you have seen me before

8
00:01:08,008 --> 00:01:11,106
I was doing a lot more reactive systems for the

9
00:01:11,128 --> 00:01:15,074
past year and a half or so. Then recently I transferred team to

10
00:01:15,112 --> 00:01:19,074
the websphere team and Liberty and all the open source Java

11
00:01:19,122 --> 00:01:22,230
tech stack within IBM. This is where I am now.

12
00:01:22,300 --> 00:01:25,666
So my area as such also involves cloud native,

13
00:01:25,778 --> 00:01:29,722
cloud DevOps, enterprise distributed systems and

14
00:01:29,776 --> 00:01:32,326
my projects now include Open Liberty,

15
00:01:32,438 --> 00:01:35,690
Microprofile, Jakarta Ee and more.

16
00:01:35,840 --> 00:01:39,254
I'm essentially a developer relations software

17
00:01:39,302 --> 00:01:43,150
engineer and I myself I have 25 years of experience

18
00:01:43,300 --> 00:01:46,638
being an engineer in development work and

19
00:01:46,724 --> 00:01:50,480
it's delivery work as well. And so I kind of understand

20
00:01:51,090 --> 00:01:55,086
not just like coming out to talk but I myself was an engineer dealing

21
00:01:55,118 --> 00:01:58,562
with delivery of software in the past. And outside of my

22
00:01:58,616 --> 00:02:02,126
work I'm also a very active community builder.

23
00:02:02,238 --> 00:02:06,206
I'm currently the president of the Chicago Java users group IBM,

24
00:02:06,238 --> 00:02:10,482
also the co organizers for several IBM sponsored

25
00:02:10,546 --> 00:02:14,086
meetups in the Chicago area and that's where I'm located and

26
00:02:14,108 --> 00:02:18,134
I'm also an active church volunteer. So today's

27
00:02:18,182 --> 00:02:21,062
topic is about stateful microservices.

28
00:02:21,206 --> 00:02:24,858
But before we get into there I figure let me

29
00:02:25,024 --> 00:02:28,746
start, have a bit of a background, make sure we

30
00:02:28,768 --> 00:02:32,334
set the context correctly. But before we get into some

31
00:02:32,372 --> 00:02:36,362
serious stuff let's kind of talk about what stateful versus

32
00:02:36,426 --> 00:02:40,846
stateless means. Actually as I was using research on this topic and

33
00:02:40,948 --> 00:02:44,190
by the way it's a new topic for me too so bear with me.

34
00:02:44,260 --> 00:02:48,354
And we are all at the tip of the iceberg because to

35
00:02:48,392 --> 00:02:51,826
me there are tons of information that have yet to be

36
00:02:51,848 --> 00:02:55,678
mined from this topic area. It's so exciting too and

37
00:02:55,704 --> 00:02:59,174
also too for me coming from a reactive background I see

38
00:02:59,212 --> 00:03:03,174
a lot of overlapping concepts thats cut across.

39
00:03:03,292 --> 00:03:07,058
It's not like black and white, that's reactive and that's stateful.

40
00:03:07,154 --> 00:03:10,546
The fact is that reactive too also we have to handle

41
00:03:10,578 --> 00:03:14,070
the state of any application and as such now IBM

42
00:03:14,150 --> 00:03:17,418
perhaps not talking so much about the reactive side but as you

43
00:03:17,424 --> 00:03:20,842
can see some of the concepts, the goals in being stateful

44
00:03:20,906 --> 00:03:24,414
your microservices really touches upon reactive. But anyway

45
00:03:24,532 --> 00:03:28,014
let's have some fun stuff first. So as you can see I

46
00:03:28,052 --> 00:03:31,482
now have a picture of Nemo, his dad

47
00:03:31,546 --> 00:03:35,214
Marlin and the forgetful fish, Dory. So if you

48
00:03:35,252 --> 00:03:38,274
know thats story, then you may be able to

49
00:03:38,312 --> 00:03:41,682
guess why I am borrowing this idea. I actually

50
00:03:41,736 --> 00:03:45,650
have to say, too, is that it's somewhere where I read about somebody talking

51
00:03:45,720 --> 00:03:49,194
about stateful microservices. They brought up Nemo,

52
00:03:49,262 --> 00:03:52,326
and I kind of gave me ideas. So, just so you know,

53
00:03:52,348 --> 00:03:56,134
it's not like my own original idea, but I certainly got into it,

54
00:03:56,172 --> 00:03:59,606
and because I know the story. So I just thought, definitely,

55
00:03:59,708 --> 00:04:03,862
it's a great analogy to be used at a conference, right? Less boring.

56
00:04:03,926 --> 00:04:07,354
And let's talk about fish. So let's use them to

57
00:04:07,392 --> 00:04:10,426
kind of illustrate. So, as you know, and for some

58
00:04:10,448 --> 00:04:13,726
of you who are not familiar with the story, let me give kind of

59
00:04:13,748 --> 00:04:16,910
like a two minute run through of it.

60
00:04:16,980 --> 00:04:20,394
So Nemo is this small baby fish, and Nemo

61
00:04:20,522 --> 00:04:24,042
actually lost his mom. So just living with his dad,

62
00:04:24,106 --> 00:04:27,310
Marlin. So the bigger clownfish, the orange clownfish.

63
00:04:27,390 --> 00:04:30,594
So both of them living together and happy. Then all of a sudden, one day,

64
00:04:30,632 --> 00:04:33,342
Nemo got into trouble, and he got caught.

65
00:04:33,486 --> 00:04:36,834
Captured by some. I wouldn't say bad people,

66
00:04:36,872 --> 00:04:40,370
but just captured. And obviously, as you can imagine,

67
00:04:40,450 --> 00:04:43,538
the dad was, like, frantic trying to look for Nemo.

68
00:04:43,634 --> 00:04:47,346
So during the course of it, he was swimming around, and then he bumped

69
00:04:47,378 --> 00:04:51,210
into this bluefish, Dory. She actually is a very

70
00:04:51,280 --> 00:04:54,986
forgetful fish. She doesn't remember anything. Now, as the

71
00:04:55,008 --> 00:04:58,934
story goes. And even if you are new to the story, you can imagine,

72
00:04:58,982 --> 00:05:02,418
right? Have you ever dealt with people who are forgetful? And I really don't

73
00:05:02,454 --> 00:05:06,286
mean to be, like, make fun of such situation. There are

74
00:05:06,308 --> 00:05:09,482
people, too, with medical conditions that do not have memory,

75
00:05:09,546 --> 00:05:13,114
too. But as you can see, in a cartoon kind of manner,

76
00:05:13,162 --> 00:05:16,354
too. We just kind of laugh about things like that

77
00:05:16,472 --> 00:05:20,018
in A funny story like thats. You can see, too, Dory is a

78
00:05:20,024 --> 00:05:23,906
lot more agile. Like, she can do whatever she wants at any moment

79
00:05:24,008 --> 00:05:27,218
without concern for thats has happened before, right?

80
00:05:27,304 --> 00:05:30,534
Something like that. So you can kind of see. I mean, it's basically the

81
00:05:30,572 --> 00:05:34,246
idea of if you don't need to remember things, you actually can go ahead and

82
00:05:34,268 --> 00:05:37,826
do things. You're less concerned, you're less burdened, less carrying

83
00:05:37,858 --> 00:05:41,818
of the baggage. Whereas Marlon is kind

84
00:05:41,824 --> 00:05:45,670
of like a normal person, right? We remember things, so he naturally

85
00:05:45,750 --> 00:05:49,686
remembers things. And as you can see, both of them embark on their journey

86
00:05:49,718 --> 00:05:53,726
to look for. Nemo was full of know, really hilarious kind of

87
00:05:53,748 --> 00:05:56,958
moments. One of the things maybe I should quote was that when

88
00:05:57,044 --> 00:06:01,390
there was a group of jellyfish and Dory thought they were really

89
00:06:01,540 --> 00:06:05,162
know they are pink in color, kind of round, kind of ball floating.

90
00:06:05,306 --> 00:06:09,074
So Dory went and was like trying to, to so speak, jump on

91
00:06:09,112 --> 00:06:12,914
these jellyfish, because she had no idea that jellyfish would

92
00:06:12,952 --> 00:06:16,194
sting. Whereas Marlon is like, hey, wait a minute, what are you doing? Are you

93
00:06:16,232 --> 00:06:20,086
crazy? You're going to be stained like that. So that's kind of an example

94
00:06:20,188 --> 00:06:23,878
of how hilarious it can be. But it really illustrates too

95
00:06:23,964 --> 00:06:27,394
that there's the stateful and stateless, some of these concepts

96
00:06:27,442 --> 00:06:30,826
you can actually use that it's like an analogous to what

97
00:06:30,848 --> 00:06:34,970
we are trying to talk about today on this topic, is that being

98
00:06:35,040 --> 00:06:39,034
stateless is kind of a lot simpler, right? In a computing sense too.

99
00:06:39,072 --> 00:06:42,554
Computing life used to be simpler too. In the beginning of time of

100
00:06:42,592 --> 00:06:45,966
computers, there were no such thing has state, right? Thats we need to

101
00:06:45,988 --> 00:06:49,790
worry about, other than the fact that the state would exist during,

102
00:06:49,940 --> 00:06:53,806
let's say a computation, doing a math, one plus two, some kind

103
00:06:53,828 --> 00:06:57,534
of mathematical formula. It only needs to exist the memory

104
00:06:57,662 --> 00:07:00,418
for that period of time. Once you get the result,

105
00:07:00,584 --> 00:07:03,746
essentially the memory gets thrown away. You don't keep the

106
00:07:03,768 --> 00:07:06,934
data around. And that's the idea. But the thing is too.

107
00:07:06,972 --> 00:07:11,474
Well, okay, let's kind of go in a bit now. So, stateless computing.

108
00:07:11,522 --> 00:07:15,634
Now moving back into the serious, better about computing, what is Stateless

109
00:07:15,682 --> 00:07:18,978
computing? So essentially it is a communication protocol

110
00:07:19,074 --> 00:07:23,098
that does not retain any session information. So state of the data,

111
00:07:23,184 --> 00:07:26,454
right? Anytime we deal with protocol, we deal with multiple

112
00:07:26,502 --> 00:07:29,898
parties, or at least two. So your receiver receives the data.

113
00:07:29,984 --> 00:07:33,662
You don't need to remember what the state was before

114
00:07:33,716 --> 00:07:37,070
you receive it. So that's the idea. So the data itself

115
00:07:37,140 --> 00:07:40,766
doesn't get recorded between transactions. As a result, you can

116
00:07:40,788 --> 00:07:44,642
see thats the architecture of your system design implementation too.

117
00:07:44,696 --> 00:07:47,794
Everything is a lot simpler. Scaling the system,

118
00:07:47,912 --> 00:07:51,474
no problem, right? If you have processor processing some

119
00:07:51,512 --> 00:07:54,642
systems, and here you are, there are more demands now,

120
00:07:54,696 --> 00:07:57,666
more requests coming in. Then what do you do? You scale it up,

121
00:07:57,688 --> 00:08:01,234
you add more processor to it to handle all the demands.

122
00:08:01,282 --> 00:08:04,726
No big deal, just add it, right? So it kind of relates to what we

123
00:08:04,748 --> 00:08:08,262
are doing today too. Even with cloud computing, we needed more

124
00:08:08,396 --> 00:08:12,166
service in serverless computing, right? That's the thing, the infrastructure,

125
00:08:12,278 --> 00:08:15,626
it keeps spinning. And that's why the idea of cloud native in a

126
00:08:15,648 --> 00:08:18,906
strictest sense too, is really serverless. It helps to scale the

127
00:08:18,928 --> 00:08:22,326
systems a lot easier. And of course too, if there's

128
00:08:22,358 --> 00:08:26,602
system crash, then the recoverable, it's very recoverable,

129
00:08:26,666 --> 00:08:30,394
it's very easy because there's no need for you to when you restart,

130
00:08:30,442 --> 00:08:34,094
there's no need for you to have to remember, well, what was

131
00:08:34,132 --> 00:08:37,534
the state before that? I need to kind of read memory and kind of restart.

132
00:08:37,582 --> 00:08:40,610
So everything is a lot more agile, as you can see. Now,

133
00:08:40,680 --> 00:08:44,706
realistically, we actually live in a stateful world and we

134
00:08:44,728 --> 00:08:48,310
really cannot survive if we are living statelessly. Right.

135
00:08:48,380 --> 00:08:52,402
But it doesn't mean thats we have to have all applications be stateful

136
00:08:52,466 --> 00:08:56,146
in some circumstances. Stateless is fine. Functional style

137
00:08:56,178 --> 00:09:00,010
of programming, serverless, that's okay. But the bulk of our

138
00:09:00,080 --> 00:09:03,706
applications we do require state, right? When, let's say

139
00:09:03,728 --> 00:09:06,618
you log on to your web page,

140
00:09:06,704 --> 00:09:09,914
your web application, you log on, you want to retain the

141
00:09:09,952 --> 00:09:14,538
credentials when you are still within the session, you don't want to have every request,

142
00:09:14,634 --> 00:09:18,154
you don't need to reauthenticate yourself every time you just make a request

143
00:09:18,202 --> 00:09:22,238
within the same session. So that kind of a statefulness is what we're looking at.

144
00:09:22,324 --> 00:09:25,662
Stateful computing. This really is a communication protocol

145
00:09:25,726 --> 00:09:29,506
that would retain all session information. So it gets recorded

146
00:09:29,608 --> 00:09:32,654
at every step along the way, right? All transactions,

147
00:09:32,702 --> 00:09:36,462
everything, supposedly, theoretically nothing should be lost.

148
00:09:36,526 --> 00:09:40,086
And in some ways too, you guarantee, right, that you can kind of

149
00:09:40,108 --> 00:09:42,934
look back at the system and dig up all the history information.

150
00:09:43,052 --> 00:09:46,630
Now as a result too, because you do need to keep all of these

151
00:09:46,700 --> 00:09:50,274
historical data, the logging and everything. Then naturally too

152
00:09:50,332 --> 00:09:53,578
you can see the architecture, the implementation, the design of the

153
00:09:53,584 --> 00:09:56,502
system is more complex, it's more convoluted,

154
00:09:56,566 --> 00:09:59,946
and you have to handle many situation and what. But if

155
00:09:59,968 --> 00:10:03,354
you need to spin off more components when you get

156
00:10:03,392 --> 00:10:07,214
higher number of requests coming into your system, then you need to scale your system

157
00:10:07,332 --> 00:10:10,186
will be a lot harder because what do you do if you kind of spin

158
00:10:10,218 --> 00:10:13,666
off another node, then you want to make sure that node is synced up

159
00:10:13,688 --> 00:10:17,234
to what the other running nodes already have. So as you can see,

160
00:10:17,272 --> 00:10:20,898
right, the overall performance to scaling it, everything's just

161
00:10:20,984 --> 00:10:24,482
more work, more cumbersome. Recoverability, same thing.

162
00:10:24,536 --> 00:10:28,526
If there's a system failure, you need to restart. Well that's

163
00:10:28,558 --> 00:10:32,022
kind of a pain in the neck, because then now you need to make sure

164
00:10:32,076 --> 00:10:35,926
when you recover the system, you need to read from the history to

165
00:10:35,948 --> 00:10:39,622
see how you can reconstruct the stateful that system was

166
00:10:39,676 --> 00:10:43,050
in prior to the crash and all that. So as you can see,

167
00:10:43,120 --> 00:10:46,726
it's not as simple, right? Doing stateful. How about then let's

168
00:10:46,758 --> 00:10:50,298
take a look. How was statefulness being handled in

169
00:10:50,304 --> 00:10:53,918
the cloudless days? So here I am using a blue sky, and you

170
00:10:53,924 --> 00:10:57,694
can see all blue sky is just a jet plane flyby and

171
00:10:57,732 --> 00:11:01,534
in the blue sky cloudless days before cloud. So it was all

172
00:11:01,572 --> 00:11:05,054
like client server systems. Now we rely a lot to back

173
00:11:05,092 --> 00:11:08,574
then, let's say not going back to all the way to the beginning

174
00:11:08,622 --> 00:11:12,130
of history in computing, but let's say even between the time

175
00:11:12,200 --> 00:11:15,826
or after, like the 90s, right, in the 2000s when Java came

176
00:11:15,848 --> 00:11:19,702
out, let's talk about that time. So a lot of stateful too was

177
00:11:19,756 --> 00:11:22,722
being done using database style transactions.

178
00:11:22,786 --> 00:11:26,822
So we rely a lot too on the database to essentially keep data

179
00:11:26,876 --> 00:11:30,566
to be persistent on the server side. So all of these transactions are

180
00:11:30,588 --> 00:11:33,978
using also being handled by the database. We leverage a lot on the

181
00:11:33,984 --> 00:11:36,538
database itself. Now as far as Java goes,

182
00:11:36,624 --> 00:11:40,022
essentially too. If you have worked with enterprise Java beans,

183
00:11:40,086 --> 00:11:43,334
the earlier specification of enterprise Java,

184
00:11:43,382 --> 00:11:46,578
the EE edition, right? Java Ee or J two EE,

185
00:11:46,614 --> 00:11:49,646
what it used to be and now it's called Jakarta ee, right.

186
00:11:49,668 --> 00:11:53,882
Just recently change name about a year and a half ago. So Java

187
00:11:53,946 --> 00:11:57,594
used to be enterprise Java beans. EJB, stateful EJB.

188
00:11:57,642 --> 00:12:01,138
If you work with that, you know, you're aware of stateless EJB, it's a

189
00:12:01,144 --> 00:12:04,914
lot simpler to do, whereas with stateful it's actually

190
00:12:04,952 --> 00:12:08,686
a lot more work. And then there's also the enterprise level stateful

191
00:12:08,798 --> 00:12:12,086
actually, now we'll kind of think of it, don't quite remember, I actually work for

192
00:12:12,108 --> 00:12:15,526
a company that manufacture app server. So I actually knew the

193
00:12:15,548 --> 00:12:18,950
spec quite well because I had to implement a lot of the management function.

194
00:12:19,020 --> 00:12:22,782
But anyway, so stateful, it was being handled by stateful EJP.

195
00:12:22,866 --> 00:12:25,994
And the thing is too, what about servlets? Right?

196
00:12:26,032 --> 00:12:29,862
So servlets too is that is essentially rely on HTTP

197
00:12:29,926 --> 00:12:33,242
session. So the session is what kind of keep track of the

198
00:12:33,296 --> 00:12:36,766
session information and kind of communicates with all the web requests that

199
00:12:36,788 --> 00:12:40,042
comes in. And then as far as the client side is concerned,

200
00:12:40,106 --> 00:12:43,290
then client side would cache like server responses.

201
00:12:43,370 --> 00:12:47,206
So say for example, these are examples, right? All web applications

202
00:12:47,338 --> 00:12:50,974
will have to, any request you make to the server, you authenticate.

203
00:12:51,022 --> 00:12:54,286
So the authentication process either kind of make use of a cookie

204
00:12:54,318 --> 00:12:58,530
based type of authentication or like doing like token based authentication.

205
00:12:58,610 --> 00:13:02,406
So cookie based as you know too, it has concern even though the

206
00:13:02,428 --> 00:13:05,174
cookie itself is small piece of information,

207
00:13:05,292 --> 00:13:08,994
essentially is your session id, right. That you communicate back to the server.

208
00:13:09,042 --> 00:13:12,346
So that's how you can see thats external mechanism is needed in

209
00:13:12,368 --> 00:13:16,134
order to be able to communicate back to the server that, hey, this request

210
00:13:16,182 --> 00:13:20,234
coming in, I have this cookie, then server can look up and then know

211
00:13:20,272 --> 00:13:23,294
that, okay, well this is which request it is kind of

212
00:13:23,332 --> 00:13:26,846
coming from, who is the client that you can kind of reuse the same

213
00:13:26,948 --> 00:13:30,970
session information. And then of course then there's also token based authentication

214
00:13:31,050 --> 00:13:34,914
and that's JWT, it's more popular, right. The JSON web

215
00:13:34,952 --> 00:13:39,326
token. And that too for JSON too. Actually JSON

216
00:13:39,358 --> 00:13:43,006
is a bit more efficient than cookie, as you know. Too for cookie,

217
00:13:43,038 --> 00:13:46,306
right. You basically will give the server your session id and

218
00:13:46,328 --> 00:13:49,942
then the server would have to then look up the information. And then

219
00:13:49,996 --> 00:13:53,638
basically you have to then kind of multi steps, you need to look up

220
00:13:53,644 --> 00:13:57,126
the information, then you process the request. However, with a

221
00:13:57,148 --> 00:14:00,806
token based like JWT, then the JWT is allowed to

222
00:14:00,828 --> 00:14:04,918
keep more information, right. You can actually encapsulate also the session

223
00:14:05,014 --> 00:14:08,378
information in that token. So then it's kind of more like one call to the

224
00:14:08,384 --> 00:14:11,898
server, it already has the permission and it looks up and all those things.

225
00:14:11,984 --> 00:14:15,438
But anyway, without going into all the detail, but those are kind of

226
00:14:15,444 --> 00:14:18,746
the mechanism that has being used. Actually it's

227
00:14:18,778 --> 00:14:21,646
not too much different than what we have to deal with today, but it's just

228
00:14:21,668 --> 00:14:24,846
that back then was client service system. So now let's

229
00:14:24,878 --> 00:14:28,562
then move into the stateful microservices in cloud

230
00:14:28,616 --> 00:14:32,514
native environments. And that's what we're interested to talk about these

231
00:14:32,552 --> 00:14:36,338
days. We live in kind of cloud native age and maybe not everybody

232
00:14:36,424 --> 00:14:40,326
has started doing cloud native, but I would imagine very soon we

233
00:14:40,348 --> 00:14:44,242
will be more and more, or I should say more and more applications

234
00:14:44,306 --> 00:14:47,510
will move into the cloud native environment. And conf 42.

235
00:14:47,580 --> 00:14:51,186
Then there's stateful, first of all, microservices. So they are like bite

236
00:14:51,218 --> 00:14:54,602
sized chunk, right. Of component in a system that

237
00:14:54,656 --> 00:14:58,282
actually kind of is a big enhancement over

238
00:14:58,336 --> 00:15:02,202
the old style of doing things in a monolith, right? So now then

239
00:15:02,256 --> 00:15:06,462
we pull into this concern of stateful. Let's take a look. You may know too

240
00:15:06,516 --> 00:15:10,030
well, this is kind of a sums up, right? Essentially you're saying that, well,

241
00:15:10,100 --> 00:15:14,142
cloud native, and then we're talking about cloud native is really dealing with

242
00:15:14,196 --> 00:15:17,346
stateless containers. Why? Because containers needs to be

243
00:15:17,368 --> 00:15:21,554
very agile. You don't want to keep a lot of history information about it

244
00:15:21,592 --> 00:15:25,454
and kind of going back to the Nemo, Marlin and Dory scenario,

245
00:15:25,502 --> 00:15:29,254
right. If you keep too much information, it just slows things down. The goal of

246
00:15:29,292 --> 00:15:33,138
cloud native is to have very agile systems. So we're wondering

247
00:15:33,234 --> 00:15:36,886
then what to do, right? So let's first kind of understand a bit too of

248
00:15:36,908 --> 00:15:40,650
cloud native computing for those of you maybe who are newer to this

249
00:15:40,720 --> 00:15:44,234
computing kind of approach. So it's really an overarching approach. Right.

250
00:15:44,272 --> 00:15:48,006
It's really an extension to cloud computing. It addresses

251
00:15:48,038 --> 00:15:51,706
the true needs of an enterprise level distributed business application

252
00:15:51,808 --> 00:15:55,246
systems. So these true needs, what are they essentially? I go

253
00:15:55,268 --> 00:15:58,414
back to history, who started this? Coined the term of cloud

254
00:15:58,452 --> 00:16:01,934
native. It's really Netflix. Netflix has been really like ahead

255
00:16:01,972 --> 00:16:05,226
of time in terms of software computing at the time. Well,

256
00:16:05,268 --> 00:16:08,898
because of their business too, they need to kind of have streaming media

257
00:16:08,984 --> 00:16:12,254
contents in high volumes and high demand.

258
00:16:12,302 --> 00:16:15,714
So that's why it pushes them to get to that level of

259
00:16:15,752 --> 00:16:19,746
computing early on in the game. And so they coined the term cloud native

260
00:16:19,858 --> 00:16:23,122
in the early two thousand and ten s. And essentially they wanted to leverage

261
00:16:23,186 --> 00:16:27,026
on the cloud to meet their goals for the systems to be highly

262
00:16:27,058 --> 00:16:30,534
available, scalable and performant. So as you can see now,

263
00:16:30,572 --> 00:16:33,994
if you are also familiar with reactive systems, and that's where

264
00:16:34,032 --> 00:16:37,402
I kind of came from, kind of advocating, I was like, oh, wow,

265
00:16:37,456 --> 00:16:40,826
cool. This is like the similarities, right? We're exploring into more

266
00:16:40,848 --> 00:16:44,666
and more, deeper into the cloud native context for microservices.

267
00:16:44,778 --> 00:16:47,982
We want to make sure microservices help systems to

268
00:16:48,036 --> 00:16:51,726
be more highly available. Right. And this kind of pairs up really well with the

269
00:16:51,748 --> 00:16:54,734
reactive concept of being very responsive, right.

270
00:16:54,772 --> 00:16:58,002
Very scalable and very resilient. So as you can see,

271
00:16:58,056 --> 00:17:01,218
highly available, scalable and performant performance is kind

272
00:17:01,224 --> 00:17:05,250
of like the responsive aspect of reactive. So they kind of share these common

273
00:17:05,320 --> 00:17:08,454
goals. But anyway, I know I get a bit excited when I kind of get

274
00:17:08,492 --> 00:17:12,086
back into talking a bit about reactive. I just believe that sometimes

275
00:17:12,268 --> 00:17:16,054
all these labeling eventually, but things is

276
00:17:16,092 --> 00:17:20,122
not really black and white. They are so much like commonality things,

277
00:17:20,256 --> 00:17:24,042
features, characters between different things that we label them for.

278
00:17:24,096 --> 00:17:28,090
But I think ultimately the goal of us doing computing is to provide

279
00:17:28,160 --> 00:17:31,114
solutions to solve problems. And that's what it is.

280
00:17:31,152 --> 00:17:34,794
So it isn't saying that one thing is better than the other. It really all

281
00:17:34,832 --> 00:17:38,206
depends, right? It depends on what you want to do for your system. What do

282
00:17:38,228 --> 00:17:42,346
you need? So first of all, anytime you need to provide, look for a solution

283
00:17:42,458 --> 00:17:45,806
for your problem, you need to understand your problem first, what are you trying to

284
00:17:45,828 --> 00:17:49,630
solve? And then decide on the right tool to use. But anyway, I digress.

285
00:17:49,710 --> 00:17:53,330
So let me get back. It's kind of interesting and important.

286
00:17:53,400 --> 00:17:57,842
We also bring up cloud native within this context of stateful microservices.

287
00:17:57,986 --> 00:18:01,510
So for cloud native, right, we're kind of having this debate. Well,

288
00:18:01,580 --> 00:18:04,614
we're talking about stateful microservices. How is that possible?

289
00:18:04,732 --> 00:18:08,482
So cloud native, right. You may also have heard of this twelve

290
00:18:08,556 --> 00:18:12,614
factor application. It's a methodology, essentially helps guide

291
00:18:12,662 --> 00:18:16,106
us. It doesn't dictate what you should use, but it's kind of

292
00:18:16,208 --> 00:18:20,106
a guiding principle. Another kind of guiding principle. This kind of

293
00:18:20,128 --> 00:18:23,946
describe what a cloud native application should do. And it's drafted

294
00:18:23,978 --> 00:18:27,834
by developers at Heroku, again, a set of guidelines

295
00:18:27,962 --> 00:18:31,646
for portable and resilient applications that are well suited in the

296
00:18:31,668 --> 00:18:35,354
cloud environments. Now one of the factors, and that's, thats I'm highlighting

297
00:18:35,402 --> 00:18:38,850
too, is the need for self contained services which are

298
00:18:38,920 --> 00:18:42,958
to be deployed as stateless promises. So microservices

299
00:18:43,054 --> 00:18:46,754
architecture. Well, so far, right, that's the primary thing is

300
00:18:46,792 --> 00:18:50,242
so far as microservices is the one that can satisfy such a requirement.

301
00:18:50,306 --> 00:18:53,574
So here we are. Why am I doing this talk? We're talking, well, what is

302
00:18:53,612 --> 00:18:56,838
going on? Stateful microservices. Whereas in the

303
00:18:56,844 --> 00:18:59,922
microservices, when we kind of talk about it today in a cloud native

304
00:18:59,986 --> 00:19:03,578
way, it should be stateless. Like you're thinking that am I

305
00:19:03,584 --> 00:19:06,522
crazy in here? Right? But like I said, I was trying to point out that

306
00:19:06,576 --> 00:19:09,994
it is necessary, we needed to address the stateful aspect of

307
00:19:10,032 --> 00:19:13,638
any applications and how do we do it is what we're trying to explore in

308
00:19:13,664 --> 00:19:17,178
to see how this can be done in a microservices,

309
00:19:17,274 --> 00:19:20,938
cloud native world. Twelve factor application. So let's

310
00:19:21,114 --> 00:19:24,446
just may as well kind of show it a little bit too. Move over

311
00:19:24,468 --> 00:19:28,254
here a little bit. So as you can see too, there are twelve factors.

312
00:19:28,302 --> 00:19:31,426
But like I said, you can also read all of it, some of them you

313
00:19:31,448 --> 00:19:35,246
already know. Right. We deal with making sure there's a lot of accountability,

314
00:19:35,438 --> 00:19:38,082
keeping track of things and the dependencies,

315
00:19:38,146 --> 00:19:42,022
configuration, all these things. But I wanted to highlight this, in which the

316
00:19:42,076 --> 00:19:45,494
number six, the processes, so execute the app as one or

317
00:19:45,532 --> 00:19:49,334
more stateless processes, and then another one is basically which

318
00:19:49,372 --> 00:19:52,710
one? This is number nine, disposability too.

319
00:19:52,780 --> 00:19:55,942
It's basically, it says any kind of cloud native apps,

320
00:19:56,006 --> 00:20:00,150
it needs to be able to start up fast and have very stateful shutdown

321
00:20:00,230 --> 00:20:03,706
fast. Everything is fast, fast. So these two kind of cloud native, I think

322
00:20:03,728 --> 00:20:07,550
we already touched upon, but now let's kind of ask. The next question is,

323
00:20:07,620 --> 00:20:10,730
well, how do we preserve state across session,

324
00:20:10,810 --> 00:20:14,322
across transaction and network boundaries? Now in a cloud

325
00:20:14,376 --> 00:20:17,778
native environment, now we are really dealing with true

326
00:20:17,864 --> 00:20:21,282
distributed systems that can span across many

327
00:20:21,336 --> 00:20:24,530
different types of environment, machines, physical.

328
00:20:24,870 --> 00:20:28,226
It may not be across the ocean too, but it

329
00:20:28,248 --> 00:20:31,554
can be, right. It just basically gives it a lot more flexibility.

330
00:20:31,682 --> 00:20:34,854
And you can have data centers that are located all over the world.

331
00:20:34,972 --> 00:20:38,546
With an app, you can scale it anywhere. The notes can be startup,

332
00:20:38,578 --> 00:20:42,122
anywhere can be replicated. So how do we preserve state? Right? That's the

333
00:20:42,176 --> 00:20:46,010
kind of a million dollar question in here. Now let's talk about then

334
00:20:46,080 --> 00:20:49,482
some of the things is kind of like the techniques and mechanisms. It's what we

335
00:20:49,536 --> 00:20:53,210
already kind of talk about. We make use of cache, right? We can do

336
00:20:53,280 --> 00:20:56,846
caching. It's still kind of still very valid. And we'll have

337
00:20:56,868 --> 00:20:59,934
an example. The demo will show you that and how we do it with open

338
00:20:59,972 --> 00:21:03,886
Liberty. And then there are also like database style kind of transactions that

339
00:21:03,908 --> 00:21:07,602
rely on database. So as you can see, all of these things are really not

340
00:21:07,656 --> 00:21:11,570
intrinsic to the microservices itself. Or maybe the container itself.

341
00:21:11,640 --> 00:21:14,894
Right, the container. Well, what used to be right, even like EJB,

342
00:21:14,942 --> 00:21:18,438
is the EJB enterprise java beans like container and

343
00:21:18,444 --> 00:21:21,942
all that. But now it translates to cloud native, which is container. We're talking

344
00:21:21,996 --> 00:21:25,974
about infrastructure level, such as like kubernetes, very popular these

345
00:21:26,012 --> 00:21:29,238
days for container orchestration. So anyway,

346
00:21:29,324 --> 00:21:32,822
as you can see, all of these two, they are not intrinsic to the containers

347
00:21:32,886 --> 00:21:36,182
themselves, but these are like techniques, mechanism that we can utilize.

348
00:21:36,246 --> 00:21:39,482
Then there's also cookies, right? We still can make use of cookies too,

349
00:21:39,536 --> 00:21:43,274
and sessions and tokens and all these things that we talked about earlier.

350
00:21:43,402 --> 00:21:46,570
Again just now too, I touch upon cloud native infrastructure.

351
00:21:46,650 --> 00:21:50,046
So now with cloud native, why don't we then take advantage of the

352
00:21:50,068 --> 00:21:53,834
cloud native infrastructure? Infrastructure like kubernetes essentially

353
00:21:53,882 --> 00:21:57,298
too, there's concepts of stateful sets, right? And that's what it

354
00:21:57,304 --> 00:22:01,070
is. Like kubernetes on the container level, it actually maintains

355
00:22:01,150 --> 00:22:04,386
the different set of information. They keep their statefulness in

356
00:22:04,408 --> 00:22:07,794
that. And even like say with Openshift that comes from red hat,

357
00:22:07,842 --> 00:22:10,962
they also actually have a cloud native kind of concept of stateful.

358
00:22:11,026 --> 00:22:14,326
Cloud native DaC two, thats essentially is making use of

359
00:22:14,348 --> 00:22:17,398
the container level persistence too for you.

360
00:22:17,484 --> 00:22:20,774
So again, this is more infrastructural. And that there's also like persistent

361
00:22:20,822 --> 00:22:24,006
volume and also cookie affinity. So those are kind of examples

362
00:22:24,038 --> 00:22:27,558
of features within kubernetes that they can handle,

363
00:22:27,654 --> 00:22:31,066
help you to persist data across different does, things that

364
00:22:31,088 --> 00:22:34,606
are replicated. So then it takes the burden off of the application

365
00:22:34,708 --> 00:22:38,634
itself. Okay, so now get back into a bit more. The programming

366
00:22:38,682 --> 00:22:42,442
level. We're dealing with programming design pattern.

367
00:22:42,586 --> 00:22:46,298
A very prominent pattern these days to use to think of is

368
00:22:46,324 --> 00:22:50,046
the saga pattern, right? So saga is like any kind of saga.

369
00:22:50,078 --> 00:22:53,266
So it implies in a story we like to talk about

370
00:22:53,368 --> 00:22:56,626
saga or something. It's kind of like a long running story,

371
00:22:56,728 --> 00:23:00,406
right? Something that will last. You're not only like processing things in

372
00:23:00,428 --> 00:23:04,594
the spur of the moment, kind of stateless, you're dealing with a long running transaction.

373
00:23:04,642 --> 00:23:07,734
So these two, I kind of group them together. But I wanted to also point

374
00:23:07,772 --> 00:23:11,242
out too, there's also this thing called long running action, and this one

375
00:23:11,296 --> 00:23:15,094
is a form of also saga too. It's like a saga interaction

376
00:23:15,142 --> 00:23:18,214
pattern. I probably should be grouping them together, but I can't

377
00:23:18,262 --> 00:23:21,674
at the moment find a very clear distinction if they are

378
00:23:21,712 --> 00:23:24,974
two separate things, because they share a lot of similarities too.

379
00:23:25,012 --> 00:23:28,622
But I'm not able to find a documentation that would kind of address both

380
00:23:28,676 --> 00:23:31,918
all at once. So I kind of am being careful, at least

381
00:23:32,004 --> 00:23:35,086
in terms of the names of these patterns. I kind of split them up

382
00:23:35,108 --> 00:23:38,898
into two, but they could easily be kind of combined together. They share a

383
00:23:38,904 --> 00:23:42,478
lot of, kind of like the similarities. Right. In terms of their concepts.

384
00:23:42,574 --> 00:23:45,950
So let's get into it. Saga is really like we're helping

385
00:23:46,030 --> 00:23:49,566
transactions to span across multiple services. That's the

386
00:23:49,608 --> 00:23:53,010
goal. But we don't want to go back to the told ways of database

387
00:23:53,090 --> 00:23:56,454
two phase commit. Some of you, maybe if you have worked

388
00:23:56,492 --> 00:24:00,230
with that before, right. It used to be with transactions. We have two pc,

389
00:24:00,310 --> 00:24:04,006
two phase commit. So that kind of make use of multiple

390
00:24:04,038 --> 00:24:08,582
databases or say two different databases, you have different transaction coordinator

391
00:24:08,646 --> 00:24:11,882
that pass kind of information. Are you done? Are you done? I mean, good.

392
00:24:11,936 --> 00:24:15,262
Then you commit. It's a lot of communication going in between.

393
00:24:15,316 --> 00:24:18,462
So you can see too, it's probably a lot of messaging. So it's not really

394
00:24:18,516 --> 00:24:22,366
suggested. Instead using a saga pattern is thats

395
00:24:22,548 --> 00:24:25,998
kind of being advocated in a microservices environment.

396
00:24:26,094 --> 00:24:29,662
And of course to one of the most respected microservices

397
00:24:29,726 --> 00:24:33,202
expert, Chris Richardson, who I actually interviewed too,

398
00:24:33,256 --> 00:24:36,674
on one of our IBM video. If you want to look thats up too,

399
00:24:36,712 --> 00:24:40,534
we talk a bit too about microservices. It's all these concepts around. It is

400
00:24:40,572 --> 00:24:44,118
truly amazing. So back to saga, right? So others are two

401
00:24:44,204 --> 00:24:48,722
ways of doing their coordination sagas. One is like choreography

402
00:24:48,786 --> 00:24:52,294
and the other is orchestration. So without going into too deep,

403
00:24:52,342 --> 00:24:55,414
because this talk is more like scratching the surface,

404
00:24:55,462 --> 00:24:59,594
we're exploring this aspect, but I wanted to point but so if you have

405
00:24:59,632 --> 00:25:03,230
not gotten into it, you may want to also start doing some research on it.

406
00:25:03,300 --> 00:25:06,366
One type is called choreography sagas. So as you

407
00:25:06,388 --> 00:25:09,934
can imagine too, then what it is, is that it leverage on

408
00:25:09,972 --> 00:25:13,402
an event driven kind of way of notifying.

409
00:25:13,466 --> 00:25:17,262
Right. If we're talking about sagas in here. It's like there are different components.

410
00:25:17,326 --> 00:25:21,154
Say, for example, ecommerce. I think it's a very good example of an

411
00:25:21,192 --> 00:25:24,622
ecommerce shopping cart example, right? So a shopping cart,

412
00:25:24,686 --> 00:25:29,010
you have somebody that, it's like a dance ballet, right? Somebody choreograph

413
00:25:29,090 --> 00:25:32,786
all the music and all thats. So you make sure all the flow is smooth

414
00:25:32,898 --> 00:25:36,454
between the different scenes. So likewise, you can have

415
00:25:36,492 --> 00:25:40,322
ecommerce systems. You have order kind of order management

416
00:25:40,386 --> 00:25:43,834
part. Then you have the payment part, right. And then you have like

417
00:25:43,872 --> 00:25:47,574
shipment, for example. Well, these are kind of broad categories of an ecommerce

418
00:25:47,622 --> 00:25:50,986
system. So you have somebody who is there who is kind of like,

419
00:25:51,088 --> 00:25:53,790
sort of think of it more like a coordinator.

420
00:25:54,770 --> 00:25:58,318
Well, actually, I should say that one, you don't need a coordinator for

421
00:25:58,324 --> 00:26:01,802
the choreographer, but you have a built in way of triggering.

422
00:26:01,866 --> 00:26:05,870
If some order, the steps in your ordering gets done.

423
00:26:05,940 --> 00:26:09,886
Let's say somebody place an order, then, you know, it triggers. It's event driven.

424
00:26:09,918 --> 00:26:14,002
So an event will kind of be sent out to the payment part, let's say.

425
00:26:14,056 --> 00:26:18,174
Now, I'm just kind of like broadly kind of using this example, but in reality,

426
00:26:18,222 --> 00:26:21,718
it could be more complicated, too. But let's say a customer place an order on

427
00:26:21,724 --> 00:26:25,046
the web, then you immediately, too. Then it triggers an event that

428
00:26:25,068 --> 00:26:28,278
would tell that, well, order placed. So order place will then

429
00:26:28,364 --> 00:26:31,554
is an event that would actually notify, right.

430
00:26:31,612 --> 00:26:35,334
Essentially, whoever is listening to it, let's say, is the payment kind of receiver

431
00:26:35,382 --> 00:26:38,614
of it. So I received this order entry is placed.

432
00:26:38,662 --> 00:26:42,074
So now here I am. I'm going to then check the payment part.

433
00:26:42,112 --> 00:26:45,806
But of course, too, before you actually do the payment, you do need to check

434
00:26:45,908 --> 00:26:49,006
the payment method. Right. What type of method it is? Let's say

435
00:26:49,028 --> 00:26:52,350
if it's credit card, then you do need to make sure that the credit card

436
00:26:52,420 --> 00:26:55,438
information is being given correctly by the customer,

437
00:26:55,524 --> 00:26:58,706
things like that. So all these small steps, too, as you can see, it kind

438
00:26:58,728 --> 00:27:02,354
of coordinated well, in that sense, being choreographed, but through the use

439
00:27:02,392 --> 00:27:06,414
of event driven way of doing things. And then there's another kind of sagas,

440
00:27:06,462 --> 00:27:10,054
which is orchestration. So orchestration then over there, then you do

441
00:27:10,092 --> 00:27:13,586
need sort of like a middleman, kind of a coordinator to coordinate.

442
00:27:13,618 --> 00:27:16,726
So it's sort of like, okay, well, you need something done. Then it's sort of

443
00:27:16,748 --> 00:27:20,666
a broker that tells all these components what's going on. These are kind

444
00:27:20,688 --> 00:27:24,300
of like the two primary ways of how sagas deal with

445
00:27:24,910 --> 00:27:27,946
coordinating the different pieces of your system that

446
00:27:27,968 --> 00:27:31,660
are composed of different microservices. To do things at the right time,

447
00:27:32,430 --> 00:27:35,994
essentially. So now then move on a bit to long running action.

448
00:27:36,042 --> 00:27:39,994
I'd like to point that out too, is because now IBM working with open Liberty,

449
00:27:40,042 --> 00:27:43,882
now open Liberty has a very good integration and supports

450
00:27:43,946 --> 00:27:47,758
microprofile. It leverages on a lot of the microprofile, which is an eclipse

451
00:27:47,774 --> 00:27:51,934
foundation open source project. And as you know, it's really good for building microservices.

452
00:27:52,062 --> 00:27:55,106
Microprofile also has LRA, if you've heard of that.

453
00:27:55,128 --> 00:27:58,774
It's long running action, and it's essentially leveraged on

454
00:27:58,812 --> 00:28:02,626
a compensator model. So now when it gets into compensator,

455
00:28:02,738 --> 00:28:05,750
that's what saga essentially does, too. So you may wonder,

456
00:28:05,820 --> 00:28:09,254
right, we don't live everyday sunny days. Some days are rainy days.

457
00:28:09,292 --> 00:28:12,758
In fact, sometimes we get more rainy days than sunny days, which means if there's

458
00:28:12,774 --> 00:28:15,914
a failure, then what do we do, right? We don't roll back. There's no such

459
00:28:15,952 --> 00:28:19,274
concept of rollback like a traditional database. This would be what

460
00:28:19,312 --> 00:28:22,734
it uses is a compensator. It's essentially kind of look

461
00:28:22,772 --> 00:28:27,082
at what didn't go right and basically then go back to reconstructing

462
00:28:27,146 --> 00:28:31,114
the state of where your data was before this failure

463
00:28:31,162 --> 00:28:34,478
of this thing. So in some ways, it's not really rollback. Right. You just kind

464
00:28:34,484 --> 00:28:37,634
of go back in time and kind of sort of reinstate that

465
00:28:37,672 --> 00:28:41,310
particular state like that. So that's kind of like a compensator

466
00:28:41,390 --> 00:28:44,910
model in a very high level sense. Of course, there's a lot more details

467
00:28:44,990 --> 00:28:48,414
that's kind of involved with this LRA. An example library

468
00:28:48,462 --> 00:28:51,650
implementing LRA, again, is microprofile LRA.

469
00:28:51,730 --> 00:28:54,726
So I have links to towards the end that if you want to look into

470
00:28:54,748 --> 00:28:57,974
that, you're welcome to. And it's a relatively new feature that

471
00:28:58,012 --> 00:29:01,462
just got released not too long ago. So even like for us too, we are

472
00:29:01,516 --> 00:29:04,794
also trying to come up with examples and to show how we can make

473
00:29:04,832 --> 00:29:08,490
use of it. But there's also a nice blog article that I suggest you to

474
00:29:08,560 --> 00:29:12,346
also read that if you're interested. Okay, now then, it is a bit of a

475
00:29:12,368 --> 00:29:16,874
demo time, and as such, too. All right. These examples are not like production

476
00:29:17,002 --> 00:29:20,542
level yet. All of these are new and running

477
00:29:20,596 --> 00:29:24,046
in a cloud native way. So I have to also say that they may be

478
00:29:24,068 --> 00:29:28,034
a bit not as kind of detailed as you would just take it

479
00:29:28,072 --> 00:29:31,506
and go and run and build upon, but certainly there are concepts thats

480
00:29:31,528 --> 00:29:35,246
we want to illustrate there that you can certainly take and then plug

481
00:29:35,278 --> 00:29:38,982
it into your particular application. The first one is a stateful open

482
00:29:39,036 --> 00:29:42,422
liberty application in Kubernetes. So if you want to follow

483
00:29:42,476 --> 00:29:45,938
along, you're welcome to go to this GitHub repository

484
00:29:46,034 --> 00:29:49,254
and you're welcome to take a look. Well actually you know what, I think I

485
00:29:49,292 --> 00:29:52,874
pressed the wrong thing, I'm sorry. I should kind of tell you to go here

486
00:29:52,912 --> 00:29:56,646
first because I wanted to actually first get into persistence

487
00:29:56,758 --> 00:30:00,790
session. Persistence I wanted to show you first and using JCash

488
00:30:00,870 --> 00:30:04,622
and hazelcast. So this is actually an example that

489
00:30:04,676 --> 00:30:08,078
taken from the open Liberty guide and I also have a

490
00:30:08,084 --> 00:30:11,374
link to now as such, open Liberty is all open source and we

491
00:30:11,412 --> 00:30:14,494
have a very nice team that know just joining a team,

492
00:30:14,532 --> 00:30:17,954
I'm so impressed. We actually have a group of folks, and not many of them,

493
00:30:17,992 --> 00:30:21,522
just a few and some students too helping us out building the guide. So please

494
00:30:21,576 --> 00:30:25,186
if you want to follow thats along and let me then also get to

495
00:30:25,208 --> 00:30:29,046
my now we probably don't have as much time for

496
00:30:29,068 --> 00:30:32,774
me to actually do very deep dive, but like I said, the code

497
00:30:32,812 --> 00:30:36,806
is here so you're welcome to take it and examine. So this

498
00:30:36,828 --> 00:30:40,278
is the GitHub. So just go to Mary G Lab

499
00:30:40,364 --> 00:30:44,022
and that's actually a repository that I use for my weekly Twitch

500
00:30:44,086 --> 00:30:47,322
session where I do a lot of demo code. Anyway, so I have

501
00:30:47,376 --> 00:30:51,462
actually forked this over here in this guide session.

502
00:30:51,606 --> 00:30:54,666
So if you want to take a look, go there.

503
00:30:54,768 --> 00:30:57,678
But like I said, I just wanted to kind of quickly step through and kind

504
00:30:57,684 --> 00:31:01,534
of show it to you. It's actually this guide right is pretty

505
00:31:01,572 --> 00:31:05,342
good too. What I should show you is here, I also provide

506
00:31:05,396 --> 00:31:08,914
you with a link too in my slides. It will be available to you

507
00:31:08,952 --> 00:31:12,494
from the conference too, so you can look that up. And the eclipse microprofile

508
00:31:12,542 --> 00:31:15,826
lra, this is the draft. And as you can see this is kind of a

509
00:31:15,848 --> 00:31:19,438
newer, just about a year old, this draft. So we have teams that are

510
00:31:19,464 --> 00:31:22,118
working on it, so you're welcome to take a look into it. But in the

511
00:31:22,124 --> 00:31:24,694
meantime let me kind of search for my.

512
00:31:24,812 --> 00:31:28,482
Okay, I'm so sorry. Here we go. Okay, so sagas

513
00:31:28,546 --> 00:31:32,102
too. I also give you a link to as you know, microservices IO.

514
00:31:32,166 --> 00:31:36,026
Chris Richardson is the authority on this topic. Right. And then

515
00:31:36,048 --> 00:31:39,510
saga if you want to read up more on that. Okay, this is the stateful

516
00:31:39,590 --> 00:31:43,914
cube demo, so that's the next one that we will have. It's kind of extend

517
00:31:43,962 --> 00:31:47,246
upon the first demo. So let me kind of go

518
00:31:47,268 --> 00:31:50,654
over here. Okay, if you go to my thing and

519
00:31:50,692 --> 00:31:54,014
I have a java. So this is my

520
00:31:54,052 --> 00:31:58,066
Mary G. Lab and then if you go to guide sessions, and by

521
00:31:58,088 --> 00:32:00,994
the way, if you want to join my project, by all means let me know

522
00:32:01,032 --> 00:32:04,354
too or come and join my twitch streams on

523
00:32:04,392 --> 00:32:08,246
Wednesday. I will be talking about that. So over here too,

524
00:32:08,428 --> 00:32:12,450
thats is the guide session, but like I said, I probably won't

525
00:32:12,610 --> 00:32:16,518
actually step through all of it today, but you are welcome

526
00:32:16,604 --> 00:32:19,946
to take a look into it. But it will explain to what

527
00:32:19,968 --> 00:32:23,322
is a session. So essentially the state that we're working

528
00:32:23,376 --> 00:32:27,046
with right here is making use of the jcache.

529
00:32:27,078 --> 00:32:30,382
As you know JCash is a Java spec,

530
00:32:30,436 --> 00:32:33,482
right? Based on the Java spec for Java caching.

531
00:32:33,546 --> 00:32:37,610
So it's essentially two we're illustrating open Liberty

532
00:32:37,690 --> 00:32:41,402
supporting HTTP session data and then using JCash.

533
00:32:41,466 --> 00:32:44,994
And also we're leveraging on Hazelcast in this case too.

534
00:32:45,032 --> 00:32:48,290
So you're welcome to kind of take a look and you're welcome

535
00:32:48,360 --> 00:32:52,866
to either, you can over here you

536
00:32:52,888 --> 00:32:57,470
know what I'll do. So open Liberty IO

537
00:32:57,630 --> 00:33:01,046
guides is where you can find a list of all the guides. Now if you

538
00:33:01,068 --> 00:33:04,610
go to the persistence here, and this is where I've cloned from, is this cache

539
00:33:05,110 --> 00:33:09,026
in httpsion data using jcash and hazelcast.

540
00:33:09,138 --> 00:33:12,554
This actually is very good. If you want to follow along you can clone it

541
00:33:12,592 --> 00:33:16,490
into your GitHub and work with it, or you can follow

542
00:33:16,560 --> 00:33:20,474
along and use the guide because I think the guide is kind of nice too.

543
00:33:20,592 --> 00:33:24,042
What you will notice is that with our guide here we have a version

544
00:33:24,106 --> 00:33:27,402
that actually when you clone it, you notice two directories.

545
00:33:27,466 --> 00:33:31,114
One is a start directory and one is a finish. Finish essentially

546
00:33:31,242 --> 00:33:34,846
contains the finished product. The solution for

547
00:33:34,868 --> 00:33:38,226
thats exercise. But if you want to try it out yourself please

548
00:33:38,328 --> 00:33:41,810
we encourage everybody to try out at your own pace, at your own time,

549
00:33:41,880 --> 00:33:45,474
right? So it's actually quite nice too. So we encourage you

550
00:33:45,512 --> 00:33:48,886
to also use this and so we'll explain to you.

551
00:33:48,988 --> 00:33:52,614
Session what is session persistence? But I just wanted to take the time

552
00:33:52,652 --> 00:33:56,866
to kind of explain a bit too is thats these are like how distributed

553
00:33:56,898 --> 00:34:00,298
cache is being handled in here. How do you use

554
00:34:00,384 --> 00:34:04,102
open Liberty's session cache to persist HTTP sessions?

555
00:34:04,166 --> 00:34:07,206
Right. And then it's basically leveraging on JCash,

556
00:34:07,318 --> 00:34:10,426
the standard caching API for java. So this would be,

557
00:34:10,448 --> 00:34:14,142
I think it's a good way for you to start and then after you set

558
00:34:14,196 --> 00:34:17,326
this up then essentially too then you can deploy the

559
00:34:17,348 --> 00:34:20,606
application to a local Kubernetes cluster. You can kind of set up

560
00:34:20,628 --> 00:34:23,534
your kubernetes. If you have one on the cloud too, you can do that.

561
00:34:23,572 --> 00:34:26,870
But the example here makes use of a local Kubernetes cluster

562
00:34:26,970 --> 00:34:30,002
and you can kind of leverage on your docker desktop too.

563
00:34:30,056 --> 00:34:33,714
And it will explain all the steps of how you actually over here.

564
00:34:33,752 --> 00:34:37,106
First of all you will need Docker and if you kind of take

565
00:34:37,128 --> 00:34:40,246
a look in this whole list of all the steps too,

566
00:34:40,348 --> 00:34:43,894
it helps you create the application. It's also not too

567
00:34:43,932 --> 00:34:47,382
complicated because we want to illustrate the whole process from end to end.

568
00:34:47,436 --> 00:34:50,822
So then how do you run it? And in open

569
00:34:50,876 --> 00:34:54,458
Liberty too. Now there are other exercises you can also follow along in the

570
00:34:54,464 --> 00:34:57,786
guides to get used to. How do you create a restful application, how do you

571
00:34:57,808 --> 00:35:01,830
consume it and how do you actually invoke it? We use maven

572
00:35:01,990 --> 00:35:05,854
these examples and you can just run liberty Dev

573
00:35:05,892 --> 00:35:09,134
and I wanted to point out to dev is a very nice feature because it

574
00:35:09,172 --> 00:35:13,470
essentially allows you to do hot deploy. If you have any configuration changes,

575
00:35:13,620 --> 00:35:17,390
you don't need to actually shut down your server, you can just simply

576
00:35:17,470 --> 00:35:21,198
continue your merry way. You make a changes to your containerization,

577
00:35:21,294 --> 00:35:24,866
it will read know hot deploy and life will be good

578
00:35:24,968 --> 00:35:28,118
after a couple of seconds, right, or something. So that's that. You can kind

579
00:35:28,124 --> 00:35:32,502
of take a look too over here too, right? We have a standard cart application.

580
00:35:32,636 --> 00:35:36,482
Again, it's a simple case, right? And the server XML

581
00:35:36,546 --> 00:35:40,406
will list out all of the specific server information,

582
00:35:40,588 --> 00:35:44,026
your connection to the hazelcast library. It will

583
00:35:44,048 --> 00:35:47,494
download it for you if you haven't already got it. Actually it will download

584
00:35:47,542 --> 00:35:51,306
for you every time you try to do a maven running it, right? All of

585
00:35:51,328 --> 00:35:55,002
these things are all here and it's all set up for you to look at.

586
00:35:55,136 --> 00:35:58,526
It's not like way too much so then it's easily digestible for

587
00:35:58,548 --> 00:36:01,454
you, especially if you're the first time doing it. And then you can then run

588
00:36:01,492 --> 00:36:04,862
it and then it will show you the list of endpoints. And since I already

589
00:36:04,916 --> 00:36:08,194
have it too, I can kind of quickly run it to show you. But over

590
00:36:08,232 --> 00:36:11,906
here too, we also provide you with a hazelcast, the configuration to set

591
00:36:11,928 --> 00:36:15,714
up the default like card clustered in here and

592
00:36:15,752 --> 00:36:18,966
then over here too. Maybe we won't get into all the details, but you

593
00:36:18,988 --> 00:36:22,342
are. Please take your time to try this out.

594
00:36:22,476 --> 00:36:26,502
We'll give you example of doing docker pool. You do need to pull

595
00:36:26,556 --> 00:36:30,134
your open liberty into your local docker, right? And then

596
00:36:30,172 --> 00:36:34,102
after that then you do a build essentially like set up your images,

597
00:36:34,166 --> 00:36:37,194
right? And then you can then take a look. Then after you set them up,

598
00:36:37,232 --> 00:36:41,162
cart app and open Liberty, then you can run. Now our talk isn't about

599
00:36:41,216 --> 00:36:44,894
the mechanics of how do you run it. So I won't step

600
00:36:45,012 --> 00:36:48,078
otherwise this session will go for way too long for you.

601
00:36:48,164 --> 00:36:52,094
All of these are pretty standard kubernetes. You can use Kubecontrol to

602
00:36:52,132 --> 00:36:55,662
apply your Kubernetes. Yaml. The Yaml file is set up for you already.

603
00:36:55,796 --> 00:36:59,166
It is pointing to the cart deployment and also deployment

604
00:36:59,198 --> 00:37:02,514
part and also what service it is and all that stuff. So you can follow

605
00:37:02,552 --> 00:37:06,222
this. It's pretty good. Now one caveat is that if you have multiple

606
00:37:06,286 --> 00:37:09,718
kubernetes and you're using your control, as you may know,

607
00:37:09,804 --> 00:37:13,734
then you want to make sure that your Kubecontrol containerization is

608
00:37:13,772 --> 00:37:17,330
pointing to the correct. Let's say if you're running Docker desktop

609
00:37:17,410 --> 00:37:20,806
then you want to make sure thats it is configured for that. Otherwise too.

610
00:37:20,828 --> 00:37:23,562
If you try to just run it then it will say you can't run.

611
00:37:23,616 --> 00:37:27,034
But like I said, there are some small steps like this kind of have some

612
00:37:27,072 --> 00:37:30,538
assumptions that you need to be aware of. But let's get back to a

613
00:37:30,544 --> 00:37:34,846
little more. We wanted to take a look into the cart application. The cart application

614
00:37:34,948 --> 00:37:38,654
too essentially too, right. Just a typical simplest case

615
00:37:38,692 --> 00:37:41,966
of doing a shopping cart. You have cart application extends the application.

616
00:37:42,068 --> 00:37:45,762
We make use of the annotation application path and

617
00:37:45,816 --> 00:37:49,022
basically too. Let me see and prepare.

618
00:37:49,086 --> 00:37:52,274
Wait, where is it creating the application, I think. Okay,

619
00:37:52,312 --> 00:37:56,574
here we go. And cart application. We also then told make use of resource,

620
00:37:56,622 --> 00:38:00,738
right. The hypermedia kind of resource, restful endpoints

621
00:38:00,754 --> 00:38:04,134
in here. So over here too, as you can see we have implementing add

622
00:38:04,172 --> 00:38:08,150
to cart. You can take a look at all these takes the parameters

623
00:38:09,130 --> 00:38:12,538
item is a string. So essentially to the path that you can see

624
00:38:12,624 --> 00:38:16,586
we'll have a cart and then the item and separated by

625
00:38:16,608 --> 00:38:20,874
an ampersand and a price. And that's what will tell this is the

626
00:38:20,912 --> 00:38:24,634
command to add terms to the cart is thats it is.

627
00:38:24,832 --> 00:38:27,966
So then all of these you add to cart and then you

628
00:38:27,988 --> 00:38:31,406
can then get cart to see what's in the cart too. So that's what it

629
00:38:31,428 --> 00:38:34,930
is. So okay, how about this? We do a quick run of this, right?

630
00:38:35,000 --> 00:38:38,418
And then we can kind of take a

631
00:38:38,424 --> 00:38:41,860
look and let's go back to here. So I have imported this

632
00:38:42,230 --> 00:38:45,300
example into my ide, right?

633
00:38:46,230 --> 00:38:50,022
In this case I'm using intellij. You can actually do a build.

634
00:38:50,156 --> 00:38:54,022
Like I said, I've already set things up so you should be able to without

635
00:38:54,156 --> 00:38:57,526
changing anything in the finished directory. You should be able to then run

636
00:38:57,548 --> 00:39:01,046
it from there too without changing. But of course if you want to set up

637
00:39:01,068 --> 00:39:04,634
different jdks and runtime. You can still kind of tweak your

638
00:39:04,672 --> 00:39:07,930
particular environment, but if you don't, it should run too. Okay, so that's that.

639
00:39:08,000 --> 00:39:11,598
And I think, okay, let's do this one thing. If we follow the example

640
00:39:11,684 --> 00:39:14,960
over there, right, and over here.

641
00:39:16,050 --> 00:39:19,770
Okay. And oops. It's essentially

642
00:39:19,850 --> 00:39:23,422
two. If you see running the application is where we should run.

643
00:39:23,476 --> 00:39:27,986
So that's all we need to do is MVN liberty Dev.

644
00:39:28,088 --> 00:39:31,506
Okay, so now IBM already here, right. And I

645
00:39:31,528 --> 00:39:34,020
want to also do this one thing, in my case,

646
00:39:34,550 --> 00:39:38,182
Java. IBM using, by the way, openj nine

647
00:39:38,236 --> 00:39:42,242
runtime for the JVM and 15 adopt OpenJDK

648
00:39:42,306 --> 00:39:45,014
15. And you can of course download 16 at this point.

649
00:39:45,052 --> 00:39:47,240
Now time of this, right.

650
00:39:50,430 --> 00:39:54,506
And I set up my path correctly. I'm also on

651
00:39:54,528 --> 00:39:57,786
the root directory of the guide sessions. Then you

652
00:39:57,808 --> 00:40:01,130
should be able to say MVN liberty.

653
00:40:02,590 --> 00:40:06,286
Oops, liberty Dev. So this would do

654
00:40:06,308 --> 00:40:10,190
the hot deploy one now? I did actually

655
00:40:10,260 --> 00:40:13,554
when I was testing it, I did run into some issues. So if you run

656
00:40:13,592 --> 00:40:17,038
into issues, you don't need to. Yeah, see that's

657
00:40:17,054 --> 00:40:20,386
what is happening. I think there is some interesting thing,

658
00:40:20,568 --> 00:40:24,434
but don't take this as a problem because

659
00:40:24,552 --> 00:40:27,922
it could be my environment. So if you say liberty run,

660
00:40:28,056 --> 00:40:31,334
that should also run too. Now once it run,

661
00:40:31,372 --> 00:40:34,038
I just wanted to show up to the point in which you can bring up

662
00:40:34,124 --> 00:40:36,998
the, oh, I'm so sorry, what is going on?

663
00:40:37,164 --> 00:40:38,680
Okay, well,

664
00:40:41,930 --> 00:40:45,430
see, there are always something, right? That's kind of like surprising.

665
00:40:45,510 --> 00:40:48,826
Now scanning for. Okay, you know what

666
00:40:48,848 --> 00:40:52,974
we'll do if you run into problems like that? What I've done is

667
00:40:53,012 --> 00:40:56,862
thats I bring up my shell and

668
00:40:56,916 --> 00:41:00,126
run things from my Shell anytime choose things don't work.

669
00:41:00,228 --> 00:41:04,110
Bring up your command line. So that should always

670
00:41:04,180 --> 00:41:08,274
work. Okay, so here we go. As you can see, I've already

671
00:41:08,472 --> 00:41:11,698
done some testing, right. That's actually late at night when I

672
00:41:11,704 --> 00:41:15,058
was doing it. Okay, let's do that.

673
00:41:15,144 --> 00:41:18,518
Oh, you know why? Because I wasn't in the correct directory. I should be in

674
00:41:18,524 --> 00:41:21,960
the finished directory. Okay, let me clear it.

675
00:41:23,050 --> 00:41:26,694
I'm in the finished directory and that's where the project is. So I

676
00:41:26,732 --> 00:41:30,346
can actually do liberty. Okay, let me kind

677
00:41:30,368 --> 00:41:33,802
of make sure too we have path set

678
00:41:33,856 --> 00:41:36,922
correctly. Yes. And then it's good

679
00:41:36,976 --> 00:41:40,010
because it's showing my adopt openj nine is 15.

680
00:41:40,160 --> 00:41:44,086
Okay, so now let's

681
00:41:44,118 --> 00:41:48,186
do that. Okay, so like I said, sometimes if ide doesn't

682
00:41:48,218 --> 00:41:51,120
work, go to command line. It's supposed to work.

683
00:41:55,490 --> 00:41:58,786
Okay, so now this is going to take a bit of time, but I want

684
00:41:58,808 --> 00:42:02,578
to show you up to the point in which the

685
00:42:02,664 --> 00:42:06,514
app startup, and then you'll be able to actually input your

686
00:42:06,552 --> 00:42:10,054
cart data into that. I think it should be fun to

687
00:42:10,092 --> 00:42:13,160
at least show this part for today's talk. Right.

688
00:42:13,610 --> 00:42:17,206
Okay, let's see. Now if this is up, then you should also see

689
00:42:17,228 --> 00:42:20,522
a message for open Liberty. It says you're ready to build a better

690
00:42:20,576 --> 00:42:24,294
planet. Something like that. So it's pretty cool. So let's

691
00:42:24,342 --> 00:42:28,140
kind of take a look. Something else

692
00:42:28,750 --> 00:42:32,800
all illegal reflective access operation something.

693
00:42:33,650 --> 00:42:37,582
Okay, well, over here actually I'm good. So the

694
00:42:37,636 --> 00:42:41,486
default server, as you can see, the default server is

695
00:42:41,508 --> 00:42:44,642
ready to run a smarter planet. You know, then my server is up.

696
00:42:44,696 --> 00:42:48,814
Okay, so in order to run it, you just run localhost 90 80

697
00:42:48,942 --> 00:42:52,354
Openapiui. Okay,

698
00:42:52,472 --> 00:42:56,402
Tada. So now you have the application. Now this I think

699
00:42:56,456 --> 00:42:59,798
is pretty cool. Then you can then play around with it. And like I

700
00:42:59,804 --> 00:43:03,250
said, the application isn't very complicated.

701
00:43:03,330 --> 00:43:06,898
That would take you too long to kind of get used to. I think it's

702
00:43:06,914 --> 00:43:10,214
a good way for you to kind of get your feet wet into this.

703
00:43:10,252 --> 00:43:13,658
And then you can build really serious applications after that.

704
00:43:13,824 --> 00:43:16,540
Okay, so let's take a look. Right. We can do a post.

705
00:43:17,150 --> 00:43:20,314
This one essentially will add a new item to cart, right?

706
00:43:20,352 --> 00:43:24,714
So let's do that. And wait,

707
00:43:24,832 --> 00:43:28,446
try it out. So you press try it out and

708
00:43:28,468 --> 00:43:32,240
then over here you add the item. Let's say we want,

709
00:43:33,890 --> 00:43:37,682
what should we get? Let's get bananas. I don't know why

710
00:43:37,736 --> 00:43:40,498
because I think I just had a banana right before this. So I think of

711
00:43:40,504 --> 00:43:43,538
bananas, but let's say bananas. And the price, let's say.

712
00:43:43,704 --> 00:43:47,400
Okay, $2 takes a number.

713
00:43:49,690 --> 00:43:51,590
So after this execute.

714
00:43:53,290 --> 00:43:56,306
Okay, so it said it successfully added

715
00:43:56,338 --> 00:43:59,654
to cart. Okay, now that's what it says, right?

716
00:43:59,692 --> 00:44:02,986
And you see the response header does come back and it

717
00:44:03,008 --> 00:44:06,506
also says bananas added. Your cart cost $2. And now let's do

718
00:44:06,528 --> 00:44:09,834
a get. So get doesn't take any parameters. We just

719
00:44:09,872 --> 00:44:14,618
say try it out and it should then execute.

720
00:44:14,794 --> 00:44:18,586
Yay. I think we're good, right? Are we? Yes, we're good. So response

721
00:44:18,618 --> 00:44:22,350
body will now show that we have our cart data.

722
00:44:22,420 --> 00:44:26,498
We have bananas. And then the separator that says $2.

723
00:44:26,584 --> 00:44:30,258
So subtotal is two. So that is correct. So please take a

724
00:44:30,264 --> 00:44:33,826
look and then let me know what you think of

725
00:44:33,848 --> 00:44:37,986
it. Right. Okay, I think I've been talking a

726
00:44:38,008 --> 00:44:41,494
long time, but like I said, let me get back to my slides at this

727
00:44:41,532 --> 00:44:44,166
point. And it's over here.

728
00:44:44,268 --> 00:44:47,734
Now that's what we play with just now is the open

729
00:44:47,772 --> 00:44:51,394
Liberty session persistence using JCash. But let's

730
00:44:51,442 --> 00:44:54,940
also then now look into just give you the.

731
00:44:55,790 --> 00:44:59,514
Somehow I think I lost track of this. Okay, here we go. Demo and

732
00:44:59,552 --> 00:45:03,038
this is the stateful kube demo that it's going to say.

733
00:45:03,124 --> 00:45:07,230
It's basically open liberty application and this one will actually

734
00:45:07,380 --> 00:45:10,954
be making use of Nginx and the hazelcast

735
00:45:11,002 --> 00:45:14,542
and build upon that and we'll illustrate to you

736
00:45:14,596 --> 00:45:17,950
to running this in a true Kubernetes environment.

737
00:45:18,030 --> 00:45:21,330
So this one, I think we do not have time to go over it today,

738
00:45:21,400 --> 00:45:24,626
but I encourage all of you to visit that and you

739
00:45:24,648 --> 00:45:28,162
should be able to follow the examples too. It has all the readmes in there.

740
00:45:28,216 --> 00:45:31,174
You should be able to handle that. Yeah it is good.

741
00:45:31,292 --> 00:45:34,610
But feel free to contact me, follow me on my discord

742
00:45:34,690 --> 00:45:37,974
and talk to me about what you think of it too. Okay, so here

743
00:45:38,012 --> 00:45:41,786
we are. I think I've already talked enough time, so let

744
00:45:41,808 --> 00:45:45,094
me give you some list of resources

745
00:45:45,142 --> 00:45:48,102
and links. And like I said, this is only the tip of the iceberg.

746
00:45:48,166 --> 00:45:52,266
Please do look for me for any future talk. I do intend to

747
00:45:52,288 --> 00:45:56,046
do more talks in this area now. Now I'm all excited wanting to

748
00:45:56,068 --> 00:45:59,454
get more into say the saga patterns, things like that. If you're interested,

749
00:45:59,572 --> 00:46:02,702
I'd love to have more conversations with that. Okay, here we go.

750
00:46:02,756 --> 00:46:06,282
Resources so these are a bunch of code examples,

751
00:46:06,346 --> 00:46:09,310
design patterns and open source libraries that I've touched upon.

752
00:46:09,390 --> 00:46:12,910
So these two are the GitHub link to the two examples,

753
00:46:12,990 --> 00:46:15,762
one of which we worked on, the other I just pointed out to you,

754
00:46:15,816 --> 00:46:19,266
please take a look. It's actually developed by our offering

755
00:46:19,298 --> 00:46:22,966
manager Graham charters. And so he was like gladly sharing with me.

756
00:46:22,988 --> 00:46:27,030
I said okay, let me share with the audience about thats open Liberty application

757
00:46:27,100 --> 00:46:30,822
in Kubernetes. And so now there is also saga design pattern.

758
00:46:30,886 --> 00:46:33,850
Please take a look. That's from Chris Richardson's website,

759
00:46:33,920 --> 00:46:36,854
microservices IO and microprofile LRA.

760
00:46:36,982 --> 00:46:40,326
So please visit that. And also a nice, very nice blog written

761
00:46:40,358 --> 00:46:43,774
by one of our engineers, Jason. He wrote that very

762
00:46:43,812 --> 00:46:47,038
nice blog too that was published back in January. And these are links to

763
00:46:47,044 --> 00:46:50,494
our open Liberty project microprofile and also

764
00:46:50,532 --> 00:46:54,334
Jakarta ee. Then the next thing is a bunch of all the links to,

765
00:46:54,372 --> 00:46:58,034
to developer ibm.com. We have a lot of resources for not

766
00:46:58,072 --> 00:47:01,454
just microservices but for other things like the cloud DevOps,

767
00:47:01,502 --> 00:47:04,594
cloud native, you name it. We got everything that you need and

768
00:47:04,712 --> 00:47:08,550
programming with Java on IBM Cloud too has got some nice materials there.

769
00:47:08,620 --> 00:47:11,922
Okay then outside of us we have the CNCF cloud native

770
00:47:11,986 --> 00:47:15,254
Computing foundation, the twelve vector app and so

771
00:47:15,292 --> 00:47:18,726
please take a look. And then if you want to get hands on experience with

772
00:47:18,748 --> 00:47:22,042
a public cloud, we have our IBM cloud sign up and this

773
00:47:22,096 --> 00:47:25,354
we have like about 40 free things that you can use in there.

774
00:47:25,392 --> 00:47:29,098
There's no time limit to the free things that you can trial and

775
00:47:29,184 --> 00:47:33,014
no credit card is required. We won't go after you, we won't terminate

776
00:47:33,062 --> 00:47:36,554
your account even if you, there's actually no time limit for the free tier.

777
00:47:36,602 --> 00:47:39,006
But of course then there are things that you do need to pay for if

778
00:47:39,028 --> 00:47:41,966
you want to get more serious too. But we can talk about it if you

779
00:47:41,988 --> 00:47:45,550
are a startup company. We actually have very nice support

780
00:47:45,620 --> 00:47:49,074
for startup companies if you qualify. Right. So talk to us too

781
00:47:49,112 --> 00:47:52,286
and we'll get that set up for you and join

782
00:47:52,318 --> 00:47:55,506
our expert tv and meetups, right? And these are free training on

783
00:47:55,528 --> 00:47:59,554
many topics. I really highly recommend to also the IBM developer

784
00:47:59,602 --> 00:48:03,174
San Francisco Bay area or the New York City one. Well even like

785
00:48:03,212 --> 00:48:06,754
in Germany in middle east if you are there everywhere to all of the IBM

786
00:48:06,802 --> 00:48:10,006
developers have really great materials and also myself

787
00:48:10,108 --> 00:48:13,782
Chicago Java users group if you want to join us we have like on average

788
00:48:13,846 --> 00:48:16,922
one to two meetups on many different topics too. Okay.

789
00:48:16,976 --> 00:48:20,106
And then yeah, please consider joining us there. Lots of

790
00:48:20,128 --> 00:48:24,746
resource. And this is for IBM. We have a call for code giant worldwide

791
00:48:24,778 --> 00:48:29,070
hackathon big top prize winner 200,000 us

792
00:48:29,140 --> 00:48:32,686
dollar for top price. So visit callforcode.org and

793
00:48:32,708 --> 00:48:36,974
then I mentioned about my Twitch stream IBM developer livestream

794
00:48:37,022 --> 00:48:41,054
on Twitch. So if you want to visit that is twitch tv IBM

795
00:48:41,102 --> 00:48:45,022
developer I actually run that every Wednesday at about 01:00

796
00:48:45,086 --> 00:48:48,702
sometimes I may skip, but I like to encourage you to also join my discord

797
00:48:48,766 --> 00:48:51,714
server because over there I'll communicate to you if I'm late,

798
00:48:51,762 --> 00:48:54,486
if I have to skip or change time and all those things. And then we

799
00:48:54,508 --> 00:48:58,262
have other developer advocate also presenting many other topics too.

800
00:48:58,316 --> 00:49:01,850
For example JJ is on DevOps and Upcar is doing call for code.

801
00:49:01,920 --> 00:49:05,466
So all these wonderful folks and with that comes to

802
00:49:05,488 --> 00:49:09,350
a close. And thank you so much for having sat through my presentation.

803
00:49:09,430 --> 00:49:12,842
I hope you're finding it useful. I may be kind of new to this area

804
00:49:12,896 --> 00:49:16,506
myself, so IBM learning and I'm finding answers out. I want to find answers,

805
00:49:16,538 --> 00:49:19,966
but for you to make your job easier, and so is all of us at

806
00:49:19,988 --> 00:49:23,646
IBM as well. Please consider joining me on Discord if

807
00:49:23,668 --> 00:49:27,050
you want to scan that or get this code discord GG,

808
00:49:27,130 --> 00:49:30,634
if you don't get it, don't worry about it. Just follow me on Twitter

809
00:49:30,682 --> 00:49:34,558
too, or find me on LinkedIn or GitHub or dev

810
00:49:34,644 --> 00:49:38,310
too. And I promise that I will beef up all my blocks too.

811
00:49:38,380 --> 00:49:42,438
So everybody, thank you so much and I hope to see you in person

812
00:49:42,524 --> 00:49:46,038
at a concurrency at some point very soon.

813
00:49:46,124 --> 00:49:49,874
And I also pray special prayers for those who are still affected

814
00:49:49,922 --> 00:49:53,446
heavily by the pandemic. And thank you, thank you and you all take

815
00:49:53,468 --> 00:49:53,540
care.

