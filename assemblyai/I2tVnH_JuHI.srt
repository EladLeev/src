1
00:00:25,490 --> 00:00:28,594
Hi everyone, my name is Hussain, I am software development teammate

2
00:00:28,642 --> 00:00:32,134
of hellocast cloud. In this session I will try

3
00:00:32,172 --> 00:00:35,618
to provide some best practices about Golang in theory

4
00:00:35,714 --> 00:00:39,398
and I will do a demo about what we see inside

5
00:00:39,484 --> 00:00:42,966
the theoretical information. So as an outline we will see

6
00:00:43,068 --> 00:00:46,546
what is Golang, we will see how to set up development environment,

7
00:00:46,658 --> 00:00:50,046
couple of Golang examples and by using this

8
00:00:50,108 --> 00:00:53,182
examples how to write best and at the end

9
00:00:53,236 --> 00:00:57,322
we will see how to build an artifact out of these Golang projects

10
00:00:57,386 --> 00:01:00,490
to be used inside CI and CD platforms.

11
00:01:00,650 --> 00:01:04,314
Golang is a statically typed compiled language and it is originally

12
00:01:04,362 --> 00:01:08,354
designed by Robert Gresimer and Rob pike and Ken Thompson while

13
00:01:08,392 --> 00:01:11,950
they are working at Google. This is very similar to C language

14
00:01:12,030 --> 00:01:15,234
but there is a memory safety and the garbage collection stuff

15
00:01:15,272 --> 00:01:18,726
in this language. Remember CNC times you need

16
00:01:18,748 --> 00:01:22,594
to alloc on melloc memory in order to do some operations,

17
00:01:22,722 --> 00:01:26,246
but here you are free to do anything without touching on the

18
00:01:26,268 --> 00:01:30,214
memory part. And if you want to deep dive any kind of topic in Golang

19
00:01:30,262 --> 00:01:34,870
you can just refer the landing page because it is golang.org.

20
00:01:35,030 --> 00:01:38,470
Before writing code you need to download the Golang binary

21
00:01:38,550 --> 00:01:42,266
in your system. You can just go to Golang download page and

22
00:01:42,368 --> 00:01:45,854
download your distribution based on your operating system. In my case

23
00:01:45,892 --> 00:01:49,550
I'm using macOS and I will download this macOS distribution

24
00:01:50,210 --> 00:01:53,790
if you are preparing a project creating a project these

25
00:01:53,860 --> 00:01:57,342
project dependencies are a very important topic. In Golang

26
00:01:57,406 --> 00:02:00,946
there is a system which is called Go modules. With Go modules you

27
00:02:00,968 --> 00:02:05,262
can implement modular applications plus you can manage your dependencies.

28
00:02:05,406 --> 00:02:08,854
In the examples you see I say go mod in it and

29
00:02:08,892 --> 00:02:12,242
my version control system URL it will create a modular

30
00:02:12,306 --> 00:02:15,686
application. Of course it is empty. There will be only one file which

31
00:02:15,708 --> 00:02:19,730
is called Go mod file. And here after Gomode init

32
00:02:19,810 --> 00:02:23,146
you see it is dependent to GitHub.com, my outdoor name and

33
00:02:23,168 --> 00:02:26,698
my repository. But you can use GitLab, BitBucket or maybe

34
00:02:26,784 --> 00:02:29,978
if you have a custom version control system service you

35
00:02:29,984 --> 00:02:33,242
can also use that inside the Go module. When you have a look at module

36
00:02:33,306 --> 00:02:37,006
file you will see a module information calling version and if you have

37
00:02:37,028 --> 00:02:40,734
dependency you can see also dependent sections by

38
00:02:40,772 --> 00:02:44,782
using required keyword. In order to see all the dependencies

39
00:02:44,846 --> 00:02:48,114
you can say goal list m all you will see

40
00:02:48,152 --> 00:02:52,290
your exact dependency plus the recursive dependencies needed

41
00:02:52,360 --> 00:02:55,842
by this library. Okay, you know how to use

42
00:02:55,896 --> 00:02:59,782
Golang, I mean the distribution and you know how to generate an

43
00:02:59,836 --> 00:03:03,030
empty project. Now you can select

44
00:03:03,100 --> 00:03:06,422
one of your favorite ides, but as an example, if you are using

45
00:03:06,476 --> 00:03:10,362
Vim terminal, you can use Vimgo plugin. If you are using intelligence products

46
00:03:10,416 --> 00:03:14,422
you can use Golang or you can use vs code as an alternative.

47
00:03:14,566 --> 00:03:17,754
If you are using Vim terminal, then by using

48
00:03:17,872 --> 00:03:20,778
go ran command you can just run your application.

49
00:03:20,944 --> 00:03:24,414
If you are using Golan, you can define a run

50
00:03:24,452 --> 00:03:27,886
configuration to run your project in vs code. You can

51
00:03:27,908 --> 00:03:31,534
run your application by using control plus f five. So this is

52
00:03:31,572 --> 00:03:35,342
very fresh start about writing something and

53
00:03:35,396 --> 00:03:38,594
just running your application to see what's going on.

54
00:03:38,792 --> 00:03:42,578
When you create a resource file in Golang, it will start by a

55
00:03:42,584 --> 00:03:45,938
package statement. Here I am saying that my package name is main

56
00:03:46,104 --> 00:03:49,990
and right after that I have some import statements. I depend

57
00:03:50,060 --> 00:03:52,994
on context package, fmt package and GitHub package.

58
00:03:53,042 --> 00:03:56,486
Here, if you define your package name as main, this will be

59
00:03:56,508 --> 00:04:00,114
an executable rather than a library. For example,

60
00:04:00,252 --> 00:04:03,766
when you have a math package, it will be a library package.

61
00:04:03,878 --> 00:04:07,386
Then you can put your functions inside it. But in our case this

62
00:04:07,408 --> 00:04:11,386
is just for executable very initial principle of

63
00:04:11,408 --> 00:04:14,702
any kind of programming language. Variable declaration here

64
00:04:14,756 --> 00:04:18,094
in the first example you see I declare a variable. I am

65
00:04:18,132 --> 00:04:21,742
saying that count is a variable and it is type. It's integer. The second

66
00:04:21,796 --> 00:04:25,438
line you see I am assigning some value to it. Count is equal to five.

67
00:04:25,524 --> 00:04:29,022
When you say limit colon is equal to 15. You are just declaring

68
00:04:29,086 --> 00:04:33,550
and assign a value to a variable. So this is also known by calling language.

69
00:04:33,710 --> 00:04:37,406
In this following example you see I am defining a slice

70
00:04:37,518 --> 00:04:40,934
which is called list arrays relies on other

71
00:04:40,972 --> 00:04:44,162
languages. It starts with square brackets,

72
00:04:44,226 --> 00:04:47,766
and I am saying that this will be a slice of integer and I put

73
00:04:47,788 --> 00:04:51,046
some values inside it. In the following example you see

74
00:04:51,068 --> 00:04:55,222
there is a nums slice, but this time I am allocating a slice

75
00:04:55,286 --> 00:04:58,422
size. So I'm saying that there will be an integer slice,

76
00:04:58,486 --> 00:05:02,046
but its size will be three, and the very first value,

77
00:05:02,148 --> 00:05:05,614
the zero index value will be one. In my case.

78
00:05:05,812 --> 00:05:09,166
Also, you can define two dimensional slices here and the

79
00:05:09,188 --> 00:05:12,846
value is flot 54. As the final example you

80
00:05:12,868 --> 00:05:16,482
see I am defining a map. It is a key value store. In my case,

81
00:05:16,536 --> 00:05:20,174
keys is data, type is integer, the value will be string.

82
00:05:20,302 --> 00:05:23,598
Let's say that this is the student information map.

83
00:05:23,694 --> 00:05:27,278
The key is student id and the value is student name. In order

84
00:05:27,304 --> 00:05:31,346
to declare a function in Golan you can use funk keyword and it's

85
00:05:31,378 --> 00:05:35,154
followed by a name. Here sum. We open the parentheses

86
00:05:35,202 --> 00:05:39,538
and put arguments inside it. A and b the return type is integer

87
00:05:39,634 --> 00:05:43,802
and of course you provide your return function body. In the second example very

88
00:05:43,856 --> 00:05:47,402
same, but the return type is a bit different. For example,

89
00:05:47,456 --> 00:05:50,390
if you have scala before you remember the tuples,

90
00:05:50,550 --> 00:05:54,874
so sometimes you may need to return multiple values.

91
00:05:54,922 --> 00:05:59,114
In my case I just wanted to state x and y coordinated

92
00:05:59,242 --> 00:06:02,894
separately. Here in the third example, you see there is a do

93
00:06:02,932 --> 00:06:06,862
something. In do something, the function

94
00:06:06,916 --> 00:06:10,386
name starts with a lowercase letter. That means this function will

95
00:06:10,408 --> 00:06:14,642
be a private the first two will be exposed to outside, but third one

96
00:06:14,696 --> 00:06:18,006
will not be exposed to outside. When it comes to usage, you see I am

97
00:06:18,028 --> 00:06:21,286
saying functions sum provide your arguments and it

98
00:06:21,308 --> 00:06:25,142
will return a value. Just assign a variable. Another example,

99
00:06:25,196 --> 00:06:28,810
get coordinates. You see, it returns two values and I am using

100
00:06:28,880 --> 00:06:32,394
x and y in order to use different references to these

101
00:06:32,432 --> 00:06:36,170
returned values. Control structures are very important to

102
00:06:36,240 --> 00:06:39,626
define your business logic, right? You decide on something.

103
00:06:39,808 --> 00:06:43,082
I define an if function. Here it takes a parameter category.

104
00:06:43,146 --> 00:06:46,762
If category is shoes, I print show. Otherwise I print

105
00:06:46,826 --> 00:06:50,382
not a show. The main difference between other languages is

106
00:06:50,436 --> 00:06:54,486
there is no parenthesis right beside the if statement. In the switch statement,

107
00:06:54,538 --> 00:06:58,050
very similar case, you provide your variable and

108
00:06:58,200 --> 00:07:02,226
switch statement followed by one or more cases. And at

109
00:07:02,248 --> 00:07:05,182
the end there is a default case if it is a pc.

110
00:07:05,246 --> 00:07:08,438
If device is a pc, just stay at home. If it

111
00:07:08,444 --> 00:07:12,294
is a laptop, you can go outside. What about for loops in

112
00:07:12,332 --> 00:07:15,654
Golang? Again there is no parenthesis. I starts with zero

113
00:07:15,772 --> 00:07:19,514
up to ten v increment I by one. Here,

114
00:07:19,712 --> 00:07:23,594
if the number is divided by two, I am continue. I'm saying

115
00:07:23,632 --> 00:07:26,970
continue. That means just skip to next iteration without

116
00:07:27,040 --> 00:07:30,330
printing the current number. And in the second example

117
00:07:30,400 --> 00:07:34,134
I define a counter variable with initially initialized by zero

118
00:07:34,272 --> 00:07:37,706
and there is no statement beside the four. That means this is an infinite

119
00:07:37,738 --> 00:07:41,486
loop, right? And inside this infinite loop I am saying that if

120
00:07:41,508 --> 00:07:44,754
the counter is equal to ten, just break. That means just

121
00:07:44,792 --> 00:07:48,194
break the loop, otherwise it will increment counter by

122
00:07:48,232 --> 00:07:52,062
one. Here there is no for each function in Golang,

123
00:07:52,126 --> 00:07:55,394
but you can simulate it. I defined a number slice that

124
00:07:55,432 --> 00:07:59,366
contains four numbers. Inside the for statement there

125
00:07:59,388 --> 00:08:02,902
is a key value pairs. But why there is an underscore in the key

126
00:08:02,956 --> 00:08:06,166
part? Because I am not interested in the

127
00:08:06,188 --> 00:08:09,574
key part. So in golden if you define something

128
00:08:09,612 --> 00:08:13,162
but not use it, the compiler will start to complain about it.

129
00:08:13,216 --> 00:08:17,206
So if you are not interested in it, just put an underscore.

130
00:08:17,318 --> 00:08:21,134
You say range numbers and in this time you will get number.

131
00:08:21,252 --> 00:08:25,806
In iteration we are just printing the specific

132
00:08:25,908 --> 00:08:29,754
number inside the slice. In the second example I have a map.

133
00:08:29,802 --> 00:08:33,646
This time it is string string key string value string. It is

134
00:08:33,668 --> 00:08:37,858
simple, a country code and the country name keystore here.

135
00:08:38,024 --> 00:08:42,562
This time I am interested in both key and the value part called country

136
00:08:42,696 --> 00:08:45,858
and I am printing the code and country at the same time into the standard

137
00:08:45,944 --> 00:08:48,382
output. So I have functions,

138
00:08:48,446 --> 00:08:53,410
variables, etc. Let's try to test this one. In Golang

139
00:08:53,570 --> 00:08:57,426
you can use built in packages like testing, but also you

140
00:08:57,468 --> 00:09:00,650
can use testify which is a third party library.

141
00:09:01,150 --> 00:09:04,810
If you like more assert like operations.

142
00:09:05,310 --> 00:09:09,222
If you need mock related operations, you can use mockery

143
00:09:09,286 --> 00:09:12,586
which is a third party library. Also you can use Golang mock in

144
00:09:12,608 --> 00:09:15,834
your system. So I will not deep dive into mock

145
00:09:15,882 --> 00:09:19,358
part because it really deserves a separate session. But when it

146
00:09:19,364 --> 00:09:22,926
comes to unit test part, let's try to test a function which is

147
00:09:22,948 --> 00:09:26,206
called fibonacci. I have a Fibonacci function. It accepts

148
00:09:26,238 --> 00:09:30,066
a number as a parameter and it tells you what is the value

149
00:09:30,168 --> 00:09:33,794
at that number index. So here I am injecting the

150
00:09:33,832 --> 00:09:37,470
testing t reference to my function and keep in mind that

151
00:09:37,560 --> 00:09:41,446
my function name start with test. This is the naming convention. If the

152
00:09:41,468 --> 00:09:44,806
result is not 610 it

153
00:09:44,828 --> 00:09:48,294
will start to complain about I want 610 but got

154
00:09:48,332 --> 00:09:51,562
another result. But what about if you want to test this function

155
00:09:51,616 --> 00:09:55,354
fibonacci with different kind of multiple inputs, then you can use

156
00:09:55,392 --> 00:09:59,274
test table here. Inside my test fibonacci in batch function

157
00:09:59,472 --> 00:10:03,422
I am defining a struct slice of struct and

158
00:10:03,556 --> 00:10:07,214
it accepts two parameters, input and expected. Here I have

159
00:10:07,252 --> 00:10:11,274
five scenarios, test cases and inside the for loop I am iterating

160
00:10:11,322 --> 00:10:14,190
these parameters calling Fibonacci function.

161
00:10:14,340 --> 00:10:17,678
I am trying to verify if actual is equal

162
00:10:17,694 --> 00:10:21,666
to parameter or not. Otherwise it will start to complain about this one.

163
00:10:21,848 --> 00:10:25,634
You write best, but what about coverage? You need to know

164
00:10:25,752 --> 00:10:29,050
how much part of your code base production code is covered

165
00:10:29,070 --> 00:10:32,262
by best. Right here. When you say go best provide the test

166
00:10:32,316 --> 00:10:35,778
folder and when you say dash cover it will calculate the coverage.

167
00:10:35,874 --> 00:10:38,950
When you provide dash cover profile and some file,

168
00:10:39,030 --> 00:10:42,438
it will put the report in this file. So this is very useful,

169
00:10:42,534 --> 00:10:46,582
especially if you want to do further operations. Something like generate

170
00:10:46,646 --> 00:10:49,462
HTML output. Like operations.

171
00:10:49,606 --> 00:10:53,242
Okay, we generate this coverage because they are

172
00:10:53,296 --> 00:10:56,654
already being used inside the CI systems, right? For example,

173
00:10:56,692 --> 00:11:00,142
if you are using sonar, then this coverage file will be used

174
00:11:00,196 --> 00:11:03,850
for sonar to analyze your code base. Maybe put as some kind of thresholds

175
00:11:03,930 --> 00:11:08,162
in CI CD part. I will not talk about something like Jenkins maybe

176
00:11:08,296 --> 00:11:12,034
or GitHub Excel or something like that. I will try to give

177
00:11:12,072 --> 00:11:15,566
information about the very minimum unit of the CI

178
00:11:15,598 --> 00:11:18,174
CD systems, the artifacts.

179
00:11:18,302 --> 00:11:21,446
Golang has built in tools to generate artifacts based

180
00:11:21,468 --> 00:11:25,682
on our distribution. So in order to see supported disk platforms in Golang

181
00:11:25,746 --> 00:11:28,534
you can use go tool disk list.

182
00:11:28,652 --> 00:11:32,342
So in the table you will see your supported operating

183
00:11:32,406 --> 00:11:35,942
system and the architecture. In my case I'm using macOS.

184
00:11:36,006 --> 00:11:39,306
The value is Darwin AMD 64. In order to

185
00:11:39,328 --> 00:11:43,358
build a project to generate some binary you can provide your

186
00:11:43,444 --> 00:11:46,830
operating system and architecture and when you say go build,

187
00:11:46,900 --> 00:11:50,282
the binary will be generated based on these distribution parameters.

188
00:11:50,426 --> 00:11:53,806
So why do you need this binary? Because it is

189
00:11:53,828 --> 00:11:57,474
very popular inside the contain world. For example, I create

190
00:11:57,512 --> 00:12:00,802
a docker file and I put some contents inside

191
00:12:00,856 --> 00:12:04,430
it. So here I am saying that I will drive my docker image from Golang

192
00:12:04,510 --> 00:12:08,178
and I provided alias as builder. I create a folder,

193
00:12:08,274 --> 00:12:12,562
I make my folder to USRSRc

194
00:12:12,626 --> 00:12:15,830
app. I copy all of project files to the

195
00:12:15,900 --> 00:12:19,906
docker context. I download my dependencies by gomodownload and

196
00:12:19,948 --> 00:12:23,702
generate my binary. But this time I'm providing all parameter

197
00:12:23,766 --> 00:12:26,986
to change the output name. This is the

198
00:12:27,008 --> 00:12:30,358
first stage, but in the second stage I am driving my docker image

199
00:12:30,374 --> 00:12:33,290
from scratch which is the zero sized docker image.

200
00:12:33,370 --> 00:12:36,862
I am copying the binary generated on the first phase to

201
00:12:36,916 --> 00:12:40,762
my stage. Then I am providing this hello binary

202
00:12:40,826 --> 00:12:44,542
as an entry point into this image. So we are

203
00:12:44,596 --> 00:12:47,694
calling this strategy as multi stage docker.

204
00:12:47,742 --> 00:12:51,474
Bill I believe that the theoretical information was

205
00:12:51,512 --> 00:12:56,134
enough for this session. Let's have a look a couple of demo by

206
00:12:56,172 --> 00:12:59,922
using these theoretical informations. Let me open my terminal

207
00:12:59,986 --> 00:13:03,058
first I will create a folder.

208
00:13:03,154 --> 00:13:06,600
Let's say that conf

209
00:13:10,170 --> 00:13:20,382
here go mod okay

210
00:13:20,436 --> 00:13:23,386
you see there is only one file here go mode.

211
00:13:23,498 --> 00:13:27,002
Let's open this one by using Golang

212
00:13:27,146 --> 00:13:32,666
I am using goal end for my projects file.

213
00:13:32,778 --> 00:13:39,150
Open presentations.

214
00:13:40,930 --> 00:13:50,966
This one let

215
00:13:50,988 --> 00:13:54,434
me open. Okay it is already in presentation mode.

216
00:13:54,562 --> 00:13:58,026
So here when you open Gomot file, you will see

217
00:13:58,048 --> 00:14:01,420
there is only module information plus there is a version information.

218
00:14:02,190 --> 00:14:04,810
I will start creating a main file.

219
00:14:05,550 --> 00:14:09,846
Main in this file, this is Golang

220
00:14:09,878 --> 00:14:13,386
by default. Adds this package, the folder name as a package in this file.

221
00:14:13,418 --> 00:14:17,166
But I will change this one as main because I want this package to

222
00:14:17,188 --> 00:14:20,320
be executable. Funk main.

223
00:14:21,090 --> 00:14:25,106
You see this main is a special function. You can run it.

224
00:14:25,288 --> 00:14:27,506
Let's do our famous stuff.

225
00:14:27,688 --> 00:14:32,900
Print run hello world.

226
00:14:39,370 --> 00:14:41,720
Okay. When you run it,

227
00:14:44,490 --> 00:14:47,560
you will see it is in the output. Cool.

228
00:14:48,990 --> 00:14:52,774
Let's start with the variable declarations. But I will create a separate directory

229
00:14:52,822 --> 00:14:56,470
for this variables and a separate

230
00:14:56,630 --> 00:15:00,526
profile variables in

231
00:15:00,548 --> 00:15:04,606
this file let's define a function. Let's say that run

232
00:15:04,788 --> 00:15:08,014
in this run function we can define our

233
00:15:08,052 --> 00:15:11,870
variables arcount. Let's say that this will be an integer

234
00:15:12,550 --> 00:15:16,100
and the value will be 34.

235
00:15:17,110 --> 00:15:20,034
Just print this one.

236
00:15:20,232 --> 00:15:24,340
You see, it complains about you defined it, but you have not used it

237
00:15:25,290 --> 00:15:26,040
count.

238
00:15:27,530 --> 00:15:30,902
Okay, so let's try to run this

239
00:15:30,956 --> 00:15:34,470
one from main functions.

240
00:15:35,610 --> 00:15:39,210
Variables run. You see, this import

241
00:15:39,280 --> 00:15:42,330
is automatically added to this resource file.

242
00:15:44,110 --> 00:15:48,006
Hello world 34. Let's continue to define

243
00:15:48,038 --> 00:15:52,010
a couple of variables. Here the inline one limit

244
00:15:52,090 --> 00:15:55,600
is equal to ten. What else

245
00:15:56,210 --> 00:16:00,206
we can define the slice numbers is

246
00:16:00,228 --> 00:16:02,590
equal to square bracket,

247
00:16:03,810 --> 00:16:06,080
two, five, seven,

248
00:16:07,010 --> 00:16:11,040
what else? We can

249
00:16:11,810 --> 00:16:15,734
define a limited slice here it

250
00:16:15,932 --> 00:16:19,654
you can define this length in advance. Let's say that this is

251
00:16:19,692 --> 00:16:20,280
two,

252
00:16:24,650 --> 00:16:26,070
this is limit,

253
00:16:28,670 --> 00:16:29,980
this is numbers,

254
00:16:35,710 --> 00:16:39,210
and here let me do something. The first

255
00:16:39,280 --> 00:16:43,680
value will be this one. Duplicate it.

256
00:16:44,450 --> 00:16:48,240
Let's try to compile this or run this.

257
00:16:49,250 --> 00:16:50,640
Let's see what happens.

258
00:17:05,370 --> 00:17:06,840
It okay,

259
00:17:10,010 --> 00:17:12,630
I did something wrong. One,

260
00:17:12,700 --> 00:17:13,320
two,

261
00:17:16,810 --> 00:17:19,762
you see index out of range, two,

262
00:17:19,836 --> 00:17:23,594
because you define the limit two, but you are trying to add the

263
00:17:23,632 --> 00:17:26,700
third item, right? I will delete this one to make it work.

264
00:17:29,740 --> 00:17:33,276
So if you do not add for example,

265
00:17:33,458 --> 00:17:37,500
second value, then you will see the value

266
00:17:37,570 --> 00:17:41,036
will be filled by the default values, which is zero is

267
00:17:41,058 --> 00:17:44,168
the default value of the integer type.

268
00:17:44,354 --> 00:17:48,144
What else we can define students

269
00:17:48,262 --> 00:17:52,304
map in this

270
00:17:52,342 --> 00:17:56,950
case, I am saying that the student id

271
00:17:57,320 --> 00:18:01,430
and the grade lot 64

272
00:18:01,960 --> 00:18:05,510
here, student id is one, the value is

273
00:18:05,960 --> 00:18:09,832
this one, and student Id is two,

274
00:18:09,966 --> 00:18:13,336
and value is 100%

275
00:18:13,438 --> 00:18:17,450
here. And just print students.

276
00:18:19,340 --> 00:18:20,570
This is wrong.

277
00:18:25,180 --> 00:18:28,844
It all right, let's write this function. Run this

278
00:18:28,882 --> 00:18:32,504
function again, and as you can see it is correctly

279
00:18:32,552 --> 00:18:36,556
working. What about functions? Let's switch to functions.

280
00:18:36,668 --> 00:18:40,400
Here I define another directory functions.

281
00:18:40,820 --> 00:18:44,880
Just create another resource file functions.

282
00:18:45,860 --> 00:18:49,908
Here I define some

283
00:18:49,994 --> 00:18:53,904
function. It takes a and b as integer and returns

284
00:18:53,952 --> 00:18:57,684
integer. You see, you don't need to define integer for all of the types if

285
00:18:57,722 --> 00:19:01,624
they are repetitive. You define your variable names and integer. I think

286
00:19:01,662 --> 00:19:05,384
this is valid for typescript also.

287
00:19:05,582 --> 00:19:08,776
You return a

288
00:19:08,878 --> 00:19:12,876
plus b. Right, let's do another one.

289
00:19:12,978 --> 00:19:15,740
Funk. This time it will be multiply,

290
00:19:16,400 --> 00:19:19,884
multiply ab. They are

291
00:19:19,922 --> 00:19:24,690
integer return integer return ab.

292
00:19:27,300 --> 00:19:31,296
So here, in this case, one function

293
00:19:31,398 --> 00:19:35,216
starts with capital letter, another starts with

294
00:19:35,398 --> 00:19:39,172
lowercase letter. Here, let's go to main

295
00:19:39,226 --> 00:19:43,392
function. Just comment

296
00:19:43,456 --> 00:19:47,044
this one functions sum. But what

297
00:19:47,082 --> 00:19:49,370
about you see,

298
00:19:50,460 --> 00:19:53,892
there is no multiply.

299
00:19:53,956 --> 00:19:57,720
Why? Because it is private. That is the commission inside codelack.

300
00:19:59,500 --> 00:20:02,556
Okay, inside some function, just provide

301
00:20:02,738 --> 00:20:06,776
45, 55 and wrap

302
00:20:06,808 --> 00:20:13,710
it with here.

303
00:20:15,860 --> 00:20:19,632
Hello world. The values 100. This is it

304
00:20:19,686 --> 00:20:22,508
for functions. What about testing?

305
00:20:22,684 --> 00:20:26,496
In my functions package I am creating

306
00:20:26,528 --> 00:20:30,070
a file which is called functions test.

307
00:20:31,160 --> 00:20:34,564
Okay, you see, the icon is changed for

308
00:20:34,602 --> 00:20:38,228
best in Golang. In order to write a test,

309
00:20:38,314 --> 00:20:42,440
you can start with test keyword and it will automatically

310
00:20:42,940 --> 00:20:47,208
suggest you to sum. So I am testing sum result

311
00:20:47,374 --> 00:20:50,932
is equal to sum two

312
00:20:51,086 --> 00:20:55,644
three. Here, if result is

313
00:20:55,682 --> 00:21:01,470
not equal to five, then T-R-F

314
00:21:01,920 --> 00:21:06,050
wanted five cut

315
00:21:08,020 --> 00:21:11,264
result. Let's run this

316
00:21:11,302 --> 00:21:15,136
one. So basically we are using t reference in

317
00:21:15,158 --> 00:21:18,804
order to verify something. But let's say that you

318
00:21:18,842 --> 00:21:22,420
change this function to something

319
00:21:22,490 --> 00:21:25,780
like this. Then when you go back to function

320
00:21:25,850 --> 00:21:29,768
and run it, you will see one

321
00:21:29,854 --> 00:21:33,464
five but got six. So when you change production code by

322
00:21:33,502 --> 00:21:36,410
doing this, you may understand. Okay, there is a problem.

323
00:21:37,340 --> 00:21:41,244
Let's delete this one. Okay, what about

324
00:21:41,282 --> 00:21:44,732
test tables funk this time

325
00:21:44,786 --> 00:21:53,340
let's say that test sum in fetching

326
00:21:54,020 --> 00:21:57,504
t here I will define a

327
00:21:57,542 --> 00:21:58,240
struct,

328
00:22:01,060 --> 00:22:05,180
something like you define a JSON inside Javascript or typescript,

329
00:22:05,340 --> 00:22:09,124
or you define a map in any kind of

330
00:22:09,162 --> 00:22:13,136
language. So inside the struct you can define your variables

331
00:22:13,168 --> 00:22:16,500
and types, something like this. This is slice of struct.

332
00:22:16,920 --> 00:22:20,248
So let's say that you haven't defined any kind of object,

333
00:22:20,334 --> 00:22:24,504
you don't have an object, but you can define something like this. This will

334
00:22:24,542 --> 00:22:28,872
be the input, let's say that integer and

335
00:22:28,926 --> 00:22:32,236
the expected output. So this is

336
00:22:32,258 --> 00:22:35,436
a table. Now I can

337
00:22:35,458 --> 00:22:37,550
put my values inside it.

338
00:22:38,480 --> 00:22:42,030
Okay, this will be a a.

339
00:22:43,040 --> 00:22:44,930
There will be a b.

340
00:22:45,940 --> 00:22:49,520
Unexpected. So if you provide two and three to the function,

341
00:22:49,590 --> 00:22:53,024
you need to get five. What else? If you

342
00:22:53,062 --> 00:22:57,284
provide this one and this

343
00:22:57,322 --> 00:22:58,630
one, it will be.

344
00:23:01,720 --> 00:23:04,870
Let's put some wrong values. For example

345
00:23:05,400 --> 00:23:08,390
100 200,

346
00:23:08,940 --> 00:23:10,970
it will be 400.

347
00:23:13,580 --> 00:23:21,328
Okay, this one's

348
00:23:21,444 --> 00:23:24,190
then in order to run it, four.

349
00:23:25,040 --> 00:23:28,940
I'm not interested in the index, I'm only interested in parameter

350
00:23:30,480 --> 00:23:32,780
range parameters.

351
00:23:35,700 --> 00:23:40,160
Let's call the sum function and provide parameter

352
00:23:40,580 --> 00:23:43,730
a. Parameter b.

353
00:23:45,380 --> 00:23:50,316
Then parameter

354
00:23:50,348 --> 00:23:54,004
not parameters, parameter b. Assign this

355
00:23:54,042 --> 00:23:58,150
one to a value. Okay, sum is cool.

356
00:23:58,940 --> 00:24:03,320
If sum is not equal to parameter

357
00:24:04,220 --> 00:24:08,340
expected, then you can say t error

358
00:24:08,420 --> 00:24:12,190
f wanted something,

359
00:24:12,720 --> 00:24:17,164
got something so invanted part

360
00:24:17,282 --> 00:24:19,980
parameter expected.

361
00:24:20,400 --> 00:24:24,204
Another one is sum. So let's execute

362
00:24:24,252 --> 00:24:27,376
this function and see what

363
00:24:27,478 --> 00:24:31,072
is going on. You see, wanted 400 but

364
00:24:31,126 --> 00:24:34,944
got 300. You see, that means this

365
00:24:34,982 --> 00:24:38,212
shouldn't be 400, this should be

366
00:24:38,266 --> 00:24:42,308
300. Another one wanted five but got seven. You see,

367
00:24:42,474 --> 00:24:46,020
this is seven. Just execute this one.

368
00:24:46,170 --> 00:24:50,136
But normally you don't change test

369
00:24:50,238 --> 00:24:53,512
code most of the time. So you change

370
00:24:53,566 --> 00:24:56,330
test, but right after change production code.

371
00:24:57,580 --> 00:25:01,040
Okay, this is test. What about coverage?

372
00:25:01,220 --> 00:25:04,892
You can just select this one and run with

373
00:25:04,946 --> 00:25:08,716
coverage. You can say that, or you

374
00:25:08,738 --> 00:25:12,508
can do this. Just open

375
00:25:12,674 --> 00:25:16,176
terminal in

376
00:25:16,198 --> 00:25:23,650
terminal go. Best cover

377
00:25:25,060 --> 00:25:28,784
this one. So you see the coverage of the functions

378
00:25:28,832 --> 00:25:32,870
is 50%. There is no coverage in arrivals part

379
00:25:34,120 --> 00:25:37,956
in functions because there is also multiply function. But I

380
00:25:37,978 --> 00:25:41,704
cannot test it right now. And what about

381
00:25:41,742 --> 00:25:44,964
this coverage alt file?

382
00:25:45,092 --> 00:25:49,096
Let's test. Yeah, you see, go to cover.

383
00:25:49,278 --> 00:25:52,444
I just wanted to see HTML output of this one.

384
00:25:52,482 --> 00:25:56,380
When you do that, you will see the HTML output.

385
00:25:59,280 --> 00:26:03,144
I cannot show it right now but let's continue with the column

386
00:26:03,192 --> 00:26:07,744
part. What can we do next?

387
00:26:07,862 --> 00:26:11,904
Yes, so we can talk about building artifacts right

388
00:26:12,022 --> 00:26:15,848
here. Let's try to build an artifact.

389
00:26:16,044 --> 00:26:19,684
Go build. In my

390
00:26:19,722 --> 00:26:24,710
case this will be, let's say the conf 42.

391
00:26:25,960 --> 00:26:29,284
When you do a build operation, you will see binary

392
00:26:29,332 --> 00:26:33,192
will be generated. Something like this. And when you

393
00:26:33,246 --> 00:26:36,420
execute it, you will see the same output.

394
00:26:36,500 --> 00:26:40,600
Very simple. What about using this one in the containerization?

395
00:26:41,120 --> 00:26:44,536
Generating a Docker image let's create a docker

396
00:26:44,568 --> 00:26:48,940
image for this docker file

397
00:26:50,880 --> 00:26:55,376
here in docker file I will start from

398
00:26:55,558 --> 00:27:00,320
calling as builder.

399
00:27:01,940 --> 00:27:06,268
Okay. This is my first stage and

400
00:27:06,454 --> 00:27:08,790
I will do run.

401
00:27:10,280 --> 00:27:16,020
I will create a folder first and

402
00:27:16,090 --> 00:27:20,570
change my work directory to this one.

403
00:27:23,580 --> 00:27:27,252
Then I will copy everything from my project folder

404
00:27:27,316 --> 00:27:31,696
to docker context. I will download all the dependencies

405
00:27:31,828 --> 00:27:33,630
if I have any.

406
00:27:36,320 --> 00:27:39,180
Then I will generate my binary.

407
00:27:49,220 --> 00:27:52,496
So this will generate a binary. Then in the

408
00:27:52,518 --> 00:27:56,720
second stage I will use scratch image.

409
00:27:57,880 --> 00:28:01,716
Then I will copy from

410
00:28:01,898 --> 00:28:13,576
builder. So from the first stage in this path I

411
00:28:13,598 --> 00:28:17,204
will copy from the builder at this page to mypad.

412
00:28:17,332 --> 00:28:21,292
Let's say that bin app and just

413
00:28:21,346 --> 00:28:25,164
put this one to entry point as

414
00:28:25,282 --> 00:28:29,676
bin app. Let's try to build this one.

415
00:28:29,858 --> 00:28:37,576
Docker build ht let's

416
00:28:37,608 --> 00:28:40,684
wait for this. It will

417
00:28:40,722 --> 00:28:44,320
download the Golang docker image and use it.

418
00:28:44,470 --> 00:28:48,790
Build a docker image and then generate something. Let's see

419
00:28:50,280 --> 00:28:54,372
Docker images. You see we have conf fourty two and

420
00:28:54,426 --> 00:29:08,948
the size is only 1.

421
00:29:09,034 --> 00:29:12,476
When I run comfort I got exactly

422
00:29:12,578 --> 00:29:16,572
same output from this part. So that was

423
00:29:16,626 --> 00:29:20,190
all for this session. Thanks for listening the theoretical information

424
00:29:20,640 --> 00:29:24,348
and watching for my showcase about the calling

425
00:29:24,514 --> 00:29:28,280
usage. Hope it was a very useful

426
00:29:28,440 --> 00:29:31,400
session for you. Maybe see you in the next sessions.

