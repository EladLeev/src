1
00:01:42,590 --> 00:01:46,446
You hi, I am Orali Darbasani,

2
00:01:46,478 --> 00:01:49,826
staff software engineer at Ivan. In this talk I will go through

3
00:01:49,848 --> 00:01:53,566
a few challenges companies are currently facing when using Apache

4
00:01:53,598 --> 00:01:56,846
Kafka. We would also explore a few tools

5
00:01:56,878 --> 00:02:00,546
and aiven into claw which is an open source project. I will

6
00:02:00,568 --> 00:02:04,382
also give a demo of it and see how it actually overcomes

7
00:02:04,526 --> 00:02:07,882
those problems. We have about 30 minutes for this talk,

8
00:02:07,936 --> 00:02:11,846
so let's begin. Let's start with some background on Kafka

9
00:02:11,878 --> 00:02:15,366
itself. As we all know, Kafka is widely adopted

10
00:02:15,398 --> 00:02:19,094
in many companies of all sizes due to its unique

11
00:02:19,142 --> 00:02:22,378
measures such as scalability, retention, reliability,

12
00:02:22,554 --> 00:02:25,850
making it apart from any traditional messaging platforms.

13
00:02:26,010 --> 00:02:29,534
Kafka is similar to other messaging solutions, but with

14
00:02:29,572 --> 00:02:33,394
its exceptional features it definitely makes it stand out.

15
00:02:33,592 --> 00:02:37,810
However, adapting Kafka comes with its share of challenges.

16
00:02:38,870 --> 00:02:42,882
Now, many companies include Kafka in their technology stack as

17
00:02:42,936 --> 00:02:46,562
it enables them to grow and scale effectively.

18
00:02:46,706 --> 00:02:50,626
Now events are published to Kafka and they are actually stored into topics

19
00:02:50,738 --> 00:02:54,034
which can grow significantly as the applications

20
00:02:54,082 --> 00:02:58,122
around them also grow. However, managing these

21
00:02:58,176 --> 00:03:02,374
topics and their authorizations can be a very big struggle

22
00:03:02,422 --> 00:03:06,026
for many organizations. I should say large

23
00:03:06,128 --> 00:03:09,306
companies might have hundreds or even thousands of

24
00:03:09,408 --> 00:03:12,974
these topics, and the improper governance and

25
00:03:13,012 --> 00:03:16,270
the authorization management can become a big headache.

26
00:03:16,610 --> 00:03:20,382
To address these challenges, organizations often turn

27
00:03:20,436 --> 00:03:23,858
to open source or commercial products, and some even

28
00:03:23,944 --> 00:03:27,710
develop their own automation frameworks using tools like Jenkins,

29
00:03:27,790 --> 00:03:31,234
Git, confluence, or even Excel. Now in our

30
00:03:31,272 --> 00:03:34,914
next slide, we will see how bringing structure to an

31
00:03:34,952 --> 00:03:37,590
entity would be more productive.

32
00:03:38,730 --> 00:03:42,118
This is the image of a library where it is almost

33
00:03:42,204 --> 00:03:45,510
impossible to find the right book you are looking for,

34
00:03:45,660 --> 00:03:49,234
and on the right hand side we see how books are properly

35
00:03:49,282 --> 00:03:52,770
organized and categorized. Most importantly,

36
00:03:52,850 --> 00:03:56,454
they're also tracked on who is actually renting those books,

37
00:03:56,502 --> 00:03:59,910
right? And for how long? We can actually compare

38
00:03:59,990 --> 00:04:03,406
these books to Kafka topics. In our next slide, let's see

39
00:04:03,428 --> 00:04:06,750
how topics actually are represented in Kafka.

40
00:04:07,170 --> 00:04:10,682
Here we are seeing a typical Kafka environment and provision

41
00:04:10,746 --> 00:04:14,030
of topics to different producer and consumer teams.

42
00:04:14,190 --> 00:04:17,586
Some of these problems include manual activities like

43
00:04:17,688 --> 00:04:21,682
one single topic creation. Providing producer and consumer access

44
00:04:21,816 --> 00:04:24,994
and even promoting to higher environments can take

45
00:04:25,032 --> 00:04:29,426
up to ten email communications at least. Now executing

46
00:04:29,458 --> 00:04:33,014
these steps, which means these actual commands execution can take

47
00:04:33,052 --> 00:04:36,470
up to two to 3 hours, excluding these non human

48
00:04:36,540 --> 00:04:39,974
response time. Do these users

49
00:04:40,022 --> 00:04:43,610
have the authority to request for access on these topics?

50
00:04:44,110 --> 00:04:47,610
And whoever is actually creating those topics, there is no record

51
00:04:47,680 --> 00:04:51,022
of who executed those manual commands for

52
00:04:51,076 --> 00:04:54,430
topics and the ACL creation basically,

53
00:04:54,580 --> 00:04:58,574
a centralized governance is challenging when

54
00:04:58,612 --> 00:05:01,966
actions are initiated through emails or maintained in

55
00:05:01,988 --> 00:05:06,098
spreadsheets and manual release process can

56
00:05:06,184 --> 00:05:09,826
lead to errors and system outages, especially when

57
00:05:09,848 --> 00:05:12,526
we think about schemas and their evolution.

58
00:05:12,718 --> 00:05:16,162
Deployments of various versions on the schemas

59
00:05:16,226 --> 00:05:19,858
would become critical. Do you know that several Kafka

60
00:05:19,874 --> 00:05:23,494
consumer clients get into deserialization issues when

61
00:05:23,532 --> 00:05:27,570
a new schema version is released on a topic and basically

62
00:05:27,660 --> 00:05:31,354
they are not aware of this unless the right compatibility is set

63
00:05:31,392 --> 00:05:34,698
on the topic schema? Various questions emerge in

64
00:05:34,704 --> 00:05:38,682
the context of kafka implementation, posing challenges for

65
00:05:38,736 --> 00:05:42,510
developers who has the permission to produce and

66
00:05:42,580 --> 00:05:46,494
consume on a topics. We know it's an application from a team,

67
00:05:46,612 --> 00:05:49,934
but what if they are not authorized to get access?

68
00:05:50,132 --> 00:05:53,442
Who owns a topic or a kafka connector or

69
00:05:53,496 --> 00:05:57,010
most importantly the schemas? How can

70
00:05:57,080 --> 00:06:00,482
topics be promoted seamlessly from lower to higher

71
00:06:00,536 --> 00:06:04,782
environments with tested configurations? Is security

72
00:06:04,936 --> 00:06:08,486
properly enforced with access controls? Now how

73
00:06:08,508 --> 00:06:12,546
can the kafka configuration be backed up to manage the disaster

74
00:06:12,578 --> 00:06:16,370
recovery process? Now these challenges are typically

75
00:06:16,450 --> 00:06:19,820
not evident during the initial stages of the project.

76
00:06:20,270 --> 00:06:24,022
However, as the application or the project expands

77
00:06:24,086 --> 00:06:28,250
and the number of topics grow, managing them

78
00:06:28,320 --> 00:06:31,582
really becomes cumbersome. There are a few

79
00:06:31,636 --> 00:06:35,374
tools available to address certain problems in this space

80
00:06:35,572 --> 00:06:38,800
and below I have mentioned a few.

81
00:06:39,170 --> 00:06:42,494
Kafka manager from Yahoo is quite a good one

82
00:06:42,532 --> 00:06:46,402
with a nice user friendly interface and if you are

83
00:06:46,456 --> 00:06:50,098
looking for metadata to be stored in git and with

84
00:06:50,184 --> 00:06:53,826
CI CD pipelines, then Julie Gitops has a

85
00:06:53,848 --> 00:06:57,266
good automation there producers is a UI

86
00:06:57,298 --> 00:07:00,822
for Apache Kafka. It is a simple tool that makes

87
00:07:00,876 --> 00:07:04,470
your data observable and also helps you find and

88
00:07:04,540 --> 00:07:08,110
troubleshoot the issues faster. These tools

89
00:07:08,130 --> 00:07:11,754
are doing quite good, but not actually what we are looking

90
00:07:11,792 --> 00:07:16,214
for. For example, a user can get a topic or ACL

91
00:07:16,262 --> 00:07:20,038
directly created on the cluster without any approvals

92
00:07:20,214 --> 00:07:23,854
and there wouldn't be any ownership on the topics. So it's very hard to find

93
00:07:23,892 --> 00:07:27,774
the right contact person and that's where we see the need

94
00:07:27,812 --> 00:07:31,790
of claw. Claw is a toolkit web application

95
00:07:31,940 --> 00:07:35,674
designed to automate the process of creating and managing

96
00:07:35,722 --> 00:07:39,102
the kafka topics, ACL schemas and connectors.

97
00:07:39,246 --> 00:07:42,302
It focuses on four main principles, governance,

98
00:07:42,366 --> 00:07:46,310
self service, security and automation, which we

99
00:07:46,380 --> 00:07:49,430
shall look into detail in the next slide.

100
00:07:49,850 --> 00:07:53,170
Governance involves defining roles, responsibilities,

101
00:07:53,250 --> 00:07:56,514
ownership, auditing activities, and naming conventions,

102
00:07:56,562 --> 00:08:00,234
to name a few, and claw acts as the

103
00:08:00,272 --> 00:08:04,410
single source of truth preventing manipulations on the clusters.

104
00:08:04,830 --> 00:08:08,570
However, Claw can identify those manual changes,

105
00:08:08,720 --> 00:08:12,510
notify administrators, and synchronize across the systems.

106
00:08:12,850 --> 00:08:16,382
Self service it empowers teams to become

107
00:08:16,436 --> 00:08:19,534
independent of the infrastructure teams and

108
00:08:19,652 --> 00:08:22,930
manage the kafka configurations. They can create,

109
00:08:23,080 --> 00:08:26,446
promote, edit and claim topics, provide producer

110
00:08:26,478 --> 00:08:30,210
and consumer access and request for schemas and connectors.

111
00:08:30,870 --> 00:08:34,842
Security it is quite crucial for preventing

112
00:08:34,926 --> 00:08:38,338
unauthorized manual changes on the cluster.

113
00:08:38,514 --> 00:08:41,974
Claw supports various protocols like kerberos and

114
00:08:42,012 --> 00:08:44,690
SSL for secure connections,

115
00:08:44,850 --> 00:08:48,982
and users can log in using these active directory credentials

116
00:08:49,046 --> 00:08:52,330
or existing SSO mechanisms.

117
00:08:53,070 --> 00:08:56,534
And the last one, automation is a core feature of claw,

118
00:08:56,662 --> 00:09:00,346
making it self sufficient. It enables easy provisioning

119
00:09:00,378 --> 00:09:03,946
of configurations and allows smooth promotion

120
00:09:03,978 --> 00:09:06,670
of topics across different environments.

121
00:09:07,010 --> 00:09:10,494
Metadata on Claw can be synchronized back and

122
00:09:10,532 --> 00:09:15,214
forth from the cluster, with users receiving notifications

123
00:09:15,262 --> 00:09:18,770
for every request or the configuration update.

124
00:09:19,430 --> 00:09:23,566
Now that we have seen the fundamentals, let's see the architecture

125
00:09:23,598 --> 00:09:27,702
of Claw. Claw is developed with React, the new

126
00:09:27,756 --> 00:09:31,094
UI as the front end technology. While it

127
00:09:31,132 --> 00:09:34,374
also has angular based UI, Claw has two

128
00:09:34,412 --> 00:09:38,386
jaw based spring applications. Claw has defined workflows for

129
00:09:38,428 --> 00:09:41,914
applying configurations to Apache, kafka clusters, and also

130
00:09:41,952 --> 00:09:45,414
other types of clusters. Now, instead of directly creating

131
00:09:45,462 --> 00:09:49,302
configurations on the cluster, we know Kafka follows the four s principle

132
00:09:49,366 --> 00:09:52,714
concept. This approach entails raising

133
00:09:52,762 --> 00:09:56,350
a request and obtaining approval before

134
00:09:56,420 --> 00:10:00,346
actually implementing any changes. Benefits of workflows

135
00:10:00,378 --> 00:10:04,062
it's like it provides an additional layer of security by mitigating

136
00:10:04,126 --> 00:10:07,170
any risks associated with those manual entries.

137
00:10:07,670 --> 00:10:11,854
Basically, it ensures a thorough review and verification of the request

138
00:10:11,982 --> 00:10:15,654
by another person, ensuring the sanity of the application,

139
00:10:15,772 --> 00:10:19,320
and we can easily track these configurational change history.

140
00:10:20,250 --> 00:10:24,082
All this ownership metadata and actual topic

141
00:10:24,146 --> 00:10:27,590
ACL schema configurations is stored in the metastore.

142
00:10:28,250 --> 00:10:31,958
By default, Claw will use H two as the metastore.

143
00:10:32,134 --> 00:10:35,962
This means that there are no additional dependencies to get started

144
00:10:36,016 --> 00:10:39,082
with your project. If you prefer to use another

145
00:10:39,136 --> 00:10:42,702
rdbms such as MySQL, we of course recommend to use

146
00:10:42,756 --> 00:10:46,778
it. And the second spring application concerns

147
00:10:46,794 --> 00:10:49,870
to clusters for cluster related operations.

148
00:10:50,450 --> 00:10:53,834
Now another nice aspect is you can connect

149
00:10:53,892 --> 00:10:57,460
to any number of Kafka clusters and there is no limit there.

150
00:10:58,070 --> 00:11:01,390
As Claw runs on this concept of forest principle,

151
00:11:01,470 --> 00:11:05,054
it is recommended to use Claw with two users,

152
00:11:05,102 --> 00:11:09,066
at least to request and review topics, et cetera.

153
00:11:09,198 --> 00:11:12,546
Now, in the next five demos we will have two users,

154
00:11:12,578 --> 00:11:15,846
William and Jennifer, where one requests and the

155
00:11:15,868 --> 00:11:19,466
other approach them. I will be demonstrating provision of

156
00:11:19,488 --> 00:11:23,260
topic ACL schemas and also the disaster recovery process.

157
00:11:23,630 --> 00:11:26,774
This use case is to provision a Kafka topic.

158
00:11:26,902 --> 00:11:30,234
Here, William requests for a topic which is validated and

159
00:11:30,272 --> 00:11:34,110
stored in the database, and Jennifer reviews and approves the request

160
00:11:34,850 --> 00:11:38,238
on approval topic is provisioned on the cluster. That's it.

161
00:11:38,324 --> 00:11:41,920
Now, same principle is applied for the other elements too.

162
00:11:42,310 --> 00:11:46,078
I have two browser sessions open, one with William user

163
00:11:46,174 --> 00:11:49,266
and the other one with Jennifer. So this

164
00:11:49,288 --> 00:11:52,626
is William, the other

165
00:11:52,648 --> 00:11:56,354
one is Jennifer. So let's request for a topic and these approve

166
00:11:56,402 --> 00:11:57,750
with the other user.

167
00:12:00,890 --> 00:12:04,982
Go to dev say let's say test

168
00:12:05,116 --> 00:12:09,020
topic for demo conf

169
00:12:11,390 --> 00:12:15,734
we can mention a topic description topics

170
00:12:15,782 --> 00:12:19,718
for demo and we could also add some text for

171
00:12:19,744 --> 00:12:23,006
the approver to know what is these topic about and why do

172
00:12:23,028 --> 00:12:27,738
we need that topic?

173
00:12:27,834 --> 00:12:33,040
Need needed for demo

174
00:12:35,570 --> 00:12:39,962
we can see our topic request topic for democonf.

175
00:12:40,106 --> 00:12:43,634
Let's if we go to approve requests, then we should

176
00:12:43,672 --> 00:12:46,886
be able to see it in the last one. So here is the

177
00:12:46,908 --> 00:12:51,480
topic request. Let's go to view that and

178
00:12:51,930 --> 00:12:56,070
approve the request. And if you go to topics

179
00:12:57,450 --> 00:13:00,874
search for conf, we should be seeing the

180
00:13:00,992 --> 00:13:04,726
topic. Now that we have seen this topic creation,

181
00:13:04,838 --> 00:13:08,106
let's get a consumer access on it. Usually there

182
00:13:08,128 --> 00:13:11,946
would be multiple applications producing and consuming from the Kafka topics.

183
00:13:12,058 --> 00:13:15,962
Now these applications can be owned by different teams

184
00:13:16,106 --> 00:13:19,422
and these consumers teams would have to request for read access

185
00:13:19,476 --> 00:13:23,122
on the topics. If this process is not

186
00:13:23,176 --> 00:13:26,766
automated, it could take ages to get approvals and it's

187
00:13:26,798 --> 00:13:30,290
very hard to track what's actually happening in the background.

188
00:13:30,950 --> 00:13:34,590
In claw, any team can view a topic and

189
00:13:34,680 --> 00:13:38,278
request for access on it. It's the topic owner team

190
00:13:38,364 --> 00:13:42,322
who actually decides to approve or decline the request.

191
00:13:42,466 --> 00:13:46,502
Now note that claw masks the ACL information for

192
00:13:46,556 --> 00:13:50,966
other teams. Only the owner teams can view the acls

193
00:13:50,998 --> 00:13:54,630
like IP addresses or sfls or the principals.

194
00:13:54,790 --> 00:13:58,298
This is an added security clause in the demo here.

195
00:13:58,384 --> 00:14:01,918
William requests for a consumer ACL on a topic which is actually owned by

196
00:14:01,924 --> 00:14:05,070
a different team. And a member of that team

197
00:14:05,140 --> 00:14:08,826
is going to approve the request on approval. ACL is directly

198
00:14:08,858 --> 00:14:12,750
created on the topic, which means the relevant application can

199
00:14:12,820 --> 00:14:16,306
already start consuming from the topic. Now let's get

200
00:14:16,328 --> 00:14:19,422
into the demo. And for these demo purpose,

201
00:14:19,486 --> 00:14:22,354
I have moved Jennifer to a different team.

202
00:14:22,552 --> 00:14:26,260
We can see that here. Jennifer now belongs to Devrel team.

203
00:14:28,090 --> 00:14:31,970
So let's get into the topic. If you go to subscriptions,

204
00:14:32,130 --> 00:14:36,066
currently there are no subscriptions on it, I will request for a consumer ACL

205
00:14:36,098 --> 00:14:40,300
on it. Go to consumer and then

206
00:14:41,230 --> 00:14:50,926
consumer ACL access now

207
00:14:50,948 --> 00:14:54,650
that the request is created. If we come to approve requests

208
00:14:54,730 --> 00:14:57,886
from the topic owner team, if we see in the

209
00:14:57,908 --> 00:15:01,646
acls, we should

210
00:15:01,668 --> 00:15:05,234
be seeing this request. We can view it and

211
00:15:05,272 --> 00:15:07,060
this is the ACL access.

212
00:15:08,870 --> 00:15:10,850
Now let's approve this request.

213
00:15:12,710 --> 00:15:17,142
Now that the request is approved, let's see these

214
00:15:17,196 --> 00:15:18,070
topic.

215
00:15:22,730 --> 00:15:25,526
We can see there is one consumer access on it.

216
00:15:25,628 --> 00:15:28,886
So we have now created the topic and also provided a consumer

217
00:15:28,918 --> 00:15:32,486
access. Schemas are created for events

218
00:15:32,518 --> 00:15:36,426
or measures now. They provide a good structure to the event.

219
00:15:36,608 --> 00:15:40,074
In Kafka projects, it is very much needed to

220
00:15:40,112 --> 00:15:43,694
define these schemas in the initial stage of the project now,

221
00:15:43,732 --> 00:15:46,922
else it would be hard to get things in the right direction.

222
00:15:46,986 --> 00:15:50,346
As these project grows, claw relies on the rest API

223
00:15:50,378 --> 00:15:54,222
of the schema HT server for all of its API operations.

224
00:15:54,366 --> 00:15:57,662
Clause uses the concept of a team for schema ownership

225
00:15:57,726 --> 00:16:01,426
and management where the topic owner team requests a

226
00:16:01,448 --> 00:16:04,994
schema for a specific topics and the team that

227
00:16:05,032 --> 00:16:08,750
owns the topic is responsible for making the final decision

228
00:16:08,830 --> 00:16:13,122
on any schema related request, such as approving or declining

229
00:16:13,186 --> 00:16:17,086
the request. Now claw enforces these topic naming

230
00:16:17,138 --> 00:16:20,598
strategy to measures. Only one schema

231
00:16:20,694 --> 00:16:24,746
is applied per topic which uses the topic name

232
00:16:24,848 --> 00:16:28,406
to identify the schema. Subject used for the schema

233
00:16:28,438 --> 00:16:32,330
lookups now clause supports Aiven, scarapace and also

234
00:16:32,400 --> 00:16:35,342
confluent schema registry in the demo.

235
00:16:35,396 --> 00:16:39,246
Here, William requests for a schema on the topic which is owned by

236
00:16:39,268 --> 00:16:43,086
them. Request is validated and stored, and the

237
00:16:43,108 --> 00:16:46,514
other user, who actually belongs to the same team is going to

238
00:16:46,552 --> 00:16:50,366
approve on approval. Schema is directly created on the subject.

239
00:16:50,478 --> 00:16:54,530
Now let's get into the demo. To request for schema on the topic,

240
00:16:55,690 --> 00:16:59,270
go to the topic and schema tab. There are no schemas here.

241
00:16:59,420 --> 00:17:02,870
Request a new schema, select dev

242
00:17:03,020 --> 00:17:04,710
upload a new schema.

243
00:17:08,750 --> 00:17:11,130
Okay, so we have now selected a schema.

244
00:17:17,150 --> 00:17:20,842
Now that we have submitted a request, let's go to the other user.

245
00:17:20,986 --> 00:17:24,542
The schemas tab you can see already

246
00:17:24,596 --> 00:17:28,846
the request is waiting. Let's approve it so

247
00:17:28,868 --> 00:17:32,366
we can see now the schema exists. Promotion is

248
00:17:32,388 --> 00:17:35,390
a key feature of claw that improves governance,

249
00:17:35,470 --> 00:17:39,294
administration, and control of the topics. Now, with topic

250
00:17:39,342 --> 00:17:43,342
promotion, a topic can be initially created in the lowest environment

251
00:17:43,406 --> 00:17:46,958
and then promoted to next environments as needed. Now, once a

252
00:17:46,984 --> 00:17:50,680
topic is created in the base environments, you can promote it.

253
00:17:51,530 --> 00:17:55,606
Now, this will create a promotion request that your teammates can

254
00:17:55,708 --> 00:17:59,366
review, approve, or decline the topic. Overview will

255
00:17:59,388 --> 00:18:03,062
show the environments of the topic where it is configured, including the environment

256
00:18:03,126 --> 00:18:06,618
to which you want to promote the topic. Now, in the demo here,

257
00:18:06,704 --> 00:18:10,346
William requests for the topic promotion request is validated and

258
00:18:10,368 --> 00:18:13,806
stored, and the other user who belongs to the same team

259
00:18:13,908 --> 00:18:18,106
is going to approve the request. On approval, the topic is promoted

260
00:18:18,138 --> 00:18:21,934
to the next environment. Now, you might be wondering if

261
00:18:21,972 --> 00:18:25,230
at all we need two people for these activities.

262
00:18:25,390 --> 00:18:29,470
I would say yes. All these topics,

263
00:18:29,550 --> 00:18:32,862
or acls is nothing but infrastructure, and we are creating

264
00:18:32,926 --> 00:18:36,870
infrastructure as a code and it has to be reviewed by peers.

265
00:18:37,290 --> 00:18:40,502
When I meet people, they keep asking me like is

266
00:18:40,556 --> 00:18:43,826
ownership mandatory on topics or schemas?

267
00:18:44,018 --> 00:18:47,666
Yes, again imagine, without defining ownership,

268
00:18:47,778 --> 00:18:51,066
whom to contact for any issue on the topic or any

269
00:18:51,088 --> 00:18:54,442
permission, usability or documentation and many

270
00:18:54,496 --> 00:18:58,026
more. It is similar to the books in the library where either they

271
00:18:58,048 --> 00:19:01,310
are rented by people or they are living in the library.

272
00:19:01,810 --> 00:19:05,246
Basically this ownership gives responsibility to

273
00:19:05,268 --> 00:19:08,894
them. Let's now get to the demo. We will now

274
00:19:08,932 --> 00:19:12,626
promote the topic from dev to test. If you see here,

275
00:19:12,728 --> 00:19:16,658
this topic is only available in dev. So let's go inside and

276
00:19:16,744 --> 00:19:20,574
click on promote. We want to promote with the same configuration,

277
00:19:20,622 --> 00:19:24,974
what is provided and topic

278
00:19:25,022 --> 00:19:29,126
promotion. Submit a promotion request and

279
00:19:29,228 --> 00:19:32,518
for this demo purpose again I have moved Jennifer back to

280
00:19:32,604 --> 00:19:35,814
the same team. We can see that now

281
00:19:35,852 --> 00:19:38,950
if we come back to approve requests, go to topics.

282
00:19:39,110 --> 00:19:43,114
If we search for conf,

283
00:19:43,312 --> 00:19:47,450
it is waiting for approval, view it and these approve

284
00:19:48,430 --> 00:19:50,910
if we come back to topics.

285
00:19:55,090 --> 00:19:58,270
If you see here, the topic now exists in both the and test.

286
00:19:58,340 --> 00:20:01,630
Disaster recovery is a common phenomenon in

287
00:20:01,700 --> 00:20:05,150
most of the software projects and so is with Kafka.

288
00:20:05,310 --> 00:20:08,370
Now Claw helps immensely in this recovery process.

289
00:20:08,520 --> 00:20:11,682
Claw supports synchronization of the

290
00:20:11,736 --> 00:20:14,586
configuration between claw and Apache,

291
00:20:14,638 --> 00:20:18,182
Kafka and other clusters. Note that it is only

292
00:20:18,236 --> 00:20:21,414
the configuration and not the actual data which

293
00:20:21,452 --> 00:20:25,074
is lying on the topics. Claw allows

294
00:20:25,122 --> 00:20:29,286
for seamless synchronization of topics and acls

295
00:20:29,318 --> 00:20:32,490
from these clusters into your new setup.

296
00:20:34,190 --> 00:20:37,610
If your claw instance is already up and running

297
00:20:37,760 --> 00:20:41,562
or restored from a backup or unaffected by any

298
00:20:41,616 --> 00:20:44,946
cluster outage, you can leverage the synchronized

299
00:20:44,998 --> 00:20:49,546
option to reinstate or update topics and acls

300
00:20:49,658 --> 00:20:52,910
across the clusters, which basically measures

301
00:20:52,990 --> 00:20:57,090
the data consistency and uninterrupted operations.

302
00:20:58,230 --> 00:21:01,714
In the last demo here, superadmin, who has

303
00:21:01,832 --> 00:21:05,726
the sync topics permission, logs in and tries to

304
00:21:05,768 --> 00:21:09,030
fetch the topics from the cluster and sync to claw.

305
00:21:09,930 --> 00:21:13,270
Let's get into the demo now. So, like I mentioned,

306
00:21:13,340 --> 00:21:17,718
synchronization of topics from cluster can be done in two ways,

307
00:21:17,884 --> 00:21:20,780
with the individual options or with the bulk options.

308
00:21:21,150 --> 00:21:25,178
Here you have to select each and every topic one by one,

309
00:21:25,264 --> 00:21:29,018
and in the bulk options you can select all of them in

310
00:21:29,104 --> 00:21:32,974
one go. So here we are seeing about 162

311
00:21:33,012 --> 00:21:36,506
topics which are out of sync, which means they don't exist

312
00:21:36,538 --> 00:21:39,822
in claw. And if you select so, for example,

313
00:21:39,956 --> 00:21:42,820
and we want to assign them to a particular team,

314
00:21:46,710 --> 00:21:51,074
now all the topics are synchronized with

315
00:21:51,272 --> 00:21:55,154
clop. Note that we are not synchronizing any

316
00:21:55,272 --> 00:21:59,330
data which exists on the topics. Rather it is only the topics

317
00:21:59,410 --> 00:22:02,466
configuration. Now all these topics exist in Claw.

318
00:22:02,658 --> 00:22:06,754
So does claw fit into your project? The answer is mostly

319
00:22:06,802 --> 00:22:10,662
yes. Claw is an open source solution based on Apache

320
00:22:10,726 --> 00:22:14,794
license so you can download and deploy in any of your environments for

321
00:22:14,832 --> 00:22:18,474
free. It basically consists of two Java producers and is also

322
00:22:18,512 --> 00:22:22,586
available as docker images, making it production ready and

323
00:22:22,688 --> 00:22:27,014
deployable in high availability mode. Additionally, Claw offers

324
00:22:27,062 --> 00:22:30,854
a rich react based UI which can be accessed when the NPM

325
00:22:30,902 --> 00:22:35,154
assets are built. We are almost at the end of the talk here.

326
00:22:35,192 --> 00:22:38,734
We have a few useful links. If you have any technical

327
00:22:38,782 --> 00:22:42,498
inquiries regarding the project, please feel free to raise a git issue in

328
00:22:42,504 --> 00:22:46,066
the git repository. The project can be downloaded from git or

329
00:22:46,088 --> 00:22:49,810
Docker, or you can also access it from the available releases.

330
00:22:50,390 --> 00:22:53,280
Thank you for watching and hope you enjoyed it.

