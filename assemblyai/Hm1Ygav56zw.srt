1
00:00:39,250 --> 00:00:43,174
Hi everyone, today I'll be sharing about the topic loadtesting for

2
00:00:43,212 --> 00:00:46,866
multiple clients with a pipeline. We recently migrated

3
00:00:46,898 --> 00:00:50,474
our platform to a more modern architecture and has to ensure

4
00:00:50,522 --> 00:00:54,474
that the sizing of the new architecture maintains the same high availability

5
00:00:54,602 --> 00:00:57,950
of the previous one. To do this, we used

6
00:00:58,020 --> 00:01:01,754
load test as code, where we simulated real production

7
00:01:01,802 --> 00:01:04,930
traffic in an isolated nonproduction environment.

8
00:01:06,230 --> 00:01:10,446
Loadtesting in its definition is a type of performance test checking

9
00:01:10,478 --> 00:01:14,206
the upper limits of your system by subjecting it to extreme

10
00:01:14,238 --> 00:01:18,086
load conditions. Here we see a single client making a

11
00:01:18,108 --> 00:01:22,082
request to the server. Using load testing tools,

12
00:01:22,146 --> 00:01:25,794
we can build load test codes and simulate multiple

13
00:01:25,842 --> 00:01:29,702
user requests sent based on a specific load

14
00:01:29,766 --> 00:01:31,770
and timeline that we specify.

15
00:01:32,910 --> 00:01:36,854
There are several load testing tools in the market. In choosing

16
00:01:36,902 --> 00:01:40,378
a tool, we consider the following in making a decision on the

17
00:01:40,384 --> 00:01:44,570
tool that we will use. Most of the tools here, like Jmeter,

18
00:01:44,730 --> 00:01:48,670
locust and Gatling have the same features, so the final

19
00:01:48,740 --> 00:01:52,046
decision can also be a matter of preference, like if

20
00:01:52,068 --> 00:01:55,714
your developers have experience using a particular tool or

21
00:01:55,752 --> 00:01:59,380
are more used to the programming language used by a certain tool.

22
00:02:00,230 --> 00:02:03,438
So for us it was Katlin. And again, I won't

23
00:02:03,454 --> 00:02:06,806
be showing some data on how to select one, but would like to

24
00:02:06,828 --> 00:02:10,246
give an overview of how architects or engineers usually make

25
00:02:10,268 --> 00:02:13,750
this decision based on DevOps considerations.

26
00:02:14,810 --> 00:02:18,442
Now let's get to coding and walking through the components of the load test

27
00:02:18,496 --> 00:02:21,942
code in Gatling. Here we see the configuration

28
00:02:22,006 --> 00:02:25,418
file of Gatling. This is named Gatling Conf.

29
00:02:25,504 --> 00:02:28,714
Inside the conf directory of the code, a few

30
00:02:28,752 --> 00:02:32,954
mandatory lines that we need to update are the simulations and resources

31
00:02:33,002 --> 00:02:36,122
directory. We need to instruct Gatling

32
00:02:36,186 --> 00:02:39,386
about our code structure and where we are expecting it to load

33
00:02:39,418 --> 00:02:41,470
the code to run the tests.

34
00:02:42,690 --> 00:02:46,222
Resources are a set of values that you feed to your simulation

35
00:02:46,286 --> 00:02:50,174
tests. You can set up a scenarios and use values

36
00:02:50,222 --> 00:02:53,426
in any resource file for load tests where you

37
00:02:53,448 --> 00:02:57,186
are simulating different parameter values for a single scenario.

38
00:02:57,378 --> 00:03:01,222
You can also add a resource file for sample data or anything

39
00:03:01,276 --> 00:03:03,720
that you will be using in the simulation code.

40
00:03:04,810 --> 00:03:08,498
Next are simulations. Simulations contain your

41
00:03:08,524 --> 00:03:12,570
load tests. It's commonly coded in Scala, but it's now

42
00:03:12,640 --> 00:03:17,114
available with Java. If you are more familiar with this language in

43
00:03:17,152 --> 00:03:20,346
creating simulation code, let's add this code structure to

44
00:03:20,368 --> 00:03:24,238
a scala file. Diving deeper to

45
00:03:24,244 --> 00:03:27,694
the simulation code, we can add variables that we can use

46
00:03:27,732 --> 00:03:31,166
throughout the simulation. An example here is how we can

47
00:03:31,188 --> 00:03:34,674
assign credentials with value that we feed with

48
00:03:34,712 --> 00:03:38,286
a map. This map can refer back to the resource section

49
00:03:38,318 --> 00:03:41,890
of our code here.

50
00:03:41,960 --> 00:03:45,314
We can also create an HTTP configuration and

51
00:03:45,352 --> 00:03:49,126
store it in a variable. We can also add common headers like

52
00:03:49,148 --> 00:03:51,000
accept and content type.

53
00:03:54,580 --> 00:03:57,888
Next, we need a scenario which is the actual test.

54
00:03:58,054 --> 00:04:01,940
We can feed the credentials, execute an HTTP call,

55
00:04:02,090 --> 00:04:05,904
add headers, and also state the expected result from the API

56
00:04:05,952 --> 00:04:06,550
call.

57
00:04:08,760 --> 00:04:12,400
Finally, we set up the scenario and inject users

58
00:04:12,480 --> 00:04:16,664
based on common injection options where could

59
00:04:16,702 --> 00:04:21,092
be either open or closed. If we have several scenarios,

60
00:04:21,156 --> 00:04:24,440
we can add them in the same file delimited by a comma.

61
00:04:25,820 --> 00:04:29,676
We run the simulation by a shell script that contains instructions to

62
00:04:29,698 --> 00:04:33,276
run the Java program. This will open up a selection for

63
00:04:33,298 --> 00:04:37,404
the number of simulations we have in our directory and allow selection

64
00:04:37,452 --> 00:04:39,490
for which simulation to run.

65
00:04:41,140 --> 00:04:44,588
During the run, the screen will refresh every few seconds

66
00:04:44,684 --> 00:04:47,680
showing the current load test until it completes.

67
00:04:48,980 --> 00:04:53,232
The load test will produce an HTML report that shows various metrics

68
00:04:53,296 --> 00:04:56,260
like number of success versus failed requests,

69
00:04:57,400 --> 00:05:01,104
individual metrics like response times of each request,

70
00:05:01,232 --> 00:05:03,880
execution, success and failures.

71
00:05:04,780 --> 00:05:08,212
It will also show the increase, decrease, or constancy

72
00:05:08,276 --> 00:05:12,184
of the users sent by the load test tool and

73
00:05:12,222 --> 00:05:15,016
its equivalent responses per second.

74
00:05:15,198 --> 00:05:18,792
There's a few more graphs in the HTML report produced by Gatling

75
00:05:18,856 --> 00:05:22,956
that may be helpful in what you're trying to find out. With these data,

76
00:05:23,058 --> 00:05:26,396
you can easily confirm whether something needs to be tweaked in

77
00:05:26,418 --> 00:05:29,120
your infrastructure based on how it responds.

78
00:05:30,580 --> 00:05:33,724
Now, as a platform, we need to be able to simulate

79
00:05:33,772 --> 00:05:36,944
load testing from a lot more clients, even if

80
00:05:36,982 --> 00:05:39,644
one client is sending traffic with a heavy load.

81
00:05:39,772 --> 00:05:43,156
In the real world scenario, we expect the load to come

82
00:05:43,178 --> 00:05:46,420
from a distributed number of clients with different ips.

83
00:05:47,480 --> 00:05:50,800
So the simple solution is putting this in a pipelines.

84
00:05:50,960 --> 00:05:54,484
We simply put our code in GitHub and trigger the pipelines

85
00:05:54,532 --> 00:05:58,376
in parallel to spin up multiple GitHub runners, each with

86
00:05:58,398 --> 00:06:02,084
their own unique server ips, and each one sends

87
00:06:02,132 --> 00:06:05,532
traffic to our platform, thus simulating the real

88
00:06:05,586 --> 00:06:08,940
world scenario more accurately. And that's it.

89
00:06:09,010 --> 00:06:12,412
That's the solution. So before

90
00:06:12,466 --> 00:06:16,344
we mark this as done, I'll quickly walk you through some other integration decisions

91
00:06:16,392 --> 00:06:21,040
we made when putting together the Gatling and GitHub actions architecture.

92
00:06:22,260 --> 00:06:25,680
First is how to programmatically select a simulation.

93
00:06:26,500 --> 00:06:29,776
This one's fairly easy, as there's a config file used by

94
00:06:29,798 --> 00:06:33,364
Gatling where we can force simulation selection by

95
00:06:33,402 --> 00:06:37,236
merely updating it in the config file. This way we

96
00:06:37,258 --> 00:06:40,752
are not prompted with what file to run. It is automatically

97
00:06:40,816 --> 00:06:43,320
selected once we trigger the run command.

98
00:06:44,300 --> 00:06:47,656
The simple trick ips replacing this in the file in one of

99
00:06:47,678 --> 00:06:49,560
the GitHub action steps.

100
00:06:51,820 --> 00:06:55,756
Now we also want to make this reusable across environments in

101
00:06:55,778 --> 00:06:59,790
our platform. We distinguish this with the domain of the API call.

102
00:07:00,240 --> 00:07:04,360
Again the solution to this IPS programmatically update

103
00:07:04,440 --> 00:07:08,640
the environment in the simulation code using a simple said command.

104
00:07:10,180 --> 00:07:13,824
Problems three and four are pretty much similar to the previous ones.

105
00:07:13,942 --> 00:07:17,248
We also do this programmatically by means of an input to the

106
00:07:17,254 --> 00:07:21,428
GitHub actions workflow and updating the values in the Gatling load test

107
00:07:21,514 --> 00:07:24,996
code. The GitHub actions code

108
00:07:25,018 --> 00:07:28,880
of running Gatling is pretty straightforward. We install the dependency

109
00:07:28,960 --> 00:07:33,124
we need, which is Java, then run the load test using the shell provided

110
00:07:33,172 --> 00:07:36,756
script. In terms of output.

111
00:07:36,868 --> 00:07:40,104
Since the reports are produced in the server, in this

112
00:07:40,142 --> 00:07:43,656
case the GitHub runner, we can use a GitHub action to

113
00:07:43,678 --> 00:07:47,732
simply create an artifact to expose this after the workflow runs.

114
00:07:47,876 --> 00:07:51,256
We can add other things here, like putting it in a remote server,

115
00:07:51,368 --> 00:07:55,144
or sending the file in an email or a slack message and that's

116
00:07:55,192 --> 00:07:57,952
it. We ran the code, get a report,

117
00:07:58,086 --> 00:08:02,080
and everything is automated. Some important

118
00:08:02,150 --> 00:08:06,176
things to note the main purpose of load testing is to test the performance of

119
00:08:06,198 --> 00:08:09,936
our platform or even an application. We want to

120
00:08:09,958 --> 00:08:13,812
design load tests such that it can test the upper limits or

121
00:08:13,866 --> 00:08:17,316
close to the breaking point of a system. We can try to adjust the

122
00:08:17,338 --> 00:08:20,704
load accordingly during runs, or determine a base scenario

123
00:08:20,752 --> 00:08:24,196
based on production data. We can also design load

124
00:08:24,228 --> 00:08:27,560
tests to continuously run in a schedule. We can send

125
00:08:27,630 --> 00:08:31,544
heavier traffic on a particular time of day and lower traffic on

126
00:08:31,582 --> 00:08:35,208
off hours. And as all systems go,

127
00:08:35,374 --> 00:08:39,464
this is a personal preference, but going serverless means reducing

128
00:08:39,512 --> 00:08:42,760
the headache that comes with maintaining your own servers.

129
00:08:42,920 --> 00:08:46,492
Use cloud as much as possible and choose the serverless option

130
00:08:46,546 --> 00:08:50,424
when you can. If you want to learn more about this,

131
00:08:50,482 --> 00:08:54,720
I also have a blog created where I further explained how to develop load test

132
00:08:54,790 --> 00:08:58,480
codes. Even if you don't code at all. You can find

133
00:08:58,630 --> 00:09:02,640
this link here, published at developers at Asurion Devcommunity

134
00:09:03,380 --> 00:09:07,148
and that's it. A solution doesn't have to be complicated.

135
00:09:07,324 --> 00:09:11,084
If you know different tools used in DevOps, maybe combining

136
00:09:11,132 --> 00:09:14,696
them can be all ready. Be a solution to a problem that

137
00:09:14,718 --> 00:09:17,690
you're wanting to solve. Just keep things simple.

138
00:09:18,220 --> 00:09:19,940
I hope you enjoyed the presentation.

