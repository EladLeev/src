1
00:00:25,570 --> 00:00:29,042
You. The 2022 accelerate

2
00:00:29,106 --> 00:00:32,550
state of DevOps report. Executive summary.

3
00:00:32,890 --> 00:00:36,054
For the last eight years, we have produced the accelerate state

4
00:00:36,092 --> 00:00:40,118
of DevOps. Hey, Nathan, you know, the report,

5
00:00:40,284 --> 00:00:44,454
it's interesting, but I

6
00:00:44,492 --> 00:00:47,960
had, like, something else in mind that we could do today.

7
00:00:48,570 --> 00:00:51,040
Amanda, what. What is this?

8
00:00:51,490 --> 00:00:55,150
Well, you see, Nathan, one of the key findings from the report

9
00:00:55,220 --> 00:00:58,606
is that context matters. And so I know we

10
00:00:58,628 --> 00:01:02,158
were planning to share the highlights from the 2022

11
00:01:02,244 --> 00:01:06,478
state of DevOps report, but instead, let's bring the report

12
00:01:06,564 --> 00:01:08,560
to life through story time.

13
00:01:09,750 --> 00:01:13,458
Okay. As long as it's clear to you and to me and to

14
00:01:13,624 --> 00:01:17,314
all of you that are watching, this is a completely fictional

15
00:01:17,362 --> 00:01:21,494
story. Oh, absolutely. Right. And we probably

16
00:01:21,612 --> 00:01:24,550
should add some disclaimers for the G lawyers.

17
00:01:25,050 --> 00:01:27,678
Oh, yes, of course. The story. All names,

18
00:01:27,714 --> 00:01:31,174
characters, and incidents portrayed in this production are fictitious.

19
00:01:31,302 --> 00:01:35,094
No identification with actual persons, living or deceased places,

20
00:01:35,142 --> 00:01:38,570
buildings, and products is intended or should be inferred.

21
00:01:40,050 --> 00:01:44,080
And also, no animals were harmed in the telling of this story.

22
00:01:44,850 --> 00:01:49,130
So I was thinking, good stories have a protagonist

23
00:01:49,210 --> 00:01:53,390
can antagonist it, incite action. Then there's conflict,

24
00:01:53,470 --> 00:01:55,810
challenges, and we get to a resolution.

25
00:01:56,390 --> 00:01:59,982
So when you think about that, the protagonist must face obstacles

26
00:02:00,046 --> 00:02:03,794
and setbacks throughout the story before they can reach

27
00:02:03,832 --> 00:02:07,860
their goal. So, for today's story time,

28
00:02:08,470 --> 00:02:11,570
let's talk about log Rochelle,

29
00:02:13,450 --> 00:02:16,726
because, really, isn't it the gift we all received in December of

30
00:02:16,748 --> 00:02:19,914
2021? So let's go back

31
00:02:19,952 --> 00:02:22,726
there, Nathan. Let's go back to December 10,

32
00:02:22,838 --> 00:02:26,826
2021. Where were you when you heard about log for

33
00:02:26,848 --> 00:02:29,340
show? Let's see.

34
00:02:29,790 --> 00:02:33,178
Friday, obviously, I was planning a pretty

35
00:02:33,264 --> 00:02:35,478
lightweight day. You know,

36
00:02:35,664 --> 00:02:39,534
hashtag no deploy Fridays. And it was

37
00:02:39,572 --> 00:02:43,106
December, so I'm sure I had some holiday shopping to

38
00:02:43,128 --> 00:02:46,946
do. So your Friday was

39
00:02:46,968 --> 00:02:50,690
looking like this, but then it changed.

40
00:02:53,350 --> 00:02:56,038
Yeah. In fact, everything did change.

41
00:02:56,204 --> 00:02:58,440
Would you hold my coffee? Sure.

42
00:03:02,170 --> 00:03:05,622
All right, so walk me through it.

43
00:03:05,756 --> 00:03:08,810
You started here. The CVE?

44
00:03:11,150 --> 00:03:15,002
Yeah, kind of. It wasn't really like that,

45
00:03:15,056 --> 00:03:17,850
though. It was more like a roller.

46
00:03:18,190 --> 00:03:21,286
Know, I went through the five stages of grief,

47
00:03:21,398 --> 00:03:24,926
denial. I mean, look, Twitter was the first place I heard

48
00:03:24,948 --> 00:03:27,840
about this issue. Was it really a thing?

49
00:03:28,290 --> 00:03:31,694
And then I had anger shoot it sure is. It's a

50
00:03:31,732 --> 00:03:34,462
real issue. Then began bargaining.

51
00:03:34,526 --> 00:03:37,886
But, I mean, a bug in the logging software?

52
00:03:37,998 --> 00:03:41,522
How bad could it be? Isn't this something that can wait until

53
00:03:41,576 --> 00:03:45,314
Monday? Or better yet, that really quiet week

54
00:03:45,352 --> 00:03:48,898
that's coming up? Can't I just put it on the backlog until, I don't

55
00:03:48,914 --> 00:03:50,790
know, December 27?

56
00:03:52,170 --> 00:03:55,334
But as I dug deeper, depression really started to set

57
00:03:55,372 --> 00:03:58,902
in the issue, and I was talking about it with my colleagues

58
00:03:58,966 --> 00:04:02,746
and part of the team. And I realized that my weekend was about

59
00:04:02,768 --> 00:04:07,030
to take a turn for the worst. Finally, fifth stage

60
00:04:07,190 --> 00:04:10,374
of grief is acceptance. I declared

61
00:04:10,422 --> 00:04:14,346
an incident and myself as the incident commander.

62
00:04:14,538 --> 00:04:17,806
I started our incident response procedures, which include firing up

63
00:04:17,828 --> 00:04:21,646
a slack channel, gathering representatives from each team, working on

64
00:04:21,668 --> 00:04:25,166
all of our applications, and started up some tracking

65
00:04:25,198 --> 00:04:25,970
documents.

66
00:04:28,230 --> 00:04:32,180
So it didn't really look like this single point in time.

67
00:04:32,790 --> 00:04:36,040
It was really kind of more of a

68
00:04:36,970 --> 00:04:40,038
flow. A roller coaster maybe.

69
00:04:40,204 --> 00:04:43,606
It was definitely a roller coaster like that. So the next thing

70
00:04:43,628 --> 00:04:47,298
I did, well, I picked up my phone to call my family

71
00:04:47,484 --> 00:04:52,394
and let them know that another Cve was

72
00:04:52,432 --> 00:04:55,946
going to change virtually everything

73
00:04:56,128 --> 00:04:59,322
about my plans for the weekend. We needed a plan,

74
00:04:59,456 --> 00:05:02,298
and so I went with one of my favorite tools,

75
00:05:02,474 --> 00:05:06,378
the Uda loop. Do you know the Uda loop?

76
00:05:06,554 --> 00:05:10,698
Can you remind me? I always forget what the second o stands,

77
00:05:10,874 --> 00:05:13,902
right? Uda loop. Observe,

78
00:05:14,046 --> 00:05:16,340
orient, decide and act.

79
00:05:17,510 --> 00:05:21,470
We observed that there was a vulnerability. Next, we had to orient

80
00:05:21,630 --> 00:05:25,326
which of our production systems were going to be impacted

81
00:05:25,358 --> 00:05:28,886
or were currently impacted. Then we had to decide what we

82
00:05:28,908 --> 00:05:32,534
were going to do. Well, actually, that was the easiest part. We were

83
00:05:32,572 --> 00:05:36,614
going to upgrade log per j to remediate this vulnerability and

84
00:05:36,652 --> 00:05:40,050
then act. That's the last step we get the team to work.

85
00:05:40,140 --> 00:05:43,242
Of course, it is a loop. So we act and then we go back through

86
00:05:43,296 --> 00:05:47,002
the loop. All right, so how many

87
00:05:47,056 --> 00:05:50,214
production systems were impacted? Oh, yeah, our production system.

88
00:05:50,272 --> 00:05:53,040
So let's see, there was one, two,

89
00:05:54,130 --> 00:05:57,994
about 400 different production applications

90
00:05:58,122 --> 00:06:02,174
that were impacted, and most of them were going

91
00:06:02,212 --> 00:06:05,922
to be impacted by this vulnerability. We thought, wow,

92
00:06:06,056 --> 00:06:09,342
so this was a gift. It was like 400 gifts,

93
00:06:09,406 --> 00:06:13,730
right? So how long did it take you to assess 400

94
00:06:13,800 --> 00:06:17,782
production systems? Oh, yeah, it took about two

95
00:06:17,836 --> 00:06:20,898
minutes. We just did some querying through our s bombs,

96
00:06:20,994 --> 00:06:24,834
our software bill of materials, to find out which would be impacted.

97
00:06:24,962 --> 00:06:28,970
It was pretty easy, really. I mean, that is

98
00:06:29,040 --> 00:06:32,234
amazing. Then what did you do next?

99
00:06:32,432 --> 00:06:36,294
Yeah, sorry, I wish it was that amazing. S bombs

100
00:06:36,342 --> 00:06:40,310
are pretty awesome, but honestly, we haven't

101
00:06:40,390 --> 00:06:44,026
deployed them everywhere. There's maybe one application that's

102
00:06:44,058 --> 00:06:47,370
not yet in production, but we have a good s bomb for that, don't worry.

103
00:06:47,530 --> 00:06:51,658
So what really happened is we had to manually

104
00:06:51,754 --> 00:06:55,054
inspect all 400 of those applications, which meant

105
00:06:55,102 --> 00:06:59,054
calling in subject matter experts from each of those applications

106
00:06:59,102 --> 00:07:02,690
and asking them to do some work over the weekend.

107
00:07:03,190 --> 00:07:04,740
But by Monday morning,

108
00:07:06,170 --> 00:07:10,018
we'd identified two applications that were the most critical.

109
00:07:10,194 --> 00:07:12,680
We knew we needed to fix those.

110
00:07:14,250 --> 00:07:17,926
Know, Nathan, I've got to tell you, I love the jokes. The way

111
00:07:17,948 --> 00:07:21,126
you're laying it in there. And I'm curious if you were telling

112
00:07:21,158 --> 00:07:23,420
jokes like this when you were going through this.

113
00:07:24,110 --> 00:07:27,930
So which two applications were the most critical?

114
00:07:28,350 --> 00:07:31,500
Well, first, it was no laughing matter for sure.

115
00:07:31,950 --> 00:07:35,438
But the two most critical applications that we knew we needed to

116
00:07:35,444 --> 00:07:39,134
fix were our order management system. These system has

117
00:07:39,172 --> 00:07:42,798
been around forever. It's truly the heart of our business.

118
00:07:42,964 --> 00:07:47,380
If it's offline, customers can't buy anything and we can't ship anything.

119
00:07:47,830 --> 00:07:51,394
And the other system that was top of mind was

120
00:07:51,432 --> 00:07:54,962
our ecommerce site. This is the face of the business.

121
00:07:55,016 --> 00:07:59,162
It's where our customers come to purchase things. So if it's downed

122
00:07:59,246 --> 00:08:02,790
or not working, we can't serve any of our customers.

123
00:08:02,940 --> 00:08:06,962
So our two applications, the order management system and our ecommerce

124
00:08:07,026 --> 00:08:10,266
front end. All right,

125
00:08:10,448 --> 00:08:13,914
so I'm going to say let's start with

126
00:08:13,952 --> 00:08:17,386
discussing the ecommerce website. I expect it was easier to

127
00:08:17,408 --> 00:08:20,540
tackle that than the order management system since

128
00:08:21,550 --> 00:08:25,694
it was older and the website is newer. And also

129
00:08:25,892 --> 00:08:29,214
since an order starts, there seems like a great place to go

130
00:08:29,252 --> 00:08:32,442
next. So can you tell me about the ecommerce website?

131
00:08:32,596 --> 00:08:36,306
Yeah, you're totally right. It is a good place for us to start.

132
00:08:36,408 --> 00:08:40,178
As you mentioned, it's the front end and the application itself

133
00:08:40,264 --> 00:08:43,010
was built using microservices.

134
00:08:43,750 --> 00:08:46,450
So maybe it's the right place to go.

135
00:08:46,600 --> 00:08:50,482
But as it turns out, we actually did not have an easy resolution

136
00:08:50,546 --> 00:08:53,878
for the website. You see, decisions were made years ago.

137
00:08:54,044 --> 00:08:57,706
These decisions came back to haunt us. When we built

138
00:08:57,728 --> 00:09:01,402
these site several years ago, our team didn't actually have

139
00:09:01,456 --> 00:09:05,114
any expertise with microservices, but we knew we

140
00:09:05,152 --> 00:09:08,790
wanted a modern architecture. And a modern architecture

141
00:09:08,870 --> 00:09:12,366
requires microservices. So what did we

142
00:09:12,388 --> 00:09:15,694
do? Easy. We hired in some

143
00:09:15,732 --> 00:09:18,986
consultants and a vendor to help build and ship

144
00:09:19,018 --> 00:09:22,302
the site. Ultimately, we paid

145
00:09:22,356 --> 00:09:25,922
for functionality, not knowledge or

146
00:09:25,976 --> 00:09:29,854
documentation. Well, I mean, I imagine

147
00:09:29,902 --> 00:09:33,826
at the time this trade off made sense. Bringing in a partner is

148
00:09:33,848 --> 00:09:37,438
an awesome solution when it's done in collaboration with the

149
00:09:37,464 --> 00:09:40,934
organization's team, and then they're upskilled after that

150
00:09:40,972 --> 00:09:44,806
engagement. So do you have access to the code or

151
00:09:44,828 --> 00:09:47,510
do you need to work with that vendor to make these updates?

152
00:09:49,070 --> 00:09:52,746
Well, the website is on our infrastructure and it's in

153
00:09:52,768 --> 00:09:55,910
source code, the microservices.

154
00:09:56,070 --> 00:09:59,626
There are about 27 different microservices that make up this application.

155
00:09:59,728 --> 00:10:02,974
So the code is spread across about

156
00:10:03,012 --> 00:10:07,262
27 different repositories. But since the marketing team has

157
00:10:07,316 --> 00:10:10,282
a UI for adding and modifying, removing,

158
00:10:10,346 --> 00:10:13,598
basically managing the content and the offerings that we have on

159
00:10:13,604 --> 00:10:17,630
the site. We don't really have to touch the code base very frequently.

160
00:10:17,790 --> 00:10:21,106
In fact, we only are putting out changes once or twice a

161
00:10:21,128 --> 00:10:25,066
year. And those updates are each strategically planned.

162
00:10:25,198 --> 00:10:28,406
They take at least two months to get through all of our

163
00:10:28,428 --> 00:10:32,054
manual testing. But we were able to

164
00:10:32,092 --> 00:10:35,686
quickly identify across these 27 where

165
00:10:35,788 --> 00:10:40,106
we had the vulnerability. Unfortunately, that was the only quick

166
00:10:40,288 --> 00:10:43,818
and easy part of remediating this

167
00:10:43,904 --> 00:10:48,154
microservices application. You see, there was no automated build process.

168
00:10:48,352 --> 00:10:51,962
So when we found a log for j that needed putting,

169
00:10:52,106 --> 00:10:56,186
we had to update it and then manually execute those builds.

170
00:10:56,378 --> 00:10:59,822
And these was no testing in place. No automated testing in place.

171
00:10:59,876 --> 00:11:00,670
Anyhow.

172
00:11:02,790 --> 00:11:06,930
Wow, there's a lot to unpack here.

173
00:11:07,000 --> 00:11:10,370
I guess I'm a little bit surprised.

174
00:11:10,710 --> 00:11:14,002
Okay, so you've really only been making

175
00:11:14,056 --> 00:11:18,390
updates to the application a couple of times a year without

176
00:11:18,460 --> 00:11:22,086
any automated build process or testing. I mean,

177
00:11:22,108 --> 00:11:25,686
I can only imagine that the likelihood of failure is going

178
00:11:25,708 --> 00:11:29,046
to be very high. Exactly. We found one

179
00:11:29,068 --> 00:11:32,506
microservice first that had log for J and we tried to upgrade it.

180
00:11:32,608 --> 00:11:36,458
I mean, we upgraded log for J on that microservice and we deployed everything to

181
00:11:36,464 --> 00:11:39,450
a staging environment and everything broke.

182
00:11:40,030 --> 00:11:44,160
It turned out that all of our microservices are very tightly coupled together.

183
00:11:45,250 --> 00:11:49,118
Interesting. So how did you know everything was broken? And I don't know

184
00:11:49,124 --> 00:11:52,606
if I even wanted to ask this question, but how long did it

185
00:11:52,628 --> 00:11:56,722
take you to fix it? Well, we knew everything was broken because

186
00:11:56,776 --> 00:12:00,450
we would deploy it and refresh the site to check

187
00:12:00,520 --> 00:12:04,002
to see if anything was broken. And what we saw was

188
00:12:04,056 --> 00:12:07,570
500. 500 was not the number of orders we received.

189
00:12:07,650 --> 00:12:10,920
Instead, it was the server error code that we got.

190
00:12:11,290 --> 00:12:14,982
So we entered this process of build,

191
00:12:15,116 --> 00:12:18,822
deploy, see it fail. Let's try the next microservice.

192
00:12:18,966 --> 00:12:22,378
It was pretty painful. This does not sound

193
00:12:22,464 --> 00:12:26,010
like a very fun. No,

194
00:12:26,080 --> 00:12:30,242
no. Remember, Amanda, we didn't start even working on these changes until Monday.

195
00:12:30,326 --> 00:12:34,430
It took us the entire weekend to identify which

196
00:12:34,500 --> 00:12:37,550
systems we should prioritize for remediation.

197
00:12:37,970 --> 00:12:41,760
In the end, the teams spent all week

198
00:12:42,130 --> 00:12:45,546
updating and testing those 27 services that

199
00:12:45,588 --> 00:12:48,366
made up our front end website. By Friday afternoon,

200
00:12:48,398 --> 00:12:50,980
though, they were ready to deploy the changes.

201
00:12:51,590 --> 00:12:55,330
All right, so then it's about a week till you had everything fixed.

202
00:12:57,130 --> 00:13:00,866
No. Remember hashtag no deploy

203
00:13:00,898 --> 00:13:04,882
Fridays. So these team was ready on Friday,

204
00:13:05,026 --> 00:13:08,406
but we couldn't deploy. And the changes for

205
00:13:08,428 --> 00:13:11,802
this site, they have to go through a change approval board who

206
00:13:11,856 --> 00:13:15,386
only meets on Tuesdays and Thursdays. Luckily, though, we can call an

207
00:13:15,408 --> 00:13:19,046
emergency cab, especially for high risk

208
00:13:19,078 --> 00:13:22,586
security incidents like this particular one. They agreed

209
00:13:22,618 --> 00:13:26,062
to meet on Monday. So after looking over

210
00:13:26,116 --> 00:13:30,654
all the changes, the change approval board, the cab was

211
00:13:30,692 --> 00:13:34,434
a bit uncomfortable with this deployment. They asked that the development team do

212
00:13:34,472 --> 00:13:38,078
some additional manual testing. And I'll

213
00:13:38,094 --> 00:13:42,078
tell you, it was a good thing too, because one good vulnerability

214
00:13:42,174 --> 00:13:45,974
deserves another. It turns out there were a few releases of

215
00:13:46,012 --> 00:13:49,618
log for J in rapid succession. The cab

216
00:13:49,714 --> 00:13:53,014
suggested building off on any updates to

217
00:13:53,052 --> 00:13:56,898
production until the log for J releases stabilized.

218
00:13:57,074 --> 00:14:00,778
This way we could batch up all of the changes into one

219
00:14:00,864 --> 00:14:03,962
single release. Turns out there were four

220
00:14:04,016 --> 00:14:08,154
updates. The last one wasn't even released until the 20 eigth of

221
00:14:08,192 --> 00:14:11,200
December. Wow.

222
00:14:13,330 --> 00:14:17,278
So 20 plus days. I can totally understand

223
00:14:17,364 --> 00:14:20,334
why the cab made the decision they did,

224
00:14:20,532 --> 00:14:24,020
but I have to tell you,

225
00:14:24,790 --> 00:14:27,954
I'm listening to this and I'm thinking about it and putting myself

226
00:14:28,072 --> 00:14:31,460
in the story and I

227
00:14:31,910 --> 00:14:35,462
just feel a little burnt out. I mean, I imagine your

228
00:14:35,516 --> 00:14:39,014
team was burnt out at the end of this.

229
00:14:39,212 --> 00:14:42,434
Absolutely. Everyone on the ecommerce team was definitely feeling

230
00:14:42,482 --> 00:14:46,502
pretty crispy by that Wednesday morning after

231
00:14:46,556 --> 00:14:49,834
the final deployment. Long hours obviously

232
00:14:49,952 --> 00:14:53,434
contributed to that, as well as the

233
00:14:53,472 --> 00:14:56,794
stress of the vulnerability itself and the

234
00:14:56,832 --> 00:15:00,826
uncertainty of whether the changes would work. But probably one

235
00:15:00,848 --> 00:15:04,126
of the biggest stressors was the heavyweight change approval process.

236
00:15:04,308 --> 00:15:08,446
In the end, it was difficult for the team to understand and assess what

237
00:15:08,468 --> 00:15:11,582
it would take to go from commit to

238
00:15:11,636 --> 00:15:15,140
approved, much less deployed and working.

239
00:15:16,950 --> 00:15:20,114
That sounds rough. So I guess how

240
00:15:20,152 --> 00:15:24,594
has the team fared? Know? I know a

241
00:15:24,632 --> 00:15:27,910
couple months ago we had the OpenSSL Cve.

242
00:15:28,810 --> 00:15:32,102
Was that an easier experience? Have you learned from

243
00:15:32,156 --> 00:15:35,254
this? I mean, the team has definitely learned a lot over

244
00:15:35,292 --> 00:15:38,934
the last year and a half or so. And we

245
00:15:38,972 --> 00:15:42,780
were spared from the OpenSSL CVE because,

246
00:15:43,150 --> 00:15:47,590
well, that team is still on the 1.1 branch of OpenSSL.

247
00:15:47,750 --> 00:15:52,378
So having advanced warning of the pending vulnerability

248
00:15:52,474 --> 00:15:56,238
though did help some. But it also reminded the team

249
00:15:56,324 --> 00:15:59,886
of the progress that we still need to make. This is

250
00:15:59,908 --> 00:16:03,642
a journey. It's true. We all sometimes

251
00:16:03,716 --> 00:16:07,630
need that reminder. Right? So that was a great recap

252
00:16:07,710 --> 00:16:11,102
of these ecommerce team. What about the order management

253
00:16:11,166 --> 00:16:14,866
system? That system you said is the heart of the business.

254
00:16:14,968 --> 00:16:18,550
And I imagine since it's been around forever

255
00:16:19,690 --> 00:16:23,542
that it was even slower to update than the microservices based

256
00:16:23,596 --> 00:16:27,538
front end. Oh yeah, I would see how you would think that. Of course the

257
00:16:27,564 --> 00:16:31,100
OMS is older, it's larger, it follows more of a

258
00:16:31,710 --> 00:16:35,190
macro service than a microservice architectural pattern.

259
00:16:35,270 --> 00:16:39,322
But unlike the e commerce system, the OMS is

260
00:16:39,376 --> 00:16:42,974
something that our internal teams have been actively developing over

261
00:16:43,012 --> 00:16:46,250
the years. In fact, over the previous two years, the OMS

262
00:16:46,330 --> 00:16:50,174
team was able to go from quarterly releases to

263
00:16:50,212 --> 00:16:53,550
deploying updates to the system on a weekly basis.

264
00:16:53,710 --> 00:16:57,918
So in many respects, they were better prepared for log for Shell

265
00:16:58,094 --> 00:17:00,420
than the ecommerce team was.

266
00:17:01,510 --> 00:17:05,550
Wow, that's fantastic. And I love to hear that they've

267
00:17:05,630 --> 00:17:08,966
been iterating and improving. So how did it go?

268
00:17:09,148 --> 00:17:12,694
Well, on Monday morning, the team identified the three components that were

269
00:17:12,732 --> 00:17:16,406
impacted. These upgraded log for J library in one

270
00:17:16,428 --> 00:17:19,754
of the components, and then their continuous integration process

271
00:17:19,872 --> 00:17:23,658
automatically kicked in. A jar fire was built,

272
00:17:23,824 --> 00:17:27,382
automated tests were run. That jar file was automatically

273
00:17:27,446 --> 00:17:31,582
deployed to a test environment where some additional tests were run. These team

274
00:17:31,636 --> 00:17:35,178
took their passing best, their better pipeline.

275
00:17:35,274 --> 00:17:39,294
They took both of those things to the cab for approval and

276
00:17:39,332 --> 00:17:42,346
the deploy was rubber stamp ship it,

277
00:17:42,468 --> 00:17:46,980
they said, and the team did. So wait,

278
00:17:47,510 --> 00:17:51,022
okay, so that is incredible.

279
00:17:51,166 --> 00:17:54,994
But didn't you say that there were these components and they

280
00:17:55,032 --> 00:17:58,386
only updated and shipped one of those components?

281
00:17:58,578 --> 00:18:02,006
Yes, that is true. But the components are build in a way that they

282
00:18:02,028 --> 00:18:05,462
can be independently tested and deployed. And everyone is

283
00:18:05,516 --> 00:18:09,258
comfortable with this because, well, frankly, that's how we've been working

284
00:18:09,344 --> 00:18:11,820
in practice for well over a year now.

285
00:18:13,310 --> 00:18:16,140
Okay, so one down, two to go.

286
00:18:16,750 --> 00:18:20,058
These must have been pretty easy. So this team

287
00:18:20,224 --> 00:18:23,678
had it all fixed by Wednesday? Almost.

288
00:18:23,844 --> 00:18:26,670
I mean, the test failed on the second component.

289
00:18:27,250 --> 00:18:30,634
When the second component was updated and the test ran, these failed.

290
00:18:30,762 --> 00:18:34,482
So it took a while to track down and fix that

291
00:18:34,536 --> 00:18:38,754
bug. So I

292
00:18:38,792 --> 00:18:42,178
feel like you told me once about this team, and they

293
00:18:42,184 --> 00:18:46,354
were the ones that had that habit of prioritizing their

294
00:18:46,392 --> 00:18:49,782
broken builds. Wasn't this the team? Oh, yeah, that's exactly

295
00:18:49,836 --> 00:18:53,174
right. So after the first one was fixed, we split up the team

296
00:18:53,212 --> 00:18:57,014
and said, work on components two and three. When the tests failed on

297
00:18:57,052 --> 00:19:00,582
component two, the entire team swarmed. Let's figure

298
00:19:00,636 --> 00:19:04,154
out what broke these best. And it was a good thing too,

299
00:19:04,192 --> 00:19:07,402
because it took the teams most of the day to actually track

300
00:19:07,456 --> 00:19:10,822
it down. It was kind of a hidden bug. It was elusive,

301
00:19:10,886 --> 00:19:14,346
if you will, but they were ready to deploy by Wednesday

302
00:19:14,378 --> 00:19:18,174
morning. Thursday came around, the third component was updated and

303
00:19:18,212 --> 00:19:21,566
released. My goodness. I have to

304
00:19:21,588 --> 00:19:25,138
say, do they have any open positions on this team? Because it almost

305
00:19:25,304 --> 00:19:28,626
sounds fun, like, I would have enjoyed being a part of this process instead of

306
00:19:28,648 --> 00:19:32,754
something scary. It sounds exciting and thrilling. This has

307
00:19:32,792 --> 00:19:36,626
just been incredible. So I appreciate you sharing all of this

308
00:19:36,648 --> 00:19:40,040
with me, and I think I may be able to help.

309
00:19:41,450 --> 00:19:44,726
Oh, really? So, Amanda, how do we

310
00:19:44,748 --> 00:19:48,090
help the website team have more of an experience

311
00:19:48,240 --> 00:19:50,954
like the order management team in the future.

312
00:19:51,152 --> 00:19:54,650
Well, Dora the Explorer.

313
00:19:55,070 --> 00:19:58,854
No, not that Dora. Oh, the Digital

314
00:19:58,902 --> 00:20:02,560
Operational Resilience act. Not that one.

315
00:20:03,730 --> 00:20:07,434
Oh, I know. The designated outdoor

316
00:20:07,482 --> 00:20:11,262
refreshment area. Nathan, it's not

317
00:20:11,316 --> 00:20:14,818
even that. You know, it does look like they have a lot of

318
00:20:14,824 --> 00:20:18,626
fun in Ohio. Cheers to that. Right. So the

319
00:20:18,648 --> 00:20:22,526
Dora, for our purposes today, is we're talking about the DevOps

320
00:20:22,558 --> 00:20:25,854
research and assessment. Dora is an ongoing

321
00:20:25,902 --> 00:20:29,958
research program that's been around for about eight years. The research program

322
00:20:30,044 --> 00:20:34,066
has primarily been funded by a number of different organizations.

323
00:20:34,098 --> 00:20:37,838
Over those teams. For a few years, the research program was funded

324
00:20:37,954 --> 00:20:41,370
by the organization of that same name, Dora.

325
00:20:41,870 --> 00:20:45,414
Dora was founded by Dr. Nicole Forsgren, Jez Humble,

326
00:20:45,462 --> 00:20:48,998
and Gene Kemp. Then in 2018,

327
00:20:49,094 --> 00:20:52,654
Dora the company, was acquired by Google Cloud.

328
00:20:52,852 --> 00:20:56,366
The Dora team at Google Cloud has continued the research into the

329
00:20:56,388 --> 00:20:59,994
capabilities and practices that predict the outcomes

330
00:21:00,042 --> 00:21:03,906
we consider central to DevOps. The research

331
00:21:04,008 --> 00:21:07,086
has remained platform and tool agnostic.

332
00:21:07,278 --> 00:21:10,674
And personally, it has been an incredible experience to

333
00:21:10,712 --> 00:21:14,030
work with the research team, not only because of the learnings,

334
00:21:14,110 --> 00:21:17,386
but better understanding of the research practice,

335
00:21:17,518 --> 00:21:21,654
the oath, the ethics, and the passion they bring to this body

336
00:21:21,692 --> 00:21:24,758
of work. Yeah, I think it's super cool.

337
00:21:24,844 --> 00:21:29,382
And one of the things that's really important is that focus on capabilities.

338
00:21:29,526 --> 00:21:33,434
In fact, through the research, we're able to investigate those capabilities that

339
00:21:33,472 --> 00:21:37,254
span across technical, process, and cultural

340
00:21:37,302 --> 00:21:40,446
capabilities. And through our predictive analysis, we're able

341
00:21:40,468 --> 00:21:43,642
to show that these capabilities are predictive

342
00:21:43,706 --> 00:21:47,150
of or drive software delivery and operations.

343
00:21:47,490 --> 00:21:51,870
Oh. Which, by the way, predicts better organizational.

344
00:21:52,950 --> 00:21:56,866
Oh. So, Nathan, it's like a maturity model with

345
00:21:56,888 --> 00:21:57,860
a build in.

346
00:21:59,670 --> 00:22:03,582
No, no, Amanda, context matters.

347
00:22:03,726 --> 00:22:07,954
And in fact, there is no one size fits all roadmap

348
00:22:08,002 --> 00:22:12,194
or maturity model for you to follow. You have to understand your team's

349
00:22:12,242 --> 00:22:15,030
context and focus on these right capabilities.

350
00:22:15,450 --> 00:22:19,274
That's right. In previous years, we had

351
00:22:19,312 --> 00:22:23,062
learned that delivery performance drives organizational performance.

352
00:22:23,206 --> 00:22:27,094
But like you said, context matters. Additional context

353
00:22:27,142 --> 00:22:30,730
this year from the findings was that delivery performance

354
00:22:30,810 --> 00:22:34,842
drives.org performance, but only when operational

355
00:22:34,906 --> 00:22:38,334
performance is also high. That's right.

356
00:22:38,372 --> 00:22:42,870
And operational performance, we oftentimes talk about that as reliability.

357
00:22:43,050 --> 00:22:46,382
But reliability itself is a very context

358
00:22:46,446 --> 00:22:49,298
specific thing that's hard to measure. In fact,

359
00:22:49,384 --> 00:22:53,294
reliability itself is a multifaceted measure

360
00:22:53,422 --> 00:22:57,062
of how well a team upholds their commitments to

361
00:22:57,116 --> 00:23:00,738
their customers. And this year, we continued our explorations

362
00:23:00,834 --> 00:23:04,722
into reliability as a factor in that software delivery and operations

363
00:23:04,786 --> 00:23:08,582
performance. We looked at some of those things, like, how does

364
00:23:08,636 --> 00:23:12,150
a team reduce toil? How do they use their reliability

365
00:23:12,310 --> 00:23:16,410
to prioritize or reprioritize the work that they're doing.

366
00:23:16,560 --> 00:23:20,220
And one of the most interesting things that we found there is that

367
00:23:21,010 --> 00:23:25,114
reliability is required. As you said, software delivery

368
00:23:25,162 --> 00:23:28,590
doesn't really predict organizational success without that

369
00:23:28,660 --> 00:23:32,442
operational performance as well. But we also saw that

370
00:23:32,516 --> 00:23:35,954
SRE investment takes time. Teams that are

371
00:23:35,992 --> 00:23:39,214
newly adopting some of these practices or capabilities,

372
00:23:39,342 --> 00:23:42,082
or have only adopted one or two of them,

373
00:23:42,216 --> 00:23:45,654
may see some initial setbacks in their

374
00:23:45,692 --> 00:23:49,414
reliability, but as a team sticks with it, they can

375
00:23:49,452 --> 00:23:52,550
see this curve really start to take effect,

376
00:23:52,700 --> 00:23:56,370
where they will start ramping up their overall reliability.

377
00:23:56,530 --> 00:24:00,570
Investment takes time and practice. This is a journey.

378
00:24:03,150 --> 00:24:06,982
So while it's not a roadmap, these technical

379
00:24:07,046 --> 00:24:10,646
capabilities they're building on one another. Right. What I'm hearing

380
00:24:10,678 --> 00:24:15,070
you say is that teams improve as these get better at additional capabilities.

381
00:24:16,050 --> 00:24:19,454
That's right. And when you look at a number of capabilities together,

382
00:24:19,572 --> 00:24:22,742
this is where you really start to see that multiplicative

383
00:24:22,906 --> 00:24:26,638
effect. So, for example, teams that are embracing

384
00:24:26,734 --> 00:24:30,350
and improving their capability with these technical practices,

385
00:24:30,430 --> 00:24:33,790
like version control and loosely coupled architecture,

386
00:24:33,950 --> 00:24:37,974
these teams are 3.8 times or show 3.8

387
00:24:38,012 --> 00:24:40,710
times higher organizational performance.

388
00:24:42,650 --> 00:24:45,686
And then security is a big part of this as

389
00:24:45,708 --> 00:24:48,754
well. And of course, security fits very

390
00:24:48,812 --> 00:24:52,326
well into our story about log for j. And the truth is we're

391
00:24:52,358 --> 00:24:55,802
all facing similar measures and what were

392
00:24:55,936 --> 00:24:59,626
similar constraints and capabilities? So one of the

393
00:24:59,648 --> 00:25:03,598
things that we looked into this year was supply chain security

394
00:25:03,684 --> 00:25:07,534
and specifically software supply chain security. And we used a number

395
00:25:07,572 --> 00:25:11,294
of different practices to measure that. But what we've seen is

396
00:25:11,332 --> 00:25:14,518
that adoption has already begun. So that's

397
00:25:14,554 --> 00:25:18,100
really good to see. Of course, there's room for lets more.

398
00:25:18,470 --> 00:25:22,194
Another thing that we see is that healthier cultures have a head

399
00:25:22,232 --> 00:25:26,374
start. Culture was one of the top predictors of

400
00:25:26,412 --> 00:25:29,638
whether or not a team was embracing these security

401
00:25:29,724 --> 00:25:30,550
practices.

402
00:25:33,690 --> 00:25:36,470
So when you say healthier cultures,

403
00:25:36,970 --> 00:25:40,262
you're really talking about generative cultures,

404
00:25:40,326 --> 00:25:44,138
right? Characterized by that high trust and free flow of

405
00:25:44,224 --> 00:25:48,214
information. These kind of performance

406
00:25:48,262 --> 00:25:51,614
oriented cultures are more likely to establish those

407
00:25:51,652 --> 00:25:55,450
security practices than those lower trust organizational

408
00:25:55,610 --> 00:25:59,406
cultures. That's right, Amanda. And it turns out that

409
00:25:59,428 --> 00:26:02,686
security also provides some unexpected benefits.

410
00:26:02,788 --> 00:26:06,894
And thinking about the security of your supply chain,

411
00:26:07,022 --> 00:26:10,574
so sure, you're going to have a reduction in security risks,

412
00:26:10,702 --> 00:26:13,922
that's not an unexpected benefit, that's the hoped for

413
00:26:13,976 --> 00:26:17,174
benefit. But better security practices can

414
00:26:17,212 --> 00:26:21,522
also carry additional advantages, such as reducing burnout

415
00:26:21,586 --> 00:26:25,718
on the team. Oh, and there's also a key integration point.

416
00:26:25,884 --> 00:26:29,498
Adoption of the technical aspects of software supply chain security

417
00:26:29,664 --> 00:26:32,698
appears to hinge on the use of good,

418
00:26:32,864 --> 00:26:36,554
continuous integration practices, which provides the

419
00:26:36,592 --> 00:26:40,910
integration platform for many supply chain security practices.

420
00:26:41,250 --> 00:26:45,662
So I guess here again is another example of how capabilities really

421
00:26:45,716 --> 00:26:48,800
interact with each other and build upon each other.

422
00:26:49,330 --> 00:26:52,766
Because when we compared the two continuous

423
00:26:52,798 --> 00:26:56,210
integration and security, we found that the teams

424
00:26:56,870 --> 00:27:00,974
that were above average on both, they had the best overall

425
00:27:01,102 --> 00:27:05,486
organization performance. So having good continuous

426
00:27:05,518 --> 00:27:08,898
integration and good security is a real driver

427
00:27:08,994 --> 00:27:12,438
for your organization. And I

428
00:27:12,444 --> 00:27:15,862
think we saw this in practice as well. Think back to that order

429
00:27:15,916 --> 00:27:20,230
management system team. They had a really good continuous integration practice

430
00:27:20,310 --> 00:27:23,978
on that team. And as a result, these were able to

431
00:27:24,144 --> 00:27:28,294
assess really how is this updated

432
00:27:28,342 --> 00:27:30,720
library going to impact these application.

433
00:27:31,170 --> 00:27:34,814
The continuous integration was building and running tests and building

434
00:27:34,932 --> 00:27:38,638
their confidence, whereas the website team, without any

435
00:27:38,724 --> 00:27:41,614
continuous integration to speak of,

436
00:27:41,732 --> 00:27:44,370
they had to do everything manually.

437
00:27:44,950 --> 00:27:49,006
Right. It's interesting because in both of these cases, they had change approval

438
00:27:49,038 --> 00:27:52,910
boards, but on one side, you have this kind of mysterious,

439
00:27:52,990 --> 00:27:56,742
spooky can that just is blocking all of your changes.

440
00:27:56,876 --> 00:27:59,958
Right. They don't appear out

441
00:27:59,964 --> 00:28:04,614
of nowhere, but maybe there's more for us to think about their

442
00:28:04,652 --> 00:28:07,598
role and how they show up in our organization,

443
00:28:07,794 --> 00:28:10,746
who's on it, how many people are on it,

444
00:28:10,928 --> 00:28:14,506
who gets the final say, and what happens if

445
00:28:14,528 --> 00:28:18,234
that person goes on vacation? So I think when

446
00:28:18,272 --> 00:28:22,042
we formed, we also look at maybe like, when was it formed?

447
00:28:22,106 --> 00:28:25,790
Why was it formed? How have things changed since these?

448
00:28:25,940 --> 00:28:29,840
And does our oversight need to change as well? I think we see

449
00:28:30,450 --> 00:28:34,670
the OMS team clearly had a very different experience

450
00:28:34,740 --> 00:28:37,842
with their can. And I'm going to guess that it has changed over

451
00:28:37,896 --> 00:28:40,626
time where the website team,

452
00:28:40,728 --> 00:28:43,220
perhaps it wasn't the case.

453
00:28:44,230 --> 00:28:47,750
I've heard of a story where after process changes,

454
00:28:47,900 --> 00:28:51,110
the can is no longer on the critical path.

455
00:28:52,970 --> 00:28:57,042
They only deal with those outlying challenges,

456
00:28:57,186 --> 00:29:01,018
and as a result, deployment frequency increased 800

457
00:29:01,104 --> 00:29:05,194
x. Yeah, it is really startling to see

458
00:29:05,232 --> 00:29:08,826
that type of improvement. I have worked with a team that saw exactly

459
00:29:08,928 --> 00:29:12,062
those results. But you're right. In each of these

460
00:29:12,116 --> 00:29:15,626
takes, both teams had to go through the cab, the change approval

461
00:29:15,658 --> 00:29:19,610
board. It is really that demonstration of why context

462
00:29:19,690 --> 00:29:22,758
matters so much. Amanda,

463
00:29:22,794 --> 00:29:26,370
remember, we are just talking about two

464
00:29:26,520 --> 00:29:30,450
of the 400 applications that needed updating.

465
00:29:31,350 --> 00:29:34,910
There were a lot of meetings, negotiations, blood,

466
00:29:34,990 --> 00:29:38,214
sweat teams. All that went into getting

467
00:29:38,252 --> 00:29:41,702
the rest of the fleet updated. Oh, there were also

468
00:29:41,756 --> 00:29:45,346
spreadsheets. Lots and lots of spreadsheets.

469
00:29:45,538 --> 00:29:49,126
But in short, it was a very long tail to get everything

470
00:29:49,308 --> 00:29:53,126
fully up to date. I might not have wanted that round

471
00:29:53,158 --> 00:29:56,394
for the whole journey, but you know my love for spreadsheets. So thank you

472
00:29:56,432 --> 00:30:01,454
for letting me know about that. All right, so tell

473
00:30:01,492 --> 00:30:04,990
me about. Whoa, Amanda, this is

474
00:30:05,060 --> 00:30:07,690
too small. I can't read anything. That's.

475
00:30:07,850 --> 00:30:11,230
Hmm. Maybe you need new glasses or. Let me

476
00:30:11,300 --> 00:30:14,314
zoom in a little bit for. Oh, thank you.

477
00:30:14,372 --> 00:30:18,670
So that previous chart was a bunch of the capabilities

478
00:30:18,750 --> 00:30:22,642
that we've investigated as part of the research. And here we are zoomed in

479
00:30:22,696 --> 00:30:26,754
on a couple of those capabilities. For example, continuous integration

480
00:30:26,802 --> 00:30:31,058
and loosely coupled architecture. We can see that these capabilities

481
00:30:31,154 --> 00:30:34,578
drive better security practices. Our culture

482
00:30:34,674 --> 00:30:38,582
also drives better security practices. And those security practices

483
00:30:38,646 --> 00:30:41,574
and culture together can help reduce burnout.

484
00:30:41,702 --> 00:30:45,370
They can help reduce the errors that we see in our system

485
00:30:45,520 --> 00:30:48,826
and lead to a bunch of other really interesting

486
00:30:48,928 --> 00:30:52,606
outcomes. So when you think about how to apply the research

487
00:30:52,708 --> 00:30:56,702
to your own team and your own organization, the idea

488
00:30:56,756 --> 00:31:00,526
is that you start with the outcomes that you want to improve and

489
00:31:00,548 --> 00:31:04,226
then work backwards to find the capabilities where you need to

490
00:31:04,248 --> 00:31:07,954
get better. And the idea then is to understand

491
00:31:08,152 --> 00:31:11,950
which capability is holding us back, and let's make can investment

492
00:31:12,030 --> 00:31:14,370
on improving that capability.

493
00:31:19,290 --> 00:31:22,566
All right, so we had zoomed in, and thank you

494
00:31:22,588 --> 00:31:26,134
for kind of explaining how we can look at this and how to move

495
00:31:26,252 --> 00:31:29,498
through it. So now I kind of zoomed back out so we could view

496
00:31:29,584 --> 00:31:31,610
all of the capabilities,

497
00:31:32,590 --> 00:31:36,730
but I would say we've got all this potential

498
00:31:37,070 --> 00:31:40,394
of things that we could change. What's important is

499
00:31:40,432 --> 00:31:43,718
that we remember to not boil the ocean.

500
00:31:43,814 --> 00:31:47,754
Right. We can't go do all of these things tomorrow. You've inspired

501
00:31:47,802 --> 00:31:50,606
me, Nathan. I want to go do that. I want to be on that team.

502
00:31:50,708 --> 00:31:54,554
But the truth of the matter is that to really

503
00:31:54,612 --> 00:31:58,302
affect change in our team, we cannot change it overnight.

504
00:31:58,446 --> 00:32:01,746
We have to remember that it's an investment and we

505
00:32:01,768 --> 00:32:05,410
should start out slow and that really we're going to reach

506
00:32:05,480 --> 00:32:08,886
an inflection point where we start to see that improvement. But there

507
00:32:08,908 --> 00:32:12,166
might be some pain along the way, and we really need to support one

508
00:32:12,188 --> 00:32:15,430
another through that j curve that you showed us earlier.

509
00:32:15,770 --> 00:32:19,850
Absolutely. And it is team specific that

510
00:32:19,920 --> 00:32:23,082
order management system team, they still have

511
00:32:23,136 --> 00:32:27,142
areas to improve, but they're different areas than what these ecommerce

512
00:32:27,206 --> 00:32:30,682
team has to improve. So you cannot use this as a roadmap,

513
00:32:30,746 --> 00:32:34,314
but you can use it to help identify which capabilities

514
00:32:34,362 --> 00:32:37,578
are holding our team back and then commit

515
00:32:37,674 --> 00:32:41,630
to addressing and improving those capabilities and watching

516
00:32:41,700 --> 00:32:44,866
as your outcomes know.

517
00:32:44,888 --> 00:32:48,734
Nathan, I just realized there's

518
00:32:48,782 --> 00:32:52,258
one thing that we didn't do today. Oh, what's that?

519
00:32:52,424 --> 00:32:56,018
Well, we forgot to introduce. So I'm Amanda

520
00:32:56,034 --> 00:32:59,910
Lewis. I'm a developer advocate with Google Cloud, focused on

521
00:32:59,980 --> 00:33:03,346
the Dora research program. Hi. And I'm

522
00:33:03,378 --> 00:33:06,994
Nathan Harvey. I'm also a developer advocate focused on the Dora

523
00:33:07,042 --> 00:33:10,918
research program and helping teams improve using the insights

524
00:33:10,934 --> 00:33:12,940
and findings from the research itself.

525
00:33:14,670 --> 00:33:18,202
One of my favorite parts about my role as a Dora advocate is

526
00:33:18,256 --> 00:33:21,578
working with the community. And so back in September, when we

527
00:33:21,584 --> 00:33:25,674
launched the 2022 report, we also launched a community of practice

528
00:33:25,722 --> 00:33:29,102
around Dora. So I will hope that all of you out there

529
00:33:29,156 --> 00:33:31,998
will come and join us. If you go to Dora community,

530
00:33:32,164 --> 00:33:36,126
you can join the Google Group, and that will give you the ability to join

531
00:33:36,158 --> 00:33:39,682
in on some asynchronous conversations that are going on and also

532
00:33:39,736 --> 00:33:44,450
invitations to our open discussions that we're having periodically.

533
00:33:45,270 --> 00:33:48,674
And Nathan, do you want to share about maybe some experiences

534
00:33:48,722 --> 00:33:51,986
you've had in some of our lean coffee discussions or topics

535
00:33:52,018 --> 00:33:55,586
and things that we've been having with the. You know, my favorite

536
00:33:55,618 --> 00:33:59,026
part about these discussions is that we really cater

537
00:33:59,058 --> 00:34:02,698
them to the people that show up each time for the discussions. That's one of

538
00:34:02,704 --> 00:34:06,346
the benefits of using the lean coffee format. But the

539
00:34:06,368 --> 00:34:10,186
other thing that is really beneficial is that we don't always know

540
00:34:10,288 --> 00:34:13,806
exactly where the conversation will go. I like to say that we need

541
00:34:13,828 --> 00:34:17,146
to be prepared to be surprised. And so we've

542
00:34:17,178 --> 00:34:20,526
had really interesting conversations and perspectives from

543
00:34:20,628 --> 00:34:24,206
practitioners that are putting these capabilities to work. But we're

544
00:34:24,238 --> 00:34:27,246
also hearing from leaders and importantly,

545
00:34:27,358 --> 00:34:30,370
researchers, both the researchers on the Dora project,

546
00:34:30,520 --> 00:34:34,126
but also other researchers across the software delivery

547
00:34:34,238 --> 00:34:37,414
field, the developer productivity field, and so

548
00:34:37,452 --> 00:34:40,774
forth. So it truly is a community where we can bring

549
00:34:40,812 --> 00:34:44,306
together practitioners, leaders, and researchers

550
00:34:44,418 --> 00:34:48,258
to help us all improve. Absolutely. And I think as we've

551
00:34:48,274 --> 00:34:52,140
seen, Nathan, as we're working with teams and helping them apply and use the research,

552
00:34:52,670 --> 00:34:55,802
we realized that we really needed to connect people

553
00:34:55,856 --> 00:34:59,386
together because you are the experts in your business and you can bring that

554
00:34:59,408 --> 00:35:02,220
experience and how you've applied it together.

555
00:35:02,530 --> 00:35:05,774
And I have learned so much since September. It's been

556
00:35:05,812 --> 00:35:09,774
absolutely incredible. Absolutely. So thank you all so much

557
00:35:09,812 --> 00:35:13,582
for tuning in to our presentation today. We hope that we will

558
00:35:13,636 --> 00:35:17,630
see you on the Dora community. And before

559
00:35:17,700 --> 00:35:21,674
you go, make sure you grab these URL or QR

560
00:35:21,722 --> 00:35:25,058
code so that you can download your very own copy

561
00:35:25,194 --> 00:35:28,854
of the 2022 accelerate state of DevOps report.

562
00:35:28,972 --> 00:35:32,934
Now, Amanda, can you give me that report back so I can continue on

563
00:35:32,972 --> 00:35:35,720
with my reading aloud of the report?

564
00:35:36,250 --> 00:35:40,120
Okay. I like reading it, but. All right, you can have it.

565
00:35:40,810 --> 00:35:43,862
All right, well, maybe we'll save that for another

566
00:35:43,916 --> 00:35:46,102
time. Thank you so much, everyone. Thanks,

567
00:35:46,156 --> 00:35:47,030
Amanda.

