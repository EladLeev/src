1
00:01:42,590 --> 00:01:43,140
You.

2
00:01:51,540 --> 00:01:55,244
Good morning. Good afternoon everyone. Welcome in this session

3
00:01:55,292 --> 00:01:59,244
of Conf 42. Today, I'm excited to delve

4
00:01:59,292 --> 00:02:03,184
with you into increasingly important aspects of our digital world,

5
00:02:03,302 --> 00:02:06,784
container security. As we integrate more with

6
00:02:06,822 --> 00:02:10,496
sophisticated technology into our workflow, understanding and

7
00:02:10,518 --> 00:02:13,972
securing our containers environment has never been more crucial

8
00:02:14,036 --> 00:02:18,136
than today. So join me in this session of cracking the

9
00:02:18,158 --> 00:02:22,644
code of cloud security. We will focus today on protecting containers,

10
00:02:22,772 --> 00:02:26,396
infrastructure and workloads. Let me share with you

11
00:02:26,418 --> 00:02:30,264
a couple of striking statistics

12
00:02:30,392 --> 00:02:33,900
based on Aqua Security report. In 2021,

13
00:02:34,050 --> 00:02:37,312
about 40% of containers images are pulled from public

14
00:02:37,366 --> 00:02:40,668
resources. This fact alone underscores

15
00:02:40,844 --> 00:02:44,608
the far reliance and publicly available

16
00:02:44,774 --> 00:02:47,360
resources in our container ecosystems.

17
00:02:48,020 --> 00:02:51,590
There's a lot of resources out there, but what does it mean for security?

18
00:02:52,360 --> 00:02:56,036
While public resources offers a wealth of

19
00:02:56,058 --> 00:03:00,000
useful tools and efficiency, they can also bring inherent

20
00:03:00,080 --> 00:03:04,090
risk, such as potential vulnerabilities and unvetted content.

21
00:03:05,740 --> 00:03:09,144
Compounding these numbers with

22
00:03:09,182 --> 00:03:12,644
an issue of having 12% of containers

23
00:03:12,692 --> 00:03:16,504
were running as a non root user, which is a

24
00:03:16,542 --> 00:03:20,172
best practice in container security. So we can see that

25
00:03:20,226 --> 00:03:24,520
this is a notable point because running containers as a non root

26
00:03:24,680 --> 00:03:27,976
is a recommended best practice in container security. It significantly

27
00:03:28,008 --> 00:03:32,332
reduced the risk of privileged escalation attacks which can led to unauthorized

28
00:03:32,396 --> 00:03:35,680
access and control over containerized application.

29
00:03:35,830 --> 00:03:39,260
So as we progress today through our presentation,

30
00:03:39,340 --> 00:03:42,756
we'll explore what these statistics mean for

31
00:03:42,778 --> 00:03:46,724
your security posture, the challenges that they present and

32
00:03:46,762 --> 00:03:50,468
the strategies that we can implement to safeguard our containerized application.

33
00:03:50,634 --> 00:03:54,784
So let's dive in and start to unveil the complexity

34
00:03:54,832 --> 00:03:56,070
of container security.

35
00:03:57,800 --> 00:04:01,236
I'm today with you. I'm Fouadmulla. I'm a seasoned cloud security architect

36
00:04:01,268 --> 00:04:04,856
and the lead consultant. I worked with many multinational companies to

37
00:04:04,878 --> 00:04:08,860
secure their workloads and infrastructure, specifically focusing on the cloud

38
00:04:08,930 --> 00:04:12,684
and multi cloud administration. I'm CISM and CISP and

39
00:04:12,722 --> 00:04:16,156
SAS plus certified. Feel free to connect with me

40
00:04:16,178 --> 00:04:20,268
on LinkedIn. I'm happy to share with you thoughts and perspectives

41
00:04:20,444 --> 00:04:23,552
regarding security. Good,

42
00:04:23,606 --> 00:04:27,744
let's start with the agenda. So there will have a couple of main

43
00:04:27,782 --> 00:04:30,740
topics. First of all, introduction,

44
00:04:31,480 --> 00:04:35,552
the background of this presentation and the container security challenges

45
00:04:35,616 --> 00:04:39,088
that we might face that we face inherited from the container

46
00:04:39,104 --> 00:04:42,076
security nature. Cloud containers,

47
00:04:42,128 --> 00:04:46,520
vulnerabilities and container security in the terms of devsecops,

48
00:04:47,660 --> 00:04:50,920
enhancing security and going beyond the defaults.

49
00:04:51,420 --> 00:04:55,324
Also some kind of tools for automated vulnerability management that

50
00:04:55,362 --> 00:04:59,244
we can use and configuration management and network segmentation. A few

51
00:04:59,282 --> 00:05:02,670
points also best practices in container security.

52
00:05:03,200 --> 00:05:07,792
Let's get started first.

53
00:05:07,926 --> 00:05:12,000
Essentially, you don't really need containers to ensure

54
00:05:12,420 --> 00:05:16,396
security of your application. There's plenty of technologies and tools

55
00:05:16,428 --> 00:05:20,432
that you can use. However, by using containers

56
00:05:20,576 --> 00:05:24,324
wisely and many lines under wisely, you can

57
00:05:24,362 --> 00:05:26,790
really enhance your application security.

58
00:05:27,640 --> 00:05:31,152
Containers are not really prerequisites to say for securing

59
00:05:31,216 --> 00:05:35,016
application, but if you use it in a

60
00:05:35,038 --> 00:05:38,724
good manner, you can offer a runtime separation

61
00:05:38,772 --> 00:05:42,264
of your app. On host you can only deploy what you

62
00:05:42,302 --> 00:05:45,976
need. So there is

63
00:05:45,998 --> 00:05:49,396
a smaller attack surface, it's easier

64
00:05:49,428 --> 00:05:52,700
to set up, which means it's easier to patch.

65
00:05:53,520 --> 00:05:57,204
There is a predefined setup, so which can increase also consistency,

66
00:05:57,352 --> 00:06:01,340
which all the security personnel loves as overall

67
00:06:01,420 --> 00:06:05,084
improved security through their isolated nature,

68
00:06:05,212 --> 00:06:08,976
which can help in containing breaches, for example minimizing the

69
00:06:08,998 --> 00:06:12,356
impacts. However, this benefit is only realized if

70
00:06:12,378 --> 00:06:16,052
the containers are managed and configured securely. Adhering to best

71
00:06:16,106 --> 00:06:21,012
practices in containers security also

72
00:06:21,146 --> 00:06:24,736
to say you don't really need advanced security tools

73
00:06:24,768 --> 00:06:28,008
to start with containers. There's a lot of open sources, there's a lot

74
00:06:28,014 --> 00:06:30,808
of technology in there which you can use,

75
00:06:30,974 --> 00:06:34,984
but you really need to consider security to effectively use containers.

76
00:06:35,112 --> 00:06:38,204
Using containers without thinking about security is

77
00:06:38,242 --> 00:06:41,692
a recipe for a disaster. So always

78
00:06:41,746 --> 00:06:45,464
good to understand implement security best practices like let's say images scanning

79
00:06:45,512 --> 00:06:48,684
container isolation list privileges

80
00:06:48,812 --> 00:06:52,896
access zero trust principles are really essential to maintain the

81
00:06:52,918 --> 00:06:56,080
security and the integrity of the containerized environment.

82
00:06:57,220 --> 00:07:01,316
So challenges in container security first of

83
00:07:01,338 --> 00:07:04,244
all, there's a couple of points here, I just state a couple of them.

84
00:07:04,282 --> 00:07:07,824
There's a lot actually. First, the daemon

85
00:07:07,872 --> 00:07:12,060
attack surface. So it's

86
00:07:12,080 --> 00:07:15,848
inherited from the essence of the technology we are using. There is a

87
00:07:15,854 --> 00:07:19,604
potential vulnerability in the containers own systems. It's relatively

88
00:07:19,652 --> 00:07:22,936
a new technology similar to the

89
00:07:22,958 --> 00:07:27,308
virtualization on the VMS and virtual machines, but it's far

90
00:07:27,474 --> 00:07:31,500
behind in regards of vulnerabilities

91
00:07:32,560 --> 00:07:36,152
in this new technology, secrets management.

92
00:07:36,216 --> 00:07:39,568
And here, when I say secrets, I'm not only referring to

93
00:07:39,734 --> 00:07:42,908
credentials, passwords, et cetera, et cetera,

94
00:07:43,084 --> 00:07:47,260
but more also referring to the containers

95
00:07:47,340 --> 00:07:50,644
images itself. This has to be considered as also

96
00:07:50,682 --> 00:07:54,660
as a sensitive, and we'll see this afterwards in a couple of slides.

97
00:07:55,240 --> 00:07:57,860
There's also untrusted content risk.

98
00:07:59,000 --> 00:08:01,380
There's a danger of using, for example,

99
00:08:01,450 --> 00:08:04,040
compromised and vulnerable images.

100
00:08:05,420 --> 00:08:10,472
There's challenges in the growing environment of containers and

101
00:08:10,526 --> 00:08:14,636
also the ephemeral runtimes, which can

102
00:08:14,658 --> 00:08:18,216
have kind of special characteristics in incidence

103
00:08:18,248 --> 00:08:21,288
management and such, also in the lightweight

104
00:08:21,304 --> 00:08:26,796
isolation risks. So this can have also a lot of challenges to

105
00:08:26,818 --> 00:08:30,830
be considered. For example,

106
00:08:31,520 --> 00:08:35,216
when speaking of the daemon, only trusted users should

107
00:08:35,238 --> 00:08:39,780
have access to the API. We have to set also operation system

108
00:08:39,850 --> 00:08:43,472
permissions. We shouldn't expose this API

109
00:08:43,536 --> 00:08:46,896
unless it's really needed and using KLS

110
00:08:46,928 --> 00:08:50,550
and patching the system whenever possible.

111
00:08:51,400 --> 00:08:54,696
There's a couple of challenges actually in tracking and managing this

112
00:08:54,878 --> 00:08:58,916
on a large scale dynamic environment. Special limitation

113
00:08:58,948 --> 00:09:03,160
from WAFS and ids and ips

114
00:09:03,660 --> 00:09:07,372
in this regard, containers offer

115
00:09:07,426 --> 00:09:10,696
relatively weaker, as I mentioned, separation than VM.

116
00:09:10,728 --> 00:09:14,364
So this has to be considered in many scenarios of

117
00:09:14,402 --> 00:09:18,092
breakout. There's also security operations.

118
00:09:18,156 --> 00:09:22,400
Teams need to have some kind of a good pictures of

119
00:09:22,470 --> 00:09:26,444
what threats are going on this dynamic environment. So collaboration

120
00:09:26,492 --> 00:09:30,740
is really important. He has to come to the organizational

121
00:09:32,200 --> 00:09:36,064
culture to be coherent

122
00:09:36,112 --> 00:09:39,510
with this technology and to be empowering the team.

123
00:09:39,960 --> 00:09:43,508
So without help from SEC Ops,

124
00:09:43,684 --> 00:09:47,636
the build process could be really stalled due to allocate undetected

125
00:09:47,668 --> 00:09:51,496
vulnerabilities, since containers in the

126
00:09:51,518 --> 00:09:55,036
nature are ephemeral, meaning that

127
00:09:55,058 --> 00:09:58,124
they quickly spin out and really fast being

128
00:09:58,162 --> 00:10:01,884
destroyed. So it's really hard to detect and monitor changes on

129
00:10:01,922 --> 00:10:05,884
it, especially in complex systems. Also,

130
00:10:06,002 --> 00:10:09,410
it's sharing resources like cpus and then a lot of

131
00:10:10,260 --> 00:10:13,744
resources from the host. So it's really challenging to track,

132
00:10:13,862 --> 00:10:18,496
to have a track of records of what's going on on the physical system in

133
00:10:18,518 --> 00:10:22,404
my opinion to help really the SEC ops to help you look

134
00:10:22,442 --> 00:10:26,416
into the security tools that provide comprehensive visibility without interfering

135
00:10:26,448 --> 00:10:30,432
with your job. So the right tool should give you the sufficient metrics,

136
00:10:30,496 --> 00:10:34,324
numbers, logs that you need to properly monitor

137
00:10:34,372 --> 00:10:37,604
and measure the health. Don't forget

138
00:10:37,652 --> 00:10:41,576
also to observe the network as this is kind of, let's say

139
00:10:41,678 --> 00:10:46,440
no brainer in security and cloud security cloud

140
00:10:46,510 --> 00:10:50,316
containers vulnerabilities are here. Basically it's kind

141
00:10:50,338 --> 00:10:53,020
of a summary. This list can go on and forth.

142
00:10:53,520 --> 00:10:57,320
There's a lot of points that we cloud mention, but here

143
00:10:57,330 --> 00:11:00,608
are a couple of points. So the images images has to

144
00:11:00,614 --> 00:11:03,330
be dealt really as a sensitive information.

145
00:11:05,380 --> 00:11:08,736
These images can, if it's not tracked and scanned, it might

146
00:11:08,758 --> 00:11:12,160
contain vulnerabilities or any outdated components.

147
00:11:13,620 --> 00:11:17,120
Also, if these page images are not regularly updated or scanned,

148
00:11:17,200 --> 00:11:19,780
this can pose a potential security risk.

149
00:11:21,000 --> 00:11:24,212
There is also the insecured containers runtime configuration.

150
00:11:24,356 --> 00:11:28,804
I will touch about this a little bit further, but in essence default configuration

151
00:11:28,852 --> 00:11:32,232
is not secured containers and

152
00:11:32,286 --> 00:11:35,964
misconfiguration is kind of tight. There is no

153
00:11:36,082 --> 00:11:40,424
default by sorry, there's no secure by default setup

154
00:11:40,472 --> 00:11:43,692
in contest, so it has to be looked at from

155
00:11:43,746 --> 00:11:47,168
early stages. Usually we found

156
00:11:47,254 --> 00:11:51,180
vulnerabilities in the network segmentation. This is sometimes forgotten

157
00:11:51,340 --> 00:11:54,736
from the setup containers sharing resources on

158
00:11:54,758 --> 00:11:59,440
the network. So if one compromise, this can be potential

159
00:12:00,900 --> 00:12:04,704
privilege escalation or

160
00:12:04,742 --> 00:12:08,736
a container escape risk. Without request segmentation,

161
00:12:08,768 --> 00:12:13,076
the attacker can potentially gain access to other containers on the host system.

162
00:12:13,258 --> 00:12:17,956
Also the escape vulnerabilities I just mentioned orchestrator

163
00:12:17,988 --> 00:12:21,252
vulnerabilities that the orchestrators like for example kubernetes

164
00:12:21,396 --> 00:12:24,992
can have. Vulnerabilities that if exploited

165
00:12:25,076 --> 00:12:28,508
can really lead to a cluster wide impact. So it can have

166
00:12:28,594 --> 00:12:32,456
really hard and tough implications on your organization.

167
00:12:32,648 --> 00:12:36,296
This includes issues with API configuration and setup

168
00:12:36,328 --> 00:12:40,624
and authentication mechanism. Also sometimes dependencies can

169
00:12:40,662 --> 00:12:44,092
be kind of challenging or a challenging vulnerability.

170
00:12:44,156 --> 00:12:48,064
And container registry there is solution out there so keep

171
00:12:48,102 --> 00:12:51,330
track of what container registry you wish to use.

172
00:12:52,020 --> 00:12:55,296
But it's crucial to use trusted registry and scan the images

173
00:12:55,328 --> 00:12:59,216
for vulnerabilities of course, as well as logging and monitoring

174
00:12:59,248 --> 00:13:02,692
the gaps. Finally, using immutable

175
00:13:02,756 --> 00:13:04,280
and informal nature,

176
00:13:06,540 --> 00:13:09,748
this can pose really vulnerability of incident

177
00:13:09,844 --> 00:13:13,736
investigation and containers might

178
00:13:13,758 --> 00:13:17,580
be terminated and replaced before the investigation can be taken place.

179
00:13:17,650 --> 00:13:22,380
So that has to be in the incidence plan being somehow

180
00:13:22,800 --> 00:13:26,476
tackled as well as with the logging and keeping all the records that

181
00:13:26,498 --> 00:13:28,930
might be needed for such a case.

182
00:13:30,420 --> 00:13:34,480
So let me share with you kind of a little of insights

183
00:13:35,140 --> 00:13:39,248
of a cloud setup regarding contentious. However really

184
00:13:39,334 --> 00:13:43,380
you can use any technology here, I'm referring to the AWS

185
00:13:43,720 --> 00:13:46,630
cloud, but you can use Azure, you can use Google,

186
00:13:47,240 --> 00:13:51,590
all is good. Good to mention a couple of points here.

187
00:13:52,860 --> 00:13:57,000
So for example you can use the code commit

188
00:13:57,980 --> 00:14:01,268
service from AWS, but I really highlight

189
00:14:01,364 --> 00:14:05,016
the use of code guru for tracking

190
00:14:05,048 --> 00:14:09,224
if there's any credentials or any sensitive

191
00:14:09,272 --> 00:14:13,240
information that is embedded in the code. So you can have early stages

192
00:14:13,320 --> 00:14:17,296
check. You can also use tools on

193
00:14:17,318 --> 00:14:20,640
the dev team with the dev team, but this is also kind of a second

194
00:14:20,710 --> 00:14:24,720
or multi layer defense methodology.

195
00:14:26,260 --> 00:14:29,936
I would like to highlight. Well also probably possible to

196
00:14:29,958 --> 00:14:33,076
use the AWS secret manager here. You can see that we are using it

197
00:14:33,098 --> 00:14:36,196
for managing the secrets on the production and on the

198
00:14:36,218 --> 00:14:40,212
environment. Good to mention

199
00:14:40,266 --> 00:14:44,484
as well the use of for example the SAS

200
00:14:44,612 --> 00:14:47,976
scanning. Well there is a lot of technology that here I kept it

201
00:14:47,998 --> 00:14:51,332
open, but for example Dockerfile

202
00:14:51,396 --> 00:14:55,360
lint, it's a rule pays linter for docker files from Red Hat,

203
00:14:55,460 --> 00:14:59,004
can check the syntax and run semantics and check for best

204
00:14:59,042 --> 00:15:03,896
practices. And it's really customized with the Yaml language

205
00:15:03,928 --> 00:15:08,148
so you can just right away use it. Also another smart SaaS

206
00:15:08,184 --> 00:15:11,200
tool can be used is hadulint,

207
00:15:12,020 --> 00:15:16,384
which also you can get access to it. It's available and

208
00:15:16,422 --> 00:15:22,464
it really gives you really good insights regarding

209
00:15:22,512 --> 00:15:25,140
your container or regarding your image.

210
00:15:27,080 --> 00:15:30,548
Also you can have, well obviously you might have

211
00:15:30,714 --> 00:15:34,692
DAS protecting. This is on the interface level so your options

212
00:15:34,746 --> 00:15:38,216
is quite wide and open. And finally use

213
00:15:38,238 --> 00:15:42,440
the identity and access management on your cloud setup. That's kind of no brainer.

214
00:15:43,100 --> 00:15:46,110
And keeping your watch, cloud watch here,

215
00:15:46,560 --> 00:15:50,172
logging and checking all the logs on production and

216
00:15:50,226 --> 00:15:54,636
also as needed on the other environments to

217
00:15:54,658 --> 00:15:57,660
ensure integrity and track of records.

218
00:15:58,720 --> 00:16:00,300
This is in a nutshell.

219
00:16:02,320 --> 00:16:06,464
Typically when you are using cloud and

220
00:16:06,502 --> 00:16:10,312
especially with devsecops, we are in a race

221
00:16:10,476 --> 00:16:15,364
for deployment and for speed of

222
00:16:15,402 --> 00:16:19,376
pushing features. So it's a good practice to use infrastructure

223
00:16:19,408 --> 00:16:22,996
as a code. It can really streamline the process and keep the consistency

224
00:16:23,108 --> 00:16:27,096
in the environment. So how

225
00:16:27,118 --> 00:16:30,872
to enhance the security? Let's go a little bit beyond defaults and

226
00:16:31,006 --> 00:16:35,316
this is let's say a good takeaway from this presentation.

227
00:16:35,428 --> 00:16:38,696
So always the dockers. For example, built in sandboxing

228
00:16:38,728 --> 00:16:42,476
and runtime protection are a very good start. However, it's not a

229
00:16:42,498 --> 00:16:46,220
never complete solution, so always have to work a little bit further.

230
00:16:46,560 --> 00:16:49,728
Always the balance between developer flexibility and the security

231
00:16:49,814 --> 00:16:53,840
on the other hand, so find the right equilibrium between

232
00:16:53,910 --> 00:16:57,680
the ease of the developer and make a robust security protocols.

233
00:16:58,660 --> 00:17:02,844
Finally, managing images with care it's very good to highlight treat containers

234
00:17:02,892 --> 00:17:07,136
images as sensitive data, implement strict

235
00:17:07,168 --> 00:17:11,620
access control, jugular review and scan the content of images.

236
00:17:12,220 --> 00:17:15,636
So also how to enhance the security. Also beyond the default

237
00:17:15,668 --> 00:17:20,184
here I made a kind of like further points that

238
00:17:20,222 --> 00:17:24,004
were good to mention. Always use trusted paste

239
00:17:24,052 --> 00:17:27,756
images. So start with official minimal as

240
00:17:27,778 --> 00:17:31,208
much as possible base images avoid unnecessary packages,

241
00:17:31,304 --> 00:17:34,552
unnecessary tools to reduce the attack surface.

242
00:17:34,696 --> 00:17:38,192
Regularly scan for vulnerabilities so make

243
00:17:38,246 --> 00:17:41,600
this part of the pipeline of deployment and development.

244
00:17:42,100 --> 00:17:45,664
Implement list privileges access this

245
00:17:45,702 --> 00:17:49,452
is kind of essential and

246
00:17:49,526 --> 00:17:52,996
use immutable containers. So containers should be always immutable and

247
00:17:53,018 --> 00:17:56,836
disposable only deployed and they should

248
00:17:56,858 --> 00:18:01,056
not be modified. If any change needed, we replace

249
00:18:01,088 --> 00:18:05,016
the whole containers with a new one. And as much as possible

250
00:18:05,198 --> 00:18:09,236
let's use read only file system. So this will reduce

251
00:18:09,268 --> 00:18:13,044
a lot of potential persistence by malicious

252
00:18:13,092 --> 00:18:16,536
actors. Manage the secrets securely

253
00:18:16,568 --> 00:18:20,044
so use a good tool and good system to handle sensitive data and

254
00:18:20,162 --> 00:18:24,540
never hard code secrets. In containers images

255
00:18:25,040 --> 00:18:28,700
use secure network best practices,

256
00:18:28,860 --> 00:18:32,160
network segmentation and also good to mention

257
00:18:32,230 --> 00:18:35,756
resource limitation. So enforce some limits

258
00:18:35,948 --> 00:18:39,512
on your resources to prevent any DOS

259
00:18:39,596 --> 00:18:43,220
attacks and exhaustion on the system resources

260
00:18:44,760 --> 00:18:48,500
using policies and security context

261
00:18:49,080 --> 00:18:52,384
for example when utilizing orchestrator features like Kubernetes

262
00:18:52,432 --> 00:18:55,704
security context, pod security policies or

263
00:18:55,742 --> 00:18:59,800
equivalent in other orchestrator to enforce these security policies,

264
00:19:00,860 --> 00:19:04,356
use isolation as much as possible, especially when

265
00:19:04,398 --> 00:19:08,252
speaking with sensitive data. For example a strong mechanism can be used.

266
00:19:08,306 --> 00:19:12,156
The GVSR or kata containers can be

267
00:19:12,178 --> 00:19:15,676
really good tools or also you can use

268
00:19:15,698 --> 00:19:19,280
the native hypervisor based containers to isolate it

269
00:19:19,430 --> 00:19:20,770
on the host system.

270
00:19:22,580 --> 00:19:26,348
Configuration management will touch on in a couple of slides

271
00:19:26,524 --> 00:19:30,576
and of course keep the security embedded in your pipeline.

272
00:19:30,608 --> 00:19:34,580
So integrate security with checks, continuous development and deployment

273
00:19:36,040 --> 00:19:39,860
and make education awareness among the whole organization.

274
00:19:40,680 --> 00:19:44,612
A couple of tools here just to highlight for automated vulnerability

275
00:19:44,676 --> 00:19:47,976
management is really useful to use anchor it's an engine. It's an

276
00:19:47,998 --> 00:19:51,764
open source tool for image inspection and vulnerability scanning.

277
00:19:51,812 --> 00:19:55,556
Can access via GitHub. It provides a really centralized

278
00:19:55,588 --> 00:19:58,988
service for inspection and analyzes. So the anchor engine can

279
00:19:58,994 --> 00:20:02,316
be integrated with the CI CD pipeline to

280
00:20:02,338 --> 00:20:06,460
ensure the odd that only secure and compliant containers are deployed to production.

281
00:20:06,820 --> 00:20:09,200
Another also good tool is Claire,

282
00:20:09,780 --> 00:20:11,360
developed by Coreos.

283
00:20:14,100 --> 00:20:18,124
It's possible to get it from GitHub designed to scan

284
00:20:18,172 --> 00:20:21,796
containers for non vulnerabilities. What is good and nice that give you the

285
00:20:21,818 --> 00:20:25,956
ranking of the CVE so you can get the numbers and

286
00:20:25,978 --> 00:20:29,380
you can identifying security issues in early stages to be addressed.

287
00:20:29,960 --> 00:20:33,340
There's a lot of tools out there. Also good to mention AWS image

288
00:20:33,360 --> 00:20:36,730
scanners in private registry, so it can be also used

289
00:20:37,180 --> 00:20:41,496
for making sure that your images are scanned and in

290
00:20:41,518 --> 00:20:43,640
a good health before deployment.

291
00:20:44,400 --> 00:20:47,900
Few points regarding configuration management and network segmentation.

292
00:20:49,760 --> 00:20:53,628
I would highly recommend implement micro segmentation. So always

293
00:20:53,794 --> 00:20:57,632
fine grained network policies as much as possible control communication between

294
00:20:57,686 --> 00:21:01,728
your microservices and containers. Leverage the

295
00:21:01,734 --> 00:21:05,920
namespace so utilizing this in kubernetes to segment the resources,

296
00:21:06,340 --> 00:21:09,528
it's kind of a good boundary for the network policies.

297
00:21:09,724 --> 00:21:11,620
Also use network policies,

298
00:21:13,000 --> 00:21:16,304
for example especially in kubernetes to define which network

299
00:21:16,352 --> 00:21:19,840
configuration connection is allowed or blocked by default.

300
00:21:19,920 --> 00:21:23,704
Make block or deny for everything. Then start to add what

301
00:21:23,742 --> 00:21:26,200
you need based on your setup.

302
00:21:26,940 --> 00:21:29,560
Isolate sensitive workload,

303
00:21:30,540 --> 00:21:33,000
especially when dealing with compliance.

304
00:21:35,740 --> 00:21:39,532
If you have like a compliance issue that it's really helpful if you

305
00:21:39,586 --> 00:21:43,560
start from sensitive cloud workload isolated

306
00:21:43,720 --> 00:21:46,924
and then opening, let's say what you need

307
00:21:46,962 --> 00:21:50,864
from this workload to be processed or to be used so that can help you

308
00:21:51,062 --> 00:21:55,632
in your journey for compliance always.

309
00:21:55,766 --> 00:21:59,212
This can reduce the risk of exposure to other network

310
00:21:59,276 --> 00:22:02,464
traffic. Encrypt the container's traffic.

311
00:22:02,592 --> 00:22:04,900
Use tls to communicate.

312
00:22:05,560 --> 00:22:09,936
Make audits regular and periodic audits

313
00:22:09,968 --> 00:22:12,920
so it can give you some insights regarding also your policies.

314
00:22:13,900 --> 00:22:17,464
Good to mention. Also using the service meshes, it's really

315
00:22:17,502 --> 00:22:21,016
good technology. It can help you to go deeper on

316
00:22:21,038 --> 00:22:24,964
the level of containers. So for example istio

317
00:22:25,012 --> 00:22:29,160
or link card, you can use it for advanced traffic control monitoring

318
00:22:29,240 --> 00:22:32,940
between your services. Monitor these activities

319
00:22:33,280 --> 00:22:36,696
and integrate with your security tool. So if you have a WAF or

320
00:22:36,818 --> 00:22:40,370
technology you are using ids or IPS, you can use it

321
00:22:41,060 --> 00:22:45,100
for make another layer of logs and checks

322
00:22:45,260 --> 00:22:48,800
on your network. So let's recap

323
00:22:49,380 --> 00:22:53,488
few points here I'd like to highlight. First of all, containers can really improve

324
00:22:53,504 --> 00:22:57,076
your security if used wisely. So as

325
00:22:57,098 --> 00:23:00,564
we've seen, it has a really good potential has to be took into

326
00:23:00,602 --> 00:23:04,644
consideration all the setup beforehand. Docker is not

327
00:23:04,682 --> 00:23:08,664
secure by default and in a sense containers is not secured as a system

328
00:23:08,702 --> 00:23:11,892
is not secured by default. Never depend on the vanilla configuration.

329
00:23:11,956 --> 00:23:17,112
Always do your own setup and your own care

330
00:23:17,166 --> 00:23:20,536
of this technology. Always read images

331
00:23:20,568 --> 00:23:24,476
as a sensitive data. As we

332
00:23:24,498 --> 00:23:28,312
could see there is a lot of vulnerability and potential gaps

333
00:23:28,376 --> 00:23:31,744
that could be happening if you are not tracking your

334
00:23:31,782 --> 00:23:32,560
images.

335
00:23:34,420 --> 00:23:37,756
Finally, also follow network and configuration best practices.

336
00:23:37,868 --> 00:23:41,124
I shared with you a couple of them. There's a lot more so you can

337
00:23:41,162 --> 00:23:44,128
always keep track of these kind of best practices.

338
00:23:44,304 --> 00:23:48,484
Finally, use automated tools as much as possible to integrate your

339
00:23:48,522 --> 00:23:52,840
security into rescue into your DevOps pipeline.

340
00:23:53,500 --> 00:23:57,684
Finally, I wish you that no image

341
00:23:57,812 --> 00:24:01,604
of yours has any image

342
00:24:01,652 --> 00:24:05,524
problem. So thank you for joining me in this session

343
00:24:05,572 --> 00:24:09,576
and feel free to connect with me via LinkedIn and happy to

344
00:24:09,598 --> 00:24:13,096
be with you here. If you have any question, reach out to

345
00:24:13,118 --> 00:24:16,616
me and have a great day. Thank you for joining me

346
00:24:16,638 --> 00:24:20,176
in session and have

347
00:24:20,198 --> 00:24:20,590
a good day.

