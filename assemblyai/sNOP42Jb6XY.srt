1
00:00:40,930 --> 00:00:44,754
Hi, I'm going to talk today about building the Stonehenge using Gauss

2
00:00:44,802 --> 00:00:48,710
law. My name is Fabricio Buzeto and I've been coding since 2002.

3
00:00:48,780 --> 00:00:52,558
I worked at my fair share there in big companies and small as well.

4
00:00:52,644 --> 00:00:56,378
Also, I did my time in academia and had my phd.

5
00:00:56,474 --> 00:00:59,978
That's why you're going to see a lot of references in my slides.

6
00:01:00,074 --> 00:01:03,726
I've been working with startups since 2011 and this has been

7
00:01:03,748 --> 00:01:06,946
my love since then. And what I'm going to share today is a bit

8
00:01:06,968 --> 00:01:10,546
of my past experience and what I've been currently learning

9
00:01:10,648 --> 00:01:14,034
about building this type of products in this kind of environment of

10
00:01:14,072 --> 00:01:17,166
startups. So let's start talking about what is galls

11
00:01:17,198 --> 00:01:21,154
law. Galls law states that a complex system that works is invariably

12
00:01:21,202 --> 00:01:24,390
found to have evolved from a simple system that also worked.

13
00:01:24,460 --> 00:01:28,350
And a key word here is the word evolve. How do we perceive

14
00:01:28,450 --> 00:01:31,914
a complex system evolving? Usually when we think about

15
00:01:31,952 --> 00:01:35,482
this, we think about adding features, starting with something

16
00:01:35,536 --> 00:01:38,902
that works, and just keep adding features and features

17
00:01:38,966 --> 00:01:42,430
that will remain with this working. But usually

18
00:01:42,500 --> 00:01:46,878
a complex system evolves and starts from a very initial state that

19
00:01:46,964 --> 00:01:50,462
usually don't work or we don't know that it works.

20
00:01:50,596 --> 00:01:54,478
So that's where comes the second and important

21
00:01:54,564 --> 00:01:58,002
part of the Galls law. It's what is this simple system?

22
00:01:58,136 --> 00:02:01,890
When I think about galls law, the first and better

23
00:02:02,040 --> 00:02:05,070
example that I can find is game of life from John Colby.

24
00:02:05,150 --> 00:02:08,406
So if you are not familiar with this classic example in

25
00:02:08,428 --> 00:02:12,054
computer science, you have just three simple rules. And with

26
00:02:12,092 --> 00:02:16,770
three simple rules, you can create very complex behaviors.

27
00:02:16,930 --> 00:02:20,214
When you look the results and play around with John

28
00:02:20,252 --> 00:02:24,262
Coy's game of life, you learn that most of the initial

29
00:02:24,326 --> 00:02:27,834
states that you have are not stable. They die out and

30
00:02:27,872 --> 00:02:31,470
you have nothing left. But if you work well and you try it out,

31
00:02:31,540 --> 00:02:34,942
you can find very complex and beautiful results like

32
00:02:34,996 --> 00:02:38,270
this. Galls law also states that this simple

33
00:02:38,340 --> 00:02:41,710
system may or may not work. And that's something

34
00:02:41,780 --> 00:02:45,662
that we should be familiar with, because knowing

35
00:02:45,726 --> 00:02:49,730
what works or not, it's key when you're selecting that simple

36
00:02:49,800 --> 00:02:53,714
system. So knowing what works means stacks with

37
00:02:53,832 --> 00:02:57,794
thinking about it. And when we talk about software, a software

38
00:02:57,842 --> 00:03:01,846
that works is a software that fulfills its purpose. And the purpose of

39
00:03:01,868 --> 00:03:05,938
a software is many. A software can exist

40
00:03:06,034 --> 00:03:09,770
to improve sharing, or to prove something, or to help

41
00:03:09,840 --> 00:03:13,894
explore some context, some problem. A software

42
00:03:13,942 --> 00:03:16,950
can exist to help politics within an organization,

43
00:03:17,110 --> 00:03:20,486
somebody that's trying CTO, a promotion, or trying

44
00:03:20,528 --> 00:03:24,590
to prove that something that they believe is true, it's happening

45
00:03:24,740 --> 00:03:28,142
but usually most software, they are focused on business,

46
00:03:28,276 --> 00:03:31,566
helping the business advance or go forward.

47
00:03:31,748 --> 00:03:35,646
So I'm going to stick with that. Also, every software has a

48
00:03:35,668 --> 00:03:39,474
client. This client can be the team that is using that software to help

49
00:03:39,512 --> 00:03:42,946
them with some task. Can be the company itself can

50
00:03:42,968 --> 00:03:46,998
be a sponsor that's paying for that software no matter what, but usually

51
00:03:47,084 --> 00:03:50,742
is a user, somebody that's really interested of having

52
00:03:50,796 --> 00:03:54,342
that software solving their problem. Galls law also

53
00:03:54,396 --> 00:03:58,674
states that a complex system designed from scratch never works

54
00:03:58,812 --> 00:04:02,794
and cannot be patched up to make it work if you do.

55
00:04:02,832 --> 00:04:06,458
So if we start a complex system from scratch, as a

56
00:04:06,464 --> 00:04:10,218
complex design, you have to start over with a working

57
00:04:10,304 --> 00:04:13,478
simple system. That's why we should start simple.

58
00:04:13,584 --> 00:04:17,674
And I'll start with some examples of myself. I'll start with coconut.

59
00:04:17,722 --> 00:04:21,454
Coconut was a startup that I worked back in 2012 and

60
00:04:21,492 --> 00:04:25,314
we did social tv analytics. Basically what we did was

61
00:04:25,432 --> 00:04:28,914
CTO, watch for a Twitter stream about tv shows and

62
00:04:28,952 --> 00:04:32,194
generate intelligence based on that data. And when I got into

63
00:04:32,232 --> 00:04:36,018
the company, our infrastructure was very simple. We plugged

64
00:04:36,034 --> 00:04:39,570
it into Twitter API, processed the data using django,

65
00:04:39,650 --> 00:04:43,478
and fed to a MySQL database. It worked well.

66
00:04:43,564 --> 00:04:47,266
We just had a few shows, but we stumbled

67
00:04:47,298 --> 00:04:50,826
on our first barrier, which was the limits of the

68
00:04:50,848 --> 00:04:54,854
Twitter API. So we had to switch to a Twitter API

69
00:04:54,902 --> 00:04:58,874
roles, which was data sift. So it allowed us to address

70
00:04:58,992 --> 00:05:02,250
the whole Twitter comments about a tv show.

71
00:05:02,320 --> 00:05:05,742
And since we had just a few shows, it also started small.

72
00:05:05,796 --> 00:05:09,182
So our average twizz per day was just ten k

73
00:05:09,236 --> 00:05:12,414
and our peak was five k. When we had

74
00:05:12,452 --> 00:05:16,434
these peaks, our application would just freeze. And that was

75
00:05:16,472 --> 00:05:19,714
not nice. I knew that our infrastructure was

76
00:05:19,752 --> 00:05:23,406
not the best, it was the simplest we can do with our purpose,

77
00:05:23,518 --> 00:05:27,094
but was not also available for us to just start

78
00:05:27,212 --> 00:05:30,310
rewriting everything from scratch. So what we did was,

79
00:05:30,380 --> 00:05:34,086
let's just try to scale this. And we did. We scaled first

80
00:05:34,188 --> 00:05:38,486
our Django application, and this helped us CTO increase

81
00:05:38,598 --> 00:05:42,186
our volume. We reached five k tweets per day.

82
00:05:42,288 --> 00:05:45,658
Then our database started, got into

83
00:05:45,744 --> 00:05:49,082
the way, but we managed to also increase, doubling our

84
00:05:49,136 --> 00:05:52,810
capacity until we knew that we reached our limit.

85
00:05:52,890 --> 00:05:56,638
It was impossible for us to increase any longer without just

86
00:05:56,724 --> 00:06:00,490
having a very complex and difficult to maintain

87
00:06:00,570 --> 00:06:03,822
database and code base. So what we did

88
00:06:03,876 --> 00:06:07,434
was let's go for a final infrastructure. So we studied,

89
00:06:07,482 --> 00:06:11,070
we choose a part storm back then, and we did some experiments

90
00:06:11,150 --> 00:06:14,210
and we started small. We migrated one simple

91
00:06:14,280 --> 00:06:17,658
metric from our Django application to apart

92
00:06:17,694 --> 00:06:20,774
storm. And over six months we migrated one

93
00:06:20,812 --> 00:06:24,822
metric at a time to this new application while the other

94
00:06:24,876 --> 00:06:28,422
application was maintained and also works until

95
00:06:28,476 --> 00:06:31,946
the end. We managed to migrate everything and we reached more

96
00:06:31,968 --> 00:06:36,058
than 1 million tweets per day. And I remember our peak was

97
00:06:36,144 --> 00:06:39,706
50k tweets per minute, even though we never

98
00:06:39,808 --> 00:06:43,342
had any issues with load anymore. So this

99
00:06:43,396 --> 00:06:46,862
got me thinking that this kind of approach where

100
00:06:46,916 --> 00:06:50,410
I tried to stretch the application and the architecture

101
00:06:50,490 --> 00:06:54,174
as much as I could until it hurt, it was the best approach for

102
00:06:54,212 --> 00:06:57,426
this kind of situation. And this is how I started when I

103
00:06:57,448 --> 00:07:00,866
got into Bxblue. So I was since the beginning in

104
00:07:00,888 --> 00:07:04,126
the company, our first mvp was just an unbalanced

105
00:07:04,158 --> 00:07:07,426
page pointing to a Google Docs. Of course it won't

106
00:07:07,458 --> 00:07:10,886
last for much. When we started having too much load for

107
00:07:10,908 --> 00:07:14,466
us to handle by ourselves, I started building a rails

108
00:07:14,498 --> 00:07:18,274
application that helped us handle our requests from the clients.

109
00:07:18,402 --> 00:07:21,910
This rail application eventually replaced our Google

110
00:07:21,980 --> 00:07:25,534
spreadsheets and replaced it as an RP

111
00:07:25,602 --> 00:07:29,638
CTO handle our client's paper line. This infrastructure

112
00:07:29,734 --> 00:07:33,386
grew and eventually had to have our own database to handle

113
00:07:33,418 --> 00:07:36,698
our clients requests and we chose MongodB.

114
00:07:36,794 --> 00:07:39,658
So on each step, architecture changed,

115
00:07:39,754 --> 00:07:42,798
but not very much, just a little bit at a time.

116
00:07:42,884 --> 00:07:46,466
And the purpose of each step was to answer a

117
00:07:46,488 --> 00:07:49,854
question. So first was to answer if the main purpose

118
00:07:49,902 --> 00:07:53,890
of the company could be fulfilled, then if we could sell anything,

119
00:07:54,040 --> 00:07:57,278
if we could do it faster, and finally if could

120
00:07:57,304 --> 00:08:01,378
do it properly so we could have a bigger team handling these requests.

121
00:08:01,474 --> 00:08:04,966
What this have in common these two applications is that both of

122
00:08:04,988 --> 00:08:08,054
them are monoliths. Why monoliths? The main

123
00:08:08,092 --> 00:08:11,722
reason, because they are simple. Monoliths are simple to develop,

124
00:08:11,856 --> 00:08:15,498
simple to test, simple to deploy and simple to use.

125
00:08:15,664 --> 00:08:19,194
They can be simple to scale as well. But usually when you think about

126
00:08:19,232 --> 00:08:22,666
monoliths, you think about the drawbacks. And the main drawbacks of a

127
00:08:22,688 --> 00:08:26,330
monolith is that they are hard to scale, hard to scale their tests,

128
00:08:26,410 --> 00:08:30,062
how to scale the team to avoid that many people are

129
00:08:30,116 --> 00:08:34,266
working on the same thing. How CTO scale the deploy you can have a faster

130
00:08:34,298 --> 00:08:37,762
deploy. It's hard when you have a very large code base,

131
00:08:37,896 --> 00:08:41,362
how to scale a stack so you can have new technologies living

132
00:08:41,416 --> 00:08:45,202
with legacy ones, and how CTO scale changes when you have

133
00:08:45,256 --> 00:08:49,586
lots of changes happening at the same time. So let's talk about how Bxblue

134
00:08:49,618 --> 00:08:52,822
handled this type of scale. So our galls application was

135
00:08:52,876 --> 00:08:57,138
very simple, but it also relied on a lot of external

136
00:08:57,234 --> 00:09:00,666
services. We had more than 15 of them plugged on

137
00:09:00,688 --> 00:09:04,266
our application, helping us do our job over time. What we

138
00:09:04,288 --> 00:09:08,026
did was just go async so asynchronous communication was

139
00:09:08,048 --> 00:09:11,434
handled using sidekick to handle our jobs and our job

140
00:09:11,472 --> 00:09:14,602
queues. So this managed to have us scale

141
00:09:14,746 --> 00:09:18,906
at a very fast pace. And what helped us was not this architecture

142
00:09:18,938 --> 00:09:22,894
per se, but also how we did our development. And the first thing

143
00:09:22,932 --> 00:09:26,798
that we did was we always automated our tools,

144
00:09:26,894 --> 00:09:30,242
because you don't have to trust yourself. You have to trust

145
00:09:30,296 --> 00:09:33,634
your code, and you have to trust that on every change that

146
00:09:33,672 --> 00:09:37,538
you make, things are still working. So you have to automate your tests,

147
00:09:37,634 --> 00:09:41,010
automate your code quality, automate your deploy,

148
00:09:41,090 --> 00:09:44,694
and automate your monitoring tools, your tests. So every

149
00:09:44,732 --> 00:09:48,022
time you deploy something, you know that your code is still

150
00:09:48,076 --> 00:09:51,770
working. Automate your code quality checks. So every time

151
00:09:51,840 --> 00:09:55,146
somebody is code reviewing, they are not checking the same and

152
00:09:55,168 --> 00:09:58,586
same things again, so they can miss something out. Automating your

153
00:09:58,608 --> 00:10:02,698
deploys so people don't have to think about all their checklists

154
00:10:02,794 --> 00:10:06,058
over and over again. And automate your monitoring

155
00:10:06,154 --> 00:10:09,374
so you know that if something goes wrong, you'll be

156
00:10:09,412 --> 00:10:13,614
notified when you're done automating. What you should worry about on

157
00:10:13,652 --> 00:10:17,086
your test, you should worry about your unit tests, you should worry

158
00:10:17,118 --> 00:10:20,686
about things that are in common with your tests so you don't have to rewrite

159
00:10:20,718 --> 00:10:24,302
them every time. And you can better maintain integration

160
00:10:24,366 --> 00:10:28,630
tests, not only internal, but external as well. So you know that when

161
00:10:28,700 --> 00:10:31,826
some external tools change, you know if it broke

162
00:10:31,858 --> 00:10:36,086
something. And about speed, if your tests take too much time to run,

163
00:10:36,188 --> 00:10:40,050
you avoid running them. Your code quality, so you can control coverage.

164
00:10:40,130 --> 00:10:43,402
And you know that you have a blind spot, your linter, your code

165
00:10:43,456 --> 00:10:46,698
quality, so you know that your team is not checking something that a

166
00:10:46,704 --> 00:10:50,410
machine can help them do. And your security. So you know that

167
00:10:50,480 --> 00:10:53,738
if you introduce something bad in your code, in your deployment,

168
00:10:53,834 --> 00:10:57,678
you have a very good CI CD pipeline, stable. You have a

169
00:10:57,684 --> 00:11:01,866
source control, and you have a cloud pipeline that controls galls, your servers,

170
00:11:01,978 --> 00:11:05,966
and finally, monitoring, monitoring your errors, your servers,

171
00:11:06,078 --> 00:11:10,194
your logs, and your user journey. In our case, we have a

172
00:11:10,232 --> 00:11:13,742
rails application, so we use most of the rails

173
00:11:13,806 --> 00:11:17,874
ecosystem for that. But we're a monolith. And unlike

174
00:11:17,922 --> 00:11:21,446
Kokanao, our problem was not scaling the application to

175
00:11:21,468 --> 00:11:24,982
handle users, but sharing our application to handle its

176
00:11:25,036 --> 00:11:28,650
context. As our monolith grew, we started

177
00:11:28,720 --> 00:11:32,410
adding more and more context to our monolith, and this

178
00:11:32,480 --> 00:11:36,554
started to slow us down in our development. So that's where

179
00:11:36,592 --> 00:11:40,362
we complicated hints. So before I started talking

180
00:11:40,416 --> 00:11:44,206
about what we did, let me talk about the options that we have if

181
00:11:44,228 --> 00:11:47,246
we wanted to avoid the monolith. So basically,

182
00:11:47,348 --> 00:11:50,474
what we have here is a distributed

183
00:11:50,522 --> 00:11:54,114
system, and a distributed system mainly is something that

184
00:11:54,152 --> 00:11:57,374
run on multiple servers. And these applications,

185
00:11:57,422 --> 00:12:01,326
they manage some kind of data. We have many architectures available besides

186
00:12:01,358 --> 00:12:04,914
the monolith. We have the microservices that

187
00:12:04,952 --> 00:12:08,354
they are simple, self contained, they are loosely coupled,

188
00:12:08,402 --> 00:12:11,446
they are single focused, and they are services, they are

189
00:12:11,468 --> 00:12:16,562
connected by themselves. We have the proposal of the citadel by GhH.

190
00:12:16,706 --> 00:12:20,698
That's a large self contained monolith that's supported by small,

191
00:12:20,784 --> 00:12:24,666
single focused, problem specific services that handle what

192
00:12:24,688 --> 00:12:29,382
the monolith cannot handle by itself. We have also the microservices

193
00:12:29,526 --> 00:12:33,454
that are kind of more hungry microservices that

194
00:12:33,492 --> 00:12:36,590
people from Uber are starting to experiments.

195
00:12:37,010 --> 00:12:40,634
They are simple, they are self contained, they are context focused

196
00:12:40,682 --> 00:12:44,482
as well. But they are multipurpose services that try

197
00:12:44,536 --> 00:12:48,546
to engulf more context in their services than just a

198
00:12:48,568 --> 00:12:51,470
microservices does. And what did the explode?

199
00:12:51,550 --> 00:12:55,266
Okay, so we had our architectures as I presented before,

200
00:12:55,368 --> 00:12:59,126
just out of simplicity, I'll consider my application as this

201
00:12:59,228 --> 00:13:02,246
small box with sidekick and MongoDB, this square.

202
00:13:02,348 --> 00:13:06,498
What we did when we had to start and add that new context, we decided

203
00:13:06,594 --> 00:13:10,038
we're going to create a new application. So instead of building

204
00:13:10,124 --> 00:13:13,418
this new context in the same monolith that we had before,

205
00:13:13,504 --> 00:13:17,354
we are going to extract it and build its own application to handle it.

206
00:13:17,392 --> 00:13:21,226
And it did well. The development time was great. Integration with the

207
00:13:21,248 --> 00:13:24,906
legacy monolith was easy, and we started adding

208
00:13:24,938 --> 00:13:28,446
more services and more external applications to it. Then we

209
00:13:28,468 --> 00:13:31,646
did it again. A new context appeared. We built a new application to

210
00:13:31,668 --> 00:13:35,074
that context, more services, aggregate, CTO iT. And is it so

211
00:13:35,112 --> 00:13:38,258
well that now we have more than six applications in

212
00:13:38,264 --> 00:13:41,726
our part? And that's what we call the Stonehenge. So the Stonehenge

213
00:13:41,758 --> 00:13:45,518
is a distributed systems strategy just like the others.

214
00:13:45,624 --> 00:13:49,186
We call it as one step further into the microservices.

215
00:13:49,298 --> 00:13:52,690
So it's a simple, self sufficient, context focused,

216
00:13:52,770 --> 00:13:56,466
service enabled application. The difference here is that we don't

217
00:13:56,498 --> 00:13:59,802
think about services only, we are thinking about

218
00:13:59,856 --> 00:14:04,234
applications. So they are self sufficient because

219
00:14:04,432 --> 00:14:07,946
they work by themselves. They don't need the other applications to

220
00:14:07,968 --> 00:14:11,914
do their job. They are context focused, which means they can handle that

221
00:14:11,952 --> 00:14:15,854
folks very, very well. And they are self enabled, which means

222
00:14:15,892 --> 00:14:19,770
that other applications can integrate with them. So they can scale,

223
00:14:19,850 --> 00:14:23,506
but they don't need them, they can work them by themselves and by the

224
00:14:23,528 --> 00:14:26,706
law of conservation of complexity. Complexity has to

225
00:14:26,728 --> 00:14:30,622
go somewhere. So it doesn't matter which of these architecture

226
00:14:30,686 --> 00:14:34,702
I choose. Every application has an inherited amount of complexity

227
00:14:34,766 --> 00:14:38,994
that cannot be removed or hidden. So we chose the Stonehenge

228
00:14:39,042 --> 00:14:42,438
because was the better way for us. But complexity is still there,

229
00:14:42,524 --> 00:14:46,066
mingled in the applications, the way the whole park

230
00:14:46,098 --> 00:14:50,174
is connected. Just like microservices or microservices.

231
00:14:50,322 --> 00:14:53,882
What I'm trying to avoid here is not complexity as per se,

232
00:14:53,936 --> 00:14:56,982
but that code, when you see the statistics,

233
00:14:57,126 --> 00:15:00,170
something around five and 30% of what we code,

234
00:15:00,240 --> 00:15:03,526
they are not used. And when you think about startups,

235
00:15:03,638 --> 00:15:07,294
70% of startups will fail. So the code that they

236
00:15:07,332 --> 00:15:10,766
build will never be used again. And what I'm trying to do is to make

237
00:15:10,788 --> 00:15:14,702
sure that the code that I'm building, they are the best ones for that

238
00:15:14,756 --> 00:15:18,754
purpose. And they are trying to help the companies where

239
00:15:18,792 --> 00:15:22,430
they live to move forward and they are used. So Samiya,

240
00:15:22,510 --> 00:15:26,082
if you have CTO take something from this conversation, is that

241
00:15:26,216 --> 00:15:30,038
God's law works. A simple system may or may not work,

242
00:15:30,124 --> 00:15:34,086
but a complex system designed from scratch never works

243
00:15:34,188 --> 00:15:37,762
and cannot be patched up to make it work. So a complex

244
00:15:37,826 --> 00:15:41,302
system that works is invariable, found to have a vote

245
00:15:41,366 --> 00:15:45,430
from a simple system that works. And if you are into a complex

246
00:15:45,510 --> 00:15:49,098
problem, start small, start simple. That's the way to go.

247
00:15:49,184 --> 00:15:52,922
And don't trust yourself, trust the machine. Automate your tools,

248
00:15:52,986 --> 00:15:56,858
your tests, your code quality, your deploy, your monitoring.

249
00:15:56,954 --> 00:16:00,222
This is the best way to ensure that every time you

250
00:16:00,276 --> 00:16:03,454
change, things are stable and things are going

251
00:16:03,492 --> 00:16:06,894
to break. And if you know when they are broken, you can fix it.

252
00:16:06,932 --> 00:16:10,494
So build a very good automated tool set to

253
00:16:10,532 --> 00:16:14,670
help you do that. And lastly, why not try the Stonehenge?

254
00:16:14,970 --> 00:16:18,822
The simplest solution is usually the best. So in the end

255
00:16:18,876 --> 00:16:22,294
everything is just distributed systems. Decision making is

256
00:16:22,332 --> 00:16:25,846
hard and things will change. So this is another option in

257
00:16:25,868 --> 00:16:29,654
your tool set. So thanks and I'm happy to

258
00:16:29,692 --> 00:16:33,346
hear your opinions and what you thought about what I'm showing

259
00:16:33,378 --> 00:16:36,934
here. To have any comments in the video on Twitter, just reach

260
00:16:36,972 --> 00:16:37,558
me out.

