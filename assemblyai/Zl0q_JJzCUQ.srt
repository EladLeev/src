1
00:00:27,650 --> 00:00:30,758
Hey, everyone, I'm Leonid from Stackpulse. And today I'd like to

2
00:00:30,764 --> 00:00:34,450
talk to you about how calcium paired with a method

3
00:00:34,530 --> 00:00:37,990
called generic mitigations can serve as these really strong

4
00:00:38,060 --> 00:00:41,734
foundation to building resilient systems, maybe even leading us

5
00:00:41,772 --> 00:00:45,526
to this dream of self healing systems. So if any

6
00:00:45,548 --> 00:00:49,158
of this is of interest for you, stick around. It's going to be an interesting

7
00:00:49,244 --> 00:00:53,486
talk. So, in this conversation, we will talk about what

8
00:00:53,508 --> 00:00:56,894
is Kaus engineering and what does it usually do

9
00:00:56,932 --> 00:01:00,526
for us. We'll focus a bit on resilience of our systems and

10
00:01:00,548 --> 00:01:04,126
maybe define how much of it do we really want or how

11
00:01:04,148 --> 00:01:07,474
much of it do we really need. Then we'll also try to

12
00:01:07,592 --> 00:01:11,122
focus on whats does it mean to be proficient, to be

13
00:01:11,176 --> 00:01:14,638
really good and effective at building resilient systems. And then we'll

14
00:01:14,654 --> 00:01:18,134
dive into the world of generic remediations, figure out what they are,

15
00:01:18,172 --> 00:01:21,814
how they can help us, and how this combination actually serves as a very

16
00:01:21,932 --> 00:01:26,466
strong conditions for what everybody wants, or what everybody delivering

17
00:01:26,578 --> 00:01:29,080
services wants, which is resilient services.

18
00:01:29,690 --> 00:01:33,590
So, yeah, we are at the chaos engineering conference.

19
00:01:33,670 --> 00:01:37,594
So I bet everyone here has an idea about what

20
00:01:37,632 --> 00:01:41,558
KAus engineering is and why do we need it. But still,

21
00:01:41,664 --> 00:01:45,546
to make sort of like a structurally well delivered

22
00:01:45,578 --> 00:01:49,150
point of these, I'd like to take this presentation. Let's remember

23
00:01:49,300 --> 00:01:52,886
whats council engineering is defined as a discipline of experimenting

24
00:01:52,938 --> 00:01:56,606
on a certain system. And that experimentation, its goal

25
00:01:56,638 --> 00:02:00,174
is to build confidence in system's capability to withstand

26
00:02:00,302 --> 00:02:04,114
turbulent conditions in production. What does it actually mean

27
00:02:04,152 --> 00:02:07,960
to withstand turbulent conditions and why

28
00:02:08,730 --> 00:02:12,262
the experimentation is so important? Why can't I

29
00:02:12,316 --> 00:02:16,658
plan my system ahead of time to be very resilient? So turbulence,

30
00:02:16,754 --> 00:02:20,810
as a word is defined, let's say, by Cambridge dictionary as

31
00:02:20,880 --> 00:02:24,954
something that involves a lot of sudden changes.

32
00:02:25,152 --> 00:02:29,130
Now, these Merriam Webster definition is talking about irregular

33
00:02:30,530 --> 00:02:34,746
commotion, right? Things that are both very sudden

34
00:02:34,858 --> 00:02:38,302
and unexpected in their occurrence and can also

35
00:02:38,356 --> 00:02:41,770
be very radical in their impact.

36
00:02:41,930 --> 00:02:45,614
And this is sort of like the foundation of Kaus engineering,

37
00:02:45,742 --> 00:02:49,234
because this turbulence means that if

38
00:02:49,272 --> 00:02:53,458
we plan for it, if we build certain

39
00:02:53,544 --> 00:02:56,770
things, planning for certain variations,

40
00:02:56,930 --> 00:03:00,582
the production will still surprise us, right? Surprise us in

41
00:03:00,716 --> 00:03:04,642
again changes being sudden changes and challenges

42
00:03:04,706 --> 00:03:08,038
being not exactly how we expected them to be. Let's maybe look

43
00:03:08,044 --> 00:03:11,482
at comes engineering from a different perspective and

44
00:03:11,616 --> 00:03:14,378
try to understand what does it do for us.

45
00:03:14,544 --> 00:03:18,470
Let's say we invested the efforts and built a foundation

46
00:03:18,630 --> 00:03:21,322
and we start running these experiments.

47
00:03:21,466 --> 00:03:25,038
Why are we doing all that? So when we are building a

48
00:03:25,044 --> 00:03:28,400
software system, especially when we are building a software service,

49
00:03:28,850 --> 00:03:32,682
its fault tolerance, or its resilience,

50
00:03:32,826 --> 00:03:36,190
is a very important piece, because for those whats

51
00:03:36,260 --> 00:03:38,480
consume this service,

52
00:03:39,590 --> 00:03:43,726
the quality of service, in many cases even protected

53
00:03:43,758 --> 00:03:47,026
by service level agreements between the consumer of a service and a provider

54
00:03:47,058 --> 00:03:50,466
of a service, is a very important goal.

55
00:03:50,578 --> 00:03:54,642
Now, this fault tolerance or resilience gets constantly

56
00:03:54,706 --> 00:03:59,078
tested by changes in infrastructure,

57
00:03:59,254 --> 00:04:02,986
changes in networking, changes in application, changes in

58
00:04:03,088 --> 00:04:07,254
user consumption patterns, right? All these can destabilize

59
00:04:07,302 --> 00:04:11,034
our system and cow's engineering experiments,

60
00:04:11,082 --> 00:04:14,574
right? They can simulate these things so

61
00:04:14,612 --> 00:04:18,590
that we can look at the outcome of the experiments and build

62
00:04:18,740 --> 00:04:21,902
our systems to be resilient to similar,

63
00:04:22,036 --> 00:04:25,906
right? Not exactly the same things as we've seen with the experiments, but similar things

64
00:04:25,928 --> 00:04:29,534
that will happen in production. So, a very short summary

65
00:04:29,582 --> 00:04:33,086
for now, right? So, calf engineering experiments

66
00:04:33,118 --> 00:04:36,734
help us surface how our system behave in various

67
00:04:36,782 --> 00:04:40,626
unexpected conditions that can occur in production. But the end goal

68
00:04:40,658 --> 00:04:44,802
is not to run experiments, right? The end goal is to achieve resilience,

69
00:04:44,946 --> 00:04:49,382
right? And in order to do that, we need to take the deliverables.

70
00:04:49,526 --> 00:04:53,274
Whatever these experiments surfaced, we need to prioritize these

71
00:04:53,312 --> 00:04:57,606
findings. And then we need to invest in modifying

72
00:04:57,718 --> 00:05:01,534
our systems, sometimes their architecture, sometimes the

73
00:05:01,572 --> 00:05:05,006
infrastructure, whats run on, and so on. And so both in order to

74
00:05:05,028 --> 00:05:08,478
become more resilient to these particular types of

75
00:05:08,564 --> 00:05:11,342
interferences that were surfaced, right?

76
00:05:11,476 --> 00:05:14,678
So the goal is, resilience comes.

77
00:05:14,714 --> 00:05:18,494
Engineering helps us sort of like shed a light spotlight

78
00:05:18,542 --> 00:05:22,258
on where we are not resilient enough and prioritize our work.

79
00:05:22,344 --> 00:05:25,634
How much resilience do we actually want in our products?

80
00:05:25,832 --> 00:05:28,958
Now, this may sound, at first it's

81
00:05:28,974 --> 00:05:32,466
a very strange question. Imagine a situation where you would be sitting

82
00:05:32,498 --> 00:05:36,054
in a restaurant, ordering a dish, and then a waiter would ask you, okay,

83
00:05:36,092 --> 00:05:39,970
dear madam or sir, how tasty, how delicious,

84
00:05:40,130 --> 00:05:43,818
would you like us to make this dish for you? Would you like a really

85
00:05:43,904 --> 00:05:47,098
delicious, once in a lifetime culinary experience?

86
00:05:47,264 --> 00:05:50,598
Or would you like us to be like passable? I mean, decent,

87
00:05:50,694 --> 00:05:54,314
right? But nothing to write home about. Naturally, each and every one of us would

88
00:05:54,352 --> 00:05:57,182
answer, whats do you mean? I mean, I came here to this restaurant to enjoy

89
00:05:57,236 --> 00:06:00,846
myself. Of course. I want you guys to cook it to the absolute best of

90
00:06:00,868 --> 00:06:04,762
your culinary ability, right? Similarly, you're about to consume a service,

91
00:06:04,916 --> 00:06:08,290
any kind of a service, an email service, a monitoring service,

92
00:06:08,360 --> 00:06:11,918
an HR, whatever, right? How resilient

93
00:06:12,014 --> 00:06:15,150
would you like it to be? Well, you want it to be very

94
00:06:15,240 --> 00:06:19,240
resilient, right? Because you need it every time.

95
00:06:19,610 --> 00:06:23,282
If it's not there for you, why would you compromise

96
00:06:23,426 --> 00:06:26,786
for anything less than the absolutely best resilience?

97
00:06:26,898 --> 00:06:30,330
Now, in theory, that sounds great. In practice,

98
00:06:30,910 --> 00:06:34,842
it costs to those of us who operate services

99
00:06:34,976 --> 00:06:38,346
to make them more resilient. And if I had to look at these

100
00:06:38,368 --> 00:06:43,066
improvements in resilience as a function of investment

101
00:06:43,178 --> 00:06:47,150
cost, the graph would look like this. Now what it means

102
00:06:47,300 --> 00:06:51,114
is that at first, introducing an improvement in resilience,

103
00:06:51,162 --> 00:06:55,182
even quite a significant one, can be done with bearable

104
00:06:55,246 --> 00:06:59,630
costs. But as we become more and more resilient,

105
00:06:59,790 --> 00:07:03,522
bumping the resilience up yet more every

106
00:07:03,576 --> 00:07:07,206
time costs us more and more and more.

107
00:07:07,308 --> 00:07:11,366
And maybe adding these extra, however you

108
00:07:11,388 --> 00:07:15,254
manage and measure your resilience, in the end you may add this

109
00:07:15,292 --> 00:07:18,874
little resilience, but it will cost you twice or

110
00:07:18,912 --> 00:07:22,442
twice as much. And here's the deal. At the end of the day,

111
00:07:22,576 --> 00:07:25,786
not every investment makes sense.

112
00:07:25,968 --> 00:07:30,002
If we're building a commercial service, these it has consumers

113
00:07:30,086 --> 00:07:34,080
and these people, they are willing to pay us for this service

114
00:07:34,530 --> 00:07:38,094
something, right? And then we

115
00:07:38,132 --> 00:07:41,662
have our cost of operating and delivering these service.

116
00:07:41,796 --> 00:07:44,738
And everything in the middle is our margin, right? That is if we are a

117
00:07:44,744 --> 00:07:48,494
commercial service provider. Still, even if we're talking about internal

118
00:07:48,542 --> 00:07:52,050
service, there is a certain point of

119
00:07:52,200 --> 00:07:55,670
acceptable comes that we are building to invest.

120
00:07:55,820 --> 00:07:59,654
And in reality, these amount of resilience that we cant is

121
00:07:59,692 --> 00:08:02,822
actually the intersection of these two, right?

122
00:08:02,956 --> 00:08:06,402
It's what is acceptable both as a resilience

123
00:08:06,466 --> 00:08:10,250
and as costs. Let's maybe look at it slightly

124
00:08:10,670 --> 00:08:14,074
from a more complex but still

125
00:08:14,112 --> 00:08:18,134
very similar perspective. So we have our resilience.

126
00:08:18,262 --> 00:08:21,530
We will just turn it into the customer facing

127
00:08:21,950 --> 00:08:25,742
aspect and we will call it service level. So we have a low service

128
00:08:25,796 --> 00:08:28,894
level and then we invest additional costs in improving it.

129
00:08:28,932 --> 00:08:32,646
And then we have high service level. And now there are consumers

130
00:08:32,698 --> 00:08:34,820
for our service. For them,

131
00:08:36,390 --> 00:08:40,286
acceptable service level may sort of like vary depending

132
00:08:40,318 --> 00:08:43,954
on cost. But still in this line, there are

133
00:08:43,992 --> 00:08:47,518
two very important points that we should all consider. There is this

134
00:08:47,544 --> 00:08:50,694
point we call a minimal acceptable service level.

135
00:08:50,812 --> 00:08:54,886
Anything below this point just doesn't make sense. Your consumers would

136
00:08:54,908 --> 00:08:58,314
not cant it. And then there is a second very important point.

137
00:08:58,432 --> 00:09:02,326
And it's the point where comes for delivering a more resilient

138
00:09:02,358 --> 00:09:06,170
service are actually higher than what the service

139
00:09:06,240 --> 00:09:09,370
consumers would be willing to pay. Naturally,

140
00:09:10,350 --> 00:09:14,206
cost sensitivity may differ between one prospect consumer to

141
00:09:14,228 --> 00:09:17,998
another. So there is a range here. That's what gives rise to phenomenon such

142
00:09:18,004 --> 00:09:21,498
as premium products, right? Where people or organizations are willing

143
00:09:21,514 --> 00:09:25,054
to pay more for something that is more resilient,

144
00:09:25,102 --> 00:09:28,178
more luxurious. But still, no matter how the

145
00:09:28,184 --> 00:09:32,414
model looks, the conclusions will be these same. So there is this point naturally

146
00:09:32,542 --> 00:09:36,174
for us to operate with a margin. We need to be somewhere

147
00:09:36,222 --> 00:09:39,926
within this area, right? Because this way, certain amount of

148
00:09:39,948 --> 00:09:43,750
consumers, customers are willing to acquire a service.

149
00:09:43,820 --> 00:09:47,058
With this service level. We are operating it for costs

150
00:09:47,074 --> 00:09:49,802
that are lower than that. And in the middle, this is what we make.

151
00:09:49,856 --> 00:09:53,514
So in essence, these is the area

152
00:09:53,712 --> 00:09:58,138
where we would end up operating our service depending on

153
00:09:58,304 --> 00:10:02,174
different properties. This is in essence how

154
00:10:02,212 --> 00:10:05,614
much resilience we cant. Whats comes it mean

155
00:10:05,732 --> 00:10:09,406
to be proficient in building resilience, right? Because we would

156
00:10:09,428 --> 00:10:13,362
like to be efficient. We would like to be proficient in

157
00:10:13,496 --> 00:10:18,180
whatever we are building. Here's a very important point

158
00:10:18,630 --> 00:10:23,166
that may differentiate between a successful and proficient

159
00:10:23,278 --> 00:10:26,198
service provider and less successful one.

160
00:10:26,284 --> 00:10:30,022
When talking about resilience, we define proficiency as

161
00:10:30,076 --> 00:10:34,118
the ability to deliver more resilient services

162
00:10:34,284 --> 00:10:37,878
for less cost. Now, how do we do that? As a

163
00:10:37,884 --> 00:10:41,498
matter of fact, there are many ways to do that. In fact,

164
00:10:41,664 --> 00:10:45,830
usually it would not be a single strategy that would differentiate,

165
00:10:45,910 --> 00:10:49,686
let's say in two identical conditions, between someone delivering

166
00:10:49,798 --> 00:10:53,534
certain resilience level or service level for

167
00:10:53,572 --> 00:10:56,874
cost a and somebody else delivering exactly the same resilience

168
00:10:56,922 --> 00:10:59,934
level for cost that is higher. Usually it needs to be

169
00:10:59,972 --> 00:11:04,362
a combination of different tools, different methodologies,

170
00:11:04,506 --> 00:11:08,290
caused in a smart way, each and every one to apply

171
00:11:08,440 --> 00:11:12,034
to a specific problem. And the combination would

172
00:11:12,072 --> 00:11:16,226
actually deliver a very proficient solution where achieving

173
00:11:16,338 --> 00:11:20,182
a certain resilient level will be done for

174
00:11:20,316 --> 00:11:24,434
reduced costs. If I'm proficient, I can build a solution

175
00:11:24,482 --> 00:11:27,606
that is very resilient for whats much. If somebody is

176
00:11:27,628 --> 00:11:31,398
less proficient, same level will cost them this much. To sum

177
00:11:31,414 --> 00:11:35,094
up, this part so far is that as we already established,

178
00:11:35,142 --> 00:11:38,250
our end goal is to improve the resilience of our services, right?

179
00:11:38,320 --> 00:11:42,154
To keep our customers happy, to keep ourselves within the service level agreements

180
00:11:42,202 --> 00:11:45,802
and then service level objectives, and to enable

181
00:11:45,866 --> 00:11:49,482
our digital services. In order to achieve better results

182
00:11:49,546 --> 00:11:52,630
in this, we need to be familiar with different methods,

183
00:11:52,730 --> 00:11:56,482
different technologies, different methodologies, right.

184
00:11:56,616 --> 00:12:00,770
And this way we will be able to combine and build the

185
00:12:00,920 --> 00:12:04,926
right combination of different approaches to resilience that

186
00:12:04,968 --> 00:12:08,678
will be right for us and for our particular

187
00:12:08,764 --> 00:12:12,386
use. Case so far about resilience, generic mitigations,

188
00:12:12,498 --> 00:12:16,630
whats are these and how are they even related? So, a mitigation

189
00:12:17,450 --> 00:12:20,642
is defined as any action taken to prevent

190
00:12:20,786 --> 00:12:24,250
certain impact of outage or breakage on our service,

191
00:12:24,320 --> 00:12:27,866
on our system, in production. Applying an emergency hot fix to

192
00:12:27,888 --> 00:12:31,470
production because something has been broken down,

193
00:12:31,620 --> 00:12:35,098
that's a mitigation. Connecting to a production machine

194
00:12:35,194 --> 00:12:38,734
to clean something up, to restart something, as bad

195
00:12:38,772 --> 00:12:41,754
as it may sound, is also a mitigation,

196
00:12:41,882 --> 00:12:45,582
right? Generic mitigation is a mitigation

197
00:12:45,646 --> 00:12:49,826
action. Any, not just the two examples that I previously mentioned that

198
00:12:49,848 --> 00:12:53,422
can be applied to wide variety of outages.

199
00:12:53,566 --> 00:12:57,014
As a matter of fact, sometimes it is being applied when

200
00:12:57,052 --> 00:13:00,786
an outage happens before the source

201
00:13:00,898 --> 00:13:04,082
of outage is fully analyzed

202
00:13:04,146 --> 00:13:07,186
and identified. Wait, whoa, whoa,

203
00:13:07,218 --> 00:13:10,658
whoa. Am I talking about a bad software engineering?

204
00:13:10,754 --> 00:13:14,006
Am I trying to convince you to apply band aids

205
00:13:14,038 --> 00:13:17,594
to sweep the real problems in your software under the rug? I don't know.

206
00:13:17,632 --> 00:13:21,294
Something bloats in the memory. Well, let's restart it once a day and nobody will

207
00:13:21,332 --> 00:13:24,814
notice. Something fills up some partition. Well, let's clean it once

208
00:13:24,852 --> 00:13:27,898
a day or once a week, and again, maybe nobody will notice.

209
00:13:27,994 --> 00:13:31,566
No, this is

210
00:13:31,668 --> 00:13:35,202
definitely not what I'm talking about.

211
00:13:35,336 --> 00:13:38,926
Generic mitigations is a concept that was born

212
00:13:39,038 --> 00:13:43,406
in the world's most advanced from the sort of like software

213
00:13:43,598 --> 00:13:46,846
architecture and operations quality organizations,

214
00:13:46,958 --> 00:13:49,646
organizations such as Google, such as Facebook.

215
00:13:49,838 --> 00:13:53,480
So oraze, actually, in order to explain

216
00:13:53,930 --> 00:13:57,730
a generic mitigation concept, let's look at a typical timeline

217
00:13:57,810 --> 00:14:01,754
of an outage. Something where a certain problem happens

218
00:14:01,872 --> 00:14:05,706
to your system or service. How does it go? So naturally, it begins with

219
00:14:05,728 --> 00:14:09,906
a source, right? Something bad happens, hopefully. Then a monitoring

220
00:14:09,958 --> 00:14:13,566
system identifies certain symptom of something bad

221
00:14:13,588 --> 00:14:17,040
that has happened and raises an alert, maybe more than one.

222
00:14:17,730 --> 00:14:21,534
Then something or someone looks at these

223
00:14:21,572 --> 00:14:25,330
alerts and tries to understand the context,

224
00:14:26,070 --> 00:14:29,170
figure out the exact impacts and boundaries.

225
00:14:29,910 --> 00:14:33,314
Then potentially a triage occurs, right? Because remember I mentioned that

226
00:14:33,352 --> 00:14:36,786
alerts sometimes show us symptoms of a

227
00:14:36,808 --> 00:14:40,326
problem. So triage would try to figure out, okay, these are the

228
00:14:40,348 --> 00:14:43,526
systems, but what is the actual problem? Then we

229
00:14:43,548 --> 00:14:47,314
would usually perform root cause analysis to understand what causes

230
00:14:47,362 --> 00:14:50,070
the problem. We will implement,

231
00:14:50,230 --> 00:14:53,942
test, review the fix, and we will deploy to production

232
00:14:54,086 --> 00:14:57,878
this box chaos, a different color. Because this is where the impact

233
00:14:58,054 --> 00:15:01,962
on the users of our system. This is where it ends,

234
00:15:02,026 --> 00:15:05,902
right? This thing is taking time,

235
00:15:06,036 --> 00:15:09,070
right? How much time? Well, you know what,

236
00:15:09,140 --> 00:15:12,786
actually it really varies, right? We've seen outages being

237
00:15:12,808 --> 00:15:16,946
resolved within mere minutes. And unfortunately, we've all seen outages even

238
00:15:16,968 --> 00:15:20,820
again at world's leading digital services that take hours,

239
00:15:21,910 --> 00:15:26,482
I'm afraid to say, sometimes even days. How about considering

240
00:15:26,626 --> 00:15:30,466
an alternative timeline where sometime

241
00:15:30,498 --> 00:15:33,974
at the triage stage, where we start understanding where

242
00:15:34,012 --> 00:15:37,826
the real problem is. Instead of diving into analyzing it

243
00:15:37,868 --> 00:15:41,574
further, we apply a mitigations strategy

244
00:15:41,702 --> 00:15:45,418
that restores the service to its operation, and only then

245
00:15:45,504 --> 00:15:49,626
we perform root cause analysis. We develop a fix and

246
00:15:49,648 --> 00:15:53,262
we deploy it to production. As you can see, there is

247
00:15:53,316 --> 00:15:56,458
a time difference here in the outage,

248
00:15:56,554 --> 00:15:59,818
right? This is our gain

249
00:15:59,914 --> 00:16:03,646
in our service level objectives. This is the gain of our service users

250
00:16:03,678 --> 00:16:07,442
because service becomes operational earlier. How much

251
00:16:07,496 --> 00:16:11,442
earlier? Well, you know what, let's take just a small piece of this

252
00:16:11,496 --> 00:16:15,266
whole chain, a time it takes to a

253
00:16:15,288 --> 00:16:19,026
certain fix once it's implemented and verified

254
00:16:19,138 --> 00:16:22,246
to be deployed to production. So as recently as a couple of weeks

255
00:16:22,268 --> 00:16:25,910
ago, there has been a discussion thread on Twitter between

256
00:16:26,060 --> 00:16:29,674
leading practitioners. How quick should

257
00:16:29,712 --> 00:16:33,782
our code be delivered to production in very modern,

258
00:16:33,846 --> 00:16:37,386
continuous deployment, progressive delivery environments for

259
00:16:37,408 --> 00:16:41,218
it CTo be considered good enough. And for instance, the consensus

260
00:16:41,254 --> 00:16:45,038
there was that anything sort of like around or within the boundaries of 15

261
00:16:45,124 --> 00:16:48,538
minutes, 1515 is considered

262
00:16:48,554 --> 00:16:52,494
to be good. So just whats small piece is 15 minutes

263
00:16:52,612 --> 00:16:56,306
of an outage, maybe complete, maybe partial of

264
00:16:56,328 --> 00:17:00,194
your service to its customers. Let's not even talk about how much time it

265
00:17:00,232 --> 00:17:03,906
can take. You CTo understand the root cause to implement the

266
00:17:03,928 --> 00:17:07,570
fix, to verify, review the fix, make sure that it's these correct

267
00:17:07,640 --> 00:17:11,558
fix, even if the right people to do the analysis and the fix and

268
00:17:11,564 --> 00:17:14,902
these review are currently available. Or maybe they're not.

269
00:17:14,956 --> 00:17:19,306
Or maybe it's the middle of the night, right? This game

270
00:17:19,488 --> 00:17:23,654
is absolutely critical and as you can clearly

271
00:17:23,702 --> 00:17:27,286
see, it doesn't come at the expense of understanding

272
00:17:27,318 --> 00:17:31,038
what went wrong, fixing it and making sure that it never

273
00:17:31,124 --> 00:17:35,086
ever happens again. Not only it exactly, but anything like it.

274
00:17:35,188 --> 00:17:38,570
It is all about having a set of tools

275
00:17:38,730 --> 00:17:43,822
that allows us to return our service to production earlier.

276
00:17:43,966 --> 00:17:47,906
That's what the purpose of generic mitigations is.

277
00:17:48,088 --> 00:17:51,538
Interested now you would like to ask me

278
00:17:51,704 --> 00:17:55,026
for examples of generic mitigations. Well, I'm glad you may

279
00:17:55,048 --> 00:17:58,646
have asked this question. Let's look at a couple of patterns to

280
00:17:58,668 --> 00:18:01,510
sort of like explain what I'm talking here about.

281
00:18:01,660 --> 00:18:04,674
Rollback. Rollback of any kind, business logic,

282
00:18:04,722 --> 00:18:08,674
binary executing it, configuration change data status,

283
00:18:08,722 --> 00:18:10,550
rollback to last known,

284
00:18:12,010 --> 00:18:15,194
sort of like working started. Some people may say, well yeah,

285
00:18:15,232 --> 00:18:19,126
rollback is very simple. Of course we support rollback. I mean we did support rolling

286
00:18:19,158 --> 00:18:23,470
out the update in the first place. But unfortunately it is not as

287
00:18:23,620 --> 00:18:26,922
simple as it may sound. In multicomponent

288
00:18:26,986 --> 00:18:31,098
system with dependencies, with data schema slicing,

289
00:18:31,274 --> 00:18:35,550
being confident to perform a multicomponent rollback,

290
00:18:35,630 --> 00:18:38,980
testing it from time to time, being able to

291
00:18:39,350 --> 00:18:42,482
remorselessly run it in production, to return it to

292
00:18:42,536 --> 00:18:45,862
a solid started. That's not simple.

293
00:18:45,996 --> 00:18:49,346
That requires preparation, that requires thought, that requires

294
00:18:49,378 --> 00:18:52,754
testing. Let's look at a different generic mitigation pattern.

295
00:18:52,882 --> 00:18:55,974
So, upsizing or downsizing more

296
00:18:56,012 --> 00:18:59,094
and more systems that are building cloud native architectures,

297
00:18:59,222 --> 00:19:02,918
supports, horizontal or vertical auto scaling,

298
00:19:03,014 --> 00:19:06,758
usually within certain boundaries. Sometimes, especially when we're

299
00:19:06,774 --> 00:19:10,546
talking about scaling things down, human interaction

300
00:19:10,598 --> 00:19:15,018
and human intervention should be very much desired.

301
00:19:15,194 --> 00:19:19,002
And again, scaling up a single stateless component,

302
00:19:19,146 --> 00:19:22,662
if you're using a modern orchestrator, probably sounds not that complicated.

303
00:19:22,826 --> 00:19:26,594
Scaling out without taking into consideration the

304
00:19:26,632 --> 00:19:29,842
relationship between different components may actually

305
00:19:29,976 --> 00:19:34,030
introduce more noise and just shift the problem in your architecture.

306
00:19:34,190 --> 00:19:37,366
This is where a strategy for how do you

307
00:19:37,388 --> 00:19:41,062
scale things up? How do you scale things down should be well thought of,

308
00:19:41,116 --> 00:19:44,578
well rehearsed, and of course when needed, applied.

309
00:19:44,674 --> 00:19:48,794
So again, not as simple as just launching a couple

310
00:19:48,832 --> 00:19:51,382
of more pod replicas,

311
00:19:51,526 --> 00:19:55,366
draining traffic from certain instances, and then flipping

312
00:19:55,398 --> 00:19:59,874
it over to a different cluster, different member, different region.

313
00:20:00,022 --> 00:20:03,182
Again, something that is a great tool

314
00:20:03,316 --> 00:20:06,650
when delivering multiregion multilocation

315
00:20:06,730 --> 00:20:09,914
systems. This flip of a traffic,

316
00:20:10,042 --> 00:20:13,946
managing it so that there is as little impact

317
00:20:13,978 --> 00:20:17,138
as possible on the service users. The smallest amount of

318
00:20:17,144 --> 00:20:20,626
impact possible, of course, is zero, and that's the desired one. That's what they would

319
00:20:20,648 --> 00:20:24,370
want you to do. Let's hope that we can do it again.

320
00:20:24,520 --> 00:20:28,326
Rehearsing that, making sure whats it is operational so that

321
00:20:28,348 --> 00:20:32,182
the least technical person in your organization in the middle of a night will

322
00:20:32,236 --> 00:20:35,846
be able to execute the strategy. Strategy really needed to

323
00:20:35,868 --> 00:20:39,330
be thought over is whats all. No, of course not. There are

324
00:20:39,340 --> 00:20:42,666
many, many more. Let's give a couple of more examples just to open our eyes.

325
00:20:42,688 --> 00:20:45,946
CTO various possibilities. So quarantining a

326
00:20:45,968 --> 00:20:49,334
certain instance, a certain binary, a certain cluster

327
00:20:49,382 --> 00:20:53,274
member in a way that we remove it from the rotation

328
00:20:53,322 --> 00:20:56,990
so it stops handling production traffic that gets

329
00:20:57,060 --> 00:21:01,022
rebalanced among other healthy peers, and then

330
00:21:01,076 --> 00:21:05,230
investigating the root cause of the problem. On this particular instance,

331
00:21:05,390 --> 00:21:09,410
a block list. Being able to block a specific user, a specific

332
00:21:09,480 --> 00:21:13,710
account or session that creates challenging,

333
00:21:13,790 --> 00:21:16,958
problematic series of requests, queries, et cetera.

334
00:21:17,054 --> 00:21:20,678
Being able to do this in real time. Being able to do this

335
00:21:20,764 --> 00:21:24,342
granularly. Being able not just CTO black and white,

336
00:21:24,396 --> 00:21:27,846
block or unblock it, but maybe actually introduce guardrails or

337
00:21:27,868 --> 00:21:31,610
quotas on it. Preparing a strategy for that could again

338
00:21:31,680 --> 00:21:35,510
be a lifesaver in production situations. If it is mature,

339
00:21:35,590 --> 00:21:39,574
if it is well tested, if it is again applicable by the least technical

340
00:21:39,622 --> 00:21:43,546
member of your staff in the middle of a night if needed. Disabling a noisy

341
00:21:43,578 --> 00:21:47,120
neighbor. Imagine a shared resource, a database, for example.

342
00:21:47,890 --> 00:21:51,694
These extreme pressure from

343
00:21:51,812 --> 00:21:55,166
one set of components may impact the ability to operate

344
00:21:55,198 --> 00:21:58,734
other set of components. Identifying the source of the noise

345
00:21:58,862 --> 00:22:01,774
again, inflicting guardrails,

346
00:22:01,822 --> 00:22:05,186
quotas, or maybe pausing it for a certain period of

347
00:22:05,208 --> 00:22:08,486
time to release some more critical processes. That's a

348
00:22:08,508 --> 00:22:12,006
strategy. Thinking about it, thinking how to make

349
00:22:12,028 --> 00:22:15,462
it repeatable, how to make it usable in real time. This is definitely

350
00:22:15,516 --> 00:22:19,426
a generic mitigation pattern that many world leading organizations use

351
00:22:19,468 --> 00:22:23,142
today. So to sum up this part, generic mitigations

352
00:22:23,286 --> 00:22:26,918
are not practices of applying patches and band aids to production

353
00:22:27,014 --> 00:22:30,086
and sweeping the real problems in your products under these rug.

354
00:22:30,198 --> 00:22:34,094
No, it is a practice of building strategies and then

355
00:22:34,132 --> 00:22:38,666
tools for improving your ability to meet your own service level objectives

356
00:22:38,778 --> 00:22:42,570
and to get your service back to operational state faster without

357
00:22:42,660 --> 00:22:46,066
compromising on root cause analysis, quality of your code,

358
00:22:46,168 --> 00:22:50,194
management of your technical debts, definitely building them,

359
00:22:50,312 --> 00:22:54,274
testing them, keeping these in a warm state so

360
00:22:54,312 --> 00:22:58,134
that you're not afraid to use them. This is a very important

361
00:22:58,252 --> 00:23:01,846
tool in the toolbox of being proficient in

362
00:23:01,868 --> 00:23:05,762
building resilient systems. Very, very important notion.

363
00:23:05,826 --> 00:23:08,978
So how does the two connect Kaus? Engineering on one end,

364
00:23:09,084 --> 00:23:12,554
engineering mitigations on another end. And when they

365
00:23:12,592 --> 00:23:16,454
are used together, does the end results

366
00:23:16,582 --> 00:23:19,818
become greater than just the impact of each and every one of them, or not?

367
00:23:19,904 --> 00:23:23,882
So calcium engineering can recreate unexpected,

368
00:23:23,946 --> 00:23:27,326
irregular, turbulent conditions similar to those that

369
00:23:27,348 --> 00:23:31,354
we will encounter in production, and sort of prepare

370
00:23:31,402 --> 00:23:35,634
us for the production challenges. Generic mitigations is

371
00:23:35,672 --> 00:23:39,022
a very important tool for meeting those production challenges

372
00:23:39,166 --> 00:23:43,534
and keeping our service level objectives, while keeping

373
00:23:43,582 --> 00:23:47,206
our expenses on reliability at bay. How does

374
00:23:47,228 --> 00:23:51,046
the combination of the two actually provide a greater value than

375
00:23:51,068 --> 00:23:55,026
just each and every one of them? Here's how. So, generic mitigations.

376
00:23:55,218 --> 00:23:58,874
Using them, we prepare ourselves for keeping these service operational under

377
00:23:58,912 --> 00:24:02,454
unexpected conditions. And how do we know that the investment

378
00:24:02,502 --> 00:24:05,754
here was made prudently? Because we tested with

379
00:24:05,792 --> 00:24:09,770
comes engineering experiments and we indeed see that now

380
00:24:09,840 --> 00:24:13,706
different kinds of experience gets remediated

381
00:24:13,818 --> 00:24:17,834
by the generic mitigations. Furthermore, these calcium engineering

382
00:24:17,882 --> 00:24:21,662
experiments surface points where we are still not

383
00:24:21,716 --> 00:24:24,702
ready for production fault tolerance.

384
00:24:24,846 --> 00:24:28,878
And then it's a continuous cycle of us strengthening

385
00:24:28,974 --> 00:24:32,670
these areas, again potentially with generic mitigations.

386
00:24:32,830 --> 00:24:36,722
And together it really helps us manage our investment.

387
00:24:36,786 --> 00:24:40,070
Right. Remember this cost of delivering a very resilient service,

388
00:24:40,220 --> 00:24:43,810
how do we do this proficiently? Indeed, by surfacing

389
00:24:43,890 --> 00:24:46,982
where our biggest problems are, by providing cost

390
00:24:47,036 --> 00:24:50,566
effective tools to resolve these problems, by immediately verifying

391
00:24:50,598 --> 00:24:55,046
that these tools indeed have resolved these problems, and furthermore,

392
00:24:55,158 --> 00:24:59,318
building a cycle of prioritized surfacing our next investment,

393
00:24:59,494 --> 00:25:02,734
et cetera, et cetera. This is where the combination of

394
00:25:02,772 --> 00:25:06,174
these two is extremely powerful. Now, what would

395
00:25:06,212 --> 00:25:09,806
happen if we just invested in comes engineering? Well, we still need

396
00:25:09,828 --> 00:25:13,626
to resolve the problems that these experiments surfaced.

397
00:25:13,738 --> 00:25:17,698
If we don't have a rich tool set of how to deal with these,

398
00:25:17,784 --> 00:25:21,566
we will end up investing quite a lot in rearchitecture

399
00:25:21,678 --> 00:25:25,282
and many, many other expensive things where this may not be

400
00:25:25,336 --> 00:25:28,806
the only or even the best solution for the problem. If we invest just

401
00:25:28,828 --> 00:25:32,630
in generic mitigations, our ability to test them in real life is

402
00:25:32,700 --> 00:25:36,166
very restricted. I mean, sure we can recreate like

403
00:25:36,188 --> 00:25:39,482
surrogate scenarios where they would be caused into

404
00:25:39,536 --> 00:25:43,146
action, of course, but then again, our confidence in

405
00:25:43,168 --> 00:25:46,586
the ability to withstand the real production turbulence will be

406
00:25:46,608 --> 00:25:50,070
much, much lower and it will be more difficult,

407
00:25:50,160 --> 00:25:53,374
not impossible, but still much more difficult to figure out.

408
00:25:53,492 --> 00:25:56,970
Where do we start? Which particular mechanism

409
00:25:57,050 --> 00:26:01,326
will give us the highest return on investment in terms of

410
00:26:01,508 --> 00:26:04,898
raising our level of resilience for the cost and then the

411
00:26:04,904 --> 00:26:08,722
second highest, and so on and so forth. This is actually

412
00:26:08,856 --> 00:26:12,702
where the combination of two is really helpful

413
00:26:12,846 --> 00:26:16,466
as a continuous improvement process in the

414
00:26:16,488 --> 00:26:20,470
resilience of our software services. Well, this is pretty much

415
00:26:20,540 --> 00:26:24,194
what I wanted to comes in this talk, some afterthoughts

416
00:26:24,242 --> 00:26:28,154
and maybe comes suggested action items if you're considering to do something about

417
00:26:28,192 --> 00:26:31,926
it. So what do you need to develop and use generic

418
00:26:31,958 --> 00:26:36,102
mitigations? First, you need a platform for developing

419
00:26:36,246 --> 00:26:39,562
these logical flows. You would ask,

420
00:26:39,616 --> 00:26:43,194
wait, what's wrong with just using the, I don't know, programming languages

421
00:26:43,242 --> 00:26:46,606
I use today and so on? And there is nothing wrong. Still, you need to

422
00:26:46,628 --> 00:26:50,282
verify that you're using the right tool for the right purpose.

423
00:26:50,426 --> 00:26:53,966
And these mitigations, you should be able to

424
00:26:54,068 --> 00:26:57,682
make them modular. You should be able to write them

425
00:26:57,736 --> 00:27:00,994
once and then reuse them in different conditions with

426
00:27:01,032 --> 00:27:04,514
different strategies inside the different environments. You should be able to

427
00:27:04,552 --> 00:27:08,206
share them right between users of similar components that

428
00:27:08,248 --> 00:27:11,922
face similar challenges. Just as any software,

429
00:27:11,986 --> 00:27:15,526
it needs to undergo software development lifecycle. You need to version it,

430
00:27:15,548 --> 00:27:18,502
you need to review it, you need CTO test it itself, et cetera, et cetera.

431
00:27:18,566 --> 00:27:22,346
So thinking about the right way

432
00:27:22,368 --> 00:27:26,646
to develop these flows

433
00:27:26,838 --> 00:27:30,950
is very important. Secondly, you also need

434
00:27:31,040 --> 00:27:34,826
a platform that will trigger, or maybe in a broadly

435
00:27:34,858 --> 00:27:38,974
sense, orchestrate these generic mitigations and monitor how

436
00:27:39,012 --> 00:27:43,278
successfully they are applied, involve humans in the loop

437
00:27:43,454 --> 00:27:46,820
if required, et cetera. It is very important

438
00:27:47,430 --> 00:27:50,910
that the infrastructure for orchestrating these mitigations

439
00:27:51,070 --> 00:27:54,158
is separate from your production infrastructure.

440
00:27:54,334 --> 00:27:58,626
Otherwise, when that production infrastructure is impacted,

441
00:27:58,818 --> 00:28:01,942
you will not be able to use it to mitigations itself.

442
00:28:02,076 --> 00:28:05,494
Right? This gives rise CTO things such as

443
00:28:05,612 --> 00:28:08,986
the observer cluster pattern. That may be

444
00:28:09,008 --> 00:28:12,086
a good discussion for another time. Visibility.

445
00:28:12,198 --> 00:28:15,638
Every time these mitigations are invoked, it is of utmost importance

446
00:28:15,814 --> 00:28:19,114
to be able to analyze what exactly is happening,

447
00:28:19,232 --> 00:28:22,574
how successful their application was and so on and so

448
00:28:22,612 --> 00:28:26,894
forth and again collect and process data for

449
00:28:26,932 --> 00:28:31,402
learning. So if you're seriously considering going into generic mitigations,

450
00:28:31,546 --> 00:28:35,002
these are the main two fields I would recommend looking into. Similarly,

451
00:28:35,066 --> 00:28:38,386
when talking about house engineering experiments, whats do

452
00:28:38,408 --> 00:28:42,114
I need to be able to perform these successfully and

453
00:28:42,312 --> 00:28:46,014
have them run efficiently in my environment very similarly.

454
00:28:46,062 --> 00:28:49,506
So I need a platform for injecting these

455
00:28:49,688 --> 00:28:53,282
comes variants into various layers of my architecture.

456
00:28:53,426 --> 00:28:56,690
And a good set of experiments

457
00:28:56,770 --> 00:28:59,914
should actually target different layers on these infrastructure level,

458
00:28:59,952 --> 00:29:04,026
on the network level, on the user simulation level. Again, because this

459
00:29:04,128 --> 00:29:07,674
is the set of different directions from

460
00:29:07,712 --> 00:29:11,294
where the variance in my real production would come and therefore my

461
00:29:11,332 --> 00:29:14,014
experiments needed to be hopefully close to that.

462
00:29:14,132 --> 00:29:17,806
Secondly, a platform for conducting experiments in

463
00:29:17,828 --> 00:29:21,294
a responsible manner in my environments, something that

464
00:29:21,332 --> 00:29:24,670
comes with a lot of guardrails and an ability to contain,

465
00:29:24,750 --> 00:29:27,890
maybe to compartmentalize the experiment, right.

466
00:29:27,960 --> 00:29:31,614
Extremely important data collection, learning, an ability

467
00:29:31,662 --> 00:29:34,942
CTO stop the experiment at any given point where things

468
00:29:35,096 --> 00:29:38,646
have too much of an impact if containment has failed. Picking the

469
00:29:38,668 --> 00:29:42,594
right platform here again is extremely

470
00:29:42,642 --> 00:29:45,782
critical to success and to getting

471
00:29:45,836 --> 00:29:49,546
return on investment in your investment in comes engineering as sort

472
00:29:49,568 --> 00:29:52,954
of like the final afterthoughts. I'd like to leave you

473
00:29:52,992 --> 00:29:56,822
with a thought of if what I've been telling

474
00:29:56,966 --> 00:30:00,426
makes sense to you, and if you are thinking of applying

475
00:30:00,458 --> 00:30:04,522
the combination of these two methodologies,

476
00:30:04,666 --> 00:30:07,950
how would a platform or a methodology for

477
00:30:08,020 --> 00:30:11,278
continuously applying the combination look? Just a

478
00:30:11,284 --> 00:30:14,478
thought. So, to sum up, I'd like to

479
00:30:14,564 --> 00:30:18,126
thank you so much for listening in. I would

480
00:30:18,148 --> 00:30:21,230
like to hope that whatever we've seen here makes sense.

481
00:30:21,300 --> 00:30:24,766
Maybe you have picked certain ideas, maybe you'll be able to implement some of

482
00:30:24,788 --> 00:30:28,454
these in your environment. For further reading, there is a growing amount

483
00:30:28,492 --> 00:30:31,686
of information about generic mitigations. There is a

484
00:30:31,708 --> 00:30:35,640
fair amount of information about comes engineering and various ways to apply that.

485
00:30:36,010 --> 00:30:39,140
I'm leonid from stackpulse. Thank you so much for tuning in.

