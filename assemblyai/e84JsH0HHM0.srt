1
00:00:21,130 --> 00:00:24,902
Good night to everyone. Thank you very much

2
00:00:24,996 --> 00:00:28,440
for inviting me to give this talk.

3
00:00:29,290 --> 00:00:33,110
My name is Alejandro Mercado, I'm from Mexico.

4
00:00:33,610 --> 00:00:36,630
I am web and mobile developer,

5
00:00:37,210 --> 00:00:40,994
adding some DevOps tools

6
00:00:41,042 --> 00:00:42,310
under my belt.

7
00:00:45,370 --> 00:00:50,014
Very honored to be here to talk about

8
00:00:50,092 --> 00:00:54,430
this experiment that I made almost

9
00:00:54,500 --> 00:01:00,590
a year ago. It's about having

10
00:01:00,660 --> 00:01:04,820
some c plus plus code in web.

11
00:01:05,830 --> 00:01:09,522
Something a little weird I can

12
00:01:09,576 --> 00:01:13,506
say, but pretty fun. So thank

13
00:01:13,528 --> 00:01:16,806
you very much. Let's start.

14
00:01:16,988 --> 00:01:23,094
I'm going to share the

15
00:01:23,132 --> 00:01:26,770
presentation. This article is on medium

16
00:01:26,930 --> 00:01:33,702
if anyone have interest to

17
00:01:33,756 --> 00:01:37,578
read. When I write. Well, I write of course about

18
00:01:37,664 --> 00:01:40,810
web technologies and the bops,

19
00:01:42,210 --> 00:01:45,470
so you can follow me on medium.

20
00:01:48,130 --> 00:01:52,014
This article, as you may know, is back to the future,

21
00:01:52,132 --> 00:01:55,794
from C Plus plus to angular. For me it

22
00:01:55,832 --> 00:01:59,810
was like chalk minding

23
00:02:01,030 --> 00:02:04,594
to figure out how can we do

24
00:02:04,632 --> 00:02:08,054
that to have a

25
00:02:08,092 --> 00:02:12,280
real old c or c plus plus code?

26
00:02:12,970 --> 00:02:17,174
How can we handle it in a

27
00:02:17,212 --> 00:02:21,450
new framework like angular react or this

28
00:02:21,600 --> 00:02:24,922
Javascript state

29
00:02:24,976 --> 00:02:26,810
of the art framework?

30
00:02:29,070 --> 00:02:32,910
So that was the curious

31
00:02:33,890 --> 00:02:38,126
and what led me to write this article and

32
00:02:38,148 --> 00:02:39,790
to make this experiment.

33
00:02:45,490 --> 00:02:49,490
Maybe not, it depends of your

34
00:02:49,560 --> 00:02:53,442
age, but back to the

35
00:02:53,496 --> 00:02:57,142
old school days. I remember writing a lot of C and C plus

36
00:02:57,196 --> 00:03:00,998
plus as my primary language from a

37
00:03:01,004 --> 00:03:02,630
lot of school projects.

38
00:03:04,330 --> 00:03:08,140
As you may know, C and C Plus plus is now

39
00:03:09,070 --> 00:03:12,890
to be a very powerful language. You have

40
00:03:12,960 --> 00:03:16,170
a lot of control with these languages,

41
00:03:16,750 --> 00:03:20,478
and with this control it means

42
00:03:20,564 --> 00:03:21,550
performance.

43
00:03:26,050 --> 00:03:29,850
It's not casualty that a lot of engines

44
00:03:30,010 --> 00:03:33,922
uses C and C Plus plus to

45
00:03:33,976 --> 00:03:37,246
make the games. For instance,

46
00:03:37,358 --> 00:03:40,900
unity or autodesk uses these

47
00:03:41,910 --> 00:03:45,474
gaming giants to make

48
00:03:45,592 --> 00:03:49,430
prairie faster applications. The render

49
00:03:52,410 --> 00:03:57,586
always to deal with graphs in

50
00:03:57,628 --> 00:04:00,774
terms of memory are pretty exceptive.

51
00:04:00,902 --> 00:04:06,954
So you need to have a lot of control to

52
00:04:06,992 --> 00:04:10,140
deal with the performance. It's like a must.

53
00:04:10,610 --> 00:04:14,640
So C and C plus plus are like the

54
00:04:15,890 --> 00:04:19,182
more powerful. I don't know if they're more powerful, but are the

55
00:04:19,236 --> 00:04:22,846
better two languages to deal with that

56
00:04:23,028 --> 00:04:24,350
with graphs.

57
00:04:26,290 --> 00:04:29,914
But nowadays it sounds like a little weird

58
00:04:29,962 --> 00:04:33,840
to do web development with these languages like

59
00:04:34,210 --> 00:04:38,374
C plus Plus, Us prolog, Perl and

60
00:04:38,412 --> 00:04:42,114
many other good languages that are not considered.

61
00:04:42,162 --> 00:04:46,230
Or it was not by any chance

62
00:04:46,300 --> 00:04:50,246
idea to have this as a

63
00:04:50,268 --> 00:04:51,350
web languages.

64
00:04:53,550 --> 00:04:57,482
But things changes

65
00:04:57,616 --> 00:05:00,650
and maybe you have heard about webassembly,

66
00:05:02,210 --> 00:05:05,902
maybe. If not, there is a couple of

67
00:05:06,036 --> 00:05:09,166
links here where you can get the

68
00:05:09,188 --> 00:05:12,126
detail about what is this about?

69
00:05:12,228 --> 00:05:17,874
But the idea is

70
00:05:17,912 --> 00:05:21,522
this bridge between these all

71
00:05:21,576 --> 00:05:24,802
languages and the web

72
00:05:24,856 --> 00:05:28,658
browser that is everywhere. So what's

73
00:05:28,674 --> 00:05:30,120
the deal? Well,

74
00:05:32,490 --> 00:05:36,280
my first approach was to compile just

75
00:05:37,210 --> 00:05:40,870
a c code, something very

76
00:05:40,940 --> 00:05:45,222
easy code. So for

77
00:05:45,276 --> 00:05:49,902
that we used webassembly using

78
00:05:49,996 --> 00:05:53,066
a tool called echemeScript.

79
00:05:53,258 --> 00:05:59,454
So echemeScript to

80
00:05:59,492 --> 00:06:03,182
JavaScript compiler. So that

81
00:06:03,236 --> 00:06:06,494
was the magic. So that

82
00:06:06,532 --> 00:06:10,154
was the first step. The installation and setup

83
00:06:10,202 --> 00:06:13,566
instructions are detailed in the site, so you

84
00:06:13,588 --> 00:06:18,246
can click here to to go directly to the

85
00:06:18,428 --> 00:06:20,870
specification. It's pretty neat.

86
00:06:23,930 --> 00:06:27,042
Well just here I am just verifying

87
00:06:27,106 --> 00:06:31,334
that everything the max scripting

88
00:06:31,382 --> 00:06:35,690
is already installed men's version,

89
00:06:39,070 --> 00:06:43,070
because I was pretty sure that I already have it installed.

90
00:06:46,610 --> 00:06:50,126
After that I made my c code, as you

91
00:06:50,148 --> 00:06:52,880
can see. Now if you remember,

92
00:06:55,030 --> 00:06:58,500
this is pretty basic, the hello world. In c

93
00:06:59,830 --> 00:07:03,726
you can use of course notepad or visual studio

94
00:07:03,758 --> 00:07:07,526
code or whatever you want. But to build the

95
00:07:07,548 --> 00:07:11,350
JavaScript version of this code I

96
00:07:11,420 --> 00:07:14,982
simply specify the c. In this case

97
00:07:15,036 --> 00:07:18,710
it's c, but it can be both c or c plus plus

98
00:07:18,780 --> 00:07:22,650
file. After Dell mcc

99
00:07:24,750 --> 00:07:28,170
use m plus plus to for the compilation,

100
00:07:30,690 --> 00:07:34,590
as you can see here. So this is just

101
00:07:34,660 --> 00:07:38,014
the line, as you can see,

102
00:07:38,052 --> 00:07:42,254
it's pretty neat. So this way I

103
00:07:42,292 --> 00:07:46,174
can generate my files

104
00:07:46,302 --> 00:07:49,682
that are going to be my

105
00:07:49,736 --> 00:07:50,850
web files.

106
00:07:53,190 --> 00:07:57,170
As a result of this I get two files,

107
00:07:57,750 --> 00:08:01,640
the aoud js and the a. Out was

108
00:08:02,090 --> 00:08:05,350
the wasp file is our

109
00:08:05,420 --> 00:08:08,040
webassembly compile code,

110
00:08:08,430 --> 00:08:11,942
and the other one, the js, is our JavaScript

111
00:08:12,006 --> 00:08:15,420
file which contains the runtime support

112
00:08:15,870 --> 00:08:18,220
to load and execute it.

113
00:08:18,910 --> 00:08:22,474
This is something like that, something I

114
00:08:22,512 --> 00:08:24,720
can say in LG level.

115
00:08:25,970 --> 00:08:29,402
So well this is our binary

116
00:08:29,466 --> 00:08:35,250
file. So having

117
00:08:35,320 --> 00:08:41,394
that with

118
00:08:41,432 --> 00:08:45,670
all friend node we can run

119
00:08:45,740 --> 00:08:50,406
this aodges using code so

120
00:08:50,508 --> 00:08:53,458
I can get the output.

121
00:08:53,634 --> 00:08:57,640
In this case, the hello world is pretty simple,

122
00:08:58,590 --> 00:09:02,362
as you can see here, I just

123
00:09:02,416 --> 00:09:05,450
run with code and I get the hell award.

124
00:09:07,310 --> 00:09:12,086
But it was like the

125
00:09:12,128 --> 00:09:15,760
aha moment, a very

126
00:09:17,890 --> 00:09:21,920
particular moment. Well, at least for me

127
00:09:22,630 --> 00:09:26,878
to have this from c to javascript

128
00:09:26,974 --> 00:09:28,420
was like wow,

129
00:09:31,910 --> 00:09:37,080
because it was something

130
00:09:39,450 --> 00:09:42,774
I was like joining, something that I

131
00:09:42,812 --> 00:09:46,694
made 20 years ago with something that I am

132
00:09:46,892 --> 00:09:50,634
using nowadays. So because of

133
00:09:50,672 --> 00:09:53,898
that I can start

134
00:09:54,064 --> 00:09:56,010
in a lot of possibilities.

135
00:09:57,310 --> 00:10:00,926
That's why for me was like a

136
00:10:00,948 --> 00:10:04,574
very happy moment. So to generate the

137
00:10:04,612 --> 00:10:08,750
HTML because well in this example it's just

138
00:10:08,900 --> 00:10:12,506
the hello world, but to generate the

139
00:10:12,548 --> 00:10:15,970
HTML with MX script,

140
00:10:16,710 --> 00:10:20,386
we can generate the HTML output with

141
00:10:20,488 --> 00:10:23,730
something like that, with the output

142
00:10:24,970 --> 00:10:28,278
indicating the file, in this case

143
00:10:28,364 --> 00:10:30,630
hello HTML,

144
00:10:35,130 --> 00:10:39,130
of course we can see, or we need to see it in our browser,

145
00:10:39,710 --> 00:10:43,210
and for that we need a web server.

146
00:10:44,750 --> 00:10:49,180
For this experiment I find that

147
00:10:50,290 --> 00:10:54,350
a pretty easy way to do that was using the Python,

148
00:10:54,930 --> 00:10:58,106
the simple HTTP server.

149
00:10:58,298 --> 00:11:01,534
Now with just one line you can get the

150
00:11:01,572 --> 00:11:04,580
Python server running,

151
00:11:05,910 --> 00:11:09,454
but of course you can use any server,

152
00:11:09,502 --> 00:11:12,722
web server that you want and just

153
00:11:12,776 --> 00:11:16,370
open them, of course in localhost,

154
00:11:16,450 --> 00:11:19,890
in this port the file,

155
00:11:20,050 --> 00:11:24,214
so you can see the

156
00:11:24,252 --> 00:11:27,794
output. Then the output,

157
00:11:27,842 --> 00:11:31,880
as I said, is pretty simple because it's just a hello world.

158
00:11:32,590 --> 00:11:35,994
But the potential is

159
00:11:36,032 --> 00:11:39,660
enormous. It's from here. Now this is the starting point

160
00:11:40,050 --> 00:11:44,286
because you

161
00:11:44,308 --> 00:11:46,960
can start doing a lot of crazy things.

162
00:11:47,330 --> 00:11:50,494
And this is where I

163
00:11:50,532 --> 00:11:55,234
get wild, because I

164
00:11:55,272 --> 00:11:59,714
remember when

165
00:11:59,752 --> 00:12:03,714
I was at college, I have this

166
00:12:03,752 --> 00:12:07,800
subject, this graphics programming 101,

167
00:12:11,050 --> 00:12:15,160
we did a lot of these things about to draw

168
00:12:15,850 --> 00:12:16,600
different,

169
00:12:20,010 --> 00:12:23,590
to draw and interact with different figures,

170
00:12:24,010 --> 00:12:25,830
to draw circles,

171
00:12:26,410 --> 00:12:30,494
donuts, toroids and a lot of crazy things

172
00:12:30,612 --> 00:12:34,654
like this that you can see. And it was

173
00:12:34,852 --> 00:12:38,480
in this subject, in graphics programming 101,

174
00:12:39,090 --> 00:12:43,314
we use it at

175
00:12:43,352 --> 00:12:47,470
that time, we use the SDL

176
00:12:47,550 --> 00:12:52,114
AP that this was the

177
00:12:52,152 --> 00:12:56,498
simple direct media layer that was a

178
00:12:56,504 --> 00:13:00,038
cross platform, because it's still available. It's a

179
00:13:00,044 --> 00:13:03,986
cross platform development library designed

180
00:13:04,018 --> 00:13:06,930
to provide low level access to audio, keyboard,

181
00:13:07,010 --> 00:13:10,262
mouse, joystick and graphic hardware.

182
00:13:10,406 --> 00:13:14,490
So via OpenGL and direct

183
00:13:14,560 --> 00:13:17,930
3d, so we can not just draw things and move

184
00:13:18,000 --> 00:13:21,550
things and animate things, if not to

185
00:13:21,620 --> 00:13:25,214
interact. So we were

186
00:13:25,252 --> 00:13:29,118
opening like a whole world about

187
00:13:29,204 --> 00:13:32,320
games, about a lot of,

188
00:13:32,870 --> 00:13:36,866
I mean it was the

189
00:13:36,888 --> 00:13:41,090
imagination, it was just the limit with all these

190
00:13:41,240 --> 00:13:46,006
graphics and libraries. But as

191
00:13:46,108 --> 00:13:49,398
I wrote here,

192
00:13:49,564 --> 00:13:55,640
this exercise was made in 97,

193
00:13:56,410 --> 00:13:58,200
22 years ago.

194
00:14:02,810 --> 00:14:08,460
The surprises is still working well,

195
00:14:10,130 --> 00:14:13,870
some not just of course to communicate with was

196
00:14:14,020 --> 00:14:18,430
in webassembly to communicate,

197
00:14:19,010 --> 00:14:22,622
but it's almost the same code.

198
00:14:22,756 --> 00:14:26,110
So as you can fear

199
00:14:27,110 --> 00:14:30,670
at that time, we don't have angular, we don't have react,

200
00:14:30,750 --> 00:14:34,434
we don't have spelt or

201
00:14:34,472 --> 00:14:38,200
any view or any other fancy front end

202
00:14:39,130 --> 00:14:40,150
framework.

203
00:14:42,970 --> 00:14:46,850
Well that's the experiment

204
00:14:46,930 --> 00:14:50,870
that I was trying to accomplish

205
00:14:50,950 --> 00:14:55,322
with these

206
00:14:55,376 --> 00:14:58,090
new possibilities about webassembly.

207
00:14:59,150 --> 00:15:02,906
So since some other code,

208
00:15:03,008 --> 00:15:06,542
this was purse, the following one

209
00:15:06,596 --> 00:15:09,520
is with c plus plus,

210
00:15:10,610 --> 00:15:14,210
it's about a nice color cube.

211
00:15:15,110 --> 00:15:18,642
Also using this library that

212
00:15:18,696 --> 00:15:22,194
I already mentioned, the SDL. This is the

213
00:15:22,312 --> 00:15:26,178
sample direct media layer. The idea

214
00:15:26,264 --> 00:15:29,110
is just to grade this cube,

215
00:15:29,530 --> 00:15:33,880
but with some gradients and they move and change

216
00:15:34,650 --> 00:15:38,874
the faces as

217
00:15:38,912 --> 00:15:41,340
well. You can access the repo here.

218
00:15:43,150 --> 00:15:47,322
You are curious. This is the code in

219
00:15:47,376 --> 00:15:51,550
GitHub. If anyone wants to replicate

220
00:15:52,210 --> 00:15:55,070
some of these exercises,

221
00:15:57,170 --> 00:16:01,630
you have available documentation and resources.

222
00:16:05,350 --> 00:16:06,100
Well,

223
00:16:08,870 --> 00:16:16,120
so the, the tricky part where I

224
00:16:16,570 --> 00:16:20,662
spent more time of course was between

225
00:16:20,716 --> 00:16:25,026
the communication, you have some language,

226
00:16:25,138 --> 00:16:28,966
C code, but you have something in the

227
00:16:28,988 --> 00:16:32,966
middle there was that you want to communicate

228
00:16:33,158 --> 00:16:37,370
or to try to make a javascript,

229
00:16:38,510 --> 00:16:44,142
to work it in JavaScript. So with

230
00:16:44,196 --> 00:16:47,360
this CPP C plus plus code.

231
00:16:50,370 --> 00:16:54,290
I'm not going in detail to the code,

232
00:16:54,440 --> 00:16:56,180
this is c plus plus.

233
00:16:57,990 --> 00:17:03,074
But if

234
00:17:03,112 --> 00:17:06,982
you want to trade, you have to take

235
00:17:07,036 --> 00:17:10,440
care of these kind of things.

236
00:17:12,010 --> 00:17:14,710
How you are going to communicate?

237
00:17:16,250 --> 00:17:20,198
Mcscript provides a number of hepard methods

238
00:17:20,294 --> 00:17:24,550
that making interactions between the model and JavaScript

239
00:17:24,630 --> 00:17:27,420
easier. And that's the whole idea,

240
00:17:27,870 --> 00:17:31,580
to take care and to be aware of these

241
00:17:32,350 --> 00:17:33,930
helper methods.

242
00:17:36,110 --> 00:17:39,818
Mm scripting includes a conditional compilation

243
00:17:39,914 --> 00:17:43,120
symbol. This is when you see this

244
00:17:45,330 --> 00:17:48,130
eggmark script like constant.

245
00:17:49,350 --> 00:17:53,310
You can use it to detect if the solution is being compiled

246
00:17:53,390 --> 00:17:58,294
by Mx scripting. So this

247
00:17:58,332 --> 00:18:02,662
is pretty helpful to

248
00:18:02,716 --> 00:18:05,590
run your programs.

249
00:18:07,390 --> 00:18:11,242
So this is the idea. Well, this is

250
00:18:11,296 --> 00:18:14,746
like a

251
00:18:14,768 --> 00:18:18,554
pretty basic explanation because

252
00:18:18,752 --> 00:18:22,618
it can be pretty complex and deeper and deeper,

253
00:18:22,714 --> 00:18:27,054
but the idea is, was just to achieve some

254
00:18:27,092 --> 00:18:30,782
of these experiments and to see

255
00:18:30,836 --> 00:18:32,240
if that is possible.

256
00:18:33,510 --> 00:18:37,410
So we have this external c block

257
00:18:38,790 --> 00:18:41,410
in C plus plus function names.

258
00:18:42,950 --> 00:18:46,130
C plus plus function names can be overload.

259
00:18:46,290 --> 00:18:50,390
So to make sure the name is unique when compiled,

260
00:18:51,290 --> 00:18:53,960
this can happen.

261
00:18:54,970 --> 00:18:58,700
The compiler mangles the name by adding information

262
00:18:59,470 --> 00:19:03,462
to it about the functions parameters. The compiler

263
00:19:03,526 --> 00:19:07,194
changing the names of functions when the code is compiled is

264
00:19:07,232 --> 00:19:10,638
a problem for external code. Wanted to call

265
00:19:10,724 --> 00:19:15,018
a specific method because that method's

266
00:19:15,034 --> 00:19:18,960
name no longer exists. So this is,

267
00:19:19,570 --> 00:19:23,106
I can say the network part where you have

268
00:19:23,128 --> 00:19:24,580
to spend more time.

269
00:19:26,950 --> 00:19:30,930
Well, it's just in the documentation.

270
00:19:33,430 --> 00:19:37,494
So you want to tell the compiler to

271
00:19:37,532 --> 00:19:41,206
not adjust the name of the method that the JavaScript code will

272
00:19:41,228 --> 00:19:44,534
be calling. To do this, you need to

273
00:19:44,572 --> 00:19:48,310
include an external C block around the methods,

274
00:19:48,910 --> 00:19:52,102
continue it, repeat the previous

275
00:19:52,166 --> 00:19:55,946
compilation steps. As you

276
00:19:55,968 --> 00:19:57,020
can see here,

277
00:19:59,630 --> 00:20:03,390
this is 10ft

278
00:20:04,770 --> 00:20:09,418
very high explanation

279
00:20:09,594 --> 00:20:13,122
about how to make this possible. Now this

280
00:20:13,176 --> 00:20:16,706
code running on JavaScript, on a

281
00:20:16,728 --> 00:20:20,306
web browser. So as

282
00:20:20,328 --> 00:20:24,242
you can see, I have this color cube running

283
00:20:24,376 --> 00:20:26,870
on the browser. This is the output,

284
00:20:27,450 --> 00:20:31,334
and having this in the browser, to have

285
00:20:31,372 --> 00:20:35,382
it running in

286
00:20:35,436 --> 00:20:36,470
a framework,

287
00:20:39,070 --> 00:20:43,466
you are in the other side. It's not that easy, but I

288
00:20:43,488 --> 00:20:47,530
mean it's JavaScript. And the idea nowadays

289
00:20:47,950 --> 00:20:51,082
about JavaScript is to have

290
00:20:51,136 --> 00:20:55,130
components. So you can have this component

291
00:20:57,010 --> 00:21:00,910
or C plus plus code in a component and use

292
00:21:00,980 --> 00:21:04,478
it in angular or react

293
00:21:04,574 --> 00:21:05,220
project.

294
00:21:13,910 --> 00:21:18,094
Yes, having Mx

295
00:21:18,142 --> 00:21:21,602
script the HTML that we generate

296
00:21:21,666 --> 00:21:26,290
with Mx scripting is not typically used for production,

297
00:21:26,450 --> 00:21:30,022
but that's like a first approach.

298
00:21:30,166 --> 00:21:33,562
It's pretty useful if you are learning about

299
00:21:33,616 --> 00:21:36,842
Webassembly. That's the idea. As you may know,

300
00:21:36,896 --> 00:21:40,246
Webassembly now is evolving too fast.

301
00:21:40,368 --> 00:21:45,066
We have a lot of programs,

302
00:21:45,258 --> 00:21:47,630
languages using Webassembly.

303
00:21:48,050 --> 00:21:51,850
So webassembly, in my humble opinion,

304
00:21:51,930 --> 00:21:55,326
opens a fantastic and interesting new alternatives

305
00:21:55,358 --> 00:21:59,330
and it's already supported in browsers.

306
00:22:01,830 --> 00:22:05,170
One question that a lot of people ask me

307
00:22:05,320 --> 00:22:09,590
is about if Webassembly is going to replace JavaScript.

308
00:22:13,450 --> 00:22:17,234
The answer is no. Webassembly doesn't

309
00:22:17,282 --> 00:22:22,902
replace JavaScript, but those expand the web enables

310
00:22:22,966 --> 00:22:26,630
new hybrid JavaScript

311
00:22:26,710 --> 00:22:30,414
designs. So you can see

312
00:22:30,452 --> 00:22:33,694
here the

313
00:22:33,732 --> 00:22:38,270
support the

314
00:22:38,340 --> 00:22:42,838
Webassembly support in the browsers.

315
00:22:43,034 --> 00:22:47,454
I don't know if this image

316
00:22:47,502 --> 00:22:51,154
is a little updated, we have to

317
00:22:51,192 --> 00:22:54,494
verify it, but well, it's evolving

318
00:22:54,542 --> 00:22:55,380
too fast.

319
00:23:03,900 --> 00:23:06,760
And the part of the angular integration,

320
00:23:07,180 --> 00:23:11,016
well, with angular integration,

321
00:23:11,128 --> 00:23:14,652
angular per se, it's not that

322
00:23:14,706 --> 00:23:18,540
easy. It's not that easy framework.

323
00:23:20,960 --> 00:23:24,912
I guide you through the process. You have

324
00:23:24,966 --> 00:23:30,384
to make the project to

325
00:23:30,422 --> 00:23:36,884
see if the project is running like

326
00:23:37,082 --> 00:23:40,420
showing here, so you can follow the whole

327
00:23:40,490 --> 00:23:43,350
article now to have it.

328
00:23:44,920 --> 00:23:50,336
And I create a component with the angular command

329
00:23:50,368 --> 00:23:54,628
line. I'm creating

330
00:23:54,724 --> 00:23:58,424
the component, I just put

331
00:23:58,462 --> 00:24:02,910
it already made code

332
00:24:04,240 --> 00:24:07,950
with C and Wasp as a service.

333
00:24:08,720 --> 00:24:12,736
That was everything I

334
00:24:12,758 --> 00:24:15,010
did. So it was just like,

335
00:24:17,060 --> 00:24:20,850
I don't know if I was cheating, but it was pretty easy.

336
00:24:23,540 --> 00:24:26,848
The word cc could be located

337
00:24:26,944 --> 00:24:31,140
in the same folder, the one with the color

338
00:24:31,290 --> 00:24:35,092
cube seminars code. But just

339
00:24:35,146 --> 00:24:38,664
be sure that after compilation you

340
00:24:38,702 --> 00:24:41,880
get the files webassembly and

341
00:24:41,950 --> 00:24:45,972
webassembly was inside the color cube folder.

342
00:24:46,036 --> 00:24:50,440
Because I didn't have this couple of files,

343
00:24:52,800 --> 00:24:56,364
I have a lot of time trying to figure out,

344
00:24:56,482 --> 00:25:00,510
but it was not working so well.

345
00:25:01,360 --> 00:25:04,850
Taking consideration that you can save a lot of time,

346
00:25:12,180 --> 00:25:15,590
well, a microscript build like

347
00:25:16,360 --> 00:25:20,150
can include as a plumbing file in that

348
00:25:21,320 --> 00:25:24,644
HTML file. If you want to go for

349
00:25:24,682 --> 00:25:25,860
this approach,

350
00:25:28,540 --> 00:25:32,840
it depends how do you want to display

351
00:25:33,340 --> 00:25:37,284
the app? A JavaScript

352
00:25:37,332 --> 00:25:41,296
plumbing file is a JavaScript file that FMac scripting

353
00:25:41,348 --> 00:25:44,764
generates. It can

354
00:25:44,802 --> 00:25:47,870
be in this different way.

355
00:25:48,880 --> 00:25:50,430
I don't like it.

356
00:25:53,540 --> 00:25:58,864
You can generate with angular the

357
00:25:58,902 --> 00:26:02,416
UI elements, but well, you can

358
00:26:02,598 --> 00:26:07,730
generate with

359
00:26:08,500 --> 00:26:12,552
scripting. It depends

360
00:26:12,716 --> 00:26:16,404
what are you doing? And it's something like

361
00:26:16,442 --> 00:26:17,030
that.

362
00:26:21,400 --> 00:26:25,944
So, well, this is basically the

363
00:26:25,982 --> 00:26:30,700
approach that how can I use

364
00:26:30,850 --> 00:26:35,150
this? I can say all

365
00:26:36,080 --> 00:26:40,204
and powerful languages as a

366
00:26:40,242 --> 00:26:44,640
component in modern projects, in modern front end projects

367
00:26:45,620 --> 00:26:50,064
where I see the

368
00:26:50,102 --> 00:26:53,392
business cases is because a lot of

369
00:26:53,446 --> 00:26:56,070
this code,

370
00:26:57,720 --> 00:27:00,230
c plus plus or c code,

371
00:27:01,400 --> 00:27:05,444
the performance is better, is way better from

372
00:27:05,482 --> 00:27:08,852
JavaScript. So I think,

373
00:27:08,906 --> 00:27:13,032
I'm pretty sure that we are going to see a lot of things like

374
00:27:13,086 --> 00:27:16,696
renders games that they are

375
00:27:16,718 --> 00:27:20,596
going to run in the browser pretty smoothly

376
00:27:20,788 --> 00:27:25,024
and we are going to see a lot of hallucinance

377
00:27:25,092 --> 00:27:27,310
things, awesome things.

378
00:27:28,480 --> 00:27:32,728
Well, we are seeing a lot of things with Javascript

379
00:27:32,904 --> 00:27:36,130
in combination with these kind of

380
00:27:38,340 --> 00:27:42,112
technologies that are pretty good for something

381
00:27:42,166 --> 00:27:44,290
in particular. Well,

382
00:27:45,320 --> 00:27:51,584
this will be amazing. So I think that's

383
00:27:51,712 --> 00:27:55,280
why I don't think that Javascript is going to disappear.

384
00:27:55,360 --> 00:27:56,710
It's going to be,

385
00:28:01,260 --> 00:28:05,400
they are going to complement with a lot of other technologies.

386
00:28:10,240 --> 00:28:14,350
So. Well, this code is about how I

387
00:28:14,880 --> 00:28:16,780
include in the component.

388
00:28:18,080 --> 00:28:22,076
This is just angular. When the

389
00:28:22,098 --> 00:28:25,696
angular side of the project to

390
00:28:25,718 --> 00:28:27,840
include the web assembly,

391
00:28:28,820 --> 00:28:32,688
you can take a look

392
00:28:32,854 --> 00:28:37,236
in detail if you have time. So the

393
00:28:37,258 --> 00:28:42,564
idea is just to achieve the

394
00:28:42,602 --> 00:28:46,820
original example. That was because

395
00:28:46,970 --> 00:28:50,628
there is another example. I have several examples

396
00:28:50,724 --> 00:28:53,930
here, but the idea

397
00:28:54,940 --> 00:28:58,836
was to accomplish this. This is the angular component

398
00:28:58,948 --> 00:29:01,870
as a service. Well it was load as a service,

399
00:29:03,040 --> 00:29:06,510
but this is the final result.

400
00:29:07,040 --> 00:29:11,212
The C Plus plus code run in

401
00:29:11,266 --> 00:29:14,290
angular. Yeah.

402
00:29:17,300 --> 00:29:20,384
Well this is it.

403
00:29:20,582 --> 00:29:24,672
I hope that it gives

404
00:29:24,726 --> 00:29:28,212
you a lot of ideas of

405
00:29:28,266 --> 00:29:32,564
crazy things that you can achieve with

406
00:29:32,602 --> 00:29:37,060
this combination of technologies with Webassembly.

407
00:29:37,820 --> 00:29:41,290
I have another article about

408
00:29:43,340 --> 00:29:46,250
this very quickly about,

409
00:29:47,820 --> 00:29:52,376
I want to show just in

410
00:29:52,398 --> 00:29:57,032
two minutes because it

411
00:29:57,086 --> 00:29:58,010
makes sense.

412
00:30:02,060 --> 00:30:06,320
It, it's about web assembly

413
00:31:06,050 --> 00:31:12,640
then this is about other,

414
00:31:13,730 --> 00:31:17,070
about web components and it's in Spanish.

415
00:31:17,410 --> 00:31:20,834
Sorry about that, but I just

416
00:31:20,872 --> 00:31:24,370
wanted to show the final part

417
00:31:24,440 --> 00:31:29,330
that is like

418
00:31:29,400 --> 00:31:34,340
a picture about if

419
00:31:34,790 --> 00:31:37,490
Javascript is going to die,

420
00:31:41,720 --> 00:31:46,330
I can find it. Well maybe

421
00:31:48,220 --> 00:31:50,170
I have to.

422
00:31:52,300 --> 00:31:55,896
It was pretty interesting because a lot

423
00:31:55,918 --> 00:31:58,830
of people think about this about,

424
00:31:59,840 --> 00:32:03,390
well there is going to be about a lot of

425
00:32:04,080 --> 00:32:08,204
new languages like C

426
00:32:08,242 --> 00:32:11,170
sharp with Blazor or per.

427
00:32:12,580 --> 00:32:16,332
There is a lot of new alternative,

428
00:32:16,476 --> 00:32:20,530
but JavaScript is going to stay there and

429
00:32:24,440 --> 00:32:28,148
it's not going anywhere, don't worry about

430
00:32:28,234 --> 00:32:28,870
it.

431
00:32:31,680 --> 00:32:34,430
But it's not in this.

432
00:32:34,960 --> 00:32:38,480
Sorry, my mistake. I think

433
00:32:38,550 --> 00:32:46,144
it was at the same

434
00:32:46,182 --> 00:32:49,830
presentation, sorry because of that.

435
00:32:50,360 --> 00:32:54,996
But well you

436
00:32:55,018 --> 00:32:58,352
are going to see more and more of these examples

437
00:32:58,416 --> 00:33:01,620
with a lot of more, not just with

438
00:33:01,690 --> 00:33:05,930
C and C plus plus, if not with Perl,

439
00:33:06,540 --> 00:33:09,704
Python doing a lot

440
00:33:09,742 --> 00:33:12,984
of this kind

441
00:33:13,022 --> 00:33:14,940
of web development.

442
00:33:16,960 --> 00:33:22,140
So. Well that's

443
00:33:24,320 --> 00:33:27,836
what I have to say. I just want

444
00:33:27,858 --> 00:33:31,708
to say thanks and

445
00:33:31,874 --> 00:33:33,710
thank you very much for everything.

446
00:33:37,120 --> 00:33:40,276
If you want to, to grab me.

447
00:33:40,378 --> 00:33:43,830
Well, let me see.

448
00:33:48,920 --> 00:33:50,630
Well you have my,

449
00:33:53,800 --> 00:33:56,020
this is my twitter.

450
00:34:00,440 --> 00:34:01,250
Thank you very much.

