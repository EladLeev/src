1
00:00:00,410 --> 00:00:06,126
Jamaica make up real

2
00:00:06,148 --> 00:00:09,902
time feedback into the behavior of your distributed systems and

3
00:00:09,956 --> 00:00:13,614
observing changes exceptions. Errors in real

4
00:00:13,652 --> 00:00:16,666
time allows you to not only experiment with confidence,

5
00:00:16,778 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:01:04,686
Close good

7
00:01:04,708 --> 00:01:07,986
morning, good afternoon, good evening, wherever you are in the world. My name

8
00:01:08,008 --> 00:01:11,186
is Nick Hodges. I'm the developer advocate at Rollbar, and I'm here

9
00:01:11,208 --> 00:01:15,070
today to talk to you about building self healing

10
00:01:15,150 --> 00:01:18,582
systems and how they work. All that fun stuff about

11
00:01:18,636 --> 00:01:22,360
automating the process of managing your application.

12
00:01:22,890 --> 00:01:25,766
Before we get rolling, I'll talk a little bit about myself. As I said,

13
00:01:25,788 --> 00:01:29,398
I'm a developer advocate. I preach the good news about Rollbar

14
00:01:29,574 --> 00:01:33,658
throughout the developer community. I'm a longtime developer and

15
00:01:33,744 --> 00:01:36,442
development manager. I'm a Delphi guy way back.

16
00:01:36,496 --> 00:01:40,518
Anybody out there remember Delphi? I've written

17
00:01:40,534 --> 00:01:44,174
a couple of books on Delphi. I did turbo Pascal to

18
00:01:44,212 --> 00:01:47,406
start out, and lately I've been working on angular and

19
00:01:47,428 --> 00:01:51,630
typescript, really cool language and platform for developing web applications.

20
00:01:51,970 --> 00:01:55,460
I'm a former naval intelligence officer, did that for twelve years.

21
00:01:55,830 --> 00:02:00,354
I will tell you that it is about 142

22
00:02:00,392 --> 00:02:03,586
times more boring than they show it

23
00:02:03,608 --> 00:02:06,834
on tv, in the movies. And finally, I'm obsessed with

24
00:02:06,872 --> 00:02:10,582
pistachio nuts. If you come over to our house on a Sunday afternoon to watch

25
00:02:10,636 --> 00:02:14,274
NFL football, don't get between me and the pistachio nuts

26
00:02:14,322 --> 00:02:18,386
bowl. Before we get started, I just want to talk a little bit about Rollobar's

27
00:02:18,418 --> 00:02:22,342
mission and values. Our mission is to help developers build software

28
00:02:22,406 --> 00:02:25,766
quickly and painlessly so they can get back to building cool new features.

29
00:02:25,798 --> 00:02:29,286
Instead of fixing bugs, spending a lot of time fixing bugs

30
00:02:29,318 --> 00:02:32,814
and whatnot. We like to think about

31
00:02:32,932 --> 00:02:36,350
ways to make developers more productive and to

32
00:02:36,420 --> 00:02:40,414
make it as fun and interesting as possible. Our values are

33
00:02:40,452 --> 00:02:43,950
honesty, transparency, pragmatism, and dependability.

34
00:02:44,450 --> 00:02:47,762
We like to show those in everything we do, from the sales process to

35
00:02:47,816 --> 00:02:51,406
presentations like this. So if you see us not following those values,

36
00:02:51,438 --> 00:02:54,674
hold us to it. So the topic for the day,

37
00:02:54,712 --> 00:02:58,226
of course, is self healing systems. Self healing systems is

38
00:02:58,248 --> 00:03:01,798
kind of a self explanatory definition, but I scoured around the Internet and

39
00:03:01,804 --> 00:03:05,910
this is the best definition I found. It's the idea that a system can

40
00:03:06,060 --> 00:03:09,482
recognize that it's not working right and fix

41
00:03:09,536 --> 00:03:13,686
itself without any internal, I'm sorry, external assistance.

42
00:03:13,878 --> 00:03:17,450
So this could mean something like turning off a feature flag or

43
00:03:17,520 --> 00:03:20,634
rolling back to a previous release, or somehow,

44
00:03:20,682 --> 00:03:24,960
some way getting itself into a working state.

45
00:03:25,890 --> 00:03:29,598
So selfhealing systems, something that's only relatively new,

46
00:03:29,764 --> 00:03:34,222
mainly because we at this point with SaaS software,

47
00:03:34,366 --> 00:03:38,178
have control over the entire application. In the

48
00:03:38,184 --> 00:03:41,842
old days you used to have to distribute executables out to

49
00:03:41,896 --> 00:03:45,954
your customers. And of course everybody's systems was different. Everybody had

50
00:03:45,992 --> 00:03:49,606
their own individual application that they were running. And sometimes a

51
00:03:49,628 --> 00:03:52,966
bug would appear on that system out there and there's no way for

52
00:03:52,988 --> 00:03:56,614
it to self heal because you would have to

53
00:03:56,652 --> 00:03:59,994
reproduce the customer's environment as best you could

54
00:04:00,032 --> 00:04:03,434
in order to reproduce the bug. A selfhealing systems

55
00:04:03,472 --> 00:04:06,454
possible because with SaaS systems internal.

56
00:04:06,582 --> 00:04:10,214
SaaS systems are internal to our environment.

57
00:04:10,262 --> 00:04:13,920
They're built inside our own cloud. The client application

58
00:04:14,290 --> 00:04:17,854
that is built runs on the web and you have complete

59
00:04:17,892 --> 00:04:21,674
control over that client application. Now it's still true that you deploy mobile

60
00:04:21,722 --> 00:04:25,006
applications and they will suffer the same problem with versioning and bugs,

61
00:04:25,118 --> 00:04:28,946
but at least with your web system and your built in

62
00:04:29,048 --> 00:04:32,738
back end, you have complete control over the system, enabling it

63
00:04:32,744 --> 00:04:36,370
to self heal. Before we talk about self healing systems

64
00:04:36,450 --> 00:04:40,486
specifically, we can talk about the levels of selfhealing

65
00:04:40,508 --> 00:04:44,098
systems. In other words, what are the basic

66
00:04:44,194 --> 00:04:47,810
three levels of ways that systems get repaired?

67
00:04:47,970 --> 00:04:51,386
One of course is the manual change. A bug is reported to you by a

68
00:04:51,408 --> 00:04:54,602
customer. You open up the product in the debugger, in the old school

69
00:04:54,656 --> 00:04:58,298
way, you find the bug, you fix it, and you return it

70
00:04:58,384 --> 00:05:02,382
to the customer with a fixed version that happens

71
00:05:02,436 --> 00:05:05,920
entirely manually. There's no automation process going on.

72
00:05:06,450 --> 00:05:10,240
Some automation plus manuals. Step level two, if you will,

73
00:05:11,250 --> 00:05:15,178
requires that you have some automation involved.

74
00:05:15,274 --> 00:05:18,466
For instance, you may have a system that monitors your website

75
00:05:18,568 --> 00:05:22,018
to let you know when there's an error, but however

76
00:05:22,104 --> 00:05:25,806
it doesn't really help you or point you in a direction of where that error

77
00:05:25,838 --> 00:05:29,462
is. And you have to manually fix the error yourself and

78
00:05:29,596 --> 00:05:33,400
deploy the system manually, or deploy it through your CI CD program.

79
00:05:34,010 --> 00:05:37,702
Fully automated systems are self healing systems. That is a system

80
00:05:37,756 --> 00:05:41,394
that is able to detect errors and resolve

81
00:05:41,442 --> 00:05:44,742
them in a sense, not in a sense of fixing the bug,

82
00:05:44,806 --> 00:05:47,562
but in a sense of dealing with it in such a way that the state

83
00:05:47,696 --> 00:05:51,126
of the system is returned to equilibrium so that it works properly.

84
00:05:51,238 --> 00:05:55,486
That's a fully automated system. So level three obviously is selfhealing

85
00:05:55,508 --> 00:05:59,600
systems. The term self healing to describe what is level three.

86
00:06:00,450 --> 00:06:04,078
So what are the requirements for a system to be self healing? I've talked a

87
00:06:04,084 --> 00:06:07,298
little bit about it already. One is it has to always be up,

88
00:06:07,384 --> 00:06:10,706
that is the application. The front end has

89
00:06:10,728 --> 00:06:14,020
to be available and working properly at all times.

90
00:06:15,270 --> 00:06:18,626
You don't want a system to be down for maintenance,

91
00:06:18,738 --> 00:06:21,430
because then it really isn't self healing.

92
00:06:22,490 --> 00:06:25,718
If a change to the deployment process or a change

93
00:06:25,804 --> 00:06:29,598
to the way in which the application is run requires

94
00:06:29,634 --> 00:06:33,274
the application to be brought down and not function. Then it can't really

95
00:06:33,312 --> 00:06:36,762
be selfhealing. In addition, a self healing system

96
00:06:36,816 --> 00:06:40,794
needs to be monitoring. Without monitoring, you can't self heal because

97
00:06:40,832 --> 00:06:43,886
you don't even know that there's a problem. You need to see that problem in

98
00:06:43,908 --> 00:06:47,694
order to be able to fix it. And obviously, for a self healing system to

99
00:06:47,732 --> 00:06:51,406
work, it needs to have a restoration mechanism. It needs to

100
00:06:51,428 --> 00:06:55,346
have a way for it to be able to repair itself

101
00:06:55,528 --> 00:06:59,140
or get itself back into a known working state.

102
00:06:59,910 --> 00:07:03,618
These three things are what a self healing system needs

103
00:07:03,784 --> 00:07:07,334
in order to actually function as a self

104
00:07:07,372 --> 00:07:11,382
healing system. So now we can talk about what a self

105
00:07:11,436 --> 00:07:14,726
healing systems what are the characteristics of

106
00:07:14,748 --> 00:07:18,486
a self healing system? So first we need the ability to

107
00:07:18,508 --> 00:07:22,118
deploy to any server, not just your specific server that you're

108
00:07:22,134 --> 00:07:25,322
running and managing yourself, but to any server. In other words,

109
00:07:25,376 --> 00:07:28,966
we need to deploy it to a cloud environment.

110
00:07:29,158 --> 00:07:32,426
So your servers need to be cattle, not pets. If you're not familiar with

111
00:07:32,448 --> 00:07:35,898
the term cattle and pets, it refers

112
00:07:35,914 --> 00:07:39,290
to the ways servers are handled. For instance, if you have a pet server,

113
00:07:39,370 --> 00:07:42,990
that's a server you own, you take care of it, you feed it,

114
00:07:43,060 --> 00:07:46,706
you manage it, you care for it, you give it a name, all that

115
00:07:46,728 --> 00:07:51,182
kind of stuff. It's a pet versus a cattle server,

116
00:07:51,246 --> 00:07:54,654
which is just a herd of servers that you don't care necessarily

117
00:07:54,702 --> 00:07:57,958
so much about any individual member, but about the herd as a

118
00:07:57,964 --> 00:08:02,150
whole. And so you deploy

119
00:08:02,650 --> 00:08:06,054
your application to cattle when you deploy it to

120
00:08:06,092 --> 00:08:09,186
a cloud environment that has many, many systems that

121
00:08:09,228 --> 00:08:13,370
run your application instead of just one specific pet server.

122
00:08:13,950 --> 00:08:17,546
So that for a self healing system to work, it needs the ability to

123
00:08:17,568 --> 00:08:21,434
deploy to a cattle based system. You also

124
00:08:21,472 --> 00:08:25,166
need the ability to deploy without downtime. This is normally done

125
00:08:25,188 --> 00:08:28,638
through blue green deployments, where in the

126
00:08:28,644 --> 00:08:31,946
most simple form, you have a blue machine and a green machine. The blue machine

127
00:08:31,978 --> 00:08:35,646
is running and the green machine is updated.

128
00:08:35,758 --> 00:08:39,362
And then immediately the load balancer, or whatever

129
00:08:39,416 --> 00:08:43,086
type of system you're using to manage your traffic flow switches

130
00:08:43,118 --> 00:08:46,814
from blue to green in one instant, and no downtime

131
00:08:46,862 --> 00:08:50,406
has occurred as a result. And then the blue machine can be updated to be

132
00:08:50,428 --> 00:08:54,006
a green machine. And then you can turn both of those machines on,

133
00:08:54,108 --> 00:08:58,134
and the load balancer knows about everything that's up and automatically

134
00:08:58,182 --> 00:09:00,730
feeds traffic to working systems.

135
00:09:01,710 --> 00:09:05,066
Third, we need the ability to monitor the hardware needs and

136
00:09:05,088 --> 00:09:07,834
adjust dynamically. This is where cattle versus pets come in,

137
00:09:07,872 --> 00:09:11,374
right? If you monitor the hardware needs and

138
00:09:11,412 --> 00:09:15,610
see that your hardware, say your cpus are being stressed

139
00:09:15,690 --> 00:09:19,614
or there's too much network traffic going through any specific or

140
00:09:19,652 --> 00:09:23,250
number of machines. You can spin up new machines,

141
00:09:23,670 --> 00:09:27,010
new systems, in order to dynamically adjust and

142
00:09:27,080 --> 00:09:30,926
respond to the demand that occurs as the demand

143
00:09:30,958 --> 00:09:34,226
for your application increases. Finally, the ability to

144
00:09:34,248 --> 00:09:38,078
monitor services in real time and react to failure, I. E. The chaos

145
00:09:38,174 --> 00:09:41,878
engineering portion. You need to be able to track

146
00:09:41,964 --> 00:09:45,734
the services that your application requires, and if any of them go

147
00:09:45,772 --> 00:09:48,966
down. You need to be able to react to the failure of any one particular

148
00:09:49,068 --> 00:09:52,586
given system. You need to be able to respond correctly if one of your

149
00:09:52,608 --> 00:09:55,994
services suddenly fails. In order to be self

150
00:09:56,032 --> 00:09:59,034
healing, you need to be able to deal with the failure of any of your

151
00:09:59,072 --> 00:10:02,694
given microsystems. And finally, you need to be able to have the ability

152
00:10:02,742 --> 00:10:06,286
to predict a future and take actions based upon your knowledge of the

153
00:10:06,308 --> 00:10:09,854
future. Of course, we don't really know the knowledge of the future, but I'm talking

154
00:10:09,892 --> 00:10:13,826
about things like knowing that every Monday morning at

155
00:10:13,848 --> 00:10:17,170
09:00 your system demand increases drastically.

156
00:10:18,150 --> 00:10:21,694
You know that. And so you can schedule the increase of your cattle.

157
00:10:21,742 --> 00:10:25,826
You can buy more cattle, I. E. More servers and spin

158
00:10:25,858 --> 00:10:29,446
them up at any particular time when you know that that time is

159
00:10:29,468 --> 00:10:33,874
going to require more processing

160
00:10:33,922 --> 00:10:37,240
power because of the demand on your application.

161
00:10:37,930 --> 00:10:41,974
So what is the common thread between the problem and the solution?

162
00:10:42,102 --> 00:10:45,274
Error tracking. That's what's required in order to

163
00:10:45,312 --> 00:10:48,806
both create a self healing system and to solve

164
00:10:48,838 --> 00:10:51,420
the problem of an error that happens.

165
00:10:52,030 --> 00:10:55,422
In order to know that you need to self heal, you need to know

166
00:10:55,476 --> 00:10:58,938
that there's something to heal from. You need to know that there's an error.

167
00:10:59,114 --> 00:11:03,074
And the ability to accurately track and report errors is critical to self

168
00:11:03,112 --> 00:11:07,474
healing systems. They are part of the problem because

169
00:11:07,592 --> 00:11:11,362
error tracking and errors create the

170
00:11:11,416 --> 00:11:15,150
need for self healing systems. And they're part of the solution, because by knowing

171
00:11:15,230 --> 00:11:18,546
and understanding your errors, you can properly respond

172
00:11:18,578 --> 00:11:22,054
to them and know whether a system needs to react or not to any

173
00:11:22,092 --> 00:11:26,098
particular error and how one might react to different kinds

174
00:11:26,114 --> 00:11:28,330
of errors using automation.

175
00:11:29,630 --> 00:11:33,674
Now, errors are everywhere. They occur in every application.

176
00:11:33,872 --> 00:11:37,894
Sometimes they're a problem, sometimes they're not a big deal. In a SaaS

177
00:11:37,942 --> 00:11:41,530
application, errors occur probably almost

178
00:11:41,600 --> 00:11:44,922
constantly. There may be errors that happen

179
00:11:44,976 --> 00:11:48,174
that are probably not a big deal, and you don't need to worry about them.

180
00:11:48,292 --> 00:11:51,198
Someday you'll take care of them. Maybe you don't even need to take care of

181
00:11:51,204 --> 00:11:54,986
them. Maybe there's an error that pops up that is inconsequential

182
00:11:55,018 --> 00:11:58,894
and doesn't have any effect on your application at all. Maybe there's an error that's

183
00:11:58,942 --> 00:12:01,518
critical and needs to be dealt with immediately.

184
00:12:01,694 --> 00:12:04,866
But in any event, errors are everywhere. And so let's talk

185
00:12:04,888 --> 00:12:07,906
a little bit about the nature of errors and the nature of error tracking,

186
00:12:07,938 --> 00:12:12,146
because obviously, that's what is the critical portion here of what we're

187
00:12:12,178 --> 00:12:16,102
talking about with self healing systems. So here's an example of a

188
00:12:16,236 --> 00:12:20,214
relatively crude and imperfect error

189
00:12:20,262 --> 00:12:22,860
detection system. When I was a kid,

190
00:12:23,390 --> 00:12:26,858
we had Christmas lights that looked like this instead of the little teeny ones that

191
00:12:26,864 --> 00:12:30,422
we have now. And they were connected,

192
00:12:30,486 --> 00:12:34,586
I believe, what you'd call in series, so that each bulb's

193
00:12:34,778 --> 00:12:38,350
ability to light up depended on the bulb before it.

194
00:12:38,420 --> 00:12:42,442
And if any one bulb on the entire string failed,

195
00:12:42,506 --> 00:12:45,986
the entire string failed to

196
00:12:46,008 --> 00:12:49,886
light up because the electricity couldn't flow through every single bulb.

197
00:12:49,998 --> 00:12:53,614
And this was a very crude way to detect an error.

198
00:12:53,742 --> 00:12:57,366
You would know that there was an error in one of the bulbs by the

199
00:12:57,388 --> 00:13:01,206
fact that the light string didn't work, but you

200
00:13:01,228 --> 00:13:05,362
wouldn't know which bulb. So you'd literally have to get a known good bulb,

201
00:13:05,506 --> 00:13:09,206
replace every bulb in the string in

202
00:13:09,228 --> 00:13:12,298
order to find the one that was bad. Sometimes there was more than one that

203
00:13:12,304 --> 00:13:16,086
was bad that would not report itself when you'd

204
00:13:16,118 --> 00:13:19,386
replace it with a good bulb. And so this is a

205
00:13:19,408 --> 00:13:22,678
very crude and difficult way to detect errors. And this

206
00:13:22,704 --> 00:13:26,046
might be analogous to the ability of you to

207
00:13:26,068 --> 00:13:29,946
detect errors on a remote machine. For instance, customers machine,

208
00:13:30,058 --> 00:13:34,000
the classic works on my machine, but it doesn't work on the customer's machine problem.

209
00:13:34,310 --> 00:13:37,570
And those are gone, and those issues are

210
00:13:37,640 --> 00:13:41,694
mostly gone today with the advent of SaaS applications.

211
00:13:41,742 --> 00:13:45,346
But to a large degree, this was a way that errors were detected in

212
00:13:45,368 --> 00:13:49,126
software systems. Now, here's another system that reports a

213
00:13:49,148 --> 00:13:52,534
problem, and it tells you that your car

214
00:13:52,572 --> 00:13:55,894
is overheating. It doesn't tell you why, but it does at least

215
00:13:55,932 --> 00:13:59,714
tell you that your car is overheating. Overheating is a symptom

216
00:13:59,762 --> 00:14:03,418
of any number of different issues with your car, but it

217
00:14:03,424 --> 00:14:07,066
is a slightly better way of reporting can error in that

218
00:14:07,168 --> 00:14:10,746
you know your car is overheating, and you know that there's a problem, so you

219
00:14:10,768 --> 00:14:13,582
can turn the car off, fix the problem. But again,

220
00:14:13,636 --> 00:14:17,600
this doesn't work for a self healing system.

221
00:14:18,050 --> 00:14:21,326
Probably a better metaphor for a self healing system is the notion of a

222
00:14:21,348 --> 00:14:25,230
circuit breaker. We all understand circuit breakers. We have them in our homes.

223
00:14:25,390 --> 00:14:28,926
A particular circuit on your house, electrical system becomes

224
00:14:28,958 --> 00:14:32,722
overloaded. The amperage is too high because you've plugged in 700

225
00:14:32,776 --> 00:14:36,158
different items into it, and the circuit breaker blows.

226
00:14:36,334 --> 00:14:40,882
Well, this is a very effective technique for error reporting, because specifically,

227
00:14:40,946 --> 00:14:44,246
first it solves the problem of the error. It prevents a

228
00:14:44,268 --> 00:14:47,846
house fire, for instance, whereas if the system did not have a

229
00:14:47,868 --> 00:14:50,280
circuit breaker or a fuse, if you will,

230
00:14:50,650 --> 00:14:54,426
then the electricity in your house might overload in that

231
00:14:54,448 --> 00:14:58,166
particular circuit and start a fire, which is very bad. So the circuit breaker prevents

232
00:14:58,198 --> 00:15:01,774
a fire. It also tells you exactly which circuit the error is

233
00:15:01,812 --> 00:15:05,358
occurring on and allows you to go and make changes

234
00:15:05,444 --> 00:15:09,070
to the system that you've got plugged in to that particular circuit.

235
00:15:09,890 --> 00:15:13,066
So circuit breakers are a good symbol

236
00:15:13,098 --> 00:15:16,574
for self healing systems, because an error reported

237
00:15:16,622 --> 00:15:19,918
by some type of circuit breaker mechanism, a critical error

238
00:15:19,934 --> 00:15:23,458
that is fired, allows you to respond quickly

239
00:15:23,544 --> 00:15:27,394
and algorithmically to the particular problem. For instance,

240
00:15:27,442 --> 00:15:30,200
with your system, with an application,

241
00:15:30,650 --> 00:15:34,786
SaaS application, the firing of a critical error,

242
00:15:34,898 --> 00:15:38,422
I-E-A circuit breaker snapping, may result

243
00:15:38,476 --> 00:15:41,078
in you rolling back to a previous version,

244
00:15:41,174 --> 00:15:44,826
or may result in you turning off a feature flag of the

245
00:15:44,848 --> 00:15:47,900
error, of the feature that the error occurred in.

246
00:15:48,830 --> 00:15:52,634
So the circuit breaker is actually a pretty good error reporting

247
00:15:52,682 --> 00:15:56,186
mechanism, allowing you to deal with errors

248
00:15:56,218 --> 00:16:00,014
in an automated way, because all too often this

249
00:16:00,052 --> 00:16:03,566
is kind of what happens. In other words, everything's going along great, and all

250
00:16:03,588 --> 00:16:06,226
of a sudden, boom, you've got a problem.

251
00:16:06,408 --> 00:16:09,490
Response times go way down, there's something wrong,

252
00:16:09,640 --> 00:16:13,410
but you don't know what to do. You have no idea why that particular

253
00:16:13,480 --> 00:16:17,254
thing is happening. So you need an error reporting system that

254
00:16:17,292 --> 00:16:20,950
gives you clean, clear information about why something

255
00:16:21,020 --> 00:16:24,790
like your transaction time here is suddenly jumped from

256
00:16:24,860 --> 00:16:29,230
a very acceptable level to levels that are not at all acceptable.

257
00:16:29,410 --> 00:16:32,618
That type of error reporting is critical to what it

258
00:16:32,624 --> 00:16:36,074
is you want to do in terms of building a self

259
00:16:36,112 --> 00:16:39,786
healing system. So this is the problem that

260
00:16:39,808 --> 00:16:43,406
we face, right? We have this sudden influx of errors. We have

261
00:16:43,428 --> 00:16:47,834
this sudden problem that we notice, and we don't necessarily know why it's occurring.

262
00:16:47,962 --> 00:16:51,486
Now, traditional monitoring, I. E. Log files and

263
00:16:51,508 --> 00:16:55,634
different types of monitoring systems, don't necessarily give you what you need to understand and

264
00:16:55,672 --> 00:16:58,914
respond, because there's a huge amount of data coming

265
00:16:58,952 --> 00:17:02,418
in, and that data needs to be processed in a way that

266
00:17:02,504 --> 00:17:06,766
human beings aren't very good at. Nobody has enjoyed

267
00:17:06,798 --> 00:17:09,986
spending time poring over log files, looking for patterns or trying

268
00:17:10,008 --> 00:17:13,206
to figure out exactly where the error occurred and why the error occurred and what

269
00:17:13,228 --> 00:17:16,614
was going on when the error did occur. So we need a better

270
00:17:16,652 --> 00:17:20,378
way to see where we're headed when we want to find

271
00:17:20,464 --> 00:17:24,554
out where an error occurred, why it

272
00:17:24,592 --> 00:17:28,474
occurred, and how we can know exactly what the problem is and where

273
00:17:28,512 --> 00:17:32,074
we can go to fix it. You can't automate the response for every error,

274
00:17:32,202 --> 00:17:35,822
but you can automate the response for some errors. If you have that

275
00:17:35,876 --> 00:17:39,102
particular level of intelligence and knowledge and

276
00:17:39,156 --> 00:17:42,762
trust in the way a specific error is tracked

277
00:17:42,826 --> 00:17:46,334
and managed and reported to you. If you trust that the

278
00:17:46,372 --> 00:17:49,854
error is truly critical, and then it does require a feature flag

279
00:17:49,902 --> 00:17:53,442
being turned off, then you can do that automatically, which is very

280
00:17:53,496 --> 00:17:57,106
powerful and capable, keeps people from being woken up

281
00:17:57,128 --> 00:18:00,680
in the middle of the night, which is a very good thing.

282
00:18:01,290 --> 00:18:05,062
Now, one thing that factors into all of this is that a developer's job

283
00:18:05,116 --> 00:18:08,786
has changed over the years. It used to be that our

284
00:18:08,828 --> 00:18:11,734
process limited change. We did waterfall.

285
00:18:11,862 --> 00:18:15,658
We manufactured the software and actually put it in a box

286
00:18:15,824 --> 00:18:19,482
and it had to be perfect before release. And when we were

287
00:18:19,536 --> 00:18:22,858
done was the point when we said, okay, we're going to

288
00:18:22,864 --> 00:18:26,874
ship this thing. And its shipping actually involved etching it onto a CD,

289
00:18:26,922 --> 00:18:30,350
building it onto a CD, and mailing that CD and the box

290
00:18:30,420 --> 00:18:34,050
and the manual out to customers who then opened the box,

291
00:18:34,200 --> 00:18:37,426
pulled out the CD, loaded it onto their individual machines one

292
00:18:37,448 --> 00:18:40,722
at a time. So with perfection was sought there

293
00:18:40,776 --> 00:18:44,686
through compiled languages, unit testing, strong QA

294
00:18:44,798 --> 00:18:48,086
and the ability to fix, or the desire anyway,

295
00:18:48,188 --> 00:18:51,720
excuse me, to fix every single bug that was known before

296
00:18:52,250 --> 00:18:56,066
shipping was maintained. But now we're

297
00:18:56,098 --> 00:19:00,026
much more agile. We do research into what the issue is and

298
00:19:00,048 --> 00:19:03,846
we fix it on demand. We can fix a bug

299
00:19:03,878 --> 00:19:07,414
immediately with a SaaS system. We improve every release,

300
00:19:07,462 --> 00:19:10,954
every release is slightly better and we're never done because the application is

301
00:19:10,992 --> 00:19:14,214
constantly iterating on a minute by minute basis. Really?

302
00:19:14,352 --> 00:19:17,758
Company like Amazon will deploy thousands of times a

303
00:19:17,764 --> 00:19:21,840
day to improve the quality and features on their system.

304
00:19:22,390 --> 00:19:26,098
The process actually encourages change. Instead of limiting it.

305
00:19:26,264 --> 00:19:29,266
We fix the bugs that matter the most first,

306
00:19:29,448 --> 00:19:33,214
and we achieve fast iterations with automated releases

307
00:19:33,262 --> 00:19:36,806
and automated feedback. This is the method and the

308
00:19:36,828 --> 00:19:39,640
means by which automated systems are possible.

309
00:19:40,490 --> 00:19:43,782
So these new types of systems have error reporting that's very different

310
00:19:43,836 --> 00:19:47,682
from previous methods. The errors come in in a fashion.

311
00:19:47,826 --> 00:19:50,946
They're different types, different categories, different pieces

312
00:19:50,978 --> 00:19:55,162
of information, and they're reported to us in a very generic way. They come in,

313
00:19:55,296 --> 00:19:58,714
they may have colors to them, for example, when they happen,

314
00:19:58,832 --> 00:20:02,130
but they come into our system into a log file in a very colorless

315
00:20:02,230 --> 00:20:05,898
way. And what you want really is for those errors

316
00:20:05,994 --> 00:20:09,326
to be grouped together and classified in

317
00:20:09,348 --> 00:20:12,746
such a way that you can tell whether they're new, they're reactivated, they're resolved,

318
00:20:12,778 --> 00:20:16,770
they're critical. They're not so critical. They're information only,

319
00:20:16,920 --> 00:20:20,302
whatever. So in order to respond

320
00:20:20,366 --> 00:20:24,274
in a self healing manner, you need to know what those critical errors are

321
00:20:24,312 --> 00:20:27,762
versus what those just informational errors are that occur inside

322
00:20:27,816 --> 00:20:31,702
of SaaS systems. You need to group and

323
00:20:31,756 --> 00:20:35,378
organize and manage them. And that's something that's very difficult for humans

324
00:20:35,394 --> 00:20:38,266
to do as they look through log files. But it's something that's very easy for

325
00:20:38,288 --> 00:20:41,100
a system like rollbar to do using machine learning.

326
00:20:41,470 --> 00:20:45,834
Very powerful capability to group the

327
00:20:45,872 --> 00:20:50,006
errors by giving each error a fingerprint and grouping

328
00:20:50,038 --> 00:20:53,246
those errors according to those fingerprints. So this is

329
00:20:53,268 --> 00:20:57,146
a real basic look at the way rollbar works and allows for self healing

330
00:20:57,178 --> 00:21:00,730
systems. Real straightforward. First, it sees errors.

331
00:21:00,890 --> 00:21:04,586
It allows you to track errors by grouping

332
00:21:04,618 --> 00:21:08,974
them and seeing them as they occur in very specific patterns.

333
00:21:09,102 --> 00:21:12,354
So if there are ten different errors coming in to your system,

334
00:21:12,552 --> 00:21:16,146
rollbar can see the distinction between all ten of them and can report on

335
00:21:16,168 --> 00:21:19,538
the frequency and characteristics of those errors.

336
00:21:19,634 --> 00:21:23,586
So if you have an exception that you've raised that you've marked as critical exception,

337
00:21:23,618 --> 00:21:27,478
and that you know you need to immediately fix

338
00:21:27,644 --> 00:21:30,266
and deal with and respond to,

339
00:21:30,448 --> 00:21:33,786
rollbar can identify that type of error for you and allow a

340
00:21:33,808 --> 00:21:37,466
hook to take place, and a web hook or some type of

341
00:21:37,488 --> 00:21:41,166
hook, allowing you to respond to that particular

342
00:21:41,268 --> 00:21:44,846
type of error because of that grouping and that

343
00:21:44,948 --> 00:21:48,734
matching of errors and the fingerprint that each error gets.

344
00:21:48,932 --> 00:21:53,374
So rollbar then say, determines that your error is a critical error.

345
00:21:53,502 --> 00:21:56,834
There's a service that's down, and the

346
00:21:56,872 --> 00:22:00,418
reason that you're not able to access that error is

347
00:22:00,504 --> 00:22:04,706
an exception that, you know, saying that the service

348
00:22:04,888 --> 00:22:08,354
isn't getting what it's expected. So some change in your most recent

349
00:22:08,402 --> 00:22:11,734
deployment has caused a service to not

350
00:22:11,772 --> 00:22:15,462
respond correctly because you're not asking correctly for information

351
00:22:15,596 --> 00:22:19,546
that change in your system has caused an error, and you know that perhaps the

352
00:22:19,568 --> 00:22:23,046
way to deal with that is to roll back to the previously known

353
00:22:23,078 --> 00:22:26,410
error, send a message or an email

354
00:22:26,480 --> 00:22:30,370
or a slack message, or something in pager duty

355
00:22:30,470 --> 00:22:34,126
to the developer in question, and roll back to

356
00:22:34,148 --> 00:22:37,482
the previous known working state, and thus

357
00:22:37,546 --> 00:22:41,422
healing itself and reporting back that there was a problem.

358
00:22:41,556 --> 00:22:45,210
Then this is a great example of saving somebody some

359
00:22:45,300 --> 00:22:48,802
phone call in the middle of the night from support because

360
00:22:48,856 --> 00:22:51,538
of an error. In the olden days,

361
00:22:51,704 --> 00:22:55,282
back in the olden days, say five years ago, ten years ago,

362
00:22:55,416 --> 00:22:58,098
one of the things you would have to do when an error occurred was you

363
00:22:58,104 --> 00:23:00,838
have to call somebody to get them to fix it, particularly if it was a

364
00:23:00,844 --> 00:23:05,238
critical error where customers were, say, losing money or customers

365
00:23:05,324 --> 00:23:08,258
weren't able to spend money, which of course would be a big problem for your

366
00:23:08,284 --> 00:23:11,418
business. But because you can now,

367
00:23:11,504 --> 00:23:15,158
through tools like rollbar, identify and recognize

368
00:23:15,254 --> 00:23:19,226
specific errors as critical, you can fix that with the self healing system and

369
00:23:19,248 --> 00:23:22,574
then have somebody just come in in the morning and deal with it by

370
00:23:22,612 --> 00:23:25,280
returning the system to a known good state.

371
00:23:26,210 --> 00:23:30,126
So finally, yes, rollbar can automatically roll back a release. It can

372
00:23:30,148 --> 00:23:33,834
automatically turn off a feature flag, and it can automatically

373
00:23:33,882 --> 00:23:38,062
create an environment that you know was working correctly

374
00:23:38,206 --> 00:23:41,986
before the deploy happened. Now, you might wonder, why would

375
00:23:42,008 --> 00:23:45,646
you not know this right away? You might. And you might know immediately

376
00:23:45,678 --> 00:23:49,138
that a problem occurs with a new feature or with a new release,

377
00:23:49,234 --> 00:23:52,886
but you might not. Maybe the problem occurs because of

378
00:23:52,908 --> 00:23:56,614
the character set used in a time zone that is different

379
00:23:56,652 --> 00:24:00,466
than yours, or a time zone, or a character set that you

380
00:24:00,508 --> 00:24:04,106
haven't tested with, perhaps. And maybe that happened in the time

381
00:24:04,128 --> 00:24:07,814
zone halfway around the world, in Japan from the United States, or vice versa.

382
00:24:07,942 --> 00:24:11,790
And maybe the error occurs simply because a customer

383
00:24:11,860 --> 00:24:15,086
does something in a specific way that no one has ever thought of. Customers are

384
00:24:15,108 --> 00:24:18,746
known for being chaotic and chaotic

385
00:24:18,778 --> 00:24:22,394
neutrals. Probably. My guess would be, and Mary,

386
00:24:22,442 --> 00:24:27,066
there might even be some chaotic evils out there. But in

387
00:24:27,108 --> 00:24:30,686
any event, you want to be able to deal with those errors and roll

388
00:24:30,718 --> 00:24:34,606
back to its known good state, whatever that means, whether it be a feature flag

389
00:24:34,638 --> 00:24:38,342
or a previous version or a previous release, in order

390
00:24:38,396 --> 00:24:42,322
to be able to correctly and properly respond

391
00:24:42,386 --> 00:24:46,166
and heal the system without human intervention and

392
00:24:46,188 --> 00:24:48,620
without having to call somebody at 02:00 in the morning.

393
00:24:50,670 --> 00:24:54,186
So, in summary, self healing systems are possible. They're only

394
00:24:54,208 --> 00:24:56,700
going to get more capable as we move forward.

395
00:24:57,630 --> 00:25:00,986
Tracking and learning about errors is the critical part of all

396
00:25:01,008 --> 00:25:04,846
of a self healing system. Knowing what the nature of

397
00:25:04,868 --> 00:25:08,526
the problem is, how often it's occurring, where it's occurring, is all very,

398
00:25:08,548 --> 00:25:12,810
very critical. And rollbar is the system that lets you self heal.

399
00:25:12,970 --> 00:25:16,766
So I'd like to thank you for your attention today. Please feel free

400
00:25:16,788 --> 00:25:20,398
to reach out to me. You can contact me on my contact

401
00:25:20,484 --> 00:25:23,870
page at try rollbar.com nick.

402
00:25:24,370 --> 00:25:28,070
And thank you for your attendance and your attention.

403
00:25:28,570 --> 00:25:30,100
I'm happy to answer any questions.

