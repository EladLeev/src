1
00:00:27,490 --> 00:00:31,314
Hello. So I am proxy Humre and I am currently independent

2
00:00:31,362 --> 00:00:34,598
developer arocad. So currently also recognized as

3
00:00:34,604 --> 00:00:38,086
a web developer expert for the Google cloud. So today we are

4
00:00:38,108 --> 00:00:41,494
going to talk about what sidecarless service mesh mesh and

5
00:00:41,532 --> 00:00:44,902
what is ambient mesh, what is istio and what

6
00:00:44,956 --> 00:00:49,766
do we do. So let's talk about who

7
00:00:49,788 --> 00:00:53,502
am my. So I'm developer advocate, I have been recognized as

8
00:00:53,556 --> 00:00:56,986
JD, I run my own podcast which is named

9
00:00:57,018 --> 00:01:00,622
as a cloud native talks. It is for the people who are around

10
00:01:00,676 --> 00:01:03,986
cloud native DevOps and want to learn about the same.

11
00:01:04,088 --> 00:01:06,820
I sometimes speak about developer relations also.

12
00:01:07,670 --> 00:01:11,106
So I have been part of various committees like keep up

13
00:01:11,128 --> 00:01:15,140
DevOps communication, developer relations committee. I run case study

14
00:01:15,990 --> 00:01:19,142
and lot of communities. So if you want to connect

15
00:01:19,196 --> 00:01:22,854
me, if you want ask me doubt around the same, you can reach

16
00:01:22,892 --> 00:01:26,194
out to my sandals. So let's

17
00:01:26,242 --> 00:01:29,930
move forward and as you can see, so common

18
00:01:30,000 --> 00:01:33,850
questions everyone has having like why actually service

19
00:01:33,920 --> 00:01:37,446
mesh is needed and what is actually the theme.

20
00:01:37,558 --> 00:01:41,454
So there are some challenges with the microservices. So as

21
00:01:41,492 --> 00:01:45,040
you can see, if you have multiple services,

22
00:01:45,490 --> 00:01:48,878
how you will interact with the same, you want to

23
00:01:48,964 --> 00:01:52,506
work on the services, you want to pass the

24
00:01:52,548 --> 00:01:56,082
connection from one end to another, from one endpoint to another

25
00:01:56,136 --> 00:02:00,254
endpoint. So how you will make that secure

26
00:02:00,382 --> 00:02:03,262
then there is lot of problems like resiliency,

27
00:02:03,406 --> 00:02:07,334
timeouts and communication failures. So this

28
00:02:07,372 --> 00:02:11,478
is some of the topics where I think service

29
00:02:11,564 --> 00:02:15,174
mesh is needed. But yeah, you can do

30
00:02:15,212 --> 00:02:18,454
it by give you a traditional method also.

31
00:02:18,492 --> 00:02:22,186
So what actually is the problem? So it

32
00:02:22,208 --> 00:02:25,242
is really complex and lot of things are there, right?

33
00:02:25,376 --> 00:02:29,162
And how you will control the traffic, it doesn't happen. These things

34
00:02:29,216 --> 00:02:32,986
doesn't happen in the traditional approach. So that's why service mesh

35
00:02:33,018 --> 00:02:37,022
was introduced. Service mesh is nothing but one programmable framework which

36
00:02:37,076 --> 00:02:41,530
allows you to observe the things, observe the integrations and secure

37
00:02:41,610 --> 00:02:45,426
your transport of packets from one endpoint to

38
00:02:45,448 --> 00:02:48,366
another. Then it connects the various microservices.

39
00:02:48,478 --> 00:02:52,722
So you have different, different microservices across different

40
00:02:52,776 --> 00:02:56,694
different jobs applications in your cluster or

41
00:02:56,732 --> 00:03:00,182
it can be in your application. So how you will do that

42
00:03:00,236 --> 00:03:04,310
thing. So that's why service mesh is there. So before

43
00:03:04,380 --> 00:03:08,698
service mesh what happens? So there was like let's take example, you have

44
00:03:08,864 --> 00:03:12,874
service a and service b which is nothing, but you

45
00:03:12,912 --> 00:03:16,202
have any web page, right? You want to

46
00:03:16,256 --> 00:03:20,214
transfer some traffic

47
00:03:20,262 --> 00:03:23,886
from one service to another service. So you

48
00:03:23,908 --> 00:03:27,342
have to go by the traditional approach and you will directly do the same.

49
00:03:27,396 --> 00:03:31,486
But developers have to work on this thing in

50
00:03:31,508 --> 00:03:35,118
a manner like they have to work for the transaction of

51
00:03:35,124 --> 00:03:39,042
the services and traffic, everything they had to do,

52
00:03:39,176 --> 00:03:42,754
but they don't love that. Right? Before service mesh it was like

53
00:03:42,792 --> 00:03:46,146
they are working on the code as well as they are maintaining the business logic

54
00:03:46,178 --> 00:03:49,682
for it. So it was really not feasible,

55
00:03:49,746 --> 00:03:52,834
right? So that's why service mesh was introduced.

56
00:03:52,882 --> 00:03:56,534
Like operations team, you do this thing and we will do

57
00:03:56,572 --> 00:04:00,278
this thing. So thing is like now developer advocate want to focus,

58
00:04:00,444 --> 00:04:03,686
don't need to focus on what actually is a business logic

59
00:04:03,718 --> 00:04:07,242
on your code. They just write their code and other things

60
00:04:07,296 --> 00:04:10,330
will be managed by the service mesh. Service mesh will manage everything.

61
00:04:10,400 --> 00:04:13,866
Like whatever resources you want to add, whatever traffic

62
00:04:13,898 --> 00:04:17,454
you want to manage or something. Then everything will be done

63
00:04:17,492 --> 00:04:20,906
by the service mesh. So there are some end goals

64
00:04:21,018 --> 00:04:24,974
for the service mesh, right? Like service discovery

65
00:04:25,022 --> 00:04:28,126
load balancing. So service discovery load

66
00:04:28,158 --> 00:04:31,460
balancing which is like you have,

67
00:04:33,270 --> 00:04:37,206
you have to scale lot of your application through different, different servers and

68
00:04:37,228 --> 00:04:40,662
something our service machine will help you

69
00:04:40,716 --> 00:04:44,950
that. So you will say kernels is the same but it is completely different.

70
00:04:45,100 --> 00:04:48,662
Then there is a secure service to service communication. Of course

71
00:04:48,716 --> 00:04:52,170
there is mutual TLS connection, then there is a traffic control,

72
00:04:52,240 --> 00:04:55,354
shaping, shifting. So whatever you transfer from one

73
00:04:55,392 --> 00:04:59,222
packet, one service to another, traffic will be managed accordingly.

74
00:04:59,366 --> 00:05:03,278
You can put new policies, intentions based access control.

75
00:05:03,444 --> 00:05:06,958
Then you have the traffic metric collection, you can observe the things,

76
00:05:07,044 --> 00:05:11,166
observability is present as well as you

77
00:05:11,188 --> 00:05:14,574
can make your business resilient by putting lot of

78
00:05:14,612 --> 00:05:18,174
resilient process, right? You generally

79
00:05:18,222 --> 00:05:21,586
have seen that in the incident management and kind of things, right?

80
00:05:21,688 --> 00:05:25,266
Then there is an API programmable interface, which is nothing, but you

81
00:05:25,288 --> 00:05:28,530
have the APIs to connect all of the gateways,

82
00:05:28,610 --> 00:05:32,674
ingress and lot of things. So there are some platform goals

83
00:05:32,722 --> 00:05:36,486
with the same service mesh. As you can see at the

84
00:05:36,508 --> 00:05:40,646
application level routing there is like filtering transformation

85
00:05:40,678 --> 00:05:44,554
which you talked about. Then observability side, you can

86
00:05:44,752 --> 00:05:48,314
collect the metrics, you can capture the traffic, you can

87
00:05:48,352 --> 00:05:51,290
work on it, you want to work on the locks, you can observe things,

88
00:05:51,360 --> 00:05:55,102
you can introduce the new integrations in the observability. So everything

89
00:05:55,156 --> 00:05:58,762
is present by the anchor point. As well as resiliency

90
00:05:58,906 --> 00:06:02,666
is one of the main factor in the business and it enables

91
00:06:02,698 --> 00:06:07,586
it by traffic resiliency failover, high quality. So you

92
00:06:07,608 --> 00:06:12,114
don't have to wait for being your next job

93
00:06:12,152 --> 00:06:15,770
to be available. It will be done by the service mesh.

94
00:06:15,870 --> 00:06:19,206
Then zero trust security, which is one of the important part, right?

95
00:06:19,308 --> 00:06:23,606
So zero trust security is nothing, but you

96
00:06:23,628 --> 00:06:27,414
don't just send, right? You first authenticate everything and then

97
00:06:27,452 --> 00:06:30,930
you get the permission. So secure communication with the microservices

98
00:06:31,010 --> 00:06:34,826
you manage the mutual TLS connection, then you manage the

99
00:06:34,848 --> 00:06:38,266
certificates, certificate, rotations you do, you enforce the

100
00:06:38,288 --> 00:06:41,318
proper security policies, filters. Then only it

101
00:06:41,344 --> 00:06:45,242
will go forward. Any doubts, you can ask me anytime.

102
00:06:45,386 --> 00:06:49,226
So as you know, what actually is the steel service mesh,

103
00:06:49,258 --> 00:06:52,320
right? So istio service mesh is like, it has.

104
00:06:52,710 --> 00:06:57,058
So whatever. If your application is sitting outside

105
00:06:57,144 --> 00:07:00,738
of the cluster, he's sending something, right? So it will

106
00:07:00,824 --> 00:07:05,198
capture by the gateway and gateway will send it to this

107
00:07:05,304 --> 00:07:08,886
service a, service b. So in service, what happens? There is

108
00:07:08,908 --> 00:07:12,534
sidecar proxy, right? So sidecar proxy will take

109
00:07:12,572 --> 00:07:16,102
that resource, take that traffic and everything and

110
00:07:16,156 --> 00:07:19,542
that will be like whatever. If application a

111
00:07:19,596 --> 00:07:22,986
wants to send some information to the application b, then it

112
00:07:23,008 --> 00:07:26,566
will go to the sidecar proxy and sidecar proxy will send to the sidecar proxy

113
00:07:26,598 --> 00:07:30,054
of the application b. And application b will acknowledge

114
00:07:30,102 --> 00:07:33,466
that. But everything is managed by the person who

115
00:07:33,488 --> 00:07:36,510
is sitting outside, which is the STod control plane.

116
00:07:37,090 --> 00:07:41,226
And Kubernetes does the Kubernetes send the service discovery

117
00:07:41,258 --> 00:07:45,026
mesh configuration and stuff. So STOD will be the only one who will

118
00:07:45,048 --> 00:07:48,110
collect the matrix, it will provide the configurations,

119
00:07:48,190 --> 00:07:51,554
it will generate certificates and what are metrics are

120
00:07:51,592 --> 00:07:55,874
generated will be done by the sidekicker proxy. So what

121
00:07:55,912 --> 00:07:59,314
is actually the sidekicker proxy? It is nothing but your NY proxy,

122
00:07:59,362 --> 00:08:02,806
right? So whatever happens service sends to

123
00:08:02,828 --> 00:08:06,034
the outbound traffic is going to the proxy,

124
00:08:06,082 --> 00:08:09,734
right? So that proxy is nothing but the NY. So how

125
00:08:09,772 --> 00:08:13,274
istio works today? So as you can see, there is a service a

126
00:08:13,312 --> 00:08:16,714
service b which we talked about. So every application pod is

127
00:08:16,752 --> 00:08:19,546
deployed with a proxy which is envelope proxy, right?

128
00:08:19,648 --> 00:08:23,046
And this entire thing is known as a data plane.

129
00:08:23,158 --> 00:08:27,054
So the proxy is sidecar of our application. So all l

130
00:08:27,092 --> 00:08:30,106
four or l seven traffic goes through the sidecar proxy.

131
00:08:30,138 --> 00:08:34,042
Only l four. L seven is your layer four and layer seven capabilities,

132
00:08:34,106 --> 00:08:37,502
right? So as we move forward, as you can see,

133
00:08:37,556 --> 00:08:40,978
steady control pane. So as you can see,

134
00:08:41,144 --> 00:08:45,038
control pane is something which puts the policies,

135
00:08:45,134 --> 00:08:47,720
filters, proxies, everything.

136
00:08:48,650 --> 00:08:53,090
It generates the certificates, it keeps track of your entire service mesh.

137
00:08:53,250 --> 00:08:56,582
And it is the only one who will collect the metrics and

138
00:08:56,636 --> 00:09:00,406
work on the things, right? So control plane is separate from your data plane,

139
00:09:00,438 --> 00:09:03,020
but it is the only one who will do everything.

140
00:09:03,710 --> 00:09:06,778
So we already talked about this.

141
00:09:06,944 --> 00:09:10,730
As you can see, istio sidecarless model is like you have the resources

142
00:09:10,810 --> 00:09:14,606
in the application, right? So that is

143
00:09:14,708 --> 00:09:16,720
done by the envelope proxy, right?

144
00:09:17,650 --> 00:09:21,194
But it's really complex, like large deployments of the enterprise

145
00:09:21,242 --> 00:09:25,442
service mesh. As you can see, you have one

146
00:09:25,576 --> 00:09:29,410
like, let's say your bar Soloio

147
00:09:29,830 --> 00:09:33,602
wants to talk to the wine Soloio it have to go through the

148
00:09:33,736 --> 00:09:37,806
level egress, top level egress. Then from your ingress

149
00:09:37,918 --> 00:09:41,480
of the istio service to the going to the

150
00:09:42,330 --> 00:09:46,034
top level egress of the foo then it going to the wine.

151
00:09:46,162 --> 00:09:50,138
It is like really complex structure. It looks easier at

152
00:09:50,304 --> 00:09:53,290
overview but it is really complex.

153
00:09:55,150 --> 00:09:58,134
There are a lot of challenges in the cycle, proxy, overhead,

154
00:09:58,182 --> 00:10:01,600
cost, operational complexity, performance is issues.

155
00:10:01,970 --> 00:10:06,110
So actually not issues or something. But yeah performance is

156
00:10:06,180 --> 00:10:09,790
lot of it is comparatively low,

157
00:10:09,860 --> 00:10:13,534
right? So whenever you are deploying any

158
00:10:13,572 --> 00:10:17,298
istio, book means like istio any application or something,

159
00:10:17,464 --> 00:10:21,182
I'm just taking example of the book info sample deployment

160
00:10:21,246 --> 00:10:24,814
which anyone has done till now, right? If you know the istio,

161
00:10:24,942 --> 00:10:28,626
so you can see like one container is extra attached every time which

162
00:10:28,648 --> 00:10:32,406
is sidecar, right? It's just increasing the lot

163
00:10:32,428 --> 00:10:35,670
of things like it is increasing your cost

164
00:10:35,740 --> 00:10:39,526
of cost and lot of things. So there is some challenges which

165
00:10:39,548 --> 00:10:43,514
is operational complexity. As you can see you have to move through the

166
00:10:43,552 --> 00:10:47,158
lot of things. As I show you then application mesh aware

167
00:10:47,254 --> 00:10:51,322
which is nothing but application is not aware of your service

168
00:10:51,376 --> 00:10:54,140
mesh is not aware about what is happening inside the application.

169
00:10:54,770 --> 00:10:58,174
Another thing is like latency, like you have to go through the

170
00:10:58,212 --> 00:11:01,738
one application to the sidekar, then sidecarless go to the another sidekar

171
00:11:01,754 --> 00:11:05,342
and sidecarless goes to the application too. So that increase the latency

172
00:11:05,406 --> 00:11:09,362
for sure. Then cost is of course

173
00:11:09,416 --> 00:11:13,090
you have lot of statics attached to the different, different pods,

174
00:11:13,910 --> 00:11:18,758
your containers, right? So of course it will take your cost

175
00:11:18,844 --> 00:11:22,582
for sure. So what is the future of service mesh? So future

176
00:11:22,636 --> 00:11:26,450
of service mesh always will happen around the data plane.

177
00:11:26,610 --> 00:11:30,074
So as you can see data plane is where the innovation continues to happen.

178
00:11:30,112 --> 00:11:35,546
It is nothing but the astray end in the data plane which is and

179
00:11:35,648 --> 00:11:38,330
there is a webassembly you can push HTTP.

180
00:11:39,310 --> 00:11:43,222
So first is you can also do the configurations

181
00:11:43,286 --> 00:11:46,446
around the graphql and stuff, right? Another thing is like

182
00:11:46,468 --> 00:11:49,930
you optimize the data plan in the future which is nothing but EBPF.

183
00:11:50,010 --> 00:11:53,422
You can do the server level code, right? Kernel level

184
00:11:53,476 --> 00:11:57,086
code. So introducing HTML mesh, it is new open source

185
00:11:57,118 --> 00:12:01,106
contribution launched last year by collaboration with the

186
00:12:01,128 --> 00:12:05,140
Soloio and Google and lot of contributors around the world.

187
00:12:05,450 --> 00:12:08,802
So they are working really nice. As you can see cost reduction

188
00:12:08,866 --> 00:12:12,722
happened, simplifying operations happened, then performance is improved.

189
00:12:12,866 --> 00:12:16,950
It also has a rust based configuration.

190
00:12:17,530 --> 00:12:21,402
So what actually it does it slice the layers so

191
00:12:21,456 --> 00:12:24,918
you have like severe overlay and l seven processing layer.

192
00:12:25,014 --> 00:12:28,614
So whatever you want to do, you don't have to input

193
00:12:28,662 --> 00:12:32,174
all of the things according to

194
00:12:32,212 --> 00:12:35,486
your nudity, you can configure this thing. So if

195
00:12:35,508 --> 00:12:38,926
you want the tcp routing tunneling, it will

196
00:12:38,948 --> 00:12:42,574
be provided by default. You just have to input new

197
00:12:42,612 --> 00:12:46,366
policies for the l seven things. So observability without

198
00:12:46,468 --> 00:12:50,114
istio sidecars is like whenever you have

199
00:12:50,152 --> 00:12:53,538
to scrap any metrics or something you have to

200
00:12:53,624 --> 00:12:56,660
go to the sidecars of your

201
00:12:57,690 --> 00:13:01,026
you have the two costs, right? And inside your node

202
00:13:01,058 --> 00:13:04,934
there is two costs and then it will have that

203
00:13:05,132 --> 00:13:08,746
containers sidecar is the one who

204
00:13:08,768 --> 00:13:12,422
will provide the application metrics to the prometheus,

205
00:13:12,566 --> 00:13:16,714
right? So are we doing everything for

206
00:13:16,832 --> 00:13:19,974
that, right? Are we working really nice on that?

207
00:13:20,032 --> 00:13:23,674
So as you can see, if we use HTML mesh,

208
00:13:23,722 --> 00:13:27,546
what happens? It directly provides previously

209
00:13:27,578 --> 00:13:31,310
it was like istio proxy is something which provides

210
00:13:32,370 --> 00:13:36,046
promises, right? So now you don't have to worry

211
00:13:36,078 --> 00:13:39,826
on the same it will directly provide then what is actually the

212
00:13:39,848 --> 00:13:43,550
HTML mesh. It doesn't have any sidecarless attached.

213
00:13:43,710 --> 00:13:47,098
So you have like previously you have the pod per proxy,

214
00:13:47,134 --> 00:13:50,418
right? Every pod has a one proxy. Now you have the proxy

215
00:13:50,514 --> 00:13:54,326
for the entire node, right? So as you

216
00:13:54,348 --> 00:13:57,990
can see sidecars are reduced so your cost is reduced.

217
00:13:58,490 --> 00:14:02,374
Similarly what is 60 ambit mesh, it reduces

218
00:14:02,422 --> 00:14:06,246
the costs directly. As I talked about in your HTO sidecar

219
00:14:06,278 --> 00:14:09,100
data plane you just have the one port per.

220
00:14:09,870 --> 00:14:13,114
So previously you had the one port per one proxy,

221
00:14:13,242 --> 00:14:16,686
now it has like one proxy per node which is like

222
00:14:16,868 --> 00:14:21,022
biggest thing you can do. One of the nice

223
00:14:21,076 --> 00:14:24,678
blog written by the Soloio is which talks about stambar

224
00:14:24,714 --> 00:14:27,858
mesh means what it means for your wallet. As you

225
00:14:27,864 --> 00:14:32,750
can see it reduces the cpu time, it reduces the memory

226
00:14:32,830 --> 00:14:36,994
and lot of things and it reduces it really vastly,

227
00:14:37,042 --> 00:14:40,726
right? As you move forward. Then as you can see there

228
00:14:40,748 --> 00:14:43,778
are a lot of advantages using the HTML mesh.

229
00:14:43,954 --> 00:14:48,566
It reduces the latency and what

230
00:14:48,588 --> 00:14:52,262
are other things, right? Then if you talk about it reduces

231
00:14:52,326 --> 00:14:56,026
the cost proxy per node it is then you

232
00:14:56,048 --> 00:14:59,674
have the multitenant proxy which will help you to work on

233
00:14:59,712 --> 00:15:03,182
lot of things around. If you have come across

234
00:15:03,236 --> 00:15:09,882
the platform engineering it is one of the really configured

235
00:15:09,946 --> 00:15:13,982
nowadays and people talk a lot. Then lightweight proxy

236
00:15:14,046 --> 00:15:17,966
l four implementation. Then there is a simplifying

237
00:15:18,158 --> 00:15:22,830
operations as done by so what happens anytime

238
00:15:22,910 --> 00:15:26,702
you are launching

239
00:15:26,766 --> 00:15:30,326
new something you have to attach any resource to

240
00:15:30,348 --> 00:15:34,470
your application or something you have to restart your pods

241
00:15:35,130 --> 00:15:38,326
in previous versions of the istio, but now it

242
00:15:38,348 --> 00:15:41,962
doesn't happen like istio embedded mesh is like data plane which

243
00:15:42,016 --> 00:15:45,846
you can directly add to your configurations so you don't

244
00:15:45,878 --> 00:15:48,810
have to worry on the restarting your costs.

245
00:15:49,310 --> 00:15:52,638
If you are attaching it directly, you don't have to restart it,

246
00:15:52,804 --> 00:15:56,414
you can directly run from that. So it makes lot

247
00:15:56,452 --> 00:16:00,110
of work easier, right. Then you will not have to face

248
00:16:00,180 --> 00:16:02,618
that downtime and lot of things, right.

249
00:16:02,724 --> 00:16:06,270
Simplifying additional new application then simplifying application updates,

250
00:16:06,350 --> 00:16:09,474
decoupling proxy and yeah l

251
00:16:09,512 --> 00:16:13,074
four, l seven, right. So you can also use

252
00:16:13,112 --> 00:16:16,874
it for the acceleration of the using the epps

253
00:16:17,022 --> 00:16:20,326
then zero trust security what can be

254
00:16:20,348 --> 00:16:24,534
done in the future. Then you can see it

255
00:16:24,572 --> 00:16:27,186
provides alpha matrix and mutual tls.

256
00:16:27,378 --> 00:16:31,730
Similarly you have, right statement,

257
00:16:31,810 --> 00:16:35,726
right? So here you can introduce the EBPF

258
00:16:35,778 --> 00:16:39,862
in a manner like it is the one who will solve

259
00:16:39,926 --> 00:16:43,338
everything for you. Like you don't have to worry on the sidecar.

260
00:16:43,354 --> 00:16:46,000
Also sidecar can be replaced by the VPF technology.

261
00:16:46,530 --> 00:16:50,714
So there are a lot of resources to learn about HDML mesh,

262
00:16:50,762 --> 00:16:54,206
you can go to these blocks and you can learn on the

263
00:16:54,228 --> 00:16:58,082
same. So one of the things which I would like to discuss

264
00:16:58,216 --> 00:17:02,382
about what you can make lot of things easier

265
00:17:02,526 --> 00:17:06,200
which is right here. So let's say

266
00:17:07,290 --> 00:17:10,760
if you want to talk from service to service

267
00:17:11,130 --> 00:17:14,034
by doing some policy attachment,

268
00:17:14,082 --> 00:17:18,040
right in the STMB mesh, so previously what happens

269
00:17:19,790 --> 00:17:23,914
you have to attach that things to the sidekicker proxy, then application

270
00:17:24,032 --> 00:17:27,498
will talk to the application. So now it doesn't have that,

271
00:17:27,584 --> 00:17:31,258
it directly have the entire node has a one proxy, right?

272
00:17:31,344 --> 00:17:35,194
So that proxy will talk to every applications of

273
00:17:35,232 --> 00:17:38,846
things. So how beautiful it is. Like one proxy is

274
00:17:38,868 --> 00:17:42,174
there which is known as Ztunnel. That ztunnel will

275
00:17:42,212 --> 00:17:46,690
talk to the application a then application b application anything,

276
00:17:46,760 --> 00:17:50,942
right? So it reduces your complexity,

277
00:17:51,006 --> 00:17:54,482
it reduces your cost, it also do lot of things

278
00:17:54,536 --> 00:17:57,910
for you. So you don't have to worry about the l four things.

279
00:17:57,980 --> 00:18:01,350
Then it comes by default for the l four

280
00:18:01,420 --> 00:18:05,266
capabilities, it comes by default for the neutral tls.

281
00:18:05,378 --> 00:18:08,886
So another thing you can do is like l seven, right? If you

282
00:18:08,908 --> 00:18:12,378
want l seven capabilities you want to work on the failure and lot

283
00:18:12,384 --> 00:18:16,026
of things, right? You just have to add a policy

284
00:18:16,208 --> 00:18:19,882
by doing the configuration and once you do that

285
00:18:19,936 --> 00:18:23,262
and you can directly work on the things, you want to introduce something,

286
00:18:23,316 --> 00:18:27,038
you can do that. So all of these are available

287
00:18:27,204 --> 00:18:31,278
in one of the

288
00:18:31,444 --> 00:18:34,586
workshop provided by this istio brand

289
00:18:34,618 --> 00:18:38,014
mesh. You can go to the solo academy and you can learn about

290
00:18:38,052 --> 00:18:42,400
same. There are a lot of resources around the and

291
00:18:43,010 --> 00:18:46,326
if you want to ask any doubts you can connectment and so thank

292
00:18:46,348 --> 00:18:50,102
you for connecting, I hope you learned a lot of things around the same.

293
00:18:50,236 --> 00:18:51,860
So thank you.

