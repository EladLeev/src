1
00:00:00,250 --> 00:00:03,934
Are youll an SRE a

2
00:00:03,972 --> 00:00:08,042
developer, a quality engineer

3
00:00:08,106 --> 00:00:12,346
who wants to tackle the challenge of improving reliability in your DevOps?

4
00:00:12,458 --> 00:00:16,510
You can enable your DevOps for reliability with chaos native.

5
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native. Litmus Cloud

6
00:01:17,450 --> 00:01:21,234
hello everyone. Welcome to this session. Deploy n applications

7
00:01:21,282 --> 00:01:25,426
to n clusters using Argo City application set my name is Dewan

8
00:01:25,458 --> 00:01:28,390
Ahmed. I'm a developer advocate at Red Hat.

9
00:01:28,910 --> 00:01:32,854
I'm from Moncton, New Brunswick, which is in the beautiful Atlantic

10
00:01:32,902 --> 00:01:36,278
region of Canada. I love everything cloud native

11
00:01:36,374 --> 00:01:39,766
with a focus on DevOps and Gitops tools.

12
00:01:39,958 --> 00:01:43,706
Besides work, I love to play pool and ping pong.

13
00:01:43,898 --> 00:01:47,774
I'm also a freelance carrier coach, where I help students and

14
00:01:47,812 --> 00:01:50,640
new grads to start a career in tech.

15
00:01:51,650 --> 00:01:55,182
In terms of today's agenda, we'll start with the idea

16
00:01:55,236 --> 00:01:58,910
of Githubs, especially Githubs on Kubernetes,

17
00:01:59,070 --> 00:02:02,366
and then we'll cover the popular open source tool Argo

18
00:02:02,398 --> 00:02:05,790
CD. The main focus of today's session

19
00:02:05,870 --> 00:02:09,720
is a subproject of Argo CD called Application set.

20
00:02:10,330 --> 00:02:13,970
For both Argo CD and application set, we'll have demos

21
00:02:14,050 --> 00:02:16,840
and at the end we'll have some time for Q A.

22
00:02:17,450 --> 00:02:20,666
On the bottom right corner of your screen youll can see a link to

23
00:02:20,688 --> 00:02:23,958
a Git repository. In that repository

24
00:02:24,054 --> 00:02:27,386
I have added detailed instructions on how you can

25
00:02:27,408 --> 00:02:30,300
do demo on Kubernetes platform.

26
00:02:30,750 --> 00:02:34,320
The demo I'll be showing will be based on OpenShift platform.

27
00:02:34,850 --> 00:02:38,586
If you have a mobile device, you can also can that QR

28
00:02:38,618 --> 00:02:42,110
code which will take you right to that git repository.

29
00:02:45,010 --> 00:02:48,402
Luis Fasira summarized Gitops in one

30
00:02:48,456 --> 00:02:52,302
slide. So Gitops in one slide

31
00:02:52,366 --> 00:02:56,198
means there are three main principles. We use

32
00:02:56,284 --> 00:02:58,710
Git as the single source of truth.

33
00:02:59,210 --> 00:03:02,498
We use Git as the single place where we operate.

34
00:03:02,594 --> 00:03:06,086
That means not on direct clusters, but we

35
00:03:06,188 --> 00:03:09,706
do that on git, and the challenges is reflected on the

36
00:03:09,728 --> 00:03:13,382
clusters. All the changes we're

37
00:03:13,446 --> 00:03:16,970
making will also be observable and verifiable.

38
00:03:17,790 --> 00:03:21,846
From the fun fact of Gitops Alexis Richardson first came

39
00:03:21,888 --> 00:03:25,662
up with the term Gitops, and when he ran it by his friend,

40
00:03:25,796 --> 00:03:29,326
his friend thought it's the ugliest word he has ever heard,

41
00:03:29,428 --> 00:03:33,026
and now he can't unhear it trying to

42
00:03:33,048 --> 00:03:36,930
come up with a term that is easy to pronounce but also difficult

43
00:03:37,000 --> 00:03:40,850
to forget. Alex knew that he came up with a perfect term.

44
00:03:43,910 --> 00:03:47,874
Now let's understand Gitop's BoM

45
00:03:47,922 --> 00:03:50,390
or bill of material on kubernetes.

46
00:03:51,050 --> 00:03:55,266
First we need Git repo, where our application manifests

47
00:03:55,298 --> 00:03:58,982
files will reside. Then we need kubernetes

48
00:03:59,046 --> 00:04:02,746
cluster or OpenShift cluster where we

49
00:04:02,768 --> 00:04:06,614
are deploying our application. You might also need a manifest

50
00:04:06,662 --> 00:04:10,566
generation tool like customize. If you have different environments

51
00:04:10,678 --> 00:04:14,586
like dev, Preprod and Prod, don't use

52
00:04:14,608 --> 00:04:18,446
a CI server to orchestrate straight direct updates to kubernetes as

53
00:04:18,468 --> 00:04:21,918
a set of CI jobs. There's a blog post mentioned in

54
00:04:21,924 --> 00:04:26,210
the resources section that covers why this is an anti pattern.

55
00:04:26,790 --> 00:04:29,986
And finally, you'll need your kubernetes manifest files such

56
00:04:30,008 --> 00:04:35,426
as deployments and services what

57
00:04:35,448 --> 00:04:39,954
is Argo CD? ArgoCD is declarative,

58
00:04:40,082 --> 00:04:43,650
GitHub's continuous delivery tool for Kubernetes.

59
00:04:43,810 --> 00:04:47,926
It is part of an open source project. The project started at

60
00:04:47,948 --> 00:04:51,430
Intuit, but then companies like IBM and Red Hat

61
00:04:51,510 --> 00:04:55,046
and various individual contributors have contributed

62
00:04:55,078 --> 00:04:58,262
to this project. From this diagram,

63
00:04:58,406 --> 00:05:02,394
the concept is pretty simple. ArgoCD watches over your Git repository

64
00:05:02,522 --> 00:05:06,414
and whatever change you have or whatever

65
00:05:06,532 --> 00:05:09,226
configuration you have in your Git repositories,

66
00:05:09,418 --> 00:05:12,618
ArgoCD implements that change declaratively

67
00:05:12,714 --> 00:05:14,270
on your clusters.

68
00:05:18,280 --> 00:05:22,280
Now why Argocd? The first few points

69
00:05:22,350 --> 00:05:26,496
have been covered in previous slides, like why we're

70
00:05:26,548 --> 00:05:29,420
using that. In Argo CD,

71
00:05:29,920 --> 00:05:32,910
you use git push for managing your application,

72
00:05:33,600 --> 00:05:37,100
delivering including changes to your cluster.

73
00:05:37,440 --> 00:05:40,984
This is the flow your developers are familiar and comfortable

74
00:05:41,032 --> 00:05:44,264
with. In terms of security, Argo CD

75
00:05:44,312 --> 00:05:48,240
offers so integration based on OIDC or Auth

76
00:05:48,310 --> 00:05:52,004
two, and it offers a single sign on for

77
00:05:52,042 --> 00:05:55,680
various social profiles as well, including GitHub,

78
00:05:55,760 --> 00:05:59,968
GitLab, LinkedIn, et cetera. In terms of automation,

79
00:06:00,144 --> 00:06:03,780
ArgoCD offers multi tenancy and arbic policies.

80
00:06:04,280 --> 00:06:08,196
ArgoCD also offers audit trails for application events

81
00:06:08,228 --> 00:06:12,084
and API calls. In terms of rollbacks or youll

82
00:06:12,132 --> 00:06:16,164
anywhere, it's a matter of youll application

83
00:06:16,302 --> 00:06:19,948
configuration committed in a git repository, so you can go back to

84
00:06:20,034 --> 00:06:23,288
any specific commit that's in your git repository,

85
00:06:23,384 --> 00:06:26,540
either using the UI or the CLI.

86
00:06:27,440 --> 00:06:30,732
If you do Argo CD app diff from your

87
00:06:30,786 --> 00:06:34,400
CLI, ArgoCD performs a diff between

88
00:06:34,550 --> 00:06:38,704
target and a live state of the cluster, and this can also be seen

89
00:06:38,742 --> 00:06:42,964
on the UI, so you can observe the drift of your application

90
00:06:43,162 --> 00:06:46,656
defined in git and the state in the target cluster.

91
00:06:46,848 --> 00:06:50,484
Now considering all this, your application team will

92
00:06:50,522 --> 00:06:54,328
have a higher velocity for faster application

93
00:06:54,494 --> 00:06:55,560
delivery.

94
00:06:58,780 --> 00:07:03,188
Now how Argo CD works Argo

95
00:07:03,204 --> 00:07:07,132
CD is implemented as a Kubernetes controller which

96
00:07:07,186 --> 00:07:10,824
continuously monitors running applications and compares

97
00:07:10,872 --> 00:07:14,732
the current live state against the desired target state as

98
00:07:14,786 --> 00:07:18,044
specified in the Git repo. So on the left hand

99
00:07:18,082 --> 00:07:21,408
side you can see our developer Persona who does a

100
00:07:21,414 --> 00:07:24,400
gate push or after a pr merges,

101
00:07:24,900 --> 00:07:28,530
ArgoCD reacts to that change.

102
00:07:29,300 --> 00:07:32,996
A deployed application, these live state deviates from

103
00:07:33,018 --> 00:07:36,420
the target state is considered out of sync.

104
00:07:37,080 --> 00:07:41,012
The ArgoCD API server is a GrPC and

105
00:07:41,066 --> 00:07:44,708
rest server which exposes the API consumed by

106
00:07:44,874 --> 00:07:48,132
the web UI, CLI and various

107
00:07:48,196 --> 00:07:51,770
CI CD systems that we can see on the left hand side of our screen

108
00:07:52,540 --> 00:07:56,608
on the blue square you can see there is a repositories server

109
00:07:56,724 --> 00:08:00,296
which is an internal service that maintains a local cache

110
00:08:00,328 --> 00:08:04,140
of the git repositories holding the application manifests.

111
00:08:04,720 --> 00:08:08,964
Synchronization can be configured using resource

112
00:08:09,032 --> 00:08:12,464
hooks so that what we see at the bottom of our

113
00:08:12,502 --> 00:08:16,160
screen hooks are ways to run scripts before,

114
00:08:16,310 --> 00:08:19,200
during and after a sync operation.

115
00:08:19,780 --> 00:08:23,028
One example or use case of such hooks is

116
00:08:23,114 --> 00:08:26,884
if you want to orchestrate a complex deployment that

117
00:08:26,922 --> 00:08:30,736
require more sort of sophistication than the Kubernetes rolling

118
00:08:30,768 --> 00:08:34,452
update strategy. You can have a script

119
00:08:34,516 --> 00:08:38,776
run before, during or after the

120
00:08:38,798 --> 00:08:42,836
sync operation. All right, so that's

121
00:08:42,868 --> 00:08:46,830
enough theory. Let's dive into Argo CD demo

122
00:08:49,520 --> 00:08:53,208
hello everyone, the first demo is on Argo

123
00:08:53,224 --> 00:08:56,876
CD. This is based on OpenShift, but if

124
00:08:56,898 --> 00:09:00,960
you'd like to follow a Kubernetes based demo, you can

125
00:09:01,030 --> 00:09:04,860
go to this GitHub repository and follow the instructions.

126
00:09:05,020 --> 00:09:07,680
This is based on vanilla Kubernetes.

127
00:09:08,660 --> 00:09:11,796
Coming back to OpenShift, we are installing can

128
00:09:11,818 --> 00:09:15,300
operator called Red Hat Openshift Gitops operator.

129
00:09:15,640 --> 00:09:19,264
This operator out of the box gives you an argo CD

130
00:09:19,312 --> 00:09:22,772
instance and also installs applicationset controller under

131
00:09:22,826 --> 00:09:26,632
Openshift GitHubs namespace. To begin

132
00:09:26,686 --> 00:09:30,600
with I'll connect to the argocd UI. For that

133
00:09:30,670 --> 00:09:34,804
I'll need the default argocd admin password

134
00:09:34,932 --> 00:09:39,016
and we can find that under workflows secrets under Openshift

135
00:09:39,048 --> 00:09:42,904
GitHubs project. Openshift GitHubs cluster

136
00:09:43,032 --> 00:09:47,256
is the name of that secret. I'll copy the secret

137
00:09:47,448 --> 00:09:51,292
and open Arcocd UI

138
00:09:51,356 --> 00:09:55,840
from here. The username is admin

139
00:09:56,660 --> 00:09:59,680
and password is what I just copied.

140
00:10:00,660 --> 00:10:04,752
Arcocd has a concept of projects.

141
00:10:04,816 --> 00:10:08,928
Now this is not Openshift projects. This is Arco CD projects

142
00:10:09,024 --> 00:10:12,500
where you can group your deployment applications.

143
00:10:13,580 --> 00:10:16,884
You can also add repositories. If it's a private

144
00:10:16,932 --> 00:10:20,296
repository, you can connect using your password or

145
00:10:20,318 --> 00:10:23,416
token. The repository which

146
00:10:23,438 --> 00:10:26,708
we are using for this demo is a public repository,

147
00:10:26,804 --> 00:10:30,376
so we don't need to connect it in advance.

148
00:10:30,488 --> 00:10:34,348
So let me copy the URL of the repositories and

149
00:10:34,434 --> 00:10:38,284
try to create an application. You can create application from

150
00:10:38,322 --> 00:10:41,920
the arco CD UI or using arco CD Cli

151
00:10:42,340 --> 00:10:45,836
but I'll create the application using the OpenShift

152
00:10:45,868 --> 00:10:48,940
console. So under the operator

153
00:10:49,100 --> 00:10:52,310
I'm going into application create application,

154
00:10:54,040 --> 00:10:55,670
let me give it a name.

155
00:10:56,440 --> 00:11:00,790
Argo sample app

156
00:11:02,920 --> 00:11:06,196
and then under destination

157
00:11:06,388 --> 00:11:09,608
I have to give the server location since it's the

158
00:11:09,614 --> 00:11:13,176
same server where arco CD is installed. It's the

159
00:11:13,198 --> 00:11:16,936
default Kubernetes service. And the namespace I'll use

160
00:11:16,958 --> 00:11:20,696
Openshift gitHubs. You can choose deploy in a different namespace

161
00:11:20,808 --> 00:11:24,872
and you have to add a label that says managed by Openshift GitHubs.

162
00:11:24,936 --> 00:11:29,464
But for now I'll use Openshift GitHubs namespace project

163
00:11:29,522 --> 00:11:33,410
is the argo CD project which is default. That's the only project

164
00:11:33,860 --> 00:11:37,836
that's on these Argo CD server now. So only default

165
00:11:37,868 --> 00:11:41,652
project. So that's what we are using now under

166
00:11:41,706 --> 00:11:45,232
source I'm adding the repository URL which I just copied

167
00:11:45,376 --> 00:11:49,156
and under path customize nginx openshift so

168
00:11:49,178 --> 00:11:56,040
this is the path where my manifest files are for

169
00:11:56,110 --> 00:11:59,320
sync options or sync policy,

170
00:11:59,470 --> 00:12:02,616
which basically says that if youll like to

171
00:12:02,638 --> 00:12:06,692
automation sync the application when there is a change in git repository,

172
00:12:06,756 --> 00:12:10,460
or youll like to manually sync either clicking the sync button or

173
00:12:10,530 --> 00:12:14,072
using the cli I won't go with the automated

174
00:12:14,136 --> 00:12:18,270
route now, so it's a manual sync option and I'll create these application.

175
00:12:18,740 --> 00:12:22,316
Once I hit create on the Arcocd console,

176
00:12:22,348 --> 00:12:24,960
I can see the app was created.

177
00:12:26,100 --> 00:12:30,112
If I go inside I can see that my

178
00:12:30,166 --> 00:12:34,100
three resources, the service deployment and these route were

179
00:12:34,170 --> 00:12:37,936
created. And if you look at the automation

180
00:12:38,048 --> 00:12:41,780
file you can see that there was a name prefix prod

181
00:12:42,520 --> 00:12:45,812
which you can see in all three resources

182
00:12:45,876 --> 00:12:49,752
as well. Now once I

183
00:12:49,886 --> 00:12:53,784
sync the application, you'll see that the

184
00:12:53,822 --> 00:12:57,832
applications will sync and it turns

185
00:12:57,896 --> 00:13:01,740
green. It's synced sync ok, and you see the single

186
00:13:01,810 --> 00:13:04,460
pod that is being created.

187
00:13:05,680 --> 00:13:08,976
Now if I'd like to change these number

188
00:13:08,998 --> 00:13:12,352
of replicas from one

189
00:13:12,486 --> 00:13:13,570
to these,

190
00:13:15,380 --> 00:13:17,920
let's see if I make a change.

191
00:13:17,990 --> 00:13:21,716
So going the git ops route, making change to

192
00:13:21,818 --> 00:13:25,316
the git repository and seeing the change reflect on the

193
00:13:25,338 --> 00:13:29,296
cluster, I'm not going to go through the pull request route,

194
00:13:29,408 --> 00:13:31,590
I'll push directly to the main.

195
00:13:33,580 --> 00:13:36,968
So once I do that, if I

196
00:13:36,974 --> 00:13:41,016
hit refresh, I'll hover over here, see the synced options

197
00:13:41,118 --> 00:13:43,480
should turn yellow out of sync.

198
00:13:45,820 --> 00:13:49,764
So it's out of sync now and I can click on app diff

199
00:13:49,902 --> 00:13:52,700
to see the difference what changed.

200
00:13:53,600 --> 00:13:58,060
So when I scroll down you can see on line 110.

201
00:13:58,210 --> 00:14:01,964
So these number of replicas in these cluster it's one, but in

202
00:14:02,002 --> 00:14:05,680
get repository expected or desired is three

203
00:14:05,750 --> 00:14:08,876
and hence the application is out of sync.

204
00:14:09,068 --> 00:14:12,500
All we need to do is hit sync,

205
00:14:13,080 --> 00:14:17,110
synchronize and the application

206
00:14:17,480 --> 00:14:19,860
will go in sync.

207
00:14:24,800 --> 00:14:28,748
All right, so we can delete the application either

208
00:14:28,834 --> 00:14:32,688
from here argo CD UI, or we can delete the application

209
00:14:32,854 --> 00:14:36,370
from Openshift console as well. Let's delete the application.

210
00:14:38,100 --> 00:14:41,856
I can create the same application, but let's use

211
00:14:42,038 --> 00:14:45,904
auto sync now. So I'll say this is arco

212
00:14:45,952 --> 00:14:49,190
CD sample app.

213
00:14:50,860 --> 00:14:56,200
Let's say this is autosync destination,

214
00:14:57,020 --> 00:15:01,320
the same cluster and namespace,

215
00:15:02,300 --> 00:15:06,584
same ergo CD project under source I'm

216
00:15:06,632 --> 00:15:11,096
using the same source that we used customize nginx Openshift

217
00:15:11,288 --> 00:15:15,676
and then under sync policy I'll

218
00:15:15,708 --> 00:15:19,360
choose automated and then hit the

219
00:15:19,430 --> 00:15:22,912
prone and cell field. What prone does is if you

220
00:15:23,046 --> 00:15:26,416
delete a resource from git, then argocd will

221
00:15:26,438 --> 00:15:30,036
delete that on the cluster as well. And if you

222
00:15:30,138 --> 00:15:33,316
check self heal, then even if you

223
00:15:33,418 --> 00:15:36,912
delete a resource directly on the cluster,

224
00:15:37,056 --> 00:15:42,660
Argocd will not let your app go out of sync and it will prevent

225
00:15:43,000 --> 00:15:46,710
youll app from even seeing that challenges.

226
00:15:47,560 --> 00:15:50,696
So let's keep those two options and create the

227
00:15:50,718 --> 00:15:54,140
app again. And if we go back to application,

228
00:15:54,290 --> 00:15:57,944
so the new application was created and this time, if you notice,

229
00:15:58,072 --> 00:16:01,288
we didn't have to click sync because it's

230
00:16:01,304 --> 00:16:04,380
auto sync, these app was automatically synced.

231
00:16:05,040 --> 00:16:09,068
So let's try to delete one of the resource

232
00:16:09,164 --> 00:16:12,592
to see the self field feature in action. So for

233
00:16:12,646 --> 00:16:15,984
that I'll log in to the

234
00:16:16,022 --> 00:16:22,260
cluster. So let me log in and

235
00:16:22,330 --> 00:16:26,176
I'll switch to openshift Githubs. I'm already openshift GitHub's

236
00:16:26,208 --> 00:16:29,988
project, so let me check

237
00:16:30,074 --> 00:16:37,096
the service. OC get service what

238
00:16:37,118 --> 00:16:38,810
are the service I'm getting?

239
00:16:40,940 --> 00:16:44,716
Okay, I see the prod nginx, so let me

240
00:16:44,738 --> 00:16:48,664
delete that service. OC delete service prod

241
00:16:48,712 --> 00:16:52,296
nginx and then observe

242
00:16:52,328 --> 00:16:55,580
what happens on Arco City UI.

243
00:16:56,660 --> 00:16:58,530
So if you observe here,

244
00:17:02,100 --> 00:17:06,076
you don't see the app going out of sync. And that's

245
00:17:06,108 --> 00:17:10,180
because even if we try to delete that resource,

246
00:17:10,600 --> 00:17:14,964
which you can see, the service was in fact deleted, but it

247
00:17:15,002 --> 00:17:18,692
got recreated. Even if you refresh, you see

248
00:17:18,826 --> 00:17:23,080
the service is right there. So Argo city prevented

249
00:17:23,740 --> 00:17:26,570
that operation from happening.

250
00:17:27,260 --> 00:17:30,804
So that's a pretty powerful

251
00:17:30,852 --> 00:17:34,830
feature. With auto sync and cell field,

252
00:17:36,320 --> 00:17:39,288
we created the app using OpenShift console.

253
00:17:39,384 --> 00:17:43,768
You can very much delete the app from Argo CD UI.

254
00:17:43,944 --> 00:17:48,176
It's using the same set of APIs so

255
00:17:48,198 --> 00:17:49,760
it will be the same operation.

256
00:17:51,220 --> 00:17:54,464
And that's the demo with

257
00:17:54,502 --> 00:17:58,144
arcocd deploying a single application from

258
00:17:58,182 --> 00:18:01,696
single git repository to these same cluster. In the

259
00:18:01,718 --> 00:18:05,556
next demo we'll see arco city application set

260
00:18:05,658 --> 00:18:09,380
where we deploy application to multiple clusters.

261
00:18:11,240 --> 00:18:14,756
That was a demo of ArgoCD. These we deployed

262
00:18:14,868 --> 00:18:18,840
one application from a single gate repository to a single cluster.

263
00:18:19,340 --> 00:18:22,884
But what if you youll like to deploy Argo CD application to

264
00:18:22,942 --> 00:18:26,908
multiple Kubernetes clusters all at once? Or what if

265
00:18:26,994 --> 00:18:30,584
you had multiple argo CD applications in the same repository?

266
00:18:30,712 --> 00:18:35,928
More like a Monorepo introducing

267
00:18:36,024 --> 00:18:40,076
applications set controller for Argo CD unlike

268
00:18:40,108 --> 00:18:43,868
with an argo CD application resource, which deploys resources

269
00:18:44,044 --> 00:18:48,640
from a single git repository to a single destination cluster or namespace,

270
00:18:49,160 --> 00:18:52,852
applicationset uses templated automation to create,

271
00:18:52,986 --> 00:18:56,512
modify and manage multiple ArgoCd applications

272
00:18:56,576 --> 00:18:59,712
simultaneously, which targets multiple destination

273
00:18:59,776 --> 00:19:03,516
clusters and namespaces. The applicationset

274
00:19:03,568 --> 00:19:06,952
controller is installed alongside ArgoCD within

275
00:19:07,006 --> 00:19:10,084
the same namespace, and it automatically generates

276
00:19:10,132 --> 00:19:13,464
ArgOCD applications based on the contents of

277
00:19:13,502 --> 00:19:17,036
a new application set custom resource on the right hand side of the

278
00:19:17,058 --> 00:19:20,830
YAML on line number two you can see the kind bing application set.

279
00:19:21,440 --> 00:19:25,208
Now generators are responsible for generating parameters

280
00:19:25,304 --> 00:19:28,416
which are then rendered into the templates field of the

281
00:19:28,438 --> 00:19:31,776
application set resource. We'll be seeing two of

282
00:19:31,798 --> 00:19:35,744
the generators in the demo today. In this example,

283
00:19:35,862 --> 00:19:40,160
the list generator passes the URL and the cluster fields

284
00:19:40,240 --> 00:19:44,164
into the application template as parameters, which are these rendered into

285
00:19:44,202 --> 00:19:47,956
the template as three corresponding ArgoCD applications, one for

286
00:19:47,978 --> 00:19:51,224
these each defined cluster targeting new

287
00:19:51,262 --> 00:19:54,660
clusters is simply a matter of adding new deployments

288
00:19:54,820 --> 00:19:58,436
to the application set resource, and the corresponding ArgoCD

289
00:19:58,468 --> 00:20:01,400
applications will be automatically created.

290
00:20:03,740 --> 00:20:06,896
The sole responsibility of the applicationset

291
00:20:06,948 --> 00:20:10,536
controller is to create, update and delete

292
00:20:10,648 --> 00:20:14,140
application resources within Dargo CD namespace.

293
00:20:14,880 --> 00:20:18,192
The controller's only job to ensure that the application

294
00:20:18,326 --> 00:20:22,460
resources remain consistent with a defined declarative

295
00:20:22,540 --> 00:20:25,170
application set resource, nothing more.

296
00:20:25,700 --> 00:20:29,108
Thus, the application set controller does not create,

297
00:20:29,194 --> 00:20:33,076
modify or delete kubernetes resources other than

298
00:20:33,098 --> 00:20:37,092
the application custom resource does not connect

299
00:20:37,146 --> 00:20:40,560
to cluster. You have to already have the clusters

300
00:20:40,640 --> 00:20:44,150
defined in Argo CD application

301
00:20:44,460 --> 00:20:48,152
controller does not interact with namespaces other

302
00:20:48,206 --> 00:20:51,240
than the one where ArgoCD is deployed.

303
00:20:51,980 --> 00:20:55,784
It is Argo CD itself that is responsible

304
00:20:55,832 --> 00:21:00,392
for the actual deployment of the generated child application resources

305
00:21:00,536 --> 00:21:04,380
such as deployments, services, and config maps.

306
00:21:05,040 --> 00:21:08,384
The application set controller can thus be thought of as

307
00:21:08,422 --> 00:21:12,592
an application factory, taking an application set

308
00:21:12,646 --> 00:21:15,984
resource as input and outputting one or

309
00:21:16,022 --> 00:21:19,760
more Argo CD application resources that correspond

310
00:21:19,840 --> 00:21:22,070
to the parameters of that set.

311
00:21:26,360 --> 00:21:29,844
Here are some of the generators for application set.

312
00:21:29,962 --> 00:21:33,876
You can find more details of each of the generator from application

313
00:21:33,978 --> 00:21:37,464
set. Read these docs page, which are in the resources section of

314
00:21:37,502 --> 00:21:39,880
the GitHub repo which I showed earlier.

315
00:21:44,000 --> 00:21:47,916
All right, again, enough theory and let's dive into

316
00:21:48,018 --> 00:21:49,790
application set demo.

317
00:21:54,660 --> 00:21:58,556
In the second part of the demo we'll use argo

318
00:21:58,588 --> 00:22:02,464
CD application set to deploy applications

319
00:22:02,512 --> 00:22:05,990
to multiple clusters. Let's look at the example.

320
00:22:07,240 --> 00:22:10,952
In these examples we have some

321
00:22:11,006 --> 00:22:14,392
generators, but specifically we'll use list

322
00:22:14,446 --> 00:22:18,548
generator and git generator directory

323
00:22:18,644 --> 00:22:22,492
example let's start with list

324
00:22:22,546 --> 00:22:26,764
generator. Now in the list example we

325
00:22:26,802 --> 00:22:30,124
have a custom resource with

326
00:22:30,162 --> 00:22:33,832
kind application set, and we're trying to deploy

327
00:22:33,976 --> 00:22:37,090
this particular application, argo city application,

328
00:22:37,700 --> 00:22:41,932
into two clusters, engineering dev and engineering prod.

329
00:22:41,996 --> 00:22:45,916
I'll be commenting out this engineering prod

330
00:22:46,028 --> 00:22:49,236
resource pretty soon now. One thing

331
00:22:49,258 --> 00:22:52,976
to notice is the template part is pretty similar to an arcocity

332
00:22:53,008 --> 00:22:57,280
application, and here some values are dynamically

333
00:22:57,360 --> 00:23:00,804
injected. For example cluster. These values

334
00:23:00,852 --> 00:23:05,416
would be coming from here and here, and URL value

335
00:23:05,598 --> 00:23:08,680
is coming from the URL files.

336
00:23:11,020 --> 00:23:15,132
One other thing to notice is if you don't have

337
00:23:15,266 --> 00:23:19,016
a namespace, you can use this flag

338
00:23:19,128 --> 00:23:22,584
create namespace equals true for the remote

339
00:23:22,632 --> 00:23:23,420
clusters.

340
00:23:27,220 --> 00:23:30,972
The first thing to do when you're deploying to multiple clusters

341
00:23:31,116 --> 00:23:34,684
is adding the remote cluster to Argocd

342
00:23:34,732 --> 00:23:38,800
server. First, I'll log into ArgoCD

343
00:23:38,880 --> 00:23:45,680
server. Let me go to server

344
00:23:45,760 --> 00:23:49,364
by clicking this link, which will open up

345
00:23:49,562 --> 00:23:53,176
the ArgoCD server UI, and we'll use

346
00:23:53,198 --> 00:23:56,840
the default admin account with the

347
00:23:56,910 --> 00:24:00,228
admin password to find the admin password. If you're

348
00:24:00,244 --> 00:24:04,392
using Openshift, go to workloads secrets

349
00:24:04,456 --> 00:24:07,996
from Openshift GitHub's namespace and you can get the

350
00:24:08,018 --> 00:24:11,436
Openshift GitHubs cluster secret and that

351
00:24:11,458 --> 00:24:15,516
will get us logged in to the cluster from here.

352
00:24:15,618 --> 00:24:18,924
If I see clusters, I can see there's only a cluster.

353
00:24:18,972 --> 00:24:22,284
That means where ArgoCD is installed, there's no remote

354
00:24:22,332 --> 00:24:25,564
cluster added. In order to add the remote

355
00:24:25,612 --> 00:24:28,800
cluster, we have to add it through Argo CD Cli.

356
00:24:28,880 --> 00:24:32,596
You cannot do that from argocd UI. So let

357
00:24:32,618 --> 00:24:36,084
me log in to argo CD server from the

358
00:24:36,122 --> 00:24:40,340
command line. I'll do argocd

359
00:24:41,020 --> 00:24:44,756
login, and argo CD

360
00:24:44,788 --> 00:24:49,476
is pretty picky about the URL, so I have to remove

361
00:24:49,668 --> 00:24:51,370
the HTTPs part,

362
00:24:57,120 --> 00:25:00,716
the username admin, and the

363
00:25:00,738 --> 00:25:03,500
default admin password.

364
00:25:05,380 --> 00:25:07,810
All right, so once you are logged in,

365
00:25:09,140 --> 00:25:11,840
we have to log into the remote cluster.

366
00:25:13,060 --> 00:25:15,200
So this is the remote cluster.

367
00:25:17,960 --> 00:25:21,540
Let me see if I'm already logged into the remote cluster.

368
00:25:22,600 --> 00:25:26,310
Yes, I'm already logged into the remote cluster as you can see.

369
00:25:29,260 --> 00:25:34,036
So we have to add this context argo

370
00:25:34,068 --> 00:25:38,170
CD cluster add

371
00:25:39,020 --> 00:25:42,104
and these context. So once we do that,

372
00:25:42,222 --> 00:25:46,236
a service account cluster role and cluster role binding will be

373
00:25:46,258 --> 00:25:50,380
created into the remote cluster. That will let Argo CD manage

374
00:25:50,450 --> 00:25:54,092
resources in the remote clusters. I already executed this step

375
00:25:54,146 --> 00:25:56,960
beforehand, that's why it says it already exists.

376
00:26:00,340 --> 00:26:02,850
Let's start with the list generator example.

377
00:26:03,220 --> 00:26:07,360
In this yaml we have an application set custom resource

378
00:26:07,880 --> 00:26:11,750
called Guestbook and we'll be deploying this application

379
00:26:12,520 --> 00:26:16,036
in two different clusters. One is the cluster where Argoc is

380
00:26:16,058 --> 00:26:20,324
installed and the other is a remote server. I'll uncomment

381
00:26:20,372 --> 00:26:23,812
these two lines shortly, so let's

382
00:26:23,876 --> 00:26:28,616
copy this yaml you

383
00:26:28,638 --> 00:26:31,764
can create this application set custom resources from

384
00:26:31,822 --> 00:26:35,480
these CLI, but if you're using Openshift Githubs operator,

385
00:26:35,560 --> 00:26:39,676
you can create this application set from the

386
00:26:39,698 --> 00:26:42,988
console. So we hit

387
00:26:43,074 --> 00:26:46,796
create application set button and we paste

388
00:26:46,828 --> 00:26:50,112
the custom resource here. Now one thing to notice is

389
00:26:50,166 --> 00:26:53,408
because you're creating this application set

390
00:26:53,494 --> 00:26:57,456
in a different namespace than Openshift Githubs guestbook

391
00:26:57,568 --> 00:27:01,700
ns you'll have to create this guestbook ns

392
00:27:02,040 --> 00:27:06,096
namespace beforehand with a specific flag

393
00:27:06,288 --> 00:27:09,420
called managed by Openshift Gitops.

394
00:27:09,600 --> 00:27:12,904
So here's that namespace youll

395
00:27:12,942 --> 00:27:15,320
have to create this beforehand.

396
00:27:16,460 --> 00:27:19,912
Notice this specific label field. So I have already

397
00:27:19,966 --> 00:27:23,900
done that. I'll uncomment these two lines

398
00:27:25,600 --> 00:27:28,190
and also update the URL field.

399
00:27:28,720 --> 00:27:32,460
So let me go back to my argocd

400
00:27:33,600 --> 00:27:37,280
web UI and from cluster I can see the

401
00:27:37,430 --> 00:27:41,052
remote cluster and I'll update

402
00:27:41,116 --> 00:27:47,796
this value which is engineering prod and

403
00:27:47,818 --> 00:27:51,124
let's create this application set. So once I

404
00:27:51,162 --> 00:27:54,564
create that under application I can

405
00:27:54,602 --> 00:27:57,984
see these two argosd applications are being created,

406
00:27:58,112 --> 00:28:01,592
one in the cluster where argosd is deployed and one

407
00:28:01,646 --> 00:28:05,156
is in the remote cluster. Both apps are synced

408
00:28:05,188 --> 00:28:09,400
and healthy. If I try to delete one of these applications,

409
00:28:15,200 --> 00:28:19,340
you'll see that the applications will be out of sync

410
00:28:19,760 --> 00:28:23,976
shortly. But applicationset controller will recreate

411
00:28:24,008 --> 00:28:27,436
this application because these applications were created

412
00:28:27,468 --> 00:28:30,656
using application set. In contrast, if you

413
00:28:30,678 --> 00:28:34,540
created these two applications separately using Argo CD,

414
00:28:34,700 --> 00:28:38,310
youll be able to individually delete this application.

415
00:28:39,800 --> 00:28:43,190
So that was the list generator example demo.

416
00:28:43,880 --> 00:28:47,508
I have to delete these two applications from here using application

417
00:28:47,594 --> 00:28:51,290
set and now I'll be able to delete this application.

418
00:28:52,060 --> 00:28:55,572
Now let's look at the git generator directory.

419
00:28:55,636 --> 00:28:59,400
Example for the git generator directory

420
00:28:59,900 --> 00:29:03,560
I have three different applications in the same repository,

421
00:29:03,640 --> 00:29:07,500
a helm, a jSonnet, and a customized application and

422
00:29:07,570 --> 00:29:11,452
similarly I have to create three namespaces beforehand because

423
00:29:11,506 --> 00:29:15,516
these three applications are being deployed in three different namespace.

424
00:29:15,708 --> 00:29:20,044
So this specific label allows Openshift,

425
00:29:20,092 --> 00:29:23,490
Githubs or argo CD to be able to

426
00:29:23,860 --> 00:29:27,144
create resources in those namespaces.

427
00:29:27,292 --> 00:29:29,940
I have already created these three namespaces.

428
00:29:30,280 --> 00:29:33,824
Now let's look at the example for git

429
00:29:33,872 --> 00:29:35,220
generator directory.

430
00:29:39,340 --> 00:29:43,016
I'll create application set from

431
00:29:43,038 --> 00:29:46,872
the Yaml view and here

432
00:29:47,006 --> 00:29:51,108
you can see that path base name which is all the folders

433
00:29:51,204 --> 00:29:55,528
in this specific path, which are the three applications

434
00:29:55,624 --> 00:29:59,048
guestbook helm, guestbook, JSON and guestbook customize.

435
00:29:59,224 --> 00:30:02,860
These will be the three arcocity applications that will be created.

436
00:30:04,260 --> 00:30:08,416
Let's create this application set and

437
00:30:08,518 --> 00:30:11,840
we should see three applications will be created.

438
00:30:12,180 --> 00:30:16,412
I did not have autosync enabled for these three applications,

439
00:30:16,476 --> 00:30:18,550
so I'll have to manually sync this application.

440
00:30:20,520 --> 00:30:23,220
Once I click on sync,

441
00:30:24,360 --> 00:30:29,228
these three applications should be synced similarly

442
00:30:29,344 --> 00:30:32,856
to the previous example. If I try to manually delete any of this

443
00:30:32,878 --> 00:30:36,744
application argosage application set will create this application

444
00:30:36,862 --> 00:30:40,344
again. So that

445
00:30:40,382 --> 00:30:44,508
was these demo for git generator directory and

446
00:30:44,594 --> 00:30:48,680
you can practice on your own on these generators

447
00:30:48,840 --> 00:30:52,584
or if you want to test out matrix

448
00:30:52,632 --> 00:30:57,664
generator. That example is in

449
00:30:57,702 --> 00:31:01,724
this repo ergo city application set demo and if you scroll

450
00:31:01,772 --> 00:31:04,944
down to the bottom of the page you can red hat.

451
00:31:05,062 --> 00:31:08,592
I have an example for matrix generator

452
00:31:08,656 --> 00:31:13,008
as well and this repository is based on vanilla

453
00:31:13,024 --> 00:31:16,484
kubernetes. To sum up in

454
00:31:16,522 --> 00:31:20,772
this talk, we learned about the concept of Gitops, more specifically

455
00:31:20,836 --> 00:31:25,060
Gitops. On Kubernetes. We talked about a declarative

456
00:31:25,140 --> 00:31:28,280
Gitops tool for Kubernetes Argo CD.

457
00:31:28,620 --> 00:31:32,072
We deployed an application from a single repository to a single

458
00:31:32,126 --> 00:31:35,464
cluster and then mentioned about the challenges of

459
00:31:35,502 --> 00:31:38,920
deploying multiple application to multiple clusters.

460
00:31:39,420 --> 00:31:42,836
We talked about Argo CD application set which is a subproject

461
00:31:42,868 --> 00:31:46,848
of Argo CD, and how we can use various generators within

462
00:31:46,934 --> 00:31:50,416
application set to deploy n number of application to

463
00:31:50,438 --> 00:31:53,968
n number of clusters. Thank you for your time today

464
00:31:54,054 --> 00:31:58,370
to listen to my talk and I welcome any questions you have.

