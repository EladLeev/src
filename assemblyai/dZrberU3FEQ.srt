1
00:01:54,250 --> 00:01:57,706
Hello, my name is Chris Ayers and today I'm going to talk about CI

2
00:01:57,738 --> 00:02:01,850
CD with GitHub Actions. I'm a senior customer engineer at Microsoft

3
00:02:02,010 --> 00:02:05,826
and I work on the fast track for Azure team. We're part of Azure

4
00:02:05,858 --> 00:02:09,170
engineering and we help customers build and deploy

5
00:02:09,250 --> 00:02:11,842
software to Azure securely,

6
00:02:11,906 --> 00:02:15,542
reliably. I have a big focus in DevOps and what I do,

7
00:02:15,676 --> 00:02:18,886
I'm on Mastodon, Twitter, LinkedIn. I have

8
00:02:18,908 --> 00:02:22,114
a blog and all of my code samples are out on GitHub,

9
00:02:22,162 --> 00:02:25,078
so feel free to go out to my repo and take a look and I'll

10
00:02:25,094 --> 00:02:28,598
be sharing that. So I first want to talk about YaML

11
00:02:28,694 --> 00:02:31,886
and then we'll dive into CI CD, go into some

12
00:02:31,908 --> 00:02:36,160
of the discussion around actions, and then I want to show some demos and have

13
00:02:36,770 --> 00:02:40,954
a fun time playing with those. So GitHub

14
00:02:41,002 --> 00:02:44,550
actions are part of workflows and those are all written

15
00:02:44,570 --> 00:02:48,082
in Yaml, yet another markup language. And you have

16
00:02:48,216 --> 00:02:52,462
lists that can start with a dash. We have key value pairs

17
00:02:52,526 --> 00:02:56,190
that are separated by a colon in a space. Then we have objects

18
00:02:56,270 --> 00:02:59,906
which are very similar to key value pairs,

19
00:02:59,938 --> 00:03:03,830
but all of the properties are below the object

20
00:03:03,900 --> 00:03:07,286
and indented. And I'll show some examples of that shortly. I just want

21
00:03:07,308 --> 00:03:11,046
to make sure that those three kind of basic things are covered.

22
00:03:11,158 --> 00:03:14,934
And something that's very important is if you get your indentation wrong or your spacing

23
00:03:14,982 --> 00:03:19,034
wrong, it can cause problems with your workflow. So having good

24
00:03:19,072 --> 00:03:22,522
tooling like Vs code with the YAMl plugins

25
00:03:22,586 --> 00:03:25,360
and extensions can be really helpful in this.

26
00:03:26,210 --> 00:03:29,200
And another thing is I like to talk about,

27
00:03:30,450 --> 00:03:33,642
we have CI CD. Well, there's two types of CD

28
00:03:33,786 --> 00:03:37,138
that come into play, and you can do all of

29
00:03:37,144 --> 00:03:40,466
these things with GitHub actions through the workflows. Like you

30
00:03:40,488 --> 00:03:44,014
can run your builds, you can run your unit tests, you can deploy

31
00:03:44,062 --> 00:03:47,394
things out, and there are ways to stop for

32
00:03:47,432 --> 00:03:50,626
approvals and see if you want to proceed.

33
00:03:50,738 --> 00:03:53,766
Maybe you deploy to dev and you want someone to sign off before it goes

34
00:03:53,788 --> 00:03:57,234
to QA, or you deploying to QA and you want some approvals

35
00:03:57,362 --> 00:04:01,180
or time windows before things go to prod. You can do some of that.

36
00:04:01,550 --> 00:04:05,178
But usually I think some of the differences between continuous delivery and

37
00:04:05,184 --> 00:04:08,342
continuous deployment are youll do have push button deployment,

38
00:04:08,406 --> 00:04:12,586
but things slow down and you have a human in the loop that can approve

39
00:04:12,618 --> 00:04:15,710
or not approve. Now, actions are event

40
00:04:15,780 --> 00:04:19,070
driven, so there's a large number

41
00:04:19,140 --> 00:04:23,134
of events that can trigger if a workflow

42
00:04:23,182 --> 00:04:27,010
runs. All GitHub actions workflows live

43
00:04:27,080 --> 00:04:31,038
in the GitHub workflows folder and they're all defined in Yaml.

44
00:04:31,134 --> 00:04:34,274
Now what's different about GitHub actions from maybe something

45
00:04:34,312 --> 00:04:37,686
like an Azure pipelines is in Azure pipelines you

46
00:04:37,708 --> 00:04:41,618
have to specifically say I want a new pipeline using this file.

47
00:04:41,794 --> 00:04:45,718
But with GitHub, if youll drop a Yaml inside

48
00:04:45,804 --> 00:04:49,522
that GitHub workflows file, and it's a valid workflows YAml,

49
00:04:49,666 --> 00:04:52,934
it will start running whenever it's supposed to be triggered.

50
00:04:52,982 --> 00:04:55,786
Now if that's a manual trigger, if it's on a push, if it's on a

51
00:04:55,808 --> 00:04:59,834
schedule, as soon as you put the file in the repo and

52
00:04:59,872 --> 00:05:03,806
it's a valid yaml that matches the schema, it'll be

53
00:05:03,988 --> 00:05:07,200
run whenever it's supposed to be triggered. Now,

54
00:05:08,530 --> 00:05:11,806
events trigger workflows, and I'm going to show you a big list of

55
00:05:11,828 --> 00:05:15,506
events. I'll probably bring it up in a moment. But a

56
00:05:15,528 --> 00:05:19,300
workflow contains one or more jobs. So we have a job.

57
00:05:19,910 --> 00:05:23,314
When the workflow gets triggered, a job is

58
00:05:23,352 --> 00:05:27,126
going to be kicked off and that job can

59
00:05:27,148 --> 00:05:30,550
have one or more steps. Those can be like command line

60
00:05:30,620 --> 00:05:34,258
steps, like a bash script, they can be actions,

61
00:05:34,434 --> 00:05:37,282
they can be shell commands,

62
00:05:37,426 --> 00:05:41,450
it can be a number of different things. Now, each of those jobs

63
00:05:42,510 --> 00:05:46,390
runs on a runner, and like I said, you youll have one or more jobs,

64
00:05:46,550 --> 00:05:49,994
and those jobs by default run in

65
00:05:50,032 --> 00:05:52,860
parallel. There's no dependencies between them,

66
00:05:53,330 --> 00:05:56,846
they're just jobs. If you have like five or ten jobs, they could all try

67
00:05:56,868 --> 00:06:00,702
to kick off right at the same time, unless you have

68
00:06:00,756 --> 00:06:04,750
some explicit dependencies between them or you have some needs

69
00:06:04,900 --> 00:06:08,702
between them. Now, each job is using to run on its own runner

70
00:06:08,766 --> 00:06:12,258
and what a runner is, and I'll talk about those in

71
00:06:12,264 --> 00:06:16,206
a little bit more depth. It's like a vm or a docker

72
00:06:16,238 --> 00:06:19,730
container, something that is spun up for the purposes

73
00:06:19,810 --> 00:06:23,206
of running your job. Now, if it's using a

74
00:06:23,228 --> 00:06:26,662
GitHub hosted runner, which I'll show you some documentation about,

75
00:06:26,716 --> 00:06:30,794
it comes with a ton of tools. If it's a self hosted runner that you

76
00:06:30,912 --> 00:06:34,522
built and are running yourself, it is going to have whatever

77
00:06:34,576 --> 00:06:38,666
tools you put on it. So let's get into some demos and

78
00:06:38,848 --> 00:06:42,814
just see what we're talking about. This is

79
00:06:42,852 --> 00:06:46,686
where all of my demos live out on GitHub. But I

80
00:06:46,708 --> 00:06:49,786
wanted to talk a little bit first about those events, those actions.

81
00:06:49,898 --> 00:06:53,810
So in GitHub we talked about events

82
00:06:54,390 --> 00:06:58,430
that trigger workflows. So like I said, there's a workflow,

83
00:06:58,590 --> 00:07:02,434
there's a ton of different events that can trigger stuff like

84
00:07:02,632 --> 00:07:06,178
someone tried to push something against main or

85
00:07:06,344 --> 00:07:09,560
they created, we can go right here,

86
00:07:10,170 --> 00:07:13,574
they created a branch or a tag. You can

87
00:07:13,612 --> 00:07:17,666
see what happens if someone forks your code. That can be a trigger.

88
00:07:17,778 --> 00:07:21,514
So triggers are not just limited or the events are not just

89
00:07:21,552 --> 00:07:25,050
limited to things like pushing or pulling code.

90
00:07:25,200 --> 00:07:28,678
It can go far, far beyond that. Like someone created

91
00:07:28,694 --> 00:07:31,834
a project or moved a card or made

92
00:07:32,032 --> 00:07:35,278
a comment, or you want to do it on a schedule. So you want like

93
00:07:35,284 --> 00:07:38,794
a nightly build. This one is one of my favorites.

94
00:07:38,842 --> 00:07:42,834
It's super important. Workflow dispatch out of the box. There's no

95
00:07:42,872 --> 00:07:46,002
manual way to trigger a workflow. You have

96
00:07:46,056 --> 00:07:50,770
to add workflow dispatch if you want to manually trigger

97
00:07:51,430 --> 00:07:54,706
a workflow. So let's take

98
00:07:54,728 --> 00:07:58,370
a look at one. So I've got up here in my GitHub actions demos,

99
00:07:58,450 --> 00:08:01,506
you can come here to actions and you can see I have a whole bunch

100
00:08:01,538 --> 00:08:05,414
of different workflows listed here. So if we just start

101
00:08:05,452 --> 00:08:08,838
on this first one, I can

102
00:08:09,004 --> 00:08:12,902
take a look at it and I can open up what a yaml file

103
00:08:12,966 --> 00:08:16,700
looks like. In this particular case, this workflow. So we've got a name

104
00:08:17,390 --> 00:08:20,714
and you can see I've got on. So these are

105
00:08:20,752 --> 00:08:24,414
those events that are going to trigger the workflow to

106
00:08:24,452 --> 00:08:28,042
execute. So on a push, on a pull request,

107
00:08:28,106 --> 00:08:31,214
and on workflow dispatch, so I can manually trigger it.

108
00:08:31,332 --> 00:08:34,606
And then I'm going to list out my jobs. So I'm going to have one

109
00:08:34,628 --> 00:08:37,906
or more jobs. And in this case I'm going to name my

110
00:08:37,928 --> 00:08:41,614
job build. So I have a build job that's indented under jobs

111
00:08:41,742 --> 00:08:45,918
and I have to tell you what it runs on. It needs an image

112
00:08:46,094 --> 00:08:50,194
for this job to run on. So this one is going to run on Ubuntu

113
00:08:50,242 --> 00:08:53,702
latest, and I've given it some steps, like it's going to check out the code

114
00:08:53,756 --> 00:08:57,350
base and it's going to run an echo command.

115
00:08:57,930 --> 00:09:01,322
Well, maybe I want to build net

116
00:09:01,376 --> 00:09:04,300
or maybe I want to build Java or go or something.

117
00:09:04,830 --> 00:09:07,802
Do I need to go and set up all those tools and configure them?

118
00:09:07,936 --> 00:09:11,674
Well, I don't, because like I said, they already exist

119
00:09:11,722 --> 00:09:16,000
on a lot of the runners. So if I just do another quick search for

120
00:09:16,930 --> 00:09:21,002
hosted runners, again, great documentation

121
00:09:21,146 --> 00:09:24,786
comes right to it. And I can see kind of an

122
00:09:24,808 --> 00:09:28,402
overview of what I'm getting. I've got my workflow, it's running

123
00:09:28,456 --> 00:09:31,858
my jobs. This is giving you

124
00:09:31,864 --> 00:09:35,234
an example of different ways to specify if you want to run

125
00:09:35,272 --> 00:09:38,278
on Windows or Linux, but out

126
00:09:38,284 --> 00:09:42,006
of the box you pretty much get like a two core cpu, seven gigs of

127
00:09:42,028 --> 00:09:45,398
ram, some space, and there's lots of

128
00:09:45,404 --> 00:09:49,266
different tags for different versions, even Mac if you need to do like a mobile

129
00:09:49,298 --> 00:09:53,194
app or a Mac application. But trying to understand what's installed on

130
00:09:53,232 --> 00:09:56,826
it, I can look at my runner history and I can

131
00:09:56,848 --> 00:10:00,570
see what's on that machine, or I can also come here and see what's available.

132
00:10:00,720 --> 00:10:04,046
So on my run, if I look at

133
00:10:04,068 --> 00:10:07,694
my build, I can see the log for it and

134
00:10:07,732 --> 00:10:11,722
I can expand out setting up the job. I can see the operating

135
00:10:11,786 --> 00:10:15,306
system, it was an Ubuntu 20 machine, and I have a runner

136
00:10:15,338 --> 00:10:19,106
image and there is a link right here for my build on

137
00:10:19,128 --> 00:10:22,786
the included software. Now this has

138
00:10:22,888 --> 00:10:27,394
so much stuff, it's kind of funny how many languages

139
00:10:27,522 --> 00:10:30,646
and tools and packages are available out of

140
00:10:30,668 --> 00:10:35,378
the box like Docker and Kubectl

141
00:10:35,554 --> 00:10:39,414
NPM. We have CLI tools for pretty much every cloud out

142
00:10:39,452 --> 00:10:42,490
there. So right out of the box, using one of these hosted agents,

143
00:10:42,560 --> 00:10:46,810
I can run and do lots of things very quickly across

144
00:10:46,880 --> 00:10:50,582
a wide range of languages, and I don't have to do a lot of configuration

145
00:10:50,646 --> 00:10:54,046
to do it and I can get status. So let's go back

146
00:10:54,068 --> 00:10:57,050
to our actions. We had a basic trigger.

147
00:10:57,210 --> 00:11:00,286
I showed that we might need the workflow dispatch event,

148
00:11:00,388 --> 00:11:04,578
so if I want to run this, I can say run. And that

149
00:11:04,664 --> 00:11:08,766
enables the button here so I can manually run my workflow whenever

150
00:11:08,798 --> 00:11:12,722
I want to. So I'm triggering this run and

151
00:11:12,776 --> 00:11:16,570
what we'll see momentarily. There we go. It's manually run. It's queued

152
00:11:16,590 --> 00:11:19,846
up right now. I can go in and see kind

153
00:11:19,868 --> 00:11:23,090
of in real time as it executes,

154
00:11:23,170 --> 00:11:27,042
so I can get real time logs, I can get the output

155
00:11:27,106 --> 00:11:30,410
of individual commands.

156
00:11:30,750 --> 00:11:34,970
Cool. Well what about doing something a little bit more complex?

157
00:11:35,390 --> 00:11:38,540
Well I do have a more complex job,

158
00:11:39,070 --> 00:11:41,970
but let's say I don't want to build it on every push.

159
00:11:42,150 --> 00:11:45,694
I can have filters, I can do limitations, so I

160
00:11:45,732 --> 00:11:48,782
only want it to build on the main

161
00:11:48,836 --> 00:11:52,414
branch when I push on the main branch, or if I use

162
00:11:52,452 --> 00:11:56,146
a pattern of release something so the

163
00:11:56,248 --> 00:11:59,598
starstar will do things under that path.

164
00:11:59,694 --> 00:12:02,978
Maybe I want to only build it on v two tags or using

165
00:12:03,064 --> 00:12:06,782
star. I only want to build it when I touch Javascript

166
00:12:06,846 --> 00:12:10,902
files. So I have a lot of different options for controlling when things

167
00:12:10,956 --> 00:12:14,342
run. I youll do a schedule like a cron job,

168
00:12:14,476 --> 00:12:18,154
so I can specify cron syntax, so I have a lot of different

169
00:12:18,192 --> 00:12:21,386
capabilities. And just like with all the others, I can come

170
00:12:21,408 --> 00:12:25,270
out here and look at GitHub action workflow

171
00:12:25,350 --> 00:12:30,554
syntax and this is going to give me a detailed breakdown

172
00:12:30,602 --> 00:12:33,466
of all of the structures of the workflow.

173
00:12:33,498 --> 00:12:37,146
Yaml so I can see on pull request on branches,

174
00:12:37,258 --> 00:12:40,462
including branches, excluding branches using

175
00:12:40,516 --> 00:12:43,762
the not symbol. It's all very well documented out on

176
00:12:43,816 --> 00:12:47,346
the GitHub documentation page, so we have a lot of different options to

177
00:12:47,368 --> 00:12:48,260
build and record.

178
00:12:51,030 --> 00:12:54,690
Let's see what else we got. So what about multiple jobs?

179
00:12:55,350 --> 00:12:58,078
And I will go ahead and kick this one off and we'll take a look

180
00:12:58,104 --> 00:13:02,118
at it when it triggers. So I mentioned a workflow is made up

181
00:13:02,124 --> 00:13:06,070
of one or more jobs. I also said they all kind of run in parallel.

182
00:13:06,490 --> 00:13:09,754
So here I've got not one but

183
00:13:09,792 --> 00:13:13,466
two, three jobs, and job three finished first, so we

184
00:13:13,488 --> 00:13:17,020
had no real idea what was going to go when

185
00:13:18,510 --> 00:13:22,378
they all ran in parallel. And what that looks like

186
00:13:22,464 --> 00:13:25,902
if we're looking at a job, is I've got job

187
00:13:25,956 --> 00:13:29,022
one and it runs on Ubuntu and I've got job two

188
00:13:29,076 --> 00:13:33,066
and it runs on Ubuntu. So I have this list of jobs

189
00:13:33,178 --> 00:13:36,642
that I've built out, but what if I want

190
00:13:36,696 --> 00:13:40,850
some sort of dependency between them? What if I don't want job

191
00:13:40,920 --> 00:13:44,562
three to finish before job one?

192
00:13:44,616 --> 00:13:47,906
Maybe I want job one to always run first and

193
00:13:47,928 --> 00:13:51,606
then I don't care if job two or three finish first. That could

194
00:13:51,628 --> 00:13:55,026
be I want to do a build and then I want to run some acceptance

195
00:13:55,058 --> 00:13:56,790
tests or some unit tests.

196
00:13:58,270 --> 00:14:01,980
We can structure our jobs in any way we want.

197
00:14:02,590 --> 00:14:06,234
GitHub actions and the workflows are an amazing toolkit that

198
00:14:06,272 --> 00:14:10,334
lets us kind of automate and trigger our

199
00:14:10,372 --> 00:14:14,314
workflows as need be to match our working style

200
00:14:14,442 --> 00:14:17,806
or our requirements. And the way we can set

201
00:14:17,828 --> 00:14:21,214
up these dependencies in our workflows is using

202
00:14:21,252 --> 00:14:25,058
the needs keyword. So job two

203
00:14:25,144 --> 00:14:29,182
needs job one. So we can establish that dependency

204
00:14:29,246 --> 00:14:32,786
very easily. Let's keep going, let's see what

205
00:14:32,808 --> 00:14:36,226
else we got. So steps, there are lots of different steps.

206
00:14:36,258 --> 00:14:39,782
And I'll go ahead and run this guy and we'll go into what steps look

207
00:14:39,836 --> 00:14:43,302
like. So with

208
00:14:43,356 --> 00:14:47,206
steps they can be, like I

209
00:14:47,228 --> 00:14:51,038
said, commands tasks. Once this job loads

210
00:14:51,074 --> 00:14:54,538
we should see all the different steps. So we got all sorts of stuff.

211
00:14:54,704 --> 00:14:58,666
So I'm running, if we look at the setup job, I'm running on an

212
00:14:58,688 --> 00:15:02,560
Ubuntu machine, so it's Linux and

213
00:15:02,930 --> 00:15:07,310
I can just say echo my path. So I'm doing a bash variable

214
00:15:08,050 --> 00:15:11,070
environment, variable reference and it's spitting out my path.

215
00:15:11,810 --> 00:15:15,790
And try doing CMD. But CMD won't work because CMD

216
00:15:15,870 --> 00:15:19,266
is a Windows specific thing, but out of

217
00:15:19,288 --> 00:15:22,542
the box. The Linux machines come with Powershell

218
00:15:22,606 --> 00:15:25,974
because Powershell is cross platform, but not

219
00:15:26,172 --> 00:15:29,590
Powershell like the Windows 5.1 version.

220
00:15:29,930 --> 00:15:33,826
I can also specify random shells,

221
00:15:33,858 --> 00:15:37,590
like I want to use Python, or I want to do something with Perl.

222
00:15:38,330 --> 00:15:41,894
Or I can specify a checkout action.

223
00:15:41,942 --> 00:15:45,066
Like I want to use the checkout action. I want it to be locked to

224
00:15:45,088 --> 00:15:48,982
a specific hash, a specific shaw like commit.

225
00:15:49,126 --> 00:15:52,598
For this checkout action. I can also do

226
00:15:52,624 --> 00:15:56,334
different versions, like I want to do version two or three based on

227
00:15:56,372 --> 00:16:00,320
tag or based on a branch. I can check out things.

228
00:16:00,690 --> 00:16:04,110
So how do I know about this

229
00:16:04,260 --> 00:16:06,830
hash, this version? Well,

230
00:16:06,900 --> 00:16:10,338
actions besides my simple commands that I want to

231
00:16:10,344 --> 00:16:13,810
run. If we scroll all the way to the top of the GitHub site,

232
00:16:13,880 --> 00:16:17,542
we'll see the marketplace. So the GitHub marketplace is

233
00:16:17,596 --> 00:16:21,314
where we have all of those great actions

234
00:16:21,362 --> 00:16:24,726
that are built by the community, by people,

235
00:16:24,828 --> 00:16:27,560
by companies to help do things.

236
00:16:29,050 --> 00:16:32,186
In this case we had the checkout command. So if

237
00:16:32,208 --> 00:16:35,514
I look it up, we've got a blue check mark to show

238
00:16:35,552 --> 00:16:38,998
it's creator verified by GitHub. We've got stars.

239
00:16:39,094 --> 00:16:42,846
We can see version information about the individual

240
00:16:42,948 --> 00:16:46,126
actions. And the latest version we have tags on

241
00:16:46,148 --> 00:16:49,914
if it's built and test. Any action in the marketplace

242
00:16:50,042 --> 00:16:53,970
needs to be in a public open source repo or a public repo.

243
00:16:54,550 --> 00:16:58,194
Anyone pretty much can go and see issues or do

244
00:16:58,232 --> 00:17:02,254
pull requests. For now, almost every well written

245
00:17:02,302 --> 00:17:06,226
action you'll find has really good documentation around the

246
00:17:06,248 --> 00:17:10,200
usage of it. The options that you can pass into it,

247
00:17:11,210 --> 00:17:14,354
scenarios like they might give you scenarios on how to leverage

248
00:17:14,402 --> 00:17:18,170
it, to do certain things that you're trying to do. So looking

249
00:17:18,240 --> 00:17:22,186
for an action in the marketplace is a

250
00:17:22,208 --> 00:17:26,234
great thing to look for. And we can go right to the code

251
00:17:26,272 --> 00:17:30,266
base so I can click on the action and

252
00:17:30,288 --> 00:17:33,494
it's going to take me to the repo that has that action,

253
00:17:33,542 --> 00:17:36,590
so I can look at how somebody implemented something

254
00:17:36,660 --> 00:17:40,862
or how something was done. I can also go right to the open issues.

255
00:17:40,916 --> 00:17:44,194
So if I'm having a problem, I can go look at the

256
00:17:44,232 --> 00:17:48,146
issues that are affecting that particular version or

257
00:17:48,248 --> 00:17:51,266
that action. And so we have

258
00:17:51,288 --> 00:17:54,580
a lot of ways to look for and find

259
00:17:55,210 --> 00:17:59,240
capability that people have already implemented and consumed that

260
00:18:00,090 --> 00:18:04,040
now, something that you might have noticed and

261
00:18:04,570 --> 00:18:10,874
I kind of skipped over, I was passing information into the

262
00:18:10,912 --> 00:18:14,502
action. Well, we also can do environment variables,

263
00:18:14,566 --> 00:18:18,506
and these all kind of flow together into what are called contexts, and we'll talk

264
00:18:18,528 --> 00:18:22,160
about those momentarily. But let's say I want to

265
00:18:22,530 --> 00:18:25,726
pass information, I want to have some variables I

266
00:18:25,748 --> 00:18:32,442
want to pass something down into an action into my job should

267
00:18:32,516 --> 00:18:38,114
trigger it

268
00:18:38,152 --> 00:18:41,826
already ran. I can run

269
00:18:41,848 --> 00:18:45,458
a script and say I have environment variables

270
00:18:45,474 --> 00:18:49,154
that I'm going to call, and you can see I passed in my environment

271
00:18:49,282 --> 00:18:51,880
greeting hello name world.

272
00:18:52,250 --> 00:18:55,910
So I can pretty quickly, pretty easily pass

273
00:18:55,980 --> 00:19:00,294
information from my top section

274
00:19:00,342 --> 00:19:04,026
in my workflow. I can pass the name of a service

275
00:19:04,208 --> 00:19:07,734
or do some sort of dynamicism like string manipulation,

276
00:19:07,782 --> 00:19:11,638
and pass it down into lower level jobs and have

277
00:19:11,664 --> 00:19:14,766
those picked up. Now, something else that I think

278
00:19:14,788 --> 00:19:17,918
is really important to cover when we're dealing with variables is there is

279
00:19:17,924 --> 00:19:21,840
a hierarchy that exists. So when we have

280
00:19:22,710 --> 00:19:26,242
workflow level variables, or we have things

281
00:19:26,296 --> 00:19:29,934
like job level variables, or even step level variables,

282
00:19:30,062 --> 00:19:34,514
they can override each other. Like if you invoke the same

283
00:19:34,712 --> 00:19:37,300
environment key like environment name,

284
00:19:39,530 --> 00:19:43,526
this is saying hello from location step,

285
00:19:43,708 --> 00:19:47,126
and I've passed in information. But if I go and I look at

286
00:19:47,148 --> 00:19:50,474
my workflow, you'll see what's happening. I've defined at

287
00:19:50,512 --> 00:19:53,450
my workflow level a location workflow.

288
00:19:53,790 --> 00:19:57,002
But as I start executing on the specific job,

289
00:19:57,136 --> 00:20:00,366
the job overrides the workflow value. As I get

290
00:20:00,388 --> 00:20:04,186
down to an individual step, the step overrides

291
00:20:04,378 --> 00:20:07,854
the job level value. And so when I'm running

292
00:20:07,892 --> 00:20:11,758
my command hello world from step, I'm getting information from

293
00:20:11,924 --> 00:20:15,442
my workflow, from my local step

294
00:20:15,496 --> 00:20:18,866
in my environment. So understanding how

295
00:20:18,888 --> 00:20:22,530
youll can leverage values defined

296
00:20:23,430 --> 00:20:26,886
higher up in the hierarchy and how you can override them lower down in

297
00:20:26,908 --> 00:20:28,440
the hierarchy is important.

298
00:20:30,170 --> 00:20:34,440
Now we're dealing with variables. We're starting to pass stuff.

299
00:20:34,810 --> 00:20:38,940
Let's get into conditionals. So conditionals are a fun thing where we can

300
00:20:40,590 --> 00:20:44,182
add a job, we can conditionally execute jobs

301
00:20:44,246 --> 00:20:47,994
or steps based on values, and those values can

302
00:20:48,032 --> 00:20:51,306
be everything from the branch we're

303
00:20:51,338 --> 00:20:55,134
on or the environment we're in. So here youll notice run

304
00:20:55,172 --> 00:20:58,720
goodbye did not execute, but run hello did,

305
00:20:59,090 --> 00:21:02,830
and we can see why that is when we look inside

306
00:21:02,900 --> 00:21:05,778
the file. So we can do stuff like if,

307
00:21:05,944 --> 00:21:09,282
so if this expression is true,

308
00:21:09,416 --> 00:21:12,526
we can run this step, we can do things around jobs

309
00:21:12,558 --> 00:21:15,686
like maybe we don't want to do our deployment job if we're not on the

310
00:21:15,708 --> 00:21:19,282
branch main, if we're not in an environment like production.

311
00:21:19,426 --> 00:21:23,638
So we can have some conditional control

312
00:21:23,804 --> 00:21:26,710
of our different workflows, of our different steps.

313
00:21:27,290 --> 00:21:30,902
And conditionals are really a form of expression.

314
00:21:31,046 --> 00:21:34,666
So let me just show you what some expressions look like where we can

315
00:21:34,688 --> 00:21:38,662
do string formatting and we can do string interpolation.

316
00:21:38,726 --> 00:21:42,042
We can put values together and we can build up things.

317
00:21:42,096 --> 00:21:45,630
So if we want patterns and naming, we can leverage that. We can check

318
00:21:45,700 --> 00:21:49,018
if stuff ends with or contains strings.

319
00:21:49,194 --> 00:21:52,622
We can do array manipulation, so we can give it

320
00:21:52,756 --> 00:21:56,746
like a JSON String and make an object out

321
00:21:56,788 --> 00:22:00,354
of a JSON string. And then if it's an array, we can check to see

322
00:22:00,392 --> 00:22:03,906
if something contains an entry in the array, not just a

323
00:22:03,928 --> 00:22:07,654
string, but the whole array. And then we can do stuff like joining and

324
00:22:07,692 --> 00:22:11,640
concatenating, and we can print those out. So those all

325
00:22:13,450 --> 00:22:17,094
work very much like you would expect. We get some

326
00:22:17,132 --> 00:22:21,402
basic dynamicism and we can play

327
00:22:21,456 --> 00:22:25,740
around with string manipulation in some of our workflows, and some of

328
00:22:28,350 --> 00:22:33,562
our actions and expressions

329
00:22:33,626 --> 00:22:36,846
are essentially a type of context. So I've got a

330
00:22:36,868 --> 00:22:40,078
couple of contexts here, and I will show

331
00:22:40,164 --> 00:22:44,066
like the GitHub Context gives you a lot of information about the

332
00:22:44,088 --> 00:22:47,474
repo and the

333
00:22:47,512 --> 00:22:51,554
check ins and the commits and the users. So there's a ton of information there

334
00:22:51,592 --> 00:22:54,834
about the repository and the, you have stuff

335
00:22:54,872 --> 00:22:58,258
about individual jobs, like if they've run steps.

336
00:22:58,434 --> 00:23:03,554
So if we look at our GitHub workflow

337
00:23:03,602 --> 00:23:06,934
context, contexts are something that comes up quite

338
00:23:06,972 --> 00:23:11,690
a bit when we're building

339
00:23:11,760 --> 00:23:16,906
out things. We've got our environment. So if we look at our

340
00:23:16,928 --> 00:23:20,518
environment, we can see all of the different values that have been defined.

341
00:23:20,694 --> 00:23:24,206
If we're doing a job, we can find out information about the container and

342
00:23:24,228 --> 00:23:28,154
the services, if we list it out, so we can define

343
00:23:28,202 --> 00:23:32,706
different things. So contexts are going to be an

344
00:23:32,728 --> 00:23:37,170
object that we reference as we're doing some more complex interactions with

345
00:23:37,320 --> 00:23:38,930
the different workflows.

346
00:23:41,430 --> 00:23:45,326
And then secrets are a type of context. So secrets

347
00:23:45,358 --> 00:23:48,726
exist in GitHub under settings. So if we come over here to

348
00:23:48,748 --> 00:23:52,614
settings in my repository, you'll see down here under security, we've got

349
00:23:52,652 --> 00:23:55,830
secrets and we have actions.

350
00:23:56,250 --> 00:23:59,666
And you'll notice I have environment secrets which are listed

351
00:23:59,698 --> 00:24:03,606
here in this top section. And then down below I have repository secrets,

352
00:24:03,638 --> 00:24:07,034
which are for the repository. And just like

353
00:24:07,072 --> 00:24:10,246
we had a variable hierarchy, there is a secret hierarchy.

354
00:24:10,358 --> 00:24:14,346
Like you can have level secrets and repository level secrets

355
00:24:14,458 --> 00:24:17,966
and environment level secrets. So you can have different secrets that

356
00:24:17,988 --> 00:24:21,786
can override each other. I can edit

357
00:24:21,818 --> 00:24:25,682
this, which will change the value, or I can remove it. And the way you

358
00:24:25,736 --> 00:24:29,326
access, and you can see I've got some environment secrets

359
00:24:29,358 --> 00:24:33,474
here, I'll show those in a moment. But the way you

360
00:24:33,512 --> 00:24:36,660
access your secrets is

361
00:24:36,970 --> 00:24:40,326
relatively simple when you're looking at the workflow. So if we're in

362
00:24:40,348 --> 00:24:42,470
our workflow and we want to get to a secret,

363
00:24:43,850 --> 00:24:47,458
we do the dollar kind of handlebars secrets

364
00:24:47,634 --> 00:24:51,334
name. And if this did not

365
00:24:51,372 --> 00:24:54,854
exist as a secret, it will just come back as an empty string. It doesn't

366
00:24:54,902 --> 00:24:58,666
want to give you an error that that secret doesn't exist. That could kind

367
00:24:58,688 --> 00:25:01,966
of give people a way to hunt around to see if you can find the

368
00:25:01,988 --> 00:25:03,600
secret. Now,

369
00:25:05,090 --> 00:25:08,862
notice I'm passing it two different ways. I a lot of times will pass

370
00:25:08,916 --> 00:25:12,800
it by environment variable over passing it

371
00:25:13,670 --> 00:25:17,362
in the command line, just in case something is

372
00:25:17,496 --> 00:25:21,266
like listing processes on the system. Though I

373
00:25:21,288 --> 00:25:24,686
know there's arguments about passing secrets via environment variables.

374
00:25:24,798 --> 00:25:28,166
It's a little bit of a debate. Whichever way

375
00:25:28,188 --> 00:25:31,714
you want to do it, GitHub actually tries

376
00:25:31,762 --> 00:25:35,590
to protect you a little bit and tries to not

377
00:25:35,660 --> 00:25:38,826
print out things. It knows our secrets. So if

378
00:25:38,848 --> 00:25:42,810
I go into the logging and I look at these two

379
00:25:42,880 --> 00:25:46,774
things where I've passed it by context, it knows that was a secret

380
00:25:46,822 --> 00:25:48,540
and doesn't print it out.

381
00:25:51,810 --> 00:25:54,842
Same with environment, but with the environment,

382
00:25:54,986 --> 00:25:58,478
it knows I'm pulling the environment name, it just

383
00:25:58,564 --> 00:26:02,574
doesn't print out the value. So this

384
00:26:02,612 --> 00:26:06,014
can give you a little bit better information. If you're troubleshooting

385
00:26:06,062 --> 00:26:09,726
things, this might give you a little bit less, but there's

386
00:26:09,758 --> 00:26:12,946
multiple ways to do that. Now, I mentioned

387
00:26:13,048 --> 00:26:16,886
that the secrets come from

388
00:26:16,908 --> 00:26:20,406
the environment or from the individual

389
00:26:20,508 --> 00:26:24,134
actions. So environments are listed here on the left. So we have

390
00:26:24,172 --> 00:26:27,658
under code and automation, environments and environments give you a

391
00:26:27,664 --> 00:26:31,622
couple of different things. You can just hit new environment

392
00:26:31,686 --> 00:26:37,562
and make a new environment. So I can do something

393
00:26:37,616 --> 00:26:41,646
like this, and I've created an environment. Now I can ask

394
00:26:41,668 --> 00:26:45,726
for approvals. I mentioned that earlier with the CD part, and I

395
00:26:45,748 --> 00:26:49,470
can say I want someone

396
00:26:49,540 --> 00:26:52,990
to be a reviewer before you deploy into that environment.

397
00:26:56,550 --> 00:26:59,630
I don't have to have secrets or resources, it's just a tag.

398
00:26:59,710 --> 00:27:03,538
But if my job says it's using

399
00:27:03,704 --> 00:27:07,750
this environment comp 42 environment, it'll ask for approvals.

400
00:27:08,410 --> 00:27:12,102
I can also have protection on this environment, so I can say

401
00:27:12,236 --> 00:27:15,782
I can only deploy to this environment if it comes

402
00:27:15,836 --> 00:27:19,354
from my

403
00:27:19,392 --> 00:27:22,806
main branch. My main branch is the only one that's

404
00:27:22,838 --> 00:27:27,014
allowed to deploy into comp and maybe have secrets

405
00:27:27,062 --> 00:27:30,502
that are specific to this environment.

406
00:27:30,646 --> 00:27:34,074
Now, a lot of times what I'll do is I will have multiple

407
00:27:34,122 --> 00:27:37,546
environments with the exact same secrets. It makes it much easier

408
00:27:37,578 --> 00:27:41,230
for me to reuse my jobs or to copy and paste them.

409
00:27:41,300 --> 00:27:45,262
I'm still leveraging all of the same secret values. I'm just referencing

410
00:27:45,326 --> 00:27:48,926
them from a different environment. So that's

411
00:27:48,958 --> 00:27:53,026
how I can interact with my environments. If I

412
00:27:53,048 --> 00:27:57,282
have multiple environments like this, maybe they have multiple secrets.

413
00:27:57,346 --> 00:28:01,094
And that's okay, I've got secrets and

414
00:28:01,132 --> 00:28:04,806
I access them the exact same way. So when I'm accessing my

415
00:28:04,828 --> 00:28:08,266
secrets, it doesn't matter if I'm accessing a secret from

416
00:28:08,288 --> 00:28:11,450
my repo, from my, or from my environment.

417
00:28:14,110 --> 00:28:17,782
And I know Linux environment,

418
00:28:17,926 --> 00:28:21,078
shell environment versus environment,

419
00:28:21,254 --> 00:28:24,906
a little bit of reuse and I'll show some end to end examples

420
00:28:24,938 --> 00:28:28,170
in just a few moments. I want to talk about matrixes,

421
00:28:28,250 --> 00:28:31,966
matrices for a second. So matrices are a really cool feature that

422
00:28:31,988 --> 00:28:35,714
is available in workflows where maybe

423
00:28:35,752 --> 00:28:38,994
you're a library builder or you're building an application and youll

424
00:28:39,032 --> 00:28:43,410
want to be able to test it on multiple versions of

425
00:28:43,560 --> 00:28:47,186
software or multiple OSS. Well I

426
00:28:47,208 --> 00:28:51,478
can define a matrix of I'm building a python library or a

427
00:28:51,484 --> 00:28:55,058
node library and I want to test it on node 1214 and 16.

428
00:28:55,154 --> 00:28:58,714
And I need to make sure it works on Windows and Linux. So I can

429
00:28:58,752 --> 00:29:02,938
define and you can see I've kicked off a

430
00:29:02,944 --> 00:29:06,602
bunch of node builds and a bunch of windows builds, but I can go in

431
00:29:06,656 --> 00:29:10,010
and say I'm building

432
00:29:10,080 --> 00:29:13,566
node and I have a strategy, it's my matrix. So here

433
00:29:13,588 --> 00:29:17,002
are my node versions and here are my windows oss,

434
00:29:17,146 --> 00:29:20,862
and I'm leveraging these just like I do secrets and

435
00:29:20,916 --> 00:29:24,942
other contexts, Matrix OS

436
00:29:25,086 --> 00:29:28,142
and matrix node version.

437
00:29:28,286 --> 00:29:32,014
So I can access the same values because it's part of my matrix

438
00:29:32,062 --> 00:29:35,302
strategy. This is going to be my matrix context and I can access

439
00:29:35,356 --> 00:29:39,414
the thing. I'm only building out

440
00:29:39,452 --> 00:29:43,030
the job template essentially one time, but this gets

441
00:29:43,100 --> 00:29:46,200
copied three times, two, six times

442
00:29:46,650 --> 00:29:50,058
for the full matrix. So I think that's a

443
00:29:50,064 --> 00:29:53,274
really cool feature that some people need to leverage. Not everybody does,

444
00:29:53,392 --> 00:29:56,918
but it's a good to have. So let's

445
00:29:56,934 --> 00:30:01,374
look at some end to end stuff. I've got three

446
00:30:01,412 --> 00:30:04,814
workflows left and I just want to walk through a couple of

447
00:30:04,852 --> 00:30:07,870
examples. So like net, for instance,

448
00:30:08,690 --> 00:30:11,982
I do similar patterns to what I've done in

449
00:30:12,036 --> 00:30:15,730
other pipeline

450
00:30:16,390 --> 00:30:20,302
CI CD platforms, which is I'm a big fan of separating

451
00:30:20,366 --> 00:30:25,010
out my build and my deploy jobs stages.

452
00:30:26,810 --> 00:30:30,886
I like to have a build that

453
00:30:31,068 --> 00:30:35,190
compiles tests and then gives me an artifact.

454
00:30:35,930 --> 00:30:39,602
And I like that because I can get really fast feedback on it and

455
00:30:39,676 --> 00:30:42,874
it gives me an artifact that I can redeploy later.

456
00:30:43,072 --> 00:30:47,446
I can youll back and forward pretty easily and just redeploy

457
00:30:47,478 --> 00:30:50,606
that one task without having to rebuild everything. Because I know I had

458
00:30:50,628 --> 00:30:54,586
a good binary. I usually also do infrastructure

459
00:30:54,618 --> 00:30:58,430
as code. So you'll notice I upload two artifacts here one

460
00:30:58,500 --> 00:31:02,000
is my web app and one is my

461
00:31:03,090 --> 00:31:07,386
infrastructure as code. So it's IAC. So I'm

462
00:31:07,418 --> 00:31:11,026
uploading both infrastructure's code and my compiled application

463
00:31:11,128 --> 00:31:15,294
so I can deploy it out. Now I said environments

464
00:31:15,342 --> 00:31:19,190
can have approvals. Well I set up an approval here on

465
00:31:19,340 --> 00:31:22,966
this environment. And before I approve it, if we go

466
00:31:22,988 --> 00:31:26,870
take a look at the Yaml file,

467
00:31:28,410 --> 00:31:32,394
I'm doing some interesting things where I'm only going to run this workflow if

468
00:31:32,432 --> 00:31:35,926
I like no paths. So remove

469
00:31:35,958 --> 00:31:39,626
all the paths and only add in the. Net sample. So only do it when

470
00:31:39,648 --> 00:31:43,326
I touch that folder. And I'm doing

471
00:31:43,508 --> 00:31:47,354
some builds, I'm setting up net and giving it the specific version

472
00:31:47,402 --> 00:31:52,378
I want. And these are cool actions

473
00:31:52,474 --> 00:31:56,386
that you can look at. Anytime you look around on GitHub and

474
00:31:56,408 --> 00:32:00,194
you find someone using an interesting action, you can come out here

475
00:32:00,232 --> 00:32:04,740
and you can look up the action, you can see use cases and

476
00:32:05,930 --> 00:32:09,814
how that interacts. So I

477
00:32:09,852 --> 00:32:13,046
poke around a lot of open source projects to see

478
00:32:13,068 --> 00:32:17,058
how they're doing things. Cache defines one. It provides

479
00:32:17,074 --> 00:32:20,790
you with this type of syntax for compiling nuget

480
00:32:20,950 --> 00:32:24,246
packages and. Net packages a little bit more quickly that cache

481
00:32:24,278 --> 00:32:28,598
things. But I'm just doing individual commands to restore,

482
00:32:28,694 --> 00:32:32,570
build, test, publish and upload artifacts.

483
00:32:32,730 --> 00:32:37,694
Now this is where it kind of gets cool on my

484
00:32:37,732 --> 00:32:41,278
deploy, it needs build. So my deploy has to wait till the

485
00:32:41,284 --> 00:32:44,994
build finishes and I'm using an environment. So this

486
00:32:45,032 --> 00:32:48,706
is where I have an environment called net and this

487
00:32:48,728 --> 00:32:52,062
is where it's asking me do I have an approval

488
00:32:52,126 --> 00:32:56,458
to deploy into my net environment. I'm going to download infrastructure

489
00:32:56,494 --> 00:33:00,006
as code and I'm going to log into Azure because I want

490
00:33:00,028 --> 00:33:04,214
to deploy an arm template or a bicep file and I

491
00:33:04,252 --> 00:33:06,360
deploy out my infrastructure as code.

492
00:33:07,630 --> 00:33:11,354
There is an id here which I'll touch on momentarily. And then

493
00:33:11,392 --> 00:33:15,514
we get the web app and it deploys to the

494
00:33:15,552 --> 00:33:18,186
output of my deploy step.

495
00:33:18,368 --> 00:33:22,302
So because I gave this task an id

496
00:33:22,356 --> 00:33:27,182
of deploy, I can go steps deploy and

497
00:33:27,316 --> 00:33:30,698
I have an arm template here that has outputs so I can do outputs.

498
00:33:30,794 --> 00:33:34,730
Web app name I don't know what the name of this web app will be

499
00:33:34,820 --> 00:33:38,702
at the time I write it. Like my dev environment

500
00:33:38,766 --> 00:33:42,686
might give a different name than my prod environment because it's

501
00:33:42,718 --> 00:33:46,534
driven by a secret. So I don't know what to deploy to. So I

502
00:33:46,572 --> 00:33:50,694
need to get the dynamic output of this step right

503
00:33:50,732 --> 00:33:54,966
here in order to pass it to this step right here to

504
00:33:54,988 --> 00:33:58,326
deploying out my code. So let me go ahead and

505
00:33:58,348 --> 00:34:01,786
approve this so I can give an approval. I can

506
00:34:01,808 --> 00:34:05,066
leave a comment. This will now start kicking off the job and

507
00:34:05,088 --> 00:34:08,506
it'll spin up infrastructure, get the dynamic name,

508
00:34:08,608 --> 00:34:12,474
pass that into my deploy and deploy software

509
00:34:12,602 --> 00:34:16,954
onto that web service that got created. You can see it's

510
00:34:17,002 --> 00:34:21,214
pulling down the actions it needs and it's going to do that

511
00:34:21,252 --> 00:34:24,994
task. Now this

512
00:34:25,032 --> 00:34:28,606
is using the older style of Azure login, using the credentials

513
00:34:28,638 --> 00:34:32,322
with a service principle. They've got a newer style that's really nice called

514
00:34:32,376 --> 00:34:36,022
Openid Connect. They actually link to it right there

515
00:34:36,076 --> 00:34:38,840
in the conversation or in the log.

516
00:34:39,610 --> 00:34:43,494
And what's awesome about OpenID connect is you

517
00:34:43,532 --> 00:34:47,138
don't have to pass a secret,

518
00:34:47,234 --> 00:34:50,854
so you don't need a password like Azure and GitHub

519
00:34:50,902 --> 00:34:54,186
trust each other. And I might show this

520
00:34:54,208 --> 00:34:57,834
if I have a few minutes, but really look

521
00:34:57,872 --> 00:35:01,374
into OpenID connect. It's pretty neat, but yeah,

522
00:35:01,412 --> 00:35:04,542
I'm running this deploy. I don't know the web app name,

523
00:35:04,596 --> 00:35:08,686
but it's creating my deployment and

524
00:35:08,708 --> 00:35:12,318
then when that's done it's going to download the

525
00:35:12,324 --> 00:35:16,306
web app and deploy that out there and we

526
00:35:16,328 --> 00:35:20,162
can see kind of what that looks like in an older run

527
00:35:20,296 --> 00:35:24,034
that I did a little while ago. So if we look at our

528
00:35:24,072 --> 00:35:25,140
deploy here,

529
00:35:29,660 --> 00:35:32,716
it's getting the deploying and because I had

530
00:35:32,738 --> 00:35:36,156
a secret as part of it, it's obscuring it, but it

531
00:35:36,178 --> 00:35:39,676
gives you the URL to access the deployment and

532
00:35:39,698 --> 00:35:43,376
passed it in and it worked. Well, what about containers? What if I

533
00:35:43,398 --> 00:35:45,730
want to deploy a container? Well,

534
00:35:46,900 --> 00:35:49,760
containers are very easy to work with. In GitHub actions.

535
00:35:51,140 --> 00:35:54,636
We can log into Docker Hub. So if we want to log into Docker

536
00:35:54,668 --> 00:35:58,864
hub or ACR for Azure, the Azure container registry,

537
00:35:58,992 --> 00:36:02,708
you can use the Docker login action for both of those. If you want to

538
00:36:02,714 --> 00:36:06,644
do a build and push or you want to use build to compile

539
00:36:06,692 --> 00:36:10,696
a container, I'm giving it a folder of container example and

540
00:36:10,718 --> 00:36:14,840
I'm saying I want youll to push this code with these tags

541
00:36:15,820 --> 00:36:20,184
so you can have multiple tags on a container.

542
00:36:20,312 --> 00:36:23,880
Now I do have another sample

543
00:36:23,960 --> 00:36:27,708
out on GitHub that you can look at if you're interested

544
00:36:27,794 --> 00:36:28,430
in.

545
00:36:32,100 --> 00:36:36,480
That one is kind of more slated directly to containers.

546
00:36:45,720 --> 00:36:48,740
Anyways, I will find that in a minute.

547
00:36:51,640 --> 00:36:56,356
Could have sworn I had it right on my main page. But that

548
00:36:56,378 --> 00:36:59,716
one's another fun one where you can see a couple of

549
00:36:59,738 --> 00:37:02,644
steps like I want to do trivia scanning, I want to scan my container,

550
00:37:02,692 --> 00:37:06,276
maybe I don't push it when I first build my container and then I scan

551
00:37:06,308 --> 00:37:07,850
it and then I push it up.

552
00:37:10,000 --> 00:37:13,516
GitHub also provides a superlinter, and a superlinter will pretty

553
00:37:13,538 --> 00:37:17,004
much look at all of your code base in pretty

554
00:37:17,042 --> 00:37:20,344
much every language you can think of. It's really

555
00:37:20,402 --> 00:37:24,624
neat for just trying

556
00:37:24,662 --> 00:37:28,050
to standardize types along your code,

557
00:37:28,660 --> 00:37:32,530
just some weird stuff. Best practices. It has

558
00:37:32,980 --> 00:37:36,176
so many linters, it supports so many languages, and there's

559
00:37:36,208 --> 00:37:40,372
some config files you can check in that will help

560
00:37:40,426 --> 00:37:43,844
standardize how you want to do it. So if you want to turn

561
00:37:43,882 --> 00:37:47,896
on certain ones or turn off other linters, you have full control

562
00:37:47,998 --> 00:37:51,370
over how those different linters work.

563
00:37:51,820 --> 00:37:55,304
Now you might say, these actions are awesome. How do I get started?

564
00:37:55,502 --> 00:37:58,932
Well, you can just go to actions and say new workflow.

565
00:37:59,076 --> 00:38:02,220
And what this will do is it'll look in your code base and try

566
00:38:02,290 --> 00:38:06,110
to give you an idea.

567
00:38:06,560 --> 00:38:09,628
It'll scan your code and try to give you a starting point, like it's a

568
00:38:09,634 --> 00:38:12,524
docker image or net app or a grunt app.

569
00:38:12,642 --> 00:38:16,624
And you can search for these workflows. If I was doing like,

570
00:38:16,822 --> 00:38:20,416
oh, maybe I want to do NPM, well, there's a whole bunch here about oh,

571
00:38:20,438 --> 00:38:24,176
I want to do a node JS package and I can hit configure.

572
00:38:24,288 --> 00:38:28,096
And what this will do is it'll already set up your repo

573
00:38:28,208 --> 00:38:31,780
GitHub workflows. It'll give you this and

574
00:38:31,850 --> 00:38:36,024
it'll start you out with a reasonable place

575
00:38:36,062 --> 00:38:39,640
to start from. You can also search the marketplace right there.

576
00:38:39,710 --> 00:38:43,336
So I said I'm doing Azure. I can

577
00:38:43,358 --> 00:38:47,060
click an Azure button and add in an action

578
00:38:47,140 --> 00:38:50,360
potentially, so I can find

579
00:38:50,430 --> 00:38:53,676
a version and I can copy it and I can paste it

580
00:38:53,698 --> 00:38:56,876
over here and then I can delete the stuff I don't need.

581
00:38:56,978 --> 00:38:58,830
So it gives me a starting point.

582
00:38:59,680 --> 00:39:03,344
Another thing that I think is really interesting is the

583
00:39:03,382 --> 00:39:05,090
paths up here. Not everybody.

584
00:39:06,980 --> 00:39:10,224
It's interesting that it

585
00:39:10,262 --> 00:39:14,356
might have a whole bunch of stuff there. You can name it whatever you

586
00:39:14,378 --> 00:39:17,940
want, it'll automatically pick up those actions.

587
00:39:19,320 --> 00:39:23,284
Another really cool thing, GitHub has

588
00:39:23,322 --> 00:39:27,144
build essentially a training platform based

589
00:39:27,182 --> 00:39:31,704
on GitHub actions. So skills. GitHub is

590
00:39:31,902 --> 00:39:34,744
a full training thing built on this.

591
00:39:34,942 --> 00:39:38,168
Remember I said there were events around what happens if you fork

592
00:39:38,184 --> 00:39:41,688
it, or what happens if you comment or push?

593
00:39:41,864 --> 00:39:45,276
Well, when you use this template and you make a

594
00:39:45,298 --> 00:39:49,084
fork, it starts doing stuff and then

595
00:39:49,122 --> 00:39:52,640
it starts prompting you via

596
00:39:53,780 --> 00:39:57,168
pull requests, issues, comments. And if

597
00:39:57,174 --> 00:40:00,844
you come in here and you're curious how it works, look, they have some scripts

598
00:40:00,892 --> 00:40:04,704
and they have workflows. So this is going to

599
00:40:04,902 --> 00:40:08,612
unpush to main, it's going to check

600
00:40:08,666 --> 00:40:11,680
on a conditional is this GitHub a template,

601
00:40:11,840 --> 00:40:15,624
so you can see some cool tricks based

602
00:40:15,662 --> 00:40:19,496
on how things are working in the

603
00:40:19,518 --> 00:40:23,544
actions. And you can look across

604
00:40:23,742 --> 00:40:28,440
GitHub. So if you're looking at like GitHub workflows,

605
00:40:28,940 --> 00:40:32,250
you can go see what other projects are doing,

606
00:40:32,620 --> 00:40:34,700
doing codeql analysis,

607
00:40:35,680 --> 00:40:39,196
checking for spelling. So you can go take a

608
00:40:39,218 --> 00:40:42,124
look and see what people are doing. Oh, they're using a c spell action.

609
00:40:42,172 --> 00:40:44,050
That's cool. I didn't know I could do that.

610
00:40:47,780 --> 00:40:51,312
That's all I had. Please feel

611
00:40:51,366 --> 00:40:54,964
free to, like I said, follow some

612
00:40:55,002 --> 00:40:59,092
of my repositories and take a look. Feel free

613
00:40:59,146 --> 00:41:02,644
to clone some of these

614
00:41:02,682 --> 00:41:05,430
repos and play around.

615
00:41:06,460 --> 00:41:08,490
That's the best thing you can do,

616
00:41:10,300 --> 00:41:13,656
play around with actions, try them

617
00:41:13,678 --> 00:41:17,400
out. It works really cool, really well.

618
00:41:17,550 --> 00:41:21,364
And there's even a way,

619
00:41:21,422 --> 00:41:25,068
if you're really interested, to test some of these locally. You can

620
00:41:25,074 --> 00:41:28,488
see here, I'm doing a build, I'm doing a scan. So there's

621
00:41:28,504 --> 00:41:31,664
a tool out there called act that I

622
00:41:31,702 --> 00:41:35,120
like to recommend to people. If you're playing around,

623
00:41:35,270 --> 00:41:39,504
it is super cool. It runs in a container, but essentially this

624
00:41:39,542 --> 00:41:43,464
will let you run your GitHub

625
00:41:43,532 --> 00:41:46,404
actions locally, like you pretty much say act,

626
00:41:46,602 --> 00:41:50,836
and it'll pull in your

627
00:41:50,858 --> 00:41:54,036
workflows and it'll run them inside these containers. So you can kind of

628
00:41:54,058 --> 00:41:56,970
test things locally while you're trying to get stuff working.

629
00:41:57,820 --> 00:42:01,620
I've used this many times and it's a really cool repo,

630
00:42:01,700 --> 00:42:05,432
it's a really cool project. And it's something

631
00:42:05,566 --> 00:42:09,208
that I think if you do all these a lot, if you

632
00:42:09,214 --> 00:42:13,164
make a lot of workflows, that this is something that is a helpful tool.

633
00:42:13,362 --> 00:42:17,064
And I did not get into some of the reusable workflows

634
00:42:17,112 --> 00:42:21,084
or the templates, but again, search for the

635
00:42:21,122 --> 00:42:24,268
documentation and it'll work out.

636
00:42:24,434 --> 00:42:28,268
You'll find it. The documentation is incredible, so you'll be

637
00:42:28,274 --> 00:42:31,870
able to find that pretty quickly. And so with that,

638
00:42:34,360 --> 00:42:39,350
I'd like to thank everybody for joining me today, and happy

639
00:42:39,720 --> 00:42:43,570
deploying and playing around with GitHub actions. Thank you.

