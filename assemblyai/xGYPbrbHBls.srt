1
00:01:28,370 --> 00:01:31,954
Hi everyone, thanks for joining me. I'm going to talk, but telephone

2
00:01:32,002 --> 00:01:35,942
practices, the good, the bad and the ugly telephone is a great tool.

3
00:01:35,996 --> 00:01:39,382
It is used widely across the world. This talk will cover

4
00:01:39,436 --> 00:01:43,546
not only the specific bits and pieces regarding terraform usage and best practices,

5
00:01:43,658 --> 00:01:47,214
but also hopefully will make you think about youll unique use

6
00:01:47,252 --> 00:01:50,458
cases and scenarios and help you see the big picture

7
00:01:50,554 --> 00:01:54,218
and utilize terraform in a broader context rather than just an

8
00:01:54,244 --> 00:01:57,650
infrastructure tool. So a little bit about myself.

9
00:01:57,800 --> 00:02:01,634
I'm Hila Fish. I'm a senior DevOps engineer currently working for weeks.

10
00:02:01,752 --> 00:02:04,766
I have 15 years of experience in the tech industry.

11
00:02:04,878 --> 00:02:08,962
I'm a DevOps culture fan. I think this what helps companies achieve

12
00:02:09,026 --> 00:02:12,786
great things. I'm conferences, a co organizer.

13
00:02:12,818 --> 00:02:16,486
So DevOps Day is Tel Aviv in Israel, and Sascraft which is

14
00:02:16,508 --> 00:02:19,686
a monitoring conference. I'm a mentor in opschool, which is

15
00:02:19,708 --> 00:02:23,018
a course for DevOps and Ba'ot which is

16
00:02:23,024 --> 00:02:26,346
a community in tech for women. And I'm a lead singer in

17
00:02:26,368 --> 00:02:28,810
a cover band, as you can see in this picture.

18
00:02:29,310 --> 00:02:32,894
Okay, so telephone implementations can be good, bad and

19
00:02:32,932 --> 00:02:36,746
ugly, right? So we will talk about it here. Just one disclaimer

20
00:02:36,778 --> 00:02:40,762
beforehand I'm using to show mostly examples from AWS,

21
00:02:40,826 --> 00:02:44,894
but this talk is suitable for any cloud provider

22
00:02:44,942 --> 00:02:48,754
that you will work with. And also I mostly or not

23
00:02:48,792 --> 00:02:52,274
mostly only worked with telephone open

24
00:02:52,312 --> 00:02:56,002
resources and not enterprise or cloud. So I don't know if

25
00:02:56,056 --> 00:02:59,906
what I'm going to show you applies to them as well. So just bear

26
00:02:59,938 --> 00:03:03,238
that in mind. Okay, quick wins. I'm going to

27
00:03:03,244 --> 00:03:06,854
show youll briefly things that you can do in terraform that

28
00:03:06,892 --> 00:03:10,714
will achieve great value in a low amount of time, just a matter

29
00:03:10,752 --> 00:03:14,614
of seconds or minutes. These first thing is versions lock.

30
00:03:14,662 --> 00:03:19,046
So like we have requirement TXT or packages lock

31
00:03:19,078 --> 00:03:22,222
JSon. So that's exactly the same thing.

32
00:03:22,276 --> 00:03:25,594
So when you think about modules,

33
00:03:25,642 --> 00:03:29,440
providers and terraform versions, each of them has

34
00:03:29,890 --> 00:03:33,134
a version that gets deployed, which means a

35
00:03:33,172 --> 00:03:36,514
specific syntax that is accepted and the

36
00:03:36,552 --> 00:03:40,194
features with it. So if you lock the versions, you know exactly which

37
00:03:40,232 --> 00:03:43,858
features are the ones that you can use, which syntax is

38
00:03:43,944 --> 00:03:46,820
acceptable and valid and stuff like that.

39
00:03:47,510 --> 00:03:50,806
So the good thing here is to lock the versions always of

40
00:03:50,828 --> 00:03:54,246
the modules, providers and the terraform. The bad thing

41
00:03:54,268 --> 00:03:58,294
is to lock in a way that will still allow breaking changes to

42
00:03:58,492 --> 00:04:01,866
break through. So you have version constraints. So if

43
00:04:01,888 --> 00:04:05,530
you lock the version to the major or the latest of major x

44
00:04:05,600 --> 00:04:09,274
until breaking changes get introduced, then that's fine

45
00:04:09,312 --> 00:04:13,514
because little changes applied and no breaking changes will get through.

46
00:04:13,632 --> 00:04:17,006
But if you still lock it

47
00:04:17,028 --> 00:04:20,846
in a way that will allow the breaking changes, then this

48
00:04:20,948 --> 00:04:24,494
could be bad. And the ugly thing here is to have

49
00:04:24,532 --> 00:04:27,874
no version lock whatsoever. Trust me, it is really really

50
00:04:27,912 --> 00:04:31,634
ugly. You will see a lot of stuff in plan apply of

51
00:04:31,672 --> 00:04:34,690
like I don't know this syntax, what this is it,

52
00:04:34,840 --> 00:04:37,590
stuff like that. So just lock your versions.

53
00:04:38,170 --> 00:04:42,290
The next thing I want to show you or talk about is tagging resources.

54
00:04:42,370 --> 00:04:46,146
So I think this is a must implement practice

55
00:04:46,258 --> 00:04:49,674
because it allows you to filter cloud provider expenses and

56
00:04:49,712 --> 00:04:53,466
sort them. Because if you use tags you can sort by whatever you

57
00:04:53,488 --> 00:04:57,146
choose to and that way you also gain visibility on

58
00:04:57,168 --> 00:05:00,566
ownership and overall projects. So if you tag

59
00:05:00,598 --> 00:05:04,700
them correctly you can do a lot of great things and sort

60
00:05:05,970 --> 00:05:10,238
and really track your cost management and other stuff along the way.

61
00:05:10,404 --> 00:05:14,430
So the good thing here is to tag everything because why not

62
00:05:14,580 --> 00:05:17,986
everything is good. You can use default tags on

63
00:05:18,008 --> 00:05:21,406
the provider level. So for example, if you use the managed by tag

64
00:05:21,438 --> 00:05:25,230
that I showed before in the examples, then managed by is by terraform

65
00:05:25,310 --> 00:05:28,802
of course. So if you set it in the provider level then you can just

66
00:05:28,856 --> 00:05:32,402
forget about it. You don't need to set it up on other resources

67
00:05:32,466 --> 00:05:35,878
along the way. Once it is set up on provider level, then it

68
00:05:35,884 --> 00:05:39,942
will get applied to any resource that is under that provider.

69
00:05:40,086 --> 00:05:43,530
And another good thing to do is to add enforcements to

70
00:05:43,600 --> 00:05:46,954
failure pr were if tags weren't added. I'm going to talk

71
00:05:46,992 --> 00:05:49,962
about the practices enforcement later on.

72
00:05:50,016 --> 00:05:53,834
So you'll see that the bad thing here is to tag

73
00:05:53,882 --> 00:05:57,760
inconsistently because as we know, consistency is key.

74
00:05:58,850 --> 00:06:02,046
Inconsistently means that sometimes you will be

75
00:06:02,068 --> 00:06:05,780
able to sew, sometimes not, and it's not that great.

76
00:06:06,950 --> 00:06:10,546
So try to be as consistent as possible. And the

77
00:06:10,568 --> 00:06:13,550
ugly thing is to have no tagging whatsoever.

78
00:06:13,630 --> 00:06:17,186
Because again, trust me, if you'll tag things,

79
00:06:17,368 --> 00:06:20,694
phenops team will thank you

80
00:06:20,732 --> 00:06:24,086
and your team leader will thank you and the management and company will thank you.

81
00:06:24,108 --> 00:06:27,702
So do it. And the last thing in the quick

82
00:06:27,756 --> 00:06:31,606
wix section I went to show youll is the remote state. So by default terraform

83
00:06:31,718 --> 00:06:34,966
works with local state. So even if you're walking

84
00:06:34,998 --> 00:06:38,778
alone, okay, let's say you're the only one managing infrastructure still you want

85
00:06:38,784 --> 00:06:41,914
to think about, or you should think about backups

86
00:06:41,962 --> 00:06:45,278
and to have the state secured and to have

87
00:06:45,364 --> 00:06:48,830
redundancy. Because if something happens

88
00:06:48,900 --> 00:06:51,680
to your local machine that it's not good.

89
00:06:52,210 --> 00:06:55,954
So all sort of things. So you should really use a back

90
00:06:55,992 --> 00:07:00,850
end like in this example, this is s these, but again, call cloud

91
00:07:00,920 --> 00:07:04,954
providers, provide that. And then this way the state will kept

92
00:07:05,022 --> 00:07:09,110
remotely. So the good thing here is to have the state

93
00:07:09,180 --> 00:07:13,014
remote and secured because a lot of times we

94
00:07:13,052 --> 00:07:16,422
have in the state sensitive information

95
00:07:16,556 --> 00:07:20,170
like secrets and stuff like that. So you really need to make sure that these

96
00:07:20,240 --> 00:07:23,834
state is secured. Have these state backed up.

97
00:07:23,952 --> 00:07:27,702
So if you use s three as the back end then enable

98
00:07:27,766 --> 00:07:31,698
versioning and then it will be blood and ensure that tf

99
00:07:31,734 --> 00:07:35,530
state lock occurs. Because when you run write operations

100
00:07:35,690 --> 00:07:38,926
then if a lock doesn't happen then there

101
00:07:38,948 --> 00:07:42,974
will be conflicts if other people trying to run it as well. So not

102
00:07:43,012 --> 00:07:46,942
so great. And these bad. And the ugly here is quite the opposite

103
00:07:47,006 --> 00:07:50,914
actually. So if the state is kept locally, if it is

104
00:07:50,952 --> 00:07:54,722
remote but not backed up or not secured, and if

105
00:07:54,856 --> 00:07:58,854
telephone state lock doesn't occur during write

106
00:07:58,892 --> 00:08:02,546
operations. Okay, so we talked about quick wins,

107
00:08:02,578 --> 00:08:06,466
stuff that you can do on your day to day in order to gain

108
00:08:06,498 --> 00:08:09,762
a lot of value out of terraform. Let's talk about second nature.

109
00:08:09,826 --> 00:08:12,986
What do I mean by second nature? I mean that these are the things that

110
00:08:13,008 --> 00:08:16,506
youll should have in your awareness on your day to day in order for

111
00:08:16,528 --> 00:08:20,060
you to really work with terraform in these best way possible.

112
00:08:20,670 --> 00:08:24,774
So the first thing is using community modules versus creating

113
00:08:24,822 --> 00:08:29,034
them. So hey, why reinvent

114
00:08:29,082 --> 00:08:33,338
the bicycle, right? I mean if it exists then use it. Using official

115
00:08:33,434 --> 00:08:37,202
community models is good because they are proved over

116
00:08:37,256 --> 00:08:40,894
time, they support it by the community and you eliminate

117
00:08:40,942 --> 00:08:44,226
the need to support it and keep it up to date because they do it

118
00:08:44,248 --> 00:08:48,466
for you. A lot of well known cloud providers features

119
00:08:48,498 --> 00:08:52,662
are already covered by modules, so do your research, check available

120
00:08:52,796 --> 00:08:56,774
modules before implementing yours. So the good

121
00:08:56,812 --> 00:08:59,842
thing here is to use official modules wherever possible.

122
00:08:59,996 --> 00:09:04,118
The bad thing is to write your own modules while official

123
00:09:04,214 --> 00:09:07,578
modules existing. But if you still maintain them as such, so you

124
00:09:07,584 --> 00:09:10,922
have enforcements and stuff like that, then it's good.

125
00:09:11,056 --> 00:09:14,586
And using community modules without version

126
00:09:14,618 --> 00:09:17,982
lock, it's also a bad thing as I specified before.

127
00:09:18,116 --> 00:09:21,582
And the ugly thing here is to write your own modules and

128
00:09:21,636 --> 00:09:25,026
paved no checks or consistency whatsoever and

129
00:09:25,128 --> 00:09:28,594
code practices not applied. So we will talk about it

130
00:09:28,632 --> 00:09:32,494
also later on. And also remember, community modules,

131
00:09:32,542 --> 00:09:35,140
as I will show in a bit,

132
00:09:35,450 --> 00:09:38,306
usually use enforced linters,

133
00:09:38,418 --> 00:09:41,810
formatters and logical checks because they want to maintain

134
00:09:41,890 --> 00:09:45,666
important aspects to allow new users to get involved

135
00:09:45,778 --> 00:09:49,106
and to contribute to the module and use it right. So they

136
00:09:49,148 --> 00:09:52,778
have everything set up to create the best quality

137
00:09:52,864 --> 00:09:55,020
code. So why not use it?

138
00:09:56,110 --> 00:09:59,562
So if you do have to create your own modules, make sure that

139
00:09:59,616 --> 00:10:03,934
they are stateless and clean and generic and you do not repeat yourself there

140
00:10:04,052 --> 00:10:07,246
and it is kept as simple as

141
00:10:07,268 --> 00:10:10,986
possible and use enforcement slope. So like community modules

142
00:10:11,018 --> 00:10:14,418
have these enforcements, use them as well. I will also

143
00:10:14,504 --> 00:10:18,626
cover it later on and youll just

144
00:10:18,808 --> 00:10:22,690
bear in mind that the code should always be clean and readable.

145
00:10:23,670 --> 00:10:27,714
Okay, variables and locals. So unlike variable values,

146
00:10:27,762 --> 00:10:31,618
local values can use dynamic expressions and resources arguments.

147
00:10:31,714 --> 00:10:35,282
Locals also don't change values during or between terraform

148
00:10:35,346 --> 00:10:38,726
runs such as plan, apply or destroy. You can

149
00:10:38,748 --> 00:10:42,342
use locals to give a name to the result of any terraform

150
00:10:42,406 --> 00:10:45,942
expression and reuse that name throughout your configuration.

151
00:10:46,006 --> 00:10:49,420
Like this example with the tears that I showed right here.

152
00:10:49,950 --> 00:10:53,514
So on the module side, you should use variables

153
00:10:53,562 --> 00:10:56,830
for needed settings for the module config itself.

154
00:10:56,980 --> 00:11:00,794
And if youll set a variable on the module, you should set default

155
00:11:00,842 --> 00:11:05,406
or validation because if the module expect a

156
00:11:05,428 --> 00:11:08,606
variable to get passed to it and it doesn't get it, then the module

157
00:11:08,638 --> 00:11:12,754
will break right. So make sure to set up a default or

158
00:11:12,792 --> 00:11:16,946
validation. And for locals it should be a

159
00:11:16,968 --> 00:11:20,230
constant to be honored or relied on. So for example, you have

160
00:11:20,380 --> 00:11:23,506
a bucket module that creates buckets.

161
00:11:23,618 --> 00:11:27,094
If you want to have consistency of all buckets should have the same

162
00:11:27,132 --> 00:11:31,654
name convention. You can do it through using that convention

163
00:11:31,702 --> 00:11:35,194
in the locals as I showed in this example. So this is also

164
00:11:35,312 --> 00:11:39,702
a great thing and you could really enforce guidelines and practices

165
00:11:39,846 --> 00:11:43,486
through locals on these live side. When I

166
00:11:43,508 --> 00:11:47,022
say live, I mean where I call the modules because modules are

167
00:11:47,076 --> 00:11:50,558
generic and nothing happens there. And there's the section where

168
00:11:50,644 --> 00:11:54,814
we call the actual modules and do the actual creation

169
00:11:54,862 --> 00:11:58,686
of the resources. So these live section variables

170
00:11:58,718 --> 00:12:02,306
wise, if you use the variables once, then just set up

171
00:12:02,408 --> 00:12:05,678
default on the variable. But if you use it per regions or

172
00:12:05,704 --> 00:12:09,682
other logical breakdown that you have, then use tfvals

173
00:12:09,746 --> 00:12:12,934
file and then you specify each variable value

174
00:12:13,052 --> 00:12:16,182
on tfvals based on each region or each other

175
00:12:16,236 --> 00:12:20,202
breakdown that you do avoid using locals and use

176
00:12:20,256 --> 00:12:23,626
data sources to pass their outputs to the module itself.

177
00:12:23,808 --> 00:12:27,926
And basically just remember to keep the live section

178
00:12:28,118 --> 00:12:31,546
as simple as possible. No logic, only call the modules

179
00:12:31,578 --> 00:12:35,134
themselves. Okay, so to

180
00:12:35,172 --> 00:12:38,494
sum things up regarding variables and locals use

181
00:12:38,532 --> 00:12:42,174
these tfvals wherever possible. I haven't mentioned it

182
00:12:42,212 --> 00:12:45,934
before, but use environment variables. So if you have environment

183
00:12:45,982 --> 00:12:49,726
variables already set up, then just utilize them instead of creating

184
00:12:49,758 --> 00:12:53,646
a new variable. Use locals to these hard code names

185
00:12:53,678 --> 00:12:57,382
and tags which are set only once or to decrease code

186
00:12:57,436 --> 00:13:00,630
readability, repeatability, sorry.

187
00:13:00,780 --> 00:13:03,686
And keep things generic as much as possible.

188
00:13:03,868 --> 00:13:07,606
The best thing here is to use multiple locals block if

189
00:13:07,628 --> 00:13:11,254
not necessary, because terraform allows that it allows youll to create multiple blocks.

190
00:13:11,302 --> 00:13:14,618
But if you don't need to, then why burden my eye with a lot

191
00:13:14,624 --> 00:13:17,946
of stuff that is written, right? So just have one

192
00:13:17,968 --> 00:13:21,334
block if it's not necessary. And ignoring environment

193
00:13:21,382 --> 00:13:24,922
variables could also be bad because then it forces you to maintain

194
00:13:24,986 --> 00:13:28,942
more variables than you need to. And the ugly thing here is

195
00:13:28,996 --> 00:13:32,638
to hard code values on variables that should support

196
00:13:32,724 --> 00:13:36,290
multiple scenarios. So these are why

197
00:13:36,360 --> 00:13:39,762
variables are for right to set them up according to our needs.

198
00:13:39,816 --> 00:13:43,154
So if you hard code values whenever it is not good

199
00:13:43,192 --> 00:13:47,426
to do that, then it could get ugly. So that's

200
00:13:47,458 --> 00:13:50,886
about that file structure. So when you

201
00:13:50,908 --> 00:13:54,706
think about the file structure, and I say that in regards

202
00:13:54,738 --> 00:13:58,394
to both modules and these live section, you should think

203
00:13:58,432 --> 00:14:01,382
about it for better logical arrangement and easy management.

204
00:14:01,446 --> 00:14:05,498
So this is how it is structured on community

205
00:14:05,664 --> 00:14:08,860
modules. So they are basically the standard for us.

206
00:14:09,230 --> 00:14:12,734
Main TF is the main logic variables, data and

207
00:14:12,772 --> 00:14:14,800
outputs. And usually,

208
00:14:16,130 --> 00:14:19,342
at least from my experience, for example,

209
00:14:19,396 --> 00:14:23,038
if we take a module of VM, the VM itself

210
00:14:23,204 --> 00:14:26,642
creation, these resources creation is on the main and then if

211
00:14:26,696 --> 00:14:30,034
they have complementaries like security groups, then it should be

212
00:14:30,072 --> 00:14:33,442
in SG file. If there has definitions for

213
00:14:33,496 --> 00:14:36,946
log answer, then put it in ALBTF. So that's

214
00:14:36,978 --> 00:14:40,130
about that. And if the main TF gets complex,

215
00:14:40,210 --> 00:14:42,982
if it has a lot of things,

216
00:14:43,116 --> 00:14:46,562
then consider break it down to sub modules.

217
00:14:46,626 --> 00:14:49,862
So let's know IAM. For example,

218
00:14:49,916 --> 00:14:53,826
the community module IAM has breakdown of sub modules.

219
00:14:53,858 --> 00:14:57,126
Also eks one of the sub modules are the creation of node

220
00:14:57,158 --> 00:15:01,162
pools. So it shouldn't be in the top main because it's not

221
00:15:01,296 --> 00:15:05,294
the main logic, but it is relevant. That's why it was breakdown to

222
00:15:05,332 --> 00:15:08,510
modules. And also when you break it down

223
00:15:08,580 --> 00:15:12,526
then the variables for each sub modules is only with

224
00:15:12,548 --> 00:15:16,174
that sub modules. And then also your variables.

225
00:15:16,222 --> 00:15:20,002
TF file doesn't get huge and it really is

226
00:15:20,056 --> 00:15:23,650
easier to maintain it that way. Also it's best to have

227
00:15:23,720 --> 00:15:27,986
naming convention which reflects the actual purpose of each file.

228
00:15:28,098 --> 00:15:31,474
And that way you will get a decent logical arrangement for faster

229
00:15:31,522 --> 00:15:35,080
access, better readability and cleanliness of the code.

230
00:15:36,410 --> 00:15:40,294
Okay, the next thing that I want to talk to you about is applying classic

231
00:15:40,342 --> 00:15:44,026
code best practices. So yeah, Terraform is not a

232
00:15:44,048 --> 00:15:47,626
pure programming language, I know that. I think that everyone can

233
00:15:47,648 --> 00:15:51,162
agree on that. But similar rules of writing code apply

234
00:15:51,216 --> 00:15:54,846
to terraform as well. Terraform progressed over the years in a way

235
00:15:54,868 --> 00:15:58,894
that adopts code best practices. For example, you might

236
00:15:58,932 --> 00:16:02,622
remember that before Terraform, a zero point 13 you can't even use

237
00:16:02,676 --> 00:16:06,238
for each for modules. And in August 2020 with the release

238
00:16:06,254 --> 00:16:10,094
of Terraform, zero point 13. Hashicorp finally introduced the ability

239
00:16:10,142 --> 00:16:13,106
to loop over modules with a single module call.

240
00:16:13,208 --> 00:16:16,486
So even Hashicorp realized that hey, Terraform should follow

241
00:16:16,588 --> 00:16:19,878
best practices for its code.

242
00:16:19,964 --> 00:16:23,218
So that's why they introduced these capabilities.

243
00:16:23,394 --> 00:16:26,440
So keep your telephone code in

244
00:16:27,210 --> 00:16:30,326
source control management like GitHub, GitLab,

245
00:16:30,358 --> 00:16:33,082
BitBucket. Keep it simple,

246
00:16:33,136 --> 00:16:37,066
stupid as much as possible, of course. Do not repeat yourself.

247
00:16:37,248 --> 00:16:40,726
And make sure that your modules that you create and

248
00:16:40,768 --> 00:16:44,686
everything that you use are item potent. Which means that

249
00:16:44,868 --> 00:16:48,574
whenever you create something, the result of that

250
00:16:48,612 --> 00:16:52,462
something, the result of the logic that runs is always the same.

251
00:16:52,516 --> 00:16:56,526
Youll expect the same result. Because if not, then there's

252
00:16:56,558 --> 00:16:59,902
a saying about it that maybe you're crazy. I don't know. Let's leave it aside.

253
00:16:59,966 --> 00:17:03,666
But everything should be important because you want to

254
00:17:03,688 --> 00:17:07,382
make sure that everything is as expected. You always

255
00:17:07,436 --> 00:17:11,154
expect the same results. Functional programming

256
00:17:11,202 --> 00:17:14,434
is also another approach to writing telephone

257
00:17:14,482 --> 00:17:18,854
code. It is great. I haven't did

258
00:17:18,892 --> 00:17:22,314
it myself yet, but I spoke with other developers who

259
00:17:22,352 --> 00:17:25,606
are utilizing functional programming into their telephone

260
00:17:25,638 --> 00:17:29,094
code, which is very interesting and fascinating. So I really encourage

261
00:17:29,142 --> 00:17:33,486
you to check this road as well and about human

262
00:17:33,668 --> 00:17:37,230
and cleanliness. So there's an interesting read

263
00:17:37,300 --> 00:17:41,434
by tixen Guo. I hope that I pronounce his name properly.

264
00:17:41,562 --> 00:17:45,262
He really writes things in a clear manner about

265
00:17:45,396 --> 00:17:49,050
applying classic code best practices in terraform.

266
00:17:49,130 --> 00:17:52,382
So I want to quote him on something about human

267
00:17:52,436 --> 00:17:55,718
and clean code. So the computer that

268
00:17:55,884 --> 00:18:00,034
processes your code doesn't care if the variable names

269
00:18:00,082 --> 00:18:03,942
are ambiguous or inaccurate, right? If used

270
00:18:03,996 --> 00:18:07,554
correctly, it still gets executed.

271
00:18:07,682 --> 00:18:11,014
But since human beings are the ones to maintain

272
00:18:11,062 --> 00:18:14,662
this code, then we need to make sure the code is readable.

273
00:18:14,806 --> 00:18:18,134
Things like refactoring clean code, naming conventions,

274
00:18:18,262 --> 00:18:21,814
stuff like that are invented so that we humans

275
00:18:21,862 --> 00:18:25,726
can read these code better for the sake of us human and

276
00:18:25,748 --> 00:18:29,598
not the computer, right? So that's about that. I really

277
00:18:29,684 --> 00:18:32,640
encourage you to read the article because it's really interesting.

278
00:18:33,410 --> 00:18:36,626
Okay, so we spoke about the quick wins stuff that you can

279
00:18:36,648 --> 00:18:40,510
do in minutes in order to get a lot of value out of terraform

280
00:18:40,670 --> 00:18:43,726
for your company's long term and whatnot.

281
00:18:43,838 --> 00:18:47,266
We talked about second nature things that you need to think about on your day

282
00:18:47,288 --> 00:18:50,934
to day when you work with terraform. Let's talk about the long

283
00:18:50,972 --> 00:18:54,546
haul. Long haul means that stuff that you should prepare

284
00:18:54,578 --> 00:18:58,042
for and plan ahead in order to work with terraform in a best,

285
00:18:58,096 --> 00:19:01,526
efficient way. So structuring youll telephone

286
00:19:01,558 --> 00:19:04,620
code, how do you structure your code?

287
00:19:05,150 --> 00:19:08,186
There's a

288
00:19:08,208 --> 00:19:11,166
lot of ways to do it. So let me show you how we do it

289
00:19:11,188 --> 00:19:15,134
here at Wix. In Wix, we did the

290
00:19:15,172 --> 00:19:18,814
structuring like that team project, blood provider and

291
00:19:18,852 --> 00:19:23,146
region. This is actually a feature oriented approach.

292
00:19:23,258 --> 00:19:26,850
And that way, when you look at the example here, you see the live

293
00:19:26,920 --> 00:19:30,226
section, right? And we have bi, which is the

294
00:19:30,248 --> 00:19:33,826
team airflow is the project AWS, the cloud provider, and us east one

295
00:19:33,848 --> 00:19:37,478
is these region. That way. Also, it allows the state to be

296
00:19:37,564 --> 00:19:41,382
very small, because the state is only for the

297
00:19:41,436 --> 00:19:46,134
airflow project, for bit, for us

298
00:19:46,172 --> 00:19:49,206
east one in AWS. So it's very small. It allows you

299
00:19:49,228 --> 00:19:52,746
better flexibility and control over

300
00:19:52,848 --> 00:19:56,410
what you are inserting and what you're managing at that

301
00:19:56,480 --> 00:20:00,042
specific point. So it really is very

302
00:20:00,096 --> 00:20:03,934
beneficial to have this structure. And also, when you

303
00:20:03,972 --> 00:20:07,902
come to think about accounts, currently we manage

304
00:20:07,956 --> 00:20:12,026
the accounts on the region level, which is not great. So that's

305
00:20:12,058 --> 00:20:15,854
why we are structuring it or thinking to structure

306
00:20:15,902 --> 00:20:19,758
it again, on top of tears. So it's

307
00:20:19,774 --> 00:20:23,362
an ongoing process. But think about that. Think that if you have

308
00:20:23,496 --> 00:20:29,154
multiple accounts that you need to manage and different projects,

309
00:20:29,202 --> 00:20:32,838
and the code doesn't repeat itself, like I will show in the next example,

310
00:20:32,924 --> 00:20:37,174
then maybe the account should also get

311
00:20:37,212 --> 00:20:39,900
into the consideration of the structuring of the code.

312
00:20:40,910 --> 00:20:44,890
Another example of structuring these code is using

313
00:20:44,960 --> 00:20:48,246
workspaces. So workspaces isolate

314
00:20:48,278 --> 00:20:51,738
their state. So if you run telephone plan in one workspace,

315
00:20:51,834 --> 00:20:55,326
you will see only the state for that workspace and not the

316
00:20:55,348 --> 00:20:58,938
other one that is just around the corner.

317
00:20:59,034 --> 00:21:02,382
So one example is to use when you have

318
00:21:02,436 --> 00:21:05,886
the same telephone config, but different customers. So let's say GCP,

319
00:21:05,918 --> 00:21:09,746
okay, I talked about AWS until now. Let's say GCP. Each project in

320
00:21:09,768 --> 00:21:13,614
GCP is a different customer, and it's

321
00:21:13,662 --> 00:21:16,598
exactly the same code, right? Because it's the same code, just different customers.

322
00:21:16,684 --> 00:21:20,006
So in that case, you can use for each

323
00:21:20,108 --> 00:21:24,262
customer, each project, which is the same code, just different

324
00:21:24,316 --> 00:21:27,094
workspaces, and each workspace is a customer.

325
00:21:27,292 --> 00:21:31,186
So this is one example. Another example which really links

326
00:21:31,218 --> 00:21:34,458
and couples with the one that I just showed is when you have the

327
00:21:34,464 --> 00:21:37,946
same service, but different regions. So we have different customers, right,

328
00:21:38,048 --> 00:21:40,938
but all customers need to go to one service,

329
00:21:41,104 --> 00:21:44,830
financial service, for example. So if I have financial service

330
00:21:44,900 --> 00:21:48,366
on different regions, use east one, use east two, and stuff like that,

331
00:21:48,468 --> 00:21:52,430
then I can also use that for workspaces.

332
00:21:53,830 --> 00:21:56,994
Okay, some comes about workspaces. So if you

333
00:21:57,032 --> 00:22:00,254
use them, consider using telephone wrapper to avoid

334
00:22:00,302 --> 00:22:03,822
human errors. Because when you use workspaces,

335
00:22:03,886 --> 00:22:07,894
it's using the CLI telephone workspace, select x,

336
00:22:08,092 --> 00:22:11,590
that way if I forgot to change the workspace,

337
00:22:12,090 --> 00:22:16,306
I am a bit, so it's

338
00:22:16,338 --> 00:22:19,838
not great. So consider if you creating a telephone

339
00:22:19,874 --> 00:22:23,706
wrapper that will actually run the code for you, and then you will run the

340
00:22:23,728 --> 00:22:27,018
wrapper instead of running telephone directly. And that's why

341
00:22:27,184 --> 00:22:30,346
this wrapper will handle the changing of the

342
00:22:30,368 --> 00:22:33,966
workspaces and management for you. Second thing is that

343
00:22:33,988 --> 00:22:37,726
you have less visibility because hey, I just started with

344
00:22:37,748 --> 00:22:41,818
the CLI, right? So if I haven't used the telephone workspace

345
00:22:41,914 --> 00:22:45,714
built in variable here, then it means

346
00:22:45,752 --> 00:22:49,394
that I don't even have the ability to know that we have

347
00:22:49,592 --> 00:22:53,374
other workspaces. If I haven't did the telephone workspace

348
00:22:53,422 --> 00:22:54,770
list command,

349
00:22:56,890 --> 00:23:00,246
it really is important to know that you have less visibility and to take

350
00:23:00,268 --> 00:23:04,230
that into consideration when you're considering using workspaces.

351
00:23:05,530 --> 00:23:09,306
A couple more things about workspaces. So from

352
00:23:09,408 --> 00:23:13,302
these terraform official documentation, it says that use workspaces

353
00:23:13,366 --> 00:23:16,938
to manage multiple non overlapping groups of resources with

354
00:23:16,944 --> 00:23:20,430
the same configuration. Okay, so it means,

355
00:23:20,500 --> 00:23:24,362
it suggests that these usages are qualified,

356
00:23:24,426 --> 00:23:28,334
right? Multiple environments, dev staging, stuff like that.

357
00:23:28,452 --> 00:23:31,946
Multiple regions like I showed in the previous example, or multiple accounts

358
00:23:31,978 --> 00:23:35,634
or subscriptions. Okay, cool. Now let's see.

359
00:23:35,832 --> 00:23:39,634
Also from the terraform official documentation it says that for

360
00:23:39,752 --> 00:23:43,902
different development stages like staging versus production,

361
00:23:44,046 --> 00:23:47,794
named workspaces are not suitable isolation

362
00:23:47,842 --> 00:23:52,934
mechanism for this scenario. So if

363
00:23:52,972 --> 00:23:56,194
you do go with workspaces, maybe I read it quote,

364
00:23:56,242 --> 00:23:59,494
I don't know, just make sure that you go into it with

365
00:23:59,532 --> 00:24:03,338
open eyes and you know what you're doing. And I

366
00:24:03,344 --> 00:24:07,194
think that we can all agree on at least one workspace usage. Both the

367
00:24:07,232 --> 00:24:10,922
documentation says that and other people that I worked

368
00:24:10,976 --> 00:24:14,400
with and showed me that they are doing it is

369
00:24:15,170 --> 00:24:18,574
when you have workspaces, you have a default workspace, this is

370
00:24:18,692 --> 00:24:21,982
the main one. And then if you create another one, you can call it whatever

371
00:24:22,036 --> 00:24:26,034
you want. This could be a side branch. And then you can test out

372
00:24:26,072 --> 00:24:29,922
any code that you want to introduce, see that everything works

373
00:24:29,976 --> 00:24:33,774
okay, and then apply this code to default

374
00:24:33,822 --> 00:24:36,930
workspace. So create a new workspace, do whatever you want,

375
00:24:37,000 --> 00:24:40,550
test it out, and then if call looks okay, these apply it to the

376
00:24:40,620 --> 00:24:44,054
default workspace. Okay, so to sum things

377
00:24:44,092 --> 00:24:47,414
up in regards of structuring your telephone code base these

378
00:24:47,452 --> 00:24:51,494
good thing of really thinking things through and planning

379
00:24:51,542 --> 00:24:54,570
ahead. And if you for example,

380
00:24:54,640 --> 00:24:58,406
take the first example that I showed you with the feature oriented

381
00:24:58,438 --> 00:25:01,754
one, then it allows small states set up and small

382
00:25:01,792 --> 00:25:05,534
state is a very good practices to have. And also the first

383
00:25:05,572 --> 00:25:08,766
example with the feature oriented is it really allows you to

384
00:25:08,788 --> 00:25:12,062
set up a terraform as a platform because that way you can

385
00:25:12,196 --> 00:25:15,970
let any team in your organization use terraform.

386
00:25:16,310 --> 00:25:20,418
Each team has their own control

387
00:25:20,504 --> 00:25:24,482
over these folder. Also in GitHub each

388
00:25:24,536 --> 00:25:28,262
folder has it is stated in the code

389
00:25:28,316 --> 00:25:31,746
owners so they can approve their own prs

390
00:25:31,778 --> 00:25:34,870
and stuff like that. So it really gives you flexibility,

391
00:25:35,210 --> 00:25:38,734
enables independence, and offloads responsibilities

392
00:25:38,802 --> 00:25:42,938
to others. The bad thing is that if you don't think

393
00:25:43,024 --> 00:25:47,146
and plan ahead then organizational changes could cause a

394
00:25:47,168 --> 00:25:50,986
need to restructure the code. And you don't want to restructure the code just

395
00:25:51,008 --> 00:25:54,542
because you didn't plan. If stuff evolved, great. But if

396
00:25:54,676 --> 00:25:58,366
you need to restructure just because you didn't plan it correctly, then it

397
00:25:58,388 --> 00:26:01,614
could be a bummer. Another bad

398
00:26:01,652 --> 00:26:05,018
thing is to use workspaces for the wrong reasons. I just spoke

399
00:26:05,034 --> 00:26:08,174
about it before, so just make sure you're

400
00:26:08,222 --> 00:26:11,842
doing it for the right reasons. And the ugly thing here is that

401
00:26:11,896 --> 00:26:15,458
if you structure the code in a way that will allow or

402
00:26:15,544 --> 00:26:19,494
enable huge states to occur, then this could

403
00:26:19,532 --> 00:26:22,646
lead to invalid dependencies. So it happened to

404
00:26:22,668 --> 00:26:26,406
me quite a lot that I did a change X and then I can a

405
00:26:26,428 --> 00:26:29,798
plan and then I saw in the plan it's going to change Y and I'm

406
00:26:29,814 --> 00:26:33,242
like what? I changed x not Y. So huge

407
00:26:33,296 --> 00:26:37,626
states could lead to it. So make sure you choose

408
00:26:37,728 --> 00:26:41,422
a structure that will allow smaller states has

409
00:26:41,476 --> 00:26:45,214
possible. The next thing I want to show you

410
00:26:45,412 --> 00:26:49,294
or talk about is the executing terraform. So make

411
00:26:49,332 --> 00:26:52,794
sure that youll always strive to

412
00:26:52,852 --> 00:26:56,354
remote execution because that way you don't need to

413
00:26:56,552 --> 00:26:59,650
set up local credentials, you don't set up local

414
00:26:59,720 --> 00:27:03,154
configurations, you paved better audit of

415
00:27:03,192 --> 00:27:06,946
who can what. So it is always great to have remote execution.

416
00:27:07,138 --> 00:27:11,394
You should run apply with telephone plan file

417
00:27:11,442 --> 00:27:14,806
so you can pass an argument of which file the

418
00:27:14,828 --> 00:27:18,626
plan file to run and then you know exactly what is getting applied.

419
00:27:18,738 --> 00:27:22,314
And you should set up a telephone timeout because I had

420
00:27:22,352 --> 00:27:25,994
cases where I ran auto scaling and the auto scaling was based

421
00:27:26,032 --> 00:27:30,346
on spot instances. So telephone just waited for the price to

422
00:27:30,368 --> 00:27:34,518
fall in the right. So it's

423
00:27:34,534 --> 00:27:37,470
not nice. I just need to wait and wait and wait and it's not nice.

424
00:27:37,540 --> 00:27:41,342
So set up a telephone timeout which makes sense to you.

425
00:27:41,476 --> 00:27:44,754
The bad thing is to execute the telephone locally so

426
00:27:44,792 --> 00:27:48,226
either your computer or a server because then you

427
00:27:48,248 --> 00:27:52,562
have no audits. It's not nice. And the ugly here is

428
00:27:52,616 --> 00:27:56,450
to execute locally and click

429
00:27:56,600 --> 00:28:00,326
control c while terraform is running. If you don't want

430
00:28:00,348 --> 00:28:04,406
to wait for the timeout, I understand, but it's best for you

431
00:28:04,428 --> 00:28:08,886
to just go and grab a cup of coffee or cocoa,

432
00:28:08,918 --> 00:28:12,714
cocoa, whatever, but it's not good.

433
00:28:12,832 --> 00:28:17,142
Control c while telephone is running could lead to disruptions

434
00:28:17,206 --> 00:28:20,254
in the state conflicts. It could really really get

435
00:28:20,292 --> 00:28:22,480
ugly. So don't do it.

436
00:28:23,490 --> 00:28:26,894
Okay? Practices enforcement so we

437
00:28:26,932 --> 00:28:30,478
talked about that. The most important part of every module, even if it's a

438
00:28:30,484 --> 00:28:34,106
private module, which is only going to be used internally,

439
00:28:34,218 --> 00:28:37,474
is readability and cleanliness of the code right? In order

440
00:28:37,512 --> 00:28:41,314
to keep things in check, in order to make sure that

441
00:28:41,352 --> 00:28:44,494
everything is clean and right and everyone has guidelines,

442
00:28:44,542 --> 00:28:48,310
then you should use enforcements. So these enforcements

443
00:28:49,610 --> 00:28:53,382
already happen on community modules, so you should

444
00:28:53,436 --> 00:28:56,786
also do them yourself on your internal modules.

445
00:28:56,898 --> 00:29:00,538
So this is example from the AWS auto scaling community

446
00:29:00,624 --> 00:29:04,022
module. As you can see on each pr there's

447
00:29:04,086 --> 00:29:08,214
a set of checklists that is being checked for the GitHub

448
00:29:08,262 --> 00:29:11,898
actions. So it checks if the contributor added

449
00:29:11,914 --> 00:29:15,518
documentation. If he formatted, he or she formatted all day,

450
00:29:15,604 --> 00:29:18,602
formatted the code, terraform,

451
00:29:18,666 --> 00:29:22,138
lint, telephone format, what else? End of file.

452
00:29:22,154 --> 00:29:26,014
So a lot of things that are being checked and it's really awesome to have

453
00:29:26,052 --> 00:29:29,870
these checks because these simple checks can easily remind developer

454
00:29:29,950 --> 00:29:33,700
to keep a high quality standard of pr as best as possible.

455
00:29:35,430 --> 00:29:39,406
Okay, so to sum things up in regards to practices enforcement,

456
00:29:39,518 --> 00:29:42,854
I tried to think about bad things to say about that. So maybe

457
00:29:42,892 --> 00:29:46,994
the bad thing will be, I don't know, it forces

458
00:29:47,042 --> 00:29:51,002
the developer to revisit the code and add more stuff.

459
00:29:51,136 --> 00:29:54,714
But it's not really a waste of time because it is good

460
00:29:54,752 --> 00:29:57,946
to add this stuff. It's not just on

461
00:29:57,968 --> 00:30:01,386
a whim. These are important things that we need to add and

462
00:30:01,408 --> 00:30:05,102
that's why it's good to add them. So I only have good things

463
00:30:05,156 --> 00:30:09,086
to say on practices enforcement. So youll should add

464
00:30:09,188 --> 00:30:13,610
pre commit or pre were linters for matters and logical checks,

465
00:30:13,770 --> 00:30:16,750
either through GitHub actions or CI pipeline checks.

466
00:30:16,830 --> 00:30:19,726
You should also, if you want, create a slack,

467
00:30:19,758 --> 00:30:23,858
but that actually tears you if there was a drift between

468
00:30:24,024 --> 00:30:26,642
the plan that you did and the actual environment.

469
00:30:26,786 --> 00:30:30,774
And speaking of actual environment, you should always

470
00:30:30,972 --> 00:30:34,562
make sure that the enforcement know or verifies

471
00:30:34,626 --> 00:30:38,918
that the master should always be your source of truth, your actual environment.

472
00:30:39,014 --> 00:30:43,194
So for example, in have when

473
00:30:43,232 --> 00:30:47,158
we push the code to GitHub, the GitHub

474
00:30:47,334 --> 00:30:51,514
check if tears were added and more stuff to come. And then

475
00:30:51,712 --> 00:30:54,800
once everything was cleared and everything is okay,

476
00:30:55,410 --> 00:30:59,022
it runs the plan for me. I see that everything looks good and then I

477
00:30:59,076 --> 00:31:03,554
do Atlantis apply because we use Atlantis for the actual run.

478
00:31:03,672 --> 00:31:06,450
Atlantis apply does two things.

479
00:31:06,600 --> 00:31:10,418
One, it actually merges these code and applies it

480
00:31:10,504 --> 00:31:14,542
that way. I know that what applied is what merged to main branch

481
00:31:14,606 --> 00:31:19,622
and that way. This is awesome and really it

482
00:31:19,676 --> 00:31:23,670
keeps the situation as it should be. Main is the actual environment

483
00:31:24,170 --> 00:31:28,242
on the right. I put you some open resources, enforcement and helpers

484
00:31:28,306 --> 00:31:31,622
that you can use after things talk, which you're going to sit

485
00:31:31,676 --> 00:31:34,826
down and read about enforcements and

486
00:31:34,848 --> 00:31:38,106
how to do it. So these are a few checks and a

487
00:31:38,128 --> 00:31:42,662
few tools that will help you with this enforcement journey

488
00:31:42,726 --> 00:31:46,462
and set up. Okay, so we talked about

489
00:31:46,516 --> 00:31:49,774
a lot of things here, right? I showed you a lot of things you can

490
00:31:49,812 --> 00:31:53,470
do in telephone or think about telephone. So maybe stuff

491
00:31:53,540 --> 00:31:57,074
will stay with you, maybe not. But the thing that I really, really want

492
00:31:57,112 --> 00:32:01,006
you to think about and stay with youll after this presentation

493
00:32:01,118 --> 00:32:04,626
is to think and ask yourself, when you work with

494
00:32:04,648 --> 00:32:08,614
terraform, how do you envision the infrastructure and the company needs?

495
00:32:08,732 --> 00:32:11,734
Because you should really think things

496
00:32:11,852 --> 00:32:15,622
through. Planning ahead will allow you to enable others on their

497
00:32:15,676 --> 00:32:19,574
terraform journey. You will be able to set up guidelines

498
00:32:19,622 --> 00:32:23,690
and best practices of your own, like tagging, usage and whatnot.

499
00:32:24,830 --> 00:32:28,474
That way you will make sure that everything is

500
00:32:28,512 --> 00:32:31,914
utilized in an organized way

501
00:32:31,952 --> 00:32:35,870
and an orderly fashion way. And this is what we need in a company,

502
00:32:35,940 --> 00:32:39,422
right? We need structure and we need to make sure everything is aligned because

503
00:32:39,476 --> 00:32:43,314
it's better. We can really keep things

504
00:32:43,352 --> 00:32:46,914
in check and we can really make sure that everything is

505
00:32:46,952 --> 00:32:50,834
manageable that way. So take into consideration your

506
00:32:50,872 --> 00:32:54,590
use cases and your pain points. Terraform constraints,

507
00:32:54,750 --> 00:32:58,358
where do you see yourself and your company in

508
00:32:58,364 --> 00:33:01,714
the long tears and then plan accordingly.

509
00:33:01,842 --> 00:33:05,558
And if we wouldn't plan ahead,

510
00:33:05,644 --> 00:33:08,886
we wouldn't be able to set up terraform as a platform as we

511
00:33:08,908 --> 00:33:12,394
did here at Wix. So this is one take but of

512
00:33:12,432 --> 00:33:15,818
it. And even if you're a startup, you should still

513
00:33:15,904 --> 00:33:19,834
think about scales, think about how should you address and

514
00:33:19,872 --> 00:33:23,526
prepare for changes to come. And then you will be able to utilize

515
00:33:23,558 --> 00:33:25,840
terraform in the best way possible.

516
00:33:26,850 --> 00:33:30,382
So like any other tool, don't use telephone in an

517
00:33:30,436 --> 00:33:33,920
ad hoc mindset. Plan for your future needs.

518
00:33:34,370 --> 00:33:37,890
Because I spoke about tixen Goa before.

519
00:33:37,960 --> 00:33:40,340
I want to quote him on another thing.

520
00:33:40,870 --> 00:33:44,514
Programs evolve and code changes. And it is

521
00:33:44,552 --> 00:33:48,230
really rare that you write telephone code and it stays like that

522
00:33:48,300 --> 00:33:51,894
because this is not how projects work.

523
00:33:52,012 --> 00:33:55,254
If that was the case, then we wouldn't be talking here on

524
00:33:55,292 --> 00:33:59,594
telephone practices and you would only use it once in

525
00:33:59,632 --> 00:34:03,942
one way and that's that. But we will always have projects.

526
00:34:04,006 --> 00:34:07,642
And because businesses went to improve and the project

527
00:34:07,696 --> 00:34:11,578
is the way to move from the current state to the next desired

528
00:34:11,674 --> 00:34:15,454
state. Changing from one state to another is

529
00:34:15,572 --> 00:34:19,214
a project and by nature project means change and these

530
00:34:19,252 --> 00:34:22,862
code is also change constantly so think about your

531
00:34:22,916 --> 00:34:26,702
structure and how you structure things and allow projects

532
00:34:26,766 --> 00:34:30,194
to evolve and get introduced to your environment and to

533
00:34:30,232 --> 00:34:33,454
your company. Thank you so much for listening.

534
00:34:33,582 --> 00:34:36,806
I hope that it was beneficial for you and I want

535
00:34:36,828 --> 00:34:40,374
to do a quick shout out for some people from Wix that

536
00:34:40,412 --> 00:34:43,606
helped me liberal that helped with the

537
00:34:43,708 --> 00:34:46,658
visuals of the presentation and the logical flow.

538
00:34:46,754 --> 00:34:51,320
Without her it wouldn't look like that so thanks for her and

539
00:34:51,690 --> 00:34:55,362
other people. Ilya Schenking from my team ran Schneider,

540
00:34:55,426 --> 00:34:58,854
Oprah Velez and thermal cupak they all pitched in and gave me

541
00:34:58,892 --> 00:35:02,142
some inputs so thank you guys and again thank

542
00:35:02,196 --> 00:35:05,994
you all for listening and if you want to approach

543
00:35:06,042 --> 00:35:09,774
me on LinkedIn or Twitter or mail and consult about telephone or

544
00:35:09,812 --> 00:35:13,022
other sre aspects I would be more than happy

545
00:35:13,076 --> 00:35:14,380
to help. Thanks a lot.

