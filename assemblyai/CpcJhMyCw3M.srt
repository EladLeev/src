1
00:00:27,810 --> 00:00:31,270
Hello everybody, glad to be here with you today. I will be speaking

2
00:00:31,340 --> 00:00:34,806
about CrowdSec. CrowdSec is an open source security engine that can

3
00:00:34,828 --> 00:00:38,806
help detect and respond to attacks in real time. The project then aims at

4
00:00:38,828 --> 00:00:42,294
building a global crowdsourced reputation system around it.

5
00:00:42,412 --> 00:00:46,642
Why did we created CrowdSec? Because we do believe that a few elements

6
00:00:46,706 --> 00:00:50,318
are in the favor of the attacker. The time time is in favor of

7
00:00:50,324 --> 00:00:53,726
the attacker. The delay between the publication of a vulnerability and

8
00:00:53,748 --> 00:00:57,626
a weaponized exploit is often way shorter than the delay

9
00:00:57,658 --> 00:01:01,018
between publication of said vulnerability and the application of patch

10
00:01:01,114 --> 00:01:04,786
in all the systems. Then unfiltered access. As we have

11
00:01:04,808 --> 00:01:08,226
seen in higher high hackers recently, a lot

12
00:01:08,248 --> 00:01:11,646
of compromise are done through access and applications

13
00:01:11,678 --> 00:01:15,426
that are not filtered, which makes firewall useless in a lot

14
00:01:15,448 --> 00:01:18,422
of situation, or at least a firewall as we know it,

15
00:01:18,556 --> 00:01:22,710
then the perimeter with the cause of public cloud

16
00:01:22,780 --> 00:01:26,038
and various architectures such as internets, et cetera. It's a

17
00:01:26,044 --> 00:01:30,178
lot harder to have one central point of control for your architecture and to

18
00:01:30,204 --> 00:01:33,562
filter out the malevolent traffic. And last but not least,

19
00:01:33,616 --> 00:01:37,882
money. While hackers are using their own time, stolen resources and free

20
00:01:37,936 --> 00:01:42,106
or stolen software. In order to do this, defenders, they need to

21
00:01:42,288 --> 00:01:45,886
have teams, licenses and maintain systems. And last but not

22
00:01:45,908 --> 00:01:49,118
least, when you are attacking you need to be right only once, while when

23
00:01:49,124 --> 00:01:51,680
you are defending you need to be right every time.

24
00:01:52,450 --> 00:01:55,966
So we do believe that the castle strategy is like a Walkman needed

25
00:01:55,988 --> 00:02:00,114
CTO from the thats every asset on the information system

26
00:02:00,232 --> 00:02:03,874
needs to be able to defend itself on its own. And we

27
00:02:03,912 --> 00:02:07,134
do take the bet that HTTP is the most common language

28
00:02:07,262 --> 00:02:10,774
spoken by both the most vulnerable Unix as well as

29
00:02:10,812 --> 00:02:14,498
the latest smartwatch. And this is why we created protect

30
00:02:14,514 --> 00:02:18,470
and we aim at creating the ways of firewalls. So we combine local

31
00:02:18,540 --> 00:02:22,006
behavior that is created and available in the open source

32
00:02:22,038 --> 00:02:25,494
software with a global reputation system that we can redistribute

33
00:02:25,542 --> 00:02:29,306
and share with the community by aggregating signals that are sent by all

34
00:02:29,328 --> 00:02:32,686
the users all around the world. So it's a software built by

35
00:02:32,708 --> 00:02:36,682
secops for DevOps. How do we aim at achieving

36
00:02:36,746 --> 00:02:40,058
this? So crowdsec itself, the open source software,

37
00:02:40,154 --> 00:02:43,534
can be seen a bit like as a fail to ban. It's something that is

38
00:02:43,572 --> 00:02:46,734
going to read logs in order to detect attack patterns and then

39
00:02:46,772 --> 00:02:50,306
react to those. When we speak about reading logs here, it can

40
00:02:50,328 --> 00:02:53,778
be things as simple as a log file on a web server, but it can

41
00:02:53,784 --> 00:02:57,378
be more or less any stream of information that we consider being logs. It can

42
00:02:57,384 --> 00:03:01,394
be your AWS, cloud trail or anything then those logs

43
00:03:01,442 --> 00:03:04,834
need to be normalized and reached before being matched to scenarios.

44
00:03:04,882 --> 00:03:08,150
And this is where the community aspect starts to kick in is that

45
00:03:08,220 --> 00:03:11,718
besides being under permissive open source license,

46
00:03:11,894 --> 00:03:15,258
CrowdSec aims at building a community altogether. So we have

47
00:03:15,264 --> 00:03:18,378
a hub where people can find scenarios and parsers that are

48
00:03:18,384 --> 00:03:21,958
fitting their needs either because they need to cover a given technical stack

49
00:03:22,054 --> 00:03:24,826
or because they need to address a specific business need.

50
00:03:24,928 --> 00:03:28,286
Once those logs have being normalized and a pattern for example thats been

51
00:03:28,308 --> 00:03:31,886
detected in a scenario user wants to react to the attacks that

52
00:03:31,908 --> 00:03:35,454
it just detected and we do believe thats first

53
00:03:35,492 --> 00:03:39,106
of all you don't react at the same place where you detect most of the

54
00:03:39,128 --> 00:03:42,578
time. And second of all how you react to a given attack will vary a

55
00:03:42,584 --> 00:03:46,114
lot depending on your environment, either technical or

56
00:03:46,152 --> 00:03:49,606
business. For example, someone doing ecommerce is not going to react the same

57
00:03:49,628 --> 00:03:53,170
way as an attack as someone that is managing mail servers.

58
00:03:53,330 --> 00:03:57,174
So with the approach of the bouncers which are software components thats

59
00:03:57,212 --> 00:04:00,658
can react to a given attack, the user can choose. Sometimes you want to ban

60
00:04:00,674 --> 00:04:03,926
an IP, sometimes you will want to simply present a captcha to a user

61
00:04:03,958 --> 00:04:07,514
to ensure that he's not a robot. And in other more

62
00:04:07,552 --> 00:04:10,954
corporate environment you might want to reinforce the

63
00:04:10,992 --> 00:04:14,686
security of the target rather than trying to can the offending IP that might

64
00:04:14,708 --> 00:04:18,458
be part of a botnet. And so your action might be enforce multifactor

65
00:04:18,474 --> 00:04:21,258
authentication on the user that is being targeted.

66
00:04:21,434 --> 00:04:24,526
And last but not least, and this is the main point of

67
00:04:24,548 --> 00:04:28,494
the project, is that you share your own sightings. Don't be afraid,

68
00:04:28,542 --> 00:04:31,986
logs are not shared. The only information that is shared is that whenever you are

69
00:04:32,008 --> 00:04:35,794
blocking an IP you are going to share with us. I blocked this IP at

70
00:04:35,832 --> 00:04:39,122
this time because it triggered this specific scenario

71
00:04:39,266 --> 00:04:42,950
and this is the data that is going to be then crunched and

72
00:04:43,020 --> 00:04:46,166
redistributed to all the users once it

73
00:04:46,188 --> 00:04:49,910
has been curated. So that if you are using for example WordPress specific

74
00:04:49,980 --> 00:04:53,706
scenarios, you are going to be fed in real time with the ips that we

75
00:04:53,728 --> 00:04:57,494
have seen attacks other WordPress and have been reported attacking other WordPress

76
00:04:57,542 --> 00:05:01,766
in a reliable way. How does the software architecture

77
00:05:01,798 --> 00:05:05,054
itself work? So as fate to band, we aim at doing something with a very

78
00:05:05,092 --> 00:05:08,670
low technical barrier in terms of installation. However every

79
00:05:08,740 --> 00:05:12,586
component are all staying together through an API which enables

80
00:05:12,618 --> 00:05:16,906
you to have more distributed architectures as we are already seeing users

81
00:05:16,938 --> 00:05:21,042
using it. So the crowdsec agent itself here

82
00:05:21,096 --> 00:05:24,862
is in charge of passing log and reaching them and matching them against scenario.

83
00:05:24,926 --> 00:05:28,374
And the local API here is in charge of taking decision based

84
00:05:28,412 --> 00:05:32,390
on alerts it's received and giving back those decisions to

85
00:05:32,460 --> 00:05:36,246
the bouncers and staying them with a central API. Bouncers can

86
00:05:36,268 --> 00:05:39,494
be at Vius level of your application stack because we aim at being able

87
00:05:39,532 --> 00:05:43,066
to speak to a lot of values personas. So for example you can have

88
00:05:43,088 --> 00:05:46,826
a Crowdsec stack bouncer when you are going to inject Captcha to

89
00:05:46,848 --> 00:05:50,106
the users that has been cooked doing batting. While you might want as

90
00:05:50,128 --> 00:05:53,946
well to filter directly at the firewall level if you are protecting

91
00:05:53,978 --> 00:05:57,006
larger infrastructures and you are as well pushing the

92
00:05:57,028 --> 00:06:00,206
signals. So this metadata I was just staying about to the

93
00:06:00,228 --> 00:06:03,658
central APIs that is going in exchange to share back with

94
00:06:03,684 --> 00:06:07,518
you the signals and the reputation feeds.

95
00:06:07,694 --> 00:06:11,422
The behavior engine itself aims at being able to detect various

96
00:06:11,486 --> 00:06:14,686
scenarios. You can detect things as of you such as brute

97
00:06:14,718 --> 00:06:18,214
force, et cetera, but the engine is powerful enough to allow

98
00:06:18,252 --> 00:06:21,954
you to detect more advanced attacks such as distributed

99
00:06:22,002 --> 00:06:24,802
in your service web vulnerability scans,

100
00:06:24,866 --> 00:06:28,658
specific targeted exploitation or even more business focused

101
00:06:28,674 --> 00:06:32,086
aspects such as credit card or credential stuffing.

102
00:06:32,278 --> 00:06:35,974
The software itself is true open source software under MIT license

103
00:06:36,022 --> 00:06:39,114
as free as it can be. And we are aiming at building here a true

104
00:06:39,152 --> 00:06:42,366
community and not simply pushing open resources software to

105
00:06:42,388 --> 00:06:46,270
users. So the technical barrier is as low as possible and

106
00:06:46,340 --> 00:06:50,206
we might created contribution around us. We already succeed and

107
00:06:50,228 --> 00:06:54,074
manage into having external contribution in things such as scenarios,

108
00:06:54,122 --> 00:06:57,998
parser or even bouncers. A short demo often being worth

109
00:06:58,084 --> 00:07:02,450
1000 slides. Let's directly jump into a practical example of

110
00:07:02,520 --> 00:07:06,146
using and deploying crowdsec. So here what I'm going to do is

111
00:07:06,168 --> 00:07:09,938
that I'm going to deploy CrowdSec on a very typical setup. On the top it's

112
00:07:09,954 --> 00:07:13,542
a Linux machine with Nginx, MySQL, SSH and

113
00:07:13,596 --> 00:07:17,526
so on. So simply installing crowdsec from the repositories as you

114
00:07:17,548 --> 00:07:21,178
are going to see the setup is fairly automated so that the

115
00:07:21,264 --> 00:07:24,854
technical barrier for the user is as low as possible. The setup

116
00:07:24,902 --> 00:07:28,266
process through the wizard is going to identify the services that are

117
00:07:28,288 --> 00:07:32,342
deployed on my machine, Nginx, SSH, MySQL and debian

118
00:07:32,406 --> 00:07:35,914
distribution. And for each of those it's going to spot the logs

119
00:07:36,042 --> 00:07:39,566
and install what we call collection which is a current and table of

120
00:07:39,588 --> 00:07:43,802
configuration to help you CTO protect this attacks. I can immediately

121
00:07:43,866 --> 00:07:47,266
out of the box take a look at the logs and we are going to

122
00:07:47,288 --> 00:07:51,454
simulate an attack on the web server using a good old Nikto

123
00:07:51,502 --> 00:07:54,626
which is a web application scanner which might not

124
00:07:54,648 --> 00:07:58,482
be very modern but has a very typical behavior of a web

125
00:07:58,536 --> 00:08:01,926
application vulnerability scanner. Here I can see that the tool is

126
00:08:01,948 --> 00:08:05,494
being detected for coming with a non bizuzargent, trying to access a lot

127
00:08:05,532 --> 00:08:09,698
of files that don't exist, or trying to crawl non static resources,

128
00:08:09,794 --> 00:08:13,082
or even access sensitive files. So here

129
00:08:13,136 --> 00:08:16,666
through CSLI, which is the main tool for system administrator to

130
00:08:16,688 --> 00:08:20,134
Internet through Cross Sec in the command line, we can see in the decision

131
00:08:20,182 --> 00:08:23,520
that MyAP should be scanned for a few hours.

132
00:08:24,210 --> 00:08:27,694
First of all, because of this bad user agent, we can

133
00:08:27,732 --> 00:08:31,726
as well look at the other alerts that were triggered. And here we can

134
00:08:31,748 --> 00:08:35,186
see the various alerts and we can even deep dive into a specific

135
00:08:35,288 --> 00:08:39,154
alert. For example, let's say I want to see more

136
00:08:39,192 --> 00:08:42,434
into detail what happened and why the sensitive file scenario was

137
00:08:42,472 --> 00:08:45,442
triggered, which is here alert number five.

138
00:08:45,576 --> 00:08:48,998
And here we can see for example the value sensitive files that were tried to

139
00:08:49,004 --> 00:08:52,310
be accessed on my web server. However, if I try to access

140
00:08:52,380 --> 00:08:55,206
to my web server as an attacker, I still can, right,

141
00:08:55,308 --> 00:08:59,046
because CrowdSec is only in charge of the detection. So what I'm going to

142
00:08:59,068 --> 00:09:02,934
do is that I'm going to jump into the hub and find a bouncer

143
00:09:02,982 --> 00:09:06,694
that is suitable to my technical environment here. As I'm using Nginx,

144
00:09:06,742 --> 00:09:10,098
I'm going to use the NgInX bouncer which leveraging UI

145
00:09:10,134 --> 00:09:14,698
integration within Nginx to provide the blocking capabilities.

146
00:09:14,874 --> 00:09:19,006
I'm simply going to download the provided table and

147
00:09:19,108 --> 00:09:22,570
deploy it on my machine. So I can now simply

148
00:09:22,650 --> 00:09:25,962
restart my NgInx service which

149
00:09:26,116 --> 00:09:29,678
thanks to the bouncer edition is now going to allow NgInX whenever

150
00:09:29,694 --> 00:09:32,430
it is an ip that it doesn't know to interrogate,

151
00:09:32,590 --> 00:09:35,954
protect local API and ask whether or not it should let this

152
00:09:35,992 --> 00:09:39,406
ip go through. So of course now if again

153
00:09:39,448 --> 00:09:42,786
I try from my attacks point of view to access to my website, I'm blocked

154
00:09:42,818 --> 00:09:46,086
and I get a four or three because my ip is

155
00:09:46,108 --> 00:09:50,286
still bad. So what I'm going to do is that I'm going to remove

156
00:09:50,338 --> 00:09:53,866
the existing decision on my ip. And here now we can see

157
00:09:53,888 --> 00:09:57,286
that I will be able to access again to my website as I remove

158
00:09:57,318 --> 00:10:01,302
the decision. One thing is that I configure

159
00:10:01,366 --> 00:10:04,954
my iptables firewall to log establish

160
00:10:05,002 --> 00:10:08,266
or attempting to be established connection. And this is a great insight

161
00:10:08,298 --> 00:10:11,726
from a security point of view. So again we are going to jump into the

162
00:10:11,748 --> 00:10:15,714
hub and find collections that will allow us to take

163
00:10:15,752 --> 00:10:19,234
advantage of this. So of course there's a collection for

164
00:10:19,272 --> 00:10:23,246
iptables, it includes parser for iptable

165
00:10:23,278 --> 00:10:27,074
logs and as well a scenario that is going to allow me to detect

166
00:10:27,122 --> 00:10:30,802
port can and as you can see here installing

167
00:10:30,866 --> 00:10:34,342
a new collection is as simple as using

168
00:10:34,396 --> 00:10:38,214
CSLI to install the collection. This aims here at reflecting the fact

169
00:10:38,252 --> 00:10:41,914
that your technical stack are changing faster and faster. And so

170
00:10:41,952 --> 00:10:45,626
you need to be able CTo easily adapt security software to

171
00:10:45,648 --> 00:10:48,966
new changes in your infrastructure. And now that we restarted

172
00:10:48,998 --> 00:10:52,646
the service, we can simply launch a port scan

173
00:10:52,678 --> 00:10:56,394
with a good old Nmap and see that now CrowdSec

174
00:10:56,442 --> 00:11:00,266
is able to detect this kind of behavior. Installing the collection taught crowdsec

175
00:11:00,298 --> 00:11:03,754
how to understand these logs and how to detect these kind of patterns.

176
00:11:03,802 --> 00:11:06,954
So it's simply an example to show the evolutivity

177
00:11:07,002 --> 00:11:10,018
of the software. And now my ip again is can, but this time for a

178
00:11:10,024 --> 00:11:13,794
different reason. And again trying to access Nginx is going to stop us.

179
00:11:13,912 --> 00:11:17,362
One more thing that I want to showcase is visualization, right?

180
00:11:17,496 --> 00:11:21,062
Is thats we know that the dashboard is something that is

181
00:11:21,196 --> 00:11:25,126
sometimes or often missing in open source software and it's very important for

182
00:11:25,148 --> 00:11:28,662
some users to be able to have a visualization of the data.

183
00:11:28,796 --> 00:11:32,386
Here we are using metabase. Metabase is a great open source software,

184
00:11:32,498 --> 00:11:35,866
a bit like, let's say key banner or something like this for those of you

185
00:11:35,888 --> 00:11:39,494
that are not familiar with it, that allows you to create fancy dashboards.

186
00:11:39,542 --> 00:11:43,418
And we are using metabase in combination with Docker

187
00:11:43,514 --> 00:11:46,874
to simply being able to deploy out of the box some fancy

188
00:11:46,922 --> 00:11:50,446
dashboards for the user to see the activity of timeline and

189
00:11:50,468 --> 00:11:54,254
see what is going on. Metabase is now being deployed and we can

190
00:11:54,292 --> 00:11:57,806
simply access it through the web interface.

191
00:11:57,998 --> 00:12:01,186
Credentials are provided and as you will see, it gives us a

192
00:12:01,208 --> 00:12:04,866
very good synthetic view of the activity of the machine. So of course there is

193
00:12:04,888 --> 00:12:08,406
not much activity to be seen right now because we simply and

194
00:12:08,428 --> 00:12:12,294
just deployed the machine and we can see our

195
00:12:12,332 --> 00:12:15,654
attack from IP. And funny enough, another IP attack that's during the

196
00:12:15,692 --> 00:12:18,998
demo, we can see the timeline, we can

197
00:12:19,004 --> 00:12:22,060
see the kind of attacks, the sources of the attack and so on.

198
00:12:23,790 --> 00:12:27,194
One more thing that I want to showcase is that we do know that

199
00:12:27,312 --> 00:12:31,462
cause positive are something that is very often very frightening for users.

200
00:12:31,606 --> 00:12:35,086
And CrowdSec has the ability to work on call logs as

201
00:12:35,108 --> 00:12:38,526
it does on could logs. So it provide us the ability, whenever you are

202
00:12:38,548 --> 00:12:42,494
trying out CrowdSec or writing your own scenarios, to place those

203
00:12:42,532 --> 00:12:45,806
scenarios on past logs and see whether it would have led to false

204
00:12:45,838 --> 00:12:49,134
positive, false negative, or simply have an overview

205
00:12:49,182 --> 00:12:52,482
of the activity. So here I'm going to ingest within

206
00:12:52,536 --> 00:12:56,742
cross sec my log of 2019 of my web server within

207
00:12:56,796 --> 00:13:00,502
the existing instance. And as

208
00:13:00,556 --> 00:13:04,546
we see now, the attacks that are being detected

209
00:13:04,578 --> 00:13:06,806
are the attacks that were happening in January 2019.

210
00:13:06,828 --> 00:13:10,150
And so, of course, if we jump back

211
00:13:10,220 --> 00:13:13,802
to our dashboard right now, we are going to see, and we change

212
00:13:13,856 --> 00:13:17,354
the period time to be last three years, we are

213
00:13:17,392 --> 00:13:20,906
going to see the activity that was ingested, and here we see all my

214
00:13:20,928 --> 00:13:24,430
could events being ingested and the timeline being reconstituted,

215
00:13:24,770 --> 00:13:28,158
and here we have the visibility, et cetera. So I guess it's a

216
00:13:28,164 --> 00:13:32,186
great way for users to familiarize themselves with the software.

217
00:13:32,298 --> 00:13:35,458
One last thing I want to show is the metrics here.

218
00:13:35,624 --> 00:13:39,266
Okay, here's through the command line. But actually, CrowdSec is

219
00:13:39,288 --> 00:13:43,010
instrumented with Prometheus, which is a tool that

220
00:13:43,080 --> 00:13:46,274
ops people love. And it gives us some good metrics on what is going on

221
00:13:46,312 --> 00:13:49,798
here. For example, we can see the values, resources of logs that we are

222
00:13:49,804 --> 00:13:53,206
reading, how many lines are read, how many lines are passed, how many lines are

223
00:13:53,228 --> 00:13:56,530
even being connected into budgets, which are existing scenarios,

224
00:13:56,610 --> 00:14:00,146
giving you a good idea of whether your configuration is appropriate

225
00:14:00,178 --> 00:14:03,974
or not. And same goes for all the components.

226
00:14:04,102 --> 00:14:07,606
Now that we saw the open source software part, what are we trying to achieve

227
00:14:07,638 --> 00:14:11,226
here? We're trying to create a CsCTI crowdsourced cyber threat

228
00:14:11,258 --> 00:14:14,782
intelligence. We do believe that not only running

229
00:14:14,836 --> 00:14:18,106
honeybot, but having thousands of real users,

230
00:14:18,218 --> 00:14:21,886
exposing real services and facing real attacks every days is

231
00:14:21,908 --> 00:14:25,850
going to significantly increase the efficiency and the accuracy

232
00:14:25,930 --> 00:14:29,118
of our cyber threat intelligence approach.

233
00:14:29,214 --> 00:14:32,306
And this is what we want to do with thousands of users. We are going

234
00:14:32,328 --> 00:14:36,014
to create a very accurate CTI mechanism.

235
00:14:36,142 --> 00:14:39,478
And so how do we then mix all this information together?

236
00:14:39,564 --> 00:14:42,662
Because why do we believe that the crowd is so important?

237
00:14:42,796 --> 00:14:46,466
Because context is key, and context can be gained through the crowdsec.

238
00:14:46,578 --> 00:14:50,086
An attack is something that is very time dependent. Can IP that is

239
00:14:50,108 --> 00:14:53,754
malevolent right now was legitimate a few days, a few hours. A few

240
00:14:53,792 --> 00:14:57,306
weeks ago, it was a legitimate asset that most likely got

241
00:14:57,328 --> 00:15:00,966
hacked, is now taking part into attacks. And once a legitimate

242
00:15:00,998 --> 00:15:03,926
owner will be made aware of the behavior of his asset,

243
00:15:03,958 --> 00:15:06,894
he's going to clean up his mess, and the IP is going to become good

244
00:15:06,932 --> 00:15:10,890
again. That's why the crowd is so important, in order to evaluate

245
00:15:10,970 --> 00:15:14,510
who's good and who's bad at a given time. And currently, we do consider

246
00:15:14,580 --> 00:15:18,434
that an IP that we didn't see attacking for 72

247
00:15:18,472 --> 00:15:21,902
hours are going to became good again. Being able to curate

248
00:15:21,966 --> 00:15:24,962
all the reports from the user in real time is a real change here.

249
00:15:25,016 --> 00:15:28,558
How do we deal with false positive? How do we deal with poisoning?

250
00:15:28,654 --> 00:15:32,246
What is happening here is that the users thats are participating in

251
00:15:32,268 --> 00:15:35,606
the network are given a trust rank. It's based on things that are hard

252
00:15:35,628 --> 00:15:39,126
to fake. It might be things such as persistency. For how

253
00:15:39,148 --> 00:15:42,634
long have you been sending information? Or consistency? Do the IP to

254
00:15:42,672 --> 00:15:45,994
report are being actively reported by other users? Are they being

255
00:15:46,032 --> 00:15:49,258
reported by users with higher trust rank? And so on. So this is

256
00:15:49,264 --> 00:15:51,990
a mechanism for us to fight against poisoning.

257
00:15:52,150 --> 00:15:55,834
And then as well we have our own omnipotent network. At the beginning

258
00:15:55,882 --> 00:15:59,210
it was a way for us to bootstrap the consensus chamber.

259
00:15:59,290 --> 00:16:02,814
And now it has all used for two purpose. To being

260
00:16:02,852 --> 00:16:06,818
able CTO artificially increase our presence in some part of Internet or some part of

261
00:16:06,824 --> 00:16:10,702
the network, or to being able to fill in the technological

262
00:16:10,766 --> 00:16:14,862
gaps that we might have if tomorrow there is, for example, a dramatic vulnerability

263
00:16:14,926 --> 00:16:18,374
that comes out on Drupal. Our honeypot network will allow us to

264
00:16:18,412 --> 00:16:21,894
easily deploy hundreds of vulnerable machines very

265
00:16:21,932 --> 00:16:26,338
quickly amongst various public clouds in order to be able to capture emergent

266
00:16:26,514 --> 00:16:30,146
signals or their emergence threat. Then we have the canaries.

267
00:16:30,258 --> 00:16:34,074
Canaries. It's an analogy with the canaries in the mine and it's something that is

268
00:16:34,112 --> 00:16:37,206
part both in circumstances and in the open source software.

269
00:16:37,318 --> 00:16:40,394
It's first of all a promise for the user of

270
00:16:40,432 --> 00:16:44,086
dealing with false positive easily. You can tell the user out of the box.

271
00:16:44,128 --> 00:16:47,534
You are never ever going to ban Google's SEO boat or your

272
00:16:47,572 --> 00:16:50,970
PSP because of crotch, because are part of the whitelist.

273
00:16:51,050 --> 00:16:54,442
And for us it's a good way to fight against false positive and

274
00:16:54,516 --> 00:16:58,034
more specifically to be able to identify easily which

275
00:16:58,232 --> 00:17:01,422
scenarios created by the community are subject to false positive.

276
00:17:01,486 --> 00:17:04,862
And a good way as well to fight attempts of poisoning.

277
00:17:05,006 --> 00:17:08,706
Predictive algorithm is a way for us to address the

278
00:17:08,728 --> 00:17:12,514
thats that are under the radar. A lot of groups are using value assets,

279
00:17:12,562 --> 00:17:15,686
CTO being able to perform the attack. One ip is going to come here,

280
00:17:15,708 --> 00:17:18,278
do the scooting or fingerprinting of your web application.

281
00:17:18,444 --> 00:17:21,750
Another one is going to exploit the vulnerability, one shot and a third one

282
00:17:21,820 --> 00:17:25,466
is going to be able to access the backdoor. And the predicted algorithm based

283
00:17:25,488 --> 00:17:29,146
on the huge amount of data that we're dealing with, aims at being able to

284
00:17:29,168 --> 00:17:32,910
identify the low signal and aggregate them together to identify

285
00:17:33,250 --> 00:17:36,490
more advanced actors. These are the various

286
00:17:36,570 --> 00:17:40,686
mechanisms that allows us to lead to this reputation database and how we

287
00:17:40,708 --> 00:17:44,794
can have a consensus curate the data and then redistribute

288
00:17:44,842 --> 00:17:48,226
it to the community. In case my accent didn't give me

289
00:17:48,248 --> 00:17:51,426
away yet, we are french and so GDPR and data privacy is

290
00:17:51,448 --> 00:17:55,106
a big topic here. CrowdSec never ever sends your log to

291
00:17:55,128 --> 00:17:58,306
the platform. Your logs are never exported to us. The only information

292
00:17:58,408 --> 00:18:01,922
that you give us is the ips that you decide to block the scenario

293
00:18:01,986 --> 00:18:05,126
and the timestamp. And this is everything we need to perform this

294
00:18:05,148 --> 00:18:08,774
consensus and then redistribute the information. CTo the network. You might

295
00:18:08,812 --> 00:18:12,966
legitimately ask what is our monetization and

296
00:18:12,988 --> 00:18:16,338
what is our business model? So it will be on one side, fleet features

297
00:18:16,354 --> 00:18:19,818
for people managing huge fleets of a CrowdSec installation,

298
00:18:19,954 --> 00:18:23,774
as well as things such as self monitoring. And most

299
00:18:23,812 --> 00:18:27,274
of all, and this is the corner case here, it's API

300
00:18:27,322 --> 00:18:31,102
access. People that want to be able to access the reputation database without

301
00:18:31,156 --> 00:18:34,734
contribute to it. Thank you very much for your time. Hope you enjoyed the

302
00:18:34,772 --> 00:18:38,602
presentation and hope to see you soon. Either hop into the GitHub

303
00:18:38,666 --> 00:18:41,662
on thats course on GitHub.com. Find us. See you,

