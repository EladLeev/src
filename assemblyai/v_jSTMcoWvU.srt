1
00:00:24,410 --> 00:00:27,670
Hello everyone, welcome to Con 42.

2
00:00:27,820 --> 00:00:31,110
This talk is about chaos engineering for developers

3
00:00:31,610 --> 00:00:35,042
because we believe that chaos engineering is not just sre

4
00:00:35,106 --> 00:00:38,694
thing and even software developers, while designing or

5
00:00:38,732 --> 00:00:42,438
writing writing code could think chaos, or rather

6
00:00:42,524 --> 00:00:46,118
should think chaos while software development because

7
00:00:46,284 --> 00:00:49,494
that helps us build real silence through

8
00:00:49,532 --> 00:00:53,198
chaos. So I'll give a quick intro about

9
00:00:53,364 --> 00:00:56,890
myself. My name is Dheeraj.

10
00:00:57,050 --> 00:01:01,310
I work as a software engineer at Amazon Web Services and

11
00:01:01,380 --> 00:01:04,794
in Amazon Web Services, which is popularly known as AWS.

12
00:01:04,842 --> 00:01:08,942
I work with the Auroradb team, and in Auroradb I work with the storage

13
00:01:09,086 --> 00:01:12,606
part of Auroradb which is like a multi tenant distributed auto

14
00:01:12,638 --> 00:01:15,682
scale out storage platform. And apart from

15
00:01:15,736 --> 00:01:19,734
work I am a contributor and maintainer in an open search projects there.

16
00:01:19,772 --> 00:01:23,142
I mostly work with how we can run open search

17
00:01:23,196 --> 00:01:26,726
on kubernetes. I build tools, charts and

18
00:01:26,748 --> 00:01:30,306
operators to help the community run open search and open search

19
00:01:30,348 --> 00:01:33,866
dashboards on Kubernetes. So what is

20
00:01:33,888 --> 00:01:37,866
chaos engineering? Now there is a very thin line between chaos testing and

21
00:01:37,888 --> 00:01:42,106
chaos engineering. Chaos testing is when you are intentionally introducing

22
00:01:42,138 --> 00:01:45,326
failures into a systems, but you are not doing after anything.

23
00:01:45,508 --> 00:01:49,086
So when chaos testing plus

24
00:01:49,188 --> 00:01:52,858
observability is called chaos engineering, when I say observability

25
00:01:52,954 --> 00:01:56,622
is you are identifying, you are proactively monitoring,

26
00:01:56,686 --> 00:02:00,114
and then you are addressing potential issues. That term is

27
00:02:00,152 --> 00:02:03,634
called chaos engineering. So when you are like simulating real

28
00:02:03,672 --> 00:02:07,206
world scenarios, you are proactively monitoring, you are creating your

29
00:02:07,308 --> 00:02:10,754
hypothesis and then you are proactively resolving

30
00:02:10,802 --> 00:02:15,670
it before they are causing any issues. So that is called chaos engineering.

31
00:02:16,890 --> 00:02:20,886
Now, like I said in the beginning, chaos engineering is not

32
00:02:20,908 --> 00:02:24,918
AWS Ari thing. It is equally important for developers

33
00:02:25,014 --> 00:02:28,506
as well. Now why do I think so? Because if you

34
00:02:28,528 --> 00:02:32,078
see data speaks everything, we'll take data driven decisions in

35
00:02:32,084 --> 00:02:35,726
this slide or in this session rather. So the

36
00:02:35,748 --> 00:02:40,398
Gremlin survey, it shows that 47%

37
00:02:40,484 --> 00:02:44,174
of the companies after adopting chaos engineering

38
00:02:44,222 --> 00:02:48,290
AWS, a habit, have seen increased availability.

39
00:02:49,110 --> 00:02:52,238
Then if you see the next one, their MTTR,

40
00:02:52,334 --> 00:02:56,210
which is like the meantime to resolution has decreased by 45%.

41
00:02:56,280 --> 00:03:00,118
Same goes for MTTD which has decreased by 41%. And if you

42
00:03:00,124 --> 00:03:03,574
see the last two, which is very significant as well,

43
00:03:03,612 --> 00:03:06,070
which is the outages and the number of pages,

44
00:03:06,490 --> 00:03:09,946
now how we can at a wholesome or at

45
00:03:09,968 --> 00:03:13,562
an organization level achieve this, this can be only

46
00:03:13,616 --> 00:03:17,498
achieved when you have the

47
00:03:17,584 --> 00:03:21,414
habit of chaos engineering imbibed

48
00:03:21,462 --> 00:03:24,586
or rather plugged in in every part of your software

49
00:03:24,618 --> 00:03:27,722
development lifecycle. So generally

50
00:03:27,786 --> 00:03:31,418
the trend is like after your entire software is developed

51
00:03:31,434 --> 00:03:34,794
and you are ready to go to production, you do some kind of chaos

52
00:03:34,842 --> 00:03:38,146
experiments and game days in order to validate your

53
00:03:38,168 --> 00:03:41,540
resiliency. And if you catch any bugs, then you go ahead and fix those.

54
00:03:41,910 --> 00:03:44,926
Now we sre telling the reverse. When you are designing,

55
00:03:44,958 --> 00:03:48,870
when you are coding, even for small, small modules, you need to think chaos.

56
00:03:49,210 --> 00:03:52,518
Okay? So when I say think chaos is like if you have

57
00:03:52,524 --> 00:03:55,506
built a small module, just go ahead and inject some failures,

58
00:03:55,618 --> 00:03:58,854
see how your system behaves. Then again validate.

59
00:03:58,902 --> 00:04:02,586
Then again fix those. So this way, incrementally, when you

60
00:04:02,608 --> 00:04:06,154
think chaos, while software development, that time,

61
00:04:06,352 --> 00:04:10,314
when it bubbles up for the entire system, it will

62
00:04:10,352 --> 00:04:13,770
lead to increase in number of nines. When I say number of nines,

63
00:04:13,850 --> 00:04:17,198
which is your increased resiliency or your availability of

64
00:04:17,204 --> 00:04:20,974
the system. So this is in very layman terms, you can say

65
00:04:21,092 --> 00:04:25,220
you are building resilience through chaos. Next is like

66
00:04:25,910 --> 00:04:28,754
I talk with multiple folks, multiple people,

67
00:04:28,872 --> 00:04:32,386
and multiple companies. The biggest thing, which I think is

68
00:04:32,408 --> 00:04:36,594
the biggest inhibitor to adopting or expanding this chaos engineering is lack of awareness

69
00:04:36,642 --> 00:04:40,546
and experience. We are still lacking

70
00:04:40,578 --> 00:04:44,022
the awareness that how chaos engineering can help.

71
00:04:44,076 --> 00:04:47,766
People are aware of this term chaos engineering. But what does

72
00:04:47,788 --> 00:04:51,142
a true chaos engineering experiment do? People are not so aware.

73
00:04:51,286 --> 00:04:54,726
Maybe they are injecting failures. They sre not building a proper failure

74
00:04:54,758 --> 00:04:58,582
model. So if you see on the right hand side of the slide,

75
00:04:58,726 --> 00:05:02,746
there is a cycle. So we'll start from here.

76
00:05:02,848 --> 00:05:06,234
Let's start from the steady state of the system. So when I say steady

77
00:05:06,282 --> 00:05:10,286
state of the system, it is a steady state where we

78
00:05:10,308 --> 00:05:13,874
have no failures injected in the system. It is the normal state

79
00:05:13,912 --> 00:05:17,794
of the system where everything is breaking as expected or

80
00:05:17,832 --> 00:05:21,090
is normal based on the steady state,

81
00:05:21,160 --> 00:05:24,562
we make some hypothesis that, okay, after,

82
00:05:24,696 --> 00:05:28,550
say, a power outage, or after a cloud service

83
00:05:28,620 --> 00:05:32,470
outage, or after a DB outage, how will my system behave?

84
00:05:32,890 --> 00:05:36,070
Then we create a bunch of hypothesis around that.

85
00:05:36,220 --> 00:05:40,138
Then what we do is we run the chaos experiment, which will actually

86
00:05:40,304 --> 00:05:44,374
inject the failures which we wanted, and some randomness

87
00:05:44,422 --> 00:05:47,222
as well. There should be some randomness in your experiments.

88
00:05:47,366 --> 00:05:50,618
Otherwise it will become more of any

89
00:05:50,704 --> 00:05:54,426
kind of integration or unit test where you kind of start asserting

90
00:05:54,458 --> 00:05:58,334
things here, apart from asserting, you need to observe and

91
00:05:58,372 --> 00:06:01,662
find unknowns, which is the most important

92
00:06:01,716 --> 00:06:05,346
part of chaos engineering. So once you have run the experiment, now you need

93
00:06:05,368 --> 00:06:10,094
to validate your hypothesis that, okay, whatever hypothesis

94
00:06:10,142 --> 00:06:12,770
I had created as part of the steady state,

95
00:06:12,920 --> 00:06:16,222
whether it holds true or not, you validate.

96
00:06:16,366 --> 00:06:19,990
And if you see that some of the hypothesis does not hold good,

97
00:06:20,140 --> 00:06:23,906
then you improve on that hypothesis. And once you improve

98
00:06:23,938 --> 00:06:27,186
on that hypothesis, or rather improve your systems,

99
00:06:27,298 --> 00:06:30,966
then you will get an improved, steady state and ultimately

100
00:06:31,078 --> 00:06:33,180
a good, resilient service.

101
00:06:33,950 --> 00:06:37,482
The other thing is like, followed closely by other parties. Second point,

102
00:06:37,616 --> 00:06:41,206
that, okay, chaos engineering, most of the time, will take a backseat. Tomorrow,

103
00:06:41,318 --> 00:06:44,746
if your organization is not practicing chaos engineering tomorrow,

104
00:06:44,778 --> 00:06:47,742
you go to your manager. Okay, I want to do chaos engineering. It's very difficult

105
00:06:47,796 --> 00:06:51,166
to convince them because it will certainly not

106
00:06:51,268 --> 00:06:55,006
add a value tomorrow to your service. Even if you start practicing it from

107
00:06:55,028 --> 00:06:58,446
today, it is a journey, and it starts from a pre prod

108
00:06:58,478 --> 00:07:01,842
environment. The last point, if you sre that greater than 10%

109
00:07:01,896 --> 00:07:05,746
of the engineers, they feel that, okay, something might go

110
00:07:05,768 --> 00:07:09,170
wrong. But, okay, listen, you need not start in production.

111
00:07:09,250 --> 00:07:12,514
You start in a pre prod environment. Go to a prodish environment,

112
00:07:12,642 --> 00:07:15,986
practice everything there before your changes roll out in production.

113
00:07:16,018 --> 00:07:20,010
In your beta stage, run these chaos experiments, do chaos experiments.

114
00:07:20,510 --> 00:07:24,806
That will give you enough confidence. Then during this chaos engineering

115
00:07:24,838 --> 00:07:28,122
journey, you will reach to a point where

116
00:07:28,176 --> 00:07:31,846
you will run this chaos experiments in production. And that is

117
00:07:31,888 --> 00:07:35,854
where you will see the real benefit, that even during

118
00:07:35,892 --> 00:07:39,054
outages, you are able to do all these things. There are

119
00:07:39,092 --> 00:07:42,094
two major modes of chaos experimentation. First one,

120
00:07:42,132 --> 00:07:44,814
which I say is the start of the journey, and the second one is like,

121
00:07:44,852 --> 00:07:48,654
you have already advanced the journey. You've automated everything which is manual

122
00:07:48,702 --> 00:07:51,842
experiments. Manual experiments is what I'm telling right now that,

123
00:07:51,896 --> 00:07:55,726
okay, tomorrow I built a module, I want to test it out. I just injected

124
00:07:55,758 --> 00:07:58,698
some failures, saw how it's breaking, that is adopt.

125
00:07:58,894 --> 00:08:02,470
Then we have game days. When I say game days, game days

126
00:08:02,540 --> 00:08:06,114
means that you run like full day outages.

127
00:08:06,242 --> 00:08:09,482
So suppose you brought your database down for say, six to 8 hours,

128
00:08:09,536 --> 00:08:13,258
and then you are seeing how your systems are behaving, how your customer experience

129
00:08:13,344 --> 00:08:17,260
is getting impacted. That is what is called game days.

130
00:08:17,950 --> 00:08:21,882
Second side of chaos experiments

131
00:08:21,946 --> 00:08:25,114
are automated experiments, which are like the CI CD pipelines.

132
00:08:25,242 --> 00:08:28,686
So whenever your code changes are getting checked in, you are

133
00:08:28,708 --> 00:08:32,046
running some automated experiments which

134
00:08:32,068 --> 00:08:34,960
are creating failure, which are variating a bunch of stuff.

135
00:08:35,410 --> 00:08:38,718
This way, you need not be manually involved

136
00:08:38,814 --> 00:08:41,826
in doing all this experiment. You can just look at the report and say,

137
00:08:41,848 --> 00:08:45,230
okay, this is my resiliency SRE perhaps, and my resiliency

138
00:08:45,310 --> 00:08:48,566
score is going good even with the next set of release that

139
00:08:48,588 --> 00:08:52,290
I'm going to roll out. So this is like a continuous

140
00:08:52,370 --> 00:08:56,006
experiments. So this is the next phase of chaos engineering, which we

141
00:08:56,028 --> 00:08:59,450
should target. That once everything is automated, once you know

142
00:08:59,520 --> 00:09:02,906
your system's failure model, then you can

143
00:09:02,928 --> 00:09:06,506
easily create this automation in

144
00:09:06,528 --> 00:09:09,420
your CI CD pipelines. So this way,

145
00:09:09,790 --> 00:09:13,434
every time a code is checked in, you get some resilience

146
00:09:13,482 --> 00:09:16,606
score. And you know that any of my code will

147
00:09:16,628 --> 00:09:19,840
not compromise on the availability of my system.

148
00:09:20,290 --> 00:09:23,380
And this also takes into the fact that

149
00:09:24,070 --> 00:09:27,940
a very simple example is suppose you create alarms using

150
00:09:28,710 --> 00:09:31,890
some terraform template or cloud formation.

151
00:09:32,790 --> 00:09:36,146
Then what happens is you have made some changes in those cloud formation and

152
00:09:36,168 --> 00:09:39,526
as part of your CI CD pipeline that is also going to go and that

153
00:09:39,548 --> 00:09:43,062
is going to synthesize some new alarms. Now what happens

154
00:09:43,116 --> 00:09:46,566
is as part of your CI CD pipeline, you have a

155
00:09:46,588 --> 00:09:50,220
step which is validating whether all the alarms are going on or not.

156
00:09:50,830 --> 00:09:54,646
Now imagine a situation where you created a bug in your alarm

157
00:09:54,678 --> 00:09:57,926
creation code. So suppose that updated alarm,

158
00:09:57,958 --> 00:10:01,174
which it should not have updated. Now your CSCDP

159
00:10:01,222 --> 00:10:04,734
plane will catch it, because as part of the chaos experiments we do

160
00:10:04,772 --> 00:10:08,186
two things. We inject failure, we validate. You injected

161
00:10:08,218 --> 00:10:11,914
failure, you validate it, you evaluate via Ventrix or via

162
00:10:11,962 --> 00:10:15,498
anything or via alarming. So here in this case, we validated by alarming.

163
00:10:15,594 --> 00:10:18,882
We saw that, okay, alarms are not going on. Okay? Then there's something

164
00:10:18,936 --> 00:10:22,066
wrong. So we kind of pause that release that time. So this

165
00:10:22,088 --> 00:10:25,486
is a very good benefit about CI CD

166
00:10:25,518 --> 00:10:29,346
pipeline and how you can integrate chaos in your CI CD

167
00:10:29,378 --> 00:10:33,590
pipeline. A very important quote, a very famous quote of

168
00:10:33,740 --> 00:10:37,598
Jesse Robbins, who was also known as the master of disaster.

169
00:10:37,714 --> 00:10:41,862
So master of disaster was his official

170
00:10:41,926 --> 00:10:46,298
title at Amazon. So Jesse Robbins used to manage

171
00:10:46,384 --> 00:10:50,718
resiliency for everything, which has a tag of Amazon.com.

172
00:10:50,884 --> 00:10:54,826
So for every dollar spent in failure, you learn a dollar's

173
00:10:54,858 --> 00:10:58,286
worth of lesson. So this quote means that

174
00:10:58,468 --> 00:11:02,486
every dollar you spend in creating a failure,

175
00:11:02,618 --> 00:11:05,090
you will learn a dollar's worth of lessons.

176
00:11:05,590 --> 00:11:09,326
So whatever time and effort you are spending in injecting

177
00:11:09,358 --> 00:11:12,866
a failure, there'll be always new learnings that will

178
00:11:12,888 --> 00:11:16,498
come in. So it will not go in vain

179
00:11:16,594 --> 00:11:20,246
because every time you inject a failure, you will

180
00:11:20,268 --> 00:11:23,910
look with a different perspective. And that different

181
00:11:23,980 --> 00:11:27,606
perspective will generate more unknowns in

182
00:11:27,628 --> 00:11:30,746
your system and that will help build the resiliency of

183
00:11:30,768 --> 00:11:34,774
your system. Here are some of the few popular

184
00:11:34,822 --> 00:11:38,438
open source tools which you can use for Chaos engineering.

185
00:11:38,614 --> 00:11:41,866
The very famous litmus chaos. Then chaos monkey,

186
00:11:41,898 --> 00:11:45,614
the legacy chaos monkey which can bring down servers and

187
00:11:45,652 --> 00:11:48,778
create randomness in your system. Then we have chaos blade,

188
00:11:48,874 --> 00:11:52,762
Chaos Mesh, which is very prominent for kubernetes

189
00:11:52,826 --> 00:11:56,538
based environments. Then we have chaos, Tilkit and Sto.

190
00:11:56,634 --> 00:12:00,034
There are many repositories which SRE tools which will help

191
00:12:00,072 --> 00:12:04,062
you practice chaos engineering, but these are the most popular

192
00:12:04,126 --> 00:12:07,666
ones that you can give it a try and start explores

193
00:12:07,858 --> 00:12:11,686
and I'll say that not one kind of tool is suited for everyone.

194
00:12:11,788 --> 00:12:16,166
So everyone will have their own failure model, they have their own resiliency model,

195
00:12:16,348 --> 00:12:20,202
and every service, even in the same company have their own success

196
00:12:20,256 --> 00:12:23,706
metrics. So it really depends on what

197
00:12:23,728 --> 00:12:27,814
kind of use case we have before you choose this Chaos

198
00:12:27,862 --> 00:12:31,440
engineering tools. Now the

199
00:12:31,810 --> 00:12:35,822
topic, the main topic for today, which is like how

200
00:12:35,876 --> 00:12:40,350
developers can benefit from chaos engineering.

201
00:12:40,930 --> 00:12:44,798
So my idea being that for developers,

202
00:12:44,894 --> 00:12:49,006
they need to think when they are writing code, when they are designing

203
00:12:49,038 --> 00:12:52,594
their system, that time only. If you can

204
00:12:52,632 --> 00:12:55,826
think about failures and do some failure driven

205
00:12:55,858 --> 00:12:59,814
development, that is the time that will

206
00:12:59,852 --> 00:13:03,366
benefit the entire lifecycle of the product. So when

207
00:13:03,388 --> 00:13:07,110
you are designing, think about external dependency failures.

208
00:13:07,530 --> 00:13:12,090
What if the database on which I am relying, it goes bad

209
00:13:12,240 --> 00:13:15,418
or it goes down? What if the server on which I

210
00:13:15,424 --> 00:13:19,558
am running it starts failing in other availability zone?

211
00:13:19,734 --> 00:13:23,246
What if my sister services start failing? What if my upstream services

212
00:13:23,348 --> 00:13:26,846
start failing? How will I react to it? Will I be

213
00:13:26,868 --> 00:13:29,918
able to give a consistent user experience?

214
00:13:30,004 --> 00:13:32,880
Will I be able to give a consistent customer experience?

215
00:13:33,650 --> 00:13:36,698
And when you are doing your code testing, like when you sre writing unit test,

216
00:13:36,724 --> 00:13:40,574
when you're writing integration test, make sure you write some automated chaos

217
00:13:40,622 --> 00:13:44,434
tests, like the failure test, do chaos testing on your

218
00:13:44,472 --> 00:13:48,354
module, on your module. If the other module fails, how will your module

219
00:13:48,402 --> 00:13:51,800
behave? So these kind of things will help

220
00:13:52,170 --> 00:13:54,790
think chaos while software development.

221
00:13:56,810 --> 00:13:59,686
Next thing is now you will tell that,

222
00:13:59,708 --> 00:14:03,382
okay, you told about how I can think chaos while software development,

223
00:14:03,446 --> 00:14:07,100
how I can build my failure model, how I can build resilience model.

224
00:14:07,470 --> 00:14:10,810
Then what is chaos engineering, what tools to use,

225
00:14:10,960 --> 00:14:15,006
how I can do CI CD pipelines. Now how

226
00:14:15,028 --> 00:14:18,718
to run these controlled experiments. Like if you're telling that error at a

227
00:14:18,724 --> 00:14:22,126
very modular level, go ahead and do testing. How to do

228
00:14:22,148 --> 00:14:26,026
this here is there you identify the boundary

229
00:14:26,058 --> 00:14:29,214
and the scope of the experiment. So if you have written one module,

230
00:14:29,342 --> 00:14:33,134
you know what is the use case of those module. You know that module

231
00:14:33,182 --> 00:14:36,534
will interact with what components. So that is your

232
00:14:36,572 --> 00:14:40,054
boundary. Then you build the failure model for your

233
00:14:40,092 --> 00:14:44,198
service failure model as in if your service

234
00:14:44,364 --> 00:14:47,786
a depends on service b, and if your service a depends on

235
00:14:47,808 --> 00:14:51,706
a database d, then what if a fails? What happens

236
00:14:51,808 --> 00:14:55,142
if d fails? What happens? A and D both fails?

237
00:14:55,206 --> 00:14:58,490
What happens? A and D both fail

238
00:14:59,970 --> 00:15:02,960
simultaneously or sequentially, what happens?

239
00:15:03,570 --> 00:15:07,322
You build that model. Third is you think about dependency

240
00:15:07,386 --> 00:15:10,894
failures. Very straightforward thing, think about

241
00:15:10,932 --> 00:15:15,054
external, think about internal. External. Internal can be considered,

242
00:15:15,102 --> 00:15:18,594
external is something, maybe any cloud service you are using

243
00:15:18,632 --> 00:15:21,698
any managed service or using any services

244
00:15:21,784 --> 00:15:25,922
which sre running on local. Suppose you have installed MongoDB on

245
00:15:26,056 --> 00:15:30,006
your on premise. What will happen if MongoDB goes to then

246
00:15:30,028 --> 00:15:33,826
is the intra dependency failures. Like what if my sister systems fail?

247
00:15:34,018 --> 00:15:37,806
Then step four, you inject failure, you monitor and then evaluate

248
00:15:37,858 --> 00:15:41,238
results. So this is one controlled experiment for a module.

249
00:15:41,334 --> 00:15:44,934
If you do this, you know that your module

250
00:15:44,982 --> 00:15:48,954
behaves perfectly. And if you just start bubbling up

251
00:15:49,072 --> 00:15:52,782
like several modules building a service. So on a service level also,

252
00:15:52,836 --> 00:15:55,902
we can do the same five steps from the service.

253
00:15:56,036 --> 00:15:59,674
If you entire product on a product level also the boundary

254
00:15:59,722 --> 00:16:03,154
and scope will increase, but the entire set of five

255
00:16:03,192 --> 00:16:05,300
step still remains the same.

256
00:16:09,030 --> 00:16:12,226
Let's do some practical thing now that you need

257
00:16:12,248 --> 00:16:15,326
to design a microservice which is responsible for doing some crud

258
00:16:15,358 --> 00:16:19,254
operations and basic computations. Okay,

259
00:16:19,372 --> 00:16:22,566
so let's design very simple. We have a microservice which will be running

260
00:16:22,588 --> 00:16:26,262
on a virtual machine and we'll do some crud operations using

261
00:16:26,316 --> 00:16:29,926
a database. So let's use a SQL database,

262
00:16:30,118 --> 00:16:33,290
and once we get those data, we'll do some computations.

263
00:16:35,630 --> 00:16:38,380
How we can think chaos here. Interesting.

264
00:16:39,870 --> 00:16:43,322
So first thing that we should come to our mind based on the previous

265
00:16:43,386 --> 00:16:47,390
steps is, okay, I need to, let's go back, let's revise

266
00:16:47,970 --> 00:16:51,434
boundary and scope of experiments. Okay, so boundary

267
00:16:51,482 --> 00:16:55,314
and scope of experiment is my microservice. So microservice will

268
00:16:55,352 --> 00:16:58,702
return some results after cloud operations and basic computation.

269
00:16:58,846 --> 00:17:01,780
So that is my end result. Now,

270
00:17:02,150 --> 00:17:06,246
what if my external dependencies go this round? So my external dependencies here can

271
00:17:06,268 --> 00:17:09,634
be at a very high level is one database and one virtual

272
00:17:09,682 --> 00:17:12,680
machine I'm taking at a very high level. Okay,

273
00:17:13,450 --> 00:17:17,126
so how will I react to a

274
00:17:17,148 --> 00:17:20,602
database failure? Because I need to return

275
00:17:20,656 --> 00:17:24,474
a consistent experience to my customer. So there, if you think,

276
00:17:24,512 --> 00:17:28,922
then you will think that, okay, maybe I can make

277
00:17:28,976 --> 00:17:32,106
my databases global. When I say global,

278
00:17:32,138 --> 00:17:36,522
maybe I'll replicate it in between availability

279
00:17:36,586 --> 00:17:39,310
zones and in between regions.

280
00:17:40,130 --> 00:17:43,690
So in case of a region outage or in case of a

281
00:17:43,780 --> 00:17:47,586
disaster, at least my databases can survive. So that is, you are

282
00:17:47,608 --> 00:17:51,406
strengthening your, this thought process will help you strengthen your database

283
00:17:51,438 --> 00:17:54,834
infrastructure. How about still you feel

284
00:17:54,872 --> 00:17:58,406
okay, something goes wrong, then even the global databases can go

285
00:17:58,428 --> 00:18:01,814
wrong. How to cater to that fact? Okay,

286
00:18:01,932 --> 00:18:05,878
what to do? Maybe I can have a

287
00:18:06,044 --> 00:18:09,580
cache which is like

288
00:18:10,110 --> 00:18:14,422
a mechanism to query whatever I wanted to query

289
00:18:14,566 --> 00:18:17,930
from my database. So I'll store it in a cache. So maybe

290
00:18:18,000 --> 00:18:21,930
my data will be stale until my databases recover,

291
00:18:22,090 --> 00:18:26,078
but I'll be able to give a customer experience, like a consistent customer

292
00:18:26,164 --> 00:18:29,354
experience. I'll suddenly not starting, throwing errors.

293
00:18:29,402 --> 00:18:33,490
My data is stale, but still I'm able to survive.

294
00:18:34,230 --> 00:18:37,826
Nice thing to think is, okay, I'm running on a virtual machine now

295
00:18:37,848 --> 00:18:39,330
that virtual machine,

296
00:18:41,030 --> 00:18:44,414
should I make it on one AZ, two AZ, three AZ,

297
00:18:44,542 --> 00:18:48,390
how should I go about it? So if we want

298
00:18:48,540 --> 00:18:51,702
to sustain AZ plus one failure, which means

299
00:18:51,756 --> 00:18:55,814
that one AZ is fully down, plus one more instance is

300
00:18:55,852 --> 00:18:58,950
down, we need to replicate this service three AZ.

301
00:18:59,390 --> 00:19:02,842
So we need to have a bare minimum of three

302
00:19:02,896 --> 00:19:06,314
boxes, one in each AZ. And then

303
00:19:06,352 --> 00:19:09,622
only we can say that, okay, in case of AZ outages,

304
00:19:09,686 --> 00:19:13,502
we'll be able to survive. So this kind of

305
00:19:13,636 --> 00:19:17,646
thought process is what we need to think

306
00:19:17,828 --> 00:19:21,454
when we are designing a microservice, which is responsible for

307
00:19:21,492 --> 00:19:24,686
doing this crud operations. Now, as part of failure experiments,

308
00:19:24,718 --> 00:19:28,126
what you can do, very basic thing, you just shut down your database,

309
00:19:28,238 --> 00:19:32,270
see how your system is behaving, create some latencies,

310
00:19:32,430 --> 00:19:36,502
network latencies, see how your customer behavior is

311
00:19:36,636 --> 00:19:40,454
getting impacted, see what you can do to improve it.

312
00:19:40,652 --> 00:19:44,534
Or rather, I'll say that maybe see

313
00:19:44,572 --> 00:19:48,418
if we can means you can

314
00:19:48,444 --> 00:19:51,340
even find the bottleneck of your systems. Rather,

315
00:19:51,710 --> 00:19:55,206
okay, if this is my network latency, this is the max network

316
00:19:55,238 --> 00:19:59,130
latency on which our customer experience won't be deteriorated.

317
00:19:59,630 --> 00:20:03,950
So this will also help you identify your resiliency bottlenecks,

318
00:20:04,690 --> 00:20:08,334
then what if two

319
00:20:08,372 --> 00:20:12,046
of my instances of the microservice goes down? Will I

320
00:20:12,068 --> 00:20:15,810
be able to sustain or give a good customer experience?

321
00:20:15,960 --> 00:20:18,850
Or whatever my success metrics are,

322
00:20:19,000 --> 00:20:23,054
will they remain same even when two of the instances

323
00:20:23,102 --> 00:20:27,074
goes down? Will the one instance be able to take the load

324
00:20:27,202 --> 00:20:30,806
or will be able to sustain the load? So this is how we

325
00:20:30,828 --> 00:20:34,742
are designing a microservice and for doing

326
00:20:34,876 --> 00:20:38,662
crud operations. And when we were designing, we thought

327
00:20:38,716 --> 00:20:42,426
about the different failures that can happen in

328
00:20:42,448 --> 00:20:45,686
a real time scenario. And then we designed the system accordingly.

329
00:20:45,798 --> 00:20:49,146
So it was just an example. Now we go into some

330
00:20:49,168 --> 00:20:52,570
of the best practices in chaos engineering.

331
00:20:53,550 --> 00:20:56,800
I iterated it multiple times. I iterated one more time.

332
00:20:57,250 --> 00:20:59,360
Understand the steady state of the system.

333
00:21:00,050 --> 00:21:03,970
Until you know what is the correct state of the system,

334
00:21:04,120 --> 00:21:07,460
you will not be able to identify when the system goes wrong.

335
00:21:07,990 --> 00:21:10,610
So when the system is behaving abruptly,

336
00:21:11,190 --> 00:21:14,482
you can only judge whether it's right

337
00:21:14,536 --> 00:21:18,260
or wrong. When you know the steady state of the system

338
00:21:18,870 --> 00:21:22,166
failure model is very important. So like in this example, we built

339
00:21:22,188 --> 00:21:25,480
a failure model that what if the database goes down? What if the

340
00:21:25,930 --> 00:21:29,914
virtual machine on which I'm running my system goes down? Third was

341
00:21:29,952 --> 00:21:33,274
like, how can I control the blast radius of my

342
00:21:33,312 --> 00:21:37,050
experiments? So when I say blast radius, it means that

343
00:21:37,120 --> 00:21:41,146
the boundary which I was talking about. So my microservice

344
00:21:41,338 --> 00:21:44,714
is interacting with XYZ components and a database.

345
00:21:44,762 --> 00:21:48,426
I'll just restrict it to those kind of failures. Then I introduce

346
00:21:48,458 --> 00:21:50,910
randomness or jitterness in my failure injections.

347
00:21:51,810 --> 00:21:55,940
So maybe I'll not say that. Okay, shut it down for 30 minutes and then

348
00:21:56,390 --> 00:22:00,420
let the server come up. Maybe just do some

349
00:22:01,110 --> 00:22:04,994
intermittent stuff. Maybe shut it down for say, five minutes. Then again bring

350
00:22:05,032 --> 00:22:08,886
it up. Then again shut it down for 20 minutes. So let's take

351
00:22:08,908 --> 00:22:12,694
the example of a fire or fire outage. Let's think of how

352
00:22:12,732 --> 00:22:16,486
a fire will happen in a data center. In a

353
00:22:16,508 --> 00:22:20,130
data center, there'll be multiple racks, okay? Now, when the

354
00:22:20,140 --> 00:22:23,766
fire has happened, it will start with, say, one rack getting fired.

355
00:22:23,878 --> 00:22:27,974
So some virtual machines are impacted. Then second rack, then third rack.

356
00:22:28,102 --> 00:22:30,720
Ultimately the whole data center is down.

357
00:22:31,490 --> 00:22:35,818
Ultimately the whole AZ is down. So there is randomness

358
00:22:35,994 --> 00:22:39,854
in how the fire is spreading and it is creating failures and

359
00:22:39,892 --> 00:22:41,840
creating disasters in the system.

360
00:22:43,570 --> 00:22:46,834
Always test using real world conditions. And don't think that,

361
00:22:46,872 --> 00:22:50,482
okay, I'll just go and test in prod. It is a journey. It will start

362
00:22:50,536 --> 00:22:54,370
in pre prod. Always conduct post

363
00:22:54,440 --> 00:22:57,960
incident analysis after each experiment. This is very important.

364
00:22:58,570 --> 00:23:01,474
Until you conduct post incident analysis,

365
00:23:01,522 --> 00:23:05,110
you will not be able to reap the benefits of chaos engineering.

366
00:23:05,690 --> 00:23:08,658
As much as important is failure injection.

367
00:23:08,834 --> 00:23:12,362
More than that is post incident analysis because there only

368
00:23:12,416 --> 00:23:15,626
you will get to know about the bugs or the issues that might

369
00:23:15,648 --> 00:23:19,686
have incurred AWS. Part of this then is extensive monitoring

370
00:23:19,718 --> 00:23:24,042
and logging. Your system needs to have a good observability posture

371
00:23:24,106 --> 00:23:27,914
so that you can identify issues when you are running this chaos experiments.

372
00:23:28,042 --> 00:23:31,754
Last but not the least, you start today and this experiments

373
00:23:31,802 --> 00:23:35,426
should be often. So if you run regular experiments, you'll be

374
00:23:35,448 --> 00:23:38,530
able to increase your resiliency scores.

375
00:23:38,950 --> 00:23:41,700
So I'll talk about like Chaos engineering today.

376
00:23:43,190 --> 00:23:46,598
It is being used a lot these days

377
00:23:46,764 --> 00:23:50,354
where we want, where we are focused on speed.

378
00:23:50,482 --> 00:23:54,594
Okay, so suppose for systems

379
00:23:54,722 --> 00:23:58,186
which are giving delivery in one day, for grocery delivery or

380
00:23:58,208 --> 00:24:01,500
for food delivery, these systems need to be available.

381
00:24:01,870 --> 00:24:05,242
And to have these systems available

382
00:24:05,376 --> 00:24:08,826
to check its availability. Chaos engineering is the way

383
00:24:09,008 --> 00:24:12,406
63% of like 400 plus IT professionals, they say

384
00:24:12,448 --> 00:24:15,726
that they have performed chaos experiments. And this is

385
00:24:15,748 --> 00:24:19,006
a good number. 30% claim that they run it

386
00:24:19,028 --> 00:24:22,686
in production. So this gives us a good confidence to go and

387
00:24:22,708 --> 00:24:26,926
tomorrow and write these chaos experiments. Because if people are running in production,

388
00:24:27,038 --> 00:24:30,610
why can't we start with a pre prod environment and test our resiliency

389
00:24:31,110 --> 00:24:34,542
GitHub has like over 200 plus Chaos experiments related

390
00:24:34,606 --> 00:24:38,082
projects with like 16k plus stars. So you can imagine

391
00:24:38,146 --> 00:24:42,070
the number of people who are into this chaos engineering

392
00:24:42,490 --> 00:24:46,294
and this is a stat that teams who have running

393
00:24:46,412 --> 00:24:49,938
frequent chaos experiments minimum they are seeing like three nines

394
00:24:49,954 --> 00:24:53,194
of availability which is very good. And all

395
00:24:53,232 --> 00:24:56,826
major cloud providers like AWS Azure, they have their own managed service for

396
00:24:56,848 --> 00:25:00,054
doing chaos experiments. Apart from AWS Azure, we have many

397
00:25:00,112 --> 00:25:03,566
other managed chaos services as well like

398
00:25:03,668 --> 00:25:07,454
Litmus chaos which is provided by harness. So do

399
00:25:07,492 --> 00:25:10,974
check them out and see

400
00:25:11,012 --> 00:25:14,846
how you can plug in in your existing software

401
00:25:14,878 --> 00:25:18,034
development lifecycle and you can

402
00:25:18,152 --> 00:25:22,206
break systems for resilience. Build your resilience score,

403
00:25:22,318 --> 00:25:25,886
increase your nines and inculcate chaos engineering

404
00:25:25,918 --> 00:25:30,054
as a habit. So feel free to reach out to me on Twitter or

405
00:25:30,092 --> 00:25:34,018
on LinkedIn. On LinkedIn. Also my alias is the algo

406
00:25:34,194 --> 00:25:37,666
without this underscores and on Twitter you can just scan

407
00:25:37,698 --> 00:25:40,742
this QR code. This will take you to my Twitter page.

408
00:25:40,796 --> 00:25:45,154
You can just dm me or tag me for any follow up questions regarding

409
00:25:45,202 --> 00:25:48,386
this talk. Hope you enjoyed

410
00:25:48,418 --> 00:25:52,254
the session and and do go through the other talks in

411
00:25:52,292 --> 00:25:55,934
Con 44 as well. There are many interesting topics where people are

412
00:25:55,972 --> 00:25:58,880
talking about chaos engineering and different aspects of it.

