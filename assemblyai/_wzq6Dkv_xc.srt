1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:07,358
a developer, a quality

3
00:00:07,444 --> 00:00:11,406
engineer who wants to tackle the challenge of improving reliability in

4
00:00:11,428 --> 00:00:14,970
your DevOps? You can enable your DevOps for reliability

5
00:00:15,050 --> 00:00:18,286
with chaos native. Create your free account

6
00:00:18,388 --> 00:01:16,806
at Chaos native Litmus Cloud hi

7
00:01:16,828 --> 00:01:19,750
everyone, I'm super excited to be here today.

8
00:01:19,900 --> 00:01:23,686
I'm Ishai. I'm a developer and CTO and

9
00:01:23,708 --> 00:01:27,754
co founder of Lifecycle. Today I'm going to talk about how

10
00:01:27,792 --> 00:01:31,446
to create an amazing developer experience when onboarding

11
00:01:31,478 --> 00:01:35,594
a new code base. I'm going to

12
00:01:35,632 --> 00:01:39,306
start by sharing a story or an

13
00:01:39,328 --> 00:01:42,862
experience I had a few years ago. So back

14
00:01:42,916 --> 00:01:46,622
then I led a team that developed an open

15
00:01:46,676 --> 00:01:50,320
source solution for feature management and

16
00:01:51,890 --> 00:01:54,690
for feature flagging and configuration management.

17
00:01:55,590 --> 00:01:58,866
Because it was an open source project that was

18
00:01:58,888 --> 00:02:02,354
developed inside the company, we wanted everyone in the

19
00:02:02,392 --> 00:02:06,002
company, every developer, to contribute

20
00:02:06,066 --> 00:02:10,662
code to this project. Because this

21
00:02:10,716 --> 00:02:14,866
project, to achieve that, we've organized an Akaton

22
00:02:14,978 --> 00:02:18,374
and because the project was called Tweak, we've naturally called

23
00:02:18,412 --> 00:02:22,210
it a tweakathon. And we were excited

24
00:02:22,290 --> 00:02:25,862
that me and the team, we've created a dedicated

25
00:02:25,926 --> 00:02:30,002
backlog for this event. We've added

26
00:02:30,086 --> 00:02:33,386
lots of documentation to the project, we promote

27
00:02:33,418 --> 00:02:36,622
the event, we printed t shirt and

28
00:02:36,676 --> 00:02:39,934
at the end, well, it didn't work that

29
00:02:39,972 --> 00:02:43,634
well. We didn't have many contributions and

30
00:02:43,672 --> 00:02:47,550
the main reason we saw that most developers were struggling

31
00:02:47,630 --> 00:02:50,766
to run the project, let alone develop new features

32
00:02:50,798 --> 00:02:54,162
or test them. The problem was that

33
00:02:54,216 --> 00:02:57,982
the project was complex and they needed lots of help

34
00:02:58,056 --> 00:03:01,670
to run it properly and add code to it. And even

35
00:03:01,740 --> 00:03:04,662
when they start working on it after a few hours,

36
00:03:04,796 --> 00:03:08,902
the development experience was not working that well in terms of like debugging

37
00:03:09,046 --> 00:03:12,714
or code intellisense. And today

38
00:03:12,752 --> 00:03:16,646
I'm going to talk about the challenges we have when we onboard

39
00:03:16,678 --> 00:03:21,230
a new code base and how we can make it much easier.

40
00:03:22,850 --> 00:03:27,022
Few words about myself. I am a developer full

41
00:03:27,076 --> 00:03:30,462
stack for the last decade and a bit more.

42
00:03:30,516 --> 00:03:33,890
I'm passionate about cloud development, backend architecture,

43
00:03:34,550 --> 00:03:38,210
user experience, developer experience I really love

44
00:03:38,280 --> 00:03:41,886
functional programming. I'm the creator and maintainer

45
00:03:41,918 --> 00:03:45,362
of tweak, an open source cloud native

46
00:03:45,426 --> 00:03:48,040
feature management solution, the one I talked about before.

47
00:03:49,130 --> 00:03:52,920
And I also care deeply about

48
00:03:56,250 --> 00:03:58,460
consistency and delegance in code.

49
00:03:59,710 --> 00:04:03,146
A few words about lifecycle so we

50
00:04:03,168 --> 00:04:07,690
are building the next generation of collaboration tools for development teams.

51
00:04:08,030 --> 00:04:11,740
It's based on the idea of continuous playground environments and

52
00:04:12,190 --> 00:04:15,578
our mission is to bridge the gap between coders and non coders.

53
00:04:15,674 --> 00:04:19,274
Our project is currently private, but the beta

54
00:04:19,322 --> 00:04:22,480
is coming soon and you are welcome to check it out.

55
00:04:23,890 --> 00:04:27,234
So let's start by describing how does

56
00:04:27,272 --> 00:04:30,514
it feel to start working on a new complex code

57
00:04:30,552 --> 00:04:33,634
base? So the first thing I'm going to do,

58
00:04:33,672 --> 00:04:36,600
I'm going to try and build and run the application,

59
00:04:37,210 --> 00:04:40,642
but I don't have necessarily the right operation

60
00:04:40,706 --> 00:04:43,926
system, so I need to see what I

61
00:04:43,948 --> 00:04:47,670
mean. Maybe the instructions are related to different OSS.

62
00:04:48,170 --> 00:04:51,814
I might have missing or conflicting sdks or programming language.

63
00:04:51,942 --> 00:04:56,090
Runtime can be the wrong version of Python or Ruby or node,

64
00:04:56,430 --> 00:04:59,846
and in many cases I'm starting with installing

65
00:04:59,878 --> 00:05:03,046
the dependencies and the package manager

66
00:05:03,078 --> 00:05:06,782
for random errors and they can be difficult

67
00:05:06,836 --> 00:05:10,366
to debug. They are not necessarily random, but they

68
00:05:10,388 --> 00:05:14,302
sure feel that way. And after

69
00:05:14,356 --> 00:05:17,038
that the build is working.

70
00:05:17,124 --> 00:05:19,490
I manage to install the dependencies,

71
00:05:20,150 --> 00:05:24,180
but the next step I'm going to run the

72
00:05:24,630 --> 00:05:28,950
reader readme and try to make it work because it didn't run properly.

73
00:05:29,610 --> 00:05:32,150
Apparently I need to run some magic script.

74
00:05:32,810 --> 00:05:36,566
Some of them I'm going to watch fail. Maybe I need to

75
00:05:36,588 --> 00:05:40,010
change the OSS file. Apparently this project

76
00:05:40,080 --> 00:05:43,770
require a database, so I need to install the database.

77
00:05:44,590 --> 00:05:48,394
And if I'm out of luck I might need to install something very

78
00:05:48,432 --> 00:05:50,720
intuitive like a root CI or something.

79
00:05:52,130 --> 00:05:56,270
But I managed to build and run it and everything work, but well

80
00:05:56,420 --> 00:06:00,510
I'm here for developing and suddenly the developer experience

81
00:06:00,580 --> 00:06:03,922
might not work properly. So debugging doesn't work,

82
00:06:03,976 --> 00:06:07,090
the id doesn't stop on my breakpoints,

83
00:06:07,430 --> 00:06:11,186
autocomplete or dependency management not work properly in

84
00:06:11,208 --> 00:06:14,846
the id, the flows of code watch and build

85
00:06:14,968 --> 00:06:19,080
doesn't work and apparently I need to install watchman or other tool.

86
00:06:19,850 --> 00:06:23,366
Odd model reloading doesn't work because of

87
00:06:23,388 --> 00:06:26,358
websocket issues or something else, I don't know.

88
00:06:26,524 --> 00:06:30,246
And there's also these external dependencies that apparently

89
00:06:30,278 --> 00:06:33,546
I need to manage them differently for them to

90
00:06:33,568 --> 00:06:36,394
work. And maybe I have like code issue or something else.

91
00:06:36,512 --> 00:06:40,474
So it's kind of a difficult experience. And after I

92
00:06:40,512 --> 00:06:43,726
try to manage to run everything in develop, I get

93
00:06:43,748 --> 00:06:47,066
to the integration test and here it's

94
00:06:47,258 --> 00:06:51,070
bunch of tools and they are flaky and they are not working

95
00:06:51,140 --> 00:06:54,110
properly. And yeah, my head explode.

96
00:06:54,850 --> 00:06:58,274
But the worst part of it all is

97
00:06:58,312 --> 00:07:01,634
that if I'm going to leave this project for a few months,

98
00:07:01,832 --> 00:07:05,102
most probably the next time I'm going to work on this project,

99
00:07:05,176 --> 00:07:08,502
I'm going to do all this stuff all over and over again because

100
00:07:08,556 --> 00:07:12,470
my machine changed and because the project change.

101
00:07:12,620 --> 00:07:16,600
So yeah, that's difficult.

102
00:07:19,310 --> 00:07:22,522
So why is it so

103
00:07:22,576 --> 00:07:26,218
difficult? One of the reason

104
00:07:26,304 --> 00:07:30,010
is because we have so many tools and

105
00:07:30,080 --> 00:07:34,350
so many sdks and runtimes and this like huge fragmentation.

106
00:07:34,690 --> 00:07:38,106
Also usually when stuff open on machine,

107
00:07:38,218 --> 00:07:42,190
we are not touching it. It's like it's woke. I'm not going to install

108
00:07:42,260 --> 00:07:45,666
a new machine ever, unless my machine gets viruses or

109
00:07:45,688 --> 00:07:49,106
get burned down, or my hard disk is failing or

110
00:07:49,288 --> 00:07:50,660
something like that.

111
00:07:52,310 --> 00:07:55,426
We have like vast amount of different tool chains,

112
00:07:55,458 --> 00:07:59,110
ides complex development workflow that

113
00:07:59,260 --> 00:08:02,502
can be really difficult to set up and break

114
00:08:02,556 --> 00:08:06,150
easily. Our own machines are usually

115
00:08:06,220 --> 00:08:09,802
polluted and overloaded with tools, which is really

116
00:08:09,856 --> 00:08:13,382
terrible. And besides the environment

117
00:08:13,446 --> 00:08:17,462
itself, the code bases always introduce new tools

118
00:08:17,606 --> 00:08:21,246
and changes, especially in active repositories. And at the end

119
00:08:21,268 --> 00:08:24,814
we waste tons of time and lots of frustration to get

120
00:08:24,852 --> 00:08:28,746
this stuff working. So what's

121
00:08:28,778 --> 00:08:32,094
the dream, what's the experiments we want to

122
00:08:32,132 --> 00:08:36,306
have? So the way I see it, we want delelopment environments that

123
00:08:36,408 --> 00:08:39,694
are consistent, that provide the same predictable

124
00:08:39,742 --> 00:08:43,138
experience. So I'm not going to

125
00:08:43,144 --> 00:08:46,466
get like these random errors, because their environments is

126
00:08:46,488 --> 00:08:49,922
consistent. I want them to be reproducible.

127
00:08:50,066 --> 00:08:53,606
It's possible to destroy and rebuild them, so I can move

128
00:08:53,628 --> 00:08:57,302
CTO a different machine, or if I did some damage, I can just

129
00:08:57,436 --> 00:09:00,970
destroy and rebuild them like we do today with servers.

130
00:09:02,350 --> 00:09:06,422
I want them to be isolated. If I'm running several

131
00:09:06,486 --> 00:09:09,974
development environments, I don't want them to conflict with each other,

132
00:09:10,112 --> 00:09:13,934
so that I can have like this project required this

133
00:09:13,972 --> 00:09:17,630
version of a code and this one

134
00:09:17,700 --> 00:09:21,566
other, and this one required this specific CLI. And they are not

135
00:09:21,668 --> 00:09:24,914
conflicted with each other. They should

136
00:09:24,952 --> 00:09:28,094
be like self contained. Meaning that all the tools

137
00:09:28,142 --> 00:09:31,746
I need to work in an optimal way on

138
00:09:31,768 --> 00:09:34,830
this repository in codebase should

139
00:09:34,920 --> 00:09:38,454
be defined inside. So it should

140
00:09:38,492 --> 00:09:41,890
be like easy to. I'm just starting to walk and I have all the tools

141
00:09:41,970 --> 00:09:43,750
and dependencies and packages.

142
00:09:45,850 --> 00:09:49,654
And at the end we want this environments won't

143
00:09:49,702 --> 00:09:53,306
break easily, so we won't struggle counter sour to

144
00:09:53,328 --> 00:09:56,726
get things working again. And the feeling

145
00:09:56,758 --> 00:10:00,158
is we used to have some

146
00:10:00,164 --> 00:10:04,382
of these challenges around applications and

147
00:10:04,436 --> 00:10:08,270
then we suddenly run them in containers, which have very similar

148
00:10:08,340 --> 00:10:11,646
attributes to the one I mentioned here. Especially when we talk

149
00:10:11,668 --> 00:10:15,146
about Docker container. We have like this tool can

150
00:10:15,178 --> 00:10:18,480
of Docker that allow us to build and run

151
00:10:18,850 --> 00:10:22,926
this environment, which are self contained, isolated to

152
00:10:22,948 --> 00:10:28,338
some degree and reproducible,

153
00:10:28,434 --> 00:10:32,310
which is really nice. Now, few years ago,

154
00:10:32,460 --> 00:10:36,134
two years ago actually, vs. Code, which is one of the

155
00:10:36,172 --> 00:10:39,998
most popular ides around, today introduced

156
00:10:40,034 --> 00:10:43,658
a feature to develop inside of a container. Now the

157
00:10:43,664 --> 00:10:48,362
idea is simple. The application, the id itself has

158
00:10:48,416 --> 00:10:51,966
like two components. The front end run on our computer,

159
00:10:52,068 --> 00:10:54,654
providing a good and native experience.

160
00:10:54,852 --> 00:10:58,730
But the back end of the id which is responsible for file editing,

161
00:10:58,810 --> 00:11:01,642
terminal language, server extension,

162
00:11:01,786 --> 00:11:05,554
et cetera, et cetera is running inside the container alongside with

163
00:11:05,592 --> 00:11:10,100
our code base. And that way we have our

164
00:11:11,270 --> 00:11:15,454
repository and delelopment environments running like in an isolated

165
00:11:15,502 --> 00:11:19,240
container while we still have a greater developer experience

166
00:11:20,330 --> 00:11:23,894
on our oss machine. So how does

167
00:11:23,932 --> 00:11:27,906
it look like? I'm going to show several projects

168
00:11:27,938 --> 00:11:30,970
and example that are available on GitHub.

169
00:11:32,910 --> 00:11:36,854
All the tools that I'm going to use in this presentation are open source

170
00:11:36,902 --> 00:11:39,738
and free to use projects. So you can do it yourself.

171
00:11:39,824 --> 00:11:43,214
You don't need any other tool for that or

172
00:11:43,252 --> 00:11:46,560
something that require cost.

173
00:11:47,970 --> 00:11:51,706
And most examples there are far from bulletproof

174
00:11:51,898 --> 00:11:55,210
and use tools that are experimental,

175
00:11:55,370 --> 00:11:58,846
but they showcase our value. We can get

176
00:11:58,948 --> 00:12:02,990
somewhere inside a container the development environment.

177
00:12:03,150 --> 00:12:06,866
So let's start with a quick example.

178
00:12:07,048 --> 00:12:10,742
The first one I'm going to show is a project that do

179
00:12:10,796 --> 00:12:14,086
like a translation between image to ascii art.

180
00:12:14,188 --> 00:12:17,570
The project is written in go before we had go models.

181
00:12:17,650 --> 00:12:22,700
So we test several challenges and

182
00:12:24,110 --> 00:12:27,866
let's start to develop it. So the first thing I'm going

183
00:12:27,888 --> 00:12:31,386
to show here is that we

184
00:12:31,408 --> 00:12:34,714
are running inside the developer container. You can see it here in the status

185
00:12:34,762 --> 00:12:39,114
bar vs code and you'll notice something very unique.

186
00:12:39,242 --> 00:12:42,782
If I'm going to run the command point and look if I have the tool

187
00:12:42,836 --> 00:12:46,306
for Go, you see that I don't have them because they are not installed on

188
00:12:46,328 --> 00:12:50,494
a machine which is actually a windows machine. But here is a container

189
00:12:50,542 --> 00:12:54,978
that run in Linux and have go

190
00:12:55,064 --> 00:12:58,310
installed. So that's pretty awesome.

191
00:12:58,460 --> 00:13:02,006
Now how does it achieved basically vs code if

192
00:13:02,028 --> 00:13:05,366
it have like the dev container folder, it looks for an

193
00:13:05,388 --> 00:13:09,002
instruction on how to build the environment for

194
00:13:09,056 --> 00:13:12,982
this project. So we can see that we have a definition

195
00:13:13,046 --> 00:13:17,798
here of what Dockerfile to use some settings

196
00:13:17,894 --> 00:13:21,726
related to go extensions that should be installed in the repository, like the

197
00:13:21,748 --> 00:13:25,754
Golang extension. We can see here that I already have Golang

198
00:13:25,802 --> 00:13:30,686
installed because it's part of the developer environment and

199
00:13:30,708 --> 00:13:34,974
postcard command that if we want CTo do some initial script.

200
00:13:35,102 --> 00:13:38,354
Now if we look at the docker file here, we can see

201
00:13:38,392 --> 00:13:40,770
that we start with a basic ubuntu.

202
00:13:41,910 --> 00:13:45,474
We are going to install go put

203
00:13:45,512 --> 00:13:48,978
it CTo our path delelopment environments variable

204
00:13:49,074 --> 00:13:52,198
that tell Go not to use Go models because the project,

205
00:13:52,284 --> 00:13:56,278
as I mentioned before, it's like can old Go project. We install

206
00:13:56,364 --> 00:13:59,766
several additional Go tools. The dependency manager

207
00:13:59,798 --> 00:14:03,146
of Go back at the time has called DeP that

208
00:14:03,168 --> 00:14:06,582
this project is using and some configuration

209
00:14:06,646 --> 00:14:10,146
for our shell. So I have the autocompletor

210
00:14:10,198 --> 00:14:14,202
for Go because I configuration my shell

211
00:14:14,266 --> 00:14:17,998
to have extensions for git and Golang and

212
00:14:18,164 --> 00:14:21,582
basically everyone that is going to open this project

213
00:14:21,636 --> 00:14:24,260
in vs code will get the same experience.

214
00:14:24,870 --> 00:14:28,034
So this project run asciard. So I'm going to

215
00:14:28,072 --> 00:14:31,970
run it against an image

216
00:14:33,510 --> 00:14:36,854
and I'm going to tell you ahead that it's not

217
00:14:36,892 --> 00:14:40,966
going to work because this project doesn't support URLs and

218
00:14:40,988 --> 00:14:45,846
I want CTO add this feature and basically I

219
00:14:45,868 --> 00:14:48,760
need to change the open image file here.

220
00:14:49,450 --> 00:14:52,938
I'm not going to do it right now because I have already branched for that.

221
00:14:53,024 --> 00:14:55,690
So I'm going to move CTO that branch.

222
00:14:57,150 --> 00:15:00,846
But you can notice that I have like a good experience here in terms

223
00:15:00,868 --> 00:15:04,880
of editing. I mean everything here is autocompleted fast.

224
00:15:05,490 --> 00:15:09,054
Very nice. Now I'm going to run it

225
00:15:09,092 --> 00:15:12,800
again with my branch and let's see,

226
00:15:14,310 --> 00:15:17,634
pretty nice. We have like the docker logo and I can

227
00:15:17,672 --> 00:15:21,054
even print my user profile

228
00:15:21,102 --> 00:15:24,874
picture and yeah, that work properly.

229
00:15:25,022 --> 00:15:29,110
I can run the test and everything work

230
00:15:29,180 --> 00:15:33,286
and I can also run our dependency manager to

231
00:15:33,308 --> 00:15:36,454
see everything work. Notice another thing

232
00:15:36,492 --> 00:15:40,394
that I'm working inside a directory, that is

233
00:15:40,512 --> 00:15:43,782
special directory because a Golang in the past required

234
00:15:43,846 --> 00:15:47,242
you to develop in a specific folder for

235
00:15:47,296 --> 00:15:50,826
stuff to work properly. And I

236
00:15:50,848 --> 00:15:54,046
have here the definition of the workspace and identifying that I

237
00:15:54,068 --> 00:15:57,774
walk inside this folder. So that's basically it.

238
00:15:57,892 --> 00:16:01,418
And usually, for example if I was walking it locally,

239
00:16:01,514 --> 00:16:05,418
I would need to install go in that version, install the dev manager,

240
00:16:05,514 --> 00:16:09,686
create like this folder of Go Src with Goroot

241
00:16:09,818 --> 00:16:13,506
and stuff like that. That is not that

242
00:16:13,688 --> 00:16:17,110
fun and might collide with other project.

243
00:16:17,180 --> 00:16:20,950
I have also the environment variable and other tools.

244
00:16:21,290 --> 00:16:25,426
So that's pretty much the idea of a dev container.

245
00:16:25,538 --> 00:16:28,954
It integrated with the SEM. So you saw that I can move

246
00:16:28,992 --> 00:16:33,110
between branches. I have remote code editing capability,

247
00:16:33,270 --> 00:16:36,346
not just editing the code but also seeing like the autocomplete and

248
00:16:36,368 --> 00:16:40,054
everything work. We have like remote terminals,

249
00:16:40,102 --> 00:16:43,290
so it's different than the one I have on my OSS machine.

250
00:16:43,370 --> 00:16:46,270
It's internal terminal for that container.

251
00:16:46,850 --> 00:16:50,206
And we can configure our environments the way we want. So we

252
00:16:50,228 --> 00:16:53,438
can set the rally, try and time and SDK and CLI. We want

253
00:16:53,524 --> 00:16:57,614
set environments variable as I did with the go environment

254
00:16:57,662 --> 00:17:01,230
variable, go models environment variable. I can configure our shell,

255
00:17:01,390 --> 00:17:05,854
add some plugin, define the extension, the ideas like the Goland extension.

256
00:17:05,982 --> 00:17:09,780
So that's pretty cool. But can it work for more complex project?

257
00:17:10,730 --> 00:17:14,790
And I'm going to show it. So the next project is

258
00:17:14,940 --> 00:17:18,598
a server app, still a simple one,

259
00:17:18,684 --> 00:17:22,220
it's a flask app that send email based on Sendgame. The example

260
00:17:22,750 --> 00:17:26,700
here we have several new challenges for good and coding experience.

261
00:17:27,790 --> 00:17:31,166
First of all is running and interacting with the server because the server is

262
00:17:31,188 --> 00:17:35,006
running inside a container. The second one is managing secrets because we

263
00:17:35,028 --> 00:17:39,630
need an API key for send git and then there's debugging.

264
00:17:40,450 --> 00:17:44,586
So let's start with this project. I'm going

265
00:17:44,628 --> 00:17:48,114
to start by showing the dev container. So we have a

266
00:17:48,152 --> 00:17:51,678
dev container that is based on Python. We have the extension

267
00:17:51,694 --> 00:17:55,166
of Python and we have the Docker file that

268
00:17:55,208 --> 00:17:59,158
is based on image that Microsoft provides for Python application.

269
00:17:59,324 --> 00:18:03,318
But additionally I'm going to install sops. Sops is a

270
00:18:03,324 --> 00:18:07,790
project by Mozilla that designed to deal with secrets encrypted

271
00:18:07,890 --> 00:18:11,130
and adding encrypted secrets inside the repository.

272
00:18:11,790 --> 00:18:15,354
And that way I can add

273
00:18:15,472 --> 00:18:19,066
the secrets of for example my API key and keep

274
00:18:19,088 --> 00:18:22,334
it in the repository, but keep it safe because we know

275
00:18:22,372 --> 00:18:26,078
that secrets should not lie in the repository unless they

276
00:18:26,084 --> 00:18:30,446
are encrypted. So here we

277
00:18:30,468 --> 00:18:33,886
can see that we have like a Sengit API key. It's like a

278
00:18:33,908 --> 00:18:37,430
JSON file but it's encrypted. So we have Sengit

279
00:18:37,450 --> 00:18:41,170
API key mail from sender and we see the data is encrypted

280
00:18:43,430 --> 00:18:47,254
and I define what keys I want the

281
00:18:47,292 --> 00:18:51,622
encryption and decryption to use. And we can see that I have here key

282
00:18:51,676 --> 00:18:54,710
installed it's taking for my machine.

283
00:18:56,170 --> 00:18:59,894
And the idea here is that I can use sops

284
00:18:59,942 --> 00:19:04,310
to encrypt or decrypt value. I'll show an example with fake

285
00:19:04,470 --> 00:19:08,102
additional file and we see that I have like the sum secrets

286
00:19:08,166 --> 00:19:11,566
number and I'm going to

287
00:19:11,588 --> 00:19:16,480
decrypt it. So how does it work? I use sops D

288
00:19:18,050 --> 00:19:21,710
and we can see that we have the value 42 very thicket number,

289
00:19:21,780 --> 00:19:25,154
the meaning of the universe. And the idea is

290
00:19:25,192 --> 00:19:29,326
that using sops we can put secrets

291
00:19:29,358 --> 00:19:33,726
inside the repository but they are safe because they are encrypted

292
00:19:33,838 --> 00:19:38,450
or safe to some degree. I mean there are some tradeoffille.

293
00:19:39,290 --> 00:19:42,886
So my knit file here that I have is basically

294
00:19:43,068 --> 00:19:46,790
taking the dependencies and

295
00:19:46,940 --> 00:19:50,534
it's going to insert them inside can

296
00:19:50,572 --> 00:19:53,706
end file. So I'm going to have like an end

297
00:19:53,728 --> 00:19:56,794
file for the application. I'm not going to show it here obviously.

298
00:19:56,992 --> 00:20:00,700
And basically I have an app of python that is running,

299
00:20:01,390 --> 00:20:05,002
that can run. Additionally, I want to show you that I have the launch

300
00:20:05,066 --> 00:20:09,006
JSOn for vs code that define how I'm going to

301
00:20:09,028 --> 00:20:11,200
run the application itself.

302
00:20:11,970 --> 00:20:16,034
So if I'm going here and I click I'm going

303
00:20:16,072 --> 00:20:20,530
to run the application with a debugger and

304
00:20:20,600 --> 00:20:24,158
everything should just walk. So let's

305
00:20:24,174 --> 00:20:27,446
see it. I have here like a

306
00:20:27,468 --> 00:20:31,560
marinator box. So let's try to send email to it.

307
00:20:42,150 --> 00:20:45,814
Okay, we got an email and that walk and

308
00:20:45,932 --> 00:20:48,920
I'm going to show additional cool. Using that.

309
00:20:49,690 --> 00:20:53,926
I can use the app here and I'm going to put here a breakpoint.

310
00:20:54,118 --> 00:20:56,860
And let's send an additional email.

311
00:21:00,430 --> 00:21:03,930
And we see that we stop here at the breakpoint.

312
00:21:04,690 --> 00:21:09,102
We see the data of the object message and

313
00:21:09,156 --> 00:21:11,360
everything looks just awesome.

314
00:21:13,330 --> 00:21:16,394
Now you've noticed here that I'm running on the localhost,

315
00:21:16,442 --> 00:21:20,354
but the application is running inside a container. So how

316
00:21:20,392 --> 00:21:23,634
does it work? So basically we

317
00:21:23,672 --> 00:21:27,266
do a port folder here. So we define that

318
00:21:27,368 --> 00:21:31,270
port 5000 is going to run on my machine.

319
00:21:31,690 --> 00:21:35,826
Basically the id is going to do it automatically. But I can also define

320
00:21:35,858 --> 00:21:39,394
it inside the dev container

321
00:21:39,522 --> 00:21:44,380
here with full port 5000.

322
00:21:46,270 --> 00:21:49,594
Okay, so that's it.

323
00:21:49,632 --> 00:21:53,274
For this example, we saw how

324
00:21:53,312 --> 00:21:57,482
we use sops for encrypting secrets. Actually this practice

325
00:21:57,546 --> 00:22:00,826
is common when dealing with githubs,

326
00:22:00,858 --> 00:22:04,222
when doing like deployment to production. And we want

327
00:22:04,276 --> 00:22:07,618
the production configuration file to be

328
00:22:07,784 --> 00:22:11,566
source controlled. There are other solution, Jetseyker,

329
00:22:11,598 --> 00:22:15,582
Gitcrypt, some others. The good thing about soaps

330
00:22:15,646 --> 00:22:19,286
however, that it's really flexible. So I

331
00:22:19,308 --> 00:22:22,710
shown an example of GPG keys, which is nice to start,

332
00:22:22,780 --> 00:22:27,590
but it can be difficult to store these keys safely.

333
00:22:28,490 --> 00:22:32,026
But the good thing about sops is

334
00:22:32,048 --> 00:22:35,274
that it can integrate with cloud encryption and service solution such

335
00:22:35,312 --> 00:22:38,940
as AWS, kms or keyvault. And basically the services

336
00:22:40,990 --> 00:22:45,290
change the problem from storing

337
00:22:45,370 --> 00:22:50,218
private keys to having the right access controls

338
00:22:50,394 --> 00:22:53,374
for keys. So it's really nice.

339
00:22:53,492 --> 00:22:57,382
And that way we can have secure access control with SSR

340
00:22:57,466 --> 00:23:01,170
and everything that we need. And the key never leave

341
00:23:01,320 --> 00:23:05,246
the cloud provider. The private keys, the metadata

342
00:23:05,278 --> 00:23:08,878
is also saved encrypted. So you saw that the JSON contained

343
00:23:08,894 --> 00:23:11,926
the name of the keys we want to

344
00:23:11,948 --> 00:23:15,398
encrypt. So it's nice because we can do like this using and check history

345
00:23:15,484 --> 00:23:18,360
easily. So that's pretty cool.

346
00:23:18,970 --> 00:23:22,898
I also showed example of using the id settings define

347
00:23:22,914 --> 00:23:28,202
a launch JSON file for

348
00:23:28,256 --> 00:23:31,530
defining the debug configuration and doing port forwarding.

349
00:23:32,190 --> 00:23:34,460
So let's move to the next project.

350
00:23:35,810 --> 00:23:37,920
I'm just going to close that.

351
00:23:41,410 --> 00:23:44,782
Okay, so next

352
00:23:44,836 --> 00:23:48,622
project is actually a real big

353
00:23:48,676 --> 00:23:50,530
project. It's called Ebetica.

354
00:23:51,430 --> 00:23:55,826
It's like a big application that I

355
00:23:55,848 --> 00:24:00,854
think has been around for eight

356
00:24:00,892 --> 00:24:04,342
or nine years or something like that. I remember using

357
00:24:04,396 --> 00:24:07,922
it in the past. It's like you have like a task management

358
00:24:07,986 --> 00:24:10,230
solution like Trello,

359
00:24:10,810 --> 00:24:14,086
but more sophisticated like with habits. And it's

360
00:24:14,118 --> 00:24:18,010
designed for your own life, organizing your own life. And it's completely

361
00:24:18,160 --> 00:24:22,042
gamified. So like an rpg. And it's really a cool

362
00:24:22,096 --> 00:24:25,414
project. Now it's an open source

363
00:24:25,462 --> 00:24:29,226
and also like a website. And we have a

364
00:24:29,248 --> 00:24:32,894
new challenge. It's like a huge project. We have front end, back end

365
00:24:33,012 --> 00:24:34,880
and a database here.

366
00:24:36,550 --> 00:24:39,620
And I'm going to show how we are going to run it.

367
00:24:45,990 --> 00:24:46,740
Okay,

368
00:24:49,430 --> 00:24:53,394
so here is the project and let's start again by checking

369
00:24:53,442 --> 00:24:56,854
out our dev container, because the project is kind

370
00:24:56,892 --> 00:25:00,262
of heavy. I already run it, so to save us some time.

371
00:25:00,396 --> 00:25:04,058
So here is the project. Now you see that not just using a

372
00:25:04,064 --> 00:25:07,590
Docker file, I'm using a docker compose file that define

373
00:25:07,670 --> 00:25:11,546
the environment and not just the id, because we want to

374
00:25:11,568 --> 00:25:14,906
have a database here. So here we

375
00:25:14,928 --> 00:25:16,590
have the docker compose.

376
00:25:18,370 --> 00:25:20,880
This is the dev container itself.

377
00:25:22,290 --> 00:25:26,042
And we can see that we inject some environment variable

378
00:25:26,106 --> 00:25:29,746
and define the workspace. You can

379
00:25:29,768 --> 00:25:33,060
ignore these labels for now, I will expand them later.

380
00:25:34,470 --> 00:25:38,146
We have the DB here, which is a mongodb. We have

381
00:25:38,168 --> 00:25:42,210
Mongo Express, which is a tool I've added that can provide us visibility.

382
00:25:42,290 --> 00:25:45,958
CTo the Mongo, what's going on inside? We have

383
00:25:46,044 --> 00:25:49,558
traffic, which is a reverse proxy that I'm going to use because

384
00:25:49,644 --> 00:25:53,210
if the service have lots of port and I'm going to run

385
00:25:53,280 --> 00:25:55,900
everything on a single port.

386
00:25:57,950 --> 00:26:01,350
And we have the docker file that include

387
00:26:01,510 --> 00:26:05,402
the Mongo CLI tools and

388
00:26:05,456 --> 00:26:07,980
Javascript code version, basically.

389
00:26:08,750 --> 00:26:12,554
So you can see that if I open in a terminal, I have

390
00:26:12,672 --> 00:26:14,570
the Mongo shell.

391
00:26:22,790 --> 00:26:25,986
Yeah, sorry. So that's it. And I

392
00:26:26,008 --> 00:26:31,990
also have extension of like Mongo and vs code DB

393
00:26:32,330 --> 00:26:36,166
extension. Okay, so let's see the

394
00:26:36,188 --> 00:26:39,846
first thing I'm going to show here. I'm coding to run all

395
00:26:39,868 --> 00:26:43,530
the project here. So we have the client and storybook agent

396
00:26:43,600 --> 00:26:46,220
running and I'm going to run the server as well.

397
00:26:46,670 --> 00:26:52,810
Now this project has many

398
00:26:52,960 --> 00:26:58,000
applications that are running. So we have the

399
00:26:59,330 --> 00:27:02,734
UI application that is basically a storybook to

400
00:27:02,852 --> 00:27:05,870
see the design system of every compose.

401
00:27:06,850 --> 00:27:10,654
We have the docs which has the rest API

402
00:27:10,702 --> 00:27:14,930
and everything. You can see that everything is running currently locally.

403
00:27:15,270 --> 00:27:19,086
We have the application itself and

404
00:27:19,128 --> 00:27:23,506
I've also added like the Mongo Express which contain connected

405
00:27:23,538 --> 00:27:26,774
to the database. And I'm going to log

406
00:27:26,812 --> 00:27:30,326
into the application. So I'm going to need a

407
00:27:30,348 --> 00:27:35,782
user. And luckily the application already

408
00:27:35,916 --> 00:27:39,290
has a user here, the test user,

409
00:27:40,670 --> 00:27:47,500
which I'm going to use in login test.

410
00:28:07,230 --> 00:28:10,378
Okay, that's weird. Let's see.

411
00:28:10,544 --> 00:28:13,920
Oh, the server is not running for some reason.

412
00:28:16,210 --> 00:28:24,110
Let's see what's going on here's,

413
00:28:28,550 --> 00:28:30,820
maybe I've exhausted the resource here.

414
00:28:32,950 --> 00:28:36,802
Okay, so yeah,

415
00:28:36,936 --> 00:28:39,220
now it looks like it's working,

416
00:28:40,550 --> 00:28:44,802
or at least it's loading. In the meantime,

417
00:28:44,946 --> 00:28:48,646
how did I have this user? Basically I

418
00:28:48,668 --> 00:28:52,182
edited some data which are initial

419
00:28:52,246 --> 00:28:55,914
data that I'm using for data setting. And when the dev

420
00:28:55,952 --> 00:28:59,674
container is created I'm also going to do like

421
00:28:59,712 --> 00:29:03,520
a Mongo import and add the data

422
00:29:05,730 --> 00:29:09,854
cto the database. So everyone that is going to run this project is

423
00:29:09,892 --> 00:29:13,646
going to have the initial data and we see

424
00:29:13,668 --> 00:29:17,006
that the login works. And there I have like my test user

425
00:29:17,118 --> 00:29:20,354
and with mission like cardio or process email and stuff

426
00:29:20,392 --> 00:29:23,570
like that. So this is like a complex project.

427
00:29:23,640 --> 00:29:30,182
We see that we have several application

428
00:29:30,316 --> 00:29:34,066
running servers running and to achieve

429
00:29:34,098 --> 00:29:38,006
that, that everything run on the same port. We see that everything is on port

430
00:29:38,108 --> 00:29:41,926
8000. I've added the reverse proxy

431
00:29:42,118 --> 00:29:46,490
which is defined the Docker compose here it's called traffic

432
00:29:46,910 --> 00:29:50,746
and the idea is it's listening on port 88,000.

433
00:29:50,848 --> 00:29:54,302
But based on the labels the other services have

434
00:29:54,356 --> 00:29:58,362
in the Docker compose, it's going to redirect

435
00:29:58,426 --> 00:30:01,886
traffic. For example from Mongo localtest me to

436
00:30:01,908 --> 00:30:04,560
the server Mongo Express on port 9000.

437
00:30:05,330 --> 00:30:08,974
So the same go for the application with the docs,

438
00:30:09,102 --> 00:30:13,102
Docs, the UI and local test. So that's

439
00:30:13,166 --> 00:30:15,460
basically this application.

440
00:30:17,050 --> 00:30:20,982
I'll stop it because seem more

441
00:30:21,036 --> 00:30:24,134
heavy and let's go back

442
00:30:24,172 --> 00:30:27,830
to the slides. So we saw here a full stack application that used local

443
00:30:27,900 --> 00:30:31,698
compose and DB image of mongo and additional tools like the Mongo

444
00:30:31,714 --> 00:30:35,290
Express. I did some data setting with basic scripts.

445
00:30:35,710 --> 00:30:39,434
Alternatively we can cloud data from staging or production if

446
00:30:39,472 --> 00:30:42,922
needed. I showed the example of using a reverse proxy.

447
00:30:42,986 --> 00:30:47,150
So instead of using ports which are shared,

448
00:30:47,730 --> 00:30:51,294
we don't want to exhaust them. I'm using like a

449
00:30:51,332 --> 00:30:55,178
wild card. And also it's more convenient CTO use subdomains

450
00:30:55,194 --> 00:30:58,382
than numbers. I'm using like a wild card localhost

451
00:30:58,446 --> 00:31:02,594
DNS. So basically the localtest me

452
00:31:02,792 --> 00:31:07,426
or there are other domains like XIP are domains

453
00:31:07,458 --> 00:31:11,990
that every subdomain of these contains

454
00:31:13,690 --> 00:31:17,414
is going to point to our localist. So very

455
00:31:17,452 --> 00:31:20,690
cool trick. And you can also create one yourself in

456
00:31:20,700 --> 00:31:23,260
terms of security and not using the public one.

457
00:31:23,790 --> 00:31:28,282
And we use traffic which is a very simple

458
00:31:28,336 --> 00:31:32,022
and developer friendly reverse boxing. The nice thing is read the Docker compose

459
00:31:32,086 --> 00:31:36,026
definition. So it's very easy to use and also integrates

460
00:31:36,138 --> 00:31:39,482
well not just with Docker compose also with kubernetes

461
00:31:39,546 --> 00:31:43,246
and other tools. So let's go to the next example.

462
00:31:43,348 --> 00:31:46,586
And next one is personal. That's tweak,

463
00:31:46,618 --> 00:31:50,286
the project I talked about before. It's a cloud native open source

464
00:31:50,318 --> 00:31:53,170
feature, flag and configuration management.

465
00:31:53,990 --> 00:31:57,554
It got lots of microservices, several DB

466
00:31:57,602 --> 00:32:01,426
and messaging system, cross communication, polyglot environment.

467
00:32:01,458 --> 00:32:06,642
We use typescape, net and go complex

468
00:32:06,706 --> 00:32:09,846
architecture. The services talk with each other and

469
00:32:09,948 --> 00:32:14,010
you don't need to understand this picture to see that it's a complex thing.

470
00:32:14,160 --> 00:32:17,654
And we are going CTO run it as well inside the dev container

471
00:32:17,782 --> 00:32:19,420
and provide great experience.

472
00:32:22,450 --> 00:32:26,174
So that's the project of tweak. The first thing

473
00:32:26,212 --> 00:32:29,770
I'm going to show is that in the Docker file,

474
00:32:29,930 --> 00:32:33,706
I'm going to install Docker

475
00:32:33,738 --> 00:32:37,554
in Docker. So the idea is that instead of using the

476
00:32:37,592 --> 00:32:41,554
Docker oss we have on my machine, I'm going to use an

477
00:32:41,592 --> 00:32:44,946
internal docker, a nested one. So you can

478
00:32:44,968 --> 00:32:48,386
see that my docker PS here is

479
00:32:48,488 --> 00:32:52,390
empty. And if I'll run the same command on

480
00:32:52,460 --> 00:32:55,490
my computer. So naturally I'll see all the dev containers.

481
00:32:55,570 --> 00:32:59,486
So we see like it's a dedicated container

482
00:32:59,538 --> 00:33:01,180
for this project.

483
00:33:02,430 --> 00:33:06,234
Dedicated Docker demon for this project I'm installing net

484
00:33:06,272 --> 00:33:09,558
five Golang node js and yarn. I have all the tools

485
00:33:09,574 --> 00:33:12,810
I need for development and I'm also installing tilt.

486
00:33:12,970 --> 00:33:16,350
Now tilt is a very nice solution

487
00:33:17,490 --> 00:33:22,414
that is designed to solve the problem that in

488
00:33:22,452 --> 00:33:26,254
tweak we have like the environment itself is developed inside a container.

489
00:33:26,302 --> 00:33:28,850
That's the easiest way to develop tweak.

490
00:33:29,430 --> 00:33:32,722
So we have like this yaml that defined all

491
00:33:32,776 --> 00:33:36,274
our services and

492
00:33:36,312 --> 00:33:40,358
what tilt does, it basically provides us tool for

493
00:33:40,444 --> 00:33:44,200
editing the files and changing them and

494
00:33:44,650 --> 00:33:48,258
replacing code inside the container, or rebuilding our images

495
00:33:48,354 --> 00:33:51,866
in an automatic way. So how does it look like?

496
00:33:52,048 --> 00:33:55,866
I'm going to open additional terminal here

497
00:33:56,048 --> 00:34:00,054
and we see that all the services of tweak are running inside the nested

498
00:34:00,102 --> 00:34:03,614
container and in tilt it

499
00:34:03,652 --> 00:34:06,766
also has Ui to see the application here.

500
00:34:06,948 --> 00:34:10,366
So let's see that we

501
00:34:10,388 --> 00:34:13,440
have tilt here. Let's see that it's running on the right port.

502
00:34:15,590 --> 00:34:19,634
Yeah. Okay, so that's the

503
00:34:19,672 --> 00:34:23,582
tweak application. We can see that all the services that are running tilt,

504
00:34:23,726 --> 00:34:27,766
some of these services are services of tweak itself,

505
00:34:27,948 --> 00:34:31,606
others are tools for mimicking the

506
00:34:31,628 --> 00:34:34,886
cloud environment. So we have for example Minio, that is

507
00:34:34,908 --> 00:34:38,562
a tool for object storage.

508
00:34:38,626 --> 00:34:42,238
Like s three, we have nats, which is a message broker for passing

509
00:34:42,274 --> 00:34:46,042
messages. Redis which is a database that in the cloud you can use like the

510
00:34:46,096 --> 00:34:49,354
osted version of it. And we have our

511
00:34:49,392 --> 00:34:52,730
ADC server mock which is like an OpenID connect

512
00:34:52,800 --> 00:34:56,414
provider in production. We can use Google or something like

513
00:34:56,452 --> 00:34:59,806
that. And we have the other services of tweak. And the

514
00:34:59,828 --> 00:35:03,306
idea is that every time I'm going to do a change to the code it's

515
00:35:03,338 --> 00:35:06,990
going to either rebuild the project or try to do

516
00:35:07,060 --> 00:35:11,006
auto reloading. In this example I'm going to show like an auto

517
00:35:11,038 --> 00:35:14,770
loading example. So here is the login page of tweak.

518
00:35:15,270 --> 00:35:19,462
I'll just refresh it to make sure we are working

519
00:35:19,516 --> 00:35:21,270
on our latest version.

520
00:35:22,490 --> 00:35:25,766
And we see we have the page here and

521
00:35:25,788 --> 00:35:28,280
I'm going to change the title here,

522
00:35:30,270 --> 00:35:35,034
make it a bit bigger and

523
00:35:35,072 --> 00:35:38,154
that's basically it. And yeah we see that it

524
00:35:38,192 --> 00:35:41,754
walk instantly and it's pretty amazing.

525
00:35:41,872 --> 00:35:45,566
I mean I wish we has that kind of developer experience a

526
00:35:45,568 --> 00:35:49,086
few years ago when we did that Akaton it will be totally a

527
00:35:49,108 --> 00:35:52,640
game changer. So that's really amazing.

528
00:35:53,010 --> 00:35:56,750
So let's go back again to the slides.

529
00:35:57,270 --> 00:36:01,134
So we saw the example of tweak. In tweak we are using nested containers.

530
00:36:01,182 --> 00:36:05,058
So we have like Docker and Docker running inside. There are different

531
00:36:05,144 --> 00:36:08,766
ways to run it, but if we are using nested container

532
00:36:08,798 --> 00:36:12,326
with Docker compose, tilt is great for watching rebuilding on

533
00:36:12,348 --> 00:36:15,746
every code commit or doing code reloading or remote debugging.

534
00:36:15,778 --> 00:36:19,414
Everything works. It can be a bit slower because we are running again

535
00:36:19,452 --> 00:36:23,290
inside containers that also run inside a container.

536
00:36:24,190 --> 00:36:27,878
Tweak also use the practice of mocking cloud dependencies. CTO work properly

537
00:36:27,974 --> 00:36:32,070
so we have docker images of database. We have wire compatible solution like minio

538
00:36:32,150 --> 00:36:35,498
or OIDC Mac server. Other tricks you

539
00:36:35,504 --> 00:36:39,370
can use to mark load dependencies can be manual docs or full frameworks

540
00:36:39,530 --> 00:36:42,782
like local stack. And the last

541
00:36:42,836 --> 00:36:46,386
example I'm going to show is Kubecost. This is actually an

542
00:36:46,408 --> 00:36:50,606
example that we run our dev container

543
00:36:50,638 --> 00:36:54,146
inside a complex platform. In this case the platform is

544
00:36:54,168 --> 00:36:57,266
kubernetes and we need to install.

545
00:36:57,368 --> 00:37:00,678
Kubecost is a tool for managing the Kubernetes cost. So we

546
00:37:00,684 --> 00:37:04,594
need a Kubernetes cluster, we need a metric server and we need Prometheus

547
00:37:04,642 --> 00:37:11,058
which is like a monitoring we.

548
00:37:11,164 --> 00:37:14,986
What can we do with kubernetes? So the first thing CTO remember is

549
00:37:15,008 --> 00:37:18,362
that kubernetes local development is difficult today.

550
00:37:18,496 --> 00:37:22,214
We have fragmentation, we have different versioning, we have different distribution,

551
00:37:22,262 --> 00:37:26,494
we have like mini Cube Docker for desktop micro kubernetes kind

552
00:37:26,692 --> 00:37:30,000
k three s and everything is a bit different.

553
00:37:31,570 --> 00:37:34,910
And you notice this differentiation especially when you develop

554
00:37:34,980 --> 00:37:38,126
in a project that use the Kubernetes

555
00:37:38,238 --> 00:37:41,454
API. So using a single Kubernetes

556
00:37:41,502 --> 00:37:43,620
distro and version can make life easy.

557
00:37:44,470 --> 00:37:47,960
And I'm going to start with our example

558
00:37:50,330 --> 00:37:53,206
and that's the last one as I mentioned before.

559
00:37:53,388 --> 00:37:56,646
So inside this dev container you can see

560
00:37:56,668 --> 00:38:00,380
that I have kubernetes running.

561
00:38:04,590 --> 00:38:09,130
That's awesome. I'll just also going

562
00:38:09,200 --> 00:38:14,110
to turn down tweak because

563
00:38:14,260 --> 00:38:18,046
again it's like every project. So we

564
00:38:18,068 --> 00:38:21,546
have the dev container Json here we define the extension

565
00:38:21,578 --> 00:38:27,122
we want to have Yaml Golang Kubernetes tools and

566
00:38:27,176 --> 00:38:30,878
the Docker file here install, not just go and code

567
00:38:30,894 --> 00:38:34,562
js. We also install here

568
00:38:34,696 --> 00:38:38,722
Docker in Docker. So we have a nested Docker demon

569
00:38:38,786 --> 00:38:43,830
and inside we are using a tool called k

570
00:38:43,900 --> 00:38:47,906
install ion. So K for provisioning

571
00:38:48,018 --> 00:38:51,626
a k three s clusters. So we can see

572
00:38:51,648 --> 00:38:55,274
that I'm having a cluster here that is running and the

573
00:38:55,312 --> 00:38:59,062
idea is that KFS is a very minimal distribution

574
00:38:59,126 --> 00:39:02,938
of kubernetes so it can run very fast and it's

575
00:39:02,954 --> 00:39:06,874
also like a single process. So it's

576
00:39:06,922 --> 00:39:09,520
very awesome project.

577
00:39:11,010 --> 00:39:13,550
Now I'm going to run tilt as usual.

578
00:39:14,310 --> 00:39:17,940
And if you'll notice on the contribution guide here,

579
00:39:19,110 --> 00:39:22,946
basically when you want to build, they tell

580
00:39:22,968 --> 00:39:26,498
you to Docker, build a project, edit the

581
00:39:26,504 --> 00:39:30,418
deployment YaML file, set the environment variable to

582
00:39:30,424 --> 00:39:33,640
the permitted server, create namespace, apply.

583
00:39:34,810 --> 00:39:38,854
And basically the good thing about it is that if

584
00:39:38,892 --> 00:39:42,954
we are using these tools, we don't need to do it because everything is happening

585
00:39:43,072 --> 00:39:46,774
automatically. So tilt is also integrated with kubernetes

586
00:39:46,902 --> 00:39:50,054
and in this case we actually have a registry.

587
00:39:50,182 --> 00:39:54,746
So every time we do a change you

588
00:39:54,768 --> 00:39:58,410
can see here that we have a server and a cube cost

589
00:39:58,480 --> 00:40:02,574
registry here. So every time we're going to do a change to the goal and

590
00:40:02,612 --> 00:40:05,806
code. So Tilt is going CTo rebuild the project, push the image

591
00:40:05,838 --> 00:40:09,780
and replace it in the Kubernetes deployment. So that's pretty amazing.

592
00:40:11,830 --> 00:40:15,380
Let's see that our project work here.

593
00:40:16,310 --> 00:40:20,422
So this project also has UI and

594
00:40:20,476 --> 00:40:29,094
also this data here we see that we

595
00:40:29,132 --> 00:40:32,940
have here the data, we can see it from today,

596
00:40:33,870 --> 00:40:36,620
we can see it by pod for example.

597
00:40:37,470 --> 00:40:40,698
So the different Kubernetes pods that are running,

598
00:40:40,864 --> 00:40:42,960
we can see that the API is running.

599
00:40:43,650 --> 00:40:48,094
And basically the tilt file definition here we

600
00:40:48,132 --> 00:40:52,046
define how we build the image, what the Kubernetes yaml we

601
00:40:52,068 --> 00:40:55,330
are using. And also I define the resource for the UI.

602
00:40:55,750 --> 00:40:59,214
So for the UI we still have auto coding

603
00:40:59,262 --> 00:41:02,718
and the UI itself is not running in this case in Kubernetes

604
00:41:02,814 --> 00:41:04,690
it's like a local resource.

605
00:41:07,290 --> 00:41:10,614
Just to showcase how fast is k three

606
00:41:10,652 --> 00:41:13,750
s. I'm going CTo delete the cluster.

607
00:41:22,910 --> 00:41:26,300
Okay. And let's run it again.

608
00:41:31,230 --> 00:41:32,010
It's.

609
00:41:35,500 --> 00:41:39,770
And you'll notice that I have a running

610
00:41:45,340 --> 00:41:51,084
Kubernetes server in

611
00:41:51,122 --> 00:41:53,260
less than 20 seconds.

612
00:41:57,440 --> 00:41:59,490
So that's pretty amazing.

613
00:42:04,500 --> 00:42:07,360
You can see get node,

614
00:42:10,100 --> 00:42:12,390
so that's really amazing.

615
00:42:16,120 --> 00:42:19,744
If you use Kubernetes other distribution

616
00:42:19,872 --> 00:42:24,068
like mini cube or micro even kind,

617
00:42:24,154 --> 00:42:27,416
you will see that usually it takes some time. And the good thing

618
00:42:27,438 --> 00:42:31,912
about k three s and together with k

619
00:42:32,046 --> 00:42:36,292
very fast and we have also a dedicated registry, the cluster is stable.

620
00:42:36,356 --> 00:42:39,896
Also k three s has special integration for ELM, so we can

621
00:42:39,918 --> 00:42:44,168
install the helm chart declaratively. That's what's actually happening with the Prometheus.

622
00:42:44,264 --> 00:42:47,576
We have a Prometheus file definition there in the repository

623
00:42:47,688 --> 00:42:53,264
and we have tilts that facilitate building publishing running if

624
00:42:53,302 --> 00:42:57,024
we put it in terms of what's happening in this example.

625
00:42:57,142 --> 00:43:00,940
So we have our docker machine, our Docker rosk inside. We have a dev container

626
00:43:01,020 --> 00:43:05,170
inside. We have our ide inside.

627
00:43:05,700 --> 00:43:08,724
In the dev container we also have Docker and Docker demon that have

628
00:43:08,762 --> 00:43:12,244
like a registry, a kfres node that run

629
00:43:12,282 --> 00:43:15,784
container D that run our application. Or if we'll try

630
00:43:15,822 --> 00:43:27,400
to put it more visually, it's something like that's.

631
00:43:30,080 --> 00:43:33,580
So no more demos. And thank you for your patience,

632
00:43:34,080 --> 00:43:38,232
I hope you enjoyed it. So I'll summarize.

633
00:43:38,296 --> 00:43:41,760
So we use containers delelopment environments.

634
00:43:42,340 --> 00:43:46,076
The cool thing about it is that development environment configuration

635
00:43:46,188 --> 00:43:49,644
is also source control. The development ships

636
00:43:49,692 --> 00:43:52,996
stay clean, can scale well to multiple environments without conflict, as you

637
00:43:53,018 --> 00:43:56,356
see in this presentation. And it can run locally or

638
00:43:56,378 --> 00:44:00,036
remotely. Our setup in

639
00:44:00,058 --> 00:44:03,856
lifecycle actually is composed of lots of microservices

640
00:44:03,968 --> 00:44:07,172
and front end report model reloading.

641
00:44:07,236 --> 00:44:10,612
We have our own kubernetes, custom resources and controllers,

642
00:44:10,756 --> 00:44:14,756
graphQL engine, full blown CI system, stuff related

643
00:44:14,788 --> 00:44:17,320
to SSL certificate and dynamic DNS.

644
00:44:17,820 --> 00:44:21,356
A lot of CLI tool for code generation and at the

645
00:44:21,378 --> 00:44:24,636
end the time to tear down and build all the cluster and the

646
00:44:24,658 --> 00:44:28,108
dependencies locally for development is less than 15 minutes.

647
00:44:28,274 --> 00:44:32,268
Time to build, run test code changes like 10 seconds

648
00:44:32,364 --> 00:44:35,580
time to onboard a new developer including

649
00:44:35,660 --> 00:44:39,424
revision provisioning in Austin AWS is less than 3

650
00:44:39,462 --> 00:44:43,276
hours because we are working remotely. You can walk either remotely

651
00:44:43,308 --> 00:44:47,284
or locally on your docker. We don't have walking on

652
00:44:47,322 --> 00:44:51,236
machine occurrences. It's very easy to introduce new tool.

653
00:44:51,338 --> 00:44:54,928
We don't have strand on our developer machines and our

654
00:44:54,954 --> 00:44:59,256
team can work both with M one and Max in

655
00:44:59,278 --> 00:45:02,664
the future we hope to optimize it more. We have to have

656
00:45:02,702 --> 00:45:06,424
shared build cache snapshots, maybe use a cloud provider

657
00:45:06,472 --> 00:45:08,860
that will provide us the best dev machines.

658
00:45:10,080 --> 00:45:13,950
There are some drawbacks, however, the initial setup can take some time

659
00:45:14,640 --> 00:45:16,990
to work. We need to code everything.

660
00:45:17,840 --> 00:45:21,020
We use many tools, some are bleeding edge.

661
00:45:21,600 --> 00:45:24,624
Basically using dev container actually make you feel like yeah,

662
00:45:24,662 --> 00:45:28,684
I'll add additional tools because it makes easy because there's no installation,

663
00:45:28,732 --> 00:45:32,244
but we need to be careful with that. There's additional code

664
00:45:32,282 --> 00:45:35,968
to manage. Obviously the code of the docker file and the definition

665
00:45:36,144 --> 00:45:39,524
the environment are not standardized yet. So in our example

666
00:45:39,642 --> 00:45:44,356
we are using the

667
00:45:44,378 --> 00:45:48,084
definition that are defined by vs code. So naturally we are pretty coupled

668
00:45:48,132 --> 00:45:51,544
to Vs code. There are some performance issues and

669
00:45:51,582 --> 00:45:54,756
there can be security challenges between development and production concept,

670
00:45:54,788 --> 00:45:57,660
especially if you use secret encrypted.

671
00:45:58,880 --> 00:46:02,460
There are alternative to vs code, but I haven't tried

672
00:46:02,530 --> 00:46:06,636
them. So it can be possible to use like terminal based code editors and

673
00:46:06,658 --> 00:46:10,384
working on a remote container. There's Gitpod, IO and FIA that

674
00:46:10,422 --> 00:46:13,664
have similar features with Gitpod Yaml. I played it a lot.

675
00:46:13,782 --> 00:46:17,776
I played it in the past and not on

676
00:46:17,798 --> 00:46:20,976
complex environments. Jetbrains has

677
00:46:20,998 --> 00:46:24,924
a solution for a remote

678
00:46:24,972 --> 00:46:28,436
environment by using Jetblain projector. I haven't tried it,

679
00:46:28,458 --> 00:46:32,304
but it's supposed that you walk on a remote

680
00:46:32,352 --> 00:46:36,440
id and it's like projected CTO it to you or something like that.

681
00:46:36,590 --> 00:46:39,684
And we can run local id with docker mounts,

682
00:46:39,732 --> 00:46:42,730
but I don't recommend it that much.

683
00:46:44,780 --> 00:46:48,670
I haven't shown can example of serverless but it should be possible.

684
00:46:52,720 --> 00:46:56,120
If you can run it locally you can probably run it in dev container

685
00:46:56,200 --> 00:47:00,460
and the same rules apply in regard to mocking cloud frameworks.

686
00:47:01,040 --> 00:47:04,660
So use cloud mocking frameworks or build compliant

687
00:47:04,760 --> 00:47:08,704
solution like minio and if you're necessary you can

688
00:47:08,742 --> 00:47:12,676
maybe throw infrastructure as code tool to the mix to do

689
00:47:12,698 --> 00:47:16,596
a dynamic provisioning. Native mobile is

690
00:47:16,618 --> 00:47:19,700
a different story on this. I'm not that optimist.

691
00:47:22,840 --> 00:47:25,210
It might be possible to stream application,

692
00:47:26,860 --> 00:47:30,744
but mobile emulators are heavy and

693
00:47:30,782 --> 00:47:34,392
the container ecosystem is optimized for Linux and the

694
00:47:34,526 --> 00:47:38,216
ids are very tailored for mobile development.

695
00:47:38,408 --> 00:47:42,616
It might be easier with cross platform frameworks like React

696
00:47:42,648 --> 00:47:46,012
native or flutter. I will say however that this problem

697
00:47:46,146 --> 00:47:50,128
is really difficult. I remember having like epic battle with my

698
00:47:50,214 --> 00:47:53,264
ide that I work on with the

699
00:47:53,302 --> 00:47:57,276
ID and the tools when I worked on Android or iOS development.

700
00:47:57,388 --> 00:47:59,810
So I hope it will be better in the future.

701
00:48:01,140 --> 00:48:04,516
And the nice thing about it is that we're seeing a

702
00:48:04,538 --> 00:48:08,420
trend that is about putting more stuff in the repository.

703
00:48:09,240 --> 00:48:12,580
We see that in the last decade we added more stuff.

704
00:48:12,650 --> 00:48:16,644
It's not just the code, we have our design system there, the open API

705
00:48:16,692 --> 00:48:21,572
specification documentation infrastructure as code secrets

706
00:48:21,636 --> 00:48:26,248
notebook and the workflows are based on

707
00:48:26,414 --> 00:48:29,600
the repository like PR workflows.

708
00:48:29,700 --> 00:48:33,436
So it's really nice and I think

709
00:48:33,458 --> 00:48:37,292
that in the future it will be more so. The idea is that every

710
00:48:37,346 --> 00:48:40,944
repository will be self container. All the code, tools, knowledge and

711
00:48:40,982 --> 00:48:45,452
definition are in the repository git act as a single source of truth.

712
00:48:45,596 --> 00:48:49,212
Code is more accessible, the barrier of entry is lowered,

713
00:48:49,356 --> 00:48:54,084
the application are portable which is nice and we

714
00:48:54,122 --> 00:48:59,184
can control the developer experience which is very empowering

715
00:48:59,232 --> 00:49:03,344
that if I'm having a repository I can also control

716
00:49:03,482 --> 00:49:07,224
how to create an amazing developer experience for

717
00:49:07,262 --> 00:49:10,330
developers when they start using my project.

718
00:49:11,020 --> 00:49:14,696
And I believe that these trends will

719
00:49:14,718 --> 00:49:18,492
create can emerging tool of ecosystem. We already

720
00:49:18,546 --> 00:49:22,364
see it with remote ides and

721
00:49:22,482 --> 00:49:25,740
PR environment solution and even tools like

722
00:49:25,890 --> 00:49:29,484
Livecycle that take the repository and

723
00:49:29,522 --> 00:49:33,116
create like a live version for other team members to

724
00:49:33,138 --> 00:49:36,988
collaborate with. So I'm very

725
00:49:37,074 --> 00:49:40,556
excited about it and

726
00:49:40,658 --> 00:49:43,796
I've tools and patterns in

727
00:49:43,818 --> 00:49:47,636
this demo. So this is like a patterns and

728
00:49:47,658 --> 00:49:50,230
cheat sheet table that you can use.

729
00:49:50,760 --> 00:49:54,484
But everything is going to be like on my repository and I'm going

730
00:49:54,522 --> 00:49:57,844
to post everything on my Twitter account as well.

731
00:49:57,962 --> 00:50:00,240
So thank you very much. It's been a pleasure.

