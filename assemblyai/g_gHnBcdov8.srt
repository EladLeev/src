1
00:00:01,130 --> 00:00:04,526
Hi guys, my name is Serge and today I'm going to

2
00:00:04,548 --> 00:00:07,854
speak boot platform engineering. Before I

3
00:00:07,892 --> 00:00:11,310
start, let me tell you how relevant I am to this topic.

4
00:00:11,730 --> 00:00:15,482
In my career I went from a developer to technical

5
00:00:15,546 --> 00:00:18,270
leader and architect and managed a small team.

6
00:00:18,420 --> 00:00:22,266
Then with grow into the engineering management,

7
00:00:22,378 --> 00:00:25,686
director of engineering, senior director of engineering and global head

8
00:00:25,708 --> 00:00:29,222
of engineering. The size of the teams which I managed and worked

9
00:00:29,356 --> 00:00:33,894
with actually grew to more than 100.

10
00:00:34,012 --> 00:00:37,250
And together this complexity and tasks

11
00:00:37,330 --> 00:00:40,614
and dependencies and other pieces, it's not to show

12
00:00:40,652 --> 00:00:44,326
that the titles in your career grow and it's

13
00:00:44,358 --> 00:00:47,434
great, but to show the relevance to the topic. I'm still hands on.

14
00:00:47,472 --> 00:00:51,246
That's why you will see demos in this particular session with

15
00:00:51,268 --> 00:00:54,202
my teams we created different platforms,

16
00:00:54,346 --> 00:00:58,430
from mobile platforms to web cloud platforms where

17
00:00:58,500 --> 00:01:02,518
actually customers were able to use previously internal

18
00:01:02,554 --> 00:01:06,226
development platform. Now they're using this AWS

19
00:01:06,328 --> 00:01:09,842
customers running their applications. We'll speak about this

20
00:01:09,896 --> 00:01:12,802
later. How to achieve this. And as you see,

21
00:01:12,856 --> 00:01:15,538
I'm also a contributor to Terraform,

22
00:01:15,634 --> 00:01:19,394
ECMascript and other pieces

23
00:01:19,442 --> 00:01:22,514
of software and libraries and frameworks.

24
00:01:22,562 --> 00:01:25,000
So let's start.

25
00:01:26,010 --> 00:01:29,350
Main question you need to always to ask is why.

26
00:01:29,420 --> 00:01:32,662
Always start with why? Why do we have the

27
00:01:32,716 --> 00:01:36,150
problem and which problem we have and why platform

28
00:01:36,220 --> 00:01:39,606
engineering will solve so problem. Here we

29
00:01:39,628 --> 00:01:42,926
see kind of request to Chat GPT what

30
00:01:42,948 --> 00:01:45,946
is DevOps? DevOps as you see is methodology.

31
00:01:46,058 --> 00:01:51,402
Methodology, yeah, just describe the culture guidance

32
00:01:51,466 --> 00:01:55,154
and yada yada. So how do we start? Go figure. Of course

33
00:01:55,192 --> 00:01:58,434
I edited here, it was a bit of different answer,

34
00:01:58,552 --> 00:02:01,970
but it was long and not exactly prescribed.

35
00:02:03,030 --> 00:02:06,550
So I checked the

36
00:02:06,620 --> 00:02:10,194
state of DevOps and we have this number of the DevOps

37
00:02:10,242 --> 00:02:14,514
tools on cloud native landscape. You can open this particular URL

38
00:02:14,562 --> 00:02:18,698
and you see thousands of different

39
00:02:18,864 --> 00:02:23,062
tools which you can use for DevOps

40
00:02:23,126 --> 00:02:27,306
infrastructure development. The cognitive cloud went

41
00:02:27,408 --> 00:02:30,686
crazy as a result. Typically in

42
00:02:30,708 --> 00:02:34,702
many organizations we came to the situation

43
00:02:34,836 --> 00:02:37,934
when these tools and approaches use it

44
00:02:37,972 --> 00:02:42,046
in very very different ways, from different hosting to security to

45
00:02:42,068 --> 00:02:45,650
monitoring. It triggered their own problems, right?

46
00:02:45,720 --> 00:02:49,234
That architecturally you cannot align and

47
00:02:49,272 --> 00:02:52,734
provide the golden path. So technology alignment

48
00:02:52,782 --> 00:02:56,354
is hard. Security problem, no way to introduce

49
00:02:56,402 --> 00:02:59,846
the security scans and patches. Typically a centralized team.

50
00:02:59,948 --> 00:03:04,902
Today security growing and growing and growing in the not

51
00:03:04,956 --> 00:03:09,098
investment but attention side.

52
00:03:09,184 --> 00:03:13,162
So there is no way to scalably run security

53
00:03:13,296 --> 00:03:17,386
checks. Business problem, typical ask from

54
00:03:17,408 --> 00:03:21,114
the business is how you can do with less. Now we all have this

55
00:03:21,152 --> 00:03:24,646
particular questions more and more we see what happened

56
00:03:24,688 --> 00:03:28,720
in an industry. So we need to solve these particular problems

57
00:03:30,130 --> 00:03:33,534
and usual problems when it comes to coming to a practice.

58
00:03:33,582 --> 00:03:36,926
Yeah, common everyone wants to actually have speed

59
00:03:36,958 --> 00:03:40,894
to hire speed to onboarding,

60
00:03:40,942 --> 00:03:44,762
right? So the time to the first commit developers

61
00:03:44,926 --> 00:03:49,030
want to remove the cognitive load

62
00:03:49,770 --> 00:03:53,334
and asking give me some guidance framework inside of which

63
00:03:53,372 --> 00:03:57,330
I can just define my front end back end tooling. Give me the guidance.

64
00:03:57,490 --> 00:04:01,402
Engineering leaders apologize. Securities went

65
00:04:01,456 --> 00:04:04,810
to fix securities problems. If you remember lockflow j

66
00:04:04,880 --> 00:04:09,002
or NPM chain problems when

67
00:04:09,056 --> 00:04:12,814
some dependency of dependency is actually security

68
00:04:12,932 --> 00:04:16,190
vulnerable. And you need to solve this immediately

69
00:04:17,010 --> 00:04:20,350
and identify it. Not only solve ops want

70
00:04:20,420 --> 00:04:24,258
to do some improvements and business

71
00:04:24,344 --> 00:04:28,930
always asking the same can you operate with the same twice faster,

72
00:04:29,510 --> 00:04:32,930
delivers the same quality or better and be more cost

73
00:04:33,000 --> 00:04:36,040
efficient. Usual story the same. So you see,

74
00:04:36,490 --> 00:04:39,814
thanks to experience, I believe on your side it's similar. We can

75
00:04:39,852 --> 00:04:42,822
see this from different angles. Okay,

76
00:04:42,956 --> 00:04:46,518
so why platform engineering? Why even speaking about this?

77
00:04:46,604 --> 00:04:49,690
So if DevOps is a practice, so how

78
00:04:49,760 --> 00:04:52,870
can we apply this practice, this methodology,

79
00:04:52,950 --> 00:04:56,246
DevOps can be applied as platform engineering. Even Chat

80
00:04:56,278 --> 00:05:00,314
GPT will answer this exactly that.

81
00:05:00,432 --> 00:05:03,918
You can use platform engineering. So you can try and you

82
00:05:03,924 --> 00:05:07,742
will have similar answer. And we finally

83
00:05:07,876 --> 00:05:11,582
have data. So just typical question is just like don't speak

84
00:05:11,636 --> 00:05:15,442
too much search, show me the data. So the data from the late state

85
00:05:15,496 --> 00:05:19,060
of DevOps showing us that

86
00:05:19,990 --> 00:05:24,446
the direct impact on development velocity from platform engineering

87
00:05:24,558 --> 00:05:28,118
was highly, highly, just like measured and

88
00:05:28,204 --> 00:05:31,686
improved, right? Similar. We have about

89
00:05:31,868 --> 00:05:34,470
development speed, not velocities,

90
00:05:36,010 --> 00:05:40,006
but platform team in general just removes

91
00:05:40,118 --> 00:05:43,594
frictions. And to

92
00:05:43,632 --> 00:05:47,034
summarize DevOps is sorry,

93
00:05:47,072 --> 00:05:50,670
DevOps is the methodology and platform

94
00:05:50,740 --> 00:05:54,394
engineering is a so simple examples,

95
00:05:54,442 --> 00:05:58,078
right? So ECMAscript is for example a standard, right?

96
00:05:58,164 --> 00:06:01,326
And Javascript in the browser or

97
00:06:01,428 --> 00:06:04,914
P eight in Chrome browser as you know it is an

98
00:06:05,032 --> 00:06:08,354
implementation. So how you practically can do one thing

99
00:06:08,472 --> 00:06:12,660
in the way which suits you depending your browser or your

100
00:06:14,890 --> 00:06:18,946
ide similar here how you apply this in organization.

101
00:06:19,138 --> 00:06:23,410
Okay, so what are the objectives and goal

102
00:06:23,490 --> 00:06:26,806
for platform engineering? So platform as

103
00:06:26,828 --> 00:06:29,946
a product that's one of the main goals which you need

104
00:06:29,968 --> 00:06:33,418
to follow. And first, when you start building platform,

105
00:06:33,504 --> 00:06:37,226
make sure that main customers, it's your internal developers and your

106
00:06:37,248 --> 00:06:41,062
main metrics are customers net promoter score

107
00:06:41,126 --> 00:06:45,002
and adoption. So measure your adoption and how happy your customers

108
00:06:45,136 --> 00:06:48,942
what they say about your platform is your metric, right? There is

109
00:06:48,996 --> 00:06:52,826
billion ways to measure this. It's a big topic of different discussion.

110
00:06:52,938 --> 00:06:56,734
So here is typical steps you need to do to

111
00:06:56,772 --> 00:07:00,354
come to platform engineering. You can just follow them. I will not go

112
00:07:00,472 --> 00:07:03,714
in exactly. You can download this presentation and

113
00:07:03,752 --> 00:07:07,094
check the most important of course to make sure that you come

114
00:07:07,132 --> 00:07:11,442
into building cross functional team and you implement your internal development

115
00:07:11,506 --> 00:07:15,302
platform. So if you come into this question

116
00:07:15,436 --> 00:07:17,800
we need to understand how,

117
00:07:18,570 --> 00:07:22,838
right so typical teams topology. If I'm coming to build my

118
00:07:23,004 --> 00:07:26,298
cross functional team, what I need to do first

119
00:07:26,464 --> 00:07:30,638
after all this time of growth of

120
00:07:30,724 --> 00:07:34,254
DevOps adoption, I believe you

121
00:07:34,292 --> 00:07:37,422
defined or you will need to define before going to building

122
00:07:37,476 --> 00:07:41,178
the platform some prerequisites. What is your CI

123
00:07:41,194 --> 00:07:44,626
CD tooling? Is it GitLab, GitHub or other parts? What is

124
00:07:44,648 --> 00:07:48,670
your cloud provider? Is it just Azure VMware

125
00:07:48,830 --> 00:07:52,462
aws? You define it same your tech stack,

126
00:07:52,526 --> 00:07:55,842
your target tech stack. And if you

127
00:07:55,896 --> 00:07:59,254
haven't done this make sure that you're doing this before. Otherwise check

128
00:07:59,292 --> 00:08:03,654
if you need platform reading at this point and

129
00:08:03,772 --> 00:08:06,790
after you can check the team topologies book.

130
00:08:06,860 --> 00:08:11,078
It's a great guidance in this particular era

131
00:08:11,174 --> 00:08:14,570
how you can define teams and typical suggestion is

132
00:08:14,640 --> 00:08:18,442
to concentrate that you have product teams access service or product

133
00:08:18,496 --> 00:08:22,190
tests which result some specific goals with clear

134
00:08:22,260 --> 00:08:25,582
boundaries. And also you will

135
00:08:25,716 --> 00:08:29,086
typically have some kind of organization like that.

136
00:08:29,188 --> 00:08:33,098
Very typical example where you

137
00:08:33,124 --> 00:08:36,642
have the product teams, you have ops, security and maybe

138
00:08:36,696 --> 00:08:40,094
some other aspects which a bit common teams

139
00:08:40,142 --> 00:08:43,154
in practice. So when you start with

140
00:08:43,192 --> 00:08:47,478
platform Jink, make sure that you find a product which did

141
00:08:47,564 --> 00:08:51,094
something what is either already reusable or there is

142
00:08:51,132 --> 00:08:54,502
you see some evangelists, people who are eager to help other

143
00:08:54,556 --> 00:08:57,590
teams to do similar solutions.

144
00:08:58,590 --> 00:09:03,740
If you read the book about

145
00:09:04,190 --> 00:09:08,426
Project Phoenix, you will see that some solution which

146
00:09:08,528 --> 00:09:11,706
was used by one team sometimes can save all

147
00:09:11,728 --> 00:09:15,120
the components. Of course it sounds too just like

148
00:09:15,810 --> 00:09:19,838
interesting, but you need to find the product team

149
00:09:19,924 --> 00:09:23,330
and parts of ops and security which can define

150
00:09:23,750 --> 00:09:27,650
which can bring together in the great platform

151
00:09:27,800 --> 00:09:31,906
different aspects of each. What is development experience

152
00:09:32,008 --> 00:09:35,614
we need in the company? What is the tech stack,

153
00:09:35,662 --> 00:09:39,446
what operations processes we want to have security practices and

154
00:09:39,468 --> 00:09:42,838
yada yada yada, put 510 people and start it.

155
00:09:42,924 --> 00:09:46,502
If you ask when your engineering organizations have at least

156
00:09:46,556 --> 00:09:49,738
roughly 50 people, then start considering this.

157
00:09:49,824 --> 00:09:53,290
Of course it all depends on your needs and timing.

158
00:09:54,670 --> 00:09:57,610
So at some point you will have platform engineers here.

159
00:09:57,760 --> 00:10:01,146
The most important at this point will be your pilot customer.

160
00:10:01,248 --> 00:10:05,686
Make sure that you have a product team which will

161
00:10:05,728 --> 00:10:09,054
first of all needs your solution and wants your

162
00:10:09,092 --> 00:10:12,494
solution. Just like try not never push, just make sure

163
00:10:12,532 --> 00:10:16,050
that they do work doing with the pull. Make them the most happy

164
00:10:16,120 --> 00:10:19,294
customer ever. Yeah, make sure that they just adopting

165
00:10:19,342 --> 00:10:23,570
your solution, they doing the demos, they speaking about

166
00:10:23,640 --> 00:10:26,822
you comparing when

167
00:10:26,876 --> 00:10:31,142
you shouting about your platform and somebody else. Believe me, ten times ten

168
00:10:31,196 --> 00:10:35,062
x better result is when somebody else is doing this,

169
00:10:35,116 --> 00:10:39,146
it's more trusted by others. And so

170
00:10:39,248 --> 00:10:42,780
imagine you came to first customers,

171
00:10:43,470 --> 00:10:46,778
you started being known federal company as a platform.

172
00:10:46,944 --> 00:10:50,466
Start working on these directors with products

173
00:10:50,518 --> 00:10:54,000
to scale. Make sure that CTO you have

174
00:10:55,570 --> 00:10:59,530
as your supporters and then start growing.

175
00:10:59,610 --> 00:11:03,134
At some point you will make sure that everyone becomes your customer.

176
00:11:03,252 --> 00:11:07,106
Security and Ops are your customer because through platform they

177
00:11:07,128 --> 00:11:10,466
will deliver something to whole organizations. And at

178
00:11:10,488 --> 00:11:14,594
some point you will start having sub teams inside of your platform in

179
00:11:14,712 --> 00:11:18,562
infrastructure, front and back end common services authentication.

180
00:11:18,626 --> 00:11:22,422
You will see this will grow. Okay, this is in short what

181
00:11:22,476 --> 00:11:25,398
about teams topologies? Okay.

182
00:11:25,564 --> 00:11:28,954
And now steps of evolution. So how

183
00:11:28,992 --> 00:11:31,340
the hell I start with my platform, right?

184
00:11:33,150 --> 00:11:37,222
Typically you have some stages of SDLC, software development,

185
00:11:37,286 --> 00:11:41,150
development lifecycle. So from starting point how you do

186
00:11:41,220 --> 00:11:45,274
the version control, how you do CI CDCM,

187
00:11:45,402 --> 00:11:48,682
all this particular aspect. So in childhood

188
00:11:48,746 --> 00:11:53,438
is very first point, make sure that you have a simple developer

189
00:11:53,534 --> 00:11:57,806
portal discoverability where everyone can find and discover

190
00:11:57,918 --> 00:12:01,378
what is your platform about and what does it

191
00:12:01,384 --> 00:12:04,706
solve. And start using your solution and provide some

192
00:12:04,728 --> 00:12:08,374
simple tools and libraries how to use

193
00:12:08,492 --> 00:12:12,166
your particular solution. It might

194
00:12:12,188 --> 00:12:16,438
be something simple, a library, a tool, I don't know a script in the end,

195
00:12:16,524 --> 00:12:19,958
but start from adoption, start getting some attention

196
00:12:20,134 --> 00:12:23,334
and then you can provide on this portal just like guidance on CI

197
00:12:23,382 --> 00:12:27,686
CD testing. Some aspects you can even skip

198
00:12:27,718 --> 00:12:31,420
at the beginning. So for example observability or others

199
00:12:31,870 --> 00:12:34,942
from my experience for some reason just like left for a bit later

200
00:12:34,996 --> 00:12:39,390
to be added into the platform. So they just continue being a bit asylum

201
00:12:39,810 --> 00:12:43,262
adolescents. When you grow slowly but surely

202
00:12:43,326 --> 00:12:47,186
you will have more adoption, more support

203
00:12:47,288 --> 00:12:51,282
from executives and but

204
00:12:51,336 --> 00:12:54,782
in from product and other architects.

205
00:12:54,846 --> 00:12:58,610
So at this point you need to use something like backstage to provide a scalable

206
00:12:58,690 --> 00:13:01,954
developer portal and provide CLI tools to generate

207
00:13:02,002 --> 00:13:05,414
your application. CLI UI tools to

208
00:13:05,452 --> 00:13:09,266
provide the guidance on your development portal. The limitation team start jumping

209
00:13:09,298 --> 00:13:12,602
in. So this is adolescent and maturity. At some point

210
00:13:12,656 --> 00:13:16,806
you will see that you need to update and support this developer

211
00:13:16,838 --> 00:13:20,554
portal. You need to provide application templates for front

212
00:13:20,592 --> 00:13:23,594
end, for back end like react, Java, Python,

213
00:13:23,642 --> 00:13:27,822
you define it. You need to integrate this with databases and data

214
00:13:27,876 --> 00:13:32,030
lakes, provide the test layers, security checks,

215
00:13:32,470 --> 00:13:35,410
previews, environment generations,

216
00:13:35,910 --> 00:13:40,254
CD providers, infrastructure as code monitoring

217
00:13:40,302 --> 00:13:43,266
on top of all this. And then you will see the most funny one will

218
00:13:43,288 --> 00:13:46,786
be proper gradability. Great. So this

219
00:13:46,808 --> 00:13:50,898
is the stages to give you some guidance. We will return to actually this maturity

220
00:13:50,994 --> 00:13:55,030
because I will give you some guidance how you can achieve some of these aspects.

221
00:13:55,370 --> 00:13:59,034
Okay, so as I said, I still want

222
00:13:59,072 --> 00:14:03,222
to show you how because at some point it would save me answers.

223
00:14:03,366 --> 00:14:07,002
Okay, in GM portal, how the hell you do

224
00:14:07,056 --> 00:14:10,986
this particular guy, you can use simple tools

225
00:14:11,018 --> 00:14:14,586
like docus hours and let me show you what you can achieve.

226
00:14:14,698 --> 00:14:18,590
You can say that based on your particular solution,

227
00:14:18,930 --> 00:14:22,346
you created some simple static site generator, right?

228
00:14:22,468 --> 00:14:26,738
And you define how

229
00:14:26,744 --> 00:14:30,030
docus hours look. Docus hours is a simple static generation.

230
00:14:30,110 --> 00:14:34,386
Give me just a second. Which is public free

231
00:14:34,568 --> 00:14:38,786
by the way. In this particular presentation I have no affiliates, no links,

232
00:14:38,818 --> 00:14:42,840
nobody paid me for this. Mostly free tools which I will show you.

233
00:14:43,290 --> 00:14:46,646
It allows you to create documentation with versions. You can

234
00:14:46,668 --> 00:14:49,320
say version 12345 of your platform.

235
00:14:50,010 --> 00:14:53,290
You see just like it provider you different content in different

236
00:14:53,360 --> 00:14:56,582
versions and start from something simple. As I said, you can download

237
00:14:56,646 --> 00:14:59,946
my solution, you can download my application simple,

238
00:15:00,048 --> 00:15:03,898
just bunch of files or folders. Start simple.

239
00:15:03,984 --> 00:15:07,166
Provide more guidance on CI CD. This first step for

240
00:15:07,188 --> 00:15:10,906
you. Okay, when you start growing, you need backstage.

241
00:15:11,018 --> 00:15:15,102
For the backstage, of course you need something more scalable

242
00:15:15,246 --> 00:15:18,898
and typically backstage is also free

243
00:15:18,984 --> 00:15:23,166
tool which went open source

244
00:15:23,198 --> 00:15:28,846
recently. And here it allows you to provide your microservices,

245
00:15:29,038 --> 00:15:32,854
micro applications microfontends. We'll come to this in

246
00:15:32,892 --> 00:15:36,386
more details. So this is UI application with database

247
00:15:36,418 --> 00:15:39,802
integration with some other aspects. Okay,

248
00:15:39,856 --> 00:15:45,354
we'll come back to backstage later. I promise you on

249
00:15:45,392 --> 00:15:48,906
front end. So what the hell you do for front end because

250
00:15:49,088 --> 00:15:52,346
most of your teams will deliver some front end depends

251
00:15:52,378 --> 00:15:55,966
on your business. Of course some of your teams might deliver front end. Yeah,

252
00:15:56,068 --> 00:15:59,694
for front end, typical playground is a

253
00:15:59,732 --> 00:16:03,186
storybook. So for storybook here is an example.

254
00:16:03,288 --> 00:16:07,074
It's also free tool and example of implementation. We for

255
00:16:07,112 --> 00:16:10,942
example did this with my teams creating

256
00:16:11,086 --> 00:16:15,798
guidewire web framework. Now it's available

257
00:16:15,884 --> 00:16:20,582
for Guidewire customers and on preview for everyone.

258
00:16:20,716 --> 00:16:24,130
And you start building components. You will deliver

259
00:16:24,210 --> 00:16:27,878
pages using this particular components, how to use them,

260
00:16:27,964 --> 00:16:31,162
how they have different look and feel, how to use

261
00:16:31,216 --> 00:16:35,130
them in for example in the code. All this is easy

262
00:16:35,200 --> 00:16:38,182
to be provided via storybooks.

263
00:16:38,246 --> 00:16:41,950
Make sure that you deliver. As I said, the way to download

264
00:16:42,690 --> 00:16:48,122
your application code and your framework

265
00:16:48,266 --> 00:16:51,774
might be NPm packages. You define describe this

266
00:16:51,812 --> 00:16:55,620
on development portal and then provide storybook like that.

267
00:16:56,390 --> 00:17:00,850
Perfect. And of course you might provide your own templates

268
00:17:01,430 --> 00:17:05,150
for react applications view next you

269
00:17:05,240 --> 00:17:09,654
decided. So here are some links which you can use to define the

270
00:17:09,692 --> 00:17:13,606
different type of applications for your internal customer

271
00:17:13,708 --> 00:17:15,880
teams. Great.

272
00:17:16,650 --> 00:17:20,342
Then we come in slowly to microservices

273
00:17:20,406 --> 00:17:23,014
land which is a bit different beastie.

274
00:17:23,142 --> 00:17:27,146
And here we come to an interesting solution which

275
00:17:27,168 --> 00:17:30,542
is called Jhipster. I'm not sure many of you just heard

276
00:17:30,596 --> 00:17:34,400
about the jhipster, so I will show you this in practice because

277
00:17:35,250 --> 00:17:38,682
before backstage it was one of the greatest

278
00:17:38,826 --> 00:17:42,426
available solutions. So Jhipster is

279
00:17:42,468 --> 00:17:46,830
an open source tool which allow you to also define your application templates

280
00:17:46,990 --> 00:17:50,286
and do a lot of integrations with CI,

281
00:17:50,318 --> 00:17:54,430
CDCM and other parts.

282
00:17:54,510 --> 00:17:57,782
So take a look in jhipster, I will show you how

283
00:17:57,836 --> 00:18:01,318
you migrate an application. It asks me do you want to

284
00:18:01,324 --> 00:18:04,710
create monolithic application? It might be microservice and

285
00:18:04,780 --> 00:18:08,310
micro from end or their combination. So monolithic

286
00:18:08,990 --> 00:18:12,346
name is my app one. Let's go

287
00:18:12,528 --> 00:18:16,534
Springflux. I will go with more or less default

288
00:18:16,582 --> 00:18:20,226
one here is by default it's JavaScript boot application. You can define

289
00:18:20,278 --> 00:18:24,826
Python whatever you want. Authentication, you see it's

290
00:18:24,858 --> 00:18:28,990
already bundled. SQl sure, go with SQl

291
00:18:29,890 --> 00:18:33,774
MySQL. Okay, what about local cache?

292
00:18:33,822 --> 00:18:40,030
You see you can do all this particular steps

293
00:18:40,110 --> 00:18:44,370
as you wish. Registry. Thank you. No elasticsearch

294
00:18:44,970 --> 00:18:48,374
API first here it comes to front end

295
00:18:48,492 --> 00:18:52,262
react laundry UI. Sure. And then of course

296
00:18:52,316 --> 00:18:55,074
it even just allows you to do different config.

297
00:18:55,202 --> 00:19:00,380
Okay, I created this application and

298
00:19:00,750 --> 00:19:04,010
I will actually start it.

299
00:19:04,080 --> 00:19:09,462
So here in this particular application you see already generated jhipster

300
00:19:09,526 --> 00:19:13,502
apps which I did before because it takes a bit of time and

301
00:19:13,556 --> 00:19:16,846
it provides developer experience which is super important.

302
00:19:16,948 --> 00:19:20,522
So you see when you will do precommit, it already will do the static

303
00:19:20,586 --> 00:19:24,174
analysis of your code. That's where you can extend and deliver

304
00:19:24,222 --> 00:19:28,098
this as a template of your application and extend this with the

305
00:19:28,184 --> 00:19:32,206
best practices you want. Add security here, test execution unit,

306
00:19:32,238 --> 00:19:35,406
test execution, whatever you want.

307
00:19:35,528 --> 00:19:40,502
Provide the text standards, provide other

308
00:19:40,556 --> 00:19:44,102
aspects as you wish. So as you see,

309
00:19:44,156 --> 00:19:47,046
it's a simple maven application, sorry,

310
00:19:47,228 --> 00:19:49,910
JavaScript boot application is maven.

311
00:19:50,070 --> 00:19:53,562
And here we can find my

312
00:19:53,616 --> 00:19:57,398
app. Nothing special, some annotations

313
00:19:57,494 --> 00:20:00,880
here and here you can also find.

314
00:20:05,730 --> 00:20:09,422
And here is web application. Sure, just like typical react with

315
00:20:09,476 --> 00:20:13,218
error boundary. You see it's all integrated together, you can

316
00:20:13,224 --> 00:20:16,258
do this separately, you can just do this together.

317
00:20:16,424 --> 00:20:19,780
Okay, let's see how it actually looks and works.

318
00:20:20,310 --> 00:20:23,490
As you remember, we delegated some database, right.

319
00:20:23,560 --> 00:20:27,042
And it allows me to provide a user

320
00:20:27,106 --> 00:20:30,774
and out of the box I have not only web UI which

321
00:20:30,812 --> 00:20:34,534
I can just deliver as an application, but I can manage some

322
00:20:34,572 --> 00:20:38,566
users, I have some metrics and even logs

323
00:20:38,598 --> 00:20:41,674
which I can deliver to my monitoring system,

324
00:20:41,792 --> 00:20:48,074
observability system and just like gather it also

325
00:20:48,272 --> 00:20:52,198
second I also have out of the box API which can

326
00:20:52,224 --> 00:20:56,014
be used in my developer portal. Great. Why I'm showing this?

327
00:20:56,052 --> 00:21:00,250
Because it's fast. Instead of just like describing this documentation

328
00:21:00,410 --> 00:21:03,730
to give me the tool. Give me the tool which making

329
00:21:03,800 --> 00:21:06,786
this automatically. Right, great.

330
00:21:06,888 --> 00:21:10,286
So we delivered all this we allowed imagine

331
00:21:10,318 --> 00:21:13,714
just like to create this particular application but

332
00:21:13,832 --> 00:21:17,254
this is not enough, right? We want to make

333
00:21:17,292 --> 00:21:21,826
sure that we also can deliver these applications.

334
00:21:21,938 --> 00:21:25,814
Give me a second, I will show you. You need

335
00:21:25,852 --> 00:21:29,770
to integrate these applications, not with different cloud

336
00:21:29,840 --> 00:21:33,382
providers, CI CD and yada yada yada.

337
00:21:33,446 --> 00:21:37,114
So Jhipster allows you gives you CLI tool which you can also

338
00:21:37,152 --> 00:21:41,546
deliver to your customers to integrate

339
00:21:41,658 --> 00:21:44,938
with AWS,

340
00:21:45,034 --> 00:21:50,382
Azure, Google Cloud platform and

341
00:21:50,436 --> 00:21:54,158
many other providers. It allows you to integrate CI CD

342
00:21:54,254 --> 00:21:58,270
tooling and provide different integrations

343
00:21:58,350 --> 00:22:02,478
with scalp provider. Great. So you can from Jhipster

344
00:22:02,574 --> 00:22:05,950
you have ability to use your templates, you have CLI,

345
00:22:06,030 --> 00:22:09,282
you have ability to integrate CI CD,

346
00:22:09,426 --> 00:22:12,694
great. But there is one more

347
00:22:12,732 --> 00:22:16,454
thing in Jhipster and most of the items which you see here can

348
00:22:16,492 --> 00:22:20,330
be greatly leveraged in backstage.

349
00:22:20,670 --> 00:22:24,250
So we're going back to backstage and

350
00:22:24,320 --> 00:22:28,458
in backstage I will stop my server here,

351
00:22:28,624 --> 00:22:32,714
not kill my laptop. And here I created

352
00:22:32,762 --> 00:22:37,326
my backstage application. Backstage is

353
00:22:37,348 --> 00:22:40,480
a simple UI application.

354
00:22:41,250 --> 00:22:45,166
This ability to create portfolios, UI plus database

355
00:22:45,278 --> 00:22:47,742
plus monitoring.

356
00:22:47,806 --> 00:22:51,842
So it was exposed by Spotify to open

357
00:22:51,896 --> 00:22:55,526
source built for internal needs and now the fastest standard

358
00:22:55,628 --> 00:22:58,886
for platform genius purpose to save you

359
00:22:58,988 --> 00:23:00,680
months of your work.

360
00:23:03,370 --> 00:23:07,206
So let it start and after that you

361
00:23:07,228 --> 00:23:11,690
will see that actually backstage also

362
00:23:11,840 --> 00:23:15,340
allows you to create your own application

363
00:23:15,710 --> 00:23:19,580
templates. And second,

364
00:23:20,190 --> 00:23:23,514
here is backstage application. And you see I took my

365
00:23:23,552 --> 00:23:26,746
Myvan application and I put here as a template.

366
00:23:26,938 --> 00:23:28,720
I told that you know what,

367
00:23:30,850 --> 00:23:34,674
I want to allow this particular template of

368
00:23:34,712 --> 00:23:37,986
my backstage which I just showed you. So I'm not bullshitting you. You see my

369
00:23:38,008 --> 00:23:41,282
Java application with the same content as before with

370
00:23:41,336 --> 00:23:44,530
web app, with index files.

371
00:23:45,270 --> 00:23:49,154
Here they are the same files, nothing special, just literally

372
00:23:49,202 --> 00:23:52,742
just copy pasted this as a content. It allows you to

373
00:23:52,796 --> 00:23:56,214
create your own to have

374
00:23:56,252 --> 00:24:00,460
your portal with integrated applications similar to what I showed you before.

375
00:24:03,230 --> 00:24:05,260
Perfect. So here we are,

376
00:24:08,510 --> 00:24:13,310
I started my own local example

377
00:24:13,380 --> 00:24:16,862
of backstage and here I'm going to create my application,

378
00:24:16,996 --> 00:24:20,494
based it on the template. This particular app which I showed you

379
00:24:20,532 --> 00:24:24,050
before I added as a template so I can create

380
00:24:24,120 --> 00:24:27,874
and integrate with my CI CD system. You got it.

381
00:24:27,992 --> 00:24:31,826
I am platform developer and I want

382
00:24:31,848 --> 00:24:35,214
to deliver for my wonderful teams ability to

383
00:24:35,272 --> 00:24:38,466
reuse my application which I created

384
00:24:38,498 --> 00:24:42,374
before with the hipster. So let's call it somehow the same,

385
00:24:42,412 --> 00:24:45,522
my app name, I will use GitHub,

386
00:24:45,586 --> 00:24:49,254
you can use GitHub or other integrations. So here directly you can

387
00:24:49,292 --> 00:24:52,746
add this with CI CD. So here make sure that

388
00:24:52,768 --> 00:24:56,694
you provide the organization name and you provide your repository.

389
00:24:56,822 --> 00:25:00,382
And finally of course it will just start it will try

390
00:25:00,436 --> 00:25:03,662
to create the application directly from

391
00:25:03,716 --> 00:25:07,534
here based on the template which we created before from

392
00:25:07,572 --> 00:25:11,262
jhipster. Great. So first it takes my

393
00:25:11,316 --> 00:25:14,260
content of my application. Remember just like I said,

394
00:25:15,030 --> 00:25:19,426
java and also

395
00:25:19,528 --> 00:25:23,042
UI based on typescript and react. Great.

396
00:25:23,176 --> 00:25:26,546
And you see it tries to deliver this to GitHub.

397
00:25:26,658 --> 00:25:30,390
Okay, first just like switch the base,

398
00:25:30,540 --> 00:25:33,990
it applies the name of my application,

399
00:25:34,140 --> 00:25:37,818
maybe some integrations with security

400
00:25:37,904 --> 00:25:41,898
aspects like security keys, and finally

401
00:25:41,984 --> 00:25:45,754
it publishes to GitHub. Unfortunately sometimes it takes some

402
00:25:45,792 --> 00:25:48,922
time. So I will show you that, you know what,

403
00:25:48,976 --> 00:25:52,614
I just added a few things. I also added,

404
00:25:52,662 --> 00:25:56,880
you know what, I want to deploy my application. I want to deploy my application

405
00:25:57,250 --> 00:26:01,514
when it goes to GitHub because it will be pushed to my main branch

406
00:26:01,642 --> 00:26:04,846
and I want to deploy this to AWS, I want

407
00:26:04,868 --> 00:26:08,354
to provide to publish my web to three s,

408
00:26:08,392 --> 00:26:11,934
three bucket and then expose with CDN.

409
00:26:12,062 --> 00:26:16,374
And also maybe I want to do something else. But we

410
00:26:16,412 --> 00:26:24,294
will see. First of all you have

411
00:26:24,332 --> 00:26:29,242
a problem, maybe something

412
00:26:29,376 --> 00:26:32,842
happened. Let me check if something what

413
00:26:32,896 --> 00:26:33,820
went wrong?

414
00:26:37,230 --> 00:26:45,846
We learned something, right Kush?

415
00:26:45,958 --> 00:26:49,498
Why? Anyway, I will just delete

416
00:26:49,514 --> 00:26:53,246
my application, so you will see that I'm not bullshitting you,

417
00:26:53,428 --> 00:26:54,480
just try.

418
00:26:57,970 --> 00:26:58,960
No worries.

419
00:27:03,410 --> 00:27:07,654
Who knows, maybe there's time it will work, maybe not, you'll never know.

420
00:27:07,772 --> 00:27:11,458
So I added the deployment to AWS

421
00:27:11,554 --> 00:27:15,026
and I added terraform to my template.

422
00:27:15,138 --> 00:27:19,974
Terraform is also just can be your kubernetes, can be separately,

423
00:27:20,102 --> 00:27:23,594
can be for your kubernetes, some particular databases or

424
00:27:23,632 --> 00:27:27,782
other. So here I also just like it because it's web application with some database.

425
00:27:27,846 --> 00:27:32,070
I added the publishing to CDA to cloud from

426
00:27:32,240 --> 00:27:35,870
and I want to see all this in action and I hope

427
00:27:35,940 --> 00:27:39,450
this time it will push the directory

428
00:27:39,530 --> 00:27:43,346
properly. Things happen in this life and

429
00:27:43,368 --> 00:27:46,690
we always can learn something, right? Okay,

430
00:27:46,840 --> 00:27:50,206
so once again I created

431
00:27:50,238 --> 00:27:52,530
a template with jhipster.

432
00:27:53,030 --> 00:27:56,514
I use this template in backstage, I added

433
00:27:56,562 --> 00:28:00,162
integration with CI CD in the way which I wanted. With GitHub

434
00:28:00,226 --> 00:28:04,054
you can use GitLab. I use terraform for infrastructure as

435
00:28:04,092 --> 00:28:07,926
code. Perfect. So here is repository and

436
00:28:07,948 --> 00:28:11,078
let's see what happens this time it just like pushed off. So you see I'm

437
00:28:11,094 --> 00:28:15,050
not bullshitting you, it just directly committed to my application right

438
00:28:15,120 --> 00:28:19,126
now. And because I added this wonderful GitHub

439
00:28:19,318 --> 00:28:22,826
flows what happens. My CI CD pipeline

440
00:28:22,858 --> 00:28:26,814
is code started to give me fruits and just

441
00:28:26,852 --> 00:28:30,720
install independency and then it build and deploy to AWS. Perfect.

442
00:28:31,730 --> 00:28:34,846
It will also use terraform of my choice.

443
00:28:35,038 --> 00:28:38,226
Great. Of course I just did this before because it

444
00:28:38,248 --> 00:28:41,698
takes a bit of time and here it is

445
00:28:41,784 --> 00:28:45,254
you see this particular URL is

446
00:28:45,292 --> 00:28:50,050
already published on Amazon

447
00:28:50,130 --> 00:28:53,670
cloud front because it was used in my code

448
00:28:53,740 --> 00:28:57,566
and directly said that where it should be deployed

449
00:28:57,618 --> 00:29:00,886
on AWS. Here you provide secret keys

450
00:29:00,918 --> 00:29:05,030
and you provide the s three bracket and distribution perfectly.

451
00:29:05,110 --> 00:29:09,078
So from local host

452
00:29:09,174 --> 00:29:12,160
to actually published application. Done.

453
00:29:13,970 --> 00:29:17,086
Great. So after we got all the

454
00:29:17,108 --> 00:29:20,926
steps, what's next? It's upgradability believe me

455
00:29:20,948 --> 00:29:24,610
or no guys. But this is 1 million question and

456
00:29:24,680 --> 00:29:28,942
I mean it. I mean it because literally

457
00:29:29,006 --> 00:29:32,850
when you have small platform, your yearly cost

458
00:29:32,920 --> 00:29:36,422
of the updates for your internal only customers is

459
00:29:36,476 --> 00:29:40,594
measured as up to 20,000 dependent.

460
00:29:40,722 --> 00:29:44,726
So when you have medium size

461
00:29:44,828 --> 00:29:48,410
you already have $80,000 per year,

462
00:29:48,480 --> 00:29:53,114
which might be cost of

463
00:29:53,152 --> 00:29:56,474
a salary for a few people depending on

464
00:29:56,512 --> 00:30:00,538
the location. So when it's large organization

465
00:30:00,634 --> 00:30:04,686
starts growing for up to half a million plus dollars

466
00:30:04,788 --> 00:30:08,814
per year, which is crazy amount of money. Question how

467
00:30:09,012 --> 00:30:13,262
you leverage this, how you may

468
00:30:13,316 --> 00:30:16,882
invest some research to decrease this cost

469
00:30:16,936 --> 00:30:19,922
or eliminate this. And of course it's not only cost,

470
00:30:19,976 --> 00:30:23,506
it's development frictions. Yeah, just like if you want to make this smooth and

471
00:30:23,528 --> 00:30:26,822
deliver your updates for customers, you need to make sure

472
00:30:26,876 --> 00:30:30,326
that this is as smooth as possible. So what the hell do

473
00:30:30,348 --> 00:30:34,230
we do? That's where backstage is not exactly

474
00:30:34,300 --> 00:30:37,622
the great solution. So of course

475
00:30:37,676 --> 00:30:41,270
it added our portal, you see just it provided documentation path.

476
00:30:41,350 --> 00:30:45,018
But when I'm publishing a new version of my application,

477
00:30:45,184 --> 00:30:49,062
maybe I changed some API, maybe I changed some imports

478
00:30:49,126 --> 00:30:52,734
I want to update. So how the hell I do it go

479
00:30:52,772 --> 00:30:56,858
do go here. That's why I mentioned for you Jhipster.

480
00:30:56,954 --> 00:30:59,742
Jhipster allows you to say you know what,

481
00:30:59,796 --> 00:31:03,506
between previous version and this version there was some changes.

482
00:31:03,608 --> 00:31:07,954
So create a branch of application

483
00:31:08,072 --> 00:31:11,490
developer code base. So imagine product one

484
00:31:11,560 --> 00:31:15,534
code base try to apply my changes updates,

485
00:31:15,662 --> 00:31:18,998
I don't know imports API and provide

486
00:31:19,084 --> 00:31:22,742
them the branch with this updated version so then

487
00:31:22,796 --> 00:31:26,294
they can figure out what to do next. Okay, this is one

488
00:31:26,332 --> 00:31:30,506
part, but sometimes changes are very specific.

489
00:31:30,688 --> 00:31:34,666
It requires not only git changes but maybe changes in

490
00:31:34,688 --> 00:31:38,646
the code to not follow documentation precisely.

491
00:31:38,758 --> 00:31:42,074
For this you always can use code

492
00:31:42,112 --> 00:31:45,502
shift. So code shift allows you to say

493
00:31:45,556 --> 00:31:49,294
okay in the language of my choice, I want to do some

494
00:31:49,412 --> 00:31:53,346
code transformation transformation just like on JavaScript transformation on

495
00:31:53,368 --> 00:31:56,962
Java on your needs.

496
00:31:57,016 --> 00:32:00,466
So they procreate some ats three from your

497
00:32:00,648 --> 00:32:04,450
files and tries to apply the changes you describe here.

498
00:32:04,520 --> 00:32:09,122
For example, react code mode is a JavaScript react

499
00:32:09,186 --> 00:32:13,014
implementation of code

500
00:32:13,052 --> 00:32:17,110
shift. How you can do this? For Javascript there is Java implementations and

501
00:32:17,180 --> 00:32:22,662
others. And for dependencies

502
00:32:22,726 --> 00:32:26,602
management you can use renovate it's also a free tool which

503
00:32:26,656 --> 00:32:30,214
support crazy amount of languages from Python to Java

504
00:32:30,262 --> 00:32:33,946
to node js and anything. This is just great. Which allows

505
00:32:33,978 --> 00:32:37,534
you to say okay for different reasons, you want to update your dependency or

506
00:32:37,572 --> 00:32:39,790
dependency of dependency or you don't.

507
00:32:40,610 --> 00:32:44,318
Great. So all these particular pieces giving you

508
00:32:44,404 --> 00:32:47,778
a strong platform. But you know what, as I said,

509
00:32:47,864 --> 00:32:51,262
it's just like sneak peek pick of all the pieces

510
00:32:51,406 --> 00:32:55,118
I created for you when I was preparing for this particular

511
00:32:55,304 --> 00:32:59,346
presentation. A repository,

512
00:32:59,538 --> 00:33:03,810
this created list of these tools and blogs

513
00:33:03,890 --> 00:33:07,522
and actually different

514
00:33:07,596 --> 00:33:11,638
informations and links related to platform engineering. All these pieces,

515
00:33:11,734 --> 00:33:15,478
how you provide code templates, how you create microservices

516
00:33:15,574 --> 00:33:19,338
front end, how you provide upgradability and apply

517
00:33:19,424 --> 00:33:23,642
different aspects like I don't know, Kubernetes provider, some infrastructure

518
00:33:23,706 --> 00:33:27,118
platforms, how you do all this here.

519
00:33:27,204 --> 00:33:31,406
So make sure that you go in here and just find the

520
00:33:31,508 --> 00:33:34,770
best tools which you want to create your platform.

521
00:33:34,920 --> 00:33:38,130
If I had this at some point it would save me many months.

522
00:33:38,200 --> 00:33:41,700
But now it's time for me to share my experience.

523
00:33:45,530 --> 00:33:49,254
Great. And from this

524
00:33:49,372 --> 00:33:52,806
great experience, sometimes that's how we call our

525
00:33:52,908 --> 00:33:56,486
mistakes or learnings. Let me give

526
00:33:56,508 --> 00:34:00,186
you a few advices. So make sure that pilot team

527
00:34:00,288 --> 00:34:04,474
you are super involved with them and they become your

528
00:34:04,512 --> 00:34:08,362
best friend and evangelist. You will get a customer and from customer

529
00:34:08,416 --> 00:34:12,190
you will get evangelist at the top of your customer ladder.

530
00:34:13,090 --> 00:34:16,494
Treat your platform as a product as

531
00:34:16,532 --> 00:34:20,238
soon as possible. You need to deliver business value

532
00:34:20,404 --> 00:34:24,082
business. I'm sorry, between us very honestly, not very

533
00:34:24,136 --> 00:34:27,746
often cares about technology. They care about the product, about the

534
00:34:27,768 --> 00:34:30,834
solution, about customer marketing, sales, technology.

535
00:34:30,952 --> 00:34:34,610
It's your responsibility. Make sure that you solving the business

536
00:34:34,680 --> 00:34:38,354
problem. So business problem with adoption is speeding up.

537
00:34:38,392 --> 00:34:42,134
It's just like cost all those goodness. So for

538
00:34:42,172 --> 00:34:45,238
this, treat internal teams as customers as soon as possible.

539
00:34:45,324 --> 00:34:49,990
Provide them slack, provide them the

540
00:34:50,140 --> 00:34:53,950
developer portal, invest in platform PM.

541
00:34:54,050 --> 00:34:57,322
Just very great topics, very big pain to be honest.

542
00:34:57,456 --> 00:35:01,002
Grow either internally PM or find the guy who is crazy

543
00:35:01,136 --> 00:35:04,942
interested in all these pieces and know how to speak with customers and how to

544
00:35:04,996 --> 00:35:09,386
build platforms or ie is eager to do this evangelize.

545
00:35:09,418 --> 00:35:13,314
So you need to send regular releases, you need to be predictable. Do the

546
00:35:13,352 --> 00:35:17,074
demos newsletters, make sure that others speaking about you

547
00:35:17,272 --> 00:35:21,038
as in any other product, it requires the stages

548
00:35:21,134 --> 00:35:24,802
of evolution and few interesting things.

549
00:35:24,856 --> 00:35:27,974
So for UI adoption would make sure that you

550
00:35:28,012 --> 00:35:31,586
put teams with the UX. So for example, my best partner

551
00:35:31,618 --> 00:35:35,702
in crime was head of UX. Make sure that your developers with UX working

552
00:35:35,756 --> 00:35:38,486
very closely that they give the design.

553
00:35:38,668 --> 00:35:41,974
Then you have front end components for this same for your

554
00:35:42,012 --> 00:35:46,250
ops team. Yeah. Just so if Ops teams is saying we start implementing

555
00:35:46,750 --> 00:35:49,958
some monitoring solution new relic, I don't

556
00:35:49,974 --> 00:35:53,486
know. Just like Datadog, make sure that you provider in the tools for this

557
00:35:53,508 --> 00:35:56,254
in your platform and this goes together. They're speaking about you,

558
00:35:56,292 --> 00:35:59,694
you saying that you're enabling them dumb down just like win

559
00:35:59,732 --> 00:36:03,450
win and cooperate with all the architects, directors,

560
00:36:03,530 --> 00:36:07,058
VPC here.

561
00:36:07,144 --> 00:36:12,514
Actually you need to make sure that from

562
00:36:12,552 --> 00:36:16,030
the top down you have ability to enable bottom up.

563
00:36:16,120 --> 00:36:19,030
That's the thing you are looking for.

564
00:36:19,100 --> 00:36:22,166
And jackpot strategy. This is my favorite. Yeah.

565
00:36:22,268 --> 00:36:25,366
If you find the way how to deliver the platform

566
00:36:25,468 --> 00:36:28,220
which previously was internal to your customer,

567
00:36:28,590 --> 00:36:32,940
you not just cost center. And where

568
00:36:33,390 --> 00:36:36,618
companies see the spend, businesses spend,

569
00:36:36,704 --> 00:36:40,362
they see the profit and profit will be just like your friend.

570
00:36:40,416 --> 00:36:44,026
So make sure that you find in the way how you can deliver your goodness

571
00:36:44,218 --> 00:36:48,254
to customers. This way you will have

572
00:36:48,372 --> 00:36:51,726
test based inside of your company great fast feedback and

573
00:36:51,748 --> 00:36:55,250
you will have customers also win win situations situation

574
00:36:55,320 --> 00:36:59,246
for everyone. Okay, so to summarize,

575
00:36:59,358 --> 00:37:03,294
remember this maturity of our platform. I gave you some ideas

576
00:37:03,342 --> 00:37:08,310
how you can provide this portal solution

577
00:37:08,970 --> 00:37:14,294
for discoverability. How people can find your platform

578
00:37:14,412 --> 00:37:18,230
and start with it. How you can use your application template,

579
00:37:18,310 --> 00:37:22,010
how you can integrate with data and provide

580
00:37:22,080 --> 00:37:25,974
test checks. Because you can include this in your CI CD

581
00:37:26,022 --> 00:37:30,950
pipe as code. You can add CD

582
00:37:31,030 --> 00:37:34,058
and infrastructure as code inside of your flat

583
00:37:34,154 --> 00:37:37,514
templates and in backstage or jhipster just added

584
00:37:37,562 --> 00:37:41,466
separate steps, template creator creation and CI

585
00:37:41,498 --> 00:37:45,282
CD of your choice. Code observability also

586
00:37:45,336 --> 00:37:49,022
should come there. Tracing should be integrated.

587
00:37:49,166 --> 00:37:52,642
Everything should be just going to backend and front end

588
00:37:52,696 --> 00:37:56,260
and infrastructure immediately and upgradability. You saw

589
00:37:56,650 --> 00:38:00,166
jhipster code modes and other solutions can help you with this.

590
00:38:00,268 --> 00:38:04,306
As a result you will provide technology enablement

591
00:38:04,418 --> 00:38:08,026
so it's centralized way to introduce new stacks and libraries. You want

592
00:38:08,048 --> 00:38:11,334
to migrate from Python to Java,

593
00:38:11,382 --> 00:38:15,146
provide a new type of application and start actually working on the

594
00:38:15,168 --> 00:38:18,970
feedback. New cloud adoption,

595
00:38:19,310 --> 00:38:21,680
security and compliance perfect example.

596
00:38:22,290 --> 00:38:28,026
Look for J or NPM

597
00:38:28,218 --> 00:38:31,854
versions problem we had before with the security you

598
00:38:31,892 --> 00:38:36,498
publish update in the platform in

599
00:38:36,504 --> 00:38:40,126
the centralized way and immediately through this upgradability tooling.

600
00:38:40,158 --> 00:38:43,826
Q. Deliver this to all your customers internal and

601
00:38:43,848 --> 00:38:47,446
external. Vinvin perfect. Amazing. And also DevOps will be

602
00:38:47,468 --> 00:38:51,238
happy because they can introduce the new layers together with security

603
00:38:51,404 --> 00:38:54,870
common security checks across all your organization

604
00:38:55,930 --> 00:38:59,994
cost one you need to measure this but it's just literally we

605
00:39:00,032 --> 00:39:02,442
have state of DevOps, we have research,

606
00:39:02,576 --> 00:39:06,538
it reduces cost of onboarding technology

607
00:39:06,624 --> 00:39:10,778
alignment pivoting. If your company

608
00:39:10,864 --> 00:39:16,654
acquired other company and want to integrate or want to change the tech

609
00:39:16,692 --> 00:39:20,654
stack and upgradability cost is just a clear

610
00:39:20,772 --> 00:39:22,800
win result.

611
00:39:23,750 --> 00:39:27,486
Okay guys, what I can say here are the links

612
00:39:27,518 --> 00:39:31,810
to the slides which I just showed you together with the resources

613
00:39:32,310 --> 00:39:35,090
which I created as a GitHub repository.

614
00:39:36,810 --> 00:39:40,886
The best day to start is always today. Make sure that you

615
00:39:40,908 --> 00:39:44,562
start in your journey. It will really take thousand miles,

616
00:39:44,626 --> 00:39:47,990
but you will get to your mountain, to the top

617
00:39:48,060 --> 00:39:52,326
of to your dream, right? And make sure that you're doing this first single

618
00:39:52,428 --> 00:39:55,480
step. I gave you some guidance, shared my experience.

619
00:39:55,850 --> 00:39:58,998
Good luck. Now do it. Build it.

620
00:39:59,164 --> 00:40:00,880
Have a nice one. Bye guys.

