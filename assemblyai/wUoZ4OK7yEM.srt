1
00:01:42,590 --> 00:01:46,526
You. I am Tanya Jenka

2
00:01:46,638 --> 00:01:49,634
and I am at Conf 42,

3
00:01:49,672 --> 00:01:53,074
devsecops. And I am here to talk to

4
00:01:53,112 --> 00:01:57,262
you about how devsecops, in my opinion,

5
00:01:57,406 --> 00:02:00,722
is more than just pipelines. I want to talk about the three

6
00:02:00,776 --> 00:02:04,260
ways of DevOps and how we weave security through them.

7
00:02:04,710 --> 00:02:08,646
And try not to be super annoying like a person that's petting

8
00:02:08,678 --> 00:02:11,834
a cat backwards just all day long. So let's not be that

9
00:02:11,872 --> 00:02:15,658
guy. And so, yeah, let's go.

10
00:02:15,744 --> 00:02:18,954
So what are we going to talk about today? The fact that

11
00:02:18,992 --> 00:02:22,718
DevOps is not just pipeline. There's so

12
00:02:22,804 --> 00:02:25,070
much more than just a pipeline.

13
00:02:26,370 --> 00:02:30,030
So it's basically like an industry word now,

14
00:02:30,100 --> 00:02:33,998
almost like a swear word. Like we say devsecops and

15
00:02:34,164 --> 00:02:37,666
we just assume a lot of things. Like, we're like, oh,

16
00:02:37,688 --> 00:02:40,338
I'm going to just buy a whole bunch of security tools, put them in the

17
00:02:40,344 --> 00:02:43,518
pipeline, and my apps will magically be secure.

18
00:02:43,694 --> 00:02:47,638
And so I think that Devsecops is not.

19
00:02:47,724 --> 00:02:51,414
That tools are awesome. They help us do our jobs. But it's more. To me,

20
00:02:51,452 --> 00:02:55,062
Devsecops is Appsec plus

21
00:02:55,116 --> 00:02:58,666
DevOps. And quite frankly, it's DevOps too. So we

22
00:02:58,688 --> 00:03:02,570
have to secure the ops and we have to secure the apps.

23
00:03:03,790 --> 00:03:07,542
So we're also going to talk about Appsec program goals

24
00:03:07,686 --> 00:03:11,280
that work with DevOps, but wait for it,

25
00:03:11,730 --> 00:03:14,830
that are outside the pipelines.

26
00:03:15,650 --> 00:03:16,400
What?

27
00:03:19,250 --> 00:03:23,258
I know. Okay, so let's go. So you're like, who is Tanya?

28
00:03:23,354 --> 00:03:26,786
So let's do the mandatory about me slide where we try to convince you

29
00:03:26,808 --> 00:03:30,126
that we are qualified to give the talk we're giving. So I founded

30
00:03:30,158 --> 00:03:33,794
a small little company called Wehack Purple that did security training in

31
00:03:33,832 --> 00:03:37,678
Canada, and we got acquired by Semgrap this summer.

32
00:03:37,774 --> 00:03:41,650
And so I'm now head of community and education at Semgrap

33
00:03:41,810 --> 00:03:45,074
and I'm really excited to be there. I'm known as Shex

34
00:03:45,122 --> 00:03:48,374
Purple. And yes, my hair is just like blending into this shirt because

35
00:03:48,412 --> 00:03:51,980
it's the exact same color. But just pretend that's not happening.

36
00:03:52,590 --> 00:03:56,346
I wrote a book called Ellison Bob, learn Application Security. I am on

37
00:03:56,368 --> 00:03:59,258
year 27 of my journey in tech.

38
00:03:59,424 --> 00:04:02,442
I'm an advisor of a bunch of companies, including cloud,

39
00:04:02,496 --> 00:04:05,774
defense, IEA, NordVPN. I am

40
00:04:05,812 --> 00:04:09,006
like a blogger. I had a podcast. I just ended, like,

41
00:04:09,028 --> 00:04:12,606
I do live streaming, also time. I'm a nerd at large on

42
00:04:12,628 --> 00:04:16,034
the Internet. And I hope you're like, yeah, she seems all right.

43
00:04:16,072 --> 00:04:19,330
I'm willing to sit through 30 minutes of her talking

44
00:04:19,400 --> 00:04:23,086
about her ideas of securing DevOps. So let's

45
00:04:23,118 --> 00:04:26,622
go. Okay, so what is DevOps?

46
00:04:26,686 --> 00:04:30,054
So you're at a Devsecops conference and you might be thinking, oh my

47
00:04:30,092 --> 00:04:33,126
gosh, is she really backing up that far?

48
00:04:33,308 --> 00:04:37,106
Please forgive me. Give me like 1 minute to explain to bring everyone that's

49
00:04:37,138 --> 00:04:40,602
junior up to the same level as you so that we're all speaking

50
00:04:40,656 --> 00:04:44,246
the same language. So a CI CD stands for continuous integration,

51
00:04:44,358 --> 00:04:47,850
continuous delivery, and sometimes continuous deployment.

52
00:04:48,190 --> 00:04:51,966
Continuous integration is us taking all the different pieces, smooshing them

53
00:04:51,988 --> 00:04:54,480
together and making sure they work.

54
00:04:55,970 --> 00:05:00,042
Integration testing manually is really complicated and terrifically

55
00:05:00,106 --> 00:05:04,126
painful. And so that's awesome. So then continuous

56
00:05:04,158 --> 00:05:08,146
delivery means using an automated system, often called a

57
00:05:08,168 --> 00:05:11,314
DevOps pipeline or a release pipeline or

58
00:05:11,352 --> 00:05:14,926
a CI CDE. And what it does is it puts all the pieces

59
00:05:14,958 --> 00:05:18,450
together and automates it. So it's a lot less painful.

60
00:05:18,790 --> 00:05:22,274
It's sort of, if you think about like an assembly line when they made cars,

61
00:05:22,322 --> 00:05:25,734
it just made it a thousand times easier. That's what CI CDs do for us.

62
00:05:25,772 --> 00:05:29,446
It's so wonderful. Continuous deployment is where we

63
00:05:29,468 --> 00:05:33,098
have so many lets and so many assurances and so many things

64
00:05:33,264 --> 00:05:36,922
that we feel no manual intervention is needed.

65
00:05:37,056 --> 00:05:40,198
And we just push code, it automatically kicks it off, it does all the tests,

66
00:05:40,214 --> 00:05:43,566
and if everything passes, it just goes out onto the

67
00:05:43,588 --> 00:05:47,354
Internet, into production, into the world, without any manual

68
00:05:47,402 --> 00:05:50,926
intervention. Not everyone does that. And by not everyone, I mean

69
00:05:50,948 --> 00:05:54,386
like, most companies don't do continuous deployment, they just do

70
00:05:54,408 --> 00:05:57,298
continuous integration and delivery. And that's cool.

71
00:05:57,464 --> 00:06:01,682
But these tools help us do our jobs better. So why

72
00:06:01,816 --> 00:06:04,966
didn't we continue to do waterfall or water fail, as I

73
00:06:04,988 --> 00:06:08,610
affectionately refer to it as? So if we do trunk

74
00:06:08,690 --> 00:06:12,534
based development, so we're constantly checking things into

75
00:06:12,572 --> 00:06:16,546
the main branch and making sure that everything works properly,

76
00:06:16,658 --> 00:06:20,860
right. We can do just like a way better job.

77
00:06:21,790 --> 00:06:25,274
There's less risk by doing tons of tiny changes that we check

78
00:06:25,312 --> 00:06:29,530
and check and check versus doing one giant, huge, mega big

79
00:06:29,600 --> 00:06:33,622
change. How do I say this nicely? We used to do

80
00:06:33,776 --> 00:06:37,482
huge change as a waterfall, and then it would just crash

81
00:06:37,546 --> 00:06:40,686
at the bottom. We wouldn't get feedback for a really long time.

82
00:06:40,788 --> 00:06:44,266
And so trunk based development involves a lot of feedback

83
00:06:44,458 --> 00:06:48,206
automation. So if we can automate things instead of doing it manually,

84
00:06:48,318 --> 00:06:52,050
it goes faster, it's less boring, which I don't have on there,

85
00:06:52,120 --> 00:06:55,906
and we have higher accuracy. Computers are really good at repeating what

86
00:06:55,928 --> 00:06:59,174
we tell them to do. They're not so great at thinking for

87
00:06:59,212 --> 00:07:03,074
themselves yet, but they're

88
00:07:03,122 --> 00:07:07,110
really good at repeating what we tell them to do. They're great at following instructions

89
00:07:07,610 --> 00:07:11,058
the other thing is, if we're testing integrations over and

90
00:07:11,084 --> 00:07:14,714
over and over again, we have less errors. Our apps can work better.

91
00:07:14,832 --> 00:07:18,442
And rather than having one person go off and do all these changes,

92
00:07:18,496 --> 00:07:22,282
then they're trying to smash them into my changes. If we're constantly

93
00:07:22,346 --> 00:07:25,774
checking, it's easy. And so this is why

94
00:07:25,812 --> 00:07:28,906
CI CD, because it's awesome. That's it. Send tweets.

95
00:07:29,018 --> 00:07:32,574
Okay, so what is application security besides my fave

96
00:07:32,622 --> 00:07:36,386
thing? It's every and anything

97
00:07:36,568 --> 00:07:40,274
that you do to make sure your software is

98
00:07:40,312 --> 00:07:43,342
secure. So that's my definition.

99
00:07:43,486 --> 00:07:47,602
So it's a subfield within computer science. So you have computer science,

100
00:07:47,746 --> 00:07:51,080
then you have information security, then you have app.

101
00:07:54,090 --> 00:07:57,634
So this is kind of like my passion. I'm really excited

102
00:07:57,682 --> 00:08:00,394
about it. I try to help people a lot with this. I talk about it

103
00:08:00,432 --> 00:08:03,850
all the time. So then you're like, okay, so what is devsecops?

104
00:08:04,350 --> 00:08:07,610
And so my friend Imran said this, he's super cool.

105
00:08:07,680 --> 00:08:09,900
He teaches great.

106
00:08:12,510 --> 00:08:16,080
When he explained this to me, he said, tanya, it's what we've always wanted.

107
00:08:16,450 --> 00:08:19,866
It's what us appsecs folks do. But we're in a DevOps

108
00:08:19,898 --> 00:08:23,770
environment and we need to change so that we can work the way that

109
00:08:23,780 --> 00:08:27,454
they work. We still want the same things we've always wanted, though. So it's

110
00:08:27,502 --> 00:08:31,214
appsec, but adjusted to work nicely in an appsec

111
00:08:31,262 --> 00:08:33,886
environment or a DevOps environment.

112
00:08:34,078 --> 00:08:38,302
And so this brings us to the three ways of DevOps.

113
00:08:38,446 --> 00:08:41,746
And like, you might know these. You might have read the DevOps

114
00:08:41,778 --> 00:08:45,702
Handbook and the Phoenix project and all those awesome books. There's a new one,

115
00:08:45,756 --> 00:08:49,782
investments Unlimited. There's another one coming out that I pre bought on audible

116
00:08:49,846 --> 00:08:53,580
because I was like, I can't wait. But the three ways

117
00:08:54,030 --> 00:08:57,914
emphasize the efficiency of the entire system,

118
00:08:58,112 --> 00:09:02,590
not just your part. Fast feedback.

119
00:09:03,170 --> 00:09:06,746
So we want to get feedback that's

120
00:09:06,778 --> 00:09:09,440
as fast as possible, but to the right person.

121
00:09:09,890 --> 00:09:13,474
And the feedback needs to be accurate. And I add that

122
00:09:13,512 --> 00:09:17,700
part because security gets that part confused a lot.

123
00:09:18,150 --> 00:09:21,858
And then continuous learning. Sometimes this is called risk taking

124
00:09:21,944 --> 00:09:26,050
or experimentation. Sometimes it's called taking time

125
00:09:26,120 --> 00:09:30,214
to improve our daily work. And so all of those sorts of

126
00:09:30,252 --> 00:09:34,006
concepts go into the third way. And so whatever you

127
00:09:34,028 --> 00:09:36,662
want to call the third way, it's basically learning,

128
00:09:36,796 --> 00:09:39,770
experimenting, and then doing better and taking time,

129
00:09:39,840 --> 00:09:43,738
investing time to always do better, especially at one

130
00:09:43,824 --> 00:09:47,034
and two. And so what

131
00:09:47,072 --> 00:09:50,666
about pipelines, Sonya? So pipelines are

132
00:09:50,688 --> 00:09:54,080
part, they are part of

133
00:09:54,770 --> 00:09:58,574
the ways of DevOps number one and number two. So definitely efficiency by

134
00:09:58,612 --> 00:10:02,446
automating all the things and then by testing all the time, we're giving lots of

135
00:10:02,468 --> 00:10:05,682
feedback very quickly. Awesome. And if we're doing part

136
00:10:05,736 --> 00:10:09,698
three, we're probably trying to improve how we use the pipeline some of the time.

137
00:10:09,864 --> 00:10:13,586
And so pipelines weave all throughout this and enable us to

138
00:10:13,608 --> 00:10:17,206
do this. And that's great. But if

139
00:10:17,228 --> 00:10:19,590
you put every single thing into the pipeline,

140
00:10:20,010 --> 00:10:23,618
your developers will not want to be friends with you anymore.

141
00:10:23,794 --> 00:10:27,270
Yeah. And you're going to not do well at appsec.

142
00:10:29,690 --> 00:10:33,242
I found this out the hard way. My first

143
00:10:33,296 --> 00:10:36,026
time doing DevOps, I was part of an open source project and I was like,

144
00:10:36,048 --> 00:10:39,574
I'm going to run 100 tools. It's going to be amazing.

145
00:10:39,712 --> 00:10:42,862
And I remember my teammate Abel being like,

146
00:10:42,916 --> 00:10:46,334
Tanya, can I write code, please? Can you stop

147
00:10:46,372 --> 00:10:50,190
monopolizing everything? And I had to learn

148
00:10:50,340 --> 00:10:53,906
to do better and compromise, and I learned a lot by

149
00:10:53,928 --> 00:10:57,234
this process. And so I want

150
00:10:57,272 --> 00:10:58,740
us to look at,

151
00:11:00,790 --> 00:11:03,986
oh my gosh, terrible. So I want us to

152
00:11:04,008 --> 00:11:08,022
look at an application security program and some of the goals that we might

153
00:11:08,076 --> 00:11:11,846
set and how we can accomplish these, not just

154
00:11:11,868 --> 00:11:15,654
with putting a bunch of things in a pipeline. So we can do like,

155
00:11:15,692 --> 00:11:18,966
we can obey the three ways of DevOps. We can

156
00:11:18,988 --> 00:11:23,146
be totally nice and work with the DevOps folks instead of against them

157
00:11:23,328 --> 00:11:26,442
without messing with the pipeline every single time.

158
00:11:26,496 --> 00:11:29,366
So I do want to put tools in the pipeline. I'm not pretending I don't

159
00:11:29,398 --> 00:11:32,542
want to. I'm saying that we can do a whole bunch of other things than

160
00:11:32,596 --> 00:11:36,458
just that. And we should be doing a variety of activities,

161
00:11:36,554 --> 00:11:40,526
not just putting five pipeline tools and calling it a

162
00:11:40,548 --> 00:11:44,706
day. There's so much more to appsec than that. And so I

163
00:11:44,728 --> 00:11:47,794
want to talk about that. Oh my gosh, my automation is

164
00:11:47,832 --> 00:11:52,014
so bad. Okay, so the first goal of lots and lots of appsec

165
00:11:52,062 --> 00:11:55,474
programs is inventory, because you can't protect

166
00:11:55,592 --> 00:11:58,802
the APIs, the apps, the SaaS, all of these

167
00:11:58,856 --> 00:12:01,942
software products if you don't know you have them.

168
00:12:01,996 --> 00:12:05,058
And if you work at an enterprise, I assure you there are all sorts

169
00:12:05,074 --> 00:12:08,486
of things you don't know about unless you've done inventory. And so this

170
00:12:08,508 --> 00:12:12,294
is a thing that we do all the time in Appsec,

171
00:12:12,342 --> 00:12:16,646
like that we work on. That's very hard. And we don't need a pipeline

172
00:12:16,758 --> 00:12:20,022
to do inventory. So we can do domain scraping.

173
00:12:20,086 --> 00:12:23,466
We can put network agents on like on our servers that

174
00:12:23,488 --> 00:12:26,846
track our assets. We can Nmap, all the things we can

175
00:12:26,868 --> 00:12:30,010
scan for open ports, port four four three for SSL,

176
00:12:30,170 --> 00:12:33,998
TLS ideally, or port 80 if you don't

177
00:12:34,014 --> 00:12:35,860
use port 80 anymore. Anyway,

178
00:12:36,950 --> 00:12:40,290
you can look at your cloud to look at platform as a service,

179
00:12:40,360 --> 00:12:43,250
infrastructure as a service, like IEC running,

180
00:12:43,320 --> 00:12:47,202
et cetera. You can scrape your code repository. There's also

181
00:12:47,256 --> 00:12:50,934
just like tools out there. Now since I wrote this talk that you can

182
00:12:50,972 --> 00:12:54,038
buy that will just, it'll go on prem and in the

183
00:12:54,044 --> 00:12:58,054
cloud and find all your apps for you. And so if you don't know

184
00:12:58,092 --> 00:13:01,210
about it, it's not likely to be in a pipeline in the first place.

185
00:13:01,280 --> 00:13:04,426
Right. And so this is an activity we can

186
00:13:04,448 --> 00:13:07,994
do that does not need to interrupt pipelines at all. But that's super high

187
00:13:08,032 --> 00:13:11,878
priority for every appsec team finding bugs.

188
00:13:12,054 --> 00:13:15,518
So I want to find bugs in written code, in running code

189
00:13:15,604 --> 00:13:18,766
and third party code. And this is a goal of a lot

190
00:13:18,788 --> 00:13:22,394
of appsec teams to look from those three angles. So the code we wrote,

191
00:13:22,522 --> 00:13:26,090
the code we didn't write like libraries and frameworks and stuff, but that's in

192
00:13:26,100 --> 00:13:29,282
our app and we have to accept those risks that they might cause.

193
00:13:29,416 --> 00:13:32,514
But then also I want to interact with the app and test

194
00:13:32,552 --> 00:13:36,114
how it works. And so there's all these different ways to find

195
00:13:36,152 --> 00:13:39,550
bugs. Well, there used to be an old way that we

196
00:13:39,560 --> 00:13:43,282
did it. So we would do manual code review and we would do manual

197
00:13:43,346 --> 00:13:46,998
stack. So we would use a stack analysis tool, but run it manually outside of

198
00:13:47,004 --> 00:13:51,094
pipeline. We would run dynamic scanning tools

199
00:13:51,222 --> 00:13:54,774
manually outside of pipeline. We do a manual review of third party

200
00:13:54,822 --> 00:13:58,346
components and then we'd have a pen tester at the end

201
00:13:58,368 --> 00:14:01,854
that would be like, I messed up your app, what's up?

202
00:14:02,052 --> 00:14:05,658
But there's newer ways we can do this that are more DevOps friendly.

203
00:14:05,834 --> 00:14:09,534
So we

204
00:14:09,572 --> 00:14:13,550
can test in real time as apps are used.

205
00:14:13,700 --> 00:14:17,186
So that's a new type of tool called if does

206
00:14:17,208 --> 00:14:20,498
not need a pipeline. We can scan third party components in the

207
00:14:20,504 --> 00:14:23,906
pipelines, or we could scan it the moment we check our

208
00:14:23,928 --> 00:14:27,346
code in and give faster feedback. Right? And we could

209
00:14:27,368 --> 00:14:30,950
do it in our ide and we can schedule it to run every single week.

210
00:14:31,100 --> 00:14:34,454
We don't have to use the pipeline, we don't have to wait that long.

211
00:14:34,572 --> 00:14:38,354
We could do it way before then. We could do automated

212
00:14:38,402 --> 00:14:42,214
dynamic scanning that are scheduled scans that maybe run overnight

213
00:14:42,262 --> 00:14:45,594
so that we're not monopolizing resources when everyone else wants to work.

214
00:14:45,712 --> 00:14:49,514
There's all sorts of different ways that we can find bugs, and it does

215
00:14:49,552 --> 00:14:52,662
not mean that we have to put every single scanning tool in the pipeline.

216
00:14:52,726 --> 00:14:56,478
Do I want some there? Yes, let's be honest, I do.

217
00:14:56,564 --> 00:14:59,646
But I don't need them all to be there. There's better ways. And I want

218
00:14:59,668 --> 00:15:03,118
to be as far left, and by that I mean earlier in

219
00:15:03,124 --> 00:15:06,194
the system development lifecycle as I can. And so

220
00:15:06,232 --> 00:15:09,794
that means the ide for some things. Okay,

221
00:15:09,832 --> 00:15:13,266
so knowledge, I want my teams to have the knowledge to fix the

222
00:15:13,288 --> 00:15:16,178
bugs that we found. So that's nice. I found a bunch of bugs. What if

223
00:15:16,184 --> 00:15:20,146
you read it and you're like, could you please give me this report in English?

224
00:15:20,338 --> 00:15:23,186
When really it's just written in security nerd.

225
00:15:23,378 --> 00:15:26,486
So knowledge, this is the third way

226
00:15:26,508 --> 00:15:29,900
of DevOps, through and through. So think about this.

227
00:15:32,030 --> 00:15:35,642
We're talking about continuous learning, we're talking about risk taking.

228
00:15:35,776 --> 00:15:39,482
We're talking about taking time to improve your daily work. And we need to learn

229
00:15:39,536 --> 00:15:43,120
and educate ourselves to do that. And so

230
00:15:43,650 --> 00:15:47,134
there's just so many different ways that we

231
00:15:47,172 --> 00:15:50,734
can try to get knowledge and none of these

232
00:15:50,772 --> 00:15:52,720
things need.

233
00:15:54,150 --> 00:15:57,518
You could take a class, you can job shadow.

234
00:15:57,614 --> 00:16:00,900
There's just so many ways that you can get knowledge to learn.

235
00:16:04,550 --> 00:16:07,862
So this might sound weird, like education is like taking

236
00:16:07,916 --> 00:16:11,174
training and honing your skills where knowledge could

237
00:16:11,212 --> 00:16:14,006
be having a whole bunch of books that, you know, you can look it up

238
00:16:14,028 --> 00:16:17,686
in, having access to, let's say,

239
00:16:17,708 --> 00:16:21,074
LinkedIn learning. So the actual act of educating

240
00:16:21,122 --> 00:16:24,666
yourself is one thing, but just having access to a knowledge base where you

241
00:16:24,688 --> 00:16:27,846
can go look up things, having someone that is smart,

242
00:16:27,878 --> 00:16:31,558
that can help you find the answer, having brainstorming sessions

243
00:16:31,654 --> 00:16:35,840
is where you can find the knowledge you need to do the thing where

244
00:16:36,450 --> 00:16:40,366
education, or developer education, as I like to call it, this is

245
00:16:40,388 --> 00:16:44,434
also the third way. And so we could get reference materials and

246
00:16:44,472 --> 00:16:48,434
set everyone else up for success. We could do an advocacy program

247
00:16:48,632 --> 00:16:52,862
where we change the culture of the place that we work by advocating

248
00:16:52,926 --> 00:16:56,260
for secure software as a cause or as a policy.

249
00:16:56,630 --> 00:17:00,006
We could do a security champions program where we have

250
00:17:00,028 --> 00:17:03,442
one person per dev team that kind of champions

251
00:17:03,506 --> 00:17:07,334
the cause of security. And they make sure the security work gets done. And they

252
00:17:07,372 --> 00:17:11,146
share messages from the security team, and they share messages from your team

253
00:17:11,328 --> 00:17:15,174
back to the security team, like getting help, getting assistance, getting licenses,

254
00:17:15,222 --> 00:17:18,906
getting whatever they need. This could be lunch and learns. This could

255
00:17:18,928 --> 00:17:22,394
be time reserved every week for learning in their calendars

256
00:17:22,442 --> 00:17:26,270
so that you actually get it done. So between

257
00:17:26,420 --> 00:17:29,834
forming knowledge and having access to knowledge versus doing formal

258
00:17:29,882 --> 00:17:33,038
education, all of these things are totally in

259
00:17:33,044 --> 00:17:36,740
line with DevOps, and none of them require a pipeline for you to do.

260
00:17:37,270 --> 00:17:40,546
The next one is giving developers security tools. So you could give

261
00:17:40,568 --> 00:17:44,222
them a dynamic scanner, a static analysis scanner.

262
00:17:44,366 --> 00:17:48,574
You could have them create unit tests and then help them create security unit

263
00:17:48,622 --> 00:17:52,086
tests, you could create like buy tools that are able to

264
00:17:52,108 --> 00:17:55,510
just scan over your repo and find bugs. You could

265
00:17:55,580 --> 00:17:59,258
help them research different types of idE plugins that

266
00:17:59,264 --> 00:18:03,100
are super helpful. There's so many cool security plugins now.

267
00:18:03,710 --> 00:18:07,354
Compared to when I was a dev, there was like, nothing makes

268
00:18:07,392 --> 00:18:10,890
me feel old. Software composition analysis.

269
00:18:11,330 --> 00:18:15,454
Talk about shifting security left, right. So if

270
00:18:15,492 --> 00:18:20,106
you give these tools to software developers and they're using them during the coding phase,

271
00:18:20,298 --> 00:18:24,190
that's even before we're trying to release anywhere. You don't even need compilable

272
00:18:24,270 --> 00:18:28,206
code for a lot of these things. For dynamic scanning

273
00:18:28,238 --> 00:18:32,046
you do, but not for stack analysis or secret scanning or linting.

274
00:18:32,238 --> 00:18:35,542
And so give them the tools, let them

275
00:18:35,596 --> 00:18:39,560
take control. Right? Again, no pipelines needed.

276
00:18:40,650 --> 00:18:43,798
Okay, so a secure system development lifecycle. So this

277
00:18:43,804 --> 00:18:45,560
is the thing that frustrates me.

278
00:18:48,650 --> 00:18:52,246
Lots of appsec teams that I work with, they're like, we're doing devsecops.

279
00:18:52,278 --> 00:18:56,842
And I'm like, awesome, what are you doing? And they're like, we bought $100,000

280
00:18:56,896 --> 00:19:00,318
worth of tools. And I'm like, wow, that's a lot of money. And we have

281
00:19:00,324 --> 00:19:03,342
put them all in the pipeline. I'm like, cool. And they're like,

282
00:19:03,476 --> 00:19:07,022
that's it. But what about the other

283
00:19:07,076 --> 00:19:09,760
phases? So what about during,

284
00:19:12,390 --> 00:19:16,386
like, what about having a set of standardized security requirements for

285
00:19:16,408 --> 00:19:20,542
software projects? So you're building an API.

286
00:19:20,606 --> 00:19:24,194
Awesome. Here are my security requirements for you for

287
00:19:24,232 --> 00:19:27,554
building any API where we work, a web app, same,

288
00:19:27,672 --> 00:19:31,030
serverless, same like, here's a list of requirements of what I expect

289
00:19:31,100 --> 00:19:34,706
from you on how to build this safely. Having a secure coding

290
00:19:34,738 --> 00:19:38,150
guideline and then teaching your software developers that guideline

291
00:19:38,310 --> 00:19:42,300
again, supporting them with reference materials or code samples if possible,

292
00:19:43,550 --> 00:19:47,734
review and respect secure design principles when in the design phase.

293
00:19:47,862 --> 00:19:51,258
Or do threat modeling in the design phase or doing a

294
00:19:51,264 --> 00:19:54,766
pen test in the testing phase. There's so many different

295
00:19:54,868 --> 00:19:58,986
security activities that you can add to your system development lifecycle.

296
00:19:59,018 --> 00:20:02,606
And devsecops does not mean putting some tools in the pipeline and

297
00:20:02,628 --> 00:20:06,226
it's failing it. Good. I secured all the things right.

298
00:20:06,328 --> 00:20:10,878
We need to fix bugs that we find. They also are usually like tools.

299
00:20:10,974 --> 00:20:14,580
Automated tools are notoriously bad for finding business logic issues.

300
00:20:16,390 --> 00:20:20,118
There's more. So we could assign an Appsec resource to the

301
00:20:20,124 --> 00:20:23,378
project team and do the partnership model. So have an Appsec person that's

302
00:20:23,394 --> 00:20:25,800
sort of like on demand for your team.

303
00:20:26,490 --> 00:20:30,134
Pen testers like penetration testing that happens outside your

304
00:20:30,172 --> 00:20:33,926
pipeline for sure. There's no way that they should be touching your pipeline

305
00:20:34,118 --> 00:20:37,194
chaos engineering happens a lot less often, but like

306
00:20:37,232 --> 00:20:40,858
a red teaming exercise, again would happen outside your pipeline.

307
00:20:41,034 --> 00:20:44,682
Monitoring, logging and alerting are so essential to ensuring

308
00:20:44,746 --> 00:20:48,510
that the applications you have created continue to be secure.

309
00:20:49,010 --> 00:20:51,840
And those have nothing to do with the pipeline, right?

310
00:20:52,210 --> 00:20:55,694
When you're responding to a security incident, if your app has been attacked,

311
00:20:55,742 --> 00:20:59,122
again, no pipeline doing

312
00:20:59,256 --> 00:21:02,786
security work as part of a sprint. So having a sprint in

313
00:21:02,808 --> 00:21:05,540
your project dedicated only to security,

314
00:21:06,070 --> 00:21:09,062
like where you fix all the bugs or you do threat modeling all day long,

315
00:21:09,116 --> 00:21:12,486
or whatever the thing is the security team has decided is the most important.

316
00:21:12,588 --> 00:21:16,086
Again, you don't need to access the

317
00:21:16,108 --> 00:21:19,446
pipelines, but we're totally compliant with the three ways of DevOps.

318
00:21:19,478 --> 00:21:23,370
We are being supportive, we are helping them create more secure apps,

319
00:21:24,110 --> 00:21:27,610
so tools that work outside the pipeline.

320
00:21:28,030 --> 00:21:31,306
So a big goal for a lot of Appsec

321
00:21:31,338 --> 00:21:34,926
teams is to implement useful and effective tooling. And that

322
00:21:34,948 --> 00:21:38,414
means we need, oh wait, that means we need accurate results, we need

323
00:21:38,452 --> 00:21:42,174
good coverage, we need valuable feedback that

324
00:21:42,212 --> 00:21:45,106
goes to the correct person.

325
00:21:45,288 --> 00:21:49,122
And so not all the tools that we have. There's still

326
00:21:49,176 --> 00:21:52,478
tools that are awesome, but that shouldn't go in a pipeline.

327
00:21:52,654 --> 00:21:56,494
So if there's false positives, that shouldn't go into a pipelines.

328
00:21:56,622 --> 00:22:00,310
If it's going to take like 6 hours to run, or even 16 minutes,

329
00:22:00,380 --> 00:22:03,794
it shouldn't go in the pipeline. Sometimes continuous

330
00:22:03,842 --> 00:22:07,494
scanning can be way more accurate, like scanning over and over and over

331
00:22:07,532 --> 00:22:10,790
again, like every 24 hours or every week or whatever.

332
00:22:10,940 --> 00:22:13,786
Maybe you're not going to run your pipelines for a few weeks because you're going

333
00:22:13,808 --> 00:22:17,654
on a european vacation and you're like touring all the hostels of Europe

334
00:22:17,782 --> 00:22:20,598
and you're not going to run your CI CD that whole time.

335
00:22:20,784 --> 00:22:24,494
Problems still could have happened, right? So you could do DNS based

336
00:22:24,532 --> 00:22:28,350
scanning, agent based scanning code, repo scanning.

337
00:22:29,970 --> 00:22:32,754
There are a lot and a lot of options of things you can do with

338
00:22:32,792 --> 00:22:36,002
tools that can be done outside the pipelines very

339
00:22:36,056 --> 00:22:39,874
effectively. Incident response so

340
00:22:39,992 --> 00:22:43,486
what do I want? I want a trained incident response team that understands

341
00:22:43,518 --> 00:22:47,438
appsac. Oh God, I want one so bad. Everywhere I

342
00:22:47,464 --> 00:22:51,526
work I get dragged in to the incidents because I

343
00:22:51,548 --> 00:22:55,000
am the nerd that understands software, right? And it's like, Tanya, there's this,

344
00:22:57,530 --> 00:23:01,574
an incident response team, they should never be touching your pipeline unless

345
00:23:01,622 --> 00:23:04,966
that's what's been attacked. You should not involve your pipelines.

346
00:23:05,078 --> 00:23:08,454
And so there's so many things you can do to enable

347
00:23:08,502 --> 00:23:11,386
an incident response team, like creating a process,

348
00:23:11,488 --> 00:23:14,954
circulating it widely, giving access to your inventory.

349
00:23:15,002 --> 00:23:19,018
So showing them the inventory that we made on the first goal

350
00:23:19,194 --> 00:23:22,574
so that they know when an incident happens, who to talk to, where the app

351
00:23:22,612 --> 00:23:26,222
is, et cetera, giving them read only access to your repos,

352
00:23:26,286 --> 00:23:29,218
access to tools, having a post mortem, doing training,

353
00:23:29,304 --> 00:23:32,782
et cetera. As a bonus,

354
00:23:32,846 --> 00:23:36,406
you could implement tools that help prevent and detect application

355
00:23:36,508 --> 00:23:37,910
security incidents.

356
00:23:40,170 --> 00:23:43,842
There's so much you can do with an incident

357
00:23:43,906 --> 00:23:48,070
response team that's really important for any information security

358
00:23:48,220 --> 00:23:52,090
program. None of it has to do with a pipelines.

359
00:23:52,670 --> 00:23:56,666
Another thing, metrics. So I am a huge fan of basing our

360
00:23:56,688 --> 00:24:00,878
programs at work and at home based on data, and so

361
00:24:00,964 --> 00:24:04,334
we can continually improve our program based on

362
00:24:04,372 --> 00:24:08,174
metric experimentation and feedback from any and

363
00:24:08,212 --> 00:24:12,046
all stakeholders. Because all feedback is

364
00:24:12,068 --> 00:24:16,138
important. And I kid you, not, all feedback can really be important,

365
00:24:16,324 --> 00:24:19,234
even if you receive feedback and you disagree with it.

366
00:24:19,352 --> 00:24:23,266
And then you need to teach that person the thing because their feedback is I

367
00:24:23,288 --> 00:24:27,240
don't want to change, ever. I'm sure you've all run into this,

368
00:24:27,690 --> 00:24:32,114
but you can use a pipeline to gather some metrics,

369
00:24:32,242 --> 00:24:35,666
but you can also gather a lot of things and use these metrics

370
00:24:35,698 --> 00:24:39,318
outside the pipeline. So for instance, every three months review all your tool

371
00:24:39,484 --> 00:24:43,354
output and then do a post mortem or ask for

372
00:24:43,392 --> 00:24:46,522
information from stakeholders. You could experiment to find

373
00:24:46,576 --> 00:24:49,530
better ways to reach your goals and measure to see how you do it.

374
00:24:49,600 --> 00:24:53,214
You can do proof of concepts of new tools and approaches on one

375
00:24:53,252 --> 00:24:57,658
project instead of all projects, and see if you want to proliferate

376
00:24:57,674 --> 00:25:01,726
that to all your other teams. You could visit other appsec shops and

377
00:25:01,748 --> 00:25:05,346
learn from them. If it's possible, you could follow industry leaders in

378
00:25:05,368 --> 00:25:08,946
this area so that you can learn more. You could attend conference and sit in

379
00:25:08,968 --> 00:25:11,890
on talks like this conference.

380
00:25:12,470 --> 00:25:16,126
Yes, you can form relationships with other areas

381
00:25:16,158 --> 00:25:19,080
of it in efforts to work better together.

382
00:25:19,530 --> 00:25:22,562
And all of that is part of the third way of DevOps.

383
00:25:22,626 --> 00:25:26,114
That's you being also really an awesome team player,

384
00:25:26,162 --> 00:25:29,414
just in general. And I'm going to take a brute deep breath

385
00:25:29,462 --> 00:25:33,354
and I'm going to do a summary. So we

386
00:25:33,392 --> 00:25:37,018
talked about program goals for our application

387
00:25:37,104 --> 00:25:40,634
security program and how

388
00:25:40,752 --> 00:25:44,430
we can reach lots of our goals without even

389
00:25:44,580 --> 00:25:48,046
touching the pipeline and bothering anyone. I'm not saying we

390
00:25:48,068 --> 00:25:51,502
should never put things in the pipelines, we totally should.

391
00:25:51,636 --> 00:25:55,226
But we should think outside the box and think outside the pipeline and do

392
00:25:55,268 --> 00:25:57,860
appsec in many ways, not just one way.

393
00:25:58,230 --> 00:26:02,082
Appsec is not a tool that you can buy. It's not a button

394
00:26:02,136 --> 00:26:05,070
you can press. There's no check you can write.

395
00:26:05,240 --> 00:26:09,026
Unfortunately. If you could, I would accept checks

396
00:26:09,058 --> 00:26:10,520
though. If you want sense,

397
00:26:11,690 --> 00:26:15,734
and DevOps is more than just pipelines. There's so

398
00:26:15,772 --> 00:26:19,218
much more than this. And so I hope that I've given you

399
00:26:19,244 --> 00:26:23,014
some ideas of how we can do awesome security in a DevOps

400
00:26:23,062 --> 00:26:27,206
environment without just throwing every single thing at the pipeline

401
00:26:27,318 --> 00:26:30,906
and potentially slowing everyone else down or tripping them up. We want to

402
00:26:30,928 --> 00:26:34,646
be careful and diligent and respectful when

403
00:26:34,688 --> 00:26:38,286
we are adding things to the pipelines because we're affecting every single person on the

404
00:26:38,308 --> 00:26:41,678
team when we do that. And with that, I want to give you

405
00:26:41,684 --> 00:26:45,310
some resources. So first of all, awesome books,

406
00:26:45,470 --> 00:26:49,186
the DevOps Handbook, the Phoenix Project, accelerate the

407
00:26:49,208 --> 00:26:53,074
Unicorn project. There's now investments unlimited as well, which I need to add to this

408
00:26:53,112 --> 00:26:56,238
slide. And then there's, spoiler alert, super biased.

409
00:26:56,414 --> 00:26:58,680
Alice and Bob learn application security.

410
00:26:59,450 --> 00:27:02,360
Me and my mom agree it's pretty good.

411
00:27:03,770 --> 00:27:07,074
The Sumgrap newsletter so I used to have a Wehack Purple

412
00:27:07,122 --> 00:27:10,818
newsletter, but Wehack Purple got acquired by Sumgrap

413
00:27:10,834 --> 00:27:14,426
and so now I'm helping to write their newsletter and it is chock full of

414
00:27:14,448 --> 00:27:18,634
so much content. But unlike before, where it was just content, I built, you now

415
00:27:18,672 --> 00:27:21,690
get content from Lee, Clint, Peter,

416
00:27:21,850 --> 00:27:25,886
Kyle, Milan. There's so many people creating content that

417
00:27:25,908 --> 00:27:28,960
goes in there now and it's pretty freaking good.

418
00:27:29,490 --> 00:27:32,734
You can join the Wehack Purple community. So it is still live

419
00:27:32,772 --> 00:27:35,454
and kick in with like over 8000 people in there,

420
00:27:35,572 --> 00:27:39,362
learning, hanging out, having events. We had an event yesterday, we have another event

421
00:27:39,416 --> 00:27:42,642
next week. All our events are free. The community is free.

422
00:27:42,696 --> 00:27:46,022
All the courses inside are free. Every single thing about it is

423
00:27:46,076 --> 00:27:49,750
free. There's no upsell. We're just like, please make more secure software.

424
00:27:50,490 --> 00:27:53,970
Every Monday on Twitter, on Blue sky,

425
00:27:54,050 --> 00:27:58,490
and on Mastodon, on the infosec exchange server.

426
00:27:58,910 --> 00:28:03,590
Every single Monday I run a mentoring matching

427
00:28:03,670 --> 00:28:06,678
program. So I am a terrible matchmaker.

428
00:28:06,854 --> 00:28:10,438
I'm sorry. I've tried so many times and every single match I've

429
00:28:10,454 --> 00:28:13,822
made has been a disaster. So I have learned instead to allow people to match

430
00:28:13,876 --> 00:28:17,374
with each other. And so if you want to give back and take

431
00:28:17,412 --> 00:28:20,606
someone under your wing, respond to someone who's on

432
00:28:20,628 --> 00:28:24,062
this thread, you'll make their entire year. And the

433
00:28:24,116 --> 00:28:27,166
reverse is true. If you want to get into cybersecurity,

434
00:28:27,358 --> 00:28:31,022
if you want to perhaps change from one subfield to another subfield,

435
00:28:31,086 --> 00:28:34,866
or you want to perfect your skills, or try to just have a mentor to

436
00:28:34,888 --> 00:28:38,790
help take your career to the next level, use this

437
00:28:38,860 --> 00:28:42,326
hashtag. On Mondays, tag me and I'll retweet you to

438
00:28:42,348 --> 00:28:46,710
the whole world. I have quite a few followers now and please

439
00:28:46,780 --> 00:28:49,618
connect. Let me help you find a mentor.

440
00:28:49,794 --> 00:28:53,306
Resources me, I am a nerd. I am on the Internet quite a

441
00:28:53,328 --> 00:28:57,094
bit. I'm at Shehex Purple pretty much everywhere.

442
00:28:57,222 --> 00:29:00,374
I have my own website now that I threw together in WordPress.

443
00:29:00,422 --> 00:29:03,638
That is average at best, but I have a lot of resources there

444
00:29:03,664 --> 00:29:07,550
that are all free. I have a YouTube channel, I have a newsletter,

445
00:29:07,890 --> 00:29:11,694
and I just post lots of things. So if you liked this, you might like

446
00:29:11,732 --> 00:29:15,182
other work that I do. I have something like 22 or 23 different

447
00:29:15,236 --> 00:29:18,514
conference blocks now and a lot more stuff like

448
00:29:18,552 --> 00:29:21,714
hundreds of videos. I'm that person. And with

449
00:29:21,752 --> 00:29:24,738
that, I want to say thank you so much.

450
00:29:24,824 --> 00:29:28,210
Thank you to comp 42 for having me for the third or

451
00:29:28,280 --> 00:29:31,838
fourth or fifth time now. Thank you for letting

452
00:29:31,854 --> 00:29:35,746
me be a part of this community. Thank you, person that's watching this

453
00:29:35,848 --> 00:29:39,146
because you decided to watch this instead of

454
00:29:39,168 --> 00:29:42,554
the trillions of other cool things on the Internet. There are so many

455
00:29:42,592 --> 00:29:46,070
cat videos that you probably haven't seen yet that are pretty funny.

456
00:29:46,150 --> 00:29:49,898
There's probably XKCD comics you haven't read yet,

457
00:29:49,984 --> 00:29:53,226
but you chose this. So thank you. I appreciate you.

458
00:29:53,328 --> 00:29:56,662
And with that, I'm Tanya Jenka, also known as she hacks purple.

459
00:29:56,726 --> 00:30:00,120
And I hope that you secure all the things.

