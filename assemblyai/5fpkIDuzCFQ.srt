1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:13,614
observing changes exceptions errors in real

4
00:00:13,652 --> 00:00:16,746
time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,530
Code hello

7
00:00:47,600 --> 00:00:51,534
everybody, I'm here to talk about one

8
00:00:51,572 --> 00:00:56,014
of the problems we have in

9
00:00:56,212 --> 00:00:59,934
project development with front end and back end

10
00:01:00,132 --> 00:01:03,762
teams. The problem is

11
00:01:03,816 --> 00:01:08,260
not usually a technology problem,

12
00:01:09,190 --> 00:01:13,300
it's a communication problem.

13
00:01:13,990 --> 00:01:15,540
I introduce myself,

14
00:01:17,370 --> 00:01:21,714
my name is Julio Regis. I'm head frontend developer at Singular.

15
00:01:21,842 --> 00:01:25,766
I have more than 19 years of experience in

16
00:01:25,788 --> 00:01:29,450
web development and currently I'm leading the frontend

17
00:01:29,600 --> 00:01:33,114
side of OSS initiative at

18
00:01:33,232 --> 00:01:36,220
Sngular. Let's talk about the pain.

19
00:01:37,550 --> 00:01:40,878
The main problem when we start a project

20
00:01:40,964 --> 00:01:44,478
with front end and side and back end

21
00:01:44,644 --> 00:01:48,302
teams is when front

22
00:01:48,356 --> 00:01:51,360
end team can start to work.

23
00:01:51,730 --> 00:01:54,960
Currently we made use of

24
00:01:55,570 --> 00:01:59,774
mocks to start development

25
00:01:59,822 --> 00:02:05,230
the front side, but it makes the

26
00:02:05,400 --> 00:02:09,160
communication can be different.

27
00:02:12,090 --> 00:02:16,280
When we are in the integration moment,

28
00:02:18,670 --> 00:02:22,202
API needs time

29
00:02:22,256 --> 00:02:26,058
to make his work and we

30
00:02:26,144 --> 00:02:29,622
can or mock the expected

31
00:02:29,766 --> 00:02:33,886
input and outputs from API or wait

32
00:02:34,068 --> 00:02:37,054
them to finish their work.

33
00:02:37,252 --> 00:02:41,674
This can block the entire frontend

34
00:02:41,722 --> 00:02:45,300
team a lot of time and we are

35
00:02:47,830 --> 00:02:51,620
waiting for the server side

36
00:02:53,110 --> 00:02:55,410
can be a lot of time waiting.

37
00:02:56,330 --> 00:03:00,102
Another pain is that when we

38
00:03:00,236 --> 00:03:02,930
integrate the two systems,

39
00:03:03,090 --> 00:03:07,254
the difference between them or even a

40
00:03:07,292 --> 00:03:11,660
difference made in API in the future.

41
00:03:12,190 --> 00:03:15,930
Any changed can broke the front

42
00:03:16,000 --> 00:03:20,310
end site. If we don't find

43
00:03:20,480 --> 00:03:22,960
it early,

44
00:03:24,290 --> 00:03:28,382
what's the solution? The solution is talk talk

45
00:03:28,436 --> 00:03:32,670
between both teams. Both teams

46
00:03:33,030 --> 00:03:37,010
can negotiate the API signature

47
00:03:37,750 --> 00:03:40,798
until they reach an agreement.

48
00:03:40,974 --> 00:03:44,638
When both agree with the contract,

49
00:03:44,734 --> 00:03:48,470
we can start development

50
00:03:49,130 --> 00:03:52,870
coding each one each

51
00:03:52,940 --> 00:03:55,542
side. In this moment,

52
00:03:55,596 --> 00:03:59,558
development teams can work in parallel without any block

53
00:03:59,734 --> 00:04:03,850
between them. The developers

54
00:04:04,190 --> 00:04:07,594
are happy because the API is well

55
00:04:07,632 --> 00:04:11,246
designed, they agree with the

56
00:04:11,348 --> 00:04:14,954
specification and the API

57
00:04:15,002 --> 00:04:18,826
is well documented. Also reduce

58
00:04:18,858 --> 00:04:22,494
the risk of failure because all teams must

59
00:04:22,532 --> 00:04:28,242
honor the contract. If one team made

60
00:04:28,376 --> 00:04:32,126
a change without telling

61
00:04:32,158 --> 00:04:36,440
it to the other team,

62
00:04:37,450 --> 00:04:41,202
it will broke before integration

63
00:04:41,266 --> 00:04:45,106
time. We can introduce

64
00:04:45,138 --> 00:04:48,310
it in OCI CD pipes.

65
00:04:48,470 --> 00:04:52,566
Also, how can we communicate

66
00:04:52,678 --> 00:04:56,598
and agree the communication

67
00:04:56,694 --> 00:05:00,462
between both sides using open

68
00:05:00,516 --> 00:05:04,686
API specifications files? Here we

69
00:05:04,708 --> 00:05:08,170
can define endpoints,

70
00:05:08,250 --> 00:05:11,034
methods, parameters, inputs,

71
00:05:11,082 --> 00:05:13,700
outputs, anything.

72
00:05:14,630 --> 00:05:17,474
Anybody made this before?

73
00:05:17,592 --> 00:05:21,874
Yes there are more tools in

74
00:05:21,992 --> 00:05:25,670
Internet that you can download and

75
00:05:25,740 --> 00:05:30,294
use for this, but they usually

76
00:05:30,412 --> 00:05:34,626
are over Java virtual machine

77
00:05:34,818 --> 00:05:38,594
we don't want to have frontend developers

78
00:05:38,642 --> 00:05:41,960
to install all the Java world,

79
00:05:42,410 --> 00:05:47,046
so we want to make it in Nodejs,

80
00:05:47,238 --> 00:05:51,194
Novg, JS. They have all installed

81
00:05:51,242 --> 00:05:54,794
in their development computers,

82
00:05:54,922 --> 00:05:58,446
so it's easy to start to use

83
00:05:58,468 --> 00:06:01,758
these tools. Which are

84
00:06:01,844 --> 00:06:05,620
these tools? Well, we have

85
00:06:06,070 --> 00:06:09,698
two tools currently, one in

86
00:06:09,784 --> 00:06:13,186
production state and another we

87
00:06:13,208 --> 00:06:15,910
are developing nowadays.

88
00:06:16,410 --> 00:06:19,974
The first one allow us to create

89
00:06:20,092 --> 00:06:23,602
the scaffolding magically.

90
00:06:23,746 --> 00:06:27,974
We have no need to code anything to have

91
00:06:28,092 --> 00:06:32,886
a functional version of

92
00:06:32,908 --> 00:06:36,486
the API calls. We simply

93
00:06:36,598 --> 00:06:39,974
read and open API specification files and

94
00:06:40,032 --> 00:06:43,498
it made us server,

95
00:06:43,594 --> 00:06:48,090
client or interface.

96
00:06:48,250 --> 00:06:52,160
So we speak the same language between

97
00:06:52,870 --> 00:06:56,242
all the teams. As I said

98
00:06:56,296 --> 00:06:59,646
before, this is already in production and can be startled

99
00:06:59,678 --> 00:07:04,114
from global NPM registry. So you

100
00:07:04,232 --> 00:07:08,054
all can test it and send us any

101
00:07:08,092 --> 00:07:12,054
comment you want. Open us any issues

102
00:07:12,172 --> 00:07:15,814
if you find any bug and

103
00:07:15,932 --> 00:07:21,754
we'll try to fix them as soon as possible with

104
00:07:21,792 --> 00:07:24,890
the team we have in sngular.

105
00:07:26,430 --> 00:07:33,550
The other tool will

106
00:07:33,620 --> 00:07:37,342
have two different nodejs. The first

107
00:07:37,396 --> 00:07:40,800
one in which we are

108
00:07:41,250 --> 00:07:45,246
working in this moment is the possibility

109
00:07:45,358 --> 00:07:48,530
of launch a mock server

110
00:07:49,670 --> 00:07:53,486
without any human interaction.

111
00:07:53,678 --> 00:07:57,522
We can read and open up a specification file

112
00:07:57,666 --> 00:08:01,990
and in this moment we have working

113
00:08:02,060 --> 00:08:05,590
endpoints so we can start to connect

114
00:08:05,660 --> 00:08:09,690
them from our

115
00:08:09,840 --> 00:08:13,500
front end application. The second

116
00:08:14,270 --> 00:08:18,282
part of this project will allow

117
00:08:18,336 --> 00:08:22,240
us to validate any API server to

118
00:08:23,890 --> 00:08:27,774
check if works with the

119
00:08:27,812 --> 00:08:30,240
specification we agreed before.

120
00:08:31,570 --> 00:08:33,380
Let's try them.

121
00:08:35,030 --> 00:08:41,780
Well, first tool is the code

122
00:08:42,230 --> 00:08:47,400
generator. We have a simple

123
00:08:48,010 --> 00:08:51,960
yaml file with

124
00:08:52,730 --> 00:08:56,642
anything, some endpoints and some methods

125
00:08:56,786 --> 00:08:58,700
and the response of them.

126
00:09:00,430 --> 00:09:04,250
When we launch the tools

127
00:09:04,670 --> 00:09:09,306
we generate code

128
00:09:09,488 --> 00:09:13,390
to server and client inside without

129
00:09:13,540 --> 00:09:18,398
doing anything. We can see in

130
00:09:18,484 --> 00:09:22,222
this execution we create client and

131
00:09:22,276 --> 00:09:26,050
server code and interface code to communicate

132
00:09:29,270 --> 00:09:33,294
the object to define

133
00:09:33,342 --> 00:09:35,540
the object we are going to use.

134
00:09:36,230 --> 00:09:39,910
Let's see what it was create automatically.

135
00:09:40,330 --> 00:09:43,478
We have a client code

136
00:09:43,644 --> 00:09:47,286
with the endpoints of

137
00:09:47,308 --> 00:09:51,260
the specifications file and the methods we

138
00:09:51,870 --> 00:09:54,970
are defined in the specification.

139
00:09:56,430 --> 00:10:00,650
In server side we have an express server

140
00:10:01,010 --> 00:10:03,550
with the endpoints and methods.

141
00:10:05,170 --> 00:10:08,906
In the scaffolding we only launch

142
00:10:09,018 --> 00:10:14,430
trigger an error so you can

143
00:10:14,500 --> 00:10:18,050
know it's not implemented. But here you can

144
00:10:18,200 --> 00:10:25,114
introduce your own code with database

145
00:10:25,262 --> 00:10:28,440
connections or any service

146
00:10:29,450 --> 00:10:33,462
you need and it

147
00:10:33,516 --> 00:10:36,854
makes the interface we are going to

148
00:10:36,892 --> 00:10:40,646
use. In this sample we

149
00:10:40,668 --> 00:10:44,678
have a group interface and a schema interface

150
00:10:44,854 --> 00:10:48,874
and can user interface in

151
00:10:49,072 --> 00:10:52,850
the other tool which is in development stage.

152
00:10:53,030 --> 00:10:56,926
In this moment we

153
00:10:57,108 --> 00:11:01,070
are going to launch a moss server

154
00:11:01,490 --> 00:11:05,154
and with Postman we are going to see

155
00:11:05,272 --> 00:11:09,346
the inputs and output we can retrieve from

156
00:11:09,368 --> 00:11:12,786
the server. Simply we

157
00:11:12,888 --> 00:11:14,450
launch the server,

158
00:11:16,410 --> 00:11:20,242
detect the roads

159
00:11:20,386 --> 00:11:24,054
in the file and in memory we

160
00:11:24,092 --> 00:11:27,734
launch the server as we

161
00:11:27,772 --> 00:11:31,910
can see was 2 seconds

162
00:11:32,070 --> 00:11:35,370
or so. Launching this server,

163
00:11:36,030 --> 00:11:39,794
let's go to Postman, let's retrieve

164
00:11:39,942 --> 00:11:43,022
the schema registry. List is one

165
00:11:43,076 --> 00:11:46,734
sample we have and when

166
00:11:46,852 --> 00:11:51,214
we call our

167
00:11:51,332 --> 00:11:55,426
mock server it returns a list as we can

168
00:11:55,608 --> 00:11:59,714
see in the output a list now

169
00:11:59,832 --> 00:12:03,380
one object only but we have data

170
00:12:04,470 --> 00:12:08,166
in this moment we see also

171
00:12:08,348 --> 00:12:12,022
we can make another request which is

172
00:12:12,076 --> 00:12:16,200
going to retrieve was an only object

173
00:12:16,890 --> 00:12:21,258
and we can make also post

174
00:12:21,344 --> 00:12:26,330
and put request with

175
00:12:26,400 --> 00:12:29,862
validation. The specification

176
00:12:29,926 --> 00:12:33,338
files of post and put define

177
00:12:33,434 --> 00:12:37,194
the input. We are expecting

178
00:12:37,242 --> 00:12:41,790
to receive and validate

179
00:12:42,710 --> 00:12:46,770
the input data with

180
00:12:46,840 --> 00:12:50,194
the specification. So if we

181
00:12:50,312 --> 00:12:53,860
remove a field, mandatory field,

182
00:12:54,550 --> 00:12:58,246
we can see it's going to give us an

183
00:12:58,268 --> 00:13:02,390
error giving us which key

184
00:13:02,540 --> 00:13:05,110
is missing from the input.

185
00:13:06,730 --> 00:13:10,474
If we add a key which

186
00:13:10,512 --> 00:13:13,690
is not defined in the spec file,

187
00:13:14,030 --> 00:13:17,770
it will give us another error indicating

188
00:13:19,710 --> 00:13:22,880
the field is not allows to

189
00:13:23,970 --> 00:13:26,270
use in this request.

190
00:13:27,490 --> 00:13:31,498
The put request

191
00:13:31,674 --> 00:13:36,290
has the same validation than the post request. We can remove

192
00:13:36,790 --> 00:13:39,380
any field, any mandatory field,

193
00:13:40,790 --> 00:13:43,970
and we have the same error.

194
00:13:45,110 --> 00:13:46,360
And that's all.

195
00:13:48,890 --> 00:13:53,110
If you want contact to me in Twitter.

196
00:13:54,010 --> 00:13:57,410
You can tell me anything about

197
00:13:57,500 --> 00:13:59,820
these tools, any question,

198
00:14:00,590 --> 00:14:03,818
any issue you have using them

199
00:14:03,984 --> 00:14:09,610
on your day by day development.

200
00:14:14,050 --> 00:14:18,350
You can contact me via email also

201
00:14:18,420 --> 00:14:21,822
and you can download the code

202
00:14:21,956 --> 00:14:25,646
so you can see what we did at

203
00:14:25,748 --> 00:14:29,690
GitHub. Thank you for your attendance

204
00:14:29,850 --> 00:14:33,870
and I'll be here for anything

205
00:14:34,020 --> 00:14:34,460
you want.

