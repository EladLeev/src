1
00:00:00,250 --> 00:00:00,800
You.

2
00:00:22,940 --> 00:00:26,084
Hi all, I am glad to welcome everyone to this wonderful meeting.

3
00:00:26,132 --> 00:00:29,152
In today's talk, I will tell you about how I have solve the problem

4
00:00:29,206 --> 00:00:32,672
of reusable skeleton loaders and turn it into my own open

5
00:00:32,726 --> 00:00:35,952
source CSS library, skeleton mammoth before starting

6
00:00:36,006 --> 00:00:39,776
my speech, I want to introduce myself with a couple of facts. My name

7
00:00:39,798 --> 00:00:44,096
is Alexander Tskochenka. I have about five years of experience in it sphere

8
00:00:44,128 --> 00:00:47,872
in total, author of technical and scientific articles, hackathons,

9
00:00:47,936 --> 00:00:51,396
referring conferences, speaker and of course creator of the

10
00:00:51,418 --> 00:00:54,928
skeleton Mammoth open source CSS library. So let's

11
00:00:54,944 --> 00:00:58,564
get started. There are a lot of great articles on the Internet

12
00:00:58,612 --> 00:01:02,024
devoted to skeleton loaders covering their types, cases and needs

13
00:01:02,062 --> 00:01:05,336
for their use. After investigating this topic in detail,

14
00:01:05,438 --> 00:01:08,916
I came to the conclusion that each example already made solution is

15
00:01:08,958 --> 00:01:12,376
unique and good on its own way, but in most cases

16
00:01:12,408 --> 00:01:16,332
they are suitable for a specific scenario rather than for universal use. For many

17
00:01:16,386 --> 00:01:20,604
scenarios, these prompted me to create my own reusable and customizable

18
00:01:20,652 --> 00:01:24,304
solutions that would suit most use cases and what

19
00:01:24,342 --> 00:01:28,432
are skeleton loaders? A skeleton loader, also known as a skeleton screen

20
00:01:28,486 --> 00:01:32,316
or content placeholder, is a user interface design pattern used to enhance

21
00:01:32,348 --> 00:01:36,176
the user experience during content loading in web and mobile applications.

22
00:01:36,288 --> 00:01:39,716
When data is being fetched or processed in the background, instead of

23
00:01:39,738 --> 00:01:43,184
displaying a blank connective screen, a skeleton loader mimics

24
00:01:43,232 --> 00:01:46,344
page layout by providing users with a visual cue of

25
00:01:46,382 --> 00:01:50,324
what to expect, reducing perceived loading times and mitigation.

26
00:01:50,452 --> 00:01:54,276
Potential frustration many well known large websites

27
00:01:54,308 --> 00:01:58,116
use curtain loaders and here are some examples. These are examples

28
00:01:58,148 --> 00:02:01,352
of skeletons used on YouTube on the left side and LinkedIn

29
00:02:01,416 --> 00:02:04,556
on the right side. But why do we have to use

30
00:02:04,578 --> 00:02:07,916
skeleton loaders at all? Good question. In an attempt to

31
00:02:07,938 --> 00:02:12,000
answer this question briefly, I have outlined several main reasons for using

32
00:02:12,070 --> 00:02:15,820
skeleton loaders. But if you investigate this question separately,

33
00:02:15,900 --> 00:02:18,770
you can get a lot more information for yourself.

34
00:02:19,460 --> 00:02:23,696
And the first one is improve user experience. Skeleton loaders enhance

35
00:02:23,728 --> 00:02:27,376
the user experience by providing visual feedback and reducing the perception

36
00:02:27,408 --> 00:02:31,504
of content. Loading delays another one is reduced bounce

37
00:02:31,552 --> 00:02:35,112
rate. Yes, skeleton loaders can prevent users from leaving the page

38
00:02:35,166 --> 00:02:38,676
due to the loading delays. Another one is smooth

39
00:02:38,708 --> 00:02:42,196
transitions. They create smoother transition between different sites

40
00:02:42,228 --> 00:02:45,960
of a page or application and one more it's focus

41
00:02:46,030 --> 00:02:49,736
attention, unlike other alternative skeleton loaders attract the user

42
00:02:49,768 --> 00:02:52,350
attention to progress rather than waiting time.

43
00:02:52,880 --> 00:02:55,816
And here's the problems of mostly existing skeletons.

44
00:02:55,928 --> 00:02:59,656
Taking into account that there are a lot of examples of creating your own skeleton

45
00:02:59,688 --> 00:03:03,024
loaders or libraries that did it for you, there are still number of

46
00:03:03,062 --> 00:03:07,280
concerns with them. And here's its list limited customization

47
00:03:07,620 --> 00:03:11,356
many exited in skeletons have limited customization options. It leads

48
00:03:11,388 --> 00:03:15,168
to a mismatch of the actual content design and skeleton style.

49
00:03:15,344 --> 00:03:19,024
Another one is empowerment user support. Although their purpose

50
00:03:19,072 --> 00:03:22,756
is to provide a visual representation, most of them are not adapted to

51
00:03:22,778 --> 00:03:26,100
users with visual impairments or those who use screen readers.

52
00:03:26,520 --> 00:03:29,260
Another one is versatility and visibility.

53
00:03:29,440 --> 00:03:32,776
Most approaches to creating skeletons offer either creating a

54
00:03:32,798 --> 00:03:36,136
shallow copy of a component's placeholders, resulting in many and

55
00:03:36,158 --> 00:03:40,552
many similar copies, or essentially changing the structure of existing components.

56
00:03:40,696 --> 00:03:44,220
Both of the approaches require a lot of additional code and assets.

57
00:03:44,720 --> 00:03:48,088
One more maintenance complexity. As a website evolve

58
00:03:48,104 --> 00:03:51,632
and content changes, keeping skeleton loaders up to date can become

59
00:03:51,686 --> 00:03:55,376
a maintenance burden and another one bind to a

60
00:03:55,398 --> 00:03:58,944
specific framework library. Often, ready made solutions are

61
00:03:58,982 --> 00:04:02,556
either only stacked for certain frameworks such as react js or Vue

62
00:04:02,588 --> 00:04:05,552
js, or they are parts of a larger library.

63
00:04:05,696 --> 00:04:09,424
So, for example, if you only want to use skeleton from a popular libraries

64
00:04:09,472 --> 00:04:13,536
like MUI, you still need to install its core files or component of that

65
00:04:13,578 --> 00:04:16,730
library to use only one skeleton from there.

66
00:04:17,180 --> 00:04:20,392
Alternatives there are several alternatives to using

67
00:04:20,446 --> 00:04:23,832
skeletons, looking ahead and answering whether they are really

68
00:04:23,886 --> 00:04:27,064
alternatives. My answer is no, rather than yes.

69
00:04:27,182 --> 00:04:31,544
If we talk about correct usage, then the skeleton is one of the best solutions.

70
00:04:31,592 --> 00:04:35,710
But still, let's consider a couple of alternatives along with their pros and cons.

71
00:04:36,240 --> 00:04:39,660
And first of them is spinner. Spinner is a common

72
00:04:39,730 --> 00:04:43,308
alternative to skeleton loaders. They consist of animated icons

73
00:04:43,324 --> 00:04:47,196
that rotate continuously, providing a visual cue that the content is loading.

74
00:04:47,228 --> 00:04:50,576
You can see it on the slide. To the pros of spinners I can

75
00:04:50,598 --> 00:04:54,060
say its simplicity simple implementations that often requires only a

76
00:04:54,070 --> 00:04:57,716
few lines of code or using predesigned libraries. And of course

77
00:04:57,738 --> 00:05:01,380
it's a universal understanding. Spinners are widely recognized across

78
00:05:01,450 --> 00:05:04,964
different platforms and applications, ensuring that users

79
00:05:05,012 --> 00:05:08,276
understand that content is loading. To the columns of spinner

80
00:05:08,308 --> 00:05:11,736
I could attribute limited information. Spinners do

81
00:05:11,758 --> 00:05:14,872
not provide any context about the content is being

82
00:05:14,926 --> 00:05:18,616
loaders overlap the entire page almost of it, not individual

83
00:05:18,718 --> 00:05:22,316
elements. It gives the feeling of loading not individual elements of

84
00:05:22,338 --> 00:05:25,896
the page, but the entire site as a whole. So spinners

85
00:05:25,928 --> 00:05:30,720
are integral part of interfaces, but they are not exactly suitable for replacing skeletons.

86
00:05:31,140 --> 00:05:34,556
Another one is a progress bar. A progress bar is a visual

87
00:05:34,588 --> 00:05:38,160
element that indicates the completion status of a task or process.

88
00:05:38,310 --> 00:05:41,916
It provides a linear representation, typically with a field portion

89
00:05:41,948 --> 00:05:45,332
that grows gradually. The process of progress bar I could

90
00:05:45,386 --> 00:05:49,296
attribute precise feedback that provides accurate and precise feedback

91
00:05:49,328 --> 00:05:53,344
on the completion status of a task. Its time estimation progress

92
00:05:53,392 --> 00:05:57,332
bar can give user estimate of remaining time required for completion

93
00:05:57,476 --> 00:06:01,044
and its multipurpose progress bar can be used in various

94
00:06:01,092 --> 00:06:04,968
contexts and scenarios, making them a versatile component in web and

95
00:06:05,054 --> 00:06:08,840
application development. But for the cons of the spin

96
00:06:08,920 --> 00:06:12,344
progress bars, I could say it's lack of context. In some cases,

97
00:06:12,392 --> 00:06:16,136
progress bars might not provide sufficient context about the actual task

98
00:06:16,168 --> 00:06:19,884
approaches they represent and implementation complexity.

99
00:06:20,012 --> 00:06:23,532
Creating progress bar with accurate representation and smooth animations

100
00:06:23,596 --> 00:06:26,604
can be complex, especially when dealing with varying tasks,

101
00:06:26,652 --> 00:06:30,704
durations and responsiveness. Process bar are more suitable for

102
00:06:30,742 --> 00:06:34,472
scenarios showing the progress of a file, upload or quantity of progress.

103
00:06:34,636 --> 00:06:37,956
They are often used at the top of the pages to show the progress of

104
00:06:37,978 --> 00:06:41,508
an entire page loading. However, they cannot serve as

105
00:06:41,514 --> 00:06:46,040
an equivalent replacement for the skeleton because they are intended for other purposes

106
00:06:46,540 --> 00:06:50,072
and another one is absence of any visual yeah,

107
00:06:50,206 --> 00:06:54,084
not having any loaders or placeholders is also an alternative,

108
00:06:54,212 --> 00:06:58,024
and in some cases this will be a better solution than using unsuitable

109
00:06:58,072 --> 00:07:01,788
elements, the main and probably the only process that you

110
00:07:01,874 --> 00:07:05,560
don't need additional time and resources spent on implementations.

111
00:07:05,720 --> 00:07:09,464
But here come the obvious cons, a less attractive design for your site,

112
00:07:09,522 --> 00:07:11,890
and the perception of slower loading time.

113
00:07:12,500 --> 00:07:15,520
Creating versatile and reusable skeleton

114
00:07:15,940 --> 00:07:19,504
after I had gained enough knowledge of what skeletons are, when to

115
00:07:19,542 --> 00:07:23,604
use them and approaches to their development, I tried to determine for myself

116
00:07:23,722 --> 00:07:27,556
what my final result should be. These are the key requirements that

117
00:07:27,578 --> 00:07:31,172
I wanted to have present and my final result. So first,

118
00:07:31,226 --> 00:07:34,356
it's versatile and reusable. There are a lot

119
00:07:34,378 --> 00:07:37,972
of examples over the Internet with overcomplicated

120
00:07:38,036 --> 00:07:42,024
approaches where you have to create a separate skeleton for every component you

121
00:07:42,062 --> 00:07:45,448
want to have them on. In my cases, I want it to be something

122
00:07:45,534 --> 00:07:49,704
singular that can be reused for most cases and not stick to any JavaScript

123
00:07:49,752 --> 00:07:53,784
framework like react of you. The second one is configuration

124
00:07:53,832 --> 00:07:57,372
flexibility. Since every project and every case can be

125
00:07:57,426 --> 00:08:01,340
very different, my skeleton needed to be able to be configurable.

126
00:08:02,000 --> 00:08:05,708
Another one is future reach. Yeah, it's just a simple skeleton,

127
00:08:05,804 --> 00:08:09,216
but in addition to the standard set of features, I wanted to fill it with

128
00:08:09,238 --> 00:08:12,884
support for additional useful and necessary features. And last

129
00:08:12,922 --> 00:08:16,804
but not least, lightweight and dependencies free, lightweight and

130
00:08:16,842 --> 00:08:20,576
as free as possible from other third party dependencies.

131
00:08:20,768 --> 00:08:23,956
All of these expectations and investigations led me to the

132
00:08:23,978 --> 00:08:28,088
fact that my future skeleton had to be written in pure CSS without

133
00:08:28,174 --> 00:08:30,900
any JavaScript and third party dependencies.

134
00:08:31,060 --> 00:08:34,312
This makes it possible to be lightweight and dependencies free.

135
00:08:34,446 --> 00:08:37,736
The main idea that it inherits layouts of components it applied

136
00:08:37,768 --> 00:08:41,452
to and customize them with their own styles over

137
00:08:41,506 --> 00:08:45,144
time for development purposes, I have rewritten

138
00:08:45,192 --> 00:08:49,064
CSS syntax to SCSS. This made it possible to decompose

139
00:08:49,112 --> 00:08:52,416
the code for smaller logical parts, make it more concise and

140
00:08:52,438 --> 00:08:56,144
reusable, but the end result to the end compiled result is still

141
00:08:56,182 --> 00:09:00,288
pure CSS without any dependencies. Base card

142
00:09:00,454 --> 00:09:04,544
as a basic example and for demo purposes I will use react and take

143
00:09:04,582 --> 00:09:08,016
some base card markup to show how it works, but I remind you that it's

144
00:09:08,048 --> 00:09:11,652
not tied to any of the frameworks. Here is a card markup example

145
00:09:11,706 --> 00:09:15,236
that has its own styles and doesn't know about the existence of

146
00:09:15,258 --> 00:09:18,824
skeletons yet. It's just an ordinary card with an image and two

147
00:09:18,862 --> 00:09:22,776
text fields. You can see it's a parent class card

148
00:09:22,878 --> 00:09:26,532
in the parent div and some child divs with the card image wrapper

149
00:09:26,596 --> 00:09:29,080
and card body with title and subtitle.

150
00:09:29,520 --> 00:09:33,036
In order for the skeleton to become active, it's only necessary to

151
00:09:33,058 --> 00:09:36,652
apply the parent class SM loading to the card itself and the child

152
00:09:36,706 --> 00:09:40,716
classes smitem primary or smitem secondary to those elements on which

153
00:09:40,738 --> 00:09:44,096
we want to see the skeleton so the

154
00:09:44,118 --> 00:09:47,632
updated result will look like this. Let me break it down and explain

155
00:09:47,686 --> 00:09:50,976
in a few moments. On the first line of code, I apply a

156
00:09:50,998 --> 00:09:55,004
same loading class depending on the condition. If the status

157
00:09:55,052 --> 00:09:58,880
of the datastate datastat is equal to loading,

158
00:09:58,960 --> 00:10:02,116
then the class will be applied. Otherwise, no,

159
00:10:02,298 --> 00:10:05,540
the same loading class should only be set or present

160
00:10:05,610 --> 00:10:09,464
while your data is loading. It's kind of a feature to turn on

161
00:10:09,502 --> 00:10:13,652
or turn off the skeleton. So only when at present, child elements

162
00:10:13,716 --> 00:10:17,236
with the presence of appropriate classes smitem primary

163
00:10:17,268 --> 00:10:20,780
and the same item secondary will display the skeleton.

164
00:10:21,200 --> 00:10:24,876
Lines two, seven and eight of the code contain classes to

165
00:10:24,898 --> 00:10:29,144
show the skeleton on these elements. So only three classes will make this skeleton

166
00:10:29,192 --> 00:10:33,056
to work. Root variables colors let's take a

167
00:10:33,078 --> 00:10:36,508
little look under the hood and if you can clearly see what's shown

168
00:10:36,524 --> 00:10:40,208
on this slide, that's okay. The main idea is to show how everything

169
00:10:40,294 --> 00:10:43,536
works for usability as well as an advanced usage

170
00:10:43,568 --> 00:10:47,696
of the skeleton, which I will discuss later. The main style values

171
00:10:47,728 --> 00:10:51,200
are variables paste in the CSS root pseudoclass.

172
00:10:51,360 --> 00:10:54,784
This particular slide shows that every color value is placed inside

173
00:10:54,842 --> 00:10:58,730
the variable inside the CSS root pseudoclass. You can see it here.

174
00:10:59,180 --> 00:11:02,484
The same for animations. All values for animation

175
00:11:02,532 --> 00:11:06,292
management are in variables placed inside the root CSS pseudoclass.

176
00:11:06,356 --> 00:11:09,260
It's like duration, time and function, et cetera.

177
00:11:09,760 --> 00:11:12,936
Base styles this slide depict the base style

178
00:11:12,968 --> 00:11:17,020
that don't relate to any color scheme or configuration. The main idea

179
00:11:17,090 --> 00:11:20,976
in my approach is that the solution should be reusable and does not have

180
00:11:20,998 --> 00:11:23,820
to be customized separately for each component.

181
00:11:23,980 --> 00:11:27,216
As stated earlier, parent class sm loading is

182
00:11:27,238 --> 00:11:31,168
used to activate the skeleton loader style. You can see it here.

183
00:11:31,334 --> 00:11:35,076
The semitetem primary and smitem secondary classes override an

184
00:11:35,098 --> 00:11:38,532
element style and display the skeleton. In this way.

185
00:11:38,586 --> 00:11:41,984
The layout styles and dimensions of elements in our case it's

186
00:11:42,032 --> 00:11:45,396
base card component, are persisted and inherited by

187
00:11:45,418 --> 00:11:49,604
the skeleton loaders. So you don't need to specify width or height of the skeleton.

188
00:11:49,652 --> 00:11:53,048
It's inherited by the base components. In our case it's base card.

189
00:11:53,214 --> 00:11:56,984
Additionally, I would like to say that with this approach we guarantee that

190
00:11:57,022 --> 00:12:01,164
all child elements of the smitem primary class or

191
00:12:01,202 --> 00:12:04,856
smitem secondary are hidden and at least have a non

192
00:12:04,888 --> 00:12:08,332
creating space character. You can see it here. So if we have,

193
00:12:08,386 --> 00:12:12,032
let's say some empty div that doesn't have a content, but we have applied the

194
00:12:12,086 --> 00:12:15,536
smitem primary or secondary class, it will be shown in

195
00:12:15,558 --> 00:12:18,896
any way and rendered. If an element contains no

196
00:12:18,918 --> 00:12:23,132
content at all, the symbol ensures that the element is displayed and rendered.

197
00:12:23,276 --> 00:12:26,736
There is also a part that is responsible for users of screen readers

198
00:12:26,768 --> 00:12:30,116
and let them know that the content is in the process of loading. You can

199
00:12:30,138 --> 00:12:33,808
see it in the middle of the slide. The main idea of

200
00:12:33,834 --> 00:12:37,172
these basic styles is to hide all unnecessary visual elements

201
00:12:37,236 --> 00:12:40,584
such as borders, placeholders, et cetera, so you can

202
00:12:40,622 --> 00:12:44,276
apply your own skeleton styles structure

203
00:12:44,388 --> 00:12:47,556
here is a visual representation of what the base card components

204
00:12:47,588 --> 00:12:51,404
looks like. You can see like say our imaginary website and

205
00:12:51,442 --> 00:12:55,208
our base card component. The card has a class same loading

206
00:12:55,224 --> 00:12:59,180
to turn on the skeleton. So this card itself has class

207
00:12:59,250 --> 00:13:03,036
card and SM loading class. The elements on which

208
00:13:03,058 --> 00:13:05,708
the skeleton is displayed have corresponding classes,

209
00:13:05,804 --> 00:13:08,716
smitem primary and SM item secondary.

210
00:13:08,828 --> 00:13:12,640
Here you can see this image of the card with Smitem primary class

211
00:13:12,790 --> 00:13:17,380
and two fields with smitem secondary like title and subtitle

212
00:13:17,720 --> 00:13:21,556
advanced features in addition to the main functionality, it's good to

213
00:13:21,578 --> 00:13:25,224
have additional features to satisfy as many users needs as possible and

214
00:13:25,262 --> 00:13:29,416
cover as many use cases as possible. And first feature is

215
00:13:29,438 --> 00:13:32,804
color scheme with the CSS media feature prefers

216
00:13:32,852 --> 00:13:37,044
color scheme I have implemented automatic support of the light and dark themes.

217
00:13:37,172 --> 00:13:40,924
Depending on the user settings, it will be applied automatically. Of course

218
00:13:40,962 --> 00:13:44,156
it's possible to set it manually. I'll talk about it later in

219
00:13:44,178 --> 00:13:47,804
the documentation. In the presentation. Another one is

220
00:13:47,842 --> 00:13:52,044
reduced motion by default. In the skeleton I decided to make animation

221
00:13:52,092 --> 00:13:55,484
enabled, but there are cases when developers or users

222
00:13:55,532 --> 00:13:58,768
would prefer not to have it, and if for the former this may

223
00:13:58,774 --> 00:14:02,208
be dictated by design and requirements, then for the latter, it may

224
00:14:02,214 --> 00:14:05,332
be due to the vestibular motion disorders. For this,

225
00:14:05,386 --> 00:14:09,344
the CSS media feature prefers reduced motion comes to the rescue.

226
00:14:09,472 --> 00:14:12,676
Whenever a user had these settings enabled, let's say on their

227
00:14:12,778 --> 00:14:17,316
laptop. On any other device, the animation will be disabled

228
00:14:17,508 --> 00:14:21,224
and configuration. At this stage the main styles are over

229
00:14:21,262 --> 00:14:24,676
and the skeleton can be considered ready. But I was haunted

230
00:14:24,708 --> 00:14:28,324
by the thought that I should be able to configure all of the above.

231
00:14:28,452 --> 00:14:31,852
What if I want to turn off the animation? What if I want to always

232
00:14:31,906 --> 00:14:35,576
have a dark theme? Since it's not possible for CSS to receive

233
00:14:35,608 --> 00:14:38,856
any values as arguments like JavaScript functions do, the addition

234
00:14:38,888 --> 00:14:42,336
of JavaScript was excluded, at least at this stage, because it

235
00:14:42,358 --> 00:14:45,824
will completely break the main concept of being as simple as possible.

236
00:14:46,022 --> 00:14:49,504
But still, we can implement something similar to arguments if you know their

237
00:14:49,542 --> 00:14:52,736
values in advance. And here that data attributes came to

238
00:14:52,758 --> 00:14:55,876
error eight. With their help, we can check for the presence of

239
00:14:55,898 --> 00:14:59,830
the value we need in the attribute and apply the desired style. That's simple.

240
00:15:00,360 --> 00:15:03,828
For example, if you want to explicitly set the animation theme and

241
00:15:03,834 --> 00:15:07,216
the varsity settings, you need to make a JSON object as shown on the top

242
00:15:07,258 --> 00:15:10,504
code snippet. You can see it here. It's still our base card with

243
00:15:10,542 --> 00:15:14,424
some variable config that's wrapped in the JSON stringify method, and we

244
00:15:14,462 --> 00:15:17,980
set predefined fields like animation type, theme, and opacity.

245
00:15:18,480 --> 00:15:22,796
Next, pipe this object to the custom attribute data SM config on

246
00:15:22,818 --> 00:15:26,728
the same layer as the SM loading class shown on the lower code snippet.

247
00:15:26,824 --> 00:15:30,236
And that's all. Here's what it looks like in the compiled

248
00:15:30,268 --> 00:15:33,532
CSS when a user sets only a theme configuration.

249
00:15:33,676 --> 00:15:37,376
Thus, using an attribute selection, we match elements that have an

250
00:15:37,398 --> 00:15:40,320
explicitly specified attribute and its values.

251
00:15:40,900 --> 00:15:45,460
This allow us to apply different style depending on the given attribute values.

252
00:15:45,800 --> 00:15:49,524
Advanced usage each project and case is

253
00:15:49,562 --> 00:15:53,552
unique, and it's impossible to predict and make everything versatile.

254
00:15:53,696 --> 00:15:56,952
Yeah, especially when it comes to colors. That is why,

255
00:15:57,006 --> 00:16:00,276
as I said earlier, most of the values are placed in variables

256
00:16:00,308 --> 00:16:03,736
in CSS root pseudoclass. If you want to

257
00:16:03,758 --> 00:16:06,996
adjust the default styles, just overwrite appropriate variables

258
00:16:07,028 --> 00:16:11,032
in your own CSS file inside the root CSS pseudoclass.

259
00:16:11,176 --> 00:16:15,036
So, for example, if you want to change the color of the primary item with

260
00:16:15,058 --> 00:16:18,984
the class smitem primary, you only need to override the corresponding

261
00:16:19,032 --> 00:16:22,176
variable, and that's all the same for animations. Most of

262
00:16:22,198 --> 00:16:25,436
the animation settings, like their duration, time functions,

263
00:16:25,548 --> 00:16:28,524
et cetera, could be overridden with the same approach.

264
00:16:28,652 --> 00:16:32,980
In this way, it gives us the full freedom of action in terms of customization,

265
00:16:33,320 --> 00:16:36,816
of course. To make the work easier and clearer, I made a well described

266
00:16:36,848 --> 00:16:40,944
documentation section that contains all the variables available for overriding

267
00:16:40,992 --> 00:16:44,880
and usage examples and moving from theory to practice.

268
00:16:44,960 --> 00:16:48,680
Let's take a look at a demo using a tinched result and its capabilities.

269
00:16:49,180 --> 00:16:52,536
Here's what a working skeleton for card components looks like.

270
00:16:52,638 --> 00:16:55,716
The quality of the picture may not be very good since this is a GIF

271
00:16:55,748 --> 00:16:58,730
animation converted from a video file, but anyway,

272
00:16:59,360 --> 00:17:02,968
once the data has loaded, the skeleton disappears and you display

273
00:17:02,984 --> 00:17:06,428
the loaded content to the user. At the same time, you can develop

274
00:17:06,514 --> 00:17:09,816
transitions between the skeleton and the content yourself for a smooth

275
00:17:09,848 --> 00:17:13,340
flow. As you can see on this slide how it smoothly transitioned.

276
00:17:13,700 --> 00:17:16,620
This slide showed support for the dark color scheme,

277
00:17:16,700 --> 00:17:20,096
which, as I said, is either turned on automatically in the absence of

278
00:17:20,118 --> 00:17:23,172
explicitly specified settings, or is set up

279
00:17:23,226 --> 00:17:27,348
using a configuration object. For the demo purposes, it's using

280
00:17:27,434 --> 00:17:31,024
configuration object and sets up manually so I can switch

281
00:17:31,072 --> 00:17:35,940
the skeleton theme and website theme to the dark and light themes animations

282
00:17:36,280 --> 00:17:39,736
out of the box there's support for different animations as

283
00:17:39,758 --> 00:17:42,888
well as the ability to turn it off so you can see on

284
00:17:42,894 --> 00:17:46,876
the slide different types of animations. We can turn it off

285
00:17:46,978 --> 00:17:50,604
by pressing none. We can set wave animations from left

286
00:17:50,642 --> 00:17:54,264
to right, wave reverse from right to left, and pulse

287
00:17:54,312 --> 00:17:58,152
animation. It's like blinking and opacity.

288
00:17:58,296 --> 00:18:01,752
This slide showed the ability to set the opacity of the skeleton.

289
00:18:01,896 --> 00:18:05,568
This is done because standard colors may not always suit your design,

290
00:18:05,734 --> 00:18:09,376
but in order to adjude them to your design, you just need to play with

291
00:18:09,398 --> 00:18:13,356
the opacity property without having to completely override the colors.

292
00:18:13,548 --> 00:18:17,296
So let's wrap it up. After I had studied the topic of skeleton

293
00:18:17,328 --> 00:18:21,440
loaders for a long time, their varieties, usage and approaches to development,

294
00:18:21,520 --> 00:18:25,528
I managed to collect the sense of useful information and turn it into a final

295
00:18:25,614 --> 00:18:29,304
product. Having collected best practices, improved them and

296
00:18:29,342 --> 00:18:33,156
combined them into a single entity. I have created a library called skeleton

297
00:18:33,188 --> 00:18:36,356
mammoth. I believe that I managed to achieve my goals

298
00:18:36,388 --> 00:18:39,556
and create a pretty good library with all of the advantages described

299
00:18:39,588 --> 00:18:43,016
in this presentation. I hope that this library is able to benefit

300
00:18:43,048 --> 00:18:46,700
people when using it, or provide new knowledge and experience as a starting

301
00:18:46,770 --> 00:18:50,364
point to create something of their own. If you find

302
00:18:50,402 --> 00:18:53,728
my speech useful and would like to show your support, there's a simple way to

303
00:18:53,734 --> 00:18:57,692
do so. And first of them, it starts a GitHub repository.

304
00:18:57,836 --> 00:19:01,536
This helps to increase its visibility and lets others know that the library has a

305
00:19:01,558 --> 00:19:04,704
strong user base and of course spreads the world.

306
00:19:04,902 --> 00:19:08,512
You can introduce new users to the library by sharing information about

307
00:19:08,566 --> 00:19:11,552
its unending platform, such as writing about in a blog post,

308
00:19:11,606 --> 00:19:15,412
mentioning social media, or discuss in relevant developer communities.

309
00:19:15,556 --> 00:19:19,236
It's very crucial for me to receive feedback on my library and I warmly

310
00:19:19,268 --> 00:19:22,600
welcome new contributors and any suggestions for improvement.

311
00:19:23,100 --> 00:19:26,804
Thank you for your attention. By scanning this QR code, you will find useful

312
00:19:26,852 --> 00:19:30,200
links such as my LinkedIn, Instagram, a link to the library itself,

313
00:19:30,270 --> 00:19:33,624
and slide and presentation text. Wish you all the

314
00:19:33,662 --> 00:19:33,750
best.

