1
00:00:42,050 --> 00:00:44,918
Good morning, good afternoon, good evening, wherever you are.

2
00:00:45,004 --> 00:00:48,918
Thank you for having me over at Conf 42 to

3
00:00:49,004 --> 00:00:52,618
present you my talk titled the need for speed.

4
00:00:52,714 --> 00:00:56,206
First off, I'd like you to have a think for

5
00:00:56,228 --> 00:00:59,982
yourself about what's a fast build to you?

6
00:01:00,116 --> 00:01:03,394
How long does it take? Or on the other hand,

7
00:01:03,512 --> 00:01:07,246
what's a slow build? What's a frustratingly slow

8
00:01:07,278 --> 00:01:10,562
build for you? And to continue from there,

9
00:01:10,616 --> 00:01:13,986
have you ever had to deal with something

10
00:01:14,168 --> 00:01:17,462
so agonizingly slow that you thought

11
00:01:17,516 --> 00:01:21,270
about just kind of turning the CI CD off and

12
00:01:21,340 --> 00:01:24,518
just going manual again? I certainly have.

13
00:01:24,684 --> 00:01:28,134
And my story of my worst ever built

14
00:01:28,252 --> 00:01:31,546
in my life went something like this. I wake up one

15
00:01:31,568 --> 00:01:35,910
morning and first thing I do is obviously check my twitter

16
00:01:35,990 --> 00:01:39,862
and next thing I do is check my email. Just naturally

17
00:01:39,926 --> 00:01:43,966
comes like that. And at top of my list of emails is I have

18
00:01:43,988 --> 00:01:47,822
an alert from my CI tool and it's saying that

19
00:01:47,876 --> 00:01:50,846
the build has failed. Build from yesterday. I mean,

20
00:01:50,868 --> 00:01:54,126
that's fine, right? We can make some coffee, open up the laptop,

21
00:01:54,238 --> 00:01:57,378
make some changes, think, okay, this should do it.

22
00:01:57,464 --> 00:02:01,138
And commit, push, forget about it, go to work.

23
00:02:01,224 --> 00:02:04,866
Spent all day at work and doing all

24
00:02:04,888 --> 00:02:08,454
that developer stuff these developers do. Anyway, the story is

25
00:02:08,492 --> 00:02:11,186
some six years old from 2015 ish,

26
00:02:11,298 --> 00:02:14,470
I was working on a mobile team, and we were

27
00:02:14,540 --> 00:02:17,754
really following the best engineering practices that we knew

28
00:02:17,792 --> 00:02:21,830
at the time. So essentially everything was written

29
00:02:21,910 --> 00:02:25,526
according to the solid principles. We were adhering

30
00:02:25,638 --> 00:02:29,466
almost religiously to clean architecture, and we

31
00:02:29,488 --> 00:02:33,226
were also writing everything test first, and not only unit tests,

32
00:02:33,258 --> 00:02:37,066
so like TDD, but also functional tests first. What this meant

33
00:02:37,178 --> 00:02:41,358
is that every single feature, every single

34
00:02:41,524 --> 00:02:44,958
part of the application, before we would start developing,

35
00:02:45,054 --> 00:02:48,514
we had a functional test agreed on with

36
00:02:48,552 --> 00:02:52,418
the product manager of what this feature should actually do.

37
00:02:52,504 --> 00:02:55,950
For example, if you were doing email verification,

38
00:02:56,110 --> 00:02:59,814
that's the functional test that you had and those functional tests that were testing the

39
00:02:59,852 --> 00:03:03,538
UI. So as far as we were concerned,

40
00:03:03,634 --> 00:03:07,334
everything was 100% tested. We had tests before we

41
00:03:07,372 --> 00:03:11,274
actually started development and this was the best practice that we

42
00:03:11,312 --> 00:03:15,002
could ever think about. Anyway, I'm at work actually

43
00:03:15,056 --> 00:03:18,506
just finishing up my day when I get another email.

44
00:03:18,608 --> 00:03:21,674
And yes, you may see where this is going.

45
00:03:21,792 --> 00:03:25,326
It is from the friendly neighborhood CI. Guess what

46
00:03:25,348 --> 00:03:28,762
it's telling me? It's telling me that these build has failed

47
00:03:28,826 --> 00:03:32,494
again. Still. I mean, it took a bit of time, it's the same

48
00:03:32,532 --> 00:03:35,954
build that I kicked off in the morning, but that's still fine,

49
00:03:35,992 --> 00:03:39,602
right? It's just two failing builds in a row. What could ever

50
00:03:39,656 --> 00:03:43,886
go wrong? This happens. I must have missed something. And so I'll

51
00:03:43,918 --> 00:03:48,066
just make some more changes, kick off another build, go home tomorrow morning,

52
00:03:48,168 --> 00:03:51,622
everything is going to be better. Right? Well, this would have been a short talk

53
00:03:51,676 --> 00:03:54,854
if it was, it wasn't better. And the day

54
00:03:54,892 --> 00:03:58,746
after, it also wasn't better. It still wasn't better. It went on

55
00:03:58,768 --> 00:04:02,522
for several days or maybe even weeks. Before you know it,

56
00:04:02,576 --> 00:04:07,270
we are facing this long, long queue

57
00:04:07,350 --> 00:04:10,114
of features, bug fixes,

58
00:04:10,262 --> 00:04:13,102
improvements, refactorings, everything.

59
00:04:13,236 --> 00:04:16,446
We have all this kind of code, new code ready to

60
00:04:16,468 --> 00:04:19,646
be released, but not being able to be released because we

61
00:04:19,668 --> 00:04:23,818
were set here standing, sitting at this kind of junction,

62
00:04:23,914 --> 00:04:27,202
looking at the red signal from the CI. We couldn't really

63
00:04:27,256 --> 00:04:30,834
release anything because, yeah, we were just stuck with

64
00:04:30,872 --> 00:04:34,894
a failing build. Yeah, I mean, this is kind of the point where you're

65
00:04:34,942 --> 00:04:38,994
starting to think, do you just turn around and go manual?

66
00:04:39,122 --> 00:04:42,614
Just like that ship that blocked Suez Canal a couple

67
00:04:42,652 --> 00:04:46,310
of weeks ago? I imagine the captains of ships behind

68
00:04:46,380 --> 00:04:50,282
this waiting to get across, to go through Suez Canal, they were thinking about,

69
00:04:50,336 --> 00:04:53,882
okay, do we kind of wait for this to clear up, or do

70
00:04:53,936 --> 00:04:57,660
we kind of turn around, go around Africa and,

71
00:04:58,030 --> 00:05:01,722
yeah, to get to our destination, whether that's Europe or Asia.

72
00:05:01,866 --> 00:05:06,298
So yeah, that's the equivalent, DevOps equivalent of waiting

73
00:05:06,394 --> 00:05:10,778
on a build to clear and considering going manual.

74
00:05:10,874 --> 00:05:15,182
But the thing is, every red build, even if it's super agonizing,

75
00:05:15,246 --> 00:05:18,434
even if you're struggling very hard by

76
00:05:18,472 --> 00:05:22,190
it, if you're really being frustrated, it's still sending

77
00:05:22,270 --> 00:05:26,130
you a signal. And that signal is why we have

78
00:05:26,200 --> 00:05:30,038
CI systems in place in the first place. And instead of

79
00:05:30,124 --> 00:05:33,590
starting to think about how we could bypass it,

80
00:05:33,660 --> 00:05:37,222
we should instead start to think about how do we make this

81
00:05:37,276 --> 00:05:40,854
better. My name is Zan. I'm a developer advocate at Circleci,

82
00:05:40,982 --> 00:05:44,278
and I have broken many, many builds,

83
00:05:44,374 --> 00:05:47,546
definitely more than I would wish to admit. If you want

84
00:05:47,568 --> 00:05:50,714
to get in touch with me, I'm quite active on Twitter and you can also

85
00:05:50,752 --> 00:05:54,270
email me at zan@circleci.com. But yeah,

86
00:05:54,340 --> 00:05:58,074
this talk is not about giving up. This talk is not about turning

87
00:05:58,122 --> 00:06:01,934
CI off and going manual. This talk is about making your

88
00:06:01,972 --> 00:06:05,262
builds faster and less frustrating

89
00:06:05,326 --> 00:06:08,414
in the process. I mentioned I work for Circleci.

90
00:06:08,542 --> 00:06:11,906
We're a CI CD platform. While all

91
00:06:11,928 --> 00:06:15,762
the examples are going to be agnostic of

92
00:06:15,816 --> 00:06:19,014
technologies, of tools that we'll be

93
00:06:19,132 --> 00:06:22,806
talking about, I will be sharing concrete examples of how

94
00:06:22,828 --> 00:06:26,342
to do things with Circleci. So for that, I would

95
00:06:26,476 --> 00:06:29,626
take a couple of minutes to talk you through how

96
00:06:29,728 --> 00:06:33,226
Circleci looks, works, and how it's configured. So you

97
00:06:33,248 --> 00:06:37,338
have the better context of how everything falls into place. So the

98
00:06:37,424 --> 00:06:41,034
core of everything is the pipeline, which is what

99
00:06:41,072 --> 00:06:44,478
gets triggered when you commit something, you push some code

100
00:06:44,564 --> 00:06:48,110
that gets triggered and taken, kind of runs everything that you want it to do,

101
00:06:48,180 --> 00:06:51,882
from running tests to deploying this to wherever

102
00:06:52,026 --> 00:06:55,534
you need to go. Whats pipelines is defined

103
00:06:55,582 --> 00:06:58,978
in this circleci folder at the top of

104
00:06:58,984 --> 00:07:02,814
your repository you'll have it. And in this config Yaml

105
00:07:02,862 --> 00:07:06,022
file. In these file, as I said,

106
00:07:06,076 --> 00:07:09,538
everything is defined including jobs,

107
00:07:09,634 --> 00:07:12,722
orbs and workflows. So jobs

108
00:07:12,786 --> 00:07:16,310
are your idea of whats needs to happen

109
00:07:16,380 --> 00:07:19,702
and where. So where being the environment.

110
00:07:19,766 --> 00:07:23,254
So that could be a docker container, whats can be a virtual

111
00:07:23,302 --> 00:07:27,354
machine, we call it executor. And in this

112
00:07:27,392 --> 00:07:31,214
environment we also specify a set of steps. So steps are

113
00:07:31,252 --> 00:07:34,478
instructions that we want to do or

114
00:07:34,564 --> 00:07:38,142
instructions that we want to make in order to go along

115
00:07:38,196 --> 00:07:41,946
with that build or that job. That can be command

116
00:07:41,978 --> 00:07:45,120
line instructions like NPM run test,

117
00:07:45,510 --> 00:07:49,314
or maybe even things that tell Circleci to do something like

118
00:07:49,352 --> 00:07:52,866
checkout. We'll kind of check out the code at that particular commit. Or they

119
00:07:52,888 --> 00:07:56,022
could be more complex commands that are even

120
00:07:56,076 --> 00:07:59,526
stored with these things we call orbs, which are

121
00:07:59,548 --> 00:08:03,206
like reusable sets of config that you can pull in from our

122
00:08:03,228 --> 00:08:06,358
central repository and then have access

123
00:08:06,444 --> 00:08:10,166
to common commands for like for example kubernetes commands or

124
00:08:10,188 --> 00:08:14,154
docker commands. You can either write it all manually or use

125
00:08:14,192 --> 00:08:17,638
an orb to do it for you. Last thing to do is after we've

126
00:08:17,654 --> 00:08:21,142
kind of defined all our jobs or our steps is put them into a context

127
00:08:21,206 --> 00:08:24,478
of a workflow. And workflow essentially lets you order

128
00:08:24,564 --> 00:08:28,366
and arrange those jobs so that they get run however

129
00:08:28,468 --> 00:08:32,094
you wish to run them. For example, you can say, okay, first run all these

130
00:08:32,132 --> 00:08:35,806
jobs and then only when these pass run something else. So that's

131
00:08:35,838 --> 00:08:39,378
the configuration, it's only one yaml file. The other part is

132
00:08:39,464 --> 00:08:43,442
the dashboard, which kind of gives you this view of

133
00:08:43,576 --> 00:08:47,014
what's going on in your entire organization. So I'm looking at

134
00:08:47,052 --> 00:08:50,742
my own GitHub organization, but you can have your

135
00:08:50,796 --> 00:08:54,598
company's organization, anyone. And in there you will see

136
00:08:54,684 --> 00:08:58,342
all the projects. You can go into a project, for example,

137
00:08:58,396 --> 00:09:02,134
let's go back to the ones that I was looking at earlier. So this API

138
00:09:02,182 --> 00:09:05,562
here you can see all the pipelines that have been run. For example,

139
00:09:05,616 --> 00:09:09,258
we've run it like 96 times. And inside of a pipeline you

140
00:09:09,264 --> 00:09:13,280
can see, okay, these are the jobs that have run in this order

141
00:09:14,210 --> 00:09:17,850
and so on. And by going into a job, you see all the steps,

142
00:09:17,930 --> 00:09:21,486
so you have this visual representation of what happens and

143
00:09:21,588 --> 00:09:25,326
by whom. You can even go to a commit and so on. So that's kind

144
00:09:25,348 --> 00:09:28,850
of the idea of how Circleci looks like what it does.

145
00:09:29,000 --> 00:09:33,134
So when I go ahead with these talk, you see examples

146
00:09:33,182 --> 00:09:36,562
and you'll have a kind of clearer picture of what's happening and

147
00:09:36,616 --> 00:09:40,166
how. Anyway, back to the talk. Slow builds. When do you know you have

148
00:09:40,188 --> 00:09:43,414
a problem? Obviously I've talked about ones example,

149
00:09:43,532 --> 00:09:47,122
which is a very, very acute example, very gapingly

150
00:09:47,186 --> 00:09:50,954
obvious one, which is when you're considering turning off

151
00:09:50,992 --> 00:09:54,390
your CI because it's not going anywhere,

152
00:09:54,470 --> 00:09:58,506
then you definitely have a problem. On the other hand, you might notice that

153
00:09:58,528 --> 00:10:02,334
your builds are just becoming slower and slower. But that's very

154
00:10:02,372 --> 00:10:05,626
hard to see very quickly because builds don't

155
00:10:05,658 --> 00:10:09,742
become slower from today to tomorrow. They become slower with

156
00:10:09,796 --> 00:10:12,874
weeks and months of work and adding features,

157
00:10:12,922 --> 00:10:16,802
adding commits, like growing these code base. That's how builds become

158
00:10:16,856 --> 00:10:21,118
slow, because you kind of add all that complexity, but you do it so gradually.

159
00:10:21,214 --> 00:10:24,914
Or maybe you're looking at how often does it

160
00:10:24,952 --> 00:10:28,770
break? How often do builds break? Or how often do builds stay broken?

161
00:10:28,850 --> 00:10:32,262
Which is probably even more important metric. You may be looking

162
00:10:32,316 --> 00:10:35,960
at how from month ago

163
00:10:36,890 --> 00:10:40,874
you took five minutes to fix a build and now you take 20 minutes.

164
00:10:40,992 --> 00:10:43,882
Where did that kind of complexity emerge from?

165
00:10:43,936 --> 00:10:47,322
Like you can trace it from there. But my favorite example is

166
00:10:47,456 --> 00:10:50,950
doesn't taken any scientific, any tools to detect.

167
00:10:51,030 --> 00:10:54,702
It's basically asking your team, your team will tell you that

168
00:10:54,756 --> 00:10:58,206
they're struggling with the CI. They're going to complain about it on every

169
00:10:58,228 --> 00:11:02,206
single retrospective or every one on one you have with them. You hear it

170
00:11:02,228 --> 00:11:06,126
from one person, maybe it's just one person, but if you hear it

171
00:11:06,148 --> 00:11:09,682
from multiple people on the team repeatedly, then you know you have

172
00:11:09,736 --> 00:11:13,234
something to work with. Okay, so whats do we do when we know

173
00:11:13,272 --> 00:11:16,594
that we have slow build? First we need to figure out

174
00:11:16,632 --> 00:11:20,086
what's slow. And to do that we need to actually measure something.

175
00:11:20,188 --> 00:11:23,474
And measuring it comes in many ways in shapes and forms,

176
00:11:23,522 --> 00:11:26,610
because from very rudimentary measurements,

177
00:11:26,690 --> 00:11:30,378
like the entire build run or pipeline run time,

178
00:11:30,464 --> 00:11:33,626
how long that takes, or to for example,

179
00:11:33,728 --> 00:11:37,226
individual job, how long is that kind

180
00:11:37,248 --> 00:11:40,874
of red, or how long it took you to take it from

181
00:11:40,912 --> 00:11:44,414
red to green, or how often it goes red. All of these things are pretty

182
00:11:44,452 --> 00:11:47,886
easy to measure. You can essentially track it in

183
00:11:47,908 --> 00:11:51,678
a spreadsheet if you have no other tools. But usually you actually have

184
00:11:51,764 --> 00:11:55,086
tools at your disposal that are much better suited for that in

185
00:11:55,108 --> 00:11:59,154
a lot of cases, you'll be able to kind of drill down to an individual

186
00:11:59,272 --> 00:12:02,846
job, say, okay, these are my functional tests, these are my integration tests,

187
00:12:02,878 --> 00:12:06,338
these are my unit tests, this is my deployment. And see

188
00:12:06,424 --> 00:12:10,358
on a job basis what's taking that so long and

189
00:12:10,444 --> 00:12:14,086
why. And so you kind of pinpoint the problem a lot easier. And in

190
00:12:14,108 --> 00:12:18,200
some cases you can even drill it down to an individual

191
00:12:18,570 --> 00:12:22,006
job, test jobs kind of test suite that's

192
00:12:22,038 --> 00:12:25,674
going to run. And you'll see, okay, these tests, this subset of

193
00:12:25,712 --> 00:12:29,274
all my tests, is taking the longest or is the flakiest and

194
00:12:29,312 --> 00:12:31,866
causing most of the builds to fail in the process.

195
00:12:31,968 --> 00:12:35,406
So depending on the tools you have at your disposal, you can

196
00:12:35,428 --> 00:12:38,458
measure different things. But yeah, the more you measure,

197
00:12:38,554 --> 00:12:41,790
the clearer you can present it to yourself, the better.

198
00:12:41,860 --> 00:12:45,102
Essentially, with Circleci, we have these insights

199
00:12:45,166 --> 00:12:48,962
feature, which is, yeah, it's in the dashboard and you

200
00:12:49,016 --> 00:12:52,722
see just from bird's eye to drill down

201
00:12:52,776 --> 00:12:56,646
view into your builds, you have historic views of

202
00:12:56,748 --> 00:13:00,850
how things have fared. So have your builds increased

203
00:13:00,930 --> 00:13:04,102
in duration over the last 90 or so days?

204
00:13:04,236 --> 00:13:07,586
Which builds have the greatest or lowest

205
00:13:07,698 --> 00:13:11,274
success rate? Or even. We recently rolled out

206
00:13:11,312 --> 00:13:15,126
this kind of test drill down feature in preview, which allows

207
00:13:15,158 --> 00:13:18,998
you to actually see how your individual tests or tests

208
00:13:19,094 --> 00:13:22,334
components are faring, which is pretty, pretty cool. So,

209
00:13:22,372 --> 00:13:26,478
yeah, now we've hopefully identified what's going on

210
00:13:26,564 --> 00:13:30,302
and we know that we know these to actually start

211
00:13:30,356 --> 00:13:33,614
looking or improving our builds so

212
00:13:33,652 --> 00:13:37,466
that, yeah, these are faster, they're less agonizing.

213
00:13:37,498 --> 00:13:41,130
For us, first thing to do is increase horsepower,

214
00:13:41,210 --> 00:13:45,640
or the computing equivalent is add more resources to

215
00:13:46,250 --> 00:13:50,370
your builds. That's a very easy thing to do. It's very straightforward

216
00:13:50,450 --> 00:13:53,446
to do. But how do you know that?

217
00:13:53,548 --> 00:13:56,840
Actually, my jobs are running

218
00:13:58,170 --> 00:14:02,214
on underpowered executing machines. You'll see out of memory

219
00:14:02,262 --> 00:14:05,738
errors. That's a pretty clear example. Like you have an

220
00:14:05,744 --> 00:14:09,546
out of memory error, add more memory, you'll be good. Sometimes you

221
00:14:09,568 --> 00:14:12,766
know that the tools that you're using to build and run your

222
00:14:12,788 --> 00:14:16,874
tests can benefit from more threads or more highly

223
00:14:16,922 --> 00:14:20,762
parallel cpus. So that's where you can experiment

224
00:14:20,826 --> 00:14:24,482
there. My personal favorite example is if something

225
00:14:24,536 --> 00:14:27,822
runs faster on your local laptop developer laptop

226
00:14:27,886 --> 00:14:31,618
than it does on your CI, it's usually because,

227
00:14:31,704 --> 00:14:35,490
yeah, your developer laptop is, I don't know, an I seven with

228
00:14:35,560 --> 00:14:39,414
16 gigs of ram. So ample kind of horsepower to

229
00:14:39,452 --> 00:14:42,886
work with. And if that runs your build in three to

230
00:14:42,908 --> 00:14:46,070
five minutes, and then your CI runs them in 20 minutes,

231
00:14:46,220 --> 00:14:49,846
and turns out that your CI has two or four gigs

232
00:14:49,878 --> 00:14:53,146
of ram at its disposal and very much

233
00:14:53,248 --> 00:14:56,700
fewer cpu cores. That's probably why

234
00:14:57,070 --> 00:15:01,034
your builds are slow and you take it closer to what your

235
00:15:01,072 --> 00:15:04,650
laptop is working with and you've got instant improvement.

236
00:15:04,730 --> 00:15:08,490
But that's like a very, very easy thing to do, because with Circleci,

237
00:15:08,570 --> 00:15:12,782
for example, you're just going to specify this resource class and job

238
00:15:12,836 --> 00:15:16,194
done. It's as easy as that. Next thing to do

239
00:15:16,232 --> 00:15:19,342
is start thinking if you can go parallel.

240
00:15:19,406 --> 00:15:22,770
By that I mean speeding up all your work

241
00:15:22,840 --> 00:15:26,306
by running it in different streams, as opposed to kind of

242
00:15:26,328 --> 00:15:29,814
running it in a single stream. First thing to do is make sure that your

243
00:15:29,852 --> 00:15:33,202
jobs are running in parallel themselves. By default,

244
00:15:33,266 --> 00:15:36,678
that's what happens in circleci, so you don't have to worry about that.

245
00:15:36,764 --> 00:15:39,660
But depending on what tool you're using,

246
00:15:40,030 --> 00:15:43,334
your jobs may not run parallel by default.

247
00:15:43,382 --> 00:15:47,030
So you kind of make sure, okay, we're running everything, unit tests,

248
00:15:47,110 --> 00:15:50,330
security scans, functional tests, all at the same time,

249
00:15:50,400 --> 00:15:53,918
and only when they're kind of all green. We kind

250
00:15:53,924 --> 00:15:57,326
of continued with these latter stages of the build, which might

251
00:15:57,348 --> 00:16:01,054
be creating a production build or deploying this

252
00:16:01,092 --> 00:16:04,770
to somewhere. The other one, which is more useful, I would say,

253
00:16:04,840 --> 00:16:08,686
is splitting tests within an individual test suite.

254
00:16:08,718 --> 00:16:12,418
So if you can imagine, our functional test suite had

255
00:16:12,504 --> 00:16:15,806
a lot of tests that was like hundreds of functional

256
00:16:15,838 --> 00:16:19,254
tests that took, yeah, most of the build time to complete.

257
00:16:19,372 --> 00:16:23,062
So you can actually split those and make

258
00:16:23,116 --> 00:16:26,690
sure that it runs in multiple parallel streams.

259
00:16:26,770 --> 00:16:30,154
First thing to do is specify this parallelism here, and then

260
00:16:30,192 --> 00:16:33,594
use the Circleci Cli to essentially tell

261
00:16:33,632 --> 00:16:37,622
it to how to split or arrange those tests.

262
00:16:37,686 --> 00:16:41,498
My favorite one is by time. So essentially you tell it how

263
00:16:41,584 --> 00:16:44,926
you run it once, which gives it kind of the idea of how long

264
00:16:44,948 --> 00:16:48,254
each tests run. And then basically it

265
00:16:48,292 --> 00:16:52,238
will figure out a way to split your test job

266
00:16:52,324 --> 00:16:55,666
into roughly the chunks that are running at

267
00:16:55,688 --> 00:16:59,330
roughly the same time, which is pretty cool. Now, we've kind of

268
00:16:59,400 --> 00:17:02,882
used the right size machines and we're running

269
00:17:02,936 --> 00:17:06,566
everything nicely parallel. What else can we do? We can

270
00:17:06,668 --> 00:17:11,490
utilize the cache to essentially deduplicate

271
00:17:11,570 --> 00:17:15,254
parts of our work, because that's what caching really is. I like

272
00:17:15,292 --> 00:17:18,018
to think of caching in two different types.

273
00:17:18,114 --> 00:17:21,114
So what you need and what you build.

274
00:17:21,232 --> 00:17:24,586
So what you need is all the dependencies that

275
00:17:24,688 --> 00:17:27,978
you need before you can actually start doing a

276
00:17:27,984 --> 00:17:31,466
build or running tests. For example, git cache is one example,

277
00:17:31,568 --> 00:17:35,082
but git cache you usually don't have to worry about, because that's

278
00:17:35,146 --> 00:17:38,734
cached by default in most places anyway. The second

279
00:17:38,772 --> 00:17:42,410
one is dependencies. If you've ever run create,

280
00:17:42,500 --> 00:17:46,114
react app or installed create react app. You can

281
00:17:46,152 --> 00:17:50,302
see how long that taken to install all the NPM

282
00:17:50,446 --> 00:17:54,066
dependencies and it's just a react application

283
00:17:54,248 --> 00:17:57,986
and that's just like JavaScript, different languages, different frameworks,

284
00:17:58,018 --> 00:18:01,474
they will have different tools for managing dependencies.

285
00:18:01,522 --> 00:18:05,382
So all of that depends. But essentially once

286
00:18:05,436 --> 00:18:08,714
you load them, once you can actually cache those and then it can be

287
00:18:08,752 --> 00:18:12,586
reused across subsequent builds. As a matter of

288
00:18:12,608 --> 00:18:16,506
fact, caching usually comes for free when

289
00:18:16,528 --> 00:18:20,026
you're using some of our orbs because like the

290
00:18:20,048 --> 00:18:23,566
node orb for example, you have

291
00:18:23,588 --> 00:18:27,310
a command in there called install packages which will

292
00:18:27,380 --> 00:18:31,118
utilize cache by default. So it's just like one command run for you.

293
00:18:31,204 --> 00:18:35,026
And under the hood it's actually doing five or six steps to

294
00:18:35,048 --> 00:18:39,198
kind of restore cache and save it so that each time your package

295
00:18:39,294 --> 00:18:43,102
json the lock, one actually package log json

296
00:18:43,166 --> 00:18:46,418
changes only then it will kind of

297
00:18:46,584 --> 00:18:50,134
reload things. Otherwise it'll just kind of keep using whatever it

298
00:18:50,172 --> 00:18:53,126
has in the cache for the duration of that cache anyway.

299
00:18:53,228 --> 00:18:57,670
Lastly, if you are running your builds on Docker

300
00:18:58,090 --> 00:19:01,738
inside docker containers, and you're relying on

301
00:19:01,824 --> 00:19:05,066
a lot of installation for your purposes, so if you need to

302
00:19:05,088 --> 00:19:08,854
install any other tools that aren't kind of built into the image

303
00:19:08,902 --> 00:19:12,994
that you get from like Circleci,

304
00:19:13,062 --> 00:19:16,894
python image or node image, you can think about creating your own

305
00:19:16,932 --> 00:19:20,606
docker image that has all those tools bundled already. So you kind of

306
00:19:20,628 --> 00:19:24,206
save that installation time, especially if you need to kind of compile some of

307
00:19:24,228 --> 00:19:27,474
the dependencies each time. You can imagine whats can take

308
00:19:27,512 --> 00:19:30,866
quite a lot of time to kind of speed that up. And the second part

309
00:19:30,888 --> 00:19:33,522
of caching is what you actually build.

310
00:19:33,656 --> 00:19:37,158
So I'm talking build artifacts. So from

311
00:19:37,244 --> 00:19:40,866
finished applications that you kind of want to run functional tests

312
00:19:40,898 --> 00:19:44,662
again, to intermediary kind of artifacts that are

313
00:19:44,716 --> 00:19:47,846
used by different aspects of builds or different.

314
00:19:48,028 --> 00:19:51,450
If you're kind of building Android applications, it's basically

315
00:19:51,520 --> 00:19:55,514
generating a lot of kind of intermediary dexes and

316
00:19:55,712 --> 00:19:59,302
modules that you can easily then reuse.

317
00:19:59,366 --> 00:20:02,986
So it's pretty cool. Lastly, if you are building docker

318
00:20:03,018 --> 00:20:06,266
images, so previously we mentioned using docker images, but if you're

319
00:20:06,298 --> 00:20:10,026
building docker images to maybe deploy to kubernetes or somewhere,

320
00:20:10,138 --> 00:20:13,946
you can actually turn on Docker layer caching, which essentially

321
00:20:14,058 --> 00:20:17,522
machines all the instructions up to the point where you have made

322
00:20:17,576 --> 00:20:20,866
any changes. So if you're thinking about how a Docker file is

323
00:20:20,888 --> 00:20:24,718
written, you have run commands, copy commands, all of those different commands,

324
00:20:24,814 --> 00:20:28,134
and they would be automation cached up to the point where

325
00:20:28,172 --> 00:20:31,766
you kind of have any changes made which is pretty cool as well.

326
00:20:31,868 --> 00:20:35,382
Beyond caching and beyond parallelism, we have to go

327
00:20:35,436 --> 00:20:39,526
a bit more cleverer. We are out of pure technical

328
00:20:39,638 --> 00:20:43,274
solutions for our problem. We really need to think

329
00:20:43,312 --> 00:20:47,114
about how we can reduce the scope of our

330
00:20:47,232 --> 00:20:50,726
work to make everything go faster. Because when less things

331
00:20:50,768 --> 00:20:54,702
are run, things go faster. So in our case that

332
00:20:54,756 --> 00:20:58,880
was where we could get a lot of gains because

333
00:20:59,250 --> 00:21:02,606
we had a lot of tests. We had a lot of

334
00:21:02,628 --> 00:21:05,854
tests for every single feature. And if you can imagine,

335
00:21:05,982 --> 00:21:09,506
some of those features would be very critical to

336
00:21:09,528 --> 00:21:12,418
be tested. For example, in a shopping application,

337
00:21:12,584 --> 00:21:16,018
if someone can't register or make purchases,

338
00:21:16,114 --> 00:21:20,150
that's pretty critical aspect of the app.

339
00:21:20,300 --> 00:21:23,350
But on the other hand, if they can't change

340
00:21:23,420 --> 00:21:27,362
their profile picture, change their preferences

341
00:21:27,506 --> 00:21:31,114
for how the homepage should look, that might not be the

342
00:21:31,152 --> 00:21:34,646
most critical feature. So you really think about which tests

343
00:21:34,678 --> 00:21:38,140
you really need. If you have that many especially,

344
00:21:38,590 --> 00:21:41,818
and which ones don't need to run at every single build,

345
00:21:41,904 --> 00:21:45,050
you can always run them later or like asynchronously.

346
00:21:45,130 --> 00:21:48,686
But for most of the builds, you really kind of want to make sure that

347
00:21:48,708 --> 00:21:52,394
they run as fast as possible. Or like you run the most valuable

348
00:21:52,442 --> 00:21:56,210
ones all the time and then less valuable ones

349
00:21:56,360 --> 00:22:00,606
less frequently. You can also make sure that your workflows

350
00:22:00,718 --> 00:22:03,986
reflect what your actual development workflow is. For example,

351
00:22:04,088 --> 00:22:07,654
if I'm working on a feature branch, I don't want to run all

352
00:22:07,692 --> 00:22:11,570
the tests at every single commit, but only when I'm kind of merging

353
00:22:11,650 --> 00:22:15,254
stuff to main taken. I actually want to run

354
00:22:15,372 --> 00:22:18,578
like a more substantial chunk of tests.

355
00:22:18,674 --> 00:22:22,246
And maybe even when we are doing planning

356
00:22:22,278 --> 00:22:26,362
a release, we're pushing a release tag, then run the

357
00:22:26,416 --> 00:22:30,254
entirety of the scope of the tests. So you really think

358
00:22:30,292 --> 00:22:34,350
about what needs to run and how, in which case

359
00:22:34,500 --> 00:22:37,920
so that really kind of speeds up your entire process.

360
00:22:38,370 --> 00:22:40,766
And lastly, get your team on board.

361
00:22:40,868 --> 00:22:44,398
DevOps is a cultural movement first and foremost,

362
00:22:44,494 --> 00:22:47,746
and culture starts with a

363
00:22:47,768 --> 00:22:51,486
team. You can't be successful in CI

364
00:22:51,518 --> 00:22:54,402
CD in implementing CI CD if there is only one person,

365
00:22:54,456 --> 00:22:58,210
if you're the only person implementing or maintaining CI CD

366
00:22:58,290 --> 00:23:01,510
pipelines, you have to get others on board.

367
00:23:01,660 --> 00:23:05,686
That's for maintenance, that's for writing improvements to

368
00:23:05,708 --> 00:23:09,130
your pipelines, that's for making sure that you fix

369
00:23:09,200 --> 00:23:12,954
builds effectively. Really, it's crucial that

370
00:23:13,072 --> 00:23:16,874
everyone knows where things happen. And it's also

371
00:23:16,912 --> 00:23:20,570
very valuable because if you think about it, if your entire

372
00:23:20,640 --> 00:23:24,302
CI CD pipeline is defined in a single file which

373
00:23:24,356 --> 00:23:28,190
tells you the whole story of how tests are run, which tests are run,

374
00:23:28,260 --> 00:23:31,838
and what happens when you need to deploy then

375
00:23:31,924 --> 00:23:35,138
adding a new member of the team is basically

376
00:23:35,224 --> 00:23:39,086
as easy as telling them to look at your CI CD

377
00:23:39,198 --> 00:23:42,370
build script and they'll see which ones are the moving

378
00:23:42,440 --> 00:23:46,260
parts and what they might need to look into

379
00:23:46,730 --> 00:23:50,246
to start being more productive. And also, if the entire team is

380
00:23:50,268 --> 00:23:54,342
on board, then they can all kind of think about

381
00:23:54,476 --> 00:23:58,518
how they could contribute to making this as smooth

382
00:23:58,614 --> 00:24:01,754
and kind of positive experience as

383
00:24:01,792 --> 00:24:05,674
opposed to this tedious, frustrating piece

384
00:24:05,712 --> 00:24:08,730
of work that we started off with,

385
00:24:08,800 --> 00:24:12,458
perhaps. So, yeah. Now I want to ask you another question,

386
00:24:12,544 --> 00:24:16,174
and it's what is the right build time for your team?

387
00:24:16,292 --> 00:24:20,126
I can talk about build times, I can talk about speeding up

388
00:24:20,148 --> 00:24:23,742
your builds, but I don't know what your team does.

389
00:24:23,876 --> 00:24:27,646
I don't know how many developers you have on your team, what their skill levels

390
00:24:27,678 --> 00:24:31,154
are, what kind of application or software you're building.

391
00:24:31,272 --> 00:24:35,026
So it really depends on your own team to

392
00:24:35,048 --> 00:24:38,422
kind of decide what are the limits that you want to

393
00:24:38,476 --> 00:24:42,120
kind of operate or constraints you want to operate within,

394
00:24:42,570 --> 00:24:46,086
and think about yourself, where you want to go with

395
00:24:46,108 --> 00:24:49,466
your CI CD pipelines. What you can do, however,

396
00:24:49,568 --> 00:24:53,642
is look at this state of software delivery report,

397
00:24:53,776 --> 00:24:57,786
which we released late last year. Essentially, we looked at an

398
00:24:57,808 --> 00:25:02,106
obscene number of projects and organizations

399
00:25:02,218 --> 00:25:06,462
that built on circleci and how

400
00:25:06,516 --> 00:25:10,350
they kind of compare when it comes to build speeds,

401
00:25:10,690 --> 00:25:14,330
time to recovery, and yes, time to recovery tends to be

402
00:25:14,340 --> 00:25:17,746
more important than actual kind of build times. And you can

403
00:25:17,768 --> 00:25:21,426
actually read about this in these benchmarks and

404
00:25:21,448 --> 00:25:25,074
see where you kind of fare compared to others on your

405
00:25:25,112 --> 00:25:28,822
team. So yeah, I alluded to this earlier, but I don't think that

406
00:25:28,876 --> 00:25:32,326
the need for speed is the right thing to be

407
00:25:32,348 --> 00:25:35,778
looking at, especially not with CICD, because it's

408
00:25:35,794 --> 00:25:39,946
not a race. It's much more closely resembles an

409
00:25:39,968 --> 00:25:43,734
ambulance because yes, it should go fast. An ambulance

410
00:25:43,782 --> 00:25:46,922
does go very, very fast if it needs to, but it also

411
00:25:46,976 --> 00:25:50,178
needs to go reliably because it's carrying

412
00:25:50,294 --> 00:25:53,790
that signal that we talked about. It's carrying that

413
00:25:53,940 --> 00:25:57,758
signal that is only kind of useful if

414
00:25:57,844 --> 00:26:02,202
it emerges in the end as kind of intact

415
00:26:02,266 --> 00:26:06,106
as possible. You can have a CI build run in 5

416
00:26:06,148 --> 00:26:09,554
seconds, but that's probably not going to run all the tests that you actually want

417
00:26:09,592 --> 00:26:13,230
to run or need to run for success. And your signal,

418
00:26:13,310 --> 00:26:16,726
your CI CD's cargo, if you will, is the

419
00:26:16,748 --> 00:26:20,246
most precious cargo. And yes, if you see the lights on

420
00:26:20,268 --> 00:26:23,686
the ambulance or on the CI, if it goes red,

421
00:26:23,868 --> 00:26:27,634
you really should be all hands on deck

422
00:26:27,762 --> 00:26:31,750
fixing this because yes, you don't want to be lingering on

423
00:26:31,820 --> 00:26:36,070
and having your builds in an unshippable state.

424
00:26:36,220 --> 00:26:39,766
In any case, that whats the need for speed. My name is

425
00:26:39,788 --> 00:26:43,614
Zan Markan. I've greatly enjoyed giving this talk. Please do

426
00:26:43,652 --> 00:26:46,926
reach out to me either on Twitter or in email if

427
00:26:46,948 --> 00:26:49,900
you have any further questions. Thank you very much.

