1
00:00:34,770 --> 00:00:38,546
Hi everyone. It's an absolute pleasure being here and discussing

2
00:00:38,578 --> 00:00:41,906
this really important topic. How do we debug debugging?

3
00:00:42,098 --> 00:00:45,494
Why do we need to approach it differently in order to work more

4
00:00:45,532 --> 00:00:46,550
effectively?

5
00:00:48,810 --> 00:00:52,206
So a bit of don't miss health. My name is Eleanor and it is

6
00:00:52,228 --> 00:00:55,946
an absolute pleasure being here. I grew up in New Zealand

7
00:00:56,058 --> 00:01:00,078
and have got the privilege of living and working in Tel Aviv. At the moment,

8
00:01:00,244 --> 00:01:04,010
I'm director director, director, director, director director director of solution architecture and

9
00:01:04,100 --> 00:01:07,566
partnerships observability tools as part of my role,

10
00:01:07,598 --> 00:01:11,714
I work with many clients around the world, ranging from small startups right

11
00:01:11,752 --> 00:01:15,506
through to Fortune 500 companies. And this gives me the

12
00:01:15,528 --> 00:01:19,190
privilege of having the insight into how different teams work,

13
00:01:19,340 --> 00:01:22,486
what works, what doesn't, and what I want to

14
00:01:22,508 --> 00:01:26,994
do today is share some of those learnings with you with a focus on debugging

15
00:01:27,122 --> 00:01:31,574
what's broken, what works, what needs changing? How do we empower teams

16
00:01:31,622 --> 00:01:35,306
to develop the highest quality code that they can in the

17
00:01:35,328 --> 00:01:36,860
quickest amount of time?

18
00:01:39,790 --> 00:01:43,518
And let's kick things off with why it's even important.

19
00:01:43,684 --> 00:01:47,342
Now. Developers do a lot and it depends on who you ask,

20
00:01:47,396 --> 00:01:51,054
they'll give you a different answer. But a study done by

21
00:01:51,092 --> 00:01:55,234
CoreLogics that found out that 75% of

22
00:01:55,272 --> 00:01:58,370
developers time was spent on solving bugs.

23
00:01:58,790 --> 00:02:02,514
Now let that sink in. In a five day work week,

24
00:02:02,632 --> 00:02:06,194
your developers only have a day and a quarter to

25
00:02:06,232 --> 00:02:10,200
work on new code. The rest goes to fixing existing issues.

26
00:02:11,050 --> 00:02:14,694
So if we can improve this metric by even just a little

27
00:02:14,732 --> 00:02:18,098
bit, then our teams will be more efficient and the business as

28
00:02:18,124 --> 00:02:21,866
a whole will be much more successful. Before we

29
00:02:21,888 --> 00:02:25,100
look at changes, let's look at what's holding us back.

30
00:02:27,070 --> 00:02:31,126
Now, if this was an in person conference, I would do a quick poll,

31
00:02:31,238 --> 00:02:34,014
but I'll just let you vote from home.

32
00:02:34,212 --> 00:02:37,742
So what would you rather work on? What would your team

33
00:02:37,796 --> 00:02:41,310
rather work on? Would it be a bug or a feature?

34
00:02:41,730 --> 00:02:44,020
All right, take a moment to think.

35
00:02:45,430 --> 00:02:49,282
So I would like to hope that I can't sense what you're saying,

36
00:02:49,336 --> 00:02:53,154
but when I do this in conferences, in rooms and in

37
00:02:53,192 --> 00:02:56,242
person events, people often say that people

38
00:02:56,296 --> 00:02:59,510
love doing new things. They like working on features,

39
00:03:00,330 --> 00:03:04,546
they love creating things from scratch. It's a lot more satisfying showing

40
00:03:04,578 --> 00:03:08,200
a new feature rather than something old that you've worked on.

41
00:03:08,570 --> 00:03:12,006
And this is human nature. This is what we're accustomed

42
00:03:12,038 --> 00:03:15,274
to, this is what we're used to. We always like looking ahead to

43
00:03:15,312 --> 00:03:19,494
what's new rather than looking back and spending our time on something that's

44
00:03:19,542 --> 00:03:23,002
not at the forefront. And we

45
00:03:23,056 --> 00:03:26,106
can't resist that, right? People enjoy getting new clothes, as opposed

46
00:03:26,138 --> 00:03:29,966
to getting old ones fixed. And this is one of the

47
00:03:29,988 --> 00:03:34,090
problems that I see, one of the first few problems with debugging,

48
00:03:34,250 --> 00:03:38,034
and that's the fact that fixing old things is simply not as

49
00:03:38,072 --> 00:03:41,394
fun as creating something new. Our engineers often

50
00:03:41,432 --> 00:03:44,974
get less satisfaction from fixing broken things rather than creating new,

51
00:03:45,032 --> 00:03:48,646
shiny features. And as a result, the motivation to

52
00:03:48,668 --> 00:03:52,402
work on bugs is much slower, which in turn contributes

53
00:03:52,466 --> 00:03:55,030
to a slower and less effective workflow.

54
00:03:56,570 --> 00:04:00,346
Now, let's jump into this scenario. We've got a comic here that I

55
00:04:00,368 --> 00:04:04,486
found on XKCD. So we've got one developer

56
00:04:04,518 --> 00:04:07,514
is asking someone else in their team to look into a bug that they've just

57
00:04:07,552 --> 00:04:11,374
opened, the other developed, freaking out, asking if

58
00:04:11,412 --> 00:04:14,894
it's one of those horrifying ones that will prove that the whole

59
00:04:14,932 --> 00:04:17,758
project is broken. Now,

60
00:04:17,844 --> 00:04:21,434
bugs, especially serious ones, are often accompanied

61
00:04:21,482 --> 00:04:24,946
by a lot of stress. There are many stakeholders involved in

62
00:04:24,968 --> 00:04:28,386
the fix, there are lots of complaints from customers, and there

63
00:04:28,408 --> 00:04:32,206
are huge repercussions. And this leads

64
00:04:32,238 --> 00:04:35,730
into what I classify as the second problem with debugging.

65
00:04:36,170 --> 00:04:39,414
When it comes to debugging, there's generally a lot of

66
00:04:39,452 --> 00:04:42,726
pressure around it. There's always the sense of

67
00:04:42,748 --> 00:04:46,386
anxiety. And this was illustrated in a comic

68
00:04:46,418 --> 00:04:49,686
that we showed. Debugging can sometimes feel like you're

69
00:04:49,718 --> 00:04:53,114
working with a Jenga tower, where changing one thing

70
00:04:53,152 --> 00:04:58,118
will make everything collapse onto

71
00:04:58,134 --> 00:05:02,110
the next example, showing what's really holding us back when it comes to debugging.

72
00:05:02,770 --> 00:05:06,014
I've copied this debugging exercise that one of the top

73
00:05:06,052 --> 00:05:09,600
engineering schools in the States gives its first year computer science students.

74
00:05:10,290 --> 00:05:14,222
Now, if you read carefully, it gives step by step instructions

75
00:05:14,286 --> 00:05:17,346
on how to debug. First you need to

76
00:05:17,368 --> 00:05:21,266
confirm the input function, then step over, then look

77
00:05:21,288 --> 00:05:24,290
at the output. Classic debugging.

78
00:05:25,670 --> 00:05:29,926
That's all well and good if we worked on applications that run locally and

79
00:05:29,948 --> 00:05:33,686
we had complete control over them, but it's not the reality we

80
00:05:33,708 --> 00:05:37,550
live in. If we look at what we work with, it's cloud native

81
00:05:37,650 --> 00:05:41,482
complex environments. And when it comes to working

82
00:05:41,536 --> 00:05:45,510
in production environments, running on the cloud, this methodology

83
00:05:45,670 --> 00:05:47,290
becomes irrelevant.

84
00:05:50,670 --> 00:05:54,094
The third problem that I'd like to summarize is that the tools we give

85
00:05:54,132 --> 00:05:57,214
our teams are simply not right for the job at hand.

86
00:05:57,412 --> 00:06:00,766
You see, people are equipped with debugging tools and techniques that are

87
00:06:00,788 --> 00:06:04,190
no longer relevant to our complex tech stacks.

88
00:06:04,530 --> 00:06:07,746
You can't really recreate your production environment locally in order

89
00:06:07,768 --> 00:06:11,490
to test things out. And in a similar manner, you can't expect

90
00:06:11,560 --> 00:06:14,722
your code, which is running locally to behave in the same

91
00:06:14,776 --> 00:06:17,880
way when you run it on serverless functions, for example.

92
00:06:20,330 --> 00:06:24,726
So we've seen some problems, but now I really want to focus on

93
00:06:24,908 --> 00:06:28,882
how we can solve them. How can we focus on these three pillars

94
00:06:28,946 --> 00:06:32,890
in order to address some of the issues with our approaches to debugging?

95
00:06:33,950 --> 00:06:37,306
So the first thing I want to focus on is the people side of

96
00:06:37,328 --> 00:06:40,474
things, and there are a number of things we can do here,

97
00:06:40,672 --> 00:06:44,426
and the easiest is probably to simply better market the debugging

98
00:06:44,458 --> 00:06:47,998
task. When you come to your team and there's something that they need

99
00:06:48,004 --> 00:06:51,678
to focus on, don't have this sad, defeated look on your face.

100
00:06:51,844 --> 00:06:55,214
Focus on the positive. What speaks to your engineers?

101
00:06:55,342 --> 00:06:59,454
An incredible challenge, working on a bit of code that is actually impacting

102
00:06:59,502 --> 00:07:03,326
users. Find that niche and be the advocate for fixing

103
00:07:03,358 --> 00:07:06,546
the bug. I caught up with

104
00:07:06,568 --> 00:07:09,958
a friend and I asked him, would you rather work on a bug or a

105
00:07:09,964 --> 00:07:13,826
feature? And for him, bugs win. He said that bugs

106
00:07:13,858 --> 00:07:17,318
are often well defined. The challenge excites him and he

107
00:07:17,324 --> 00:07:21,530
knows it's really important for someone. So it's all about perspective.

108
00:07:22,510 --> 00:07:26,026
The second point is around teamwork. We need to ensure that

109
00:07:26,048 --> 00:07:29,846
we have a team case ownership mentality. A bug isn't

110
00:07:29,878 --> 00:07:34,026
just fixed by a single developer. Make sure the entire team has ownership

111
00:07:34,058 --> 00:07:36,720
of the bug so that they can get behind it.

112
00:07:37,330 --> 00:07:40,718
And lastly, when it comes to people, we want

113
00:07:40,724 --> 00:07:44,254
to make sure we create a safe space for our developed don't let

114
00:07:44,292 --> 00:07:48,094
others nag. We as leaders need to establish

115
00:07:48,142 --> 00:07:51,298
the trust with our colleagues that the team is doing the best they can.

116
00:07:51,464 --> 00:07:54,734
And if you need to get your product managers to step aside,

117
00:07:54,782 --> 00:07:58,566
or if you need to have your business developed managers to

118
00:07:58,588 --> 00:08:02,834
just let things go and just trust the engineers to work on it without distractions,

119
00:08:02,962 --> 00:08:04,280
then you do that.

120
00:08:06,890 --> 00:08:10,266
The second pillar is around processes, and I

121
00:08:10,288 --> 00:08:14,890
want to see how we can refine the processes to ensure that we debug effectively.

122
00:08:15,630 --> 00:08:18,794
The first thing that we can do here is around adjusting the

123
00:08:18,832 --> 00:08:21,898
backlog, but really adjust it.

124
00:08:22,064 --> 00:08:25,834
Communicate with everyone. We want to reduce stress on our developers

125
00:08:25,882 --> 00:08:29,550
and one of the best ways to do that is to remove external distractions.

126
00:08:30,050 --> 00:08:33,054
We want to build a process with the rest of the company on how to

127
00:08:33,092 --> 00:08:36,698
prioritize bugs. Not everyone needs to be fixed right?

128
00:08:36,724 --> 00:08:39,954
Not everything needs to be fixed right away. As a matter of fact,

129
00:08:39,992 --> 00:08:43,602
not everything has to be fixed at all. You need to establish strong

130
00:08:43,656 --> 00:08:46,926
relationships with the stakeholders in your company and get real feedback

131
00:08:46,958 --> 00:08:49,320
from them on what needs to be done.

132
00:08:50,010 --> 00:08:53,254
Lastly, make sure that the groundwork is done for your

133
00:08:53,292 --> 00:08:56,534
developers. You wouldn't expect a builder to make a home

134
00:08:56,572 --> 00:09:00,342
without someone having surveyed the land. And in a similar manner,

135
00:09:00,406 --> 00:09:03,690
we need to make sure that our developers are well equipped with as much information

136
00:09:03,760 --> 00:09:07,354
was they need about the bug. And finally,

137
00:09:07,472 --> 00:09:09,770
my favorite topic, tools.

138
00:09:10,190 --> 00:09:13,966
Focusing on people and processes is important, but focusing on

139
00:09:13,988 --> 00:09:16,990
tools is an easy way to start seeing results.

140
00:09:17,490 --> 00:09:21,038
There are a number of things we can focus on here. First,

141
00:09:21,204 --> 00:09:24,370
give your teams a cloud native toolbox. If they're building

142
00:09:24,440 --> 00:09:28,834
apps using serverless functions, make sure that they have a way to debug it.

143
00:09:29,032 --> 00:09:32,626
Recreating that app locally so that they can debug, that will

144
00:09:32,648 --> 00:09:36,286
not be possible. Similarly, if your deployment

145
00:09:36,318 --> 00:09:39,474
process takes two weeks, make sure you give your teams a way to debug

146
00:09:39,522 --> 00:09:42,982
live environments, because adding a log line and waiting for two weeks

147
00:09:43,036 --> 00:09:45,590
before you see the data is simply not realistic.

148
00:09:46,570 --> 00:09:50,566
Second, we want to ensure that the tools are integrated into your team's daily

149
00:09:50,598 --> 00:09:54,262
workflow. Train the team share use cases

150
00:09:54,406 --> 00:09:57,818
we don't want someone to start learning how to use a tool at 03:00 a.m.

151
00:09:57,904 --> 00:09:59,500
When everything is on fire.

152
00:10:00,850 --> 00:10:04,398
Lastly, data is gold, but too much

153
00:10:04,484 --> 00:10:08,526
will weigh you down. Collect data where it makes sense.

154
00:10:08,708 --> 00:10:11,514
Make sure it's easily accessible and usable,

155
00:10:11,642 --> 00:10:13,360
but don't overdo it.

156
00:10:15,490 --> 00:10:18,654
So I want to wrap up with the fact that bugs are a part of

157
00:10:18,692 --> 00:10:22,206
our day to day life, and there's a ton to discuss around this

158
00:10:22,228 --> 00:10:25,894
topic. But I do hope that you'll be able to implement some of the things

159
00:10:25,932 --> 00:10:29,586
we've discussed, and I look forward to continuing the conversation

160
00:10:29,698 --> 00:10:31,540
on other channels. Thank you.

