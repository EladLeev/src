1
00:00:23,370 --> 00:00:24,880
Thank you very much again,

2
00:00:27,050 --> 00:00:30,550
honor to be here. I am Alejandro Mercado,

3
00:00:31,930 --> 00:00:34,200
currently living in Mexico City.

4
00:00:35,850 --> 00:00:39,510
Well, I am going to talk about a little bit about

5
00:00:39,580 --> 00:00:43,174
githubs and observability. Let me share

6
00:00:43,212 --> 00:00:45,590
my presentation,

7
00:00:47,210 --> 00:00:52,126
my deck. So the

8
00:00:52,148 --> 00:00:54,762
name of my talk is observability,

9
00:00:54,906 --> 00:00:57,230
the key to unlocking it ups.

10
00:00:58,130 --> 00:01:01,678
So this is

11
00:01:01,764 --> 00:01:05,794
a little bit about me. I am

12
00:01:05,832 --> 00:01:09,140
the dev now doing DevOps living in Mexico City.

13
00:01:09,750 --> 00:01:13,426
Also proud member of the DevOps Institute as ambassador for

14
00:01:13,448 --> 00:01:17,986
Mexico, GitLab Hero and Dev Network

15
00:01:18,098 --> 00:01:21,910
advisory board member. So there is my link.

16
00:01:22,060 --> 00:01:24,360
If you wish to connect,

17
00:01:25,770 --> 00:01:29,226
be my guest. So well, I would

18
00:01:29,248 --> 00:01:32,650
like to start with this slide

19
00:01:32,990 --> 00:01:36,682
to mention with this warning that this talk

20
00:01:36,736 --> 00:01:41,742
is an holistic approach by

21
00:01:41,796 --> 00:01:46,090
reference to the whole. So I don't

22
00:01:46,170 --> 00:01:49,498
just want to talk about some specific topic,

23
00:01:49,594 --> 00:01:52,350
technical issue, pretty deep.

24
00:01:54,070 --> 00:02:00,146
If not, I would like to talk about to

25
00:02:00,168 --> 00:02:03,982
see that the forest instead of the whole tree

26
00:02:04,046 --> 00:02:07,526
or just one tree. So I would

27
00:02:07,548 --> 00:02:10,466
like to start with observability.

28
00:02:10,658 --> 00:02:13,974
So observability is. Well,

29
00:02:14,092 --> 00:02:17,750
there is not a single definition about observability,

30
00:02:18,430 --> 00:02:22,150
but observability is a management strategy

31
00:02:22,230 --> 00:02:25,526
focused on keeping the more relevant and important and core

32
00:02:25,558 --> 00:02:29,466
issues at or near to the top of an

33
00:02:29,488 --> 00:02:33,114
operations process flow. The term

34
00:02:33,162 --> 00:02:36,302
is also used to describe software processes that

35
00:02:36,356 --> 00:02:40,234
facilitate the separation of critical information from routine

36
00:02:40,362 --> 00:02:46,258
information. So seems

37
00:02:46,344 --> 00:02:51,874
like a little academic definition. So maybe

38
00:02:51,992 --> 00:02:56,790
when we contrast observability versus monitoring,

39
00:02:57,210 --> 00:03:00,358
we have a better understanding of what

40
00:03:00,524 --> 00:03:04,374
observability is. But I

41
00:03:04,412 --> 00:03:08,570
would like to, or some companies like to

42
00:03:08,720 --> 00:03:12,010
explain observability with these three pillars.

43
00:03:14,190 --> 00:03:17,926
Metrics, traces and logs are the three pillars

44
00:03:17,958 --> 00:03:21,214
of observability. So you can

45
00:03:21,252 --> 00:03:24,830
think of an observability in these three components.

46
00:03:25,250 --> 00:03:29,120
It's like the secret sauce. When you have this data,

47
00:03:29,490 --> 00:03:33,442
you can be proactive and

48
00:03:33,496 --> 00:03:42,578
you can observe your systems well,

49
00:03:42,664 --> 00:03:46,326
it can also refer to the extraction and processing of critical information

50
00:03:46,428 --> 00:03:50,230
at the highest level, architectural operation systems.

51
00:03:52,170 --> 00:03:55,942
As I said, when we put

52
00:03:55,996 --> 00:03:58,150
in contracts with monitoring,

53
00:04:00,750 --> 00:04:04,394
when we talk about monitoring, maybe you have

54
00:04:04,432 --> 00:04:10,074
been there diving in

55
00:04:10,112 --> 00:04:14,154
a locks, ocean, so tons

56
00:04:14,202 --> 00:04:15,310
of lines.

57
00:04:17,410 --> 00:04:21,134
It takes a while to get real

58
00:04:21,332 --> 00:04:24,914
and important information about what is going on with the system.

59
00:04:25,032 --> 00:04:28,930
So that's why we have these new tools.

60
00:04:31,270 --> 00:04:34,914
Actually, in most cases when

61
00:04:34,952 --> 00:04:39,206
we talk about monitoring, it's because we are doing

62
00:04:39,308 --> 00:04:43,094
a post martin analysis. So this is the main

63
00:04:43,132 --> 00:04:46,966
difference between observability. Observability is

64
00:04:46,988 --> 00:04:51,034
to be proactive, is to have this information to

65
00:04:51,072 --> 00:04:54,730
avoid that the system crashes or to

66
00:04:54,800 --> 00:04:58,780
have some problems. And even

67
00:04:59,150 --> 00:05:02,830
then the user report the issue

68
00:05:02,900 --> 00:05:06,894
or the problem we already know about it because we have

69
00:05:07,012 --> 00:05:10,526
this observability running end to

70
00:05:10,548 --> 00:05:15,246
end. So monitoring

71
00:05:15,278 --> 00:05:19,326
tools passively gather information, most of which turns

72
00:05:19,358 --> 00:05:23,074
out to be insignificant or we don't get

73
00:05:23,192 --> 00:05:27,306
the real important information. So this can drown

74
00:05:27,358 --> 00:05:30,934
operations, personnel and even AI tools in

75
00:05:30,972 --> 00:05:35,366
data versus observability that

76
00:05:35,468 --> 00:05:39,290
actively gathers data to focus on what's relevant,

77
00:05:39,630 --> 00:05:42,054
such as the factors that drive operations,

78
00:05:42,182 --> 00:05:44,090
decisions and actions.

79
00:05:45,310 --> 00:05:51,774
So in this site is observability and

80
00:05:51,812 --> 00:05:55,326
why it is important because we are going to

81
00:05:55,348 --> 00:05:58,590
see proactively our systems.

82
00:05:59,570 --> 00:06:03,154
These new terms is not that

83
00:06:03,192 --> 00:06:07,022
new, but a lot of companies are adopting

84
00:06:07,086 --> 00:06:11,170
Gitops because it represents some advantages.

85
00:06:11,670 --> 00:06:15,826
So Gitops in

86
00:06:15,848 --> 00:06:19,874
a pretty brief definition, GitHub uses

87
00:06:19,922 --> 00:06:23,158
git repositories as a single source of true

88
00:06:23,244 --> 00:06:26,280
to deliver infrastructure as code.

89
00:06:26,730 --> 00:06:30,314
So single source of true is

90
00:06:30,352 --> 00:06:32,970
the key definition.

91
00:06:34,030 --> 00:06:37,558
So you can see this image, this is Githubs

92
00:06:37,574 --> 00:06:41,006
in a nutshell. We are going to have

93
00:06:41,188 --> 00:06:45,854
our desired state in

94
00:06:45,892 --> 00:06:47,950
a couple of manifest.

95
00:06:49,330 --> 00:06:50,080
Well,

96
00:06:52,550 --> 00:06:56,354
I have to say that these

97
00:06:56,472 --> 00:07:00,514
GitHub tools add a

98
00:07:00,552 --> 00:07:04,274
control plane to kubernetes. So we

99
00:07:04,312 --> 00:07:07,730
have this repo, this Git

100
00:07:07,810 --> 00:07:10,722
repo. It can be GitHub,

101
00:07:10,786 --> 00:07:13,814
GitLab, any repo, any repository that you have,

102
00:07:13,852 --> 00:07:17,786
it doesn't matter, but you have the manifest in

103
00:07:17,808 --> 00:07:21,366
this repo. This manifest

104
00:07:21,478 --> 00:07:25,178
is the source of true for declarative code.

105
00:07:25,344 --> 00:07:29,974
So it's going to do a reconciliation when

106
00:07:30,032 --> 00:07:34,062
you are committing and releasing your

107
00:07:34,116 --> 00:07:38,014
code. This is the CI CD pipeline. So you are

108
00:07:38,052 --> 00:07:41,790
running a series of stacks resulting in the

109
00:07:41,940 --> 00:07:45,186
update of the runtime environment to

110
00:07:45,208 --> 00:07:50,046
match the source. So if there is discrepancy

111
00:07:50,158 --> 00:07:53,682
or a difference between the desired state and the actual

112
00:07:53,816 --> 00:07:57,462
state of the system, it's going to

113
00:07:57,596 --> 00:07:59,590
do the reconciliation loop.

114
00:08:00,810 --> 00:08:04,914
So submitted

115
00:08:04,962 --> 00:08:08,598
code checks the CI process well, the CD process checks

116
00:08:08,614 --> 00:08:11,340
and applies requirements for things like security,

117
00:08:12,110 --> 00:08:15,786
infrastructure as code or any other boundaries set for

118
00:08:15,808 --> 00:08:19,034
the application framework. All changes to

119
00:08:19,072 --> 00:08:22,670
code are tracked, making updates easy while

120
00:08:22,740 --> 00:08:26,394
also providing version control, shoulder roadblock

121
00:08:26,442 --> 00:08:29,422
be needed. So well,

122
00:08:29,476 --> 00:08:33,390
this is GitHub's blue subservability.

123
00:08:33,830 --> 00:08:38,786
I would like to recommend

124
00:08:38,888 --> 00:08:42,622
to take a look of this image. So you have the desired

125
00:08:42,686 --> 00:08:46,166
state and the current state, and in

126
00:08:46,188 --> 00:08:48,790
the middle you have the reconciliation loop.

127
00:08:49,290 --> 00:08:53,654
I think that this is the

128
00:08:53,692 --> 00:08:56,870
key or the middle or stone of GitHub.

129
00:08:58,030 --> 00:09:01,526
So we observe,

130
00:09:01,718 --> 00:09:05,530
and if there is a difference between these

131
00:09:05,600 --> 00:09:08,806
two estates, we adjust.

132
00:09:08,998 --> 00:09:13,594
So that is why observability is key for Githubs.

133
00:09:13,722 --> 00:09:17,230
We can do GitHub's observability.

134
00:09:19,010 --> 00:09:22,782
So why GitHub is important and web companies are

135
00:09:22,836 --> 00:09:26,382
adopting Githubs because we have several

136
00:09:26,446 --> 00:09:30,350
advantages from other release managing

137
00:09:30,430 --> 00:09:33,554
strategies. We have improved security and

138
00:09:33,592 --> 00:09:37,570
compliance, increased collaboration and productivity,

139
00:09:38,150 --> 00:09:40,310
decreased manual oversight,

140
00:09:40,810 --> 00:09:45,190
faster deployments and increase reliability.

141
00:09:47,710 --> 00:09:51,802
And by the way, there is this site that

142
00:09:51,936 --> 00:09:55,386
I totally recommend to take a look. You can

143
00:09:55,408 --> 00:10:00,182
enter to open HTTPs opengirups

144
00:10:00,326 --> 00:10:04,430
dev. So you have this initiative that

145
00:10:04,580 --> 00:10:08,400
it sets like the principles of what is open.

146
00:10:09,650 --> 00:10:12,914
So open Gitops is a set

147
00:10:12,952 --> 00:10:16,402
of open source standards, best practices and

148
00:10:16,456 --> 00:10:20,050
community focused education to help organizations adopt a

149
00:10:20,120 --> 00:10:23,934
structure standardized approach to implementing

150
00:10:23,982 --> 00:10:27,686
GitHub. I highly recommend

151
00:10:27,788 --> 00:10:31,414
to take a look of this site. So it's not

152
00:10:31,452 --> 00:10:34,470
about the implementation or tooling,

153
00:10:35,210 --> 00:10:39,980
it's like a neutral vendor site.

154
00:10:41,150 --> 00:10:43,690
So the principle of GitHub,

155
00:10:46,190 --> 00:10:49,834
this principle I have to say are

156
00:10:49,872 --> 00:10:54,210
extracted from the site. The principle of GitHubs

157
00:10:54,310 --> 00:10:57,694
is that it's declarative, so you

158
00:10:57,732 --> 00:11:01,498
don't do imperative command lines.

159
00:11:01,594 --> 00:11:05,362
So it's based on

160
00:11:05,416 --> 00:11:08,862
manifest files, like I said in a previous

161
00:11:08,926 --> 00:11:12,626
slide. So is a clarity a system

162
00:11:12,728 --> 00:11:16,382
managed by GitHub must have if desired state expresses

163
00:11:16,446 --> 00:11:20,440
the clarity is know Yaml is

164
00:11:20,810 --> 00:11:24,374
nowadays everywhere is versioned and

165
00:11:24,412 --> 00:11:28,570
immotable. That means that the desired is

166
00:11:28,640 --> 00:11:33,014
stored in a way that enforces immotability versioning

167
00:11:33,062 --> 00:11:35,500
and retains a complete version history.

168
00:11:36,750 --> 00:11:41,020
So it's similar like when

169
00:11:41,390 --> 00:11:45,162
developers make commits and they have

170
00:11:45,216 --> 00:11:49,230
this versioning and can do rollbacks,

171
00:11:49,570 --> 00:11:53,070
it's pretty like the same. That's why it is GitHub,

172
00:11:53,970 --> 00:11:59,342
it's pulled automatically. So it's

173
00:11:59,406 --> 00:12:03,726
pulled because there are another paradigms that are pushed.

174
00:12:03,918 --> 00:12:08,078
In this case, GitHub is pulled automatically.

175
00:12:08,254 --> 00:12:11,814
So the subware agents automatically pull the desired state

176
00:12:11,852 --> 00:12:15,494
declarations from the source, so it pulls the

177
00:12:15,532 --> 00:12:16,840
desired state.

178
00:12:18,910 --> 00:12:22,298
Do the reconciliation loops with the actual

179
00:12:22,384 --> 00:12:25,754
states. And if there

180
00:12:25,792 --> 00:12:30,074
is a mismatch it's going to do the

181
00:12:30,112 --> 00:12:34,330
healing. So it's continually reconciled.

182
00:12:35,070 --> 00:12:38,398
So subway agents continually observe actual

183
00:12:38,484 --> 00:12:41,806
system state and attempt to apply the desired state.

184
00:12:41,988 --> 00:12:45,426
So that's the

185
00:12:45,448 --> 00:12:51,902
way that you can have availability

186
00:12:52,046 --> 00:12:56,550
system. And it's, it's very easy to maintain

187
00:12:57,210 --> 00:13:00,454
even if you have a lot of, I mean if you

188
00:13:00,492 --> 00:13:04,402
have 100 of pods and your kubernetes

189
00:13:04,466 --> 00:13:06,920
cluster is too big,

190
00:13:07,870 --> 00:13:13,302
this tool even have some nice graphical

191
00:13:13,366 --> 00:13:17,370
user interfaces that you can handle the state

192
00:13:17,520 --> 00:13:19,980
and see if something is wrong,

193
00:13:20,850 --> 00:13:25,470
you can apply the reconciliation.

194
00:13:26,450 --> 00:13:28,480
So the demo,

195
00:13:31,010 --> 00:13:35,794
there is not no show

196
00:13:35,832 --> 00:13:38,580
me code. This is what developer says.

197
00:13:39,190 --> 00:13:43,970
So there is a lot of tools that

198
00:13:44,040 --> 00:13:48,450
are applying the GitHub paradigm

199
00:13:48,870 --> 00:13:51,590
like fluxd wear harness,

200
00:13:52,250 --> 00:13:55,958
Jenkins codefresh that actually

201
00:13:56,044 --> 00:13:58,870
uses Argo CD wave.

202
00:14:00,190 --> 00:14:03,562
Well in particular I'm going to do the demo

203
00:14:03,616 --> 00:14:06,746
in Argo CD. So Argo CD is a

204
00:14:06,768 --> 00:14:10,454
declarative GitHub's continuous delivery tool for kubernetes.

205
00:14:10,582 --> 00:14:14,742
So remember it's a controller plane

206
00:14:14,806 --> 00:14:18,686
running on kubernetes. It's another control plane running kubernetes so we

207
00:14:18,708 --> 00:14:22,586
can handle the

208
00:14:22,628 --> 00:14:26,882
releases. So at this point I'm going to show

209
00:14:27,016 --> 00:14:30,274
the site. So there is a

210
00:14:30,312 --> 00:14:33,586
pretty cool training.

211
00:14:33,768 --> 00:14:37,720
If you go to codefresh IO you can find

212
00:14:39,290 --> 00:14:43,414
some training. So I will highly recommend

213
00:14:43,532 --> 00:14:47,480
to take this training

214
00:14:48,410 --> 00:14:52,702
because our folks of coldfresh

215
00:14:52,866 --> 00:14:56,490
already did the setup. So it's already

216
00:14:56,560 --> 00:15:00,146
there. It's pretty easy just to follow the instruction

217
00:15:00,198 --> 00:15:03,854
that as you can see in my browser we

218
00:15:03,892 --> 00:15:08,010
have all destructions

219
00:15:08,090 --> 00:15:11,454
just to follow. I will just

220
00:15:11,492 --> 00:15:14,594
show one of the

221
00:15:14,632 --> 00:15:18,020
lessons, that is just to show them.

222
00:15:23,030 --> 00:15:27,746
So it takes a little bit to prepare

223
00:15:27,778 --> 00:15:28,790
the environment.

224
00:15:32,090 --> 00:15:35,414
Okay, so we have the

225
00:15:35,452 --> 00:15:39,880
environment. So as I said, go to this address

226
00:15:40,810 --> 00:15:44,922
learning cutfresh IO. So it's pretty

227
00:15:44,976 --> 00:15:49,210
handy, pretty useful. You can learn about ArgoCD

228
00:15:49,550 --> 00:15:52,702
from GitHub fundamentals to some

229
00:15:52,756 --> 00:15:56,240
more advanced topics. So it's pretty cool because

230
00:15:56,850 --> 00:16:00,670
as I said, we just have to follow the instructions.

231
00:16:03,030 --> 00:16:07,140
The first task is to fart this

232
00:16:08,710 --> 00:16:12,180
repository that we have on GitHub.com.

233
00:16:12,870 --> 00:16:18,694
So we

234
00:16:18,732 --> 00:16:19,720
have already,

235
00:16:22,890 --> 00:16:24,920
I can show, I have my,

236
00:16:30,640 --> 00:16:31,870
this is the.

237
00:16:41,240 --> 00:16:45,376
So as you can see Argo

238
00:16:45,408 --> 00:16:47,300
CD is already installed.

239
00:16:51,000 --> 00:16:55,524
You can handle GitHub with the

240
00:16:55,562 --> 00:16:59,172
command line interface, writing commands,

241
00:16:59,316 --> 00:17:03,640
but you also have this nice Argo CD UI.

242
00:17:10,000 --> 00:17:13,388
It's like pretty nice,

243
00:17:13,554 --> 00:17:17,324
pretty useful interface that you can see what is going on with

244
00:17:17,522 --> 00:17:21,164
your Kubernetes clusters and suffering is ramp.

245
00:17:21,292 --> 00:17:24,290
You are going to see here in red,

246
00:17:25,060 --> 00:17:28,940
some pod is failing or if we lose

247
00:17:29,020 --> 00:17:32,644
communication you are going to

248
00:17:32,682 --> 00:17:34,900
visually see immediately.

249
00:17:35,400 --> 00:17:39,584
And of course you can do something to try to repair

250
00:17:39,632 --> 00:17:42,230
or to do a rollback or to do something.

251
00:17:43,000 --> 00:17:46,650
So we are going to do a new app.

252
00:17:48,780 --> 00:17:52,730
The application name is whatever you want demo,

253
00:17:53,100 --> 00:17:55,080
the project is default,

254
00:17:57,360 --> 00:18:00,812
the repository URL is

255
00:18:00,866 --> 00:18:06,312
the certification

256
00:18:06,456 --> 00:18:10,560
examples acting as without the git

257
00:18:12,340 --> 00:18:15,250
and the path is simple app.

258
00:18:21,460 --> 00:18:25,056
The cluster is the default that we have

259
00:18:25,158 --> 00:18:28,980
to know. You must need a Kubernetes cluster already

260
00:18:29,050 --> 00:18:32,916
installed that thanks to

261
00:18:33,098 --> 00:18:36,760
our fault from cutfresh we already

262
00:18:36,830 --> 00:18:41,112
have there and the name space we can set

263
00:18:41,166 --> 00:18:42,360
up the default.

264
00:18:44,940 --> 00:18:48,776
So you can leave these other arguments empty

265
00:18:48,968 --> 00:18:51,630
for now. So,

266
00:18:56,800 --> 00:19:00,096
so that's it. You can click on create.

267
00:19:00,198 --> 00:19:04,016
So at this moment we are going to have our

268
00:19:04,118 --> 00:19:08,192
first application running on kubernetes and

269
00:19:08,246 --> 00:19:11,636
based on GitHub so you can

270
00:19:11,658 --> 00:19:14,740
see the application is out of sync.

271
00:19:15,080 --> 00:19:19,440
If you see the yellow indicator

272
00:19:19,520 --> 00:19:22,900
is out of sync. So you can sync

273
00:19:24,060 --> 00:19:27,432
manually. But the idea is that you are

274
00:19:27,486 --> 00:19:31,112
not going to wake up every morning to

275
00:19:31,166 --> 00:19:33,892
sync all the Kubernetes cluster.

276
00:19:33,956 --> 00:19:37,352
So it can be set up automatically.

277
00:19:37,496 --> 00:19:41,164
But for demo purposes I just wanted to

278
00:19:41,202 --> 00:19:44,572
sync it by clicking this

279
00:19:44,626 --> 00:19:48,396
button to synchronize, you know, remember the

280
00:19:48,418 --> 00:19:51,696
desired state with the actual state.

281
00:19:51,878 --> 00:19:55,996
So if there is a difference, a discrepancy

282
00:19:56,108 --> 00:20:01,876
between the two estates, it's going to

283
00:20:01,898 --> 00:20:05,920
throw an error. So it's

284
00:20:06,080 --> 00:20:07,220
processing.

285
00:20:10,280 --> 00:20:15,704
Of course in the simple app you

286
00:20:15,742 --> 00:20:19,204
can take a look of the manifest, because maybe you are wondering

287
00:20:19,252 --> 00:20:23,000
about well, what is going on in the deployment

288
00:20:24,060 --> 00:20:27,176
is using this manifest.

289
00:20:27,368 --> 00:20:30,700
Of course the deployment is pretty simple.

290
00:20:30,770 --> 00:20:35,724
It's just an

291
00:20:35,762 --> 00:20:38,984
application, trivial go web,

292
00:20:39,122 --> 00:20:43,344
an application in

293
00:20:43,382 --> 00:20:47,424
go in the go programming language. So we

294
00:20:47,462 --> 00:20:51,244
just have one replica. Maybe if I

295
00:20:51,302 --> 00:20:54,996
change this state and do

296
00:20:55,018 --> 00:20:58,628
the synchronization again, it's going to throw an arrow because now

297
00:20:58,714 --> 00:21:02,160
I am telling that the desired

298
00:21:02,240 --> 00:21:06,904
state is two or five or twelve. So this

299
00:21:06,942 --> 00:21:10,660
is just a pretty simple deployment file,

300
00:21:10,740 --> 00:21:14,520
JaMl. So you have this

301
00:21:14,590 --> 00:21:18,300
container that is running a pretty simple application.

302
00:21:18,450 --> 00:21:22,344
And the services, the other JAML

303
00:21:22,392 --> 00:21:27,788
is just exposing the application in

304
00:21:27,794 --> 00:21:29,840
the port 80 80.

305
00:21:30,740 --> 00:21:34,400
So nothing too complex, but I think it's pretty

306
00:21:34,550 --> 00:21:38,384
illustrative. So it takes a little

307
00:21:38,422 --> 00:21:41,828
bit to get the

308
00:21:41,834 --> 00:21:42,820
synchronization.

309
00:21:46,680 --> 00:21:50,980
But as you can see in this learning environment,

310
00:21:51,720 --> 00:21:56,490
we also have the shell. So a lot of these

311
00:21:58,860 --> 00:22:02,072
activities or tasks, we can also

312
00:22:02,126 --> 00:22:07,690
do that in

313
00:22:09,760 --> 00:22:13,100
line. By line, I mean entering the commands.

314
00:22:16,240 --> 00:22:20,416
It totally depends on what you prefer. So when

315
00:22:20,438 --> 00:22:23,820
you have this nice interface,

316
00:22:23,900 --> 00:22:26,610
maybe you want to take advantage of that.

317
00:22:28,180 --> 00:22:32,164
I just want to see if

318
00:22:32,282 --> 00:22:36,756
the deployment is already done because

319
00:22:36,858 --> 00:22:40,240
I think it's a little bit slow.

320
00:22:40,400 --> 00:22:42,900
I don't know if it's my connection.

321
00:22:44,780 --> 00:22:48,372
I have my deployment, my simple deployment,

322
00:22:48,436 --> 00:22:49,850
but it's not ready.

323
00:22:52,060 --> 00:22:55,530
The pod is not available yet,

324
00:22:56,560 --> 00:23:02,190
so we

325
00:23:02,560 --> 00:23:04,270
have to wait to the.

326
00:23:13,600 --> 00:23:17,952
As you can see that the view interface is

327
00:23:18,006 --> 00:23:21,656
pretty nice. I think it's pretty handy.

328
00:23:21,788 --> 00:23:26,228
If you have some problem, you are going to have this health

329
00:23:26,314 --> 00:23:29,510
status you can see in this side menu bar.

330
00:23:31,560 --> 00:23:35,652
The first is the sync status. It's unknown synced

331
00:23:35,716 --> 00:23:38,580
when it's green and out of sync.

332
00:23:38,740 --> 00:23:42,132
Well in this case the status is processing

333
00:23:42,276 --> 00:23:46,176
the synchronization. But as you can see here in the health status,

334
00:23:46,228 --> 00:23:49,790
if something is going wrong,

335
00:23:50,400 --> 00:23:53,772
you are going to see it pretty,

336
00:23:53,826 --> 00:23:57,310
visually, it's going to put in red

337
00:23:58,980 --> 00:24:02,656
the frame. So maybe

338
00:24:02,838 --> 00:24:07,168
you can do the rollback and you can do the rollback here

339
00:24:07,254 --> 00:24:10,912
in the Argo CD user interface or

340
00:24:10,966 --> 00:24:13,990
in the command line, it's totally up to you.

341
00:24:14,920 --> 00:24:18,276
Of course I didn't show that,

342
00:24:18,378 --> 00:24:21,536
but you have to install the Argo

343
00:24:21,568 --> 00:24:25,480
CD in the Kubernetes cluster.

344
00:24:25,820 --> 00:24:30,248
And an easy way to start Argo CD is

345
00:24:30,414 --> 00:24:33,880
with the helm package manager.

346
00:24:37,360 --> 00:24:42,024
I am going to go back to my slides waiting

347
00:24:42,072 --> 00:24:46,776
to have this already synchronized.

348
00:24:46,888 --> 00:24:50,416
But well it's just

349
00:24:50,438 --> 00:24:54,130
to give an idea of what we are talking about.

350
00:24:55,060 --> 00:24:58,624
So going

351
00:24:58,662 --> 00:25:00,240
back to my presentation,

352
00:25:02,340 --> 00:25:05,936
well if we can get any conclusion of

353
00:25:05,958 --> 00:25:09,620
this, well there is a lot of operations,

354
00:25:10,040 --> 00:25:14,020
there is the evolution of operations and it's

355
00:25:14,680 --> 00:25:18,724
quite a bit a lot of

356
00:25:18,922 --> 00:25:22,730
operations. So this is kind of fun because

357
00:25:23,980 --> 00:25:27,400
we started with Ops following DevOps,

358
00:25:27,480 --> 00:25:31,000
Devsecops, devsec ML

359
00:25:31,080 --> 00:25:34,956
Ops, Triceratops, that this is the joke. But there

360
00:25:34,978 --> 00:25:38,316
is another Ops, no data ops, GitHubs of

361
00:25:38,338 --> 00:25:41,984
course, AI Ops, no ops and you

362
00:25:42,022 --> 00:25:47,280
name it ops. So it's

363
00:25:47,780 --> 00:25:51,676
mean. But for sure GitHub

364
00:25:51,788 --> 00:25:56,596
is important thing. So you

365
00:25:56,618 --> 00:26:00,484
can see that a lot of companies are adopting the

366
00:26:00,522 --> 00:26:04,630
Githubs way to do their releases and to manage

367
00:26:05,560 --> 00:26:09,844
our Kubernetes clusters. So definitely

368
00:26:09,962 --> 00:26:13,796
GitHubs is currently in the stage of its germination.

369
00:26:13,988 --> 00:26:16,910
I mean it's starting,

370
00:26:19,760 --> 00:26:23,916
it's going to grow for sure. So you

371
00:26:23,938 --> 00:26:26,110
can see the numbers.

372
00:26:28,580 --> 00:26:32,384
So totally a good investment of your

373
00:26:32,422 --> 00:26:36,480
time. If you are already doing DevOps,

374
00:26:38,100 --> 00:26:41,652
the recommendation is just to learn another tool.

375
00:26:41,706 --> 00:26:45,792
I mean it can be tough

376
00:26:45,856 --> 00:26:49,344
because you're already handling a lot of tools,

377
00:26:49,392 --> 00:26:52,470
but GitHubs is going to be part of.

378
00:26:55,500 --> 00:26:59,928
Sometimes people

379
00:27:00,014 --> 00:27:03,956
ask about if this is going to replace DevOps.

380
00:27:04,068 --> 00:27:07,160
It's not a replacement, it's a companion.

381
00:27:07,900 --> 00:27:11,340
Gitops is neither better nor worse than DevOps.

382
00:27:11,840 --> 00:27:14,140
It's not the correct approach.

383
00:27:14,720 --> 00:27:18,076
Gitops without DevOps does not have a future.

384
00:27:18,178 --> 00:27:22,604
So you need DevOps to

385
00:27:22,642 --> 00:27:26,256
do Gitops. The scope needs to be changed and

386
00:27:26,278 --> 00:27:30,370
directed at 14 investigation and how the approach can add

387
00:27:32,280 --> 00:27:36,084
DevOps is just a cultural thing. Also GitHub is

388
00:27:36,122 --> 00:27:39,792
part of that. So it's unlikely that GitHub

389
00:27:39,856 --> 00:27:42,340
will become something bigger than DevOps,

390
00:27:44,680 --> 00:27:47,944
it's complement DevOps, I would like to

391
00:27:47,982 --> 00:27:51,880
say. So if you take something of this

392
00:27:51,950 --> 00:27:55,864
brief talk, the four takeaways will

393
00:27:55,902 --> 00:27:59,924
be you cannot do Githubs without observability.

394
00:28:00,052 --> 00:28:03,516
You know, observability is important to have all

395
00:28:03,538 --> 00:28:07,880
the time, to observe all the time our systems

396
00:28:08,040 --> 00:28:12,064
and git is the single sort of true for the

397
00:28:12,102 --> 00:28:16,160
system intended state. While observability provides a single

398
00:28:16,230 --> 00:28:19,330
sort of true for the system actual state.

399
00:28:20,580 --> 00:28:24,200
The third one is internal observability allows the GitHub's

400
00:28:24,220 --> 00:28:27,060
controller to identify configuration drift.

401
00:28:28,040 --> 00:28:32,096
External observability allows operation, staff and other systems to identify

402
00:28:32,208 --> 00:28:36,452
changes in the cluster. So cloud

403
00:28:36,506 --> 00:28:40,372
native observability, as I said, is a new

404
00:28:40,426 --> 00:28:44,096
skill and task you must add to your DevOps

405
00:28:44,208 --> 00:28:47,516
for sure. So thank

406
00:28:47,538 --> 00:28:51,870
you very much. This is all for me.

407
00:28:53,680 --> 00:28:57,356
So thank you very much. And I am going

408
00:28:57,378 --> 00:29:00,860
to be around here. This is my twitter. If you want to contact

409
00:29:00,930 --> 00:29:03,944
me, be my guest.

410
00:29:04,072 --> 00:29:06,510
So thank you very much.

