1
00:00:00,570 --> 00:00:04,382
So we want to turn these surprises into

2
00:00:04,436 --> 00:00:07,838
non surprises or something. How are we going to do that?

3
00:00:08,004 --> 00:00:11,230
We've got a software tool for you. It's chaos,

4
00:00:11,300 --> 00:00:14,254
chaos, chaos, chaos, chaos, chaos monkey for spring Boot,

5
00:00:14,292 --> 00:00:18,046
Fletcher, I'm Manuel Wessner. We work for codecentric AG

6
00:00:18,148 --> 00:00:21,994
and we in Germany and we are maintainers

7
00:00:22,042 --> 00:00:25,746
of this piece of software. So we want to kick straight

8
00:00:25,778 --> 00:00:28,246
off with a live demo and show you a few things about how you can

9
00:00:28,268 --> 00:00:32,054
use it. This is just a really simple application we

10
00:00:32,092 --> 00:00:36,354
wrote. If you want to use a spring boot plugin,

11
00:00:36,402 --> 00:00:40,406
then you're going to need a spring boot application to test it with. So we've

12
00:00:40,438 --> 00:00:44,170
written a very simple application which men will explain.

13
00:00:44,240 --> 00:00:48,234
Yeah, it's just a very basic spring boot application.

14
00:00:48,432 --> 00:00:51,390
We got an endpoint, which is just movies.

15
00:00:52,210 --> 00:00:55,594
The app is about recommending a movie for a user.

16
00:00:55,722 --> 00:00:59,326
Just take any streaming service like do

17
00:00:59,348 --> 00:01:02,790
you want to watch inception or some other movies?

18
00:01:02,810 --> 00:01:06,082
So it just has a normal rest controller with one

19
00:01:06,136 --> 00:01:09,474
endpoint. This endpoint calls a

20
00:01:09,512 --> 00:01:13,010
service get movie. This in terms

21
00:01:13,080 --> 00:01:16,646
get recommended movie, which is just a

22
00:01:16,668 --> 00:01:20,322
plain list of predefined movies, just very basic.

23
00:01:20,386 --> 00:01:24,146
And for simplicity's sake we just take a random

24
00:01:24,178 --> 00:01:27,894
movie off that list and the movies are provided by

25
00:01:27,932 --> 00:01:31,626
a database. Yeah. So in theory it's getting it

26
00:01:31,648 --> 00:01:34,838
based on user preferences or something. It's a recommender.

27
00:01:34,934 --> 00:01:38,358
Okay, so now if you could just show us with Postman.

28
00:01:38,534 --> 00:01:42,486
We're using Postman if you're familiar. Yeah,

29
00:01:42,528 --> 00:01:46,378
we want to start application. Exactly. And we're

30
00:01:46,394 --> 00:01:49,054
using postman if you're not familiar with it. It just helps you to make rest

31
00:01:49,092 --> 00:01:52,782
calls and see the JSOn output that comes

32
00:01:52,836 --> 00:01:56,146
back. So we just make a request to

33
00:01:56,168 --> 00:02:00,638
this endpoint. Okay, so application functioning normally.

34
00:02:00,814 --> 00:02:04,466
Now let's see what we can do. Chaos, chaos, chaos, chaos, chaos, chaos monkey for

35
00:02:04,488 --> 00:02:07,654
spring Boot started with that. Yeah. Simplest way is

36
00:02:07,692 --> 00:02:11,080
like to add a dependency to your existing application.

37
00:02:11,450 --> 00:02:15,042
So either it doesn't matter if you have gradle

38
00:02:15,106 --> 00:02:18,554
or maven, just add it. So we have

39
00:02:18,592 --> 00:02:21,290
one dependency, chaos monkey, spring boot.

40
00:02:21,790 --> 00:02:25,254
You add that. So now you got the library.

41
00:02:25,382 --> 00:02:29,114
It still needs some config. I prepared a little bit of

42
00:02:29,152 --> 00:02:32,080
config. I will explain you. Right on.

43
00:02:32,930 --> 00:02:35,310
So that's our application properties.

44
00:02:36,450 --> 00:02:41,518
So just having the dependency in there is not going to change anything. Initially you

45
00:02:41,524 --> 00:02:44,878
need to activate the spring profile. Chaos monkey first of all.

46
00:02:44,964 --> 00:02:48,910
And then you're going to need to activate, you need to enable chaos monkey

47
00:02:49,070 --> 00:02:53,070
second line, you need to enable it actively.

48
00:02:53,230 --> 00:02:57,334
So then we have kind of watcher. This means what

49
00:02:57,372 --> 00:03:02,130
you're going to attack, you have different automation.

50
00:03:02,290 --> 00:03:05,446
For example, in this case we attack service.

51
00:03:05,548 --> 00:03:08,922
So we attack this class which is

52
00:03:08,976 --> 00:03:12,794
annotated with service. We have

53
00:03:12,832 --> 00:03:16,090
an assault level. John can. Yeah,

54
00:03:16,240 --> 00:03:20,278
better than mine. The level means how many of the incoming requests

55
00:03:20,294 --> 00:03:23,742
will be attacked. So one means every single request. If you put

56
00:03:23,796 --> 00:03:27,402
five there, it'll be one out of every five requests.

57
00:03:27,546 --> 00:03:30,346
Approximately, it's done. Not every fifth,

58
00:03:30,378 --> 00:03:33,706
but random about roundabout every fifth will be attacked.

59
00:03:33,818 --> 00:03:37,234
So yeah, and the last line is like we

60
00:03:37,272 --> 00:03:40,814
attack using latency, so we inject latency

61
00:03:40,942 --> 00:03:44,926
to our service. That's kind of different assaults

62
00:03:44,958 --> 00:03:48,914
we have. So let's see how it goes. We move to Postman

63
00:03:48,962 --> 00:03:52,662
again and do the same request where we

64
00:03:52,716 --> 00:03:56,054
had a few milliseconds. Now it turns out to be

65
00:03:56,172 --> 00:03:59,880
2 seconds. I do another one.

66
00:04:00,650 --> 00:04:04,122
Yeah. And if you see the requests will actually take slightly different times

67
00:04:04,176 --> 00:04:08,406
because the latency is by default it's a random amount of latency. It'll be added

68
00:04:08,518 --> 00:04:11,018
between one and 3 seconds.

69
00:04:11,114 --> 00:04:14,094
Yeah, so we can change that. Yeah,

70
00:04:14,132 --> 00:04:17,790
we can change that. Like we can

71
00:04:17,860 --> 00:04:22,158
introduce a fixed delay like

72
00:04:22,244 --> 00:04:25,770
by just defining a couple of additional properties.

73
00:04:25,850 --> 00:04:29,362
So basically range, start and end just

74
00:04:29,416 --> 00:04:33,518
define the same amount of time. So we assume

75
00:04:33,694 --> 00:04:37,398
3 seconds it's going to take to get a

76
00:04:37,404 --> 00:04:39,510
movie out of our endpoint.

77
00:04:42,490 --> 00:04:45,000
So our application started,

78
00:04:46,330 --> 00:04:49,738
first request takes a little bit longer. Yeah, this one will take a

79
00:04:49,744 --> 00:04:52,474
bit more than 3 seconds. That's four,

80
00:04:52,592 --> 00:04:54,700
but the next one.

81
00:04:56,510 --> 00:04:59,610
So yeah, 3 seconds.

82
00:05:00,270 --> 00:05:03,774
All right. Yeah, well we've shown how obviously you've seen

83
00:05:03,812 --> 00:05:07,822
we're restarting the application every time, but if we want to do real

84
00:05:07,956 --> 00:05:12,254
experiments, it is a bit inconvenient to have to restart your application

85
00:05:12,452 --> 00:05:15,810
to start the experiment and stop the experiment. So it would be nice

86
00:05:15,880 --> 00:05:20,130
if we could just have the application running and at runtime we could

87
00:05:20,200 --> 00:05:24,482
tell, okay, now we want to introduce, we want to have this assault running

88
00:05:24,616 --> 00:05:28,086
and then we want to turn it off again. So what we can do

89
00:05:28,108 --> 00:05:31,782
is enable actuator which is like

90
00:05:31,916 --> 00:05:35,058
some endpoints where you can by an tests endpoint

91
00:05:35,154 --> 00:05:38,818
enable and disable certain things like chaos monkey for

92
00:05:38,844 --> 00:05:41,862
example. And we can configure our attacks

93
00:05:41,926 --> 00:05:46,026
and our watchers like using postman for

94
00:05:46,048 --> 00:05:49,466
example. Yeah, my tests core. Yeah. So actuator is just a built in part of

95
00:05:49,488 --> 00:05:53,530
spring boot. So there are lots of different functions of spring boot which use actuator

96
00:05:53,610 --> 00:05:57,054
chaos chaos monkey for spring boot plugs into

97
00:05:57,092 --> 00:06:00,474
that we just need two add the settings which expose

98
00:06:00,522 --> 00:06:04,162
this tests endpoint for configured by any

99
00:06:04,216 --> 00:06:06,900
tests client. All right,

100
00:06:07,830 --> 00:06:11,922
so let's see now we

101
00:06:11,976 --> 00:06:18,278
have it enabled so

102
00:06:18,364 --> 00:06:22,850
we can configure now this stuff using postman.

103
00:06:23,010 --> 00:06:26,498
Yeah, so now we're coding to configure an exception assault. So we saw the latency

104
00:06:26,594 --> 00:06:30,438
assault just before and another assault which we can do is exception

105
00:06:30,534 --> 00:06:34,218
which means basically the requests are

106
00:06:34,304 --> 00:06:37,610
going to be coding to throw an exception. When the request comes in the application

107
00:06:37,680 --> 00:06:41,514
will throw an exception. Yeah. So we have this assaults

108
00:06:41,642 --> 00:06:45,594
endpoint which we pass a config JSON

109
00:06:45,642 --> 00:06:48,958
config. Every second request gets

110
00:06:49,044 --> 00:06:52,042
attacked. We don't want latency,

111
00:06:52,106 --> 00:06:56,082
we just want exceptions two throw. So we activate that

112
00:06:56,216 --> 00:07:00,290
and we want to have it on rest controls.

113
00:07:01,350 --> 00:07:04,658
So we have defined it here, we just want to have

114
00:07:04,664 --> 00:07:08,050
it on tests controls, no other type of annotation.

115
00:07:09,210 --> 00:07:12,566
So we now don't need, maybe we could just take a second to look at

116
00:07:12,588 --> 00:07:16,054
that, what we're seeing there. So they're the different options for what

117
00:07:16,092 --> 00:07:20,822
you can configure. So you can attack assault controllers,

118
00:07:20,966 --> 00:07:24,886
rest controllers, service repository

119
00:07:25,078 --> 00:07:26,490
and component.

120
00:07:28,110 --> 00:07:31,838
Obviously component actually technically speaking every service,

121
00:07:31,924 --> 00:07:35,966
for example is a component in spring, but it will attack the

122
00:07:35,988 --> 00:07:40,560
things that actually have that annotation on them when you enable that particular thing.

123
00:07:41,170 --> 00:07:44,574
So let's see how it affects

124
00:07:44,622 --> 00:07:47,906
our endpoint. As we see, first request we

125
00:07:47,928 --> 00:07:52,238
got an internal server error, we got a chaos monkey runtime exception.

126
00:07:52,414 --> 00:07:56,486
So second request goes well. So we

127
00:07:56,508 --> 00:08:01,062
have level two. So about every second request gets

128
00:08:01,116 --> 00:08:03,880
attacked. Yeah. Cool.

129
00:08:04,650 --> 00:08:08,546
All right then let's

130
00:08:08,578 --> 00:08:12,326
say we want to talk about like our application is talking to a database.

131
00:08:12,518 --> 00:08:16,614
So we want to say maybe a theoretical

132
00:08:16,662 --> 00:08:20,214
thing could be that we can't access the database,

133
00:08:20,262 --> 00:08:23,662
right. We, we don't get a connection to the database when we want to get

134
00:08:23,716 --> 00:08:28,058
the user's preference. Now because we can attack repository

135
00:08:28,154 --> 00:08:31,902
beans we can run an attack for that. Let's do that.

136
00:08:32,036 --> 00:08:35,634
So we just configure now only the repository, not just

137
00:08:35,672 --> 00:08:40,126
tests controller, just the repository because it's

138
00:08:40,158 --> 00:08:43,586
actually our database or access to our

139
00:08:43,608 --> 00:08:47,480
database. And look how it goes.

140
00:08:48,250 --> 00:08:51,462
We assume like the same result.

141
00:08:51,596 --> 00:08:56,040
Yeah. Okay so now

142
00:08:56,970 --> 00:09:01,082
we wanted to put that into an experiments. Okay so

143
00:09:01,216 --> 00:09:04,490
let's say it's all very fun. We've been clicking around

144
00:09:04,560 --> 00:09:07,914
here and it seems to be working but in

145
00:09:07,952 --> 00:09:11,046
reality it would be nice, we don't want to be doing that much clicking.

146
00:09:11,078 --> 00:09:14,254
It would be nice if we had a kind of a script which could

147
00:09:14,292 --> 00:09:17,280
just execute it for us. So let's enable that,

148
00:09:17,650 --> 00:09:21,386
attack that assault, let's see how the application responds

149
00:09:21,498 --> 00:09:24,890
and then let's disable that and return to normal functionality.

150
00:09:25,050 --> 00:09:28,750
Yeah, we prepared a little bit kind of experiments.

151
00:09:29,410 --> 00:09:33,262
It's using chaos toolkit which talked. Ross Meyer just

152
00:09:33,316 --> 00:09:37,686
talked about us. It's kind of a

153
00:09:37,788 --> 00:09:41,574
JSON description how you want to have your experiments. It got

154
00:09:41,612 --> 00:09:45,654
a title. So we assume movie recommendation when database is

155
00:09:45,692 --> 00:09:48,934
down, quite important. A steady

156
00:09:48,982 --> 00:09:52,986
started means like if everything is all right, we suppose a

157
00:09:53,008 --> 00:09:56,506
movie is recommended. So how we can check that

158
00:09:56,688 --> 00:10:01,166
we can request a movie on this endpoint should

159
00:10:01,348 --> 00:10:04,942
get a result in less than a second and

160
00:10:04,996 --> 00:10:09,520
it should return HTTP status code 200.

161
00:10:09,890 --> 00:10:12,942
That's that. So we're basically saying that at any

162
00:10:12,996 --> 00:10:16,706
point in time, no matter what's happening, our system should be

163
00:10:16,808 --> 00:10:20,686
responding to that request with 200 and should be giving some movie.

164
00:10:20,878 --> 00:10:25,250
So it's kind of asserting like testing

165
00:10:26,470 --> 00:10:29,842
and now are actually testing.

166
00:10:29,906 --> 00:10:33,570
What we do is like first we enable chaos monkey.

167
00:10:33,730 --> 00:10:37,534
The good thing is Chaos toolkit has an integration

168
00:10:37,602 --> 00:10:41,754
for Chaos monkey so you don't need two actually make

169
00:10:41,792 --> 00:10:44,966
the post request. We just saw it postman,

170
00:10:45,078 --> 00:10:48,934
you just can pass the actuator URL

171
00:10:49,062 --> 00:10:52,800
and you chain use the enable chaos monkey function.

172
00:10:54,850 --> 00:10:58,654
After that you configure the salts. So what

173
00:10:58,692 --> 00:11:01,550
we do now, we attack every request.

174
00:11:01,970 --> 00:11:06,558
We want to have exceptions. And to make it a little bit more realistic,

175
00:11:06,734 --> 00:11:09,826
we have a connect exception and the

176
00:11:09,848 --> 00:11:13,506
arguments are like the parameter of the exception we pass here.

177
00:11:13,608 --> 00:11:17,534
So we pass a string which connection timed

178
00:11:17,582 --> 00:11:20,786
out. So to make it more like the exception

179
00:11:20,818 --> 00:11:26,182
you would actually get if you can't connect to the database and

180
00:11:26,316 --> 00:11:29,900
we want two have that now a regular post.

181
00:11:30,830 --> 00:11:34,202
Because that feature isn't implemented, it would be probably great

182
00:11:34,256 --> 00:11:37,706
for full request. We need to

183
00:11:37,728 --> 00:11:41,434
be able to update the watches from the Chaos

184
00:11:41,482 --> 00:11:44,974
toolkit because previously it's a

185
00:11:45,012 --> 00:11:49,646
more recent update. Chaos Chaos monkey for spring boot after

186
00:11:49,668 --> 00:11:53,754
you start spring the application, you weren't able to change the watches.

187
00:11:53,802 --> 00:11:57,486
You weren't able to say that now the service watcher is active or now

188
00:11:57,508 --> 00:12:00,226
the red, you had to do it at started. And that's why I think the

189
00:12:00,248 --> 00:12:02,814
Chaos toolkit doesn't support chain that in the experiments.

190
00:12:02,862 --> 00:12:06,386
But now, oh yeah, if you call the changing of

191
00:12:06,408 --> 00:12:09,518
those values, as long as you can change them at some point

192
00:12:09,624 --> 00:12:12,914
for the API call, then you should be able two change them inside the method

193
00:12:12,962 --> 00:12:16,440
if you want to change them during the execution. Really? Okay.

194
00:12:16,810 --> 00:12:20,346
I don't know if the underlying API has that in there yet. Yeah, I think

195
00:12:20,368 --> 00:12:24,118
that's the point. I think it's still possible by chaos toolkit,

196
00:12:24,214 --> 00:12:27,946
but it's not like with the function change or

197
00:12:27,968 --> 00:12:31,450
soil configuration because it's quite a new

198
00:12:31,520 --> 00:12:35,610
feature I guess to changing that watches at runtime

199
00:12:35,690 --> 00:12:38,670
before it wasn't possible and that's probably the reason.

200
00:12:38,740 --> 00:12:42,378
So here we pass the same arguments like

201
00:12:42,484 --> 00:12:46,260
we just want to have it on repository and it's good to go.

202
00:12:47,190 --> 00:12:51,250
All right. So I will just make a first request

203
00:12:52,310 --> 00:12:56,790
to see how it goes. Now I will run the experiment.

204
00:12:59,690 --> 00:13:03,638
Right. So at the moment the Application is running

205
00:13:03,724 --> 00:13:07,026
with no chaos attacks, assaults configured.

206
00:13:07,058 --> 00:13:10,602
Is that right? I think it's still from the old one.

207
00:13:10,656 --> 00:13:13,370
Like the old exceptions. Yeah.

208
00:13:13,440 --> 00:13:17,498
Okay so maybe

209
00:13:17,664 --> 00:13:20,650
do I need to reset it? Let's see. I think this is going to fail.

210
00:13:20,730 --> 00:13:24,414
Let's see, let's see. It's live coding so we

211
00:13:24,612 --> 00:13:26,510
assume it can fail.

212
00:13:27,410 --> 00:13:31,054
So yeah how you read this is like

213
00:13:31,252 --> 00:13:35,822
in the beginning you look at a steady state movies recommended

214
00:13:35,966 --> 00:13:39,922
probe. We actually try it. It says

215
00:13:39,976 --> 00:13:43,458
it's not in a given tolerance, means it took longer than 1 second

216
00:13:43,544 --> 00:13:46,742
to answer. Then in the end we

217
00:13:46,796 --> 00:13:50,822
roll back. I haven't showed you that there is a rollback function

218
00:13:50,876 --> 00:13:54,022
which is actually like at the end of each

219
00:13:54,076 --> 00:13:57,458
run you do that, you disable chaos monkey.

220
00:13:57,634 --> 00:14:01,046
Yeah. So this one didn't actually even start the experiments because the steady started wasn't

221
00:14:01,078 --> 00:14:02,780
valid even. Exactly.

222
00:14:04,590 --> 00:14:07,866
Now it's disabled chaos monkey. So now it will run. Yeah. So we

223
00:14:07,888 --> 00:14:11,834
disabled chaos monkey. We don't have any attacks. So I suppose

224
00:14:11,882 --> 00:14:13,680
now the steady state works.

225
00:14:14,850 --> 00:14:18,302
And what do we have? Now it looks

226
00:14:18,356 --> 00:14:22,158
good. We have steady state. The steady state is met.

227
00:14:22,244 --> 00:14:26,002
So actually it can request a movie in less than a second.

228
00:14:26,136 --> 00:14:29,586
Then we enable the chaos monk, configure the text

229
00:14:29,688 --> 00:14:32,994
and the watchers. So we do that

230
00:14:33,032 --> 00:14:36,430
again. Steady state is not in a given tolerance

231
00:14:36,510 --> 00:14:40,286
because we now get exceptions. The repository means throwing exception

232
00:14:40,318 --> 00:14:43,686
because you can't connect to the database. Exactly. So we

233
00:14:43,708 --> 00:14:47,910
roll back everything. We disable Chaos monk. In the result of chaos toolkit

234
00:14:48,490 --> 00:14:52,346
steady started has deviated, a weakness have been discovered and we

235
00:14:52,368 --> 00:14:56,166
have a weakness in this case. Yes. We cannot recommend movies.

236
00:14:56,278 --> 00:15:00,246
We can show that in postman two. It's like now crashing

237
00:15:00,278 --> 00:15:04,106
with no, because you've disabled chaos. But it doesn't matter. It's not

238
00:15:04,128 --> 00:15:07,598
requesting movies. Correct. It's not delivering movies but we want two.

239
00:15:07,684 --> 00:15:10,746
We want to deliver movies all the time. Even when the database

240
00:15:10,778 --> 00:15:14,418
is down we can't get the movie which the user might be recommended to

241
00:15:14,424 --> 00:15:18,978
the user based on his viewing preferences. But we

242
00:15:18,984 --> 00:15:23,134
want to recommend him some kind of a movie that everybody likes.

243
00:15:23,262 --> 00:15:26,870
So your favorite movie probably. I know what it would be.

244
00:15:26,940 --> 00:15:28,550
Titanic. Titanic.

245
00:15:30,810 --> 00:15:34,310
So we prepared a little bit of fallback logic.

246
00:15:36,170 --> 00:15:38,070
It's on our master branch.

247
00:15:41,230 --> 00:15:44,362
So on our movie service,

248
00:15:44,496 --> 00:15:48,006
we have now Titanic as our fablest

249
00:15:48,038 --> 00:15:49,290
fault bank movie.

250
00:15:52,430 --> 00:15:56,234
So the get movie method, we just adjusted.

251
00:15:56,282 --> 00:15:59,918
So how does you read that? It's actually using a

252
00:16:00,004 --> 00:16:04,062
library called Waiver. It's part of a resilience

253
00:16:04,126 --> 00:16:07,966
library. Resilience for J. Basically it's

254
00:16:07,998 --> 00:16:12,238
just a simpler method of writing. Try catch

255
00:16:12,334 --> 00:16:15,974
exception just at one line. So what

256
00:16:16,012 --> 00:16:20,342
is this we call get recommend movie? And if there

257
00:16:20,396 --> 00:16:23,960
is any exception throw, we just return

258
00:16:24,490 --> 00:16:27,030
our fallback movie Titanic.

259
00:16:28,110 --> 00:16:31,674
All right, so I

260
00:16:31,712 --> 00:16:35,414
think we just still configured the attacks,

261
00:16:35,462 --> 00:16:40,074
right? So we can. We can run the show

262
00:16:40,112 --> 00:16:43,854
it in postman first. Oh, let's see,

263
00:16:44,052 --> 00:16:47,518
let's see. You have to restart the app first.

264
00:16:47,684 --> 00:16:51,246
I did restart it, but it's still. You would need to reconfigure the

265
00:16:51,268 --> 00:16:54,606
attack. Yeah, true. So let's run the

266
00:16:54,628 --> 00:16:56,160
experiment. That's right away.

267
00:16:57,590 --> 00:16:59,780
So let's run it again.

268
00:17:03,030 --> 00:17:06,334
So now we see steady

269
00:17:06,382 --> 00:17:11,222
state is met. We enable chaos mong. We configured ourselves again.

270
00:17:11,276 --> 00:17:14,758
The repository watches, and it's still going.

271
00:17:14,844 --> 00:17:18,834
So we now return Titanic, and it's a movie

272
00:17:18,882 --> 00:17:22,434
recommendation somehow, at least. And we disable

273
00:17:22,482 --> 00:17:26,310
chaos monk again. And now we have an experiment completed.

274
00:17:26,470 --> 00:17:30,374
Cool. So if you want to run that more frequently,

275
00:17:30,422 --> 00:17:33,500
if you want to run that inside of a script or build chain or something,

276
00:17:34,430 --> 00:17:37,854
that chaos toolkit won't give you sort of like a zero or

277
00:17:37,892 --> 00:17:41,806
one kind of response, like a return code. But you

278
00:17:41,828 --> 00:17:45,278
can grep for certain text. At least that's what I got to.

279
00:17:45,444 --> 00:17:49,186
You can grep for text, which will tell you, because it prints certain text if

280
00:17:49,208 --> 00:17:52,306
your experiment fails or doesn't or passes. And you chain

281
00:17:52,328 --> 00:17:55,234
grep for that. And Grep will give you a response code to tell you whether

282
00:17:55,272 --> 00:17:58,626
that worked. Unless there's been an update from Russ's

283
00:17:58,658 --> 00:18:02,646
side. Not yet. So we

284
00:18:02,668 --> 00:18:05,800
talked boot before. Yeah. So that's one way you can do that.

285
00:18:06,170 --> 00:18:09,126
Yeah. So is that the end of what we wanted to demo? Yeah,

286
00:18:09,148 --> 00:18:11,980
I think so, as far as I know.

287
00:18:12,430 --> 00:18:15,386
Okay, so we've got a few slides that we want to share with you as

288
00:18:15,408 --> 00:18:18,758
well about basically where the project chaos chaos.

289
00:18:18,774 --> 00:18:23,070
Chaos chaos Monkey for spring boot. Find our demo

290
00:18:23,140 --> 00:18:26,558
case in this GitHub URL. Is this thing plugged in?

291
00:18:26,644 --> 00:18:28,880
Yeah, it's supposed to work.

292
00:18:29,730 --> 00:18:33,678
No, not anymore. Well, we can use the. I can.

293
00:18:33,764 --> 00:18:36,960
Hold on. Yeah, you can use them. That's fine.

294
00:18:37,430 --> 00:18:41,986
I know why there's this on off switch on the side you

295
00:18:42,008 --> 00:18:46,454
chain. Put it to on. Okay, here we go. So a bit of history this

296
00:18:46,572 --> 00:18:50,946
project was started by a colleague of ours called Benjamin Wilms.

297
00:18:51,058 --> 00:18:54,760
And he was, a few years ago, he was building

298
00:18:55,610 --> 00:18:59,206
fallbacks and things. He was building like circuit breakers and

299
00:18:59,228 --> 00:19:02,770
other resilience patterns into his applications, but he wanted to

300
00:19:02,780 --> 00:19:06,326
test whether that stuff actually works. I've been, by the way, in various places

301
00:19:06,358 --> 00:19:09,322
where they're building this stuff, and nobody ever tested whether any of these things actually

302
00:19:09,376 --> 00:19:12,506
worked. So maybe you've experienced that too. Well, Benjamin wanted

303
00:19:12,528 --> 00:19:15,402
to know whether the stuff he was building actually worked, and he had no easy

304
00:19:15,456 --> 00:19:18,174
way to do it. And he found out there are a few tools out there

305
00:19:18,212 --> 00:19:21,838
which he had to install, and it was the various complications in using them.

306
00:19:21,924 --> 00:19:24,858
So he said, well, why don't I just write something for spring boot? And so

307
00:19:24,884 --> 00:19:28,194
that's why he started this application. And with the help

308
00:19:28,232 --> 00:19:31,582
of this plugin, he was able to test his resilience patterns.

309
00:19:31,646 --> 00:19:34,850
He didn't need to install anything on the servers.

310
00:19:36,550 --> 00:19:40,270
That's one of the things which is great about using this plugin. And we

311
00:19:40,280 --> 00:19:43,286
didn't need any permissions from anyone. He could just get up and get running with

312
00:19:43,308 --> 00:19:47,142
that. So it was successful for him. He actually

313
00:19:47,196 --> 00:19:50,426
has now gone on two start to work on

314
00:19:50,448 --> 00:19:53,866
a startup. So our company, Codecentric said to him,

315
00:19:53,968 --> 00:19:57,754
management said to him, why don't you go and start a startup about

316
00:19:57,792 --> 00:20:01,226
chaos engineering? So that's what he did. That's kind of cool when management says

317
00:20:01,248 --> 00:20:04,430
that to you and sends you off. And so he

318
00:20:04,500 --> 00:20:07,758
actually passed it on to us. The project said, can someone else maintain it?

319
00:20:07,764 --> 00:20:11,086
So there's a few of us from codecentric Ag that are maintaining the

320
00:20:11,108 --> 00:20:14,554
project. And we're pretty responsive

321
00:20:14,602 --> 00:20:17,774
to issues and basically we're pretty active

322
00:20:17,822 --> 00:20:21,214
there. Yeah, that's our little advertising. Please get involved

323
00:20:21,262 --> 00:20:24,354
if you want. If you're interested in chaos engineering, don't know where to get started.

324
00:20:24,472 --> 00:20:27,638
Well, one thing you could do is have a look at our project and

325
00:20:27,644 --> 00:20:31,350
maybe commit something. As said, there's a few of us involved and

326
00:20:31,500 --> 00:20:35,030
we're pretty active, so any helps. Appreciate it.

327
00:20:35,100 --> 00:20:38,594
Yeah. All right. Talking about recent changes,

328
00:20:38,652 --> 00:20:42,394
we made chaos, chaos, chaos, chaos, chaos monkey for

329
00:20:42,432 --> 00:20:47,686
spring Boot release. And we got a new feature. So we want to introduce

330
00:20:47,798 --> 00:20:52,262
a couple. So we have two different types

331
00:20:52,326 --> 00:20:55,694
of assaults. One is

332
00:20:55,732 --> 00:20:59,614
like the request assaults we just saw. On every request we

333
00:20:59,652 --> 00:21:03,790
do something like latency or other stuff like

334
00:21:03,860 --> 00:21:07,838
exception. And we also have like runtime assaults,

335
00:21:07,934 --> 00:21:11,378
which means, for example, with this config, you see,

336
00:21:11,464 --> 00:21:14,958
you can kill our application every hour.

337
00:21:15,064 --> 00:21:18,386
So that's

338
00:21:18,418 --> 00:21:21,830
the config and our new feature was like

339
00:21:21,980 --> 00:21:25,586
having cron expressions to schedule attacks.

340
00:21:25,698 --> 00:21:29,094
It's like the original Chaos monkey

341
00:21:29,142 --> 00:21:32,922
bit, which from Netflix we just turned down

342
00:21:32,976 --> 00:21:35,050
your application at some random.

343
00:21:35,390 --> 00:21:39,066
Yeah, it's like that because it doesn't really make sense to have this kind of

344
00:21:39,088 --> 00:21:42,378
assault based on incoming requests,

345
00:21:42,394 --> 00:21:45,502
but rather based on a timing and the next one as well wouldn't be good.

346
00:21:45,556 --> 00:21:51,034
On each request, you kill your app memory

347
00:21:51,082 --> 00:21:55,374
assault, which here we consume

348
00:21:55,422 --> 00:21:59,170
memory to a certain amount you configured. So, for example,

349
00:21:59,240 --> 00:22:02,862
with this coding, we fill 5% of memory

350
00:22:02,926 --> 00:22:06,946
every second until we reach 95% of memory

351
00:22:07,058 --> 00:22:10,694
and hold it for like 40 seconds. You can

352
00:22:10,732 --> 00:22:14,594
test things like out of memory exception. How does your application behave

353
00:22:14,642 --> 00:22:18,438
with that? This assault is a little bit flaky because

354
00:22:18,524 --> 00:22:22,042
different jvms and different versions of Java and things

355
00:22:22,096 --> 00:22:25,738
act differently with garbage collecting and stuff. So we had some pain with it.

356
00:22:25,824 --> 00:22:29,482
So definitely play around with it. But just be warned, it doesn't always work

357
00:22:29,536 --> 00:22:31,980
perfectly. Quite hard.

358
00:22:35,250 --> 00:22:38,814
Boot the roadmap. Yeah. So what's upcoming? Well, one of the things which,

359
00:22:38,852 --> 00:22:40,960
I mean, we showed you a few demos. Now,

360
00:22:41,810 --> 00:22:45,026
to keep it simple, we just kept it all inside one application. But obviously one

361
00:22:45,048 --> 00:22:48,706
of the main things you're interested in is applications talking to each

362
00:22:48,728 --> 00:22:52,850
other over the network. And often maybe you'll be attacking

363
00:22:53,350 --> 00:22:56,146
a system which is a back end for a client and you want to see

364
00:22:56,168 --> 00:22:59,526
how that client reacts or something. Well, in this case we

365
00:22:59,548 --> 00:23:02,694
thought about outgoing HTTP calls. Now, in spring you

366
00:23:02,732 --> 00:23:06,374
use rest template or web client. They're the two classes that

367
00:23:06,412 --> 00:23:09,542
spring gives you to make HTTP calls going out. So we want to attack

368
00:23:09,596 --> 00:23:13,546
those calls going out over the network and introduce latency or problems and

369
00:23:13,568 --> 00:23:17,046
things onto those calls. And the other thing is reactive.

370
00:23:17,078 --> 00:23:21,002
I've done a bit of work with reactive applications in spring boot, and so

371
00:23:21,136 --> 00:23:24,878
I think some of the things we're doing there will work directly with reactive as

372
00:23:24,884 --> 00:23:28,206
well. Makes sense, but it's a couple of things which we need to rethink how

373
00:23:28,228 --> 00:23:31,898
we're doing that for what makes sense if you're doing chaos engineering

374
00:23:31,994 --> 00:23:35,298
with reactive applications. So that's also what's coming up

375
00:23:35,384 --> 00:23:36,020
soon.

376
00:23:38,390 --> 00:23:41,678
Yeah. So now that was chaos, chaos,

377
00:23:41,694 --> 00:23:45,154
chaos monkey for spring boot. Think that it's a great way

378
00:23:45,192 --> 00:23:49,566
to get started, because if you're wondering if you're using spring

379
00:23:49,678 --> 00:23:52,966
and you want to get started with chaos engineering, you don't need to install any

380
00:23:52,988 --> 00:23:56,646
tools, so you don't need any special permissions. You can just get

381
00:23:56,668 --> 00:23:59,286
up and running in a few minutes like we just showed you. This is a

382
00:23:59,308 --> 00:24:03,174
fantastic way. Two, get running to get started with chaos engineering.

383
00:24:03,222 --> 00:24:06,890
Yeah, even the dependency step is just optional. You can even

384
00:24:06,960 --> 00:24:10,890
include it in just like comment line. If you put Java minus char,

385
00:24:10,960 --> 00:24:14,126
you can put it on a class loader. So you don't need to

386
00:24:14,148 --> 00:24:17,834
even have this chaos monkey dependency in your production

387
00:24:17,882 --> 00:24:22,126
environment in your palm. Yeah, so those

388
00:24:22,148 --> 00:24:25,578
are some of the advantages. Chaos, chaos. Chaos monkey for spring

389
00:24:25,594 --> 00:24:29,038
boot. Obviously, if you're not using Java, or if

390
00:24:29,124 --> 00:24:31,986
there might be other reasons where you're going to need some other tools. So we

391
00:24:32,008 --> 00:24:35,380
thought we'd just point out a few other things that are out there.

392
00:24:37,110 --> 00:24:40,642
Traffic control. You want to do some low level Linux kernel

393
00:24:40,706 --> 00:24:44,738
stuff, you can use traffic control. Look at that crazy thing. We showed

394
00:24:44,754 --> 00:24:47,802
you how the nice way to introduce latency with our

395
00:24:47,856 --> 00:24:51,754
application, but this is at an infrastructure level.

396
00:24:51,952 --> 00:24:55,782
This crazy command here is going to introduce latency

397
00:24:55,926 --> 00:24:59,622
on the ethernet e zero interface,

398
00:24:59,686 --> 00:25:03,214
basically. So, yeah, maybe here a letter off will

399
00:25:03,252 --> 00:25:05,680
take some problems too with it.

400
00:25:06,210 --> 00:25:09,982
All right, we have another tool which is called

401
00:25:10,036 --> 00:25:12,960
stress cpu. It's also a common line tool.

402
00:25:13,670 --> 00:25:16,094
It's in most Linux distributions,

403
00:25:16,142 --> 00:25:19,620
included here again, we have like

404
00:25:20,710 --> 00:25:24,322
producing a high cpu load. It's quite

405
00:25:24,376 --> 00:25:27,714
a pain to get the hang of it, of all

406
00:25:27,752 --> 00:25:31,254
these options. So here we like for 10

407
00:25:31,292 --> 00:25:36,054
seconds, I think on two cpus we introduce 128

408
00:25:36,092 --> 00:25:37,510
megabytes load.

409
00:25:39,630 --> 00:25:42,970
Another more cooler tool is

410
00:25:43,040 --> 00:25:47,014
Pumbaa. Pumba attacks docker

411
00:25:47,062 --> 00:25:51,274
containers mostly. It has these commands

412
00:25:51,322 --> 00:25:54,766
available. So you can make the same like

413
00:25:54,948 --> 00:25:58,622
emulate network delays, you can

414
00:25:58,676 --> 00:26:02,750
pause maintainers, you can stop and kill them and even remove.

415
00:26:04,130 --> 00:26:07,566
Yeah, for comparison, there's the latency thing

416
00:26:07,588 --> 00:26:11,582
again, but with Pumba. So introducing latency onto connections

417
00:26:11,726 --> 00:26:15,370
for that particular docker. You can even install it on kubernetes,

418
00:26:15,470 --> 00:26:20,002
as demon said. So you have Pumbaa available on your whole cluster,

419
00:26:20,146 --> 00:26:24,040
if that's what you want. It's kind of dangerous sometimes.

420
00:26:25,930 --> 00:26:29,010
Then it's kind of cool. If you look out there for chaos engineering tools.

421
00:26:29,090 --> 00:26:32,042
There's some crazy stuff out there. Like a lot of people have just sort of

422
00:26:32,096 --> 00:26:35,434
mucked around a bit and started some hobby project. And it

423
00:26:35,472 --> 00:26:38,986
sort of half works or doesn't work. There's better stuff and not so

424
00:26:39,008 --> 00:26:42,442
good stuff. There are not so a lot of tools in general in chaos

425
00:26:42,506 --> 00:26:45,630
engineering, but my personal favorite,

426
00:26:47,170 --> 00:26:50,714
cube invaders. So it's kind of playing

427
00:26:50,762 --> 00:26:54,366
space invaders on. You connected space invaders

428
00:26:54,398 --> 00:26:58,382
on your kubernetes platform. And the aliens represent pods,

429
00:26:58,526 --> 00:27:01,826
which are containers. So as your

430
00:27:01,848 --> 00:27:05,954
spaceship, as you kill the aliens, your Kubernetes

431
00:27:06,082 --> 00:27:09,906
pods will get killed. So don't

432
00:27:09,938 --> 00:27:11,960
do it in production, I guess.

433
00:27:13,530 --> 00:27:17,990
Yeah. And then Netflix was

434
00:27:18,140 --> 00:27:22,380
the one that kicked this stuff off. And then

435
00:27:22,830 --> 00:27:26,202
all the kind of big cloud people like Amazon and everyone there, they're all

436
00:27:26,256 --> 00:27:29,962
doing chaos engineering. Well, there's another big cloud

437
00:27:30,016 --> 00:27:33,418
provider called Alibaba, and these guys are

438
00:27:33,424 --> 00:27:37,146
doing chaos engineering, too. So recently they published Chaos Blade.

439
00:27:37,178 --> 00:27:41,038
We haven't investigated or we just found out about it just recently, and I

440
00:27:41,044 --> 00:27:45,058
don't even know if you want to use it. It looks pretty good from what

441
00:27:45,064 --> 00:27:48,770
it says in the documentation. Yeah, it has like, different things.

442
00:27:48,840 --> 00:27:52,414
It can even attack c plus plus application, it can attack Java

443
00:27:52,462 --> 00:27:56,374
applications. It can attack Docker like the

444
00:27:56,412 --> 00:28:00,040
Pumba thing, and it even can attack some cloud stuff.

445
00:28:00,490 --> 00:28:03,590
Sadly, we're not so fluent in Chinese,

446
00:28:05,450 --> 00:28:09,186
to be honest. The documentation is mostly in English, so we just picked

447
00:28:09,218 --> 00:28:12,378
it up. I like this diagram. See these things here?

448
00:28:12,544 --> 00:28:16,006
Either it says it works with this, or it says, installs.

449
00:28:16,038 --> 00:28:18,300
Bitcoin miner, we're not sure which.

450
00:28:20,990 --> 00:28:24,666
Yeah, there we go. We've got someone that speaks

451
00:28:24,698 --> 00:28:27,120
Mandarin. Excellent. So there you go.

452
00:28:27,490 --> 00:28:30,654
Allegedly, we don't know whether it works at all. We never tried

453
00:28:30,692 --> 00:28:33,726
it, but that could be at least from videos and

454
00:28:33,748 --> 00:28:36,978
screenshots, it looks quite well, to be honest.

455
00:28:37,064 --> 00:28:39,700
Yeah, we don't know. We need to try soon.

456
00:28:40,550 --> 00:28:43,650
Then you can do chaos as a service. Okay. We had,

457
00:28:43,720 --> 00:28:47,442
Russ just mentioned his chaos

458
00:28:47,506 --> 00:28:50,918
IQ stuff. So they

459
00:28:50,924 --> 00:28:53,986
were talking about platforms that will give you. So you don't have to muck

460
00:28:54,018 --> 00:28:56,850
around with that, like tc minus minus,

461
00:28:56,930 --> 00:29:00,546
network minus, root minus, I don't know what else. And getting your things

462
00:29:00,588 --> 00:29:04,662
wrong and getting one thing wrong and destroying your entire production cluster

463
00:29:04,726 --> 00:29:08,058
or whatever it is. Okay. We're talking about platforms which help you via kind of

464
00:29:08,064 --> 00:29:11,230
a web interface, two schedule.

465
00:29:12,690 --> 00:29:16,638
You need to have knowledge over a lot of different tools, how you

466
00:29:16,724 --> 00:29:20,298
call them, how you use them. So sometimes it's

467
00:29:20,394 --> 00:29:23,966
easier to do because in the end, you're not trying to become an expert on

468
00:29:23,988 --> 00:29:27,838
low level tools. You're trying to actually create resilient systems.

469
00:29:27,934 --> 00:29:31,790
So you can talk to Russ about his platform. There's chaos mesh,

470
00:29:31,870 --> 00:29:35,166
which is the startup we just mentioned from our former colleague

471
00:29:35,198 --> 00:29:38,894
that he's just kicked off. I mean, that's literally, the website went up properly

472
00:29:39,022 --> 00:29:42,710
a few weeks ago, but he's already got a couple of people

473
00:29:42,780 --> 00:29:46,534
on the platform, and that gives you a

474
00:29:46,572 --> 00:29:49,814
screenshot. There's a couple of screenshots on his website, can show point and click

475
00:29:49,852 --> 00:29:53,226
a few things. And that's what I want to do. Go see

476
00:29:53,248 --> 00:29:56,506
the history of what I've run before and everything else you can integrate it into

477
00:29:56,528 --> 00:30:00,166
your build chain. Like there's a hook that your build chain

478
00:30:00,198 --> 00:30:03,582
will trigger stuff on the software platform, on the platform.

479
00:30:03,716 --> 00:30:07,294
So that's all out there, too. Pretty cool stuff. Yeah, it's cool.

480
00:30:07,332 --> 00:30:11,134
So you don't need to know how stress cpu command is.

481
00:30:11,172 --> 00:30:14,606
Stress memory. You just can click it on your platform and

482
00:30:14,628 --> 00:30:18,734
does it for you. That's it? That's it.

483
00:30:18,932 --> 00:30:20,320
Thanks for watching.

