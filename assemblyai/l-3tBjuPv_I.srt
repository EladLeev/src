1
00:00:41,010 --> 00:00:44,530
Hello everyone, welcome to this 42 cloud native

2
00:00:44,690 --> 00:00:48,514
conference talk. My name is Arapulid, I'm a technical evangelist at Datadog,

3
00:00:48,562 --> 00:00:52,506
and today I'll be introducing using a project called Gatekeeper

4
00:00:52,618 --> 00:00:56,622
and how you can use it to embrace policy as code in

5
00:00:56,676 --> 00:01:00,074
kubernetes. So that's my twitter handler.

6
00:01:00,122 --> 00:01:03,274
In case you want to reach out after the conference,

7
00:01:03,322 --> 00:01:06,926
feel free to do so. Let's get started by introducing

8
00:01:06,958 --> 00:01:10,066
kubernetes. Obviously this is a cloud native conference, so many of you

9
00:01:10,088 --> 00:01:14,242
will know, just in case. Kubernetes is a container orchestration platform

10
00:01:14,376 --> 00:01:18,294
that helps you run containerized applications in production. And it comes with

11
00:01:18,332 --> 00:01:22,354
a lot of nice features like it's completely API driven,

12
00:01:22,482 --> 00:01:25,618
auto healing, auto scaling, et cetera, et cetera.

13
00:01:25,714 --> 00:01:29,126
And datadog. Obviously this is not a talk about data itself, but just

14
00:01:29,148 --> 00:01:32,934
so you know, it's a monitoring and analytics platform that helps companies improve

15
00:01:32,982 --> 00:01:36,790
observability of their infrastructure and applications.

16
00:01:36,870 --> 00:01:40,314
But today we are going to be talking about sometimes a little bit of

17
00:01:40,352 --> 00:01:43,966
a youll topic, which is policy. But what is policy when we are

18
00:01:43,988 --> 00:01:48,026
talking about services services. So basically policies

19
00:01:48,138 --> 00:01:51,886
are the rules that governs the behavior for services service.

20
00:01:51,988 --> 00:01:55,774
So basically what you can and cannot do with

21
00:01:55,812 --> 00:01:59,326
a software service. So in the case of kubernetes, what you can and cannot

22
00:01:59,358 --> 00:02:02,786
do in your cluster. So that sounds a lot when

23
00:02:02,808 --> 00:02:06,598
we are talking about kubernetes and what you can and cannot do, it sounds a

24
00:02:06,604 --> 00:02:10,310
lot like RBAC. So RBAC stands for role based access

25
00:02:10,380 --> 00:02:13,634
control, and that's basically what RBAC

26
00:02:13,682 --> 00:02:17,122
is already doing. So it helps you define

27
00:02:17,186 --> 00:02:21,094
roles of what a user or a service account can and cannot do

28
00:02:21,212 --> 00:02:24,534
in Kubernetes cluster. So usually you

29
00:02:24,572 --> 00:02:28,166
have rules in the form of a subject, a Kubernetes API

30
00:02:28,198 --> 00:02:31,934
resource, and a verb. So you can do things like for example my

31
00:02:31,972 --> 00:02:35,914
user ara, for the type of resources pods

32
00:02:36,042 --> 00:02:39,566
she can create, get and watch those resources in a

33
00:02:39,588 --> 00:02:43,534
particular namespace, we can say, so if we already have this,

34
00:02:43,652 --> 00:02:46,946
why we need something else, like gatekeeper. And the reason why

35
00:02:46,968 --> 00:02:50,670
we need something else is because auth, which is what RBAC

36
00:02:50,750 --> 00:02:54,546
tries to solve, is just a subset of the type of policy rules that

37
00:02:54,568 --> 00:02:58,294
you want to create for your environment. To put a couple

38
00:02:58,332 --> 00:03:02,086
of examples of things that you may want to enforce in

39
00:03:02,108 --> 00:03:05,494
your cluster, things like only run images coming from

40
00:03:05,532 --> 00:03:09,334
a particular registry or having a set of labels that are

41
00:03:09,372 --> 00:03:13,034
mandatory for all your deployments and your pods. These type of things are

42
00:03:13,072 --> 00:03:16,794
things that you may want to define somehow, and our

43
00:03:16,832 --> 00:03:20,026
back doesn't allow you to do so. So when

44
00:03:20,128 --> 00:03:23,322
we have our environments, our cloud native environments.

45
00:03:23,386 --> 00:03:27,502
In this case we are using Kubernetes as an orchestrator probably.

46
00:03:27,636 --> 00:03:31,034
We also have so many other things in our stack.

47
00:03:31,082 --> 00:03:34,606
We may have cloud resources, we may have API gateways, we may

48
00:03:34,628 --> 00:03:38,062
have service meshes, stateful applications,

49
00:03:38,126 --> 00:03:42,322
et cetera. So not only you want to create policies for

50
00:03:42,376 --> 00:03:46,370
your kubernetes cluster, but also for all the rest of your cloud native

51
00:03:46,450 --> 00:03:50,086
resources. So is there a way that we can do that in

52
00:03:50,108 --> 00:03:53,702
a very common way? And that is exactly what

53
00:03:53,836 --> 00:03:57,470
OPA, or open policies agent tries to solve.

54
00:03:57,570 --> 00:04:00,586
So basically OPA is a cloud native project,

55
00:04:00,688 --> 00:04:04,202
it's completely open source. And the idea of

56
00:04:04,256 --> 00:04:08,538
OPA is that you are going to decouple the

57
00:04:08,624 --> 00:04:12,050
policy decision making from policy enforcement.

58
00:04:12,230 --> 00:04:15,406
How does that work? So the idea is that OPA is

59
00:04:15,428 --> 00:04:19,022
only going to get a policy query in JSON format. So very

60
00:04:19,076 --> 00:04:22,654
standard, very domain agnostic, and based on some

61
00:04:22,692 --> 00:04:25,982
rules that you have coded in a specific domain language

62
00:04:26,046 --> 00:04:29,966
called Rigo and some data that you may or may have stored

63
00:04:29,998 --> 00:04:33,506
as well, it's going to compute basically

64
00:04:33,688 --> 00:04:37,366
a policy decision in JSON format. And that's the only thing

65
00:04:37,388 --> 00:04:41,270
that OPA is going to do. And that's how it tries to completely

66
00:04:41,340 --> 00:04:45,046
decouple that from any particular enforcement for a

67
00:04:45,068 --> 00:04:49,490
service. So now you have a decision, but how do youll enforce that decision

68
00:04:49,570 --> 00:04:53,210
into your service? So the way you do that with OPA is by using

69
00:04:53,280 --> 00:04:57,402
any of the integration it has. So if you go to the OPA website,

70
00:04:57,536 --> 00:05:00,714
these is a full list of all the integration. This is just

71
00:05:00,752 --> 00:05:04,586
a screenshot. So there are many more. And because it's JSON,

72
00:05:04,698 --> 00:05:08,574
it's very easy to create new integrations. There are more

73
00:05:08,612 --> 00:05:12,598
and more coming all the time. And this is exactly what gatekeeper

74
00:05:12,634 --> 00:05:16,370
is. Gatekeeper is one of these operations that

75
00:05:16,520 --> 00:05:20,174
enforce OPA decisions for Kubernetes.

76
00:05:20,302 --> 00:05:24,398
So the way gatekeeper is built is basically embeds

77
00:05:24,494 --> 00:05:27,954
OPA inside gatekeeper itself as a binary.

78
00:05:28,082 --> 00:05:31,878
And the way it enforce that is by using

79
00:05:31,964 --> 00:05:36,006
something called admission controller. So when you create an

80
00:05:36,028 --> 00:05:39,882
API request against the Kubernetes API server, it goes through

81
00:05:39,936 --> 00:05:43,242
several steps, it goes through authentication. So is this

82
00:05:43,296 --> 00:05:46,598
authenticated or not? Then it goes through authorization,

83
00:05:46,774 --> 00:05:50,186
usually in the form of RBAC rules. And then it goes to

84
00:05:50,208 --> 00:05:53,886
a third step called admission controllers. And admission controllers are a

85
00:05:53,908 --> 00:05:58,026
set of binaries that are already embedded in the Kubernetes API server

86
00:05:58,138 --> 00:06:01,774
that basically compute the request and

87
00:06:01,812 --> 00:06:05,646
decide whether two things, whether that's valid request

88
00:06:05,758 --> 00:06:09,874
and also whether you want to mutate that request. And there are two

89
00:06:09,992 --> 00:06:13,070
specific ones, particular ones that are very helpful,

90
00:06:13,150 --> 00:06:17,458
which are validating admission webhook and mutating admission webhook.

91
00:06:17,554 --> 00:06:21,746
On those two, basically you can hook any code through webhooks,

92
00:06:21,858 --> 00:06:24,962
any come to act as an admission controller.

93
00:06:25,026 --> 00:06:30,026
And this is exactly what Gatekeeper is doing. So it

94
00:06:30,048 --> 00:06:33,050
hooks through the validating admission webhook for now.

95
00:06:33,120 --> 00:06:36,486
They are also working on doing so as well with teaching.

96
00:06:36,518 --> 00:06:40,470
One, two, once you have the policy decision

97
00:06:40,550 --> 00:06:44,046
from OPA, it basically enforces it at that point.

98
00:06:44,148 --> 00:06:48,046
So if these request that you're doing is against one

99
00:06:48,068 --> 00:06:51,290
of the rules that you have encoded using Rego,

100
00:06:51,370 --> 00:06:55,714
then it's going to block that API request at that .1

101
00:06:55,752 --> 00:06:59,266
of the great things also about Gatekeeper is that it was

102
00:06:59,368 --> 00:07:02,574
created having kubernetes in mind. So it's

103
00:07:02,622 --> 00:07:06,054
fully Kubernetes native. And by kubernetes native I mean

104
00:07:06,172 --> 00:07:09,430
that everything is created through

105
00:07:09,500 --> 00:07:13,206
new CRD objects. So custom resolve definitions and

106
00:07:13,228 --> 00:07:16,934
custom resolve definition is a design pattern that is used

107
00:07:17,052 --> 00:07:20,214
all over Kubernetes to extend the Kubernetes API.

108
00:07:20,262 --> 00:07:24,186
So you can create new objects in the Kubernetes API and

109
00:07:24,208 --> 00:07:28,214
then have a controller that does the classic reconciliation loop

110
00:07:28,262 --> 00:07:31,770
in Kubernetes that we all love. So you're able to create your policy

111
00:07:31,840 --> 00:07:35,530
by creating new Kubernetes objects and the gatekeeper controller

112
00:07:35,610 --> 00:07:38,926
is going to do the actions required for

113
00:07:38,948 --> 00:07:42,382
that to happen. There are many crds, well, I think there are three,

114
00:07:42,436 --> 00:07:46,466
four crds that are created, but the main two ones are these two

115
00:07:46,568 --> 00:07:50,574
which are constraint template and constraint. And constraint template

116
00:07:50,622 --> 00:07:54,126
is where youll define your policy. But the good thing about constraint

117
00:07:54,158 --> 00:07:57,846
template is that you can create parameters for those. So you

118
00:07:57,868 --> 00:08:01,810
can create reusable policy by just creating

119
00:08:01,890 --> 00:08:05,190
a constraint template and then instantiate that policies

120
00:08:05,340 --> 00:08:08,454
into as many constraints as you want. And we are going

121
00:08:08,492 --> 00:08:12,106
to see how that's done in the demo. But just to put an

122
00:08:12,128 --> 00:08:15,594
example. So let's imagine that we want to have a rule to ask

123
00:08:15,632 --> 00:08:18,438
for a required set of labels in our objects.

124
00:08:18,534 --> 00:08:22,342
So you have a name, required labels,

125
00:08:22,486 --> 00:08:25,646
you have the parameters here, like the labels that you're going to

126
00:08:25,668 --> 00:08:29,086
require for a particular object and then a set of rigor. And we

127
00:08:29,108 --> 00:08:32,926
are not going to go into much detail on the rigor

128
00:08:32,958 --> 00:08:36,850
six syntax in this talk, because the goal of this talk

129
00:08:36,920 --> 00:08:41,006
is for you to see the opportunity for gatekeeper

130
00:08:41,038 --> 00:08:44,498
to be used straight away, even if you

131
00:08:44,584 --> 00:08:48,226
don't know Rigo. To start with, once we have that template,

132
00:08:48,258 --> 00:08:51,574
we can instantiate that template into as many rules as we

133
00:08:51,612 --> 00:08:54,850
want. In this case, we have all namespaces require

134
00:08:54,930 --> 00:08:58,390
the gatekeeper label. But we also have another rule that says

135
00:08:58,460 --> 00:09:01,514
all ports in the default namespace require the

136
00:09:01,552 --> 00:09:05,302
do not delete label. So as you can see, just by creating

137
00:09:05,366 --> 00:09:08,794
once the rigor code, you can reuse that policy many

138
00:09:08,832 --> 00:09:12,538
many times. So that makes gatekeeper reuse

139
00:09:12,554 --> 00:09:16,206
of policies super simple. And the good thing is that usually

140
00:09:16,308 --> 00:09:20,026
when youll want to start creating policy in your kubernetes cluster,

141
00:09:20,138 --> 00:09:23,850
you may probably want to create the same set of rules

142
00:09:23,930 --> 00:09:27,586
that many other people are going to create as well. Things like

143
00:09:27,688 --> 00:09:31,106
images can only come from approved registries. That's a classic one.

144
00:09:31,208 --> 00:09:35,054
Deployments require a set of labels. Container images require

145
00:09:35,102 --> 00:09:38,734
a digest. All the containers that you have defined

146
00:09:38,782 --> 00:09:42,694
have to have a cpu and memory limits set. These are very common things

147
00:09:42,732 --> 00:09:45,926
that you want to do in kubernetes. Obviously the values is the thing that

148
00:09:45,948 --> 00:09:49,846
are going to be different from company to another, but the generic rules

149
00:09:49,878 --> 00:09:53,846
are very similar. So for that reason there is an open source

150
00:09:53,878 --> 00:09:58,022
project, part of the OPA organization called the Gatekeeper Library.

151
00:09:58,086 --> 00:10:02,602
So the community is creating all these reusable policies

152
00:10:02,746 --> 00:10:06,046
that you can use out of the box, even if you

153
00:10:06,068 --> 00:10:09,086
don't understand Rigo. So you can start

154
00:10:09,188 --> 00:10:12,890
getting value out of gatekeeper very very easily.

155
00:10:13,050 --> 00:10:16,866
So there are many constraint templates and more that

156
00:10:16,888 --> 00:10:20,750
are coming every day. To put an example of what you would encounter

157
00:10:20,830 --> 00:10:24,094
in that repo. This is an example of one of the templates.

158
00:10:24,222 --> 00:10:28,146
It's about having only HTTPs increases

159
00:10:28,178 --> 00:10:31,766
and not HTTP. So you have that template and

160
00:10:31,788 --> 00:10:35,622
you have these rigo code. You can try to understand rigo code.

161
00:10:35,756 --> 00:10:38,786
You can use this to start learning Rigo.

162
00:10:38,818 --> 00:10:42,074
But even if you don't, it's super simple to use because it

163
00:10:42,112 --> 00:10:46,042
has a description, it has a name, it has parameters or not.

164
00:10:46,176 --> 00:10:49,866
And then on that same repo you're going to get not only the

165
00:10:49,888 --> 00:10:53,354
template, you're going to get an example or several

166
00:10:53,402 --> 00:10:56,906
examples, and the examples come in the form of an instantiation

167
00:10:56,938 --> 00:11:00,954
of that template. So a constraint, and also based on that constraint,

168
00:11:01,082 --> 00:11:04,746
an object in this case can ingress object that is going to

169
00:11:04,788 --> 00:11:08,546
fail that validation. So very easily you can see all

170
00:11:08,568 --> 00:11:12,386
these examples on that Ripper and understand first what the

171
00:11:12,408 --> 00:11:16,434
template is going to use and what type of objects may fail that

172
00:11:16,472 --> 00:11:19,806
one. So this is the GitHub repo for the gatekeeper

173
00:11:19,838 --> 00:11:23,554
library. It's part of these, as I said, part of the opA.org CnCF

174
00:11:23,602 --> 00:11:27,270
project, completely open source, so easy to use. And another

175
00:11:27,340 --> 00:11:30,954
good thing about gatekeeper that I like a lot is that it

176
00:11:30,992 --> 00:11:34,586
comes with out of the box observability. So it comes with a

177
00:11:34,608 --> 00:11:37,862
lot of metrics like constraint templates and constraints,

178
00:11:37,926 --> 00:11:41,014
number, the number of requests and the latency of those requests,

179
00:11:41,062 --> 00:11:45,054
the number of violations, et cetera. We also at Datadog has

180
00:11:45,092 --> 00:11:49,022
an out of these box integration. So if you're using Datadoc as well,

181
00:11:49,156 --> 00:11:52,478
just without having to do much, you will get this out

182
00:11:52,484 --> 00:11:55,826
of the box dashboard to start with. So you will get all

183
00:11:55,848 --> 00:11:59,362
your metrics back into Datadog and we will see that as well

184
00:11:59,416 --> 00:12:02,740
during the demo. Good, so let's start by,

185
00:12:03,270 --> 00:12:06,420
with the demo. So this is,

186
00:12:06,870 --> 00:12:10,882
by the way, I have an alias to k, it's kubectl.

187
00:12:10,946 --> 00:12:14,374
So every time I type k, that is what

188
00:12:14,412 --> 00:12:17,590
it is. This is a one single node. It's very simple,

189
00:12:17,660 --> 00:12:20,858
it's mini cube. It's good for these demo.

190
00:12:21,024 --> 00:12:24,554
And I'm running Datadog already here.

191
00:12:24,592 --> 00:12:28,346
So I'm already running Datadog, I'm sending this data to Datadog and

192
00:12:28,368 --> 00:12:32,262
I'm not running anything else. Obviously I have some pod in Kube

193
00:12:32,326 --> 00:12:36,046
system as well. So this is my pod. We can have a

194
00:12:36,068 --> 00:12:39,386
look to that on Datadog

195
00:12:39,418 --> 00:12:43,470
as well. As I said, I'm already running it. So I have here my deployments,

196
00:12:43,630 --> 00:12:48,210
my replicas sets, et cetera, et cetera. So let's

197
00:12:48,710 --> 00:12:52,306
deploy gatekeeper. That's the first thing that we need to do. And we are

198
00:12:52,328 --> 00:12:56,920
going to deploy gatekeeper just using the

199
00:12:57,370 --> 00:13:00,918
default gatekeeper yaml that comes in the getting started.

200
00:13:01,004 --> 00:13:05,014
So I'm just doing everything here by default. And you see

201
00:13:05,052 --> 00:13:07,110
a lot of stuff has been created.

202
00:13:08,990 --> 00:13:12,774
We can see that some crds were created,

203
00:13:12,822 --> 00:13:17,546
four in this case. We also had a

204
00:13:17,568 --> 00:13:21,034
new namespace gitkeeper system that has

205
00:13:21,072 --> 00:13:25,082
basically two things, the controller in this case with three replicas,

206
00:13:25,146 --> 00:13:28,846
obviously, because this is going to be

207
00:13:28,868 --> 00:13:32,706
used to validate your policy. It's always to have more than one replica, but you

208
00:13:32,728 --> 00:13:36,254
can define how many. And you also have an audit

209
00:13:36,302 --> 00:13:39,486
pod that we are going to explain later what it's

210
00:13:39,518 --> 00:13:42,386
for. So once it's running.

211
00:13:42,568 --> 00:13:48,622
So if we now exec

212
00:13:48,686 --> 00:13:52,246
onto the data doc, let's see

213
00:13:52,268 --> 00:13:55,640
if this works. You can see that

214
00:13:56,810 --> 00:14:01,174
the agent, Datadog agent has found straight

215
00:14:01,222 --> 00:14:04,490
away the gatekeeper pods. So it's going to start

216
00:14:04,560 --> 00:14:07,994
sending all these metrics directly without having to do

217
00:14:08,032 --> 00:14:09,020
anything else.

218
00:14:13,330 --> 00:14:16,400
So let's see if everything is running here.

219
00:14:18,050 --> 00:14:21,406
Cool. So everything is now running and we are going

220
00:14:21,428 --> 00:14:25,154
to be sending those metrics as well. Okay. Now that we have

221
00:14:25,192 --> 00:14:28,386
all running, I'm going to use some of

222
00:14:28,408 --> 00:14:32,482
these templates for the gatekeeper library. The reason

223
00:14:32,536 --> 00:14:36,194
why I'm doing this is because I wanted to show you again how

224
00:14:36,232 --> 00:14:39,862
easy is to reuse these things that are already coming out of the box.

225
00:14:39,996 --> 00:14:43,126
So I'm going to use this. This is part, as you can see, this is

226
00:14:43,148 --> 00:14:46,866
part of the Gatekeeper library. I just cloud

227
00:14:46,898 --> 00:14:50,278
this from these GitHub repo so

228
00:14:50,444 --> 00:14:53,594
nothing changed there. So I have a lot to get here

229
00:14:53,632 --> 00:14:56,858
from. So I'm going to be using this, the required labels, and you

230
00:14:56,864 --> 00:15:00,086
can see that there is a name for a new

231
00:15:00,128 --> 00:15:03,230
object, there is some properties.

232
00:15:03,810 --> 00:15:07,066
So to parameterize that and some rigor

233
00:15:07,098 --> 00:15:10,526
code that is already tested and validated for me.

234
00:15:10,628 --> 00:15:15,650
So the first thing I'm going to do is I'm going to create

235
00:15:15,720 --> 00:15:19,374
that, so apply that template so I can have the new CRD

236
00:15:19,422 --> 00:15:23,250
and I have that template already available for me. So let's find

237
00:15:23,320 --> 00:15:33,634
this library general required

238
00:15:33,682 --> 00:15:36,786
labels and then template.

239
00:15:36,978 --> 00:15:40,106
So I just have to apply that and it's going

240
00:15:40,128 --> 00:15:44,202
to create this new constraint template object. But it's not only

241
00:15:44,256 --> 00:15:47,706
going to do that. So if I now do get me the

242
00:15:47,728 --> 00:15:51,418
crds, it has created a new object type,

243
00:15:51,504 --> 00:15:54,798
a new kind of object, which is the required labels that now I

244
00:15:54,804 --> 00:15:58,606
can use to instantiate as many times as I need just by using the

245
00:15:58,628 --> 00:16:02,462
same Kubernetes native format. The good thing also about this being

246
00:16:02,516 --> 00:16:05,938
crds is that you can store this with the rest of

247
00:16:05,944 --> 00:16:09,854
these configuration that you have for your cluster using githubs,

248
00:16:09,902 --> 00:16:13,714
et cetera. So let's do that. So as I

249
00:16:13,752 --> 00:16:17,426
said, every of these templates come with examples.

250
00:16:17,458 --> 00:16:21,766
So let's check the example that we have these. It's a constraint basically

251
00:16:21,948 --> 00:16:26,146
that says all namespaces require

252
00:16:26,338 --> 00:16:29,938
an owner key, an owner label with a

253
00:16:29,964 --> 00:16:34,166
set of accepted values. But instead of using this just I'm

254
00:16:34,198 --> 00:16:37,418
going to copy this one and change it a

255
00:16:37,424 --> 00:16:40,974
little bit so you can see how is this to reuse these thing. So going

256
00:16:41,012 --> 00:16:45,626
back to the terminal, I'm going to copy

257
00:16:45,658 --> 00:16:46,560
that one.

258
00:16:49,170 --> 00:16:52,590
Library general required labels,

259
00:16:53,590 --> 00:16:57,714
samples almost have owner I'm going

260
00:16:57,752 --> 00:17:01,250
to copy this, I'm going to change

261
00:17:01,320 --> 00:17:04,100
to conf 42, for example.

262
00:17:06,730 --> 00:17:10,520
So now that I have that I can edit it

263
00:17:11,530 --> 00:17:14,790
and I'm going to change this

264
00:17:14,860 --> 00:17:18,730
to conf fourty

265
00:17:18,800 --> 00:17:22,154
two and

266
00:17:22,192 --> 00:17:25,562
instead of name of spaces, I'm going to do

267
00:17:25,696 --> 00:17:28,858
okay, this is for pods. I'm going to change

268
00:17:28,944 --> 00:17:32,960
the error that I'm going to get if

269
00:17:35,490 --> 00:17:41,550
I don't find this. And instead of asking

270
00:17:41,620 --> 00:17:44,770
for a value, I'm just going to say, okay, I just need the key.

271
00:17:44,920 --> 00:17:48,980
So I'm going to change the name of the key to conf fourty two

272
00:17:50,710 --> 00:17:54,146
and I'm going to

273
00:17:54,168 --> 00:17:57,446
remove this. Okay. So next thing that I have to

274
00:17:57,468 --> 00:17:59,000
do is to apply that,

275
00:18:04,010 --> 00:18:07,718
okay, that has been created already. And basically

276
00:18:07,804 --> 00:18:12,042
this rule is saying to a cluster, all of our pods require these.com

277
00:18:12,096 --> 00:18:16,460
42 key, but we already have some pods running, we already have

278
00:18:17,390 --> 00:18:21,654
the data pods, the kube system pods, the gatekeeper

279
00:18:21,702 --> 00:18:25,294
pods, and all of those didn't have that label. So what happens in this

280
00:18:25,332 --> 00:18:29,038
case? So this is where the audit pod, remember that one of

281
00:18:29,044 --> 00:18:32,586
the pods that were created for gatekeeper was the audit

282
00:18:32,618 --> 00:18:36,466
one. So basically that pod is going to check for violations that

283
00:18:36,488 --> 00:18:39,934
are happening when you create new rules. But instead of removing

284
00:18:39,982 --> 00:18:43,250
those spots, it's just going to get you a description so you can fix

285
00:18:43,320 --> 00:18:47,062
that afterwards. That makes it very easy to have

286
00:18:47,116 --> 00:18:50,854
those coming to create new rules without having

287
00:18:50,892 --> 00:18:54,550
to alter your cluster right away. So how do we know

288
00:18:54,620 --> 00:18:59,210
those constraints are happening? So if I say describe

289
00:19:00,190 --> 00:19:04,138
the type of hobbies and the o mass

290
00:19:04,304 --> 00:19:08,060
half conf 42,

291
00:19:14,690 --> 00:19:18,078
something is wrong here. So let me see, probably I made a

292
00:19:18,084 --> 00:19:21,950
mistake. Yes. So this has to be singular,

293
00:19:23,030 --> 00:19:27,890
which is important. If not, it doesn't work. So it's pod and not pots.

294
00:19:28,950 --> 00:19:32,318
So let's do that again. Let's apply the constraint

295
00:19:32,494 --> 00:19:36,230
it has been configured. And now if we do this,

296
00:19:36,380 --> 00:19:40,294
hopefully now we will get the violations after

297
00:19:40,412 --> 00:19:43,814
the audit has synced a little bit.

298
00:19:44,012 --> 00:19:45,622
Let's just wait.

299
00:19:45,676 --> 00:19:51,510
There's,

300
00:20:16,230 --> 00:20:20,094
okay, here we are. So we have now all the violations,

301
00:20:20,222 --> 00:20:23,806
all the pods that are violating that rule.

302
00:20:23,838 --> 00:20:27,720
So all the pods that we're already running. So if we go now to

303
00:20:30,330 --> 00:20:33,414
data doc, as we said, we are sending all that

304
00:20:33,452 --> 00:20:37,046
data back to data doc, so we can see all the latency of

305
00:20:37,068 --> 00:20:40,118
the webhook request, the number of requests, and also we can see the

306
00:20:40,124 --> 00:20:44,166
number of limitations here. So we had those 14 pods

307
00:20:44,198 --> 00:20:48,154
that are violating. So this is also a very nice way to see if

308
00:20:48,192 --> 00:20:51,670
you're the owner in your cluster of enforcing policy when

309
00:20:51,680 --> 00:20:55,562
you are creating new rules. Straight away check how many violations

310
00:20:55,626 --> 00:20:59,450
you have and start reducing those by modifying the objects

311
00:20:59,530 --> 00:21:02,960
that you already have running in your cluster. Good.

312
00:21:03,830 --> 00:21:07,874
But that's for existing objects. So what happens with

313
00:21:08,072 --> 00:21:11,346
new ones? Let's imagine that now we

314
00:21:11,368 --> 00:21:14,898
have this rule in place that says all pods must

315
00:21:14,984 --> 00:21:17,662
have the 42 label.

316
00:21:17,806 --> 00:21:20,918
So if we see this new object, we are going to

317
00:21:20,924 --> 00:21:24,534
create a pod for NgINX. Very simple. And we are not

318
00:21:24,572 --> 00:21:27,810
going to add the label that is required by my organization.

319
00:21:27,890 --> 00:21:31,434
But I don't know. So I'm going to just try to

320
00:21:31,472 --> 00:21:35,018
create that object and it's going to fail. So it's going to give me

321
00:21:35,104 --> 00:21:38,634
a failure coming from gatekeeper explaining to me

322
00:21:38,752 --> 00:21:42,298
why my pod wasn't being able to be created.

323
00:21:42,394 --> 00:21:46,206
So if I now modify this and

324
00:21:46,308 --> 00:21:49,758
I see conf 42

325
00:21:49,924 --> 00:21:53,674
and I can put any value because we are not requiring a value.

326
00:21:53,732 --> 00:21:57,602
So let's just put April and now

327
00:21:57,656 --> 00:22:00,834
I try again. Now it allows me

328
00:22:00,872 --> 00:22:04,386
to create. So you can see that I already was able to create

329
00:22:04,488 --> 00:22:08,786
policy for my pods by reusing some of the examples

330
00:22:08,818 --> 00:22:12,294
that I got on the gatekeeper library. Make things very simple.

331
00:22:12,412 --> 00:22:16,006
Okay, let's go back quickly to the slides and then

332
00:22:16,028 --> 00:22:19,926
we will do a second demo. So we've seen in

333
00:22:19,948 --> 00:22:23,414
this case was simple because we said all pods

334
00:22:23,462 --> 00:22:27,306
must have this particular label. So you only needed the information that you

335
00:22:27,328 --> 00:22:30,762
had on the object you were planning to create to be able

336
00:22:30,816 --> 00:22:34,110
to answer the operations. But let's imagine that we have

337
00:22:34,180 --> 00:22:37,358
this other type of rule that we want to enforce in

338
00:22:37,364 --> 00:22:41,098
our cluster. All hosts must be unique among all ingresses.

339
00:22:41,114 --> 00:22:44,622
So if you have many ingresses, you have to make sure

340
00:22:44,676 --> 00:22:47,666
that the host name are unique for each of them.

341
00:22:47,768 --> 00:22:51,170
So for that, only having the information of the object

342
00:22:51,240 --> 00:22:54,866
that you're planning to create is not enough. You also need the

343
00:22:54,888 --> 00:22:58,690
information about all the rest of the ingress's object that you have in your cluster

344
00:22:58,770 --> 00:23:02,438
in order to be able to answer that question. We were

345
00:23:02,524 --> 00:23:06,422
talking about OPA. It uses two things to

346
00:23:06,556 --> 00:23:10,130
answer policy inquiry. It uses these policy in

347
00:23:10,140 --> 00:23:13,834
Rigo, but it also have the ability to have some data

348
00:23:13,952 --> 00:23:17,366
about that. So how am I able to in gatekeeper

349
00:23:17,398 --> 00:23:21,110
to add new data that is going to be used for that decision

350
00:23:21,190 --> 00:23:24,730
making? So it's super simple because again, it's Kubernetes

351
00:23:24,810 --> 00:23:28,474
native. Basically what I need to do is to create a config

352
00:23:28,522 --> 00:23:32,814
object, which is a new one, and then let gatekeeper know

353
00:23:32,932 --> 00:23:36,482
all the type of objects that I want to store as

354
00:23:36,536 --> 00:23:41,150
data to make those decisions. In this case, ingress objects.

355
00:23:41,230 --> 00:23:44,894
So let's do a quick demo about that as well.

356
00:23:45,032 --> 00:23:48,502
So we are going to use again,

357
00:23:48,636 --> 00:23:51,894
an example. So let's go here.

358
00:23:52,092 --> 00:23:55,570
And we have this one ingress host.

359
00:23:55,730 --> 00:23:58,934
We have a template as in any other

360
00:23:58,972 --> 00:24:02,250
one. So as I said, these is example

361
00:24:02,320 --> 00:24:05,526
I was talking about. All ingress is wholesome, Sb unique.

362
00:24:05,718 --> 00:24:09,242
You don't have a parameter because you don't need to just have

363
00:24:09,296 --> 00:24:13,262
the regal code that again, we don't require that to

364
00:24:13,316 --> 00:24:17,040
understand. Okay, so let's create that

365
00:24:21,810 --> 00:24:24,370
this is unique ingress host.

366
00:24:25,190 --> 00:24:28,606
And again, we have a template here. So let's

367
00:24:28,638 --> 00:24:33,806
apply that template first. And then I'm

368
00:24:33,838 --> 00:24:38,038
going to also use this sync object.

369
00:24:38,204 --> 00:24:43,090
And this sync object is going to tell gatekeeper

370
00:24:43,250 --> 00:24:46,870
all the stuff that it needs to store to make those

371
00:24:47,020 --> 00:24:50,458
decisions. So again, this is here as part

372
00:24:50,544 --> 00:24:54,026
of the gatekeeper library. So even the sync objects that

373
00:24:54,048 --> 00:24:57,962
are required are in the example. So let's apply

374
00:24:58,016 --> 00:25:01,178
that one. So as soon as I apply this object,

375
00:25:01,264 --> 00:25:05,150
gatekeeper is going to start storing any ingress object that I create

376
00:25:05,300 --> 00:25:08,878
that can be then used to make a decision. Let's go to the

377
00:25:08,964 --> 00:25:12,480
examples. And as usual, as I said,

378
00:25:12,790 --> 00:25:16,226
the examples come with a constraint. That's the first thing

379
00:25:16,248 --> 00:25:19,378
that we need to create. In this case,

380
00:25:19,544 --> 00:25:24,034
the constraint is pretty simple because it doesn't have any

381
00:25:24,072 --> 00:25:27,734
parameters. So it's just for any ingress that we create.

382
00:25:27,932 --> 00:25:32,514
And we also have examples

383
00:25:32,562 --> 00:25:36,246
about things that are not allowed. So in this case you can

384
00:25:36,268 --> 00:25:40,406
see that we are going to try to create two ingresses object.

385
00:25:40,588 --> 00:25:44,070
The first one, it's going to check these host

386
00:25:44,150 --> 00:25:47,866
that is unique and because it's the first ingress object that we have created is

387
00:25:47,888 --> 00:25:50,990
going to be unique. So that's good. For the second

388
00:25:51,060 --> 00:25:54,830
one we are going to try to use these same name.

389
00:25:54,980 --> 00:25:58,960
So probably it's going to fail at some point. So let's try that.

390
00:26:02,930 --> 00:26:06,990
Okay, you can see that the first one was created successfully

391
00:26:07,150 --> 00:26:10,914
and even though it was super quick, so I created the first

392
00:26:10,952 --> 00:26:14,946
one and then the second one, Gatekeeper already had that information

393
00:26:15,128 --> 00:26:18,534
on that, so it created the first one

394
00:26:18,572 --> 00:26:22,338
successfully. And when it tried to create the second one, it checked

395
00:26:22,434 --> 00:26:26,134
that sync objects that it already had and said

396
00:26:26,172 --> 00:26:29,718
okay, there is already an ingress that has that same name.

397
00:26:29,804 --> 00:26:32,966
So I'm going to stop this. So again, not only you

398
00:26:32,988 --> 00:26:36,946
can create policies with the information about the object that you are creating,

399
00:26:36,978 --> 00:26:41,146
but also in relation to the objects that are already in your cluster.

400
00:26:41,258 --> 00:26:44,750
So that's all I had for this talk.

401
00:26:44,820 --> 00:26:48,554
I hope you learned about Gatekeeper if you didn't know, that project is a fantastic

402
00:26:48,602 --> 00:26:52,318
project, makes super simple to start using policies

403
00:26:52,404 --> 00:26:56,254
as code in kubernetes. So check it out and

404
00:26:56,372 --> 00:26:57,486
thank you very much.

