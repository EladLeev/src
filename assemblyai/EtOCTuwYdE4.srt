1
00:01:28,290 --> 00:01:31,746
Hello you guys, my name is Robert and today I'd

2
00:01:31,778 --> 00:01:35,954
like to talk to you about how my team and I are developing

3
00:01:36,082 --> 00:01:39,538
front end applications with real Kubernetes setups

4
00:01:39,554 --> 00:01:43,022
in the development stage and why we think

5
00:01:43,076 --> 00:01:46,782
that mocking APIs on the backend side is

6
00:01:46,836 --> 00:01:50,190
actually not that good of an idea. We'll be talking

7
00:01:50,260 --> 00:01:54,066
about the cloud native software development process and

8
00:01:54,168 --> 00:01:58,142
how we think it should be approached

9
00:01:58,286 --> 00:02:00,690
when it comes to developing front ends.

10
00:02:01,190 --> 00:02:05,214
But first let me introduce myself. I'm Robert.

11
00:02:05,342 --> 00:02:08,558
I'm a software engineer and co founder at Blue Shoe,

12
00:02:08,654 --> 00:02:12,710
a Munich based cloud native software development agency.

13
00:02:13,050 --> 00:02:16,770
And actually we started out with classic

14
00:02:16,850 --> 00:02:21,462
web development. However, around 2018

15
00:02:21,606 --> 00:02:25,242
we shifted our architectural approach from

16
00:02:25,296 --> 00:02:28,874
building monolithic web applications to a more

17
00:02:28,992 --> 00:02:32,682
service oriented or microservice oriented software

18
00:02:32,746 --> 00:02:37,390
architectural approach. Somehow we landed at Kubernetes and

19
00:02:37,540 --> 00:02:41,342
we're really happy with that. Today we

20
00:02:41,396 --> 00:02:44,898
try to embed our learnings into

21
00:02:44,984 --> 00:02:49,038
tooling and processes we deliver

22
00:02:49,134 --> 00:02:53,134
for other developers to make their life easier and enable

23
00:02:53,182 --> 00:02:56,814
them to build great cloud native software. I'm mostly

24
00:02:56,862 --> 00:03:00,998
responsible for front end technologies. I do some project

25
00:03:01,084 --> 00:03:04,790
management and steer some of our open source efforts.

26
00:03:05,130 --> 00:03:09,414
In my spare time I'm a sourdough bread baker

27
00:03:09,542 --> 00:03:12,598
and a coffee nerd. I really like coffee.

28
00:03:12,774 --> 00:03:16,570
I also love to play the guitar. So in case

29
00:03:16,720 --> 00:03:20,162
you're interested in cloud native software development,

30
00:03:20,246 --> 00:03:24,474
or you're really into sourdough bread baking,

31
00:03:24,602 --> 00:03:28,826
hit me up on LinkedIn or Twitter, I'll definitely respond.

32
00:03:29,018 --> 00:03:32,650
So why do we actually need to talk about

33
00:03:32,740 --> 00:03:37,166
this? Typically when you're developing

34
00:03:37,358 --> 00:03:40,994
a distributed software architecture and the

35
00:03:41,032 --> 00:03:44,786
applications within it, there is some kind of back and

36
00:03:44,808 --> 00:03:48,262
forth communication. Typically this is done

37
00:03:48,316 --> 00:03:51,494
via APIs. And when

38
00:03:51,532 --> 00:03:54,854
you develop a front end there is an API or

39
00:03:54,892 --> 00:03:58,442
maybe a gateway on the back end which wraps all the

40
00:03:58,496 --> 00:04:02,060
APIs of the different services into one,

41
00:04:02,590 --> 00:04:05,914
and we somehow have to

42
00:04:05,952 --> 00:04:09,530
deal with that at the development stage.

43
00:04:10,030 --> 00:04:14,080
There are some approaches on how to cope with that.

44
00:04:14,530 --> 00:04:18,302
So basically you just can read documentation and develop

45
00:04:18,356 --> 00:04:22,174
your front end to the best of your knowledge. Latest in

46
00:04:22,212 --> 00:04:26,402
the CI CD process, you'll test whether things

47
00:04:26,456 --> 00:04:30,078
work or not. So this is not actually a solution.

48
00:04:30,174 --> 00:04:33,266
I just listed it here as you can do it

49
00:04:33,288 --> 00:04:36,914
this way, but probably no one does. Let's just scratch

50
00:04:36,962 --> 00:04:40,866
that from the list and come to the second point. You can mock

51
00:04:40,898 --> 00:04:44,854
the APIs on the backend side. So basically you create

52
00:04:45,052 --> 00:04:49,334
a static response for a certain request,

53
00:04:49,462 --> 00:04:53,930
a certain request body, a certain query parameter,

54
00:04:54,510 --> 00:04:58,358
and this is it. It's just statically

55
00:04:58,534 --> 00:05:02,320
returned from the mock server for

56
00:05:02,850 --> 00:05:07,054
the given request. Another way to approach this is

57
00:05:07,172 --> 00:05:11,038
just to set up a development backend. Basically you can

58
00:05:11,124 --> 00:05:15,022
spin up a VM or maybe a docker compose setup,

59
00:05:15,166 --> 00:05:18,946
or even a local cluster or remote cluster could do

60
00:05:18,968 --> 00:05:23,214
it just for your own, or there could be some kind of shared machine

61
00:05:23,342 --> 00:05:25,966
for different front end developers.

62
00:05:26,158 --> 00:05:30,034
This is another way to approach this at the development cycle,

63
00:05:30,082 --> 00:05:33,686
because when you're developers, the frontend, you somewhat want to

64
00:05:33,708 --> 00:05:37,078
talk to the API, fiddle around with responses, right?

65
00:05:37,244 --> 00:05:41,626
So what's actually the best way on how to approach this?

66
00:05:41,808 --> 00:05:44,378
Obviously when we started out,

67
00:05:44,464 --> 00:05:47,866
we basically did what everyone did at the

68
00:05:47,888 --> 00:05:51,470
time, which was mocking APIs.

69
00:05:51,810 --> 00:05:55,822
And this is actually fairly simple and pretty

70
00:05:55,876 --> 00:05:59,486
quick to do. There are lots of services,

71
00:05:59,668 --> 00:06:03,966
there are lots of tools and even some frameworks

72
00:06:04,078 --> 00:06:07,970
which have built in mocking capabilities

73
00:06:08,790 --> 00:06:13,602
which makes the whole thing really quick to set up and really

74
00:06:13,656 --> 00:06:16,040
simple actually. However,

75
00:06:17,130 --> 00:06:21,606
what we noticed over time is

76
00:06:21,788 --> 00:06:24,962
that there's quite some additional maintenance effort,

77
00:06:25,026 --> 00:06:28,698
right? Because you have to keep the actual

78
00:06:28,784 --> 00:06:32,474
response and the actual requests in

79
00:06:32,512 --> 00:06:36,666
sync with what your real code does.

80
00:06:36,848 --> 00:06:41,326
You have to ask yourself who is actually

81
00:06:41,508 --> 00:06:44,862
responsible over time on

82
00:06:44,996 --> 00:06:49,150
maintaining the mock service? Is it

83
00:06:49,220 --> 00:06:53,154
the frontend developers who is actually mocking with it all the

84
00:06:53,192 --> 00:06:56,434
time? Is it the backend developer who does

85
00:06:56,472 --> 00:07:00,530
the coding of the actual service of the actual API?

86
00:07:01,190 --> 00:07:05,220
Is it the testing team or quality assurance team?

87
00:07:05,770 --> 00:07:09,206
So this is not completely clear. I think

88
00:07:09,228 --> 00:07:13,190
in most cases maybe the back end developer.

89
00:07:14,410 --> 00:07:17,674
But yeah, you have to really make clear

90
00:07:17,712 --> 00:07:21,542
to your team who's responsible for that. And keeping

91
00:07:21,606 --> 00:07:24,618
things in sync, especially code,

92
00:07:24,784 --> 00:07:28,586
is pretty tough, right? So in

93
00:07:28,608 --> 00:07:31,850
case you're adapting a response

94
00:07:32,010 --> 00:07:36,638
in your code, in your application, you have also adapted in

95
00:07:36,804 --> 00:07:40,686
your mocking service, or maybe in

96
00:07:40,708 --> 00:07:44,066
the framework you're using, or maybe

97
00:07:44,168 --> 00:07:48,430
even the service provider you're

98
00:07:48,510 --> 00:07:52,014
using to provide the mock

99
00:07:52,062 --> 00:07:56,138
API. As a profit oriented company we're

100
00:07:56,174 --> 00:07:59,650
running, we also had to think about the costs.

101
00:07:59,810 --> 00:08:03,480
Are the costs worth the value

102
00:08:04,170 --> 00:08:07,866
of a mock API? I think this is pretty hard

103
00:08:07,888 --> 00:08:11,434
to answer, right? Because you

104
00:08:11,472 --> 00:08:15,146
could probably introduce some bugs in

105
00:08:15,168 --> 00:08:18,746
your mock API, you could probably go out

106
00:08:18,768 --> 00:08:22,398
of sync with the real code. And this basically

107
00:08:22,484 --> 00:08:26,126
leads to more and more errors within your development process

108
00:08:26,228 --> 00:08:30,046
and other teams. You have to dive in

109
00:08:30,148 --> 00:08:33,794
why things are not in sync anymore and what change or

110
00:08:33,832 --> 00:08:37,886
what response is actually the right one? Was the mocking

111
00:08:37,918 --> 00:08:41,362
API adapted beforehand or did just

112
00:08:41,416 --> 00:08:46,242
someone forget? These are basically events

113
00:08:46,306 --> 00:08:49,990
which result in additional costs and who's paying

114
00:08:50,060 --> 00:08:54,258
for it? Same thing as testing or documentation.

115
00:08:54,354 --> 00:08:57,458
This is additional effort. And I'm not

116
00:08:57,564 --> 00:09:01,066
saying that this is a bad thing, I'm just saying you have

117
00:09:01,088 --> 00:09:04,422
to be aware that there's additional

118
00:09:04,486 --> 00:09:08,442
costs and effort running into this part

119
00:09:08,496 --> 00:09:11,854
of the process. What I want you to take away is

120
00:09:11,972 --> 00:09:15,454
that mocking APIs is fairly simple, it's quick

121
00:09:15,492 --> 00:09:18,906
to set up, and still it's

122
00:09:19,018 --> 00:09:22,346
pretty hard to keep your code

123
00:09:22,468 --> 00:09:25,714
and your mocking service, the result of

124
00:09:25,752 --> 00:09:29,218
it in sync. Basically what we also believe is

125
00:09:29,304 --> 00:09:33,410
that there is more to a good mock than just

126
00:09:33,480 --> 00:09:37,202
a plain HTTP response or JSON response

127
00:09:37,266 --> 00:09:40,662
XML, you name it. So there may be

128
00:09:40,716 --> 00:09:43,974
some domain related problems. Just think

129
00:09:44,012 --> 00:09:47,350
about cross origin resource sharing,

130
00:09:47,790 --> 00:09:51,900
or maybe there are some timing issues or

131
00:09:52,270 --> 00:09:56,538
even some encryption SSL certificates you have to deal with

132
00:09:56,704 --> 00:09:59,766
which are different in the

133
00:09:59,888 --> 00:10:03,982
production system. What we did is we went

134
00:10:04,036 --> 00:10:07,840
back and looked at our software development process,

135
00:10:09,010 --> 00:10:12,534
or even in the context of cloud native software

136
00:10:12,602 --> 00:10:15,940
development, the cloud native software development process,

137
00:10:16,390 --> 00:10:19,970
there are quite some things involved. Of course,

138
00:10:20,040 --> 00:10:24,338
you have your code with your code style guide and

139
00:10:24,424 --> 00:10:28,434
you have a CI CD process. You have your documentation, the tests,

140
00:10:28,482 --> 00:10:32,326
monitoring, logging, you name it. There are lots of

141
00:10:32,508 --> 00:10:37,030
things involved when it comes to developing good

142
00:10:37,100 --> 00:10:41,834
cloud native software. What we basically

143
00:10:41,952 --> 00:10:46,090
establish for us is that the environments

144
00:10:46,590 --> 00:10:50,206
your software runs in, or the

145
00:10:50,228 --> 00:10:54,094
software is written in are a part of the

146
00:10:54,132 --> 00:10:57,882
software developers process. So you have your development,

147
00:10:57,946 --> 00:11:01,854
your integration, your production environments, maybe even some

148
00:11:01,892 --> 00:11:05,170
more called staging or testing environment.

149
00:11:05,910 --> 00:11:08,558
We are pretty much convinced,

150
00:11:08,654 --> 00:11:12,590
or basically we found out that this has a direct impact

151
00:11:12,670 --> 00:11:15,926
on how you write your software and the

152
00:11:15,948 --> 00:11:19,698
quality of it. So the environments

153
00:11:19,794 --> 00:11:23,446
really play a big role in

154
00:11:23,468 --> 00:11:25,910
your software development cycle.

155
00:11:26,890 --> 00:11:30,234
Let me first explain what

156
00:11:30,272 --> 00:11:34,490
we think about when we talk about an environment.

157
00:11:35,710 --> 00:11:38,922
So basically an environment is

158
00:11:38,976 --> 00:11:42,542
the space, the context, the setting which

159
00:11:42,596 --> 00:11:46,078
your software runs in. Over the past

160
00:11:46,164 --> 00:11:50,110
couple of years, there's been a trend of

161
00:11:50,260 --> 00:11:53,694
equalizing the environment your software runs

162
00:11:53,742 --> 00:11:57,038
in. And the strength was called containerization.

163
00:11:57,214 --> 00:12:01,154
And there are some quite popular technologies like

164
00:12:01,192 --> 00:12:04,178
Docker which do that for you.

165
00:12:04,344 --> 00:12:07,894
Basically what they enable you to do

166
00:12:07,932 --> 00:12:11,814
is federating your code in

167
00:12:11,852 --> 00:12:15,302
a very similar runtime on

168
00:12:15,356 --> 00:12:19,642
different machines. And this makes it more

169
00:12:19,696 --> 00:12:24,010
reproducible, right? You can expect the same results

170
00:12:24,430 --> 00:12:27,894
on your machine and your colleagues

171
00:12:27,942 --> 00:12:31,774
machine. However, there is

172
00:12:31,892 --> 00:12:35,786
more to a service presented

173
00:12:35,818 --> 00:12:39,594
architectural approach than just the runtime of your container,

174
00:12:39,642 --> 00:12:43,934
right? Your container may rely on some cache

175
00:12:43,982 --> 00:12:48,382
in the production system, some open authentication,

176
00:12:48,526 --> 00:12:52,638
there may be ns three storage, there may be some external

177
00:12:52,734 --> 00:12:56,790
services which are woven into

178
00:12:56,860 --> 00:13:01,670
your architecture. Suddenly you

179
00:13:01,820 --> 00:13:05,190
have a pretty different environment

180
00:13:05,930 --> 00:13:10,602
on your production side and

181
00:13:10,656 --> 00:13:13,994
your development side, right? Your development environment may

182
00:13:14,032 --> 00:13:17,882
look really different because maybe

183
00:13:17,936 --> 00:13:20,640
you don't have the external service available.

184
00:13:21,330 --> 00:13:25,262
You're mocking the code of

185
00:13:25,316 --> 00:13:28,682
your other containers. Maybe you don't

186
00:13:28,746 --> 00:13:32,090
use an s three. Instead you use a volume storage,

187
00:13:32,250 --> 00:13:35,938
I mean accessing files on s three

188
00:13:36,024 --> 00:13:39,794
and volume storage within kubernetes or

189
00:13:39,832 --> 00:13:43,122
docker basically works different. So the code

190
00:13:43,176 --> 00:13:45,220
has to work differently, right?

191
00:13:46,410 --> 00:13:50,486
This led us to think, okay, how can we

192
00:13:50,668 --> 00:13:54,920
minimize those differences between

193
00:13:55,370 --> 00:13:59,260
the environments we run our software in,

194
00:13:59,790 --> 00:14:04,022
so that we have something we call environment

195
00:14:04,086 --> 00:14:08,470
parity? And basically what we mean by environment parity

196
00:14:08,550 --> 00:14:12,794
is that the different stages our software runs

197
00:14:12,842 --> 00:14:16,426
in development integration,

198
00:14:16,538 --> 00:14:20,414
production look very very similar and

199
00:14:20,452 --> 00:14:24,514
also not only like the runtime built, also the

200
00:14:24,552 --> 00:14:29,060
orchestration of our services and even the services themselves.

201
00:14:29,910 --> 00:14:33,198
So these are basically the rough

202
00:14:33,294 --> 00:14:37,202
thoughts on why we think mocking just introduces

203
00:14:37,266 --> 00:14:41,286
or does introduce some additional problems

204
00:14:41,468 --> 00:14:45,142
to your development cycle you have

205
00:14:45,196 --> 00:14:48,940
to solve. And by using

206
00:14:49,470 --> 00:14:53,290
the real setup you're actually also using in production,

207
00:14:53,790 --> 00:14:57,146
you eliminate those problems. However,

208
00:14:57,328 --> 00:15:00,874
of course you have to think about how can I replicate

209
00:15:00,922 --> 00:15:04,960
my production environment on my local machine without being

210
00:15:05,410 --> 00:15:08,862
Kubernetes expert and front end developer in one

211
00:15:08,916 --> 00:15:10,640
person, right?

212
00:15:12,210 --> 00:15:15,620
Let me tell you about how we approach this.

213
00:15:16,150 --> 00:15:19,380
We think mocking APIs comes at a cost and

214
00:15:19,910 --> 00:15:23,282
in the long term it's hard to say

215
00:15:23,336 --> 00:15:26,646
if it's worth it or not. We're not really convinced, let's put

216
00:15:26,668 --> 00:15:30,120
it that way. Just be clear

217
00:15:31,210 --> 00:15:34,594
who is responsible for maintaining the mock

218
00:15:34,642 --> 00:15:38,158
of the API in the long term.

219
00:15:38,354 --> 00:15:43,338
And we'd really recommend put

220
00:15:43,504 --> 00:15:47,242
in some effort to make sure the

221
00:15:47,296 --> 00:15:51,066
mocking matches your stack. So just picking

222
00:15:51,098 --> 00:15:56,794
the first service provider that comes to mind or Google spits

223
00:15:56,842 --> 00:16:00,174
out probably is not the best thing

224
00:16:00,212 --> 00:16:04,158
to do here. So we try to maximize

225
00:16:04,254 --> 00:16:08,206
the parity between the different environments our software runs

226
00:16:08,238 --> 00:16:12,450
in and we try to minimize the differences.

227
00:16:12,950 --> 00:16:17,270
Basically what we do is in our development lifecycle

228
00:16:17,930 --> 00:16:21,094
we use a real Kubernetes setup for

229
00:16:21,132 --> 00:16:25,094
our developers. We are pretty much convinced that our

230
00:16:25,132 --> 00:16:28,394
DevOps people are super awesome guys and

231
00:16:28,432 --> 00:16:32,410
they put in so much effort in writing

232
00:16:32,750 --> 00:16:36,598
the Kubernetes description files like the Kubernetes manifest

233
00:16:36,694 --> 00:16:40,330
or maybe helm charts or customize.

234
00:16:40,770 --> 00:16:44,240
Why not make use of this really

235
00:16:44,690 --> 00:16:48,382
great result they created for our

236
00:16:48,436 --> 00:16:51,710
other developers for their development setups?

237
00:16:52,130 --> 00:16:55,714
So there are some solutions, I just

238
00:16:55,752 --> 00:16:59,890
put in some logos here, there's K 3D, there's minicube.

239
00:17:00,390 --> 00:17:04,100
Unicube is something we use and we built.

240
00:17:04,550 --> 00:17:08,626
So disclaimer, we are the creators of Unicube.

241
00:17:08,818 --> 00:17:12,450
Basically it's a pretty thin layer

242
00:17:12,610 --> 00:17:16,278
around K 3D which takes care of setting up

243
00:17:16,364 --> 00:17:19,942
a replica of your production environment on your local machine.

244
00:17:20,086 --> 00:17:23,290
So I guess it's demo time and

245
00:17:23,360 --> 00:17:27,530
I'll show you on how our development

246
00:17:28,430 --> 00:17:32,106
cycle looks like for our front end developers.

247
00:17:32,298 --> 00:17:35,694
But first, let me explain you how the

248
00:17:35,732 --> 00:17:39,166
architecture of our platform basically looks like. We have

249
00:17:39,188 --> 00:17:42,754
a Kubernetes cluster which does look the

250
00:17:42,792 --> 00:17:46,210
same during development and production.

251
00:17:46,710 --> 00:17:50,930
The only differences are the actual secrets which are used

252
00:17:51,080 --> 00:17:54,798
for development and production. So we have some

253
00:17:54,984 --> 00:17:58,150
security concerns there and splitting those

254
00:17:58,220 --> 00:18:02,982
up. And in front of all, we have of course, the frontend which

255
00:18:03,036 --> 00:18:06,882
talks to a gateway which is connected to Keycloak.

256
00:18:06,946 --> 00:18:11,382
Keycloak is an open identity provider which handles authentication

257
00:18:11,446 --> 00:18:15,610
and authorization for us. Basically it works with JSON

258
00:18:16,030 --> 00:18:19,922
web tokens. If you pass authentication,

259
00:18:20,086 --> 00:18:22,670
your request is forwarded to Apollo.

260
00:18:23,250 --> 00:18:27,034
Apollo is a pretty cool thing. It federates

261
00:18:27,162 --> 00:18:31,550
all our backend graphql interfaces,

262
00:18:32,210 --> 00:18:35,310
the public interfaces into one big graphql.

263
00:18:35,470 --> 00:18:39,758
This basically enables the front end developer to run queries

264
00:18:39,854 --> 00:18:43,026
across different services within

265
00:18:43,128 --> 00:18:46,422
one request. So if I

266
00:18:46,556 --> 00:18:50,422
want to have, maybe I want to retrieve all

267
00:18:50,476 --> 00:18:54,290
projects for a given organization and include

268
00:18:54,370 --> 00:18:57,822
the organization name and the project names, et cetera,

269
00:18:57,906 --> 00:19:01,334
in one request. This is totally

270
00:19:01,382 --> 00:19:04,540
possible and pretty easy to write.

271
00:19:06,110 --> 00:19:09,750
Let's head over to how

272
00:19:09,920 --> 00:19:14,074
we basically work with our Unicube

273
00:19:14,122 --> 00:19:17,342
setup. We have a platform which

274
00:19:17,396 --> 00:19:21,498
basically takes care of rendering the Kubernetes resources.

275
00:19:21,594 --> 00:19:30,890
I log in and

276
00:19:30,960 --> 00:19:35,066
after I logged in, there are some projects we

277
00:19:35,088 --> 00:19:37,100
have here the Uniq platform.

278
00:19:38,030 --> 00:19:41,520
There are all deployments listed within the platform.

279
00:19:42,050 --> 00:19:45,774
This is something our developers team set up for

280
00:19:45,812 --> 00:19:49,262
us. What they also did is they

281
00:19:49,316 --> 00:19:52,414
told the platform on how to render the charts,

282
00:19:52,542 --> 00:19:56,286
which values. These are basically hand charts, what values

283
00:19:56,318 --> 00:20:00,594
to use and how to resolve the

284
00:20:00,712 --> 00:20:03,770
secrets for the development charts.

285
00:20:03,950 --> 00:20:07,494
That's basically what they just put into the platform.

286
00:20:07,692 --> 00:20:11,474
And now I can use the unicube CLI

287
00:20:11,602 --> 00:20:14,710
just to set up a cluster on my machine

288
00:20:15,130 --> 00:20:19,210
to basically create my development environment.

289
00:20:19,550 --> 00:20:22,970
All right, let's head over to the CLI.

290
00:20:23,870 --> 00:20:27,930
First thing I need to do is to authenticate

291
00:20:28,610 --> 00:20:32,302
so that the platform knows I'm really

292
00:20:32,356 --> 00:20:35,770
allowed to access the helm charts,

293
00:20:35,850 --> 00:20:39,166
or actually the Kubernetes manifest, which is generated by

294
00:20:39,188 --> 00:20:42,930
the platform. And the CLI opens

295
00:20:43,350 --> 00:20:47,362
tab in the browser where

296
00:20:47,416 --> 00:20:51,634
I can authenticate. As soon as this is done,

297
00:20:51,832 --> 00:20:56,134
I just can spin up the project I

298
00:20:56,172 --> 00:20:58,710
just showed you in the web UI.

299
00:20:59,930 --> 00:21:02,898
And this looks pretty similar to docker compose.

300
00:21:03,074 --> 00:21:06,662
So what this command does,

301
00:21:06,716 --> 00:21:10,854
it creates a new cluster with k machine, or spins

302
00:21:10,902 --> 00:21:14,662
up an existing one, so I can actually manage multiple clusters

303
00:21:14,726 --> 00:21:18,950
on my machine. This one is already running and

304
00:21:19,120 --> 00:21:22,298
already also provisioned with the helm charts.

305
00:21:22,474 --> 00:21:25,918
So no need to wait for this here. Let's have a

306
00:21:25,924 --> 00:21:31,638
look at which resources

307
00:21:31,754 --> 00:21:35,710
or domains the cluster

308
00:21:35,790 --> 00:21:39,282
exposes for my local machine. So we just

309
00:21:39,336 --> 00:21:42,878
had a look before on the deck, on the platform deck.

310
00:21:42,974 --> 00:21:46,920
So running this command actually shows us which

311
00:21:47,290 --> 00:21:50,438
paths are available. So there are quite a

312
00:21:50,444 --> 00:21:53,846
few exposed here. We have the front end and we

313
00:21:53,868 --> 00:21:57,266
have the gateway, our authentication

314
00:21:57,378 --> 00:21:59,110
service key cloak.

315
00:22:00,830 --> 00:22:04,186
All right, so let's have a look at it in the

316
00:22:04,208 --> 00:22:08,250
browser. Basically what I'm doing now is accessing

317
00:22:08,770 --> 00:22:12,526
the link, the ingress command exposed to

318
00:22:12,548 --> 00:22:16,462
me as a user. What happened here actually is

319
00:22:16,596 --> 00:22:20,366
my authentication is tested by

320
00:22:20,388 --> 00:22:23,970
the keycloak service and the front

321
00:22:24,040 --> 00:22:27,362
end is executed from the front end

322
00:22:27,496 --> 00:22:32,014
deployment. And we access the real graphql

323
00:22:32,062 --> 00:22:35,922
interface which runs within the cluster on my machine.

324
00:22:36,066 --> 00:22:39,400
What we also can do is have a look at the

325
00:22:40,490 --> 00:22:44,486
GraphQl interface which is also exposed by

326
00:22:44,508 --> 00:22:47,100
the cluster. Let's have a look at that.

327
00:22:48,110 --> 00:22:51,974
And I can basically run my graphQl

328
00:22:52,022 --> 00:22:55,974
queries as they would run in the production

329
00:22:56,022 --> 00:22:59,290
system, my cluster and get the results here.

330
00:22:59,360 --> 00:23:02,366
Can have a look at the results, how they look like, can have

331
00:23:02,388 --> 00:23:06,362
a look at the documentation. GraphQL is self documenting

332
00:23:06,426 --> 00:23:09,902
how the schema looks like. And basically

333
00:23:09,956 --> 00:23:13,650
I also can execute mutations which really

334
00:23:13,720 --> 00:23:17,410
change things within the cluster. This is pretty cool.

335
00:23:17,560 --> 00:23:21,342
Now I can spin up my webpack development

336
00:23:21,406 --> 00:23:24,710
server and just work with the API.

337
00:23:26,890 --> 00:23:30,198
All right. This is basically it how we

338
00:23:30,284 --> 00:23:34,182
work at blue shoe when it comes to develop frontends KS

339
00:23:34,236 --> 00:23:37,386
applications with Kubernetes setup. I have

340
00:23:37,408 --> 00:23:41,110
to admit it was a bit slow

341
00:23:41,190 --> 00:23:45,402
running obs and running the full

342
00:23:45,456 --> 00:23:49,326
cluster on my machine, but basically it's a

343
00:23:49,348 --> 00:23:52,734
bit faster and working when I

344
00:23:52,772 --> 00:23:56,686
run it without recording a session. It was really fun to

345
00:23:56,708 --> 00:24:00,074
show you guys how we work, how our development

346
00:24:00,202 --> 00:24:04,034
flow looks like. Have a look at all the

347
00:24:04,072 --> 00:24:07,454
awesome projects like mini Cube,

348
00:24:07,582 --> 00:24:11,806
like K 3D. Also have a look at our project unicube.

349
00:24:11,918 --> 00:24:15,266
It's completely open source and really

350
00:24:15,368 --> 00:24:19,422
makes things easier to collaborate between DevOps

351
00:24:19,486 --> 00:24:23,218
back end developers and front end developers. So if you're

352
00:24:23,234 --> 00:24:27,130
interested in this, just hit me up, drop me a message

353
00:24:27,200 --> 00:24:30,534
on LinkedIn or Twitter. I'll be glad

354
00:24:30,582 --> 00:24:33,914
to help you. And well,

355
00:24:34,112 --> 00:24:37,290
mocking APIs is as I told you before,

356
00:24:37,360 --> 00:24:40,814
it's pretty simple and it's quick to set up.

357
00:24:41,012 --> 00:24:44,682
But what we found that this flow flows

358
00:24:44,746 --> 00:24:48,430
more, this development flow is better for us.

359
00:24:48,580 --> 00:24:51,360
It may be better for you or not.

360
00:24:51,810 --> 00:24:56,778
You have to find out if you have any critics

361
00:24:56,874 --> 00:25:00,240
or any additional information you need,

362
00:25:00,690 --> 00:25:04,214
just let me know. Really glad to be here and

363
00:25:04,332 --> 00:25:07,606
hope to hear from you guys. See you

364
00:25:07,628 --> 00:25:07,700
soon.

