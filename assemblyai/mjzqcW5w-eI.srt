1
00:00:41,090 --> 00:00:44,646
Welcome to get ready to spend more on cloud native than you expect and be

2
00:00:44,668 --> 00:00:48,182
happy about it. Feeling happy is good, right? Let's see how we can feel

3
00:00:48,236 --> 00:00:51,646
happy about cloud native and and spending money on it. It sort of

4
00:00:51,668 --> 00:00:55,082
seems common sense. Today you pay for a server with a full stack,

5
00:00:55,146 --> 00:00:58,398
tomorrow you run just a microservice. Without that overhead you

6
00:00:58,404 --> 00:01:01,646
will reduce your cost, right? Sorry. Jevon says that

7
00:01:01,668 --> 00:01:05,166
you are likely to end up spending more and that you will probably be glad

8
00:01:05,198 --> 00:01:08,658
that you did. Let me explain by stepping through it's history

9
00:01:08,744 --> 00:01:13,214
of sprawl and consolidation cycles and weaving Jevon's

10
00:01:13,262 --> 00:01:17,154
paradox into the lessons learned. Learn what to prepares for and

11
00:01:17,192 --> 00:01:20,438
which will not work in the microservices ecology. But first,

12
00:01:20,524 --> 00:01:24,326
let me introduce myself. G'day. I'm Marco. I'm an ex CTO who

13
00:01:24,348 --> 00:01:28,178
has worked for one of the top 50 international banks. I've supported data centers

14
00:01:28,194 --> 00:01:31,574
for hospitals and service providers, and I've worked for some of the largest

15
00:01:31,622 --> 00:01:35,126
industry vendors out there. I've lived in three countries and I've managed

16
00:01:35,158 --> 00:01:38,714
teams across 13 countries. I also spent about five years

17
00:01:38,752 --> 00:01:41,994
as an industry analyst running the data science team at four five one

18
00:01:42,032 --> 00:01:46,170
research. Seeing technology from every side as an operator, a developer,

19
00:01:46,250 --> 00:01:49,566
an analyst, a vendor, a buyer, and a CTO gives me

20
00:01:49,588 --> 00:01:52,762
a unique view on technology. Now you can read some of my writing

21
00:01:52,826 --> 00:01:56,366
or interviews in the publications on the left here or on my

22
00:01:56,388 --> 00:02:00,306
website, tech whisperer.com, and currently I

23
00:02:00,328 --> 00:02:03,842
am a vice president for quantum research at Inside Quantum Technology.

24
00:02:03,976 --> 00:02:07,150
If you want to stay current on post digital computing,

25
00:02:07,230 --> 00:02:10,246
then check out our newsfeed. I'll give you a link at the end. So,

26
00:02:10,268 --> 00:02:13,746
enough about me. This session assumes that other speakers

27
00:02:13,858 --> 00:02:18,254
in this conference will cover some of the developer challenges of microservices,

28
00:02:18,402 --> 00:02:21,894
data synchronization, data staleness, circuit breakers.

29
00:02:21,942 --> 00:02:26,198
For no reply hangs cyclic dependencies, microservice prerequisites,

30
00:02:26,214 --> 00:02:30,550
and so on. I'm going to focus on what happens after you've written microservices

31
00:02:30,630 --> 00:02:33,774
and are using them in production, and what that can

32
00:02:33,812 --> 00:02:37,546
do for your opex. This topic comes in sort of two volumes

33
00:02:37,578 --> 00:02:40,766
of three chapters each. The first trilogy examines why

34
00:02:40,788 --> 00:02:44,574
I'm certain that you will end up spending more on microservices in

35
00:02:44,612 --> 00:02:48,546
production than you expect, and in the latter trilogy, we will cover what

36
00:02:48,568 --> 00:02:52,402
we can do to be happy about that outcome. Sounds good. Let's go.

37
00:02:52,536 --> 00:02:56,582
There are several benefits of moving to cloud native of

38
00:02:56,636 --> 00:03:00,306
moving from a monolith to a microservice. It's a smaller

39
00:03:00,338 --> 00:03:03,702
piece of code, so it's easier for newer hires to

40
00:03:03,756 --> 00:03:07,494
comprehend and support. It's independent. You can roll back

41
00:03:07,532 --> 00:03:11,066
buggy updates without having to redeploy the entire

42
00:03:11,168 --> 00:03:14,586
application. A microservice can fail without killing the

43
00:03:14,608 --> 00:03:18,166
entire application. You get simultaneously. Different teams

44
00:03:18,198 --> 00:03:21,478
can work on different modules at the same time without waiting for

45
00:03:21,504 --> 00:03:25,018
the other groups to complete their projects. Before this group can ship,

46
00:03:25,114 --> 00:03:28,558
you're just responsible for less, and you are running less.

47
00:03:28,724 --> 00:03:32,234
Now, operationally, you run just the microservice

48
00:03:32,282 --> 00:03:35,886
code, not the operating systems and hypervisors that are supporting it.

49
00:03:35,988 --> 00:03:39,314
This is a big deal in a public cloud environment where you are pay

50
00:03:39,352 --> 00:03:43,214
as you go for compute and storage. I mean, we moved from physical

51
00:03:43,262 --> 00:03:47,226
to vms to containers to reduce our stack multipliers.

52
00:03:47,358 --> 00:03:50,550
Instead of paying for everything, we moved to cloud,

53
00:03:50,620 --> 00:03:53,990
even to try and reduce cost. In the same way, with cloud

54
00:03:54,060 --> 00:03:57,366
microservices, we're just responsible for the application and

55
00:03:57,388 --> 00:04:01,370
the data. Well, the rest is now someone else's problem, and we pay

56
00:04:01,520 --> 00:04:04,778
that way as well. So no longer are we paying for

57
00:04:04,864 --> 00:04:08,026
print services or services like that.

58
00:04:08,048 --> 00:04:11,466
That would never be used in the cloud anyway. Now, about now you might be

59
00:04:11,488 --> 00:04:14,654
asking, but Marco, if all of this is reduced, why are you

60
00:04:14,692 --> 00:04:18,046
convinced that we will paradoxically spend more? The answer to

61
00:04:18,068 --> 00:04:21,246
this comes from Jevon's paradox. Jevons is

62
00:04:21,268 --> 00:04:24,446
not an IT person. He is an economist. He defined

63
00:04:24,478 --> 00:04:27,838
a paradox about efficiency increasing investment.

64
00:04:27,934 --> 00:04:31,650
Let's jump back to 1775. A guy called James White

65
00:04:31,720 --> 00:04:36,190
invented the new steam engine, delivering more efficient steam for less coal.

66
00:04:36,270 --> 00:04:39,518
It was awesome at that stage. In fact, his engines

67
00:04:39,534 --> 00:04:43,542
were so efficient, they were licensed based on the amount of fuel they would save.

68
00:04:43,676 --> 00:04:46,966
Now, wise economists for the day predicted, if we can get the same steel for

69
00:04:46,988 --> 00:04:50,614
less coal, then we will not use as much coal. Sell our coal

70
00:04:50,662 --> 00:04:53,814
futures. Unfortunately, the actual result was coal

71
00:04:53,862 --> 00:04:57,466
consumption went up for about 100 years. People just shrugged and said,

72
00:04:57,488 --> 00:05:00,746
well, that's weird. Until 1865, Jevon examined

73
00:05:00,778 --> 00:05:04,366
these events. He crunched the numbers and identified that when there

74
00:05:04,388 --> 00:05:07,774
is elastic demand, increased efficiency can lead to,

75
00:05:07,812 --> 00:05:11,866
paradoxically, increased consolidation. And that's Jevin's paradox.

76
00:05:11,978 --> 00:05:16,270
So Marco's variant on Jevin's paradox, with the efficiency and agility

77
00:05:16,350 --> 00:05:20,274
that cloud native provides, people's increased usages will

78
00:05:20,312 --> 00:05:23,826
exceed the cost savings. And in it, we kind of know this

79
00:05:23,848 --> 00:05:27,734
is true because it's happened before. It happened every time.

80
00:05:27,772 --> 00:05:31,170
In fact, in it, we have a history of sprawl.

81
00:05:31,250 --> 00:05:34,678
The original IBM mainframes could only run one program at a

82
00:05:34,684 --> 00:05:38,518
time in the mainframe lifecycle, you could not test.

83
00:05:38,684 --> 00:05:42,026
So they created these things called logical partitions. Sort of

84
00:05:42,048 --> 00:05:45,814
like a pretend separate server. But we got partition sprawl. Partition sprawl

85
00:05:45,862 --> 00:05:49,446
and costs led to servers. And then in the server

86
00:05:49,478 --> 00:05:52,834
cycle, we got physical server sprawl, as they were physical.

87
00:05:52,902 --> 00:05:56,030
We could try to manage the sprawl by putting labels on the boxes and

88
00:05:56,100 --> 00:06:00,042
creating ownership of them. But then hardware server underusage

89
00:06:00,106 --> 00:06:03,278
led to virtual machines, and that cycle led to

90
00:06:03,364 --> 00:06:06,786
vm sprawl. It also led to software license sprawl for

91
00:06:06,808 --> 00:06:09,954
operating systems and databases within each of the vms. And that,

92
00:06:09,992 --> 00:06:13,346
bizarrely, led to consolidation projects of VM. For a little while,

93
00:06:13,448 --> 00:06:16,654
we tried to solve it by writing scripts to scrape the DNS

94
00:06:16,702 --> 00:06:19,646
list and see if we knew them all. We were sort of like someone ticking

95
00:06:19,678 --> 00:06:22,930
off their band statement to ensure the Venmo transactions are valid.

96
00:06:23,010 --> 00:06:26,194
I will tell you, I started life as a bank teller. People make mistakes.

97
00:06:26,242 --> 00:06:30,434
Always check off your bank statements. Anyway, we scripted ping sweeps

98
00:06:30,482 --> 00:06:34,186
for all of the addresses to search for excess nodes out there, but then got

99
00:06:34,208 --> 00:06:37,674
yelled at by the cybersecurity team for triggering their ddos to

100
00:06:37,712 --> 00:06:42,218
distribute a denial of service sensors. Because we were pinging everything but VM overheads.

101
00:06:42,314 --> 00:06:45,610
Well, that led to the container cycle. And surprise,

102
00:06:45,690 --> 00:06:49,466
surprise, we got container sprawl. Container overhead led

103
00:06:49,498 --> 00:06:53,614
to the microservice cycle. And we will get

104
00:06:53,652 --> 00:06:56,946
microservice sprawl. Do you know how many microservices you have in

105
00:06:56,968 --> 00:07:00,866
production today? No. Then you have sprawl. In fact, a division of

106
00:07:00,888 --> 00:07:04,814
Deloitte did some research, and 67% of it directors

107
00:07:04,862 --> 00:07:08,978
admitted they did not know the exact number used in their organization.

108
00:07:09,154 --> 00:07:12,658
Sprawl is real. How is sprawl addressed in prior cycles?

109
00:07:12,754 --> 00:07:16,326
Well, I call these edge trimmers because they're some of the

110
00:07:16,348 --> 00:07:19,794
actions you can take to clean up your microservices footpath.

111
00:07:19,922 --> 00:07:22,666
Now, I live in New York and I don't have any lawns, so hopefully the

112
00:07:22,688 --> 00:07:26,454
analogy works. There are actions. Well, these are actions

113
00:07:26,502 --> 00:07:30,074
that I took in prior cycles to solve sprawl. So let's look

114
00:07:30,112 --> 00:07:33,466
at a quick list. In prior cycles, we thought creating rules

115
00:07:33,498 --> 00:07:36,794
and processes would control the situation. It did improve

116
00:07:36,842 --> 00:07:40,202
things. It was good for physical servers, for vms,

117
00:07:40,266 --> 00:07:44,426
and even for containers. Processes and standards are great when onboarding

118
00:07:44,458 --> 00:07:48,046
new people because can hand them the processes and standards

119
00:07:48,158 --> 00:07:51,394
and they get an idea of how things are working in your environment. Also,

120
00:07:51,432 --> 00:07:55,426
when you hear of somebody building something new, you can just email the

121
00:07:55,448 --> 00:07:59,250
standards over there. But a few hints here build your naming conventions

122
00:07:59,330 --> 00:08:03,094
so they allow someone seeing something for the first time to guess

123
00:08:03,132 --> 00:08:06,326
who owns it and why it exists. Yes, it's fun to

124
00:08:06,348 --> 00:08:09,666
name your infrastructure after Rick and morty characters, but useful

125
00:08:09,698 --> 00:08:13,434
is better, and your operators will love you for it. Also, be careful they

126
00:08:13,472 --> 00:08:17,370
don't become an overhead. You must sort of accept that not everything

127
00:08:17,440 --> 00:08:21,050
will fit into a standard and not everything will be under your control.

128
00:08:21,200 --> 00:08:24,926
In the past we used to use occasional audits. We generally wrapped them around

129
00:08:25,028 --> 00:08:28,714
when we were going for an ISO certification or certification update.

130
00:08:28,762 --> 00:08:32,378
We'd do it an occasional audit to check that things were as we expected,

131
00:08:32,474 --> 00:08:36,082
as entities were more permanent in prior cycles, we found

132
00:08:36,136 --> 00:08:39,406
that performance monitors were sufficient to discover items we were not aware

133
00:08:39,438 --> 00:08:43,566
of, and that allowed us to sort of balance resources and clean up orphans.

134
00:08:43,678 --> 00:08:47,734
But microservices are different. See, microservices are

135
00:08:47,772 --> 00:08:51,110
independent. They accept a trigger, the work is done,

136
00:08:51,180 --> 00:08:55,394
and then the output produced and the microservice ends. The taximeter stops.

137
00:08:55,522 --> 00:08:59,126
That independence means that inside the microservice you

138
00:08:59,148 --> 00:09:02,806
cannot confirm that the trigger was valid, because otherwise it would lose

139
00:09:02,838 --> 00:09:07,078
its independence that you can leave. So what's

140
00:09:07,094 --> 00:09:10,474
the issue with this? Well, that can leave you with what sres are calling the

141
00:09:10,512 --> 00:09:14,186
thundering herd problem. Thundering herd is a little like the noisy neighbor

142
00:09:14,218 --> 00:09:18,110
problem in the VM world. It's when your microservice is getting called 10,000

143
00:09:18,180 --> 00:09:22,090
times. Now, 1000 of them might be valid customer facing calls,

144
00:09:22,170 --> 00:09:25,426
but the other 9000, well, they could be a typo in some code that

145
00:09:25,448 --> 00:09:28,834
just keeps calling the microservice and incurring cost for

146
00:09:28,872 --> 00:09:31,838
no reason at all. With too many triggered executions,

147
00:09:31,934 --> 00:09:35,566
you can overwhelm your microservice function. Some cloud providers

148
00:09:35,598 --> 00:09:38,930
have limits on microservice executions. They have caps.

149
00:09:39,010 --> 00:09:42,866
The typo driven thundering herd could be excluding productive

150
00:09:42,898 --> 00:09:46,530
work because it's like a denial of service on your microservice.

151
00:09:46,610 --> 00:09:49,730
So how do we solve sprawl for microservices?

152
00:09:49,890 --> 00:09:53,718
Well, with physical service, we could count the boxes with vms,

153
00:09:53,814 --> 00:09:56,886
even when they're not running. You'd have an image file, so you could scan file

154
00:09:56,918 --> 00:09:59,942
systems for image files. But microservices are ephemeral.

155
00:10:00,006 --> 00:10:03,914
They only run when they're needed. They are intended to scale and multiply.

156
00:10:04,042 --> 00:10:06,734
The nature of microservice sprawl is different.

157
00:10:06,852 --> 00:10:10,142
So sure, you can get sprawl in the number of different

158
00:10:10,196 --> 00:10:14,046
microservices created, and yes, standards and performance monitoring will

159
00:10:14,068 --> 00:10:17,394
help with that. So it's good to have those things in place. But to find

160
00:10:17,432 --> 00:10:20,894
microservices, you need to sort of poke around inside the orchestrators,

161
00:10:20,942 --> 00:10:24,434
whether it's vmware or kubernetes or azure or lambda or whatever.

162
00:10:24,552 --> 00:10:28,078
Yet there will always be sprawl in the number of

163
00:10:28,104 --> 00:10:31,794
each microservice actually running at any time. You need to correlate

164
00:10:31,842 --> 00:10:35,446
back to the trigger to identify whether you have a bug versus a lot

165
00:10:35,468 --> 00:10:39,574
of valid action going on. So how do you detect sort of unauthorized,

166
00:10:39,622 --> 00:10:43,046
noncompliant changes to their virtual environments?

167
00:10:43,158 --> 00:10:46,346
How will you have complete visibility from a single point of

168
00:10:46,368 --> 00:10:50,214
control, especially when it is ephemeral? Service mesh offerings

169
00:10:50,262 --> 00:10:54,634
seem the best approach here. Think of a service mesh as a specialized

170
00:10:54,762 --> 00:10:58,206
layer seven network for microservice APIs. There are

171
00:10:58,228 --> 00:11:01,630
many choices. You've got istio backend,

172
00:11:01,970 --> 00:11:05,310
it's backed by Google and IBM. You've got buoyance liquidy.

173
00:11:05,990 --> 00:11:09,826
In general, the sidecar proxy approach seems very popular, as seen in

174
00:11:09,848 --> 00:11:13,106
projects like Nginx and Hashicorp and Solar IO and

175
00:11:13,128 --> 00:11:17,054
others. A mesh will give you security, it'll give you the circuit breaker

176
00:11:17,102 --> 00:11:20,914
for hangs, it'll give you load balancing. And your orchestrator

177
00:11:20,962 --> 00:11:24,770
probably provides level four sort of transport layer load balancing.

178
00:11:24,850 --> 00:11:28,434
But a service mesh can implement this at layer seven, an application layer,

179
00:11:28,482 --> 00:11:32,330
and give you load balancing there. Now, on top of that, where they have

180
00:11:32,480 --> 00:11:35,994
API modification, you can even use measures to

181
00:11:36,032 --> 00:11:39,322
set up blue, green or canary deployments. So, okay to address

182
00:11:39,376 --> 00:11:42,922
sprawl? Yes. Define your processes and naming conventions

183
00:11:42,986 --> 00:11:46,686
and ensure you have performance monitors to discover and give you

184
00:11:46,708 --> 00:11:50,350
observability into microservices, what you would have had

185
00:11:50,420 --> 00:11:54,418
anyway, basically. But on top of that, introduce a solid service

186
00:11:54,504 --> 00:11:57,790
mesh to help you control the variance of microservice sprawl.

187
00:11:57,870 --> 00:12:01,410
And then from controlled sprawl comes

188
00:12:01,480 --> 00:12:04,418
happiness. Let's talk about feeling happy for a second.

189
00:12:04,504 --> 00:12:08,514
Philosophically speaking, there are two paths to feeling happy, the hedonistic

190
00:12:08,562 --> 00:12:12,070
and the eudemonic. Hedonists take the view that in order to live a happy life,

191
00:12:12,140 --> 00:12:15,634
we must maximize pleasure and avoid pain. In contrast,

192
00:12:15,682 --> 00:12:18,950
the eudemonic approach takes the long view that we should live

193
00:12:19,020 --> 00:12:22,646
authentically and for the greater good. If we take the eudemonic

194
00:12:22,678 --> 00:12:26,106
approach, we strive for meaning. We use our strengths to

195
00:12:26,128 --> 00:12:29,642
contribute to something that is greater than ourselves. Leading a happy

196
00:12:29,696 --> 00:12:33,054
life is not about avoiding hard times. It's about being able

197
00:12:33,092 --> 00:12:36,574
to respond to adversity in a way that allows us to grow

198
00:12:36,612 --> 00:12:40,014
from the experience. Now, recently I've noticed a new

199
00:12:40,052 --> 00:12:43,662
term coming up in discussions among the european strategy community,

200
00:12:43,796 --> 00:12:47,234
regeneration. Now, you may already be aware of it, but I hadn't really run into

201
00:12:47,272 --> 00:12:50,914
it in terms of business, and it strategy before regeneration is

202
00:12:50,952 --> 00:12:54,206
about leaving things better than when you found them, not just finding

203
00:12:54,238 --> 00:12:57,614
efficiencies, but creating improvements. Create your

204
00:12:57,672 --> 00:13:01,714
microservices for the next generation. Build your cloud native

205
00:13:01,762 --> 00:13:04,918
code for the next person who will have to build on it

206
00:13:04,924 --> 00:13:08,246
and maintain it. Put the effort in to make life better for

207
00:13:08,268 --> 00:13:11,706
the operators and the engineers who will next touch it. This is

208
00:13:11,728 --> 00:13:16,214
the eudemonic approach to happiness. Now, I said that from controlled sprawl

209
00:13:16,342 --> 00:13:19,898
comes happiness about cost. Why would we be happy spending more?

210
00:13:19,984 --> 00:13:23,742
Because it's worth it. Because when you don't have sprawl, you have service.

211
00:13:23,876 --> 00:13:28,000
When you have control, it means that they're not just randomly spawning themselves

212
00:13:28,370 --> 00:13:31,774
or exploiting costs out there. You know there's a reason they run

213
00:13:31,812 --> 00:13:35,246
and you understand what the value of that is. And if you're careful with your

214
00:13:35,268 --> 00:13:38,658
microservices, if you can correlate them back to their business value,

215
00:13:38,744 --> 00:13:42,210
then you will know that what you have is earning its keep.

216
00:13:42,280 --> 00:13:45,474
So you'll be happy that you're spending more money because you know that it is

217
00:13:45,512 --> 00:13:48,742
better for the business. It is better for your enterprise or your government body

218
00:13:48,796 --> 00:13:52,546
or whoever you're working for. If we can discover, secure and monitor

219
00:13:52,578 --> 00:13:56,146
them for performance and effectiveness, then it's no longer sprawl.

220
00:13:56,258 --> 00:14:00,106
Then if you find yourself spending more on cloud native than you expected, be happy.

221
00:14:00,208 --> 00:14:03,530
You made it more efficient. And now people are finding ways

222
00:14:03,600 --> 00:14:07,830
to create value using that more efficient approach that you created.

223
00:14:07,910 --> 00:14:11,290
That's just the devons paradox working for you. Okay,

224
00:14:11,360 --> 00:14:14,574
here are some links. The first is to my personal website where you can read

225
00:14:14,612 --> 00:14:17,806
some of my blog posts and you can track where I'm speaking next.

226
00:14:17,908 --> 00:14:21,070
The others are some of the research for this presentation

227
00:14:21,490 --> 00:14:25,214
that you might find useful at the end, here is the page for

228
00:14:25,252 --> 00:14:28,622
inside quantum technology where I'm writing now. You can sign

229
00:14:28,676 --> 00:14:32,046
up. If you follow that link, you can sign up for the newsletter. It's a

230
00:14:32,068 --> 00:14:35,314
free newsletter that comes out and that will keep you current on quantum quantum

231
00:14:35,362 --> 00:14:38,406
computing. So with all of that, let me say thank you for your time.

232
00:14:38,508 --> 00:14:42,134
You can reach me on Twitter or LinkedIn. Find me in slack and

233
00:14:42,172 --> 00:14:45,718
chat rooms for the event. But mainly, thank you for your time.

234
00:14:45,804 --> 00:14:49,526
I hope you found this valuable. And thank you for our hosts for running this

235
00:14:49,548 --> 00:14:49,940
event today.

