1
00:00:34,610 --> 00:00:38,914
Hello everyone, welcome to the Conf fourty two and the ballerina programming language

2
00:00:38,962 --> 00:00:42,262
session. In this session I'm going to discuss in detail about

3
00:00:42,316 --> 00:00:46,050
ballerina programming language, which is an open source programming language.

4
00:00:46,210 --> 00:00:50,142
It makes it very easy to write network based application

5
00:00:50,316 --> 00:00:54,074
for the cloud. Before going to the details, let me introduce

6
00:00:54,122 --> 00:00:58,218
myself. I'm Anupama Pathirage, currently working as director of engineering

7
00:00:58,234 --> 00:01:02,266
at WSO two. WSO two is a leading technology provider

8
00:01:02,298 --> 00:01:05,758
in the domains like integration, identity and access management,

9
00:01:05,854 --> 00:01:09,154
API management and so on. Ballerina language is

10
00:01:09,192 --> 00:01:12,958
designed and implemented at WSO two, but currently it's driven

11
00:01:12,974 --> 00:01:15,140
by the open source community as well.

12
00:01:16,150 --> 00:01:20,034
WSo first, let's look at what are the problems that we are facing

13
00:01:20,082 --> 00:01:23,154
today and where we are in terms of application development

14
00:01:23,202 --> 00:01:26,934
methodologies. If you look back the history a little bit, in many

15
00:01:26,972 --> 00:01:30,134
decades ago we had systems like mainframe systems

16
00:01:30,182 --> 00:01:34,214
with legacy and centralized applications.

17
00:01:34,342 --> 00:01:38,214
And then gradually client server based distributed

18
00:01:38,262 --> 00:01:41,402
applications came into the picture. And after that,

19
00:01:41,536 --> 00:01:45,102
with the improvements in the Internet and cloud based

20
00:01:45,156 --> 00:01:48,926
technologies, things has evolved a lot. And the way that

21
00:01:48,948 --> 00:01:52,302
we are writing programs and the way that we are designing things

22
00:01:52,356 --> 00:01:56,030
has evolved a lot. And then as developers,

23
00:01:56,190 --> 00:02:00,306
everyone has to adapt to these changes. And if

24
00:02:00,328 --> 00:02:04,066
we look at how we approach the given problem or

25
00:02:04,088 --> 00:02:07,190
when we are developing solution for a given programming problem,

26
00:02:07,340 --> 00:02:11,282
in the old days, we considered libraries

27
00:02:11,346 --> 00:02:15,442
as a unit of logical components,

28
00:02:15,506 --> 00:02:19,580
as that is the component that we are dealing with on the

29
00:02:19,950 --> 00:02:23,814
systems, which are very much centralized. But in nowadays,

30
00:02:23,942 --> 00:02:27,450
it's unavoidable to have communication links between different

31
00:02:27,520 --> 00:02:30,886
systems. That means we have to talk to different endpoints and

32
00:02:30,928 --> 00:02:34,574
get some data and process them and send them over wire to

33
00:02:34,612 --> 00:02:38,382
some other place. So that's a normal thing. And that means

34
00:02:38,516 --> 00:02:42,778
APIs are becoming the natural unit of execution,

35
00:02:42,874 --> 00:02:46,334
natural unit of applications these

36
00:02:46,372 --> 00:02:49,762
days. So if you look at any

37
00:02:49,816 --> 00:02:53,362
kind of application, it usually has a front end

38
00:02:53,496 --> 00:02:56,600
as well as a back end. So back end means

39
00:02:58,170 --> 00:03:02,054
in nowadays applications, it doesn't work on its own.

40
00:03:02,172 --> 00:03:05,798
It has to talk to many different systems and it has to extract data,

41
00:03:05,884 --> 00:03:09,834
process data, and then move it out from

42
00:03:09,872 --> 00:03:13,974
that system to some other place. That means it involves

43
00:03:14,022 --> 00:03:18,054
with many different network protocols, many different data formats,

44
00:03:18,182 --> 00:03:21,850
so it's unavoidable to deal with that complexity.

45
00:03:22,010 --> 00:03:26,170
And also, in today's world, there are so many languages,

46
00:03:26,330 --> 00:03:29,934
programming languages, which can handle great front end

47
00:03:29,972 --> 00:03:34,094
stuff as well as backend things. But although

48
00:03:34,142 --> 00:03:38,370
there are a lot of such languages to develop backend applications,

49
00:03:38,710 --> 00:03:42,562
it is not that easy when we talk about

50
00:03:42,616 --> 00:03:47,170
this problem, because API integrations and this integration

51
00:03:47,330 --> 00:03:50,758
problem is complex due to the

52
00:03:50,844 --> 00:03:54,582
network interactions as well as different data types and

53
00:03:54,636 --> 00:03:58,114
also different communication paradigms.

54
00:03:58,242 --> 00:04:02,220
So that is the problem that we are trying to solve because we

55
00:04:02,590 --> 00:04:06,534
observed this problem or this hurdle for the developers

56
00:04:06,582 --> 00:04:10,102
for a long period of time. And if we look at the different

57
00:04:10,176 --> 00:04:13,934
technologies, integration products and technologies in

58
00:04:13,972 --> 00:04:17,790
one side, for example ESPs, e, AI,

59
00:04:18,210 --> 00:04:21,962
BPM, those things are not that much cloud native

60
00:04:22,106 --> 00:04:25,762
and those are giving proper or

61
00:04:25,896 --> 00:04:29,170
great functionalities, but maybe

62
00:04:29,240 --> 00:04:32,674
not the ideal solution for the cloud. And on the other

63
00:04:32,712 --> 00:04:36,110
hand, we have general purpose programming languages and frameworks

64
00:04:36,190 --> 00:04:40,054
which are very much flexible, but at the same time they don't give

65
00:04:40,092 --> 00:04:43,894
the right set of abstractions to deal with the problem in this

66
00:04:43,932 --> 00:04:47,974
domain. So that is why we have introduced another language

67
00:04:48,022 --> 00:04:51,978
called ballerina to deal with those two different

68
00:04:52,064 --> 00:04:55,802
ends. It is providing the capabilities like

69
00:04:55,856 --> 00:04:59,274
any other integration product and technologies, as well as it

70
00:04:59,312 --> 00:05:02,926
gives the flexibility of the programming language to deal with the

71
00:05:02,948 --> 00:05:06,558
complexities of the application developers while providing the

72
00:05:06,564 --> 00:05:10,494
right set of abstractions. So if I talk

73
00:05:10,532 --> 00:05:13,806
a little bit about the history of the language, we started it

74
00:05:13,828 --> 00:05:17,554
in around 2016, but real idea came into

75
00:05:17,592 --> 00:05:21,346
the picture even before that, maybe around 2010,

76
00:05:21,448 --> 00:05:24,546
because in WSO two we developed application for

77
00:05:24,568 --> 00:05:28,440
these domains and we observed the problems and we identified the

78
00:05:28,810 --> 00:05:32,422
blockers that developers are facing. So then we

79
00:05:32,476 --> 00:05:36,466
thought a programming language would be the ideal thing to solve

80
00:05:36,498 --> 00:05:40,186
this problem. It's a general purpose programming language, and if you

81
00:05:40,208 --> 00:05:43,382
look at the syntax, you may feel like it's

82
00:05:43,446 --> 00:05:47,254
familiar because we have CC plus plus family syntax

83
00:05:47,302 --> 00:05:50,890
in the language, but at the same time it is specializing

84
00:05:50,970 --> 00:05:54,350
in the domain of integration and cloud based

85
00:05:54,420 --> 00:05:58,442
problems. It provides the right set of abstractions

86
00:05:58,586 --> 00:06:01,966
and various tools to make it easy for

87
00:06:01,988 --> 00:06:05,790
the developer and it's open source project

88
00:06:05,940 --> 00:06:09,826
which is given by the open source community. We started in

89
00:06:09,848 --> 00:06:13,282
2016 and it went through multiple iterations because

90
00:06:13,336 --> 00:06:16,930
we have our own compiler and platform

91
00:06:17,080 --> 00:06:20,694
around that to make it a complete thing. And we

92
00:06:20,732 --> 00:06:24,486
released our first version in 2019 and the

93
00:06:24,508 --> 00:06:29,962
current major version is Son Lake. We released it in 2022 and

94
00:06:30,016 --> 00:06:33,590
right now we are developing many features improvements

95
00:06:33,670 --> 00:06:36,934
over the sown lake as well as we are doing separate

96
00:06:36,982 --> 00:06:40,874
tracks to deal with other things like different language

97
00:06:40,922 --> 00:06:43,822
aspects or major additions to the spec,

98
00:06:43,956 --> 00:06:48,014
as well as native compilation to

99
00:06:48,052 --> 00:06:51,578
support native compilation for the ballerina language. So that's

100
00:06:51,594 --> 00:06:54,866
the status of the language. And let's look at what

101
00:06:54,888 --> 00:06:58,354
are the unique features of ballerina, which makes it easy for

102
00:06:58,392 --> 00:07:01,970
the application developers. One main thing

103
00:07:02,040 --> 00:07:05,906
about programming is there are many different programming

104
00:07:05,938 --> 00:07:08,550
language. It can be different kinds,

105
00:07:09,130 --> 00:07:12,614
data oriented, object oriented, function oriented and

106
00:07:12,652 --> 00:07:16,066
so on. In Ballerina we consider it as a data oriented

107
00:07:16,098 --> 00:07:20,246
programming language, because if we look at any programming

108
00:07:20,438 --> 00:07:24,710
piece of program which works with many different entities

109
00:07:24,790 --> 00:07:28,460
or endpoints, usually what we share is data.

110
00:07:29,150 --> 00:07:31,994
In earlier days we share code over the network,

111
00:07:32,122 --> 00:07:35,566
like in the RPC style of applications, but we no longer

112
00:07:35,668 --> 00:07:39,614
do that because of the security concerns and other things. Instead we

113
00:07:39,652 --> 00:07:43,342
move data around. That means we need to have better ways

114
00:07:43,396 --> 00:07:46,770
of representing data in the network as well as the data

115
00:07:46,840 --> 00:07:50,446
in the memory. So in Ballerina we designed

116
00:07:50,478 --> 00:07:53,950
in a way that we emphasize the plain data concepts

117
00:07:54,030 --> 00:07:58,118
that is independent of any code and protocol and

118
00:07:58,204 --> 00:08:01,718
the ways of processing, especially how we can access data,

119
00:08:01,804 --> 00:08:05,414
how we can transform data. So those

120
00:08:05,452 --> 00:08:09,542
things should be very easy and intuitive for the application developer.

121
00:08:09,686 --> 00:08:13,002
And at the same time in ballerina we have

122
00:08:13,056 --> 00:08:16,422
different support for different protocols

123
00:08:16,486 --> 00:08:20,778
and especially different data types. For example JSON XML.

124
00:08:20,874 --> 00:08:23,882
Those are primitive types in the language like string,

125
00:08:24,026 --> 00:08:27,920
int, flot like in other languages. And also

126
00:08:28,290 --> 00:08:31,130
ballerina language provide query like syntax.

127
00:08:31,210 --> 00:08:35,534
If you check this code, you can see SQL like syntax

128
00:08:35,582 --> 00:08:39,074
here. This is to process the data which

129
00:08:39,112 --> 00:08:43,134
are coming from the wire. You can see the data received via the wire

130
00:08:43,182 --> 00:08:47,366
is assigned to memory in memory type that

131
00:08:47,388 --> 00:08:50,614
we defined in the application level and

132
00:08:50,652 --> 00:08:53,830
then we process it using query like syntax.

133
00:08:54,170 --> 00:08:57,774
It is very easy because we don't have to write complex

134
00:08:57,842 --> 00:09:02,810
logic to get lot of filtering as well as processing

135
00:09:03,870 --> 00:09:08,502
of the data. And then we provide network

136
00:09:08,566 --> 00:09:12,094
oriented capabilities because network is the primary thing

137
00:09:12,132 --> 00:09:15,866
when we talk about integration and cloud native applications

138
00:09:15,978 --> 00:09:19,806
and type system type system is playing a

139
00:09:19,828 --> 00:09:23,938
key role here because we have to deal with the data on

140
00:09:23,944 --> 00:09:27,890
the wire as well as data in the application or memory level

141
00:09:27,960 --> 00:09:31,586
as well. So here you

142
00:09:31,608 --> 00:09:35,426
can see we are talking to endpoint and talking to endpoint is

143
00:09:35,448 --> 00:09:39,254
very easy in the language. The concepts of the client service are very

144
00:09:39,292 --> 00:09:42,550
much intuitive and then the return type represent

145
00:09:43,130 --> 00:09:46,834
the output from the network. Endpoint usually JSON XML

146
00:09:46,882 --> 00:09:50,582
type of responses. And we can map it directly

147
00:09:50,726 --> 00:09:54,410
to a data structure defined in the application without

148
00:09:54,480 --> 00:09:59,210
doing explicit casting or any other processing. So that eliminates

149
00:10:00,850 --> 00:10:04,414
very much boilerplate code if you want to convert things.

150
00:10:04,532 --> 00:10:08,250
And it support well known data formats and converting

151
00:10:08,330 --> 00:10:10,720
and accessing is very easy.

152
00:10:11,890 --> 00:10:14,420
And other concept is service.

153
00:10:15,030 --> 00:10:19,298
Service means similar to retrieve data from other

154
00:10:19,464 --> 00:10:23,314
endpoints and services. We have to serve data as

155
00:10:23,352 --> 00:10:26,934
well. So ballerina service concept gives you a

156
00:10:26,972 --> 00:10:30,120
very much easy way to write services.

157
00:10:31,930 --> 00:10:35,266
A service concept is a first class thing in the language

158
00:10:35,378 --> 00:10:39,238
and depending on the listener that we are binding to, that it

159
00:10:39,324 --> 00:10:43,494
act as a different service type. If you can see here we are attaching

160
00:10:43,542 --> 00:10:46,954
HTTP listener to this service. That means this will

161
00:10:46,992 --> 00:10:50,640
act as a HTTP service. So based on the

162
00:10:51,410 --> 00:10:55,710
attached listener service will behave differently because

163
00:10:55,860 --> 00:11:00,250
here you can see we are developing HTTP listener

164
00:11:00,330 --> 00:11:03,966
and you don't need to worry about internal network details. All the

165
00:11:03,988 --> 00:11:07,570
things are handled by the listener and the service itself.

166
00:11:07,720 --> 00:11:11,314
What you have to do is implement the resource functions to match

167
00:11:11,352 --> 00:11:15,170
with the requirement of the service. So in HTTP world it's usually

168
00:11:15,240 --> 00:11:19,126
get post delete those kind of operations and we can

169
00:11:19,148 --> 00:11:22,710
write resource functions for these things. You can see get here

170
00:11:22,780 --> 00:11:26,882
post here. Those goes very close with the HTTP

171
00:11:26,946 --> 00:11:30,250
world and what you have to mainly focus on the business

172
00:11:30,320 --> 00:11:34,534
logic, not anything else about the network or the underlying

173
00:11:34,582 --> 00:11:38,154
complexities. And it returns the data types in the

174
00:11:38,192 --> 00:11:41,526
language itself or the data types that you have defined,

175
00:11:41,638 --> 00:11:46,126
and then the listener will handle it internally when it's returning to

176
00:11:46,148 --> 00:11:49,502
convert it to the proper format, the default formats and so on.

177
00:11:49,636 --> 00:11:53,486
So here also we support two different interface styles.

178
00:11:53,598 --> 00:11:57,566
You know, in RPC style we usually have remote

179
00:11:57,598 --> 00:12:01,614
methods. In that case within the service you have to define remote methods

180
00:12:01,742 --> 00:12:05,374
and restful style like HTTP graphql.

181
00:12:05,502 --> 00:12:09,426
We have to write resource functions. So what the developer

182
00:12:09,458 --> 00:12:13,606
has to do it is focus on the business logic because

183
00:12:13,788 --> 00:12:17,374
the right level of abstraction is provided by the language

184
00:12:17,522 --> 00:12:22,554
to deal with the community of developing the services

185
00:12:22,672 --> 00:12:26,042
and the boundaries and how we handle things.

186
00:12:26,176 --> 00:12:29,722
And also concurrence is playing a key role here.

187
00:12:29,856 --> 00:12:33,674
In network applications, concurrence is kind of unavoidable

188
00:12:33,722 --> 00:12:37,354
thing and we provide different concepts

189
00:12:37,402 --> 00:12:41,546
and support even during compile time to guarantee the compiled

190
00:12:41,578 --> 00:12:45,262
time safety as well as runtime, concurrency,

191
00:12:45,326 --> 00:12:48,674
safetiness and similar to the services,

192
00:12:48,792 --> 00:12:52,226
clients are also very much important. Clients means we

193
00:12:52,248 --> 00:12:56,290
need to invoke other endpoints of different types of protocols.

194
00:12:56,370 --> 00:13:00,290
So language provides support for different clients

195
00:13:00,450 --> 00:13:04,226
and depending on the client, client is a language concept

196
00:13:04,258 --> 00:13:08,440
and depending on from which protocol that you are,

197
00:13:08,910 --> 00:13:12,774
depending on which protocol that you are using to access the client,

198
00:13:12,902 --> 00:13:16,054
we can define different type of clients. It can be GRPC,

199
00:13:16,102 --> 00:13:20,274
Websocket, graphQL and many more different protocols.

200
00:13:20,342 --> 00:13:23,722
So creating a client is easy. You can provide additional

201
00:13:23,786 --> 00:13:27,294
parameters if needed and also invoking the

202
00:13:27,332 --> 00:13:30,666
functionalities or get the details

203
00:13:30,698 --> 00:13:34,082
or get the response out of it. Also very easy.

204
00:13:34,216 --> 00:13:38,094
The syntax for calling or invoking an endpoint

205
00:13:38,222 --> 00:13:41,874
is like this, and also you can bind data very

206
00:13:41,912 --> 00:13:45,558
easily the response data. So then

207
00:13:45,644 --> 00:13:49,720
that means with all these things developers can focus on

208
00:13:50,250 --> 00:13:54,182
real business logic and they can then take

209
00:13:54,236 --> 00:13:57,926
more time to focus on that and another concept

210
00:13:57,958 --> 00:14:00,442
is when we think about enterprise application,

211
00:14:00,576 --> 00:14:03,802
concurrency and reliability is very much important because

212
00:14:03,856 --> 00:14:07,590
we have to always make sure our applications

213
00:14:07,670 --> 00:14:11,802
are behaving in a reliable way. And also in the integration

214
00:14:11,866 --> 00:14:14,894
world, concurrency is mandatory thing.

215
00:14:15,012 --> 00:14:19,354
So like any other language, we provide concurrency

216
00:14:19,482 --> 00:14:23,262
handling constructs. We have asynchronous function calls,

217
00:14:23,326 --> 00:14:26,062
workers and strand concepts,

218
00:14:26,206 --> 00:14:29,298
which provides a logical thread of control.

219
00:14:29,464 --> 00:14:33,186
And all these things are there. At the same time,

220
00:14:33,368 --> 00:14:37,266
ballerina guarantees or provides many mechanisms

221
00:14:37,298 --> 00:14:41,366
to ensure the concurrency safetyness during the compile time itself

222
00:14:41,548 --> 00:14:45,682
by means of different mutability

223
00:14:45,746 --> 00:14:49,382
concepts. So those things are a little bit complex

224
00:14:49,446 --> 00:14:53,862
and difficult to handle in a small session like this. But Belna

225
00:14:53,926 --> 00:14:57,690
tries to be proactive when giving

226
00:14:57,760 --> 00:15:01,434
the warnings and other errors related to concurrency

227
00:15:01,482 --> 00:15:05,642
problem without waiting till the runtime. And also reliability.

228
00:15:05,786 --> 00:15:09,514
That means usually, for example, transactions plays

229
00:15:09,562 --> 00:15:13,970
a huge role in enterprise applications. We need to guarantee

230
00:15:15,190 --> 00:15:18,606
the atomic operations. And in ballerina,

231
00:15:18,718 --> 00:15:23,026
transaction is a first class thing, and it's a syntax by

232
00:15:23,048 --> 00:15:26,322
the syntax itself, it defines the transaction boundaries.

233
00:15:26,466 --> 00:15:29,894
And you can write your business logic within this

234
00:15:29,932 --> 00:15:33,606
syntax block, and then it guarantees the

235
00:15:33,628 --> 00:15:38,086
atomic operation of the execution of the internal

236
00:15:38,118 --> 00:15:42,138
code. So likewise it tries to address

237
00:15:42,224 --> 00:15:45,894
the problem of the problems that integration developers

238
00:15:45,942 --> 00:15:50,054
are facing. And there are many more such

239
00:15:50,192 --> 00:15:54,110
concepts like HTTP resiliency

240
00:15:55,090 --> 00:15:58,894
protocols and how we handle things like that.

241
00:15:59,092 --> 00:16:02,800
And another important thing is usually when we design an application,

242
00:16:03,750 --> 00:16:07,474
we write or withdraw diagrams to explain things and

243
00:16:07,512 --> 00:16:10,942
to understand things and to visualize

244
00:16:11,006 --> 00:16:14,498
things properly. But in ballerina we don't have to

245
00:16:14,504 --> 00:16:18,386
do it explicitly because it provides different level of diagrams

246
00:16:18,418 --> 00:16:22,342
to make it easy for the developers. So every

247
00:16:22,396 --> 00:16:26,082
piece of program that you write, there's an equivalent diagram

248
00:16:26,146 --> 00:16:30,106
which is automatically generated. So this is a program in the

249
00:16:30,128 --> 00:16:34,054
left side, and in the right side you can see the diagram

250
00:16:34,102 --> 00:16:38,300
which is automatically generated. And also the important thing is

251
00:16:38,910 --> 00:16:42,582
we maintain the parity between the code and the diagram.

252
00:16:42,646 --> 00:16:46,234
That means if you change something in the code, it appears automatically

253
00:16:46,282 --> 00:16:49,886
in the diagram. And if you change something in the diagram, diagram is

254
00:16:49,908 --> 00:16:53,262
editable. You can see these plus points where you can

255
00:16:53,396 --> 00:16:56,722
add anything that you can do in the code side

256
00:16:56,856 --> 00:17:00,434
using the diagram, and it will generate the code

257
00:17:00,632 --> 00:17:04,290
if you add things on the diagram side. And when you look at the code,

258
00:17:04,360 --> 00:17:08,006
sometimes you can't identify high

259
00:17:08,028 --> 00:17:11,958
level view, what are the interactions, which is very important

260
00:17:12,044 --> 00:17:15,654
in integration kind of application. So here you can see

261
00:17:15,772 --> 00:17:19,254
we are interacting with two different endpoints. One is

262
00:17:19,292 --> 00:17:22,506
GitHub and other one is Google sheets. And then we

263
00:17:22,528 --> 00:17:26,374
are getting responses and do some processing. And this is the diagram

264
00:17:26,422 --> 00:17:30,830
generated in the VS code plugin. You can install the VS code plugin

265
00:17:31,650 --> 00:17:35,674
from the VS code marketplace and this gives the diagram

266
00:17:35,802 --> 00:17:38,942
view automatically. So that's very much

267
00:17:38,996 --> 00:17:42,330
helpful when you are talking to some other stakeholders

268
00:17:42,410 --> 00:17:45,826
or if you are discussing among the developers about the application,

269
00:17:46,008 --> 00:17:49,678
or if you are trying to understand the application overall. Big picture.

270
00:17:49,774 --> 00:17:56,882
So this is like a sequence diagram where we have vertical

271
00:17:56,946 --> 00:18:00,582
lines which represent each thread of execution as well as

272
00:18:00,636 --> 00:18:04,066
different endpoints. And these horizontal lines represent

273
00:18:04,098 --> 00:18:07,834
the interactions between those different endpoints and the

274
00:18:07,872 --> 00:18:11,450
actors. And those are the not only

275
00:18:11,520 --> 00:18:15,286
diagramming features that we have in the Belarna.

276
00:18:15,478 --> 00:18:19,130
We provide different level of diagram capabilities. One thing

277
00:18:19,200 --> 00:18:22,574
is the sequence diagram, and there are so many other

278
00:18:22,612 --> 00:18:25,678
things including architecture diagram as well.

279
00:18:25,764 --> 00:18:30,190
If you are developing a complex application which involves multiple

280
00:18:31,570 --> 00:18:35,246
components or services or multiple modules,

281
00:18:35,358 --> 00:18:38,642
then it gives that view as well,

282
00:18:38,696 --> 00:18:42,942
like high level view on how different components are interacting

283
00:18:43,006 --> 00:18:46,722
with each other as well. What are the dependencies and how

284
00:18:46,776 --> 00:18:50,646
they are in working different application.

285
00:18:50,828 --> 00:18:54,438
And another thing is the data mapping feature. So usually

286
00:18:54,524 --> 00:18:58,162
when we deal with data coming over the wire,

287
00:18:58,226 --> 00:19:02,582
we have to process them and especially we have to convert them into different formats

288
00:19:02,646 --> 00:19:06,486
or different data types. So as you can see here, language provides

289
00:19:06,518 --> 00:19:11,146
the capabilities to map in

290
00:19:11,168 --> 00:19:14,766
a very convenient way, because if you have to write all the

291
00:19:14,788 --> 00:19:18,446
logic of mapping in hand, it's very difficult task if

292
00:19:18,468 --> 00:19:21,582
you have large payloads, but in this

293
00:19:21,636 --> 00:19:25,410
view you can easily drag and drop or connect the different

294
00:19:25,480 --> 00:19:29,442
fields from opensource type to the target type.

295
00:19:29,576 --> 00:19:33,390
And also in between you can type whatever the custom logic

296
00:19:33,470 --> 00:19:36,994
in mapping. Sometimes you may have to do some intermediate

297
00:19:37,042 --> 00:19:41,122
step or calculation before mapping, then ballerina

298
00:19:41,186 --> 00:19:45,282
support that as well. So along with all these diagram capabilities,

299
00:19:45,346 --> 00:19:49,126
it's very easy to write programs even if you doesn't

300
00:19:49,238 --> 00:19:53,002
know much about the language. And then another

301
00:19:53,056 --> 00:19:57,302
feature is built in observability. Every ballerina program is automatically

302
00:19:57,366 --> 00:19:59,942
observable by any open telemetry tool.

303
00:20:00,096 --> 00:20:03,770
And it has three main areas like matrix tracing

304
00:20:03,850 --> 00:20:07,514
and login. And you can connect to external

305
00:20:07,562 --> 00:20:10,974
systems like Prometheus, Grafana, Yeager or

306
00:20:11,012 --> 00:20:15,058
any other login platforms to visualize or

307
00:20:15,144 --> 00:20:18,354
to observe the behaviors in the runtime. So that

308
00:20:18,392 --> 00:20:21,522
capability is built into the language. It's just a matter of

309
00:20:21,576 --> 00:20:25,286
enabling or disabling it, and it gives the

310
00:20:25,308 --> 00:20:27,990
support to connect with these tools.

311
00:20:28,650 --> 00:20:32,520
And another important thing when it comes to the cloud is

312
00:20:33,690 --> 00:20:37,398
how easy it is to develop or using your code

313
00:20:37,564 --> 00:20:41,034
or deploy your code in the cloud. Usually the

314
00:20:41,072 --> 00:20:44,154
practices developers are developing it and it hand over the

315
00:20:44,192 --> 00:20:47,642
relevant artifacts to the deployment engineers and then do

316
00:20:47,696 --> 00:20:51,550
all the artifact generations to the cloud

317
00:20:51,620 --> 00:20:55,674
environment and the deployment environments, and then do the deployment.

318
00:20:55,802 --> 00:20:59,114
But in ballerina, since it's focused

319
00:20:59,162 --> 00:21:03,330
on the cloud deployment most of the time, we provide easy

320
00:21:03,400 --> 00:21:07,026
ways to generate the deployment artifacts as

321
00:21:07,048 --> 00:21:10,962
well. Here you can see Bellbuild command. This is a simple hello

322
00:21:11,016 --> 00:21:14,734
world program or service written in ballerina. In the Bellbuild

323
00:21:14,782 --> 00:21:18,360
command, we can provide additional argument called cloud

324
00:21:18,730 --> 00:21:22,082
and with the parameters of the environment

325
00:21:22,146 --> 00:21:25,254
that you want to deploy. For example here,

326
00:21:25,452 --> 00:21:29,034
this example, it's kubernetes. It can be Docker things like

327
00:21:29,072 --> 00:21:32,522
that. And when you provide that, it builds or

328
00:21:32,576 --> 00:21:35,994
it generates the artifacts that you need

329
00:21:36,032 --> 00:21:39,654
to have to deployment as well. For example Docker

330
00:21:39,702 --> 00:21:43,966
files as well as Kubernetes artifacts including service

331
00:21:44,068 --> 00:21:47,774
deployment and other YAML files. So then

332
00:21:47,812 --> 00:21:51,386
when you do that, what it does is it extracts

333
00:21:51,418 --> 00:21:55,362
some of the parameters and other things from the code itself. And also

334
00:21:55,416 --> 00:21:59,426
you can config things. Sometimes you

335
00:21:59,448 --> 00:22:03,106
might need to improve the behaviors by providing more

336
00:22:03,128 --> 00:22:06,690
memory and other things. You can provide those in config

337
00:22:06,770 --> 00:22:10,934
ToML to change the generated artifact values. And then

338
00:22:11,052 --> 00:22:14,962
based on all these things, it will generate the cloud artifacts

339
00:22:15,026 --> 00:22:18,540
where you can customize and deploy if you need.

340
00:22:18,990 --> 00:22:22,586
So that is about making it easy for the cloud.

341
00:22:22,688 --> 00:22:26,586
And that is not only about that, because since it's a full platform,

342
00:22:26,688 --> 00:22:30,522
it has support for many cloud connectors

343
00:22:30,586 --> 00:22:34,240
and cloud deployment capabilities and

344
00:22:34,610 --> 00:22:38,574
different ways to connect different cloud providers, things like

345
00:22:38,612 --> 00:22:42,922
that. So one other

346
00:22:42,996 --> 00:22:46,814
important thing is right now, ballerina is written in Java.

347
00:22:46,942 --> 00:22:50,926
That means compiler is written in Java and it generates JVM

348
00:22:50,958 --> 00:22:54,510
bytecode. And also it provides Java interoperability

349
00:22:54,590 --> 00:22:58,070
because of that. So that means if you have a piece of code

350
00:22:58,140 --> 00:23:01,458
written in Java, and if you want to invoke it using a ballerina

351
00:23:01,554 --> 00:23:04,802
code, you can easily use the Java interoperability

352
00:23:04,866 --> 00:23:08,842
capabilities so that you can link that Java code

353
00:23:08,896 --> 00:23:14,006
into the ballerina code. And also, although it's

354
00:23:14,038 --> 00:23:17,738
written in Java and generate JVM bytecode, the semantics of

355
00:23:17,744 --> 00:23:22,218
the langauge were carefully designed to be independent of the Java and JVM.

356
00:23:22,314 --> 00:23:26,350
Because our target is to create another implementation

357
00:23:26,930 --> 00:23:30,842
which generates a native bytecode, that work is currently in progress.

358
00:23:30,906 --> 00:23:34,266
That's what we called N Valorina, and also recently

359
00:23:34,298 --> 00:23:38,510
we introduced a native flag which generates gralvm

360
00:23:38,590 --> 00:23:42,594
native executables when building the ballerina project.

361
00:23:42,712 --> 00:23:46,630
So ballerina is designed carefully not to have

362
00:23:46,700 --> 00:23:50,760
tight coupling with the Java or JVM. In future

363
00:23:51,210 --> 00:23:55,014
we will provide more native kind

364
00:23:55,052 --> 00:23:57,080
of artifacts as well.

365
00:23:58,250 --> 00:24:01,318
And also, ballerina is not just a language,

366
00:24:01,414 --> 00:24:03,500
it offers a full platform,

367
00:24:04,190 --> 00:24:08,182
especially the Vs code plugin which provides all the capabilities

368
00:24:08,246 --> 00:24:11,658
that I have mentioned including source and graphical editing,

369
00:24:11,754 --> 00:24:15,230
debugging and diagram generation

370
00:24:15,970 --> 00:24:20,222
for like architectural view and other things. And it

371
00:24:20,276 --> 00:24:23,874
provides the capabilities that any other

372
00:24:24,072 --> 00:24:27,746
vs code plugin provides for any other language, but at the same time

373
00:24:27,848 --> 00:24:31,694
with the diagram aspects and deployment aspects

374
00:24:31,822 --> 00:24:35,294
it provides some additional features as well

375
00:24:35,432 --> 00:24:39,142
and also generating or working

376
00:24:39,196 --> 00:24:41,938
with the schemas like Open API, GraphQL,

377
00:24:42,034 --> 00:24:45,554
GrPC. Those are very much easy and to generate

378
00:24:45,602 --> 00:24:49,450
the API documentation we have commands and also

379
00:24:49,520 --> 00:24:53,242
test framework is similar to most of the language just

380
00:24:53,296 --> 00:24:55,930
but with service mocking and other stuff too.

381
00:24:56,080 --> 00:24:59,190
And Belna contains

382
00:24:59,270 --> 00:25:02,506
standard library and extended library which provides

383
00:25:02,538 --> 00:25:05,802
support for many different protocols like HTTP,

384
00:25:05,866 --> 00:25:09,502
GrPC, Websocket as first class

385
00:25:09,556 --> 00:25:13,250
things. And also we have extended library with

386
00:25:13,320 --> 00:25:17,102
a lot of connectors for different APIs

387
00:25:17,166 --> 00:25:20,862
as well as SaaS applications. So Balna Central

388
00:25:20,926 --> 00:25:25,506
is a centralized place where you can host things if

389
00:25:25,528 --> 00:25:28,934
you want to share your code with other developers, so that

390
00:25:28,972 --> 00:25:32,278
if others can benefit from your code, you can

391
00:25:32,364 --> 00:25:35,490
package it and share it using ballerina central,

392
00:25:35,570 --> 00:25:39,420
our module sharing platform which is free to use for anyone

393
00:25:40,190 --> 00:25:44,806
and then for other features, runtime features especially like observability

394
00:25:44,998 --> 00:25:48,666
and DevOps capabilities. Balana language provide

395
00:25:48,848 --> 00:25:51,674
better features.

396
00:25:51,802 --> 00:25:55,194
Also WSO two is providing another offering

397
00:25:55,242 --> 00:25:59,374
which we call Choreo SaaS application development platform which

398
00:25:59,412 --> 00:26:02,458
makes it really easy to develop,

399
00:26:02,644 --> 00:26:06,894
deploy, manage and observe the applications

400
00:26:06,942 --> 00:26:10,334
in the cloud. So it's not directly related to Ballerina,

401
00:26:10,382 --> 00:26:13,602
but at the same time it will give you more

402
00:26:13,656 --> 00:26:17,306
features and more capabilities if you combine ballerina and Corio

403
00:26:17,358 --> 00:26:21,206
together because it addresses the problems of the entire

404
00:26:21,308 --> 00:26:24,866
application development lifecycle. So in today's

405
00:26:24,898 --> 00:26:27,994
session I covered in

406
00:26:28,032 --> 00:26:31,546
detail about features of

407
00:26:31,568 --> 00:26:36,314
the language, but it is somewhat high

408
00:26:36,352 --> 00:26:40,438
level list because in language there are so many capabilities

409
00:26:40,614 --> 00:26:44,542
that you can try out. And so my request is

410
00:26:44,676 --> 00:26:48,830
try the language and try to use it in your applications and

411
00:26:48,980 --> 00:26:52,334
share your feedback with us. We have a community

412
00:26:52,452 --> 00:26:56,234
around us, opensource development community in various

413
00:26:56,282 --> 00:26:59,338
platforms including Discord, Stackcore,

414
00:26:59,354 --> 00:27:02,126
flow, Twitter, GitHub and so on.

415
00:27:02,228 --> 00:27:05,878
So feel free to join with us if you're willing to contribute to

416
00:27:05,884 --> 00:27:09,686
the language as a developer as well as if you want to use it in

417
00:27:09,708 --> 00:27:13,702
your applications. So that's about some high level

418
00:27:13,756 --> 00:27:17,334
overview about the Ballerina programming language. Thank you very

419
00:27:17,372 --> 00:27:21,094
much for joining today's session and hope

420
00:27:21,132 --> 00:27:23,140
you will enjoy the rest of the sessions as well.

