1
00:01:50,430 --> 00:01:53,374
Hello to everyone. Best greetings from Poland.

2
00:01:53,502 --> 00:01:57,246
We'd like to gain your focus on the security of parts

3
00:01:57,358 --> 00:02:01,438
of your software who had not even chanced to acknowledge

4
00:02:01,614 --> 00:02:05,506
their existence. So let's go. The reason we suggested to

5
00:02:05,528 --> 00:02:08,794
you to steal your time with listen to what we have

6
00:02:08,832 --> 00:02:12,342
to say is simple. There is a big hole

7
00:02:12,406 --> 00:02:16,486
in security in every software made and installed due

8
00:02:16,518 --> 00:02:19,130
to opensource components.

9
00:02:19,730 --> 00:02:23,530
96% of companies are using Opensource.

10
00:02:23,610 --> 00:02:28,510
Are they using structured approaches to open source vulnerabilities?

11
00:02:29,090 --> 00:02:32,400
I hardly believe they will tell you about it.

12
00:02:32,790 --> 00:02:35,620
My assessment is they will not.

13
00:02:36,470 --> 00:02:40,114
We have a concept and are developing a tool to cope with this

14
00:02:40,152 --> 00:02:43,586
problem. We treat the problem in the

15
00:02:43,688 --> 00:02:47,286
Devsecops framework to put the

16
00:02:47,308 --> 00:02:51,858
solution in the right place while not adding a fifth wheel

17
00:02:51,954 --> 00:02:55,650
to the wagon agenda covers our assumptions,

18
00:02:55,730 --> 00:03:00,294
solutions, concept and tool current status.

19
00:03:00,422 --> 00:03:04,614
There are two of us who will be presenting

20
00:03:04,662 --> 00:03:08,634
it. Alexander Baronovsky who is

21
00:03:08,752 --> 00:03:12,938
experienced product lead producing

22
00:03:13,114 --> 00:03:14,670
open source software,

23
00:03:15,490 --> 00:03:19,582
Eurolinux, EuroDB, Euroap and so on. And me,

24
00:03:19,636 --> 00:03:23,374
I'm a little bit older and focused

25
00:03:23,422 --> 00:03:25,620
on selling these products,

26
00:03:26,310 --> 00:03:30,098
packaging it and selling. So I

27
00:03:30,184 --> 00:03:34,020
suppose it is a good company to

28
00:03:34,890 --> 00:03:38,930
say you about it. We have now very complex

29
00:03:39,090 --> 00:03:42,754
environments, both infrastructure

30
00:03:42,802 --> 00:03:46,530
and systems on the one side and development and maintenance

31
00:03:46,610 --> 00:03:49,834
on the other. That is due to

32
00:03:50,032 --> 00:03:53,226
technological progress and

33
00:03:53,328 --> 00:03:57,340
dynamics on the other hand. The market

34
00:03:57,790 --> 00:04:01,882
needs better effects.

35
00:04:01,946 --> 00:04:07,646
So KPI are so very strong,

36
00:04:07,748 --> 00:04:11,550
focused on effectiveness,

37
00:04:12,150 --> 00:04:15,362
how to do it with it. There is

38
00:04:15,416 --> 00:04:19,620
a very well tested approach of DevOps to

39
00:04:20,710 --> 00:04:25,018
chain better interaction between developers and administrators.

40
00:04:25,134 --> 00:04:28,760
Having in mind that there are more

41
00:04:29,450 --> 00:04:33,190
digital security vulnerabilities,

42
00:04:35,290 --> 00:04:38,874
we must add some security part to

43
00:04:38,912 --> 00:04:42,586
it. So is devsecops. Devsecops idea

44
00:04:42,768 --> 00:04:45,818
doesn't cover component issues.

45
00:04:45,984 --> 00:04:49,370
Our approach is KYCC,

46
00:04:50,130 --> 00:04:53,870
so it is know your code and coder.

47
00:04:54,530 --> 00:04:57,742
As we said before, we are still in the

48
00:04:57,796 --> 00:05:01,930
DevOps work with some

49
00:05:02,100 --> 00:05:05,714
security aspect added. So let's see at

50
00:05:05,752 --> 00:05:10,290
it. We have here classical

51
00:05:12,150 --> 00:05:15,670
devsecops infinite look with

52
00:05:15,740 --> 00:05:19,314
SEC audit. So it's

53
00:05:19,362 --> 00:05:22,790
never ending story. So we have

54
00:05:22,940 --> 00:05:25,910
static application security testing,

55
00:05:26,410 --> 00:05:28,970
dynamic application security testing,

56
00:05:29,310 --> 00:05:33,194
interactive application security testing and so

57
00:05:33,232 --> 00:05:36,250
on and so on. Many aspects,

58
00:05:37,470 --> 00:05:41,342
many activities, many tools and

59
00:05:41,396 --> 00:05:44,570
on the very end monitoring

60
00:05:44,650 --> 00:05:48,586
to have some feedback from production

61
00:05:48,698 --> 00:05:52,626
line probably we said you about

62
00:05:52,728 --> 00:05:56,740
complexity of the problem. Each of your

63
00:05:57,190 --> 00:06:01,922
software you are building or ought to be built have

64
00:06:01,976 --> 00:06:05,910
some components of opensource

65
00:06:06,410 --> 00:06:10,982
and how to check it. We must check if

66
00:06:11,036 --> 00:06:16,150
the coder is geopolitically securing,

67
00:06:16,810 --> 00:06:20,090
if the code is reviewed

68
00:06:20,830 --> 00:06:25,690
very timely, if the project is active

69
00:06:26,190 --> 00:06:27,180
at all,

70
00:06:29,570 --> 00:06:33,920
if the vulnerability testing is

71
00:06:34,690 --> 00:06:38,698
paid. There is many aspects of risk assessment,

72
00:06:38,794 --> 00:06:42,186
which we are not aware because it

73
00:06:42,228 --> 00:06:45,886
is components which isn't sold

74
00:06:45,918 --> 00:06:50,818
to us. It is components which is part

75
00:06:50,904 --> 00:06:55,142
of only called by

76
00:06:55,196 --> 00:06:59,494
software we are buying. So it is very

77
00:06:59,612 --> 00:07:02,886
important if there

78
00:07:02,908 --> 00:07:06,680
is any structured approach to it. No,

79
00:07:07,050 --> 00:07:10,282
there is no. Is there

80
00:07:10,336 --> 00:07:13,910
any empirical test research based models?

81
00:07:13,990 --> 00:07:17,642
Yes, there are. We will say something about

82
00:07:17,696 --> 00:07:20,640
it. But why?

83
00:07:21,970 --> 00:07:25,918
First of all, we must know from what

84
00:07:26,004 --> 00:07:29,994
our software is composed, what third party

85
00:07:30,042 --> 00:07:33,714
components are in our software. So it is

86
00:07:33,752 --> 00:07:36,882
called Sbom on. It is from

87
00:07:36,936 --> 00:07:41,502
infrastructure bill of materials, concept software

88
00:07:41,566 --> 00:07:44,740
bill of materials. So we must

89
00:07:45,450 --> 00:07:49,222
know what we have inside it is

90
00:07:49,276 --> 00:07:52,680
first and most important thing.

91
00:07:53,290 --> 00:07:58,090
Next, how to mitigate risks

92
00:07:59,150 --> 00:08:03,478
involved with these components. If we know components,

93
00:08:03,654 --> 00:08:06,870
we can check if they are risky

94
00:08:06,950 --> 00:08:09,590
or not. So next,

95
00:08:09,680 --> 00:08:14,542
we must call this risk because no

96
00:08:14,676 --> 00:08:18,400
third party component is risk free.

97
00:08:18,850 --> 00:08:22,974
We're just choosing the less risky

98
00:08:23,022 --> 00:08:26,514
one. And next, we must just

99
00:08:26,712 --> 00:08:30,558
put it in our software deployment

100
00:08:30,654 --> 00:08:34,866
pipeline to have it right

101
00:08:35,048 --> 00:08:37,510
in place. If we don't,

102
00:08:39,690 --> 00:08:42,680
of course, first of all,

103
00:08:43,370 --> 00:08:47,158
we don't know if the project will be

104
00:08:47,244 --> 00:08:51,434
developed in the future. We don't know if

105
00:08:51,632 --> 00:08:54,822
we'll address any vulnerabilities

106
00:08:54,966 --> 00:08:58,746
and we can face the problem at the

107
00:08:58,768 --> 00:09:02,810
very end. We can use it, this component

108
00:09:02,970 --> 00:09:06,206
anymore. So we must change it.

109
00:09:06,388 --> 00:09:10,410
And it could be very expensive.

110
00:09:10,570 --> 00:09:14,818
We must change architecture, we must change whatever,

111
00:09:14,904 --> 00:09:18,706
all, maybe license even it

112
00:09:18,728 --> 00:09:23,026
is very expensive. And in

113
00:09:23,048 --> 00:09:26,886
the meantime, you can lose our customers if we offer

114
00:09:26,988 --> 00:09:30,982
our software to somebody or our service based

115
00:09:31,036 --> 00:09:35,330
on the software. So it's very expensive.

116
00:09:35,490 --> 00:09:39,522
And now our approach, software composition

117
00:09:39,586 --> 00:09:43,082
analyzes risk management, our code

118
00:09:43,136 --> 00:09:46,666
name for our solution and what we are doing,

119
00:09:46,768 --> 00:09:49,890
we are just Sb oming,

120
00:09:49,990 --> 00:09:53,374
I may say. So first, we are

121
00:09:53,492 --> 00:09:57,166
finding what is inside and it

122
00:09:57,188 --> 00:10:00,590
is not the first line, for example,

123
00:10:00,660 --> 00:10:04,738
library or driver or something else,

124
00:10:04,824 --> 00:10:08,334
but even more if the driver

125
00:10:08,382 --> 00:10:12,466
library calls other library part of

126
00:10:12,568 --> 00:10:14,900
software from outside.

127
00:10:15,450 --> 00:10:18,040
We are checking it as well.

128
00:10:18,890 --> 00:10:22,486
And how we are checking. Okay, so when

129
00:10:22,508 --> 00:10:26,470
we are talking about how we might name it scar,

130
00:10:27,370 --> 00:10:30,666
Scarmo, as our code name Mark said,

131
00:10:30,768 --> 00:10:34,330
we are not looking into the single component. Of course,

132
00:10:34,400 --> 00:10:37,690
each of the components has its own score,

133
00:10:38,030 --> 00:10:41,386
but we are also looking at the score of the global score of

134
00:10:41,408 --> 00:10:44,506
a system that we are using. And it's quite similar

135
00:10:44,608 --> 00:10:48,394
in thing about it to CVE. In theory,

136
00:10:48,522 --> 00:10:52,014
you have a single CV in your system, for example, I don't know, York for

137
00:10:52,052 --> 00:10:55,746
J was very famous last year. But when you

138
00:10:55,768 --> 00:10:59,454
think about it, you're not saying we need to patch the CVE,

139
00:10:59,582 --> 00:11:03,058
we need to patch the systems. So, by the

140
00:11:03,064 --> 00:11:06,734
way, this is why the environmental metric in CV

141
00:11:06,782 --> 00:11:10,098
were introduced. So there is the XCV, but there is

142
00:11:10,104 --> 00:11:13,858
the context, and it's the very same with the serm.

143
00:11:13,954 --> 00:11:17,894
So going back to it, basically, at the moment

144
00:11:18,092 --> 00:11:21,594
it's like four vectors. But I personally think

145
00:11:21,632 --> 00:11:25,446
about more about dimension, because when you think about the vectors,

146
00:11:25,478 --> 00:11:28,906
like the line, of course this line can be like

147
00:11:28,928 --> 00:11:32,750
in three dimension, by the way, from algebra,

148
00:11:33,730 --> 00:11:37,194
but I think more like a dimension because we have multiple vectors

149
00:11:37,242 --> 00:11:41,246
in that dimension. And the base vector sales dimensions are

150
00:11:41,268 --> 00:11:45,406
the following at the moment at least. Software code contributor

151
00:11:45,438 --> 00:11:49,922
profile, the product dynamic, code quality and

152
00:11:49,976 --> 00:11:53,220
vulnerability dynamic. We call it CVA plus.

153
00:11:53,910 --> 00:11:56,930
But I have no idea if CVA is not trademarked,

154
00:11:58,810 --> 00:12:01,560
only the code name. Okay,

155
00:12:01,930 --> 00:12:05,718
let's start with contributor profile. And this is

156
00:12:05,804 --> 00:12:10,040
one of my favorite, because it's shown that we are living quite peculiar world.

157
00:12:10,350 --> 00:12:14,970
One contributor programmer can commit to multiple repositories.

158
00:12:16,670 --> 00:12:20,106
And this is like the project world. But on the other hand, when you think

159
00:12:20,128 --> 00:12:23,774
about it, a lot of companies and also projects are using their

160
00:12:23,812 --> 00:12:27,374
mono repos. So for example, Samba, but it's a very

161
00:12:27,412 --> 00:12:30,910
huge project. If you want to check out Samba,

162
00:12:31,970 --> 00:12:35,966
there is a huge Monorepo, but actually have libraries,

163
00:12:36,078 --> 00:12:38,500
the utilities program, things they get.

164
00:12:38,870 --> 00:12:42,482
So one contributor is working

165
00:12:42,536 --> 00:12:45,758
on one project, but it may be because it's

166
00:12:45,774 --> 00:12:49,734
Monorepo. So we are also aware of that. And we

167
00:12:49,772 --> 00:12:52,854
add the grain of salt to this. The other thing is the number

168
00:12:52,892 --> 00:12:57,422
of contributors, and it's exactly what Marek said earlier.

169
00:12:57,586 --> 00:13:01,350
There is the probability that the project will be abandoned.

170
00:13:01,510 --> 00:13:04,746
And sometimes it doesn't look like the project is

171
00:13:04,768 --> 00:13:08,422
abandoned because, for example, it has multiple stars.

172
00:13:08,486 --> 00:13:11,694
There are issues, but for the last

173
00:13:11,732 --> 00:13:15,726
two years, none of the pull request or request for change,

174
00:13:15,828 --> 00:13:19,886
or whatever you name it. So basically, bug fixes or

175
00:13:19,908 --> 00:13:24,610
enhancement to the project were made. And a lot of programmers

176
00:13:25,910 --> 00:13:29,310
just don't care to say that, sorry, this project is abandoned,

177
00:13:29,390 --> 00:13:33,266
so you don't get the clear information about that. Next to

178
00:13:33,288 --> 00:13:36,790
thing is, let's say quite the same, because it's

179
00:13:37,130 --> 00:13:40,934
time zone. When thinking about time zone and

180
00:13:40,972 --> 00:13:44,230
gopolitical risk, they're a little bit interwind,

181
00:13:44,810 --> 00:13:48,186
because it's somewhere done in some time zone. It's probably dont in

182
00:13:48,208 --> 00:13:51,834
some country basically. And we are also looking

183
00:13:51,872 --> 00:13:55,834
the countries that the software is made. So why

184
00:13:55,872 --> 00:13:59,946
is it important? Well, we live in divided world, and open source

185
00:13:59,978 --> 00:14:03,200
can be weaponized, literally weaponized against us.

186
00:14:03,810 --> 00:14:07,198
And I'm sorry to say that, but we have in

187
00:14:07,204 --> 00:14:11,370
the very recent history, the people who weaponize open sourced.

188
00:14:11,530 --> 00:14:15,570
And even if we say that, yeah, I'm against

189
00:14:15,720 --> 00:14:19,902
someone, and I totally get that and I respect

190
00:14:19,966 --> 00:14:24,050
that. Weaponizing the open source put the whole movement

191
00:14:24,630 --> 00:14:27,350
of open and free software at risk.

192
00:14:29,290 --> 00:14:33,142
And I'll be honest with you, it's weaponized but

193
00:14:33,196 --> 00:14:36,514
also on a very different level because when you think for example about the basic

194
00:14:36,562 --> 00:14:40,330
freedoms that Richard Stalman back like 50 years

195
00:14:40,400 --> 00:14:43,834
ago started and for example

196
00:14:44,032 --> 00:14:48,220
an advanced it technologies export control

197
00:14:48,670 --> 00:14:52,382
for example if you are buying something from one country

198
00:14:52,436 --> 00:14:56,394
you cannot use it in another country. And this is like an enterprise

199
00:14:56,442 --> 00:14:58,240
agreement and things I get.

200
00:14:59,410 --> 00:15:02,606
So it's already like threat to

201
00:15:02,628 --> 00:15:06,526
the open source. So you cannot stress

202
00:15:06,558 --> 00:15:10,194
enough the fact that our world is full of imperfection. In that case

203
00:15:10,312 --> 00:15:13,842
I will name it imperfection because I would probably

204
00:15:13,896 --> 00:15:18,130
use a stronger word but well it's divided and

205
00:15:18,280 --> 00:15:22,902
as Marik said, we are from Poland and if

206
00:15:22,956 --> 00:15:26,950
there was a country that is constantly threatening me,

207
00:15:27,020 --> 00:15:30,686
threatening my family and including nuclear inaccuration

208
00:15:30,738 --> 00:15:33,846
of my country I would personally think twice,

209
00:15:33,958 --> 00:15:37,222
at least twice before using the software,

210
00:15:37,366 --> 00:15:40,654
including open source software as well that

211
00:15:40,692 --> 00:15:44,720
is produced in that time zone or country

212
00:15:45,410 --> 00:15:52,386
reality time zone is also important because sometimes you

213
00:15:52,408 --> 00:15:55,746
can see that the fix or predict when

214
00:15:55,768 --> 00:15:59,486
the fix will come because well programmers

215
00:15:59,518 --> 00:16:02,770
are also people and let's be honest,

216
00:16:02,840 --> 00:16:08,214
the bad guys never sleep. So if

217
00:16:08,332 --> 00:16:11,506
something is made, let's say in us it's

218
00:16:11,538 --> 00:16:15,346
very likely that if the bug

219
00:16:15,378 --> 00:16:19,014
is discovered and published and there is the exploit and

220
00:16:19,052 --> 00:16:22,410
they are sleeping, literally sleeping that it

221
00:16:22,560 --> 00:16:26,266
might be delayed until work time or at

222
00:16:26,288 --> 00:16:29,418
least when they wake up. So yeah,

223
00:16:29,504 --> 00:16:33,022
next one is the protect activity and this is like the next

224
00:16:33,076 --> 00:16:36,974
vector dimension. So we are

225
00:16:37,012 --> 00:16:40,206
basically looking at let's say free things. There is much more

226
00:16:40,228 --> 00:16:44,178
but free things. And first one is interesting

227
00:16:44,264 --> 00:16:48,290
project index and it's

228
00:16:48,870 --> 00:16:52,786
I would say quite sketchy in some cases because if

229
00:16:52,808 --> 00:16:56,280
something is popular there is a higher chance that it will be safe because

230
00:16:56,810 --> 00:16:59,862
more people will try to break it, not use it,

231
00:16:59,916 --> 00:17:03,586
break it. And we all know that Eric

232
00:17:03,698 --> 00:17:07,254
as Raymond Linux will, this will say

233
00:17:07,292 --> 00:17:11,320
that basically there are enough eyes on the code

234
00:17:12,250 --> 00:17:15,526
that all bugs are shallow or will be fixed.

235
00:17:15,558 --> 00:17:19,162
And things I get but it's quite

236
00:17:19,216 --> 00:17:22,590
criticized because the hard bleed simple

237
00:17:22,660 --> 00:17:26,078
mistake. But on the other hand it was fixed. For example in

238
00:17:26,084 --> 00:17:27,600
BSD before.

239
00:17:30,050 --> 00:17:33,630
On the other hand there is some data and evidence

240
00:17:33,970 --> 00:17:37,170
provided by Google actually and their repos that

241
00:17:37,240 --> 00:17:40,706
says that well if the project is very popular there's a higher chance there

242
00:17:40,728 --> 00:17:44,386
will be a fix that people, the commits to

243
00:17:44,408 --> 00:17:48,434
the project, especially external commits to the project with

244
00:17:48,472 --> 00:17:51,814
the back fixed security and things I get. The other

245
00:17:51,852 --> 00:17:55,014
thing is distribution of activity over the time.

246
00:17:55,212 --> 00:17:57,802
Well it is how it sounds.

247
00:17:57,936 --> 00:18:01,900
So how much activity is in the protect over time.

248
00:18:04,110 --> 00:18:07,274
But very must understand that there are

249
00:18:07,312 --> 00:18:11,194
the projects that are very stable and won't get much activity and

250
00:18:11,232 --> 00:18:14,782
not because they are bad project, no, but because

251
00:18:14,836 --> 00:18:18,574
we are major. I will give you the short example. There is the access control

252
00:18:18,612 --> 00:18:21,934
list in Linux and there's access control

253
00:18:21,972 --> 00:18:26,226
is utilities. We are using the very same very old,

254
00:18:26,408 --> 00:18:30,340
very basic system calls and

255
00:18:30,710 --> 00:18:33,858
capabilities to create the access control list. For for

256
00:18:33,864 --> 00:18:37,234
example if you are a user and some group you can do

257
00:18:37,272 --> 00:18:40,926
something. So it's very not true

258
00:18:40,968 --> 00:18:44,834
for this kind of software not to have a lot of activity

259
00:18:44,882 --> 00:18:48,346
over time. So we have to take into account that

260
00:18:48,448 --> 00:18:52,154
some protect might get very low activity, but it doesn't mean at all

261
00:18:52,192 --> 00:18:55,914
that they're unsecure. The next one

262
00:18:55,952 --> 00:18:59,446
is the difference of delta basically of active

263
00:18:59,478 --> 00:19:03,354
contributor over time. And once more protect can be abandoned.

264
00:19:03,482 --> 00:19:07,246
And if there is no one who actually can get

265
00:19:07,428 --> 00:19:10,830
the work because there is

266
00:19:10,900 --> 00:19:14,514
one contributor, for example, well it's not

267
00:19:14,552 --> 00:19:18,606
good, it's not good. Think about the bus factor

268
00:19:18,638 --> 00:19:22,354
in that case. So one person and the

269
00:19:22,392 --> 00:19:25,890
protect is gone and before someone will be able to

270
00:19:25,960 --> 00:19:29,094
hack this project and work on it, we take some

271
00:19:29,132 --> 00:19:32,310
time. The other thing is

272
00:19:32,380 --> 00:19:35,814
that these contributors also, if you combine this with a

273
00:19:35,852 --> 00:19:39,714
time zone or go political risk and things like that,

274
00:19:39,852 --> 00:19:43,930
you'll get that. For example, if there was some kind of tragic situation

275
00:19:44,000 --> 00:19:47,930
in the world, including some country or countries,

276
00:19:48,670 --> 00:19:52,714
that you might actually use the access to it. My guitar.

277
00:19:52,842 --> 00:19:55,774
We will try to curse opensource. Yeah.

278
00:19:55,892 --> 00:19:58,800
So next thing is the code quality.

279
00:19:59,250 --> 00:20:03,194
I'll be honest, I was quite surprised when we discovered that a lot of software

280
00:20:03,242 --> 00:20:06,674
won't pass today. Coding standards, sorry,

281
00:20:06,712 --> 00:20:09,860
they won't pass. There are so many

282
00:20:10,310 --> 00:20:14,066
well known issues with

283
00:20:14,088 --> 00:20:18,110
that code. Yeah, issues. For example using voata and c plus plus.

284
00:20:18,280 --> 00:20:21,718
But well in theory a lot of people think that well

285
00:20:21,884 --> 00:20:25,880
it will be threatsafe. Not at all. There is very good

286
00:20:26,730 --> 00:20:29,926
talk about it from Facebook now meta of

287
00:20:29,948 --> 00:20:33,306
course the other things like using buffers that are

288
00:20:33,328 --> 00:20:36,060
not checked, very popular, especially in c.

289
00:20:38,190 --> 00:20:42,294
And when you think about it once

290
00:20:42,352 --> 00:20:45,886
more, you have to take into account the different type of project. Because if the

291
00:20:45,908 --> 00:20:49,770
Linux kernel is using something that is the buffers,

292
00:20:49,850 --> 00:20:53,106
like naked buffers, they probably have a very good reason to do

293
00:20:53,128 --> 00:20:56,340
that. But if it's like the utility program,

294
00:20:57,030 --> 00:20:59,794
some command guide interface program,

295
00:20:59,992 --> 00:21:02,814
then maybe this route destroy, check the buffers.

296
00:21:02,942 --> 00:21:07,014
And yeah, we also believe, and this is

297
00:21:07,132 --> 00:21:11,014
why the scoring is quite important, that if

298
00:21:11,052 --> 00:21:15,026
the code quality is high it will be easier to maintain

299
00:21:15,058 --> 00:21:17,560
this project in the long run.

300
00:21:19,470 --> 00:21:23,142
Also there is not on this slide,

301
00:21:23,206 --> 00:21:26,890
but we are also looking on the things that we call the

302
00:21:26,960 --> 00:21:30,762
language popularity and trends. So basically if you have

303
00:21:30,896 --> 00:21:35,150
some project that is written in the language that is becoming slowly dead,

304
00:21:35,730 --> 00:21:40,080
and I can give you, I know that some people feel

305
00:21:41,570 --> 00:21:44,862
triggered by it, but what it is written in Peru

306
00:21:44,926 --> 00:21:49,058
for example, very good language without

307
00:21:49,144 --> 00:21:51,810
doubt, but this language above.

308
00:21:52,390 --> 00:21:56,280
So it's like for example Python and Python three or

309
00:21:56,970 --> 00:22:02,166
Python 2.7. Yes, and you

310
00:22:02,188 --> 00:22:06,594
have a pervade still maintain the branches of version

311
00:22:06,642 --> 00:22:10,086
the language, but the number of programmers who

312
00:22:10,108 --> 00:22:13,546
are able to program it is dropping and

313
00:22:13,568 --> 00:22:17,674
it's dropping quite sharply. So this project might

314
00:22:17,712 --> 00:22:21,040
actually be the risk, especially in the long run,

315
00:22:21,810 --> 00:22:26,000
if someone don't migrate to the newer version or to something different.

316
00:22:27,730 --> 00:22:31,200
Last one, and this is my

317
00:22:31,570 --> 00:22:34,862
least favorite and I will tell you why, a CV plus

318
00:22:34,916 --> 00:22:38,386
or dynamics or CVE. And of course we

319
00:22:38,408 --> 00:22:41,506
have version two, version three and version four.

320
00:22:41,528 --> 00:22:45,202
You might ask why would you have a version two? Well,

321
00:22:45,256 --> 00:22:48,962
because sometimes the very old bugs are updated

322
00:22:49,106 --> 00:22:53,046
and if there is the update because it was

323
00:22:53,228 --> 00:22:57,106
which are rediscovered or the CV wasn't

324
00:22:57,138 --> 00:22:59,820
fixed for like ten years, it happened,

325
00:23:00,670 --> 00:23:04,794
then we actually need that score because there is no overscore and

326
00:23:04,832 --> 00:23:08,790
there is of course a new version of cvss. So it's like Commodore

327
00:23:08,870 --> 00:23:12,366
scoring system that tells you, and we are

328
00:23:12,388 --> 00:23:15,774
doing basically we're looking in the last 90 days and

329
00:23:15,812 --> 00:23:19,454
it's getting on the very thin ice in my opinion. But I

330
00:23:19,492 --> 00:23:21,360
don't like it because,

331
00:23:22,790 --> 00:23:26,190
well, if you look at the pony award,

332
00:23:26,350 --> 00:23:30,546
this is the award from the security community about

333
00:23:30,728 --> 00:23:34,926
most of the vendors and that they have mismanaged

334
00:23:35,038 --> 00:23:39,480
the security reports and their

335
00:23:39,850 --> 00:23:43,560
behavior to it and how they should respond and so on.

336
00:23:44,090 --> 00:23:48,906
That's basically it. Of course there's also the good part of the one

337
00:23:48,928 --> 00:23:52,826
that says that someone did something very bad is more

338
00:23:52,848 --> 00:23:55,450
popular and let's say culture.

339
00:23:56,270 --> 00:24:00,310
And this is a problem with vendors, why? Because a

340
00:24:00,320 --> 00:24:03,998
lot of vendors might not make the

341
00:24:04,084 --> 00:24:07,582
code, but they want CVE because, well, first of all it looks

342
00:24:07,636 --> 00:24:11,326
bad. And second of all it's not so easy,

343
00:24:11,508 --> 00:24:15,026
it's the extra work. So the programmers like me

344
00:24:15,048 --> 00:24:19,106
are like, I will fix that, I won't tell anyone the

345
00:24:19,128 --> 00:24:23,154
next version will be fixed. Easy. Why even

346
00:24:23,192 --> 00:24:27,110
bother? You know, to make the CV I need the common platform enumeration.

347
00:24:27,450 --> 00:24:31,254
So I need to send the special mail with XML in it

348
00:24:31,292 --> 00:24:35,350
and then I need to do that. And the whole process

349
00:24:35,420 --> 00:24:39,794
of making it, sorry, I will name it bureaucracy is

350
00:24:39,852 --> 00:24:43,178
actually more time consuming sometimes

351
00:24:43,264 --> 00:24:46,618
than making the fix. And I said, there's also the

352
00:24:46,624 --> 00:24:50,774
reputation hit and it's

353
00:24:50,902 --> 00:24:54,586
skating on the skin eye on finite. Sorry. Because we

354
00:24:54,608 --> 00:24:57,840
are actually with the scoring, we are punishing the good guys,

355
00:24:58,450 --> 00:25:01,920
we are unable to punish the bad guys. We tried.

356
00:25:02,770 --> 00:25:07,042
Believe me, we tried. We look into a project that does not have this

357
00:25:07,176 --> 00:25:11,394
or try to avoid them and then try to with

358
00:25:11,432 --> 00:25:15,186
some statistic magic. How much code is put, what languages and things I

359
00:25:15,208 --> 00:25:18,230
get get that there should be probably some CVE.

360
00:25:19,530 --> 00:25:22,662
But while it's very hard to find,

361
00:25:22,796 --> 00:25:26,246
to be honest. So we decided that, well, if it's not

362
00:25:26,268 --> 00:25:29,466
stable, we are able to say about the things

363
00:25:29,488 --> 00:25:33,226
that we are unable to prove. In that case we

364
00:25:33,248 --> 00:25:37,434
can only. And I believe that the scoring must be on the real data.

365
00:25:37,632 --> 00:25:41,062
And there is a great blog

366
00:25:41,126 --> 00:25:44,678
post from Daniel Stenberg. Daniel Steinberg is the author

367
00:25:44,694 --> 00:25:47,850
of C URL. The C URL is like the most popular

368
00:25:47,930 --> 00:25:51,614
software used in the world regularly. Guys, Linux is not that

369
00:25:51,652 --> 00:25:54,954
popular, because when there is Linux

370
00:25:55,002 --> 00:25:56,420
there is this URL, probably.

371
00:25:57,510 --> 00:26:00,642
Yeah, and he wrote about that.

372
00:26:00,696 --> 00:26:03,966
Well, having the CVE and CRO

373
00:26:03,998 --> 00:26:07,430
is the good. And you should also think that if

374
00:26:07,500 --> 00:26:10,706
the vendor is honest with you, the programmers,

375
00:26:10,898 --> 00:26:14,230
people who manage the protect are honest with you and say guys,

376
00:26:14,380 --> 00:26:17,240
look, there is the security problem.

377
00:26:18,110 --> 00:26:21,260
We made the fix, fix your system.

378
00:26:21,790 --> 00:26:25,500
This is good, but unfortunately the securing is

379
00:26:26,670 --> 00:26:30,314
for me. Well, I said it's quite problematic

380
00:26:30,362 --> 00:26:34,158
because once more we are punishing the

381
00:26:34,244 --> 00:26:38,286
good guys. Marek, can you continue? Thank you

382
00:26:38,308 --> 00:26:41,790
Alex, for presenting the approaches.

383
00:26:42,150 --> 00:26:44,610
You ate my time, as usual.

384
00:26:46,870 --> 00:26:50,578
Okay, so let's have a look

385
00:26:50,744 --> 00:26:55,094
when we can use this approach. We find at

386
00:26:55,132 --> 00:26:58,822
this time four touch points where we can

387
00:26:58,876 --> 00:27:03,750
use it in the software development pipeline.

388
00:27:05,050 --> 00:27:10,118
The first one is when we are inventing our architecture.

389
00:27:10,294 --> 00:27:14,358
We are looking for accessible software

390
00:27:14,454 --> 00:27:17,690
and we can miss the opportunity to choose

391
00:27:17,760 --> 00:27:21,310
well. So at the

392
00:27:21,380 --> 00:27:24,766
very moment of the starting of

393
00:27:24,788 --> 00:27:27,790
the project, we can fail.

394
00:27:28,610 --> 00:27:32,494
Next one is when

395
00:27:32,532 --> 00:27:36,000
we are building components and

396
00:27:36,770 --> 00:27:39,678
to be cover vulnerabilities.

397
00:27:39,774 --> 00:27:42,914
We are getting the new

398
00:27:42,952 --> 00:27:47,538
version, it's very usual

399
00:27:47,714 --> 00:27:51,430
scenario. And we can fail again,

400
00:27:51,580 --> 00:27:55,110
because this new version

401
00:27:55,530 --> 00:27:59,690
can have dependencies or

402
00:27:59,840 --> 00:28:03,178
features which are killing our

403
00:28:03,264 --> 00:28:06,794
application. And third point is when

404
00:28:06,832 --> 00:28:11,230
we are using the software in

405
00:28:11,300 --> 00:28:14,960
production real time

406
00:28:15,330 --> 00:28:19,146
and we are trying to maintain

407
00:28:19,338 --> 00:28:22,750
it at update components.

408
00:28:23,430 --> 00:28:27,198
If you are not checking these components,

409
00:28:27,374 --> 00:28:32,100
you are failing again. And the last one is

410
00:28:33,110 --> 00:28:37,046
when we approach the moment

411
00:28:37,148 --> 00:28:40,962
where the component is not viable

412
00:28:41,026 --> 00:28:45,922
for us. It's not developed

413
00:28:45,986 --> 00:28:47,670
or obsolete.

414
00:28:49,790 --> 00:28:53,530
We know the vulnerabilities will

415
00:28:53,600 --> 00:28:56,860
not be addressed in future.

416
00:28:59,230 --> 00:29:03,450
Here is the classical production

417
00:29:03,530 --> 00:29:07,182
pipeline. So first we

418
00:29:07,236 --> 00:29:10,410
have developers, they are choosing

419
00:29:10,570 --> 00:29:13,794
this code. Next there

420
00:29:13,832 --> 00:29:16,260
is code building,

421
00:29:16,790 --> 00:29:20,674
packaging, embedding, coding and

422
00:29:20,712 --> 00:29:24,702
so on. And of course dependencies

423
00:29:24,766 --> 00:29:28,358
in the data. And here are these

424
00:29:28,444 --> 00:29:31,718
four touch points I

425
00:29:31,804 --> 00:29:35,640
have said here before.

426
00:29:36,250 --> 00:29:39,594
So first one not good choice of

427
00:29:39,632 --> 00:29:45,450
the component. Second one unaware

428
00:29:46,430 --> 00:29:50,030
updating of the code during

429
00:29:50,100 --> 00:29:54,110
building. Third one unaware

430
00:29:54,770 --> 00:29:58,942
and unchecked dating software during

431
00:29:58,996 --> 00:30:02,626
production phase. And fourth one is

432
00:30:02,728 --> 00:30:06,366
when we must choose another component.

433
00:30:06,558 --> 00:30:09,438
We can once again fail.

434
00:30:09,534 --> 00:30:13,714
Because conference is about devsecops. We must place

435
00:30:13,832 --> 00:30:16,850
our concept in the framework,

436
00:30:17,010 --> 00:30:20,050
our solution, our approach.

437
00:30:20,130 --> 00:30:22,760
It's not solution yet.

438
00:30:23,850 --> 00:30:27,466
Scarm is placed in

439
00:30:27,488 --> 00:30:31,514
the testing, beyond testing and

440
00:30:31,632 --> 00:30:35,290
on the very end in production files

441
00:30:35,710 --> 00:30:39,100
in vulnerability testing of

442
00:30:39,650 --> 00:30:42,494
software. Because of course as you know,

443
00:30:42,612 --> 00:30:46,030
vulnerability emerges during

444
00:30:46,100 --> 00:30:49,550
the time. Here is our solution,

445
00:30:50,690 --> 00:30:54,282
opensource nation automation of Checking OpenSource

446
00:30:54,346 --> 00:30:58,114
this is basically the protect that is co financed from

447
00:30:58,152 --> 00:31:01,460
European Union and we are very grateful for this opportunity.

448
00:31:02,550 --> 00:31:06,680
It's made with National Research center in our country

449
00:31:07,530 --> 00:31:11,414
and basically we want to provide you the platform and

450
00:31:11,612 --> 00:31:14,822
the rules, the basic rules and also the system

451
00:31:14,876 --> 00:31:19,160
to assess if you are using the right components. For example,

452
00:31:19,530 --> 00:31:23,082
you might think okay, we are building some

453
00:31:23,136 --> 00:31:26,406
application and this application in the end will use some database,

454
00:31:26,598 --> 00:31:30,490
it's very likely. And then you might ask yourself should I use the Mariadb

455
00:31:30,570 --> 00:31:33,530
or should I use MySQL or maybe postgres?

456
00:31:33,610 --> 00:31:37,550
Because all of them, let's say they are quite comparable

457
00:31:38,050 --> 00:31:42,750
and we want to have a comprehensive evaluation system integration

458
00:31:43,670 --> 00:31:47,026
in the portal. We want to

459
00:31:47,048 --> 00:31:50,530
inform you. So there will be security and security assessment,

460
00:31:51,110 --> 00:31:55,170
obvious risk. It will be very practical

461
00:31:55,610 --> 00:31:59,926
usage of cvss because for example you

462
00:31:59,948 --> 00:32:04,774
have the image, we will give you the golden images for

463
00:32:04,812 --> 00:32:07,320
some solutions we are working on.

464
00:32:08,810 --> 00:32:12,490
Some of them are open source, some of them also the open

465
00:32:12,560 --> 00:32:15,994
source were packed by us in the manner that they provide

466
00:32:16,032 --> 00:32:19,594
the whole stack of something. And we were very practical because

467
00:32:19,632 --> 00:32:23,514
the CVSS or this common vertical scoring system will

468
00:32:23,552 --> 00:32:27,326
for example confirm you that you use the image that

469
00:32:27,348 --> 00:32:30,702
is let's say one month old and it already has

470
00:32:30,756 --> 00:32:34,530
this and this and this vulnerability. The next thing is

471
00:32:34,600 --> 00:32:39,780
that of course we have a web interface and

472
00:32:40,790 --> 00:32:44,146
this web interface you can get to the image and get for

473
00:32:44,168 --> 00:32:47,974
example the information that well you're using the postgres and

474
00:32:48,172 --> 00:32:50,680
for example postgres is using, I don't know,

475
00:32:52,650 --> 00:32:56,070
CRL is useful always because I said this is

476
00:32:56,140 --> 00:32:59,674
one of the most popular structure in the world but I dont know, it's using

477
00:32:59,712 --> 00:33:03,290
the postgres libraries of course. Yeah it makes sense.

478
00:33:03,360 --> 00:33:06,586
And with the libraries you can get

479
00:33:06,608 --> 00:33:10,406
the securing for the libraries for example, but also the scoring

480
00:33:10,438 --> 00:33:12,880
for the project and then the scoring for the whole system.

481
00:33:14,850 --> 00:33:18,186
Yeah. And it should allow you to get in depth

482
00:33:18,218 --> 00:33:21,280
analysis of the code, quality of the component you're using.

483
00:33:21,890 --> 00:33:24,820
Of course the possible vulnerabilities, the history.

484
00:33:25,350 --> 00:33:28,754
So as we said, there is like index of something,

485
00:33:28,872 --> 00:33:32,562
we name it, the index of contributors contribute over time

486
00:33:32,696 --> 00:33:38,054
and things they get. So it should have it and

487
00:33:38,092 --> 00:33:41,286
many other risk factors. It's in

488
00:33:41,308 --> 00:33:45,174
the mate and will give you the ability to run

489
00:33:45,372 --> 00:33:48,774
images that are secured or have at moment

490
00:33:48,812 --> 00:33:52,294
things like that. Of course on AWS, on container engines over

491
00:33:52,332 --> 00:33:55,946
the docker. Of course container engines. Mostly it means that it will

492
00:33:55,968 --> 00:33:57,930
be run on the Kubernetes,

493
00:33:59,230 --> 00:34:00,990
your own Linux distribution,

494
00:34:01,810 --> 00:34:04,670
ibaba cloud. Kubernetes will be openshift,

495
00:34:06,530 --> 00:34:09,886
things like vmware and yeah you

496
00:34:09,908 --> 00:34:13,102
have probably right now we have like twelve platforms

497
00:34:13,166 --> 00:34:16,770
like the runtime platforms that we are supporting.

498
00:34:17,190 --> 00:34:23,106
For each image that we are producing there

499
00:34:23,128 --> 00:34:26,950
is quite a lot of images that are regularly updated

500
00:34:27,290 --> 00:34:30,902
that have scoring included and so on.

501
00:34:31,036 --> 00:34:34,086
It should allow you to streamline your securing assessment in

502
00:34:34,108 --> 00:34:38,146
details. For example, oh I want to use the radio.

503
00:34:38,338 --> 00:34:42,454
We have scores for some software well known.

504
00:34:42,502 --> 00:34:47,034
We are trying to get the most software. We are also doing things for our

505
00:34:47,072 --> 00:34:50,486
partners from government and asked us if we can assess

506
00:34:50,518 --> 00:34:54,926
some software for them. So it's like a

507
00:34:54,928 --> 00:34:57,582
little bit of public benefit from our side.

508
00:34:57,716 --> 00:35:01,374
Yeah, but if for example I said you

509
00:35:01,412 --> 00:35:04,686
think should I use redis? And then you look into the profile

510
00:35:04,718 --> 00:35:08,434
of contributor for example and you think yeah, it looks

511
00:35:08,552 --> 00:35:12,146
good or not depending of your go,

512
00:35:12,168 --> 00:35:15,758
political risk assessment and things like that.

513
00:35:15,944 --> 00:35:20,838
You might ask yourself okay, we can use Redis or Rabbit MQ for

514
00:35:20,924 --> 00:35:24,182
making the queues basically in that case.

515
00:35:24,316 --> 00:35:28,150
Or yeah, it depends.

516
00:35:28,490 --> 00:35:32,060
They're not the same, let's say. But sometimes you can change the one to another

517
00:35:33,070 --> 00:35:36,874
and then yeah, I think if it's good enough

518
00:35:36,992 --> 00:35:38,620
or not, it will be.

519
00:35:39,970 --> 00:35:41,870
At least we're informed.

520
00:35:43,170 --> 00:35:46,298
I think it's automation.

521
00:35:46,394 --> 00:35:47,040
Yeah,

522
00:35:50,850 --> 00:35:55,346
we will end here for

523
00:35:55,368 --> 00:35:58,098
your audience. Yeah.

524
00:35:58,264 --> 00:36:01,762
When you will probably see that video. We have about a month

525
00:36:01,816 --> 00:36:05,586
to finish it. It's already in the state. But I'll be honest, I'm proud of.

526
00:36:05,688 --> 00:36:09,234
So I'm eager to wait

527
00:36:09,352 --> 00:36:12,980
to provide it. Thank you very much.

528
00:36:13,430 --> 00:36:13,920
Thank you.

