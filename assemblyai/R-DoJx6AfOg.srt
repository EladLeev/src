1
00:00:26,930 --> 00:00:30,306
Hi and welcome. I'm explaining

2
00:00:30,338 --> 00:00:33,846
quick apps, which is a new concept, a new platform to create

3
00:00:33,948 --> 00:00:37,622
mini or light apps for Android. These mini apps or

4
00:00:37,676 --> 00:00:41,538
light apps can help us to create better user experiences

5
00:00:41,634 --> 00:00:45,426
for our customers without the potential friction

6
00:00:45,458 --> 00:00:49,480
of going into the marketplace looking for the right application,

7
00:00:49,970 --> 00:00:53,822
downloading, installing and all this tedious process that can

8
00:00:53,876 --> 00:00:57,534
cause some reluctance at

9
00:00:57,572 --> 00:01:02,094
the time to use our product or our service, our app.

10
00:01:02,292 --> 00:01:05,570
Starting by explaining what is a light app or a mini app.

11
00:01:05,640 --> 00:01:08,946
Perhaps it's a concept new for you, but it's not so new.

12
00:01:09,048 --> 00:01:13,010
It's very popular indeed in Asia, especially in China.

13
00:01:13,430 --> 00:01:16,498
For instance, the WeChat mini

14
00:01:16,514 --> 00:01:20,694
program was launched five years ago, allowing developers to

15
00:01:20,732 --> 00:01:24,130
use or to create experiences

16
00:01:24,210 --> 00:01:27,542
within the main application, in this case the super app, which is the

17
00:01:27,596 --> 00:01:31,802
WeChat application. These developers can create

18
00:01:31,936 --> 00:01:35,466
games to be played inside the witchat application,

19
00:01:35,648 --> 00:01:39,126
can offer different shops

20
00:01:39,158 --> 00:01:42,046
or marketplaces inside the application,

21
00:01:42,228 --> 00:01:46,234
make payments, doing transactions,

22
00:01:46,362 --> 00:01:51,018
or creating any experience within the same environment,

23
00:01:51,114 --> 00:01:54,350
which is the super app, in this case WeChat.

24
00:01:54,510 --> 00:01:57,970
I have to mention that nowadays WeChat has more than

25
00:01:58,040 --> 00:02:01,550
3.2 million mini programs. So you can imagine

26
00:02:01,630 --> 00:02:05,102
the potential we have with this mini app ecosystem

27
00:02:05,166 --> 00:02:06,790
or light app ecosystem.

28
00:02:07,930 --> 00:02:11,490
Nowadays the ecosystem of light apps are very diverse.

29
00:02:11,570 --> 00:02:15,090
You can see some examples here, most of them from China.

30
00:02:15,170 --> 00:02:18,402
As you can see 360, WeChat, Alipay,

31
00:02:18,466 --> 00:02:21,942
Baidu with different names as I mentioned,

32
00:02:21,996 --> 00:02:25,674
mini program, mini app, et cetera. But also you can see

33
00:02:25,712 --> 00:02:29,580
some familiar faces like Facebook Instant games that are

34
00:02:29,890 --> 00:02:34,154
following a similar process. They are offering casual

35
00:02:34,202 --> 00:02:38,058
games within the same framework, within the same environment, which is Facebook.

36
00:02:38,154 --> 00:02:42,510
And also Uber recently launched similar

37
00:02:42,580 --> 00:02:45,646
approach offering the mini

38
00:02:45,678 --> 00:02:49,506
app. Uber eats inside the main application which

39
00:02:49,528 --> 00:02:53,214
is Uber, so you can buy some food where you are on a ride.

40
00:02:53,342 --> 00:02:57,000
This is the kind of light apps running on top of

41
00:02:58,490 --> 00:03:01,830
another super application. But there is another case, a standard

42
00:03:01,900 --> 00:03:05,078
case, which is the PWA, the progressive web application.

43
00:03:05,244 --> 00:03:08,850
This is the standard of W three C to create light apps

44
00:03:08,930 --> 00:03:12,426
and this might run on top of the browser so the browser can

45
00:03:12,448 --> 00:03:16,362
be considered as well as a super app. There are some other examples like

46
00:03:16,416 --> 00:03:19,542
kios, apps for the specific operating

47
00:03:19,606 --> 00:03:23,482
system and some other proprietary formats

48
00:03:23,546 --> 00:03:27,546
like app clips which is the format

49
00:03:27,738 --> 00:03:31,200
for Apple created specifically for their operating system,

50
00:03:32,390 --> 00:03:36,414
following a similar approach but running directly on the operating

51
00:03:36,462 --> 00:03:40,814
system and being considered similarly

52
00:03:40,862 --> 00:03:44,910
as a native application but running on top of the operating system.

53
00:03:45,080 --> 00:03:48,438
Some other approaches, this case for Android and

54
00:03:48,524 --> 00:03:52,274
also as you can see, very diverse from instant

55
00:03:52,322 --> 00:03:56,022
apps. The apps for Amazon based also on web

56
00:03:56,076 --> 00:03:59,770
technologies, Android Go which is a reduced version of

57
00:03:59,920 --> 00:04:03,274
the native Android applications and some others like the

58
00:04:03,312 --> 00:04:06,634
approach of a web app apk to

59
00:04:06,752 --> 00:04:10,954
pack that web application PWA into an Android

60
00:04:11,002 --> 00:04:15,226
application. And there is another set of mini

61
00:04:15,258 --> 00:04:17,630
apps which is called quick app.

62
00:04:17,780 --> 00:04:21,690
This is another version of light apps

63
00:04:21,770 --> 00:04:25,326
running on top of Android. And this is what I will present to

64
00:04:25,348 --> 00:04:29,086
you today in w three c. We are trying to reduce

65
00:04:29,118 --> 00:04:32,594
the fragmentation of the market so you can see in this big

66
00:04:32,632 --> 00:04:35,874
bubble in the middle that what we are trying

67
00:04:35,912 --> 00:04:40,342
to achieve, we are collecting requirements from all the

68
00:04:40,396 --> 00:04:44,006
potential vendors of the mini apps and we are trying to collect all

69
00:04:44,028 --> 00:04:47,206
the minimum features or the common features from all the

70
00:04:47,228 --> 00:04:50,950
versions of the mini apps, trying to standardize the format,

71
00:04:51,030 --> 00:04:54,454
the delivery and also how to describe

72
00:04:54,582 --> 00:04:58,106
the metadata of miniapp. We are collaborating with some

73
00:04:58,128 --> 00:05:02,270
other groups in WC, like the progressive web application working

74
00:05:02,340 --> 00:05:06,122
group, in order to align both approaches

75
00:05:06,186 --> 00:05:10,250
and having a common understanding and interoperability

76
00:05:10,330 --> 00:05:15,038
among technologies. So you can see that this fragmentation

77
00:05:15,214 --> 00:05:19,666
of the market is trying to be solved, at least with

78
00:05:19,768 --> 00:05:23,022
the maximum number of miniapp vendors

79
00:05:23,166 --> 00:05:26,946
into a common w three c miniapp specification.

80
00:05:27,138 --> 00:05:31,714
I will present quick apps which is a specific implementation

81
00:05:31,762 --> 00:05:34,934
of this standard work in w three c.

82
00:05:34,972 --> 00:05:38,534
The MiniApp standard Quick apps is a framework based

83
00:05:38,572 --> 00:05:42,230
on view js. So following the model view view model

84
00:05:42,300 --> 00:05:46,010
approach to create miniapp for Android.

85
00:05:46,830 --> 00:05:50,460
So like you can see in this picture, we can create

86
00:05:51,650 --> 00:05:55,006
native like applications like the one here.

87
00:05:55,108 --> 00:05:58,862
And the user only needs to scan the query code or tap on

88
00:05:58,916 --> 00:06:04,594
a link and just enjoy in the experience so they

89
00:06:04,632 --> 00:06:07,250
don't see any process of installation.

90
00:06:08,550 --> 00:06:12,094
Here you can see the high level architecture,

91
00:06:12,142 --> 00:06:15,554
quick apps the platform. You can see that quick

92
00:06:15,592 --> 00:06:19,510
apps are running on top of the operating system and quick apps might

93
00:06:19,580 --> 00:06:23,442
run in parallel with native applications and web applications.

94
00:06:23,506 --> 00:06:27,474
So all these three types of applications might coexist in

95
00:06:27,532 --> 00:06:31,654
the system. The developers, sorry, the users

96
00:06:31,702 --> 00:06:35,802
can experience native look and feel features, so they

97
00:06:35,856 --> 00:06:39,082
might experience the same as in a native application,

98
00:06:39,216 --> 00:06:42,638
also with the same performance. Because they are running directly on the

99
00:06:42,644 --> 00:06:45,966
operating system, the end users only need

100
00:06:45,988 --> 00:06:49,594
to scan a quercode, tap a link or clicking

101
00:06:49,642 --> 00:06:53,010
on a banner and just run and enjoy the experience

102
00:06:53,080 --> 00:06:56,894
of the quick app. These are very useful

103
00:06:56,942 --> 00:07:00,574
for creating specific task oriented

104
00:07:00,702 --> 00:07:04,066
services like transactional services. When you are in the

105
00:07:04,088 --> 00:07:07,350
street, when you are in the move, you have to pay for a parking,

106
00:07:07,690 --> 00:07:11,218
checking for some information about real traffic

107
00:07:11,314 --> 00:07:14,998
information, so many different things that

108
00:07:15,084 --> 00:07:19,062
you require direct access to some service and without

109
00:07:19,116 --> 00:07:22,186
the minimum friction to get to

110
00:07:22,208 --> 00:07:25,766
access this service. In terms of developers,

111
00:07:25,878 --> 00:07:29,594
what we can achieve with quick apps, we can have access to

112
00:07:29,632 --> 00:07:33,710
the system APIs, the native APIs, advanced system

113
00:07:33,780 --> 00:07:37,118
APIs like access to the calendar, access to

114
00:07:37,204 --> 00:07:40,730
the list of contacts. We will be able to push

115
00:07:40,810 --> 00:07:44,658
notifications to the user based on the native capabilities of

116
00:07:44,664 --> 00:07:48,626
the device with less code. It is estimated that

117
00:07:48,808 --> 00:07:52,882
we only need the 20% of code lines done

118
00:07:52,936 --> 00:07:56,500
in a native application and we will have

119
00:07:57,190 --> 00:08:01,570
the possibility to use pre builtin user interface

120
00:08:01,650 --> 00:08:05,094
components and also prebuilt services that can

121
00:08:05,132 --> 00:08:08,886
access to these APIs of the device. The quickup

122
00:08:08,918 --> 00:08:12,794
platform also allow us to control the full lifecycle of the

123
00:08:12,832 --> 00:08:16,266
product in terms of marketing and other aspects like the

124
00:08:16,288 --> 00:08:19,020
discoverability of the product or the application,

125
00:08:19,550 --> 00:08:23,470
user acquisition, monetization and user retention.

126
00:08:23,890 --> 00:08:28,222
So we have the possibility to create

127
00:08:28,356 --> 00:08:32,694
more discoverable applications using different capabilities

128
00:08:32,762 --> 00:08:37,010
of our device, using the widgets in our device,

129
00:08:37,350 --> 00:08:40,894
creating search results based on the global

130
00:08:40,942 --> 00:08:44,594
search engine of our device. As you can see on the right

131
00:08:44,632 --> 00:08:48,758
hand side, the right picture where

132
00:08:48,924 --> 00:08:52,246
some of the applications are listed there. But in

133
00:08:52,268 --> 00:08:56,150
the case of the Quick app, you only have to click on the open button

134
00:08:56,220 --> 00:08:59,990
instead of install button. So you also can discover

135
00:09:00,070 --> 00:09:03,562
the quick apps in websites, also in links from

136
00:09:03,616 --> 00:09:07,642
other application native applications or quick

137
00:09:07,696 --> 00:09:11,246
apps. So we have deep links to go

138
00:09:11,348 --> 00:09:14,654
specific to specific parts of the application and

139
00:09:14,692 --> 00:09:19,134
also we can have as the rest of the native application all

140
00:09:19,172 --> 00:09:23,130
the quick apps listed in app marketplaces in the existing ones.

141
00:09:23,220 --> 00:09:27,010
Or we can create some new directories to list these

142
00:09:27,080 --> 00:09:30,526
quick apps. In terms of user acquisition,

143
00:09:30,718 --> 00:09:34,094
we have also some mechanisms. You can see the relation

144
00:09:34,142 --> 00:09:37,846
with the discoverability and this user acquisition. It's very easy

145
00:09:38,028 --> 00:09:42,200
to find a quick app somewhere on the web or on

146
00:09:43,050 --> 00:09:46,918
some banner and just click and start

147
00:09:47,004 --> 00:09:50,394
using the application. So enhancing the

148
00:09:50,432 --> 00:09:54,230
user experience because you are not leaving the environment,

149
00:09:54,310 --> 00:09:58,250
you don't need to go to other places. So you

150
00:09:58,320 --> 00:10:01,486
just click and start enjoying the experience. So there

151
00:10:01,508 --> 00:10:05,406
is the minimum friction in this process

152
00:10:05,508 --> 00:10:08,730
of acquiring new user.

153
00:10:08,890 --> 00:10:13,010
Also we have some possibilities to include specific

154
00:10:13,080 --> 00:10:16,606
services based on the implements of the vendors

155
00:10:16,718 --> 00:10:20,338
for user identification. In case you have some

156
00:10:20,504 --> 00:10:24,066
existing account in your device, only with a click

157
00:10:24,168 --> 00:10:28,086
you can log in into this quick app, reducing as

158
00:10:28,108 --> 00:10:32,278
well the friction of registration and collecting information

159
00:10:32,364 --> 00:10:36,290
about the user in terms of monetizing

160
00:10:36,370 --> 00:10:40,726
your product, your application. This is also straightforward.

161
00:10:40,838 --> 00:10:44,886
We can include miniapp payments. It will depend on the implementation

162
00:10:44,918 --> 00:10:48,870
of the vendor. You can implement your own method or you can rely

163
00:10:48,950 --> 00:10:52,410
on third party payment mechanisms.

164
00:10:52,490 --> 00:10:55,818
And also you can add advertising

165
00:10:55,994 --> 00:11:00,186
in ad adverts and also rewarded ads

166
00:11:00,218 --> 00:11:03,970
videos, the ones that you can use for your casual games.

167
00:11:04,310 --> 00:11:08,274
Well, this is a good way to monetize your

168
00:11:08,312 --> 00:11:12,898
applications very quickly and very indirect in

169
00:11:12,904 --> 00:11:16,840
terms of user retention. Once they are using

170
00:11:17,450 --> 00:11:20,742
the application, you will be able to

171
00:11:20,796 --> 00:11:25,314
offer the possibility of storing

172
00:11:25,362 --> 00:11:28,598
or creating a shortcut in the desktop

173
00:11:28,694 --> 00:11:32,070
in the same way as the rest of the native applications.

174
00:11:32,150 --> 00:11:36,182
So with a simple prompt the user

175
00:11:36,326 --> 00:11:39,942
might agree in registering or

176
00:11:40,016 --> 00:11:43,406
adding this shortcut in the home screen. So at the end

177
00:11:43,508 --> 00:11:47,278
they will be able to repeat the experience and just

178
00:11:47,364 --> 00:11:51,594
experience this application like a normal

179
00:11:51,642 --> 00:11:55,810
application, a native application, traditional one, but just

180
00:11:55,960 --> 00:11:59,810
with this brief step, very straightforward

181
00:12:01,190 --> 00:12:05,350
in terms of user retention as well. We have some possibilities to

182
00:12:05,420 --> 00:12:08,866
engage the user for marketing

183
00:12:08,898 --> 00:12:12,790
purposes. We can send push applications, we can offer

184
00:12:12,940 --> 00:12:16,758
possibilities of crossing data between

185
00:12:16,924 --> 00:12:20,666
different quick apps. We have also putting banners in

186
00:12:20,688 --> 00:12:24,490
the apps native or also

187
00:12:24,640 --> 00:12:28,490
in the web to engage the user

188
00:12:28,830 --> 00:12:32,374
in another experience using the same quick app.

189
00:12:32,432 --> 00:12:36,142
I will explain a little bit about the framework, how to create a quick app,

190
00:12:36,196 --> 00:12:39,710
and some details about the technical implementation that could be interesting

191
00:12:39,780 --> 00:12:43,234
for you. The framework the platform

192
00:12:43,352 --> 00:12:48,574
follows, as I mentioned, the view JS framework.

193
00:12:48,702 --> 00:12:52,798
So it follows a model, view V model approach.

194
00:12:52,974 --> 00:12:56,182
You can find some similarities if you are familiar to this

195
00:12:56,316 --> 00:13:01,974
framework. In this example, the example shows the

196
00:13:02,012 --> 00:13:05,686
typical structure of a page in a quick app.

197
00:13:05,788 --> 00:13:08,486
You see three different parts, templates,

198
00:13:08,678 --> 00:13:12,220
script and style. It's very obvious.

199
00:13:12,830 --> 00:13:16,090
The first part template is about the

200
00:13:16,160 --> 00:13:19,674
declarative rendering of the page, the structure and also

201
00:13:19,712 --> 00:13:23,520
some static information. And you can see some

202
00:13:24,290 --> 00:13:27,722
variables there using the mustache notation

203
00:13:27,866 --> 00:13:31,866
that it's for the data binding. Using the logic

204
00:13:31,898 --> 00:13:36,420
part from the script in the script, you can see how we can declare some

205
00:13:37,110 --> 00:13:41,380
variables that will be used by

206
00:13:41,990 --> 00:13:45,286
the template part, the rendering part, and in this

207
00:13:45,308 --> 00:13:48,742
way we can bind the information between

208
00:13:48,796 --> 00:13:52,422
these two parts, the logic and the templates. We are

209
00:13:52,476 --> 00:13:55,558
following virtual dome manipulation with this,

210
00:13:55,644 --> 00:13:59,340
so the refresh will be very quick and

211
00:13:59,870 --> 00:14:02,614
the experience will be quicker.

212
00:14:02,742 --> 00:14:06,646
And as you can see here, we use also style

213
00:14:06,678 --> 00:14:10,526
sheets based on CSS. But the good part is we

214
00:14:10,548 --> 00:14:14,334
can include natively the preprocessing of

215
00:14:14,452 --> 00:14:17,534
CSS using place and SAS. So you see

216
00:14:17,572 --> 00:14:21,118
this example, I think it's very intuitive, very simple to

217
00:14:21,204 --> 00:14:26,866
understand, but let's see the

218
00:14:26,888 --> 00:14:30,660
basic example of a components in a quick apps page.

219
00:14:32,230 --> 00:14:35,646
Regarding the architecture of the platform of the Quickapp platform.

220
00:14:35,768 --> 00:14:39,090
You can see here a high level diagram.

221
00:14:39,250 --> 00:14:43,090
In the top we can see the front end framework,

222
00:14:43,170 --> 00:14:46,550
the one you can imagine based on the previous example,

223
00:14:46,700 --> 00:14:50,570
we have a domain specific language, something similar to

224
00:14:50,720 --> 00:14:54,602
HTML. It's not the same, but very close to

225
00:14:54,656 --> 00:14:58,122
HTML. The style and the layout based

226
00:14:58,176 --> 00:15:01,422
on CSS, as I mentioned, not only CSS, but we also

227
00:15:01,476 --> 00:15:04,750
have the possibility to preprocess using some

228
00:15:04,820 --> 00:15:08,830
advanced variables and some specific

229
00:15:08,980 --> 00:15:12,646
functions using less and SaaS preprocessors,

230
00:15:12,778 --> 00:15:16,238
and also some possibilities to implement

231
00:15:16,334 --> 00:15:20,942
APIs and services based on the underlying device.

232
00:15:21,006 --> 00:15:24,986
Services and apps with user interface components,

233
00:15:25,038 --> 00:15:28,738
basic ones and also some others we can include by ourselves

234
00:15:28,834 --> 00:15:32,710
and reusing by ourselves and controlling the app

235
00:15:32,780 --> 00:15:36,630
lifecycle and the lifecycle of all pages of

236
00:15:36,700 --> 00:15:40,346
our quick apps. In the center we

237
00:15:40,368 --> 00:15:44,010
can see two main blocks, which is the most important ones

238
00:15:44,080 --> 00:15:47,834
in the Quickap platform, which is the JavaScript engine,

239
00:15:48,032 --> 00:15:51,710
currently implemented on a v eight engine.

240
00:15:51,780 --> 00:15:55,466
So a JavaScript engine, very powerful and separately

241
00:15:55,578 --> 00:16:00,266
a render engine. So you can see two different engines

242
00:16:00,298 --> 00:16:03,682
that can help us to provide more

243
00:16:03,816 --> 00:16:07,810
performance to the quick app at the end using the system

244
00:16:07,880 --> 00:16:09,860
we have in green.

245
00:16:11,190 --> 00:16:14,782
Behind the two engines we have the JavaScript

246
00:16:14,846 --> 00:16:18,918
bridge, which is the link between the platform itself and

247
00:16:19,004 --> 00:16:23,298
the underlying operating system, and all the specific APIs,

248
00:16:23,394 --> 00:16:27,218
native APIs of the system, the operating system and tied

249
00:16:27,314 --> 00:16:29,130
to the device,

250
00:16:30,990 --> 00:16:34,730
the runtime platform. Based on the previous example

251
00:16:34,800 --> 00:16:38,166
of the architecture, we see that the two main engines,

252
00:16:38,198 --> 00:16:41,678
the JavaScript engine and the rendering engine,

253
00:16:41,844 --> 00:16:45,178
are running in separate threads.

254
00:16:45,274 --> 00:16:49,150
So this is why we can have

255
00:16:49,220 --> 00:16:52,160
better performance than some of the,

256
00:16:52,790 --> 00:16:56,526
let's say the other types of applications.

257
00:16:56,638 --> 00:17:00,222
So the JavaScript engine is running all the logic,

258
00:17:00,366 --> 00:17:03,602
the pages and the components of this script part,

259
00:17:03,736 --> 00:17:11,138
and the rendering engine refers.

260
00:17:11,234 --> 00:17:14,566
It's rendering the pages and the components using the

261
00:17:14,588 --> 00:17:18,426
templates. This information about how to model,

262
00:17:18,528 --> 00:17:22,742
structure and offer the information to the user also creating

263
00:17:22,886 --> 00:17:26,698
or based on the style sheets we defined in

264
00:17:26,704 --> 00:17:30,334
the previous example for instance. And these two engines are

265
00:17:30,372 --> 00:17:33,914
communicating one with the events produced

266
00:17:33,962 --> 00:17:37,450
by the user. And the JavaScript engine is sending

267
00:17:37,530 --> 00:17:40,910
back the data to populate,

268
00:17:42,790 --> 00:17:46,130
to populate and to refresh the

269
00:17:46,200 --> 00:17:49,806
information in the pages shown to the user.

270
00:17:49,918 --> 00:17:53,534
And in the bottom you can see also the JavaScript

271
00:17:53,582 --> 00:17:58,114
bridge, which is the bridge that should be created

272
00:17:58,162 --> 00:18:01,670
on top of the operating system that links the

273
00:18:01,740 --> 00:18:04,754
platform with the device.

274
00:18:04,882 --> 00:18:07,906
You can create your user interfaces

275
00:18:08,018 --> 00:18:11,638
very quickly and very intuitively with these prebuilt components,

276
00:18:11,734 --> 00:18:15,382
some of them pretty similar to the existing ones in HTML.

277
00:18:15,446 --> 00:18:19,238
As you can see the a for links or span or tips,

278
00:18:19,414 --> 00:18:23,338
but some other more advanced like rating for instance

279
00:18:23,514 --> 00:18:27,546
if you want to include starbase ratings for reviews

280
00:18:27,578 --> 00:18:31,482
on your products, for instance, and also some other possibilities

281
00:18:31,546 --> 00:18:34,486
like adding tabs with just an element,

282
00:18:34,618 --> 00:18:38,930
or if you want to add the element of pull down and refresh like

283
00:18:39,000 --> 00:18:42,260
in the native applications if you want to refresh your page.

284
00:18:42,870 --> 00:18:46,342
These are the prebuilt components. You can create your

285
00:18:46,396 --> 00:18:49,574
own components, custom components, and you can

286
00:18:49,612 --> 00:18:53,606
export them, import them and reduce them in

287
00:18:53,628 --> 00:18:57,574
a flexible way. Also, you can use the

288
00:18:57,612 --> 00:19:01,514
existing ones in the open source repositories that are available

289
00:19:01,632 --> 00:19:04,986
already. If you

290
00:19:05,088 --> 00:19:08,682
want to enrich the experience of the end user, you can make the most

291
00:19:08,736 --> 00:19:12,558
of the device. They are using these services

292
00:19:12,644 --> 00:19:16,526
and APIs that are very advanced and can make

293
00:19:16,548 --> 00:19:20,190
the most of this experience. You can access to specific

294
00:19:20,260 --> 00:19:23,938
information about the device. You can query information about the application,

295
00:19:24,104 --> 00:19:27,874
about other applications in the system. You can

296
00:19:28,072 --> 00:19:32,062
have direct and intuitive access to databases,

297
00:19:32,126 --> 00:19:35,460
local databases. You can share information with other

298
00:19:36,170 --> 00:19:40,994
applications. You have the possibility to use the native device

299
00:19:41,122 --> 00:19:44,674
to share content with other applications installed

300
00:19:44,722 --> 00:19:46,230
in the device.

301
00:19:49,310 --> 00:19:52,986
You can make the most of the features of the device, accessing to the

302
00:19:53,008 --> 00:19:56,230
contacts, the calendar. You can set alarms

303
00:19:56,310 --> 00:19:58,650
on the device, controlling the volume,

304
00:19:59,310 --> 00:20:03,120
assessing information relevant for

305
00:20:06,130 --> 00:20:09,802
the operation of the quick app. That could be, for instance,

306
00:20:09,866 --> 00:20:14,260
the level of the battery or the type of the connection you have

307
00:20:15,190 --> 00:20:20,338
in every moment if you are connected through WiFi or on

308
00:20:20,424 --> 00:20:23,550
these kind of things, and also the vendors,

309
00:20:23,630 --> 00:20:27,874
the quickup vendors, the specific platforms might implement

310
00:20:28,002 --> 00:20:31,702
specific services for the

311
00:20:31,756 --> 00:20:35,494
capabilities to make the most of the capabilities of their platforms or

312
00:20:35,532 --> 00:20:39,978
their devices, and also their cloud based

313
00:20:40,144 --> 00:20:43,574
services. So there is a full range

314
00:20:43,622 --> 00:20:47,450
of services and APIs we can use to make the most of the

315
00:20:47,520 --> 00:20:50,410
experience delivered through quick apps.

316
00:20:50,850 --> 00:20:54,586
So far, quick apps is only supported by Android devices,

317
00:20:54,778 --> 00:20:58,186
but there are billions of Android

318
00:20:58,218 --> 00:21:01,962
devices out there, so this is a good start. Our objective

319
00:21:02,026 --> 00:21:05,374
is expanding this quick app platform to other platforms,

320
00:21:05,422 --> 00:21:08,802
to any device with the target of having a

321
00:21:08,856 --> 00:21:12,414
universal platform to run these quick apps or mini apps.

322
00:21:12,542 --> 00:21:16,326
Also following the standards in WC, aligning with

323
00:21:16,348 --> 00:21:20,770
the existing standards, and the objective of having this universality

324
00:21:20,850 --> 00:21:24,694
and interoperability between platforms, we know that we

325
00:21:24,732 --> 00:21:28,318
need more documents, more code, more examples

326
00:21:28,434 --> 00:21:31,466
and more engagement from the community. So this

327
00:21:31,488 --> 00:21:35,190
is why we have started the Quick Apps initiative.

328
00:21:35,350 --> 00:21:38,922
We recently launched this interest group. This is an open

329
00:21:38,976 --> 00:21:43,390
source community group hosted by the open source

330
00:21:44,530 --> 00:21:48,266
consortium called ow two, which is vendor

331
00:21:48,298 --> 00:21:51,834
neutral. Anyone is invited to join can contribute

332
00:21:51,882 --> 00:21:56,494
with us. You can be a company, an individual, a developer,

333
00:21:56,622 --> 00:22:00,782
and you can join our task forces in a collaborative

334
00:22:00,846 --> 00:22:03,758
effort to create more documents, more examples,

335
00:22:03,854 --> 00:22:08,386
also to create joint marketing

336
00:22:08,418 --> 00:22:12,006
opportunities and any possible collaboration you

337
00:22:12,028 --> 00:22:16,086
might imagine. So just scan the QR code, subscribe the

338
00:22:16,108 --> 00:22:19,762
mailing list and join the initiative. As I mentioned, it's vendor neutral,

339
00:22:19,826 --> 00:22:22,870
open, transparent, and you are invited to join.

340
00:22:23,290 --> 00:22:26,646
So thank you very much for having with me. I hope you

341
00:22:26,668 --> 00:22:30,430
like Quick apps the mini apps and this light app

342
00:22:30,500 --> 00:22:34,046
ecosystem, and hopefully we can meet

343
00:22:34,148 --> 00:22:37,614
in this interest group in this quick app

344
00:22:37,732 --> 00:22:40,780
initiative, and you will be more than welcome. Thank you.

