1
00:01:28,530 --> 00:01:31,686
Hey everyone, how are you doing? I'm Robert a

2
00:01:31,708 --> 00:01:35,766
solutions architect from AWS, and today I have a

3
00:01:35,788 --> 00:01:39,670
talk for you called stop configuring infrastructure and start

4
00:01:39,740 --> 00:01:43,038
co it. Now, a better

5
00:01:43,124 --> 00:01:47,502
title for that talk could also be how

6
00:01:47,556 --> 00:01:51,514
coding infrastructure helped me to deal with my yaml

7
00:01:51,562 --> 00:01:54,866
phobia. So what do I mean with that?

8
00:01:54,968 --> 00:01:58,482
Let me pedal back for a second here. How did it all

9
00:01:58,536 --> 00:02:01,934
start? Well, if you've

10
00:02:01,982 --> 00:02:06,082
been present in the dark ages of infrastructure

11
00:02:06,146 --> 00:02:09,586
provisioning, you did a lot of stuff manually.

12
00:02:09,698 --> 00:02:13,334
You had wikis, you had playbooks, and you had this one

13
00:02:13,372 --> 00:02:17,654
person who knew everything. Then you

14
00:02:17,692 --> 00:02:21,478
started to script everything. You started writing a lot of bash

15
00:02:21,494 --> 00:02:24,970
scripts that did things most of the time,

16
00:02:25,120 --> 00:02:28,220
unless they didn't, and you were back to square one.

17
00:02:28,990 --> 00:02:31,866
After that we got a revolution,

18
00:02:31,978 --> 00:02:36,190
and that was declaring infrastructure and its configuration

19
00:02:36,770 --> 00:02:40,462
declaratively with things like cloudformation or

20
00:02:40,516 --> 00:02:44,194
terraform. And that was also already

21
00:02:44,312 --> 00:02:47,746
pretty good. And this

22
00:02:47,768 --> 00:02:51,234
is where my story starts, because for me it

23
00:02:51,272 --> 00:02:54,020
wasn't good enough. So let me explain.

24
00:02:55,190 --> 00:02:58,422
Like two years back I was looking at a new

25
00:02:58,476 --> 00:03:02,038
role as an architect, and I knew AWS is the focus.

26
00:03:02,204 --> 00:03:06,374
So I've worked with AWS before and I did infrastructure as

27
00:03:06,412 --> 00:03:10,198
code, of course. But I was figuring out,

28
00:03:10,284 --> 00:03:13,290
well, in my new role I will do it all the time.

29
00:03:13,360 --> 00:03:16,426
So I need to get deeper into it and see

30
00:03:16,448 --> 00:03:19,562
how it feels, because I think I will do it like basically every

31
00:03:19,616 --> 00:03:23,102
day. So I did a very simple

32
00:03:23,156 --> 00:03:26,846
thing. I said, let's build a small example

33
00:03:26,948 --> 00:03:30,542
application because infrastructure AWS code is easy,

34
00:03:30,596 --> 00:03:34,580
right? Can't be that hard. All I want to do is

35
00:03:35,030 --> 00:03:39,166
I want to connect to the Internet, I want to have a load balancer,

36
00:03:39,358 --> 00:03:42,674
and if I query that load balancer from the

37
00:03:42,712 --> 00:03:45,890
outside, I want the request to go

38
00:03:45,960 --> 00:03:50,066
to a number of EC, two instances, so a number of vms,

39
00:03:50,258 --> 00:03:53,906
and of course I want to build a well architected

40
00:03:53,938 --> 00:03:57,266
application. So it should be resilient, so it shouldn't

41
00:03:57,298 --> 00:04:00,838
be just one easy to instance, it should be multiple. So I need an auto

42
00:04:00,854 --> 00:04:04,602
scaling group. So looks pretty simple,

43
00:04:04,656 --> 00:04:09,846
right? Well, I was mildly

44
00:04:09,958 --> 00:04:13,502
annoyed to scared to see that

45
00:04:13,636 --> 00:04:17,050
when I wrote this in cloudformation, which is the native

46
00:04:17,130 --> 00:04:19,790
infrastructure as code language for Aws.

47
00:04:20,610 --> 00:04:24,020
Yeah, I had a fully declarative template at the end.

48
00:04:24,630 --> 00:04:28,114
I had hit and miss ide support

49
00:04:28,232 --> 00:04:31,086
for filling out all these values,

50
00:04:31,278 --> 00:04:35,414
having the right fields and so on. But the thing

51
00:04:35,452 --> 00:04:39,270
that stuck out to me most was that I had to write over

52
00:04:39,340 --> 00:04:41,830
300 lines of yaml.

53
00:04:42,170 --> 00:04:46,230
Why was that? I was

54
00:04:46,380 --> 00:04:49,500
kind of stupefied here. Well,

55
00:04:49,870 --> 00:04:52,774
if we zoom into that architecture.

56
00:04:52,902 --> 00:04:56,330
It's actually not that easy what things

57
00:04:56,400 --> 00:05:00,426
are, right? So of course

58
00:05:00,528 --> 00:05:03,600
you have the load balancer and you have your auto scaling group,

59
00:05:04,530 --> 00:05:07,626
but you also need to have a VPC,

60
00:05:07,738 --> 00:05:11,722
which is the virtual private cloud, the private network

61
00:05:11,786 --> 00:05:15,700
that you are building in the cloud where all these things will be deployed into.

62
00:05:16,390 --> 00:05:19,586
And the problems don't stop there.

63
00:05:19,768 --> 00:05:23,854
Actually, these are the big players, the big parts

64
00:05:23,902 --> 00:05:27,686
that you see in your nice infrastructure diagram. But actually

65
00:05:27,868 --> 00:05:30,978
these things need a lot of additional

66
00:05:31,074 --> 00:05:34,294
objects that have to be configured. And these are

67
00:05:34,332 --> 00:05:38,530
all somehow related to the big resource,

68
00:05:38,610 --> 00:05:43,306
to the main resource or to the others. So the

69
00:05:43,328 --> 00:05:47,018
VPC, it's not just, hey, give me a network and you're done. You have

70
00:05:47,024 --> 00:05:50,250
to think about subnets, you have to think about connectivity,

71
00:05:50,910 --> 00:05:54,842
you have to think about routing. And for the load balancer,

72
00:05:54,906 --> 00:05:58,430
it's not just a load balancer, you have to think about its security group,

73
00:05:58,500 --> 00:06:02,506
which is basically its built in firewall that says which ports

74
00:06:02,618 --> 00:06:06,340
you can connect to and which ones not. And then you have to tell it

75
00:06:07,190 --> 00:06:11,230
what is the target when an incoming request

76
00:06:11,390 --> 00:06:14,658
is going through the load balancer. So then you're going to

77
00:06:14,664 --> 00:06:18,594
the auto scaling group. And that auto scaling group is also not

78
00:06:18,632 --> 00:06:22,658
just it, it's like, okay, you want to scale, how do you want to scale?

79
00:06:22,834 --> 00:06:25,922
What are we actually launching? I need a template.

80
00:06:25,986 --> 00:06:29,386
How do you set up the vms in that auto scaling group? And you

81
00:06:29,408 --> 00:06:32,698
need an IAC role that defines what these

82
00:06:32,784 --> 00:06:36,266
individual instances could do with other AWS services

83
00:06:36,368 --> 00:06:39,658
and so on and so on. So that's the reason why

84
00:06:39,744 --> 00:06:43,050
you come out with 300 lines of yaml.

85
00:06:43,130 --> 00:06:46,560
And honestly that was pretty scary to me.

86
00:06:47,090 --> 00:06:50,462
And yeah, it pulled me down

87
00:06:50,516 --> 00:06:54,666
a lot. That's basically where it all went downhill

88
00:06:54,698 --> 00:06:59,006
for me. And I started to drink a lot coffee.

89
00:06:59,118 --> 00:07:02,642
And then I talked to a colleague about that and mind you, this was

90
00:07:02,696 --> 00:07:06,050
somewhere around 2020. And he said, you know what, Robert,

91
00:07:06,890 --> 00:07:10,262
you are a web developer by trade. That's what I

92
00:07:10,316 --> 00:07:13,474
did before, right? I was a web developer, did javascript,

93
00:07:13,522 --> 00:07:17,334
typescript, node JS, all that stuff. I've heard

94
00:07:17,372 --> 00:07:21,306
of something new. I've heard of a way where you

95
00:07:21,328 --> 00:07:25,334
can actually take real general purpose programming

96
00:07:25,382 --> 00:07:29,354
languages and use those to

97
00:07:29,392 --> 00:07:32,320
model your infrastructure. And I said,

98
00:07:32,850 --> 00:07:37,070
really? That sounds like a dream.

99
00:07:37,570 --> 00:07:40,746
And he got closer and closer

100
00:07:40,778 --> 00:07:43,986
to me and he said, robert, what if

101
00:07:44,008 --> 00:07:47,620
I would tell you there's a world where before

102
00:07:48,310 --> 00:07:52,690
you were doing manual things and you had to be a lucky engineer,

103
00:07:53,030 --> 00:07:56,802
then you went on and you could do scripting,

104
00:07:56,946 --> 00:08:00,706
you had to be a bash engineer now you are provisioning

105
00:08:00,738 --> 00:08:04,770
your infrastructure declaratively, and you're a Yaml engineer

106
00:08:04,930 --> 00:08:08,714
and you hate it. What is the next step?

107
00:08:08,832 --> 00:08:12,220
What if you could use code

108
00:08:12,830 --> 00:08:15,946
and typical abstractions in code

109
00:08:16,128 --> 00:08:19,946
and become a software engineer? And that's what

110
00:08:19,968 --> 00:08:23,674
we're talking about today. So in the recent

111
00:08:23,722 --> 00:08:27,802
years a few new frameworks have come up that help you to abstract

112
00:08:27,866 --> 00:08:31,758
your infrastructure or to model your infrastructure with general

113
00:08:31,844 --> 00:08:33,730
purpose programming languages.

114
00:08:34,870 --> 00:08:38,514
Here we can see two widely known frameworks that

115
00:08:38,552 --> 00:08:42,942
do that. So one is from AWS, the cloud development kit, or CDK

116
00:08:43,006 --> 00:08:46,722
for short, and one is from Pulumi.

117
00:08:46,866 --> 00:08:50,038
Now for today, I want

118
00:08:50,044 --> 00:08:53,894
to dive deeper into the CDK, and I think it should be

119
00:08:53,932 --> 00:08:58,026
transferable if you're coding another framework, because a lot

120
00:08:58,048 --> 00:09:01,594
of the things I will talk about hold true for all

121
00:09:01,632 --> 00:09:05,242
of these, let's say new wave frameworks that are using

122
00:09:05,296 --> 00:09:08,874
programming languages. So what

123
00:09:08,912 --> 00:09:12,654
is the cloud development kit? Well, let me

124
00:09:12,692 --> 00:09:16,142
read it off here, because it's really a mouthful. It's an open

125
00:09:16,196 --> 00:09:19,790
source multilanguage software development framework,

126
00:09:20,290 --> 00:09:24,642
okay, for modeling cloud infrastructure years,

127
00:09:24,696 --> 00:09:28,610
that's what we want to do. AWS reusable components.

128
00:09:29,990 --> 00:09:33,474
So what are the main benefits I

129
00:09:33,512 --> 00:09:37,026
could gain by using the CDK or another framework

130
00:09:37,138 --> 00:09:40,098
that lets me use general purpose languages?

131
00:09:40,274 --> 00:09:44,306
Well, first of all, if I have any familiarity

132
00:09:44,418 --> 00:09:48,070
with a programming language, I'm probably

133
00:09:48,140 --> 00:09:51,914
able to use that language to now model my infrastructure instead of

134
00:09:51,952 --> 00:09:55,626
juggling with a yard of yaml. And you can see here at

135
00:09:55,648 --> 00:09:58,726
the bottom right, all the languages that are supported

136
00:09:58,758 --> 00:10:01,930
by CDK. So you can write in Python,

137
00:10:02,010 --> 00:10:06,110
in JavaScript, in typeScript, in Java,

138
00:10:06,770 --> 00:10:10,350
in c sharp, and also in Golang,

139
00:10:10,690 --> 00:10:14,434
which is currently in developer preview. You also get great tool

140
00:10:14,472 --> 00:10:18,002
support because basically every ide under the sun

141
00:10:18,136 --> 00:10:22,606
understands code, and it gives you things like autocomplete

142
00:10:22,718 --> 00:10:26,066
and inline documentation. Now the

143
00:10:26,088 --> 00:10:28,630
real fun starts with the abstraction.

144
00:10:28,970 --> 00:10:32,502
So you are getting classes, and those

145
00:10:32,556 --> 00:10:36,054
classes, as we will see in a minute, they can do a lot of

146
00:10:36,092 --> 00:10:40,060
smart stuff for you that then you don't have to figure out.

147
00:10:40,510 --> 00:10:44,102
And that's actually one of the superpowers

148
00:10:44,246 --> 00:10:47,420
of CDK and other frameworks like that.

149
00:10:48,030 --> 00:10:51,200
Finally, because you're now using code,

150
00:10:52,050 --> 00:10:55,662
it's easier for you to manage infrastructure and code

151
00:10:55,716 --> 00:10:59,454
together, or to put it differently, in a similar way.

152
00:10:59,572 --> 00:11:02,742
And that can be very helpful, especially for developers

153
00:11:02,906 --> 00:11:06,962
who might know a programming language very well, but might

154
00:11:07,016 --> 00:11:09,940
not like to be Yaml engineers like we are.

155
00:11:10,470 --> 00:11:13,890
So how does CDK actually work?

156
00:11:13,960 --> 00:11:17,142
And again, this is similar to how other

157
00:11:17,196 --> 00:11:20,614
frameworks work as well. So first

158
00:11:20,652 --> 00:11:24,454
of all on the left side, you're writing what we call a CDK application,

159
00:11:24,572 --> 00:11:28,050
and that's really an app in the language of

160
00:11:28,060 --> 00:11:31,674
your choice. In that application you create so

161
00:11:31,712 --> 00:11:34,838
called stacks, and those stacks would represent

162
00:11:35,014 --> 00:11:38,874
everything you need around a part of your application, or maybe

163
00:11:38,912 --> 00:11:42,894
even the whole application. And within that stack you

164
00:11:42,932 --> 00:11:46,826
are creating so called constructs. And these constructs are classes

165
00:11:46,858 --> 00:11:50,270
that are actually representing your infrastructure.

166
00:11:50,610 --> 00:11:54,410
For example, if you were to use it on AWS,

167
00:11:54,570 --> 00:11:58,606
you want to create an object store, which is an s three bucket,

168
00:11:58,718 --> 00:12:01,874
and then you would have a class you instantiate for that s three

169
00:12:01,912 --> 00:12:05,490
bucket and it would represent that resource.

170
00:12:06,090 --> 00:12:09,702
Now once you've written that, you are actually

171
00:12:09,756 --> 00:12:13,446
going to the CDK CLI which you have installed on

172
00:12:13,468 --> 00:12:16,998
your pc, then, and you would ask it to

173
00:12:17,084 --> 00:12:21,098
synthesize the stack. So then the CLI will

174
00:12:21,184 --> 00:12:24,582
execute your application and as an output

175
00:12:24,646 --> 00:12:28,074
it will create a cloudformation template, which is the

176
00:12:28,112 --> 00:12:31,562
native infrastructure AWS code language

177
00:12:31,626 --> 00:12:34,894
we have at AWS. And then it will go

178
00:12:34,932 --> 00:12:38,830
forth and take that template and ask the

179
00:12:38,900 --> 00:12:42,000
AWS cloudformation service to deploy it.

180
00:12:42,390 --> 00:12:45,010
And then your resources are actually created.

181
00:12:46,150 --> 00:12:49,518
So that's definitely a paradigm shift

182
00:12:49,614 --> 00:12:53,106
where before you were writing templates and you would

183
00:12:53,128 --> 00:12:57,410
then ask cloud formation or possibly

184
00:12:57,570 --> 00:13:00,946
another runtime on your pc to actually deploy

185
00:13:00,978 --> 00:13:05,462
the resources. Now you would write an

186
00:13:05,516 --> 00:13:09,354
app in the language of your

187
00:13:09,392 --> 00:13:14,954
choice, and this

188
00:13:14,992 --> 00:13:18,806
app in the language of your choice would then be translated,

189
00:13:18,998 --> 00:13:21,630
transpiled, compiled, however you want to call it,

190
00:13:21,700 --> 00:13:26,746
synthesized into the infrastructure

191
00:13:26,778 --> 00:13:31,070
as code template, and this is then deployed.

192
00:13:31,730 --> 00:13:34,706
So it is basically one step more.

193
00:13:34,888 --> 00:13:39,106
But from your point of view you are just interacting with

194
00:13:39,208 --> 00:13:42,820
the code at the very left.

195
00:13:45,830 --> 00:13:49,494
Now basically back to my problem. I was

196
00:13:49,532 --> 00:13:52,834
writing a lot of yaml and it drove

197
00:13:52,882 --> 00:13:56,134
me crazy basically. So how does CDK help

198
00:13:56,172 --> 00:13:59,846
me here? I mean, I have to write code, right? So what's the benefit here?

199
00:13:59,948 --> 00:14:03,066
And that's where the so called constructs come.

200
00:14:03,168 --> 00:14:08,074
And these are the classes that represent your resources. Now with

201
00:14:08,112 --> 00:14:11,742
CDK we are basically separating them

202
00:14:11,796 --> 00:14:14,350
in multiple layers.

203
00:14:15,090 --> 00:14:19,034
So on layer one we have the automatically generated

204
00:14:19,082 --> 00:14:22,682
classes which are just a one to one representation of the

205
00:14:22,756 --> 00:14:26,494
infrastructure as code template resources

206
00:14:26,542 --> 00:14:29,010
you had before when you were using cloudformation.

207
00:14:30,230 --> 00:14:33,266
Now the second level is where it gets interesting.

208
00:14:33,448 --> 00:14:37,778
So these are high level representation

209
00:14:37,874 --> 00:14:41,634
of AWS services, which have a lot of smarts

210
00:14:41,682 --> 00:14:45,302
built into them. So when you use those you get

211
00:14:45,356 --> 00:14:48,778
same defaults and best practices out of the box.

212
00:14:48,944 --> 00:14:52,154
And in a minute we will look at an example of how that

213
00:14:52,192 --> 00:14:56,314
works. On the third layer we

214
00:14:56,352 --> 00:15:00,066
have the purpose built constructs. And these are opinionated abstractions

215
00:15:00,118 --> 00:15:03,114
that are basically whole architectures.

216
00:15:03,242 --> 00:15:06,862
And this is really great because with those you can really look

217
00:15:06,916 --> 00:15:10,782
like an infrastructure visit without the 60

218
00:15:10,836 --> 00:15:14,850
years of experience that might be required in the job description

219
00:15:15,430 --> 00:15:19,730
because these are basically covering whole architectures.

220
00:15:20,470 --> 00:15:23,666
For example, it could be basically what I

221
00:15:23,688 --> 00:15:27,110
have built AWS, one class that does all the things,

222
00:15:27,180 --> 00:15:30,706
creates the load balancer, creates the auto

223
00:15:30,738 --> 00:15:33,974
scaling group, wires everything together. So you

224
00:15:34,012 --> 00:15:36,920
get a lot of stuff out of the box here.

225
00:15:38,430 --> 00:15:42,966
Now for this abstraction and those same defaults

226
00:15:43,078 --> 00:15:46,614
that I just talked about, let's have a concrete

227
00:15:46,662 --> 00:15:51,054
example for how that works. So now

228
00:15:51,252 --> 00:15:55,022
basically what I've built with cloudformation before, we are now

229
00:15:55,076 --> 00:15:58,254
doing this with CDK. So you see

230
00:15:58,292 --> 00:16:01,966
some snippets from my code editor here. So let's say

231
00:16:01,988 --> 00:16:05,874
I've initialized my CDK project and

232
00:16:05,912 --> 00:16:09,346
now I'm starting to write the code. The first thing I do is I create

233
00:16:09,368 --> 00:16:13,266
the VPC and as I'm typing this you

234
00:16:13,288 --> 00:16:17,062
can already see that I get really nice code

235
00:16:17,116 --> 00:16:20,902
completion and also inline documentation for what this thing already

236
00:16:20,956 --> 00:16:26,006
does. So that's great. Now if

237
00:16:26,028 --> 00:16:29,462
we read the whole text a little bit more you would actually

238
00:16:29,516 --> 00:16:33,194
see that this is a level two construct. And as I said, it has

239
00:16:33,232 --> 00:16:36,186
a lot of smarts built in and it does a lot of great things for

240
00:16:36,208 --> 00:16:39,994
you already. Here's the full bullet list for

241
00:16:40,032 --> 00:16:43,534
that. The full bucket list, so to say. So I will not

242
00:16:43,572 --> 00:16:47,322
read everything that is here, but basically the gist

243
00:16:47,386 --> 00:16:50,894
is it does basically everything. You would want to

244
00:16:50,932 --> 00:16:54,334
have a same default well architected

245
00:16:54,382 --> 00:16:57,940
VPC already created in your account.

246
00:16:58,310 --> 00:17:01,634
And just to give you some ideas of what it does,

247
00:17:01,672 --> 00:17:05,022
it not just creates the VPC, it also creates subnets,

248
00:17:05,086 --> 00:17:09,426
it creates private and public subnets. It thinks about all the routing,

249
00:17:09,538 --> 00:17:13,474
it thinks about Internet connectivity and it tries to be resilient

250
00:17:13,522 --> 00:17:16,886
because it does all of that while at least setting it

251
00:17:16,908 --> 00:17:20,890
up. So it's highly available over two availability zones,

252
00:17:21,310 --> 00:17:25,322
which is also great. So with

253
00:17:25,376 --> 00:17:29,100
one lighter of code we did all of that, which is already

254
00:17:29,470 --> 00:17:32,766
mind blowing for me. And it still is. It was at that

255
00:17:32,788 --> 00:17:36,320
time and it still is. So let's go on.

256
00:17:37,970 --> 00:17:42,186
For the next part we are actually creating

257
00:17:42,218 --> 00:17:45,774
the auto scaling group. So that is the group of instances

258
00:17:45,822 --> 00:17:49,570
that can even scale, hence the name and

259
00:17:49,640 --> 00:17:52,882
represent my web servers. So again

260
00:17:52,936 --> 00:17:56,466
I'm starting to create to instantiate a class called auto

261
00:17:56,498 --> 00:17:59,960
scaling group here. And this time I need to provide

262
00:18:02,650 --> 00:18:06,722
some more properties, some more arguments

263
00:18:06,866 --> 00:18:10,634
for creating that. So I have to pass the VPC obviously, but I also

264
00:18:10,672 --> 00:18:14,486
need to define what instance type do I want to use. And here what's

265
00:18:14,518 --> 00:18:18,090
great for me is that this is actually based on

266
00:18:18,160 --> 00:18:21,994
types and enums or however you want to call them. So these

267
00:18:22,032 --> 00:18:25,182
are defined values that you find

268
00:18:25,236 --> 00:18:28,478
in the code in the classes provided, so you don't have

269
00:18:28,484 --> 00:18:31,678
to look it up in the Internet and maybe make a typo and then it

270
00:18:31,684 --> 00:18:35,186
doesn't work. You can easily fetch those in

271
00:18:35,208 --> 00:18:39,234
your editor, get autocompletion again and basically choose

272
00:18:39,272 --> 00:18:43,026
the right type without any issues. Then we have

273
00:18:43,048 --> 00:18:46,526
to set a few more variables

274
00:18:46,558 --> 00:18:50,386
here, a few more arguments like what machine image, what VM image

275
00:18:50,418 --> 00:18:54,162
we want to use. And we can also say in which subnets

276
00:18:54,306 --> 00:18:57,706
this auto scaling group should operate. And there we are

277
00:18:57,728 --> 00:19:01,622
referencing the VPC that we have created before. So that's

278
00:19:01,686 --> 00:19:05,782
super cool. Basically it's

279
00:19:05,846 --> 00:19:09,514
very familiar for a software developer to

280
00:19:09,552 --> 00:19:13,038
set this up. Now we're already at step three

281
00:19:13,124 --> 00:19:17,214
and that is configuring the load balancer. So again we

282
00:19:17,252 --> 00:19:21,070
are instantiating a class called application load balancer.

283
00:19:21,410 --> 00:19:25,218
We give it some settings and then we use some cool

284
00:19:25,304 --> 00:19:29,054
convenience functions. So there is for example a convenience

285
00:19:29,102 --> 00:19:32,754
function saying add listener. And that means if I

286
00:19:32,792 --> 00:19:36,450
call this and give it a port, that's the port that is

287
00:19:36,520 --> 00:19:39,960
available on my load balancer when I try to connect to it.

288
00:19:40,330 --> 00:19:43,830
And after I did that, I use another convenience function

289
00:19:43,900 --> 00:19:47,286
called add targets. And in add targets I tell the

290
00:19:47,308 --> 00:19:50,426
load balancer that it should forward those requests to

291
00:19:50,448 --> 00:19:53,340
the auto scaling group that we have created before.

292
00:19:53,790 --> 00:19:57,798
And finally, I'm also configuring

293
00:19:57,894 --> 00:20:01,534
the security. So there is a neat convenience function that

294
00:20:01,572 --> 00:20:05,694
says allow default port from any IPV four.

295
00:20:05,892 --> 00:20:09,162
And that means that we will publish

296
00:20:09,226 --> 00:20:12,926
that port to the Internet and that all the security groups

297
00:20:12,958 --> 00:20:16,306
are actually configured correctly to let that traffic in.

298
00:20:16,488 --> 00:20:20,260
And now we're basically already done.

299
00:20:21,510 --> 00:20:25,134
Something I want to point out here, which I find is really

300
00:20:25,192 --> 00:20:29,046
cool, is that what

301
00:20:29,068 --> 00:20:32,166
we've done here is talking to me.

302
00:20:32,268 --> 00:20:34,200
I can understand that.

303
00:20:35,530 --> 00:20:39,062
Let me take a small segue

304
00:20:39,126 --> 00:20:41,900
here into clean code.

305
00:20:43,070 --> 00:20:46,886
This might be known by you. So there's

306
00:20:46,918 --> 00:20:49,994
this book, clean Code by Robert C.

307
00:20:50,032 --> 00:20:53,518
Martin. And that book is basically about

308
00:20:53,604 --> 00:20:57,358
how to write great code. And one of the

309
00:20:57,524 --> 00:21:01,134
pillars or the tenants that they have is that if you write

310
00:21:01,172 --> 00:21:03,886
clean code, it can be understood easily.

311
00:21:04,078 --> 00:21:07,822
And understanding something easily helps with actually enhancing

312
00:21:07,886 --> 00:21:11,266
it by someone who was

313
00:21:11,288 --> 00:21:14,802
not the original author. So it's really a

314
00:21:14,856 --> 00:21:18,934
success factor for collaborating, which I think is great.

315
00:21:19,132 --> 00:21:24,102
And if you think about what we've just saw with

316
00:21:24,156 --> 00:21:27,894
these convenience functions, we have a kind

317
00:21:27,932 --> 00:21:31,386
of story. We're adding our listener to

318
00:21:31,408 --> 00:21:34,742
the load balancer and we're adding the targets for the load balancer.

319
00:21:34,806 --> 00:21:38,166
So that for me is telling

320
00:21:38,198 --> 00:21:41,280
the story of this small picture we have down here.

321
00:21:42,210 --> 00:21:45,742
And that story is my load balancer shall receive traffic on port

322
00:21:45,796 --> 00:21:50,222
80 and send it to my instances. Now this

323
00:21:50,276 --> 00:21:54,500
is something that a human can understand pretty well,

324
00:21:55,110 --> 00:21:58,946
but what's actually happening behind the

325
00:21:58,968 --> 00:22:02,434
scenes and what CDK is managing for you is all the

326
00:22:02,472 --> 00:22:05,746
creation and wiring of the multiple resources that are

327
00:22:05,768 --> 00:22:09,734
behind that. But that part is to some

328
00:22:09,772 --> 00:22:13,142
extent just complicated. It's busy work, you have to do it.

329
00:22:13,196 --> 00:22:16,566
And if you would read the cloudformation template for the

330
00:22:16,588 --> 00:22:20,042
right part, it's much harder to understand

331
00:22:20,176 --> 00:22:24,006
the original story that we have on the left. So that's

332
00:22:24,038 --> 00:22:27,610
something for me that is one of the game

333
00:22:27,680 --> 00:22:32,430
changers about CDK and similar

334
00:22:32,500 --> 00:22:36,160
frameworks, that you can really tell a story by code

335
00:22:36,930 --> 00:22:38,640
if you write good code.

336
00:22:40,130 --> 00:22:43,954
So let's have a look at

337
00:22:44,072 --> 00:22:47,762
how these two things compare. So on the left side

338
00:22:47,816 --> 00:22:50,850
in the ring, we have cloud formation,

339
00:22:51,590 --> 00:22:55,450
the default and native infrastructure definition language,

340
00:22:55,630 --> 00:22:59,570
basically representing the declarative

341
00:22:59,650 --> 00:23:02,630
class of things. It's fully declarative.

342
00:23:03,290 --> 00:23:07,106
IDe support varies on what you have, and it's

343
00:23:07,138 --> 00:23:09,900
rather verbose with 300 lines of code,

344
00:23:10,510 --> 00:23:14,330
or Yaml, to say that on the right

345
00:23:14,400 --> 00:23:18,154
side we have the contender. It's the CDK app.

346
00:23:18,352 --> 00:23:21,520
It has used abstraction via code,

347
00:23:21,970 --> 00:23:25,294
which did a lot of things for us. It definitely has

348
00:23:25,332 --> 00:23:28,702
some imperative aspects because we are writing in a real

349
00:23:28,756 --> 00:23:32,094
programming language. But we saw that

350
00:23:32,132 --> 00:23:35,346
we profit immensely from a lot of built in,

351
00:23:35,448 --> 00:23:38,914
sane defaults and best practices. And in total,

352
00:23:39,032 --> 00:23:42,450
I don't know if you counted, we created less than 30

353
00:23:42,520 --> 00:23:45,960
lines of code, which is awesome.

354
00:23:47,290 --> 00:23:51,640
So that was the point for me where I was

355
00:23:52,650 --> 00:23:55,942
totally. Basically, my mind

356
00:23:55,996 --> 00:24:00,442
blew at that point. That this is possible with CDK is

357
00:24:00,496 --> 00:24:04,266
great. And again, it's not just down to the programming languages I

358
00:24:04,288 --> 00:24:07,210
can use, it's down to these built in,

359
00:24:07,280 --> 00:24:11,034
same defaults and best practices with other

360
00:24:11,152 --> 00:24:14,462
declarative languages. There are also modules you can put in

361
00:24:14,516 --> 00:24:17,854
to make it easier to abstract some of that

362
00:24:17,892 --> 00:24:21,258
away. But the cool thing is with CDK that's all included,

363
00:24:21,354 --> 00:24:25,102
you do not have to search for it. It's in the main library.

364
00:24:25,246 --> 00:24:29,140
And I think this is super powerful. And when I did that,

365
00:24:30,390 --> 00:24:33,938
I was so happy. I was jumping up and down in

366
00:24:33,944 --> 00:24:38,230
my seat. I was calling my wife, saying, hey darling,

367
00:24:38,810 --> 00:24:42,694
I did great things today. I did a lot of work with

368
00:24:42,732 --> 00:24:46,294
a new tool I have, and I did it super quickly,

369
00:24:46,492 --> 00:24:50,122
I was so efficient with that. And she

370
00:24:50,176 --> 00:24:54,550
said yeah, that's great darling.

371
00:24:54,710 --> 00:24:58,006
So you can come home from work earlier

372
00:24:58,038 --> 00:25:01,738
today and do the dishes. I kind of blew

373
00:25:01,754 --> 00:25:05,694
it there, but basically I'm really happy with

374
00:25:05,732 --> 00:25:09,390
that. And from there on I'm just using

375
00:25:09,460 --> 00:25:13,170
CDK for basically whenever I can to create

376
00:25:13,240 --> 00:25:17,042
and manage my infrastructure. Now we

377
00:25:17,096 --> 00:25:20,626
talked a lot about how we can do

378
00:25:20,648 --> 00:25:24,066
this with AWS, but I want to make

379
00:25:24,248 --> 00:25:28,134
clear that you understand that CDK is an open

380
00:25:28,172 --> 00:25:32,600
source framework and there are actually other

381
00:25:32,970 --> 00:25:36,118
variants of it that also deal with

382
00:25:36,204 --> 00:25:39,626
infrastructure that is not just AWS. So as you can

383
00:25:39,648 --> 00:25:43,370
see here, we have the AWS CDK.

384
00:25:44,110 --> 00:25:47,674
We have cdks which is

385
00:25:47,712 --> 00:25:51,274
a variant of CDK to provision resources

386
00:25:51,322 --> 00:25:55,134
in Kubernetes, and we have CDKTF which

387
00:25:55,172 --> 00:25:59,674
is CDK for terraform. So if you are already using terraform,

388
00:25:59,802 --> 00:26:04,046
you can also now write your terraform templates

389
00:26:04,238 --> 00:26:08,450
with CDK in a programming language of your choice.

390
00:26:09,990 --> 00:26:13,810
So the main message to take away here is

391
00:26:13,960 --> 00:26:19,810
CDK is not just for AWS, you can almost provision

392
00:26:19,890 --> 00:26:22,520
and manage anything with it.

393
00:26:23,450 --> 00:26:26,440
And where would you find all those things? Well,

394
00:26:26,810 --> 00:26:30,774
there's the construct hub, which is not only providing

395
00:26:30,822 --> 00:26:34,234
constructs for the AWS CDK, but as you can see here,

396
00:26:34,352 --> 00:26:37,462
four cdks and CDK for terraform.

397
00:26:37,606 --> 00:26:40,800
And you find this under constructs dev.

398
00:26:42,610 --> 00:26:45,806
So let me

399
00:26:45,828 --> 00:26:50,030
sum this up for you. Why should you code your infrastructure

400
00:26:50,530 --> 00:26:53,794
with CDK or similar frameworks? Well,

401
00:26:53,912 --> 00:26:57,618
first of all, you can leverage the developer experience

402
00:26:57,704 --> 00:27:01,970
you already have, and you can work with familiar programming languages.

403
00:27:02,790 --> 00:27:05,894
You can profit a great deal from

404
00:27:05,932 --> 00:27:09,334
IDE support with things like autocompletion and

405
00:27:09,372 --> 00:27:12,934
inline documentation. And as we've seen in my example,

406
00:27:13,052 --> 00:27:16,194
you can use powerful abstractions to build smarter,

407
00:27:16,322 --> 00:27:20,154
faster and more understandable. And in

408
00:27:20,192 --> 00:27:23,606
general you can bring code and infrastructure closer

409
00:27:23,638 --> 00:27:26,220
together. Now you might ask,

410
00:27:26,590 --> 00:27:30,510
why should I not do that? And that's a trick question

411
00:27:30,580 --> 00:27:34,590
because of course there's no reason not to do it. It's the bestest tool ever,

412
00:27:34,660 --> 00:27:38,670
obviously. Just kidding. Of course

413
00:27:38,820 --> 00:27:42,350
if you are more familiar with configuration tools like

414
00:27:42,420 --> 00:27:44,370
cloud formation or terraform,

415
00:27:45,350 --> 00:27:48,878
CDK might just not be your thing. Or if you're

416
00:27:48,894 --> 00:27:52,594
not too deep into coding or debugging stuff, because that

417
00:27:52,632 --> 00:27:56,078
happens from time to time, might also not be your cup of

418
00:27:56,104 --> 00:27:59,526
tea. But the good thing here is you

419
00:27:59,548 --> 00:28:01,080
can actually use both.

420
00:28:02,170 --> 00:28:05,538
Why decide? For one, you can mix and match depending

421
00:28:05,554 --> 00:28:08,778
on your use case and your team environment. So maybe

422
00:28:08,944 --> 00:28:13,334
your infrastructure team that provides like the basic

423
00:28:13,382 --> 00:28:16,902
platform services that is still using terraform,

424
00:28:17,046 --> 00:28:21,002
but for a new application you are building. You are managing

425
00:28:21,066 --> 00:28:24,560
everything for that in CDK. Why not?

426
00:28:25,010 --> 00:28:29,274
We are wrapping up here. I hope I could get you excited

427
00:28:29,402 --> 00:28:33,502
for coding infrastructure instead of configuring

428
00:28:33,566 --> 00:28:37,646
it. If you want to try this out, for example with the AWS

429
00:28:37,678 --> 00:28:41,694
CDK, I can recommend the CDK workshop

430
00:28:41,742 --> 00:28:44,820
which you can find under cdkworkshop.com.

431
00:28:45,610 --> 00:28:48,710
And if you want to dive deeper,

432
00:28:49,530 --> 00:28:53,794
there are also resources out there to learn more about the CDK

433
00:28:53,842 --> 00:28:56,870
for terraform, the CDK for Kubernetes.

434
00:28:57,210 --> 00:29:00,630
As I said, you can find the construct hub under constructs

435
00:29:00,710 --> 00:29:04,902
Dev and you could also research CDK

436
00:29:04,966 --> 00:29:08,922
pipelines which is a cool way configuring infrastructure,

437
00:29:09,056 --> 00:29:12,590
coding and code and the pipeline

438
00:29:13,010 --> 00:29:16,574
closer together in basically one

439
00:29:16,612 --> 00:29:18,910
single code repository.

440
00:29:20,370 --> 00:29:23,554
Finally, because CDK is

441
00:29:23,672 --> 00:29:27,490
not just an AWS thing, but really a thing

442
00:29:27,560 --> 00:29:30,580
of a big growing open source community,

443
00:29:31,030 --> 00:29:34,206
I want to make you aware of the upcoming

444
00:29:34,318 --> 00:29:37,910
CDK day. And the CDK Day is

445
00:29:37,980 --> 00:29:41,766
a completely community organized event where

446
00:29:41,868 --> 00:29:46,002
all these things that you're seeing here, not just the AWS CDK

447
00:29:46,066 --> 00:29:48,578
but also for terraform, for Kubernetes,

448
00:29:48,754 --> 00:29:52,614
are discussed and celebrated. And actually this

449
00:29:52,652 --> 00:29:57,686
is coming up pretty soon at the end of May. So I

450
00:29:57,708 --> 00:30:00,040
would say check it out.

451
00:30:00,850 --> 00:30:04,222
I hope you liked my presentation. Feel free

452
00:30:04,276 --> 00:30:08,014
to find me on Twitter or LinkedIn and tell

453
00:30:08,052 --> 00:30:11,214
me if you did something cool with CDK in your

454
00:30:11,252 --> 00:30:13,020
next project. Take care.

