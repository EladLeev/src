1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer,

3
00:00:06,610 --> 00:00:10,474
a quality engineer who wants to tackle the challenge of improving

4
00:00:10,522 --> 00:00:14,026
reliability in your DevOps? You can enable your DevOps

5
00:00:14,058 --> 00:00:16,510
for reliability with chaos native.

6
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native Litmus cloud

7
00:01:16,730 --> 00:01:20,902
hello and welcome to today's session here at Comp 42.

8
00:01:21,036 --> 00:01:24,338
My name is Allen Vailliencourt. I'm a sales engineer with teleport.

9
00:01:24,434 --> 00:01:28,210
Today we're going to talk about keys or certificates for SSH

10
00:01:28,290 --> 00:01:31,594
access. And why should I care, especially if you're coming from the

11
00:01:31,632 --> 00:01:34,460
SRE world? So let's jump right into it.

12
00:01:34,830 --> 00:01:38,710
So this is probably what you're used to seeing if you're

13
00:01:38,870 --> 00:01:42,414
doing any kind of Linux systems administration work

14
00:01:42,452 --> 00:01:45,920
along that line. This is probably a very familiar screen to you.

15
00:01:46,370 --> 00:01:49,840
You fire up your local terminal and you see

16
00:01:50,210 --> 00:01:53,826
a bunch of publickey private keys, or maybe even this when

17
00:01:53,848 --> 00:01:57,730
you're accessing a remote resources, right? You're using SSH,

18
00:01:58,950 --> 00:02:02,594
what's your identity file, what user? And then

19
00:02:02,632 --> 00:02:06,466
you're logging in and just kind of moving on. This is how we've

20
00:02:06,498 --> 00:02:09,974
been accessing resources for years, and it's still very

21
00:02:10,012 --> 00:02:14,226
popular. It's not going away anytime soon. So continuing

22
00:02:14,258 --> 00:02:18,070
on this, what about your servers? How long

23
00:02:18,220 --> 00:02:21,546
is your authorized keys list? Have you taken time to go look

24
00:02:21,568 --> 00:02:25,254
at one of your production servers and do a can of that authorized

25
00:02:25,302 --> 00:02:28,294
keys list? And you might be surprised and say, whoa,

26
00:02:28,342 --> 00:02:31,558
there's a bunch of entries on here. So the

27
00:02:31,584 --> 00:02:35,290
big question is, do you even know which of those keys

28
00:02:35,370 --> 00:02:39,338
are valid? So let's look at publickey authentication.

29
00:02:39,434 --> 00:02:42,846
Let's look at a few of the pros around it. Why do

30
00:02:42,868 --> 00:02:45,966
we have it today? We're not going to go into a deep history of it,

31
00:02:45,988 --> 00:02:49,886
but just a high level. For years we've been using PKA for accessing

32
00:02:49,918 --> 00:02:53,330
resources. It's not going away anytime soon. I mean

33
00:02:53,400 --> 00:02:57,266
today to gain access to AWS, GCP, probably your routers,

34
00:02:57,298 --> 00:03:00,566
your switches, your Linux servers, wherever they might live,

35
00:03:00,668 --> 00:03:04,390
you're leveraging. More likely than not, something along the line

36
00:03:04,460 --> 00:03:07,522
of public key infrastructure using with OpenSSh.

37
00:03:07,666 --> 00:03:11,146
The original intent behind it was better security.

38
00:03:11,328 --> 00:03:14,314
So with a good PK system in place,

39
00:03:14,432 --> 00:03:18,182
users are not having to worry about postit notes and passwords.

40
00:03:18,246 --> 00:03:21,834
They're not having to worry about long complicated passwords.

41
00:03:21,962 --> 00:03:26,000
Back in the day, for us old salts, you were probably

42
00:03:26,450 --> 00:03:30,170
member something like our host, right? And accessing

43
00:03:30,250 --> 00:03:33,954
remote resources that way, it's come a long way, and then having

44
00:03:33,992 --> 00:03:37,794
passwords is one way. And then when keys, publickey, private keys started

45
00:03:37,832 --> 00:03:41,230
coming out, it just simplified, especially from a systems administration

46
00:03:41,310 --> 00:03:45,134
standpoint. And with PKA, you can even automate

47
00:03:45,182 --> 00:03:48,002
your processes todays. If you're using CI, CD,

48
00:03:48,066 --> 00:03:50,230
Jenkins, BitBucket,

49
00:03:50,650 --> 00:03:54,134
bamboo, Ansible, Circle, CI, whatever,

50
00:03:54,332 --> 00:03:58,282
terraform, GitHub, you can leverage public

51
00:03:58,336 --> 00:04:01,994
private keys and even that kind of thought process to

52
00:04:02,032 --> 00:04:04,826
access those resources. In fact,

53
00:04:04,928 --> 00:04:08,774
most of today's modern services like GitHub or BitBucket

54
00:04:08,822 --> 00:04:13,046
or GitLab do not necessarily recommend using passwords

55
00:04:13,078 --> 00:04:16,926
to authenticate in order to push your code up. They'd rather you generate a

56
00:04:16,948 --> 00:04:20,190
public private key in order to do that, and they have full support

57
00:04:20,260 --> 00:04:24,142
for that. So keys are super easy to create and deploy.

58
00:04:24,206 --> 00:04:26,590
We've been doing it for years, SsH,

59
00:04:26,670 --> 00:04:30,850
keygen, T and then ED 2519.

60
00:04:30,920 --> 00:04:34,850
That's the encryption cryptography standard that I use.

61
00:04:35,000 --> 00:04:38,182
And you might use RSA or one of the others, and that's fine.

62
00:04:38,316 --> 00:04:42,354
This is not the webinar for talking about that, but for generating

63
00:04:42,402 --> 00:04:46,454
a key, it's really easy to do. So that

64
00:04:46,492 --> 00:04:49,714
brings in line, right? It's not overly difficult to find

65
00:04:49,772 --> 00:04:53,914
a system that does not support public key authentication today.

66
00:04:54,032 --> 00:04:57,306
So the question is, right, keys are superior. Change my

67
00:04:57,328 --> 00:05:01,610
mind. That's kind of what we're thinking many times, right? Why change

68
00:05:01,680 --> 00:05:05,646
from keys to certificates for authentication? What's the reasoning behind this?

69
00:05:05,748 --> 00:05:09,054
If the system isn't broke, why change

70
00:05:09,092 --> 00:05:11,898
it up? Well, we're going to talk a little bit about that and then we'll

71
00:05:11,914 --> 00:05:15,074
jump into high level demo of how

72
00:05:15,112 --> 00:05:18,626
you can get started today. So a few cons that

73
00:05:18,648 --> 00:05:22,914
we can say that exist around PKA comes

74
00:05:22,952 --> 00:05:27,122
along this line. Right? What happens when your user moves on

75
00:05:27,256 --> 00:05:31,394
to a new role? Maybe they move on to a new job, change departments.

76
00:05:31,442 --> 00:05:34,662
Maybe they were part of your SRES team, Sysadmins team,

77
00:05:34,716 --> 00:05:38,386
security team. But then they went to developers or product marketing

78
00:05:38,498 --> 00:05:41,766
and they had access to all these resources through public private keys,

79
00:05:41,798 --> 00:05:45,226
but now they're no longer there. So what did you do?

80
00:05:45,328 --> 00:05:49,642
Or have you done anything? What about when a device is

81
00:05:49,696 --> 00:05:53,806
potentially compromised or stolen? Laptops. With all

82
00:05:53,828 --> 00:05:57,738
of us, many of us working remotely, working distributed laptops

83
00:05:57,754 --> 00:06:01,182
are powerful enough that most developers, people in this world,

84
00:06:01,236 --> 00:06:04,722
because we're so remote and traveling, things like that,

85
00:06:04,856 --> 00:06:08,478
that we have laptops. And if it doesn't have local encryption turned

86
00:06:08,494 --> 00:06:11,890
on and it gets compromised or stolen, what then?

87
00:06:12,040 --> 00:06:15,718
So this interesting article from ssh.com talks a

88
00:06:15,724 --> 00:06:19,480
little bit about the spread and the growth of

89
00:06:20,170 --> 00:06:23,942
keys out there. Just in this piece,

90
00:06:23,996 --> 00:06:28,198
talking about one customer, financial sector, 3 million

91
00:06:28,284 --> 00:06:31,666
keys, 750,000 distinct key pairs from

92
00:06:31,708 --> 00:06:35,354
15,000 servers and for large environments, that's probably

93
00:06:35,472 --> 00:06:39,066
on par for the norm. Maybe in your environment you could probably start calculating out.

94
00:06:39,088 --> 00:06:42,282
You're probably like, you know, we've got quite a few. And as an example

95
00:06:42,416 --> 00:06:46,350
you think, well, maybe we're just small. There's only 1020, 30 of us.

96
00:06:46,420 --> 00:06:50,014
We only have like 50 servers and there's not that much. Well,

97
00:06:50,052 --> 00:06:53,582
do the math and you can realize you have 50 servers

98
00:06:53,646 --> 00:06:57,314
times 30 developers, that's what, 15,000 keys that are

99
00:06:57,352 --> 00:07:01,362
now out there that you're having to manage and rotate or

100
00:07:01,416 --> 00:07:04,850
not rotate for accessing your resources. So continue

101
00:07:04,920 --> 00:07:08,226
on. So what about when someone accidentally commits a private

102
00:07:08,258 --> 00:07:12,118
key to their public repo, right? Within minutes this can

103
00:07:12,124 --> 00:07:15,682
be utilized to log into a service and cause chaos.

104
00:07:15,826 --> 00:07:19,090
Let me pull a story. Time, ladies and gentlemen,

105
00:07:19,170 --> 00:07:22,154
is years ago at a place I worked at,

106
00:07:22,192 --> 00:07:25,830
we had a gentleman that was one of our new DevOps engineers,

107
00:07:25,910 --> 00:07:29,514
SRes. And then for this person coming from a traditional world,

108
00:07:29,712 --> 00:07:33,642
they weren't used to using git, GitHub and committing

109
00:07:33,706 --> 00:07:37,914
stuff out there. So they had their private key for AWS

110
00:07:38,042 --> 00:07:41,786
and they accidentally committed it to their repo. And that repo

111
00:07:41,818 --> 00:07:45,266
wasn't set for private. It was a public repo out there for testing. Well,

112
00:07:45,288 --> 00:07:49,006
guess what happened? As you can imagine already bots were able to scan

113
00:07:49,038 --> 00:07:53,090
that within minutes. And within hours we had over 200

114
00:07:53,240 --> 00:07:56,626
servers being spun up on AWS data centers all

115
00:07:56,648 --> 00:07:59,902
over the world. So we got the email alerts from AWS.

116
00:07:59,966 --> 00:08:03,686
So immediately a bunch of us jumped on. We started shutting down, deleting all

117
00:08:03,708 --> 00:08:06,966
these servers. We nuked that key so that way it could not

118
00:08:06,988 --> 00:08:10,954
be reused again. And we had a good post mortem about having a good

119
00:08:10,992 --> 00:08:14,950
git ignore file and on top of that, don't committing your private keys.

120
00:08:15,030 --> 00:08:18,938
But this happens. And today in some of these services they actually

121
00:08:19,024 --> 00:08:22,362
have scanning tools. If you try it today, I think within

122
00:08:22,416 --> 00:08:26,398
GitHub and other places you'll probably get an email really quickly

123
00:08:26,484 --> 00:08:30,414
because their system will scan it and say, hey, it looks like you have a

124
00:08:30,452 --> 00:08:34,050
secret or a key or something publickey. So you might want to check on that.

125
00:08:34,120 --> 00:08:37,810
But still, the nuance of it still depends.

126
00:08:38,150 --> 00:08:41,714
The responsibility sits on you as an SRE to

127
00:08:41,752 --> 00:08:45,914
handle this and manage this. The other big thing, right? Scaling out deployments

128
00:08:46,062 --> 00:08:49,206
can be a wee bit challenging, right?

129
00:08:49,308 --> 00:08:53,174
Businesses are using homegrown methods to rotate keys or

130
00:08:53,212 --> 00:08:56,694
maybe commercial open resources vaults to manage this. I talk

131
00:08:56,732 --> 00:09:00,646
to a lot of customers on a weekly basis that they've

132
00:09:00,678 --> 00:09:04,426
grown and it was fine when they're small, but now they're hiring as

133
00:09:04,448 --> 00:09:08,390
a lot of sectors are hiring a lot and they're rapidly

134
00:09:08,470 --> 00:09:12,026
scaling out their virtual infrastructure. And on

135
00:09:12,048 --> 00:09:14,702
top of that they're having issues like what do we do now,

136
00:09:14,756 --> 00:09:18,286
right, how we manage this. Maybe we had a cron job or

137
00:09:18,388 --> 00:09:21,902
a bash script or an ansible playbook. And then it gets really

138
00:09:21,956 --> 00:09:25,342
complicated place I used to work at another job,

139
00:09:25,396 --> 00:09:28,026
we only had eight or nine developers and I had like 80, 90 servers.

140
00:09:28,058 --> 00:09:30,926
So I wrote an ansible playbook. So I would get all their public keys,

141
00:09:30,958 --> 00:09:33,886
I'd message them on slack or email, they'd send it to me, and then I'd

142
00:09:33,918 --> 00:09:37,042
run my playbook and update all my servers. Whether or not they needed

143
00:09:37,096 --> 00:09:40,790
access to it or not, they were devs and it was just easier to just

144
00:09:40,940 --> 00:09:44,198
put their public key on all the servers and just kind of go from there.

145
00:09:44,284 --> 00:09:47,558
But when that person moved on or that project moved on,

146
00:09:47,724 --> 00:09:51,226
me, with everything else going on, not necessarily having a lot of

147
00:09:51,248 --> 00:09:54,474
time to go back and clean up those keys and definitely pose some

148
00:09:54,512 --> 00:09:58,150
challenges there. You know another big thing, right? Keys don't expire.

149
00:09:58,310 --> 00:10:01,706
Unlike other things out there, keys typically are not

150
00:10:01,728 --> 00:10:05,238
going to expire. So that brings in line that troubleshoot

151
00:10:05,254 --> 00:10:07,390
that if it's out there, it could be out there a couple of years later

152
00:10:07,460 --> 00:10:10,750
and still leverage and it's still valid and it can still work.

153
00:10:10,820 --> 00:10:14,418
So Hackerman over there, give me some keys, he's going

154
00:10:14,424 --> 00:10:17,714
to have a good time with it. Just one of those cons to think

155
00:10:17,752 --> 00:10:21,822
about. So let's segue a little bit to certificates.

156
00:10:21,966 --> 00:10:25,398
Did you know that open SSH, which is pretty

157
00:10:25,404 --> 00:10:29,282
much the de facto standard for SSH certificates

158
00:10:29,426 --> 00:10:33,030
or SSH period, had support, added support

159
00:10:33,180 --> 00:10:36,614
back in version 5.4? And this is actually

160
00:10:36,652 --> 00:10:40,050
from the release notes, talks about SSH certificates,

161
00:10:40,130 --> 00:10:43,498
what they're made of, how you would kind of generate them. So here's the

162
00:10:43,504 --> 00:10:48,314
big kicker, I think. Look at there at the bottom. It was released in 2010,

163
00:10:48,512 --> 00:10:51,938
eleven years ago. So let's let that sink in. So we've

164
00:10:51,974 --> 00:10:56,142
had the ability to use SSH certificates instead

165
00:10:56,196 --> 00:10:59,854
of public private keys or in lieu of them or in conjunction with them for

166
00:10:59,892 --> 00:11:03,630
eleven years. So now you're thinking, I'm intrigued.

167
00:11:03,970 --> 00:11:07,682
Or maybe you're like, why am I just now hearing about

168
00:11:07,736 --> 00:11:11,250
certificate authentication and with all the problems, and I have that

169
00:11:11,320 --> 00:11:15,422
in quotes because they're not necessarily problems, they're things that I think in the sres

170
00:11:15,486 --> 00:11:18,966
world we deal with a lot and it's just kind of par for

171
00:11:18,988 --> 00:11:22,770
the course and we just move on. So certificates,

172
00:11:22,850 --> 00:11:26,118
we do use them all the time. You've been using them for years,

173
00:11:26,284 --> 00:11:29,658
thanks to Google and let's encrypt and other

174
00:11:29,824 --> 00:11:33,514
companies that have made HTTPs a web standard today.

175
00:11:33,632 --> 00:11:37,178
And guess what? Five, six, seven years ago, a majority of the

176
00:11:37,184 --> 00:11:40,986
sites you hit out there probably were not HTTPs enabled. It was

177
00:11:41,008 --> 00:11:44,318
only those ecommerce sres on that final care checkout when you

178
00:11:44,324 --> 00:11:48,030
put in your credit card information. But now, if you hit most

179
00:11:48,100 --> 00:11:51,546
websites across the web, you're going to get HTTPs.

180
00:11:51,658 --> 00:11:55,098
In fact, most of the time, if you hit a site that does

181
00:11:55,124 --> 00:11:58,526
not have that, you'll get a warning from Chrome or one of the other modern

182
00:11:58,558 --> 00:12:02,290
browsers. So the industry has kind of migrated and

183
00:12:02,360 --> 00:12:06,006
using HTTPs as a de facto standard, which is

184
00:12:06,028 --> 00:12:10,418
all certificate based authentication or authorization

185
00:12:10,514 --> 00:12:13,974
and verification on the web. So from

186
00:12:14,012 --> 00:12:17,922
an SSH perspective, we're not using HTTPs certificates, not using SSH

187
00:12:17,986 --> 00:12:21,526
certificates, we're using SSH. So there is a little bit of a learning curve,

188
00:12:21,558 --> 00:12:24,954
as you'll see as we kind of dive into this. But I

189
00:12:24,992 --> 00:12:28,186
believe once you get over that, you'll realize that

190
00:12:28,208 --> 00:12:32,794
it does pay off in the long run. Companies today already using certificate

191
00:12:32,842 --> 00:12:36,010
authentication, Netflix, open source,

192
00:12:36,090 --> 00:12:40,106
the bless protocol, they're open source

193
00:12:40,218 --> 00:12:43,566
using certificates. Lyft has their fork of it, and there's a number

194
00:12:43,588 --> 00:12:46,770
of them out there. And these companies have the developer staff, right?

195
00:12:46,840 --> 00:12:50,414
We're thankful for Netflix and Lyft, that open source, some of their big projects

196
00:12:50,462 --> 00:12:53,874
that become standardized across the board, but they

197
00:12:53,912 --> 00:12:57,550
have large engineering teams, large development teams, and they're software

198
00:12:57,630 --> 00:13:01,234
companies. Whereas your organization might not have that

199
00:13:01,272 --> 00:13:04,982
expertise in house to build and run or develop something

200
00:13:05,036 --> 00:13:09,062
like that. Or also there's a general lack of understanding knowledge

201
00:13:09,126 --> 00:13:12,806
around certificate authentication. And traditionally there's

202
00:13:12,838 --> 00:13:16,650
also been a lack of good tooling around, provisioning around,

203
00:13:16,720 --> 00:13:20,214
storing around auditing and rotating of certificates.

204
00:13:20,342 --> 00:13:23,834
So when you wrap all those together, you're like, that's too

205
00:13:23,872 --> 00:13:27,546
complicated. I'm just going to stick with what I know, which is keys,

206
00:13:27,658 --> 00:13:31,438
and just kind of move on from there. So let's look at a few of

207
00:13:31,604 --> 00:13:35,390
what I would call pros of using something like SSH

208
00:13:35,470 --> 00:13:38,558
certificates. We have a usability improvement,

209
00:13:38,734 --> 00:13:42,194
and part of that is this message that we get

210
00:13:42,312 --> 00:13:46,134
when we're using into a system that we're not familiar with or

211
00:13:46,172 --> 00:13:50,054
we have. Right. We log in and you

212
00:13:50,092 --> 00:13:53,366
get this warning and we're like, do I want to

213
00:13:53,388 --> 00:13:57,080
connect? Yes. No. And guess what? We just

214
00:13:57,610 --> 00:14:00,890
continue on and we just kind of ignore it and go from there.

215
00:14:01,040 --> 00:14:04,054
So there's can operability improvement.

216
00:14:04,182 --> 00:14:07,866
When you leverage something like Ssh keys on

217
00:14:07,888 --> 00:14:12,350
that line, you get host key verification, you get key distribution,

218
00:14:12,770 --> 00:14:16,350
things that help with from a certificate piece.

219
00:14:16,500 --> 00:14:20,106
Then there's a security improvement as well with certificates,

220
00:14:20,298 --> 00:14:23,726
one you don't have to worry about permanent keys out there. And on

221
00:14:23,748 --> 00:14:27,426
top of that, you get the ability, as you'll see, to have things like

222
00:14:27,608 --> 00:14:31,046
some metadata, as well as having, what do

223
00:14:31,048 --> 00:14:34,594
you call, excuse me, expiration dates, things like that to help you

224
00:14:34,632 --> 00:14:38,246
with those certificates. So let's look at it in

225
00:14:38,268 --> 00:14:41,538
an image. Certificates, SSH certificates in an image.

226
00:14:41,634 --> 00:14:45,314
So we have here is we've got a valid

227
00:14:45,362 --> 00:14:49,606
principles, we've got keys, we got a signature

228
00:14:49,718 --> 00:14:53,914
piece of the puzzle there, and we have things

229
00:14:53,952 --> 00:14:58,074
that make it encrypted. And what that does is it

230
00:14:58,112 --> 00:15:01,706
makes it so that way when a key is being

231
00:15:01,808 --> 00:15:05,594
leveraged, I mean, a certificate is being leveraged, you have

232
00:15:05,632 --> 00:15:08,762
the stuff there. So a signature. So if you have a signature

233
00:15:08,826 --> 00:15:12,330
there and someone tampers with a key, guess what? That signature

234
00:15:12,490 --> 00:15:16,226
gets invalid. If that key gets tampered with and it gets broken, we have a

235
00:15:16,248 --> 00:15:19,842
valid after and a valid before date. So you can set dates on

236
00:15:19,896 --> 00:15:23,586
certificates so that they only operate within a certain amount of time.

237
00:15:23,688 --> 00:15:27,294
And then what kind of certificate, whether it's a user certificate.

238
00:15:27,342 --> 00:15:30,902
So MIA is a user logging into a system or

239
00:15:30,956 --> 00:15:34,434
maybe a host certificate, which would be your web server,

240
00:15:34,482 --> 00:15:37,670
your application server, whatever server you're trying to gain access to,

241
00:15:37,740 --> 00:15:41,206
and then some other expenses and then valid principles and then a few

242
00:15:41,228 --> 00:15:44,634
others. So I have a link there to a blog where we talk

243
00:15:44,672 --> 00:15:48,154
about this a little bit more in detail so you can see some of that.

244
00:15:48,272 --> 00:15:52,042
So let's dig a little bit deeper on this. So this part

245
00:15:52,096 --> 00:15:55,246
we're going to start kind of peeling the layers back, kind of walk you through

246
00:15:55,348 --> 00:15:58,990
of how we're building this out. Then we're going to jump into a quick demo

247
00:15:59,060 --> 00:16:02,814
and show how you can even do this today. So, certificates require a

248
00:16:02,852 --> 00:16:06,926
certificate authority to own the public private key pairs to generate

249
00:16:06,958 --> 00:16:10,402
those certificates. So you need to have a CA and

250
00:16:10,456 --> 00:16:13,858
you can roll your own. And as we'll do here in today's demo, from a

251
00:16:13,864 --> 00:16:16,950
cryptography standpoint, we're really not changing anything.

252
00:16:17,020 --> 00:16:20,674
We're not adding anything different. We're just validating and we're

253
00:16:20,722 --> 00:16:24,006
signing those keys across the board. If a

254
00:16:24,028 --> 00:16:28,082
certificate is tampered with, it breaks that signature and invalidates

255
00:16:28,146 --> 00:16:31,170
that certificate. So that signature gets broken,

256
00:16:31,250 --> 00:16:34,938
that cert is invalid. And guess what? Now your connectivity to that system

257
00:16:35,104 --> 00:16:38,566
is now denied. And as I mentioned, once before, and you'll

258
00:16:38,598 --> 00:16:40,620
hear me probably mentioned a few more times,

259
00:16:41,470 --> 00:16:44,638
certificates can be set to expire. This is probably

260
00:16:44,724 --> 00:16:48,334
one of my favorite features about using SSH certificates is

261
00:16:48,372 --> 00:16:51,854
the fact that when one is issued, you know that there's only a certain time

262
00:16:51,892 --> 00:16:55,366
to live for that, and once it's done, you have to reissue

263
00:16:55,418 --> 00:16:58,526
a new one in order to continue accessing your systems.

264
00:16:58,638 --> 00:17:02,606
And of course from a security, maybe even an SRE standpoint,

265
00:17:02,718 --> 00:17:06,370
using a shorter time to live on a cert hopefully equals your security

266
00:17:06,440 --> 00:17:10,146
team sleeping a little bit better at night, not worrying about these keys

267
00:17:10,178 --> 00:17:14,082
that are out there, host certs which are used to identify

268
00:17:14,146 --> 00:17:18,274
hosts. It's that they say who they say they are, and then we have user

269
00:17:18,322 --> 00:17:21,914
certificates which care used to identify the user, that the user is

270
00:17:21,952 --> 00:17:25,722
who they say they are as well. So let's continue to break this down

271
00:17:25,856 --> 00:17:29,114
and start showing you some code and how it

272
00:17:29,152 --> 00:17:32,558
works. So what we're going to do first is what you'd need to

273
00:17:32,564 --> 00:17:36,314
do first is generate that host and user certificate

274
00:17:36,362 --> 00:17:41,102
authority. So what type. As I mentioned, I'm using Ed 2519,

275
00:17:41,236 --> 00:17:44,718
then the file name. So I'm going to, hey, write this as host can,

276
00:17:44,804 --> 00:17:48,306
user ca, whatever it is, a comment so you can have a little

277
00:17:48,328 --> 00:17:52,414
bit more hey, this is a host CA user CA. Now we're going to generate

278
00:17:52,462 --> 00:17:56,126
a host key and then sign it. Then we're also going to generate a user

279
00:17:56,158 --> 00:18:00,046
key and sign it. So I generate my host key again using

280
00:18:00,168 --> 00:18:03,894
25519 for what type my file name,

281
00:18:03,932 --> 00:18:06,998
what's going to be called, and then a passphrase, which is optional if you want

282
00:18:07,004 --> 00:18:10,762
to put in a passphrase. And then we're going to create and

283
00:18:10,816 --> 00:18:13,914
sign the host certificate based off that key.

284
00:18:14,032 --> 00:18:17,318
So again, still using ssh keygen. So what I'm

285
00:18:17,334 --> 00:18:20,586
doing is the host file name of that ca private key. So I generated that

286
00:18:20,608 --> 00:18:24,558
ca private key, so I'm going to use that to basically

287
00:18:24,724 --> 00:18:28,286
sign it with my I is my cert's identity. So this

288
00:18:28,308 --> 00:18:32,046
is just more of for logs and things like that. You know what

289
00:18:32,068 --> 00:18:35,890
the cert identifies as. The h is for

290
00:18:35,960 --> 00:18:39,566
a host certificate. The dash n is our comma

291
00:18:39,598 --> 00:18:42,722
separated list of principles, which would be from a host side,

292
00:18:42,776 --> 00:18:45,890
maybe your fully qualified domain name. So you can see an example.

293
00:18:45,960 --> 00:18:49,598
I've got app example, localhost, app app node.

294
00:18:49,694 --> 00:18:52,758
The v is a time to live. And we'll talk about that here in a

295
00:18:52,764 --> 00:18:56,614
little bit more. What it is. For this demo we got like a plus 2

296
00:18:56,652 --> 00:19:00,514
hours from a host certificate. So after 2 hours from this creation

297
00:19:00,642 --> 00:19:04,106
this certificate will expire. And then we're tying in what

298
00:19:04,128 --> 00:19:07,674
that public key was and it's going to export out that

299
00:19:07,712 --> 00:19:10,186
certificate. So let's go ahead and flip it and we're going to do the same

300
00:19:10,208 --> 00:19:13,466
thing with a user certificate. So now we got a host, one created for our

301
00:19:13,488 --> 00:19:16,974
host. We're going to do the same thing for a user. Pretty much looks pretty

302
00:19:17,012 --> 00:19:20,142
much the same except it doesn't have that h because

303
00:19:20,196 --> 00:19:23,582
we're not doing a host certificate. And my time to live

304
00:19:23,636 --> 00:19:27,362
is a little bit shorter because I want user certificates just

305
00:19:27,416 --> 00:19:31,410
to be a little bit shorter. But other than that I'm using my user ca

306
00:19:31,560 --> 00:19:34,786
to sign it. My identity, hey, this is an

307
00:19:34,808 --> 00:19:39,154
app or whatever, my identity, username, email, whatever my

308
00:19:39,192 --> 00:19:42,786
dash n, which is my principles would be something like linux login

309
00:19:42,818 --> 00:19:45,480
name. So if you're sshing into a system,

310
00:19:46,090 --> 00:19:50,182
if it's like ubuntu or EC, two user using AWS or

311
00:19:50,236 --> 00:19:53,738
whatever your name is, that would be your list of login names that

312
00:19:53,744 --> 00:19:57,274
you're allowed to ssh in as the v is your time to

313
00:19:57,312 --> 00:20:00,874
live. And then of course going back here is what

314
00:20:00,912 --> 00:20:04,686
you're signing up. So talk a little bit about that v part. So you

315
00:20:04,708 --> 00:20:07,934
can actually set a certificate to be like two weeks

316
00:20:07,972 --> 00:20:11,326
ago up until two weeks from now in the

317
00:20:11,348 --> 00:20:15,298
documentation of Openssh. Or if you go someplace like explain shell and

318
00:20:15,304 --> 00:20:18,482
you look at that v and read the man

319
00:20:18,536 --> 00:20:22,226
notes on it, there's a really whole host of options that you can

320
00:20:22,248 --> 00:20:26,434
have for plus 30. You can do a -30 plus

321
00:20:26,472 --> 00:20:30,070
30. So it's valid from 30 minutes before until 30 minutes after.

322
00:20:30,220 --> 00:20:34,054
You can put specific dates. It can get really complicated really

323
00:20:34,092 --> 00:20:37,654
fast. But as you look in your environment, take a look and you

324
00:20:37,772 --> 00:20:41,366
architect and design and plan it how you need to have

325
00:20:41,388 --> 00:20:44,838
it work with your systems. Let's continue breaking down. So now let's

326
00:20:44,854 --> 00:20:47,722
go view those certificates. So you think, what happened now?

327
00:20:47,856 --> 00:20:51,518
Well, you look on your system, you're going to have a bunch of files and

328
00:20:51,604 --> 00:20:55,338
you're going to see that pub file

329
00:20:55,434 --> 00:20:59,066
gets appended with a CRT. So it's the name of the file.

330
00:20:59,178 --> 00:21:02,602
But if you look at that CRT file with the ssh

331
00:21:02,666 --> 00:21:06,386
keygen l option, you're going to see a

332
00:21:06,408 --> 00:21:09,826
certificate. It's going to display on your

333
00:21:09,848 --> 00:21:12,734
browser. You're going to see everything we kind of talked about. You got a host

334
00:21:12,782 --> 00:21:15,778
certificate there, you've got the key id,

335
00:21:15,944 --> 00:21:19,670
you get the principles and then you have a valid expiration

336
00:21:20,170 --> 00:21:23,254
type along that line, which is really kind of cool being able to say,

337
00:21:23,292 --> 00:21:26,806
oh, that's pretty neat. You can just view that and see how valid it

338
00:21:26,828 --> 00:21:30,506
is. All right, so let's jump quickly into the demo piece

339
00:21:30,688 --> 00:21:34,522
of the puzzle here and show you what

340
00:21:34,576 --> 00:21:38,218
it's going to look like and how you can even get started today

341
00:21:38,304 --> 00:21:42,126
as well. So let me switch over here to my

342
00:21:42,308 --> 00:21:45,742
terminal here. All righty, so in

343
00:21:45,796 --> 00:21:49,726
this, I've got a GitHub project that

344
00:21:49,748 --> 00:21:53,802
is up and running and the links are in this repository

345
00:21:53,866 --> 00:21:57,438
in this demo at the end that you can pull off GitHub in order to

346
00:21:57,604 --> 00:22:01,454
pull down. So if I look, I've got a couple files, I got a Docker

347
00:22:01,502 --> 00:22:03,826
file. So what we're going to do is we're going to run this out of

348
00:22:03,848 --> 00:22:07,586
Docker and you're going to be able to see standing

349
00:22:07,618 --> 00:22:11,800
up two docker images. One is called an app

350
00:22:12,490 --> 00:22:16,454
node that we're using to ssh to. The other is a bastion. So over here

351
00:22:16,572 --> 00:22:20,402
we can see, I have no images at all.

352
00:22:20,476 --> 00:22:24,170
So I'm going to go ahead and build this using Docker compose.

353
00:22:24,590 --> 00:22:28,330
So let's go ahead and build this out and give me

354
00:22:28,400 --> 00:22:31,706
a minute or two here doing that. So when you pull this file, I've got

355
00:22:31,728 --> 00:22:35,706
a readme out there. There's two branches on this repository, the main branch,

356
00:22:35,738 --> 00:22:39,422
and then I've got a 30 minutes branch, which is the demo

357
00:22:39,476 --> 00:22:43,054
I'm using for this. So feel free to switch to that, but you can dig

358
00:22:43,092 --> 00:22:46,578
a little bit more. And what those docker files are,

359
00:22:46,744 --> 00:22:50,690
there is some SSH configuration that you would need to also

360
00:22:50,760 --> 00:22:55,410
run within your environment to set

361
00:22:55,480 --> 00:22:59,238
the SSHD configurations for me on

362
00:22:59,324 --> 00:23:02,646
the containers. All right, so we've got a build. So let's go look at it.

363
00:23:02,668 --> 00:23:07,126
We've got an app node and we have a

364
00:23:07,228 --> 00:23:10,438
bastion node. And so our goal is to ssh

365
00:23:10,534 --> 00:23:14,086
to the application node from the bastion node

366
00:23:14,118 --> 00:23:18,540
or from my local MacBook here without using

367
00:23:18,990 --> 00:23:22,666
standard username passwords or a public private key. So now that's

368
00:23:22,698 --> 00:23:26,314
up and running. So I'm going to start these containers.

369
00:23:26,362 --> 00:23:30,302
I'm going to go to docker compose up, going to detach it.

370
00:23:30,436 --> 00:23:33,866
So now we're going to see here my systems

371
00:23:33,898 --> 00:23:37,186
are running. We can see that one is listening on

372
00:23:37,208 --> 00:23:40,434
port two, two. One is listening on port two,

373
00:23:40,472 --> 00:23:44,542
two, three. So we're going to do a docker logs.

374
00:23:44,606 --> 00:23:51,606
I'm going to follow both of these systems here so

375
00:23:51,628 --> 00:23:54,978
we can see what's happening. We can kind of see in real time what we're

376
00:23:54,994 --> 00:23:58,982
going to do. So what we have here is the

377
00:23:59,036 --> 00:24:03,180
application node, which is our end node that we want to get to is

378
00:24:04,190 --> 00:24:07,654
we're using to eventually ssh into, we're going to do it through a jump host,

379
00:24:07,702 --> 00:24:11,694
through a bastion host. So now that I have my system up,

380
00:24:11,732 --> 00:24:14,958
I've got a script here called

381
00:24:15,044 --> 00:24:18,206
copy keys. And what this script is going to do,

382
00:24:18,228 --> 00:24:21,920
it's going to copy down my

383
00:24:22,370 --> 00:24:26,266
certificate authority information, put it in my known host, it's going to copy

384
00:24:26,298 --> 00:24:29,938
my certs and then it's going to build out my ssh config that I'm going

385
00:24:29,944 --> 00:24:33,618
to need to access these systems here. So I'm going to

386
00:24:33,624 --> 00:24:36,886
go ahead and run this. And again, this is

387
00:24:36,908 --> 00:24:40,166
a demo repo, this is not something you want to

388
00:24:40,188 --> 00:24:43,846
run in production. So let me just caveat that I use this just

389
00:24:43,868 --> 00:24:47,078
for learning and experiment. So please.

390
00:24:47,244 --> 00:24:50,794
Security is probably not the best on this, but it's really designed to help

391
00:24:50,832 --> 00:24:54,538
you as a user understand how SSH certificates work in a

392
00:24:54,544 --> 00:24:58,502
little bit more detail. So now we've got, everything's been copied

393
00:24:58,566 --> 00:25:01,840
locally and if I actually look in my

394
00:25:02,770 --> 00:25:06,000
known host file and actually

395
00:25:06,610 --> 00:25:10,560
can my known host file here, let me do that real quick.

396
00:25:14,040 --> 00:25:14,790
Oh,

397
00:25:19,320 --> 00:25:22,772
ssh known host and we're going to grep,

398
00:25:22,836 --> 00:25:26,328
I'm going to see, you're going to

399
00:25:26,334 --> 00:25:29,772
see that I've got the host ca, so what I've done is

400
00:25:29,826 --> 00:25:32,876
added those host certificate authorities into my,

401
00:25:32,978 --> 00:25:36,236
and this is part of the using SSH certificates. If you read

402
00:25:36,258 --> 00:25:40,296
the documentation on it, it talks about having this. So that way systems

403
00:25:40,328 --> 00:25:44,176
know, hey, this is a known host, this is valid. We are good to

404
00:25:44,198 --> 00:25:47,920
go. So let's go ahead and CD over to

405
00:25:48,070 --> 00:25:51,808
my temp ssh files folder that was created here.

406
00:25:51,894 --> 00:25:56,208
And you can see I've got my public private keys and my certificates.

407
00:25:56,304 --> 00:25:59,380
Some of this I don't necessarily need, but for the demo

408
00:25:59,450 --> 00:26:03,044
let's not worry about it. In fact, if I want to view what

409
00:26:03,082 --> 00:26:06,104
that certificate looks like, and you can see

410
00:26:06,142 --> 00:26:09,604
that right here, this certificate is valid

411
00:26:09,652 --> 00:26:13,668
for about five minutes. So in this demo I changed

412
00:26:13,684 --> 00:26:17,460
it. So in but five minutes my certificate is going to expire.

413
00:26:17,620 --> 00:26:21,404
This lets me know as a user I can log in as

414
00:26:21,442 --> 00:26:24,952
these principles and what actually ssh extensions,

415
00:26:25,016 --> 00:26:28,984
I'm allowed to do that. So if I look at my configuration file,

416
00:26:29,112 --> 00:26:32,524
you can see I've got a host and a

417
00:26:32,562 --> 00:26:36,544
bastion here. And what I'm going to do is I'm going to proxy jump from

418
00:26:36,582 --> 00:26:39,856
one into the other. So let's do that and show you

419
00:26:39,878 --> 00:26:43,440
how that works. I'm going to do an ssh minus f and

420
00:26:43,590 --> 00:26:46,964
going to call my config file and I'm going to log into

421
00:26:47,002 --> 00:26:50,276
my application node. So mealy, what happened is

422
00:26:50,298 --> 00:26:54,324
you saw some information come across these other screens and you see

423
00:26:54,362 --> 00:26:57,512
it says accepted certificate, right?

424
00:26:57,566 --> 00:27:01,192
So this accepted and it validated that my

425
00:27:01,246 --> 00:27:04,564
certificates was legitimate, it wasn't

426
00:27:04,612 --> 00:27:07,764
expired, and I am now within this server.

427
00:27:07,812 --> 00:27:10,972
So now I can run and do the work. So I spun all these up

428
00:27:11,026 --> 00:27:14,648
just to run dad joke, right? What did the beaver say to the tree?

429
00:27:14,744 --> 00:27:18,664
It's been nice gnawing you. So that's

430
00:27:18,792 --> 00:27:22,176
as an example showing hey, how we ssh in. You notice I did

431
00:27:22,198 --> 00:27:25,552
not get the warning, hey, do you recognize this

432
00:27:25,606 --> 00:27:29,056
host? Should we ssh in or not? I'm able to do

433
00:27:29,078 --> 00:27:32,604
that really right off the top on that. So let's exit

434
00:27:32,652 --> 00:27:36,804
out. So you're thinking what about if? Did it really

435
00:27:37,002 --> 00:27:40,528
leverage some of that certificate so I can run this command?

436
00:27:40,704 --> 00:27:44,310
And what it is I'm going to ssh in I'm using to add some

437
00:27:44,700 --> 00:27:47,944
little verbose debugging information.

438
00:27:48,062 --> 00:27:51,640
And you'll see it from my local Ssh that it's using

439
00:27:51,710 --> 00:27:55,556
certificates. So it logs in here and it sees hey, this certificate

440
00:27:55,588 --> 00:27:58,876
is valid for a certain amount of time and this

441
00:27:58,898 --> 00:28:02,488
certificates is valid and how we're accessing and how my host

442
00:28:02,584 --> 00:28:06,296
matches this host certificate and how my app node

443
00:28:06,328 --> 00:28:09,624
also matches that host certificate. So it's

444
00:28:09,672 --> 00:28:13,250
leveraging those handshaking with them on the back end and saying hey,

445
00:28:13,700 --> 00:28:17,904
we're connected, we're authenticated, we're able to access those

446
00:28:17,942 --> 00:28:21,264
systems and we're good to go on that.

447
00:28:21,382 --> 00:28:24,796
So let's look at the bastion certificate as well and see

448
00:28:24,838 --> 00:28:28,388
what kind of time to live did we have on that one. This one is

449
00:28:28,474 --> 00:28:32,708
a 15 minutes time to live. So that certificate will

450
00:28:32,794 --> 00:28:36,840
still be valid for another 15 minutes before it expires,

451
00:28:37,340 --> 00:28:41,304
whereas my client certificate should

452
00:28:41,342 --> 00:28:44,996
be expired fairly shortly. So at the time I'm

453
00:28:45,028 --> 00:28:48,748
recording time of this video 403.

454
00:28:48,834 --> 00:28:52,104
So let us take a look and see if it will deny

455
00:28:52,152 --> 00:28:55,916
me and let me into the system once

456
00:28:56,018 --> 00:28:59,212
the certificates expires. And so

457
00:28:59,266 --> 00:29:02,688
boom, here's what happened. I just tried. So, you know, a few minutes ago I

458
00:29:02,694 --> 00:29:06,220
was able to log in, but now that certificate expired,

459
00:29:06,380 --> 00:29:09,856
so guess what happens? I'm not able to log into

460
00:29:09,958 --> 00:29:13,488
that system anymore, which is super awesome

461
00:29:13,574 --> 00:29:17,124
because I don't have to worry about a public key that's sitting out

462
00:29:17,162 --> 00:29:20,996
there. That certificate expired. So when that happens, it talks back

463
00:29:21,018 --> 00:29:24,324
to the system, says, sorry Alan, you're not allowed in

464
00:29:24,362 --> 00:29:28,660
because your certificate has been basically revoked, it's no longer valid.

465
00:29:28,740 --> 00:29:32,136
You have to issue a new one in order to gain access

466
00:29:32,318 --> 00:29:35,240
into your systems. And to me,

467
00:29:35,390 --> 00:29:39,640
that's the power of leveraging SSH certificates

468
00:29:39,800 --> 00:29:43,004
over keys is being able to control and

469
00:29:43,042 --> 00:29:46,796
gate some of that access across the board. So as we

470
00:29:46,898 --> 00:29:50,568
kind of finish up here and highlighting

471
00:29:50,664 --> 00:29:54,172
some of that, how do you get started? You're probably wondering,

472
00:29:54,236 --> 00:29:57,504
that was awesome, hopefully. So if not, that's okay too.

473
00:29:57,622 --> 00:30:01,456
There's a link to the GitHub repo where you can pull this down and

474
00:30:01,478 --> 00:30:05,600
you can add that vv for verbosity. It uses Docker,

475
00:30:05,680 --> 00:30:08,944
so you can use Podman or something else and just modify,

476
00:30:08,992 --> 00:30:12,420
but uses Docker and Docker compose to stand up these consider,

477
00:30:12,760 --> 00:30:16,136
and this is just a simple high level overview of

478
00:30:16,158 --> 00:30:19,576
how this works. If you want something that is

479
00:30:19,758 --> 00:30:23,624
way more complicated and way super cool, go check out

480
00:30:23,662 --> 00:30:27,320
teleport. It's a fully open source access plane project.

481
00:30:27,470 --> 00:30:31,244
Almost 10,000 GitHub stars on it, used in

482
00:30:31,282 --> 00:30:34,668
production by companies all over the world. It is the company I work for,

483
00:30:34,754 --> 00:30:38,648
so a little bit more on that. But we take this concept

484
00:30:38,744 --> 00:30:42,512
and we extend it and then we expand it so that way users can

485
00:30:42,566 --> 00:30:45,740
leverage short term certificates to access resources

486
00:30:45,820 --> 00:30:49,904
wherever they might live. And of course there's some great resources there.

487
00:30:49,942 --> 00:30:53,744
In fact, this presentation, a lot of my content written by

488
00:30:53,782 --> 00:30:57,168
some really smarter folks that I just repurposed for it. So there's

489
00:30:57,184 --> 00:31:01,232
two links to how to SSH properly using SSH certificates,

490
00:31:01,376 --> 00:31:04,550
as well as a little bit more diving into what they are,

491
00:31:05,320 --> 00:31:08,216
where you can find me, you can find me. Shoot me an email, love to

492
00:31:08,238 --> 00:31:11,336
connect. Find me on LinkedIn as well, or even on

493
00:31:11,358 --> 00:31:14,680
Twitter where I tweet about food and or technology

494
00:31:14,830 --> 00:31:18,744
every so often. And of course, as I mentioned, our GitHub for

495
00:31:18,862 --> 00:31:22,632
our teleport, we also have can open source slack

496
00:31:22,696 --> 00:31:26,396
community. We'd love to have you join in on that and ask questions as

497
00:31:26,418 --> 00:31:29,756
you're playing around and learning how this works and you

498
00:31:29,778 --> 00:31:33,164
want to just kind of chat about things like that. On top of that,

499
00:31:33,202 --> 00:31:37,724
we are hiring. So take this moment. If you're interested in

500
00:31:37,842 --> 00:31:41,876
working for a series B funded, fast growing startup, love to have

501
00:31:41,938 --> 00:31:44,790
you apply with the link there.

502
00:31:45,720 --> 00:31:49,296
100 employees, we're fully distributed working on open source,

503
00:31:49,328 --> 00:31:52,390
so if you've got a passion for open resources and security,

504
00:31:53,560 --> 00:31:57,156
give us a shout. Anyways, that's all I've got

505
00:31:57,178 --> 00:32:00,772
today. Just want to thank you for attending today's session here at Comp

506
00:32:00,826 --> 00:32:02,770
42 and have a wonderful day.

