1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,578
time feedback into the behavior of your distributed systems

3
00:00:09,674 --> 00:00:13,114
and observing changes exceptions errors

4
00:00:13,162 --> 00:00:16,746
in real time allows you to not only experiment with confidence

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:48,198
Close hi,

7
00:00:48,284 --> 00:00:52,202
I'm Michael Korra, CEO and co founder of Globe.

8
00:00:52,346 --> 00:00:55,902
Today me and my co speaker Bhavijit are going to talk about

9
00:00:56,036 --> 00:00:59,626
how we can leverage the processing power of client devices

10
00:00:59,738 --> 00:01:02,430
to do data processing and data analysis.

11
00:01:02,850 --> 00:01:06,322
One such framework is AlaSQL that we are going to

12
00:01:06,376 --> 00:01:09,746
go deep dive into. So by the time this

13
00:01:09,768 --> 00:01:13,346
talk will be over, 12 billion megabyte of data will

14
00:01:13,368 --> 00:01:16,914
be generated across the world and a massive amount of this

15
00:01:16,952 --> 00:01:20,662
data will be generated outside the traditional data center. So cloud

16
00:01:20,716 --> 00:01:24,102
will extend to the cases and it will not be cloud

17
00:01:24,156 --> 00:01:27,802
versus edge, it will be cloud with edge. So that's the future

18
00:01:27,856 --> 00:01:31,274
that we're going towards. Activating data at

19
00:01:31,312 --> 00:01:34,614
age makes it possible to ask patent questions and get more timely

20
00:01:34,662 --> 00:01:38,342
answers. Age can be your mobile, your laptop,

21
00:01:38,406 --> 00:01:42,074
smartwatch, gaming consoles, home appliances

22
00:01:42,202 --> 00:01:45,886
can be anything. Today we

23
00:01:45,908 --> 00:01:49,486
are going to discuss technology and approach to solving data analysis problem on

24
00:01:49,508 --> 00:01:53,250
any devices that run JavaScript. And this talk

25
00:01:53,320 --> 00:01:57,422
is not going to explain the differences or comparison

26
00:01:57,486 --> 00:02:00,910
between different SQL libraries

27
00:02:00,990 --> 00:02:04,500
available for the browsers. It only focuses on

28
00:02:04,870 --> 00:02:08,866
ALS. Now some background

29
00:02:09,058 --> 00:02:12,818
when someone shares an analysis implementation of JavaScript,

30
00:02:12,914 --> 00:02:16,918
you're not just seeing a static snapshot of the work, you are basically running

31
00:02:17,004 --> 00:02:20,538
it real time on browser live. So you

32
00:02:20,544 --> 00:02:24,518
can go beyond passive reading by querying data, tweaking assumptions

33
00:02:24,614 --> 00:02:27,626
and asking more questions, searching and everything.

34
00:02:27,808 --> 00:02:32,126
La SQL is a lightweight, easy to use client side

35
00:02:32,228 --> 00:02:35,562
in memory SQL database designed to work in browsers

36
00:02:35,626 --> 00:02:38,782
as well as in node JS. It is open

37
00:02:38,836 --> 00:02:41,898
source. It has strong focus on query speed,

38
00:02:42,074 --> 00:02:44,894
data source flexibility for the relational database.

39
00:02:44,942 --> 00:02:47,918
Like you can import cases, Excel,

40
00:02:48,094 --> 00:02:51,060
SQLite databases and everything over to here.

41
00:02:52,470 --> 00:02:56,440
Moreover, it can handle schemaless data as well as graph data.

42
00:02:57,130 --> 00:03:00,946
It can handle both traditional relationship tables

43
00:03:00,978 --> 00:03:04,838
as well as nested JSOns which is nosql. You can

44
00:03:04,924 --> 00:03:08,498
export store import data from local storage

45
00:03:08,674 --> 00:03:11,400
index, DB, Excel and many more.

46
00:03:12,250 --> 00:03:16,490
So AlaSQL was initially created in 2014

47
00:03:17,070 --> 00:03:20,650
with the need for running NoSQL capabilities

48
00:03:20,730 --> 00:03:25,006
on browsers because at that point in time there are very few

49
00:03:25,188 --> 00:03:29,402
engines which are capable of running NoSQL features

50
00:03:29,546 --> 00:03:33,370
and then there are a lot of other significant releases.

51
00:03:33,450 --> 00:03:35,600
So here are the details for you.

52
00:03:37,810 --> 00:03:41,514
JavaScript is one of the most flexible language

53
00:03:41,562 --> 00:03:44,910
or frameworks available for communication.

54
00:03:45,370 --> 00:03:49,234
It is flexible as well as it supports

55
00:03:49,282 --> 00:03:53,458
experimentations. Just think of you can just open the developer tools

56
00:03:53,554 --> 00:03:57,154
and do experimentations directly on a wave

57
00:03:57,202 --> 00:04:01,610
application. It also supports collaboration real time.

58
00:04:01,760 --> 00:04:05,274
So think of you are using analysis with

59
00:04:05,312 --> 00:04:09,158
your colleagues remote over the Internet

60
00:04:09,254 --> 00:04:13,550
on a fixed set of data which is running in individual browsers.

61
00:04:14,370 --> 00:04:18,480
Now there are multiple databases available for

62
00:04:19,010 --> 00:04:23,306
client side processing. AlaSQL sits into the requirement

63
00:04:23,338 --> 00:04:26,878
of use cases where we don't require a persistent storage,

64
00:04:26,974 --> 00:04:30,594
we just need fast in memory data processing for

65
00:04:30,632 --> 00:04:33,940
joining, filtration, grouping of data, searching and everything.

66
00:04:34,710 --> 00:04:38,026
Moreover, it is also suitable for a use case where there is a large volume

67
00:04:38,078 --> 00:04:41,410
of data on the server. You query to do the initial filtration,

68
00:04:41,490 --> 00:04:44,882
take the data back to the browser and then run processing,

69
00:04:44,946 --> 00:04:48,200
pre processing and other sort of queries on top of

70
00:04:49,930 --> 00:04:53,370
a few specific features of AlASQL are fundamentally important

71
00:04:53,440 --> 00:04:57,494
for this topic where we are discussing about processing

72
00:04:57,542 --> 00:05:00,718
data on age on browsers. So it is

73
00:05:00,884 --> 00:05:03,710
widely supported, it is extensible,

74
00:05:04,450 --> 00:05:08,142
it has the ability to execute SQL against any data set,

75
00:05:08,196 --> 00:05:11,726
against JSON arrays and all.

76
00:05:11,908 --> 00:05:16,014
So it is fast, it is in memory. SQL data processing

77
00:05:16,062 --> 00:05:19,694
is very much important for bi use cases, for ERP

78
00:05:19,742 --> 00:05:23,266
applications, fat clients and many more. ETL is

79
00:05:23,288 --> 00:05:26,822
also one of the very important use case. It also

80
00:05:26,956 --> 00:05:30,630
supported in most of the major browsers,

81
00:05:31,530 --> 00:05:34,520
mobile applications, node cases and all.

82
00:05:34,970 --> 00:05:37,694
It supports inbuilt compilation,

83
00:05:37,842 --> 00:05:41,734
query optimization like any other SQL engines.

84
00:05:41,782 --> 00:05:43,370
It supports indexing,

85
00:05:44,750 --> 00:05:48,618
pre indexing as well. Complex join operations can be

86
00:05:48,704 --> 00:05:52,046
run very efficient. Now I'm

87
00:05:52,068 --> 00:05:55,070
going to discuss about few fundamentals of AlaSQL,

88
00:05:55,570 --> 00:05:59,274
so consider a use case where you need to augment

89
00:05:59,322 --> 00:06:02,762
the capabilities of SQL statements with actual JavaScript

90
00:06:02,826 --> 00:06:06,274
function, custom or inbuilt. So you can also do that. I'll show

91
00:06:06,312 --> 00:06:09,170
you some examples after the stop after this slide.

92
00:06:10,150 --> 00:06:13,870
It has flexibility to import data from various sources,

93
00:06:13,950 --> 00:06:17,380
be it Excel cases, JSON and many more.

94
00:06:18,550 --> 00:06:22,306
If you're working in a use case where you need to extend the in memory

95
00:06:22,338 --> 00:06:25,734
capabilities for persistent storage so that you can also do them.

96
00:06:25,772 --> 00:06:29,926
Export the data to any of your required format,

97
00:06:30,118 --> 00:06:33,754
then few of the performance threads so

98
00:06:33,792 --> 00:06:37,914
the compiled statements and functions are created when

99
00:06:37,952 --> 00:06:42,880
you actually write the SQL statements where

100
00:06:43,330 --> 00:06:46,510
expressions are pre filtered for the joins,

101
00:06:47,250 --> 00:06:49,550
joint tables are pre indexed.

102
00:06:50,610 --> 00:06:54,222
ArieSQL uses hash tables for its indexes

103
00:06:54,286 --> 00:06:57,806
and upon index creation all entries in the table are hashed

104
00:06:57,838 --> 00:07:01,300
and stored in the database object. Sorry, in the JavaScript object.

105
00:07:02,470 --> 00:07:06,002
Now let me talk about the engine. So when

106
00:07:06,056 --> 00:07:09,270
a statement in SQL is parsed and

107
00:07:09,340 --> 00:07:13,746
processed, so it is segregated into an abstract

108
00:07:13,858 --> 00:07:16,930
syntax tree which is kind of a nested JSON.

109
00:07:17,010 --> 00:07:20,794
So I have given you one example. So where this is

110
00:07:20,832 --> 00:07:24,682
the SQL statement and after the

111
00:07:24,736 --> 00:07:28,454
parsing and formation of the abstract

112
00:07:28,502 --> 00:07:33,146
syntax. This is something that is actually processed

113
00:07:33,178 --> 00:07:36,574
in the engine. Now I will hand it

114
00:07:36,612 --> 00:07:40,266
over to my co speaker Akajit for a technical deep

115
00:07:40,298 --> 00:07:43,726
dive. Before going into the details, I would like

116
00:07:43,748 --> 00:07:47,586
to share a small application which I have created which can shed some light

117
00:07:47,688 --> 00:07:51,582
into the potential of this library. What I have created

118
00:07:51,726 --> 00:07:55,610
is an application which can pick a local file

119
00:07:55,790 --> 00:07:59,094
and then render the records and then we can

120
00:07:59,132 --> 00:08:02,562
apply any operations you like. For the example purpose,

121
00:08:02,626 --> 00:08:06,466
I have created two simple examples. Search duplicate,

122
00:08:06,578 --> 00:08:10,314
count and average. Search duplicate is going to give you

123
00:08:10,352 --> 00:08:13,962
all the duplicate records and count

124
00:08:14,016 --> 00:08:16,970
and average as it states can provide you all the count,

125
00:08:17,040 --> 00:08:20,838
average and sum. These can

126
00:08:20,864 --> 00:08:24,174
be done by basic JS logics, but what about

127
00:08:24,212 --> 00:08:27,040
the complex join or joining two files at a time?

128
00:08:28,050 --> 00:08:31,520
Those will not be as simple as such to me.

129
00:08:31,890 --> 00:08:35,810
LSp provides variety ways of reading files

130
00:08:36,230 --> 00:08:39,550
importing from csv text files Excel

131
00:08:39,630 --> 00:08:42,786
files this feature can be useful in cases where we

132
00:08:42,808 --> 00:08:45,986
want to create a software where we just pass an excel

133
00:08:46,018 --> 00:08:49,080
or csv file and do some operations over it.

134
00:08:50,410 --> 00:08:56,790
Now I can now

135
00:08:56,860 --> 00:09:00,754
what if a requirement comes which can't be solved by quake?

136
00:09:00,882 --> 00:09:04,426
AlaSQL provides its user defined functions which we

137
00:09:04,448 --> 00:09:08,490
can use to create our own functions and then use it in the quake.

138
00:09:08,830 --> 00:09:12,654
AlaSQL also provides a way to use the browser's local storage and

139
00:09:12,692 --> 00:09:16,126
DOM storage as a data storage. Let's say

140
00:09:16,148 --> 00:09:19,982
for a scenario where you have to send a large data

141
00:09:20,036 --> 00:09:23,102
set to the server for processing. What you can do is

142
00:09:23,156 --> 00:09:26,754
you can do the processing in the client side and then send the data to

143
00:09:26,792 --> 00:09:30,466
the. AlaSQL also provides a way to

144
00:09:30,488 --> 00:09:33,506
use the browser's local storage and DOM storage as a

145
00:09:33,608 --> 00:09:37,154
data storage. Let's say for a scenario you want to send

146
00:09:37,192 --> 00:09:40,406
a huge amount of data set to the server for processing. What you can

147
00:09:40,428 --> 00:09:43,574
do is you can process the data in the client side and then send the

148
00:09:43,612 --> 00:09:45,750
process data to the server.

149
00:09:46,970 --> 00:09:50,242
This can be customized in the other way around.

150
00:09:50,316 --> 00:09:54,166
Also, let's say you have a huge amount of data set present in the server

151
00:09:54,278 --> 00:09:57,734
but it needs preprocessing every time client

152
00:09:57,782 --> 00:10:01,162
interacts with it. What you can do is you can send the whole

153
00:10:01,216 --> 00:10:05,006
data to the client side and then do the processing and render the

154
00:10:05,028 --> 00:10:08,462
data in the client side rather than requesting it every

155
00:10:08,516 --> 00:10:11,150
time any kind of changes is made by the client.

156
00:10:11,890 --> 00:10:15,322
This is silver bullet for all the edge operations.

157
00:10:15,386 --> 00:10:18,658
There are certain limitations. Let's say you are bringing in a

158
00:10:18,664 --> 00:10:22,354
huge amount of data set from the server side to the client side the

159
00:10:22,392 --> 00:10:25,874
amount of time it will take to take the data from the server

160
00:10:25,922 --> 00:10:29,606
to the client side. That time will make the application

161
00:10:29,708 --> 00:10:32,610
suffer. Then there are join operations.

162
00:10:32,690 --> 00:10:36,658
Let's say you are uploading multiple files to apply join operation

163
00:10:36,754 --> 00:10:40,454
across three to four files. Now keep

164
00:10:40,492 --> 00:10:44,850
in mind the number of files you increase can make the application suffer

165
00:10:44,930 --> 00:10:49,142
because it's going to apply the operations over multiple records which

166
00:10:49,196 --> 00:10:53,054
the data is been added in library. Also, as they have

167
00:10:53,092 --> 00:10:56,382
mentioned in their talks, joining a subselect does not

168
00:10:56,436 --> 00:10:59,180
work. Thank you.

