1
00:00:38,770 --> 00:00:42,946
Hello everybody, my name is Luca Mardente. I'm a principal engineer

2
00:00:42,978 --> 00:00:47,254
at Cisco Systems and today I will be presenting Sveltos and

3
00:00:47,372 --> 00:00:51,390
specifically how Sveltos can help platform admin

4
00:00:52,290 --> 00:00:56,318
to onboard tenant admins and allow each

5
00:00:56,404 --> 00:01:00,254
tenant admin to deploy add ons and application

6
00:01:00,372 --> 00:01:03,710
in a subset of managed Kubernetes clusters.

7
00:01:04,370 --> 00:01:07,630
We all know that kubernetes by itself is not a complete solution,

8
00:01:07,710 --> 00:01:11,730
that when you build to build those production clusters

9
00:01:12,390 --> 00:01:16,174
you have to deploy around cell applications. And if you're managing

10
00:01:16,222 --> 00:01:18,210
a fleet of Kubernetes clusters,

11
00:01:19,750 --> 00:01:23,042
managing around cell application is not a critical problem.

12
00:01:23,176 --> 00:01:26,786
So Zveltos wants to help those and the idea behind Sveltos

13
00:01:26,818 --> 00:01:30,186
is simple. Sveltos runs in the management cluster and

14
00:01:30,208 --> 00:01:33,782
from the management clusters a fleet of managed Kubernetes

15
00:01:33,846 --> 00:01:37,414
clusters can be asked and Sveltos

16
00:01:37,462 --> 00:01:39,930
can be easily told what to do.

17
00:01:40,080 --> 00:01:43,418
Essentially select a set of managed

18
00:01:43,434 --> 00:01:47,422
Kubernetes clusters using a Kubernetes selector and

19
00:01:47,476 --> 00:01:50,986
list the advance or application that needs to be deployed and Sveltos

20
00:01:51,018 --> 00:01:54,466
will take care of the rest. So we

21
00:01:54,488 --> 00:01:58,226
have a management cluster where Sveltos is running and we

22
00:01:58,248 --> 00:02:02,206
have a bunch of managed

23
00:02:02,238 --> 00:02:05,766
Kubernetes clusters. Sveltos has built in support

24
00:02:05,868 --> 00:02:09,814
for cluster API, meaning that every clusters which is powered by

25
00:02:09,852 --> 00:02:12,994
cluster API is automatically discovered by Sveltos,

26
00:02:13,122 --> 00:02:17,686
but any other cluster which can

27
00:02:17,708 --> 00:02:20,906
be easily registered to be managed by Sveltos. For instance in this case we

28
00:02:20,928 --> 00:02:24,186
have GK cluster or Siva clusters or

29
00:02:24,208 --> 00:02:28,422
rancher cluster or regiment cluster which are all registered with Sveltos.

30
00:02:28,566 --> 00:02:31,654
And at this point pretty much Sveltos can manage a launch

31
00:02:31,702 --> 00:02:35,070
and application from the management cluster onto

32
00:02:35,650 --> 00:02:39,646
these managed clusters. The only requirement of Sveltos is that there

33
00:02:39,668 --> 00:02:43,486
is a network connectivity between the management cluster in

34
00:02:43,508 --> 00:02:47,182
each one of those managed clusters. Here cluster profile

35
00:02:47,246 --> 00:02:50,718
is the main CRD that is used to instruct Sveltoscore

36
00:02:50,734 --> 00:02:54,482
to do and it has in the spec section like four

37
00:02:54,536 --> 00:02:58,466
main fields. The first field is the cluster selector.

38
00:02:58,498 --> 00:03:01,586
The cluster selector is just a pure Kubernetes label

39
00:03:01,618 --> 00:03:05,080
selector and it selects a subset of

40
00:03:05,770 --> 00:03:09,674
managed Kubernetes cluster. In this case it's selecting all the clusters which

41
00:03:09,712 --> 00:03:12,938
have the label environment set to Fe

42
00:03:13,104 --> 00:03:16,554
stands for functional medication. So first

43
00:03:16,592 --> 00:03:20,486
thing is select a set of clusters and then tell Sveltos

44
00:03:20,518 --> 00:03:23,718
what to do. In this case, what we are telling Zveltos we have an n

45
00:03:23,744 --> 00:03:27,354
charts where section where we can list one or more n charts.

46
00:03:27,402 --> 00:03:31,854
In those case we are asking Zveltos to deploy Caverno version 2.6.0

47
00:03:31,972 --> 00:03:36,090
in every cluster that it's matching the cluster selector EMV

48
00:03:36,250 --> 00:03:40,210
equals Fe. Then there is a customization those where

49
00:03:40,280 --> 00:03:43,470
you can say you can list all your sources

50
00:03:43,550 --> 00:03:47,634
where you have customization file. In this case too much, you have a git repo

51
00:03:47,682 --> 00:03:51,138
containing a customization

52
00:03:51,234 --> 00:03:55,254
files in the path hello world and

53
00:03:55,372 --> 00:03:59,862
what Sventos will do, we'll take all those files, we'll done the customization

54
00:04:00,006 --> 00:04:03,914
SDK and then we'll deploy the output in

55
00:04:03,952 --> 00:04:07,414
the Eng namespace in every cluster matching

56
00:04:07,462 --> 00:04:11,562
the cluster selector. And finally there is a policy wrap section

57
00:04:11,706 --> 00:04:15,598
where you can reference one or

58
00:04:15,764 --> 00:04:19,754
more config maps and or secrets. And the config

59
00:04:19,802 --> 00:04:23,694
map and secrets can contain one or more Kubernetes

60
00:04:23,742 --> 00:04:27,266
resources. In this case I have an example where

61
00:04:27,288 --> 00:04:30,898
there is a config map which is in the default namespace called

62
00:04:30,984 --> 00:04:34,898
Contour gateway which contains a gateway class,

63
00:04:35,064 --> 00:04:38,702
a namespace and a gateway. So if there is a cluster profile

64
00:04:38,766 --> 00:04:42,434
referencing this config map in every cluster

65
00:04:42,482 --> 00:04:46,086
matching the cluster profile, Sveltos will take the content of this

66
00:04:46,108 --> 00:04:49,218
config map so the gateway class, the namespace and gateway

67
00:04:49,314 --> 00:04:53,094
and will deploy those resources in every cluster matching the cluster

68
00:04:53,142 --> 00:04:56,566
provide and you can put in the config

69
00:04:56,598 --> 00:04:59,530
map bot Yaml or JSon.

70
00:05:00,750 --> 00:05:04,346
This essentially a summary of

71
00:05:04,528 --> 00:05:08,502
how Zeltos works. We have a management cluster

72
00:05:08,566 --> 00:05:12,334
where Veltos is running and we have two clusters which

73
00:05:12,372 --> 00:05:15,250
are powered using cluster API.

74
00:05:15,910 --> 00:05:19,378
So we apply in the management cluster a

75
00:05:19,384 --> 00:05:22,766
clusters profile that says select every cluster matching

76
00:05:22,798 --> 00:05:26,694
the labels environment project stands for production and

77
00:05:26,732 --> 00:05:30,182
deploy Caverno version 2.5.0 in every

78
00:05:30,236 --> 00:05:33,682
such cluster. So if we add the label environment

79
00:05:33,746 --> 00:05:36,962
production on the first workflow cluster,

80
00:05:37,026 --> 00:05:40,826
Zveltos will detect that this workflow cluster is a match for this

81
00:05:40,848 --> 00:05:43,978
cluster profile and will take all the

82
00:05:44,064 --> 00:05:47,546
listed add ons and applications and deploy those one. In this case we

83
00:05:47,568 --> 00:05:50,826
only have cavernos as well as will deploy Caverno in those workflow

84
00:05:50,858 --> 00:05:54,714
cluster. Likewise, if we add the label

85
00:05:54,762 --> 00:05:57,230
environment production on the second cluster,

86
00:05:57,570 --> 00:06:01,018
Veltos Financial logic will react

87
00:06:01,194 --> 00:06:05,378
by detecting that this cluster is now a match for this cluster profile and

88
00:06:05,464 --> 00:06:08,820
it will deploy Caverno in this cluster as well.

89
00:06:09,510 --> 00:06:13,026
What differentiates Veltos from all the other tools which

90
00:06:13,048 --> 00:06:16,754
are available today to manage add ons and applications

91
00:06:16,802 --> 00:06:19,334
in a fleet of Kubernetes clusters? Well,

92
00:06:19,372 --> 00:06:22,946
Speltos allows you to express helm

93
00:06:22,978 --> 00:06:27,222
charts and Royam and JSON as template and

94
00:06:27,276 --> 00:06:31,162
instantiate those templates using information which is present

95
00:06:31,296 --> 00:06:34,666
in management in resources which are present

96
00:06:34,688 --> 00:06:38,714
in the management cluster. For instance, in this case we are

97
00:06:38,912 --> 00:06:42,538
asking Sveltos to deploy calico

98
00:06:42,634 --> 00:06:45,982
in every cluster in every production cluster, but those value

99
00:06:46,036 --> 00:06:50,638
section of those helm chart is expressed as a template and

100
00:06:50,724 --> 00:06:54,626
it's referring the cluster. So what Sveltos will do before

101
00:06:54,808 --> 00:06:58,146
we'll find every cluster matching this clusters selector and for

102
00:06:58,168 --> 00:07:02,002
every cluster we'll take the clusters instance which is

103
00:07:02,136 --> 00:07:05,530
present in the management cluster and represents the cluster where Sveltos

104
00:07:05,550 --> 00:07:09,910
is about to deploy this calico.

105
00:07:10,810 --> 00:07:14,466
And we'll take this spec clusters network podcaster

106
00:07:14,498 --> 00:07:18,614
block section of this resource which again is present in the management cluster.

107
00:07:18,742 --> 00:07:22,278
We'll instantiate this value those template

108
00:07:22,454 --> 00:07:26,054
using the information found in the resource present in the management

109
00:07:26,102 --> 00:07:29,478
cluster. And after this instantiation we'll go ahead and deploy

110
00:07:29,494 --> 00:07:32,974
the resources. By default, Veltos is access to

111
00:07:33,012 --> 00:07:36,474
a set of resources that represents the cluster.

112
00:07:36,522 --> 00:07:41,178
If you're familiar with cluster API, the cluster API

113
00:07:41,274 --> 00:07:44,986
cluster instance representing the cluster, the infrastructure provider, the Kubeadm

114
00:07:45,018 --> 00:07:48,514
control plane or this Veltos cluster instance which represents a

115
00:07:48,552 --> 00:07:52,146
cluster which a GK cluster for instance which has been registered to be

116
00:07:52,168 --> 00:07:55,610
managed by Sveltos. But Sveltos can be instructed

117
00:07:55,630 --> 00:08:00,550
to fetch any resource present in the management cluster and

118
00:08:00,620 --> 00:08:03,350
use its content to instantiate those templates.

119
00:08:04,170 --> 00:08:07,334
In this case, for instance, mentors is being

120
00:08:07,372 --> 00:08:10,922
instructed to fetch a secret which is present

121
00:08:10,976 --> 00:08:15,290
in the management cluster which is in the default namespace and code scalar

122
00:08:15,630 --> 00:08:19,370
and instantiate the content of the content

123
00:08:19,440 --> 00:08:22,974
map which expresses a template using information which

124
00:08:23,012 --> 00:08:26,734
is present in the secret. Here. You just have to give

125
00:08:26,772 --> 00:08:30,334
like Sveltos the right permission to fetch those type

126
00:08:30,372 --> 00:08:33,338
of resources if you need like extra resources.

127
00:08:33,514 --> 00:08:37,040
But as Veltos says they have built at those point like to fetch anything.

128
00:08:37,590 --> 00:08:40,674
Now what

129
00:08:40,872 --> 00:08:44,826
if we are a platform admin and we want to onboard a bunch

130
00:08:44,958 --> 00:08:48,646
of tenants? One approach is to give

131
00:08:48,748 --> 00:08:52,710
every tenant a subset of clusters.

132
00:08:54,170 --> 00:08:57,706
So what you can do in this case is that as a platform admins you

133
00:08:57,728 --> 00:09:01,366
can create cluster profile in the management cluster. Those cluster

134
00:09:01,398 --> 00:09:04,970
profile can match any cluster in any namespace,

135
00:09:06,270 --> 00:09:10,034
but then you can import a tenant

136
00:09:10,182 --> 00:09:14,874
by giving every tenant its own namespace. And Sveltos

137
00:09:14,922 --> 00:09:18,334
has another CRD which is called profile the

138
00:09:18,372 --> 00:09:21,978
profile. It's exactly same as a cluster profile.

139
00:09:22,154 --> 00:09:26,114
It has a cluster selector where

140
00:09:26,152 --> 00:09:29,314
you can select clusters where to deploy the add

141
00:09:29,352 --> 00:09:33,550
ons and applications and then it has an answered section, a customization

142
00:09:33,630 --> 00:09:37,238
of sections and a policy intersections. The only difference

143
00:09:37,324 --> 00:09:41,206
between a cluster profile and cluster that a

144
00:09:41,228 --> 00:09:44,866
cluster profile is cluster wide. So I can manage any clusters

145
00:09:44,898 --> 00:09:48,390
in namespace. A profile is a namespace resources,

146
00:09:48,470 --> 00:09:52,620
so I can only match clusters which are

147
00:09:52,990 --> 00:09:56,250
in the same namespace where the profile is defined.

148
00:09:56,830 --> 00:10:00,494
So what happens in this case is that again you

149
00:10:00,532 --> 00:10:03,914
are the platform admin and the platform admin can create cluster

150
00:10:03,962 --> 00:10:08,218
profiles and the advance and applications listed

151
00:10:08,234 --> 00:10:12,602
in those cluster profiles can be deployed like in any cluster,

152
00:10:12,666 --> 00:10:15,834
in any managed cluster because a cluster profile can match any clusters

153
00:10:15,882 --> 00:10:19,666
in any namespace. But then you onboard tenants by giving every tenant his

154
00:10:19,688 --> 00:10:22,914
own namespace. So in this case the tenant one has been given like

155
00:10:22,952 --> 00:10:27,266
the tenant one namespace, those tenant two has been given the tenant two namespace.

156
00:10:27,378 --> 00:10:31,202
So the tenant one at this point can put like his own profile configuration

157
00:10:31,346 --> 00:10:34,694
and his own profile configuration is only going to be

158
00:10:34,732 --> 00:10:38,038
deployed on clusters which are defined in

159
00:10:38,044 --> 00:10:41,498
the same namespace. In this case the clusters which manage

160
00:10:41,584 --> 00:10:45,254
cluster with those blue background, the tenant two namespace

161
00:10:45,302 --> 00:10:49,514
can put the tenant to admin can put its own configuration and

162
00:10:49,552 --> 00:10:53,306
it's going to create like its own profile configuration in the namespace

163
00:10:53,338 --> 00:10:57,402
that has been assigned to tenant two. And this provide configuration

164
00:10:57,466 --> 00:11:01,146
put by the tenant to admins is only going to affect cluster

165
00:11:01,178 --> 00:11:05,438
which are in the same namespace. In this case those tenant, the managed

166
00:11:05,454 --> 00:11:09,538
cluster with the yellow background. So what happens is every name,

167
00:11:09,624 --> 00:11:14,350
every tenant can put his own configuration

168
00:11:14,430 --> 00:11:17,298
listing which advance an application is to be deployed,

169
00:11:17,394 --> 00:11:20,738
but two tenants do not interfere

170
00:11:20,754 --> 00:11:24,722
with each other. The configuration by set by tenant

171
00:11:24,786 --> 00:11:28,326
is only going to be deployed in clusters which have

172
00:11:28,348 --> 00:11:31,914
been assigned by the platform admin to the tenant. This is

173
00:11:31,952 --> 00:11:35,642
one way of doing it, and this works well when you want

174
00:11:35,696 --> 00:11:39,930
to give a clusters to a tenant.

175
00:11:40,670 --> 00:11:44,246
But another scenario is what happens if instead

176
00:11:44,368 --> 00:11:47,998
I have a set of clusters and

177
00:11:48,164 --> 00:11:51,966
I want to give one of those clusters to be

178
00:11:51,988 --> 00:11:55,634
shared across multiple tenants. Well, Sveltos is a solution for that as

179
00:11:55,672 --> 00:11:59,678
well. What Sveltos like introduced

180
00:11:59,694 --> 00:12:02,846
in this case is yet another CRD. It's the role request

181
00:12:02,878 --> 00:12:06,454
CRD and those role request CRD. Again,

182
00:12:06,492 --> 00:12:09,798
it's a cluster wide resource and it contains a

183
00:12:09,804 --> 00:12:13,670
cluster selector which select like a set of

184
00:12:13,740 --> 00:12:17,566
managed clusters. And then it has a role type section

185
00:12:17,698 --> 00:12:21,740
which reference one or more config maps. And in

186
00:12:22,830 --> 00:12:26,506
the reference config map for secrets you can put a

187
00:12:26,528 --> 00:12:30,334
bunch of cluster role and role and then

188
00:12:30,372 --> 00:12:33,914
you have an admin section. The admin section identifies an admin.

189
00:12:33,962 --> 00:12:38,282
In this case I'm saying that the engineering

190
00:12:38,346 --> 00:12:42,046
admin, as in

191
00:12:42,068 --> 00:12:46,050
every cluster matching the cluster selector department equals engineering

192
00:12:46,550 --> 00:12:50,866
as all the permissions that are defined in the config map in

193
00:12:50,888 --> 00:12:53,220
the default namespace called full access.

194
00:12:55,130 --> 00:12:58,200
Let's look at an example before we go there.

195
00:13:00,330 --> 00:13:04,406
How can Zveltos know that a

196
00:13:04,428 --> 00:13:08,194
cluster profile has been created by given admin. Well, Zweltos expects

197
00:13:08,242 --> 00:13:11,414
this folding label to be present in every cluster profile.

198
00:13:11,542 --> 00:13:15,382
So if you want us Veltos

199
00:13:15,446 --> 00:13:18,806
to say to know that those cluster profile has been created

200
00:13:18,838 --> 00:13:23,030
by a given admin, add this label projectsveltos

201
00:13:23,190 --> 00:13:25,970
IO admin name with the name of those admin.

202
00:13:26,150 --> 00:13:29,438
How you can achieve that? Well, if you're a

203
00:13:29,444 --> 00:13:33,066
plugmon admin you can use an admission controller and Sveltos

204
00:13:33,178 --> 00:13:37,202
for instance provides this Caverno cluster policy

205
00:13:37,336 --> 00:13:40,414
that says like every time a cluster provide is created,

206
00:13:40,542 --> 00:13:43,694
take the name of the service account creating this cluster profile

207
00:13:43,742 --> 00:13:47,966
and add this label here. Now let's

208
00:13:47,998 --> 00:13:51,638
see in an example how this works. As a platform admin you

209
00:13:51,644 --> 00:13:55,318
can create a role request that says in every clusters matching the

210
00:13:55,324 --> 00:13:59,500
cluster selector environment pre release give the

211
00:14:00,910 --> 00:14:04,694
admin ange all the permissions

212
00:14:04,742 --> 00:14:08,166
that are defined like in the config map in the default namespace

213
00:14:08,198 --> 00:14:12,394
called clusters. And this config map contains a cluster

214
00:14:12,442 --> 00:14:16,126
role star star which means that we are giving those

215
00:14:16,308 --> 00:14:20,206
engineer mean like cluster admins permission in

216
00:14:20,228 --> 00:14:24,030
every cluster matching the cluster selector environment

217
00:14:24,110 --> 00:14:29,522
pre release. So what happens if later on the

218
00:14:29,576 --> 00:14:33,086
tenant admin inch creates a cluster

219
00:14:33,118 --> 00:14:36,194
profile and we can see that this cluster profile has been created by the

220
00:14:36,232 --> 00:14:39,770
tenant admins inch by the presence of this label project's veltas IO

221
00:14:39,790 --> 00:14:44,546
admin name that the caverno

222
00:14:44,578 --> 00:14:48,066
is going to be deployed in every cluster

223
00:14:48,098 --> 00:14:51,882
that is matching the label environment prerelease. Because we

224
00:14:51,936 --> 00:14:55,814
have given like this admin the previous

225
00:14:55,862 --> 00:14:59,578
slides, we gave this admin ange for

226
00:14:59,664 --> 00:15:03,014
permission like in every cluster matching the label

227
00:15:03,062 --> 00:15:06,542
environment prerelease. But what happens if the same

228
00:15:06,596 --> 00:15:10,458
admin so you see the label, it's again projects

229
00:15:10,474 --> 00:15:14,314
Veltos ao admin name engine tries to deploy caverno

230
00:15:14,362 --> 00:15:17,626
in every cluster matching the label environment production.

231
00:15:17,738 --> 00:15:20,938
Well in this case like this admin here has not been given permission

232
00:15:20,954 --> 00:15:24,430
to deploy anything in this clusters. So Veltos will block

233
00:15:25,610 --> 00:15:28,834
will block that. This concludes

234
00:15:28,882 --> 00:15:32,454
this presentation and thank you for your

235
00:15:32,492 --> 00:15:37,426
time and hope this was useful.

236
00:15:37,618 --> 00:15:37,860
Thanks.

