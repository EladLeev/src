1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:10,618
time feedback into the behavior of your distributed systems and observing

3
00:00:10,714 --> 00:00:14,094
changes exceptions errors in real time

4
00:00:14,212 --> 00:00:17,914
allows you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:00:47,386
Those hi,

7
00:00:47,488 --> 00:00:50,778
welcome to Comp 42 Javascript 2022.

8
00:00:50,944 --> 00:00:54,846
Today we're going to talk about getting started with Cypress and in particular

9
00:00:54,948 --> 00:00:58,526
gaining confidence in our websites with Cypress tests. Here's the part where

10
00:00:58,548 --> 00:01:01,550
I tell you I am definitely going to post those slides on my site tonight.

11
00:01:02,130 --> 00:01:05,746
I've been chasing similar speakers and that's why the

12
00:01:05,768 --> 00:01:09,566
slides are available right now. Let's head off to roberich.org

13
00:01:09,678 --> 00:01:13,042
and robert.org and we'll click

14
00:01:13,096 --> 00:01:16,862
on presentations. And here's gaining confidence with Cypress tests

15
00:01:16,926 --> 00:01:20,582
the slides and the code up on GitHub are online

16
00:01:20,716 --> 00:01:24,326
right now. Achievements unlocked. While we're here

17
00:01:24,348 --> 00:01:27,478
on robrich.org, let's click on about me and we'll see some of the things that

18
00:01:27,484 --> 00:01:31,386
I've done recently. I'm a shoreline developer advocate. Shoreline makes

19
00:01:31,408 --> 00:01:35,414
it easy to debug and analyze cloud native infrastructure

20
00:01:35,462 --> 00:01:38,410
in the same way that you might analyze other infrastructure.

21
00:01:38,990 --> 00:01:42,938
I've gotten some awards from both Microsoft and Docker, and I'm a

22
00:01:42,944 --> 00:01:46,506
friend of Redgate. AZ Givecamp is really fun AZ Givecamp brings

23
00:01:46,538 --> 00:01:50,154
volunteer developers together with charities to build free software.

24
00:01:50,282 --> 00:01:53,562
We start building software Friday after work. Sunday afternoon,

25
00:01:53,626 --> 00:01:57,622
we deliver completed software to charities. Sleep is optional, caffeine provided.

26
00:01:57,706 --> 00:02:01,074
If you're in Phoenix, come join us for the next AZ give camp.

27
00:02:01,192 --> 00:02:04,482
Or if you'd like a give camp closer to you, hit me up on email

28
00:02:04,536 --> 00:02:07,794
or Twitter or find me here at the event and let's get a give camp

29
00:02:07,832 --> 00:02:11,526
in your neighborhood too. Some of the other things that I've done, I do

30
00:02:11,548 --> 00:02:15,346
a lot with JavaScript, so I got to work on the Gulp project in version

31
00:02:15,378 --> 00:02:18,614
two and version three. That was a lot of fun and one of the things

32
00:02:18,652 --> 00:02:22,134
I'm particularly proud of. I replied to a Net Rocks podcast episode.

33
00:02:22,182 --> 00:02:24,838
They read my comment on the air and they sent me a mug.

34
00:02:24,934 --> 00:02:28,102
Woohoo. So there's my claim to fame, my coveted

35
00:02:28,166 --> 00:02:31,950
net rocks mug. So let's dig into Cypress.

36
00:02:32,930 --> 00:02:36,446
Now, Cypress is great for testing a website, but I'm not

37
00:02:36,468 --> 00:02:39,646
quite sure if my website's going to work. So let me fire it up

38
00:02:39,668 --> 00:02:40,480
and see.

39
00:02:44,420 --> 00:02:48,496
I don't know. Will this talk go well?

40
00:02:48,678 --> 00:02:52,464
Let's see. It looks

41
00:02:52,502 --> 00:02:55,856
like it's going pretty well. I think my site might be behaving and

42
00:02:55,878 --> 00:02:59,652
it's nice that I get to learn this before my customers start emailing me

43
00:02:59,706 --> 00:03:03,520
telling me there's bad things happening on my website. Yep,

44
00:03:03,600 --> 00:03:05,670
I think this talk is going to go great.

45
00:03:06,200 --> 00:03:06,950
Awesome.

46
00:03:11,880 --> 00:03:15,716
Cypress Cypress is a great way to do browsers based functional

47
00:03:15,748 --> 00:03:19,096
testing. Or said differently, browser is a great way to do end to

48
00:03:19,118 --> 00:03:22,744
end testing of websites in the same way that a user would.

49
00:03:22,862 --> 00:03:26,616
It's built on top of mocha and chai, so if you're familiar with mocha

50
00:03:26,648 --> 00:03:29,630
or jest or jasmine, you'll feel right at home.

51
00:03:30,640 --> 00:03:33,912
Now, it's two parts. One part is the test runner,

52
00:03:33,976 --> 00:03:37,456
the electron app, and one part is a browser plugin that makes

53
00:03:37,478 --> 00:03:41,104
it work really well with other systems. And so,

54
00:03:41,142 --> 00:03:45,090
like many good stories, we started in the middle. Let's back up a little bit

55
00:03:45,860 --> 00:03:49,184
as we look at browser testing, there's lots of different categories.

56
00:03:49,312 --> 00:03:52,292
We might test a specific function.

57
00:03:52,426 --> 00:03:56,628
We might test a component. We might test a service,

58
00:03:56,794 --> 00:04:00,192
a web service. We might hit an API. We might

59
00:04:00,266 --> 00:04:03,700
test from here down. Now, each of these are various

60
00:04:03,780 --> 00:04:07,000
types of tests, and they'll need different tools.

61
00:04:07,580 --> 00:04:11,032
As we start looking at the tools, here's a good list.

62
00:04:11,166 --> 00:04:14,264
Now, as you grab these slides from robertsch.org, you can click

63
00:04:14,302 --> 00:04:17,804
on each of these blue links to learn more about that particular type

64
00:04:17,842 --> 00:04:21,164
of tool. Now, in this test, we're going to focus in this

65
00:04:21,202 --> 00:04:24,504
talk, we're going to focus on end to end tests. But as I'm

66
00:04:24,552 --> 00:04:28,556
testing different parts of my system, I will want to use different components

67
00:04:28,588 --> 00:04:32,380
to be able to get there. Double clicking into end to end tests.

68
00:04:32,460 --> 00:04:36,796
Selenium is the one that kind of invented this industry,

69
00:04:36,908 --> 00:04:41,152
and it's a great system for being able to test websites.

70
00:04:41,296 --> 00:04:44,516
Selenium uses Webdriver under the hood, and Webdriver has all

71
00:04:44,538 --> 00:04:47,696
but become a web standard. But selenium tests

72
00:04:47,728 --> 00:04:51,544
are kind of slow and kind of brittle. Selenium is

73
00:04:51,582 --> 00:04:56,024
just moving the mouse and waiting for the

74
00:04:56,062 --> 00:04:59,956
browser to update. So if the API isn't

75
00:04:59,988 --> 00:05:03,484
done yet, well, then I might increase the timeouts in my

76
00:05:03,522 --> 00:05:06,924
test that makes my test slower or I just rerun them,

77
00:05:06,962 --> 00:05:08,860
which means they're fragile, they're brittle.

78
00:05:10,160 --> 00:05:13,644
By comparison, Cypress has a browser plugin so it can

79
00:05:13,682 --> 00:05:17,104
watch the dom, and whenever those DOm is done updating, it can continue on

80
00:05:17,142 --> 00:05:20,732
with the tests. Cypress is deeply integrated

81
00:05:20,796 --> 00:05:24,352
into the browser, which means it works with specific browsers that they've already

82
00:05:24,406 --> 00:05:27,744
chosen to support. So if I need support for Safari

83
00:05:27,792 --> 00:05:31,124
or ie, yeah, Cypress really can't help us

84
00:05:31,162 --> 00:05:34,660
there. But for webkit based browsers, Chrome, Firefox,

85
00:05:35,400 --> 00:05:39,104
it works out great. Cypress feels like a jquery

86
00:05:39,152 --> 00:05:42,424
API, and that's a little dated, but we can kind of look through

87
00:05:42,462 --> 00:05:46,312
that. Test cafe is another

88
00:05:46,366 --> 00:05:50,216
tool here that might work out well. If you use Devexpress for other needs,

89
00:05:50,318 --> 00:05:53,800
then you might feel right at home. Devexpress uses CSS

90
00:05:53,880 --> 00:05:57,580
selectors, which works out really well. It feels really native.

91
00:05:58,240 --> 00:06:01,804
But Test Cafe has a browser context and a

92
00:06:01,842 --> 00:06:05,116
test context, so you'll end up shimming content between them.

93
00:06:05,298 --> 00:06:09,020
Similarly, you'll shim a lot of content across that marshalled boundary

94
00:06:09,100 --> 00:06:12,956
with playwright. Playwright is built on top of puppeteer. So if you've

95
00:06:12,988 --> 00:06:16,364
ever used puppeteer to remote control a chrome browser,

96
00:06:16,412 --> 00:06:20,404
then you'll feel right at home with playwright. The assertion syntax is

97
00:06:20,442 --> 00:06:23,808
not using mocha with chai or jest

98
00:06:23,904 --> 00:06:27,120
or jasmine, so it feels a little bit odd.

99
00:06:27,280 --> 00:06:30,380
But playwright has excellent support in lots of languages.

100
00:06:30,560 --> 00:06:34,010
Now, ultimately, which tool you choose to do end to end test,

101
00:06:36,460 --> 00:06:40,410
pardon me, is definitely up to you, but let's use Cypress here.

102
00:06:40,780 --> 00:06:44,276
How do we get started with Cypress? Well, the first step is we NPM

103
00:06:44,308 --> 00:06:47,996
install Cypress and then NPX Cypress Open. That will open

104
00:06:48,018 --> 00:06:51,724
up the ide. And we saw the ide a little bit before. It'll also

105
00:06:51,762 --> 00:06:55,356
scaffold but a bunch of example tests if we opt into doing that.

106
00:06:55,538 --> 00:06:59,360
So let's take a look at that IDE. Now, I've already done a

107
00:06:59,510 --> 00:07:03,056
NPX Cypress open, and so I have those Cypress IDE.

108
00:07:03,238 --> 00:07:06,804
I can choose which browser I want to run my tests in. In this case,

109
00:07:06,842 --> 00:07:10,804
I'll those chrome. It automatically discovers the other browsers I have

110
00:07:10,842 --> 00:07:14,340
installed, including electron, which is built in. It's a

111
00:07:14,410 --> 00:07:18,150
webkit based browser built into this ide.

112
00:07:18,840 --> 00:07:22,296
Now, I could choose to run all specs, or I could choose to run a

113
00:07:22,318 --> 00:07:25,624
specific spec. Here's the examples that it

114
00:07:25,662 --> 00:07:29,620
automatically scaffolded for me that show a lot of different capabilities

115
00:07:29,700 --> 00:07:32,650
of Cypress built into their kitchen sink website.

116
00:07:33,100 --> 00:07:36,296
But let's pop open this Todo MVC and we

117
00:07:36,318 --> 00:07:39,932
can take a look at how this test runs. Now, notice that it's running

118
00:07:39,986 --> 00:07:43,292
in a new edition of Chrome, not the edition of Chrome that I was running

119
00:07:43,346 --> 00:07:46,956
before. So any local cookies or session storage or browser

120
00:07:46,988 --> 00:07:51,104
plugins don't apply. And it can run really seamlessly inside this

121
00:07:51,142 --> 00:07:52,050
web experience.

122
00:07:54,740 --> 00:07:58,848
Now we can see that it is running the website as users would.

123
00:07:58,934 --> 00:08:01,700
That's great. As we click into each step,

124
00:08:01,770 --> 00:08:05,076
we can see the various tasks that it did and we can take

125
00:08:05,098 --> 00:08:07,888
a look at the details at that particular task.

126
00:08:07,984 --> 00:08:11,608
So it went looking for a new to do button and then

127
00:08:11,694 --> 00:08:15,000
it did it. And we can find the oh,

128
00:08:15,070 --> 00:08:19,064
there's the spot in the ide where it chose to click.

129
00:08:19,182 --> 00:08:22,492
Now, if we pop open the web developer tools, we can see that,

130
00:08:22,546 --> 00:08:26,124
well, it's just Chrome and so we can

131
00:08:26,162 --> 00:08:29,292
set breakpoints inside of our code and we can

132
00:08:29,346 --> 00:08:35,260
be able to see our functions running just fine inside

133
00:08:35,330 --> 00:08:38,864
this iDe. We can also use this to be able to help us pick stuff.

134
00:08:38,982 --> 00:08:42,832
We'll dig in more to how we can use best practices picking things,

135
00:08:42,886 --> 00:08:46,720
but that can help us form that Cy get command

136
00:08:47,700 --> 00:08:50,852
and we can choose to rerun our test that shows us that eight

137
00:08:50,906 --> 00:08:55,088
tests passed, no test failed, and how long it took to run these tests.

138
00:08:55,264 --> 00:08:58,772
But because it's just a regular browsers, if we pull up the

139
00:08:58,826 --> 00:09:02,008
console, we can see the console output at each

140
00:09:02,094 --> 00:09:05,796
step. So as we go between the steps it will actually update

141
00:09:05,828 --> 00:09:09,130
the console, showing us the details associated with that step.

142
00:09:09,980 --> 00:09:14,056
Excellent. So we saw in this case that all of our tests passed.

143
00:09:14,168 --> 00:09:17,790
And so I think our website is behaving as we expect.

144
00:09:18,320 --> 00:09:22,110
Let's take a look at the code of what produced this.

145
00:09:25,090 --> 00:09:28,794
So here's that website and we start out with Cypress JSOn.

146
00:09:28,922 --> 00:09:32,686
Cypress JSon identifies the plugins file.

147
00:09:32,718 --> 00:09:36,494
So let's go look at that plugins file. And this plugin

148
00:09:36,542 --> 00:09:39,954
file defines where all of the rest of the files are.

149
00:09:40,072 --> 00:09:43,698
In later versions of cypress, these two files are combined.

150
00:09:43,874 --> 00:09:47,446
Now I've chosen to put my results in a results folder so that I can

151
00:09:47,468 --> 00:09:50,646
specifically get ignore it. I have a fixtures folder,

152
00:09:50,678 --> 00:09:53,958
all of my tests, and that's inside test cypress

153
00:09:54,054 --> 00:09:57,866
fixtures. I have an integration folder and a

154
00:09:57,888 --> 00:09:59,050
support file.

155
00:10:00,910 --> 00:10:04,374
So here's all of my tests inside my integration folder

156
00:10:04,502 --> 00:10:07,886
and these are typescript tests. So in

157
00:10:07,908 --> 00:10:11,406
my root directory I have a TS config that tells me all

158
00:10:11,428 --> 00:10:15,006
the details of how I'm going to build my application. But I also have a

159
00:10:15,028 --> 00:10:18,626
TS config here in the cypress folder. Now this says it

160
00:10:18,648 --> 00:10:22,626
descends from the TS config above. So I don't need to redo all the

161
00:10:22,648 --> 00:10:26,318
settings, but I am going to set the types including cypress

162
00:10:26,414 --> 00:10:29,638
and include the cypress folder to be able to

163
00:10:29,644 --> 00:10:32,310
get out the typescript type functions.

164
00:10:33,770 --> 00:10:37,602
Now I chose in my package Json to do the cypress

165
00:10:37,666 --> 00:10:41,334
open and cypress run just so that I can have some really easy

166
00:10:41,452 --> 00:10:45,350
commands to run it. But we can also run in headless mode

167
00:10:45,430 --> 00:10:48,710
passing in the particular browsers that we want to run. So here's chrome,

168
00:10:48,790 --> 00:10:52,586
Firefox, and edge tests, and I'll run them all together

169
00:10:52,688 --> 00:10:56,558
to be able to run my integration test across all of the browsers that

170
00:10:56,564 --> 00:11:00,026
I need to run. So let's take a look at the test that we ran.

171
00:11:00,138 --> 00:11:03,134
Now starting at this test,

172
00:11:03,252 --> 00:11:06,714
this test is using Todo MVC. Now to do MVC

173
00:11:06,762 --> 00:11:09,998
is a little bit wanted now, but we can see how we can test sites

174
00:11:10,014 --> 00:11:13,966
that we own or sites that we don't own. The purpose of todo

175
00:11:13,998 --> 00:11:18,178
MVC is to create a client side MVC application

176
00:11:18,344 --> 00:11:22,578
in each framework. So there's examples in lots of different frameworks.

177
00:11:22,754 --> 00:11:26,518
Now I chose to implement the angularjs one. In this case

178
00:11:26,604 --> 00:11:30,166
we could choose to uncomment particular frameworks and run the

179
00:11:30,188 --> 00:11:34,278
tests in those frameworks instead. I'll go grab the site name,

180
00:11:34,364 --> 00:11:38,326
just that I can output that in my test block. And here's

181
00:11:38,358 --> 00:11:42,250
our tests. It should visit a page cy URL

182
00:11:43,070 --> 00:11:46,794
should equal the site URL. Now I chose

183
00:11:46,842 --> 00:11:50,090
to do this before each to go visit the URL

184
00:11:50,170 --> 00:11:53,630
so that I make sure that by the time my page loads,

185
00:11:53,970 --> 00:11:57,706
by the time my test starts, I already have the page loaded.

186
00:11:57,818 --> 00:12:00,738
Now that may not make sense in some tests when I want to be able

187
00:12:00,744 --> 00:12:04,178
to intercept things, but in this case it's perfect. Now I

188
00:12:04,184 --> 00:12:07,906
don't need to repeat that. At the top of every test we

189
00:12:07,928 --> 00:12:11,026
can see that we're grabbing site URL. So I just want to make sure that

190
00:12:11,048 --> 00:12:14,614
I've landed on the page that I expect. Now as I was first

191
00:12:14,652 --> 00:12:18,822
building this talk, they had the site based in HTTP and then

192
00:12:18,876 --> 00:12:22,326
they flipped it over to HTTPs. And so I'm really glad I had

193
00:12:22,348 --> 00:12:25,426
this test to validate that it was the page I was looking at.

194
00:12:25,548 --> 00:12:28,986
If ever you refactor your website and the pages move around, you want to

195
00:12:29,008 --> 00:12:32,282
make sure that you're hitting the actual page that you want to test. Next,

196
00:12:32,336 --> 00:12:35,882
let's start interacting with the page. So let me go get this

197
00:12:35,936 --> 00:12:39,454
to do list. Let me go grab all the list items in it,

198
00:12:39,492 --> 00:12:43,006
all the to do items and it should not exist. We can see that kind

199
00:12:43,028 --> 00:12:46,274
of jquery like experience where we have not

200
00:12:46,392 --> 00:12:49,700
exist. All else being equal, I wish there was just a

201
00:12:50,070 --> 00:12:54,014
not exist method like in mocha,

202
00:12:54,142 --> 00:12:58,450
like in chai or jest. But nope, they're strings.

203
00:12:59,110 --> 00:13:02,854
Okay, so now that we've selected and noticed that they

204
00:13:02,892 --> 00:13:06,518
don't exist, let's level up again and start interacting with the page.

205
00:13:06,684 --> 00:13:09,894
So I want to create a new to do. I'm going to create this write

206
00:13:09,932 --> 00:13:13,258
cypress test. So let me go find that new to do box.

207
00:13:13,344 --> 00:13:17,274
I will start typing in it and hit enter. Now we can see that

208
00:13:17,312 --> 00:13:20,586
those one grabbed that replacement expression to set that in

209
00:13:20,608 --> 00:13:23,934
place, but this enter doesn't have the dollar sign

210
00:13:23,972 --> 00:13:27,614
in front of it. This is just a magic word where

211
00:13:27,652 --> 00:13:30,266
we can specify the specific keys.

212
00:13:30,378 --> 00:13:33,742
So we could specify function keys, shift control,

213
00:13:33,876 --> 00:13:37,486
alt, any of the special keys that we need. We can use this syntax to

214
00:13:37,508 --> 00:13:41,074
get at. So I get that and I type in that box the

215
00:13:41,112 --> 00:13:44,770
new to do and I push enter. Notice that we're not awaiting anything.

216
00:13:44,840 --> 00:13:48,834
We didn't await the page cleaning either. Now once all

217
00:13:48,872 --> 00:13:52,854
the Dom events have finished, let's go grab that to do list and validate that

218
00:13:52,892 --> 00:13:56,758
it contains that new to do text and that our new to do box

219
00:13:56,844 --> 00:14:00,614
is blank. Let's level up again and start to

220
00:14:00,652 --> 00:14:04,506
type in a bunch of stuff. Let's create a new to do, create an

221
00:14:04,528 --> 00:14:08,362
irrelevant to do and then go click

222
00:14:08,416 --> 00:14:11,770
on the new to do to toggle it as completed.

223
00:14:12,350 --> 00:14:15,466
Notice that we reach into that to do to grab

224
00:14:15,498 --> 00:14:20,186
the children toggle and click it. That's really intuitive.

225
00:14:20,378 --> 00:14:23,966
Now let's go look for the to do list because we completed that,

226
00:14:24,068 --> 00:14:27,486
then we should have a class of completed so we can

227
00:14:27,508 --> 00:14:30,642
validate the CSS class as completed and we're ready to go.

228
00:14:30,776 --> 00:14:34,066
Should delete a to do. Let's go create two to

229
00:14:34,088 --> 00:14:37,810
dos. We will go find the new to do and we will click

230
00:14:37,880 --> 00:14:41,526
on that button. But this destroy button only shows up

231
00:14:41,548 --> 00:14:44,882
if we mouse over it. We're not running mouse events,

232
00:14:44,946 --> 00:14:48,454
we're running Javascript events. So there is no

233
00:14:48,572 --> 00:14:52,038
mouse over per se. So we're going to say force is true, we're going to

234
00:14:52,044 --> 00:14:54,390
click it even though it's not visible.

235
00:14:55,150 --> 00:14:58,746
And now our list should only have length one and it should be

236
00:14:58,768 --> 00:15:01,562
the irrelevant to do. We want to make sure that we clicked on the correct

237
00:15:01,616 --> 00:15:05,726
one. It should only have active tasks. So we've been

238
00:15:05,748 --> 00:15:08,686
doing a whole lot of this creating the to do,

239
00:15:08,788 --> 00:15:12,126
and that's, well, kind of messy. Wouldn't it be

240
00:15:12,148 --> 00:15:15,326
better if we could say to do add? This is

241
00:15:15,348 --> 00:15:19,730
a cypress command. So let's open up our commands folder

242
00:15:22,590 --> 00:15:25,770
and we'll build up a bunch of commands. Here's this to do

243
00:15:25,840 --> 00:15:28,858
add command. I'm going to pass in some text. I'm going to go find that

244
00:15:28,864 --> 00:15:31,678
to do button. I'll type in the text and push enter.

245
00:15:31,844 --> 00:15:35,086
And while we're there let's just validate that the box is

246
00:15:35,108 --> 00:15:38,474
now empty. Excellent.

247
00:15:38,522 --> 00:15:42,190
So now that we have this command we can just call to do add.

248
00:15:42,340 --> 00:15:46,062
Now because this is typescript, we also need to give it a typescript

249
00:15:46,126 --> 00:15:49,666
declaration file saying what this new command is. We can

250
00:15:49,688 --> 00:15:53,362
head out to the cypress docs and we can see how we can build

251
00:15:53,416 --> 00:15:57,906
this typescript declaration file for our new commands,

252
00:15:58,098 --> 00:16:01,074
but that makes our tests a whole lot more legible.

253
00:16:01,122 --> 00:16:05,138
If ever you've used page objects inside of selenium,

254
00:16:05,234 --> 00:16:08,486
this is exactly the same. So we'll add this to do, we'll add this to

255
00:16:08,508 --> 00:16:11,802
do. We'll add the new to do that we care about, and then we'll complete

256
00:16:11,856 --> 00:16:15,574
the new to do. Now, because we should only show active

257
00:16:15,622 --> 00:16:18,806
tasks, we should have two left. So let's

258
00:16:18,838 --> 00:16:22,320
click on the filter and then validate that we have two left.

259
00:16:24,050 --> 00:16:27,102
We should only show completed tasks. We'll do a similar thing,

260
00:16:27,156 --> 00:16:30,426
creating our to dos and validate that when we click the completed

261
00:16:30,458 --> 00:16:33,934
box, we only have length one, only the one that was completed.

262
00:16:34,062 --> 00:16:37,970
And for the sake of completeness, let's show clear

263
00:16:38,120 --> 00:16:41,474
tests. Well, let's clear the tests and validate that we don't have

264
00:16:41,512 --> 00:16:45,026
any left in our thing. So firing up this tests, we can

265
00:16:45,048 --> 00:16:48,214
see how we run each of those tests and start to level up through our

266
00:16:48,252 --> 00:16:52,550
experience as we go. We'll start by just validating the URL.

267
00:16:52,970 --> 00:16:57,126
Oh, here's the typescript build that it does, because it did

268
00:16:57,148 --> 00:17:00,726
a build. It actually refreshed the page and you can see how it rewrote

269
00:17:00,758 --> 00:17:02,140
the URL as well.

270
00:17:03,310 --> 00:17:06,278
So we visit the page, we have no to dos,

271
00:17:06,374 --> 00:17:09,642
we complete a task and all of our tests pass.

272
00:17:09,776 --> 00:17:13,338
Excellent. So let's level up a

273
00:17:13,344 --> 00:17:17,342
little bit and talk about this Hackernews PWA site.

274
00:17:17,476 --> 00:17:20,814
Now, this is kind of the spiritual successor to Todo NBC, the site

275
00:17:20,852 --> 00:17:24,298
we just saw. And this creates a hacker news client.

276
00:17:24,474 --> 00:17:27,074
Now, we want to be able to test this. We want to validate that,

277
00:17:27,112 --> 00:17:30,974
if we render this correctly. But we don't know what today's hacker news stories

278
00:17:31,022 --> 00:17:34,498
are, so it may not make sense to

279
00:17:34,584 --> 00:17:38,162
just do this. Let's take a look at how we might intercept

280
00:17:38,306 --> 00:17:41,746
requests. So here's a hacker news site. You can flip

281
00:17:41,778 --> 00:17:45,862
between the various instances. We'll start off by visiting the page straight away

282
00:17:45,996 --> 00:17:49,462
and validate that our site is as expected.

283
00:17:49,606 --> 00:17:53,194
Next, let's intercept a web request. We don't want

284
00:17:53,232 --> 00:17:57,014
it to reply with the actual hacker news content. We want to reply

285
00:17:57,062 --> 00:18:00,634
with our fixture. Now, we could use strings here.

286
00:18:00,672 --> 00:18:04,154
I chose to use regular expressions, but we want to very specifically

287
00:18:04,202 --> 00:18:08,074
use this hacker news fixture. Let's come into this fixture

288
00:18:08,122 --> 00:18:12,078
and we can see this hacker news fixture. Now, I've got some fake data

289
00:18:12,164 --> 00:18:15,550
here, and so I know that the title of this first article

290
00:18:15,630 --> 00:18:19,182
is, this is the first story. So as I go to render

291
00:18:19,246 --> 00:18:23,042
this component. I know that that should contain those

292
00:18:23,096 --> 00:18:26,850
specific story. I've taken control of that external resource

293
00:18:26,930 --> 00:18:30,866
and made it behave in a very predictable way. This is really helpful

294
00:18:30,898 --> 00:18:34,070
when validating if we can render our components correctly.

295
00:18:34,730 --> 00:18:37,810
Now, we could lie to ourselves and presume that the API

296
00:18:37,890 --> 00:18:41,306
always returns that way. But no, we want to be

297
00:18:41,328 --> 00:18:44,122
able to validate. It actually returns correctly too.

298
00:18:44,256 --> 00:18:48,026
So I know that it will return 30 stories on the

299
00:18:48,048 --> 00:18:52,170
page. So let me go run this and validate

300
00:18:52,250 --> 00:18:55,946
with the real API that it works as expected.

301
00:18:56,138 --> 00:18:59,082
If we only mock out all of our API requests,

302
00:18:59,146 --> 00:19:02,398
we won't be able to validate that our site works, only that

303
00:19:02,484 --> 00:19:06,580
our site works if we assume the API behaves that way.

304
00:19:07,190 --> 00:19:11,074
Now if this takes a really long time, we could name that thing

305
00:19:11,192 --> 00:19:14,354
and then wait for it. But in this case I think it'll run fast

306
00:19:14,392 --> 00:19:17,942
enough. So let's fire up this hacker news test and

307
00:19:17,996 --> 00:19:21,366
validate that we can hit our content and that we

308
00:19:21,388 --> 00:19:24,866
can replace content to be able to validate our controls,

309
00:19:24,898 --> 00:19:28,570
render successfully, and hit the real API to validate that

310
00:19:28,640 --> 00:19:31,450
our site still works even with real content.

311
00:19:31,600 --> 00:19:34,060
Yep, our site works just fine.

312
00:19:35,470 --> 00:19:39,020
That was cool. We were able to dig into our

313
00:19:39,710 --> 00:19:43,360
cypress tests and be able to run them in a really elegant way.

314
00:19:43,890 --> 00:19:47,390
Now, some best practices around cypress tests.

315
00:19:48,050 --> 00:19:52,014
It would be easy for us to just build up that XPath down into

316
00:19:52,052 --> 00:19:55,474
the particular element, but well, if we refactor our website then

317
00:19:55,512 --> 00:19:58,690
that will break. We want to make these tests a lot more durable.

318
00:19:59,030 --> 00:20:02,766
Look for an id or a class and hook

319
00:20:02,798 --> 00:20:06,002
onto those or even better, create a data

320
00:20:06,136 --> 00:20:10,022
datacy. And then in the test look for

321
00:20:10,156 --> 00:20:13,570
the attribute data cy that matches that element.

322
00:20:13,730 --> 00:20:17,494
The other benefit here is that we've very specifically detailed that

323
00:20:17,532 --> 00:20:20,694
our test that we have a test dependent

324
00:20:20,742 --> 00:20:24,314
on this code. If we were refactoring this code, then we may need

325
00:20:24,352 --> 00:20:27,914
to also refactor a test. Now does that mean that we might

326
00:20:27,952 --> 00:20:31,726
end up with test code in production? Why yes, but we

327
00:20:31,748 --> 00:20:35,518
can also run some cypress tests in production as well. Let's run

328
00:20:35,604 --> 00:20:39,902
a standard mechanism that hits our home page, goes to

329
00:20:39,956 --> 00:20:43,822
our shopping page, puts something in our cart and tries to check out.

330
00:20:43,956 --> 00:20:47,826
We can do that in production maybe once an hour, maybe once every 15 minutes.

331
00:20:47,928 --> 00:20:51,700
Now we're not going to complete those purchase, but we can get pretty close.

332
00:20:52,550 --> 00:20:56,358
That will ensure that if our site goes down, we know before our customers

333
00:20:56,444 --> 00:21:00,070
start calling and complaining. So maybe having our test content

334
00:21:00,140 --> 00:21:02,520
in production is actually a good thing.

335
00:21:03,690 --> 00:21:07,714
Another best practice, use these commands

336
00:21:07,762 --> 00:21:10,890
for frequent tasks. If you've ever used page methods inside

337
00:21:10,960 --> 00:21:14,586
selenium. It works really similarly and it can give you an extra layer of

338
00:21:14,608 --> 00:21:18,950
comfort there. It helps you focus on the execution

339
00:21:19,030 --> 00:21:22,238
of our test rather than all of the mayhem of how to get there.

340
00:21:22,324 --> 00:21:25,742
And if you ever refactor how you do it, you refactor it in one place

341
00:21:25,796 --> 00:21:28,670
and it'll apply to all the tests. Excellent.

342
00:21:29,890 --> 00:21:33,422
Now another best practice is to log in only once.

343
00:21:33,556 --> 00:21:37,694
If we start every test by logging into the website, our tests might be slow.

344
00:21:37,822 --> 00:21:41,234
Instead, let's log in once, save a token, and then

345
00:21:41,272 --> 00:21:44,994
use that token before each in all of the rest of our tests. Or even

346
00:21:45,032 --> 00:21:48,902
better, hit a test API that is able to grab a token and then save

347
00:21:48,956 --> 00:21:52,166
that for use in all of the tests. We do want

348
00:21:52,188 --> 00:21:55,446
to validate that our login works as expected, but not at the

349
00:21:55,468 --> 00:21:58,600
beginning of every test. That could make our tests low.

350
00:21:59,470 --> 00:22:02,826
Another best practice? Use fixtures for mocking data.

351
00:22:02,928 --> 00:22:06,122
If you have a consistent username and password or a consistent result

352
00:22:06,176 --> 00:22:09,354
set, put that in a fixture so that then it's not

353
00:22:09,392 --> 00:22:12,686
cluttering up the majority of your test and your test becomes a whole lot

354
00:22:12,708 --> 00:22:16,254
more legible and terse. Now we used a fixture in our

355
00:22:16,292 --> 00:22:20,106
application to reply to a web request. Instead of hitting

356
00:22:20,138 --> 00:22:23,866
that API, we got our fixture so that we could validate our control rendered

357
00:22:23,898 --> 00:22:27,630
correctly even if hacker news content changed.

358
00:22:28,450 --> 00:22:31,870
Now, Cypress is a great mechanism for being able to run

359
00:22:31,940 --> 00:22:35,494
end to end tests on our website, and I would invite you to get started.

360
00:22:35,612 --> 00:22:38,854
You can find these slides on robrich.org and hit

361
00:22:38,892 --> 00:22:42,006
me up in that spot where the conference is designated for live Q

362
00:22:42,028 --> 00:22:46,002
and A. Or if you're watching this on demand, hit me up@robrich.org

363
00:22:46,066 --> 00:22:49,778
or on Twitter at robrich. Thanks for joining

364
00:22:49,794 --> 00:22:51,250
us for comp 42 Javascript.

