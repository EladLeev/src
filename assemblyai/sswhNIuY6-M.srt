1
00:01:44,830 --> 00:01:47,710
Hi everyone, thank you for joining my session.

2
00:01:47,870 --> 00:01:51,378
Today I'll be talking about infrastructure as code,

3
00:01:51,464 --> 00:01:54,290
security, best practices and strategies.

4
00:01:54,790 --> 00:01:57,906
Before we start, let me introduce myself.

5
00:01:58,088 --> 00:02:01,314
I am Joshua Arvin Latt and I am the chief technology

6
00:02:01,432 --> 00:02:04,878
officer of Noworks Interactive Labs.

7
00:02:05,054 --> 00:02:08,010
And I'm also an AWS machine Learning hero.

8
00:02:08,350 --> 00:02:12,566
I am also the author of the books Machine Learning with Amazon Sagemaker

9
00:02:12,598 --> 00:02:16,006
cookbook machine learning engineering on AWS

10
00:02:16,198 --> 00:02:19,738
and building and automating penetration testing labs in

11
00:02:19,744 --> 00:02:23,310
these cloud. Next year there will be a new book

12
00:02:23,460 --> 00:02:27,742
and it's called Learning serverless security. So if you're into cloud

13
00:02:27,796 --> 00:02:31,866
security, then this book is for you. So let's

14
00:02:31,898 --> 00:02:34,978
begin. So in the past we usually think

15
00:02:35,064 --> 00:02:38,738
of web applications as more or less single

16
00:02:38,824 --> 00:02:42,318
components. And after a while we realize

17
00:02:42,414 --> 00:02:45,974
that there are several parts to it, like the front

18
00:02:46,012 --> 00:02:49,382
end aspect, the back end and

19
00:02:49,436 --> 00:02:53,254
also the database. So the front end connects to the back end

20
00:02:53,372 --> 00:02:57,202
and these back end connects to the database. Basically this is

21
00:02:57,276 --> 00:03:00,486
still these same web application which serves

22
00:03:00,598 --> 00:03:04,218
the end users. The more we use the cloud

23
00:03:04,304 --> 00:03:08,166
and the more complex the system gets, the more components

24
00:03:08,198 --> 00:03:11,674
it would have. So for example, if you have an architecture

25
00:03:11,722 --> 00:03:15,338
like this where you have several components like a CDN,

26
00:03:15,434 --> 00:03:19,150
a load balancer, as well as the servers,

27
00:03:19,490 --> 00:03:24,414
then we're able to make the system more resilient,

28
00:03:24,542 --> 00:03:28,494
especially if the servers can auto scale depending

29
00:03:28,542 --> 00:03:32,434
on how many users are able to use the applications.

30
00:03:32,632 --> 00:03:36,326
So if there are two to three times more users, then maybe we

31
00:03:36,348 --> 00:03:40,246
can add more servers inside these setup. This is one

32
00:03:40,268 --> 00:03:43,814
of the advantages of having a distributed setup, but of course it would

33
00:03:43,852 --> 00:03:47,342
involve more resources and more components

34
00:03:47,506 --> 00:03:51,100
at the same time. If you want to incorporate security

35
00:03:52,110 --> 00:03:55,562
resources like firewalls, then we can easily add those

36
00:03:55,616 --> 00:03:59,490
and bind it to existing components.

37
00:03:59,670 --> 00:04:03,454
Thus when it comes to discussions, it may make

38
00:04:03,492 --> 00:04:07,262
sense to just have architectures where you have

39
00:04:07,316 --> 00:04:11,086
different building blocks. These each building block has a

40
00:04:11,108 --> 00:04:15,010
purpose and multiple building blocks would be grouped together

41
00:04:15,160 --> 00:04:19,122
to perform specific actions like preventing against

42
00:04:19,176 --> 00:04:23,234
certain types of attacks or maybe allowing the system to scale when

43
00:04:23,272 --> 00:04:26,374
there's a lot of traffic. That said,

44
00:04:26,492 --> 00:04:28,790
when working with a lot of resources,

45
00:04:29,690 --> 00:04:33,174
it becomes more important for

46
00:04:33,212 --> 00:04:37,234
us to manage these resources in a way that allows us

47
00:04:37,292 --> 00:04:40,582
to configure these in a more efficient manner.

48
00:04:40,726 --> 00:04:44,554
And one of the techniques available would be the

49
00:04:44,592 --> 00:04:48,518
usage of infrastructure as code tools and solutions

50
00:04:48,694 --> 00:04:52,558
to convert a complex infrastructure into

51
00:04:52,644 --> 00:04:55,918
templates. So when I say templates, these are basically

52
00:04:56,004 --> 00:04:59,322
just text files containing the configuration

53
00:04:59,466 --> 00:05:02,110
of the resources which would be created.

54
00:05:02,550 --> 00:05:06,142
So there, once you have this infrastructure

55
00:05:06,206 --> 00:05:10,386
as code templates, we are now able to build

56
00:05:10,488 --> 00:05:13,726
multiple environments from that template.

57
00:05:13,838 --> 00:05:17,158
So for example, if we have a staging environment and a

58
00:05:17,164 --> 00:05:21,062
production environment, both of those environments can

59
00:05:21,116 --> 00:05:24,886
come from the same template, and of course they would

60
00:05:24,908 --> 00:05:28,454
be configured a bit differently with the right configuration

61
00:05:28,502 --> 00:05:31,930
parameters. So more or less you have a template,

62
00:05:32,350 --> 00:05:35,702
a text file, and then you would have various

63
00:05:35,766 --> 00:05:39,434
configuration parameters depending on where you're going to

64
00:05:39,472 --> 00:05:42,682
deploy the resources. So if it's a staging environment,

65
00:05:42,826 --> 00:05:46,654
then there would be a staging configuration, and then if there's the

66
00:05:46,692 --> 00:05:50,026
production environment, then you would have of course the corresponding

67
00:05:50,138 --> 00:05:55,166
production configuration with of course these larger resources

68
00:05:55,358 --> 00:05:59,106
deployed in a production setting. So one

69
00:05:59,128 --> 00:06:03,630
of the best practices when building environments,

70
00:06:03,790 --> 00:06:07,670
especially in the cloud, using IAC tools,

71
00:06:08,170 --> 00:06:11,730
for example terraform, one of these best practices

72
00:06:11,810 --> 00:06:16,114
would be to create separate IAM rules

73
00:06:16,242 --> 00:06:19,942
or basically securing configuration and bind

74
00:06:20,006 --> 00:06:24,186
those to cloud resources. So at

75
00:06:24,208 --> 00:06:27,914
the moment you'll probably be asking why.

76
00:06:28,112 --> 00:06:31,438
That's because each of the resources number one needs to

77
00:06:31,444 --> 00:06:34,926
be tagged properly, and each of the resources should be

78
00:06:34,948 --> 00:06:38,266
properly configured as well. So after tagging

79
00:06:38,298 --> 00:06:42,426
those resources one at a time, so you're able

80
00:06:42,468 --> 00:06:46,174
to properly manage the assets, you're properly

81
00:06:46,222 --> 00:06:50,334
able to count and identify which resources have been created

82
00:06:50,382 --> 00:06:54,126
and which ones are missing and which ones need to be modified,

83
00:06:54,318 --> 00:06:57,654
and then which resources need a specific set

84
00:06:57,692 --> 00:07:02,002
of permissions. And there you're able to identify

85
00:07:02,066 --> 00:07:04,840
which could be a weak link when it comes to security.

86
00:07:05,530 --> 00:07:09,382
So when building infrastructure resources

87
00:07:09,446 --> 00:07:13,686
using IAC tools, it's important to avoid insecure defaults

88
00:07:13,798 --> 00:07:17,370
and of course regularly check for announcements in cloud platforms.

89
00:07:17,710 --> 00:07:21,342
The tricky part with using infrastructure as code is

90
00:07:21,396 --> 00:07:25,054
the templates and examples available online may already be

91
00:07:25,092 --> 00:07:28,382
outdated. And these are some cases where the current

92
00:07:28,436 --> 00:07:32,494
configuration specified in those default templates may

93
00:07:32,532 --> 00:07:37,150
end up being insecure, meaning they may have security vulnerabilities.

94
00:07:37,510 --> 00:07:40,894
In some cases, when you use generative AI tools

95
00:07:41,022 --> 00:07:44,194
to generate these types of templates, you might end

96
00:07:44,232 --> 00:07:47,590
up producing something which is already

97
00:07:47,660 --> 00:07:50,550
insecure, something which has vulnerabilities.

98
00:07:50,890 --> 00:07:55,186
A good example of this would be an s three bucket created

99
00:07:55,218 --> 00:07:58,870
using IAC. But if you accidentally opened

100
00:07:58,950 --> 00:08:02,730
that bucket for access to anyone in the world,

101
00:08:02,880 --> 00:08:06,406
then anything you store inside that storage container could easily

102
00:08:06,438 --> 00:08:10,030
be accessed and downloaded by everyone else. So if

103
00:08:10,100 --> 00:08:13,470
that storage contains,

104
00:08:13,890 --> 00:08:17,086
let's say a database dump or let's say

105
00:08:17,188 --> 00:08:20,986
a set of files containing very sensitive information, then it's

106
00:08:21,018 --> 00:08:25,122
going CTO affect your organization as well. So be

107
00:08:25,176 --> 00:08:28,594
very careful about this and regularly check for announcements in

108
00:08:28,632 --> 00:08:32,370
cloud platforms, especially if they decided to change

109
00:08:32,440 --> 00:08:34,690
the defaults into something more secure.

110
00:08:35,210 --> 00:08:38,822
So this is important, especially if you use cloud

111
00:08:38,876 --> 00:08:41,586
platforms like AWS, Azure and GCP.

112
00:08:41,698 --> 00:08:45,394
Because even if you already have the IAC templates,

113
00:08:45,522 --> 00:08:48,902
then those templates may not automatically reflect

114
00:08:49,046 --> 00:08:52,426
what has been announced recently. Now let's talk

115
00:08:52,448 --> 00:08:55,914
about secret management and permission management. So when

116
00:08:55,952 --> 00:08:59,066
running IAC tools, IAC tools of

117
00:08:59,088 --> 00:09:01,950
course require credentials,

118
00:09:02,690 --> 00:09:06,414
something like a secret key or an access key to

119
00:09:06,452 --> 00:09:09,520
allow them to create resources inside these cloud platform.

120
00:09:10,290 --> 00:09:14,194
So the challenge there is what if you decided to

121
00:09:14,392 --> 00:09:17,650
launch a server in a public

122
00:09:17,720 --> 00:09:21,620
subnet and inside that server you're going to run

123
00:09:22,390 --> 00:09:26,134
the IAC templates. When I say run, you basically

124
00:09:26,252 --> 00:09:29,894
have the IAC templates ready there and you use these

125
00:09:29,932 --> 00:09:33,074
command line. CTO basically convert those templates

126
00:09:33,122 --> 00:09:37,030
into actual resources. In most cases,

127
00:09:37,390 --> 00:09:41,420
developers and engineers would do the shortcut where

128
00:09:41,790 --> 00:09:45,542
the server would have an IM role

129
00:09:45,686 --> 00:09:48,874
with super admin permissions. Of course that would

130
00:09:48,912 --> 00:09:52,766
allow you to run anything and build anything

131
00:09:52,868 --> 00:09:56,046
from that server. Thus it's super convenient for the

132
00:09:56,068 --> 00:10:00,062
engineers. CTO have this type of setup. Unfortunately, the problem

133
00:10:00,116 --> 00:10:03,834
there is that server is tagged

134
00:10:03,882 --> 00:10:07,086
as high risk because for one thing it's in the public subnet.

135
00:10:07,198 --> 00:10:10,450
If that gets compromised, then anyone

136
00:10:10,520 --> 00:10:14,034
who has access to that server would technically be able to

137
00:10:14,072 --> 00:10:16,870
perform anything in that cloud environment.

138
00:10:17,450 --> 00:10:21,800
So right now you might be asking me why or how?

139
00:10:22,330 --> 00:10:25,682
Because even if I'm just talking about the concepts,

140
00:10:25,826 --> 00:10:29,450
most of us have no idea how these attacks are actually

141
00:10:29,520 --> 00:10:33,274
performed. So getting

142
00:10:33,312 --> 00:10:36,506
back to the example earlier, let's say that

143
00:10:36,528 --> 00:10:40,106
you have a server, these, your IAC code is converted

144
00:10:40,138 --> 00:10:44,430
into infrastructure and that server has super admin permissions.

145
00:10:44,850 --> 00:10:48,878
If that server gets compromised, what could possibly happen

146
00:10:49,044 --> 00:10:52,594
next? There are a lot of things that can happen.

147
00:10:52,712 --> 00:10:56,306
In some cases, if a team decides to use, let's say

148
00:10:56,328 --> 00:11:00,306
containers to do things, or maybe have

149
00:11:00,408 --> 00:11:03,326
different IAM resources configured,

150
00:11:03,518 --> 00:11:06,406
then any of these things could happen.

151
00:11:06,588 --> 00:11:10,486
Maybe container escape is possible, especially if

152
00:11:10,508 --> 00:11:14,070
you decided CTO utilize containers to run

153
00:11:14,140 --> 00:11:17,898
IAC code inside it. So a lot of people think

154
00:11:18,064 --> 00:11:21,786
that using containers would be a

155
00:11:21,808 --> 00:11:26,566
silver bullet. Unfortunately, if you accidentally run containers

156
00:11:26,678 --> 00:11:30,666
with excessive permissions, it's also possible to perform container

157
00:11:30,698 --> 00:11:34,794
escape. That is, someone inside the container

158
00:11:34,842 --> 00:11:38,400
can access the server where these container is running.

159
00:11:38,930 --> 00:11:42,914
The next step there is once an attacker is inside

160
00:11:43,032 --> 00:11:47,026
a server, IAM privilege escalation is possible,

161
00:11:47,208 --> 00:11:51,090
meaning that someone with very

162
00:11:51,160 --> 00:11:54,946
little permissions could technically find a

163
00:11:54,968 --> 00:11:59,174
way to access the entire account using

164
00:11:59,212 --> 00:12:02,870
the right set of steps. When I say the right set of steps, maybe other

165
00:12:02,940 --> 00:12:06,694
IAM resources could be created and those could then

166
00:12:06,732 --> 00:12:09,834
be used to get extra access,

167
00:12:10,032 --> 00:12:13,782
which would allow an attacker to perform malicious actions

168
00:12:13,926 --> 00:12:17,722
or operations that would include attacking other

169
00:12:17,776 --> 00:12:21,306
organizations. That would include deleting all the resources in

170
00:12:21,328 --> 00:12:25,034
your account and also creating superbic resources

171
00:12:25,082 --> 00:12:28,814
which would end up closing the account. Also in other

172
00:12:28,852 --> 00:12:32,186
cases there could be databases or data stores which

173
00:12:32,228 --> 00:12:36,638
contain sensitive information, and the extra access acquired

174
00:12:36,734 --> 00:12:40,786
during privilege escalation can be used to access the

175
00:12:40,808 --> 00:12:44,242
other databases and data stores. The next best

176
00:12:44,296 --> 00:12:48,482
practice would be to track and manage changes using version control tools.

177
00:12:48,626 --> 00:12:51,666
So the advantage when having IAC

178
00:12:51,778 --> 00:12:55,334
solutions as part of the process is that you

179
00:12:55,372 --> 00:12:59,354
have your infrastructure as code, and when you have

180
00:12:59,552 --> 00:13:02,730
the resources as code, you're able to

181
00:13:02,800 --> 00:13:06,474
keep them as files and use something like git to

182
00:13:06,512 --> 00:13:10,174
manage the changes. So if you have version one, version two,

183
00:13:10,212 --> 00:13:13,774
and version three, then you can easily check and

184
00:13:13,812 --> 00:13:17,534
iterate using a very similar process as what is

185
00:13:17,652 --> 00:13:21,514
followed when developing web applications,

186
00:13:21,562 --> 00:13:25,074
for example. So if you have a first version and then you have a new

187
00:13:25,112 --> 00:13:28,706
version, instead of deploying that new version in

188
00:13:28,728 --> 00:13:31,874
a production environment, you can technically best it out

189
00:13:31,912 --> 00:13:35,686
first in a test or staging environment, and then

190
00:13:35,708 --> 00:13:39,126
when your application is unaffected, then you

191
00:13:39,148 --> 00:13:42,546
can now get it deployed in a production environment.

192
00:13:42,738 --> 00:13:46,662
So again, resources are now converted into

193
00:13:46,716 --> 00:13:51,462
code. So everything you can do with code, you can now implement

194
00:13:51,526 --> 00:13:54,460
it in your IAC process.

195
00:13:55,070 --> 00:13:59,290
So here we can see an analogy where

196
00:13:59,440 --> 00:14:02,586
you have here a picture of evolution.

197
00:14:02,778 --> 00:14:06,954
You start with previous versions and then you'll

198
00:14:07,002 --> 00:14:10,462
end up having more modern versions, which would probably

199
00:14:10,516 --> 00:14:13,886
take a lot of iterations. And when you're

200
00:14:13,918 --> 00:14:17,234
able to start this process, well then

201
00:14:17,272 --> 00:14:21,380
you can easily find multiple variations. You can have

202
00:14:22,150 --> 00:14:25,470
another version which makes use of previous

203
00:14:25,550 --> 00:14:29,154
code bases. And again you can reuse templates,

204
00:14:29,282 --> 00:14:32,934
you can lay your templates and you can make them as fine

205
00:14:32,972 --> 00:14:36,146
grained as possible using the right set of techniques.

206
00:14:36,258 --> 00:14:39,690
So again, I'm just re emphasizing the point that

207
00:14:39,760 --> 00:14:43,258
this is a very powerful technique in order to manage

208
00:14:43,344 --> 00:14:46,940
IAC code, especially if you have

209
00:14:47,790 --> 00:14:51,078
insecure defaults at the start. And then you realize you

210
00:14:51,104 --> 00:14:55,438
have to update the subnet configuration in your IAC code and

211
00:14:55,524 --> 00:14:59,502
convert it into something more, securing so that the next time around

212
00:14:59,556 --> 00:15:03,214
attackers won't be able to attack certain resources

213
00:15:03,342 --> 00:15:05,810
now protected with the right configuration.

214
00:15:06,230 --> 00:15:10,014
In addition to that, the moment you convert your infrastructure

215
00:15:10,062 --> 00:15:13,858
as code, we can now use pipelines to analyze security

216
00:15:13,944 --> 00:15:17,686
vulnerabilities automatically. So there are different ways to

217
00:15:17,708 --> 00:15:21,042
analyze the code and the resources created

218
00:15:21,106 --> 00:15:25,046
from the code, and you basically have these pipelines. So in

219
00:15:25,068 --> 00:15:29,530
step one you have the code, you push it and the pipeline gets activated.

220
00:15:30,350 --> 00:15:33,882
However, it's important that we're very careful when

221
00:15:33,936 --> 00:15:37,402
managing resources inside pipelines, because even

222
00:15:37,456 --> 00:15:41,230
if we're able to detect these security vulnerabilities inside these templates.

223
00:15:41,730 --> 00:15:45,514
It's possible to have something like a Poisson pipeline

224
00:15:45,562 --> 00:15:49,770
execution, especially when you're utilizing cloud resources

225
00:15:49,930 --> 00:15:53,490
to run and convert these templates into actual

226
00:15:53,560 --> 00:15:57,186
resources. For one thing, again, resources in

227
00:15:57,208 --> 00:16:00,670
the cloud would probably have IAC roles attached

228
00:16:00,750 --> 00:16:04,962
to these. So when running resources and

229
00:16:05,016 --> 00:16:08,130
running templates inside these resources,

230
00:16:08,790 --> 00:16:12,182
there's going to be an IAC role which is checked first

231
00:16:12,236 --> 00:16:15,654
before specific actions can be performed. So if that

232
00:16:15,692 --> 00:16:19,130
IAC rule has super admin permissions, then the problem

233
00:16:19,200 --> 00:16:22,666
there is if there's a script or

234
00:16:22,688 --> 00:16:27,030
a payload injected included in the template

235
00:16:27,190 --> 00:16:31,246
when the template runs, and then when that specific

236
00:16:31,348 --> 00:16:34,446
set of scripts get executed, then it

237
00:16:34,468 --> 00:16:38,362
could be possible for something malicious to be executed

238
00:16:38,506 --> 00:16:41,934
inside the pipeline environment itself. So very

239
00:16:41,972 --> 00:16:46,082
scary because a lot of teams prioritize the

240
00:16:46,136 --> 00:16:50,222
production systems and basically the web applications

241
00:16:50,366 --> 00:16:52,260
and the resources there.

242
00:16:53,590 --> 00:16:56,818
When it comes to securing production environments,

243
00:16:56,914 --> 00:17:00,262
however, the weak link could be any

244
00:17:00,316 --> 00:17:03,874
existing pipelines which are used by the development

245
00:17:03,922 --> 00:17:07,438
teams. So again, make sure that everything deployed

246
00:17:07,474 --> 00:17:10,570
in your environment is properly secured.

247
00:17:10,990 --> 00:17:15,526
Next, it's important to protect specific resources from accidental

248
00:17:15,558 --> 00:17:18,634
deletion or modification. So a lot of us

249
00:17:18,672 --> 00:17:22,382
just think of IAC as a simple process where

250
00:17:22,436 --> 00:17:25,578
we write code and then resources are created.

251
00:17:25,674 --> 00:17:29,854
However, IAC involves modification and deletion as well.

252
00:17:29,972 --> 00:17:33,346
So what if you created databases using

253
00:17:33,448 --> 00:17:36,420
IAC code? So here,

254
00:17:37,110 --> 00:17:40,622
what if suddenly somebody deletes

255
00:17:40,766 --> 00:17:43,486
the resources using an IAC solution?

256
00:17:43,678 --> 00:17:47,326
Then your production databases could be deleted automatically

257
00:17:47,358 --> 00:17:51,822
as well. So make sure you know the proper configuration

258
00:17:51,886 --> 00:17:55,586
parameters to ensure that certain resources in

259
00:17:55,608 --> 00:17:59,914
your infrastructure are not modified or deleted by

260
00:17:59,952 --> 00:18:04,006
default when using IAC solutions. So that's

261
00:18:04,038 --> 00:18:07,498
pretty much it. Today we learned a

262
00:18:07,504 --> 00:18:11,322
lot of things and we're able to learn how

263
00:18:11,376 --> 00:18:15,930
to secure resources and systems built

264
00:18:16,000 --> 00:18:19,514
using IAC tools. Thank you so much and

265
00:18:19,552 --> 00:18:20,440
have a great day ahead.

