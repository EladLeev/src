1
00:00:27,090 --> 00:00:30,502
Now let's see how we can secure our

2
00:00:30,556 --> 00:00:33,814
DevOps agent. And before that we also

3
00:00:33,852 --> 00:00:37,510
need to know why we need to secure the DevOps agent.

4
00:00:37,660 --> 00:00:40,966
What issue might happen if I didn't do

5
00:00:40,988 --> 00:00:45,030
it. So my team inside of Microsoft, we are doing

6
00:00:45,100 --> 00:00:48,594
a lot of code with engagement with a strategic

7
00:00:48,642 --> 00:00:52,654
customer or big customer to help launch their solution on

8
00:00:52,772 --> 00:00:56,750
our cloud. So as a program

9
00:00:56,820 --> 00:01:00,810
manager of the projects, it's my biggest goal

10
00:01:00,890 --> 00:01:04,882
to ensure that all the project could be delivered on time with

11
00:01:04,936 --> 00:01:08,622
high quality. And that's where the understanding

12
00:01:08,686 --> 00:01:11,634
of the time spent on security, design,

13
00:01:11,832 --> 00:01:15,460
implementation and plan comes in.

14
00:01:15,930 --> 00:01:19,442
And here all my securing and artifacts

15
00:01:19,506 --> 00:01:23,494
and learning here are coming from my teammates and

16
00:01:23,532 --> 00:01:27,110
myself from a previous customer engagement.

17
00:01:28,910 --> 00:01:32,300
So what happened inside of that project?

18
00:01:33,630 --> 00:01:37,210
Well in that customer project we are using

19
00:01:37,280 --> 00:01:40,918
the Azure DevOps or the ADO

20
00:01:41,094 --> 00:01:47,302
to orchestrate the automatic developing

21
00:01:47,366 --> 00:01:51,166
and the deployment or CI CD. So this

22
00:01:51,188 --> 00:01:54,382
is a quite common practice and AdO is widely used

23
00:01:54,436 --> 00:01:56,080
by a lot of our customer.

24
00:01:57,110 --> 00:02:01,214
And here we were using Microsoft hosted

25
00:02:01,262 --> 00:02:05,162
agent which is running in the Microsoft

26
00:02:05,246 --> 00:02:09,126
public network and at the same time

27
00:02:09,308 --> 00:02:13,014
all the customer resources are located inside of

28
00:02:13,052 --> 00:02:17,510
their virtual network or VNet which is under protection.

29
00:02:17,930 --> 00:02:21,306
So they're using Azure web application in

30
00:02:21,328 --> 00:02:25,226
the front to ingest and

31
00:02:25,328 --> 00:02:29,050
accept all the requires from the Internet users

32
00:02:29,950 --> 00:02:33,002
and then rock this bike to the VNEt

33
00:02:33,066 --> 00:02:37,310
resources to get responsible to their end user request.

34
00:02:38,370 --> 00:02:41,838
And at the same time they do have

35
00:02:41,924 --> 00:02:46,094
an access control to the web application's ICM

36
00:02:46,142 --> 00:02:49,954
site. For the people who may not

37
00:02:49,992 --> 00:02:53,454
aware of an SCM site, well it's

38
00:02:53,502 --> 00:02:57,334
actually the engine behind any

39
00:02:57,452 --> 00:03:00,230
Azure web application for deployment.

40
00:03:00,570 --> 00:03:04,914
So that means if you want to deploy

41
00:03:05,042 --> 00:03:08,840
any upgrade version or new version to the web application,

42
00:03:09,770 --> 00:03:14,014
you need to deploy that first to the SCM

43
00:03:14,082 --> 00:03:17,834
site of the web application and then make

44
00:03:17,872 --> 00:03:21,562
the upgrade to the app. So you can imagine

45
00:03:21,706 --> 00:03:25,770
it's quite crucial to protect and make it secure

46
00:03:25,930 --> 00:03:28,800
for the access to the SCM site.

47
00:03:29,490 --> 00:03:32,320
And this is the same for our customer.

48
00:03:32,630 --> 00:03:36,014
So they do set a restriction to the SCM

49
00:03:36,062 --> 00:03:40,130
site of their web application that only the sites

50
00:03:40,470 --> 00:03:44,558
from requests from their virtual network are allowed

51
00:03:44,654 --> 00:03:47,160
to access to that SCM site.

52
00:03:48,010 --> 00:03:51,958
However, our Microsoft hosted agent

53
00:03:52,124 --> 00:03:57,670
which is running all the pipelines for the automation orchestration

54
00:03:58,750 --> 00:04:02,474
is located in the public network and this is

55
00:04:02,512 --> 00:04:05,660
per design. We couldn't change it.

56
00:04:06,990 --> 00:04:08,940
So how can we solve this problem?

57
00:04:10,450 --> 00:04:14,670
Before that, you may have a question in your mind why

58
00:04:14,740 --> 00:04:18,318
you are using Microsoft hosted agent which is running

59
00:04:18,484 --> 00:04:21,550
on the public network and caused this challenge.

60
00:04:22,290 --> 00:04:25,780
Well the reason is it's so easy,

61
00:04:27,030 --> 00:04:30,846
it's so easy to start because the Microsoft Healthset

62
00:04:30,878 --> 00:04:34,658
agent provides so many virtual machine images that you can choose.

63
00:04:34,824 --> 00:04:38,022
So you don't need to worry about how to build the different

64
00:04:38,076 --> 00:04:41,602
images from the starting but can quickly start your deployment

65
00:04:41,666 --> 00:04:46,006
and developing work. And also a

66
00:04:46,028 --> 00:04:49,894
lot of the Microsoft hosted agent images have their

67
00:04:49,932 --> 00:04:53,542
purview tools and runtime dependencies libraries

68
00:04:53,686 --> 00:04:57,526
that you don't need to worry about these tools

69
00:04:57,558 --> 00:05:01,322
and installation, that you can focus on your own pipeline

70
00:05:01,386 --> 00:05:04,270
and build the orchestrations.

71
00:05:04,610 --> 00:05:08,634
And what's more, the Microsoft health state agent is managed

72
00:05:08,682 --> 00:05:12,554
service on Azure. So that means it's totally and

73
00:05:12,612 --> 00:05:16,494
fully maintained and also kept by Microsoft the Defender

74
00:05:16,542 --> 00:05:21,474
systems and also the security

75
00:05:21,672 --> 00:05:25,186
mechanism and also keep upgrading and

76
00:05:25,288 --> 00:05:29,346
also updating software by Microsoft so you don't

77
00:05:29,378 --> 00:05:32,630
need to worry about all the maintenance that makes

78
00:05:32,700 --> 00:05:36,198
everything easier in your project so you can save a

79
00:05:36,204 --> 00:05:39,180
lot of time and efforts to start your work.

80
00:05:40,430 --> 00:05:44,006
So we chose Microsoft hosted agent with reasons,

81
00:05:44,118 --> 00:05:48,554
but we also encountered the challenge that this agent

82
00:05:48,752 --> 00:05:52,174
is not able to deploying any services

83
00:05:52,292 --> 00:05:56,126
to the SDM site of the web application based on

84
00:05:56,148 --> 00:05:59,774
customer security rules. So we came

85
00:05:59,812 --> 00:06:02,866
out with our first solution which tend to be

86
00:06:02,888 --> 00:06:04,900
a very easy one.

87
00:06:05,670 --> 00:06:09,262
So we know that every Microsoft

88
00:06:09,326 --> 00:06:12,706
health agent one is running it will be allocated an

89
00:06:12,728 --> 00:06:16,822
IP address. If we add whats IP address

90
00:06:16,956 --> 00:06:20,760
in the runtime to the allow list of the web application

91
00:06:21,130 --> 00:06:25,798
in its access control configuration then

92
00:06:25,964 --> 00:06:29,974
we can temporarily get the passport to the SCM

93
00:06:30,022 --> 00:06:34,070
site and then make our deployment. After the deployment

94
00:06:34,150 --> 00:06:37,370
we can remove the IP address from the allow list.

95
00:06:37,520 --> 00:06:41,534
So whats the SCM site will be projects from

96
00:06:41,572 --> 00:06:45,870
then on. We only need that window of time of allowance.

97
00:06:47,810 --> 00:06:51,440
So you may ask, did this work?

98
00:06:52,050 --> 00:06:56,222
Yes it did, but something unexpected

99
00:06:56,286 --> 00:06:59,220
happened during the middle of the project.

100
00:07:00,470 --> 00:07:04,094
So we are in the middle phase of the engagement

101
00:07:04,222 --> 00:07:07,510
and I received another urgent call from our customer project

102
00:07:07,580 --> 00:07:11,190
manager. He told me that his company

103
00:07:11,260 --> 00:07:15,446
security team risked a high severity ticket to our project

104
00:07:15,628 --> 00:07:19,386
and said they detected the web application that

105
00:07:19,408 --> 00:07:23,642
we're running is

106
00:07:23,696 --> 00:07:27,642
temporarily using allow policy that

107
00:07:27,776 --> 00:07:31,546
accessed from

108
00:07:31,568 --> 00:07:34,510
an IP address that's coming from the public network.

109
00:07:35,410 --> 00:07:39,082
Even this is added temporarily, but it's

110
00:07:39,146 --> 00:07:43,278
regarded as a big security leakage from their security

111
00:07:43,364 --> 00:07:46,594
policy and this option operation needs to be

112
00:07:46,632 --> 00:07:50,100
abandoned and stopped immediately and never tapped in again.

113
00:07:51,750 --> 00:07:53,490
Well I was shocked.

114
00:07:55,290 --> 00:07:58,822
The CI CD pipeline is

115
00:07:58,876 --> 00:08:01,910
running all the time and our team,

116
00:08:01,980 --> 00:08:05,538
my team is doing the automation of the deployment

117
00:08:05,634 --> 00:08:09,530
using the Microsoft hosted agent and this pipelines to

118
00:08:09,680 --> 00:08:12,300
make our upgrade all the time.

119
00:08:13,230 --> 00:08:17,334
If the allow list is forbidden, that means we cannot make any further

120
00:08:17,382 --> 00:08:20,926
deployment to the web application and our homework will

121
00:08:20,948 --> 00:08:23,390
be stopped and suspended.

122
00:08:24,690 --> 00:08:28,126
But we are so critical phase of this project and

123
00:08:28,148 --> 00:08:31,534
we cannot afford any delay. How can I

124
00:08:31,572 --> 00:08:35,170
do? Well, I gave the customer team

125
00:08:35,240 --> 00:08:38,306
a quick call, security team a quick call and try

126
00:08:38,328 --> 00:08:42,386
to understand the rhythm. It turned out that the

127
00:08:42,408 --> 00:08:46,182
security team had regular scan of

128
00:08:46,236 --> 00:08:50,630
all the services running on their cloud network

129
00:08:51,530 --> 00:08:55,926
and they figure out this security leakage as

130
00:08:56,028 --> 00:08:59,594
they mentioned before. And I explained to

131
00:08:59,632 --> 00:09:03,402
them that you see, the allow list

132
00:09:03,536 --> 00:09:06,902
was added only temporarily during the deployment window,

133
00:09:06,966 --> 00:09:10,958
and after the deployment it will be relieved and

134
00:09:11,044 --> 00:09:14,426
it's only for the testing and our developing purpose.

135
00:09:14,618 --> 00:09:18,334
And also the Microsoft health state agent is maintained and backed up

136
00:09:18,372 --> 00:09:23,062
and supported by all the Microsoft security tools

137
00:09:23,226 --> 00:09:26,322
and policies, et cetera that you don't need to worry about

138
00:09:26,376 --> 00:09:29,698
it. But the customer security

139
00:09:29,784 --> 00:09:34,482
team was also very strong. They said that even

140
00:09:34,536 --> 00:09:38,782
we are using this temporarily for the deployment

141
00:09:38,846 --> 00:09:42,486
window, but think the Microsoft hosted agent is

142
00:09:42,508 --> 00:09:45,814
running in the public network. No one

143
00:09:45,852 --> 00:09:49,446
can guarantee that it won't be attacked by a hacker

144
00:09:49,558 --> 00:09:53,034
during that deployment window. And in

145
00:09:53,072 --> 00:09:57,414
whats case it means their network or their enterprise

146
00:09:57,542 --> 00:10:01,230
network will be at security risk

147
00:10:01,730 --> 00:10:05,482
at that moment and that will not be allowed

148
00:10:05,626 --> 00:10:08,000
from their zero trusted policy.

149
00:10:10,210 --> 00:10:13,406
Well, I know this is something that I cannot further

150
00:10:13,438 --> 00:10:16,962
negotiate. What I was going to do is immediately find

151
00:10:17,016 --> 00:10:20,402
a workaround or a solution to solve this issue as soon

152
00:10:20,456 --> 00:10:24,222
as possible. So I immediately

153
00:10:24,286 --> 00:10:27,926
held the urgent meeting discussion with our engineer team and

154
00:10:27,948 --> 00:10:32,390
we came out with another solution. It's also straightforward.

155
00:10:33,770 --> 00:10:37,462
So instead of using the Microsoft hosted agent which can

156
00:10:37,516 --> 00:10:41,142
only be running in the public network, we'll be using

157
00:10:41,276 --> 00:10:44,886
a self hosted agent pool or a virtual

158
00:10:44,918 --> 00:10:48,570
machine skill site which is built by ourselves

159
00:10:48,910 --> 00:10:52,794
which will be running inside of the same virtual network

160
00:10:52,922 --> 00:10:56,720
as customer the other resources. In that case

161
00:10:57,250 --> 00:11:00,378
it will be in the allow list and will be permitted

162
00:11:00,474 --> 00:11:03,726
to make the deployment to the SDM site of

163
00:11:03,748 --> 00:11:05,870
the web application by default.

164
00:11:08,050 --> 00:11:11,730
But the self hosted agent needs

165
00:11:11,800 --> 00:11:14,500
all of our effort, starting from the zero,

166
00:11:15,030 --> 00:11:18,178
building the customized image by ourselves

167
00:11:18,354 --> 00:11:22,274
and also install the tools and dependencies and running time and elaborates

168
00:11:22,322 --> 00:11:25,894
all these things by ourselves. And we need to run

169
00:11:25,932 --> 00:11:29,370
it and test it to ensure it works. And the worst thing

170
00:11:29,440 --> 00:11:33,482
is sometimes you don't know what is missing, what library is

171
00:11:33,536 --> 00:11:37,034
missing and what tools needs to be installed until

172
00:11:37,152 --> 00:11:40,846
the pipeline failed on the

173
00:11:40,868 --> 00:11:44,510
agent. And it will be very time consuming.

174
00:11:45,010 --> 00:11:48,590
But do we have other choice? Not likely.

175
00:11:49,730 --> 00:11:52,786
And then in the next week it's a

176
00:11:52,808 --> 00:11:56,546
very critical phase of our project. We divided the

177
00:11:56,568 --> 00:11:59,730
project into two one is doing the

178
00:11:59,800 --> 00:12:03,570
continuing development in our own subscription

179
00:12:04,870 --> 00:12:08,706
so that we won't be lagging too much of the progress.

180
00:12:08,818 --> 00:12:12,802
At the same time, the other team is building the self hosted

181
00:12:12,946 --> 00:12:16,706
agent by ourselves and doing all the testing

182
00:12:16,898 --> 00:12:20,040
to ensure that the pipelines works without issue.

183
00:12:20,650 --> 00:12:24,794
So there were a lot of back end for as

184
00:12:24,832 --> 00:12:28,570
I mentioned, you don't know what is missing and what is wrong until

185
00:12:28,640 --> 00:12:32,446
the pipeline failed on the newly built agent and the

186
00:12:32,468 --> 00:12:35,120
troubleshooting really took time.

187
00:12:36,050 --> 00:12:40,222
It was a painful journey. But after

188
00:12:40,276 --> 00:12:44,402
one week we finally had a stable agent that

189
00:12:44,456 --> 00:12:48,194
all of our CSD pipeline could run successfully on that

190
00:12:48,392 --> 00:12:51,986
agent without any issue. And then

191
00:12:52,008 --> 00:12:55,382
we immediately move all of our work

192
00:12:55,436 --> 00:12:59,746
onto this newly built agent and started orchestrate

193
00:12:59,778 --> 00:13:03,522
our pipelines from here and make the continuous deployment

194
00:13:03,666 --> 00:13:07,586
to the SEM side of the application and

195
00:13:07,628 --> 00:13:09,740
that resumed all of our work.

196
00:13:10,670 --> 00:13:14,234
Luckily it didn't cast a big impact to

197
00:13:14,272 --> 00:13:18,650
our project and we finally meet our timeline.

198
00:13:19,150 --> 00:13:21,070
So and good ending.

199
00:13:23,170 --> 00:13:27,550
In order to illustrate this procedure I did

200
00:13:27,620 --> 00:13:31,246
a workout, a demo beforehand and also made a

201
00:13:31,268 --> 00:13:34,514
recording of that procedure. So now let me

202
00:13:34,552 --> 00:13:38,034
play the video and also explain the

203
00:13:38,072 --> 00:13:41,634
procedure step by step at the same time. So this is a very

204
00:13:41,672 --> 00:13:45,074
simple application I made. When I

205
00:13:45,112 --> 00:13:48,466
type in my name it will send back the

206
00:13:48,488 --> 00:13:49,640
grating to me.

207
00:13:52,330 --> 00:13:56,486
So as I introduced, I used the

208
00:13:56,668 --> 00:13:59,740
access control to protect my application.

209
00:14:01,150 --> 00:14:05,020
So if you look at here, this is my web application.

210
00:14:05,870 --> 00:14:09,740
So inside of the network settings there is

211
00:14:10,050 --> 00:14:12,430
access control policy settings.

212
00:14:13,970 --> 00:14:17,534
All right, so this is the detailed securing. If you look

213
00:14:17,572 --> 00:14:21,038
at here, there are two pros. One is about

214
00:14:21,124 --> 00:14:24,738
the main site. So this is about the

215
00:14:24,824 --> 00:14:30,462
access control of the Internet

216
00:14:30,526 --> 00:14:34,434
request to this application. So by

217
00:14:34,472 --> 00:14:37,670
default is allowed all the request from the Internet.

218
00:14:39,050 --> 00:14:42,322
And on the other hand there is advanced

219
00:14:42,386 --> 00:14:46,006
two set. So for this part

220
00:14:46,108 --> 00:14:49,546
as planned before, this is about

221
00:14:49,568 --> 00:14:53,850
the definition on the access to the SCM set or

222
00:14:53,920 --> 00:14:57,734
is about which request will be allowed

223
00:14:57,782 --> 00:15:01,360
for deployment on the web application.

224
00:15:01,890 --> 00:15:06,954
So by default for all the unmatched

225
00:15:07,002 --> 00:15:10,622
rule, it will be denied the access and

226
00:15:10,676 --> 00:15:14,274
only the access from the VNet will be allowed to

227
00:15:14,312 --> 00:15:17,460
access to the SCM side of the web application.

228
00:15:17,910 --> 00:15:21,582
So let's see how my pipeline

229
00:15:21,646 --> 00:15:23,380
will be working.

230
00:15:27,030 --> 00:15:30,950
And now this is my CRCD pipelines.

231
00:15:31,370 --> 00:15:35,078
This is the Yaml file I wrote to run my

232
00:15:35,244 --> 00:15:38,938
automatic deploying here I'm using

233
00:15:39,024 --> 00:15:42,794
the Microsoft hosted agent which is

234
00:15:42,912 --> 00:15:44,570
configured by default.

235
00:15:47,950 --> 00:15:51,702
So let's see how the pipeline running result

236
00:15:51,776 --> 00:15:52,480
will be.

237
00:16:00,100 --> 00:16:02,370
All right, so here is the result.

238
00:16:02,900 --> 00:16:04,480
If I look further,

239
00:16:05,940 --> 00:16:10,000
you see the failure reason is IP forbidden

240
00:16:10,820 --> 00:16:14,850
and the URL trying to access

241
00:16:15,460 --> 00:16:19,236
the ACM site of the azure web application.

242
00:16:19,418 --> 00:16:24,664
So as I explained, because the

243
00:16:24,702 --> 00:16:28,836
SCM site only allows the request from the virtual

244
00:16:28,868 --> 00:16:32,824
network. So the IP address

245
00:16:32,942 --> 00:16:36,364
which is running on a Microsoft hosted agent in

246
00:16:36,402 --> 00:16:40,540
a public network doesn't allow to make the deploying.

247
00:16:41,440 --> 00:16:45,372
So let's see how I go on with

248
00:16:45,426 --> 00:16:48,944
my first resolution which is add

249
00:16:48,982 --> 00:16:52,880
the IP address to the access

250
00:16:52,950 --> 00:16:55,810
control list of the web application.

251
00:17:02,080 --> 00:17:05,536
So here in the same place

252
00:17:05,638 --> 00:17:08,610
of the advanced two site of the web application,

253
00:17:08,980 --> 00:17:12,800
I started to add a new rule to

254
00:17:12,870 --> 00:17:17,312
allow the IP address which is running on my Microsoft

255
00:17:17,376 --> 00:17:20,740
hosted agent that I detected beforehand.

256
00:17:21,400 --> 00:17:24,576
So here I know the IP

257
00:17:24,608 --> 00:17:26,870
address which is running on the agent.

258
00:17:27,320 --> 00:17:31,352
So I directly added this IP address

259
00:17:31,486 --> 00:17:34,840
to the rule list.

260
00:17:34,990 --> 00:17:38,200
So here you see I entered all the settings,

261
00:17:43,220 --> 00:17:44,800
I added this rule.

262
00:17:47,840 --> 00:17:51,448
Now let's see how I rerun the field pipeline.

263
00:17:51,624 --> 00:17:55,550
Okay I made the deployment again to the web application.

264
00:18:05,270 --> 00:18:08,910
All right we see whats the pipeline running is successful,

265
00:18:08,990 --> 00:18:12,340
so the deploying is successful as well.

266
00:18:14,390 --> 00:18:18,354
Just a tip because in reality it's

267
00:18:18,402 --> 00:18:22,614
not feasible to add the IP address in

268
00:18:22,652 --> 00:18:25,830
a static way. So in practical

269
00:18:27,210 --> 00:18:31,260
I used a Powershell script like this.

270
00:18:33,950 --> 00:18:37,738
Instead I'm using this script to fetch the running

271
00:18:37,824 --> 00:18:41,806
ip of my Microsoft hosted agent and

272
00:18:41,828 --> 00:18:45,742
then I add this rule directly using

273
00:18:45,796 --> 00:18:49,374
this Powershell script as well. So it

274
00:18:49,412 --> 00:18:52,926
will be much easier. And after running the

275
00:18:53,028 --> 00:18:56,622
deployment this IP address will be removed

276
00:18:56,686 --> 00:19:00,660
from the access restriction rule of the web application.

277
00:19:01,190 --> 00:19:05,010
So this is just one small tip which are running

278
00:19:05,160 --> 00:19:09,478
this in the reality. But as you know this

279
00:19:09,564 --> 00:19:13,814
solution anyway is forbidden by the customer so I

280
00:19:13,852 --> 00:19:17,266
won't use this solution and now I will remove this ip

281
00:19:17,298 --> 00:19:20,346
address from the allow list again.

282
00:19:20,528 --> 00:19:23,894
Now let's see how I move on with the second solution.

283
00:19:24,022 --> 00:19:27,494
Whats I started to build my self hosted

284
00:19:27,542 --> 00:19:30,970
agent from creating the image.

285
00:19:39,030 --> 00:19:42,434
All right, so now you can see here, this is the

286
00:19:42,472 --> 00:19:46,034
image I created, a customization image to

287
00:19:46,072 --> 00:19:50,478
satisfy my running pipeline request. So here,

288
00:19:50,584 --> 00:19:53,814
this is the image I created. It's a quite large one,

289
00:19:53,852 --> 00:19:56,886
about 8gb, and this is

290
00:19:56,908 --> 00:20:00,470
the JSOn file to describe this image.

291
00:20:02,990 --> 00:20:06,774
So you can find a lot of documents and guidance

292
00:20:06,902 --> 00:20:10,106
and tell you how to create your

293
00:20:10,208 --> 00:20:13,402
own customized image. What I recommend is this

294
00:20:13,456 --> 00:20:17,302
GitHub which I found is very helpful.

295
00:20:17,446 --> 00:20:21,774
It provides detailed step by step guidance and instructions to

296
00:20:21,812 --> 00:20:25,182
create your customization image. I follow this and

297
00:20:25,236 --> 00:20:28,490
successfully created my own image like this.

298
00:20:28,660 --> 00:20:31,460
So I recommended use to this as well.

299
00:20:32,150 --> 00:20:35,522
And next, what I'm going to do is to use this

300
00:20:35,656 --> 00:20:39,522
created image to build my virtual machine or

301
00:20:39,576 --> 00:20:43,018
virtual machine skill site. But before that there's

302
00:20:43,054 --> 00:20:46,790
a very critical step that in order to

303
00:20:46,860 --> 00:20:50,326
build this virtual machine on Azure I need

304
00:20:50,348 --> 00:20:53,930
to publish the created image to Azure.

305
00:20:54,430 --> 00:20:58,762
So that means I need to publish this

306
00:20:58,816 --> 00:21:02,380
to a place. So where is the place?

307
00:21:09,230 --> 00:21:13,294
Here it is. So this is the self hosted agent

308
00:21:13,492 --> 00:21:17,246
gallery. You can imagine the agent

309
00:21:17,348 --> 00:21:21,882
gallery is like the replace.

310
00:21:21,946 --> 00:21:25,410
So the agent gallery is the place host your image.

311
00:21:25,750 --> 00:21:29,890
This is the image I just published to this agent

312
00:21:29,960 --> 00:21:34,322
gallery. And what I can do is

313
00:21:34,456 --> 00:21:37,986
to use the published image to create a virtual machine

314
00:21:38,098 --> 00:21:41,654
or create a virtual machine skill site. And what

315
00:21:41,692 --> 00:21:45,346
I'm going to do is to use this image to create my virtual machine

316
00:21:45,378 --> 00:21:49,202
skill site. A virtual machine skill site is a pool

317
00:21:49,346 --> 00:21:52,854
with a flexible number of virtual

318
00:21:52,902 --> 00:21:56,042
machine as you defined, so that it could

319
00:21:56,176 --> 00:21:59,434
provide the convenience and the flexibility to

320
00:21:59,472 --> 00:22:03,194
scale in or scale out of your virtual

321
00:22:03,242 --> 00:22:06,830
machines based on the workload on the running pipeline.

322
00:22:11,170 --> 00:22:15,130
All right, so this is the virtual machine skill site I created.

323
00:22:15,290 --> 00:22:19,186
If you look at here virtual machine skill site and

324
00:22:19,288 --> 00:22:22,926
the image I have been used is the one adjuster

325
00:22:22,958 --> 00:22:26,306
published in the agent gallery. And if we

326
00:22:26,328 --> 00:22:29,366
look at the settings here, it's within the

327
00:22:29,388 --> 00:22:33,014
same virtual network which is in the allow list of

328
00:22:33,052 --> 00:22:36,790
the web applications SEM site configuration.

329
00:22:39,370 --> 00:22:43,450
So with this settings, I'm now going to

330
00:22:43,600 --> 00:22:47,066
move back to my Azure DevOps. What I'm going to

331
00:22:47,088 --> 00:22:50,150
do is to create a new agent pool.

332
00:22:50,230 --> 00:22:53,470
Instead of using the by default Microsoft agent,

333
00:22:53,620 --> 00:22:57,422
I'm going to create a new agent pool and link that

334
00:22:57,556 --> 00:23:00,990
to the virtual machine skill site I just created.

335
00:23:01,330 --> 00:23:05,338
So inside of Azure DevOps organization

336
00:23:05,434 --> 00:23:09,502
and project settings, there's menu

337
00:23:09,566 --> 00:23:13,726
in the left hand called Agent Pool.

338
00:23:13,838 --> 00:23:17,442
So start from here, you can configure your

339
00:23:17,496 --> 00:23:20,834
existing agent Pool or add a new agent pool

340
00:23:20,882 --> 00:23:24,214
as I'm going to describe. So what I'm going to do is

341
00:23:24,252 --> 00:23:27,414
add a new agent pool. So now here you

342
00:23:27,452 --> 00:23:31,670
see I'm going to select my subscription and then

343
00:23:31,820 --> 00:23:35,926
link to this new created agent pool to the virtual machine

344
00:23:35,958 --> 00:23:38,250
skill site I just created.

345
00:23:42,920 --> 00:23:46,456
Now I select the virtual machine I created. That means I

346
00:23:46,478 --> 00:23:49,876
will bind this new agent pool to this virtual

347
00:23:49,908 --> 00:23:53,608
machine skill site. I name it Ado Pool. And with

348
00:23:53,694 --> 00:23:57,496
the other settings done. All right, so you

349
00:23:57,518 --> 00:24:00,836
will see there will be a new pool

350
00:24:00,868 --> 00:24:04,030
called Ado Poor. Let's click on it.

351
00:24:05,360 --> 00:24:08,716
If we look at the agents, agents will listed all

352
00:24:08,738 --> 00:24:12,012
the virtual machines which is in the running

353
00:24:12,146 --> 00:24:15,488
status, but right now there's no agent.

354
00:24:15,654 --> 00:24:18,860
Why? Because the virtual machine I created

355
00:24:18,940 --> 00:24:22,304
in the virtual machine skill site has not yet been

356
00:24:22,342 --> 00:24:25,764
in running status at that moment. So I moved back to

357
00:24:25,802 --> 00:24:29,376
my virtual machine skill site and check all the virtual

358
00:24:29,408 --> 00:24:33,328
machine status and ensure that they're in running status.

359
00:24:33,424 --> 00:24:37,128
So that means my ado pool is ready

360
00:24:37,214 --> 00:24:38,090
to use.

361
00:24:46,540 --> 00:24:49,844
Okay, now I move back to my ado pool

362
00:24:49,972 --> 00:24:53,050
and check the agent status again.

363
00:24:54,620 --> 00:24:55,930
Yeah, let's see.

364
00:24:58,060 --> 00:25:01,532
The two virtual machine listed under the agent pool are

365
00:25:01,586 --> 00:25:04,936
exactly the one you just saw from the virtual machine

366
00:25:04,968 --> 00:25:08,384
skill site which are in running status. Why these

367
00:25:08,422 --> 00:25:11,724
two agents are in idle status because there's no pipeline

368
00:25:11,772 --> 00:25:14,290
running so there's no job on them.

369
00:25:16,260 --> 00:25:20,124
But this is a very good signal. Means our ado pool is

370
00:25:20,182 --> 00:25:23,604
ready to work and our pipeline is ready to

371
00:25:23,642 --> 00:25:26,932
rerun again. Let's see how the result

372
00:25:26,986 --> 00:25:30,900
will be and before run

373
00:25:30,970 --> 00:25:33,308
the pipelines.

374
00:25:33,504 --> 00:25:37,304
Remember now what we are going to make

375
00:25:37,342 --> 00:25:41,224
the deployment or the new agent is

376
00:25:41,342 --> 00:25:45,088
taking this work is not the default settings

377
00:25:45,204 --> 00:25:48,856
we need to change it. So in the yaml file

378
00:25:48,968 --> 00:25:53,036
look at the deployment job description and in the

379
00:25:53,058 --> 00:25:56,716
pool settings change the name of

380
00:25:56,738 --> 00:26:00,352
the pool from the by default Microsoft Health state

381
00:26:00,406 --> 00:26:03,360
agent to the new one I just created.

382
00:26:05,220 --> 00:26:09,440
Okay, so this is very important and then let's

383
00:26:10,920 --> 00:26:12,580
rerun the pipeline.

384
00:26:15,000 --> 00:26:18,800
All right, now you see the result. The deploying

385
00:26:18,880 --> 00:26:22,980
to the Azure web application has finished and successfully.

386
00:26:23,820 --> 00:26:27,352
Okay, so make a ramp up of the procedures of

387
00:26:27,406 --> 00:26:31,050
my demo. So I created a web application

388
00:26:31,420 --> 00:26:34,976
and also I make the configuration

389
00:26:35,028 --> 00:26:39,310
of the access rule that only the access

390
00:26:39,680 --> 00:26:44,008
or the deployment request from the VNET will be allowed

391
00:26:44,184 --> 00:26:46,750
to the SDM site of the web application.

392
00:26:47,360 --> 00:26:50,544
In order to meet that requirement I started to

393
00:26:50,582 --> 00:26:54,332
build myself customization image and publish

394
00:26:54,396 --> 00:26:59,692
that to the Azure

395
00:26:59,756 --> 00:27:03,540
Agent gallery as a published image. And starting

396
00:27:03,610 --> 00:27:07,252
from there I create a virtual machine skill site

397
00:27:07,386 --> 00:27:11,296
using that customized image. And then I created

398
00:27:11,408 --> 00:27:15,540
Ado poor inside of my project and

399
00:27:15,610 --> 00:27:18,904
linked my ado poor with the virtual machine skill site

400
00:27:18,942 --> 00:27:23,288
I created so that I can use the virtual machine running

401
00:27:23,374 --> 00:27:27,896
inside of the virtual network with my customer image.

402
00:27:28,088 --> 00:27:32,072
Then I updated

403
00:27:32,136 --> 00:27:36,344
my pipelines and used this newly

404
00:27:36,392 --> 00:27:40,320
created agent as my agent pool and

405
00:27:40,390 --> 00:27:43,792
redeploy my application and everything works.

406
00:27:43,846 --> 00:27:56,334
Now the

407
00:27:56,372 --> 00:28:00,930
last part is about my takeaway from my whole engagement.

408
00:28:01,270 --> 00:28:04,674
So the first thing is the security

409
00:28:04,792 --> 00:28:08,162
thing is never the last thing, but always the first thing

410
00:28:08,216 --> 00:28:10,580
we should consider in any project.

411
00:28:12,150 --> 00:28:15,874
The reason is because cloud security is definitely a shared

412
00:28:15,922 --> 00:28:19,686
responsibility. So we definitely

413
00:28:19,868 --> 00:28:22,946
need to work closely if we're working with a customer,

414
00:28:23,068 --> 00:28:27,130
a big enterprise team, we need to work with their

415
00:28:27,200 --> 00:28:30,650
security team or expert to understand

416
00:28:30,800 --> 00:28:34,762
and define the requirements from their side because

417
00:28:34,816 --> 00:28:38,302
every organization may have specific request and you can

418
00:28:38,356 --> 00:28:41,920
imagine how busy this type of team will be.

419
00:28:42,290 --> 00:28:46,254
Lucky in our case. So try to make the conversation and

420
00:28:46,292 --> 00:28:49,970
dialogue with them as early as possible to avoid any

421
00:28:50,040 --> 00:28:53,982
unexpected issues or risk

422
00:28:54,046 --> 00:28:57,330
or violations in the

423
00:28:57,400 --> 00:29:01,560
later part of a project to give you a big shock and

424
00:29:02,250 --> 00:29:05,654
last but not least the thing here you can see that

425
00:29:05,692 --> 00:29:09,634
just from my demo. Building a self hosted

426
00:29:09,682 --> 00:29:12,974
agent is definitely more complicated than using the Microsoft

427
00:29:13,042 --> 00:29:17,226
hosted one and also consider the security

428
00:29:17,328 --> 00:29:20,550
and other security factors

429
00:29:20,630 --> 00:29:24,586
into our design or implementation will

430
00:29:24,688 --> 00:29:28,010
add more complexities and even more challenges.

431
00:29:28,170 --> 00:29:31,754
But thinking about in the Hong Bu we can avoid

432
00:29:31,802 --> 00:29:36,110
big asset because everything is protected, everything is secured.

433
00:29:36,530 --> 00:29:40,846
It may take extra effort, it may give you some inconveniences

434
00:29:40,958 --> 00:29:45,006
but it will ensure that the customer project will be successful

435
00:29:45,118 --> 00:29:48,770
that all your resources and your asset will be also

436
00:29:48,840 --> 00:29:51,998
protected so that will avoid

437
00:29:52,094 --> 00:29:55,886
big asset loss in the long run. No pains

438
00:29:55,998 --> 00:29:59,426
no gains so we pay the effort to build a

439
00:29:59,448 --> 00:30:03,386
security workload to build security network and then

440
00:30:03,408 --> 00:30:08,234
in the long run we get the successful project so

441
00:30:08,272 --> 00:30:12,102
all the pains pay and that's all my sharing

442
00:30:12,166 --> 00:30:15,914
today. I hope this is helpful and

443
00:30:16,112 --> 00:30:17,990
thank you for your listening.

