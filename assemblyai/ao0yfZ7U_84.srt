1
00:00:41,170 --> 00:00:44,706
Hi everyone, thank you for being here for those new edition

2
00:00:44,818 --> 00:00:48,422
of Cloud Native. I am really happy to be with you.

3
00:00:48,476 --> 00:00:51,982
To talk to you about cgroups and this technology,

4
00:00:52,116 --> 00:00:55,406
about containerization and isolation of

5
00:00:55,428 --> 00:01:00,094
the process. Let's using to talk a bit about the future and

6
00:01:00,292 --> 00:01:03,714
how you could architecture your whole application to

7
00:01:03,752 --> 00:01:07,154
have something more maintainable and more sustainable in

8
00:01:07,192 --> 00:01:10,882
your everyday apps development. You probably

9
00:01:11,016 --> 00:01:14,194
heard about microservices and what they

10
00:01:14,232 --> 00:01:18,002
are and how to use it in your everyday development.

11
00:01:18,146 --> 00:01:21,654
The fact is, microservices is probably not

12
00:01:21,772 --> 00:01:26,040
that used in production right now, just because it's not something

13
00:01:26,490 --> 00:01:29,754
really easy to use and really easy to do,

14
00:01:29,872 --> 00:01:32,838
because it consists of a but of pattern,

15
00:01:32,934 --> 00:01:36,954
different patterns that you may have to put in production right

16
00:01:36,992 --> 00:01:40,778
now. If you want microservices, you've probably heard about

17
00:01:40,864 --> 00:01:44,414
containers and running containers. The fact is the things is

18
00:01:44,452 --> 00:01:48,222
not that easy when you want to run different things, because in

19
00:01:48,276 --> 00:01:52,126
production, running containers is often something like that. It's a

20
00:01:52,148 --> 00:01:55,586
complex task with a lot of frustration and a

21
00:01:55,608 --> 00:01:58,882
lot of things to do and to maintain to be sure that everything

22
00:01:58,936 --> 00:02:02,498
will run okay in production. Let's dive in in

23
00:02:02,664 --> 00:02:06,694
microservices architecture and what it is and how to use

24
00:02:06,732 --> 00:02:10,674
it. So as a reminder, a microservices architecture

25
00:02:10,802 --> 00:02:14,246
is an application with a collection of different services.

26
00:02:14,428 --> 00:02:18,018
Each one is responsible for a small business in

27
00:02:18,044 --> 00:02:21,818
your application and they are loosely coupled, which means that

28
00:02:21,904 --> 00:02:25,402
you do not depend on a service to

29
00:02:25,456 --> 00:02:28,982
run another service. This is something that could run in parallel

30
00:02:29,046 --> 00:02:32,970
and they are all deployable on the fly independently,

31
00:02:33,050 --> 00:02:37,498
which means that you can scale up or scale down one microservice

32
00:02:37,594 --> 00:02:41,326
rather than the overall application in case of a

33
00:02:41,348 --> 00:02:44,866
huge consumption or a huge traffic at some point. So it's something like

34
00:02:44,888 --> 00:02:48,734
that. It's some kind of galaxy

35
00:02:48,782 --> 00:02:52,798
of different services that you have to keep and to interact

36
00:02:52,894 --> 00:02:56,358
together. So what are microservices exactly?

37
00:02:56,524 --> 00:03:00,454
Firstly, they are business oriented, which means you have one

38
00:03:00,492 --> 00:03:04,134
service to do just one thing and just one thing.

39
00:03:04,332 --> 00:03:07,446
For example, you could have a service responsible for

40
00:03:07,468 --> 00:03:11,386
a setting manager. And this is where you get and set the

41
00:03:11,408 --> 00:03:15,798
overall settings of your application. Each service exposes

42
00:03:15,894 --> 00:03:19,306
an API, which means that each service that want to

43
00:03:19,328 --> 00:03:23,440
interact with those service in question are

44
00:03:23,890 --> 00:03:27,134
through standardized API. So this is something that

45
00:03:27,172 --> 00:03:31,230
is well documented or well standardized and that allow different

46
00:03:31,300 --> 00:03:34,926
parts of your replication to talk together. So in the case of our setting

47
00:03:34,958 --> 00:03:38,530
manager module, it exposes getters and setups for

48
00:03:38,600 --> 00:03:42,338
each available setting in your application. Each service

49
00:03:42,424 --> 00:03:45,958
is independent, it does not require another one to run.

50
00:03:46,044 --> 00:03:49,782
So the interface service will get

51
00:03:49,836 --> 00:03:53,366
settings from the manager service, but it

52
00:03:53,388 --> 00:03:57,026
will fall back to default in case of unavailability

53
00:03:57,138 --> 00:04:00,282
of the setting manager. So your those

54
00:04:00,336 --> 00:04:03,962
application can be kept at part of

55
00:04:04,016 --> 00:04:07,702
availability. Even if some part has missings

56
00:04:07,766 --> 00:04:10,986
or some modules, some services are missing.

57
00:04:11,098 --> 00:04:14,334
They all rely on the bus message to transmit your

58
00:04:14,372 --> 00:04:18,442
information, which means that a service could publish various

59
00:04:18,506 --> 00:04:22,390
changes to a common bus. And those other devices

60
00:04:22,490 --> 00:04:25,570
that want to use the changes pushed by

61
00:04:25,640 --> 00:04:29,714
the first service just consume them in

62
00:04:29,752 --> 00:04:33,086
this command bus. So in our case, the setting

63
00:04:33,118 --> 00:04:36,998
manager will push every changes in the settings to the command bus

64
00:04:37,084 --> 00:04:40,546
and the interface service we had registered

65
00:04:40,578 --> 00:04:44,962
to the command bus and will capture the messages and update accordingly.

66
00:04:45,106 --> 00:04:49,114
And then finally they're stateless, which means that the

67
00:04:49,152 --> 00:04:53,078
data is stored on a dedicated storage backend.

68
00:04:53,254 --> 00:04:56,934
And you could deploy a lot of settings manager

69
00:04:56,982 --> 00:05:00,326
if you want to load balance build with them, or you can scale

70
00:05:00,358 --> 00:05:03,822
up them, or you can scale them down and just have just

71
00:05:03,876 --> 00:05:07,518
one service. You do not need to rely on the

72
00:05:07,604 --> 00:05:11,178
same standard located shelled storage.

73
00:05:11,274 --> 00:05:15,358
This is a dedicated back end for that. So if you want to run microservices,

74
00:05:15,454 --> 00:05:18,738
you do have to run a complex architecture with

75
00:05:18,824 --> 00:05:23,102
an orchestration for every services in this architecture.

76
00:05:23,246 --> 00:05:26,386
And then you will do have to run some kind

77
00:05:26,408 --> 00:05:30,174
of backend storage backend data messaging

78
00:05:30,222 --> 00:05:33,782
Steve system, like a redis or deadmq or something like that.

79
00:05:33,916 --> 00:05:37,618
So it's a complex architecture. It's something complex to run, complex to

80
00:05:37,644 --> 00:05:41,686
maintain, and complex to deploy. So do you need microservices

81
00:05:41,798 --> 00:05:45,446
for your business right now? If you have complex monolith

82
00:05:45,478 --> 00:05:49,162
architecture that you want to split, to have small

83
00:05:49,216 --> 00:05:53,214
parts and separated in small modules, then yes, you can

84
00:05:53,252 --> 00:05:57,214
use microservices. If your business is spread across

85
00:05:57,332 --> 00:06:00,702
different units, yes, you could develop one service per

86
00:06:00,756 --> 00:06:04,738
unit. So each unit will embed just one business

87
00:06:04,904 --> 00:06:09,070
and not those. Overall, if you really need scaling

88
00:06:09,150 --> 00:06:12,638
capabilities, and I really mean real scaling,

89
00:06:12,734 --> 00:06:16,878
because for most application you do not really need scaling.

90
00:06:16,974 --> 00:06:20,278
You just need to run up and down sometimes and

91
00:06:20,364 --> 00:06:23,574
maybe deploy and add more resources to your application than

92
00:06:23,612 --> 00:06:26,962
not big upscaling. But if you need real scaling capabilities,

93
00:06:27,026 --> 00:06:30,982
then yes you do have to run microservices.

94
00:06:31,126 --> 00:06:34,982
And if your team can be split to multiple

95
00:06:35,046 --> 00:06:38,602
small projects, because each small team will be responsible of

96
00:06:38,656 --> 00:06:42,202
just one unit. So you need to have a big team that you could

97
00:06:42,256 --> 00:06:45,774
split and spread across your multiple project. But if you do,

98
00:06:45,812 --> 00:06:49,390
yes, you could do microservices and

99
00:06:49,540 --> 00:06:53,566
you do need a team that is pretty much DevOps skilled because

100
00:06:53,668 --> 00:06:57,154
there will be a lot to maintain, to install, to deploy and so

101
00:06:57,192 --> 00:07:00,242
on. So you need that in your team. So when not

102
00:07:00,296 --> 00:07:03,598
using microservices, if you're not ready for observability,

103
00:07:03,694 --> 00:07:07,218
because each services will be run

104
00:07:07,304 --> 00:07:10,722
in its those container in its own sandbox.

105
00:07:10,786 --> 00:07:14,102
So you will need to observe them and to be sure

106
00:07:14,156 --> 00:07:17,558
that everything is run well. So you

107
00:07:17,644 --> 00:07:21,526
do have to have a big culture of observability.

108
00:07:21,638 --> 00:07:25,114
If you don't, it will be really complex for you to maintain and

109
00:07:25,152 --> 00:07:29,130
to keep the system in a stable state. If your team does not

110
00:07:29,200 --> 00:07:33,562
have DevOps, as we said, you're probably not prepared

111
00:07:33,626 --> 00:07:37,514
to use microservices. And if you don't know containers

112
00:07:37,562 --> 00:07:41,038
and isolation, then no, you don't be ready

113
00:07:41,124 --> 00:07:44,846
to run microservices. But most of all, if you want to run the

114
00:07:44,868 --> 00:07:48,978
web version of Flippy Bird, then no, you don't need microservices to

115
00:07:48,984 --> 00:07:52,702
do that. Microservices are really dedicated to really big apps,

116
00:07:52,766 --> 00:07:56,374
really big scale. So if you don't want that, if you

117
00:07:56,412 --> 00:07:59,942
just want to run a simple game, then you really do not

118
00:07:59,996 --> 00:08:03,266
need microservices. So my preference

119
00:08:03,378 --> 00:08:07,278
rather than microservices is probably more about multilanguages

120
00:08:07,394 --> 00:08:11,306
architecture. This is something a bit different when

121
00:08:11,488 --> 00:08:15,242
I prefer to develop components rather than services.

122
00:08:15,376 --> 00:08:19,078
And the components could be responsible for multiple paas

123
00:08:19,094 --> 00:08:22,986
of the logics, but I choose my components in

124
00:08:23,008 --> 00:08:26,126
regard of the technology I could use because I proper to

125
00:08:26,148 --> 00:08:29,534
use rust for some tasks and python for the one and running

126
00:08:29,572 --> 00:08:33,118
the front end with node js and umber PWA application.

127
00:08:33,284 --> 00:08:36,834
So I proper to pick my choices, the right technology

128
00:08:36,952 --> 00:08:41,042
and make the right choice rather than just splitting everything into

129
00:08:41,096 --> 00:08:44,674
really small chunks, really small services. The advantage is that

130
00:08:44,712 --> 00:08:48,110
you do not need DevOps capabilities to do that. You just need a

131
00:08:48,120 --> 00:08:51,414
platform that is able to run the different interpreters and

132
00:08:51,452 --> 00:08:55,426
the different paas of your code, but not a big large architecture

133
00:08:55,458 --> 00:08:59,194
to do that. So it's pretty much simple. And you still have the good of

134
00:08:59,232 --> 00:09:02,550
microservices because you still have scalability and flexibility,

135
00:09:02,630 --> 00:09:05,898
maintenance and so on. It's a bit mitigation of the

136
00:09:05,904 --> 00:09:09,414
complexity of microarchitectures. This is something I really prefer

137
00:09:09,542 --> 00:09:12,318
and it's flippy but compatible. So yeah,

138
00:09:12,404 --> 00:09:16,506
definitely. I prefer to do multi languages rather than microservices.

139
00:09:16,618 --> 00:09:20,414
So let's see how to do it in a real

140
00:09:20,452 --> 00:09:24,722
context application and let's talk about the containers. So the

141
00:09:24,776 --> 00:09:27,986
goal of containers is to run your processes in

142
00:09:28,008 --> 00:09:31,970
isolation to prevent any drama coming from

143
00:09:32,040 --> 00:09:35,586
a service that is killed at some point or that crashed because there

144
00:09:35,608 --> 00:09:38,994
is a bug inside it and it prevents you to crash

145
00:09:39,042 --> 00:09:42,342
the overall application and it allow you to

146
00:09:42,396 --> 00:09:45,750
just reboot some kind or reset some service

147
00:09:45,820 --> 00:09:48,982
at some point without affecting the rest of your application.

148
00:09:49,116 --> 00:09:52,454
So this is about preventing from any kind

149
00:09:52,492 --> 00:09:55,574
of data leaks. It allow you to distribute your

150
00:09:55,612 --> 00:09:59,222
resources from your hardware to your different paas of your application

151
00:09:59,356 --> 00:10:03,594
regarding their own conception. It keeps sandboxed

152
00:10:03,642 --> 00:10:07,834
environments which means that you can pick a version, a dedicated

153
00:10:07,882 --> 00:10:11,422
version of a language specifically for a module rather

154
00:10:11,476 --> 00:10:15,394
than fixing it for the overall platform. So it allow

155
00:10:15,432 --> 00:10:19,326
you to tweak your environment and it allow you to improve

156
00:10:19,358 --> 00:10:22,686
your observability because it will be easier to observe

157
00:10:22,718 --> 00:10:26,678
just a small part of your application rather than the over one.

158
00:10:26,764 --> 00:10:30,918
So you may think that isolation means containers and

159
00:10:31,084 --> 00:10:34,498
something like kubernetes or elixir or jazz

160
00:10:34,514 --> 00:10:38,026
or virtual machines or so on. But you're wrong if you think that because

161
00:10:38,048 --> 00:10:41,914
you can run isolation without containers. The fact is most

162
00:10:41,952 --> 00:10:45,830
of our prediction server are running with Linux and Linux

163
00:10:45,910 --> 00:10:49,974
is POSIX compatible. POSIX is a standard and in

164
00:10:50,032 --> 00:10:53,742
its basics you find different type that are really

165
00:10:53,796 --> 00:10:57,614
useful for us. Different patterns. First there

166
00:10:57,652 --> 00:11:01,274
is processes and processes allow you to isolate

167
00:11:01,322 --> 00:11:04,546
those different execution parts. There is I O

168
00:11:04,568 --> 00:11:07,954
controls which allow you to isolate the access.

169
00:11:08,152 --> 00:11:11,506
There is message pacing allow you to isolate those communication between the

170
00:11:11,528 --> 00:11:15,278
modules. There is permission allowing you to isolate your

171
00:11:15,304 --> 00:11:19,094
resources. So every of them is really useful. So you do

172
00:11:19,132 --> 00:11:22,338
not need containers, you need a safe isolation

173
00:11:22,434 --> 00:11:26,034
system because when you will have your overall

174
00:11:26,162 --> 00:11:29,990
isolation for each kind of those module you do not need a container

175
00:11:30,070 --> 00:11:33,226
to keep it in a sandbox. Linux can

176
00:11:33,248 --> 00:11:37,174
do that and it could do it very well. The underlying

177
00:11:37,222 --> 00:11:41,110
technology under every container technology docker,

178
00:11:41,190 --> 00:11:44,970
container D, Addix C whatever you want is a feature

179
00:11:45,050 --> 00:11:48,542
in the Linux kernel called C groups. It's also

180
00:11:48,596 --> 00:11:52,666
used at system level by systemd and it's a kernel level isolation,

181
00:11:52,778 --> 00:11:56,674
more about it in a minute. There is no really

182
00:11:56,712 --> 00:11:59,934
difficulty to run it on your own because it's a built in feature

183
00:11:59,982 --> 00:12:04,290
in the canal. So it's just something to activate. There's a lot of documentation,

184
00:12:04,710 --> 00:12:08,454
it's those standard so it's really easy to run and

185
00:12:08,492 --> 00:12:12,198
to deploy in production. But you will need some high

186
00:12:12,284 --> 00:12:15,686
Linux skills and it's not the same things that

187
00:12:15,708 --> 00:12:18,950
containers because it's not like pushing an image,

188
00:12:19,030 --> 00:12:22,762
composing an image and pushing an image on a repo. It's something more

189
00:12:22,816 --> 00:12:26,220
complex because you will have to do that

190
00:12:26,830 --> 00:12:30,274
in the hardware by itself directly.

191
00:12:30,342 --> 00:12:35,418
But it's more easier in the long term than running containers.

192
00:12:35,594 --> 00:12:39,642
The fact is it's probably more something like isolating containers

193
00:12:39,706 --> 00:12:43,790
and full images or like almost a virtual machine,

194
00:12:43,870 --> 00:12:47,374
or isolating processes. And definitely isolating

195
00:12:47,422 --> 00:12:51,154
processes is an easier task. What about building the platform

196
00:12:51,272 --> 00:12:54,670
I'm working for? Always data. We're a cloud provider

197
00:12:54,750 --> 00:12:58,322
and we made a cloud platform before the cloud era

198
00:12:58,386 --> 00:13:02,290
15 years ago. At first we were just hosting providers,

199
00:13:02,370 --> 00:13:06,274
but we did have to find solution to properly

200
00:13:06,322 --> 00:13:09,642
isolate the various processes owned by our

201
00:13:09,696 --> 00:13:13,626
customers. And 15 years ago we didn't have

202
00:13:13,808 --> 00:13:17,926
docker or containers or whatever, we just had Linux.

203
00:13:18,038 --> 00:13:20,442
So we did have to deal with that.

204
00:13:20,576 --> 00:13:23,902
Fortunately there were c groups available.

205
00:13:24,036 --> 00:13:27,326
Basic definition of cloud is you will need to have

206
00:13:27,348 --> 00:13:31,054
a high availability. Your service need to be up at

207
00:13:31,092 --> 00:13:34,814
any time, at any moment and could be restart at any

208
00:13:34,852 --> 00:13:38,398
point. So we need to maintain the state of

209
00:13:38,484 --> 00:13:42,226
high availability. You need elastic scalability to be able

210
00:13:42,248 --> 00:13:45,614
to scale up and scale down your application and by adding more resources

211
00:13:45,662 --> 00:13:48,294
at some point if you need it, you need embedded services,

212
00:13:48,412 --> 00:13:51,798
database, storage, messaging system and so on.

213
00:13:51,884 --> 00:13:55,350
You need an agent, fast picture, so something that allow

214
00:13:55,420 --> 00:13:58,906
you to be really close to your end customers. And you

215
00:13:58,928 --> 00:14:02,598
need native isolation to be able to just simply

216
00:14:02,694 --> 00:14:06,570
isolate your processes from the others, from others user.

217
00:14:06,910 --> 00:14:10,478
So the cgroups based isolation, it's a mechanism that

218
00:14:10,564 --> 00:14:15,402
isolate its process per user, so it's

219
00:14:15,546 --> 00:14:18,634
bound to a user and it's dedicated

220
00:14:18,682 --> 00:14:22,862
to it. You will have one C group per process per

221
00:14:22,916 --> 00:14:26,354
user which allow you to finely grain your permission and

222
00:14:26,392 --> 00:14:30,420
the resources that you add to a dedicated process.

223
00:14:30,950 --> 00:14:34,146
You will use POSIX permissions for the resources, so it would be

224
00:14:34,168 --> 00:14:37,494
really easy to do. In fact it's something like that. There is a

225
00:14:37,532 --> 00:14:41,270
pseudo file system in your operating system

226
00:14:41,420 --> 00:14:44,646
exposed by the kernel. And here we have a

227
00:14:44,668 --> 00:14:47,650
C group container by the container service,

228
00:14:47,740 --> 00:14:51,082
which is our own orchestrator, and per user is

229
00:14:51,136 --> 00:14:55,178
the intranet user. There will be a proxy and

230
00:14:55,264 --> 00:14:59,078
an Apache upstream, and the Apache Upstream

231
00:14:59,174 --> 00:15:02,734
is a C group dedicated to the Apache process for

232
00:15:02,772 --> 00:15:06,538
this user specifically. And I will have a bunch of files,

233
00:15:06,714 --> 00:15:10,250
some of them prefixed by the cgroups prefix,

234
00:15:10,330 --> 00:15:13,526
and each of them allow you to manipulate those cgroups.

235
00:15:13,578 --> 00:15:17,646
There is one file specifically which is really interesting, which is a cgroup

236
00:15:17,758 --> 00:15:21,650
prox. In this file you will just find the

237
00:15:21,800 --> 00:15:25,506
process ideas of the various process you want

238
00:15:25,528 --> 00:15:29,286
to bind to this cgroups. So it's as easy as just

239
00:15:29,388 --> 00:15:32,902
writing a string, writing a number, which is the Id

240
00:15:32,956 --> 00:15:35,846
process you want to add to the group. You write it in the file and

241
00:15:35,868 --> 00:15:39,434
the process is isolated in the group. That's all. You don't have anything more

242
00:15:39,472 --> 00:15:43,354
to do. It's pretty easy to just keep some things

243
00:15:43,472 --> 00:15:46,794
isolated in your system, in your running system,

244
00:15:46,832 --> 00:15:50,266
in production. It also allows you to set the

245
00:15:50,288 --> 00:15:53,630
limits that will be affected to

246
00:15:53,700 --> 00:15:57,418
a dedicated process. It's a C group native capability,

247
00:15:57,514 --> 00:16:01,214
so it's something that is already available in your kernel. It's the same

248
00:16:01,252 --> 00:16:05,202
thing that fixing the cgroups, it's just writing some things into

249
00:16:05,256 --> 00:16:09,150
file and it allow you to cap some hardware resources.

250
00:16:09,230 --> 00:16:13,374
It will use a kernel system to balance different resources

251
00:16:13,422 --> 00:16:17,670
affected to a process at some point. So you could have multiple process,

252
00:16:17,820 --> 00:16:21,522
an application running multiple languages, multiple components,

253
00:16:21,586 --> 00:16:25,714
and each of them will be properly balanced by the kernel to affect the resources

254
00:16:25,762 --> 00:16:29,094
to not impact a process rather than another

255
00:16:29,212 --> 00:16:32,414
if a process in the system is high costuming.

256
00:16:32,482 --> 00:16:35,882
So it's a really easy system.

257
00:16:36,016 --> 00:16:40,006
And as previously you've got in your C group file

258
00:16:40,038 --> 00:16:43,854
name memory max for example. And in this one I

259
00:16:43,892 --> 00:16:47,114
just put the quantity of memories, the amount of memories

260
00:16:47,162 --> 00:16:51,706
that I want to affect to my up Apache upstream process and that's

261
00:16:51,738 --> 00:16:55,626
all. And here I can fix 4gb

262
00:16:55,658 --> 00:16:59,166
of memory for the Apache upstream process. I just write those number in the file

263
00:16:59,198 --> 00:17:02,562
and that's all. And the kernel will do it for me. It's pretty much easy

264
00:17:02,616 --> 00:17:07,294
to do. Nevertheless, you will still need an orchestrator

265
00:17:07,342 --> 00:17:10,982
to maintain everything because if you have a lot of processes like we

266
00:17:11,036 --> 00:17:14,518
do have on our cloud platform, because we have a lot of users in

267
00:17:14,524 --> 00:17:18,026
the same servers, you do need an

268
00:17:18,048 --> 00:17:21,754
orchestrator to automate the various tasks. This is

269
00:17:21,792 --> 00:17:24,870
something that is central, something like kubernetes.

270
00:17:25,030 --> 00:17:28,922
It's just heres to automatically create and

271
00:17:28,976 --> 00:17:32,838
delete and update the C groups regarding to the user

272
00:17:32,934 --> 00:17:36,474
provider settings. So it's something not

273
00:17:36,512 --> 00:17:40,094
that complex because it's just a central point of code

274
00:17:40,132 --> 00:17:43,178
that just creates C groups, affect them to the user,

275
00:17:43,274 --> 00:17:46,434
put those process number in them, fix the limit by

276
00:17:46,472 --> 00:17:50,098
editing the files in the C group set of file system. And that's all.

277
00:17:50,184 --> 00:17:54,302
So it's not that complex, that's an overall Kubernetes

278
00:17:54,366 --> 00:17:58,146
and not something that as complex to maintain and to understand and to

279
00:17:58,168 --> 00:18:01,414
use. So this is something more easy to do, but you

280
00:18:01,452 --> 00:18:05,014
will need it if you want to automate the task. But if you do not

281
00:18:05,052 --> 00:18:09,290
need to automate them, you could do it manually perfectly and it

282
00:18:09,360 --> 00:18:13,286
will work. Definitely. Another great capability

283
00:18:13,398 --> 00:18:16,794
of the cgroups feature is that you could interface it.

284
00:18:16,832 --> 00:18:20,582
We interface it with spam, the system pluggable authentication

285
00:18:20,646 --> 00:18:24,686
module system in Linux because we use it to sandbox any kind

286
00:18:24,708 --> 00:18:28,286
of processes. In our case when a user SSH on the

287
00:18:28,308 --> 00:18:32,442
platform. OpenSSh doesn't support the cgroups natively,

288
00:18:32,506 --> 00:18:36,210
but we authenticate the user using PAM and using a custom

289
00:18:36,280 --> 00:18:40,786
script. We instantly attach the SSH process

290
00:18:40,888 --> 00:18:44,290
for this current session from the user in its own C group.

291
00:18:44,360 --> 00:18:47,654
So it is instantly isolated in its own process,

292
00:18:47,772 --> 00:18:51,490
and it's completely transparent for the user. Same thing about the network,

293
00:18:51,570 --> 00:18:55,974
you can easily create private ips for your inside

294
00:18:56,172 --> 00:18:59,542
process and inside interfaces,

295
00:18:59,686 --> 00:19:03,686
and you could just rely on EP tables to radiate the traffic

296
00:19:03,798 --> 00:19:07,258
from the external interfaces to the internal ones of

297
00:19:07,264 --> 00:19:10,926
your different system. In fact, we are supposed to use

298
00:19:11,028 --> 00:19:14,494
EP tables, but Netfilter is something that is really complex and

299
00:19:14,532 --> 00:19:18,174
not that handy, so we

300
00:19:18,212 --> 00:19:21,726
prefer to patch the kernel to just prevent the

301
00:19:21,748 --> 00:19:25,682
EP table use. It's a really simple patch in the kernel that allow

302
00:19:25,736 --> 00:19:29,618
us to just create bunch of private ips and

303
00:19:29,704 --> 00:19:32,834
cap them in the C group to authorize the access if

304
00:19:32,872 --> 00:19:36,398
the private ip is declared to be used by the

305
00:19:36,424 --> 00:19:40,310
user. So it's pretty easy to do. We just compare some

306
00:19:40,380 --> 00:19:43,446
Gid numbers and registered address and

307
00:19:43,468 --> 00:19:47,094
that's all. It's not that complex, but if you want to do

308
00:19:47,132 --> 00:19:50,346
that in another way, eptable is definitely a good way if

309
00:19:50,368 --> 00:19:54,118
you don't want to patch the kernel by itself. Another really good feature

310
00:19:54,214 --> 00:19:57,946
is the ability to forbid the process read access for

311
00:19:57,968 --> 00:20:01,338
the other users. It's just an option in cgroups to enable,

312
00:20:01,434 --> 00:20:05,066
and if you do that, your user

313
00:20:05,098 --> 00:20:08,846
will run a PS to analyze the different process

314
00:20:08,948 --> 00:20:12,366
running on the system. He won't be

315
00:20:12,388 --> 00:20:15,954
able to see the other user processes, it will be

316
00:20:15,992 --> 00:20:19,230
sandboxed in its own environment.

317
00:20:19,310 --> 00:20:22,754
So you want to those different user on your platform to

318
00:20:22,792 --> 00:20:26,358
be able to read the different process of the other users on the

319
00:20:26,364 --> 00:20:28,726
platform. So it's pretty much easy.

320
00:20:28,908 --> 00:20:33,010
Cgroups come with another system which is called namespace.

321
00:20:33,170 --> 00:20:37,094
It's another layer that live in parallel with cgroups that allow

322
00:20:37,132 --> 00:20:39,670
you to partition the kernel resources,

323
00:20:40,090 --> 00:20:43,946
network interfaces kind of stuff. And this is

324
00:20:43,968 --> 00:20:47,174
the same thing. It's used in every container technologies, Docker,

325
00:20:47,222 --> 00:20:51,054
Elixir and so on. It's really useful, but it's not

326
00:20:51,092 --> 00:20:54,686
that mandatory if you want to just run

327
00:20:54,868 --> 00:20:58,382
a simple isolation platform process. We do not use it

328
00:20:58,436 --> 00:21:01,946
at always data. It's really overkill

329
00:21:02,058 --> 00:21:05,630
for our use cases. Do you need to use POSIX and

330
00:21:05,700 --> 00:21:09,042
cgroups instead of containers? You could do it

331
00:21:09,176 --> 00:21:13,534
because it's as easy as just making McAdier and t instruction

332
00:21:13,582 --> 00:21:17,026
to write into files in the POSIX system. So it's really great to

333
00:21:17,048 --> 00:21:21,446
use. It's fully agnostic, it's POSIX compatible, it doesn't need to

334
00:21:21,468 --> 00:21:25,046
create images and push images and repos to pull them in

335
00:21:25,068 --> 00:21:28,658
production later. You do not need some kind of orchestrator to deploy

336
00:21:28,674 --> 00:21:32,090
and manage some kind of services. You could just use

337
00:21:32,160 --> 00:21:36,058
a simple platform isolated processes and run your different

338
00:21:36,144 --> 00:21:40,162
components or your different services. If you want to target a microservices

339
00:21:40,246 --> 00:21:44,154
architecture to simply run really well sandboxed

340
00:21:44,202 --> 00:21:47,482
and trendy to scale application without having to worry

341
00:21:47,546 --> 00:21:51,134
about the complex orchestrators. Those fact is you

342
00:21:51,172 --> 00:21:54,626
dont need kubernetes or keytrees or whatever. You need

343
00:21:54,648 --> 00:21:58,626
a fair isolation on a reliable platform and

344
00:21:58,648 --> 00:22:02,034
that's all you do not need anymore. The good thing is that

345
00:22:02,152 --> 00:22:05,526
using those technologies we are ready to run some kind

346
00:22:05,548 --> 00:22:09,302
of bright future with the WASM serverless based

347
00:22:09,356 --> 00:22:13,750
architecture which will be some kind of webassembly server running

348
00:22:13,820 --> 00:22:18,362
with C Group's POSIX capabilities to definitely kill

349
00:22:18,416 --> 00:22:22,230
the containers and run webassembling lambdas directly

350
00:22:22,310 --> 00:22:26,118
into your server, running in isolated processes,

351
00:22:26,214 --> 00:22:29,946
taking care of the security model of webassembly and

352
00:22:30,048 --> 00:22:33,422
the capabilities of cgroups and we will not need

353
00:22:33,476 --> 00:22:36,894
containers anymore. And this will be really great in

354
00:22:36,932 --> 00:22:40,654
kind of production processes, but it will be for another talk

355
00:22:40,772 --> 00:22:44,462
probably. I'm mad. I'm a tech evangelist at Always data, a cloud

356
00:22:44,516 --> 00:22:47,694
provider. CGroups is a technology we are using

357
00:22:47,732 --> 00:22:51,182
for 15 years and this is something really really useful and really

358
00:22:51,236 --> 00:22:54,442
reliable and we do not run containers in production

359
00:22:54,506 --> 00:22:58,102
and we are really proud of it. Thank you very much. If you have any

360
00:22:58,156 --> 00:23:02,498
question and we'll be happy to talk to you on the discord of the conference.

361
00:23:02,674 --> 00:23:03,430
See you later,

