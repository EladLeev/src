1
00:00:19,690 --> 00:00:23,262
Hello guys, this is Trista. So today this

2
00:00:23,316 --> 00:00:27,090
talk will give the introduction

3
00:00:27,170 --> 00:00:31,142
about the database, especially distributed database is

4
00:00:31,196 --> 00:00:34,600
on Kubernetes and how to solve such issues.

5
00:00:36,090 --> 00:00:39,766
I'm Jess Japan now is the co founder and the

6
00:00:39,788 --> 00:00:44,006
CTO of Sophia ex. Actually this company, this startup,

7
00:00:44,118 --> 00:00:47,820
it's built from open source project.

8
00:00:49,470 --> 00:00:53,534
So it's open source commercial stuff as

9
00:00:53,652 --> 00:00:57,066
my area. It's around the distributed database

10
00:00:57,178 --> 00:00:59,630
and around the cloud databases.

11
00:01:01,490 --> 00:01:05,918
Sometimes I will give some post around the open source,

12
00:01:06,014 --> 00:01:09,842
around the Apache Software foundation, around the

13
00:01:09,896 --> 00:01:13,790
distributed database, all the stuff on my Twitter and linking.

14
00:01:13,870 --> 00:01:17,234
So if you have some questions about today's topic

15
00:01:17,362 --> 00:01:20,518
and also want to talk with me more,

16
00:01:20,684 --> 00:01:25,506
you can give a look there my Twitter and my linking.

17
00:01:25,698 --> 00:01:27,960
Yeah. So let's get started.

18
00:01:28,910 --> 00:01:32,662
Today our talk will include the following

19
00:01:32,726 --> 00:01:36,490
atoms. The first one will give the issues because

20
00:01:36,640 --> 00:01:40,566
if there are no issue, it's no necessary

21
00:01:40,678 --> 00:01:43,498
to give some talks around the solution.

22
00:01:43,594 --> 00:01:47,054
Around this talk. Last one we will talk about

23
00:01:47,092 --> 00:01:50,782
the Kubernetes and databases and also about

24
00:01:50,836 --> 00:01:54,782
the distributed database architecture. Then based on

25
00:01:54,836 --> 00:01:58,274
all of the background of this knowledges I can give

26
00:01:58,312 --> 00:02:01,602
them the new idea or solution to help

27
00:02:01,656 --> 00:02:05,374
you solve how to leveraging your

28
00:02:05,512 --> 00:02:09,346
existing PostgreSQL or SQL SQL

29
00:02:09,378 --> 00:02:12,994
such popular open source monolithic

30
00:02:13,042 --> 00:02:17,026
databases on the Kubernetes and upgrade

31
00:02:17,058 --> 00:02:21,020
them to become a distributed one. Therefore you can have

32
00:02:21,630 --> 00:02:25,114
such distributed system can help you

33
00:02:25,152 --> 00:02:29,238
solve for example the high availability

34
00:02:29,414 --> 00:02:33,122
or you need more performance TPS or QBS.

35
00:02:33,286 --> 00:02:36,990
Well, you want this solution to help you

36
00:02:37,140 --> 00:02:41,242
manage the tremendous data stored

37
00:02:41,306 --> 00:02:45,454
in your existing PostgreSQL or MySQL SQL.

38
00:02:45,582 --> 00:02:49,538
And the last part, if I have time I will give the demo

39
00:02:49,624 --> 00:02:53,074
show to introduce them step by step.

40
00:02:53,192 --> 00:02:56,680
But if I have no time, I suggest that you can

41
00:02:57,770 --> 00:03:01,480
slide up by this slice by yourself.

42
00:03:01,930 --> 00:03:05,878
All right. So the background or issue that

43
00:03:06,044 --> 00:03:09,862
our service from the monolithic architecture

44
00:03:09,926 --> 00:03:13,180
to become a distributed one, that means the

45
00:03:13,710 --> 00:03:17,126
microservice or the serverless architecture.

46
00:03:17,238 --> 00:03:20,490
Then we will cofounder CTO leverage this wonderful

47
00:03:20,570 --> 00:03:24,782
open source platform Kubernetes to help

48
00:03:24,836 --> 00:03:29,018
us to manage the traffic

49
00:03:29,114 --> 00:03:33,140
and to manage the macro service,

50
00:03:33,670 --> 00:03:37,314
right. And or server. You can see here as

51
00:03:37,352 --> 00:03:41,522
the infrastructure most of them consider

52
00:03:41,656 --> 00:03:45,606
to move our infrastructure from the

53
00:03:45,708 --> 00:03:49,782
on premise to the cloud. Because the cloud have the

54
00:03:49,916 --> 00:03:53,122
best service to help you skew up or skew

55
00:03:53,186 --> 00:03:56,694
in, skew out or skew in, skew up

56
00:03:56,732 --> 00:04:00,540
or skew down. Your infrastructure is best your service

57
00:04:00,990 --> 00:04:04,534
server, right? So in the middle layer

58
00:04:04,582 --> 00:04:07,914
that about your databases, how to deal with

59
00:04:07,952 --> 00:04:11,630
your databases. We will consider the first one

60
00:04:11,700 --> 00:04:15,626
how to make our existing monolithic databases

61
00:04:15,738 --> 00:04:19,306
become the distributed one. To make your database

62
00:04:19,338 --> 00:04:22,406
system to have the skilling feature,

63
00:04:22,538 --> 00:04:26,162
to have a high availability feature and to let

64
00:04:26,216 --> 00:04:29,838
your database system how to manage tremendous

65
00:04:29,934 --> 00:04:33,746
enormous data and also offer

66
00:04:33,848 --> 00:04:36,818
you the best performance,

67
00:04:36,914 --> 00:04:40,742
right? And especially people will consider

68
00:04:40,876 --> 00:04:44,790
could I put my database on the Kubernetes to help

69
00:04:44,860 --> 00:04:48,410
this wonderful platform to help

70
00:04:48,480 --> 00:04:52,102
me manage or the deploy

71
00:04:52,246 --> 00:04:55,674
or our DB databases system

72
00:04:55,872 --> 00:05:00,462
as same as the service or

73
00:05:00,516 --> 00:05:03,982
application. All of the stateless application

74
00:05:04,116 --> 00:05:07,280
or service. However,

75
00:05:07,810 --> 00:05:11,994
when we speak of the Kubernetes, actually it's born

76
00:05:12,042 --> 00:05:15,410
for the stateless application or services.

77
00:05:15,560 --> 00:05:18,642
It can help us to automating our

78
00:05:18,696 --> 00:05:22,990
deployment, sharding and management for all the container

79
00:05:23,070 --> 00:05:27,990
application that especially for the stateless applications.

80
00:05:28,570 --> 00:05:32,630
How about our database? Because everyone know the databases

81
00:05:33,210 --> 00:05:36,694
is mostly different from the stateless service,

82
00:05:36,892 --> 00:05:40,650
we need to consider the data persistence issue and

83
00:05:40,720 --> 00:05:45,142
how to manage the status of our replica

84
00:05:45,206 --> 00:05:48,218
or primary nodes of our database system.

85
00:05:48,384 --> 00:05:51,850
And also we need to consider the backup and restore

86
00:05:51,930 --> 00:05:55,390
our data. That means how to

87
00:05:55,540 --> 00:05:59,230
backup our data or restore our data to one

88
00:05:59,380 --> 00:06:01,600
specific point, right?

89
00:06:02,210 --> 00:06:06,290
But however, no matter if the stateless service or

90
00:06:06,360 --> 00:06:11,154
stateful service actually all

91
00:06:11,192 --> 00:06:15,650
of the applications needs the monitor, high vivid

92
00:06:16,230 --> 00:06:20,422
automatical deployment and security or

93
00:06:20,476 --> 00:06:23,510
the service quality. All of the

94
00:06:23,580 --> 00:06:27,838
features. That's the shared requirements

95
00:06:27,954 --> 00:06:32,742
from our users or from our ops,

96
00:06:32,806 --> 00:06:36,234
right? But today we will focus on

97
00:06:36,272 --> 00:06:40,074
the difference between the status services and

98
00:06:40,112 --> 00:06:44,138
stable services. Because today we all want to solve

99
00:06:44,234 --> 00:06:47,210
is how to put our databases on the Kubernetes.

100
00:06:47,370 --> 00:06:52,382
That means how to make our databases have

101
00:06:52,436 --> 00:06:56,638
the skilling features or automatic

102
00:06:56,734 --> 00:06:59,890
deployment or management features.

103
00:07:01,510 --> 00:07:04,738
Traditionally, actually currently all

104
00:07:04,824 --> 00:07:08,726
the database vendors, they provide some of the solutions on

105
00:07:08,748 --> 00:07:12,466
the Kubernetes. That means put their distributed

106
00:07:12,498 --> 00:07:16,322
database on the Kubernetes. They need to leverage the PV

107
00:07:16,386 --> 00:07:19,930
PVCN storage class of a Kubernetes native

108
00:07:20,590 --> 00:07:24,614
mechanism and use the stateful site to deploy

109
00:07:24,662 --> 00:07:28,586
their database and also leverage the

110
00:07:28,608 --> 00:07:32,654
pod identity or the mechanism to help them to

111
00:07:32,692 --> 00:07:36,266
put our distributed databases on the Kubernetes.

112
00:07:36,458 --> 00:07:40,570
I have to say it's a good way to evolve

113
00:07:40,650 --> 00:07:44,450
to put our databases on Kubernetes. Therefore your

114
00:07:44,600 --> 00:07:48,850
application now it's all born or

115
00:07:48,920 --> 00:07:52,434
leave in the Kubernetes. And if we can put our

116
00:07:52,472 --> 00:07:56,166
databases also in the Kubernetes, therefore your

117
00:07:56,188 --> 00:08:00,006
application can directly visit your databases in the

118
00:08:00,028 --> 00:08:03,734
same Kubernetes area

119
00:08:03,852 --> 00:08:07,458
or this area

120
00:08:07,564 --> 00:08:11,434
for this

121
00:08:11,472 --> 00:08:14,970
part. Right? But however,

122
00:08:15,120 --> 00:08:19,210
actually today I want to give another solution

123
00:08:19,550 --> 00:08:23,850
about how to leverage your existing

124
00:08:24,010 --> 00:08:27,354
postgreSQl databases

125
00:08:27,482 --> 00:08:31,950
and put them into the Kubernetes. The first

126
00:08:32,100 --> 00:08:36,238
solution, like I said before, you can also use some

127
00:08:36,404 --> 00:08:40,590
postgresQL operators or use the pvPvC storage

128
00:08:40,670 --> 00:08:43,746
classes to help you to deploy all of the

129
00:08:43,768 --> 00:08:47,922
databases, all of the stateful applications

130
00:08:47,986 --> 00:08:51,462
on the Kubernetes. But today I can give another way

131
00:08:51,516 --> 00:08:54,966
to figure out that issue. Let us first look

132
00:08:54,988 --> 00:08:58,940
at the distributed databases. Actually, when we speak of the

133
00:08:59,470 --> 00:09:02,554
databases distributed databases system,

134
00:09:02,672 --> 00:09:06,300
we will split this system into

135
00:09:06,670 --> 00:09:10,826
two parts. The first one, that means your distributed

136
00:09:10,858 --> 00:09:14,410
database system, it's made of two parts,

137
00:09:14,490 --> 00:09:18,698
two important elements. The first one is computing

138
00:09:18,794 --> 00:09:21,520
part. The second one is storage part.

139
00:09:23,030 --> 00:09:26,722
For example, I can give them the architecture, the high level

140
00:09:26,776 --> 00:09:30,306
architecture of the MongoDB or corporal DB. That's all

141
00:09:30,328 --> 00:09:34,146
the popular distributed database system you

142
00:09:34,168 --> 00:09:37,510
can see here. They also have their storage part,

143
00:09:37,580 --> 00:09:40,898
storage nodes, and also the computing nodes.

144
00:09:40,994 --> 00:09:44,134
Computing nodes. It's like the data proxy or

145
00:09:44,172 --> 00:09:47,722
the data router. It can help

146
00:09:47,776 --> 00:09:51,594
you deal with the request from our application,

147
00:09:51,792 --> 00:09:54,954
but all of the sharding all of the

148
00:09:55,072 --> 00:09:58,262
storage nodes, they can help to persist

149
00:09:58,326 --> 00:10:02,430
your data, right? And it can help you to

150
00:10:02,500 --> 00:10:05,360
manage your data part.

151
00:10:05,730 --> 00:10:08,958
And on the other hand,

152
00:10:09,044 --> 00:10:12,906
computing nodes help you deal with the computing part,

153
00:10:13,028 --> 00:10:16,686
right? So that's the basic introduction

154
00:10:16,718 --> 00:10:20,980
of the distributed database system. So if

155
00:10:22,070 --> 00:10:25,310
we can really understand such an

156
00:10:25,400 --> 00:10:28,902
architecture, then we can consider how

157
00:10:28,956 --> 00:10:33,538
to upgrade your favorite existing PostgreSQL

158
00:10:33,634 --> 00:10:37,522
or MySQL SQL databases to make it

159
00:10:37,596 --> 00:10:41,500
become a distributed one. Because I know that

160
00:10:42,190 --> 00:10:48,762
the PostgreSQL or SQL have

161
00:10:48,816 --> 00:10:52,910
been popular for many years and people

162
00:10:52,980 --> 00:10:56,240
love it and they already

163
00:10:57,090 --> 00:11:01,610
deploy it and manage your existing production

164
00:11:01,690 --> 00:11:05,890
environment, right? So can we don't

165
00:11:07,750 --> 00:11:11,282
overturn your database infrastructure and

166
00:11:11,336 --> 00:11:14,786
just to upgrade to become the distributed one,

167
00:11:14,888 --> 00:11:19,798
right? That's another solution for you to solve the

168
00:11:19,884 --> 00:11:22,934
distributed database system issue, right?

169
00:11:23,052 --> 00:11:26,726
So like you can see here the

170
00:11:26,748 --> 00:11:30,534
first solution for you. If you found that your PostgreSQl

171
00:11:30,582 --> 00:11:34,394
cannot help you manage the enormous data and

172
00:11:34,432 --> 00:11:38,422
you found the request from the postgres become slower

173
00:11:38,566 --> 00:11:42,310
and you want to make it have the more performance

174
00:11:42,390 --> 00:11:45,370
and the TPS, higher TPS or QBS,

175
00:11:45,530 --> 00:11:49,342
you can just remove or

176
00:11:49,396 --> 00:11:52,934
get rid of your postgres database infrastructure

177
00:11:53,002 --> 00:11:56,766
and just use the current popular distributed

178
00:11:56,798 --> 00:12:01,070
database one like ProperDB or other Aurora databases.

179
00:12:01,230 --> 00:12:04,850
But another solution that the question here that

180
00:12:04,920 --> 00:12:08,600
we can consider continue

181
00:12:09,130 --> 00:12:12,742
using the PostgreSQl MySQL SQL in your

182
00:12:12,796 --> 00:12:16,742
production environment. But at this point you just use

183
00:12:16,796 --> 00:12:20,282
all of the PostgreSQL cluster as the

184
00:12:20,336 --> 00:12:24,506
storage nodes. Storage part, storage elements of

185
00:12:24,528 --> 00:12:28,346
this distributed database and all

186
00:12:28,448 --> 00:12:31,994
the PostgreSQL instance, or we can call them storage

187
00:12:32,042 --> 00:12:35,294
nodes, can help you persist your data or

188
00:12:35,332 --> 00:12:38,894
do the local computing. And at this point

189
00:12:39,012 --> 00:12:42,560
we can just import or use

190
00:12:43,270 --> 00:12:47,394
global computing nodes into

191
00:12:47,592 --> 00:12:50,066
this distributed system.

192
00:12:50,248 --> 00:12:53,890
Then we can use the

193
00:12:53,960 --> 00:12:58,006
PostgreSQL working as a server node and important

194
00:12:58,188 --> 00:13:01,990
new global computing nodes work as the

195
00:13:02,060 --> 00:13:05,174
database proxy and to group all

196
00:13:05,212 --> 00:13:08,778
of the elements become a distributed one, right?

197
00:13:08,944 --> 00:13:12,870
Therefore we can upgrade your SQL

198
00:13:12,950 --> 00:13:16,534
instance or postgres instance become a distributed

199
00:13:16,582 --> 00:13:20,018
one. So here the key point is that what's

200
00:13:20,054 --> 00:13:24,302
the global computing nodes who

201
00:13:24,356 --> 00:13:27,594
have the capability to work at the computing

202
00:13:27,642 --> 00:13:30,746
nodes? That is Apache

203
00:13:30,778 --> 00:13:33,858
sharding Sophia. I will introduce it later,

204
00:13:34,024 --> 00:13:37,986
but now I can give a high level solution about

205
00:13:38,088 --> 00:13:41,634
this, how to leverage your

206
00:13:41,752 --> 00:13:45,274
postgres instance

207
00:13:45,422 --> 00:13:49,302
to upgrade them, become a distributed one and

208
00:13:49,356 --> 00:13:53,254
also put this distributed database on your

209
00:13:53,292 --> 00:13:56,534
Kubernetes cluster, right? So as

210
00:13:56,572 --> 00:13:59,734
I said, sharding Sophia can work as the database

211
00:13:59,782 --> 00:14:03,850
proxy or the computing nodes of this distributed system.

212
00:14:04,000 --> 00:14:08,074
And your postgresql can work or

213
00:14:08,112 --> 00:14:11,962
act as the storage nodes. And to help you manage your

214
00:14:12,016 --> 00:14:16,142
data and computing nodes can you deal with the request from

215
00:14:16,196 --> 00:14:20,250
your application, right? So therefore,

216
00:14:20,410 --> 00:14:24,046
because all of the two parts

217
00:14:24,158 --> 00:14:27,570
are actually independent from each other,

218
00:14:27,720 --> 00:14:31,870
so you can put your computing nodes

219
00:14:32,030 --> 00:14:35,666
into your Kubernetes cluster. Because Apache,

220
00:14:35,698 --> 00:14:39,510
Shorty and Sophia were computing nodes, they are the

221
00:14:39,580 --> 00:14:43,558
stateless application and

222
00:14:43,644 --> 00:14:47,790
Kubernetes is born for stateless

223
00:14:47,970 --> 00:14:51,802
application, right? So if we

224
00:14:51,856 --> 00:14:55,462
can put the computing nodes into your Kubernetes

225
00:14:55,526 --> 00:15:01,114
cluster and can exactly fully

226
00:15:01,242 --> 00:15:05,322
leverage the Kubernetes mechanism

227
00:15:05,466 --> 00:15:09,706
to manage or deploy all of the status computing

228
00:15:09,738 --> 00:15:13,362
nodes, and here you have two options

229
00:15:13,496 --> 00:15:16,958
to deploy or manage your storage nodes.

230
00:15:17,054 --> 00:15:20,414
The first one you can put your storage

231
00:15:20,462 --> 00:15:23,406
nodes into your Kubernetes.

232
00:15:23,518 --> 00:15:27,426
That means you deploy your storage loads.

233
00:15:27,458 --> 00:15:31,442
That means postgres database

234
00:15:31,506 --> 00:15:35,254
instance into the Kubernetes and just like the

235
00:15:35,292 --> 00:15:39,162
computing nodes to visit their storage nodes and your

236
00:15:39,216 --> 00:15:42,934
application just send a request to your computing

237
00:15:42,982 --> 00:15:47,098
nodes, right? That's the first option. The second option

238
00:15:47,184 --> 00:15:51,386
that I recommend because you know that Kubernetes

239
00:15:51,578 --> 00:15:55,946
currently is not so good to help you manage the stateful

240
00:15:56,138 --> 00:16:00,046
databases, right? So you can just leverage the

241
00:16:00,148 --> 00:16:03,682
RDS on the cloud, on any cloud and

242
00:16:03,736 --> 00:16:07,646
just deploy sharding Sophia. That means the computing

243
00:16:07,678 --> 00:16:11,426
node of this distributed database system into

244
00:16:11,528 --> 00:16:15,462
your Kubernetes cluster. Therefore your application just

245
00:16:15,516 --> 00:16:19,720
send a request to your computing nodes and your

246
00:16:20,090 --> 00:16:23,746
computing nodes will run the global

247
00:16:23,858 --> 00:16:27,662
computing computing

248
00:16:27,826 --> 00:16:32,230
work. And then to get or to persist

249
00:16:32,310 --> 00:16:36,058
the data into or from

250
00:16:36,144 --> 00:16:39,698
your storage node. That means your RDS,

251
00:16:39,894 --> 00:16:43,210
MySQL RDS or postgres or RDS,

252
00:16:43,290 --> 00:16:47,310
right? But for your application they will sync

253
00:16:48,290 --> 00:16:52,218
your application, just visit a database,

254
00:16:52,314 --> 00:16:55,902
a distributed database. Actually this

255
00:16:55,956 --> 00:17:00,210
database, for the application it's a single one. But for

256
00:17:00,280 --> 00:17:04,062
yourself, from the internal perspective,

257
00:17:04,206 --> 00:17:08,198
it's made of a two part, right? But however,

258
00:17:08,364 --> 00:17:12,162
you just independently deploy your storage

259
00:17:12,226 --> 00:17:16,600
nodes and computing nodes in a different place.

260
00:17:16,970 --> 00:17:20,442
The computing nodes live

261
00:17:20,496 --> 00:17:25,322
in the Kubernetes and your RDS were

262
00:17:25,376 --> 00:17:29,180
born on your cloud, right? Yeah.

263
00:17:29,630 --> 00:17:33,226
So what's the benefit of this? My solution,

264
00:17:33,338 --> 00:17:37,274
the first one, it can help you leverage your existing

265
00:17:37,322 --> 00:17:40,960
databases. You don't want to do the

266
00:17:42,550 --> 00:17:46,366
totally change your database infrastructure.

267
00:17:46,478 --> 00:17:50,258
The second one, it can help you upgrade it to the

268
00:17:50,344 --> 00:17:53,490
distributed one, right? Therefore it can meet

269
00:17:53,560 --> 00:17:57,922
your new requirements for your databases infrastructure.

270
00:17:58,066 --> 00:18:01,926
And the last one, because you import sharding Sophia in

271
00:18:01,948 --> 00:18:05,878
your database distributed system, that means

272
00:18:05,964 --> 00:18:09,770
this open source project can provide you

273
00:18:09,920 --> 00:18:14,022
more grade four features. For example, the data sharding,

274
00:18:14,166 --> 00:18:18,182
rewrite, splitting, SQL audit. That means SQL

275
00:18:18,246 --> 00:18:21,694
Fairwall and elastic skilling skew out

276
00:18:21,732 --> 00:18:24,462
such features. And the next one,

277
00:18:24,516 --> 00:18:27,614
that it gave you another way to help

278
00:18:27,652 --> 00:18:30,766
you put your distributed database on

279
00:18:30,788 --> 00:18:33,220
the Kubernetes cluster, right?

280
00:18:33,830 --> 00:18:38,322
Plus because sharding Sophia, it provide the

281
00:18:38,376 --> 00:18:42,062
operators and provide the helm charts.

282
00:18:42,126 --> 00:18:45,606
So it actually provide your out

283
00:18:45,628 --> 00:18:49,670
of box deployment way to help you to

284
00:18:49,820 --> 00:18:53,122
upgrade all of your database infrastructure,

285
00:18:53,186 --> 00:18:57,174
become a distributed one and make it happen in the

286
00:18:57,212 --> 00:19:01,034
Kubernetes cluster. Yeah, so I

287
00:19:01,072 --> 00:19:03,658
mentioned many times about this open source project,

288
00:19:03,744 --> 00:19:06,966
Apache Sharding Sophia so what's Apache Sharding Sophia?

289
00:19:07,158 --> 00:19:09,660
It's an Apache Toplab project.

290
00:19:10,130 --> 00:19:14,826
And this project, basically it's

291
00:19:14,858 --> 00:19:18,314
a database proxy, right? And this database proxy

292
00:19:18,362 --> 00:19:21,518
or database ending can help you.

293
00:19:21,684 --> 00:19:25,742
Here it's introduction. Transfer any monolithic

294
00:19:25,806 --> 00:19:29,698
databases into a distributed one. And also

295
00:19:29,784 --> 00:19:33,522
provide more grateful features like I introduced before,

296
00:19:33,656 --> 00:19:37,782
rewrite it and auto scaling case out data

297
00:19:37,836 --> 00:19:42,226
sharding and SQL firewall or SQL audit

298
00:19:42,338 --> 00:19:46,550
or logging all of the grateful features around your database.

299
00:19:46,970 --> 00:19:50,918
And because this project has open sourced

300
00:19:51,014 --> 00:19:54,954
for more than five or six years, so it has

301
00:19:54,992 --> 00:19:58,634
a mature community, that means you don't worry that you

302
00:19:58,672 --> 00:20:02,158
are the first person to use this project. Many people

303
00:20:02,244 --> 00:20:05,486
already help you check this rifle and

304
00:20:05,508 --> 00:20:07,680
to test this project.

305
00:20:08,850 --> 00:20:13,034
And it provide many user

306
00:20:13,082 --> 00:20:16,814
cases and the documents to help you quickly sign

307
00:20:16,852 --> 00:20:21,054
up and use this project. Yeah, so that's the basic introduction

308
00:20:21,102 --> 00:20:25,146
about this project. The last one I will give some introduction

309
00:20:25,198 --> 00:20:29,094
about the features because that's the important

310
00:20:29,212 --> 00:20:32,280
part, that's the value of this project.

311
00:20:33,130 --> 00:20:37,078
So Apache Sharding Sophia, it has

312
00:20:37,164 --> 00:20:41,690
two clients for you to choose. The first one, sharding Sophia GDBC.

313
00:20:42,510 --> 00:20:46,118
Actually it's a Java driver for your Java

314
00:20:46,214 --> 00:20:50,130
application. When you import sharding Sophia JDBC

315
00:20:50,230 --> 00:20:54,062
into your application. It can help you do

316
00:20:54,116 --> 00:20:58,730
the following features or the functions the data sharding

317
00:20:58,890 --> 00:21:02,330
elastic skew out distributed transaction

318
00:21:02,410 --> 00:21:05,794
rewrite, splitting or data

319
00:21:05,912 --> 00:21:09,794
encryption or data masking actually

320
00:21:09,912 --> 00:21:13,566
because okay, another client is sharding

321
00:21:13,598 --> 00:21:17,526
Sophia proxy. It's a database proxy. So your application

322
00:21:17,628 --> 00:21:21,830
no matter is the Java or your Golong or the

323
00:21:21,980 --> 00:21:25,046
PHP, you can just use some the

324
00:21:25,148 --> 00:21:28,966
standard database driver and to visit sharding

325
00:21:28,998 --> 00:21:33,046
Sophia proxy and sharding Sophia proxy or sharding Sophia

326
00:21:33,078 --> 00:21:37,580
GDBC for your application. You can just

327
00:21:38,190 --> 00:21:42,474
regard it as a distributed database

328
00:21:42,602 --> 00:21:46,126
or the server. But the Sharding Sophia proxy or

329
00:21:46,148 --> 00:21:50,766
sharding Sophia GDBC actually it help you manage

330
00:21:50,948 --> 00:21:54,154
your MySQL PostgreSQL

331
00:21:54,282 --> 00:21:58,062
Oracle SQL servever database cluster.

332
00:21:58,206 --> 00:22:01,906
That means it's not just to

333
00:22:01,928 --> 00:22:06,082
help you manage your database cluster, it can enhance

334
00:22:06,146 --> 00:22:10,374
this database cluster to make it become a distributed one

335
00:22:10,492 --> 00:22:14,674
and enhance it with a lot of useful database

336
00:22:14,802 --> 00:22:18,760
or the features you case around your system.

337
00:22:19,450 --> 00:22:23,590
So you can see here that all the features

338
00:22:23,670 --> 00:22:27,594
and all the databases it support and

339
00:22:27,712 --> 00:22:31,520
it's the deployment architecture for you to choose.

340
00:22:32,290 --> 00:22:36,334
So today I

341
00:22:36,372 --> 00:22:39,998
will use this sharding Sophia proxy to help you do this demo

342
00:22:40,084 --> 00:22:43,598
show. That means at the beginning your application

343
00:22:43,764 --> 00:22:47,710
just visit your primary postgresql instance

344
00:22:47,790 --> 00:22:51,314
or replica postgresql instance. But now

345
00:22:51,432 --> 00:22:55,038
your application no need to care too

346
00:22:55,144 --> 00:22:59,190
many replica instance or primary instance,

347
00:23:00,330 --> 00:23:03,110
just visit sharding Sophia.

348
00:23:03,850 --> 00:23:07,426
There's only single database server and

349
00:23:07,468 --> 00:23:11,322
this database proxy. This database server help you to

350
00:23:11,376 --> 00:23:15,370
manage all of your database clusters to do the

351
00:23:15,520 --> 00:23:19,030
rewrite, splitting right data sharding,

352
00:23:19,190 --> 00:23:22,934
data masking data SQL audit,

353
00:23:23,062 --> 00:23:27,086
all of the great four features you want to use for your

354
00:23:27,188 --> 00:23:27,840
application.

355
00:23:31,330 --> 00:23:34,558
The NAS part it's about sharding Sophia and cloud.

356
00:23:34,724 --> 00:23:37,970
That means okay so sharding Sophia is so great

357
00:23:38,040 --> 00:23:42,414
but I want to easily use it and want to deploy

358
00:23:42,462 --> 00:23:45,646
this stateless proxy,

359
00:23:45,838 --> 00:23:49,782
I mean the computing node cluster into your

360
00:23:49,836 --> 00:23:53,286
Kubernetes cluster. So sharding Sophia on

361
00:23:53,308 --> 00:23:56,594
cloud is a ripple to provide the helm

362
00:23:56,642 --> 00:24:00,250
chart operators to help you automatically

363
00:24:01,070 --> 00:24:04,902
skill in, skill out and deploy this database

364
00:24:04,966 --> 00:24:06,300
cluster. Yeah,

365
00:24:07,870 --> 00:24:11,040
so you can see here,

366
00:24:11,410 --> 00:24:15,454
first you need to use sharding Sophia operator charts to

367
00:24:15,492 --> 00:24:18,974
deploy sharding Sophia proxy into your

368
00:24:19,012 --> 00:24:22,126
Kubernetes cluster. And plus you need

369
00:24:22,148 --> 00:24:26,162
to pick up postgreSql charts to deploy your

370
00:24:26,216 --> 00:24:29,554
postgreSql into the Kubernetes. But if

371
00:24:29,592 --> 00:24:32,830
you already have your RDs on AWs

372
00:24:32,910 --> 00:24:37,010
or on google then you no need

373
00:24:37,080 --> 00:24:40,342
to use the postgresql chart to deploy it into

374
00:24:40,396 --> 00:24:43,830
your Kubernetes cluster, right? Like I mentioned before,

375
00:24:43,980 --> 00:24:47,982
you can just leverage the RDS server

376
00:24:48,146 --> 00:24:52,186
from your database vendor and just

377
00:24:52,288 --> 00:24:56,886
deploy your computing nodes of this distributed

378
00:24:56,918 --> 00:25:00,434
database system into your Kubernetes

379
00:25:00,502 --> 00:25:03,946
cluster, right? And your computing

380
00:25:03,978 --> 00:25:08,190
nodes can directly visit your rds or the

381
00:25:08,340 --> 00:25:11,550
databases on the Kubernetes. Anyway,

382
00:25:11,700 --> 00:25:15,966
yeah, so today I'll

383
00:25:15,998 --> 00:25:19,822
give this solution detailedly

384
00:25:19,886 --> 00:25:23,650
because this slides I introduce how to deploy it.

385
00:25:23,720 --> 00:25:27,734
The second one, after you deploy it you will consider how

386
00:25:27,772 --> 00:25:31,320
to create a sharding table or how to because

387
00:25:34,090 --> 00:25:38,454
when you use sharding Sophia proxy, actually you are using the distributed

388
00:25:38,502 --> 00:25:42,234
database system. That means if you want

389
00:25:42,272 --> 00:25:46,342
to create a table, it's not a single table in one postgres

390
00:25:46,406 --> 00:25:52,522
sentencing it's a distributed sharding table locating

391
00:25:52,666 --> 00:25:56,558
in different postgresql. But for your application

392
00:25:56,724 --> 00:26:01,066
it's just a single one logic databases

393
00:26:01,178 --> 00:26:04,430
database or single one logic table.

394
00:26:04,590 --> 00:26:08,114
But this logic table for example, this one

395
00:26:08,232 --> 00:26:11,602
user table, it's made up of

396
00:26:11,656 --> 00:26:15,982
1234 subtables or physical

397
00:26:16,046 --> 00:26:19,954
tables live in different,

398
00:26:20,152 --> 00:26:23,778
I mean here postgresql instance

399
00:26:23,954 --> 00:26:27,910
and each cluster of Postgresql

400
00:26:29,870 --> 00:26:33,814
has a primary node and replica

401
00:26:33,862 --> 00:26:38,342
nodes, right? So you can see here there are two postgres

402
00:26:38,406 --> 00:26:42,550
cluster. Each one has the one primary

403
00:26:42,630 --> 00:26:46,320
node and replica nodes and your

404
00:26:46,690 --> 00:26:50,778
logical single table logic

405
00:26:50,954 --> 00:26:55,234
table user. For your application there is only one

406
00:26:55,432 --> 00:26:59,570
table, but this t user table,

407
00:27:00,070 --> 00:27:05,720
it has 11234

408
00:27:06,090 --> 00:27:10,646
physical tables, right? So here we use

409
00:27:10,828 --> 00:27:15,122
distributed SQL, this SQL

410
00:27:15,266 --> 00:27:19,942
dialect of sharding Sophia to help you define

411
00:27:20,086 --> 00:27:23,802
this user table. For example, if you

412
00:27:23,856 --> 00:27:27,674
just use the created table t order, that means it

413
00:27:27,712 --> 00:27:30,294
can help you create a single one table.

414
00:27:30,422 --> 00:27:34,458
But you use the distributed SQL, this SQL dialogue

415
00:27:34,474 --> 00:27:38,094
of sharding Sophia, it can help you to create a

416
00:27:38,132 --> 00:27:41,774
sharding table here. So you can see here we use

417
00:27:41,812 --> 00:27:45,726
this keyword sharding table, not just a table,

418
00:27:45,838 --> 00:27:49,794
right? So it's very easy for you to get use of

419
00:27:49,832 --> 00:27:53,540
this distributed SQL language to help you to

420
00:27:54,470 --> 00:27:58,194
manage or define your sharding

421
00:27:58,322 --> 00:28:02,198
database system or this

422
00:28:02,284 --> 00:28:05,190
logic, I mean the tables or databases.

423
00:28:06,090 --> 00:28:10,198
Yeah. So first

424
00:28:10,284 --> 00:28:13,814
when you deploy it, second one, you create a sharding database

425
00:28:13,862 --> 00:28:17,754
and sharding table. Then your application just send

426
00:28:17,792 --> 00:28:21,438
a request to your computing nodes or

427
00:28:21,524 --> 00:28:25,534
this whole database distributed system.

428
00:28:25,732 --> 00:28:30,250
For example, this application standard requiring

429
00:28:30,410 --> 00:28:33,922
here and when your proxy receive this

430
00:28:33,976 --> 00:28:37,202
query it will do the following steps and

431
00:28:37,256 --> 00:28:41,182
to calculate which postgres

432
00:28:41,246 --> 00:28:45,654
shell instance, owen the

433
00:28:45,692 --> 00:28:49,730
readout of this query and Charlene Sophia

434
00:28:49,890 --> 00:28:53,110
will send the query to the

435
00:28:53,180 --> 00:28:56,870
target. Maybe one or maybe many

436
00:28:57,020 --> 00:29:01,174
postgresql instance. And to get the

437
00:29:01,212 --> 00:29:05,098
local results together

438
00:29:05,264 --> 00:29:08,810
and then calculate the final result or

439
00:29:08,880 --> 00:29:12,230
merge the sub result

440
00:29:12,400 --> 00:29:16,686
into the final one and send the final result to your application.

441
00:29:16,868 --> 00:29:20,542
So that's the basic parasites of each

442
00:29:20,596 --> 00:29:24,302
query. The last part is the dymo

443
00:29:24,366 --> 00:29:27,106
show. I have no enough time here,

444
00:29:27,208 --> 00:29:31,010
but you can see here we just deploy PostgreSQl

445
00:29:31,430 --> 00:29:35,210
working as the storage nodes into your Kubernetes.

446
00:29:35,310 --> 00:29:38,642
But actually here you can just use your RDS.

447
00:29:38,706 --> 00:29:42,690
It's okay. The second one deploy sharding Sophia proxy

448
00:29:42,850 --> 00:29:46,818
and then to create your sharding table

449
00:29:46,914 --> 00:29:50,666
and insert some day testing data and to

450
00:29:50,768 --> 00:29:54,678
ask you the query to test it's

451
00:29:54,694 --> 00:29:59,178
okay or not. Yeah, so I

452
00:29:59,264 --> 00:30:02,800
already do this demo by myself. You can see here

453
00:30:03,170 --> 00:30:06,878
how to deploy it, how to create the

454
00:30:06,964 --> 00:30:10,862
database and the table and

455
00:30:10,916 --> 00:30:14,458
how to let your proxy vivid

456
00:30:14,634 --> 00:30:18,890
your RDS or your postgresql instance

457
00:30:19,050 --> 00:30:22,794
and then how to define your sharding

458
00:30:22,842 --> 00:30:26,738
table here and then how to insert

459
00:30:26,834 --> 00:30:30,598
the testing data and how to

460
00:30:30,684 --> 00:30:34,518
ask you to test it. Works well or not.

461
00:30:34,684 --> 00:30:38,342
All right, so that's all about this talk. If you have some

462
00:30:38,396 --> 00:30:42,662
questions you can just ask

463
00:30:42,716 --> 00:30:46,898
me here or visit my linking or GitHub or Twitter.

464
00:30:47,074 --> 00:30:48,900
All right, thanks for your time. See you.

