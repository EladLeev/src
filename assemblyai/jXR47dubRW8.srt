1
00:00:23,450 --> 00:00:26,520
Hello everyone, welcome to may talk about the platform.

2
00:00:27,690 --> 00:00:29,960
Please welcome on stage three people.

3
00:00:30,570 --> 00:00:34,082
Victoria is the VP product of a very successful sales

4
00:00:34,146 --> 00:00:38,194
company. Alice is the principal software engineer

5
00:00:38,242 --> 00:00:40,760
there and John is a customer.

6
00:00:41,290 --> 00:00:45,570
John uses the backup and recovery product. He has five employees

7
00:00:45,650 --> 00:00:49,334
and he serves customers from the US. That's why

8
00:00:49,372 --> 00:00:52,880
he signed app to the app one region in the US.

9
00:00:53,970 --> 00:00:57,946
Nice to meet you Amila. I'm a software engineer and a scrum

10
00:00:57,978 --> 00:01:01,134
master. For more than eight years. I work at on

11
00:01:01,172 --> 00:01:04,706
ownbackup. We at on ownbackup solve these problem

12
00:01:04,808 --> 00:01:07,822
of managing users in multiple geographical regions

13
00:01:07,886 --> 00:01:10,866
with the platform. Like all of you,

14
00:01:10,888 --> 00:01:14,850
I'm a backend developer and I know how to write code. But after

15
00:01:14,920 --> 00:01:17,954
building the platform I'm more client facing developer.

16
00:01:18,002 --> 00:01:21,286
Now I understand the business and the client and

17
00:01:21,308 --> 00:01:24,120
that's why I'm so passionate about these platform.

18
00:01:25,370 --> 00:01:28,538
Let's go back to John. So John's company

19
00:01:28,624 --> 00:01:32,890
has been growing, so he has more employees and he serves

20
00:01:33,470 --> 00:01:37,082
customers from all over the world. That's why

21
00:01:37,136 --> 00:01:40,554
he has to sign up to the Emir region in Europe

22
00:01:40,602 --> 00:01:44,058
and to the australian region. Moreover,

23
00:01:44,154 --> 00:01:47,738
our imaginary SaaS company also growing so it buys

24
00:01:47,754 --> 00:01:51,390
a new security product. John wants this product.

25
00:01:51,540 --> 00:01:54,740
Isn't it amazing? No.

26
00:01:55,110 --> 00:01:58,306
This is exactly the challenge. John has

27
00:01:58,328 --> 00:02:02,430
to sign up again to the new regions and add all his employees.

28
00:02:02,590 --> 00:02:06,614
This is only for one product. He also wants the security product with

29
00:02:06,652 --> 00:02:10,306
a completely different UI. If he wants to add a user

30
00:02:10,338 --> 00:02:13,606
or remove a user, he has to repeat the process. What a

31
00:02:13,628 --> 00:02:16,760
mess. How can we help John?

32
00:02:18,190 --> 00:02:20,700
The solution is the platform.

33
00:02:21,630 --> 00:02:25,702
If you also struggle with managing users in multiple geographical

34
00:02:25,766 --> 00:02:29,466
regions, this talk is for you. I will share with you my

35
00:02:29,488 --> 00:02:32,826
experience from building these platform best practices,

36
00:02:32,938 --> 00:02:36,686
principles and guidelines that can fit each and every one

37
00:02:36,708 --> 00:02:38,190
of you in your organization.

38
00:02:40,610 --> 00:02:44,874
Back to our Victoria. Victoria is a really good manager

39
00:02:45,002 --> 00:02:47,440
so she always asks the right questions.

40
00:02:47,890 --> 00:02:51,906
She asks why? Why does it happen? Why does

41
00:02:51,928 --> 00:02:55,366
a user have to repeat these process again and again on each

42
00:02:55,388 --> 00:02:58,482
and every one of the regions? Alice,

43
00:02:58,626 --> 00:03:01,160
the developer immediately knew the answer.

44
00:03:02,170 --> 00:03:06,342
She said due to regulations, the sales company can

45
00:03:06,396 --> 00:03:09,862
take out the user's data outside of its geographical

46
00:03:09,926 --> 00:03:13,850
regions. They ended up with a very complex setup.

47
00:03:14,430 --> 00:03:17,766
Each region is a web server hosted in an EC

48
00:03:17,798 --> 00:03:22,350
two machine with completely different database and distinct URL.

49
00:03:23,090 --> 00:03:26,858
It's like islands. Me and a user in this island

50
00:03:26,954 --> 00:03:30,062
know anything about me as a user in that

51
00:03:30,116 --> 00:03:34,050
island, even though I have the same mail and the same username.

52
00:03:35,110 --> 00:03:39,410
Moreover, Alex added that the developers are frustrated.

53
00:03:39,990 --> 00:03:44,398
The different products were written in different times with different technologies.

54
00:03:44,574 --> 00:03:48,382
So when a developer has to use another product ability.

55
00:03:48,526 --> 00:03:52,082
It's very complicated and in most of the times he finds

56
00:03:52,146 --> 00:03:55,398
himself writing the same code again and again.

57
00:03:55,564 --> 00:03:57,880
No, it's not a good practice. Right.

58
00:03:59,870 --> 00:04:03,594
Victoria understood that something has to be done. She needs

59
00:04:03,632 --> 00:04:07,242
a solution. So she thought really

60
00:04:07,296 --> 00:04:11,680
long and really hard and came up with a vision. The platform.

61
00:04:13,250 --> 00:04:16,846
She handled an urgent meeting with all of the stakeholders and shared a

62
00:04:16,868 --> 00:04:20,702
vision. She wants one single login with

63
00:04:20,756 --> 00:04:24,414
one username and password to access all the regions,

64
00:04:24,542 --> 00:04:27,220
product and SaaS providers that we support.

65
00:04:28,310 --> 00:04:32,130
These user will enjoy centralized account and user management.

66
00:04:33,110 --> 00:04:36,930
All of it will be wrapped up in modern and unified

67
00:04:37,010 --> 00:04:38,120
user experience.

68
00:04:39,530 --> 00:04:42,470
Obviously the solution has to be secured.

69
00:04:44,090 --> 00:04:47,378
Alice was really excited about a new project,

70
00:04:47,564 --> 00:04:50,998
so she went to the window, started to draw rectangles,

71
00:04:51,094 --> 00:04:55,110
circles, arrows, cloud, you know, a developer

72
00:04:55,270 --> 00:04:58,822
and came up with a plan. She understood

73
00:04:58,966 --> 00:05:01,978
that her main problem are the distinct database.

74
00:05:02,154 --> 00:05:06,314
Says that each user has different identity

75
00:05:06,442 --> 00:05:09,070
on each and every one of the databases.

76
00:05:09,810 --> 00:05:13,698
She has to merge all the regions together so

77
00:05:13,784 --> 00:05:17,780
each user will have one identity across all the system.

78
00:05:18,310 --> 00:05:22,462
She needs one global service to be responsible

79
00:05:22,606 --> 00:05:27,166
for the user authentication authorization, managing the passwords,

80
00:05:27,278 --> 00:05:31,506
enforce central account configuration support, security settings

81
00:05:31,538 --> 00:05:34,790
like multi factor authentication, single sign on

82
00:05:34,860 --> 00:05:37,000
expiration works and more.

83
00:05:37,870 --> 00:05:41,014
Wow, sounds like a lot of work for Alice,

84
00:05:41,062 --> 00:05:44,794
right? Actually this is exactly what

85
00:05:44,832 --> 00:05:48,234
an IDP is for. IDP stands for

86
00:05:48,272 --> 00:05:52,298
identity provider. It's a service that is responsible

87
00:05:52,394 --> 00:05:56,250
for user authentication and authorization. It provides

88
00:05:56,330 --> 00:05:59,966
one single login to all the application depends on the

89
00:05:59,988 --> 00:06:03,878
user identity and permissions. We atone

90
00:06:03,914 --> 00:06:06,850
backup these okta as our IDP.

91
00:06:07,670 --> 00:06:11,570
Let's have a brief with the user authentication flow.

92
00:06:12,630 --> 00:06:16,354
When the users wants to log into the system, he is being redirected

93
00:06:16,402 --> 00:06:20,322
to okta login page. There he enters his username

94
00:06:20,386 --> 00:06:23,894
and password and click on the sign in. He is being

95
00:06:23,932 --> 00:06:28,554
redirected again with the authorization code there.

96
00:06:28,672 --> 00:06:32,502
These service attached the authorization code to the client secret

97
00:06:32,566 --> 00:06:36,742
and client id of the Okta app. We use OpenID

98
00:06:36,806 --> 00:06:40,506
connect protocol. It's an and other identity layer

99
00:06:40,538 --> 00:06:44,430
on top of Oauth two protocol to provide user authentication.

100
00:06:45,490 --> 00:06:49,514
These the Okta OpenID connect app responds

101
00:06:49,562 --> 00:06:53,326
with the JWT Jason web token aka

102
00:06:53,438 --> 00:06:57,278
Jawat. These gear region validates this jawat

103
00:06:57,374 --> 00:07:00,210
and when it is approved he can start the session.

104
00:07:02,230 --> 00:07:06,354
Wow. So now we have one globally user

105
00:07:06,402 --> 00:07:10,034
management service. He is serving all the geographical

106
00:07:10,082 --> 00:07:13,750
regions. Actually we created another

107
00:07:13,820 --> 00:07:17,518
problem. The communication between them has to be secure

108
00:07:17,554 --> 00:07:20,986
and encrypted. In order to achieve that we

109
00:07:21,008 --> 00:07:23,370
used mtls and HTTPs.

110
00:07:24,190 --> 00:07:27,690
You probably ask yourself, what is mtls?

111
00:07:28,270 --> 00:07:32,554
MTLS stands for mutual tls transport

112
00:07:32,602 --> 00:07:36,138
layer security. In TLS the client

113
00:07:36,234 --> 00:07:40,314
validates the identity of the server together with the certificate

114
00:07:40,362 --> 00:07:43,870
authority. It's a public and trusted entity

115
00:07:44,870 --> 00:07:48,946
aka ca. So the

116
00:07:48,968 --> 00:07:52,478
flow the clients do a request to the server.

117
00:07:52,654 --> 00:07:55,846
The server responds with the certificate and the name of the

118
00:07:55,868 --> 00:07:59,474
certificate authority. The client validates

119
00:07:59,522 --> 00:08:03,666
this certificate together with the certificate authority. He is checking

120
00:08:03,698 --> 00:08:07,142
the common name of the server. When it is

121
00:08:07,196 --> 00:08:11,334
approved he can start a communication mtls.

122
00:08:11,382 --> 00:08:14,982
As we said, it's mutual TLS. So both the client

123
00:08:15,046 --> 00:08:17,660
and these server validating each other.

124
00:08:20,210 --> 00:08:24,394
We also have to make sure that the service is authorized

125
00:08:24,442 --> 00:08:28,254
to perform the action that he is requesting. In order

126
00:08:28,292 --> 00:08:31,550
to achieve that, we use machine to machine tokens.

127
00:08:32,770 --> 00:08:36,194
When a service in the sales region wants to communicate with

128
00:08:36,232 --> 00:08:39,774
a service from the global cluster, he is requesting

129
00:08:39,822 --> 00:08:43,266
the authorization server in Okta. Like hello,

130
00:08:43,368 --> 00:08:46,790
I'm the backup and recoverer service from app one.

131
00:08:46,940 --> 00:08:50,646
I want to go to the user service from the

132
00:08:50,668 --> 00:08:53,990
global cluster. I'm asking for read permissions.

133
00:08:54,570 --> 00:08:58,966
The authorization server responds with the Jawat again JSon

134
00:08:58,998 --> 00:09:03,658
Web token the service in the gear region forward

135
00:09:03,744 --> 00:09:07,610
this jawat in the headers to the service in the global cluster.

136
00:09:08,190 --> 00:09:11,706
The service then validates this jawat

137
00:09:11,818 --> 00:09:15,230
and when it is approved he responds

138
00:09:16,210 --> 00:09:18,030
with the requested resource.

139
00:09:21,090 --> 00:09:24,830
Okay, so now Alice has one entity

140
00:09:24,910 --> 00:09:29,010
to manage all her users. It's a global and secure entity,

141
00:09:29,830 --> 00:09:33,202
but our imaginary SaaS company serves thousands of

142
00:09:33,256 --> 00:09:37,826
clients. So this service has to be scalable,

143
00:09:38,018 --> 00:09:41,766
support high performance and high availability for all

144
00:09:41,788 --> 00:09:45,030
the users in all the products in all the regions.

145
00:09:46,170 --> 00:09:49,500
Moreover, the platform is the entry point to the system,

146
00:09:50,110 --> 00:09:54,122
so it has to be resilient. We don't want our

147
00:09:54,176 --> 00:09:57,722
poor customer John to get this error while

148
00:09:57,776 --> 00:10:00,060
he tries to log into the system right.

149
00:10:01,070 --> 00:10:04,286
In order to achieve that in on ownbackup, we decided to

150
00:10:04,308 --> 00:10:07,662
keep up with the technology and split the monolith into

151
00:10:07,716 --> 00:10:11,646
microservice architecture. We also used the

152
00:10:11,668 --> 00:10:15,934
managed solution of Kubernetes. This helped

153
00:10:15,982 --> 00:10:18,206
us to achieve high availability,

154
00:10:18,398 --> 00:10:21,150
scalability, self healing,

155
00:10:21,310 --> 00:10:24,718
rolling updates, scaling up and scaling down according

156
00:10:24,734 --> 00:10:26,920
to demand and much more.

157
00:10:27,610 --> 00:10:30,854
Let's have a look on the tech stack from high level.

158
00:10:31,052 --> 00:10:34,086
So the first layer is Kubernetes. As we said.

159
00:10:34,268 --> 00:10:37,862
The next layer are the docker containers. We have

160
00:10:37,916 --> 00:10:40,714
base image that is built once in a while.

161
00:10:40,912 --> 00:10:44,374
From it we build the service image and the test image

162
00:10:44,422 --> 00:10:47,530
when needed. We store the images in the ECR.

163
00:10:48,030 --> 00:10:51,594
Each docker container runs a process of G unicorn together

164
00:10:51,712 --> 00:10:57,294
with Fastapi. Fast API is

165
00:10:57,332 --> 00:11:01,790
a Python web framework that is designed for high performance speed.

166
00:11:02,530 --> 00:11:05,986
Among the many advantages of FastAPi, we'll average a

167
00:11:06,008 --> 00:11:09,454
few. Fast API supports

168
00:11:09,502 --> 00:11:13,122
many plugins, for example, pedantic for data

169
00:11:13,176 --> 00:11:16,754
validation, serialization, SQL alchemy

170
00:11:16,802 --> 00:11:18,470
for database integrations,

171
00:11:19,530 --> 00:11:21,622
middleware mechanism and much.

172
00:11:21,676 --> 00:11:25,494
Moreover, Fastapi has

173
00:11:25,532 --> 00:11:29,198
the ability to support auto generation of open API

174
00:11:29,234 --> 00:11:32,650
documentation. We can take this

175
00:11:32,720 --> 00:11:36,842
documentation and forward to the other streams in our company

176
00:11:36,976 --> 00:11:40,250
for better and streamlined communication and integration.

177
00:11:42,510 --> 00:11:45,614
So now we finish with our tech part.

178
00:11:45,812 --> 00:11:48,240
Do you remember what I told you about myself?

179
00:11:49,810 --> 00:11:53,250
No, it's fine. But I hope you still remember John,

180
00:11:53,320 --> 00:11:56,878
our client the platform has many advantages

181
00:11:56,974 --> 00:12:01,102
for the customers. Single login with one password

182
00:12:01,166 --> 00:12:04,094
and one username to access all the regions,

183
00:12:04,222 --> 00:12:08,262
products and SaaS providers that we support with

184
00:12:08,316 --> 00:12:12,118
one click, with one set of credentials, the user will enjoy

185
00:12:12,204 --> 00:12:16,278
central account and user management. We support

186
00:12:16,364 --> 00:12:20,394
consistent security settings and account configurations from

187
00:12:20,512 --> 00:12:24,234
one place to all the system. We now

188
00:12:24,272 --> 00:12:28,134
provide cross product abilities as you probably don't

189
00:12:28,182 --> 00:12:31,434
remember, John used both the backup and recovery

190
00:12:31,482 --> 00:12:35,034
solution and the security product. We can now scan

191
00:12:35,082 --> 00:12:38,446
his data from the backup and alert for potential security

192
00:12:38,548 --> 00:12:41,978
risks to the security product. Yes, I know it's

193
00:12:41,994 --> 00:12:45,514
smart. All of it will be wrapped

194
00:12:45,562 --> 00:12:49,220
up in a modern and unified UI and user experience.

195
00:12:50,310 --> 00:12:52,740
John is really happy now.

196
00:12:54,890 --> 00:12:58,690
Do you want to hear a secret? A successful

197
00:12:58,770 --> 00:13:02,870
product is a product that generates new revenue streams.

198
00:13:03,530 --> 00:13:06,760
Thanks to the platform, we improved our business.

199
00:13:07,370 --> 00:13:10,090
We enhance the cross selling processes.

200
00:13:10,590 --> 00:13:14,394
When the user is already logged into the system, he can

201
00:13:14,432 --> 00:13:18,058
navigate and see all the other product that we provide him.

202
00:13:18,224 --> 00:13:21,630
He can click on them, see the information and even

203
00:13:21,700 --> 00:13:25,306
click and start a free trial. Without a salesperson,

204
00:13:25,498 --> 00:13:29,262
he is more likely to buy more

205
00:13:29,316 --> 00:13:33,550
products. We also enhance the app sellings

206
00:13:33,990 --> 00:13:37,486
thanks to the simple onboarding and easy navigation.

207
00:13:37,598 --> 00:13:41,902
It's easier now for a user to sign up to new regions

208
00:13:42,046 --> 00:13:44,770
and add all his existing users.

209
00:13:46,090 --> 00:13:49,426
On top of that, these release

210
00:13:49,458 --> 00:13:52,902
of new products is easier. Now the

211
00:13:52,956 --> 00:13:56,566
R D team can be focused on the business logic of the

212
00:13:56,588 --> 00:14:00,214
service without all the infrastructure that the platform is

213
00:14:00,252 --> 00:14:01,480
handling for him.

214
00:14:04,010 --> 00:14:07,160
John, the customer is really happy now

215
00:14:07,610 --> 00:14:11,374
the developers are more productive it and we

216
00:14:11,412 --> 00:14:15,162
make more money. We solve the user management

217
00:14:15,226 --> 00:14:19,086
in multiple geographical regions problem here

218
00:14:19,188 --> 00:14:22,382
my story ends and these is exactly the right

219
00:14:22,436 --> 00:14:25,882
time for you to go and implement your next generation

220
00:14:25,946 --> 00:14:29,294
platform. Good luck. Thank you.

