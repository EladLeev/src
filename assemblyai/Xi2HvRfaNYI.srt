1
00:00:27,410 --> 00:00:31,506
Hello, my name is Marbente, I'm a principal

2
00:00:31,538 --> 00:00:35,362
engineer at Cisco Systems. I've been working on Kubernetes

3
00:00:35,426 --> 00:00:38,726
for the last five years. Today's talk is

4
00:00:38,748 --> 00:00:42,406
about Sveltos. Sveltos is an open source project that I

5
00:00:42,428 --> 00:00:45,762
developed which aims at simplifying kubernetes

6
00:00:45,826 --> 00:00:49,910
advanced distributions. When you have tens of clusters

7
00:00:51,570 --> 00:00:55,770
today, it's very easy for an organization

8
00:00:55,930 --> 00:01:00,282
to have multiple clusters and to have those kubernetes

9
00:01:00,346 --> 00:01:03,470
clusters in different cloud providers or infrastructures.

10
00:01:03,630 --> 00:01:06,734
And when you have that many clusters consistently

11
00:01:06,782 --> 00:01:11,118
managing addons, it's not a very easy task.

12
00:01:11,294 --> 00:01:14,910
Sveltos is a lightweight application that can

13
00:01:15,000 --> 00:01:18,374
be installed in the management cluster and that can

14
00:01:18,412 --> 00:01:22,134
manage kubernetes add ons in any cluster that

15
00:01:22,172 --> 00:01:25,750
is directly reachable from the managed cluster.

16
00:01:26,170 --> 00:01:29,638
Sveltos comes with built in support for cluster API.

17
00:01:29,814 --> 00:01:33,894
Cluster API it's another open resources project which is widely

18
00:01:33,942 --> 00:01:38,490
used to consistently create upgrade urban Kubernetes clusters.

19
00:01:40,270 --> 00:01:43,806
Sveltos as I mentioned has built in support for cluster API and

20
00:01:43,828 --> 00:01:47,674
that means that if Sveltos is installed in a management cluster

21
00:01:47,722 --> 00:01:51,022
where cluster API is also present, no action needed

22
00:01:51,076 --> 00:01:54,414
to be taken. Sveltos can automatically detect

23
00:01:54,542 --> 00:01:57,682
any cluster API public cluster and

24
00:01:57,736 --> 00:02:01,006
manage kubernetes add ons in such cluster. But Sveltos

25
00:02:01,038 --> 00:02:04,226
is not limited to cluster API. If you

26
00:02:04,248 --> 00:02:07,554
have a GKE cluster Anyks cluster and you want

27
00:02:07,592 --> 00:02:11,270
Sveltos to manage add ons in such clusters, you can

28
00:02:11,340 --> 00:02:14,614
easily register this cluster with Sveltos and from that point

29
00:02:14,652 --> 00:02:17,926
on Sveltos can seamless manage kubernetes add

30
00:02:17,948 --> 00:02:20,170
ons in any cluster.

31
00:02:20,990 --> 00:02:24,314
I'm not going into detail of how

32
00:02:24,352 --> 00:02:26,570
to register a cluster with Sveltos.

33
00:02:27,310 --> 00:02:30,940
It's a very simple procedure which is listed in the

34
00:02:31,870 --> 00:02:35,438
Sveltos documentation. So please

35
00:02:35,524 --> 00:02:37,200
refer to that one.

36
00:02:39,330 --> 00:02:43,330
What I want to highlight here is that any cluster

37
00:02:43,830 --> 00:02:47,262
it's represented in the management cluster.

38
00:02:47,326 --> 00:02:50,894
So cluster API power clusters represent the management cluster

39
00:02:50,942 --> 00:02:54,942
by the cluster API cluster CRD any

40
00:02:55,016 --> 00:02:58,530
cluster which type GKE which is registered with Sveltos

41
00:02:58,610 --> 00:03:02,354
it requirements a management cluster by Sveltos

42
00:03:02,402 --> 00:03:07,426
Cluster CLD instance. So how does Sveltos

43
00:03:07,618 --> 00:03:10,570
solve this kubernetes add ons distribution?

44
00:03:12,270 --> 00:03:15,366
Those idea is simple. Select a subset

45
00:03:15,398 --> 00:03:18,826
of the cluster that we manage and list the add ons that we have

46
00:03:18,848 --> 00:03:22,110
to deploys in such clusters.

47
00:03:24,050 --> 00:03:27,962
In this example I have a cluster profile inserts.

48
00:03:28,026 --> 00:03:32,030
Cluster profile is one of the Sveltos crbs

49
00:03:32,530 --> 00:03:35,550
and the cluster profile spec section has

50
00:03:35,620 --> 00:03:39,314
two main solutions. Those is a cluster selector and

51
00:03:39,352 --> 00:03:43,454
there is an l chart section. Those cluster selector

52
00:03:43,582 --> 00:03:46,782
it's a pure Kubernetes label selector.

53
00:03:46,926 --> 00:03:52,930
In this case this cluster profile. It's telling

54
00:03:53,430 --> 00:03:56,886
us Sveltos to selects any cluster that matches that has the

55
00:03:56,908 --> 00:04:01,146
label environment production and it

56
00:04:01,168 --> 00:04:04,666
is also this cluster profile. It's also instructing Sveltos to

57
00:04:04,688 --> 00:04:08,810
deploy Caverno L charts version 2.5.0

58
00:04:08,880 --> 00:04:12,302
in any such cluster. So what

59
00:04:12,356 --> 00:04:16,270
happens if we add those label environment production to

60
00:04:16,340 --> 00:04:20,830
the two workflow clusters? Well, Sveltos automatically

61
00:04:21,170 --> 00:04:25,150
detects that those two clusters are a match for this cluster profile

62
00:04:25,310 --> 00:04:29,154
because this cluster profile is saying that the Caverno charts needs to

63
00:04:29,192 --> 00:04:32,542
deploy those sveltos automatically deploys caverno

64
00:04:32,606 --> 00:04:34,850
in but clusters.

65
00:04:36,650 --> 00:04:41,014
Now one thing which is important is that if you

66
00:04:41,052 --> 00:04:44,690
are when you deploy an elm, shark or Kubernetes

67
00:04:44,770 --> 00:04:48,786
resource in many clusters, very likely

68
00:04:48,898 --> 00:04:53,086
you need to customize the helm shard

69
00:04:53,138 --> 00:04:57,050
per clusters. For instance, if you are deploying

70
00:04:57,710 --> 00:05:02,378
calico, you need to tell Calico what the podcider

71
00:05:02,554 --> 00:05:05,642
is. In this example I have a cluster

72
00:05:05,706 --> 00:05:09,882
profile which is instructing Sveltos

73
00:05:09,946 --> 00:05:13,706
to deploy Calico and it's

74
00:05:13,738 --> 00:05:17,258
also instructing Sveltos to fetch

75
00:05:17,434 --> 00:05:21,700
the podcider from those management cluster at

76
00:05:22,230 --> 00:05:26,180
runtime. Runtime means at the very

77
00:05:27,510 --> 00:05:30,846
exact time when Sveltos is deploying

78
00:05:30,878 --> 00:05:34,982
calico in a cluster, fetch that

79
00:05:35,036 --> 00:05:38,726
information. And in this case Sveltos is fetching that information reading

80
00:05:38,758 --> 00:05:42,394
the cluster instance that represents the cluster and

81
00:05:42,432 --> 00:05:47,686
reading the spec cluster network cyber

82
00:05:47,718 --> 00:05:48,970
blocks fields.

83
00:05:52,210 --> 00:05:57,710
Now let's go back to our

84
00:05:57,780 --> 00:06:00,986
example. We had Sveltos deploy Caverno

85
00:06:01,018 --> 00:06:04,190
in any cluster with those label environment production.

86
00:06:04,350 --> 00:06:08,290
What happens if now one of the admin in

87
00:06:08,360 --> 00:06:11,838
one of the managed cluster detected the Caverno

88
00:06:11,854 --> 00:06:15,698
deployment. So we have one of the admin issue in

89
00:06:15,704 --> 00:06:19,174
the Kubectl delete deployment and what happens that

90
00:06:19,212 --> 00:06:22,950
Caverno gets deleted from the managed cluster.

91
00:06:23,370 --> 00:06:28,490
But if we do that now we have a workflow cluster state.

92
00:06:28,640 --> 00:06:32,666
It's different than the expected state. The expected state is what has

93
00:06:32,688 --> 00:06:36,586
been defined in the management cluster. The expected state or

94
00:06:36,608 --> 00:06:39,914
any cluster with label environment says that

95
00:06:39,952 --> 00:06:43,546
Caverna needs to be present. As of now Cavern has

96
00:06:43,568 --> 00:06:47,078
been deleted. So Sveltos has

97
00:06:47,104 --> 00:06:50,426
a configuration bring detection configuration bring

98
00:06:50,458 --> 00:06:53,630
detection means that there is can agent that Sveltos

99
00:06:53,710 --> 00:06:56,754
installs in

100
00:06:56,792 --> 00:07:00,418
each managed cluster and this agent has

101
00:07:00,504 --> 00:07:04,098
one very simple prone watch any

102
00:07:04,184 --> 00:07:07,714
resource which is deployed by Sveltos and if this

103
00:07:07,752 --> 00:07:11,886
resource is modified, notify immediately Sveltos

104
00:07:11,918 --> 00:07:14,840
running the management cluster. In this example,

105
00:07:15,370 --> 00:07:19,214
Caverno was one of the resources that Sveltos developed

106
00:07:19,282 --> 00:07:23,078
deployed in the managed cluster. But this resources has been deleted

107
00:07:23,174 --> 00:07:26,998
by issuing a command directly in the managed

108
00:07:27,014 --> 00:07:30,746
cluster. So the agent running in this managed

109
00:07:30,778 --> 00:07:34,442
cluster automatically immediately detects that there is a potential

110
00:07:34,506 --> 00:07:38,394
configuration grid and it informs Sveltos running the management

111
00:07:38,442 --> 00:07:42,634
cluster. As soon as Sveltos is informed, Sveltos reconciled

112
00:07:42,682 --> 00:07:46,320
back and by reconciling back, Caverno gets deployed back.

113
00:07:47,810 --> 00:07:51,794
The state of the workload cluster goes back in sync with

114
00:07:51,832 --> 00:07:55,226
the expected state defined in the management

115
00:07:55,278 --> 00:07:59,762
cluster and there is absolutely no admin

116
00:07:59,826 --> 00:08:01,400
intervention that is needed.

117
00:08:04,410 --> 00:08:07,480
In all the example we have considered so far,

118
00:08:09,050 --> 00:08:12,454
we has the management

119
00:08:12,502 --> 00:08:16,198
cluster admin set the labels on the clusters,

120
00:08:16,374 --> 00:08:20,018
but we are talking about managing

121
00:08:20,134 --> 00:08:23,514
tens, potentially hundreds of Kubernetes clusters,

122
00:08:23,642 --> 00:08:27,600
so we cannot expect those

123
00:08:29,730 --> 00:08:33,106
management cluster admin to be the only one in

124
00:08:33,128 --> 00:08:36,590
charge of setting the labels on each clusters.

125
00:08:36,750 --> 00:08:40,046
I wanted to have like a more intent

126
00:08:40,078 --> 00:08:43,460
based mechanism for that. I mean that

127
00:08:43,910 --> 00:08:49,560
I wanted to be able to say if

128
00:08:50,090 --> 00:08:54,102
cluster runtime state matches this,

129
00:08:54,236 --> 00:08:57,858
I want this set of labels to be automatically added

130
00:08:57,874 --> 00:09:01,340
to the cluster by Sveltos. Let's take an example.

131
00:09:02,030 --> 00:09:05,686
So we have a cluster profile which we can ignore

132
00:09:05,718 --> 00:09:09,514
for now. And we

133
00:09:09,552 --> 00:09:13,046
have a classifier classifier.

134
00:09:13,158 --> 00:09:17,034
It's another Sveltos CRT and those classifier

135
00:09:17,162 --> 00:09:20,526
in the spec section saying it has

136
00:09:20,548 --> 00:09:24,522
a Kubernetes version constraint saying if you see a cluster

137
00:09:24,666 --> 00:09:28,514
running Kubernetes version between prone 24

138
00:09:28,632 --> 00:09:32,466
and strictly less than 125, such a cluster is a match for

139
00:09:32,488 --> 00:09:36,702
this classifier. And any cluster which is a match for this classifier

140
00:09:36,846 --> 00:09:40,374
needs to have those classifier labels target. In this

141
00:09:40,412 --> 00:09:43,240
case the label are simply gatekeeper v three nine.

142
00:09:43,610 --> 00:09:47,814
So let's see what happens. In this example we have two clusters whose

143
00:09:47,862 --> 00:09:50,906
version is 124. Two.

144
00:09:51,008 --> 00:09:54,314
So they are both matching this classified. And because

145
00:09:54,352 --> 00:09:58,374
they are both matching this classifier, Sveltos automatically

146
00:09:58,422 --> 00:10:01,710
adds the label gatekeeper v three nine into both clusters.

147
00:10:03,010 --> 00:10:06,906
And when we use a classifier in combination with the cluster file,

148
00:10:07,018 --> 00:10:10,446
because now those labels, those clusters have the label gatekeeper v

149
00:10:10,468 --> 00:10:14,282
three nine, they are a match for this cluster

150
00:10:14,346 --> 00:10:16,702
file. And because they are a match for this cluster profile,

151
00:10:16,766 --> 00:10:19,650
gatekeeper gets deployed in the cluster.

152
00:10:22,310 --> 00:10:26,190
What happens now if we post another classifier

153
00:10:26,270 --> 00:10:30,434
instance? Classifier instance it has a different Kubernetes

154
00:10:30,482 --> 00:10:33,800
version constraint saying that any cluster running

155
00:10:34,170 --> 00:10:37,494
a Kubernetes versions greater or equal than

156
00:10:37,532 --> 00:10:41,526
125 is a match for this classifier. So what happens if we upgrade

157
00:10:41,558 --> 00:10:45,146
one of the clusters? If one

158
00:10:45,168 --> 00:10:48,774
of the cluster gets upgraded, it stops.

159
00:10:48,822 --> 00:10:52,126
Bring a match for the old classifier and it starts. Bring a

160
00:10:52,148 --> 00:10:55,950
match for the new classifier. Because a match for the new classifier,

161
00:10:56,370 --> 00:11:00,400
the labels is updated to gatekeeper v three

162
00:11:00,930 --> 00:11:05,418
because the label is updated. Now the classifier matches

163
00:11:05,514 --> 00:11:08,974
different class of file and because the classifier matches different

164
00:11:09,012 --> 00:11:13,566
class of the file, now a different version of gatekeeper is installed.

165
00:11:13,598 --> 00:11:17,510
So the gatekeeper gets upgraded from three 90

166
00:11:17,580 --> 00:11:21,154
to 3100. So combination

167
00:11:21,202 --> 00:11:25,938
the classifier with a cluster profile. We can automatically

168
00:11:26,034 --> 00:11:29,910
have Sveltos update the cluster labels

169
00:11:29,990 --> 00:11:33,900
based on the cluster runtime states and when the

170
00:11:34,510 --> 00:11:38,410
cluster labels change those cluster stop.

171
00:11:38,480 --> 00:11:41,882
Matching cluster files has matching different cluster files so those set

172
00:11:41,936 --> 00:11:47,638
of addons set gets deployed in the cluster changes classifier.

173
00:11:47,734 --> 00:11:51,674
It's not limited to classify a cluster based on the Kubernetes version.

174
00:11:51,722 --> 00:11:55,790
You can classify a cluster based on any resource.

175
00:11:55,950 --> 00:11:59,698
There are many examples that you can refer to

176
00:11:59,784 --> 00:12:03,330
in those Sveltos documentation.

177
00:12:07,290 --> 00:12:10,658
Sveltos also has support to take snapshot.

178
00:12:10,754 --> 00:12:14,406
Snapshot is another Sveltos CLD and in

179
00:12:14,428 --> 00:12:18,066
this case this snapshot

180
00:12:18,098 --> 00:12:22,220
instance is instructing Sveltos to take snapshots every hour.

181
00:12:22,750 --> 00:12:27,030
When Sveltos takes snapshot, it takes like a snapshot of the configuration

182
00:12:27,110 --> 00:12:30,954
in the managed cluster. Once you have more

183
00:12:30,992 --> 00:12:34,186
than prone snapshot, you can use Sveltoscaddle

184
00:12:34,218 --> 00:12:38,126
which is a CLI that I developed explicitly for Sveltos and

185
00:12:38,148 --> 00:12:42,826
you can take a look at all that has changed between two snapshots.

186
00:12:43,018 --> 00:12:46,400
And if there is something that you don't like,

187
00:12:47,410 --> 00:12:50,738
Sveltos has also support for rolling back the

188
00:12:50,744 --> 00:12:54,142
configuration. So you can start Sveltos to say you can tell Sveltos,

189
00:12:54,286 --> 00:12:58,322
bring the configuration back to this snapshot instance

190
00:12:58,386 --> 00:13:02,306
and Sveltos is reconciling the management cluster

191
00:13:02,338 --> 00:13:05,030
configuration to the snapshot instance.

192
00:13:07,290 --> 00:13:11,110
Sveltos has many other features Project

193
00:13:11,180 --> 00:13:15,206
Sveltos IO it's the website with the full documentation

194
00:13:15,398 --> 00:13:19,194
and there are many examples on how to register a cluster how

195
00:13:19,232 --> 00:13:22,782
to classify a cluster based

196
00:13:22,836 --> 00:13:26,990
on resources top of versions

197
00:13:28,450 --> 00:13:31,626
GitHub.com projects

198
00:13:31,658 --> 00:13:35,680
Sveltos is where all these Sveltos repos are

199
00:13:36,370 --> 00:13:40,050
and as I mentioned, Sveltos is an open source project.

200
00:13:40,200 --> 00:13:43,890
Any contribution is welcome. So if you have an idea,

201
00:13:43,960 --> 00:13:47,334
if you want to contribute, if you want to use it and you have any

202
00:13:47,372 --> 00:13:51,410
question, please feel free to reach us on slack

203
00:13:51,490 --> 00:13:59,126
projectspeltoslack.com and I

204
00:13:59,148 --> 00:14:00,680
will be happy to clear from you.

205
00:14:02,090 --> 00:14:05,366
Thank you so much. Thank you for your time. I hope you found

206
00:14:05,468 --> 00:14:09,822
this presentation useful and again, I hope you find the

207
00:14:09,996 --> 00:14:13,358
a problem and the solution also a

208
00:14:13,364 --> 00:14:15,020
good solution. Thank you so much.

