1
00:00:25,570 --> 00:00:29,238
It. Welcome to this session where I'll talk as

2
00:00:29,324 --> 00:00:32,790
mentioned about threats hunting and how basically

3
00:00:32,860 --> 00:00:36,566
you can automate that. And I'm saying stay ahead of the game,

4
00:00:36,668 --> 00:00:40,406
just as sort of a fun title, but obviously it has a

5
00:00:40,428 --> 00:00:44,018
meaning. You somehow need to stay ahead of hackers.

6
00:00:44,114 --> 00:00:47,894
It's obviously not a game, but they're getting smarter and smarter every

7
00:00:47,932 --> 00:00:52,106
day. And they have basically they can do a million attempts

8
00:00:52,138 --> 00:00:55,486
to hack you, but they only need one to succeed. You need

9
00:00:55,508 --> 00:00:59,086
to stop all of them or you'll have a

10
00:00:59,108 --> 00:01:02,590
compromise. So I'm going to teach you in this session

11
00:01:03,090 --> 00:01:06,978
a little bit more how to proactively hunt for

12
00:01:07,064 --> 00:01:10,238
threats. So as mentioned, my name Christopher van der made.

13
00:01:10,254 --> 00:01:14,418
I'm based out of the Netherlands and I'm a developer advocate security.

14
00:01:14,584 --> 00:01:18,466
If you have any questions, please drop them in. I'll also pause

15
00:01:18,498 --> 00:01:21,686
here and there during the session to

16
00:01:21,708 --> 00:01:23,910
make sure that all of them are answered.

17
00:01:24,890 --> 00:01:28,026
So before I start, I would

18
00:01:28,048 --> 00:01:31,766
like to make a statement, and that is that there's

19
00:01:31,798 --> 00:01:34,298
simply too much information out there.

20
00:01:34,464 --> 00:01:37,974
And that is obviously quite a broad statement.

21
00:01:38,102 --> 00:01:42,026
But I'm meaning specifically threats

22
00:01:42,058 --> 00:01:46,138
intelligence. So information about new threats

23
00:01:46,234 --> 00:01:50,138
that might be going on, new malware campaigns,

24
00:01:50,234 --> 00:01:53,870
and specifically as audience, I mean, security operations

25
00:01:53,950 --> 00:01:57,490
center analysts. So there's literally too much information

26
00:01:57,640 --> 00:02:01,006
to consciously process. So therefore

27
00:02:01,038 --> 00:02:04,734
we need to automate as much of this analysis

28
00:02:04,782 --> 00:02:08,930
and enrichment so that your analysts,

29
00:02:09,090 --> 00:02:12,534
human beings, only have to look at the things that

30
00:02:12,572 --> 00:02:16,322
actually matter. So hopefully at the end of this session,

31
00:02:16,466 --> 00:02:19,660
this statement will make more sense

32
00:02:20,110 --> 00:02:23,514
and probably you'll already agree with me.

33
00:02:23,632 --> 00:02:25,900
All right, so the agenda for today?

34
00:02:26,430 --> 00:02:30,006
Yeah, first of all, I'll do a quick introduction into threats

35
00:02:30,038 --> 00:02:33,466
hunting. I'll then do an introduction into

36
00:02:33,568 --> 00:02:37,086
Securex and threats response, which will be

37
00:02:37,268 --> 00:02:41,280
basically main topics that I'll talk about today.

38
00:02:42,210 --> 00:02:44,690
I'll then talk about two use cases,

39
00:02:45,350 --> 00:02:48,846
one using Twitter, the other one using Talos blogs,

40
00:02:48,878 --> 00:02:53,726
but also more as source of Fred

41
00:02:53,758 --> 00:02:57,590
intel. And it will make a little bit more sense as we go along.

42
00:02:57,660 --> 00:03:01,110
And obviously we'll finish off with a conclusion

43
00:03:01,530 --> 00:03:05,798
and I'll save some time if there are any questions for at the end there.

44
00:03:05,964 --> 00:03:09,274
So the introduction to fret hunting, probably if you

45
00:03:09,312 --> 00:03:12,970
ask five different people what fret hunting is, they'll all

46
00:03:13,040 --> 00:03:16,620
say something different. But I think

47
00:03:17,230 --> 00:03:21,230
everyone will agree that fret hunting usually involves

48
00:03:22,210 --> 00:03:26,110
proactively hunting for something. So that means you're not

49
00:03:26,180 --> 00:03:30,094
reacting, but you're proactively going out and

50
00:03:30,132 --> 00:03:33,454
looking for threats instead of waiting until an alert

51
00:03:33,502 --> 00:03:37,074
pops up. So there is actually a very

52
00:03:37,112 --> 00:03:40,706
smart person that

53
00:03:40,888 --> 00:03:44,814
wrote basically an article about fret

54
00:03:44,862 --> 00:03:48,454
hunting. I would definitely recommend checking it out. And I'm just

55
00:03:48,492 --> 00:03:52,226
using this as an example because he had a pretty good threats

56
00:03:52,258 --> 00:03:55,190
hunting loop, which I thought was quite interesting.

57
00:03:55,340 --> 00:03:58,940
And this is basically a continuous process which you will

58
00:03:59,950 --> 00:04:04,074
should at least be doing at all times if you

59
00:04:04,112 --> 00:04:07,114
have a good security operations center.

60
00:04:07,312 --> 00:04:10,894
And I have to say, I'm a developer advocate right

61
00:04:10,932 --> 00:04:14,814
now. Before I was five years in the field as

62
00:04:14,852 --> 00:04:18,462
a consulting systems engineer, and I

63
00:04:18,516 --> 00:04:21,902
did not get in contact with a lot of customers that really

64
00:04:21,956 --> 00:04:25,554
had a very good security operations center because

65
00:04:25,592 --> 00:04:29,810
people are scarce, they are expensive because they are scarce.

66
00:04:30,710 --> 00:04:34,434
And some people do have the money but just can't find them.

67
00:04:34,632 --> 00:04:38,614
So basically what you should be doing is you

68
00:04:38,652 --> 00:04:42,086
should create hypotheses. For example,

69
00:04:42,268 --> 00:04:44,760
a hypotheses could be,

70
00:04:47,950 --> 00:04:51,514
I have the feeling we are attacked by a certain type

71
00:04:51,552 --> 00:04:55,286
of new malware campaign.

72
00:04:55,478 --> 00:04:59,094
Well, next up, you go and investigate this malware campaign.

73
00:04:59,142 --> 00:05:02,254
So you're going to see what tools and techniques did they use?

74
00:05:02,372 --> 00:05:04,830
What kind of patterns can you uncover?

75
00:05:06,210 --> 00:05:09,742
Finally, you'll start enriching and do

76
00:05:09,796 --> 00:05:13,418
analysts. So basically, your investigation so far, you're going

77
00:05:13,444 --> 00:05:17,090
to test against your own data and global data

78
00:05:17,240 --> 00:05:20,514
to see if you can find any correlations. And with

79
00:05:20,552 --> 00:05:23,822
that information, you can then either confirm or deny

80
00:05:23,886 --> 00:05:27,222
your hypotheses. Now, especially that

81
00:05:27,276 --> 00:05:27,880
part,

82
00:05:31,370 --> 00:05:34,434
this part, the analytics part, and the enrichment

83
00:05:34,482 --> 00:05:38,050
part specifically, you can do a lot of automated

84
00:05:38,130 --> 00:05:41,594
methods here. And during this session today,

85
00:05:41,712 --> 00:05:44,858
I'm going to tell you a couple of them, but obviously there

86
00:05:44,864 --> 00:05:49,066
are way more that we can cover. So this

87
00:05:49,088 --> 00:05:52,590
is also quite interesting. In that same article

88
00:05:53,330 --> 00:05:56,526
about fret hunting, the writer or the

89
00:05:56,548 --> 00:06:00,334
author talks about different levels that you might have

90
00:06:00,452 --> 00:06:03,982
in maturity of threats hunting.

91
00:06:04,126 --> 00:06:06,580
And basically, if you look at level zero,

92
00:06:07,430 --> 00:06:10,542
relies primarily on automated

93
00:06:10,606 --> 00:06:13,822
alerting, little or no data connections.

94
00:06:13,966 --> 00:06:17,542
So basically this means you install firewall and you just wait

95
00:06:17,596 --> 00:06:21,558
until an alert pops up. Level four,

96
00:06:21,724 --> 00:06:23,080
if you see that,

97
00:06:26,010 --> 00:06:29,434
level four actually says that a

98
00:06:29,472 --> 00:06:33,610
majority of the successful data analysis procedures are automated.

99
00:06:33,950 --> 00:06:38,122
And I really like that word of automation of

100
00:06:38,256 --> 00:06:42,766
the data analysis. And actually

101
00:06:42,948 --> 00:06:46,206
doing data analysts in

102
00:06:46,228 --> 00:06:49,854
an automated way with tools like Securex is actually not

103
00:06:49,892 --> 00:06:53,682
that hard. So getting from level zero to four

104
00:06:53,736 --> 00:06:57,662
obviously takes quite some governance

105
00:06:57,726 --> 00:07:01,282
and right procedures and the right people, but you can

106
00:07:01,336 --> 00:07:05,250
actually take some stuff from level four quite easily.

107
00:07:07,770 --> 00:07:11,126
Now just finally, last couple of

108
00:07:11,148 --> 00:07:14,754
slides on fret hunting here. I mentioned this in the beginning

109
00:07:14,802 --> 00:07:18,950
already. I see like two types of threat hunting.

110
00:07:19,110 --> 00:07:22,682
You have on demand hunting, which is basically more

111
00:07:22,736 --> 00:07:26,026
reactive. So something has happened,

112
00:07:26,128 --> 00:07:29,740
something was triggered, and you go and do more research.

113
00:07:30,290 --> 00:07:33,946
The other one is more automated, continuous hunting.

114
00:07:34,058 --> 00:07:37,546
And that's what I'll show you two demos

115
00:07:37,578 --> 00:07:40,794
of today. And that more resides

116
00:07:40,842 --> 00:07:45,742
around taking in data and automatically cross

117
00:07:45,806 --> 00:07:49,506
correlating this or cross referencing this against your

118
00:07:49,528 --> 00:07:52,962
own data and see if youve might have

119
00:07:53,016 --> 00:07:54,850
compromises in your organization.

120
00:07:58,090 --> 00:08:00,360
Now this is also interesting.

121
00:08:01,370 --> 00:08:04,662
This is the pyramid of pain. If you google the pyramid of pain,

122
00:08:04,796 --> 00:08:08,698
well, maybe add cybersecurity. I'm not sure what else you'll find

123
00:08:08,784 --> 00:08:12,474
if you google the pyramid of pain, but you'll find this

124
00:08:12,512 --> 00:08:16,794
pyramid. And basically they talk about this

125
00:08:16,832 --> 00:08:19,958
is how you can hurt a hacker. So if you

126
00:08:19,984 --> 00:08:23,230
look at the bottom, you see hash values and IP addresses.

127
00:08:23,810 --> 00:08:27,630
For a hacker, it is like the most trivial thing ever.

128
00:08:27,780 --> 00:08:31,150
If their malware file is found

129
00:08:31,220 --> 00:08:35,166
by security systems, and that file

130
00:08:35,198 --> 00:08:38,722
hash is basically added to a block list

131
00:08:38,776 --> 00:08:42,654
somewhere, for example, talos also does this with our amp

132
00:08:42,702 --> 00:08:46,278
infrastructure. It literally takes maybe one

133
00:08:46,364 --> 00:08:49,942
click of a button in their comments, in their code,

134
00:08:49,996 --> 00:08:53,254
of their malware, and the file hash will be different.

135
00:08:53,372 --> 00:08:57,286
So people, if you understand how hashing algorithms work,

136
00:08:57,388 --> 00:09:00,554
if you make minor changes, the file hash will change.

137
00:09:00,752 --> 00:09:04,122
So if you find their file hash, they're like, okay,

138
00:09:04,176 --> 00:09:08,838
fine, I'll just generate a new one. That's what we call polymorphic

139
00:09:09,014 --> 00:09:12,522
malware, basically malware that can keep changing

140
00:09:12,586 --> 00:09:14,750
so that it's difficult to detect.

141
00:09:15,730 --> 00:09:18,666
Now, IP addresses, similar and domain names,

142
00:09:18,778 --> 00:09:23,250
if you find these from a hacker, they can generate new domain names,

143
00:09:23,590 --> 00:09:28,020
host their stuff on a different IP address. So still

144
00:09:29,750 --> 00:09:33,230
quite simple and easy. If you really find out their network

145
00:09:33,310 --> 00:09:36,790
and host artifacts, this starts to get annoying,

146
00:09:37,850 --> 00:09:41,670
finding out their tools, their techniques, et center

147
00:09:42,570 --> 00:09:46,022
and procedures. The last one, if you find

148
00:09:46,076 --> 00:09:48,838
out what they're actually doing, how they operate.

149
00:09:49,014 --> 00:09:51,530
Yeah, that's killing for hackers,

150
00:09:52,990 --> 00:09:54,460
if you ask me.

151
00:09:58,270 --> 00:10:02,074
These first four layers, you can probably automate

152
00:10:02,122 --> 00:10:05,918
a lot of this stuff around here, finding these, blocking them,

153
00:10:06,004 --> 00:10:10,154
et cetera, up in the chain. This probably requires

154
00:10:10,202 --> 00:10:14,290
human interaction. So here you probably need to

155
00:10:14,360 --> 00:10:17,540
get your analysts and let them analysts what is going on?

156
00:10:18,470 --> 00:10:22,002
So we'll be talking mainly about the first

157
00:10:22,056 --> 00:10:25,874
four layers first. And what we want to do is create bite

158
00:10:25,922 --> 00:10:29,654
size chunks for your analysts so that they can do

159
00:10:29,692 --> 00:10:33,080
the top two layers. So,

160
00:10:33,530 --> 00:10:36,758
yeah, let's find out what we can do.

161
00:10:36,924 --> 00:10:41,446
Now in this session, we will use two tools,

162
00:10:41,558 --> 00:10:45,910
basically. Well, probably more, but two main tools.

163
00:10:46,070 --> 00:10:49,622
One is Python, my favorite programming language

164
00:10:49,686 --> 00:10:53,806
right now, which I switched to a

165
00:10:53,828 --> 00:10:57,070
couple of years ago. Well, actually probably seven

166
00:10:57,140 --> 00:11:01,018
or eight years ago, I switched to python from other languages.

167
00:11:01,194 --> 00:11:04,946
And yeah, I prefer it a lot, and within Cisco we

168
00:11:04,968 --> 00:11:07,922
use it a lot, so it makes sense to talk about it today.

169
00:11:08,056 --> 00:11:11,518
The other one is Securex. Securex was launched,

170
00:11:11,614 --> 00:11:14,862
well, specifically threats response was

171
00:11:14,936 --> 00:11:18,806
launched a couple of years ago. Securex is basically now the

172
00:11:18,828 --> 00:11:23,190
platform within our Cisco security portfolio.

173
00:11:24,650 --> 00:11:28,438
And threats response is one of the applications or features

174
00:11:28,534 --> 00:11:31,798
of Securex. But mind you, fret response

175
00:11:31,814 --> 00:11:35,594
was there actually earlier. Now that we talked about

176
00:11:35,632 --> 00:11:40,274
threats hunting, I want to dive a little bit more into Securex

177
00:11:40,342 --> 00:11:43,818
and fret response. Just quick summary,

178
00:11:43,994 --> 00:11:47,374
fret hunting. In my opinion, what we'll be

179
00:11:47,412 --> 00:11:51,070
talking about today is more the continuous automate fret hunting.

180
00:11:52,710 --> 00:11:56,450
And that means that you're proactively looking

181
00:11:56,600 --> 00:11:58,930
for threats in your environment.

182
00:11:59,350 --> 00:12:02,930
And yeah, the enrichment of data

183
00:12:03,000 --> 00:12:06,690
and the cross referencing of data, we can very well

184
00:12:06,840 --> 00:12:10,778
automate. And obviously we're going to use Curex

185
00:12:10,814 --> 00:12:14,630
and threats response for it. So if you look at Securex,

186
00:12:15,530 --> 00:12:19,162
I prefer not to use marketing slides. So I usually dive into

187
00:12:19,216 --> 00:12:21,910
this slide.

188
00:12:22,070 --> 00:12:25,274
Securex is an architecture. It's not really

189
00:12:25,312 --> 00:12:29,114
a product. We actually offer it for free to customers.

190
00:12:29,312 --> 00:12:32,942
So if you buy one Cisco security product, you get

191
00:12:32,996 --> 00:12:36,858
Securex included. And it's basically an architecture

192
00:12:36,874 --> 00:12:40,350
or a platform that contains multiple features.

193
00:12:41,650 --> 00:12:45,250
First of all, you need to log in into the dashboard.

194
00:12:45,830 --> 00:12:49,806
We do that with duo. You then have features

195
00:12:49,838 --> 00:12:53,614
like threat response, Securex threat response, and Securex

196
00:12:53,662 --> 00:12:56,726
orchestration. These are two big

197
00:12:56,828 --> 00:12:59,750
applications within the Securex architecture.

198
00:13:00,730 --> 00:13:04,390
For those that know, the orchestrator is actually

199
00:13:04,460 --> 00:13:07,802
based on action orchestrator, which has now been

200
00:13:07,856 --> 00:13:11,786
sort of internally acquired by the security business group

201
00:13:11,968 --> 00:13:15,834
and it's now fully integrated into Securex. And this is

202
00:13:15,872 --> 00:13:18,998
basically a low to no code orchestrator.

203
00:13:19,174 --> 00:13:22,846
Threats response we'll talk about a little bit in more detail later.

204
00:13:23,028 --> 00:13:26,922
But basically it allows youve to investigate

205
00:13:26,986 --> 00:13:30,574
threats and respond to threats as well. So this is also that

206
00:13:30,612 --> 00:13:33,870
response. You can also trigger orchestration

207
00:13:33,950 --> 00:13:37,842
workflows from threat response. Now, on the right here

208
00:13:37,896 --> 00:13:41,726
we see our Cisco products and we see important arrows

209
00:13:41,758 --> 00:13:45,314
going back and forth. On the one hand we see local threat

210
00:13:45,362 --> 00:13:49,494
intelligence, for example, this can be firewall logs that

211
00:13:49,532 --> 00:13:53,666
we query from Securex. It can also be global

212
00:13:53,698 --> 00:13:57,930
threat intelligence that we query for example from Talos or

213
00:13:58,000 --> 00:14:01,642
AMP, advanced malware protection. But we can also

214
00:14:01,776 --> 00:14:05,510
back and forth send response actions and triggers.

215
00:14:05,670 --> 00:14:09,178
So basically we can

216
00:14:09,344 --> 00:14:14,334
do read operations but also write operations if

217
00:14:14,372 --> 00:14:18,094
you make it very simple. On the same hand, we can do that on the

218
00:14:18,132 --> 00:14:21,070
left as well, with third party products as well.

219
00:14:21,220 --> 00:14:24,786
So we don't just do it with Cisco, we do it with third party as

220
00:14:24,808 --> 00:14:28,194
well. And yeah, we have a

221
00:14:28,232 --> 00:14:33,026
ribbon framework, which is sort of a

222
00:14:33,048 --> 00:14:37,190
pop up window that you have in Securex and now in the whole of Cisco's

223
00:14:38,490 --> 00:14:42,162
secure portfolio. And it's basically you can cross

224
00:14:42,226 --> 00:14:45,666
launch into other applications with the ribbon.

225
00:14:45,778 --> 00:14:49,126
You can also cross launch into threats response

226
00:14:49,158 --> 00:14:52,826
et center. So it's quite a cool framework, and I'll show you it in

227
00:14:52,848 --> 00:14:54,060
a demo later.

228
00:14:56,110 --> 00:15:00,210
What Securex basically does, and specifically also threats response,

229
00:15:00,310 --> 00:15:04,426
is API aggregation. So Securex

230
00:15:04,538 --> 00:15:08,746
pulls data and pushes data through APIs.

231
00:15:08,938 --> 00:15:12,750
If I were to do anything in Securex, and I click the

232
00:15:12,900 --> 00:15:16,686
close tab button, then the tab

233
00:15:16,718 --> 00:15:20,222
will be closed and the data will be gone. Or maybe it will be temporarily

234
00:15:20,286 --> 00:15:23,810
stored somewhere in cache. Well, actually, I don't think we

235
00:15:23,880 --> 00:15:27,960
do that. So we are not a sim. So it's

236
00:15:29,770 --> 00:15:33,650
security intelligence and event management system. We don't gather

237
00:15:33,730 --> 00:15:37,126
data. We pull data when we

238
00:15:37,148 --> 00:15:40,938
need it, and we push data when we need it. And that is actually quite

239
00:15:41,024 --> 00:15:44,474
powerful platform. You cloud call

240
00:15:44,512 --> 00:15:48,598
Securex a soar, a security orchestration,

241
00:15:48,774 --> 00:15:52,186
automation and response platform. There are

242
00:15:52,368 --> 00:15:55,530
discussions you can have whether we are soar,

243
00:15:57,090 --> 00:16:00,302
but we're definitely not a sim. And in

244
00:16:00,356 --> 00:16:03,200
a lot of organizations, we can actually replace SIM,

245
00:16:03,970 --> 00:16:07,586
or there is no need for a sim because we only pull the

246
00:16:07,608 --> 00:16:11,298
data when we have to directly from the products.

247
00:16:11,464 --> 00:16:14,974
So we leave the data at where it's being

248
00:16:15,032 --> 00:16:19,000
generated. Now, an important piece,

249
00:16:19,370 --> 00:16:22,950
without going too much into detail, unnecessary detail,

250
00:16:23,100 --> 00:16:26,598
is CTIM. And CTIM is probably one of the most important

251
00:16:26,684 --> 00:16:30,182
things that is foundation of Securex.

252
00:16:30,326 --> 00:16:34,422
And this is basically a data model. It stands for Cisco threat

253
00:16:34,486 --> 00:16:38,406
intelligence model. And this allows

254
00:16:38,438 --> 00:16:41,886
us to describe threat intelligence. Now, don't look

255
00:16:41,908 --> 00:16:45,802
at all the details here, but you'll probably hear me say observable

256
00:16:45,866 --> 00:16:50,974
ones. An observable can

257
00:16:51,012 --> 00:16:54,754
be a domain name, IP address, et cetera. And all of

258
00:16:54,792 --> 00:16:57,986
these objects, data objects that you see here,

259
00:16:58,088 --> 00:17:02,098
they can have a relationship with observables, or observables can

260
00:17:02,104 --> 00:17:06,678
be a part of those objects and

261
00:17:06,764 --> 00:17:10,470
a verdict and judgments. So a judgment is, hey,

262
00:17:10,540 --> 00:17:14,950
this IP address is bad. So a judgment

263
00:17:15,450 --> 00:17:19,194
can be about an observable. A verdict can be like,

264
00:17:19,232 --> 00:17:23,318
hey, we have five judgments, but this is our final verdict.

265
00:17:23,494 --> 00:17:27,334
Exciting means, hey, this was seen in my organization.

266
00:17:27,462 --> 00:17:30,846
Someone reached out to that observable. We have

267
00:17:30,868 --> 00:17:34,574
a couple of others, we'll talk about that later. But just know

268
00:17:34,612 --> 00:17:38,414
that this data model is very important because you

269
00:17:38,452 --> 00:17:42,606
have dozens, hundreds of security products

270
00:17:42,708 --> 00:17:46,626
that all use their own data model. And if you want to be a platform,

271
00:17:46,728 --> 00:17:50,738
you need to have a standardized, reliable model

272
00:17:50,824 --> 00:17:54,306
where you can translate everything into and in the end that's what

273
00:17:54,328 --> 00:17:57,842
we do with Securex. We translate back and forth

274
00:17:57,986 --> 00:18:02,354
in CTIM, which allows us to do that cross referencing

275
00:18:02,482 --> 00:18:06,310
because everyone speaks the same language within air quotes.

276
00:18:08,110 --> 00:18:12,390
So you can also recognize CTIM in securex threat response,

277
00:18:12,550 --> 00:18:16,566
for example, you can see the judgment verdicts and sightings.

278
00:18:16,758 --> 00:18:20,334
Sightings or target sightings actually show up

279
00:18:20,372 --> 00:18:24,106
as a target. And this basically means it's

280
00:18:24,138 --> 00:18:27,722
a sighting which actually has a host device

281
00:18:27,866 --> 00:18:31,166
of youve organization, for example an

282
00:18:31,348 --> 00:18:35,042
iPhone or a MacBook or a server which

283
00:18:35,096 --> 00:18:39,522
has actually reached out to a domain or something

284
00:18:39,656 --> 00:18:43,506
similar like that. So targets and signings are very important

285
00:18:43,688 --> 00:18:47,286
because if we have them, it means we need to probably do some

286
00:18:47,308 --> 00:18:48,550
more investigation.

287
00:18:51,210 --> 00:18:55,030
Now we can also interact with CDEM from the

288
00:18:55,100 --> 00:18:58,426
API, obviously. So everything in Securex is built on

289
00:18:58,448 --> 00:19:02,700
top of APIs. It's built with open API spec

290
00:19:03,070 --> 00:19:07,046
and it uses Oauth

291
00:19:07,078 --> 00:19:11,142
two as authentication, so standardized API

292
00:19:11,206 --> 00:19:14,682
method. And you can also interact with the Swagger UI

293
00:19:14,746 --> 00:19:18,446
or I think it's called the open API Explorer. Now you

294
00:19:18,468 --> 00:19:22,262
can also interact with it. And here you'll see some raw

295
00:19:22,426 --> 00:19:26,046
CTIm JsOn. And this is how you describe observables

296
00:19:26,078 --> 00:19:28,980
in JSOn. You give it a value and the type.

297
00:19:31,990 --> 00:19:35,898
Now obviously you can also interact with CTIM from Vidy

298
00:19:35,934 --> 00:19:39,206
API in Python or in any language that can do

299
00:19:39,228 --> 00:19:42,854
an API call. So here you see a couple of

300
00:19:42,892 --> 00:19:44,440
examples of that.

301
00:19:46,090 --> 00:19:50,040
So yeah, that is all quite interesting

302
00:19:51,370 --> 00:19:54,874
ways of interacting with CTM. I see

303
00:19:54,912 --> 00:19:58,186
the arrows stayed behind, but this is just

304
00:19:58,208 --> 00:20:01,858
to show youve a workflow that you could use in fret

305
00:20:01,894 --> 00:20:05,450
response is you can use intel resources,

306
00:20:05,530 --> 00:20:08,906
casebook or incidents as basically source

307
00:20:09,018 --> 00:20:12,190
of your investigation. From there,

308
00:20:12,340 --> 00:20:15,854
Securex will pull information from all kinds of threat

309
00:20:15,902 --> 00:20:20,254
intelligence sources, but also from local threats

310
00:20:20,302 --> 00:20:23,486
intelligence. So has it been seen in your environments?

311
00:20:23,678 --> 00:20:26,974
And finally, you can actually take actions like blocking

312
00:20:27,022 --> 00:20:30,742
something all from threats response and

313
00:20:30,796 --> 00:20:34,470
all of this because it's API first

314
00:20:34,540 --> 00:20:36,882
built, we can also do from Python.

315
00:20:37,026 --> 00:20:39,800
And yeah, that is quite interesting.

316
00:20:40,350 --> 00:20:43,654
Yeah. So now let's talk more about integrating with Securex.

317
00:20:43,702 --> 00:20:47,162
So I talked about the APIs. I just also wanted to mention two other

318
00:20:47,216 --> 00:20:50,730
ways that you can integrate with Securex.

319
00:20:52,590 --> 00:20:56,526
In the end, everything works based on the API. So number one is the

320
00:20:56,548 --> 00:21:00,666
real one. But you can use Securex orchestration

321
00:21:00,858 --> 00:21:04,910
as a cloud to no code orchestrator which is now inside of Securex

322
00:21:04,990 --> 00:21:08,226
to interact with these APIs in a

323
00:21:08,408 --> 00:21:12,082
low to no code way. So you don't need to actually write any

324
00:21:12,136 --> 00:21:16,650
syntax. You still need to know sort of how programmability

325
00:21:16,750 --> 00:21:19,974
works, of course, but that is also a great

326
00:21:20,012 --> 00:21:23,730
way to get started. And finally, we also have Securex

327
00:21:23,810 --> 00:21:27,706
relay modules, and this is the most native way of integrating with

328
00:21:27,728 --> 00:21:31,770
Securex. It is built on top of the Securex APIs,

329
00:21:32,990 --> 00:21:36,826
and it allows you to add an extra module which

330
00:21:36,848 --> 00:21:41,050
is being queried. And basically all our third party integrations,

331
00:21:41,390 --> 00:21:44,986
they work with these Securex relay modules

332
00:21:45,098 --> 00:21:48,606
and all of our products in the end as well. Probably they

333
00:21:48,628 --> 00:21:52,720
just built in a relay module into the amp cloud, for example,

334
00:21:53,410 --> 00:21:55,700
but they all work in a similar way.

335
00:21:56,230 --> 00:21:59,586
The relay modules is all open source, so you can find it on

336
00:21:59,608 --> 00:22:03,714
GitHub. There is a Cisco security GitHub which we can

337
00:22:03,752 --> 00:22:05,650
share in the chat.

338
00:22:06,710 --> 00:22:10,422
And actually, if you're interested into looking into that, and maybe

339
00:22:10,556 --> 00:22:13,686
you are here from Engineering and you're like, hey, let's see

340
00:22:13,708 --> 00:22:17,382
if we can integrate our product into it. I would definitely check that out.

341
00:22:17,516 --> 00:22:21,286
And on developer Cisco.com curex,

342
00:22:21,398 --> 00:22:25,366
we actually have a learning lab that teaches you to work with the APIs,

343
00:22:25,478 --> 00:22:28,794
the orchestrator, or with the relay modules. So all

344
00:22:28,832 --> 00:22:30,170
of these methods.

345
00:22:32,430 --> 00:22:36,074
All right, so now we talked about threats hunting. We talked about Securex

346
00:22:36,122 --> 00:22:39,822
and threats response. Now let's more dive into an actual use

347
00:22:39,876 --> 00:22:44,054
case where we're going to combine threats hunting with Securex.

348
00:22:44,202 --> 00:22:48,066
And the first one is going to be Twitter. And probably

349
00:22:48,168 --> 00:22:51,090
you all know Twitter or use Twitter,

350
00:22:51,910 --> 00:22:55,106
and we're going to ingest Twitter to look for

351
00:22:55,128 --> 00:23:00,210
threats intelligence. Then we're coping to do automated enrichment,

352
00:23:00,370 --> 00:23:03,958
and we're going to take some actions, and I'm coping to also attempt to

353
00:23:03,964 --> 00:23:08,430
do a live demo. But everything will be around open deer.

354
00:23:08,530 --> 00:23:12,422
I'm not sure if you guys know the hashtag open deer,

355
00:23:12,486 --> 00:23:16,460
but it's quite an interesting hashtag because it's used by

356
00:23:17,950 --> 00:23:21,802
basically, how do you call it, white hat hackers or ethical

357
00:23:21,866 --> 00:23:25,902
hackers or cybersecurity analysts to

358
00:23:25,956 --> 00:23:30,000
basically make a new

359
00:23:30,450 --> 00:23:34,178
research about fresh malware available

360
00:23:34,264 --> 00:23:38,462
to the public. Here's an example of the timeline.

361
00:23:38,526 --> 00:23:42,014
This was a while ago, but as you can see, I'm searching

362
00:23:42,062 --> 00:23:45,974
for the hashtag open there. And you can find

363
00:23:46,092 --> 00:23:49,798
people posting like, hey, this domain I found

364
00:23:49,964 --> 00:23:52,966
is actually malicious. Or here,

365
00:23:53,068 --> 00:23:56,742
hey, these IP addresses, they're trying to exploit from

366
00:23:56,796 --> 00:24:00,986
this. So that's actually quite interesting. As a demo,

367
00:24:01,168 --> 00:24:04,170
I actually did this tweet,

368
00:24:05,790 --> 00:24:09,178
was this like an hour and a half ago, and we're going

369
00:24:09,184 --> 00:24:13,114
to try in my demo to also find this. And specifically,

370
00:24:13,162 --> 00:24:16,494
we're going to look for this observable, which can be

371
00:24:16,532 --> 00:24:20,670
a malicious observable. And actually it is a malicious observable.

372
00:24:21,730 --> 00:24:25,522
So I did this tweet. Let me quickly jump over actually to

373
00:24:25,576 --> 00:24:29,186
show you it live. Here's that tweet. I also

374
00:24:29,368 --> 00:24:33,074
tagged Stuart into it. I see

375
00:24:33,272 --> 00:24:36,774
he might have quoted it as well. So we're going to see

376
00:24:36,972 --> 00:24:40,406
what this demo looks like with this live

377
00:24:40,508 --> 00:24:43,862
tweet. There are actually many tweets out there,

378
00:24:43,916 --> 00:24:47,942
as you can see. So they're not necessarily,

379
00:24:48,006 --> 00:24:52,234
I think a couple of them per day, but still too much information

380
00:24:52,432 --> 00:24:56,234
to check every day,

381
00:24:56,352 --> 00:25:00,106
right? Or every hour. So you

382
00:25:00,128 --> 00:25:01,920
want to automate stuff like this.

383
00:25:04,210 --> 00:25:07,774
So we're going to try and find that. So I

384
00:25:07,812 --> 00:25:11,786
built a script that does exactly this. So the first time the script runs,

385
00:25:11,818 --> 00:25:15,662
it's going to retrieve all the tweets possible from that hashtag.

386
00:25:15,806 --> 00:25:19,586
You can also add more hashtags. Obviously it's then

387
00:25:19,608 --> 00:25:21,730
going to parse and clean the tweets.

388
00:25:22,470 --> 00:25:25,570
If it wasn't the first time the script runs, it will actually

389
00:25:25,640 --> 00:25:29,766
check if there's new tweets available. I'll talk to you a little bit about the

390
00:25:29,788 --> 00:25:33,142
Twitter API, but youve can sort of say,

391
00:25:33,196 --> 00:25:36,582
oh, give me only the tweets that have

392
00:25:36,636 --> 00:25:40,522
been tweeted since this time.

393
00:25:40,656 --> 00:25:44,060
Probably you want to run it every day or every couple of hours.

394
00:25:45,470 --> 00:25:49,158
If there are no new tweets, we're going to sleep and we're

395
00:25:49,174 --> 00:25:52,960
going to wait until the scheduled interval hits again.

396
00:25:53,490 --> 00:25:57,034
Now we're going to then actually retrieve

397
00:25:57,082 --> 00:26:00,330
observables with the Securex Inspect

398
00:26:00,410 --> 00:26:03,714
API. And this is an API that you can give a blob of

399
00:26:03,752 --> 00:26:07,262
text and it will give you back domains, IP addresses,

400
00:26:07,326 --> 00:26:11,106
file hashes that it finds into it, email addresses. It's a

401
00:26:11,128 --> 00:26:14,066
very powerful regex API, basically,

402
00:26:14,248 --> 00:26:17,240
which Securex threats response uses a lot.

403
00:26:17,850 --> 00:26:21,750
It will then check are there any observables? If so,

404
00:26:21,820 --> 00:26:24,998
we're going to enrich these observables. If not, we're going

405
00:26:25,004 --> 00:26:28,186
to skip the tweet and we're going

406
00:26:28,208 --> 00:26:31,626
to give some user feedback. Now this

407
00:26:31,648 --> 00:26:35,446
is important. When we actually find observables

408
00:26:35,478 --> 00:26:38,714
in the tweet, we enrich the data and we find that we

409
00:26:38,752 --> 00:26:42,730
actually have target sightings in our environment.

410
00:26:43,230 --> 00:26:46,922
This is interesting because this means an ethical hacker

411
00:26:46,986 --> 00:26:49,790
tweeted about a new domain name, for example,

412
00:26:49,940 --> 00:26:53,840
like I just did, and someone in your organization actually

413
00:26:54,610 --> 00:26:58,274
made a connection to that domain. What we then do is we

414
00:26:58,312 --> 00:27:01,826
create a case in casebook in Securex and

415
00:27:01,848 --> 00:27:05,170
we send a Webex teams alert with a high priority tag.

416
00:27:05,510 --> 00:27:08,822
If not, we'll still create a case. You can actually

417
00:27:08,876 --> 00:27:12,178
turn this off and we'll send a Webex teams

418
00:27:12,194 --> 00:27:15,734
alert, but it probably requires less work or no work

419
00:27:15,852 --> 00:27:19,654
because you don't have anyone in your organization who reached out to it.

420
00:27:19,852 --> 00:27:23,034
Now if there are any more tweets in the queue, we're going to go like

421
00:27:23,072 --> 00:27:26,694
this. If not, it's going to sleep. So this is sort of what the script

422
00:27:26,742 --> 00:27:30,298
looks like. This is the result

423
00:27:30,464 --> 00:27:33,978
which you'll get. So you'll get a high priority tweet.

424
00:27:34,074 --> 00:27:37,854
You'll see that my tweet is actually here. If you click on this link,

425
00:27:37,972 --> 00:27:42,854
it will jump to the actual tweet

426
00:27:43,002 --> 00:27:44,980
and it will do the research.

427
00:27:47,030 --> 00:27:50,414
You can actually investigate this and it will find if someone reached

428
00:27:50,462 --> 00:27:53,970
out to that observable. If someone

429
00:27:54,040 --> 00:27:57,746
did, you'll get this and I'll

430
00:27:57,778 --> 00:28:01,394
actually post a tweet in Webex teams

431
00:28:01,522 --> 00:28:05,746
and then say like, hey, you have from the amp module free targets,

432
00:28:05,778 --> 00:28:09,660
three different targets. So you probably want to check this out quickly.

433
00:28:10,430 --> 00:28:13,946
Now let's go over to the demo. So on

434
00:28:13,968 --> 00:28:18,410
the basis of this, we have the Twitter search API

435
00:28:19,550 --> 00:28:24,394
and it just allows you to basically query hashtags.

436
00:28:24,442 --> 00:28:27,662
Et center if you want to get access to this, it's definitely

437
00:28:27,716 --> 00:28:31,258
cool. You do need to get a developer account on Twitter.

438
00:28:31,354 --> 00:28:35,314
You can just request this and say, hey, I'm doing research or

439
00:28:35,352 --> 00:28:39,570
whatever and I'm not going to use it for commercial purposes

440
00:28:40,230 --> 00:28:43,300
and they will give access to it.

441
00:28:45,110 --> 00:28:48,646
And let me jump to the actual script. Here is the

442
00:28:48,668 --> 00:28:52,214
python script. I'm not

443
00:28:52,252 --> 00:28:55,910
going to walk with you through every line. I just want to mention

444
00:28:55,980 --> 00:29:00,140
to you that all of it is on my GitHub here,

445
00:29:00,590 --> 00:29:03,846
so you can check it out. I think we can also drop

446
00:29:03,878 --> 00:29:07,322
a link in the chat and basically

447
00:29:07,376 --> 00:29:10,766
I explain youve everything, how to install it. Et center, it's not that

448
00:29:10,788 --> 00:29:12,990
hard if you understand python,

449
00:29:13,810 --> 00:29:17,360
but basically I have a config file with three different

450
00:29:19,890 --> 00:29:23,754
parts, one for fret response, webex and Twitter.

451
00:29:23,882 --> 00:29:28,046
And this synth id is definitely important. Per default

452
00:29:28,078 --> 00:29:31,266
it's set to zero, but the first time you run it will

453
00:29:31,288 --> 00:29:34,866
be set to, I think it's using the epoch time or

454
00:29:34,888 --> 00:29:38,680
whatever epoch time, however you pronounce that

455
00:29:39,850 --> 00:29:43,894
and it will use that to see if you need to find new

456
00:29:43,932 --> 00:29:47,334
tweets. So now let's actually run

457
00:29:47,372 --> 00:29:52,986
it right, because we

458
00:29:53,008 --> 00:29:56,570
want to find more tweets. So I do need to do one thing,

459
00:29:56,640 --> 00:30:00,254
and luckily we're internal. I just ran this

460
00:30:00,292 --> 00:30:03,760
earlier and I want to set it to zero again.

461
00:30:07,730 --> 00:30:11,902
And we're going to run the file. So you see that the config file was

462
00:30:12,036 --> 00:30:14,850
loaded. You see a new tweet was detected.

463
00:30:16,070 --> 00:30:19,394
And what it's going to do now is it's going

464
00:30:19,432 --> 00:30:23,090
to clean the tweet,

465
00:30:23,430 --> 00:30:27,442
find observables, find sightings,

466
00:30:27,506 --> 00:30:31,174
if there are any. And if there are, it will

467
00:30:31,212 --> 00:30:34,898
then create a case in casebook and send a Webex team's

468
00:30:34,914 --> 00:30:39,814
message. So you see here that actually, since I tweeted,

469
00:30:39,942 --> 00:30:43,340
you see now that I was retweeted as well,

470
00:30:43,790 --> 00:30:47,514
and probably the tweet after this will be my tweet that I did just before

471
00:30:47,552 --> 00:30:52,098
the session. And you see here that Stuart

472
00:30:52,134 --> 00:30:56,480
Clark, that his tweet was parsed. So what you can see here is that

473
00:30:57,010 --> 00:31:00,350
they are actually being created. And you see here, this is

474
00:31:00,420 --> 00:31:02,830
my tweet by Cisco Devnet.

475
00:31:03,910 --> 00:31:07,426
And not all of them are high priority. So this one

476
00:31:07,448 --> 00:31:10,482
is not high priority. This one is because

477
00:31:10,536 --> 00:31:14,046
there are actual target sightings. This one doesn't

478
00:31:14,078 --> 00:31:17,302
have that. What we can actually do is from

479
00:31:17,356 --> 00:31:20,870
here, I could start immediately an investigation.

480
00:31:22,330 --> 00:31:25,778
I can also, for the sake of the environment,

481
00:31:25,874 --> 00:31:29,910
let's not burn more cycles than needed. You've seen

482
00:31:30,060 --> 00:31:33,482
how it goes. What we can also do is we can find them

483
00:31:33,536 --> 00:31:37,354
here, of course. So here we are in Securex and

484
00:31:37,392 --> 00:31:41,022
we have Facebook. And here you see actually all of them being

485
00:31:41,076 --> 00:31:44,654
added. Now you see my and

486
00:31:44,692 --> 00:31:47,934
Stewart tweet being high priority because that

487
00:31:47,972 --> 00:31:53,982
tweet contains internetbackeys.com.

488
00:31:54,036 --> 00:31:57,810
And Internetbackeys.com is actually something

489
00:31:57,880 --> 00:32:01,806
that I've triggered an alert on earlier in my demo environment.

490
00:32:01,998 --> 00:32:05,282
So this is quite interesting. You see obviously also

491
00:32:05,336 --> 00:32:08,902
a couple of other tweets. So you can check them out

492
00:32:08,956 --> 00:32:13,062
here. If they are interesting, you can still investigate them.

493
00:32:13,196 --> 00:32:16,518
So you can click on investigate. But probably we're not going to

494
00:32:16,524 --> 00:32:20,486
find any targets because we already did this investigation

495
00:32:20,598 --> 00:32:23,654
with the API.

496
00:32:23,782 --> 00:32:27,962
So we actually saved a lot of work here

497
00:32:28,096 --> 00:32:31,666
for our security operations center workers

498
00:32:31,798 --> 00:32:35,930
because they don't need to manually grab data from that tweet

499
00:32:36,090 --> 00:32:39,806
and then put it in fret response and see if

500
00:32:39,828 --> 00:32:43,098
we have targets. All they need to do is they need to

501
00:32:43,124 --> 00:32:47,042
monitor this space. And whenever something with high priority code

502
00:32:47,096 --> 00:32:50,738
in, they need to click the link and it will automatically start

503
00:32:50,824 --> 00:32:54,100
that investigation, as you can see here.

504
00:32:55,990 --> 00:32:59,800
So, yeah, I hope this was a cool demo.

505
00:33:00,410 --> 00:33:03,782
I always really like it because you can do a live

506
00:33:03,836 --> 00:33:07,906
tweet and it will actually find it if you add that hashtag.

507
00:33:08,018 --> 00:33:11,820
I don't want to convolute this. So I do always add

508
00:33:12,190 --> 00:33:15,654
something that is actually malicious. I don't want to be adding

509
00:33:15,702 --> 00:33:19,354
google.com or whatever here in case some other

510
00:33:19,392 --> 00:33:22,666
person is doing something with this API.

511
00:33:22,858 --> 00:33:26,686
So again, everything is on my

512
00:33:26,708 --> 00:33:29,440
GitHub, which is over here.

513
00:33:30,210 --> 00:33:34,082
And you can definitely check it out if you're interested into

514
00:33:34,136 --> 00:33:37,714
it. Basically, there's a lot of

515
00:33:37,752 --> 00:33:42,770
connections which you can just take from me and

516
00:33:42,840 --> 00:33:46,422
reuse as you see fit. And you can just use

517
00:33:46,476 --> 00:33:49,320
different sources than tweets, right?

518
00:33:50,170 --> 00:33:53,720
In the end, this is where that magic happens, where I'm doing,

519
00:33:54,570 --> 00:33:58,346
checking if we have returned sightings or not. If there

520
00:33:58,368 --> 00:34:02,678
are zero, which is usually the case, hopefully we'll

521
00:34:02,694 --> 00:34:06,342
just send a normal message and otherwise we'll

522
00:34:06,486 --> 00:34:10,234
send the high priority message. As you can see

523
00:34:10,272 --> 00:34:13,854
here, it actually took me quite a while to

524
00:34:14,052 --> 00:34:17,406
make all of this markdown, which was

525
00:34:17,428 --> 00:34:21,582
quite fun to work with to make sure that you get that line

526
00:34:21,636 --> 00:34:25,166
and et cetera. All right, so this brings

527
00:34:25,198 --> 00:34:29,234
me to the second use case, which will be a bit shorter because

528
00:34:29,272 --> 00:34:33,090
I'm not going to do as extensive of a demo

529
00:34:33,160 --> 00:34:37,190
on this one, but I do wanted to share this

530
00:34:37,260 --> 00:34:42,342
one. So Talos intelligence probably

531
00:34:42,396 --> 00:34:46,630
is known to everyone, but is Cisco's threat intelligence organization.

532
00:34:47,710 --> 00:34:51,274
They have a pretty epic blog where they post

533
00:34:51,392 --> 00:34:54,854
blog posts about new malware campaigns.

534
00:34:54,982 --> 00:34:58,730
They sometimes are like referenced in New York Times

535
00:34:58,800 --> 00:35:01,914
et Center when there's a new outbreak. So they're

536
00:35:01,962 --> 00:35:05,054
really cool. Now you

537
00:35:05,092 --> 00:35:09,150
could say, why would I care about that blog? Because everything

538
00:35:09,220 --> 00:35:12,320
that's in that block is already blocked by Cisco, right?

539
00:35:12,690 --> 00:35:16,190
Well, it could be if something is a zero

540
00:35:16,260 --> 00:35:21,118
day and there is being blocked about and someone reached

541
00:35:21,134 --> 00:35:25,234
out to that domain or an IP address or file hash 29

542
00:35:25,272 --> 00:35:29,014
days ago or whatever the time limit is on that product,

543
00:35:29,212 --> 00:35:32,902
you might get a hit from a while back, which still is very

544
00:35:32,956 --> 00:35:36,726
important. So what we're going to do is we're going to

545
00:35:36,748 --> 00:35:40,138
use this as a resources as well. This is a

546
00:35:40,144 --> 00:35:43,226
little bit of an older screenshot. As you can see, this is

547
00:35:43,248 --> 00:35:46,458
the first iteration of my script. They post a

548
00:35:46,464 --> 00:35:50,026
couple of blog posts per week. Often they

549
00:35:50,048 --> 00:35:54,426
contain insights and they contain many interesting observables,

550
00:35:54,458 --> 00:35:57,738
as you can see here at the bottom, also called indicators

551
00:35:57,754 --> 00:36:01,534
of compromise. And now there's many more blogs out there

552
00:36:01,572 --> 00:36:05,154
like talos. So yeah, here you see those

553
00:36:05,192 --> 00:36:08,354
observables. So how can anyone keep

554
00:36:08,392 --> 00:36:12,322
track of and following certain hashtags and certain

555
00:36:12,376 --> 00:36:16,766
blog posts? How can you do that and also respond to alerts?

556
00:36:16,878 --> 00:36:20,226
Well, the answer youve can't unless you maybe can hire

557
00:36:20,258 --> 00:36:23,830
100 people. So I did a very similar

558
00:36:23,900 --> 00:36:27,946
script. I'm going to go a little bit more

559
00:36:28,048 --> 00:36:29,500
quick through it,

560
00:36:31,150 --> 00:36:34,666
but basically the tweet is now

561
00:36:34,688 --> 00:36:37,974
a blog and we can go through multiple

562
00:36:38,022 --> 00:36:41,626
blog posts, actually. So I've also added 40 guard from

563
00:36:41,648 --> 00:36:45,294
40. Net and unit 42 from Palo Alto as well,

564
00:36:45,412 --> 00:36:47,710
which are obviously our competitors.

565
00:36:48,370 --> 00:36:52,286
But I mean, they might also have interesting information that

566
00:36:52,308 --> 00:36:53,460
we should look at.

567
00:36:55,990 --> 00:37:00,274
So yeah, here you just see some code snippets when

568
00:37:00,312 --> 00:37:03,906
we're creating a case in casebook. How simple that is. All you

569
00:37:03,928 --> 00:37:07,190
need to give it is some JSON and we're basically

570
00:37:07,260 --> 00:37:13,014
doing a post with that JSON message or

571
00:37:13,052 --> 00:37:16,374
JSON payload. I mean, and this

572
00:37:16,412 --> 00:37:19,014
is basically how to extract observables.

573
00:37:19,142 --> 00:37:22,266
So this is that inspect API endpoint that

574
00:37:22,288 --> 00:37:25,658
I talked about earlier. We can give that broad text,

575
00:37:25,744 --> 00:37:29,734
as you can see here, and even defanged

576
00:37:29,782 --> 00:37:33,294
IP address as it's sometimes called. We are able

577
00:37:33,332 --> 00:37:35,790
to parse out as observables.

578
00:37:36,690 --> 00:37:41,402
So all you need to do is send that blob of text as data payload

579
00:37:41,546 --> 00:37:45,858
and it will return you observables in the exact CTM data

580
00:37:45,944 --> 00:37:48,850
format that we need. All right,

581
00:37:48,920 --> 00:37:52,626
so I'm not going to show you the entire demo of this, but I

582
00:37:52,648 --> 00:37:56,422
do wanted to share with you that this is also

583
00:37:56,476 --> 00:38:00,200
on GitHub. There is a demo which you can watch,

584
00:38:00,570 --> 00:38:03,762
but we're nearing the end also of that presentation.

585
00:38:03,826 --> 00:38:06,806
I think the demo is, what is it,

586
00:38:06,908 --> 00:38:10,454
15 minutes or something? Yes, so let's not

587
00:38:10,492 --> 00:38:13,946
check that 15 minutes right now. But I

588
00:38:13,968 --> 00:38:17,382
just wanted to mention I have a similar config file

589
00:38:17,446 --> 00:38:22,106
like I did with the Twitter script.

590
00:38:22,298 --> 00:38:25,994
But what I do here is I loop through RSS feeds

591
00:38:26,122 --> 00:38:29,998
and what I then do is I grab the body

592
00:38:30,084 --> 00:38:33,826
of a block and send that as raw text to

593
00:38:33,848 --> 00:38:37,634
the inspect API just to show you how powerful that

594
00:38:37,672 --> 00:38:42,370
is. And I do that for all of these. And similarly,

595
00:38:43,510 --> 00:38:47,602
like with the Twitter API, there is an

596
00:38:47,656 --> 00:38:51,570
RSS feed or an RSS,

597
00:38:52,790 --> 00:38:56,386
I forgot the name of it. It's called feed

598
00:38:56,418 --> 00:39:00,438
parser. This is basically a python library or Python module

599
00:39:00,614 --> 00:39:03,962
which you can import and it will

600
00:39:04,016 --> 00:39:07,430
actually be able to look at some metadata of an RSS

601
00:39:07,510 --> 00:39:11,614
feed so that you only import the latest blog post.

602
00:39:11,732 --> 00:39:15,278
And that is again a measure I took against noise. You don't want

603
00:39:15,284 --> 00:39:17,978
to import the same one twice.

604
00:39:18,154 --> 00:39:22,190
And just to show you how that works,

605
00:39:22,340 --> 00:39:25,842
as soon as the script runs, it will actually write

606
00:39:25,976 --> 00:39:28,526
this here. This is for Twitter,

607
00:39:28,718 --> 00:39:33,778
but I'm doing the exact same thing for the

608
00:39:33,864 --> 00:39:37,254
Dallas blog poster as well, as you can see

609
00:39:37,292 --> 00:39:40,726
here, which I actually renamed to RSS feed since we

610
00:39:40,748 --> 00:39:44,662
can do new. So I'm actually writing the config back

611
00:39:44,796 --> 00:39:48,358
all the way at the end, as you can see here.

612
00:39:48,524 --> 00:39:52,362
So let me just show you here. I'm writing the

613
00:39:52,416 --> 00:39:56,346
config all the way at the end to make sure that the

614
00:39:56,528 --> 00:40:00,830
last etech and last modified is checked. And that is also something

615
00:40:00,980 --> 00:40:03,070
that I'm checking at the beginning.

616
00:40:06,850 --> 00:40:10,494
Has there been a new blog posted? Yes or

617
00:40:10,532 --> 00:40:14,090
no? All right, so I promised this was

618
00:40:14,100 --> 00:40:15,860
a little bit of a shorter demo,

619
00:40:17,350 --> 00:40:21,202
but I hope that you believe me that I can do the exact same

620
00:40:21,256 --> 00:40:24,782
thing. And actually, by the way, to prove that,

621
00:40:24,936 --> 00:40:28,098
I think I saw some in my casebook,

622
00:40:28,274 --> 00:40:31,000
actually. So here you see,

623
00:40:31,610 --> 00:40:35,090
for example, the 40 guard RSS

624
00:40:35,170 --> 00:40:38,474
feed. And if I scroll further down, you'll probably see

625
00:40:38,512 --> 00:40:40,780
the Talos one as well.

626
00:40:42,830 --> 00:40:46,822
So without further ado, I'll move to some conclusions,

627
00:40:46,966 --> 00:40:49,020
which I hope you agree with.

628
00:40:50,430 --> 00:40:55,294
So we're nearing the end of the presentation, but I still have

629
00:40:55,332 --> 00:40:59,166
some stuff I wanted to show. Is this easier than

630
00:40:59,188 --> 00:41:02,560
manually searching Twitter? I'm very curious if you agree.

631
00:41:03,030 --> 00:41:07,426
If so, I really hope that we can get our customers

632
00:41:07,608 --> 00:41:11,026
to start working with this as

633
00:41:11,048 --> 00:41:14,466
well. And asking Cisco and our

634
00:41:14,488 --> 00:41:18,660
partners to either build stuff for this or

635
00:41:19,130 --> 00:41:22,680
to do it themselves, that would just be awesome.

636
00:41:24,010 --> 00:41:27,850
Some other summaries. Threat hunting is all about gathering data

637
00:41:27,920 --> 00:41:31,526
from internal monitoring and intelligence, or global

638
00:41:31,638 --> 00:41:35,654
and local threat intelligence, as it sometimes is called, and then cross

639
00:41:35,702 --> 00:41:39,722
referencing it. Threat hunting is not something you just do

640
00:41:39,776 --> 00:41:43,514
on demand. It should be something that you continuously

641
00:41:43,562 --> 00:41:46,926
do in the back end. Skierx and

642
00:41:46,948 --> 00:41:50,410
Skierx threats response can help with this, and the Securex

643
00:41:50,490 --> 00:41:54,160
API definitely can help automate a lot of this.

644
00:41:55,490 --> 00:41:58,634
So with that, we have also covered the conclusion,

645
00:41:58,762 --> 00:42:02,334
and I hope that this statement now makes a little bit more

646
00:42:02,372 --> 00:42:05,686
sense than in the beginning. With that, I would like

647
00:42:05,708 --> 00:42:09,206
to thank everyone for watching and listening. I hope you enjoyed the

648
00:42:09,228 --> 00:42:12,834
session and learned something new. If you do have any further

649
00:42:12,882 --> 00:42:16,694
questions, please feel free to reach out. Thank you very much and have a great

650
00:42:16,732 --> 00:42:17,814
rest of your day.

