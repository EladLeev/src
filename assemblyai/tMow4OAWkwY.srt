1
00:00:36,690 --> 00:00:39,714
Hello guys, my name is Aman Parauliya.

2
00:00:39,762 --> 00:00:43,590
I'm working as a senior software engineer at Infracloud Technologies.

3
00:00:45,130 --> 00:00:48,694
So I will be talking about tinkable which is

4
00:00:48,732 --> 00:00:52,974
an open source project developed by Packet team

5
00:00:53,172 --> 00:00:57,882
and I am a core contributor, one of the core contributor

6
00:00:58,026 --> 00:01:03,074
in this project. So I will be talking about it in

7
00:01:03,112 --> 00:01:07,614
this webinar. So Tinkerbell

8
00:01:07,662 --> 00:01:11,986
is actually about bare metal provisioning. So in this cloud native world

9
00:01:12,088 --> 00:01:15,060
we are moving towards cloud, right?

10
00:01:15,450 --> 00:01:18,774
So there are a lot of cloud providers today in the market like

11
00:01:18,812 --> 00:01:21,560
Google Cloud, AWS cloud or something else.

12
00:01:24,170 --> 00:01:28,074
But still there are few use cases, few things in

13
00:01:28,112 --> 00:01:31,706
which we would like to

14
00:01:31,728 --> 00:01:34,778
have a server besides me

15
00:01:34,864 --> 00:01:37,898
or like I need to

16
00:01:38,064 --> 00:01:41,582
provision a bare metal server in which I will be storing my data

17
00:01:41,716 --> 00:01:45,630
instead of using the AWS or any other cloud

18
00:01:45,700 --> 00:01:48,846
native thing. So I will be talking about

19
00:01:48,948 --> 00:01:52,938
how the thinkable helps you when it's about

20
00:01:53,124 --> 00:01:57,362
bare metal provision. So this

21
00:01:57,416 --> 00:02:00,994
will be our agenda for today. We will be talking about

22
00:02:01,112 --> 00:02:04,686
bare metal concepts. First we'll

23
00:02:04,718 --> 00:02:07,634
talk about what makes a server, what is a network,

24
00:02:07,682 --> 00:02:11,350
booting use cases especially and the challenges that we face.

25
00:02:11,500 --> 00:02:15,080
And then we will move to tinkable as soon as possible.

26
00:02:17,630 --> 00:02:21,606
So let's start with what is bare

27
00:02:21,638 --> 00:02:24,858
metal? So when we heard

28
00:02:25,024 --> 00:02:29,514
the term bare metal we think about two

29
00:02:29,552 --> 00:02:33,246
things. This can be like two

30
00:02:33,268 --> 00:02:36,810
things. So I have provided two pictures.

31
00:02:36,970 --> 00:02:41,070
The left picture is a kind of rack of servers

32
00:02:41,570 --> 00:02:44,734
which is used in the data centers,

33
00:02:44,862 --> 00:02:48,322
right? And the right one

34
00:02:48,376 --> 00:02:51,566
is nothing but a raspberry PI board, a small raspberry

35
00:02:51,598 --> 00:02:55,750
PI board which is actually being used in many of the IoT devices

36
00:02:56,330 --> 00:02:59,720
and IoT use cases. So these are two

37
00:03:00,490 --> 00:03:03,878
bare metal I can think of two types of bare metal I

38
00:03:03,884 --> 00:03:04,840
can think of.

39
00:03:07,710 --> 00:03:11,366
So let's talk about what makes a bare metal

40
00:03:11,398 --> 00:03:15,194
a server. So the first and foremost thing,

41
00:03:15,312 --> 00:03:18,602
it should have a network support. Basically it should have

42
00:03:18,736 --> 00:03:23,482
network interfaces which should support IPMI

43
00:03:23,546 --> 00:03:27,566
and also have NIC card, like NIC card which can

44
00:03:27,588 --> 00:03:30,894
be of today's ten gbps or something

45
00:03:30,932 --> 00:03:34,814
like that. The secondary thing a bare metal

46
00:03:34,862 --> 00:03:39,442
should have is like storage so

47
00:03:39,496 --> 00:03:43,330
that it can manage the stuff like

48
00:03:43,400 --> 00:03:46,854
raid and all so that if a data

49
00:03:46,892 --> 00:03:51,000
is lost we can be able to recover it

50
00:03:51,530 --> 00:03:55,560
using the raid and other stuff, raid applications and everything.

51
00:03:56,330 --> 00:04:00,166
The third thing that is required for bare metal

52
00:04:00,198 --> 00:04:04,042
is boot environment. So boot environment is nothing

53
00:04:04,096 --> 00:04:07,642
but like in which order we want to boot. For example,

54
00:04:07,696 --> 00:04:11,340
if you want to boot from a device or from something or from,

55
00:04:12,450 --> 00:04:16,362
if you want to boot from the actual device

56
00:04:16,426 --> 00:04:20,046
or if you want to boot from the USB device or if you

57
00:04:20,068 --> 00:04:23,774
want to boot from a network. So when you talk about

58
00:04:23,972 --> 00:04:27,530
booting from the network, the ipxe comes into the picture.

59
00:04:27,610 --> 00:04:30,786
There should have a support of iPxe if you want to do a

60
00:04:30,808 --> 00:04:34,706
network boot, if you want to boot a

61
00:04:34,728 --> 00:04:38,150
bare metal or a machine from the scratch

62
00:04:38,570 --> 00:04:41,080
without having anything on it.

63
00:04:43,450 --> 00:04:47,270
Okay, so let's talk about the network booting, which is the main

64
00:04:47,340 --> 00:04:53,146
stuff. If you talk about the bare metal as

65
00:04:53,168 --> 00:04:56,726
we talk about IoT, should support PXe or iPXe. So PXE

66
00:04:56,758 --> 00:04:59,446
is nothing but pre executable environment.

67
00:04:59,638 --> 00:05:03,100
So like before it boots up into BIOS or something else.

68
00:05:04,430 --> 00:05:08,014
And ipxe is nothing but an extended version of

69
00:05:08,052 --> 00:05:11,822
PxE which is open source and

70
00:05:11,876 --> 00:05:16,158
DHCP actually provides you IP dynamically

71
00:05:16,254 --> 00:05:20,382
and TFTp is there to provide the initial

72
00:05:20,526 --> 00:05:24,034
file system. So when you

73
00:05:24,152 --> 00:05:27,702
try to provision a machine it should have

74
00:05:27,756 --> 00:05:31,334
a minimal os or a minimal platform in

75
00:05:31,372 --> 00:05:35,640
which it can run and all those things and

76
00:05:36,010 --> 00:05:39,354
the provisioning can happen. And for that

77
00:05:39,392 --> 00:05:43,066
it required something like, something like a ram which is

78
00:05:43,088 --> 00:05:46,806
like in memory files, in it ram like in memory file

79
00:05:46,838 --> 00:05:50,830
systems and basic VM which

80
00:05:50,900 --> 00:05:54,378
have VM, Linux like basic file

81
00:05:54,474 --> 00:05:56,750
which have a very basic os,

82
00:05:58,050 --> 00:06:02,202
something like alpine or something. The third thing is NFS.

83
00:06:02,266 --> 00:06:05,410
So the NFS is like a network file system.

84
00:06:05,560 --> 00:06:09,026
So for example if you don't have the storage in

85
00:06:09,048 --> 00:06:13,006
your hardware, for example in Raspberry PI

86
00:06:13,038 --> 00:06:17,230
board which we are talking about here. So raspberry PI board

87
00:06:17,320 --> 00:06:22,166
actually consists the hardware using the

88
00:06:22,188 --> 00:06:25,346
micro SD cards. So suppose if we lost a micro SD

89
00:06:25,378 --> 00:06:28,810
card or there's a corruption of micro SD cards and

90
00:06:28,880 --> 00:06:32,570
if you want to provision that again, raspberry wire system,

91
00:06:32,720 --> 00:06:36,490
then what you can do is you can mount a directory

92
00:06:37,950 --> 00:06:42,158
in your raspberry wire into the network itself,

93
00:06:42,244 --> 00:06:45,854
into the network card itself, which will be nothing

94
00:06:45,972 --> 00:06:49,246
but will be mounted on the provisioning engine or

95
00:06:49,268 --> 00:06:51,870
a different machine through the network,

96
00:06:52,290 --> 00:06:56,642
obviously. Yeah. So this is the important part

97
00:06:56,696 --> 00:06:59,826
here. So we are talking about bare metal, but why we are

98
00:06:59,848 --> 00:07:03,282
talking about bare metal, why in this cloud world we

99
00:07:03,336 --> 00:07:07,094
are still talking about bare metal things. So the first

100
00:07:07,132 --> 00:07:11,046
thing, existing infrastructure services. So there

101
00:07:11,068 --> 00:07:14,646
are a lot of companies which has their own data center today

102
00:07:14,828 --> 00:07:18,130
and they want to use it

103
00:07:18,300 --> 00:07:22,202
for their own purpose and they want to provide that thing to other

104
00:07:22,256 --> 00:07:27,450
companies as well. So the existing infrastructure still

105
00:07:27,520 --> 00:07:30,990
want to use a bare metal things instead of the cloud

106
00:07:31,060 --> 00:07:34,382
things. The second important thing is

107
00:07:34,436 --> 00:07:37,920
data security. So if you talk about

108
00:07:39,170 --> 00:07:41,600
a very classified data,

109
00:07:42,050 --> 00:07:45,410
like the data for a particular bank

110
00:07:46,710 --> 00:07:50,114
which account holder is

111
00:07:50,152 --> 00:07:53,586
having how much of money in his account, something like

112
00:07:53,608 --> 00:07:57,334
that. So these are very classified data, which required quite

113
00:07:57,372 --> 00:08:00,774
a lot of security. So that's why all the

114
00:08:00,812 --> 00:08:04,566
banks on all those kind of companies, all those kind

115
00:08:04,588 --> 00:08:08,158
of domain where data security is a major concern,

116
00:08:08,274 --> 00:08:11,606
they still want to use bare metal,

117
00:08:11,718 --> 00:08:14,762
they still want to use their own data center instead

118
00:08:14,816 --> 00:08:18,170
of putting the data on the clouds.

119
00:08:19,390 --> 00:08:22,558
The third thing is latency. So when it

120
00:08:22,564 --> 00:08:25,840
is about cloud, whichever it is,

121
00:08:26,370 --> 00:08:29,882
you will get a limited latency.

122
00:08:30,026 --> 00:08:33,590
After the limit cross, you cannot decrease the dead

123
00:08:33,610 --> 00:08:37,700
particle latency. Instead of that,

124
00:08:38,470 --> 00:08:42,462
if you use a bare metal, you will get almost zero latency.

125
00:08:42,526 --> 00:08:46,446
Like last my latency or whatever, it will be almost

126
00:08:46,488 --> 00:08:49,590
zero latency. And the

127
00:08:49,660 --> 00:08:53,446
fourth thing is about consistent and predictable performance. So this is

128
00:08:53,468 --> 00:08:57,538
a very important term when you talk about the storage things and when you talk

129
00:08:57,564 --> 00:09:01,306
about using any kind of storage or

130
00:09:01,328 --> 00:09:05,082
servers. So you

131
00:09:05,136 --> 00:09:09,494
want consistent performance,

132
00:09:09,622 --> 00:09:13,134
a very good performance, which should be consistent. And if

133
00:09:13,172 --> 00:09:16,382
there is any problem, you should be able to predict it,

134
00:09:16,436 --> 00:09:20,318
right? So in the cloud thing, cloud world,

135
00:09:20,484 --> 00:09:24,946
you don't even know about where

136
00:09:25,128 --> 00:09:27,746
your data is even being put in,

137
00:09:27,848 --> 00:09:31,746
right? So in that case you

138
00:09:31,768 --> 00:09:35,886
cannot consist, the performance is not consistent.

139
00:09:36,078 --> 00:09:40,178
There can be ups and downs in your performance without even knowing

140
00:09:40,274 --> 00:09:43,846
with the same workload that you have, for example.

141
00:09:43,948 --> 00:09:47,506
And if you increase your workload or if you decrease

142
00:09:47,538 --> 00:09:51,446
your workload, how much performance it's going to impact, you cannot

143
00:09:51,478 --> 00:09:54,602
predict it. But if you have your

144
00:09:54,656 --> 00:09:58,266
own deer metal machine in which you know that I

145
00:09:58,288 --> 00:10:02,286
have this much of ram or just this much of things, so if

146
00:10:02,308 --> 00:10:05,914
I want to increase the workload, I should increase

147
00:10:05,962 --> 00:10:09,866
my ram or network device or like NIC

148
00:10:09,898 --> 00:10:13,626
card or whatever. So you can get the consistent and

149
00:10:13,668 --> 00:10:17,214
predictable performance in case of bare metal servers or bare metal

150
00:10:17,262 --> 00:10:21,010
storage. So the challenges,

151
00:10:23,750 --> 00:10:27,190
the thing is you get a lot of control

152
00:10:27,340 --> 00:10:31,302
when you have your bare metal within

153
00:10:31,356 --> 00:10:33,560
your premise, right?

154
00:10:35,930 --> 00:10:39,146
And that's how IoT is, increase of control comes with

155
00:10:39,168 --> 00:10:42,426
the increase of complexity, right? So for

156
00:10:42,448 --> 00:10:46,026
example, if you have a data center, you want to create a

157
00:10:46,048 --> 00:10:49,642
data center for a bank or something like that,

158
00:10:49,776 --> 00:10:54,026
and which should have like hundreds of servers.

159
00:10:54,218 --> 00:10:58,190
So it is difficult to manage and provision

160
00:10:58,530 --> 00:11:02,926
or manage the large scale infrastructures in

161
00:11:02,948 --> 00:11:06,900
case of bare metric. And you also have to sometimes

162
00:11:07,590 --> 00:11:11,602
deal with different type of cpus like

163
00:11:11,736 --> 00:11:13,460
Intel X 86,

164
00:11:14,810 --> 00:11:18,406
Arm 64. And there are other cpu as

165
00:11:18,428 --> 00:11:22,040
well, comes with IBM servers as well.

166
00:11:22,490 --> 00:11:27,042
And also you need to deal with different distros.

167
00:11:27,106 --> 00:11:30,810
For example, for any use case

168
00:11:30,960 --> 00:11:34,954
you want to provision half of your servers with

169
00:11:35,072 --> 00:11:38,890
Centos and half of your servers with Ubuntu.

170
00:11:40,370 --> 00:11:43,722
Then the complexity will increase

171
00:11:43,786 --> 00:11:47,866
again in this case. So these are the challenges

172
00:11:47,978 --> 00:11:51,278
which bare metal face when it comes to

173
00:11:51,284 --> 00:11:56,002
bare metal, a user will face. Right. So here comes

174
00:11:56,056 --> 00:11:59,742
the tinkable as a complete solution,

175
00:11:59,806 --> 00:12:02,980
I would say. Yeah.

176
00:12:03,350 --> 00:12:07,750
So tinkable is actually

177
00:12:07,900 --> 00:12:12,182
nothing but a project which help you to

178
00:12:12,236 --> 00:12:16,098
provisioning a machine automatically. It's an automated

179
00:12:16,194 --> 00:12:19,420
bare metal provisioning engine, as the title says.

180
00:12:20,190 --> 00:12:23,370
So it consists of five microservices.

181
00:12:24,110 --> 00:12:27,626
First is Tink, another one

182
00:12:27,648 --> 00:12:31,582
is boot, Hegel, Aussie and TBNJ. So as

183
00:12:31,636 --> 00:12:36,080
mentioned there in the diagram, tink is

184
00:12:36,450 --> 00:12:40,734
responsible for provisioning engine work as a workflow engine.

185
00:12:40,932 --> 00:12:43,970
So tink is actually a kind of,

186
00:12:44,120 --> 00:12:48,626
you can say an interface with

187
00:12:48,648 --> 00:12:53,314
the help of which you deal with all

188
00:12:53,352 --> 00:12:55,620
of your thinkable components. Right.

189
00:12:57,990 --> 00:13:01,634
And all the services. Boots is responsible for DHCP

190
00:13:01,682 --> 00:13:04,694
and iPXC things that we talk about,

191
00:13:04,892 --> 00:13:07,480
DHCP or TFTB services.

192
00:13:08,110 --> 00:13:12,294
And Hegel is there to provide you metadata

193
00:13:12,422 --> 00:13:15,542
of the particular hardware in case of requirement.

194
00:13:15,686 --> 00:13:18,890
And as we talked about earlier in this slide,

195
00:13:19,310 --> 00:13:22,902
that we need some initial

196
00:13:22,966 --> 00:13:26,922
file system or initial files to put into a network.

197
00:13:27,066 --> 00:13:30,106
So here comes the Aussie.

198
00:13:30,218 --> 00:13:34,050
In the Aussie, Aussie is actually not a kind of

199
00:13:34,200 --> 00:13:37,742
service. I would say it's more or less a combination

200
00:13:37,806 --> 00:13:41,198
of files which is required

201
00:13:41,294 --> 00:13:45,050
when it comes to network boot. And PVNJ

202
00:13:45,230 --> 00:13:49,158
is a process which is like just

203
00:13:49,244 --> 00:13:53,398
to control your power off and power on of your system

204
00:13:53,484 --> 00:13:57,250
and boot control services. For example, if you want to

205
00:13:57,420 --> 00:14:00,666
boot from iPXe or if you want to boot from

206
00:14:00,848 --> 00:14:04,854
somewhere else, like a disk, inbuilt disk

207
00:14:04,902 --> 00:14:08,426
or something like USB or something like

208
00:14:08,448 --> 00:14:09,020
that.

209
00:14:12,210 --> 00:14:16,126
So this is the diagram in

210
00:14:16,148 --> 00:14:20,080
which you can easily say that

211
00:14:20,850 --> 00:14:24,738
for a workflow, to run a workflow or basically to

212
00:14:24,824 --> 00:14:31,218
provision a bare metal machine, you need already

213
00:14:31,304 --> 00:14:35,858
provisioned or control plane kind of control plane,

214
00:14:35,954 --> 00:14:39,714
which is like provisioning engine. So on the provisioning

215
00:14:39,762 --> 00:14:43,730
engine, the component of tinkable

216
00:14:43,890 --> 00:14:47,222
will be running. For example, on the

217
00:14:47,276 --> 00:14:52,170
provisioner there is tink server. So tink

218
00:14:52,510 --> 00:14:56,742
is a complete workflow engine. So it has three parts.

219
00:14:56,886 --> 00:15:01,118
One is tink CLI which is being used

220
00:15:01,284 --> 00:15:05,034
by the administrator or the user to interact with the tink

221
00:15:05,082 --> 00:15:05,870
server.

222
00:15:08,690 --> 00:15:11,774
On the provisioner there is a tink server which is

223
00:15:11,812 --> 00:15:15,442
running which is actual workflow engine

224
00:15:15,576 --> 00:15:18,962
and responsible for executing those with

225
00:15:19,016 --> 00:15:21,140
maintaining the workflows and the data.

226
00:15:22,790 --> 00:15:26,502
And on the provisioning boots, Hegel and

227
00:15:26,556 --> 00:15:30,086
Aussie will also be present so that they can handle the

228
00:15:30,108 --> 00:15:33,686
DHCP TFTP remitter data service

229
00:15:33,788 --> 00:15:36,150
and the installation environment.

230
00:15:41,130 --> 00:15:44,874
And this is in the

231
00:15:45,072 --> 00:15:48,486
lower part of the diagram there are three worker machine,

232
00:15:48,598 --> 00:15:50,700
so it may be one, two or three.

233
00:15:52,750 --> 00:15:57,438
We'll think about any fund. So there's one machine which

234
00:15:57,604 --> 00:15:59,360
want to provision itself.

235
00:16:01,010 --> 00:16:04,590
So in this diagram

236
00:16:04,670 --> 00:16:07,774
I will be providing you a kind of workflow,

237
00:16:07,902 --> 00:16:11,890
a kind of basically flowchart or flow deck or

238
00:16:11,960 --> 00:16:14,878
the flow in which the provisioning,

239
00:16:15,054 --> 00:16:18,390
provisioning engine happen if you use the tinkable.

240
00:16:18,970 --> 00:16:22,374
So what you need to do is first of all you need to

241
00:16:22,492 --> 00:16:26,294
up your provisioner, right? So when you start

242
00:16:26,332 --> 00:16:30,026
your provisioner there are a lot of service which will

243
00:16:30,048 --> 00:16:33,594
be running on the provisioner. One of them is like

244
00:16:33,632 --> 00:16:36,358
tink server is Boots Hegel.

245
00:16:36,534 --> 00:16:40,118
As I mentioned, Aussie is not a service, it's just a combination of

246
00:16:40,144 --> 00:16:43,966
file. But it should be present on the provisioning engine. So that can

247
00:16:43,988 --> 00:16:47,550
be servers once the provisionning engine,

248
00:16:50,770 --> 00:16:54,594
yeah. So this is a provisioner and also there

249
00:16:54,632 --> 00:16:58,162
are two important things which should also

250
00:16:58,216 --> 00:17:02,066
be there in the tink server. One is the database in

251
00:17:02,088 --> 00:17:05,646
which your hardware data template data workflow

252
00:17:05,678 --> 00:17:08,946
data will be stored and the private

253
00:17:08,978 --> 00:17:14,050
docker registry in which I will be hosting images

254
00:17:14,130 --> 00:17:18,002
of the actions of the workflow. Like what are the actions?

255
00:17:18,066 --> 00:17:21,466
For example, your boot process required a lot of

256
00:17:21,488 --> 00:17:25,622
actions like first you want to remove

257
00:17:25,686 --> 00:17:29,466
or you want to do a disk wipe operation. So for that you

258
00:17:29,488 --> 00:17:33,374
will build an image for disk wipe and then

259
00:17:33,412 --> 00:17:36,682
you will push that image in the private docker registry.

260
00:17:36,826 --> 00:17:39,550
We'll talk about that in the later slide.

261
00:17:42,850 --> 00:17:46,762
This is a kind of flow. So what it does is

262
00:17:46,916 --> 00:17:50,862
first user need to put all the hardware

263
00:17:50,926 --> 00:17:55,634
details in the tink server using

264
00:17:55,672 --> 00:17:59,478
the tink CLI in a JSON format. So what

265
00:17:59,484 --> 00:18:02,886
are the hardware, hardware details like hardware Id

266
00:18:02,988 --> 00:18:06,694
and the Mac and the IP it wants and

267
00:18:06,812 --> 00:18:11,270
an ip which it required

268
00:18:11,430 --> 00:18:14,602
or it has. The second thing is like

269
00:18:14,656 --> 00:18:18,698
template which is the most important part of a

270
00:18:18,704 --> 00:18:23,118
workflow because it defines a workflow. So user can

271
00:18:23,284 --> 00:18:25,550
define its own template.

272
00:18:27,090 --> 00:18:30,526
So whatever he wants to use, whatever user want to

273
00:18:30,548 --> 00:18:35,630
provision. For example if a user want to provisioning into CenTOs

274
00:18:35,790 --> 00:18:39,602
or Ubuntu or if you user want to do something

275
00:18:39,656 --> 00:18:42,910
else so he can define its own template.

276
00:18:42,990 --> 00:18:46,260
So we'll talk about template later.

277
00:18:46,790 --> 00:18:49,886
Again the details. And third thing is workflow.

278
00:18:49,918 --> 00:18:53,554
So workflow is nothing but a combination of template

279
00:18:53,602 --> 00:18:57,922
and the hardware. So for example if you have multiple

280
00:18:57,986 --> 00:19:01,554
templates stored in your tink server and multiple

281
00:19:01,602 --> 00:19:05,606
hardware, multiple bare metal hardware stored in

282
00:19:05,628 --> 00:19:09,146
your tink server. So what you can do is you can select

283
00:19:09,328 --> 00:19:13,038
any of the template, any of the

284
00:19:13,124 --> 00:19:16,622
hardware to create a workflow. So if

285
00:19:16,676 --> 00:19:20,640
I will just would like to give you

286
00:19:21,490 --> 00:19:23,440
a quick demo out of it.

287
00:19:25,010 --> 00:19:28,880
How does it work? So for example, if you want to like,

288
00:19:29,490 --> 00:19:34,998
so there are tink hardware if

289
00:19:35,044 --> 00:19:35,640
it.

290
00:19:52,090 --> 00:19:55,974
I have deployed a vagrant virtual

291
00:19:56,022 --> 00:19:59,722
box, a virtual machine with the help of vagrant which

292
00:19:59,776 --> 00:20:03,680
is working as a control plane. So if you will see.

293
00:20:06,930 --> 00:20:11,182
So here are the things, if you can see it out here.

294
00:20:11,316 --> 00:20:14,158
So there are, as I mentioned,

295
00:20:14,324 --> 00:20:17,550
that the tink, ClI,

296
00:20:17,970 --> 00:20:22,570
tink server registry, eagle boots

297
00:20:22,730 --> 00:20:25,926
and the DB and the Nginx also running out

298
00:20:25,948 --> 00:20:29,346
of it. So Nginx is actually used to servers

299
00:20:29,378 --> 00:20:34,866
the TFT files to the worker

300
00:20:34,898 --> 00:20:37,030
machine or the bare metal machine,

301
00:20:37,470 --> 00:20:40,810
right. So if I will go into

302
00:20:40,880 --> 00:20:44,314
the ClI, if I'll do the docker exit into

303
00:20:44,352 --> 00:20:47,740
the CLI and I will

304
00:20:48,350 --> 00:20:52,234
try to do a hardware which I have listed

305
00:20:52,282 --> 00:20:55,918
on. So these are the two

306
00:20:56,004 --> 00:20:59,550
hardwares which I have pushed

307
00:21:00,050 --> 00:21:04,462
in the hardware database.

308
00:21:04,606 --> 00:21:08,254
So if you want to check any of the details of the hardware,

309
00:21:08,302 --> 00:21:11,826
for example, you can provide a Mac address of

310
00:21:11,848 --> 00:21:15,650
particular hardware here using the Mac command.

311
00:21:16,070 --> 00:21:20,390
And then you can provide details

312
00:21:22,730 --> 00:21:26,870
flag. And then you will get the complete metadata

313
00:21:27,790 --> 00:21:30,810
which is like this in the JSON format.

314
00:21:33,470 --> 00:21:37,098
So basically this is the

315
00:21:37,184 --> 00:21:40,894
minimum hardware data which you

316
00:21:40,932 --> 00:21:44,910
require to store for a particular hardware.

317
00:21:45,330 --> 00:21:49,642
So in which comes the metadata part, the network

318
00:21:49,706 --> 00:21:52,898
part, at least one interface it should have, which should

319
00:21:52,904 --> 00:21:58,690
be of a type DHCP and it should have a Mac address hostname

320
00:21:59,190 --> 00:22:02,850
architecture and then in IP it should have an IP

321
00:22:03,990 --> 00:22:07,774
Iot wants to get. And the netboot,

322
00:22:07,902 --> 00:22:11,334
it's like allow PXE is true and allow workflow should also be

323
00:22:11,372 --> 00:22:14,998
true to get the workflow running. And there's a last field

324
00:22:15,084 --> 00:22:19,030
which is very important like id of the particular hardware which is like unique

325
00:22:19,190 --> 00:22:20,650
across the hardware.

326
00:22:29,230 --> 00:22:32,474
So this is the hardware data. So let's

327
00:22:32,522 --> 00:22:34,960
talk about the template again.

328
00:22:38,130 --> 00:22:42,030
So just like hardware we also

329
00:22:42,100 --> 00:22:45,586
have like tink template list. So if you want

330
00:22:45,608 --> 00:22:49,762
to look at what this

331
00:22:49,816 --> 00:22:52,580
template is like, it is like this.

332
00:22:55,770 --> 00:23:00,150
Yeah. So this is a very basic template

333
00:23:00,730 --> 00:23:03,906
which is required to run a workflow.

334
00:23:04,018 --> 00:23:07,906
So the template should have a version

335
00:23:08,098 --> 00:23:11,414
and the name of the template, the global timeout.

336
00:23:11,462 --> 00:23:15,338
The global timeout is nothing, but is actually the time, the time

337
00:23:15,424 --> 00:23:19,654
in which all the tasks in the particular template

338
00:23:19,702 --> 00:23:24,394
should be completed. Otherwise the workflow will get timeout and

339
00:23:24,432 --> 00:23:28,526
there will be a task. And in the task there

340
00:23:28,548 --> 00:23:31,934
can be multiple actions and there can be multiple tasks as well.

341
00:23:31,972 --> 00:23:35,250
In a particular template, in a particular

342
00:23:35,320 --> 00:23:39,026
task there can be multiple actions. So here I

343
00:23:39,048 --> 00:23:43,214
have just mentioned one action named as server partitioning.

344
00:23:43,262 --> 00:23:46,422
But I'm just using the hello world image. So I will be just

345
00:23:46,476 --> 00:23:50,198
saying the hello. The important

346
00:23:50,284 --> 00:23:54,310
part is here is this one. So the worker

347
00:23:54,810 --> 00:23:59,080
is actually device one. So what will happen is

348
00:23:59,450 --> 00:24:03,238
so when I will be creating a workflow,

349
00:24:03,334 --> 00:24:08,090
right? So let's see what is the workflow.

350
00:24:12,050 --> 00:24:15,774
So I have already created these workflows which

351
00:24:15,972 --> 00:24:17,550
executed successfully.

352
00:24:18,450 --> 00:24:22,314
So what I will do is I will

353
00:24:22,452 --> 00:24:25,790
be doing tink workflow,

354
00:24:25,870 --> 00:24:29,666
I will be deleting two of them.

355
00:24:29,848 --> 00:24:32,980
It's not even required. So what you can do,

356
00:24:33,430 --> 00:24:36,614
you can see first of all

357
00:24:36,652 --> 00:24:39,190
what it takes to create a workflow.

358
00:24:54,910 --> 00:24:58,410
As you can see, the tink workflow create

359
00:24:58,480 --> 00:25:02,030
command is actually required a template

360
00:25:02,770 --> 00:25:06,634
uid. So I have a template

361
00:25:06,762 --> 00:25:11,002
which have a uid this one. And then it required a hardware

362
00:25:11,066 --> 00:25:14,750
string. So it is nothing but a targeted hardware.

363
00:25:14,910 --> 00:25:35,110
So when I will be creating a new workflow t

364
00:25:35,180 --> 00:25:38,934
I will be providing the target, the template

365
00:25:38,982 --> 00:25:43,014
which I need to execute. And in the hyphen

366
00:25:43,062 --> 00:25:48,282
r I will be providing the

367
00:25:48,336 --> 00:25:54,574
targeted device and

368
00:25:54,612 --> 00:25:56,990
the Mac address of a particular device.

369
00:26:06,870 --> 00:26:09,490
As you can see that my workflow has created.

370
00:26:10,070 --> 00:26:13,860
So here the important thing is this key

371
00:26:15,050 --> 00:26:18,774
of this input should match

372
00:26:18,892 --> 00:26:22,294
with the key that the template has.

373
00:26:22,412 --> 00:26:26,278
So if you will see, it will replace the Mac address of

374
00:26:26,364 --> 00:26:30,874
that in

375
00:26:30,912 --> 00:26:37,498
place of device one in the template. So let's see what

376
00:26:37,664 --> 00:26:41,398
is the workflow. Yeah, so this

377
00:26:41,424 --> 00:26:44,942
is how my workflow is looking like. It is saying that

378
00:26:44,996 --> 00:26:47,854
your global time order is 600.

379
00:26:48,052 --> 00:26:52,074
As I mentioned, the template devices a workflow. Now my workflow

380
00:26:52,122 --> 00:26:55,650
is also know that it should also run

381
00:26:55,800 --> 00:26:59,154
on this worker which

382
00:26:59,192 --> 00:27:03,970
has this Mac address. So when it receives the

383
00:27:04,120 --> 00:27:07,846
id or the request from this Mac address

384
00:27:08,028 --> 00:27:12,002
only then it will provide the workflow

385
00:27:12,146 --> 00:27:16,454
that. Okay, start this workflow. And the

386
00:27:16,492 --> 00:27:20,442
important part is the image of the hello world should be there

387
00:27:20,496 --> 00:27:24,618
in your private docker registry which is running here

388
00:27:24,784 --> 00:27:26,650
on your Pavisner machine.

389
00:27:30,050 --> 00:27:32,000
So this is like,

390
00:27:33,330 --> 00:27:36,874
yeah, so this is the private

391
00:27:36,922 --> 00:27:40,206
docker registry which is running. So it

392
00:27:40,228 --> 00:27:43,986
should have the hello world image and it should also

393
00:27:44,088 --> 00:27:51,134
have that tink

394
00:27:51,182 --> 00:27:54,970
worker image as well. So as you can see, my docker,

395
00:27:55,070 --> 00:27:58,360
the private registries IP is this.

396
00:27:58,890 --> 00:28:02,022
So it has the tink worker image and it also

397
00:28:02,076 --> 00:28:05,160
has the hello world image in itself.

398
00:28:05,770 --> 00:28:09,690
So now what I will do is I will start another vm

399
00:28:10,590 --> 00:28:12,410
with the help of vagrant.

400
00:28:17,070 --> 00:28:20,622
Okay, so we'll look into that later once

401
00:28:20,676 --> 00:28:26,314
we go for the demo. So this is how your provisioner

402
00:28:26,362 --> 00:28:29,946
looks like. Yeah, so let's

403
00:28:29,978 --> 00:28:33,066
talk about this. So tinkable. Basically the

404
00:28:33,108 --> 00:28:37,026
provisioning, as I talk about is a control plane. It should have boots it should

405
00:28:37,048 --> 00:28:40,862
have heagle boots for DHCP and TFTP,

406
00:28:40,926 --> 00:28:44,366
hegel for providing metadata of machine tink

407
00:28:44,398 --> 00:28:47,842
server, tink CLI and PSQL

408
00:28:47,906 --> 00:28:51,686
is nothing but basically a DPDB deployment of a DB which

409
00:28:51,708 --> 00:28:55,430
is used to store the hardware data, the events

410
00:28:55,770 --> 00:28:58,794
and basically the templates and

411
00:28:58,832 --> 00:29:02,858
everything else. The private docker registry I talked about,

412
00:29:03,024 --> 00:29:06,822
it should have the image of tink

413
00:29:06,886 --> 00:29:11,230
worker. I think there's a spelling mistake there in the image section.

414
00:29:12,290 --> 00:29:16,174
So Iot should have an image of tink worker and also all

415
00:29:16,212 --> 00:29:19,882
the actions, the image of all the actions

416
00:29:20,026 --> 00:29:23,746
which are there in the template should

417
00:29:23,768 --> 00:29:26,610
be stored and should be stored in the registry.

418
00:29:29,270 --> 00:29:32,610
Okay, so this is the hardware data that I had

419
00:29:32,680 --> 00:29:36,066
already given you the reference.

420
00:29:36,178 --> 00:29:41,334
So this is the minimal hardware data which

421
00:29:41,372 --> 00:29:44,466
is required. This is the same as I shown

422
00:29:44,498 --> 00:29:48,770
you that it required id metadata.

423
00:29:48,850 --> 00:29:51,530
And the network network should have interface.

424
00:29:52,190 --> 00:29:56,006
At least one of them should have a DHCP type architecture

425
00:29:56,038 --> 00:29:59,334
of cpu and the IP, IP,

426
00:29:59,382 --> 00:30:03,198
like what IP I would like to have and the Mac address.

427
00:30:03,284 --> 00:30:07,258
So here it is. It's just like the sample.

428
00:30:07,434 --> 00:30:11,066
And if you will see here, you will see the Mac

429
00:30:11,098 --> 00:30:15,202
address is actually this and

430
00:30:15,256 --> 00:30:18,786
is UEFI is not required now. Previously it was

431
00:30:18,808 --> 00:30:22,542
required, but not now. We have removed that dependency

432
00:30:22,606 --> 00:30:26,546
as. So let's

433
00:30:26,578 --> 00:30:29,986
talk about template. As I've shown

434
00:30:30,018 --> 00:30:34,440
you a very basic template in my example,

435
00:30:39,630 --> 00:30:42,540
which is nothing but like this one,

436
00:30:42,910 --> 00:30:47,094
right? So this is a very basic template, but your template

437
00:30:47,222 --> 00:30:50,140
can be as complex as this one.

438
00:30:51,730 --> 00:30:54,570
It can have task, so tasks,

439
00:30:54,650 --> 00:30:59,934
there can be multiple tasks and each task should

440
00:30:59,972 --> 00:31:03,354
have like name, the worker.

441
00:31:03,482 --> 00:31:07,326
Worker is nothing but a vm or the machine,

442
00:31:07,358 --> 00:31:10,130
or the bare metal machine you want to provision.

443
00:31:10,470 --> 00:31:14,174
And the volumes, so all the volumes you will define

444
00:31:14,222 --> 00:31:17,862
at the task level will be used for each and every

445
00:31:17,916 --> 00:31:23,030
action. So we support that volume level things

446
00:31:23,100 --> 00:31:26,886
at a task level. And if there is a particular

447
00:31:26,988 --> 00:31:30,314
volume for a particular action, then it should also

448
00:31:30,352 --> 00:31:33,706
be supported, as you can see in the

449
00:31:33,728 --> 00:31:37,174
action and also the enrollment variables,

450
00:31:37,222 --> 00:31:41,118
for example the mirror host. So mirror host is at

451
00:31:41,124 --> 00:31:45,370
the task level. So mirror host will be applicable

452
00:31:45,530 --> 00:31:48,686
to all the actions. So all the actions will

453
00:31:48,708 --> 00:31:52,014
be using this mirror host envs if

454
00:31:52,052 --> 00:31:55,842
required. And then

455
00:31:55,896 --> 00:31:59,726
there is actions. The basic requirement of action

456
00:31:59,758 --> 00:32:02,798
is like the name of the action, the image,

457
00:32:02,894 --> 00:32:06,678
like the name of the image which it

458
00:32:06,764 --> 00:32:09,906
will fetch from the private docker registry

459
00:32:10,018 --> 00:32:13,080
that we talked about here.

460
00:32:26,250 --> 00:32:30,670
Yeah, so it,

461
00:32:30,740 --> 00:32:33,838
so action should have the name, the image and

462
00:32:33,924 --> 00:32:38,160
action can also have its own timeout, for example,

463
00:32:38,610 --> 00:32:42,062
if disk wipe is not completed within 90

464
00:32:42,116 --> 00:32:45,854
seconds. So by default it is seconds. If disk

465
00:32:45,902 --> 00:32:49,102
wipe is not completed within 90 seconds,

466
00:32:49,246 --> 00:32:52,802
the action should timed out and the workflow should

467
00:32:52,856 --> 00:32:54,850
return as an error.

468
00:32:57,590 --> 00:33:00,306
Same for the next action, the disk partition.

469
00:33:00,498 --> 00:33:04,486
So these are the basic things when you install

470
00:33:04,588 --> 00:33:08,706
any os on your bare

471
00:33:08,738 --> 00:33:12,426
metal machine. So first you do a disk wipe, then you do

472
00:33:12,448 --> 00:33:16,170
a disk partition, and then you install

473
00:33:16,240 --> 00:33:19,546
a root fs, which is provided by the Aussie, as I

474
00:33:19,568 --> 00:33:23,434
talked about. So root fs means the very basic

475
00:33:23,482 --> 00:33:26,958
Os in which you will run all those things. Then you will install

476
00:33:27,044 --> 00:33:31,166
the actual graph files which you want

477
00:33:31,188 --> 00:33:35,402
to do. For example, if you want to install the ubuntu,

478
00:33:35,466 --> 00:33:39,194
you will install the graph

479
00:33:39,322 --> 00:33:40,910
files for ubuntu.

480
00:33:43,810 --> 00:33:48,242
Yeah. So the image

481
00:33:48,386 --> 00:33:52,520
name should be very careful. For example, if you have

482
00:33:54,330 --> 00:33:59,838
basically have two templates, one for Centaur

483
00:33:59,874 --> 00:34:03,386
and one for installing the Ubuntu. So in

484
00:34:03,408 --> 00:34:06,874
that case the first two action will

485
00:34:06,912 --> 00:34:10,800
remain the same and the last

486
00:34:11,410 --> 00:34:14,926
actions, last action install grub. The name

487
00:34:14,948 --> 00:34:19,102
of the image should change. It should like install grub Ubuntu or install

488
00:34:19,156 --> 00:34:23,422
grub sentos, something like that. And we also support volume levels,

489
00:34:23,486 --> 00:34:27,106
volumes at particular action level. So in

490
00:34:27,128 --> 00:34:30,546
that case the volume which

491
00:34:30,568 --> 00:34:34,302
is there on the action will be mounted,

492
00:34:34,446 --> 00:34:37,734
not for the remaining actions. So this is how

493
00:34:37,772 --> 00:34:41,378
a workflow definition or a template

494
00:34:41,554 --> 00:34:42,600
looks like.

495
00:34:46,810 --> 00:34:49,890
Yeah, so this I have already shown.

496
00:34:49,970 --> 00:34:53,978
So this is a way in which your CLI works.

497
00:34:54,144 --> 00:34:57,798
Like you have tink hardware, tink template and tink workflow.

498
00:34:57,894 --> 00:35:01,454
So these are the three main clis. So I'm going to show

499
00:35:01,492 --> 00:35:04,974
you how it will. So basically in this

500
00:35:05,012 --> 00:35:08,718
slide as well, you can see, you can exact basically

501
00:35:08,804 --> 00:35:12,774
and enter into a tink CLI container.

502
00:35:12,922 --> 00:35:17,230
And then you can run tink hardware

503
00:35:17,310 --> 00:35:20,770
push and then you can provide a file in which

504
00:35:20,840 --> 00:35:24,674
your hardware data is there, which is nothing but

505
00:35:24,712 --> 00:35:27,906
a hardware

506
00:35:27,938 --> 00:35:31,254
data in JsOn format. So I will be

507
00:35:31,292 --> 00:35:33,080
showing you that again.

508
00:35:42,750 --> 00:35:46,538
So if you can see tink hardware, actually support

509
00:35:46,704 --> 00:35:50,534
these few

510
00:35:50,592 --> 00:35:54,570
like 123-4567 commands. One is like delete

511
00:35:54,730 --> 00:35:58,446
id is like get hardware by Id. IP is

512
00:35:58,468 --> 00:36:02,198
like IP, get hardware by any associated ip

513
00:36:02,394 --> 00:36:06,526
list means list all the known hardware. Hardware Mac

514
00:36:06,558 --> 00:36:10,014
is like get hardware by any associated

515
00:36:10,062 --> 00:36:14,190
Mac. Push is like new hardware

516
00:36:14,350 --> 00:36:17,638
like to tink, which I've shown you in the

517
00:36:17,644 --> 00:36:21,480
slide. So if you want to do it like this,

518
00:36:21,930 --> 00:36:25,814
what I can do is I can create a

519
00:36:25,852 --> 00:36:30,250
file which

520
00:36:30,400 --> 00:36:33,914
can have the

521
00:36:33,952 --> 00:36:34,540
data.

522
00:36:47,810 --> 00:36:51,550
So for that, first we should make sure that

523
00:36:51,700 --> 00:36:54,430
this id is not present in your hardware.

524
00:36:54,590 --> 00:36:58,450
So what we will do is we will first of all list all the hardware.

525
00:37:01,750 --> 00:37:05,366
So as you can see, this id is already present. So what

526
00:37:05,388 --> 00:37:09,430
I will do, I will change that id for now because

527
00:37:09,500 --> 00:37:14,040
every hardware will have their unique ip. So I'll make it as two

528
00:37:16,890 --> 00:37:20,700
and also the Mac address as well. So if you will see

529
00:37:21,070 --> 00:37:24,250
the particular Mac address is already

530
00:37:24,320 --> 00:37:26,540
there in the list,

531
00:37:27,870 --> 00:37:31,006
like this one. So you also need to change that as well.

532
00:37:31,028 --> 00:37:36,320
Otherwise you will not be able to store that

533
00:37:36,850 --> 00:37:38,590
data into your database.

534
00:37:40,530 --> 00:37:43,982
So I have changed the Mac address and

535
00:37:44,036 --> 00:37:47,940
the IP address. So what I'm going to do is,

536
00:37:56,710 --> 00:38:00,422
so it says hardware data post successfully. So what

537
00:38:00,476 --> 00:38:03,654
we can do, we can just list the hardware. So now it has

538
00:38:03,692 --> 00:38:07,510
three hardware. Initially it was having two, now it has three hardware,

539
00:38:08,410 --> 00:38:11,894
out of which two of can have same

540
00:38:11,932 --> 00:38:15,514
ip. So one of them can run at a time. So it should

541
00:38:15,552 --> 00:38:18,474
also have a unique ip as well. So what I will do is I will

542
00:38:18,512 --> 00:38:25,966
simply override that thing and I

543
00:38:25,988 --> 00:38:29,742
will again do the same thing. So if the id

544
00:38:29,796 --> 00:38:33,614
remains the same, the data will be overwritten.

545
00:38:33,742 --> 00:38:37,390
Now you can see the ip has changed for the hardware.

546
00:38:37,550 --> 00:38:40,740
So when you will start with this Mac address,

547
00:38:41,270 --> 00:38:44,690
then it will look for this ip.

548
00:38:47,850 --> 00:38:51,602
So now Iot comes to creation of a template.

549
00:38:51,746 --> 00:38:55,222
When you create a template, you need to have

550
00:38:55,276 --> 00:38:57,334
a template name. So let me show you.

551
00:38:57,372 --> 00:39:10,782
That's it.

552
00:39:10,836 --> 00:39:14,126
So it has functionality of create, delete, get list and

553
00:39:14,148 --> 00:39:17,950
update, right? So what you can do, you can do a tink

554
00:39:21,090 --> 00:39:22,880
template create.

555
00:39:26,550 --> 00:39:29,140
So I have a sample template here,

556
00:39:30,950 --> 00:39:33,506
which is nothing but again a hello world,

557
00:39:33,688 --> 00:39:37,062
but I need to have a unique name for it. So now

558
00:39:37,116 --> 00:39:39,640
let me check what are the.

559
00:39:49,710 --> 00:39:53,020
So I have a template name here

560
00:39:53,550 --> 00:39:57,786
in which the template name is sample. So if

561
00:39:57,808 --> 00:40:01,166
I create a new template, I must have

562
00:40:01,188 --> 00:40:05,454
a different name, otherwise it will not be able to get basically

563
00:40:05,652 --> 00:40:09,790
the template. So if you will try tink

564
00:40:10,290 --> 00:40:20,678
template creates

565
00:40:20,714 --> 00:40:24,690
nothing but a path of the file, of the template file.

566
00:40:25,190 --> 00:40:29,074
So as you can see, it has created the template.

567
00:40:29,122 --> 00:40:32,694
And now if you will list, Iot will have basically

568
00:40:32,812 --> 00:40:37,110
two templates. One of is

569
00:40:37,180 --> 00:40:39,980
named as sample and one is named as sample two.

570
00:40:43,310 --> 00:40:47,766
And then the third one is the workflow. So I have already shown

571
00:40:47,798 --> 00:40:51,210
you the workflow creation part. So what it can have is

572
00:40:51,360 --> 00:40:55,822
like it can have workflow create hyphen t the template uid and

573
00:40:55,876 --> 00:40:59,200
then it can have the device one as a key.

574
00:41:00,370 --> 00:41:03,426
This key can be changed as per the templates. So if

575
00:41:03,448 --> 00:41:05,780
your template, for example,

576
00:41:08,630 --> 00:41:12,318
if your template here has worker,

577
00:41:12,494 --> 00:41:16,600
if you change it to device one from like

578
00:41:17,530 --> 00:41:20,040
worker one,

579
00:41:20,650 --> 00:41:23,670
then while creation of a template,

580
00:41:33,310 --> 00:41:40,720
you need to have here like worker one or something right.

581
00:41:41,490 --> 00:41:45,134
So since we have not updated the template yet

582
00:41:45,172 --> 00:41:49,310
in the database because it is simply changed here.

583
00:41:49,460 --> 00:42:00,722
But if we will try to get the template which

584
00:42:00,776 --> 00:42:04,500
we have just created. So we have just created this one right here.

585
00:42:07,850 --> 00:42:11,286
So here it is still device one, so you can update it if you

586
00:42:11,308 --> 00:42:14,470
want with the help of tink template update.

587
00:42:19,710 --> 00:42:24,140
So now I will be taking care of which

588
00:42:25,550 --> 00:42:27,290
workflow I've created.

589
00:42:33,970 --> 00:42:38,190
So as you can see I have like

590
00:42:38,340 --> 00:42:44,238
workflow which is dell 21,

591
00:42:44,324 --> 00:42:47,646
22 yeah, so this is the new workflow which

592
00:42:47,668 --> 00:42:51,422
I have created. So I can check where the

593
00:42:51,476 --> 00:42:54,902
state or yeah,

594
00:42:54,996 --> 00:42:56,470
state of that workflow.

595
00:42:58,250 --> 00:43:02,360
So it says that this is the workflow but

596
00:43:02,890 --> 00:43:06,470
the progress is 0% and the current action state

597
00:43:06,540 --> 00:43:09,786
is pending. So what I will do is I

598
00:43:09,808 --> 00:43:13,610
will see what is this workflow,

599
00:43:15,070 --> 00:43:19,014
the Mac address basically. So this workflow is related

600
00:43:19,062 --> 00:43:22,750
to this Mac address. So what I'm going to do is I'm going to create

601
00:43:22,820 --> 00:43:26,430
another vm with the help of vagrant.

602
00:43:32,450 --> 00:43:36,258
So this is my vagrant file. So what I

603
00:43:36,264 --> 00:43:39,442
will do, I will simply change the Mac address from here to

604
00:43:39,496 --> 00:43:45,974
zero eight to two here

605
00:43:46,012 --> 00:43:46,760
as well,

606
00:43:49,690 --> 00:43:53,014
right? So now I will be giving

607
00:43:53,052 --> 00:43:56,946
you the demo. So as we know that we already have prepared

608
00:43:56,978 --> 00:44:00,218
the setup. So for preparing this setup, what you

609
00:44:00,224 --> 00:44:04,234
can do, you can go to the tinkerbell.org which

610
00:44:04,272 --> 00:44:08,540
I have opened it for you. So you can go to the documentation part

611
00:44:12,370 --> 00:44:15,934
and then you can go to the setup and

612
00:44:15,972 --> 00:44:18,810
you can do a local setup with vagrant.

613
00:44:18,890 --> 00:44:22,046
So this will provide you all the steps with

614
00:44:22,068 --> 00:44:25,854
the help of which you can up your provisioning

615
00:44:25,902 --> 00:44:29,202
machine and then you can start

616
00:44:29,256 --> 00:44:32,100
your workflow, right?

617
00:44:33,030 --> 00:44:36,390
And this is the source code of Tinkerbell.

618
00:44:38,490 --> 00:44:41,794
So this is the project in which we have tink, Aussie,

619
00:44:41,842 --> 00:44:44,520
Hegel boots and everything else.

620
00:44:46,330 --> 00:44:49,974
So I'll just show you the quick demo. So what I will do,

621
00:44:50,012 --> 00:44:53,770
I will just start

622
00:44:53,840 --> 00:44:57,066
a worker, basically a new virtual machine with

623
00:44:57,088 --> 00:45:00,894
the help of virtualbox as

624
00:45:00,932 --> 00:45:04,074
I've shown you the vagrant file. In the vagrant

625
00:45:04,122 --> 00:45:07,310
file the Mac address is I have changed the Mac address

626
00:45:07,380 --> 00:45:10,400
to this one and

627
00:45:10,930 --> 00:45:14,782
here as well for the worker part and

628
00:45:14,836 --> 00:45:19,298
again here as well if you want to do any customization part.

629
00:45:19,464 --> 00:45:23,198
So I have changed the Mac address to the one in which the workflow

630
00:45:23,214 --> 00:45:27,086
is pointing to. So when I will be starting this vagrant

631
00:45:27,118 --> 00:45:31,298
machine, when I will be starting this virtualbox

632
00:45:31,394 --> 00:45:35,554
named as worker with the command, this vagrant

633
00:45:35,602 --> 00:45:39,194
up worker, so what

634
00:45:39,232 --> 00:45:42,634
it will do, it will first import a base os of

635
00:45:42,672 --> 00:45:46,490
alpine and then it will start basically

636
00:45:46,560 --> 00:45:52,734
in the ipxe mode as

637
00:45:52,772 --> 00:45:56,366
you can see the worker has already started and now it

638
00:45:56,388 --> 00:45:59,870
is going for installation. So Iot is asking

639
00:45:59,940 --> 00:46:03,498
for an ip, it has gotten one four

640
00:46:03,684 --> 00:46:07,634
as an ip here. Now Iot is asking for

641
00:46:07,672 --> 00:46:11,150
few files like give me the Tftp

642
00:46:11,230 --> 00:46:24,406
files like so

643
00:46:24,428 --> 00:46:27,794
it has gone to files vm, linux and anytime

644
00:46:27,842 --> 00:46:31,786
fs from the Aussie part and

645
00:46:31,808 --> 00:46:38,134
now it has started the installation of OS WcW

646
00:46:38,182 --> 00:46:41,806
base OS which aussie has provided which is nothing but an

647
00:46:41,828 --> 00:46:42,590
alpine.

648
00:46:52,530 --> 00:46:56,830
Just would like to show you something like the logs.

649
00:47:30,370 --> 00:47:33,774
Once this worker boots up it will

650
00:47:33,812 --> 00:47:38,080
start the worker now it will send the request to

651
00:47:38,770 --> 00:47:42,866
tink server. Yeah so I

652
00:47:42,888 --> 00:47:47,118
think there's something wrong with it valid

653
00:47:47,214 --> 00:48:03,462
state something

654
00:48:03,516 --> 00:48:12,710
wrong I have done, so let me do it's

655
00:48:40,790 --> 00:48:45,878
so what we can do, we can simply close this one and

656
00:48:45,964 --> 00:48:50,022
destroy this worker because it has got some error because

657
00:48:50,076 --> 00:48:52,760
of the tink worker I guess.

658
00:48:53,850 --> 00:48:57,382
So what I will do, I will destroy this

659
00:48:57,436 --> 00:49:03,030
one's

660
00:49:07,450 --> 00:49:10,360
yeah so what I will do, I will,

661
00:49:19,490 --> 00:49:23,860
I will tag this latest image with the

662
00:49:24,710 --> 00:49:29,250
registry image and then I will push that

663
00:49:29,320 --> 00:49:35,606
particular image in

664
00:49:35,628 --> 00:49:39,314
the registry itself. So I am pushing the tink

665
00:49:39,362 --> 00:49:42,742
worker latest image in my local registry and

666
00:49:42,796 --> 00:49:46,790
then I will again go to the exec

667
00:49:48,250 --> 00:49:52,600
and then again

668
00:49:55,470 --> 00:50:03,014
I can just say think workflow

669
00:50:03,062 --> 00:50:06,686
get let's see what

670
00:50:06,708 --> 00:50:11,086
are the state of this workflow. So it has not been yet started.

671
00:50:11,268 --> 00:50:14,814
So what we can do, we can go

672
00:50:14,852 --> 00:50:18,158
again destroy this current

673
00:50:18,244 --> 00:50:21,774
worker which has caused the error and then we can start up

674
00:50:21,812 --> 00:50:24,800
again. I hope this works fine.

675
00:50:59,410 --> 00:51:02,954
Got the Ip waiting for the tftp

676
00:51:03,002 --> 00:51:03,790
files,

677
00:51:13,890 --> 00:51:17,106
getting the tb files from the nginx

678
00:51:17,218 --> 00:51:21,030
and through Og from the OG through Nginx

679
00:51:57,970 --> 00:52:05,070
I hope that workshop

680
00:52:05,450 --> 00:52:11,670
here's

681
00:52:29,290 --> 00:52:31,120
the IoT.

682
00:52:37,330 --> 00:52:41,086
Yeah, so this works fine now. So as you can see the

683
00:52:41,108 --> 00:52:44,418
workflow state which I have created is now

684
00:52:44,504 --> 00:52:47,780
100% completed and the state is success.

685
00:52:48,310 --> 00:52:51,518
The worker on which the workflow

686
00:52:51,534 --> 00:52:54,900
was running has this id.

687
00:52:55,210 --> 00:52:58,360
So let's take a look at this.

688
00:53:03,450 --> 00:53:06,294
Yeah so if you take a look at this,

689
00:53:06,412 --> 00:53:09,946
so I have this IId in my hardware which

690
00:53:09,968 --> 00:53:13,466
has this Mac address which I provided as an input when

691
00:53:13,488 --> 00:53:17,750
I created the workflow and this is the ip

692
00:53:17,910 --> 00:53:22,606
it got from the boots through DHCP and

693
00:53:22,628 --> 00:53:26,974
now it is success. You can also check the events of

694
00:53:27,012 --> 00:53:30,750
the particular hardware for the particular actions

695
00:53:34,870 --> 00:53:38,350
if you can see that. Let me minimize

696
00:53:38,430 --> 00:53:39,540
that a bit.

697
00:53:41,670 --> 00:53:46,006
Yeah, so if you can see that IoT is saying that this

698
00:53:46,188 --> 00:53:49,298
action name is servers partitioning, start execution,

699
00:53:49,394 --> 00:53:52,822
that action progress and has taken almost zero

700
00:53:52,876 --> 00:53:56,514
time and finished execution successfully with the action status

701
00:53:56,562 --> 00:54:00,294
success. So we'll go and verify

702
00:54:00,422 --> 00:54:03,754
what happens on this worker. I will

703
00:54:03,792 --> 00:54:07,882
simply log into the lose root and.

704
00:54:07,936 --> 00:54:12,026
Okay, I'll see the worker has completed his task

705
00:54:12,218 --> 00:54:16,826
and exited with zero means. A worker executed

706
00:54:16,858 --> 00:54:24,834
very successfully. So I just go with the logs and

707
00:54:24,872 --> 00:54:28,626
I will take this log in the log file so

708
00:54:28,648 --> 00:54:30,740
that I can go through it.

709
00:54:32,390 --> 00:54:36,214
Okay. Yeah. So this

710
00:54:36,252 --> 00:54:40,006
is like this. So what we

711
00:54:40,028 --> 00:54:43,186
are doing is we are retrying

712
00:54:43,218 --> 00:54:47,142
interval is Iot set. So this is an en variables that you can set or

713
00:54:47,276 --> 00:54:50,554
as per your convenient, right?

714
00:54:50,672 --> 00:54:54,426
And so it got the workflow which

715
00:54:54,448 --> 00:54:58,026
is completed in the completion state. And then it got something,

716
00:54:58,208 --> 00:55:02,014
some other workflow which is not in the completion state. And then

717
00:55:02,052 --> 00:55:05,758
it has started like so it

718
00:55:05,764 --> 00:55:08,590
has got the action name as OS installation.

719
00:55:10,050 --> 00:55:13,226
Sorry, task name as OS installation action

720
00:55:13,258 --> 00:55:16,270
name as server partitioning level. Is this sender?

721
00:55:16,630 --> 00:55:20,114
So what is doing? It is pulling the hello world image which

722
00:55:20,152 --> 00:55:23,250
is there in the action of named as server provisioning.

723
00:55:24,310 --> 00:55:28,194
And then Iot is pulling it from the private

724
00:55:28,242 --> 00:55:30,630
registry, not from the docker hub.

725
00:55:34,170 --> 00:55:37,634
Now it executes the hello world image and it

726
00:55:37,772 --> 00:55:41,050
prints the output in the container itself. And then

727
00:55:41,120 --> 00:55:44,474
it says that, okay, so each

728
00:55:44,512 --> 00:55:49,014
action runs in a different separate container. So it contains

729
00:55:49,142 --> 00:55:52,650
container id is like this,

730
00:55:52,800 --> 00:55:56,800
which is container removed with the status action success.

731
00:55:57,330 --> 00:56:00,766
And then it sent the action state of the

732
00:56:00,788 --> 00:56:04,160
particular workflow to

733
00:56:04,770 --> 00:56:08,210
the think worker. So this is actually

734
00:56:08,280 --> 00:56:12,114
the state which is set by the worker that

735
00:56:12,152 --> 00:56:15,954
I have completed this task successfully. So it says that action

736
00:56:16,002 --> 00:56:19,574
status is success. And that's why here, if you can

737
00:56:19,612 --> 00:56:23,126
see this, got this finished execute successfully with

738
00:56:23,148 --> 00:56:27,154
the accent success. So this workflow

739
00:56:27,202 --> 00:56:30,460
had only one task. If you will see this,

740
00:56:33,790 --> 00:56:37,260
the task name was Os installation, which is there.

741
00:56:37,950 --> 00:56:41,360
The action name was servers partitioning, which is there.

742
00:56:42,130 --> 00:56:45,774
The image is for hello World which is the output of which

743
00:56:45,812 --> 00:56:49,054
is there in this file. You can

744
00:56:49,092 --> 00:56:52,542
see that hello from Docker. This message shows that something

745
00:56:52,596 --> 00:56:56,046
like that, right? Yeah. So this is all

746
00:56:56,068 --> 00:57:00,122
about the demo. So let's go to the sites

747
00:57:00,266 --> 00:57:01,280
back again.

748
00:57:03,330 --> 00:57:07,300
These are the two links, Tinker YG and GitHub.com.

